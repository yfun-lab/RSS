[{"title":"临终关怀——用生命的质量代替无谓的时长","date":"2022-10-09 09:58:19","description":"临终关怀是这场「暴风雨」中唯一可以遮蔽的地方，在医护及家属的陪伴下，就像拥有了可依偎的取暖炉，在我们在生命的最后阶段，可以从容的面对死亡。<p>[......]</p>\n<a href=\"https://sspai.com/prime/story/hospice-care\" target=\"_blank\">查看全文</a><p>本文为会员文章，出自<a href=\"https://sspai.com/prime/precog/single\" target=\"_blank\">《单篇文章》</a>，订阅后可阅读全文。</p>\n","link":"https://sspai.com/prime/story/hospice-care"},{"title":"了解干眼症：让眼里常含泪水，别对屏幕爱得深沉","date":"2022-10-09 08:00:00","description":"在中国有超过 20% 的人口有各种程度的干眼症，今天我们就来聊聊它的成因、症状，以及我们可以做些什么来缓解症状，并防止情况恶化。<a href=\"https://sspai.com/post/76078\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/76078"},{"title":"鼠标搭配 iPadOS，如何设置才能更好用？","date":"2022-10-09 06:28:25","description":"写在前面2019年，苹果正式发布iPadOS，自此iPad就开始支持蓝牙外接鼠标，再次将iPad的生产力提到更高层次，也再次呼应了曾经的那句slogan：你的下一台电脑，何必是电脑。对于自带触控版的电 ...<a href=\"https://sspai.com/post/76060\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/76060"},{"title":"幕后 | 去往「夜之城」的故事背后：CDPR 开发团队核心成员专访","date":"2022-10-09 03:30:00","description":"游戏里和游戏外，《赛博朋克 2077》的开发者想要通过这款游戏传达些什么？ <a href=\"https://sspai.com/post/76056\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/76056"},{"title":"派早报：Steam Deck 开启现货销售模式、特斯拉将交付电动卡车等","date":"2022-10-09 00:29:17","description":"自游家推出大型豪华 SUV、EA 将正式发布新启动器以取代 Origin 等。<a href=\"https://sspai.com/post/76071\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/76071"},{"title":"如何评价《英雄联盟》S13 季前赛改动前瞻？","date":"2022-10-08 10:21:15","description":"\n<p></p>\n<p><img src=\"https://pic1.zhimg.com/v2-d481ed417d6b32db04c605046a68e75a_720w.jpg?source=b1748391?rss\" data-rawwidth=\"64\" data-rawheight=\"64\" data-size=\"normal\" data-caption=\"令人怀念的时光之杖\" data-watermark=\"watermark\" data-original-src=\"v2-d481ed417d6b32db04c605046a68e75a\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"RcebbA_V\">整个前瞻内容非常多，其中最让我觉得开心的还是<b>时光杖和饭盒的回调，还记得之前刺客延迟伤害版本被完全回调的妖姬么</b>。为了方便分类，将重要的内容分解成以下3点。</p>\n<h2>一、地图机制改动</h2>\n<h3>炼金龙回归</h3>\n<p data-pid=\"t2WAvBiF\">还记得在S11初期无敌的炼金龙魂么，尽管改头换面，但是他又回来了。不再像原来一样增加残血伤害和龙魂复活效果，现在的<b>炼金龙偏向于持续作战</b>，小龙增加<b>韧性</b>和<b>治疗护盾强度</b>，龙魂是<b>坚毅不倒</b>的效果。</p>\n<p><img src=\"https://picx.zhimg.com/v2-9bd0e1900203f9baf0f1c33b0cd45d48_720w.jpg?source=b1748391?rss\" data-rawwidth=\"710\" data-rawheight=\"180\" data-size=\"normal\" data-caption=\"炼金龙和龙魂效果\" data-watermark=\"watermark\" data-original-src=\"v2-9bd0e1900203f9baf0f1c33b0cd45d48\" data-watermark-src=\"v2-ea2d7a595f6c94cb3bcecae957811774\" data-private-watermark-src=\"v2-92c502f883dfae4207daeab2dce385e5\"></p>\n<h3>2. 炼金龙地形——植物系统升级</h3>\n<p><img src=\"https://picx.zhimg.com/v2-532c542f42b9810b94f75b45b4c0614b_720w.jpg?source=b1748391?rss\" data-rawwidth=\"841\" data-rawheight=\"229\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-532c542f42b9810b94f75b45b4c0614b\" data-watermark-src=\"v2-3eac8b5b20e51ce756e21041222c7e4c\" data-private-watermark-src=\"v2-f1b90f8a4b85eb0f308f764cc922fc32\"></p>\n<p data-pid=\"X_8j4bYw\">由于我们目前获得的信息很少，根据官方的文章中的描述无法确定是否针对所有植物系统都进行了改动。不过从改动效果来看，应该是仅针对炼金龙地形的改动（即第三条小龙为炼金龙时的地形改变），如有错误请各位谅解。</p>\n<p data-pid=\"UFZmXmuk\">同时，也无法确定原先炼金地形中的视野黑洞——伪装地形是否存在。这里我们假设他已经不存在了（当时具有伪装地形的炼金龙地形可以说是劣势方的噩梦了，完全的视野黑洞）。</p>\n<p data-pid=\"HzKlq_no\">可以看到在新的炼金龙地形中植物系统会成为非常重要的一部分，弹跳果实可能带来的奇迹，蜜糖果实带来的强大的即时战力以及占卜花朵强力的视野控制能力。</p>\n<h2>二、对游戏体验的提升</h2>\n<p data-pid=\"z7MPkaZu\">这一点主要体现在在游戏内外对于游戏品质的提升，无论是加点、符文推荐，还是沟通工具，打野的范围提示，减少拉野技巧带来的信息差，都是为了降低新手玩家和尝试练习新英雄的玩家的上手难度。</p>\n<p data-pid=\"FhI1cHF7\">当然，由于已经有了WEGAME，国服玩家实际上是享受了很久的符文、加点、出装推荐的，这里就不再赘述了。</p>\n<p><img src=\"https://pica.zhimg.com/v2-b3ede7d7eda870ad3d56bc79cdbf412f_720w.jpg?source=b1748391?rss\" data-rawwidth=\"803\" data-rawheight=\"63\" data-size=\"normal\" data-caption=\"缩小拉野范围\" data-watermark=\"watermark\" data-original-src=\"v2-b3ede7d7eda870ad3d56bc79cdbf412f\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"OVRe1D1_\">关于打野位置，相信缩小拉野范围对很多速4英雄会是一个巨大的影响，比如莉莉娅、稻草人、死歌等英雄，这里需要大家去适应新的刷野节奏了。</p>\n<p data-pid=\"8kRRhbsn\">不过也因此，引入了打野宠物（蛋）的新宝宝</p>\n<p><img src=\"https://picx.zhimg.com/v2-0b2e9b332da060baaa178df896a3cd05_720w.jpg?source=b1748391?rss\" data-rawwidth=\"839\" data-rawheight=\"310\" data-size=\"normal\" data-caption=\"打野宠物\" data-watermark=\"watermark\" data-original-src=\"v2-0b2e9b332da060baaa178df896a3cd05\" data-watermark-src=\"v2-fabd75b6b9b091a3b5be1aa468a6eac7\" data-private-watermark-src=\"v2-19d1bb4515db33ddaa403b967b75ea37\"></p>\n<p data-pid=\"b0Jz--cj\">尽管内容很少，我们还是可以看到这种类似于以前灯笼/吞噬者效果的设计。打野英雄的玩法肯定是发生了天翻地覆的变化的。等拳头提供更多信息并在测试服进行相关测试后再对该系统进行评价。</p>\n<p data-pid=\"75esQUKv\">同时，还进一步降低了中路经济，提高了上路经验，降低了下路经验。可能预告了新赛季是上野节奏的版本。</p>\n<h2>三、装备回调</h2>\n<p data-pid=\"jAwXbqKG\">尽管拳头说是新增或升级了12种新装备，但是在仔细看过之后，我发现它们不过就是<b>神话装版本前的各种装备的变种</b>而已，<b>还记得之前刺客延迟伤害版本被完全回调的妖姬么？</b></p>\n<p data-pid=\"BFb1to--\">这两年以来，玩家对于神话装版本的吐槽早已铺天盖地。无论是时光杖的移除导致瑞兹卡萨丁的痛哭，还是冰拳不再具有耀光效果，各种百分比伤害和拉胯的肉装让坦克几乎没有游戏体验，这些吐槽几乎遍地可见。</p>\n<p data-pid=\"ZEhdymQe\">这一次，<b>设计师终于听到了玩家们的呼声了！</b></p>\n<p data-pid=\"y1SCxwJ8\">首先，<b>原有的三件坦克神话装除冰拳外全部变为传说装备</b>，并做了相应的改动。</p>\n<p data-pid=\"2zr0BG7t\">新的坦克装备可以说是抗性拉满。<b>设计师终于意识到了，坦克英雄需要的不是那些越打越高的伤害，而是最基础的面板属性——生命值、护甲、魔抗。</b>由于价格和属性都没有完全确定，下面仅做一句话简评，如有谬误请谅解~</p>\n<p><img src=\"https://pic1.zhimg.com/v2-b36dc1a12ee062cf847c51650a1cf8b7_720w.jpg?source=b1748391?rss\" data-rawwidth=\"854\" data-rawheight=\"419\" data-size=\"normal\" data-caption=\"坦克神话——艾卡西亚之韧\" data-watermark=\"watermark\" data-original-src=\"v2-b36dc1a12ee062cf847c51650a1cf8b7\" data-watermark-src=\"v2-3ca7fd0987803765921c74893b761906\" data-private-watermark-src=\"v2-f4120cffdf4e99e4a3b01009d9c16a9f\"></p>\n<p data-pid=\"x3ips5M_\">可以看到，是一个非常夸张的双抗提供神器，类似于S12时期日炎圣盾的效果。由于提供非常强的双抗和持续作战能力，因此很适合高生命值坦克英雄，如自带生命值提升能力的英雄，如狗头、大虫子等，当然，像鳄鱼这种战士英雄也许也可以考虑，比如破败+艾卡西亚之韧，再配个血手。</p>\n<p><img src=\"https://picx.zhimg.com/v2-9dc9f102c8ebe90a3b46fe448d2301ee_720w.jpg?source=b1748391?rss\" data-rawwidth=\"856\" data-rawheight=\"404\" data-size=\"normal\" data-caption=\"辅助坦克神话装——辉耀美德\" data-watermark=\"watermark\" data-original-src=\"v2-9dc9f102c8ebe90a3b46fe448d2301ee\" data-watermark-src=\"v2-fca651f0add9fc5633da6f3589dba935\" data-private-watermark-src=\"v2-cf1063fddec601c2ec12002007cf6417\"></p>\n<p data-pid=\"kx-uBNyY\">偏向于辅助向的神话装，<b>大招版本的月石再生器，属性类似于S12的冰拳</b>。很适合一些辅助英雄，比如泰坦等。由于特效与大招和队友绑定，大部分单线英雄很难出。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-4a52c2041d8d6ad794a878396e33ef3a_720w.jpg?source=b1748391?rss\" data-rawwidth=\"846\" data-rawheight=\"370\" data-size=\"normal\" data-caption=\"坦克神话装——冰脉护手\" data-watermark=\"watermark\" data-original-src=\"v2-4a52c2041d8d6ad794a878396e33ef3a\" data-watermark-src=\"v2-4ec15b418f119290ff4364f8032269c3\" data-private-watermark-src=\"v2-7fef111ac16e3a284d5cf29dabed75d1\"></p>\n<p data-pid=\"0Kb0zE5O\">冰拳终于回归了。在过去的两年里，坦克英雄都没有耀光系装备可以出。从属性中可以看出，冰拳是唯一的一个只加护甲的神话装，非常适合用来对抗一些物理英雄。终于有一件可以在对线期不亏属性的坦克神话装了（之前由于神话装都是双抗配件，总会亏掉一部分护甲或者魔抗）。<b>非常棒的装备，除了过去冰拳的耀光效果外，还获得了10%的伤害减免，对线能力直接拉满（相当于耀光+小厌恨锁链）</b>。当然，也不知道像冰拳EZ、冰拳赛娜会不会重出江湖。从属性来看，价格应该也不会太贵。</p>\n<p><img src=\"https://pica.zhimg.com/v2-e6a89af26a94b1a8bd15ff3d71c83980_720w.jpg?source=b1748391?rss\" data-rawwidth=\"854\" data-rawheight=\"377\" data-size=\"normal\" data-caption=\"辅助神话装——‘歌利亚的飞升\" data-watermark=\"watermark\" data-original-src=\"v2-e6a89af26a94b1a8bd15ff3d71c83980\" data-watermark-src=\"v2-47c5fb5f26c672e25deb3d597c52c365\" data-private-watermark-src=\"v2-ec064d9ad1b0fc82b1dfe720bc3429ab\"></p>\n<p data-pid=\"0Ps6tBF-\"><b>大号不灭之握</b>，同时，值得注意的是这件装备的属性是完完全全的生命值装备。同样的，神话被动也是提供生命值和体型。大虫子很爽啊。</p>\n<h3>时光杖回调！！！特别加一个二级标题</h3>\n<p><img src=\"https://pic1.zhimg.com/v2-d7cf60f8256ba609897acc70c2d4d361_720w.jpg?source=b1748391?rss\" data-rawwidth=\"852\" data-rawheight=\"565\" data-size=\"normal\" data-caption=\"神话装——时光杖，以及合成配件万世催化石\" data-watermark=\"watermark\" data-original-src=\"v2-d7cf60f8256ba609897acc70c2d4d361\" data-watermark-src=\"v2-84b84c30bbb6e7688b00a0800cf8cad3\" data-private-watermark-src=\"v2-6f52febc60c4c6b7d994977a4ace8083\"></p>\n<p data-pid=\"5uXBSngs\">时光杖回归！万世催化石回归！千呼万唤始出来，时光杖带着跟神话版本前几乎一样的属性归来，还带了一个<b>叠满英雄等级+1</b>的效果（你想到16级卡萨丁了么）和<b>神话被动的技能急速。</b>可以想象价格一定不便宜。</p>\n<p data-pid=\"bsVGQvPG\">饭盒极大的强化了法坦英雄的对线能力，再配合后面的深渊面具，我已经在想象<b>时光杖+女神甲+深渊面具+冰霜之心的瑞兹</b>有多可怕了。<b>一个5000血，5000蓝，高伤害与坦度并存的瑞兹骑脸</b>一定很可怕。季后赛的Doinb看到这个也许会很痛心，如果在季后赛有这些，他的瑞兹就不会被人诟病出肉的问题了。</p>\n<p data-pid=\"iKKf4sbk\">同样的，之前法师仅有的蓝量装就是1300遗失的章节和女神泪，如今也有了第三个选择。</p>\n<p data-pid=\"QnRIbPc4\"><b><i>值得注意的是，时光杖会在叠满时提供等级+1的效果，而低等级所需要的经验显然没有高等级所需要的经验多，因此越晚触发越好。而时光杖本身的属性又是越早享受到越好的，这就需要进行取舍了，是更早拿到属性从而获得更强的战斗力，还是先用别的装备过渡，第二件再出时光杖，以获得更多的经验奖励？大家觉得呢？</i></b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-31c92b1d3f2981eea395fc898fe3174a_720w.jpg?source=b1748391?rss\" data-rawwidth=\"864\" data-rawheight=\"437\" data-size=\"normal\" data-caption=\"传说装备——深渊面具\" data-watermark=\"watermark\" data-original-src=\"v2-31c92b1d3f2981eea395fc898fe3174a\" data-watermark-src=\"v2-4d1abbb606667716bffbf961bec5dbbe\" data-private-watermark-src=\"v2-b8cfc5d60e266c477e8dcf534e4703ad\"></p>\n<p data-pid=\"Ywvz_Nso\">熟悉的配方，根据属性应该是<b>饭盒+魔抗斗篷</b>合成的，最高提供85魔抗。</p>\n<p data-pid=\"sEZ_2bIW\">非常强大的装备，和老深渊面具类似，很适合像瑞兹等法坦英雄。同样的，魔抗装备又新增一员，自然之力饮魔刀之后，又多了一个深渊面具，还有后文中的炼金罐。</p>\n<p data-pid=\"4TUso2Z-\"><b>日炎和炼金罐</b></p>\n<p data-pid=\"cDqqmvBZ\">日炎和炼金罐的改动这里就不再赘述了，<b>日炎</b>是改成了一个带原有被动的<b>护甲装（与S10前的版本类似）</b>，而<b>炼金罐</b>则是改成了带原有被动的<b>魔抗装</b>。由于不再是神话装备，属性提供的也相对一般，适用面应该会降低不少，变成传统的卖特效装备。</p>\n<p><img src=\"https://picx.zhimg.com/v2-48d706549151623f11e60676703ee117_720w.jpg?source=b1748391?rss\" data-rawwidth=\"660\" data-rawheight=\"316\" data-size=\"normal\" data-caption=\"传说装备——兰顿之兆\" data-watermark=\"watermark\" data-original-src=\"v2-48d706549151623f11e60676703ee117\" data-watermark-src=\"v2-7f46391a7250a5ed316c754961f6ab50\" data-private-watermark-src=\"v2-8acfadd7aff95d6fa9d0bae4c25aac04\"></p>\n<p data-pid=\"eAJt8T-v\">兰顿的抗暴击能力又重新回来啦。但是主动效果的降低AD和暴击效果也无了，护甲减少生命值增加。可以看到这变成了一件<b>针对于ADC的装备（当然还有亚索永恩，前提是他们买暴击装哈哈哈）</b>。</p>\n<p><img src=\"https://pica.zhimg.com/v2-b7b5df8cad7d5b79d2e3db7b16ed8ca9_720w.jpg?source=b1748391?rss\" data-rawwidth=\"852\" data-rawheight=\"330\" data-size=\"normal\" data-caption=\"传说装备——朔极之矛\" data-watermark=\"watermark\" data-original-src=\"v2-b7b5df8cad7d5b79d2e3db7b16ed8ca9\" data-watermark-src=\"v2-6c03536a3d778b8db4e7cb5191ade0f2\" data-private-watermark-src=\"v2-98afed37478c5f21f2a4f8888f4810c5\"></p>\n<p data-pid=\"mK2R1SrR\">又一件老装备回归，不过提供的都是被动效果。可以看到它提供了一定的技能急速和机动性，很适合武器、锐雯等英雄。100攻击力就是16的基础技能急速，加上原本提供的20急速，还是挺可观的。不过这件装备更偏向于攻击向的出装，因此还需要看与其他装备（比如死舞、饮魔刀）的对比。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-fbc5dfb2852872e33f529fc515d11910_720w.jpg?source=b1748391?rss\" data-rawwidth=\"819\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"传说装备——贪欲九头蛇\" data-watermark=\"watermark\" data-original-src=\"v2-fbc5dfb2852872e33f529fc515d11910\" data-watermark-src=\"v2-f72d04e4309ad26cd9e8b01de34e4267\" data-private-watermark-src=\"v2-a02919ce51aef2c9be56f4cdc66398fd\"></p>\n<p data-pid=\"k0BTU9QG\"><b>超级远古版本的饮血剑回归</b>，叠满需要50个刀，叠满后提供90攻击力、14%全能吸血和20技能急速。如果不涨价的情况下，3300块可以说是超值。如果涨价的话就不好说了。</p>\n<p><img src=\"https://picx.zhimg.com/v2-69bbb8860b0e1f2d70a9f81bf55b4c89_720w.jpg?source=b1748391?rss\" data-rawwidth=\"348\" data-rawheight=\"120\" data-size=\"normal\" data-caption=\"旧版饮血剑，价格3000\" data-watermark=\"watermark\" data-original-src=\"v2-69bbb8860b0e1f2d70a9f81bf55b4c89\" data-watermark-src=\"v2-e084955ce9adb776e7bbdb3a80a5df72\" data-private-watermark-src=\"v2-7630f75ec520131813ff4d43d33dfdcf\"></p>\n<p data-pid=\"61YUX9c-\">要知道，在远古版本，下路英雄都是裸饮血剑的，当然，也是因为当时的游戏环境和装备匮乏导致的。但是新版贪欲绝对是带来了一个新的滚雪球神器，刚出的时候属性中规中矩（比现在的版本少了5点攻击力），击杀50个单位之后就非常超模了。由于这件装备提供AOE能力，客观上还帮助了你叠加。</p>\n<p data-pid=\"aPGk5qP9\">当然，<b>现在的环境和S2时期已经完全不同了，50个小兵还是很多的</b>。但是，一旦你在线上取得了优势，那这件装备就是非常强大的滚雪球利器了，一些原本出这件装备的英雄会从中获益非常多，比如剑姬、青钢影等。当然，还有星蚀+贪欲的男枪之类的可能性。</p>\n<h2>总结</h2>\n<p data-pid=\"6QBHCF-Q\">总而言之，S13带来的变动是非常大的，特别是新的打野宠物机制以及12件复古流新装备，设计师终于听到了玩家们对于神话版本的不满！装备的回调相信也会带来新一轮的版本英雄，瑞兹、卡萨丁在向我们招守！</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/Ekkles?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Ekkles</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/557579391/answer/2700486345?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">17 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/352065261?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价《英雄联盟》S10 季前赛的改动？</a><br><a href=\"http://www.zhihu.com/question/484075380?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">英雄联盟S11赛季应该怎么跟随版本？</a><br>\n","link":"http://www.zhihu.com/question/557579391/answer/2700486345?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"城市漫步指南：濑户内海的夏天","date":"2022-10-08 09:20:36","description":"突发奇想的旅行8月的东京，酷暑难耐。伴随着高温天气的是愈来愈严重的新冠疫情，每天都有上万的人被感染。因此，我们开启了「东京逃离计划」。我们的第一站是濑户内海，三年一次的濑户内海国际艺术节正在举行，不容 ...<a href=\"https://sspai.com/post/76059\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/76059"},{"title":"如何理解摄影：浅议摄影的创造性","date":"2022-10-08 08:02:06","description":"关于摄影的「创造性」解读。<a href=\"https://sspai.com/post/76044\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/76044"},{"title":"今天是世界候鸟日，来聊聊科技以外的事……","date":"2022-10-08 07:00:00","description":"编注：今天（10月8日）是世界候鸟日，少数派与红树林基金会在深圳福田红树林保护区拍摄了一段视频，你可以点此观看完整视频。感谢vivo为本视频提供设备支持及相关赞助。我们与候鸟大概二十年前，我从东北小城 ...<a href=\"https://sspai.com/post/76066\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/76066"},{"title":"回首 16 载，经典永流传：MacBook Pro 发展史","date":"2022-10-08 06:30:00","description":"众所周知， MacBook Pro 本身的故事，开始于 MacBook Pro 之前。<a href=\"https://sspai.com/post/76007\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/76007"},{"title":"2022年，游戏行业目前现状如何？将会发生哪些变化？","date":"2022-10-08 04:46:01","description":"\n<p data-pid=\"OrPCOgZh\">按：本篇主要内容实际上有大部分来自于和 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/0a6a2dd2a32fe3630aec4d218f71662b\" data-hash=\"0a6a2dd2a32fe3630aec4d218f71662b\" data-hovercard=\"p$b$0a6a2dd2a32fe3630aec4d218f71662b\">@水主</a> 录的一期《游戏矩阵》，由于怹老人家拖延了一个假期没剪辑，而且假期今天就结束了（叹气），在可见会非常忙的Q4里，我应该没有大片时间去记录我对行业的这些观察了，所以就用这个下午做做整理，成此一篇。</p>\n<p data-pid=\"WrHgn6Bl\"><b>太长不看版：前途是光明的，道路是曲直的。</b></p>\n<h2><b>2022年行业的宏观变化</b></h2>\n<p data-pid=\"hbkyjOMq\">对于所有人来说，2022年都不好过。而明年究竟如何，我们更难以下判断。</p>\n<p data-pid=\"O4LnhiM3\">无论是知名经济学家写公众号，还是非著名分析师如我在这儿瞎逼逼，谈2022的时候总要去引用王兴在2019年的蛋逼，也就是2019年是最好的一年论。从理性上来看，真实的十年每况愈下是一个小概率的事件，但是从个人的体验来看，数个月大环境的恶劣就足以让这个每个人感受时代的尘埃。</p>\n<p data-pid=\"403tl_SM\">游戏行业无疑是被这种末日情绪传达得最深的行业，之一。宏观数据并不乐观，无论是第三方平台还是银行研报（天晓得JP Morgan的人怎么把数据编出来的），都预示着今年游戏行业——至少移动游戏行业收入有急剧的下滑。而这种收入下滑的同时也伴随着头部游戏活跃用户数的下滑。</p>\n<p data-pid=\"whR5ddrr\">而情绪对于人的影响或许更加严重在去年秋天的时候，我仍然能够看到数以百计的游戏行业jd被发出，游戏行业就职求职也是重要话题。但到了今年，如果你日常地参与行业群的讨论，会发现更多的关键词是诸如毕业，寒气一类的词。自然，还是有人找到了看上去好的工作，但整体来看，哭泣远多于笑容。</p>\n<p data-pid=\"Xjz-_EY3\">这就是我们所在的2022。但我对于行业本身的态度，反而要比2021年行业鲜花着锦烈火烹油的时候好不少。</p>\n<h2><b>传递寒气，还是保持乐观</b></h2>\n<p data-pid=\"RmzB-pBp\"><b>在2021年上旬的时候</b>，我<b>当时</b>对于行业的看法是行业本身还会有1-3年的好日子可以过，整体的衰退风险来自于2020年下半年开始的投资热潮变现期产品不如预期，以及在产品不如预期的情况下用人成本过高。</p>\n<p data-pid=\"mca-nZAd\">事实是，我被打脸了——作为生产方和销售方中国游戏行业（而非广义上的游戏玩家群体）在去年下旬以来实际上遭受了三重黑天鹅事件的打击。其一，是全球宏观经济变化造成的消费重心转移；其二，是版号冻结200余天导致的悲观情绪；其三，是口罩导致的国内泛互联网生产力的下滑以及消费力的下降。</p>\n<p data-pid=\"28n4pqCM\">而世界看上去还远远没有到最糟的情况。无论是俄乌冲突的持续还是美联储持续加息导致的波动，都让人看着头疼——各种信息会告诉你说，未来还有更多值得焦虑的事情。但是如果我们聚焦在自己所处的行业之上，深呼吸并冷静思考，我们会发现事情其实没有那么糟糕。</p>\n<h3>回望历史，游戏行业其实有理由更乐观一点</h3>\n<p data-pid=\"3KtRtPuM\">如果我们对比08年经济危机期间的情况来看，有个非常值得注意的信息是，从2006年开始，持续到2009年经济危机基本结束。美国的游戏主机整体销量实际上是上升了2.5倍的；而用更近一点，即口罩全球大流行开始的情况来看，算上主机行业的游戏行业整体的增长也翻了1.5倍。</p>\n<p data-pid=\"Hens-i7o\">当然，情况是存在一定的区别。毕竟在08年经济危机之时，各国并没有广泛地印钞发救济。但如果单纯从需求来看，即使是跨境旅游（在海外）回暖的Q2，移动游戏下载也在继续增长。而这其实是在证明玩家仍然有“玩”的需求的。</p>\n<p data-pid=\"nGp1zDg2\">需求既然存在，那么我们实际上可以做出两个方向的判断：要么经济转好，那么人们会在增长中持续消费；要么经济不稳，那么游戏仍然能成为多数普通人的逃避。在这种情况下，至少游戏行业仍然有其生存空间。</p>\n<h3>口红经济与赌博经济</h3>\n<p data-pid=\"nIOy5NDR\">你或许会问，从事实上来看，2022年上半年确实移动游戏收入是存在下滑的。但这点实际上存在多个影响因素。</p>\n<p data-pid=\"KyKQKw7_\">我在很多地方说过，今年移动游戏收入的下滑，跟广告隐私政策更换之后更难精准获量有非常直接的关系。因为泛-游戏产业并不是一个需求决定供给的生态，恰恰相反，除了最为硬核，明确知道自己想玩什么的一小群人之外，大多数人去接触游戏的场景都需要通过社交、营销来完成。</p>\n<p data-pid=\"JKnaa76s\">在这种情况下，<b>广告本身就是一种供给，或至少是供给的重要环节。</b>当这种供给的成本上升之后，必然导致需求回馈的下降。</p>\n<p data-pid=\"Tnu_HLJJ\">另一个比较值得注意的因素则是，在经济环境的不确定中，移动游戏的大额付费确实会下降。我在四五月份封控最严重的时候曾经非正式地访问过一些国内产品的付费情况，依赖大R的产品付费有着显著下降，而大DAU产品反而收入上涨。</p>\n<p data-pid=\"NZyOd43t\">在这一前提下，我们可以发现，移动游戏的大额付费性质更多类似于赌博，而非传统意义上的口红经济。而数据也佐证了一点：从长尾收入来看，即使在整体收入下滑非常厉害的2022年h1，畅销榜排名50-200的游戏收入实际上是有增长的，大R式消费受到的打击会被仍然存在的需求摊平不少。行业本身的规模并不会有太严重的打击。</p>\n<p data-pid=\"RaEvvu4h\">而这正是我相对而言对行业态度比之前乐观的一个原因。在寒气吹拂了差不多半年的现在，很多东西的影响已经可见。这倒不是说未来就一切都好了，我想说的更多还是，事情的发展可控——至少不会真正意义上地出现雅达利崩溃。</p>\n<h2><b>微光时代的挑战</b></h2>\n<p data-pid=\"2pQbB-6q\">一个常见的企业家叙事是，前路黑夜漫漫，但是微光闪烁。走向微光的过程就是走出长夜的过程。在我这篇文章的叙事里，微光是宏观的事情可控，但宏观可控对于个体的命运并不产生直接的影响。</p>\n<h3>最大的问题还是，版号</h3>\n<p data-pid=\"cklTKYIV\">版号其实没太多可谈的，但既然要谈国内的游戏行业，那么还非得谈谈版号。从10月7日这个时间点来看，现在版号发放已经趋于稳定，唯一的不确定因素只剩下了腾讯什么时候有版号——很多第二方拿到了，但真正意义上的利好信号是腾讯本公司什么时候拿。</p>\n<p data-pid=\"HthX4qRO\">这本不该成为问题，但版号就是达摩克利斯之剑，它很大程度上决定了一个游戏项目的生死——出海有自己的问题，高成本，难本地化，用户偏好都是问题，实际上也是老生常谈。在没有了国内市场的情况下，很多项目就没有了存在的理由。</p>\n<p data-pid=\"jOeGwQl6\">悲哀的是，版号的不确定性的影响是会扩散的。在今年年初的时候，和很多行业里的朋友聊，大家会对游戏行业有一种非常直接的悲观：版号预期的一拖再拖不仅会影响到已经在开发的项目，对于投资决策或是发行方拿项目都有影响。简单说，如果没有办法拿到版号，那么资方没有理由再去投资新的项目，也没有理由对已经给过钱的项目继续输血。</p>\n<p data-pid=\"F9S6Or7h\">就导致了在2022年，游戏创业项目被毁约不是独立事件。无论是腾讯还是头条，都有停止打款，让CP自生自灭的事情。而虽然环境险恶，这两家可不至于这点钱都拿不出来。</p>\n<p data-pid=\"BqDsIOOk\">悲哀的是，在“谁拿了版号“或者”谁没拿版号“的讨论之外，我们会发现一个问题，那就是，4月份版号重新发放以来，好像行业的情况并没有好太多。如同房地产限购放开之后，版号的重新发放并未导致行业的回暖。该毕业的还是毕业，寒气的传达畅通无阻。这其实来自于另一个问题。那就是，产品。</p>\n<p data-pid=\"EzB4Kyg3\">某种意义上来说，版号其实只能决定你能不能“卖“一款游戏，但游戏卖得好不好，跟它关系并不大。产品质量才是问题。</p>\n<h3>后Covid时代行业最大的隐患：产品缺乏</h3>\n<p data-pid=\"LnbEx5PK\">除去版号，这两年行业内遭受到的最大的影响，实际上是口罩导致的办公形态的转变以及其对产能的影响。</p>\n<p data-pid=\"wl1v0YWW\">今年新上的游戏其实并不算少，有些产品甚至17年就开始立项。但是我在盘点2022年的游戏新作的时候，悲哀地发现今年的大作就那么几个；而到移动游戏领域，值得一提的新作就猫三两只。而且即使是相对出挑的新作，能够持续运营的时间也有限。这与过去两年的开发环境不无关系。</p>\n<p data-pid=\"6eGk8vJT\">在全球范围内，口罩对于产能的影响是非常非常非常大的。除了独立作品之外，游戏仍然需要在办公室里，在集体讨论、争执以及加班中完成。我相信这点会在全球差旅环境变化之后，有很大的改善。</p>\n<p data-pid=\"O7M8LlnQ\">从大趋势来看，游戏的开发仍然处在我一直在说的“两极化”情况里：要么“更大，更复杂，更3A“，要么就是“更小而美”。但能否持续地生产“新”的体验是一个亟需解决的问题。</p>\n<p data-pid=\"IOXiO6WS\">大项目而言，一些我2020年底就知道的项目现在仍然在“锐意开发中“，能悄悄测试都已经是很好的结果了。但这些在口罩之前立项的产物，很难说能够符合新用户的需求。小项目则是另一个故事，今年这方面的好结果不少——但小项目成功率是有限的。</p>\n<p data-pid=\"McQ77e1i\">机会当然是存在的，本地化做深，发行策略调整，产品换方向都是路子。不过写文章谈实操本身就扯淡，就不谈这些了。</p>\n<h2><b>地缘政治对于行业的未来影响</b></h2>\n<p data-pid=\"XyRskDtL\">地缘政治不是所有人的问题，但对于中国开发者来说，确实需要思考一下。但这部分主要也就是纸上谈兵一下。</p>\n<h3>人力集中行业的本质与新加坡作为运营中心的未来</h3>\n<p data-pid=\"Dk1Z6PkG\">真正的变化实际上是决策者的心态变化。我们可以很明显地看到六月以来，上海的老板们基本上或高调或低调地去了新加坡。</p>\n<p data-pid=\"QE1rL6zE\">决策的原因显而易见，但这其实给很多人留下了一个问题，那就是当老板们都在新加坡设立分部之后，游戏行业会不会受到打击。</p>\n<p data-pid=\"gkPTZGHk\">我的答案是，很难。游戏行业实际上是一个人力集中的行业，人力就是生产力的来源。而新加坡实际上是没有办法去承接这部分产能的。在目前动辄一个项目百人的情况下，新加坡仍然没有办法去承接过多的开发。成本扛不住是一个问题，新加坡城市本身的定位也跟这种集约化工业生产相悖。</p>\n<p data-pid=\"-HeZNpoE\">在这种情况下，新加坡或者阿姆斯特丹这样的城市，会成为一个枢纽（以及法律上钻空子的总部），从业者的绝大部分，应该还是会本土发展。</p>\n<p data-pid=\"-07QITF3\">全球化外包当然也是一个趋势——对于很多从业者来说也可以说是“隐患“。从现实来看，刘哥（ <a class=\"member_mention\" href=\"http://www.zhihu.com/people/3c6875f55a68ac387e2cde7071a3ceae\" data-hash=\"3c6875f55a68ac387e2cde7071a3ceae\" data-hovercard=\"p$b$3c6875f55a68ac387e2cde7071a3ceae\">@刘嘉俊</a> ）在20年提出的一三五理论仍然奏效，某种程度上，初级从业者要感谢口罩把这个进程缓解了2-3年，但在一些大规模的项目上，我们不可避免地发现有着更好审美基础和市场认知，而且便宜很多的东欧人已经出现了。</p>\n<h3>我们在世界上的位置</h3>\n<p data-pid=\"WsK-xPlp\">我觉得俄罗斯，哦不，塞浦路斯的游戏公司巨头是一个值得深入研究的对象。在俄乌冲突最剧烈的日子里，playrix还在赚着美国的钱。所以，资本主义还是有他们的好处，不是吗。</p>\n<p data-pid=\"NsUpdIW-\">我不认为我们会遇到类似的情况，本质上来说，在8月初的事件之后，我就不是特别担心在可见的未来，中国游戏行业会受到地缘政治的影响了。</p>\n<p data-pid=\"Qw4FwVMC\">但多想想，应该问题不大。而这段还是没法写太多。</p>\n<h2><b>下一个阶段，一胜九败？</b></h2>\n<p data-pid=\"_gaoT2OB\">通常写这种总结类宏观文章，最后都要展望一下未来。但实际上我对未来的态度更多还是走到谷底怎么都是向上，所以一把梭哈空进去死了算了，的态度。我无法回答的是现在的黑暗还有多远（很可能最终会比悲观者想的短很多），但我目前能够看到的只有两个小方向的变化。</p>\n<h3>休闲的胜利？</h3>\n<p data-pid=\"tJeZBi_A\">今年休闲游戏其实赚得很多。最近的两个例子是《弹壳特攻队》和《X-Heroes》。而从后口罩时代的用户组成来看，推出这方面的游戏实际上是能够承接他们持续的需求，以及相对下降的直接付费意愿的。</p>\n<p data-pid=\"iFh94b1N\">更多的场景下，休闲游戏的发行要比游戏本身重要得多，怎么买量，怎么买到合适的用户，要比做一个更创新的游戏有意义得多。</p>\n<h3><b>技术革新？似乎有点慢</b></h3>\n<p data-pid=\"dp4u4iE-\">说白了就是VR和云。而其他更多的方向是更虚无缥渺的。</p>\n<p data-pid=\"0iLqiV8T\">我实际上很相信VR会终究成为一个更加主流的平台，至少是一个单平台主机级别的水平。但最大的问题还是VR内容没有太多的吸引力能够吸引人去玩，即使是Alyx也不能。</p>\n<p data-pid=\"GIeET1_l\">Meta也好还是另外一家国内巨头也好，往VR砸钱其实是值得欣赏的，但用脚都能想到这些砸的钱去哪儿了。这就很尴尬。</p>\n<p data-pid=\"qljy1F11\">云游戏的成功在云原神上面很明显，但你很难说这到底是因为云还是原神。毕竟Stadia砸了那么多钱现在也没了不是吗。</p>\n<p data-pid=\"dRjXHBIt\">而在目前的经济情况下，我也不是特别看好会有很多创新类产品出来，毕竟这是一个利润大于增长的年代。</p>\n<h3>What's next？</h3>\n<p data-pid=\"Rll41MUE\">归根结底我对未来是有信心的，但确实这不是最好的日子。能说的无非是引用一些名人名言作为结尾。</p>\n<p data-pid=\"7-DEg0yS\">但这些都会过去。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/question/551231716/answer/2705219750?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\">知乎用户（登录查看详情）</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/551231716/answer/2705219750?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">16 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/512362813?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2022 年游戏行业会迎来哪些变化？</a><br><a href=\"http://www.zhihu.com/question/522719027?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2022 年游戏行业会有哪些好的变化？</a><br>\n","link":"http://www.zhihu.com/question/551231716/answer/2705219750?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"一日一技 | 妙用 Keynote 实现数据可视化","date":"2022-10-08 03:30:31","description":"为同一篇文章的配图，既然数据来源不同，各份报告的设计不一致，那么作者也就有统一视觉效果的责任；而相比 PS 等传统制图工具，Keynote 灵活简单，要修改文件中的数据也很方便，更是可以直接制作动画。<a href=\"https://sspai.com/post/76001\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/76001"},{"title":"2022 年诺贝尔化学奖授予点击化学和生物正交化学，夏普莱斯第二次获奖，有哪些信息值得关注？","date":"2022-10-06 14:03:01","description":"\n<p data-pid=\"1Qoxqmwe\">不得不感叹</p>\n<p data-pid=\"3MY1gOdC\"><b>Nobel Chemistry Prize 2001</b></p>\n<p data-pid=\"C-esC9aH\"><i>for his work on chirally catalysed oxidation reactions</i></p>\n<p data-pid=\"CRDi4Brw\"><b>Nobel Chemistry Prize 2022</b></p>\n<p data-pid=\"jsvBigKc\"><i>for the development of click chemistry &amp; bioorthogonal chemistry</i></p>\n<p><img src=\"https://picx.zhimg.com/v2-43a6ed73c67f38b5aadfdf757cc73aa3_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1504\" data-rawheight=\"907\" data-watermark=\"original\" data-original-src=\"v2-43a6ed73c67f38b5aadfdf757cc73aa3\" data-watermark-src=\"v2-3a09298ad5a9c9cbfa37bdc11df54900\" data-private-watermark-src=\"v2-6f30d94d995bcf599fd5eb96bc6ce32c\"></p>\n<hr>\n<p data-pid=\"rhQ5b4_f\"><b>Karl Barry Sharpless</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-11d74c55c8c7b03d07fe119efa4cd123_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1094\" data-rawheight=\"729\" data-watermark=\"original\" data-original-src=\"v2-11d74c55c8c7b03d07fe119efa4cd123\" data-watermark-src=\"v2-40df1dfd350856783d4c72bfdcdc2ba1\" data-private-watermark-src=\"v2-54ebf32ca30235598cbb87b0f2cc3a35\"></p>\n<p><img src=\"https://picx.zhimg.com/v2-b39085e9cec1a62963cdc2fe06b363f4_720w.jpg?source=b1748391?rss\" data-caption=\"PS: 大概是这根笔的最高光时刻，以及还给我了~\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1365\" data-watermark=\"original\" data-original-src=\"v2-b39085e9cec1a62963cdc2fe06b363f4\" data-watermark-src=\"v2-357fee11af0f815fab4c05009463b0c0\" data-private-watermark-src=\"v2-3f4471a197c8415a2ba9fd24f5df08f6\"></p>\n<p><br></p>\n<p><img src=\"https://picx.zhimg.com/v2-e66425ece8ecb2d44a60872f210aaf46_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1365\" data-watermark=\"original\" data-original-src=\"v2-e66425ece8ecb2d44a60872f210aaf46\" data-watermark-src=\"v2-403947531234d762f21d1b99fe1495f1\" data-private-watermark-src=\"v2-22c10c490d4e62a3a096e90bd131bbde\"></p>\n<p><br></p>\n<p><img src=\"https://picx.zhimg.com/v2-da0952306a664e693e9991cd7d58e69f_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1365\" data-watermark=\"original\" data-original-src=\"v2-da0952306a664e693e9991cd7d58e69f\" data-watermark-src=\"v2-c7620bfd8b873a2e8c421f6e8f04ee83\" data-private-watermark-src=\"v2-93173d11760a30ff8ac44cab0f936af3\"></p>\n<p><br></p>\n<p><img src=\"https://picx.zhimg.com/v2-4fde830a76c3a4b00e10d69d3f89d2ff_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1365\" data-watermark=\"original\" data-original-src=\"v2-4fde830a76c3a4b00e10d69d3f89d2ff\" data-watermark-src=\"v2-27460d6c4ba922daaa9c600a9c793bbe\" data-private-watermark-src=\"v2-19d64a9e2b4bf5b0ab0086cb464e833a\"></p>\n<hr>\n<h2>前言</h2>\n<p data-pid=\"-bQTXg4O\">继<b>Friedrich Sanger</b>之后，<b>Barry Sharpless</b>成为了第二位获得两次诺贝尔化学奖的科学家，放眼至所有方向，此前获得两次诺贝尔科学奖的也只有包括<b>居里夫人</b>、<b>John Bardeen</b>和<b>Friedrich Sanger</b>在内的三人。此外，Sharpless两次获奖均在本世纪，且仅相隔21年，不得不说是一项殊荣。</p>\n<p data-pid=\"8yQpsF-P\">2001年，<b>Barry Sharpless</b>因其开发的两个不对称反应方法学——<b><i>Sharpless不对称环氧化与双羟基化反应</i></b>，与<b>William Knowles</b>、<b>野依良治</b>共同获得了当年的诺贝尔化学奖，且独占其中的一半<sup data-text=\"Nobel Chemistry Prize 2001\" data-url=\"https://www.nobelprize.org/prizes/chemistry/2001/summary/\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"1\">[1]</sup>。在上述两个反应中，可通过改变催化剂的立体结构，高效获得所需特定构型的环氧/二醇产物，因而可用于各种天然产物和药物的合成工作中。而当年诺贝尔奖的主题——<b>Chirality/手性</b>，也是对这三位获奖者工作的一个精辟总结。</p>\n<p><img src=\"https://picx.zhimg.com/v2-c407623b71e50cbf75310bc637cc9af4_720w.jpg?source=b1748391?rss\" data-caption=\"2001 Nobel Chemistry Prize\" data-size=\"normal\" data-rawwidth=\"1502\" data-rawheight=\"902\" data-watermark=\"original\" data-original-src=\"v2-c407623b71e50cbf75310bc637cc9af4\" data-watermark-src=\"v2-61d8445559b338bd5f4ad47a007d6c6b\" data-private-watermark-src=\"v2-3214d69a6aa552366657db21d354e51a\"></p>\n<p><img src=\"https://picx.zhimg.com/v2-c5b9f22f80164563985c32f4656651e8_720w.jpg?source=b1748391?rss\" data-caption=\"2001 - Sharpless不对称环氧化反应\" data-size=\"normal\" data-rawwidth=\"1084\" data-rawheight=\"583\" data-watermark=\"original\" data-original-src=\"v2-c5b9f22f80164563985c32f4656651e8\" data-watermark-src=\"v2-34fd09fdb2b805b0a63f3defbb1c1ece\" data-private-watermark-src=\"v2-7e8cc5bf219255340595b99f965c0835\"></p>\n<p><img src=\"https://pica.zhimg.com/v2-599d6661e0d16a64226ffcca032aee58_720w.jpg?source=b1748391?rss\" data-caption=\"2001 - Sharpless不对称双羟基化反应\" data-size=\"normal\" data-rawwidth=\"1112\" data-rawheight=\"578\" data-watermark=\"original\" data-original-src=\"v2-599d6661e0d16a64226ffcca032aee58\" data-watermark-src=\"v2-b16ab827ed6f22b5be35500519ef0b43\" data-private-watermark-src=\"v2-18b19365fe182b4778ee2d8c975b3472\"></p>\n<p data-pid=\"k_EpYaZY\">对于绝大多数人而言，诺贝尔奖更接近于一种终身成就和总结，获奖工作除极少数之外都是在十数年前便已得到公认，甚至有一些做出过巨大贡献的科学家终其一生都未能获得；更不用说，获得过两次诺贝尔奖的科学家是字面意义上的屈指可数，甚至比能在元素周期表上千古留名的还要少见。</p>\n<p data-pid=\"PeHKc2SA\">Sharpless完全可以在自己60岁获奖后退休安享晚年，但因为获奖后不久的一项独特的工作——叠氮与炔烃的1,3-偶极环加成反应，他从中窥见了无限的可能。因而，他不仅并未就此告别学术舞台，反倒日益奋进，在全球各地的合作课题组均有Sharpless活跃的身影。</p>\n<p data-pid=\"jOuusjY7\">最终，在21年之后，他再次得到了诺贝尔奖的垂青<sup data-text=\"Nobel Chemistry Prize 2022\" data-url=\"https://www.nobelprize.org/prizes/chemistry/2022/summary/\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"2\">[2]</sup>。</p>\n<h2>Part I - RING</h2>\n<p data-pid=\"W3wqDFRb\"><i>众所周知</i>，<b>成环</b>是碳元素的化学——有机化学中一个独特而重要的领域。</p>\n<p data-pid=\"SBg3JgaF\">相对于其他元素而言，6号元素碳具有合适的原子半径与电子结构，其化学键的丰富性使得含有碳的化合物——<b>有机物</b>的种类仅以周期表一席之地，便占据了人类已知的绝大多数。同时，碳元素以并不算高的地球元素丰度构建出如今生机勃勃的生物圈，也是生命体的重要组成部分。</p>\n<p data-pid=\"k3Upeo8k\">在有机物中，一大类代表性化合物是由碳原子和/或杂原子构成的环状化合物。事实上，蛋白质的组成——<b><i>21种氨基酸</i></b>中，就包括了5种环状化合物；以及在遗传因子的载体——<b>DNA</b>中，脱氧核糖与全部的ATGC碱基中均含有一个或多个环系。</p>\n<p><img src=\"https://picx.zhimg.com/v2-beb32b43311fb1c460acaad87a664b66_720w.jpg?source=b1748391?rss\" data-caption=\"现今已修正为21种氨基酸，增加了一种含Se的氨基酸\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1536\" data-watermark=\"original\" data-original-src=\"v2-beb32b43311fb1c460acaad87a664b66\" data-watermark-src=\"v2-a1c595f882a8c59097039ec673f1bbff\" data-private-watermark-src=\"v2-7bb9a14e8f0f98ddca102266e3717b41\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-e1f83d13035d53d4f6bb911d21131d67_720w.jpg?source=b1748391?rss\" data-caption=\"DNA与RNA的碱基结构(ATGC/AUGC)\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"1600\" data-watermark=\"original\" data-original-src=\"v2-e1f83d13035d53d4f6bb911d21131d67\" data-watermark-src=\"v2-cce5e3daf290f7d1c8cc2f053ea64750\" data-private-watermark-src=\"v2-6fab2405da13297316ed5dd0b64b5e4b\"></p>\n<p data-pid=\"hOXmnald\">在各种大小的环状结构中，<b>五元环</b>与<b>六元环</b>是最为常见和稳定的两种环系，在千百万年来的化学进化中，生物体内也积累了海量的环状生物活性分子；与此同时，生物体中大量的非碳原子/<b>杂原子</b>也常常参与环系的形成。因而，对于现今的生物化学和医药领域，研究<b>杂环化合物</b>的合成与反应便显得十分重要且富有挑战性。</p>\n<p data-pid=\"u9g21gDm\">而本次的获奖工作中，基于<b>叠氮化合物和炔烃的1,3-偶极环加成反应/Huisgen反应</b><sup data-text=\"Azide-alkyne Huisgen cycloaddition\" data-url=\"https://en.wikipedia.org/wiki/Azide-alkyne_Huisgen_cycloaddition\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"3\">[3]</sup>及其改进是点击化学领域的基础与核心，其产物正是一个五元环的杂环三唑化合物。</p>\n<p><img src=\"https://picx.zhimg.com/v2-e7acf63b5863ed0bb2f807b0e5f82d6f_720w.jpg?source=b1748391?rss\" data-caption=\"原版Huisgen反应\" data-size=\"normal\" data-rawwidth=\"1362\" data-rawheight=\"192\" data-watermark=\"original\" data-original-src=\"v2-e7acf63b5863ed0bb2f807b0e5f82d6f\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<h2>Part II - Copper!</h2>\n<p data-pid=\"Sonh-9Mm\">事实上，<b>Huisgen</b>早在1961年就报道了这一反应<sup data-text=\"Centenary Lecture - 1,3-Dipolar Cycloadditions\" data-url=\"https://pubs.rsc.org/en/content/articlelanding/1961/PS/ps9610000357\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"4\">[4]</sup>，但一开始，该反应并未受到太多重视。其原因多种多样，包括叠氮化合物的毒性与爆炸性、激烈的加热反应条件、反应的混合产物……</p>\n<p data-pid=\"bRzMX_l7\">直到2002年，<b>Meldal</b>与<b>Sharpless</b>分别独立地发现了Cu(I)催化的Huisgen反应<sup data-text=\"Peptidotriazoles on Solid Phase: [1,2,3]-Triazoles by Regiospecific Copper(I)-Catalyzed 1,3-Dipolar Cycloadditions of Terminal Alkynes to Azides\" data-url=\"https://pubs.acs.org/doi/10.1021/jo011148j\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"5\">[5]</sup><sup data-text='A Stepwise Huisgen Cycloaddition Process: Copper(I)-Catalyzed Regioselective \"Ligation\" of Azides and Terminal Alkynes' data-url=\"https://onlinelibrary.wiley.com/doi/10.1002/1521-3773(20020715)41:14%3C2596::AID-ANIE2596%3E3.0.CO;2-4\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"6\">[6]</sup>，室温下反应物于水性溶液中反应，即可高效获得高纯度产物，且具有极高的区域选择性，可生成所需特定结构的单一产物。</p>\n<blockquote data-pid=\"uh8z_U3L\">以上论文也是奖金评选与分配的重要依据。<br><br><i>以及，这可能是JOC的最高光时刻之一。</i>\n</blockquote>\n<p><img src=\"https://picx.zhimg.com/v2-7f9b2f19c815fdf220626f845aa242b6_720w.jpg?source=b1748391?rss\" data-caption=\"Meldal论文封面图 - JOC\" data-size=\"normal\" data-rawwidth=\"3911\" data-rawheight=\"1170\" data-watermark=\"original\" data-original-src=\"v2-7f9b2f19c815fdf220626f845aa242b6\" data-watermark-src=\"v2-2ae6f1ef1476ec069db9ffc42fe4b1d4\" data-private-watermark-src=\"v2-a6640b137227687ecb959c046fcb2a7c\"></p>\n<p><img src=\"https://picx.zhimg.com/v2-d09adda7083895914b2e3f5bc8b7bd35_720w.jpg?source=b1748391?rss\" data-caption=\"Sharpless论文封面图 - Angew. Chem. Int. Ed.\" data-size=\"normal\" data-rawwidth=\"580\" data-rawheight=\"217\" data-watermark=\"original\" data-original-src=\"v2-d09adda7083895914b2e3f5bc8b7bd35\" data-watermark-src=\"v2-eb7106215ae9cf464b0e21d74c47c0c8\" data-private-watermark-src=\"v2-00c8e12b8b79b64b17327dc6e2733a33\"></p>\n<p data-pid=\"YbPYrywf\">在避免了被<i>Angewandte Chemie</i>拒稿的命运后(引用自<a href=\"https://www.zhihu.com/question/557810306/answer/2702630190\" class=\"internal\">Plato的回答</a>)，Sharpless敏锐地意识到这一方法学的普适性，并开始拓展各种底物与探索反应条件。在充分探索总结后，Sharpless称之为<b>CuAAC反应</b>，也即铜<b>(Cu)</b>催化的叠氮<b>(A)</b>-炔烃<b>(A)</b>1,3-偶极环加成反应<b>(C)</b>。</p>\n<p data-pid=\"qz4sr3AB\">该反应的效率之高，准确性之强，可以实现指哪打哪的效果，于是乎，<i>在Sharpless夫人的提示下</i>，<b>点击化学/click chemistry</b>这一概念就诞生了。正如快门一声“Kodak”一样，点击化学就像安全带的卡扣般，两部分“Click”一声便可牢固结合，这正是其名字的来源。</p>\n<p><img src=\"https://picx.zhimg.com/v2-824d1a48bcb492c9cc6142b2b9256320_720w.jpg?source=b1748391?rss\" data-caption=\"©Johan Jarnestad/The Royal Swedish Academy of Sciences\" data-size=\"normal\" data-rawwidth=\"1654\" data-rawheight=\"1785\" data-watermark=\"original\" data-original-src=\"v2-824d1a48bcb492c9cc6142b2b9256320\" data-watermark-src=\"v2-76830271a6bd2c34c5decd1093488746\" data-private-watermark-src=\"v2-4d5bc5175c0085c59cf454f4e70eeac9\"></p>\n<h2>Part III - NO COPPER!!</h2>\n<p data-pid=\"lvtreKDu\">时间进入二十一世纪，也就是<i>生命科学的世纪</i>。</p>\n<p data-pid=\"fJtxh3s8\">在高通量反应系统、计算化学、结构生物学等领域的长足进步下，<b>化学生物学</b>与<b>生物化学</b>的进展突飞猛进。而人类已经不满足于对生物体的静态观测，转而开始探索动态生命过程的追踪方法。</p>\n<p data-pid=\"6Gd5jjml\">2000年，<b>Carolyn Bertozzi</b>发现，可以通过改造已有的Staudinger反应，同样借助叠氮化合物，修饰细胞膜表面的糖基，以实现对细胞膜表面糖蛋白的标记和追踪<sup data-text=\"Cell Surface Engineering by a Modified Staudinger Reaction\" data-url=\"https://www.science.org/doi/10.1126/science.287.5460.2007\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"7\">[7]</sup>。但该反应的效率过低，还有会被生物体氧化代谢的可能，亟需进一步改进。</p>\n<p><img src=\"https://picx.zhimg.com/v2-3ae7617e2362efefcb6429544f90066e_720w.jpg?source=b1748391?rss\" data-caption=\"改进的Staudinger反应\" data-size=\"normal\" data-rawwidth=\"1726\" data-rawheight=\"303\" data-watermark=\"original\" data-original-src=\"v2-3ae7617e2362efefcb6429544f90066e\" data-watermark-src=\"v2-254c76f1764cbb39aec2fc15e3c433fb\" data-private-watermark-src=\"v2-49a444fafb39aece7cba94b146add8bb\"></p>\n<p data-pid=\"eZ_E9cNn\">此时，Bertozzi也看到了Sharpless的CuAAC方法学，并试图将该反应搬运至活细胞中。她意识到，该反应的关键——铜催化剂具有较高的毒性，直接使用该反应会导致细胞死亡。实验陷入了瓶颈。</p>\n<p data-pid=\"8hkZBxio\">在有机化学的启示下，通过将底物更换为高张力的<b>环辛炔衍生物</b><sup data-text=\"Copper-free click chemistry for dynamic in vivo imaging\" data-url=\"https://www.pnas.org/doi/abs/10.1073/pnas.0707090104\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"8\">[8]</sup><sup data-text=\"Second-Generation Difluorinated Cyclooctynes for Copper-Free Click Chemistry\" data-url=\"https://pubs.acs.org/doi/full/10.1021/ja803086r\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"9\">[9]</sup><sup data-text=\"Rapid Cu-Free Click Chemistry with Readily Synthesized Biarylazacyclooctynones\" data-url=\"https://pubs.acs.org/doi/full/10.1021/ja100014q\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"10\">[10]</sup>(后续又采用了<b>反式环辛烯</b><sup data-text=\"Tetrazine Ligation: Fast Bioconjugation Based on Inverse-Electron-Demand Diels−Alder Reactivity\" data-url=\"https://pubs.acs.org/doi/full/10.1021/ja8053805\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"11\">[11]</sup>等)，由于反应后直线型三键变为键角较小的双键(或环内反式双键变为更自由的单键)，释放了底物的环张力，故可大幅提升反应活性，使得该反应在<b>无需外加铜催化剂</b>的条件下即可高效进行，直接盘活了整个流程；同时，该反应去除了毒性催化剂，对细胞甚至生物活体的生理过程几乎没有任何影响，同时生物体内的反应对所要引入的人工反应体系也毫无阻碍，甚至可以实现对生物体的活体荧光标记<sup data-text=\"Copper-free click chemistry for dynamic in vivo imaging\" data-url=\"https://www.pnas.org/doi/abs/10.1073/pnas.0707090104\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"12\">[12]</sup><sup data-text=\"In Vivo Imaging of Membrane-Associated Glycans in Developing Zebrafish\" data-url=\"https://www.science.org/doi/abs/10.1126/science.1155106\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"13\">[13]</sup>。</p>\n<p><img src=\"https://pica.zhimg.com/v2-e351e9531157382421f7acc503af9e82_720w.jpg?source=b1748391?rss\" data-caption=\"两种高张力环的环加成反应\" data-size=\"normal\" data-rawwidth=\"1607\" data-rawheight=\"661\" data-watermark=\"original\" data-original-src=\"v2-e351e9531157382421f7acc503af9e82\" data-watermark-src=\"v2-f828efe500a02cd72b79e5537018995b\" data-private-watermark-src=\"v2-8107eb75699aa1fc64036c932a93db96\"></p>\n<p data-pid=\"6rbKP5Wj\">Bertozzi将其总结为<b>张力驱动的叠氮-炔烃1,3-偶极环加成反应(Strain-promoted Azide-Alkyne Cycloaddition, SpAAC)</b>，而后，她也给这一类高效安全的活体内反应取了一个响亮的名字——<b>生物正交反应</b><sup data-text=\"Bioorthogonal Chemistry: Fishing for Selectivity in a Sea of Functionality\" data-url=\"https://onlinelibrary.wiley.com/doi/abs/10.1002/anie.200900942\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"14\">[14]</sup><b>，</b>意为正如相互垂直/正交的几何关系一样，人工引入的反应体系与生物体内的生化反应之间互不干扰。</p>\n<blockquote data-pid=\"jkR_mDYg\"><i>Storytelling是科研的一环，不爽不要玩~</i></blockquote>\n<p><img src=\"https://picx.zhimg.com/v2-97ede159ea8c1e30430c691de1820718_720w.jpg?source=b1748391?rss\" data-caption=\"1. 将含叠氮基团的单糖分子用于培养细胞；2. 该单糖在细胞内转化为膜表面的糖蛋白，进而引入叠氮基；3. 加入带有绿色荧光片段的环辛炔衍生物，与多糖中的叠氮基发生Click反应，使糖蛋白被荧光标记；4. 借此可追踪细胞膜上糖蛋白的动态过程。©Johan Jarnestad/The Royal Swedish Academy of Sciences\" data-size=\"normal\" data-rawwidth=\"1472\" data-rawheight=\"1113\" data-watermark=\"original\" data-original-src=\"v2-97ede159ea8c1e30430c691de1820718\" data-watermark-src=\"v2-a3377732d37827593770eff9bea1d2f3\" data-private-watermark-src=\"v2-12d01833127c4ae538c29a0e74851740\"></p>\n<p><img src=\"https://picx.zhimg.com/v2-3b8d074799a809f7390b1b5f8b5e0945_720w.jpg?source=b1748391?rss\" data-caption=\"对活细胞进行多重荧光标记\" data-size=\"normal\" data-rawwidth=\"1350\" data-rawheight=\"898\" data-watermark=\"original\" data-original-src=\"v2-3b8d074799a809f7390b1b5f8b5e0945\" data-watermark-src=\"v2-9e9175f0dd08ff09dcbc4470207d0692\" data-private-watermark-src=\"v2-e3d033995ab14f80bb984c00493b5ad9\"></p>\n<p><img src=\"https://picx.zhimg.com/v2-bb531a10235ae51bae382f97a625ec96_720w.jpg?source=b1748391?rss\" data-caption=\"对斑马鱼活体进行多重荧光标记\" data-size=\"normal\" data-rawwidth=\"714\" data-rawheight=\"602\" data-watermark=\"original\" data-original-src=\"v2-bb531a10235ae51bae382f97a625ec96\" data-watermark-src=\"v2-2b38d849248ea3e870579134153a19ff\" data-private-watermark-src=\"v2-3afc14bb8298482403be5b51b3f788c9\"></p>\n<p data-pid=\"tPTyoqLY\">而今，<b>Morten Meldal</b>、<b>Barry Sharpless</b>和<b>Carolyn Bertozzi</b>由于在各自的领域创造性运用了叠氮-炔烃环加成反应，并开创了点击化学和生物正交反应这两个全新领域，共同分享了2022年诺贝尔化学奖。</p>\n<p><img src=\"https://picx.zhimg.com/v2-84b55eb8901d8d0cc6b9db5d57a41ac7_720w.jpg?source=b1748391?rss\" data-caption=\"©Johan Jarnestad/The Royal Swedish Academy of Sciences\" data-size=\"normal\" data-rawwidth=\"1241\" data-rawheight=\"823\" data-watermark=\"original\" data-original-src=\"v2-84b55eb8901d8d0cc6b9db5d57a41ac7\" data-watermark-src=\"v2-dabc165552c331c6d8a055ceacb89c79\" data-private-watermark-src=\"v2-1eb951118592ab17549325493e3a2076\"></p>\n<h2>后话</h2>\n<p data-pid=\"gX1qAqhZ\">事实上，三位获奖者的研究方向仍然有微妙的区别。Meldal从事传统有机化学反应研究；Sharpless主要从有机反应方法学出发，探索化学生物学与药学等领域；而Bertozzi则是一个生物化学工作者，研究生命体内的动态过程。可能正因如此，并考虑到各自独立的贡献，评奖委员会最终决定三人均分该年度的奖项。</p>\n<p data-pid=\"UiSWcayP\">点击化学反应的产物——三唑类衍生物是很多药物分子的重要前体，其结构通过适当的改造可以快速获得多种多样的活性结构，此外其方法学的完备性使得该反应有改造为高通量反应的潜力。因而此反应在有机化学的本职工作与药物制造等领域的潜力巨大。</p>\n<p data-pid=\"bI5jIUsL\">而生物正交反应可以高效标记生物体内的特定分子，相对于2008年诺贝尔化学奖的成果——<b>绿色荧光蛋白(GFP)</b><sup data-text=\"Green Fluorescent Protein\" data-url=\"https://en.wikipedia.org/wiki/Green_fluorescent_protein\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"15\">[15]</sup>而言，小分子标记更加灵活便捷，且影响生物体的生理过程的可能性更低，影响可能更为深远。</p>\n<p data-pid=\"lxeCol5W\">最后的最后，机缘巧合之下在上海与Sharpless有一面之缘，交谈中完全看不出来是78岁(2019年)的老人，思维仍然十分活跃，而且身体也很硬朗，洋溢着科学家旺盛的生命力。而今终于得偿所愿，可以说是天道酬勤。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/hakurei_reimu?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">博丽灵梦</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/557810306/answer/2702654423?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">159 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/545955910?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">你对于 2022 年诺贝尔化学奖的预测是什么？</a><br><a href=\"http://www.zhihu.com/question/475179551?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">你对于 2021 年诺贝尔化学奖的预测是什么?</a><br>\n","link":"http://www.zhihu.com/question/557810306/answer/2702654423?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"你错了，爱因斯坦先生！【诺贝尔物理学奖预测——贝尔不等式】","date":"2022-10-04 14:36:00","description":"\n<p data-pid=\"7wo3hMgS\">还有几个小时，诺贝尔物理学奖就要公布了。在此我来做一个小小的预言。我认为今年的诺贝尔奖会颁发给Aspect、Clauser和Zeikinger，因为他们对于贝尔不等式验证的贡献——他们的工作真的很重要。他们的工作向爱因斯坦宣告——对不起爱因斯坦先生，在量子力学方面，您真的错了！</p>\n<p data-pid=\"JxDqm7DN\">爱因斯坦虽然提出了“光量子”的概念，打响了量子力学革命的发令枪；但是他并不支持玻尔所创立的哥本哈根学派关于量子力学的诠释，所以他一直在寻找哥本哈根学派理论的漏洞。在哥本哈根学派的量子力学诠释中，有一个叫做不确定性关系的奇怪的东西。根据不确定关系，一个微观粒子的位置和动量无法同时准确确定。如果该粒子的动量确定得准确，则位置完全无法确定；而如果位置能准确确定，则动量完全无法确定。这一次，爱因斯坦对不确定性关系进行了攻击。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-ab1fb56448029e0185d297708a9e7d8b_b.jpg\" data-size=\"normal\" data-rawwidth=\"641\" data-rawheight=\"383\" class=\"origin_image zh-lightbox-thumb\" width=\"641\" data-original=\"https://pic4.zhimg.com/v2-ab1fb56448029e0185d297708a9e7d8b_r.jpg\"><figcaption>不确定性关系</figcaption></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"JpP_3NYL\">在那篇题为《能认为量子力学对物理实在的描述是完全的吗？》的论文中，爱因斯坦、波多尔斯基和罗森（分别是E、P、R）三人设计了著名的EPR思想实验——正是这个思想实验，为我们打开了量子通信的大门：</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-9a129c8d3e5b48c098639f5e3ec4f03e_b.jpg\" data-size=\"normal\" data-rawwidth=\"641\" data-rawheight=\"384\" class=\"origin_image zh-lightbox-thumb\" width=\"641\" data-original=\"https://pic3.zhimg.com/v2-9a129c8d3e5b48c098639f5e3ec4f03e_r.jpg\"><figcaption>爱因斯坦的EPR论文</figcaption></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"57MZxDuD\">比如现在有A/B两个相互作用的粒子，在它们分开后分别向两个方向移动。由于不受外力，所以这两个粒子动量守恒。当这两个粒子足够远时，此时我可以精确测量A粒子的动量 pA，而由于动量守恒所以 pB=-pA；而此时爱因斯坦假设由于这两个粒子足够远，所以对于A的测量并不会干扰到B（定域论），那么如果同时我们精确测量到了B粒子的位置 xB，那么我们就同时精确得到了B粒子的位置和动量，也就违反了不确定性关系。在这里，爱因斯坦做了定域论的假设，也就是认为当A/B粒子相隔无限远时，对一个粒子的观测不会对于另一个粒子的状态有任何的影响。</p>\n<p data-pid=\"lfnKYD9o\">这个问题引起了玻尔的极大重视，他放下了几乎一切工作来思考这个问题。在5个月后，在同一个杂志上，玻尔发表了回应，甚至也用了完全相同的标题以针锋相对——《能认为量子力学对物理实在的描述是完全的吗？》。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-2ded3fcfb3aaba1700e5431e36c72b8b_b.jpg\" data-size=\"normal\" data-rawwidth=\"641\" data-rawheight=\"201\" class=\"origin_image zh-lightbox-thumb\" width=\"641\" data-original=\"https://pic4.zhimg.com/v2-2ded3fcfb3aaba1700e5431e36c72b8b_r.jpg\"><figcaption>玻尔的反驳论文</figcaption></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"x9ZWbmsJ\">总的来说，玻尔从三个方面对于EPR佯谬进行了反驳。</p>\n<p data-pid=\"Rkt8DUVE\">1.       重申了“物理真实”的含义，即只有观测到的才可以说是物理真实的；</p>\n<p data-pid=\"QAu4U-We\">2.       说明了观测一定会对体系的其他变量造成影响（如果两个变量是不对易的）；</p>\n<p data-pid=\"mA91KHa1\">3.       说明了哪怕两个粒子相距无限远，对于其中一个粒子的观测也会影响另一个粒子的状态——也就是定域论不成立。</p>\n<p data-pid=\"DJGSSLtn\">对于玻尔的解释，尤其是第3点，爱因斯坦是不满意的。直觉告诉我们，两个粒子都已经无限远了，对于其中一个粒子的测量还会影响另一个？这难不成是超距作用？但是直到爱因斯坦去世，都没人能找到验证到底定域论是否成立的证明方法，所以也无法论证到底孰是孰非。</p>\n<p data-pid=\"21Kodsqn\">科学家约翰·贝尔是同意爱因斯坦的观点的。在他的积极思考下，他提出了贝尔不等式，可以利用实验对这个问题进行验证，从而论证到底是爱因斯坦对还是玻尔对。他的初衷是希望证明爱因斯坦是对的。结果万万没想到，经过Aspect、Clauser和Zeikinger等人的实验发现，这个不等式恰恰证明了爱因斯坦是错的，玻尔才是对的。但是可惜的是，约翰·贝尔已经去世而无法获得诺贝尔奖。</p>\n<p data-pid=\"XHzOvFl8\">一开始还有不少爱因斯坦的支持者们继续嘴硬——他们想尽办法企图找到各种可能的漏洞。终于在2016年的大贝尔实验（the Big Bell Test）中，所有的这些可能的漏洞都被堵上了——玻尔的想法虽然不符合我们的直觉，但是是对的。在大贝尔实验中，全球召集到了超过10万玩家来玩游戏——说不定有一些本文的读者就参与了。</p>\n<p data-pid=\"TVXGMA7t\">那么这么一个证明有什么重大意义呢？一方面这对于量子力学的理论基础有着重大的意义。另一方面大家可能听说过我国的潘建伟院士在量子通讯领域接连取得开创性成果。相比于传统的通讯方式，量子通讯无法被监听，信息无法被盗取，是真正安全的通讯方式。而正是因为玻尔是对的，量子通信才能够成为可能。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-d2d4d68c57cf97cec9329de7d84fc30c_b.jpg\" data-size=\"normal\" data-rawwidth=\"438\" data-rawheight=\"559\" class=\"origin_image zh-lightbox-thumb\" width=\"438\" data-original=\"https://pic1.zhimg.com/v2-d2d4d68c57cf97cec9329de7d84fc30c_r.jpg\"><figcaption>潘建伟院士关于量子通讯的论文发表于《科学》杂志上</figcaption></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-d9a21913537cb553b413554595826ffe_b.jpg\" data-size=\"normal\" data-rawwidth=\"641\" data-rawheight=\"355\" class=\"origin_image zh-lightbox-thumb\" width=\"641\" data-original=\"https://pic3.zhimg.com/v2-d9a21913537cb553b413554595826ffe_r.jpg\"><figcaption>量子纠缠</figcaption></figure><p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/phosphates-30?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Phosphates</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/570522549?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"你觉得你离诺贝尔奖最近的一刻是什么时候？","date":"2022-10-04 12:38:59","description":"\n<p data-pid=\"dSrbY17b\">又是一年国庆＋诺奖揭晓的好日子，每年这个时候总会在电脑前围观各大平台对诺奖的预测和参与讨论，也算是与全世界科研从业者/爱好者一同参加这场科学盛宴，感受人类璀璨智慧所带来的美与震撼。</p>\n<p data-pid=\"m04nOln7\">感谢知乎的邀请，今年将通过直播的形式和大家一起畅聊2022年物理学诺贝尔奖（<a href=\"https://www.zhihu.com/pin/1560608835395362816\" class=\"internal\">2022物理学诺贝尔奖圆桌讨论</a>）。现在物理学诺贝尔奖马上要揭晓了，我就和大家聊聊在这些年与诺奖得主最接近的一些时刻和他们对我的影响吧（各个领域大概是40-50位吧哈哈）！</p>\n<p data-pid=\"2MGavVVI\">1、最早期见到的诺奖得主是Kostya Novoselov和杨振宁先生（按时间顺序）。那时我还在本科及刚入研究生阶段，科研对我来说还蒙着一层神秘的面纱，既憧憬又敬畏。因此，对于能见到这个星球上的最强大脑这个宝贵机会，我当然是毫不犹豫地向前冲啦！Novoselov本人很开朗，在学校给他颁荣誉奖项的时候，他会随着音乐跳起芭蕾，引得台下人们开怀大笑，确实符合其俄罗斯民族人设。这些年他办了很多石墨烯及二维材料公司，从中可以看出，他确实有着很open很活跃的办事风格。杨振宁先生则是在求事科学奖现场看到的，虽然当时已有95岁，但杨老的思维仍非常清晰，声音洪亮，在评价和回答问题时总是以最缓慢、最简明和最温和的语言表述，非常有风度和温度，体现了他很高的科研taste。但当时的我害怕自己的问题过于幼稚而怯于提问，因此只能远观这些科学家，心里默默地希望自己能有一天能像他们一样做出一些有意义的工作。</p>\n<p><img src=\"https://pica.zhimg.com/v2-d9da2dd020e0267f2981956ee24f520a_720w.jpeg?source=b1748391?rss\" data-caption=\"求事科学奖颁奖典礼上的杨振宁先生\" data-size=\"normal\" data-rawwidth=\"811\" data-rawheight=\"609\" data-watermark=\"watermark\" data-original-src=\"v2-d9da2dd020e0267f2981956ee24f520a\" data-watermark-src=\"v2-0882b7c369e4a6cdb81b237b65bd592a\" data-private-watermark-src=\"v2-e36e54406e7195f0296bba1d5d513da8\"></p>\n<p><br></p>\n<p data-pid=\"IYJbUHuW\">2、进入科研圈几年后，很幸运地被中德科学基金选中，作为中国博士生代表参加了“第69届德国林岛诺贝尔奖大会“，与39位诺奖得主和来自世界各国600位青年科学家进行交流学习。（ <a class=\"member_mention\" href=\"http://www.zhihu.com/people/b37f2783d31c37196e6e2ab47a6be767\" data-hash=\"b37f2783d31c37196e6e2ab47a6be767\" data-hovercard=\"p$b$b37f2783d31c37196e6e2ab47a6be767\">@潘安</a> 、 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/b5a89130b81a0ad5a134b744eaa515f4\" data-hash=\"b5a89130b81a0ad5a134b744eaa515f4\" data-hovercard=\"p$b$b5a89130b81a0ad5a134b744eaa515f4\">@Trivial</a>、 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/69398e1ad4dc9428f32cc65b82e73859\" data-hash=\"69398e1ad4dc9428f32cc65b82e73859\" data-hovercard=\"p$b$69398e1ad4dc9428f32cc65b82e73859\">@梁昊</a> 、 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/15743aea2577701aa241a74b59e89760\" data-hash=\"15743aea2577701aa241a74b59e89760\" data-hovercard=\"p$b$15743aea2577701aa241a74b59e89760\">@Dr.木子</a> 等写过大会相关情况，很推荐各位自然科学与经济的在读博士生参加这个非常nice的大会！如有需要，后续我可以写一篇以我的视角在此会议的所见所闻。）林岛（Lindau）位于德国的巴伐利亚州，位于德国、奥地利和瑞士三国的交界处，只有33.18平方千米，是一个非常幽静且秀美的小岛。在这个岛上，我们与这些诺奖得主共同度过美好的一周，一起探讨世界未来科学发展和个人理想。在与诺奖得主密切交流的一周里，我的对这些人类智慧之星有了全新的认识。</p>\n<p><img src=\"https://pica.zhimg.com/v2-b8591472e6aa5ab609c62937ec1ba75e_720w.jpeg?source=b1748391?rss\" data-caption=\"你能在照片中找到多少位诺奖得主？\" data-size=\"normal\" data-rawwidth=\"799\" data-rawheight=\"599\" data-watermark=\"watermark\" data-original-src=\"v2-b8591472e6aa5ab609c62937ec1ba75e\" data-watermark-src=\"v2-a2348f9b96787fd9fa46c7d08748cf27\" data-private-watermark-src=\"v2-c9f513130f00d0b2a8e74110ba10b7e2\"></p>\n<p><img src=\"https://picx.zhimg.com/v2-6fdb2d35502d3be0ba5f182ded7bd177_720w.jpeg?source=b1748391?rss\" data-caption=\"答主在大会开幕式\" data-size=\"normal\" data-rawwidth=\"815\" data-rawheight=\"543\" data-watermark=\"watermark\" data-original-src=\"v2-6fdb2d35502d3be0ba5f182ded7bd177\" data-watermark-src=\"v2-994a2c07d89ecf9b6b81f111df52f5d1\" data-private-watermark-src=\"v2-9b1cccc04f1cd77d080eb459e6adc787\"></p>\n<p><img src=\"https://picx.zhimg.com/v2-d1a5b51d54fe3582ba30e1f7ac40979d_720w.jpeg?source=b1748391?rss\" data-caption=\"林岛诺奖大会对答主的报道\" data-size=\"normal\" data-rawwidth=\"454\" data-rawheight=\"268\" data-watermark=\"watermark\" data-original-src=\"v2-d1a5b51d54fe3582ba30e1f7ac40979d\" data-watermark-src=\"v2-179332f48ca66efe1fe485118911e1c3\" data-private-watermark-src=\"v2-862042060cc6a7f6f5fda95976605687\"></p>\n<p data-pid=\"PTF08bNM\">在出发之前我最关注的就是前一年的物理诺奖得主——发明了啁啾脉冲放大技术（CPA）的Gérard Mourou和Donna Strickland。一个原因是我就是利用脉冲光研究物质的超快过程的，CPA技术对高能量脉冲激光的产生功不可没；另一个原因是女性诺奖得主确实较少，Donna的获奖对于我来说确实也是一种激励。Mourou是Donna的博士生导师，在前些年有过一些不和的传闻，但在大会上师徒二人还是十分融洽的。Mourou本人个性十分十分严谨，很有学者风范，和他聊起当年的CPA技术的时候他总会很认真地回答你的问题。与之不同的是，当同样的问题放到Donna身上时，她则是边笑着边说：“噢！这个idea是Mourou提出来的，他们告诉我去做实验，然后我就做出来了！“她十分健谈且具有亲和力，见了几次之后她便会亲切地和我说“我记得你，来自中国的小姑娘！”她会聊到关于她的成长和目前课题组状况，还给答主发出到她那儿去做博士后的邀请。她所到之处，总是围着一群人，且不时地发出阵阵笑声。</p>\n<p><img src=\"https://picx.zhimg.com/v2-83ac888425b1e7a778f805b0a303b85c_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"645\" data-rawheight=\"431\" data-watermark=\"watermark\" data-original-src=\"v2-83ac888425b1e7a778f805b0a303b85c\" data-watermark-src=\"v2-66f064954d3743a2d70391501e0c33c3\" data-private-watermark-src=\"v2-037ab7bf41bb050fb27351f9ba66ebcc\"></p>\n<p><img src=\"https://pica.zhimg.com/v2-10d6f4497c0df45016924631ebace461_720w.jpeg?source=b1748391?rss\" data-caption=\"答主和Mourou、Donna的合影\" data-size=\"normal\" data-rawwidth=\"645\" data-rawheight=\"431\" data-watermark=\"watermark\" data-original-src=\"v2-10d6f4497c0df45016924631ebace461\" data-watermark-src=\"v2-d7a9f87f08a1209f5e2d7abc1201ec3e\" data-private-watermark-src=\"v2-28f8bb42c670a6b44d7947b9e917e021\"></p>\n<p data-pid=\"IaR1xUGu\">Steven Chuu 则是幽默中带着严谨，清瘦的身材但其思维及行动都非常active。他早些年因激光冷却捕获原子获得诺奖，后又转去做生物神经，曾担任过美国的能源部长。但最早期的时候他的科研做得非常不顺利，他也用这段经历去安慰向他咨询的青年学者：“I know you feeling，and feel sympathy. Don’t be nervous and always be honored , let your work speak for you.” 他也曾鼓励大家，如果真觉得自己科研做得不好或少不感兴趣，不要耻于换方向，在工业界或其他领域闪闪发光仍值得尊敬。类似的建议Bill Phillips也给过，他说只要找到自己闪闪发光的行业，都是为社会做贡献。Bill Phillips老爷爷十分亲切，他喜欢我们叫他Bill，而不是Professor。在会议期间，他就像一位圣诞老人，背着大大的红色书包，里面装着他给大家准备的礼物——一个最新的国际单位制表。他十分温和，给我们介绍每个常数的意义和背后的进展，告诉我们每个小数点代表着什么科学问题。如果能给他提一个好问题，他则会给我们发一张他的小礼物。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-aa54fee9dca62d176d50ecf8664095ee_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1267\" data-rawheight=\"846\" data-watermark=\"watermark\" data-original-src=\"v2-aa54fee9dca62d176d50ecf8664095ee\" data-watermark-src=\"v2-162ebd8be572251e5abea990e50f643f\" data-private-watermark-src=\"v2-6a905f2debbdd8053e6cb1505dccfe9e\"></p>\n<p><img src=\"https://picx.zhimg.com/v2-024cacf48c30b790d4d2c1a42a988f55_720w.jpeg?source=b1748391?rss\" data-caption=\"Stiven Chuu 和Bill Philips（背后大大的红色背包就是Bill的“礼物包”)\" data-size=\"normal\" data-rawwidth=\"1267\" data-rawheight=\"846\" data-watermark=\"watermark\" data-original-src=\"v2-024cacf48c30b790d4d2c1a42a988f55\" data-watermark-src=\"v2-7d7be357a3fe0d013c4249a7453e737d\" data-private-watermark-src=\"v2-6881d8ee4635f8a8f932ece8106b05eb\"></p>\n<p><br></p>\n<p data-pid=\"mE0BoFL-\">很幸运地是，答主在舞会上成为了“阿笠博士”Duncan Haldane的舞伴。答主不大会跳交谊舞，Haldane则会耐心引导。但可能天气太热，穿着长袖衬衫的他在舞会上大汗淋漓。Haldane对二维拓扑平带方面非常感兴趣，在问及相关问题时，总是眼中闪耀着光芒。他说诺奖给他带来了荣誉，但同时也给了他很多曝光，让他有些不适应。他颇有做理论的人的严谨风范，即使来参加舞会随身准备了纸和笔，以备有想法可以方便记录和计算。</p>\n<p><img src=\"https://picx.zhimg.com/v2-f2ed33d4110d0be59113374c49af2504_720w.jpeg?source=b1748391?rss\" data-caption=\"答主和Haldane在舞会上 \" data-size=\"normal\" data-rawwidth=\"553\" data-rawheight=\"737\" data-watermark=\"watermark\" data-original-src=\"v2-f2ed33d4110d0be59113374c49af2504\" data-watermark-src=\"v2-91faca387d9043ce797737f65b544730\" data-private-watermark-src=\"v2-80c8fc10ec28d861890187fb8e785a17\"></p>\n<p><br></p>\n<p data-pid=\"V-37C8dV\">3. 博士快毕业的时候，收到了在上海举办的“第三届世界顶尖科学家”大会的邀请，作为物理分会场的青年科学家与诺奖得主和顶尖科学家进行工作展示及讨论。大部分诺奖得主都无法到达现场，因此那也是在疫情时期线上国际会议的初体验。大会主题是“科技为了人类共同命运”主题，我们这八位物理学方面的报告着需就自己研究领域的工作进行探讨。George Smoot老爷子当时就二维材料里面的库珀对探测单光子进行提问，发现我们现场信号不好后，还非常热心地在写在评论区中，并可后期与他进行邮件探讨。</p>\n<p><img src=\"https://picx.zhimg.com/v2-61af7b03480f061bad2ffa406b9ec88d_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"925\" data-rawheight=\"520\" data-watermark=\"watermark\" data-original-src=\"v2-61af7b03480f061bad2ffa406b9ec88d\" data-watermark-src=\"v2-94623f23a1c7586a25d7f9b019747032\" data-private-watermark-src=\"v2-0c072ea5476fefe07250e07be70f0a7a\"></p>\n<p><img src=\"https://picx.zhimg.com/v2-8c114a9f7b9cae9844509fa4682ccbd4_720w.jpeg?source=b1748391?rss\" data-caption=\"答主在“在第三届世界顶尖科学家”大会\" data-size=\"normal\" data-rawwidth=\"918\" data-rawheight=\"525\" data-watermark=\"watermark\" data-original-src=\"v2-8c114a9f7b9cae9844509fa4682ccbd4\" data-watermark-src=\"v2-10daad6d88882431e5630c88005e6225\" data-private-watermark-src=\"v2-f043ed7bd0a654c8dc1ee6e32b34cc82\"></p>\n<p><br></p>\n<p><br></p>\n<hr>\n<p data-pid=\"h_Yk1Ksr\">结语</p>\n<p data-pid=\"oFIKolea\">如果说第一次见诺奖得主是一次“追星”行为，让我看到了人类最厉害的智慧，并深受鼓舞；那么第二次见到他们就是一次“去魅”之旅，让我明白即使是取得巨大科学成就的他们也是普普通通的人，同样有各种性格与做事方式；第三次则是心平气和地交流探讨大会，让我可以自信地去展示自己的工作。这些诺奖得主给我带来的不仅是美妙震撼的科研成果，还有不再迷信权威、敢想敢做的勇气，和对社会和世界的责任感。常常会讨论到，我们中国什么时候才能再出一个自然科学方面的诺奖。其实诺奖本身只是一项荣誉，抛开这层荣誉来说，应该是具有巨大科学意义或科技意义的研究成果。或许得到诺奖很难，但我们科研人员都踏踏实实地去做好自己地研究，不断深入探索，就会推动着社会科技发展，为人类发展尽一份力。长路漫漫，还需上下求索。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/luo-yang-49-75?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">LLLyyy</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/36037775/answer/2701248853?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2116 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/63242836?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">你觉得什么时候你离诺贝尔奖最近？</a><br><a href=\"http://www.zhihu.com/question/54440250?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">哪些人没拿到诺贝尔奖最可惜？</a><br>\n","link":"http://www.zhihu.com/question/36037775/answer/2701248853?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"如何看待国内经济学研究中reduced form的应用微观实证研究泛滥？","date":"2022-09-29 13:57:29","description":"\n<p data-pid=\"5i2Fm3P5\"><b>关于对Bai</b> <b>and</b> <b>Jia (2016)质疑的回复</b></p>\n<p data-pid=\"vlHxPmoG\">白营 贾瑞雪</p>\n<p data-pid=\"1TRmGiJ1\">September 24, 2022</p>\n<p data-pid=\"polS6yQw\">首先，感谢知乎上大家的讨论。我们对待自己的文章就像对待自己的孩子一样：一方面很希望它能得到批评而成长，另一方面会为看到没有认真读文章或者读者自己的误解就出现的指责而生气。为了避免更多的误解，我们对质疑一一回复。这并不是说这篇文章是完美的，我们意识到它的局限（这些局限与该质疑者提出的问题并没有什么关系）。有很多相关的问题是我们希望在以后的研究中能更好地了解的。</p>\n<p data-pid=\"uO7fmPWQ\">解释之后，请考虑到我们需要集中精力工作，而不是在知乎上吵架。我们关闭了本文的回复功能。如果希望继续严肃地讨论，可以邮件联系我们。我们的联系方式很容易在论文中找到。</p>\n<p><br></p>\n<p data-pid=\"hMC_6Vlx\"><b>关于有关数据的回复（原质疑1、2、3点）：</b></p>\n<p data-pid=\"7YkG5ldU\">（1）我们的数据基于六个主要的革命团体（文章总结如下图），并不是只有同盟会。如果参与同盟会的人参与了之前其他的组织，会被先归为其他的组织成员。图中显示了1905年之前的确有很多成员。</p>\n<p><img src=\"https://picx.zhimg.com/v2-699cb055ed4bb5035c2dfa081192ee31_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"721\" data-rawheight=\"598\" data-watermark=\"watermark\" data-original-src=\"v2-699cb055ed4bb5035c2dfa081192ee31\" data-watermark-src=\"v2-921406c2d2d3fdf328b2495ff4129a76\" data-private-watermark-src=\"v2-4911d2e41755edffc63519fdabf28886\"></p>\n<p data-pid=\"F0FkCD95\">（2）关于年份，我们是基于每个革命者在数据中出现的最早时间。而不是简单的使用其加入同盟会的时间。例如，原质疑提到的一些人在我们数据中加入年份如下：宋教仁1904，黄兴1903，章炳麟1904，陈天华1903。和（1）一样，我们并没有像质疑者假设的那样没有考虑之前的组织。</p>\n<p><img src=\"https://pica.zhimg.com/v2-9c1805d3c0aa06532d9ee0731feec727_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"927\" data-rawheight=\"113\" data-watermark=\"watermark\" data-original-src=\"v2-9c1805d3c0aa06532d9ee0731feec727\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"2kb8I1nL\">（3）这并不是说没有我们采用的数据中没有measurement error的问题。这个挑战是肯定存在的。我们至少做了以下四组相关的分析：</p>\n<p data-pid=\"KnE9S-Zk\">（3.1）只有废除科举前<b>有较多学额</b>的府的革命者被错误的认为是废除科举后加入的，我们的双重差分的估计值才是有偏的。我们的文章并不是简单地比较1905年前后。</p>\n<p data-pid=\"Yism6QuK\"> (3.2) 我们没有避而不谈“<b>大量革命者在 1905 年 6-8 月份就加入了同盟会</b>” （这是对我们文章的主要质疑）。我们在文章中提到，去除了早年参与其他组织的人之后，剩下的同盟会成员中还是有３５％被记录为９月之前加入的：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-5af0ba653fa22da766aefc32f62621e7_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"919\" data-rawheight=\"103\" data-watermark=\"watermark\" data-original-src=\"v2-5af0ba653fa22da766aefc32f62621e7\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"vH_zSXyY\">而且，为了确认1905年的作用是发生在9月（废除科举）后而不是9月（废除科举）前，我们利用了加入同盟会的时间进行了月度分析。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-d376c5a8318688589d136a770d8437b3_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"827\" data-rawheight=\"500\" data-watermark=\"watermark\" data-original-src=\"v2-d376c5a8318688589d136a770d8437b3\" data-watermark-src=\"v2-13bf0a554bfa4f007e90f705f1d6f977\" data-private-watermark-src=\"v2-bb6af1f84bb00b96d546a2266416d03c\"></p>\n<p><br></p>\n<p data-pid=\"P1_Jc-yz\">(3.3) 我们使用了1911年起义发生的信息，来证明结果的稳健性。我们认为虽然起义信息也有measurement error的问题，但是这与革命者信息中的measurement error关系不大。</p>\n<p data-pid=\"JMVPCcNN\">(3.4) 我们的工具变量也可以帮助处理measurement error的问题。</p>\n<p data-pid=\"kwJ-OVQD\"><b>关于洋科举的回复（原质疑4）：</b></p>\n<p data-pid=\"606vbQX8\">科举之后有不同的出路，我们文章中做了一些背景讨论。也提供了一些实证分析，例如出国留学。我们也讨论了洋科举，我们是主要发现，与科举相比，洋科举下生员学额和洋进士的关系较弱（见下表中的７－８列）。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-d410ff17029821bb798cf529b47db157_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"975\" data-rawheight=\"366\" data-watermark=\"watermark\" data-original-src=\"v2-d410ff17029821bb798cf529b47db157\" data-watermark-src=\"v2-de6d2fe27ccafa5e14133cf263cbb113\" data-private-watermark-src=\"v2-5465a5e670a6d5d0bc769ad97f0b6edb\"></p>\n<p data-pid=\"isQbbw1W\">当然，这也不是说我们分析所有的可能的结果 – 分析所有的结果并不是我们文章的目的。</p>\n<p data-pid=\"KbgoLXrH\"><b>关于进士数据的回复（原质疑5）：</b></p>\n<p data-pid=\"y0m-i045\">在我们的原始数据中，进士分为旗籍和民籍，如果是民籍会提供籍贯地。我们的进士数据只基于后者，并不包含旗籍。</p>\n<p><br></p>\n<p data-pid=\"pzUgwcx9\"><b>总结：</b></p>\n<p data-pid=\"DLXQoMro\">我们的文章不是完美的，是可以被批评的，但只有认真读过文章给出有道理的批评才是有意义的。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/joechristmas?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Ruixue Jia</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/264825623/answer/2687447623?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">34 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/269459644?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">经济学论文中表述为“A对B的作用机理”，都有哪些可行研究方式或模型？</a><br><a href=\"http://www.zhihu.com/question/422217343?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">经常会怀疑经济学通过设模型处理数据得出来的结论真的有用吗？</a><br>\n","link":"http://www.zhihu.com/question/264825623/answer/2687447623?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"对于现在欧元暴跌成美元这个事件，大家有什么看法吗？","date":"2022-09-29 02:47:24","description":"\n<p data-pid=\"gbTA7Srj\"><b>2022年，距离2002年7月欧元正式成为欧元区唯一合法货币，已经过去二十年了。在过去的二十年中，欧元对美元汇率基本上维持在1以上。但是，今年以来，美元走强，欧元开始大幅贬值，年内已跌掉近13%。尤其是7月以来，欧元对美元汇率跌破平价，不断触及20年来新低，引发市场关注。</b></p>\n<p data-pid=\"Y2igLbsx\"><b>那么，欧元为什么会大幅贬值？这究竟是偶然还是必然？欧元的未来又将如何演变？</b></p>\n<h2>一、欧元的诞生</h2>\n<p data-pid=\"GrjOn30K\">要了解欧元，我们需要先回顾一下欧元诞生的背景和承载的使命。</p>\n<p data-pid=\"tzZ7pzdu\">在1016万平方公里的欧洲大陆上，战争与和平不断交替，“统一”从未出现。无论是一战还是二战，欧洲都曾是主战场。二战过后，欧洲处于一片废墟中，昔日的辉煌不复存在。当时的世界格局也发生了重大变化，美、苏两个大国崛起，欧洲各国的经济、政治地位急剧下降。此时，欧洲各国意识到只有团结合作才能救欧洲。而二战后，美国提出的“马歇尔计划”为欧洲的团结加了把火，因为这项计划要求“欧洲必须作为一个整体”接受援助。此后，<b>欧洲启动了“一体化”进程。</b></p>\n<p data-pid=\"FGHNjJfD\">于是在1948年，英、法等国成立了欧洲经济合作组织（这也是经合组织的前身），负责分配和使用美国提供的援助。1950年，欧洲经合组织设立了欧洲支付同盟。在欧洲支付同盟下，成员国不需要对每笔贸易进行货币支付，而是每个月月底才进行清算支付。可以说，<b>这是欧洲货币合作的开始。</b></p>\n<p data-pid=\"1RxZt5-P\">1952年，在时任法国外长舒曼和时任德国总理阿登纳的支持下，欧洲煤钢共同体成立，缔约国有法国、西德、意大利、比利时、荷兰及卢森堡。这是欧洲漫长历史上出现的第一个拥有超国家权限的机构。成员国第一次放弃了本国经济中煤钢部门的管理权，并将这些主权交给一个独立于成员国的高级机构——煤钢共同体负责协调各成员国的煤钢生产，以保证煤炭钢铁等原料不再用于战争。</p>\n<p data-pid=\"qfafabr3\">合作还算愉快，到了1957年，六国又签署了“欧洲经济共同体”和“欧洲原子能共同体”条约（合称《罗马条约》），主要内容包括：建立工业品关税同盟，实现共同体内部工业品、劳动力和资本的自由流通，建立共同的农业政策，消除各种限制等。<b>这是欧洲经济和政治一体化进程的起点，也是欧洲一体化进程的关键一步。</b>到了1958年，欧洲货币协定取代了支付同盟。在欧洲货币协定下，欧洲“计算单位”确定，各成员国的货币建立固定比价，各国货币可互相自由兑换。这是欧洲国家在货币合作上的进一步尝试。</p>\n<p data-pid=\"KUdHDiQp\">1965年4月，欧洲煤钢共同体 、欧洲原子能共同体和欧洲经济共同体合并成“欧洲共同体”（欧共体）。</p>\n<p data-pid=\"yNhYVXES\">1971年，布雷顿森林体系瓦解后，美元持续贬值，欧洲国家间的汇率波动加剧，德国马克成为欧共体成员国货币的锚。但1977年美元危机再度爆发，欧共体迫切需要一个独立于美元的新货币。1978年，时任法国总统德斯坦向时任德国总理施密特提议在欧洲建立一个稳定的货币体系，施密特表示赞同。此后，“施密特－德斯坦倡议”顺利获得其他原欧共体成员国的赞同。<b>1979年3月，以欧洲货币单位“埃居”为中心的欧洲货币体系正式启动。</b>成员国之间通过“埃居”进行结算，成员国的货币与“埃居”之间形成固定汇率，不再参考美元汇率，“埃居”成为成员国外汇储备的构成部分。</p>\n<p data-pid=\"6857Li6-\">不过，由于欧洲货币体系内各成员国的经济发展水平不同、经济政策存在差异，加上国际金融投机家操纵市场，对体系内不同币种进行攻击，<b>欧洲货币体系最终于1992年解体。</b>但欧洲货币体系为后来欧元的形成提供了宝贵的经验。比如，后期欧盟为成员国加入欧元区所设置的种种标准，就是希望成员国能有相对统一的经济发展水平，便于后来各成员国能够协调发展。</p>\n<p data-pid=\"TuKI6CLy\">1992 年，欧共体各成员国在荷兰马斯特里赫特签署 《马斯特里赫特条约》( 简称 《马约》) ，其核心内容就是建立 “欧洲经济与货币联盟”和 “欧洲政治联盟”， 前者的最终目标是发行统一的欧共体货币。1993年，欧洲共同体改名为 “欧洲联盟”，简称欧盟。1994 年，欧洲货币管理局 ( 欧洲中央银行前身) 在德国法兰克福成立。1997 年，欧盟首脑会议分别签署了 《稳定和增长公约》《欧元的法律地位》和 《新的汇率机制》三个文件，为欧元的正式使用奠定了法律基础。<b>1999 年，欧元创立，欧洲央行也正式成立。2002 年，欧元开始真正流通，成为欧元区成员国的法定货币。</b></p>\n<p data-pid=\"VoaxVByv\">整体来看，欧元的诞生不是一蹴而就的。历经半个多世纪的时间，欧洲经济一体化的进程不断深入，欧共体演变成了欧盟，支付同盟则演变出了“欧元”。可以说，<b>欧元不仅是一个经济范畴的货币，其背后更体现了各国的政治意志。正如美国经济学家艾肯格林所说，“从根本上说，欧元是一个政治工程。”</b></p>\n<blockquote data-pid=\"gMoDgjfc\">知识小科普：<br>实际上，欧元成功的实践背后也得到理论的支撑。欧元之父罗伯特·蒙代尔最早提出的最优货币区理论就是欧元设计的理论基础。<br>蒙代尔称，“为什么正在组建的欧洲共同市场的各个国家要自找麻烦，让汇率不确定性成为新的贸易障碍？”<br>而最优货币区理论恰恰可以解决这个问题。蒙代尔认为，经济联系紧密的国家/地区通过固定汇率或者统一货币的形式建立货币区，可以抵消浮动汇率的不确定性，同时实现区内充分就业、物价稳定与国际收支平衡。</blockquote>\n<h2>二、成立二十年来，欧元表现如何？</h2>\n<p data-pid=\"kdVGisZh\">尽管欧元自成立以来就一直面临争议，但至少以下三方面的成就不容忽视：</p>\n<p data-pid=\"LSc86vMw\"><b>第一，欧元基本消除了欧洲大国之间重燃战火的可能性。</b>欧元的使用将欧元区各国在货币方面捆绑在一起，从理论上使得欧洲一体化进程不可逆转，基本上消除了内部战争的可能性。此外，欧元强化了欧元区的整体地位和外部影响力。过去几十年，在美国、中国、日本等大国崛起背景下，欧洲依然能在全球范围内扮演至关重要的角色，欧元发挥了重要的支撑作用。</p>\n<p data-pid=\"3KHiQi2Q\"><b>第二，欧元推动了经济增长。</b>单一的货币推动了欧元区内的竞争，同时随着欧洲市场一体化，也产生了规模经济。单一的货币也降低了交易成本，极大地推动了贸易增长。与过去需要开设多个账户相比，货币兑换费用、银行费用等下降，汇率波动风险也没有了。据分析，欧元本身对欧元区成员国之间贸易增长的推动作用在5%-15%之间，欧元对欧元区内的外国直接投资的增长效应则在14%-36%之间。</p>\n<p data-pid=\"Nck-zRlD\"><b>第三，欧元的诞生改变了国际货币格局，削弱了以美元为核心的“单级”货币格局，使得国际货币体系迈入“多级化”。</b>从国际支付领域来看，欧元份额曾一度超过美元，根据环球同业银行金融电讯协会（SWIFT）数据，2012年1月欧元与美元的支付份额分别为44%和30%，尽管在2015年8月欧元的支付份额降到了27%的历史低位（同期美元占比45%），但随后反弹。截至2021年6月份，欧元与美元的支付份额趋同。从全球外汇储备份额来看，欧元目前已成为仅次于美元的全球第二大储备货币。</p>\n<p data-pid=\"okDdVOdX\"><b>图1：主要货币的国际支付份额变化（%）</b></p>\n<p><br></p>\n<p><img src=\"https://picx.zhimg.com/v2-5d317705691fc8df7e07df8b82aeda3d_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"284\" data-watermark=\"watermark\" data-original-src=\"v2-5d317705691fc8df7e07df8b82aeda3d\" data-watermark-src=\"v2-4452ba8b0d9eae6720e40fd1720b3834\" data-private-watermark-src=\"v2-0d17f704e58bae96c41c9ad36deab643\"></p>\n<p><br></p>\n<p data-pid=\"cTdWlqrT\">数据来源：wind，中航证券</p>\n<p data-pid=\"xxc171P8\"><b>图2：各主要货币在全球外汇储备份额中的占比</b></p>\n<p><br></p>\n<p><img src=\"https://picx.zhimg.com/v2-9342690b5ec6911a55c4fdd4db9f6d5a_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"271\" data-watermark=\"watermark\" data-original-src=\"v2-9342690b5ec6911a55c4fdd4db9f6d5a\" data-watermark-src=\"v2-15904b618efdd40625c83d83c5a7d104\" data-private-watermark-src=\"v2-6a33a3b86e24f7d6337b8d690f6c32fd\"></p>\n<p><br></p>\n<p data-pid=\"7vgWT1EN\">数据来源：wind，中航证券</p>\n<h2>三、欧元近期为何会大幅贬值？</h2>\n<p data-pid=\"K1qrATJ-\">实际上，自2002年欧元正式成为欧元区唯一法定货币后，其汇率呈现出稳步升值的趋势。2003—2007年间，欧元区经济增长表现整体较好，平均经济增速达2.1%左右，从基本面上支撑欧元对美元汇率升值至约1.6的历史最高水平。</p>\n<p data-pid=\"7uWuE7og\"><b>图3：欧元自诞生至今的汇率表现</b></p>\n<p><br></p>\n<p><img src=\"https://picx.zhimg.com/v2-bc281dd0852efbfbaa03556c4fa03e50_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"279\" data-watermark=\"watermark\" data-original-src=\"v2-bc281dd0852efbfbaa03556c4fa03e50\" data-watermark-src=\"v2-498d6a729549f81385e9420946c44bc3\" data-private-watermark-src=\"v2-28768656ba243af3ea2191450c7c9fb7\"></p>\n<p><br></p>\n<p data-pid=\"CFt-YAoO\">资料来源：欧央行官网，<a href=\"http://link.zhihu.com/?target=https%3A//www.ecb.europa.eu/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">ecb.europa.eu/</span><span class=\"invisible\"></span></a></p>\n<p data-pid=\"q6nuuPr4\">2008年金融危机以及2010年欧债危机爆发后，欧元对美元汇率明显波动，并于2015年贬至1.07的低点。2015年到疫情初期，欧元汇率略有波动，但整体较为平稳。不过，自俄乌冲突爆发以来，欧元汇率明显下行。近期，欧元对美元汇率多次跌破1：1的平价水平，为近20年来首次。</p>\n<p data-pid=\"g3TJZB9A\"><b>图4：近半年来，欧元汇率表现</b></p>\n<p><br></p>\n<p><img src=\"https://picx.zhimg.com/v2-3de985d36ff4872a4632f25d045b9a91_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"242\" data-watermark=\"watermark\" data-original-src=\"v2-3de985d36ff4872a4632f25d045b9a91\" data-watermark-src=\"v2-5b080818cc0ee8b9e56ec71c11d2c7fe\" data-private-watermark-src=\"v2-8773cc7a1577b306730aa11abc4f5492\"></p>\n<p><br></p>\n<p data-pid=\"EoS6tq0u\">资料来源：欧央行官网，<a href=\"http://link.zhihu.com/?target=https%3A//www.ecb.europa.eu/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">ecb.europa.eu/</span><span class=\"invisible\"></span></a></p>\n<p data-pid=\"zdNQtx-H\">那么，<b>欧元为何会出现大幅贬值呢？</b>市场分析普遍认为，欧元汇率跌破平价既有短期外部因素的冲击，也有深层次的结构性问题。</p>\n<p data-pid=\"glOLnsa0\"><b>从短期外部冲击来看：</b></p>\n<p data-pid=\"uo7N_DiB\"><b>一是美联储加息致美元走强，其他非美元货币走弱。</b>为遏制高通胀，今年以来美联储已经加息300个基点，促使国际资本回流美国，美元指数走强，一度突破110大关。但与此同时，非美货币则普遍走弱。实际上，不止是欧元，英镑、日元、韩元等都有不同程度的贬值。</p>\n<p data-pid=\"vBRiwc4g\"><b>图5：2022年年初至今，全球主要货币贬值幅度</b></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-1a89ffc540557baa82457b29d0d0a643_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"374\" data-watermark=\"watermark\" data-original-src=\"v2-1a89ffc540557baa82457b29d0d0a643\" data-watermark-src=\"v2-88e4eb04f3d109dc98d0f7f955112107\" data-private-watermark-src=\"v2-a6593003742fb3b0948d241b872846c2\"></p>\n<p><br></p>\n<p data-pid=\"2bIc04V1\">数据来源：同花顺IFIND，同花顺期货通</p>\n<p data-pid=\"2sC4Ii61\"><b>二是俄乌冲突及相关制裁措施引发能源、粮食危机，导致了能源、粮食等大宗商品涨价，造成欧元区通胀高企。</b>而欧洲的能源缺口短期难以弥补，据汇丰银行的研究报告显示，北溪1号断气意味着欧洲已经失去了其天然气总供应的30%。汇丰银行认为，欧洲气荒恐怕要持续到2026年，要等到液化天然气（LNG）新增项目产能大幅提高，欧洲“气荒”才可能得到显著缓解。</p>\n<p data-pid=\"UEZKwQ7F\"><b>图6：2001年-2022年欧元区通胀水平</b></p>\n<p><br></p>\n<p><img src=\"https://picx.zhimg.com/v2-4f358f089e5225b5f4bf4ad8143d5169_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"212\" data-watermark=\"watermark\" data-original-src=\"v2-4f358f089e5225b5f4bf4ad8143d5169\" data-watermark-src=\"v2-3b639a0bd83292303a789cc6deff62b1\" data-private-watermark-src=\"v2-bf342c7672d1e6ceeb98e2d8ff2b2aec\"></p>\n<p><br></p>\n<p data-pid=\"zyr-6wh-\">资料来源：欧央行官网，<a href=\"http://link.zhihu.com/?target=https%3A//www.ecb.europa.eu/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">ecb.europa.eu/</span><span class=\"invisible\"></span></a></p>\n<p data-pid=\"tubx2naj\"><b>三是欧洲面临经济衰退的风险。</b>能源危机下，欧洲的“火车头”德国经济遭到较大冲击。据悉，随着德国汽车零部件、化学制品和钢铁制造商越来越难以承受屡创新高的电力价格，这一欧洲工业的心脏地带正面临着潜在的“外迁潮”风险。此外，为了抑制通胀，欧洲央行不得不收紧货币政策，先是在7月加息50个基点，9月又再度加息75个基点，从而加剧了欧元区经济衰退的风险，进一步恶化希腊和意大利等重债国的债务，甚至有可能引发新一轮欧债危机。</p>\n<p data-pid=\"JW5jdnLV\"><b>图7：欧元区各国政府债务占GDP的比重</b></p>\n<p><br></p>\n<p><img src=\"https://picx.zhimg.com/v2-b1388c0ed82d163d03c66b53fc07f4e1_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"257\" data-watermark=\"watermark\" data-original-src=\"v2-b1388c0ed82d163d03c66b53fc07f4e1\" data-watermark-src=\"v2-6674cf65b5727fe2b6dafbde75edff10\" data-private-watermark-src=\"v2-36d75db175504e8367e971de006628aa\"></p>\n<p><br></p>\n<p data-pid=\"Mn7yjEM3\">来源：欧央行，wind，平安证券</p>\n<p data-pid=\"KKtrLY-r\"><b>从长期来看，</b>欧元自身也存在结构性缺陷。在经济下行周期中，这种缺陷会被进一步放大。</p>\n<p data-pid=\"cbO0R3By\"><b>一是备受诟病的“一条腿走路”。</b></p>\n<p data-pid=\"R18muWna\">目前，欧元区内部实行统一的货币政策，成员国在进行宏观调控时只能倚重财政政策，这也导致欧盟财政纪律在实践中执行困难，赤字和债务负担超标现象很难避免。这一矛盾曾在欧债危机最严重的时刻有过充分体现，近年来欧元区各国围绕难民负担、部分成员国财政紧缩等问题的激烈博弈也根源于此。</p>\n<p data-pid=\"d8cjpbl-\">当欧元区处于经济上升期时，各国面临的风险区别不大；但经济下行时，实力较弱的边缘国债务问题会率先暴露。欧洲央行的统一货币政策无法有效应对区内各国面临的非对称冲击，虽然欧洲央行在7月推出了反碎片化工具TPI，但这项工具的实际执行力度仍然存疑。</p>\n<p data-pid=\"SWNHB2u6\">在欧债危机时期，时任欧洲央行行长德拉吉曾推出OMT计划，表示将不惜一切代价救欧元。但当时的欧元区经济处于低通胀环境，德国经济也比现在要好。这一次，欧洲央行需要在救助市场的同时，兼顾抗通胀重任，反碎片化的效果或许不够理想。（传送门：加息50基点+“反碎片化”工具，欧洲央行能顺利抗击通胀吗？）</p>\n<p data-pid=\"zn3v-RdV\">实际上，单一货币计划要得到有效的执行，不仅要满足所谓的“趋同标准”，还要求经济活跃的国家向经济低迷的国家进行资金转移，除了市场化的资金，还包括财政性资金的援助。没有彻底的财政一体化，欧元是不完整的。</p>\n<p data-pid=\"s47cskVL\"><b>二是欧元区推动财政一体化困难重重。</b></p>\n<p data-pid=\"w93AyvQc\">欧元区并未按照“最优货币理论”设想的那样，实现各要素的自由流动。尽管欧洲一体化进程中强调商品、资本、人员和劳务等要素的区域内跨国自由流动，但实际上欧元区并没有达到这些标准。在欧洲一体化进程中，成员国的经济差异不仅没有缩小，反而愈发拉大。这引发了一些反欧情绪。部分民众对于欧元的怀疑态度增加了对反欧政党的支持。多国（例如，英国、芬兰、荷兰、奥地利和法国）反欧政党在选举中异军突起，获得了更多选民支持，在欧洲议会中席位显著增加。</p>\n<p data-pid=\"QgkF_Lny\">欧元区成员国由于各自要素禀赋、地缘政治立场等差异，往往在某些领域分歧较大，降低了欧元区决策的整体一致性，进而影响市场对欧元前景的信心。例如，在俄乌冲突中，出于各自对俄乌立场的差别以及经济和能源对俄依赖程度的差异，成员国对俄制裁、禁运态度存在明显不同。</p>\n<p data-pid=\"sxRBes7L\">此外，当前的欧元区缺乏核心领袖来推动财政一体化的进程。在推动欧洲经济货币一体化的进程中，德法两国领导人例如，德国的阿登纳与法国的戴高乐，德国的施密特与法国的德斯坦等都发挥了重要作用。然而，现在的德国与法国两国乃至整个欧元区都缺乏具备足够号召力的核心人物。整体来看，欧元区财政一体化前景黯淡。</p>\n<h2>四、展望未来，欧元可能会如何演变？</h2>\n<p data-pid=\"zUwbB8mb\">从市场观点来看，多数经济学认为欧元前行之路较为艰难。</p>\n<p data-pid=\"DZ9rMX-k\">东方证券首席经济学家邵宇认为，在第二个20年的开局，欧元区一边要处理欧债危机的遗留问题，一边又要应对地缘政治冲突、通货膨胀和全球能源变局的新问题。<b>未来，欧元区很可能面临“不进则退”</b>——要么突破一体化中的瓶颈，实实在在地落实财政一体化；要么是做减法，如同英国脱欧一样，引入欧元区成员国强制退出机制，以防止整体性的崩塌。</p>\n<p data-pid=\"FIFJkguu\">工银国际首席经济学家程实认为，<b>从中长期来看，欧元仍将趋势性走弱。</b>原因有三：<b>一是</b>严峻的滞胀风险正在抬升债务风险预期。<b>二是</b>欧元区贸易条件恶化，负收入效应将阻碍欧元走强。欧元区的贸易条件指数显示，进入2022年以来，欧元区贸易条件正在逐步恶化，负收入效应将刺激欧元区内的购买力向全球其他市场转移。<b>三是</b>金融敏感度提升将加速资本外流，不利于欧元持续升值。欧央行启动加息中长期对欧元区整体通胀的抑制有限，持续的加息将助推实际利率和短期利率预期抬高，欧元区内融资成本抬升或将导致本就过热的房地产市场和大宗商品市场出现大幅价格调整，金融敏感度提升将加速资本外流。</p>\n<p data-pid=\"vdkn156-\">南开大学跨国公司研究中心教授戴金平认为，无论是从欧元区未来的经济增长前景，还是从欧元区国际金融地位的变化，抑或是欧盟一体化的前景，以及欧元的声誉与市场信心，来预测欧元未来的国际地位，结论都是：<b>欧元的未来风雨飘摇。</b></p>\n<p data-pid=\"WXv7GEzr\">不过，中国社科院欧洲所副所长陈新比较乐观，他认为<b>适当强度的危机或许能够倒逼欧盟财政一体化进程。</b>去年，欧盟委员会公布了名为“下一代欧盟”的举债方案，计划在未来五年时间里共筹集8000亿欧元促进区域经济复兴。其中，欧盟而不是单个国家将作为借款主体，在2021-2026年期间完成债务发行，并计划于2028年开始偿还部分借款，预计在2058年前还清。一定程度上，欧盟在财政一体化上迈出了一小步。</p>\n<p data-pid=\"zqnsdkvJ\">社科院世经政所冯维江也有相同观点。不过他也承认，<b>过高强度的危机可能会引发欧元区迅猛地瓦解或崩溃。</b></p>\n<p data-pid=\"lCSbbV__\"><b>参考资料</b></p>\n<p data-pid=\"FkhmkoDa\">1.缪建民，《欧元的使命与挑战》</p>\n<p data-pid=\"Zh1PV5YP\">2.邵宇、陈达飞，《欧元流通20年的实践及对亚洲一体化的启示》</p>\n<p data-pid=\"Vr1_bnZD\">3.丁纯等，《欧元诞生以来经历的冲击回顾与展望》</p>\n<p data-pid=\"5YPcPuIQ\">4.欧元流通20年专题 · 专家笔谈（下） | 沈建光、程实：欧元的过去和未来</p>\n<p data-pid=\"Ro__5sjp\">5.欧元流通20年专题 · 专家笔谈（上） | 孙杰、戴金平：欧元的过去和未来</p>\n<p data-pid=\"l64KBSNw\">6.张明，《欧元二十年》</p>\n<p data-pid=\"ScIbbLx-\">7.冯维江，《欧元被美元击败了吗》</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/jin-rong-si-shi-ren-lun-tan?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">金融四十人论坛</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/27521281/answer/2691526918?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">245 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/545507162?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">欧元暴跌，如何解救？</a><br><a href=\"http://www.zhihu.com/question/526032965?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">美元下跌欧元上涨的原因是什么？</a><br>\n","link":"http://www.zhihu.com/question/27521281/answer/2691526918?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"适量喝咖啡对身体有哪些好处？","date":"2022-09-29 02:34:47","description":"\n<p data-pid=\"cuTnlK2O\">咖啡是一种世界性的饮品。</p>\n<p data-pid=\"xQqHIbEa\">因为咖啡因的关系，在相当长的一段时间里，它被被视作一种不好的饮料。</p>\n<p data-pid=\"tTWa39Rm\">直到上个世纪80年代，随着咖啡相关科研结果的发表，人们开始更理性地看待这种饮料。</p>\n<p data-pid=\"ZDHPtr3Q\">我从医学调查的数据出发，<b>说一下喝咖啡的优点、和喝咖啡时需要注意的事项。</b></p>\n<ul>\n<li data-pid=\"TjVnSKkf\">\n<b>适度喝咖啡的好处：</b>更快乐、更瘦、全因死亡率更低；</li>\n<li data-pid=\"uc1ByGJI\">\n<b>注意</b>：控制热量、适量(＜3-4杯奶咖，或＜2杯黑咖啡)；</li>\n<li data-pid=\"gzxIhB6c\">\n<b>需注意人群</b>：小孩(＜2岁)、孕妇(含哺乳期)、胃酸过多的人、高血压、易失眠人群。</li>\n</ul>\n<p><img src=\"https://pic1.zhimg.com/v2-9afa73cebea067a3ca6e99562a6d3ef0_720w.jpg?source=b1748391?rss\" data-caption=\"图片来源：pexels\" data-size=\"normal\" data-rawwidth=\"2413\" data-rawheight=\"1537\" data-watermark=\"watermark\" data-original-src=\"v2-9afa73cebea067a3ca6e99562a6d3ef0\" data-watermark-src=\"v2-3fae0a08ceef22fa93e8c180620e0d42\" data-private-watermark-src=\"v2-998f772bd277c912e412a365524ed69f\"></p>\n<h2>一、咖啡里有什么</h2>\n<p data-pid=\"IPfP8pF_\">我们日常喝的咖啡，其实是一种水果，叫「咖啡樱桃」。</p>\n<p data-pid=\"NTj67Fii\">成熟的咖啡樱桃经过处理可以得到咖啡生豆，生豆经过烘烤就得到我们常见的咖啡豆了。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-991e2056db232fba92dec34648db30b1_720w.jpg?source=b1748391?rss\" data-caption=\"从咖啡樱桃到生豆，再到烘烤后的咖啡豆\" data-size=\"normal\" data-rawwidth=\"1975\" data-rawheight=\"1139\" data-watermark=\"watermark\" data-original-src=\"v2-991e2056db232fba92dec34648db30b1\" data-watermark-src=\"v2-3d05fb0e30ea1c521c1ac8ab542cd0fb\" data-private-watermark-src=\"v2-7c8b0daebecc9e07c548fcdd9d7e0b6f\"></p>\n<p data-pid=\"o1oBhx74\">因为咖啡的前身是一种水果，所以咖啡里会带有水果中常见的活性物质(多酚、萜类等)。</p>\n<p data-pid=\"_-rinBwn\">下面是咖啡中的一些对健康有益、具有抗氧化能力的活性物质：</p>\n<ul>\n<li data-pid=\"HlyicVK8\">\n<b>咖啡多酚</b>：咖啡酸、绿原酸等；</li>\n<li data-pid=\"bPEl3Xg6\">\n<b>咖啡碱</b>：咖啡因、葫芦巴碱等；</li>\n<li data-pid=\"JLXmZfs_\">\n<b>二萜</b>：咖啡醇、咖啡二醇等；</li>\n<li data-pid=\"jvauZI_P\">\n<b>类黑素 </b>(抗氧化，来源于咖啡豆的烘烤过程)。</li>\n</ul>\n<p><img src=\"https://pic1.zhimg.com/v2-bf0f5821d928142ea66bf75d5eb29da3_720w.jpg?source=b1748391?rss\" data-caption=\"咖啡中的活性物质长这样\" data-size=\"normal\" data-rawwidth=\"2127\" data-rawheight=\"1515\" data-watermark=\"watermark\" data-original-src=\"v2-bf0f5821d928142ea66bf75d5eb29da3\" data-watermark-src=\"v2-c1c669129907cbb8c7697493a0bf6f49\" data-private-watermark-src=\"v2-02edbb4ef8db8a6b8a035a52ae676f2b\"></p>\n<p data-pid=\"jTrxdAxj\">这些活性物质在煮好的咖啡里，<b>含量大概范围(mg/100ml)</b>：</p>\n<p><img src=\"https://pica.zhimg.com/v2-c03508be05278a37c6c145b5992057c5_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1981\" data-rawheight=\"975\" data-watermark=\"watermark\" data-original-src=\"v2-c03508be05278a37c6c145b5992057c5\" data-watermark-src=\"v2-e57e625a2cf09d4fd262fb3d421b01f7\" data-private-watermark-src=\"v2-49323d7b69c3d43d5302fee5064ffb01\"></p>\n<h2><b>二、长期喝咖啡的人更快乐</b></h2>\n<p data-pid=\"W7DrS0xu\">2015年，科学界完成了史上第一次大规模的，针对咖啡和抑郁症的相关性meta-分析。</p>\n<blockquote data-pid=\"MMsXZoi-\">数据包括从1980年起所有研究咖啡和抑郁症的临床实验结果，包括高达368,900名参与者。</blockquote>\n<p data-pid=\"4aYgjbMS\">结论是<b>喝咖啡可以减轻抑郁和沮丧感</b></p>\n<p data-pid=\"TijLmvuS\">——喝咖啡的人患上抑郁症的概率要比普通人低，每多喝1杯可以降低8%的概率。</p>\n<p data-pid=\"cZcwFT09\">当然，这个降低也不是无限的，<b>有效的上限是4-5杯的量</b>。</p>\n<blockquote data-pid=\"yZ2Tc-ro\">结论的适用范围是68-509mg/天的咖啡因摄入量，折算成咖啡就是不超过4-5杯，再多喝就没效果了。</blockquote>\n<p><img src=\"https://pica.zhimg.com/v2-1ba7d3f377705485054b921c16ea605d_720w.jpg?source=b1748391?rss\" data-caption=\"喝咖啡的数量和抑郁症风险的关系，来源[1]\" data-size=\"normal\" data-rawwidth=\"1391\" data-rawheight=\"1176\" data-watermark=\"watermark\" data-original-src=\"v2-1ba7d3f377705485054b921c16ea605d\" data-watermark-src=\"v2-da889d632038aab37432177ef5911c42\" data-private-watermark-src=\"v2-d537b56db9d2c8917d3d573ef6049609\"></p>\n<p data-pid=\"XZotLg2q\">但是，这个初步的调研结论并不能让科学界信服：</p>\n<ul>\n<li data-pid=\"6SVkIYiZ\">首先，这个结果<b>和当时流行的观点是相反的</b>；</li>\n<li data-pid=\"aVNRF-gl\">其次，分析过程中存在部分结论、数据的冲突，引起了同行的质疑。</li>\n</ul>\n<p><br></p>\n<p data-pid=\"kUBgbHtY\">3年后，西班牙的科学家在调查了14,413名毕业大学生之后，再次捍卫了这个观点：</p>\n<p data-pid=\"bpomQQO8\"><b>喝咖啡确实可以降低患抑郁症几率，而且量越大，降低得越多。</b></p>\n<blockquote data-pid=\"qGNyM0FY\">每天喝4杯咖啡以上的，患抑郁症的概率只有0.6%，是每天喝1杯咖啡的二分之一。</blockquote>\n<p><img src=\"https://pic1.zhimg.com/v2-44bd3a565c84bbde978740e9ccaafcd8_720w.jpg?source=b1748391?rss\" data-caption=\"喝咖啡数量和患抑郁症几率的关系，来源[2]\" data-size=\"normal\" data-rawwidth=\"2119\" data-rawheight=\"701\" data-watermark=\"watermark\" data-original-src=\"v2-44bd3a565c84bbde978740e9ccaafcd8\" data-watermark-src=\"v2-aa383f6b7f96c1faed475e29b3ddafba\" data-private-watermark-src=\"v2-8ca65630207caa0dab574e259b253860\"></p>\n<p data-pid=\"zRbQPih9\">不要小看这0.6%的差别。</p>\n<p data-pid=\"hFsdTiR9\">因抑郁症而导致的自杀，是15-29岁年轻人的第二大致死原因，每年都有超过80万的年轻人因为这个原因死亡。</p>\n<p data-pid=\"3ucoFGHl\">一项从1980年开始，连续20多年跟踪了208,424名参与者的研究表明：</p>\n<p data-pid=\"YCDaJwfd\"><b>每天喝2-3杯咖啡的人比不喝咖啡的人自杀机率要低15%。</b></p>\n<p><img src=\"https://picx.zhimg.com/v2-67ce7051c58db66b856d1fabeeaf82a6_720w.jpg?source=b1748391?rss\" data-caption=\"喝咖啡和自杀机率的关系，来源[3]\" data-size=\"normal\" data-rawwidth=\"2310\" data-rawheight=\"1263\" data-watermark=\"watermark\" data-original-src=\"v2-67ce7051c58db66b856d1fabeeaf82a6\" data-watermark-src=\"v2-a98310febafa67e94af96e9bb14780a4\" data-private-watermark-src=\"v2-bc18efe943a4192f0ee91fb4ca47e68d\"></p>\n<p data-pid=\"8SdubOGv\"><b>原来，咖啡这里含有很多抗氧化、抗炎症物质 (绿原酸、单宁酸等)。</b></p>\n<p data-pid=\"AmDog9_F\">它们可以抑制人体内的氧化作用和炎症</p>\n<p data-pid=\"oMh8Nedf\">——身体健康、病痛少，精神状态就好，患抑郁症的概率就下降了。</p>\n<h2>三、长期喝咖啡的人更瘦</h2>\n<p data-pid=\"i9zx5nMz\">2020年，美国一项涉及近6000人的调查显示：<b>喝咖啡的人更不容易胖。</b></p>\n<blockquote data-pid=\"wGO1GeNW\">每天喝2杯以上咖啡的女性，体脂率要比不喝咖啡的人低1.9-3.4%</blockquote>\n<p><img src=\"https://pic1.zhimg.com/v2-8dad58cbe6feb68c6ff93ee530deab92_720w.jpg?source=b1748391?rss\" data-caption=\"喝咖啡和体脂率的关系，来源[4]\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"894\" data-watermark=\"watermark\" data-original-src=\"v2-8dad58cbe6feb68c6ff93ee530deab92\" data-watermark-src=\"v2-96f7b6b8768d232ad3c7afaa59db87a2\" data-private-watermark-src=\"v2-c5f10f76b4e7ab5ecce4991c8ac69134\"></p>\n<p data-pid=\"PdCg24uT\">这个结果来源于两方面的原因：</p>\n<p data-pid=\"HAKtMrEI\">首先，咖啡中的<b>咖啡因可以降低人体合成脂肪的速率</b>[5]。</p>\n<ol>\n<li data-pid=\"SyU4VcfS\">可以抑制脂肪细胞的运行，让脂肪少合成；</li>\n<li data-pid=\"yvdAma5Q\">另一方面可以促进肠道菌群的作用，影响人体的新陈代谢。</li>\n</ol>\n<p data-pid=\"opJnjQfM\">其次，<b>咖啡能让人精力充沛，提升大家运动的意愿</b>。</p>\n<blockquote data-pid=\"s6v-SHFu\">喝咖啡的人感觉疲惫的比例更低，精力充沛的比例更高</blockquote>\n<p><img src=\"https://picx.zhimg.com/v2-04cfd30e3ddd609a8006017e84e442bc_720w.jpg?source=b1748391?rss\" data-caption=\"喝咖啡和运动、疲劳程度的关系，来源[6]\" data-size=\"normal\" data-rawwidth=\"1801\" data-rawheight=\"708\" data-watermark=\"watermark\" data-original-src=\"v2-04cfd30e3ddd609a8006017e84e442bc\" data-watermark-src=\"v2-92f96b7880410964d6cba5643abbeb2b\" data-private-watermark-src=\"v2-ade2900170aad9140bdc15255b95c001\"></p>\n<p data-pid=\"4apTTcSS\">对于减肥，<b>咖啡更多是一种辅助的作用，并不能直接拿来减肥</b>。</p>\n<p data-pid=\"awDcCAn3\">真要减肥，还是少吃、多运动更为有效和健康。</p>\n<h2>四、全因死亡率更低</h2>\n<p data-pid=\"IY_2Vyno\">英国的科研人员通过11年随访了 468,629人，发现：</p>\n<p data-pid=\"jewWYi2J\">每天喝0.5-3杯咖啡的人全因死亡率要降低12%。</p>\n<p><img src=\"https://picx.zhimg.com/v2-5651cb362f110e3e0aec8f9c36cb164c_720w.jpg?source=b1748391?rss\" data-caption=\"来源：文献7\" data-size=\"normal\" data-rawwidth=\"1734\" data-rawheight=\"1205\" data-watermark=\"watermark\" data-original-src=\"v2-5651cb362f110e3e0aec8f9c36cb164c\" data-watermark-src=\"v2-caffc260f4f9e376d9b8c5bd3796c28f\" data-private-watermark-src=\"v2-04c81ece9ebcd0c52447e4eec1914326\"></p>\n<h2>五、怎么才算适量？</h2>\n<p data-pid=\"YLZ1TVc6\">上面说了很多喝咖啡的好处，但这一切有个前提，就是适度。</p>\n<p data-pid=\"waH_WZOD\">适度是指每天不超过300-400mg咖啡因的摄入量，这点国内的膳食指南暂时没有涉及，我们可以参考<b>《美国居民膳食指南2020-2025》</b>：</p>\n<blockquote data-pid=\"ugZeL2CJ\">对于健康的成年人，建议每天摄入400mg以下的咖啡因。</blockquote>\n<p><img src=\"https://picx.zhimg.com/v2-e0e8b67e9e8937ae37ae32d88e7c34a9_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1879\" data-rawheight=\"979\" data-watermark=\"watermark\" data-original-src=\"v2-e0e8b67e9e8937ae37ae32d88e7c34a9\" data-watermark-src=\"v2-1698322b68da452a2c4587718c5ef0d9\" data-private-watermark-src=\"v2-273294764ef4b47fd220aa3bbca0ed21\"></p>\n<p data-pid=\"w2Ns7uRM\"><b>400mg的咖啡因，大概对应星巴克中杯3-4杯的量 (如果是不含奶的黑咖啡，量减半，即＜2杯)</b>。</p>\n<blockquote data-pid=\"B4xhU7J5\">备注：黑咖啡中咖啡因含量更高，因为奶咖中的咖啡因含量被奶稀释了。</blockquote>\n<p data-pid=\"FQgZXrhZ\">适量的第二个方面，<b>是警惕糖、油脂的摄入</b>。</p>\n<p data-pid=\"wqBmxlGz\">比如三合一的速溶咖啡，里面的糖和饱和油脂(植脂末)的含量都很高；还有一些饮品店、咖啡店的咖啡，一杯300-500ml，全喝掉糖含量可不少。</p>\n<p data-pid=\"wafhKCvy\"><b>这些糖、饱和油脂带来的负面作用，会抵消咖啡对身体的好处。</b></p>\n<p><img src=\"https://picx.zhimg.com/v2-67b27e418df49bd25f8d609b1caa7cc9_720w.jpg?source=b1748391?rss\" data-caption=\"三合一咖啡的配料表\" data-size=\"normal\" data-rawwidth=\"1643\" data-rawheight=\"388\" data-watermark=\"watermark\" data-original-src=\"v2-67b27e418df49bd25f8d609b1caa7cc9\" data-watermark-src=\"v2-1ed4b31865ce68d0fe2fdf3f0c7304d5\" data-private-watermark-src=\"v2-dc145c1fc67cbc3e3c81748226b23625\" data-qrcode-action=\"none\" data-tags=\"qrcode\"></p>\n<p data-pid=\"Ee6DwdMR\">另外，对于特定人群，喝咖啡是需要注意的：</p>\n<p data-pid=\"aTdvd5DZ\"><b>小孩(＜2岁)、孕妇(含哺乳期)、胃酸过多的人、高血压、易失眠人群。</b></p>\n<ul>\n<li data-pid=\"uPWO_zWa\">咖啡和自然流产、延缓胎儿生长等风险是否相关，目前尚有争议 (证据等级较低)。</li>\n<li data-pid=\"7OFsWQnL\">咖啡会促进胃酸分泌，肠胃功能不好的人空腹饮用可能会感觉不适。</li>\n<li data-pid=\"vZJr3U58\">咖啡会短暂地引起血压波动，对高血压人群不利。</li>\n<li data-pid=\"KLBjoyV9\">对睡眠不好的人易诱发失眠。</li>\n</ul>\n<blockquote data-pid=\"u-itxxqP\">关于小孩、孕妇再补充下：<br>小朋友代谢咖啡因的能力比较差，所以不建议喝咖啡；孕妇或者哺乳期的女性喝咖啡可能会影响到小孩。</blockquote>\n<hr>\n<h2>最后</h2>\n<ul>\n<li data-pid=\"CinN-Wo2\">\n<b>适度喝咖啡的好处：</b>更快乐、更瘦、全因死亡率更低；</li>\n<li data-pid=\"BoqWtWVX\">\n<b>注意</b>：控制热量、适量(＜3-4杯奶咖，或＜2杯黑咖啡)；</li>\n<li data-pid=\"mjH0TevE\">\n<b>需注意人群</b>：小孩(＜2岁)、孕妇(含哺乳期)、胃酸过多的人、高血压、易失眠人群。</li>\n</ul>\n<p data-pid=\"swG0xfc5\">虽然适量喝咖啡对身体有好处，但它毕竟只是一种饮料，大家倒也不必奔着咖啡的功能去喝。</p>\n<p data-pid=\"0nzrwqpi\">——谢谢阅读.</p>\n<p><br></p>\n<ol>\n<li data-pid=\"ac3sp4hW\">Longfei Wang, Xiaoli Shen, Yili Wu and Dongfeng Zhang. (2015). Coffee and caffeine consumption and depression: A meta-analysis of observational studies. <i>Aust N Z J Psychiatry</i>. 50(3):228-42.</li>\n<li data-pid=\"vkzbWgdI\">Adela M. Navarro, Daria Abasheva, Miguel Á. Martínez-González. (2018). Coffee Consumption and the Risk of Depression in a Middle-Aged Cohort: The SUN Project. <i>Nutrients</i>. 10(9): 1333.</li>\n<li data-pid=\"WcQ6j3Vx\">Michel Lucas, Eilis J O'Reilly, An Pan, etc. (2014). Coffee, caffeine, and risk of completed suicide: results from three prospective cohorts of American adults. <i>World J Biol Psychiatry</i>. 15(5):377-86.</li>\n<li data-pid=\"e7nkitbN\">Chao Cao, Qinran Liu, Mohammad Abufaraj, etc. (2020). Regular Coffee Consumption Is Associated with Lower Regional Adiposity Measured by DXA among US Women. <i>J Nutr</i> .150(7):1909-1915.</li>\n<li data-pid=\"4UQhJVbf\">A V Sirotkin, A Kolesárová. (2021). The anti-obesity and health-promoting effects of tea and coffee. <i>Physiol Res</i>. 30;70(2):161-168.</li>\n<li data-pid=\"d42X3j4a\">Luciana Torquati, Geeske Peeters, Wendy J Brown, Tina L Skinner. (2018). A Daily Cup of Tea or Coffee May Keep You Moving: Association between Tea and Coffee Consumption and Physical Activity.<i> Int J Environ Res Public Health</i>. 22;15(9):1812.</li>\n<li data-pid=\"VEbCRdD3\">Judit S , Kenneth F , Zahra R E , et al. Light to moderate <span class=\"nolink\">coffee consumption</span> is associated with lower <span class=\"nolink\">risk</span> of death: a UK Biobank study[J]. European Journal of Preventive Cardiology, 2022.</li>\n<li data-pid=\"Lkvl_Wpq\"><a href=\"http://link.zhihu.com/?target=https%3A//sipcoffeehouse.com/coffee-cherry/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Is The Coffee Cherry Edible &amp; How’s It Taste?</a></li>\n<li data-pid=\"G_XZrPgh\">Socała, K.; Szopa, A.;Serefko, A.; Poleszak, E.; Wla´z, P.Neuroprotective Effects of Coffee Bioactive Compounds: A Review. <i>Int. J. Mol. Sci</i>. 2021, 22, 107.</li>\n</ol>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/question/546343871/answer/2692019428?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\">知乎用户（登录查看详情）</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/546343871/answer/2692019428?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">71 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/476704564?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">经常喝咖啡有什么好处？</a><br><a href=\"http://www.zhihu.com/question/477156022?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">喝咖啡有哪些益处？</a><br>\n","link":"http://www.zhihu.com/question/546343871/answer/2692019428?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"日本式的“深刻”----1995版《攻壳机动队》","date":"2022-09-28 10:38:54","description":"\n<p data-pid=\"vrxU4hmw\">在《攻壳机动队》诞生之前，《银翼杀手》已经得到了声誉上的修正。从表达主题与架构方式来看，押井守似乎受到了菲利普迪克和莱德利斯科特的很多启发，用一种更加“不商业”的方式，以相对严肃的姿态，重新探讨了这一主题。这让作品的剧情线索变得不那么波澜起伏，不具备太多的转折变化，甚至有些干瘪单薄。押井守将剧情用作了人物做出各种反应的引线，从而构建起了人物对内心的自我思考，以及与他人形成交互的内在表达。甚至我们可以说，《攻壳机动队》的剧情，也是为了创造一些具有主题表达作用的画面，而存在着的工具化环节。</p>\n<p data-pid=\"VW2AtxKr\">在第一部剧场版的前半部分，作品的重心放在了以下几点上：第一阶段下，接受大量改造的义体人与世界的差异化隔阂，义体人在无意识中形成对自我认知的“去人化”动摇；第二阶段里，对于义体人倾向的展示，改造更少的人类对世界的自然融入，人类与义体人的不同；第三阶段中，人类与义体人基于“内心情感”的趋同，二者无关于\"身体改造比例“的精神层面共性，以情感而形成的人性本质。</p>\n<p data-pid=\"ui61N9MA\">对第一阶段，押井守设计了几个围绕着光学迷彩的画面手法。开头的暗杀中，在人类保镖的注视之下，素子启动了光学迷彩服，逐渐进入了不可见的状态，但她身形造成的现实图景扭曲化，与周围正常的现实形成了强烈的对比，凸显出了其作为义体人，与人类世界的不融入。光学迷彩仿佛成为了区别义体人与人类的屏障，这也包括了对穿着光学迷彩服所需条件的设计-----如果是正常人类，在羞耻心之下，显然不能以裸体的姿态进行穿戴。而裸体，也成为了义体人对人类羞耻感的感受淡薄之表现，在开头的素子裸身之中，得到了进一步的应用。躯体接受改造后的去肉体化，在潜移默化中让她失去了”暴露裸体“的意识，而更接近于\"展示身外之物”，由此也就淡化了作为人类理应拥有的羞耻感。素子在其后更加明显地表现出对自身“不再是人“的迷惑，而这种心态在此处便已经得到了铺垫。</p>\n<p data-pid=\"Ml6Y_hgU\">根据台词，我们也看到素子对于义体化自身的安分守己：她只是完成任务，执行义体被要求的命令，而作为剧情背景的复杂国际政治，则是专属于人类的东西，与她没有关系。在领导们讨论着政治阴谋与交往权衡之时，她往往是漠然的，似乎游离于这个话题之外，只等待着具体的命令下达。这也是本片中看似复杂的政治化剧情背景，在实际应用中的最主要作用了----它当然是紧贴90年代时事的，但远远没有承载押井守的什么政治态度表达，只是为了强化片中人类世界的真实感。</p>\n<p data-pid=\"4sSe-PlR\">而当剧情来到了第二阶段，素子抓捕垃圾车的段落，除了二人隐身后的现实扭曲画面之外，押井守还加入了对远景和第一人称视角的使用。在远景中，我们看到了义体犯人站在未曾扭曲，真实感爆棚的城市背景之前的动作，他与光学迷彩中的素子战斗。在现实的大背景之下，光学迷彩造成的扭曲微不可见，这让他仿佛在与空气恶战，并被虚空地抛飞，折断手臂。于是，前景的他与后景的现实，就此隔绝开来。此外，在第一人称中，他眼中看到的远景世界，呈现了非现实感极强，属于义体人改造后视野的深蓝色。同样的第一人称视角，也出现在了素子一方的画面中。对于义体人对人类世界的距离感，这是一种非常有效的表现手段-----在他们被改造过的眼球中，世界并不是真实的颜色。</p>\n<p data-pid=\"jMB8F08u\">而在这一阶段，义体犯人与人类也形成了内心层次上的对比：收垃圾的小哥，接受义体改造的程度更小，”人类“属性更多，他对于家庭滔滔不绝地表达着热爱，与同事之间的互动显得无比自然；而相比之下，义体犯人被小哥称为“朋友”，甚至不惜冒着被抓捕的风险，也要提前示警，他却对着小哥无情地开枪，在人情之上区别明显。义体人与人类世界的分隔，义体人与人类之于人心情感的区别，就此确立。</p>\n<p data-pid=\"ObAC0pCq\">事实上，在这一阶段，我们已经看到了一些第三阶段的影子。义体犯人跑出小巷，看着远方楼宇，上空的飞机，露出了微笑，这暗示了他对于人类世界的向往。而素子，也在第三阶段中表现出了这种向往。她在业余时间里潜水休闲，做着不符合义体人常规的事情，也对同事叙说了自己关于“有记忆就构成了完整的我”的想法。这一小段落，是对于义体人拥有人性本质的表现。押井守首次让素子脱离了义体人对应的”工作者“状态，带着她进入了休闲时间，而正如巴特所说，这本来不应该是义体人应该有的举动。脱离义体人的常规状态后，素子便回归了”人“的一面，表现出了对人类身份的回归。她的潜水，仿佛是在进入羊水，并以跃出水面的方式，让自己获得人类的”出生“。而当巴特说出义体人的记忆与肢体要归公的时候，她否定了这种将他们”工具化“的说辞，而是把工具属性更强的”虚假记忆“看作了提供真实情感，定义完整自我的人性要素。这正是她在表层迷惑之下，更加根深蒂固的自我认知，是对于自己人类属性的信念。在义体化的生活与工作中，这种信念会被动摇，就像她看到虚假记忆戳穿后成为”空壳“的清洁工小哥之后的反应，但不可能被彻底抹除。在说着这些的同时，素子背后的楼宇逐渐放大，与素子愈发靠近，暗示着她与人类世界的距离变化。</p>\n<p data-pid=\"YkWR0qdn\">义体人的记忆不独属于自己，随时可能归还组织，这决定了他们在人类世界中的工具化。然而，这种作为义体人活动的记忆，也恰恰构成了他们的内心世界，独立思想，让他们成为了“自我”，赋予了他们作为人类的觉醒能力。押井守设计了“镜面”构图，让素子先后出现在镜中与湖里，两个素子相对而立，仿佛她作为义体人与人类的并行存在，表现出她的双重属性。另一方面，人类也呈现出了“情感决定人性”的属性。人类司机发现自己记忆的虚假，瞬间变成了空壳，周围也不再是自然的街景，而变成了灰黑的色调。而一句“当你有了感受的时候，真假就不重要了”，则是对素子等义体人之人性的肯定，让情感本身的重要性脱离了客观真假，也脱离了义体人与人类在身体机能上的肉体区别，同时拥有了人性的可能。</p>\n<p data-pid=\"UnjQuTeX\">人类想要使用义体人作为工具，因此用了植入记忆、入侵记忆的方式。然而，它带来的，必将是义体人的人性觉醒，以及相应的灾难。人类司机被植入记忆后的空壳化结果，正是前半部里对这种悲剧的铺垫。义体人对此的反抗，也正与《银翼杀手》一样。这也是作品引入国际政治背景的又一个目的----人类的阴谋，正如他们作为阴谋手段的“植入记忆，入侵躯壳”，对于义体的工具化运用，这种负面的东西并非“人”的根本，无论警察组织的正当运用，还是外国团体的非法犯罪，都是如此，“情感”才是为“人”的根本。</p>\n<p data-pid=\"V4ED8nJ_\">作品的后半部分，则是对于第三阶段的加深与升级。首先，素子对于自身非人的迷惑更明显了，由清洁工小哥的空壳化而引导出来。当她扭头看向天空的时候，空中飞过了飞机，这与此前的义体罪犯高度吻合，是素子在潜水完毕、”记忆让我完整“的表达之后，另一种对于现实世界的向往，推翻了她在开篇时对于人类世界通行的羞耻感、政治外交的冷淡反应。然而，在随后的一连串镜头中，押井守却没有就此让素子回归人类，而是围绕着她绝大部分身体都改造为义体的肉体现状，强调着义体人与现实人类世界的隔阂之存在。素子坐船穿行于城市之中，然而她所在的环境，却与客观的真实世界存在着一定的区别。首先是“光学迷彩”的延伸使用，它会让城市的景象变得扭曲起来，而在这里，镜头往往让城市景色出现在水面之上，以水的波动同样扭曲了它。在给到楼宇本身的时候，押井守则保持了倾斜构图，继续强化扭曲感。</p>\n<p data-pid=\"u9SL1f_a\">相对地，在素子仰望的正常非扭曲的楼宇之中，她看到了另一个自己，穿着普通的服装，打发着闲暇的时光。在她的理解中，这正是作为“人类”---而非“义体”----的自己，已经与她本人分离开来，处在一个她只可远观而无法进入的正常世界里。同样的表达，也出现在了素子潜水的场景里。她与眼前的另一个自己近在咫尺，却无法与之融合，只会带来破水而出的幻象毁坏。在这一段的最后，押井守给出了一个与此前“素子背后的楼宇逐渐靠近”镜头相反的画面。作为纯粹生物的小猫，被平衡构图作稳定的呈现，却离镜头越来越远。这是一个隐形的素子第一人称视角，表现着她眼中自己与普通生命的渐行渐远。随之，素子身处的城市开始下雨，一切笼罩在了水面的延伸状态之下，仿佛整个世界都被水滴折射了光线，扭曲起来。素子望向的木头模特，巴士上的人体广告，都加深了素子的非人类认知。</p>\n<p data-pid=\"5h14WUCa\">而在最后阶段，作品引来了一个对义体人本质属性的极致表达载体：进入女性躯壳的傀儡师。傀儡师的出场，只在镜头中露出了两条僵硬的小腿，让人想起了之前的塑料模特，眼神也显得毫无生气。在捕获它之后，警察领导等人的定性，更是明确无比：它没有自己的大脑，其GHOST---无实体的个体生命“鬼魂”----由外部入侵灌输，占据了它的躯壳，因此它只是一个他人GHOST的容器。在多方交涉的说辞中，他们直接将其中的GHOST当成了”情报“。当阴谋进一步揭开后，相关的表现变得更加丰富。警察组织内部围绕着傀儡师计划的你来我往，说明了他们对人造之物的进一步工具化意图-----不再仅仅是作品前半段中，停留在物质层面的义体，更包括了精神层面的灵魂GHOST。在这里，作品依旧延续了其对于政治与阴谋的一贯处理方式，用语言叙述的方式给出内容，呈现了其复杂，但却并没有做太多展开，从而淡化了对阴谋本身的思考整理，而是聚焦于义体人卷入这种莫名的漩涡,被当作博弈工具的状态。</p>\n<p data-pid=\"gmCmeU6H\">此前只是略给概念的联网与ghost，在这里得到了充分的运用，成为了互联网世界中对“情感与记忆形成的灵魂”的指代。与之同步，义体人的极限也随之出现，将主题的探讨带入新的阶段。这个女性义体甚至没有独立的灵魂，而是由他人完全的意识占领产物，仿佛他人穿着的一件衣服，灵魂、记忆、情感，都全然不存在。素子此前对壮汉所说的迷惑，”在改造的过程中，我们是不是被植入了其他GHOST，已经不再是我们自己“，在傀儡师的身上得到了极致的呈现---改造得最彻底，灵魂与记忆完全来自于他人，因此也就比自己产生记忆与反馈的素子等人更虚假，彻底的躯壳化让它成为了容器，在信息战等人类世界的勾心斗角中，也就成为了比素子等人更纯粹的工具。</p>\n<p data-pid=\"yRBBIw0r\">然而，这种极致的躯壳化，才带来了对人之本质属性的极致强调。在傀儡师看来，它没有原本的自我肉体，因此也就没有不属于自己的肉体躯壳。它的唯一自我，是携带记忆与情感的灵魂，每一具拥有灵魂的躯壳便都成为了它的”本体“。肉体的极致躯壳化与”人类定义“的关系，就此被彻底斩断了，能做出该定义的根本就不是物质，而是精神。值得注意的是，当傀儡师的”躯壳“开始说话时，它的神态也不再是此前的茫然，眼神中流露出了属于人类的一丝得意与狡黠。作为灵魂状态下的人类，反抗将自己当作工具的物质状态敌人，有着非常合理的动机。</p>\n<p data-pid=\"KvftcqJ0\">而傀儡师的反抗，升级到最终阶段后，就像他本人所说的“唯一一件还没做到的事情”，便是对于人类最独有行为-----“创造生命”----的实现。它与素子，两个义体改造程度极高的存在，以结合的方式带来一个全新的小女孩。这个设计，也对接了后半部中提出的“DNA”与“GHOST”等同之概念。GHOST在网络世界中传送，进入义体的躯壳。它不仅仅是一个数字信息，更是对义体进行”此为何人“之定性的注入灵魂。而相对地，DNA在物质世界中传递，也并非一段遗传信息，而是将一具肉体塑造为举有独特性之存在的关键要素。DNA在广博的物质世界之中，GHOST则在同样广博的网络世界之中，让其成为了对非物质之精神世界的象征。任何人都不能将DNA当作单纯的信息工具，也就不能那样看待GHOST。互联网不具有实体的”非现实“之虚构性，暗合着义体人在物质层面上的肉体不纯粹，而”互联网DNA“GHOST的存在，便也让义体人肉体上的改造不再成为对其生命定义的阻碍，哪怕其在物质层面上确实是非自然的”人造物“。</p>\n<p data-pid=\"OwcnLeNS\">对于“人性根本的去物质化“，在最后一场战斗中有着更细致的体现。一方，是被组织命令着的屠杀机器，在数个数码状态的摄影机主观视角里，进行着索敌。而另一方，则是自主行动的素子。在物质层面极端工具化，却在精神层面极致人性化的傀儡师的影响之下，素子接收到了他最坚定的自我信念，从而摆脱了自己的迷惑和摇摆，完成了对“人”的回归。</p>\n<p data-pid=\"ns_tnVFt\">在打斗中，素子的义体被机器毁坏，变得破破烂烂，随后出现了火力破坏生物树的特写，对这一段下了定义：组织试图用抹杀物质躯体的方式，消灭素子和傀儡师的生命，根除拥有自由向往、不再听从自己命令与计划的造物，而他们的理想造物，正是屠杀机器那样完全不具备自主意识的东西，其理想初衷便带有强烈的生命抹除意味。然而，素子和傀儡师可以被毁去躯体，但他们的灵魂却完成了创造生命的融合，并以新生命的形式独立地长存于互联网世界。互联网意味着精神意识的世界，这才是人性的根本所在，躯壳是可以被舍弃的。就像在战斗中，素子的躯体被破坏，但古塔萨依然会在左轮手枪无用之后，想起片头素子对此的吐槽而会心一笑，显示出素子与旁人始终存在的情感交织。</p>\n<p data-pid=\"ClKiQ2eW\">因此，由于义体人拥有GHOST，他们也就成为了电线连接起的网络世界里的生命，具有了创造生命的能力。新生命的小女孩出生，她看向世界，对巴特说出了“我不再是傀儡师，也不再是你认识的那个素子少佐”，说明了她的独立性质----这是一个全新的灵魂，而非傀儡师和素子的精神进入的另一躯壳，这正是“孕育生命”的表现。在物质层面，她只是巴特捡来的一个女孩义体，并不具备独特性。但在更加根本的精神层面上，她成为了完全的生命体ghost，去往了非物质，却又远非虚构人性的生命本质世界---对应精神空间的互联网空间。在最后一组镜头中，显示屏一样的主观视角，拥有噪点的房间，噪点消失的房间，先后出现，意味着义体人世界的逐渐真实化。而在最后，小女孩看向远方的世界，说出了“互联网如此广博”，更是彻底将互联网的精神世界与现实世界看作了等同的东西。这推翻了通篇保持的义体人世界处理方式，推翻了显示器与摄影机化的视角，三维成像后的街头画面，以及雨水折射中的楼宇巷弄，完全肯定了精神世界与其中生命的真实存在，让它与现实世界里的一切再无任何不同。</p>\n<p data-pid=\"mY_Yusk4\">DNA与GHOST的等同，是本片中相当大的一个亮点。它与互联网飞速发展的90-00年代相吻合，借着非现实的互联网世界，让片中关于”生命定义“的表现方式变得更加具象，更可触及了一些。在2004年的后作《无罪》中，它得到了更进一步的延展使用。并且，不同于第一部的“遮遮掩掩”，押井守大幅地拉高了《无罪》的“晦涩”程度，本就稀薄的剧情进一步被削弱。前作里，剧情还拥有着对人物内心反应的引导作用。而到了《无罪》，人物有了更多脱离剧情事件的表述部分，而是以“自我”为题目，或是用自己或他人之口直接阐述，或是用画面上的要素对比做独立呈现。</p>\n<p data-pid=\"63ZcLcSf\">《无罪》的第一阶段，便直接将重点放在了“人”与“机器人”在“情感表达”上的对比表现，并引入了阿西莫夫著名的机器人三定律，作为机器人行为逻辑“非情感化”可能性的理论支撑。在序幕中，众人类警员对巴特的敌意，首先给出了二者之间的天然隔膜。前者肆无忌惮的憎恶表达，后者充耳不闻的淡然麻木，似乎在情感层面上已经拉开了差距，让义体人巴特显得更像一个执行命令的机器。然而，这种隔膜马上就出现了变化。巴特面对的机器人，发出“救救我”的呼叫，而后扒开了外表的皮肉，露出机器内体，自爆而死。这是一个具有双重可能性的片段。正如随后的女博士所说，这种\"自杀\"可以是它对于“不得伤害人类”之阿西莫夫定律的遵从，是机器化的表现。但在另一方面，同样在女博士的介绍中，它也可以拥有另一种意义：被非法地设计出性功能的机器人，以自身意愿发出呼救后的自杀。如此一来，它扒开皮肉的行为，便也具有了双重性，既可以是对于自身“机器”本质的暴露，也可以是想要让GHOST从这副被工具化设计与对待的躯体中解放的“人性”。而起到决定性的，便是女机器人的“灵魂”之有无。以”扒开躯体“而言，只有拥有灵魂，才会想要”挣脱“出躯体，由此产生躯体与精神的并存，产生外与内、表面与本质之差异。</p>\n<p data-pid=\"7vbndYal\">物质层面的躯体之外，是否拥有精神层面的灵魂？这关系到他们做出超越机械规则之行为的定罪。拥有灵魂，则必须作为人类对待，在强迫性行为中处于受害者的定位，就此不再有脱离性服务之程序指令而成的，作为工具的有罪推定。反之，则是机器人的失格之罪。标题《无罪》，正如前作的最终呈现内容一样，显然已经揭示了其答案。而在本作中，灵魂专有的”情感表达“，自然成为了导向答案的主体线索。</p>\n<p data-pid=\"g6s0uIPL\">而在分量不多的剧情层面，作品也尽量直接地表现人类与机器人在情感上的相异。第一阶段是表面的，人类会对巴特产生厌恶，德古萨与其他人会互相嫌弃地斗嘴，会有人愤怒地踢翻垃圾桶，而义体人方面则显得颇为淡漠，无论是巴特，还是尚未完工的机器人制品，都是面无表情。特别是，当巴特和德古萨来到女博士的实验室时，押井守设计了一组广角镜头，突出了二人的表情，强调了他们面对女博士言辞的不同情绪反应----塔巴萨会激动起来，显示出女博士关于”人偶“的叙述对他的影响，而巴特则非常冷静，为德古萨解释其意。</p>\n<p data-pid=\"PmYgMGsl\">然而，通过作品在表面剧情之外的表达手法，我们已经可以在第一阶段看到，义体人在内里的情感闪动。无论是片头曲的结尾，抑或是频繁出现的机器人第一人称视角，还是实验室里对零部件的特写，押井守都强调了机器人的”眼睛“。作为心灵窗户的眼睛，是透过表面，窥探内心的最佳途径。在片头曲中，作品先是展示了机器人拼接的一幕幕，似乎强调着它的非生命化，然而在收尾部分却出现了大转折：两个人体结合的画面，对应着前作里素子和傀儡师的合二为一、创造生命，最后的眼睛变得有神起来，则意味着心灵窗户的打开，灵魂与意识独立于机器躯体的存在。就像上述的那样，机器人的情感淡漠只是表面，其情蕴含于内心，而他们趋向于”机器“的也只是外部的躯体，定义”人性“本质的却是内里的灵魂。当巴特和德古萨在车中谈论着”没找到素子“的时候，镜头闪过了一个人偶挂件，暗示着素子抛弃机器躯体，去往精神世界互联网的命运。而在实验室的段落，女博士关于”机器人并非人偶“的叙述，配合着她冷漠的表情与最后打开的机械构造，而”救救我”的录音，穿插在各种机器人躯体的静默画面之间，形成了外表与内里的良好对比。从何处才能得到机器人的本质属性，机器人的“内里\"是否拥有超越物质构件的灵魂，答案已经显而易见。</p>\n<p data-pid=\"GKBNjtTa\">在本作中，就像九科领导所说，巴特取代了素子在前作中的表达作用，变得“像失踪前的少佐”一样。在外表上看去，他正如前作开篇时的素子，在高度义体改造之后，已经处在了“非人”的无情感状态。除了上述的部分之外，在他与德古萨前往凶杀现场的时候，押井守也强调了他们的不同。当他们一行人与眼球义体改造的同事分别时，巴特与对方擦肩而过，不发一言，表现之冷漠与同样做着机械回答的后者无甚分别，而德古萨和另一名调查人员则非常“活泼”，一个挥了挥手，另一个则调笑了一句。然而，当巴特返回家中，我们却看到了他的内在。在外表上，他依然是冷漠的，对同事建议狗粮毫无反应。然而，他却可以面无表情地遵循建议，配置全干粮的吃食给狗狗，随后同样面无表情地与狗狗相依在一起。甚至，虽然对主人讨好备至，但他的狗也是机器。在一个”机械构造的狗“的镜头中，这得到了第一个揭示。而后，狗看着同样虚拟成像的鱼，脸映在水中，与鱼重叠起来。这既是对两种动物等同的暗示，也是对前作中义体人所处”水面折射后的世界“手法的延用。</p>\n<p data-pid=\"A_lKzFsr\">通过巴特生活的段落，他与素子的趋近就很明显了：外在的非人化机器之下，内里的人性情感流动不停。对这一段进行总结的，则是九科大屏幕上显示的森林。科长说着“巴特像少佐一样，沉默不语，没有希冀，像森林里的大象”，描述了它存在的情绪与“生物”的属性，森林随之出现，质感完全真实，最后森林的画面变成了九科大屏幕中的显示。“外在机器之中内在的真实生物”，由此得以传达出来。</p>\n<p data-pid=\"yZ0WdV7b\">随着作品的推进，押井守的表达方式愈发地隐晦，与剧情的关系也愈发淡薄，对主题的探讨更是愈发地复杂。在巴特和德古萨前去黑帮的段落里，押井守呈现了一个完全剥离人性的纯粹机器化世界，甚至给出了”人性无用“的讨论方向。首先，他依然让德古萨和巴特产生对话，作为情感之有无于外在层面上的对比。而更加重要的是，德古萨和巴特在这一段中面对着机器化的存在，产生了成果截然不同的反应。先是在面对手雷-----强调”机械“属性的三维作画----时，德古萨惊慌失措，无法处理，巴特则漠然地推开了德古萨，顺利解决麻烦。</p>\n<p data-pid=\"rtuGuMHG\">随后，押井守把它变得更加概念化，以人物思想的形式加以表现。在德古萨和巴特进入对方的房间后，押井守给出了一个形式抽象而表意复合的设计，让德古萨似乎落入了对方预置的机关，接收对方的思想传达，同样似乎也是一种幻境，揭露了德古萨潜在的看法。德古萨打开了书架上的机关，从中看到了其中内置的又一个世界，自己与巴特置身其中，将进屋抓捕犯人的全部流程，细致到运镜构图，重现了一遍。内置书架的机关构成，让它成为了完全的机械化世界，外部世界中的生命体在其中都不存在，而巴特用机器眼睛扫描到的静止无生命的狗狗和女孩，也强调了生命的缺席。而它对于此前外部世界中巴特和德古萨行动的重现，则让它与外部对等起来----我们所处的现实世界，便是无人性的机械化状态，这是随着生化人与躯体改造的推进而逐渐形成的结果。</p>\n<p data-pid=\"UiNp_T5H\">作为结果的展示，押井守在这一段中给出了复合表意的战斗场面，表现了肉体的弱小与生命的”被抹除“。激烈的战斗中，鱼缸被打碎，肉体被炸烂，配合着德古萨的无作为，而构成抗衡的，则是多个特写（甚至包括段落前后的武器特写）中的机械件与冷兵器，同样配合着巴特的活跃。当机械的能力发展到一定高度的时候，人类就显得弱小了。从躯体上讲，他们的肉体凡胎变得无比脆弱，无法应付机械义体的打击。从精神上讲，他们也无法充分发挥机械的威力，会在其造成的巨大杀伤面前畏惧、恐慌，就像德古萨应付不了对方的机械，也会在拥有重火力的情况下对巴特说“我们是去谈判的，没必要拿它”。</p>\n<p data-pid=\"sI3AtJak\">因此，在这个力量被机械化成果顶到满格的世界中，人性，拥有感情的生命，都是要被毁灭与淘汰的存在，必须让位于无情的机械。伴随着犯人“人类以自己的雏形制造人偶，其实他们就是人类自身。人类这虚无的假象，衍生出了虚无的恐怖”的话语，他用枪对准了变成自己样貌的生化人，却始终不敢开枪，暴露了主观感情对理性判断的牵绊，明知对方是人偶，却因为外表而恐惧于痛下杀手。而犯人更是说出了“死亡是人类的终结，却只是人偶的开始。人偶可以是无意识，也可以是无限意识，因此人偶可能是新时代的神”，以及随后的人类部件化、电脑化的远景叙述，将生命的局限，无灵魂人偶高于人类的身份，人类向人偶转变的未来，表达了出来。当巴特说出“神就是永恒的几何学”，赋予了机械以神性后，他自己也在德古萨面前机械地扭头，随后分解外皮，露出了里面的部件。</p>\n<p data-pid=\"fRL-IzDT\">有趣的是，押井守又一次重置了时间线。当它又一次回滚到最初的时刻，德古萨再次在相同的构图中完成抓捕步骤，则直接被三维作画的战舰炮火轰灭了，甚至连他自己都变成了机械，似乎在世界的潜移默化之下，被同化一般地改造了。显然，无论德古萨给予自己几次机会，结局都会是“生命在机械面前的败北”，且败北形式愈发彻底。此前，德古萨问科长，“你为什么会挑选我加入团队”，就是他对自身力量有限的感知。而在另一组对比中，我们也能看到德古萨与反派在各自属性下的力量对比结果：反派设下幻境的机关，是一杯由人偶送上，永远匀速旋转的咖啡，而幻境中的德古萨拨动了一下带有几种生物图像的地球仪，则只是让它稍微转动了一会便缓慢停止。在反派制造的幻境之中，这成为了德古萨的不自信，也是反派传达出的极为坚定的思想。</p>\n<p data-pid=\"mhhBkBJz\">面对着反派设计的幻境，德古萨陷入其中，而巴特则不为所动，帮助了德古萨，这说明了他对于反派传递思想的全然否定，对自身内在人性之存在的坚定。他的外在是改造后的义体，表面上冷静无情，拥有机械的实力，但“内心一面”的存在，却让他潜藏了对待外物的丰富情感。他与他的机械小狗是如此，而在反派的幻境中，他与网络形态的素子的合作，则是高潮段落里的体现。已经不再拥有物质层面实体的“新”素子，在幻境中潜入，做出了对巴特的提示。“守护天使”的称谓，说明了巴特和素子之间确实存在的友谊。而这一切，都发生在了反派制造的互联网幻境之中，是非现实的世界。</p>\n<p data-pid=\"EMpY5Ppk\">在即将灭亡的时候，反派对巴特又一次强调着“意识的虚幻”，但同样“ 虚幻”的互联网世界，却有着巴特和素子的羁绊，也有着独立生命体的素子存在。他们联手摧毁了反派的阴谋，是对反派言辞的最佳推翻。随之，在三维作画的潜艇中，巴特和素子同时以义体的形象出现，在机械化的环境中拿出了精神层面的友谊与默契，击溃了纯粹的人偶军团。而作为点睛的，则是对于片头女机器人的脱罪处理----在她们的内里，是人类孩子被强行使用的精神意识，因此，呼救与自爆便都成为了生命”不想变成机械啊“的寻求解放之声，他们是生命，因此没有作为机器人的”罪“。</p>\n<p data-pid=\"pnD6KVmQ\">GHOST，真实地存在于机械躯体内，存在于精神层面的“心”中。即使是非物质的世界，如同互联网世界，意识、情感、灵魂，也绝非虚构的事物。只要当事人真地相信自己拥有它，它的力量就是纯粹的机械无法匹敌的，就像生化人大军无法挡住巴特和素子的联手。在结尾，巴特抱着自己的狗，而一度怀疑自己是否拥有家庭而非臆想的德古萨，也确实回到了妻儿的身边。</p>\n<p data-pid=\"E90k9oPQ\">无论是《攻壳机动队》还是《无罪》，押井守都调用了丰富的手法，对人物的情绪、属性、定义、思想，进行概念走向的强化。相比于更加大部头的同类型电影作品，它的人物虽然在迷惑，虽然由此生出了复杂的心理状态，但化石更多地停留在了对人物对自己属性的”迷惑“本身，对其情绪的呈现之上。角色用台词诉说着迷惑相关的不同心理层次，押井守则用镜头语言传达着同样的内容。</p>\n<p data-pid=\"84YwMTPq\">然而，在文本层面，它却暴露了一定的缺失，并没能承接上相应的深度，人物对于自我存在的迷惑也就没有作用、反应于更细化的具体行为、思维逻辑之上。这个缺失，让作品的思辨更多是在”自我认知“本身的角度上，而没有”具体为何有这种认知，这种认知带来了什么“。或许，所谓的”晦涩“，也多少是由于，”更容易理解“的文本有所缺失，而以更不直接的表达方式取而代之了。</p>\n<p data-pid=\"XCl23WuM\">以电影举例，在《机械姬》里，导演进行“何为人类”的探讨。科学家想要创造一个人类，制作了人工智能的机械人，并反复调整、测试，来获得它对事物与感情的反映，试图让它的逻辑与心理无限接近于人类。而在结尾，他也确实成功了----人工智能完全超出了他的预料与掌握，反向体察到了人类的心理，利用了人类助手对它的感情，杀死科学家，获得自由。导演用一个“机器人意味复杂地望向助手”的结尾，简练而漂亮地点出了自己的主题与答案----助手与观众，都不知道机器人的表情中包含了什么情绪与信息，就像科学家自以为完全掌控着它的心理变化却只是自以为是，人类的终极本质，即是“不可被掌握的复杂”。一系列的交互、猜测、推翻之后，才带来了最终的答案：不可掌握的随机即为人性，无关于躯体层面的肉体或机器。</p>\n<p data-pid=\"lYEO0FWk\">事实上，《攻壳机动队》的成片结果，可谓是日式”深度“作品的一种”特色“了。无论是《赛博朋克边缘跑者》这样的欧美发行+日本创作，还是日式RPG的游戏作品，它都或多或少地存在着。设立一个纵向上非常”深度“的立意主题，然后在横向的延展扩充环节则有所不足。起调够深，而挖掘，却未必同样地那么深。</p>\n<p data-pid=\"s2m664FP\">这可以是主题表达角度上的“不足”。当然，它也同样可以是日本以外的所有国家都难以完美创造出的个性腔调，是一种“特色”。与其说是挖掘的“深度”，向纵深而去的思考剖析，它更突出的，似乎是设题的“高度”，以及对这一高度上风景的展示。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/segelas?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">segelas</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/568411385?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"美联储大放水是在收割全世界，现在加息又是收割全世界，为什么他一直在赢，这其中有什么经济学原理吗?","date":"2022-09-27 09:57:54","description":"\n<p data-pid=\"CU1TCYfa\">作为对冲基金前从业者，我写一个更准确的回答。首先看几十年来的美元指数（红色）vs 美元利率（蓝色）：</p>\n<p><img src=\"https://picx.zhimg.com/v2-402b53a8c61b2b10c542a8d53c0df36c_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1300\" data-rawheight=\"656\" data-watermark=\"original\" data-original-src=\"v2-402b53a8c61b2b10c542a8d53c0df36c\" data-watermark-src=\"v2-f4bffdecc3998236403ee0aa1c306e43\" data-private-watermark-src=\"v2-c9633d25acb11b9abc8df40ac56c6e71\"></p>\n<p data-pid=\"TRMCfzJ0\">可以看到这两个线有相关度（correlation），但绝不是永远一致走，谁 lead 谁 lag 都不一定。</p>\n<p data-pid=\"12SF_B8K\">我们只能说：加息在短期通常有利于汇率，因为有套利交易（carry trade，就是借低利率货币，买高利率货币，吃利息）。同时，如果大家有“利率将不断升高的预期”，也有利于汇率。注意，这里的前提是经济运行正常（举例，阿根廷现在利率 75%，同时 ARS 不断贬值），流动性正常。另外，可别觉得如果蓝线一直往上，红线也一定一直往上。</p>\n<p data-pid=\"RHxuFIxU\">从蓝线预测红线并不容易，因为它们背后的决定因素不同：</p>\n<ol>\n<li data-pid=\"Aja9qR3h\">美元的强弱是由什么决定？主要由供求关系决定，现在主要由投机力量（例如对冲基金）的行为决定。这就像炒股，投机力量可以炒美元，或者炒任何可自由兑换的货币。</li>\n<li data-pid=\"y28d771O\">美元的利率是由什么决定？虽然也有市场供求关系影响（其中细节很有意思），但主要由 FOMC meeting 决定，而 Fed 的决策主要由 Taylor Rule 决定。根据 Taylor Rule，目前的利率（红线）还需要狂暴上升到蓝线的水平（主要是因为现在美国通胀太高）。所以“通胀让货币升值”在某些时候合情合理（但是绝不能认为这可以无限适用）。</li>\n</ol>\n<p><img src=\"https://pic1.zhimg.com/v2-b5a7bd6251f27bf7153427800e0ed3da_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1234\" data-rawheight=\"607\" data-watermark=\"original\" data-original-src=\"v2-b5a7bd6251f27bf7153427800e0ed3da\" data-watermark-src=\"v2-289c00d68b082dfdf7df6013cb336516\" data-private-watermark-src=\"v2-c6d20b0e73dc1fd75b02f1a3a93d88fb\"></p>\n<p data-pid=\"X8D4AQU5\">我们再看所谓“收割”。</p>\n<p data-pid=\"ia2b0md3\">如果用股市来比喻：如果某个神庄家能随意控盘，那么可以先把股价做低，把其他人赶出去，自己拿满低价筹码，再把股价做高，把自己手中的货清给其他人接盘，于是大赚一笔。然后再无限重复这个循环，只要股价不断波动，这个神庄家就可以无限永动机获利。</p>\n<p data-pid=\"SSHCsrk0\">于是很多公众号提出了“收割”观点：美元值钱的时候，用美元借你的钱，买你的东西；美元不值钱的时候，给你不值钱的美元抵债，把买的东西卖掉换回大量美元。于是这也是永动机循环，大家高呼“永远赢”。</p>\n<p data-pid=\"LbXlKZLw\"><b>但是我必须说，这是具迷惑性的阴谋论观点。原因有几个：</b></p>\n<p data-pid=\"Ait9CMwU\"><b>首先，美元市场是公开的</b>，如果你觉得美元会跌或升，那么你也可以去操作盈利。然后你会发现，它其实几乎是 random walk，<b>谁都很难预测未来的涨跌。</b>就像，美元指数涨了这么多，是不是已经 price-in 预期了？再杀一波止损就要回调了？抑或，由于美联储很可能还会继续加息，美元还会继续走高？这些都可以建模计算，但归根结底没有标准答案。如果你觉得你知道，你可以去赌。</p>\n<p data-pid=\"_AV6C0PT\"><b>第二，现在有丰富的衍生品可以提前锁定汇率</b>，大额的交易都会使用这些。如果担心有汇率波动风险，完全可以使用这些衍生品。</p>\n<p data-pid=\"L6oH9OkU\"><b>第三，美国政府和美联储等等，并没有“大肆买卖其它国家资产”</b>，只有美国公司和机构做这种事情，而这些是市场行为（除去监管的领域），谁都可以做。</p>\n<p data-pid=\"UGoQXcZe\"><b>第四，如果你认为美国国债是美国的借债，那么美国的这个借债一直越来越多</b>（严格说，是借得比还得快），不存在“根据汇率波动决定借债还债”，而且美国国债是按美元计价的，美国政府是借美元还美元，和美元汇率没有任何直接关系。</p>\n<p data-pid=\"OhIIrDc8\"><b>第五，美国的货币政策，首先是保障国内的经济运行</b>：如果通胀严重，就会加息；如果流动性危机，就会放水。至于之后对汇率产生什么影响，Fed 并未直接干预，全有赖于全世界投机力量的解读。</p>\n<p data-pid=\"H-bAIBRi\">因此，我们只能说：由于美元指数不断波动，如果某个实体能够成功提前预测涨跌，那么就可以盈利，“收割”不能预测或不去预测的实体。但是，预测美元汇率很难，机构也难以准确预测。</p>\n<p data-pid=\"i07ajJ4C\"><b>总而言之，阴谋论里的那种“靠汇率波动收割”，想法很有趣，但脱离现实</b>，不知最早是哪位民间经济学家发明的。</p>\n<h2><b>注意，这不是说“收割”不存在。</b></h2>\n<p data-pid=\"s80ZL1d1\"><b>这就像很多人臆想历史有很多复杂的阴谋，布局一套一套，而实情往往简单粗暴。</b></p>\n<p data-pid=\"40bNjjT1\">想“收割”，用最简单的方法就够了。美元本来就是废纸（信用货币都是废纸），只是因为它是最流行的储备和结算货币，所以无论怎么印，大家也收，也用，也存。</p>\n<p data-pid=\"Gz-4MfbE\">这得用币圈比喻才合适：你以为空气币需要靠坐庄赚钱，殊不知发的本来就是空气，直接卖空气就可以赚钱，卖得高也赚钱，卖得低也赚钱。</p>\n<h2><b>美元要“收割”根本不用靠坐庄，就像赌场老板不用靠和你赌钱来盈利。这当然不合理，但是这符合客观实际，同时也会逐渐改变。所以我们要倡导多极世界。</b></h2>\n<p data-pid=\"4ly_pAkL\">那么，这是不是无敌了？其实印钱只有一个最大问题，就是导致通胀。</p>\n<p data-pid=\"TECaox_1\">印钱理论的提倡者是 MMT（Modern Monetary Theory），它认为印钱治百病，而且不会通胀（或许需要前提条件：仅适用于发达国家，不适用于津巴布韦）。</p>\n<p data-pid=\"IkPoKMpT\">这并不是纯粹的臆想，它是有现实基础的。之前金融危机开直升机撒钱后，并没有出现恶性通胀，而且日本长期施行宽松货币政策，也没有出现恶性通胀。下面是美国通胀率，可见之前几十年都很美好：</p>\n<p><img src=\"https://picx.zhimg.com/v2-697287323741baf2939814b79edf69b5_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1208\" data-rawheight=\"582\" data-watermark=\"original\" data-original-src=\"v2-697287323741baf2939814b79edf69b5\" data-watermark-src=\"v2-ce8a65e1e595ac77836b6583cf9aac08\" data-private-watermark-src=\"v2-f94e1911fc943a708e853855325f6a47\"></p>\n<p data-pid=\"B3BLlj-T\">MMT 提出二十多年，长期处于“非主流”地位，大家都驳斥。但是疫情开始后，境外各国都开始暗中实践。</p>\n<p data-pid=\"SWzw7Kr1\">如果是有经验的金融从业者，或许就知道这里的玄机。其实一句话就可以说明问题：从前实体借了钱但存着不用（或者马上又回流），所以流动性没有溢出；如果真的把钱用了，通胀就来了。</p>\n<p data-pid=\"USjekVLs\">同理，如果钱流到富人手里（近年各国的富人资产增长速度远高于穷人），富人拿着不动，或者只在富人之间流动，日常生活用品不会通胀。但如果流到穷人手里了，日常生活用品很快就会通胀。</p>\n<p data-pid=\"s8KgSn3-\">印钱 = 通胀。不是不报，时辰未到。现在境外各国都在严重通胀，这是在疫情两年后才出现，有一个滞后的过程。最终境外各国的经济如何，居民生活水准变化的变动如何，可以拭目以待。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/bopengbopeng?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">PENG Bo</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/555030440/answer/2690525820?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">962 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/53654742?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何看待12月15号三点美联储加息？对国家和百姓有啥影响？</a><br><a href=\"http://www.zhihu.com/question/294005907?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">美联储加息的逻辑是什么？对美国的益处何在？</a><br>\n","link":"http://www.zhihu.com/question/555030440/answer/2690525820?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"React 为什么重新渲染","date":"2022-09-06 08:29:00","description":"\n<p>更新（重新渲染）是 React 的重要特性 —— 当用户与应用交互的时候，React 需要重新渲染、更新 UI，以响应用户的输入。但是，React 为什么会重新渲染呢？如果不知道 React 为什么会重新渲染，我们如何才能避免额外的重新渲染呢？</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/186432/20/28325/37613/631725bbEf2ff226e/66b99021df66578b.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/react-re-renders-101/\">https://blog.skk.moe/post/react-re-renders-101/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/react-re-renders-101/"},{"title":"为什么你不应该在 React 中直接使用 useEffect 从 API 获取数据","date":"2022-08-19 08:53:00","description":"\n<p>React 是一个由 Facebook 开源的、可以在任意平台上构建 UI 的 JavaScript 库。在 React 中，一个常见的 Pattern 是使用 <code>useEffect</code> 搭配 <code>useState</code> 发送请求、将状态从 API（React 外部）同步到 React 内部、用于渲染 UI，这篇文章恰恰在向你介绍为什么你不应该直接这么做。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/180676/37/27394/27265/62ff57f2E600b3725/cff75c5fca39bbcc.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/why-you-should-not-fetch-data-directly-in-use-effect/\">https://blog.skk.moe/post/why-you-should-not-fetch-data-directly-in-use-effect/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/why-you-should-not-fetch-data-directly-in-use-effect/"},{"title":"NPM 自动更新版本号","date":"2022-08-04 05:00:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>ChenYFan 大佬的文章：<a href=\"https://blog.cyfan.top/p/d3c51290.html\">SpeedUp!使用黑科技为你的网站提速</a> 有提到过将 Hexo 博客的全部静态文件上传至 NPM 达到加速效果。</p>\n<p>但是 NPM 版本号不能重复，而且为了精准命中缓存和防止边缘 <code>@latest</code> 缓存过长，就必须指定版本号。</p>\n<p>本人在 <a href=\"https://blog.yfun.top/posts/2876015612/\">我的图床解决方案</a> 一文中使用的方法是 <code>npm version patch</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.16/rawimg/20220804133426.png\"></p>\n<p>但这个方法也有一些弊端，比如 <code>patch</code> 只会更新 <code>z</code> 位数的版本号，而且并不会上传至仓库，很可能会出现版本号冲突导致上传失败。这就是为什么最后还需要重新推送 Git 提交。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AF%95%E8%AF%95%E7%9C%8B\" class=\"headerlink\" title=\"试试看\"></a>试试看</h2>\n<p>NPM 版本号遵循 <code>semver</code> 规范，格式为 <code>major.minor.patch</code>。</p>\n<p>为了在获取最新版本号的时候不发生混乱，我选择先获取最新的版本号。</p>\n<blockquote><p>记得把 <code>cky-blog-static</code> 改成自己的项目名。</p></blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getVersion = <span class=\"keyword\">async</span>() =&gt; {</span><br><span class=\"line\">    <span class=\"keyword\">const</span> latestVersion = <span class=\"keyword\">await</span> fetch(<span class=\"string\">\"https://registry.npmjs.org/cky-blog-static/latest\"</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.json()).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.version;</span><br><span class=\"line\">    })</span><br><span class=\"line\">    <span class=\"keyword\">return</span> latestVersion;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>获取到最新版本号后，就可以对版本号进行分析。</p>\n<p>以 <code>1.4.7-b541af2ea284a39da0bbf63b88fdb65c</code> 为例，先按 <code>major.minor.patch</code> 分离。当然，也需要考虑版本号后还有 <code>build metadata</code> 的情况。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> version = <span class=\"keyword\">await</span> getVersion();</span><br><span class=\"line\"><span class=\"keyword\">var</span> verArray = version.split(<span class=\"string\">\".\"</span>);</span><br><span class=\"line\">verArray[<span class=\"number\">2</span>] = verArray[<span class=\"number\">2</span>].split(<span class=\"string\">\"-\"</span>)[<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure><p><del>为了版本号好看些</del>，可以通过判断实现满十进一。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (verArray[<span class=\"number\">2</span>] &lt; <span class=\"number\">9</span>) {</span><br><span class=\"line\"><span class=\"comment\">// z 位小于 9，直接 +1</span></span><br><span class=\"line\">verArray[<span class=\"number\">2</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">2</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">} <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (verArray[<span class=\"number\">1</span>] &lt; <span class=\"number\">9</span>) {</span><br><span class=\"line\"><span class=\"comment\">// z 位大于等于 9，y 位小于 9，y+1, z=0</span></span><br><span class=\"line\">verArray[<span class=\"number\">1</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">1</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">verArray[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">} <span class=\"keyword\">else</span> {</span><br><span class=\"line\"><span class=\"comment\">// z 大于等于 9，y 大于等于 9，x+1,y=0,z=0</span></span><br><span class=\"line\">verArray[<span class=\"number\">0</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">0</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">verArray[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">verArray[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>最后，重新拼接版本号。如果担心服务器缓存版本号导致冲突，还可以加上一些随机字符串。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> newVersion = <span class=\"string\">`<span class=\"subst\">${verArray[<span class=\"number\">0</span>]}</span>.<span class=\"subst\">${verArray[<span class=\"number\">1</span>]}</span>.<span class=\"subst\">${verArray[<span class=\"number\">2</span>]}</span>`</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> newVersion = newVersion + <span class=\"string\">\"-\"</span> + md5(<span class=\"string\">`<span class=\"subst\">${<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()}</span><span class=\"subst\">${newVersion}</span>`</span>);</span><br></pre></td></tr></table></figure><p>将最新的版本号信息重新写入 <code>package.json</code> 文件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> packageJson = fs.readFileSync(<span class=\"string\">\"./package.json\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> packageJson = <span class=\"built_in\">JSON</span>.parse(packageJson);</span><br><span class=\"line\">packageJson.version = newVersion;</span><br><span class=\"line\"><span class=\"keyword\">var</span> newPackage = <span class=\"built_in\">JSON</span>.stringify(packageJson);</span><br><span class=\"line\">fs.writeFileSync(<span class=\"string\">\"./package.json\"</span>, newPackage);</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p><del>直接 CV 代码！</del></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 更新 package.json 版本号</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fetch = <span class=\"built_in\">require</span>(<span class=\"string\">\"node-fetch\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> md5 = <span class=\"built_in\">require</span>(<span class=\"string\">\"js-md5\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getVersion = <span class=\"keyword\">async</span>() =&gt; {</span><br><span class=\"line\">    <span class=\"keyword\">const</span> latestVersion = <span class=\"keyword\">await</span> fetch(<span class=\"string\">\"https://registry.npmjs.org/cky-blog-static/latest\"</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.json()).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.version;</span><br><span class=\"line\">    })</span><br><span class=\"line\">    <span class=\"keyword\">return</span> latestVersion;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> update = <span class=\"keyword\">async</span>() =&gt; {</span><br><span class=\"line\">    <span class=\"keyword\">const</span> version = <span class=\"keyword\">await</span> getVersion();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> verArray = version.split(<span class=\"string\">\".\"</span>);</span><br><span class=\"line\">    verArray[<span class=\"number\">2</span>] = verArray[<span class=\"number\">2</span>].split(<span class=\"string\">\"-\"</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (verArray[<span class=\"number\">2</span>] &lt; <span class=\"number\">9</span>) {</span><br><span class=\"line\">        verArray[<span class=\"number\">2</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">2</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">    } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (verArray[<span class=\"number\">1</span>] &lt; <span class=\"number\">9</span>) {</span><br><span class=\"line\">        verArray[<span class=\"number\">1</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">1</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">        verArray[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">        verArray[<span class=\"number\">0</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">0</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">        verArray[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        verArray[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newVersion = <span class=\"string\">`<span class=\"subst\">${verArray[<span class=\"number\">0</span>]}</span>.<span class=\"subst\">${verArray[<span class=\"number\">1</span>]}</span>.<span class=\"subst\">${verArray[<span class=\"number\">2</span>]}</span>`</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> newVersion = newVersion + <span class=\"string\">\"-\"</span> + md5(<span class=\"string\">`<span class=\"subst\">${<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()}</span><span class=\"subst\">${newVersion}</span>`</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(newVersion);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> packageJson = fs.readFileSync(<span class=\"string\">\"./package.json\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> packageJson = <span class=\"built_in\">JSON</span>.parse(packageJson);</span><br><span class=\"line\">    packageJson.version = newVersion;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newPackage = <span class=\"built_in\">JSON</span>.stringify(packageJson);</span><br><span class=\"line\">    fs.writeFileSync(<span class=\"string\">\"./package.json\"</span>, newPackage);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Complete!!\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">update();</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%9C%80%E5%90%8E\" class=\"headerlink\" title=\"最后\"></a>最后</h2>\n<p>如果是 Hexo 文件部署，就可以直接把文件直接丢在项目根目录，Action 集成部署加上：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">node update.js</span><br></pre></td></tr></table></figure><p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.16/rawimg/20220804135818.png\"></p>\n<p><del>Blog 半年没更新，除除草 --(....</del></p>\n","link":"https://blog.yfun.top/posts/2022/auto-update-npm-version/"},{"title":"我有特别的 DNS 配置和使用技巧","date":"2022-07-28 15:31:00","description":"\n<p>众所周知，DNS 的作用与电话簿类似，将人类可读的域名映射到机器可读 IP 地址、使人更方便地访问互联网。DNS 是非常重要的互联网基础设施，对于改善上网冲浪的体验中的重要程度不容小觑。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/96381/31/31172/23930/62e2ab5bE554d388b/37027f4a03351b9e.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/i-have-my-unique-dns-setup/\">https://blog.skk.moe/post/i-have-my-unique-dns-setup/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/i-have-my-unique-dns-setup/"},{"title":"优化博客的累计布局偏移（CLS）问题","date":"2022-06-07 17:24:00","description":"\n<p>距离上一篇文章发布已有四个月了，是时候写几篇文章给博客除草了。上一次我介绍了我如何迁移、重构了我的博客的架构，这次我想来谈谈我在重构中优化和打磨访客体验时解决的一个问题。我的博客优化之旅 图片 lazyload 的学问和在 Hexo 上的最佳实践 我的博客有多快？ 天下武功，唯快不破 —— 我是这样优化博客的 ...</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/206311/26/14625/38940/629f7f81Eb11312de/b1e67f07b1cc9bc7.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/fix-blog-cls/\">https://blog.skk.moe/post/fix-blog-cls/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/fix-blog-cls/"},{"title":"使用 Next.js + Hexo 重构我的博客","date":"2022-03-17 16:24:00","description":"\n<p>在咕咕了一整年、只发布了三篇文章（其中两篇还是译文）之后，我决定还是稍微花一点时间好好折腾一下自己的博客，以 React 作为抓手，通过 Next.js 和 Hexo 深度共建，对标 Gatsby，打通静态 HTML 与用户交互之间的垂直领域屏障，实现多维矩阵闭环，为个人博客赋能（咳咳咳），然后水出 2022 年第一篇文章（逃）技术选型：Gatsby vs Next.js我使用 Hexo 驱动博客已经三年之久了，之前写过一个 开源的 Hexo 主题，后来还成为了 Hexo 的 Core Team Member、为 Hexo 贡献了不少代码。Hexo 是一个诞生于 2012......</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/218492/18/14257/25439/6227858fE1517791d/63119f6e39dc9389.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/\">https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Node.js","date":"2022-01-14 10:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h2>\n<ul>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-nodejs\">安装 Node.js</a></li>\n</ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Node.js 官网 (<a href=\"https://node.js.org/\">https://node.js.org</a>)</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/image-20220114174925675.png\" alt=\"image-20220114174925675\"></p>\n<p>下载 Node.js 安装包（推荐下载 LTS 版本）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175645.png\" alt=\"image-20220114175645642\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175750.png\" alt=\"image-20220114175749822\"></p>\n<p>勾选同意协议，点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175835.png\" alt=\"image-20220114175835742\"></p>\n<p>修改文件安装位置，点击 <code>Next</code>。（也可以不用改）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175929.png\" alt=\"image-20220114175929226\"></p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180010.png\" alt=\"image-20220114180010036\"></p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180044.png\" alt=\"image-20220114180043895\"></p>\n<p>点击 <code>Install</code> 开始安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180108.png\" alt=\"image-20220114180107827\"></p>\n<p>等待安装完成。<img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180122.png\" alt=\"image-20220114180122728\"></p>\n<p>点击 <code>Finish</code> 完成安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180206.png\" alt=\"image-20220114180206024\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>打开 <code>Git Bash</code>.</p>\n<blockquote><p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。<br>或是在开始菜单中找到 Git Bash.</p></blockquote>\n<p>输入 <code>node -v</code> 和 <code>npm -v</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180458.png\" alt=\"image-20220114180458685\"></p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-nodejs/"},{"title":"2022: 新年快乐！","date":"2021-12-31 16:00:00","description":"\n<p>转眼间，2021 年已经过去。这一年非常忙碌，以至于博客一周年的纪念来不及写，许多文章计划停留在了 To Do 里。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%8D%9A%E5%AE%A2\" class=\"headerlink\" title=\"博客\"></a>博客</h2>\n<p>由于 Cloudflare Web Analytics 是在 2021 年 4 月份启用的，再加上后来又将统计代码去除，所以关于访问量的信息不可用。</p>\n<p>截止至 2021 年 12 月 31 日，博客共发布 15 篇文章，其中 2021 年发布 11 篇文章，原创文章 10 篇。</p>\n<p>目前采用 <code>LeanCloud + Waline</code> 的评论方式，自 7 月份被刷评论后将评论权限改为登录（支持 <code>GitHub</code> 登录），还有部分评论在迁移中丢失，实在抱歉。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>博客自 2021 年 1 月 13 日将主题改为 <code>Miracle</code>，这是一款简洁、轻量的单栏 Hexo 主题。</p>\n<p><code>Miralce</code> 目前的版本是 <code>2.0.1</code>，全新的版本去除 jQuery，进一步提升性能。</p>\n<p>GitHub 仓库：<a href=\"https://github.com/hifun-team/hexo-theme-miracle\">https://github.com/hifun-team/hexo-theme-miracle</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%9B%B4%E5%A4%9A\" class=\"headerlink\" title=\"更多\"></a>更多</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">=&gt; ...</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2022/"},{"title":"无垠 2021 年度总结","date":"2021-12-31 08:36:10","description":"\n<p>真是忙碌的一年啊。转眼 2021 已经过去，2022 即将到来。又到了该总结这一年的时候了。</p>\n<h1>统计数据</h1>\n<p>年度总结的第一部分仍然是一些统计数据。以下数据截止 2021 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 29,073 (<span>+0.6%</span>)，年 PV 67,688 (<span>-11.61%</span>)，日均 UV 79.65，平均停留时间 3分34秒 (<span>-13.7%</span>)，平均跳出率 55% (<span>-9.8%</span>)。一年有效文章数 1 (<span>-80%</span>)，新增评论 109 条 (<span>-54.96%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\" alt=\"\" width=\"515\" height=\"620\" class=\"aligncenter size-full wp-image-2537\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog-249x300.jpg 249w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>除了 UV 较去年提高 100 多之外，其他数据全部下滑。主要原因还是因为今年实在太过忙碌，只更新了一篇博客，评论区也没有怎么维护。不过目前已经有两篇新的文章在路上了，希望可以尽快写完吧。</p>\n<h2>个人主页</h2>\n<p>个人页总 UV 3,515 (<span>-18.12%</span>)，总 PV 3,929 (<span>-4.56%</span>)，日均 UV 9.63，平均停留时间 55秒 (<span>-12.7%</span>)。访问的主要来源是知乎和 GitHub。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\" alt=\"\" width=\"515\" height=\"647\" class=\"aligncenter size-full wp-image-2538\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton-239x300.jpg 239w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>仍然是没有更新个人主页的一年，我也没有继续宣传这个页面，统计数据下滑大概是正常的。</p>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 4 次，新增 149 commits (<span>-54.57%</span>)，Star 数增加了 174，现有 788。</p>\n<p>终于，MDx 2.0 发布了。但是因为今年的过于忙碌，MDx 并没有得到足够的维护，版本发布周期也拉得比较长，很多 Bug 没能及时修复。希望明年可以把更多的时间花在维护 MDx 上。无论如何，还是感谢各位对于 MDx 的支持！</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>2021 大事记</h1>\n<p>说起来，2021 真的太多“第一次”了...</p>\n<ul>\n<li>一月：由于电脑电池鼓包，第一次用 iPad 外接屏幕远程桌面到服务器来考期末🌚太痛苦了</li>\n<li>一月：MDx 喜提 600 Stars</li>\n<li>三月：第一次测核酸（真的酸）</li>\n<li>三月：第一次坐上 A350！(B-309W）</li>\n<li>三月：第一次来到英国</li>\n<li>六月：第一次来到伦敦</li>\n<li>六月：第一次去猫咖撸猫🐱</li>\n<li>六月：第一次坐上 B777！(B-2025）</li>\n<li>七月：酒店隔离十四天🌚</li>\n<li>七月：MDx 喜提 700 Stars</li>\n<li>七月：第一次和猫一起住（时刻有猫撸真的爽😆）</li>\n<li>七月：入职<a href=\"https://75.team/\">奇舞团</a>实习</li>\n<li>八月：北京景点怎么这么多</li>\n<li>九月：北京景点怎么还有这么多</li>\n<li>九月：<a href=\"https://flyhigher.top/develop/2160.html\">谈谈 WebAuthn</a> 被 <a href=\"https://weibo.com/1893751011/KyipM3tOM\" rel=\"noopener noreferrer\">w3c中国微博转发</a><del>（虽然并没有人看）</del>\n</li>\n<li>九月：从奇舞团<del>跑路</del>\n</li>\n<li>九月：整了个 Stackoverflow 的复制粘贴键盘<del>，太好用了</del>\n</li>\n<li>十月：终于买了心心念念的 MSFS</li>\n<li>十一月：终于买了一台新相机</li>\n<li>十一月：第一次坐上 A380！(B-6140）</li>\n<li>十二月：第一次来到爱丁堡并和 <a href=\"https://diygod.me/\">@DIYgod</a> 面基</li>\n</ul>\n<section><div class=\"set-images-div\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\" alt=\"和猫一起住的唯一问题就是手机很快会被猫片塞满\" width=\"730\" height=\"1500\" class=\"aligncenter size-full wp-image-2518\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg 730w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-146x300.jpg 146w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-498x1024.jpg 498w\" sizes=\"(max-width: 730px) 100vw, 730px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\" alt=\"看到你在写前端，猫猫很担心你\" width=\"1004\" height=\"1500\" class=\"aligncenter size-full wp-image-2523\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg 1004w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-201x300.jpg 201w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-685x1024.jpg 685w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-768x1147.jpg 768w\" sizes=\"(max-width: 1004px) 100vw, 1004px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\" alt=\"高效开发工具（确信\" width=\"1500\" height=\"1019\" class=\"aligncenter size-full wp-image-2519\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-300x204.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-1024x696.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-768x522.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\" alt=\"和 Ralph 在天坛\" width=\"947\" height=\"1500\" class=\"aligncenter size-full wp-image-2524\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg 947w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-189x300.jpg 189w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-646x1024.jpg 646w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-768x1216.jpg 768w\" sizes=\"(max-width: 947px) 100vw, 947px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\" alt=\"380!\" width=\"1500\" height=\"874\" class=\"aligncenter size-full wp-image-2517\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-300x175.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-1024x597.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-768x447.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a>\n</div>\n<div class=\"set-images-div2\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\" alt=\"到处玩.jpg\" width=\"1500\" height=\"1080\" class=\"aligncenter size-full wp-image-2521\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-300x216.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-1024x737.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-768x553.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\" alt=\"还是到处玩.jpg\" width=\"977\" height=\"1500\" class=\"aligncenter size-full wp-image-2520\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg 977w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-195x300.jpg 195w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-667x1024.jpg 667w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-768x1179.jpg 768w\" sizes=\"(max-width: 977px) 100vw, 977px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\" alt=\"380 上的星空\" width=\"1002\" height=\"1500\" class=\"aligncenter size-full wp-image-2522\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg 1002w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-200x300.jpg 200w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-684x1024.jpg 684w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-768x1150.jpg 768w\" sizes=\"(max-width: 1002px) 100vw, 1002px\"></a>\n</div>\n</section><p><span>点击图片查看描述</span></p>\n<p>对了，对于可爱的猫猫们，我整了一个 Telegram 贴纸包，你可以在这里获取：<a href=\"https://telegram.me/addstickers/huanAndDan\">https://telegram.me/addstickers/huanAndDan</a>。</p>\n<h1>跨年红包</h1>\n<p>今年的解题之旅，从下面这张图片开始：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\" alt=\"\" width=\"1510\" height=\"1250\" class=\"aligncenter size-full wp-image-2556\"></a>\n<p>不过，鉴于今年的题目较以往对于认真解题的人更难，我还准备了隐藏红包，在解题中收集线索即可发现隐藏红包。共有 20 个普通红包和 10 个隐藏红包。</p>\n<p>解题计划持续到东八区 2022.02.03 23:59:59 或红包被领完为止，之后我会发布题解。不过由于去年情况混乱，今年在解题过程中我一旦发现有不正常的现象就会立即停止活动。Anyway，新年快乐！祝玩得开心。</p>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报用到了 PS 和 Adobe 家的新玩具 Dimension。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\" alt=\"\" width=\"707\" height=\"1000\" class=\"aligncenter size-full wp-image-2547\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg 1414w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-212x300.jpg 212w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-724x1024.jpg 724w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-768x1086.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-1086x1536.jpg 1086w\" sizes=\"(max-width: 707px) 100vw, 707px\"></a>\n<p>那么祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2507.html"},{"title":"[译] 不，Web3 不是去中心化","date":"2021-12-14 14:01:00","description":"加密货币社区对元宇宙和 Web3 的狂热仍在继续，大量投资人和开发者前仆后继加入其中。但是，Web3 真的能实现支持者们的种种愿景吗？亦或是另一个镜中月、水中花？也许让历史照进现实，能给我们答案。<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/123139/11/24965/54827/62215eedE5e3da14a/80c24408e97057dd.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/web3-is-not-decentralization/\">https://blog.skk.moe/post/web3-is-not-decentralization/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/web3-is-not-decentralization/"},{"title":"[译] 捍卫自由的互联网，对 Web3 说不","date":"2021-12-12 13:40:00","description":"作为一个充满泡沫和噱头的新概念，Web3 和元宇宙在区块链的社区中掀起了一波浪潮。鼓吹者坚信 Web3 就是互联网的未来、不惜砸下大把的金钱和精力、希望能在未来中捞一杯羹；而大部分人保持观望的态度。是时候来一点 Web3 的反对意见了。<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/87908/13/23797/13415/622032afE3a2f9e9f/95c01e98cd4a707a.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/\">https://blog.skk.moe/post/keep-web-free-say-no-to-web3/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/"},{"title":"2021 年 JavaScript Promise 性能对比","date":"2021-12-07 08:19:00","description":"\n<p>我们正生活在一个「Any application that can be written in JavaScript, will eventually be written in JavaScript」的时代。作为一门兼具动态性和简单性的语言，JavaScript 已经占领了客户端、服务端，甚至在机器学习中也占据一席之地；不可避免的，异步执行也逐渐成为这门语言不可缺少的一部分。TL; DR Bluebird 依然是速度最快、内存占用最少的 Promise 实现 Runtime 的 async / await 实现越来越快、顺序执行的性能已经超过 Native Promise，占用的内存也更少 对于平行并发执行的 Promise，Bluebird 的性能依然一骑绝尘。......</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157404/28/28495/143414/622032b2Ef7b495fd/6a9bd02e79392c9d.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/promise-performance-benchmark/\">https://blog.skk.moe/post/promise-performance-benchmark/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/promise-performance-benchmark/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Git","date":"2021-11-12 13:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h3>\n<ul><li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li></ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Git 官网 (<a href=\"https://git-scm.com/\">https://git-scm.com</a>).</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112204849.png\"></p>\n<p>点击页面中的 <code>Download For Windows</code> 下载 Windows 版本。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211507.png\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>，同意协议。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211528.png\"></p>\n<p>修改程序安装位置，点击 <code>Next</code>（直接装在 C 盘也不是不行）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211604.png\"></p>\n<p>组件选项，可选桌面快捷键、右键菜单、LFS 支持、自动检查更新等。</p>\n<p>点击 <code>Next</code> 进入下一步。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211609.png\"></p>\n<p>开始菜单文件夹名，保持默认就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211613.png\"></p>\n<p>默认编辑器，保持 Vim 就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211616.png\"></p>\n<p>环境变量，选择第 2 个，点击 <code>Next</code>。</p>\n<blockquote><p>如果选择第 1 个，则只能在 Git Bash 中使用，可能会出现问题</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211619.png\"></p>\n<p>剩下的都可以保持默认，一路 Next，然后点击 <code>Install</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211622.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211624.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211627.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211630.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211633.png\"></p>\n<p>等待安装完毕。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。</p>\n<p>（或是在开始菜单中找到 Git Bash）</p>\n<p>输入 <code>git --version</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/7ec315b7764cc.png\"></p>\n<p>大功告成！</p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-git/"},{"title":"前端时间国际化 101","date":"2021-10-14 15:58:23","description":"\n<blockquote>\n<p>时间只是幻觉。</p>\n<footer>—— 阿尔伯特·爱因斯坦</footer>\n</blockquote>\n<p>最近在开发一个需要完善国际化方案的前端项目，在处理时间国际化的时候遇到了一些问题。于是花了一些时间研究，有了这篇文章。不过由于网上关于 JavaScript 中 <code>Date</code> 对象的坑的文章已经一抓一大把了，<strong>因此这篇文章不是 JavaScript 中 <code>Date</code> 对象的使用指南，而是只专注于前端时间国际化。</strong></p>\n<h1>从时区说起</h1>\n<p>要想处理时间，UTC 是一个绕不开的名字。协调世界时（Coordinated Universal Time）是目前通用的世界时间标准，计时基于原子钟，但并不等于 TAI（国际原子时）。TAI 不计算闰秒，但 UTC 会不定期插入闰秒，因此 UTC 与 TAI 的差异正在不断扩大。UTC 也接近于 GMT（格林威治标准时间），但不完全等同。可能很多人都发现近几年 GMT 已经越来越少出现了，这是因为 GMT 计时基于地球自转，由于地球自转的不规则性且正在逐渐变慢，目前已经基本被 UTC 所取代了。</p>\n<blockquote><p>JavaScript 的 <code>Date</code> 实现不处理闰秒。实际上，由于闰秒增加的不可预测性，Unix/POSIX 时间戳完全不考虑闰秒。在闰秒发生时，Unix 时间戳会重复一秒。这也意味着，一个时间戳对应两个时间点是有可能发生的。</p></blockquote>\n<p>由于 UTC 是标准的，我们有时会使用 UTC+/-N 的方式表达一个时区。这很容易理解，但并不准确。中国通行的 <code>Asia/Shanghai</code> 时区<strong>大部分</strong>情况下可以用 UTC+8 表示，但英国通行的 <code>Europe/London</code> 时区并不能用一个 UTC+N 的方式表示——由于夏令时制度，<code>Europe/London</code> 在夏天等于 UTC+1，在冬天等于 UTC/GMT。</p>\n<blockquote><p>一个时区与 UTC 的偏移并不一定是整小时。如 <code>Asia/Yangon</code> 当前为 UTC+6:30，而 <code>Australia/Eucla</code> 目前拥有奇妙的 UTC+8:45 的偏移。</p></blockquote>\n<p>夏令时的存在表明<strong>时间的表示不是连续的</strong>，时区之间的时差也并不是固定的，我们并不能用固定时差来处理时间，这很容易意识到。但一个不容易意识到的点是，时区还包含了其历史变更信息。中国目前不实行夏令时制度，那我们就可以放心用 UTC+8 来表示中国的时区了吗？你可能已经注意到了上一段中描述 <code>Asia/Shanghai</code> 时区时我使用了<strong>大部分</strong>一词。<code>Asia/Shanghai</code> 时区在历史上实行过夏令时，因此 <code>Asia/Shanghai</code> 在部分时间段可以使用 UTC+9 来表示。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1988-04-18 00:00:00')\r\n// Mon Apr 18 1988 00:00:00 GMT+0900 (中国夏令时间)</pre>\n<blockquote><p>夏令时已经够混乱了，但它实际上比你想象得更混乱——部分穆斯林国家一年有四次夏令时切换（进入斋月时夏令时会暂时取消），还有一些国家使用混沌的 15/30 分钟夏令时而非通常的一小时。</p></blockquote>\n<blockquote><p><strong>不要总是基于 <code>00:00</code> 来判断一天的开始。</strong>部分国家使用 0:00-1:00 切换夏令时，这意味着 23:59 的下一分钟有可能是 1:00。</p></blockquote>\n<p>事实上，虽然一天只有 24 个小时，但当前（2021.10）正在使用的时区有超过 300 个。<strong>每一个时区都包含了其特定的历史。</strong>虽然有些时区在现在看起来是一致的，但它们都包含了不同的历史。时区也会创造新的历史。由于政治、经济或其他原因，一些时区会调整它们与 UTC 的偏差（萨摩亚曾经从 UTC-10 切换到 UTC+14，导致该国 2011.12.30 整一天都消失了），或是启用/取消夏令时，甚至有可能导致一个时区重新划分为两个。因此，为了正确处理各个时区，我们需要一个数据库来存放时区变更信息。还好，已经有人帮我们做了这些工作。目前大多数 *nix 系统和大量开源项目都在使用 <a href=\"https://www.iana.org/time-zones\" rel=\"noopener\">IANA 维护的时区数据库</a>（IANA TZ Database），其中包含了自 Unix 时间戳 0 以来各时区的变更信息。当然这一数据库也包含了大量 Unix 时间戳 0 之前的时区变更信息，但并不能保证这些信息的准确性。IANA 时区数据库会定期更新，以反映新的时区变更和新发现的历史史实导致的时区历史变更。</p>\n<blockquote><p>Windows 不使用 IANA 时区数据库。微软为 Windows 自己维护了一套<a href=\"https://docs.microsoft.com/zh-cn/troubleshoot/windows-client/system-management-components/daylight-saving-time-help-support\" rel=\"noopener\">时区数据库</a>，这有时会导致在一个系统上合法的时间在另一系统上不合法。</p></blockquote>\n<p>既然我们不能使用 UTC 偏移来表示一个时区，那就只能为每个时区定义一个标准名称。通常地，我们使用 <code>/</code> 来命名一个时区。这里的城市一般为该时区中人口最多的城市。于是，我们可以将中国的通行时区表示为 <code>Asia/Shanghai</code>。也有一些时区有自己的别名，如太平洋标准时间 <code>PST</code> 和协调世界时 <code>UTC</code>。</p>\n<blockquote><p>时区名称使用城市而非国家，是由于国家的变动通常比城市的变动要快得多。</p></blockquote>\n<blockquote><p><strong>城市不是时区的最小单位。</strong>有很多城市同时处于多个时区，甚至澳大利亚<a href=\"https://en.wikipedia.org/wiki/Gold_Coast_Airport\" rel=\"noopener\">有一个机场</a>的跑道两端处于不同的时区。</p></blockquote>\n<h1>处理时区困难重重</h1>\n<p>几个月前的一天，<a href=\"https://milkice.me/\" rel=\"noopener\">奶冰</a>在他的 Telegram 频道里发了这样的一条消息：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\"><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\" alt=\"奶冰频道的消息\" width=\"500\" class=\"aligncenter size-medium wp-image-2490\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg 800w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-244x300.jpg 244w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-768x944.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\"></a>\n<p>你想的没错，这个问题正是由时区与 UTC 偏移的不同造成的。<code>Asia/Shanghai</code> 时区在 1940 年前后和 1986 年前后曾实行过夏令时，<strong>而夏令时的切换会导致一小时的出现和消失。</strong>具体来说，启用夏令时当天会有一个小时消失，如 2021.3.28 英国启用夏令时，1:00 直接跳到 3:00，导致 <code>2021-03-28 01:30:00</code> 在 <code>Europe/London</code> 时区中是不合法的；取消夏令时当天又会有一个小时重复，如 2021.10.31 英国取消夏令时，2:00 会重新跳回 1:00 一次，导致 <code>2021-10-31 01:30:00</code> 在 <code>Europe/London</code> 时区中对应了两个时间点。而在奶冰的例子中，<code>1988-04-10 00:46:50</code> 正好处于因夏令时启用而消失的一小时中，因此系统会认为此时间字符串不合法而拒绝解析。</p>\n<blockquote><p>你可能会注意到在历史上 1988.4.10 这一天 <code>Asia/Shanghai</code> 时区实际上是去掉了 1:00-2:00 这一小时而不是 0:00-1:00。上文问题更深层次的原因是，在 IANA TZDB 2018a 及更早版本中，IANA 因缺乏历史资料而设置了错误的夏令时规则，规则设定了夏令时交界于 0:00-1:00 从而导致上文问题发生。而随后社区<a href=\"http://mm.icann.org/pipermail/tz/2018-August/026760.html\" rel=\"noopener\">发现了更准确的史实</a>，因此 IANA 更新了数据库。上文的问题在更新了系统的时区数据库后便解决了。</p></blockquote>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\" alt=\"IANA TZDB 2018a 及之前版本的错误数据\" width=\"1750\" height=\"595\" class=\"aligncenter size-full wp-image-2491\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg 1750w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-300x102.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1024x348.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-768x261.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1536x522.jpg 1536w\" sizes=\"(max-width: 1750px) 100vw, 1750px\"></a>\n<p><span>IANA TZDB 2018a 及之前版本的错误数据</span></p>\n<p>再来考虑另一种情况。你的应用的某位巴西用户在 2018 年保存了一个未来时间 <code>2022-01-15 12:00</code>（按当时的规律那应该是个夏令时时间），不巧那时候你的应用是以格式化的时间字符串形式保存的时间。之后你发现巴西已经于 2019 年 4 月宣布彻底取消夏令时制度，那么 <code>2022-01-15 12:00</code> 这个时间对应的 Unix 时间戳发生了变化，变得不再准确，要正确处理这一字符串就需要参考这一字符串生成的时间（或生成时计算的 UTC 偏移）来做不同的处理。<strong>因此，应用从一开始就应该避免使用字符串来传输、存储时间，而是使用 Unix 时间戳。</strong>如果不得不使用字符串存储时间，请尽可能：</p>\n<ul>\n<li>使用 UTC 描述时间，你永远不会知道本地时区在未来会发生什么</li>\n<li>如果需要以当地时间描述时间，一定带上当前 UTC 偏移</li>\n</ul>\n<p>时区历史带来的问题往往意想不到而且远比想象得多。实际上时区历史数据非常详细而繁多且跨设备不一致，并没有简单而统一的处理方法。在需要严谨处理时区时可能需要在应用程序中内嵌一套各端统一的时区数据库，但这样的方案放在前端又会带来不少问题：</p>\n<ul>\n<li>体积过大。moment.js 曾经设计过<a href=\"https://github.com/moment/moment-timezone/blob/develop/data/packed/2021a.json\" rel=\"noopener\">一种简洁的 TZDB 表示</a>，但尽管已经尽可能压缩整个文件仍然达到了 180+KB。在性能优先的 Web 应用中这是不可接受的</li>\n<li>需要持续更新。时区数据一直在变动，需要在时区数据更新时尽快更新应用内的时区数据，这带来了额外的维护成本</li>\n</ul>\n<p>ES6 为我们带来了 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl\" rel=\"noopener\"><code>Intl</code> 命名空间</a>。在这里，JavaScript 运行时提供了不少时间相关的国际化能力。因此，在不使用额外数据的情况下准确处理时区是可能的，但这并不完美：</p>\n<ul>\n<li>各端不统一。浏览器提供的时区数据受浏览器版本、系统版本等可能变化，最新的时区更新可能无法快速反映到所有设备上</li>\n<li>实现复杂。<code>JavaScript</code> 中 <code>Date</code> 对象的不良设计导致实现完善的时区处理并不容易，且 <code>Intl</code> 命名空间下的对象实例化性能开销较大，需要额外优化</li>\n</ul>\n<blockquote><p><code>Intl</code> 命名空间下还有很多实用的国际化相关方法，值得我们另开一篇文章来讲讲了。</p></blockquote>\n<p>在真实开发中，这需要取舍。目前主流的 JavaScript 时间处理库都已转向浏览器内置方法，并在需要时通过 Polyfill 保证跨端一致性。在这篇文章中，我们将尝试在不使用第三方库的情况下实现基本的时间国际化处理。此外，还有一些诸如需要使用 Unix 时间戳才能正确地在各端交换时间等细节需要注意。</p>\n<h1>时区转换</h1>\n<p>JavaScript 中的 <code>Date</code> 并不是不包含时区信息——实际上，<code>Date</code> 对象表示的一定是当前时区。通过尝试：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1970-01-01T00:00:00Z')\r\n// Thu Jan 01 1970 08:00:00 GMT+0800 (中国标准时间)</pre>\n<p>就可以知道，JavaScript 运行时其实知道当前时区，并会在需要的时候将其他时区的时间转换为当前时区的时间。那么，如何将本地时间转换为其他时区的时间呢？从 <code>Date</code> 的角度看，这并不行，因为我们无法设置一个 <code>Date</code> 对象的时区。但我们可以“投机取巧”：将 <code>Date</code> 对象的时间加上/减去对应的时差，尽管 <code>Date</code> 对象仍然认为自己在本地时区，但这样不就可以正确显示了嘛！但我们会碰到上文提到的问题：时区之间的时间差并不固定，在没有额外数据的情况下很难正确计算。</p>\n<p>还好，ES6 基于 <code>Intl</code> 命名空间扩展了 <code>Date.prototype.toLocaleString()</code> 方法，使其可以接受时区参数并按指定时区格式化时间。如果你在搜索引擎中搜索如何使用 JavaScript 转换时区，你大概率会在 StackOverflow 上找到类似这样的答案：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const convertTimeZone = (date, timeZone) =&gt; {\r\n    return new Date(date.toLocaleString('en-US', { timeZone }))\r\n}\r\n\r\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\r\nconvertTimeZone(now, 'Europe/London') // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<p>很好理解，我们使用 <code>en-US</code> 的区域设置要求 JavaScript 运行时以我们指定的时区格式化时间，再将时间字符串重新解析为时间对象。这里的 <code>timeZone</code> 就是诸如 <code>Asia/Shanghai</code> 等的 IANA TZDB 时区名称。这个字符串确实需要自己提供，但这就是我们唯一需要自己准备的数据了！只要提供了时区名称，浏览器就会自动计算正确的时间，无需我们自行计算。</p>\n<blockquote><p>对于时区名称，你可以考虑使用 <a href=\"https://github.com/vvo/tzdb/\" rel=\"noopener\">@vvo/tzdb</a>。这是一个声称为自动更新的 IANA TZDB 的 JSON 导出，并已被数个大型项目使用。你可以从这个包中导出所有时区名称。</p></blockquote>\n<p>这个方法看起来还不错，对吧？但实际上，它有两个问题：</p>\n<ul>\n<li>指定了区域设置和时区的 <code>toLocaleString()</code> 实际上每次调用都会在 JavaScript 运行时中创建新的 <code>Intl.DateTimeFormat</code> 对象（在后文详述），而后者会带来昂贵的性能开销（在 Node 14 中，实例化一次会在 V8 中增加内存使用约 46.3Kb。但这是符合预期的，详见 <a href=\"https://bugs.chromium.org/p/v8/issues/detail?id=6528\" rel=\"noopener\">V8 Issue</a>）。因此，在密集调用的情况下需要考虑计算并缓存时差，并在一定时间后或需要时进行更新</li>\n<li>使用 <code>toLocaleString()</code> 并使用 <code>en-US</code> 区域设置格式化的默认时间格式类似于 <code>10/13/2021, 1:00:00 AM</code>。这可以被大部分浏览器正确解析，<strong>但这是不规范的，不同浏览器有可能产生不同结果。</strong>你也可以自行配置格式（同下文的 <code>Intl.DateTimeFormat</code>），但仍然无法构造出规范的字符串</li>\n</ul>\n<p>因此，更佳的方案是，我们需要建立一个可反复使用的格式化器以避免重复创建 <code>Intl.DateTimeFormat</code> 带来的额外开销，并需要手动构造出符合规范的时间字符串，并将其重新解析为 <code>Date</code> 对象。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const timeZoneConverter = (timeZone) =&gt; {\r\n    // 新建 DateTimeFormat 对象以供对同一目标时区重用\r\n    // 由于时区属性必须在创建 DateTimeFormat 对象时指定，我们只能为同一时区重用格式化器\r\n    const formatter = new Intl.DateTimeFormat('zh-CN', {\r\n        year: 'numeric',\r\n        month: '2-digit',\r\n        day: '2-digit',\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n        second: '2-digit',\r\n        hour12: false,\r\n        timeZone\r\n    })\r\n    return {\r\n        // 提供 conver 方法以将提供的 Date 对象转换为指定时区\r\n        convert (date) {\r\n            // zh-CN 的区域设置会返回类似 1970/01/01 00:00:00 的字符串\r\n            // 替换字符即可构造出类似 1970-01-01T00:00:00 的 ISO 8601 标准格式时间字符串并被正确解析\r\n            return new Date(formatter.format(date).replace(/\\//g, '-').replace(' ', 'T').trim())\r\n        }\r\n    }\r\n}\r\n\r\nconst toLondonTime = timeZoneConverter('Europe/London') // 对于同一时区，此对象可重用\r\n\r\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\r\ntoLondonTime.convert(now) // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<blockquote><p>目前 <code>zh-CN</code> 的区域设置会产生类似 <code>1970/01/01 00:00:00</code> 的格式化字符串。这一格式目前跨端一致，但由于规范没有指定时间格式，<strong>这个格式在未来有可能变更。</strong>更好的方案是使用 <code>formatToParts()</code> 方法（在后文详述）获取时间字符串的各部分并手动拼接出标准格式的字符串，但在这个例子中直接 <code>replace</code> 拥有更好的性能。</p></blockquote>\n<p>现在，尝试反复转换时间至同一时区 1000 次，耗时从 <code>toLocaleString()</code> 1.5 秒降低到了 0.04 秒。尽管代码长了点，但这次重写在最好的情况下为我们带来了超过 20 倍的性能提升。</p>\n<p>需要注意的是，虽然这看起来就算最终方案了，但这个方案依然不完美。主要有以下两个问题：</p>\n<ul>\n<li>在需要密集转换为不同时区时，由于无法重用格式化器，性能依然较差且难以进一步优化</li>\n<li>由于 <code>Intl.DateTimeFormat</code> 不支持格式化毫秒，在格式化字符串的过程中毫秒会丢失，导致最终结果可能会与期望结果产生最高 999ms 的误差，需要额外处理。比如需要计算时差时，我们可能需要这么写：\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const calcTimeDiff = (date, converter) =&gt; {\r\n    const secDate = date - date.getMilliseconds() // 去掉毫秒，避免转换前后精度差异\r\n    return converter.convert(new Date(secDate), tzName) - secDate\r\n}\r\n\r\ncalcTimeDiff(new Date(), timeZoneConverter('Europe/London')) // -25200000</pre>\n</li>\n</ul>\n<p>无论如何，在折腾一番后我们还是把时区正确转换了。接下来准备格式化时间字符串了吗？不过在此之前，我们得先来聊聊语言、文字和区域。</p>\n<h1>语言文字区域傻傻分不清</h1>\n<blockquote><p>如何在计算机中表示中文？</p></blockquote>\n<p>“这不简单，”你可能会说，“用 <code>zh</code> 啊。”</p>\n<blockquote><p>那简体中文呢？</p></blockquote>\n<p>“<code>zh-CN</code>。”你或许会说出这个答案。</p>\n<blockquote><p>那用于新加坡的简体中文和用于中国大陆的简体中文该如何区分呢？</p></blockquote>\n<p>嗯……好问题。</p>\n<p>要能正确区分不同的简体中文，我们还得先回到定义上。实际上，“国际化”并不只是语言的翻译而已，国际化包含的是一整套对于各个<strong>区域</strong>的本地化方案。要准确表示一个国际化方案，我们实际至少需要确定三个属性：语言（Language）、文字（Script）和区域（Locale）。</p>\n<ul>\n<li>\n<strong>语言</strong>通常指的是<strong>声音语言</strong>。不同的语言都有一套自己的发音规则，很难互通。如中文和英语都属于语言</li>\n<li>\n<strong>文字</strong>对应的是某个语言的书写方式，同样的语言可能会有多种书写方案。如中文主要有简体和繁体两种书写方案</li>\n<li>\n<strong>区域</strong>指国际化面向的地区，相同的语言和文字，在不同地区也有可能会有不同的使用习惯。如新加坡和中国大陆都使用简体中文，但两地的用词习惯等有些许差异</li>\n</ul>\n<p>只有确定了这三个属性，我们才能正确定义一个国际化方案（或者说<strong>区域设置</strong>）。当然，还有很多其他属性可以更准确的表达某个区域设置，但通常有语言、文字和区域就已经足够了。</p>\n<p>于是，基于 <a href=\"https://tools.ietf.org/rfc/bcp/bcp47.txt\" rel=\"noopener\">BCP 47</a>，我们可以知道：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN = 中文普通话-简体-中国大陆\r\ncmn-Hans-SG = 中文普通话-简体-新加坡\r\ncmn-Hant-TW = 中文普通话-繁体-台湾\r\nyue-Hant-HK = 中文粤语-繁体-香港</pre>\n<p>等等，这都是啥？还有 BCP 47 又是啥？BCP 是 IETF 发布的“最佳当前实践”文档，而 BCP 47 是一些国际化相关的 ISO 和备忘录的集合，也是目前事实上由 HTML 和 ECMAScript 所使用的表达区域设置的标准。BCP 47 定义的区域设置标签实际上比较复杂，但对于大部分简单使用情况，上文示例中的格式已经完全够用了。简单来说，<strong>要表达一个区域设置，我们会使用 <code>语言[-文字][-区域]</code> 的格式，而文字和区域都是可选的。</strong>而对于每个部分的具体代码，BCP 47 也有做具体定义。其中：</p>\n<ul>\n<li>语言使用 ISO 639-1 定义的两位字母代码（如中文为 <code>zh</code>，英文为 <code>en</code>）或 <a href=\"https://iso639-3.sil.org/code_tables/639/data\" rel=\"noopener\">ISO 639-2/3</a> 定义的三位字母代码（如中文普通话为 <code>cmn</code>，英文为 <code>eng</code>），通常小写</li>\n<li>文字使用 <a href=\"https://unicode.org/iso15924/iso15924-codes.html\" rel=\"noopener\">ISO 15924</a> 定义的四位字母代码，通常首字母大写。如简体中文是 <code>Hans</code>，繁体中文是 <code>Hant</code>\n</li>\n<li>区域通常使用 <a href=\"https://www.iso.org/iso-3166-country-codes.html\" rel=\"noopener\">ISO 3166-1</a> 定义的两位字母代码，通常大写，如中国大陆为 <code>CN</code>，英国为 <code>GB</code>\n</li>\n</ul>\n<blockquote><p>ISO 639-1/2/3 的关系实际是：ISO 639-1 是最早制定的规范，使用两位字母表示语言，但语言数量之多并不能只用两位代码表示。因此后来修订了 ISO 639-2 和 3，使用三位字母表示了更多语言。通常 639-1 代码和 ISO-2/3 代码是一对多的关系。如中文 <code>zh</code> 其实是中文普通话 <code>cmn</code> 的宏语言（macrolanguage），同样使用 <code>zh</code> 为宏语言的语言还有 <code>wuu</code>（中文吴语）、<code>hak</code>（中文客家话）、<code>yue</code>（中文粤语）等数十种。<strong>从规范上我们现在应该使用 ISO 639-2/3 代码来替代 ISO 639-1 代码了</strong>，但由于历史阻力和真实需求中分类无需如此细致等原因，<strong>使用 ISO 639-1 指定语言仍然非常常见而且完全可以接受。</strong>此外，特别地，我们在 ISO 639-3 中定义未指明的语言为 <code>und</code>。</p></blockquote>\n<p>因此，对于这一节开头的两个问题，在 BCP 47 中正确答案其实是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">zh = 中文\r\ncmn = 中文普通话\r\n\r\nzh-Hans = 中文-简体\r\ncmn-Hans = 中文普通话-简体</pre>\n<p>而 <code>zh-CN</code> 实际是指在中国大陆使用的中文，当然也包含在中国大陆使用的繁体中文。<strong>不过，由于大部分情况下一个区域只会通用一种文字，很多情况下我们可以忽略文字这一项</strong>，即使用 <code>zh-CN</code>（或者 <code>cmn-CN</code>）来表示中国大陆的简体中文普通话——毕竟在大部分业务中在中国大陆使用繁体和非普通话的情况非常少。</p>\n<blockquote><p>事实上，类似 <code>zh-Hans</code> 和 <code>zh-Hant</code> 开头的区域设置名称已经被标记为 <code>redundant 废弃</code>，因此尽可能只使用 <code>zh-CN</code> 或者 <code>cmn-Hans-CN</code> 这样的区域设置名称。所有区域设置名称的列表可以在 <a href=\"https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry\" rel=\"noopener\">IANA</a> 找到。</p></blockquote>\n<p>现在我们可以准确定义一个区域设置了。不过我们还有一些小小的需求。比如我们想在 <code>cmn-Hans-CN</code> 的区域设置中使用农历来表示日期，但显然我们上文定义的表示方法并不能表达这一需求。好在，Unicode 为 BCP 47 提供了 u 扩展。在区域设置名称后面加上 <code>-u-[选项]</code> 就可以表达更细致的变体了。所以我们有：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN-u-ca-chinese = 中文普通话-简体-中国大陆-u-日历-中国农历\r\njpn-Jpan-JP-u-ca-japanese = 日语-日文汉字/平假名/片假名-日本-u-日历-日本日历\r\ncmn-Hans-CN-u-nu-hansfin = 中文普通话-简体-中国大陆-u-数字-简体大写数字</pre>\n<p>u 扩展的具体可选项可以在 <a href=\"https://www.unicode.org/reports/tr35/tr35-21.html#Unicode_locale_identifier\" rel=\"noopener\">Unicode 网站</a>上找到。而多个 u 扩展还可以连接——于是我们甚至可以写出 <code>cmn-Hans-CN-u-ca-chinese-nu-hansfin</code> 这种丧心病狂的区域设置名称。当然，相信你现在已经可以看懂这个区域设置的意思了。</p>\n<blockquote><p>不同地区可能会有不同的日历使用习惯，如中国有使用农历的需求，泰国有使用佛历的需求，我们可以通过 u 扩展指定不同的日历。不过，大部分情况下我们会使用标准的 ISO 8601 日历（gregory），JavaScript 的 <code>Date</code> 对象也只支持这种日历。</p></blockquote>\n<blockquote><p>你可以使用 <a href=\"https://r12a.github.io/app-subtags/\" rel=\"noopener\">BCP47 language subtag lookup</a> 工具快速检查你编写的 BCP 47 区域标签是否规范。</p></blockquote>\n<p>终于我们可以正确表达一个完美符合我们需求的区域设置了。接下来，让我们开始格式化时间吧。</p>\n<h1>格式化时间</h1>\n<p>这题我会！</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const formatDate(date) =&gt; {\r\n    return `${date.getFullYear()}-${`${date.getMonth() + 1}`.padStart(2, '0')}-${`${date.getDate()}`.padStart(2, '0')} ${`${date.getHours()}`.padStart(2, '0')}:${`${date.getMinutes()}`.padStart(2, '0')}:${`${date.getSeconds()}`.padStart(2, '0')}`\r\n}\r\n\r\nformatDate(new Date()) // 2021-10-13 01:00:00</pre>\n<p>就完事了……吗？先不论这样的格式化代码难以阅读，尽管上文这样的日期格式国际通用，<strong>但并非所有区域都习惯于这样的日期表示方法。</strong>比如英语国家/地区在很多时候习惯在日期中加入星期，而阿拉伯语国家/地区在部分情况下习惯使用阿拉伯语数字（而非常用的阿拉伯-印度数字）；再比如美式英语国家/地区习惯月-日-年的日期表示法，而英式英语国家/地区习惯日-月-年的日期表示法……不同区域在时间表示格式习惯上的差异是巨大的，<strong>我们很难通过一个简单的方法来正确地、国际化地格式化一个日期。</strong></p>\n<p>好在 ES6 早就为我们铺平了道路。还记得上文提到过的 <code>Intl.DateTimeFormat</code> 吗？我们通过它来实例化一个日期格式化器并用进行日期的国际化。</p>\n<p>直接来看例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const options = {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    weekday: 'long'\r\n}\r\nconst now = new Date()\r\n\r\nconst enUSFormatter = new Intl.DateTimeFormat('en-US', options)\r\n\r\nconst zhCNFormatter = new Intl.DateTimeFormat('zh-CN', options)\r\nconst zhCNAltFormatter = new Intl.DateTimeFormat('zh-CN-u-ca-chinese', options)\r\nconst zhCNAlt2Formatter = new Intl.DateTimeFormat('zh-CN-u-ca-roc-nu-hansfin', options)\r\n\r\nconst jaFormatter = new Intl.DateTimeFormat('ja', options)\r\nconst jaAltFormatter = new Intl.DateTimeFormat('ja-JP-u-ca-japanese', options)\r\n\r\nconst arEGFormatter = new Intl.DateTimeFormat('ar-EG', options)\r\n\r\nenUSFormatter.format(now) // Wednesday, Oct 13, 2021\r\n\r\nzhCNFormatter.format(now) // 2021年10月13日星期三\r\nzhCNAltFormatter.format(now) // 2021辛丑年九月8星期三\r\nzhCNAlt2Formatter.format(now) // 民国壹佰壹拾年拾月拾叁日星期三\r\n\r\njaFormatter.format(now) // 2021年10月13日水曜日\r\njaAltFormatter.format(now) // 令和3年10月13日水曜日\r\n\r\narEGFormatter.format(now) // الأربعاء، ١٣ أكتوبر ٢٠٢١</pre>\n<blockquote><p>在这里我们使用 ISO 639-1 代码来表示语言，是由于事实上 ISO 639-1 代码更加常见与通用。在大部分支持 <code>Intl.DateTimeFormat</code> 的 JavaScript 运行时中我们也可以使用 ISO 639-2/3 代码来表示语言（但实际会 fallback 至对应的 ISO 639-1 代码）。</p></blockquote>\n<blockquote><p>你也可以通过在 <code>options</code> 中设置 <code>calendar</code> 属性和 <code>numberingSystem</code> 属性来替换区域设置名称中对 u 扩展的使用。这也是推荐方式。</p></blockquote>\n<p>这非常直观，我们可以指定区域设置和格式化选项来初始化一个格式化器，并在之后使用格式化器对象的 <code>format</code> 方法来格式化一个 <code>Date</code> 对象。这里的格式化选项其实非常灵活，能格式化的不只是日期，时间也可以被灵活地格式化，有非常多的组合可以选择。我们不会在这里详细解释每一个选项，你可以访问 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\" rel=\"noopener\">MDN 文档</a>来了解更多。</p>\n<blockquote><p>如前文所述，<code>Intl.DateTimeFormat</code> 无法格式化毫秒。</p></blockquote>\n<p>不过需要注意的是，<strong>JavaScript 运行时不一定支持所有区域设置，也不一定支持所有格式化选项。</strong>在遇到不支持的情况时，<code>Intl.DateTimeFormat</code> 默认会静默 fallback 到最匹配的支持项，因此在处理不常见的区域设置或选项时，你可能需要再额外检查。你可以通过 <code>Intl.DateTimeFormat.supportedLocalesOf()</code> 静态方法判断当前运行时是否支持指定的区域设置，也可以在实例化格式化器后在对象上调用 <code>resolvedOptions()</code> 方法来检查运行时的解析结果是否与预期一致。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('yue-Hant-CN').resolvedOptions()\r\n// {locale: 'zh-CN', calendar: 'gregory', …}\r\n// fallback 至 zh-CN，与 yue-CN 的预期不一致</pre>\n<p>此外，正如你所看到的，各种语言在日期格式化中使用的文本 JavaScript 运行时都已经帮我们内置了。因此，我们甚至可以利用这些国际化特性来为我们的应用减少一点需要翻译的字符串——打包进应用的翻译越少，应用体积也就越小了嘛——比如说获取一周七天对应的名字：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getWeekdayNames = (locale) =&gt; {\r\n     // 基于一个固定日期计算，这里选择 1970.1.1\r\n     // 不能使用 0，因为 Unix 时间戳 0 在不同时区的日期不一样\r\n    const base = new Date(1970, 0, 1).getTime()\r\n    const formatter = new Intl.DateTimeFormat(locale, { weekday: 'short' })\r\n    return Array.from({ length: 7 }, (_, day) =&gt; (\r\n        formatter.format(new Date(base + 3600000 * 24 * (-4 + day))) // 1970.1.1 是周四\r\n    ))\r\n}\r\n\r\ngetWeekdayNames('en-US') // ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\r\ngetWeekdayNames('zh-CN') // ['周日', '周一', '周二', '周三', '周四', '周五', '周六']\r\ngetWeekdayNames('ja') // ['日', '月', '火', '水', '木', '金', '土']\r\ngetWeekdayNames('ar-EG') // ['الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت']</pre>\n<p>当然，如果你还是不喜欢运行时为你提供的格式，我们还有上文提到过的 <code>formatToParts()</code> 方法可以用。来看一个简单的例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('zh-CN', {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    weekday: 'long',\r\n    hour: 'numeric',\r\n    minute: 'numeric',\r\n    second: 'numeric',\r\n}).formatToParts(new Date())\r\n// [\r\n//     { type: 'year', value: '2021' },\r\n//     { type: 'literal', value: '年' },\r\n//     { type: 'month', value: '10' },\r\n//     { type: 'literal', value: '月' },\r\n//     { type: 'day', value: '13' },\r\n//     { type: 'literal', value: '日' },\r\n//     { type: 'weekday', value: '星期三' },\r\n//     { type: 'literal', value: ' ' },\r\n//     { type: 'dayPeriod', value: '上午' },\r\n//     { type: 'hour', value: '1' },\r\n//     { type: 'literal', value: ':' },\r\n//     { type: 'minute', value: '00' },\r\n//     { type: 'literal', value: ':' },\r\n//     { type: 'second', value: '00' }\r\n// ]</pre>\n<p>随后，你就可以自己解析这个数组来构造出你想要的时间格式了。最后，我们还可以使用 <code>Intl.RelativeTimeFormat</code> 来格式化相对日期。当然我们不会在这里详细讲解这个 API，你可以参考 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat\" rel=\"noopener\">MDN 文档</a>。直接来看一个简单例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getRelativeTime = (num, unit, locale) =&gt; {\r\n    return new Intl.RelativeTimeFormat(locale, { numeric: 'auto' }).format(num, unit)\r\n}\r\n\r\ngetRelativeTime(-3, 'day', 'en-US') // 3 days ago\r\ngetRelativeTime(-1, 'day', 'zh-CN') // 昨天\r\ngetRelativeTime(0, 'second', 'zh-CN') // 现在\r\ngetRelativeTime(3, 'hour', 'ja') // 3 時間後</pre>\n<blockquote><p><code>Intl.RelativeTimeFormat</code> 是一个相对较晚进入标准的对象，因此浏览器支持程度较差，可能需要使用 <a href=\"https://formatjs.io/docs/polyfills/intl-relativetimeformat\" rel=\"noopener\">Polyfill</a>。不过目前（2021.10）主流浏览器的最新版本均已支持此 API。</p></blockquote>\n<h1>未来</h1>\n<p>我希望这篇文章时区转换的部分可以很快过时——这并非无稽之谈，目前（2021.10）TC39 的 <a href=\"https://github.com/tc39/proposal-temporal\" rel=\"noopener\"><code>Temporal</code> 提案</a>已经进入 Stage 3 了。<strong><code>Temporal</code> 提案定义了一个新的、时区友好的 <code>Temporal</code> 命名空间，并期望在不久后就能进入标准并最终应用于生产环境。</strong><code>Temporal</code> 定义了完整的时区、时间段、日历规则的处理，且拥有简单明了的 API。那时候，JavaScript 的时区处理就不会再如此痛苦了。由于目前 <code>Temporal</code> 提案还未进入标准，API 暂未稳定，我们无法将其用于生产环境，但我们可以来看一个简单的例子感受一下这个 API 的强大。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const zonedDateTime = Temporal.ZonedDateTime.from({\r\n  timeZone: 'America/Los_Angeles',\r\n  year: 1995,\r\n  month: 12,\r\n  day: 7,\r\n  hour: 3,\r\n  minute: 24,\r\n  second: 30,\r\n  millisecond: 0,\r\n  microsecond: 3,\r\n  nanosecond: 500,\r\n  calendar: 'iso8601'\r\n}) // 1995-12-07T03:24:30.0000035-08:00[America/Los_Angeles]</pre>\n<p>如果你希望立刻开始使用 <code>Temporal</code>，现在已有 Polyfill 可用。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"js-temporal\" data-mdxgithubp=\"temporal-polyfill\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/js-temporal/temporal-polyfill\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>不过，时区问题不会消失，各地区的习惯也很难融合到一起。时间的国际化处理是<a href=\"https://yourcalendricalfallacyis.com/\" rel=\"noopener\">极其复杂</a>的，前端中的时间国际化仍然值得我们认真关注。</p>\n","link":"https://flyhigher.top/develop/2482.html"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 4分8秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量...</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板...）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/209138/1/18651/50218/622032acEf83a8d68/fc6db86aebb679ff.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。macOS 系统代理的行为和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：...</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/207910/19/18573/59096/622032b0E05c1d4be/5d89d557f7889730.jpg\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"\n<p>WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将其表述为 \"An API for accessing Public Key Credentials\"，即“一个用于访问公钥凭证的 API”。WebAuthn 很强大，强大到被认为是 Web 身份认证的未来（当然，也很复杂）。你有想过通过指纹或者面部识别来登录网站吗？WebAuthn 就能在保证安全和隐私的情况下让这样的想法成为现实。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\" alt=\"通过 WebAuthn 调起 Windows Hello 登录网站\" width=\"1912\" height=\"966\" class=\"aligncenter size-full wp-image-2215\"></a>\n<p>你可以在<a href=\"https://webauthn.io/\" rel=\"noopener\">这个网站</a>自行体验 WebAuthn。或者，如果你有一个使用 WordPress 的站点，可以尝试一下 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WP-WebAuthn</a> 这款插件，它可以为你的站点启用 WebAuthn 登录。这是我为了写这篇文章而练手开发的插件，本文中的部分示例代码也来自这款插件。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"wp-webauthn\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/wp-webauthn\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>WebAuthn Level 1 标准已在 2019 年 3 月成为 W3C 推荐标准，而 Level 2 标准目前也已进入编辑草案阶段，但互联网上有关它的中文资料却仍然很少，国内也鲜有网站支持这一新标准。于是，在抱着各种英文资料和标准啃了几天以后，我折腾出了这篇文章。</p>\n<p>在这篇文章里，我将会从最基本的概念开始，逐渐深入 WebAuthn，直到解码公钥等深层细节。这可能是你能找到的有关 WebAuthn 最详细最基础的中文文章，也很可能是最长的。在开始之前，<strong>我强烈建议你打开菜单中的文章目录浏览一遍，以对这篇文章涉及的内容有所了解。</strong>如果你只是想了解如何简单地在你的项目中添加对 WebAuthn 的支持，那么“<a href=\"https://flyhigher.top/#webauthn-overview\">浅谈 WebAuthn</a>”部分就是你要找的；如果你想了解更多关于 WebAuthn 的底层细节，那么你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分。</p>\n<p>由于在本文写作时 WebAuthn Level 2 规范尚未定稿，<strong>这篇文章我们将只专注于 Level 1 规范。</strong></p>\n<p>这篇文章最后更新于 2020.9 ，在你读到这篇文章时，部分事实可能已经发生改变，请注意判断。</p>\n<p><strong>更新日志：</strong></p>\n<ul>\n<li>2021.1.16 添加 Chrome 开发工具信息</li>\n<li>2020.9.17 更新 iOS/iPad OS 兼容性信息</li>\n<li>2020.5.20 添加部分无用户名认证的平台兼容性内容</li>\n<li>2020.5.15 添加部分 <code>extensions</code> 相关内容与链接；添加全局凭证 ID 唯一内容；添加凭证 ID 查找相关内容；添加“从 U2F 认证迁移”一节</li>\n<li>2020.4.13 更新与修正 <code>userVerification</code> 相关内容；添加部分 Firefox 相关内容</li>\n<li>2020.3.23 文章发布</li>\n</ul>\n<p>那么让我们开始吧。<span></span></p>\n<h1>浅谈 WebAuthn</h1>\n<p>在这个部分里，我们将会从基础概念开始，了解有关 WebAuthn 和密码学的一些基础知识，并最终使用第三方库实现基础的 WebAuthn 认证。如果你已经对这些内容有所了解了，可以跳到“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”继续阅读。</p>\n<h2>为什么使用 WebAuthn</h2>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\" alt=\"钓鱼邮件\" width=\"709\" height=\"693\" class=\"aligncenter size-full wp-image-2162\"></a>\n<p>相信你一定收到过类似的邮件吧？只要你点进那个最显眼的链接，你就会进入一个设置好的圈套——钓鱼网站。如果你一时糊涂在这类网站上填写了你的账号和密码，bingo，你的账号就不再是你的账号了。</p>\n<p>不过，就算你警惕心再强，也无法避免密码泄露事件。Twitter, Facebook 等都爆出过明文密码泄露事件，证明再大的公司或组织也无法避免密码泄露问题。雪上加霜的是，很大一部分用户都非常喜欢使用重复密码，这就导致一次密码泄露会牵连很多网站，用户的账户安全性完全无法得到保证。</p>\n<p>那么，有什么办法解决这些问题吗？<strong>彻底解决的方法只有一个，那就是抛弃密码。</strong>可是没有密码还怎么验证用户身份呢？这就是 WebAuthn 的用武之地了。</p>\n<p><del>没有密码的好时代，来临力！</del></p>\n<h2>什么是 WebAuthn</h2>\n<p>那么到底什么是 WebAuthn 呢？如开头所说，WebAuthn 是“一个用于访问公钥凭证的 API”，网站可以通过这个 API 进行一些高安全性的身份验证。WebAuthn 一个最常见的应用就是用于网站登录时的 2FA（双重因素验证）甚至是无密码登录。通过网页调用 WebAuthn，在不同平台下，<strong>我们可以实现通过 USB Key、指纹、面部甚至虹膜扫描来认证身份，同时确保安全和隐私。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\" alt=\"WebAuthn 可使用的各种身份认证方式\" width=\"1294\" height=\"566\" class=\"aligncenter size-full wp-image-2213\"></a>\n<p>WebAuthn 标准是 FIDO2 标准的一部分，而 FIDO2 则是由 FIDO 联盟和 W3C 共同推出的 U2F（现称作 FIDO1）的后继标准，旨在增强网络认证的安全性。</p>\n<blockquote><p>你可能了解过 U2F，那么 U2F 和 FIDO2 的区别在哪里呢？从名字上可以看出，U2F，即“通用第二因素协议”，是专注于作为密码后的第二道屏障的，而 FIDO2 增加了单因素认证功能，这意味着使用 FIDO2 可以完全替代密码，真正实现无密码登录。</p></blockquote>\n<p>FIDO2 标准主要包括四个部分，其一是用于网站和访客设备交互的 WebAuthn，而 Client to Authenticator Protocol 2（CTAP2，客户端-认证器协议）作为 WebAuthn 的补充，则是用于访客的设备和认证器交互的协议。标准的其他两个部分则是 U2F 和 UAF 规范。在这篇文章中，我们只关心 WebAuthn，不会涉及 CTAP, U2F 和 UAF 的相关知识。如果你对这段话中的一些概念不了解，不要紧张，接下来我们就来谈谈 WebAuthn 中一些常用的术语和概念。</p>\n<blockquote><p>WebAuthn 只能在安全上下文中使用，也就是说，页面需要使用 HTTPS 协议或是处于 <code>localhost</code> 中。</p></blockquote>\n<h2>常用术语和概念</h2>\n<p>WebAuthn 中有许多不常碰到的术语，不过我只会在这里介绍一些常用的术语和概念——如果你只是希望做出一个简单的实现，那么了解这一段中的一些概念就足够了。同时，由于我实在没能找到一部分术语的通用翻译，有一些术语我按着自己的理解尽可能地翻译了，有任何问题请告诉我。</p>\n<p>在一个完整的 WebAuthn 认证流程中，通常有这么几个角色：</p>\n<ul>\n<li>Relying Party 依赖方 (RP) ：指服务提供方，即网站</li>\n<li>User 用户：正准备登录的你</li>\n<li>Authenticator 认证器：通常指 USB Key 或是设备内置的指纹扫描器、虹膜扫描器、面部识别装置等，正是它们在使用流程中代替了密码甚至是用户名</li>\n<li>User Agent 用户代理：通常指浏览器或系统，负责与认证器交互</li>\n</ul>\n<p>认证过程通常分为两种：</p>\n<ul>\n<li>Registration Ceremony 注册仪式：用户向账户上添加认证器</li>\n<li>Authentication Ceremony 验证仪式：用户通过已注册的认证器验证身份</li>\n</ul>\n<p>同时，认证过程中还会产生这些内容：</p>\n<ul>\n<li>Challenge 挑战：通常是一串随机字符串</li>\n<li>Public Key Credential 公钥凭证：由认证器产生的凭证，在技术上代替了密码</li>\n<li>Attestation 证明：注册时认证器产生的验证数据</li>\n<li>Assertion 断言：验证时认证器产生的验证数据</li>\n</ul>\n<blockquote><p><strong>请注意区分证明 (Attestation) 和断言 (Assertion)</strong>，特别是在这两个单词有些相似的情况下。在 WebAuthn 中，它们是不同过程中的类似概念，但并不相同。</p></blockquote>\n<p>如果你对于这些内容不是很理解，没有关系，我们会在“<a href=\"https://flyhigher.top/#how-to-webauthn\">使用流程</a>”一节中将这些概念放到实际情况中解释，你只要先区分这些概念即可。</p>\n<h2>安全性的基础</h2>\n<p>WebAuthn 为什么安全？和 HTTPS 一样，WebAuthn 使用非对称加密的思路来保证安全性，但侧重点又有所不同。要理解 WebAuthn 的认证流程，我们必须对非对称加密有所了解。如果你对非对称加密比较熟悉了，就直接跳到下一段吧。</p>\n<p>WebAuthn 的核心在于“认证”，即保证产生了凭证的认证器是用户的认证器，而不是第三方在伪造凭证。但为什么要使用非对称加密呢？我们可以先来看看对称加密。</p>\n<p>让我们假设小明和小红相互写信，见不到对方。这天小红突然想，给自己写信的人是不是真的小明呢？于是小红要求对方向小红证明自己是小明。怎么证明呢？他们商量出来这么一套方案：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明和小红商量一个统一的密码和密钥</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明用提前和小红商量好的密码和密钥加密文本后发回给小红</li>\n<li>小红使用相同的密码和密钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和密钥</li>\n</ol>\n<blockquote><p>在密码学中，我们通常把“加密算法”称为密码 (code)，和通常登录时用的密码 (password) 并非同一个概念。</p></blockquote>\n<p>在这种情况下，<strong>只要密钥不泄露</strong>，即拥有正确密钥的只有小明和小红，那么小红就能确定对方一定是小明。但这样的问题也很明显，如果小明和小红不能见面，那么他们就必须先以明文交换密码——<strong>在这个过程中一旦有人窃取到了密码，这个认证就无效了。</strong></p>\n<p>这时我们就需要使用<strong>非对称加密</strong>来拯救破碎的信任了。非对称加密的基础是一对密钥，也就是公钥和私钥，它们是互相关联但（几乎）无法互相推导的。在非对称加密的过程中，选择相同的密码后，使用私钥加密明文得到的密文只能由对应的公钥解密，无法使用私钥解密，同时这个过程反过来也是成立的。</p>\n<blockquote><p>本文的核心并不是非对称加密算法，因此不会详述非对称加密在数学上的证明，若有兴趣可以自行了解。</p></blockquote>\n<p>这就完美解决密钥泄露的问题了。让我们回过头来看之前的例子。现在小明和小红决定使用非对称加密来证明身份，过程如下：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明提前生成一对公私钥，将公钥发送给小红，私钥自己保管，同时商量好统一的密码</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明使用商量好的密码和自己的私钥加密文本，发送给小红</li>\n<li>小红使用相同的密码和小明的公钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和私钥</li>\n</ol>\n<p>在这种情况下，<strong>只要私钥不泄露</strong>，那么小红解密得到的文本和之前发送的一致，那么就可以证明收到的密文一定是由小明加密后发送过来的。而在整个过程中，私钥都没有离开过小明，更没有经过传输，也就几乎没有泄露的可能了。这时，小红终于可以确定对面和她通信的人的确是小明了。</p>\n<p>题外话：HTTPS 虽然也应用了非对称加密，但 HTTPS 更侧重于“加密”而非“认证”，因此思路上会有些许差异。要了解关于 HTTPS 和非对称加密的更多信息，你可以阅读我之前写的这篇文章：</p>\n<p></p>\n<div class=\"mdx-post-cot\" data-mdxposturl=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdx-post-wait-out-c2\"><div class=\"mdx-post-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<span></span>\n<h2>使用流程</h2>\n<p>了解了非对称加密，我们就可以来看看 WebAuthn 的认证流程了。</p>\n<p>和普通的密码一样，<strong>使用 WebAuthn 分为两个部分，注册和验证。</strong>注册仪式会在依赖方中将认证器的一些信息和用户建立关联；而验证仪式则是验证这些信息以登确保是用户本人在登录。根据上一节的思路，我们可以知道，注册仪式就是认证器生成一对公私钥，然后将公钥交给依赖方；而验证仪式是依赖方发送给认证器一段文本，要求认证器用自己的私钥加密后发回以验证。</p>\n<p>在实际情况中，WebAuthn 是基于<strong>挑战-应答模型</strong>工作的。要更好地理解，我们直接来看具体流程。先来看看注册的流程。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\" alt=\"WebAuthn 注册流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2224\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的注册请求</li>\n<li>依赖方向浏览器发送挑战、依赖方信息和用户信息</li>\n<li>浏览器向认证器发送挑战、依赖方信息、用户信息和客户端信息以请求创建公钥凭证</li>\n<li>认证器请求用户动作，随后创建一对公私钥，并使用私钥签名挑战（即证明），和公钥一起交给浏览器</li>\n<li>浏览器将签名后的挑战和公钥发送给依赖方</li>\n<li>依赖方用公钥验证挑战是否与发送的一致，如果成功则将公钥与用户绑定，注册完成</li>\n</ol>\n<p>我也做了一个交互式的 Demo，你可以对照流程来更好地理解。</p>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\">开始注册</button> <span></span></p>\n<div></div>\n<blockquote><p>注意，这个 Demo 和下方的 Demo 都只是一个本地模拟的简单示例，没有任何数据会被上传，当然也不会对数据进行验证。</p></blockquote>\n<p>而之后的验证流程如下：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\" alt=\"WebAuthn 验证流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2226\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的验证请求</li>\n<li>依赖方向浏览器发送挑战</li>\n<li>浏览器向认证器发送挑战、依赖方信息和客户端信息以请求获取公钥凭证</li>\n<li>认证器请求用户动作，随后通过依赖方信息找到对应私钥，并使用私钥签名挑战（即断言），交给浏览器</li>\n<li>浏览器将签名后的挑战发送给依赖方</li>\n<li>依赖方用之前存储的公钥验证挑战是否与发送的一致，一致则验证成功</li>\n</ol>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\" disabled>开始验证</button> <span>在上方注册后才能验证</span></p>\n<div></div>\n<p>可以看到，WebAuthn 不仅在理论上是安全的，同时<strong>在整个过程中并没有隐私数据被传输</strong>——用户信息实际上只包含用户名和用户 ID。因此我们完全可以说 WebAuthn 是安全且私密的。</p>\n<blockquote><p>为了避免用户在不同依赖方之间被追踪，认证器通常会为每个依赖方和用户的组合都创建一对公私钥。不过，由于认证器的存储空间有限，认证器通常不会存储每一个私钥，而是会通过各类信息和烧录在认证器内的主密钥“算”出对应的私钥以实现无限对公私钥。具体算法根据不同厂商会有所不同。对于 Yubikey，你可以在<a href=\"https://developers.yubico.com/U2F/Protocol_details/Key_generation.html\">这里</a>了解更多。</p></blockquote>\n<blockquote><p>如果依赖方需要，用户同意后，发送给依赖方的公钥凭证中可以包含用于辨认认证器型号的信息，不过这对隐私的影响微乎其微。</p></blockquote>\n<h2>浏览器接口</h2>\n<p>要使用 WebAuthn，我们必须要依靠浏览器作为媒介和验证器进行交互，而这就需要浏览器对于 WebAuthn 的支持了。绝大多数新版本的现代浏览器都为 WebAuthn 提供了统一的接口，而在这一段中我们会了解如何使用相关的接口。但是在开始之前，我们可以先来看看浏览器的支持程度（2020.9）。</p>\n<div class=\"mdui-table-fluid\"><table class=\"mdui-table\">\n<thead><tr>\n<th>浏览器</th>\n<th>支持情况</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>桌面端 Chrome</td>\n<td>67+</td>\n</tr>\n<tr>\n<td>移动端 Chrome</td>\n<td>67+<sup>[1]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Firefox</td>\n<td>60+</td>\n</tr>\n<tr>\n<td>移动端 Firefox</td>\n<td>不支持<sup>[2]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Edge</td>\n<td>18+</td>\n</tr>\n<tr>\n<td>移动端 Edge</td>\n<td>不支持<sup>[3]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Safari</td>\n<td>13+</td>\n</tr>\n<tr>\n<td>移动端 Safari</td>\n<td>13.3+<sup>[4]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Opera</td>\n<td>54+</td>\n</tr>\n<tr>\n<td>移动端 Opera</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table></div>\n<p><sup>[1]</sup> 受平台限制，Chrome 在 iOS 平台上不支持 WebAuthn，在 Android 平台上支持大部分 WebAuthn 功能，但仍不支持部分特性（如 <code>userVerification</code>）。<br><sup>[2]</sup> 移动端 Firefox 80 以下的版本支持 WebAuthn 但似乎会忽略 <code>authenticatorAttachment</code> 等一部分参数，同时移动端 Firefox Beta 80 以下的版本支持 WebAuthn 但无法成功调用。自 80 版本起移动端 Firefox 暂时取消了对 WebAuthn 的支持（可能是 Bug）。<br><sup>[3]</sup> 移动端 Edge 似乎支持 WebAuthn 但无法成功调用。<br><sup>[4]</sup> Safari iOS/iPad OS 13 仅支持外部认证器，无法调用 Touch ID 或 Face ID；自 iOS/iPad OS 14 起 Safari 已支持全功能 WebAuthn，可以调用 Touch ID/Face ID</p>\n<p>当然，一众国产浏览器，包括 Samsung Browser 和 Yandex Browser，目前都不支持 WebAuthn。此外，由于 WebAuthn 涉及外部验证器和 TPM 可信平台模块等，用户的操作系统也会对 WebAuthn 的可用性造成影响。以下是一些需要注意的信息：</p>\n<ul>\n<li>Windows 10 1903 以下版本仅 Edge 能提供完整支持，其他浏览器只能使用 USB Key 等外部认证器；1903+ 中所有浏览器都可以通过 Windows Hello 带来完整的 WebAuthn 支持</li>\n<li>Android 需要安装并开启 Google 服务</li>\n<li>iOS/iPad OS 13.3 以下的版本不支持 WebAuthn，iOS/iPad OS 14 以下的版本支持有限（参考上文），iOS/iPad OS 14 开始 Safari 已支持全功能 WebAuthn（功能完整度甚至超过了 Android）</li>\n</ul>\n<p>可以看出，WebAuthn 的发展之路仍然很漫长，但好在桌面端对它的支持已经比较完善了，在一些情况下我们完全有理由使用它。</p>\n<hr>\n<p>来看看浏览器提供了怎么样的接口吧。要使用 WebAuthn，我们可以使用 <code>navigator.credentials.create()</code> 请求认证器生成公钥凭证和 <code>navigator.credentials.get()</code> 请求获取公钥凭证。</p>\n<blockquote><p>你或许已经对 Credential Management API 有所了解了。通过这些 API，我们还可以实现一些有趣的特性，不过这值得另开一篇文章来讲了。</p></blockquote>\n<p>对于一个基础的实现，<code>navigator.credentials.create()</code> 需要传入的参数如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        challenge,\r\n        rp: {\r\n            id,\r\n            name\r\n        },\r\n        user: {\r\n            id,\r\n            name,\r\n            displayName\r\n        },\r\n        pubKeyCredParams: [\r\n            {\r\n                type: \"public-key\",\r\n                alg\r\n            }\r\n        ],\r\n        authenticatorSelection: {\r\n            authenticatorAttachment,\r\n            userVerification\r\n        },\r\n        excludeCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>在 <code>navigator.credentials.create()</code> 方法中，我们必须传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值。这指明了我们需要创建公钥凭证，而非普通的密码凭证。然后，在 <code>publicKey</code> 对象中设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rp: Object</code>：依赖方信息，其中有一项为必须：\n<ul>\n<li>\n<code>rp.id: String</code>：（可选）依赖方 ID，必须为当前域名或为当前域名的子集的域名（不是子域名）。如域名为 <code>test.123.example.com</code>，则依赖方 ID 可以是 <code>test.123.example.com</code>, <code>123.example.com</code> 或 <code>example.com</code>。不指定则默认使用当前域名</li>\n<li>\n<code>rp.name: String</code>：依赖方名称，用于方便用户辨认</li>\n</ul>\n</li>\n<li>\n<code>user: Object</code>：用户信息，其中有三项为必须：\n<ul>\n<li>\n<code>user.id: Uint8Array</code>：转换为 <code>Uint8Array</code> 的字符串。<strong>出于安全考量，这应尽可能不与任何用户信息相关联，如不要包含用户名、用户邮箱等</strong>\n</li>\n<li>\n<code>user.name: String</code>：登录用户名</li>\n<li>\n<code>user.dispalyName: String</code>：用于显示的用户名称，显示与否的具体行为取决于浏览器</li>\n</ul>\n</li>\n<li>\n<code>pubKeyCredParams: Array</code>：一个算法列表，指明依赖方接受哪些签名算法。列表的每一项都是一个对象，拥有两个属性：\n<ul>\n<li>\n<code>pubKeyCredParams[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>pubKeyCredParams[].alg: Number</code>：一个负整数，用于标明算法。具体算法对应的数字可以在 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\">COSE</a> 找到</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection: Object</code>：（可选）用于过滤正确的认证器，这里介绍常用的一个参数：\n<ul>\n<li>\n<code>authenticatorSelection.authenticatorAttachment: String</code>：（可选）指定要求的认证器类型。如果没有满足要求的认证器，认证可能会失败。该参数可以为 <code>null</code>（表示接受所有类型的认证器）或是以下两个值之一：\n<ul>\n<li>\n<code>platform</code>：表示仅接受平台内置的、无法移除的认证器，如手机的指纹识别设备</li>\n<li>\n<code>cross-platform</code>：表示仅接受外部认证器，如 USB Key</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection.userVerification: String</code>：（可选）指定认证器是否需要验证“用户为本人 (User Verified, UV)”，否则只须“用户在场 (User Present, UP)”。具体验证过程取决于认证器（不同认证器的认证方法不同，也有认证器不支持用户验证），而对验证结果的处理情况则取决于依赖方。该参数可以为以下三个值之一：\n<ul>\n<li>\n<code>required</code>：依赖方要求用户验证</li>\n<li>\n<code>preferred</code>：（默认）依赖方希望有用户验证，但也接受用户在场的结果</li>\n<li>\n<code>discouraged</code>：依赖方不关心用户验证。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>excludeCredentials: Array</code>：（可选）用于标识要排除的凭证，可以避免同一个用户多次注册同一个认证器。如果用户试图注册相同的认证器，用户代理会抛出 <code>InvalidStateError</code> 错误。数组中的每一项都是一个公钥凭证对象，包含以下属性：\n<ul>\n<li>\n<code>excludeCredentials[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>excludeCredentials[].id: Uint8Array</code>：要排除的凭证 ID</li>\n<li>\n<code>excludeCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，超时后将强制终止 <code>create()</code> 并抛出错误。若不设置，将使用用户代理的默认值；若太大或太小，则使用最接近的用户代理默认值范围中的值。推荐值为 5000-120000</li>\n</ul>\n<blockquote><p>对于 <code>pubKeyCredParams</code>，通常我们只需添加 ES256 (alg: -7) 算法即可兼容大部分外部认证器，此外，再添加 RS256 (alg: -257) 算法即可兼容大部分平台内置认证器（如 Windows Hello）。当然，前端添加算法之后，后端也需要相应的算法支持。</p></blockquote>\n<blockquote><p>对于 <code>userVerification</code>，由于默认值 \"preferred\" 并不能很好地被所有设备支持，因此无论在 <code>create()</code> 中还是 <code>get()</code> 中不指定该参数都会在 Chrome 中触发一条警告。具体请参阅<a href=\"https://chromium.googlesource.com/chromium/src/+/master/content/browser/webauth/uv_preferred.md\">这个页面</a>。</p></blockquote>\n<p>调用 <code>create()</code> 之后，我们就可以拿到一个 <code>Promise</code>，并可以在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>create()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAttestationResponse {\r\n        attestationObject: ArrayBuffer(390) {},\r\n        clientDataJSON: ArrayBuffer(121) {}\r\n    },\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\",\r\n    type: \"public-key\"\r\n}</pre>\n<p>其中有：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 \"public-key\"</li>\n<li>\n<code>response: Object</code>：<code>AuthenticatorAttestationResponse</code> 对象，是 <code>PublicKeyCredential</code> 的主要部分，包含以下两个内容：\n<ul>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n<li>\n<code>response.attestationObject: ArrayBuffer</code>：CBOR 编码的认证器数据，包含凭证公钥、凭证 ID、签名（如果有）、签名计数等信息</li>\n</ul>\n</li>\n</ul>\n<p>然后将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串，我们就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证与注册了。具体怎么操作，我们会在下文详细讨论。当然，别忘了 <code>catch()</code> 注册过程中抛出的任何错误。</p>\n<blockquote><p>你可能会认为在所有情况下，注册时认证器都会对挑战进行签名。实际上在大部分情况下（同时也是默认情况），<strong>注册时认证器并不会对挑战进行签名</strong>，<code>attestationObject</code> 并不会包含签名后的挑战。只有依赖方明确要求证明且用户同意（部分浏览器要求）后认证器才会对挑战进行签名（具体实现据情况会有所不同）。对此，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion#Attestation\">MDN 解释道</a>“大部分情况下，用户注册公钥时我们会使用「初次使用时信任模型」(TOFU) ，此时验证公钥是没有必要的。”要了解更多关于证明的内容，请参阅“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>而对于 <code>navigator.credentials.get()</code>，我们可以传入如下的参数：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.get({\r\n    publicKey: {\r\n        challenge,\r\n        rpId,\r\n        userVerification,\r\n        allowCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>和 <code>create()</code> 一样，对于 <code>get()</code> 我们需要传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值，指明我们需要获取的是公钥凭证而非普通的密码凭证。在 <code>publicKey</code> 对象中我们可以设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rpID: String</code>：（可选）依赖方 ID，需要和注册认证器时的一致。规则和上述的 <code>rp.id</code> 一致，不指定默认使用当前域名</li>\n<li>\n<code>userVerification: String</code>：和上文一样，只是需要注意它这次不在 <code>authenticatorSelection</code> 中了</li>\n<li>\n<code>allowCredentials: Array</code>：（可选）用于标识允许的凭证 ID，使用户代理找到正确的认证器。只有符合这个列表中凭证 ID 的凭证才能被成功返回。数组中的每一项都是对象，包含以下属性：\n<ul>\n<li>\n<code>allowCredentials[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>allowCredentials[].id: Uint8Array</code>：允许的凭证 ID</li>\n<li>\n<code>allowCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，和上面的一样，推荐值为 5000-120000</li>\n</ul>\n<p>嗯，要传入的参数少多了。之后，和 <code>create()</code> 一样，调用 <code>get()</code> 之后，我们就可以拿到一个 <code>Promise</code> 并在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>get()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAssertionResponse {\r\n        authenticatorData: ArrayBuffer(37) {},\r\n        signature: ArrayBuffer(256) {},\r\n        userHandle: ArrayBuffer(64) {},\r\n        clientDataJSON: ArrayBuffer(118) {}\r\n    }\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\"\r\n    type: \"public-key\"\r\n}</pre>\n<p>这里的东西就比 <code>create()</code> 时拿到的要多了。看看我们拿到了什么吧：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 \"public-key\"</li>\n<li>\n<code>response: Object</code>：对于验证流程，认证会返回 <code>AuthenticatorAssertionResponse</code> 而不是 <code>AuthenticatorAttestationResponse</code> 对象，这个对象包含以下 4 个属性：\n<ul>\n<li>\n<code>response.authenticatorData: ArrayBuffer</code>：认证器信息，包含认证状态、签名计数等</li>\n<li>\n<code>response.signature: ArrayBuffer</code>：被认证器签名的 <code>authenticatorData</code> + <code>clientDataHash</code>（<code>clientDataJSON</code> 的 SHA-256 hash）</li>\n<li>\n<code>response.userHandle: ArrayBuffer</code>：<code>create()</code> 创建凭证时的用户 ID <code>user.id</code>。许多 U2F 设备不支持这一特性，这一项将会是 <code>null</code>\n</li>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n</ul>\n</li>\n</ul>\n<p>同样地，我们将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串后就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证了。至于具体怎么做，别急，马上就来讲一讲。</p>\n<h2>简单实现</h2>\n<p>了这么多，我们终于可以实现一个简单的 WebAuthn 认证页面了。由于在实际操作中 WebAuthn 相关的数据解码和密码计算比较复杂，在服务器端我们可以使用第三方库来帮我们做这些脏活累活，我们只需专注于具体流程就可以了。</p>\n<p>要寻找可用的第三方库，你可以在 <a href=\"https://webauthn.io/\">webauthn.io</a> 上找到适用于各种语言的第三方库——除了 PHP（笑）。不过好在你可以在 GitHub 上找到几个不错的 PHP WebAuthn 库，比如 <a href=\"https://github.com/web-auth/webauthn-framework\">web-auth/webauthn-framework</a>。</p>\n<p>在我们的这个例子中，我们关心的主要是前端逻辑；而后端我们可以使用各类几乎已经做到开箱即用的第三方库，这样我们可以专注于流程而不必关心细节。当然如果你想了解后端的解码细节，可以阅读“<a href=\"https://flyhigher.top/#webauthn-decode\">手动解个码</a>”一节。</p>\n<hr>\n<p>让我们先从注册开始吧。现在，用户点击了注册认证器的按钮，一个请求被发送给服务器（也就是依赖方）。在最简单的情况中，依赖方需要将三个内容发送给浏览器：<strong>挑战、用户信息和用户已注册的凭证 ID 列表（即 <code>excludeCredentials</code>）</strong>。当然依赖方也可以自由选择发送更多信息，只要最终前端能构建合法的参数即可。</p>\n<p>挑战最终会被转换为 <code>Uint8Array</code>，即一组 0-255 的整数。如果使用 PHP，在后端我们可以这样生成 Base64 编码的挑战：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$challenge = \"\";\r\nfor($i = 0; $i \n<p>对于用户信息，我们需要登录名、显示名称和 ID 三项内容。我们可以从数据库中取出用户信息，也可以新建一份。需要注意的是，<strong>出于安全和隐私的考量，ID 不应该包含用户的任何信息，比如用户邮箱等。</strong>推荐的做法是和挑战一样，生成一个随机字符串/一组随机数，并将其于用户关联起来以供之后使用。</p>\n<p>发送已注册的凭证 ID 列表是为了防止用户重复注册同一个认证器。正确设置该列表后，如果用户试图注册同一个认证器，浏览器会中止流程并抛出 <code>InvalidStateError</code>。</p>\n<p>最后，别忘了将挑战等一些后续可能会用到的信息临时存储起来。Session 就是一个很好的选择。</p>\n<p>将所有信息发送到浏览器之后，我们应该可以构建出新建凭证所需的参数了。由于有多个参数需要以 <code>Uint8Array</code> 的形式传入，我们可以准备一个简单的工具函数帮我们将 Base64 的字符串转为 <code>Uint8Array</code>。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function str2ab(str){\r\n    return Uint8Array.from(window.atob(str), c=&gt;c.charCodeAt(0));\r\n}</pre>\n<p>除了 <code>challenge</code>, <code>rp</code>, <code>user</code> 和 <code>excludeCredentials</code> 几部分需要你根据具体情况设置外，上文提到的其他参数一般可以这么设置：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">publicKey: {\r\n    challenge, // 自行设置\r\n    rp, // 自行设置\r\n    user, // 自行设置\r\n    pubKeyCredParams: [\r\n        {\r\n            type: \"public-key\",\r\n            alg: -7 // ES256\r\n        },\r\n        {\r\n            type: \"public-key\",\r\n            alg: -257 // RS256\r\n        }\r\n    ],\r\n    authenticatorSelection: {\r\n        userVerification: \"discouraged\",\r\n        authenticatorAttachment: null // 除非用户指定，大部分情况下无需指定\r\n    },\r\n    excludeCredentials, // 自行设置\r\n    timeout: 60000\r\n}</pre>\n<p>然后就是传入 <code>navigator.credentials.create()</code>，拿到 <code>PublicKeyCredential</code>。如果一切顺利，接下来我们就需要考虑如何将返回的内容传回依赖方了。由于我们拿到的很多都是 <code>ArrayBuffer</code>，我们需要将其进行编码。再准备一个工具函数吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function array2b64String(a) {\r\n    return window.btoa(String.fromCharCode(...a));\r\n}</pre>\n<p>然后适当处理，我们就可以得到一个方便传输的 JSON 字符串了：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({publicKey}).then((credentialInfo) =&gt; {\r\n    const publicKeyCredential = {\r\n        id: credentialInfo.id,\r\n        type: credentialInfo.type,\r\n        rawId: array2b64String(new Uint8Array(credentialInfo.rawId)),\r\n        response: {\r\n            clientDataJSON: array2b64String(new Uint8Array(credentialInfo.response.clientDataJSON)),\r\n            attestationObject: array2b64String(new Uint8Array(credentialInfo.response.attestationObject))\r\n        }\r\n    };\r\n    return publicKeyCredential;\r\n}).then(JSON.stringify).then((authenticatorResponseJSON) =&gt; {\r\n    // 可以发送了\r\n}).catch((error) =&gt; {\r\n    console.warn(error); // 捕获错误\r\n})</pre>\n<p>依赖方收到数据以后，还需要做三件事：验证挑战、存储凭证 ID 和存储公钥。如果数据解码顺利，且收到的挑战和之前发送的一致，就可以认为注册成功，将凭证 ID 及公钥与用户关联起来。这一步有很多第三方库可以帮我们做，对于基础实现我们就不深入探究了。</p>\n<blockquote><p>由于不同厂商的认证器的实现方式不同，<strong>我们并不能保证凭证 ID 一定是全局唯一的</strong>，也就是说，凭证 ID 有可能碰撞——即使这些凭证实际上是不同的。依赖方在实现凭证 ID 的存储及查找时，需要注意和用户 ID 结合进行存储或查找，或是直接在注册认证器时在服务器端对比阻止相同的凭证 ID。</p></blockquote>\n<hr><p>接下来就可以进行验证了。某天，用户点击了验证按钮准备登录，于是浏览器发送了验证请求到依赖方，同时附上要登录的用户名。接下来依赖方至少需要发送两项内容给浏览器：<strong>挑战和用户已绑定的凭证 ID 列表（即 <code>allowCredentials</code>）。</strong></p>\n<p>之后前端的处理流程就和注册时基本一致了。只是需要注意验证流程中获取到的 <code>PublicKeyCredential</code> 的结构和注册时的稍有不同。</p>\n<p>当浏览器将数据传回后，依赖方需要做的事情就比之前要麻烦一些了。依赖方需要验证挑战，并用之前存储的公钥验证签名和签名计数。同样地，这一步有很多第三方库可以帮我们做。最后，如果验证全部通过，我们就可以允许用户登录了。</p>\n<p>到目前为止，我们已经实现了一个简单的 WebAuthn 验证服务。不过这只是一个最基础的实现，对于很多高安全要求的身份认证这是远远不够的。因此，我们需要摆脱对第三方库的依赖，深入了解 WebAuthn。你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分，不过对于基础的 WebAuthn 实现，我们的旅程就到这里了。</p>\n<h2>拓展阅读</h2>\n<p>如果你的目标只是快速了解如何开发 WebAuthn，那么你阅读到这里就可以了。同时，上一节例子中的部分代码来自于我为了这篇文章开发的 WordPress 插件 WP-WebAuthn，这个插件可以为你的 WordPress 启用 WebAuthn 无密码登录（并非二步验证），你可以查阅插件的 <a href=\"https://github.com/yrccondor/wp-webauthn\">GitHub 存储库</a>了解更多，也可以自己安装试一试。</p>\n<p>如果你正在使用 Chrome 开发，Chrome 87+ 版本添加了一个 WebAuthn 开发者面板，可以帮助你在没有任何实体验证器的情况下开发 WebAuthn 功能。你可以在 Google 的<a href=\"https://developers.google.com/web/tools/chrome-devtools/webauthn\">这篇文章</a>中了解更多。不够，如果你正在使用 Firefox，很遗憾目前我还没有找到对应的开发工具或是浏览器扩展可用。</p>\n<p>如果你希望了解更多关于非对称加密的数学证明，可以查阅阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">这篇文章</a>。</p>\n<p>如果你希望了解更多关于 Credential Management API 的信息，可以查阅<a href=\"https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe\">这篇文章</a>（英文）。</p>\n<p>如果你希望了解更多 WebAuthn 的细节，可以继续往下阅读。<span></span></p>\n<h1>深入了解 WebAuthn</h1>\n<p>如上文所说，如果摆脱对第三方库的依赖，或是要实现更安全的 WebAuthn，我们必须深入了解 WebAuthn。在这一部分中，我们会详细讨论上文没有提到的一些概念和参数，并了解 WebAuthn 中各类数据的结构以实现解码与验证。先来看一看一些进阶的选项吧。</p>\n<h2>进阶选项</h2>\n<p>没错，上文提到的传入 <code>navigator.credentials.create()</code> 和 <code>navigator.credentials.get()</code> 方法的参数其实只是所有参数的一部分。对于 <code>create()</code>，我们还可以配置这些可选内容（上文提及的已省略）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        rp: {\r\n            icon\r\n        },\r\n        user: {\r\n            icon\r\n        },\r\n        attestation,\r\n        authenticatorSelection: {\r\n            requireResidentKey\r\n        },\r\n        extensions\r\n    }\r\n})</pre>\n</pre>\n<ul>\n<li>\n<code>rp.icon: String</code> 和 <code>user.icon</code>：是的，你可以为依赖方和用户设置图标，可以使用 HTTPS URL 或 Base64，一般长度不能超过 128 字节，不过大部分浏览器不会显示图标，或是有非常小的图片体积限制，所以一般没有使用这一属性的必要</li>\n<li>\n<code>attestation: String</code>：表明依赖方是否需要证明。可选三个值：\n<ul>\n<li>\n<code>none</code>：（默认）不需要证明。如上文所述，依赖方不关心证明，因此认证器不会签名。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n<li>\n<code>indirect</code>：依赖方需要证明，但证明方式可由认证器选择。在支持匿名证明的认证器上，认证器会通过匿名证明的方式签名挑战，并向依赖方提供签名方式等信息</li>\n<li>\n<code>direct</code>：依赖方要求直接证明。此时认证器会使用烧录在认证器中的公钥进行签名，同时向依赖方提供签名方式等信息以供依赖方验证认证器是否可信。更多信息可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节</li>\n</ul>\n</li>\n<li>在 <code>authenticatorSelection</code> 中，我们还可以设置两个可选属性：\n<ul>\n<li>\n<code>authenticatorSelection.requireResidentKey: Boolean</code>：是否要求将私钥钥永久存储于认证器中。默认值为 <code>false</code>。对于 iOS/iPad OS 13，必须设置为 <code>false</code>，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n<li>\n<code>extensions: Object</code>：WebAuthn 扩展，可以提供规范之外的配置和响应。由于实际情况中很少会使用这一特性，我们不会在这篇文章中讨论它</li>\n\n<blockquote><p>将 <code>requireResidentKey</code> 设置为 <code>true</code> 可以实现无用户名的登录，即认证器同时替代了用户名和密码。需要注意的是，尽管大部分认证器可以实现无限对公私钥，<strong>但能永久存储的私钥数量是有限的</strong>（对于 Yubikey，这通常是 25），因此只应在真正需要的时候启用此特性。我们会在“<a href=\"https://flyhigher.top/#login-without-username\">无用户名登录</a>”一节中详细讨论原因。</p></blockquote>\n<blockquote><p><strong>如果你没有高安全需求（如银行交易等），请不要向认证器索取证明</strong>，即将 <code>attestation</code> 设置为 \"none\"。对于普通身份认证来说，要求证明不必要的，且会有浏览器提示打扰到用户。</p></blockquote>\n<blockquote><p>Android 暂时无法实施用户验证，进而会导致依赖方验证失败。你可以在<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=997538\">这里</a>追踪这个特性的实现情况。</p></blockquote>\n<blockquote>\n<p>对于 <code>extensions</code>，由于目前浏览器支持和应用范围有限，我们不会在这篇文章中涉及，不过你可以看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    uvm: true, // 要求认证器返回用户进行验证的方法\r\n    txAuthSimple: \"Please proceed\" // 在认证器上显示与交易有关的简短消息\r\n}</pre>\n<p>你可以在<a href=\"https://www.w3.org/2019/01/webauthn-extensions.html\">这个页面</a>了解更多关于 <code>extensions</code> 的信息。</p>\n</blockquote>\n<p>对于 <code>get()</code>，我们其实只有一个可选内容没讲了，即 <code>extensions</code>。和上文一样，我们不会在这篇文章中讨论它。</p>\n<p>就这些了！<span></span></p>\n<h2>手动解个码</h2>\n<p>是时候看看如何手动解码了。我们将会在这一节中讨论认证器返回的数据的结构以及如何正确地解码它们。</p>\n<p>首先我们来看看如何处理注册过程中认证器发回的数据。假设所有 <code>ArrayBuffer</code> 类型的值都被正确地以 Base64 编码，且后端已经将 JSON 的字符串解析为字典。先来复习一下，我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"ZRBkDBCEtq...9XY8atOcbg\",\r\n    type: \"public-key\",\r\n    rawId: \"ZRBkDBCEtq...9XY8atOcbg==\",\r\n    response: {\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...i5jcmVhdGUifQ==\",\r\n        attestationObject: \"o2NmbXRkbm9uZWd...xNHuAMzz2LxZA==\"\r\n    }\r\n}</pre>\n<p>这里的 <code>id</code> 就是凭证的 ID，如果验证正确，我们最终要将它存储起来并于用户关联。同时可以看到 Base64 编码后的 <code>rawId</code> 其实和 <code>id</code> 是一致的（不过 <code>id</code> 是 Base64URL 编码的）。而 <code>type</code> 则一定是 \"public-key\"。</p>\n<p>不过，我们主要关心的还是 <code>respose</code> 中的两项内容。首先是 <code>clientDataJSON</code>。它的处理比较简单，看名字就知道，它应该是一个 JSON 字符串。</p>\n<blockquote><p>小技巧：如果你看到一个 Base64 编码的字符串以 \"ey\" 开头，那么它大概率是一个 Base64 编码的 JSON。</p></blockquote>\n<p>将<code>clientDataJSON</code> Base64 解码再 JSON 解码之后我们就能得到一个字典：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"NI4i1vsNmP2KHcmyFnBCKRVQPfHgg34SsYZUOPZY2lM\",\r\n    extra_keys_may_be_added_here: \"do not compare clientDataJSON against a template. See https://goo.gl/yabPex\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>结构一目了然。在这里，我们需要验证三项内容：</p>\n<ul>\n<li>\n<code>challenge</code> 和之前发送的一致</li>\n<li>\n<code>origin</code> 为创建凭证的页面的源（协议+主机名+端口号，并非 URL）</li>\n<li>\n<code>type</code> 为 \"webauthn.create\"</li>\n</ul>\n<p>同时可以注意到有一个奇怪的 <code>extra_keys_may_be_added_here</code>。这其实是 Google 在 Chrome 中搞的一点小把戏，有一定概率会出现，提醒我们需要将 JSON 解析后再验证键值以防额外插入的键值影响验证。具体信息你可以访问那个 URL 看一看。</p>\n<p>对于 Firefox，我们会多得到两项 <code>clientExtensions</code> 和 <code>hashAlgorithm</code> ，分别指明了客户端扩展数据和签名算法。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"3-4\">{\r\n    challenge: \"dg6ost6ujhAA0g6WqLe-SOOH-tbhvjW9Sp90aPKlLJI\",\r\n    clientExtensions: {},\r\n    hashAlgorithm: \"SHA-256\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>由于本文不考虑扩展数据，因此我们可以不考虑 <code>clientExtensions</code>。同时由于目前规范中指定的签名算法只有 SHA-256 一种，因此现阶段我们也可以简单地忽略 <code>hashAlgorithm</code>。</p>\n<p><code>clientDataJSON</code> 很简单地就处理完了。接下来我们要来看看 <code>attestationObject</code>。先来看看 <code>attestationObject</code> 的结构图示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\" alt=\"attestationObject 的结构\" width=\"1056\" height=\"532\" class=\"aligncenter size-full wp-image-2245\"></a>\n<p><code>attestationObject</code> 是 CBOR 编码后再被 Base64 编码的，因此我们需要额外对其进行 CBOR 解码。</p>\n<blockquote><p>CBOR (Concise Binary Object Representation, 简明二进制对象表示) 是一种多应用于物联网领域的编码方式，你可以将它看作体积更小、更方便物联网传输的二进制 JSON。大部分语言都可以找到对应的 CBOR 解码库。</p></blockquote>\n<p>我们当然不会手解 CBOR，直接来看看解开之后的样子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"none\",\r\n    attStmt: {},\r\n    authData: [211, 217, 43, 24, 199, ..., 97, 238, 166, 67, 107]\r\n}</pre>\n<p>这些键值的含义如下：</p>\n<ul>\n<li>\n<code>fmt</code>：标明证明的格式。WebAuthn 预定义了几种格式，分别为：\n<ul>\n<li>\n<code>none</code>：没有证明</li>\n<li>\n<code>packed</code>：为 WebAuthn 优化的证明格式</li>\n<li>\n<code>android-safetynet</code>：Android 使用的格式</li>\n<li>\n<code>android-key</code>：又是 Android 使用的格式</li>\n<li>\n<code>fido-u2f</code>：FIDO U2F 认证器使用的格式</li>\n<li>\n<code>tpm</code>：TPM 可信平台模块使用的格式</li>\n</ul>\n</li>\n<li>\n<code>attStmt</code>：证明对象，具体格式根据 <code>fmt</code> 的不同会有所不同</li>\n<li>\n<code>authData</code>：包含公钥、签名计数等来自认证器的数据</li>\n</ul>\n<p>诶，例子里的 <code>attStmt</code> 怎么是空的？还记得之前说的吗？大部分情况下，<strong>如果依赖方不要求证明，那么认证器不会签名挑战</strong>，于是 <code>fmt</code> 会变为 \"none\"，<code>attstmt</code> 会为空。如果不是高安全要求，我们可以只对这一种情况做支持。</p>\n<blockquote><p>注意，部分情况下 Firefox 会在不要求证明（即 <code>attestation</code> 为 \"none\"）时会返回 <code>fmt</code> 为 \"packed\" 的证明。<strong>这是符合规范的。</strong>此时认证器会进行自证明，你可以视情况进行处理。具体可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>对于非 \"none\" 的 <code>fmt</code> 我们稍后再谈，现在我们先来看看 <code>authData</code>。来复习一下 <code>authData</code> 的结构：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\" alt=\"authData 的结构\" width=\"1056\" height=\"384\" class=\"aligncenter size-full wp-image-2240\"></a>\n<p>对于它的解码比较简单粗暴，我们要做的就是根据图示将它切开，然后适当地转换类型。其中各部分的含义如下：</p>\n<ul>\n<li>\n<code>rpIdHash</code>：如其名，SHA-256 的 <code>rpId</code>，长度 32 字节</li>\n<li>\n<code>flags</code>：标识认证状态，长度 1 字节。其中 8 位分别为：\n<ul>\n<li>\n<code>ED</code>：是否有扩展数据</li>\n<li>\n<code>AT</code>：是否包含 <code>attestedCredentialData</code>。通常注册认证器时会包含 <code>attestedCredentialData</code>，而验证时不包含</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>\n<code>UV</code>：用户是否已验证</li>\n<li>保留位</li>\n<li>\n<code>UP</code>：用户是否在场</li>\n</ul>\n</li>\n<li>\n<code>signCount</code>：签名计数，长度 4 字节</li>\n<li>\n<code>attestedCredentialData</code>：包含公钥等凭据数据，变长。其结构如下：\n<ul>\n<li>\n<code>aaguid</code>：认证器的 AAGUID (Authenticator Attestation GUID)，对于同一型号的认证器，它们的 AAGUID 是相同的</li>\n<li>\n<code>credentialIdLength</code>：标识 <code>credentialId</code> 的长度，长度 2 字节</li>\n<li>\n<code>credentialId</code>：凭证 ID，和 <code>rawId</code> 一致，长度由 <code>credentialIdLength</code> 定义</li>\n<li>\n<code>credentialPublicKey</code>：CBOR 编码的 COSE 格式的凭证公钥，变长</li>\n</ul>\n</li>\n<li>\n<code>extensions</code>：扩展数据，变长，本文不讨论</li>\n</ul>\n<blockquote><p>出于隐私考虑，如果不要求证明，认证器会以 0 填充 AAGUID。</p></blockquote>\n<p>如果你的后端在使用 Node.js，这里有个工具函数可以帮你完成这一步（不考虑 <code>extensions</code>）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function parseAuthData(buffer){\r\n    let rpIdHash = buffer.slice(0, 32);\r\n    buffer = buffer.slice(32);\r\n  \r\n    let flagsBuf = buffer.slice(0, 1);\r\n    buffer = buffer.slice(1);\r\n\r\n    let flagsInt = flagsBuf[0];\r\n    let flags = {\r\n        up: !!(flagsInt &amp; 0x01),\r\n        uv: !!(flagsInt &amp; 0x04),\r\n        at: !!(flagsInt &amp; 0x40),\r\n        ed: !!(flagsInt &amp; 0x80),\r\n        flagsInt\r\n    }\r\n\r\n    let counterBuf = buffer.slice(0, 4);\r\n    buffer = buffer.slice(4);\r\n  \r\n    let counter = counterBuf.readUInt32BE(0);\r\n\r\n    let aaguid = undefined;\r\n    let credID = undefined;\r\n    let COSEPublicKey = undefined;\r\n\r\n    if(flags.at) {\r\n        aaguid = buffer.slice(0, 16);\r\n        buffer = buffer.slice(16);\r\n\r\n        let credIDLenBuf = buffer.slice(0, 2);\r\n        buffer = buffer.slice(2);\r\n\r\n        let credIDLen = credIDLenBuf.readUInt16BE(0);\r\n        credID = buffer.slice(0, credIDLen);\r\n\r\n        buffer = buffer.slice(credIDLen);\r\n        COSEPublicKey = buffer;\r\n    }\r\n\r\n    return {rpIdHash, flagsBuf, flags, counter, counterBuf, aaguid, credID, COSEPublicKey}\r\n}</pre>\n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>解开后，依赖方至少需要做四件事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>存储签名计数</li>\n<li>存储公钥</li>\n</ol>\n<blockquote><p>签名计数不一定从 0 开始。</p></blockquote>\n<p>对于公钥，也就是 <code>credentialPublicKey</code>，我们需要多一次 CBOR 解码，然后就可以得到类似这样的公钥：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    kty: \"EC\",\r\n    alg: \"ECDSA_w_SHA256\",\r\n    crv: \"P-256\",\r\n    x: \"ZGQALNfqo0L7HFYQHFHCS/X5db49z0ePnuQEs3w3X8w=\",\r\n    y: \"6qYxhnjYuez/Q8N6vX7nIIGfxFWdZ25NzQfZYuYOalA=\"\r\n}</pre>\n<p>然后可以选择适当的方法将其存储起来，之后的步骤本文就不再赘述了。现在，将目光拉回来，让我们看看包含证明的 <code>attestationObject</code> 是怎么样的。我们来看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"packed\",\r\n    attStmt: {\r\n        alg: -7,\r\n        sig: [48, 70, 2, 33, 0, ..., 132, 78, 46, 100, 21],\r\n        x5c: [\r\n            [48, 130, 2, 189, 48, 130, 1, 165, 160, 3, ..., 177, 48, 125, 191, 145, 24, 225, 169, 41, 248]\r\n        ]\r\n    },\r\n    authData: [211, 217, 43, 24, 199, ..., 158, 54, 87, 126, 54]\r\n}</pre>\n<p>这里有一个使用 \"packed\" 格式的证明。此时，<code>attStmt</code> 中包含三个值：</p>\n<ul>\n<li>\n<code>alg</code>：签名算法</li>\n<li>\n<code>sig</code>：签名值</li>\n<li>\n<code>x5c</code>：X.509 编码的证书链</li>\n</ul>\n<p>我们不会在这一节中详述对签名的验证。要了解更多信息，你可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。现在，让我们来看看如何处理验证过程中认证器发回的数据。我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"hmqdxPLit9...BWeVxZqdvU\",\r\n    type: \"public-key\",\r\n    rawId: \"hmqdxPLit9V...BWeVxZqdvU=\",\r\n    response: {\r\n        authenticatorData: \"09krGMcWTf...UFAAAABA==\",\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...XRobi5nZXQifQ==\",\r\n        signature: \"UsXZV3pvT3np8btj6V0g...WBkaqyt88DrD40qh+A==\",\r\n        userHandle: \"MmYxNWYzZjQyZjM...Tg2ZDY4NzhlNw==\"\r\n    }\r\n}</pre>\n<p><code>id</code>, <code>rawId</code> 和 <code>type</code> 和之前一样，这里就不再赘述了。让我们来看看 <code>response</code>。首先是 <code>clientDataJSON</code>，和之前的解法一样，要验证的内容也一样，只是 <code>type</code> 从 \"webauthn.create\" 变成了 \"webauthn.get\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"bnkd2CmrEuvKnAFXs2QlC3SKlg4XFvGtP4HJL1yEWyU\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.get\"\r\n}</pre>\n<p>然后是 <code>userHandle</code>。前面讲过，这是认证器在创建凭证时的用户 ID。如果用户在使用 U2F 认证器，很可能这一项为空，所以大部分情况下我们不关心这一项。</p>\n<p>接着来看 <code>authenticatorData</code>。这其实就是之前的 <code>attestedCredentialData</code>，只是这次不包含公钥。以相同的方式切开数据，我们应该可以得到 <code>rpIdHash</code>, <code>flags</code>和 <code>signCount</code> 三项。此时，依赖方至少需要做这三样事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>验证签名计数大于之前存储的计数，并更新存储的计数</li>\n</ol>\n<blockquote><p>如果签名计数比之前的小，那么这个认证器很可能是伪造的，应该中止验证并返回验证失败。同时，签名计数不一定每次按 1 递增，通常只要计数比此前的大就认为计数检查通过。</p></blockquote>\n<p>最后，我们来看 <code>signature</code>，也就是签名。不过这个签名不是简单的对挑战的签名，具体算法如图所示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\" alt=\"签名过程\" width=\"1034\" height=\"587\" class=\"aligncenter size-full wp-image-2231\"></a>\n<p>计算签名时，认证器会将 <code>authenticatorData</code> 与 <code>clientDataHash</code>（也就是 <code>clientDataJSON</code> 的 SHA-256 Hash）拼接起来，并使用对应的私钥签名。依赖方应该使用对应的公钥将其解密，并验证内容是否是 <code>authenticatorData</code> 与 <code>clientDataHash</code> 的拼接。这部分的计算不在本文的讨论范围内。</p>\n<p>最后，如果全部验证通过，返回验证成功。<span></span></p>\n<h2>验证认证器</h2>\n<p>WebAuthn 已经很安全了，但有的时候我们还要让它更安全一点。比如，如果用户在使用伪造的或是自制的认证器，认证器的安全性就得不到保证。此时，依赖方就需要验证认证器是否是可信的认证器。</p>\n<blockquote><p>这一过程仅发生在注册认证器时。此时，如果认证器验证通过，就可以存储公钥，后续步骤和之前描述的一致。</p></blockquote>\n<blockquote><p>再次说明，如果不是对安全性有极高的要求，向认证器索取证明以验证认证器是否可信是没有必要的。此外，验证认证器需要依赖方自行维护可信认证器列表，大大增加了维护的复杂性。</p></blockquote>\n<p>在调用 <code>navigator.credentials.create()</code> 时，我们可以将 <code>attestation</code> 设置为非 \"none\" 来向认证器索取证明。除无证明外，WebAuthn 定义了四种证明方式：</p>\n<ul>\n<li>Basic Attestation (Basic) ：基础的证明方式，认证器会使用认证器私钥签名</li>\n<li>Self Attestation (Self) ：自证明，认证器会使用凭证私钥签名</li>\n<li>Attestation CA (AttCA) ：认证器会使用多个证明私钥之一签名</li>\n<li>Elliptic Curve based Direct Anonymous Attestation (ECDAA) ：通过 <a href=\"https://en.wikipedia.org/wiki/Direct_Anonymous_Attestation\">DAA</a> 实现的匿名证明</li>\n</ul>\n<blockquote><p>和验证过程一样，这里签名的目标是 <code>authenticatorData</code> 和 <code>clientDataHash</code> 的连接。</p></blockquote>\n<p>还记得 <code>create()</code> 时 <code>attestation</code> 可选的三个值吗？这个值会决定认证器最终使用哪种方式进行证明。复习一下：</p>\n<ul>\n<li>\n<code>none</code>：大部分情况下认证器会选择不进行证明，部分认证器会进行自证明。此时 AAGUID 会被 0 填充</li>\n<li>\n<code>indirect</code>：认证器会试图通过替换 AAGUID 和选择合适的证明方式来进行匿名证明，具体方式由认证器选择</li>\n<li>\n<code>direct</code>：认证器会提供最直接的证明信息</li>\n</ul>\n<p>注意，大部分情况下，当认证器需要向依赖方证明自己可信时需要提供认证器公钥，<strong>这会触发浏览器提示，只有用户同意后认证器才会进行证明，否则认证器将不提供证明。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\" alt=\"浏览器提示\" width=\"446\" height=\"283\" class=\"aligncenter size-full wp-image-2217\"></a>\n<blockquote><p>为什么浏览器会说“安全密钥的品牌和型号”？事实上，为了避免用户通过认证器证书被跨依赖方追踪，FIDO 要求使用相同认证器证书的认证器的数量不能少于 100,000。于是大部分认证器厂商会选择<strong>让同一型号的认证器共用同一份证书。</strong>因此，浏览器的会询问用户是否同意“查看安全密钥的品牌和型号”。</p></blockquote>\n<blockquote><p>Android Safety Net 不会向用户询问是否同意，而是会静默进行证明。</p></blockquote>\n<p>当证明不为空时，依赖方收到数据后根据 <code>attestationObject.fmt</code> 的不同，需要选择不同的验证方式来验证认证器的可信情况。出于篇幅原因，这里我们不会讨论每一种 <code>fmt</code> 的验证方式，更多信息你可以查阅 <a href=\"https://www.w3.org/TR/webauthn/#defined-attestation-formats\">W3C 文档</a>。</p>\n<p>当 <code>fmt</code> 为 <code>packed</code> 时，<code>attestationObject.attStmt</code> 可能会有三种格式：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">// 自证明\r\n{\r\n    alg, // 算法\r\n    sig // 签名\r\n}\r\n// 基础或证明 CA 证明\r\n{\r\n    alg,\r\n    sig,\r\n    x5c // X.509 证书链\r\n}\r\n// 椭圆曲线证明\r\n{\r\n    alg,\r\n    sig,\r\n    ecdaaKeyId // ECDAA-Issuer 公钥标识符\r\n}</pre>\n<p>此时，依赖方需要检查证书符合预期格式并检查证书是否在可信链上。首先，如果证明中既没有 <code>ecdaaKeyId</code> 也没有 <code>x5c</code>，就说明这个证明使用的是自证明，只需使用认证器提供的公钥验证即可；如果有 <code>x5c</code>，那么就需要验证 <code>x5c</code> 中的证书是否在可信链上。将 <code>x5c</code> 中的每个证书以 Base64 编码，按 64 个字符切开，并在头尾加上 <code>-----BEGIN CERTIFICATE-----</code> 和 <code>-----END CERTIFICATE-----</code>就能得到一个证书字符串了。之后，依赖方需要验证证书是否可信。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function base64ToPem(b64cert){\r\n    let pemcert = '';\r\n    for(let i = 0; i \n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>至于 <code>ecdaaKeyId</code>，由于目前应用较少，处理方法可能需要你另寻资料了。检查证书的具体步骤已经超出了本文的范围，具体可以查阅<a href=\"https://medium.com/@herrjemand/verifying-fido2-packed-attestation-a067a9b2facd\">这篇文章</a>（英文）。</p>\n<blockquote><p>你可以在 <a href=\"https://fidoalliance.org/metadata/\">FIDO Metadata Service</a> 找到各大厂商认证器的可信证书链。</p></blockquote>\n<p>当在 Android 上调起 WebAuthn 时，大部分情况下 <code>fmt</code> 将会为 <code>safety-net</code>。此时 <code>attestationObject.attStmt</code> 的结构会是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    ver: \"200616037\",\r\n    response: {\r\n        type: \"Buffer\",\r\n        data: [101, 121, 74, 104, 98, ..., 115, 104, 104, 82, 65]\r\n    }\r\n}</pre>\n<p>此时，<code>clientDataJSON</code> 中还会出现 <code>androidPackageName</code> 键，值是调起 WebAuthn 验证的应用的包名，如 Chrome 就是 \"com.android.chrome\"。</p>\n<p>在这个证明中，<code>data</code> 其实是一个 JWT 字符串，我们可以将它编码为字符串并将其按照 JWT 进行解码（别忘了验证 JWT 签名）。最终我们会得到一个类似这样的 Payload：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    nonce: \"0QAurN4F9wik6GEkblDJhGuf4kuaqZn5zaaxlvD1hlA=\",\r\n    timestampMs: 1584950686460,\r\n    apkPackageName: \"com.google.android.gms\",\r\n    apkDigestSha256: \"2BQHno+bmWWwdLUYylS8HLt5ESJzci3nt2uui71ojyE=\",\r\n    ctsProfileMatch: true,\r\n    apkCertificateDigestSha256: [\r\n        \"8P1sW0EPicslw7UzRsiXL64w+O50Ed+RBICtay2g24M=\"\r\n    ],\r\n    basicIntegrity: true,\r\n    evaluationType: \"BASIC\"\r\n}</pre>\n<p>其中包含了有关设备状态的一些信息。比如说，如果 <code>ctsProfileMatch</code> 为 <code>false</code>，那么该设备很有可能被 root 了。对于高安全要求的场景，我们可以视情况进行验证。</p>\n<p>同时我们可以在 JWT Header 中验证证明的有效性。我们应该能取得这样的 Header：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    alg: \"RS256\",\r\n    x5c: [\r\n        \"MIIFkzCCBHugAwIBAgIR...uvlyjOwAzXuMu7M+PWRc\",\r\n        \"MIIESjCCAzKgAwIBAgIN...UK4v4ZUN80atnZz1yg==\"\r\n    ]\r\n}</pre>\n<p>这里的结构就和上方的 <code>x5c</code> 验证类似了。具体步骤可以参考<a href=\"https://medium.com/@herrjemand/verifying-fido2-safetynet-attestation-bd261ce1978d\">这篇文章</a>（英文）。</p>\n<p>其他所有格式的验证方式也都可以在<a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">这篇文章</a>（英文）中找到。<span></span></p>\n<h2>无用户名登录</h2>\n<p>认证器已经代替了密码，可是这还不够！在进行第一因素认证（即使用 WebAuthn 登录）时，我们还是需要输入用户名，然后才能进行身份认证。懒惰是第一生产力，我们能不能不输入用户名就进行身份认证呢？实际上，大部分认证器都允许我们无用户名登录。<strong>而这一特性的核心就是 Resident Key 客户端密钥驻留。</strong></p>\n<p>你可以思考一下，为什么普通的 WebAuthn 为什么不能实现无用户名登录？事实上，大部分认证器为了实现无限对公私钥，会将私钥通过 Key Warp 等技术加密后包含在凭证 ID 中发送给依赖方，这样认证器本身就不用存储任何信息。不过，这就导致需要身份认证时，依赖方必须通过用户名找到对应的凭证 ID，将其发送给认证器以供其算出私钥。</p>\n<blockquote><p>Yubikey 实现了一个基于 HMAC 的算法，认证器可以在私钥不离开认证器的前提下（常规的 Key Warp 算法中实际上私钥离开了认证器）通过一些输入和凭证 ID 重新计算私钥，你可以阅读<a href=\"https://www.yubico.com/blog/yubicos-u2f-key-wrapping/\">这篇文章</a>了解更多。</p></blockquote>\n<blockquote><p>客户端通过凭证 ID 查找对应认证器的算法根据系统的不同是不同的。通常凭证 ID 中会包含认证器信息，因此系统可以通过凭证 ID 找到对应的认证器。</p></blockquote>\n<p>要避免输入用户名，我们可以要求认证器将私钥在自己的内存中也存储一份。这样，依赖方无需提供凭证 ID，认证器就可以通过依赖方 ID 找到所需的私钥并签名公钥。以下是具体流程：</p>\n<p>注册时：</p>\n<ol>\n<li>依赖方请求新建凭证，同时要求启用客户端密钥</li>\n<li>认证器生成一对公私钥，并将私钥存储在永久内存中且与依赖方 ID 及用户 ID 绑定，随后将公钥发送给依赖方以供存储</li>\n<li>依赖方将用户 ID 即公钥与用户绑定</li>\n</ol><p>验证时：</p>\n<ol>\n<li>依赖方请求验证，但不必提供除依赖方 ID 以外的更多信息</li>\n<li>用户选择认证器</li>\n<li>认证器根据依赖方 ID 找到对应私钥</li>\n<li>如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录</li>\n<li>确定私钥后，认证器签名挑战并将其返回，同时返回用户 ID</li>\n<li>依赖方通过用户 ID 找到对应用户并用对应公钥检查签名，正确则允许对应用户登录</li>\n</ol><blockquote><p>可以看到，这个特性同时要求认证器存储用户 ID，即上面提到过的 <code>userHandle</code>。依赖方需要根据此信息找到对应用户，因此不支持 <code>userHandle</code> 的 U2F 认证器无法进行无用户名登录。</p></blockquote>\n<blockquote><p>如之前所说，<strong>认证器能永久存储的私钥数量是有限的</strong>，因此只应在真正需要无用户名登录的时候启用此特性。</p></blockquote>\n<blockquote><p>目前暂时没有办法检测认证器是否支持客户端密钥驻留，因此在无用户名验证失败时应 fallback 至常规的 WebAuthn 验证，即向用户询问用户名。</p></blockquote>\n<p>现在让我们来看看如何实现这一特性吧。首先，调用 <code>navigator.credentials.create()</code> 时我们需要注意两个参数：<code>requireResidentKey</code> 必须为 <code>true</code>，<code>userVerification</code> 必须为 \"required\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"5-6\">navigator.credentials.create({\r\n    publicKey: {\r\n        ...\r\n        authenticatorSelection: {\r\n            requireResidentKey: true,\r\n            userVerification: \"required\"\r\n            ...\r\n        },\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Windows Hello <strong>似乎</strong>会存储所有已注册的凭据，因此无论是否指定 <code>requireResidentKey</code>，你都可以通过 Windows Hello 进行无用户名登录。</p></blockquote>\n<p>随后，浏览器会询问用户是否允许认证器存储私钥。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\" alt=\"浏览器提示\" width=\"445\" height=\"285\" class=\"aligncenter size-full wp-image-2208\"></a>\n<p>如果用户同意，认证器会存储私钥，并和普通的 WebAuthn 一样返回信息。不过，依赖方收到数据之后，只需将公钥、用户 ID 与用户关联起来，而不必再将凭证 ID 与用户关联起来。至此注册完成。</p>\n<p>之后，在用户请求登录时，无需再向依赖方提供用户名。同时在传入 <code>navigator.credentials.get()</code> 的参数中也有两个需要注意：<code>userVerification</code> 必须为 \"required\"，同时 <code>allowCredentials</code> 必须为空。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"4-5\">navigator.credentials.get({\r\n    publicKey: {\r\n        ...\r\n        userVerification: \"required\",\r\n        allowCredentials: [],\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Android 暂不支持无用户名验证，空的 <code>allowCredentials</code> 会导致浏览器返回 <code>NotSupportedError</code> 错误。</p></blockquote>\n<p>此时，认证器会根据依赖方 ID 找到对应的私钥。如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录。用户选择后，认证器就会使用对应的私钥签名挑战并将其返回。此时，<code>userHandle</code> 一定不为空。</p>\n<p>依赖方收到数据后，需要将 <code>userHandle</code> 作为用户 ID 找到对应的用户，并使用对应的公钥验证签名。如果验证成功，则认为对应的用户身份认证成功，依赖方可以允许其登录。至此验证结束。</p>\n<blockquote><p>有的时候你可能会需要清除认证器中的密钥。绝大多数认证器都提供了对应的软件以供清除存储的密钥，但大部分情况下这会重置整个认证器，这意味着相关认证器此前的所有凭证均会失效。因此建议不要将日常使用的认证器作为开发测试用的认证器。</p></blockquote>\n<h2>从 U2F 认证迁移</h2>\n<p>如果你的服务此前提供了 U2F 第二因素认证，你可能会希望在将依赖方从 U2F 升级到 WebAuthn 时用户此前注册的 U2F 认证器仍然可用而无需重新注册。由于 WebAuthn 向后兼容 U2F 设备，用户是可以继续使用原有的 U2F 认证器的。不过，由于 WebAuthn 的依赖方 ID 与 U2F 的 <code>appid</code> 并不一定相同，你需要将原有的 U2F <code>appid</code> 随 WebAuthn 流程一起传递给认证器，认证器才能使用正确的私钥进行响应。</p>\n<p>要实现这一点，我们只需要在注册及认证仪式中使用 WebAuthn 的 <code>appid</code> 扩展。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    appid: \"https://example.com\" //U2F appid\r\n}</pre>\n<p>此时认证器便可以得到正确的私钥，之后的流程与正常情况一致；依赖方除了正常的 WebAuthn 流程外，不需要再做任何其它操作。</p>\n<h2>拓展阅读</h2>\n<p>我们的 WebAuthn 之旅到这里就真的结束了。不过，你仍然可以自行探究，了解更多。<strong>本文只是一个粗浅的使用指南</strong>，而被称为“Web 身份认证的未来”的 WebAuthn 的深层还要很多细节值得我们挖掘学习，不过本文不会再继续讨论了。</p>\n<p>如果你想了解更多关于 WebAuthn 的信息，最好的方法是直接阅读 <a href=\"https://www.w3.org/TR/webauthn\">W3C 规范</a>。此外，Yubico 也提供了不错的 <a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn 文档</a>。</p>\n<p>要了解更多认证器存储凭证的信息，你可以阅读<a href=\"https://duo.com/labs/tech-notes/how-security-keys-store-credentials\">这篇文章</a>（英文）。</p>\n<p>如果你想了解更多 Android Safety Net 是怎样运作的，可以观看<a href=\"https://youtu.be/8lv_9mydrjg\">这个视频</a>，并通过 <a href=\"https://developer.android.com/training/safetynet/attestation\">Google 的文档</a>了解 Android Safety Net 的更多信息。</p>\n<p>如果你想方便地调试 WebAuthn，<a href=\"https://webauthn.me/\">webauthn.me</a> 提供了一个非常直观方便的<a href=\"https://webauthn.me/debugger\">调试器</a>。</p>\n<h1>参考资料</h1>\n<p><a href=\"https://www.w3.org/TR/webauthn\">WebAuthn Level 1 规范 - W3C</a><br><a href=\"https://github.com/w3c/webauthn\">WebAuthn Level 2 草案 - W3C</a><br><a href=\"https://blog.techbridge.cc/2019/08/17/webauthn-intro/\">一起来了解Web Authentication - TechBridge 技术共笔部落格</a><br><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\">Introduction to WebAuthn API - Medium</a><br><a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">WebAuthn/FIDO2: Verifying responses - Medium</a><br><a href=\"https://obeta.me/posts/2019-03-01/WebAuthn%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8\">WebAuthn介绍与使用 - obeta</a><br><a href=\"https://webauthn.io/\">webauthn.io</a><br><a href=\"https://webauthn.guide/\">webauthn.guide</a><br><a href=\"https://webauthn.me/\">webauthn.me</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion\">Attestation and Assertion - MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Authentication_API\">Web Authentication API - MDN</a>（顺便翻译了一半）<br><a href=\"https://fidoalliance.org/fido-technotes-the-truth-about-attestation/\">FIDO TechNotes: The Truth about Attestation - FIDO Alliance</a><br><a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn Developer Guide - Yubico</a><br><a href=\"https://en.wikipedia.org/wiki/WebAuthn\">WebAuthn - Wikipedia</a><br><a href=\"https://techcommunity.microsoft.com/t5/identity-standards-blog/all-about-fido2-ctap2-and-webauthn/ba-p/288910\">All about FIDO2, CTAP2 and WebAuthn - Microsoft Tech Community</a><br><a href=\"https://webauthn-doc.spomky-labs.com/\">Webauthn Framework</a><br><a href=\"https://zhuanlan.zhihu.com/p/25279015\">如何开发支持 FIDO U2F 登录的网站 - 知乎专栏</a><br></p></pre>\n","link":"https://flyhigher.top/develop/2160.html"},{"title":"NLP 找门：用朴素贝叶斯进行文本分类","date":"2020-01-29 11:39:58","description":"\n<blockquote>\n<p>有一天，神收到了一封垃圾邮件，于是世界上就有了朴素贝叶斯算法。</p>\n<footer>——我瞎编的</footer>\n</blockquote>\n<p>为什么这篇文章的标题是 NLP 找门呢？因为如果你看完了这篇文章，你就可以<strong>准备入门</strong>自然语言处理 (<strong>N</strong>atural <strong>L</strong>anguage <strong>P</strong>rocessing) 了。我会把这篇文章当作一篇彻彻底底的 NLP 入门文章来写，尽量避免“专业高端”词汇和“全是奇怪符号”的式子，这样<strong>只要你有高中数学基础</strong>，就能毫无压力地看完这篇文章，学会使用朴素贝叶斯分类算法分类文本。</p>\n<p>让我们开始吧。</p>\n<h1>所以，啥是朴素贝叶斯？</h1>\n<p>简单来说，朴素贝叶斯 (Naïve Bayes) <strong>是一个简单但高效的分类算法</strong>，在进行不复杂的文本分类时高效且拥有不低的准确度，判断垃圾邮件就是用朴素贝叶斯进行文本分类的一个经典例子。当然朴素贝叶斯分类不仅能用在 NLP 中，在许多分类问题中朴素贝叶斯也有非常好的效果，但我们今天只关注它在 NLP 中的应用。</p>\n<p>要了解朴素贝叶斯，我们要先来了解一下贝叶斯定理。</p>\n<blockquote>\n<p>每增加一个数学公式都会使读者减半。</p>\n<footer>——霍金</footer>\n</blockquote>\n<p>那么，就让我们先来看看贝叶斯定理的公式吧（笑</p>\n<p>$$P(A|B) = \\frac{P(AB)}{P(B)} = \\frac{P(B|A)P(A)}{P(B)}$$</p>\n<p>其实还是很简单的，运用高中的条件概率知识就能理解。本质上，贝叶斯定理给出了一种方法，使得我们可以在 \\(P(A|B)\\) 和 \\(P(B|A)\\) 之间互相转换，因为通常情况下它们是不一样的。</p>\n<p>要更好地理解，请考虑这样一个例子：</p>\n<blockquote><p>假设有一个学校图书馆，图书管理员正为找不到某本书而发愁。已知老师有 70% 的意愿借走这本书，而是学生的意愿是 30%，这个学校的师生比例是 1:10，那么借走这本书的人是老师的概率有多大？</p></blockquote>\n<p>设学校总人数为 \\(T\\)，我们可以很容易地写出这样的一个式子：</p>\n<p>$$\\begin{align} P &amp; = \\frac{T\\cdot\\frac{1}{11}\\cdot 70\\%}{T\\cdot\\frac{1}{11}\\cdot 70\\%+T\\cdot\\frac{10}{11}\\cdot 30\\%} \\\\ &amp; = \\frac{70\\%}{70\\%+10\\times30\\%} \\\\ &amp; = \\frac{7}{37} \\end{align}$$</p>\n<p>这就是贝叶斯定理了！等等，你可能会挠挠头，这哪里是贝叶斯了？别急，如果我们把最上面的式子换个字母的话...</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>在这里，\\(H\\) 指 Hypothesis，即假设，而 \\(E\\) 指 Evidence，即证据。这样，这个式子就很好理解了，在我们上面的例子里，借走书是证据，那么 \\(P(E)\\) 就是某个人选择借走这本书的概率；这个人是老师是假设，那么这个人是老师的概率是 \\(P(H)\\)。<strong>注意这里的概率指在学校中抽一个人是老师的概率，并不是“在借走书的前提下”这个人是老师的概率</strong>，而“在借走书的前提下”这个人是老师的概率应该是 \\(P(H|E)\\)，也正是我们要求的概率。同样地，而“这个人是老师”的前提下借走书的概率就是 \\(P(E|H)\\) 了。</p>\n<p>那么再来看看上面我们凭小学知识就列出的计算式，如果把里面的具体数据换成概率来表示的话，这个式子就会变成...</p>\n<p>$$P(H|E) = \\frac{T\\cdot P(E|H)P(H)}{T\\cdot P(E|H)P(H) + T\\cdot P(E|\\neg H)P(\\neg H)}$$</p>\n<p>好吧，这里解释一下，\\(\\neg\\) 符号表示“非”，所以 \\(P(E|\\neg H)\\) 表示在“这个人不是老师”的前提下借走书的概率。而 \\(T\\cdot P(E|H)P(H)\\) + \\(T\\cdot P(E|\\neg H)P(\\neg H)\\)，即“可能借走书的老师的数量 + 可能借走书的学生的数量”，就是“可能借走书的人的数量”了，也就是 \\(T\\cdot P(E)\\)。上下消去 \\(T\\)，我们就能得到上面的式子了。</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>这就是贝叶斯了定理。如果你还是不太清楚，可以去看看 3Blue1Brown 的<a href=\"https://www.bilibili.com/video/av84799361\">这个视频</a>，图形化的讲解会清晰很多。</p>\n<p>这里我要提一下这个式子里各部分的专有名称了（“专业高端”词汇警告），你可以不记住，直接看后面。</p>\n<ul>\n<li>\\(P(H|E)\\) 叫做 \\(H\\) 的<strong>后验概率</strong>，反之亦然</li>\n<li>\\(P(H)\\) 叫做 \\(H\\) 的<strong>先验概率</strong>，反之亦然</li>\n<li>特别地，我们把 \\(P(E|H)\\) 称作<strong>“似然值”</strong>，即 likelihood</li>\n</ul>\n<p>那什么是朴素贝叶斯呢？按上面所说的，朴素贝叶斯是一种分类算法。简单来说，朴素贝叶斯将一个对象的各个特征考虑为互相独立，然后根据这些特征的概率的乘积来判断对象所属的分类。基本原理如下：</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)} \\propto P(E|H)P(H) = P(H)\\prod_{i}P(W_i|H)$$</p>\n<p>在这里，\\(W_i\\) 指某一对象的第 \\(i\\) 个特征，对于文本分类来说，这就是一段文本中的某个单词。</p>\n<p>朴素贝叶斯之所以“朴素”，是因为它要求<strong>各个特征间是独立的</strong>，在文本分类中也就是各个单词之间互不干扰。虽然思路简单的代价是适用范围变窄，不过由于这样的简化在很多情况下已经足够了，因此实际上朴素贝叶斯的应用范围非常广。<del>你看朴素贝叶斯 <strong>N</strong>aïve <strong>B</strong>ayes 的缩写都是 NB 了，能不厉害吗（逃</del></p>\n<h1>那么，咋分类啊</h1>\n<p>看来你这下完全听懂了呢（笑），是时候看看如何在 NLP 中应用朴素贝叶斯了。和上面一样，我们用一个具体的例子来说明。我们的目标是让电脑学会分类美国共和党和民主党的演讲稿，由于两个党派的演讲风格不同，所以这样的分类在理论上是可行的。</p>\n<div class=\"wp-block-file\">\n<a href=\"https://acdn.flyhigher.top/nlp/material.zip\" download>material.zip</a><a href=\"https://acdn.flyhigher.top/nlp/material.zip\" class=\"wp-block-file__button\" download>下载</a>\n</div>\n<p>上面我们要用到的数据集，你可以下载下来一起动手玩一玩。先说一下数据集的数据结构吧，压缩包里有两个文件，<code>train.txt</code> 将会被当作训练数据集，而 <code>test.txt</code> 则会作为训练结束后的验证数据集。两个文本文件里数据的结构是类似的，就像这样：</p>\n<pre class=\"EnlighterJSRAW\">BLUE WELL I AM SO HONORED AND PERSONALLY UNKNOWNWORD TO BE HERE...\r\nRED THANK YOU . THIS IS QUITE AN INSTITUTION . IT'S GOOD TO BE...</pre>\n<p>每行都是一篇演讲稿，每行的第一个单词指明了这篇演讲稿所属的党派，<code>RED</code> 指共和党，而 <code>BLUE</code> 指民主党。所有单词和符号都已经被转为大写并由空格分隔方便处理。<code>train.txt</code> 有共和党演讲稿和民主党演讲稿各 23 篇，<code>test.txt</code> 有 6 篇共和党演讲稿，12 篇民主党演讲稿。</p>\n<p>明白了？那我们就开始吧。</p>\n<h2>捋捋思路</h2>\n<p>首先，我们需要考虑如何在文本分类中应用朴素贝叶斯。很简单，按朴素贝叶斯的思路，<strong>计算每个词在某一分类下的出现概率，然后将某篇文章的所有词的概率相乘，再乘以该分类的先验概率，就可以得到某篇文章在某一分类下的概率。</strong></p>\n<p>$$P(Class|Article) = P(Class)\\prod_{i}P(Word_i|Class)$$</p>\n<p>各个分类概率都计算完成后，概率最高的那个分类就是这篇文章可能所属的分类。这个思路的核心就是用词决定了文本风格，文本的不同类别用词会有差异，只要能量化这些差异就可以分类文本。在我们的例子中，我们可以从 <code>train.txt</code> 中统计各个词汇的出现情况，然后用 <code>test.txt</code> 中的数据按上面的算法验证我们算法的准确性。</p>\n<p>这个思路很简单也很清晰，但还有一些问题需要解决。<strong>第一，有的时候，我们的测试数据集中可能会出现一个在训练数据集中没有出现过的词语。这个时候，朴素贝叶斯的计算结果会是 0。</strong>如果我们把 0 乘进式子中，那就别想得到正常的结果了。所以，我们还需要对计算某一单词在某一分类中的式子稍加改进。使用拉普拉斯平滑，就可以避免出现概率为 0 的情况。别被名字吓到，拉普拉斯平滑是一种非常简单的平滑方法：在分子上 +1，在分母上加整个取值范围，这样就可以给整个分式加上非常微小的偏移，避免出现 0。</p>\n<p>$$\\begin{align} P(Word_i|Class) &amp; = \\frac{Word_iCountInClass}{AllWordCountInClass} \\\\ &amp; \\approx \\frac{Word_iCountInClass + 1}{AllWordCountInClass + UniqueWordCount} \\end{align}$$</p>\n<p><strong>第二，对于长文本，大部分词语在某一分类中的出现概率是远小于 1 的，加上长文本词汇量大，往往概率相乘的结果会非常小。</strong>受限于计算机处理浮点数的原理，精确处理这么小的数字是很麻烦的。幸好，运用一些简单的数学知识就可以将其转化为更精确的表达，<strong>那就是取对数。</strong></p>\n<p>首先，将概率计算结果取对数并不影响我们的计算结果。因为取对数是一个单调递增的操作，而我们计算概率只是为了排序选择概率最高的分类，因此取对数是不影响我们排序的。而把多项式取对数，等于把多项式的每一项取对数后相加。所以我们有：</p>\n<p>$$\\lg{\\Big(P(Class)\\prod_{i}P(Word_i|Class)\\Big)} = \\lg{P(Class)} + \\sum_i\\lg{P(Word_i|Class)}$$</p>\n<p>大部分情况下，在每一次取对数的时候，要取对数的数字的大小，即 \\(P(Word_i|Class)\\) 尚还在计算机能处理的范围内，<strong>因此我们可以放心地使用取对数的方法</strong>，避免计算机精度不够影响结果。</p>\n<p><strong>第三就是在某些情况下，可能会有部分词语干扰计算结果</strong>，如 and, is 这类的被大量使用的中性词。如果希望得到更好的结果，我们可以维护一个停用词表，在计算时排除停用词即可。或者，我们可以在计算完每个单词的出现数量后，排除数量最多的前 \\(N\\) 个单词，避免这些单词过多地影响计算。</p>\n<h2>写点代码</h2>\n<p>现在我们终于可以开始实战，写点代码了。我会用简单的 Python 来表达思路。好了，理一理思绪，第一步我们要做的，是统计训练数据集中的用词情况。具体来说，根据上面的思考，我们需要统计的有：</p>\n<ul>\n<li>每个单词在各分类中出现的数量</li>\n<li>各分类中的不重复词数量</li>\n</ul>\n<p>用 Python 简单表示如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\"># 读入数据过程略...\r\ndata_raw = \"读入的数据\".split('\\n') # 按行分隔\r\ndata_blue = []\r\ndata_red = []\r\nword_count_blue = {}\r\nword_count_red = {}\r\n\r\nfor line_data in data_raw:\r\n    word_list = line_data.split(\" \") # 分隔单词\r\n    if word_list[0] == \"BLUE\":\r\n        for i in range(1,len(word_list)):\r\n            if not is_excluded(word_list[i]): # 判断是否为停用词\r\n                data_blue.append(word_list[i])\r\n                # 统计单词出现次数\r\n                word_count_blue.setdefault(word_list[i], 0)\r\n                word_count_blue[word_list[i]] += 1\r\n    elif word_list[0] == \"RED\":\r\n        # Class = red 时同理...\r\n\r\n#统计非重复词\r\nunique_words_blue = list(set(data_blue))\r\nunique_words_red = list(set(data_red))</pre>\n<p>训练过程到这里就结束了，计算机已经知道了各政党演讲的用词习惯。很简单吧？接下来我们就要使用测试数据集来测试准确度了。<strong>这里开始就涉及到朴素贝叶斯的计算了</strong>，可能会稍微复杂一点点。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">import math\r\n#读入测试数据过程略...\r\ntest_data_raw = \"读入的数据\".split('\\n') # 按行分隔\r\ntest_data = []\r\n\r\nfor line_data in test_data_raw:\r\n    if line_data[0] == \"BLUE\":\r\n        content_data = line_data.split(\" \").pop(0)\r\n        test_data.append({\"class\": \"blue\", \"content\": content_data})\r\n    elif line_data[0] == 'RED':\r\n        # ...\r\n\r\nfor line_data in test_data:\r\n    posibility_blue = 0\r\n    for word in line_data[\"content\"]:\r\n        # 计算各单词概率，取对数后相加，使用了拉普拉斯平滑\r\n        if word in word_count_blue:\r\n            posibility_blue += math.log((word_count_blue[word]+1)/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n        else:\r\n            posibility_blue += math.log(1/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n    # 最后加上该分类概率的对数\r\n    posibility_blue += math.log(len(data_blue)/(len(data_blue)+len(data_red)))\r\n\r\n    # 计算 Red 同理...</pre>\n<p>计算完成后，我们就得到每篇演讲稿在各分类下的概率了。之后，简单的比较就能得出推断的分类：如果 \\(P(Red|Article)\\) 大于 \\(P(Blue|Article)\\)，那么这篇演讲稿就更可能是共和党的演讲稿，反之则是民主党的演讲稿。</p>\n<p>很好理解吧？那么这么简单的思路，准确性怎么样呢？对于我们的例子，这是我设置了个别停用词后的结果：</p>\n<pre class=\"EnlighterJSRAW\">+-----+-------+--------------+--------------+-------+-------+\r\n|   ID|  Class|        P(Red)|       P(Blue)|  Guess| Status|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|    1|   Blue|  -23204.68377|  -22998.67066|   Blue|      √|\r\n|    2|   Blue|  -16438.44625|  -16137.48257|   Blue|      √|\r\n|    3|   Blue|  -33468.81214|  -32567.61801|   Blue|      √|\r\n|    4|   Blue|    -8606.2193|   -8601.50426|   Blue|      √|\r\n|    5|   Blue|  -12430.97436|  -11935.70662|   Blue|      √|\r\n|    6|   Blue|  -44033.02883|  -43877.55367|   Blue|      √|\r\n|    7|   Blue|   -16947.2851|  -16758.57542|   Blue|      √|\r\n|    8|   Blue|  -26957.26997|  -26889.62444|   Blue|      √|\r\n|    9|   Blue|  -27503.73985|  -27249.21828|   Blue|      √|\r\n|   10|   Blue|   -20528.4457|   -19991.1248|   Blue|      √|\r\n|   11|   Blue|  -20337.96493|  -19860.12831|   Blue|      √|\r\n|   12|   Blue|  -28409.28489|  -28118.98017|   Blue|      √|\r\n|   13|    Red|  -13756.01015|  -14488.11751|    Red|      √|\r\n|   14|    Red|  -17221.22732|  -17710.15936|    Red|      √|\r\n|   15|    Red|  -17397.45136|  -17899.98659|    Red|      √|\r\n|   16|    Red|  -10724.69095|  -11092.77837|    Red|      √|\r\n|   17|    Red|  -10402.40027|  -10859.48681|    Red|      √|\r\n|   18|    Red|   -9371.53792|    -9669.6769|    Red|      √|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|                                      Total: 18/18, 100.0% |\r\n+-----------------------------------------------------------+</pre>\n<p><strong>100% 的准确率哦！</strong>事实上，对于我们的这个例子，就算不设置停用词，我们仍能达到 100% 的分类准确率。朴素贝叶斯分类的确很 NB 呢。</p>\n<h1>更进一步</h1>\n<p>我们的探索到这里就结束了，但如果你有兴趣，完全可以继续探索下去。我们的例子是一个非常简化的例子，在实际情况中，还有很多问题需要解决。比如，对于中文及类似语言，不存在拉丁语系的天然分词结构，而朴素贝叶斯的文本分类是基于单词的，那么<strong>中文的分词就会是个问题；</strong>再比如，对于朴素贝叶斯分类来说，<strong>词语之间的顺序是不影响分类结果的</strong>，但这就会导致“今天心情很好，但昨天不好”和“昨天心情很好，但今天不好”在朴素贝叶斯看来是一样的，要想获得更好的结果，我们必须<strong>考虑词语的顺序。</strong></p>\n<p>这些问题，今天我们就不再深究了，但你可以自己探索。比如，引入思路同样很简洁的马尔科夫链，我们就可以让计算机学会考虑词语间的顺序，不过那就会是另一个话题了。</p>\n","link":"https://flyhigher.top/develop/1989.html"},{"title":"MDx 中增强页面可访问性的细节","date":"2020-01-25 16:45:04","description":"\n<blockquote><p>这篇文章本来是打算发在 <a href=\"https://mdxblog.flyhigher.top/\">MDx Blog</a> 的，不过写到后来发现这篇文章相对来说还是有价值的，于是就将这篇文章转移到了无垠，MDx Blog 则不再发表这篇文章。</p></blockquote>\n<p>从 MDx 开发之初，增强页面的可访问性就被列为了一个重要目标。从 HTML 语义化，到 ARIA 地标，再到 <code>prefers-reduced-motion</code>，随着浏览器对于增强页面可访问性的支持功能越来越多，MDx 也在不断地更新，让更多的人都能毫无困难地浏览、查看由 MDx 渲染的网页。本文会详细说明一些 MDx 中增强页面可访问性的细节，<strong>如果你希望增强自己开发的网页的可访问性，本文可能会对你有所帮助。</strong></p>\n<h1>基础性增强</h1>\n<p>增强可访问性，最重要也是最基础的一点就是 HTML 语义化。通过使用 HTML 5 语义化标签和 ARIA Role 标签，我们可以很方便地<strong>将整个网页在语义上分为几部分，而这将有效地改善屏幕阅读器对网页的分析质量，使视力障碍用户更好地浏览网页。</strong></p>\n<h2>HTML 语义化</h2>\n<p><strong>HTML 语义化属于增强页面可访问性的基础中的基础。</strong>通过使用语义化的 HTML 标签，我们可以方便地为网页中的各部分标记功能而不影响页面样式。随着符合 HTML 5 的现代化网页成为主流，语义化标签已被很大一部分网站所支持，我也不过多赘述了。就举几个常用的“地标性”标签吧：</p>\n<ul>\n<li>\n<code>header</code> 标签标记页眉，默认样式同 <code>div</code>，不要把它和 <code>head</code> 搞混了</li>\n<li>\n<code>main</code> 标签标记页面的主要内容，默认样式同 <code>div</code>\n</li>\n<li>\n<code>article</code> 标签标记文章（在 HTML 5 中它指任何独立或可复用的文本），默认样式同 <code>div</code>\n</li>\n<li>\n<code>footer</code> 标签标记页脚，默认样式同 <code>div</code>\n</li>\n<li>\n<code>nav</code> 标签标记页面导航栏区域，默认样式同 <code>div</code>\n</li>\n<li>\n<code>aside</code> 标签标记侧栏，默认样式同 <code>div</code>\n</li>\n<li>\n<code>section</code> 标签标记“一组内容”，你可以把它看作是划定网页中一块区域的通用标签，默认样式同 <code>div</code>\n</li>\n</ul>\n<p>只要用这些标签替代 <code>div</code> 而不是无脑使用 <code>div</code> 就能提高页面的可访问性。MDx 使用了这些标签来增强页面的可访问性。</p>\n<h2>下一步，ARIA</h2>\n<p>有的时候，出于一些原因，我们没法使用语义化的 HTML 标签，或者没有合适的语义化标签来标记内容，这时候<strong>我们就需要使用 ARIA (Accessible Rich Internet Applications，可访问的富互联网应用)。</strong>ARIA 的基础用法很简单，只要在相应元素上加上 <code>role</code> 属性指定该元素的功能即可。下面是一个简单的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;div role=\"navigation\"&gt;\r\n  &lt;ul&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page A&lt;/a&gt;&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page B&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page C&lt;/a&gt;&lt;/li&gt;\r\n  &lt;/ul&gt;\r\n&lt;/div&gt;</pre>\n<p>通过 <code>role=\"navigation\"</code>，我们把一个 <code>div</code> 标记为了导航栏区域。实际上，对屏幕阅读器来说，这和 <code>nav</code> 标签在语义上是一致的。上一节中的例子都可以分别用以下 ARIA Role 表示：</p>\n<ul>\n<li><code>role=\"heading\"</code></li>\n<li><code>role=\"main\"</code></li>\n<li><code>role=\"article\"</code></li>\n<li><code>role=\"contentinfo\"</code></li>\n<li><code>role=\"navigation\"</code></li>\n<li><code>role=\"complementary\"</code></li>\n<li><code>role=\"region\"</code></li>\n</ul>\n<p>除此以外，MDx 还使用了 <code>role=\"banner\"</code> 和 <code>role=\"search\"</code> 来分别标记页面中的顶部栏和搜索表单。另外，<strong>有的时候 <code>role</code> 属性还需配合 <code>aria-*</code> 属性一同使用</strong>，具体规则比较复杂，我就不在这里赘述了，具体可参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">WAI-ARIA Roles - MDN</a>。</p>\n<h1>媒体查询来帮忙</h1>\n<p>CSS 的媒体查询其实是一个非常强大的特性，<strong>妥善利用其中的一些特性，我们可以在网页外观上大大增强网页的可访问性。</strong>除了已经烂大街的“对浏览器窗口大小”响应的媒体查询，我会介绍 3 个很少有网站充分利用的媒体查询。</p>\n<h2>print</h2>\n<p><code>print</code> 媒体查询其实已经“历史悠久”了，<strong>只要使用 <code>@media print {...}</code> 就可以创建只在打印页面时生效的样式。</strong>通过这种方式，我们可以让页面在打印时应用一套为打印优化的样式，增强页面在物理纸张上的可访问性。</p>\n<blockquote><p>维基百科是对打印样式做了单独适配的著名例子。</p></blockquote>\n<p><strong>由于在打印的情况下，页面已经离开了“可交互”的范围，还有分页这种在屏幕中无需考虑的问题，要让页面在物理纸张上仍能被轻松地阅读，我们需要做一些特殊的适配。</strong>直接来看一个例子吧。以下是 MDx 针对打印情况进行的一些特殊优化，样式的具体理由已经写在了注释中。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media print {\r\n    /*隐藏不必要的元素*/\r\n    header, .mdx-ad-after-article, .mdx-ad-in-article, .mdx-post-money, .page-footer-nav, .mdx-same-posts, .spanout button, .mdui-drawer, .mdui-overlay, .mdui-menu, .mdx-share-img-dialog, .mdx-share-wechat-dialog {\r\n        display: none!important;\r\n    }\r\n\r\n    /*使用下划线标记链接*/\r\n    article a {\r\n        text-decoration: underline!important;\r\n    }\r\n    /*由于纸张不可交互，在链接后显示链接到的 URL*/\r\n    article a::after {\r\n        content: \"(\" attr(href) \")\";\r\n    }\r\n\r\n    /*强制白底黑字*/\r\n    html &gt; body {\r\n        background-color: white!important;\r\n    }\r\n    article p {\r\n        color: rgba(0,0,0,.8)!important;\r\n    }\r\n\r\n    /*对于纸张上的长文章，衬线字体拥有更好的可读性。以下字体列表来自 fonts.css*/\r\n    article {\r\n        font: 13pt Georgia, \"Nimbus Roman No9 L\", \"Songti SC\", \"Noto Serif CJK SC\", \"Source Han Serif SC\", \"Source Han Serif CN\", STSong, \"AR PL New Sung\", \"AR PL SungtiL GB\", NSimSun, SimSun, \"TW\\-Sung\", \"WenQuanYi Bitmap Song\", \"AR PL UMing CN\", \"AR PL UMing HK\", \"AR PL UMing TW\", \"AR PL UMing TW MBE\", PMingLiU, MingLiU, serif!important;\r\n    }\r\n\r\n    /*除部分元素外，禁止在元素内部分页*/\r\n    * {\r\n        page-break-inside: avoid;\r\n    }\r\n    article p, article a, #comments, article {\r\n        page-break-inside: auto;\r\n    }\r\n}</pre>\n<p>MDx 自 1.9.3 版本起已经包含了对文章页的打印样式优化。可以很容易地看出，优化后的样式在物理纸张上将更容易阅读。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\" alt=\"\" width=\"1345\" height=\"1602\" class=\"aligncenter size-full wp-image-1959\"></a>\n<h2>prefers-color-scheme</h2>\n<p><code>prefers-color-scheme</code> 是最近才被浏览器广泛支持的一个媒体查询，但它的功能却很强大：<strong>响应系统级黑暗模式。</strong>这样，我们可以在开启黑暗模式的系统中让网页具有更好的可读性。不过由于这个媒体查询直到最近才被广泛支持，因此大部分网站对此并没有进行适配。</p>\n<blockquote><p>一些适配这一特性的网站：少数派、微信公众平台（文章页）等。</p></blockquote>\n<p>通过像这样的媒体查询，我们可以在系统启用黑暗模式时让页面实时响应：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    body {\r\n        background-color: #212121;\r\n        color: rgba(255, 255, 255, .7);\r\n    }\r\n}</pre>\n<p><code>prefers-color-scheme</code> 一共有 3 个可能值：<code>no-preference</code>, <code>light</code> 和 <code>dark</code>。你也可以不像上面的例子那样默认使用亮色样式并在黑暗模式下启用黑暗样式，而可以反过来将黑暗样式作为默认，用亮色样式覆盖。在不支持的浏览器上将会显示默认样式（即媒体查询不会生效）。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<h2>prefers-reduced-motion</h2>\n<p>看名字就猜得出，<code>prefers-reduced-motion</code> 是和 <code>prefers-color-scheme</code> 师出同门的媒体查询。因此，和 <code>prefers-color-scheme</code> 一样，它也是在最近才获得了浏览器的广泛支持。它的作用也很强大：<strong>响应系统的“减弱动态效果”模式。</strong>这对某些不喜欢甚至无法接受动画的用户可能很有帮助。要知道，对有些用户来说这甚至是医疗上的必要。使用如下的媒体查询，我们可以在系统启用减弱动态效果模式时让页面实时响应，减弱动画：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-reduced-motion: reduce) {\r\n    /*只是一个示例，实际情况中可以保留一些淡入淡出效果*/\r\n    * {\r\n        transition: all 0s!important;\r\n        transform: none!important;\r\n    }\r\n}</pre>\n<p><code>prefers-reduced-motion</code> 只有 2 个可能值：<code>no-preference</code> 和 <code>reduce</code>，在不支持的浏览器上该媒体查询不会生效。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\" alt=\"\" width=\"792\" height=\"515\" class=\"aligncenter size-full wp-image-1962\"></a>\n<h1>黑暗模式适配</h1>\n<p>黑暗模式可不是简单地切换到黑底白字这么简单。<strong>单纯地使用黑底白字会导致页面元素之间对比度过高，文字刺眼，反而降低了页面的可访问性。</strong>我在下面总结了几条应用在了 MDx 中的黑暗模式优化规则和 Google 推荐的优化规则：</p>\n<p><strong>一是避免黑底白字。</strong>黑底白字看起来真的很难受，事实上，深灰和浅灰是黑暗模式最好的配色。比较下方例子里的两段文本，毫无疑问深灰色背景和浅灰色文字搭配的样式的可读性要比黑底白字高很多。（p.s. 有时候这条规则在白底黑字时也适用）</p>\n<p><strong>二是更改部分元素的亮度和对比度以增强可读性。</strong>你可能已经注意到了，下面优化的例子里标题文字的颜色改变了。很明显，未优化的黑暗模式中标题可读性不如优化的版本。在实际中，我们通常可以通过 CSS 滤镜来实现这一更改。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    h1 {\r\n        /*反相颜色后再将色相旋转 180 度，使亮度反相*/\r\n        filter: invert(1) hue-rotate(180deg);\r\n    }\r\n}</pre>\n<p><strong>三是避免让图片过亮。</strong>未经处理的图片通常会导致过高的对比度，降低可读性。在 MDx 中，我选择降低图片的亮度来避免图片刺眼，而 Google 的建议则是使图片灰度，不过这会影响图片的整体观感。无论是哪一种方案，都可以使用 CSS 滤镜来轻松实现。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    img { \r\n        /*MDx 方案*/\r\n        filter: brightness(.8);\r\n        /*Google 方案*/\r\n        filter: grayscale(.5);\r\n    }\r\n}</pre>\n<div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是未优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是经过优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n</div>\n<h1>其他细节</h1>\n<p>还有一些细节，虽然简单，但不可或缺。我把一部分没有在上文提到的 MDx 中的细节列在了这里。</p>\n<p><strong>一是允许页面缩放。</strong>在开发响应式页面时，很多网站会在页面头部添加这样一个 <code>meta</code>：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"&gt;</pre>\n<p>这样的 <code>meta</code> 设定了页面的宽度，却也固定了页面的缩放比例，用户难以手动放大网页。<strong>这样的设置对一部分视力障碍用户非常不友好</strong>，以至于苹果决定在自家的浏览器上忽略禁止缩放的 <code>meta</code>。按照 Google 的推荐，如果你在 MDx 设置中启用了“允许页面缩放”，那么 MDx 会输出这样的 <code>meta</code> 标签，允许页面进行五倍以内的缩放：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=5\"&gt;</pre>\n<p><strong>尽管很多时候放大页面会导致页面结构被破坏，但这大大增强了页面的可访问性，利大于弊。</strong>因此，在 MDx 中，“允许页面缩放”是默认启用的。</p>\n<p><strong>二是在跨设备阅读时同步阅读记录。</strong>这属于 MDx 的“元老级”功能之一。注意到页面右上角的那个“在其他设备上继续阅读”的按钮了吗？如果你滚动页面后重新点击它，你会发现二维码发生变化了。通过在二维码中记录阅读进度，用户在扫描二维码切换设备阅读时，MDx 在新设备上会自动滚动到和原设备上一致的位置——好吧，目前基于百分比的算法在某些情况下可能不太准，但我已经设计了一个更复杂但更精确的阅读进度记录算法，之后就会更新到 MDx 中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\" alt=\"\" width=\"1000\" height=\"574\" class=\"aligncenter size-full wp-image-1976\"></a>\n<p><strong>三是避免 Web 字体阻塞渲染。</strong>如果你在页面中使用了 Web 字体，在字体加载完成之前，浏览器可能不会渲染任何文本，这就导致用户可能需要等待一段时间才能开始浏览网页。Google 推荐使用 <code>font-display: swap;</code> 来向浏览器指定网页的 Web 字体渲染策略。这一规则会提供一个比较短的等待周期，如果在这段时间内 Web 字体没有完成加载，那么浏览器会以 fallback 字体渲染文本。任意时刻一旦 Web 字体完成渲染，浏览器就会使用 Web 字体重新渲染文本。这在大多数情况下都能满足可访问性的需求。</p>\n<p><strong>四是确保 html 元素具有合适的 <code>lang</code> 属性。</strong>这一属性声明了页面的主要语言，浏览器可以据此调整渲染策略，或者触发自动翻译；屏幕阅读器也能更好地阅读网页。</p>\n<p><strong>五是确保页面主要内容在丢失/禁用了 Javascript 甚至 CSS 的情况下仍然可用。</strong>作为一个以内容为主的网站，MDx 在禁用了 Javascript 的情况下页面主要内容仍然可用。这不只是为了 SEO，更是为了保证页面的可访问性。的确，目前的情况下，如果开启了 Lazyload，MDx 在禁用 Javascript 的情况下图片的确无法显示，但我会在后续版本中尽可能的优化这一问题。</p>\n<h1>附录：媒体查询开发技巧</h1>\n<p>有的时候，光有 CSS 响应媒体查询还不够，我们可能需要在 Javascript 中实时响应媒体查询。用如下代码就可以很简单地响应媒体查询：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">let mql = window.matchMedia(\"(prefers-reduced-motion: reduce)\");\r\nmql.addListener(handleMediaChange);\r\n\r\n//在添加监听后先调用一次，获得当前查询结果\r\nhandleMediaChange(mql);\r\n\r\nfunction handleMediaChange(mql){\r\n    if(mql.matches){\r\n        //查询匹配\r\n    }else{\r\n        //查询不匹配\r\n    }\r\n}</pre>\n<p>在开发上述媒体查询的过程中，我们需要频繁地切换系统的相应模式或者调出打印窗口。<strong>实际上，Chrome 提供了更简单的调试方法：</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1946\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\" alt=\"\" width=\"723\" height=\"681\"></a>\n<p>只要在这里更改模式，相关媒体查询就能实时生效。这不会影响其他标签页，在关闭开发者工具之后也会自动恢复系统设置。</p>\n","link":"https://flyhigher.top/develop/1912.html"},{"title":"MDx Blog 现已随 MDx 1.9.5 发布","date":"2020-01-22 17:54:11","description":"<p>随着 MDx 发布 1.9.5 更新，<a href=\"https://mdxblog.flyhigher.top/\" rel=\"noopener noreferrer\" target=\"_blank\">MDx Blog</a> 现已建立。我将会在 MDx Blog 中分享一些开发故事并发布 MDx 更新日志。</p>","link":"https://flyhigher.top/diary/1905.html"},{"title":"GitHub 2019 统计无垠版","date":"2020-01-12 13:02:00","description":"\n<h1>缘起</h1>\n<p>2019 年底，我突发奇想想要自己统计一番 GitHub 上存储库的一些信息。尽管 GitHub 有自己的<a href=\"https://octoverse.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">年度统计</a>，我还是想试着自己爬取一下，说不定能挖出什么有意思的信息，何况这是我第一次有机会处理比较大量的数据，也算是一种学习的过程吧。于是花了一下午写了个简单的爬虫（时间都花在增加 Rate Limit 上了...），然后扔在了两台服务器上开始跑（GitHub  API 真是好文明）。</p>\n<p>从 2019.11.21 3 时到 2020.1.12 24 时的 52 天 21 小时内，我的爬虫一共爬取了<strong>与 2,024,705 个用户有关<sup>*</sup>的 14,651,923 个公共存储库的基础信息</strong>，平均每秒爬取 3.2 个存储库。据 GitHub 的官方数据计算，我爬取了大约 15% 的存储库信息，但由于封禁库和私有库的数量未知，我暂时无法确定我爬取的存储库占公共库的比例。同时由于存储库数量较多，基本可以认为爬取到的样本在时间尺度上已经足够随机，可以通过统计得出一般结论。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\" alt=\"\" width=\"700\" height=\"606\" class=\"aligncenter size-full wp-image-1892\"></a>\n<p>爬到自己了，合影.jpg</p>\n<p>那么下面就来看看统计出来的一些结果吧。爬虫的技术细节和数据集下载放在文末。</p>\n<p>* 指这些用户拥有至少一个库</p>\n<h1>统计信息</h1>\n<p><strong>以下统计结果均基于已放于文末的数据集。</strong>由于爬虫爬取的时间跨度长，加上我并没有完整爬取 GitHub 所有存储库，因此我<strong>不能保证以下统计结果符合真实情况</strong>，各位可以下载数据集或自行爬取进行验证。</p>\n<h2>一些数据</h2>\n<div>\n<div>\n<div>\n<span>3,120,930</span><br>总爬取用户数</div>\n<div>\n<span>44.7%</span><br>的存储库创建<br>自 Fork</div>\n<div>\n<span>6.59%</span><br>的账户被删除或<br>封禁<sup>1</sup>\n</div>\n<div>\n<span>23,913</span><br>单用户拥有最大<br>库数量<sup>2</sup>\n</div>\n</div>\n</div>\n<p><sup>1</sup> 基于用户 ID 规律合理推断<br><sup>2</sup> 统计范围仅限于当前数据集</p>\n<p>比较出乎我意料的是创建自 Fork 的存储库的占比。我预估这样的存储库占比不会太低，但没有想到能接近一半。此外单用户拥有最大库数量也大大超出了我的预期，<a href=\"https://github.com/pombredanne\" rel=\"noopener noreferrer\" target=\"_blank\">pombredanne</a> 这个用户名下拥有将近 24k 的存储库，不过绝大多数都是 Fork 来的，在情理之中。此外<strong>这个数据集中</strong>拥有最多存储库的账户其实是一个组织 <a href=\"https://github.com/gitpan\" rel=\"noopener noreferrer\" target=\"_blank\">gitpan</a>，这个组织拥有 36,377 个存储库。</p>\n<h2>语言</h2>\n<p><canvas></canvas><br>\n首先必须要说明的是，在这个榜单中我<strong>排除了 HTML 和 CSS</strong>，因为在严格意义上它们不属于“编程语言”。如果把它们计算进来的话，分别有 640,368 个和 361,425 个存储库的主要语言分别是 HTML 和 CSS，这样在这份榜单中它们可以排到第 6 和 第 10 名。JavaScript 毫无疑问获得第一，第二名 Python 的热度则和 JavaScript 相差将近一半。<strong>此外还有 2,448,486 个存储库未能识别出语言，占比 16.7%。</strong>在上面的榜单之外，与机器学习和数据科学相关的语言还有 Jupyter Notebook 排名第 13，R 排名 20，Julia 排名 43。</p>\n<p>说实话这份排名和 GitHub 官方的排名<strong>差别很大</strong>，除了前三名，后面的基本都不太一样。我的排名统计结果完全基于 GitHub 对于存储库的主要语言识别，加上我的存储库数据不完整，和官方的数据不同是很正常的，可以做一个参考，但大概率还是官方排名更加准确。</p>\n<h2>许可证</h2>\n<p><canvas></canvas></p>\n<p>自 GitHub 推出许可证功能以来，拥有许可证的存储库比例升升降降，却始终没有超过一半。<strong>选择一个合适的许可证对项目的良好发展真的很有帮助</strong>，要了解如何选择合适的许可证，请参阅<a href=\"https://www.runoob.com/w3cnote/open-source-license.html\" rel=\"noopener noreferrer\" target=\"_blank\">这篇文章</a>。</p>\n<p><canvas></canvas></p>\n<p>对于拥有许可证的存储库，MIT<del> 麻省理工许可证 </del>总是占比最大的；第二则是 Apache-2.0 许可证。此外，WTFPL 许可证也挤入了前 15 名。</p>\n<h2>星标</h2>\n<p><canvas></canvas><br>\nStar 数量毫无疑问是一个存储库受欢迎程度的体现，而 Star 数高的项目基本上大家都了解过。<strong>截至爬取结束时间</strong>，GitHub 中 Star 数最多的库是 <a href=\"https://github.com/freeCodeCamp/freeCodeCamp\" rel=\"noopener noreferrer\" target=\"_blank\">freeCodeCamp</a> <del>非常完美的驼峰命名法</del>，其次则是著名项目 <a href=\"https://github.com/996icu/996.ICU\" rel=\"noopener noreferrer\" target=\"_blank\">996.ICU</a>。<a href=\"https://github.com/vuejs/vue\" rel=\"noopener noreferrer\" target=\"_blank\">Vue</a> 现在的 Star 数已经稳压 <a href=\"https://github.com/facebook/react\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> 一头，Vue YES! 此外 <a href=\"https://github.com/sindresorhus/awesome\" rel=\"noopener noreferrer\" target=\"_blank\">awesome</a> 也挤进第七名。<br><canvas></canvas><br>\n由于 Star 需要时间积累，新项目的 Star 数量很可能是比不过老项目的，这就会导致有实力的新项目无法出现在榜单中。因此我还统计了日均 Star 数，试图通过日均 Star 数来反映项目受欢迎的程度。<strong>由于正热门的项目会比老牌热门项目有优势，这一项的统计范围是 2020-01-01 之前的所有存储库。</strong>996.ICU 和 freeCodeCamp 再次出现在前 10 名，而最近的热门项目 <a href=\"https://github.com/wenyan-lang/wenyan\" rel=\"noopener noreferrer\" target=\"_blank\">wenyan</a> 则飙升至第 2 名。此外还有 <a href=\"https://github.com/menzi11/BullshitGenerator\" rel=\"noopener noreferrer\" target=\"_blank\">BullshitGenerator</a>，即最近热门的“狗屁不通文章生成器”和 <a href=\"https://github.com/evil-huawei/evil-huawei\" rel=\"noopener noreferrer\" target=\"_blank\">evil-huawei</a> 分列第 3 和第 5 名。<br><canvas></canvas><br>\n说实话这个曲线<strong>比我预估的陡多了。</strong>你可能已经注意到了，这个图表的横轴不是均匀缩放的，实际上曲线要比看起来陡很多。同时受爬取方式的影响，GitHub 中 Star 数较少的存储库数量远比我爬取到的多。也就是说，<strong>实际情况下曲线远比这个图表上的陡。</strong>拿点 Star 不容易啊。</p>\n<h2>名称</h2>\n<p><canvas></canvas><br>\n终于知道了原来存储库的名称是有长度限制的...尽管最长有 100 位，<strong>大部分人还是喜欢 8 位长的存储库名。</strong>此外 1 位长的名称也比我预估的要多一些。举几个存储库名称长度为 100 的例子吧。</p>\n<ul>\n<li>testing-something-elsetesting-something-elsetesting-something-elsetesting-something-elsetesting-some</li>\n<li>acts_as_validated_config_so_app_will_not_run_in_random_situation_and_qa_gays_will_not_cry_to_you_whe</li>\n<li>............................................________-....................................-.---......</li>\n<li>----------------------------------------------------------------------------------------------------</li>\n<li>nyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyan</li>\n</ul>\n<p>...创造力有够丰富的。</p>\n<p><canvas></canvas></p>\n<p>最近 GitHub 上有一种奇怪的风气，那就是建立 Awesome 合集<del>骗 Star</del>。看起来 Awesome 存储库满地都是，甚至还出现了关于 Awesome 的 Awesome 合集这种迷惑行为。于是我统计了一下，<del>还好，</del>占比<del>才</del> 0.5% 不到<del>，Awesomer 们任重而道远呐</del>。</p>\n<p><canvas></canvas></p>\n<p>尽管要在 github.io 上托管网站，存储库不一定要以 .github.io 结尾，但我还是统计了一下。拥有这类存储库的用户比我预想的要少一些，看来还有很多人没有完全发挥 GitHub 的完整实力啊<del>（比如我 Doge）</del>。同时<strong>这类存储库在所有存储库中占比 1.12%</strong>，看起来不多<del>，不过至少比 Awesome 多</del>。<br><canvas></canvas><br>\n看得出来 GitHub 对于用户名长度的限制是 1-40 位。用户名最短的 27 位占据了 <code>A-Z</code> 外加 <code>-</code> 的所有可能，而用户名最长的则是一个组织 <a href=\"https://github.com/UOIT-RESEARCH-database-information-group\" rel=\"noopener noreferrer\" target=\"_blank\">UOIT-RESEARCH-database-information-group</a>。不知道是巧合还是某种规律，<strong>最受欢迎的用户名长度和存储库名称长度一样，都是 8</strong>，有点意思。</p>\n<h2>创建时间</h2>\n<p><canvas></canvas><br>\n由于我并没有完整爬取所有存储库，我只能以相对值来统计每月新增存储库数量的变化趋势。<strong>在这个图表中，我将 2017-09 的数据设为了 100%。</strong>你一定一眼就能注意到 2017 年 6,7,8 月的“一柱擎天”。<del datetime=\"2020-02-05T09:18:30+00:00\">我第一次看到这个数据的时候的确愣了一下，不过就着这条新闻看就能明白为什么了：<strong>2017 年 6 月微软收购 GitHub。</strong></del></p>\n<blockquote><p>重新确认了一下，微软收购 GitHub 比这个高峰晚了一年，目前我对这个高峰没有什么很好的解释，如果你有什么思路的话欢迎评论。</p></blockquote>\n<p><strong>需要注意的是这张图表中我排除了 Fork 存储库</strong>，因为 Fork 存储库在 API 中的创建时间是原始存储库的时间，会影响整体趋势。此外，GitHub 中还有一个创建于 2007 年 10 月 29 日的存储库，那就是 <code>id: 1</code> 的...</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"mojombo\" data-mdxgithubp=\"grit\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/mojombo/grit\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>而它的创建者正是 GitHub 的创始人之一 Tom Preston-Werner。</p>\n<h1>一些有趣的结果</h1>\n<p>当初打算自己爬的目的之一就是想看看能不能挖出什么有意思的信息，结果真的有一些不挖不知道的信息。</p>\n<h2>奇怪的存储库</h2>\n<p>在爬取到的所有存储库中，<strong>有 3 个存储库是“无主”的</strong>，即它们的 owner 属性为空。这三个存储库的基本信息如下。</p>\n<div class=\"mdui-table-fluid mdui-table-hoverable\"><table class=\"mdui-table\">\n<thead><tr>\n<th>ID</th>\n<th>名称</th>\n<th>Forked</th>\n<th>Star</th>\n<th>语言</th>\n<th>许可证</th>\n<th>创建于</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>72385291</td>\n<td>vscode-redprl</td>\n<td>否</td>\n<td>10</td>\n<td>TypeScript</td>\n<td>apache-2.0</td>\n<td>2016-10-31 08:50:01</td>\n</tr>\n<tr>\n<td>181218346</td>\n<td>electron-sys</td>\n<td>否</td>\n<td>10</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-14 03:20:56</td>\n</tr>\n<tr>\n<td>181391880</td>\n<td>node-sys</td>\n<td>否</td>\n<td>6</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-15 09:33:08</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong>更奇怪的是这三个存储库“无主”的情况还不一样。</strong>第一个存储库可以通过 <code>/repositories</code> 这个 GitHub API 找到， <a href=\"https://api.github.com/repositories?since=72385290\" target=\"_blank\" rel=\"noopener noreferrer\">这个链接</a>中的第一个存储库就是它；而其余两个存储库甚至无法在 <code>/repositories</code> API 中找到。不过就算能在 API 中找到第一个存储库，它的 <code>html_url</code>，即 <code>https://github.com//vscode-redprl</code> 仍然是不可访问的。这可能是 GitHub 早期的一个 Bug 导致的，不过我仍然对爬虫是如何找到这三个存储库的以及这些 Stars 是哪里来的感到好奇。</p>\n<h2>奇怪的用户名</h2>\n<p>在爬虫爬了一段时间以后，API 中突然开始出现大量的以 fdp 开头的 18 位乱码作为用户名的用户。这些用户拥有的存储库和 starred 的存储库都为 0，而他们的 <code>html_url</code> 为 404。以下是几个例子。</p>\n<ul>\n<li>fdpEpolGCEdQX4ZlRJ</li>\n<li>fdp8XaVrdtmDZnO5pR</li>\n<li>fdp8XRAGnwAOkTr2Ya</li>\n</ul>\n<p>由于我的爬虫并没有超过 Rate Limit，所以我排除了这是污染数据的可能。我怀疑这可能是某种 Bot 账户，于是一边更新爬虫过滤掉了这些用户，一边给 GitHub 支持发邮件问了具体情况。过了两天 GitHub 回复我说这些是<strong>被自动判为可疑进而被封禁的用户</strong>（原话是 they have been flagged by our automated measures for detecting suspicious behavior）。<del>想到我正在疯狂爬取 GitHub，突然害怕.webp</del></p>\n<p>行吧。</p>\n<h1>技术细节</h1>\n<p>爬虫使用 Python3 编写，数据库使用 MySQL。爬虫共使用了 4 个 API Token，在两台服务器上分布式爬取。爬取思路为：</p>\n<ol>\n<li>通过 <code>/users</code> API 遍历用户，每个请求最多获取 30 个用户信息</li>\n<li>循环 30 个用户，分别获取 <code>/users/&lt;user_name&gt;/starred</code> 和 <code>/users/&lt;user_name&gt;/repos</code> API 中的存储库信息，每个请求最多获取 100 个存储库信息，超过 100 个的分页获取</li>\n<li>提取存储库信息，插入数据库。对于已存在的存储库，更新数据</li>\n<li>获取下 30 个用户信息</li>\n</ol>\n<p>由于爬取过程中我多次调整了爬虫逻辑，爬虫爬取到的用户 ID 区间并非连续的，具体区间为1-839586, 14800001-14885493 及 28965251-31161101。</p>\n<h1>免责声明</h1>\n<p>本站会尽可能地提供准确信息，但本站不对此文章中信息的准确性和即时性及带来的任何影响负责。</p>\n<p>本站不代表 GitHub 官方，本文仅供学习之用，请不要将本文内容直接用于任何商业项目中。</p>\n<h1>数据集下载</h1>\n<p>导出的 SQL 文件大约为 1.38GB，全部放在了 GitHub 上（在危险的边缘试探.webp</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"github-analysis-2019\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/github-analysis-2019\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>此外我也提供了 MEGA 下载，链接<a href=\"https://mega.nz/#F!juxm3A6T!7Vwpzi82W1OFrqTLu1A1pQ\">在这里</a>。</p>\n","link":"https://flyhigher.top/develop/1564.html"},{"title":"Milkice 跨年红包解谜 Writeup 及无垠跨年红包解谜答案","date":"2020-01-02 04:29:19","description":"\n<blockquote><p><del>又到了水文章的时间呢</del></p></blockquote>\n<p>先说明一下，这篇文章原本不是在计划中的，而原来说好的「在路上的两篇」文章<del>绝对不会咕</del>。我自己的红包答案本来打算直接塞在年度总结里的，结果发现稍微有些长，再加上我还花了一些时间解了<a href=\"https://milkice.me/\">奶冰</a>的红包解谜游戏，就打算把两个解谜过程放在一起单独写一篇文章。<del>真是个水文章的好理由</del>（被打死</p>\n<h1>奶<del> 子 </del>冰的红包</h1>\n<p>奶冰的红包题目比我的难多了，所以让我们先从难的开始吧。首先看一下<a href=\"https://milkice.me/2019/12/31/2019-summary/\">题目</a>：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1524\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\" alt=\"\" width=\"746\" height=\"410\"></a>\n<p>入口是 <code>happy.2020.milkice.me</code>，扔到浏览器里面表示找不到 IP，那么大概率就是 DNS 的 TXT 记录了，查一下得到 <code>nb2hi4dthixs63ljnrvwsy3ffzwwkl3tivrvezluomxxg5dsmvqw2ltqmnqxa3th</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1525\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\" alt=\"\" width=\"896\" height=\"278\"></a>\n<p>第一眼没看出来是什么编码，直觉是 BaseXX 系列的编码，加上提示“不只有 Base64”，可以推断出是 Base32，转大写解码得到 <code>https://milkice.me/sEcRets/stream.pcapng</code>。是个 URL，下载得到一个 Wireshark 文件，打开一看是和某 USB 设备的通讯抓包。<del>不会做，不做了。</del></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1526\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\" alt=\"\" width=\"1500\" height=\"813\"></a>\n<p>奶冰提示我“Google 上搜得到”，结合第二条提示搜索“wacom pcapng”找到了<a href=\"https://blogs.tunelko.com/2017/02/05/bitsctf-tom-and-jerry-50-points/\">这篇文章</a>（<del>这™就是答案啊</del>）。看起来是一样的套路，即通过解析数据得到数位板上画的内容，于是按文章的思路筛选出数位板发给主机的数据，导出，然后再用 tshark 导出文本数据。本来我想直接用文章中的 POC 的，结果折腾半天因为源的蜜汁原因库没装上，于是按文章中给出的数据结构自己写了段代码，分别导出 X、Y 轴数据扔进 Excel 画散点图。（<del>别问我为什么用 Excel，因为我手边没有更好的工具了</del>）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1528\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\" alt=\"\" width=\"1280\" height=\"530\"></a>\n<p><span>翻车现场之一</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1539\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\" alt=\"\" width=\"1000\" height=\"286\"></a>\n<p><span>懵逼奶冰.webp</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1533\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\" alt=\"\" width=\"1500\" height=\"462\"></a>\n<p>看得出有手写文字，不过是上下颠倒的，翻转图片得 <code>https://milkice.me/2020/uso.zip</code>。是个 zip，下载打开一看，有密码。<del>不会解，不做了。</del> 第一反应是暴力解密码，但是暴力跑了 15 分钟还是没有跑出来。暴力太不优雅了，肯定不是正确思路，但奶冰什么都不肯说了。不过在这时我终于发现第一个红包口令码就藏在压缩包的注释中，Get。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1544\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\" alt=\"\" width=\"806\" height=\"593\"></a>\n<p>然而题还没解完，回去看提示，看到提供了 osu 谱面下载，于是打算不管怎么样先下载来看看。然而 osu 谱面下载要登录，只好又花了几分钟找到第三方站点，成功下载。这时候可以注意到 uso.zip 里有个同名文件（432314 Mike Greene - Bill Nye the Science Guy Theme Song (Chinese Intro).osz），可以联想到是明文攻击。好吧，上 ARCHPR，十秒解出。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1530\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\" alt=\"\" width=\"462\" height=\"643\"></a>\n<p><span>现场还原.jpg</span></p>\n<p>.osz 文件并不是明文，猜测是压缩包（和 .pptx 一个思路嘛），于是改后缀 .zip 顺利打开。然后红包口令码就藏在奶冰的 .osu 文件中了，由提示可知是明文，打开即可得到。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1542\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\" alt=\"\" width=\"457\" height=\"255\"></a>\n<h1>我的红包</h1>\n<p>相比起来<a href=\"https://flyhigher.top/diary/1464.html\">我的题目</a>就简单很多了嘛...三天时间一共发出了 25 个红包，包括一位重复领取的🌚，比前几年还是多了一些的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\" alt=\"\" width=\"500\" height=\"306\" class=\"aligncenter size-full wp-image-1554\"></a>\n<p><span>这位同学以后请不要多次领取🌚</span></p>\n<p>那么来看看答案吧。</p>\n<h2>第一阶段</h2>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>首先观察字符串，可以发现 <code>.</code> <code>/</code> <code>_</code> 等一些 ASCII 字符原样留在了字符串中，而其他字符被由 <code>=</code> 和十六进制构成的某种编码所替代。如果你正好有所了解，你应该能认出这是 Quoted-printable 编码，这是一种常用于邮件中的编码，可以用<a href=\"https://mothereff.in/quoted-printable\">这个页面</a>解码。如果你不了解，你也应该可以发现这种编码和 URL 编码非常相似。如果你把 <code>=</code> 替换为 <code>%</code>，那么你就可以用各种方法顺利地把它按 URL 编码来进行解码，最后可以得到 <code>αхtоn.іm/соdе_оf_2020_⒈mρз</code>。这个字符串里大部分字符都不是 ASCII 字符，只是长得像而已。根据第一个提示“全是 ASCII 字符”，按样子把字符串用 ASCII 字符抄一遍，可以得到最终 URL 为 <code>axton.im/code_of_2020_1.mp3</code>。</p>\n<h2>第二阶段</h2>\n<p>下载音频，可以听出音频是经过某种处理的白噪音。白噪音的特点是各频段的功率都均匀分布，在白噪音上做文章，很容易就可以联想到线索藏在频谱中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1534\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\" alt=\"\" width=\"1200\" height=\"719\"></a>\n<p>频谱被处理成了 24x3 的网格，结合第二条提示“24x3，横向读取”可以推断出是将频谱当作二进制读取，得到 <code>01111001 01110010 01100011 00101110 01101101 01100101 00101111 00110010 00110000</code>，转为 ASCII 字符可得 <code>yrc.me/20</code>。</p>\n<h2>第三阶段</h2>\n<p>打开上一步得到的页面，提示要求输入十位数密码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1536\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\" alt=\"\" width=\"663\" height=\"460\"></a>\n<p>如果你在上一步注意到了这个音频文件奇怪的属性，你可以反应过来这里的密码就是 <code>2000202020</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1537\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\" alt=\"\" width=\"421\" height=\"651\"></a>\n<p>如果你没有注意到，查看页面代码可以看到一条注释 <code>&lt;!-- Tips: the attribute of the audio --&gt;</code> 将你引导向音频文件的属性。输入密码，解锁即可进入下一步。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1535\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\" alt=\"\" width=\"397\" height=\"223\"></a>\n<h2>第四阶段</h2>\n<p>可以看到是一张图片，内容为“<del>.JPG</del>”和“.ZIP”。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-1532\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n<p>和去年一样的套路，下载图片，将后缀名改为 .zip 然后打开，可以看到 README.txt。</p>\n<h2>最后一步</h2>\n<p>查看 README.txt 的内容，可以了解到需要去 🤔.axton.cc 获取红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1538\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\" alt=\"\" width=\"1131\" height=\"278\"></a>\n<p>扔到浏览器里会出现奶冰同款找不到 IP，于是可以联想到 TXT 记录。唯一的问题是 🤔 这个 Emoji 需要如何处理。域名使用 Punycode 将 Unicode 字符转换为 ASCII 字符，特点是以 <code>xn--</code> 开头。如果你把上面这个域名扔进浏览器，你会发现它变成了 <code>xn--wp9h.axton.cc</code>。然后查询 TXT 记录，即可得到红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1527\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\" alt=\"\" width=\"804\" height=\"557\"></a>\n","link":"https://flyhigher.top/develop/1519.html"},{"title":"无垠 2019 年度总结","date":"2019-12-29 12:25:52","description":"\n<p>又是时间飞快的一年...写 2018 总结的情景似乎还在眼前，转眼居然已经到 2019 年末了。</p>\n<p>2019 年，发生了太多事情，包括真的转折了人生的高考，这也导致我博客更新的不多（难以置信居然才更了两篇...），不过两篇技术性文章已经在路上了，可以期待一下。</p>\n<p>2019 年我也学了不少东西（单指技术方面），比如终于认真学了 Vue（但是还要练手）。书买了一大堆，看完的倒是没几本orz</p>\n<p>呼，好吧，是时候回顾一下充满坎坷的这一年了。2019 年还剩下最后两天，希望 2020 年，我能做得更好。</p>\n<h1>一些数据</h1>\n<p>照惯例先来看看一些数据吧。今年是统计系统完整统计了的第二年，终于可以和去年的数据比较一下了。以下数据的统计范围是 2019年1月1日0时至 2019年12月29日20时。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 26,901 (<span>+4%</span>)，年 PV 76,583 (<span>+3%</span>)，日均 UV 73.7，平均停留时间 5分13秒 (<span>-13.8%</span>)，平均跳出率 53% (<span>+20.5%</span>)。一年有效文章数 2 (<span>-50%</span>)，新增评论 439 条。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\" alt=\"\" width=\"1000\" height=\"1143\" class=\"aligncenter size-full wp-image-1511\"></a>\n<p>有趣的是今年文章数腰斩，访问数反而小有提升。<del>如果我哪天不更新了，访问数是不是可以无限大呢？</del></p>\n<p>今年博客最大的改动就是把整体风格切换到了 Material Design 2（当然这是 <a href=\"https://flyhigher.top/develop/788.html\">MDx</a> 中的可选功能，给自己打个广告2333），此外还有比较失败的 WebP 改造计划，因为和缓存冲突已经回滚了。<a href=\"https://flyhigher.top/develop/1245.html\">ABS 系统</a>进展不大，主要是真的没有太多时间，还是要再学习一个。</p>\n<h2>个人主页</h2>\n<p>虽然个人主页的 TODO List 列了老长，但今年完全没有更新，也没有推广，从今年 8 月底开始还莫名被某墙认证了，直到 11 月底才恢复，于是今年总访问量比去年少了很多，</p>\n<p>有多少呢？这么少：总 UV 2,141 (<span>-65.9%</span>)，总 PV 2,744 (<span>-66.6%</span>)，日均 UV 6 (<span>-65.9%</span>)，平均停留时间 62秒 (<span>+19.2%</span>)。主要来源是知乎和 V2EX，还有一些甚至是从微信来的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\" alt=\"\" width=\"1000\" height=\"1103\" class=\"aligncenter size-full wp-image-1512\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 8 次，新增 171 commits，2 种语言的翻译，Star 数增加了 175，现有 408。感谢所有人的支持，尤其是 <a href=\"https://github.com/Sn0bzy\" rel=\"noopener noreferrer\" target=\"_blank\">Hasan CAN</a>, <a href=\"https://github.com/yechs\" rel=\"noopener noreferrer\" target=\"_blank\">Ye Shu</a>, <a href=\"https://github.com/StarryLeo\" rel=\"noopener noreferrer\" target=\"_blank\">StarryLeo</a>, <a href=\"https://github.com/DCTewi\" rel=\"noopener noreferrer\" target=\"_blank\">冻葱Tewi</a>, <a href=\"https://github.com/syfxlin\" rel=\"noopener noreferrer\" target=\"_blank\">Otstar Lin</a> 等为 MDx 做出了不小贡献的你们。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：<a href=\"https://flyhigher.top/photograph/1309.html\">上手</a> DJI OSMO Pocket</li>\n<li>四月：最后一次参加浙江省普通高中学业水平考试</li>\n<li>五月：MDx 喜提 300 Stars</li>\n<li>六月：高考 <del>炸了，差亿点点上浙大</del>\n</li>\n<li>六月：入手了 Oneplus 7 Pro</li>\n<li>六月：和同学一起去成都重庆旅行</li>\n<li>六月：第一次近距离感受到地震</li>\n<li>六月：<a href=\"https://flyhigher.top/diary/1411.html\">入手</a>了一台雷蛇灵刃 15，目前是主力机</li>\n<li>七月：参与组织 THE Hack 2019 活动</li>\n<li>七月：面基了 <a href=\"https://itroy.cc/\" rel=\"noopener noreferrer\" target=\"_blank\">Tory</a>, Bie Shi 和 <a href=\"https://oxz.me/\" rel=\"noopener noreferrer\" target=\"_blank\">FHYunCai</a>\n</li>\n<li>八月：一个人去厦门武汉转了一圈，拍了自己的第一个 Vlog</li>\n<li>八月：入手了一个 Kindle Paperwhite 4，没有泡面可以压，于是用来看英文小说了</li>\n<li>八月：加入 TEDxNingbo 志愿者团队</li>\n<li>八月：和 Ralph 面基</li>\n<li>八月：入手了一个 Yubikey</li>\n<li>九月：人生第一次参加雅思考试 <del>7分，蛮开心的</del>\n</li>\n<li>十月：入手了一个 Samsung Galaxy Watch Active 2 <del>觉得不值</del>\n</li>\n<li>十一月：MDx 达到 400 Stars</li>\n<li>十一月：为 TEDxNingbo 设计开发的 H5 上线</li>\n<li>十一月：入手了第一台胶片相机，试图入坑胶片摄影</li>\n<li>十一月：参加 TEDxNingbo 2019 大会</li>\n<li>十二月：<del>我 Cytus II 入门了</del>\n</li>\n</ul>\n<h1>跨年红包</h1>\n<p>这算「传统习俗」了。和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2020年1月2日。</p>\n<p>今年的解谜旅程，从下面这个字符串开始。</p>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>由于今年的题目比以前稍微难了一些，所以今年的红包金额还是比较大的，而且不限量，尽你所能试一试吧。</p>\n<p>一点你可能用得上的提示：URL 里全是 ASCII 字符 / 24x3，横向读取。</p>\n<p><a href=\"https://flyhigher.top/develop/1519.html\">答案</a>已公布。</p>\n<h1>跨年海报</h1>\n<p>这算是另一个「传统习俗」（笑）。因为我有做跨年海报的习惯，所以以下就是今年份的海报啦。</p>\n<p>用了 C4D+PS，还有我的一整个下午。</p>\n<p>提前祝各位新年快乐！</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter wp-image-1467 size-large\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n","link":"https://flyhigher.top/diary/1464.html"}]