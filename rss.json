[{"title":"再犹豫，到年底：iPhone 14 系列选购指南","date":"2022-09-13 09:30:00","description":"如果你还在犹豫是否要入手新款 iPhone，或在四款机型之间犹豫不决，那么这篇 iPhone 14 系列选购指南就是专门为你而来的。<a href=\"https://sspai.com/post/75686\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75686"},{"title":"如何评价密室逃脱游戏《\t山村贞子》？你的游玩体验如何？","date":"2022-09-13 08:20:48","description":"\n<p data-pid=\"9dI8FaHs\">《山村贞子》是一个以同名电影为恐怖密室主题，原创方为北京夜幕，时至今日已通过授权的方式落地到很多城市（上海、西安等城市均有落地）。</p>\n<p data-pid=\"qmGLmc-Y\">作为本人为数不多也是我首次挑战的恐怖主题，这个密室作品可以说给我留下了极为深刻的印象，其中的个别“单线”任务非常有意思，而部分大型机关的运用也是非常亮眼。</p>\n<p data-pid=\"b435pcds\">更多细节，如有需要可参考这篇测评：《山村贞子- 老品牌的革新之路》（2019年9月发布于EGA密室产业平台）——</p>\n<hr>\n<p data-pid=\"33HvA3Yb\">录像带、古井、诅咒、七天……</p>\n<p data-pid=\"IlwjPb34\">《午夜凶铃》系列影片的诞生，塑造了“贞子”白衣黑发的经典形象。</p>\n<p data-pid=\"YbdZJehL\">深夜索命”的桥段，则让“电视机”这件再日常不过的事物，成功晋级为观影者的“心理阴影”。</p>\n<p><img src=\"https://pica.zhimg.com/v2-fb714b2936553d751f3b71ae34ae1191_720w.gif?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"510\" data-rawheight=\"274\" data-watermark=\"watermark\" data-original-src=\"v2-fb714b2936553d751f3b71ae34ae1191\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"8iMOuPVS\">或许因其太过经典，多数人记住了她苍白的手臂与怪异的身姿，反而忽略了“贞子”悲惨的过往，甚至连她的姓氏也一并忘却。</p>\n<p data-pid=\"0wxkRZpn\">直到今年，一家老密室品牌的新作品，重新唤醒了这份记忆。</p>\n<p data-pid=\"ml-u9h5T\">而它，就是《山村贞子》。</p>\n<p><img src=\"https://pica.zhimg.com/v2-a24ff882374fdb4fb66f5f887595f2eb_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"900\" data-rawheight=\"530\" data-watermark=\"watermark\" data-original-src=\"v2-a24ff882374fdb4fb66f5f887595f2eb\" data-watermark-src=\"v2-50e14e16aa8ec41111ce4600f0227dc1\" data-private-watermark-src=\"v2-8e044e8da00acc581b7a296a0883b6f9\"></p>\n<p data-pid=\"9LDUAGBY\">诱发恐惧</p>\n<p data-pid=\"UK_-psOB\">从《午夜凶铃》第一部公映至今，已足足过去了二十多年。倘若现在回看这部影片，难免会产生“这也能吓人？”的疑问。</p>\n<p data-pid=\"_tvRCJ_S\">然而对于当时的人来说，贞子之所以让人害怕，除开画面的直观刺激，各种诱发恐惧的暗示与手段同样功不可没。</p>\n<p><img src=\"https://picx.zhimg.com/v2-4227d05c212c056dfb760b09be675286_720w.jpg?source=b1748391?rss\" data-caption=\"午夜凶铃中摄制粗糙的录影带 | 豆瓣剧照\" data-size=\"normal\" data-rawwidth=\"900\" data-rawheight=\"486\" data-watermark=\"watermark\" data-original-src=\"v2-4227d05c212c056dfb760b09be675286\" data-watermark-src=\"v2-0289316cede0ebfb56a4f7d4fd9ba2d0\" data-private-watermark-src=\"v2-67162d1cff1d3f954e314812dde636fa\"></p>\n<p data-pid=\"gTfIZlJ5\">这点，《山村贞子》同理。甚至会采用很多极具迷惑性的“欺骗”来诱发玩家的恐惧。</p>\n<p data-pid=\"tLkyIS-g\">比如——由于事先知道是恐怖主题，进场时玩家难免会有些紧张。</p>\n<p data-pid=\"r-r4T3Bq\">为此，设计者安排了一个十分欢乐的开头，等精神放松的差不多了，再补上猝不及防的一击。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-d0d42758be07481a81ba5df2911e12a5_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"391\" data-watermark=\"watermark\" data-original-src=\"v2-d0d42758be07481a81ba5df2911e12a5\" data-watermark-src=\"v2-af9fd4df6af1cba449c0eb5cb4fb0490\" data-private-watermark-src=\"v2-3ce14f558ab59e6e147fa762b82b351f\"></p>\n<p data-pid=\"HKyZUu3u\">再比如——正当你为逃避“灾厄”，聚精会神的进行游戏时，“命运”却从天而降。</p>\n<p data-pid=\"j1-QQhVk\">当玩家只能被迫接受安排的那一刻，瞬间产生的震惊与无力，远非三言两语便能描述。</p>\n<p data-pid=\"npnqH46M\">沉浸还是机械？都要</p>\n<p data-pid=\"jUWaJLIe\">作为北京密室的老品牌之一，《山村贞子》问世之前，夜幕的作品多偏传统，题材也鲜少与“恐怖”搭边。</p>\n<p data-pid=\"A9zPIhr5\">之所以有如此方针，主要也是考虑到了北京市场的受众，担心玩家不爱“吃辣椒”。</p>\n<p data-pid=\"vdE3G-wc\">直到夜幕紫竹桥店的主题《荒村》上线，并为人接受后，创作团队才算有了底气。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-f759cba0f074cd1c71aff4f6f9a6fd86_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"900\" data-rawheight=\"500\" data-watermark=\"watermark\" data-original-src=\"v2-f759cba0f074cd1c71aff4f6f9a6fd86\" data-watermark-src=\"v2-fa76c6074db85652dcc8bafc41f7587a\" data-private-watermark-src=\"v2-5bd2b74371a132ca6baae15384efc035\"></p>\n<p data-pid=\"CNptF2Nw\">另一方面，为了“赶时髦”，这次夜幕的创作团队选择用偏“沉浸”的方式，来呈现《山村贞子》。</p>\n<p data-pid=\"5-Ewxtuc\">“北京的密室市场，现在有一个问题。即大多数沉浸式密室缺大型机械，而机械密室又缺表演。”</p>\n<p data-pid=\"HUux-sTE\">“不过某些时候，很多想要达成的效果，用机械很难做到，用人则容易的多。”</p>\n<p><img src=\"https://picx.zhimg.com/v2-9ff89fb8b5c3393af8580aef62587662_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"527\" data-watermark=\"watermark\" data-original-src=\"v2-9ff89fb8b5c3393af8580aef62587662\" data-watermark-src=\"v2-e4a0a8a0a53ad7c3f94364df8bb4df69\" data-private-watermark-src=\"v2-51d7f76b4a0f658439af25beb5b3d672\"></p>\n<p data-pid=\"_M6mSGHa\">当被问及新作品为何会选择“沉浸式”时，夜幕负责主题设计的高先生这样回答了我们。</p>\n<p data-pid=\"u-3AmMCR\">“为了弥补市场的空缺，我们希望‘贞子’即能有沉浸式的表演，又能享受到机械带来的震撼，因此我们在游戏中设置了很多‘人’与‘机械’的搭配。”</p>\n<p data-pid=\"bCuiAvMF\">同时，他还表示尽管“恐怖”是《山村贞子》一个重要标签，但“吓人”绝非设计初衷。</p>\n<p><img src=\"https://picx.zhimg.com/v2-265d1d9f07488dea47510562c5c6b640_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"543\" data-watermark=\"watermark\" data-original-src=\"v2-265d1d9f07488dea47510562c5c6b640\" data-watermark-src=\"v2-441c9b77381f34bc322902a42a500050\" data-private-watermark-src=\"v2-10cee83ec4ef261ff24ec0e6c0aeb83a\"></p>\n<p data-pid=\"vY8xE3ax\">“最开始想做的偏剧情一点，也有跟东升（主创设计师之一）讨论过这方面的问题。后来发现如果过于偏重剧情，玩法就弱了，于是对整体结构进行了调整。”</p>\n<p data-pid=\"UYNB0OIX\">“不过本来我们原定推出的下一个主题是《琅琊榜》，但‘贞子’上线后，玩家普遍希望我们继续做恐怖主题，这也算一种变相的认可吧。”</p>\n<p><img src=\"https://pica.zhimg.com/v2-c0a64ad21a2c36b86b0dd058b634d4ec_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" data-watermark=\"watermark\" data-original-src=\"v2-c0a64ad21a2c36b86b0dd058b634d4ec\" data-watermark-src=\"v2-3a73a3072951f8d1d657ad6e39a28733\" data-private-watermark-src=\"v2-be6f5f22193769cfe09d00874a58ecbd\"></p>\n<p data-pid=\"9q6zY-QI\">追赶潮流，也要保证质量</p>\n<p data-pid=\"QnKGTx4m\">尽管笑称这次设计沉浸式是为了跟上“大众的节奏”，不过即便如此，夜幕仍未放弃对质量的追求。</p>\n<p data-pid=\"fJi7w4lp\">以这次的《山村贞子》为例，从设计到上线，足足花了7个多月。同时即便主题已正式上线，目前仍在根据玩家的反馈进行调整优化。</p>\n<p><img src=\"https://picx.zhimg.com/v2-5c93e634b17dd59a93a595a34f6dfc44_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" data-watermark=\"watermark\" data-original-src=\"v2-5c93e634b17dd59a93a595a34f6dfc44\" data-watermark-src=\"v2-9db51ef34b5a20214279e740ef1e7eb9\" data-private-watermark-src=\"v2-556192b1ec3cf89b487604b3adab47dd\"></p>\n<p data-pid=\"hreSQ9dc\">据高先生自述，从14年入驻五道口至今，将近6年的时间，夜幕仅推出了6个作品，并且每个主题皆倾注了大量的精力与财力，为的就是能给玩家不断创造出更好的体验。</p>\n<p data-pid=\"F4uE6NeY\">“夜幕一直没走纯商业路线，这样做的好处在于能获得一些口碑，不过也因此失去了‘做生意’的本质：投资少，回报快。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-9696a2b25fa2cebf3819879a44e72479_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" data-watermark=\"watermark\" data-original-src=\"v2-9696a2b25fa2cebf3819879a44e72479\" data-watermark-src=\"v2-16cedf24b3a8191e82c813a5a7f7c0aa\" data-private-watermark-src=\"v2-a208e55aab5265990e7053f227479fc4\"></p>\n<p data-pid=\"DmmP9UrM\">另一方面，即便历经多次调整与测试，在高先生眼中，《山村贞子》仍未达到他的预期。</p>\n<p data-pid=\"fmTrSK5P\">“这次有些遗憾，毕竟是第一次做沉浸，经验不足导致心中的理想效果没达到。其实很多地方，我们还可以做得更好。”</p>\n<p data-pid=\"ukfWblvs\">不争，但自豪</p>\n<p data-pid=\"rzupU-bh\">拒绝一味追求利润的理念，让夜幕显得有些“与世无争”，而凭借优秀的主题质量，不仅让夜幕在当地的玩家群体中积攒了人气，同时也吸引了现在的合伙人——王女士。</p>\n<p><img src=\"https://picx.zhimg.com/v2-300f103e723c8ccf65d0f8cabf4c0257_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"938\" data-watermark=\"watermark\" data-original-src=\"v2-300f103e723c8ccf65d0f8cabf4c0257\" data-watermark-src=\"v2-45471a1bab5c01b9a00765a4cb43f981\" data-private-watermark-src=\"v2-0779b49bcc07a944002e434743d18219\"></p>\n<p data-pid=\"UmUFDp0j\">“我第一次玩过夜幕五道口店的主题后，就想着‘这么厉害的主题，要是宣传跟上一定能火啊’，但那时高老板的所有心思都在研发主题上。”</p>\n<p data-pid=\"BxGWG8mq\">“他设计的主题有个‘主旨’，即每个主题都能有一个机关给玩家留下深刻的印象，同时五道口这种‘古风解谜’的密室类型，至今都很吸引我。”</p>\n<p data-pid=\"ISrF8tyr\">“所以后来就有了我负责宣传推广，高老板负责研发的合作。”</p>\n<p><img src=\"https://picx.zhimg.com/v2-ef17160e289c613ac4815181f4880cc2_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"580\" data-rawheight=\"386\" data-watermark=\"watermark\" data-original-src=\"v2-ef17160e289c613ac4815181f4880cc2\" data-watermark-src=\"v2-3f6103e3e7de8e0422a3dbd2fcaa522e\" data-private-watermark-src=\"v2-72c55c3caf30297381a0d5364e94e73e\"></p>\n<p data-pid=\"X9-hgXoA\">同时，王女士还告诉我们，随着实景密室的发展日新月异，很多事情都在经历着“从无到有”的过程，经典的主题越来越多，玩家的喜好也在无形中推动着行业前行。</p>\n<p data-pid=\"5y2BUkGz\">这些都令她倍感骄傲。</p>\n<p data-pid=\"Fg65ct_Q\">“身处这个行业，虽然能尽的力不多，但我们想用心做好每一件事，呈现出更好的作品。”</p>\n<p data-pid=\"eidMpFZ6\">“我们希望通过这样的方式，让更多人喜欢密室，了解密室。而这不仅是我们的初心，也会是未来不变的努力方向。”</p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/question/527674041/answer/2459820150?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\">知乎用户（登录查看详情）</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>延伸阅读：<br><a href=\"http://www.zhihu.com/question/527954887?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价密室逃脱游戏《七月》？你的游玩体验如何？</a><br><a href=\"http://www.zhihu.com/question/456391067?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">想找一个密室逃脱游戏?</a><br>\n","link":"http://www.zhihu.com/question/527674041/answer/2459820150?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"新赛季小组赛已经开打，我们来谈谈即将到来的欧冠改制","date":"2022-09-13 08:00:00","description":"深夜里开一罐啤酒，享受只有绿茵场上才能迸发的荷尔蒙。<a href=\"https://sspai.com/post/75671\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75671"},{"title":"经济学博士怎么能有多篇working paper呢？","date":"2022-09-13 06:37:41","description":"\n<p data-pid=\"oYgw4Y5R\">数了一下</p>\n<p data-pid=\"LUXjkv3p\">我18年有第一篇文章 ，今年上市，到现在online available的一共10篇 (5 published+5 wp)，现在有3个work in progress (包括jmp，年底有2篇应该能放出来)，谷歌引用刚过100（都是靠ieee的文章）</p>\n<p data-pid=\"_77ISW-A\">===========</p>\n<p data-pid=\"QkKy7ndu\">第一经验就是要靠大腿（躺</p>\n<p data-pid=\"85972Lhz\">第二经验就是朋友们别做理论了————我从4月开始只收过拒信，哇</p>\n<p data-pid=\"WDlQzANE\">=========开玩笑===========</p>\n<p data-pid=\"01S0pZQA\">谈谈做纯理论的经验（纯理论的意思就是，你问我有啥用/现实意义 我就画饼你“加深我们对xx的理解，长期来看会有用”）  </p>\n<p data-pid=\"yM15VGqL\"><b><i>以下数字标签对应提问里的问题顺序</i></b></p>\n<p data-pid=\"02I4AMbs\">1-1） 做理论，尤其是axiomatic approach的，idea真的不难————你看你期望效用理论改个独立性就能那么多改法那么多文章，就知道idea多容易想了。你就当打解密游戏，屏幕上所有东西挨个点一遍，总会出来的嘛</p>\n<p data-pid=\"88piSRCw\">1-2）然后，做理论，门槛也不高————你想想你都沦落到经济学了，还能有什么技术难度，用再难的工具也就是用工具，就好像玩电脑不用你会造芯片一样</p>\n<p data-pid=\"oDmhfEWJ\">1-3）然后找合作者也不难，我现在合作过5波人（所以你看，还是要会抱腿），感想就是还是有很多人对理论/证明手法有需求，但是自己没精力(懒得想)，所以只要进了圈子，总会认识人的（当然怎么pua别人不让人拖延症是另一回事了）</p>\n<p><br></p>\n<p data-pid=\"lGmW-kek\">最难的还是怎么把文章卖出去————为什么关注这个模型，为什么提出这个假设，怎么合理排序文章架构，怎么把证明写干净etc</p>\n<p data-pid=\"uIi9tL8N\">3） 所以导师/senior的指导也该专注于此，你把成果带给人家看(我的场合，main thm + proof sketch)，然后大家坐下来商量怎么package它，预期的audience是什么样的人，用什么样的storyline，应该怎么emphasize你的结论，怎么defense （但是不overdefense）你新提出的notion，去哪些地方present (+谁掏钱)，怎么投稿 (publication strategy)</p>\n<p data-pid=\"AvPvUgAV\">这些东西主要靠经验 再天才也急不来 (哪怕你真有一个划时代的结论，它就一定能发好吗, e.g., <a href=\"https://zhuanlan.zhihu.com/p/29824049\" class=\"internal\">谢耳朵：漫画 | 那些年被拒稿过的诺奖研究...</a>)  不要想着一力降十会，出货是纯科研，发表就关于社交了</p>\n<p><br></p>\n<p data-pid=\"xYRKZnBC\">4） 然后就是不要有压力，我最有挑战性的一个证明(一个快30p的lemma，完全就是抡大锤砸锁，找不到简化方法，没有任何intuition，更别说econ sense了)就是洗澡时候想出来的，智慧女神不爱你的时候，你舔也没用，该吃吃该喝喝————所以还是要有钱，如果月薪有一狗，博士也是可以快乐的 （哇一下哭出来）</p>\n<p><br></p>\n<p><br></p>\n<p data-pid=\"-crwBhn4\">2） 因为是做axiomatic的iff thm，所以试错全都是靠证明————证不出来就加条件，证出来了就在简化过程中去掉不必要的条件</p>\n<p><br></p>\n<p><br></p>\n<p data-pid=\"e-osYEbH\">题外话：今年上市，有老板们看到了赏口饭吃啊 （哇哇哇的哭都哭不出来了）</p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/question/536795472/answer/2669780758?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\">知乎用户（登录查看详情）</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/536795472/answer/2669780758?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">12 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/448207147?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">经济学博士阶段改如何学习，目标是在顶刊发文？</a><br><a href=\"http://www.zhihu.com/question/490932244?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">经济学类的硕士，硕士期间发paper对找工作的作用大吗？是否是把时间用在考证上更合适？</a><br>\n","link":"http://www.zhihu.com/question/536795472/answer/2669780758?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"经济学博士怎么能有多篇working paper呢？","date":"2022-09-13 06:36:50","description":"\n<p data-pid=\"0NDE0YiP\">1， 这个很正常。大多数欧美经济学博士的毕业要求就是要有three chapters，可以不发表。所以，但凡一个正常的博士毕业，找工作，都会在简历上放这3篇working paper(不讨论能否发表，质量如何)。博士毕业找工作，可写的不多，所以大家肯定都是能往上写就往上写。至于你说到的coauthor很多，因为北美博士是thesis comittee，成员可能有3，4个导师，一个chair。所以有多篇不同coauthor的论文是正常的。北美经济学博士大概需要6年毕业，前两年上课。不论你搜集数据做证明，跑代码需要多长时间，理论上一年多一篇论文是该有的进度，而且前期稍慢，后期会更快一些。英国三到四年，也基本是一年多一篇。英国这边是导师制，和国内很像，你的导师会和你meeting regularly，确保everything is on the track. 所以你毕业时，手上有个3，4篇working paper很正常。多的当然也有，但质量如何不做评价。 研究idea从何而来，有的时候是导师直接到时给大致的方向，有的时候是自己通过看论文，想出来的。 </p>\n<p data-pid=\"L1pqbwcG\">2 我是英国博士。博一就开始做研究。英国的制度是每半年检查。刚开始来的时候也不知道该做什么，就逮着导师的论文以及相关的论文疯狂的看，看了大概3个多月，才有一个初步的想法，找导师讨论。导师觉得可以，然后就开始做。大多数人第一篇论文的idea是最难的。研究刚起步，对相关领域文献不熟悉都是原因。一个idea最后能不能做出来，做的结果如何，都是没有人可以保证的。很多时候都是做着做着发现有各种各样的问题。大多数问题并不是简单的可以解决或者无法解决。而是有很多可以解决问题的办法，只是有的解决办法更好，有的更像是妥协而已。顶尖期刊的论文，大多数是对研究中出现的各种问题都能够比较好，或者巧妙的处理。对于博士而言，遇到问题实在解决不了，可以先妥协着解决一下，等以后自己的能力更强一点，回过头来在看能不能解决。写论文是一个非常长期的过程。要revise很多遍。</p>\n<p data-pid=\"vMyIdJQW\">3， 导师的指导取决于导师个人。但是个人经验就是，读博士就是自己成为一个独立researcher的过程。不要期待你遇到的问题导师都可以给你解决。更多的时候，导师是在你卡住的时候，给你一些解决问题可能尝试的思路，行不行，你要自己去试。或者在你写论文的过程中，不停的问你问题，有点像审稿人，提升你论文的质量。如果非要说一篇论文的工作分配，基本上90%都是你自己在操刀。但是这并不代表导师不重要。事实上，导师的工作很多时候起画龙点睛的作用。</p>\n<p data-pid=\"wHxlhFge\">4 个人经验，一定要多读论文。做研究没有捷径，想idea也没有捷径，就是多读论文。每天都要读，保持良好的阅读习惯。见得多了，你就知道怎么写论文了，怎么想idea了，自己写的论文大概能发表在什么级别的期刊上。</p>\n<p data-pid=\"g_ZkzkYq\">论文发表可遇不可求。但是有一点非常重要，就是要保持和导师的积极沟通。导师supervise你基本上纯做公益。大家都很忙的。所以，你必须足够努力，有效沟通，才能让导师愿意花更多的时间在你的research上。大多数导师要teaching，有family，自己有coauthor，带好几个博士，这么多工作同时进行。不要过多期待导师天天对你一对一进行指导，或者用心帮你思考你的问题该怎么解决。他们没有那么多时间，也没有那么多精力。所以，你必须足够努力，否则，导师也慢慢不会花时间你身上了。</p>\n<p data-pid=\"fA1kCyjU\">个人经验，希望对你有些帮助。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/chi-square-59?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">正念</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/536795472/answer/2640402550?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">12 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/448207147?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">经济学博士阶段改如何学习，目标是在顶刊发文？</a><br><a href=\"http://www.zhihu.com/question/490932244?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">经济学类的硕士，硕士期间发paper对找工作的作用大吗？是否是把时间用在考证上更合适？</a><br>\n","link":"http://www.zhihu.com/question/536795472/answer/2640402550?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"如何评价游戏《勇敢的哈克》？","date":"2022-09-13 06:29:55","description":"\n<p data-pid=\"b4AmS09U\">上个月游戏发售前我写了一篇万字长文，复盘了开发  《勇敢的哈克》（HAAK）的整个过程，用来回答这个问题不一定合适，但是还是想发一下，以下是正文。</p>\n<hr>\n<p><img src=\"https://pic3.zhimg.com/v2-c935901da9f378641c64c3b20c9fb376_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1500\" data-rawheight=\"500\" data-watermark=\"watermark\" data-original-src=\"v2-c935901da9f378641c64c3b20c9fb376\" data-watermark-src=\"v2-e59a1f05791ed853031da89c7b12b09b\" data-private-watermark-src=\"v2-7d7be1836b726756316744b5174e90e6\"></p>\n<h2>前言</h2>\n<p data-pid=\"2AJopV5z\">  《勇敢的哈克》具体是什么时候立项的已经没有人记得，我只知道开发组的群是2018年1月23日创建的，已经过去快五年了，一个人的青春又有几个五年？TapTap上的一个玩家说他从高中开始预约，等到现在大学都毕业了，而我也从三十出头的年纪熬到了三十好几，一个人最黄金的时期，我全都倾注在《勇敢的哈克》上了，未来我还能为一个游戏投入这么多吗？我很怀疑。</p>\n<p data-pid=\"jpx3VkUY\"><br>   今年年初的时候《勇敢的哈克》的开发就已经接近完成，但为了能和Switch版能同步发布，我们一直在等待着任天堂的审核，这段时间除了一些小的修修补补也没太多事可做，甚至有时候闲得让人发慌，而之前的开发日程是高频而高压的，尤其是到了开发中后期，身心异常疲惫只想快进到终点，但这一刻真正到来之后我却没有感受那种如释重负的快乐，也许游戏开发本来就没有终点，接下来我们还需要想办法做好宣发，毕竟咱们这碗酒还不至于香到不怕巷子深，该吆喝的还得吆喝，赚钱嘛，不寒碜。</p>\n<p data-pid=\"nXTh-2Ug\"><br>   无论如何，生活是慢了下来，我也有了些闲暇时间，可以好好回顾这漫长但又像开了两倍速一般快进的五年。</p>\n<h2>2018年 </h2>\n<h3>1、开发组的建立</h3>\n<p data-pid=\"XunkHsGt\">  竹子是我在2016年认识的，当时我正在做自己的第一个独立游戏《镜界》，他的Blingame可口游戏工作室也刚起步，大家都在还在游戏开发这条路上摸索，偶尔我们也会一起交流下。竹子比我年轻几岁，算是深圳土著吧，不是那种穿着人字拖去收租的广东仔，但年纪轻轻就自己创业当老板，这也很广东了。</p>\n<p data-pid=\"1tXvDEqm\">  2018年初的一天竹子找到我说想要合作一款动作游戏，有些不客气的说，那些年想找我合作的人是不少的，竹子只是其中一个，而且看上去也不是最有前途的那一个，毕竟他的计划是让一个刚工作不久的技术小哥跟我搭档，这让我一度很是怀疑。</p>\n<p data-pid=\"vZemDBFH\">  我提出需要先做个简单测试，几天后竹子就发来一个demo，试玩过后我感觉是可行的，最重要的是我感受到了诚意，于是决定合作看看。</p>\n<p data-pid=\"VM3t2fGc\">  去到竹子的办公室后，第一次见到了我的程序搭档M，瘦瘦的，戴眼镜，但不穿格子衫也不背黑色双肩包，发型还有点浪（实际上他后来越来越浪了），喜欢玩黑魂、怪猎这种硬核动作游戏，这大概就是我对他的初始印象，总之《勇敢的哈克》最初的研发二人组算是就这么成立了。</p>\n<h3>2、原型探索</h3>\n<p data-pid=\"W1DAoBlx\">  其实最初我的方向反而是很很明确的：6个月左右做完一个平台动作手游，玩法主打射击+平台跳跃，主要参考的游戏是手机上的《青蛙爆破者》。如果严格按照这个目标其实是可以按时完成的，毕竟我做的上一款游戏也是这样的开发节奏，这次理应可以做得更快更好。但随着开发的展开，我越来越不再满足于只是做一个有些重复感游戏，我感觉内心深处有一股神秘力量在聚集，驱使我不断在危险的边缘试探。</p>\n<p data-pid=\"XSSNB2Z7\">  我开始在玩法上进行了一些探索：我为主角设计了一把全角度发射的榴弹枪，接着我又设计了可以远程控制开关的黑客玩法，最后又做了一个可以辅助射击的无人机，花活儿可谓不少，但从各方反馈来看，这个组合的体验并不好：节奏缓慢，重心分散，上手难度高，操作对于手机玩家来说很复杂，解密也很重度……尤其最后这点和我的预期是违背的，我从来没打算要做一个重解密的游戏。</p>\n<p data-pid=\"OJS4m-p-\">  此时游戏已经做了有4个多月，我们还困在原型摸索阶段，“6个月做完”的计划基本宣告失败，竹子也开始有点着急，不断催促我，我必须尽快确定游戏的方向了。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-ae6257492c0f47c73dec3503c11d74b0_720w.jpg?source=b1748391?rss\" data-caption=\"这是最早的一张概念图，当时只是随便设计了一个比较赛博朋克的角色，这套设计几乎一直沿用了下来，除了那个耳机和手枪\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"watermark\" data-original-src=\"v2-ae6257492c0f47c73dec3503c11d74b0\" data-watermark-src=\"v2-8686f6f371e11295b3be6d0ded5220c2\" data-private-watermark-src=\"v2-ac9352715ab463eab2a931cd734928fe\"></p>\n<h3>3、HAAK！</h3>\n<p data-pid=\"A_Kb_ldI\">  此时我再次想到了《忍者印记》，之所以要说“再”是因为《忍者印记》经常被我找来当参考。那是一款我很喜欢的2D平台动作潜行游戏，很多人说《勇敢的哈克》像《空洞骑士》，但其实我觉得《忍者印记》的痕迹更重，尤其是画风深受其影响，我想这无需掩饰。</p>\n<p data-pid=\"zg6mniGd\">  《忍者印记》里还有一个钩爪玩法给我留下很深的印象，其实这个玩法在很多游戏里也能看到，不过大多数情况下都仅仅是一种和场景互动的位移技能，而我此时想的是，为何不把它做成一种同时能兼顾攻击的武器呢？我把这个构思跟M分享了下，他表现出了很大的兴趣，于是我们说干就干。</p>\n<p data-pid=\"LHoVXcOs\">  接下来的时间里我们都在全力钻研钩爪的战斗玩法，这个过程其实没有太多可以参考的。《恶魔城》系列的里希特使用鞭子来攻击，这有点接近我想要的感觉，但我们还需要考虑全角度的发射，自动瞄准的逻辑等等问题，所以很多时候也只能自己摸索。说到底这就是一场赌博，因为钩爪会颠覆既有的玩法，意味着之前几个月的工作成果将被舍弃大半，如果这个方向还是不行，那恐怕所有人都会失去信心，这个项目也会就此终结罢。</p>\n<p data-pid=\"r3bxGyJ-\">  时间来到了2018年8月，全新的版本迎来了新一轮测试，总体而言大家对钩爪的评价要好过之前，钩爪方案被正式确定下来（但距离完全定型其实还差一步，这是后话了）。尽管还有诸多不足，但游戏的大方总算是基本明确了，我对这个项目也开始有了一些信心。</p>\n<p data-pid=\"M0-tHApG\">  原计划的死线反正也过了，制定新计划势在必行。一番考虑过后，我做了几个决定：第一，将首发平台定在PC端，因为我认为这个游戏是有潜力在PC市场上搏一搏的；第二，游戏类型由传统关卡式平台动作进化为类银河战士恶魔城，这是基于前一个决定的决定，显然类银河城在PC平台上拥有更好的热度，自己也玩过几个类银河游戏，也看过一些Mark Brown的视频（拆解关卡设计的Boss Key系列很受用），十分认可这种非线性的关卡设计，于是也想自己挑战下，总之就是自己挖了一个大坑，但开坑一时爽，填坑两行泪。</p>\n<p data-pid=\"Cka1sTvG\">  也就是这段时间里我们还敲定了游戏的英文正式名称：HAAK（全大写），同时也是主角的名字Haak（首字母大写，音译哈克）。“Haak”其实是“黑”的粤语拼音，这么取名的原因很简单：主角是个“小黑人”（实际上只是戴了黑色头套），而我们又是一个广东深圳的团队。有意思的是，后来有一个外国网友说在荷兰语里Haak的意思就是“钩子”（英语为Hook），我只能说这太巧了！</p>\n<p><img src=\"https://pica.zhimg.com/v2-56192925dbfc8d1dca32d5e7d1623264_720w.jpg?source=b1748391?rss\" data-caption=\"郭女士是哈克的头号测试员，但她其实是从不玩游戏的人，这么做是因为我记得我的语文老师说过，白居易会给目不识丁的老太婆读他的诗\" data-size=\"small\" data-rawwidth=\"2448\" data-rawheight=\"3264\" data-watermark=\"watermark\" data-original-src=\"v2-56192925dbfc8d1dca32d5e7d1623264\" data-watermark-src=\"v2-3bbb5caad8f439ebab9b0c59a5dd9297\" data-private-watermark-src=\"\"></p>\n<h2>2019 </h2>\n<h3>4、新的一年</h3>\n<p data-pid=\"16BXKVOs\">  2019年的春节过后，《勇敢的哈克》也迎来了开发的第一个周年。</p>\n<p data-pid=\"o0u2Hr27\">  那天竹子的电话来得很晚，铃声响起时我的小心脏强烈地泵了一下血……到底什么事会这么急？我皱着眉按下了接听键，竹子一开口，他的腔调流露出难以掩饰的兴奋:《勇敢的哈克》获得了在京都BitSummit展出的机会（此处要特别感谢CiGA中国独立游戏联盟的Simon）！那么问题来了，BitSummit到底是个啥？</p>\n<p data-pid=\"ZkplIXmR\">  我简单搜索了下，了解到这大概是日本最大的独立游戏节，然后和旁边正在看电视的郭女士分享了这个消息，她的神态流露出难以掩饰的兴奋，这时我也感到后劲上来了……我们真的要去日本展出了吗？而且还是京都？电子游戏祖师爷任天堂的所在地？</p>\n<p data-pid=\"xVbi83eA\">……我想起在夕阳下奔跑的那个少年，追逐着自己的影子回了家，他甩下书包解开红领巾，三步并作两步爬上了柜子，摸出一张在夕阳的透射下闪耀着金光的“699合1”，但来不及让我再多欣赏一眼，少年已将卡带插入红白相间的“学习机”，随着“咔嗞”一声响起，三洋牌电视机亮了，少年和水管工兄弟的冒险正式开启，在老爸下班回来之前，他还能再争取拯救一次公主……</p>\n<p data-pid=\"PazU-5rh\">  此时，是郭女士的一句话把我从恍惚中拉了回来：“你们真的准备好了吗？”</p>\n<h3>5、准备参展</h3>\n<p data-pid=\"4rHHA8wh\">  其实今年原本的第一个目标也是完成垂直切片版本，我们需要这样一个相对成熟的试玩版来向外界传播《勇敢的哈克》，只是没料到会这么快就开始参加游戏展，不过总的目标是契合的，只是我们需要做得更快更好。</p>\n<p data-pid=\"XqX7UpKW\">  作为日本最大的独立游戏展，BitSummit届时将汇聚来自世界各地的玩家、发行商和开发者，甚至还会有五十岚孝司这样的大佬，那是一场考验，也是一个很好的机会，一点都马虎不得。现在我们距离一个可以公开亮相的Demo还差什么？一场体面的Boss战。在做《勇敢的哈克》之前我只是设计过一些很简单讨巧的Boss战（不会位移的那种），这次我需要设计一个很范式化的2D平台动作游戏的Boss，这对我来说是全新的挑战，毫无疑问我又需要找一些游戏来作参考。</p>\n<p data-pid=\"z8MauNzq\">  尽管一开始我想要尽量避嫌，但我发现如果我要做一款类银河城游戏，视线就不可能绕开《空洞骑士》，作为现代类银河城游戏的标杆，它太过耀眼，就连更早火出圈的Ori也在二代开始模仿它。假骑士是《空洞骑士》里那种会让人过目不忘的Boss之一，他的招式很典型，难度也恰到好处，同时他还有很强的叙事性（确实是字面意义上的假骑士！），总之就是优秀设计的范本。</p>\n<p data-pid=\"Gqk_4pX9\">  可以坦诚的说，《勇敢的哈克》的第一个Boss就是以《空洞骑士》里的假骑士为基础来设计的，有些细节甚至不能说很像，只能说是一模一样，当然这也不是什么值得骄傲的事，但也不可耻就是了，对于现阶段的我来说，多“借鉴”是务实的做法。</p>\n<p data-pid=\"VwnVc3Ya\">  当此时距离6月份的BitSummit展还剩下不到两个月时间，这段时间的工作甚至要比做Boss更艰巨：原型关卡需要装饰美化，需要剧情来串起流程节点，还需要一些过场演出动画来增强氛围。这次也是我第一次用unity来开发游戏，实属开荒，每个模块的管线都几乎是从零开始摸索，效率不可谓不低，眼看着时间一天天过去，需求还堆积如山，只能每天肝到凌晨，几乎也没有周末，就这样一直高负荷运转。</p>\n<p data-pid=\"OJ6B-xgh\">  几乎是在出发前两天，所有既定目标才算完成，看着眼前这样一个精心打磨过的Demo，说真的，当时的我是非常满意的，我甚至开始幻想这个Demo会不会在游戏展上会引起轰动？最后搞不好还能拿个展会大奖？不得不说，当一个人为一件事付出过多时，容易产生幻觉。我对于即将到来的展出，有着谜一般的自信。</p>\n<h3><b>6、BitSummit</b></h3>\n<p data-pid=\"uTSp7ypl\">  5月30号一早我们一行人在蛇口搭乘轮渡到了香港，接着直飞大阪关西机场，下了机后远远就瞥见那熟悉的“任天堂红”：入境大厅的墙上贴着马里奥大叔的海报，上面用各国语言写着“欢迎”，我确认这里就是日本了。办完通关手续后我们又马不停蹄地搭乘机场大巴赶往还在京都的民宿，看着大巴车窗窗格外流转的日式街景让我回想起种种往事，恍惚中好像看到了大雄和小叮当正坐在房顶上看星星。</p>\n<p data-pid=\"N42oO-8q\"><br>  五月底的京都晚上还有些微冷，沿街都是很传统的日式建筑，看似是店铺其实又是民居，有点像中国那些古镇，不同的是这里没有什么光污染，招牌配色也很克制，只可惜大多都关着，行人也三三两两，还没有猫多，我想我老家十八线县城都比这里热闹，好在我们入住的民宿附近还有一家料理店开着，传统日式窗棂透出橘色的光，哪怕很微弱也能在这深青色的街角晕染开来。</p>\n<p data-pid=\"4aD3_Tw4\"><br>  这次weplay组织了10个国人团队来联合参展，我们和其他团队连成一排来展出，我们的位置在最中间，在人挤人的展会里其实很容易被忽略，这时候发传单就显得尤为重要，带去的300多张传单基本上都发完了（感谢郭女士），甚至有时候我们的展台还出现了排队，这其实挺不容易的，毕竟旁边不是索尼中国之星就是Devolver Digital的展台，哪个都比我们耀眼。</p>\n<p data-pid=\"wzJu9vaC\"><br> 参展也是个体力活，我们每个人只能轮流坐一下，吃饭也是随便蹲在角落扒两口，大多数时候都得站着，M的日语很溜，也就承接了和日本玩家的沟通工作，一天下来大家都是腰酸背痛腿发抖。那次展会除了玩家也遇到了不少有趣的同行，比如做《大叔向前冲》（App Store首页推荐过）的香港大叔梁健锋，和他聊了一下后发现这老哥带来的新作《波古波古》一开始就是为他儿子定制的，这大概就是游戏人最大的浪漫了吧……另外还遇到了做《8道门：雅兰的来世冒险》的韩国胡子哥，同为类银河城的开发者，他好像非常关注《勇敢的哈克》，经常跑来我们的展台玩，只是大家都英语很蹩脚，交流起来略有点尬。</p>\n<p data-pid=\"36dxC2Xa\"><br>   BitSummit在哄哄闹闹中结束了，我曾幻想的那些高光时刻没有出现，反倒是不少反馈让我十分忧心。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-a3b570f6d0b465db7a7d4acbeb917f91_720w.jpg?source=b1748391?rss\" data-caption=\"哈克在BitSummit会展上的海报有点不起眼，但竹子从国内带过去的一个霓虹灯还是挺骚的\" data-size=\"small\" data-rawwidth=\"3024\" data-rawheight=\"4032\" data-watermark=\"watermark\" data-original-src=\"v2-a3b570f6d0b465db7a7d4acbeb917f91\" data-watermark-src=\"v2-88eb64266b19efb50ff544be19527237\" data-private-watermark-src=\"v2-fceeae8e6f942c0f2d9dec33fbeed30b\"></p>\n<h3><b>7、近战</b></h3>\n<p data-pid=\"2rkpfLQJ\">  从日本回来后，我们开始针对展会上的反馈进行高密度的会议讨论：现在的版本确实有着较高的完成度，手感和细节都打磨得比较好，但大家都觉得玩起来还是有点平，节奏比较慢，解密的氛围还是有点重。一番头脑风暴过后，我们决定先尝试加入连招系统来增强战斗上的技巧性。通常来说，钩爪需要搭配其他近战玩法才能玩出连招花样，这是不是意味着我们也需要加入近战攻击？<br>   我一直很想单独依赖钩爪来做出各种拓展玩法，但尝试了一些玩法原型后，效果总是不理想，问题就在于发射钩爪是一个必然很有节奏感的操作，发射出去还要收回，玩家也就没办法“莽”，操作门槛就自然高了。</p>\n<p data-pid=\"q0PFDGeJ\"><br>   我已经在玩法上花费了太多时间了，再这么摸索下去有点没完没了，一番思想斗争之后最终还是决定加入近战系统，这也是一个不小的变化，对整个游戏的调性的颠覆性其实不亚于用钩爪替代榴弹枪的那一次，这也意味着在开发一年半之后，玩法依然在变，这种失控的情况不能再继续下去了。</p>\n<p data-pid=\"9j98Uc3w\"><br>   高强度开发一个月后，近战系统得到实装，玩起来更像主流平台动作游戏了，但之前困扰我们的一些体验问题也算是得到了解决，至此，《勇敢的哈克》的核心玩法终于定型。</p>\n<h3>8、哈克的最终造型</h3>\n<p data-pid=\"zSDmGTZC\">  在一开始的设定里，哈克是一个戴着骚气耳机的黑客，而现在的哈克更像是一个武艺高强的忍者，世界设定也由赛博朋克变成了废土朋克，所以哈克的造型已经不符合现状，我决定对整个主角的造型进行一次变更，顺便再把角色动画提升一下质量。</p>\n<p data-pid=\"OMSlj-jf\"><br>   新造型调整了披风颜色，去掉了耳机，眼睛的造型上略有调整，比以前圆润的眼睛要看上去成熟了一些，再就是增加了一些身体结构的细节，不再那么像简单的火柴人（但后来发现玩家普遍觉得还是像火柴人），总的来说变化不是特别大，依然延续了从一开始的简约风格，我希望这样icon化的设计能让这个角色更容易被识别与传播。</p>\n<h3><b>9、第二关</b></h3>\n<p data-pid=\"gzJjXxJ9\">  2019年的下半年，随着玩法的逐步巩固和美术包装的进一步优化，切片版本的目标算是基本达成，项目也正式开始进入铺量的阶段。如果说第一个关卡作为教学关必须相对线性些，那第二关开始就没理由不放开手脚，我已经迫不及待让“类银”的味道浓起来了。</p>\n<p data-pid=\"b4U5MI4V\"><br>   第二关北站是游戏中首个可以多路径探索和破序的地图，原型关卡大概不到一个月就做完了，但最终完整成型却花了三个月，因为这一关的一大特征就是动态光影，配置起来非常复杂而耗时——闪烁的点光源和聚光灯，按房间配置的室内外明度不同的全局光，特殊形状的光照，还有搭配发电机玩法的光源启停……最终效果还是不错的，光照这套工作流也算是打通了。</p>\n<p data-pid=\"WaNxcgHd\"><br>   这段时间竹子开始接触发行和注册商标，也在TapTap上开启了游戏页面。我们正式确定了游戏的中文名叫《勇敢的哈克》，后来很多人问为什么取这么个感觉像儿童读物的名字，其实一方面是为了方便注册（单独叫“哈克”会比较难注册上），另一方面，我有上了年纪的人都有的俗气爱好：喜欢复古怀旧的东西，《勇敢的哈克》让我想起了小时候最爱看的动画片之一：《舒克和贝塔》，我甚至都想好了中文LOGO要参考90年代美术片的字体来设计，总之这个命名是落在我个人审美上的。</p>\n<h3><b>10、追逐战</b></h3>\n<p data-pid=\"B97B5LrV\">  2019年的时间已经所剩无几，我的目标是再制作一个和北站的玩法和节奏都不一样的关卡，一场追逐战就应运而生了。</p>\n<p data-pid=\"Qhg8tJhX\"><br>   但凡玩过Ori的人恐怕都无法忘记银之树那场逃亡战，那是就连Ori自己都无法超越的巅峰（2代的逃亡战我甚至都能初见过），我希望自己也能打造出这么一场让人血脉喷张的逃亡战。</p>\n<p data-pid=\"8CI3xXDQ\"><br>   逃亡战大体上可以分成两类：倒计时逃脱和Boss追逐逃出，前者常见于《银河战士》系列，采用后者的则更普遍，比如《蔚蓝》、《雷曼：起源》等等都属于这类，要选择哪个方案呢？我不想做选择，我全都要！这个决定不能说冒险，只能说是浪得飞起。</p>\n<p data-pid=\"R0I70kn9\"><br>   按照我的构想，这是一段持续时间非常长的逃亡战（相对于其他游戏来说），整个序列又分割成四个小段落，每个段落都是独立计算的倒计时，玩家的首要目标是按时完成每一段逃亡，同时还有一个机甲Boss会在不同阶段出来干扰你，并在最后一个段落开始追击你，听上去是个不错的方案？</p>\n<p data-pid=\"SKaM1iBN\"><br>   除了设计，技术上我也想要有一些新尝试。在外网冲浪时我发现程序生成动画（procedural animation）非常有魅力，非常适合作为大型生物的运动逻辑，如果能用这套系统来驱动我们的机甲Boss，那效果一定会很有冲击力！而我也发现，M对游戏开发的奇技淫巧是有一些研究的，不管是AI寻路还是shader他都有一些积累，这次的需求在我简单沟通之后，他就兴致勃勃地开始研究起来了。</p>\n<p data-pid=\"uLoonFO0\"><br>   半个月后，M把一个完全由程序驱动的机甲Boss摆在了我面前，把玩起来那是相当的丝滑，我迫不及待地将它实装进关卡里，并根据M实际实现的一些特性，在关卡设计上做了一些相应的调整，最终的效果是超过我期望的，其实我们俩很多时候的合作都是这样的，就是我先提出一个总的框架，他会在原基础上增加一些额外设计，这些拓展出来的特性又会反过来刺激我的设计，从而产出更多的点子。</p>\n<p data-pid=\"7_mk-5hs\"><br>   2019年的年末，开发者同行群里的一个住在武汉的小伙伴说那边爆发了一种新的流感，说得好像很吓人，再后来的事大家都知道了，2020又是不平凡的一年。</p>\n<p><img src=\"https://pica.zhimg.com/v2-0f7d67389af7f5c774485c11ea24429e_720w.jpg?source=b1748391?rss\" data-caption=\"哈克的造型探索过程\" data-size=\"normal\" data-rawwidth=\"1341\" data-rawheight=\"863\" data-watermark=\"watermark\" data-original-src=\"v2-0f7d67389af7f5c774485c11ea24429e\" data-watermark-src=\"v2-acf1a9afd4ec0a5f2d4869d5ba120cb8\" data-private-watermark-src=\"\"></p>\n<h2>2020</h2>\n<h3>11、准备上线</h3>\n<p data-pid=\"5ptSufqr\">  其实在新冠没有爆发前我就已经决定不回老家过年，我只想尽快把逃亡战做完。这次的美术装修比以往都要顺畅，春节放假之前我把这一关做完了。当时自己体验起来感觉特别爽，是的，我又自我感动了。但通过后续的测试，一些问题也开始浮出水面，其中最突出的是难度问题，作为创作者其实很难感知这一块，因为每一个设计点都过于熟悉，相当于开卷考试。我原以为第二关做了三个月已经是极限了，但这个体量上只有10来分钟的逃亡战（前提是不怎么死），最后变成了我们投入成本最多的关卡，前前后后花了至少半年时间来完善。</p>\n<p data-pid=\"jNgkOwMC\"><br>   每年春节深圳就会变成空城，今年比往年更空，四周沉寂得不像是有人类文明存在。我坐在电脑前一整天，听到楼下路口的减速带只被车压过两次，其中一次还是小区里收垃圾的三轮车，楼对面那个大爷再也没吊过嗓子，让我这个听众很不习惯，下楼丢垃圾时总算是见到了一个邻居，她全副武装，看到我后立马退后三步让开了道，仿佛看到了鬼。打开百度地图，那些往日里总是梗阻成深红色的路段如今都是绿油油的通畅，整个城市都空荡荡，我甚至可以在南海深南立交上开到80码，畅通得让人忍不住想要高呼：“I am the king of the world!”</p>\n<p data-pid=\"A4i9FkBi\"><br>   在疫情彻底爆发之前M就已经回到湖北老家过年，现在一时半会是出不来了，大家都只能远程办公，对于在家已经工作了快5年的我来说倒也不是什么新鲜事，但未来形势不明朗，不安的情绪在堆积，作为公司老板的竹子比以往任何时候都要焦虑，这两年他的头发在以肉眼可见的速度变白。</p>\n<p data-pid=\"gVMkAAT0\"><br>   今年不管如何，游戏都必须上线了，这是所有人的共识。目前的情况是：游戏已经拥有了三个主要探险关卡和一个城镇关卡，第三关逃亡战的水准被一致认为是当前最好的，对比之下第一关和第二关就显得有些虚，接下来的目标就是全面提升前两关的体验，然后把这三关以抢先体验版（EA）的形式在Steam上发布，之后再逐步更新完善游戏。</p>\n<p data-pid=\"ZPgPTvV3\"><br>   我首先重构了第二关，大到整个流程结构上，小到单个房间设计上，几乎是都重做了，这种大刀阔斧的修改看似很痛，但其实很爽很减压，得益于这2年多来积累的工具链和工作流，工作量也并没有听上去那么可怕，整体施工起来是高效的，也就是大概不到一个月，全新的第二关就完成了。</p>\n<p data-pid=\"yiN6q1AG\"><br>   第一关可以说是迭代过无数次了，从立项开始算起的话，怎么也大改过6、7次了吧，最近一次改是去年为了参加BitSummit，那次改过之后自我感觉是很好的，感觉就是已经到了极限了，我还记得当时跟M说过：“这关再也不会改了。”但人就是在反复打脸中长大的，不是吗？</p>\n<p data-pid=\"_4sIUTVX\"><br>   这次对第一关的修改也是颠覆性的，彻底打破原有的拘谨结构，整个关卡的布局全部舒展开来，让不同挑战之间有了更多“气口”，节奏舒服很多，同时也使得迷你地图有了更好的可读性与记忆点，寻路更方便。焕发新生的第一关在我看来又双叒叕一次达到了极限，我又一次被自己的进步感动到流泪，但距离下次打脸已经不会太遥远。</p>\n<p data-pid=\"qSLwkfek\"><br>   如今的版本拥有了三个成熟的关卡，已经初步具备商业化的素质，我们决定《勇敢的哈克》将在2020年9月份开启Steam EA。从2020年4月份开始，我们一直都在完善游戏的各个系统，比如存档的逻辑、键位自定义等等，总之就是朝着真正商业化品质不断迈进。</p>\n<p data-pid=\"rHvfi5sJ\"><br>   对于一个非Roguelike的类银河城游戏采取EA模式其实并不常见。之前我也一直追踪观察《东方月神夜》以及《蒂德莉特的奇境冒险》，这两款类银河城也都以EA模式发布，他们会隔2、3个月更新一个关卡，持续个1年左右，做到5关左右的体量，最终也得到了玩家的认可，当然不排除有一定的IP加持效果。</p>\n<p data-pid=\"s_vNceil\"><br>   先不管外部观感，但就游戏开发本身而言，银河城类游戏的要素就是自由探索和回溯，理论上应该从全局出发，把所有关卡都规划好，在原型阶段就疏通所有关卡之间的连通和回溯关系，然后再去细化，现在如果要一关一关地去做更新，整体上如何把握？《东方月神夜》实际上是简化了整个结构，全局上还是偏向线性，自由探索和回溯设计相对比较简单和局限，这样的设计难度更小，也更好把握整体，哈克目前三个关卡的结构其实也是走的这条路线，效果如何还有待验证，目前只能是走一步算一步了。</p>\n<p data-pid=\"ixTfYom4\"><br>   随着距离上线的时间越来越近，我们的各种宣发活动也开始发力，不过因为疫情缘故，今年的所有游戏展也变成了线上，想起去年这个时候我们还能在海外跟玩家近距离沟通，如今却只能守着显示器看直播，算是有点小小的遗憾，不过总归也是有曝光，《勇敢的哈克》开始密集地出现在科隆、东京电玩等各大游戏展上，媒体报道也越来越多，配合着Steam页面的正式上线，愿望单开始快速增长，看上去形势很喜人，所有人在此时对游戏的期望都达到了高潮。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-1755030f42c5428229983738ad990e86_720w.jpg?source=b1748391?rss\" data-caption=\"哈克参加了当年的科隆游戏展，并在Steam专题页面展出\" data-size=\"normal\" data-rawwidth=\"1553\" data-rawheight=\"1108\" data-watermark=\"watermark\" data-original-src=\"v2-1755030f42c5428229983738ad990e86\" data-watermark-src=\"v2-7844339bade11587374cddeb04e88907\" data-private-watermark-src=\"\"></p>\n<h3>12、登陆Steam</h3>\n<p data-pid=\"lARgbDhX\">  2020年9月16日，《勇敢的哈克》正式在Steam以抢先体验版的模式发布，此时距离游戏立项已经过去两年半。你要问上线前那晚上我激动吗？我想也不能说不激动，但似乎远没有上一款游戏上架前夜那样让我难眠。</p>\n<p data-pid=\"_HgIBvNy\"><br>   上线前一周，《勇敢的哈克》登上了Steam的“热门即将推出”榜单，这是个不错的开头，但正式上架后却没能登上“新品与热门商品”，这意味着第一波销量并不如意，这样一来后续也很难再推高，事实上也是如此，首周销量远没达到大家的预期……</p>\n<p data-pid=\"_iT7fKWE\"><br>   对于这个结果我虽然也失望，但并没有特别意外。从宣发上来说，我们其实没有完全准备好，曝光度不足，上架有些仓促，我们那些看似很漂亮的愿望单数量，实际上很多都是靠营销活动吸引而来，转化率不可能高；从产品上来说，首发版本一些手感、难度曲线的问题比较突出，加上关卡体量也比较小（只有三关），导致口碑在第一时间有点崩，同时我认为玩家对于一个采用EA模式发布的类银河城游戏是持有怀疑的，总之观望的氛围很重。</p>\n<p data-pid=\"O4z-RU6P\"><br>   尽管我们从立项开始就一直在做玩法测试（playtest），也及时纠正过很多错误，但直到真正上线了才发现还有这么多潜伏的问题，不过这不就是EA的意义所在？我们先紧急修复了一些严重的Bug，其他体验上的问题我打算在后续版本大更新中逐步优化，这事急不来，那些差评是很刺眼，但不能因为这样就匆忙去迎合玩家，游戏开发者既不应该闭门造车也不应该让玩家教你怎么做游戏。</p>\n<p data-pid=\"L31L3BoB\"><br>   按照既定计划，我们在EA后一个月后进行了第一次大更，除了新的关卡，游戏体验也做了一些优化，包括各种动作的加速，前后摇的压缩与打断机制，优化的方向就是让操作反馈更及时，减少硬直，加快节奏，这些要素都决定了玩家字典中的“手感”。</p>\n<p data-pid=\"YHsQM_kN\"><br>   我发现我做动作游戏总是容易把节奏做慢，总是不自觉地就做成了“回合制”动作游戏，可能是源于我对动作细腻感的关注过高？游戏的动画流畅度确实受到玩家一致好评，但动画流畅不代表玩起来就丝滑，过度关注美术表现而忽略了实际操作体验，是我一再犯的错，开发者总是容易陷入到技术陷阱中去，更可怕的是，这种陷阱还用一种虚幻的安全感包裹着你，让人难以抗拒挣脱。</p>\n<p data-pid=\"b3o7ShEy\"><br>   从上线EA后到2020年底，我们总共更新了7次，其中包括两个全新的关卡，这个效率其实不算低，但依然满足不了玩家对于新内容的需求，这是压力也是动力，玩家催更对开发也是一种鞭策。</p>\n<p data-pid=\"UTBkLJrJ\"><br>   至此《勇敢的哈克》的开发进入了一种稳定的状态，不再有太大波澜，手感问题得到了较大改善，但难度曲线和引导问题依然不够理想，未来还有很长的路要走。</p>\n<p><img src=\"https://pica.zhimg.com/v2-3ecf08e1938690c6c85c949486a58cf2_720w.jpg?source=b1748391?rss\" data-caption=\"2020年我们入围了indieplay最佳美术奖，一位坐在轮椅上的玩家正在玩哈克，这很触动我\" data-size=\"small\" data-rawwidth=\"690\" data-rawheight=\"1227\" data-watermark=\"watermark\" data-original-src=\"v2-3ecf08e1938690c6c85c949486a58cf2\" data-watermark-src=\"v2-2aed0b54f9a3d790c7bc07d797ec2115\" data-private-watermark-src=\"\"></p>\n<h2>2021</h2>\n<h3>13、再次回炉</h3>\n<p data-pid=\"Q1zd3Kwr\">  今年的目标：把游戏做完。</p>\n<p data-pid=\"mC6ZVx1N\"><br>   但一直这样做下去，游戏就会变好吗？他主张再次回炉，把前面的关卡再提升下品质，而我认为《勇敢的哈克》经过几个版本的更新后，体验已经有了一定提升，应该先把关卡继续做完再整体来调优，但这种意见分歧无关对错，更多是方法论的选择，所以我也没必要太坚持自己，选择竹子的路线也确实能尽早让游戏的潜力充分暴露出来，可以更早提振团队士气，这也很好。</p>\n<p data-pid=\"-ktq0tHc\"><br>   从登陆EA后收集到的反馈来看，大家普遍认为《勇敢的哈克》的最大乐趣是探索。其实早在做上一款游戏时我就发现玩家很乐于寻找隐藏要素，这次我也在游戏里的几乎每个角落都设计了隐藏房间，可谓屡试不爽，不过我们还需要增加更多的收集物和收集配套的小系统来强化探索的乐趣，这便是这次优化的一个主要方向：强化既有优势，使之发挥到极限。</p>\n<p data-pid=\"QAqP1dSB\"><br>   这一轮优化的另一个方向则是留存率，这听起来很网游，但我认为单机游戏同样适用，如果一个玩家因为非个人喜好的原因而被迫放弃你的游戏，这是一个需要严肃对待的问题。在查看了成百上千小时的玩家实况视频之后我们发现依然有很多人会卡在一些早期的流程中，节点也非常让人意外，有的是迷路，有的是不知道通过任务日志查看密码，甚至还有不知道如何下挂平台，这类引导问题让我头痛。我其实很反感强制教程，我觉得那样既打断沉浸感也往往达不到教学的目的，我希望能尽可能靠关卡设计本身进行隐形教学，但这也对设计提出了更高的要求，这也是作为教学关的第一关被反反复复修改的原因了。</p>\n<p data-pid=\"dP81G4l5\"><br>   影响留存的另一个问题是难度曲线，一些逃亡战和Boss战在早期版本中的难度让很多玩家不爽，因为我们的游戏没有难度模式可选，每个人的游戏经验不一样但都需要面对同样的难度，这就不太合理，除了尽可能让难度曲线变得柔和，我们还需要另一套机制来平衡难度。<br><br>我们设计了一个叫“莱币”的系统，玩家每死一次就会获得一枚“莱币”，在特定机器上消费莱币可以获得一些Buff，从而动态调整游戏难度。这套系统在经过几次打磨后逐渐发挥效力，有效缓解“手残”玩家的压力，也获得了大家的认可。</p>\n<p data-pid=\"NNHXa8w5\"><br> 2021年7月份的时候，这波堪称史诗级的优化总算是完成了，游戏的所有关卡都经过了一轮优化，新增的收集探索元素也全部都实装进去，为了验证优化后的实际效果，我们紧接着又开启了Steam和WeGame的免费测试，这次参与测试的玩家数量非常多，利用游戏中的埋点我们采集到很多有价值的数据，比照之前旧版本的数据发现，新版本极大改善了一些严重的流程卡点，现在大多数玩家都能顺利通过第一关的考验了，同时社群里的老玩家也纷纷表示游戏玩起来越来越顺畅了，所以无论是从数据还是玩家切身感受来看，这波优化都是卓有成效的。</p>\n<p data-pid=\"wnpxsyTV\"><br>   2021年的夏天就这样悄悄过去了，但又没有完全过去，毕竟这里是广东。10月份的时候《银河战士：生存恐惧》（简称M5）发售了，这是类银河城圈子里的大事。我不能说我是银河战士的铁粉，但比起恶魔城来说，我确实更倾向于银河战士的玩法。之前玩过3DS上的《银河战士：萨姆斯归来》，但它给我感觉很平庸，得知M5也是这个工作室来开发的后，我确实没办法对M5抱有多大期望，但M5发布后的第一波口碑就爆了，媒体盛赞，玩家狂喜，等到我亲自尝试之后发现，我确实也没办法停下来，这一代的关卡设计简直是所有同类游戏里的天花板！我是既兴奋又叹息，兴奋是有这样一个楷模可以让我好好研究，叹息是发现自己离真正优秀的设计师还差很远。</p>\n<h3>14、关卡补完</h3>\n<p data-pid=\"ncLtuDAk\">  2021年11月1日，值得纪念的一天，《勇敢的哈克》 最后一组关卡的原型总算是做完了，虽然还要经历漫长而痛苦的打磨和装修，但至少设计上最硬的一块骨头已经啃完了，我期望这一天太久。</p>\n<p data-pid=\"NkmMutVV\"><br>   《勇敢的哈克》登陆EA初期还是一个相对线性的游戏，但我在后来的关卡设计中开始逐步放开手脚，尤其是设计最后这一组关卡时，关卡在互通性、多路径、破序和非线性上都有了更大突破，简单来说就是更加类银河城了。设计过程也比较顺利，应该说是越来越顺利了，除了经验和技术的积累，我想也绕不开心态的因素，这一段时期，我的心态平和了很多。</p>\n<p data-pid=\"VEOKuaU0\"><br>   我的心态也经历了起起伏伏，曾经踌躇满志信心满满，也曾失落失望，甚至抑郁到失眠，开发游戏是一个漫长而孤独的旅程，保持良好的心态，这比开发本身都重要。</p>\n<h2>2022</h2>\n<h3>15、开发完成</h3>\n<p data-pid=\"R7Pc8uom\">  今年从年初开始，深圳的疫情就反反复复爆发，我只能再次留在原地过年，这是我在广东连续过的第三个春节，也是《勇敢的哈克》走过的第五个年头。</p>\n<p data-pid=\"Qtqey2sm\"><br>   整个春节我都在写剧本，因为涉及到游戏最终的结局还有各种支线任务的补完，最终我写了差不多三万字的文本，加上之前的一起总共也有了十万字，我真没想到我能写这么多字出来，读书时让我写个800字作文都很困难。</p>\n<p data-pid=\"bbh54_kp\"><br>   今年3月4日，我第一次把整个游戏从头到尾打通了一次，半个月后我们在Steam上正式宣布《勇敢的哈克》开发完成，接下来的工作就主要是对接各个平台和宣发上了。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-0e32c13e5b4d1fdba0ee9e96e7bf5977_720w.jpg?source=b1748391?rss\" data-caption=\"一个忠实玩家摊牌了，他为我们的宣发十分捉急\" data-size=\"normal\" data-rawwidth=\"962\" data-rawheight=\"284\" data-watermark=\"watermark\" data-original-src=\"v2-0e32c13e5b4d1fdba0ee9e96e7bf5977\" data-watermark-src=\"v2-7946c8efca798a887161775b87e221a2\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"lBzb17pB\">  今年4月22日，我们正式更新了内测分支0.9版（实际上就相当于1.0版），不少内测玩家第一时间就打通了游戏。有几个忠实玩家不知道重玩了多少遍，每次游戏版本大更他们就重玩一遍，帮我们找到很多Bug和设计上的缺陷，如果没有他们，游戏不会是今天这个样子。</p>\n<p data-pid=\"TfvgyQQZ\"><br>   曾有一个Reddit上的用户质疑《勇敢的哈克》这样一个叙事驱动的类银河城游戏选择EA模式的合理性，如果我是一个玩家，我想我也不会去玩一个会突然卡住的类银河城半成品，这确实太难受了，但站在开发者的角度来说，我们通过EA获益颇多，如果没有EA，《勇敢的哈克》恐怕还在错误的道路上前进，甚至早已胎死腹中，而这对于游戏行业来说也再常见不过，在我的以往职业生涯里就经历过至少四次。</p>\n<p data-pid=\"fYBVxWQW\"><br>   回顾整个开发周期，我认为我们至少做对了一件事，那就是积极地通过测试来搜集玩家反馈并理性地去做出改变，尤其是在整个EA期间，我们和玩家社群（哪怕很微小）建立了非常紧密的联系，我会确保那些发声的玩家都能感受到自己有被重视，每一个声音都有可能成为塑形《勇敢的哈克》的力量，可以说这个游戏就是由开发者和社群共同缔造，正如后来某位玩家的Steam评论中所说：“参加过PC版内测，看着游戏一路成长过来，也提过几个建议，算是我玩过的游戏里参与感最强的了。”</p>\n<p data-pid=\"0rco3lRZ\"><br>   这段时间我也注意到一些玩过首发版本的老玩家的回归，不少人都把曾经留下的差评改成了好评，游戏的进步是显而易见的，经历了将近2年的EA后《勇敢的哈克》已经焕然一新，说是完全两个游戏都不为过。</p>\n<p data-pid=\"PTeySsvr\"><br>   其实从去年上半年回炉优化过后开始，游戏的品质就已经达到我的目标，也完全不怕跟其他类银河城游戏比拼，唯一的问题就是我们还需要更努力去做宣发和推广，很多新玩家都表示对我们的游戏闻所未闻，都是很意外的情况才挖掘出来的，我感到无奈，我不能接受我为之奋斗了5年的一个游戏不是因为品质问题而是因为宣发问题而消失在地平线上。</p>\n<p data-pid=\"sZo8REJc\"><br>   我们原计划是6月在PC和NS上同步发布完整版，但任天堂的审核比我想象的要慢很多，时间一拖再拖。在等待审核的这段时间，我们敲定了手游版的方案，并完成了手游版的移植。</p>\n<p data-pid=\"ODW1PpHZ\"><br>   7月29日，我们临时决定在TapTap上架了安卓版的测试，整个过程都很匆忙，TapTap也没有承诺会给我们资源，我也就没有抱太大期望，我们甚至没有发任何公告，想着反正多少能增加点曝光度就行。没想到的是接下来的两天周末时间里，《勇敢的哈克》的热度开始上涨，排名也一路往上攀，但也曝出很多手机机型不支持的问题，这时候其他的同事都在周末休息，只有我一个人注意到了这个情况，搞得我措手不及，赶紧发布了几个公告。</p>\n<p data-pid=\"v_5J9NTS\"><br>   接下来的这一周，热度则达到了顶峰，周一时直接冲到了热门总榜第一！这是那个在Steam上一直都波澜不惊的《勇敢的哈克》吗？没想到居然先在手机上开了花？我不知道这个排名到底意味着什么，对我们最终的发售能有多大帮助，但这也是大家对哈克的一种认可，最广泛的一次，原来我们也不是某些人所谓的“小众硬核游戏”？这让人感觉很爽，像是憋了几年的一口气终于吐了出来。</p>\n<p><br></p>\n<p><img src=\"https://pica.zhimg.com/v2-76f2fb42e165276f76f40abe90e8c6c1_720w.jpg?source=b1748391?rss\" data-caption=\"登上TapTap热门总榜第一\" data-size=\"small\" data-rawwidth=\"812\" data-rawheight=\"1114\" data-watermark=\"watermark\" data-original-src=\"v2-76f2fb42e165276f76f40abe90e8c6c1\" data-watermark-src=\"v2-0efbe2d82b4d2b873d13a241fefa66f7\" data-private-watermark-src=\"v2-d0b7d6ab713d284369d96ace0a37e4ff\"></p>\n<p><br></p>\n<p data-pid=\"eszOYDKi\"> 8月2日，任天堂终于通过了审核，我们终于能正式发布游戏了！综合考虑过后，我们决定将在2022年8月25日正式发布《勇敢的哈克》的完整版。</p>\n<p data-pid=\"kV-JSmwW\"><br>五年前，我和哈克开启了一场不羁之旅</p>\n<p data-pid=\"JWoklDKs\">河对岸的那片金黄的稻田是我们最初的目的地</p>\n<p data-pid=\"uosnlwbq\">渡过河后却发现近在眼前的一切反而不及在彼岸时看到的那般美</p>\n<p data-pid=\"GNP-OdB5\">不甘的眼睛又不约而同地转向了远处那颗参天大树</p>\n<p data-pid=\"qtdTl32m\">前往大树的路上满是泥沼，一不留神就会深陷进去</p>\n<p data-pid=\"zsJJAsMj\">狼狈不堪的我们终于来到了大树下，才意识到只有树顶才能看到真正风景</p>\n<p data-pid=\"1VQmO4Z1\">于是我们一个树枝又一个树枝地往上爬</p>\n<p data-pid=\"LEy785He\">在经历一千六百七十五个日夜后，精疲力尽的我们终于登顶</p>\n<p data-pid=\"1NNsZUAQ\">树顶挂着一颗鲜红的果子，哈克咬下了一口递给了我</p>\n<p data-pid=\"E1OI-F9W\">我咬下一口，看着天际线边那座高耸入云的山峰</p>\n<p data-pid=\"yj0IAz-6\">苦涩后又回甘 </p>\n<p data-pid=\"M_KBYVfe\">“真是一场了不起的冒险啊！” </p>\n<p data-pid=\"J38ND4DE\">“是啊。”</p>\n<h3>16、末了</h3>\n<p data-pid=\"vwBrwVdY\">  那天夕阳还夹在山腰间，老爸上楼的脚步声让少年不得不立即结束了冒险，“咔嗞”一声，三洋牌电视机断了电，荧幕暗下，映出两个人影，是少年和中年，相隔二十多年的时空在此刻折叠在一起。</p>\n<p data-pid=\"vN1k76uN\"><br>   二十年前的我是一个玩家，游戏让我的少年时代充满阳光，二十年后的我正做着游戏，希望我的游戏也能给别人留下金黄的回忆。</p>\n<p data-pid=\"oEW3HRyN\">2022年8月17日</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/tutle1985?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">刘美工</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/534578671/answer/2662918514?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">7 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/518353598?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">国产独立游戏《勇敢的哈克》的游戏背景是什么？</a><br><a href=\"http://www.zhihu.com/question/547264776?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">国产游戏《勇敢的哈克》正式版发售，这款游戏的制作水平如何？</a><br>\n","link":"http://www.zhihu.com/question/534578671/answer/2662918514?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"谈不上多有用，但就是喜欢：从实用主义走向恋物情结","date":"2022-09-13 06:21:00","description":"Matrix首页推荐Matrix是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选Matrix最优质的文章，展示来自用户的最真实的体验和观点。文章代表作者个人观点 ...<a href=\"https://sspai.com/post/75666\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75666"},{"title":"《原神》3.0 版本「千朵玫瑰带来的黎明」更新，你的体验如何？","date":"2022-09-13 06:17:44","description":"\n<h2>烈日、翠木与蔷薇：须弥三贤王的乐园挽歌</h2>\n<p data-pid=\"80Dtq0l9\">3.0 版本已经过半，相信很多已经体验完剧情的朋友都为这次新主线「千朵玫瑰带来的黎明」与大型世界任务「森林书」的精彩表现赞不绝口，我们切实地感受到游戏在编剧与叙事层面上取得了巨大而可喜的进步。不过除了这两块明线故事需要认真关注外，此次 3.0 版本也和以往一样加入了多条值得深挖的暗线剧情，而其中个人以为最重要也是将贯穿整个须弥篇章的一条暗线，就是描写古代须弥赤王、树王与花神三位贤王共建乐园、乐园最后又在悲剧中迎来毁灭的地区大背景故事。</p>\n<p data-pid=\"2-fJda5F\">本文将统合目前游戏中所有可以收集到的资料和线索，来向各位完整讲述一个以怀抱伟大梦想、曾并肩行走于镀金沙漠的三位贤王为主角，诠释相遇与离别、爱情与悲恸、智慧与痴愚的传说故事，希望可以帮助大家了解须弥的历史。文章中也会适当穿插一些个人分析与文化考据性质的内容。</p>\n<p data-pid=\"InG-vUTt\">本文篇幅较长，全文共十节约 1.7 万字，大家可善用目录功能来快速跳转章节阅读。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-8574348c1e36764577de74167930bcdd_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-8574348c1e36764577de74167930bcdd\" data-watermark-src=\"v2-c3f1c5260c43acf04bbe5c225e5aea65\" data-private-watermark-src=\"v2-b7ea6b882bc5bb1ef135f5982786d739\"></p>\n<hr>\n<h2>一、高天遗落之子与闪耀的镀金国度</h2>\n<blockquote data-pid=\"uzSNg7Ts\">人们说，阿赫玛尔是天空遗落的子嗣。<br>——《阿赫玛尔的故事》<br><br>王者随耀眼如日的光明驾临，为人子们除去蔷薇编织的刺冠。<br>—— 沙王的投影</blockquote>\n<p data-pid=\"o6pG-sp3\">在久远到无法想象的过去，自天外漂流而来的造物主、「原初之人」法涅斯降临到了这个世界，他发起了对支配旧世界的七位龙王的战争并最终取胜，随后重塑了这片天地。山川湖海、飞禽走兽被逐一创造，作为神最宠爱的孩子的人类则在最后降生。彼时的高天随时倾听着来自人子们的祈愿，尊贵的原初者从天上的宫阙派遣御使前往地上，向人子们亲授神明的知识并带来慈爱的指引。彼时的世界如同无忧的伊甸园，人类讴歌着高天的王座，地上的文明平稳茁壮地成长着，最终形成了横贯整个大陆、高度发达的伟大统一文明。</p>\n<p data-pid=\"90UyLo_j\">然而，神与人皆没有料到，会有那「第二个王座」自天外侵入。两个王座争夺世界的斗争犹如创世大战的重演，那天上的战争是如此的激烈，令整个天地都为之倾覆，有天上的神自天空陨落，有地上的生灵惨遭屠戮灭绝，灿烂的文明与逸和的过去被破坏遗弃，逐渐没入浓稠的深暗中。到这场旷世大战的最末，曾美如伊甸的世界已然面目全非，但这并非是最糟糕的现实，最令幸存人子们惊恐的是：高天的诏谕竟陷于沉默，地上失去了主人。</p>\n<p data-pid=\"Dc7gbdkn\">在如今的提瓦特被称为须弥的地域也曾在那场大战中遭受到可怖的毁坏。传说中，湛蓝色的晶石神柱自神明激战的天空岛上坠落直击大地，将草甸林木埋入漫流之砂，曾经富饶繁盛的土地沦为被太阳镀上华贵死衣的沙之海，这便是须弥沙漠最初的起源<b>【注1】</b>。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-0f4a8ae6d8f847a8ca7ab6fd6a91331f_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"990\" data-watermark=\"original\" data-original-src=\"v2-0f4a8ae6d8f847a8ca7ab6fd6a91331f\" data-watermark-src=\"v2-2a6ef127959a2787944893300a4df799\" data-private-watermark-src=\"v2-1a401ee01acfaec62067421bbd271b53\"></p>\n<p data-pid=\"VqS60Fb4\">这片饱受摧残的土地上，一群群由原先统一文明佚离的人们艰难地进行着求生。然而，丧失了往昔依赖的来自高天的指引，亦失去了曾经文明积累硕果的人类，又怎能轻易地在这受诅咒的至暗年代中获得安生呢？沙漠中残余的人类文明如同失去水源的苗圃般逐渐枯萎，几度濒临崩溃。</p>\n<p data-pid=\"xlo5jrsD\">好在世界终归还是展现了它的仁慈。三位神王开始行走于这废土之上，他们聚拢流离的人类，以自身神力为人类提供救助和庇护，尔后又以神权为名建立起聚落。混乱之后，文明开始在沙海中再度复兴。</p>\n<p data-pid=\"01y46snd\">曾经三位神王中那最威严的君主便是后来被人们尊为「赤王」的阿赫玛尔<b>【注2】</b>。人们传说，伟大的王并非一开始就行走于大地上，他是自高天遗落的神圣者，是在两个王座争夺天地的旷世大战中陨落凡尘的神子。有关这段记述的真实性如今已难以考据，但毫无疑问，赤王阿赫玛尔的确成就了非凡伟迹：</p>\n<p data-pid=\"rD2inRgt\">赤王塑造乐土，使沙漠绿洲棋布，泉流纵横，诸多城邦开始在肥沃的绿洲之上茁壮成长。跟从赤王的理想，部民们树立高墙，建起御座，聚成繁荣的藩国；祭司们公正地治理乐土，布撒富足于四方。凡人的贤王与神官亲身领受来自赤王的圣谕，他们都是大地的主人。</p>\n<p data-pid=\"kFMlkulL\">崇尚公正的法度与无私的理性的赤王以羽毛称量心脏，以熔铁衡量神智，以黄金般闪耀的法则重新衡量着沙漠中的一切生命<b>【注3】</b>。人民服从赤王的裁断，将根源于血的律法刻印在生命中，使那沙漠乐土的秩序永恒。「编织万千思绪，统制万千灵魂」，此即赤王所追求的「威权」之道。但这绝非是神对人施以的冷酷暴政，其目的恰恰是创造不再有人苦恼，也不再需要迫害与奴役的真实乐土。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-af5a4ce57d02b1bfd961a7a89b4a6dfc_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"862\" data-watermark=\"original\" data-original-src=\"v2-af5a4ce57d02b1bfd961a7a89b4a6dfc\" data-watermark-src=\"v2-f1033349e36c03747e61db26566a0891\" data-private-watermark-src=\"v2-78d7a5877a099ebfcfa768b3afe12c50\"></p>\n<p data-pid=\"UNEUF8QW\">闪耀着的镀金国度在沙海中崛起，赤王深受麾下三大部族（勇士、智者与园艺师）无数子民信仰，赢得到了无尽的崇拜。人们将他誉为黄金的太阳、朝暮轮回的红日，称他是统治大地四方的王，是武士、园艺师与智者的王，制御着沙漠中呼啸的风与被月光镀成亮银的沙丘，就连那在夜梦与鸮鸣中藏身的难以捉摸的一千零一种镇灵也被赤王收服，奉其为尊主<b>【注4】</b>。</p>\n<p data-pid=\"4Hn0kLIH\">即使已经取得如此丰功伟绩，侍奉赤王身侧的人们有时却看到，伟大的王也会低下他那高贵的头颅，发出一阵无解的叹息。人们自然难解其中深意，唯有自高天遗落、曾见证往世盛景的神王明白，虽然在如今的世人看来自己治下的文明繁荣至极，可又如何能企及千百年前被无情的惩治所毁灭的地上天国？更莫提那位于天上九重又九重的真正乐园，自己虽然魂牵梦萦，但终归是再也无法复归了。<br></p>\n<p data-pid=\"qqrVz9Dt\"><b>【注释1】</b>由圣遗物「沙王的投影」中「最初神柱自高空降下，将草甸林木埋入漫流之砂」的记述可推断须弥沙漠并非自然形成的景貌，而是两王座大战对下界造成破坏的后果之一。按《日月前事》对提瓦特统一文明时期的描述，彼时的大地受高天眷顾遍地富饶，显然不会允许有沙漠这样的荒芜之地存在。秘境「缘觉塔」的描述中也提到「长箭从天而降，平地隆起成了山岳，古都也埋入了山中」（由地理位置判断，这里提到的「古都」应当就是指深埋层岩巨渊地下的倒吊城，「长箭」即指渊底的判罚之钉）。也就是说，须弥这片地域实际上经历了「远古森林 - 荒漠 - 重建绿洲 - 大雨林」的变迁过程。</p>\n<p><img src=\"https://picx.zhimg.com/v2-011d1c63a80e7b4ec7a3ae8586d8f716_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-011d1c63a80e7b4ec7a3ae8586d8f716\" data-watermark-src=\"v2-ee33a2634df96736a02dc398f3f7e18b\" data-private-watermark-src=\"v2-1562e8f8b01168c5a8d678bace4f1bbe\"></p>\n<p data-pid=\"hOpbDvzE\"><b>【注释2】</b>「阿赫玛尔」（Al-Ahmar）之名源自下埃及统治者佩戴的红色头冠「Deshret」（埃及语：dšrt，意为「Red One」），Deshret 一词亦是古埃及人地理认知中与尼罗河流域肥沃「黑土地」（Kemet）相对的贫瘠沙漠地带「红土地」的正式名称。</p>\n<p data-pid=\"p-cBUcdk\">在古埃及神话中，埃及的原始统治者「大地之神」盖布（Geb）授予了荷鲁斯（Horus）统治下埃及的权力，将自己视为荷鲁斯神继任者的埃及法老们佩戴 Deshret，象征着他们对下埃及的权威。后来下埃及的「红冠」与上埃及的「白冠」（Hedjet）结合形成「双冠」（Pschent），代表对整个国家的统治。</p>\n<p data-pid=\"WzFLdBlp\">「阿赫玛尔」在阿拉伯语中同样也有「红色之人」（The Red One）的含义。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-9828bff2bbad2611d45d74d8b9062b97_720w.png?source=b1748391?rss\" data-caption=\"代表上埃及的「白冠」，代表下埃及的「红冠」，两者组合而成象征统治埃及全域的「双冠」\" data-size=\"normal\" data-rawwidth=\"550\" data-rawheight=\"547\" data-watermark=\"original\" data-original-src=\"v2-9828bff2bbad2611d45d74d8b9062b97\" data-watermark-src=\"v2-92e3180b96de13cb020597c8a7ee1ef5\" data-private-watermark-src=\"v2-084f004dcedba9ada0d7a84bef1c5d6e\"></p>\n<p data-pid=\"qHvo-xam\"><b>【注释3】</b>「以羽毛称量心脏」的说法来自于古埃及人的生死哲学观。古埃及人相信在人死后，灵魂将在冥界遭遇一系列超自然因素的考验，并最终接受被称作「心脏称量」的最后审判。</p>\n<p data-pid=\"3VI4HbC4\">在「心脏称量」的过程中，死者的灵魂被死神阿努比斯带入冥府的审判厅，诸神将心脏中映射出的死者生前所作所为与「玛阿特」（古埃及信仰中指整个世界的基本秩序）的规则对照来裁断死者是否拥有抵达永生的资格。这一过程一般被物化为实际的称量过程：秤的一边是死者的心脏，而另一边则是玛阿特的羽毛。若死者心脏比玛阿特的羽毛更轻，则死者通过审判，他的「卡」与「巴」相结合形成完整的灵魂「阿赫」被带到冥王奥西里斯身边，进入芦苇原得以永生；若死者心脏更重，则心脏将被吞噬，丧失永生的机会。</p>\n<p><img src=\"https://pica.zhimg.com/v2-78f9f0346df6e49fa98201fbcb1a05ec_720w.jpeg?source=b1748391?rss\" data-caption=\"描绘「最后审判」的古埃及壁画：冥王奥西里斯端坐于王座，阿努比斯在秤旁主持称量仪式，智慧之神托特则在另一侧记录称量结果，拥有鳄鱼头，狮子上身及河马下身的阿米特随时准备吞噬不合格的心脏\" data-size=\"normal\" data-rawwidth=\"2378\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-78f9f0346df6e49fa98201fbcb1a05ec\" data-watermark-src=\"v2-c1b2f823838c6997c37855a0d76972fe\" data-private-watermark-src=\"v2-a3e4a55ed897823c82d2d8b2bb977790\"></p>\n<p data-pid=\"KpOTmjwN\"><b>【注释4】</b>镇灵（Jinn，也译为镇尼、魔神、精灵、巨灵）是伊斯兰教对于超自然存在的统称，传说由神用无烟之火造就，故乡是镇尼斯坦（Jinnistan）。镇灵有善有恶，可以助人也可以害人，还能任意改变形体，有时也被视为恶魔的一种。在阿拉丁故事中登场的神灯精灵估计是大家最耳熟能详的镇灵形象了。</p>\n<hr>\n<h2>二、黄金灿阳与银白月光在大地邂逅</h2>\n<blockquote data-pid=\"DzzMVQ0j\">人们曾说，花的王者是欢乐与幸福之主。<br>清泉从她的袖口涌流而出，沙漠中便有了百花盛开的绿洲；鲜花与香草紧随着她的脚步，银白的月光为她开道。<br>在高天转过脸去的艰苦时代里，花的女主人为凡人遍洒恩惠，人们开始重新认识到快乐与自我，于是再度拾起了闲暇与奢侈。<br>—— 绿洲花园的追忆</blockquote>\n<p data-pid=\"2Gutzvb8\">有带来律法与秩序的黄金太阳为沙漠镀上金色的闪耀光辉，就有光芒柔和的银白之月为子民带来欢欣与安慰。</p>\n<p data-pid=\"wGlUfvNF\">曾行走于沙漠间的三位神王中的第二位是被誉为「鲜花与梦想之神」的美丽女神。她是「仙灵」一族的遗民，这一受造于原初、为指引教导人类而生的伟大远古种族据说拥有着不属于人间的美貌与智慧，这样的特质在花神身上表现得淋漓尽致：在流传千古的诗篇中，花之女神被诗人形容始终有甜蜜馥郁的芳香萦绕，她的容貌宛若溪流绕过树荫下碎银般的月亮般散发着光辉，从古至今无人曾将这般美貌瞩望，一如如无人曾经目睹七月降下的晨霜<b>【注5】</b>。</p>\n<p data-pid=\"ZLfkA20g\">花神为荒芜的沙海带来了生机与美丽。她的袖口中涌流出清冽的泉水，她的脚步后紧跟着萌发的香草与鲜花，从此沙漠中便多出了许多百花盛开、如明珠般珍贵的绿洲。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-1404efb287157a1fe8cb31f7622c598d_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"990\" data-watermark=\"original\" data-original-src=\"v2-1404efb287157a1fe8cb31f7622c598d\" data-watermark-src=\"v2-87d2e5f82c256d9dee2f6692104a80fa\" data-private-watermark-src=\"v2-7163f78d4096d2aaf7b20aabc12347a2\"></p>\n<p data-pid=\"JExCn56Y\">花神为困苦的沙海带来的幸福与希望。她为被放逐之人、癫狂之人与痴愚之人展现梦想，在梦想中为他们奉上甘美的快乐，那些因看不到未来在何方而陷入无尽惶恐的人们，开始在花神的恩惠重新认识到快乐与自我的价值，再度拾起了闲暇与奢侈。</p>\n<p data-pid=\"O71QW0sf\">一度被苦涩与哀恸笼罩的沙漠，终于响起了久违的欢笑。越来越多的人们聚拢到花之女王的身侧，为她的魅力所折服，深醉于她美丽的形象与无微不至的关怀。那之后，女神与追随她的人们一道建立起花的国度「浮槃波梨袈」。</p>\n<p data-pid=\"sFsgbaRX\">黄金灿阳的王者自然早已听闻有关鲜花与绿洲的女主人的美谈，欣然前往拜访的君王只是初见便在女王的雬美柔情中沦陷。赤旄的沙漠君王向花神表达了自己的倾慕，希望他与她的国度可以结成联盟共建沙海中的乐土，花神欣然同意。欢喜的赤王在那之后为联盟的诞生与心爱的伴侣准备了与之相称的礼物，那是一座为镇灵建起的圆形剧场之城，唤作「阿伊 · 哈努姆」，在古老镇灵的语言中其名乃是「月女城」之意 —— 伊人光彩如皎白月色，万千宫阙皆为伊人之美而建<b>【注6】</b>。</p>\n<p><br></p>\n<p data-pid=\"X0yUhsl_\"><b>【注释5】</b>自提瓦特旅程开始「仙灵」就是我们非常熟悉的存在，这些小小的萤火精灵无数次为我们指引道路、带来宝藏，但有关它们的身世背景我们却几乎一无所知。在「森林书」系列世界任务中，官方终于借兰摩罗之口对仙灵的设定进行了补充：他们是原初之人创造的伟大种族，拥有超凡的智慧、力量与美貌，在远古时曾作为引导者与人类相伴同行，孜孜不倦地向人类传授语言和自然哲学，为人类带来知识的启蒙。</p>\n<p data-pid=\"uo5zlvA7\">然而，属于仙灵的全盛时代早已过去，如今在提瓦特大陆上飘荡的几乎所有仙灵都只是退化后失去知性的空壳。据说仙灵一族先天就背负着诅咒，若与人类坠入爱河，就会失去智慧和力量，继而身体也会逐渐退化。这简直像是高天为避免两族团结过于强大而刻意设下的保险，无法拒绝善良爱人天性的仙灵一族大概就是因这份悲哀的诅咒才全体步向了衰亡。</p>\n<p data-pid=\"3L7bcROQ\">曾经活跃于须弥沙漠、与赤王树王结伴同行的花神据说就是仙灵一族的孑遗。传说中花神的美貌举世无双，另一位神王为她深深着迷，最后也是为了她而铸成大错。虽然目前还没有任何资料能够让我们一睹花神的容貌，不过据妮露所言，她为在花神诞祭上表演花神之舞而特意准备的舞娘服装模仿的正是花神的模样，通过欣赏妮露的装扮，我们多少可以感受当年那位美丽的女神倾倒众生的容姿。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-28b9c8ebcaff29e2788f089d0fdd4f5c_720w.jpeg?source=b1748391?rss\" data-caption=\"妮露为花神诞祭准备的舞娘装模仿了传说中花神的姿态\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-28b9c8ebcaff29e2788f089d0fdd4f5c\" data-watermark-src=\"v2-9d451f2ec926049c4e0bdc23297495cf\" data-private-watermark-src=\"v2-3677183bac2e6714c92f328e9f21152e\"></p>\n<p data-pid=\"ryGxTNjR\"><b>【注释6】</b>赤王为庆祝与花神结盟建造的宫城 ——月女城「阿伊 · 哈努姆」（Ay-Khanoum），其原型是如今位于阿富汗塔哈尔省的艾哈努姆古城（Ai-Khanoum）遗址，名字的含义正是「月女神」（Moon Lady）。</p>\n<p data-pid=\"8JzG3Gmy\">艾哈努姆是「希腊化时期」（Hellenistic period；指自公元前 323 年亚历山大大帝驾崩算起至公元前 30 年最后的继业者国家埃及托勒密王国灭亡宣告结束的一段历史时期）中能够代表中亚地区希腊化文明的重要城市之一。该城最早可能由塞琉古帝国（Seleucid Empire；为亚历山大帝国分裂后由大帝部将塞琉古一世创建的希腊化国家，继承了波斯阿契美尼德王朝除埃及外的大部分疆域）的某位早期君王下令修建，而后由于巴克特里亚行省总督狄奥多特一世自立为王而脱离塞琉古帝国控制，长期作为希腊-巴克特里亚王国（Greco-Bactrian Kingdom）的军事和经济中心存在，这使该地区后继游牧民族文化也深受希腊城市文化影响。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-b75043c8322bf3e7e04c1e2296e9063d_720w.jpeg?source=b1748391?rss\" data-caption=\"希腊-巴克特里亚王国疆域及艾哈努姆城位置。该王国后来受游牧民族塞人与大月氏的前后入侵而灭亡，其残余势力被认为是张骞出使西域时造访国家「大夏」\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1311\" data-watermark=\"original\" data-original-src=\"v2-b75043c8322bf3e7e04c1e2296e9063d\" data-watermark-src=\"v2-3eda0e1c174cebe02af987b4042bf356\" data-private-watermark-src=\"v2-e4029243e10b930f9186524d2885c8d1\"></p>\n<p data-pid=\"GWnqIyxX\">另外，月女城的别称「圆形剧场之城」也值得留意。「圆形剧场」（Amphitheatre）是源自古罗马的一种独特建筑形制，词源为希腊语「ἀμφιθέατρον」，意为「四面都有座位的剧院」。承接戏剧表演的古希腊剧院往往都修建为半圆形，古罗马的圆形剧院在平面上则通常呈椭圆形，主要用于举办角斗士比赛，意大利地标景点「罗马斗兽场」（Colosseum）就是该类建筑保存至今的最知名代表。受希腊化时期影响，如今在位于北非及中亚地区的古城废墟中也能发现此类希腊形制的建筑遗址，艾哈努姆就是一个例子。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-f3f0316b356c8627311ab21e76014f71_720w.jpeg?source=b1748391?rss\" data-caption=\"艾哈努姆古城还原图，可见希腊式的露天剧院建筑\" data-size=\"normal\" data-rawwidth=\"899\" data-rawheight=\"600\" data-watermark=\"original\" data-original-src=\"v2-f3f0316b356c8627311ab21e76014f71\" data-watermark-src=\"v2-53bb7b5e1da56e64a9a9d46f4d3e2953\" data-private-watermark-src=\"v2-bbd4a151936c0d99074de754370bb579\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-7a2c50d1bb068cdef3e83a0ecabdbf89_720w.webp?source=b1748391?rss\" data-caption=\"意大利古迹地标「罗马斗兽场」，其是世界上现存最大的圆形剧场建筑\" data-size=\"normal\" data-rawwidth=\"1200\" data-rawheight=\"675\" data-watermark=\"original\" data-original-src=\"v2-7a2c50d1bb068cdef3e83a0ecabdbf89\" data-watermark-src=\"v2-a4c791849835c3ae5a93ca4b95646fbb\" data-private-watermark-src=\"v2-45d06f54a404e5c8f69c6533a5328779\"></p>\n<p data-pid=\"-VaPK-ve\">考虑到花神为远古仙灵一族的遗民，而第一王座时期提瓦特统一文明的原型正是古希腊（参考渊下宫白夜国文明的情况），故月女城之设定大概率也是在有意契合这个背景。</p>\n<hr>\n<h2>三、花与梦的女神向翠木王女发起智慧之问</h2>\n<blockquote data-pid=\"c_jsANSq\">远方的人民都在将你的智慧颂唱，不知你可否为我破除令我困惑已久的迷茫？<br>这些香料、黄金与宝石，我都要赠与你作谢礼，作为解开我三个谜题的馈贶。<br>——《浮槃歌卷 · 第一卷》</blockquote>\n<p data-pid=\"RHXHiRNS\">曾行走于沙海的三位神王中的最后一位乃是翠木的王女、高树的贤王。这位司掌草木、生命与智识的女神虽然领地远在沙漠的彼端，追随她的人民却将有关她卓绝智慧的颂唱传遍了整个镀金的沙海。</p>\n<p data-pid=\"hINu6vDQ\">花与梦的女神在听闻这些传说后，心中便起了慕名拜访这位智慧之神的念头。花神说服赤王纡尊降贵，随她暂别华美的宫殿，动身前往远方绿洲去一探究竟。得以初次见面的两位女神先是赞美了对方拥有的美丽与智慧，随后花神发起了挑战，要用三道难解的谜题来考验树王传言中全知全能的智慧是否名副其实。</p>\n<p data-pid=\"CLBocI3F\">第一道谜题如此念诵：「什么东西活着的时候如死物一般冰冷，消逝后却能够为人们送去和煦的暖风？」</p>\n<p data-pid=\"ugo5hK5M\">树王答道：「你说的是晚春易逝的蔷薇，纵然满是荆棘却也难掩芳菲。花朵被摘下制成浓醇的香水，花茎则被割断作油灯的芯髓。」</p>\n<p data-pid=\"72krKelN\">花神对树王的回答心中暗暗赞许，姣美的容颜却依然保持平静，接着提出了第二道谜题：「什么东西从地升天，又从天而降，无人曾目睹它，它却将一切觑望，其上正如其下，其下与其上相仿，却只可自上而下，不可自下而上？」</p>\n<p data-pid=\"vy2hfqlC\">树王接着应答：「你说的是高天立定的正法，原初之时便铸成的神圣规划（即指天理）。世间无人目睹过永恒的律法，律法却总是将世间万象统辖。只可俯伏尊奉切不可僭纵，若是胆敢将那禁忌之术仿拓，唯有劫灭等待在睿识的畛崖。」</p>\n<p data-pid=\"dW2_OHdQ\">花神听罢内心欢喜不已，面容却依然带着冷意。她轻轻俯身向全知之人行礼，向树王问出了最后一道谜题：「什么东西无法抵御箭矢，却能抵御毁灭。什么东西无法摧垮盔甲，却能摧垮城邦。既不屈服于高天的使者，也不屈服于地上的万国。无论是诸神还是邪魔，倾尽全力也不能将它胜过？」</p>\n<p data-pid=\"RVox1XgP\">树王给出了答案：「你说的是永无穷尽的智慧。即使一时散去也终将复生，唯有永世不毁的智慧可将将文明永恒捍卫。纵使时光在它脚下卷起沙尘，千万年后它却依然如初。人们终会因智慧的恩赐而欢欣，而智慧的巨树也必将会因人们而茁壮。」</p>\n<p data-pid=\"kztbr_XB\">三题问罢，花神已无法掩饰自己的激动与钦佩，而赤王自始至终默默陪伴在其身边。她称颂树王为仁慈而又彻知的、永无穷尽的君王，感叹树王的智慧比起传闻更要胜之非凡，羡慕树王的眷属臣民能够悉心聆听此等的教诲<b>【注7】</b>。</p>\n<p data-pid=\"4-86lZ8Y\">自此，二位女王缔下了坚实的盟约。三神结为挚友，誓言勠力同心，共同引领子民走向永恒的繁荣。</p>\n<p><br></p>\n<p data-pid=\"7hXMDMRt\"><b>【注释7】</b>花神向树王提出的三道难题带有强烈的预言意味，实际上就是提前暗示了三位贤王的命运：凋谢的蔷薇预言了花神将会在未来陨落，天理的警示预言了赤王因触碰禁忌为国度带来毁灭，战胜一切的智慧则预言了三神中唯有树王走到了最后。</p>\n<hr>\n<h2>四、三位贤王携手并肩奠立地上的伟大乐园</h2>\n<blockquote data-pid=\"IktHKzgZ\">最初，欢宴属于鲜花与月夜的女主人，权威属于沙海的王，生命属于草木的养主。<br>仿若白银的月亮、黄金的太阳与翡翠的绿洲，三位神王立下誓言，结成同盟挚友。<br>安乐和平，统一的无忧乐园中无分彼此，亦无有灾祸。<br>真希望此刻蜃楼般的幸福能化作永恒，再无分离之苦。<br>—— 如蜜的终宴</blockquote>\n<p data-pid=\"T0OLj1jP\">三位贤王结成同盟标志着沙漠黄金时代的到来，伟大的地上天国、永恒的乐土 ——「瓦力 · 韦杰」就此建立。</p>\n<p data-pid=\"d6Blm1Ot\">赤王灿阳般的威权与律法维系了乐土的秩序和安宁，树王如草木般生长的智慧令乐土走向繁荣兴旺。正如大地不能只有烈日和雨水那般，在智慧与威权、理性与强力之外，温柔美丽的花神同样为蒙昧的子民带来了抚慰与慈悲，用欢乐与爱情、歌声与艺术、美酒与奢侈令国度上下响起欢声笑语。</p>\n<p data-pid=\"YMLBR3G_\">那真是一个无比美好的时代，智慧之人尽享安乐，勇壮的少年与少女同猛狮和玫瑰谈情，流传下来诗篇中如此描述那令人陶醉、无可言说的幸福：「在那些年代，月光曾将他们的幸福讲述给夜莺与蔷薇，而她们也为之惊惶、为之羞涩，以致唱不出回应的歌」。</p>\n<p data-pid=\"F4ptBuq-\">对于三位神王而言，这段把酒言欢的如蜜岁月也令他们难以忘怀。传说中某次树王过生日，宴席上神明们都喝得烂醉，平日里威严无比的赤王竟乘兴弹奏起了乐器，以庄重智慧著称的树王也笑着跟唱起歌谣，花神则随着两位的伴奏跳起了欢乐的舞蹈。花神起舞之时，她踏过的草地上长出了无数美丽的帕蒂莎兰，明亮的紫红色花朵筑成了灿烂的舞台。沉浸在幸福时刻中的神明们感叹：啊，若是时间能够永驻此刻就好了。</p>\n<p data-pid=\"RzZcnkqW\">是啊，若时间能够永驻此刻就好了。可永恒的幸福终归只是理想，在随之到来的无情灾厄中，乐土的梦想如沙海中浮现的虚幻蜃气楼般破灭了。</p>\n<hr>\n<h2>五、蔷薇猝然凋零令那幸福的乐土失去色彩</h2>\n<blockquote data-pid=\"KsQ0RL3z\">古时的传说中曾经有三名携手同行的挚友。<br>其中一人最终如蔷薇般凋落，在泥中腐烂。<br>花的国度被风沙磨成故事，成为歌中的梦。<br>—— 梦中的铁花</blockquote>\n<p data-pid=\"n952OVs2\">如今已无人知晓当年席卷乐土的灾厄究竟是什么，又是如何到来，流传下来的史诗中只是这样记述乐园崩毁的开端：「花的女王死于烈日与黄沙的恶意，谢落在蔽日的沙暴中。绿洲不复有紫红的帕蒂莎兰盛开，无忧的黄金乐园也被死亡所淹没」。</p>\n<p data-pid=\"hfBJ8I78\">受万民景仰的另外两位神王不知为何也失去了踪影，在缺少管理者的乐园中，曾如黄金般闪耀的秩序与安宁荡然无存，取而代之的则是无尽的混乱与迷茫。流散的凡人子民开始据地自守，沙漠由此拉开了长达百余年的藩王争霸的血腥时代<b>【注8】</b>。</p>\n<p data-pid=\"CKQOLDWK\">数不尽的阴谋诡计、数不尽的骨肉相残、数不尽的腌臜之事在沙海上此起彼伏地上演，凡人中自以为是的暴君们不停驱使着他们麾下的奴仆投入到征服的游戏中，在杀戮或是被杀戮的循环中演绎着肮脏且反复的历史<b>【注9】</b>。</p>\n<p data-pid=\"eIECg_F1\">混乱持续百年后，赤旄的君王与草木的贤者终于复归，两位神王收拢陷入分裂与内耗的臣民并着手重建绿洲乐园。至此，镀金藩王割据的年代才得以告终。<br></p>\n<p data-pid=\"VJWJXM93\"><b>【注释8】</b>花神陨落的经过与真相目前还疑团重重。史书记载花神凋谢在「烈日与沙暴的恶意之中」，但这显然只是一种经过修饰的模糊说辞，将一位执掌强大力量的魔神的死因解释为通常的自然灾害实在难以让人信服。</p>\n<p data-pid=\"kgWeOmLN\">虽然还未有线索明确指出花神死亡的具体时间，但是结合花神陨落后乐园紧接着就陷入到长达百余年的混乱分裂的情况来看，彼时很可能恰好就是天理正式向地上下达开启魔神战争命令的时刻，而花神的真实死因正是遭遇了围攻乐园的敌对魔神的袭击（且大概率由赤王的疏忽大意所致，因此赤王才会在花神逝去后感到无比的痛苦懊悔）。</p>\n<p data-pid=\"KqNbtFQa\">而那之后的百年时光，赤王与树王将全部精力都放到了抵御来犯魔神、守护乐园疆界的无止境交战中，无力再亲自负责管理乐园，无神的乐园由此进入人类藩王割据统治的漫长乱世。直到百年后须弥地区的魔神战争尘埃落定，复归的赤王与树王才终于让一切回归正轨。</p>\n<p data-pid=\"IWGZPSaa\">以上推测应该是目前解释花神之死最具合理性的一种说法，但也存在疑点。武器突破素材「绿洲花园的真谛」的描述中存在这样的说法：「死亡正是花之主人从最开始便尽力追寻的终焉 —— 因为死亡为失去的欢乐增添苦涩的风味，让它愈发浓烈地在无穷回忆之中显现。黄沙的无知之王从未明晓她的道理，仅仅迷醉于她无穷的魅力与柔情。执着的追忆尽管妄入歧途，却也在花之女王的计算之中」，不能排除花神为了实现某个目标有意策划了自身的死亡的可能性，在预言花神命运的那道难题中，「消逝后却为人们送去和煦暖风」的表述也相当值得玩味。同样，花神身为仙灵一族生来就身负的诅咒也可能是导致悲剧发生的诱因（见<b>【注5】</b>）。</p>\n<p data-pid=\"0N-4NVY3\"><b>【注释9】</b>以神王回归重整乐园为终点，镀金沙漠上藩王争雄的混乱年代足足持续了有百余年，虽然在神明看来这只不过是弹指一瞬，但对凡人们而言，百年时光已足够上演数不清的人间沉浮与悲欢离合。如今提起这段时期的历史，当属《希鲁伊与希琳》中所记载的「疫王」希鲁伊的事迹最为出名，从中足以窥见那个世风沦丧的荒唐年代的缩影：</p>\n<blockquote data-pid=\"J1s2hmwb\">已成盖世功业的英雄基斯拉为了追求无上权力，策划谋害了对他恩重如山的义父藩王奥尔玛兹拉，制造了骇人听闻的「居尔城惨案」，此后顺理成章登上王位，成为了凡人中最强大的藩王。他与义父那人类与精灵混血的女儿、身为大精灵「睡莲之女」利露法尔嗣女的希琳结合，诞下了王子希鲁伊。因对精灵主母所留下的「王子终有一日将为王土带来噩兆」的预言感到恐惧，懦弱的基斯拉最终驱逐了自己刚刚长大成人的亲生儿子，却不料自己的王后希琳早已在无爱无聊的枯朽生活中萌生出对他这乖戾凡王的强烈憎恨。<br><br>希琳打听到了流浪在外的爱子的行踪，某日夜里扮作月神庙宇中的神姬，与亲儿希鲁伊相遇继而在月色下缠绵，随后降下了怂恿希鲁伊谋杀暴虐无道的亲父的虚假神谕。正当希鲁伊犹豫不决之时，神姬用以掩面的面纱脱落，希鲁伊惊骇地发现自己竟与母亲犯下了乱伦之罪。希鲁伊惊慌失措地逃离了被玷污的神庙，而身后的希琳却深知自己计谋得成，发生了如铃般清脆却又令人不寒而栗的轻笑。<br><br>在之后的传说中，逆子果然刺死了自己的生父，又在无比宠溺自己的生母希琳的拥护下登上王位。沦为不义之王的希鲁伊终日被噩梦折磨，终于在某次狂乱的夜游中跌入大地的深黑裂隙不知所踪，随之整个王国都被深渊中溢出的大疫吞没而遭毁灭。幸存的流散者们将此灾厄称为「希鲁伊之疫」，认为这是荒唐短命的君王招来的可耻报应。<br><br>至于罪魁祸首、疫王之母希琳，一说化为了为自负之人报死的恶灵，一说被归来的赤王收服羁押于银色的魔瓶，还有人说她至今还游荡在沙漠中，寻找着失踪于深渊的爱子的踪迹……</blockquote>\n<p data-pid=\"LdLQRddH\">顺便一提，可能有不少朋友会认为希鲁伊与希琳故事的原型是希腊神话中著名的「俄狄浦斯杀父娶母」，它们的情节也的确有相似之处。但严格来说，该故事更确切的文化原型是在波斯文学中具有重要地位的爱情悲剧《霍斯劳和席琳》（Khosrow and Shirin）。该故事描述了萨珊王国国王霍斯劳和阿拉穆国（位于古叙利亚和美索不达米亚北部）公主席琳的爱情悲剧，可在波斯历史叙事长诗《列王纪》中找到历史人物原型。2006 年诺贝尔文学奖得主奥尔汗 · 帕穆克的小说《我的名字叫红》中就多次提及这个爱情故事。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-6994b19aff4166814ee895337915f63e_720w.jpeg?source=b1748391?rss\" data-caption=\"《霍斯劳和席琳》是伊朗家喻户晓的爱情悲剧故事，这个故事的影响力不仅仅局限在文学领域中，它的影响力弥漫在整个波斯文化中，无论是民俗学领域或是美术领域\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"500\" data-watermark=\"original\" data-original-src=\"v2-6994b19aff4166814ee895337915f63e\" data-watermark-src=\"v2-a63ce8e7bdc64257516f77762d313260\" data-private-watermark-src=\"v2-06ed104b8f509f01750d1900dd2fe8f1\" data-tags=\"porn\"></p>\n<p data-pid=\"c-fC-Vrm\">游戏魔改版故事中的男主角希鲁伊（Shiruyeh）的原型即为原版故事中的霍斯劳之子席鲁耶（Shirouyeh，也译作「席柔亚」），且原版故事中席鲁耶与席琳的继母继子关系也被改为了希鲁伊与希琳的亲生母子关系。</p>\n<hr>\n<h2>六、深陷悲伤的王听信三佞臣的谗言</h2>\n<blockquote data-pid=\"I79TvAPM\">银白的月光照在猩红的袍裾上，令哀恸之王阿赫玛尔发狂。<br>—— 烈日威权的梦想<br><br>正如贤者所言：席卷一切的祸患，往往起于一个念头，出于君王不加掩饰的忧郁与狂想。<br>——《阿赫玛尔的故事》</blockquote>\n<p data-pid=\"gUkMjQju\">百年离乱过后，乐园终于得以重建，但沙漠的君王却再也不见过去的欢欣，深爱之人的离去让阴云与哀恸布满了黄金太阳的脸庞。面对沉溺于无止境悲伤的赤王，王身边的三佞臣献上了他们无知愚昧的计策<b>【注10】</b>。</p>\n<p data-pid=\"tDeJ3mLT\">羊之王，众相之相，如是谄媚道：「吾王陛下，世界之主，大地四方之王，凡人与镇灵的制御者，乞谅僭越。但陛下应知，溺于旧梦、醉于哀想终究并非长久之计。大地之上的权力与智识无边无际，足使陛下建立起超越九重天国的宫阙，为子民迎来无忧的未来。」</p>\n<p data-pid=\"HRqQpOj3\">「不可。」为此般可笑狂想嗤之以鼻的赤王蹙眉以应，羊之王不再进言。</p>\n<p data-pid=\"97_PFweD\">鹮之王，众书记之书记，如是劝诫道：「吾王陛下，天空之子，众魔神的征服者，众贤者的首领。千百年前的天罚令智慧与历史就此散落。为了更好的未来，君王应当掌握过去，当前的绿洲王土尽藏今日之智慧，但若想要将过去夺回手中，当尽快行动才行。」</p>\n<p data-pid=\"wwkpcqow\">「不可。」深知触碰天之禁忌下场如何的赤王以手杖顿地，鹮之王不再进言。</p>\n<p data-pid=\"id-lblFC\">鳄之王，众统帅之统帅，如是直言道：「吾王陛下，沙丘与绿洲之主，生者与亡者的引路人，诸元素的操使者。若要唤回逝去的生命，迎回失去的机会与梦想，这是最后的良机。愈多权力，愈多空虚；多有智慧，则多有忧伤。相比妄想的虚空，只有再度复活、永生不死的生命，才能弥补无底的悔恨。」</p>\n<p data-pid=\"uNvuhJAu\">赤王陷入了沉默。</p>\n<p data-pid=\"SpOD5m-y\">深爱之人逝去已匆匆百年，但王未尝一时不在追忆那缕曾照入自己心田深处的白月光，她那美丽的容颜、温柔的笑容与曼妙的舞姿总是在眼前浮现，而梦魇中伴侣在炫目日光中燃烧的模样则令王几欲发狂。</p>\n<p data-pid=\"f7POrRkP\">即使尊为统御万民的神明，也有太多力所不能及之事，需为生命的逝去而哀恸，需为死亡的到来而恐惧，需为梦想的逝去而悔恨，倘若真的存在一剂良方，能让枯木回春、死者复生、机遇再来，即使需要触碰禁忌又有何妨？</p>\n<p data-pid=\"J-I6T99C\">「……可矣。」被蛊惑的赤王终于下定了决心，他要追寻那弃绝凡躯的妙药，夺回那本该紧握的幸福。</p>\n<p data-pid=\"SUbU_HyS\">就这样，执着的追想从燃烧的新世界中升起，如同无烟之火。</p>\n<p data-pid=\"EmCT3Ide\">就这样，一只眼望着过往、一只眼望着梦乡的，必定走向迷失。</p>\n<p data-pid=\"3_Ujg0NQ\">就这样，王将视线投向了罪深之处的智慧，倾听如蜜却剧毒的密语……<br></p>\n<p data-pid=\"69eQMLOf\"><b>【注释10】</b>文献中用三种动物来代表向赤王献谗言的三名佞臣，这应当是在化用古埃及神话中的三位神祇形象：</p>\n<ul>\n<li data-pid=\"ShtqM-16\">羊之王：尼罗河源头之神、陶工之神、造物之神「库努牡」（Khnum），公羊首人身；</li>\n<li data-pid=\"wZSlkSD5\">鹮之王：知识与智慧之神，月亮、数学与医药之神「托特」（Thoth），鹮首人身；</li>\n<li data-pid=\"e17YLJs3\">鳄之王：象征王权、丰饶、生育与战争实力，辟邪魔法的守护神「索贝克」（Sobek），鳄首人身。</li>\n</ul>\n<p><img src=\"https://picx.zhimg.com/v2-c5739da1eb450a5050b28e56ac71e8f2_720w.jpeg?source=b1748391?rss\" data-caption=\"从左到右：库努牡、托特、索贝克\" data-size=\"small\" data-rawwidth=\"889\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-c5739da1eb450a5050b28e56ac71e8f2\" data-watermark-src=\"v2-e460d32830ba4b9a17aa401ce53890d8\" data-private-watermark-src=\"v2-0ccf27f7fb5cf7924741f231179566cb\"></p>\n<p data-pid=\"eXVVKwpc\">在已披露的部分沙漠神庙场景中已经可见对应造型的塑像，羊/鹮/鳄可能是赤王麾下统御的三部族的图腾象征。</p>\n<hr>\n<h2>七、两王决裂与灼目烈日威权的腐化</h2>\n<blockquote data-pid=\"UlOseUkH\">朋友当中有一个回归大地，另外两个朋友也因此决裂了。<br>其中一个，决心要在地上建造理想国，让一切悲伤从此消失；<br>而另一个，则决定散布草木与绿茵，让土地充满智识与幸福。<br>—— 原木刀<br><br>当统治的理想被深切的悲愿所扭曲，显贵亦成了助虐之人。<br>无视渐渐陷没流沙的宫阙地基，向着疯狂无明的未来前行。<br>规则为蜃楼般升腾的傲慢腐化，沦为桎梏。<br>神王的抉择下，不幸如锁链般禁锢了臣民们的命运。<br>—— 裁断的翎羽</blockquote>\n<p data-pid=\"8zQ78r9I\">乐园虽然得以重建，重归秩序的沙漠子民们却发现，他们崇拜的伟大君王不知从何时起已不再是记忆中的模样。</p>\n<p data-pid=\"EQ_59DGn\">花的女王谢落尘沙给这个国家留下了深深的伤痕，真挚的欢笑与感性的歌声已不会在这片土地上再度响起，郁郁寡欢的君王开始日渐偏执与极端，曾经以严明公正著称的王国法度在一道道傲慢的敕令中愈发腐化，沦为桎梏子民的枷锁。坊间更是流传着一条令人不安的传闻，全知的王竟也会听信佞臣的妄言，要将那招致灾祸的漆黑愚行在王国实行。</p>\n<p data-pid=\"9Qx_5do_\">曾经那平等照耀大地，赐予众生光明、慈悲与温暖的黄金太阳，如今在乐园子民的眼中已经变成无情炙烤大地的毒辣烈日。人们不敢直视烈阳刺目的光耀，纷纷用那织金的红绸遮住自己的双眼。这份习惯甚至流传到了千百年后，成为了在日光下如同镀金的沙漠当中出生的遗民们的标志。</p>\n<p><img src=\"https://picx.zhimg.com/v2-0f64ba48609401a7fcdd863421704195_720w.jpeg?source=b1748391?rss\" data-caption=\"直至今日，一部分沙漠遗民依然维持着佩戴织金红绸遮住双眼的习惯\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-0f64ba48609401a7fcdd863421704195\" data-watermark-src=\"v2-59df0bb4dc7a599e020bead2a27ccf4d\" data-private-watermark-src=\"v2-ace3aeddff86111ddc5ab65980c2093f\"></p>\n<p data-pid=\"OxWT1fqM\">蔷薇凋零在智慧草木之主的脸庞上也刻下了细密的泪痕，但她明白，身担大任之人不应当被别离的伤悲支配，偏离了追求真知与正途的轨道。面对在悲愿中堕入无明境地的友人，草木之主不止一次地进行劝诫，希望能将王和三人心血所铸的乐园拉回正轨。然而，已然疯魔的王又怎能听得进这些正直智慧的诤言？</p>\n<p data-pid=\"XpTuCP23\">温柔的花神曾是聚拢两位神王的坚实纽带，如今纽带不复存在，赤王早已对树王心生嫌隙。虽不至于直截了当地下达逐客令，但树王明白，她在乐园中已不再拥有自己的位置，矛盾如此积累下去也终有一天产生新的悲剧。为友谊的破裂发出长久的叹息后，树王最终选择了主动告别，她决定回归自己最初的领地，去继续追求她心中的乐园。</p>\n<p data-pid=\"jGPYui5w\">乐园的子民们目送着翠木神王远去，即便是并无神之睿智的凡胎，此时此刻也不难感受到这是乐园崩毁的前兆。当统治的理想被深切的悲愿所扭曲，痴愚的君王无视渐渐陷没流沙的宫阙地基，带着子民向着疯狂无明的未来加速前行，但忠诚的黄沙子嗣依然坚定地选择了与他们的神祗同在，相信黄金威权的光芒定会长存，然而……</p>\n<hr>\n<h2>八、染上深罪的王终引那乐园灰飞烟灭</h2>\n<blockquote data-pid=\"NE2h-dBd\">融万千思绪为一，统万千算计为一。<br>由此，人将为众王之王，众神之神。<br>—— 如蜜的终宴<br><br>即使灾祸的阴影渐行渐近，他们所信赖的威权依旧如琥珀与黄金那般闪耀着不灭的光芒。<br>但灾祸终究还是降临了，黄金的虫印也被葬在了神殿与宫阙深处、曾雕着鹫兽与牛头的破碎柱基之下。<br>—— 烈日威权的旧日</blockquote>\n<p data-pid=\"cOGCzpRQ\">伟大乐园彻底崩毁的具体细节如今已无人可以说清，只因那罪魁祸首与亲历一切的牺牲者们皆数被漫天沙暴所掩埋，他们的灵魂也堕入黑暗的深渊，在凄厉的嚎叫中永世不得超脱。那段历史是不应回首的知识，当被理性所永远遗忘，但为了告诫后世为追逐心愿与智慧踏上歧途之人，终归应当拾起过去的碎片，来浅浅窥探孤独的王最终迎来的苦涩结局。</p>\n<p data-pid=\"Hb7ecQ3U\">在树王离去后，赤王变得愈发专断和癫狂，听信了三佞臣谗言的他不惜以百年再百年的时光，为自己的王国建立起巨大的迷宫，又将自己困于迷宫深处寻求那藏于深罪纱幕背后的禁忌知识，以求弃绝凡躯、超越死亡的妙药。</p>\n<p data-pid=\"YYGu1LNa\">终于，王在耗尽智性与气力前，于沙漠的中央建成了永恒的蜃气楼。那是基于对旧日回忆的执念所塑造而生的无法老去的梦乡，在那里，凝聚着不被扰动的纯洁泉水与永远停留在日暮时分的露光。计划的第一步就此完成了。</p>\n<p><img src=\"https://pica.zhimg.com/v2-f7e8e15ff567041dfd5a4091760dbc7c_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"985\" data-watermark=\"original\" data-original-src=\"v2-f7e8e15ff567041dfd5a4091760dbc7c\" data-watermark-src=\"v2-b750a7e94ec657ccadf4e4d363eb2c1d\" data-private-watermark-src=\"v2-44a58b5adfa7ca8751f7d1593952fc64\"></p>\n<p data-pid=\"JW6JOvBW\">接着，伴着海市蜃楼般的狂想与对虚幻美好愿景的承诺，王向忠于自己的臣民下达了荒唐的敕令：「吾欲融万千思绪为一，统万千算计为一，成就众王之王、众神之神」。王要求臣民毫无保留地献上自己的智慧与梦想，投入那台借助大地深处所获得的禁忌知识打造的被诅咒的机器。由此，在漆黑的梦魇之中，连神都可以超越的崭新智性将蜕壳而出，引导真实的乐园显现。这是计划的第二步。</p>\n<p data-pid=\"3RINp_xs\">在计划的最末，面对已经陷入寂静的国度，彻底癫狂的王展开了最后的献祭与最初的升华 —— 而祭品正是他自己。后世沙漠遗民那真伪不可考证的传说中描述了当时可怖的场景：</p>\n<p data-pid=\"ys_aPP-d\">赤王最终将他自己的智慧抽离了骨血，投入了无穷无尽、永远向着深处曲折蛇行的回廊、阶梯、门洞与雕梁。王的肉体在王座上渐渐腐朽，为巨虫所噬。而他的魂灵则同王都千百万尖叫的魂灵融成一体，永远在呼啸的末日中徘徊迷途，沿着蛇行的黑暗盘廊，向无底的深渊横冲直撞而去。在幽邃的渊底，千百万人的智慧相聚为同一个智慧，而孤零的智慧，终究化作了疯狂……<b>【注11】</b></p>\n<p><img src=\"https://picx.zhimg.com/v2-3179aec1cbd7687872b2b6932653da7a_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1870\" data-rawheight=\"812\" data-watermark=\"original\" data-original-src=\"v2-3179aec1cbd7687872b2b6932653da7a\" data-watermark-src=\"v2-b4e0efa23abbe5cc3362f1f7611883e1\" data-private-watermark-src=\"v2-71abc60039952c9dddbed26ce838920b\"></p>\n<p data-pid=\"HVLR_2BD\">赤王的计划获得成功了吗？没有人能够给出确切的答案。人们只知道，那一夜，染上深罪的蒙昧痴愚之王引来了天罚。沙漠在大地震中剧烈摇晃，王华美宫城的七重宝石巨墙纷纷垮塌，一千零一座圆柱在狂风中瑟瑟发抖，其上高踞的公牛与狮鹫一度傲视无生命的沙丘，此刻也不情愿地倒伏进入镀金的怀抱。无数住民，无论贤者还是愚者、不论是英雄还是懦夫，皆在那一夜消失于漫卷的沙暴中。</p>\n<p data-pid=\"-HNuxl7k\">即使是及时逃离的王城幸存者，也纷纷成为了盲人与哑巴，陷入了永久的沉默。人们说，这是为了惩罚他们受惠于禁忌知识的罪恶。沙海中那些曾宣誓效忠于王的部族也被降下恶咒，在随后的岁月中沉沦。曾力可搏龙的勇士部族堕落为亵渎的食尸鬼，其荣耀与骨殖终被镀金的沙丘永远掩埋；曾贤者辈出的智者部族则典籍智识尽失，成为在沙丘间流浪的歌者。</p>\n<p data-pid=\"FkbalhEV\">就这样，曾经在沙海上闪耀的金色太阳沦为如血的残阳，最终跨越了界限，沉入划分深邃黑暗的地平线，永远不再复升，带着一度辉煌的黄金国度灰飞烟灭，一同消失在了历史的长河。</p>\n<p data-pid=\"8IEIVGkc\">时至今日，已成失去历史一族的沙漠后代间只流传着松散且支离破碎的乐土传说，越来越多的沙漠子民不再纠结于自己血脉的根源，而是积极地在富饶的雨林中拥抱自力更生的新生活。唯有那在沙漠中心永不止息地释放风暴的庞大王陵，始终在向过往的旅人沉默地言说着往昔的罪与罚。</p>\n<p><img src=\"https://picx.zhimg.com/v2-03aa1bf9712e7fc7f31382904252c73c_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1874\" data-rawheight=\"1022\" data-watermark=\"original\" data-original-src=\"v2-03aa1bf9712e7fc7f31382904252c73c\" data-watermark-src=\"v2-6eaa803ea0ee4e731b70e1bfdb94c5c9\" data-private-watermark-src=\"v2-ef5b809412e196410c36a7addeb48e10\"></p>\n<p><br></p>\n<p data-pid=\"EIDMWUqY\"><b>【注释11】</b>导致乐园最终一夜毁灭的疯狂计划目前仍难觅其真实全貌，但依据已掌握的线索以及沙漠文明展现出的部分特征推断，当年赤王应当是寄希望于走「机械飞升」路线来实现超越生死与建立理想国的目标。以下是对具体情形的一些大胆猜测：</p>\n<p data-pid=\"yr1pqZAZ\">在强烈执念的驱使下，赤王明知其行为可能为他自身与文明带来毁灭性后果（参考意外阅读《日月前事》所记载禁忌知识的大蛇的遭遇），依然选择接受了群臣中激进派的建议，耗费数百年挖掘研究沙漠地下深处埋藏的统一文明时期遗迹以获取所需的失落科技，记录中出现的诸如「漆黑」之类的字眼则可能暗示赤王接触了来自「深渊」的不详知识。</p>\n<p data-pid=\"Xep-f-O2\">如今仍在沙漠遗迹中保持活动的古代超文明机械应当就是当年依靠挖掘得来的技术所实现的成果之一。最重要的是，这些技术帮助赤王打造出了用于实现其宏大计划的两项关键设备。一是用于承载灵魂数据的虚拟空间服务器（可能是人造的小型世界树，在后台支撑并记录着一切的世界树本身就可视为提瓦特的「服务器」），二是能够连接人类意识并融合智识的机器，可以理解为「虚空终端」的升级版，这种设备足以大规模引发灵肉分离现象，再通过统合大量灵魂产生超越性的集体意识。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-534b55aec5914e8f858a5fc71ce63d69_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"900\" data-watermark=\"original\" data-original-src=\"v2-534b55aec5914e8f858a5fc71ce63d69\" data-watermark-src=\"v2-fe28272e52c68aa151910275a4884447\" data-private-watermark-src=\"v2-7fecd9d7f4be665f9b23d66572355387\"></p>\n<p data-pid=\"IPmaMf81\">赤王将自己与万千臣民的人格与智慧剥离投入到系统中，希望籍由群体记忆重构出花神灵魂进行「复活」；他与子民们也会在这个过程中实现生命形式的升华，从此突破肉体的束缚，彻底战胜死亡与苦难，在梦乡获得崇高的幸福和永恒的生命。也许在赤王的计划中，数据空间最终还会反过来覆写现实，让乐园得以真正显现。</p>\n<p data-pid=\"sXrl9_OQ\">然而，在成为「赛博法老王」的道路上全力奔跑的赤王，最后换来的终究只是可怕的失败（赤王相关剧情不出意外会大量化用古埃及生死观中的概念，部分相关内容可参考<b>【注3】</b>）。</p>\n<p data-pid=\"uXvsBcSd\">从各种角度来看，过去赤王之举很难不让人联想到如今教令院为使大慈树王重生而采取的危险愚行。教令院对赤王必然极有研究，大抵是因某人或某组织的怂恿使教令院贤者们的信心极度膨胀，竟想要效仿赤王，还认为自己定将取得成功而非重复历史的悲剧吧。</p>\n<hr>\n<h2>九、翡翠色的智识之主必护得文明茁壮</h2>\n<blockquote data-pid=\"aRdfwNKs\">据说在沙海中曾有三位贤王，其中一人直到最终容貌与智慧都没有退却。<br>最终他们分别了，为了心中所寻求的乐园。<br>—— 有顶塔</blockquote>\n<p data-pid=\"ANRkYLpy\">告别华丽壮美的镀金国度，自乐土返还的树王回到了自己最初为躲避风沙而栖身的小小祭场。令树王感到欣慰的是，依然有一群忠实的信徒追随着她的智慧。</p>\n<p data-pid=\"j4LUZXDk\">为了实现建立心中理想智慧国度的宏愿，树王首先在沙漠一隅处唤出了能够招来甘霖的精灵，名唤「法留纳」，亦即「水天」。精灵驱动的神机为原本荒芜干燥的沙漠带来了湿润的水汽与珍贵的水源，伴着雨露的滋润，树王动用权能一面改造环境一面播撒生命，随之沙砾变为沃土，草木萌发繁茂，万千生灵开始繁衍生息。这里便是后来被人们称作须弥雨林的前所未见之大绿洲的最早起点。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-a590e630b7c84ff6573a5fdb46657423_720w.webp?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"512\" data-watermark=\"original\" data-original-src=\"v2-a590e630b7c84ff6573a5fdb46657423\" data-watermark-src=\"v2-eac362078e9a167033775247ac89661f\" data-private-watermark-src=\"v2-17199ed25582dfde32bc21d7fdf5c6e6\"></p>\n<p data-pid=\"LHVIV_0T\">越来越多的人类因仰慕树王的慈爱与智慧聚拢而来，树王开始了聚落的建造，被她选中的巨大圣树成为了后来闻名大陆的智慧之都须弥城的根基。在因追求真知而围绕树王身畔的学者中，深受王赏识的那一位则成为了最初的大贤者，他便是教令院的创始人。树王毫无保留地向子民传授她广博的智慧，在王的敦敦教导下，子民们理解了何为「笃行」、「诤言」与「巧思」的哲学，智慧的巨树在人们的心中扎根，成为支撑这个国度的永恒精神力量。</p>\n<p data-pid=\"MBTz6z_9\">正当绿洲的建造如火如荼地进行时，沙漠中心毫无预兆地发生了骇人听闻的大灾害。即使身处沙漠边缘的遥远绿洲，人们依然能够清晰地感受地到那股直冲天际的可怖毁灭气息，随后从自沙漠逃亡而来的流民口中，人们更是得知到一些尽管混乱破碎却令人惊惧万分的消息。尽管树王在告别赤王时就已多少料到了他的结局，但如今真的目睹镀金乐土被毁，曾经的友人走上了此等绝路，还是令树王止不住地哀婉叹息。</p>\n<p data-pid=\"Befm7yV1\">在随后的岁月，为了抵御沙漠残余力量对雨林的侵蚀，树王在沙漠雨林的交界处构筑起名为「防沙壁」的宏伟奇观。而在历经毁灭洗礼又尘埃落定的沙海中，大漠群王再度并起。诸多渺小的暴君聚集逃离末日的流民，依托古老废墟建立起神殿与宫城，在这片失去神的热砂之上不断轮舞，又在匮乏与争斗的循环中埋葬自我。遗迹之城日复一日倾圮不停，自夸强盛一时、极富一时的各路暴君亦朝生暮死。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-a7d080e8e25929681d45c23002a79aa1_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-a7d080e8e25929681d45c23002a79aa1\" data-watermark-src=\"v2-6d7b0e82059ee19721c44912f959c938\" data-private-watermark-src=\"v2-d5e9f54ea621e897fd407021b6ab087f\"></p>\n<p data-pid=\"6HFEAfyW\">再后来，沙漠彻底沦为文明的荒漠，再无凡人国度兴起。越来越多的沙漠遗民抛弃故土，踏入繁荣的雨林之国寻求谋生之路。这些人自称为「镀金旅团」，作为失去历史的蒙昧者的后代，他们坚信万物皆会背叛，不再去信仰包括雨林的主人树王在内的任何神明，唯有相信自己的双手与劳动。</p>\n<p data-pid=\"94kudU1Q\">善良的树王对此并没有任何怨言，而是欣然接受了遗民们的迁入，还推动雨林子民接纳这些来自沙漠的同胞。如今，镀金一族已成为须弥社会不可分割的一份子。</p>\n<p data-pid=\"wPL8C-os\">在树王的护佑与指引下，雨林文明得到茁壮成长，人们充满爱戴地敬称自己的神明为「大慈树王」，视王为全知全能的仁慈智慧之主。</p>\n<p data-pid=\"Kz4ks476\">漫长的时光中，树王不知曾替子民挡下了多少灾厄，每次都能化险为夷、转危为安。然而在距今五百年前，一度可以触及天穹的伟大无神国度撕开了深罪的纱幕，从大地深处下达了踏平一切的战争指令，在那场七神全体出动、至今真相不明的大战中，草木的主人不知为何竟陨落异乡，智慧的源头「世界树」也遭受到了污染……<b>【注12】</b></p>\n<p data-pid=\"Xm8aKgkT\">尽管后来须弥的人们找到了接替草神之位的新生的小吉祥草王，但很多人根本不愿接受他们爱戴仰赖的王已经撒手离去的现实。年幼的小吉祥草王也因此成为一些人的眼中钉、肉中刺，因为认可她的存在意味着承认树王的逝去。深深的敬爱与翻涌的不甘的最终化为了一股可怕的执念，一种为了让王复归可以不惜一切的疯狂。</p>\n<p data-pid=\"bo5JFiGe\">在不知何人抑或是某股势力的挑拨与支持下，现今教令院的贤者们开启了苏生树王大人的秘密计划，此般情景犹如历史的重演：曾经，赤王渴求超越生死复活挚爱之人，为此涉足禁忌知识、做出荒诞决议，最终酿成苦果令辉煌文明为其陪葬；如今，贤者们渴求与日思夜想深受爱戴之王重逢，为此不惜扩散愚行，令双手沾染罪恶。</p>\n<p data-pid=\"c9XJJagS\">至于智慧之城最终是会步上同镀金乐园一样自取灭亡的悲剧循环，还是如拥有顽强生命力的巨树般抽出翠绿新芽，那便是如今正在上演的故事了。<br></p>\n<p data-pid=\"KSXqWxoX\"><b>【注释12】</b>500 年前「漆黑的灾厄」时期大慈树王行走须弥的事迹被记载于名为《遐叶论经》的书籍中（顺带一提，「遐叶」即「久远的年月」之意）。但此书性质与其说是在忠实地记录历史，倒不如说更像是崇拜者为王所作的颂词，语言晦涩难懂且叙述含糊不清，难以提炼出有效信息，若想了解树王牺牲的真相还需等待更多线索。</p>\n<p data-pid=\"UKHNYeYs\">另外，由驾驶降诸魔山遗迹巨像的白鹄骑士小队留下的记录来看，坎瑞亚可能未必就是魔兽灾厄的实际发起者，他们似乎也是受害的一方。无论如何，至少说明当时的坎瑞亚内部并非铁板一块，而是存在不同派系且矛盾尖锐。</p>\n<p><img src=\"https://picx.zhimg.com/v2-7e0b593fda93ca74c6c1895994ae803d_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"990\" data-watermark=\"original\" data-original-src=\"v2-7e0b593fda93ca74c6c1895994ae803d\" data-watermark-src=\"v2-bd0d59ed93c64c58654e170c9c1bee19\" data-private-watermark-src=\"v2-dec6ea0b5c33bc24f6fcfa5c3c5b4968\"></p>\n<p data-pid=\"hQEl2uVY\">这方面在早先的「残像暗战」活动中就以隐藏信件形式披露了一些线索。接近战争末期时，坎瑞亚的末代帝王 —— 独眼的「伊尔明」（Irmin）已陷入「失能」状态（推测应该是自知败局已定而对自身进行了完全的「深渊化」改造。击败深渊使徒或黑蛇众掉落的刻像系列材料描摹的应该就是这位王的形象，「幽邃刻像」中王的独目已变为猩红，且长出了不属于人类的、形同恶魔的双角），坎瑞亚社会处在极度恐慌和混乱当中，大批贵族只顾四散逃窜，是由非王族的亚尔伯里奇一族（也就是凯亚的家族）挺身而出暂时摄政，才勉强稳定了坎瑞亚的局势。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-56864d3f398aa35cbca8cfa3ca2b5196_720w.jpeg?source=b1748391?rss\" data-caption=\"刻像系列材料似乎反映了发生在坎瑞亚末代帝王伊尔明身上的可怖变化……\" data-size=\"normal\" data-rawwidth=\"1014\" data-rawheight=\"412\" data-watermark=\"original\" data-original-src=\"v2-56864d3f398aa35cbca8cfa3ca2b5196\" data-watermark-src=\"v2-5f69de2b063fb186404ea6d1871d2605\" data-private-watermark-src=\"v2-f9e9e732555be900cd908682b9fbcca5\"></p>\n<p data-pid=\"KdV7NTvo\">需要特别指出的是，原神中的「世界树」英文名就写作「伊尔明苏尔」（Irminsul），亦称「伊尔明之柱」。其出自作为原始日耳曼部族中一支的古撒克逊人的神话信仰，与同属日耳曼神话的北欧神话中大家耳熟能详的世界树「尤克特拉希尔」（Yggdrasil）地位相同。伊尔明曾作为撒克逊人的战神被崇拜，但后来北欧神王奥丁（Odin）逐渐成为了日耳曼文化圈中的主流信仰，这里可以认为原神中的坎瑞亚末代帝王伊尔明选取的原型就是奥丁，他们也的确具有相同的特征：两者均是独眼，且都通过献祭换取了强大力量 —— 奥丁用右眼换得智慧之泉的泉水得到无穷智慧，伊尔明则献祭自己来引导深渊的降临。</p>\n<p><img src=\"https://picx.zhimg.com/v2-f58d7e0f86f10a7e1838fc5444a52095_720w.jpeg?source=b1748391?rss\" data-caption=\"世界树「伊尔明苏尔」\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-f58d7e0f86f10a7e1838fc5444a52095\" data-watermark-src=\"v2-d5338089c0528ff38d67401f1128767f\" data-private-watermark-src=\"v2-d908effe4005f86fd7d4674f0785fbeb\"></p>\n<p data-pid=\"IPhE29fx\">总而言之，大慈树王、坎瑞亚、世界树，这三者间必然存在着错综复杂的关联。等到揭晓树王死因真相之时，我们也将更加深入地了解坎瑞亚国度的秘密。</p>\n<hr>\n<h2>十、结束语</h2>\n<p data-pid=\"XNOYPnbQ\">须弥三位贤王的故事讲到这里就暂告一段落了。依据目前游戏中可获取的资料和线索，大体上已经可以还原出须弥历史上三王乐园建立到毁灭的时间线，但仍存在很多不明及疑点之处需要得到补充和解决。主要包含以下方面：</p>\n<ul>\n<li data-pid=\"HjhnkYis\">赤王的身世谜团，阿赫玛尔是否真的是来自天空岛的遗落神明，他又为何会自高天陨落凡尘；</li>\n<li data-pid=\"RDcRokLY\">有关花神所属的仙灵一族的更多背景情况；</li>\n<li data-pid=\"KzzZMB6Z\">花神陨落的具体经过，她是因魔神战争爆发被杀，抑或是自我衰弱而死，或是有其他出乎意料的原因；</li>\n<li data-pid=\"Zt7YPg4h\">赤王到底在沙漠地下挖掘到了什么漆黑遗产，为何原本存在于此地的先进文明会被天罚所埋葬；</li>\n<li data-pid=\"_YSBiCuz\">赤王当年为超越生死、复活花神而执行的疯狂计划究竟做了些什么，乐园被毁灭的真相又是什么；</li>\n<li data-pid=\"k2pHVW8R\">树王在坎瑞亚灾变中具体经历为何，世界树所患的「顽疾」为何，树王在世界树记忆中的留言「世界……遗忘我」的含义又为何；</li>\n<li data-pid=\"0eKRCXAT\">小吉祥草王是如何诞生的，她与花神都被称为「月亮」，二者是否存在一定联系？</li>\n</ul>\n<p data-pid=\"fXROK9Bo\">以上这些疑问相信在后续版本内容中都会逐一获得解答。到后续积累足够多的资料后，我应该也会对须弥三贤王的故事进行修订和补充，将这部史诗臻于完善。最后，感谢所有读到这里的朋友们，就让我们一起期待未来游戏故事的精彩表现吧！</p>\n<p><img src=\"https://pic2.zhimg.com/v2-26073ca7f7b6cd6495b37ecde7ca03a6_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"861\" data-watermark=\"original\" data-original-src=\"v2-26073ca7f7b6cd6495b37ecde7ca03a6\" data-watermark-src=\"v2-cc898af69fe8d59108cbdb41bcaf0849\" data-private-watermark-src=\"v2-69be17f458127d3f1a86f1181a4f68a1\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/ai-luo-38?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">呆罗</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/549752067/answer/2669602044?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">386 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/547839691?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价《原神》3.0 须弥前瞻特别节目「千朵玫瑰带来的黎明」？</a><br><a href=\"http://www.zhihu.com/question/548399702?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">原神3.0版本《千朵玫瑰带来的黎明》已开启，你的体验如何？</a><br>\n","link":"http://www.zhihu.com/question/549752067/answer/2669602044?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"明星冯雷称一款气泡水竟有 232 种配料，出品公司回应是复合元素酵素粉，什么是复合元素酵素粉？","date":"2022-09-13 06:01:11","description":"\n<p data-pid=\"vtdIT4s8\">今天看到这个新闻，发了条想法。 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/a82f1c4468f30f3e4f1b2dcd9b10795c\" data-hash=\"a82f1c4468f30f3e4f1b2dcd9b10795c\" data-hovercard=\"p$b$a82f1c4468f30f3e4f1b2dcd9b10795c\">@yuan jiang</a> 这个回复贡献了我一天的笑点，差点笑背过气去……</p>\n<p><img src=\"https://pic2.zhimg.com/v2-a00b4bb79df04b5aa4087ea8bbedfc8a_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1330\" data-rawheight=\"1346\" data-watermark=\"watermark\" data-original-src=\"v2-a00b4bb79df04b5aa4087ea8bbedfc8a\" data-watermark-src=\"v2-af7a8a91c5edfc04d521e26e048cf5a8\" data-private-watermark-src=\"v2-b02f8aa4f6ea4dbe2d741f4ed0f130ff\"></p>\n<p data-pid=\"pyrykIgG\">这么夸张的配料表，之前我也见过，是一个所谓的「大麦若叶青汁酵素」的固体饮料，也是一百多种配料配成的粉，当时也是叹为观止。</p>\n<p data-pid=\"3RC05Uo-\"><b>这种产品说白了就是噱头，通过夸张的配料吸引大家购买。</b>不排除有部分人会觉得它里面配料多，因此「综合了各种植物的营养和精华」，觉得喝起来会更健康。</p>\n<p data-pid=\"PH1VmJBi\">但我们业内人士一看就知道，<b>这些配料的添加量都很少，几乎可以忽略不计。</b></p>\n<p data-pid=\"0yaMqfOc\">中国法规规定，配料表中配料的顺序，只要大于 2%，就必须从大到小排列。所以，我们看一样食物的配料表，只要看前三项，就能大致把握「这个食物里最多的东西是什么」。</p>\n<p data-pid=\"tILFX7Jx\">这个饮料前三项是<b>水、赤藓糖醇（代糖）和抗性糊精（膳食纤维）。</b>这就是这个饮料含量最多的三样东西。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-385d802b0c93282bc7d9cd0009619c32_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"959\" data-watermark=\"watermark\" data-original-src=\"v2-385d802b0c93282bc7d9cd0009619c32\" data-watermark-src=\"v2-3ef0da0cba687eba8b761f4c441aa75e\" data-private-watermark-src=\"v2-2da7107e165b0d4c1e6d9607d559112f\"></p>\n<p data-pid=\"OLYkBzR4\">即使咱们再看后面几项，也是<b>二氧化碳、红葡萄浓缩汁（提供葡萄的味道）和紫胡萝卜浓缩汁（天然着色成分，提供紫色）。</b></p>\n<p data-pid=\"O6XQtW7-\"><b>再往后我们才看到「综合果蔬酵素粉」这个配料。这个配料的添加量一定已经非常低了。</b>我估计应该不会超过 1%。后面两百多种配料都是这个「酵素粉」展开后的第一项「植物酵素」进一步展开后的结果，因此每种配料占比基本可以忽略不计。</p>\n<p data-pid=\"N_Rx0XuN\">配料表这种「双重展开」的形式大家一下子可能看不太明白，我换一种形式大家就懂了：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-767a85008624cd10f52c1e062ea87121_720w.png?source=b1748391?rss\" data-caption=\"其实这个产品的配料表是这样的结构\" data-size=\"normal\" data-rawwidth=\"2110\" data-rawheight=\"1212\" data-watermark=\"watermark\" data-original-src=\"v2-767a85008624cd10f52c1e062ea87121\" data-watermark-src=\"v2-6fc3e3055ae4c447ef08cf2539f8d4c2\" data-private-watermark-src=\"v2-64e2d6a3ef8a7971a0e644e234b3e199\"></p>\n<p data-pid=\"NaxvBQgb\">值得注意的是，「植物酵素」这一项后面写了「5mg/L」，我的理解是「植物酵素」在整个饮料中的占比是 5mg/L。这大约相当于 0.0005%。也就是说，后面两百多种成分加起来也只占到整个饮料的 0.0005%！这有点太夸张了，我都在怀疑是不是标签写错了……</p>\n<p data-pid=\"ytXKRQzZ\"><b>话说回来，就算添加量高了，这个「酵素粉」依然无法减肥或者保护你的健康。</b>其实「酵素」概念是日本的舶来智商税。我很久之前就写过专门的文章辟谣。简而言之，任何「酵素可以减肥、有利健康」的宣传都是不靠谱的。之前还有很多人在家里自制酵素，这种行为食品安全风险非常大。</p>\n<a href=\"https://zhuanlan.zhihu.com/p/22561028\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://picx.zhimg.com/v2-5017e6065a82c35f2594c6d0c9ddb002_qhd.jpg?source=b1748391\" data-image-width=\"750\" data-image-height=\"500\" class=\"internal\">钱程：酵素食品的神话，真的早就该破灭了。</a><p data-pid=\"G5XGnzhM\">总之，这就是一个商业宣传的噱头。大家如果看到那么多配料就想买来试试，那商家的目的也达到了……</p>\n<hr>\n<p data-pid=\"jayVu5dj\"><a class=\"member_mention\" href=\"http://www.zhihu.com/people/6ca1d4e865869b20a9049165a1d3e519\" data-hash=\"6ca1d4e865869b20a9049165a1d3e519\" data-hovercard=\"p$b$6ca1d4e865869b20a9049165a1d3e519\">@骑桶者</a> 提到</p>\n<blockquote data-pid=\"TGM-Sz5I\">虽然法律规定了超过一定限度的必须标注，但是没规定低于限度的不能写，现在的问题是他怎么证明自己添加了这个东西，标志物是什么？检测方法是什么？</blockquote>\n<p data-pid=\"-VcHqSvG\">这是一个特别好的问题。我觉得按照目前的检测方法，完全无法证明商家真的加了这两百多种东西在它的「酵素粉」里。通过「检测」来一个一个验证是不可能的。</p>\n<p data-pid=\"KObPgpia\">想监管的话，可以从生产层面进行。比如可以看厂家是否有原料验收、生产过程的完整监控和记录。但这也是容易作假的。总之，到底有没有加 200 多种东西，可能只有商家自己清楚了。</p>\n<p data-pid=\"Xjv5Q1SD\">另外还有一个问题：</p>\n<blockquote data-pid=\"oOq3aBOR\">「酵素粉」的这 200 多种配料按法规是必须展开吗？还是可以不展开？</blockquote>\n<p data-pid=\"qnSTCFwO\">这要看走什么标准。如果酵素粉走的是如「固体饮料」或者「固体复合调味料」这样已经有国家、行业或地方标准的类别，鉴于添加量远小于 25%，是可以不用展开的。如果酵素粉走的是企标的话，那无论添加量多少，都必须展开。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/qcboy?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">钱程</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/552699851/answer/2668473314?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">106 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/392899859?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">汪想微量元素片盖子拧不紧是正品吗?</a><br><a href=\"http://www.zhihu.com/question/552709682?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">演员冯雷吐槽气泡水含232种配料，味道像葡萄汁，公司回应：系酵素粉，如何看待此事？</a><br>\n","link":"http://www.zhihu.com/question/552699851/answer/2668473314?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"iOS 16 正式版来了，升级后先试试这些新功能","date":"2022-09-13 03:33:18","description":"少数派为你整理了新版系统中值得关注的新功能和新特性，如果你升级新系统之后想了解有哪些新功能，这篇文章能够帮助到你。<a href=\"https://sspai.com/post/75688\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75688"},{"title":"派早报：iOS 16 与 watchOS 9 等系统正式版推送、Sony 召开新品发布会","date":"2022-09-13 01:01:45","description":"Valve 为 Steam Deck 推出官方维修服务，德国认定特斯拉 Autopilot 功能存异常等<a href=\"https://sspai.com/post/75691\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75691"},{"title":"少数派们都得过啥病？谈谈编辑部面对的健康问题","date":"2022-09-12 03:16:43","description":"痛风、近视、结石、脊柱侧弯⋯⋯听听他们遇到的健康问题和对策。<a href=\"https://sspai.com/post/75678\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75678"},{"title":"Apple 新品发布会上没告诉你的那些事","date":"2022-09-11 06:02:33","description":"除了发布会上介绍过的新特性，其中还不乏一些发布会上并没有提及、但仍然值得我们关注的细节，少数派为你整理了其中一部分，让我们一起来看一下。<a href=\"https://sspai.com/post/75672\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75672"},{"title":"任意键｜乌贼娘大战章鱼哥；守望先锋闪电般归来；大名鼎鼎的 V 及其他","date":"2022-09-11 03:03:22","description":"中秋快乐！「任意键」是少数派新试点的游戏周报栏目，我派编辑部的整活担当Kiririn将在此为各位读者盘点和锐评本周值得关注的游戏新闻。🎮玩游戏任天堂｜《斯普拉遁3》现已发售，首次支持简体中文万众期待的 ...<a href=\"https://sspai.com/post/75669\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75669"},{"title":"从选购到使用，让 3D 打印机打开新世界的大门","date":"2022-09-10 07:30:00","description":"3D 打印机虽然看上去没什么用，但当你获得了可以加工各种形状零件能力的时候，你的想法可能就不太一样了。<a href=\"https://sspai.com/post/75665\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75665"},{"title":"大厂出品不等于又大又慢，这 6 个小应用值得一试","date":"2022-09-10 03:00:00","description":"不过大厂也并非所有产品都如此不堪，总有一些优质应用，因为顶着「大厂」的帽子让用户望而却步。<a href=\"https://sspai.com/post/75275\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75275"},{"title":"两份相同汽油，一份给燃油车用，另一份先发电再给电动汽车充电，假设两辆汽车总质量相当，哪种车跑得更远？","date":"2022-09-07 04:05:47","description":"\n<p data-pid=\"4qyPAS8J\">先烧油驱动发电再驱动汽车，其实也就是串联式混合动力，或者说是增程式电动汽车。乍一看，这有一种脱了裤子放屁的感觉。</p>\n<p data-pid=\"yugLWoOP\">我们知道，每一步能量转换环节都会折损不少可用能量，那从「燃油→机械能」 的一步转换到 「燃油→机械能→电能→机械能」的三步转换，能量转换路径多了2倍（考虑电池甚至更多），肯定效率更低、肯定跑得更近啊！</p>\n<p><img src=\"https://pic2.zhimg.com/v2-b05b8bdcae2e29920a0060316e17601e_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"798\" data-rawheight=\"186\" data-watermark=\"original\" data-original-src=\"v2-b05b8bdcae2e29920a0060316e17601e\" data-watermark-src=\"v2-38c6cf3acf25557035e58c7c73a3e03b\" data-private-watermark-src=\"v2-769f7e3ec7549182703f12b7b777cd92\"></p>\n<p data-pid=\"V2N5ZEwJ\"><b>实际上，事情没有这么简单！主要原因是发动机的脾气太暴了，状态最好的时候效率高达43%，状态不好的时候可能只有15%。</b>状态差的时候，产出只有三分之一，这暗示着潜力很大。</p>\n<p data-pid=\"fYGuQduq\">不幸的是，咱们开车的主要工况正好处于发动机状态不好的区域：<b>低速、低扭、走走停停</b>。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-286a49629ed85599c67fd2a281c900db_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"809\" data-rawheight=\"700\" data-watermark=\"original\" data-original-src=\"v2-286a49629ed85599c67fd2a281c900db\" data-watermark-src=\"v2-29bb5e5c072ed10920c2a9f422ee8023\" data-private-watermark-src=\"v2-9e200bfbda4dedfca3545e19c8b3b2a4\"></p>\n<p data-pid=\"gktDr9hM\">其实，上面这张图已经很简化了。如果你说，不想看到发动机、转速、转矩这种专业术语，那我画一个更简化的：</p>\n<p data-pid=\"qUcTK3Ox\">横坐标是工作状态，纵坐标是工作产出。在燃油车中，发动机状态最好可以实现43kJ的工作产出，状态最差只能产出15kJ。上文已述，不幸的是燃油车的发动机经常工作在比较差的状态。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-fdf99fd9693baaaf5518bff975ac6abd_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1520\" data-rawheight=\"1145\" data-watermark=\"original\" data-original-src=\"v2-fdf99fd9693baaaf5518bff975ac6abd\" data-watermark-src=\"v2-5cc594b0b673c67ac97b590cdf699dda\" data-private-watermark-src=\"v2-627bd4d767248a922dc967839d451d4b\"></p>\n<p data-pid=\"qe-B9vZc\">由于增加了多道能量转换环节，增程式的整体产出曲线会下降，如下图蓝线所示。可以看到，蓝线上的点，处处低于黑线，这就会给人一种脱了裤子放屁的错觉。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-7fb610661db3f42d2b9e9f2484be3bd7_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1580\" data-rawheight=\"1158\" data-watermark=\"original\" data-original-src=\"v2-7fb610661db3f42d2b9e9f2484be3bd7\" data-watermark-src=\"v2-ef551f377e73fdf0f4a898ccc6ba275a\" data-private-watermark-src=\"v2-8c6ace286006da2c99cd8a479c575093\"></p>\n<p data-pid=\"F2knSE27\">然而，增程式可以实现发动机的转速解耦、转矩解耦，也就是转速与车速无关、转矩与油门深度无关，从而可以设定一直工作在比较好的状态。如此一来，原本15kJ的产出由于能量转换降低到12kJ，又由于工作状态变好提升为37kJ。</p>\n<p><img src=\"https://pica.zhimg.com/v2-1fed950208fd865d6d36069738f35818_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1461\" data-rawheight=\"1124\" data-watermark=\"original\" data-original-src=\"v2-1fed950208fd865d6d36069738f35818\" data-watermark-src=\"v2-328d260610760fd925d70d5f3ab9fc50\" data-private-watermark-src=\"v2-ab7a9f79da925db7b9c2f8e2b53fca06\"></p>\n<p data-pid=\"adeV-1rF\"><b>37kJ &gt; 15kJ，赚了啊！ 如此一来，增程式虽然能量转换环节多了，但最终产出却提高了，因而可以跑得更远。</b>这就像老板把办公室弄宽敞一点、娱乐空间更大一点，员工心情变好了、单位面积的产出可能反而会提升一样。</p>\n<p data-pid=\"pLbYoK21\"><b>当然，这是增程式发挥作用的理想情况。实际工程中，工作状态带来的提升，能否cover掉能量转换造成的损失，还不好说。</b>大体上来说，在综合工况中是可以cover掉的，因为：</p>\n<ul>\n<li data-pid=\"rZqngEac\">综合工况中的高速路况比较少，燃油车的发动机工作状态很差，增程式的优化潜力比较大。</li>\n<li data-pid=\"q9nuoKad\">增加了电机、电池后，自然就可以回收制动能量，这相当于额外的收益。详见：</li>\n</ul>\n<a href=\"https://www.zhihu.com/question/268221677/answer/2464268607\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://picx.zhimg.com/v2-1336d6ea6a6d3a931a256c7134c2d5fe_l.jpg?source=b1748391\" data-image-width=\"845\" data-image-height=\"737\" class=\"internal\">为什么电动车再生制动时大部分能量都消耗了，仅仅回收了一小部分能量？</a><p data-pid=\"hcF-cNxq\">此时，敏锐的你可能意识到了，上述推理中漏掉了一环： <b>虽然发动机转速转矩解耦了，但驱动电机的转速转矩还是与车速、油门相关啊。难道电机不怕工作状态差吗？</b></p>\n<p data-pid=\"CkjY585I\"><b>还真不怕，因为电机是一个好脾气。</b>我们随便拿出一个2004年的古老电机，就发现最高效率94%，低的地方也有86%，二者相除得到差距也就是8-9%。相比之下，发动机的最大效率却是最小效率的3倍（差别200%）。相比之下，电机比发动机更加情绪稳定！</p>\n<p><img src=\"https://pic2.zhimg.com/v2-ac3a04485806812deb3036749859d800_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"798\" data-rawheight=\"432\" data-watermark=\"original\" data-original-src=\"v2-ac3a04485806812deb3036749859d800\" data-watermark-src=\"v2-c531dde244469c0ef990f93db6836403\" data-private-watermark-src=\"v2-235fe6148513481eccb7366e774f31ee\" data-tags=\"politic\"></p>\n<p data-pid=\"szjWpxb0\">如果你想更进一步，把高速工况这个弱点也解决掉的话，那就成了串并联混动系统了。代表作正是如日中天的比亚迪DM-i：</p>\n<a href=\"https://www.zhihu.com/question/432584257/answer/1619236358\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pica.zhimg.com/v2-6fe426789451890ff0c21a0410ff5e7d_qhd.jpg?source=b1748391\" data-image-width=\"1096\" data-image-height=\"704\" class=\"internal\">如何评价比亚迪秦PLUS搭载的DM-i混动技术，为何被称之为「超级混动」？</a><p data-pid=\"fhJjxv9Q\">以及各自主品牌也纷纷上马差异化的串并联混动：</p>\n<a href=\"https://www.zhihu.com/question/531029649/answer/2554718172\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-a57523ee27a6e71612325a4c08cc9fc3_qhd.jpg?source=b1748391\" data-image-width=\"1832\" data-image-height=\"1118\" class=\"internal\">比亚迪推出了 DM-i、吉利推出了雷神、长城有了柠檬 DHT，国产混动技术究竟是什么水平？</a><p data-pid=\"GI6RT-zz\">当然，从技术角度来看，增程式也有水平高低之分。具体技术分析就不在这篇小白科普文中展开了。有兴趣的可以看：</p>\n<a href=\"https://www.zhihu.com/question/513921808/answer/2470797136\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-ca458c28097ceefb0ddd1cbe2abee945_qhd.jpg?source=b1748391\" data-image-width=\"1216\" data-image-height=\"692\" class=\"internal\">增程式电车有什么致命缺点吗？</a><p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhangkangkang?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">张抗抗</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/549701825/answer/2658183113?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">221 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/386369330?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">燃油车加油，电动汽车充的是电，为什么买油车客户不关注油箱的大小，而购电动汽车的客户会关注电池的续航呢？</a><br><a href=\"http://www.zhihu.com/question/300950415?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">中国  何时可以造出不用油的车 ？何时让车只充一次电永远都不要充电？</a><br>\n","link":"http://www.zhihu.com/question/549701825/answer/2658183113?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"如何突破关键技术，降低燃料电池的成本？","date":"2022-09-07 04:01:13","description":"\n<blockquote data-pid=\"nZ3oYKjk\">燃料电池汽车的产业化是氢能应用的突破口，我们要坚持自主创新，突破卡脖子技术，实现关键材料与部件的批量生产，大幅度降低燃料电池车、加氢站建设和氢源的成本，尽快实现燃料电池汽车的产业化。</blockquote>\n<p data-pid=\"_7rvbasb\">燃料电池的发电原理是电化学，因此它的转化效率比较高，可以达到60%左右，燃料电池主要是由电解质膜、电催化剂、扩散层和双极板等关键材料构成。燃料电池的工作方式是内燃机的，它要构成一个系统，燃料电池是发电的场所。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-41d06444ccbc9d61f4a1eb4c76f8dc6f_720w.png?source=b1748391?rss\" data-rawwidth=\"371\" data-rawheight=\"350\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-41d06444ccbc9d61f4a1eb4c76f8dc6f\" data-watermark-src=\"v2-3a28a760b111be1a57f2992c942ad81d\" data-private-watermark-src=\"v2-3530313b13c350cbf62df1e54e5c5d5a\"></p>\n<p data-pid=\"QZfMNhfd\">这个系统是由燃料电池电堆、燃料供给系统、氧化剂供给系统、水液管理系统、电控系统来构成，因此燃料电池是比较安全的。如果燃料电池堆发生故障，只要把氢源切断，不会产生燃烧和爆炸。另外，燃料电池比能量非常高，可以达到每公斤0.5~1千瓦每小时，因此它特别适合于重载车和长途车。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-2f4ad149b9e6d8075e6914490c009219_720w.png?source=b1748391?rss\" data-rawwidth=\"1133\" data-rawheight=\"663\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-2f4ad149b9e6d8075e6914490c009219\" data-watermark-src=\"v2-745853d0096c0bf41fe8bb28b366053e\" data-private-watermark-src=\"v2-3ed01f9dac102776953c97f840afcac4\"></p>\n<p data-pid=\"_G2MQ669\">把燃料电池发动机装到车上，我们用氢瓶来代替油箱，用燃料电池发动机来代替内燃机，得到的好处就是没有尾排，尾排仅仅是水。</p>\n<p data-pid=\"l-kKRANN\">燃料电池车的构型，燃料电池是由燃料电池发动机来推动的，那么燃料电池通过大电流、低电压的发电设备，通过DC/DC来增压，和二次电池进行混合推动电机，电机来推动燃料电池车。燃料电池车特别适合长途重载车。燃料电池的优点一是能量比较高，另外电堆和氢罐是分开的，因此比较安全。第三个燃料电池续驶里程，加氢时间驾驶的舒适型均可与燃油车媲美。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-5dea1a2b3bf456cf1688e511f8010d1a_720w.jpeg?source=b1748391?rss\" data-rawwidth=\"1080\" data-rawheight=\"514\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-5dea1a2b3bf456cf1688e511f8010d1a\" data-watermark-src=\"v2-9186e276d2c65534b73433f20c019fe3\" data-private-watermark-src=\"v2-fb73eea6391713dd6bf33fc62cf5b687\"></p>\n<p data-pid=\"2oE_eiiX\">但是燃料电池要想产业化，必须攻克：一是目前燃料电池发动机贵导致一辆燃料电池车的售价是燃油车的两倍到三倍、锂离子电池车的1.5到2倍。二是加氢站建设费用比较高，达到每个加氢站1200万元到1500万元，在加氢站加氢的费用比较高，达到60-80元，只有降到30元以下才能和燃油车竞争，因此要实现无补贴的燃料电池商业化，必须大幅度降低燃料电池发动机的成本和氢气成本，同时降低加氢站的建设费用。</p>\n<p><img src=\"https://pica.zhimg.com/v2-3976058707631e2086322f5337a99b4c_720w.jpeg?source=b1748391?rss\" data-rawwidth=\"641\" data-rawheight=\"428\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-3976058707631e2086322f5337a99b4c\" data-watermark-src=\"v2-eba4beeb8797021682ca1881687a1e8d\" data-private-watermark-src=\"v2-c08ca1e8434b762529bac8fb9e1b7d98\"></p>\n<p data-pid=\"oxt3EdyS\">国家为了解决卡脖子技术问题和实现燃料电池车的产业化，提出了燃料电池车示范城市群的意见。现在这个已经通过了初步评审，很快就会宣布。</p>\n<p data-pid=\"_G-xBOU0\">那么要想降低燃料电池电堆的成本，我们必须提高电堆的比重率。二是实现关键材料，电催化剂、质子交换膜、双极板、膜电极三合一和电堆批量生产。三是依据工况和电堆适宜的运行条件制定控制策略，确保电池系统的可靠性与耐久性。</p>\n<p><img src=\"https://picx.zhimg.com/v2-d1104d0c78b0a4e7bf4b1c380823eb74_720w.jpeg?source=b1748391?rss\" data-rawwidth=\"1080\" data-rawheight=\"1024\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-d1104d0c78b0a4e7bf4b1c380823eb74\" data-watermark-src=\"v2-0841216234dbc44446cc01af1435712d\" data-private-watermark-src=\"v2-4775f89e14e676443f3f70655bd2fd7e\"></p>\n<p data-pid=\"3wS5qrKt\">这是燃料电池的PEMFC典型极化曲线，它由三部分反映出，一个是欧姆极化，一个是扩散极化，还有一个最大的化学极化。我们一定要降低这三个极化，才能够大幅度提高燃料电池堆的比功率。</p>\n<p data-pid=\"FxzJoDi-\">另外燃料电池车所用的电堆是用铂来做催化剂的，现在国内达到了每千瓦0.3克铂，国际上达到了每千瓦0.2克铂左右，我们要降到0.1克铂以下才能实现燃料电池商业化。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-1fb2b64f84b57b745649bc2f7d00c71e_720w.png?source=b1748391?rss\" data-rawwidth=\"465\" data-rawheight=\"340\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-1fb2b64f84b57b745649bc2f7d00c71e\" data-watermark-src=\"v2-d0a06edbf43cdfd8c278a8bbd399e685\" data-private-watermark-src=\"v2-e58f67c325448fa7af1578140c49866a\"></p>\n<p data-pid=\"aAPm7p3N\">燃料电池的成本如果实现批量生产，它的成本会大幅度下降，所以现在在五部委城市群示范计划领导下，我们先要解决卡脖子技术问题，解决批量生产问题，来大幅度降低燃料电池成本，使它能够接近锂电池电动车成本，这样燃料电池车在重载和长途运输车就可以实现产业化。</p>\n<p data-pid=\"rU7rmnHY\">我们解决了卡脖子技术，实现了批量生产，我们还要创新驱动来解决燃料电池的技术发展，实现燃料电池乘用车的商业化。</p>\n<p data-pid=\"g1-BGPOb\">第一我们要简化电池系统和电堆结构，降低燃料电池发动成本和延长电堆寿命。比如采用薄膜、氢空逆流，可以去除增湿器。阳极水管理、消除局部反极，延长电堆寿命。我们可以消除扩散层，来降低电堆成本。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-2f5661093ffaab877a642c7fb33e8b2b_720w.jpeg?source=b1748391?rss\" data-rawwidth=\"641\" data-rawheight=\"402\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-2f5661093ffaab877a642c7fb33e8b2b\" data-watermark-src=\"v2-7a5f256d597e974944c7754201f66bc1\" data-private-watermark-src=\"v2-d1a3defdb154a0a8833a2bdb0a249c5e\"></p>\n<p data-pid=\"y1LHzuGQ\">另外我们要研发高温膜和抗毒的电催化剂，降低氢气成本。研发高温膜，使燃料电池在近200度工作，即抗一氧化碳的毒化作用，又有利于燃料电池派热河消除二向流提高电堆一致性，进而提高工作电流密度和电堆比功率，利用有序化电极应用，大幅度降低铂用量。</p>\n<p data-pid=\"aLaCN3u6\">我们要研发抗毒的阳极电催化剂，让燃料电池能吃粗氢，降低燃料电池的成本，实现乘用车和商用车的商业化。</p>\n<p data-pid=\"l6OICwBm\">氢源现在有三种来源，一个化石燃料制氢，一个工业副产氢，还有一个电解水制备绿氢。氯碱副产氢最好净化，只要脱除氯就可以了，合成氨工业的释放气必须脱除微量的氨，丙烷脱氢丙烯必须脱除烃类。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-0a3afc857456619abb26e3980b381ac2_720w.jpeg?source=b1748391?rss\" data-rawwidth=\"750\" data-rawheight=\"1000\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-0a3afc857456619abb26e3980b381ac2\" data-watermark-src=\"v2-42c18085ba17743abc221b2f280e7d5d\" data-private-watermark-src=\"v2-8cf72b25c43280249bd632bf2eef82fd\"></p>\n<p data-pid=\"84YVzMnt\">发展精准对燃料电池有毒杂质的净化方法，制订标准、规定检测方法和设备，达到精准的副产氢的净化来降低氢的成本。</p>\n<p data-pid=\"XUgdz8dL\">长距离输送也是氢比较大的问题，氢的长距离输送有三种方案可选，一个是制氢送到天然气管网，跟天然气一起送到用户。再一个可再生能源电解水制氢，将氢绿化，用车送到各个能源。第三个就是可再生能源电解制氢根收集二氧化碳进行合成甲醇。</p>\n<p data-pid=\"rA0qx7Au\">氢安全，最后一个问题，人们已经习惯于汽油作燃料，对于氢气还缺乏了解，要利用氢气易于检测，扩散速度快，在可能有氢泄漏的地方加上氢气传感器，当氢浓度高于千分之五时，联动风机自动启动，确保氢安全。所以我们主张就是要做廉价的、可靠的氢气传感器，同时不管是室内和室外，在氢气可能泄漏的地方都加上氢气传感器和联动风机。这样来确保室内和室外，特别是加氢站和制氢场所的氢安全。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-c1f77b42311fd58622d02b47e91f5409_720w.jpeg?source=b1748391?rss\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-c1f77b42311fd58622d02b47e91f5409\" data-watermark-src=\"v2-21bf4f96da763a902d6b5158f8a046b7\" data-private-watermark-src=\"v2-3d380905413b89d2d8726cbe0ff31fc2\"></p>\n<p data-pid=\"pIZi7rLc\">氢是向上跑的，所以汽油车都烧没有了，氢气车还是完整的。另外挪威加氢站爆炸，爆炸以后加氢站形状还存在。要是俄罗斯汽油加氢站爆炸以后，基本上看不到了。所以利用氢扩散速度比较快这一点和容易检测这一点，我们确保氢安全。现在全世界有三万到四万辆燃料电池车在运行，没有一辆燃料电池车发生燃烧和爆炸。</p>\n<p data-pid=\"nPEV2b0n\">最后我们讲一下结语，实现燃料电池关键材料和部件的产业化并批量生产，同时提高电堆的比功率就可以大幅度降低燃料电池发动机的成本，进而降低燃料电池车的成本。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-311e989b8d8ecf465aabc23a4e01fd5e_720w.png?source=b1748391?rss\" data-rawwidth=\"459\" data-rawheight=\"354\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-311e989b8d8ecf465aabc23a4e01fd5e\" data-watermark-src=\"v2-6384013118a5044404befc35d9effa1e\" data-private-watermark-src=\"v2-162fc5b76219adb44818700591021150\"></p>\n<p data-pid=\"XmX_KUKA\">靠技术创新，简化电堆结构和电池系统，采用超低铂有序化电极化大幅度降低铂用量，将燃料电池车的成本降到锂离子电动车水平，并实现乘用车商业化。大力发展可再生能源电解水制备绿氢，采用天然气或纯氢管网输送氢气，加氢站加的氢可降至每公斤30元以下，车的运行费用就可以和燃油车竞争了。实现氢气压缩机，高压储氢瓶和加氢机等国产化和批量生产，建油、氢、电合建站，就可以大幅度降低加氢站的建设费用，待加氢站达到一定密度，再示范商业化乘用车。</p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/mai-zi-5-79-37?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">小易说氢能</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/549921373/answer/2657431822?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">6 个回答，查看全部。</a><br>\n","link":"http://www.zhihu.com/question/549921373/answer/2657431822?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"能不能研究核动力汽车，5年以上不更换电池那种？","date":"2022-09-07 04:00:52","description":"\n<p data-pid=\"q-vxllWs\">历史上，美国曼哈顿计划于1942年启动，仅仅三年的研究后，在1945年7月16日成功进行了第一次<a href=\"https://www.zhihu.com/search?q=%E6%A0%B8%E7%88%86%E7%82%B8&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2182832157%7D\" class=\"internal\">核爆炸</a>实测。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-ad863ae169ad371e22df89e7d1994d57_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"565\" data-rawheight=\"682\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"R79qmZMF\">在原子弹爆炸后的第六年，1950年的第一次“问号会议”中，美国陆军就提出了TV1核动力坦克计划。</p>\n<p><img src=\"https://picx.zhimg.com/v2-781f7ef7be1ce58b796252afa18df267_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"221\" data-watermark=\"watermark\" data-original-src=\"v2-781f7ef7be1ce58b796252afa18df267\" data-watermark-src=\"v2-edc5b022dd893673d962aedb6c5dcd73\" data-private-watermark-src=\"v2-1fab41e0c9b74596259422a85fc2fcca\"></p>\n<p data-pid=\"KDwt7ZHs\">核动力坦克的设计目标和<a href=\"https://www.zhihu.com/search?q=%E6%96%B0%E8%83%BD%E6%BA%90&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2182832157%7D\" class=\"internal\">新能源</a>汽车的目标一样，为了长续航而不用进行燃料补给。使得核动力坦克能在后勤孱弱的地区，也能发起钢铁洪流的杀伤性。</p>\n<p data-pid=\"8Sng_6nc\">当时对核动力辐射并无多少敬畏的军方甚至在坦克上增添了咖啡机这样高能耗设备，来提高士兵的舒适度，因为核动力可以解决一切的能源问题。</p>\n<p data-pid=\"IOgt0ILF\">该型号的坦克也有常规能源版，TV1的兼容版——TV8坦克一开始使用克莱斯勒V8发动机提供动力。如果装配了微型核反应堆，则能解决续航的问题，可以连续开上万公里而不用添加燃料。</p>\n<p><img src=\"https://pica.zhimg.com/v2-cbd69e5913b14d99a92727fa3d48a825_720w.jpg?source=b1748391?rss\" data-caption=\"TV8核动力坦克\" data-size=\"normal\" data-rawwidth=\"594\" data-rawheight=\"321\" data-watermark=\"watermark\" data-original-src=\"v2-cbd69e5913b14d99a92727fa3d48a825\" data-watermark-src=\"v2-0328aeb54d7927900402ad48ab125861\" data-private-watermark-src=\"v2-e9f725bc0ac82a6f4344a25128137795\"></p>\n<p data-pid=\"qJo4pTJs\">但是，坦克不能像战舰、潜艇一样用厚厚的保护层隔绝辐射，坦克内的<a href=\"https://www.zhihu.com/search?q=%E6%A0%B8%E5%8F%8D%E5%BA%94%E5%A0%86&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2182832157%7D\" class=\"internal\">核反应堆</a>时刻辐射内部成员，且用来降温的水源也成问题。强烈的辐射下，即便不考虑乘员的生命健康，也得采取每两小时更换乘员组，但这样反而大大增加了后勤压力。此外，坦克若被击毁，难免出现大范围的<a href=\"https://www.zhihu.com/search?q=%E6%A0%B8%E6%B3%84%E6%BC%8F&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2182832157%7D\" class=\"internal\">核泄漏</a>，对周边的士兵、环境都是一种伤害。</p>\n<p data-pid=\"RIJj_zXX\">在多重因素叠加下，最终让该项目被否决。</p>\n<p data-pid=\"tPj7kkpC\"><b>除了核动力坦克，实际历史上也出现过核动力汽车。早在1957年，福特就推出来概念车Nucleon.</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-ded82a5b73e178a21d3bf0d61804c461_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"451\" data-rawheight=\"282\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"Z1IJKpUV\">这款车也用水来冷却<a href=\"https://www.zhihu.com/search?q=%E5%8F%8D%E5%BA%94%E5%A0%86&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2182832157%7D\" class=\"internal\">反应堆</a>，并用热蒸汽驱动车辆，甚至还提出了在加铀站补充燃料的构想。看到这里，是不是很熟悉，就和现在的加氢站一样……</p>\n<p data-pid=\"j4-MoCzo\">不过，在当时的核春天时代，人们以为找到了真正的无害能源，从上到下都没考虑到核辐射的严重性。</p>\n<p data-pid=\"DchCkKEd\">1950年，甚至出现了<b>「吉尔伯特U-238原子能实验室」</b>这种玩具，里面含有真正的强辐射的铀矿石。</p>\n<p><img src=\"https://picx.zhimg.com/v2-57d0ce152311a30306bc005aedfbb3e6_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"741\" data-rawheight=\"512\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"npvd2mdJ\">儿童们可以玩铅210与钋210组成的α粒子、钌106制成的β颗粒和锌65制成的<a href=\"https://www.zhihu.com/search?q=%CE%B3%E5%B0%84%E7%BA%BF&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2182832157%7D\" class=\"internal\">γ射线</a>，而它们都被简单地无防护地装在了透明的玻璃罩内。当时的儿童在家里，就能观察真正的<a href=\"https://www.zhihu.com/search?q=%E6%A0%B8%E8%A3%82%E5%8F%98&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2182832157%7D\" class=\"internal\">核裂变</a>。</p>\n<p><img src=\"https://pica.zhimg.com/v2-08549db36d758927d76bb7daca2d9c63_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"963\" data-rawheight=\"876\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"bITLjS1X\">而两千年后，凯迪拉克和奥迪也推出来核动力的概念车型。</p>\n<p data-pid=\"Rekhb7SG\">奥迪Mesarthim F-Tron Quattro是核动力超跑，虽用核能驱动，却是新能源车。因为车辆使用核能转换的电能驱动。堪称续航最长的新能源车，一克燃料就可以不停地跑两年。</p>\n<p><img src=\"https://pica.zhimg.com/v2-2822fd4859405c4c3024741313826d55_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"263\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"OFqxOoQE\">最重要的是，奥迪号称还完成了反应堆的运行，让其成功的产生了能源！</p>\n<p><img src=\"https://pic2.zhimg.com/v2-f8c2445f9201205a726060a892d6e24d_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"264\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"bYgsZ7Rm\">而凯迪拉克WTF则是在2009年给凯迪拉克的一份百年庆生礼物。采用钍燃料，英文全称World Thorium Fuel，首字母缩写即为WTF。</p>\n<p><img src=\"https://pica.zhimg.com/v2-96b21f191aec55ec6df0caca23a1cb7c_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"225\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"VK6hrQue\">这款WTF加一次燃料，续航里程就可达<b>161万公里</b>，的确有点<b>WTF</b>的意思。要知道，许多燃油车恐怕到报废都跑不到这么长的里程。然而，奥迪的核动力汽车虽能提供动力，却遇到了和TV8坦克一样的问题，不能隔绝对成员的核辐射，也不能解决水源的问题。</p>\n<p data-pid=\"AyoPNTvb\">所以，这两款车，终归在图纸上谈了下，或者也造出了概念车的结构，和进行了核反应堆的小型化设计，但最后还是没有变成可以上路的车。</p>\n<p data-pid=\"FXgYSFOq\">实际上面的核动力汽车，个人觉得更多的是噱头，只是语不惊人死不休的为了宣发而已，因为传统的利用核动力的设备不可能做得这么小。</p>\n<h3><i>常见的利用核动力方式：反应堆内部装有可控链式核反应的核燃料，核反应产生的热能作为电站的热源，蒸发水后带动汽轮机，汽轮机带动发电机，发电机产生电能。</i></h3>\n<p data-pid=\"oPAnXvq7\">原理非常简单，原子由原子核与<a href=\"https://www.zhihu.com/search?q=%E6%A0%B8%E5%A4%96%E7%94%B5%E5%AD%90&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2182832157%7D\" class=\"internal\">核外电子</a>组成，原子核由质子与中子组成。</p>\n<p><img src=\"https://pica.zhimg.com/v2-29baae461ec73189e108fb2aebce2f85_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"vlj1dOWW\">当铀235的原子核受到外来的中子轰击时，一个原子核会吸收一个中子，并分裂成两个质量较小的原子核，同时放出2—3个中子。这裂变产生的中子又会去轰击周围的铀235原子核，引起新的裂变。如此持续进行，就是裂变的链式反应，链式反应会产生大量热能。用循环水（或其他物质）带走热量才能避免反应堆因过热烧毁。导出的热量可以使水变成水蒸气，推动汽轮机发电。</p>\n<p data-pid=\"loLn4q-3\">所以这就需要<b>足够的水</b>来循环，所以核电站基本都建立在水资源获取方便的河边、海边。</p>\n<p data-pid=\"HpDjHcyO\">因为高速中子会四散分开，为了增加和减少中子轰击原子核的概率，就需要有控制设置来控制其反应过程和调节反应速度。一般都是硼、碳化硼、镉、银铟镉做成的控制棒（能吸收中子），用来控制反应堆的中子数量，这就是核反应堆的<b>控制设施</b>。插入控制棒，就能吸收四射的中子，完全插入，就能终止其裂变反应。</p>\n<p><img src=\"https://picx.zhimg.com/v2-27c82e156b4935032ae1c93b3964bde9_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"724\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"3xwXKHm0\">而铀及其裂变产物都有强放射性，会对环境和生物造成巨大伤害，因此要有可靠的<b>防护措施</b>；比如密封的燃料包裹壳体，要耐高压高温腐蚀和密闭的回路系统。防护措施不仅要防御辐射不外泄，还要有发生异常的<b>防护安全冗余设施，比如</b><a href=\"https://www.zhihu.com/search?q=%E7%A1%BC%E6%B0%B4&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2182832157%7D\" class=\"internal\">硼水</a>的紧急停堆系统，高压注水系统，消氢系统。在反应堆外围还要设置安全壳体，以免反应堆泄露，会直接暴露在外界环境中造成污染。（切尔诺贝利事故就是为了节省成本，外围没有设置安全壳体，导致<a href=\"https://www.zhihu.com/search?q=%E6%94%BE%E5%B0%84%E6%80%A7%E6%B1%A1%E6%9F%93%E7%89%A9&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2182832157%7D\" class=\"internal\">放射性污染物</a>直接进入了环境中，造成了数百公里的污染。）</p>\n<p data-pid=\"Alf4tXmy\">所以，我们知道一个核动力转电力的系统需要：</p>\n<p data-pid=\"XXIejTlm\"><b><i>核燃料、冷却系统、水循环系统、控制设施、防护设施，安全冗余设施，蒸汽循环系统，汽轮机，发电机这些部件。</i></b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-4125eca78fc0db0ae3e7e752fc0131c4_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"fG3VzEJv\">如果要安全使用核燃料作为动力，以上这些设施都是必要的，这就意味着整个<a href=\"https://www.zhihu.com/search?q=%E6%A0%B8%E5%8A%A8%E5%8A%9B%E7%B3%BB%E7%BB%9F&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2182832157%7D\" class=\"internal\">核动力系统</a>的小型化，实际非常困难。</p>\n<p data-pid=\"0_s3zmrb\">以核潜艇举例，这是目前实用的最小核动力载体了，其搭载的核动力仓所需的水资源可以方便从海里提取，但体积依旧不小。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-227de9577709d5075ff6292b98c586b8_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"641\" data-rawheight=\"345\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"tPQAEyky\">比如中国2013年退役的“长征一号”核潜艇，后改为了中国核潜艇展馆，在青岛海军博物馆正式对外公开展出，其<a href=\"https://www.zhihu.com/search?q=%E6%A0%B8%E5%8F%8D%E5%BA%94&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2182832157%7D\" class=\"internal\">核反应</a>仓就足足有一个大巴车的大小。</p>\n<p><img src=\"https://picx.zhimg.com/v2-c22425a39b13f150b05dbee7f799cef5_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"489\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"V1CSLjVM\">当然，如果你只想制造一个<b>核弹，</b>那就只需要核原料，一个壳体和中子激发装置，其他的啥都不需要，不需要冷却，不需要水，不需要控制、安全设备，这就可以做得很小。一个装笔记本电脑的大背包就可以背起来，大街小巷随你走。</p>\n<p><img src=\"https://pica.zhimg.com/v2-2cbb989bf7e43a95270f40d367d00c86_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"456\" data-watermark=\"watermark\" data-original-src=\"v2-2cbb989bf7e43a95270f40d367d00c86\" data-watermark-src=\"v2-0d6973e9ee2c3af9a01e11ca2d7eaa23\" data-private-watermark-src=\"v2-be420414718cdf43f1410c4d5cc23e61\"></p>\n<p data-pid=\"9Rwf0d73\">所以，核裂变即便后期真能够小型化，也不能用于汽车这种普通人使用的小型载体上。防护措施昂贵不说，且因为一旦泄露，核裂变产生的<a href=\"https://www.zhihu.com/search?q=%E5%BC%BA%E8%BE%90%E5%B0%84&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2198932348%7D\" class=\"internal\">强辐射</a>就会对周边的人和环境造成灭顶之灾。</p>\n<p data-pid=\"dY0Y-Ffj\"><b>现在能实际用在小型载具上的核相关的动力系统，就是搭载在太空出行的载具上。</b></p>\n<p data-pid=\"_CJ8KeBB\">利用的原理是核原料的自然衰变产生的热量，利用热电效应来进行发电。</p>\n<p data-pid=\"WJEQV4Hu\"><b><a href=\"https://www.zhihu.com/search?q=%E7%83%AD%E7%94%B5%E6%95%88%E5%BA%94&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2198932348%7D\" class=\"internal\">热电效应</a>：当受热物体中的电子(空穴),因随着温度梯度由高温区往低温区移动时,所产生电流或电荷堆积的一种现象</b>。</p>\n<p data-pid=\"C5jV98Be\">利用核原料自然衰变产生的热量，把金属的一端加热，金属两端产生了一个温差，就会产生电流效应。</p>\n<p data-pid=\"cnV6bG56\">这种方式最早应用在了太空领域，1961年美国发射的第一颗人造卫星“探险者一号”就采用了此类核电池，给卫星供电并能在严寒区域提供热量（无法接受太阳光的区域）。</p>\n<p><img src=\"https://pica.zhimg.com/v2-ef9cd9d0e908665daf7d38cb3a29e700_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"866\" data-rawheight=\"480\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\" data-tags=\"porn\"></p>\n<p data-pid=\"x5SJZT3b\">此后的阿波罗登月飞船，上面也装有小型的核电池，设计寿命虽然为一年，但实际使用都远超了设计时间。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-e87130c454b406871cb5f320ce40475e_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"550\" data-rawheight=\"405\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"KrdOFnZz\">这类电池普遍的功率不高，只有数十瓦到上百瓦的级别，如2021年2月登陆火星的NASA的毅力号火星车。长度约3米，重量1043公斤，就如同一辆微型轿车的大小，它就搭载了一块核电池。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-7c9281e2aa2642ff169af0b9b79e14ca_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"546\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"7P3vF5xl\">其尾部就是装的45kg重的核电池，额定输出功率达到100瓦，设计的使用寿命长达14年。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-b338bc2d349bbb5fcf51e65c0141a74a_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"596\" data-rawheight=\"420\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"Uk10nTs_\">这类电池结构简单，且辐射量极低，因为不产生<a href=\"https://www.zhihu.com/search?q=%E4%BC%BD%E9%A9%AC%E5%B0%84%E7%BA%BF&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2198932348%7D\" class=\"internal\">伽马射线</a>（伽马射线可穿透数十厘米混凝土），所以外壳可以做到很薄，整体结构也能做到很小，即便外壳破损，只要第一时间做简单防护，就可以阻止污染。</p>\n<p data-pid=\"puLdly0h\"><b>但是其热利用率只有6%-10%左右，大部分热量需要导出到外部，所以现在基本的使用领域都是太空，严寒地区和海洋区域。</b></p>\n<p data-pid=\"jcO54gHi\">但即便不考虑降温和污染的环节，这种自发电的核动力电池也不是汽车能玩得起的，因为这块45公斤的小电池的造价高达7000万美元，而这样一块小电池还远远无法驱动一辆在地球重力下的小轿车……怎么也得搭载个十块二十块的…………</p>\n<p data-pid=\"HhxZipxx\">就问下，谁买得起这核动力汽车……</p>\n<p><br></p>\n<p><br></p>\n<p data-pid=\"hg84PHfZ\">欢迎关注，看一些有趣且专业的汽车/科技内容。 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/877ee20b5db9a39d41a839fbe83bfae5\" data-hash=\"877ee20b5db9a39d41a839fbe83bfae5\" data-hovercard=\"p$b$877ee20b5db9a39d41a839fbe83bfae5\">@Will.liu</a> </p>\n<p data-pid=\"vx-XN1L6\">（图片来源网络，侵删！）</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/will-liu-16?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Will.liu</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/549668847/answer/2656456599?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">320 个回答，查看全部。</a><br>\n","link":"http://www.zhihu.com/question/549668847/answer/2656456599?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"公共交通更符合低碳出行的理念但是却无法满足个性化需求，有没有融合两者的解决方案？","date":"2022-09-07 03:59:16","description":"\n<p data-pid=\"zPC2PGNL\">真的有这样的方法，在满足个性化需求的同时，又能符合公共交通的低碳出行。</p>\n<p data-pid=\"MKuNwJHF\">那就是<b>公路列车。</b></p>\n<p data-pid=\"sGB_IyFO\">这是利用低感知设备进行智能驾驶的一种方案。</p>\n<p data-pid=\"DHPJ3dcr\">早在2009年，欧盟就启动了一个名为SARTRE的项目，开发和测试在高速公路上的车辆自动驾驶的技术，这种技术也被称为<b>队列技术。</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-d79afb76b071bdb4ed3cde7426e9711d_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"827\" data-rawheight=\"425\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"mp1VJucC\">就是这种鸭妈妈带着一群小鸭的既视感。</p>\n<p><img src=\"https://pica.zhimg.com/v2-14182d5a1c7ebb10a4d91bf5bb84bcf9_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"583\" data-rawheight=\"396\" data-watermark=\"watermark\" data-original-src=\"v2-14182d5a1c7ebb10a4d91bf5bb84bcf9\" data-watermark-src=\"v2-da5111b6cf8a3b01640220b64159fb88\" data-private-watermark-src=\"v2-23a8a1798308c8d6fe9af2cbf3737238\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-23741983a74fb295b65c8443f32673bc_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"366\" data-watermark=\"watermark\" data-original-src=\"v2-23741983a74fb295b65c8443f32673bc\" data-watermark-src=\"v2-256a8ccf4db67c6e40d3f6a50cf4b5d8\" data-private-watermark-src=\"v2-ca9aeb69831c6da7ff33d4d5840ca4a3\"></p>\n<p data-pid=\"KmJdXHnJ\"><b>这样做就可以有效降低碳排放，而且后面的跟车绝对都是个性化需求。</b></p>\n<p data-pid=\"-xa-bE9x\">为什么能有效降低碳排放，因为前面是一辆大车，负责破风，后面跟车的风阻就会大为减少，而汽车进行中高速行驶，实际发动机做功相当部分都用在了对抗风阻上面了。</p>\n<p data-pid=\"aFruvcY1\">这个破风的原理，实际在很多场合都在运用，比如自然界的大雁迁徙，跨越数千公里。强壮的头雁会领头，给后续的大雁减少空气阻力。头雁疲惫了，另一头强壮的大雁就会补上破风的领头位置。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-96ca5074826946289a3999f7133f8e9b_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"504\" data-rawheight=\"329\" data-watermark=\"watermark\" data-original-src=\"v2-96ca5074826946289a3999f7133f8e9b\" data-watermark-src=\"v2-1fdca90a70812dc143b3da62fe1b90c1\" data-private-watermark-src=\"v2-d1830fc0f814a03b1b534330d051ebcf\"></p>\n<p data-pid=\"xBV3nNL2\">比如很多体育赛事，赛跑，自行车竞速，就有专门的“破风手”给有实力的队友护航，在前方开路，牺牲自己保护队友，减少队友的风阻，从而节省队友的体力。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-cecf226d6006491eb2638daf2fa4bbc4_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"298\" data-watermark=\"watermark\" data-original-src=\"v2-cecf226d6006491eb2638daf2fa4bbc4\" data-watermark-src=\"v2-98f1f74902540ebf0358a521317af592\" data-private-watermark-src=\"v2-823fc4ac24d774a0c18813043326f037\"></p>\n<p data-pid=\"X9iHzTrM\">说回到交通方面，具体的风阻系数公式：</p>\n<p data-pid=\"O8IaXEIQ\"><b>风阻系数=正面风阻力× 2÷(空气密度x车头正面投影面积x车速平方)</b></p>\n<p><img src=\"https://picx.zhimg.com/v2-1fef05119d9c80869f8903b669bd89b8_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"536\" data-rawheight=\"310\" data-watermark=\"watermark\" data-original-src=\"v2-1fef05119d9c80869f8903b669bd89b8\" data-watermark-src=\"v2-3d9c30d87c7982f45fb83e5c2d4ad60c\" data-private-watermark-src=\"v2-8c50078a5d36690fb63fdd3893ff8e46\"></p>\n<p data-pid=\"N05UpfKK\">对于电动车来说，在其他的条件相同情况下，单靠风阻系数降低0.01，可将纯电动车续航里程提升5~8km左右。</p>\n<p><img src=\"https://picx.zhimg.com/v2-d4aa6ba0004abfb5d348931528ad469e_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"360\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"BbIGHy-i\">燃油车也是一样，速度越快风阻越大，发动机就要耗费更多的动力来对抗风阻，相应碳排放就越高。同样在发动机热效率高的区间，140公里/小时的匀速行驶会比80公里/小时的匀速行驶更耗油，这就是因为风阻的原因。</p>\n<p data-pid=\"GIVPGy3C\">根据上述实验的数据，公路列车的队列里面，卡车后面跟随小汽车的二氧化碳的排放量减少了20%以上。</p>\n<p data-pid=\"B5S8CbEc\">这里说个题外话，实际这种<b>公路列车</b>对纯电车的续航提升更为明显，因为纯电车在中高速的续航大幅下降就是因为风阻。</p>\n<p data-pid=\"YFmsy7_G\">这里又要说个题外话，因为很多朋友会问，为啥我燃油车跑高速，风阻大了反而耗油少呢，而在市区开三四十公里/小时的时候，风阻小得多反而耗油多，这不科学啊。</p>\n<p data-pid=\"hcTmaQm4\">这个和驱动电机和燃油发动机的输出效率有关。</p>\n<p data-pid=\"z3bSngQR\">下图是大众ID.3和特斯拉model 3的一张对比图，低速80%到中高速97%的效率，驱动电机一直保持在较高的输出效率区间。到了高速区间，电机转速高了后，特斯拉电机的效率对比大众电机开始下降。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-89b63acb3fce51df31830aa9c1797e65_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1277\" data-rawheight=\"494\" data-watermark=\"watermark\" data-original-src=\"v2-89b63acb3fce51df31830aa9c1797e65\" data-watermark-src=\"v2-9595432324c0b964fd147320d4e72c7e\" data-private-watermark-src=\"v2-c07b7fbd15e34b3704a6b39841be6eeb\"></p>\n<p data-pid=\"IS8rAgV-\">而发动机则不一样，在市区行驶的低速区间，堵车，怠速经常发生的路况下，可能输出效率只有10%到20%。风阻小带来的一点省油还不如亏的。而到了高速，搭配合适的挡位，发动机输出效率达到35%-40%，提高了两倍还多，除开对抗大风阻的损耗，自然还是要比市区的拥堵低速要省油得多。但是随着速度的提升，即便发动机的热效率一直保持在40%左右的巅峰值，比如100公里/小时提升到130公里/小时，提升到150公里/小时还是会越来越耗油。</p>\n<p data-pid=\"7kgOP8AO\">说回到公路列车。</p>\n<p data-pid=\"5qPuvXD_\">按照火车头领航的模式，每个公路列车的第一辆车由一位熟悉路线的有经验的驾驶员驾驶，可以是<a href=\"https://www.zhihu.com/search?q=%E5%85%AC%E5%85%B1%E6%B1%BD%E8%BD%A6&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2219920613%7D\" class=\"internal\">公共汽车</a>，大客车等，然后领头的车后面跟随6-8辆有共同路线的其他车辆。除了第一辆车需要司机全程驾驶外，其他车辆使用跟随功能，利用网络连在一起，每辆车的间距可以只有十米甚至更近。（通过摄像头、各种雷达等L2级别的感知设备来调整自己的位置，确定方向、速度，并把相关信息无线发给队列网络。）</p>\n<p><img src=\"https://pic1.zhimg.com/v2-11110d163f77e8841f467c453e3e834e_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"835\" data-rawheight=\"447\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"4nIZMDnk\">欧盟委员会指定的研究团队进行了实际场景的多个测试。</p>\n<p data-pid=\"RmjJ-rwp\">比如跟随车辆从5辆到20辆不等，比如跟随车队由面包车组成，轿车组成，大客车组成，混合车队组成。天气环境也有着正常天气和恶劣天气。所有测试的结果均为良好，验证了“公路列车”的可行性。</p>\n<p data-pid=\"X0sRMSNQ\">这样实际也达到了一种高度自动驾驶的目的，所有允许跟随的车辆都能做其他的事情，比如电话，吃饭，看书，喝茶，工作等。等司机需要离开这个队伍，前面没有公共路径的话，导航会提醒你自己操纵车辆，准备离开这个车队。到了下一个有共同路途的车队，发出申请，系统接受后，就会接管你的车辆，并入到这个车队中来。</p>\n<p><img src=\"https://picx.zhimg.com/v2-df7e02453e715beaa7262523eb8d1296_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"833\" data-rawheight=\"422\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"qJrdNhLL\">这种方式的好处众多。</p>\n<p data-pid=\"TPqUlnje\">后续的每辆车不仅可以自动驾驶，还非常省油，因为前方大车破开了风阻，使得后车风阻较小，预计产生20%以上的节能效果。</p>\n<p data-pid=\"D8XR_8eN\">有效提高了道路安全，减弱了80%的事故的人为因素。减少了交通拥堵，提高了高速公路的利用率。</p>\n<p data-pid=\"J_IvkgSs\">整套方案的成本极低，只需要能够感知前方车辆的动态相对距离即可，不需要额外的高精度传感器。</p>\n<p><img src=\"https://pica.zhimg.com/v2-20e108649f8b3dbdbe2605f9b1b2da75_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1014\" data-rawheight=\"465\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\" data-tags=\"porn\"></p>\n<p data-pid=\"hSMBUpdX\">这个项目后来因为种种原因，比如风险过大，因为整个队列都依托在头车的性能和司机的高超驾驶技术上。一旦头车有问题，或者路况/环境出现复杂变化，则整列团队都会有巨大的风险，以当时的智能驾驶技术，无法进行有效的风险规避，这个项目最终没有继续下去。</p>\n<p data-pid=\"Up90Otgp\">但是在不远的未来，我想着也不失为一个自动驾驶方案：L3/L4级别的自动驾驶汽车带动后续众多L2级别汽车。在某些限定路段，比如用地理围栏限定范围的路况，比如高速道路内行驶，配合<b>V2X技术（<i>V2N，V2I，V2P，V2V</i>）。</b></p>\n<p><img src=\"https://pica.zhimg.com/v2-00039c6b6d579e660eda9dd64eaace90_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"553\" data-rawheight=\"311\" data-watermark=\"watermark\" data-original-src=\"v2-00039c6b6d579e660eda9dd64eaace90\" data-watermark-src=\"v2-ac3dbd22f7bbaa91a778140d02010fdc\" data-private-watermark-src=\"v2-a77fd26dfdee11c11d450217e2a0ae88\"></p>\n<p data-pid=\"0Nhyxkaa\">我觉得这种公路列车是一种低成本且安全的自动驾驶实施方案，也能完美符合题目的要求：<b>符合低碳出行的公共交通理念，又能满足个性化需求。</b></p>\n<p><br></p>\n<p><br></p>\n<p data-pid=\"-m2Pn9_J\">（图片来源网络，侵删！）</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/will-liu-16?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Will.liu</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/549647084/answer/2653644962?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">16 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/551497926?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">公共交通会成为低碳出行的完美解决方式吗？</a><br><a href=\"http://www.zhihu.com/question/493317856?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">新出行时代，我们该如何看待低碳生活？</a><br>\n","link":"http://www.zhihu.com/question/549647084/answer/2653644962?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"React 为什么重新渲染","date":"2022-09-06 08:29:00","description":"\n<p>更新（重新渲染）是 React 的重要特性 —— 当用户与应用交互的时候，React 需要重新渲染、更新 UI，以响应用户的输入。但是，React 为什么会重新渲染呢？如果不知道 React 为什么会重新渲染，我们如何才能避免额外的重新渲染呢？</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/186432/20/28325/37613/631725bbEf2ff226e/66b99021df66578b.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/react-re-renders-101/\">https://blog.skk.moe/post/react-re-renders-101/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/react-re-renders-101/"},{"title":"为什么你不应该在 React 中直接使用 useEffect 从 API 获取数据","date":"2022-08-19 08:53:00","description":"\n<p>React 是一个由 Facebook 开源的、可以在任意平台上构建 UI 的 JavaScript 库。在 React 中，一个常见的 Pattern 是使用 <code>useEffect</code> 搭配 <code>useState</code> 发送请求、将状态从 API（React 外部）同步到 React 内部、用于渲染 UI，这篇文章恰恰在向你介绍为什么你不应该直接这么做。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/180676/37/27394/27265/62ff57f2E600b3725/cff75c5fca39bbcc.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/why-you-should-not-fetch-data-directly-in-use-effect/\">https://blog.skk.moe/post/why-you-should-not-fetch-data-directly-in-use-effect/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/why-you-should-not-fetch-data-directly-in-use-effect/"},{"title":"NPM 自动更新版本号","date":"2022-08-04 05:00:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>ChenYFan 大佬的文章：<a href=\"https://blog.cyfan.top/p/d3c51290.html\">SpeedUp!使用黑科技为你的网站提速</a> 有提到过将 Hexo 博客的全部静态文件上传至 NPM 达到加速效果。</p>\n<p>但是 NPM 版本号不能重复，而且为了精准命中缓存和防止边缘 <code>@latest</code> 缓存过长，就必须指定版本号。</p>\n<p>本人在 <a href=\"https://blog.yfun.top/posts/2876015612/\">我的图床解决方案</a> 一文中使用的方法是 <code>npm version patch</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.16/rawimg/20220804133426.png\"></p>\n<p>但这个方法也有一些弊端，比如 <code>patch</code> 只会更新 <code>z</code> 位数的版本号，而且并不会上传至仓库，很可能会出现版本号冲突导致上传失败。这就是为什么最后还需要重新推送 Git 提交。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AF%95%E8%AF%95%E7%9C%8B\" class=\"headerlink\" title=\"试试看\"></a>试试看</h2>\n<p>NPM 版本号遵循 <code>semver</code> 规范，格式为 <code>major.minor.patch</code>。</p>\n<p>为了在获取最新版本号的时候不发生混乱，我选择先获取最新的版本号。</p>\n<blockquote><p>记得把 <code>cky-blog-static</code> 改成自己的项目名。</p></blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getVersion = <span class=\"keyword\">async</span>() =&gt; {</span><br><span class=\"line\">    <span class=\"keyword\">const</span> latestVersion = <span class=\"keyword\">await</span> fetch(<span class=\"string\">\"https://registry.npmjs.org/cky-blog-static/latest\"</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.json()).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.version;</span><br><span class=\"line\">    })</span><br><span class=\"line\">    <span class=\"keyword\">return</span> latestVersion;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>获取到最新版本号后，就可以对版本号进行分析。</p>\n<p>以 <code>1.4.7-b541af2ea284a39da0bbf63b88fdb65c</code> 为例，先按 <code>major.minor.patch</code> 分离。当然，也需要考虑版本号后还有 <code>build metadata</code> 的情况。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> version = <span class=\"keyword\">await</span> getVersion();</span><br><span class=\"line\"><span class=\"keyword\">var</span> verArray = version.split(<span class=\"string\">\".\"</span>);</span><br><span class=\"line\">verArray[<span class=\"number\">2</span>] = verArray[<span class=\"number\">2</span>].split(<span class=\"string\">\"-\"</span>)[<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure><p><del>为了版本号好看些</del>，可以通过判断实现满十进一。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (verArray[<span class=\"number\">2</span>] &lt; <span class=\"number\">9</span>) {</span><br><span class=\"line\"><span class=\"comment\">// z 位小于 9，直接 +1</span></span><br><span class=\"line\">verArray[<span class=\"number\">2</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">2</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">} <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (verArray[<span class=\"number\">1</span>] &lt; <span class=\"number\">9</span>) {</span><br><span class=\"line\"><span class=\"comment\">// z 位大于等于 9，y 位小于 9，y+1, z=0</span></span><br><span class=\"line\">verArray[<span class=\"number\">1</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">1</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">verArray[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">} <span class=\"keyword\">else</span> {</span><br><span class=\"line\"><span class=\"comment\">// z 大于等于 9，y 大于等于 9，x+1,y=0,z=0</span></span><br><span class=\"line\">verArray[<span class=\"number\">0</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">0</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">verArray[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">verArray[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>最后，重新拼接版本号。如果担心服务器缓存版本号导致冲突，还可以加上一些随机字符串。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> newVersion = <span class=\"string\">`<span class=\"subst\">${verArray[<span class=\"number\">0</span>]}</span>.<span class=\"subst\">${verArray[<span class=\"number\">1</span>]}</span>.<span class=\"subst\">${verArray[<span class=\"number\">2</span>]}</span>`</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> newVersion = newVersion + <span class=\"string\">\"-\"</span> + md5(<span class=\"string\">`<span class=\"subst\">${<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()}</span><span class=\"subst\">${newVersion}</span>`</span>);</span><br></pre></td></tr></table></figure><p>将最新的版本号信息重新写入 <code>package.json</code> 文件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> packageJson = fs.readFileSync(<span class=\"string\">\"./package.json\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> packageJson = <span class=\"built_in\">JSON</span>.parse(packageJson);</span><br><span class=\"line\">packageJson.version = newVersion;</span><br><span class=\"line\"><span class=\"keyword\">var</span> newPackage = <span class=\"built_in\">JSON</span>.stringify(packageJson);</span><br><span class=\"line\">fs.writeFileSync(<span class=\"string\">\"./package.json\"</span>, newPackage);</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p><del>直接 CV 代码！</del></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 更新 package.json 版本号</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fetch = <span class=\"built_in\">require</span>(<span class=\"string\">\"node-fetch\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> md5 = <span class=\"built_in\">require</span>(<span class=\"string\">\"js-md5\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getVersion = <span class=\"keyword\">async</span>() =&gt; {</span><br><span class=\"line\">    <span class=\"keyword\">const</span> latestVersion = <span class=\"keyword\">await</span> fetch(<span class=\"string\">\"https://registry.npmjs.org/cky-blog-static/latest\"</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.json()).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.version;</span><br><span class=\"line\">    })</span><br><span class=\"line\">    <span class=\"keyword\">return</span> latestVersion;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> update = <span class=\"keyword\">async</span>() =&gt; {</span><br><span class=\"line\">    <span class=\"keyword\">const</span> version = <span class=\"keyword\">await</span> getVersion();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> verArray = version.split(<span class=\"string\">\".\"</span>);</span><br><span class=\"line\">    verArray[<span class=\"number\">2</span>] = verArray[<span class=\"number\">2</span>].split(<span class=\"string\">\"-\"</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (verArray[<span class=\"number\">2</span>] &lt; <span class=\"number\">9</span>) {</span><br><span class=\"line\">        verArray[<span class=\"number\">2</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">2</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">    } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (verArray[<span class=\"number\">1</span>] &lt; <span class=\"number\">9</span>) {</span><br><span class=\"line\">        verArray[<span class=\"number\">1</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">1</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">        verArray[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">        verArray[<span class=\"number\">0</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">0</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">        verArray[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        verArray[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newVersion = <span class=\"string\">`<span class=\"subst\">${verArray[<span class=\"number\">0</span>]}</span>.<span class=\"subst\">${verArray[<span class=\"number\">1</span>]}</span>.<span class=\"subst\">${verArray[<span class=\"number\">2</span>]}</span>`</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> newVersion = newVersion + <span class=\"string\">\"-\"</span> + md5(<span class=\"string\">`<span class=\"subst\">${<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()}</span><span class=\"subst\">${newVersion}</span>`</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(newVersion);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> packageJson = fs.readFileSync(<span class=\"string\">\"./package.json\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> packageJson = <span class=\"built_in\">JSON</span>.parse(packageJson);</span><br><span class=\"line\">    packageJson.version = newVersion;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newPackage = <span class=\"built_in\">JSON</span>.stringify(packageJson);</span><br><span class=\"line\">    fs.writeFileSync(<span class=\"string\">\"./package.json\"</span>, newPackage);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Complete!!\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">update();</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%9C%80%E5%90%8E\" class=\"headerlink\" title=\"最后\"></a>最后</h2>\n<p>如果是 Hexo 文件部署，就可以直接把文件直接丢在项目根目录，Action 集成部署加上：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">node update.js</span><br></pre></td></tr></table></figure><p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.16/rawimg/20220804135818.png\"></p>\n<p><del>Blog 半年没更新，除除草 --(....</del></p>\n","link":"https://blog.yfun.top/posts/2022/auto-update-npm-version/"},{"title":"我有特别的 DNS 配置和使用技巧","date":"2022-07-28 15:31:00","description":"\n<p>众所周知，DNS 的作用与电话簿类似，将人类可读的域名映射到机器可读 IP 地址、使人更方便地访问互联网。DNS 是非常重要的互联网基础设施，对于改善上网冲浪的体验中的重要程度不容小觑。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/96381/31/31172/23930/62e2ab5bE554d388b/37027f4a03351b9e.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/i-have-my-unique-dns-setup/\">https://blog.skk.moe/post/i-have-my-unique-dns-setup/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/i-have-my-unique-dns-setup/"},{"title":"优化博客的累计布局偏移（CLS）问题","date":"2022-06-07 17:24:00","description":"\n<p>距离上一篇文章发布已有四个月了，是时候写几篇文章给博客除草了。上一次我介绍了我如何迁移、重构了我的博客的架构，这次我想来谈谈我在重构中优化和打磨访客体验时解决的一个问题。我的博客优化之旅 图片 lazyload 的学问和在 Hexo 上的最佳实践 我的博客有多快？ 天下武功，唯快不破 —— 我是这样优化博客的 ...</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/206311/26/14625/38940/629f7f81Eb11312de/b1e67f07b1cc9bc7.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/fix-blog-cls/\">https://blog.skk.moe/post/fix-blog-cls/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/fix-blog-cls/"},{"title":"使用 Next.js + Hexo 重构我的博客","date":"2022-03-17 16:24:00","description":"\n<p>在咕咕了一整年、只发布了三篇文章（其中两篇还是译文）之后，我决定还是稍微花一点时间好好折腾一下自己的博客，以 React 作为抓手，通过 Next.js 和 Hexo 深度共建，对标 Gatsby，打通静态 HTML 与用户交互之间的垂直领域屏障，实现多维矩阵闭环，为个人博客赋能（咳咳咳），然后水出 2022 年第一篇文章（逃）技术选型：Gatsby vs Next.js我使用 Hexo 驱动博客已经三年之久了，之前写过一个 开源的 Hexo 主题，后来还成为了 Hexo 的 Core Team Member、为 Hexo 贡献了不少代码。Hexo 是一个诞生于 2012......</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/218492/18/14257/25439/6227858fE1517791d/63119f6e39dc9389.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/\">https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Node.js","date":"2022-01-14 10:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h2>\n<ul>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-nodejs\">安装 Node.js</a></li>\n</ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Node.js 官网 (<a href=\"https://node.js.org/\">https://node.js.org</a>)</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/image-20220114174925675.png\" alt=\"image-20220114174925675\"></p>\n<p>下载 Node.js 安装包（推荐下载 LTS 版本）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175645.png\" alt=\"image-20220114175645642\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175750.png\" alt=\"image-20220114175749822\"></p>\n<p>勾选同意协议，点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175835.png\" alt=\"image-20220114175835742\"></p>\n<p>修改文件安装位置，点击 <code>Next</code>。（也可以不用改）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175929.png\" alt=\"image-20220114175929226\"></p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180010.png\" alt=\"image-20220114180010036\"></p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180044.png\" alt=\"image-20220114180043895\"></p>\n<p>点击 <code>Install</code> 开始安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180108.png\" alt=\"image-20220114180107827\"></p>\n<p>等待安装完成。<img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180122.png\" alt=\"image-20220114180122728\"></p>\n<p>点击 <code>Finish</code> 完成安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180206.png\" alt=\"image-20220114180206024\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>打开 <code>Git Bash</code>.</p>\n<blockquote><p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。<br>或是在开始菜单中找到 Git Bash.</p></blockquote>\n<p>输入 <code>node -v</code> 和 <code>npm -v</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180458.png\" alt=\"image-20220114180458685\"></p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-nodejs/"},{"title":"2022: 新年快乐！","date":"2021-12-31 16:00:00","description":"\n<p>转眼间，2021 年已经过去。这一年非常忙碌，以至于博客一周年的纪念来不及写，许多文章计划停留在了 To Do 里。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%8D%9A%E5%AE%A2\" class=\"headerlink\" title=\"博客\"></a>博客</h2>\n<p>由于 Cloudflare Web Analytics 是在 2021 年 4 月份启用的，再加上后来又将统计代码去除，所以关于访问量的信息不可用。</p>\n<p>截止至 2021 年 12 月 31 日，博客共发布 15 篇文章，其中 2021 年发布 11 篇文章，原创文章 10 篇。</p>\n<p>目前采用 <code>LeanCloud + Waline</code> 的评论方式，自 7 月份被刷评论后将评论权限改为登录（支持 <code>GitHub</code> 登录），还有部分评论在迁移中丢失，实在抱歉。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>博客自 2021 年 1 月 13 日将主题改为 <code>Miracle</code>，这是一款简洁、轻量的单栏 Hexo 主题。</p>\n<p><code>Miralce</code> 目前的版本是 <code>2.0.1</code>，全新的版本去除 jQuery，进一步提升性能。</p>\n<p>GitHub 仓库：<a href=\"https://github.com/hifun-team/hexo-theme-miracle\">https://github.com/hifun-team/hexo-theme-miracle</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%9B%B4%E5%A4%9A\" class=\"headerlink\" title=\"更多\"></a>更多</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">=&gt; ...</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2022/"},{"title":"无垠 2021 年度总结","date":"2021-12-31 08:36:10","description":"\n<p>真是忙碌的一年啊。转眼 2021 已经过去，2022 即将到来。又到了该总结这一年的时候了。</p>\n<h1>统计数据</h1>\n<p>年度总结的第一部分仍然是一些统计数据。以下数据截止 2021 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 29,073 (<span>+0.6%</span>)，年 PV 67,688 (<span>-11.61%</span>)，日均 UV 79.65，平均停留时间 3分34秒 (<span>-13.7%</span>)，平均跳出率 55% (<span>-9.8%</span>)。一年有效文章数 1 (<span>-80%</span>)，新增评论 109 条 (<span>-54.96%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\" alt=\"\" width=\"515\" height=\"620\" class=\"aligncenter size-full wp-image-2537\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog-249x300.jpg 249w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>除了 UV 较去年提高 100 多之外，其他数据全部下滑。主要原因还是因为今年实在太过忙碌，只更新了一篇博客，评论区也没有怎么维护。不过目前已经有两篇新的文章在路上了，希望可以尽快写完吧。</p>\n<h2>个人主页</h2>\n<p>个人页总 UV 3,515 (<span>-18.12%</span>)，总 PV 3,929 (<span>-4.56%</span>)，日均 UV 9.63，平均停留时间 55秒 (<span>-12.7%</span>)。访问的主要来源是知乎和 GitHub。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\" alt=\"\" width=\"515\" height=\"647\" class=\"aligncenter size-full wp-image-2538\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton-239x300.jpg 239w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>仍然是没有更新个人主页的一年，我也没有继续宣传这个页面，统计数据下滑大概是正常的。</p>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 4 次，新增 149 commits (<span>-54.57%</span>)，Star 数增加了 174，现有 788。</p>\n<p>终于，MDx 2.0 发布了。但是因为今年的过于忙碌，MDx 并没有得到足够的维护，版本发布周期也拉得比较长，很多 Bug 没能及时修复。希望明年可以把更多的时间花在维护 MDx 上。无论如何，还是感谢各位对于 MDx 的支持！</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>2021 大事记</h1>\n<p>说起来，2021 真的太多“第一次”了...</p>\n<ul>\n<li>一月：由于电脑电池鼓包，第一次用 iPad 外接屏幕远程桌面到服务器来考期末🌚太痛苦了</li>\n<li>一月：MDx 喜提 600 Stars</li>\n<li>三月：第一次测核酸（真的酸）</li>\n<li>三月：第一次坐上 A350！(B-309W）</li>\n<li>三月：第一次来到英国</li>\n<li>六月：第一次来到伦敦</li>\n<li>六月：第一次去猫咖撸猫🐱</li>\n<li>六月：第一次坐上 B777！(B-2025）</li>\n<li>七月：酒店隔离十四天🌚</li>\n<li>七月：MDx 喜提 700 Stars</li>\n<li>七月：第一次和猫一起住（时刻有猫撸真的爽😆）</li>\n<li>七月：入职<a href=\"https://75.team/\">奇舞团</a>实习</li>\n<li>八月：北京景点怎么这么多</li>\n<li>九月：北京景点怎么还有这么多</li>\n<li>九月：<a href=\"https://flyhigher.top/develop/2160.html\">谈谈 WebAuthn</a> 被 <a href=\"https://weibo.com/1893751011/KyipM3tOM\" rel=\"noopener noreferrer\">w3c中国微博转发</a><del>（虽然并没有人看）</del>\n</li>\n<li>九月：从奇舞团<del>跑路</del>\n</li>\n<li>九月：整了个 Stackoverflow 的复制粘贴键盘<del>，太好用了</del>\n</li>\n<li>十月：终于买了心心念念的 MSFS</li>\n<li>十一月：终于买了一台新相机</li>\n<li>十一月：第一次坐上 A380！(B-6140）</li>\n<li>十二月：第一次来到爱丁堡并和 <a href=\"https://diygod.me/\">@DIYgod</a> 面基</li>\n</ul>\n<section><div class=\"set-images-div\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\" alt=\"和猫一起住的唯一问题就是手机很快会被猫片塞满\" width=\"730\" height=\"1500\" class=\"aligncenter size-full wp-image-2518\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg 730w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-146x300.jpg 146w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-498x1024.jpg 498w\" sizes=\"(max-width: 730px) 100vw, 730px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\" alt=\"看到你在写前端，猫猫很担心你\" width=\"1004\" height=\"1500\" class=\"aligncenter size-full wp-image-2523\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg 1004w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-201x300.jpg 201w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-685x1024.jpg 685w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-768x1147.jpg 768w\" sizes=\"(max-width: 1004px) 100vw, 1004px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\" alt=\"高效开发工具（确信\" width=\"1500\" height=\"1019\" class=\"aligncenter size-full wp-image-2519\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-300x204.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-1024x696.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-768x522.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\" alt=\"和 Ralph 在天坛\" width=\"947\" height=\"1500\" class=\"aligncenter size-full wp-image-2524\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg 947w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-189x300.jpg 189w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-646x1024.jpg 646w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-768x1216.jpg 768w\" sizes=\"(max-width: 947px) 100vw, 947px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\" alt=\"380!\" width=\"1500\" height=\"874\" class=\"aligncenter size-full wp-image-2517\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-300x175.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-1024x597.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-768x447.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a>\n</div>\n<div class=\"set-images-div2\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\" alt=\"到处玩.jpg\" width=\"1500\" height=\"1080\" class=\"aligncenter size-full wp-image-2521\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-300x216.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-1024x737.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-768x553.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\" alt=\"还是到处玩.jpg\" width=\"977\" height=\"1500\" class=\"aligncenter size-full wp-image-2520\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg 977w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-195x300.jpg 195w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-667x1024.jpg 667w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-768x1179.jpg 768w\" sizes=\"(max-width: 977px) 100vw, 977px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\" alt=\"380 上的星空\" width=\"1002\" height=\"1500\" class=\"aligncenter size-full wp-image-2522\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg 1002w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-200x300.jpg 200w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-684x1024.jpg 684w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-768x1150.jpg 768w\" sizes=\"(max-width: 1002px) 100vw, 1002px\"></a>\n</div>\n</section><p><span>点击图片查看描述</span></p>\n<p>对了，对于可爱的猫猫们，我整了一个 Telegram 贴纸包，你可以在这里获取：<a href=\"https://telegram.me/addstickers/huanAndDan\">https://telegram.me/addstickers/huanAndDan</a>。</p>\n<h1>跨年红包</h1>\n<p>今年的解题之旅，从下面这张图片开始：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\" alt=\"\" width=\"1510\" height=\"1250\" class=\"aligncenter size-full wp-image-2556\"></a>\n<p>不过，鉴于今年的题目较以往对于认真解题的人更难，我还准备了隐藏红包，在解题中收集线索即可发现隐藏红包。共有 20 个普通红包和 10 个隐藏红包。</p>\n<p>解题计划持续到东八区 2022.02.03 23:59:59 或红包被领完为止，之后我会发布题解。不过由于去年情况混乱，今年在解题过程中我一旦发现有不正常的现象就会立即停止活动。Anyway，新年快乐！祝玩得开心。</p>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报用到了 PS 和 Adobe 家的新玩具 Dimension。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\" alt=\"\" width=\"707\" height=\"1000\" class=\"aligncenter size-full wp-image-2547\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg 1414w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-212x300.jpg 212w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-724x1024.jpg 724w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-768x1086.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-1086x1536.jpg 1086w\" sizes=\"(max-width: 707px) 100vw, 707px\"></a>\n<p>那么祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2507.html"},{"title":"[译] 不，Web3 不是去中心化","date":"2021-12-14 14:01:00","description":"加密货币社区对元宇宙和 Web3 的狂热仍在继续，大量投资人和开发者前仆后继加入其中。但是，Web3 真的能实现支持者们的种种愿景吗？亦或是另一个镜中月、水中花？也许让历史照进现实，能给我们答案。<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/123139/11/24965/54827/62215eedE5e3da14a/80c24408e97057dd.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/web3-is-not-decentralization/\">https://blog.skk.moe/post/web3-is-not-decentralization/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/web3-is-not-decentralization/"},{"title":"[译] 捍卫自由的互联网，对 Web3 说不","date":"2021-12-12 13:40:00","description":"作为一个充满泡沫和噱头的新概念，Web3 和元宇宙在区块链的社区中掀起了一波浪潮。鼓吹者坚信 Web3 就是互联网的未来、不惜砸下大把的金钱和精力、希望能在未来中捞一杯羹；而大部分人保持观望的态度。是时候来一点 Web3 的反对意见了。<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/87908/13/23797/13415/622032afE3a2f9e9f/95c01e98cd4a707a.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/\">https://blog.skk.moe/post/keep-web-free-say-no-to-web3/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/"},{"title":"2021 年 JavaScript Promise 性能对比","date":"2021-12-07 08:19:00","description":"\n<p>我们正生活在一个「Any application that can be written in JavaScript, will eventually be written in JavaScript」的时代。作为一门兼具动态性和简单性的语言，JavaScript 已经占领了客户端、服务端，甚至在机器学习中也占据一席之地；不可避免的，异步执行也逐渐成为这门语言不可缺少的一部分。TL; DR Bluebird 依然是速度最快、内存占用最少的 Promise 实现 Runtime 的 async / await 实现越来越快、顺序执行的性能已经超过 Native Promise，占用的内存也更少 对于平行并发执行的 Promise，Bluebird 的性能依然一骑绝尘。......</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157404/28/28495/143414/622032b2Ef7b495fd/6a9bd02e79392c9d.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/promise-performance-benchmark/\">https://blog.skk.moe/post/promise-performance-benchmark/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/promise-performance-benchmark/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Git","date":"2021-11-12 13:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h3>\n<ul><li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li></ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Git 官网 (<a href=\"https://git-scm.com/\">https://git-scm.com</a>).</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112204849.png\"></p>\n<p>点击页面中的 <code>Download For Windows</code> 下载 Windows 版本。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211507.png\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>，同意协议。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211528.png\"></p>\n<p>修改程序安装位置，点击 <code>Next</code>（直接装在 C 盘也不是不行）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211604.png\"></p>\n<p>组件选项，可选桌面快捷键、右键菜单、LFS 支持、自动检查更新等。</p>\n<p>点击 <code>Next</code> 进入下一步。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211609.png\"></p>\n<p>开始菜单文件夹名，保持默认就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211613.png\"></p>\n<p>默认编辑器，保持 Vim 就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211616.png\"></p>\n<p>环境变量，选择第 2 个，点击 <code>Next</code>。</p>\n<blockquote><p>如果选择第 1 个，则只能在 Git Bash 中使用，可能会出现问题</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211619.png\"></p>\n<p>剩下的都可以保持默认，一路 Next，然后点击 <code>Install</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211622.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211624.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211627.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211630.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211633.png\"></p>\n<p>等待安装完毕。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。</p>\n<p>（或是在开始菜单中找到 Git Bash）</p>\n<p>输入 <code>git --version</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/7ec315b7764cc.png\"></p>\n<p>大功告成！</p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-git/"},{"title":"前端时间国际化 101","date":"2021-10-14 15:58:23","description":"\n<blockquote>\n<p>时间只是幻觉。</p>\n<footer>—— 阿尔伯特·爱因斯坦</footer>\n</blockquote>\n<p>最近在开发一个需要完善国际化方案的前端项目，在处理时间国际化的时候遇到了一些问题。于是花了一些时间研究，有了这篇文章。不过由于网上关于 JavaScript 中 <code>Date</code> 对象的坑的文章已经一抓一大把了，<strong>因此这篇文章不是 JavaScript 中 <code>Date</code> 对象的使用指南，而是只专注于前端时间国际化。</strong></p>\n<h1>从时区说起</h1>\n<p>要想处理时间，UTC 是一个绕不开的名字。协调世界时（Coordinated Universal Time）是目前通用的世界时间标准，计时基于原子钟，但并不等于 TAI（国际原子时）。TAI 不计算闰秒，但 UTC 会不定期插入闰秒，因此 UTC 与 TAI 的差异正在不断扩大。UTC 也接近于 GMT（格林威治标准时间），但不完全等同。可能很多人都发现近几年 GMT 已经越来越少出现了，这是因为 GMT 计时基于地球自转，由于地球自转的不规则性且正在逐渐变慢，目前已经基本被 UTC 所取代了。</p>\n<blockquote><p>JavaScript 的 <code>Date</code> 实现不处理闰秒。实际上，由于闰秒增加的不可预测性，Unix/POSIX 时间戳完全不考虑闰秒。在闰秒发生时，Unix 时间戳会重复一秒。这也意味着，一个时间戳对应两个时间点是有可能发生的。</p></blockquote>\n<p>由于 UTC 是标准的，我们有时会使用 UTC+/-N 的方式表达一个时区。这很容易理解，但并不准确。中国通行的 <code>Asia/Shanghai</code> 时区<strong>大部分</strong>情况下可以用 UTC+8 表示，但英国通行的 <code>Europe/London</code> 时区并不能用一个 UTC+N 的方式表示——由于夏令时制度，<code>Europe/London</code> 在夏天等于 UTC+1，在冬天等于 UTC/GMT。</p>\n<blockquote><p>一个时区与 UTC 的偏移并不一定是整小时。如 <code>Asia/Yangon</code> 当前为 UTC+6:30，而 <code>Australia/Eucla</code> 目前拥有奇妙的 UTC+8:45 的偏移。</p></blockquote>\n<p>夏令时的存在表明<strong>时间的表示不是连续的</strong>，时区之间的时差也并不是固定的，我们并不能用固定时差来处理时间，这很容易意识到。但一个不容易意识到的点是，时区还包含了其历史变更信息。中国目前不实行夏令时制度，那我们就可以放心用 UTC+8 来表示中国的时区了吗？你可能已经注意到了上一段中描述 <code>Asia/Shanghai</code> 时区时我使用了<strong>大部分</strong>一词。<code>Asia/Shanghai</code> 时区在历史上实行过夏令时，因此 <code>Asia/Shanghai</code> 在部分时间段可以使用 UTC+9 来表示。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1988-04-18 00:00:00')\r\n// Mon Apr 18 1988 00:00:00 GMT+0900 (中国夏令时间)</pre>\n<blockquote><p>夏令时已经够混乱了，但它实际上比你想象得更混乱——部分穆斯林国家一年有四次夏令时切换（进入斋月时夏令时会暂时取消），还有一些国家使用混沌的 15/30 分钟夏令时而非通常的一小时。</p></blockquote>\n<blockquote><p><strong>不要总是基于 <code>00:00</code> 来判断一天的开始。</strong>部分国家使用 0:00-1:00 切换夏令时，这意味着 23:59 的下一分钟有可能是 1:00。</p></blockquote>\n<p>事实上，虽然一天只有 24 个小时，但当前（2021.10）正在使用的时区有超过 300 个。<strong>每一个时区都包含了其特定的历史。</strong>虽然有些时区在现在看起来是一致的，但它们都包含了不同的历史。时区也会创造新的历史。由于政治、经济或其他原因，一些时区会调整它们与 UTC 的偏差（萨摩亚曾经从 UTC-10 切换到 UTC+14，导致该国 2011.12.30 整一天都消失了），或是启用/取消夏令时，甚至有可能导致一个时区重新划分为两个。因此，为了正确处理各个时区，我们需要一个数据库来存放时区变更信息。还好，已经有人帮我们做了这些工作。目前大多数 *nix 系统和大量开源项目都在使用 <a href=\"https://www.iana.org/time-zones\" rel=\"noopener\">IANA 维护的时区数据库</a>（IANA TZ Database），其中包含了自 Unix 时间戳 0 以来各时区的变更信息。当然这一数据库也包含了大量 Unix 时间戳 0 之前的时区变更信息，但并不能保证这些信息的准确性。IANA 时区数据库会定期更新，以反映新的时区变更和新发现的历史史实导致的时区历史变更。</p>\n<blockquote><p>Windows 不使用 IANA 时区数据库。微软为 Windows 自己维护了一套<a href=\"https://docs.microsoft.com/zh-cn/troubleshoot/windows-client/system-management-components/daylight-saving-time-help-support\" rel=\"noopener\">时区数据库</a>，这有时会导致在一个系统上合法的时间在另一系统上不合法。</p></blockquote>\n<p>既然我们不能使用 UTC 偏移来表示一个时区，那就只能为每个时区定义一个标准名称。通常地，我们使用 <code>/</code> 来命名一个时区。这里的城市一般为该时区中人口最多的城市。于是，我们可以将中国的通行时区表示为 <code>Asia/Shanghai</code>。也有一些时区有自己的别名，如太平洋标准时间 <code>PST</code> 和协调世界时 <code>UTC</code>。</p>\n<blockquote><p>时区名称使用城市而非国家，是由于国家的变动通常比城市的变动要快得多。</p></blockquote>\n<blockquote><p><strong>城市不是时区的最小单位。</strong>有很多城市同时处于多个时区，甚至澳大利亚<a href=\"https://en.wikipedia.org/wiki/Gold_Coast_Airport\" rel=\"noopener\">有一个机场</a>的跑道两端处于不同的时区。</p></blockquote>\n<h1>处理时区困难重重</h1>\n<p>几个月前的一天，<a href=\"https://milkice.me/\" rel=\"noopener\">奶冰</a>在他的 Telegram 频道里发了这样的一条消息：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\"><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\" alt=\"奶冰频道的消息\" width=\"500\" class=\"aligncenter size-medium wp-image-2490\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg 800w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-244x300.jpg 244w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-768x944.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\"></a>\n<p>你想的没错，这个问题正是由时区与 UTC 偏移的不同造成的。<code>Asia/Shanghai</code> 时区在 1940 年前后和 1986 年前后曾实行过夏令时，<strong>而夏令时的切换会导致一小时的出现和消失。</strong>具体来说，启用夏令时当天会有一个小时消失，如 2021.3.28 英国启用夏令时，1:00 直接跳到 3:00，导致 <code>2021-03-28 01:30:00</code> 在 <code>Europe/London</code> 时区中是不合法的；取消夏令时当天又会有一个小时重复，如 2021.10.31 英国取消夏令时，2:00 会重新跳回 1:00 一次，导致 <code>2021-10-31 01:30:00</code> 在 <code>Europe/London</code> 时区中对应了两个时间点。而在奶冰的例子中，<code>1988-04-10 00:46:50</code> 正好处于因夏令时启用而消失的一小时中，因此系统会认为此时间字符串不合法而拒绝解析。</p>\n<blockquote><p>你可能会注意到在历史上 1988.4.10 这一天 <code>Asia/Shanghai</code> 时区实际上是去掉了 1:00-2:00 这一小时而不是 0:00-1:00。上文问题更深层次的原因是，在 IANA TZDB 2018a 及更早版本中，IANA 因缺乏历史资料而设置了错误的夏令时规则，规则设定了夏令时交界于 0:00-1:00 从而导致上文问题发生。而随后社区<a href=\"http://mm.icann.org/pipermail/tz/2018-August/026760.html\" rel=\"noopener\">发现了更准确的史实</a>，因此 IANA 更新了数据库。上文的问题在更新了系统的时区数据库后便解决了。</p></blockquote>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\" alt=\"IANA TZDB 2018a 及之前版本的错误数据\" width=\"1750\" height=\"595\" class=\"aligncenter size-full wp-image-2491\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg 1750w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-300x102.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1024x348.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-768x261.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1536x522.jpg 1536w\" sizes=\"(max-width: 1750px) 100vw, 1750px\"></a>\n<p><span>IANA TZDB 2018a 及之前版本的错误数据</span></p>\n<p>再来考虑另一种情况。你的应用的某位巴西用户在 2018 年保存了一个未来时间 <code>2022-01-15 12:00</code>（按当时的规律那应该是个夏令时时间），不巧那时候你的应用是以格式化的时间字符串形式保存的时间。之后你发现巴西已经于 2019 年 4 月宣布彻底取消夏令时制度，那么 <code>2022-01-15 12:00</code> 这个时间对应的 Unix 时间戳发生了变化，变得不再准确，要正确处理这一字符串就需要参考这一字符串生成的时间（或生成时计算的 UTC 偏移）来做不同的处理。<strong>因此，应用从一开始就应该避免使用字符串来传输、存储时间，而是使用 Unix 时间戳。</strong>如果不得不使用字符串存储时间，请尽可能：</p>\n<ul>\n<li>使用 UTC 描述时间，你永远不会知道本地时区在未来会发生什么</li>\n<li>如果需要以当地时间描述时间，一定带上当前 UTC 偏移</li>\n</ul>\n<p>时区历史带来的问题往往意想不到而且远比想象得多。实际上时区历史数据非常详细而繁多且跨设备不一致，并没有简单而统一的处理方法。在需要严谨处理时区时可能需要在应用程序中内嵌一套各端统一的时区数据库，但这样的方案放在前端又会带来不少问题：</p>\n<ul>\n<li>体积过大。moment.js 曾经设计过<a href=\"https://github.com/moment/moment-timezone/blob/develop/data/packed/2021a.json\" rel=\"noopener\">一种简洁的 TZDB 表示</a>，但尽管已经尽可能压缩整个文件仍然达到了 180+KB。在性能优先的 Web 应用中这是不可接受的</li>\n<li>需要持续更新。时区数据一直在变动，需要在时区数据更新时尽快更新应用内的时区数据，这带来了额外的维护成本</li>\n</ul>\n<p>ES6 为我们带来了 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl\" rel=\"noopener\"><code>Intl</code> 命名空间</a>。在这里，JavaScript 运行时提供了不少时间相关的国际化能力。因此，在不使用额外数据的情况下准确处理时区是可能的，但这并不完美：</p>\n<ul>\n<li>各端不统一。浏览器提供的时区数据受浏览器版本、系统版本等可能变化，最新的时区更新可能无法快速反映到所有设备上</li>\n<li>实现复杂。<code>JavaScript</code> 中 <code>Date</code> 对象的不良设计导致实现完善的时区处理并不容易，且 <code>Intl</code> 命名空间下的对象实例化性能开销较大，需要额外优化</li>\n</ul>\n<blockquote><p><code>Intl</code> 命名空间下还有很多实用的国际化相关方法，值得我们另开一篇文章来讲讲了。</p></blockquote>\n<p>在真实开发中，这需要取舍。目前主流的 JavaScript 时间处理库都已转向浏览器内置方法，并在需要时通过 Polyfill 保证跨端一致性。在这篇文章中，我们将尝试在不使用第三方库的情况下实现基本的时间国际化处理。此外，还有一些诸如需要使用 Unix 时间戳才能正确地在各端交换时间等细节需要注意。</p>\n<h1>时区转换</h1>\n<p>JavaScript 中的 <code>Date</code> 并不是不包含时区信息——实际上，<code>Date</code> 对象表示的一定是当前时区。通过尝试：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1970-01-01T00:00:00Z')\r\n// Thu Jan 01 1970 08:00:00 GMT+0800 (中国标准时间)</pre>\n<p>就可以知道，JavaScript 运行时其实知道当前时区，并会在需要的时候将其他时区的时间转换为当前时区的时间。那么，如何将本地时间转换为其他时区的时间呢？从 <code>Date</code> 的角度看，这并不行，因为我们无法设置一个 <code>Date</code> 对象的时区。但我们可以“投机取巧”：将 <code>Date</code> 对象的时间加上/减去对应的时差，尽管 <code>Date</code> 对象仍然认为自己在本地时区，但这样不就可以正确显示了嘛！但我们会碰到上文提到的问题：时区之间的时间差并不固定，在没有额外数据的情况下很难正确计算。</p>\n<p>还好，ES6 基于 <code>Intl</code> 命名空间扩展了 <code>Date.prototype.toLocaleString()</code> 方法，使其可以接受时区参数并按指定时区格式化时间。如果你在搜索引擎中搜索如何使用 JavaScript 转换时区，你大概率会在 StackOverflow 上找到类似这样的答案：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const convertTimeZone = (date, timeZone) =&gt; {\r\n    return new Date(date.toLocaleString('en-US', { timeZone }))\r\n}\r\n\r\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\r\nconvertTimeZone(now, 'Europe/London') // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<p>很好理解，我们使用 <code>en-US</code> 的区域设置要求 JavaScript 运行时以我们指定的时区格式化时间，再将时间字符串重新解析为时间对象。这里的 <code>timeZone</code> 就是诸如 <code>Asia/Shanghai</code> 等的 IANA TZDB 时区名称。这个字符串确实需要自己提供，但这就是我们唯一需要自己准备的数据了！只要提供了时区名称，浏览器就会自动计算正确的时间，无需我们自行计算。</p>\n<blockquote><p>对于时区名称，你可以考虑使用 <a href=\"https://github.com/vvo/tzdb/\" rel=\"noopener\">@vvo/tzdb</a>。这是一个声称为自动更新的 IANA TZDB 的 JSON 导出，并已被数个大型项目使用。你可以从这个包中导出所有时区名称。</p></blockquote>\n<p>这个方法看起来还不错，对吧？但实际上，它有两个问题：</p>\n<ul>\n<li>指定了区域设置和时区的 <code>toLocaleString()</code> 实际上每次调用都会在 JavaScript 运行时中创建新的 <code>Intl.DateTimeFormat</code> 对象（在后文详述），而后者会带来昂贵的性能开销（在 Node 14 中，实例化一次会在 V8 中增加内存使用约 46.3Kb。但这是符合预期的，详见 <a href=\"https://bugs.chromium.org/p/v8/issues/detail?id=6528\" rel=\"noopener\">V8 Issue</a>）。因此，在密集调用的情况下需要考虑计算并缓存时差，并在一定时间后或需要时进行更新</li>\n<li>使用 <code>toLocaleString()</code> 并使用 <code>en-US</code> 区域设置格式化的默认时间格式类似于 <code>10/13/2021, 1:00:00 AM</code>。这可以被大部分浏览器正确解析，<strong>但这是不规范的，不同浏览器有可能产生不同结果。</strong>你也可以自行配置格式（同下文的 <code>Intl.DateTimeFormat</code>），但仍然无法构造出规范的字符串</li>\n</ul>\n<p>因此，更佳的方案是，我们需要建立一个可反复使用的格式化器以避免重复创建 <code>Intl.DateTimeFormat</code> 带来的额外开销，并需要手动构造出符合规范的时间字符串，并将其重新解析为 <code>Date</code> 对象。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const timeZoneConverter = (timeZone) =&gt; {\r\n    // 新建 DateTimeFormat 对象以供对同一目标时区重用\r\n    // 由于时区属性必须在创建 DateTimeFormat 对象时指定，我们只能为同一时区重用格式化器\r\n    const formatter = new Intl.DateTimeFormat('zh-CN', {\r\n        year: 'numeric',\r\n        month: '2-digit',\r\n        day: '2-digit',\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n        second: '2-digit',\r\n        hour12: false,\r\n        timeZone\r\n    })\r\n    return {\r\n        // 提供 conver 方法以将提供的 Date 对象转换为指定时区\r\n        convert (date) {\r\n            // zh-CN 的区域设置会返回类似 1970/01/01 00:00:00 的字符串\r\n            // 替换字符即可构造出类似 1970-01-01T00:00:00 的 ISO 8601 标准格式时间字符串并被正确解析\r\n            return new Date(formatter.format(date).replace(/\\//g, '-').replace(' ', 'T').trim())\r\n        }\r\n    }\r\n}\r\n\r\nconst toLondonTime = timeZoneConverter('Europe/London') // 对于同一时区，此对象可重用\r\n\r\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\r\ntoLondonTime.convert(now) // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<blockquote><p>目前 <code>zh-CN</code> 的区域设置会产生类似 <code>1970/01/01 00:00:00</code> 的格式化字符串。这一格式目前跨端一致，但由于规范没有指定时间格式，<strong>这个格式在未来有可能变更。</strong>更好的方案是使用 <code>formatToParts()</code> 方法（在后文详述）获取时间字符串的各部分并手动拼接出标准格式的字符串，但在这个例子中直接 <code>replace</code> 拥有更好的性能。</p></blockquote>\n<p>现在，尝试反复转换时间至同一时区 1000 次，耗时从 <code>toLocaleString()</code> 1.5 秒降低到了 0.04 秒。尽管代码长了点，但这次重写在最好的情况下为我们带来了超过 20 倍的性能提升。</p>\n<p>需要注意的是，虽然这看起来就算最终方案了，但这个方案依然不完美。主要有以下两个问题：</p>\n<ul>\n<li>在需要密集转换为不同时区时，由于无法重用格式化器，性能依然较差且难以进一步优化</li>\n<li>由于 <code>Intl.DateTimeFormat</code> 不支持格式化毫秒，在格式化字符串的过程中毫秒会丢失，导致最终结果可能会与期望结果产生最高 999ms 的误差，需要额外处理。比如需要计算时差时，我们可能需要这么写：\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const calcTimeDiff = (date, converter) =&gt; {\r\n    const secDate = date - date.getMilliseconds() // 去掉毫秒，避免转换前后精度差异\r\n    return converter.convert(new Date(secDate), tzName) - secDate\r\n}\r\n\r\ncalcTimeDiff(new Date(), timeZoneConverter('Europe/London')) // -25200000</pre>\n</li>\n</ul>\n<p>无论如何，在折腾一番后我们还是把时区正确转换了。接下来准备格式化时间字符串了吗？不过在此之前，我们得先来聊聊语言、文字和区域。</p>\n<h1>语言文字区域傻傻分不清</h1>\n<blockquote><p>如何在计算机中表示中文？</p></blockquote>\n<p>“这不简单，”你可能会说，“用 <code>zh</code> 啊。”</p>\n<blockquote><p>那简体中文呢？</p></blockquote>\n<p>“<code>zh-CN</code>。”你或许会说出这个答案。</p>\n<blockquote><p>那用于新加坡的简体中文和用于中国大陆的简体中文该如何区分呢？</p></blockquote>\n<p>嗯……好问题。</p>\n<p>要能正确区分不同的简体中文，我们还得先回到定义上。实际上，“国际化”并不只是语言的翻译而已，国际化包含的是一整套对于各个<strong>区域</strong>的本地化方案。要准确表示一个国际化方案，我们实际至少需要确定三个属性：语言（Language）、文字（Script）和区域（Locale）。</p>\n<ul>\n<li>\n<strong>语言</strong>通常指的是<strong>声音语言</strong>。不同的语言都有一套自己的发音规则，很难互通。如中文和英语都属于语言</li>\n<li>\n<strong>文字</strong>对应的是某个语言的书写方式，同样的语言可能会有多种书写方案。如中文主要有简体和繁体两种书写方案</li>\n<li>\n<strong>区域</strong>指国际化面向的地区，相同的语言和文字，在不同地区也有可能会有不同的使用习惯。如新加坡和中国大陆都使用简体中文，但两地的用词习惯等有些许差异</li>\n</ul>\n<p>只有确定了这三个属性，我们才能正确定义一个国际化方案（或者说<strong>区域设置</strong>）。当然，还有很多其他属性可以更准确的表达某个区域设置，但通常有语言、文字和区域就已经足够了。</p>\n<p>于是，基于 <a href=\"https://tools.ietf.org/rfc/bcp/bcp47.txt\" rel=\"noopener\">BCP 47</a>，我们可以知道：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN = 中文普通话-简体-中国大陆\r\ncmn-Hans-SG = 中文普通话-简体-新加坡\r\ncmn-Hant-TW = 中文普通话-繁体-台湾\r\nyue-Hant-HK = 中文粤语-繁体-香港</pre>\n<p>等等，这都是啥？还有 BCP 47 又是啥？BCP 是 IETF 发布的“最佳当前实践”文档，而 BCP 47 是一些国际化相关的 ISO 和备忘录的集合，也是目前事实上由 HTML 和 ECMAScript 所使用的表达区域设置的标准。BCP 47 定义的区域设置标签实际上比较复杂，但对于大部分简单使用情况，上文示例中的格式已经完全够用了。简单来说，<strong>要表达一个区域设置，我们会使用 <code>语言[-文字][-区域]</code> 的格式，而文字和区域都是可选的。</strong>而对于每个部分的具体代码，BCP 47 也有做具体定义。其中：</p>\n<ul>\n<li>语言使用 ISO 639-1 定义的两位字母代码（如中文为 <code>zh</code>，英文为 <code>en</code>）或 <a href=\"https://iso639-3.sil.org/code_tables/639/data\" rel=\"noopener\">ISO 639-2/3</a> 定义的三位字母代码（如中文普通话为 <code>cmn</code>，英文为 <code>eng</code>），通常小写</li>\n<li>文字使用 <a href=\"https://unicode.org/iso15924/iso15924-codes.html\" rel=\"noopener\">ISO 15924</a> 定义的四位字母代码，通常首字母大写。如简体中文是 <code>Hans</code>，繁体中文是 <code>Hant</code>\n</li>\n<li>区域通常使用 <a href=\"https://www.iso.org/iso-3166-country-codes.html\" rel=\"noopener\">ISO 3166-1</a> 定义的两位字母代码，通常大写，如中国大陆为 <code>CN</code>，英国为 <code>GB</code>\n</li>\n</ul>\n<blockquote><p>ISO 639-1/2/3 的关系实际是：ISO 639-1 是最早制定的规范，使用两位字母表示语言，但语言数量之多并不能只用两位代码表示。因此后来修订了 ISO 639-2 和 3，使用三位字母表示了更多语言。通常 639-1 代码和 ISO-2/3 代码是一对多的关系。如中文 <code>zh</code> 其实是中文普通话 <code>cmn</code> 的宏语言（macrolanguage），同样使用 <code>zh</code> 为宏语言的语言还有 <code>wuu</code>（中文吴语）、<code>hak</code>（中文客家话）、<code>yue</code>（中文粤语）等数十种。<strong>从规范上我们现在应该使用 ISO 639-2/3 代码来替代 ISO 639-1 代码了</strong>，但由于历史阻力和真实需求中分类无需如此细致等原因，<strong>使用 ISO 639-1 指定语言仍然非常常见而且完全可以接受。</strong>此外，特别地，我们在 ISO 639-3 中定义未指明的语言为 <code>und</code>。</p></blockquote>\n<p>因此，对于这一节开头的两个问题，在 BCP 47 中正确答案其实是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">zh = 中文\r\ncmn = 中文普通话\r\n\r\nzh-Hans = 中文-简体\r\ncmn-Hans = 中文普通话-简体</pre>\n<p>而 <code>zh-CN</code> 实际是指在中国大陆使用的中文，当然也包含在中国大陆使用的繁体中文。<strong>不过，由于大部分情况下一个区域只会通用一种文字，很多情况下我们可以忽略文字这一项</strong>，即使用 <code>zh-CN</code>（或者 <code>cmn-CN</code>）来表示中国大陆的简体中文普通话——毕竟在大部分业务中在中国大陆使用繁体和非普通话的情况非常少。</p>\n<blockquote><p>事实上，类似 <code>zh-Hans</code> 和 <code>zh-Hant</code> 开头的区域设置名称已经被标记为 <code>redundant 废弃</code>，因此尽可能只使用 <code>zh-CN</code> 或者 <code>cmn-Hans-CN</code> 这样的区域设置名称。所有区域设置名称的列表可以在 <a href=\"https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry\" rel=\"noopener\">IANA</a> 找到。</p></blockquote>\n<p>现在我们可以准确定义一个区域设置了。不过我们还有一些小小的需求。比如我们想在 <code>cmn-Hans-CN</code> 的区域设置中使用农历来表示日期，但显然我们上文定义的表示方法并不能表达这一需求。好在，Unicode 为 BCP 47 提供了 u 扩展。在区域设置名称后面加上 <code>-u-[选项]</code> 就可以表达更细致的变体了。所以我们有：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN-u-ca-chinese = 中文普通话-简体-中国大陆-u-日历-中国农历\r\njpn-Jpan-JP-u-ca-japanese = 日语-日文汉字/平假名/片假名-日本-u-日历-日本日历\r\ncmn-Hans-CN-u-nu-hansfin = 中文普通话-简体-中国大陆-u-数字-简体大写数字</pre>\n<p>u 扩展的具体可选项可以在 <a href=\"https://www.unicode.org/reports/tr35/tr35-21.html#Unicode_locale_identifier\" rel=\"noopener\">Unicode 网站</a>上找到。而多个 u 扩展还可以连接——于是我们甚至可以写出 <code>cmn-Hans-CN-u-ca-chinese-nu-hansfin</code> 这种丧心病狂的区域设置名称。当然，相信你现在已经可以看懂这个区域设置的意思了。</p>\n<blockquote><p>不同地区可能会有不同的日历使用习惯，如中国有使用农历的需求，泰国有使用佛历的需求，我们可以通过 u 扩展指定不同的日历。不过，大部分情况下我们会使用标准的 ISO 8601 日历（gregory），JavaScript 的 <code>Date</code> 对象也只支持这种日历。</p></blockquote>\n<blockquote><p>你可以使用 <a href=\"https://r12a.github.io/app-subtags/\" rel=\"noopener\">BCP47 language subtag lookup</a> 工具快速检查你编写的 BCP 47 区域标签是否规范。</p></blockquote>\n<p>终于我们可以正确表达一个完美符合我们需求的区域设置了。接下来，让我们开始格式化时间吧。</p>\n<h1>格式化时间</h1>\n<p>这题我会！</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const formatDate(date) =&gt; {\r\n    return `${date.getFullYear()}-${`${date.getMonth() + 1}`.padStart(2, '0')}-${`${date.getDate()}`.padStart(2, '0')} ${`${date.getHours()}`.padStart(2, '0')}:${`${date.getMinutes()}`.padStart(2, '0')}:${`${date.getSeconds()}`.padStart(2, '0')}`\r\n}\r\n\r\nformatDate(new Date()) // 2021-10-13 01:00:00</pre>\n<p>就完事了……吗？先不论这样的格式化代码难以阅读，尽管上文这样的日期格式国际通用，<strong>但并非所有区域都习惯于这样的日期表示方法。</strong>比如英语国家/地区在很多时候习惯在日期中加入星期，而阿拉伯语国家/地区在部分情况下习惯使用阿拉伯语数字（而非常用的阿拉伯-印度数字）；再比如美式英语国家/地区习惯月-日-年的日期表示法，而英式英语国家/地区习惯日-月-年的日期表示法……不同区域在时间表示格式习惯上的差异是巨大的，<strong>我们很难通过一个简单的方法来正确地、国际化地格式化一个日期。</strong></p>\n<p>好在 ES6 早就为我们铺平了道路。还记得上文提到过的 <code>Intl.DateTimeFormat</code> 吗？我们通过它来实例化一个日期格式化器并用进行日期的国际化。</p>\n<p>直接来看例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const options = {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    weekday: 'long'\r\n}\r\nconst now = new Date()\r\n\r\nconst enUSFormatter = new Intl.DateTimeFormat('en-US', options)\r\n\r\nconst zhCNFormatter = new Intl.DateTimeFormat('zh-CN', options)\r\nconst zhCNAltFormatter = new Intl.DateTimeFormat('zh-CN-u-ca-chinese', options)\r\nconst zhCNAlt2Formatter = new Intl.DateTimeFormat('zh-CN-u-ca-roc-nu-hansfin', options)\r\n\r\nconst jaFormatter = new Intl.DateTimeFormat('ja', options)\r\nconst jaAltFormatter = new Intl.DateTimeFormat('ja-JP-u-ca-japanese', options)\r\n\r\nconst arEGFormatter = new Intl.DateTimeFormat('ar-EG', options)\r\n\r\nenUSFormatter.format(now) // Wednesday, Oct 13, 2021\r\n\r\nzhCNFormatter.format(now) // 2021年10月13日星期三\r\nzhCNAltFormatter.format(now) // 2021辛丑年九月8星期三\r\nzhCNAlt2Formatter.format(now) // 民国壹佰壹拾年拾月拾叁日星期三\r\n\r\njaFormatter.format(now) // 2021年10月13日水曜日\r\njaAltFormatter.format(now) // 令和3年10月13日水曜日\r\n\r\narEGFormatter.format(now) // الأربعاء، ١٣ أكتوبر ٢٠٢١</pre>\n<blockquote><p>在这里我们使用 ISO 639-1 代码来表示语言，是由于事实上 ISO 639-1 代码更加常见与通用。在大部分支持 <code>Intl.DateTimeFormat</code> 的 JavaScript 运行时中我们也可以使用 ISO 639-2/3 代码来表示语言（但实际会 fallback 至对应的 ISO 639-1 代码）。</p></blockquote>\n<blockquote><p>你也可以通过在 <code>options</code> 中设置 <code>calendar</code> 属性和 <code>numberingSystem</code> 属性来替换区域设置名称中对 u 扩展的使用。这也是推荐方式。</p></blockquote>\n<p>这非常直观，我们可以指定区域设置和格式化选项来初始化一个格式化器，并在之后使用格式化器对象的 <code>format</code> 方法来格式化一个 <code>Date</code> 对象。这里的格式化选项其实非常灵活，能格式化的不只是日期，时间也可以被灵活地格式化，有非常多的组合可以选择。我们不会在这里详细解释每一个选项，你可以访问 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\" rel=\"noopener\">MDN 文档</a>来了解更多。</p>\n<blockquote><p>如前文所述，<code>Intl.DateTimeFormat</code> 无法格式化毫秒。</p></blockquote>\n<p>不过需要注意的是，<strong>JavaScript 运行时不一定支持所有区域设置，也不一定支持所有格式化选项。</strong>在遇到不支持的情况时，<code>Intl.DateTimeFormat</code> 默认会静默 fallback 到最匹配的支持项，因此在处理不常见的区域设置或选项时，你可能需要再额外检查。你可以通过 <code>Intl.DateTimeFormat.supportedLocalesOf()</code> 静态方法判断当前运行时是否支持指定的区域设置，也可以在实例化格式化器后在对象上调用 <code>resolvedOptions()</code> 方法来检查运行时的解析结果是否与预期一致。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('yue-Hant-CN').resolvedOptions()\r\n// {locale: 'zh-CN', calendar: 'gregory', …}\r\n// fallback 至 zh-CN，与 yue-CN 的预期不一致</pre>\n<p>此外，正如你所看到的，各种语言在日期格式化中使用的文本 JavaScript 运行时都已经帮我们内置了。因此，我们甚至可以利用这些国际化特性来为我们的应用减少一点需要翻译的字符串——打包进应用的翻译越少，应用体积也就越小了嘛——比如说获取一周七天对应的名字：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getWeekdayNames = (locale) =&gt; {\r\n     // 基于一个固定日期计算，这里选择 1970.1.1\r\n     // 不能使用 0，因为 Unix 时间戳 0 在不同时区的日期不一样\r\n    const base = new Date(1970, 0, 1).getTime()\r\n    const formatter = new Intl.DateTimeFormat(locale, { weekday: 'short' })\r\n    return Array.from({ length: 7 }, (_, day) =&gt; (\r\n        formatter.format(new Date(base + 3600000 * 24 * (-4 + day))) // 1970.1.1 是周四\r\n    ))\r\n}\r\n\r\ngetWeekdayNames('en-US') // ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\r\ngetWeekdayNames('zh-CN') // ['周日', '周一', '周二', '周三', '周四', '周五', '周六']\r\ngetWeekdayNames('ja') // ['日', '月', '火', '水', '木', '金', '土']\r\ngetWeekdayNames('ar-EG') // ['الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت']</pre>\n<p>当然，如果你还是不喜欢运行时为你提供的格式，我们还有上文提到过的 <code>formatToParts()</code> 方法可以用。来看一个简单的例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('zh-CN', {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    weekday: 'long',\r\n    hour: 'numeric',\r\n    minute: 'numeric',\r\n    second: 'numeric',\r\n}).formatToParts(new Date())\r\n// [\r\n//     { type: 'year', value: '2021' },\r\n//     { type: 'literal', value: '年' },\r\n//     { type: 'month', value: '10' },\r\n//     { type: 'literal', value: '月' },\r\n//     { type: 'day', value: '13' },\r\n//     { type: 'literal', value: '日' },\r\n//     { type: 'weekday', value: '星期三' },\r\n//     { type: 'literal', value: ' ' },\r\n//     { type: 'dayPeriod', value: '上午' },\r\n//     { type: 'hour', value: '1' },\r\n//     { type: 'literal', value: ':' },\r\n//     { type: 'minute', value: '00' },\r\n//     { type: 'literal', value: ':' },\r\n//     { type: 'second', value: '00' }\r\n// ]</pre>\n<p>随后，你就可以自己解析这个数组来构造出你想要的时间格式了。最后，我们还可以使用 <code>Intl.RelativeTimeFormat</code> 来格式化相对日期。当然我们不会在这里详细讲解这个 API，你可以参考 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat\" rel=\"noopener\">MDN 文档</a>。直接来看一个简单例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getRelativeTime = (num, unit, locale) =&gt; {\r\n    return new Intl.RelativeTimeFormat(locale, { numeric: 'auto' }).format(num, unit)\r\n}\r\n\r\ngetRelativeTime(-3, 'day', 'en-US') // 3 days ago\r\ngetRelativeTime(-1, 'day', 'zh-CN') // 昨天\r\ngetRelativeTime(0, 'second', 'zh-CN') // 现在\r\ngetRelativeTime(3, 'hour', 'ja') // 3 時間後</pre>\n<blockquote><p><code>Intl.RelativeTimeFormat</code> 是一个相对较晚进入标准的对象，因此浏览器支持程度较差，可能需要使用 <a href=\"https://formatjs.io/docs/polyfills/intl-relativetimeformat\" rel=\"noopener\">Polyfill</a>。不过目前（2021.10）主流浏览器的最新版本均已支持此 API。</p></blockquote>\n<h1>未来</h1>\n<p>我希望这篇文章时区转换的部分可以很快过时——这并非无稽之谈，目前（2021.10）TC39 的 <a href=\"https://github.com/tc39/proposal-temporal\" rel=\"noopener\"><code>Temporal</code> 提案</a>已经进入 Stage 3 了。<strong><code>Temporal</code> 提案定义了一个新的、时区友好的 <code>Temporal</code> 命名空间，并期望在不久后就能进入标准并最终应用于生产环境。</strong><code>Temporal</code> 定义了完整的时区、时间段、日历规则的处理，且拥有简单明了的 API。那时候，JavaScript 的时区处理就不会再如此痛苦了。由于目前 <code>Temporal</code> 提案还未进入标准，API 暂未稳定，我们无法将其用于生产环境，但我们可以来看一个简单的例子感受一下这个 API 的强大。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const zonedDateTime = Temporal.ZonedDateTime.from({\r\n  timeZone: 'America/Los_Angeles',\r\n  year: 1995,\r\n  month: 12,\r\n  day: 7,\r\n  hour: 3,\r\n  minute: 24,\r\n  second: 30,\r\n  millisecond: 0,\r\n  microsecond: 3,\r\n  nanosecond: 500,\r\n  calendar: 'iso8601'\r\n}) // 1995-12-07T03:24:30.0000035-08:00[America/Los_Angeles]</pre>\n<p>如果你希望立刻开始使用 <code>Temporal</code>，现在已有 Polyfill 可用。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"js-temporal\" data-mdxgithubp=\"temporal-polyfill\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/js-temporal/temporal-polyfill\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>不过，时区问题不会消失，各地区的习惯也很难融合到一起。时间的国际化处理是<a href=\"https://yourcalendricalfallacyis.com/\" rel=\"noopener\">极其复杂</a>的，前端中的时间国际化仍然值得我们认真关注。</p>\n","link":"https://flyhigher.top/develop/2482.html"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 4分8秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量...</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板...）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/209138/1/18651/50218/622032acEf83a8d68/fc6db86aebb679ff.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。macOS 系统代理的行为和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：...</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/207910/19/18573/59096/622032b0E05c1d4be/5d89d557f7889730.jpg\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"\n<p>WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将其表述为 \"An API for accessing Public Key Credentials\"，即“一个用于访问公钥凭证的 API”。WebAuthn 很强大，强大到被认为是 Web 身份认证的未来（当然，也很复杂）。你有想过通过指纹或者面部识别来登录网站吗？WebAuthn 就能在保证安全和隐私的情况下让这样的想法成为现实。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\" alt=\"通过 WebAuthn 调起 Windows Hello 登录网站\" width=\"1912\" height=\"966\" class=\"aligncenter size-full wp-image-2215\"></a>\n<p>你可以在<a href=\"https://webauthn.io/\" rel=\"noopener\">这个网站</a>自行体验 WebAuthn。或者，如果你有一个使用 WordPress 的站点，可以尝试一下 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WP-WebAuthn</a> 这款插件，它可以为你的站点启用 WebAuthn 登录。这是我为了写这篇文章而练手开发的插件，本文中的部分示例代码也来自这款插件。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"wp-webauthn\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/wp-webauthn\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>WebAuthn Level 1 标准已在 2019 年 3 月成为 W3C 推荐标准，而 Level 2 标准目前也已进入编辑草案阶段，但互联网上有关它的中文资料却仍然很少，国内也鲜有网站支持这一新标准。于是，在抱着各种英文资料和标准啃了几天以后，我折腾出了这篇文章。</p>\n<p>在这篇文章里，我将会从最基本的概念开始，逐渐深入 WebAuthn，直到解码公钥等深层细节。这可能是你能找到的有关 WebAuthn 最详细最基础的中文文章，也很可能是最长的。在开始之前，<strong>我强烈建议你打开菜单中的文章目录浏览一遍，以对这篇文章涉及的内容有所了解。</strong>如果你只是想了解如何简单地在你的项目中添加对 WebAuthn 的支持，那么“<a href=\"https://flyhigher.top/#webauthn-overview\">浅谈 WebAuthn</a>”部分就是你要找的；如果你想了解更多关于 WebAuthn 的底层细节，那么你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分。</p>\n<p>由于在本文写作时 WebAuthn Level 2 规范尚未定稿，<strong>这篇文章我们将只专注于 Level 1 规范。</strong></p>\n<p>这篇文章最后更新于 2020.9 ，在你读到这篇文章时，部分事实可能已经发生改变，请注意判断。</p>\n<p><strong>更新日志：</strong></p>\n<ul>\n<li>2021.1.16 添加 Chrome 开发工具信息</li>\n<li>2020.9.17 更新 iOS/iPad OS 兼容性信息</li>\n<li>2020.5.20 添加部分无用户名认证的平台兼容性内容</li>\n<li>2020.5.15 添加部分 <code>extensions</code> 相关内容与链接；添加全局凭证 ID 唯一内容；添加凭证 ID 查找相关内容；添加“从 U2F 认证迁移”一节</li>\n<li>2020.4.13 更新与修正 <code>userVerification</code> 相关内容；添加部分 Firefox 相关内容</li>\n<li>2020.3.23 文章发布</li>\n</ul>\n<p>那么让我们开始吧。<span></span></p>\n<h1>浅谈 WebAuthn</h1>\n<p>在这个部分里，我们将会从基础概念开始，了解有关 WebAuthn 和密码学的一些基础知识，并最终使用第三方库实现基础的 WebAuthn 认证。如果你已经对这些内容有所了解了，可以跳到“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”继续阅读。</p>\n<h2>为什么使用 WebAuthn</h2>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\" alt=\"钓鱼邮件\" width=\"709\" height=\"693\" class=\"aligncenter size-full wp-image-2162\"></a>\n<p>相信你一定收到过类似的邮件吧？只要你点进那个最显眼的链接，你就会进入一个设置好的圈套——钓鱼网站。如果你一时糊涂在这类网站上填写了你的账号和密码，bingo，你的账号就不再是你的账号了。</p>\n<p>不过，就算你警惕心再强，也无法避免密码泄露事件。Twitter, Facebook 等都爆出过明文密码泄露事件，证明再大的公司或组织也无法避免密码泄露问题。雪上加霜的是，很大一部分用户都非常喜欢使用重复密码，这就导致一次密码泄露会牵连很多网站，用户的账户安全性完全无法得到保证。</p>\n<p>那么，有什么办法解决这些问题吗？<strong>彻底解决的方法只有一个，那就是抛弃密码。</strong>可是没有密码还怎么验证用户身份呢？这就是 WebAuthn 的用武之地了。</p>\n<p><del>没有密码的好时代，来临力！</del></p>\n<h2>什么是 WebAuthn</h2>\n<p>那么到底什么是 WebAuthn 呢？如开头所说，WebAuthn 是“一个用于访问公钥凭证的 API”，网站可以通过这个 API 进行一些高安全性的身份验证。WebAuthn 一个最常见的应用就是用于网站登录时的 2FA（双重因素验证）甚至是无密码登录。通过网页调用 WebAuthn，在不同平台下，<strong>我们可以实现通过 USB Key、指纹、面部甚至虹膜扫描来认证身份，同时确保安全和隐私。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\" alt=\"WebAuthn 可使用的各种身份认证方式\" width=\"1294\" height=\"566\" class=\"aligncenter size-full wp-image-2213\"></a>\n<p>WebAuthn 标准是 FIDO2 标准的一部分，而 FIDO2 则是由 FIDO 联盟和 W3C 共同推出的 U2F（现称作 FIDO1）的后继标准，旨在增强网络认证的安全性。</p>\n<blockquote><p>你可能了解过 U2F，那么 U2F 和 FIDO2 的区别在哪里呢？从名字上可以看出，U2F，即“通用第二因素协议”，是专注于作为密码后的第二道屏障的，而 FIDO2 增加了单因素认证功能，这意味着使用 FIDO2 可以完全替代密码，真正实现无密码登录。</p></blockquote>\n<p>FIDO2 标准主要包括四个部分，其一是用于网站和访客设备交互的 WebAuthn，而 Client to Authenticator Protocol 2（CTAP2，客户端-认证器协议）作为 WebAuthn 的补充，则是用于访客的设备和认证器交互的协议。标准的其他两个部分则是 U2F 和 UAF 规范。在这篇文章中，我们只关心 WebAuthn，不会涉及 CTAP, U2F 和 UAF 的相关知识。如果你对这段话中的一些概念不了解，不要紧张，接下来我们就来谈谈 WebAuthn 中一些常用的术语和概念。</p>\n<blockquote><p>WebAuthn 只能在安全上下文中使用，也就是说，页面需要使用 HTTPS 协议或是处于 <code>localhost</code> 中。</p></blockquote>\n<h2>常用术语和概念</h2>\n<p>WebAuthn 中有许多不常碰到的术语，不过我只会在这里介绍一些常用的术语和概念——如果你只是希望做出一个简单的实现，那么了解这一段中的一些概念就足够了。同时，由于我实在没能找到一部分术语的通用翻译，有一些术语我按着自己的理解尽可能地翻译了，有任何问题请告诉我。</p>\n<p>在一个完整的 WebAuthn 认证流程中，通常有这么几个角色：</p>\n<ul>\n<li>Relying Party 依赖方 (RP) ：指服务提供方，即网站</li>\n<li>User 用户：正准备登录的你</li>\n<li>Authenticator 认证器：通常指 USB Key 或是设备内置的指纹扫描器、虹膜扫描器、面部识别装置等，正是它们在使用流程中代替了密码甚至是用户名</li>\n<li>User Agent 用户代理：通常指浏览器或系统，负责与认证器交互</li>\n</ul>\n<p>认证过程通常分为两种：</p>\n<ul>\n<li>Registration Ceremony 注册仪式：用户向账户上添加认证器</li>\n<li>Authentication Ceremony 验证仪式：用户通过已注册的认证器验证身份</li>\n</ul>\n<p>同时，认证过程中还会产生这些内容：</p>\n<ul>\n<li>Challenge 挑战：通常是一串随机字符串</li>\n<li>Public Key Credential 公钥凭证：由认证器产生的凭证，在技术上代替了密码</li>\n<li>Attestation 证明：注册时认证器产生的验证数据</li>\n<li>Assertion 断言：验证时认证器产生的验证数据</li>\n</ul>\n<blockquote><p><strong>请注意区分证明 (Attestation) 和断言 (Assertion)</strong>，特别是在这两个单词有些相似的情况下。在 WebAuthn 中，它们是不同过程中的类似概念，但并不相同。</p></blockquote>\n<p>如果你对于这些内容不是很理解，没有关系，我们会在“<a href=\"https://flyhigher.top/#how-to-webauthn\">使用流程</a>”一节中将这些概念放到实际情况中解释，你只要先区分这些概念即可。</p>\n<h2>安全性的基础</h2>\n<p>WebAuthn 为什么安全？和 HTTPS 一样，WebAuthn 使用非对称加密的思路来保证安全性，但侧重点又有所不同。要理解 WebAuthn 的认证流程，我们必须对非对称加密有所了解。如果你对非对称加密比较熟悉了，就直接跳到下一段吧。</p>\n<p>WebAuthn 的核心在于“认证”，即保证产生了凭证的认证器是用户的认证器，而不是第三方在伪造凭证。但为什么要使用非对称加密呢？我们可以先来看看对称加密。</p>\n<p>让我们假设小明和小红相互写信，见不到对方。这天小红突然想，给自己写信的人是不是真的小明呢？于是小红要求对方向小红证明自己是小明。怎么证明呢？他们商量出来这么一套方案：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明和小红商量一个统一的密码和密钥</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明用提前和小红商量好的密码和密钥加密文本后发回给小红</li>\n<li>小红使用相同的密码和密钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和密钥</li>\n</ol>\n<blockquote><p>在密码学中，我们通常把“加密算法”称为密码 (code)，和通常登录时用的密码 (password) 并非同一个概念。</p></blockquote>\n<p>在这种情况下，<strong>只要密钥不泄露</strong>，即拥有正确密钥的只有小明和小红，那么小红就能确定对方一定是小明。但这样的问题也很明显，如果小明和小红不能见面，那么他们就必须先以明文交换密码——<strong>在这个过程中一旦有人窃取到了密码，这个认证就无效了。</strong></p>\n<p>这时我们就需要使用<strong>非对称加密</strong>来拯救破碎的信任了。非对称加密的基础是一对密钥，也就是公钥和私钥，它们是互相关联但（几乎）无法互相推导的。在非对称加密的过程中，选择相同的密码后，使用私钥加密明文得到的密文只能由对应的公钥解密，无法使用私钥解密，同时这个过程反过来也是成立的。</p>\n<blockquote><p>本文的核心并不是非对称加密算法，因此不会详述非对称加密在数学上的证明，若有兴趣可以自行了解。</p></blockquote>\n<p>这就完美解决密钥泄露的问题了。让我们回过头来看之前的例子。现在小明和小红决定使用非对称加密来证明身份，过程如下：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明提前生成一对公私钥，将公钥发送给小红，私钥自己保管，同时商量好统一的密码</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明使用商量好的密码和自己的私钥加密文本，发送给小红</li>\n<li>小红使用相同的密码和小明的公钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和私钥</li>\n</ol>\n<p>在这种情况下，<strong>只要私钥不泄露</strong>，那么小红解密得到的文本和之前发送的一致，那么就可以证明收到的密文一定是由小明加密后发送过来的。而在整个过程中，私钥都没有离开过小明，更没有经过传输，也就几乎没有泄露的可能了。这时，小红终于可以确定对面和她通信的人的确是小明了。</p>\n<p>题外话：HTTPS 虽然也应用了非对称加密，但 HTTPS 更侧重于“加密”而非“认证”，因此思路上会有些许差异。要了解关于 HTTPS 和非对称加密的更多信息，你可以阅读我之前写的这篇文章：</p>\n<p></p>\n<div class=\"mdx-post-cot\" data-mdxposturl=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdx-post-wait-out-c2\"><div class=\"mdx-post-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<span></span>\n<h2>使用流程</h2>\n<p>了解了非对称加密，我们就可以来看看 WebAuthn 的认证流程了。</p>\n<p>和普通的密码一样，<strong>使用 WebAuthn 分为两个部分，注册和验证。</strong>注册仪式会在依赖方中将认证器的一些信息和用户建立关联；而验证仪式则是验证这些信息以登确保是用户本人在登录。根据上一节的思路，我们可以知道，注册仪式就是认证器生成一对公私钥，然后将公钥交给依赖方；而验证仪式是依赖方发送给认证器一段文本，要求认证器用自己的私钥加密后发回以验证。</p>\n<p>在实际情况中，WebAuthn 是基于<strong>挑战-应答模型</strong>工作的。要更好地理解，我们直接来看具体流程。先来看看注册的流程。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\" alt=\"WebAuthn 注册流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2224\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的注册请求</li>\n<li>依赖方向浏览器发送挑战、依赖方信息和用户信息</li>\n<li>浏览器向认证器发送挑战、依赖方信息、用户信息和客户端信息以请求创建公钥凭证</li>\n<li>认证器请求用户动作，随后创建一对公私钥，并使用私钥签名挑战（即证明），和公钥一起交给浏览器</li>\n<li>浏览器将签名后的挑战和公钥发送给依赖方</li>\n<li>依赖方用公钥验证挑战是否与发送的一致，如果成功则将公钥与用户绑定，注册完成</li>\n</ol>\n<p>我也做了一个交互式的 Demo，你可以对照流程来更好地理解。</p>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\">开始注册</button> <span></span></p>\n<div></div>\n<blockquote><p>注意，这个 Demo 和下方的 Demo 都只是一个本地模拟的简单示例，没有任何数据会被上传，当然也不会对数据进行验证。</p></blockquote>\n<p>而之后的验证流程如下：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\" alt=\"WebAuthn 验证流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2226\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的验证请求</li>\n<li>依赖方向浏览器发送挑战</li>\n<li>浏览器向认证器发送挑战、依赖方信息和客户端信息以请求获取公钥凭证</li>\n<li>认证器请求用户动作，随后通过依赖方信息找到对应私钥，并使用私钥签名挑战（即断言），交给浏览器</li>\n<li>浏览器将签名后的挑战发送给依赖方</li>\n<li>依赖方用之前存储的公钥验证挑战是否与发送的一致，一致则验证成功</li>\n</ol>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\" disabled>开始验证</button> <span>在上方注册后才能验证</span></p>\n<div></div>\n<p>可以看到，WebAuthn 不仅在理论上是安全的，同时<strong>在整个过程中并没有隐私数据被传输</strong>——用户信息实际上只包含用户名和用户 ID。因此我们完全可以说 WebAuthn 是安全且私密的。</p>\n<blockquote><p>为了避免用户在不同依赖方之间被追踪，认证器通常会为每个依赖方和用户的组合都创建一对公私钥。不过，由于认证器的存储空间有限，认证器通常不会存储每一个私钥，而是会通过各类信息和烧录在认证器内的主密钥“算”出对应的私钥以实现无限对公私钥。具体算法根据不同厂商会有所不同。对于 Yubikey，你可以在<a href=\"https://developers.yubico.com/U2F/Protocol_details/Key_generation.html\">这里</a>了解更多。</p></blockquote>\n<blockquote><p>如果依赖方需要，用户同意后，发送给依赖方的公钥凭证中可以包含用于辨认认证器型号的信息，不过这对隐私的影响微乎其微。</p></blockquote>\n<h2>浏览器接口</h2>\n<p>要使用 WebAuthn，我们必须要依靠浏览器作为媒介和验证器进行交互，而这就需要浏览器对于 WebAuthn 的支持了。绝大多数新版本的现代浏览器都为 WebAuthn 提供了统一的接口，而在这一段中我们会了解如何使用相关的接口。但是在开始之前，我们可以先来看看浏览器的支持程度（2020.9）。</p>\n<div class=\"mdui-table-fluid\"><table class=\"mdui-table\">\n<thead><tr>\n<th>浏览器</th>\n<th>支持情况</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>桌面端 Chrome</td>\n<td>67+</td>\n</tr>\n<tr>\n<td>移动端 Chrome</td>\n<td>67+<sup>[1]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Firefox</td>\n<td>60+</td>\n</tr>\n<tr>\n<td>移动端 Firefox</td>\n<td>不支持<sup>[2]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Edge</td>\n<td>18+</td>\n</tr>\n<tr>\n<td>移动端 Edge</td>\n<td>不支持<sup>[3]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Safari</td>\n<td>13+</td>\n</tr>\n<tr>\n<td>移动端 Safari</td>\n<td>13.3+<sup>[4]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Opera</td>\n<td>54+</td>\n</tr>\n<tr>\n<td>移动端 Opera</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table></div>\n<p><sup>[1]</sup> 受平台限制，Chrome 在 iOS 平台上不支持 WebAuthn，在 Android 平台上支持大部分 WebAuthn 功能，但仍不支持部分特性（如 <code>userVerification</code>）。<br><sup>[2]</sup> 移动端 Firefox 80 以下的版本支持 WebAuthn 但似乎会忽略 <code>authenticatorAttachment</code> 等一部分参数，同时移动端 Firefox Beta 80 以下的版本支持 WebAuthn 但无法成功调用。自 80 版本起移动端 Firefox 暂时取消了对 WebAuthn 的支持（可能是 Bug）。<br><sup>[3]</sup> 移动端 Edge 似乎支持 WebAuthn 但无法成功调用。<br><sup>[4]</sup> Safari iOS/iPad OS 13 仅支持外部认证器，无法调用 Touch ID 或 Face ID；自 iOS/iPad OS 14 起 Safari 已支持全功能 WebAuthn，可以调用 Touch ID/Face ID</p>\n<p>当然，一众国产浏览器，包括 Samsung Browser 和 Yandex Browser，目前都不支持 WebAuthn。此外，由于 WebAuthn 涉及外部验证器和 TPM 可信平台模块等，用户的操作系统也会对 WebAuthn 的可用性造成影响。以下是一些需要注意的信息：</p>\n<ul>\n<li>Windows 10 1903 以下版本仅 Edge 能提供完整支持，其他浏览器只能使用 USB Key 等外部认证器；1903+ 中所有浏览器都可以通过 Windows Hello 带来完整的 WebAuthn 支持</li>\n<li>Android 需要安装并开启 Google 服务</li>\n<li>iOS/iPad OS 13.3 以下的版本不支持 WebAuthn，iOS/iPad OS 14 以下的版本支持有限（参考上文），iOS/iPad OS 14 开始 Safari 已支持全功能 WebAuthn（功能完整度甚至超过了 Android）</li>\n</ul>\n<p>可以看出，WebAuthn 的发展之路仍然很漫长，但好在桌面端对它的支持已经比较完善了，在一些情况下我们完全有理由使用它。</p>\n<hr>\n<p>来看看浏览器提供了怎么样的接口吧。要使用 WebAuthn，我们可以使用 <code>navigator.credentials.create()</code> 请求认证器生成公钥凭证和 <code>navigator.credentials.get()</code> 请求获取公钥凭证。</p>\n<blockquote><p>你或许已经对 Credential Management API 有所了解了。通过这些 API，我们还可以实现一些有趣的特性，不过这值得另开一篇文章来讲了。</p></blockquote>\n<p>对于一个基础的实现，<code>navigator.credentials.create()</code> 需要传入的参数如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        challenge,\r\n        rp: {\r\n            id,\r\n            name\r\n        },\r\n        user: {\r\n            id,\r\n            name,\r\n            displayName\r\n        },\r\n        pubKeyCredParams: [\r\n            {\r\n                type: \"public-key\",\r\n                alg\r\n            }\r\n        ],\r\n        authenticatorSelection: {\r\n            authenticatorAttachment,\r\n            userVerification\r\n        },\r\n        excludeCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>在 <code>navigator.credentials.create()</code> 方法中，我们必须传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值。这指明了我们需要创建公钥凭证，而非普通的密码凭证。然后，在 <code>publicKey</code> 对象中设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rp: Object</code>：依赖方信息，其中有一项为必须：\n<ul>\n<li>\n<code>rp.id: String</code>：（可选）依赖方 ID，必须为当前域名或为当前域名的子集的域名（不是子域名）。如域名为 <code>test.123.example.com</code>，则依赖方 ID 可以是 <code>test.123.example.com</code>, <code>123.example.com</code> 或 <code>example.com</code>。不指定则默认使用当前域名</li>\n<li>\n<code>rp.name: String</code>：依赖方名称，用于方便用户辨认</li>\n</ul>\n</li>\n<li>\n<code>user: Object</code>：用户信息，其中有三项为必须：\n<ul>\n<li>\n<code>user.id: Uint8Array</code>：转换为 <code>Uint8Array</code> 的字符串。<strong>出于安全考量，这应尽可能不与任何用户信息相关联，如不要包含用户名、用户邮箱等</strong>\n</li>\n<li>\n<code>user.name: String</code>：登录用户名</li>\n<li>\n<code>user.dispalyName: String</code>：用于显示的用户名称，显示与否的具体行为取决于浏览器</li>\n</ul>\n</li>\n<li>\n<code>pubKeyCredParams: Array</code>：一个算法列表，指明依赖方接受哪些签名算法。列表的每一项都是一个对象，拥有两个属性：\n<ul>\n<li>\n<code>pubKeyCredParams[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>pubKeyCredParams[].alg: Number</code>：一个负整数，用于标明算法。具体算法对应的数字可以在 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\">COSE</a> 找到</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection: Object</code>：（可选）用于过滤正确的认证器，这里介绍常用的一个参数：\n<ul>\n<li>\n<code>authenticatorSelection.authenticatorAttachment: String</code>：（可选）指定要求的认证器类型。如果没有满足要求的认证器，认证可能会失败。该参数可以为 <code>null</code>（表示接受所有类型的认证器）或是以下两个值之一：\n<ul>\n<li>\n<code>platform</code>：表示仅接受平台内置的、无法移除的认证器，如手机的指纹识别设备</li>\n<li>\n<code>cross-platform</code>：表示仅接受外部认证器，如 USB Key</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection.userVerification: String</code>：（可选）指定认证器是否需要验证“用户为本人 (User Verified, UV)”，否则只须“用户在场 (User Present, UP)”。具体验证过程取决于认证器（不同认证器的认证方法不同，也有认证器不支持用户验证），而对验证结果的处理情况则取决于依赖方。该参数可以为以下三个值之一：\n<ul>\n<li>\n<code>required</code>：依赖方要求用户验证</li>\n<li>\n<code>preferred</code>：（默认）依赖方希望有用户验证，但也接受用户在场的结果</li>\n<li>\n<code>discouraged</code>：依赖方不关心用户验证。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>excludeCredentials: Array</code>：（可选）用于标识要排除的凭证，可以避免同一个用户多次注册同一个认证器。如果用户试图注册相同的认证器，用户代理会抛出 <code>InvalidStateError</code> 错误。数组中的每一项都是一个公钥凭证对象，包含以下属性：\n<ul>\n<li>\n<code>excludeCredentials[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>excludeCredentials[].id: Uint8Array</code>：要排除的凭证 ID</li>\n<li>\n<code>excludeCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，超时后将强制终止 <code>create()</code> 并抛出错误。若不设置，将使用用户代理的默认值；若太大或太小，则使用最接近的用户代理默认值范围中的值。推荐值为 5000-120000</li>\n</ul>\n<blockquote><p>对于 <code>pubKeyCredParams</code>，通常我们只需添加 ES256 (alg: -7) 算法即可兼容大部分外部认证器，此外，再添加 RS256 (alg: -257) 算法即可兼容大部分平台内置认证器（如 Windows Hello）。当然，前端添加算法之后，后端也需要相应的算法支持。</p></blockquote>\n<blockquote><p>对于 <code>userVerification</code>，由于默认值 \"preferred\" 并不能很好地被所有设备支持，因此无论在 <code>create()</code> 中还是 <code>get()</code> 中不指定该参数都会在 Chrome 中触发一条警告。具体请参阅<a href=\"https://chromium.googlesource.com/chromium/src/+/master/content/browser/webauth/uv_preferred.md\">这个页面</a>。</p></blockquote>\n<p>调用 <code>create()</code> 之后，我们就可以拿到一个 <code>Promise</code>，并可以在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>create()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAttestationResponse {\r\n        attestationObject: ArrayBuffer(390) {},\r\n        clientDataJSON: ArrayBuffer(121) {}\r\n    },\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\",\r\n    type: \"public-key\"\r\n}</pre>\n<p>其中有：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 \"public-key\"</li>\n<li>\n<code>response: Object</code>：<code>AuthenticatorAttestationResponse</code> 对象，是 <code>PublicKeyCredential</code> 的主要部分，包含以下两个内容：\n<ul>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n<li>\n<code>response.attestationObject: ArrayBuffer</code>：CBOR 编码的认证器数据，包含凭证公钥、凭证 ID、签名（如果有）、签名计数等信息</li>\n</ul>\n</li>\n</ul>\n<p>然后将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串，我们就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证与注册了。具体怎么操作，我们会在下文详细讨论。当然，别忘了 <code>catch()</code> 注册过程中抛出的任何错误。</p>\n<blockquote><p>你可能会认为在所有情况下，注册时认证器都会对挑战进行签名。实际上在大部分情况下（同时也是默认情况），<strong>注册时认证器并不会对挑战进行签名</strong>，<code>attestationObject</code> 并不会包含签名后的挑战。只有依赖方明确要求证明且用户同意（部分浏览器要求）后认证器才会对挑战进行签名（具体实现据情况会有所不同）。对此，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion#Attestation\">MDN 解释道</a>“大部分情况下，用户注册公钥时我们会使用「初次使用时信任模型」(TOFU) ，此时验证公钥是没有必要的。”要了解更多关于证明的内容，请参阅“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>而对于 <code>navigator.credentials.get()</code>，我们可以传入如下的参数：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.get({\r\n    publicKey: {\r\n        challenge,\r\n        rpId,\r\n        userVerification,\r\n        allowCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>和 <code>create()</code> 一样，对于 <code>get()</code> 我们需要传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值，指明我们需要获取的是公钥凭证而非普通的密码凭证。在 <code>publicKey</code> 对象中我们可以设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rpID: String</code>：（可选）依赖方 ID，需要和注册认证器时的一致。规则和上述的 <code>rp.id</code> 一致，不指定默认使用当前域名</li>\n<li>\n<code>userVerification: String</code>：和上文一样，只是需要注意它这次不在 <code>authenticatorSelection</code> 中了</li>\n<li>\n<code>allowCredentials: Array</code>：（可选）用于标识允许的凭证 ID，使用户代理找到正确的认证器。只有符合这个列表中凭证 ID 的凭证才能被成功返回。数组中的每一项都是对象，包含以下属性：\n<ul>\n<li>\n<code>allowCredentials[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>allowCredentials[].id: Uint8Array</code>：允许的凭证 ID</li>\n<li>\n<code>allowCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，和上面的一样，推荐值为 5000-120000</li>\n</ul>\n<p>嗯，要传入的参数少多了。之后，和 <code>create()</code> 一样，调用 <code>get()</code> 之后，我们就可以拿到一个 <code>Promise</code> 并在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>get()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAssertionResponse {\r\n        authenticatorData: ArrayBuffer(37) {},\r\n        signature: ArrayBuffer(256) {},\r\n        userHandle: ArrayBuffer(64) {},\r\n        clientDataJSON: ArrayBuffer(118) {}\r\n    }\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\"\r\n    type: \"public-key\"\r\n}</pre>\n<p>这里的东西就比 <code>create()</code> 时拿到的要多了。看看我们拿到了什么吧：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 \"public-key\"</li>\n<li>\n<code>response: Object</code>：对于验证流程，认证会返回 <code>AuthenticatorAssertionResponse</code> 而不是 <code>AuthenticatorAttestationResponse</code> 对象，这个对象包含以下 4 个属性：\n<ul>\n<li>\n<code>response.authenticatorData: ArrayBuffer</code>：认证器信息，包含认证状态、签名计数等</li>\n<li>\n<code>response.signature: ArrayBuffer</code>：被认证器签名的 <code>authenticatorData</code> + <code>clientDataHash</code>（<code>clientDataJSON</code> 的 SHA-256 hash）</li>\n<li>\n<code>response.userHandle: ArrayBuffer</code>：<code>create()</code> 创建凭证时的用户 ID <code>user.id</code>。许多 U2F 设备不支持这一特性，这一项将会是 <code>null</code>\n</li>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n</ul>\n</li>\n</ul>\n<p>同样地，我们将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串后就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证了。至于具体怎么做，别急，马上就来讲一讲。</p>\n<h2>简单实现</h2>\n<p>了这么多，我们终于可以实现一个简单的 WebAuthn 认证页面了。由于在实际操作中 WebAuthn 相关的数据解码和密码计算比较复杂，在服务器端我们可以使用第三方库来帮我们做这些脏活累活，我们只需专注于具体流程就可以了。</p>\n<p>要寻找可用的第三方库，你可以在 <a href=\"https://webauthn.io/\">webauthn.io</a> 上找到适用于各种语言的第三方库——除了 PHP（笑）。不过好在你可以在 GitHub 上找到几个不错的 PHP WebAuthn 库，比如 <a href=\"https://github.com/web-auth/webauthn-framework\">web-auth/webauthn-framework</a>。</p>\n<p>在我们的这个例子中，我们关心的主要是前端逻辑；而后端我们可以使用各类几乎已经做到开箱即用的第三方库，这样我们可以专注于流程而不必关心细节。当然如果你想了解后端的解码细节，可以阅读“<a href=\"https://flyhigher.top/#webauthn-decode\">手动解个码</a>”一节。</p>\n<hr>\n<p>让我们先从注册开始吧。现在，用户点击了注册认证器的按钮，一个请求被发送给服务器（也就是依赖方）。在最简单的情况中，依赖方需要将三个内容发送给浏览器：<strong>挑战、用户信息和用户已注册的凭证 ID 列表（即 <code>excludeCredentials</code>）</strong>。当然依赖方也可以自由选择发送更多信息，只要最终前端能构建合法的参数即可。</p>\n<p>挑战最终会被转换为 <code>Uint8Array</code>，即一组 0-255 的整数。如果使用 PHP，在后端我们可以这样生成 Base64 编码的挑战：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$challenge = \"\";\r\nfor($i = 0; $i \n<p>对于用户信息，我们需要登录名、显示名称和 ID 三项内容。我们可以从数据库中取出用户信息，也可以新建一份。需要注意的是，<strong>出于安全和隐私的考量，ID 不应该包含用户的任何信息，比如用户邮箱等。</strong>推荐的做法是和挑战一样，生成一个随机字符串/一组随机数，并将其于用户关联起来以供之后使用。</p>\n<p>发送已注册的凭证 ID 列表是为了防止用户重复注册同一个认证器。正确设置该列表后，如果用户试图注册同一个认证器，浏览器会中止流程并抛出 <code>InvalidStateError</code>。</p>\n<p>最后，别忘了将挑战等一些后续可能会用到的信息临时存储起来。Session 就是一个很好的选择。</p>\n<p>将所有信息发送到浏览器之后，我们应该可以构建出新建凭证所需的参数了。由于有多个参数需要以 <code>Uint8Array</code> 的形式传入，我们可以准备一个简单的工具函数帮我们将 Base64 的字符串转为 <code>Uint8Array</code>。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function str2ab(str){\r\n    return Uint8Array.from(window.atob(str), c=&gt;c.charCodeAt(0));\r\n}</pre>\n<p>除了 <code>challenge</code>, <code>rp</code>, <code>user</code> 和 <code>excludeCredentials</code> 几部分需要你根据具体情况设置外，上文提到的其他参数一般可以这么设置：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">publicKey: {\r\n    challenge, // 自行设置\r\n    rp, // 自行设置\r\n    user, // 自行设置\r\n    pubKeyCredParams: [\r\n        {\r\n            type: \"public-key\",\r\n            alg: -7 // ES256\r\n        },\r\n        {\r\n            type: \"public-key\",\r\n            alg: -257 // RS256\r\n        }\r\n    ],\r\n    authenticatorSelection: {\r\n        userVerification: \"discouraged\",\r\n        authenticatorAttachment: null // 除非用户指定，大部分情况下无需指定\r\n    },\r\n    excludeCredentials, // 自行设置\r\n    timeout: 60000\r\n}</pre>\n<p>然后就是传入 <code>navigator.credentials.create()</code>，拿到 <code>PublicKeyCredential</code>。如果一切顺利，接下来我们就需要考虑如何将返回的内容传回依赖方了。由于我们拿到的很多都是 <code>ArrayBuffer</code>，我们需要将其进行编码。再准备一个工具函数吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function array2b64String(a) {\r\n    return window.btoa(String.fromCharCode(...a));\r\n}</pre>\n<p>然后适当处理，我们就可以得到一个方便传输的 JSON 字符串了：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({publicKey}).then((credentialInfo) =&gt; {\r\n    const publicKeyCredential = {\r\n        id: credentialInfo.id,\r\n        type: credentialInfo.type,\r\n        rawId: array2b64String(new Uint8Array(credentialInfo.rawId)),\r\n        response: {\r\n            clientDataJSON: array2b64String(new Uint8Array(credentialInfo.response.clientDataJSON)),\r\n            attestationObject: array2b64String(new Uint8Array(credentialInfo.response.attestationObject))\r\n        }\r\n    };\r\n    return publicKeyCredential;\r\n}).then(JSON.stringify).then((authenticatorResponseJSON) =&gt; {\r\n    // 可以发送了\r\n}).catch((error) =&gt; {\r\n    console.warn(error); // 捕获错误\r\n})</pre>\n<p>依赖方收到数据以后，还需要做三件事：验证挑战、存储凭证 ID 和存储公钥。如果数据解码顺利，且收到的挑战和之前发送的一致，就可以认为注册成功，将凭证 ID 及公钥与用户关联起来。这一步有很多第三方库可以帮我们做，对于基础实现我们就不深入探究了。</p>\n<blockquote><p>由于不同厂商的认证器的实现方式不同，<strong>我们并不能保证凭证 ID 一定是全局唯一的</strong>，也就是说，凭证 ID 有可能碰撞——即使这些凭证实际上是不同的。依赖方在实现凭证 ID 的存储及查找时，需要注意和用户 ID 结合进行存储或查找，或是直接在注册认证器时在服务器端对比阻止相同的凭证 ID。</p></blockquote>\n<hr><p>接下来就可以进行验证了。某天，用户点击了验证按钮准备登录，于是浏览器发送了验证请求到依赖方，同时附上要登录的用户名。接下来依赖方至少需要发送两项内容给浏览器：<strong>挑战和用户已绑定的凭证 ID 列表（即 <code>allowCredentials</code>）。</strong></p>\n<p>之后前端的处理流程就和注册时基本一致了。只是需要注意验证流程中获取到的 <code>PublicKeyCredential</code> 的结构和注册时的稍有不同。</p>\n<p>当浏览器将数据传回后，依赖方需要做的事情就比之前要麻烦一些了。依赖方需要验证挑战，并用之前存储的公钥验证签名和签名计数。同样地，这一步有很多第三方库可以帮我们做。最后，如果验证全部通过，我们就可以允许用户登录了。</p>\n<p>到目前为止，我们已经实现了一个简单的 WebAuthn 验证服务。不过这只是一个最基础的实现，对于很多高安全要求的身份认证这是远远不够的。因此，我们需要摆脱对第三方库的依赖，深入了解 WebAuthn。你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分，不过对于基础的 WebAuthn 实现，我们的旅程就到这里了。</p>\n<h2>拓展阅读</h2>\n<p>如果你的目标只是快速了解如何开发 WebAuthn，那么你阅读到这里就可以了。同时，上一节例子中的部分代码来自于我为了这篇文章开发的 WordPress 插件 WP-WebAuthn，这个插件可以为你的 WordPress 启用 WebAuthn 无密码登录（并非二步验证），你可以查阅插件的 <a href=\"https://github.com/yrccondor/wp-webauthn\">GitHub 存储库</a>了解更多，也可以自己安装试一试。</p>\n<p>如果你正在使用 Chrome 开发，Chrome 87+ 版本添加了一个 WebAuthn 开发者面板，可以帮助你在没有任何实体验证器的情况下开发 WebAuthn 功能。你可以在 Google 的<a href=\"https://developers.google.com/web/tools/chrome-devtools/webauthn\">这篇文章</a>中了解更多。不够，如果你正在使用 Firefox，很遗憾目前我还没有找到对应的开发工具或是浏览器扩展可用。</p>\n<p>如果你希望了解更多关于非对称加密的数学证明，可以查阅阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">这篇文章</a>。</p>\n<p>如果你希望了解更多关于 Credential Management API 的信息，可以查阅<a href=\"https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe\">这篇文章</a>（英文）。</p>\n<p>如果你希望了解更多 WebAuthn 的细节，可以继续往下阅读。<span></span></p>\n<h1>深入了解 WebAuthn</h1>\n<p>如上文所说，如果摆脱对第三方库的依赖，或是要实现更安全的 WebAuthn，我们必须深入了解 WebAuthn。在这一部分中，我们会详细讨论上文没有提到的一些概念和参数，并了解 WebAuthn 中各类数据的结构以实现解码与验证。先来看一看一些进阶的选项吧。</p>\n<h2>进阶选项</h2>\n<p>没错，上文提到的传入 <code>navigator.credentials.create()</code> 和 <code>navigator.credentials.get()</code> 方法的参数其实只是所有参数的一部分。对于 <code>create()</code>，我们还可以配置这些可选内容（上文提及的已省略）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        rp: {\r\n            icon\r\n        },\r\n        user: {\r\n            icon\r\n        },\r\n        attestation,\r\n        authenticatorSelection: {\r\n            requireResidentKey\r\n        },\r\n        extensions\r\n    }\r\n})</pre>\n</pre>\n<ul>\n<li>\n<code>rp.icon: String</code> 和 <code>user.icon</code>：是的，你可以为依赖方和用户设置图标，可以使用 HTTPS URL 或 Base64，一般长度不能超过 128 字节，不过大部分浏览器不会显示图标，或是有非常小的图片体积限制，所以一般没有使用这一属性的必要</li>\n<li>\n<code>attestation: String</code>：表明依赖方是否需要证明。可选三个值：\n<ul>\n<li>\n<code>none</code>：（默认）不需要证明。如上文所述，依赖方不关心证明，因此认证器不会签名。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n<li>\n<code>indirect</code>：依赖方需要证明，但证明方式可由认证器选择。在支持匿名证明的认证器上，认证器会通过匿名证明的方式签名挑战，并向依赖方提供签名方式等信息</li>\n<li>\n<code>direct</code>：依赖方要求直接证明。此时认证器会使用烧录在认证器中的公钥进行签名，同时向依赖方提供签名方式等信息以供依赖方验证认证器是否可信。更多信息可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节</li>\n</ul>\n</li>\n<li>在 <code>authenticatorSelection</code> 中，我们还可以设置两个可选属性：\n<ul>\n<li>\n<code>authenticatorSelection.requireResidentKey: Boolean</code>：是否要求将私钥钥永久存储于认证器中。默认值为 <code>false</code>。对于 iOS/iPad OS 13，必须设置为 <code>false</code>，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n<li>\n<code>extensions: Object</code>：WebAuthn 扩展，可以提供规范之外的配置和响应。由于实际情况中很少会使用这一特性，我们不会在这篇文章中讨论它</li>\n\n<blockquote><p>将 <code>requireResidentKey</code> 设置为 <code>true</code> 可以实现无用户名的登录，即认证器同时替代了用户名和密码。需要注意的是，尽管大部分认证器可以实现无限对公私钥，<strong>但能永久存储的私钥数量是有限的</strong>（对于 Yubikey，这通常是 25），因此只应在真正需要的时候启用此特性。我们会在“<a href=\"https://flyhigher.top/#login-without-username\">无用户名登录</a>”一节中详细讨论原因。</p></blockquote>\n<blockquote><p><strong>如果你没有高安全需求（如银行交易等），请不要向认证器索取证明</strong>，即将 <code>attestation</code> 设置为 \"none\"。对于普通身份认证来说，要求证明不必要的，且会有浏览器提示打扰到用户。</p></blockquote>\n<blockquote><p>Android 暂时无法实施用户验证，进而会导致依赖方验证失败。你可以在<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=997538\">这里</a>追踪这个特性的实现情况。</p></blockquote>\n<blockquote>\n<p>对于 <code>extensions</code>，由于目前浏览器支持和应用范围有限，我们不会在这篇文章中涉及，不过你可以看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    uvm: true, // 要求认证器返回用户进行验证的方法\r\n    txAuthSimple: \"Please proceed\" // 在认证器上显示与交易有关的简短消息\r\n}</pre>\n<p>你可以在<a href=\"https://www.w3.org/2019/01/webauthn-extensions.html\">这个页面</a>了解更多关于 <code>extensions</code> 的信息。</p>\n</blockquote>\n<p>对于 <code>get()</code>，我们其实只有一个可选内容没讲了，即 <code>extensions</code>。和上文一样，我们不会在这篇文章中讨论它。</p>\n<p>就这些了！<span></span></p>\n<h2>手动解个码</h2>\n<p>是时候看看如何手动解码了。我们将会在这一节中讨论认证器返回的数据的结构以及如何正确地解码它们。</p>\n<p>首先我们来看看如何处理注册过程中认证器发回的数据。假设所有 <code>ArrayBuffer</code> 类型的值都被正确地以 Base64 编码，且后端已经将 JSON 的字符串解析为字典。先来复习一下，我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"ZRBkDBCEtq...9XY8atOcbg\",\r\n    type: \"public-key\",\r\n    rawId: \"ZRBkDBCEtq...9XY8atOcbg==\",\r\n    response: {\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...i5jcmVhdGUifQ==\",\r\n        attestationObject: \"o2NmbXRkbm9uZWd...xNHuAMzz2LxZA==\"\r\n    }\r\n}</pre>\n<p>这里的 <code>id</code> 就是凭证的 ID，如果验证正确，我们最终要将它存储起来并于用户关联。同时可以看到 Base64 编码后的 <code>rawId</code> 其实和 <code>id</code> 是一致的（不过 <code>id</code> 是 Base64URL 编码的）。而 <code>type</code> 则一定是 \"public-key\"。</p>\n<p>不过，我们主要关心的还是 <code>respose</code> 中的两项内容。首先是 <code>clientDataJSON</code>。它的处理比较简单，看名字就知道，它应该是一个 JSON 字符串。</p>\n<blockquote><p>小技巧：如果你看到一个 Base64 编码的字符串以 \"ey\" 开头，那么它大概率是一个 Base64 编码的 JSON。</p></blockquote>\n<p>将<code>clientDataJSON</code> Base64 解码再 JSON 解码之后我们就能得到一个字典：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"NI4i1vsNmP2KHcmyFnBCKRVQPfHgg34SsYZUOPZY2lM\",\r\n    extra_keys_may_be_added_here: \"do not compare clientDataJSON against a template. See https://goo.gl/yabPex\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>结构一目了然。在这里，我们需要验证三项内容：</p>\n<ul>\n<li>\n<code>challenge</code> 和之前发送的一致</li>\n<li>\n<code>origin</code> 为创建凭证的页面的源（协议+主机名+端口号，并非 URL）</li>\n<li>\n<code>type</code> 为 \"webauthn.create\"</li>\n</ul>\n<p>同时可以注意到有一个奇怪的 <code>extra_keys_may_be_added_here</code>。这其实是 Google 在 Chrome 中搞的一点小把戏，有一定概率会出现，提醒我们需要将 JSON 解析后再验证键值以防额外插入的键值影响验证。具体信息你可以访问那个 URL 看一看。</p>\n<p>对于 Firefox，我们会多得到两项 <code>clientExtensions</code> 和 <code>hashAlgorithm</code> ，分别指明了客户端扩展数据和签名算法。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"3-4\">{\r\n    challenge: \"dg6ost6ujhAA0g6WqLe-SOOH-tbhvjW9Sp90aPKlLJI\",\r\n    clientExtensions: {},\r\n    hashAlgorithm: \"SHA-256\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>由于本文不考虑扩展数据，因此我们可以不考虑 <code>clientExtensions</code>。同时由于目前规范中指定的签名算法只有 SHA-256 一种，因此现阶段我们也可以简单地忽略 <code>hashAlgorithm</code>。</p>\n<p><code>clientDataJSON</code> 很简单地就处理完了。接下来我们要来看看 <code>attestationObject</code>。先来看看 <code>attestationObject</code> 的结构图示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\" alt=\"attestationObject 的结构\" width=\"1056\" height=\"532\" class=\"aligncenter size-full wp-image-2245\"></a>\n<p><code>attestationObject</code> 是 CBOR 编码后再被 Base64 编码的，因此我们需要额外对其进行 CBOR 解码。</p>\n<blockquote><p>CBOR (Concise Binary Object Representation, 简明二进制对象表示) 是一种多应用于物联网领域的编码方式，你可以将它看作体积更小、更方便物联网传输的二进制 JSON。大部分语言都可以找到对应的 CBOR 解码库。</p></blockquote>\n<p>我们当然不会手解 CBOR，直接来看看解开之后的样子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"none\",\r\n    attStmt: {},\r\n    authData: [211, 217, 43, 24, 199, ..., 97, 238, 166, 67, 107]\r\n}</pre>\n<p>这些键值的含义如下：</p>\n<ul>\n<li>\n<code>fmt</code>：标明证明的格式。WebAuthn 预定义了几种格式，分别为：\n<ul>\n<li>\n<code>none</code>：没有证明</li>\n<li>\n<code>packed</code>：为 WebAuthn 优化的证明格式</li>\n<li>\n<code>android-safetynet</code>：Android 使用的格式</li>\n<li>\n<code>android-key</code>：又是 Android 使用的格式</li>\n<li>\n<code>fido-u2f</code>：FIDO U2F 认证器使用的格式</li>\n<li>\n<code>tpm</code>：TPM 可信平台模块使用的格式</li>\n</ul>\n</li>\n<li>\n<code>attStmt</code>：证明对象，具体格式根据 <code>fmt</code> 的不同会有所不同</li>\n<li>\n<code>authData</code>：包含公钥、签名计数等来自认证器的数据</li>\n</ul>\n<p>诶，例子里的 <code>attStmt</code> 怎么是空的？还记得之前说的吗？大部分情况下，<strong>如果依赖方不要求证明，那么认证器不会签名挑战</strong>，于是 <code>fmt</code> 会变为 \"none\"，<code>attstmt</code> 会为空。如果不是高安全要求，我们可以只对这一种情况做支持。</p>\n<blockquote><p>注意，部分情况下 Firefox 会在不要求证明（即 <code>attestation</code> 为 \"none\"）时会返回 <code>fmt</code> 为 \"packed\" 的证明。<strong>这是符合规范的。</strong>此时认证器会进行自证明，你可以视情况进行处理。具体可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>对于非 \"none\" 的 <code>fmt</code> 我们稍后再谈，现在我们先来看看 <code>authData</code>。来复习一下 <code>authData</code> 的结构：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\" alt=\"authData 的结构\" width=\"1056\" height=\"384\" class=\"aligncenter size-full wp-image-2240\"></a>\n<p>对于它的解码比较简单粗暴，我们要做的就是根据图示将它切开，然后适当地转换类型。其中各部分的含义如下：</p>\n<ul>\n<li>\n<code>rpIdHash</code>：如其名，SHA-256 的 <code>rpId</code>，长度 32 字节</li>\n<li>\n<code>flags</code>：标识认证状态，长度 1 字节。其中 8 位分别为：\n<ul>\n<li>\n<code>ED</code>：是否有扩展数据</li>\n<li>\n<code>AT</code>：是否包含 <code>attestedCredentialData</code>。通常注册认证器时会包含 <code>attestedCredentialData</code>，而验证时不包含</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>\n<code>UV</code>：用户是否已验证</li>\n<li>保留位</li>\n<li>\n<code>UP</code>：用户是否在场</li>\n</ul>\n</li>\n<li>\n<code>signCount</code>：签名计数，长度 4 字节</li>\n<li>\n<code>attestedCredentialData</code>：包含公钥等凭据数据，变长。其结构如下：\n<ul>\n<li>\n<code>aaguid</code>：认证器的 AAGUID (Authenticator Attestation GUID)，对于同一型号的认证器，它们的 AAGUID 是相同的</li>\n<li>\n<code>credentialIdLength</code>：标识 <code>credentialId</code> 的长度，长度 2 字节</li>\n<li>\n<code>credentialId</code>：凭证 ID，和 <code>rawId</code> 一致，长度由 <code>credentialIdLength</code> 定义</li>\n<li>\n<code>credentialPublicKey</code>：CBOR 编码的 COSE 格式的凭证公钥，变长</li>\n</ul>\n</li>\n<li>\n<code>extensions</code>：扩展数据，变长，本文不讨论</li>\n</ul>\n<blockquote><p>出于隐私考虑，如果不要求证明，认证器会以 0 填充 AAGUID。</p></blockquote>\n<p>如果你的后端在使用 Node.js，这里有个工具函数可以帮你完成这一步（不考虑 <code>extensions</code>）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function parseAuthData(buffer){\r\n    let rpIdHash = buffer.slice(0, 32);\r\n    buffer = buffer.slice(32);\r\n  \r\n    let flagsBuf = buffer.slice(0, 1);\r\n    buffer = buffer.slice(1);\r\n\r\n    let flagsInt = flagsBuf[0];\r\n    let flags = {\r\n        up: !!(flagsInt &amp; 0x01),\r\n        uv: !!(flagsInt &amp; 0x04),\r\n        at: !!(flagsInt &amp; 0x40),\r\n        ed: !!(flagsInt &amp; 0x80),\r\n        flagsInt\r\n    }\r\n\r\n    let counterBuf = buffer.slice(0, 4);\r\n    buffer = buffer.slice(4);\r\n  \r\n    let counter = counterBuf.readUInt32BE(0);\r\n\r\n    let aaguid = undefined;\r\n    let credID = undefined;\r\n    let COSEPublicKey = undefined;\r\n\r\n    if(flags.at) {\r\n        aaguid = buffer.slice(0, 16);\r\n        buffer = buffer.slice(16);\r\n\r\n        let credIDLenBuf = buffer.slice(0, 2);\r\n        buffer = buffer.slice(2);\r\n\r\n        let credIDLen = credIDLenBuf.readUInt16BE(0);\r\n        credID = buffer.slice(0, credIDLen);\r\n\r\n        buffer = buffer.slice(credIDLen);\r\n        COSEPublicKey = buffer;\r\n    }\r\n\r\n    return {rpIdHash, flagsBuf, flags, counter, counterBuf, aaguid, credID, COSEPublicKey}\r\n}</pre>\n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>解开后，依赖方至少需要做四件事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>存储签名计数</li>\n<li>存储公钥</li>\n</ol>\n<blockquote><p>签名计数不一定从 0 开始。</p></blockquote>\n<p>对于公钥，也就是 <code>credentialPublicKey</code>，我们需要多一次 CBOR 解码，然后就可以得到类似这样的公钥：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    kty: \"EC\",\r\n    alg: \"ECDSA_w_SHA256\",\r\n    crv: \"P-256\",\r\n    x: \"ZGQALNfqo0L7HFYQHFHCS/X5db49z0ePnuQEs3w3X8w=\",\r\n    y: \"6qYxhnjYuez/Q8N6vX7nIIGfxFWdZ25NzQfZYuYOalA=\"\r\n}</pre>\n<p>然后可以选择适当的方法将其存储起来，之后的步骤本文就不再赘述了。现在，将目光拉回来，让我们看看包含证明的 <code>attestationObject</code> 是怎么样的。我们来看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"packed\",\r\n    attStmt: {\r\n        alg: -7,\r\n        sig: [48, 70, 2, 33, 0, ..., 132, 78, 46, 100, 21],\r\n        x5c: [\r\n            [48, 130, 2, 189, 48, 130, 1, 165, 160, 3, ..., 177, 48, 125, 191, 145, 24, 225, 169, 41, 248]\r\n        ]\r\n    },\r\n    authData: [211, 217, 43, 24, 199, ..., 158, 54, 87, 126, 54]\r\n}</pre>\n<p>这里有一个使用 \"packed\" 格式的证明。此时，<code>attStmt</code> 中包含三个值：</p>\n<ul>\n<li>\n<code>alg</code>：签名算法</li>\n<li>\n<code>sig</code>：签名值</li>\n<li>\n<code>x5c</code>：X.509 编码的证书链</li>\n</ul>\n<p>我们不会在这一节中详述对签名的验证。要了解更多信息，你可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。现在，让我们来看看如何处理验证过程中认证器发回的数据。我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"hmqdxPLit9...BWeVxZqdvU\",\r\n    type: \"public-key\",\r\n    rawId: \"hmqdxPLit9V...BWeVxZqdvU=\",\r\n    response: {\r\n        authenticatorData: \"09krGMcWTf...UFAAAABA==\",\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...XRobi5nZXQifQ==\",\r\n        signature: \"UsXZV3pvT3np8btj6V0g...WBkaqyt88DrD40qh+A==\",\r\n        userHandle: \"MmYxNWYzZjQyZjM...Tg2ZDY4NzhlNw==\"\r\n    }\r\n}</pre>\n<p><code>id</code>, <code>rawId</code> 和 <code>type</code> 和之前一样，这里就不再赘述了。让我们来看看 <code>response</code>。首先是 <code>clientDataJSON</code>，和之前的解法一样，要验证的内容也一样，只是 <code>type</code> 从 \"webauthn.create\" 变成了 \"webauthn.get\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"bnkd2CmrEuvKnAFXs2QlC3SKlg4XFvGtP4HJL1yEWyU\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.get\"\r\n}</pre>\n<p>然后是 <code>userHandle</code>。前面讲过，这是认证器在创建凭证时的用户 ID。如果用户在使用 U2F 认证器，很可能这一项为空，所以大部分情况下我们不关心这一项。</p>\n<p>接着来看 <code>authenticatorData</code>。这其实就是之前的 <code>attestedCredentialData</code>，只是这次不包含公钥。以相同的方式切开数据，我们应该可以得到 <code>rpIdHash</code>, <code>flags</code>和 <code>signCount</code> 三项。此时，依赖方至少需要做这三样事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>验证签名计数大于之前存储的计数，并更新存储的计数</li>\n</ol>\n<blockquote><p>如果签名计数比之前的小，那么这个认证器很可能是伪造的，应该中止验证并返回验证失败。同时，签名计数不一定每次按 1 递增，通常只要计数比此前的大就认为计数检查通过。</p></blockquote>\n<p>最后，我们来看 <code>signature</code>，也就是签名。不过这个签名不是简单的对挑战的签名，具体算法如图所示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\" alt=\"签名过程\" width=\"1034\" height=\"587\" class=\"aligncenter size-full wp-image-2231\"></a>\n<p>计算签名时，认证器会将 <code>authenticatorData</code> 与 <code>clientDataHash</code>（也就是 <code>clientDataJSON</code> 的 SHA-256 Hash）拼接起来，并使用对应的私钥签名。依赖方应该使用对应的公钥将其解密，并验证内容是否是 <code>authenticatorData</code> 与 <code>clientDataHash</code> 的拼接。这部分的计算不在本文的讨论范围内。</p>\n<p>最后，如果全部验证通过，返回验证成功。<span></span></p>\n<h2>验证认证器</h2>\n<p>WebAuthn 已经很安全了，但有的时候我们还要让它更安全一点。比如，如果用户在使用伪造的或是自制的认证器，认证器的安全性就得不到保证。此时，依赖方就需要验证认证器是否是可信的认证器。</p>\n<blockquote><p>这一过程仅发生在注册认证器时。此时，如果认证器验证通过，就可以存储公钥，后续步骤和之前描述的一致。</p></blockquote>\n<blockquote><p>再次说明，如果不是对安全性有极高的要求，向认证器索取证明以验证认证器是否可信是没有必要的。此外，验证认证器需要依赖方自行维护可信认证器列表，大大增加了维护的复杂性。</p></blockquote>\n<p>在调用 <code>navigator.credentials.create()</code> 时，我们可以将 <code>attestation</code> 设置为非 \"none\" 来向认证器索取证明。除无证明外，WebAuthn 定义了四种证明方式：</p>\n<ul>\n<li>Basic Attestation (Basic) ：基础的证明方式，认证器会使用认证器私钥签名</li>\n<li>Self Attestation (Self) ：自证明，认证器会使用凭证私钥签名</li>\n<li>Attestation CA (AttCA) ：认证器会使用多个证明私钥之一签名</li>\n<li>Elliptic Curve based Direct Anonymous Attestation (ECDAA) ：通过 <a href=\"https://en.wikipedia.org/wiki/Direct_Anonymous_Attestation\">DAA</a> 实现的匿名证明</li>\n</ul>\n<blockquote><p>和验证过程一样，这里签名的目标是 <code>authenticatorData</code> 和 <code>clientDataHash</code> 的连接。</p></blockquote>\n<p>还记得 <code>create()</code> 时 <code>attestation</code> 可选的三个值吗？这个值会决定认证器最终使用哪种方式进行证明。复习一下：</p>\n<ul>\n<li>\n<code>none</code>：大部分情况下认证器会选择不进行证明，部分认证器会进行自证明。此时 AAGUID 会被 0 填充</li>\n<li>\n<code>indirect</code>：认证器会试图通过替换 AAGUID 和选择合适的证明方式来进行匿名证明，具体方式由认证器选择</li>\n<li>\n<code>direct</code>：认证器会提供最直接的证明信息</li>\n</ul>\n<p>注意，大部分情况下，当认证器需要向依赖方证明自己可信时需要提供认证器公钥，<strong>这会触发浏览器提示，只有用户同意后认证器才会进行证明，否则认证器将不提供证明。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\" alt=\"浏览器提示\" width=\"446\" height=\"283\" class=\"aligncenter size-full wp-image-2217\"></a>\n<blockquote><p>为什么浏览器会说“安全密钥的品牌和型号”？事实上，为了避免用户通过认证器证书被跨依赖方追踪，FIDO 要求使用相同认证器证书的认证器的数量不能少于 100,000。于是大部分认证器厂商会选择<strong>让同一型号的认证器共用同一份证书。</strong>因此，浏览器的会询问用户是否同意“查看安全密钥的品牌和型号”。</p></blockquote>\n<blockquote><p>Android Safety Net 不会向用户询问是否同意，而是会静默进行证明。</p></blockquote>\n<p>当证明不为空时，依赖方收到数据后根据 <code>attestationObject.fmt</code> 的不同，需要选择不同的验证方式来验证认证器的可信情况。出于篇幅原因，这里我们不会讨论每一种 <code>fmt</code> 的验证方式，更多信息你可以查阅 <a href=\"https://www.w3.org/TR/webauthn/#defined-attestation-formats\">W3C 文档</a>。</p>\n<p>当 <code>fmt</code> 为 <code>packed</code> 时，<code>attestationObject.attStmt</code> 可能会有三种格式：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">// 自证明\r\n{\r\n    alg, // 算法\r\n    sig // 签名\r\n}\r\n// 基础或证明 CA 证明\r\n{\r\n    alg,\r\n    sig,\r\n    x5c // X.509 证书链\r\n}\r\n// 椭圆曲线证明\r\n{\r\n    alg,\r\n    sig,\r\n    ecdaaKeyId // ECDAA-Issuer 公钥标识符\r\n}</pre>\n<p>此时，依赖方需要检查证书符合预期格式并检查证书是否在可信链上。首先，如果证明中既没有 <code>ecdaaKeyId</code> 也没有 <code>x5c</code>，就说明这个证明使用的是自证明，只需使用认证器提供的公钥验证即可；如果有 <code>x5c</code>，那么就需要验证 <code>x5c</code> 中的证书是否在可信链上。将 <code>x5c</code> 中的每个证书以 Base64 编码，按 64 个字符切开，并在头尾加上 <code>-----BEGIN CERTIFICATE-----</code> 和 <code>-----END CERTIFICATE-----</code>就能得到一个证书字符串了。之后，依赖方需要验证证书是否可信。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function base64ToPem(b64cert){\r\n    let pemcert = '';\r\n    for(let i = 0; i \n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>至于 <code>ecdaaKeyId</code>，由于目前应用较少，处理方法可能需要你另寻资料了。检查证书的具体步骤已经超出了本文的范围，具体可以查阅<a href=\"https://medium.com/@herrjemand/verifying-fido2-packed-attestation-a067a9b2facd\">这篇文章</a>（英文）。</p>\n<blockquote><p>你可以在 <a href=\"https://fidoalliance.org/metadata/\">FIDO Metadata Service</a> 找到各大厂商认证器的可信证书链。</p></blockquote>\n<p>当在 Android 上调起 WebAuthn 时，大部分情况下 <code>fmt</code> 将会为 <code>safety-net</code>。此时 <code>attestationObject.attStmt</code> 的结构会是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    ver: \"200616037\",\r\n    response: {\r\n        type: \"Buffer\",\r\n        data: [101, 121, 74, 104, 98, ..., 115, 104, 104, 82, 65]\r\n    }\r\n}</pre>\n<p>此时，<code>clientDataJSON</code> 中还会出现 <code>androidPackageName</code> 键，值是调起 WebAuthn 验证的应用的包名，如 Chrome 就是 \"com.android.chrome\"。</p>\n<p>在这个证明中，<code>data</code> 其实是一个 JWT 字符串，我们可以将它编码为字符串并将其按照 JWT 进行解码（别忘了验证 JWT 签名）。最终我们会得到一个类似这样的 Payload：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    nonce: \"0QAurN4F9wik6GEkblDJhGuf4kuaqZn5zaaxlvD1hlA=\",\r\n    timestampMs: 1584950686460,\r\n    apkPackageName: \"com.google.android.gms\",\r\n    apkDigestSha256: \"2BQHno+bmWWwdLUYylS8HLt5ESJzci3nt2uui71ojyE=\",\r\n    ctsProfileMatch: true,\r\n    apkCertificateDigestSha256: [\r\n        \"8P1sW0EPicslw7UzRsiXL64w+O50Ed+RBICtay2g24M=\"\r\n    ],\r\n    basicIntegrity: true,\r\n    evaluationType: \"BASIC\"\r\n}</pre>\n<p>其中包含了有关设备状态的一些信息。比如说，如果 <code>ctsProfileMatch</code> 为 <code>false</code>，那么该设备很有可能被 root 了。对于高安全要求的场景，我们可以视情况进行验证。</p>\n<p>同时我们可以在 JWT Header 中验证证明的有效性。我们应该能取得这样的 Header：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    alg: \"RS256\",\r\n    x5c: [\r\n        \"MIIFkzCCBHugAwIBAgIR...uvlyjOwAzXuMu7M+PWRc\",\r\n        \"MIIESjCCAzKgAwIBAgIN...UK4v4ZUN80atnZz1yg==\"\r\n    ]\r\n}</pre>\n<p>这里的结构就和上方的 <code>x5c</code> 验证类似了。具体步骤可以参考<a href=\"https://medium.com/@herrjemand/verifying-fido2-safetynet-attestation-bd261ce1978d\">这篇文章</a>（英文）。</p>\n<p>其他所有格式的验证方式也都可以在<a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">这篇文章</a>（英文）中找到。<span></span></p>\n<h2>无用户名登录</h2>\n<p>认证器已经代替了密码，可是这还不够！在进行第一因素认证（即使用 WebAuthn 登录）时，我们还是需要输入用户名，然后才能进行身份认证。懒惰是第一生产力，我们能不能不输入用户名就进行身份认证呢？实际上，大部分认证器都允许我们无用户名登录。<strong>而这一特性的核心就是 Resident Key 客户端密钥驻留。</strong></p>\n<p>你可以思考一下，为什么普通的 WebAuthn 为什么不能实现无用户名登录？事实上，大部分认证器为了实现无限对公私钥，会将私钥通过 Key Warp 等技术加密后包含在凭证 ID 中发送给依赖方，这样认证器本身就不用存储任何信息。不过，这就导致需要身份认证时，依赖方必须通过用户名找到对应的凭证 ID，将其发送给认证器以供其算出私钥。</p>\n<blockquote><p>Yubikey 实现了一个基于 HMAC 的算法，认证器可以在私钥不离开认证器的前提下（常规的 Key Warp 算法中实际上私钥离开了认证器）通过一些输入和凭证 ID 重新计算私钥，你可以阅读<a href=\"https://www.yubico.com/blog/yubicos-u2f-key-wrapping/\">这篇文章</a>了解更多。</p></blockquote>\n<blockquote><p>客户端通过凭证 ID 查找对应认证器的算法根据系统的不同是不同的。通常凭证 ID 中会包含认证器信息，因此系统可以通过凭证 ID 找到对应的认证器。</p></blockquote>\n<p>要避免输入用户名，我们可以要求认证器将私钥在自己的内存中也存储一份。这样，依赖方无需提供凭证 ID，认证器就可以通过依赖方 ID 找到所需的私钥并签名公钥。以下是具体流程：</p>\n<p>注册时：</p>\n<ol>\n<li>依赖方请求新建凭证，同时要求启用客户端密钥</li>\n<li>认证器生成一对公私钥，并将私钥存储在永久内存中且与依赖方 ID 及用户 ID 绑定，随后将公钥发送给依赖方以供存储</li>\n<li>依赖方将用户 ID 即公钥与用户绑定</li>\n</ol><p>验证时：</p>\n<ol>\n<li>依赖方请求验证，但不必提供除依赖方 ID 以外的更多信息</li>\n<li>用户选择认证器</li>\n<li>认证器根据依赖方 ID 找到对应私钥</li>\n<li>如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录</li>\n<li>确定私钥后，认证器签名挑战并将其返回，同时返回用户 ID</li>\n<li>依赖方通过用户 ID 找到对应用户并用对应公钥检查签名，正确则允许对应用户登录</li>\n</ol><blockquote><p>可以看到，这个特性同时要求认证器存储用户 ID，即上面提到过的 <code>userHandle</code>。依赖方需要根据此信息找到对应用户，因此不支持 <code>userHandle</code> 的 U2F 认证器无法进行无用户名登录。</p></blockquote>\n<blockquote><p>如之前所说，<strong>认证器能永久存储的私钥数量是有限的</strong>，因此只应在真正需要无用户名登录的时候启用此特性。</p></blockquote>\n<blockquote><p>目前暂时没有办法检测认证器是否支持客户端密钥驻留，因此在无用户名验证失败时应 fallback 至常规的 WebAuthn 验证，即向用户询问用户名。</p></blockquote>\n<p>现在让我们来看看如何实现这一特性吧。首先，调用 <code>navigator.credentials.create()</code> 时我们需要注意两个参数：<code>requireResidentKey</code> 必须为 <code>true</code>，<code>userVerification</code> 必须为 \"required\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"5-6\">navigator.credentials.create({\r\n    publicKey: {\r\n        ...\r\n        authenticatorSelection: {\r\n            requireResidentKey: true,\r\n            userVerification: \"required\"\r\n            ...\r\n        },\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Windows Hello <strong>似乎</strong>会存储所有已注册的凭据，因此无论是否指定 <code>requireResidentKey</code>，你都可以通过 Windows Hello 进行无用户名登录。</p></blockquote>\n<p>随后，浏览器会询问用户是否允许认证器存储私钥。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\" alt=\"浏览器提示\" width=\"445\" height=\"285\" class=\"aligncenter size-full wp-image-2208\"></a>\n<p>如果用户同意，认证器会存储私钥，并和普通的 WebAuthn 一样返回信息。不过，依赖方收到数据之后，只需将公钥、用户 ID 与用户关联起来，而不必再将凭证 ID 与用户关联起来。至此注册完成。</p>\n<p>之后，在用户请求登录时，无需再向依赖方提供用户名。同时在传入 <code>navigator.credentials.get()</code> 的参数中也有两个需要注意：<code>userVerification</code> 必须为 \"required\"，同时 <code>allowCredentials</code> 必须为空。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"4-5\">navigator.credentials.get({\r\n    publicKey: {\r\n        ...\r\n        userVerification: \"required\",\r\n        allowCredentials: [],\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Android 暂不支持无用户名验证，空的 <code>allowCredentials</code> 会导致浏览器返回 <code>NotSupportedError</code> 错误。</p></blockquote>\n<p>此时，认证器会根据依赖方 ID 找到对应的私钥。如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录。用户选择后，认证器就会使用对应的私钥签名挑战并将其返回。此时，<code>userHandle</code> 一定不为空。</p>\n<p>依赖方收到数据后，需要将 <code>userHandle</code> 作为用户 ID 找到对应的用户，并使用对应的公钥验证签名。如果验证成功，则认为对应的用户身份认证成功，依赖方可以允许其登录。至此验证结束。</p>\n<blockquote><p>有的时候你可能会需要清除认证器中的密钥。绝大多数认证器都提供了对应的软件以供清除存储的密钥，但大部分情况下这会重置整个认证器，这意味着相关认证器此前的所有凭证均会失效。因此建议不要将日常使用的认证器作为开发测试用的认证器。</p></blockquote>\n<h2>从 U2F 认证迁移</h2>\n<p>如果你的服务此前提供了 U2F 第二因素认证，你可能会希望在将依赖方从 U2F 升级到 WebAuthn 时用户此前注册的 U2F 认证器仍然可用而无需重新注册。由于 WebAuthn 向后兼容 U2F 设备，用户是可以继续使用原有的 U2F 认证器的。不过，由于 WebAuthn 的依赖方 ID 与 U2F 的 <code>appid</code> 并不一定相同，你需要将原有的 U2F <code>appid</code> 随 WebAuthn 流程一起传递给认证器，认证器才能使用正确的私钥进行响应。</p>\n<p>要实现这一点，我们只需要在注册及认证仪式中使用 WebAuthn 的 <code>appid</code> 扩展。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    appid: \"https://example.com\" //U2F appid\r\n}</pre>\n<p>此时认证器便可以得到正确的私钥，之后的流程与正常情况一致；依赖方除了正常的 WebAuthn 流程外，不需要再做任何其它操作。</p>\n<h2>拓展阅读</h2>\n<p>我们的 WebAuthn 之旅到这里就真的结束了。不过，你仍然可以自行探究，了解更多。<strong>本文只是一个粗浅的使用指南</strong>，而被称为“Web 身份认证的未来”的 WebAuthn 的深层还要很多细节值得我们挖掘学习，不过本文不会再继续讨论了。</p>\n<p>如果你想了解更多关于 WebAuthn 的信息，最好的方法是直接阅读 <a href=\"https://www.w3.org/TR/webauthn\">W3C 规范</a>。此外，Yubico 也提供了不错的 <a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn 文档</a>。</p>\n<p>要了解更多认证器存储凭证的信息，你可以阅读<a href=\"https://duo.com/labs/tech-notes/how-security-keys-store-credentials\">这篇文章</a>（英文）。</p>\n<p>如果你想了解更多 Android Safety Net 是怎样运作的，可以观看<a href=\"https://youtu.be/8lv_9mydrjg\">这个视频</a>，并通过 <a href=\"https://developer.android.com/training/safetynet/attestation\">Google 的文档</a>了解 Android Safety Net 的更多信息。</p>\n<p>如果你想方便地调试 WebAuthn，<a href=\"https://webauthn.me/\">webauthn.me</a> 提供了一个非常直观方便的<a href=\"https://webauthn.me/debugger\">调试器</a>。</p>\n<h1>参考资料</h1>\n<p><a href=\"https://www.w3.org/TR/webauthn\">WebAuthn Level 1 规范 - W3C</a><br><a href=\"https://github.com/w3c/webauthn\">WebAuthn Level 2 草案 - W3C</a><br><a href=\"https://blog.techbridge.cc/2019/08/17/webauthn-intro/\">一起来了解Web Authentication - TechBridge 技术共笔部落格</a><br><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\">Introduction to WebAuthn API - Medium</a><br><a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">WebAuthn/FIDO2: Verifying responses - Medium</a><br><a href=\"https://obeta.me/posts/2019-03-01/WebAuthn%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8\">WebAuthn介绍与使用 - obeta</a><br><a href=\"https://webauthn.io/\">webauthn.io</a><br><a href=\"https://webauthn.guide/\">webauthn.guide</a><br><a href=\"https://webauthn.me/\">webauthn.me</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion\">Attestation and Assertion - MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Authentication_API\">Web Authentication API - MDN</a>（顺便翻译了一半）<br><a href=\"https://fidoalliance.org/fido-technotes-the-truth-about-attestation/\">FIDO TechNotes: The Truth about Attestation - FIDO Alliance</a><br><a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn Developer Guide - Yubico</a><br><a href=\"https://en.wikipedia.org/wiki/WebAuthn\">WebAuthn - Wikipedia</a><br><a href=\"https://techcommunity.microsoft.com/t5/identity-standards-blog/all-about-fido2-ctap2-and-webauthn/ba-p/288910\">All about FIDO2, CTAP2 and WebAuthn - Microsoft Tech Community</a><br><a href=\"https://webauthn-doc.spomky-labs.com/\">Webauthn Framework</a><br><a href=\"https://zhuanlan.zhihu.com/p/25279015\">如何开发支持 FIDO U2F 登录的网站 - 知乎专栏</a><br></p></pre>\n","link":"https://flyhigher.top/develop/2160.html"},{"title":"NLP 找门：用朴素贝叶斯进行文本分类","date":"2020-01-29 11:39:58","description":"\n<blockquote>\n<p>有一天，神收到了一封垃圾邮件，于是世界上就有了朴素贝叶斯算法。</p>\n<footer>——我瞎编的</footer>\n</blockquote>\n<p>为什么这篇文章的标题是 NLP 找门呢？因为如果你看完了这篇文章，你就可以<strong>准备入门</strong>自然语言处理 (<strong>N</strong>atural <strong>L</strong>anguage <strong>P</strong>rocessing) 了。我会把这篇文章当作一篇彻彻底底的 NLP 入门文章来写，尽量避免“专业高端”词汇和“全是奇怪符号”的式子，这样<strong>只要你有高中数学基础</strong>，就能毫无压力地看完这篇文章，学会使用朴素贝叶斯分类算法分类文本。</p>\n<p>让我们开始吧。</p>\n<h1>所以，啥是朴素贝叶斯？</h1>\n<p>简单来说，朴素贝叶斯 (Naïve Bayes) <strong>是一个简单但高效的分类算法</strong>，在进行不复杂的文本分类时高效且拥有不低的准确度，判断垃圾邮件就是用朴素贝叶斯进行文本分类的一个经典例子。当然朴素贝叶斯分类不仅能用在 NLP 中，在许多分类问题中朴素贝叶斯也有非常好的效果，但我们今天只关注它在 NLP 中的应用。</p>\n<p>要了解朴素贝叶斯，我们要先来了解一下贝叶斯定理。</p>\n<blockquote>\n<p>每增加一个数学公式都会使读者减半。</p>\n<footer>——霍金</footer>\n</blockquote>\n<p>那么，就让我们先来看看贝叶斯定理的公式吧（笑</p>\n<p>$$P(A|B) = \\frac{P(AB)}{P(B)} = \\frac{P(B|A)P(A)}{P(B)}$$</p>\n<p>其实还是很简单的，运用高中的条件概率知识就能理解。本质上，贝叶斯定理给出了一种方法，使得我们可以在 \\(P(A|B)\\) 和 \\(P(B|A)\\) 之间互相转换，因为通常情况下它们是不一样的。</p>\n<p>要更好地理解，请考虑这样一个例子：</p>\n<blockquote><p>假设有一个学校图书馆，图书管理员正为找不到某本书而发愁。已知老师有 70% 的意愿借走这本书，而是学生的意愿是 30%，这个学校的师生比例是 1:10，那么借走这本书的人是老师的概率有多大？</p></blockquote>\n<p>设学校总人数为 \\(T\\)，我们可以很容易地写出这样的一个式子：</p>\n<p>$$\\begin{align} P &amp; = \\frac{T\\cdot\\frac{1}{11}\\cdot 70\\%}{T\\cdot\\frac{1}{11}\\cdot 70\\%+T\\cdot\\frac{10}{11}\\cdot 30\\%} \\\\ &amp; = \\frac{70\\%}{70\\%+10\\times30\\%} \\\\ &amp; = \\frac{7}{37} \\end{align}$$</p>\n<p>这就是贝叶斯定理了！等等，你可能会挠挠头，这哪里是贝叶斯了？别急，如果我们把最上面的式子换个字母的话...</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>在这里，\\(H\\) 指 Hypothesis，即假设，而 \\(E\\) 指 Evidence，即证据。这样，这个式子就很好理解了，在我们上面的例子里，借走书是证据，那么 \\(P(E)\\) 就是某个人选择借走这本书的概率；这个人是老师是假设，那么这个人是老师的概率是 \\(P(H)\\)。<strong>注意这里的概率指在学校中抽一个人是老师的概率，并不是“在借走书的前提下”这个人是老师的概率</strong>，而“在借走书的前提下”这个人是老师的概率应该是 \\(P(H|E)\\)，也正是我们要求的概率。同样地，而“这个人是老师”的前提下借走书的概率就是 \\(P(E|H)\\) 了。</p>\n<p>那么再来看看上面我们凭小学知识就列出的计算式，如果把里面的具体数据换成概率来表示的话，这个式子就会变成...</p>\n<p>$$P(H|E) = \\frac{T\\cdot P(E|H)P(H)}{T\\cdot P(E|H)P(H) + T\\cdot P(E|\\neg H)P(\\neg H)}$$</p>\n<p>好吧，这里解释一下，\\(\\neg\\) 符号表示“非”，所以 \\(P(E|\\neg H)\\) 表示在“这个人不是老师”的前提下借走书的概率。而 \\(T\\cdot P(E|H)P(H)\\) + \\(T\\cdot P(E|\\neg H)P(\\neg H)\\)，即“可能借走书的老师的数量 + 可能借走书的学生的数量”，就是“可能借走书的人的数量”了，也就是 \\(T\\cdot P(E)\\)。上下消去 \\(T\\)，我们就能得到上面的式子了。</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>这就是贝叶斯了定理。如果你还是不太清楚，可以去看看 3Blue1Brown 的<a href=\"https://www.bilibili.com/video/av84799361\">这个视频</a>，图形化的讲解会清晰很多。</p>\n<p>这里我要提一下这个式子里各部分的专有名称了（“专业高端”词汇警告），你可以不记住，直接看后面。</p>\n<ul>\n<li>\\(P(H|E)\\) 叫做 \\(H\\) 的<strong>后验概率</strong>，反之亦然</li>\n<li>\\(P(H)\\) 叫做 \\(H\\) 的<strong>先验概率</strong>，反之亦然</li>\n<li>特别地，我们把 \\(P(E|H)\\) 称作<strong>“似然值”</strong>，即 likelihood</li>\n</ul>\n<p>那什么是朴素贝叶斯呢？按上面所说的，朴素贝叶斯是一种分类算法。简单来说，朴素贝叶斯将一个对象的各个特征考虑为互相独立，然后根据这些特征的概率的乘积来判断对象所属的分类。基本原理如下：</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)} \\propto P(E|H)P(H) = P(H)\\prod_{i}P(W_i|H)$$</p>\n<p>在这里，\\(W_i\\) 指某一对象的第 \\(i\\) 个特征，对于文本分类来说，这就是一段文本中的某个单词。</p>\n<p>朴素贝叶斯之所以“朴素”，是因为它要求<strong>各个特征间是独立的</strong>，在文本分类中也就是各个单词之间互不干扰。虽然思路简单的代价是适用范围变窄，不过由于这样的简化在很多情况下已经足够了，因此实际上朴素贝叶斯的应用范围非常广。<del>你看朴素贝叶斯 <strong>N</strong>aïve <strong>B</strong>ayes 的缩写都是 NB 了，能不厉害吗（逃</del></p>\n<h1>那么，咋分类啊</h1>\n<p>看来你这下完全听懂了呢（笑），是时候看看如何在 NLP 中应用朴素贝叶斯了。和上面一样，我们用一个具体的例子来说明。我们的目标是让电脑学会分类美国共和党和民主党的演讲稿，由于两个党派的演讲风格不同，所以这样的分类在理论上是可行的。</p>\n<div class=\"wp-block-file\">\n<a href=\"https://acdn.flyhigher.top/nlp/material.zip\" download>material.zip</a><a href=\"https://acdn.flyhigher.top/nlp/material.zip\" class=\"wp-block-file__button\" download>下载</a>\n</div>\n<p>上面我们要用到的数据集，你可以下载下来一起动手玩一玩。先说一下数据集的数据结构吧，压缩包里有两个文件，<code>train.txt</code> 将会被当作训练数据集，而 <code>test.txt</code> 则会作为训练结束后的验证数据集。两个文本文件里数据的结构是类似的，就像这样：</p>\n<pre class=\"EnlighterJSRAW\">BLUE WELL I AM SO HONORED AND PERSONALLY UNKNOWNWORD TO BE HERE...\r\nRED THANK YOU . THIS IS QUITE AN INSTITUTION . IT'S GOOD TO BE...</pre>\n<p>每行都是一篇演讲稿，每行的第一个单词指明了这篇演讲稿所属的党派，<code>RED</code> 指共和党，而 <code>BLUE</code> 指民主党。所有单词和符号都已经被转为大写并由空格分隔方便处理。<code>train.txt</code> 有共和党演讲稿和民主党演讲稿各 23 篇，<code>test.txt</code> 有 6 篇共和党演讲稿，12 篇民主党演讲稿。</p>\n<p>明白了？那我们就开始吧。</p>\n<h2>捋捋思路</h2>\n<p>首先，我们需要考虑如何在文本分类中应用朴素贝叶斯。很简单，按朴素贝叶斯的思路，<strong>计算每个词在某一分类下的出现概率，然后将某篇文章的所有词的概率相乘，再乘以该分类的先验概率，就可以得到某篇文章在某一分类下的概率。</strong></p>\n<p>$$P(Class|Article) = P(Class)\\prod_{i}P(Word_i|Class)$$</p>\n<p>各个分类概率都计算完成后，概率最高的那个分类就是这篇文章可能所属的分类。这个思路的核心就是用词决定了文本风格，文本的不同类别用词会有差异，只要能量化这些差异就可以分类文本。在我们的例子中，我们可以从 <code>train.txt</code> 中统计各个词汇的出现情况，然后用 <code>test.txt</code> 中的数据按上面的算法验证我们算法的准确性。</p>\n<p>这个思路很简单也很清晰，但还有一些问题需要解决。<strong>第一，有的时候，我们的测试数据集中可能会出现一个在训练数据集中没有出现过的词语。这个时候，朴素贝叶斯的计算结果会是 0。</strong>如果我们把 0 乘进式子中，那就别想得到正常的结果了。所以，我们还需要对计算某一单词在某一分类中的式子稍加改进。使用拉普拉斯平滑，就可以避免出现概率为 0 的情况。别被名字吓到，拉普拉斯平滑是一种非常简单的平滑方法：在分子上 +1，在分母上加整个取值范围，这样就可以给整个分式加上非常微小的偏移，避免出现 0。</p>\n<p>$$\\begin{align} P(Word_i|Class) &amp; = \\frac{Word_iCountInClass}{AllWordCountInClass} \\\\ &amp; \\approx \\frac{Word_iCountInClass + 1}{AllWordCountInClass + UniqueWordCount} \\end{align}$$</p>\n<p><strong>第二，对于长文本，大部分词语在某一分类中的出现概率是远小于 1 的，加上长文本词汇量大，往往概率相乘的结果会非常小。</strong>受限于计算机处理浮点数的原理，精确处理这么小的数字是很麻烦的。幸好，运用一些简单的数学知识就可以将其转化为更精确的表达，<strong>那就是取对数。</strong></p>\n<p>首先，将概率计算结果取对数并不影响我们的计算结果。因为取对数是一个单调递增的操作，而我们计算概率只是为了排序选择概率最高的分类，因此取对数是不影响我们排序的。而把多项式取对数，等于把多项式的每一项取对数后相加。所以我们有：</p>\n<p>$$\\lg{\\Big(P(Class)\\prod_{i}P(Word_i|Class)\\Big)} = \\lg{P(Class)} + \\sum_i\\lg{P(Word_i|Class)}$$</p>\n<p>大部分情况下，在每一次取对数的时候，要取对数的数字的大小，即 \\(P(Word_i|Class)\\) 尚还在计算机能处理的范围内，<strong>因此我们可以放心地使用取对数的方法</strong>，避免计算机精度不够影响结果。</p>\n<p><strong>第三就是在某些情况下，可能会有部分词语干扰计算结果</strong>，如 and, is 这类的被大量使用的中性词。如果希望得到更好的结果，我们可以维护一个停用词表，在计算时排除停用词即可。或者，我们可以在计算完每个单词的出现数量后，排除数量最多的前 \\(N\\) 个单词，避免这些单词过多地影响计算。</p>\n<h2>写点代码</h2>\n<p>现在我们终于可以开始实战，写点代码了。我会用简单的 Python 来表达思路。好了，理一理思绪，第一步我们要做的，是统计训练数据集中的用词情况。具体来说，根据上面的思考，我们需要统计的有：</p>\n<ul>\n<li>每个单词在各分类中出现的数量</li>\n<li>各分类中的不重复词数量</li>\n</ul>\n<p>用 Python 简单表示如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\"># 读入数据过程略...\r\ndata_raw = \"读入的数据\".split('\\n') # 按行分隔\r\ndata_blue = []\r\ndata_red = []\r\nword_count_blue = {}\r\nword_count_red = {}\r\n\r\nfor line_data in data_raw:\r\n    word_list = line_data.split(\" \") # 分隔单词\r\n    if word_list[0] == \"BLUE\":\r\n        for i in range(1,len(word_list)):\r\n            if not is_excluded(word_list[i]): # 判断是否为停用词\r\n                data_blue.append(word_list[i])\r\n                # 统计单词出现次数\r\n                word_count_blue.setdefault(word_list[i], 0)\r\n                word_count_blue[word_list[i]] += 1\r\n    elif word_list[0] == \"RED\":\r\n        # Class = red 时同理...\r\n\r\n#统计非重复词\r\nunique_words_blue = list(set(data_blue))\r\nunique_words_red = list(set(data_red))</pre>\n<p>训练过程到这里就结束了，计算机已经知道了各政党演讲的用词习惯。很简单吧？接下来我们就要使用测试数据集来测试准确度了。<strong>这里开始就涉及到朴素贝叶斯的计算了</strong>，可能会稍微复杂一点点。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">import math\r\n#读入测试数据过程略...\r\ntest_data_raw = \"读入的数据\".split('\\n') # 按行分隔\r\ntest_data = []\r\n\r\nfor line_data in test_data_raw:\r\n    if line_data[0] == \"BLUE\":\r\n        content_data = line_data.split(\" \").pop(0)\r\n        test_data.append({\"class\": \"blue\", \"content\": content_data})\r\n    elif line_data[0] == 'RED':\r\n        # ...\r\n\r\nfor line_data in test_data:\r\n    posibility_blue = 0\r\n    for word in line_data[\"content\"]:\r\n        # 计算各单词概率，取对数后相加，使用了拉普拉斯平滑\r\n        if word in word_count_blue:\r\n            posibility_blue += math.log((word_count_blue[word]+1)/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n        else:\r\n            posibility_blue += math.log(1/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n    # 最后加上该分类概率的对数\r\n    posibility_blue += math.log(len(data_blue)/(len(data_blue)+len(data_red)))\r\n\r\n    # 计算 Red 同理...</pre>\n<p>计算完成后，我们就得到每篇演讲稿在各分类下的概率了。之后，简单的比较就能得出推断的分类：如果 \\(P(Red|Article)\\) 大于 \\(P(Blue|Article)\\)，那么这篇演讲稿就更可能是共和党的演讲稿，反之则是民主党的演讲稿。</p>\n<p>很好理解吧？那么这么简单的思路，准确性怎么样呢？对于我们的例子，这是我设置了个别停用词后的结果：</p>\n<pre class=\"EnlighterJSRAW\">+-----+-------+--------------+--------------+-------+-------+\r\n|   ID|  Class|        P(Red)|       P(Blue)|  Guess| Status|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|    1|   Blue|  -23204.68377|  -22998.67066|   Blue|      √|\r\n|    2|   Blue|  -16438.44625|  -16137.48257|   Blue|      √|\r\n|    3|   Blue|  -33468.81214|  -32567.61801|   Blue|      √|\r\n|    4|   Blue|    -8606.2193|   -8601.50426|   Blue|      √|\r\n|    5|   Blue|  -12430.97436|  -11935.70662|   Blue|      √|\r\n|    6|   Blue|  -44033.02883|  -43877.55367|   Blue|      √|\r\n|    7|   Blue|   -16947.2851|  -16758.57542|   Blue|      √|\r\n|    8|   Blue|  -26957.26997|  -26889.62444|   Blue|      √|\r\n|    9|   Blue|  -27503.73985|  -27249.21828|   Blue|      √|\r\n|   10|   Blue|   -20528.4457|   -19991.1248|   Blue|      √|\r\n|   11|   Blue|  -20337.96493|  -19860.12831|   Blue|      √|\r\n|   12|   Blue|  -28409.28489|  -28118.98017|   Blue|      √|\r\n|   13|    Red|  -13756.01015|  -14488.11751|    Red|      √|\r\n|   14|    Red|  -17221.22732|  -17710.15936|    Red|      √|\r\n|   15|    Red|  -17397.45136|  -17899.98659|    Red|      √|\r\n|   16|    Red|  -10724.69095|  -11092.77837|    Red|      √|\r\n|   17|    Red|  -10402.40027|  -10859.48681|    Red|      √|\r\n|   18|    Red|   -9371.53792|    -9669.6769|    Red|      √|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|                                      Total: 18/18, 100.0% |\r\n+-----------------------------------------------------------+</pre>\n<p><strong>100% 的准确率哦！</strong>事实上，对于我们的这个例子，就算不设置停用词，我们仍能达到 100% 的分类准确率。朴素贝叶斯分类的确很 NB 呢。</p>\n<h1>更进一步</h1>\n<p>我们的探索到这里就结束了，但如果你有兴趣，完全可以继续探索下去。我们的例子是一个非常简化的例子，在实际情况中，还有很多问题需要解决。比如，对于中文及类似语言，不存在拉丁语系的天然分词结构，而朴素贝叶斯的文本分类是基于单词的，那么<strong>中文的分词就会是个问题；</strong>再比如，对于朴素贝叶斯分类来说，<strong>词语之间的顺序是不影响分类结果的</strong>，但这就会导致“今天心情很好，但昨天不好”和“昨天心情很好，但今天不好”在朴素贝叶斯看来是一样的，要想获得更好的结果，我们必须<strong>考虑词语的顺序。</strong></p>\n<p>这些问题，今天我们就不再深究了，但你可以自己探索。比如，引入思路同样很简洁的马尔科夫链，我们就可以让计算机学会考虑词语间的顺序，不过那就会是另一个话题了。</p>\n","link":"https://flyhigher.top/develop/1989.html"},{"title":"MDx 中增强页面可访问性的细节","date":"2020-01-25 16:45:04","description":"\n<blockquote><p>这篇文章本来是打算发在 <a href=\"https://mdxblog.flyhigher.top/\">MDx Blog</a> 的，不过写到后来发现这篇文章相对来说还是有价值的，于是就将这篇文章转移到了无垠，MDx Blog 则不再发表这篇文章。</p></blockquote>\n<p>从 MDx 开发之初，增强页面的可访问性就被列为了一个重要目标。从 HTML 语义化，到 ARIA 地标，再到 <code>prefers-reduced-motion</code>，随着浏览器对于增强页面可访问性的支持功能越来越多，MDx 也在不断地更新，让更多的人都能毫无困难地浏览、查看由 MDx 渲染的网页。本文会详细说明一些 MDx 中增强页面可访问性的细节，<strong>如果你希望增强自己开发的网页的可访问性，本文可能会对你有所帮助。</strong></p>\n<h1>基础性增强</h1>\n<p>增强可访问性，最重要也是最基础的一点就是 HTML 语义化。通过使用 HTML 5 语义化标签和 ARIA Role 标签，我们可以很方便地<strong>将整个网页在语义上分为几部分，而这将有效地改善屏幕阅读器对网页的分析质量，使视力障碍用户更好地浏览网页。</strong></p>\n<h2>HTML 语义化</h2>\n<p><strong>HTML 语义化属于增强页面可访问性的基础中的基础。</strong>通过使用语义化的 HTML 标签，我们可以方便地为网页中的各部分标记功能而不影响页面样式。随着符合 HTML 5 的现代化网页成为主流，语义化标签已被很大一部分网站所支持，我也不过多赘述了。就举几个常用的“地标性”标签吧：</p>\n<ul>\n<li>\n<code>header</code> 标签标记页眉，默认样式同 <code>div</code>，不要把它和 <code>head</code> 搞混了</li>\n<li>\n<code>main</code> 标签标记页面的主要内容，默认样式同 <code>div</code>\n</li>\n<li>\n<code>article</code> 标签标记文章（在 HTML 5 中它指任何独立或可复用的文本），默认样式同 <code>div</code>\n</li>\n<li>\n<code>footer</code> 标签标记页脚，默认样式同 <code>div</code>\n</li>\n<li>\n<code>nav</code> 标签标记页面导航栏区域，默认样式同 <code>div</code>\n</li>\n<li>\n<code>aside</code> 标签标记侧栏，默认样式同 <code>div</code>\n</li>\n<li>\n<code>section</code> 标签标记“一组内容”，你可以把它看作是划定网页中一块区域的通用标签，默认样式同 <code>div</code>\n</li>\n</ul>\n<p>只要用这些标签替代 <code>div</code> 而不是无脑使用 <code>div</code> 就能提高页面的可访问性。MDx 使用了这些标签来增强页面的可访问性。</p>\n<h2>下一步，ARIA</h2>\n<p>有的时候，出于一些原因，我们没法使用语义化的 HTML 标签，或者没有合适的语义化标签来标记内容，这时候<strong>我们就需要使用 ARIA (Accessible Rich Internet Applications，可访问的富互联网应用)。</strong>ARIA 的基础用法很简单，只要在相应元素上加上 <code>role</code> 属性指定该元素的功能即可。下面是一个简单的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;div role=\"navigation\"&gt;\r\n  &lt;ul&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page A&lt;/a&gt;&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page B&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page C&lt;/a&gt;&lt;/li&gt;\r\n  &lt;/ul&gt;\r\n&lt;/div&gt;</pre>\n<p>通过 <code>role=\"navigation\"</code>，我们把一个 <code>div</code> 标记为了导航栏区域。实际上，对屏幕阅读器来说，这和 <code>nav</code> 标签在语义上是一致的。上一节中的例子都可以分别用以下 ARIA Role 表示：</p>\n<ul>\n<li><code>role=\"heading\"</code></li>\n<li><code>role=\"main\"</code></li>\n<li><code>role=\"article\"</code></li>\n<li><code>role=\"contentinfo\"</code></li>\n<li><code>role=\"navigation\"</code></li>\n<li><code>role=\"complementary\"</code></li>\n<li><code>role=\"region\"</code></li>\n</ul>\n<p>除此以外，MDx 还使用了 <code>role=\"banner\"</code> 和 <code>role=\"search\"</code> 来分别标记页面中的顶部栏和搜索表单。另外，<strong>有的时候 <code>role</code> 属性还需配合 <code>aria-*</code> 属性一同使用</strong>，具体规则比较复杂，我就不在这里赘述了，具体可参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">WAI-ARIA Roles - MDN</a>。</p>\n<h1>媒体查询来帮忙</h1>\n<p>CSS 的媒体查询其实是一个非常强大的特性，<strong>妥善利用其中的一些特性，我们可以在网页外观上大大增强网页的可访问性。</strong>除了已经烂大街的“对浏览器窗口大小”响应的媒体查询，我会介绍 3 个很少有网站充分利用的媒体查询。</p>\n<h2>print</h2>\n<p><code>print</code> 媒体查询其实已经“历史悠久”了，<strong>只要使用 <code>@media print {...}</code> 就可以创建只在打印页面时生效的样式。</strong>通过这种方式，我们可以让页面在打印时应用一套为打印优化的样式，增强页面在物理纸张上的可访问性。</p>\n<blockquote><p>维基百科是对打印样式做了单独适配的著名例子。</p></blockquote>\n<p><strong>由于在打印的情况下，页面已经离开了“可交互”的范围，还有分页这种在屏幕中无需考虑的问题，要让页面在物理纸张上仍能被轻松地阅读，我们需要做一些特殊的适配。</strong>直接来看一个例子吧。以下是 MDx 针对打印情况进行的一些特殊优化，样式的具体理由已经写在了注释中。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media print {\r\n    /*隐藏不必要的元素*/\r\n    header, .mdx-ad-after-article, .mdx-ad-in-article, .mdx-post-money, .page-footer-nav, .mdx-same-posts, .spanout button, .mdui-drawer, .mdui-overlay, .mdui-menu, .mdx-share-img-dialog, .mdx-share-wechat-dialog {\r\n        display: none!important;\r\n    }\r\n\r\n    /*使用下划线标记链接*/\r\n    article a {\r\n        text-decoration: underline!important;\r\n    }\r\n    /*由于纸张不可交互，在链接后显示链接到的 URL*/\r\n    article a::after {\r\n        content: \"(\" attr(href) \")\";\r\n    }\r\n\r\n    /*强制白底黑字*/\r\n    html &gt; body {\r\n        background-color: white!important;\r\n    }\r\n    article p {\r\n        color: rgba(0,0,0,.8)!important;\r\n    }\r\n\r\n    /*对于纸张上的长文章，衬线字体拥有更好的可读性。以下字体列表来自 fonts.css*/\r\n    article {\r\n        font: 13pt Georgia, \"Nimbus Roman No9 L\", \"Songti SC\", \"Noto Serif CJK SC\", \"Source Han Serif SC\", \"Source Han Serif CN\", STSong, \"AR PL New Sung\", \"AR PL SungtiL GB\", NSimSun, SimSun, \"TW\\-Sung\", \"WenQuanYi Bitmap Song\", \"AR PL UMing CN\", \"AR PL UMing HK\", \"AR PL UMing TW\", \"AR PL UMing TW MBE\", PMingLiU, MingLiU, serif!important;\r\n    }\r\n\r\n    /*除部分元素外，禁止在元素内部分页*/\r\n    * {\r\n        page-break-inside: avoid;\r\n    }\r\n    article p, article a, #comments, article {\r\n        page-break-inside: auto;\r\n    }\r\n}</pre>\n<p>MDx 自 1.9.3 版本起已经包含了对文章页的打印样式优化。可以很容易地看出，优化后的样式在物理纸张上将更容易阅读。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\" alt=\"\" width=\"1345\" height=\"1602\" class=\"aligncenter size-full wp-image-1959\"></a>\n<h2>prefers-color-scheme</h2>\n<p><code>prefers-color-scheme</code> 是最近才被浏览器广泛支持的一个媒体查询，但它的功能却很强大：<strong>响应系统级黑暗模式。</strong>这样，我们可以在开启黑暗模式的系统中让网页具有更好的可读性。不过由于这个媒体查询直到最近才被广泛支持，因此大部分网站对此并没有进行适配。</p>\n<blockquote><p>一些适配这一特性的网站：少数派、微信公众平台（文章页）等。</p></blockquote>\n<p>通过像这样的媒体查询，我们可以在系统启用黑暗模式时让页面实时响应：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    body {\r\n        background-color: #212121;\r\n        color: rgba(255, 255, 255, .7);\r\n    }\r\n}</pre>\n<p><code>prefers-color-scheme</code> 一共有 3 个可能值：<code>no-preference</code>, <code>light</code> 和 <code>dark</code>。你也可以不像上面的例子那样默认使用亮色样式并在黑暗模式下启用黑暗样式，而可以反过来将黑暗样式作为默认，用亮色样式覆盖。在不支持的浏览器上将会显示默认样式（即媒体查询不会生效）。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<h2>prefers-reduced-motion</h2>\n<p>看名字就猜得出，<code>prefers-reduced-motion</code> 是和 <code>prefers-color-scheme</code> 师出同门的媒体查询。因此，和 <code>prefers-color-scheme</code> 一样，它也是在最近才获得了浏览器的广泛支持。它的作用也很强大：<strong>响应系统的“减弱动态效果”模式。</strong>这对某些不喜欢甚至无法接受动画的用户可能很有帮助。要知道，对有些用户来说这甚至是医疗上的必要。使用如下的媒体查询，我们可以在系统启用减弱动态效果模式时让页面实时响应，减弱动画：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-reduced-motion: reduce) {\r\n    /*只是一个示例，实际情况中可以保留一些淡入淡出效果*/\r\n    * {\r\n        transition: all 0s!important;\r\n        transform: none!important;\r\n    }\r\n}</pre>\n<p><code>prefers-reduced-motion</code> 只有 2 个可能值：<code>no-preference</code> 和 <code>reduce</code>，在不支持的浏览器上该媒体查询不会生效。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\" alt=\"\" width=\"792\" height=\"515\" class=\"aligncenter size-full wp-image-1962\"></a>\n<h1>黑暗模式适配</h1>\n<p>黑暗模式可不是简单地切换到黑底白字这么简单。<strong>单纯地使用黑底白字会导致页面元素之间对比度过高，文字刺眼，反而降低了页面的可访问性。</strong>我在下面总结了几条应用在了 MDx 中的黑暗模式优化规则和 Google 推荐的优化规则：</p>\n<p><strong>一是避免黑底白字。</strong>黑底白字看起来真的很难受，事实上，深灰和浅灰是黑暗模式最好的配色。比较下方例子里的两段文本，毫无疑问深灰色背景和浅灰色文字搭配的样式的可读性要比黑底白字高很多。（p.s. 有时候这条规则在白底黑字时也适用）</p>\n<p><strong>二是更改部分元素的亮度和对比度以增强可读性。</strong>你可能已经注意到了，下面优化的例子里标题文字的颜色改变了。很明显，未优化的黑暗模式中标题可读性不如优化的版本。在实际中，我们通常可以通过 CSS 滤镜来实现这一更改。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    h1 {\r\n        /*反相颜色后再将色相旋转 180 度，使亮度反相*/\r\n        filter: invert(1) hue-rotate(180deg);\r\n    }\r\n}</pre>\n<p><strong>三是避免让图片过亮。</strong>未经处理的图片通常会导致过高的对比度，降低可读性。在 MDx 中，我选择降低图片的亮度来避免图片刺眼，而 Google 的建议则是使图片灰度，不过这会影响图片的整体观感。无论是哪一种方案，都可以使用 CSS 滤镜来轻松实现。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    img { \r\n        /*MDx 方案*/\r\n        filter: brightness(.8);\r\n        /*Google 方案*/\r\n        filter: grayscale(.5);\r\n    }\r\n}</pre>\n<div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是未优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是经过优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n</div>\n<h1>其他细节</h1>\n<p>还有一些细节，虽然简单，但不可或缺。我把一部分没有在上文提到的 MDx 中的细节列在了这里。</p>\n<p><strong>一是允许页面缩放。</strong>在开发响应式页面时，很多网站会在页面头部添加这样一个 <code>meta</code>：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"&gt;</pre>\n<p>这样的 <code>meta</code> 设定了页面的宽度，却也固定了页面的缩放比例，用户难以手动放大网页。<strong>这样的设置对一部分视力障碍用户非常不友好</strong>，以至于苹果决定在自家的浏览器上忽略禁止缩放的 <code>meta</code>。按照 Google 的推荐，如果你在 MDx 设置中启用了“允许页面缩放”，那么 MDx 会输出这样的 <code>meta</code> 标签，允许页面进行五倍以内的缩放：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=5\"&gt;</pre>\n<p><strong>尽管很多时候放大页面会导致页面结构被破坏，但这大大增强了页面的可访问性，利大于弊。</strong>因此，在 MDx 中，“允许页面缩放”是默认启用的。</p>\n<p><strong>二是在跨设备阅读时同步阅读记录。</strong>这属于 MDx 的“元老级”功能之一。注意到页面右上角的那个“在其他设备上继续阅读”的按钮了吗？如果你滚动页面后重新点击它，你会发现二维码发生变化了。通过在二维码中记录阅读进度，用户在扫描二维码切换设备阅读时，MDx 在新设备上会自动滚动到和原设备上一致的位置——好吧，目前基于百分比的算法在某些情况下可能不太准，但我已经设计了一个更复杂但更精确的阅读进度记录算法，之后就会更新到 MDx 中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\" alt=\"\" width=\"1000\" height=\"574\" class=\"aligncenter size-full wp-image-1976\"></a>\n<p><strong>三是避免 Web 字体阻塞渲染。</strong>如果你在页面中使用了 Web 字体，在字体加载完成之前，浏览器可能不会渲染任何文本，这就导致用户可能需要等待一段时间才能开始浏览网页。Google 推荐使用 <code>font-display: swap;</code> 来向浏览器指定网页的 Web 字体渲染策略。这一规则会提供一个比较短的等待周期，如果在这段时间内 Web 字体没有完成加载，那么浏览器会以 fallback 字体渲染文本。任意时刻一旦 Web 字体完成渲染，浏览器就会使用 Web 字体重新渲染文本。这在大多数情况下都能满足可访问性的需求。</p>\n<p><strong>四是确保 html 元素具有合适的 <code>lang</code> 属性。</strong>这一属性声明了页面的主要语言，浏览器可以据此调整渲染策略，或者触发自动翻译；屏幕阅读器也能更好地阅读网页。</p>\n<p><strong>五是确保页面主要内容在丢失/禁用了 Javascript 甚至 CSS 的情况下仍然可用。</strong>作为一个以内容为主的网站，MDx 在禁用了 Javascript 的情况下页面主要内容仍然可用。这不只是为了 SEO，更是为了保证页面的可访问性。的确，目前的情况下，如果开启了 Lazyload，MDx 在禁用 Javascript 的情况下图片的确无法显示，但我会在后续版本中尽可能的优化这一问题。</p>\n<h1>附录：媒体查询开发技巧</h1>\n<p>有的时候，光有 CSS 响应媒体查询还不够，我们可能需要在 Javascript 中实时响应媒体查询。用如下代码就可以很简单地响应媒体查询：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">let mql = window.matchMedia(\"(prefers-reduced-motion: reduce)\");\r\nmql.addListener(handleMediaChange);\r\n\r\n//在添加监听后先调用一次，获得当前查询结果\r\nhandleMediaChange(mql);\r\n\r\nfunction handleMediaChange(mql){\r\n    if(mql.matches){\r\n        //查询匹配\r\n    }else{\r\n        //查询不匹配\r\n    }\r\n}</pre>\n<p>在开发上述媒体查询的过程中，我们需要频繁地切换系统的相应模式或者调出打印窗口。<strong>实际上，Chrome 提供了更简单的调试方法：</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1946\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\" alt=\"\" width=\"723\" height=\"681\"></a>\n<p>只要在这里更改模式，相关媒体查询就能实时生效。这不会影响其他标签页，在关闭开发者工具之后也会自动恢复系统设置。</p>\n","link":"https://flyhigher.top/develop/1912.html"},{"title":"MDx Blog 现已随 MDx 1.9.5 发布","date":"2020-01-22 17:54:11","description":"<p>随着 MDx 发布 1.9.5 更新，<a href=\"https://mdxblog.flyhigher.top/\" rel=\"noopener noreferrer\" target=\"_blank\">MDx Blog</a> 现已建立。我将会在 MDx Blog 中分享一些开发故事并发布 MDx 更新日志。</p>","link":"https://flyhigher.top/diary/1905.html"},{"title":"GitHub 2019 统计无垠版","date":"2020-01-12 13:02:00","description":"\n<h1>缘起</h1>\n<p>2019 年底，我突发奇想想要自己统计一番 GitHub 上存储库的一些信息。尽管 GitHub 有自己的<a href=\"https://octoverse.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">年度统计</a>，我还是想试着自己爬取一下，说不定能挖出什么有意思的信息，何况这是我第一次有机会处理比较大量的数据，也算是一种学习的过程吧。于是花了一下午写了个简单的爬虫（时间都花在增加 Rate Limit 上了...），然后扔在了两台服务器上开始跑（GitHub  API 真是好文明）。</p>\n<p>从 2019.11.21 3 时到 2020.1.12 24 时的 52 天 21 小时内，我的爬虫一共爬取了<strong>与 2,024,705 个用户有关<sup>*</sup>的 14,651,923 个公共存储库的基础信息</strong>，平均每秒爬取 3.2 个存储库。据 GitHub 的官方数据计算，我爬取了大约 15% 的存储库信息，但由于封禁库和私有库的数量未知，我暂时无法确定我爬取的存储库占公共库的比例。同时由于存储库数量较多，基本可以认为爬取到的样本在时间尺度上已经足够随机，可以通过统计得出一般结论。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\" alt=\"\" width=\"700\" height=\"606\" class=\"aligncenter size-full wp-image-1892\"></a>\n<p>爬到自己了，合影.jpg</p>\n<p>那么下面就来看看统计出来的一些结果吧。爬虫的技术细节和数据集下载放在文末。</p>\n<p>* 指这些用户拥有至少一个库</p>\n<h1>统计信息</h1>\n<p><strong>以下统计结果均基于已放于文末的数据集。</strong>由于爬虫爬取的时间跨度长，加上我并没有完整爬取 GitHub 所有存储库，因此我<strong>不能保证以下统计结果符合真实情况</strong>，各位可以下载数据集或自行爬取进行验证。</p>\n<h2>一些数据</h2>\n<div>\n<div>\n<div>\n<span>3,120,930</span><br>总爬取用户数</div>\n<div>\n<span>44.7%</span><br>的存储库创建<br>自 Fork</div>\n<div>\n<span>6.59%</span><br>的账户被删除或<br>封禁<sup>1</sup>\n</div>\n<div>\n<span>23,913</span><br>单用户拥有最大<br>库数量<sup>2</sup>\n</div>\n</div>\n</div>\n<p><sup>1</sup> 基于用户 ID 规律合理推断<br><sup>2</sup> 统计范围仅限于当前数据集</p>\n<p>比较出乎我意料的是创建自 Fork 的存储库的占比。我预估这样的存储库占比不会太低，但没有想到能接近一半。此外单用户拥有最大库数量也大大超出了我的预期，<a href=\"https://github.com/pombredanne\" rel=\"noopener noreferrer\" target=\"_blank\">pombredanne</a> 这个用户名下拥有将近 24k 的存储库，不过绝大多数都是 Fork 来的，在情理之中。此外<strong>这个数据集中</strong>拥有最多存储库的账户其实是一个组织 <a href=\"https://github.com/gitpan\" rel=\"noopener noreferrer\" target=\"_blank\">gitpan</a>，这个组织拥有 36,377 个存储库。</p>\n<h2>语言</h2>\n<p><canvas></canvas><br>\n首先必须要说明的是，在这个榜单中我<strong>排除了 HTML 和 CSS</strong>，因为在严格意义上它们不属于“编程语言”。如果把它们计算进来的话，分别有 640,368 个和 361,425 个存储库的主要语言分别是 HTML 和 CSS，这样在这份榜单中它们可以排到第 6 和 第 10 名。JavaScript 毫无疑问获得第一，第二名 Python 的热度则和 JavaScript 相差将近一半。<strong>此外还有 2,448,486 个存储库未能识别出语言，占比 16.7%。</strong>在上面的榜单之外，与机器学习和数据科学相关的语言还有 Jupyter Notebook 排名第 13，R 排名 20，Julia 排名 43。</p>\n<p>说实话这份排名和 GitHub 官方的排名<strong>差别很大</strong>，除了前三名，后面的基本都不太一样。我的排名统计结果完全基于 GitHub 对于存储库的主要语言识别，加上我的存储库数据不完整，和官方的数据不同是很正常的，可以做一个参考，但大概率还是官方排名更加准确。</p>\n<h2>许可证</h2>\n<p><canvas></canvas></p>\n<p>自 GitHub 推出许可证功能以来，拥有许可证的存储库比例升升降降，却始终没有超过一半。<strong>选择一个合适的许可证对项目的良好发展真的很有帮助</strong>，要了解如何选择合适的许可证，请参阅<a href=\"https://www.runoob.com/w3cnote/open-source-license.html\" rel=\"noopener noreferrer\" target=\"_blank\">这篇文章</a>。</p>\n<p><canvas></canvas></p>\n<p>对于拥有许可证的存储库，MIT<del> 麻省理工许可证 </del>总是占比最大的；第二则是 Apache-2.0 许可证。此外，WTFPL 许可证也挤入了前 15 名。</p>\n<h2>星标</h2>\n<p><canvas></canvas><br>\nStar 数量毫无疑问是一个存储库受欢迎程度的体现，而 Star 数高的项目基本上大家都了解过。<strong>截至爬取结束时间</strong>，GitHub 中 Star 数最多的库是 <a href=\"https://github.com/freeCodeCamp/freeCodeCamp\" rel=\"noopener noreferrer\" target=\"_blank\">freeCodeCamp</a> <del>非常完美的驼峰命名法</del>，其次则是著名项目 <a href=\"https://github.com/996icu/996.ICU\" rel=\"noopener noreferrer\" target=\"_blank\">996.ICU</a>。<a href=\"https://github.com/vuejs/vue\" rel=\"noopener noreferrer\" target=\"_blank\">Vue</a> 现在的 Star 数已经稳压 <a href=\"https://github.com/facebook/react\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> 一头，Vue YES! 此外 <a href=\"https://github.com/sindresorhus/awesome\" rel=\"noopener noreferrer\" target=\"_blank\">awesome</a> 也挤进第七名。<br><canvas></canvas><br>\n由于 Star 需要时间积累，新项目的 Star 数量很可能是比不过老项目的，这就会导致有实力的新项目无法出现在榜单中。因此我还统计了日均 Star 数，试图通过日均 Star 数来反映项目受欢迎的程度。<strong>由于正热门的项目会比老牌热门项目有优势，这一项的统计范围是 2020-01-01 之前的所有存储库。</strong>996.ICU 和 freeCodeCamp 再次出现在前 10 名，而最近的热门项目 <a href=\"https://github.com/wenyan-lang/wenyan\" rel=\"noopener noreferrer\" target=\"_blank\">wenyan</a> 则飙升至第 2 名。此外还有 <a href=\"https://github.com/menzi11/BullshitGenerator\" rel=\"noopener noreferrer\" target=\"_blank\">BullshitGenerator</a>，即最近热门的“狗屁不通文章生成器”和 <a href=\"https://github.com/evil-huawei/evil-huawei\" rel=\"noopener noreferrer\" target=\"_blank\">evil-huawei</a> 分列第 3 和第 5 名。<br><canvas></canvas><br>\n说实话这个曲线<strong>比我预估的陡多了。</strong>你可能已经注意到了，这个图表的横轴不是均匀缩放的，实际上曲线要比看起来陡很多。同时受爬取方式的影响，GitHub 中 Star 数较少的存储库数量远比我爬取到的多。也就是说，<strong>实际情况下曲线远比这个图表上的陡。</strong>拿点 Star 不容易啊。</p>\n<h2>名称</h2>\n<p><canvas></canvas><br>\n终于知道了原来存储库的名称是有长度限制的...尽管最长有 100 位，<strong>大部分人还是喜欢 8 位长的存储库名。</strong>此外 1 位长的名称也比我预估的要多一些。举几个存储库名称长度为 100 的例子吧。</p>\n<ul>\n<li>testing-something-elsetesting-something-elsetesting-something-elsetesting-something-elsetesting-some</li>\n<li>acts_as_validated_config_so_app_will_not_run_in_random_situation_and_qa_gays_will_not_cry_to_you_whe</li>\n<li>............................................________-....................................-.---......</li>\n<li>----------------------------------------------------------------------------------------------------</li>\n<li>nyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyan</li>\n</ul>\n<p>...创造力有够丰富的。</p>\n<p><canvas></canvas></p>\n<p>最近 GitHub 上有一种奇怪的风气，那就是建立 Awesome 合集<del>骗 Star</del>。看起来 Awesome 存储库满地都是，甚至还出现了关于 Awesome 的 Awesome 合集这种迷惑行为。于是我统计了一下，<del>还好，</del>占比<del>才</del> 0.5% 不到<del>，Awesomer 们任重而道远呐</del>。</p>\n<p><canvas></canvas></p>\n<p>尽管要在 github.io 上托管网站，存储库不一定要以 .github.io 结尾，但我还是统计了一下。拥有这类存储库的用户比我预想的要少一些，看来还有很多人没有完全发挥 GitHub 的完整实力啊<del>（比如我 Doge）</del>。同时<strong>这类存储库在所有存储库中占比 1.12%</strong>，看起来不多<del>，不过至少比 Awesome 多</del>。<br><canvas></canvas><br>\n看得出来 GitHub 对于用户名长度的限制是 1-40 位。用户名最短的 27 位占据了 <code>A-Z</code> 外加 <code>-</code> 的所有可能，而用户名最长的则是一个组织 <a href=\"https://github.com/UOIT-RESEARCH-database-information-group\" rel=\"noopener noreferrer\" target=\"_blank\">UOIT-RESEARCH-database-information-group</a>。不知道是巧合还是某种规律，<strong>最受欢迎的用户名长度和存储库名称长度一样，都是 8</strong>，有点意思。</p>\n<h2>创建时间</h2>\n<p><canvas></canvas><br>\n由于我并没有完整爬取所有存储库，我只能以相对值来统计每月新增存储库数量的变化趋势。<strong>在这个图表中，我将 2017-09 的数据设为了 100%。</strong>你一定一眼就能注意到 2017 年 6,7,8 月的“一柱擎天”。<del datetime=\"2020-02-05T09:18:30+00:00\">我第一次看到这个数据的时候的确愣了一下，不过就着这条新闻看就能明白为什么了：<strong>2017 年 6 月微软收购 GitHub。</strong></del></p>\n<blockquote><p>重新确认了一下，微软收购 GitHub 比这个高峰晚了一年，目前我对这个高峰没有什么很好的解释，如果你有什么思路的话欢迎评论。</p></blockquote>\n<p><strong>需要注意的是这张图表中我排除了 Fork 存储库</strong>，因为 Fork 存储库在 API 中的创建时间是原始存储库的时间，会影响整体趋势。此外，GitHub 中还有一个创建于 2007 年 10 月 29 日的存储库，那就是 <code>id: 1</code> 的...</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"mojombo\" data-mdxgithubp=\"grit\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/mojombo/grit\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>而它的创建者正是 GitHub 的创始人之一 Tom Preston-Werner。</p>\n<h1>一些有趣的结果</h1>\n<p>当初打算自己爬的目的之一就是想看看能不能挖出什么有意思的信息，结果真的有一些不挖不知道的信息。</p>\n<h2>奇怪的存储库</h2>\n<p>在爬取到的所有存储库中，<strong>有 3 个存储库是“无主”的</strong>，即它们的 owner 属性为空。这三个存储库的基本信息如下。</p>\n<div class=\"mdui-table-fluid mdui-table-hoverable\"><table class=\"mdui-table\">\n<thead><tr>\n<th>ID</th>\n<th>名称</th>\n<th>Forked</th>\n<th>Star</th>\n<th>语言</th>\n<th>许可证</th>\n<th>创建于</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>72385291</td>\n<td>vscode-redprl</td>\n<td>否</td>\n<td>10</td>\n<td>TypeScript</td>\n<td>apache-2.0</td>\n<td>2016-10-31 08:50:01</td>\n</tr>\n<tr>\n<td>181218346</td>\n<td>electron-sys</td>\n<td>否</td>\n<td>10</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-14 03:20:56</td>\n</tr>\n<tr>\n<td>181391880</td>\n<td>node-sys</td>\n<td>否</td>\n<td>6</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-15 09:33:08</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong>更奇怪的是这三个存储库“无主”的情况还不一样。</strong>第一个存储库可以通过 <code>/repositories</code> 这个 GitHub API 找到， <a href=\"https://api.github.com/repositories?since=72385290\" target=\"_blank\" rel=\"noopener noreferrer\">这个链接</a>中的第一个存储库就是它；而其余两个存储库甚至无法在 <code>/repositories</code> API 中找到。不过就算能在 API 中找到第一个存储库，它的 <code>html_url</code>，即 <code>https://github.com//vscode-redprl</code> 仍然是不可访问的。这可能是 GitHub 早期的一个 Bug 导致的，不过我仍然对爬虫是如何找到这三个存储库的以及这些 Stars 是哪里来的感到好奇。</p>\n<h2>奇怪的用户名</h2>\n<p>在爬虫爬了一段时间以后，API 中突然开始出现大量的以 fdp 开头的 18 位乱码作为用户名的用户。这些用户拥有的存储库和 starred 的存储库都为 0，而他们的 <code>html_url</code> 为 404。以下是几个例子。</p>\n<ul>\n<li>fdpEpolGCEdQX4ZlRJ</li>\n<li>fdp8XaVrdtmDZnO5pR</li>\n<li>fdp8XRAGnwAOkTr2Ya</li>\n</ul>\n<p>由于我的爬虫并没有超过 Rate Limit，所以我排除了这是污染数据的可能。我怀疑这可能是某种 Bot 账户，于是一边更新爬虫过滤掉了这些用户，一边给 GitHub 支持发邮件问了具体情况。过了两天 GitHub 回复我说这些是<strong>被自动判为可疑进而被封禁的用户</strong>（原话是 they have been flagged by our automated measures for detecting suspicious behavior）。<del>想到我正在疯狂爬取 GitHub，突然害怕.webp</del></p>\n<p>行吧。</p>\n<h1>技术细节</h1>\n<p>爬虫使用 Python3 编写，数据库使用 MySQL。爬虫共使用了 4 个 API Token，在两台服务器上分布式爬取。爬取思路为：</p>\n<ol>\n<li>通过 <code>/users</code> API 遍历用户，每个请求最多获取 30 个用户信息</li>\n<li>循环 30 个用户，分别获取 <code>/users/&lt;user_name&gt;/starred</code> 和 <code>/users/&lt;user_name&gt;/repos</code> API 中的存储库信息，每个请求最多获取 100 个存储库信息，超过 100 个的分页获取</li>\n<li>提取存储库信息，插入数据库。对于已存在的存储库，更新数据</li>\n<li>获取下 30 个用户信息</li>\n</ol>\n<p>由于爬取过程中我多次调整了爬虫逻辑，爬虫爬取到的用户 ID 区间并非连续的，具体区间为1-839586, 14800001-14885493 及 28965251-31161101。</p>\n<h1>免责声明</h1>\n<p>本站会尽可能地提供准确信息，但本站不对此文章中信息的准确性和即时性及带来的任何影响负责。</p>\n<p>本站不代表 GitHub 官方，本文仅供学习之用，请不要将本文内容直接用于任何商业项目中。</p>\n<h1>数据集下载</h1>\n<p>导出的 SQL 文件大约为 1.38GB，全部放在了 GitHub 上（在危险的边缘试探.webp</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"github-analysis-2019\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/github-analysis-2019\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>此外我也提供了 MEGA 下载，链接<a href=\"https://mega.nz/#F!juxm3A6T!7Vwpzi82W1OFrqTLu1A1pQ\">在这里</a>。</p>\n","link":"https://flyhigher.top/develop/1564.html"},{"title":"Milkice 跨年红包解谜 Writeup 及无垠跨年红包解谜答案","date":"2020-01-02 04:29:19","description":"\n<blockquote><p><del>又到了水文章的时间呢</del></p></blockquote>\n<p>先说明一下，这篇文章原本不是在计划中的，而原来说好的「在路上的两篇」文章<del>绝对不会咕</del>。我自己的红包答案本来打算直接塞在年度总结里的，结果发现稍微有些长，再加上我还花了一些时间解了<a href=\"https://milkice.me/\">奶冰</a>的红包解谜游戏，就打算把两个解谜过程放在一起单独写一篇文章。<del>真是个水文章的好理由</del>（被打死</p>\n<h1>奶<del> 子 </del>冰的红包</h1>\n<p>奶冰的红包题目比我的难多了，所以让我们先从难的开始吧。首先看一下<a href=\"https://milkice.me/2019/12/31/2019-summary/\">题目</a>：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1524\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\" alt=\"\" width=\"746\" height=\"410\"></a>\n<p>入口是 <code>happy.2020.milkice.me</code>，扔到浏览器里面表示找不到 IP，那么大概率就是 DNS 的 TXT 记录了，查一下得到 <code>nb2hi4dthixs63ljnrvwsy3ffzwwkl3tivrvezluomxxg5dsmvqw2ltqmnqxa3th</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1525\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\" alt=\"\" width=\"896\" height=\"278\"></a>\n<p>第一眼没看出来是什么编码，直觉是 BaseXX 系列的编码，加上提示“不只有 Base64”，可以推断出是 Base32，转大写解码得到 <code>https://milkice.me/sEcRets/stream.pcapng</code>。是个 URL，下载得到一个 Wireshark 文件，打开一看是和某 USB 设备的通讯抓包。<del>不会做，不做了。</del></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1526\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\" alt=\"\" width=\"1500\" height=\"813\"></a>\n<p>奶冰提示我“Google 上搜得到”，结合第二条提示搜索“wacom pcapng”找到了<a href=\"https://blogs.tunelko.com/2017/02/05/bitsctf-tom-and-jerry-50-points/\">这篇文章</a>（<del>这™就是答案啊</del>）。看起来是一样的套路，即通过解析数据得到数位板上画的内容，于是按文章的思路筛选出数位板发给主机的数据，导出，然后再用 tshark 导出文本数据。本来我想直接用文章中的 POC 的，结果折腾半天因为源的蜜汁原因库没装上，于是按文章中给出的数据结构自己写了段代码，分别导出 X、Y 轴数据扔进 Excel 画散点图。（<del>别问我为什么用 Excel，因为我手边没有更好的工具了</del>）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1528\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\" alt=\"\" width=\"1280\" height=\"530\"></a>\n<p><span>翻车现场之一</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1539\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\" alt=\"\" width=\"1000\" height=\"286\"></a>\n<p><span>懵逼奶冰.webp</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1533\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\" alt=\"\" width=\"1500\" height=\"462\"></a>\n<p>看得出有手写文字，不过是上下颠倒的，翻转图片得 <code>https://milkice.me/2020/uso.zip</code>。是个 zip，下载打开一看，有密码。<del>不会解，不做了。</del> 第一反应是暴力解密码，但是暴力跑了 15 分钟还是没有跑出来。暴力太不优雅了，肯定不是正确思路，但奶冰什么都不肯说了。不过在这时我终于发现第一个红包口令码就藏在压缩包的注释中，Get。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1544\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\" alt=\"\" width=\"806\" height=\"593\"></a>\n<p>然而题还没解完，回去看提示，看到提供了 osu 谱面下载，于是打算不管怎么样先下载来看看。然而 osu 谱面下载要登录，只好又花了几分钟找到第三方站点，成功下载。这时候可以注意到 uso.zip 里有个同名文件（432314 Mike Greene - Bill Nye the Science Guy Theme Song (Chinese Intro).osz），可以联想到是明文攻击。好吧，上 ARCHPR，十秒解出。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1530\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\" alt=\"\" width=\"462\" height=\"643\"></a>\n<p><span>现场还原.jpg</span></p>\n<p>.osz 文件并不是明文，猜测是压缩包（和 .pptx 一个思路嘛），于是改后缀 .zip 顺利打开。然后红包口令码就藏在奶冰的 .osu 文件中了，由提示可知是明文，打开即可得到。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1542\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\" alt=\"\" width=\"457\" height=\"255\"></a>\n<h1>我的红包</h1>\n<p>相比起来<a href=\"https://flyhigher.top/diary/1464.html\">我的题目</a>就简单很多了嘛...三天时间一共发出了 25 个红包，包括一位重复领取的🌚，比前几年还是多了一些的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\" alt=\"\" width=\"500\" height=\"306\" class=\"aligncenter size-full wp-image-1554\"></a>\n<p><span>这位同学以后请不要多次领取🌚</span></p>\n<p>那么来看看答案吧。</p>\n<h2>第一阶段</h2>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>首先观察字符串，可以发现 <code>.</code> <code>/</code> <code>_</code> 等一些 ASCII 字符原样留在了字符串中，而其他字符被由 <code>=</code> 和十六进制构成的某种编码所替代。如果你正好有所了解，你应该能认出这是 Quoted-printable 编码，这是一种常用于邮件中的编码，可以用<a href=\"https://mothereff.in/quoted-printable\">这个页面</a>解码。如果你不了解，你也应该可以发现这种编码和 URL 编码非常相似。如果你把 <code>=</code> 替换为 <code>%</code>，那么你就可以用各种方法顺利地把它按 URL 编码来进行解码，最后可以得到 <code>αхtоn.іm/соdе_оf_2020_⒈mρз</code>。这个字符串里大部分字符都不是 ASCII 字符，只是长得像而已。根据第一个提示“全是 ASCII 字符”，按样子把字符串用 ASCII 字符抄一遍，可以得到最终 URL 为 <code>axton.im/code_of_2020_1.mp3</code>。</p>\n<h2>第二阶段</h2>\n<p>下载音频，可以听出音频是经过某种处理的白噪音。白噪音的特点是各频段的功率都均匀分布，在白噪音上做文章，很容易就可以联想到线索藏在频谱中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1534\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\" alt=\"\" width=\"1200\" height=\"719\"></a>\n<p>频谱被处理成了 24x3 的网格，结合第二条提示“24x3，横向读取”可以推断出是将频谱当作二进制读取，得到 <code>01111001 01110010 01100011 00101110 01101101 01100101 00101111 00110010 00110000</code>，转为 ASCII 字符可得 <code>yrc.me/20</code>。</p>\n<h2>第三阶段</h2>\n<p>打开上一步得到的页面，提示要求输入十位数密码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1536\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\" alt=\"\" width=\"663\" height=\"460\"></a>\n<p>如果你在上一步注意到了这个音频文件奇怪的属性，你可以反应过来这里的密码就是 <code>2000202020</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1537\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\" alt=\"\" width=\"421\" height=\"651\"></a>\n<p>如果你没有注意到，查看页面代码可以看到一条注释 <code>&lt;!-- Tips: the attribute of the audio --&gt;</code> 将你引导向音频文件的属性。输入密码，解锁即可进入下一步。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1535\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\" alt=\"\" width=\"397\" height=\"223\"></a>\n<h2>第四阶段</h2>\n<p>可以看到是一张图片，内容为“<del>.JPG</del>”和“.ZIP”。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-1532\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n<p>和去年一样的套路，下载图片，将后缀名改为 .zip 然后打开，可以看到 README.txt。</p>\n<h2>最后一步</h2>\n<p>查看 README.txt 的内容，可以了解到需要去 🤔.axton.cc 获取红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1538\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\" alt=\"\" width=\"1131\" height=\"278\"></a>\n<p>扔到浏览器里会出现奶冰同款找不到 IP，于是可以联想到 TXT 记录。唯一的问题是 🤔 这个 Emoji 需要如何处理。域名使用 Punycode 将 Unicode 字符转换为 ASCII 字符，特点是以 <code>xn--</code> 开头。如果你把上面这个域名扔进浏览器，你会发现它变成了 <code>xn--wp9h.axton.cc</code>。然后查询 TXT 记录，即可得到红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1527\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\" alt=\"\" width=\"804\" height=\"557\"></a>\n","link":"https://flyhigher.top/develop/1519.html"},{"title":"无垠 2019 年度总结","date":"2019-12-29 12:25:52","description":"\n<p>又是时间飞快的一年...写 2018 总结的情景似乎还在眼前，转眼居然已经到 2019 年末了。</p>\n<p>2019 年，发生了太多事情，包括真的转折了人生的高考，这也导致我博客更新的不多（难以置信居然才更了两篇...），不过两篇技术性文章已经在路上了，可以期待一下。</p>\n<p>2019 年我也学了不少东西（单指技术方面），比如终于认真学了 Vue（但是还要练手）。书买了一大堆，看完的倒是没几本orz</p>\n<p>呼，好吧，是时候回顾一下充满坎坷的这一年了。2019 年还剩下最后两天，希望 2020 年，我能做得更好。</p>\n<h1>一些数据</h1>\n<p>照惯例先来看看一些数据吧。今年是统计系统完整统计了的第二年，终于可以和去年的数据比较一下了。以下数据的统计范围是 2019年1月1日0时至 2019年12月29日20时。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 26,901 (<span>+4%</span>)，年 PV 76,583 (<span>+3%</span>)，日均 UV 73.7，平均停留时间 5分13秒 (<span>-13.8%</span>)，平均跳出率 53% (<span>+20.5%</span>)。一年有效文章数 2 (<span>-50%</span>)，新增评论 439 条。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\" alt=\"\" width=\"1000\" height=\"1143\" class=\"aligncenter size-full wp-image-1511\"></a>\n<p>有趣的是今年文章数腰斩，访问数反而小有提升。<del>如果我哪天不更新了，访问数是不是可以无限大呢？</del></p>\n<p>今年博客最大的改动就是把整体风格切换到了 Material Design 2（当然这是 <a href=\"https://flyhigher.top/develop/788.html\">MDx</a> 中的可选功能，给自己打个广告2333），此外还有比较失败的 WebP 改造计划，因为和缓存冲突已经回滚了。<a href=\"https://flyhigher.top/develop/1245.html\">ABS 系统</a>进展不大，主要是真的没有太多时间，还是要再学习一个。</p>\n<h2>个人主页</h2>\n<p>虽然个人主页的 TODO List 列了老长，但今年完全没有更新，也没有推广，从今年 8 月底开始还莫名被某墙认证了，直到 11 月底才恢复，于是今年总访问量比去年少了很多，</p>\n<p>有多少呢？这么少：总 UV 2,141 (<span>-65.9%</span>)，总 PV 2,744 (<span>-66.6%</span>)，日均 UV 6 (<span>-65.9%</span>)，平均停留时间 62秒 (<span>+19.2%</span>)。主要来源是知乎和 V2EX，还有一些甚至是从微信来的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\" alt=\"\" width=\"1000\" height=\"1103\" class=\"aligncenter size-full wp-image-1512\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 8 次，新增 171 commits，2 种语言的翻译，Star 数增加了 175，现有 408。感谢所有人的支持，尤其是 <a href=\"https://github.com/Sn0bzy\" rel=\"noopener noreferrer\" target=\"_blank\">Hasan CAN</a>, <a href=\"https://github.com/yechs\" rel=\"noopener noreferrer\" target=\"_blank\">Ye Shu</a>, <a href=\"https://github.com/StarryLeo\" rel=\"noopener noreferrer\" target=\"_blank\">StarryLeo</a>, <a href=\"https://github.com/DCTewi\" rel=\"noopener noreferrer\" target=\"_blank\">冻葱Tewi</a>, <a href=\"https://github.com/syfxlin\" rel=\"noopener noreferrer\" target=\"_blank\">Otstar Lin</a> 等为 MDx 做出了不小贡献的你们。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：<a href=\"https://flyhigher.top/photograph/1309.html\">上手</a> DJI OSMO Pocket</li>\n<li>四月：最后一次参加浙江省普通高中学业水平考试</li>\n<li>五月：MDx 喜提 300 Stars</li>\n<li>六月：高考 <del>炸了，差亿点点上浙大</del>\n</li>\n<li>六月：入手了 Oneplus 7 Pro</li>\n<li>六月：和同学一起去成都重庆旅行</li>\n<li>六月：第一次近距离感受到地震</li>\n<li>六月：<a href=\"https://flyhigher.top/diary/1411.html\">入手</a>了一台雷蛇灵刃 15，目前是主力机</li>\n<li>七月：参与组织 THE Hack 2019 活动</li>\n<li>七月：面基了 <a href=\"https://itroy.cc/\" rel=\"noopener noreferrer\" target=\"_blank\">Tory</a>, Bie Shi 和 <a href=\"https://oxz.me/\" rel=\"noopener noreferrer\" target=\"_blank\">FHYunCai</a>\n</li>\n<li>八月：一个人去厦门武汉转了一圈，拍了自己的第一个 Vlog</li>\n<li>八月：入手了一个 Kindle Paperwhite 4，没有泡面可以压，于是用来看英文小说了</li>\n<li>八月：加入 TEDxNingbo 志愿者团队</li>\n<li>八月：和 Ralph 面基</li>\n<li>八月：入手了一个 Yubikey</li>\n<li>九月：人生第一次参加雅思考试 <del>7分，蛮开心的</del>\n</li>\n<li>十月：入手了一个 Samsung Galaxy Watch Active 2 <del>觉得不值</del>\n</li>\n<li>十一月：MDx 达到 400 Stars</li>\n<li>十一月：为 TEDxNingbo 设计开发的 H5 上线</li>\n<li>十一月：入手了第一台胶片相机，试图入坑胶片摄影</li>\n<li>十一月：参加 TEDxNingbo 2019 大会</li>\n<li>十二月：<del>我 Cytus II 入门了</del>\n</li>\n</ul>\n<h1>跨年红包</h1>\n<p>这算「传统习俗」了。和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2020年1月2日。</p>\n<p>今年的解谜旅程，从下面这个字符串开始。</p>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>由于今年的题目比以前稍微难了一些，所以今年的红包金额还是比较大的，而且不限量，尽你所能试一试吧。</p>\n<p>一点你可能用得上的提示：URL 里全是 ASCII 字符 / 24x3，横向读取。</p>\n<p><a href=\"https://flyhigher.top/develop/1519.html\">答案</a>已公布。</p>\n<h1>跨年海报</h1>\n<p>这算是另一个「传统习俗」（笑）。因为我有做跨年海报的习惯，所以以下就是今年份的海报啦。</p>\n<p>用了 C4D+PS，还有我的一整个下午。</p>\n<p>提前祝各位新年快乐！</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter wp-image-1467 size-large\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n","link":"https://flyhigher.top/diary/1464.html"}]