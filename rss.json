[{"title":"2022 年了，新能源汽车的保值率怎么样了？","date":"2022-04-21 13:12:09","description":"\n<p data-pid=\"Wrn59Iws\">新能源对标燃油车谈保值率，就像燃油车对标新能源谈保养费用，这样的话题刚起个头就聊不下去了。各自的相对劣势都是由产品特性决定的，并不像价格、服务这些因素可以通过调整提升竞争力。</p>\n<p data-pid=\"fMQNqA6T\">电池在新能源汽车中占很大成本且属于持续损耗部件，所以保值率很难和一些同级燃油车对比。其实也没有比的必要，保值率直接影响二手车交易，但仔细想一想，即使同级燃油车卖的价格更高，但车主在使用生涯中也明显付出了更高的养护费用。</p>\n<p data-pid=\"s9cdumTM\">在新能源汽车刚起步的阶段，其保值率会受产品受众、品质做工、续航长短、燃料类型等各方面的影响，但随着时间的推移，很多之前的问题也就不是问题了，比如整车品质、续航、用户群体，所以如果现在查一下新能源的保值率情况，其实并没有那么难看，甚至还比标致雪铁龙这类保值率低的品牌略强一些。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-110b4891d91c57a8430b8f5e6054f395_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"809\" data-rawheight=\"317\" data-watermark=\"watermark\" data-original-src=\"v2-110b4891d91c57a8430b8f5e6054f395\" data-watermark-src=\"v2-9c25771562b8b2b90a5f136b6955409b\" data-private-watermark-src=\"v2-642f3b26e54165ee51500c71f0a7bdd0\"></p>\n<p data-pid=\"ojOfc9eD\">综合来看，这两年的燃油车保值率是有所下滑的，反观一些热门新能源汽车的保值率却在提升，当然这是两者在各自领域的数据变化，如果互相对标的话，除了一些被调侃成“理财产品”的车型，整体而言新能源的保值率还是没法和燃油车相比。</p>\n<p><img src=\"https://pica.zhimg.com/v2-525c4745549c6ca441592f690736c4a6_720w.jpeg?source=b1748391?rss\" data-caption=\"我不理解，但很震撼\" data-size=\"normal\" data-rawwidth=\"671\" data-rawheight=\"434\" data-watermark=\"watermark\" data-original-src=\"v2-525c4745549c6ca441592f690736c4a6\" data-watermark-src=\"v2-029650a036acce7912d3ad3ec29fe228\" data-private-watermark-src=\"v2-cc2e7c03170a36ec9640f107937fc0d7\"></p>\n<p data-pid=\"gv-7bgnT\">另外，在低价新能源代步车领域，有相关经验的朋友告诉我这类车型的保值率会更好一些，因为需求纯粹、场景有限、电池费用不高等因素，在二手车市场流通也更顺利一些。</p>\n<p><img src=\"https://pica.zhimg.com/v2-54252dfdf9003cf1017761bdbb73d857_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1202\" data-rawheight=\"497\" data-watermark=\"watermark\" data-original-src=\"v2-54252dfdf9003cf1017761bdbb73d857\" data-watermark-src=\"v2-a282b58a407bd0d32d8f4884784d146a\" data-private-watermark-src=\"v2-4082b5d95835882794ada11a4bd44c6e\"></p>\n<p data-pid=\"KxTFpVO8\">其实还是那句话，如果硬要把新能源和燃油车放在一起对标的话，那么当前阶段新能源会淡化保值率因素，燃油车会淡化养护费用因素，毕竟都是自身相比对方没有优势的属性。</p>\n<p data-pid=\"IfEFifwD\">但单独看待新能源汽车的保值率，在排除“理财产品”和“PPT产品”这两种特例之外，主流热门的车型保值率是有所提升的，至少已经不是低到令车主脸色发绿的地步，可能再过几年就能达到正常受众普遍可以接受的程度了。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/vulry?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">张凝澈</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/529025280/answer/2450906601?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">8 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/353092015?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">新能源二手车保值率低？有什么解决办法吗？</a><br><a href=\"http://www.zhihu.com/question/330726029?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">过分看中汽车的保值率有意义吗？</a><br>\n","link":"http://www.zhihu.com/question/529025280/answer/2450906601?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"如何看待动画《新秦时明月》第23集？","date":"2022-04-21 12:21:14","description":"\n<p data-pid=\"tW1I2iF8\">大家好，《新秦时明月》已经播出第二十三集了。</p>\n<p data-pid=\"ut-Wuloy\">今天这集主要表现的是天明要翻过数十丈的悬崖。有看过的小伙伴可能觉得这个进度有些慢，但我想说的是这部分的剧情其实非常重要。一方面，这里表现出了一直挡在天明身前关心、保护他的大叔，第一次“放手”，让天明自己一个人去闯过这段悬崖峭壁。这是大叔对天明态度的第一次转变。另一方面，这也是天明第一次一个人去面对生死危机，之前不是有大叔保护，就是和少羽一起面对。这次他只能靠自己，一不留神就会粉身碎骨。这是天明从一个不涉世事，调皮捣蛋的少年，学会独立的第一步。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-842fd0282e72d6b9860dbf1bffb469d7_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"608\" data-watermark=\"watermark\" data-original-src=\"v2-842fd0282e72d6b9860dbf1bffb469d7\" data-watermark-src=\"v2-a3f1d3c136b1b90dd584263b5ca5c6a1\" data-private-watermark-src=\"v2-4a4264fa89f8dfc9cfe38cc481c7e1c3\"></p>\n<p data-pid=\"Z5QEGXHH\">关于大家质疑大叔前后对待天明遇到险情的态度问题。其实这里大叔是为了保护天明不受毒气侵害的情形下，做出的判断和选择。这段话大叔说得很明白，我就不重复了。就一些细节：天明爬悬崖时，聂大叔的表情虽然平静，但从细微眼神可看出他其实一直在倾听天明的声音，他也希望天明自己可以克服恐惧爬过去，不然他就无法成长。相信如果天明真的有危险，我相信大叔一定会一剑劈开铁窗，跳出去救天明的吧。</p>\n<p data-pid=\"1-mDLjrd\">这里悄悄说一句，大叔对天明的这种态度，其实非常适合现在的奶爸、奶妈。现在的孩子都被大人保护得太好，其实有时候，让他们自己去面对一些危险和困难，对他们的成长，反而更有帮助。</p>\n<p data-pid=\"oN-DP9ZK\"><b>说一些幕后：</b></p>\n<p data-pid=\"hxl9gU4B\">最近我们启动了远程制作办公，但制作难度还是很大。最主要的一个麻烦就是频繁有远程机器死机。本来我们这现有的远程机器资源就有限。为了尽可能抢进度，我们已经安排了早班和晚班，两个班次来分批使用远程账号制作。这宕机一台，就等同于损失2位同事的产能，这两天每天死一台，导致4位同事没办法远程继续推进。随着时间的推移，上海有效的远程机器资源在持续减少。如果下个月还不能解封，真的要愁人了~</p>\n<p><img src=\"https://pic3.zhimg.com/v2-3f94ddd694f70874b9f0b769c64f401f_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1366\" data-rawheight=\"767\" data-watermark=\"watermark\" data-original-src=\"v2-3f94ddd694f70874b9f0b769c64f401f\" data-watermark-src=\"v2-774855c60a0a98918ebfae2676d6d8ef\" data-private-watermark-src=\"v2-668777e9e0fe775c16150be005373613\"></p>\n<p data-pid=\"Sc2UrHo1\">然后是配音问题<b>，</b>最近总能看到李立群老师的抖音视频，同样因疫情封闭在上海的家中不能出去。李老师配的老版本公输仇还是蛮有特色的；但现在因为疫情的关系，很多人都没办法正常工作，配音这部分也影响蛮大。卫庄的声优吴磊配音的时候，为了躲避杂音的干扰，就是躲在衣柜里录的。各位声优老师为了确保正常播出，也是突破局限各种妙招频出。如果某一集大家发现配音不太好了之类的还请多多包容哈。 </p>\n<p><img src=\"https://pic2.zhimg.com/v2-32be69ab086a54f5587431f82ea94986_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1366\" data-rawheight=\"764\" data-watermark=\"watermark\" data-original-src=\"v2-32be69ab086a54f5587431f82ea94986\" data-watermark-src=\"v2-b28bf3502ca7b84f1238b39943597fa6\" data-private-watermark-src=\"v2-2a45f7e5355ae529b33feae9bead87e1\"></p>\n<p><img src=\"https://pica.zhimg.com/v2-f5fa3fb28e4c93302dd60f523cd346c8_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1365\" data-rawheight=\"765\" data-watermark=\"watermark\" data-original-src=\"v2-f5fa3fb28e4c93302dd60f523cd346c8\" data-watermark-src=\"v2-527479432cc97c7cdb0eba99c39f0ca9\" data-private-watermark-src=\"v2-68ff40f1ccbfe84847bf2da9b3017dd6\"></p>\n<p data-pid=\"8RRdF3IE\">居家办公期间也体会到了5G建设的重要性。如果网络提升到足够快的，像我们这种互联网依赖性比较高的工作，几乎可以在任何地方同步公司机器进行远程制作，对空间地域的要求就会小很多，未来也许并不需要把一群人聚在一个办公环境下办公；但是目前，延迟感觉还是一直存在，这种感觉对制作的影响还是蛮明显的，口型制作就可能因此错位（因为每个人延迟的时间都不一样，甚至同一个人同样的内容，前一次制作和后一次修改的延迟时间也不一样，所以这个真的是太难了）。</p>\n<p data-pid=\"U6bzfAtg\">另外为了节省带宽，降低流量占用，音频也会被压缩较大。随着未来科技发展突破，我相信这些问题都可以解决吧，只希望这一天快点到来，只希望上海快好起来，疫情快点过去，大家快点回到正轨。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/xie-xiao-ming-98-74?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">薛小明</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/529273418/answer/2450845457?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">1 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/322167288?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么好多人认为《秦时明月》中的星魂强于《天行九歌》中的卫庄？</a><br><a href=\"http://www.zhihu.com/question/294732892?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">天行九歌是在为秦时明月正片填坑吗？</a><br>\n","link":"http://www.zhihu.com/question/529273418/answer/2450845457?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"创作者请回答｜李鸿政医生：像侦探一样，书写医学科普故事","date":"2022-04-21 10:21:54","description":"\n<p data-pid=\"dTGXvD4y\">在故事档案局，局长收录的众多故事里，医疗故事是最令人揪心的。</p>\n<p data-pid=\"BvRWHlC6\">急诊抢救，就是在跟死神赛跑。看病，有时候像探案，医生们需要用强大的专业知识，在有限的时间里找出真正的病因。</p>\n<p data-pid=\"n7XUEvWZ\">疾病与死亡，似乎离我们又近又远。在知乎，有这样一位医生，他用自己的亲身经历，给我们讲述那些真实发生在医院里的故事。他就是 <a class=\"member_mention\" href=\"https://www.zhihu.com/people/19a13805e24e655eaee38f1851be41a0\" data-hash=\"19a13805e24e655eaee38f1851be41a0\" data-hovercard=\"p$b$19a13805e24e655eaee38f1851be41a0\">@李鸿政医生</a>。</p>\n<p data-pid=\"TnLkj0YM\">有读者评价他：<b>「医生里讲故事讲的最好，作家里医术最高。」</b>（ <a class=\"member_mention\" href=\"https://www.zhihu.com/people/c68f36617c8fd67e49d13e8f53ca4094\" data-hash=\"c68f36617c8fd67e49d13e8f53ca4094\" data-hovercard=\"p$b$c68f36617c8fd67e49d13e8f53ca4094\">@朱辉</a> ）</p>\n<p data-pid=\"uT15u56l\">这天，局长请来了李鸿政医生，听他讲讲那些惊心动魄的急救故事，看医生们是如何像侦探一样，找出复杂病症背后的真相。</p>\n<p data-pid=\"tZacW8-H\">顺便，我们一起学习一下那些「关键时刻能救命」的医学常识！快拿出小本本记下来吧。</p>\n<figure data-size=\"small\"><img src=\"https://pic3.zhimg.com/v2-bbab72a971dad27779d9e517cc791052_b.jpg\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"690\" data-rawheight=\"657\" class=\"origin_image zh-lightbox-thumb\" width=\"690\" data-original=\"https://pic3.zhimg.com/v2-bbab72a971dad27779d9e517cc791052_r.jpg\"></figure><h2>像「侦探」一样的医生们</h2>\n<p data-pid=\"hywU2NF-\">重症医学科的李鸿政医生很忙。</p>\n<p data-pid=\"73vYi3-H\">他每天下班后没有应酬和饭局，也不唱歌打游戏。回家就是围着老婆孩子转，仅剩的一点私人时间，李医生用来在知乎写文章。</p>\n<p data-pid=\"frFbyi9_\">他把写文章当成自己的副业，但这份副业其实仍然和主业强绑定，因为他写的是医疗科普故事。可以说，李鸿政医生的主业是救人，他的副业依然是在救人。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-d1d4722c7df2a8086fa4bccd50c20aa9_b.jpg\" data-size=\"normal\" data-rawwidth=\"1382\" data-rawheight=\"747\" class=\"origin_image zh-lightbox-thumb\" width=\"1382\" data-original=\"https://pic2.zhimg.com/v2-d1d4722c7df2a8086fa4bccd50c20aa9_r.jpg\"><figcaption>李鸿政医生的知乎账号</figcaption></figure><p data-pid=\"Io5Ccken\">他笔下的内容，从小病小痛到大病重症，从预防到诊疗，一概涵括。他分享过让人提心吊胆的诊疗经历，也为知乎网友提出的疑难杂症答疑解惑。</p>\n<p data-pid=\"Puly7dKs\">李鸿政医生将自己亲身见闻的诊疗案例，以推理探案故事的形式演绎出来，这些真实生动的故事，在知乎上吸引、积累了大量读者。而他写出这些故事的初衷，也是希望能让更多人具备重症急救常识。</p>\n<p data-pid=\"AfkappIb\">李医生的医疗故事里总是充满了「反转」，许多人希望他能把文章整理出来，出书、拍剧，期待能够拍出中国版的《豪斯医生》。</p>\n<p data-pid=\"BzZsbm2_\">但对他而言，现实中的每一次急救，医生们最担心的就是出现「反转」。<b>每一次反转都是性命攸关，都是在和死神赛跑。</b></p>\n<h2>一杯奶茶会让人差点丧命吗？</h2>\n<p data-pid=\"iKu7cwaF\">李鸿政医生在知乎讲述过一位病人因一杯奶茶差点丢了性命的故事。</p>\n<p data-pid=\"l32CVmJH\">起初，38 岁的梁女士突然胃口大增，一餐要吃 2-3 顿的饭量，吃不饱就冒冷汗。但奇怪的是，她不仅没有变胖，还变瘦了。</p>\n<p data-pid=\"PMU-sWIX\">原本她还洋洋得意，自己怎么吃都不胖，但是丈夫却有点担心。因为梁女士本身是一名乙肝携带者，万一这是肝癌的征兆，那就麻烦了。</p>\n<p data-pid=\"5g5qei_6\">夫妻俩想到这慌了神，来到医院检查，抽血查乙肝两对半、肝功能。</p>\n<p data-pid=\"0kFATnYi\">结果全部正常。</p>\n<p data-pid=\"PzHQKE6S\">梁女士和医生说了自己的症状，医生怀疑是甲亢，又做了相关检查，但还是一切正常。</p>\n<p data-pid=\"joq2vsis\"><b>以上都不是，那是不是意味着没病？</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-f0fe2eb91686c9458eee9b968ae07a85_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"377\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-f0fe2eb91686c9458eee9b968ae07a85_r.jpg\"></figure><p data-pid=\"-TP1PWx8\">当天，梁女士刚好喝了一杯奶茶，却被送进了当地三甲医院的急诊科。</p>\n<p data-pid=\"pYTR5lQJ\">刚进抢救科，患者就「哇」的呕吐了一次。医生说，很有可能发生了糖尿病急性并发症——酮症酸中毒，这是有可能出人命的。</p>\n<p data-pid=\"jSw7p7Hx\">经过大量补液、使用胰岛素等处理，梁女士的病情逐渐好转，最终住入了内分泌科。在内分泌科，查了糖化血红蛋白，指数只有 7.9%，这说明她最近 3 个月的血糖都是很差的了。</p>\n<p data-pid=\"BIKGM2d6\">事实上，梁女士这段时间都有口渴症状，只不过她没想到这是身体发出的异常信号，就没跟医生讲。直到医生跟她说，口渴也是血糖高的一个表现，她这才意识到。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-9f2a665487d87b460a1a2ba3cdcdc048_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"431\" class=\"origin_image zh-lightbox-thumb\" width=\"720\" data-original=\"https://pic1.zhimg.com/v2-9f2a665487d87b460a1a2ba3cdcdc048_r.jpg\"></figure><p data-pid=\"wA7P8IEv\">还有一次，李鸿政医生遇到一个因胸痛入院的 52 岁中年女性。</p>\n<p data-pid=\"AEPagT8o\">该患者在胸痛持续了两天以后，因为晚间疼痛加剧，在半夜去了急诊。</p>\n<p data-pid=\"REITdfT_\">胸痛无论在心内科还是急诊科，都被「如临大敌」一样地对待，毕竟这一症状的成因有不少可能，比如心肌梗死，主动脉夹层，肺栓塞，气胸……<b>但这位患者的病因却不太寻常。</b></p>\n<p data-pid=\"B6x6fWVD\">在经历了抽血查心肌酶排除心肌梗死、用听诊器仔细听双肺排除气胸等操作后，李医生排除了其他致命原因，给病人开了抗炎镇痛药洛索洛芬，让患者先作休息。</p>\n<p data-pid=\"kBpnegL-\">但之后主任查房，查看该患者胸背状况，观察到患者左乳房下缘有几个淡红色的皮疹，呈带状分布，判断患者的胸痛其实是因为带状疱疹引起的。</p>\n<p data-pid=\"iV-_RwRX\">李鸿政医生随后请了皮肤科会诊，并按照皮肤科意见给用了激素口服、外用抗病毒药物治疗，患者的状况逐渐好转。</p>\n<p data-pid=\"at8l14I-\">身体出问题，病因可能很复杂。医生看病有时也如同侦探破案一般，需要在多种可能性中奋力探查出真正的病因。</p>\n<h2>写出与众不同的医学故事</h2>\n<p data-pid=\"D0soYe8h\">李鸿政医生与知乎的结缘要从十年前说起。</p>\n<p data-pid=\"3L-XLLbT\">当时还在医院实习的李鸿政医生，从朋友那儿听说了知乎。「作为一个知识分享型平台，有很多「高手」在上面无偿分享知识，内容质量非常高。」</p>\n<p data-pid=\"9Ghu3kXs\">朋友邀请李鸿政医生入驻知乎，他回答的第一个问题是「如何健康吃早餐？」</p>\n<p data-pid=\"cG45Gc0l\">是不是可以考虑做科普？可是知乎上相似的内容并不缺。</p>\n<p data-pid=\"m4isJNIT\">那时，李鸿政医生还没有什么明确的职业规划，只是在按部就班地过着日子，对于在知乎上做分享这件事，也还没有太明确的思路。</p>\n<p data-pid=\"-9pgmDuL\">直到有天，他把工作中遇到的事写成医学故事，分享在了知乎上，一下收获到很多的评论与关注。李鸿政医生意识到，或许这就是自己可以做的，跟别人不一样的东西。</p>\n<p data-pid=\"LP1oAEJj\">有人好奇：李鸿政医生为什么会有那么多病例可以写？</p>\n<p data-pid=\"4W40DGD0\">他在知乎上解释：「如果你也在医院呆了十年，并且跟我一样好学，别人的病例你也忍不住凑过去看几眼，看起劲了然后意识上把自己当管床医生，那么你这十年看过处理过的病例就是普通人的 2-3 倍。」</p>\n<p data-pid=\"LuSKOhvv\">李鸿政医生从小喜欢看小说，长大了学医也喜欢刨根究底，喜欢挖掘疾病内外的故事和逻辑。而虽然病例各有各有的模样，但原则却是共通的。只有看的多了，才会有经验积累。</p>\n<p data-pid=\"_FGyL-2o\">李鸿政医生分享这些案例和故事，一方面是提醒许多医学新人，为他们的学医之路提供更多经验；另一方面也是为普通人讲解相关常识，呼吁大家健康作息，在诊疗时尽可能告知过往病史，不要因为难为情而对医生有所隐瞒。</p>\n<h2>一位医生的职业生涯得以拓宽</h2>\n<p data-pid=\"9L248Ttd\">李鸿政医生这种故事化科普医学知识的方式，一方面给自己积累了读者，成为医学话题下的优秀答主，收获了认同感；另一方面，他所科普的知识也因为广泛传播，帮助了许多患者及时就医，避免病情的扩大。</p>\n<p data-pid=\"kQP2Dff0\">重要的是，围观抢救现场，可以帮助读者换位思考，对待医生有更客观科学的理解。多一分理解，就少一分误会。</p>\n<p data-pid=\"bkxX59yn\">李鸿政医生出版了图书<a href=\"https://www.zhihu.com/pub/book/120202629\" class=\"internal\">《生命的反转：急重症科医生手记》</a>，用一本书讲透35种急重症常识。在知乎，他还开设了盐选专栏<a href=\"https://www.zhihu.com/xen/market/remix/paid_column/1419263074604343296\" class=\"internal\">《急诊见闻：生命抢救倒计时》</a><a href=\"https://www.zhihu.com/xen/market/remix/paid_column/1451572214999486464\" class=\"internal\">《诊室手记：别拿小病不当事儿》</a>，用通俗的语言普及了多类常见重疾症相关医学知识，以及日常中适用的急救知识。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-c2353aca0401d6ad2256703d0cee0ae8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1383\" data-rawheight=\"533\" class=\"origin_image zh-lightbox-thumb\" width=\"1383\" data-original=\"https://pic1.zhimg.com/v2-c2353aca0401d6ad2256703d0cee0ae8_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-8e9a07f57de2d8644bb939a744e8d38b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1362\" data-rawheight=\"812\" class=\"origin_image zh-lightbox-thumb\" width=\"1362\" data-original=\"https://pic4.zhimg.com/v2-8e9a07f57de2d8644bb939a744e8d38b_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-0834b39376b20cfe774b32f1b8aec1a0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1354\" data-rawheight=\"794\" class=\"origin_image zh-lightbox-thumb\" width=\"1354\" data-original=\"https://pic1.zhimg.com/v2-0834b39376b20cfe774b32f1b8aec1a0_r.jpg\"></figure><p data-pid=\"tU4B__lZ\">另外，李鸿政医生还在第三季知乎故事大赛中，获得了年度总冠军的荣誉。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-4bb3cd88549b73713c2d98ac804c6412_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1377\" data-rawheight=\"646\" class=\"origin_image zh-lightbox-thumb\" width=\"1377\" data-original=\"https://pic3.zhimg.com/v2-4bb3cd88549b73713c2d98ac804c6412_r.jpg\"></figure><p data-pid=\"IVkVSGoG\">在知乎分享的历程，让李鸿政医生得到了大量的积极正面的反馈，也进一步影响了他对自己的职业生涯规划。</p>\n<p data-pid=\"G_cdGkHn\">现在，李鸿政医生更希望自己以后能会成为一个专职的医学科普作家，写更多的文章，出版更多形式多样的科普书籍，比如适合儿童阅读的，适合老人阅读的，适合年轻人阅读的；故事型的，单纯干货型的……此外，写医学小说、拍摄医疗主题的电视剧，也在他未来的计划中。</p>\n<p data-pid=\"pBAvDcQs\">李鸿政曾经想过，如果没有在知乎上做答主，不擅长研究和写论文的自己，可能顶多能够成为医院的一个小有名气的医生，做到全国知名却不太可能。正是借由知乎这个平台，李鸿政医生职业发展的可能性得以拓展开来。</p>\n<p data-pid=\"B-DtNUIZ\">听李医生讲完，局长对于「医生」这个职业的理解，又增添了一丝神圣和崇拜。</p>\n<p data-pid=\"3wkuANhJ\"><b>李医生不仅在现实意义上做到了「治病救人」，他的科普故事，也帮助普通人了解到更多医学知识，是另一种意义上的「救人」。这便是医学科普的魅力所在，也是真实故事的力量所在。</b></p>\n<p data-pid=\"YurGnfoo\">希望每个人都能健康平安地度过每一天！</p>\n<figure data-size=\"small\"><img src=\"https://pic2.zhimg.com/v2-1029d9eadc22231bf5e2697014531001_b.jpg\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"610\" data-rawheight=\"575\" class=\"origin_image zh-lightbox-thumb\" width=\"610\" data-original=\"https://pic2.zhimg.com/v2-1029d9eadc22231bf5e2697014531001_r.jpg\"></figure><p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/gu-shi-dang-an-ju-71?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">故事档案局</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/502409715?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"一派·在线沙龙 08：阅读，不该只在读书日","date":"2022-04-21 09:57:59","description":"欢迎参加 4 月 22 日（本周五）20 点举办的「一派·在线沙龙」直播活动。<a href=\"https://sspai.com/post/72789\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/72789"},{"title":"为什么电动汽车很少听说加价销售？","date":"2022-04-21 09:53:18","description":"\n<p data-pid=\"Qr6fzSCS\">先放结论：<b>不管是什么原因，最终都是由供需关系决定的。</b></p>\n<p data-pid=\"HN33mDLP\">忘了哪位投资大神曾经说过类似以下的话：<br><b>一个商品的价格不是由它的使用价值决定的，也不是由它的情绪价值决定的，也不是由它的成本决定的，甚至与以上这些一点关系都没有。</b><br><b>价格就是价格，它仅仅就是根据市场当前的供需关系决定的。</b><br></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-09b2987721471f5a30cb94263e3e1f8b_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"608\" data-watermark=\"watermark\" data-original-src=\"v2-09b2987721471f5a30cb94263e3e1f8b\" data-watermark-src=\"v2-368457c42e1b05553c70050565438fe5\" data-private-watermark-src=\"v2-244b3e3c980f9209244b848513ba3691\"></p>\n<p><br></p>\n<p data-pid=\"l6d2xs5G\">说回电车，以我浅薄的认知，跟车价关系相关的可能有以下几个因素</p>\n<ul>\n<li data-pid=\"15Qc85Kq\">1.上游成本</li>\n<li data-pid=\"K_ZhWyfh\">2.政策</li>\n<li data-pid=\"82XqTnq0\">3.电车制造的成熟程度</li>\n<li data-pid=\"nEasKj4q\">4.市场的接受程度</li>\n<li data-pid=\"THN0EDTd\">5.这些因素这么决定供需关系的</li>\n<li data-pid=\"aO85ASmM\">6.过去、现在、将来</li>\n</ul>\n<blockquote data-pid=\"yvLPr9qA\">这些因素组合起来，会决定最终的供需关系，也就决定了车价。</blockquote>\n<p data-pid=\"4qFGDT8f\">所以电车也不一定一直不加价的，<b>只不过在过去的一段时间里面大部分因素都导致没到供过于求的程度，才会让我们误以为电车加价相对较少</b>。</p>\n<p data-pid=\"N6iU2yX0\">那一个一个来拆拆上面的几个因素</p>\n<h2>1、上游成本</h2>\n<p data-pid=\"VmjJR_6p\">上游成本由两个层次组成：第一层Tier 1~Tier 3的供货价格，第二层更上游的原材料的价格</p>\n<h3>先说第一层：</h3>\n<p data-pid=\"wkzMOkLh\">对于电车这个目前在正在小荷才露尖尖角的新兴产业，各个Tier的成本正随着渗透率的不断提升而逐渐形成<b>成本上的规模效应。</b></p>\n<p data-pid=\"JtlbWNOq\">不管是真正意义上的产业规模化，还是政策导向的过度扩张。<br>都实实在在的拉低了电车所需的特有的各个部件的成本。</p>\n<p data-pid=\"TZh5YF2w\"><b>拿电车里成本占比最大的动力电池来说，从2010年到2020年已经降了90%</b><br></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-723c6e4bccaec59e5f8e6d7afd632409_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" data-watermark=\"watermark\" data-original-src=\"v2-723c6e4bccaec59e5f8e6d7afd632409\" data-watermark-src=\"v2-c1f52059c5873683243475b5920b5246\" data-private-watermark-src=\"v2-94f37d550c1d8bc6c15a15f453a3b2bf\"></p>\n<p><br></p>\n<p data-pid=\"dj2_WVZ4\">在这一层：</p>\n<blockquote data-pid=\"gKxww85y\">以肉眼可见的渗透率不断的提升，成本会继续下降。</blockquote>\n<h3>再说第二层：</h3>\n<p data-pid=\"zFJsuIG6\">上游的原材料成本。<br>虽然会因为开采工艺及技术的提升能够一定程度的降低成本，但在有限资源的部分因为越采越少的原因，形不成<b>成本上的规模效应。</b><br>不过好的地方是，这一部分在原本全球化的充分分工协作的市场上，如果没有天灾人祸的话<b>价格是相对可控的。</b></p>\n<p data-pid=\"DZpTsScP\">这里为什么说是<b>可控而不是稳定。</b><br>因为原材料作为大宗商品肯定会<b>有一定的周期性的，所以不稳定。</b><br>但是厂家会通过<b>期货期权等进行对冲，所以价格还基本可控。</b><br></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-eff6bf6f38fee09d59444628785d1420_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" data-watermark=\"watermark\" data-original-src=\"v2-eff6bf6f38fee09d59444628785d1420\" data-watermark-src=\"v2-76e7f311f96e8c2d2e07288dac5f56d0\" data-private-watermark-src=\"v2-ccb3e7d5fc4fa8592c7f34bf0a05f8e0\"></p>\n<p><br></p>\n<p data-pid=\"Yen7WGn_\">而原本上游原材料的成本离主机厂之间的链条还很长，而且还有对冲提供的安全垫。<br>如果没有发生啥不可抗力，<b>基本能够熨平大部分的周期。让TierX们的成本规模效应继续往前跑。</b></p>\n<p data-pid=\"rVxU3fIw\">但，<b>万一</b>，如果因为一些机缘巧合的因素，导致上游原材料的成本如果急剧上升，而且短期内不能恢复的话。<br>在消耗完之前通过对冲来垫起的安全垫之后，就会不可避免的导致各层Tier的成本上升。<br>一开始还可以为了顾忌与主机厂的长期合作稳定性而不一定会提高供货成本，但是在入不敷出的时候也只能先保证自己活下去，主机厂的进货成本也就会上升。</p>\n<p data-pid=\"RwsWP12n\">在这一层：</p>\n<blockquote data-pid=\"sRVmfkZk\">虽然隔着远，但是没有规模效应，而且波动的程度反而会高一点</blockquote>\n<p><img src=\"https://pica.zhimg.com/v2-d26f91a9eca62dc00abba4ac8e5ea9c6_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1254\" data-rawheight=\"530\" data-watermark=\"watermark\" data-original-src=\"v2-d26f91a9eca62dc00abba4ac8e5ea9c6\" data-watermark-src=\"v2-9ae7d0661b6f9811092bf1d45bd5d597\" data-private-watermark-src=\"v2-f3b93800f6fe1b146c7fb13b9af05e91\"></p>\n<h2>2、政策</h2>\n<p data-pid=\"B3YLjwq_\">这部分比较简单，主要是国家对电车的补贴力度。<br>补贴力度越大，越能够给主机厂提供价格调整的安全垫，<b>从而可以在更大的纵深内去执行与实施战略，而不用因为一时的现金流断流而被迫平仓出局。</b></p>\n<p data-pid=\"QJDU7LS5\">虽然即使补贴了以后也有可能亏本卖，<b>但是亏本卖了一定规模以后没准就过了转亏为盈的阈值了。</b><br>政策给的安全垫厚的时候，企业也可以视自己的情况来决定让利多少给消费者，主动性更高。</p>\n<p data-pid=\"mdzWQo7Q\">而，如果补贴越来越少的话，就大大削薄了主机厂可以辗转腾挪的空间。<br>很有可能就不得不因为一时的五斗米而涨价，<b>反脆弱性急剧下降。</b><br></p>\n<p><br></p>\n<p><img src=\"https://pica.zhimg.com/v2-218ebddf0467a8f7f557fdf6f3e9b82c_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"973\" data-rawheight=\"456\" data-watermark=\"watermark\" data-original-src=\"v2-218ebddf0467a8f7f557fdf6f3e9b82c\" data-watermark-src=\"v2-c82e387132430e74185c4cd1f125623b\" data-private-watermark-src=\"v2-a31175c6518d81a55a2c0957bbb37904\"></p>\n<p><br></p>\n<p data-pid=\"t1YanPYy\">在政策这一部分：</p>\n<blockquote data-pid=\"dPq4HZHU\">我们国内对的政策导向给了电车野蛮发育一个很好的温床，在可以一定程度上或者最小程度上考虑成本的温床。</blockquote>\n<h2>3、电车制造的成熟程度</h2>\n<p data-pid=\"49gbDQ8D\">电车制造的成熟度也可以分为两层：第一层同样是制造工艺和技术提升后对的成本的持续下降，第二层是成熟度提升消费者对电车这新物种的接受度提升。</p>\n<p data-pid=\"_5JnMHbD\">第一层：<br>很简单，结论与Tier X们一致，还在青壮年的电车只要不懈怠，成本还可以肉眼可见的下降。<br></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-993046aded32f5887c1fc55c6ea3aaab_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"650\" data-rawheight=\"547\" data-watermark=\"watermark\" data-original-src=\"v2-993046aded32f5887c1fc55c6ea3aaab\" data-watermark-src=\"v2-3ef24f6fed15f9b7ad3f8dd21695ed84\" data-private-watermark-src=\"v2-f24eb1763f00717822b94f36ea71f8f3\"></p>\n<p><br></p>\n<p data-pid=\"z5fFl7AI\">第二层：<br>如果产品成熟能够提升消费者的接受度，就会逐渐拥有一定程度的定价权。<br>有了定价权以后，价格就会逐渐接近价值甚至超过价值。<br>但是，制造成熟程度只是消费者接受电车的<b>一个必要不充分条件</b>，其他条件我们放到第4部分说。</p>\n<h2>4、市场接受程度</h2>\n<p data-pid=\"0zQH3rKi\">市场接受程度除了产品本身的成熟度，对电车来说还与基础设施的普及程度及燃油车的购买惯性何时消除相关。</p>\n<h3>先说基础设施：</h3>\n<p data-pid=\"vnFnQCTl\">现在道路加油站到处都是，但是充电站就不一定了，超级充电站就更不一定了。<br>如果在你里程极度焦虑的时候，周围找不到一个充电站的话，你可能一辈子都不会再想买电动车。</p>\n<p data-pid=\"GJaoIk-F\">对家庭的用车门槛来说，可能会需要一个专用车位，而且小区物业允许你安装充电桩。<br>现在全国各地对的政策不一致，有些小区要安个充电桩会比登天还难。<br></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-e9b3e5345a9c826b8462664aa8aefb05_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"960\" data-rawheight=\"684\" data-watermark=\"watermark\" data-original-src=\"v2-e9b3e5345a9c826b8462664aa8aefb05\" data-watermark-src=\"v2-9d9e94837449a6eb118f9a1dd9b91d93\" data-private-watermark-src=\"v2-bee18b4ff6684ab9f50b2a9091318bb7\"></p>\n<p><br></p>\n<h3>然后，购燃油车的惯性</h3>\n<p data-pid=\"JChc0NmA\">这个说不好什么时候拐点来，拐点一旦来了电车的购车需求会井喷是爆发。<br>也许是明年，也许是后年，也有可能是在某年的冬季的。<br><b>虽然一定回来，但是很大概率会迟到。</b></p>\n<h2>5.与供需关系间的玄学</h2>\n<p data-pid=\"Wj_07huD\">以上的四点共同决定的供需关系的平衡，也就决定了车价</p>\n<p data-pid=\"JeCO3BUO\">比如：<br>在制造工艺和上游成本没有得到充分平摊之前，电车的车价相对燃油车是没有一点竞争力的。<b>这时即使有供也无求</b>这个时候别说涨价，先烧钱铺市占率养市场才是王道。</p>\n<p data-pid=\"H3UoIGo4\">然后政策给一点补贴给一些限牌也能够在一定程度上调整供需关系，<b>会有一定特定群体的求，但是还不能覆盖所有的供。</b></p>\n<p data-pid=\"wvKqjvzq\">然后制造成熟度提升可以让厂家持续稳定的、自己又能活下去的、又能提供给消费者在相同价格下基本等同于油车是使用体验，甚至是超出，又或者能够差异性的车的话。<b>求的部分就又对多很多，稳定很多。</b></p>\n<p data-pid=\"Zwg8ZW1M\">然后在市场接受程度上<br>电车这个之前及现在都还处于开荒的时期的愣头青是没有资格拥有定价权的，因为消费者还没接受你，更不要说需要你。<i>你看美团滴滴支付宝都是前期疯狂的补贴，只有在产品到了用户有一定使用粘性以后才敢开始提价的灰度测试。</i></p>\n<p data-pid=\"_oIw7xEA\">消费者认知的逐步转变，基础设施的不断普及。慢慢的可以让消费者很安心的去买电车。这时候的<b>求就有可能能大于供了。</b><br>这个之后所谓的产能不足，品牌溢价才会出现。</p>\n<p data-pid=\"Gqy55-wF\">以上种种因素的变化，会导致供需的天平不断的踩跷跷板。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-c07755910a216a461ffff94645864da7_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"617\" data-watermark=\"watermark\" data-original-src=\"v2-c07755910a216a461ffff94645864da7\" data-watermark-src=\"v2-1decde557b08046ea43462689be53c3a\" data-private-watermark-src=\"v2-8b3142917122580fc73c327c3e62286a\"></p>\n<p><br></p>\n<h2>6、过去、现在、未来</h2>\n<h3>过去</h3>\n<p data-pid=\"kVwH37y0\"><b>Tier X们的供货价格</b>：开始很高，然后持续稳定的快速下降中<br><b>原材料</b>：基本稳定<br><b>政策</b>：很高<br><b>制造程度</b>：大部分很垃圾<br><b>市场接受程度</b>：基本很难接受</p>\n<h3>我们在一个什么样的当下</h3>\n<p data-pid=\"xlyAlgGv\"><b>Tier X们的供货价格</b>：然后持续稳定的中速下降中</p>\n<p data-pid=\"HAGKo5TJ\"><b>原材料</b>：急剧上涨<br><i>在逆全球化的、地缘政治风险不断升级的当下。</i><br><i>而又有个别原材料只集中在少数的几个国家的现实下。又加上这恼人的疫情。</i><br><i>原材料的价格就不再是可控的了，可能急涨急跌。</i><br><i>我们什么时候见过跌到0元以下的原油，之后又绝地反击的。</i></p>\n<p data-pid=\"b7VKMea5\"><b>政策</b>：缓慢滑坡→极速滑坡<br><b>制造程度</b>：逐渐成熟，个别优秀<br><b>市场接受程度</b>：逐渐开始接受，隐隐看到拐点、</p>\n<h3>会有什么样的未来</h3>\n<p data-pid=\"Qb7lnswj\"><b>Tier X们的供货价格</b>：牙膏应该是挤不太出来了，基本维持稳定<br><b>原材料</b>：不知道，最差也差不过现在了<br><b>政策</b>：基本不会有补贴<br><b>制造程度</b>：普遍城市，优秀案例被Copy<br><b>市场接受程度</b>：成为新的购车惯性</p>\n<p data-pid=\"ghdF-xNt\">大概率逃不过一个行业内卷的宿命：<b>今天很残酷，明天很美好，后天还是很残酷。</b></p>\n<p data-pid=\"wRfIk60S\">会有一段电车拐点来临之后整个行业蛋糕变大，然后大家都有汤喝，都可以加价的时代。<br>之后就会进入红海厮杀，，普通玩家逐渐出清，一将功成万骨枯，谁都不敢加价。<br>再之后真寡头形成，消费者没的选，寡头间又有默契，随便收割消费者的加价。<br>然后又进入死亡循环。</p>\n<p data-pid=\"TYkVwUvw\">总结起来就是如下面这张图，这是全文唯二张我自己XJB画的图，看个意思就行啦。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-868898bafada3a608201944b4addebf4_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"539\" data-watermark=\"watermark\" data-original-src=\"v2-868898bafada3a608201944b4addebf4\" data-watermark-src=\"v2-b895c91e9ade1f5d9c1b90522ae8e186\" data-private-watermark-src=\"v2-5cfed891172edb63d0f5e2660349a109\"></p>\n<p><br></p>\n<p data-pid=\"s87Hvs4e\">而我们才刚刚看到电车这个新变种刚刚冒头的那么短短的一小个阶段。<br><b>还没有穿越几个牛熊，还不知道未来这个跷跷板会怎样。</b><br>以上只是我浅薄的认知下的无责任胡扯，不一定对，很有可能错。</p>\n<p data-pid=\"hajEWnOS\">（图片来自网络，侵删）</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/lin-jian-chao-66?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">小林</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/528890987/answer/2449518474?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">6 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/64373033?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">做一名超级跑车销售该从何入手？发展前景怎样？</a><br><a href=\"http://www.zhihu.com/question/297365223?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">19年A6l明年开始销售，到底该买18年A6l还是买19年A6l。？</a><br>\n","link":"http://www.zhihu.com/question/528890987/answer/2449518474?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"一派·Podcast 番外｜一名文科生的愿望，是做程序员","date":"2022-04-21 09:31:49","description":"和 @100gle 来聊聊他的故事，看看他是如何从一名社会学学生起步，最终达成了自己的愿望，以程序员的身份度过了四年的职业生涯。<a href=\"https://sspai.com/post/72769\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/72769"},{"title":"金融战史鉴（上）：战争，海盗，黄金和美元霸权","date":"2022-04-21 09:18:09","description":"\n<p data-pid=\"aZb3lyqG\">《中国经济周刊》 首席评论员 钮文新</p>\n<p data-pid=\"nQcBzFWa\">在殖民主义时代，列强明火执仗，金融是战争、海盗行为的支持者，也是掠夺利益的分享者；在产业资本主义时代，为追求贸易带来的超额利润，货币、金融是输出商品的工具，列强之间的货币地位、金融地位争夺，也是为了获得商品利益；在金融资本主义时代，追求贸易利益转变为追求“超额铸币税”利益，强权货币利用绝对优势地位，不仅从占有他国资源、商品、劳动中获利，同时还在左右全球金融价格的涨跌中获利，更从动辄就击垮一个国家经济的过程中获利。</p>\n<p data-pid=\"ep5nHg6I\"><b>丛林之蛮</b></p>\n<p data-pid=\"BFSjrJ2O\">2022年2月24日，一场“新型世纪战争”发生在俄罗斯和乌克兰之间。表面看，这只是俄乌两个国家间的军事战争，但其背后，或许已经演变为整个西方势力对俄展开的经济大战、金融大战。</p>\n<p data-pid=\"1XNUDgrI\">先讲一个现实中的故事。俄罗斯联邦储蓄银行是俄罗斯最大的银行之一，其规模占到整个俄罗斯国有银行资产的25%，这家银行在英国上市。</p>\n<p data-pid=\"pf2cy3q2\">俄罗斯被实施金融制裁、经济制裁之后，这家银行的股价从2月16日的15美元附近跌到3月2日的不足1美元。正当无数股东热切期待战争快点结束，股价能够回升之际，英国金融监管当局下了一道命令：所有持有俄联邦储蓄银行股份的投资者，必须在规定时间内清空所持股票，否则，证券代理机构将代为强行清空。</p>\n<p data-pid=\"x3UGBQz6\">股东们亏惨了，但这完事了吗？没有。有报道称部分华尔街公司开始买入俄罗斯股票。</p>\n<p data-pid=\"nXMa4SGd\">这是生意还是掠夺？其实没什么可大惊小怪，这就是战争的本质，无论是军事战、经济战、科技战、贸易战、外交战、政治战，还是文化战，其背后往往都是西方资本寡头对他国利益的掠夺，而这当中几乎都少不了金融手段。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-cb2aa1815accce0c6a0b4d40f87ab82b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"752\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-cb2aa1815accce0c6a0b4d40f87ab82b_r.jpg\"></figure><p data-pid=\"bAMPTXK8\"><b>海盗的逻辑</b></p>\n<p data-pid=\"g2I9BL0a\">说到财富劫掠，人们极易联想起海盗，但您是否听说过“皇家海盗”或“绅士海盗”这样的概念？其实，从16世纪开始，欧洲人就把那些由某国家政府或皇家支持的海盗统称为“皇家海盗”或“绅士海盗”。那时，基于新大陆的发现和殖民地的扩张，全世界的海洋上行驶着各种各样满载黄金和货物的船只，所以海上劫掠成为一种职业。这原本是一种民间强盗帮伙的犯罪行为，但老牌欧洲帝国为了强化航海技术，扩大殖民地，刻意豢养海盗，甚至使之合法化。</p>\n<p data-pid=\"g_HKFYyY\">最为典型的案例是英国“皇家海盗”，而最为著名的人物，恐怕非英国大航海家弗朗西斯·德雷克莫属。1577年和1580年，德雷克因两次环行地球，在1581年4月被英国女王伊丽莎白一世亲自登船赐予皇家爵士头衔。但是，英国人心中的这位英雄，及其统率的霍金斯船队，其实就是英国皇家特许的海盗团伙，他让英国皇家的每1英镑投资，变成了47英镑的利润。</p>\n<p data-pid=\"cAG4hK3x\">1540年，德雷克生在一个贫穷的新教传教士家庭。5岁时，因父亲躲避宗教迫害而举家迁到肯特郡，迫于生计，德雷克13岁上船当学徒，随船来往于泰晤士河和英吉利海峡。26岁加入其表兄——英国著名航海家霍金斯的船队，从此开始其全世界淘金的生涯。</p>\n<p data-pid=\"2cbAbVuU\">在16世纪的欧洲，西班牙是天主教的大梁、世界霸主，而英国却无足轻重。但是，这个时期宗教革命风起云涌，逆转着整个欧洲的政治格局。英国亨利八世创立英国教会，脱离罗马教廷，英国成为最早的新教国家之一。英女王伊丽莎白一世上台后，对内巩固新教地位，对外支持荷兰等新教国家独立，试图将英国变成新教帝国，于是英国和西班牙之间的冲突越来越激烈。</p>\n<p data-pid=\"Citxveu3\">在经济上，西班牙和葡萄牙大发殖民横财，也让英国妒火中烧。但早在1496年，英王亨利七世也曾雇佣威尼斯航海家卡波特去寻找新大陆，足迹遍及北美的纽芬兰、哈得逊湾和弗吉尼亚，以及南美洲的圭亚那等地，但并未找到金银财宝，一次次血本无归。</p>\n<p data-pid=\"2XgHKPXP\">怎么办？杀人越货，海上打劫。1585年到1604年，英国建立武装商船，每年近200次出海，专门在大西洋和加勒比海劫掠西班牙运输船队，平均每年掳获财务约20万英镑。这在当时是笔相当大的收入，而为扩大战果，伊丽莎白一世打起了海盗的主意，向仇视西班牙的霍金斯和德雷克率领的船队颁发“私掠许可证”（Privateering Commission），授权该船队合法打劫他国商船。</p>\n<p data-pid=\"WvlO_sPs\">由于得到英国皇家的资助，1572年开始，德雷克驾着武装商船，在加勒比海成为了当时让西班牙人闻风丧胆的“猛龙”，同时也成为英国家喻户晓的传奇人物，为英国劫掠财富无数。最著名的一次当数劫掠西班牙宝船“卡卡弗戈号”。1577年，德雷克得到一个情报，西班牙一艘满载金银财宝的运输船“卡卡弗戈号”正从秘鲁驶向巴拿马城。于是，德雷克在巴拿马外海设伏，于1579年3月3日将远道而来的“卡卡弗戈号”擒获，一次性打劫黄金80磅、白银20吨、银币13箱以及众多珍珠宝石。</p>\n<p data-pid=\"SkJiGZI3\">此外，德雷克利用打劫“卡卡弗戈号”获得的海图，穿过太平洋和印度洋一路西行，一年多以后才回到英国，成为环绕地球航行的第一个英国人。1580年9月26日，德雷克船队满载财宝驶进普利茅斯港，受到隆重欢迎。英女王伊丽莎白一世登上霍金斯船队的旗舰“金鹿号”为德雷克授勋，并任命他为普利茅斯市长。</p>\n<p data-pid=\"24Z9slk-\">说金融战干吗要说海盗？第一，无论是当年的远洋贸易行为，还是依托武装商船的海盗行径，其背后都必须拥有强大的资本支撑，包括早期的“股份制融资”行为的背后，都能看到所谓“皇家特许”的身影，而当时所谓的远洋贸易，其实质不过是贩奴、海盗、殖民等“丛林生意”罢了；第二，不创造财富，也不以土地占领为目标，而是依仗资本实力建立各色武装实力去偷猎、围猎他国财富，其实都属广义金融战范畴，与当今更加隐秘、更加高超的金融战异曲同工，不过是时代不同、表象不同而已。</p>\n<p data-pid=\"c1Cl6NxQ\"><b>从海洋到陆地</b></p>\n<p data-pid=\"uFSbU9M2\">如果说，海盗在海上劫掠还是帝国主义国家之间的较量，那在殖民地内部，帝国主义又是如何去劫掠驻在国财富的呢？</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-c4d44c8ed318e05b050012796f5f95e7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"526\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-c4d44c8ed318e05b050012796f5f95e7_r.jpg\"></figure><p data-pid=\"QjnDsQpl\">1840年，第一次鸦片战争爆发。</p>\n<p data-pid=\"hkK7bgYt\">以鸦片战争为例，这场让中国人深感耻辱的战争，当然与清政府各级官员腐败、清政府币制不适于经济发展密切相关，但同时也与各大帝国主义殖民者穷凶极恶紧密相连，而在所有掠夺手段背后，一场“金融战”早已在当时的中华大地打响。</p>\n<p data-pid=\"Q0Tpp4jb\">在鸦片战争之前，中国商品市场流通有两种货币：大宗交易、官方交易使用以两为单位的纹银（银锭），而老百姓和小商家的一般生活交易则使用铜钱结算。同时，银两与铜钱之间存在一个所谓的固定比率。但是，由于各种经济和货币原因，更因为各级官员借重“铜钱兑纹银贬值”渔利，导致国内金融矛盾非常突出，“银贵钱贱”问题长期存在。</p>\n<p data-pid=\"j8T96hzN\">一方面，绝大多数的老百姓很难有财力兑换白银，无法倚重白银为财富保值；另一方面，中国早年是个“贫银”国家，白银生产依赖云南、缅甸和安南的银矿，但这些地方无法提供稳定的白银来源，这使得官银来源严重依赖市场，必须依靠官方所制铜钱去市场兑换。在这样的情况下，铜钱的市场信用大打折扣，这就为境外商业和金融势力留下了可乘之机。</p>\n<p data-pid=\"_wFiGhr0\">其实，中国开放很早。康熙年间，中国在茶叶、丝绸、瓷器方面，已经成为英国、荷兰、丹麦等欧洲国家的主要供货基地，英属东印度公司等外国企业在华大量采购商品。问题是，欧洲、美国对中国商品需求量巨大，但中国人对境外输入的洋棉布、毛纺品、金属制品以及香料、胡椒、檀香等需求很少。比如乾隆四十六年至五十八年（1781—1793年）的13年间，英国输华商品总货值不过1687.15余万两，只相当于中国出口英国茶叶货值的1/6。</p>\n<p data-pid=\"4abfJzDy\">如何逆转贸易格局？英国人的方法是：第一，对茶叶进口征收高额关税，缓解贸易逆差；第二，鉴于吸食鸦片的成瘾性，再加之其中利润巨大，于是英国商人开始不断扩大鸦片对中国市场的走私规模。</p>\n<p data-pid=\"u3Rl9N2T\">此举在很短的时间内便逆转了中英贸易格局。道光十八年（1838年）鸿寺卿、黄爵滋对鸦片进口造成的白银外流情况进行了统计：从道光三年至十一年，每年白银外流1700万至1800万两；到了道光十一年至十四年，每年白银外流升至2000多万两；道光十四年以后，更达3000万两之多。史料记载，1825年，中国贸易发生从盈到亏的逆转。</p>\n<p data-pid=\"FfJQqBaG\">鸦片贸易导致白银大量外流，而这时候，美洲独立运动导致国际市场对茶叶和生丝的需求疲软，中国白银供应链近乎中断，银更贵、钱更贱。这时候，一个特有的货币现象出现了。1833年到1838年的5年间，虎门销烟的民族英雄林则徐跟踪调查发现，洋钱已充斥广东、福建和浙江等许多沿海地区。在江浙，专司“外银套购国银”的商人比比皆是，而且洋人刻意打压“国银与外银汇率”，按当时江浙的计算，浙江每百万两的外贸交易额，因汇率问题就需中方多支付10万两“国银”，而全国外贸因汇率问题流失白银上百万两。据《林则徐全集》记载：洋人“不以买货，专以买银，暗中消耗，致内地银两日少，洋钱日多”。</p>\n<p data-pid=\"M2xDCeGL\">洋人不受清政府控制地大量铸造银圆，并以此大量套取“国银”汇差。</p>\n<p data-pid=\"r9Fsf3px\">在当时的中国，严重的财富外流已经导致金融危机、经济危机，这也是道光皇帝必须痛下决心派遣林则徐禁止鸦片的重要经济背景。</p>\n<p data-pid=\"-e3CKSsS\"><b>热战的伴随者</b></p>\n<p data-pid=\"JmEtRV3o\">军事战争几乎无一例外地伴随着金融战争。战前和战中，金融为战争筹措资金，战后则收获暴利。</p>\n<p data-pid=\"M_094UzN\">更为残酷的战争和帝国主义的财富掠夺，发生在两次世界大战的过程中。先说第一次世界大战。欧洲各帝国之间争夺领地、争夺资源、争夺财富。但是，鹬蚌相争，渔翁得利。这场战争成就了一个帝国新贵——美国。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-cddb634e89fb973a531d2d67cce79c3a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"651\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-cddb634e89fb973a531d2d67cce79c3a_r.jpg\"></figure><p data-pid=\"y-besqII\">第一次世界大战时，遭到攻击后的法国贝里昂街。</p>\n<p data-pid=\"v_tqJdlo\">1914年8月4日，第一次世界大战爆发当天，美国总统威尔逊立即声明美国保持“中立”立场，8月19日，他更号召美国“在思想上和行动上同样做到不偏不倚”。但美国真能严守“中立”？正如美国史学家W·米利斯所说：“在某种意义上，美国1915年年中已经卷入战争。本质上，美国是复杂战争机器上的一部分，整个经济力量一直都在支持着其中一方，而且思想感情和政策都不可能使我们保持中立。”事实是，一战开打第一天，美国就成了英国的大后方。</p>\n<p data-pid=\"JuwIY8qe\">史料记载，1915年1月，为避免与美国的“中立”立场相冲突，英国政府委派了一位重量级商人来到纽约，并任命其为英国驻美的商务代表。这个人就是与英、美政府高层都有着密切关系，当时在国际上已极负盛名的大金融家、摩根财团的当家人J·P·摩根。</p>\n<p data-pid=\"xrSSQBsD\">J·P·摩根在美国，一只手通过大规模举债，帮英国政府募集战争经费；另一只手则用募集的钱代表协约国在美大量采购军物。这样的生意模式，让美国金融家、实业家赚得盆盈钵满。</p>\n<p data-pid=\"8C6iYQcI\">1915年8月12日，美国财政部长麦卡杜在写给威尔逊总统的一封信中指出：向协约国出售工业品让美国迎来了一个大繁荣时代，但要使繁荣持久下去，美国必须公开向协约国提供贷款。12月8日，威尔逊正式批准了政府贷款。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-3f22c2600e3f27ce2ed9b3341b3b27af_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"617\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-3f22c2600e3f27ce2ed9b3341b3b27af_r.jpg\"></figure><p data-pid=\"mio9s4Kh\">1917年第一次世界大战期间，伍德罗·威尔逊总统向国会发表讲话，向德国宣战。</p>\n<p data-pid=\"BtnWQlNC\">1917年1月，德国潜艇再次大规模封锁了美英之间的海上运输线，并声称6个月内取得战争的胜利。如果这条战争生命线被切断，德国赢得战争，那美国对协约国数以百亿计的债务势必灰飞烟灭。情急之下，1917年4月6日，美国正式对德宣战。神奇的是，摩根财团神不知鬼不觉地将其对英国政府的商业性贷款，转换成了英国政府对美国政府债务。用什么方法实现的转化？迄今为止，这是国际金融史上一个著名的迷局。但客观地看，此举为一战后的国际经济格局演变埋下了重要的伏笔。</p>\n<p data-pid=\"nwiu255z\">一战的结果是什么？战后统计数据显示，5年之间，美国工业总产值从不足250亿美元，增长到了640亿美元，增幅156.7%；美国百万富翁的人数增加17000人。时任美国财长梅隆承认，战争交易美国所获利润率高达80%。而英国财务大臣斯诺认为，美国政府从战时的本国企业手中获得了30亿美元的“超额所得税”。</p>\n<p data-pid=\"oWKZWKV8\">另外，在欧洲无力顾及拉美和远东市场之时，美国对拉美贸易从不到8000万美元扩张到34亿美元；美国已基本控制了墨西哥的石油和橡胶，玻利维亚的锡矿、智利的硝石与巴西的咖啡；美国私人资本对中国和远东市场的输出从35亿美元增长到了70亿美元。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-84d0bd621295ef891c75cdcee51b6fd3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"743\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-84d0bd621295ef891c75cdcee51b6fd3_r.jpg\"></figure><p data-pid=\"AjiSNztE\">1919年，法国巴黎，一战结束后，在法国巴黎凡尔赛举行的和平会议。</p>\n<p data-pid=\"3pcA7WOX\">更重要的是，黄金从欧洲流向美国。1919年，美国黄金储备相当于世界各国黄金储备总量的40%，并借战争所得，从境外投资者手中赎回20多亿美元的美国债务，一举从债务国变成了债权国。英国统计表明，美国借给协约国的全部战争债务总值高达125亿美元。</p>\n<p data-pid=\"-itt54py\">正如美国驻英大使佩奇在1914年10月11日写给美国总统顾问豪斯的信中所预言的那样：“战后，差不多所有欧洲国家都快破产了。海上将不再有德国。10年以后……整个世界的前途都将会落在我们手中，这是非常难得的机会。”豪斯则在回信中说：在同一个时期里，美国越来越强，交战国越来越弱，正负反差之和，就等于美国力量在成倍增长。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-d3128a05a98f1c5217e83c6e64d7a538_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1509\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-d3128a05a98f1c5217e83c6e64d7a538_r.jpg\"></figure><p data-pid=\"8Cd2ZKUe\">1919年，法国巴黎凡尔赛宫，条约签订后的美国总统伍德罗·威尔逊、法国总理乔治·克列孟梭和英国首相大卫·劳合·乔治。</p>\n<p data-pid=\"L-lwvjOH\">那战败国会是什么情况？1919年6月28日，27个国家的代表在凡尔赛宫镜殿见证了德国外长赫尔曼·穆勒签下赔偿条款，440项赔偿让德国丧失了全部的殖民地、租借地和10%的国土、12.5%的国民；丧失了75%的铁矿石资源、68%的锌矿石资源和26%的煤炭资源；丧失了20%的远洋与内河的航运能力，25%的捕鱼船队和大部分的海外投资；丧失了对军队规模的自主控制权，以及飞机、坦克和重炮等军事装备的拥有权。此外，德国还必须在未来的30年间，向战胜国交付1320亿金马克，约合330亿美元的战争赔款。330亿美元当年是什么概念？资料显示，1919年过去4年之后的1923年，世界各国的黄金储备加在一起的总价值不过200亿美元而已。</p>\n<p data-pid=\"rftp8bBh\"><b>一战之后的金融故事</b></p>\n<p data-pid=\"_nv1VhHX\">作为一战的失败者，德国签署了城下之盟，但在赔款问题上，德国也抗争过。实际上，330亿美元赔款最终是在1921年5月才确定的，而在《凡尔赛协议》的最初文本上，德国需要支付的赔款数额则是330亿美元的两倍。</p>\n<p data-pid=\"0LtOUDQL\">作为德国的老冤家，法国是一战中受损最为严重的国家，法国在战后最大的愿望是：通过战争赔款壮大自己，彻底搞垮德国，成为在欧洲大陆唯一的霸主。</p>\n<p data-pid=\"6xirkj7r\">英国并不希望德国就此一蹶不振，反而希望德国尽快恢复经济。一来，德国经济的恢复可以避免法国独领欧洲大陆，威胁英国的地位；二来，德国经济的恢复可以使英国及时且足额获得战争赔款，并以此偿还对美债务，更可压制美国不时地叫板。</p>\n<p data-pid=\"6zDMtP_t\">作为一战中最大的债权国，除决不允许“协约国”逃债外，美国还在盘算如何才能通过债务控制欧洲，为自己赢得与经济实力相匹配的国际政治地位。</p>\n<p data-pid=\"MbTGNbn-\">列强各怀心思，但抛开政治仅从经济考量，法国要恢复家园、重振经济，必须指望德国赔款；英国要清偿对美国的债务，也得指望德国赔款；美国要维系战时扩张的产能继续增长，更要指望英法等国持续购买美国商品，这势必要指望德国能够如约支付战争赔款。但德国真有能力偿付赔款？</p>\n<p data-pid=\"vtTlA7BE\">实际上，战败后的德国同样满目疮痍，工农业生产基本瘫痪，而经济恢复不仅需要时间，而且更需金钱。但是，刻不容缓的战争赔款，使德国根本无力恢复经济。1921年6月，经济死循环之下的德国，已经耗光了全部黄金储备。无奈之下，德国开动了印钞机，不过半年后的1922年1月，德国货币币值已从1美元兑493金马克，贬值到1美元兑18000金马克。</p>\n<p data-pid=\"ussLtX8Z\">更要命的是，法国以德国没有充分履行赔款义务为名，派军队占领了德国鲁尔工业区，400名德国工人被杀，2000人受伤，15万人背井离乡。在鲁尔被占后不到一年的1922年11月15日，德国货币贬值到1美元兑42000亿金马克。这是人类经济史上一个非常著名的事件，由于那时德国是“魏玛共和国”时期，所以经济史上将此次大通胀称之为“魏玛通胀”。这不仅让德国人在银行的存款变成废纸，而且德国所有债券、贷款等信用商品也变得一文不值。德国一贫如洗。</p>\n<p data-pid=\"NDqEAE9l\">客观地观察历史，民不聊生、一贫如洗的德国经济，实际给希特勒为首的纳粹党上台执政做了重要的铺垫。</p>\n<p data-pid=\"5gVJbQws\"><b>越还越多的战争债务</b></p>\n<p data-pid=\"3W0D-c3I\">德国经济状况让美国担心。如果英、法、德争斗不止，美国对欧洲的巨额债权恐将悬空，而且如果德国无力支付战争赔款，更会把美国经济拖入深渊。实际上，欧洲停战已经让美国经济痛苦不堪——欧洲对美国的商品需求骤减，美国商品出口严重萎缩，经济面临生产过剩的危机。美国历史上著名的“汽车拆毁计划”就发生在1919年，其目的就是避免美国汽车制造业破产。</p>\n<p data-pid=\"5gqTgN_a\">与此同时，欧洲结束了战时不计成本地购买，这也导致美国食品价格一落千丈。当时，美国食品管理局局长赫伯特·胡佛紧急致信威尔逊总统：我们的制造商有大量存货亟待出售，大量肉类产品也即将腐烂，如果不采取有力措施马上出口，美国市场将崩溃，银行的数百亿贷款将损失，我们的财政和农民将陷入危机。</p>\n<p data-pid=\"nleSs_Wu\">威尔逊见信后急召幕僚商议。结果是什么？美国的法律规定，判断战争什么时候应当结束是总统的权力。所以威尔逊据此决定，拒绝在1919年宣布战争结束，从而使战争期间的一项政策得以继续——向欧洲提供“胜利自由贷款”，并要求欧洲继续“用美国的贷款购买美国的商品”。“胜利自由贷款”延续了3年，直至1921年7月，美国参议院才同意结束与德国、奥地利和匈牙利的战争状态；8月，美德签署《柏林条约》，恢复两国和平；11月，接替威尔逊的美国新任总统哈丁正式宣布第一次世界大战结束。</p>\n<p data-pid=\"zpyiqtmS\">美国利用“胜利自由贷款”为本国经济赢得了宝贵的时间，但大西洋彼岸的英国却深陷全面经济萧条。战争中英国物价上涨300%，国家债务增长了9倍有余。正所谓“鹬蚌相争，渔翁得利”。法德死掐、英国重债的特殊时局，赋予美国一个重大机遇，美国以维护债权安全与完整为由，强势介入欧洲事务，逐渐开始在列强间占据核心位置，让英法两国退居到了从属地位。</p>\n<p data-pid=\"8CDDQlGx\">1923年10月，一份精心炮制的计划问世了。这是一份由美国时任国务卿查尔斯·休斯主导，摩根家族的亲密盟友、银行家查尔斯·道威斯起草，专门针对德国战争赔款的新计划，史称“道威斯计划”。几经努力，这份计划在1924年9月1日获得了英法德一致同意，并开始实施。</p>\n<p data-pid=\"vTz9_10X\">所谓“道威斯计划”简单说就是，由美英主导的国际金融机构向德国提供贷款，帮助德国恢复经济，并使之获得偿付战争赔款能力；德国则分5年支付战争赔款，最终截止日为1929年9月1日。</p>\n<p data-pid=\"GwE0Iymm\">为了“道威斯计划”的顺利实施，英美银行在柏林设立了办事处，委派了摩根财团的合伙人帕克·吉尔伯特作为赔款总代理，全权打理与赔款相关的金融业务。于是，英美银行把钱借给德国，而吉尔伯特会立即把钱变成战争赔款交还给英法政府；英法政府再把其中的一部分用于向美国政府偿债，另一部分则用于进口美国商品。同时，为维护“道威斯计划”的顺利实施，美联储把美国市场利率压得非常低，这使高息的德国债务吸引力大增，从而确保了美国私人贷款源源不断地流向德国。</p>\n<p data-pid=\"zc9YOWWR\">毫无疑问，“道威斯计划”让美国国际地位大大提升，但德国得到了什么？两个结果：第一，把政府间的战争赔款转化成了德国政府对英美私人银行欠债；第二，德国政府向私人银行举债，其利率远远高过《凡尔赛协议》规定的5%水平，再加上名目繁多的佣金、手续费，德国债务成本大幅提高，以至通过借债支付战争赔款的德国，债务（或战争赔款）越赔越多。统计显示：1924年到1931年期间，德国一共支付了105亿帝国马克的战争赔款，但从海外借的债务却增加了186亿帝国马克。德国经济会因此得以恢复？不可能。</p>\n<p data-pid=\"8E__bG5X\"><b>1929年股灾背后的金融较量</b></p>\n<p data-pid=\"HBB3nCrJ\">表面看，“道威斯计划”使英法经济得到了恢复，也使美国的制造业获得了欧洲的订单，同时又造就了金融的繁荣。但是，这都源自德国负债规模的不断增加。这势必为日后的危机埋下了种子。很明显，如果德国经济不能因此而走向兴盛，德国债务增加依然属于简单盘剥，这件事可持续吗？</p>\n<p data-pid=\"uAgH-KIN\">不过，这段历史中最为醒目的事件，还是美英之间的金融斗法。</p>\n<p data-pid=\"RabpFu2_\">1925年，本该全力恢复经济的英国，却十分着急拯救日渐衰落的英镑地位。其财政大臣温斯顿·丘吉尔四处奔走，试图重建战前强势的金本位英镑地位，以及1英镑兑4.86美元的固定汇率。在他的极力说服下，英美货币汇率被固定在1∶4.86。但是，把战前1∶4.86的汇率放到战后，按照当时美英两国的经济实力对比，是否意味着英镑币值严重高估？当然。所以，英国出口变得十分困难，而英国人更倾向于持有美元，以致欧洲黄金大量流向美国。</p>\n<p data-pid=\"Gr2hknbs\">如此态势让英国央行行长蒙塔古·诺曼无法忍受，但他根本无力说服丘吉尔允许英镑贬值，放弃金本位。怎么办？1927年春，诺曼偕同法国、德国的央行行长一起来到美国，试图说服美联储降低利率，阻止黄金进一步流向美国。美联储屈服了，力排众议把联邦基准利率从4%降到3.5%。这次降息行动，后来被许多经济学家视为“美联储历史上最愚蠢的行动之一”，而一年后当选第31任美国总统的赫伯特·胡佛，更把这次降息定义为“叛国行动”。</p>\n<p data-pid=\"VfHNbRL9\">在低利率刺激下，美国经济一片繁荣。1928年12月4日，美国第30届总统柯立芝发表了其任上最后一份国情咨文。他对国会议员说：美国正经历一个前所未有的、令人鼓舞的繁荣时代。</p>\n<p data-pid=\"JL43JGpL\">尽管柯立芝的乐观受到了整整一代经济学家的批评，但客观地说，1924年到1929年的5年，美国经济确实在突飞猛进。1924年，美国人拥有一台收音机还是一件新鲜的事儿，但到了1929年，美国已有1000多万个家庭至少拥有一台收音机。这期间，美国发明了消费信贷，随之汽车年产量从1924年的290万辆，增长到1929年的530多万辆；这期间，美国钢铁产量年均增长8%，而美国的国民生产总值（GNP）也从608亿美元增加到了680亿美元，而人均GNP增长了25%。当然，同时可以看到华尔街股价指数（《纽约时报》25种工业股票价格指数）从1924年5月底的106点，上涨到了1929年10月21日（崩盘前）的378点。</p>\n<p data-pid=\"ZLW5optl\">美国经济是否过热了？1928年下半年，美国政府已经注意到股票市场与信贷市场相互推动的疯狂投机，但因为对英、法、德的承诺，美联储不敢轻易放弃低利率政策。如果美国加息，欧洲黄金会否更加疯狂地涌向美国？会否加剧美、英、法等国之间的经济矛盾？其实，这个问题放在今天很好理解：按照诺贝尔经济学奖获得者保罗·克鲁格曼的“三元悖论”原理，在实施固定汇率制度的条件下，市场充分开放与独立货币政策之间，只能二选一。依此可见，当时美国和英国实施固定汇率，而且市场充分开放的前提下，美国要想独立加息或减息，几乎不可能，必须要看英国货币政策的脸色。</p>\n<p data-pid=\"S54SnxhK\">1929年2月7日，正当美国还在考虑是否通过加息抑制市场投机之际，英国先动手了。这日，在美国毫不知情的情况下，英国央行单方面将银行贴现利率从4.5%提高到了5.5%。此举骤然改变了资本流向，大量投资人开始用美元兑换黄金，然后汇往伦敦。此举瞬间导致市场美元流动性收缩，于是，华尔街股市受不了了。1929年2月14日，美联储召开紧急会议，商议纽约联邦储备银行是否该把再贴现利率从5%提高到6%，借以阻止黄金储备急剧下降，但会议无果而终。原因是与会者认为，加息会打压股市，打压国内制造业。</p>\n<p data-pid=\"BFnhiwAL\">1929年3月26日下午，当华尔街短期拆借利率攀升到空前的20%、美国金融市场发生严重资金短缺之时，英国央行行长蒙塔古·诺曼再次出现在美国，不过，这次他是来要求纽约联邦储备银行立即加息的。8月9日，当纽约联储把再贴现利率从5%提高到6%之时，华尔街股市开始走向崩盘。1929年10月24日，华尔街股市崩盘，而英国财长丘吉尔正巧站在纽交所的看台上，他目睹了当天发生的一切，并叹息道：“上帝啊，这是多么可怕的一天啊！”</p>\n<p data-pid=\"Y-6GB1Fm\">两年之间，英国迫使美国减息，吹胀美国经济泡沫，然后再迫使美国加息刺破美国经济泡沫，这是英国人为维系自身地位而刻意打压美国的手段吗？确有学者认为，酿成1929年华尔街股灾和上世纪30年代美国经济大萧条的真正祸首，就是英国的财政大臣丘吉尔和央行行长蒙塔古·诺曼。</p>\n<p data-pid=\"I2_SwEkg\"><b>玩火自焚的金融攻击</b></p>\n<p data-pid=\"GWhl_sSk\">按照“道威斯计划”，德国的战争赔款变成了185亿帝国马克的短期外债，而美国发生“1929大危机”，也导致英美银行大力度从德国撤回资金，迫使德国再次走上了“破产的钢丝绳”。德国会摔落下来吗？回答这个问题，必须要说到奥地利维也纳信贷银行的破产倒闭。</p>\n<p data-pid=\"avCGkhKi\">一战后，《凡尔赛协议》以极其苛刻的条件“肢解”了奥匈帝国，切断了奥地利与匈牙利等东欧国家之间最有价值的经济循环链——资源供给，以致奥地利工业从此废墟一片，再也没能恢复起来。但是，偿还战争赔款却是少不了的义务，此时维也纳信贷银行在摩根财团、英格兰银行等巨头的支持下，变成了奥地利最具实力的金融机构。但面对一片废墟的奥地利，维也纳信贷银行又能做些什么呢？</p>\n<p data-pid=\"eoLb6hJZ\">为什么摩根财团、英格兰银行等巨头要支持维也纳信贷银行？因为要让它扮演一个特殊角色——收购奥地利的中小银行、收购奥地利政府为偿债而不得不变卖的优质资产。维也纳信贷银行靠什么赢利？没有，只是依靠国内储蓄和短期外债所提供的现金流动性维系运转，而收购资产所需资金，全部来自境外金融机构提供的短期融资。</p>\n<p data-pid=\"FAweOzts\">本就虚弱的维也纳信贷银行遇到1929年华尔街寒流，美英巨头纷纷撤回资金，收缩战线，维也纳信贷银行的流动性立即中断，但还能惨淡维系。1931年初春，奥地利与德国趁着美英自顾不暇，重新结成贸易和海关联盟。此举严重刺激了法国的神经。法国认为，德奥商业联盟势必导致重新开始政治与军事联盟，从而对欧洲大陆的安全构成威胁。怎么办？为制止这一联盟，1931年3月，法国政府责令大幅削减对维也纳信贷银行的短期融资。</p>\n<p data-pid=\"GCkAg5QL\">原本为了击垮德奥联盟，法国报刊释放一则虚假新闻，说“维也纳信贷银行正在遭到挤兑”，但没想到，法国不仅因此而引火烧身，而且引发了一场震撼整个欧美金融市场的信用危机。</p>\n<p data-pid=\"hqXubkP8\">随着维也纳信贷银行的率先倒闭，德国银行业开始遭受全面挤兑。1931年7月13日，德国第二大私人银行——达姆施塔特国民银行宣布破产。很快，人们开始怀疑德国已经无法继续支付战争赔款，从而使挤兑风潮冲向法国、英国乃至整个欧洲，信用危机发生。</p>\n<p data-pid=\"nxF5lk9Y\">美国如何？1929年危机发生之后，胡佛总统实际已经采取了许多措施以稳定美国经济，他甚至要求工业巨头们不许解雇工人、不许减薪，维护市场活力。1930年年底，美国经济出现了转机，股市也于1931年3月收复了1929年的失地。但就在这时，欧洲信用危机突然爆发，信息灵通的华尔街大佬再次疯狂抛售股票。1929年以后，为强化投资者信心，摩根财团率华尔街金融机构出资构建的“救市基金”，居然也全部清仓。</p>\n<p data-pid=\"62P894jp\">欧洲和美国之间相互拖累的恶性循环，导致长达4年的全球经济大萧条。其间，太多惨绝人寰的悲剧，而值得历史记忆的是：1931年9月22日，英国政府违约，放弃英镑金本位、放弃英镑和美元之间的固定汇率，同时再次加息以支持强势英镑，而各国金融机构更加拼命地收回外债，全世界债务链彻底断裂，经济雪上加霜。</p>\n<p data-pid=\"GsKrloxM\">德国经济彻底垮台，社会陷入混乱，看到英国失信的德国公众也彻底愤怒了。与此同时，法国也垮了。从1921年到1931年，德国能够足额、及时地支付战争赔款，一直支撑着法国经济预期，但如今，这个预期彻底破灭了，法国经济大萧条顺理成章地变成了现实。</p>\n<p data-pid=\"-6QJxTOM\">美国也很惨。胡佛总统百般努力下的经济希望，被英国霸道的金融行径彻底打入了深渊：1600万人失业，数以百万计的国民只能靠泔水为生；农产品大幅跌价，许多农场主杀光牲口扔进山涧；业主还不起银行贷款，银行不能兑付储户存款，到1932年11月，美国银行体系彻底崩溃。尽管新任美国总统罗斯福启动了行政干预手段，但到1933年3月，美国依然有9000多家银行清盘关张。</p>\n<p data-pid=\"a0EVnh_D\">比欧美各国经济灾难更不幸的是，阿道夫·希特勒高喊着“拒还外债”的口号登上了历史舞台。1932年，希特勒在他的竞选演说中最常用的一句话就是：如果我当政，我将撕毁《凡尔赛协议》，拒绝还债，还给人民一个强大的德国。一年后，他登上德国总统宝座，为第二次世界大战的爆发埋下祸根。</p>\n<p data-pid=\"pPXmH7CB\">由此可见，1929年发生的经济大萧条，其原因并非“华尔街过度投机，以致股市泡沫，然后泡沫破灭，拖累经济”那样简单，而其实质是西方列强无所不用其极地进行恶性财富争夺的必然结果。整个过程中，欧美金融市场被金融巨头串联成一个整体，而列强为自身的超额利润你一招、我一式，让政策牵引金融资本大规模跨境流动，才是导致经济在泡沫和负泡沫之间循环往复，金融危机在各国间此起彼伏的根本原因。</p>\n<p data-pid=\"jiMrknq3\">殖民地时代，金融战的主要特点无非是资本支撑战火，战火开辟市场，市场支撑资本掠夺。这个时期列强之间的金融争夺，大致也只体现为“财富运输线”上盗猎与反盗猎，而盗猎与反盗猎的比拼当然也离不开国家实力的比拼，离不开资本对航海技术的支撑，但总体而言，是财富从弱国流向强国，从殖民地流向宗主国。</p>\n<p data-pid=\"5T43zTpK\">到了第一次世界大战，战争变成了强强对决，而金融战的特征也随之发生变化：第一，交战各方，不仅要在全世界搜刮财富和金融资源去支撑自己的战争实力，同时还要破坏对手的金融能力，削弱对手的战争支撑力。第二，尽管美国在一战中跃居世界经济之首，但列强之间的经济实力、政治实力、金融实力等并无巨大落差，加之这时，金融寡头的行为实际已经将列强的金融市场连成一体，所以任何一个国家对其他国家的金融破坏，都极易招致全球性的金融灾难。尤其战后，当金融巨头的行为失去政治倾向而只为自身敛财服务时，任何一个点上的金融失衡，都会招致整个金融大厦的倾覆。</p>\n<p data-pid=\"Yw-hyJlW\"><b>强强对决</b></p>\n<p data-pid=\"d2D6T9gj\">第二次世界大战期间的金融战与一战几乎无异，不同的是二战之后，美国获得了更大的战争利益，经济实力已经超越老牌列强，从而得到了绝对权威的国际话语权。</p>\n<p data-pid=\"kZeNPyXG\">说到这儿，最该点名的事件就是建立布雷顿森林体系。布雷顿森林是美国新罕布什尔州中北部华盛顿山脚下的一片橡树林，其间坐落着一个建筑群。这里之所以拥有举世瞩目的地位，是因为二战后重构世界经济格局的“布雷顿森林体系”就诞生在这里。</p>\n<p data-pid=\"d4tufhmZ\"><b>布雷顿森林的较量</b></p>\n<p data-pid=\"o3tezn4w\">二战结束后，欧洲要重建，经济要恢复，世界是否还要回到一战后那种经济混战格局？实际上，英国首相丘吉尔和美国总统罗斯福早在1941年就开始考虑这个问题。在他们看来，列强间无序的利益争夺，正是战争周而复始的重要而直接的诱因。尤其是恐怖的1930年代，各国为了各自摆脱危机，最后掉进“囚徒困境”的陷阱。</p>\n<p data-pid=\"5pdKtrI3\">于是，列强接受了凯恩斯主张。既然一个国家内部的经济活动需要政府这只权威之手予以调控，那处理国际经济事务，是不是也该有一种“超主权力量”去维护稳定与持续？丘吉尔和罗斯福都明白，谁主导这个“超主权力量”，谁就将拥有世界经济霸权，并赢得最大的经济利益。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-1e1cd0e18fa9bed9df4600f44a4a86fe_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"840\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-1e1cd0e18fa9bed9df4600f44a4a86fe_r.jpg\"></figure><p data-pid=\"2fQHG-yv\">1941年8月10日，大西洋宪章会议期间，在威尔士亲王号战列舰甲板上，美国总统富兰克林·罗斯福(前排左)，英国首相温斯顿·丘吉尔(前排右)。</p>\n<p data-pid=\"CG6DSL8A\">很显然，老牌霸主英国和战争新贵美国，谁都不会放弃这个机会。1941年，罗斯福和丘吉尔共同发布了《大西洋宪章》。建议战后成立以胜利国为核心的“联合国”，借以稳定国际政治秩序；建立一个国际贸易组织，借以形成均衡稳定的国际经济秩序。实际上，一场没有硝烟的经济争霸战已经暗流涌动，在英美间拉开了战幕。</p>\n<p data-pid=\"YQoxGw52\">1944年7月1日，华盛顿森林中的华盛顿山饭店人满为患，44个国家的730位代表下榻这里，共同见证人类历史上第一个国际货币公约——《布雷顿森林协议》的诞生。但在当时，聚光灯下实际只有两个人，一位是代表英国主张的、对现代经济政策有着巨大影响的经济学家约翰·梅纳德·凯恩斯，另一位则是代表美国主张的——美国财政部部长助理、经济学家亨利·迪克特·怀特。他们带着各自的方案，展开激烈辩论，而其他国家的代表不过是看客和最终方案的被动接受者而已。</p>\n<p data-pid=\"ZXfeEs2e\">英国和美国的两个方案都主张创立一个国际货币机构、世界的中央银行、国际清算联盟——国际货币基金组织（IMF）的前身。但核心是用于国际贸易计价与结算的“超主权货币”应当是谁？怀特方案认为，它是美元。凯恩斯认为，它是班克尔(bancor)——由各国主权货币构成货币篮子，再由国际清算联盟发行班克尔；班克尔盯住黄金，其他国家货币盯住班克尔；国际贸易以班克尔计价结算，并按各国的出资比例和国际贸易的规模大小，分配使用。</p>\n<p data-pid=\"nh2tN2aF\">凯恩斯何以给出班克尔方案？后人分析，那时的凯恩斯已经意识到，两次世界大战已使英、法、美三国的经济实力发生了根本性逆转。英镑、法郎、美元三足鼎立的国际货币格局也已一去不复返了。所以，如果不能有效限制美国特权，英、法的国际经济和政治地位也将彻底让位于美国。1944年，美国向盟国提供的货物和劳务价值500多亿美元，同时拥有的黄金储备已占世界黄金储备的60%，工业生产总值也相当于全球的50%，制造的商品已占世界总量的35%，军事工业能力是轴心国的两倍。</p>\n<p data-pid=\"vk8e4SwX\">凯恩斯败了，拼死抗争22天后的1944年7月22日，最终方案浮出水面。美元在华盛顿山脚下的布雷顿森林里夺得了国际货币之王的桂冠。《布雷顿森林协议》的核心有两则，其一是《关贸总协定》，试图统一各国的贸易政策，限制各国政府采用鼓励性贸易措施，伤害其他国家的贸易利益；其二是布雷顿森林货币体系，试图建立一套国际公认的汇率体系，避免个别国家通过主动性货币贬值去刺激出口，引发恶性出口竞争。</p>\n<p data-pid=\"P7nJBMuS\">布雷顿森林货币体系是什么？第一，各国货币盯住美元，波幅不超1%；第二，美元挂钩黄金，各国可随时以美元兑换黄金，金价固定为35美元/盎司；第三，成立国际货币基金组织（IMF）作为“世界央行”，个别国家出现临时性美元短缺，IMF为其提供流动性；第四，成立国际重建与开发银行（IBRD）——世界银行的前身，由它向战火涂炭的国家提供基础设施重建贷款。</p>\n<p data-pid=\"mYH_SmLS\">从此，美元站到了国际货币体系的中心位置，一直延续到今天。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-1691516557271dc392e914b47a38f7a6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"741\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-1691516557271dc392e914b47a38f7a6_r.jpg\"></figure><p data-pid=\"YbCjbCLc\"><b>利益面前无道德</b></p>\n<p data-pid=\"mXGd33QV\">两次世界大战让美国赚得盆盈钵满，而布雷顿森林体系更让美国站到了全球利益丛林的食物链顶端。</p>\n<p data-pid=\"Q-bUqW-B\">1945年5月8日，盟军与苏军会师柏林，从而宣告了第二次世界大战的结束。与一战结束后一样，美国同样出现生产过剩的危机，但美国吸取一战教训，在布雷顿森林体系中已经专门做好制度安排，美国通过世界银行间接向欧洲提供进口信贷，用于购买美国商品。</p>\n<p data-pid=\"BK7-SBlX\">到了1947年初，透过世界银行的贷款已经显得“太有节制”了。美国国务卿马歇尔到访莫斯科，然后又到处走了一圈，他发现，欧洲经济依旧乏力。怎么办？马歇尔回到美国后，参照一战后的“道威斯计划”，制定了一份欧洲复兴计划，史称“马歇尔计划”。按照这份计划，美国绕过世界银行开始直接向欧洲提供更多的贷款，这些贷款不仅帮助盟国，同时也帮助德国和日本。</p>\n<p data-pid=\"OjlVD__7\">其实，英、法、美国一直都在分析一战的教训，他们的共识是：严酷的战争赔款实际无法实现，最终导致了一战之后的经济混乱。所以二战后的盟国，除把战争罪犯（个人或组织）推上审判台以外，胜利者并未提出战争赔款问题。之所以这样做，理由是德国和日本将是美国未来的出口市场。</p>\n<p data-pid=\"rJ-rUFl2\">此时的美国所贪图的是传统意义下的“出口利益”。历史地看，列强间的贸易争夺其实都是顺差争夺，通过对欧洲的信贷，消化美国产能的同时，获取巨额贸易利益。统计数据表明，1948年到1954年，美国向欧洲提供了170亿美元的贷款，这些贷款绝大部分用于美国商品的采购。其中，购买仪器和棉花占46%，购买煤炭占16%，购买钢材和铝材占19%，只有14%被欧洲企业用在追加资本支出。</p>\n<p data-pid=\"qmSdJBuf\">更重要的是大量美元贷款投向欧洲，培养了欧洲人使用美元的习惯，树立了美元在整个西方世界无与伦比的地位。美国占到了经济丛林的食物链顶端，只需大量发行货币，输出贷款，美国的商品就可以大规模地出口海外。</p>\n<p data-pid=\"2Kc1Uho7\">伴随着贸易带来的超额利润，华尔街也一扫30年代的暗淡。与之相对，美元发行的执行机构——美联储纽约分行更是繁忙异常，美元供应量持续大幅增长，而这个增长的背后则是全世界的黄金滚滚流入美国。</p>\n<p data-pid=\"8WWzkAjf\"><b>朝鲜战争的冲击波</b></p>\n<p data-pid=\"liffkajN\">著名的“马歇尔计划”让美国人迅速富有，也让欧洲经济加速复苏。两年后，1949年10月，美国的黄金储备已高达400多亿美元，占到世界各国黄金储备的78%。</p>\n<p data-pid=\"vqI_VSH6\">1950年6月25日，朝鲜战争爆发后，踏着布雷顿森林体系的脚步走进白宫的美国民主党总统杜鲁门，着实感到了不安。</p>\n<p data-pid=\"zJWE0NyI\">战场上频频失败的美国开始在经济上封锁中国，最先干出的一件事是，冻结中国在美的全部资产。但没想到，这招吓坏了欧洲人。一来，西欧大量的美元收入，来自对东欧的贸易，所以西欧生怕美国也把自己的美元资产冻结掉；二来，深陷朝鲜战争的美国开始出现财政赤字，美元资产是否会因此而贬值？</p>\n<p data-pid=\"hr0nE0ys\">此时此刻，英国看到了恢复伦敦金融中心地位的机会。于是，英国采取不问出处、税收优惠等一系列手段，试图把欧洲美元吸引到伦敦，形成美国之外世界最大的美元市场。这招着实灵验，不仅欧洲国家所需美元不必再向美国借贷而转去伦敦，同时，一些美国企业为避开国内高税率，把自己的海外收益放到了伦敦。这样的态势一直持续至今，伦敦金融城不仅是欧洲美元市场，同时也是世界最大货币交易市场。</p>\n<p data-pid=\"VDRa7jfB\">毋庸置疑，维系布雷顿森林体系必须具备两个前提：其一是美国必须保有充足的黄金储备，以维系国际收支平衡和其他国家无条件以35美元/盎司兑换黄金；其二是美元保持坚挺、维持世界对美元的信心。但欧洲美元市场的出现，越来越多的美元离开美国本土，这势必威胁到布雷顿森林体系。</p>\n<p data-pid=\"h73CEXhn\">尤其是欧洲从战火废墟中恢复，使用的机器比美国更新、更先进，制造的商品比美国更好、更便宜。因此，在“陷入战争+工业老旧+欧洲争夺”的合力之下，全球贸易格局开始逆转。在贸易上，美国贸易顺差变为逆差；在金融上，为弥补逆差美国只能放大美元货币数量，但货币越发越多，黄金却不再流入美国。这动摇了35美元兑换1盎司黄金的基础，美元贬值预期伤害了世界对美元的信心。</p>\n<p data-pid=\"buGGSrEQ\">1946年，一直反感布雷顿森林体系的法国总统戴高乐将军尖锐指出，美元作为特权货币，把世界贸易变成了美国的仓库。美国出现贸易赤字，不用像其他国家那样为外汇储备减少而苦恼，只要多印些美元就可以无偿地向其他国家换取商品和劳务。</p>\n<p data-pid=\"-j0FfLPr\">1958年，世界对美元的怀疑终于演化为一场抛售。1960年1月2日，约翰·肯尼迪在参议院秘密会议厅面对300名支持者宣布他将竞选第35届美国总统，但此时，美元抛售狂潮在欧洲冲向极致。伦敦黄金价涨到41.5美元/盎司，意味着美元贬值超过20%。这一年，在欧洲平均投资回报率16%、高出美国一倍的吸引下，470亿美元的美国资本流向欧洲，1957年这个数字只有250亿美元；这一年，美国黄金储备加速下降，1950年其总值400多亿美元，此时还剩不足200亿美元；这一年，美国财政赤字超过200亿美元，历史上第一次超出黄金储备总值；这一年，美国工业产值下降14%，出口萎缩，加之资本的大量外溢，美国国际收支出现20亿美元逆差。</p>\n<p data-pid=\"wgj6Y5a5\">这是布雷顿森林体系建立后，美元出现的第一次危机，倍感惶恐的美国政府立即邀请英国、法国、德国、意大利、荷兰、比利时、瑞典、加拿大、日本召开紧急首脑会议，商议如何应对危机。会上，各国首脑接受了美国的提议，把各自的黄金储备集中到一起，构建了历史上著名的“10国黄金储备池”。同时，各方签署货币互换协议——互惠贷款协议，并通过这个协议，欧洲9国对美提供200亿美元贷款。一系列举措下，美元勉强渡过难关。</p>\n<p data-pid=\"LRHilBQK\"><b>布雷顿困局</b></p>\n<p data-pid=\"o986nOm1\">第一次美元危机注定了布雷顿森林体系的动摇，美元会否因此由兴而衰？1961年1月，肯尼迪入主白宫，同年，美苏两国长达28年的“冷战”正式拉开帷幕。</p>\n<p data-pid=\"ieW7FXC9\">不过，另一道“冷战之墙”也在人们的不经意间形成。鉴于凯恩斯主义的主导，产业资本和金融资本针对政策资源的争夺，使之产生了巨大的隔阂。民主党身份的肯尼迪非常在意美国实体经济的良性发育。他认为，实体经济才是一国经济之本，是创造财富的源泉，也是国民更多走向中产的基石。但是，肯尼迪的“实业兴国”之路非常坎坷，因为他触犯不少金融权势集团的抵制。</p>\n<p data-pid=\"X_SfBNdA\">同时，肯尼迪还遇到了另一个大麻烦，欧美市场早已被金融巨头实际联通（开放），而布雷顿森林体系实际构建的是固定汇率制度，在此背景下，美国货币政策基本作废（上文已经讲述过“三元悖论”）。就是说，如果美国降息或大量投放基础货币，资本将流向高利率的欧洲；如果为阻止资本外逃而加息或减少货币供给，那美国实体经济势必受到进一步打压。</p>\n<p data-pid=\"4NyvC7W3\">1963年7月18日，无奈的肯尼迪只能寄望财政政策。他强硬要求国会通过法案，对外流资本课以15%的重税。话音刚落，华尔街怒骂一片，法案遭到英、美金融巨头的激烈反对。肯尼迪终于没能看到这部法律，法案提出127天之后的1963 年11月22日，美国史上最年轻的总统肯尼迪，倒在了刺客的枪口之下。从此，“实业兴国”的理念与美国渐行渐远。1964年9月，尽管相关法案最终还是获得了美国国会的批准，但其中的条款被微妙修改，根本没能起到阻止资本自由流动的目的。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-dd57f7479ce5e2936152dec8e1203fe9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1663\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-dd57f7479ce5e2936152dec8e1203fe9_r.jpg\"></figure><p data-pid=\"UBNu7b5G\">约翰·F·肯尼迪遇刺后的交易所</p>\n<p data-pid=\"WdHMxJRU\">有一种说法称肯尼迪被跨国金融集团暗杀了。但无论是不是这样，“肯尼迪事件”深深地刺激着一位著名的美国教授、美国耶鲁大学的罗伯特·特里芬。布雷顿森林体系确立后，他一直在研究，试图建立一个能够维系世界经济长治久安的健康货币体系。1960年，第一次美元危机爆发，特里芬顺势出版了自己的研究成果，经济史上非常著名的一部专著《黄金与美元危机》，以此从理论上阐述了布雷顿森林体系的设计缺陷，并指出了美元致命要害。</p>\n<p data-pid=\"OeFZ60yK\">布雷顿森林体系把美元当作国际唯一计价与结算货币，其他国家必须大量储备美元，为国际贸易顺利进行；其他国家的美元储备从何而来？对美出口并保持顺差。但是，美元是否经得起长期美国经济长期逆差？这就是矛盾。第一，美国长期贸易逆差，美元贬值实属必然，其他国家是否愿意不断增加美元持有？第二，当其他国家怀疑美元即将贬值之时，势必以美元储备大量兑换黄金，美国的黄金储备能维系多久？这个布雷顿森林体系之下的无解之题，就是著名的“特里芬困境”。</p>\n<p data-pid=\"XUBls46H\"><b>列强间的暗战</b></p>\n<p data-pid=\"5oNMZmx5\">特里芬致力于改变这一“困境”，但在美国，没人愿意理睬这件事。在肯尼迪之后担任美国总统的约翰逊更不愿意正视美元问题，他用一种卸责的解释为美国大量印钞辩护：“世界黄金产量根本不足以支持全球货币体系，而用美元作为储备货币，这实际是为全球贸易提供至关重要的流动性。”此言一出，欧洲一片哗然，盟友们也倍感恼怒，因为他们心知肚明，美国大量印刷钞票，不过是为自己支付巨额军费开支。事实是，那时美国在越南正值酣战，到了1967年底，美国政府已经在越南战场花掉了2000多亿美元，但第二次美元危机爆发，欧洲美元市场再掀美元抛售、黄金抢购风潮，“特里芬困境”再次发作。</p>\n<p data-pid=\"ZfcwD_rw\">率先站出来发难的是法国总统戴高乐将军。1967年，法国中央银行决定，把自己手里的英镑和美元全部兑换成黄金，退出“10国黄金储备池”。戴高乐甚至扬言，他将亲驾军舰运美元到美国去运回本该属于法国的黄金。法国的行为引起欧洲许多国家仿效，一时间，黄金炙手可热。</p>\n<p data-pid=\"vBZrNjHa\">情急之下，美国再出损招儿——宣布美元与黄金兑换“双轨制”，即美国只对各国央行维系35美元/盎司的布雷顿森林协议，至于伦敦黄金市场价格则任其随行就市，美国不再承担固定比价义务。此举，暂时保住了美国本土的黄金储备，但却把英镑推进火坑——因为英镑兑黄金即将贬值的预期，市场开始把抛售重点集中于英镑。1967年11月18日，英国工党首相哈罗德·威尔逊顶着白宫不许英镑贬值的压力，放弃了执行22年、1英镑兑换2.8美元的固定汇率，英镑瞬间贬值14%。</p>\n<p data-pid=\"VTZ8ID26\">英镑贬值让压力也转向美元。资料显示，1968年3月8日到15日，短短7天的时间里，美元兑换黄金的风潮让英国央行搬出了1000多吨黄金，但根本无法制止美元和英镑的疯狂抛售。于是，英国向美国发出调运黄金储备的请求，美国空军出动大型军机，从诺克斯堡的美国金库向伦敦输血。那时英格兰银行称重室的地板上堆满黄金，几乎不堪重负。1968年3月15日，美国要求英国暂闭黄金市场，希望借以稳定市场情绪。</p>\n<p data-pid=\"Hxuys5nW\">由戴高乐挑起的这场金融战争，让英美焦头烂额。1967年1月31日，戴高乐为显示执政10年的经济成就宣布，从即日起，法郎与黄金按固定价格自由兑换。此举，当然是要把国际货币权力从英美手中夺至法国，但在金本位下，戴高乐的决定无异于彻底开放法国金融市场。</p>\n<p data-pid=\"zHm6WIIG\">消息一出，英美媒体大肆吹捧法郎如何坚挺，黄金存底如何充足。而在热捧之中，英美两国金融家裹挟着金融投机客蜂拥法国，他们从世界各地调来一切可换法郎的货币，让法国金融市场变得异常火热。但是，戴高乐对市场热浪大加赞赏，并视之为自己10年执政的最高奖赏。</p>\n<p data-pid=\"B2SKVdUv\">可好景不长，经济火爆刚刚一年，“五月风暴”开始了。动荡引发外国资本恐慌，纷纷以法郎换购黄金并运往境外。到1968年底，法国失去了30%的黄金储备。自此，英美货币危机成功转嫁给了法郎。</p>\n<p data-pid=\"z9nQxmk9\">“五月风暴”之后不到一年，戴高乐——西欧唯一敢和美英叫板的政治明星，黯然陨落。有经济学家分析，在不适宜的时候放任法郎与黄金的自由兑换，这给英美金融豪客狙击法郎提供了绝佳条件，这是戴高乐所有经济政策中最大的败笔。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-1fa3ca4ac9b141b26e69b728f1395fff_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"735\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-1fa3ca4ac9b141b26e69b728f1395fff_r.jpg\"></figure><p data-pid=\"mJQemPEt\"><b>为维系货币霸权</b></p>\n<p data-pid=\"qDLv_IDf\">两次美元危机已使布雷顿森林体系摇摇欲坠。被迫之下，美国必须尽快结束越南战争为失控的财政支出止血。所以表面看，撤出越南是国内反战白热化的结果，但更深层的原因恐怕应当是美国急需扭转市场信心，破解美元危机，维持布雷顿森林体系之下的美元霸权。1968年3月31日，约翰逊提出逐步撤出越战，并放弃连任美国总统的努力。</p>\n<p data-pid=\"lzUauUG0\">1968年4月，伦敦黄金市场暂停两周后恢复交易。这时，美国已把10国首脑再次聚集到了瑞典首都斯德哥尔摩，召开一个紧急而特别的会议。会上，IMF拿出一套方案，试图改革国际货币体系。这套方案设计者就是“特里芬困境”的提出者、美国耶鲁大学教授罗伯特·特里芬。他建议，以IMF所拥有的资产为基础，发行一种特殊货币符号——特别提款权，成员国按出资比例获得相应份额；所有成员国应将特别提款权视为国家储备资产，并使本国货币盯住特别提款权，窄幅波动；当某成员国因贸易逆差而无法实现美元支付时，这个国家可以动用特别提款权进行贸易支付。</p>\n<p data-pid=\"qo_nFf1r\">美国当然不愿看到世界上出现一种可与美元平起平坐的替代品，但按照这个方案的安排，特别提款权并不足以动摇美元的主导地位。所以，美国采取了一副无所谓的姿态。但法国认为，国际货币体系混乱，纸币对黄金大幅贬值关键原因是美英两国毫无节制地花钱，超量发行货币。所以，根本不必搞什么特别提款权，而世界需要的是美英两国紧缩货币，削减财政赤字。</p>\n<p data-pid=\"Vxn5IEvq\">美英反对法国的观点。他们认为，纸币兑黄金贬值，是因为世界上黄金存量太少，根本不能满足经济发展对货币需求增长的需求。此言是否话里有话？精明的法国人心知肚明，英美的言外之意是：放弃美元与黄金的固定兑换比价，这实际是要撕毁《布雷顿森林协议》。</p>\n<p data-pid=\"Qw5MBdCm\">其实，法国对布雷顿森林体系、对美元霸权充满敌意，但它也明确无误地知道，一旦布雷顿森林体系解体，可能给世界金融和经济带来灾难性的后果。因此，10国斯德哥尔摩特别会议期间，法国多次明确地告诫美英政府，不要偏离《布雷顿森林协议》太远，甚至建议把美元与黄金的比价，从35美元/盎司变为70美元/盎司。也就是说，允许美元兑黄金贬值100%，同时确保《布雷顿森林协议》继续执行。</p>\n<p data-pid=\"of1ue6sB\">法国的建议遭到了美英拒绝，这加剧了法国政府的不安。或许，戴高乐此时已经非常清楚，美英之所以赞同特别提款权，不过是暂避国际压力的权宜之计，而其真正的用意是为彻底甩掉《布雷顿森林协议》赢得时间。所以，愤怒的戴高乐向参与10国首脑会议的谈判代表发出指令，法国拒绝在《特别提款权协议》上签字。</p>\n<p data-pid=\"GfeMzMfi\"><b>毁约也是战争</b></p>\n<p data-pid=\"FJvBjmuB\">24年过去了，布雷顿森林体系是否已经变成“鸡肋”？尽管它依然可以带给美国丰厚的“铸币税”，但不断加重的美元危机、经济衰退以及欧洲对美元的反感情绪，都在搅动美国经济和白宫新主人——尼克松的心绪。怎么办？</p>\n<p data-pid=\"HoMl_Pia\">实际上，尼克松看到的美国经济数据令其忧虑。打从朝鲜战争开始，美国军火商为赚取更多利润，开始把常规军事武器生产制造、养护与维修逐渐转到日本，而越战爆发更使这样的转移越发迅猛。与此同时，美国消费品生产商也开始有样学样，逐渐将部分产能转向东亚和东南亚，而美国政府为了笼络东盟国家也默许了这样的转移。所以，当东亚、东南亚国家开始“出口导向型经济模式”之后，美国资本项目逆差不断扩大；同时，贸易项目逆差也开始不断加大，而战争支出又带来了美国财政赤字的不断增加。</p>\n<p data-pid=\"b5EFA7H8\">1971年5月，美国国际收支居然出现高达520亿美元逆差。数据震惊世界，这是否导致美元面临更大的贬值压力？有经济学家后来分析，其实，如果美国当年接受戴高乐的建议，允许美元一次性大幅贬值，这可能会给美国的实体经济带来好处，反而更有利于美元坚挺。但为什么不干？华尔街阻止。在华尔街看来，美元兑黄金贬值会威胁金融商品价值，使金融资本受到严重伤害。</p>\n<p data-pid=\"X5NbwNCA\">但现在，尼克松还扛得住吗？数据还显示，尼克松上台时，美国曾拥有的3万多吨黄金，现在只有接近8000吨，而按35美元/盎司的价格，美国黄金储备总值仅相当于其外债总额的25%。就是说，如果债权人继续大规模以美元兑换黄金，那美国将顷刻破产。</p>\n<p data-pid=\"SI9ECaxQ\">1971年8月15日，尼克松总统急召经济智囊——乔治·舒尔茨、保罗·沃尔克、杰克·贝内特等磋商办法，最终他接受了建议——彻底抛弃布雷顿森林体系。随即，尼克松发表了著名的电视讲话，他平静而淡然地宣布：第一，从即日起，美国不再允许美元与黄金之间的自由兑换，拒绝各国政府继续用美元兑换黄金；第二，对进口商品加征10%的附加税；第三，美国削减10%的对外援助。这恐怕是人类历史上最大的一次毁约行动，建立在黄金基础上的美元信用彻底崩溃了。</p>\n<p data-pid=\"9QOtBSlK\">失信的美元遭到疯狂抛售，欧洲各国货币面临强大的升值压力。为避免本币大幅升值影响自身的国际利益，欧洲各国被迫大力压制本国货币。于是，一波远甚于20世纪30年代的贬值大战，瞬间就把国际经济格局导入空前混乱的漩涡。</p>\n<p data-pid=\"69dJItOX\">更不幸的是，国际大宗商品价格以美元计价结算的规矩并未发生改变。因此，美元贬值引发各国货币竞相贬值的后果是：恶性通胀。这对欧洲近乎灾难，因为欧洲大部分能源、生产资料需要依赖进口，所以美元贬值导致大宗商品价格暴涨，必然深深地打击欧洲制造业。</p>\n<p data-pid=\"nE-U2HNK\"><b>再造美元霸权</b></p>\n<p data-pid=\"CRUOiqwB\">美国撕毁《布雷顿森林协议》，让罗伯特·特里芬看到了机会。他努力劝告尼克松，要破解困境必须重构国际货币体系，弱化美元的特权地位，否则，欧洲各国不会长期容忍美国以极低的代价占有他国财富。但特里芬的劝说被美国大佬们置之不理，他们认为，只要任由各国货币自由浮动，美元的“特里芬困境”就会自然破解。</p>\n<p data-pid=\"6ktKKOgy\">这样一种“装傻充愣”的态度让特里芬怒不可遏。他指出，美国撕毁了《布雷顿森林协议》，又拒绝其他货币加入国际储备货币，这就等于说，世界各国人民用心血和汗水辛辛苦苦地生产出商品，并把它出口给美国换回美元，同时必须承受美元购买力不断下降。无奈的特里芬教授辞去了耶鲁大学职位，提前退休回到故乡比利时，与他的同乡，时任欧洲委员会主席詹金斯一起，开始研究统一欧洲货币的问题。其用意即在抗衡美元霸权。这其实是“欧元”最早的构想。</p>\n<p data-pid=\"M0MEumwI\">岂能让欧洲统一货币搅了美元的好事？这时，一个关键性人物——亨利·基辛格——德国出生的犹太籍外交家，尼克松政府的国家安全事务助理兼国家安全委员会主任再次发挥了重大作用。实际上，除了忙于中美关系之外，他还有一项重要工作任务：找到布雷顿森林体系解体后重树美元霸权的方法。</p>\n<p data-pid=\"WZ9FNEY3\">1971年之后，世界经济在美元大幅贬值中颤抖，直到1973年仍未看到好转迹象。当年5月，84位世界金融、石油与政界巨头来到瑞典的索尔兹巴登，这里有个海岛度假胜地，它也是瑞典银行业大佬瓦伦堡家族的一个私密空间。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-cde0949991a997aaccb45f8032f0b694_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1082\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-cde0949991a997aaccb45f8032f0b694_r.jpg\"></figure><p data-pid=\"-dU0enbG\">美国国务卿基辛格开始在中东展开穿梭外交，图为基辛格（左）与埃及共和国总统安瓦尔·萨达特（右）会面。</p>\n<p data-pid=\"0sg-xxO8\">这是一次非正式聚会，目的是要找到一种方法，让美元重回强势。正是这次聚会，基辛格为美元找到了一个新“锚”——石油。这个新“锚”的“支点”是中东。于是他有了一个计划，这个计划后来被基辛格称为“石油美元再循环”计划。具体而言，第一，让美元成为OPEC（石油输出国组织）石油出口的唯一计价与结算货币，就是说，让美元锚定这个世界离不开，而且用量巨大的商品，如此，需要大量进口石油的欧洲各国将不得不把美元继续当成最重要的国际储备货币；第二，如果石油价格不断上涨，以致世界所需美元不断增多，美国就可以不断增大美元供给，保住美元“铸币”收益；第三，确保OPEC所获美元通过购买美国债券、股票、基金等金融商品重回美国。</p>\n<p data-pid=\"AyhBbCeh\">为实现这个计划，基辛格在中东“穿梭外交”，用巨额经济援助换取沙特阿拉伯支持美元作为唯一石油计价和结算货币。于是，一系列美沙双边“经济合作协议”达成了，这其中不仅包括数百个美国公司对沙特阿拉伯的大型项目投资，同时还包括帮助沙特创建其银行和金融体系。为此，一个名叫“美沙经济合作联合委员会”的机构成立了，并由美方派出要员负责具体实施《美沙经济合作协议》。同时，沙特阿拉伯承诺说服OPEC所有成员国，让美元成为OPEC石油出口的唯一计价和结算货币。</p>\n<p data-pid=\"TqJjBS4d\">基辛格的愿望终于实现了，但或许不只是巧合，美元与石油绑定后，中东地区则是连绵的战火，而每次战争的结果都是石油价格暴涨。如此态势，美国石油集团、金融集团和军工集团则从中获得巨额利益。更重要的是，美元理所当然地重新回到了国际货币体系的中心位置。与此同时，尼克松的另一位重要智囊杰克·贝内特，完成了另一项重要使命。他说服了沙特阿拉伯关键人物，用石油出口获得的绝大多数美元去购买美国国债，这使美国的财政赤字获得了有效弥补。</p>\n<p data-pid=\"QFHH2jAn\">从此，美元霸权获得再造，并开启了一个其他国家必须把美元当成国际储备货币，而美国印制美元可以不受任何约束、不必承担任何责任，登峰造极的美元时代。1976年新年刚过，IMF组成20国专门委员会，在牙买加首都金斯敦签下了著名的《牙买加协议》，协议允许会员国自由选择、制定和调整汇率制度，否定了黄金的货币职能，而确立了浮动汇率制的合法性。同时，《牙买加协议》强调了特别提款权(SDR)作为国际储备的组成部分。</p>\n<p data-pid=\"wvikK384\">许多年后有分析家认为，有了石油美元的制度安排，特别提款权将不再具有侵蚀美元霸权能量。甚至有人讥讽道，《牙买加协议》与其说它确定了点什么，不如说它只是承认了自由浮动的汇率制度，它不过是为《布雷顿森林协议》补办了一个葬礼。</p>\n<p data-pid=\"tcybaVDP\"><b>债务经济模式下的无痛收割</b></p>\n<p data-pid=\"_vIeYzN2\">在频繁的中东战争中，石油价格不断被推高。在1978年还是14美元/桶，到了1979年年底涨到了40美元/桶，世界各国对美元的需求大幅飙升；美国则开动印钞机使“铸币税”源源不断地流入美国。据摩根信托担保银行的计算，截止到1979年10月，分散于世界各国外汇储备中的美元货币已达5000多亿美元，而欧洲美元市场的总规模则相当于美国国内货币供应量的57%。但大量印钞也会导致世界对美元的反感进一步加剧，一个重要证据是，黄金价格从1971年的44美元/盎司一路涨到1979年9月的400美元/盎司。不过，美国不再担心黄金储备被搬往其他国家，更不用担心通货膨胀。因为，美国经济结构开始向“低买高卖”为特征的服务业转向。与之相映的，正是美国“债务经济模式”的发展。</p>\n<p data-pid=\"Kia_6JKb\">所谓债务经济模式，即第一，美国不再需要生产一般性商品，可以通过印刷美元从国际市场购买，并借此向世界输出美元；第二，各国为购买石油等大宗商品，必须把相当数量的美元作为储备货币；第三，各国为美元储备保值增值，必须去购买市场规模最大、变现最容易、安全性最高的美国国债，并为美国的赤字财政提供支撑。</p>\n<p data-pid=\"NWuc3_Ex\">可见，债务经济模式实际就是基辛格的“石油美元再循环”：美国只需印钞就可以去外国购买所需要的商品；流出美国本土的美元，再通过美国债务（国债或公司债）重新回到美国本土，变成可供美国政府或公司支配的现金；这些现金通过工资和福利支付给美国人，使之具有消费能力去购买进口消费品；美国的商人通过商品服务获得收入，然后继续购买别国的商品。</p>\n<p data-pid=\"TXwSdsDN\">那不是会出现更大规模的贸易逆差？不是会出现越来越多的财政赤字？美国经济又如何增长？很简单，只要世界各国经济增长对美元的需求越来越多，美国的国债就会有源源不断的需求；只要外国资本不断投向美国的股市债市，美国的贸易逆差就会获得资本收入的补偿，美国国际收支就会平衡；至于经济增长，只要美国人的消费不断上升，美国GDP就会不断上涨。至少从账面上看，没有问题。</p>\n<p data-pid=\"-5KBYeeK\">这当然是巨大的好处，不用从事生产，只需印刷货币就可以近乎无偿地占有世界其他国家的劳动。但其他国家呢？正相反，用大量人力、技术和自然资源去换取“世界公认的价值符号”——美元，然后再借给美国使用。不止于此，其他国家还必须接受美元不断贬值所带来的资产缩水。</p>\n<p data-pid=\"3-n1kFga\">1971年，查德·尼克松总统把白宫政府组织委员会委员小约翰·包登·康纳利拉上了美国财政部长位置。其间，他以美元贬值促使美国贸易平衡，并带给500万美国人以就业机会。美元贬值政策当然让欧洲极其反感，但康纳利却说：美元是我们的货币，却是你们的问题。这句历史名言，既说出了美元的霸道，也道出了欧洲的无奈。美联储前主席格林斯潘也曾矫情地告诉欧洲人：美国不断增加负债，不过是为你们提供流动性而已。</p>\n<p data-pid=\"r9TCjqVg\">无疑，基辛格通过“石油美元再循环”所重构的美元霸权，构建全球经济的债务循环模式，而这实际是全球财富的收割机。周而复始、循环往复之下，只要外国对美元的需求不断增长，美国所欠债务将永远可以“只付息、不还本”，而且只要回流美国本土的美元足够多，美国的债务成本就会足够低。</p>\n<p data-pid=\"4ZUuptCd\"><b>金融资本重构地球</b></p>\n<p data-pid=\"D5SeBsQA\">美国要实现“石油美元再循环”计划，通过购买输出海量美元，美国本土就必须“去实业化”，不再生产一般消费品。梳理历史发现，美国制造业打从1957年第一次美元危机发生后，开始逐步离开美国本土。第一次较大规模的产业转移，发生在20世纪60年代肯尼迪总统遇刺前后。而最重要的一次转移，则发生在20世纪80年代初。好莱坞大片《华尔街》所反映的，恰恰是20世纪80年代初发生在华尔街上的真实故事。那是美国经济史上一个著名的“大收购”时代，规模空前。</p>\n<p data-pid=\"C9kcl3gb\">怎么回事？石油问题。1979年底，第二次石油危机使油价暴涨到40美元/桶。由于能源及工业原材料价格暴涨，欧美日等主要工业国经历了二战后又一次严重衰退。1979年7月开始，美国企业倒闭数量激增，到1980年底，情况甚至比肩1933年“大萧条”水平，失业人口从1979年611万增至1200万，失业率高达10.8%。与此同时，物价大涨，1980年美国CPI高达13.4%。随之，经济增速变成负值。经济停滞、物价飞涨——人类史上第一次出现的所谓“滞胀”现象。</p>\n<p data-pid=\"P7ZLQOaF\">在此当口，好莱坞影星罗纳德·里根接任美国总统，而这位共和党“鹰派”人物，与早他18个月接掌唐宁街10号的英国首相、人称“铁娘子”的撒切尔夫人形成了默契。他们一致认为，凯恩斯主义过时了，指导未来经济实践的理论应当是“新自由主义”以及“货币主义”等学说。里根在其著名的就职演说中称：“政府并非解决问题的方法，政府本身才是问题所在。”这句话成为“新自由主义”经济学家极度推崇的名言，也代表了所谓“里根撒切尔主义”的基本理念，即政府只要管住通胀，其他都是市场的事，政府无需插手。</p>\n<p data-pid=\"lGCyrnVX\">滞胀的原因是石油价格暴涨，而油价暴涨的原因又是“两伊战争”引发的第二次石油危机。那该如何破解物价暴涨？顺理成章的方法应当是设法结束“两伊战争”。但时任美联储主席保罗·沃尔克，这位当年废弃布雷顿森林体系的主谋、洛克菲勒大通曼哈顿银行的高级职员，居然采取了提高利率、紧缩货币的方式去治理因战争引起的物价暴涨。</p>\n<p data-pid=\"VpWTWw_j\">沃尔克完全不顾实业家的反对：第一，在1980年3月，废除了著名的“Q条例”，取消了美国政府对利率上限的管制；第二，颁布《存款机构放松管制和货币控制法》，把货币控制权交到美联储手上。美元利率开始一路飙升，1978年初，欧洲美元市场利率为7%，到1980年初，这个利率升到20%。而且，两位数的高利率运行5年之久。这正是国际金融史上著名的“金融休克疗法”。</p>\n<p data-pid=\"4LGutDlQ\">20%的利率，哪个制造业企业可以承受？加上战争导致的能源价格绝不会因利率上升而降低。所以，生产必然停滞，消费必然萎缩，经济必然萧条。美国制造业失去活路，为免于血本无归地破产，他们不得不接受华尔街提供的一线生机——重组。于是，《华尔街》电影中的博斯基们找到了大把赚钱的机会，以致20世纪80年代发生的企业兼并、重组、收购狂潮变成美国经济史上一个经典瞬间。</p>\n<p data-pid=\"-vFUZjvn\">那时华尔街最流行的一句话：小的总是美的。什么意思？当制造业极度虚弱、股价极低之时，金融家会利用杠杆进行收购；收购后，金融家会依据市场偏好把大公司拆解为若干小公司，然后包装小公司再高价出售，并从中谋得暴利。电影《华尔街》主角博斯基，就是当年华尔街上赫赫有名的金融大盗，实业企业不过是其手中的玩偶，赚钱的工具而已。另一位被实业家送进监狱的金融大盗，则是著名的“垃圾债大王”麦克·米尔肯，他开创了小公司吞并大公司、所谓“蛇吞象”的金融技术。</p>\n<p data-pid=\"60snECWR\">走过那段时期，美国产业资本实力骤降，金融资本实力骤增。1982年，美国制造业纳税后利润比1979年下降了43%。诸如GE那样的巨无霸，其利润来源也在向金融靠拢。2007年，GE汽车销售利润的50%来自汽车金融部门。不管情愿与否，制造业必须离开美国本土，因为美国政府的宏观经济政策注定了他们背井离乡的命运。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-d89b51a46d1a82f2ebb76aa9e4f40759_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"741\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-d89b51a46d1a82f2ebb76aa9e4f40759_r.jpg\"></figure><p data-pid=\"p11Am1KX\"><b>金融吸血管道全球布设</b></p>\n<p data-pid=\"8OXPigzI\">经济全球化、市场自由化、权益私有化、金融证券化——这是“里根撒切尔主义”的精神实质。从事实看，“铁娘子”撒切尔夫人干得比里根更加彻底，二战后组建的、以英国铁路公司为代表的一大批国有或国有控股企业被强行私有化，大量制造业企业离开英国转向亚洲，产业工人面临高通胀率和高失业率的双重压力。为保住饭碗、提高工资，产业工人在工会的组织下频繁发动罢工浪潮，而“铁娘子”则下令解散工会。</p>\n<p data-pid=\"yUbOVcyR\">高油价引发全球美元需求激增，而20%的高利率则导致美元大幅升值。结果一，美国制造业的商品出口大幅下滑，1980年录得364亿美元逆差新纪录，1981年二季度到1983年二季度，美国出口总值下降19.8%。结果二，美元升值为美国制造业对外投资、实现产业转移创造了有利条件。反看亚洲，各国政府翘首期盼欧美产业资本转移，在空前的产业全球大分工中找到自己的位置，并借以推升本国经济增长，但前提是开放金融市场——允许欧美金融资本安装“抽血”管道。</p>\n<p data-pid=\"XfsoVm6F\">欧美与亚洲的默契，犹如“凹凸”二字，扣合在一起形成全球经济方圆。美国经济还剩下什么？金融、科技、军工、医药、传媒以及消费服务变成美国经济主线。对应的是军事霸权、金融霸权、科技霸权、理论霸权和舆论霸权构筑起的美元霸权。</p>\n<p data-pid=\"JSE1XSPj\">到2008年金融危机爆发前，以低买高卖为赚钱手段的服务业，占到美国GDP的80%以上；不断积累的贸易赤字总额超过6万亿美元，财政赤字总额接近9万亿美元，分别相当于美国GDP的50%和70%。与之相应，1990年到2008年，美国GDP增加4万多亿美元，其中制造业占比不到10%；2008年，美国制造业在整个GDP中的占比18%。</p>\n<p data-pid=\"a-Rztb-f\">1971年到2007年，美国人平均工作时薪从17.6美元降到了10美元，美国企业高管与普通员工的工资差距从40∶1扩大到了357∶1，美国民众的消费信贷总额从1200亿美元扩张至2.5万亿美元。为什么？产业结构变了，原本享有高收入的工程师和高级技工，大量沦为商业服务员、金融推销员、各种营业场所的柜台员，以及人体保健员和各色志愿人员，这也是当今美国社会还能提供的、最多的就业岗位。</p>\n<p data-pid=\"30nO75_L\">这就是美国，一个所有经济学理论都无法解释的“经济怪物”，一个从债务全球循环中吸血的经济体。按美国学者安德森·维金2007年的推算，美国1美元GDP增长，必须借助5美元以上的新债务。</p>\n<p data-pid=\"HMQc8k8t\">责编 |姚坤</p>\n<p data-pid=\"wQZMkI_1\">版式 | 孙珍兰</p>\n<p data-pid=\"rK3RjN9r\">微信值班：杨琳</p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhong-guo-jing-ji-zhou-kan?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">中国经济周刊</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/500782215?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"金融战史鉴（下）：金融安全从哪里来？","date":"2022-04-21 09:17:51","description":"\n<p data-pid=\"l8ct2AWq\">《中国经济周刊》 首席评论员 钮文新<br></p>\n<p data-pid=\"gYgyj9A_\"><b>吸血成性</b></p>\n<p data-pid=\"aTByVpe5\">上世纪70年代末到80年代初，金融资本布设好全球吸血管道之后，全球经济进入了一个新的时代，即从产业资本主导转向金融资本主导的时代。这时再看世界，商品市场衍生出的期货市场，实际已经变成金融市场的组成部分；流动性差的产业资本通过证券化，对应了股票市场、债券市场及其衍生品市场，从而也构成金融市场的组成部分；加之在私有化、自由化的巨浪中，破除了政府对产业资本的保护，于是商品市场的价格变动、产业资本创造的财富，都装上了金融管道，变成任由金融操控获利的捕猎场。</p>\n<p data-pid=\"Bt4NZ86o\">2009年6月7日，金融大鳄乔治·索罗斯来到中国上海。他在复旦大学发表演讲时称：今天这样一场超级泡沫危机，实际开始于20世纪80年代。当时，在美国总统里根、英国首相撒切尔夫人的主导下，全球的人们开始大量使用信贷，从而使泡沫膨胀。里根和撒切尔夫人都认为，市场泡沫会自动修正。但不幸的是，这些“市场原教旨主义者”错了。放松管制、放任市场调整，只是让金融产业在美国和英国得到了更大规模的发展。英美的金融市场价值已经超过了两国总产值。</p>\n<p data-pid=\"kYtLxNjh\">索罗斯说得没错，但他只看到“市场原教旨主义”给发达国家带来的痛苦，却没有承认里根、撒切尔夫人和他本人带给发展中国家的是深重而频繁的灾难。</p>\n<p data-pid=\"IoCJpn6U\"><b>马岛战争背后的金融深意</b></p>\n<p data-pid=\"N5otiOqx\">1982年4月3日，英国首相撒切尔夫人决定，派遣由桑迪·伍德沃德海军少将为司令的特混舰队，去收复刚刚被阿根廷占领的英属殖民地马尔维纳斯群岛。于是，包括“赫尔墨斯”号航母和“谢菲尔德”号驱逐舰在内的118艘舰船、270架各色飞机、9000人海军陆战队浩浩荡荡地扑向美洲大陆最南端、距英国13000公里的海岛群屿。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-8a5961e1c46a37b4389e34a2a8fa01d7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1580\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-8a5961e1c46a37b4389e34a2a8fa01d7_r.jpg\"></figure><p data-pid=\"h102Oa5s\">1982年4月，阿根廷出版的报纸封面上，英国首相玛格丽特·撒切尔的肖像图片被加上夸张的尖牙，使她看起来像吸血鬼。</p>\n<p data-pid=\"lf23Hty8\">为什么英国如此劳师动众地对一群小岛大动干戈？这还是传统意义上的殖民地独立与反独立的战争吗？</p>\n<p data-pid=\"sX_K4upL\">实际上，1980年前后美英实施“金融休克疗法”，也导致拉美发展中国家经济受到了巨大冲击。19世纪末20世纪初，阿根廷这个物产极为丰富的国家，曾是世界的粮仓和肉库，国民收入堪比美国，社会福利堪比欧洲。但高福利导致阿根廷低储蓄、高消费的生活习惯，而国内商品生产严重依靠外商投资。1981年，阿根廷外债数额位列世界第三，高达340亿美元，加上高利率下美元升值，阿根廷外债负担日甚一日。</p>\n<p data-pid=\"Pb3Fa097\">怎么办？发行货币让比索贬值，刺激出口，换汇偿债。但发达国家因经济衰退、失业严重，就算阿根廷提供大量廉价商品，他们也根本无力消费。结果是阿根廷发生严重通胀。那时，阿根廷通胀率高至230%，工人实际收入仅相当于1970年的50%，全国劳动人口失业率更高达30%以上。于是，阿根廷经济陷入恶性循环：一方面，货币贬值政策并未带来出口增加，更未获得足够的外汇收入；另一方面，贬值造成国内企业外债还债成本增加，负担越来越重。</p>\n<p data-pid=\"4cF4WwIf\">1982年3月31日，阿根廷收复马岛的前两天，阿根廷首都布宜诺斯艾利斯的五月广场上发生了声势浩大的抗议示威，并快速向全国传染。民众指责加尔铁里军人政府把阿根廷经济带入泥潭。怎么办？以军事手段收复马尔维纳斯群岛，转移国内矛盾。加尔铁里成功了，1982年4月2日，马岛收复的消息传到国内，阿根廷举国欢庆，还是五月广场，还是大规模游行，但这次却是支持政府的行动。阿根廷全国12个政党和总工会一改前嫌，誓言要团结在政府周围。</p>\n<p data-pid=\"3vdrg0jS\">阿根廷的行动深深地刺激了英国人的神经，因为英国十分清楚，也十分担心，如果阿根廷军以收复马岛吓住英国人，那下一步会不会拒绝偿还外债？如果阿根廷拒绝还债，外债使用量最大的拉美国家会不会揭竿效仿？难怪后来有学者分析，英国回击马岛的真正用意，无非是希望彻底铲除发展中国家拒还外债的念头。历史证明，正是从那时起，拉美各国外债危机每隔几年就会爆发一次，从未停止。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-f9e6e486e2ecea3f02ac1f98152678f8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"719\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-f9e6e486e2ecea3f02ac1f98152678f8_r.jpg\"></figure><p data-pid=\"e6kO-kfS\">1982年5月12日，英国南安普敦，3500名英国士兵携带武器和装备登上豪华邮轮伊丽莎白二世号，准备前往马尔维纳斯群岛（英国称福克兰群岛）参加作战。</p>\n<p data-pid=\"avWAjnY5\"><b>倒霉的墨西哥</b></p>\n<p data-pid=\"-C8nAiHm\">1982年10月1日，全球首脑聚集纽约的联合国总部，参加联合国大会。不过，这次会议的焦点却集中到了墨西哥总统洛佩斯·波蒂略身上。为什么？因为墨西哥正在被外债危机所困。</p>\n<p data-pid=\"-VCmFMwp\">波蒂略在联大的发言中称，导致这场债务危机的罪魁祸首不是发展中国家希望富强的努力，而是伦敦和纽约的政策，制造了令人无法容忍的高利率和原材料价格的暴涨暴跌。他认为这样的做法使得发展中国家的经济成果受到威胁，切断了他们走向进步的可能。</p>\n<p data-pid=\"36HIoIyD\">波蒂略警告说，如果能使债务双方共同受益的解决方案受阻，不排除发展中国家将单方面停止偿债的努力。他说：“停止偿债对谁都不好，谁都不想这样做，但如果发生此状，责任不在债务人。现实催生一致立场，我们没必要去搞阴谋诡计。”</p>\n<p data-pid=\"3TpevbjJ\">波蒂略从20世纪60年代开始为政府效力，直至1976年当选墨西哥总统，一直致力于墨西哥经济振兴，并在1976年到1981年的5年间，使墨西哥GDP平均增长率达到了8.5%。如今，波蒂略总统任期还剩不到两个月，而墨西哥所取得一切经济成就，都将在这场债务危机中毁于一旦，这当然会令波蒂略痛心不已。</p>\n<p data-pid=\"AV6cKOUS\">墨西哥石油资源十分丰富，两次石油危机中油价大涨，这让墨西哥看到了增加石油开采和出口而推高国内经济的机会。但钱从哪儿来？这时的波蒂略接受了经济全球化、市场自由化、权益私有化、金融证券化主张，他相信，依仗墨西哥的比较优势，按照这些路径，墨西哥应当比亚洲接受了同样路径的国家更富有。所以，波蒂略大力推行私有化和金融自由化，大开国门，欢迎欧美资本流入墨西哥石油行业。</p>\n<p data-pid=\"bm8iBGc-\">波蒂略做到了。大手笔的欧美资本流入让墨西哥石油行业投资急速增长，国家经济也随之繁盛一时。但好景不长，1980年初，美元市场利率上升到20%，国际油价开始因经济衰退、美元升值等不良预期而停止上涨，甚至出现了一定幅度的下跌。于是，一方面是墨西哥石油出口收入下降，另一方面是外债利息大升，还债成本暴涨。截至1981年底，墨西哥外债累计已达820亿美元。</p>\n<p data-pid=\"VzraTaXG\">好在“两伊战争”还在持续，被战争挺高的油价回落速度还算温和，墨西哥还可勉力支撑，但1981年下半年情况急转直下。这年秋天，美国一家著名跨国公司的政治风险咨询顾问威廉·柯比在接受《纽约时报》专访时称：在墨西哥的投资将遭受墨西哥比索大幅贬值的冲击，所以他正在劝告客户，在墨西哥政府换届之前，一定要撤回在该国的投资。</p>\n<p data-pid=\"Bus6QUtK\">柯比的这篇专访被包括《华尔街日报》在内的美国媒体大规模转载。</p>\n<p data-pid=\"46kSbjKh\">柯比的文章同样受到墨西哥媒体的关注，甚至一字不漏地转载这些文章，正是从那时起，资本开始大规模逃离墨西哥。波蒂略总统扛不住了，1982年2月19日发表全国广播演说：“隐藏的外国利益，正在通过恐惧的谣言和资本外流迫使比索贬值，动摇墨西哥经济。”他告诉墨西哥公众，目前墨西哥的资本外逃总量已达760亿美元。</p>\n<p data-pid=\"MkwgFaLy\">波蒂略试图通过资本管制遏制资本外逃，但他根本无力承受因此而形成的国际、国内压力。波蒂略屈服了，他允许比索一次性贬值了30%。比索贬值加大了企业的外债负担，当年依靠外债发展起来的墨西哥财团纷纷倒闭。其中，最具代表性的是蒙特雷阿尔法集团，它是墨西哥私营工业最著名的代表者，在比索贬值的冲击下，一夜之间就破产了。墨西哥经济从此一蹶不振，人民生活水平一落千丈，迄今也未恢复元气。</p>\n<p data-pid=\"oqWTkE3_\"><b>还不完的高利贷</b></p>\n<p data-pid=\"An6dDvJT\">对拉美国家而言，与外债比肩的沉重负担还有高昂的利息。1980年，当美元利率上升到20%的时候，伦敦城和华尔街的金融机构不仅要求拉美国家按“市场利率”借取新债，同时还迫使它们按现实的“市场利率”偿还旧债。正是这样的苛刻条件，一举将拉美逼向绝境。</p>\n<p data-pid=\"6N-cnNY0\">实际上，1982年8月墨西哥已经无力偿债，联合国大会之所以演变成“角斗场”，实际就是发达债权国和拉美债务国之间的激烈角逐。波蒂略公开表示：“墨西哥及许多第三世界国家都不能遵守原定的还款期限。我们发展中国家不想成为附庸，不能因为还债而让我们的经济陷入瘫痪，或者让我们的人民陷入更大的灾难。更何况，这些债务利息已是原来的3倍。而且，如此之高的利息是在我们不知情的情况下强加给我们的，所以这根本就不是我们的责任。我们为战胜饥饿、疾病、无知和附庸所做的努力，并不是引起这场国际危机的原因。”</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-12cf501f65283b18b06b067109e2636c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"736\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-12cf501f65283b18b06b067109e2636c_r.jpg\"></figure><p data-pid=\"X13Oza4N\">拉美国家对高息外债的态度，强烈地刺激着伦敦和华尔街。他们必须强迫拉美国家服从并接受金融巨头们的偿债安排。正因如此，后人才会怀疑，英国人花费巨大代价攻打马尔维纳斯群岛，不过是“敲山震虎”而已。这向拉美国家发出强烈信号——英国有足够的实力维护英国利益完整。原本，波蒂略希望拉美国家组成“联合体”，一起和债权国讨价还价寻求解决方案，但马岛战争后，这个愿望搁浅了。</p>\n<p data-pid=\"TeJ_C3mb\">同样是1982年10月1日，债权债务双方摊牌了。美国人为拉美债务危机开出了怎样的药方？实际上，早在1982年8月，时任美联储主席沃尔克、美国银行和IMF已经为拉美债务国准备了四味苦药：第一，拉美国家政府出面接管国内私人债务，美其名曰是为了防止企业破产给国家经济造成损失，但实际是债务保全措施；第二，大幅削减政府预算，取消政府对国民的食品和生活补贴，节省财力偿还外债；第三，让货币贬值，以增加出口，赚取外汇还债；第四，由IMF出面对拉美债务国进行债务重组。</p>\n<p data-pid=\"fTyQeFoa\">墨西哥、巴西、阿根廷等所有被列入IMF名单的国家都被按着喝下了这杯苦药。为了还债，拉美债务国节衣缩食，几乎所有社会福利荡然无存，墨西哥因进口药品严重短缺，婴儿的死亡率大幅上升。问题是这样能还清债务吗？瑞士再保险公司的资料显示，1982年发展中国家开始还债时，债务总额8390亿美元，但到1987年，这个债务数额变成了1.3万亿美元。</p>\n<p data-pid=\"6hVgkyXG\">为什么会这样？实际上，IMF所谓的债务重组，不过是把债期拉长，并把所欠利息变成债务本金，然后一并放在未来偿还，所需支付的利率和过去一样高。按照中国人的常识，这是典型的“利滚利的高利贷”？世界银行曾对109个债务国的还债情况做过一个统计：1980年到1986年间，它们一共还债6580亿美元，可债务却从4300亿美元增加到8820亿美元；所还6580亿美元的债务中，仅利息就占了将近一半，即3260美元。</p>\n<p data-pid=\"cuVOGacs\">发展中国家的债务越还越多，是否因为它们大量借入新债？秘鲁前能源部长彼德·帕布罗·库克金斯基拆穿了实质：“1976年到1981年，拉美国家名义上获得了2700亿美元的外债借款，但实际上，这些资金只有8.4%被用于拉美国家的生产性投资，而其他作为旧债利息，从未离开过纽约或伦敦的银行，而拉美国家所欠债务，只是在银行的账簿上被改动了一下数据而已。”</p>\n<p data-pid=\"Gvg5JSlk\"><b>金融通吃</b></p>\n<p data-pid=\"S3HLBdNr\">实际上，拉美国家和非洲一些独立后的殖民地国家最早接受并践行了经济全球化、市场自由化、权益私有化、金融证券化，但几乎全军覆没。非洲摆脱殖民统治之后，发展国家经济成为第一要务，于是也希望通过借入欧美资本发展自己，但在20世纪80年代同样陷入债务危机，掉进越还越多的债务陷阱。时至今日，这些债务还被经常提起。典型的例证就是联合国大会上经常出现“减免非洲国家债务”的议案，40年来从未间断过。</p>\n<p data-pid=\"9xmEwKaH\">拉美和非洲国家的痛苦，给欧美金融巨头们创造了丰厚收益，他们为债务缠身之国留下的唯一出路是交出国家财富。比如墨西哥的石油资源，其控制权一点点通过“债转股”转移到了欧洲银行手中，然后再被转卖给欧美石油财团。据丹麦经济学家汉斯·拉斯姆森估计，20世纪80年代，所有发展中国家仅仅流入美国的现金就有4000亿美元。那时，美国GDP不过2.7万亿美元而已。这些资金为里根政府制定的、美国有史以来最大的财政赤字政策提供了强劲的支持。</p>\n<p data-pid=\"3SswK6R2\">发展中国家“债务重组”之后，欠债爆炸式增长，对于欧美金融巨头而言，这笔巨额债权为之带来了高额而稳定的收益，哪怕是发达国家降息之后。更何况，发展中国家的私人债务已经变成了国家债务，加之欧美政府和IMF提供的安全保障，欧美金融机构根本无须对这笔债务进行不良拨备，直接就把账面收益全部计入利润。在整个20世纪80年代，这笔债务带给欧美金融机构近10年的高收益期。花旗银行和大通曼哈顿银行给股东“超级分红”，并声称：这是它们“历史最高赢利”。</p>\n<p data-pid=\"G6LPF2Lb\">同样为欧美金融机构带来巨额收益的还有美国国债。且不说发行佣金，仅美国财政所支付的利息就从1980年的520亿美元增长到1986年的1420亿美元。这个数字占到美国政府财政收入的20%。也正因美国政府大规模举债，20世纪80年代中间的5年，美国债务总额超过了债权总额，从世界最大的债权国变成了净债务国。</p>\n<p data-pid=\"cVpu-7wU\">反观墨西哥。1982年到1989年，比索与美元汇率从12∶1贬值到2300∶1；这时，石油价格已经降至10美元/桶。墨西哥也回到了从前，资源换取外汇收益，发展国家经济的梦彻底碎了。不仅掉入深深的债务陷阱，人民生活陷入了贫困，而且未来油价上涨的收益也没墨西哥什么事儿了，因为国家原油产业已经变成了他人的囊中之物。</p>\n<p data-pid=\"5NN48Ro9\"><b>放虎出笼</b></p>\n<p data-pid=\"h_0TP5dU\">1986年10月，里根政府力推的《甘恩－圣哲曼法案》获得了美国国会的通过，意味着美国金融业发展进入了一个放任自由、无拘无束的金融自由化的新时代。几乎同时，撒切尔夫人在英国引燃“金融大爆炸”的导火线。她宣布即日起，让自由竞争成为提高金融效率的催化剂。</p>\n<p data-pid=\"c-5fIpyw\">对于这场“金融大爆炸”，历史褒贬不一。褒者认为，“金融大爆炸”使得金融机构进一步整合，金融效率大幅提高；贬者认为，“金融大爆炸”表面是让金融的竞争更充分，而实际是弱肉强食的自由环境带来更加充分的金融垄断，实体经济的金融成本大幅提高。美国经济学家保罗·克鲁格曼称，美国用《甘恩－圣杰曼法案》取代“新政时期”的银行业监管，以及英国的“金融大爆炸”，使得两国家庭负债呈现爆炸式增长，两国的金融体系变得越来越糟糕。</p>\n<p data-pid=\"rM7Qh-Ze\">1990年，美国国际经济研究所邀请IMF、世界银行、美洲开发银行和美国财政部专家、拉美国家代表在华盛顿召开会议。表面看，这次会议讨论的是拉美国家如何通过改革破解外债压力的问题，但实际成果却是：经济全球化、市场自由化、权益私有化、金融证券化被固化为发达国家规定的、发展中国家必须遵从的改革道路。会间，美国国际经济研究所约翰·威廉姆森提出了发展中国家应当遵从的10条改革措施，并声称与会者已就此达成“一定程度上的共识”，但就是这个“一定程度上的共识”最终演变为《华盛顿共识》——第一，加强财政纪律，压缩财政赤字，降低通货膨胀率，稳定宏观经济形势；第二，把政府开支的重点转向经济效益高的领域和有利于改善收入分配的领域（如文教卫生和基础设施）；第三，开展税制改革，降低边际税率，扩大税基；第四，实施利率市场化；第五，采用一种具有竞争力的汇率制度；第六，实施贸易自由化，开放市场；第七，放松对外资的限制；第八，对国有企业实施私有化；第九，放松政府的管制；第十，保护私人财产权。</p>\n<p data-pid=\"ZKsg29Cx\">美国学者诺姆·乔姆斯基在其著作《新自由主义和全球秩序》一书中称：“新自由主义的华盛顿共识，指的是以市场经济为导向的一系列理论，它们由美国政府及其控制的国际经济组织所制定，并由它们通过各种方式加以实施。”</p>\n<p data-pid=\"sUk-xKYl\">1990年9月11日，接替里根当选美国总统的乔治·布什在一次演说中提出：世界新秩序。他说：在这个多事之秋，我们正处在一个关键时刻，这个世界将诞生一个新的秩序。</p>\n<p data-pid=\"sSSW1isd\">这个新秩序是什么？如果苏联解体，冷战结束，那世界必将变成以美国为主导的单极化世界。在此背景下，无论新兴市场经济国家，还是东欧国家，最渴望得到的就是外国资本。希望借此实现国家经济的快速腾飞。对金融资本而言，这是个历史性的机会，“金融大爆炸”充分放开了金融巨头的手脚，《华盛顿共识》给了发展中国家规定动作，这时的金融巨头完全可以无拘无束地将“金融抽血机”遍布全球。历史证明：想要资本吗？可以，但代价可能是倾家荡产。</p>\n<p data-pid=\"8FqkB-eP\"><b>日本的经济溃败</b></p>\n<p data-pid=\"TeXvT-cu\">从1980年到1990年，那是世界经济异常动荡的10年。这期间，有美元利率的大起大落，有石油价格的上蹿下跳，有股票市场的暴涨暴跌，有债务规模的急剧膨胀，有新兴市场经济国家的悄然崛起，有拉美国家经济的高台跳水，有欧美制造业的快速迁徙，等等。这其中，一个绝不可忽视的重大金融事件，就是日本经济的“翻转过山车”。</p>\n<p data-pid=\"G3lZueTL\">布雷顿森林体系解体之后，浮动汇率制取代了固定汇率制，那为什么还要讨论汇率问题？利益、利益、利益。1982年美联储结束“金融休克疗法”开始减息刺激经济，希望通过减息让美元贬值，刺激美国商品出口，减少贸易逆差。但是，美国的刺激政策并未达成预期，反而导致大量资本流入楼市和股市，而不断吹胀的资产价格更多吸引着国际游资流入美国，美元币值因此而坚挺故我。</p>\n<p data-pid=\"XzQ_I2WB\">怎么办？美国不认为实体经济疲弱、出口萎缩是自己多年来驱逐国内传统制造业的必然后果，反而一口咬定这是国际汇率出了问题，是日本和德国政府干预汇市，过度压低本币估值所致。于是，美国鼓动英法一起逼迫日本、德国改革金融体制，开放金融市场，并使日元和马克升值。这正是“广场会议”所要达成的目标，而著名的“广场协议”也是在此背景下达成的。</p>\n<p data-pid=\"01bBmvdB\">在美国政府的强硬干预下，美元兑日元大幅贬值。1985年9月前，美元兑日元汇率一直维系在1∶250附近；但“广场协议”签订后不到3个月，日元快速升值25%到1∶200附近。这实际已经超出20%——日本在“广场协议”中所承诺的底线。但日元并未停止升值，到1987年，日元升值到1∶120。</p>\n<p data-pid=\"VbCX7yZc\">日元升值、美元贬值真能解决日美贸易失衡的问题？二战失败让日本失去话语权，对美国马首是瞻。但朝鲜战争、越南战争、冷战却为日本提供了机会——用政治上对华盛顿的亦步亦趋，换取经济发展的腾挪空间。首先是利用强大而传统的政府控制力，从美国购买技术，然后利用优质的加工能力，把技术转化为独到而小巧的商品，再把这些商品卖向以美国为主的国际市场。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-73bec135d2fe0c65b6995b97f0bb2e06_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"741\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-73bec135d2fe0c65b6995b97f0bb2e06_r.jpg\"></figure><p data-pid=\"mQGf_-Ai\">这种特殊经济模式，被西方经济学界统称为“亚洲经济模式”,日本以此实现了20年经济高速增长，而且把一个个欧洲老牌资本主义国家抛在了身后，成为仅次于美国的全球第二大经济体。但是，日本一直享用着令人羡慕的贸易顺差，以致20世纪80年代日本一举取代美国，成为世界上最大的债权国。所以，“广场会议”后，美国在要求日元升值的同时，也在要求日本大量购买美国商品和资产。</p>\n<p data-pid=\"SBMDvtgH\">问题是，美国真有什么可供日本购买的商品吗？没有。因为美国希望日本购买的商品，日本大都可以自己生产。所以，一方面是日元大幅升值抑制日本商品出口，另一方面是美国舞动着贸易大棒，在《综合贸易与竞争法》罗列大量日本所谓“敌对”贸易活动，并借此向日本要价。这使日本经济赖以增长的动力失速。</p>\n<p data-pid=\"MRZr5Dlp\">怎么办？1986年初，一个被称作“雁型战略”的对应方案被日本付诸行动。所谓“雁型战略”大体分三部分：第一，通过投资向东亚、东南亚等国转移落后产业，并借以强化国际声望，成为亚洲经济圈的“领头雁”；第二，借助日元升值优势，到欧美去直接投资，绕开欧美贸易壁垒；第三，国内的产业升级。</p>\n<p data-pid=\"dV4KFQFx\">作为“雁型战略”的产物：日本厂商将排量3.0以下的轿车生产转移到菲律宾、马来西亚和中国等地，而本土生产凌志400型等高级轿车；那时，法国的每场艺术品拍卖会都少不了日本人的慷慨，他们甚至买下欧洲城堡，原封不动地运回日本；丰田公司把汽车生产线搬到美国，绕过贸易壁垒，直面底特律竞争；索尼公司购买好莱坞的哥伦比亚电影公司，试图借此让日本文化打入美国市场。最著名是三菱地产以13亿美元买下洛克菲勒大厦，这让美国人惊呼：日本要收购美国。</p>\n<p data-pid=\"5wdSZ4ef\">日本膨胀了，金钱撑起了底气，索尼公司董事长盛田昭夫与日本著名的鹰派议员石田慎太郎在1987年合著《日本可以说不》，这本不过百页的小书，体现了日本试图与美国分庭抗礼，抛掉战败国帽子的强烈愿望。真能如此？正当低端制造业已经转移但产业升级尚未完成——青黄不接之际，日本的经济泡沫崩了。</p>\n<p data-pid=\"mawwuZEx\">许多人把目光盯住“广场协议”后的日元升值，但殊不知，美国同时向日本提出的要求还有：取消一切金融管制，彻底实现包括资本市场在内的金融自由化。1985年9月，以放开10亿日元大额存款利率为起点，日本走上了开放金融市场、取消金融管制的道路。</p>\n<p data-pid=\"xmUjyikL\">从此，日本的经济格局发生重大变化：一方面，以制造业为主体的实业资本大量对外输出；另一方面，日元升值招致国际金融热钱蜂拥而至，恶炒日本楼市股市。1985年到1989年，日经指数从8000点附近涨到40000点；日本楼市更离谱，1989年仅日本东京商务圈的地价总值居然可以和整个美国的地价总值画上等号。日本政府也意识到，过去4年日本经济的泡沫化已经无以复加，必须采取措施使之慢慢回归正常，但此时此刻的日本已经没有“纠错”的机会了。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-20e8a3d6e67fc6af834ad79026389263_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"735\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-20e8a3d6e67fc6af834ad79026389263_r.jpg\"></figure><p data-pid=\"BwbOM9Ox\">始作俑者是摩根·士丹利，当其意识到日本政府要紧缩货币时，立即发布投资研究报告：对亚洲投资偏好的投资者而言，日本已不是理想的投资场所，而更能带来高收益的地方应是韩国、菲律宾、马来西亚和泰国——四国当年号称“亚洲四小虎”。大摩言论一出，立即在全球炸响，日本经济泡沫一夜破灭。从此开启“失去20年”模式。</p>\n<p data-pid=\"gmk3CZaj\">后人总结认为，股价楼价上涨不可怕，但可怕的是，在实体经济趋弱的背景下，股价楼价上涨与实体经济财富创造能力脱节。日本的经历告诉我们：金融开放不可怕，但可怕的是，金融开放脱离实体经济服务，超出国家经济承受能力。日本恰恰从这两面为国际金融狙击提供绝佳机会。</p>\n<p data-pid=\"oCC_2cl6\"><b>冲垮亚洲</b></p>\n<p data-pid=\"F0tuz_NM\">日本垮了。所幸的是，日本有着足够的外汇储备，加上政府及时相助，使得楼市股市暴跌中，没有出现大规模的金融机构破产倒闭。但是，企业损失惨重。1993年，洛克菲勒大厦被折价还给了美国人，索尼哥伦比亚电影公司累计亏损已达33亿美元。更严重的是，亚洲国家来自日本的投资大幅萎缩，失去了必要的日元贷款。有学者认为，日本泡沫破灭，为亚洲金融危机埋下伏笔。</p>\n<p data-pid=\"mn-VLQ2A\">沿着国际金融巨头的指引，从日本流出的热钱涌向东盟。尽管东盟各国此时的日子并不好过，但东亚经济奇迹的喧嚣依然如故。1993年，美国作为东道主，在亚太经合组织会议（APEC）上提出，在APEC第五届部长级会议之后，召开一次首脑会议，并为其定名为“APEC领导人非正式会议”。1993年11月19日至20日，亚太经合组织领导人历史上第一次聚到了一起，身着便装彼此轻松沟通。正是这次会议上，美国人向东盟国家提出了“在公平竞争的环境下，开放金融市场，允许资本自由流动”的要求，还告诉东盟国家，继续从前的高速发展就必须改革，而改革的方向是“华盛顿共识”给出的10个条款。</p>\n<p data-pid=\"eyIAWzq5\">美国给出的“药方”东盟情愿接受？不。东盟、韩国与美国发生了激烈争论。但东盟手里有什么讨价还价的筹码吗？冷战期间，为谋求亚洲盟友在政治和军事上的协助，美国一直单方面向东盟敞开着贸易大门，这使东盟依托出口加工贸易获得了经济快速增长。时过境迁，冷战结束了，美国昔日的这些政治盟友还有什么意义？恐怕唯一可以利用的价值就是谋取经济利益。对东盟来说，冷战结束后，他们原指望日本可以取代美国，但日本垮了，原来的期许已经失去了根基。</p>\n<p data-pid=\"hPWZ4OgM\">这个时候，严重依赖美国市场的东盟经济，开始受到美国“贸易大棒”的敲打，他们既无招架之功，更无还手之力。于是，东盟的大门被撞开了，基本全盘接受了《华盛顿共识》的条款。</p>\n<p data-pid=\"9AV7zA-g\">1997年7月2日，在国际资本长达3个月的连续攻击下，泰国政府举起了白旗。刚刚接任泰国财长12天的塔农宣布泰铢放弃固定汇率。一夜间，泰国国民手中的货币丢失了20%的国际购买力。</p>\n<p data-pid=\"6S7jVsWc\">紧接着，菲律宾比索、印尼盾、马来西亚林吉特相继放弃出口导向型经济赖以平稳生存的固定汇率制。历时仅仅38天，“亚洲四小虎”变成“亚洲四病猫”，其货币踏上了大幅贬值之路。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-8264f9052e4647f2ef410423e796dcb5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"744\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-8264f9052e4647f2ef410423e796dcb5_r.jpg\"></figure><p data-pid=\"fXz1zaUG\">1997年，泰国曼谷一家商店为刺激经济危机后失去消费能力的顾客，挂出了半价优惠。</p>\n<p data-pid=\"VIDr3aJc\">洞开国门的亚洲，让国际金融热钱痛痛快快地享用了“东亚奇迹”。东盟国家又在什么问题上给了索罗斯等金融大鳄以可乘之机？20世纪90年代中期，泰国的时髦青年发明了“烧钱”一词，但他们的“烧钱”非指投资，而是针对进口奢侈品消费。尽管，消费增长改变了泰国GDP结构，但大量奢侈品进口加上出口减少，这使泰国出现了贸易逆差。怎么办？西方经济学家告诉泰国，只要加大资本项目开放，放松金融管制，就会有大量外国资本流入，就可以用资本项目收入弥补贸易逆差，从而平衡国际收支。</p>\n<p data-pid=\"jt48Chzc\">被欧美留学回国人员充斥的泰国政府照方抓药。不断加大金融市场开放程度，不断提高金融自由化程度，不仅民间企业、银行大量借入外债完全没有障碍，甚至政府都说不清泰国民间到底欠了多少外债。更糟糕的是，为资本自由流动免遭汇率风险，泰国政府一直保持固定汇率制度。</p>\n<p data-pid=\"-l44aMLj\">外资流入确实弥补了贸易逆差，确实平衡了国际收支。但这些外国资本并未进入实体经济，而是通过泰国人的手流入了股市楼市。随后，泰国经济泡沫被吹胀，泰国人钱包也被吹胀，奢侈消费欲望越发强烈，贸易逆差越发严重，外债数量越来越多。如此恶性循环至1997年，泰国经济走到了悬崖的边缘。</p>\n<p data-pid=\"rEzXhkfN\">随着互联网经济热潮渐入佳境，美联储试图加息抑制新经济过热，国际金融市场上的“热钱”已经产生回流美国的冲动，这为索罗斯们提供了绝佳的进攻时机。他看中的是，按25泰铢兑换1美元固定汇率，泰国货币已被严重高估了。此时，国际舆论逆转，原来的“亚洲经济奇迹”，现在变成“亚洲没有奇迹”。于是，“热钱”加速外逃，东盟各国外汇储备被洗劫一空，国家面临还不起外债而破产的命运，纷纷放弃固定汇率制，任由本币大幅贬值，任由金融巨头大快朵颐。东盟数十年积累的财富一夜灰飞烟灭，终点回到起点。</p>\n<p data-pid=\"9Dh3nhZK\"><b>IMF是在帮谁？</b></p>\n<p data-pid=\"YwGytE6E\">亚洲金融危机中，世界上最忙的人莫过于IMF总裁康德苏。面对此起彼伏的求援，他奔忙在援助国和受灾国之间，左手拿着急需援助资金，右手则拿着厚厚一摞“受援国必须接受的条款”。条款大致包括五个方面：其一，受援国必须咬紧牙关紧缩货币，同时大幅削减政府财政预算，加大政府行为的透明度；其二，强行关闭问题金融机构，迅速核销坏账，清理不良债务；其三，受援国必须进一步开放，使商品进出和金融交易更加自由；其四，受灾国必须放宽外商投资限制，允许外资对金融机构的投资占股比例增至51%以上；其五，受灾国政府必须将各项条款的执行情况，置于IMF的监控之下。</p>\n<p data-pid=\"y92BhLT_\">1997年12月3日，韩国成为这场危机中最后一个倒下的国家。即将卸任总统的金泳三与3位总统候选人，以及国会议长，在IMF提出的条款上集体画押。金大中当选总统后，将12月3日定名为“国耻日”。</p>\n<p data-pid=\"lo8FCCP-\">在IMF的监督下，韩国制定了《外国人投资促进法》。该法规定韩国彻底放开金融投资限制。从那时起，外资开始在韩国低价抄底，其股份占比在韩国金融资本中的占比开始大幅攀升，1998年占比仅为6%，但到2004年，占比达到33.7%。尤其是韩国排名前5位的银行，全部变成了外资绝对控股的银行，外资持股比例高达60%以上。</p>\n<p data-pid=\"PK78Y8GD\">问题来了。第一，韩国货币政策效率大大降低，当韩国需要降息、放宽货币之时，外资会将韩国存款输往境外套取利差，大大降低了货币宽松的效能，反之亦然；第二，银行被外资控制后，韩国企业完全暴露在境外敌意收购者的威胁之下，而这样的敌意收购事件在韩国的确频频发生。近年来，为国家经济安全，韩国人希望花费极高的代价回购那些具有战略价值的企业，但几乎没有可能。</p>\n<p data-pid=\"1FIC-0vv\">……</p>\n<p data-pid=\"a7XOizF4\">韩国发生的事代表了整个亚洲的现实状况，那个当年被世界银行、IMF以及众多西方学者高调宣扬的“亚洲经济奇迹”，从此销声匿迹，甚至被西方一些经济学教科书定位为反面教材。不过，就算是反面教材，也悄然记述着那些金融受灾国的耻辱，见证着国际金融资本掠夺国家财富的高超技法。</p>\n<p data-pid=\"5q5IQDzi\">研究历史我们可以发现：金融掠夺在不同时代显示出不同特征，既有个性又有共性。从个性角度看：在殖民主义时代，列强明火执仗，金融是战争、海盗行为的支持者，也是掠夺利益的分享者；在产业资本主义时代，为追求贸易带来的超额利润，货币、金融是输出商品的工具，列强之间的货币地位、金融地位争夺，也是为了获得商品利益；在金融资本主义时代，追求贸易利益转变为追求“超额铸币税”利益，强权货币利用绝对优势地位，不仅从占有他国资源、商品、劳动中获利，同时还在左右全球金融价格的涨跌中获利，更从动辄就击垮一个国家经济的过程中获利。</p>\n<p data-pid=\"1lpRxHRL\">从共性角度看：为追逐暴利，贪婪、无耻，你死我活、弱肉强食的丛林法则，无论哪个时代，从未发生过任何改变。</p>\n<p data-pid=\"vl-_bmcu\"><b>金融安全从哪里来？</b></p>\n<p data-pid=\"Ah-J59nN\">2008年，美国爆发史所罕见的金融危机。关于这场危机发生、发展过程的报道已经汗牛充栋于各类媒体。但迄今为止，对一个重要问题似乎并未给出明确判断——这场金融危机到底是什么性质？几乎所有专家学者都把它定位于次贷危机或房地产泡沫危机。这个判断对吗？对也不对。说对，是因为这场危机确实是因为房价大起大落，导致“次级住房抵押贷款债券”流动性断裂所致；说不对，是因为就事论事的表面化定性显得过于粗浅。</p>\n<p data-pid=\"hGbA4tkq\">2008年11月，《中国经济周刊》曾发文提问“美国会破产吗”。这其中，我们提出的明确判断认为：这是美元的危机，是上世纪80年代美国通过债务经济循环模式或称“石油美元再循环”重新获得美元霸权之后发生的，也是必然会发生的又一次美元危机。14年过去了，我们依然坚持这样的判断，而更加清晰的是，我们已经可以看清世界正在经历“百年未有之大变局”。这场变局中，一个无法避免的主题是：从第一次世界大战开始逐步建立起的美元霸权正在走向没落。</p>\n<p data-pid=\"qsyq8sQw\">历史证明，新旧两个时代的交汇点上，斗争无可避免。近年来，美国在国际上制造各种乱象，背后无非是以霸权的手段捍卫美国和美元的霸权利益。这样的霸道反映到金融上，其实就是一场“超级金融战”。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-e6d0a80011f639d83b78aecce533917e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"741\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-e6d0a80011f639d83b78aecce533917e_r.jpg\"></figure><p data-pid=\"LogywhC2\">2008年11月15日，美国华盛顿，暴风雨后的美国国会大厦。</p>\n<p data-pid=\"mMpiQOyL\"><b>历史性的崩溃</b></p>\n<p data-pid=\"ZQZnoN3E\">千禧之年，互联网产业“丑鸭变天鹅”，但不久，互联网泡沫时期挥霍掉资本的泡沫也破灭了。号称“全球央行行长”的美联储前主席格林斯潘出面收拾残局。他有什么好办法？两个字：降息。但是，不断降息会不会引发新的泡沫？2004年，当有人就此质问格林斯潘时，他一改往日晦涩风格而明确地表示，目前情况下，只能一而再、再而三地不断降低利率，为维持美国的债务经济，我们只能借助于新的泡沫。</p>\n<p data-pid=\"mw3FovYM\">格林斯潘年事已高，但并不糊涂。互联网泡沫破灭之时，美国实体经济在GDP中的占比不过18%，其中还有1/3属于军事工业。作为一个“经济空壳化”的国家，还能指望实体经济去拉动经济增长？所以，格林斯潘只能靠国家信用、企业信用和消费信用持续不断地扩张，并形成新的泡沫，去维系全球资本持续不断地流向美国，去维系美国国际收支的平衡，去维系美国经济的持续增长。</p>\n<p data-pid=\"3Mu8byb8\">美国“新泡沫”是什么？绝大多数人认为，那是“次级贷款支撑下的房地产泡沫”。这个判断当然正确，但这次危机，绝非一般性的房地产泡沫危机，它所捅破的是一连串泡沫：美国财政赤字多年积累所构成的“财政赤字泡沫”“贸易逆差泡沫”“评级造假泡沫”“消费过度泡沫”，以及1美元GDP增长需要增加5美元借债的“债务泡沫”等，把它们加总在一起，实际是世界对美国的“信任泡沫”——美元泡沫。</p>\n<p data-pid=\"zmZebCxS\">问题是，遍布世界每个角落的“金融抽血机”，势必让美国危机变成全球危机。事实证明，世界各国政府都在为这场危机买单，而各国投入的财力之和远超美国；事实证明，大量购买“次贷抵押债券”的非金融机构，可能是金融史上最大的受骗者，逃不过破产或被政府接管的命运；事实证明，冰岛破产了，越南、印度、韩国等许多国家也被拖到破产边缘。</p>\n<p data-pid=\"YRTG1ZPm\">危机爆发后，格林斯潘因长期执行低利率政策而遭痛骂。但殊不知，21世纪美国经济的走向，哪是格林斯潘可以单独决定的事情。为搞清这个问题，我们先要搞清一些基本概念。先看“M2=基础货币×货币乘数”这个公式，然后看数据：2007年底，美联储投放基础货币不过9000亿美元，但货币乘数将近10倍——世界之最、历史之最。由此可见：第一，美元货币更多由美国金融机构通过信用扩张而被生产出来；第二，美联储只是控制货币的一个因素，其能力受限于华尔街信用扩张或收缩。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-33bfe2c7d58f4effb6473e4abe4bda82_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"629\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-33bfe2c7d58f4effb6473e4abe4bda82_r.jpg\"></figure><p data-pid=\"jqAaav5O\">另外，真正反映美国货币流动性的数据不是M2，而是M3——将短期金融信用纳入货币范畴之后的数据。大量金融衍生品属于M3范畴，而资料显示，2007年底，仅记录在案的金融衍生品，其票面价值就高达170万亿美元，这个数字在2000年仅为40万亿美元。什么意思？仅金融衍生商品市场一项，其市值与9000亿美元基础货币之间就形成了180倍杠杆。这个杠杆，格林斯潘控制得了吗？</p>\n<p data-pid=\"JlaPhwLo\">历史地看，高杠杆的根源在格林斯潘的老师、美联储前主席保罗·沃尔克。“里根+撒切尔+沃尔克”推行金融自由化，大大提升了华尔街金融机构的货币创造力。正如沃尔克为央行实行“单一利率调节”所作的解释：美联储根本无法准确而及时地获知全社会的货币供应量（M3），以致央行控制货币供应量的企图根本无法实施。所以，应当放弃货币供应量控制而转向利率调控。所谓利率调节，实际是利用利率升降去影响货币乘数，干预商业金融信用的规模，从而间接调控货币总量。</p>\n<p data-pid=\"3iPJPyyH\">正因如此，市场责怪格林斯潘以低息刺激信用膨胀也不为过。格林斯潘也承认：“我根本没想到会有这么严重。”可偏偏就是这么严重，“次按危机”引爆的不只是金融衍生品泡沫，同时引爆一系列泡沫，并直指美元信用泡沫。更严重的是，世界开始质疑“新自由主义经济理论”，而这部被世界奉行40年的“经济圣经”，它所构建的经济运行体系，同时也是协助美元霸权劫掠世界的工具。日本、韩国、亚洲、南美等都曾因遵从这套理论而掉进金融陷阱，现在轮到美国自己了。所以，否定新自由主义经济理论，实际是否定“以美元为核心的国际货币体系”，这等于在刨美元霸权的根基。</p>\n<p data-pid=\"UFRf97Ra\">2009年，去除美元霸权、再造国际货币体系以及超主权货币的讨论变成了G20伦敦峰会的重要话题。也正是从那时起，各国储备货币中提高了黄金权重，德国、法国更从英美金库中运回自己存放的黄金，越来越多的中东国家和非OPEC国家纷纷放宽石油结算货币……如此“去美元化”的行动，会否导致美元霸权的历史性崩塌？</p>\n<p data-pid=\"PCPC70d3\"><b>超级金融战</b></p>\n<p data-pid=\"Axj7heN_\">“一个国家的经济最重要的就是要有‘生产性’，历史上的经济霸权大多经历了从‘生产性’到‘非生产性’的转变，这就使得霸权国家有了生命周期性质，从而无法逃脱由盛到衰的宿命。”美国著名的经济史学家查尔斯·P.金德尔伯格在其名著《世界经济霸权1500—1990》中，写下了这段意味深长的话。</p>\n<p data-pid=\"DgurCcGk\">这恰恰反映了美国的经济现实，但美国会甘心如此宿命？站在历史角度看，俄乌冲突绝非偶然。它不仅是2008年后北约加速东扩，绑架欧洲加码制裁俄罗斯的必然结果，同时也是美国为维护美元霸权的“极端之举”，其根本目的在于逼俄反击，搅乱欧洲，打压欧元，重塑美元资产作为全球最安全资产的地位，并迫使全球资本更多流向美国。</p>\n<p data-pid=\"aHdYpHnI\">这样的招数并不新鲜。欧元诞生后不久，美国挑起科索沃战争，造成资本逃离欧洲，并使欧元国际购买力骤降；撕毁伊核协议，让欧洲得不到足够的能源，弱化其经济实力和欧元地位。当然，还有阻止“北溪2”项目，其目标都是压制欧元保美元。美元指数构成告诉我们：如果占比57.6%的欧元被世界看好，那美元可能不断贬值，世界对美元的信心可能不断恶化，这当然是对美元霸权的挑战。怎么办？拼了，不惜一切手段，包括金融战。</p>\n<p data-pid=\"iB_4sXAA\">认清美元霸权背后支柱，是破除美元霸权的关键。长期以来，我们一直认为：军事霸权、金融霸权、理论霸权、舆论霸权——四大霸权支撑美元霸权，但现在看，似乎还该加上“科技霸权”。</p>\n<p data-pid=\"Gdl55DXy\">军事霸权：武力威慑脱离美国轨道的国家，维护国际大宗商品以美元定价结算的地位，为金融霸权开路。金融霸权：通过大宗商品期货定价权，将灾难引向实体经济为本的发展中国家，从而掠夺全球资本和财富。舆论霸权：英美利益集团操控西方媒体，依仗巨大的资本实力选择性发声，使其他国家的舆论力量大打折扣。理论霸权：为世界“洗脑”，让舆论霸权更具效力，让发展中国家跟随金融帝国的逻辑，不知不觉地掉进它们设定的陷阱；科技霸权：基于美元霸权，美国可以通过印钞去培育和购买全世界的顶级人才，并垄断关键科技优势，并使之变成制约他国经济强盛的武器。</p>\n<p data-pid=\"Yv4gjRfK\">在这样的情况下，金融安全从哪里来？</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-59300c3ba2eda57f21d200b016598c84_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"613\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-59300c3ba2eda57f21d200b016598c84_r.jpg\"></figure><p data-pid=\"iP2A1git\"><b>摒弃“新自由主义宗教”</b></p>\n<p data-pid=\"xY-T3vv2\">历史证明，无论金融战还是军事战，任何一次大规模的行动，都离不开舆论先导。尤其是金融战，经济舆论决定市场预期，市场预期决定资金流向，资金流动决定经济健康——这一市场经济的基本规律，凸显舆论了重要性。为什么西方舆论会如此灵光？因为，部分被“洗过脑”的专家、学者，甚至官员与民众，都会认为“人家说得对”，并跟随舆论的指挥棒，掉进人家设定的陷阱。</p>\n<p data-pid=\"WBiyVgCI\">比如，新自由主义货币理论把消费物价上涨定义为通货膨胀——货币投放过多，而真实的历史告诉我们，在金融资本、美元升贬决定资源期货价格走势的背景下，CPI上涨往往属于输入性物价上涨。所以，货币投放往往是被动跟随价格，原材料购进价格越高，企业所需贷款数量越多，倒逼货币当局不得不去满足企业货币需求。否则，经济停滞，企业破产，而未来物价会因供给不足而出现更大涨幅。所以，必须认真分析物价上涨的原因，对症下药，而不是一味机械教条地通过货币手段去控制物价。</p>\n<p data-pid=\"zx7lzU77\">再比如，新自由主义货币理论强烈反对“工资和物价循环上涨”，但面对当下可能发生的全球性“滞胀”而言，如果美国允许“工资和物价循环上涨”，那大宗商品价格会不会涨上去就下不来？这个过程中，如果不许“物价和工资循环上涨”，从而导致企业前端成本无法顺利向后端消费品转导，并引发股市下跌，企业求贷无路，大量退出，经济会否还有美好的明天？相反，美国通过“物价和工资循环上涨”护住消费、投资，实体经济生存环境改观，一旦重获实体经济新生，美元霸权地位必得巩固。所以，我们必须提高警惕，千万不要掉进新自由主义货币理论的陷阱。</p>\n<p data-pid=\"2G5RMro1\">当然，新自由主义经济理论并非一无是处，它带给我们许多重要的认知启示，但无论如何它只是一种学说，一个学术门派，都必须经受实践的检验。</p>\n<p data-pid=\"FYxEPVap\">我们认为，深化金融供给侧结构性改革，首先需要破除新自由主义经济理论的束缚，依据中国的经济目标与国情特点，探索中国的金融和经济的规律与逻辑，依此实现中国金融理论的供给侧结构性改革，这样才有可能走出中国特色的金融之路力。</p>\n<p data-pid=\"kHq_QKfI\"><b>加大金融供给侧结构性改革力度</b></p>\n<p data-pid=\"Uu-Wqqlw\">按照中国经济高质量发展的要求，中国金融供给结构应逐步转向“长期金融为主，短期金融为辅；资本金融为主，货币金融为辅；股权金融为主，债务金融为辅”。为此，央行应大力调整M2结构，拓展对货币职能的认识。</p>\n<p data-pid=\"eqKDJ88i\">必须意识到，单一强调货币的交易职能是新自由主义货币理论的特征之一，其真实用意是将货币发行权交予金融资本巨头，弱化货币的主权属性和政府控制货币的权力。但基于金融理论发展，中国需要扩展货币认知，更多强调货币的主权属性和资本属性。这就要求央行通过提高基础货币供给、降低货币乘数倍数，调整M2结构。一来，确保广义货币M2的合理增长；二来，推动中国金融长期化、资本化、低成本化；三来，减低商业金融机构通过贷款增加存款——创造货币的能力，降低金融运转速度，降低流动性风险，降低金融成本，使中国金融变得更加稳定。</p>\n<p data-pid=\"vcz-pV0w\"><b>区分外资性质，尽量兴利除弊</b></p>\n<p data-pid=\"F_Zq-Ws1\">研究1997年东南亚金融危机，“热钱”大进大出带给一个国家的危害，大家看得明明白白。但是否该因噎废食？不行。从经济发展的角度看，科技已经成为国际经济竞争的第一要务，而且，当代和未来科技所需资本规模之大，史所罕见。科技竞争首先是资本竞争，尤其是股权资本、产业资本的竞争。要实现高质量发展，离不开全球资本的簇拥。那该如何兴利除弊？</p>\n<p data-pid=\"eipJ4Mgu\">看清不同资本不同偏好。资本有的偏好债券投资，有的偏好股票投资，有的偏好实业投资，有的偏好种子/天使/VC/PE，有的偏好货币套利等。因降息而逃的资本属于哪类？当然是债务和套利偏好的资本，很多也就是俗称的“热钱”。但股权投资偏好资本、实业投资偏好资本，会反感低利率的金融环境吗？显然不会。所以，我们需要的是股权投资、实业投资偏好的资本，而非“热钱”。</p>\n<p data-pid=\"pJSszuKk\">不给金融大鳄搅乱金融市场的工具。历史地看，国际金融大鳄狙击一个国家的金融市场，通常需要市场提供足够高的杠杆、足够多的金融衍生品。所以，应当依据实体经济需求去设置金融衍生品，以及杠杆倍数。</p>\n<p data-pid=\"CfY6Mzhp\">应当始终保持并提升对跨境资本流动的监管能力。同时，应当以立法的方式明确告诉世界：对一切“恶意金融攻击”行为保持高度警惕和干预权力。2010年，当欧洲央行获悉金融大鳄预借欧债危机狙击欧元之时，果断采取措施，不仅要求金融巨头每日提交交易报告，甚至临时拘押了其中的几位始作俑者。</p>\n<p data-pid=\"xKZTNtES\"><b>强化舆论导向和预期引导</b></p>\n<p data-pid=\"J6aXsxtx\">经济舆论决定市场预期，市场预期决定市场价格，市场价格决定资本流向，资本流向决定经济健康——这样一条规律线、逻辑线在经济运行中发挥着决定性作用。从历史经验看，经济舆论与一国金融安全密切相关。</p>\n<p data-pid=\"_Zj_NTsC\">鉴于经济舆论的专业性，它往往比政治舆论来得更加隐秘、更加复杂，这恐怕是发展中国家在经济舆论方面往往处于劣势的关键原因。怎么办？从根上入手，铲除社会公众对一些理论问题似是而非的错误理解。</p>\n<p data-pid=\"hyJFhVgU\">建立专门研究团队，组织多方面的经济专家、新闻人和社会心理学家，研判当下经济舆论动向，并给出具体分析，给出经济舆论引导方向的建议，并依托国家主流媒体和重要传播渠道，借以引导和形成良性预期。</p>\n<p data-pid=\"IwNHnSfW\"><b>防止劳动密集型制造业过度转移至境外</b></p>\n<p data-pid=\"UxBJdUxN\">实际上，全球经济已经陷入低谷，中低端消费品也是未来国际市场的重要需求。2008年金融危机后，中国出口之所以很快修复，其中一个重要原因是：全世界在危机中失去了奢侈消费能力，大量消费转向一般消费品，中国生产的一般消费品也成了他们的生活必需品。</p>\n<p data-pid=\"uHkHM1ja\">中国经济学家樊纲曾经多次提出：没有落后的产业，只有落后的产能。实际上，除了军事用途外，一切科技进步最终都要汇聚在老百姓的衣、食、住、行、文化娱乐等生活层面。所以，政府在鼓励科技进步的同时，有必要同时关注与人民基本生活需求密切相关的消费品工业领域，激励这些产业加快摆脱散而小的状况。尤其在基础设施大规模延伸向西部的过程中，可以通过政策引导、通过产业转移，使之形成几个大型龙头企业，形成几个完整的产业链集群，并以科技渗透保持一般消费品“物美价宜”的中国优势。</p>\n<p data-pid=\"LN57mAmT\">这方面的典型教训是上世纪80年代的日本，当其消费品生产走向高端时却发现，尽管高端消费品确有较高附加值，但越是高端消费品，市场容量越小，竞争越剧烈。比如，凌志轿车就遇到欧洲高档轿车的挤压，最后高端轿车也无奈走向“相对价廉”的套路。更严重的是，高端消费品可能根本不足以支撑一个国家所必需的经济规模。欧洲、日本都是例证，当他们失去一般消费品的制造能力之后，再想恢复，难上加难。</p>\n<p data-pid=\"YTNKBoXM\">事实说明，中国一般性消费品的生产优势，恰恰是世界离不开中国的关键，或许也是中国保证自身金融安全、经济良性发展的手段。</p>\n<p data-pid=\"fVfII8h1\"><b>研究应对大宗商品价格暴涨暴跌的措施</b></p>\n<p data-pid=\"zyR4WZs0\">历史地看，大宗商品价格暴涨暴跌必有华尔街之手。中国是制造大国，是国际原材料价格的被动接受者。所以，避免，至少弱化金融资本通过大宗商品价格侵蚀中国利益，是当下也是未来的一个重要课题。</p>\n<p data-pid=\"qXJPQdUQ\">我们的总体思路核心在于：充分发挥中国制度优势，一手保住企业，一手保住消费能力，从而保住中国经济活力和良性循环。<i>（编者注：2021年5月19日，《中国经济周刊》发表《看清美国“无惧通胀”背后的企图——关于破解大宗商品价格困局的12项建议》，具体事项请参阅这篇文章。）</i></p>\n<p data-pid=\"aJ3FS-5_\">还是那句话：在战略上藐视，在战术上重视。历史经验告诉我们：不按套路出牌，不去跟随敌手所希望的时间、空间和方式，而是以我为主，你打你的，我打我的，才是中国维护自身利益的保障。维护自身金融安全也一样，我们必须会打“迷踪拳”。所以，我们当前最为重要的任务或许是，看清美元霸权背后的支柱，有针对性地查漏洞、立规矩、补短板、强筋骨、造优势，在加厚金融防线的前提下，加大开放力度，使中国有机会利用全球股权资本、实业资本加速中国经济高质量发展。</p>\n<p data-pid=\"3-KwMoZE\">责编 |姚坤</p>\n<p data-pid=\"s6wMXuqp\">版式 | 孟凡婷</p>\n<p data-pid=\"meJHdXeq\">微信值班：杨琳</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhong-guo-jing-ji-zhou-kan?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">中国经济周刊</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/502093198?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"处理器简史 05 | 七年抗辩官司和解，一朝发难反目成仇","date":"2022-04-21 09:07:56","description":"AMD 没有被 1987 年的一纸诉状拖垮，反而在英特尔的围追堵截下开始了自研之路。多年的卧薪尝胆之后，AMD 终于具备了与英特尔抗衡的实力——法槌落定，商场变成了战场，而这场博弈还远未结束。<a href=\"https://sspai.com/prime/story/sv-anecdotes-05\" target=\"_blank\">查看全文</a><p>本文为会员文章，出自<a href=\"https://sspai.com/prime/precog/single\" target=\"_blank\">《单篇文章》</a>，订阅后可阅读全文。</p>\n","link":"https://sspai.com/prime/story/sv-anecdotes-05"},{"title":"新玩意 102｜少数派的编辑们最近买了啥？","date":"2022-04-21 08:31:02","description":"低成本的「全员磁吸」方案。<a href=\"https://sspai.com/post/72821\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/72821"},{"title":"王小波逝世 25 周年，你对他生前有哪些评价？","date":"2022-04-21 08:24:02","description":"\n<p data-pid=\"jmk4jwBV\">王小波始终关怀个体的人。追求人文精神。他的思想对年轻人有很大的启蒙作用。所以建议所有年轻人都去看一下他的东西。他是中国为数不多本着人文主义精神，以关爱的出发点，启蒙青年独立思考，希望大家追求自己精神家园的作家和知识分子。区别于其他知识分子，他比较温暖。同时具备强大的逻辑思维和自然科学知识，这样他的表达和文化传播，具备了其他人没有的优势。</p>\n<p data-pid=\"ZET3dvHZ\">在中国，真正能做到关怀他人精神，同时具备真诚动机和平易近人手段，以及没有文字背后不可告人目的，这样的知识分子挺少的。这也是大家能够记住他的重要原因之一。</p>\n<p data-pid=\"J2l3A_6O\">我翻了一下王小波逝世二十四周年时，自己发的<a href=\"https://www.zhihu.com/question/453877246/answer/1829893891\" class=\"internal\">回答</a>。一年过去了，有了一些额外的想法。</p>\n<p data-pid=\"_rYZqco5\">作为家属，我目睹王小波生前最后一年抑郁的生活状态，和糟糕的身体健康。那年也正是我身体多病，学业与生活不顺的时期。那年王小波把他一直用来写作的PC电脑送给了我。鼓舞了我积极面对人生的勇气。  如今这么动荡的时局下，多数人，多多少少也都有过得很难受的时候。疫情造成的诸多不便，很多行业的萧条和经济下降。这让我加速思考一个我从王小波去世后就一直在想的问题 ------ 人生艰难，如何能够过得好一点。</p>\n<p data-pid=\"Dw_nd2xx\">文字中的王小波，创造了一个追求智慧的精神家园。影响了70后那代人精神启蒙和精神家园的建设。在王小波的精神世界中，追求智慧的乐趣，创造文字艺术的执着，笑对生活中荒谬和愚蠢的乐观，无处不在。</p>\n<p data-pid=\"NyCQ8HJ7\">在现实中活的王小波，人生后期遇到了很多困境。身体状况，工作状况，出书状况，寻找创作灵感的艰辛。但我觉着最核心的还是因为现实压力，导致身体与情绪相互加深负面作用。最终不堪重负。</p>\n<p data-pid=\"SZiqVls1\">80年代是白衣飘飘的理想主义时代。然后就是市场经济飞速发展，房价飞速升高，人们财富飞速聚集的物质和消费主义时代。时代没有好坏，也无法选择。 我们老百姓能做的只有穷则独善其身，万一发达了还能兼善他人。</p>\n<p data-pid=\"bqJnZbJA\">随着年龄增大，发现周围很多人得了肿瘤，抑郁症。朋友里有过早因病去世的，也有抑郁自杀的。我们甚至都开始羡慕起活到80以上善终的父辈们。 最早的五福里，“考终命“可也是五福之一。大城市里生孩子普遍稍晚，健康活到孩子成家立业，不给添麻烦就成了最大追求之一了。</p>\n<p data-pid=\"nuhIXF-T\">因为过去从事科技创业，经营企业，培养团队的工作。 被迫需要找到一些行之有效的方法，来帮助自己和他人，顺利发展工作生活。而人有旦夕祸福，人生里出现灾祸是100%的概率事件。只要不死，我们总是需要办法来帮助自己和他人度过难关，回到正常生活。在人生中不多的一些重大选择比如择校、择业、婚嫁、买房、生子等，决定了你的人生轨迹形状与状态。社会残酷，人生艰难，作为社会生存运动员，被现实毒打要提升抗击打能力。 而财富就像海水，越喝越渴，购物车也一样。我们还要自制，形成生活的秩序，和思想的秩序。</p>\n<p data-pid=\"fUP_vZA6\">我带着大学时代遭遇的王小波和他弟弟意外离世的悲剧。一路思考和实践走到现在。已经25年了。我开始总结一些方法。帮助我们活得更好一些。包括工作，生活，亲密关系，关怀自己。这些都需要知识和实践，并从失败中得到经验。和拳击手准备比赛一样，在下一次重大选择和人生的节点之前，充分做好准备总是没错。掌握方法，锻炼身心，提高抗击打能力。</p>\n<p data-pid=\"Dpj0NuRH\">第一次总结总会浅薄和错误百出。看看就好。至于文字下的目的，除了总结经验希望对他人有利。也希望找到志同道合的朋友。或者事业上的同伴。我希望冒险和刺激。有更多人一起创造点什么，是件特别过瘾的事。</p>\n<a href=\"https://zhuanlan.zhihu.com/p/482757365\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-f342531c046a6dc64acff9c8a20d7b31_qhd.jpg?source=b1748391\" data-image-width=\"4925\" data-image-height=\"3220\" class=\"internal\">姚勇：人生艰难，如何才能过得好一点呢</a><p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/question/527232976/answer/2435647231?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\">知乎用户（登录查看详情）</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/527232976/answer/2435647231?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">184 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/58318293?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">你会如何纪念王小波逝世二十周年？</a><br><a href=\"http://www.zhihu.com/question/453877246?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">王小波逝世 24 周年之际，你有什么对小波说的吗？</a><br>\n","link":"http://www.zhihu.com/question/527232976/answer/2435647231?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"作为一名读者，你要有「甲方思维」","date":"2022-04-21 07:31:24","description":"十个问题与回答，了解 PLUS 栏目背后的思考。<a href=\"https://sspai.com/post/72767\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/72767"},{"title":"解包分析《艾尔登法环》中的BOSS AI设计（快慢刀篇）","date":"2022-04-21 06:56:40","description":"\n<p data-pid=\"Aq1G1PU2\">魂系作品中的“快慢刀”一直以来都是系列BOSS的特色之一，有些人觉得刺激过瘾，有些人则大呼老贼阴险。然而不论如何，这种体验都是Soul-Like游戏中不可分割的一部分。</p>\n<p data-pid=\"kOt5203y\">在《艾尔登法环》中，有些系列老玩家发现“快慢刀”好像有些不一样了。在【读指令篇】的评论中，也有一些同学提到了对法环中“快慢刀”的困惑：</p>\n<p data-pid=\"OG6f9KrP\"><i>（读指令篇：<a href=\"https://zhuanlan.zhihu.com/p/492629716\" class=\"internal\">对面会更惨：解包分析《艾尔登法环》中的BOSS AI设计（读指令篇）</a>）</i></p>\n<blockquote data-pid=\"-PJYKAxj\">解包一下快慢刀吧，这个慢刀为啥总是能砍中我，竖劈的判定时间应该是非常短的，但我无论是滚快还是滚慢都经常吃到<br>希望可以把噩兆妖鬼的慢刀逻辑解包一下，看看他究竟是怎么做到慢得很或者干脆不砍了的</blockquote>\n<p data-pid=\"7VNhgIay\">因此，本文将从“快慢刀”原理设计、解包动作数据、BOSS AI等方面，结合实际例子，看看《艾尔登法环》中的“快慢刀”是不是真的存在着一些问题。</p>\n<p data-pid=\"5gJT0N6h\"><i>（PS：解包文件是工程逆向的结果，不代表FS社员工真的在用这种逆天脚本写AI）</i></p>\n<hr>\n<h2>在讨论这个问题之前，我们需要先明确一下定义，即：</h2>\n<h2>什么是快慢刀？</h2>\n<p data-pid=\"vdmMkAn6\">一般来讲，正常人的反应速度介于200ms~400ms之间，职业选手自然更快，视天赋不同会在100ms左右。年龄、精神状态、注意力集中程度等因素都可能会让这个数值产生波动。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-2c02af5b1f6d5d1ac1bab38e39ece74f_b.jpg\" data-size=\"normal\" data-rawwidth=\"445\" data-rawheight=\"339\" class=\"origin_image zh-lightbox-thumb\" width=\"445\" data-original=\"https://pic4.zhimg.com/v2-2c02af5b1f6d5d1ac1bab38e39ece74f_r.jpg\"><figcaption>反应速度分布</figcaption></figure><p data-pid=\"Nohj9PNB\">有兴趣也可以自己测一下：</p>\n<a href=\"https://link.zhihu.com/?target=https%3A//humanbenchmark.com/tests/reactiontime\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">humanbenchmark.com/test</span><span class=\"invisible\">s/reactiontime</span><span class=\"ellipsis\"></span></a><hr>\n<p data-pid=\"Y02NLdQQ\">所谓“快刀”，其实就是最速攻击，往往要求玩家在“第一时间”做出反应。但在实际设计上，即使是非常硬核的动作游戏，也很少会有把最速攻击的时间放在400ms以内的情况。这是因为游戏设计从来不应该以<b>考察玩家生理能力水平</b>为目标，如果一个最速攻击的攻击判定在200ms，可能有人每次都能躲掉，有人很难躲掉，有人永远躲不掉。这就已经不是玩游戏了，而是筛选新人类了。</p>\n<p data-pid=\"YK8EPZY5\">因此，一般游戏的最速攻击判定时间往往会在500ms以上，一些网络游戏在考虑到延迟的情况下更是会<b>远大于</b>这个值。</p>\n<p data-pid=\"3qJvbBX2\">《艾尔登法环》在这一点上做得还是非常不错的，大部分“快刀”的攻击判定生成都在700ms左右，极少数招式会在500ms+生成。</p>\n<p data-pid=\"4Ci3FsXs\"><i>（当然了，王室幽魂、卢恩熊之类的东西自然是要排除在外的）</i></p>\n<p data-pid=\"nNjCdYB2\">而所谓“慢刀”，则是远远慢于玩家反应速度的攻击，其考察的更多是<b>对游戏的理解</b>、<b>对情况的判断</b>以及<b>对BOSS的了解程度</b>。在魂系游戏中，“慢刀”自起始动作到攻击判定生成往往需要1000ms~3000ms，极少数情况下会大于这一时长。这段时间可以支持玩家做出大部分的动作，甚至额外1~2次的翻滚，然而一旦<b>判断失误</b>，提前输入了某些动作，就会被“慢刀”直接命中。</p>\n<p data-pid=\"-zMCiQ6P\">《艾尔登法环》中的“慢刀”在玩家群里中产生了较大的争议，而在我实际看过一些解包文件后，也确实发现了一些问题，下面将结合一些具体例子和玩家的一些怨念点简单分析一下。</p>\n<hr>\n<h2>为什么慢刀总是很难躲？</h2>\n<p data-pid=\"85HlumzT\">这其实是一个复合型问题，结果由多个原因共同导致。首先我们需要了解的是：</p>\n<h3>《艾尔登法环》中的慢刀出招时间是不是都是定值？</h3>\n<p data-pid=\"f6RIMBmp\">绝大部分是的。</p>\n<p data-pid=\"I2wTYWEW\">例如噩兆妖鬼的这一招，总是会在起手后81帧生成攻击判定。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-d25b5599fe9208c983b788fe6cf70b64_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"568\" data-rawheight=\"612\" data-thumbnail=\"https://pica.zhimg.com/v2-d25b5599fe9208c983b788fe6cf70b64_720w.jpg?source=d16d100b\" class=\"origin_image zh-lightbox-thumb\" width=\"568\" data-original=\"https://pic1.zhimg.com/v2-d25b5599fe9208c983b788fe6cf70b64_r.jpg\"></figure><p data-pid=\"djiSqMKJ\">并且，这一类慢速攻击往往不会掺杂额外的中断条件。简单来说就是一旦出手，除了进入处决状态、转阶段这种通用情况，都会在固定时间内把招式打完。</p>\n<p data-pid=\"KWzbSA0q\"><b>既然时长都是定值，那理论上不是应该很好躲吗？为什么实战中却不是这样呢？</b></p>\n<p data-pid=\"DwlXqDL5\">这主要是由于以下3个原因：</p>\n<ol>\n<li data-pid=\"Os5-2fl_\">每个BOSS都拥有<b>多个</b>不同时长的快、慢刀动作</li>\n<li data-pid=\"O8S59rm5\">某些不同出招的前十几帧刻意被处理成<b>相似或相同的动作表现</b>\n</li>\n<li data-pid=\"6oA4vkyV\">有连招链，一些BOSS在特定情况下会连续出招</li>\n</ol>\n<p data-pid=\"bdaHx9dl\">因此，虽然你可能完美的记住了每一个慢刀的感觉，但当它们混合在一起的时候，特别是快慢混合的时候，仍然是非常容易出错的（就像例题与应用题之间的关系一样）</p>\n<p data-pid=\"OmJlf_Yh\">在这一点上，《艾尔登法环》的做法我认为<b>完全没有问题</b>，因为这完全符合了慢刀的设计目的：</p>\n<blockquote data-pid=\"iea8OFDQ\">其考察的更多是对游戏的理解、对情况的判断以及对BOSS的了解程度</blockquote>\n<hr>\n<h3>既然刚才说到绝大部分慢刀是定值出手，那非定值的是什么样子的呢？</h3>\n<p data-pid=\"hbnrjN2O\">经典的来了！</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-900582678e6431bdf9927642020b68f4_b.jpg\" data-size=\"normal\" data-rawwidth=\"540\" data-rawheight=\"425\" data-thumbnail=\"https://pica.zhimg.com/v2-900582678e6431bdf9927642020b68f4_720w.jpg?source=d16d100b\" class=\"origin_image zh-lightbox-thumb\" width=\"540\" data-original=\"https://pic1.zhimg.com/v2-900582678e6431bdf9927642020b68f4_r.jpg\"><figcaption>举拐棍</figcaption></figure><p data-pid=\"hwP8uYue\">“怎么会事呢？”</p>\n<p data-pid=\"Iv08Evt2\">我们先完整的看一下这招</p>\n<div class=\"highlight\"><pre><code class=\"language-lua\">   <span class=\"kr\">elseif</span> <span class=\"n\">arg1</span><span class=\"p\">:</span><span class=\"n\">HasSpecialEffectId</span><span class=\"p\">(</span><span class=\"n\">TARGET_SELF</span><span class=\"p\">,</span> <span class=\"mi\">5027</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n            <span class=\"kr\">if</span> <span class=\"n\">arg1</span><span class=\"p\">:</span><span class=\"n\">IsInsideTargetCustom</span><span class=\"p\">(</span><span class=\"n\">TARGET_SELF</span><span class=\"p\">,</span> <span class=\"n\">TARGET_ENE_0</span><span class=\"p\">,</span> <span class=\"n\">AI_DIR_TYPE_F</span><span class=\"p\">,</span> <span class=\"mi\">120</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">f35_local4</span> <span class=\"o\">&lt;</span> <span class=\"mi\">60</span> <span class=\"kr\">then</span>\n                <span class=\"n\">arg2</span><span class=\"p\">:</span><span class=\"n\">ClearSubGoal</span><span class=\"p\">()</span>\n                <span class=\"n\">arg2</span><span class=\"p\">:</span><span class=\"n\">AddSubGoal</span><span class=\"p\">(</span><span class=\"n\">GOAL_COMMON_ComboRepeat</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">3004</span> <span class=\"p\">,</span> <span class=\"n\">TARGET_ENE_0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n                <span class=\"kr\">return</span> <span class=\"kc\">true</span></code></pre></div>\n<p data-pid=\"OCIPyzvU\">这一招是3004，它的触发有3个条件：</p>\n<ol>\n<li data-pid=\"xgBtMvL_\">玛尔基特拥有5027效果</li>\n<li data-pid=\"NE4ky7Ss\">玩家位于其正前方120°，半径为8的扇形范围内</li>\n<li data-pid=\"Idqanyxp\">f35_local4是前面声明的变量，一个1~100的随机数，与【读指令篇】中的用法一样，这里代表60%概率</li>\n</ol>\n<p data-pid=\"F2oOVMok\">先不管5027这个效果是用来干什么的，我们继续看动作</p>\n<p data-pid=\"sIDejyZv\">3004是一个<b>总时长为6秒</b>的超长动作。是的，你没想错，如果玛尔基特把这个动作全部做完了，就会发生最喜闻乐见的情况：<b>举半天最后把拐杖放下来不打了</b>。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-6fe06cb52dd2b672e2561b7bd6710aa8_b.jpg\" data-size=\"normal\" data-rawwidth=\"540\" data-rawheight=\"425\" data-thumbnail=\"https://pic3.zhimg.com/v2-6fe06cb52dd2b672e2561b7bd6710aa8_720w.jpg?source=d16d100b\" class=\"origin_image zh-lightbox-thumb\" width=\"540\" data-original=\"https://pic1.zhimg.com/v2-6fe06cb52dd2b672e2561b7bd6710aa8_r.jpg\"><figcaption>“我说停停，你不讲武德”</figcaption></figure><p data-pid=\"vVdP7jCe\">实际上，在3004招式释放期间，玛尔基特会做两件“特别”的事：</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-c70d228abca01a6f00931bc324042ae2_b.jpg\" data-size=\"normal\" data-rawwidth=\"734\" data-rawheight=\"121\" class=\"origin_image zh-lightbox-thumb\" width=\"734\" data-original=\"https://pic3.zhimg.com/v2-c70d228abca01a6f00931bc324042ae2_r.jpg\"><figcaption>每两帧为自己附加一次5033效果</figcaption></figure><ul>\n<li data-pid=\"Gfmc2bYe\">在招式中1.4S~5.1S之间，每两帧，玛尔基特都会尝试为自己附加一次5033效果。</li>\n<li data-pid=\"tHjLkuWn\">在招式中1.4S起到这一招式完整结束，玛尔基特都具有JumpTable[0]（23：End if AI ComboAttack Queued），这个的意思是，如果玛尔基特的连招列表当中被添加了其他招式，那么允许它在JumpTable覆盖的期间跳出当前招式（提前结束）</li>\n</ul>\n<p data-pid=\"cI4sK6i4\">回到我们最爱的Interrupt（）</p>\n<div class=\"highlight\"><pre><code class=\"language-lua\"> <span class=\"kr\">elseif</span> <span class=\"n\">arg1</span><span class=\"p\">:</span><span class=\"n\">HasSpecialEffectId</span><span class=\"p\">(</span><span class=\"n\">TARGET_SELF</span><span class=\"p\">,</span> <span class=\"mi\">5033</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n            <span class=\"kr\">if</span> <span class=\"n\">arg1</span><span class=\"p\">:</span><span class=\"n\">IsInsideTargetCustom</span><span class=\"p\">(</span><span class=\"n\">TARGET_SELF</span><span class=\"p\">,</span> <span class=\"n\">TARGET_ENE_0</span><span class=\"p\">,</span> <span class=\"n\">AI_DIR_TYPE_F</span><span class=\"p\">,</span> <span class=\"mi\">120</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">999</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n                <span class=\"n\">arg2</span><span class=\"p\">:</span><span class=\"n\">ClearSubGoal</span><span class=\"p\">()</span>\n                <span class=\"n\">arg2</span><span class=\"p\">:</span><span class=\"n\">AddSubGoal</span><span class=\"p\">(</span><span class=\"n\">GOAL_COMMON_ComboRepeat</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">3020</span><span class=\"p\">,</span> <span class=\"n\">TARGET_ENE_0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n                <span class=\"kr\">return</span> <span class=\"kc\">true</span>\n            <span class=\"kr\">end</span></code></pre></div>\n<p data-pid=\"XdKWfycr\">在检测到自身有5033效果后，如果玩家位于其前方120°扇形的方向上（999在这里代表无限远），则清空招式列表，同时玛尔基特的连招列表中会被添加上3020招式</p>\n<p data-pid=\"5O-PlDH-\">而3020则是举拐棍的<b>唯一指定衔接动作</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-b5fc7bb1f026db25da949ff0b9a75898_b.jpg\" data-size=\"normal\" data-rawwidth=\"584\" data-rawheight=\"612\" data-thumbnail=\"https://pic2.zhimg.com/v2-b5fc7bb1f026db25da949ff0b9a75898_720w.jpg?source=d16d100b\" class=\"origin_image zh-lightbox-thumb\" width=\"584\" data-original=\"https://pic1.zhimg.com/v2-b5fc7bb1f026db25da949ff0b9a75898_r.jpg\"><figcaption>3020</figcaption></figure><p data-pid=\"0km449LH\"><i>（3020的前30帧是完美衔接举拐棍动作的）</i></p>\n<p data-pid=\"-jztSJU_\">同时，这也解释了玩家们争论的焦点：<b>这一招是不是在读指令？</b></p>\n<p data-pid=\"fMWHcoww\">很多玩家认为这一招是否下劈，取决的玩家是否输入了翻滚或攻击指令；而其实它的逻辑非常单纯，只是判断了一下玩家是否在其前方而已。</p>\n<p data-pid=\"-14Hr6Vc\"><b>简单梳理一下：</b></p>\n<p data-pid=\"VOyc9yL5\">玛尔基特在释放举拐杖后会快速、多次的为自己添加5033效果，这么做的目的是保证AI可以快频率但又不是每帧去判断玩家的位置，一旦发现玩家位于其前方120°扇形区域，就会跳出举拐杖的动作，执行下劈攻击。如果在5.1秒里都没有检测到玩家位于前方，就会把3004招式完整播完，也就是举半天最后放下拐杖。</p>\n<hr>\n<p data-pid=\"oE1CpgLr\"><b>显然，最终的表现玩家们并不太认可</b></p>\n<p data-pid=\"3qRzeWYl\">这并非仅仅是BOSS举着武器呆呆罚站6秒的问题，而是这6秒的时间里玩家也<b>没办法做出正常的反馈行为</b>，一般玩家的最优解可能就是陪它站6秒，这简直太糟了。</p>\n<p data-pid=\"b6F0rvqI\">在玛尔基特举起拐杖后，玩家的决策大概可以分为3种：</p>\n<ol>\n<li data-pid=\"Pdh2H9R0\">保持移动让自己持续在BOSS身后，6秒后其招式结束</li>\n<li data-pid=\"Hy8LPGrQ\">尝试砍它或者喝药，但由于BOSS一直在转向，如果你停了砍它一刀，它就会转到你正面，然后开劈</li>\n<li data-pid=\"mJOgr7XW\">主动走到BOSS正前方，诱使其出招，自己翻滚/弹反/格挡后反击</li>\n</ol>\n<p data-pid=\"ZhYxV3PC\"><b>不论哪一种都挺糟糕的</b>，因为这一招式和玛尔基特会做出的其他行为已经<b>完全不符</b>了。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"e3u0GDuD\">事实上，在《艾尔登法环》的“格调”下，这个问题有一个成本极低但有些弱智的解决方法，就是调整这一招式的转向速度。</p>\n<p data-pid=\"CG_cAcxN\">在【读指令篇】中，我们看到熔炉骑士的某些招式在出招前拥有逆天的<b>300</b>转向速度，而举拐杖这一招是多少呢？我们来看下：</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-1d1f73fa21c3a2e69be4fb3963d40f79_b.jpg\" data-size=\"normal\" data-rawwidth=\"248\" data-rawheight=\"218\" class=\"content_image\" width=\"248\"><figcaption>转向速度</figcaption></figure><p data-pid=\"LQ8BkFze\"><i>（呵呵，可怜的100。那确实是转不过我们褪色者嗷）</i></p>\n<p data-pid=\"HlRwF_Kr\">有人可能会担心，你提了转向速度，BOSS跟个陀螺一样，<b>表现能正常吗</b>？</p>\n<p data-pid=\"JCqwRfnu\">这一点大可不必担心，玛尔基特本身的招式中，基本没有转向速度低于120的情况，<b>而拥有220、240、280的转向速度的招式也有很多</b>。这不仅仅是玛尔基特和熔炉骑士的问题，《艾尔登法环》中的大部分BOSS都拥有极高的招式转向速度以保证其能持续面向玩家。</p>\n<p data-pid=\"MiKF4VT1\">至于这招为什么只有100，我只能说，<b>可能是宫崎英高的怜悯吧</b>。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-85d339f751dbc69adc8fe42d62297e41_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"550\" data-rawheight=\"366\" class=\"origin_image zh-lightbox-thumb\" width=\"550\" data-original=\"https://pic2.zhimg.com/v2-85d339f751dbc69adc8fe42d62297e41_r.jpg\"></figure><p data-pid=\"HZM4UHbi\">另外，上文中提到的举拐杖的判定条件之一，5027效果，其实是它的前置动作“匕首挥砍”中附加的。这一效果在玛尔基特的整个AI文件中仅在此招式中添加，因此，举拐杖的前置唯一指定招式只会是“匕首挥砍”。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-f19afdf36b5c8dc4b1205a2e4b0009f7_b.jpg\" data-size=\"normal\" data-rawwidth=\"568\" data-rawheight=\"616\" data-thumbnail=\"https://pic3.zhimg.com/v2-f19afdf36b5c8dc4b1205a2e4b0009f7_720w.jpg?source=d16d100b\" class=\"origin_image zh-lightbox-thumb\" width=\"568\" data-original=\"https://pic4.zhimg.com/v2-f19afdf36b5c8dc4b1205a2e4b0009f7_r.jpg\"><figcaption>匕首挥砍</figcaption></figure><p data-pid=\"6rELcwi1\">很多人会说自己在通关过程中基本没见过举拐杖这一招，这也是正常的，因为它的<b>触发几率确实非常低</b>。反编译的脚本中，<b>位于前面的判定比后面的判定优先级更高</b>，而触发举拐杖的招式前还有不少内容：</p>\n<div class=\"highlight\"><pre><code class=\"language-lua\">    <span class=\"kr\">if</span> <span class=\"n\">arg1</span><span class=\"p\">:</span><span class=\"n\">IsInterupt</span><span class=\"p\">(</span><span class=\"n\">INTERUPT_ActivateSpecialEffect</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n        <span class=\"n\">arg1</span><span class=\"p\">:</span><span class=\"n\">SetNumber</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">arg1</span><span class=\"p\">:</span><span class=\"n\">SetNumber</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">arg1</span><span class=\"p\">:</span><span class=\"n\">GetNumber</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"kr\">if</span> <span class=\"n\">arg1</span><span class=\"p\">:</span><span class=\"n\">GetNumber</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">4</span> <span class=\"kr\">then</span>\n            <span class=\"n\">arg1</span><span class=\"p\">:</span><span class=\"n\">SetNumber</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"n\">arg1</span><span class=\"p\">:</span><span class=\"n\">SetNumber</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"n\">arg1</span><span class=\"p\">:</span><span class=\"n\">GetNumber</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"kr\">end</span>\n        <span class=\"kr\">if</span> <span class=\"n\">arg1</span><span class=\"p\">:</span><span class=\"n\">HasSpecialEffectId</span><span class=\"p\">(</span><span class=\"n\">TARGET_SELF</span><span class=\"p\">,</span> <span class=\"mi\">5025</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n            <span class=\"kr\">if</span> <span class=\"n\">arg1</span><span class=\"p\">:</span><span class=\"n\">IsInsideTargetCustom</span><span class=\"p\">(</span><span class=\"n\">TARGET_SELF</span><span class=\"p\">,</span> <span class=\"n\">TARGET_ENE_0</span><span class=\"p\">,</span> <span class=\"n\">AI_DIR_TYPE_F</span><span class=\"p\">,</span> <span class=\"mi\">160</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">5.5</span> <span class=\"o\">+</span> <span class=\"n\">arg1</span><span class=\"p\">:</span><span class=\"n\">GetMapHitRadius</span><span class=\"p\">(</span><span class=\"n\">TARGET_SELF</span><span class=\"p\">))</span> <span class=\"kr\">then</span>\n                <span class=\"n\">arg2</span><span class=\"p\">:</span><span class=\"n\">ClearSubGoal</span><span class=\"p\">()</span>\n                <span class=\"kr\">if</span> <span class=\"n\">arg1</span><span class=\"p\">:</span><span class=\"n\">IsInsideTargetCustom</span><span class=\"p\">(</span><span class=\"n\">TARGET_SELF</span><span class=\"p\">,</span> <span class=\"n\">TARGET_ENE_0</span><span class=\"p\">,</span> <span class=\"n\">AI_DIR_TYPE_F</span><span class=\"p\">,</span> <span class=\"mi\">120</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">3.5</span> <span class=\"o\">+</span> <span class=\"n\">arg1</span><span class=\"p\">:</span><span class=\"n\">GetMapHitRadius</span><span class=\"p\">(</span><span class=\"n\">TARGET_SELF</span><span class=\"p\">))</span> <span class=\"ow\">and</span> <span class=\"n\">f35_local4</span> <span class=\"o\">&lt;</span> <span class=\"mi\">60</span> <span class=\"kr\">then</span>\n                    <span class=\"n\">arg2</span><span class=\"p\">:</span><span class=\"n\">AddSubGoal</span><span class=\"p\">(</span><span class=\"n\">GOAL_COMMON_ComboRepeat</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">3003</span><span class=\"p\">,</span> <span class=\"n\">TARGET_ENE_0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n                <span class=\"kr\">else</span>\n                    <span class=\"n\">arg2</span><span class=\"p\">:</span><span class=\"n\">AddSubGoal</span><span class=\"p\">(</span><span class=\"n\">GOAL_COMMON_ComboRepeat</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">3001</span><span class=\"p\">,</span> <span class=\"n\">TARGET_ENE_0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n                <span class=\"kr\">end</span>\n                <span class=\"kr\">return</span> <span class=\"kc\">true</span>\n            <span class=\"kr\">elseif</span> <span class=\"n\">arg1</span><span class=\"p\">:</span><span class=\"n\">IsInsideTargetCustom</span><span class=\"p\">(</span><span class=\"n\">TARGET_SELF</span><span class=\"p\">,</span> <span class=\"n\">TARGET_ENE_0</span><span class=\"p\">,</span> <span class=\"n\">AI_DIR_TYPE_F</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">arg1</span><span class=\"p\">:</span><span class=\"n\">GetNumber</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1</span> <span class=\"ow\">and</span> <span class=\"n\">arg1</span><span class=\"p\">:</span><span class=\"n\">HasSpecialEffectId</span><span class=\"p\">(</span><span class=\"n\">TARGET_SELF</span><span class=\"p\">,</span> <span class=\"mi\">16200</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n                <span class=\"n\">arg1</span><span class=\"p\">:</span><span class=\"n\">SetNumber</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">arg1</span><span class=\"p\">:</span><span class=\"n\">GetNumber</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n                <span class=\"n\">arg2</span><span class=\"p\">:</span><span class=\"n\">ClearSubGoal</span><span class=\"p\">()</span>\n                <span class=\"n\">arg2</span><span class=\"p\">:</span><span class=\"n\">AddSubGoal</span><span class=\"p\">(</span><span class=\"n\">GOAL_COMMON_ComboRepeat</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">3013</span><span class=\"p\">,</span> <span class=\"n\">TARGET_ENE_0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n                <span class=\"kr\">return</span> <span class=\"kc\">true</span>\n            <span class=\"kr\">end</span>\n        <span class=\"kr\">elseif</span> <span class=\"n\">arg1</span><span class=\"p\">:</span><span class=\"n\">HasSpecialEffectId</span><span class=\"p\">(</span><span class=\"n\">TARGET_SELF</span><span class=\"p\">,</span> <span class=\"mi\">5026</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n            <span class=\"kr\">if</span> <span class=\"n\">arg1</span><span class=\"p\">:</span><span class=\"n\">IsInsideTargetCustom</span><span class=\"p\">(</span><span class=\"n\">TARGET_SELF</span><span class=\"p\">,</span> <span class=\"n\">TARGET_ENE_0</span><span class=\"p\">,</span> <span class=\"n\">AI_DIR_TYPE_F</span><span class=\"p\">,</span> <span class=\"mi\">120</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">10.5</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">f35_local3</span> <span class=\"o\">&gt;</span> <span class=\"mf\">5.5</span> <span class=\"kr\">then</span>\n                <span class=\"n\">arg2</span><span class=\"p\">:</span><span class=\"n\">ClearSubGoal</span><span class=\"p\">()</span>\n                <span class=\"n\">arg2</span><span class=\"p\">:</span><span class=\"n\">AddSubGoal</span><span class=\"p\">(</span><span class=\"n\">GOAL_COMMON_ComboRepeat</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">3018</span><span class=\"p\">,</span> <span class=\"n\">TARGET_ENE_0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n                <span class=\"kr\">return</span> <span class=\"kc\">true</span>\n            <span class=\"kr\">elseif</span> <span class=\"n\">arg1</span><span class=\"p\">:</span><span class=\"n\">IsInsideTargetCustom</span><span class=\"p\">(</span><span class=\"n\">TARGET_SELF</span><span class=\"p\">,</span> <span class=\"n\">TARGET_ENE_0</span><span class=\"p\">,</span> <span class=\"n\">AI_DIR_TYPE_F</span><span class=\"p\">,</span> <span class=\"mi\">160</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n                <span class=\"n\">arg2</span><span class=\"p\">:</span><span class=\"n\">ClearSubGoal</span><span class=\"p\">()</span>\n                <span class=\"n\">arg2</span><span class=\"p\">:</span><span class=\"n\">AddSubGoal</span><span class=\"p\">(</span><span class=\"n\">GOAL_COMMON_ComboRepeat</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">3005</span><span class=\"p\">,</span> <span class=\"n\">TARGET_ENE_0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n                <span class=\"kr\">return</span> <span class=\"kc\">true</span>\n            <span class=\"kr\">elseif</span> <span class=\"n\">arg1</span><span class=\"p\">:</span><span class=\"n\">IsInsideTargetCustom</span><span class=\"p\">(</span><span class=\"n\">TARGET_SELF</span><span class=\"p\">,</span> <span class=\"n\">TARGET_ENE_0</span><span class=\"p\">,</span> <span class=\"n\">AI_DIR_TYPE_F</span><span class=\"p\">,</span> <span class=\"mi\">360</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">arg1</span><span class=\"p\">:</span><span class=\"n\">GetNumber</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1</span> <span class=\"kr\">then</span>\n                <span class=\"kr\">if</span> <span class=\"n\">arg1</span><span class=\"p\">:</span><span class=\"n\">HasSpecialEffectId</span><span class=\"p\">(</span><span class=\"n\">TARGET_SELF</span><span class=\"p\">,</span> <span class=\"mi\">16200</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n                    <span class=\"n\">arg1</span><span class=\"p\">:</span><span class=\"n\">SetNumber</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">arg1</span><span class=\"p\">:</span><span class=\"n\">GetNumber</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n                    <span class=\"n\">arg2</span><span class=\"p\">:</span><span class=\"n\">ClearSubGoal</span><span class=\"p\">()</span>\n                    <span class=\"n\">arg2</span><span class=\"p\">:</span><span class=\"n\">AddSubGoal</span><span class=\"p\">(</span><span class=\"n\">GOAL_COMMON_ComboRepeat</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">3010</span><span class=\"p\">,</span> <span class=\"n\">TARGET_ENE_0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n                    <span class=\"kr\">return</span> <span class=\"kc\">true</span>\n                <span class=\"kr\">end</span>\n            <span class=\"kr\">elseif</span> <span class=\"n\">arg1</span><span class=\"p\">:</span><span class=\"n\">IsInsideTargetCustom</span><span class=\"p\">(</span><span class=\"n\">TARGET_SELF</span><span class=\"p\">,</span> <span class=\"n\">TARGET_ENE_0</span><span class=\"p\">,</span> <span class=\"n\">AI_DIR_TYPE_F</span><span class=\"p\">,</span> <span class=\"mi\">120</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">40</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">f35_local3</span> <span class=\"o\">&gt;=</span> <span class=\"mf\">7.5</span> <span class=\"ow\">and</span> <span class=\"n\">arg1</span><span class=\"p\">:</span><span class=\"n\">GetNumber</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1</span> <span class=\"kr\">then</span>\n                <span class=\"n\">arg1</span><span class=\"p\">:</span><span class=\"n\">SetNumber</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n                <span class=\"n\">arg2</span><span class=\"p\">:</span><span class=\"n\">ClearSubGoal</span><span class=\"p\">()</span>\n                <span class=\"n\">arg2</span><span class=\"p\">:</span><span class=\"n\">AddSubGoal</span><span class=\"p\">(</span><span class=\"n\">GOAL_COMMON_ComboRepeat</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">3017</span><span class=\"p\">,</span> <span class=\"n\">TARGET_ENE_0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n                <span class=\"kr\">return</span> <span class=\"kc\">true</span>\n            <span class=\"kr\">end</span>\n        <span class=\"kr\">elseif</span> <span class=\"n\">arg1</span><span class=\"p\">:</span><span class=\"n\">HasSpecialEffectId</span><span class=\"p\">(</span><span class=\"n\">TARGET_SELF</span><span class=\"p\">,</span> <span class=\"mi\">5027</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n            <span class=\"kr\">if</span> <span class=\"n\">arg1</span><span class=\"p\">:</span><span class=\"n\">IsInsideTargetCustom</span><span class=\"p\">(</span><span class=\"n\">TARGET_SELF</span><span class=\"p\">,</span> <span class=\"n\">TARGET_ENE_0</span><span class=\"p\">,</span> <span class=\"n\">AI_DIR_TYPE_F</span><span class=\"p\">,</span> <span class=\"mi\">120</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">f35_local4</span> <span class=\"o\">&lt;</span> <span class=\"mi\">60</span> <span class=\"kr\">then</span>\n                <span class=\"n\">arg2</span><span class=\"p\">:</span><span class=\"n\">ClearSubGoal</span><span class=\"p\">()</span>\n                <span class=\"n\">arg2</span><span class=\"p\">:</span><span class=\"n\">AddSubGoal</span><span class=\"p\">(</span><span class=\"n\">GOAL_COMMON_ComboRepeat</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">3004</span> <span class=\"p\">,</span> <span class=\"n\">TARGET_ENE_0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n                <span class=\"kr\">return</span> <span class=\"kc\">true</span></code></pre></div>\n<p data-pid=\"ITiIL-IT\">更不用说即便真走到了判断5027效果这里，<b>还有一个40%的不执行概率</b>。因此，在打玛尔基特的过程中没见过这招也是正常的，不是BUG。</p>\n<hr>\n<h2>接下来，我们再看看慢刀的第二个问题：攻击判定</h2>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-5f9923fd12f77ab5819340561fe29903_b.jpg\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"492\" data-thumbnail=\"https://pic2.zhimg.com/v2-5f9923fd12f77ab5819340561fe29903_720w.jpg?source=d16d100b\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic4.zhimg.com/v2-5f9923fd12f77ab5819340561fe29903_r.jpg\"><figcaption>典中典之“打逆”</figcaption></figure><p data-pid=\"OYWTYNxG\">类似的情况大家应该多少都在游戏中碰到过，只不过在不慢放的前提下往往很难发现这可能是BOSS的问题，只会单纯感觉有一些奇怪，或者疑惑自己为什么被打中了。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-f878db8a2b2ea61ff7fae17ad879720a_b.jpg\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"588\" class=\"origin_image zh-lightbox-thumb\" width=\"576\" data-original=\"https://pic3.zhimg.com/v2-f878db8a2b2ea61ff7fae17ad879720a_r.jpg\"><figcaption>攻击判定生成</figcaption></figure><p data-pid=\"c-l7WNvC\">这里我截取了蒙葛特此招式攻击判定生成的一帧，可以看到在<b>锤子仍位于身后时</b>，<b>攻击判定就已经生成了</b>。结果自然是玩家站在蒙葛特身后也会被打飞。</p>\n<p data-pid=\"9zgTh0xb\">一般而言，动作游戏中一次出招可以分为前摇、攻击、后摇三个部分（最简单的情况），而伤害判定则只会在中间的攻击部分存在。这是非常合理的，前摇往往意味着招式的抬手，它是给予玩家的预警，也是一个连贯动作发力的起始，往往动作速度稍慢。在这一阶段附加伤害判定是不合理的：从表现上来讲，动作本身并没有发力到最大速度；从设计上来说，进一步压缩了玩家的反应时间，并带来了很多奇怪的问题。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-5b8eebb4506af1fca42b5ef59620bf7b_b.jpg\" data-size=\"normal\" data-rawwidth=\"540\" data-rawheight=\"415\" data-thumbnail=\"https://pica.zhimg.com/v2-5b8eebb4506af1fca42b5ef59620bf7b_720w.jpg?source=d16d100b\" class=\"origin_image zh-lightbox-thumb\" width=\"540\" data-original=\"https://pic4.zhimg.com/v2-5b8eebb4506af1fca42b5ef59620bf7b_r.jpg\"><figcaption>我绝对饶不了你！</figcaption></figure><p data-pid=\"4gSeWJwV\">在《艾尔登法环》中，并不止有蒙葛特存在这样的问题，很多BOSS的<b>攻击判定生成时机</b>和<b>攻击判定的范围</b>，都存在着严重问题。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-969353a9f9824ea5c450b0301c2d6003_b.jpg\" data-size=\"normal\" data-rawwidth=\"574\" data-rawheight=\"420\" class=\"origin_image zh-lightbox-thumb\" width=\"574\" data-original=\"https://pic4.zhimg.com/v2-969353a9f9824ea5c450b0301c2d6003_r.jpg\"><figcaption>老将尼奥</figcaption></figure><p data-pid=\"Dv4uFVSM\">比如老将尼奥这招快速突进的劈砍，攻击判定生成时武器还完完全全在身后，并且判定的位置和突进的夹角达到了180°。<b>这并不是一个“旋风斩”类的技能</b>，但玩家站在他背后会被妥妥的打飞。得益于《艾尔登法环》中BOSS夸张的转向速度，单人游戏时你可能不太会发现这种问题，然而一旦召唤骨灰或是进入多人游戏，这就会变成一个大概率事件了。</p>\n<h3>这类攻击判定的问题不单单导致了BOSS攻击行为的不直觉和玩家难以躲避，还产生了另一个严重问题：</h3>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-62bdd79fc4f1a1ed47452c9e5d584df1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"711\" data-rawheight=\"308\" class=\"origin_image zh-lightbox-thumb\" width=\"711\" data-original=\"https://pic2.zhimg.com/v2-62bdd79fc4f1a1ed47452c9e5d584df1_r.jpg\"></figure><p data-pid=\"BfUW1NIz\">上图中我们需要关心的内容只有两个</p>\n<ul>\n<li data-pid=\"WFLiKzQf\">InvokeAttackBehavior：生成攻击判定</li>\n<li data-pid=\"yyqULVuC\">JumpTable[0]（5：InvokeParriedState(ArgC）：玩家弹反窗口</li>\n</ul>\n<p data-pid=\"Z24rptAH\">可以看出，玩家的弹反窗口的生效时间，<b>比攻击判定的生成慢了5帧</b>。</p>\n<p data-pid=\"KTHUHpdT\">理论上，如果所有这类攻击都是从BOSS脑袋后边开始挥，那最终结果可能“<b>负负得正</b>”了，因为这样虽然攻击判定早就生成了，但5帧时间正好挥到差不多BOSS前方，玩家可以弹反。然而实际上，很多直接从BOSS面前抬手的招式，其弹反窗口也慢于攻击判定的生成。</p>\n<p data-pid=\"a8v2ZKq7\">可能有人会产生质疑</p>\n<blockquote data-pid=\"lMKrfDE0\">你懂不懂魂like啊，我们硬核游戏就是这样子的，弹反就是很难的！</blockquote>\n<p data-pid=\"kDikGbqM\">正常来说，攻击判定生成和弹反窗口的时机应该是一致的，以往的魂系游戏，黑魂、只狼也确实是这么做的（我去看了），甚至是《艾尔登法环》中相当一部分BOSS，也是正常的</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-bc8bced2d8a13a777aeadf529a78757c_b.jpg\" data-size=\"normal\" data-rawwidth=\"639\" data-rawheight=\"207\" class=\"origin_image zh-lightbox-thumb\" width=\"639\" data-original=\"https://pic1.zhimg.com/v2-bc8bced2d8a13a777aeadf529a78757c_r.jpg\"><figcaption>攻击判定生成和弹反窗口的时机一致</figcaption></figure><p data-pid=\"8bh3osQb\"><b>那攻击判定比弹反窗口快会存在什么问题呢？</b></p>\n<p data-pid=\"2hNzafmM\">如果你贴BOSS很近，那这类本来能弹反的招式，你永远弹反不到，因为在你弹之前，已经被打到了。</p>\n<figure data-size=\"small\"><img src=\"https://pic1.zhimg.com/v2-40d6859fd481ef8e97ecf1e2e6bd89e0_b.jpg\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"976\" data-rawheight=\"552\" class=\"origin_image zh-lightbox-thumb\" width=\"976\" data-original=\"https://pic1.zhimg.com/v2-40d6859fd481ef8e97ecf1e2e6bd89e0_r.jpg\"></figure><p data-pid=\"Cjyue3hL\">除了蒙葛特、老将尼奥以外，像拉达冈红狼（不咬刀时）、卢恩熊、王室幽魂之类的怪也都属于攻击判定问题的“重灾区”</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-126ec68e52011f90ae8d7b40a1ce05ef_b.jpg\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"616\" data-thumbnail=\"https://pic1.zhimg.com/v2-126ec68e52011f90ae8d7b40a1ce05ef_720w.jpg?source=d16d100b\" class=\"origin_image zh-lightbox-thumb\" width=\"576\" data-original=\"https://pic4.zhimg.com/v2-126ec68e52011f90ae8d7b40a1ce05ef_r.jpg\"><figcaption>“张嘴即判定”</figcaption></figure><hr>\n<h2>另一个慢刀相关问题的原因其实和慢刀本身并不相关，但在快节奏的战斗中，往往也会被认为是慢刀带来的问题。</h2>\n<p data-pid=\"3L1Jarct\">我们来看一个实际例子：</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-6890699b83b1d50efeb9f193c025440d_b.jpg\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"447\" data-thumbnail=\"https://pic2.zhimg.com/v2-6890699b83b1d50efeb9f193c025440d_720w.jpg?source=d16d100b\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic2.zhimg.com/v2-6890699b83b1d50efeb9f193c025440d_r.jpg\"><figcaption>非慢放正常视角</figcaption></figure><p data-pid=\"D937abxt\"><b>提问，图里的玩家是怎么死的？</b></p>\n<p data-pid=\"un4FPDOy\">如果你看了本文前边的内容，此处大概率会这样认为</p>\n<blockquote data-pid=\"Cvm1d1ZD\">蒙葛特这招前戳攻击判定做得“不干净”，在收招阶段仍然留有攻击判定，所以虽然翻滚躲过了出招时的判定，但仍然被收刀时的碰撞框碰到了</blockquote>\n<p data-pid=\"fAzQXuhN\">这思路完全没错，但事实真的是这样吗？我们不妨在慢动作里看看：</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-5b591beda03055d50681c573440a65f4_b.jpg\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"447\" data-thumbnail=\"https://pic2.zhimg.com/v2-5b591beda03055d50681c573440a65f4_720w.jpg?source=d16d100b\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic1.zhimg.com/v2-5b591beda03055d50681c573440a65f4_r.jpg\"><figcaption>慢放视角</figcaption></figure><p data-pid=\"le8LQ81-\">...</p>\n<p data-pid=\"2AEv5YVX\">事实上，即便慢放我们也很难推翻【<b>收招攻击判定蹭到致死</b>】的这一推论。然而这个问题的原因却比这个单纯很多，它仅仅是因为蒙葛特出招后的这个左侧跳跃招式具有攻击判定</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-4eabaf9f52d7abfc6c983d151a9d651e_b.jpg\" data-size=\"normal\" data-rawwidth=\"576\" data-rawheight=\"616\" data-thumbnail=\"https://pic2.zhimg.com/v2-4eabaf9f52d7abfc6c983d151a9d651e_720w.jpg?source=d16d100b\" class=\"origin_image zh-lightbox-thumb\" width=\"576\" data-original=\"https://pic3.zhimg.com/v2-4eabaf9f52d7abfc6c983d151a9d651e_r.jpg\"><figcaption>侧跳的攻击判定</figcaption></figure><p data-pid=\"mgYm1zdq\">而由于蒙葛特自身AI的原因，它会经常性的释放侧跳：</p>\n<div class=\"highlight\"><pre><code class=\"language-lua\"><span class=\"kr\">function</span> <span class=\"nf\">Morgott213000_Act47</span><span class=\"p\">(</span><span class=\"n\">arg0</span><span class=\"p\">,</span> <span class=\"n\">arg1</span><span class=\"p\">,</span> <span class=\"n\">arg2</span><span class=\"p\">)</span>\n    <span class=\"n\">arg0</span><span class=\"p\">:</span><span class=\"n\">SetNumber</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"n\">arg0</span><span class=\"p\">:</span><span class=\"n\">GetNumber</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"kr\">if</span> <span class=\"n\">arg0</span><span class=\"p\">:</span><span class=\"n\">IsInsideTarget</span><span class=\"p\">(</span><span class=\"n\">TARGET_ENE_0</span><span class=\"p\">,</span> <span class=\"n\">AI_DIR_TYPE_L</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">)</span> <span class=\"kr\">then</span>\n        <span class=\"kd\">local</span> <span class=\"n\">f31_local0</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n        <span class=\"kd\">local</span> <span class=\"n\">f31_local1</span> <span class=\"o\">=</span> <span class=\"mi\">6003</span>\n        <span class=\"kd\">local</span> <span class=\"n\">f31_local2</span> <span class=\"o\">=</span> <span class=\"n\">TARGET_ENE_0</span>\n        <span class=\"kd\">local</span> <span class=\"n\">f31_local3</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"kd\">local</span> <span class=\"n\">f31_local4</span> <span class=\"o\">=</span> <span class=\"n\">AI_DIR_TYPE_R</span>\n        <span class=\"kd\">local</span> <span class=\"n\">f31_local5</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">arg1</span><span class=\"p\">:</span><span class=\"n\">AddSubGoal</span><span class=\"p\">(</span><span class=\"n\">GOAL_COMMON_SpinStep</span><span class=\"p\">,</span> <span class=\"n\">f31_local0</span><span class=\"p\">,</span> <span class=\"n\">f31_local1</span><span class=\"p\">,</span> <span class=\"n\">f31_local2</span><span class=\"p\">,</span> <span class=\"n\">f31_local3</span><span class=\"p\">,</span> <span class=\"n\">f31_local4</span><span class=\"p\">,</span> <span class=\"n\">f31_local5</span><span class=\"p\">)</span>\n        <span class=\"n\">GetWellSpace_Odds</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"kr\">return</span> <span class=\"n\">GetWellSpace_Odds</span>\n    <span class=\"kr\">else</span>\n        <span class=\"kd\">local</span> <span class=\"n\">f31_local0</span> <span class=\"o\">=</span> <span class=\"n\">arg0</span><span class=\"p\">:</span><span class=\"n\">IsInsideTarget</span><span class=\"p\">(</span><span class=\"n\">TARGET_ENE_0</span><span class=\"p\">,</span> <span class=\"n\">AI_DIR_TYPE_R</span><span class=\"p\">,</span> <span class=\"mi\">180</span><span class=\"p\">)</span>\n        <span class=\"kr\">if</span> <span class=\"n\">f31_local0</span> <span class=\"kr\">then</span>\n            <span class=\"n\">f31_local0</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n            <span class=\"kd\">local</span> <span class=\"n\">f31_local1</span> <span class=\"o\">=</span> <span class=\"mi\">6002</span>\n            <span class=\"kd\">local</span> <span class=\"n\">f31_local2</span> <span class=\"o\">=</span> <span class=\"n\">TARGET_ENE_0</span>\n            <span class=\"kd\">local</span> <span class=\"n\">f31_local3</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n            <span class=\"kd\">local</span> <span class=\"n\">f31_local4</span> <span class=\"o\">=</span> <span class=\"n\">AI_DIR_TYPE_L</span>\n            <span class=\"kd\">local</span> <span class=\"n\">f31_local5</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n            <span class=\"n\">arg1</span><span class=\"p\">:</span><span class=\"n\">AddSubGoal</span><span class=\"p\">(</span><span class=\"n\">GOAL_COMMON_SpinStep</span><span class=\"p\">,</span> <span class=\"n\">f31_local0</span><span class=\"p\">,</span> <span class=\"n\">f31_local1</span><span class=\"p\">,</span> <span class=\"n\">f31_local2</span><span class=\"p\">,</span> <span class=\"n\">f31_local3</span><span class=\"p\">,</span> <span class=\"n\">f31_local4</span><span class=\"p\">,</span> <span class=\"n\">f31_local5</span><span class=\"p\">)</span>\n            <span class=\"n\">GetWellSpace_Odds</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n            <span class=\"kr\">return</span> <span class=\"n\">GetWellSpace_Odds</span>\n        <span class=\"kr\">end</span>\n    <span class=\"kr\">end</span>\n    \n<span class=\"kr\">end</span></code></pre></div>\n<p data-pid=\"51RUYL--\">由于相关内容比较零散，这里就不全贴了，总结起来就是：</p>\n<ol>\n<li data-pid=\"AKX_7gq8\">如果玩家没有位于蒙葛特正前方120°时，左右横跳会具有相当的权重</li>\n<li data-pid=\"EuafEX3z\">在释放完部分攻击招式后，蒙葛特会根据玩家的方位（偏左/偏右），概率性进行左/右侧跳</li>\n</ol>\n<p data-pid=\"CgpPOz00\">因此，玩家一般<b>很难直观判断</b>出自己究竟是被攻击招式命中了还是被侧跳蹭到了（最可行的办法则是通过掉血来判断，侧跳的伤害肯定比一般攻击要低）</p>\n<p data-pid=\"o-HDxGBg\">但是，无论判断与否，对玩家来说都是难以接受的体验。玩家好不容易凭实力躲过了快慢刀，却要被不知道什么时候会出来的无前摇侧跳命中造成硬直，打乱自己良好的立回节奏。</p>\n<p data-pid=\"ywYoqXl5\">这里的问题就在于</p>\n<h3>为什么侧跳要有攻击判定？</h3>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-3c1fd328b4ba5bd1e877b87894685088_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"275\" data-rawheight=\"201\" class=\"content_image\" width=\"275\"></figure><p data-pid=\"CYvwgJxb\">这种设计在怪物猎人中很常见，怪物猎人当中的大部分龙在进行原地转向、前冲、侧移等行为的时候，脚下都会带有攻击判定，很少会有玩家认为这是不对的。我认为最基本的原因在于两点：</p>\n<ul><li data-pid=\"KhC4Kcfy\"><b>合理性</b></li></ul>\n<p data-pid=\"-RTjYZzd\">当游戏中没有设定某些内容时，玩家会自然而然地<b>从客观现实中代入自己的认知</b>。怪物猎人中并没有明确指出哪样的攻击是会造成伤害的，哪样是不会的；而龙本身的体型都很大，远远大于玩家的模型，因此从现实世界的客观规律上来说，玩家如果在其移动时位于脚下，确实是会<b>受到影响</b>。就像没有任何人会质疑为什么<b>站在移动神庙脚边会受到伤害一样</b>。而像蒙葛特这种BOSS，本质上是人型，虽然模型比玩家大了一些，但侧跳的动作非常轻盈，很难联想到这种动作会造成伤害（更不用说你向侧面跳却能打到前面的人这种事了）</p>\n<ul><li data-pid=\"kicjjPcv\"><b>统一性</b></li></ul>\n<p data-pid=\"vvqwiswP\">如果一种动作会造成伤害，那与其相似或同类的其他动作也应该造成伤害，这样才能给玩家带来统一、连贯的认知。在《艾尔登法环》种，蒙葛特的侧移有伤害判定，但是几乎相同模型大小的很多人型BOSS却没有，这种差异使得玩家的认知产生割裂，自然就会带来困惑与质疑</p>\n<hr>\n<h2>总结一下</h2>\n<ul>\n<li data-pid=\"gzDc5uee\">“定长”快慢刀在设计与实现上<b>完全没有问题</b>，在游戏当中也发挥了应有的作用，与历代FS社作品并无太大差异</li>\n<li data-pid=\"6oqLERqW\">“非定长”慢刀在<b>设计上</b>不存在问题，一定程度上丰富了BOSS的战斗体验，并且在整个游戏中出现的次数并不多，战斗仍然以“定长”快慢刀为核心。但在<b>实现上</b>，部分招式在AI中考虑的情况过于单一，最终导致表现出了问题</li>\n<li data-pid=\"z0h_vsWm\">攻击判定的<b>范围</b>与攻击判定的<b>生成时机</b>是《艾尔登法环》中部分BOSS的严重问题。如果说范围的大小是出于战斗体验变化的改革还勉强说得通的话，那同样的异形状武器在血缘诅咒中通过多个判定框去贴合，让判定范围与实际模型<b>尽可能保持一致</b>，而在《艾尔登法环》中直接一个大圆柱体了事的行为，我只能<b>判定为“偷懒”</b>；<b>判定生成时机的问题</b>更像是在游戏发售的前夕，一种<b>自上而下的意志</b>导致大部分BOSS的攻击判定时机被修改了，因为弹反窗口的时机都是正确且精准的，所以我很难认为这是实际制作者“不会做”而导致的。这种自上而下的意志可能是骨灰在游戏制作的末期才被决定加入游戏、亦或是两次线上测试中的数据提示出BOSS的强度需要调整但时间又来不及了之类的（我随便说的）</li>\n<li data-pid=\"vP2Om5gv\">侧跳有攻击判定这一点，从合理上我不做太多的评价，但从统一性上来讲《艾尔登法环》是存在问题的</li>\n</ul>\n<p data-pid=\"wENLDG4n\">整体看下来，很多玩家觉得有问题、觉得奇怪的点，实际上确实是存在问题的。特别是很多“系列老玩家”，他们可以很明显的感觉到《艾尔登法环》的一些地方和之前的作品是有所不同的。革新与优化是大家一致支持的，然而一旦发现“退步”或“偷懒”，不论是因为工期、内容量还是什么别的原因，还是要坚定的指出来的。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-959da33b61b742f5b307e7b9916028f8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"310\" data-rawheight=\"44\" class=\"content_image\" width=\"310\"></figure><p data-pid=\"InW1y93W\">快慢刀的这些问题，本质上<b>“并不太”</b>影响玩家正常游玩。就像大部分BOSSAI在中、近距上都有着良好的体验，但有些BOSS在较远距离的情况下会变成“复读机”或者“读指令怪”一样，上述快慢刀问题会在部分BOSS的个别招式中出现，<b>概率低</b>，且拥有一定的容错率，<b>很少会直接致死</b>。</p>\n<p data-pid=\"eO_1wMse\">假如你从初见一个BOSS到击败它需要死20次，那本文中的一些问题也许会把这个数字改写为22。相信广大的褪色者们一定可以_________的吧！</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-4e5ed5c89e518612f660d672cd9b7d31_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"701\" data-rawheight=\"253\" class=\"origin_image zh-lightbox-thumb\" width=\"701\" data-original=\"https://pic2.zhimg.com/v2-4e5ed5c89e518612f660d672cd9b7d31_r.jpg\"></figure><p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/wang-wei-dong-84-40?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">对面会更惨</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/495737108?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"旧电脑装 Chrome OS，官方「刷机」方案来了：Chrome OS Flex 安装与体验","date":"2022-04-21 06:30:00","description":"Chrome OS Flex 是 Google 战略下特征相当鲜明的产物：熟悉 Google 生态的用户可以「拎包入住」，简便易用的安装体验也适用于大规模部署需求。<a href=\"https://sspai.com/post/72764\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/72764"},{"title":"回归 Obsidian 的纯与真，写给普通人的入门指南","date":"2022-04-21 03:29:51","description":"所以，我就想好好地写一篇文章， 写给每一个像我一样的普通人，不懂代码，不懂编程，就想实实在在地用 Obsidian 来提升自己的思考和认知。这篇文章，我想回归 Obsidian 最核心、最纯粹的用法，回归 Obsidian 的纯与真。<a href=\"https://sspai.com/post/72697\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/72697"},{"title":"“变态”与“戏精” | 中生代往事·昆虫帝国的“二次革命”（上）","date":"2022-04-21 03:08:56","description":"\n<p data-pid=\"qNBN-giy\">昆虫，节肢动物里最为成功的群体，如今地球的实际统治者。其多样性放眼全生物界也是首屈一指。</p>\n<p data-pid=\"9opNg8LO\">其物种数之多，让其余物种全部加在一起也比不上（占全部生物的60%）。上至蓝天，下至广袤大地和不同水域，无不是虫影所至。</p>\n<p data-pid=\"M2B7v7HQ\">甚至在和自诩天之骄子的人类的较量中，也不处于下风。不论是给无数人留下心理阴影的心理战高手蟑螂，还是靠传播疾病在消灭人类排行榜上夺魁的蚊子，无不是称霸一方的虫界巨头。</p>\n<p data-pid=\"azvtFR9o\">本期《中生代往事》就由笔者为大家扒一扒这庞大帝国的发家史。</p>\n<h3><b>飞行“革命”与第一帝国的毁灭</b></h3>\n<p data-pid=\"tcpF7YF7\">昆虫帝国最早建立于4.8亿年前的奥陶纪早期，其类群整体可以分为<b>第一帝国</b>（古生代昆虫动物群）和<b>第二帝国</b>（现代昆虫动物群）。</p>\n<p data-pid=\"M6UEVQDa\">在大约距今4亿年前的泥盆纪，昆虫帝国经历了第一次“工业革命”，发明了<b>动力飞行</b>能力。振翅高飞的昆虫成为了整个动物界首个飞向蓝天的物种。建立了独立空军的昆虫帝国迅速扩大势力范围，很快便在还不那么繁茂的陆地上站稳了脚跟，这也使得第一帝国繁荣昌盛。</p>\n<p data-pid=\"OU3yY-8b\">然而地球老爹的暴脾气就和资本主义国家的经济危机一样从不缺席。自寒武纪以来地球上经历的五次<b>生物大灭绝</b>（小的更多，只是规模不如这五次）就把所有的生物折腾的够呛。</p>\n<p data-pid=\"PvXLSfoo\">这其中<b>二叠纪末生物大灭绝</b>作为最大的<b>帝国坟场</b>，几乎对当时的所有生物帝国造成了重创。昆虫的节肢亲戚三叶虫帝国也在建立了近3亿年后宣布彻底灭亡。昆虫当然也不例外，辉煌了2亿多年的昆虫第一帝国从此走向衰亡…</p>\n<h3><b>卷土重来与“二次革命”</b></h3>\n<p data-pid=\"Umd2s-Eu\">和所有存活至今的古老物种一样，昆虫也从来不是个服输的主。亡国不怕，只要不灭种，分分钟给你来个重建。</p>\n<p data-pid=\"BNd3LVnw\">于是在大灭绝之后的<b>中生代</b>，昆虫帝国迎来了“<b>二次革命</b>”，其主要内容包括</p>\n<p data-pid=\"fAD_QK6Q\">1：<b>完全变态昆虫</b>的崛起；</p>\n<p data-pid=\"_ynbG9YQ\">2：<b>昆虫拟态和伪装</b>行为的大发展；</p>\n<p data-pid=\"a1UKiblW\">3：昆虫<b>真社会性</b>行为的多次起源和辐射；</p>\n<p data-pid=\"-ANmVOSj\">4：中生代中期<b>拟寄生性</b>昆虫的出现；</p>\n<p data-pid=\"JpEvC9XT\">5：<b>传粉</b>昆虫的辐射和演替。</p>\n<p data-pid=\"zR5enmP8\">“二次革命”给了昆虫帝国更为强大的生存能力，使得昆虫第二帝国开始建立并延续至今。</p>\n<p data-pid=\"rPf0vj1L\">下面笔者就来一一细说让昆虫帝国重获荣光的这五大“革命”举措。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-de69dbad2bf4ed11270ab80c09d589bd_b.jpg\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"428\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-de69dbad2bf4ed11270ab80c09d589bd_r.jpg\"><figcaption>五大”革命”举措在中生代的发展。其中拟态主要标注了覆物伪装的大概时间（图源：改自王博）</figcaption></figure><h3><b>虫起虫落一场戏，完全变态赋生机！</b></h3>\n<p data-pid=\"hxczrwdf\"><b>完全变态</b>昆虫是指一生经过卵、幼虫、蛹、成虫四个时期的昆虫。幼虫与成虫不仅在外部形态和内部结构上千差万别，而且大多数情况下<b>食性</b>与<b>生活习性</b>也相距甚远。</p>\n<p data-pid=\"YsqnB7-d\">完全变态昆虫是现如今多样化最多的帝国成员（多样性占比超过95%）。所以其被称为帝国最成功的“革命果实”也不为过。虽然其在<b>石炭纪</b>的第一帝国时期就已经出现，但其真正开始占据帝国中枢的统治地位还是在<b>中生代早期</b>。</p>\n<p data-pid=\"ANjdMNcK\">产自中国和法国中三叠世地层中的大量全变态昆虫化石证明了这一点。这是因为<b>三叠纪</b>作为地质史上著名的“乱纪元”有着更为<b>跌宕起伏</b>的环境变化。而完全变态昆虫拥有的<b>蛹阶段</b>可以更好的保护虫体，同时能够避免成年体和幼体的食物和环境<b>内卷</b>从而可以大量的扩张种群数量。</p>\n<p data-pid=\"E0GfC5Tk\">毕竟你在天上吃草，我在水里冒泡，才能岁月静好。植物在中三叠世时期的大辐射也给了全变态昆虫天时地利，以上种种条件促使帝国的“新兴阶级”冉冉升起并最终走向辉煌。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-70467ebeed8bdda564b1b5912abe0b4c_b.jpg\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"518\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-70467ebeed8bdda564b1b5912abe0b4c_r.jpg\"><figcaption>Cetonia aurata的蛹(图源：Didier Descouens)</figcaption></figure><h3><b>中生代的奥斯卡，拼的就是演技</b></h3>\n<p data-pid=\"ByG_cm3L\">在人类世界，新一届奥斯卡颁奖典礼落幕，威尔史密斯的一巴掌可谓震惊中外，同时拿下最佳男演员的桂冠也是毫不客气。比起奥斯卡的各种政治正确和个人喜好，自然界可完全就只看演技。</p>\n<p data-pid=\"l3CltVG0\"><b>伪装和模仿</b>在自然界中无处不在。这些形形色色的<b>COSPLAY</b>可不是为了取悦什么评委，大部分是为了活命。昆虫作为此间高手，其中一些现生种类的演技已出神入化，完全融入了环境。</p>\n<p data-pid=\"p28LKljK\"><b>1.演员素养，全身心投入</b></p>\n<p data-pid=\"yvyqwbsl\">不过在化石资料中凝结的演技却并不那么常见。虽有些争议，但较公认的意见是昆虫拟态的行为应起源于<b>古生代</b>。早期主要是靠翅膀进行简单的拟态，到了中生代拟态昆虫开始有了长足的发展。</p>\n<p data-pid=\"ccsvr1PU\">在属于侏罗纪时期的内蒙古道虎沟生物群就发现并描述过相关的拟态组合。不过侏罗纪时期的COSPLAY也还只是刚起步的小儿科。到了白垩纪，昆虫们的演技开始变得娴熟起来。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-fe4e2d6e29e1c20dbbd56f3648051700_b.jpg\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"888\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-fe4e2d6e29e1c20dbbd56f3648051700_r.jpg\"><figcaption>昆虫拟态及真社会性演化化石记录示意图(图源：改自王博)</figcaption></figure><p data-pid=\"27ycXk6H\">很多昆虫将自己身上的一些身体构造变成了COS的一部分。比如在巴西的早白垩世地层里就发现过一种竹节虫（枝蝗科），它们用自己纤细的前胸节、腿和腹部将自己变做了一节树枝。而在白垩纪中期的克钦琥珀中，演技的登峰造极已经让评委眼花缭乱了，包括未成年虫都表现出极为精湛的表演水平。其中<b>黄氏拟苔草蛉</b>（属于脉翅目草蛉总科）的幼虫就和<b>王氏拟叶蚤蝼</b>（直翅目蚤蝼科），就卷柏拟态最佳演员奖进行了激烈的角逐。</p>\n<p data-pid=\"CCZ-NtNB\">不过究竟谁能获奖就需要各位读者来评判了。这些夸张和逼真的肢体艺术和COSPLAY给中生代的古环境带来了不一样的色彩和影响，并延续至今。</p>\n<p data-pid=\"F1cd0cHw\">下图可以来观看千姿百态的中生代COSER哟~</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-406df6ba968dc0d004a163680ac13a7d_b.jpg\" data-size=\"normal\" data-rawwidth=\"1006\" data-rawheight=\"565\" class=\"origin_image zh-lightbox-thumb\" width=\"1006\" data-original=\"https://pic2.zhimg.com/v2-406df6ba968dc0d004a163680ac13a7d_r.jpg\"><figcaption>伪装成树枝的白垩纪Eoproscopia化石(图源：HEADS)</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-a3ad40da199da652ddd5f1aa6ae514ad_b.jpg\" data-size=\"normal\" data-rawwidth=\"964\" data-rawheight=\"542\" class=\"origin_image zh-lightbox-thumb\" width=\"964\" data-original=\"https://pic2.zhimg.com/v2-a3ad40da199da652ddd5f1aa6ae514ad_r.jpg\"><figcaption>现生的伪装大师竹节虫(图源：David M. Martill)</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-80411e0ca4aefc8a34ad3430c5724266_b.jpg\" data-size=\"normal\" data-rawwidth=\"864\" data-rawheight=\"486\" class=\"origin_image zh-lightbox-thumb\" width=\"864\" data-original=\"https://pic3.zhimg.com/v2-80411e0ca4aefc8a34ad3430c5724266_r.jpg\"><figcaption>图左：模仿卷柏的拟苔草蛉复原图 (图源：杨定华) 图右：拟苔草蛉琥珀化石 (图源：王博)</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-b8a0de692d457b779fa68e0e4e1e8d7b_b.jpg\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"281\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic4.zhimg.com/v2-b8a0de692d457b779fa68e0e4e1e8d7b_r.jpg\"><figcaption>拟叶蚤蝼复原图 (图源：杨定华) </figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-5578433a772f3268095b3f60a89f6015_b.jpg\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"281\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic2.zhimg.com/v2-5578433a772f3268095b3f60a89f6015_r.jpg\"><figcaption>a,c:卷柏类植物 b:拟叶蚤蝼</figcaption></figure><p data-pid=\"gn0jMaKY\"><b>2.另辟蹊径，活用道具</b></p>\n<p data-pid=\"-skHpnvz\">除了用自己的肢体以假乱真外，还有一种叫做<b>覆物伪装</b>的方法也很有效。简单地说就是直接往自己身上装植物碎片。</p>\n<p data-pid=\"nEx7HDOM\">这种类似人类时装大秀的方式在脉翅目和半翅目的幼虫里最为常见，它们就喜欢在身上弄点土味的花花草草来使自己和环境融为一体。</p>\n<p data-pid=\"YXaWfbwt\">不过比起拟态，覆物伪装较难在化石记录里被保存下来。<b>几乎所有记录覆物伪装的化石记录都来自“中生代时装周”白垩纪的琥珀，</b>包括白垩纪早期的黎巴嫩琥珀、西班牙和法国的琥珀以及白垩纪中期的克钦琥珀。</p>\n<p data-pid=\"cUZd26AA\">虽然三叠纪并没有模仿和拟态的相关化石记录，但是从侏罗纪到白垩纪的记录推断，昆虫的拟态和伪装变得越来越<b>复杂和多样</b>。到了白垩纪中期，大部分现生具备覆物伪装能力的昆虫都在那时独立演化出了这一小伎俩。这说明在被子植物开始大辐射的那个时代，昆虫就已经面临着和现在差不多的环境压力了。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-cfa92315437b6cfa539d8ed368031c52_b.jpg\" data-size=\"normal\" data-rawwidth=\"501\" data-rawheight=\"677\" class=\"origin_image zh-lightbox-thumb\" width=\"501\" data-original=\"https://pic3.zhimg.com/v2-cfa92315437b6cfa539d8ed368031c52_r.jpg\"><figcaption>覆物伪装行为的啮虫目（a-f）与半翅目蟾蝽科（g，h）昆虫(图源：许春鹏)</figcaption></figure><p data-pid=\"XBwOMqcB\"><b>下期预告</b></p>\n<p data-pid=\"C-qANAPB\"><b>完全变态和拟态伪装这两大举措让昆虫帝国在群雄并起的中生代保障了生存能力。</b>全变态加强了昆虫对于环境的适应性，伪装则进一步将自己融入这个环境，也为帝国的霸权铺平了道路。</p>\n<p data-pid=\"xQxKoN7n\">下一期的《中生代往事》将带来昆虫的第三大“革命”措施——真社会性的多次起源和变革。看看小小的昆虫是如何组建自己的“钢铁洪流”的，我们下期见！</p>\n<p data-pid=\"_mAmS3bh\">作者单位：中国科学院南京地质古生物研究所</p>\n<p data-pid=\"J8OZKul9\"><b><i>参考文献：</i></b></p>\n<p data-pid=\"LxEzPq1F\"><i>[1]  Wang Bo, Xu Chunpeng, Jarzembowski E.A. (2022) Ecological radiations of  insects in the Mesozoic. Trends in Ecology &amp; Evolution,   <a href=\"https://link.zhihu.com/?target=https%3A//doi.org/10.1016/j.tree.2022.02.007\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">doi.org/10.1016/j.tree.</span><span class=\"invisible\">2022.02.007</span><span class=\"ellipsis\"></span></a>. </i></p>\n<p data-pid=\"7Kwopq7t\"><i>[2]  Luo Cihang, Beutel R.G., Engel M.S., Liang Kun, Li Liqin, Li Jiahao, Xu  Chunpeng, Vrsansky P., Jarzembowski E.A., Wang Bo, 2021. Life history  and evolution of the enigmatic Cretaceous–Eocene Alienopteridae: A  critical review. Earth-Science Reviews.  <a href=\"https://link.zhihu.com/?target=https%3A//doi.org/10.1016/j.earscirev.2021.103914\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">doi.org/10.1016/j.earsc</span><span class=\"invisible\">irev.2021.103914</span><span class=\"ellipsis\"></span></a>. </i></p>\n<p data-pid=\"2WCJNmAJ\"><i>[3] Michener, C.D. and Grimaldi, D.A. (1988) The oldest fossil bee: apoid history, evolutionary stasis, and antiquity of social behavior. Proc. Natl. Acad. Sci. U. S. A. 85, 6424–6426</i></p>\n<p data-pid=\"e4mEJEkW\"><i>[4] Wenzel, J.W. (1990) A social wasp’s nest from the Cretaceous period, Utah, USA, and its biographical significance. Psyche 97, 21–30</i></p>\n<p data-pid=\"hzkjddjs\"><i>[5] Batelka, J. et al. (2021) The complete life cycle of a Cretaceous beetle parasitoid. Curr. Biol. 31, R118–R119</i></p>\n<p data-pid=\"A4C8wCqZ\"><i>[6] Labandeira, C.C. (2010) The pollination of mid Mesozoic seed  plants and the early history of long-proboscid insects. Ann. Mo. Bot. Gard. 97, 469–513</i></p>\n<p data-pid=\"RcufyiIE\"><i>[7] Peñalver, E. et al. (2012) Thrips pollination of Mesozoic gymnosperms. Proc. Natl. Acad. Sci. U. S. A. 109, 8623–8628</i></p>\n<p data-pid=\"928FuUSX\"><i>[8]  Xu, C., Wang, B., Fan, L., Jarzembowski, E.A., Fang, Y., Wang, H., Li,  T., Zhuo, D., Ding, M., Engel, M.S. (2021). Widespread mimicry and  camouflage among mid-Cretaceous insects. Gondwana Research.  <a href=\"https://link.zhihu.com/?target=https%3A//doi.org/10.1016/j.gr.2021.07.025\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">doi.org/10.1016/j.gr.20</span><span class=\"invisible\">21.07.025</span><span class=\"ellipsis\"></span></a>. </i></p>\n<p data-pid=\"oHewia7G\"><i>[9]  Fan, L., Xu, C., Jarzembowski, E. A., Cui, X. (2021). Quantifying plant  mimesis in fossil insects using deep learning. Historical Biology,  1-10. <a href=\"https://link.zhihu.com/?target=https%3A//doi.org/10.1080/08912963.2021.1952199\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">doi.org/10.1080/0891296</span><span class=\"invisible\">3.2021.1952199</span><span class=\"ellipsis\"></span></a>.</i></p>\n<p data-pid=\"2aZu2neh\"><i>[10]  Heads, S.W. (2008) The fifirst fossil Proscopiidae (Insecta,  Orthoptera, Eumastacoidea) with comments on the historical biogeography  and evolution of the family. Palaeontology 51, 499–507</i></p>\n<p data-pid=\"9-BHDHGr\"><i>[11]  Tapanila, L. and Roberts, E.M. (2012) The earliest evidence of  holometabolan insect pupation in conifer wood. PLoS One 7, e31668</i></p>\n<p data-pid=\"_sKb_sgi\"><i>[12]  Li Ya, Li Yan-Da, Wang Yong-Dong*, Schneider Harald, Shi Gong-Le, 2022.  Re-appraisal of lacewing mimicry of liverworts from the mid-Cretaceous  Kachin amber, Myanmar with a description of Selaginella cretacea sp.  nov. (Selaginellales, Selaginellaceae). Cretaceous  Research, 133:105143. <a href=\"https://link.zhihu.com/?target=https%3A//doi.org/10.1016/j.cretres.2022.105143\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">doi.org/10.1016/j.cretr</span><span class=\"invisible\">es.2022.105143</span><span class=\"ellipsis\"></span></a>.</i></p>\n<a href=\"https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/QQSOFPq1t3lCjgV-QctYHA\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-f23556eb3dd41cf9c9e42ba9ab7579c4_qhd.jpg\" data-image-width=\"731\" data-image-height=\"311\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">“变态”与“戏精” | 中生代往事·昆虫帝国的“二次革命”（上）</a><p data-pid=\"iYF1G0Af\"><a class=\"member_mention\" href=\"https://www.zhihu.com/people/da971e1f564d733611f6a9a51930c4aa\" data-hash=\"da971e1f564d733611f6a9a51930c4aa\" data-hovercard=\"p$b$da971e1f564d733611f6a9a51930c4aa\">@中国科普博览</a> <a class=\"member_mention\" href=\"https://www.zhihu.com/people/df247603a41cf58a466551f0ab09d525\" data-hash=\"df247603a41cf58a466551f0ab09d525\" data-hovercard=\"p$b$df247603a41cf58a466551f0ab09d525\">@科普中国</a> <a class=\"member_mention\" href=\"https://www.zhihu.com/people/eb271ac52f1730cdf0725f627c013f14\" data-hash=\"eb271ac52f1730cdf0725f627c013f14\" data-hovercard=\"p$b$eb271ac52f1730cdf0725f627c013f14\">@中科院之声</a> <a class=\"member_mention\" href=\"https://www.zhihu.com/people/0f2006385065c411ad6d08b4fc62b788\" data-hash=\"0f2006385065c411ad6d08b4fc62b788\" data-hovercard=\"p$b$0f2006385065c411ad6d08b4fc62b788\">@知乎科学</a> </p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhong-ke-yuan-nan-jing-gu-sheng-wu-suo?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">中科院南古所</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/502210130?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"派早报：真我推出 Q5 系列手机、vivo 召开双芯影像技术沟通会等","date":"2022-04-21 00:30:33","description":"华为推出终端业务及多款新品、联想发布 ThinkFamily 多款新品等。<a href=\"https://sspai.com/post/72793\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/72793"},{"title":"写给想用代码建造新世界的你","date":"2022-04-20 09:26:49","description":"摆在你面前的是一份诱惑：100 小时后，代码能让你成为一个新世界的主宰。<a href=\"https://sspai.com/post/72729\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/72729"},{"title":"「干净又卫生」受人喜爱的原因，被我用 Python 爬出来了","date":"2022-04-20 09:26:08","description":"\n<p>[......]</p>\n<a href=\"https://sspai.com/post/72756\" target=\"_blank\">查看全文</a><p>本文为付费栏目文章，出自<a href=\"https://sspai.com/series/271\" target=\"_blank\">《100 小时后请叫我程序员》</a>，订阅后可阅读全文。</p>\n","link":"https://sspai.com/post/72756"},{"title":"《艾尔登法环》推出 1.04 版本更新，游戏里又有哪些大的变动，你感受如何？","date":"2022-04-20 03:47:52","description":"\n<p data-pid=\"2X7_GfPL\">内容很多，主要还是说轮椅人被破防系列。</p>\n<p><br></p>\n<p><img src=\"https://pica.zhimg.com/v2-9d767a81f1b8da85cecedbdd943b1d48_720w.jpg?source=b1748391?rss\" data-rawwidth=\"957\" data-rawheight=\"582\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-9d767a81f1b8da85cecedbdd943b1d48\" data-watermark-src=\"v2-49fed64d3241bd37164aec82d0ba7cce\" data-private-watermark-src=\"v2-19908a933455b795e16d89859116a6c6\"></p>\n<p data-pid=\"k7EATw1_\">一、出血没削，改变的是造成出血、冰冻时的“独立硬直”，比以往更短。</p>\n<p data-pid=\"g4ccMQYj\">（间接影响是，低延迟时类似于尸山血海、血变对双刃剑及对十字刀一类的PVP出血流meta，不能利用出血硬直强行连招，对手的脱离率会提升）</p>\n<p><br></p>\n<p data-pid=\"X9GqKDyu\">PS：尸太战技削了，然而我找不到尸太那道血斩特效的攻击成分，不知道削了多少，武器自身并没有改过出血，都是和上版本正常的，也就是那道特效修了出血，但修多少暂时不知道。</p>\n<p><br></p>\n<p><br></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-459329c330f72b78298b4417802725aa_720w.jpg?source=b1748391?rss\" data-rawwidth=\"936\" data-rawheight=\"444\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-459329c330f72b78298b4417802725aa\" data-watermark-src=\"v2-e58bfba293db338876ee0469e335faf5\" data-private-watermark-src=\"v2-dace8a027c2d48178c30fa4c6695ef28\"></p>\n<p data-pid=\"HduTbHn6\">二、盾牌战技卡利亚奉反生成的3把剑，基础没改依旧是270，但取消补正（强化补正和属性补正）</p>\n<p data-pid=\"-RF70aEV\">而魔法的奉反则是从每把剑115加强到245，但同样也是取消补正。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-0f104e08b18a2f9ea7671cc9dc21e53b_720w.jpg?source=b1748391?rss\" data-rawwidth=\"629\" data-rawheight=\"528\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-0f104e08b18a2f9ea7671cc9dc21e53b\" data-watermark-src=\"v2-eb8c4359580cac77f6655a2537a60d73\" data-private-watermark-src=\"v2-2be7bde7dc4d4bc61dcca480083a0dd7\"></p>\n<p data-pid=\"HwEYHYAM\">（之前以为魔法的卡利亚奉反不吃补正是bug，现在反过来了，其实吃补正的才是bug……所以以前能打五六七的，现在顶死3*270还算破防率，吃buff顶死一千多，导致一堆人破防。）</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-501906c0a41bd4e3d7392c2c3ce8b74c_720w.jpg?source=b1748391?rss\" data-rawwidth=\"466\" data-rawheight=\"553\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-501906c0a41bd4e3d7392c2c3ce8b74c\" data-watermark-src=\"v2-86813c2e2a42a3565abee26ab54324d3\" data-private-watermark-src=\"v2-7f6d16180d819ee9c4f0733c73490eaa\"></p>\n<p data-pid=\"NiRCXO-L\">而黄金树大盾的奉反没啥变化，也吃补正，自装填bug还在。</p>\n<p><br></p>\n<p><br></p>\n<p data-pid=\"FTjzB6Km\">三，蝇群削弱了。</p>\n<p data-pid=\"vrEB23DG\">首先是子弹的改动，飞行的子弹没变，持续时间还是4.4秒，但炸开那段的累积从70下调到40。</p>\n<p data-pid=\"w00V7_Od\">（也就是以前能打7-8次的，现在只能打4次，而且每次从70下调到40，砍得是够厉害的了）</p>\n<p><img src=\"https://pic1.zhimg.com/v2-652b2bedda51522da470b44c3fa942f8_720w.jpg?source=b1748391?rss\" data-rawwidth=\"469\" data-rawheight=\"342\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-652b2bedda51522da470b44c3fa942f8\" data-watermark-src=\"v2-e15aef6551e7ddd98ecc0f46a6589b51\" data-private-watermark-src=\"v2-c7391cf43a23a8f6daaeebbd306c6c21\"></p>\n<p><br></p>\n<p data-pid=\"Biq9LNWD\">而虫群散开效果，从2.5秒削到1.6秒，玩家进入这个“圈圈”是会附带出血的，而改动从2升到4出血，频率0.1秒。</p>\n<p><img src=\"https://pica.zhimg.com/v2-61ee70ef84ff022227acaf8b35467efc_720w.jpg?source=b1748391?rss\" data-rawwidth=\"646\" data-rawheight=\"428\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-61ee70ef84ff022227acaf8b35467efc\" data-watermark-src=\"v2-c3c1cd8ed331457be4db594d59ef3230\" data-private-watermark-src=\"v2-5296ba652d9d9c7c094a8711c86a1f37\"></p>\n<p><img src=\"https://pica.zhimg.com/v2-f88a36eb3c406b84687a5f765a4535c0_720w.jpg?source=b1748391?rss\" data-rawwidth=\"693\" data-rawheight=\"113\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-f88a36eb3c406b84687a5f765a4535c0\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"UjTvOxMv\">四，龙飨和白金杖的感应补正没被削，公告说的削弱感应补正对累积的加成。</p>\n<p data-pid=\"5ywtiayg\">也就是“削曲线”</p>\n<p><img src=\"https://pic2.zhimg.com/v2-cb7f6b674fc92f648da472d87d0afa75_720w.jpg?source=b1748391?rss\" data-rawwidth=\"751\" data-rawheight=\"106\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-cb7f6b674fc92f648da472d87d0afa75\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"sptxMtid\">加成方式可以参考我以前魂三科普异常累积的文章</p>\n<a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://zhuanlan.zhihu.com/p/46963606\" data-size=\"small\" data-image=\"https://pic2.zhimg.com/v2-b8dbcd0c3901e688d1ad0d4f7e501feb_r.jpg?source=b1748391\" data-entity-type=\"article\" class=\"internal\">关于武器异常累积的一些事</a><p data-pid=\"dnqMiR9A\">因为鸭皮这边还很乱，目前我只找到一个叫11号曲线是和1.03版本不同的，如果属实的话，那的确离谱……</p>\n<p><img src=\"https://pic1.zhimg.com/v2-af4ee8d7dbe7c774d8d7ab522c264aee_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1099\" data-rawheight=\"487\" data-size=\"normal\" data-caption=\"左1.04 右1.03\" data-watermark=\"watermark\" data-original-src=\"v2-af4ee8d7dbe7c774d8d7ab522c264aee\" data-watermark-src=\"v2-3b1e4669bb072c2a60cc0705947fbd9d\" data-private-watermark-src=\"v2-9f9384354d725ebfcc16b1d27b36ffce\"></p>\n<p><br></p>\n<p data-pid=\"cSnG08oW\">打个比方，1.03版本的划空癫火，不蓄力是150发狂，如果是60感应的话，那就是150*（75%*90%+1）=251.25发狂。</p>\n<p data-pid=\"VT2voYtL\">我寻思200级之前也很难有这么高的理智去对抗，而且75%感应补正，还没算“强化补正”……</p>\n<p><br></p>\n<p data-pid=\"OuQj1GDk\">活该被削……</p>\n<p><br></p>\n<p><br></p>\n<p data-pid=\"VBzlmmhe\">四、关于冰大剑的“平衡”。</p>\n<p><img src=\"https://pica.zhimg.com/v2-3bc20d2862311a6b427ce89dff2cf78a_720w.jpg?source=b1748391?rss\" data-rawwidth=\"483\" data-rawheight=\"479\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-3bc20d2862311a6b427ce89dff2cf78a\" data-watermark-src=\"v2-b3cd1e43fd9807997052559c45a728f7\" data-private-watermark-src=\"v2-f05849016088de87e8179b98c0cf8671\"></p>\n<p><br></p>\n<p data-pid=\"oMI-p2JC\">速度提升了大概20%的样子吧，主要是调整了“低敏捷时的施法速度”，所以大概30敏配个拉大钢肖像就能满速。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-deb4162b5d174593dae742c15c0ceb58_720w.gif?source=b1748391?rss\" data-rawwidth=\"520\" data-rawheight=\"293\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-deb4162b5d174593dae742c15c0ceb58\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"AekkgsEn\">至于被破防的原因是下调了基础伤害……</p>\n<p><br></p>\n<p data-pid=\"fbMSfJS_\">这招是由两段攻击组成，一段是挥动大剑，一段是打出去的冷冻波。</p>\n<p data-pid=\"uIPYbbtV\">大剑基础魔攻是243，失衡值10.175，120的冰冻累积；</p>\n<p data-pid=\"Vod7Cd-C\">冷冻波基础魔攻是235，失衡值4，120的冰冻累积，</p>\n<p data-pid=\"rma0ZmLm\">而波的部分因为有俩发bullet，而且有个bullet会出现多次判定，所以冰大剑在打大体积的敌人时，例如皮蛋，会打出多段伤害之类的。</p>\n<p data-pid=\"Q6aKReBL\">PVP的话也会在不完全贴脸时吃到两发，智力如果能有80的话，能把低于1900血的重击玩家直接秒杀。</p>\n<p><br></p>\n<p data-pid=\"yOBgTFsP\">1.04版本更新后</p>\n<p data-pid=\"BzVYhEIq\">大剑部分伤害下调到133，失衡下调到7，冰冻累积下调到90；</p>\n<p data-pid=\"_wdbjBtS\">冷冻波基础伤害是189，失衡下调到3.5，冰冻累积下调到90。</p>\n<p data-pid=\"XGbwalMY\">而bullet部分则是增大了判定。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-28cabc7ad5b87187f7c33b92860ebd53_720w.jpg?source=b1748391?rss\" data-rawwidth=\"787\" data-rawheight=\"102\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-28cabc7ad5b87187f7c33b92860ebd53\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"4cjx7QJj\">怎么说？这东西在PVP可能算是增强了一类（更容易打出二段伤害，平均来说伤害更高）</p>\n<p data-pid=\"G_zQ3Xge\">但PVE一堆人就顶不住了，毕竟掉的是“基础攻击力”，实际上算起来就更多，尤其是现在法系增伤的buff几乎绝大部分都是最终伤害，损失就更大了。</p>\n<p data-pid=\"37kmSQFH\">如果是说类似于魂三的那种懒得想更多思路方向的玩家，就更难顶了。（类似于削了太阳直剑的补正和基础后，贴吧会有一群人顶不住，得卸游戏不玩）</p>\n<p data-pid=\"2ePNh6o-\">痛，太痛了。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-ebb7fe30e6d639877fe97f9012be2b5a_720w.jpg?source=b1748391?rss\" data-rawwidth=\"384\" data-rawheight=\"382\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-ebb7fe30e6d639877fe97f9012be2b5a\" data-watermark-src=\"v2-1c4308f48d91be9698e920a1f74be7c4\" data-private-watermark-src=\"v2-743d4f8398c57b440c59490681b4830a\"></p>\n<p><br></p>\n<p data-pid=\"H6HeW8-o\"><br></p>\n<hr>\n<p data-pid=\"6in0y6B8\">关于祷告、魔法、战技的提速或者减少后摇的部分，因为内容量很多就不一一演示了。</p>\n<a href=\"https://www.zhihu.com/video/1500056641647546368\"></a><a href=\"https://www.zhihu.com/video/1500064776445636608\"></a><a href=\"https://www.zhihu.com/video/1500064806899642368\"></a><a href=\"https://www.zhihu.com/video/1500065472653869056\"></a><a href=\"https://www.zhihu.com/video/1500065502361337856\"></a><a href=\"https://www.zhihu.com/video/1500065402666983424\"></a><p><br></p>\n<p data-pid=\"tfo5DGAA\">就挑一些自己关注的东西来说。</p>\n<p><br></p>\n<p data-pid=\"ie_2kjam\">首先重武器的平A攻速提升，但很多人说连大曲啥的都提升，提升部分还是后面我再拆游戏的包，开DSAS对比一下动画吧。</p>\n<p data-pid=\"R-2yafET\">估计也有人讲。</p>\n<p><br></p>\n<p data-pid=\"qKOxM0xl\"><br>然后第二个是“卡利亚剑”战技得到了全面加强。</p>\n<p><br></p>\n<a href=\"https://www.zhihu.com/video/1500056845368172544\"></a><p data-pid=\"WpQ3v5-S\">战技：伟哉卡利亚：</p>\n<p data-pid=\"Kie76PS6\">一段：220魔力基础伤害，20失衡值，削绿150点； </p>\n<p data-pid=\"qgvAPZl9\">二段：从280魔提升到315魔，失衡值从25提升到30点，削绿还是300点不变； </p>\n<p data-pid=\"e89m3AM5\">三段：从350魔提升到400魔，失衡从30提升到40点，削绿400点没改变。  </p>\n<p data-pid=\"Ocyb400M\">PS：卡利亚直剑自带战技也是这个动作倍率。   </p>\n<p><br></p>\n<p data-pid=\"WFPZUlbx\">战技“卡利亚大剑”虽然也有提升，但速度貌似没伟哉卡利亚明显： </p>\n<p data-pid=\"qhkBBe2O\">一段：220魔力基础伤害，20失衡值，削绿150点；</p>\n<p data-pid=\"NJXc2QqB\"> 二段：从300魔提升到340魔，失衡值从25提升到35点，削绿还是300点不变；</p>\n<p><br></p>\n<p><br></p>\n<p><br></p>\n<p data-pid=\"85hXe2_N\">第三个是发狂扩散bug的问题，得到了修复和强化。</p>\n<p data-pid=\"MBp9p_7X\">我之前说过发狂扩散bug的问题，因为这一招如果正常按照印记的攻击力去表达，倍率只有20%*8，如果印记没发狂累积，连发狂都触发不了。</p>\n<p data-pid=\"1jxaeGKq\">但不正常的是，只要你是把印记放在副手，主手带一个背刺只有一段动作的武器，这招发狂扩散顿时就变成“<b>倾城一吻冚家拎</b>”。</p>\n<p data-pid=\"qAu9rBNR\">相当于被抓住的人，被你用右手武器“背刺了8次”。</p>\n<a href=\"https://www.zhihu.com/zvideo/1486998346481422336\">【艾尔登法环】这视频很直接地告诉你：为什么发狂扩散是bug！</a><p><br></p>\n<p data-pid=\"UXw2tb0S\">而现在1.04更新，这个抓投招式的倍率得到正常的索引，可以正常指向到触媒上，左右手都能正常运作了。</p>\n<a href=\"https://www.zhihu.com/video/1500054870405648384\"></a><p><br></p>\n<p><br></p>\n<p data-pid=\"IRWT9los\">还有，就发狂扩散的倍率低问题，这次更新还把本来的倍率提升了足足五倍之多。</p>\n<p data-pid=\"tgQc2auf\">五倍，500%！</p>\n<p><img src=\"https://pica.zhimg.com/v2-979e9c397641fe98279aeadb04e93991_720w.jpg?source=b1748391?rss\" data-rawwidth=\"688\" data-rawheight=\"573\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-979e9c397641fe98279aeadb04e93991\" data-watermark-src=\"v2-3aa5d9f034685259bcd38a51faf32cf3\" data-private-watermark-src=\"v2-423997fcfe64c2714d4d030e70870360\"></p>\n<p><br></p>\n<p data-pid=\"MY5TfKeA\">但我为什么不开心呢？</p>\n<p data-pid=\"3hCXEJzR\">（<b>bug扩散是280%*8，而且倍率是依照右手武器的伤害和致命一击去参考的……</b>）</p>\n<p><img src=\"https://pic1.zhimg.com/v2-6dec2bd17814e59ac329f5aa5cb2f8ed_720w.jpg?source=b1748391?rss\" data-rawwidth=\"578\" data-rawheight=\"294\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-6dec2bd17814e59ac329f5aa5cb2f8ed\" data-watermark-src=\"v2-22b0cb42db0ef220c48cf5675f107126\" data-private-watermark-src=\"v2-c539aac97ea6427fa57411b4a7fe2a08\"></p>\n<p><br></p>\n<p data-pid=\"tN4k_i7J\">我的评价是，再也不能给萌新亲亲，让他们快快乐乐回老家了。</p>\n<p><br></p>\n<p><br></p>\n<hr>\n<p data-pid=\"xsQU1jP_\">东西很多，数值上还有很多和数据流大佬们交流的地方，先写到这里。</p>\n<p><br></p>\n<p data-pid=\"z2phAUyv\">例如说狮子斩提速，狩猎大剑那些，我寻思一堆人玩就不吐槽了。</p>\n<a href=\"https://www.zhihu.com/video/1500066828173389825\"></a><p><br></p>\n<p><br></p>\n<p data-pid=\"oopyLkOV\">对了，流血狗的超级判定问题，修复了。</p>\n<a href=\"https://www.zhihu.com/zvideo/1500066253125947392\">【艾尔登法环】最强生物流血狗の末路（1.04版本的超级判定bug以修复）</a><p><br></p>\n<p data-pid=\"rQGYTU_9\">顺带一提，蓝秘密砍了，是无心之失.jpg</p>\n<p><img src=\"https://pic2.zhimg.com/v2-6ccf865efd4639df604d0d7ca3b9d3f5_720w.jpg?source=b1748391?rss\" data-rawwidth=\"464\" data-rawheight=\"461\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-6ccf865efd4639df604d0d7ca3b9d3f5\" data-watermark-src=\"v2-34eaef986bc39a93b20f5743d9d71555\" data-private-watermark-src=\"v2-a33e530fb7a78b99a3092d8efc398f87\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-7156351cdc936e3dfe4314d6797213bc_720w.jpg?source=b1748391?rss\" data-rawwidth=\"605\" data-rawheight=\"95\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-7156351cdc936e3dfe4314d6797213bc\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-4870498dc76697aa4dc52e3aacef99b2_720w.jpg?source=b1748391?rss\" data-rawwidth=\"583\" data-rawheight=\"189\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-4870498dc76697aa4dc52e3aacef99b2\" data-watermark-src=\"v2-94aa0fca78191c1732e6ab34ebe16b8c\" data-private-watermark-src=\"v2-ad1ab4b1a2fefcaa6f619e8056db01d4\"></p>\n<p><br></p>\n<p data-pid=\"ZivQFo6i\">对了，补充个细节</p>\n<p data-pid=\"buz-OfXB\">粪壶和附绳粪壶好像区分开两种毒……</p>\n<p><img src=\"https://pic2.zhimg.com/v2-98aa17f8000e9eb1ae9d69c918a93639_720w.jpg?source=b1748391?rss\" data-rawwidth=\"232\" data-rawheight=\"126\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-98aa17f8000e9eb1ae9d69c918a93639\" data-watermark-src=\"v2-e51aa536ddba773ac201ce65f7cc039f\" data-private-watermark-src=\"v2-823f488348e6996879d5111d999502d7\"></p>\n<p data-pid=\"FPb1pU4S\">而且附绳的毒比粪壶高2点基础。</p>\n<p><img src=\"https://pica.zhimg.com/v2-63b0c9b5fe5909a606e78e722158ee1e_720w.jpg?source=b1748391?rss\" data-rawwidth=\"597\" data-rawheight=\"104\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-63b0c9b5fe5909a606e78e722158ee1e\" data-watermark-src=\"v2-cfdc629f1fa13d757446f9842c79163d\" data-private-watermark-src=\"v2-32da72aabd8668998bc35186748250f4\"></p>\n<p data-pid=\"BfVyPAvs\"><br></p>\n<p data-pid=\"BVkUwRKO\">而大盾护符从固定10%的抵挡力改成0，但新的计算方式依旧没有发现，不知道是怎么算不同盾牌的抵挡力……</p>\n<p><br></p>\n<p data-pid=\"NNmPYTiz\">有空再更……</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/Tyquan_Zhang?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">零悠悠</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/528892738/answer/2448366081?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">67 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/263927379?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">你在游戏里遇到过那些惊为天人bug？</a><br><a href=\"http://www.zhihu.com/question/429187251?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">没有在线补丁的年代，游戏出现重大BUG怎么解决？</a><br>\n","link":"http://www.zhihu.com/question/528892738/answer/2448366081?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"使用 Next.js + Hexo 重构我的博客","date":"2022-03-17 16:24:00","description":"\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/218492/18/14257/25439/6227858fE1517791d/63119f6e39dc9389.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/\">https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Node.js","date":"2022-01-14 10:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h2>\n<ul>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-nodejs\">安装 Node.js</a></li>\n</ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Node.js 官网 (<a href=\"https://node.js.org/\">https://node.js.org</a>)</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/image-20220114174925675.png\" alt=\"image-20220114174925675\"></p>\n<p>下载 Node.js 安装包（推荐下载 LTS 版本）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175645.png\" alt=\"image-20220114175645642\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175750.png\" alt=\"image-20220114175749822\"></p>\n<p>勾选同意协议，点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175835.png\" alt=\"image-20220114175835742\"></p>\n<p>修改文件安装位置，点击 <code>Next</code>。（也可以不用改）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175929.png\" alt=\"image-20220114175929226\"></p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180010.png\" alt=\"image-20220114180010036\"></p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180044.png\" alt=\"image-20220114180043895\"></p>\n<p>点击 <code>Install</code> 开始安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180108.png\" alt=\"image-20220114180107827\"></p>\n<p>等待安装完成。<img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180122.png\" alt=\"image-20220114180122728\"></p>\n<p>点击 <code>Finish</code> 完成安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180206.png\" alt=\"image-20220114180206024\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>打开 <code>Git Bash</code>.</p>\n<blockquote><p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。<br>或是在开始菜单中找到 Git Bash.</p></blockquote>\n<p>输入 <code>node -v</code> 和 <code>npm -v</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180458.png\" alt=\"image-20220114180458685\"></p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-nodejs/"},{"title":"2022: 新年快乐！","date":"2021-12-31 16:00:00","description":"\n<p>转眼间，2021 年已经过去。这一年非常忙碌，以至于博客一周年的纪念来不及写，许多文章计划停留在了 To Do 里。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%8D%9A%E5%AE%A2\" class=\"headerlink\" title=\"博客\"></a>博客</h2>\n<p>由于 Cloudflare Web Analytics 是在 2021 年 4 月份启用的，再加上后来又将统计代码去除，所以关于访问量的信息不可用。</p>\n<p>截止至 2021 年 12 月 31 日，博客共发布 15 篇文章，其中 2021 年发布 11 篇文章，原创文章 10 篇。</p>\n<p>目前采用 <code>LeanCloud + Waline</code> 的评论方式，自 7 月份被刷评论后将评论权限改为登录（支持 <code>GitHub</code> 登录），还有部分评论在迁移中丢失，实在抱歉。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>博客自 2021 年 1 月 13 日将主题改为 <code>Miracle</code>，这是一款简洁、轻量的单栏 Hexo 主题。</p>\n<p><code>Miralce</code> 目前的版本是 <code>2.0.1</code>，全新的版本去除 jQuery，进一步提升性能。</p>\n<p>GitHub 仓库：<a href=\"https://github.com/hifun-team/hexo-theme-miracle\">https://github.com/hifun-team/hexo-theme-miracle</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%9B%B4%E5%A4%9A\" class=\"headerlink\" title=\"更多\"></a>更多</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">=&gt; ...</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2022/"},{"title":"无垠 2021 年度总结","date":"2021-12-31 08:36:10","description":"\n<p>真是忙碌的一年啊。转眼 2021 已经过去，2022 即将到来。又到了该总结这一年的时候了。</p>\n<h1>统计数据</h1>\n<p>年度总结的第一部分仍然是一些统计数据。以下数据截止 2021 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 29,073 (<span>+0.6%</span>)，年 PV 67,688 (<span>-11.61%</span>)，日均 UV 79.65，平均停留时间 3分34秒 (<span>-13.7%</span>)，平均跳出率 55% (<span>-9.8%</span>)。一年有效文章数 1 (<span>-80%</span>)，新增评论 109 条 (<span>-54.96%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\" alt=\"\" width=\"515\" height=\"620\" class=\"aligncenter size-full wp-image-2537\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog-249x300.jpg 249w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>除了 UV 较去年提高 100 多之外，其他数据全部下滑。主要原因还是因为今年实在太过忙碌，只更新了一篇博客，评论区也没有怎么维护。不过目前已经有两篇新的文章在路上了，希望可以尽快写完吧。</p>\n<h2>个人主页</h2>\n<p>个人页总 UV 3,515 (<span>-18.12%</span>)，总 PV 3,929 (<span>-4.56%</span>)，日均 UV 9.63，平均停留时间 55秒 (<span>-12.7%</span>)。访问的主要来源是知乎和 GitHub。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\" alt=\"\" width=\"515\" height=\"647\" class=\"aligncenter size-full wp-image-2538\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton-239x300.jpg 239w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>仍然是没有更新个人主页的一年，我也没有继续宣传这个页面，统计数据下滑大概是正常的。</p>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 4 次，新增 149 commits (<span>-54.57%</span>)，Star 数增加了 174，现有 788。</p>\n<p>终于，MDx 2.0 发布了。但是因为今年的过于忙碌，MDx 并没有得到足够的维护，版本发布周期也拉得比较长，很多 Bug 没能及时修复。希望明年可以把更多的时间花在维护 MDx 上。无论如何，还是感谢各位对于 MDx 的支持！</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>2021 大事记</h1>\n<p>说起来，2021 真的太多“第一次”了...</p>\n<ul>\n<li>一月：由于电脑电池鼓包，第一次用 iPad 外接屏幕远程桌面到服务器来考期末🌚太痛苦了</li>\n<li>一月：MDx 喜提 600 Stars</li>\n<li>三月：第一次测核酸（真的酸）</li>\n<li>三月：第一次坐上 A350！(B-309W）</li>\n<li>三月：第一次来到英国</li>\n<li>六月：第一次来到伦敦</li>\n<li>六月：第一次去猫咖撸猫🐱</li>\n<li>六月：第一次坐上 B777！(B-2025）</li>\n<li>七月：酒店隔离十四天🌚</li>\n<li>七月：MDx 喜提 700 Stars</li>\n<li>七月：第一次和猫一起住（时刻有猫撸真的爽😆）</li>\n<li>七月：入职<a href=\"https://75.team/\">奇舞团</a>实习</li>\n<li>八月：北京景点怎么这么多</li>\n<li>九月：北京景点怎么还有这么多</li>\n<li>九月：<a href=\"https://flyhigher.top/develop/2160.html\">谈谈 WebAuthn</a> 被 <a href=\"https://weibo.com/1893751011/KyipM3tOM\" rel=\"noopener noreferrer\">w3c中国微博转发</a><del>（虽然并没有人看）</del>\n</li>\n<li>九月：从奇舞团<del>跑路</del>\n</li>\n<li>九月：整了个 Stackoverflow 的复制粘贴键盘<del>，太好用了</del>\n</li>\n<li>十月：终于买了心心念念的 MSFS</li>\n<li>十一月：终于买了一台新相机</li>\n<li>十一月：第一次坐上 A380！(B-6140）</li>\n<li>十二月：第一次来到爱丁堡并和 <a href=\"https://diygod.me/\">@DIYgod</a> 面基</li>\n</ul>\n<section><div class=\"set-images-div\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\" alt=\"和猫一起住的唯一问题就是手机很快会被猫片塞满\" width=\"730\" height=\"1500\" class=\"aligncenter size-full wp-image-2518\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg 730w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-146x300.jpg 146w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-498x1024.jpg 498w\" sizes=\"(max-width: 730px) 100vw, 730px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\" alt=\"看到你在写前端，猫猫很担心你\" width=\"1004\" height=\"1500\" class=\"aligncenter size-full wp-image-2523\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg 1004w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-201x300.jpg 201w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-685x1024.jpg 685w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-768x1147.jpg 768w\" sizes=\"(max-width: 1004px) 100vw, 1004px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\" alt=\"高效开发工具（确信\" width=\"1500\" height=\"1019\" class=\"aligncenter size-full wp-image-2519\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-300x204.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-1024x696.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-768x522.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\" alt=\"和 Ralph 在天坛\" width=\"947\" height=\"1500\" class=\"aligncenter size-full wp-image-2524\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg 947w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-189x300.jpg 189w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-646x1024.jpg 646w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-768x1216.jpg 768w\" sizes=\"(max-width: 947px) 100vw, 947px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\" alt=\"380!\" width=\"1500\" height=\"874\" class=\"aligncenter size-full wp-image-2517\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-300x175.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-1024x597.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-768x447.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a>\n</div>\n<div class=\"set-images-div2\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\" alt=\"到处玩.jpg\" width=\"1500\" height=\"1080\" class=\"aligncenter size-full wp-image-2521\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-300x216.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-1024x737.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-768x553.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\" alt=\"还是到处玩.jpg\" width=\"977\" height=\"1500\" class=\"aligncenter size-full wp-image-2520\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg 977w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-195x300.jpg 195w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-667x1024.jpg 667w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-768x1179.jpg 768w\" sizes=\"(max-width: 977px) 100vw, 977px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\" alt=\"380 上的星空\" width=\"1002\" height=\"1500\" class=\"aligncenter size-full wp-image-2522\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg 1002w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-200x300.jpg 200w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-684x1024.jpg 684w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-768x1150.jpg 768w\" sizes=\"(max-width: 1002px) 100vw, 1002px\"></a>\n</div>\n</section><p><span>点击图片查看描述</span></p>\n<p>对了，对于可爱的猫猫们，我整了一个 Telegram 贴纸包，你可以在这里获取：<a href=\"https://telegram.me/addstickers/huanAndDan\">https://telegram.me/addstickers/huanAndDan</a>。</p>\n<h1>跨年红包</h1>\n<p>今年的解题之旅，从下面这张图片开始：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\" alt=\"\" width=\"1510\" height=\"1250\" class=\"aligncenter size-full wp-image-2556\"></a>\n<p>不过，鉴于今年的题目较以往对于认真解题的人更难，我还准备了隐藏红包，在解题中收集线索即可发现隐藏红包。共有 20 个普通红包和 10 个隐藏红包。</p>\n<p>解题计划持续到东八区 2022.02.03 23:59:59 或红包被领完为止，之后我会发布题解。不过由于去年情况混乱，今年在解题过程中我一旦发现有不正常的现象就会立即停止活动。Anyway，新年快乐！祝玩得开心。</p>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报用到了 PS 和 Adobe 家的新玩具 Dimension。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\" alt=\"\" width=\"707\" height=\"1000\" class=\"aligncenter size-full wp-image-2547\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg 1414w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-212x300.jpg 212w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-724x1024.jpg 724w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-768x1086.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-1086x1536.jpg 1086w\" sizes=\"(max-width: 707px) 100vw, 707px\"></a>\n<p>那么祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2507.html"},{"title":"[译] 不，Web3 不是去中心化","date":"2021-12-14 14:01:00","description":"加密货币社区对元宇宙和 Web3 的狂热仍在继续，大量投资人和开发者前仆后继加入其中。但是，Web3 真的能实现支持者们的种种愿景吗？亦或是另一个镜中月、水中花？也许让历史照进现实，能给我们答案。<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/123139/11/24965/54827/62215eedE5e3da14a/80c24408e97057dd.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/web3-is-not-decentralization/\">https://blog.skk.moe/post/web3-is-not-decentralization/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/web3-is-not-decentralization/"},{"title":"[译] 捍卫自由的互联网，对 Web3 说不","date":"2021-12-12 13:40:00","description":"作为一个充满泡沫和噱头的新概念，Web3 和元宇宙在区块链的社区中掀起了一波浪潮。鼓吹者坚信 Web3 就是互联网的未来、不惜砸下大把的金钱和精力、希望能在未来中捞一杯羹；而大部分人保持观望的态度。是时候来一点 Web3 的反对意见了。<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/87908/13/23797/13415/622032afE3a2f9e9f/95c01e98cd4a707a.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/\">https://blog.skk.moe/post/keep-web-free-say-no-to-web3/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/"},{"title":"2021 年 JavaScript Promise 性能对比","date":"2021-12-07 08:19:00","description":"\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157404/28/28495/143414/622032b2Ef7b495fd/6a9bd02e79392c9d.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/promise-performance-benchmark/\">https://blog.skk.moe/post/promise-performance-benchmark/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/promise-performance-benchmark/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Git","date":"2021-11-12 13:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h3>\n<ul><li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li></ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Git 官网 (<a href=\"https://git-scm.com/\">https://git-scm.com</a>).</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112204849.png\"></p>\n<p>点击页面中的 <code>Download For Windows</code> 下载 Windows 版本。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211507.png\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>，同意协议。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211528.png\"></p>\n<p>修改程序安装位置，点击 <code>Next</code>（直接装在 C 盘也不是不行）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211604.png\"></p>\n<p>组件选项，可选桌面快捷键、右键菜单、LFS 支持、自动检查更新等。</p>\n<p>点击 <code>Next</code> 进入下一步。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211609.png\"></p>\n<p>开始菜单文件夹名，保持默认就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211613.png\"></p>\n<p>默认编辑器，保持 Vim 就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211616.png\"></p>\n<p>环境变量，选择第 2 个，点击 <code>Next</code>。</p>\n<blockquote><p>如果选择第 1 个，则只能在 Git Bash 中使用，可能会出现问题</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211619.png\"></p>\n<p>剩下的都可以保持默认，一路 Next，然后点击 <code>Install</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211622.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211624.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211627.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211630.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211633.png\"></p>\n<p>等待安装完毕。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。</p>\n<p>（或是在开始菜单中找到 Git Bash）</p>\n<p>输入 <code>git --version</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/7ec315b7764cc.png\"></p>\n<p>大功告成！</p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-git/"},{"title":"前端时间国际化 101","date":"2021-10-14 15:58:23","description":"\n<blockquote>\n<p>时间只是幻觉。</p>\n<footer>—— 阿尔伯特·爱因斯坦</footer>\n</blockquote>\n<p>最近在开发一个需要完善国际化方案的前端项目，在处理时间国际化的时候遇到了一些问题。于是花了一些时间研究，有了这篇文章。不过由于网上关于 JavaScript 中 <code>Date</code> 对象的坑的文章已经一抓一大把了，<strong>因此这篇文章不是 JavaScript 中 <code>Date</code> 对象的使用指南，而是只专注于前端时间国际化。</strong></p>\n<h1>从时区说起</h1>\n<p>要想处理时间，UTC 是一个绕不开的名字。协调世界时（Coordinated Universal Time）是目前通用的世界时间标准，计时基于原子钟，但并不等于 TAI（国际原子时）。TAI 不计算闰秒，但 UTC 会不定期插入闰秒，因此 UTC 与 TAI 的差异正在不断扩大。UTC 也接近于 GMT（格林威治标准时间），但不完全等同。可能很多人都发现近几年 GMT 已经越来越少出现了，这是因为 GMT 计时基于地球自转，由于地球自转的不规则性且正在逐渐变慢，目前已经基本被 UTC 所取代了。</p>\n<blockquote><p>JavaScript 的 <code>Date</code> 实现不处理闰秒。实际上，由于闰秒增加的不可预测性，Unix/POSIX 时间戳完全不考虑闰秒。在闰秒发生时，Unix 时间戳会重复一秒。这也意味着，一个时间戳对应两个时间点是有可能发生的。</p></blockquote>\n<p>由于 UTC 是标准的，我们有时会使用 UTC+/-N 的方式表达一个时区。这很容易理解，但并不准确。中国通行的 <code>Asia/Shanghai</code> 时区<strong>大部分</strong>情况下可以用 UTC+8 表示，但英国通行的 <code>Europe/London</code> 时区并不能用一个 UTC+N 的方式表示——由于夏令时制度，<code>Europe/London</code> 在夏天等于 UTC+1，在冬天等于 UTC/GMT。</p>\n<blockquote><p>一个时区与 UTC 的偏移并不一定是整小时。如 <code>Asia/Yangon</code> 当前为 UTC+6:30，而 <code>Australia/Eucla</code> 目前拥有奇妙的 UTC+8:45 的偏移。</p></blockquote>\n<p>夏令时的存在表明<strong>时间的表示不是连续的</strong>，时区之间的时差也并不是固定的，我们并不能用固定时差来处理时间，这很容易意识到。但一个不容易意识到的点是，时区还包含了其历史变更信息。中国目前不实行夏令时制度，那我们就可以放心用 UTC+8 来表示中国的时区了吗？你可能已经注意到了上一段中描述 <code>Asia/Shanghai</code> 时区时我使用了<strong>大部分</strong>一词。<code>Asia/Shanghai</code> 时区在历史上实行过夏令时，因此 <code>Asia/Shanghai</code> 在部分时间段可以使用 UTC+9 来表示。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1988-04-18 00:00:00')\r\n// Mon Apr 18 1988 00:00:00 GMT+0900 (中国夏令时间)</pre>\n<blockquote><p>夏令时已经够混乱了，但它实际上比你想象得更混乱——部分穆斯林国家一年有四次夏令时切换（进入斋月时夏令时会暂时取消），还有一些国家使用混沌的 15/30 分钟夏令时而非通常的一小时。</p></blockquote>\n<blockquote><p><strong>不要总是基于 <code>00:00</code> 来判断一天的开始。</strong>部分国家使用 0:00-1:00 切换夏令时，这意味着 23:59 的下一分钟有可能是 1:00。</p></blockquote>\n<p>事实上，虽然一天只有 24 个小时，但当前（2021.10）正在使用的时区有超过 300 个。<strong>每一个时区都包含了其特定的历史。</strong>虽然有些时区在现在看起来是一致的，但它们都包含了不同的历史。时区也会创造新的历史。由于政治、经济或其他原因，一些时区会调整它们与 UTC 的偏差（萨摩亚曾经从 UTC-10 切换到 UTC+14，导致该国 2011.12.30 整一天都消失了），或是启用/取消夏令时，甚至有可能导致一个时区重新划分为两个。因此，为了正确处理各个时区，我们需要一个数据库来存放时区变更信息。还好，已经有人帮我们做了这些工作。目前大多数 *nix 系统和大量开源项目都在使用 <a href=\"https://www.iana.org/time-zones\" rel=\"noopener\">IANA 维护的时区数据库</a>（IANA TZ Database），其中包含了自 Unix 时间戳 0 以来各时区的变更信息。当然这一数据库也包含了大量 Unix 时间戳 0 之前的时区变更信息，但并不能保证这些信息的准确性。IANA 时区数据库会定期更新，以反映新的时区变更和新发现的历史史实导致的时区历史变更。</p>\n<blockquote><p>Windows 不使用 IANA 时区数据库。微软为 Windows 自己维护了一套<a href=\"https://docs.microsoft.com/zh-cn/troubleshoot/windows-client/system-management-components/daylight-saving-time-help-support\" rel=\"noopener\">时区数据库</a>，这有时会导致在一个系统上合法的时间在另一系统上不合法。</p></blockquote>\n<p>既然我们不能使用 UTC 偏移来表示一个时区，那就只能为每个时区定义一个标准名称。通常地，我们使用 <code>/</code> 来命名一个时区。这里的城市一般为该时区中人口最多的城市。于是，我们可以将中国的通行时区表示为 <code>Asia/Shanghai</code>。也有一些时区有自己的别名，如太平洋标准时间 <code>PST</code> 和协调世界时 <code>UTC</code>。</p>\n<blockquote><p>时区名称使用城市而非国家，是由于国家的变动通常比城市的变动要快得多。</p></blockquote>\n<blockquote><p><strong>城市不是时区的最小单位。</strong>有很多城市同时处于多个时区，甚至澳大利亚<a href=\"https://en.wikipedia.org/wiki/Gold_Coast_Airport\" rel=\"noopener\">有一个机场</a>的跑道两端处于不同的时区。</p></blockquote>\n<h1>处理时区困难重重</h1>\n<p>几个月前的一天，<a href=\"https://milkice.me/\" rel=\"noopener\">奶冰</a>在他的 Telegram 频道里发了这样的一条消息：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\"><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\" alt=\"奶冰频道的消息\" width=\"500\" class=\"aligncenter size-medium wp-image-2490\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg 800w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-244x300.jpg 244w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-768x944.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\"></a>\n<p>你想的没错，这个问题正是由时区与 UTC 偏移的不同造成的。<code>Asia/Shanghai</code> 时区在 1940 年前后和 1986 年前后曾实行过夏令时，<strong>而夏令时的切换会导致一小时的出现和消失。</strong>具体来说，启用夏令时当天会有一个小时消失，如 2021.3.28 英国启用夏令时，1:00 直接跳到 3:00，导致 <code>2021-03-28 01:30:00</code> 在 <code>Europe/London</code> 时区中是不合法的；取消夏令时当天又会有一个小时重复，如 2021.10.31 英国取消夏令时，2:00 会重新跳回 1:00 一次，导致 <code>2021-10-31 01:30:00</code> 在 <code>Europe/London</code> 时区中对应了两个时间点。而在奶冰的例子中，<code>1988-04-10 00:46:50</code> 正好处于因夏令时启用而消失的一小时中，因此系统会认为此时间字符串不合法而拒绝解析。</p>\n<blockquote><p>你可能会注意到在历史上 1988.4.10 这一天 <code>Asia/Shanghai</code> 时区实际上是去掉了 1:00-2:00 这一小时而不是 0:00-1:00。上文问题更深层次的原因是，在 IANA TZDB 2018a 及更早版本中，IANA 因缺乏历史资料而设置了错误的夏令时规则，规则设定了夏令时交界于 0:00-1:00 从而导致上文问题发生。而随后社区<a href=\"http://mm.icann.org/pipermail/tz/2018-August/026760.html\" rel=\"noopener\">发现了更准确的史实</a>，因此 IANA 更新了数据库。上文的问题在更新了系统的时区数据库后便解决了。</p></blockquote>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\" alt=\"IANA TZDB 2018a 及之前版本的错误数据\" width=\"1750\" height=\"595\" class=\"aligncenter size-full wp-image-2491\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg 1750w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-300x102.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1024x348.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-768x261.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1536x522.jpg 1536w\" sizes=\"(max-width: 1750px) 100vw, 1750px\"></a>\n<p><span>IANA TZDB 2018a 及之前版本的错误数据</span></p>\n<p>再来考虑另一种情况。你的应用的某位巴西用户在 2018 年保存了一个未来时间 <code>2022-01-15 12:00</code>（按当时的规律那应该是个夏令时时间），不巧那时候你的应用是以格式化的时间字符串形式保存的时间。之后你发现巴西已经于 2019 年 4 月宣布彻底取消夏令时制度，那么 <code>2022-01-15 12:00</code> 这个时间对应的 Unix 时间戳发生了变化，变得不再准确，要正确处理这一字符串就需要参考这一字符串生成的时间（或生成时计算的 UTC 偏移）来做不同的处理。<strong>因此，应用从一开始就应该避免使用字符串来传输、存储时间，而是使用 Unix 时间戳。</strong>如果不得不使用字符串存储时间，请尽可能：</p>\n<ul>\n<li>使用 UTC 描述时间，你永远不会知道本地时区在未来会发生什么</li>\n<li>如果需要以当地时间描述时间，一定带上当前 UTC 偏移</li>\n</ul>\n<p>时区历史带来的问题往往意想不到而且远比想象得多。实际上时区历史数据非常详细而繁多且跨设备不一致，并没有简单而统一的处理方法。在需要严谨处理时区时可能需要在应用程序中内嵌一套各端统一的时区数据库，但这样的方案放在前端又会带来不少问题：</p>\n<ul>\n<li>体积过大。moment.js 曾经设计过<a href=\"https://github.com/moment/moment-timezone/blob/develop/data/packed/2021a.json\" rel=\"noopener\">一种简洁的 TZDB 表示</a>，但尽管已经尽可能压缩整个文件仍然达到了 180+KB。在性能优先的 Web 应用中这是不可接受的</li>\n<li>需要持续更新。时区数据一直在变动，需要在时区数据更新时尽快更新应用内的时区数据，这带来了额外的维护成本</li>\n</ul>\n<p>ES6 为我们带来了 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl\" rel=\"noopener\"><code>Intl</code> 命名空间</a>。在这里，JavaScript 运行时提供了不少时间相关的国际化能力。因此，在不使用额外数据的情况下准确处理时区是可能的，但这并不完美：</p>\n<ul>\n<li>各端不统一。浏览器提供的时区数据受浏览器版本、系统版本等可能变化，最新的时区更新可能无法快速反映到所有设备上</li>\n<li>实现复杂。<code>JavaScript</code> 中 <code>Date</code> 对象的不良设计导致实现完善的时区处理并不容易，且 <code>Intl</code> 命名空间下的对象实例化性能开销较大，需要额外优化</li>\n</ul>\n<blockquote><p><code>Intl</code> 命名空间下还有很多实用的国际化相关方法，值得我们另开一篇文章来讲讲了。</p></blockquote>\n<p>在真实开发中，这需要取舍。目前主流的 JavaScript 时间处理库都已转向浏览器内置方法，并在需要时通过 Polyfill 保证跨端一致性。在这篇文章中，我们将尝试在不使用第三方库的情况下实现基本的时间国际化处理。此外，还有一些诸如需要使用 Unix 时间戳才能正确地在各端交换时间等细节需要注意。</p>\n<h1>时区转换</h1>\n<p>JavaScript 中的 <code>Date</code> 并不是不包含时区信息——实际上，<code>Date</code> 对象表示的一定是当前时区。通过尝试：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1970-01-01T00:00:00Z')\r\n// Thu Jan 01 1970 08:00:00 GMT+0800 (中国标准时间)</pre>\n<p>就可以知道，JavaScript 运行时其实知道当前时区，并会在需要的时候将其他时区的时间转换为当前时区的时间。那么，如何将本地时间转换为其他时区的时间呢？从 <code>Date</code> 的角度看，这并不行，因为我们无法设置一个 <code>Date</code> 对象的时区。但我们可以“投机取巧”：将 <code>Date</code> 对象的时间加上/减去对应的时差，尽管 <code>Date</code> 对象仍然认为自己在本地时区，但这样不就可以正确显示了嘛！但我们会碰到上文提到的问题：时区之间的时间差并不固定，在没有额外数据的情况下很难正确计算。</p>\n<p>还好，ES6 基于 <code>Intl</code> 命名空间扩展了 <code>Date.prototype.toLocaleString()</code> 方法，使其可以接受时区参数并按指定时区格式化时间。如果你在搜索引擎中搜索如何使用 JavaScript 转换时区，你大概率会在 StackOverflow 上找到类似这样的答案：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const convertTimeZone = (date, timeZone) =&gt; {\r\n    return new Date(date.toLocaleString('en-US', { timeZone }))\r\n}\r\n\r\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\r\nconvertTimeZone(now, 'Europe/London') // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<p>很好理解，我们使用 <code>en-US</code> 的区域设置要求 JavaScript 运行时以我们指定的时区格式化时间，再将时间字符串重新解析为时间对象。这里的 <code>timeZone</code> 就是诸如 <code>Asia/Shanghai</code> 等的 IANA TZDB 时区名称。这个字符串确实需要自己提供，但这就是我们唯一需要自己准备的数据了！只要提供了时区名称，浏览器就会自动计算正确的时间，无需我们自行计算。</p>\n<blockquote><p>对于时区名称，你可以考虑使用 <a href=\"https://github.com/vvo/tzdb/\" rel=\"noopener\">@vvo/tzdb</a>。这是一个声称为自动更新的 IANA TZDB 的 JSON 导出，并已被数个大型项目使用。你可以从这个包中导出所有时区名称。</p></blockquote>\n<p>这个方法看起来还不错，对吧？但实际上，它有两个问题：</p>\n<ul>\n<li>指定了区域设置和时区的 <code>toLocaleString()</code> 实际上每次调用都会在 JavaScript 运行时中创建新的 <code>Intl.DateTimeFormat</code> 对象（在后文详述），而后者会带来昂贵的性能开销（在 Node 14 中，实例化一次会在 V8 中增加内存使用约 46.3Kb。但这是符合预期的，详见 <a href=\"https://bugs.chromium.org/p/v8/issues/detail?id=6528\" rel=\"noopener\">V8 Issue</a>）。因此，在密集调用的情况下需要考虑计算并缓存时差，并在一定时间后或需要时进行更新</li>\n<li>使用 <code>toLocaleString()</code> 并使用 <code>en-US</code> 区域设置格式化的默认时间格式类似于 <code>10/13/2021, 1:00:00 AM</code>。这可以被大部分浏览器正确解析，<strong>但这是不规范的，不同浏览器有可能产生不同结果。</strong>你也可以自行配置格式（同下文的 <code>Intl.DateTimeFormat</code>），但仍然无法构造出规范的字符串</li>\n</ul>\n<p>因此，更佳的方案是，我们需要建立一个可反复使用的格式化器以避免重复创建 <code>Intl.DateTimeFormat</code> 带来的额外开销，并需要手动构造出符合规范的时间字符串，并将其重新解析为 <code>Date</code> 对象。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const timeZoneConverter = (timeZone) =&gt; {\r\n    // 新建 DateTimeFormat 对象以供对同一目标时区重用\r\n    // 由于时区属性必须在创建 DateTimeFormat 对象时指定，我们只能为同一时区重用格式化器\r\n    const formatter = new Intl.DateTimeFormat('zh-CN', {\r\n        year: 'numeric',\r\n        month: '2-digit',\r\n        day: '2-digit',\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n        second: '2-digit',\r\n        hour12: false,\r\n        timeZone\r\n    })\r\n    return {\r\n        // 提供 conver 方法以将提供的 Date 对象转换为指定时区\r\n        convert (date) {\r\n            // zh-CN 的区域设置会返回类似 1970/01/01 00:00:00 的字符串\r\n            // 替换字符即可构造出类似 1970-01-01T00:00:00 的 ISO 8601 标准格式时间字符串并被正确解析\r\n            return new Date(formatter.format(date).replace(/\\//g, '-').replace(' ', 'T').trim())\r\n        }\r\n    }\r\n}\r\n\r\nconst toLondonTime = timeZoneConverter('Europe/London') // 对于同一时区，此对象可重用\r\n\r\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\r\ntoLondonTime.convert(now) // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<blockquote><p>目前 <code>zh-CN</code> 的区域设置会产生类似 <code>1970/01/01 00:00:00</code> 的格式化字符串。这一格式目前跨端一致，但由于规范没有指定时间格式，<strong>这个格式在未来有可能变更。</strong>更好的方案是使用 <code>formatToParts()</code> 方法（在后文详述）获取时间字符串的各部分并手动拼接出标准格式的字符串，但在这个例子中直接 <code>replace</code> 拥有更好的性能。</p></blockquote>\n<p>现在，尝试反复转换时间至同一时区 1000 次，耗时从 <code>toLocaleString()</code> 1.5 秒降低到了 0.04 秒。尽管代码长了点，但这次重写在最好的情况下为我们带来了超过 20 倍的性能提升。</p>\n<p>需要注意的是，虽然这看起来就算最终方案了，但这个方案依然不完美。主要有以下两个问题：</p>\n<ul>\n<li>在需要密集转换为不同时区时，由于无法重用格式化器，性能依然较差且难以进一步优化</li>\n<li>由于 <code>Intl.DateTimeFormat</code> 不支持格式化毫秒，在格式化字符串的过程中毫秒会丢失，导致最终结果可能会与期望结果产生最高 999ms 的误差，需要额外处理。比如需要计算时差时，我们可能需要这么写：\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const calcTimeDiff = (date, converter) =&gt; {\r\n    const secDate = date - date.getMilliseconds() // 去掉毫秒，避免转换前后精度差异\r\n    return converter.convert(new Date(secDate), tzName) - secDate\r\n}\r\n\r\ncalcTimeDiff(new Date(), timeZoneConverter('Europe/London')) // -25200000</pre>\n</li>\n</ul>\n<p>无论如何，在折腾一番后我们还是把时区正确转换了。接下来准备格式化时间字符串了吗？不过在此之前，我们得先来聊聊语言、文字和区域。</p>\n<h1>语言文字区域傻傻分不清</h1>\n<blockquote><p>如何在计算机中表示中文？</p></blockquote>\n<p>“这不简单，”你可能会说，“用 <code>zh</code> 啊。”</p>\n<blockquote><p>那简体中文呢？</p></blockquote>\n<p>“<code>zh-CN</code>。”你或许会说出这个答案。</p>\n<blockquote><p>那用于新加坡的简体中文和用于中国大陆的简体中文该如何区分呢？</p></blockquote>\n<p>嗯……好问题。</p>\n<p>要能正确区分不同的简体中文，我们还得先回到定义上。实际上，“国际化”并不只是语言的翻译而已，国际化包含的是一整套对于各个<strong>区域</strong>的本地化方案。要准确表示一个国际化方案，我们实际至少需要确定三个属性：语言（Language）、文字（Script）和区域（Locale）。</p>\n<ul>\n<li>\n<strong>语言</strong>通常指的是<strong>声音语言</strong>。不同的语言都有一套自己的发音规则，很难互通。如中文和英语都属于语言</li>\n<li>\n<strong>文字</strong>对应的是某个语言的书写方式，同样的语言可能会有多种书写方案。如中文主要有简体和繁体两种书写方案</li>\n<li>\n<strong>区域</strong>指国际化面向的地区，相同的语言和文字，在不同地区也有可能会有不同的使用习惯。如新加坡和中国大陆都使用简体中文，但两地的用词习惯等有些许差异</li>\n</ul>\n<p>只有确定了这三个属性，我们才能正确定义一个国际化方案（或者说<strong>区域设置</strong>）。当然，还有很多其他属性可以更准确的表达某个区域设置，但通常有语言、文字和区域就已经足够了。</p>\n<p>于是，基于 <a href=\"https://tools.ietf.org/rfc/bcp/bcp47.txt\" rel=\"noopener\">BCP 47</a>，我们可以知道：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN = 中文普通话-简体-中国大陆\r\ncmn-Hans-SG = 中文普通话-简体-新加坡\r\ncmn-Hant-TW = 中文普通话-繁体-台湾\r\nyue-Hant-HK = 中文粤语-繁体-香港</pre>\n<p>等等，这都是啥？还有 BCP 47 又是啥？BCP 是 IETF 发布的“最佳当前实践”文档，而 BCP 47 是一些国际化相关的 ISO 和备忘录的集合，也是目前事实上由 HTML 和 ECMAScript 所使用的表达区域设置的标准。BCP 47 定义的区域设置标签实际上比较复杂，但对于大部分简单使用情况，上文示例中的格式已经完全够用了。简单来说，<strong>要表达一个区域设置，我们会使用 <code>语言[-文字][-区域]</code> 的格式，而文字和区域都是可选的。</strong>而对于每个部分的具体代码，BCP 47 也有做具体定义。其中：</p>\n<ul>\n<li>语言使用 ISO 639-1 定义的两位字母代码（如中文为 <code>zh</code>，英文为 <code>en</code>）或 <a href=\"https://iso639-3.sil.org/code_tables/639/data\" rel=\"noopener\">ISO 639-2/3</a> 定义的三位字母代码（如中文普通话为 <code>cmn</code>，英文为 <code>eng</code>），通常小写</li>\n<li>文字使用 <a href=\"https://unicode.org/iso15924/iso15924-codes.html\" rel=\"noopener\">ISO 15924</a> 定义的四位字母代码，通常首字母大写。如简体中文是 <code>Hans</code>，繁体中文是 <code>Hant</code>\n</li>\n<li>区域通常使用 <a href=\"https://www.iso.org/iso-3166-country-codes.html\" rel=\"noopener\">ISO 3166-1</a> 定义的两位字母代码，通常大写，如中国大陆为 <code>CN</code>，英国为 <code>GB</code>\n</li>\n</ul>\n<blockquote><p>ISO 639-1/2/3 的关系实际是：ISO 639-1 是最早制定的规范，使用两位字母表示语言，但语言数量之多并不能只用两位代码表示。因此后来修订了 ISO 639-2 和 3，使用三位字母表示了更多语言。通常 639-1 代码和 ISO-2/3 代码是一对多的关系。如中文 <code>zh</code> 其实是中文普通话 <code>cmn</code> 的宏语言（macrolanguage），同样使用 <code>zh</code> 为宏语言的语言还有 <code>wuu</code>（中文吴语）、<code>hak</code>（中文客家话）、<code>yue</code>（中文粤语）等数十种。<strong>从规范上我们现在应该使用 ISO 639-2/3 代码来替代 ISO 639-1 代码了</strong>，但由于历史阻力和真实需求中分类无需如此细致等原因，<strong>使用 ISO 639-1 指定语言仍然非常常见而且完全可以接受。</strong>此外，特别地，我们在 ISO 639-3 中定义未指明的语言为 <code>und</code>。</p></blockquote>\n<p>因此，对于这一节开头的两个问题，在 BCP 47 中正确答案其实是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">zh = 中文\r\ncmn = 中文普通话\r\n\r\nzh-Hans = 中文-简体\r\ncmn-Hans = 中文普通话-简体</pre>\n<p>而 <code>zh-CN</code> 实际是指在中国大陆使用的中文，当然也包含在中国大陆使用的繁体中文。<strong>不过，由于大部分情况下一个区域只会通用一种文字，很多情况下我们可以忽略文字这一项</strong>，即使用 <code>zh-CN</code>（或者 <code>cmn-CN</code>）来表示中国大陆的简体中文普通话——毕竟在大部分业务中在中国大陆使用繁体和非普通话的情况非常少。</p>\n<blockquote><p>事实上，类似 <code>zh-Hans</code> 和 <code>zh-Hant</code> 开头的区域设置名称已经被标记为 <code>redundant 废弃</code>，因此尽可能只使用 <code>zh-CN</code> 或者 <code>cmn-Hans-CN</code> 这样的区域设置名称。所有区域设置名称的列表可以在 <a href=\"https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry\" rel=\"noopener\">IANA</a> 找到。</p></blockquote>\n<p>现在我们可以准确定义一个区域设置了。不过我们还有一些小小的需求。比如我们想在 <code>cmn-Hans-CN</code> 的区域设置中使用农历来表示日期，但显然我们上文定义的表示方法并不能表达这一需求。好在，Unicode 为 BCP 47 提供了 u 扩展。在区域设置名称后面加上 <code>-u-[选项]</code> 就可以表达更细致的变体了。所以我们有：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN-u-ca-chinese = 中文普通话-简体-中国大陆-u-日历-中国农历\r\njpn-Jpan-JP-u-ca-japanese = 日语-日文汉字/平假名/片假名-日本-u-日历-日本日历\r\ncmn-Hans-CN-u-nu-hansfin = 中文普通话-简体-中国大陆-u-数字-简体大写数字</pre>\n<p>u 扩展的具体可选项可以在 <a href=\"https://www.unicode.org/reports/tr35/tr35-21.html#Unicode_locale_identifier\" rel=\"noopener\">Unicode 网站</a>上找到。而多个 u 扩展还可以连接——于是我们甚至可以写出 <code>cmn-Hans-CN-u-ca-chinese-nu-hansfin</code> 这种丧心病狂的区域设置名称。当然，相信你现在已经可以看懂这个区域设置的意思了。</p>\n<blockquote><p>不同地区可能会有不同的日历使用习惯，如中国有使用农历的需求，泰国有使用佛历的需求，我们可以通过 u 扩展指定不同的日历。不过，大部分情况下我们会使用标准的 ISO 8601 日历（gregory），JavaScript 的 <code>Date</code> 对象也只支持这种日历。</p></blockquote>\n<blockquote><p>你可以使用 <a href=\"https://r12a.github.io/app-subtags/\" rel=\"noopener\">BCP47 language subtag lookup</a> 工具快速检查你编写的 BCP 47 区域标签是否规范。</p></blockquote>\n<p>终于我们可以正确表达一个完美符合我们需求的区域设置了。接下来，让我们开始格式化时间吧。</p>\n<h1>格式化时间</h1>\n<p>这题我会！</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const formatDate(date) =&gt; {\r\n    return `${date.getFullYear()}-${`${date.getMonth() + 1}`.padStart(2, '0')}-${`${date.getDate()}`.padStart(2, '0')} ${`${date.getHours()}`.padStart(2, '0')}:${`${date.getMinutes()}`.padStart(2, '0')}:${`${date.getSeconds()}`.padStart(2, '0')}`\r\n}\r\n\r\nformatDate(new Date()) // 2021-10-13 01:00:00</pre>\n<p>就完事了……吗？先不论这样的格式化代码难以阅读，尽管上文这样的日期格式国际通用，<strong>但并非所有区域都习惯于这样的日期表示方法。</strong>比如英语国家/地区在很多时候习惯在日期中加入星期，而阿拉伯语国家/地区在部分情况下习惯使用阿拉伯语数字（而非常用的阿拉伯-印度数字）；再比如美式英语国家/地区习惯月-日-年的日期表示法，而英式英语国家/地区习惯日-月-年的日期表示法……不同区域在时间表示格式习惯上的差异是巨大的，<strong>我们很难通过一个简单的方法来正确地、国际化地格式化一个日期。</strong></p>\n<p>好在 ES6 早就为我们铺平了道路。还记得上文提到过的 <code>Intl.DateTimeFormat</code> 吗？我们通过它来实例化一个日期格式化器并用进行日期的国际化。</p>\n<p>直接来看例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const options = {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    weekday: 'long'\r\n}\r\nconst now = new Date()\r\n\r\nconst enUSFormatter = new Intl.DateTimeFormat('en-US', options)\r\n\r\nconst zhCNFormatter = new Intl.DateTimeFormat('zh-CN', options)\r\nconst zhCNAltFormatter = new Intl.DateTimeFormat('zh-CN-u-ca-chinese', options)\r\nconst zhCNAlt2Formatter = new Intl.DateTimeFormat('zh-CN-u-ca-roc-nu-hansfin', options)\r\n\r\nconst jaFormatter = new Intl.DateTimeFormat('ja', options)\r\nconst jaAltFormatter = new Intl.DateTimeFormat('ja-JP-u-ca-japanese', options)\r\n\r\nconst arEGFormatter = new Intl.DateTimeFormat('ar-EG', options)\r\n\r\nenUSFormatter.format(now) // Wednesday, Oct 13, 2021\r\n\r\nzhCNFormatter.format(now) // 2021年10月13日星期三\r\nzhCNAltFormatter.format(now) // 2021辛丑年九月8星期三\r\nzhCNAlt2Formatter.format(now) // 民国壹佰壹拾年拾月拾叁日星期三\r\n\r\njaFormatter.format(now) // 2021年10月13日水曜日\r\njaAltFormatter.format(now) // 令和3年10月13日水曜日\r\n\r\narEGFormatter.format(now) // الأربعاء، ١٣ أكتوبر ٢٠٢١</pre>\n<blockquote><p>在这里我们使用 ISO 639-1 代码来表示语言，是由于事实上 ISO 639-1 代码更加常见与通用。在大部分支持 <code>Intl.DateTimeFormat</code> 的 JavaScript 运行时中我们也可以使用 ISO 639-2/3 代码来表示语言（但实际会 fallback 至对应的 ISO 639-1 代码）。</p></blockquote>\n<blockquote><p>你也可以通过在 <code>options</code> 中设置 <code>calendar</code> 属性和 <code>numberingSystem</code> 属性来替换区域设置名称中对 u 扩展的使用。这也是推荐方式。</p></blockquote>\n<p>这非常直观，我们可以指定区域设置和格式化选项来初始化一个格式化器，并在之后使用格式化器对象的 <code>format</code> 方法来格式化一个 <code>Date</code> 对象。这里的格式化选项其实非常灵活，能格式化的不只是日期，时间也可以被灵活地格式化，有非常多的组合可以选择。我们不会在这里详细解释每一个选项，你可以访问 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\" rel=\"noopener\">MDN 文档</a>来了解更多。</p>\n<blockquote><p>如前文所述，<code>Intl.DateTimeFormat</code> 无法格式化毫秒。</p></blockquote>\n<p>不过需要注意的是，<strong>JavaScript 运行时不一定支持所有区域设置，也不一定支持所有格式化选项。</strong>在遇到不支持的情况时，<code>Intl.DateTimeFormat</code> 默认会静默 fallback 到最匹配的支持项，因此在处理不常见的区域设置或选项时，你可能需要再额外检查。你可以通过 <code>Intl.DateTimeFormat.supportedLocalesOf()</code> 静态方法判断当前运行时是否支持指定的区域设置，也可以在实例化格式化器后在对象上调用 <code>resolvedOptions()</code> 方法来检查运行时的解析结果是否与预期一致。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('yue-Hant-CN').resolvedOptions()\r\n// {locale: 'zh-CN', calendar: 'gregory', …}\r\n// fallback 至 zh-CN，与 yue-CN 的预期不一致</pre>\n<p>此外，正如你所看到的，各种语言在日期格式化中使用的文本 JavaScript 运行时都已经帮我们内置了。因此，我们甚至可以利用这些国际化特性来为我们的应用减少一点需要翻译的字符串——打包进应用的翻译越少，应用体积也就越小了嘛——比如说获取一周七天对应的名字：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getWeekdayNames = (locale) =&gt; {\r\n     // 基于一个固定日期计算，这里选择 1970.1.1\r\n     // 不能使用 0，因为 Unix 时间戳 0 在不同时区的日期不一样\r\n    const base = new Date(1970, 0, 1).getTime()\r\n    const formatter = new Intl.DateTimeFormat(locale, { weekday: 'short' })\r\n    return Array.from({ length: 7 }, (_, day) =&gt; (\r\n        formatter.format(new Date(base + 3600000 * 24 * (-4 + day))) // 1970.1.1 是周四\r\n    ))\r\n}\r\n\r\ngetWeekdayNames('en-US') // ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\r\ngetWeekdayNames('zh-CN') // ['周日', '周一', '周二', '周三', '周四', '周五', '周六']\r\ngetWeekdayNames('ja') // ['日', '月', '火', '水', '木', '金', '土']\r\ngetWeekdayNames('ar-EG') // ['الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت']</pre>\n<p>当然，如果你还是不喜欢运行时为你提供的格式，我们还有上文提到过的 <code>formatToParts()</code> 方法可以用。来看一个简单的例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('zh-CN', {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    weekday: 'long',\r\n    hour: 'numeric',\r\n    minute: 'numeric',\r\n    second: 'numeric',\r\n}).formatToParts(new Date())\r\n// [\r\n//     { type: 'year', value: '2021' },\r\n//     { type: 'literal', value: '年' },\r\n//     { type: 'month', value: '10' },\r\n//     { type: 'literal', value: '月' },\r\n//     { type: 'day', value: '13' },\r\n//     { type: 'literal', value: '日' },\r\n//     { type: 'weekday', value: '星期三' },\r\n//     { type: 'literal', value: ' ' },\r\n//     { type: 'dayPeriod', value: '上午' },\r\n//     { type: 'hour', value: '1' },\r\n//     { type: 'literal', value: ':' },\r\n//     { type: 'minute', value: '00' },\r\n//     { type: 'literal', value: ':' },\r\n//     { type: 'second', value: '00' }\r\n// ]</pre>\n<p>随后，你就可以自己解析这个数组来构造出你想要的时间格式了。最后，我们还可以使用 <code>Intl.RelativeTimeFormat</code> 来格式化相对日期。当然我们不会在这里详细讲解这个 API，你可以参考 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat\" rel=\"noopener\">MDN 文档</a>。直接来看一个简单例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getRelativeTime = (num, unit, locale) =&gt; {\r\n    return new Intl.RelativeTimeFormat(locale, { numeric: 'auto' }).format(num, unit)\r\n}\r\n\r\ngetRelativeTime(-3, 'day', 'en-US') // 3 days ago\r\ngetRelativeTime(-1, 'day', 'zh-CN') // 昨天\r\ngetRelativeTime(0, 'second', 'zh-CN') // 现在\r\ngetRelativeTime(3, 'hour', 'ja') // 3 時間後</pre>\n<blockquote><p><code>Intl.RelativeTimeFormat</code> 是一个相对较晚进入标准的对象，因此浏览器支持程度较差，可能需要使用 <a href=\"https://formatjs.io/docs/polyfills/intl-relativetimeformat\" rel=\"noopener\">Polyfill</a>。不过目前（2021.10）主流浏览器的最新版本均已支持此 API。</p></blockquote>\n<h1>未来</h1>\n<p>我希望这篇文章时区转换的部分可以很快过时——这并非无稽之谈，目前（2021.10）TC39 的 <a href=\"https://github.com/tc39/proposal-temporal\" rel=\"noopener\"><code>Temporal</code> 提案</a>已经进入 Stage 3 了。<strong><code>Temporal</code> 提案定义了一个新的、时区友好的 <code>Temporal</code> 命名空间，并期望在不久后就能进入标准并最终应用于生产环境。</strong><code>Temporal</code> 定义了完整的时区、时间段、日历规则的处理，且拥有简单明了的 API。那时候，JavaScript 的时区处理就不会再如此痛苦了。由于目前 <code>Temporal</code> 提案还未进入标准，API 暂未稳定，我们无法将其用于生产环境，但我们可以来看一个简单的例子感受一下这个 API 的强大。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const zonedDateTime = Temporal.ZonedDateTime.from({\r\n  timeZone: 'America/Los_Angeles',\r\n  year: 1995,\r\n  month: 12,\r\n  day: 7,\r\n  hour: 3,\r\n  minute: 24,\r\n  second: 30,\r\n  millisecond: 0,\r\n  microsecond: 3,\r\n  nanosecond: 500,\r\n  calendar: 'iso8601'\r\n}) // 1995-12-07T03:24:30.0000035-08:00[America/Los_Angeles]</pre>\n<p>如果你希望立刻开始使用 <code>Temporal</code>，现在已有 Polyfill 可用。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"js-temporal\" data-mdxgithubp=\"temporal-polyfill\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/js-temporal/temporal-polyfill\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>不过，时区问题不会消失，各地区的习惯也很难融合到一起。时间的国际化处理是<a href=\"https://yourcalendricalfallacyis.com/\" rel=\"noopener\">极其复杂</a>的，前端中的时间国际化仍然值得我们认真关注。</p>\n","link":"https://flyhigher.top/develop/2482.html"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 12:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 4分8秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量...</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板...）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/209138/1/18651/50218/622032acEf83a8d68/fc6db86aebb679ff.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/207910/19/18573/59096/622032b0E05c1d4be/5d89d557f7889730.jpg\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/138186/40/23101/50775/622032b3Efa9053d7/df3a819d044a9455.jpg\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote>\n<p>题图来自 USTC Hackergame 2019「Happy LUG」</p>\n</blockquote>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/90743/25/22680/55545/622032abE6ef31d51/cfc4cb389c994c17.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote>\n<p>周六不放假休息，还在这加班搞 CTF？</p>\n</blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/86535/11/24318/75037/622032a8E4f94d4ae/89703ccc122cf4e0.jpg\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/80291/2/16552/19311/622032b3Eb300c2aa/66748fc8124a01c5.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"\n<p>WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将其表述为 \"An API for accessing Public Key Credentials\"，即“一个用于访问公钥凭证的 API”。WebAuthn 很强大，强大到被认为是 Web 身份认证的未来（当然，也很复杂）。你有想过通过指纹或者面部识别来登录网站吗？WebAuthn 就能在保证安全和隐私的情况下让这样的想法成为现实。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\" alt=\"通过 WebAuthn 调起 Windows Hello 登录网站\" width=\"1912\" height=\"966\" class=\"aligncenter size-full wp-image-2215\"></a>\n<p>你可以在<a href=\"https://webauthn.io/\" rel=\"noopener\">这个网站</a>自行体验 WebAuthn。或者，如果你有一个使用 WordPress 的站点，可以尝试一下 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WP-WebAuthn</a> 这款插件，它可以为你的站点启用 WebAuthn 登录。这是我为了写这篇文章而练手开发的插件，本文中的部分示例代码也来自这款插件。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"wp-webauthn\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/wp-webauthn\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>WebAuthn Level 1 标准已在 2019 年 3 月成为 W3C 推荐标准，而 Level 2 标准目前也已进入编辑草案阶段，但互联网上有关它的中文资料却仍然很少，国内也鲜有网站支持这一新标准。于是，在抱着各种英文资料和标准啃了几天以后，我折腾出了这篇文章。</p>\n<p>在这篇文章里，我将会从最基本的概念开始，逐渐深入 WebAuthn，直到解码公钥等深层细节。这可能是你能找到的有关 WebAuthn 最详细最基础的中文文章，也很可能是最长的。在开始之前，<strong>我强烈建议你打开菜单中的文章目录浏览一遍，以对这篇文章涉及的内容有所了解。</strong>如果你只是想了解如何简单地在你的项目中添加对 WebAuthn 的支持，那么“<a href=\"https://flyhigher.top/#webauthn-overview\">浅谈 WebAuthn</a>”部分就是你要找的；如果你想了解更多关于 WebAuthn 的底层细节，那么你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分。</p>\n<p>由于在本文写作时 WebAuthn Level 2 规范尚未定稿，<strong>这篇文章我们将只专注于 Level 1 规范。</strong></p>\n<p>这篇文章最后更新于 2020.9 ，在你读到这篇文章时，部分事实可能已经发生改变，请注意判断。</p>\n<p><strong>更新日志：</strong></p>\n<ul>\n<li>2021.1.16 添加 Chrome 开发工具信息</li>\n<li>2020.9.17 更新 iOS/iPad OS 兼容性信息</li>\n<li>2020.5.20 添加部分无用户名认证的平台兼容性内容</li>\n<li>2020.5.15 添加部分 <code>extensions</code> 相关内容与链接；添加全局凭证 ID 唯一内容；添加凭证 ID 查找相关内容；添加“从 U2F 认证迁移”一节</li>\n<li>2020.4.13 更新与修正 <code>userVerification</code> 相关内容；添加部分 Firefox 相关内容</li>\n<li>2020.3.23 文章发布</li>\n</ul>\n<p>那么让我们开始吧。<span></span></p>\n<h1>浅谈 WebAuthn</h1>\n<p>在这个部分里，我们将会从基础概念开始，了解有关 WebAuthn 和密码学的一些基础知识，并最终使用第三方库实现基础的 WebAuthn 认证。如果你已经对这些内容有所了解了，可以跳到“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”继续阅读。</p>\n<h2>为什么使用 WebAuthn</h2>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\" alt=\"钓鱼邮件\" width=\"709\" height=\"693\" class=\"aligncenter size-full wp-image-2162\"></a>\n<p>相信你一定收到过类似的邮件吧？只要你点进那个最显眼的链接，你就会进入一个设置好的圈套——钓鱼网站。如果你一时糊涂在这类网站上填写了你的账号和密码，bingo，你的账号就不再是你的账号了。</p>\n<p>不过，就算你警惕心再强，也无法避免密码泄露事件。Twitter, Facebook 等都爆出过明文密码泄露事件，证明再大的公司或组织也无法避免密码泄露问题。雪上加霜的是，很大一部分用户都非常喜欢使用重复密码，这就导致一次密码泄露会牵连很多网站，用户的账户安全性完全无法得到保证。</p>\n<p>那么，有什么办法解决这些问题吗？<strong>彻底解决的方法只有一个，那就是抛弃密码。</strong>可是没有密码还怎么验证用户身份呢？这就是 WebAuthn 的用武之地了。</p>\n<p><del>没有密码的好时代，来临力！</del></p>\n<h2>什么是 WebAuthn</h2>\n<p>那么到底什么是 WebAuthn 呢？如开头所说，WebAuthn 是“一个用于访问公钥凭证的 API”，网站可以通过这个 API 进行一些高安全性的身份验证。WebAuthn 一个最常见的应用就是用于网站登录时的 2FA（双重因素验证）甚至是无密码登录。通过网页调用 WebAuthn，在不同平台下，<strong>我们可以实现通过 USB Key、指纹、面部甚至虹膜扫描来认证身份，同时确保安全和隐私。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\" alt=\"WebAuthn 可使用的各种身份认证方式\" width=\"1294\" height=\"566\" class=\"aligncenter size-full wp-image-2213\"></a>\n<p>WebAuthn 标准是 FIDO2 标准的一部分，而 FIDO2 则是由 FIDO 联盟和 W3C 共同推出的 U2F（现称作 FIDO1）的后继标准，旨在增强网络认证的安全性。</p>\n<blockquote><p>你可能了解过 U2F，那么 U2F 和 FIDO2 的区别在哪里呢？从名字上可以看出，U2F，即“通用第二因素协议”，是专注于作为密码后的第二道屏障的，而 FIDO2 增加了单因素认证功能，这意味着使用 FIDO2 可以完全替代密码，真正实现无密码登录。</p></blockquote>\n<p>FIDO2 标准主要包括四个部分，其一是用于网站和访客设备交互的 WebAuthn，而 Client to Authenticator Protocol 2（CTAP2，客户端-认证器协议）作为 WebAuthn 的补充，则是用于访客的设备和认证器交互的协议。标准的其他两个部分则是 U2F 和 UAF 规范。在这篇文章中，我们只关心 WebAuthn，不会涉及 CTAP, U2F 和 UAF 的相关知识。如果你对这段话中的一些概念不了解，不要紧张，接下来我们就来谈谈 WebAuthn 中一些常用的术语和概念。</p>\n<blockquote><p>WebAuthn 只能在安全上下文中使用，也就是说，页面需要使用 HTTPS 协议或是处于 <code>localhost</code> 中。</p></blockquote>\n<h2>常用术语和概念</h2>\n<p>WebAuthn 中有许多不常碰到的术语，不过我只会在这里介绍一些常用的术语和概念——如果你只是希望做出一个简单的实现，那么了解这一段中的一些概念就足够了。同时，由于我实在没能找到一部分术语的通用翻译，有一些术语我按着自己的理解尽可能地翻译了，有任何问题请告诉我。</p>\n<p>在一个完整的 WebAuthn 认证流程中，通常有这么几个角色：</p>\n<ul>\n<li>Relying Party 依赖方 (RP) ：指服务提供方，即网站</li>\n<li>User 用户：正准备登录的你</li>\n<li>Authenticator 认证器：通常指 USB Key 或是设备内置的指纹扫描器、虹膜扫描器、面部识别装置等，正是它们在使用流程中代替了密码甚至是用户名</li>\n<li>User Agent 用户代理：通常指浏览器或系统，负责与认证器交互</li>\n</ul>\n<p>认证过程通常分为两种：</p>\n<ul>\n<li>Registration Ceremony 注册仪式：用户向账户上添加认证器</li>\n<li>Authentication Ceremony 验证仪式：用户通过已注册的认证器验证身份</li>\n</ul>\n<p>同时，认证过程中还会产生这些内容：</p>\n<ul>\n<li>Challenge 挑战：通常是一串随机字符串</li>\n<li>Public Key Credential 公钥凭证：由认证器产生的凭证，在技术上代替了密码</li>\n<li>Attestation 证明：注册时认证器产生的验证数据</li>\n<li>Assertion 断言：验证时认证器产生的验证数据</li>\n</ul>\n<blockquote><p><strong>请注意区分证明 (Attestation) 和断言 (Assertion)</strong>，特别是在这两个单词有些相似的情况下。在 WebAuthn 中，它们是不同过程中的类似概念，但并不相同。</p></blockquote>\n<p>如果你对于这些内容不是很理解，没有关系，我们会在“<a href=\"https://flyhigher.top/#how-to-webauthn\">使用流程</a>”一节中将这些概念放到实际情况中解释，你只要先区分这些概念即可。</p>\n<h2>安全性的基础</h2>\n<p>WebAuthn 为什么安全？和 HTTPS 一样，WebAuthn 使用非对称加密的思路来保证安全性，但侧重点又有所不同。要理解 WebAuthn 的认证流程，我们必须对非对称加密有所了解。如果你对非对称加密比较熟悉了，就直接跳到下一段吧。</p>\n<p>WebAuthn 的核心在于“认证”，即保证产生了凭证的认证器是用户的认证器，而不是第三方在伪造凭证。但为什么要使用非对称加密呢？我们可以先来看看对称加密。</p>\n<p>让我们假设小明和小红相互写信，见不到对方。这天小红突然想，给自己写信的人是不是真的小明呢？于是小红要求对方向小红证明自己是小明。怎么证明呢？他们商量出来这么一套方案：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明和小红商量一个统一的密码和密钥</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明用提前和小红商量好的密码和密钥加密文本后发回给小红</li>\n<li>小红使用相同的密码和密钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和密钥</li>\n</ol>\n<blockquote><p>在密码学中，我们通常把“加密算法”称为密码 (code)，和通常登录时用的密码 (password) 并非同一个概念。</p></blockquote>\n<p>在这种情况下，<strong>只要密钥不泄露</strong>，即拥有正确密钥的只有小明和小红，那么小红就能确定对方一定是小明。但这样的问题也很明显，如果小明和小红不能见面，那么他们就必须先以明文交换密码——<strong>在这个过程中一旦有人窃取到了密码，这个认证就无效了。</strong></p>\n<p>这时我们就需要使用<strong>非对称加密</strong>来拯救破碎的信任了。非对称加密的基础是一对密钥，也就是公钥和私钥，它们是互相关联但（几乎）无法互相推导的。在非对称加密的过程中，选择相同的密码后，使用私钥加密明文得到的密文只能由对应的公钥解密，无法使用私钥解密，同时这个过程反过来也是成立的。</p>\n<blockquote><p>本文的核心并不是非对称加密算法，因此不会详述非对称加密在数学上的证明，若有兴趣可以自行了解。</p></blockquote>\n<p>这就完美解决密钥泄露的问题了。让我们回过头来看之前的例子。现在小明和小红决定使用非对称加密来证明身份，过程如下：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明提前生成一对公私钥，将公钥发送给小红，私钥自己保管，同时商量好统一的密码</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明使用商量好的密码和自己的私钥加密文本，发送给小红</li>\n<li>小红使用相同的密码和小明的公钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和私钥</li>\n</ol>\n<p>在这种情况下，<strong>只要私钥不泄露</strong>，那么小红解密得到的文本和之前发送的一致，那么就可以证明收到的密文一定是由小明加密后发送过来的。而在整个过程中，私钥都没有离开过小明，更没有经过传输，也就几乎没有泄露的可能了。这时，小红终于可以确定对面和她通信的人的确是小明了。</p>\n<p>题外话：HTTPS 虽然也应用了非对称加密，但 HTTPS 更侧重于“加密”而非“认证”，因此思路上会有些许差异。要了解关于 HTTPS 和非对称加密的更多信息，你可以阅读我之前写的这篇文章：</p>\n<p></p>\n<div class=\"mdx-post-cot\" data-mdxposturl=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdx-post-wait-out-c2\"><div class=\"mdx-post-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<span></span>\n<h2>使用流程</h2>\n<p>了解了非对称加密，我们就可以来看看 WebAuthn 的认证流程了。</p>\n<p>和普通的密码一样，<strong>使用 WebAuthn 分为两个部分，注册和验证。</strong>注册仪式会在依赖方中将认证器的一些信息和用户建立关联；而验证仪式则是验证这些信息以登确保是用户本人在登录。根据上一节的思路，我们可以知道，注册仪式就是认证器生成一对公私钥，然后将公钥交给依赖方；而验证仪式是依赖方发送给认证器一段文本，要求认证器用自己的私钥加密后发回以验证。</p>\n<p>在实际情况中，WebAuthn 是基于<strong>挑战-应答模型</strong>工作的。要更好地理解，我们直接来看具体流程。先来看看注册的流程。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\" alt=\"WebAuthn 注册流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2224\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的注册请求</li>\n<li>依赖方向浏览器发送挑战、依赖方信息和用户信息</li>\n<li>浏览器向认证器发送挑战、依赖方信息、用户信息和客户端信息以请求创建公钥凭证</li>\n<li>认证器请求用户动作，随后创建一对公私钥，并使用私钥签名挑战（即证明），和公钥一起交给浏览器</li>\n<li>浏览器将签名后的挑战和公钥发送给依赖方</li>\n<li>依赖方用公钥验证挑战是否与发送的一致，如果成功则将公钥与用户绑定，注册完成</li>\n</ol>\n<p>我也做了一个交互式的 Demo，你可以对照流程来更好地理解。</p>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\">开始注册</button> <span></span></p>\n<div></div>\n<blockquote><p>注意，这个 Demo 和下方的 Demo 都只是一个本地模拟的简单示例，没有任何数据会被上传，当然也不会对数据进行验证。</p></blockquote>\n<p>而之后的验证流程如下：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\" alt=\"WebAuthn 验证流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2226\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的验证请求</li>\n<li>依赖方向浏览器发送挑战</li>\n<li>浏览器向认证器发送挑战、依赖方信息和客户端信息以请求获取公钥凭证</li>\n<li>认证器请求用户动作，随后通过依赖方信息找到对应私钥，并使用私钥签名挑战（即断言），交给浏览器</li>\n<li>浏览器将签名后的挑战发送给依赖方</li>\n<li>依赖方用之前存储的公钥验证挑战是否与发送的一致，一致则验证成功</li>\n</ol>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\" disabled>开始验证</button> <span>在上方注册后才能验证</span></p>\n<div></div>\n<p>可以看到，WebAuthn 不仅在理论上是安全的，同时<strong>在整个过程中并没有隐私数据被传输</strong>——用户信息实际上只包含用户名和用户 ID。因此我们完全可以说 WebAuthn 是安全且私密的。</p>\n<blockquote><p>为了避免用户在不同依赖方之间被追踪，认证器通常会为每个依赖方和用户的组合都创建一对公私钥。不过，由于认证器的存储空间有限，认证器通常不会存储每一个私钥，而是会通过各类信息和烧录在认证器内的主密钥“算”出对应的私钥以实现无限对公私钥。具体算法根据不同厂商会有所不同。对于 Yubikey，你可以在<a href=\"https://developers.yubico.com/U2F/Protocol_details/Key_generation.html\">这里</a>了解更多。</p></blockquote>\n<blockquote><p>如果依赖方需要，用户同意后，发送给依赖方的公钥凭证中可以包含用于辨认认证器型号的信息，不过这对隐私的影响微乎其微。</p></blockquote>\n<h2>浏览器接口</h2>\n<p>要使用 WebAuthn，我们必须要依靠浏览器作为媒介和验证器进行交互，而这就需要浏览器对于 WebAuthn 的支持了。绝大多数新版本的现代浏览器都为 WebAuthn 提供了统一的接口，而在这一段中我们会了解如何使用相关的接口。但是在开始之前，我们可以先来看看浏览器的支持程度（2020.9）。</p>\n<div class=\"mdui-table-fluid\"><table class=\"mdui-table\">\n<thead><tr>\n<th>浏览器</th>\n<th>支持情况</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>桌面端 Chrome</td>\n<td>67+</td>\n</tr>\n<tr>\n<td>移动端 Chrome</td>\n<td>67+<sup>[1]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Firefox</td>\n<td>60+</td>\n</tr>\n<tr>\n<td>移动端 Firefox</td>\n<td>不支持<sup>[2]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Edge</td>\n<td>18+</td>\n</tr>\n<tr>\n<td>移动端 Edge</td>\n<td>不支持<sup>[3]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Safari</td>\n<td>13+</td>\n</tr>\n<tr>\n<td>移动端 Safari</td>\n<td>13.3+<sup>[4]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Opera</td>\n<td>54+</td>\n</tr>\n<tr>\n<td>移动端 Opera</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table></div>\n<p><sup>[1]</sup> 受平台限制，Chrome 在 iOS 平台上不支持 WebAuthn，在 Android 平台上支持大部分 WebAuthn 功能，但仍不支持部分特性（如 <code>userVerification</code>）。<br><sup>[2]</sup> 移动端 Firefox 80 以下的版本支持 WebAuthn 但似乎会忽略 <code>authenticatorAttachment</code> 等一部分参数，同时移动端 Firefox Beta 80 以下的版本支持 WebAuthn 但无法成功调用。自 80 版本起移动端 Firefox 暂时取消了对 WebAuthn 的支持（可能是 Bug）。<br><sup>[3]</sup> 移动端 Edge 似乎支持 WebAuthn 但无法成功调用。<br><sup>[4]</sup> Safari iOS/iPad OS 13 仅支持外部认证器，无法调用 Touch ID 或 Face ID；自 iOS/iPad OS 14 起 Safari 已支持全功能 WebAuthn，可以调用 Touch ID/Face ID</p>\n<p>当然，一众国产浏览器，包括 Samsung Browser 和 Yandex Browser，目前都不支持 WebAuthn。此外，由于 WebAuthn 涉及外部验证器和 TPM 可信平台模块等，用户的操作系统也会对 WebAuthn 的可用性造成影响。以下是一些需要注意的信息：</p>\n<ul>\n<li>Windows 10 1903 以下版本仅 Edge 能提供完整支持，其他浏览器只能使用 USB Key 等外部认证器；1903+ 中所有浏览器都可以通过 Windows Hello 带来完整的 WebAuthn 支持</li>\n<li>Android 需要安装并开启 Google 服务</li>\n<li>iOS/iPad OS 13.3 以下的版本不支持 WebAuthn，iOS/iPad OS 14 以下的版本支持有限（参考上文），iOS/iPad OS 14 开始 Safari 已支持全功能 WebAuthn（功能完整度甚至超过了 Android）</li>\n</ul>\n<p>可以看出，WebAuthn 的发展之路仍然很漫长，但好在桌面端对它的支持已经比较完善了，在一些情况下我们完全有理由使用它。</p>\n<hr>\n<p>来看看浏览器提供了怎么样的接口吧。要使用 WebAuthn，我们可以使用 <code>navigator.credentials.create()</code> 请求认证器生成公钥凭证和 <code>navigator.credentials.get()</code> 请求获取公钥凭证。</p>\n<blockquote><p>你或许已经对 Credential Management API 有所了解了。通过这些 API，我们还可以实现一些有趣的特性，不过这值得另开一篇文章来讲了。</p></blockquote>\n<p>对于一个基础的实现，<code>navigator.credentials.create()</code> 需要传入的参数如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        challenge,\r\n        rp: {\r\n            id,\r\n            name\r\n        },\r\n        user: {\r\n            id,\r\n            name,\r\n            displayName\r\n        },\r\n        pubKeyCredParams: [\r\n            {\r\n                type: \"public-key\",\r\n                alg\r\n            }\r\n        ],\r\n        authenticatorSelection: {\r\n            authenticatorAttachment,\r\n            userVerification\r\n        },\r\n        excludeCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>在 <code>navigator.credentials.create()</code> 方法中，我们必须传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值。这指明了我们需要创建公钥凭证，而非普通的密码凭证。然后，在 <code>publicKey</code> 对象中设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rp: Object</code>：依赖方信息，其中有一项为必须：\n<ul>\n<li>\n<code>rp.id: String</code>：（可选）依赖方 ID，必须为当前域名或为当前域名的子集的域名（不是子域名）。如域名为 <code>test.123.example.com</code>，则依赖方 ID 可以是 <code>test.123.example.com</code>, <code>123.example.com</code> 或 <code>example.com</code>。不指定则默认使用当前域名</li>\n<li>\n<code>rp.name: String</code>：依赖方名称，用于方便用户辨认</li>\n</ul>\n</li>\n<li>\n<code>user: Object</code>：用户信息，其中有三项为必须：\n<ul>\n<li>\n<code>user.id: Uint8Array</code>：转换为 <code>Uint8Array</code> 的字符串。<strong>出于安全考量，这应尽可能不与任何用户信息相关联，如不要包含用户名、用户邮箱等</strong>\n</li>\n<li>\n<code>user.name: String</code>：登录用户名</li>\n<li>\n<code>user.dispalyName: String</code>：用于显示的用户名称，显示与否的具体行为取决于浏览器</li>\n</ul>\n</li>\n<li>\n<code>pubKeyCredParams: Array</code>：一个算法列表，指明依赖方接受哪些签名算法。列表的每一项都是一个对象，拥有两个属性：\n<ul>\n<li>\n<code>pubKeyCredParams[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>pubKeyCredParams[].alg: Number</code>：一个负整数，用于标明算法。具体算法对应的数字可以在 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\">COSE</a> 找到</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection: Object</code>：（可选）用于过滤正确的认证器，这里介绍常用的一个参数：\n<ul>\n<li>\n<code>authenticatorSelection.authenticatorAttachment: String</code>：（可选）指定要求的认证器类型。如果没有满足要求的认证器，认证可能会失败。该参数可以为 <code>null</code>（表示接受所有类型的认证器）或是以下两个值之一：\n<ul>\n<li>\n<code>platform</code>：表示仅接受平台内置的、无法移除的认证器，如手机的指纹识别设备</li>\n<li>\n<code>cross-platform</code>：表示仅接受外部认证器，如 USB Key</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection.userVerification: String</code>：（可选）指定认证器是否需要验证“用户为本人 (User Verified, UV)”，否则只须“用户在场 (User Present, UP)”。具体验证过程取决于认证器（不同认证器的认证方法不同，也有认证器不支持用户验证），而对验证结果的处理情况则取决于依赖方。该参数可以为以下三个值之一：\n<ul>\n<li>\n<code>required</code>：依赖方要求用户验证</li>\n<li>\n<code>preferred</code>：（默认）依赖方希望有用户验证，但也接受用户在场的结果</li>\n<li>\n<code>discouraged</code>：依赖方不关心用户验证。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>excludeCredentials: Array</code>：（可选）用于标识要排除的凭证，可以避免同一个用户多次注册同一个认证器。如果用户试图注册相同的认证器，用户代理会抛出 <code>InvalidStateError</code> 错误。数组中的每一项都是一个公钥凭证对象，包含以下属性：\n<ul>\n<li>\n<code>excludeCredentials[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>excludeCredentials[].id: Uint8Array</code>：要排除的凭证 ID</li>\n<li>\n<code>excludeCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，超时后将强制终止 <code>create()</code> 并抛出错误。若不设置，将使用用户代理的默认值；若太大或太小，则使用最接近的用户代理默认值范围中的值。推荐值为 5000-120000</li>\n</ul>\n<blockquote><p>对于 <code>pubKeyCredParams</code>，通常我们只需添加 ES256 (alg: -7) 算法即可兼容大部分外部认证器，此外，再添加 RS256 (alg: -257) 算法即可兼容大部分平台内置认证器（如 Windows Hello）。当然，前端添加算法之后，后端也需要相应的算法支持。</p></blockquote>\n<blockquote><p>对于 <code>userVerification</code>，由于默认值 \"preferred\" 并不能很好地被所有设备支持，因此无论在 <code>create()</code> 中还是 <code>get()</code> 中不指定该参数都会在 Chrome 中触发一条警告。具体请参阅<a href=\"https://chromium.googlesource.com/chromium/src/+/master/content/browser/webauth/uv_preferred.md\">这个页面</a>。</p></blockquote>\n<p>调用 <code>create()</code> 之后，我们就可以拿到一个 <code>Promise</code>，并可以在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>create()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAttestationResponse {\r\n        attestationObject: ArrayBuffer(390) {},\r\n        clientDataJSON: ArrayBuffer(121) {}\r\n    },\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\",\r\n    type: \"public-key\"\r\n}</pre>\n<p>其中有：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 \"public-key\"</li>\n<li>\n<code>response: Object</code>：<code>AuthenticatorAttestationResponse</code> 对象，是 <code>PublicKeyCredential</code> 的主要部分，包含以下两个内容：\n<ul>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n<li>\n<code>response.attestationObject: ArrayBuffer</code>：CBOR 编码的认证器数据，包含凭证公钥、凭证 ID、签名（如果有）、签名计数等信息</li>\n</ul>\n</li>\n</ul>\n<p>然后将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串，我们就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证与注册了。具体怎么操作，我们会在下文详细讨论。当然，别忘了 <code>catch()</code> 注册过程中抛出的任何错误。</p>\n<blockquote><p>你可能会认为在所有情况下，注册时认证器都会对挑战进行签名。实际上在大部分情况下（同时也是默认情况），<strong>注册时认证器并不会对挑战进行签名</strong>，<code>attestationObject</code> 并不会包含签名后的挑战。只有依赖方明确要求证明且用户同意（部分浏览器要求）后认证器才会对挑战进行签名（具体实现据情况会有所不同）。对此，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion#Attestation\">MDN 解释道</a>“大部分情况下，用户注册公钥时我们会使用「初次使用时信任模型」(TOFU) ，此时验证公钥是没有必要的。”要了解更多关于证明的内容，请参阅“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>而对于 <code>navigator.credentials.get()</code>，我们可以传入如下的参数：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.get({\r\n    publicKey: {\r\n        challenge,\r\n        rpId,\r\n        userVerification,\r\n        allowCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>和 <code>create()</code> 一样，对于 <code>get()</code> 我们需要传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值，指明我们需要获取的是公钥凭证而非普通的密码凭证。在 <code>publicKey</code> 对象中我们可以设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rpID: String</code>：（可选）依赖方 ID，需要和注册认证器时的一致。规则和上述的 <code>rp.id</code> 一致，不指定默认使用当前域名</li>\n<li>\n<code>userVerification: String</code>：和上文一样，只是需要注意它这次不在 <code>authenticatorSelection</code> 中了</li>\n<li>\n<code>allowCredentials: Array</code>：（可选）用于标识允许的凭证 ID，使用户代理找到正确的认证器。只有符合这个列表中凭证 ID 的凭证才能被成功返回。数组中的每一项都是对象，包含以下属性：\n<ul>\n<li>\n<code>allowCredentials[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>allowCredentials[].id: Uint8Array</code>：允许的凭证 ID</li>\n<li>\n<code>allowCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，和上面的一样，推荐值为 5000-120000</li>\n</ul>\n<p>嗯，要传入的参数少多了。之后，和 <code>create()</code> 一样，调用 <code>get()</code> 之后，我们就可以拿到一个 <code>Promise</code> 并在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>get()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAssertionResponse {\r\n        authenticatorData: ArrayBuffer(37) {},\r\n        signature: ArrayBuffer(256) {},\r\n        userHandle: ArrayBuffer(64) {},\r\n        clientDataJSON: ArrayBuffer(118) {}\r\n    }\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\"\r\n    type: \"public-key\"\r\n}</pre>\n<p>这里的东西就比 <code>create()</code> 时拿到的要多了。看看我们拿到了什么吧：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 \"public-key\"</li>\n<li>\n<code>response: Object</code>：对于验证流程，认证会返回 <code>AuthenticatorAssertionResponse</code> 而不是 <code>AuthenticatorAttestationResponse</code> 对象，这个对象包含以下 4 个属性：\n<ul>\n<li>\n<code>response.authenticatorData: ArrayBuffer</code>：认证器信息，包含认证状态、签名计数等</li>\n<li>\n<code>response.signature: ArrayBuffer</code>：被认证器签名的 <code>authenticatorData</code> + <code>clientDataHash</code>（<code>clientDataJSON</code> 的 SHA-256 hash）</li>\n<li>\n<code>response.userHandle: ArrayBuffer</code>：<code>create()</code> 创建凭证时的用户 ID <code>user.id</code>。许多 U2F 设备不支持这一特性，这一项将会是 <code>null</code>\n</li>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n</ul>\n</li>\n</ul>\n<p>同样地，我们将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串后就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证了。至于具体怎么做，别急，马上就来讲一讲。</p>\n<h2>简单实现</h2>\n<p>了这么多，我们终于可以实现一个简单的 WebAuthn 认证页面了。由于在实际操作中 WebAuthn 相关的数据解码和密码计算比较复杂，在服务器端我们可以使用第三方库来帮我们做这些脏活累活，我们只需专注于具体流程就可以了。</p>\n<p>要寻找可用的第三方库，你可以在 <a href=\"https://webauthn.io/\">webauthn.io</a> 上找到适用于各种语言的第三方库——除了 PHP（笑）。不过好在你可以在 GitHub 上找到几个不错的 PHP WebAuthn 库，比如 <a href=\"https://github.com/web-auth/webauthn-framework\">web-auth/webauthn-framework</a>。</p>\n<p>在我们的这个例子中，我们关心的主要是前端逻辑；而后端我们可以使用各类几乎已经做到开箱即用的第三方库，这样我们可以专注于流程而不必关心细节。当然如果你想了解后端的解码细节，可以阅读“<a href=\"https://flyhigher.top/#webauthn-decode\">手动解个码</a>”一节。</p>\n<hr>\n<p>让我们先从注册开始吧。现在，用户点击了注册认证器的按钮，一个请求被发送给服务器（也就是依赖方）。在最简单的情况中，依赖方需要将三个内容发送给浏览器：<strong>挑战、用户信息和用户已注册的凭证 ID 列表（即 <code>excludeCredentials</code>）</strong>。当然依赖方也可以自由选择发送更多信息，只要最终前端能构建合法的参数即可。</p>\n<p>挑战最终会被转换为 <code>Uint8Array</code>，即一组 0-255 的整数。如果使用 PHP，在后端我们可以这样生成 Base64 编码的挑战：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$challenge = \"\";\r\nfor($i = 0; $i \n<p>对于用户信息，我们需要登录名、显示名称和 ID 三项内容。我们可以从数据库中取出用户信息，也可以新建一份。需要注意的是，<strong>出于安全和隐私的考量，ID 不应该包含用户的任何信息，比如用户邮箱等。</strong>推荐的做法是和挑战一样，生成一个随机字符串/一组随机数，并将其于用户关联起来以供之后使用。</p>\n<p>发送已注册的凭证 ID 列表是为了防止用户重复注册同一个认证器。正确设置该列表后，如果用户试图注册同一个认证器，浏览器会中止流程并抛出 <code>InvalidStateError</code>。</p>\n<p>最后，别忘了将挑战等一些后续可能会用到的信息临时存储起来。Session 就是一个很好的选择。</p>\n<p>将所有信息发送到浏览器之后，我们应该可以构建出新建凭证所需的参数了。由于有多个参数需要以 <code>Uint8Array</code> 的形式传入，我们可以准备一个简单的工具函数帮我们将 Base64 的字符串转为 <code>Uint8Array</code>。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function str2ab(str){\r\n    return Uint8Array.from(window.atob(str), c=&gt;c.charCodeAt(0));\r\n}</pre>\n<p>除了 <code>challenge</code>, <code>rp</code>, <code>user</code> 和 <code>excludeCredentials</code> 几部分需要你根据具体情况设置外，上文提到的其他参数一般可以这么设置：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">publicKey: {\r\n    challenge, // 自行设置\r\n    rp, // 自行设置\r\n    user, // 自行设置\r\n    pubKeyCredParams: [\r\n        {\r\n            type: \"public-key\",\r\n            alg: -7 // ES256\r\n        },\r\n        {\r\n            type: \"public-key\",\r\n            alg: -257 // RS256\r\n        }\r\n    ],\r\n    authenticatorSelection: {\r\n        userVerification: \"discouraged\",\r\n        authenticatorAttachment: null // 除非用户指定，大部分情况下无需指定\r\n    },\r\n    excludeCredentials, // 自行设置\r\n    timeout: 60000\r\n}</pre>\n<p>然后就是传入 <code>navigator.credentials.create()</code>，拿到 <code>PublicKeyCredential</code>。如果一切顺利，接下来我们就需要考虑如何将返回的内容传回依赖方了。由于我们拿到的很多都是 <code>ArrayBuffer</code>，我们需要将其进行编码。再准备一个工具函数吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function array2b64String(a) {\r\n    return window.btoa(String.fromCharCode(...a));\r\n}</pre>\n<p>然后适当处理，我们就可以得到一个方便传输的 JSON 字符串了：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({publicKey}).then((credentialInfo) =&gt; {\r\n    const publicKeyCredential = {\r\n        id: credentialInfo.id,\r\n        type: credentialInfo.type,\r\n        rawId: array2b64String(new Uint8Array(credentialInfo.rawId)),\r\n        response: {\r\n            clientDataJSON: array2b64String(new Uint8Array(credentialInfo.response.clientDataJSON)),\r\n            attestationObject: array2b64String(new Uint8Array(credentialInfo.response.attestationObject))\r\n        }\r\n    };\r\n    return publicKeyCredential;\r\n}).then(JSON.stringify).then((authenticatorResponseJSON) =&gt; {\r\n    // 可以发送了\r\n}).catch((error) =&gt; {\r\n    console.warn(error); // 捕获错误\r\n})</pre>\n<p>依赖方收到数据以后，还需要做三件事：验证挑战、存储凭证 ID 和存储公钥。如果数据解码顺利，且收到的挑战和之前发送的一致，就可以认为注册成功，将凭证 ID 及公钥与用户关联起来。这一步有很多第三方库可以帮我们做，对于基础实现我们就不深入探究了。</p>\n<blockquote><p>由于不同厂商的认证器的实现方式不同，<strong>我们并不能保证凭证 ID 一定是全局唯一的</strong>，也就是说，凭证 ID 有可能碰撞——即使这些凭证实际上是不同的。依赖方在实现凭证 ID 的存储及查找时，需要注意和用户 ID 结合进行存储或查找，或是直接在注册认证器时在服务器端对比阻止相同的凭证 ID。</p></blockquote>\n<hr><p>接下来就可以进行验证了。某天，用户点击了验证按钮准备登录，于是浏览器发送了验证请求到依赖方，同时附上要登录的用户名。接下来依赖方至少需要发送两项内容给浏览器：<strong>挑战和用户已绑定的凭证 ID 列表（即 <code>allowCredentials</code>）。</strong></p>\n<p>之后前端的处理流程就和注册时基本一致了。只是需要注意验证流程中获取到的 <code>PublicKeyCredential</code> 的结构和注册时的稍有不同。</p>\n<p>当浏览器将数据传回后，依赖方需要做的事情就比之前要麻烦一些了。依赖方需要验证挑战，并用之前存储的公钥验证签名和签名计数。同样地，这一步有很多第三方库可以帮我们做。最后，如果验证全部通过，我们就可以允许用户登录了。</p>\n<p>到目前为止，我们已经实现了一个简单的 WebAuthn 验证服务。不过这只是一个最基础的实现，对于很多高安全要求的身份认证这是远远不够的。因此，我们需要摆脱对第三方库的依赖，深入了解 WebAuthn。你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分，不过对于基础的 WebAuthn 实现，我们的旅程就到这里了。</p>\n<h2>拓展阅读</h2>\n<p>如果你的目标只是快速了解如何开发 WebAuthn，那么你阅读到这里就可以了。同时，上一节例子中的部分代码来自于我为了这篇文章开发的 WordPress 插件 WP-WebAuthn，这个插件可以为你的 WordPress 启用 WebAuthn 无密码登录（并非二步验证），你可以查阅插件的 <a href=\"https://github.com/yrccondor/wp-webauthn\">GitHub 存储库</a>了解更多，也可以自己安装试一试。</p>\n<p>如果你正在使用 Chrome 开发，Chrome 87+ 版本添加了一个 WebAuthn 开发者面板，可以帮助你在没有任何实体验证器的情况下开发 WebAuthn 功能。你可以在 Google 的<a href=\"https://developers.google.com/web/tools/chrome-devtools/webauthn\">这篇文章</a>中了解更多。不够，如果你正在使用 Firefox，很遗憾目前我还没有找到对应的开发工具或是浏览器扩展可用。</p>\n<p>如果你希望了解更多关于非对称加密的数学证明，可以查阅阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">这篇文章</a>。</p>\n<p>如果你希望了解更多关于 Credential Management API 的信息，可以查阅<a href=\"https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe\">这篇文章</a>（英文）。</p>\n<p>如果你希望了解更多 WebAuthn 的细节，可以继续往下阅读。<span></span></p>\n<h1>深入了解 WebAuthn</h1>\n<p>如上文所说，如果摆脱对第三方库的依赖，或是要实现更安全的 WebAuthn，我们必须深入了解 WebAuthn。在这一部分中，我们会详细讨论上文没有提到的一些概念和参数，并了解 WebAuthn 中各类数据的结构以实现解码与验证。先来看一看一些进阶的选项吧。</p>\n<h2>进阶选项</h2>\n<p>没错，上文提到的传入 <code>navigator.credentials.create()</code> 和 <code>navigator.credentials.get()</code> 方法的参数其实只是所有参数的一部分。对于 <code>create()</code>，我们还可以配置这些可选内容（上文提及的已省略）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        rp: {\r\n            icon\r\n        },\r\n        user: {\r\n            icon\r\n        },\r\n        attestation,\r\n        authenticatorSelection: {\r\n            requireResidentKey\r\n        },\r\n        extensions\r\n    }\r\n})</pre>\n</pre>\n<ul>\n<li>\n<code>rp.icon: String</code> 和 <code>user.icon</code>：是的，你可以为依赖方和用户设置图标，可以使用 HTTPS URL 或 Base64，一般长度不能超过 128 字节，不过大部分浏览器不会显示图标，或是有非常小的图片体积限制，所以一般没有使用这一属性的必要</li>\n<li>\n<code>attestation: String</code>：表明依赖方是否需要证明。可选三个值：\n<ul>\n<li>\n<code>none</code>：（默认）不需要证明。如上文所述，依赖方不关心证明，因此认证器不会签名。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n<li>\n<code>indirect</code>：依赖方需要证明，但证明方式可由认证器选择。在支持匿名证明的认证器上，认证器会通过匿名证明的方式签名挑战，并向依赖方提供签名方式等信息</li>\n<li>\n<code>direct</code>：依赖方要求直接证明。此时认证器会使用烧录在认证器中的公钥进行签名，同时向依赖方提供签名方式等信息以供依赖方验证认证器是否可信。更多信息可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节</li>\n</ul>\n</li>\n<li>在 <code>authenticatorSelection</code> 中，我们还可以设置两个可选属性：\n<ul>\n<li>\n<code>authenticatorSelection.requireResidentKey: Boolean</code>：是否要求将私钥钥永久存储于认证器中。默认值为 <code>false</code>。对于 iOS/iPad OS 13，必须设置为 <code>false</code>，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n<li>\n<code>extensions: Object</code>：WebAuthn 扩展，可以提供规范之外的配置和响应。由于实际情况中很少会使用这一特性，我们不会在这篇文章中讨论它</li>\n\n<blockquote><p>将 <code>requireResidentKey</code> 设置为 <code>true</code> 可以实现无用户名的登录，即认证器同时替代了用户名和密码。需要注意的是，尽管大部分认证器可以实现无限对公私钥，<strong>但能永久存储的私钥数量是有限的</strong>（对于 Yubikey，这通常是 25），因此只应在真正需要的时候启用此特性。我们会在“<a href=\"https://flyhigher.top/#login-without-username\">无用户名登录</a>”一节中详细讨论原因。</p></blockquote>\n<blockquote><p><strong>如果你没有高安全需求（如银行交易等），请不要向认证器索取证明</strong>，即将 <code>attestation</code> 设置为 \"none\"。对于普通身份认证来说，要求证明不必要的，且会有浏览器提示打扰到用户。</p></blockquote>\n<blockquote><p>Android 暂时无法实施用户验证，进而会导致依赖方验证失败。你可以在<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=997538\">这里</a>追踪这个特性的实现情况。</p></blockquote>\n<blockquote>\n<p>对于 <code>extensions</code>，由于目前浏览器支持和应用范围有限，我们不会在这篇文章中涉及，不过你可以看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    uvm: true, // 要求认证器返回用户进行验证的方法\r\n    txAuthSimple: \"Please proceed\" // 在认证器上显示与交易有关的简短消息\r\n}</pre>\n<p>你可以在<a href=\"https://www.w3.org/2019/01/webauthn-extensions.html\">这个页面</a>了解更多关于 <code>extensions</code> 的信息。</p>\n</blockquote>\n<p>对于 <code>get()</code>，我们其实只有一个可选内容没讲了，即 <code>extensions</code>。和上文一样，我们不会在这篇文章中讨论它。</p>\n<p>就这些了！<span></span></p>\n<h2>手动解个码</h2>\n<p>是时候看看如何手动解码了。我们将会在这一节中讨论认证器返回的数据的结构以及如何正确地解码它们。</p>\n<p>首先我们来看看如何处理注册过程中认证器发回的数据。假设所有 <code>ArrayBuffer</code> 类型的值都被正确地以 Base64 编码，且后端已经将 JSON 的字符串解析为字典。先来复习一下，我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"ZRBkDBCEtq...9XY8atOcbg\",\r\n    type: \"public-key\",\r\n    rawId: \"ZRBkDBCEtq...9XY8atOcbg==\",\r\n    response: {\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...i5jcmVhdGUifQ==\",\r\n        attestationObject: \"o2NmbXRkbm9uZWd...xNHuAMzz2LxZA==\"\r\n    }\r\n}</pre>\n<p>这里的 <code>id</code> 就是凭证的 ID，如果验证正确，我们最终要将它存储起来并于用户关联。同时可以看到 Base64 编码后的 <code>rawId</code> 其实和 <code>id</code> 是一致的（不过 <code>id</code> 是 Base64URL 编码的）。而 <code>type</code> 则一定是 \"public-key\"。</p>\n<p>不过，我们主要关心的还是 <code>respose</code> 中的两项内容。首先是 <code>clientDataJSON</code>。它的处理比较简单，看名字就知道，它应该是一个 JSON 字符串。</p>\n<blockquote><p>小技巧：如果你看到一个 Base64 编码的字符串以 \"ey\" 开头，那么它大概率是一个 Base64 编码的 JSON。</p></blockquote>\n<p>将<code>clientDataJSON</code> Base64 解码再 JSON 解码之后我们就能得到一个字典：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"NI4i1vsNmP2KHcmyFnBCKRVQPfHgg34SsYZUOPZY2lM\",\r\n    extra_keys_may_be_added_here: \"do not compare clientDataJSON against a template. See https://goo.gl/yabPex\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>结构一目了然。在这里，我们需要验证三项内容：</p>\n<ul>\n<li>\n<code>challenge</code> 和之前发送的一致</li>\n<li>\n<code>origin</code> 为创建凭证的页面的源（协议+主机名+端口号，并非 URL）</li>\n<li>\n<code>type</code> 为 \"webauthn.create\"</li>\n</ul>\n<p>同时可以注意到有一个奇怪的 <code>extra_keys_may_be_added_here</code>。这其实是 Google 在 Chrome 中搞的一点小把戏，有一定概率会出现，提醒我们需要将 JSON 解析后再验证键值以防额外插入的键值影响验证。具体信息你可以访问那个 URL 看一看。</p>\n<p>对于 Firefox，我们会多得到两项 <code>clientExtensions</code> 和 <code>hashAlgorithm</code> ，分别指明了客户端扩展数据和签名算法。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"3-4\">{\r\n    challenge: \"dg6ost6ujhAA0g6WqLe-SOOH-tbhvjW9Sp90aPKlLJI\",\r\n    clientExtensions: {},\r\n    hashAlgorithm: \"SHA-256\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>由于本文不考虑扩展数据，因此我们可以不考虑 <code>clientExtensions</code>。同时由于目前规范中指定的签名算法只有 SHA-256 一种，因此现阶段我们也可以简单地忽略 <code>hashAlgorithm</code>。</p>\n<p><code>clientDataJSON</code> 很简单地就处理完了。接下来我们要来看看 <code>attestationObject</code>。先来看看 <code>attestationObject</code> 的结构图示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\" alt=\"attestationObject 的结构\" width=\"1056\" height=\"532\" class=\"aligncenter size-full wp-image-2245\"></a>\n<p><code>attestationObject</code> 是 CBOR 编码后再被 Base64 编码的，因此我们需要额外对其进行 CBOR 解码。</p>\n<blockquote><p>CBOR (Concise Binary Object Representation, 简明二进制对象表示) 是一种多应用于物联网领域的编码方式，你可以将它看作体积更小、更方便物联网传输的二进制 JSON。大部分语言都可以找到对应的 CBOR 解码库。</p></blockquote>\n<p>我们当然不会手解 CBOR，直接来看看解开之后的样子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"none\",\r\n    attStmt: {},\r\n    authData: [211, 217, 43, 24, 199, ..., 97, 238, 166, 67, 107]\r\n}</pre>\n<p>这些键值的含义如下：</p>\n<ul>\n<li>\n<code>fmt</code>：标明证明的格式。WebAuthn 预定义了几种格式，分别为：\n<ul>\n<li>\n<code>none</code>：没有证明</li>\n<li>\n<code>packed</code>：为 WebAuthn 优化的证明格式</li>\n<li>\n<code>android-safetynet</code>：Android 使用的格式</li>\n<li>\n<code>android-key</code>：又是 Android 使用的格式</li>\n<li>\n<code>fido-u2f</code>：FIDO U2F 认证器使用的格式</li>\n<li>\n<code>tpm</code>：TPM 可信平台模块使用的格式</li>\n</ul>\n</li>\n<li>\n<code>attStmt</code>：证明对象，具体格式根据 <code>fmt</code> 的不同会有所不同</li>\n<li>\n<code>authData</code>：包含公钥、签名计数等来自认证器的数据</li>\n</ul>\n<p>诶，例子里的 <code>attStmt</code> 怎么是空的？还记得之前说的吗？大部分情况下，<strong>如果依赖方不要求证明，那么认证器不会签名挑战</strong>，于是 <code>fmt</code> 会变为 \"none\"，<code>attstmt</code> 会为空。如果不是高安全要求，我们可以只对这一种情况做支持。</p>\n<blockquote><p>注意，部分情况下 Firefox 会在不要求证明（即 <code>attestation</code> 为 \"none\"）时会返回 <code>fmt</code> 为 \"packed\" 的证明。<strong>这是符合规范的。</strong>此时认证器会进行自证明，你可以视情况进行处理。具体可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>对于非 \"none\" 的 <code>fmt</code> 我们稍后再谈，现在我们先来看看 <code>authData</code>。来复习一下 <code>authData</code> 的结构：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\" alt=\"authData 的结构\" width=\"1056\" height=\"384\" class=\"aligncenter size-full wp-image-2240\"></a>\n<p>对于它的解码比较简单粗暴，我们要做的就是根据图示将它切开，然后适当地转换类型。其中各部分的含义如下：</p>\n<ul>\n<li>\n<code>rpIdHash</code>：如其名，SHA-256 的 <code>rpId</code>，长度 32 字节</li>\n<li>\n<code>flags</code>：标识认证状态，长度 1 字节。其中 8 位分别为：\n<ul>\n<li>\n<code>ED</code>：是否有扩展数据</li>\n<li>\n<code>AT</code>：是否包含 <code>attestedCredentialData</code>。通常注册认证器时会包含 <code>attestedCredentialData</code>，而验证时不包含</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>\n<code>UV</code>：用户是否已验证</li>\n<li>保留位</li>\n<li>\n<code>UP</code>：用户是否在场</li>\n</ul>\n</li>\n<li>\n<code>signCount</code>：签名计数，长度 4 字节</li>\n<li>\n<code>attestedCredentialData</code>：包含公钥等凭据数据，变长。其结构如下：\n<ul>\n<li>\n<code>aaguid</code>：认证器的 AAGUID (Authenticator Attestation GUID)，对于同一型号的认证器，它们的 AAGUID 是相同的</li>\n<li>\n<code>credentialIdLength</code>：标识 <code>credentialId</code> 的长度，长度 2 字节</li>\n<li>\n<code>credentialId</code>：凭证 ID，和 <code>rawId</code> 一致，长度由 <code>credentialIdLength</code> 定义</li>\n<li>\n<code>credentialPublicKey</code>：CBOR 编码的 COSE 格式的凭证公钥，变长</li>\n</ul>\n</li>\n<li>\n<code>extensions</code>：扩展数据，变长，本文不讨论</li>\n</ul>\n<blockquote><p>出于隐私考虑，如果不要求证明，认证器会以 0 填充 AAGUID。</p></blockquote>\n<p>如果你的后端在使用 Node.js，这里有个工具函数可以帮你完成这一步（不考虑 <code>extensions</code>）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function parseAuthData(buffer){\r\n    let rpIdHash = buffer.slice(0, 32);\r\n    buffer = buffer.slice(32);\r\n  \r\n    let flagsBuf = buffer.slice(0, 1);\r\n    buffer = buffer.slice(1);\r\n\r\n    let flagsInt = flagsBuf[0];\r\n    let flags = {\r\n        up: !!(flagsInt &amp; 0x01),\r\n        uv: !!(flagsInt &amp; 0x04),\r\n        at: !!(flagsInt &amp; 0x40),\r\n        ed: !!(flagsInt &amp; 0x80),\r\n        flagsInt\r\n    }\r\n\r\n    let counterBuf = buffer.slice(0, 4);\r\n    buffer = buffer.slice(4);\r\n  \r\n    let counter = counterBuf.readUInt32BE(0);\r\n\r\n    let aaguid = undefined;\r\n    let credID = undefined;\r\n    let COSEPublicKey = undefined;\r\n\r\n    if(flags.at) {\r\n        aaguid = buffer.slice(0, 16);\r\n        buffer = buffer.slice(16);\r\n\r\n        let credIDLenBuf = buffer.slice(0, 2);\r\n        buffer = buffer.slice(2);\r\n\r\n        let credIDLen = credIDLenBuf.readUInt16BE(0);\r\n        credID = buffer.slice(0, credIDLen);\r\n\r\n        buffer = buffer.slice(credIDLen);\r\n        COSEPublicKey = buffer;\r\n    }\r\n\r\n    return {rpIdHash, flagsBuf, flags, counter, counterBuf, aaguid, credID, COSEPublicKey}\r\n}</pre>\n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>解开后，依赖方至少需要做四件事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>存储签名计数</li>\n<li>存储公钥</li>\n</ol>\n<blockquote><p>签名计数不一定从 0 开始。</p></blockquote>\n<p>对于公钥，也就是 <code>credentialPublicKey</code>，我们需要多一次 CBOR 解码，然后就可以得到类似这样的公钥：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    kty: \"EC\",\r\n    alg: \"ECDSA_w_SHA256\",\r\n    crv: \"P-256\",\r\n    x: \"ZGQALNfqo0L7HFYQHFHCS/X5db49z0ePnuQEs3w3X8w=\",\r\n    y: \"6qYxhnjYuez/Q8N6vX7nIIGfxFWdZ25NzQfZYuYOalA=\"\r\n}</pre>\n<p>然后可以选择适当的方法将其存储起来，之后的步骤本文就不再赘述了。现在，将目光拉回来，让我们看看包含证明的 <code>attestationObject</code> 是怎么样的。我们来看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"packed\",\r\n    attStmt: {\r\n        alg: -7,\r\n        sig: [48, 70, 2, 33, 0, ..., 132, 78, 46, 100, 21],\r\n        x5c: [\r\n            [48, 130, 2, 189, 48, 130, 1, 165, 160, 3, ..., 177, 48, 125, 191, 145, 24, 225, 169, 41, 248]\r\n        ]\r\n    },\r\n    authData: [211, 217, 43, 24, 199, ..., 158, 54, 87, 126, 54]\r\n}</pre>\n<p>这里有一个使用 \"packed\" 格式的证明。此时，<code>attStmt</code> 中包含三个值：</p>\n<ul>\n<li>\n<code>alg</code>：签名算法</li>\n<li>\n<code>sig</code>：签名值</li>\n<li>\n<code>x5c</code>：X.509 编码的证书链</li>\n</ul>\n<p>我们不会在这一节中详述对签名的验证。要了解更多信息，你可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。现在，让我们来看看如何处理验证过程中认证器发回的数据。我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"hmqdxPLit9...BWeVxZqdvU\",\r\n    type: \"public-key\",\r\n    rawId: \"hmqdxPLit9V...BWeVxZqdvU=\",\r\n    response: {\r\n        authenticatorData: \"09krGMcWTf...UFAAAABA==\",\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...XRobi5nZXQifQ==\",\r\n        signature: \"UsXZV3pvT3np8btj6V0g...WBkaqyt88DrD40qh+A==\",\r\n        userHandle: \"MmYxNWYzZjQyZjM...Tg2ZDY4NzhlNw==\"\r\n    }\r\n}</pre>\n<p><code>id</code>, <code>rawId</code> 和 <code>type</code> 和之前一样，这里就不再赘述了。让我们来看看 <code>response</code>。首先是 <code>clientDataJSON</code>，和之前的解法一样，要验证的内容也一样，只是 <code>type</code> 从 \"webauthn.create\" 变成了 \"webauthn.get\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"bnkd2CmrEuvKnAFXs2QlC3SKlg4XFvGtP4HJL1yEWyU\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.get\"\r\n}</pre>\n<p>然后是 <code>userHandle</code>。前面讲过，这是认证器在创建凭证时的用户 ID。如果用户在使用 U2F 认证器，很可能这一项为空，所以大部分情况下我们不关心这一项。</p>\n<p>接着来看 <code>authenticatorData</code>。这其实就是之前的 <code>attestedCredentialData</code>，只是这次不包含公钥。以相同的方式切开数据，我们应该可以得到 <code>rpIdHash</code>, <code>flags</code>和 <code>signCount</code> 三项。此时，依赖方至少需要做这三样事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>验证签名计数大于之前存储的计数，并更新存储的计数</li>\n</ol>\n<blockquote><p>如果签名计数比之前的小，那么这个认证器很可能是伪造的，应该中止验证并返回验证失败。同时，签名计数不一定每次按 1 递增，通常只要计数比此前的大就认为计数检查通过。</p></blockquote>\n<p>最后，我们来看 <code>signature</code>，也就是签名。不过这个签名不是简单的对挑战的签名，具体算法如图所示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\" alt=\"签名过程\" width=\"1034\" height=\"587\" class=\"aligncenter size-full wp-image-2231\"></a>\n<p>计算签名时，认证器会将 <code>authenticatorData</code> 与 <code>clientDataHash</code>（也就是 <code>clientDataJSON</code> 的 SHA-256 Hash）拼接起来，并使用对应的私钥签名。依赖方应该使用对应的公钥将其解密，并验证内容是否是 <code>authenticatorData</code> 与 <code>clientDataHash</code> 的拼接。这部分的计算不在本文的讨论范围内。</p>\n<p>最后，如果全部验证通过，返回验证成功。<span></span></p>\n<h2>验证认证器</h2>\n<p>WebAuthn 已经很安全了，但有的时候我们还要让它更安全一点。比如，如果用户在使用伪造的或是自制的认证器，认证器的安全性就得不到保证。此时，依赖方就需要验证认证器是否是可信的认证器。</p>\n<blockquote><p>这一过程仅发生在注册认证器时。此时，如果认证器验证通过，就可以存储公钥，后续步骤和之前描述的一致。</p></blockquote>\n<blockquote><p>再次说明，如果不是对安全性有极高的要求，向认证器索取证明以验证认证器是否可信是没有必要的。此外，验证认证器需要依赖方自行维护可信认证器列表，大大增加了维护的复杂性。</p></blockquote>\n<p>在调用 <code>navigator.credentials.create()</code> 时，我们可以将 <code>attestation</code> 设置为非 \"none\" 来向认证器索取证明。除无证明外，WebAuthn 定义了四种证明方式：</p>\n<ul>\n<li>Basic Attestation (Basic) ：基础的证明方式，认证器会使用认证器私钥签名</li>\n<li>Self Attestation (Self) ：自证明，认证器会使用凭证私钥签名</li>\n<li>Attestation CA (AttCA) ：认证器会使用多个证明私钥之一签名</li>\n<li>Elliptic Curve based Direct Anonymous Attestation (ECDAA) ：通过 <a href=\"https://en.wikipedia.org/wiki/Direct_Anonymous_Attestation\">DAA</a> 实现的匿名证明</li>\n</ul>\n<blockquote><p>和验证过程一样，这里签名的目标是 <code>authenticatorData</code> 和 <code>clientDataHash</code> 的连接。</p></blockquote>\n<p>还记得 <code>create()</code> 时 <code>attestation</code> 可选的三个值吗？这个值会决定认证器最终使用哪种方式进行证明。复习一下：</p>\n<ul>\n<li>\n<code>none</code>：大部分情况下认证器会选择不进行证明，部分认证器会进行自证明。此时 AAGUID 会被 0 填充</li>\n<li>\n<code>indirect</code>：认证器会试图通过替换 AAGUID 和选择合适的证明方式来进行匿名证明，具体方式由认证器选择</li>\n<li>\n<code>direct</code>：认证器会提供最直接的证明信息</li>\n</ul>\n<p>注意，大部分情况下，当认证器需要向依赖方证明自己可信时需要提供认证器公钥，<strong>这会触发浏览器提示，只有用户同意后认证器才会进行证明，否则认证器将不提供证明。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\" alt=\"浏览器提示\" width=\"446\" height=\"283\" class=\"aligncenter size-full wp-image-2217\"></a>\n<blockquote><p>为什么浏览器会说“安全密钥的品牌和型号”？事实上，为了避免用户通过认证器证书被跨依赖方追踪，FIDO 要求使用相同认证器证书的认证器的数量不能少于 100,000。于是大部分认证器厂商会选择<strong>让同一型号的认证器共用同一份证书。</strong>因此，浏览器的会询问用户是否同意“查看安全密钥的品牌和型号”。</p></blockquote>\n<blockquote><p>Android Safety Net 不会向用户询问是否同意，而是会静默进行证明。</p></blockquote>\n<p>当证明不为空时，依赖方收到数据后根据 <code>attestationObject.fmt</code> 的不同，需要选择不同的验证方式来验证认证器的可信情况。出于篇幅原因，这里我们不会讨论每一种 <code>fmt</code> 的验证方式，更多信息你可以查阅 <a href=\"https://www.w3.org/TR/webauthn/#defined-attestation-formats\">W3C 文档</a>。</p>\n<p>当 <code>fmt</code> 为 <code>packed</code> 时，<code>attestationObject.attStmt</code> 可能会有三种格式：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">// 自证明\r\n{\r\n    alg, // 算法\r\n    sig // 签名\r\n}\r\n// 基础或证明 CA 证明\r\n{\r\n    alg,\r\n    sig,\r\n    x5c // X.509 证书链\r\n}\r\n// 椭圆曲线证明\r\n{\r\n    alg,\r\n    sig,\r\n    ecdaaKeyId // ECDAA-Issuer 公钥标识符\r\n}</pre>\n<p>此时，依赖方需要检查证书符合预期格式并检查证书是否在可信链上。首先，如果证明中既没有 <code>ecdaaKeyId</code> 也没有 <code>x5c</code>，就说明这个证明使用的是自证明，只需使用认证器提供的公钥验证即可；如果有 <code>x5c</code>，那么就需要验证 <code>x5c</code> 中的证书是否在可信链上。将 <code>x5c</code> 中的每个证书以 Base64 编码，按 64 个字符切开，并在头尾加上 <code>-----BEGIN CERTIFICATE-----</code> 和 <code>-----END CERTIFICATE-----</code>就能得到一个证书字符串了。之后，依赖方需要验证证书是否可信。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function base64ToPem(b64cert){\r\n    let pemcert = '';\r\n    for(let i = 0; i \n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>至于 <code>ecdaaKeyId</code>，由于目前应用较少，处理方法可能需要你另寻资料了。检查证书的具体步骤已经超出了本文的范围，具体可以查阅<a href=\"https://medium.com/@herrjemand/verifying-fido2-packed-attestation-a067a9b2facd\">这篇文章</a>（英文）。</p>\n<blockquote><p>你可以在 <a href=\"https://fidoalliance.org/metadata/\">FIDO Metadata Service</a> 找到各大厂商认证器的可信证书链。</p></blockquote>\n<p>当在 Android 上调起 WebAuthn 时，大部分情况下 <code>fmt</code> 将会为 <code>safety-net</code>。此时 <code>attestationObject.attStmt</code> 的结构会是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    ver: \"200616037\",\r\n    response: {\r\n        type: \"Buffer\",\r\n        data: [101, 121, 74, 104, 98, ..., 115, 104, 104, 82, 65]\r\n    }\r\n}</pre>\n<p>此时，<code>clientDataJSON</code> 中还会出现 <code>androidPackageName</code> 键，值是调起 WebAuthn 验证的应用的包名，如 Chrome 就是 \"com.android.chrome\"。</p>\n<p>在这个证明中，<code>data</code> 其实是一个 JWT 字符串，我们可以将它编码为字符串并将其按照 JWT 进行解码（别忘了验证 JWT 签名）。最终我们会得到一个类似这样的 Payload：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    nonce: \"0QAurN4F9wik6GEkblDJhGuf4kuaqZn5zaaxlvD1hlA=\",\r\n    timestampMs: 1584950686460,\r\n    apkPackageName: \"com.google.android.gms\",\r\n    apkDigestSha256: \"2BQHno+bmWWwdLUYylS8HLt5ESJzci3nt2uui71ojyE=\",\r\n    ctsProfileMatch: true,\r\n    apkCertificateDigestSha256: [\r\n        \"8P1sW0EPicslw7UzRsiXL64w+O50Ed+RBICtay2g24M=\"\r\n    ],\r\n    basicIntegrity: true,\r\n    evaluationType: \"BASIC\"\r\n}</pre>\n<p>其中包含了有关设备状态的一些信息。比如说，如果 <code>ctsProfileMatch</code> 为 <code>false</code>，那么该设备很有可能被 root 了。对于高安全要求的场景，我们可以视情况进行验证。</p>\n<p>同时我们可以在 JWT Header 中验证证明的有效性。我们应该能取得这样的 Header：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    alg: \"RS256\",\r\n    x5c: [\r\n        \"MIIFkzCCBHugAwIBAgIR...uvlyjOwAzXuMu7M+PWRc\",\r\n        \"MIIESjCCAzKgAwIBAgIN...UK4v4ZUN80atnZz1yg==\"\r\n    ]\r\n}</pre>\n<p>这里的结构就和上方的 <code>x5c</code> 验证类似了。具体步骤可以参考<a href=\"https://medium.com/@herrjemand/verifying-fido2-safetynet-attestation-bd261ce1978d\">这篇文章</a>（英文）。</p>\n<p>其他所有格式的验证方式也都可以在<a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">这篇文章</a>（英文）中找到。<span></span></p>\n<h2>无用户名登录</h2>\n<p>认证器已经代替了密码，可是这还不够！在进行第一因素认证（即使用 WebAuthn 登录）时，我们还是需要输入用户名，然后才能进行身份认证。懒惰是第一生产力，我们能不能不输入用户名就进行身份认证呢？实际上，大部分认证器都允许我们无用户名登录。<strong>而这一特性的核心就是 Resident Key 客户端密钥驻留。</strong></p>\n<p>你可以思考一下，为什么普通的 WebAuthn 为什么不能实现无用户名登录？事实上，大部分认证器为了实现无限对公私钥，会将私钥通过 Key Warp 等技术加密后包含在凭证 ID 中发送给依赖方，这样认证器本身就不用存储任何信息。不过，这就导致需要身份认证时，依赖方必须通过用户名找到对应的凭证 ID，将其发送给认证器以供其算出私钥。</p>\n<blockquote><p>Yubikey 实现了一个基于 HMAC 的算法，认证器可以在私钥不离开认证器的前提下（常规的 Key Warp 算法中实际上私钥离开了认证器）通过一些输入和凭证 ID 重新计算私钥，你可以阅读<a href=\"https://www.yubico.com/blog/yubicos-u2f-key-wrapping/\">这篇文章</a>了解更多。</p></blockquote>\n<blockquote><p>客户端通过凭证 ID 查找对应认证器的算法根据系统的不同是不同的。通常凭证 ID 中会包含认证器信息，因此系统可以通过凭证 ID 找到对应的认证器。</p></blockquote>\n<p>要避免输入用户名，我们可以要求认证器将私钥在自己的内存中也存储一份。这样，依赖方无需提供凭证 ID，认证器就可以通过依赖方 ID 找到所需的私钥并签名公钥。以下是具体流程：</p>\n<p>注册时：</p>\n<ol>\n<li>依赖方请求新建凭证，同时要求启用客户端密钥</li>\n<li>认证器生成一对公私钥，并将私钥存储在永久内存中且与依赖方 ID 及用户 ID 绑定，随后将公钥发送给依赖方以供存储</li>\n<li>依赖方将用户 ID 即公钥与用户绑定</li>\n</ol><p>验证时：</p>\n<ol>\n<li>依赖方请求验证，但不必提供除依赖方 ID 以外的更多信息</li>\n<li>用户选择认证器</li>\n<li>认证器根据依赖方 ID 找到对应私钥</li>\n<li>如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录</li>\n<li>确定私钥后，认证器签名挑战并将其返回，同时返回用户 ID</li>\n<li>依赖方通过用户 ID 找到对应用户并用对应公钥检查签名，正确则允许对应用户登录</li>\n</ol><blockquote><p>可以看到，这个特性同时要求认证器存储用户 ID，即上面提到过的 <code>userHandle</code>。依赖方需要根据此信息找到对应用户，因此不支持 <code>userHandle</code> 的 U2F 认证器无法进行无用户名登录。</p></blockquote>\n<blockquote><p>如之前所说，<strong>认证器能永久存储的私钥数量是有限的</strong>，因此只应在真正需要无用户名登录的时候启用此特性。</p></blockquote>\n<blockquote><p>目前暂时没有办法检测认证器是否支持客户端密钥驻留，因此在无用户名验证失败时应 fallback 至常规的 WebAuthn 验证，即向用户询问用户名。</p></blockquote>\n<p>现在让我们来看看如何实现这一特性吧。首先，调用 <code>navigator.credentials.create()</code> 时我们需要注意两个参数：<code>requireResidentKey</code> 必须为 <code>true</code>，<code>userVerification</code> 必须为 \"required\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"5-6\">navigator.credentials.create({\r\n    publicKey: {\r\n        ...\r\n        authenticatorSelection: {\r\n            requireResidentKey: true,\r\n            userVerification: \"required\"\r\n            ...\r\n        },\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Windows Hello <strong>似乎</strong>会存储所有已注册的凭据，因此无论是否指定 <code>requireResidentKey</code>，你都可以通过 Windows Hello 进行无用户名登录。</p></blockquote>\n<p>随后，浏览器会询问用户是否允许认证器存储私钥。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\" alt=\"浏览器提示\" width=\"445\" height=\"285\" class=\"aligncenter size-full wp-image-2208\"></a>\n<p>如果用户同意，认证器会存储私钥，并和普通的 WebAuthn 一样返回信息。不过，依赖方收到数据之后，只需将公钥、用户 ID 与用户关联起来，而不必再将凭证 ID 与用户关联起来。至此注册完成。</p>\n<p>之后，在用户请求登录时，无需再向依赖方提供用户名。同时在传入 <code>navigator.credentials.get()</code> 的参数中也有两个需要注意：<code>userVerification</code> 必须为 \"required\"，同时 <code>allowCredentials</code> 必须为空。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"4-5\">navigator.credentials.get({\r\n    publicKey: {\r\n        ...\r\n        userVerification: \"required\",\r\n        allowCredentials: [],\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Android 暂不支持无用户名验证，空的 <code>allowCredentials</code> 会导致浏览器返回 <code>NotSupportedError</code> 错误。</p></blockquote>\n<p>此时，认证器会根据依赖方 ID 找到对应的私钥。如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录。用户选择后，认证器就会使用对应的私钥签名挑战并将其返回。此时，<code>userHandle</code> 一定不为空。</p>\n<p>依赖方收到数据后，需要将 <code>userHandle</code> 作为用户 ID 找到对应的用户，并使用对应的公钥验证签名。如果验证成功，则认为对应的用户身份认证成功，依赖方可以允许其登录。至此验证结束。</p>\n<blockquote><p>有的时候你可能会需要清除认证器中的密钥。绝大多数认证器都提供了对应的软件以供清除存储的密钥，但大部分情况下这会重置整个认证器，这意味着相关认证器此前的所有凭证均会失效。因此建议不要将日常使用的认证器作为开发测试用的认证器。</p></blockquote>\n<h2>从 U2F 认证迁移</h2>\n<p>如果你的服务此前提供了 U2F 第二因素认证，你可能会希望在将依赖方从 U2F 升级到 WebAuthn 时用户此前注册的 U2F 认证器仍然可用而无需重新注册。由于 WebAuthn 向后兼容 U2F 设备，用户是可以继续使用原有的 U2F 认证器的。不过，由于 WebAuthn 的依赖方 ID 与 U2F 的 <code>appid</code> 并不一定相同，你需要将原有的 U2F <code>appid</code> 随 WebAuthn 流程一起传递给认证器，认证器才能使用正确的私钥进行响应。</p>\n<p>要实现这一点，我们只需要在注册及认证仪式中使用 WebAuthn 的 <code>appid</code> 扩展。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    appid: \"https://example.com\" //U2F appid\r\n}</pre>\n<p>此时认证器便可以得到正确的私钥，之后的流程与正常情况一致；依赖方除了正常的 WebAuthn 流程外，不需要再做任何其它操作。</p>\n<h2>拓展阅读</h2>\n<p>我们的 WebAuthn 之旅到这里就真的结束了。不过，你仍然可以自行探究，了解更多。<strong>本文只是一个粗浅的使用指南</strong>，而被称为“Web 身份认证的未来”的 WebAuthn 的深层还要很多细节值得我们挖掘学习，不过本文不会再继续讨论了。</p>\n<p>如果你想了解更多关于 WebAuthn 的信息，最好的方法是直接阅读 <a href=\"https://www.w3.org/TR/webauthn\">W3C 规范</a>。此外，Yubico 也提供了不错的 <a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn 文档</a>。</p>\n<p>要了解更多认证器存储凭证的信息，你可以阅读<a href=\"https://duo.com/labs/tech-notes/how-security-keys-store-credentials\">这篇文章</a>（英文）。</p>\n<p>如果你想了解更多 Android Safety Net 是怎样运作的，可以观看<a href=\"https://youtu.be/8lv_9mydrjg\">这个视频</a>，并通过 <a href=\"https://developer.android.com/training/safetynet/attestation\">Google 的文档</a>了解 Android Safety Net 的更多信息。</p>\n<p>如果你想方便地调试 WebAuthn，<a href=\"https://webauthn.me/\">webauthn.me</a> 提供了一个非常直观方便的<a href=\"https://webauthn.me/debugger\">调试器</a>。</p>\n<h1>参考资料</h1>\n<p><a href=\"https://www.w3.org/TR/webauthn\">WebAuthn Level 1 规范 - W3C</a><br><a href=\"https://github.com/w3c/webauthn\">WebAuthn Level 2 草案 - W3C</a><br><a href=\"https://blog.techbridge.cc/2019/08/17/webauthn-intro/\">一起来了解Web Authentication - TechBridge 技术共笔部落格</a><br><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\">Introduction to WebAuthn API - Medium</a><br><a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">WebAuthn/FIDO2: Verifying responses - Medium</a><br><a href=\"https://obeta.me/posts/2019-03-01/WebAuthn%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8\">WebAuthn介绍与使用 - obeta</a><br><a href=\"https://webauthn.io/\">webauthn.io</a><br><a href=\"https://webauthn.guide/\">webauthn.guide</a><br><a href=\"https://webauthn.me/\">webauthn.me</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion\">Attestation and Assertion - MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Authentication_API\">Web Authentication API - MDN</a>（顺便翻译了一半）<br><a href=\"https://fidoalliance.org/fido-technotes-the-truth-about-attestation/\">FIDO TechNotes: The Truth about Attestation - FIDO Alliance</a><br><a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn Developer Guide - Yubico</a><br><a href=\"https://en.wikipedia.org/wiki/WebAuthn\">WebAuthn - Wikipedia</a><br><a href=\"https://techcommunity.microsoft.com/t5/identity-standards-blog/all-about-fido2-ctap2-and-webauthn/ba-p/288910\">All about FIDO2, CTAP2 and WebAuthn - Microsoft Tech Community</a><br><a href=\"https://webauthn-doc.spomky-labs.com/\">Webauthn Framework</a><br><a href=\"https://zhuanlan.zhihu.com/p/25279015\">如何开发支持 FIDO U2F 登录的网站 - 知乎专栏</a><br></p></pre>\n","link":"https://flyhigher.top/develop/2160.html"},{"title":"NLP 找门：用朴素贝叶斯进行文本分类","date":"2020-01-29 11:39:58","description":"\n<blockquote>\n<p>有一天，神收到了一封垃圾邮件，于是世界上就有了朴素贝叶斯算法。</p>\n<footer>——我瞎编的</footer>\n</blockquote>\n<p>为什么这篇文章的标题是 NLP 找门呢？因为如果你看完了这篇文章，你就可以<strong>准备入门</strong>自然语言处理 (<strong>N</strong>atural <strong>L</strong>anguage <strong>P</strong>rocessing) 了。我会把这篇文章当作一篇彻彻底底的 NLP 入门文章来写，尽量避免“专业高端”词汇和“全是奇怪符号”的式子，这样<strong>只要你有高中数学基础</strong>，就能毫无压力地看完这篇文章，学会使用朴素贝叶斯分类算法分类文本。</p>\n<p>让我们开始吧。</p>\n<h1>所以，啥是朴素贝叶斯？</h1>\n<p>简单来说，朴素贝叶斯 (Naïve Bayes) <strong>是一个简单但高效的分类算法</strong>，在进行不复杂的文本分类时高效且拥有不低的准确度，判断垃圾邮件就是用朴素贝叶斯进行文本分类的一个经典例子。当然朴素贝叶斯分类不仅能用在 NLP 中，在许多分类问题中朴素贝叶斯也有非常好的效果，但我们今天只关注它在 NLP 中的应用。</p>\n<p>要了解朴素贝叶斯，我们要先来了解一下贝叶斯定理。</p>\n<blockquote>\n<p>每增加一个数学公式都会使读者减半。</p>\n<footer>——霍金</footer>\n</blockquote>\n<p>那么，就让我们先来看看贝叶斯定理的公式吧（笑</p>\n<p>$$P(A|B) = \\frac{P(AB)}{P(B)} = \\frac{P(B|A)P(A)}{P(B)}$$</p>\n<p>其实还是很简单的，运用高中的条件概率知识就能理解。本质上，贝叶斯定理给出了一种方法，使得我们可以在 \\(P(A|B)\\) 和 \\(P(B|A)\\) 之间互相转换，因为通常情况下它们是不一样的。</p>\n<p>要更好地理解，请考虑这样一个例子：</p>\n<blockquote><p>假设有一个学校图书馆，图书管理员正为找不到某本书而发愁。已知老师有 70% 的意愿借走这本书，而是学生的意愿是 30%，这个学校的师生比例是 1:10，那么借走这本书的人是老师的概率有多大？</p></blockquote>\n<p>设学校总人数为 \\(T\\)，我们可以很容易地写出这样的一个式子：</p>\n<p>$$\\begin{align} P &amp; = \\frac{T\\cdot\\frac{1}{11}\\cdot 70\\%}{T\\cdot\\frac{1}{11}\\cdot 70\\%+T\\cdot\\frac{10}{11}\\cdot 30\\%} \\\\ &amp; = \\frac{70\\%}{70\\%+10\\times30\\%} \\\\ &amp; = \\frac{7}{37} \\end{align}$$</p>\n<p>这就是贝叶斯定理了！等等，你可能会挠挠头，这哪里是贝叶斯了？别急，如果我们把最上面的式子换个字母的话...</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>在这里，\\(H\\) 指 Hypothesis，即假设，而 \\(E\\) 指 Evidence，即证据。这样，这个式子就很好理解了，在我们上面的例子里，借走书是证据，那么 \\(P(E)\\) 就是某个人选择借走这本书的概率；这个人是老师是假设，那么这个人是老师的概率是 \\(P(H)\\)。<strong>注意这里的概率指在学校中抽一个人是老师的概率，并不是“在借走书的前提下”这个人是老师的概率</strong>，而“在借走书的前提下”这个人是老师的概率应该是 \\(P(H|E)\\)，也正是我们要求的概率。同样地，而“这个人是老师”的前提下借走书的概率就是 \\(P(E|H)\\) 了。</p>\n<p>那么再来看看上面我们凭小学知识就列出的计算式，如果把里面的具体数据换成概率来表示的话，这个式子就会变成...</p>\n<p>$$P(H|E) = \\frac{T\\cdot P(E|H)P(H)}{T\\cdot P(E|H)P(H) + T\\cdot P(E|\\neg H)P(\\neg H)}$$</p>\n<p>好吧，这里解释一下，\\(\\neg\\) 符号表示“非”，所以 \\(P(E|\\neg H)\\) 表示在“这个人不是老师”的前提下借走书的概率。而 \\(T\\cdot P(E|H)P(H)\\) + \\(T\\cdot P(E|\\neg H)P(\\neg H)\\)，即“可能借走书的老师的数量 + 可能借走书的学生的数量”，就是“可能借走书的人的数量”了，也就是 \\(T\\cdot P(E)\\)。上下消去 \\(T\\)，我们就能得到上面的式子了。</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>这就是贝叶斯了定理。如果你还是不太清楚，可以去看看 3Blue1Brown 的<a href=\"https://www.bilibili.com/video/av84799361\">这个视频</a>，图形化的讲解会清晰很多。</p>\n<p>这里我要提一下这个式子里各部分的专有名称了（“专业高端”词汇警告），你可以不记住，直接看后面。</p>\n<ul>\n<li>\\(P(H|E)\\) 叫做 \\(H\\) 的<strong>后验概率</strong>，反之亦然</li>\n<li>\\(P(H)\\) 叫做 \\(H\\) 的<strong>先验概率</strong>，反之亦然</li>\n<li>特别地，我们把 \\(P(E|H)\\) 称作<strong>“似然值”</strong>，即 likelihood</li>\n</ul>\n<p>那什么是朴素贝叶斯呢？按上面所说的，朴素贝叶斯是一种分类算法。简单来说，朴素贝叶斯将一个对象的各个特征考虑为互相独立，然后根据这些特征的概率的乘积来判断对象所属的分类。基本原理如下：</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)} \\propto P(E|H)P(H) = P(H)\\prod_{i}P(W_i|H)$$</p>\n<p>在这里，\\(W_i\\) 指某一对象的第 \\(i\\) 个特征，对于文本分类来说，这就是一段文本中的某个单词。</p>\n<p>朴素贝叶斯之所以“朴素”，是因为它要求<strong>各个特征间是独立的</strong>，在文本分类中也就是各个单词之间互不干扰。虽然思路简单的代价是适用范围变窄，不过由于这样的简化在很多情况下已经足够了，因此实际上朴素贝叶斯的应用范围非常广。<del>你看朴素贝叶斯 <strong>N</strong>aïve <strong>B</strong>ayes 的缩写都是 NB 了，能不厉害吗（逃</del></p>\n<h1>那么，咋分类啊</h1>\n<p>看来你这下完全听懂了呢（笑），是时候看看如何在 NLP 中应用朴素贝叶斯了。和上面一样，我们用一个具体的例子来说明。我们的目标是让电脑学会分类美国共和党和民主党的演讲稿，由于两个党派的演讲风格不同，所以这样的分类在理论上是可行的。</p>\n<div class=\"wp-block-file\">\n<a href=\"https://acdn.flyhigher.top/nlp/material.zip\" download>material.zip</a><a href=\"https://acdn.flyhigher.top/nlp/material.zip\" class=\"wp-block-file__button\" download>下载</a>\n</div>\n<p>上面我们要用到的数据集，你可以下载下来一起动手玩一玩。先说一下数据集的数据结构吧，压缩包里有两个文件，<code>train.txt</code> 将会被当作训练数据集，而 <code>test.txt</code> 则会作为训练结束后的验证数据集。两个文本文件里数据的结构是类似的，就像这样：</p>\n<pre class=\"EnlighterJSRAW\">BLUE WELL I AM SO HONORED AND PERSONALLY UNKNOWNWORD TO BE HERE...\r\nRED THANK YOU . THIS IS QUITE AN INSTITUTION . IT'S GOOD TO BE...</pre>\n<p>每行都是一篇演讲稿，每行的第一个单词指明了这篇演讲稿所属的党派，<code>RED</code> 指共和党，而 <code>BLUE</code> 指民主党。所有单词和符号都已经被转为大写并由空格分隔方便处理。<code>train.txt</code> 有共和党演讲稿和民主党演讲稿各 23 篇，<code>test.txt</code> 有 6 篇共和党演讲稿，12 篇民主党演讲稿。</p>\n<p>明白了？那我们就开始吧。</p>\n<h2>捋捋思路</h2>\n<p>首先，我们需要考虑如何在文本分类中应用朴素贝叶斯。很简单，按朴素贝叶斯的思路，<strong>计算每个词在某一分类下的出现概率，然后将某篇文章的所有词的概率相乘，再乘以该分类的先验概率，就可以得到某篇文章在某一分类下的概率。</strong></p>\n<p>$$P(Class|Article) = P(Class)\\prod_{i}P(Word_i|Class)$$</p>\n<p>各个分类概率都计算完成后，概率最高的那个分类就是这篇文章可能所属的分类。这个思路的核心就是用词决定了文本风格，文本的不同类别用词会有差异，只要能量化这些差异就可以分类文本。在我们的例子中，我们可以从 <code>train.txt</code> 中统计各个词汇的出现情况，然后用 <code>test.txt</code> 中的数据按上面的算法验证我们算法的准确性。</p>\n<p>这个思路很简单也很清晰，但还有一些问题需要解决。<strong>第一，有的时候，我们的测试数据集中可能会出现一个在训练数据集中没有出现过的词语。这个时候，朴素贝叶斯的计算结果会是 0。</strong>如果我们把 0 乘进式子中，那就别想得到正常的结果了。所以，我们还需要对计算某一单词在某一分类中的式子稍加改进。使用拉普拉斯平滑，就可以避免出现概率为 0 的情况。别被名字吓到，拉普拉斯平滑是一种非常简单的平滑方法：在分子上 +1，在分母上加整个取值范围，这样就可以给整个分式加上非常微小的偏移，避免出现 0。</p>\n<p>$$\\begin{align} P(Word_i|Class) &amp; = \\frac{Word_iCountInClass}{AllWordCountInClass} \\\\ &amp; \\approx \\frac{Word_iCountInClass + 1}{AllWordCountInClass + UniqueWordCount} \\end{align}$$</p>\n<p><strong>第二，对于长文本，大部分词语在某一分类中的出现概率是远小于 1 的，加上长文本词汇量大，往往概率相乘的结果会非常小。</strong>受限于计算机处理浮点数的原理，精确处理这么小的数字是很麻烦的。幸好，运用一些简单的数学知识就可以将其转化为更精确的表达，<strong>那就是取对数。</strong></p>\n<p>首先，将概率计算结果取对数并不影响我们的计算结果。因为取对数是一个单调递增的操作，而我们计算概率只是为了排序选择概率最高的分类，因此取对数是不影响我们排序的。而把多项式取对数，等于把多项式的每一项取对数后相加。所以我们有：</p>\n<p>$$\\lg{\\Big(P(Class)\\prod_{i}P(Word_i|Class)\\Big)} = \\lg{P(Class)} + \\sum_i\\lg{P(Word_i|Class)}$$</p>\n<p>大部分情况下，在每一次取对数的时候，要取对数的数字的大小，即 \\(P(Word_i|Class)\\) 尚还在计算机能处理的范围内，<strong>因此我们可以放心地使用取对数的方法</strong>，避免计算机精度不够影响结果。</p>\n<p><strong>第三就是在某些情况下，可能会有部分词语干扰计算结果</strong>，如 and, is 这类的被大量使用的中性词。如果希望得到更好的结果，我们可以维护一个停用词表，在计算时排除停用词即可。或者，我们可以在计算完每个单词的出现数量后，排除数量最多的前 \\(N\\) 个单词，避免这些单词过多地影响计算。</p>\n<h2>写点代码</h2>\n<p>现在我们终于可以开始实战，写点代码了。我会用简单的 Python 来表达思路。好了，理一理思绪，第一步我们要做的，是统计训练数据集中的用词情况。具体来说，根据上面的思考，我们需要统计的有：</p>\n<ul>\n<li>每个单词在各分类中出现的数量</li>\n<li>各分类中的不重复词数量</li>\n</ul>\n<p>用 Python 简单表示如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\"># 读入数据过程略...\r\ndata_raw = \"读入的数据\".split('\\n') # 按行分隔\r\ndata_blue = []\r\ndata_red = []\r\nword_count_blue = {}\r\nword_count_red = {}\r\n\r\nfor line_data in data_raw:\r\n    word_list = line_data.split(\" \") # 分隔单词\r\n    if word_list[0] == \"BLUE\":\r\n        for i in range(1,len(word_list)):\r\n            if not is_excluded(word_list[i]): # 判断是否为停用词\r\n                data_blue.append(word_list[i])\r\n                # 统计单词出现次数\r\n                word_count_blue.setdefault(word_list[i], 0)\r\n                word_count_blue[word_list[i]] += 1\r\n    elif word_list[0] == \"RED\":\r\n        # Class = red 时同理...\r\n\r\n#统计非重复词\r\nunique_words_blue = list(set(data_blue))\r\nunique_words_red = list(set(data_red))</pre>\n<p>训练过程到这里就结束了，计算机已经知道了各政党演讲的用词习惯。很简单吧？接下来我们就要使用测试数据集来测试准确度了。<strong>这里开始就涉及到朴素贝叶斯的计算了</strong>，可能会稍微复杂一点点。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">import math\r\n#读入测试数据过程略...\r\ntest_data_raw = \"读入的数据\".split('\\n') # 按行分隔\r\ntest_data = []\r\n\r\nfor line_data in test_data_raw:\r\n    if line_data[0] == \"BLUE\":\r\n        content_data = line_data.split(\" \").pop(0)\r\n        test_data.append({\"class\": \"blue\", \"content\": content_data})\r\n    elif line_data[0] == 'RED':\r\n        # ...\r\n\r\nfor line_data in test_data:\r\n    posibility_blue = 0\r\n    for word in line_data[\"content\"]:\r\n        # 计算各单词概率，取对数后相加，使用了拉普拉斯平滑\r\n        if word in word_count_blue:\r\n            posibility_blue += math.log((word_count_blue[word]+1)/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n        else:\r\n            posibility_blue += math.log(1/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n    # 最后加上该分类概率的对数\r\n    posibility_blue += math.log(len(data_blue)/(len(data_blue)+len(data_red)))\r\n\r\n    # 计算 Red 同理...</pre>\n<p>计算完成后，我们就得到每篇演讲稿在各分类下的概率了。之后，简单的比较就能得出推断的分类：如果 \\(P(Red|Article)\\) 大于 \\(P(Blue|Article)\\)，那么这篇演讲稿就更可能是共和党的演讲稿，反之则是民主党的演讲稿。</p>\n<p>很好理解吧？那么这么简单的思路，准确性怎么样呢？对于我们的例子，这是我设置了个别停用词后的结果：</p>\n<pre class=\"EnlighterJSRAW\">+-----+-------+--------------+--------------+-------+-------+\r\n|   ID|  Class|        P(Red)|       P(Blue)|  Guess| Status|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|    1|   Blue|  -23204.68377|  -22998.67066|   Blue|      √|\r\n|    2|   Blue|  -16438.44625|  -16137.48257|   Blue|      √|\r\n|    3|   Blue|  -33468.81214|  -32567.61801|   Blue|      √|\r\n|    4|   Blue|    -8606.2193|   -8601.50426|   Blue|      √|\r\n|    5|   Blue|  -12430.97436|  -11935.70662|   Blue|      √|\r\n|    6|   Blue|  -44033.02883|  -43877.55367|   Blue|      √|\r\n|    7|   Blue|   -16947.2851|  -16758.57542|   Blue|      √|\r\n|    8|   Blue|  -26957.26997|  -26889.62444|   Blue|      √|\r\n|    9|   Blue|  -27503.73985|  -27249.21828|   Blue|      √|\r\n|   10|   Blue|   -20528.4457|   -19991.1248|   Blue|      √|\r\n|   11|   Blue|  -20337.96493|  -19860.12831|   Blue|      √|\r\n|   12|   Blue|  -28409.28489|  -28118.98017|   Blue|      √|\r\n|   13|    Red|  -13756.01015|  -14488.11751|    Red|      √|\r\n|   14|    Red|  -17221.22732|  -17710.15936|    Red|      √|\r\n|   15|    Red|  -17397.45136|  -17899.98659|    Red|      √|\r\n|   16|    Red|  -10724.69095|  -11092.77837|    Red|      √|\r\n|   17|    Red|  -10402.40027|  -10859.48681|    Red|      √|\r\n|   18|    Red|   -9371.53792|    -9669.6769|    Red|      √|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|                                      Total: 18/18, 100.0% |\r\n+-----------------------------------------------------------+</pre>\n<p><strong>100% 的准确率哦！</strong>事实上，对于我们的这个例子，就算不设置停用词，我们仍能达到 100% 的分类准确率。朴素贝叶斯分类的确很 NB 呢。</p>\n<h1>更进一步</h1>\n<p>我们的探索到这里就结束了，但如果你有兴趣，完全可以继续探索下去。我们的例子是一个非常简化的例子，在实际情况中，还有很多问题需要解决。比如，对于中文及类似语言，不存在拉丁语系的天然分词结构，而朴素贝叶斯的文本分类是基于单词的，那么<strong>中文的分词就会是个问题；</strong>再比如，对于朴素贝叶斯分类来说，<strong>词语之间的顺序是不影响分类结果的</strong>，但这就会导致“今天心情很好，但昨天不好”和“昨天心情很好，但今天不好”在朴素贝叶斯看来是一样的，要想获得更好的结果，我们必须<strong>考虑词语的顺序。</strong></p>\n<p>这些问题，今天我们就不再深究了，但你可以自己探索。比如，引入思路同样很简洁的马尔科夫链，我们就可以让计算机学会考虑词语间的顺序，不过那就会是另一个话题了。</p>\n","link":"https://flyhigher.top/develop/1989.html"},{"title":"MDx 中增强页面可访问性的细节","date":"2020-01-25 16:45:04","description":"\n<blockquote><p>这篇文章本来是打算发在 <a href=\"https://mdxblog.flyhigher.top/\">MDx Blog</a> 的，不过写到后来发现这篇文章相对来说还是有价值的，于是就将这篇文章转移到了无垠，MDx Blog 则不再发表这篇文章。</p></blockquote>\n<p>从 MDx 开发之初，增强页面的可访问性就被列为了一个重要目标。从 HTML 语义化，到 ARIA 地标，再到 <code>prefers-reduced-motion</code>，随着浏览器对于增强页面可访问性的支持功能越来越多，MDx 也在不断地更新，让更多的人都能毫无困难地浏览、查看由 MDx 渲染的网页。本文会详细说明一些 MDx 中增强页面可访问性的细节，<strong>如果你希望增强自己开发的网页的可访问性，本文可能会对你有所帮助。</strong></p>\n<h1>基础性增强</h1>\n<p>增强可访问性，最重要也是最基础的一点就是 HTML 语义化。通过使用 HTML 5 语义化标签和 ARIA Role 标签，我们可以很方便地<strong>将整个网页在语义上分为几部分，而这将有效地改善屏幕阅读器对网页的分析质量，使视力障碍用户更好地浏览网页。</strong></p>\n<h2>HTML 语义化</h2>\n<p><strong>HTML 语义化属于增强页面可访问性的基础中的基础。</strong>通过使用语义化的 HTML 标签，我们可以方便地为网页中的各部分标记功能而不影响页面样式。随着符合 HTML 5 的现代化网页成为主流，语义化标签已被很大一部分网站所支持，我也不过多赘述了。就举几个常用的“地标性”标签吧：</p>\n<ul>\n<li>\n<code>header</code> 标签标记页眉，默认样式同 <code>div</code>，不要把它和 <code>head</code> 搞混了</li>\n<li>\n<code>main</code> 标签标记页面的主要内容，默认样式同 <code>div</code>\n</li>\n<li>\n<code>article</code> 标签标记文章（在 HTML 5 中它指任何独立或可复用的文本），默认样式同 <code>div</code>\n</li>\n<li>\n<code>footer</code> 标签标记页脚，默认样式同 <code>div</code>\n</li>\n<li>\n<code>nav</code> 标签标记页面导航栏区域，默认样式同 <code>div</code>\n</li>\n<li>\n<code>aside</code> 标签标记侧栏，默认样式同 <code>div</code>\n</li>\n<li>\n<code>section</code> 标签标记“一组内容”，你可以把它看作是划定网页中一块区域的通用标签，默认样式同 <code>div</code>\n</li>\n</ul>\n<p>只要用这些标签替代 <code>div</code> 而不是无脑使用 <code>div</code> 就能提高页面的可访问性。MDx 使用了这些标签来增强页面的可访问性。</p>\n<h2>下一步，ARIA</h2>\n<p>有的时候，出于一些原因，我们没法使用语义化的 HTML 标签，或者没有合适的语义化标签来标记内容，这时候<strong>我们就需要使用 ARIA (Accessible Rich Internet Applications，可访问的富互联网应用)。</strong>ARIA 的基础用法很简单，只要在相应元素上加上 <code>role</code> 属性指定该元素的功能即可。下面是一个简单的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;div role=\"navigation\"&gt;\r\n  &lt;ul&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page A&lt;/a&gt;&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page B&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page C&lt;/a&gt;&lt;/li&gt;\r\n  &lt;/ul&gt;\r\n&lt;/div&gt;</pre>\n<p>通过 <code>role=\"navigation\"</code>，我们把一个 <code>div</code> 标记为了导航栏区域。实际上，对屏幕阅读器来说，这和 <code>nav</code> 标签在语义上是一致的。上一节中的例子都可以分别用以下 ARIA Role 表示：</p>\n<ul>\n<li><code>role=\"heading\"</code></li>\n<li><code>role=\"main\"</code></li>\n<li><code>role=\"article\"</code></li>\n<li><code>role=\"contentinfo\"</code></li>\n<li><code>role=\"navigation\"</code></li>\n<li><code>role=\"complementary\"</code></li>\n<li><code>role=\"region\"</code></li>\n</ul>\n<p>除此以外，MDx 还使用了 <code>role=\"banner\"</code> 和 <code>role=\"search\"</code> 来分别标记页面中的顶部栏和搜索表单。另外，<strong>有的时候 <code>role</code> 属性还需配合 <code>aria-*</code> 属性一同使用</strong>，具体规则比较复杂，我就不在这里赘述了，具体可参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">WAI-ARIA Roles - MDN</a>。</p>\n<h1>媒体查询来帮忙</h1>\n<p>CSS 的媒体查询其实是一个非常强大的特性，<strong>妥善利用其中的一些特性，我们可以在网页外观上大大增强网页的可访问性。</strong>除了已经烂大街的“对浏览器窗口大小”响应的媒体查询，我会介绍 3 个很少有网站充分利用的媒体查询。</p>\n<h2>print</h2>\n<p><code>print</code> 媒体查询其实已经“历史悠久”了，<strong>只要使用 <code>@media print {...}</code> 就可以创建只在打印页面时生效的样式。</strong>通过这种方式，我们可以让页面在打印时应用一套为打印优化的样式，增强页面在物理纸张上的可访问性。</p>\n<blockquote><p>维基百科是对打印样式做了单独适配的著名例子。</p></blockquote>\n<p><strong>由于在打印的情况下，页面已经离开了“可交互”的范围，还有分页这种在屏幕中无需考虑的问题，要让页面在物理纸张上仍能被轻松地阅读，我们需要做一些特殊的适配。</strong>直接来看一个例子吧。以下是 MDx 针对打印情况进行的一些特殊优化，样式的具体理由已经写在了注释中。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media print {\r\n    /*隐藏不必要的元素*/\r\n    header, .mdx-ad-after-article, .mdx-ad-in-article, .mdx-post-money, .page-footer-nav, .mdx-same-posts, .spanout button, .mdui-drawer, .mdui-overlay, .mdui-menu, .mdx-share-img-dialog, .mdx-share-wechat-dialog {\r\n        display: none!important;\r\n    }\r\n\r\n    /*使用下划线标记链接*/\r\n    article a {\r\n        text-decoration: underline!important;\r\n    }\r\n    /*由于纸张不可交互，在链接后显示链接到的 URL*/\r\n    article a::after {\r\n        content: \"(\" attr(href) \")\";\r\n    }\r\n\r\n    /*强制白底黑字*/\r\n    html &gt; body {\r\n        background-color: white!important;\r\n    }\r\n    article p {\r\n        color: rgba(0,0,0,.8)!important;\r\n    }\r\n\r\n    /*对于纸张上的长文章，衬线字体拥有更好的可读性。以下字体列表来自 fonts.css*/\r\n    article {\r\n        font: 13pt Georgia, \"Nimbus Roman No9 L\", \"Songti SC\", \"Noto Serif CJK SC\", \"Source Han Serif SC\", \"Source Han Serif CN\", STSong, \"AR PL New Sung\", \"AR PL SungtiL GB\", NSimSun, SimSun, \"TW\\-Sung\", \"WenQuanYi Bitmap Song\", \"AR PL UMing CN\", \"AR PL UMing HK\", \"AR PL UMing TW\", \"AR PL UMing TW MBE\", PMingLiU, MingLiU, serif!important;\r\n    }\r\n\r\n    /*除部分元素外，禁止在元素内部分页*/\r\n    * {\r\n        page-break-inside: avoid;\r\n    }\r\n    article p, article a, #comments, article {\r\n        page-break-inside: auto;\r\n    }\r\n}</pre>\n<p>MDx 自 1.9.3 版本起已经包含了对文章页的打印样式优化。可以很容易地看出，优化后的样式在物理纸张上将更容易阅读。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\" alt=\"\" width=\"1345\" height=\"1602\" class=\"aligncenter size-full wp-image-1959\"></a>\n<h2>prefers-color-scheme</h2>\n<p><code>prefers-color-scheme</code> 是最近才被浏览器广泛支持的一个媒体查询，但它的功能却很强大：<strong>响应系统级黑暗模式。</strong>这样，我们可以在开启黑暗模式的系统中让网页具有更好的可读性。不过由于这个媒体查询直到最近才被广泛支持，因此大部分网站对此并没有进行适配。</p>\n<blockquote><p>一些适配这一特性的网站：少数派、微信公众平台（文章页）等。</p></blockquote>\n<p>通过像这样的媒体查询，我们可以在系统启用黑暗模式时让页面实时响应：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    body {\r\n        background-color: #212121;\r\n        color: rgba(255, 255, 255, .7);\r\n    }\r\n}</pre>\n<p><code>prefers-color-scheme</code> 一共有 3 个可能值：<code>no-preference</code>, <code>light</code> 和 <code>dark</code>。你也可以不像上面的例子那样默认使用亮色样式并在黑暗模式下启用黑暗样式，而可以反过来将黑暗样式作为默认，用亮色样式覆盖。在不支持的浏览器上将会显示默认样式（即媒体查询不会生效）。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<h2>prefers-reduced-motion</h2>\n<p>看名字就猜得出，<code>prefers-reduced-motion</code> 是和 <code>prefers-color-scheme</code> 师出同门的媒体查询。因此，和 <code>prefers-color-scheme</code> 一样，它也是在最近才获得了浏览器的广泛支持。它的作用也很强大：<strong>响应系统的“减弱动态效果”模式。</strong>这对某些不喜欢甚至无法接受动画的用户可能很有帮助。要知道，对有些用户来说这甚至是医疗上的必要。使用如下的媒体查询，我们可以在系统启用减弱动态效果模式时让页面实时响应，减弱动画：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-reduced-motion: reduce) {\r\n    /*只是一个示例，实际情况中可以保留一些淡入淡出效果*/\r\n    * {\r\n        transition: all 0s!important;\r\n        transform: none!important;\r\n    }\r\n}</pre>\n<p><code>prefers-reduced-motion</code> 只有 2 个可能值：<code>no-preference</code> 和 <code>reduce</code>，在不支持的浏览器上该媒体查询不会生效。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\" alt=\"\" width=\"792\" height=\"515\" class=\"aligncenter size-full wp-image-1962\"></a>\n<h1>黑暗模式适配</h1>\n<p>黑暗模式可不是简单地切换到黑底白字这么简单。<strong>单纯地使用黑底白字会导致页面元素之间对比度过高，文字刺眼，反而降低了页面的可访问性。</strong>我在下面总结了几条应用在了 MDx 中的黑暗模式优化规则和 Google 推荐的优化规则：</p>\n<p><strong>一是避免黑底白字。</strong>黑底白字看起来真的很难受，事实上，深灰和浅灰是黑暗模式最好的配色。比较下方例子里的两段文本，毫无疑问深灰色背景和浅灰色文字搭配的样式的可读性要比黑底白字高很多。（p.s. 有时候这条规则在白底黑字时也适用）</p>\n<p><strong>二是更改部分元素的亮度和对比度以增强可读性。</strong>你可能已经注意到了，下面优化的例子里标题文字的颜色改变了。很明显，未优化的黑暗模式中标题可读性不如优化的版本。在实际中，我们通常可以通过 CSS 滤镜来实现这一更改。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    h1 {\r\n        /*反相颜色后再将色相旋转 180 度，使亮度反相*/\r\n        filter: invert(1) hue-rotate(180deg);\r\n    }\r\n}</pre>\n<p><strong>三是避免让图片过亮。</strong>未经处理的图片通常会导致过高的对比度，降低可读性。在 MDx 中，我选择降低图片的亮度来避免图片刺眼，而 Google 的建议则是使图片灰度，不过这会影响图片的整体观感。无论是哪一种方案，都可以使用 CSS 滤镜来轻松实现。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    img { \r\n        /*MDx 方案*/\r\n        filter: brightness(.8);\r\n        /*Google 方案*/\r\n        filter: grayscale(.5);\r\n    }\r\n}</pre>\n<div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是未优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是经过优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n</div>\n<h1>其他细节</h1>\n<p>还有一些细节，虽然简单，但不可或缺。我把一部分没有在上文提到的 MDx 中的细节列在了这里。</p>\n<p><strong>一是允许页面缩放。</strong>在开发响应式页面时，很多网站会在页面头部添加这样一个 <code>meta</code>：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"&gt;</pre>\n<p>这样的 <code>meta</code> 设定了页面的宽度，却也固定了页面的缩放比例，用户难以手动放大网页。<strong>这样的设置对一部分视力障碍用户非常不友好</strong>，以至于苹果决定在自家的浏览器上忽略禁止缩放的 <code>meta</code>。按照 Google 的推荐，如果你在 MDx 设置中启用了“允许页面缩放”，那么 MDx 会输出这样的 <code>meta</code> 标签，允许页面进行五倍以内的缩放：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=5\"&gt;</pre>\n<p><strong>尽管很多时候放大页面会导致页面结构被破坏，但这大大增强了页面的可访问性，利大于弊。</strong>因此，在 MDx 中，“允许页面缩放”是默认启用的。</p>\n<p><strong>二是在跨设备阅读时同步阅读记录。</strong>这属于 MDx 的“元老级”功能之一。注意到页面右上角的那个“在其他设备上继续阅读”的按钮了吗？如果你滚动页面后重新点击它，你会发现二维码发生变化了。通过在二维码中记录阅读进度，用户在扫描二维码切换设备阅读时，MDx 在新设备上会自动滚动到和原设备上一致的位置——好吧，目前基于百分比的算法在某些情况下可能不太准，但我已经设计了一个更复杂但更精确的阅读进度记录算法，之后就会更新到 MDx 中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\" alt=\"\" width=\"1000\" height=\"574\" class=\"aligncenter size-full wp-image-1976\"></a>\n<p><strong>三是避免 Web 字体阻塞渲染。</strong>如果你在页面中使用了 Web 字体，在字体加载完成之前，浏览器可能不会渲染任何文本，这就导致用户可能需要等待一段时间才能开始浏览网页。Google 推荐使用 <code>font-display: swap;</code> 来向浏览器指定网页的 Web 字体渲染策略。这一规则会提供一个比较短的等待周期，如果在这段时间内 Web 字体没有完成加载，那么浏览器会以 fallback 字体渲染文本。任意时刻一旦 Web 字体完成渲染，浏览器就会使用 Web 字体重新渲染文本。这在大多数情况下都能满足可访问性的需求。</p>\n<p><strong>四是确保 html 元素具有合适的 <code>lang</code> 属性。</strong>这一属性声明了页面的主要语言，浏览器可以据此调整渲染策略，或者触发自动翻译；屏幕阅读器也能更好地阅读网页。</p>\n<p><strong>五是确保页面主要内容在丢失/禁用了 Javascript 甚至 CSS 的情况下仍然可用。</strong>作为一个以内容为主的网站，MDx 在禁用了 Javascript 的情况下页面主要内容仍然可用。这不只是为了 SEO，更是为了保证页面的可访问性。的确，目前的情况下，如果开启了 Lazyload，MDx 在禁用 Javascript 的情况下图片的确无法显示，但我会在后续版本中尽可能的优化这一问题。</p>\n<h1>附录：媒体查询开发技巧</h1>\n<p>有的时候，光有 CSS 响应媒体查询还不够，我们可能需要在 Javascript 中实时响应媒体查询。用如下代码就可以很简单地响应媒体查询：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">let mql = window.matchMedia(\"(prefers-reduced-motion: reduce)\");\r\nmql.addListener(handleMediaChange);\r\n\r\n//在添加监听后先调用一次，获得当前查询结果\r\nhandleMediaChange(mql);\r\n\r\nfunction handleMediaChange(mql){\r\n    if(mql.matches){\r\n        //查询匹配\r\n    }else{\r\n        //查询不匹配\r\n    }\r\n}</pre>\n<p>在开发上述媒体查询的过程中，我们需要频繁地切换系统的相应模式或者调出打印窗口。<strong>实际上，Chrome 提供了更简单的调试方法：</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1946\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\" alt=\"\" width=\"723\" height=\"681\"></a>\n<p>只要在这里更改模式，相关媒体查询就能实时生效。这不会影响其他标签页，在关闭开发者工具之后也会自动恢复系统设置。</p>\n","link":"https://flyhigher.top/develop/1912.html"},{"title":"MDx Blog 现已随 MDx 1.9.5 发布","date":"2020-01-22 17:54:11","description":"<p>随着 MDx 发布 1.9.5 更新，<a href=\"https://mdxblog.flyhigher.top/\" rel=\"noopener noreferrer\" target=\"_blank\">MDx Blog</a> 现已建立。我将会在 MDx Blog 中分享一些开发故事并发布 MDx 更新日志。</p>","link":"https://flyhigher.top/diary/1905.html"},{"title":"GitHub 2019 统计无垠版","date":"2020-01-12 13:02:00","description":"\n<h1>缘起</h1>\n<p>2019 年底，我突发奇想想要自己统计一番 GitHub 上存储库的一些信息。尽管 GitHub 有自己的<a href=\"https://octoverse.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">年度统计</a>，我还是想试着自己爬取一下，说不定能挖出什么有意思的信息，何况这是我第一次有机会处理比较大量的数据，也算是一种学习的过程吧。于是花了一下午写了个简单的爬虫（时间都花在增加 Rate Limit 上了...），然后扔在了两台服务器上开始跑（GitHub  API 真是好文明）。</p>\n<p>从 2019.11.21 3 时到 2020.1.12 24 时的 52 天 21 小时内，我的爬虫一共爬取了<strong>与 2,024,705 个用户有关<sup>*</sup>的 14,651,923 个公共存储库的基础信息</strong>，平均每秒爬取 3.2 个存储库。据 GitHub 的官方数据计算，我爬取了大约 15% 的存储库信息，但由于封禁库和私有库的数量未知，我暂时无法确定我爬取的存储库占公共库的比例。同时由于存储库数量较多，基本可以认为爬取到的样本在时间尺度上已经足够随机，可以通过统计得出一般结论。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\" alt=\"\" width=\"700\" height=\"606\" class=\"aligncenter size-full wp-image-1892\"></a>\n<p>爬到自己了，合影.jpg</p>\n<p>那么下面就来看看统计出来的一些结果吧。爬虫的技术细节和数据集下载放在文末。</p>\n<p>* 指这些用户拥有至少一个库</p>\n<h1>统计信息</h1>\n<p><strong>以下统计结果均基于已放于文末的数据集。</strong>由于爬虫爬取的时间跨度长，加上我并没有完整爬取 GitHub 所有存储库，因此我<strong>不能保证以下统计结果符合真实情况</strong>，各位可以下载数据集或自行爬取进行验证。</p>\n<h2>一些数据</h2>\n<div>\n<div>\n<div>\n<span>3,120,930</span><br>总爬取用户数</div>\n<div>\n<span>44.7%</span><br>的存储库创建<br>自 Fork</div>\n<div>\n<span>6.59%</span><br>的账户被删除或<br>封禁<sup>1</sup>\n</div>\n<div>\n<span>23,913</span><br>单用户拥有最大<br>库数量<sup>2</sup>\n</div>\n</div>\n</div>\n<p><sup>1</sup> 基于用户 ID 规律合理推断<br><sup>2</sup> 统计范围仅限于当前数据集</p>\n<p>比较出乎我意料的是创建自 Fork 的存储库的占比。我预估这样的存储库占比不会太低，但没有想到能接近一半。此外单用户拥有最大库数量也大大超出了我的预期，<a href=\"https://github.com/pombredanne\" rel=\"noopener noreferrer\" target=\"_blank\">pombredanne</a> 这个用户名下拥有将近 24k 的存储库，不过绝大多数都是 Fork 来的，在情理之中。此外<strong>这个数据集中</strong>拥有最多存储库的账户其实是一个组织 <a href=\"https://github.com/gitpan\" rel=\"noopener noreferrer\" target=\"_blank\">gitpan</a>，这个组织拥有 36,377 个存储库。</p>\n<h2>语言</h2>\n<p><canvas></canvas><br>\n首先必须要说明的是，在这个榜单中我<strong>排除了 HTML 和 CSS</strong>，因为在严格意义上它们不属于“编程语言”。如果把它们计算进来的话，分别有 640,368 个和 361,425 个存储库的主要语言分别是 HTML 和 CSS，这样在这份榜单中它们可以排到第 6 和 第 10 名。JavaScript 毫无疑问获得第一，第二名 Python 的热度则和 JavaScript 相差将近一半。<strong>此外还有 2,448,486 个存储库未能识别出语言，占比 16.7%。</strong>在上面的榜单之外，与机器学习和数据科学相关的语言还有 Jupyter Notebook 排名第 13，R 排名 20，Julia 排名 43。</p>\n<p>说实话这份排名和 GitHub 官方的排名<strong>差别很大</strong>，除了前三名，后面的基本都不太一样。我的排名统计结果完全基于 GitHub 对于存储库的主要语言识别，加上我的存储库数据不完整，和官方的数据不同是很正常的，可以做一个参考，但大概率还是官方排名更加准确。</p>\n<h2>许可证</h2>\n<p><canvas></canvas></p>\n<p>自 GitHub 推出许可证功能以来，拥有许可证的存储库比例升升降降，却始终没有超过一半。<strong>选择一个合适的许可证对项目的良好发展真的很有帮助</strong>，要了解如何选择合适的许可证，请参阅<a href=\"https://www.runoob.com/w3cnote/open-source-license.html\" rel=\"noopener noreferrer\" target=\"_blank\">这篇文章</a>。</p>\n<p><canvas></canvas></p>\n<p>对于拥有许可证的存储库，MIT<del> 麻省理工许可证 </del>总是占比最大的；第二则是 Apache-2.0 许可证。此外，WTFPL 许可证也挤入了前 15 名。</p>\n<h2>星标</h2>\n<p><canvas></canvas><br>\nStar 数量毫无疑问是一个存储库受欢迎程度的体现，而 Star 数高的项目基本上大家都了解过。<strong>截至爬取结束时间</strong>，GitHub 中 Star 数最多的库是 <a href=\"https://github.com/freeCodeCamp/freeCodeCamp\" rel=\"noopener noreferrer\" target=\"_blank\">freeCodeCamp</a> <del>非常完美的驼峰命名法</del>，其次则是著名项目 <a href=\"https://github.com/996icu/996.ICU\" rel=\"noopener noreferrer\" target=\"_blank\">996.ICU</a>。<a href=\"https://github.com/vuejs/vue\" rel=\"noopener noreferrer\" target=\"_blank\">Vue</a> 现在的 Star 数已经稳压 <a href=\"https://github.com/facebook/react\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> 一头，Vue YES! 此外 <a href=\"https://github.com/sindresorhus/awesome\" rel=\"noopener noreferrer\" target=\"_blank\">awesome</a> 也挤进第七名。<br><canvas></canvas><br>\n由于 Star 需要时间积累，新项目的 Star 数量很可能是比不过老项目的，这就会导致有实力的新项目无法出现在榜单中。因此我还统计了日均 Star 数，试图通过日均 Star 数来反映项目受欢迎的程度。<strong>由于正热门的项目会比老牌热门项目有优势，这一项的统计范围是 2020-01-01 之前的所有存储库。</strong>996.ICU 和 freeCodeCamp 再次出现在前 10 名，而最近的热门项目 <a href=\"https://github.com/wenyan-lang/wenyan\" rel=\"noopener noreferrer\" target=\"_blank\">wenyan</a> 则飙升至第 2 名。此外还有 <a href=\"https://github.com/menzi11/BullshitGenerator\" rel=\"noopener noreferrer\" target=\"_blank\">BullshitGenerator</a>，即最近热门的“狗屁不通文章生成器”和 <a href=\"https://github.com/evil-huawei/evil-huawei\" rel=\"noopener noreferrer\" target=\"_blank\">evil-huawei</a> 分列第 3 和第 5 名。<br><canvas></canvas><br>\n说实话这个曲线<strong>比我预估的陡多了。</strong>你可能已经注意到了，这个图表的横轴不是均匀缩放的，实际上曲线要比看起来陡很多。同时受爬取方式的影响，GitHub 中 Star 数较少的存储库数量远比我爬取到的多。也就是说，<strong>实际情况下曲线远比这个图表上的陡。</strong>拿点 Star 不容易啊。</p>\n<h2>名称</h2>\n<p><canvas></canvas><br>\n终于知道了原来存储库的名称是有长度限制的...尽管最长有 100 位，<strong>大部分人还是喜欢 8 位长的存储库名。</strong>此外 1 位长的名称也比我预估的要多一些。举几个存储库名称长度为 100 的例子吧。</p>\n<ul>\n<li>testing-something-elsetesting-something-elsetesting-something-elsetesting-something-elsetesting-some</li>\n<li>acts_as_validated_config_so_app_will_not_run_in_random_situation_and_qa_gays_will_not_cry_to_you_whe</li>\n<li>............................................________-....................................-.---......</li>\n<li>----------------------------------------------------------------------------------------------------</li>\n<li>nyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyan</li>\n</ul>\n<p>...创造力有够丰富的。</p>\n<p><canvas></canvas></p>\n<p>最近 GitHub 上有一种奇怪的风气，那就是建立 Awesome 合集<del>骗 Star</del>。看起来 Awesome 存储库满地都是，甚至还出现了关于 Awesome 的 Awesome 合集这种迷惑行为。于是我统计了一下，<del>还好，</del>占比<del>才</del> 0.5% 不到<del>，Awesomer 们任重而道远呐</del>。</p>\n<p><canvas></canvas></p>\n<p>尽管要在 github.io 上托管网站，存储库不一定要以 .github.io 结尾，但我还是统计了一下。拥有这类存储库的用户比我预想的要少一些，看来还有很多人没有完全发挥 GitHub 的完整实力啊<del>（比如我 Doge）</del>。同时<strong>这类存储库在所有存储库中占比 1.12%</strong>，看起来不多<del>，不过至少比 Awesome 多</del>。<br><canvas></canvas><br>\n看得出来 GitHub 对于用户名长度的限制是 1-40 位。用户名最短的 27 位占据了 <code>A-Z</code> 外加 <code>-</code> 的所有可能，而用户名最长的则是一个组织 <a href=\"https://github.com/UOIT-RESEARCH-database-information-group\" rel=\"noopener noreferrer\" target=\"_blank\">UOIT-RESEARCH-database-information-group</a>。不知道是巧合还是某种规律，<strong>最受欢迎的用户名长度和存储库名称长度一样，都是 8</strong>，有点意思。</p>\n<h2>创建时间</h2>\n<p><canvas></canvas><br>\n由于我并没有完整爬取所有存储库，我只能以相对值来统计每月新增存储库数量的变化趋势。<strong>在这个图表中，我将 2017-09 的数据设为了 100%。</strong>你一定一眼就能注意到 2017 年 6,7,8 月的“一柱擎天”。<del datetime=\"2020-02-05T09:18:30+00:00\">我第一次看到这个数据的时候的确愣了一下，不过就着这条新闻看就能明白为什么了：<strong>2017 年 6 月微软收购 GitHub。</strong></del></p>\n<blockquote><p>重新确认了一下，微软收购 GitHub 比这个高峰晚了一年，目前我对这个高峰没有什么很好的解释，如果你有什么思路的话欢迎评论。</p></blockquote>\n<p><strong>需要注意的是这张图表中我排除了 Fork 存储库</strong>，因为 Fork 存储库在 API 中的创建时间是原始存储库的时间，会影响整体趋势。此外，GitHub 中还有一个创建于 2007 年 10 月 29 日的存储库，那就是 <code>id: 1</code> 的...</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"mojombo\" data-mdxgithubp=\"grit\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/mojombo/grit\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>而它的创建者正是 GitHub 的创始人之一 Tom Preston-Werner。</p>\n<h1>一些有趣的结果</h1>\n<p>当初打算自己爬的目的之一就是想看看能不能挖出什么有意思的信息，结果真的有一些不挖不知道的信息。</p>\n<h2>奇怪的存储库</h2>\n<p>在爬取到的所有存储库中，<strong>有 3 个存储库是“无主”的</strong>，即它们的 owner 属性为空。这三个存储库的基本信息如下。</p>\n<div class=\"mdui-table-fluid mdui-table-hoverable\"><table class=\"mdui-table\">\n<thead><tr>\n<th>ID</th>\n<th>名称</th>\n<th>Forked</th>\n<th>Star</th>\n<th>语言</th>\n<th>许可证</th>\n<th>创建于</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>72385291</td>\n<td>vscode-redprl</td>\n<td>否</td>\n<td>10</td>\n<td>TypeScript</td>\n<td>apache-2.0</td>\n<td>2016-10-31 08:50:01</td>\n</tr>\n<tr>\n<td>181218346</td>\n<td>electron-sys</td>\n<td>否</td>\n<td>10</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-14 03:20:56</td>\n</tr>\n<tr>\n<td>181391880</td>\n<td>node-sys</td>\n<td>否</td>\n<td>6</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-15 09:33:08</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong>更奇怪的是这三个存储库“无主”的情况还不一样。</strong>第一个存储库可以通过 <code>/repositories</code> 这个 GitHub API 找到， <a href=\"https://api.github.com/repositories?since=72385290\" target=\"_blank\" rel=\"noopener noreferrer\">这个链接</a>中的第一个存储库就是它；而其余两个存储库甚至无法在 <code>/repositories</code> API 中找到。不过就算能在 API 中找到第一个存储库，它的 <code>html_url</code>，即 <code>https://github.com//vscode-redprl</code> 仍然是不可访问的。这可能是 GitHub 早期的一个 Bug 导致的，不过我仍然对爬虫是如何找到这三个存储库的以及这些 Stars 是哪里来的感到好奇。</p>\n<h2>奇怪的用户名</h2>\n<p>在爬虫爬了一段时间以后，API 中突然开始出现大量的以 fdp 开头的 18 位乱码作为用户名的用户。这些用户拥有的存储库和 starred 的存储库都为 0，而他们的 <code>html_url</code> 为 404。以下是几个例子。</p>\n<ul>\n<li>fdpEpolGCEdQX4ZlRJ</li>\n<li>fdp8XaVrdtmDZnO5pR</li>\n<li>fdp8XRAGnwAOkTr2Ya</li>\n</ul>\n<p>由于我的爬虫并没有超过 Rate Limit，所以我排除了这是污染数据的可能。我怀疑这可能是某种 Bot 账户，于是一边更新爬虫过滤掉了这些用户，一边给 GitHub 支持发邮件问了具体情况。过了两天 GitHub 回复我说这些是<strong>被自动判为可疑进而被封禁的用户</strong>（原话是 they have been flagged by our automated measures for detecting suspicious behavior）。<del>想到我正在疯狂爬取 GitHub，突然害怕.webp</del></p>\n<p>行吧。</p>\n<h1>技术细节</h1>\n<p>爬虫使用 Python3 编写，数据库使用 MySQL。爬虫共使用了 4 个 API Token，在两台服务器上分布式爬取。爬取思路为：</p>\n<ol>\n<li>通过 <code>/users</code> API 遍历用户，每个请求最多获取 30 个用户信息</li>\n<li>循环 30 个用户，分别获取 <code>/users/&lt;user_name&gt;/starred</code> 和 <code>/users/&lt;user_name&gt;/repos</code> API 中的存储库信息，每个请求最多获取 100 个存储库信息，超过 100 个的分页获取</li>\n<li>提取存储库信息，插入数据库。对于已存在的存储库，更新数据</li>\n<li>获取下 30 个用户信息</li>\n</ol>\n<p>由于爬取过程中我多次调整了爬虫逻辑，爬虫爬取到的用户 ID 区间并非连续的，具体区间为1-839586, 14800001-14885493 及 28965251-31161101。</p>\n<h1>免责声明</h1>\n<p>本站会尽可能地提供准确信息，但本站不对此文章中信息的准确性和即时性及带来的任何影响负责。</p>\n<p>本站不代表 GitHub 官方，本文仅供学习之用，请不要将本文内容直接用于任何商业项目中。</p>\n<h1>数据集下载</h1>\n<p>导出的 SQL 文件大约为 1.38GB，全部放在了 GitHub 上（在危险的边缘试探.webp</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"github-analysis-2019\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/github-analysis-2019\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>此外我也提供了 MEGA 下载，链接<a href=\"https://mega.nz/#F!juxm3A6T!7Vwpzi82W1OFrqTLu1A1pQ\">在这里</a>。</p>\n","link":"https://flyhigher.top/develop/1564.html"},{"title":"Milkice 跨年红包解谜 Writeup 及无垠跨年红包解谜答案","date":"2020-01-02 04:29:19","description":"\n<blockquote><p><del>又到了水文章的时间呢</del></p></blockquote>\n<p>先说明一下，这篇文章原本不是在计划中的，而原来说好的「在路上的两篇」文章<del>绝对不会咕</del>。我自己的红包答案本来打算直接塞在年度总结里的，结果发现稍微有些长，再加上我还花了一些时间解了<a href=\"https://milkice.me/\">奶冰</a>的红包解谜游戏，就打算把两个解谜过程放在一起单独写一篇文章。<del>真是个水文章的好理由</del>（被打死</p>\n<h1>奶<del> 子 </del>冰的红包</h1>\n<p>奶冰的红包题目比我的难多了，所以让我们先从难的开始吧。首先看一下<a href=\"https://milkice.me/2019/12/31/2019-summary/\">题目</a>：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1524\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\" alt=\"\" width=\"746\" height=\"410\"></a>\n<p>入口是 <code>happy.2020.milkice.me</code>，扔到浏览器里面表示找不到 IP，那么大概率就是 DNS 的 TXT 记录了，查一下得到 <code>nb2hi4dthixs63ljnrvwsy3ffzwwkl3tivrvezluomxxg5dsmvqw2ltqmnqxa3th</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1525\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\" alt=\"\" width=\"896\" height=\"278\"></a>\n<p>第一眼没看出来是什么编码，直觉是 BaseXX 系列的编码，加上提示“不只有 Base64”，可以推断出是 Base32，转大写解码得到 <code>https://milkice.me/sEcRets/stream.pcapng</code>。是个 URL，下载得到一个 Wireshark 文件，打开一看是和某 USB 设备的通讯抓包。<del>不会做，不做了。</del></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1526\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\" alt=\"\" width=\"1500\" height=\"813\"></a>\n<p>奶冰提示我“Google 上搜得到”，结合第二条提示搜索“wacom pcapng”找到了<a href=\"https://blogs.tunelko.com/2017/02/05/bitsctf-tom-and-jerry-50-points/\">这篇文章</a>（<del>这™就是答案啊</del>）。看起来是一样的套路，即通过解析数据得到数位板上画的内容，于是按文章的思路筛选出数位板发给主机的数据，导出，然后再用 tshark 导出文本数据。本来我想直接用文章中的 POC 的，结果折腾半天因为源的蜜汁原因库没装上，于是按文章中给出的数据结构自己写了段代码，分别导出 X、Y 轴数据扔进 Excel 画散点图。（<del>别问我为什么用 Excel，因为我手边没有更好的工具了</del>）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1528\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\" alt=\"\" width=\"1280\" height=\"530\"></a>\n<p><span>翻车现场之一</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1539\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\" alt=\"\" width=\"1000\" height=\"286\"></a>\n<p><span>懵逼奶冰.webp</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1533\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\" alt=\"\" width=\"1500\" height=\"462\"></a>\n<p>看得出有手写文字，不过是上下颠倒的，翻转图片得 <code>https://milkice.me/2020/uso.zip</code>。是个 zip，下载打开一看，有密码。<del>不会解，不做了。</del> 第一反应是暴力解密码，但是暴力跑了 15 分钟还是没有跑出来。暴力太不优雅了，肯定不是正确思路，但奶冰什么都不肯说了。不过在这时我终于发现第一个红包口令码就藏在压缩包的注释中，Get。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1544\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\" alt=\"\" width=\"806\" height=\"593\"></a>\n<p>然而题还没解完，回去看提示，看到提供了 osu 谱面下载，于是打算不管怎么样先下载来看看。然而 osu 谱面下载要登录，只好又花了几分钟找到第三方站点，成功下载。这时候可以注意到 uso.zip 里有个同名文件（432314 Mike Greene - Bill Nye the Science Guy Theme Song (Chinese Intro).osz），可以联想到是明文攻击。好吧，上 ARCHPR，十秒解出。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1530\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\" alt=\"\" width=\"462\" height=\"643\"></a>\n<p><span>现场还原.jpg</span></p>\n<p>.osz 文件并不是明文，猜测是压缩包（和 .pptx 一个思路嘛），于是改后缀 .zip 顺利打开。然后红包口令码就藏在奶冰的 .osu 文件中了，由提示可知是明文，打开即可得到。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1542\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\" alt=\"\" width=\"457\" height=\"255\"></a>\n<h1>我的红包</h1>\n<p>相比起来<a href=\"https://flyhigher.top/diary/1464.html\">我的题目</a>就简单很多了嘛...三天时间一共发出了 25 个红包，包括一位重复领取的🌚，比前几年还是多了一些的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\" alt=\"\" width=\"500\" height=\"306\" class=\"aligncenter size-full wp-image-1554\"></a>\n<p><span>这位同学以后请不要多次领取🌚</span></p>\n<p>那么来看看答案吧。</p>\n<h2>第一阶段</h2>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>首先观察字符串，可以发现 <code>.</code> <code>/</code> <code>_</code> 等一些 ASCII 字符原样留在了字符串中，而其他字符被由 <code>=</code> 和十六进制构成的某种编码所替代。如果你正好有所了解，你应该能认出这是 Quoted-printable 编码，这是一种常用于邮件中的编码，可以用<a href=\"https://mothereff.in/quoted-printable\">这个页面</a>解码。如果你不了解，你也应该可以发现这种编码和 URL 编码非常相似。如果你把 <code>=</code> 替换为 <code>%</code>，那么你就可以用各种方法顺利地把它按 URL 编码来进行解码，最后可以得到 <code>αхtоn.іm/соdе_оf_2020_⒈mρз</code>。这个字符串里大部分字符都不是 ASCII 字符，只是长得像而已。根据第一个提示“全是 ASCII 字符”，按样子把字符串用 ASCII 字符抄一遍，可以得到最终 URL 为 <code>axton.im/code_of_2020_1.mp3</code>。</p>\n<h2>第二阶段</h2>\n<p>下载音频，可以听出音频是经过某种处理的白噪音。白噪音的特点是各频段的功率都均匀分布，在白噪音上做文章，很容易就可以联想到线索藏在频谱中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1534\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\" alt=\"\" width=\"1200\" height=\"719\"></a>\n<p>频谱被处理成了 24x3 的网格，结合第二条提示“24x3，横向读取”可以推断出是将频谱当作二进制读取，得到 <code>01111001 01110010 01100011 00101110 01101101 01100101 00101111 00110010 00110000</code>，转为 ASCII 字符可得 <code>yrc.me/20</code>。</p>\n<h2>第三阶段</h2>\n<p>打开上一步得到的页面，提示要求输入十位数密码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1536\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\" alt=\"\" width=\"663\" height=\"460\"></a>\n<p>如果你在上一步注意到了这个音频文件奇怪的属性，你可以反应过来这里的密码就是 <code>2000202020</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1537\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\" alt=\"\" width=\"421\" height=\"651\"></a>\n<p>如果你没有注意到，查看页面代码可以看到一条注释 <code>&lt;!-- Tips: the attribute of the audio --&gt;</code> 将你引导向音频文件的属性。输入密码，解锁即可进入下一步。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1535\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\" alt=\"\" width=\"397\" height=\"223\"></a>\n<h2>第四阶段</h2>\n<p>可以看到是一张图片，内容为“<del>.JPG</del>”和“.ZIP”。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-1532\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n<p>和去年一样的套路，下载图片，将后缀名改为 .zip 然后打开，可以看到 README.txt。</p>\n<h2>最后一步</h2>\n<p>查看 README.txt 的内容，可以了解到需要去 🤔.axton.cc 获取红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1538\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\" alt=\"\" width=\"1131\" height=\"278\"></a>\n<p>扔到浏览器里会出现奶冰同款找不到 IP，于是可以联想到 TXT 记录。唯一的问题是 🤔 这个 Emoji 需要如何处理。域名使用 Punycode 将 Unicode 字符转换为 ASCII 字符，特点是以 <code>xn--</code> 开头。如果你把上面这个域名扔进浏览器，你会发现它变成了 <code>xn--wp9h.axton.cc</code>。然后查询 TXT 记录，即可得到红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1527\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\" alt=\"\" width=\"804\" height=\"557\"></a>\n","link":"https://flyhigher.top/develop/1519.html"},{"title":"无垠 2019 年度总结","date":"2019-12-29 12:25:52","description":"\n<p>又是时间飞快的一年...写 2018 总结的情景似乎还在眼前，转眼居然已经到 2019 年末了。</p>\n<p>2019 年，发生了太多事情，包括真的转折了人生的高考，这也导致我博客更新的不多（难以置信居然才更了两篇...），不过两篇技术性文章已经在路上了，可以期待一下。</p>\n<p>2019 年我也学了不少东西（单指技术方面），比如终于认真学了 Vue（但是还要练手）。书买了一大堆，看完的倒是没几本orz</p>\n<p>呼，好吧，是时候回顾一下充满坎坷的这一年了。2019 年还剩下最后两天，希望 2020 年，我能做得更好。</p>\n<h1>一些数据</h1>\n<p>照惯例先来看看一些数据吧。今年是统计系统完整统计了的第二年，终于可以和去年的数据比较一下了。以下数据的统计范围是 2019年1月1日0时至 2019年12月29日20时。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 26,901 (<span>+4%</span>)，年 PV 76,583 (<span>+3%</span>)，日均 UV 73.7，平均停留时间 5分13秒 (<span>-13.8%</span>)，平均跳出率 53% (<span>+20.5%</span>)。一年有效文章数 2 (<span>-50%</span>)，新增评论 439 条。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\" alt=\"\" width=\"1000\" height=\"1143\" class=\"aligncenter size-full wp-image-1511\"></a>\n<p>有趣的是今年文章数腰斩，访问数反而小有提升。<del>如果我哪天不更新了，访问数是不是可以无限大呢？</del></p>\n<p>今年博客最大的改动就是把整体风格切换到了 Material Design 2（当然这是 <a href=\"https://flyhigher.top/develop/788.html\">MDx</a> 中的可选功能，给自己打个广告2333），此外还有比较失败的 WebP 改造计划，因为和缓存冲突已经回滚了。<a href=\"https://flyhigher.top/develop/1245.html\">ABS 系统</a>进展不大，主要是真的没有太多时间，还是要再学习一个。</p>\n<h2>个人主页</h2>\n<p>虽然个人主页的 TODO List 列了老长，但今年完全没有更新，也没有推广，从今年 8 月底开始还莫名被某墙认证了，直到 11 月底才恢复，于是今年总访问量比去年少了很多，</p>\n<p>有多少呢？这么少：总 UV 2,141 (<span>-65.9%</span>)，总 PV 2,744 (<span>-66.6%</span>)，日均 UV 6 (<span>-65.9%</span>)，平均停留时间 62秒 (<span>+19.2%</span>)。主要来源是知乎和 V2EX，还有一些甚至是从微信来的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\" alt=\"\" width=\"1000\" height=\"1103\" class=\"aligncenter size-full wp-image-1512\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 8 次，新增 171 commits，2 种语言的翻译，Star 数增加了 175，现有 408。感谢所有人的支持，尤其是 <a href=\"https://github.com/Sn0bzy\" rel=\"noopener noreferrer\" target=\"_blank\">Hasan CAN</a>, <a href=\"https://github.com/yechs\" rel=\"noopener noreferrer\" target=\"_blank\">Ye Shu</a>, <a href=\"https://github.com/StarryLeo\" rel=\"noopener noreferrer\" target=\"_blank\">StarryLeo</a>, <a href=\"https://github.com/DCTewi\" rel=\"noopener noreferrer\" target=\"_blank\">冻葱Tewi</a>, <a href=\"https://github.com/syfxlin\" rel=\"noopener noreferrer\" target=\"_blank\">Otstar Lin</a> 等为 MDx 做出了不小贡献的你们。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：<a href=\"https://flyhigher.top/photograph/1309.html\">上手</a> DJI OSMO Pocket</li>\n<li>四月：最后一次参加浙江省普通高中学业水平考试</li>\n<li>五月：MDx 喜提 300 Stars</li>\n<li>六月：高考 <del>炸了，差亿点点上浙大</del>\n</li>\n<li>六月：入手了 Oneplus 7 Pro</li>\n<li>六月：和同学一起去成都重庆旅行</li>\n<li>六月：第一次近距离感受到地震</li>\n<li>六月：<a href=\"https://flyhigher.top/diary/1411.html\">入手</a>了一台雷蛇灵刃 15，目前是主力机</li>\n<li>七月：参与组织 THE Hack 2019 活动</li>\n<li>七月：面基了 <a href=\"https://itroy.cc/\" rel=\"noopener noreferrer\" target=\"_blank\">Tory</a>, Bie Shi 和 <a href=\"https://oxz.me/\" rel=\"noopener noreferrer\" target=\"_blank\">FHYunCai</a>\n</li>\n<li>八月：一个人去厦门武汉转了一圈，拍了自己的第一个 Vlog</li>\n<li>八月：入手了一个 Kindle Paperwhite 4，没有泡面可以压，于是用来看英文小说了</li>\n<li>八月：加入 TEDxNingbo 志愿者团队</li>\n<li>八月：和 Ralph 面基</li>\n<li>八月：入手了一个 Yubikey</li>\n<li>九月：人生第一次参加雅思考试 <del>7分，蛮开心的</del>\n</li>\n<li>十月：入手了一个 Samsung Galaxy Watch Active 2 <del>觉得不值</del>\n</li>\n<li>十一月：MDx 达到 400 Stars</li>\n<li>十一月：为 TEDxNingbo 设计开发的 H5 上线</li>\n<li>十一月：入手了第一台胶片相机，试图入坑胶片摄影</li>\n<li>十一月：参加 TEDxNingbo 2019 大会</li>\n<li>十二月：<del>我 Cytus II 入门了</del>\n</li>\n</ul>\n<h1>跨年红包</h1>\n<p>这算「传统习俗」了。和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2020年1月2日。</p>\n<p>今年的解谜旅程，从下面这个字符串开始。</p>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>由于今年的题目比以前稍微难了一些，所以今年的红包金额还是比较大的，而且不限量，尽你所能试一试吧。</p>\n<p>一点你可能用得上的提示：URL 里全是 ASCII 字符 / 24x3，横向读取。</p>\n<p><a href=\"https://flyhigher.top/develop/1519.html\">答案</a>已公布。</p>\n<h1>跨年海报</h1>\n<p>这算是另一个「传统习俗」（笑）。因为我有做跨年海报的习惯，所以以下就是今年份的海报啦。</p>\n<p>用了 C4D+PS，还有我的一整个下午。</p>\n<p>提前祝各位新年快乐！</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter wp-image-1467 size-large\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n","link":"https://flyhigher.top/diary/1464.html"}]