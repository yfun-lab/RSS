[{"title":"本周看什么 | 最近值得一看的 9 部作品","date":"2022-08-05 09:38:05","description":"☕️TL;DR近期佳作推荐：[动画]邪神与厨二病少女X、[韩剧]黑话律师、[纪录片]光影与魔术、[台剧]我愿意、[动画]风都侦探、[电影]独行月球、[美剧]中年失恋日记、[动画]影宅第二季、[动画]狂 ...<a href=\"https://sspai.com/post/75007\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75007"},{"title":"派周报 | 本周会员内容提要；跑题：果园鸽鸣","date":"2022-08-05 09:11:22","description":"无论是推迟发布正式版，还是调整开发周期搞「大小年」，都只是治标不治本的做法。但苹果似乎坚持认为，只有通过促使最多用户在最短时间升级到最新系统，才能确保自己对设备和生态的绝对控制。如果这种思路不改变，我们也许还是只能继续、并且越发受制于苹果的「鸽」与「不鸽」。<p>[......]</p>\n<a href=\"https://sspai.com/prime/story/pi-weekly-003\" target=\"_blank\">查看全文</a><p>本文为会员文章，出自<a href=\"https://sspai.com/prime/precog/single\" target=\"_blank\">《单篇文章》</a>，订阅后可阅读全文。</p>\n","link":"https://sspai.com/prime/story/pi-weekly-003"},{"title":"一篇文章，读懂中文播客前世今生","date":"2022-08-05 08:00:00","description":"中文播客的过去，谁会记得它的模样？中文播客的未来，从一门生意的角度看，又将如何续命？<a href=\"https://sspai.com/post/74874\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/74874"},{"title":"一日一技 | 把日历同步交给私有云：群晖 NAS 配置 Synology Calendar","date":"2022-08-05 06:31:59","description":"相比使用其他公有云的日历服务，私有云的日历服务数据信息可控，本文就以群晖为例，教你搭建一个私有云日历服务。<a href=\"https://sspai.com/post/74993\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/74993"},{"title":"台湾GDP对大陆的依赖程度究竟有多高，假设处于极端情况，我们能够用哪些经济制裁措施？","date":"2022-08-05 05:11:44","description":"\n<p data-pid=\"1MP7A6I_\">学界对两岸经济依赖关系有很多研究，特别是从全球价值链<sup data-text='关于全球价值链的方法可参考：Robert Koopman, Zhi Wang and Shang-Jin Wei, \"Tracing Value-added and Double Counting in Gross Exports,\" American Economic Review, 2014.' data-url=\"\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"1\">[1]</sup>视角出发，使用出口增加值数据，能够比较好地分解上下游依赖关系。</p>\n<p data-pid=\"9LF3EbfX\">这里介绍一篇：<b>段小梅.\"两岸在全球价值链中的分工地位和依赖关系——基于TiVA数据的实证分析.\" 世界经济研究 .12(2016)</b></p>\n<p data-pid=\"CU-JE4mS\">文章主要通过上游依赖度和最终需求贡献率来测算两岸的依赖程度，具体如下：</p>\n<p><img src=\"https://pic2.zhimg.com/v2-0f103fed1bde32aef9dd99c159bb0813_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1094\" data-rawheight=\"544\" data-watermark=\"original\" data-original-src=\"v2-0f103fed1bde32aef9dd99c159bb0813\" data-watermark-src=\"v2-f86228f6250a340afa8f5750eb5b65eb\" data-private-watermark-src=\"v2-d632671cbc1831fe2eecb305c02444d8\"></p>\n<p><img src=\"https://pica.zhimg.com/v2-6262d41e96fb3ff261d2d4a33abf4ee5_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1103\" data-rawheight=\"514\" data-watermark=\"original\" data-original-src=\"v2-6262d41e96fb3ff261d2d4a33abf4ee5\" data-watermark-src=\"v2-713636d3d2bc4c899560c3da7ec2c0b9\" data-private-watermark-src=\"v2-1f44173917a8c12b01c1a098ae98111d\"></p>\n<p data-pid=\"_b2mJx_D\">主要的结论是：</p>\n<ol>\n<li data-pid=\"kBF-Eg-k\">台湾对日本、大陆、欧盟、东盟、美国均有较高的上游依赖。</li>\n<li data-pid=\"eNpMDKYS\">台湾地区对大陆的上游和最终需求贡献率较高，大陆对台湾的上游依赖度持续降低。</li>\n<li data-pid=\"J1zRN9bO\">大陆的市场、人口基数对台湾有强烈吸引，是台湾最大贸易伙伴。如两岸贸易发展受阻，台湾经济受损程度将远高于大陆。</li>\n</ol>\n<p data-pid=\"ECfMr7jl\">由于价值链数据更新较慢，这篇2016年的文章的数据只到2011年，难以反映现状。而最近10年大陆经济已经发生了巨大变化，特别是在高科技领域，台湾在这方面对大陆的重要程度也在下降。两岸经贸结构也在变化，下面这段话的情况也发生了一定变化，大陆技术创新也取得了长足进步。从趋势上来看，台湾对大陆的上游越来越依赖，而大陆市场对台商也越来越重要，ECFA进一步加强了台湾对大陆的依赖。</p>\n<p><img src=\"https://pica.zhimg.com/v2-60772a2b8e9936d3399190a587e3e634_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1083\" data-rawheight=\"116\" data-watermark=\"original\" data-original-src=\"v2-60772a2b8e9936d3399190a587e3e634\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"tk_dCpPy\">大陆依赖台商的资金、技术、管理经验的时代早已过去。在部分高技术产业，台湾对大陆经济依旧具有不小价值，不过日韩等周边经济体能够在一定程度上实现替代，只是在于成本差异。在极个别的产业（如芯片），台湾确实处于世界一流，但是如果算“政治账”，这些也就算不上什么了。</p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/koukou0113?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">扣小米</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/546732404/answer/2610212587?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">147 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/544585522?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">台湾经济增长预期一降再降，主要受哪些因素影响？</a><br><a href=\"http://www.zhihu.com/question/521454548?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">统一台湾后会对我国gdp有怎样的影响，考虑到战争，制裁，加入台湾后体量的增加？</a><br>\n","link":"http://www.zhihu.com/question/546732404/answer/2610212587?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"没有按摩师也没关系，你可以用这些方法和工具「自我修复」","date":"2022-08-05 03:37:01","description":"免责和警示信息：本文作者与文章所涉内容之间无直接利益相关。文中介绍的自助按摩手法和工具皆出自合法出版物。自助按摩存在禁忌症和禁忌部位，在实施时务必预先了解自己的身体状况并小心行事。按摩不能代替任何医学 ...<a href=\"https://sspai.com/post/75002\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75002"},{"title":"派早报：InnLead Innovative 推出无线便携显示器、Apple 上线全新诊断工具","date":"2022-08-05 00:59:45","description":"网易云音乐升级「听歌识曲」功能，JBL 推出 QUANTUM TWS 真无线耳机等<a href=\"https://sspai.com/post/75000\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75000"},{"title":"汽车做底盘装甲是智商税吗？什么情况建议做，什么情况不用做？","date":"2022-08-04 09:22:27","description":"\n<p data-pid=\"_2h9NUsh\">先上一张图，这是两台1:18车模的底盘。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-4a4ba8c5e32df5903c3184718e5303f5_720w.jpg?source=b1748391?rss\" data-caption=\"东风悦达起亚的礼品车模\" data-size=\"normal\" data-rawwidth=\"1278\" data-rawheight=\"1706\" data-watermark=\"watermark\" data-original-src=\"v2-4a4ba8c5e32df5903c3184718e5303f5\" data-watermark-src=\"v2-1de22450ccb2ecefabfa8d78579e664d\" data-private-watermark-src=\"v2-a7b3ff8b13238da49abd9678c2f11ec6\"></p>\n<p data-pid=\"NrEIAJfO\">首先说下，有些消费者脑海里有个误区，底盘装甲和发动机护板混在了一起，而<b>底盘装甲是涂装，发动机护板是用来保护裸露发动机的一个外壳。</b></p>\n<p data-pid=\"GM6STGb1\">先说下发动机护板，材质一般是钢材/铝合金/塑钢/塑料。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-b53c816affd28531a8aa5e6fec063af6_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"256\" data-watermark=\"watermark\" data-original-src=\"v2-b53c816affd28531a8aa5e6fec063af6\" data-watermark-src=\"v2-78154f91fbe201af00036ecdd3c8537f\" data-private-watermark-src=\"v2-de1eb454911c4b374a7955816fbc40ab\"></p>\n<p data-pid=\"92ZZrKjp\"><b>一个是防止路面溅起的污物（水、盐）附着对发动机外壳的腐蚀。一个是防止发动机因为路况不平而擦碰受损。</b>因为油底壳在发动机的最下方，这个部位实际是不经撞的。过个大坑擦碰厉害都有可能导致油底壳破损。</p>\n<p data-pid=\"FlCCmfm8\">我之前有次去乡下的那种砂石路面，地面被大货车压得坑坑洼洼，还刚刚下过雨，不好判断坑的深浅。我过一个坑的时候不小心底盘被狠狠擦了下，后来我去4S店做年检的时候，特地要店里把车升起来看了下底盘。果不其然，我做的发动机护板下面有一长条很深的凹下去的刮擦痕，而一块尖锐的小石头竟然深深卡在了护板上面，用手抽不动。师傅拿着锤子才把它敲下来，如果没有这个护板，后果就会很严重了。</p>\n<p data-pid=\"ct4mSvsn\">有些人说发动机护板会影响发动机沉降功能，因为在出现如正面撞击的时候，发动机会溃缩下降到底盘之下，不会撞入驾驶舱内。而发动机护板则阻拦了发动机下沉，会增大人员受伤的风险。其实我觉得这个大可不必担心，因为一般来说，厂家都会预留发动机护板的接口供后续添加。而一般底盘舍得花成本的，出厂时能包裹的都包裹了，包括发动机都做了包裹，都不用消费者自己添加发动机护板。<b>这种护板实际车企已经有过考虑，不会影响发动机在事故时候的溃缩下沉的。</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-c825dd6796452fc5554fcaa86c54a530_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"480\" data-watermark=\"watermark\" data-original-src=\"v2-c825dd6796452fc5554fcaa86c54a530\" data-watermark-src=\"v2-599eaa23e1737753d4122e01bd2175db\" data-private-watermark-src=\"v2-1d32b79ae46b666c8084c0e4e2c0362e\"></p>\n<p data-pid=\"i33iEOUp\">再说回到底盘装甲的涂装，是对底盘相应部位进行喷涂，使之形成形成厚厚的一层类似橡胶膜的弹性涂层，能牢固附着在底盘上，<b>高低温均不会产生结构损伤（溶解、裂开）。</b></p>\n<p><img src=\"https://pica.zhimg.com/v2-9752d8a2e8e553b2bdb39773b9079497_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"475\" data-rawheight=\"245\" data-watermark=\"watermark\" data-original-src=\"v2-9752d8a2e8e553b2bdb39773b9079497\" data-watermark-src=\"v2-bde0d66405191455ddd1d7b99cdcda1e\" data-private-watermark-src=\"v2-394437f3e1d4c4c46e440ea130c93f8e\"></p>\n<p data-pid=\"uKnhp4aM\">它的功能实际整体来说有三个。</p>\n<p data-pid=\"N8I-zrAz\"><b>1、防冲防刮</b></p>\n<p data-pid=\"Fc0v2a3z\">汽车在行驶的时候，即便在市区内行驶，也多少会碰到类似下图的有砂石的路面。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-469ca31528f16c5caf21b6b773b4c2eb_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"499\" data-rawheight=\"372\" data-watermark=\"watermark\" data-original-src=\"v2-469ca31528f16c5caf21b6b773b4c2eb\" data-watermark-src=\"v2-1e13999cd257d442b582a7631a7b202f\" data-private-watermark-src=\"v2-9aaed1b5bc41b55cf94388461fab86a6\"></p>\n<p data-pid=\"B_OAg5RB\">车轮卷起的小石，速度越快，冲击底盘的力道越大。频繁的<b>石子冲击底盘</b>，日积月累自然有可能击破底盘的车漆涂层。</p>\n<p data-pid=\"SOV4MYuu\">另一种路面就是这种坑坑洼洼的石子路面，特别是有积水的情况下，看起来很浅，但实际上有可能十多厘米深，一个不慎就会发生<b>底盘的刮擦</b>，坚硬路面的刮擦会造成底盘车漆的破损。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-5339989eaa66d39f15c8e7020b2a093f_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"513\" data-rawheight=\"369\" data-watermark=\"watermark\" data-original-src=\"v2-5339989eaa66d39f15c8e7020b2a093f\" data-watermark-src=\"v2-4d98ba32eee138bfd1e9459b08e6bf9c\" data-private-watermark-src=\"v2-ad4b0abdd64958100f33ca96c6e73d88\"></p>\n<p data-pid=\"3Rjx6t7y\">而底盘的金属零部件失去了车漆的保护，那么几年过去了，自然底盘就会出现星星点点的锈蚀。锈蚀进一步发展，严重的甚至会出现锈穿的现象，给行车安全带来隐患。这也是<b>“车坏先坏底，烂车先烂底”</b>的俗话来源。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-8675113061e9885c628368ce7ef5f3be_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"960\" data-rawheight=\"575\" data-watermark=\"watermark\" data-original-src=\"v2-8675113061e9885c628368ce7ef5f3be\" data-watermark-src=\"v2-14643657d4d642741d15bf42ca1c93ff\" data-private-watermark-src=\"v2-99f8187216ca2c88ce3eaa764b6ca4d6\"></p>\n<p data-pid=\"TBy34u5k\">而良好的底盘装甲可以抗石子的撞击和坚硬路面的部分刮擦，减轻对底盘原本防护漆面的伤害，就能有效保持底盘完好。要知道二手车评估车辆价值的时候，底盘是评估师绝对要看的一环。如果漆面保持完好，锈蚀程度低的底盘，价格都能往上多报几千块钱。</p>\n<p><br></p>\n<p data-pid=\"Mu1zmTnt\"><b>2、防腐蚀</b></p>\n<p data-pid=\"EkKJfCjq\">即便是开车不走砂石路，大多数路况都在城市平坦套路上行驶，底盘不刮不碰，但是时间久了，底盘依旧有可能会出现大面积的锈痕。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-2bcfa5e5df72e7908dff0b17939f6ce6_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"980\" data-rawheight=\"551\" data-watermark=\"watermark\" data-original-src=\"v2-2bcfa5e5df72e7908dff0b17939f6ce6\" data-watermark-src=\"v2-16aba9985219fac6b217e527eeb5230b\" data-private-watermark-src=\"v2-2815ad102eec70d25544249315564fc0\"></p>\n<p data-pid=\"YR2bQIft\">就是因为路面的污垢，如飞溅的雨水，污泥，枝叶，各种城市垃圾等，都会附着在底盘上，这些含酸性物质的雨水，融雪时的盐，沿海地区的湿气（含盐），枝叶，腐蚀性的垃圾等可能就会粘在你的底盘上，而我们平时洗车的时候，实际也很难去清洗底盘，大多只对车身和内饰进行清洁，底盘涂装如果没有良好的耐腐蚀性，这些腐蚀性的物品长期附着其上，金属部件基本都会产生锈蚀现象。</p>\n<p data-pid=\"GaiGdo5T\">这也是停车需要注意的地方，不要老停在潮湿环境下，也不要老停在脏路上，因为时间长了，底盘的金属锈蚀就会加快。而如果是北方，经常用融雪剂的地区，更要注意定期清洗底盘，否则融雪剂（普通型融雪剂主要成分是氯化钠、氯化镁）侵蚀金属起来，那速度叫一个快。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-b1f3e7aef939f7e20fea63101052da6a_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"585\" data-rawheight=\"341\" data-watermark=\"watermark\" data-original-src=\"v2-b1f3e7aef939f7e20fea63101052da6a\" data-watermark-src=\"v2-3e0b4e10b3db26e1aac7201a3b69186f\" data-private-watermark-src=\"v2-b01abf69794296e01f019c9efce89bb7\"></p>\n<p data-pid=\"MZ8VHr9Q\">而底盘装甲涂装都会做<b>耐油性测试，耐水性测试，盐雾测试，耐酸碱测试。</b>如果有合格的底盘装甲，就相当于给汽车底盘做了一个隔绝层，有效防止腐蚀。</p>\n<p><br></p>\n<p data-pid=\"jfnvF-qg\"><b>3、噪音/温度隔离</b></p>\n<p data-pid=\"ncROIS05\"><b>轮胎和路面的摩擦声音，胎面花纹沟槽内的空气泵气噪音，因为路面凸凹不平产生的轮胎侧壁激励振动音</b>，均会向上传导到车体。而底盘装甲可以减缓这方面的噪音传递，有效提升NVH。</p>\n<p data-pid=\"o9cgzGgI\">另外底盘涂装的厚度可以达到2-4mm，这个涂装是能隔绝热量传递。比如播报温度在40摄氏度的时候，太阳直射的地表温度却能达到60摄氏度往上。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-c5f3a8197b5746fd2dc54d3f681192ea_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"419\" data-watermark=\"watermark\" data-original-src=\"v2-c5f3a8197b5746fd2dc54d3f681192ea\" data-watermark-src=\"v2-5c1527c9aa7682c41c2a08bb258012f3\" data-private-watermark-src=\"v2-0193d11f7f835d2d657e7445a4b25f23\"></p>\n<p data-pid=\"B5Eg8o7q\">车辆在炎热的地表上奔驰的时候，实际也是一个热量从地面到底盘，底盘往车身传导的一个过程。</p>\n<p data-pid=\"hOendxf-\">而底盘厚厚的涂装是可以有效隔绝地面的温度传递，让车内的空调能耗降低。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-a678e2178e238a5e8881df4876223ae0_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"700\" data-rawheight=\"525\" data-watermark=\"watermark\" data-original-src=\"v2-a678e2178e238a5e8881df4876223ae0\" data-watermark-src=\"v2-60900770942e127b0989c709530b7ae3\" data-private-watermark-src=\"v2-1f2f76b6801af9a2d5a0b828eec7e57f\"></p>\n<p data-pid=\"NDNRFfMN\">如果关心新能源车的朋友们，就会发现为什么现在的纯电动汽车会比传统燃油车重视底盘包裹/涂装的原因了，并不仅仅是为了防护电池组外壳受损，而是能有效降低底盘传来的噪音，因为<b>纯电动车没有发动机、变速箱等部件的“大噪音”来源</b>，三电本身就运行安静，这时候底盘如果不做好防护，往上传递的噪音对比其传统燃油车来说，这种底盘杂音就会十分突出明显。而做好底盘的包裹，也能有效减少温差对车内的影响，提高宝贵的续航。所以纯电动车的车型如果大家细看，基本都是车企做好了底盘包裹/涂装才会出厂的。</p>\n<p data-pid=\"dafw5PMn\"><b>最后总结下，底盘装甲的优点是防小幅度的冲击和刮擦，能有效防止腐蚀也能部分提升NVH，盛夏降低空调能耗，提高驾驶经济性。</b></p>\n<p data-pid=\"nGMUsKk3\">我个人觉得底盘装甲并非是智商税，如果你的车型底盘防护较差，甚至很多地方都没有做防护漆面，还是南方潮湿地区或海滨城市或者经常下大雪的城市，或者行驶路面碎石较多，路况较差的话，建议新车还是做下底盘装甲。</p>\n<p data-pid=\"4PNTztqx\">但如果所购车型实际已经有了较好的底盘包裹和防锈，在干燥路面下可以保质10万公里或者5年以上的。实际早期可以不做，几年后做保养的时候，如果出现了原有保护层脱落的情况，再做也不迟。</p>\n<p data-pid=\"82TyniEX\">当然如果觉得底盘装甲贵的话（好一点的都要上千），也不打算出售二手车，也可以不做底盘装甲，平时开车/停车的时候多注意，洗车的时候要洗车店帮忙升下车子清洁下底盘也行。</p>\n<p data-pid=\"woZitpTL\">（图片来源网络，侵删！）</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/will-liu-16?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Will.liu</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/544552962/answer/2608485373?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">10 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/543757211?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">汽车做底盘装甲的好处有哪些？</a><br><a href=\"http://www.zhihu.com/question/543466287?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">汽车底盘装甲到底有必要做吗？会不会是智商税?</a><br>\n","link":"http://www.zhihu.com/question/544552962/answer/2608485373?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"双叉臂悬架和麦弗逊悬架在驾驶感受上有哪些的差异？","date":"2022-08-04 09:19:53","description":"\n<p data-pid=\"YTE4QjMz\">先说观点，后面咱们细聊，麦弗逊悬挂结构简单且占用空间特别小，但由于麦弗逊悬挂减震筒固定于车轮的特点限制了针对不同路面滤除振动的表现。双叉臂悬挂可灵活地按照不同路面上下活动并滤除振动，但是占用空间大。让我们一起来基于实例看一下它们的特点和演进是怎么样的吧。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-3e88c68f5f1f3ad775f8cc23e167373f_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1200\" data-rawheight=\"627\" data-watermark=\"watermark\" data-original-src=\"v2-3e88c68f5f1f3ad775f8cc23e167373f\" data-watermark-src=\"v2-11c050742015ff96f09e35e8ca8a8a69\" data-private-watermark-src=\"v2-31b3527a6d81cef90324a72112d4906c\"></p>\n<p data-pid=\"w6YHYUJI\">↑麦弗逊悬挂和双叉臂悬挂的区别</p>\n<p data-pid=\"INmQKFoy\">相信谈到悬挂大家想到的就是独立悬挂还是非独立悬挂。其实以上都是汽车悬挂的悬挂系统，它需要和减震系统搭配才能充分发挥效能。而减震系统主要核心部件就是弹簧和减震器。独立悬挂的结构特点是车桥做成断开的,每一侧的车轮可以单独的通过弹性悬架与车架连接,两侧车轮可以单独跳动,互不影响。汽车悬挂具体由悬架摆臂、支柱和减震弹簧等部件组成。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-7b6f575f4e2c96f7f7389a2a644c8884_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"855\" data-rawheight=\"412\" data-watermark=\"watermark\" data-original-src=\"v2-7b6f575f4e2c96f7f7389a2a644c8884\" data-watermark-src=\"v2-4db4c378a0f9607a631ad32619c55869\" data-private-watermark-src=\"v2-fe03ef592df45a80659f89279598f73b\"></p>\n<p data-pid=\"XMpZpCWt\">↑独立悬挂与非独立悬挂系统组成</p>\n<p data-pid=\"gSncr24I\">弹簧的工作原理就是对车身质量进行支撑。当静止时弹簧处于静止位置。当行驶中弹簧随着路面起伏压缩或弹开，从而转化成可接受的车身振动。这种振动体现为振幅和振动周期。有了弹簧可以将路面的起伏转成可接受的车身振动。但如果不加干涉这种振动将长时间持续下去。就像高考物理考题中的理想弹簧和滑块一样，必须有一定的摩擦力才能停下来。这种摩擦力在汽车悬挂中称为阻尼。减震器就是用来提供这种阻尼的。它让车身振幅随周期更快速的减小。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-d45ac0c6f5bfa5a8ec078a3533c6620d_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"722\" data-rawheight=\"444\" data-watermark=\"watermark\" data-original-src=\"v2-d45ac0c6f5bfa5a8ec078a3533c6620d\" data-watermark-src=\"v2-3571a62fab3730088d52b3bd9c4a8ffa\" data-private-watermark-src=\"v2-b6ba8d279f54b92e299fe82b2f451607\"></p>\n<p data-pid=\"ST7eDdm7\">↑汽车悬挂减震系统的减震器工作原理</p>\n<p data-pid=\"hMewLhSt\">小星借着朋友的手绘图来给大家讲讲麦弗逊悬挂、双叉臂悬挂和增强麦弗逊悬挂的区别吧。感谢朋友浅显易懂的手绘图。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-be9916141692affe5035e9951057cf1d_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"540\" data-watermark=\"watermark\" data-original-src=\"v2-be9916141692affe5035e9951057cf1d\" data-watermark-src=\"v2-3594d3bf3547d59cec53c03c20bbd29c\" data-private-watermark-src=\"v2-7715d2311d14b8a2979d002bbfb3d579\"></p>\n<p data-pid=\"ZydJ5-rD\">↑悬挂对比麦弗逊（左）、双叉臂（中）和增强麦弗逊（右）</p>\n<p data-pid=\"kXZ9k78D\">麦弗逊悬挂广泛应用于市场上大量的车型上。原因是它结构简单且占用的空间特别小。可以看到麦弗逊悬挂的减震筒固定点就在车轮上，而车轮与底盘通过活动点连接。同样由于麦弗逊悬挂减震筒固定于车轮的特点限制了针对不同路面滤除振动的表现。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-01c8d800d7ab26df3fc0fb0a287a4891_720w.gif?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"409\" data-watermark=\"watermark\" data-original-src=\"v2-01c8d800d7ab26df3fc0fb0a287a4891\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"fKTJaGaZ\">↑麦弗逊悬挂工作原理</p>\n<p data-pid=\"r6Tl_PrA\">麦弗逊悬挂的优点为：</p>\n<p data-pid=\"p0ldATX1\">结构简单</p>\n<p data-pid=\"ta3iK5sf\">低制造成本</p>\n<p data-pid=\"zBJwN4xX\">较双叉臂悬挂更轻</p>\n<p data-pid=\"uao2PB9h\">麦弗逊悬挂的缺点为：</p>\n<p data-pid=\"nFww3T15\">前束角受垂直轴向位置影响</p>\n<p data-pid=\"_Yq8srQh\">选择前束角的自由度受限</p>\n<p><img src=\"https://pic2.zhimg.com/v2-c68c6e81fe2cd0ec24733feb8605c930_720w.gif?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"409\" data-watermark=\"watermark\" data-original-src=\"v2-c68c6e81fe2cd0ec24733feb8605c930\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"7UjUyfvV\">↑双叉臂悬挂工作原理</p>\n<p data-pid=\"G6QlQse2\">发动机横置化布局设计导致发动机舱的大部分空间都被发动机和变速箱所占据，大部分车型只能采用节省空间的麦弗逊独立前悬挂。但是由于其单一连接点的简单设计使其表现只能说中规中矩，在某些复杂路况还是表现出捉肩见肘应对困难的现象。高端车型会更多的使用双叉臂悬挂。双叉臂悬挂的减震筒和车轮的两头分别通过两个活动点固定在上下两个叉臂上。因此其可灵活地按照不同路面上下活动并滤除振动。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-4a51b25e1a08014db4a69eee475aebb8_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"300\" data-watermark=\"watermark\" data-original-src=\"v2-4a51b25e1a08014db4a69eee475aebb8\" data-watermark-src=\"v2-db6e7bdf21b43dba28ab4f1e62023362\" data-private-watermark-src=\"v2-c937ee48b3ea0046418ea818a582ae25\"></p>\n<p data-pid=\"zL5fJmUO\">↑悬挂对比麦弗逊（左）和双叉臂（右）</p>\n<p data-pid=\"nQJhZWQl\">但双叉臂悬挂对空间的要求很高，大部分应用车型为纵置发动机车型。如何解决空间的限制和更高性能的要求，通用的答卷就是增强型麦弗逊悬挂HiPerStrut。其减震筒和车轮的一头通过一个活动点固定在底部的叉臂上，上部另一头通过活动点相连接。既保证了紧凑的空间又保证了悬挂的性能。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-5a6ac32d2e188f4d9ba3759604075432_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1348\" data-rawheight=\"1236\" data-watermark=\"watermark\" data-original-src=\"v2-5a6ac32d2e188f4d9ba3759604075432\" data-watermark-src=\"v2-6028c1c80afb3d6fac551498785f9428\" data-private-watermark-src=\"v2-dfb4cfd8ba7d548cc36bd5861ed35099\"></p>\n<p data-pid=\"tetNTeXX\">↑君威GS搭载的增强麦弗逊悬挂</p>\n<p data-pid=\"f_Gc-jcZ\">君威GS采用了HiPerStrut前悬挂具有两个优点：</p>\n<p data-pid=\"K69oIi_g\">能够防止出现扭矩转向，使车辆在急加速时仍能轻松控制方向</p>\n<p data-pid=\"ZOIrQKx3\">在转弯过程中保持车轮的负外倾角，使轮胎保持良好的抓地力</p>\n<p><img src=\"https://pic1.zhimg.com/v2-1a8213bcd1f5e8da7bb63de13b4c7cb5_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"451\" data-watermark=\"watermark\" data-original-src=\"v2-1a8213bcd1f5e8da7bb63de13b4c7cb5\" data-watermark-src=\"v2-e1e751d48fdc8f57cc65d0f7293fbd6d\" data-private-watermark-src=\"v2-8c9344585bb742bc630e192eb55686df\"></p>\n<p data-pid=\"4ZAyVwUk\">↑通用汽车HiPerStrut增强麦弗逊悬挂</p>\n<p data-pid=\"t6kwv2ra\">综上所述，麦弗逊悬挂结构简单且占用空间特别小，但由于麦弗逊悬挂减震筒固定于车轮的特点限制了针对不同路面滤除振动的表现。双叉臂悬挂可灵活地按照不同路面上下活动并滤除振动，但是占用空间大。而君威GS通过增强型麦弗逊前悬挂既保证了紧凑的空间又保证了悬挂的性能。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/labixiaoxing?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">辣笔小星</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/322431971/answer/2602450244?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">19 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/543410432?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么越来越多的车用双叉臂悬架？</a><br><a href=\"http://www.zhihu.com/question/545072674?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么汽车前轮一般都用麦弗逊悬架？</a><br>\n","link":"http://www.zhihu.com/question/322431971/answer/2602450244?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"新玩意 115｜少数派的编辑们最近买了啥？","date":"2022-08-04 09:19:44","description":"关于栏目很多读者都会好奇少数派的编辑们到底平时都「买了啥」。我们希望通过「编辑部的新玩意」介绍编辑部成员们最近在用的新奇产品，让他们自己来谈谈这些新玩意的使用体验究竟如何。内容声明：《新玩意》栏目如含 ...<a href=\"https://sspai.com/post/74997\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/74997"},{"title":"滑板底盘近来特别火，到底是在炒概念还是真的发展趋势？","date":"2022-08-04 09:19:03","description":"\n<p></p>\n<p data-pid=\"ou0rWcR4\">我的观点如下：</p>\n<h2>目前国内的滑板底盘话题基本都是炒概念，滑板底盘本身确实有它的背景，但是需要的是一个体系的发展，而不是光光做一个滑板底盘这么简单。</h2>\n<hr>\n<p data-pid=\"e9xxxp6v\">滑板底盘的概念最早是在2002年由通用汽车发布的一个概念平台，叫做GM Autonomy Concept。这个平台是以氢能燃料电池为能源。GM Autonomy是第一款专门围绕燃料电池推进系统设计的汽车，它是第一款依靠线控技术而不是机械控制来进行油门应用和转向等操作的燃料电池汽车。取而代之的是没有踏板和方向盘，取而代之的是类似飞机的控制系统。</p>\n<p><img src=\"https://pica.zhimg.com/v2-5b29b1a5190cb8ba0a3ca3cd9c7be199_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"watermark\" data-original-src=\"v2-5b29b1a5190cb8ba0a3ca3cd9c7be199\" data-watermark-src=\"v2-6c4a5f2de5411f55d773d1ff5a118367\" data-private-watermark-src=\"v2-905c78566e2c8555c8cfee2b70e1b66e\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-38f1c489cd9615d3072bdb45d44f0bb0_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"watermark\" data-original-src=\"v2-38f1c489cd9615d3072bdb45d44f0bb0\" data-watermark-src=\"v2-82cca2b6ec4c355040a79d623d6fa2a4\" data-private-watermark-src=\"v2-d98b4905c19ce867349abdcd95aa2d5e\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-fa9915045bb719aa64929b80761fd82a_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"watermark\" data-original-src=\"v2-fa9915045bb719aa64929b80761fd82a\" data-watermark-src=\"v2-5d9864be475e463c0a5d0d49dcae50ea\" data-private-watermark-src=\"v2-9b1a587c1c7008fa27f66eec5e662f80\"></p>\n<p data-pid=\"dOSKKTHd\">基于这个概念，衍生设计出来的是GM Hy-wire的概念车。而且它的样车结构和基于滑板底盘、线控系统衍生出关于未来驾驶和人机交互方面更多更详细的想法和概念。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-e954dd196960ede62f50d68ab8005bf0_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"768\" data-watermark=\"watermark\" data-original-src=\"v2-e954dd196960ede62f50d68ab8005bf0\" data-watermark-src=\"v2-b74c77b8c884998c2859125ddb3524b5\" data-private-watermark-src=\"v2-0b5c035f1aa76246102d4a1682ab9e6a\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-56ecaf5649b180437a858cec31f091f1_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1032\" data-rawheight=\"717\" data-watermark=\"watermark\" data-original-src=\"v2-56ecaf5649b180437a858cec31f091f1\" data-watermark-src=\"v2-1993711099e7fcccd0ee87339833e24e\" data-private-watermark-src=\"v2-4e748996ea22ea9ca76946252f50660d\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-5478d7a96aef244c0b46194b583d7e47_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"768\" data-watermark=\"watermark\" data-original-src=\"v2-5478d7a96aef244c0b46194b583d7e47\" data-watermark-src=\"v2-506c780d4c1b09a75814d92f6cbacd62\" data-private-watermark-src=\"v2-a4f0ea357356fe01db3287ca9dc94a0c\"></p>\n<p data-pid=\"vYNzAUbB\">你在上面可以看到，不仅有中控大屏，还有非圆形方向盘，方向盘大屏等。这个平台还有无人驾驶的功能预期，因为线控的背后就是更加自动化的设计。</p>\n<h2>请注意，这是整整20年前的汽车工业设计和和技术。滑板底盘不是新技术，滑板底盘本身，仅仅是一种为了支持某种整车设计理念而存在的非承载式车身结构。滑板底盘必须要与整车设计的目标甚至未来的交通运输业的整个生态发展结合在一起，才有其意义。</h2>\n<hr>\n<p><img src=\"https://pic2.zhimg.com/v2-379ab400e07628594e7eba7a70358e02_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1190\" data-rawheight=\"536\" data-watermark=\"watermark\" data-original-src=\"v2-379ab400e07628594e7eba7a70358e02\" data-watermark-src=\"v2-71eca3047a63a170012ed9f24cac5264\" data-private-watermark-src=\"v2-8e9dd89b895a85f461076ebb080b8b7e\"></p>\n<p data-pid=\"NND7muVH\">滑板平台目前被宣传的主要优点就是以电池包结构以及整合在一起的横纵梁结构为基础，然后将转向系统、制动系统、驱动系统、前后防撞梁、前后避震还有轮胎等一股脑结合在一起，从而实现一个集成一体化的设计，平台的复用（不同整车就改上面的可替换车身结构就好了）。</p>\n<p data-pid=\"fo3-u8N4\">在现在的很多国内的宣传中，对所谓滑板底盘各种溢美之词，以欧阳明高在电动汽车百人会上为滑板底盘下了定义之后，滑板底盘就成为了一个很高大上很先进的概念，然后国内就有这种说法：燃油车的底盘叫底盘1.0，现在的电动车的平台，把电池包整合到底盘平面的，叫底盘2.0，然后滑板底盘，就叫智能化的底盘3.0。通过这种1-2-3的结构，认为滑板底盘，一个底盘结构，就天生自带了智能的概念在里面。</p>\n<p data-pid=\"CCpWePGt\">这就好比，很多人营造了一个“油改电”驾驶性必然很差，原因是因为电动车的底盘架构更高级的概念，现在又有人想要告诉你“电改智”平台肯定很糟糕，只有一开始就基于智能的”滑板底盘“才是王道。</p>\n<h2>然而，实际的情况是，是由于长续航电动汽车所需要携带的超重的电池无处安放，才被迫重新设计新的底盘架构做深度整合的。很多带电量小的混动或者增程车型（纯电驱）的底盘响应和整车驾驶性碾压当前的绝大多数纯电车型。同样，滑板底盘本身的发展需要大量的技术前提，甚至整个智能交通运输业环境的发展。滑板底盘本身，不是高科技，更不是绝对的发展方向，它需要协同发展才能成为“智能”整车体系的一部分。</h2>\n<h3><b>首先，滑板底盘技术的前提是硬件技术（特别是电池系统和电驱）已经充分发展，平台设计者可以充分的应用足以应对任何场景的饱和性能的硬件来设计滑板底盘；</b></h3>\n<p data-pid=\"wfGynPWh\">由于目前电动汽车投资的重点依然是大型豪华车型，简单的来说，就目前包括电池系统和电驱以及其他匹配的硬件（例如智能热管理等）的发展进展来说，我想还远没有到一套硬件标准化集成化开发就可以节省研发费用和提升效率的情况。</p>\n<h3><b>其次，滑板底盘技术的前提是线控技术的充分发展，特别是完全的线控制动和线控转向。</b></h3>\n<p data-pid=\"woT8YQXq\"><b>真正纯粹的滑板底盘要彻底的从机械结构里面解放出来，这也是滑板底盘专注于智能和实现真正意义上的平台化的基础，就是要和线控集合。但是，实际的情况是，线控的智能化进度并没有做到那么完善。其中特别是线控转向。</b></p>\n<p data-pid=\"mpQH3X0C\"><b>很多人过度低估了转向的难度，特别是线控，就意味着算法必须彻底的了解而且精确的掌握实际转向的过程，然后为不同的车轮提供不同的转动策略。特别是转向差速的控制，在低速的时候做不好无非就是轮胎磨损，高速做不好车辆直接就会失控。</b></p>\n<p data-pid=\"-9Kb6Kdj\"><b>而滑板底盘的线控还应当要做到结合转向、驱动、制动，适应各种路况场景进行主动调节。</b></p>\n<p data-pid=\"luejkvDF\"><b>所以目前在研究的分布式电驱和实际上是线控转向的电机结构，要么是应用在低速的商用车辆或重载上，要么是需要增加多个冗余系统和结构来进行安全保障。</b></p>\n<p data-pid=\"jkvlqLkx\"><b>而传统车辆，机械结构的差速器等转向系统还有其他的制动系统等已经很成熟了。不能为了滑板而滑板吧。</b></p>\n<h3><b>第三，滑板底盘技术的前提是主动安全技术的充分发展；</b></h3>\n<p><img src=\"https://pica.zhimg.com/v2-a4a11b47cbeaa58b6114512cb5d44842_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"7680\" data-rawheight=\"3545\" data-watermark=\"watermark\" data-original-src=\"v2-a4a11b47cbeaa58b6114512cb5d44842\" data-watermark-src=\"v2-72b8c92b12a1d721c2b3a329012c5a80\" data-private-watermark-src=\"v2-a72307973f656c3181ac77b73cd637d1\"></p>\n<p data-pid=\"D0Qz5Vmu\">请注意，我这里其实没有提自动驾驶。</p>\n<p data-pid=\"So0gcqbI\">主动安全技术的发展和成熟，才能让滑板底盘只要具备一个基础的物理防护能力，就可以满足多种平台的安全要求。我其实很喜欢上面这个Canoo的滑板平台柔性适应的这个图，其实包括通用汽车在CES等场合以及在更早时候发布了很多这种平台图。他们都有一个共同的特点，那就是从城市公共交通车辆，到运输商用车，到重载卡车，再到高性能个人车辆，全部都是同平台。但是这个设想成熟的前提，必须是主动安全技术已经发展到以物理防护为基础的被动安全只需要做到基本防护，就可以实现平台安全。否则，要么就是公共交通车型的平台的结构强度巨大浪费，或者就是重型运输和个人性能型车辆的安全性能不足。</p>\n<p data-pid=\"B6HZ0Jh_\">以主动安全取代被动安全成为车辆安全的核心，是需要整个体系的发展。</p>\n<h3>第四、滑板底盘技术的前提是包含智慧交通在内的智慧驾驶系统技术的充分发展</h3>\n<p data-pid=\"pOqMut37\">其实这也是和前面几点相互关联的，只有自动驾驶或者至少是非常先进的自动驾驶辅助技术，才能充分的发挥线控底盘的作用和提升主动安全的效果；只有智慧交通的充分发展，才能彻底改变主动安全和被动安全对于人员安全的实际影响，也才能让自动驾驶技术得到安全的充分保障。</p>\n<hr>\n<h2>最后，我们来总结一下，回答那就是：</h2>\n<h2>如果有人告诉你，滑板底盘就是牛，就是智慧，就是未来。那么这个人大概率就是要割你韭菜。真正想做滑板底盘的人，要么同时在做上面的这一堆业务，要么就是先忽悠产业入局，然后自己在慢慢等待上面的产业条件成熟。</h2>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/JackyQ?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">JackyQ</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/520614454/answer/2602234908?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">30 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/516023168?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">资本最近爆火的滑板底盘是一种概念产物，还是未来真正有其一席之地？</a><br><a href=\"http://www.zhihu.com/question/516023247?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">爆火的滑板底盘最适合落地在哪种场景？</a><br>\n","link":"http://www.zhihu.com/question/520614454/answer/2602234908?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"空气悬架「又贵又容易坏」，为什么没有被淘汰？","date":"2022-08-04 09:18:26","description":"\n<p data-pid=\"ffuA5tv7\">前段时间理想L9空气悬架爆了事情，我写了一篇文章，里面提到：</p>\n<p data-pid=\"HsGMEleH\">“……理想以一己之力，将“空悬耐久已经不是问题，包括后来发展的中国国产空悬都已成熟应用”的行业尝试给民众科普的观点，一脚刹车带回了解放前。……”</p>\n<p data-pid=\"jsFE8C8H\"><a href=\"https://www.zhihu.com/question/543877280/answer/2581228527\" class=\"internal\">理想 L9 试驾车疑似空悬断裂，厂家称缓冲环为「试制件」受质疑，该问题存在哪些安全风险？</a></p>\n<hr>\n<h2>首先，空气悬架的定义：</h2>\n<p><img src=\"https://pic2.zhimg.com/v2-ad5f3427296f42e7562448473d288ebc_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1000\" data-rawheight=\"629\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-ad5f3427296f42e7562448473d288ebc\" data-watermark-src=\"v2-9966e669f9c3c0a91ea615e61df00944\" data-private-watermark-src=\"v2-ed40de8ef8af887e638da4ae31e90491\" data-tags=\"porn\"></p>\n<p data-pid=\"-4TRMtGz\">汽车悬架系统是车架与车桥之间，或车架与车轮之间的传力连接装置的总称，其核心功能是吸收路面传给车架或车身的冲击力，降低冲击力引起的震动，进而保证汽车的行驶平顺性与操控稳定性。</p>\n<p data-pid=\"OCFqOpbq\">悬架系统主要有导向元件、弹性元件和阻尼元件三大组成部分，其中导向元件主要有推力杆、导向臂、摆臂等，弹性元件主要有钢板弹簧、螺旋弹簧、扭杆弹簧、橡胶弹簧、油气弹簧及空气弹簧等，阻尼元件主要有减振器、转向阻尼器等。</p>\n<p data-pid=\"FRHhaS_K\">空气悬架系统系统的结构主要分为：</p>\n<p data-pid=\"59-lTTFe\">空气供给部分：</p>\n<p data-pid=\"7PEjRiPN\">主要是由空气压缩机、干燥器、高度调整阀、排气阀等结构。空气供给系统在控制器的算法控制下，控制进入到空气弹簧中的高压空气的流量和速度，从而实现调整空气弹簧的刚度和伸缩长度。</p>\n<p data-pid=\"wpL5OmED\">空气弹簧：</p>\n<p data-pid=\"oMqgIvAO\">从定义结构来说其实有波纹管式（国内叫袖式）、膜式和囊式，和前面说到的空气供给系统一起，利用空气的可压缩性来承担冲击载荷。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-4a4d9de64d5ab22b471dd4c09e2f347a_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1400\" data-rawheight=\"1011\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-4a4d9de64d5ab22b471dd4c09e2f347a\" data-watermark-src=\"v2-eebb33d09f208aecf1a1a48485a4ff8b\" data-private-watermark-src=\"v2-53d372e93282c9a39e1f50d93326e93d\"></p>\n<p data-pid=\"8E5Yrk66\">减震器</p>\n<p data-pid=\"MQDBtuDD\">目前和空气悬架匹配的一般是电子减震器，可调阻尼，实现舒适性的提升。</p>\n<p><br></p>\n<p data-pid=\"_EU7ZrAS\">空气悬架具有调节车身高低度以及悬吊阻尼的功能，有些类型可配合电子传感器以及ECU控制器，当侦测到你入弯有侧倾或支撑性不足时，空气悬架可以配合分别调节各自悬吊的刚度，阻尼以及车身高度，从而帮助车子提高路面通过性以及加强车子的操控与稳定表现。</p>\n<p data-pid=\"7QAIpMYx\">但是请注意，上述空气悬架的功能仅仅是从空气悬架能实现的功能，它不仅需要硬件的支持，还需要算法的支持。也就是说，并不是说所有汽车品牌的空气悬架都具备上面说的除了动态调整车身高度和改变阻尼之外的在动态驾驶中具备灵活和准确调整能力的技术，特别是近年来一些廉价的系统。这需要看汽车厂商是否在宣传中强调了这一点。</p>\n<h2>空气悬架系统的应用历史</h2>\n<p data-pid=\"uDkW3Put\">空气悬架最早是在豪华或运动型乘用车上被发展起来，然后在豪华皮卡、巴士以及重型长途卡车上被广泛应用，近年来在电动汽车发展中，被广泛应用的悬架系统。</p>\n<p data-pid=\"fTZxD3Nv\">空气悬架的起源其实众说纷纭，比较受人认可的是由美国的Firststone公司在1933年首次应用在一台名为Stout-Scarab的试验性车辆上。这是一款使用四个橡胶波纹管代替传统弹簧的后置发动机车辆。空气由连接到每个波纹管的小型压缩机提供。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-69f5584ef04a77f6b5edeeb80f203c33_720w.jpg?source=b1748391?rss\" data-rawwidth=\"422\" data-rawheight=\"221\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-69f5584ef04a77f6b5edeeb80f203c33\" data-watermark-src=\"v2-1c9d37f3e2895aff542077e6b9e6e2c3\" data-private-watermark-src=\"v2-1e18c666874a5e8a430a40330c5e91d0\"></p>\n<p data-pid=\"aR_7Rojx\">这里其实多说一句，Firststone公司脱胎于美国哥伦比亚越野车公司，哥伦比亚越野车公司是在1903年之后伴随着美国的电动汽车发展而快速发展起来的一家新公司，得到了很多投资并开始扩大豪华车业务，而Firststone公司专做豪华品牌。</p>\n<p data-pid=\"yc9oTO_1\">第二次世界大战后，随着一些空气弹簧的厂商推出更加可靠的空气弹簧零件，首先在1940s末-1950s，在赛车上空气弹簧并使用，而且成为美国赛车和改装车文化的一种潮流。</p>\n<p><img src=\"https://pica.zhimg.com/v2-ba48ed6012267d2404320a75833e425e_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1688\" data-rawheight=\"961\" data-size=\"normal\" data-caption=\"1950s的空气弹簧配件\" data-watermark=\"watermark\" data-original-src=\"v2-ba48ed6012267d2404320a75833e425e\" data-watermark-src=\"v2-68225cec7a486eb847ec20a95d2e944d\" data-private-watermark-src=\"v2-a74d18a70b8363f7ee6d427720caceec\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-aa78577b883eec9c85efd098afab8f07_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1920\" data-rawheight=\"1279\" data-size=\"normal\" data-caption=\"配备空气弹簧的1950年美国赛车\" data-watermark=\"watermark\" data-original-src=\"v2-aa78577b883eec9c85efd098afab8f07\" data-watermark-src=\"v2-7c1b130523251524092f2b2cd591ca8a\" data-private-watermark-src=\"v2-d05efb0c90628e0279c4491a579f1c8e\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-16fcef6383b9f944b12f7c746f2c1f35_720w.jpg?source=b1748391?rss\" data-rawwidth=\"680\" data-rawheight=\"452\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-16fcef6383b9f944b12f7c746f2c1f35\" data-watermark-src=\"v2-5f486f961973f2f17155d8e9c1742dec\" data-private-watermark-src=\"v2-5b972c0e508e48d54ea5a08534e55a05\"></p>\n<p><img src=\"https://pica.zhimg.com/v2-93d7068cd3371c5b896c3cd5583fa384_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1200\" data-rawheight=\"799\" data-size=\"normal\" data-caption=\"引导空气悬架赛车进入维修点的1960s美国赛车比赛现场照片\" data-watermark=\"watermark\" data-original-src=\"v2-93d7068cd3371c5b896c3cd5583fa384\" data-watermark-src=\"v2-2a643d797564a3bb0315d5b712737879\" data-private-watermark-src=\"v2-7c06656331711747b8144c60cdce022a\"></p>\n<p data-pid=\"4tW8_Ak0\">空气悬架在乘用车上的真正的量产化应用是从1950s末开始美国通用汽车在凯迪拉克品牌上大规模使用空气弹簧开始的。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-5ab2604dbff578fb25b7d2184c5eda79_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1600\" data-rawheight=\"1195\" data-size=\"normal\" data-caption=\"1957 Cadillac Eldorado BROUGHAM 177\" data-watermark=\"watermark\" data-original-src=\"v2-5ab2604dbff578fb25b7d2184c5eda79\" data-watermark-src=\"v2-73af4df3ca119da16f619bbe38778229\" data-private-watermark-src=\"v2-dac2eef0079a1d1027b76a0fa9bb6203\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-54c68a9996b7e932784eaa65776906f8_720w.jpg?source=b1748391?rss\" data-rawwidth=\"771\" data-rawheight=\"662\" data-size=\"normal\" data-caption=\"1957 Cadillac Eldorado BROUGHAM 177 的空气悬架套装\" data-watermark=\"watermark\" data-original-src=\"v2-54c68a9996b7e932784eaa65776906f8\" data-watermark-src=\"v2-eec8347785f75e90fc39b6b360b7644d\" data-private-watermark-src=\"v2-0ca481ada67306293dff122441310ffa\"></p>\n<p data-pid=\"W3c7JFS7\">尽管在1950s之后，空气悬架的热潮席卷了美国的赛车和改装车领域，并由凯迪拉克、林肯等品牌的豪华车进行了量产应用推广，但是在乘用车领域并没有真正意义上的推广起来。其根本的原因在于：1. 系统昂贵；2. 耐用性较差。 当车主越来越多的发现自己的车子趴在路边，意识到是空气弹簧已经失效了，进行维修带来的沮丧心态难以再支持这个昂贵的技术。</p>\n<p data-pid=\"XMWI5VQu\">与此同时，对于车重不大的乘用车来说，随着基于螺旋弹簧的悬架系统的不断优化和技术迭代，特别是在1933年后开始发展起来的液压减震器技术对传统悬架在减少颠簸和改善舒适度方面带来的显著提升，空气弹簧的性价比越来越低。而且这套系统需要的布置空间也不少，所以渐渐的空气悬架系统的部署并没有那么普及。</p>\n<p data-pid=\"yh4viWg4\">但是对于改装车，重型皮卡，巴士，还有载重型卡车，由于这些车辆的自重大，而且对于长时间驾驶的避震需求更高，所以对于这些车辆的空气弹簧的普及程度，特别是发达国家的车型中的部署比例就非常普遍了。美欧的重型卡车和牵引车，空气弹簧的覆盖率超过90%。高端长途客车采用空气弹簧的比例也几乎达到了100%。</p>\n<p><img src=\"https://pica.zhimg.com/v2-6879dff71ee76204046e398fbc73cc3d_720w.jpg?source=b1748391?rss\" data-rawwidth=\"634\" data-rawheight=\"355\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-6879dff71ee76204046e398fbc73cc3d\" data-watermark-src=\"v2-add180e5fa416940b41a1173314eecb8\" data-private-watermark-src=\"v2-9852424a4d5b9d4345cbdad2e90bb90f\"></p>\n<p data-pid=\"28Zvrbic\">在近年来在乘用车中，主要是豪华车型上在使用空气悬挂，例如奥迪、宝马、奔驰、凯迪拉克等，那么宾利等品牌就更不用说了。不过最早应用空气悬架的凯迪拉克目前情况有些特殊，从2002年开始它又自己开发新一代的MRC主动电磁感应悬挂系统来布局部分顶配新车型，例如目前在售的凯迪拉克CT6。这个后续我们另开文章再谈。</p>\n<h2>空气悬架系统伴随电动汽车发展的再次兴起</h2>\n<p><img src=\"https://pic1.zhimg.com/v2-d5f50e0065790fab7b04bc8bbea783a6_720w.jpg?source=b1748391?rss\" data-rawwidth=\"797\" data-rawheight=\"382\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-d5f50e0065790fab7b04bc8bbea783a6\" data-watermark-src=\"v2-63bd51a572207e51470650ee2c6d8f73\" data-private-watermark-src=\"v2-a92a1803b65e2f9eacc8c4664cf3c8de\"></p>\n<p data-pid=\"eJJU0Fpx\">空气弹簧应用在电动车上，比较有代表性的还是特斯拉。特斯拉从Model S/X上就开始推广它的智能主动式空气悬架。当然首先在当时，这两款车的售价并不便宜，本身的定位也是电动智能豪华车，所以上空气悬架并不稀奇。不过更多的是这个智能上。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-2c33ce67c95627ec9fe9e3c9fdf4bba2_720w.jpg?source=b1748391?rss\" data-rawwidth=\"938\" data-rawheight=\"977\" data-size=\"normal\" data-caption=\"2014年特斯拉model S对智能空气悬架的系统介绍\" data-watermark=\"watermark\" data-original-src=\"v2-2c33ce67c95627ec9fe9e3c9fdf4bba2\" data-watermark-src=\"v2-c34ee4eca2fcd90d280c6b36f2461f68\" data-private-watermark-src=\"v2-b2afbc80b3d8a4dcada9631e99a0b713\"></p>\n<p data-pid=\"g_Msy4-e\">特斯拉应用空气悬架一方面是为了改善空气动力学，在高速公路上高速行驶时降低悬架高度以减小空气阻力和升力，另一方面是为了改善驾驶性和舒适性。但是更重要的一点，其实是特斯拉的电子控制空气悬架系统可以给主机厂更大的自由度来尝试控制，这个可能才是特斯拉尝试想要的。</p>\n<p data-pid=\"bUqBWqSr\">所以特斯拉的舒适性和驾驶性方面，当时与其说是空气悬架的优势，其实更多的是后续随着算法的优化，实现更好的阻尼特性和悬架高度方面的自主响应。</p>\n<p data-pid=\"uIVjp_wk\">第一批特斯拉在上海的时候有一个笑话，说上海当时有一条道路在维修，地面上铺设了铁板，会导致开车过去的时候产生颠簸。然后所有的特斯拉都学会了在经过这个道路之前会提升空气悬架高度。但是上海的维修速度很快，后来这些铁板被撤掉了，但是在后续半年多，所有的特斯了经过这个地点还是会提升高度，直到后来OTA升级之后才取消掉。</p>\n<p data-pid=\"qqGjjGtD\">国内的电动汽车应用空气悬架主要还是因为新一波初创公司的电动化是从高端化开始的原因，所以豪华车才配的空气悬架就成为了一个很好的硬件噱头。比较典型的应该是蔚来ES8。</p>\n<p data-pid=\"Kz0EYyHb\">特别是近年来长续航车型越来越流行，纯电动汽车普遍应用大容量电池包，将电池包放在汽车底盘上，空气悬架能更好地满足纯电动汽车对电池包保护、整车底盘轻量化等方面的新要求。</p>\n<p data-pid=\"9Q9UugmT\">此后出现的蔚来ES6把空气悬架的价格下探到了40万级别，然后是吉利的极氪001和东风岚图FREE下探到更低。</p>\n<p data-pid=\"tNMqqJ_R\">这个背后也是空气悬架从硬件角度不断成熟化以及中国本土的供应商开始中间从整个空气悬架系统方面进行国产化替代的因素。</p>\n<h2>空悬系统的国产化降本之路</h2>\n<p data-pid=\"FCWnI5wZ\">目前来说，空气悬架并没有多年前的5万级别那么昂贵。进口的空悬系统的报价大概在1.2-1.6万人民币，国产化系统大概在8000-10000左右。</p>\n<p data-pid=\"ptHbGfUS\">自主厂商首先把整个空悬系统从一个整体打散成分系统，然后逐步替代，分别定价。从蔚来汽车开始就已经在探索这么来做了。</p>\n<p data-pid=\"19tI7lOu\">国产企业采用定制化集成采购模式，在开发过程中将空气悬架系统与底盘系统合并研发，并将其分拆成空气供给单元、空气弹簧、减振器和传感器等若干小总成，向不同供应商采购；汽车厂商自行开发空气悬架系统电控系统的软件，并承担系统集成的职能。</p>\n<p data-pid=\"ecH8daSc\">目前这种开发模式还是比较成功，有希望打破空悬在中高级车型中覆盖比例，随着国产化企业越来越多，零件的销量越来越多，可以进一步降低成本。</p>\n<h2>空悬系统在电动车领域未来发展的挑战</h2>\n<h3>首先，空悬的结构设计本身就有很大的差别。</h3>\n<p data-pid=\"57LBfL3S\">目前大家在国产车上看到的空悬，和他们对标的一些百万级车型的空悬还是不能单纯的划等号的。这里面有设计强度，匹配结构系统差异之外，有些与强度和耐久直接相关的结构还是差异较大的。</p>\n<p data-pid=\"S7IEUDxs\">例如，价格在百万级的奥迪RS e-tron GT、保时捷、宝马的部分高端车型上使用的空悬是三腔体空悬，它的可靠性和耐受强度以及可调节性完全超越了单腔体，特别是对于瞬态工况的响应。还有一些全球品牌的高端车型采用的是双腔结构，这些都叫做多腔体空悬。</p>\n<p data-pid=\"kaedTqkB\">所以国内主机厂吹牛的界限最好不要超过100万，特别是一口气杀到500万以内地表最强这种话，建议还是慎言。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-f7661bcbc8d3793e9b33fca37a35cc55_720w.jpg?source=b1748391?rss\" data-rawwidth=\"898\" data-rawheight=\"507\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-f7661bcbc8d3793e9b33fca37a35cc55\" data-watermark-src=\"v2-81149431c737412cb07ef8d88a6e0db8\" data-private-watermark-src=\"v2-6e46f1eacf99687eaca1a88611f894f6\"></p>\n<p data-pid=\"gXncwxmW\">其实，就算是一样的单腔体空悬，设计强度、空气供给系统稳健性、材料选用方面，都在遭受空悬系统自己的局限性、企业成本控制的局限性以及安全标准和测试范围的局限性等的限制。特别是一些原本就是成本压力较大的三四十万级别的车型上，滥用空悬，其背后是否会因为成本控制压力而出现系统集成问题以及过度压缩安全边界带来的问题，其实目前来说谁也说不清楚。</p>\n<h3>其次，<b>空悬不是一个单纯的硬件，而是一个包含算法开发的主动式控制系统。</b>\n</h3>\n<p data-pid=\"w4FBh72j\">对于一些简单的调整高中低悬架高度以及中高速的阻尼和高度调整，基本上大家做的都差不多。但是动态驾驶过程与加速和制动时的算法，各家的表现千差万别，而且会影响空悬的耐久和安全。</p>\n<p data-pid=\"MKWvx8D5\">目前国内配空悬的一些车型，尤其是新势力车型我基本上都开过一圈了。我对于目前搭载空悬的几款国产车型的底盘调教的评价并不高。原因就是，这些车型用一个很软的悬架调教贯穿了整个驾驶过程，对于性能型的电动车来说，我个人不是很喜欢，而且事实上也不利于整车驾驶性和耐久性。</p>\n<p data-pid=\"cwto4ozV\">其中最典型的例子就是加速工况和急转向。带空悬的几款国产的电动车，油门稍大就变成了一艘“冲锋舟”，就是车头抬起，我印象最深刻的就是蔚来，应该不分车型。转向也是。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-89126f087803ae2f9d320e6b6af7eb5e_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1348\" data-rawheight=\"746\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-89126f087803ae2f9d320e6b6af7eb5e\" data-watermark-src=\"v2-f894748e9a028e42d2e582e134bf2841\" data-private-watermark-src=\"v2-776fe827609a10ad75e9d8801860fd48\"></p>\n<p data-pid=\"8dXMFF4e\">前段时间理想L9的空悬失效，很多人分析说可能是空悬的控制算法的问题，其实我觉得是可能的。不能将空悬的安全等同于传统的被动式悬架，随着硬件的系统的逐步标准化和系列化，算法将会是未来支撑空悬驾驶性和安全性的重要影响因素。</p>\n<h2>最后，我们再回到问题。</h2>\n<p data-pid=\"UPM8pxLE\">空气悬架近年来的发展和企业推广，已经逐步摆脱了“容易坏”和“奢侈昂贵”的帽子，而且由于空气悬架历史上带有的“豪华”属性，被很多企业在作为一种明星技术来应用。而且，空气悬架能有效提升驾乘体验，可满足国内用户越来越高的舒适性要求。这使它，继大尺寸中控屏、全景天窗等配置之后，成为许多厂商和车型追求差异化竞争力的选择。</p>\n<p data-pid=\"_Ka86yYj\"><b>所以说它淘汰确实过了，相反，目前是空气悬架发展的重要时期。</b></p>\n<p data-pid=\"xybusBDI\"><b>不过，发展的另一面是滥用，滥用所可能带来的问题，又反过来可能限制空悬的发展。</b></p>\n<p data-pid=\"U6-1EXmq\">在我看来，一个调教垃圾的空悬，比一个调教垃圾的传统悬架还要糟糕和危险。而新一代的半主动式悬架，已经表现出了与普通空气悬架性能类似甚至表现更好的态势（主要是响应性），所以最终决定空悬未来的，依然是主机厂的系统开发和算法发展。</p>\n<h2>最终还是要看系统集成后的实际驾驶性。单纯看整车是否搭载空悬硬件，不是一辆车是否安全、是否可靠和是否能表现出更好舒适性和驾驶性的依据。</h2>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/JackyQ?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">JackyQ</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/544751559/answer/2601920649?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">20 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/543421830?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">空气悬架和普通悬架的区别?</a><br><a href=\"http://www.zhihu.com/question/546066663?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">空气悬架容易坏吗？可以撑多少公里？</a><br>\n","link":"http://www.zhihu.com/question/544751559/answer/2601920649?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"如何评价民俗悬疑AVG游戏《山：临界幸存者》？","date":"2022-08-04 09:03:03","description":"\n<p data-pid=\"qjIR7pbL\">各位好，我是《山：临界幸存者》的制作人。本游戏是由我和另一位画师朋友俩人一起制作的民俗悬疑类AVG。虽然两个人都是社畜，但同为悬疑爱好者的俩人还是决定利用工作之余制作自己的游戏作品。</p>\n<p data-pid=\"HcYiJOX9\">趁着《山：临界幸存者》刚刚制作完成，在steam上开始发售之际，在这里和大家分享一下整个游戏制作过程的一些心路历程。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-5fc9d0582d8137bd6e8f297afc83a2c9_720w.jpg?source=b1748391?rss\" data-rawwidth=\"800\" data-rawheight=\"450\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-5fc9d0582d8137bd6e8f297afc83a2c9\" data-watermark-src=\"v2-f3f461828f11833f3289c47eb7c8b312\" data-private-watermark-src=\"v2-596ce0111b87950535d2db30f3725542\"></p>\n<p data-pid=\"gxt6hhwH\"><b>为了寻找失踪的妹妹，我来到深山中的村庄。</b></p>\n<p data-pid=\"VRGBPTf2\"><b>此时，这里正举行着三年一度的崇神仪式『仙姑宴』。</b></p>\n<p data-pid=\"yGLPtEE5\"><b>然而今年的祭祀并不平静，村中出现了一连串的死亡事件。</b></p>\n<p data-pid=\"a4Yeg9uV\"><b>难道说这是『血目仙姑』的诅咒吗？</b></p>\n<p data-pid=\"vATmd3iy\"><b>究竟是谁带走了我的妹妹，是谁打破了祭祀的禁忌。</b></p>\n<p data-pid=\"X9eZ3DCy\"><b>又是谁，拉开了那漫长杀戮剧的帷幕……</b></p>\n<p><br></p>\n<p data-pid=\"5atwC9mh\">作为一个悬疑爱好者，对偏僻的山村、神秘的祭祀、恐怖的杀人事件这类要素特别喜欢。不管是刀城言耶系列，又或者是EVER17、流行之神、鸣泣之时、回溯依存等游戏，这类悬疑神秘的作品都令我爱不释手。</p>\n<p data-pid=\"fvSbds5t\">另一方面我发现，中国古老的巫与祭祀，其实天然就很适合作为悬疑故事的题材。而（美少女）巫女，则更是《山：临界幸存者》的核心和出发点。</p>\n<p data-pid=\"fmMNLYVj\"><b>《说文·巫部》：巫，祝也。女，能事无形，以舞降神者也。</b></p>\n<p data-pid=\"Gk6UPCIk\">游戏中一共有四位女主角，其中两位同主角一样，都是从大城市来到村子的“外乡人”。而另外两位便是这神秘祭祀的巫女，她们的祭祀服装就是以中国东周时期的服饰特点作为参考，辅以简约、厚重、神秘的特点而设计出来的。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-ed08ecb4ccb5d06e30460aadd8b14af9_720w.jpg?source=b1748391?rss\" data-rawwidth=\"359\" data-rawheight=\"498\" data-size=\"normal\" data-caption=\"东周时期的服饰\" data-watermark=\"watermark\" data-original-src=\"v2-ed08ecb4ccb5d06e30460aadd8b14af9\" data-watermark-src=\"v2-a728aa59dc1f130456126cdf67f324c2\" data-private-watermark-src=\"v2-0fd6e6fb9e2fdbd935aba4932cf640a5\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-2815c03fa00eb9409cb7a8a5d4cd1642_720w.jpg?source=b1748391?rss\" data-rawwidth=\"554\" data-rawheight=\"369\" data-size=\"normal\" data-caption=\"东周时期的服饰\" data-watermark=\"watermark\" data-original-src=\"v2-2815c03fa00eb9409cb7a8a5d4cd1642\" data-watermark-src=\"v2-c8c5827748a8211933fb2097f9943660\" data-private-watermark-src=\"v2-0f59f365a85597aab847a6b3f6dab7b8\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-42ec146cb219101cd3cec237727b2c08_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1009\" data-rawheight=\"669\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-42ec146cb219101cd3cec237727b2c08\" data-watermark-src=\"v2-c86851bdcc9aa3b7d316da6fe1031bf1\" data-private-watermark-src=\"v2-57c046e12438cd2e08f9f7e5eb38470a\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-93199288a67e03cc13c4e4990da9ed41_720w.jpg?source=b1748391?rss\" data-rawwidth=\"849\" data-rawheight=\"683\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-93199288a67e03cc13c4e4990da9ed41\" data-watermark-src=\"v2-9b483d7ed4d0d44716e40a54679c836c\" data-private-watermark-src=\"v2-1fd580ac329b5bbf5139c6b66308c7a1\"></p>\n<p data-pid=\"DQVfJuZx\">我第一次接触东周时代的“巫”的概念，是在很早之前通过电视剧《东周列国志》所了解到的。跟近些年更偏重唯美、清新的古装片所不同的是，这部1996年所拍摄的历史片，更多的是对古代腐朽的封建礼教的批判。因此，这部片展现了东周时期许许多多黑暗、恐怖的地方，正所谓“礼崩乐坏”的年代。</p>\n<p data-pid=\"-i4F6SWT\">而其中，<b>人殉祭祀</b>场面更是给我留下了相当深刻的印象。</p>\n<p data-pid=\"bajc9vk6\">后来我查阅史料，逐渐了解到中国最古老的信仰——图腾崇拜。在尚处洪荒年代的古老中国大地上，人们通过图腾崇拜聚集在一起。而巫觋作为与神明沟通的使者，则通过奇妙的巫舞来表达对神明和自然的崇拜。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-2396c5e156c1199df98f3820de74be0b_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1096\" data-rawheight=\"640\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-2396c5e156c1199df98f3820de74be0b\" data-watermark-src=\"v2-5dfb3c60e24bdc83d637392963f4ac50\" data-private-watermark-src=\"v2-60d6862f36a019d00396e3757e9bc81d\" data-tags=\"porn\"></p>\n<p data-pid=\"C4KuSWHt\">自从我了解到东周的祭祀与巫女后，一个故事隐隐约约大概就在脑子中成型了。由于我原本就是在游戏公司上班，所以对游戏的制作流程会比较熟悉，同时也认识一些同行的朋友。当我把这个想法告诉对方后，他也觉得很有意思。不过那时由于我俩上班都很忙，所以也仅限于一些口头上的交流。</p>\n<p data-pid=\"6IMi8Y_w\">直到《人狼村之谜》的汉化出现……</p>\n<p data-pid=\"dvHobogP\">迫不及待玩完《人狼村之谜》后，终于按捺不住内心的激动，我俩决定自己也尝试着去挑战这样的题材。如果是在传统悬疑的框架基础之上，加入中国独一无二的春秋祭祀文化的话，想必会有一份独到的乐趣吧？</p>\n<p><img src=\"https://pic2.zhimg.com/v2-a6aa3c501dc45116bf7f4bb99a533f8c_720w.jpg?source=b1748391?rss\" data-rawwidth=\"650\" data-rawheight=\"1009\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-a6aa3c501dc45116bf7f4bb99a533f8c\" data-watermark-src=\"v2-c52a2693841cea1ff2c13148481ef95b\" data-private-watermark-src=\"v2-d73357fb71580512162da04c1b8af843\"></p>\n<p data-pid=\"_t4_fs1I\">虽然制作的过程中也遇到过许多挫折，但当游戏最终出现在眼前的时候，却也感觉一切都是值得。特别是这次的故事中塑造了几位特立独行的女主角们，她们的人格、她们的精神、她们的善良，都是游戏中最让人动容的地方。</p>\n<p data-pid=\"UxTyFdiW\">这里也要特别感谢闲踏梧桐等人的优秀配音，游戏中有很多角色的配音其实已经超出了我的预期。甚至有部分角色在配音之前，我从没想过会达到这样的高度。当配音演员配好之后，我才发现原来这些角色能以这样鲜活的方式来呈现出她们独特的性格。</p>\n<p data-pid=\"8uRWMooM\">因此一些台词不多的配色还让我有些遗憾：早知道配音这么好，就该给她多写几句台词的~~</p>\n<p><img src=\"https://pic2.zhimg.com/v2-0180602653edf10f286422ddeeaa653f_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1151\" data-rawheight=\"648\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-0180602653edf10f286422ddeeaa653f\" data-watermark-src=\"v2-39f79c53df8b9d16044c77bb6816c05a\" data-private-watermark-src=\"v2-4c1ca1d53b9866ed0faba615a851b120\"></p>\n<p data-pid=\"wHP-3KCd\">最后，再次感谢所有关注和支持我们的朋友。</p>\n<p data-pid=\"f7jfzYM6\">《山：临界幸存者》将于2022年7月29日发售，全台词配音，售价22元，首周10%折扣。</p>\n<p data-pid=\"-2d9QTUx\">如果这款游戏能给大家带去快乐的话，那就是对我们最好的回报，谢谢大家。</p>\n<a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"http://link.zhihu.com/?target=https%3A//store.steampowered.com/app/1787500/_/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">store.steampowered.com/</span><span class=\"invisible\">app/1787500/_/</span><span class=\"ellipsis\"></span></a><p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/gun-tong-long-juan-feng-83?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">滚筒龙卷风</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/545194401/answer/2592831352?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">4 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/515672642?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">《幸存者营地》的游戏背景是什么？</a><br><a href=\"http://www.zhihu.com/question/523949006?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">有哪些冷门悬疑 AVG 游戏值得推荐？</a><br>\n","link":"http://www.zhihu.com/question/545194401/answer/2592831352?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"有无相生，长短相形：Nothing Phone (1) 上手体验","date":"2022-08-04 08:00:00","description":"Nothing new, something else.<a href=\"https://sspai.com/post/74925\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/74925"},{"title":"一派·Podcast | 旅居、阅读、写作，以及身体和灵魂的自由","date":"2022-08-04 06:22:42","description":"「自由撰稿人」这个身份的幸福之处并不是自由本身，而是多出了时间和空间，对身边熟悉的事物产生不同维度的感悟。<a href=\"https://sspai.com/post/74990\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/74990"},{"title":"如何看待《泡面超人》这本漫画？","date":"2022-08-04 05:14:12","description":"\n<p data-pid=\"lj5jtOjo\">《泡面超人》，第五届金龙奖最佳多格漫画奖，也是号称中国首部超人漫画。更是《漫画世界》中为数不多的善始善终，能完全按照作者意愿完结的作品。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-f71240f15dc3a54b2d07fc72c54f81fd_720w.jpg?source=b1748391?rss\" data-rawwidth=\"350\" data-rawheight=\"500\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-f71240f15dc3a54b2d07fc72c54f81fd\" data-watermark-src=\"v2-88c07d5db5f47dc6fa27f822bb2c5db6\" data-private-watermark-src=\"v2-6187e1c2486d4e1ff7761beefaefab63\"></p>\n<p data-pid=\"-X3SppAa\"><b>不过现在各个网站都无法看到泡面超人，只能从淘宝买全套的书来看。</b>（我为了重温这部漫画也买了一套，还从资源贩子那里买了一套电子版）</p>\n<p data-pid=\"YCpOpzA5\">我们可以从 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/c1337b0ce656974c66ccd07d73597e29\" data-hash=\"c1337b0ce656974c66ccd07d73597e29\" data-hovercard=\"p$b$c1337b0ce656974c66ccd07d73597e29\">@鄙人平生</a> 的回答中得知</p>\n<p data-pid=\"QAILoSsL\">据原作者陈晓韵所说，这部漫画的版权在他的老师敖幼祥那里，或许要不回来了。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-308f335828abd530b68c578e4adefa8e_720w.jpg?source=b1748391?rss\" data-rawwidth=\"540\" data-rawheight=\"926\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"VQ-8aEU-\">事已至此，只能大呼可惜。</p>\n<p data-pid=\"scWSCHRX\">还好陈晓韵并没有陷入版权之争的怪圈，对她而言，或许继续画漫画是更重要的事情。</p>\n<p data-pid=\"qCmG7-Gl\">对于陈晓韵老师来说，创作是一件很重要的事情，我们从作者的访谈中略知一二</p>\n<blockquote data-pid=\"NoEPx5no\">创作的过程就是一件很感动的事。我每天早上9点就到工作室，一直画到傍晚7点半才离开，回家还不断想故事剧情。<br>就这样，经过半年的磨练，我从<b>助手升到主笔</b>。开始创作《泡面超人》时，此类题材因为国外已经做了很多也做得很好了，所以要创作一个不同于其他超人的故事，难度非常大。<br>为此上稿前，关于人物设定、故事走向都是一改再改，足足花了两个月修改了N遍才OK，第一话刊出后大家都非常高兴！经过一年多的连载，《泡面超人》得到了广大读者的喜爱，这对我来说就是最感动的事了。<br>其实刚开始画这部作品我没有想过会拿到奖，拿到奖我也是很开心，这也是大家共同努力，我的作品不是属于我一个人的。在我创作过程中，有很多朋友很多同事给了我很大的帮助。<br>然后就是很感谢敖幼祥老师，他给我这个原创的机会。感谢我的助手啦，没有他的话，我会累死。然后也是感谢 漫友 给我这个平台，让我去发挥。</blockquote>\n<hr>\n<p data-pid=\"CUxDDIN-\">《泡面超人》的故事发生在一个架空的世界：</p>\n<p data-pid=\"a34frOjf\">主人公包星星（星仔）生活在一个名叫美食国的国度；在这个国家里有一类被称为“食物怪”的生物（食物怪的出现是整个故事的暗线）。</p>\n<p data-pid=\"Mpcd_oIm\">而在各种机缘巧合之下，我们的主角星仔在误食了泡面以后爆发出了超人般的能量。从此以泡面超人的身份锄强扶弱，与食物怪作斗争。</p>\n<p data-pid=\"66aCzyh1\">在这个过程中，星仔经历了许多，一步步成长，也如同在一同读漫画的读者一般，懂得了友情，萌生了爱情，理解了亲情，以及学会承担责任。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-a003678e7279cc1baa044fc799458a47_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1280\" data-rawheight=\"1929\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-a003678e7279cc1baa044fc799458a47\" data-watermark-src=\"v2-4d687522765d328c7edba1bbb6fe0383\" data-private-watermark-src=\"v2-bd90c6c11eed9ef54c82c9594560ec7c\"></p>\n<p data-pid=\"kBcC6OVB\">这部作品前期以搞笑风格为主，从揭晓超凡博士这条暗线开始逐渐变成传统少年冒险漫画。</p>\n<p data-pid=\"iQ-z-ghY\">在国产漫画中，2008年开始连载的《泡面超人》在很长时间内是唯一一部超级英雄漫画。</p>\n<p data-pid=\"lh-kkNhU\">作者陈晓韵老师曾坦言：“画《泡面超人》的初始心很简单，只想做一部纯中国国籍的超人，并且要在里面加入更多的中华传统元素。”</p>\n<p data-pid=\"6QmvRbpN\">“最开始也没想太多，想好题材后就一条心画到底。”事实上她真的做到了；</p>\n<p data-pid=\"JgY5rTwV\">《泡面超人》开创了国产超人漫画之先河；这部漫画中融入了太多的文化符号，食物怪、人物装束以及打斗设定分别取材于日常小吃、传统服饰以及武术；做到了弘扬中国优秀传统文化的功劳。</p>\n<p data-pid=\"9zABarnR\">而星仔“平凡少年/超级英雄”双重身份的老树新花既以其新颖吸引读者又给了读者以强烈共鸣；</p>\n<p data-pid=\"qsFqAApa\">尤其“吃泡面变身”和“食物变成怪兽”这种让人忍俊不禁的创意更是把漫画自身的幽默基调与“变身”、“美食”、“战斗”和“超级英雄”这几大核心元素完美粘合在了一起。</p>\n<p data-pid=\"yBubNYmP\">加之这部漫画剧情节奏很快，一个接一个的故事应接不暇，故事发展高潮迭起，尤其配上陈晓韵老师的前期豪迈的画风，打击感十足的打斗场景以及炫酷的招式，让读者直呼过瘾！</p>\n<p data-pid=\"BW4-4TPM\">再加上陈老师深思熟虑的多线叙事展开，超凡博士过去的经历和食物怪的来历、美食国的发展以及段月身上的秘密。让这部看起来搞笑的漫画多了一层社会深度。</p>\n<p data-pid=\"sp69NS7F\">最后，引用网上一段对本作的评价</p>\n<blockquote data-pid=\"wqOWnY-b\">《泡面超人》虽然披着美式超级英雄漫画的“皮”，但他的内里却有着一颗“中国心”。不同于基督教文化圈源于血缘和宗教信仰的民族认同感，历经千年战争与民族融合洗礼的中华民族更倾向借乡土与文化认同寻找民族认同感；也正因如此，家国胸怀成为了讨论中国人民族性中很难无视的一个话题，因为这种情感已经烙印在了这个古老民族的血脉深处。<br>这就让作为超级英雄的星仔的行为从传统超级英雄作品中少数梦想家的朴素正义感实践转变为融合了武侠小说中侠客们“行侠仗义”与中国人向往安定繁荣社会并努力践行之的行动。我初看漫画时，觉得星仔像超人，靠着心中最朴实的善恶观和道德感行事；后来回想起来，又觉得他像杨过，比超人多了一分社会责任感；</blockquote>\n<p data-pid=\"mzpX-BA6\">如同一位网友说到，<i>看完这部漫画，才意识到星仔其实就是我们自己、就是作者心中每一个中国少年的样子：调皮捣蛋又勇敢无畏、急中能生智还敢于直言、有一种冲劲，却要在遭受挫折后才能理解一些事情；看着这样一个天真的孩子的成长历程不就像看到了自己年少时最想成为的人的样子吗？ </i></p>\n<p><br></p>\n<p><img src=\"https://pica.zhimg.com/v2-08faeef3a1a48426674010b41f72c46a_720w.jpg?source=b1748391?rss\" data-rawwidth=\"363\" data-rawheight=\"500\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-08faeef3a1a48426674010b41f72c46a\" data-watermark-src=\"v2-7143366eb0ded3359fa09f557aa7c0b4\" data-private-watermark-src=\"v2-99dbac4a81bc65ea4ff9291fd2082bea\"></p>\n<p><br></p>\n<p data-pid=\"w0R8v3ti\">然而仅仅止步于速食主义泡面包装的外表，精彩的打斗和搞笑的情节，而忽略其中流着<b>正统中华传统文化血液</b>，那就太浅读《泡面超人》这部漫画了。</p>\n<p data-pid=\"Zxf7oTGJ\">漫画中与超人作对的不再是一个个张牙舞爪形象可憎毫无思想只知破坏的大恶人。</p>\n<p data-pid=\"SydOaWqo\">他们虽然一概服从最大BOSS——吞食大魔王的命令，却各具各的特色。最亮眼的无疑为这些“小恶棍”的外形，全部由中华传统美食改良而成。</p>\n<p data-pid=\"1-ZbhZNT\">岭南特产小吃“爆浆牛丸”，在周星驰的电影《食神》中它的制作方式被神奇化，又在《泡面超人》中大显身手，化身超过大楼的身形，用热浆作为武器；</p>\n<p data-pid=\"t4HXSrCD\">如豆沙包文吉有着时下最时兴的Q版外表，内里的豆沙更是一绝：吃下后拥有记忆，受到惊吓就会拉出来导致文吉失忆；</p>\n<p data-pid=\"MXHPQZew\">还有最讨厌情人节的巧克力怪以及可以吸收水分越多就变得越强的海藻怪，每一个食物怪背后都有一段令人思考的过去，食物怪也会有思想，如拥有F1速度驰骋在夜晚的甜甜圈怪，它劫走厨师的原因之一是憎恨人类浪费了食物。</p>\n<p data-pid=\"rBEkuPXE\">在食物的世界里，它们同样因为自己被浪费而难过，因此，每个食物怪究竟是为什么会变成这样，其背后无边无际想象力以及接地气的表达更加能令当时的孩子所接受，同样也更具备教育意义。（这也是台湾漫画家与身俱来文化气息的传承）</p>\n<hr>\n<p data-pid=\"J6Tg2VZV\">关于故事，　令我一直回味无穷的有以下几点</p>\n<p data-pid=\"6e66Rfsi\"><b>1.泡面超人每一次的进化</b></p>\n<p data-pid=\"O77_vxWf\">作为一部超级英雄式的漫画，每一次遭遇强敌以后提升实力，升级装备以及变更造型都是一大亮点。</p>\n<p data-pid=\"j4i6dxjH\">而泡面超人每次进化都是异常坎坷，但是每次进化以后都变得更加帅气！更加炫酷</p>\n<p><img src=\"https://pic1.zhimg.com/v2-b0e74186885b29958d5d111994da7c10_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1375\" data-rawheight=\"1022\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-b0e74186885b29958d5d111994da7c10\" data-watermark-src=\"v2-0b3b646aa646cde4303009b3e0aef9c5\" data-private-watermark-src=\"v2-00c3bd98b3991797ab1a7e35c9da3d74\" data-tags=\"porn\"></p>\n<p data-pid=\"G7I2sRSF\">最初的泡面超人，仅仅只是穿上这套超人服装，配合上当时还比较q版的画风，显得有些稚嫩但是非常亲切。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-dcbc56aff6d169fd6c989d4e9c17615d_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1405\" data-rawheight=\"1030\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-dcbc56aff6d169fd6c989d4e9c17615d\" data-watermark-src=\"v2-31caf44b75f8ed724ffddb3f96ee2171\" data-private-watermark-src=\"v2-09e713cdbecbb155ca92ae823fd2c149\"></p>\n<p data-pid=\"VNlZAIIj\">然而最初的能力肯定有诸多限制，比如最开始的能力也只能维持三分钟，后面研究出更强的面饼才能使得能力可以长久使用。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-0759342ea0b6d651a02069a104e1a34e_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1395\" data-rawheight=\"1019\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-0759342ea0b6d651a02069a104e1a34e\" data-watermark-src=\"v2-49381d27c6e5a53495c93f42ac796e3f\" data-private-watermark-src=\"v2-792f3292119b38be57a0ceb664e2f832\"></p>\n<p data-pid=\"mZGmA7rE\">而泡面超人的第二次变身则是星仔学成归来，并且1126也帮助星仔提升装备能力且用上了传说中的面饼！</p>\n<p><img src=\"https://pic2.zhimg.com/v2-7b629da371358386832c67a9d410a2b1_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1394\" data-rawheight=\"1030\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-7b629da371358386832c67a9d410a2b1\" data-watermark-src=\"v2-13a5e7b66823ce8cc554988d8a6a6049\" data-private-watermark-src=\"v2-80d9a56cd5b6a43920dd8e2656eed1c2\"></p>\n<p data-pid=\"wtSpYhPW\">相对于第一版的泡面超人，这一版的体型更加修长，有种从儿童变成少年的感觉。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-77439b6f5b7c993968cc98d8c4d29528_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1395\" data-rawheight=\"1030\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-77439b6f5b7c993968cc98d8c4d29528\" data-watermark-src=\"v2-df4a3e522bf017f988dd8df4fe2086c2\" data-private-watermark-src=\"v2-79af5dd49000c0a425cdc70f9a5836d4\" data-tags=\"politic\"></p>\n<p data-pid=\"JgXBCW-K\">作者还在扉页特此设计了泡面超人变身的动作（究竟有多少人模仿过）</p>\n<p><img src=\"https://pic1.zhimg.com/v2-2387c44b700c5e55f3e70072842becb4_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1400\" data-rawheight=\"1030\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-2387c44b700c5e55f3e70072842becb4\" data-watermark-src=\"v2-244f74b27763b13a63f8cc21413bc1dd\" data-private-watermark-src=\"v2-0891b0df350bb76c9fd67aa42ee27345\"></p>\n<p data-pid=\"fYSkv7IW\">而这次升级的最大改版就是多了面罩，看起来更有科技感了！</p>\n<p><img src=\"https://pic2.zhimg.com/v2-76fc5b69f025cd860e73841f5aed49d3_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1384\" data-rawheight=\"1015\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-76fc5b69f025cd860e73841f5aed49d3\" data-watermark-src=\"v2-e8e8d610e70b401c9cbb3f3b8470b552\" data-private-watermark-src=\"v2-3ad08d8ab7dc6186ce367ee5f4348f9b\"></p>\n<p data-pid=\"nWFEiFys\">而再下一次的升级已经来到作品后半段了，泡面超人在一次“死亡”以后，浴火重生，将愤怒化为力量，这一款的泡面超人身上的护甲更多，头盔也变得更加立体，更加成熟帅气，渐渐有种青少年的即视感</p>\n<p><img src=\"https://pic3.zhimg.com/v2-93f3409c300734d9da7214994032d3c4_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1370\" data-rawheight=\"1020\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-93f3409c300734d9da7214994032d3c4\" data-watermark-src=\"v2-b577b2da329b21ce2468912ad8540d57\" data-private-watermark-src=\"v2-55fabbd0c82a280f00f05d96c4263499\"></p>\n<p data-pid=\"YEjjxrB7\">尤其是这里的画风已经变成传统的热血漫画画风，从眼神就能看出，加之超无敌帅气的热能炮，简直少年心中的偶像！</p>\n<p><img src=\"https://pica.zhimg.com/v2-e66945251b7c7735ade3a665b3a26610_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1375\" data-rawheight=\"1025\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-e66945251b7c7735ade3a665b3a26610\" data-watermark-src=\"v2-bb88246ca0d0c808080e9d25a808d1a7\" data-private-watermark-src=\"v2-45ac29d7118acc7b32a364f96506722d\"></p>\n<p data-pid=\"656uBjx_\">尤其是这里利用“复活”这一功能还整出无数个泡面超人</p>\n<p><img src=\"https://pic3.zhimg.com/v2-c72f864a9f611bf8eb8a86c0ed4ff4b8_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1375\" data-rawheight=\"1014\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-c72f864a9f611bf8eb8a86c0ed4ff4b8\" data-watermark-src=\"v2-f7ce214545cfd8a041b509d41b4440c5\" data-private-watermark-src=\"v2-c5ac42c2a9fd209698c30f65c336cd57\"></p>\n<p data-pid=\"jwB18-e7\">而最后的这次变身，则是之前所有版本都无法达到的高度，因为直接是利用了这个世界母石的力量之一，变异之红石的力量</p>\n<p><img src=\"https://pic1.zhimg.com/v2-2b27d51bc6c8f22a3147593e18bb7159_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1385\" data-rawheight=\"1030\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-2b27d51bc6c8f22a3147593e18bb7159\" data-watermark-src=\"v2-69368842f1c9d0be0c83c604b85cc531\" data-private-watermark-src=\"v2-9e47d4924633946074be78d0563b45d2\"></p>\n<p data-pid=\"829o6PMH\">整个眼神都散发着光芒，身体上的护甲都已经是肌肉状，给人以力量感十足。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-8fa5ea08530c536e1736e4c4d669ef0a_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1389\" data-rawheight=\"1034\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-8fa5ea08530c536e1736e4c4d669ef0a\" data-watermark-src=\"v2-d6c46516461fcea322f309de520f81d9\" data-private-watermark-src=\"v2-8aaf03a1f474b8cb185b07f7e75787f7\"></p>\n<p data-pid=\"8Vs74TtF\">因为这次变身已经是最后大决战，因此各种技能都在这次大决战中爆发出来</p>\n<p><img src=\"https://pic2.zhimg.com/v2-fbd053cd1d21a5787e84f03c52ef8cba_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1374\" data-rawheight=\"1015\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-fbd053cd1d21a5787e84f03c52ef8cba\" data-watermark-src=\"v2-9a1e70011fd4c0ab4b03b76b0673fa90\" data-private-watermark-src=\"v2-b3a94e66a6c7858ec30bba9ae5570ee4\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-b8353ceb889fb56e51a026950abbfe5a_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1375\" data-rawheight=\"1025\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-b8353ceb889fb56e51a026950abbfe5a\" data-watermark-src=\"v2-211ee6807b5b24325ee42ba38c3b237c\" data-private-watermark-src=\"v2-8e682e483eeb967ed37092945a405da9\"></p>\n<p data-pid=\"AUF_ZM3i\">然而要打败魔王不是一件容易的事情，本来可以采用复原之蓝石让魔王失去能力，然后泡面超人再打败他，但是这样会牺牲一位很重要的伙伴，因此泡面超人选择了用自己的实力，但是更难的道路去打败魔王。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-c455468adab05e0224d1b95926d46e5f_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1389\" data-rawheight=\"1020\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-c455468adab05e0224d1b95926d46e5f\" data-watermark-src=\"v2-76d890bc4612feb90fd790d53d2f0425\" data-private-watermark-src=\"v2-cc9186e0e1eda413ffa45267b4e94e8e\"></p>\n<p data-pid=\"h1p4t2qy\">这份力量就是来源于人类与身俱来的正义感，集合所有人力量的热能炮（真的超帅）</p>\n<p data-pid=\"59xELt_e\">最终成功击败魔王，拯救了所有人！</p>\n<p><img src=\"https://pic3.zhimg.com/v2-390b2c49890ef614973c61f815c2d70a_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1380\" data-rawheight=\"1025\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-390b2c49890ef614973c61f815c2d70a\" data-watermark-src=\"v2-ffdb8204b1a7323888448b00a30d62bc\" data-private-watermark-src=\"v2-2346f624513695a10674c3722d6c19d5\"></p>\n<p data-pid=\"-qNs4-eT\"><b>2.主角星仔的成长</b></p>\n<p data-pid=\"hbtQw7mZ\">作为本作的主角，我们的星仔最开始是那种大大咧咧，做事不顾后果，最开始做超人也只是为了想得到赞美的普通熊孩子</p>\n<p><img src=\"https://pic3.zhimg.com/v2-e41e4d87733e80b4ad4224a936966bbf_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1370\" data-rawheight=\"1019\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-e41e4d87733e80b4ad4224a936966bbf\" data-watermark-src=\"v2-cda255ad7c43a72f5ca19614ea7857d4\" data-private-watermark-src=\"v2-701cff408262848a2458967289978124\"></p>\n<p data-pid=\"2tCMydpf\">所以当他想在众人面前暴露自己是泡面超人身份之时，命运给他上了一课，让他在众人面前惨败。</p>\n<p><img src=\"https://pica.zhimg.com/v2-6bf120485d00d29756c9ea085a43ead5_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1365\" data-rawheight=\"1015\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-6bf120485d00d29756c9ea085a43ead5\" data-watermark-src=\"v2-9da3eccd328f3174ba2d6343625af984\" data-private-watermark-src=\"v2-2057ed8b3d1c89a7262e02e81d8d2dba\"></p>\n<p data-pid=\"mm03SxZe\">因此，星仔重新开始审视自己身为超人的意义所在，以及来到山上进行修行以及寻找面饼。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-5d61f56d8540bdbaf8ad026ce03616d8_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1380\" data-rawheight=\"1020\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-5d61f56d8540bdbaf8ad026ce03616d8\" data-watermark-src=\"v2-fc5bb6662d929feba6875e801a710b9f\" data-private-watermark-src=\"v2-d45ffd3c16b346848fef507482183af4\" data-tags=\"porn\"></p>\n<p data-pid=\"Cm5g2X8d\">在这个过程中遇到了一群不错的伙伴，以及认真教授他的师傅，最重要的是，让星仔得到了成长。</p>\n<p data-pid=\"XaaxPu-T\">这样子一个过程非常像我们日常生活中，自己总是盲目自大，不知道天高地厚，直到来到更加宽广的世界，才发现自己原来是井底之蛙。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-649e85f61e5a54ef2724a101bd9ffb4e_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1395\" data-rawheight=\"1025\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-649e85f61e5a54ef2724a101bd9ffb4e\" data-watermark-src=\"v2-cdd7c5fc7b13a1532c2e2bdb68272851\" data-private-watermark-src=\"v2-81d70ed88f0a646dc10e23273742534e\"></p>\n<p data-pid=\"A3VQ2AuP\">3<b>.形形色色却有独特魅力的配角</b></p>\n<p data-pid=\"vIfFUJWB\">一部好漫画中除了个性最为突出的主角，让作品更加丰富的绿叶也是必不可少</p>\n<p data-pid=\"54KD2Qrq\">其中以星仔的机器人朋友v99令我记忆最深，干着任劳任怨的活，在危急之时假冒星仔在学校，没想到却成为最优秀扽学生，然而这一切的前提是以他是人类为前提</p>\n<p><img src=\"https://pic2.zhimg.com/v2-15fab9d76eae49e6a2efa598ffdf020b_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1400\" data-rawheight=\"1035\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-15fab9d76eae49e6a2efa598ffdf020b\" data-watermark-src=\"v2-bf50f0f353665dc6c7c2602b56c722c7\" data-private-watermark-src=\"v2-70b5e3d44d54783007943ca39b027477\"></p>\n<p data-pid=\"q9ZlhPAw\">因此在星仔回归以后出现了双方对峙的局面，机器人究竟能不能代替人类，机器人究竟是不是人类的好朋友。老实说我不喜欢漫画最后给出的答案，但是，这又是无可奈何的结局。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-24ac6c9e431b5acaf6188397562b6ac2_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1385\" data-rawheight=\"1015\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-24ac6c9e431b5acaf6188397562b6ac2\" data-watermark-src=\"v2-ff42a8df76a83142f8c427c2e6d92e36\" data-private-watermark-src=\"v2-4ad92f0f5eb4f53f796e228a2a3fe325\"></p>\n<p data-pid=\"rC4UjOXi\">第二位出彩的配角就是前期在学校中充当反派的霍杨同学，身为优等生的他处处都需要做到最好，因此在一次误会中，谎称是泡面超人的上司，最后事情败漏成为众人笑话</p>\n<p><img src=\"https://pica.zhimg.com/v2-17f2434eeb78119fba812cee8cf8dcbd_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1420\" data-rawheight=\"1020\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-17f2434eeb78119fba812cee8cf8dcbd\" data-watermark-src=\"v2-402439d2ae0827e59a70a3f7e23b348a\" data-private-watermark-src=\"v2-594c8fa49997ad249e01694f096ffa98\"></p>\n<p data-pid=\"S7RB9bhh\">但是最终为了想在学院夺回荣耀，被小人利用，变成了一头怪物，然而在最后时刻想起了自己儿时的梦想也是想成为拯救全世界的大英雄，最终反水帮助泡面超人打败敌人</p>\n<p><img src=\"https://pica.zhimg.com/v2-25db0fba94dfd8c66fdc4d4cc30462aa_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1415\" data-rawheight=\"1020\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-25db0fba94dfd8c66fdc4d4cc30462aa\" data-watermark-src=\"v2-47875fdfc591cfb186527513fd627331\" data-private-watermark-src=\"v2-b3e03071d8ea6ee4c065ef7aabcc4240\"></p>\n<p data-pid=\"L_LF6E9S\">最后是本作最大的惊喜，既是主角前期最佳的后援1126，又是传说中的超凡博士</p>\n<p data-pid=\"JwpYc1Wc\">不得不说，作者在这个角色身上花费了不少心思，让读者完全不会对这个超凡产生一点反派的想法，甚至于同情他的遭遇。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-33b7f431373637eb35ad4aa6399eea5e_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1365\" data-rawheight=\"1030\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-33b7f431373637eb35ad4aa6399eea5e\" data-watermark-src=\"v2-aa8daa9688a27189209bb943b27f5bde\" data-private-watermark-src=\"v2-b41ad40945255633eb024ce8ddad3816\"></p>\n<p data-pid=\"EGx6LazQ\">4<b>.简单却又贯穿全文的基础设定</b></p>\n<p data-pid=\"mfMr_a7D\">本作中最为基础的设定就是由母石分裂出来的三颗晶石，分别被三个重要的人物掌握着，最终汇聚在一起，形成这样一个好的故事发展，没有一份多余</p>\n<p><img src=\"https://pic1.zhimg.com/v2-23946161014ecd2908b2dc121b2c0347_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1360\" data-rawheight=\"1020\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-23946161014ecd2908b2dc121b2c0347\" data-watermark-src=\"v2-3459b98cc761281507eabeeea32224a4\" data-private-watermark-src=\"v2-1b5cc082b53ba29f5c160dcea19cf340\"></p>\n<p data-pid=\"JMzZpXQM\">5<b>.懵懂又甜蜜的初恋</b></p>\n<p data-pid=\"4n4jjffr\">最初的小琼，在被英雄救美以后，产生好感的是泡面超人</p>\n<p><img src=\"https://pic3.zhimg.com/v2-9d91313edfb6b4d5047118e1b1d9c04b_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1370\" data-rawheight=\"1025\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-9d91313edfb6b4d5047118e1b1d9c04b\" data-watermark-src=\"v2-f5ddd1e27881745e50771e5c4fdba874\" data-private-watermark-src=\"v2-b05d678a8562ec0a4f21bd9839fff233\" data-tags=\"politic\"></p>\n<p data-pid=\"QlbL5zVv\">尤其是两人在一起经历的点点滴滴，让泡面超人也对其产生了异样的感觉</p>\n<p data-pid=\"iYdJfIkm\">尤其是两人那一次定情之吻，让彼此在对方心里有了更深的位置</p>\n<p><img src=\"https://pica.zhimg.com/v2-797e1e27191ef0ef90f1b50ebf30a23b_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1395\" data-rawheight=\"1025\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-797e1e27191ef0ef90f1b50ebf30a23b\" data-watermark-src=\"v2-25bc466480a84988fe18039947f054d2\" data-private-watermark-src=\"v2-b6d2a1417472943884635c64cd7596f6\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-ff8d6da78df668eaada0c226c876d2ec_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1394\" data-rawheight=\"1030\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-ff8d6da78df668eaada0c226c876d2ec\" data-watermark-src=\"v2-81094034ae6e61eb397eaa1b43cc561c\" data-private-watermark-src=\"v2-53e4abc74b04478835bd7c4ebf3e3623\"></p>\n<p data-pid=\"uts9XSPu\">所谓患难见真情，在泡面超人被诬陷，公布其真实身份就是星仔以后，小琼在心中将两人的形象合二为一，坚定不移地站在泡面超人一方，同生死共患难</p>\n<p><img src=\"https://pic1.zhimg.com/v2-70018b1b75bf3b020e63c5c75b0767d6_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1375\" data-rawheight=\"1020\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-70018b1b75bf3b020e63c5c75b0767d6\" data-watermark-src=\"v2-7af70df27324b749440e103452b68e5c\" data-private-watermark-src=\"v2-47cd460a3c404b4b935f7b2b78795cea\"></p>\n<p data-pid=\"dvbvbMXb\">这种爱情如同涓涓细流，非常自然而然就被观众所接受，因为读者也与星仔一同经历，知道这一路以来两人共同经历的一切有多不容易。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-ddc0928aed674f16a769943c76b3079c_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1380\" data-rawheight=\"1024\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-ddc0928aed674f16a769943c76b3079c\" data-watermark-src=\"v2-53a7a1337c6688a408b443e4b1c63011\" data-private-watermark-src=\"v2-3f7718ccf0cbac5def4c2887b3937498\"></p>\n<p data-pid=\"66R7IgsI\">最终，有情人终成眷属。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-6201fb46192911c5674106c71e7b28f3_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1375\" data-rawheight=\"1025\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-6201fb46192911c5674106c71e7b28f3\" data-watermark-src=\"v2-fead1dd42a9861036f66c560a19d960c\" data-private-watermark-src=\"v2-6d69d01d7a1ecfd82da811a634fdf82b\"></p>\n<hr>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-024627c109d0118647b86c35ceaf668f_720w.jpg?source=b1748391?rss\" data-rawwidth=\"500\" data-rawheight=\"346\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-024627c109d0118647b86c35ceaf668f\" data-watermark-src=\"v2-694766b7e7d1333d62725ac30e9ade1f\" data-private-watermark-src=\"v2-5bd6b7b7fd5ea0df37c509d64391965d\"></p>\n<p><br></p>\n<p data-pid=\"dXGX3_iL\">《泡面超人》自2008年开始在《漫画世界》开始连载，几个月后它所得到的反响出乎人意料，紧接着在原创漫画盛会第5届金龙奖上揽得最佳故事漫画奖奖杯，众望所归。</p>\n<p data-pid=\"DEXIJhok\">作者陈晓韵出身国画系，跨越了国画、动画和漫画三届，从广州美术学院国画系毕业，读书时又担任过《Q版三国》、《勇闯天下》、《小青天司徒公》的动画制作，在“中国漫画之神”敖幼祥的乌龙院工作室工作后开始创作漫画。</p>\n<p data-pid=\"cz_G0iIA\">当与最适宜传播的时代漫画激烈碰撞时，她比一般漫画作者更切身体会到传统文化的力量，比一般传统文化者更能运用现代的漫画故事手法来运用这种力量。</p>\n<p data-pid=\"k3qnmOH2\">然而就是这样一部好作品，如今因为版权问题，几乎消失在网络上，随着时间的推移，也许就会被人们渐渐忘却，因此我一直说，中国不缺好漫画，缺少的，是发现，是传承。</p>\n<h3>谨以此文，纪念这部不会被忘记的中国超人漫画。</h3>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/bin-di-47-74?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">彬帝</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/290486411/answer/2609215337?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">4 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/518018776?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何看待漫画家赵佳的漫画《黑血》恢复连载？</a><br><a href=\"http://www.zhihu.com/question/537263265?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">帮忙找一本漫画？</a><br>\n","link":"http://www.zhihu.com/question/290486411/answer/2609215337?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"NPM 自动更新版本号","date":"2022-08-04 05:00:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>ChenYFan 大佬的文章：<a href=\"https://blog.cyfan.top/p/d3c51290.html\">SpeedUp!使用黑科技为你的网站提速</a> 有提到过将 Hexo 博客的全部静态文件上传至 NPM 达到加速效果。</p>\n<p>但是 NPM 版本号不能重复，而且为了精准命中缓存和防止边缘 <code>@latest</code> 缓存过长，就必须指定版本号。</p>\n<p>本人在 <a href=\"https://blog.yfun.top/posts/2876015612/\">我的图床解决方案</a> 一文中使用的方法是 <code>npm version patch</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.16/rawimg/20220804133426.png\"></p>\n<p>但这个方法也有一些弊端，比如 <code>patch</code> 只会更新 <code>z</code> 位数的版本号，而且并不会上传至仓库，很可能会出现版本号冲突导致上传失败。这就是为什么最后还需要重新推送 Git 提交。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AF%95%E8%AF%95%E7%9C%8B\" class=\"headerlink\" title=\"试试看\"></a>试试看</h2>\n<p>NPM 版本号遵循 <code>semver</code> 规范，格式为 <code>major.minor.patch</code>。</p>\n<p>为了在获取最新版本号的时候不发生混乱，我选择先获取最新的版本号。</p>\n<blockquote><p>记得把 <code>cky-blog-static</code> 改成自己的项目名。</p></blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getVersion = <span class=\"keyword\">async</span>() =&gt; {</span><br><span class=\"line\">    <span class=\"keyword\">const</span> latestVersion = <span class=\"keyword\">await</span> fetch(<span class=\"string\">\"https://registry.npmjs.org/cky-blog-static/latest\"</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.json()).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.version;</span><br><span class=\"line\">    })</span><br><span class=\"line\">    <span class=\"keyword\">return</span> latestVersion;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>获取到最新版本号后，就可以对版本号进行分析。</p>\n<p>以 <code>1.4.7-b541af2ea284a39da0bbf63b88fdb65c</code> 为例，先按 <code>major.minor.patch</code> 分离。当然，也需要考虑版本号后还有 <code>build metadata</code> 的情况。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> version = <span class=\"keyword\">await</span> getVersion();</span><br><span class=\"line\"><span class=\"keyword\">var</span> verArray = version.split(<span class=\"string\">\".\"</span>);</span><br><span class=\"line\">verArray[<span class=\"number\">2</span>] = verArray[<span class=\"number\">2</span>].split(<span class=\"string\">\"-\"</span>)[<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure><p><del>为了版本号好看些</del>，可以通过判断实现满十进一。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (verArray[<span class=\"number\">2</span>] &lt; <span class=\"number\">9</span>) {</span><br><span class=\"line\"><span class=\"comment\">// z 位小于 9，直接 +1</span></span><br><span class=\"line\">verArray[<span class=\"number\">2</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">2</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">} <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (verArray[<span class=\"number\">1</span>] &lt; <span class=\"number\">9</span>) {</span><br><span class=\"line\"><span class=\"comment\">// z 位大于等于 9，y 位小于 9，y+1, z=0</span></span><br><span class=\"line\">verArray[<span class=\"number\">1</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">1</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">verArray[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">} <span class=\"keyword\">else</span> {</span><br><span class=\"line\"><span class=\"comment\">// z 大于等于 9，y 大于等于 9，x+1,y=0,z=0</span></span><br><span class=\"line\">verArray[<span class=\"number\">0</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">0</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">verArray[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">verArray[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>最后，重新拼接版本号。如果担心服务器缓存版本号导致冲突，还可以加上一些随机字符串。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> newVersion = <span class=\"string\">`<span class=\"subst\">${verArray[<span class=\"number\">0</span>]}</span>.<span class=\"subst\">${verArray[<span class=\"number\">1</span>]}</span>.<span class=\"subst\">${verArray[<span class=\"number\">2</span>]}</span>`</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> newVersion = newVersion + <span class=\"string\">\"-\"</span> + md5(<span class=\"string\">`<span class=\"subst\">${<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()}</span><span class=\"subst\">${newVersion}</span>`</span>);</span><br></pre></td></tr></table></figure><p>将最新的版本号信息重新写入 <code>package.json</code> 文件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> packageJson = fs.readFileSync(<span class=\"string\">\"./package.json\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> packageJson = <span class=\"built_in\">JSON</span>.parse(packageJson);</span><br><span class=\"line\">packageJson.version = newVersion;</span><br><span class=\"line\"><span class=\"keyword\">var</span> newPackage = <span class=\"built_in\">JSON</span>.stringify(packageJson);</span><br><span class=\"line\">fs.writeFileSync(<span class=\"string\">\"./package.json\"</span>, newPackage);</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p><del>直接 CV 代码！</del></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 更新 package.json 版本号</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fetch = <span class=\"built_in\">require</span>(<span class=\"string\">\"node-fetch\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> md5 = <span class=\"built_in\">require</span>(<span class=\"string\">\"js-md5\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getVersion = <span class=\"keyword\">async</span>() =&gt; {</span><br><span class=\"line\">    <span class=\"keyword\">const</span> latestVersion = <span class=\"keyword\">await</span> fetch(<span class=\"string\">\"https://registry.npmjs.org/cky-blog-static/latest\"</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.json()).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.version;</span><br><span class=\"line\">    })</span><br><span class=\"line\">    <span class=\"keyword\">return</span> latestVersion;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> update = <span class=\"keyword\">async</span>() =&gt; {</span><br><span class=\"line\">    <span class=\"keyword\">const</span> version = <span class=\"keyword\">await</span> getVersion();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> verArray = version.split(<span class=\"string\">\".\"</span>);</span><br><span class=\"line\">    verArray[<span class=\"number\">2</span>] = verArray[<span class=\"number\">2</span>].split(<span class=\"string\">\"-\"</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (verArray[<span class=\"number\">2</span>] &lt; <span class=\"number\">9</span>) {</span><br><span class=\"line\">        verArray[<span class=\"number\">2</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">2</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">    } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (verArray[<span class=\"number\">1</span>] &lt; <span class=\"number\">9</span>) {</span><br><span class=\"line\">        verArray[<span class=\"number\">1</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">1</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">        verArray[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">        verArray[<span class=\"number\">0</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">0</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">        verArray[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        verArray[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newVersion = <span class=\"string\">`<span class=\"subst\">${verArray[<span class=\"number\">0</span>]}</span>.<span class=\"subst\">${verArray[<span class=\"number\">1</span>]}</span>.<span class=\"subst\">${verArray[<span class=\"number\">2</span>]}</span>`</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> newVersion = newVersion + <span class=\"string\">\"-\"</span> + md5(<span class=\"string\">`<span class=\"subst\">${<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()}</span><span class=\"subst\">${newVersion}</span>`</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(newVersion);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> packageJson = fs.readFileSync(<span class=\"string\">\"./package.json\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> packageJson = <span class=\"built_in\">JSON</span>.parse(packageJson);</span><br><span class=\"line\">    packageJson.version = newVersion;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newPackage = <span class=\"built_in\">JSON</span>.stringify(packageJson);</span><br><span class=\"line\">    fs.writeFileSync(<span class=\"string\">\"./package.json\"</span>, newPackage);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Complete!!\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">update();</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%9C%80%E5%90%8E\" class=\"headerlink\" title=\"最后\"></a>最后</h2>\n<p>如果是 Hexo 文件部署，就可以直接把文件直接丢在项目根目录，Action 集成部署加上：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">node update.js</span><br></pre></td></tr></table></figure><p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.16/rawimg/20220804135818.png\"></p>\n<p><del>Blog 半年没更新，除除草 --(....</del></p>\n","link":"https://blog.yfun.top/posts/2022/auto-update-npm-version/"},{"title":"消费降级生活不降级，我的 1688 购物心得","date":"2022-08-04 04:04:19","description":"1688 建立的初衷是为批发商或者商户找到合适的生产商，由于平台允许商户购买样品，所以个人消费者也可以在 1688 上进行购买。在 1688 平台进行了大半年采买后，我想和大家分享一下我的购物体验和购物感受，也欢迎各位朋友分享你的「批发」心得。<a href=\"https://sspai.com/post/74991\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/74991"},{"title":"如何评价国产动画《毛头的深夜理发店》？","date":"2022-08-03 03:28:08","description":"\n<p data-pid=\"Zhxxb-dP\">大家好，我是《毛头的深夜理发店》的主创，也是故事里的理发店老板，我叫毛头。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-eab1ab50fc8056048dce01a2af204605_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1670\" data-rawheight=\"2420\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-eab1ab50fc8056048dce01a2af204605\" data-watermark-src=\"v2-a12710c6e6951aadeecc30498cf62b35\" data-private-watermark-src=\"v2-fca2b92a07807b20f98ca4115d31d3ab\"></p>\n<p data-pid=\"fjspqRDG\">一年前，我做了一个动画账号，叫「天才职业故事」，很多朋友知晓《毛头的深夜理发店》这部动画剧集，也是通过「天才职业故事」追更来的。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-73fcd2a0030e5b2d1e9ae2afd2cff2da_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1612\" data-rawheight=\"1070\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-73fcd2a0030e5b2d1e9ae2afd2cff2da\" data-watermark-src=\"v2-7ef63845b14ee91d4cee398d33810e0f\" data-private-watermark-src=\"v2-bc29193f94a1aef6ccfa2bb52a7b0856\"></p>\n<p data-pid=\"q35vw8zu\">「天才职业故事」有一个slogan，叫“看见1000个不为人知的职业故事”，这句话是我们开始做这件事情时定下来的小目标，那就是先做够1000个动画故事。<br><br>但实际上，在我们做到第43个的时候，就被迫先暂停下来了。<br>原因是，做动画可太tm烧钱了。<br><br>《毛头的深夜理发店》这个节目上线后，我看到了挺多评论，有说我们的动画制作不流畅，有说像ppt，虽然听着不太好听，但说得也确实没毛病。<br>因为现在的我们既做不到逐帧动画，也算不上什么大制作，但就这种程度的动画，已经是在我们有限的经费范围内，尽全力做到最好了。<br><br>说回来，应该有挺多熟悉我们的人都知道，我们用动画记录的所有故事，都是真实故事改编。<br>那为什么会选择用动画的方式记录这些真实故事呢？<br><br>不瞒大家说，当初做这个决定的时候，真是挺大胆的。<br>为啥，因为我们根本没有人会做动画，也没有人做过动画。<br><br>最开始我们这伙人就是一群写故事的人，满世界找作者，挖掘故事，记录故事，这事儿一干就是四五年。你在知乎上应该看到过一些专栏，像《真实解剖手记》、《真实寻凶手记》，都是我们挖掘并编辑的，陈拙和我是老搭档了。</p>\n<p><img src=\"https://pica.zhimg.com/v2-2785a8fde999842ccb7f7434e09e5f93_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1280\" data-rawheight=\"2769\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-2785a8fde999842ccb7f7434e09e5f93\" data-watermark-src=\"v2-e54f9049d6d7a424b6aa9df83830fa3e\" data-private-watermark-src=\"v2-1a3d0b5877fa879012cc9080887cafcf\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-59cd649ddad0087bedc60a4b4373bc3f_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1280\" data-rawheight=\"2769\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-59cd649ddad0087bedc60a4b4373bc3f\" data-watermark-src=\"v2-91860128639701296683e3188f96b17f\" data-private-watermark-src=\"v2-c5329912eaf1a137fc286b40d445b738\"></p>\n<p data-pid=\"_kh6c1hQ\"><br>这些年我们已经在「天才捕手计划」这个账号里，发布了600多个万字以上的文字故事，有的故事已经以文字的形式出版成书；有的故事被录制成播客，以声音的方式被大家听到；有的故事正在筹备拍成电影，未来会在大荧幕上跟大家见面。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-cba03ccb4a803236c860635ba09fb132_720w.jpg?source=b1748391?rss\" data-rawwidth=\"688\" data-rawheight=\"691\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-cba03ccb4a803236c860635ba09fb132\" data-watermark-src=\"v2-d1330c1364b67654eab22289109a48d2\" data-private-watermark-src=\"v2-6965268ff1c87345a7e94531778d2362\"></p>\n<p data-pid=\"nBMRxaqQ\"><br>我们一直在探索用更多的方式让更多的人看到这些真实的稀缺的好看的故事，动画，也是其中一种。<br>有了这个想法之后，这局儿就算攒起来了。差不多就是去年的这个时间，我拉上了两个只会画漫画的人，开始琢磨怎么把这个玩意儿给它动起来。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-b1d366600f07133ebde9ccf3577ff3fb_720w.jpg?source=b1748391?rss\" data-rawwidth=\"663\" data-rawheight=\"813\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-b1d366600f07133ebde9ccf3577ff3fb\" data-watermark-src=\"v2-e8d8c8e18e47be0d62b72b1f5ecd6f48\" data-private-watermark-src=\"v2-1e5169fd7f6406086d1b8ca741491a92\"></p>\n<p data-pid=\"kbpoZhz1\"><br>这一干就是一年，这一年一口气做了43个动画，太爽了，太刺激了，然后钱就要花完了，哈哈哈。<br><br>虽然听起来挺好笑，但当时整个团队确实面临着一个巨大困境，就是，我们可能要原地解散了。<br>在距离完成1000个故事的小目标还剩下957个的时候，嗝屁了。<br>没钱嘛，我少吃两顿倒没关系，但创作团队的年轻人们，大家都要吃饭的。<br><br>挺难受的，一年多了，从不会做到会了一点点，从两三个人到十几个人，熬了那么多夜，取得了一些还算不错的成绩，挺难的。<br>还没来得及做得更好，就要停下来了。<br><br>那会儿我琢磨了好几天，没怎么睡觉，最后跟小伙伴们讲：咱们先暂停下来吧，把1000个故事的小目标先放一放，我们还有一辈子的时间去把它做完。<br>但现在，咱们花光剩下的经费，先去干票大的。<br><br>于是，就有了《毛头的深夜理发店》。<br></p>\n<p><img src=\"https://pica.zhimg.com/v2-eab1ab50fc8056048dce01a2af204605_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1670\" data-rawheight=\"2420\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-eab1ab50fc8056048dce01a2af204605\" data-watermark-src=\"v2-a12710c6e6951aadeecc30498cf62b35\" data-private-watermark-src=\"v2-fca2b92a07807b20f98ca4115d31d3ab\"></p>\n<p data-pid=\"N3BRVsLD\">这一次，我们希望尽全力做得更好一点，所以从「天才职业故事」到《毛头的深夜理发店》的这一过程中，我们做了三个小升级。<br><br><br>一、画风<br>最开始做「天才职业故事」，我们几乎是一集一个画风，因为不咋会做，所以不知道我们可以做成什么样子。从自己摸索自己学，到慢慢寻找专业的伙伴加入，换了很多种不同的画风做尝试，想一直画，直到画出我们觉得最满意的一种风格。</p>\n<p><img src=\"https://pica.zhimg.com/v2-ecdd99a7aa34e13e105e0192f0458115_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1315\" data-rawheight=\"777\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-ecdd99a7aa34e13e105e0192f0458115\" data-watermark-src=\"v2-6d92802e81c9190966ff2b40fcdaa8e1\" data-private-watermark-src=\"v2-ae3edec346305e6574aad2b90cf2f30f\"></p>\n<p data-pid=\"uOXfOWHd\"><br>而《毛头的深夜理发店》，我们进行了一次统一的画风升级，为了让大家观看动画故事时更有代入感，我们在画面光影、氛围和人物形象表情的刻画上下了特别大的功夫。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-f9c7948d93caa95c8616b46042f3ca38_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1136\" data-rawheight=\"815\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-f9c7948d93caa95c8616b46042f3ca38\" data-watermark-src=\"v2-36bf7aeadfa95f4118dd75d4bd95c885\" data-private-watermark-src=\"v2-6416ae142b0aa318e4fa58919bae6dfc\"></p>\n<p data-pid=\"NIKt-E74\"><br>二、更新<br>做「天才职业故事」的时候，我们听到最多的一句话是“你们怎么总在阴间时间更新啊”。</p>\n<p data-pid=\"cTOKribE\">为什么总在阴间时间更新，是因为我们人数不多，比较笨拙，尤其是我们后期的伙伴，对细节的重视程度令人发指，一根头发丝儿的运动规律都不放过，经常赶在最后一刻改完，检查，然后发布前一看时间，又到深夜了。因为太想第一时间让大家看到，所以不论多晚，我都会点下发送键。</p>\n<p data-pid=\"WduzjvZu\">但这次《毛头的深夜理发店》，我们不仅做到了每周五上午十点准时更新，还做到了一口气更新两集。这个挑战也挺难的，但起码这次我们做到了，跟观众准时完成每一次的约定。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-33a2c759df6f14b84a00c5a3aabd5cc7_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1280\" data-rawheight=\"960\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-33a2c759df6f14b84a00c5a3aabd5cc7\" data-watermark-src=\"v2-78cd2b247742d8f635d8eb9e9969e2af\" data-private-watermark-src=\"v2-46ac5e0e3c7df9277324524b1eccf35a\"></p>\n<p data-pid=\"gkxTgxTn\">（这是小伙伴在地铁里偷拍到有路人正在看我们的动画，老开心了）<br><br><br>三、故事<br>做「天才职业故事」的时候，是每期一个不同的职业故事。<br>而《毛头的深夜理发店》，我们挑选了之前观众最爱看的几个系列，在200多个故事中挑选出了12个足够精彩的故事完成动画的改编。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-6f2982734cedbcdd0d1385cf9ff1dd5f_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1341\" data-rawheight=\"971\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-6f2982734cedbcdd0d1385cf9ff1dd5f\" data-watermark-src=\"v2-bc481d5b8aec8a6e1068dfe8659bb095\" data-private-watermark-src=\"v2-fffdaff2c6e4643d8861230733d61c61\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-a22c4c314c4399f33fa211e26b87fcd6_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1274\" data-rawheight=\"875\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-a22c4c314c4399f33fa211e26b87fcd6\" data-watermark-src=\"v2-29932d6b9a323689f55587762becc737\" data-private-watermark-src=\"v2-038eca47c3ef70ebc17b60387c40e3c7\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-749e78f71e93dff7596a1f6b574ee386_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1334\" data-rawheight=\"846\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-749e78f71e93dff7596a1f6b574ee386\" data-watermark-src=\"v2-892c4fd087b85914b2572689ffab049d\" data-private-watermark-src=\"v2-2d6d35992d4386c82d732749fc6d749d\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-377c044d21d86c0499e68f95ecef11b4_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1337\" data-rawheight=\"942\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-377c044d21d86c0499e68f95ecef11b4\" data-watermark-src=\"v2-4a084db3a13a486b5eb246b62d6a0c27\" data-private-watermark-src=\"v2-010a7ea6234cf9226f6b30f1a4ce05d9\"></p>\n<p data-pid=\"Br00aIi8\">在这次全新升级的《毛头的深夜理发店》这部剧集里涵盖了“重案刑警”、“热血法医”、“风骚律师”、“大检察官”、“正义民警”等这些罪案亲历者。 第1集：19岁毁容少女小华找到律师刘焱，委托他帮助自己76岁的奶奶离婚。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-bf5523dbcf62ffb5fade840fbdf08ea2_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1366\" data-rawheight=\"768\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-bf5523dbcf62ffb5fade840fbdf08ea2\" data-watermark-src=\"v2-b2243eee91d19d5903002815e0df9d6d\" data-private-watermark-src=\"v2-a7c59ac4a4c9bcf44919823e7d2ceb23\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-ac4ba9c67d4faf512cfcb2c01e36f6e8_720w.jpg?source=b1748391?rss\" data-rawwidth=\"393\" data-rawheight=\"762\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-ac4ba9c67d4faf512cfcb2c01e36f6e8\" data-watermark-src=\"v2-c19317104ce104ad101f2b79f7eb8625\" data-private-watermark-src=\"v2-9230e0751d6acb9e9b13112bdadb86e3\"></p>\n<p data-pid=\"OUNHcAiV\"><br>第2集：养狗的警察和女儿联手破了一起案子。案子就发生在女儿的学校，那年女儿高三，还剩俩月高考，学校的校花却突然死亡。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-a0314aae82d184e93c9d63d082624e44_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1366\" data-rawheight=\"768\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-a0314aae82d184e93c9d63d082624e44\" data-watermark-src=\"v2-ef547cf774167d8f619a57b307163895\" data-private-watermark-src=\"v2-4b06786d702a41f410ae35d92cf19536\"></p>\n<p data-pid=\"wnXZBM_y\"><br>有多少父母因为把孩子的一举一动当成了自己的面子、政绩，在这种窒息的掌控下长大的孩子害怕犯错，也就没有知错能改的能力。而知错能改，是个双向的过程，改正的人需要勇气，而接纳改正的人需要更多的准备。朋友之间是这样，情侣之间是这样，父母和儿女之间更是这样。<br><br><br>第3集：“名声很坏”的女人为了自证清白，喝下剧毒农药百草枯，围观的人权当个笑话看，唯独被戴绿帽的丈夫站出来力挺妻子。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-4e93cbe82ca97fda27789765ec1656b3_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1366\" data-rawheight=\"768\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-4e93cbe82ca97fda27789765ec1656b3\" data-watermark-src=\"v2-b793dacc82e59f02655ea952b3b44a8e\" data-private-watermark-src=\"v2-0df817716a75f4d92eecb8aed91882ad\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-a4dc7dbc41536b193980258d24538711_720w.jpg?source=b1748391?rss\" data-rawwidth=\"850\" data-rawheight=\"765\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-a4dc7dbc41536b193980258d24538711\" data-watermark-src=\"v2-8b4271ed7fb101871afc528621cfcfa5\" data-private-watermark-src=\"v2-2b80c91eb7f98c58cb89f6e01675bd60\"></p>\n<p data-pid=\"2ujYBlOL\"><br>第4集：年轻另类的女老师深得学生喜爱，她只带了两届学生，就在回家的路上被人杀害。而接手这起案子的，正是被她改变了一生的学生。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-90242d2e586fa9f65465c99f8f41eb5d_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1366\" data-rawheight=\"768\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-90242d2e586fa9f65465c99f8f41eb5d\" data-watermark-src=\"v2-1c9fecc0c2f416aca46c75fb9df4e9fd\" data-private-watermark-src=\"v2-6e5f7596737bbaba92039fb6a1df2a60\"></p>\n<p data-pid=\"Wcf3BBrw\"><br>如果有机会，我很想告诉那个当年落榜的男孩，你没有输，也没有掉队，高考不是终点，和整个人生相比它只是小小的一站，可以停靠，但休息好了要试着再跑起来。因为往后的每一步，才真正构成了你的人生。<br></p>\n<p data-pid=\"8SThDZuf\"><br>第5集：许小婧在下班路上被性侵了，报警后，却遭受了来自舆论、甚至家人的继续伤害。而帮她走出来的人，竟是那个一直撒娇的丈夫。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-2e80fea8cc144fb34d47e3391d4789dd_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1366\" data-rawheight=\"768\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-2e80fea8cc144fb34d47e3391d4789dd\" data-watermark-src=\"v2-18c16f22318b1ece1cab1bf95ebc589c\" data-private-watermark-src=\"v2-691ff7b278d29dd6cb4c7f8e71bad02f\"></p>\n<p data-pid=\"d-75Iuak\"><br>第6集：2020年秋天，蒋述警局接到金三角传来的消息，要求他们带走一位中国男子。当地流传只要杀死此人，拍下视频，就能拿到一笔巨额佣金。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-ea86b5d36a845c4bb8df4cc1a3624f7c_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1366\" data-rawheight=\"768\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-ea86b5d36a845c4bb8df4cc1a3624f7c\" data-watermark-src=\"v2-739411c55cfa6864aa68c3b6add7ae9d\" data-private-watermark-src=\"v2-9cd99ead4900560a2c1d884a32d354a5\"></p>\n<p data-pid=\"RmnAaPSE\"><br>现实当中挺多人也是这样过了一辈子，在困境和错误中挣扎又放弃，发现还在原地，最后心就死了。但如果选了对的路，那就尽量别停步。有时命运的戏谑就在于，你一直犹豫不决，等到终于下定决心，已经到了谢幕的时间了。<br><br><br>第7集：13岁的婷婷找侠女做法律援助，她被妈妈的男朋友强奸了，但没有人能帮她，甚至妈妈还帮她清洗了床单被褥等证据。刘任侠是否能帮婷婷讨回公道？</p>\n<p><img src=\"https://pic2.zhimg.com/v2-8ce2e42dbd3e6d8edf42b2a59ea119e7_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1366\" data-rawheight=\"768\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-8ce2e42dbd3e6d8edf42b2a59ea119e7\" data-watermark-src=\"v2-44825da9d3aa37b4239506ef80b675cb\" data-private-watermark-src=\"v2-ce1bfd0e318aa7c074f4b936961886f8\"></p>\n<p data-pid=\"vi430p6B\"><br>这个案子中最可悲的是，婷婷身边唯一的家人妈妈，却彻头彻尾成了共犯。她为了满足自己的情感需要甘愿牺牲婷婷，甚至以母爱之名勒索婷婷。我不知道离开后的婷婷，还是否能重新建立对这个世界的信任，只希望这世上的父母，再也不要把孩子当作筹码和牺牲品。<br><br><br>第8集：大学教授被毒杀在家中，痕迹检验师刘神隐走进这个家，搜寻所有隐秘线索。刘神隐始终感觉现场出现过一个陌生人，而解密的关键，藏在一个新买的iPhone里。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-4d37ac31b36921320012ba9b47cf967c_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1366\" data-rawheight=\"768\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-4d37ac31b36921320012ba9b47cf967c\" data-watermark-src=\"v2-586d70f32cf614eaad1d30505a954343\" data-private-watermark-src=\"v2-8d4099ce75144eee7781cb195c5ef92f\" data-qrcode-action=\"none\" data-tags=\"qrcode\"></p>\n<p data-pid=\"UOl6UhVw\"><br>第9集：刘任侠的小学同学程菲带来了一个沉重的委托，她希望刘任侠做她妈妈的律师。因为她的妈妈杀死了她的爸爸。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-4993505f7e39349e94a75b4b260bcde5_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1366\" data-rawheight=\"768\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-4993505f7e39349e94a75b4b260bcde5\" data-watermark-src=\"v2-e08cbb8b286e8f2fe3a5a8e8da2b4674\" data-private-watermark-src=\"v2-1d7bb6862f5e379c8bf3595148e0862a\" data-qrcode-action=\"none\" data-tags=\"qrcode\"></p>\n<p data-pid=\"kELKsK6M\"><br>在这个案子里，没有绝对的坏人，每一个人的行为动机都合乎逻辑，然而，事情仍然无可挽回地缓缓滑向溃败，在母亲以爱之名犯下重罪后，这场悲剧终于有了结果——没有赢家，没有幸存者。<br><br><br>第10集：一个长相漂亮的女孩，用一套“剧本”同时跟上百个男人谈恋爱。只是，当她走下诈骗流水线，想开始新生活的时候，却发现自己成了别人的“猎物”。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-63e4673aa0b39a59b6fc46b02d2d1fda_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1366\" data-rawheight=\"768\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-63e4673aa0b39a59b6fc46b02d2d1fda\" data-watermark-src=\"v2-b3d972f67bfa6d47f244dc8a6a7ac5a0\" data-private-watermark-src=\"v2-d16fec1aaa8ec0759d0d3f6bf3232b38\" data-tags=\"porn\"></p>\n<p data-pid=\"Rtznm4bi\"><br>第11集：村里发现了一具无脚女尸，调查后，却是失踪四年的冀灵。刘神隐和警方一开始怀疑凶手是冀灵性格木讷的老公，但最后却发现，凶手是一个看起来最不可能的人！</p>\n<p><img src=\"https://pica.zhimg.com/v2-647ea93d2f876105a5614e2e5a0227f7_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1366\" data-rawheight=\"768\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-647ea93d2f876105a5614e2e5a0227f7\" data-watermark-src=\"v2-d504d81df065df5066f71e78a9b0e47f\" data-private-watermark-src=\"v2-418e5df4a26aca1fa0b206b164ff34cf\"></p>\n<p data-pid=\"KfHVs-56\"><br>第12集：同一个地点，同一种手法，同一样工具，整个警队被一起“连环案”的线索耍得团团转。破案难度直线上升，出动了上百名警察之后，依旧一无所获。直到法医廖小刀找到了那颗梨，才发现凶手就在身边。</p>\n<p><img src=\"https://pica.zhimg.com/v2-c444ef5dc0c15e225e4d840036fd4179_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1366\" data-rawheight=\"768\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-c444ef5dc0c15e225e4d840036fd4179\" data-watermark-src=\"v2-73d97ab9470cc76b8538e432e57244b3\" data-private-watermark-src=\"v2-abdcf370366e26a69976cd93beafe286\"></p>\n<p data-pid=\"dShlWZmD\"><br>这些凶手缺少常识，没有一技之长，这个社会还没教会他们，吃饭的正确“姿势”。于是他们选择了最粗暴的几种方式——偷，抢，骗，甚至杀人。他们只是无知地认为，既然别人可以，那么我也可以。可只要有我们在，他们就不可以。<br><br><br>十二个真实故事<br>十二种残酷真相<br>暴力、嫉妒、怨恨、羞辱、欲望、恐惧、贪婪<br>都在《毛头的深夜理发店》这部剧集里了。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-55648419dc6e47d079558e94ee4973b1_720w.jpg?source=b1748391?rss\" data-rawwidth=\"722\" data-rawheight=\"847\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-55648419dc6e47d079558e94ee4973b1\" data-watermark-src=\"v2-d16dcf7d47715b3c10de297f02f9f98b\" data-private-watermark-src=\"v2-6b1b94fe2d245cc40c738b4e98250e16\"></p>\n<p data-pid=\"WkC0NJG1\">它一定不是一部最好看的动漫，也依然称不上是一部大制作的作品，但请仅仅把它当成一个还非常年轻的创作团队完成的一次小挑战来观看。<br>毕竟，这个小团队一定还会创作出更好看一点的动画作品。<br>毕竟，我们还有957个故事没讲完。</p>\n<p><br></p>\n<p><img src=\"https://pica.zhimg.com/v2-6638afb829abc2db5c6491bf1d0e71a3_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-6638afb829abc2db5c6491bf1d0e71a3\" data-watermark-src=\"v2-1e043593278662f338c4120337af011d\" data-private-watermark-src=\"v2-cdf8cf859be2303a704d790dcba2c254\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/tian-cai-zhi-ye-gu-shi?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">天才职业故事</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/546532267/answer/2606579839?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">33 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/517583348?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价《装甲骑兵》这部动漫的剧情？</a><br><a href=\"http://www.zhihu.com/question/517003697?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">《电锯人》动画看完后的感觉是怎样的？</a><br>\n","link":"http://www.zhihu.com/question/546532267/answer/2606579839?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"如何评价知音漫客漫画《零班编年史》，为什么现在都很难找得到了？","date":"2022-08-02 09:38:52","description":"\n<p data-pid=\"d6pJxq-p\"><b>《零班编年史》可能是知音漫客中最符合我笑点的四格漫画了。其玩梗以及吐槽功力实属罕见。</b></p>\n<p data-pid=\"PugathNd\">《零班编年史》于《知音漫客》2011年的Vol.196萌刊开始连载，于2015年6月18日在《知音漫客》第367期正式完结。一共43话。</p>\n<p data-pid=\"6hmaBdQF\">作者是<b>唐尼</b><sup data-text=\"主要负责编绘 滴水是负责和杂志社联系 \" data-url=\"\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"1\">[1]</sup><b>，</b>关于作者，我有且只有看过他的这部《零班编年史》，通常意义上来说，一部有趣的四格漫画，是可以无限期连载下去的，而《零班编年史》在当时最大的对手就是《浪漫传说》，人气方面一直徘徊在10-15名之间，因此最终不得不被腰斩。</p>\n<p data-pid=\"L77XoZRD\">在完结之时，他在贴吧如此说道</p>\n<p data-pid=\"Mh0lMc50\"><b>大意是，他画漫画是为了玩，他更愿意去服务那10%真正喜欢动漫的读者，而不是随波逐流去画小说改，后续会在同人圈以及网络独立漫画发展。</b></p>\n<p><img src=\"https://pica.zhimg.com/v2-19b0dfbcd58dce7c723168bc75447e77_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"580\" data-rawheight=\"223\" data-watermark=\"watermark\" data-original-src=\"v2-19b0dfbcd58dce7c723168bc75447e77\" data-watermark-src=\"v2-688c2aac32b23eba3366ead54d08b316\" data-private-watermark-src=\"v2-51c0c3ca8665d1f8576f09191b2222e0\"></p>\n<p data-pid=\"HTw8_qNO\">因此作者不再靠画漫画为生，而是凭借兴趣继续画漫画，不过偶尔也会出来恰饭哈哈哈，如果大家喜欢《零班》并且希望作者继续更新的，可以去支持一下</p>\n<p><img src=\"https://pic2.zhimg.com/v2-c3c41a8446a819ebc5ea38684acc276b_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"690\" data-rawheight=\"429\" data-watermark=\"watermark\" data-original-src=\"v2-c3c41a8446a819ebc5ea38684acc276b\" data-watermark-src=\"v2-f38668ce137b327cb1601e087021ffe4\" data-private-watermark-src=\"v2-9d4cbe0a8d56e08232434fa20261c051\"></p>\n<p data-pid=\"EB-7uWU8\">但是作者在漫客上连载完结以后，为了给一直以来支持《零班》的读者一个答案，转到微博上继续画画，但是由于版权问题，因此不能出现《零班》字样，改为DLC，感兴趣的可以去微博支持一下作者。</p>\n<p data-pid=\"Wb_bgkcH\"><i>微博名称：<b>红色有角三联星</b></i><sup data-text=\"\" data-url=\"https://weibo.com/u/1976847617\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"2\">[2]</sup></p>\n<p><img src=\"https://pic3.zhimg.com/v2-5ed5fd6862e6865de1468febcb9a1007_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\"></p>\n<p data-pid=\"DRmPxhOE\">由于转到微博上，因此没有足够的经费支持上色，因此第一话画面如下</p>\n<p><img src=\"https://pica.zhimg.com/v2-f31555c71a9463a5f0a00a4ea581a168_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\"></p>\n<p data-pid=\"xeloR1bs\">不过作者了却了大部分读者的心愿，那就是<b>纸箱君的真面目！</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-ef7dc21e709cf04508cdc46140ecfcd8_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1253\" data-rawheight=\"1772\" data-watermark=\"watermark\" data-original-src=\"v2-ef7dc21e709cf04508cdc46140ecfcd8\" data-watermark-src=\"v2-af66928ff553d65d2a4d2d19e2da2784\" data-private-watermark-src=\"v2-b1924820828b8b9daa42260641d02a71\"></p>\n<p><br></p>\n<p data-pid=\"fpdcoGes\">回到这个问题，为啥如今看不到《零班编年史》的漫画了呢？</p>\n<p data-pid=\"m06QLepm\"> 因为在《零班》完结后，人气越来越低，因此《零班》由于版权<sup data-text=\"漫客大部分作品如此\" data-url=\"\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"3\">[3]</sup>逐渐开始在各个漫画平台开始下架</p>\n<p data-pid=\"j3aKTKp0\">直到2020年，《零班》最后的平台漫客栈也下架了零班，《零班》从此开始走向绝版 </p>\n<p data-pid=\"SUWGO9j-\">加之以当时《零班》的人气，不足以出单行本，所以也就没有单行本的网上资源了。</p>\n<p data-pid=\"Qbvdd9YJ\">目前能看到这漫画的，也就是一些经常跳出小广告的盗版漫画网站，以及向我这样喜欢收集漫画资源的老粉自己在网盘保存的资源<sup data-text=\"有需要可私信我，免费分享\" data-url=\"\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"4\">[4]</sup></p>\n<hr>\n<p data-pid=\"Geyg54Nl\">既然聊到这了，就顺便重温一下《零班编年史》这部生不逢时的作品</p>\n<p data-pid=\"mEhB3GN5\">这部四格搞笑漫画的最大的几个特点就是，吐槽、neta、</p>\n<p data-pid=\"4FernbiZ\">随便举几个neta例子，那时neta做的最好的还是银他妈呢，《零班》多多少少有点放不开，大家可以自己看看这几张图究竟隐藏了多少彩蛋（不看注释的话）</p>\n<p><img src=\"https://pica.zhimg.com/v2-1ee5d786dd789f0694b2aafb8faf24e4_720w.jpg?source=b1748391?rss\" data-caption=\"龙珠太阳拳\" data-size=\"normal\" data-rawwidth=\"546\" data-rawheight=\"348\" data-watermark=\"watermark\" data-original-src=\"v2-1ee5d786dd789f0694b2aafb8faf24e4\" data-watermark-src=\"v2-032264468ea07118399b0fef6ee3bbc4\" data-private-watermark-src=\"v2-12d4eb15fc6aecb3fdfb6b5b0a3af3e5\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-094efde86d359471fec2b9ee3171b9c2_720w.jpg?source=b1748391?rss\" data-caption=\"北斗神拳\" data-size=\"normal\" data-rawwidth=\"542\" data-rawheight=\"338\" data-watermark=\"watermark\" data-original-src=\"v2-094efde86d359471fec2b9ee3171b9c2\" data-watermark-src=\"v2-bae83109b3da867096f96f5c3d97a6ac\" data-private-watermark-src=\"v2-14db8c5824dd2f9dc09647164a86dff8\" data-tags=\"porn\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-d97477b0c8a13232fa57530266617121_720w.jpg?source=b1748391?rss\" data-caption=\"辛德普\" data-size=\"normal\" data-rawwidth=\"531\" data-rawheight=\"338\" data-watermark=\"watermark\" data-original-src=\"v2-d97477b0c8a13232fa57530266617121\" data-watermark-src=\"v2-0fb8013a160ead323b3e01ceaccf24b7\" data-private-watermark-src=\"v2-f1314b34682386876e82a5ac0b992a97\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-c5e128b44365c194509353104fe8c987_720w.jpg?source=b1748391?rss\" data-caption=\"皮卡丘\" data-size=\"normal\" data-rawwidth=\"562\" data-rawheight=\"338\" data-watermark=\"watermark\" data-original-src=\"v2-c5e128b44365c194509353104fe8c987\" data-watermark-src=\"v2-1d66d799eb1e22e3ebc81450f2a16814\" data-private-watermark-src=\"v2-544de2b1b08519409a61f908c21a932b\"></p>\n<p><img src=\"https://pica.zhimg.com/v2-b5a1ccadf901dac2471c2e0f0c83af71_720w.jpg?source=b1748391?rss\" data-caption=\"拯救地球学院的五斗\" data-size=\"normal\" data-rawwidth=\"567\" data-rawheight=\"359\" data-watermark=\"watermark\" data-original-src=\"v2-b5a1ccadf901dac2471c2e0f0c83af71\" data-watermark-src=\"v2-b4f81dd0776714dfc354f88973ca2657\" data-private-watermark-src=\"v2-d3655f2db8409b9c6f459fd64a987010\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-60b35a1f0e3508a2b1f4e9cf610f4242_720w.jpg?source=b1748391?rss\" data-caption=\"比克\" data-size=\"normal\" data-rawwidth=\"540\" data-rawheight=\"338\" data-watermark=\"watermark\" data-original-src=\"v2-60b35a1f0e3508a2b1f4e9cf610f4242\" data-watermark-src=\"v2-6cc21e7c17dca2b8d168a6666913589c\" data-private-watermark-src=\"v2-569404a3f09a3867d162dec1716e91e3\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-d8e04c92b3b2c9d8fda212ada466cab3_720w.jpg?source=b1748391?rss\" data-caption=\"植物大战僵尸\" data-size=\"normal\" data-rawwidth=\"552\" data-rawheight=\"344\" data-watermark=\"watermark\" data-original-src=\"v2-d8e04c92b3b2c9d8fda212ada466cab3\" data-watermark-src=\"v2-027041690a9e87f2625d31a1048b8fd9\" data-private-watermark-src=\"v2-90f96279582cb90ba1988a7835ad9f06\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-052b03df1741a45e02fda6240b578a63_720w.jpg?source=b1748391?rss\" data-caption=\"鸣人和黑猫\" data-size=\"normal\" data-rawwidth=\"365\" data-rawheight=\"224\" data-watermark=\"watermark\" data-original-src=\"v2-052b03df1741a45e02fda6240b578a63\" data-watermark-src=\"v2-d2c5b427fba1d09da96021c966544828\" data-private-watermark-src=\"v2-f860bc016c99b4c20b637caf369df5aa\" data-tags=\"politic\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-105c0db137221a20cf088edd4789b47d_720w.jpg?source=b1748391?rss\" data-caption=\"高达\" data-size=\"normal\" data-rawwidth=\"427\" data-rawheight=\"245\" data-watermark=\"watermark\" data-original-src=\"v2-105c0db137221a20cf088edd4789b47d\" data-watermark-src=\"v2-734f93a6c5a6b817337dcef1bffd490b\" data-private-watermark-src=\"v2-2d28291ba7945ebced282dee6ab6a0c1\"></p>\n<p><img src=\"https://pica.zhimg.com/v2-c319a40dff98da6c0fd71c68301770f6_720w.jpg?source=b1748391?rss\" data-caption=\"圣斗士和更木剑八\" data-size=\"normal\" data-rawwidth=\"241\" data-rawheight=\"555\" data-watermark=\"watermark\" data-original-src=\"v2-c319a40dff98da6c0fd71c68301770f6\" data-watermark-src=\"v2-fb2115935ffab977db0afda88ccd6044\" data-private-watermark-src=\"v2-492c76f97a95e0f399ed2c929ab61548\"></p>\n<p><img src=\"https://pica.zhimg.com/v2-68abe4be55efb47be31034936dc398b7_720w.jpg?source=b1748391?rss\" data-caption=\"鸣人的九尾\" data-size=\"normal\" data-rawwidth=\"546\" data-rawheight=\"424\" data-watermark=\"watermark\" data-original-src=\"v2-68abe4be55efb47be31034936dc398b7\" data-watermark-src=\"v2-6c531a37bbaa62d38c73645e85cf49c2\" data-private-watermark-src=\"v2-4cdd466a8d11ee7127176856242faac0\" data-tags=\"porn\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-f517430ce4878fee1196ced3d927ad62_720w.jpg?source=b1748391?rss\" data-caption=\"龙珠战斗服\" data-size=\"normal\" data-rawwidth=\"330\" data-rawheight=\"595\" data-watermark=\"watermark\" data-original-src=\"v2-f517430ce4878fee1196ced3d927ad62\" data-watermark-src=\"v2-a44c99eb8053aef96558daf7c239a55b\" data-private-watermark-src=\"v2-e72b97657485aa9f8e60d25eb82f2f3b\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-a811b8417f1788d01bbc76966d4d7cba_720w.jpg?source=b1748391?rss\" data-caption=\"saber\" data-size=\"normal\" data-rawwidth=\"453\" data-rawheight=\"460\" data-watermark=\"watermark\" data-original-src=\"v2-a811b8417f1788d01bbc76966d4d7cba\" data-watermark-src=\"v2-2e584be6c4d487baef1a5d306a860c03\" data-private-watermark-src=\"v2-28fde3b95fc153e2df9f404300099fa0\"></p>\n<p><img src=\"https://pica.zhimg.com/v2-53e3a8709a9cc0c23d5206f1f7c1e701_720w.jpg?source=b1748391?rss\" data-caption=\"SD经典名言\" data-size=\"normal\" data-rawwidth=\"427\" data-rawheight=\"243\" data-watermark=\"watermark\" data-original-src=\"v2-53e3a8709a9cc0c23d5206f1f7c1e701\" data-watermark-src=\"v2-874d1285a2709a999f23fe783839e839\" data-private-watermark-src=\"v2-8dd2cf5c80b5c979afc8281e6c33eeca\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-911bbcb1b32c48f77b67dd49c46bd20b_720w.jpg?source=b1748391?rss\" data-caption=\"黑子和樱木\" data-size=\"normal\" data-rawwidth=\"423\" data-rawheight=\"463\" data-watermark=\"watermark\" data-original-src=\"v2-911bbcb1b32c48f77b67dd49c46bd20b\" data-watermark-src=\"v2-bdab2724df432d576fe5bd77ee02899e\" data-private-watermark-src=\"v2-89a552965d6ff797e9730dae7eb410fc\" data-tags=\"porn\"></p>\n<p><img src=\"https://pica.zhimg.com/v2-005461c7611dc102df00bb239b058c9e_720w.jpg?source=b1748391?rss\" data-caption=\"柯南黑衣人\" data-size=\"normal\" data-rawwidth=\"401\" data-rawheight=\"314\" data-watermark=\"watermark\" data-original-src=\"v2-005461c7611dc102df00bb239b058c9e\" data-watermark-src=\"v2-26a051f99c3d2888a60c6d4f916a8d08\" data-private-watermark-src=\"v2-0d75f62c8f4ecd51d20e227be1b65d5a\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-7d507d82ddfb8e2e15f7a1937ce39faf_720w.jpg?source=b1748391?rss\" data-caption=\"赛亚人\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"893\" data-watermark=\"watermark\" data-original-src=\"v2-7d507d82ddfb8e2e15f7a1937ce39faf\" data-watermark-src=\"v2-0ca424907033f8aa950e0b36edf041c4\" data-private-watermark-src=\"v2-7e3fdfebdf8f5f54195443b7a1f0ef7e\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-d550c88c0366ec9631c4c1aac53fb2a9_720w.jpg?source=b1748391?rss\" data-caption=\"蜡笔小新\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"929\" data-watermark=\"watermark\" data-original-src=\"v2-d550c88c0366ec9631c4c1aac53fb2a9\" data-watermark-src=\"v2-f79795d2eca2fa231a0c3f1b7097290e\" data-private-watermark-src=\"v2-5585816f3b05b0b89bf7f891396cbf1a\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-38bba5b429c7aa2255142280bc103886_720w.jpg?source=b1748391?rss\" data-caption=\"奥特曼和小怪兽\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1797\" data-watermark=\"watermark\" data-original-src=\"v2-38bba5b429c7aa2255142280bc103886\" data-watermark-src=\"v2-d59febebcfc8dad7b3cadc17dec8de17\" data-private-watermark-src=\"v2-a31c657dd35ea6d726800448476d1144\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-38a919743aba6f71b57e3eb4e1483e01_720w.jpg?source=b1748391?rss\" data-caption=\"哆啦A梦\" data-size=\"normal\" data-rawwidth=\"1299\" data-rawheight=\"1735\" data-watermark=\"watermark\" data-original-src=\"v2-38a919743aba6f71b57e3eb4e1483e01\" data-watermark-src=\"v2-e8773cf7248e31d5bb21b7a6df446a9d\" data-private-watermark-src=\"v2-910b7e5cc734e286341d438f229625c1\"></p>\n<p><br></p>\n<p><img src=\"https://pica.zhimg.com/v2-15c59be960ff09db785c22872e2fb7cf_720w.jpg?source=b1748391?rss\" data-caption=\"柯南\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"873\" data-watermark=\"watermark\" data-original-src=\"v2-15c59be960ff09db785c22872e2fb7cf\" data-watermark-src=\"v2-da6408e8f4020c57dd54744000253e8a\" data-private-watermark-src=\"v2-f3e4cfeb2269ef43a3c5e7cb6c9c2954\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-f5b46aa3f1f10125c05bf1cef75cf1ea_720w.jpg?source=b1748391?rss\" data-caption=\"蜘蛛侠\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"2164\" data-watermark=\"watermark\" data-original-src=\"v2-f5b46aa3f1f10125c05bf1cef75cf1ea\" data-watermark-src=\"v2-1a77b7ab9e8bccd38b4ece794e4a2467\" data-private-watermark-src=\"v2-e4d9967805bd3bdca183b7189d8b3d61\" data-tags=\"politic\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-0d402fe5cd337fac524d588fc6ab68cd_720w.jpg?source=b1748391?rss\" data-caption=\"初号机暴走\" data-size=\"normal\" data-rawwidth=\"1420\" data-rawheight=\"1691\" data-watermark=\"watermark\" data-original-src=\"v2-0d402fe5cd337fac524d588fc6ab68cd\" data-watermark-src=\"v2-a00a7d14f7b502e25b3aa7518747f0c7\" data-private-watermark-src=\"v2-b382b695eb932f6e71bd0428ecaa0ac0\"></p>\n<p data-pid=\"keqSbTiK\">除了让资深漫迷喜闻乐见的neta外，本作的吐槽也是非常给力，顺便举两个例子</p>\n<p data-pid=\"b2NnZ7Y6\">在差生眼中，70分也是高分，而且是天才级别</p>\n<p><img src=\"https://pic3.zhimg.com/v2-12fc20f58e18e11567cee836cfc9a72a_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1307\" data-rawheight=\"1693\" data-watermark=\"watermark\" data-original-src=\"v2-12fc20f58e18e11567cee836cfc9a72a\" data-watermark-src=\"v2-150186366b454cc926019f9d19d4abd4\" data-private-watermark-src=\"v2-6c743c60c6fac2e053bd2031a4d5e55c\"></p>\n<p data-pid=\"5k_49lko\">比赛结束后，安慰自己</p>\n<p><img src=\"https://pic3.zhimg.com/v2-bdefa4eb8fa60041419919e2e8526390_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"2257\" data-watermark=\"watermark\" data-original-src=\"v2-bdefa4eb8fa60041419919e2e8526390\" data-watermark-src=\"v2-f191de56253bfb49cd9e8d7574ce4881\" data-private-watermark-src=\"v2-adacd8dcc7eb8a99a2612dd690605532\"></p>\n<p data-pid=\"9oAhXhnC\">戴上眼镜变了一个人</p>\n<p><img src=\"https://pica.zhimg.com/v2-cd4c7b7782b883582eccab3526a7f58f_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"2556\" data-watermark=\"watermark\" data-original-src=\"v2-cd4c7b7782b883582eccab3526a7f58f\" data-watermark-src=\"v2-5da4e9922ce1ae75516c97dc818d1c64\" data-private-watermark-src=\"v2-82aad29d2358b693dae163f5155fc0ba\" data-tags=\"porn\"></p>\n<p data-pid=\"_plnbsoo\">纸箱下面还是纸箱</p>\n<p><img src=\"https://pica.zhimg.com/v2-b803432ca13b60e09d14cbb84ebe3a0d_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1716\" data-watermark=\"watermark\" data-original-src=\"v2-b803432ca13b60e09d14cbb84ebe3a0d\" data-watermark-src=\"v2-8dd05fd5f2646c9df4fa3eb2a9736ba3\" data-private-watermark-src=\"v2-81e76575eccbe1f167cec0b3b1649bcd\"></p>\n<p data-pid=\"u1IeuO4H\">纸箱的真面目就是还有一个纸箱</p>\n<p><img src=\"https://pic1.zhimg.com/v2-f2c78a620393d7c70eaac68672b881e8_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"2257\" data-watermark=\"watermark\" data-original-src=\"v2-f2c78a620393d7c70eaac68672b881e8\" data-watermark-src=\"v2-e771c5d5e62616530256102e682240d4\" data-private-watermark-src=\"v2-1192ade85fa7c0a74278f02c6ce88bfb\"></p>\n<p data-pid=\"Bw7GpIfd\">利用纸箱的俯视图来作弊</p>\n<p><img src=\"https://pica.zhimg.com/v2-87118c68d147a2bf2415d73e9d890077_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1332\" data-rawheight=\"1593\" data-watermark=\"watermark\" data-original-src=\"v2-87118c68d147a2bf2415d73e9d890077\" data-watermark-src=\"v2-9df81825b890d67671e3cadca9a1a5c8\" data-private-watermark-src=\"v2-76dd1d0cb77e27692b0c214193d99dc9\"></p>\n<p data-pid=\"TtPILj9C\">在纸箱上写字＝纹身</p>\n<p><img src=\"https://pic1.zhimg.com/v2-2c30af576f85065d963b85b9b3d9edac_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"2269\" data-watermark=\"watermark\" data-original-src=\"v2-2c30af576f85065d963b85b9b3d9edac\" data-watermark-src=\"v2-0c64f97a78ca3629a15095f7325a5efa\" data-private-watermark-src=\"v2-a41220b207fa7261a47a4159c6e31d0c\"></p>\n<p data-pid=\"m07YDQps\">而作为故事的主线，简单概括一下就是</p>\n<p data-pid=\"h04x7W7K\"><b><i>在一群全是女性的学院之中，有一个特殊的“零班”，这个班级是由五名性格各异的男性组成，分别是纸箱君、霍金、东少、安键和我们的主角秋时雨，在这所女子学院发生的日常校园故事。</i></b></p>\n<p data-pid=\"uVnx7Rtn\">按理来说，这种日常漫应该是没有尽头的，只要读者愿意看，作者应该就能无限画下去，然而结果是，这部作品后期由于人气不佳，导致在43话直接腰斩。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-3850928f39a99c2a225bc6f9ba198740_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"2841\" data-watermark=\"watermark\" data-original-src=\"v2-3850928f39a99c2a225bc6f9ba198740\" data-watermark-src=\"v2-ec72373116010cc0f23a8f131291c72c\" data-private-watermark-src=\"v2-4e6fc5543489315c758394f91262c25d\"></p>\n<p data-pid=\"EFIdUbRK\">在知音漫客上连载的最后一话43话中，纸箱君终于脱下纸箱露出真面目，而且也大放豪言，要开创零班的新纪元…无数的读者也都在期待着，然而，又有多少人还记得这个约定呢？</p>\n<p data-pid=\"9ItyK3OZ\">中国漫画中又有多少作品因为同样的原因留下一大堆坑未填的呢？</p>\n<p data-pid=\"k_hdJ31i\">《零班编年史》不会是第一个，也不会是最后一个，但是作者已经尽了自己最大的努力，给了读者很多后续的答案…但是仍在执着追求答案的读者，又还剩多少呢？</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/bin-di-47-74?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">彬帝</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/278025029/answer/2605507630?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">5 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/543232578?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">找一个知音漫客上连载过的漫画！想了两年了！?</a><br><a href=\"http://www.zhihu.com/question/536588519?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">想找《知音漫客》的一部短篇？只有一回。。。？</a><br>\n","link":"http://www.zhihu.com/question/278025029/answer/2605507630?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"如何评价 Steam 游戏《晴末置雨》？","date":"2022-08-02 08:28:02","description":"\n<p data-pid=\"xwKWfmRg\">    大家好，我是置雨制作组的咸鱼，《晴末置雨》的主催。《晴末置雨》是一部由置雨制作组开发的百合向文字冒险游戏，也是我参与制作的第一款游戏，目前已上架steam。非常荣幸能在知乎上写下这篇制作人亲自答，我也就趁此机会跟大家聊聊制作《晴末置雨》的故事。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-c326e68a0b5a71eb315566cc00099d34_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"420\" data-watermark=\"watermark\" data-original-src=\"v2-c326e68a0b5a71eb315566cc00099d34\" data-watermark-src=\"v2-023ad28573b1d47225b7576c26e358d6\" data-private-watermark-src=\"v2-6f38d0c708ab546017e4c622aa830af7\"></p>\n<p><br></p>\n<p data-pid=\"iip6WJX0\">商店链接：<a href=\"http://link.zhihu.com/?target=https%3A//store.steampowered.com/app/1833040/_/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">store.steampowered.com/</span><span class=\"invisible\">app/1833040/_/</span><span class=\"ellipsis\"></span></a></p>\n<h2><b>引子：</b></h2>\n<p data-pid=\"IxOvpCL_\">    19年的时候我第一次萌生了做独立游戏的想法，不过那时候还不知道到底应该做什么类型的游戏。后来有一天，在一个游戏交流群里，大家聊起自己的工作和学业，有人提议一起做一部同人游戏出来，那时的我由于什么都不会所以也就没有参与讨论，不过这给了我一个新的想法：“不如做个AVG出来怎么样？”。</p>\n<p data-pid=\"xsbHePaX\">    之后，我了解了AVG的制作人员构成和技术相关的知识，也想过一些题材。不过因为要应付自招，手上没什么资金而且也不认识画师、编剧等等在AVG开发中比较重要的制作人员，就暂时搁置了。</p>\n<p><br></p>\n<p data-pid=\"H2OB2QcX\">    时间来到2021年，应付完自招的我有了充分的个人时间和精力，我想起了之前提到的那部同人游戏，发布几个月以来，游戏在原作粉丝群体中收获了几乎清一色的好评，有点感兴趣就想下载下来玩一玩。于是在列表中找到了那部游戏的主催——白酪丝，获得了游戏的官网地址并且在下载之后好好玩了玩。说到这大家也许都知道了，那部同人游戏正是《线转_MisrepresentLove》。我在玩了线转以后非常喜欢白酪丝的剧本，在聊天的时候说起打算做AVG的事，而白酪丝正好也有意向做原创游戏，我就顺势说起了我的计划，想让白酪丝来担任剧本。白酪丝同意之后，我也开始着手企划的撰写和资金的筹备。</p>\n<p data-pid=\"2jkN2-pc\">    说起资金，虽然前几年就有在刻意攒钱，但作为游戏开发的资金肯定是远远不够的，制作之初这是个非常令人头疼的问题，我也想到了暂时的解决办法：出去打工。那时的我在肯德基做了几个月配餐，暂时赚到了一点钱作为开发资金后就离职了，可惜当时没考虑到开发游戏需要那么多预算，早知道就再打几个月工了。</p>\n<h2><b>制作：</b></h2>\n<p data-pid=\"LM9Hds40\">    离职之后我开始写企划书，最初的企划是一部骨科百合，但是因为没有严谨考虑过那篇企划的可完成性，就被我自己打回了。在构思新企划的时候想到目前绝大多数百合作品都是着重描写两人相识相恋的过程，而相恋之后可能会出现的种种问题则基本不会去讨论，我觉得这或许是个很新颖的题材，就写下了这篇企划，白酪丝看了也非常感兴趣，就定下来了，也就是大家现在玩到的《晴末置雨》的雏形。白酪丝很快就写出了剧本大纲，经过几轮修改之后很快写出了正式的剧本，之后更是负责了制作组几乎所有文字内容，包括宣传文案、成就包装以及乐曲命名。我也根据正式剧本定下了需要的美术和音乐素材。</p>\n<p><br></p>\n<p data-pid=\"QUcterLw\">    立绘与CG也是AVG中非常重要的一部分，所以我当时把大部分预算都放在了美术资源上。白酪丝在一次漫展中认识了叽菇，也就是后来《晴末置雨》的立绘与CG画师，不过最初我们只找叽菇谈论了CG的绘制，立绘则是由我在网上联系到的画师星星布丁负责，也就是大家在我们制作组第一次宣传中看到的初版立绘：</p>\n<p><img src=\"https://pic3.zhimg.com/v2-9b1f26178d89bb0e47bcb97cc3bf031a_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"457\" data-rawheight=\"314\" data-watermark=\"watermark\" data-original-src=\"v2-9b1f26178d89bb0e47bcb97cc3bf031a\" data-watermark-src=\"v2-f03ae37e2cd5f442e525b334f85bfb9f\" data-private-watermark-src=\"v2-ac77aa819f5ff4fe0065e542c01a55b7\"></p>\n<p><br></p>\n<p data-pid=\"BClpEl_g\">    星星布丁大大是非常厉害的画师，但由于当时资金实在非常有限，所以画出的风格更偏向于轻松的校园喜剧，与略显酸涩的现实主义故事背道而驰。但当时的我们只把这部作品当做了小圈子里的自嗨产物，竟然真的将这一版立绘实装到了游戏之中。</p>\n<p data-pid=\"w3WboDrI\">    因为一些日G的影响，再加上有《线转》中尝试的经验，白酪丝根据剧本找到了Kebol，约了几张Q版CG，也就是游戏里大家看到的那几张，生动的Q版表情为主角们的日常增添了不少活力，最终的效果也是大家有目共睹的。</p>\n<p data-pid=\"M0MJ-NMS\">    这次的背景则是用的ResDIY的免费背景素材，由纸质根据剧本需要稍作修改之后才放进了游戏，这也是大家觉得背景很眼熟的原因。</p>\n<p><br></p>\n<p data-pid=\"rHG-vigg\">    搞定了美术，我想起配音的事情，之前《线转》的配音灵缡心一人两役配完了两位主角，专业程度令人十分佩服，我就请白酪丝联系了一下，看看能否让她为《晴末置雨》的其中一位主角配音，没想到这次心姐还拉上了她的朋友新月冰冰和紫苏九月，一同完成了这次《晴末置雨》三人的配音。</p>\n<p data-pid=\"c6kTqL98\">    听觉方面有了全中文语音，BGM自然也不可或缺。音乐部分一开始是想找我以前学电吉他时的老师制作，老师平时会自己写一些曲子，不过在了解价格之后果断放弃了。后来我也想过使用网络上的免费素材，便在网上四处翻找，却始终没有找到令人中意的。不得已只能请教当时认识的几个主催，他们则为我推荐了黑耀老师，搭上线后，我们在黑耀老师的素材库中找到了几首比较适合的曲子作为《晴末置雨》的BGM。</p>\n<p data-pid=\"Qgr34xw3\">    在文字、声音、美术都已完备的情况下，晴末置雨的制作也接近尾声，当时的我们计划在22年的年初发售游戏，将这块未经打磨的粗糙石块，投进不会回应它的大海之中……</p>\n<p data-pid=\"6mto4BzW\">    然而大家是否觉得这和最终看到的游戏成品不太一样呢？这就要说起去年年底临近原定发售日期之际，我们和龍之咲合作的事情了。</p>\n<p data-pid=\"Cvp49GBq\">    21年下半年，HD老师组织了一次聚餐，由于原定在11月的CP取消，所以聚餐也就改到了12月，在餐桌上HD老师和其他几位大大聊完后，提起了我们的作品，看完后他问了我几个问题：</p>\n<p data-pid=\"HUTVy1kc\"><b>    “为什么立绘和CG的风格差别这么大？”</b></p>\n<p data-pid=\"_IHDpQ_K\">    我很无奈地解释道是因为资金问题。</p>\n<p data-pid=\"OEk1yddn\"><b>    “既然CG的风格更适合作品主题，为什么不让同一个画师负责？你作为一个玩家的身份来考虑一下，你在steam上会花钱买你现在的作品吗？”</b></p>\n<p data-pid=\"s3n-W6KT\">    我被这些尖锐的问题戳中，甚至心里还暗自想要狡辩，一来我们的资金并不宽裕，想要堆量和推精度都举步维艰；二来我们一开始就将自己放在了“只要能做出来就算成功”的定位下，做到现在的程度，至少满足了这个要求，然而HD老师却否定了我们的项目制作。</p>\n<p data-pid=\"RvRJEq7M\">    但之后，HD老师又说：</p>\n<p data-pid=\"pHnYRchf\"><b>    “别和自己妥协。”</b></p>\n<p data-pid=\"NtcKfMCj\">    我这才回想起来，所谓的低成本不过是为自己的低品质搬来的挡箭牌，而我们真正想做的也绝不是现在这样的半成品，归根结底，我们并没有遵循自己的意愿去做自己理想中的作品。</p>\n<p data-pid=\"mHvM3JYd\">    在接受了对方的逻辑推导后，我们还聊了替换立绘的预算，以及今后的合作模式。</p>\n<p data-pid=\"J7Ak0ZRz\">    “如果没有回本的话，钱就不用还了。”HD老师提出了这个无法反驳的提案，在感受到期待和信任，最重要的是明白自己最开始制作游戏的目的后，我们立即取消了原定的发售计划，着手进行游戏品质的提高。</p>\n<p data-pid=\"yN4t65_2\">     最能取得立竿见影效果的，是美术方面：</p>\n<p><img src=\"https://pic4.zhimg.com/v2-910d1f8c65a210ca5baa3d4aadbbc04a_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"553\" data-rawheight=\"427\" data-watermark=\"watermark\" data-original-src=\"v2-910d1f8c65a210ca5baa3d4aadbbc04a\" data-watermark-src=\"v2-39f4f296b88b204d0071b2260ea6a8a6\" data-private-watermark-src=\"v2-860140deeecf027729268507b73f3247\"></p>\n<p><br></p>\n<p data-pid=\"TPKEPqxo\">    我们让原本只负责CG的叽菇接手了立绘的迭代，保证CG与立绘的画风统一，也让游戏风格与角色特性更加鲜明，在新一版的立绘下，羽墨的干练，芷晴的可爱，还有婉茗的温柔，都获得了更加突出的表现。</p>\n<p data-pid=\"wQjd3r1z\">    另一方面，在打磨过程中我们发现游戏的BGM实在是少，重复度太高，就找黑耀老师额外制作了三首曲子，三首共用一个主旋律，根据情绪的变化衍生出截然不同的听觉感受，分别是主题曲《焉知晴雨》、羽墨角色曲《薄雾弥时》和芷晴角色曲《雾散云开》。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-5fd9456caec79aa8aa32ff57f3aec06a_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1269\" data-rawheight=\"242\" data-watermark=\"watermark\" data-original-src=\"v2-5fd9456caec79aa8aa32ff57f3aec06a\" data-watermark-src=\"v2-c9bd041be4105317bb11b6467059fa0f\" data-private-watermark-src=\"v2-368f5ce460f6d9c1d40a32852b11dba0\"></p>\n<p><br></p>\n<p data-pid=\"-0br8VuU\">    只可惜剧本完成已久，配音也早已在切分后实装，若要扩写和改动，牵扯到的方面实在太多。我们不得已放弃了对剧情结构的变更，但还是对描述性的文字逐句进行了优化。</p>\n<p data-pid=\"6oiO8rGi\">    经过了数月的打磨，《晴末置雨》才算正式完成，最终上线了。</p>\n<p data-pid=\"XXdCMsSi\">    自上线以来，不只是Steam上的评论，B站，贴吧、微博上，只要有对《晴末置雨》的评论和意见，我们都在持续记录着，借用编剧白酪丝很喜欢玩的一句漫画梗：必可活用于下一次。</p>\n<h2><b>致谢：</b></h2>\n<p data-pid=\"2f6hWbuB\">    十分感谢这一路上参与制作、提供过帮助、帮忙宣传与测评的各位，大家辛苦了。同时，非常感谢游玩过《晴末置雨》的各位玩家的支持。</p>\n<p data-pid=\"_g0rpFSO\">    这次的游戏制作也让我学到了资金的重要、美术风格统一的必要性等各种知识。《晴末置雨》确实存在着诸多问题，这些问题都将化作食量，促使我们将来尽最大努力去做出大家认可的作品。下一部新坑已经在积极准备，游戏时长和CG立绘数量方面都会有显著的提高，希望下一次见面时，我们彼此都已经变得更好。</p>\n<p data-pid=\"RKOYg8Cm\">    感谢大家读到这里，那么，我们下部作品再见。</p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/akizuki-1?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">saltedfish</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/545882212/answer/2605390530?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">5 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/505728234?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">游戏《葬花暗黑桃花源》 Steam 好评如潮，对于剧情，你有哪些看法？</a><br><a href=\"http://www.zhihu.com/question/545492823?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">《日落黄昏时》上线 Steam，你对该款游戏有何评价？</a><br>\n","link":"http://www.zhihu.com/question/545882212/answer/2605390530?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"我有特别的 DNS 配置和使用技巧","date":"2022-07-28 15:31:00","description":"\n<p>众所周知，DNS 的作用与电话簿类似，将人类可读的域名映射到机器可读 IP 地址、使人更方便地访问互联网。DNS 是非常重要的互联网基础设施，对于改善上网冲浪的体验中的重要程度不容小觑。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/96381/31/31172/23930/62e2ab5bE554d388b/37027f4a03351b9e.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/i-have-my-unique-dns-setup/\">https://blog.skk.moe/post/i-have-my-unique-dns-setup/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/i-have-my-unique-dns-setup/"},{"title":"优化博客的累计布局偏移（CLS）问题","date":"2022-06-07 17:24:00","description":"\n<p>距离上一篇文章发布已有四个月了，是时候写几篇文章给博客除草了。上一次我介绍了我如何迁移、重构了我的博客的架构，这次我想来谈谈我在重构中优化和打磨访客体验时解决的一个问题。我的博客优化之旅 图片 lazyload 的学问和在 Hexo 上的最佳实践 我的博客有多快？ 天下武功，唯快不破 —— 我是这样优化博客的 ...</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/206311/26/14625/38940/629f7f81Eb11312de/b1e67f07b1cc9bc7.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/fix-blog-cls/\">https://blog.skk.moe/post/fix-blog-cls/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/fix-blog-cls/"},{"title":"使用 Next.js + Hexo 重构我的博客","date":"2022-03-17 16:24:00","description":"\n<p>在咕咕了一整年、只发布了三篇文章（其中两篇还是译文）之后，我决定还是稍微花一点时间好好折腾一下自己的博客，以 React 作为抓手，通过 Next.js 和 Hexo 深度共建，对标 Gatsby，打通静态 HTML 与用户交互之间的垂直领域屏障，实现多维矩阵闭环，为个人博客赋能（咳咳咳），然后水出 2022 年第一篇文章（逃）技术选型：Gatsby vs Next.js我使用 Hexo 驱动博客已经三年之久了，之前写过一个 开源的 Hexo 主题，后来还成为了 Hexo 的 Core Team Member、为 Hexo 贡献了不少代码。Hexo 是一个诞生于 2012......</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/218492/18/14257/25439/6227858fE1517791d/63119f6e39dc9389.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/\">https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Node.js","date":"2022-01-14 10:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h2>\n<ul>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-nodejs\">安装 Node.js</a></li>\n</ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Node.js 官网 (<a href=\"https://node.js.org/\">https://node.js.org</a>)</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/image-20220114174925675.png\" alt=\"image-20220114174925675\"></p>\n<p>下载 Node.js 安装包（推荐下载 LTS 版本）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175645.png\" alt=\"image-20220114175645642\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175750.png\" alt=\"image-20220114175749822\"></p>\n<p>勾选同意协议，点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175835.png\" alt=\"image-20220114175835742\"></p>\n<p>修改文件安装位置，点击 <code>Next</code>。（也可以不用改）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175929.png\" alt=\"image-20220114175929226\"></p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180010.png\" alt=\"image-20220114180010036\"></p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180044.png\" alt=\"image-20220114180043895\"></p>\n<p>点击 <code>Install</code> 开始安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180108.png\" alt=\"image-20220114180107827\"></p>\n<p>等待安装完成。<img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180122.png\" alt=\"image-20220114180122728\"></p>\n<p>点击 <code>Finish</code> 完成安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180206.png\" alt=\"image-20220114180206024\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>打开 <code>Git Bash</code>.</p>\n<blockquote><p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。<br>或是在开始菜单中找到 Git Bash.</p></blockquote>\n<p>输入 <code>node -v</code> 和 <code>npm -v</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180458.png\" alt=\"image-20220114180458685\"></p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-nodejs/"},{"title":"2022: 新年快乐！","date":"2021-12-31 16:00:00","description":"\n<p>转眼间，2021 年已经过去。这一年非常忙碌，以至于博客一周年的纪念来不及写，许多文章计划停留在了 To Do 里。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%8D%9A%E5%AE%A2\" class=\"headerlink\" title=\"博客\"></a>博客</h2>\n<p>由于 Cloudflare Web Analytics 是在 2021 年 4 月份启用的，再加上后来又将统计代码去除，所以关于访问量的信息不可用。</p>\n<p>截止至 2021 年 12 月 31 日，博客共发布 15 篇文章，其中 2021 年发布 11 篇文章，原创文章 10 篇。</p>\n<p>目前采用 <code>LeanCloud + Waline</code> 的评论方式，自 7 月份被刷评论后将评论权限改为登录（支持 <code>GitHub</code> 登录），还有部分评论在迁移中丢失，实在抱歉。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>博客自 2021 年 1 月 13 日将主题改为 <code>Miracle</code>，这是一款简洁、轻量的单栏 Hexo 主题。</p>\n<p><code>Miralce</code> 目前的版本是 <code>2.0.1</code>，全新的版本去除 jQuery，进一步提升性能。</p>\n<p>GitHub 仓库：<a href=\"https://github.com/hifun-team/hexo-theme-miracle\">https://github.com/hifun-team/hexo-theme-miracle</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%9B%B4%E5%A4%9A\" class=\"headerlink\" title=\"更多\"></a>更多</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">=&gt; ...</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2022/"},{"title":"无垠 2021 年度总结","date":"2021-12-31 08:36:10","description":"\n<p>真是忙碌的一年啊。转眼 2021 已经过去，2022 即将到来。又到了该总结这一年的时候了。</p>\n<h1>统计数据</h1>\n<p>年度总结的第一部分仍然是一些统计数据。以下数据截止 2021 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 29,073 (<span>+0.6%</span>)，年 PV 67,688 (<span>-11.61%</span>)，日均 UV 79.65，平均停留时间 3分34秒 (<span>-13.7%</span>)，平均跳出率 55% (<span>-9.8%</span>)。一年有效文章数 1 (<span>-80%</span>)，新增评论 109 条 (<span>-54.96%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\" alt=\"\" width=\"515\" height=\"620\" class=\"aligncenter size-full wp-image-2537\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog-249x300.jpg 249w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>除了 UV 较去年提高 100 多之外，其他数据全部下滑。主要原因还是因为今年实在太过忙碌，只更新了一篇博客，评论区也没有怎么维护。不过目前已经有两篇新的文章在路上了，希望可以尽快写完吧。</p>\n<h2>个人主页</h2>\n<p>个人页总 UV 3,515 (<span>-18.12%</span>)，总 PV 3,929 (<span>-4.56%</span>)，日均 UV 9.63，平均停留时间 55秒 (<span>-12.7%</span>)。访问的主要来源是知乎和 GitHub。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\" alt=\"\" width=\"515\" height=\"647\" class=\"aligncenter size-full wp-image-2538\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton-239x300.jpg 239w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>仍然是没有更新个人主页的一年，我也没有继续宣传这个页面，统计数据下滑大概是正常的。</p>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 4 次，新增 149 commits (<span>-54.57%</span>)，Star 数增加了 174，现有 788。</p>\n<p>终于，MDx 2.0 发布了。但是因为今年的过于忙碌，MDx 并没有得到足够的维护，版本发布周期也拉得比较长，很多 Bug 没能及时修复。希望明年可以把更多的时间花在维护 MDx 上。无论如何，还是感谢各位对于 MDx 的支持！</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>2021 大事记</h1>\n<p>说起来，2021 真的太多“第一次”了...</p>\n<ul>\n<li>一月：由于电脑电池鼓包，第一次用 iPad 外接屏幕远程桌面到服务器来考期末🌚太痛苦了</li>\n<li>一月：MDx 喜提 600 Stars</li>\n<li>三月：第一次测核酸（真的酸）</li>\n<li>三月：第一次坐上 A350！(B-309W）</li>\n<li>三月：第一次来到英国</li>\n<li>六月：第一次来到伦敦</li>\n<li>六月：第一次去猫咖撸猫🐱</li>\n<li>六月：第一次坐上 B777！(B-2025）</li>\n<li>七月：酒店隔离十四天🌚</li>\n<li>七月：MDx 喜提 700 Stars</li>\n<li>七月：第一次和猫一起住（时刻有猫撸真的爽😆）</li>\n<li>七月：入职<a href=\"https://75.team/\">奇舞团</a>实习</li>\n<li>八月：北京景点怎么这么多</li>\n<li>九月：北京景点怎么还有这么多</li>\n<li>九月：<a href=\"https://flyhigher.top/develop/2160.html\">谈谈 WebAuthn</a> 被 <a href=\"https://weibo.com/1893751011/KyipM3tOM\" rel=\"noopener noreferrer\">w3c中国微博转发</a><del>（虽然并没有人看）</del>\n</li>\n<li>九月：从奇舞团<del>跑路</del>\n</li>\n<li>九月：整了个 Stackoverflow 的复制粘贴键盘<del>，太好用了</del>\n</li>\n<li>十月：终于买了心心念念的 MSFS</li>\n<li>十一月：终于买了一台新相机</li>\n<li>十一月：第一次坐上 A380！(B-6140）</li>\n<li>十二月：第一次来到爱丁堡并和 <a href=\"https://diygod.me/\">@DIYgod</a> 面基</li>\n</ul>\n<section><div class=\"set-images-div\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\" alt=\"和猫一起住的唯一问题就是手机很快会被猫片塞满\" width=\"730\" height=\"1500\" class=\"aligncenter size-full wp-image-2518\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg 730w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-146x300.jpg 146w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-498x1024.jpg 498w\" sizes=\"(max-width: 730px) 100vw, 730px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\" alt=\"看到你在写前端，猫猫很担心你\" width=\"1004\" height=\"1500\" class=\"aligncenter size-full wp-image-2523\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg 1004w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-201x300.jpg 201w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-685x1024.jpg 685w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-768x1147.jpg 768w\" sizes=\"(max-width: 1004px) 100vw, 1004px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\" alt=\"高效开发工具（确信\" width=\"1500\" height=\"1019\" class=\"aligncenter size-full wp-image-2519\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-300x204.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-1024x696.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-768x522.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\" alt=\"和 Ralph 在天坛\" width=\"947\" height=\"1500\" class=\"aligncenter size-full wp-image-2524\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg 947w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-189x300.jpg 189w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-646x1024.jpg 646w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-768x1216.jpg 768w\" sizes=\"(max-width: 947px) 100vw, 947px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\" alt=\"380!\" width=\"1500\" height=\"874\" class=\"aligncenter size-full wp-image-2517\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-300x175.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-1024x597.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-768x447.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a>\n</div>\n<div class=\"set-images-div2\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\" alt=\"到处玩.jpg\" width=\"1500\" height=\"1080\" class=\"aligncenter size-full wp-image-2521\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-300x216.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-1024x737.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-768x553.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\" alt=\"还是到处玩.jpg\" width=\"977\" height=\"1500\" class=\"aligncenter size-full wp-image-2520\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg 977w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-195x300.jpg 195w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-667x1024.jpg 667w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-768x1179.jpg 768w\" sizes=\"(max-width: 977px) 100vw, 977px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\" alt=\"380 上的星空\" width=\"1002\" height=\"1500\" class=\"aligncenter size-full wp-image-2522\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg 1002w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-200x300.jpg 200w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-684x1024.jpg 684w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-768x1150.jpg 768w\" sizes=\"(max-width: 1002px) 100vw, 1002px\"></a>\n</div>\n</section><p><span>点击图片查看描述</span></p>\n<p>对了，对于可爱的猫猫们，我整了一个 Telegram 贴纸包，你可以在这里获取：<a href=\"https://telegram.me/addstickers/huanAndDan\">https://telegram.me/addstickers/huanAndDan</a>。</p>\n<h1>跨年红包</h1>\n<p>今年的解题之旅，从下面这张图片开始：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\" alt=\"\" width=\"1510\" height=\"1250\" class=\"aligncenter size-full wp-image-2556\"></a>\n<p>不过，鉴于今年的题目较以往对于认真解题的人更难，我还准备了隐藏红包，在解题中收集线索即可发现隐藏红包。共有 20 个普通红包和 10 个隐藏红包。</p>\n<p>解题计划持续到东八区 2022.02.03 23:59:59 或红包被领完为止，之后我会发布题解。不过由于去年情况混乱，今年在解题过程中我一旦发现有不正常的现象就会立即停止活动。Anyway，新年快乐！祝玩得开心。</p>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报用到了 PS 和 Adobe 家的新玩具 Dimension。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\" alt=\"\" width=\"707\" height=\"1000\" class=\"aligncenter size-full wp-image-2547\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg 1414w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-212x300.jpg 212w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-724x1024.jpg 724w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-768x1086.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-1086x1536.jpg 1086w\" sizes=\"(max-width: 707px) 100vw, 707px\"></a>\n<p>那么祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2507.html"},{"title":"[译] 不，Web3 不是去中心化","date":"2021-12-14 14:01:00","description":"加密货币社区对元宇宙和 Web3 的狂热仍在继续，大量投资人和开发者前仆后继加入其中。但是，Web3 真的能实现支持者们的种种愿景吗？亦或是另一个镜中月、水中花？也许让历史照进现实，能给我们答案。<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/123139/11/24965/54827/62215eedE5e3da14a/80c24408e97057dd.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/web3-is-not-decentralization/\">https://blog.skk.moe/post/web3-is-not-decentralization/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/web3-is-not-decentralization/"},{"title":"[译] 捍卫自由的互联网，对 Web3 说不","date":"2021-12-12 13:40:00","description":"作为一个充满泡沫和噱头的新概念，Web3 和元宇宙在区块链的社区中掀起了一波浪潮。鼓吹者坚信 Web3 就是互联网的未来、不惜砸下大把的金钱和精力、希望能在未来中捞一杯羹；而大部分人保持观望的态度。是时候来一点 Web3 的反对意见了。<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/87908/13/23797/13415/622032afE3a2f9e9f/95c01e98cd4a707a.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/\">https://blog.skk.moe/post/keep-web-free-say-no-to-web3/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/"},{"title":"2021 年 JavaScript Promise 性能对比","date":"2021-12-07 08:19:00","description":"\n<p>我们正生活在一个「Any application that can be written in JavaScript, will eventually be written in JavaScript」的时代。作为一门兼具动态性和简单性的语言，JavaScript 已经占领了客户端、服务端，甚至在机器学习中也占据一席之地；不可避免的，异步执行也逐渐成为这门语言不可缺少的一部分。TL; DR Bluebird 依然是速度最快、内存占用最少的 Promise 实现 Runtime 的 async / await 实现越来越快、顺序执行的性能已经超过 Native Promise，占用的内存也更少 对于平行并发执行的 Promise，Bluebird 的性能依然一骑绝尘。......</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157404/28/28495/143414/622032b2Ef7b495fd/6a9bd02e79392c9d.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/promise-performance-benchmark/\">https://blog.skk.moe/post/promise-performance-benchmark/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/promise-performance-benchmark/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Git","date":"2021-11-12 13:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h3>\n<ul><li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li></ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Git 官网 (<a href=\"https://git-scm.com/\">https://git-scm.com</a>).</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112204849.png\"></p>\n<p>点击页面中的 <code>Download For Windows</code> 下载 Windows 版本。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211507.png\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>，同意协议。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211528.png\"></p>\n<p>修改程序安装位置，点击 <code>Next</code>（直接装在 C 盘也不是不行）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211604.png\"></p>\n<p>组件选项，可选桌面快捷键、右键菜单、LFS 支持、自动检查更新等。</p>\n<p>点击 <code>Next</code> 进入下一步。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211609.png\"></p>\n<p>开始菜单文件夹名，保持默认就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211613.png\"></p>\n<p>默认编辑器，保持 Vim 就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211616.png\"></p>\n<p>环境变量，选择第 2 个，点击 <code>Next</code>。</p>\n<blockquote><p>如果选择第 1 个，则只能在 Git Bash 中使用，可能会出现问题</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211619.png\"></p>\n<p>剩下的都可以保持默认，一路 Next，然后点击 <code>Install</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211622.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211624.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211627.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211630.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211633.png\"></p>\n<p>等待安装完毕。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。</p>\n<p>（或是在开始菜单中找到 Git Bash）</p>\n<p>输入 <code>git --version</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/7ec315b7764cc.png\"></p>\n<p>大功告成！</p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-git/"},{"title":"前端时间国际化 101","date":"2021-10-14 15:58:23","description":"\n<blockquote>\n<p>时间只是幻觉。</p>\n<footer>—— 阿尔伯特·爱因斯坦</footer>\n</blockquote>\n<p>最近在开发一个需要完善国际化方案的前端项目，在处理时间国际化的时候遇到了一些问题。于是花了一些时间研究，有了这篇文章。不过由于网上关于 JavaScript 中 <code>Date</code> 对象的坑的文章已经一抓一大把了，<strong>因此这篇文章不是 JavaScript 中 <code>Date</code> 对象的使用指南，而是只专注于前端时间国际化。</strong></p>\n<h1>从时区说起</h1>\n<p>要想处理时间，UTC 是一个绕不开的名字。协调世界时（Coordinated Universal Time）是目前通用的世界时间标准，计时基于原子钟，但并不等于 TAI（国际原子时）。TAI 不计算闰秒，但 UTC 会不定期插入闰秒，因此 UTC 与 TAI 的差异正在不断扩大。UTC 也接近于 GMT（格林威治标准时间），但不完全等同。可能很多人都发现近几年 GMT 已经越来越少出现了，这是因为 GMT 计时基于地球自转，由于地球自转的不规则性且正在逐渐变慢，目前已经基本被 UTC 所取代了。</p>\n<blockquote><p>JavaScript 的 <code>Date</code> 实现不处理闰秒。实际上，由于闰秒增加的不可预测性，Unix/POSIX 时间戳完全不考虑闰秒。在闰秒发生时，Unix 时间戳会重复一秒。这也意味着，一个时间戳对应两个时间点是有可能发生的。</p></blockquote>\n<p>由于 UTC 是标准的，我们有时会使用 UTC+/-N 的方式表达一个时区。这很容易理解，但并不准确。中国通行的 <code>Asia/Shanghai</code> 时区<strong>大部分</strong>情况下可以用 UTC+8 表示，但英国通行的 <code>Europe/London</code> 时区并不能用一个 UTC+N 的方式表示——由于夏令时制度，<code>Europe/London</code> 在夏天等于 UTC+1，在冬天等于 UTC/GMT。</p>\n<blockquote><p>一个时区与 UTC 的偏移并不一定是整小时。如 <code>Asia/Yangon</code> 当前为 UTC+6:30，而 <code>Australia/Eucla</code> 目前拥有奇妙的 UTC+8:45 的偏移。</p></blockquote>\n<p>夏令时的存在表明<strong>时间的表示不是连续的</strong>，时区之间的时差也并不是固定的，我们并不能用固定时差来处理时间，这很容易意识到。但一个不容易意识到的点是，时区还包含了其历史变更信息。中国目前不实行夏令时制度，那我们就可以放心用 UTC+8 来表示中国的时区了吗？你可能已经注意到了上一段中描述 <code>Asia/Shanghai</code> 时区时我使用了<strong>大部分</strong>一词。<code>Asia/Shanghai</code> 时区在历史上实行过夏令时，因此 <code>Asia/Shanghai</code> 在部分时间段可以使用 UTC+9 来表示。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1988-04-18 00:00:00')\r\n// Mon Apr 18 1988 00:00:00 GMT+0900 (中国夏令时间)</pre>\n<blockquote><p>夏令时已经够混乱了，但它实际上比你想象得更混乱——部分穆斯林国家一年有四次夏令时切换（进入斋月时夏令时会暂时取消），还有一些国家使用混沌的 15/30 分钟夏令时而非通常的一小时。</p></blockquote>\n<blockquote><p><strong>不要总是基于 <code>00:00</code> 来判断一天的开始。</strong>部分国家使用 0:00-1:00 切换夏令时，这意味着 23:59 的下一分钟有可能是 1:00。</p></blockquote>\n<p>事实上，虽然一天只有 24 个小时，但当前（2021.10）正在使用的时区有超过 300 个。<strong>每一个时区都包含了其特定的历史。</strong>虽然有些时区在现在看起来是一致的，但它们都包含了不同的历史。时区也会创造新的历史。由于政治、经济或其他原因，一些时区会调整它们与 UTC 的偏差（萨摩亚曾经从 UTC-10 切换到 UTC+14，导致该国 2011.12.30 整一天都消失了），或是启用/取消夏令时，甚至有可能导致一个时区重新划分为两个。因此，为了正确处理各个时区，我们需要一个数据库来存放时区变更信息。还好，已经有人帮我们做了这些工作。目前大多数 *nix 系统和大量开源项目都在使用 <a href=\"https://www.iana.org/time-zones\" rel=\"noopener\">IANA 维护的时区数据库</a>（IANA TZ Database），其中包含了自 Unix 时间戳 0 以来各时区的变更信息。当然这一数据库也包含了大量 Unix 时间戳 0 之前的时区变更信息，但并不能保证这些信息的准确性。IANA 时区数据库会定期更新，以反映新的时区变更和新发现的历史史实导致的时区历史变更。</p>\n<blockquote><p>Windows 不使用 IANA 时区数据库。微软为 Windows 自己维护了一套<a href=\"https://docs.microsoft.com/zh-cn/troubleshoot/windows-client/system-management-components/daylight-saving-time-help-support\" rel=\"noopener\">时区数据库</a>，这有时会导致在一个系统上合法的时间在另一系统上不合法。</p></blockquote>\n<p>既然我们不能使用 UTC 偏移来表示一个时区，那就只能为每个时区定义一个标准名称。通常地，我们使用 <code>/</code> 来命名一个时区。这里的城市一般为该时区中人口最多的城市。于是，我们可以将中国的通行时区表示为 <code>Asia/Shanghai</code>。也有一些时区有自己的别名，如太平洋标准时间 <code>PST</code> 和协调世界时 <code>UTC</code>。</p>\n<blockquote><p>时区名称使用城市而非国家，是由于国家的变动通常比城市的变动要快得多。</p></blockquote>\n<blockquote><p><strong>城市不是时区的最小单位。</strong>有很多城市同时处于多个时区，甚至澳大利亚<a href=\"https://en.wikipedia.org/wiki/Gold_Coast_Airport\" rel=\"noopener\">有一个机场</a>的跑道两端处于不同的时区。</p></blockquote>\n<h1>处理时区困难重重</h1>\n<p>几个月前的一天，<a href=\"https://milkice.me/\" rel=\"noopener\">奶冰</a>在他的 Telegram 频道里发了这样的一条消息：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\"><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\" alt=\"奶冰频道的消息\" width=\"500\" class=\"aligncenter size-medium wp-image-2490\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg 800w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-244x300.jpg 244w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-768x944.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\"></a>\n<p>你想的没错，这个问题正是由时区与 UTC 偏移的不同造成的。<code>Asia/Shanghai</code> 时区在 1940 年前后和 1986 年前后曾实行过夏令时，<strong>而夏令时的切换会导致一小时的出现和消失。</strong>具体来说，启用夏令时当天会有一个小时消失，如 2021.3.28 英国启用夏令时，1:00 直接跳到 3:00，导致 <code>2021-03-28 01:30:00</code> 在 <code>Europe/London</code> 时区中是不合法的；取消夏令时当天又会有一个小时重复，如 2021.10.31 英国取消夏令时，2:00 会重新跳回 1:00 一次，导致 <code>2021-10-31 01:30:00</code> 在 <code>Europe/London</code> 时区中对应了两个时间点。而在奶冰的例子中，<code>1988-04-10 00:46:50</code> 正好处于因夏令时启用而消失的一小时中，因此系统会认为此时间字符串不合法而拒绝解析。</p>\n<blockquote><p>你可能会注意到在历史上 1988.4.10 这一天 <code>Asia/Shanghai</code> 时区实际上是去掉了 1:00-2:00 这一小时而不是 0:00-1:00。上文问题更深层次的原因是，在 IANA TZDB 2018a 及更早版本中，IANA 因缺乏历史资料而设置了错误的夏令时规则，规则设定了夏令时交界于 0:00-1:00 从而导致上文问题发生。而随后社区<a href=\"http://mm.icann.org/pipermail/tz/2018-August/026760.html\" rel=\"noopener\">发现了更准确的史实</a>，因此 IANA 更新了数据库。上文的问题在更新了系统的时区数据库后便解决了。</p></blockquote>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\" alt=\"IANA TZDB 2018a 及之前版本的错误数据\" width=\"1750\" height=\"595\" class=\"aligncenter size-full wp-image-2491\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg 1750w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-300x102.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1024x348.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-768x261.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1536x522.jpg 1536w\" sizes=\"(max-width: 1750px) 100vw, 1750px\"></a>\n<p><span>IANA TZDB 2018a 及之前版本的错误数据</span></p>\n<p>再来考虑另一种情况。你的应用的某位巴西用户在 2018 年保存了一个未来时间 <code>2022-01-15 12:00</code>（按当时的规律那应该是个夏令时时间），不巧那时候你的应用是以格式化的时间字符串形式保存的时间。之后你发现巴西已经于 2019 年 4 月宣布彻底取消夏令时制度，那么 <code>2022-01-15 12:00</code> 这个时间对应的 Unix 时间戳发生了变化，变得不再准确，要正确处理这一字符串就需要参考这一字符串生成的时间（或生成时计算的 UTC 偏移）来做不同的处理。<strong>因此，应用从一开始就应该避免使用字符串来传输、存储时间，而是使用 Unix 时间戳。</strong>如果不得不使用字符串存储时间，请尽可能：</p>\n<ul>\n<li>使用 UTC 描述时间，你永远不会知道本地时区在未来会发生什么</li>\n<li>如果需要以当地时间描述时间，一定带上当前 UTC 偏移</li>\n</ul>\n<p>时区历史带来的问题往往意想不到而且远比想象得多。实际上时区历史数据非常详细而繁多且跨设备不一致，并没有简单而统一的处理方法。在需要严谨处理时区时可能需要在应用程序中内嵌一套各端统一的时区数据库，但这样的方案放在前端又会带来不少问题：</p>\n<ul>\n<li>体积过大。moment.js 曾经设计过<a href=\"https://github.com/moment/moment-timezone/blob/develop/data/packed/2021a.json\" rel=\"noopener\">一种简洁的 TZDB 表示</a>，但尽管已经尽可能压缩整个文件仍然达到了 180+KB。在性能优先的 Web 应用中这是不可接受的</li>\n<li>需要持续更新。时区数据一直在变动，需要在时区数据更新时尽快更新应用内的时区数据，这带来了额外的维护成本</li>\n</ul>\n<p>ES6 为我们带来了 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl\" rel=\"noopener\"><code>Intl</code> 命名空间</a>。在这里，JavaScript 运行时提供了不少时间相关的国际化能力。因此，在不使用额外数据的情况下准确处理时区是可能的，但这并不完美：</p>\n<ul>\n<li>各端不统一。浏览器提供的时区数据受浏览器版本、系统版本等可能变化，最新的时区更新可能无法快速反映到所有设备上</li>\n<li>实现复杂。<code>JavaScript</code> 中 <code>Date</code> 对象的不良设计导致实现完善的时区处理并不容易，且 <code>Intl</code> 命名空间下的对象实例化性能开销较大，需要额外优化</li>\n</ul>\n<blockquote><p><code>Intl</code> 命名空间下还有很多实用的国际化相关方法，值得我们另开一篇文章来讲讲了。</p></blockquote>\n<p>在真实开发中，这需要取舍。目前主流的 JavaScript 时间处理库都已转向浏览器内置方法，并在需要时通过 Polyfill 保证跨端一致性。在这篇文章中，我们将尝试在不使用第三方库的情况下实现基本的时间国际化处理。此外，还有一些诸如需要使用 Unix 时间戳才能正确地在各端交换时间等细节需要注意。</p>\n<h1>时区转换</h1>\n<p>JavaScript 中的 <code>Date</code> 并不是不包含时区信息——实际上，<code>Date</code> 对象表示的一定是当前时区。通过尝试：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1970-01-01T00:00:00Z')\r\n// Thu Jan 01 1970 08:00:00 GMT+0800 (中国标准时间)</pre>\n<p>就可以知道，JavaScript 运行时其实知道当前时区，并会在需要的时候将其他时区的时间转换为当前时区的时间。那么，如何将本地时间转换为其他时区的时间呢？从 <code>Date</code> 的角度看，这并不行，因为我们无法设置一个 <code>Date</code> 对象的时区。但我们可以“投机取巧”：将 <code>Date</code> 对象的时间加上/减去对应的时差，尽管 <code>Date</code> 对象仍然认为自己在本地时区，但这样不就可以正确显示了嘛！但我们会碰到上文提到的问题：时区之间的时间差并不固定，在没有额外数据的情况下很难正确计算。</p>\n<p>还好，ES6 基于 <code>Intl</code> 命名空间扩展了 <code>Date.prototype.toLocaleString()</code> 方法，使其可以接受时区参数并按指定时区格式化时间。如果你在搜索引擎中搜索如何使用 JavaScript 转换时区，你大概率会在 StackOverflow 上找到类似这样的答案：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const convertTimeZone = (date, timeZone) =&gt; {\r\n    return new Date(date.toLocaleString('en-US', { timeZone }))\r\n}\r\n\r\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\r\nconvertTimeZone(now, 'Europe/London') // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<p>很好理解，我们使用 <code>en-US</code> 的区域设置要求 JavaScript 运行时以我们指定的时区格式化时间，再将时间字符串重新解析为时间对象。这里的 <code>timeZone</code> 就是诸如 <code>Asia/Shanghai</code> 等的 IANA TZDB 时区名称。这个字符串确实需要自己提供，但这就是我们唯一需要自己准备的数据了！只要提供了时区名称，浏览器就会自动计算正确的时间，无需我们自行计算。</p>\n<blockquote><p>对于时区名称，你可以考虑使用 <a href=\"https://github.com/vvo/tzdb/\" rel=\"noopener\">@vvo/tzdb</a>。这是一个声称为自动更新的 IANA TZDB 的 JSON 导出，并已被数个大型项目使用。你可以从这个包中导出所有时区名称。</p></blockquote>\n<p>这个方法看起来还不错，对吧？但实际上，它有两个问题：</p>\n<ul>\n<li>指定了区域设置和时区的 <code>toLocaleString()</code> 实际上每次调用都会在 JavaScript 运行时中创建新的 <code>Intl.DateTimeFormat</code> 对象（在后文详述），而后者会带来昂贵的性能开销（在 Node 14 中，实例化一次会在 V8 中增加内存使用约 46.3Kb。但这是符合预期的，详见 <a href=\"https://bugs.chromium.org/p/v8/issues/detail?id=6528\" rel=\"noopener\">V8 Issue</a>）。因此，在密集调用的情况下需要考虑计算并缓存时差，并在一定时间后或需要时进行更新</li>\n<li>使用 <code>toLocaleString()</code> 并使用 <code>en-US</code> 区域设置格式化的默认时间格式类似于 <code>10/13/2021, 1:00:00 AM</code>。这可以被大部分浏览器正确解析，<strong>但这是不规范的，不同浏览器有可能产生不同结果。</strong>你也可以自行配置格式（同下文的 <code>Intl.DateTimeFormat</code>），但仍然无法构造出规范的字符串</li>\n</ul>\n<p>因此，更佳的方案是，我们需要建立一个可反复使用的格式化器以避免重复创建 <code>Intl.DateTimeFormat</code> 带来的额外开销，并需要手动构造出符合规范的时间字符串，并将其重新解析为 <code>Date</code> 对象。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const timeZoneConverter = (timeZone) =&gt; {\r\n    // 新建 DateTimeFormat 对象以供对同一目标时区重用\r\n    // 由于时区属性必须在创建 DateTimeFormat 对象时指定，我们只能为同一时区重用格式化器\r\n    const formatter = new Intl.DateTimeFormat('zh-CN', {\r\n        year: 'numeric',\r\n        month: '2-digit',\r\n        day: '2-digit',\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n        second: '2-digit',\r\n        hour12: false,\r\n        timeZone\r\n    })\r\n    return {\r\n        // 提供 conver 方法以将提供的 Date 对象转换为指定时区\r\n        convert (date) {\r\n            // zh-CN 的区域设置会返回类似 1970/01/01 00:00:00 的字符串\r\n            // 替换字符即可构造出类似 1970-01-01T00:00:00 的 ISO 8601 标准格式时间字符串并被正确解析\r\n            return new Date(formatter.format(date).replace(/\\//g, '-').replace(' ', 'T').trim())\r\n        }\r\n    }\r\n}\r\n\r\nconst toLondonTime = timeZoneConverter('Europe/London') // 对于同一时区，此对象可重用\r\n\r\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\r\ntoLondonTime.convert(now) // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<blockquote><p>目前 <code>zh-CN</code> 的区域设置会产生类似 <code>1970/01/01 00:00:00</code> 的格式化字符串。这一格式目前跨端一致，但由于规范没有指定时间格式，<strong>这个格式在未来有可能变更。</strong>更好的方案是使用 <code>formatToParts()</code> 方法（在后文详述）获取时间字符串的各部分并手动拼接出标准格式的字符串，但在这个例子中直接 <code>replace</code> 拥有更好的性能。</p></blockquote>\n<p>现在，尝试反复转换时间至同一时区 1000 次，耗时从 <code>toLocaleString()</code> 1.5 秒降低到了 0.04 秒。尽管代码长了点，但这次重写在最好的情况下为我们带来了超过 20 倍的性能提升。</p>\n<p>需要注意的是，虽然这看起来就算最终方案了，但这个方案依然不完美。主要有以下两个问题：</p>\n<ul>\n<li>在需要密集转换为不同时区时，由于无法重用格式化器，性能依然较差且难以进一步优化</li>\n<li>由于 <code>Intl.DateTimeFormat</code> 不支持格式化毫秒，在格式化字符串的过程中毫秒会丢失，导致最终结果可能会与期望结果产生最高 999ms 的误差，需要额外处理。比如需要计算时差时，我们可能需要这么写：\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const calcTimeDiff = (date, converter) =&gt; {\r\n    const secDate = date - date.getMilliseconds() // 去掉毫秒，避免转换前后精度差异\r\n    return converter.convert(new Date(secDate), tzName) - secDate\r\n}\r\n\r\ncalcTimeDiff(new Date(), timeZoneConverter('Europe/London')) // -25200000</pre>\n</li>\n</ul>\n<p>无论如何，在折腾一番后我们还是把时区正确转换了。接下来准备格式化时间字符串了吗？不过在此之前，我们得先来聊聊语言、文字和区域。</p>\n<h1>语言文字区域傻傻分不清</h1>\n<blockquote><p>如何在计算机中表示中文？</p></blockquote>\n<p>“这不简单，”你可能会说，“用 <code>zh</code> 啊。”</p>\n<blockquote><p>那简体中文呢？</p></blockquote>\n<p>“<code>zh-CN</code>。”你或许会说出这个答案。</p>\n<blockquote><p>那用于新加坡的简体中文和用于中国大陆的简体中文该如何区分呢？</p></blockquote>\n<p>嗯……好问题。</p>\n<p>要能正确区分不同的简体中文，我们还得先回到定义上。实际上，“国际化”并不只是语言的翻译而已，国际化包含的是一整套对于各个<strong>区域</strong>的本地化方案。要准确表示一个国际化方案，我们实际至少需要确定三个属性：语言（Language）、文字（Script）和区域（Locale）。</p>\n<ul>\n<li>\n<strong>语言</strong>通常指的是<strong>声音语言</strong>。不同的语言都有一套自己的发音规则，很难互通。如中文和英语都属于语言</li>\n<li>\n<strong>文字</strong>对应的是某个语言的书写方式，同样的语言可能会有多种书写方案。如中文主要有简体和繁体两种书写方案</li>\n<li>\n<strong>区域</strong>指国际化面向的地区，相同的语言和文字，在不同地区也有可能会有不同的使用习惯。如新加坡和中国大陆都使用简体中文，但两地的用词习惯等有些许差异</li>\n</ul>\n<p>只有确定了这三个属性，我们才能正确定义一个国际化方案（或者说<strong>区域设置</strong>）。当然，还有很多其他属性可以更准确的表达某个区域设置，但通常有语言、文字和区域就已经足够了。</p>\n<p>于是，基于 <a href=\"https://tools.ietf.org/rfc/bcp/bcp47.txt\" rel=\"noopener\">BCP 47</a>，我们可以知道：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN = 中文普通话-简体-中国大陆\r\ncmn-Hans-SG = 中文普通话-简体-新加坡\r\ncmn-Hant-TW = 中文普通话-繁体-台湾\r\nyue-Hant-HK = 中文粤语-繁体-香港</pre>\n<p>等等，这都是啥？还有 BCP 47 又是啥？BCP 是 IETF 发布的“最佳当前实践”文档，而 BCP 47 是一些国际化相关的 ISO 和备忘录的集合，也是目前事实上由 HTML 和 ECMAScript 所使用的表达区域设置的标准。BCP 47 定义的区域设置标签实际上比较复杂，但对于大部分简单使用情况，上文示例中的格式已经完全够用了。简单来说，<strong>要表达一个区域设置，我们会使用 <code>语言[-文字][-区域]</code> 的格式，而文字和区域都是可选的。</strong>而对于每个部分的具体代码，BCP 47 也有做具体定义。其中：</p>\n<ul>\n<li>语言使用 ISO 639-1 定义的两位字母代码（如中文为 <code>zh</code>，英文为 <code>en</code>）或 <a href=\"https://iso639-3.sil.org/code_tables/639/data\" rel=\"noopener\">ISO 639-2/3</a> 定义的三位字母代码（如中文普通话为 <code>cmn</code>，英文为 <code>eng</code>），通常小写</li>\n<li>文字使用 <a href=\"https://unicode.org/iso15924/iso15924-codes.html\" rel=\"noopener\">ISO 15924</a> 定义的四位字母代码，通常首字母大写。如简体中文是 <code>Hans</code>，繁体中文是 <code>Hant</code>\n</li>\n<li>区域通常使用 <a href=\"https://www.iso.org/iso-3166-country-codes.html\" rel=\"noopener\">ISO 3166-1</a> 定义的两位字母代码，通常大写，如中国大陆为 <code>CN</code>，英国为 <code>GB</code>\n</li>\n</ul>\n<blockquote><p>ISO 639-1/2/3 的关系实际是：ISO 639-1 是最早制定的规范，使用两位字母表示语言，但语言数量之多并不能只用两位代码表示。因此后来修订了 ISO 639-2 和 3，使用三位字母表示了更多语言。通常 639-1 代码和 ISO-2/3 代码是一对多的关系。如中文 <code>zh</code> 其实是中文普通话 <code>cmn</code> 的宏语言（macrolanguage），同样使用 <code>zh</code> 为宏语言的语言还有 <code>wuu</code>（中文吴语）、<code>hak</code>（中文客家话）、<code>yue</code>（中文粤语）等数十种。<strong>从规范上我们现在应该使用 ISO 639-2/3 代码来替代 ISO 639-1 代码了</strong>，但由于历史阻力和真实需求中分类无需如此细致等原因，<strong>使用 ISO 639-1 指定语言仍然非常常见而且完全可以接受。</strong>此外，特别地，我们在 ISO 639-3 中定义未指明的语言为 <code>und</code>。</p></blockquote>\n<p>因此，对于这一节开头的两个问题，在 BCP 47 中正确答案其实是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">zh = 中文\r\ncmn = 中文普通话\r\n\r\nzh-Hans = 中文-简体\r\ncmn-Hans = 中文普通话-简体</pre>\n<p>而 <code>zh-CN</code> 实际是指在中国大陆使用的中文，当然也包含在中国大陆使用的繁体中文。<strong>不过，由于大部分情况下一个区域只会通用一种文字，很多情况下我们可以忽略文字这一项</strong>，即使用 <code>zh-CN</code>（或者 <code>cmn-CN</code>）来表示中国大陆的简体中文普通话——毕竟在大部分业务中在中国大陆使用繁体和非普通话的情况非常少。</p>\n<blockquote><p>事实上，类似 <code>zh-Hans</code> 和 <code>zh-Hant</code> 开头的区域设置名称已经被标记为 <code>redundant 废弃</code>，因此尽可能只使用 <code>zh-CN</code> 或者 <code>cmn-Hans-CN</code> 这样的区域设置名称。所有区域设置名称的列表可以在 <a href=\"https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry\" rel=\"noopener\">IANA</a> 找到。</p></blockquote>\n<p>现在我们可以准确定义一个区域设置了。不过我们还有一些小小的需求。比如我们想在 <code>cmn-Hans-CN</code> 的区域设置中使用农历来表示日期，但显然我们上文定义的表示方法并不能表达这一需求。好在，Unicode 为 BCP 47 提供了 u 扩展。在区域设置名称后面加上 <code>-u-[选项]</code> 就可以表达更细致的变体了。所以我们有：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN-u-ca-chinese = 中文普通话-简体-中国大陆-u-日历-中国农历\r\njpn-Jpan-JP-u-ca-japanese = 日语-日文汉字/平假名/片假名-日本-u-日历-日本日历\r\ncmn-Hans-CN-u-nu-hansfin = 中文普通话-简体-中国大陆-u-数字-简体大写数字</pre>\n<p>u 扩展的具体可选项可以在 <a href=\"https://www.unicode.org/reports/tr35/tr35-21.html#Unicode_locale_identifier\" rel=\"noopener\">Unicode 网站</a>上找到。而多个 u 扩展还可以连接——于是我们甚至可以写出 <code>cmn-Hans-CN-u-ca-chinese-nu-hansfin</code> 这种丧心病狂的区域设置名称。当然，相信你现在已经可以看懂这个区域设置的意思了。</p>\n<blockquote><p>不同地区可能会有不同的日历使用习惯，如中国有使用农历的需求，泰国有使用佛历的需求，我们可以通过 u 扩展指定不同的日历。不过，大部分情况下我们会使用标准的 ISO 8601 日历（gregory），JavaScript 的 <code>Date</code> 对象也只支持这种日历。</p></blockquote>\n<blockquote><p>你可以使用 <a href=\"https://r12a.github.io/app-subtags/\" rel=\"noopener\">BCP47 language subtag lookup</a> 工具快速检查你编写的 BCP 47 区域标签是否规范。</p></blockquote>\n<p>终于我们可以正确表达一个完美符合我们需求的区域设置了。接下来，让我们开始格式化时间吧。</p>\n<h1>格式化时间</h1>\n<p>这题我会！</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const formatDate(date) =&gt; {\r\n    return `${date.getFullYear()}-${`${date.getMonth() + 1}`.padStart(2, '0')}-${`${date.getDate()}`.padStart(2, '0')} ${`${date.getHours()}`.padStart(2, '0')}:${`${date.getMinutes()}`.padStart(2, '0')}:${`${date.getSeconds()}`.padStart(2, '0')}`\r\n}\r\n\r\nformatDate(new Date()) // 2021-10-13 01:00:00</pre>\n<p>就完事了……吗？先不论这样的格式化代码难以阅读，尽管上文这样的日期格式国际通用，<strong>但并非所有区域都习惯于这样的日期表示方法。</strong>比如英语国家/地区在很多时候习惯在日期中加入星期，而阿拉伯语国家/地区在部分情况下习惯使用阿拉伯语数字（而非常用的阿拉伯-印度数字）；再比如美式英语国家/地区习惯月-日-年的日期表示法，而英式英语国家/地区习惯日-月-年的日期表示法……不同区域在时间表示格式习惯上的差异是巨大的，<strong>我们很难通过一个简单的方法来正确地、国际化地格式化一个日期。</strong></p>\n<p>好在 ES6 早就为我们铺平了道路。还记得上文提到过的 <code>Intl.DateTimeFormat</code> 吗？我们通过它来实例化一个日期格式化器并用进行日期的国际化。</p>\n<p>直接来看例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const options = {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    weekday: 'long'\r\n}\r\nconst now = new Date()\r\n\r\nconst enUSFormatter = new Intl.DateTimeFormat('en-US', options)\r\n\r\nconst zhCNFormatter = new Intl.DateTimeFormat('zh-CN', options)\r\nconst zhCNAltFormatter = new Intl.DateTimeFormat('zh-CN-u-ca-chinese', options)\r\nconst zhCNAlt2Formatter = new Intl.DateTimeFormat('zh-CN-u-ca-roc-nu-hansfin', options)\r\n\r\nconst jaFormatter = new Intl.DateTimeFormat('ja', options)\r\nconst jaAltFormatter = new Intl.DateTimeFormat('ja-JP-u-ca-japanese', options)\r\n\r\nconst arEGFormatter = new Intl.DateTimeFormat('ar-EG', options)\r\n\r\nenUSFormatter.format(now) // Wednesday, Oct 13, 2021\r\n\r\nzhCNFormatter.format(now) // 2021年10月13日星期三\r\nzhCNAltFormatter.format(now) // 2021辛丑年九月8星期三\r\nzhCNAlt2Formatter.format(now) // 民国壹佰壹拾年拾月拾叁日星期三\r\n\r\njaFormatter.format(now) // 2021年10月13日水曜日\r\njaAltFormatter.format(now) // 令和3年10月13日水曜日\r\n\r\narEGFormatter.format(now) // الأربعاء، ١٣ أكتوبر ٢٠٢١</pre>\n<blockquote><p>在这里我们使用 ISO 639-1 代码来表示语言，是由于事实上 ISO 639-1 代码更加常见与通用。在大部分支持 <code>Intl.DateTimeFormat</code> 的 JavaScript 运行时中我们也可以使用 ISO 639-2/3 代码来表示语言（但实际会 fallback 至对应的 ISO 639-1 代码）。</p></blockquote>\n<blockquote><p>你也可以通过在 <code>options</code> 中设置 <code>calendar</code> 属性和 <code>numberingSystem</code> 属性来替换区域设置名称中对 u 扩展的使用。这也是推荐方式。</p></blockquote>\n<p>这非常直观，我们可以指定区域设置和格式化选项来初始化一个格式化器，并在之后使用格式化器对象的 <code>format</code> 方法来格式化一个 <code>Date</code> 对象。这里的格式化选项其实非常灵活，能格式化的不只是日期，时间也可以被灵活地格式化，有非常多的组合可以选择。我们不会在这里详细解释每一个选项，你可以访问 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\" rel=\"noopener\">MDN 文档</a>来了解更多。</p>\n<blockquote><p>如前文所述，<code>Intl.DateTimeFormat</code> 无法格式化毫秒。</p></blockquote>\n<p>不过需要注意的是，<strong>JavaScript 运行时不一定支持所有区域设置，也不一定支持所有格式化选项。</strong>在遇到不支持的情况时，<code>Intl.DateTimeFormat</code> 默认会静默 fallback 到最匹配的支持项，因此在处理不常见的区域设置或选项时，你可能需要再额外检查。你可以通过 <code>Intl.DateTimeFormat.supportedLocalesOf()</code> 静态方法判断当前运行时是否支持指定的区域设置，也可以在实例化格式化器后在对象上调用 <code>resolvedOptions()</code> 方法来检查运行时的解析结果是否与预期一致。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('yue-Hant-CN').resolvedOptions()\r\n// {locale: 'zh-CN', calendar: 'gregory', …}\r\n// fallback 至 zh-CN，与 yue-CN 的预期不一致</pre>\n<p>此外，正如你所看到的，各种语言在日期格式化中使用的文本 JavaScript 运行时都已经帮我们内置了。因此，我们甚至可以利用这些国际化特性来为我们的应用减少一点需要翻译的字符串——打包进应用的翻译越少，应用体积也就越小了嘛——比如说获取一周七天对应的名字：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getWeekdayNames = (locale) =&gt; {\r\n     // 基于一个固定日期计算，这里选择 1970.1.1\r\n     // 不能使用 0，因为 Unix 时间戳 0 在不同时区的日期不一样\r\n    const base = new Date(1970, 0, 1).getTime()\r\n    const formatter = new Intl.DateTimeFormat(locale, { weekday: 'short' })\r\n    return Array.from({ length: 7 }, (_, day) =&gt; (\r\n        formatter.format(new Date(base + 3600000 * 24 * (-4 + day))) // 1970.1.1 是周四\r\n    ))\r\n}\r\n\r\ngetWeekdayNames('en-US') // ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\r\ngetWeekdayNames('zh-CN') // ['周日', '周一', '周二', '周三', '周四', '周五', '周六']\r\ngetWeekdayNames('ja') // ['日', '月', '火', '水', '木', '金', '土']\r\ngetWeekdayNames('ar-EG') // ['الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت']</pre>\n<p>当然，如果你还是不喜欢运行时为你提供的格式，我们还有上文提到过的 <code>formatToParts()</code> 方法可以用。来看一个简单的例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('zh-CN', {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    weekday: 'long',\r\n    hour: 'numeric',\r\n    minute: 'numeric',\r\n    second: 'numeric',\r\n}).formatToParts(new Date())\r\n// [\r\n//     { type: 'year', value: '2021' },\r\n//     { type: 'literal', value: '年' },\r\n//     { type: 'month', value: '10' },\r\n//     { type: 'literal', value: '月' },\r\n//     { type: 'day', value: '13' },\r\n//     { type: 'literal', value: '日' },\r\n//     { type: 'weekday', value: '星期三' },\r\n//     { type: 'literal', value: ' ' },\r\n//     { type: 'dayPeriod', value: '上午' },\r\n//     { type: 'hour', value: '1' },\r\n//     { type: 'literal', value: ':' },\r\n//     { type: 'minute', value: '00' },\r\n//     { type: 'literal', value: ':' },\r\n//     { type: 'second', value: '00' }\r\n// ]</pre>\n<p>随后，你就可以自己解析这个数组来构造出你想要的时间格式了。最后，我们还可以使用 <code>Intl.RelativeTimeFormat</code> 来格式化相对日期。当然我们不会在这里详细讲解这个 API，你可以参考 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat\" rel=\"noopener\">MDN 文档</a>。直接来看一个简单例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getRelativeTime = (num, unit, locale) =&gt; {\r\n    return new Intl.RelativeTimeFormat(locale, { numeric: 'auto' }).format(num, unit)\r\n}\r\n\r\ngetRelativeTime(-3, 'day', 'en-US') // 3 days ago\r\ngetRelativeTime(-1, 'day', 'zh-CN') // 昨天\r\ngetRelativeTime(0, 'second', 'zh-CN') // 现在\r\ngetRelativeTime(3, 'hour', 'ja') // 3 時間後</pre>\n<blockquote><p><code>Intl.RelativeTimeFormat</code> 是一个相对较晚进入标准的对象，因此浏览器支持程度较差，可能需要使用 <a href=\"https://formatjs.io/docs/polyfills/intl-relativetimeformat\" rel=\"noopener\">Polyfill</a>。不过目前（2021.10）主流浏览器的最新版本均已支持此 API。</p></blockquote>\n<h1>未来</h1>\n<p>我希望这篇文章时区转换的部分可以很快过时——这并非无稽之谈，目前（2021.10）TC39 的 <a href=\"https://github.com/tc39/proposal-temporal\" rel=\"noopener\"><code>Temporal</code> 提案</a>已经进入 Stage 3 了。<strong><code>Temporal</code> 提案定义了一个新的、时区友好的 <code>Temporal</code> 命名空间，并期望在不久后就能进入标准并最终应用于生产环境。</strong><code>Temporal</code> 定义了完整的时区、时间段、日历规则的处理，且拥有简单明了的 API。那时候，JavaScript 的时区处理就不会再如此痛苦了。由于目前 <code>Temporal</code> 提案还未进入标准，API 暂未稳定，我们无法将其用于生产环境，但我们可以来看一个简单的例子感受一下这个 API 的强大。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const zonedDateTime = Temporal.ZonedDateTime.from({\r\n  timeZone: 'America/Los_Angeles',\r\n  year: 1995,\r\n  month: 12,\r\n  day: 7,\r\n  hour: 3,\r\n  minute: 24,\r\n  second: 30,\r\n  millisecond: 0,\r\n  microsecond: 3,\r\n  nanosecond: 500,\r\n  calendar: 'iso8601'\r\n}) // 1995-12-07T03:24:30.0000035-08:00[America/Los_Angeles]</pre>\n<p>如果你希望立刻开始使用 <code>Temporal</code>，现在已有 Polyfill 可用。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"js-temporal\" data-mdxgithubp=\"temporal-polyfill\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/js-temporal/temporal-polyfill\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>不过，时区问题不会消失，各地区的习惯也很难融合到一起。时间的国际化处理是<a href=\"https://yourcalendricalfallacyis.com/\" rel=\"noopener\">极其复杂</a>的，前端中的时间国际化仍然值得我们认真关注。</p>\n","link":"https://flyhigher.top/develop/2482.html"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 4分8秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量...</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板...）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/209138/1/18651/50218/622032acEf83a8d68/fc6db86aebb679ff.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。macOS 系统代理的行为和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：...</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/207910/19/18573/59096/622032b0E05c1d4be/5d89d557f7889730.jpg\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。M1 芯片的性能如何？本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？...</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/138186/40/23101/50775/622032b3Efa9053d7/df3a819d044a9455.jpg\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote>\n<p>题图来自 USTC Hackergame 2019「Happy LUG」</p>\n</blockquote>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/90743/25/22680/55545/622032abE6ef31d51/cfc4cb389c994c17.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"\n<p>WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将其表述为 \"An API for accessing Public Key Credentials\"，即“一个用于访问公钥凭证的 API”。WebAuthn 很强大，强大到被认为是 Web 身份认证的未来（当然，也很复杂）。你有想过通过指纹或者面部识别来登录网站吗？WebAuthn 就能在保证安全和隐私的情况下让这样的想法成为现实。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\" alt=\"通过 WebAuthn 调起 Windows Hello 登录网站\" width=\"1912\" height=\"966\" class=\"aligncenter size-full wp-image-2215\"></a>\n<p>你可以在<a href=\"https://webauthn.io/\" rel=\"noopener\">这个网站</a>自行体验 WebAuthn。或者，如果你有一个使用 WordPress 的站点，可以尝试一下 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WP-WebAuthn</a> 这款插件，它可以为你的站点启用 WebAuthn 登录。这是我为了写这篇文章而练手开发的插件，本文中的部分示例代码也来自这款插件。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"wp-webauthn\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/wp-webauthn\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>WebAuthn Level 1 标准已在 2019 年 3 月成为 W3C 推荐标准，而 Level 2 标准目前也已进入编辑草案阶段，但互联网上有关它的中文资料却仍然很少，国内也鲜有网站支持这一新标准。于是，在抱着各种英文资料和标准啃了几天以后，我折腾出了这篇文章。</p>\n<p>在这篇文章里，我将会从最基本的概念开始，逐渐深入 WebAuthn，直到解码公钥等深层细节。这可能是你能找到的有关 WebAuthn 最详细最基础的中文文章，也很可能是最长的。在开始之前，<strong>我强烈建议你打开菜单中的文章目录浏览一遍，以对这篇文章涉及的内容有所了解。</strong>如果你只是想了解如何简单地在你的项目中添加对 WebAuthn 的支持，那么“<a href=\"https://flyhigher.top/#webauthn-overview\">浅谈 WebAuthn</a>”部分就是你要找的；如果你想了解更多关于 WebAuthn 的底层细节，那么你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分。</p>\n<p>由于在本文写作时 WebAuthn Level 2 规范尚未定稿，<strong>这篇文章我们将只专注于 Level 1 规范。</strong></p>\n<p>这篇文章最后更新于 2020.9 ，在你读到这篇文章时，部分事实可能已经发生改变，请注意判断。</p>\n<p><strong>更新日志：</strong></p>\n<ul>\n<li>2021.1.16 添加 Chrome 开发工具信息</li>\n<li>2020.9.17 更新 iOS/iPad OS 兼容性信息</li>\n<li>2020.5.20 添加部分无用户名认证的平台兼容性内容</li>\n<li>2020.5.15 添加部分 <code>extensions</code> 相关内容与链接；添加全局凭证 ID 唯一内容；添加凭证 ID 查找相关内容；添加“从 U2F 认证迁移”一节</li>\n<li>2020.4.13 更新与修正 <code>userVerification</code> 相关内容；添加部分 Firefox 相关内容</li>\n<li>2020.3.23 文章发布</li>\n</ul>\n<p>那么让我们开始吧。<span></span></p>\n<h1>浅谈 WebAuthn</h1>\n<p>在这个部分里，我们将会从基础概念开始，了解有关 WebAuthn 和密码学的一些基础知识，并最终使用第三方库实现基础的 WebAuthn 认证。如果你已经对这些内容有所了解了，可以跳到“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”继续阅读。</p>\n<h2>为什么使用 WebAuthn</h2>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\" alt=\"钓鱼邮件\" width=\"709\" height=\"693\" class=\"aligncenter size-full wp-image-2162\"></a>\n<p>相信你一定收到过类似的邮件吧？只要你点进那个最显眼的链接，你就会进入一个设置好的圈套——钓鱼网站。如果你一时糊涂在这类网站上填写了你的账号和密码，bingo，你的账号就不再是你的账号了。</p>\n<p>不过，就算你警惕心再强，也无法避免密码泄露事件。Twitter, Facebook 等都爆出过明文密码泄露事件，证明再大的公司或组织也无法避免密码泄露问题。雪上加霜的是，很大一部分用户都非常喜欢使用重复密码，这就导致一次密码泄露会牵连很多网站，用户的账户安全性完全无法得到保证。</p>\n<p>那么，有什么办法解决这些问题吗？<strong>彻底解决的方法只有一个，那就是抛弃密码。</strong>可是没有密码还怎么验证用户身份呢？这就是 WebAuthn 的用武之地了。</p>\n<p><del>没有密码的好时代，来临力！</del></p>\n<h2>什么是 WebAuthn</h2>\n<p>那么到底什么是 WebAuthn 呢？如开头所说，WebAuthn 是“一个用于访问公钥凭证的 API”，网站可以通过这个 API 进行一些高安全性的身份验证。WebAuthn 一个最常见的应用就是用于网站登录时的 2FA（双重因素验证）甚至是无密码登录。通过网页调用 WebAuthn，在不同平台下，<strong>我们可以实现通过 USB Key、指纹、面部甚至虹膜扫描来认证身份，同时确保安全和隐私。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\" alt=\"WebAuthn 可使用的各种身份认证方式\" width=\"1294\" height=\"566\" class=\"aligncenter size-full wp-image-2213\"></a>\n<p>WebAuthn 标准是 FIDO2 标准的一部分，而 FIDO2 则是由 FIDO 联盟和 W3C 共同推出的 U2F（现称作 FIDO1）的后继标准，旨在增强网络认证的安全性。</p>\n<blockquote><p>你可能了解过 U2F，那么 U2F 和 FIDO2 的区别在哪里呢？从名字上可以看出，U2F，即“通用第二因素协议”，是专注于作为密码后的第二道屏障的，而 FIDO2 增加了单因素认证功能，这意味着使用 FIDO2 可以完全替代密码，真正实现无密码登录。</p></blockquote>\n<p>FIDO2 标准主要包括四个部分，其一是用于网站和访客设备交互的 WebAuthn，而 Client to Authenticator Protocol 2（CTAP2，客户端-认证器协议）作为 WebAuthn 的补充，则是用于访客的设备和认证器交互的协议。标准的其他两个部分则是 U2F 和 UAF 规范。在这篇文章中，我们只关心 WebAuthn，不会涉及 CTAP, U2F 和 UAF 的相关知识。如果你对这段话中的一些概念不了解，不要紧张，接下来我们就来谈谈 WebAuthn 中一些常用的术语和概念。</p>\n<blockquote><p>WebAuthn 只能在安全上下文中使用，也就是说，页面需要使用 HTTPS 协议或是处于 <code>localhost</code> 中。</p></blockquote>\n<h2>常用术语和概念</h2>\n<p>WebAuthn 中有许多不常碰到的术语，不过我只会在这里介绍一些常用的术语和概念——如果你只是希望做出一个简单的实现，那么了解这一段中的一些概念就足够了。同时，由于我实在没能找到一部分术语的通用翻译，有一些术语我按着自己的理解尽可能地翻译了，有任何问题请告诉我。</p>\n<p>在一个完整的 WebAuthn 认证流程中，通常有这么几个角色：</p>\n<ul>\n<li>Relying Party 依赖方 (RP) ：指服务提供方，即网站</li>\n<li>User 用户：正准备登录的你</li>\n<li>Authenticator 认证器：通常指 USB Key 或是设备内置的指纹扫描器、虹膜扫描器、面部识别装置等，正是它们在使用流程中代替了密码甚至是用户名</li>\n<li>User Agent 用户代理：通常指浏览器或系统，负责与认证器交互</li>\n</ul>\n<p>认证过程通常分为两种：</p>\n<ul>\n<li>Registration Ceremony 注册仪式：用户向账户上添加认证器</li>\n<li>Authentication Ceremony 验证仪式：用户通过已注册的认证器验证身份</li>\n</ul>\n<p>同时，认证过程中还会产生这些内容：</p>\n<ul>\n<li>Challenge 挑战：通常是一串随机字符串</li>\n<li>Public Key Credential 公钥凭证：由认证器产生的凭证，在技术上代替了密码</li>\n<li>Attestation 证明：注册时认证器产生的验证数据</li>\n<li>Assertion 断言：验证时认证器产生的验证数据</li>\n</ul>\n<blockquote><p><strong>请注意区分证明 (Attestation) 和断言 (Assertion)</strong>，特别是在这两个单词有些相似的情况下。在 WebAuthn 中，它们是不同过程中的类似概念，但并不相同。</p></blockquote>\n<p>如果你对于这些内容不是很理解，没有关系，我们会在“<a href=\"https://flyhigher.top/#how-to-webauthn\">使用流程</a>”一节中将这些概念放到实际情况中解释，你只要先区分这些概念即可。</p>\n<h2>安全性的基础</h2>\n<p>WebAuthn 为什么安全？和 HTTPS 一样，WebAuthn 使用非对称加密的思路来保证安全性，但侧重点又有所不同。要理解 WebAuthn 的认证流程，我们必须对非对称加密有所了解。如果你对非对称加密比较熟悉了，就直接跳到下一段吧。</p>\n<p>WebAuthn 的核心在于“认证”，即保证产生了凭证的认证器是用户的认证器，而不是第三方在伪造凭证。但为什么要使用非对称加密呢？我们可以先来看看对称加密。</p>\n<p>让我们假设小明和小红相互写信，见不到对方。这天小红突然想，给自己写信的人是不是真的小明呢？于是小红要求对方向小红证明自己是小明。怎么证明呢？他们商量出来这么一套方案：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明和小红商量一个统一的密码和密钥</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明用提前和小红商量好的密码和密钥加密文本后发回给小红</li>\n<li>小红使用相同的密码和密钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和密钥</li>\n</ol>\n<blockquote><p>在密码学中，我们通常把“加密算法”称为密码 (code)，和通常登录时用的密码 (password) 并非同一个概念。</p></blockquote>\n<p>在这种情况下，<strong>只要密钥不泄露</strong>，即拥有正确密钥的只有小明和小红，那么小红就能确定对方一定是小明。但这样的问题也很明显，如果小明和小红不能见面，那么他们就必须先以明文交换密码——<strong>在这个过程中一旦有人窃取到了密码，这个认证就无效了。</strong></p>\n<p>这时我们就需要使用<strong>非对称加密</strong>来拯救破碎的信任了。非对称加密的基础是一对密钥，也就是公钥和私钥，它们是互相关联但（几乎）无法互相推导的。在非对称加密的过程中，选择相同的密码后，使用私钥加密明文得到的密文只能由对应的公钥解密，无法使用私钥解密，同时这个过程反过来也是成立的。</p>\n<blockquote><p>本文的核心并不是非对称加密算法，因此不会详述非对称加密在数学上的证明，若有兴趣可以自行了解。</p></blockquote>\n<p>这就完美解决密钥泄露的问题了。让我们回过头来看之前的例子。现在小明和小红决定使用非对称加密来证明身份，过程如下：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明提前生成一对公私钥，将公钥发送给小红，私钥自己保管，同时商量好统一的密码</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明使用商量好的密码和自己的私钥加密文本，发送给小红</li>\n<li>小红使用相同的密码和小明的公钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和私钥</li>\n</ol>\n<p>在这种情况下，<strong>只要私钥不泄露</strong>，那么小红解密得到的文本和之前发送的一致，那么就可以证明收到的密文一定是由小明加密后发送过来的。而在整个过程中，私钥都没有离开过小明，更没有经过传输，也就几乎没有泄露的可能了。这时，小红终于可以确定对面和她通信的人的确是小明了。</p>\n<p>题外话：HTTPS 虽然也应用了非对称加密，但 HTTPS 更侧重于“加密”而非“认证”，因此思路上会有些许差异。要了解关于 HTTPS 和非对称加密的更多信息，你可以阅读我之前写的这篇文章：</p>\n<p></p>\n<div class=\"mdx-post-cot\" data-mdxposturl=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdx-post-wait-out-c2\"><div class=\"mdx-post-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<span></span>\n<h2>使用流程</h2>\n<p>了解了非对称加密，我们就可以来看看 WebAuthn 的认证流程了。</p>\n<p>和普通的密码一样，<strong>使用 WebAuthn 分为两个部分，注册和验证。</strong>注册仪式会在依赖方中将认证器的一些信息和用户建立关联；而验证仪式则是验证这些信息以登确保是用户本人在登录。根据上一节的思路，我们可以知道，注册仪式就是认证器生成一对公私钥，然后将公钥交给依赖方；而验证仪式是依赖方发送给认证器一段文本，要求认证器用自己的私钥加密后发回以验证。</p>\n<p>在实际情况中，WebAuthn 是基于<strong>挑战-应答模型</strong>工作的。要更好地理解，我们直接来看具体流程。先来看看注册的流程。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\" alt=\"WebAuthn 注册流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2224\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的注册请求</li>\n<li>依赖方向浏览器发送挑战、依赖方信息和用户信息</li>\n<li>浏览器向认证器发送挑战、依赖方信息、用户信息和客户端信息以请求创建公钥凭证</li>\n<li>认证器请求用户动作，随后创建一对公私钥，并使用私钥签名挑战（即证明），和公钥一起交给浏览器</li>\n<li>浏览器将签名后的挑战和公钥发送给依赖方</li>\n<li>依赖方用公钥验证挑战是否与发送的一致，如果成功则将公钥与用户绑定，注册完成</li>\n</ol>\n<p>我也做了一个交互式的 Demo，你可以对照流程来更好地理解。</p>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\">开始注册</button> <span></span></p>\n<div></div>\n<blockquote><p>注意，这个 Demo 和下方的 Demo 都只是一个本地模拟的简单示例，没有任何数据会被上传，当然也不会对数据进行验证。</p></blockquote>\n<p>而之后的验证流程如下：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\" alt=\"WebAuthn 验证流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2226\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的验证请求</li>\n<li>依赖方向浏览器发送挑战</li>\n<li>浏览器向认证器发送挑战、依赖方信息和客户端信息以请求获取公钥凭证</li>\n<li>认证器请求用户动作，随后通过依赖方信息找到对应私钥，并使用私钥签名挑战（即断言），交给浏览器</li>\n<li>浏览器将签名后的挑战发送给依赖方</li>\n<li>依赖方用之前存储的公钥验证挑战是否与发送的一致，一致则验证成功</li>\n</ol>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\" disabled>开始验证</button> <span>在上方注册后才能验证</span></p>\n<div></div>\n<p>可以看到，WebAuthn 不仅在理论上是安全的，同时<strong>在整个过程中并没有隐私数据被传输</strong>——用户信息实际上只包含用户名和用户 ID。因此我们完全可以说 WebAuthn 是安全且私密的。</p>\n<blockquote><p>为了避免用户在不同依赖方之间被追踪，认证器通常会为每个依赖方和用户的组合都创建一对公私钥。不过，由于认证器的存储空间有限，认证器通常不会存储每一个私钥，而是会通过各类信息和烧录在认证器内的主密钥“算”出对应的私钥以实现无限对公私钥。具体算法根据不同厂商会有所不同。对于 Yubikey，你可以在<a href=\"https://developers.yubico.com/U2F/Protocol_details/Key_generation.html\">这里</a>了解更多。</p></blockquote>\n<blockquote><p>如果依赖方需要，用户同意后，发送给依赖方的公钥凭证中可以包含用于辨认认证器型号的信息，不过这对隐私的影响微乎其微。</p></blockquote>\n<h2>浏览器接口</h2>\n<p>要使用 WebAuthn，我们必须要依靠浏览器作为媒介和验证器进行交互，而这就需要浏览器对于 WebAuthn 的支持了。绝大多数新版本的现代浏览器都为 WebAuthn 提供了统一的接口，而在这一段中我们会了解如何使用相关的接口。但是在开始之前，我们可以先来看看浏览器的支持程度（2020.9）。</p>\n<div class=\"mdui-table-fluid\"><table class=\"mdui-table\">\n<thead><tr>\n<th>浏览器</th>\n<th>支持情况</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>桌面端 Chrome</td>\n<td>67+</td>\n</tr>\n<tr>\n<td>移动端 Chrome</td>\n<td>67+<sup>[1]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Firefox</td>\n<td>60+</td>\n</tr>\n<tr>\n<td>移动端 Firefox</td>\n<td>不支持<sup>[2]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Edge</td>\n<td>18+</td>\n</tr>\n<tr>\n<td>移动端 Edge</td>\n<td>不支持<sup>[3]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Safari</td>\n<td>13+</td>\n</tr>\n<tr>\n<td>移动端 Safari</td>\n<td>13.3+<sup>[4]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Opera</td>\n<td>54+</td>\n</tr>\n<tr>\n<td>移动端 Opera</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table></div>\n<p><sup>[1]</sup> 受平台限制，Chrome 在 iOS 平台上不支持 WebAuthn，在 Android 平台上支持大部分 WebAuthn 功能，但仍不支持部分特性（如 <code>userVerification</code>）。<br><sup>[2]</sup> 移动端 Firefox 80 以下的版本支持 WebAuthn 但似乎会忽略 <code>authenticatorAttachment</code> 等一部分参数，同时移动端 Firefox Beta 80 以下的版本支持 WebAuthn 但无法成功调用。自 80 版本起移动端 Firefox 暂时取消了对 WebAuthn 的支持（可能是 Bug）。<br><sup>[3]</sup> 移动端 Edge 似乎支持 WebAuthn 但无法成功调用。<br><sup>[4]</sup> Safari iOS/iPad OS 13 仅支持外部认证器，无法调用 Touch ID 或 Face ID；自 iOS/iPad OS 14 起 Safari 已支持全功能 WebAuthn，可以调用 Touch ID/Face ID</p>\n<p>当然，一众国产浏览器，包括 Samsung Browser 和 Yandex Browser，目前都不支持 WebAuthn。此外，由于 WebAuthn 涉及外部验证器和 TPM 可信平台模块等，用户的操作系统也会对 WebAuthn 的可用性造成影响。以下是一些需要注意的信息：</p>\n<ul>\n<li>Windows 10 1903 以下版本仅 Edge 能提供完整支持，其他浏览器只能使用 USB Key 等外部认证器；1903+ 中所有浏览器都可以通过 Windows Hello 带来完整的 WebAuthn 支持</li>\n<li>Android 需要安装并开启 Google 服务</li>\n<li>iOS/iPad OS 13.3 以下的版本不支持 WebAuthn，iOS/iPad OS 14 以下的版本支持有限（参考上文），iOS/iPad OS 14 开始 Safari 已支持全功能 WebAuthn（功能完整度甚至超过了 Android）</li>\n</ul>\n<p>可以看出，WebAuthn 的发展之路仍然很漫长，但好在桌面端对它的支持已经比较完善了，在一些情况下我们完全有理由使用它。</p>\n<hr>\n<p>来看看浏览器提供了怎么样的接口吧。要使用 WebAuthn，我们可以使用 <code>navigator.credentials.create()</code> 请求认证器生成公钥凭证和 <code>navigator.credentials.get()</code> 请求获取公钥凭证。</p>\n<blockquote><p>你或许已经对 Credential Management API 有所了解了。通过这些 API，我们还可以实现一些有趣的特性，不过这值得另开一篇文章来讲了。</p></blockquote>\n<p>对于一个基础的实现，<code>navigator.credentials.create()</code> 需要传入的参数如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        challenge,\r\n        rp: {\r\n            id,\r\n            name\r\n        },\r\n        user: {\r\n            id,\r\n            name,\r\n            displayName\r\n        },\r\n        pubKeyCredParams: [\r\n            {\r\n                type: \"public-key\",\r\n                alg\r\n            }\r\n        ],\r\n        authenticatorSelection: {\r\n            authenticatorAttachment,\r\n            userVerification\r\n        },\r\n        excludeCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>在 <code>navigator.credentials.create()</code> 方法中，我们必须传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值。这指明了我们需要创建公钥凭证，而非普通的密码凭证。然后，在 <code>publicKey</code> 对象中设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rp: Object</code>：依赖方信息，其中有一项为必须：\n<ul>\n<li>\n<code>rp.id: String</code>：（可选）依赖方 ID，必须为当前域名或为当前域名的子集的域名（不是子域名）。如域名为 <code>test.123.example.com</code>，则依赖方 ID 可以是 <code>test.123.example.com</code>, <code>123.example.com</code> 或 <code>example.com</code>。不指定则默认使用当前域名</li>\n<li>\n<code>rp.name: String</code>：依赖方名称，用于方便用户辨认</li>\n</ul>\n</li>\n<li>\n<code>user: Object</code>：用户信息，其中有三项为必须：\n<ul>\n<li>\n<code>user.id: Uint8Array</code>：转换为 <code>Uint8Array</code> 的字符串。<strong>出于安全考量，这应尽可能不与任何用户信息相关联，如不要包含用户名、用户邮箱等</strong>\n</li>\n<li>\n<code>user.name: String</code>：登录用户名</li>\n<li>\n<code>user.dispalyName: String</code>：用于显示的用户名称，显示与否的具体行为取决于浏览器</li>\n</ul>\n</li>\n<li>\n<code>pubKeyCredParams: Array</code>：一个算法列表，指明依赖方接受哪些签名算法。列表的每一项都是一个对象，拥有两个属性：\n<ul>\n<li>\n<code>pubKeyCredParams[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>pubKeyCredParams[].alg: Number</code>：一个负整数，用于标明算法。具体算法对应的数字可以在 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\">COSE</a> 找到</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection: Object</code>：（可选）用于过滤正确的认证器，这里介绍常用的一个参数：\n<ul>\n<li>\n<code>authenticatorSelection.authenticatorAttachment: String</code>：（可选）指定要求的认证器类型。如果没有满足要求的认证器，认证可能会失败。该参数可以为 <code>null</code>（表示接受所有类型的认证器）或是以下两个值之一：\n<ul>\n<li>\n<code>platform</code>：表示仅接受平台内置的、无法移除的认证器，如手机的指纹识别设备</li>\n<li>\n<code>cross-platform</code>：表示仅接受外部认证器，如 USB Key</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection.userVerification: String</code>：（可选）指定认证器是否需要验证“用户为本人 (User Verified, UV)”，否则只须“用户在场 (User Present, UP)”。具体验证过程取决于认证器（不同认证器的认证方法不同，也有认证器不支持用户验证），而对验证结果的处理情况则取决于依赖方。该参数可以为以下三个值之一：\n<ul>\n<li>\n<code>required</code>：依赖方要求用户验证</li>\n<li>\n<code>preferred</code>：（默认）依赖方希望有用户验证，但也接受用户在场的结果</li>\n<li>\n<code>discouraged</code>：依赖方不关心用户验证。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>excludeCredentials: Array</code>：（可选）用于标识要排除的凭证，可以避免同一个用户多次注册同一个认证器。如果用户试图注册相同的认证器，用户代理会抛出 <code>InvalidStateError</code> 错误。数组中的每一项都是一个公钥凭证对象，包含以下属性：\n<ul>\n<li>\n<code>excludeCredentials[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>excludeCredentials[].id: Uint8Array</code>：要排除的凭证 ID</li>\n<li>\n<code>excludeCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，超时后将强制终止 <code>create()</code> 并抛出错误。若不设置，将使用用户代理的默认值；若太大或太小，则使用最接近的用户代理默认值范围中的值。推荐值为 5000-120000</li>\n</ul>\n<blockquote><p>对于 <code>pubKeyCredParams</code>，通常我们只需添加 ES256 (alg: -7) 算法即可兼容大部分外部认证器，此外，再添加 RS256 (alg: -257) 算法即可兼容大部分平台内置认证器（如 Windows Hello）。当然，前端添加算法之后，后端也需要相应的算法支持。</p></blockquote>\n<blockquote><p>对于 <code>userVerification</code>，由于默认值 \"preferred\" 并不能很好地被所有设备支持，因此无论在 <code>create()</code> 中还是 <code>get()</code> 中不指定该参数都会在 Chrome 中触发一条警告。具体请参阅<a href=\"https://chromium.googlesource.com/chromium/src/+/master/content/browser/webauth/uv_preferred.md\">这个页面</a>。</p></blockquote>\n<p>调用 <code>create()</code> 之后，我们就可以拿到一个 <code>Promise</code>，并可以在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>create()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAttestationResponse {\r\n        attestationObject: ArrayBuffer(390) {},\r\n        clientDataJSON: ArrayBuffer(121) {}\r\n    },\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\",\r\n    type: \"public-key\"\r\n}</pre>\n<p>其中有：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 \"public-key\"</li>\n<li>\n<code>response: Object</code>：<code>AuthenticatorAttestationResponse</code> 对象，是 <code>PublicKeyCredential</code> 的主要部分，包含以下两个内容：\n<ul>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n<li>\n<code>response.attestationObject: ArrayBuffer</code>：CBOR 编码的认证器数据，包含凭证公钥、凭证 ID、签名（如果有）、签名计数等信息</li>\n</ul>\n</li>\n</ul>\n<p>然后将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串，我们就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证与注册了。具体怎么操作，我们会在下文详细讨论。当然，别忘了 <code>catch()</code> 注册过程中抛出的任何错误。</p>\n<blockquote><p>你可能会认为在所有情况下，注册时认证器都会对挑战进行签名。实际上在大部分情况下（同时也是默认情况），<strong>注册时认证器并不会对挑战进行签名</strong>，<code>attestationObject</code> 并不会包含签名后的挑战。只有依赖方明确要求证明且用户同意（部分浏览器要求）后认证器才会对挑战进行签名（具体实现据情况会有所不同）。对此，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion#Attestation\">MDN 解释道</a>“大部分情况下，用户注册公钥时我们会使用「初次使用时信任模型」(TOFU) ，此时验证公钥是没有必要的。”要了解更多关于证明的内容，请参阅“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>而对于 <code>navigator.credentials.get()</code>，我们可以传入如下的参数：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.get({\r\n    publicKey: {\r\n        challenge,\r\n        rpId,\r\n        userVerification,\r\n        allowCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>和 <code>create()</code> 一样，对于 <code>get()</code> 我们需要传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值，指明我们需要获取的是公钥凭证而非普通的密码凭证。在 <code>publicKey</code> 对象中我们可以设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rpID: String</code>：（可选）依赖方 ID，需要和注册认证器时的一致。规则和上述的 <code>rp.id</code> 一致，不指定默认使用当前域名</li>\n<li>\n<code>userVerification: String</code>：和上文一样，只是需要注意它这次不在 <code>authenticatorSelection</code> 中了</li>\n<li>\n<code>allowCredentials: Array</code>：（可选）用于标识允许的凭证 ID，使用户代理找到正确的认证器。只有符合这个列表中凭证 ID 的凭证才能被成功返回。数组中的每一项都是对象，包含以下属性：\n<ul>\n<li>\n<code>allowCredentials[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>allowCredentials[].id: Uint8Array</code>：允许的凭证 ID</li>\n<li>\n<code>allowCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，和上面的一样，推荐值为 5000-120000</li>\n</ul>\n<p>嗯，要传入的参数少多了。之后，和 <code>create()</code> 一样，调用 <code>get()</code> 之后，我们就可以拿到一个 <code>Promise</code> 并在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>get()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAssertionResponse {\r\n        authenticatorData: ArrayBuffer(37) {},\r\n        signature: ArrayBuffer(256) {},\r\n        userHandle: ArrayBuffer(64) {},\r\n        clientDataJSON: ArrayBuffer(118) {}\r\n    }\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\"\r\n    type: \"public-key\"\r\n}</pre>\n<p>这里的东西就比 <code>create()</code> 时拿到的要多了。看看我们拿到了什么吧：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 \"public-key\"</li>\n<li>\n<code>response: Object</code>：对于验证流程，认证会返回 <code>AuthenticatorAssertionResponse</code> 而不是 <code>AuthenticatorAttestationResponse</code> 对象，这个对象包含以下 4 个属性：\n<ul>\n<li>\n<code>response.authenticatorData: ArrayBuffer</code>：认证器信息，包含认证状态、签名计数等</li>\n<li>\n<code>response.signature: ArrayBuffer</code>：被认证器签名的 <code>authenticatorData</code> + <code>clientDataHash</code>（<code>clientDataJSON</code> 的 SHA-256 hash）</li>\n<li>\n<code>response.userHandle: ArrayBuffer</code>：<code>create()</code> 创建凭证时的用户 ID <code>user.id</code>。许多 U2F 设备不支持这一特性，这一项将会是 <code>null</code>\n</li>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n</ul>\n</li>\n</ul>\n<p>同样地，我们将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串后就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证了。至于具体怎么做，别急，马上就来讲一讲。</p>\n<h2>简单实现</h2>\n<p>了这么多，我们终于可以实现一个简单的 WebAuthn 认证页面了。由于在实际操作中 WebAuthn 相关的数据解码和密码计算比较复杂，在服务器端我们可以使用第三方库来帮我们做这些脏活累活，我们只需专注于具体流程就可以了。</p>\n<p>要寻找可用的第三方库，你可以在 <a href=\"https://webauthn.io/\">webauthn.io</a> 上找到适用于各种语言的第三方库——除了 PHP（笑）。不过好在你可以在 GitHub 上找到几个不错的 PHP WebAuthn 库，比如 <a href=\"https://github.com/web-auth/webauthn-framework\">web-auth/webauthn-framework</a>。</p>\n<p>在我们的这个例子中，我们关心的主要是前端逻辑；而后端我们可以使用各类几乎已经做到开箱即用的第三方库，这样我们可以专注于流程而不必关心细节。当然如果你想了解后端的解码细节，可以阅读“<a href=\"https://flyhigher.top/#webauthn-decode\">手动解个码</a>”一节。</p>\n<hr>\n<p>让我们先从注册开始吧。现在，用户点击了注册认证器的按钮，一个请求被发送给服务器（也就是依赖方）。在最简单的情况中，依赖方需要将三个内容发送给浏览器：<strong>挑战、用户信息和用户已注册的凭证 ID 列表（即 <code>excludeCredentials</code>）</strong>。当然依赖方也可以自由选择发送更多信息，只要最终前端能构建合法的参数即可。</p>\n<p>挑战最终会被转换为 <code>Uint8Array</code>，即一组 0-255 的整数。如果使用 PHP，在后端我们可以这样生成 Base64 编码的挑战：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$challenge = \"\";\r\nfor($i = 0; $i \n<p>对于用户信息，我们需要登录名、显示名称和 ID 三项内容。我们可以从数据库中取出用户信息，也可以新建一份。需要注意的是，<strong>出于安全和隐私的考量，ID 不应该包含用户的任何信息，比如用户邮箱等。</strong>推荐的做法是和挑战一样，生成一个随机字符串/一组随机数，并将其于用户关联起来以供之后使用。</p>\n<p>发送已注册的凭证 ID 列表是为了防止用户重复注册同一个认证器。正确设置该列表后，如果用户试图注册同一个认证器，浏览器会中止流程并抛出 <code>InvalidStateError</code>。</p>\n<p>最后，别忘了将挑战等一些后续可能会用到的信息临时存储起来。Session 就是一个很好的选择。</p>\n<p>将所有信息发送到浏览器之后，我们应该可以构建出新建凭证所需的参数了。由于有多个参数需要以 <code>Uint8Array</code> 的形式传入，我们可以准备一个简单的工具函数帮我们将 Base64 的字符串转为 <code>Uint8Array</code>。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function str2ab(str){\r\n    return Uint8Array.from(window.atob(str), c=&gt;c.charCodeAt(0));\r\n}</pre>\n<p>除了 <code>challenge</code>, <code>rp</code>, <code>user</code> 和 <code>excludeCredentials</code> 几部分需要你根据具体情况设置外，上文提到的其他参数一般可以这么设置：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">publicKey: {\r\n    challenge, // 自行设置\r\n    rp, // 自行设置\r\n    user, // 自行设置\r\n    pubKeyCredParams: [\r\n        {\r\n            type: \"public-key\",\r\n            alg: -7 // ES256\r\n        },\r\n        {\r\n            type: \"public-key\",\r\n            alg: -257 // RS256\r\n        }\r\n    ],\r\n    authenticatorSelection: {\r\n        userVerification: \"discouraged\",\r\n        authenticatorAttachment: null // 除非用户指定，大部分情况下无需指定\r\n    },\r\n    excludeCredentials, // 自行设置\r\n    timeout: 60000\r\n}</pre>\n<p>然后就是传入 <code>navigator.credentials.create()</code>，拿到 <code>PublicKeyCredential</code>。如果一切顺利，接下来我们就需要考虑如何将返回的内容传回依赖方了。由于我们拿到的很多都是 <code>ArrayBuffer</code>，我们需要将其进行编码。再准备一个工具函数吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function array2b64String(a) {\r\n    return window.btoa(String.fromCharCode(...a));\r\n}</pre>\n<p>然后适当处理，我们就可以得到一个方便传输的 JSON 字符串了：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({publicKey}).then((credentialInfo) =&gt; {\r\n    const publicKeyCredential = {\r\n        id: credentialInfo.id,\r\n        type: credentialInfo.type,\r\n        rawId: array2b64String(new Uint8Array(credentialInfo.rawId)),\r\n        response: {\r\n            clientDataJSON: array2b64String(new Uint8Array(credentialInfo.response.clientDataJSON)),\r\n            attestationObject: array2b64String(new Uint8Array(credentialInfo.response.attestationObject))\r\n        }\r\n    };\r\n    return publicKeyCredential;\r\n}).then(JSON.stringify).then((authenticatorResponseJSON) =&gt; {\r\n    // 可以发送了\r\n}).catch((error) =&gt; {\r\n    console.warn(error); // 捕获错误\r\n})</pre>\n<p>依赖方收到数据以后，还需要做三件事：验证挑战、存储凭证 ID 和存储公钥。如果数据解码顺利，且收到的挑战和之前发送的一致，就可以认为注册成功，将凭证 ID 及公钥与用户关联起来。这一步有很多第三方库可以帮我们做，对于基础实现我们就不深入探究了。</p>\n<blockquote><p>由于不同厂商的认证器的实现方式不同，<strong>我们并不能保证凭证 ID 一定是全局唯一的</strong>，也就是说，凭证 ID 有可能碰撞——即使这些凭证实际上是不同的。依赖方在实现凭证 ID 的存储及查找时，需要注意和用户 ID 结合进行存储或查找，或是直接在注册认证器时在服务器端对比阻止相同的凭证 ID。</p></blockquote>\n<hr><p>接下来就可以进行验证了。某天，用户点击了验证按钮准备登录，于是浏览器发送了验证请求到依赖方，同时附上要登录的用户名。接下来依赖方至少需要发送两项内容给浏览器：<strong>挑战和用户已绑定的凭证 ID 列表（即 <code>allowCredentials</code>）。</strong></p>\n<p>之后前端的处理流程就和注册时基本一致了。只是需要注意验证流程中获取到的 <code>PublicKeyCredential</code> 的结构和注册时的稍有不同。</p>\n<p>当浏览器将数据传回后，依赖方需要做的事情就比之前要麻烦一些了。依赖方需要验证挑战，并用之前存储的公钥验证签名和签名计数。同样地，这一步有很多第三方库可以帮我们做。最后，如果验证全部通过，我们就可以允许用户登录了。</p>\n<p>到目前为止，我们已经实现了一个简单的 WebAuthn 验证服务。不过这只是一个最基础的实现，对于很多高安全要求的身份认证这是远远不够的。因此，我们需要摆脱对第三方库的依赖，深入了解 WebAuthn。你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分，不过对于基础的 WebAuthn 实现，我们的旅程就到这里了。</p>\n<h2>拓展阅读</h2>\n<p>如果你的目标只是快速了解如何开发 WebAuthn，那么你阅读到这里就可以了。同时，上一节例子中的部分代码来自于我为了这篇文章开发的 WordPress 插件 WP-WebAuthn，这个插件可以为你的 WordPress 启用 WebAuthn 无密码登录（并非二步验证），你可以查阅插件的 <a href=\"https://github.com/yrccondor/wp-webauthn\">GitHub 存储库</a>了解更多，也可以自己安装试一试。</p>\n<p>如果你正在使用 Chrome 开发，Chrome 87+ 版本添加了一个 WebAuthn 开发者面板，可以帮助你在没有任何实体验证器的情况下开发 WebAuthn 功能。你可以在 Google 的<a href=\"https://developers.google.com/web/tools/chrome-devtools/webauthn\">这篇文章</a>中了解更多。不够，如果你正在使用 Firefox，很遗憾目前我还没有找到对应的开发工具或是浏览器扩展可用。</p>\n<p>如果你希望了解更多关于非对称加密的数学证明，可以查阅阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">这篇文章</a>。</p>\n<p>如果你希望了解更多关于 Credential Management API 的信息，可以查阅<a href=\"https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe\">这篇文章</a>（英文）。</p>\n<p>如果你希望了解更多 WebAuthn 的细节，可以继续往下阅读。<span></span></p>\n<h1>深入了解 WebAuthn</h1>\n<p>如上文所说，如果摆脱对第三方库的依赖，或是要实现更安全的 WebAuthn，我们必须深入了解 WebAuthn。在这一部分中，我们会详细讨论上文没有提到的一些概念和参数，并了解 WebAuthn 中各类数据的结构以实现解码与验证。先来看一看一些进阶的选项吧。</p>\n<h2>进阶选项</h2>\n<p>没错，上文提到的传入 <code>navigator.credentials.create()</code> 和 <code>navigator.credentials.get()</code> 方法的参数其实只是所有参数的一部分。对于 <code>create()</code>，我们还可以配置这些可选内容（上文提及的已省略）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        rp: {\r\n            icon\r\n        },\r\n        user: {\r\n            icon\r\n        },\r\n        attestation,\r\n        authenticatorSelection: {\r\n            requireResidentKey\r\n        },\r\n        extensions\r\n    }\r\n})</pre>\n</pre>\n<ul>\n<li>\n<code>rp.icon: String</code> 和 <code>user.icon</code>：是的，你可以为依赖方和用户设置图标，可以使用 HTTPS URL 或 Base64，一般长度不能超过 128 字节，不过大部分浏览器不会显示图标，或是有非常小的图片体积限制，所以一般没有使用这一属性的必要</li>\n<li>\n<code>attestation: String</code>：表明依赖方是否需要证明。可选三个值：\n<ul>\n<li>\n<code>none</code>：（默认）不需要证明。如上文所述，依赖方不关心证明，因此认证器不会签名。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n<li>\n<code>indirect</code>：依赖方需要证明，但证明方式可由认证器选择。在支持匿名证明的认证器上，认证器会通过匿名证明的方式签名挑战，并向依赖方提供签名方式等信息</li>\n<li>\n<code>direct</code>：依赖方要求直接证明。此时认证器会使用烧录在认证器中的公钥进行签名，同时向依赖方提供签名方式等信息以供依赖方验证认证器是否可信。更多信息可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节</li>\n</ul>\n</li>\n<li>在 <code>authenticatorSelection</code> 中，我们还可以设置两个可选属性：\n<ul>\n<li>\n<code>authenticatorSelection.requireResidentKey: Boolean</code>：是否要求将私钥钥永久存储于认证器中。默认值为 <code>false</code>。对于 iOS/iPad OS 13，必须设置为 <code>false</code>，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n<li>\n<code>extensions: Object</code>：WebAuthn 扩展，可以提供规范之外的配置和响应。由于实际情况中很少会使用这一特性，我们不会在这篇文章中讨论它</li>\n\n<blockquote><p>将 <code>requireResidentKey</code> 设置为 <code>true</code> 可以实现无用户名的登录，即认证器同时替代了用户名和密码。需要注意的是，尽管大部分认证器可以实现无限对公私钥，<strong>但能永久存储的私钥数量是有限的</strong>（对于 Yubikey，这通常是 25），因此只应在真正需要的时候启用此特性。我们会在“<a href=\"https://flyhigher.top/#login-without-username\">无用户名登录</a>”一节中详细讨论原因。</p></blockquote>\n<blockquote><p><strong>如果你没有高安全需求（如银行交易等），请不要向认证器索取证明</strong>，即将 <code>attestation</code> 设置为 \"none\"。对于普通身份认证来说，要求证明不必要的，且会有浏览器提示打扰到用户。</p></blockquote>\n<blockquote><p>Android 暂时无法实施用户验证，进而会导致依赖方验证失败。你可以在<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=997538\">这里</a>追踪这个特性的实现情况。</p></blockquote>\n<blockquote>\n<p>对于 <code>extensions</code>，由于目前浏览器支持和应用范围有限，我们不会在这篇文章中涉及，不过你可以看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    uvm: true, // 要求认证器返回用户进行验证的方法\r\n    txAuthSimple: \"Please proceed\" // 在认证器上显示与交易有关的简短消息\r\n}</pre>\n<p>你可以在<a href=\"https://www.w3.org/2019/01/webauthn-extensions.html\">这个页面</a>了解更多关于 <code>extensions</code> 的信息。</p>\n</blockquote>\n<p>对于 <code>get()</code>，我们其实只有一个可选内容没讲了，即 <code>extensions</code>。和上文一样，我们不会在这篇文章中讨论它。</p>\n<p>就这些了！<span></span></p>\n<h2>手动解个码</h2>\n<p>是时候看看如何手动解码了。我们将会在这一节中讨论认证器返回的数据的结构以及如何正确地解码它们。</p>\n<p>首先我们来看看如何处理注册过程中认证器发回的数据。假设所有 <code>ArrayBuffer</code> 类型的值都被正确地以 Base64 编码，且后端已经将 JSON 的字符串解析为字典。先来复习一下，我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"ZRBkDBCEtq...9XY8atOcbg\",\r\n    type: \"public-key\",\r\n    rawId: \"ZRBkDBCEtq...9XY8atOcbg==\",\r\n    response: {\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...i5jcmVhdGUifQ==\",\r\n        attestationObject: \"o2NmbXRkbm9uZWd...xNHuAMzz2LxZA==\"\r\n    }\r\n}</pre>\n<p>这里的 <code>id</code> 就是凭证的 ID，如果验证正确，我们最终要将它存储起来并于用户关联。同时可以看到 Base64 编码后的 <code>rawId</code> 其实和 <code>id</code> 是一致的（不过 <code>id</code> 是 Base64URL 编码的）。而 <code>type</code> 则一定是 \"public-key\"。</p>\n<p>不过，我们主要关心的还是 <code>respose</code> 中的两项内容。首先是 <code>clientDataJSON</code>。它的处理比较简单，看名字就知道，它应该是一个 JSON 字符串。</p>\n<blockquote><p>小技巧：如果你看到一个 Base64 编码的字符串以 \"ey\" 开头，那么它大概率是一个 Base64 编码的 JSON。</p></blockquote>\n<p>将<code>clientDataJSON</code> Base64 解码再 JSON 解码之后我们就能得到一个字典：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"NI4i1vsNmP2KHcmyFnBCKRVQPfHgg34SsYZUOPZY2lM\",\r\n    extra_keys_may_be_added_here: \"do not compare clientDataJSON against a template. See https://goo.gl/yabPex\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>结构一目了然。在这里，我们需要验证三项内容：</p>\n<ul>\n<li>\n<code>challenge</code> 和之前发送的一致</li>\n<li>\n<code>origin</code> 为创建凭证的页面的源（协议+主机名+端口号，并非 URL）</li>\n<li>\n<code>type</code> 为 \"webauthn.create\"</li>\n</ul>\n<p>同时可以注意到有一个奇怪的 <code>extra_keys_may_be_added_here</code>。这其实是 Google 在 Chrome 中搞的一点小把戏，有一定概率会出现，提醒我们需要将 JSON 解析后再验证键值以防额外插入的键值影响验证。具体信息你可以访问那个 URL 看一看。</p>\n<p>对于 Firefox，我们会多得到两项 <code>clientExtensions</code> 和 <code>hashAlgorithm</code> ，分别指明了客户端扩展数据和签名算法。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"3-4\">{\r\n    challenge: \"dg6ost6ujhAA0g6WqLe-SOOH-tbhvjW9Sp90aPKlLJI\",\r\n    clientExtensions: {},\r\n    hashAlgorithm: \"SHA-256\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>由于本文不考虑扩展数据，因此我们可以不考虑 <code>clientExtensions</code>。同时由于目前规范中指定的签名算法只有 SHA-256 一种，因此现阶段我们也可以简单地忽略 <code>hashAlgorithm</code>。</p>\n<p><code>clientDataJSON</code> 很简单地就处理完了。接下来我们要来看看 <code>attestationObject</code>。先来看看 <code>attestationObject</code> 的结构图示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\" alt=\"attestationObject 的结构\" width=\"1056\" height=\"532\" class=\"aligncenter size-full wp-image-2245\"></a>\n<p><code>attestationObject</code> 是 CBOR 编码后再被 Base64 编码的，因此我们需要额外对其进行 CBOR 解码。</p>\n<blockquote><p>CBOR (Concise Binary Object Representation, 简明二进制对象表示) 是一种多应用于物联网领域的编码方式，你可以将它看作体积更小、更方便物联网传输的二进制 JSON。大部分语言都可以找到对应的 CBOR 解码库。</p></blockquote>\n<p>我们当然不会手解 CBOR，直接来看看解开之后的样子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"none\",\r\n    attStmt: {},\r\n    authData: [211, 217, 43, 24, 199, ..., 97, 238, 166, 67, 107]\r\n}</pre>\n<p>这些键值的含义如下：</p>\n<ul>\n<li>\n<code>fmt</code>：标明证明的格式。WebAuthn 预定义了几种格式，分别为：\n<ul>\n<li>\n<code>none</code>：没有证明</li>\n<li>\n<code>packed</code>：为 WebAuthn 优化的证明格式</li>\n<li>\n<code>android-safetynet</code>：Android 使用的格式</li>\n<li>\n<code>android-key</code>：又是 Android 使用的格式</li>\n<li>\n<code>fido-u2f</code>：FIDO U2F 认证器使用的格式</li>\n<li>\n<code>tpm</code>：TPM 可信平台模块使用的格式</li>\n</ul>\n</li>\n<li>\n<code>attStmt</code>：证明对象，具体格式根据 <code>fmt</code> 的不同会有所不同</li>\n<li>\n<code>authData</code>：包含公钥、签名计数等来自认证器的数据</li>\n</ul>\n<p>诶，例子里的 <code>attStmt</code> 怎么是空的？还记得之前说的吗？大部分情况下，<strong>如果依赖方不要求证明，那么认证器不会签名挑战</strong>，于是 <code>fmt</code> 会变为 \"none\"，<code>attstmt</code> 会为空。如果不是高安全要求，我们可以只对这一种情况做支持。</p>\n<blockquote><p>注意，部分情况下 Firefox 会在不要求证明（即 <code>attestation</code> 为 \"none\"）时会返回 <code>fmt</code> 为 \"packed\" 的证明。<strong>这是符合规范的。</strong>此时认证器会进行自证明，你可以视情况进行处理。具体可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>对于非 \"none\" 的 <code>fmt</code> 我们稍后再谈，现在我们先来看看 <code>authData</code>。来复习一下 <code>authData</code> 的结构：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\" alt=\"authData 的结构\" width=\"1056\" height=\"384\" class=\"aligncenter size-full wp-image-2240\"></a>\n<p>对于它的解码比较简单粗暴，我们要做的就是根据图示将它切开，然后适当地转换类型。其中各部分的含义如下：</p>\n<ul>\n<li>\n<code>rpIdHash</code>：如其名，SHA-256 的 <code>rpId</code>，长度 32 字节</li>\n<li>\n<code>flags</code>：标识认证状态，长度 1 字节。其中 8 位分别为：\n<ul>\n<li>\n<code>ED</code>：是否有扩展数据</li>\n<li>\n<code>AT</code>：是否包含 <code>attestedCredentialData</code>。通常注册认证器时会包含 <code>attestedCredentialData</code>，而验证时不包含</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>\n<code>UV</code>：用户是否已验证</li>\n<li>保留位</li>\n<li>\n<code>UP</code>：用户是否在场</li>\n</ul>\n</li>\n<li>\n<code>signCount</code>：签名计数，长度 4 字节</li>\n<li>\n<code>attestedCredentialData</code>：包含公钥等凭据数据，变长。其结构如下：\n<ul>\n<li>\n<code>aaguid</code>：认证器的 AAGUID (Authenticator Attestation GUID)，对于同一型号的认证器，它们的 AAGUID 是相同的</li>\n<li>\n<code>credentialIdLength</code>：标识 <code>credentialId</code> 的长度，长度 2 字节</li>\n<li>\n<code>credentialId</code>：凭证 ID，和 <code>rawId</code> 一致，长度由 <code>credentialIdLength</code> 定义</li>\n<li>\n<code>credentialPublicKey</code>：CBOR 编码的 COSE 格式的凭证公钥，变长</li>\n</ul>\n</li>\n<li>\n<code>extensions</code>：扩展数据，变长，本文不讨论</li>\n</ul>\n<blockquote><p>出于隐私考虑，如果不要求证明，认证器会以 0 填充 AAGUID。</p></blockquote>\n<p>如果你的后端在使用 Node.js，这里有个工具函数可以帮你完成这一步（不考虑 <code>extensions</code>）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function parseAuthData(buffer){\r\n    let rpIdHash = buffer.slice(0, 32);\r\n    buffer = buffer.slice(32);\r\n  \r\n    let flagsBuf = buffer.slice(0, 1);\r\n    buffer = buffer.slice(1);\r\n\r\n    let flagsInt = flagsBuf[0];\r\n    let flags = {\r\n        up: !!(flagsInt &amp; 0x01),\r\n        uv: !!(flagsInt &amp; 0x04),\r\n        at: !!(flagsInt &amp; 0x40),\r\n        ed: !!(flagsInt &amp; 0x80),\r\n        flagsInt\r\n    }\r\n\r\n    let counterBuf = buffer.slice(0, 4);\r\n    buffer = buffer.slice(4);\r\n  \r\n    let counter = counterBuf.readUInt32BE(0);\r\n\r\n    let aaguid = undefined;\r\n    let credID = undefined;\r\n    let COSEPublicKey = undefined;\r\n\r\n    if(flags.at) {\r\n        aaguid = buffer.slice(0, 16);\r\n        buffer = buffer.slice(16);\r\n\r\n        let credIDLenBuf = buffer.slice(0, 2);\r\n        buffer = buffer.slice(2);\r\n\r\n        let credIDLen = credIDLenBuf.readUInt16BE(0);\r\n        credID = buffer.slice(0, credIDLen);\r\n\r\n        buffer = buffer.slice(credIDLen);\r\n        COSEPublicKey = buffer;\r\n    }\r\n\r\n    return {rpIdHash, flagsBuf, flags, counter, counterBuf, aaguid, credID, COSEPublicKey}\r\n}</pre>\n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>解开后，依赖方至少需要做四件事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>存储签名计数</li>\n<li>存储公钥</li>\n</ol>\n<blockquote><p>签名计数不一定从 0 开始。</p></blockquote>\n<p>对于公钥，也就是 <code>credentialPublicKey</code>，我们需要多一次 CBOR 解码，然后就可以得到类似这样的公钥：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    kty: \"EC\",\r\n    alg: \"ECDSA_w_SHA256\",\r\n    crv: \"P-256\",\r\n    x: \"ZGQALNfqo0L7HFYQHFHCS/X5db49z0ePnuQEs3w3X8w=\",\r\n    y: \"6qYxhnjYuez/Q8N6vX7nIIGfxFWdZ25NzQfZYuYOalA=\"\r\n}</pre>\n<p>然后可以选择适当的方法将其存储起来，之后的步骤本文就不再赘述了。现在，将目光拉回来，让我们看看包含证明的 <code>attestationObject</code> 是怎么样的。我们来看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"packed\",\r\n    attStmt: {\r\n        alg: -7,\r\n        sig: [48, 70, 2, 33, 0, ..., 132, 78, 46, 100, 21],\r\n        x5c: [\r\n            [48, 130, 2, 189, 48, 130, 1, 165, 160, 3, ..., 177, 48, 125, 191, 145, 24, 225, 169, 41, 248]\r\n        ]\r\n    },\r\n    authData: [211, 217, 43, 24, 199, ..., 158, 54, 87, 126, 54]\r\n}</pre>\n<p>这里有一个使用 \"packed\" 格式的证明。此时，<code>attStmt</code> 中包含三个值：</p>\n<ul>\n<li>\n<code>alg</code>：签名算法</li>\n<li>\n<code>sig</code>：签名值</li>\n<li>\n<code>x5c</code>：X.509 编码的证书链</li>\n</ul>\n<p>我们不会在这一节中详述对签名的验证。要了解更多信息，你可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。现在，让我们来看看如何处理验证过程中认证器发回的数据。我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"hmqdxPLit9...BWeVxZqdvU\",\r\n    type: \"public-key\",\r\n    rawId: \"hmqdxPLit9V...BWeVxZqdvU=\",\r\n    response: {\r\n        authenticatorData: \"09krGMcWTf...UFAAAABA==\",\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...XRobi5nZXQifQ==\",\r\n        signature: \"UsXZV3pvT3np8btj6V0g...WBkaqyt88DrD40qh+A==\",\r\n        userHandle: \"MmYxNWYzZjQyZjM...Tg2ZDY4NzhlNw==\"\r\n    }\r\n}</pre>\n<p><code>id</code>, <code>rawId</code> 和 <code>type</code> 和之前一样，这里就不再赘述了。让我们来看看 <code>response</code>。首先是 <code>clientDataJSON</code>，和之前的解法一样，要验证的内容也一样，只是 <code>type</code> 从 \"webauthn.create\" 变成了 \"webauthn.get\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"bnkd2CmrEuvKnAFXs2QlC3SKlg4XFvGtP4HJL1yEWyU\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.get\"\r\n}</pre>\n<p>然后是 <code>userHandle</code>。前面讲过，这是认证器在创建凭证时的用户 ID。如果用户在使用 U2F 认证器，很可能这一项为空，所以大部分情况下我们不关心这一项。</p>\n<p>接着来看 <code>authenticatorData</code>。这其实就是之前的 <code>attestedCredentialData</code>，只是这次不包含公钥。以相同的方式切开数据，我们应该可以得到 <code>rpIdHash</code>, <code>flags</code>和 <code>signCount</code> 三项。此时，依赖方至少需要做这三样事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>验证签名计数大于之前存储的计数，并更新存储的计数</li>\n</ol>\n<blockquote><p>如果签名计数比之前的小，那么这个认证器很可能是伪造的，应该中止验证并返回验证失败。同时，签名计数不一定每次按 1 递增，通常只要计数比此前的大就认为计数检查通过。</p></blockquote>\n<p>最后，我们来看 <code>signature</code>，也就是签名。不过这个签名不是简单的对挑战的签名，具体算法如图所示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\" alt=\"签名过程\" width=\"1034\" height=\"587\" class=\"aligncenter size-full wp-image-2231\"></a>\n<p>计算签名时，认证器会将 <code>authenticatorData</code> 与 <code>clientDataHash</code>（也就是 <code>clientDataJSON</code> 的 SHA-256 Hash）拼接起来，并使用对应的私钥签名。依赖方应该使用对应的公钥将其解密，并验证内容是否是 <code>authenticatorData</code> 与 <code>clientDataHash</code> 的拼接。这部分的计算不在本文的讨论范围内。</p>\n<p>最后，如果全部验证通过，返回验证成功。<span></span></p>\n<h2>验证认证器</h2>\n<p>WebAuthn 已经很安全了，但有的时候我们还要让它更安全一点。比如，如果用户在使用伪造的或是自制的认证器，认证器的安全性就得不到保证。此时，依赖方就需要验证认证器是否是可信的认证器。</p>\n<blockquote><p>这一过程仅发生在注册认证器时。此时，如果认证器验证通过，就可以存储公钥，后续步骤和之前描述的一致。</p></blockquote>\n<blockquote><p>再次说明，如果不是对安全性有极高的要求，向认证器索取证明以验证认证器是否可信是没有必要的。此外，验证认证器需要依赖方自行维护可信认证器列表，大大增加了维护的复杂性。</p></blockquote>\n<p>在调用 <code>navigator.credentials.create()</code> 时，我们可以将 <code>attestation</code> 设置为非 \"none\" 来向认证器索取证明。除无证明外，WebAuthn 定义了四种证明方式：</p>\n<ul>\n<li>Basic Attestation (Basic) ：基础的证明方式，认证器会使用认证器私钥签名</li>\n<li>Self Attestation (Self) ：自证明，认证器会使用凭证私钥签名</li>\n<li>Attestation CA (AttCA) ：认证器会使用多个证明私钥之一签名</li>\n<li>Elliptic Curve based Direct Anonymous Attestation (ECDAA) ：通过 <a href=\"https://en.wikipedia.org/wiki/Direct_Anonymous_Attestation\">DAA</a> 实现的匿名证明</li>\n</ul>\n<blockquote><p>和验证过程一样，这里签名的目标是 <code>authenticatorData</code> 和 <code>clientDataHash</code> 的连接。</p></blockquote>\n<p>还记得 <code>create()</code> 时 <code>attestation</code> 可选的三个值吗？这个值会决定认证器最终使用哪种方式进行证明。复习一下：</p>\n<ul>\n<li>\n<code>none</code>：大部分情况下认证器会选择不进行证明，部分认证器会进行自证明。此时 AAGUID 会被 0 填充</li>\n<li>\n<code>indirect</code>：认证器会试图通过替换 AAGUID 和选择合适的证明方式来进行匿名证明，具体方式由认证器选择</li>\n<li>\n<code>direct</code>：认证器会提供最直接的证明信息</li>\n</ul>\n<p>注意，大部分情况下，当认证器需要向依赖方证明自己可信时需要提供认证器公钥，<strong>这会触发浏览器提示，只有用户同意后认证器才会进行证明，否则认证器将不提供证明。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\" alt=\"浏览器提示\" width=\"446\" height=\"283\" class=\"aligncenter size-full wp-image-2217\"></a>\n<blockquote><p>为什么浏览器会说“安全密钥的品牌和型号”？事实上，为了避免用户通过认证器证书被跨依赖方追踪，FIDO 要求使用相同认证器证书的认证器的数量不能少于 100,000。于是大部分认证器厂商会选择<strong>让同一型号的认证器共用同一份证书。</strong>因此，浏览器的会询问用户是否同意“查看安全密钥的品牌和型号”。</p></blockquote>\n<blockquote><p>Android Safety Net 不会向用户询问是否同意，而是会静默进行证明。</p></blockquote>\n<p>当证明不为空时，依赖方收到数据后根据 <code>attestationObject.fmt</code> 的不同，需要选择不同的验证方式来验证认证器的可信情况。出于篇幅原因，这里我们不会讨论每一种 <code>fmt</code> 的验证方式，更多信息你可以查阅 <a href=\"https://www.w3.org/TR/webauthn/#defined-attestation-formats\">W3C 文档</a>。</p>\n<p>当 <code>fmt</code> 为 <code>packed</code> 时，<code>attestationObject.attStmt</code> 可能会有三种格式：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">// 自证明\r\n{\r\n    alg, // 算法\r\n    sig // 签名\r\n}\r\n// 基础或证明 CA 证明\r\n{\r\n    alg,\r\n    sig,\r\n    x5c // X.509 证书链\r\n}\r\n// 椭圆曲线证明\r\n{\r\n    alg,\r\n    sig,\r\n    ecdaaKeyId // ECDAA-Issuer 公钥标识符\r\n}</pre>\n<p>此时，依赖方需要检查证书符合预期格式并检查证书是否在可信链上。首先，如果证明中既没有 <code>ecdaaKeyId</code> 也没有 <code>x5c</code>，就说明这个证明使用的是自证明，只需使用认证器提供的公钥验证即可；如果有 <code>x5c</code>，那么就需要验证 <code>x5c</code> 中的证书是否在可信链上。将 <code>x5c</code> 中的每个证书以 Base64 编码，按 64 个字符切开，并在头尾加上 <code>-----BEGIN CERTIFICATE-----</code> 和 <code>-----END CERTIFICATE-----</code>就能得到一个证书字符串了。之后，依赖方需要验证证书是否可信。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function base64ToPem(b64cert){\r\n    let pemcert = '';\r\n    for(let i = 0; i \n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>至于 <code>ecdaaKeyId</code>，由于目前应用较少，处理方法可能需要你另寻资料了。检查证书的具体步骤已经超出了本文的范围，具体可以查阅<a href=\"https://medium.com/@herrjemand/verifying-fido2-packed-attestation-a067a9b2facd\">这篇文章</a>（英文）。</p>\n<blockquote><p>你可以在 <a href=\"https://fidoalliance.org/metadata/\">FIDO Metadata Service</a> 找到各大厂商认证器的可信证书链。</p></blockquote>\n<p>当在 Android 上调起 WebAuthn 时，大部分情况下 <code>fmt</code> 将会为 <code>safety-net</code>。此时 <code>attestationObject.attStmt</code> 的结构会是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    ver: \"200616037\",\r\n    response: {\r\n        type: \"Buffer\",\r\n        data: [101, 121, 74, 104, 98, ..., 115, 104, 104, 82, 65]\r\n    }\r\n}</pre>\n<p>此时，<code>clientDataJSON</code> 中还会出现 <code>androidPackageName</code> 键，值是调起 WebAuthn 验证的应用的包名，如 Chrome 就是 \"com.android.chrome\"。</p>\n<p>在这个证明中，<code>data</code> 其实是一个 JWT 字符串，我们可以将它编码为字符串并将其按照 JWT 进行解码（别忘了验证 JWT 签名）。最终我们会得到一个类似这样的 Payload：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    nonce: \"0QAurN4F9wik6GEkblDJhGuf4kuaqZn5zaaxlvD1hlA=\",\r\n    timestampMs: 1584950686460,\r\n    apkPackageName: \"com.google.android.gms\",\r\n    apkDigestSha256: \"2BQHno+bmWWwdLUYylS8HLt5ESJzci3nt2uui71ojyE=\",\r\n    ctsProfileMatch: true,\r\n    apkCertificateDigestSha256: [\r\n        \"8P1sW0EPicslw7UzRsiXL64w+O50Ed+RBICtay2g24M=\"\r\n    ],\r\n    basicIntegrity: true,\r\n    evaluationType: \"BASIC\"\r\n}</pre>\n<p>其中包含了有关设备状态的一些信息。比如说，如果 <code>ctsProfileMatch</code> 为 <code>false</code>，那么该设备很有可能被 root 了。对于高安全要求的场景，我们可以视情况进行验证。</p>\n<p>同时我们可以在 JWT Header 中验证证明的有效性。我们应该能取得这样的 Header：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    alg: \"RS256\",\r\n    x5c: [\r\n        \"MIIFkzCCBHugAwIBAgIR...uvlyjOwAzXuMu7M+PWRc\",\r\n        \"MIIESjCCAzKgAwIBAgIN...UK4v4ZUN80atnZz1yg==\"\r\n    ]\r\n}</pre>\n<p>这里的结构就和上方的 <code>x5c</code> 验证类似了。具体步骤可以参考<a href=\"https://medium.com/@herrjemand/verifying-fido2-safetynet-attestation-bd261ce1978d\">这篇文章</a>（英文）。</p>\n<p>其他所有格式的验证方式也都可以在<a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">这篇文章</a>（英文）中找到。<span></span></p>\n<h2>无用户名登录</h2>\n<p>认证器已经代替了密码，可是这还不够！在进行第一因素认证（即使用 WebAuthn 登录）时，我们还是需要输入用户名，然后才能进行身份认证。懒惰是第一生产力，我们能不能不输入用户名就进行身份认证呢？实际上，大部分认证器都允许我们无用户名登录。<strong>而这一特性的核心就是 Resident Key 客户端密钥驻留。</strong></p>\n<p>你可以思考一下，为什么普通的 WebAuthn 为什么不能实现无用户名登录？事实上，大部分认证器为了实现无限对公私钥，会将私钥通过 Key Warp 等技术加密后包含在凭证 ID 中发送给依赖方，这样认证器本身就不用存储任何信息。不过，这就导致需要身份认证时，依赖方必须通过用户名找到对应的凭证 ID，将其发送给认证器以供其算出私钥。</p>\n<blockquote><p>Yubikey 实现了一个基于 HMAC 的算法，认证器可以在私钥不离开认证器的前提下（常规的 Key Warp 算法中实际上私钥离开了认证器）通过一些输入和凭证 ID 重新计算私钥，你可以阅读<a href=\"https://www.yubico.com/blog/yubicos-u2f-key-wrapping/\">这篇文章</a>了解更多。</p></blockquote>\n<blockquote><p>客户端通过凭证 ID 查找对应认证器的算法根据系统的不同是不同的。通常凭证 ID 中会包含认证器信息，因此系统可以通过凭证 ID 找到对应的认证器。</p></blockquote>\n<p>要避免输入用户名，我们可以要求认证器将私钥在自己的内存中也存储一份。这样，依赖方无需提供凭证 ID，认证器就可以通过依赖方 ID 找到所需的私钥并签名公钥。以下是具体流程：</p>\n<p>注册时：</p>\n<ol>\n<li>依赖方请求新建凭证，同时要求启用客户端密钥</li>\n<li>认证器生成一对公私钥，并将私钥存储在永久内存中且与依赖方 ID 及用户 ID 绑定，随后将公钥发送给依赖方以供存储</li>\n<li>依赖方将用户 ID 即公钥与用户绑定</li>\n</ol><p>验证时：</p>\n<ol>\n<li>依赖方请求验证，但不必提供除依赖方 ID 以外的更多信息</li>\n<li>用户选择认证器</li>\n<li>认证器根据依赖方 ID 找到对应私钥</li>\n<li>如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录</li>\n<li>确定私钥后，认证器签名挑战并将其返回，同时返回用户 ID</li>\n<li>依赖方通过用户 ID 找到对应用户并用对应公钥检查签名，正确则允许对应用户登录</li>\n</ol><blockquote><p>可以看到，这个特性同时要求认证器存储用户 ID，即上面提到过的 <code>userHandle</code>。依赖方需要根据此信息找到对应用户，因此不支持 <code>userHandle</code> 的 U2F 认证器无法进行无用户名登录。</p></blockquote>\n<blockquote><p>如之前所说，<strong>认证器能永久存储的私钥数量是有限的</strong>，因此只应在真正需要无用户名登录的时候启用此特性。</p></blockquote>\n<blockquote><p>目前暂时没有办法检测认证器是否支持客户端密钥驻留，因此在无用户名验证失败时应 fallback 至常规的 WebAuthn 验证，即向用户询问用户名。</p></blockquote>\n<p>现在让我们来看看如何实现这一特性吧。首先，调用 <code>navigator.credentials.create()</code> 时我们需要注意两个参数：<code>requireResidentKey</code> 必须为 <code>true</code>，<code>userVerification</code> 必须为 \"required\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"5-6\">navigator.credentials.create({\r\n    publicKey: {\r\n        ...\r\n        authenticatorSelection: {\r\n            requireResidentKey: true,\r\n            userVerification: \"required\"\r\n            ...\r\n        },\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Windows Hello <strong>似乎</strong>会存储所有已注册的凭据，因此无论是否指定 <code>requireResidentKey</code>，你都可以通过 Windows Hello 进行无用户名登录。</p></blockquote>\n<p>随后，浏览器会询问用户是否允许认证器存储私钥。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\" alt=\"浏览器提示\" width=\"445\" height=\"285\" class=\"aligncenter size-full wp-image-2208\"></a>\n<p>如果用户同意，认证器会存储私钥，并和普通的 WebAuthn 一样返回信息。不过，依赖方收到数据之后，只需将公钥、用户 ID 与用户关联起来，而不必再将凭证 ID 与用户关联起来。至此注册完成。</p>\n<p>之后，在用户请求登录时，无需再向依赖方提供用户名。同时在传入 <code>navigator.credentials.get()</code> 的参数中也有两个需要注意：<code>userVerification</code> 必须为 \"required\"，同时 <code>allowCredentials</code> 必须为空。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"4-5\">navigator.credentials.get({\r\n    publicKey: {\r\n        ...\r\n        userVerification: \"required\",\r\n        allowCredentials: [],\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Android 暂不支持无用户名验证，空的 <code>allowCredentials</code> 会导致浏览器返回 <code>NotSupportedError</code> 错误。</p></blockquote>\n<p>此时，认证器会根据依赖方 ID 找到对应的私钥。如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录。用户选择后，认证器就会使用对应的私钥签名挑战并将其返回。此时，<code>userHandle</code> 一定不为空。</p>\n<p>依赖方收到数据后，需要将 <code>userHandle</code> 作为用户 ID 找到对应的用户，并使用对应的公钥验证签名。如果验证成功，则认为对应的用户身份认证成功，依赖方可以允许其登录。至此验证结束。</p>\n<blockquote><p>有的时候你可能会需要清除认证器中的密钥。绝大多数认证器都提供了对应的软件以供清除存储的密钥，但大部分情况下这会重置整个认证器，这意味着相关认证器此前的所有凭证均会失效。因此建议不要将日常使用的认证器作为开发测试用的认证器。</p></blockquote>\n<h2>从 U2F 认证迁移</h2>\n<p>如果你的服务此前提供了 U2F 第二因素认证，你可能会希望在将依赖方从 U2F 升级到 WebAuthn 时用户此前注册的 U2F 认证器仍然可用而无需重新注册。由于 WebAuthn 向后兼容 U2F 设备，用户是可以继续使用原有的 U2F 认证器的。不过，由于 WebAuthn 的依赖方 ID 与 U2F 的 <code>appid</code> 并不一定相同，你需要将原有的 U2F <code>appid</code> 随 WebAuthn 流程一起传递给认证器，认证器才能使用正确的私钥进行响应。</p>\n<p>要实现这一点，我们只需要在注册及认证仪式中使用 WebAuthn 的 <code>appid</code> 扩展。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    appid: \"https://example.com\" //U2F appid\r\n}</pre>\n<p>此时认证器便可以得到正确的私钥，之后的流程与正常情况一致；依赖方除了正常的 WebAuthn 流程外，不需要再做任何其它操作。</p>\n<h2>拓展阅读</h2>\n<p>我们的 WebAuthn 之旅到这里就真的结束了。不过，你仍然可以自行探究，了解更多。<strong>本文只是一个粗浅的使用指南</strong>，而被称为“Web 身份认证的未来”的 WebAuthn 的深层还要很多细节值得我们挖掘学习，不过本文不会再继续讨论了。</p>\n<p>如果你想了解更多关于 WebAuthn 的信息，最好的方法是直接阅读 <a href=\"https://www.w3.org/TR/webauthn\">W3C 规范</a>。此外，Yubico 也提供了不错的 <a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn 文档</a>。</p>\n<p>要了解更多认证器存储凭证的信息，你可以阅读<a href=\"https://duo.com/labs/tech-notes/how-security-keys-store-credentials\">这篇文章</a>（英文）。</p>\n<p>如果你想了解更多 Android Safety Net 是怎样运作的，可以观看<a href=\"https://youtu.be/8lv_9mydrjg\">这个视频</a>，并通过 <a href=\"https://developer.android.com/training/safetynet/attestation\">Google 的文档</a>了解 Android Safety Net 的更多信息。</p>\n<p>如果你想方便地调试 WebAuthn，<a href=\"https://webauthn.me/\">webauthn.me</a> 提供了一个非常直观方便的<a href=\"https://webauthn.me/debugger\">调试器</a>。</p>\n<h1>参考资料</h1>\n<p><a href=\"https://www.w3.org/TR/webauthn\">WebAuthn Level 1 规范 - W3C</a><br><a href=\"https://github.com/w3c/webauthn\">WebAuthn Level 2 草案 - W3C</a><br><a href=\"https://blog.techbridge.cc/2019/08/17/webauthn-intro/\">一起来了解Web Authentication - TechBridge 技术共笔部落格</a><br><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\">Introduction to WebAuthn API - Medium</a><br><a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">WebAuthn/FIDO2: Verifying responses - Medium</a><br><a href=\"https://obeta.me/posts/2019-03-01/WebAuthn%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8\">WebAuthn介绍与使用 - obeta</a><br><a href=\"https://webauthn.io/\">webauthn.io</a><br><a href=\"https://webauthn.guide/\">webauthn.guide</a><br><a href=\"https://webauthn.me/\">webauthn.me</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion\">Attestation and Assertion - MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Authentication_API\">Web Authentication API - MDN</a>（顺便翻译了一半）<br><a href=\"https://fidoalliance.org/fido-technotes-the-truth-about-attestation/\">FIDO TechNotes: The Truth about Attestation - FIDO Alliance</a><br><a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn Developer Guide - Yubico</a><br><a href=\"https://en.wikipedia.org/wiki/WebAuthn\">WebAuthn - Wikipedia</a><br><a href=\"https://techcommunity.microsoft.com/t5/identity-standards-blog/all-about-fido2-ctap2-and-webauthn/ba-p/288910\">All about FIDO2, CTAP2 and WebAuthn - Microsoft Tech Community</a><br><a href=\"https://webauthn-doc.spomky-labs.com/\">Webauthn Framework</a><br><a href=\"https://zhuanlan.zhihu.com/p/25279015\">如何开发支持 FIDO U2F 登录的网站 - 知乎专栏</a><br></p></pre>\n","link":"https://flyhigher.top/develop/2160.html"},{"title":"NLP 找门：用朴素贝叶斯进行文本分类","date":"2020-01-29 11:39:58","description":"\n<blockquote>\n<p>有一天，神收到了一封垃圾邮件，于是世界上就有了朴素贝叶斯算法。</p>\n<footer>——我瞎编的</footer>\n</blockquote>\n<p>为什么这篇文章的标题是 NLP 找门呢？因为如果你看完了这篇文章，你就可以<strong>准备入门</strong>自然语言处理 (<strong>N</strong>atural <strong>L</strong>anguage <strong>P</strong>rocessing) 了。我会把这篇文章当作一篇彻彻底底的 NLP 入门文章来写，尽量避免“专业高端”词汇和“全是奇怪符号”的式子，这样<strong>只要你有高中数学基础</strong>，就能毫无压力地看完这篇文章，学会使用朴素贝叶斯分类算法分类文本。</p>\n<p>让我们开始吧。</p>\n<h1>所以，啥是朴素贝叶斯？</h1>\n<p>简单来说，朴素贝叶斯 (Naïve Bayes) <strong>是一个简单但高效的分类算法</strong>，在进行不复杂的文本分类时高效且拥有不低的准确度，判断垃圾邮件就是用朴素贝叶斯进行文本分类的一个经典例子。当然朴素贝叶斯分类不仅能用在 NLP 中，在许多分类问题中朴素贝叶斯也有非常好的效果，但我们今天只关注它在 NLP 中的应用。</p>\n<p>要了解朴素贝叶斯，我们要先来了解一下贝叶斯定理。</p>\n<blockquote>\n<p>每增加一个数学公式都会使读者减半。</p>\n<footer>——霍金</footer>\n</blockquote>\n<p>那么，就让我们先来看看贝叶斯定理的公式吧（笑</p>\n<p>$$P(A|B) = \\frac{P(AB)}{P(B)} = \\frac{P(B|A)P(A)}{P(B)}$$</p>\n<p>其实还是很简单的，运用高中的条件概率知识就能理解。本质上，贝叶斯定理给出了一种方法，使得我们可以在 \\(P(A|B)\\) 和 \\(P(B|A)\\) 之间互相转换，因为通常情况下它们是不一样的。</p>\n<p>要更好地理解，请考虑这样一个例子：</p>\n<blockquote><p>假设有一个学校图书馆，图书管理员正为找不到某本书而发愁。已知老师有 70% 的意愿借走这本书，而是学生的意愿是 30%，这个学校的师生比例是 1:10，那么借走这本书的人是老师的概率有多大？</p></blockquote>\n<p>设学校总人数为 \\(T\\)，我们可以很容易地写出这样的一个式子：</p>\n<p>$$\\begin{align} P &amp; = \\frac{T\\cdot\\frac{1}{11}\\cdot 70\\%}{T\\cdot\\frac{1}{11}\\cdot 70\\%+T\\cdot\\frac{10}{11}\\cdot 30\\%} \\\\ &amp; = \\frac{70\\%}{70\\%+10\\times30\\%} \\\\ &amp; = \\frac{7}{37} \\end{align}$$</p>\n<p>这就是贝叶斯定理了！等等，你可能会挠挠头，这哪里是贝叶斯了？别急，如果我们把最上面的式子换个字母的话...</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>在这里，\\(H\\) 指 Hypothesis，即假设，而 \\(E\\) 指 Evidence，即证据。这样，这个式子就很好理解了，在我们上面的例子里，借走书是证据，那么 \\(P(E)\\) 就是某个人选择借走这本书的概率；这个人是老师是假设，那么这个人是老师的概率是 \\(P(H)\\)。<strong>注意这里的概率指在学校中抽一个人是老师的概率，并不是“在借走书的前提下”这个人是老师的概率</strong>，而“在借走书的前提下”这个人是老师的概率应该是 \\(P(H|E)\\)，也正是我们要求的概率。同样地，而“这个人是老师”的前提下借走书的概率就是 \\(P(E|H)\\) 了。</p>\n<p>那么再来看看上面我们凭小学知识就列出的计算式，如果把里面的具体数据换成概率来表示的话，这个式子就会变成...</p>\n<p>$$P(H|E) = \\frac{T\\cdot P(E|H)P(H)}{T\\cdot P(E|H)P(H) + T\\cdot P(E|\\neg H)P(\\neg H)}$$</p>\n<p>好吧，这里解释一下，\\(\\neg\\) 符号表示“非”，所以 \\(P(E|\\neg H)\\) 表示在“这个人不是老师”的前提下借走书的概率。而 \\(T\\cdot P(E|H)P(H)\\) + \\(T\\cdot P(E|\\neg H)P(\\neg H)\\)，即“可能借走书的老师的数量 + 可能借走书的学生的数量”，就是“可能借走书的人的数量”了，也就是 \\(T\\cdot P(E)\\)。上下消去 \\(T\\)，我们就能得到上面的式子了。</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>这就是贝叶斯了定理。如果你还是不太清楚，可以去看看 3Blue1Brown 的<a href=\"https://www.bilibili.com/video/av84799361\">这个视频</a>，图形化的讲解会清晰很多。</p>\n<p>这里我要提一下这个式子里各部分的专有名称了（“专业高端”词汇警告），你可以不记住，直接看后面。</p>\n<ul>\n<li>\\(P(H|E)\\) 叫做 \\(H\\) 的<strong>后验概率</strong>，反之亦然</li>\n<li>\\(P(H)\\) 叫做 \\(H\\) 的<strong>先验概率</strong>，反之亦然</li>\n<li>特别地，我们把 \\(P(E|H)\\) 称作<strong>“似然值”</strong>，即 likelihood</li>\n</ul>\n<p>那什么是朴素贝叶斯呢？按上面所说的，朴素贝叶斯是一种分类算法。简单来说，朴素贝叶斯将一个对象的各个特征考虑为互相独立，然后根据这些特征的概率的乘积来判断对象所属的分类。基本原理如下：</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)} \\propto P(E|H)P(H) = P(H)\\prod_{i}P(W_i|H)$$</p>\n<p>在这里，\\(W_i\\) 指某一对象的第 \\(i\\) 个特征，对于文本分类来说，这就是一段文本中的某个单词。</p>\n<p>朴素贝叶斯之所以“朴素”，是因为它要求<strong>各个特征间是独立的</strong>，在文本分类中也就是各个单词之间互不干扰。虽然思路简单的代价是适用范围变窄，不过由于这样的简化在很多情况下已经足够了，因此实际上朴素贝叶斯的应用范围非常广。<del>你看朴素贝叶斯 <strong>N</strong>aïve <strong>B</strong>ayes 的缩写都是 NB 了，能不厉害吗（逃</del></p>\n<h1>那么，咋分类啊</h1>\n<p>看来你这下完全听懂了呢（笑），是时候看看如何在 NLP 中应用朴素贝叶斯了。和上面一样，我们用一个具体的例子来说明。我们的目标是让电脑学会分类美国共和党和民主党的演讲稿，由于两个党派的演讲风格不同，所以这样的分类在理论上是可行的。</p>\n<div class=\"wp-block-file\">\n<a href=\"https://acdn.flyhigher.top/nlp/material.zip\" download>material.zip</a><a href=\"https://acdn.flyhigher.top/nlp/material.zip\" class=\"wp-block-file__button\" download>下载</a>\n</div>\n<p>上面我们要用到的数据集，你可以下载下来一起动手玩一玩。先说一下数据集的数据结构吧，压缩包里有两个文件，<code>train.txt</code> 将会被当作训练数据集，而 <code>test.txt</code> 则会作为训练结束后的验证数据集。两个文本文件里数据的结构是类似的，就像这样：</p>\n<pre class=\"EnlighterJSRAW\">BLUE WELL I AM SO HONORED AND PERSONALLY UNKNOWNWORD TO BE HERE...\r\nRED THANK YOU . THIS IS QUITE AN INSTITUTION . IT'S GOOD TO BE...</pre>\n<p>每行都是一篇演讲稿，每行的第一个单词指明了这篇演讲稿所属的党派，<code>RED</code> 指共和党，而 <code>BLUE</code> 指民主党。所有单词和符号都已经被转为大写并由空格分隔方便处理。<code>train.txt</code> 有共和党演讲稿和民主党演讲稿各 23 篇，<code>test.txt</code> 有 6 篇共和党演讲稿，12 篇民主党演讲稿。</p>\n<p>明白了？那我们就开始吧。</p>\n<h2>捋捋思路</h2>\n<p>首先，我们需要考虑如何在文本分类中应用朴素贝叶斯。很简单，按朴素贝叶斯的思路，<strong>计算每个词在某一分类下的出现概率，然后将某篇文章的所有词的概率相乘，再乘以该分类的先验概率，就可以得到某篇文章在某一分类下的概率。</strong></p>\n<p>$$P(Class|Article) = P(Class)\\prod_{i}P(Word_i|Class)$$</p>\n<p>各个分类概率都计算完成后，概率最高的那个分类就是这篇文章可能所属的分类。这个思路的核心就是用词决定了文本风格，文本的不同类别用词会有差异，只要能量化这些差异就可以分类文本。在我们的例子中，我们可以从 <code>train.txt</code> 中统计各个词汇的出现情况，然后用 <code>test.txt</code> 中的数据按上面的算法验证我们算法的准确性。</p>\n<p>这个思路很简单也很清晰，但还有一些问题需要解决。<strong>第一，有的时候，我们的测试数据集中可能会出现一个在训练数据集中没有出现过的词语。这个时候，朴素贝叶斯的计算结果会是 0。</strong>如果我们把 0 乘进式子中，那就别想得到正常的结果了。所以，我们还需要对计算某一单词在某一分类中的式子稍加改进。使用拉普拉斯平滑，就可以避免出现概率为 0 的情况。别被名字吓到，拉普拉斯平滑是一种非常简单的平滑方法：在分子上 +1，在分母上加整个取值范围，这样就可以给整个分式加上非常微小的偏移，避免出现 0。</p>\n<p>$$\\begin{align} P(Word_i|Class) &amp; = \\frac{Word_iCountInClass}{AllWordCountInClass} \\\\ &amp; \\approx \\frac{Word_iCountInClass + 1}{AllWordCountInClass + UniqueWordCount} \\end{align}$$</p>\n<p><strong>第二，对于长文本，大部分词语在某一分类中的出现概率是远小于 1 的，加上长文本词汇量大，往往概率相乘的结果会非常小。</strong>受限于计算机处理浮点数的原理，精确处理这么小的数字是很麻烦的。幸好，运用一些简单的数学知识就可以将其转化为更精确的表达，<strong>那就是取对数。</strong></p>\n<p>首先，将概率计算结果取对数并不影响我们的计算结果。因为取对数是一个单调递增的操作，而我们计算概率只是为了排序选择概率最高的分类，因此取对数是不影响我们排序的。而把多项式取对数，等于把多项式的每一项取对数后相加。所以我们有：</p>\n<p>$$\\lg{\\Big(P(Class)\\prod_{i}P(Word_i|Class)\\Big)} = \\lg{P(Class)} + \\sum_i\\lg{P(Word_i|Class)}$$</p>\n<p>大部分情况下，在每一次取对数的时候，要取对数的数字的大小，即 \\(P(Word_i|Class)\\) 尚还在计算机能处理的范围内，<strong>因此我们可以放心地使用取对数的方法</strong>，避免计算机精度不够影响结果。</p>\n<p><strong>第三就是在某些情况下，可能会有部分词语干扰计算结果</strong>，如 and, is 这类的被大量使用的中性词。如果希望得到更好的结果，我们可以维护一个停用词表，在计算时排除停用词即可。或者，我们可以在计算完每个单词的出现数量后，排除数量最多的前 \\(N\\) 个单词，避免这些单词过多地影响计算。</p>\n<h2>写点代码</h2>\n<p>现在我们终于可以开始实战，写点代码了。我会用简单的 Python 来表达思路。好了，理一理思绪，第一步我们要做的，是统计训练数据集中的用词情况。具体来说，根据上面的思考，我们需要统计的有：</p>\n<ul>\n<li>每个单词在各分类中出现的数量</li>\n<li>各分类中的不重复词数量</li>\n</ul>\n<p>用 Python 简单表示如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\"># 读入数据过程略...\r\ndata_raw = \"读入的数据\".split('\\n') # 按行分隔\r\ndata_blue = []\r\ndata_red = []\r\nword_count_blue = {}\r\nword_count_red = {}\r\n\r\nfor line_data in data_raw:\r\n    word_list = line_data.split(\" \") # 分隔单词\r\n    if word_list[0] == \"BLUE\":\r\n        for i in range(1,len(word_list)):\r\n            if not is_excluded(word_list[i]): # 判断是否为停用词\r\n                data_blue.append(word_list[i])\r\n                # 统计单词出现次数\r\n                word_count_blue.setdefault(word_list[i], 0)\r\n                word_count_blue[word_list[i]] += 1\r\n    elif word_list[0] == \"RED\":\r\n        # Class = red 时同理...\r\n\r\n#统计非重复词\r\nunique_words_blue = list(set(data_blue))\r\nunique_words_red = list(set(data_red))</pre>\n<p>训练过程到这里就结束了，计算机已经知道了各政党演讲的用词习惯。很简单吧？接下来我们就要使用测试数据集来测试准确度了。<strong>这里开始就涉及到朴素贝叶斯的计算了</strong>，可能会稍微复杂一点点。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">import math\r\n#读入测试数据过程略...\r\ntest_data_raw = \"读入的数据\".split('\\n') # 按行分隔\r\ntest_data = []\r\n\r\nfor line_data in test_data_raw:\r\n    if line_data[0] == \"BLUE\":\r\n        content_data = line_data.split(\" \").pop(0)\r\n        test_data.append({\"class\": \"blue\", \"content\": content_data})\r\n    elif line_data[0] == 'RED':\r\n        # ...\r\n\r\nfor line_data in test_data:\r\n    posibility_blue = 0\r\n    for word in line_data[\"content\"]:\r\n        # 计算各单词概率，取对数后相加，使用了拉普拉斯平滑\r\n        if word in word_count_blue:\r\n            posibility_blue += math.log((word_count_blue[word]+1)/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n        else:\r\n            posibility_blue += math.log(1/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n    # 最后加上该分类概率的对数\r\n    posibility_blue += math.log(len(data_blue)/(len(data_blue)+len(data_red)))\r\n\r\n    # 计算 Red 同理...</pre>\n<p>计算完成后，我们就得到每篇演讲稿在各分类下的概率了。之后，简单的比较就能得出推断的分类：如果 \\(P(Red|Article)\\) 大于 \\(P(Blue|Article)\\)，那么这篇演讲稿就更可能是共和党的演讲稿，反之则是民主党的演讲稿。</p>\n<p>很好理解吧？那么这么简单的思路，准确性怎么样呢？对于我们的例子，这是我设置了个别停用词后的结果：</p>\n<pre class=\"EnlighterJSRAW\">+-----+-------+--------------+--------------+-------+-------+\r\n|   ID|  Class|        P(Red)|       P(Blue)|  Guess| Status|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|    1|   Blue|  -23204.68377|  -22998.67066|   Blue|      √|\r\n|    2|   Blue|  -16438.44625|  -16137.48257|   Blue|      √|\r\n|    3|   Blue|  -33468.81214|  -32567.61801|   Blue|      √|\r\n|    4|   Blue|    -8606.2193|   -8601.50426|   Blue|      √|\r\n|    5|   Blue|  -12430.97436|  -11935.70662|   Blue|      √|\r\n|    6|   Blue|  -44033.02883|  -43877.55367|   Blue|      √|\r\n|    7|   Blue|   -16947.2851|  -16758.57542|   Blue|      √|\r\n|    8|   Blue|  -26957.26997|  -26889.62444|   Blue|      √|\r\n|    9|   Blue|  -27503.73985|  -27249.21828|   Blue|      √|\r\n|   10|   Blue|   -20528.4457|   -19991.1248|   Blue|      √|\r\n|   11|   Blue|  -20337.96493|  -19860.12831|   Blue|      √|\r\n|   12|   Blue|  -28409.28489|  -28118.98017|   Blue|      √|\r\n|   13|    Red|  -13756.01015|  -14488.11751|    Red|      √|\r\n|   14|    Red|  -17221.22732|  -17710.15936|    Red|      √|\r\n|   15|    Red|  -17397.45136|  -17899.98659|    Red|      √|\r\n|   16|    Red|  -10724.69095|  -11092.77837|    Red|      √|\r\n|   17|    Red|  -10402.40027|  -10859.48681|    Red|      √|\r\n|   18|    Red|   -9371.53792|    -9669.6769|    Red|      √|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|                                      Total: 18/18, 100.0% |\r\n+-----------------------------------------------------------+</pre>\n<p><strong>100% 的准确率哦！</strong>事实上，对于我们的这个例子，就算不设置停用词，我们仍能达到 100% 的分类准确率。朴素贝叶斯分类的确很 NB 呢。</p>\n<h1>更进一步</h1>\n<p>我们的探索到这里就结束了，但如果你有兴趣，完全可以继续探索下去。我们的例子是一个非常简化的例子，在实际情况中，还有很多问题需要解决。比如，对于中文及类似语言，不存在拉丁语系的天然分词结构，而朴素贝叶斯的文本分类是基于单词的，那么<strong>中文的分词就会是个问题；</strong>再比如，对于朴素贝叶斯分类来说，<strong>词语之间的顺序是不影响分类结果的</strong>，但这就会导致“今天心情很好，但昨天不好”和“昨天心情很好，但今天不好”在朴素贝叶斯看来是一样的，要想获得更好的结果，我们必须<strong>考虑词语的顺序。</strong></p>\n<p>这些问题，今天我们就不再深究了，但你可以自己探索。比如，引入思路同样很简洁的马尔科夫链，我们就可以让计算机学会考虑词语间的顺序，不过那就会是另一个话题了。</p>\n","link":"https://flyhigher.top/develop/1989.html"},{"title":"MDx 中增强页面可访问性的细节","date":"2020-01-25 16:45:04","description":"\n<blockquote><p>这篇文章本来是打算发在 <a href=\"https://mdxblog.flyhigher.top/\">MDx Blog</a> 的，不过写到后来发现这篇文章相对来说还是有价值的，于是就将这篇文章转移到了无垠，MDx Blog 则不再发表这篇文章。</p></blockquote>\n<p>从 MDx 开发之初，增强页面的可访问性就被列为了一个重要目标。从 HTML 语义化，到 ARIA 地标，再到 <code>prefers-reduced-motion</code>，随着浏览器对于增强页面可访问性的支持功能越来越多，MDx 也在不断地更新，让更多的人都能毫无困难地浏览、查看由 MDx 渲染的网页。本文会详细说明一些 MDx 中增强页面可访问性的细节，<strong>如果你希望增强自己开发的网页的可访问性，本文可能会对你有所帮助。</strong></p>\n<h1>基础性增强</h1>\n<p>增强可访问性，最重要也是最基础的一点就是 HTML 语义化。通过使用 HTML 5 语义化标签和 ARIA Role 标签，我们可以很方便地<strong>将整个网页在语义上分为几部分，而这将有效地改善屏幕阅读器对网页的分析质量，使视力障碍用户更好地浏览网页。</strong></p>\n<h2>HTML 语义化</h2>\n<p><strong>HTML 语义化属于增强页面可访问性的基础中的基础。</strong>通过使用语义化的 HTML 标签，我们可以方便地为网页中的各部分标记功能而不影响页面样式。随着符合 HTML 5 的现代化网页成为主流，语义化标签已被很大一部分网站所支持，我也不过多赘述了。就举几个常用的“地标性”标签吧：</p>\n<ul>\n<li>\n<code>header</code> 标签标记页眉，默认样式同 <code>div</code>，不要把它和 <code>head</code> 搞混了</li>\n<li>\n<code>main</code> 标签标记页面的主要内容，默认样式同 <code>div</code>\n</li>\n<li>\n<code>article</code> 标签标记文章（在 HTML 5 中它指任何独立或可复用的文本），默认样式同 <code>div</code>\n</li>\n<li>\n<code>footer</code> 标签标记页脚，默认样式同 <code>div</code>\n</li>\n<li>\n<code>nav</code> 标签标记页面导航栏区域，默认样式同 <code>div</code>\n</li>\n<li>\n<code>aside</code> 标签标记侧栏，默认样式同 <code>div</code>\n</li>\n<li>\n<code>section</code> 标签标记“一组内容”，你可以把它看作是划定网页中一块区域的通用标签，默认样式同 <code>div</code>\n</li>\n</ul>\n<p>只要用这些标签替代 <code>div</code> 而不是无脑使用 <code>div</code> 就能提高页面的可访问性。MDx 使用了这些标签来增强页面的可访问性。</p>\n<h2>下一步，ARIA</h2>\n<p>有的时候，出于一些原因，我们没法使用语义化的 HTML 标签，或者没有合适的语义化标签来标记内容，这时候<strong>我们就需要使用 ARIA (Accessible Rich Internet Applications，可访问的富互联网应用)。</strong>ARIA 的基础用法很简单，只要在相应元素上加上 <code>role</code> 属性指定该元素的功能即可。下面是一个简单的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;div role=\"navigation\"&gt;\r\n  &lt;ul&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page A&lt;/a&gt;&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page B&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page C&lt;/a&gt;&lt;/li&gt;\r\n  &lt;/ul&gt;\r\n&lt;/div&gt;</pre>\n<p>通过 <code>role=\"navigation\"</code>，我们把一个 <code>div</code> 标记为了导航栏区域。实际上，对屏幕阅读器来说，这和 <code>nav</code> 标签在语义上是一致的。上一节中的例子都可以分别用以下 ARIA Role 表示：</p>\n<ul>\n<li><code>role=\"heading\"</code></li>\n<li><code>role=\"main\"</code></li>\n<li><code>role=\"article\"</code></li>\n<li><code>role=\"contentinfo\"</code></li>\n<li><code>role=\"navigation\"</code></li>\n<li><code>role=\"complementary\"</code></li>\n<li><code>role=\"region\"</code></li>\n</ul>\n<p>除此以外，MDx 还使用了 <code>role=\"banner\"</code> 和 <code>role=\"search\"</code> 来分别标记页面中的顶部栏和搜索表单。另外，<strong>有的时候 <code>role</code> 属性还需配合 <code>aria-*</code> 属性一同使用</strong>，具体规则比较复杂，我就不在这里赘述了，具体可参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">WAI-ARIA Roles - MDN</a>。</p>\n<h1>媒体查询来帮忙</h1>\n<p>CSS 的媒体查询其实是一个非常强大的特性，<strong>妥善利用其中的一些特性，我们可以在网页外观上大大增强网页的可访问性。</strong>除了已经烂大街的“对浏览器窗口大小”响应的媒体查询，我会介绍 3 个很少有网站充分利用的媒体查询。</p>\n<h2>print</h2>\n<p><code>print</code> 媒体查询其实已经“历史悠久”了，<strong>只要使用 <code>@media print {...}</code> 就可以创建只在打印页面时生效的样式。</strong>通过这种方式，我们可以让页面在打印时应用一套为打印优化的样式，增强页面在物理纸张上的可访问性。</p>\n<blockquote><p>维基百科是对打印样式做了单独适配的著名例子。</p></blockquote>\n<p><strong>由于在打印的情况下，页面已经离开了“可交互”的范围，还有分页这种在屏幕中无需考虑的问题，要让页面在物理纸张上仍能被轻松地阅读，我们需要做一些特殊的适配。</strong>直接来看一个例子吧。以下是 MDx 针对打印情况进行的一些特殊优化，样式的具体理由已经写在了注释中。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media print {\r\n    /*隐藏不必要的元素*/\r\n    header, .mdx-ad-after-article, .mdx-ad-in-article, .mdx-post-money, .page-footer-nav, .mdx-same-posts, .spanout button, .mdui-drawer, .mdui-overlay, .mdui-menu, .mdx-share-img-dialog, .mdx-share-wechat-dialog {\r\n        display: none!important;\r\n    }\r\n\r\n    /*使用下划线标记链接*/\r\n    article a {\r\n        text-decoration: underline!important;\r\n    }\r\n    /*由于纸张不可交互，在链接后显示链接到的 URL*/\r\n    article a::after {\r\n        content: \"(\" attr(href) \")\";\r\n    }\r\n\r\n    /*强制白底黑字*/\r\n    html &gt; body {\r\n        background-color: white!important;\r\n    }\r\n    article p {\r\n        color: rgba(0,0,0,.8)!important;\r\n    }\r\n\r\n    /*对于纸张上的长文章，衬线字体拥有更好的可读性。以下字体列表来自 fonts.css*/\r\n    article {\r\n        font: 13pt Georgia, \"Nimbus Roman No9 L\", \"Songti SC\", \"Noto Serif CJK SC\", \"Source Han Serif SC\", \"Source Han Serif CN\", STSong, \"AR PL New Sung\", \"AR PL SungtiL GB\", NSimSun, SimSun, \"TW\\-Sung\", \"WenQuanYi Bitmap Song\", \"AR PL UMing CN\", \"AR PL UMing HK\", \"AR PL UMing TW\", \"AR PL UMing TW MBE\", PMingLiU, MingLiU, serif!important;\r\n    }\r\n\r\n    /*除部分元素外，禁止在元素内部分页*/\r\n    * {\r\n        page-break-inside: avoid;\r\n    }\r\n    article p, article a, #comments, article {\r\n        page-break-inside: auto;\r\n    }\r\n}</pre>\n<p>MDx 自 1.9.3 版本起已经包含了对文章页的打印样式优化。可以很容易地看出，优化后的样式在物理纸张上将更容易阅读。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\" alt=\"\" width=\"1345\" height=\"1602\" class=\"aligncenter size-full wp-image-1959\"></a>\n<h2>prefers-color-scheme</h2>\n<p><code>prefers-color-scheme</code> 是最近才被浏览器广泛支持的一个媒体查询，但它的功能却很强大：<strong>响应系统级黑暗模式。</strong>这样，我们可以在开启黑暗模式的系统中让网页具有更好的可读性。不过由于这个媒体查询直到最近才被广泛支持，因此大部分网站对此并没有进行适配。</p>\n<blockquote><p>一些适配这一特性的网站：少数派、微信公众平台（文章页）等。</p></blockquote>\n<p>通过像这样的媒体查询，我们可以在系统启用黑暗模式时让页面实时响应：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    body {\r\n        background-color: #212121;\r\n        color: rgba(255, 255, 255, .7);\r\n    }\r\n}</pre>\n<p><code>prefers-color-scheme</code> 一共有 3 个可能值：<code>no-preference</code>, <code>light</code> 和 <code>dark</code>。你也可以不像上面的例子那样默认使用亮色样式并在黑暗模式下启用黑暗样式，而可以反过来将黑暗样式作为默认，用亮色样式覆盖。在不支持的浏览器上将会显示默认样式（即媒体查询不会生效）。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<h2>prefers-reduced-motion</h2>\n<p>看名字就猜得出，<code>prefers-reduced-motion</code> 是和 <code>prefers-color-scheme</code> 师出同门的媒体查询。因此，和 <code>prefers-color-scheme</code> 一样，它也是在最近才获得了浏览器的广泛支持。它的作用也很强大：<strong>响应系统的“减弱动态效果”模式。</strong>这对某些不喜欢甚至无法接受动画的用户可能很有帮助。要知道，对有些用户来说这甚至是医疗上的必要。使用如下的媒体查询，我们可以在系统启用减弱动态效果模式时让页面实时响应，减弱动画：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-reduced-motion: reduce) {\r\n    /*只是一个示例，实际情况中可以保留一些淡入淡出效果*/\r\n    * {\r\n        transition: all 0s!important;\r\n        transform: none!important;\r\n    }\r\n}</pre>\n<p><code>prefers-reduced-motion</code> 只有 2 个可能值：<code>no-preference</code> 和 <code>reduce</code>，在不支持的浏览器上该媒体查询不会生效。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\" alt=\"\" width=\"792\" height=\"515\" class=\"aligncenter size-full wp-image-1962\"></a>\n<h1>黑暗模式适配</h1>\n<p>黑暗模式可不是简单地切换到黑底白字这么简单。<strong>单纯地使用黑底白字会导致页面元素之间对比度过高，文字刺眼，反而降低了页面的可访问性。</strong>我在下面总结了几条应用在了 MDx 中的黑暗模式优化规则和 Google 推荐的优化规则：</p>\n<p><strong>一是避免黑底白字。</strong>黑底白字看起来真的很难受，事实上，深灰和浅灰是黑暗模式最好的配色。比较下方例子里的两段文本，毫无疑问深灰色背景和浅灰色文字搭配的样式的可读性要比黑底白字高很多。（p.s. 有时候这条规则在白底黑字时也适用）</p>\n<p><strong>二是更改部分元素的亮度和对比度以增强可读性。</strong>你可能已经注意到了，下面优化的例子里标题文字的颜色改变了。很明显，未优化的黑暗模式中标题可读性不如优化的版本。在实际中，我们通常可以通过 CSS 滤镜来实现这一更改。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    h1 {\r\n        /*反相颜色后再将色相旋转 180 度，使亮度反相*/\r\n        filter: invert(1) hue-rotate(180deg);\r\n    }\r\n}</pre>\n<p><strong>三是避免让图片过亮。</strong>未经处理的图片通常会导致过高的对比度，降低可读性。在 MDx 中，我选择降低图片的亮度来避免图片刺眼，而 Google 的建议则是使图片灰度，不过这会影响图片的整体观感。无论是哪一种方案，都可以使用 CSS 滤镜来轻松实现。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    img { \r\n        /*MDx 方案*/\r\n        filter: brightness(.8);\r\n        /*Google 方案*/\r\n        filter: grayscale(.5);\r\n    }\r\n}</pre>\n<div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是未优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是经过优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n</div>\n<h1>其他细节</h1>\n<p>还有一些细节，虽然简单，但不可或缺。我把一部分没有在上文提到的 MDx 中的细节列在了这里。</p>\n<p><strong>一是允许页面缩放。</strong>在开发响应式页面时，很多网站会在页面头部添加这样一个 <code>meta</code>：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"&gt;</pre>\n<p>这样的 <code>meta</code> 设定了页面的宽度，却也固定了页面的缩放比例，用户难以手动放大网页。<strong>这样的设置对一部分视力障碍用户非常不友好</strong>，以至于苹果决定在自家的浏览器上忽略禁止缩放的 <code>meta</code>。按照 Google 的推荐，如果你在 MDx 设置中启用了“允许页面缩放”，那么 MDx 会输出这样的 <code>meta</code> 标签，允许页面进行五倍以内的缩放：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=5\"&gt;</pre>\n<p><strong>尽管很多时候放大页面会导致页面结构被破坏，但这大大增强了页面的可访问性，利大于弊。</strong>因此，在 MDx 中，“允许页面缩放”是默认启用的。</p>\n<p><strong>二是在跨设备阅读时同步阅读记录。</strong>这属于 MDx 的“元老级”功能之一。注意到页面右上角的那个“在其他设备上继续阅读”的按钮了吗？如果你滚动页面后重新点击它，你会发现二维码发生变化了。通过在二维码中记录阅读进度，用户在扫描二维码切换设备阅读时，MDx 在新设备上会自动滚动到和原设备上一致的位置——好吧，目前基于百分比的算法在某些情况下可能不太准，但我已经设计了一个更复杂但更精确的阅读进度记录算法，之后就会更新到 MDx 中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\" alt=\"\" width=\"1000\" height=\"574\" class=\"aligncenter size-full wp-image-1976\"></a>\n<p><strong>三是避免 Web 字体阻塞渲染。</strong>如果你在页面中使用了 Web 字体，在字体加载完成之前，浏览器可能不会渲染任何文本，这就导致用户可能需要等待一段时间才能开始浏览网页。Google 推荐使用 <code>font-display: swap;</code> 来向浏览器指定网页的 Web 字体渲染策略。这一规则会提供一个比较短的等待周期，如果在这段时间内 Web 字体没有完成加载，那么浏览器会以 fallback 字体渲染文本。任意时刻一旦 Web 字体完成渲染，浏览器就会使用 Web 字体重新渲染文本。这在大多数情况下都能满足可访问性的需求。</p>\n<p><strong>四是确保 html 元素具有合适的 <code>lang</code> 属性。</strong>这一属性声明了页面的主要语言，浏览器可以据此调整渲染策略，或者触发自动翻译；屏幕阅读器也能更好地阅读网页。</p>\n<p><strong>五是确保页面主要内容在丢失/禁用了 Javascript 甚至 CSS 的情况下仍然可用。</strong>作为一个以内容为主的网站，MDx 在禁用了 Javascript 的情况下页面主要内容仍然可用。这不只是为了 SEO，更是为了保证页面的可访问性。的确，目前的情况下，如果开启了 Lazyload，MDx 在禁用 Javascript 的情况下图片的确无法显示，但我会在后续版本中尽可能的优化这一问题。</p>\n<h1>附录：媒体查询开发技巧</h1>\n<p>有的时候，光有 CSS 响应媒体查询还不够，我们可能需要在 Javascript 中实时响应媒体查询。用如下代码就可以很简单地响应媒体查询：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">let mql = window.matchMedia(\"(prefers-reduced-motion: reduce)\");\r\nmql.addListener(handleMediaChange);\r\n\r\n//在添加监听后先调用一次，获得当前查询结果\r\nhandleMediaChange(mql);\r\n\r\nfunction handleMediaChange(mql){\r\n    if(mql.matches){\r\n        //查询匹配\r\n    }else{\r\n        //查询不匹配\r\n    }\r\n}</pre>\n<p>在开发上述媒体查询的过程中，我们需要频繁地切换系统的相应模式或者调出打印窗口。<strong>实际上，Chrome 提供了更简单的调试方法：</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1946\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\" alt=\"\" width=\"723\" height=\"681\"></a>\n<p>只要在这里更改模式，相关媒体查询就能实时生效。这不会影响其他标签页，在关闭开发者工具之后也会自动恢复系统设置。</p>\n","link":"https://flyhigher.top/develop/1912.html"},{"title":"MDx Blog 现已随 MDx 1.9.5 发布","date":"2020-01-22 17:54:11","description":"<p>随着 MDx 发布 1.9.5 更新，<a href=\"https://mdxblog.flyhigher.top/\" rel=\"noopener noreferrer\" target=\"_blank\">MDx Blog</a> 现已建立。我将会在 MDx Blog 中分享一些开发故事并发布 MDx 更新日志。</p>","link":"https://flyhigher.top/diary/1905.html"},{"title":"GitHub 2019 统计无垠版","date":"2020-01-12 13:02:00","description":"\n<h1>缘起</h1>\n<p>2019 年底，我突发奇想想要自己统计一番 GitHub 上存储库的一些信息。尽管 GitHub 有自己的<a href=\"https://octoverse.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">年度统计</a>，我还是想试着自己爬取一下，说不定能挖出什么有意思的信息，何况这是我第一次有机会处理比较大量的数据，也算是一种学习的过程吧。于是花了一下午写了个简单的爬虫（时间都花在增加 Rate Limit 上了...），然后扔在了两台服务器上开始跑（GitHub  API 真是好文明）。</p>\n<p>从 2019.11.21 3 时到 2020.1.12 24 时的 52 天 21 小时内，我的爬虫一共爬取了<strong>与 2,024,705 个用户有关<sup>*</sup>的 14,651,923 个公共存储库的基础信息</strong>，平均每秒爬取 3.2 个存储库。据 GitHub 的官方数据计算，我爬取了大约 15% 的存储库信息，但由于封禁库和私有库的数量未知，我暂时无法确定我爬取的存储库占公共库的比例。同时由于存储库数量较多，基本可以认为爬取到的样本在时间尺度上已经足够随机，可以通过统计得出一般结论。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\" alt=\"\" width=\"700\" height=\"606\" class=\"aligncenter size-full wp-image-1892\"></a>\n<p>爬到自己了，合影.jpg</p>\n<p>那么下面就来看看统计出来的一些结果吧。爬虫的技术细节和数据集下载放在文末。</p>\n<p>* 指这些用户拥有至少一个库</p>\n<h1>统计信息</h1>\n<p><strong>以下统计结果均基于已放于文末的数据集。</strong>由于爬虫爬取的时间跨度长，加上我并没有完整爬取 GitHub 所有存储库，因此我<strong>不能保证以下统计结果符合真实情况</strong>，各位可以下载数据集或自行爬取进行验证。</p>\n<h2>一些数据</h2>\n<div>\n<div>\n<div>\n<span>3,120,930</span><br>总爬取用户数</div>\n<div>\n<span>44.7%</span><br>的存储库创建<br>自 Fork</div>\n<div>\n<span>6.59%</span><br>的账户被删除或<br>封禁<sup>1</sup>\n</div>\n<div>\n<span>23,913</span><br>单用户拥有最大<br>库数量<sup>2</sup>\n</div>\n</div>\n</div>\n<p><sup>1</sup> 基于用户 ID 规律合理推断<br><sup>2</sup> 统计范围仅限于当前数据集</p>\n<p>比较出乎我意料的是创建自 Fork 的存储库的占比。我预估这样的存储库占比不会太低，但没有想到能接近一半。此外单用户拥有最大库数量也大大超出了我的预期，<a href=\"https://github.com/pombredanne\" rel=\"noopener noreferrer\" target=\"_blank\">pombredanne</a> 这个用户名下拥有将近 24k 的存储库，不过绝大多数都是 Fork 来的，在情理之中。此外<strong>这个数据集中</strong>拥有最多存储库的账户其实是一个组织 <a href=\"https://github.com/gitpan\" rel=\"noopener noreferrer\" target=\"_blank\">gitpan</a>，这个组织拥有 36,377 个存储库。</p>\n<h2>语言</h2>\n<p><canvas></canvas><br>\n首先必须要说明的是，在这个榜单中我<strong>排除了 HTML 和 CSS</strong>，因为在严格意义上它们不属于“编程语言”。如果把它们计算进来的话，分别有 640,368 个和 361,425 个存储库的主要语言分别是 HTML 和 CSS，这样在这份榜单中它们可以排到第 6 和 第 10 名。JavaScript 毫无疑问获得第一，第二名 Python 的热度则和 JavaScript 相差将近一半。<strong>此外还有 2,448,486 个存储库未能识别出语言，占比 16.7%。</strong>在上面的榜单之外，与机器学习和数据科学相关的语言还有 Jupyter Notebook 排名第 13，R 排名 20，Julia 排名 43。</p>\n<p>说实话这份排名和 GitHub 官方的排名<strong>差别很大</strong>，除了前三名，后面的基本都不太一样。我的排名统计结果完全基于 GitHub 对于存储库的主要语言识别，加上我的存储库数据不完整，和官方的数据不同是很正常的，可以做一个参考，但大概率还是官方排名更加准确。</p>\n<h2>许可证</h2>\n<p><canvas></canvas></p>\n<p>自 GitHub 推出许可证功能以来，拥有许可证的存储库比例升升降降，却始终没有超过一半。<strong>选择一个合适的许可证对项目的良好发展真的很有帮助</strong>，要了解如何选择合适的许可证，请参阅<a href=\"https://www.runoob.com/w3cnote/open-source-license.html\" rel=\"noopener noreferrer\" target=\"_blank\">这篇文章</a>。</p>\n<p><canvas></canvas></p>\n<p>对于拥有许可证的存储库，MIT<del> 麻省理工许可证 </del>总是占比最大的；第二则是 Apache-2.0 许可证。此外，WTFPL 许可证也挤入了前 15 名。</p>\n<h2>星标</h2>\n<p><canvas></canvas><br>\nStar 数量毫无疑问是一个存储库受欢迎程度的体现，而 Star 数高的项目基本上大家都了解过。<strong>截至爬取结束时间</strong>，GitHub 中 Star 数最多的库是 <a href=\"https://github.com/freeCodeCamp/freeCodeCamp\" rel=\"noopener noreferrer\" target=\"_blank\">freeCodeCamp</a> <del>非常完美的驼峰命名法</del>，其次则是著名项目 <a href=\"https://github.com/996icu/996.ICU\" rel=\"noopener noreferrer\" target=\"_blank\">996.ICU</a>。<a href=\"https://github.com/vuejs/vue\" rel=\"noopener noreferrer\" target=\"_blank\">Vue</a> 现在的 Star 数已经稳压 <a href=\"https://github.com/facebook/react\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> 一头，Vue YES! 此外 <a href=\"https://github.com/sindresorhus/awesome\" rel=\"noopener noreferrer\" target=\"_blank\">awesome</a> 也挤进第七名。<br><canvas></canvas><br>\n由于 Star 需要时间积累，新项目的 Star 数量很可能是比不过老项目的，这就会导致有实力的新项目无法出现在榜单中。因此我还统计了日均 Star 数，试图通过日均 Star 数来反映项目受欢迎的程度。<strong>由于正热门的项目会比老牌热门项目有优势，这一项的统计范围是 2020-01-01 之前的所有存储库。</strong>996.ICU 和 freeCodeCamp 再次出现在前 10 名，而最近的热门项目 <a href=\"https://github.com/wenyan-lang/wenyan\" rel=\"noopener noreferrer\" target=\"_blank\">wenyan</a> 则飙升至第 2 名。此外还有 <a href=\"https://github.com/menzi11/BullshitGenerator\" rel=\"noopener noreferrer\" target=\"_blank\">BullshitGenerator</a>，即最近热门的“狗屁不通文章生成器”和 <a href=\"https://github.com/evil-huawei/evil-huawei\" rel=\"noopener noreferrer\" target=\"_blank\">evil-huawei</a> 分列第 3 和第 5 名。<br><canvas></canvas><br>\n说实话这个曲线<strong>比我预估的陡多了。</strong>你可能已经注意到了，这个图表的横轴不是均匀缩放的，实际上曲线要比看起来陡很多。同时受爬取方式的影响，GitHub 中 Star 数较少的存储库数量远比我爬取到的多。也就是说，<strong>实际情况下曲线远比这个图表上的陡。</strong>拿点 Star 不容易啊。</p>\n<h2>名称</h2>\n<p><canvas></canvas><br>\n终于知道了原来存储库的名称是有长度限制的...尽管最长有 100 位，<strong>大部分人还是喜欢 8 位长的存储库名。</strong>此外 1 位长的名称也比我预估的要多一些。举几个存储库名称长度为 100 的例子吧。</p>\n<ul>\n<li>testing-something-elsetesting-something-elsetesting-something-elsetesting-something-elsetesting-some</li>\n<li>acts_as_validated_config_so_app_will_not_run_in_random_situation_and_qa_gays_will_not_cry_to_you_whe</li>\n<li>............................................________-....................................-.---......</li>\n<li>----------------------------------------------------------------------------------------------------</li>\n<li>nyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyan</li>\n</ul>\n<p>...创造力有够丰富的。</p>\n<p><canvas></canvas></p>\n<p>最近 GitHub 上有一种奇怪的风气，那就是建立 Awesome 合集<del>骗 Star</del>。看起来 Awesome 存储库满地都是，甚至还出现了关于 Awesome 的 Awesome 合集这种迷惑行为。于是我统计了一下，<del>还好，</del>占比<del>才</del> 0.5% 不到<del>，Awesomer 们任重而道远呐</del>。</p>\n<p><canvas></canvas></p>\n<p>尽管要在 github.io 上托管网站，存储库不一定要以 .github.io 结尾，但我还是统计了一下。拥有这类存储库的用户比我预想的要少一些，看来还有很多人没有完全发挥 GitHub 的完整实力啊<del>（比如我 Doge）</del>。同时<strong>这类存储库在所有存储库中占比 1.12%</strong>，看起来不多<del>，不过至少比 Awesome 多</del>。<br><canvas></canvas><br>\n看得出来 GitHub 对于用户名长度的限制是 1-40 位。用户名最短的 27 位占据了 <code>A-Z</code> 外加 <code>-</code> 的所有可能，而用户名最长的则是一个组织 <a href=\"https://github.com/UOIT-RESEARCH-database-information-group\" rel=\"noopener noreferrer\" target=\"_blank\">UOIT-RESEARCH-database-information-group</a>。不知道是巧合还是某种规律，<strong>最受欢迎的用户名长度和存储库名称长度一样，都是 8</strong>，有点意思。</p>\n<h2>创建时间</h2>\n<p><canvas></canvas><br>\n由于我并没有完整爬取所有存储库，我只能以相对值来统计每月新增存储库数量的变化趋势。<strong>在这个图表中，我将 2017-09 的数据设为了 100%。</strong>你一定一眼就能注意到 2017 年 6,7,8 月的“一柱擎天”。<del datetime=\"2020-02-05T09:18:30+00:00\">我第一次看到这个数据的时候的确愣了一下，不过就着这条新闻看就能明白为什么了：<strong>2017 年 6 月微软收购 GitHub。</strong></del></p>\n<blockquote><p>重新确认了一下，微软收购 GitHub 比这个高峰晚了一年，目前我对这个高峰没有什么很好的解释，如果你有什么思路的话欢迎评论。</p></blockquote>\n<p><strong>需要注意的是这张图表中我排除了 Fork 存储库</strong>，因为 Fork 存储库在 API 中的创建时间是原始存储库的时间，会影响整体趋势。此外，GitHub 中还有一个创建于 2007 年 10 月 29 日的存储库，那就是 <code>id: 1</code> 的...</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"mojombo\" data-mdxgithubp=\"grit\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/mojombo/grit\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>而它的创建者正是 GitHub 的创始人之一 Tom Preston-Werner。</p>\n<h1>一些有趣的结果</h1>\n<p>当初打算自己爬的目的之一就是想看看能不能挖出什么有意思的信息，结果真的有一些不挖不知道的信息。</p>\n<h2>奇怪的存储库</h2>\n<p>在爬取到的所有存储库中，<strong>有 3 个存储库是“无主”的</strong>，即它们的 owner 属性为空。这三个存储库的基本信息如下。</p>\n<div class=\"mdui-table-fluid mdui-table-hoverable\"><table class=\"mdui-table\">\n<thead><tr>\n<th>ID</th>\n<th>名称</th>\n<th>Forked</th>\n<th>Star</th>\n<th>语言</th>\n<th>许可证</th>\n<th>创建于</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>72385291</td>\n<td>vscode-redprl</td>\n<td>否</td>\n<td>10</td>\n<td>TypeScript</td>\n<td>apache-2.0</td>\n<td>2016-10-31 08:50:01</td>\n</tr>\n<tr>\n<td>181218346</td>\n<td>electron-sys</td>\n<td>否</td>\n<td>10</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-14 03:20:56</td>\n</tr>\n<tr>\n<td>181391880</td>\n<td>node-sys</td>\n<td>否</td>\n<td>6</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-15 09:33:08</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong>更奇怪的是这三个存储库“无主”的情况还不一样。</strong>第一个存储库可以通过 <code>/repositories</code> 这个 GitHub API 找到， <a href=\"https://api.github.com/repositories?since=72385290\" target=\"_blank\" rel=\"noopener noreferrer\">这个链接</a>中的第一个存储库就是它；而其余两个存储库甚至无法在 <code>/repositories</code> API 中找到。不过就算能在 API 中找到第一个存储库，它的 <code>html_url</code>，即 <code>https://github.com//vscode-redprl</code> 仍然是不可访问的。这可能是 GitHub 早期的一个 Bug 导致的，不过我仍然对爬虫是如何找到这三个存储库的以及这些 Stars 是哪里来的感到好奇。</p>\n<h2>奇怪的用户名</h2>\n<p>在爬虫爬了一段时间以后，API 中突然开始出现大量的以 fdp 开头的 18 位乱码作为用户名的用户。这些用户拥有的存储库和 starred 的存储库都为 0，而他们的 <code>html_url</code> 为 404。以下是几个例子。</p>\n<ul>\n<li>fdpEpolGCEdQX4ZlRJ</li>\n<li>fdp8XaVrdtmDZnO5pR</li>\n<li>fdp8XRAGnwAOkTr2Ya</li>\n</ul>\n<p>由于我的爬虫并没有超过 Rate Limit，所以我排除了这是污染数据的可能。我怀疑这可能是某种 Bot 账户，于是一边更新爬虫过滤掉了这些用户，一边给 GitHub 支持发邮件问了具体情况。过了两天 GitHub 回复我说这些是<strong>被自动判为可疑进而被封禁的用户</strong>（原话是 they have been flagged by our automated measures for detecting suspicious behavior）。<del>想到我正在疯狂爬取 GitHub，突然害怕.webp</del></p>\n<p>行吧。</p>\n<h1>技术细节</h1>\n<p>爬虫使用 Python3 编写，数据库使用 MySQL。爬虫共使用了 4 个 API Token，在两台服务器上分布式爬取。爬取思路为：</p>\n<ol>\n<li>通过 <code>/users</code> API 遍历用户，每个请求最多获取 30 个用户信息</li>\n<li>循环 30 个用户，分别获取 <code>/users/&lt;user_name&gt;/starred</code> 和 <code>/users/&lt;user_name&gt;/repos</code> API 中的存储库信息，每个请求最多获取 100 个存储库信息，超过 100 个的分页获取</li>\n<li>提取存储库信息，插入数据库。对于已存在的存储库，更新数据</li>\n<li>获取下 30 个用户信息</li>\n</ol>\n<p>由于爬取过程中我多次调整了爬虫逻辑，爬虫爬取到的用户 ID 区间并非连续的，具体区间为1-839586, 14800001-14885493 及 28965251-31161101。</p>\n<h1>免责声明</h1>\n<p>本站会尽可能地提供准确信息，但本站不对此文章中信息的准确性和即时性及带来的任何影响负责。</p>\n<p>本站不代表 GitHub 官方，本文仅供学习之用，请不要将本文内容直接用于任何商业项目中。</p>\n<h1>数据集下载</h1>\n<p>导出的 SQL 文件大约为 1.38GB，全部放在了 GitHub 上（在危险的边缘试探.webp</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"github-analysis-2019\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/github-analysis-2019\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>此外我也提供了 MEGA 下载，链接<a href=\"https://mega.nz/#F!juxm3A6T!7Vwpzi82W1OFrqTLu1A1pQ\">在这里</a>。</p>\n","link":"https://flyhigher.top/develop/1564.html"},{"title":"Milkice 跨年红包解谜 Writeup 及无垠跨年红包解谜答案","date":"2020-01-02 04:29:19","description":"\n<blockquote><p><del>又到了水文章的时间呢</del></p></blockquote>\n<p>先说明一下，这篇文章原本不是在计划中的，而原来说好的「在路上的两篇」文章<del>绝对不会咕</del>。我自己的红包答案本来打算直接塞在年度总结里的，结果发现稍微有些长，再加上我还花了一些时间解了<a href=\"https://milkice.me/\">奶冰</a>的红包解谜游戏，就打算把两个解谜过程放在一起单独写一篇文章。<del>真是个水文章的好理由</del>（被打死</p>\n<h1>奶<del> 子 </del>冰的红包</h1>\n<p>奶冰的红包题目比我的难多了，所以让我们先从难的开始吧。首先看一下<a href=\"https://milkice.me/2019/12/31/2019-summary/\">题目</a>：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1524\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\" alt=\"\" width=\"746\" height=\"410\"></a>\n<p>入口是 <code>happy.2020.milkice.me</code>，扔到浏览器里面表示找不到 IP，那么大概率就是 DNS 的 TXT 记录了，查一下得到 <code>nb2hi4dthixs63ljnrvwsy3ffzwwkl3tivrvezluomxxg5dsmvqw2ltqmnqxa3th</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1525\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\" alt=\"\" width=\"896\" height=\"278\"></a>\n<p>第一眼没看出来是什么编码，直觉是 BaseXX 系列的编码，加上提示“不只有 Base64”，可以推断出是 Base32，转大写解码得到 <code>https://milkice.me/sEcRets/stream.pcapng</code>。是个 URL，下载得到一个 Wireshark 文件，打开一看是和某 USB 设备的通讯抓包。<del>不会做，不做了。</del></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1526\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\" alt=\"\" width=\"1500\" height=\"813\"></a>\n<p>奶冰提示我“Google 上搜得到”，结合第二条提示搜索“wacom pcapng”找到了<a href=\"https://blogs.tunelko.com/2017/02/05/bitsctf-tom-and-jerry-50-points/\">这篇文章</a>（<del>这™就是答案啊</del>）。看起来是一样的套路，即通过解析数据得到数位板上画的内容，于是按文章的思路筛选出数位板发给主机的数据，导出，然后再用 tshark 导出文本数据。本来我想直接用文章中的 POC 的，结果折腾半天因为源的蜜汁原因库没装上，于是按文章中给出的数据结构自己写了段代码，分别导出 X、Y 轴数据扔进 Excel 画散点图。（<del>别问我为什么用 Excel，因为我手边没有更好的工具了</del>）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1528\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\" alt=\"\" width=\"1280\" height=\"530\"></a>\n<p><span>翻车现场之一</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1539\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\" alt=\"\" width=\"1000\" height=\"286\"></a>\n<p><span>懵逼奶冰.webp</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1533\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\" alt=\"\" width=\"1500\" height=\"462\"></a>\n<p>看得出有手写文字，不过是上下颠倒的，翻转图片得 <code>https://milkice.me/2020/uso.zip</code>。是个 zip，下载打开一看，有密码。<del>不会解，不做了。</del> 第一反应是暴力解密码，但是暴力跑了 15 分钟还是没有跑出来。暴力太不优雅了，肯定不是正确思路，但奶冰什么都不肯说了。不过在这时我终于发现第一个红包口令码就藏在压缩包的注释中，Get。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1544\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\" alt=\"\" width=\"806\" height=\"593\"></a>\n<p>然而题还没解完，回去看提示，看到提供了 osu 谱面下载，于是打算不管怎么样先下载来看看。然而 osu 谱面下载要登录，只好又花了几分钟找到第三方站点，成功下载。这时候可以注意到 uso.zip 里有个同名文件（432314 Mike Greene - Bill Nye the Science Guy Theme Song (Chinese Intro).osz），可以联想到是明文攻击。好吧，上 ARCHPR，十秒解出。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1530\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\" alt=\"\" width=\"462\" height=\"643\"></a>\n<p><span>现场还原.jpg</span></p>\n<p>.osz 文件并不是明文，猜测是压缩包（和 .pptx 一个思路嘛），于是改后缀 .zip 顺利打开。然后红包口令码就藏在奶冰的 .osu 文件中了，由提示可知是明文，打开即可得到。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1542\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\" alt=\"\" width=\"457\" height=\"255\"></a>\n<h1>我的红包</h1>\n<p>相比起来<a href=\"https://flyhigher.top/diary/1464.html\">我的题目</a>就简单很多了嘛...三天时间一共发出了 25 个红包，包括一位重复领取的🌚，比前几年还是多了一些的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\" alt=\"\" width=\"500\" height=\"306\" class=\"aligncenter size-full wp-image-1554\"></a>\n<p><span>这位同学以后请不要多次领取🌚</span></p>\n<p>那么来看看答案吧。</p>\n<h2>第一阶段</h2>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>首先观察字符串，可以发现 <code>.</code> <code>/</code> <code>_</code> 等一些 ASCII 字符原样留在了字符串中，而其他字符被由 <code>=</code> 和十六进制构成的某种编码所替代。如果你正好有所了解，你应该能认出这是 Quoted-printable 编码，这是一种常用于邮件中的编码，可以用<a href=\"https://mothereff.in/quoted-printable\">这个页面</a>解码。如果你不了解，你也应该可以发现这种编码和 URL 编码非常相似。如果你把 <code>=</code> 替换为 <code>%</code>，那么你就可以用各种方法顺利地把它按 URL 编码来进行解码，最后可以得到 <code>αхtоn.іm/соdе_оf_2020_⒈mρз</code>。这个字符串里大部分字符都不是 ASCII 字符，只是长得像而已。根据第一个提示“全是 ASCII 字符”，按样子把字符串用 ASCII 字符抄一遍，可以得到最终 URL 为 <code>axton.im/code_of_2020_1.mp3</code>。</p>\n<h2>第二阶段</h2>\n<p>下载音频，可以听出音频是经过某种处理的白噪音。白噪音的特点是各频段的功率都均匀分布，在白噪音上做文章，很容易就可以联想到线索藏在频谱中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1534\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\" alt=\"\" width=\"1200\" height=\"719\"></a>\n<p>频谱被处理成了 24x3 的网格，结合第二条提示“24x3，横向读取”可以推断出是将频谱当作二进制读取，得到 <code>01111001 01110010 01100011 00101110 01101101 01100101 00101111 00110010 00110000</code>，转为 ASCII 字符可得 <code>yrc.me/20</code>。</p>\n<h2>第三阶段</h2>\n<p>打开上一步得到的页面，提示要求输入十位数密码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1536\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\" alt=\"\" width=\"663\" height=\"460\"></a>\n<p>如果你在上一步注意到了这个音频文件奇怪的属性，你可以反应过来这里的密码就是 <code>2000202020</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1537\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\" alt=\"\" width=\"421\" height=\"651\"></a>\n<p>如果你没有注意到，查看页面代码可以看到一条注释 <code>&lt;!-- Tips: the attribute of the audio --&gt;</code> 将你引导向音频文件的属性。输入密码，解锁即可进入下一步。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1535\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\" alt=\"\" width=\"397\" height=\"223\"></a>\n<h2>第四阶段</h2>\n<p>可以看到是一张图片，内容为“<del>.JPG</del>”和“.ZIP”。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-1532\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n<p>和去年一样的套路，下载图片，将后缀名改为 .zip 然后打开，可以看到 README.txt。</p>\n<h2>最后一步</h2>\n<p>查看 README.txt 的内容，可以了解到需要去 🤔.axton.cc 获取红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1538\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\" alt=\"\" width=\"1131\" height=\"278\"></a>\n<p>扔到浏览器里会出现奶冰同款找不到 IP，于是可以联想到 TXT 记录。唯一的问题是 🤔 这个 Emoji 需要如何处理。域名使用 Punycode 将 Unicode 字符转换为 ASCII 字符，特点是以 <code>xn--</code> 开头。如果你把上面这个域名扔进浏览器，你会发现它变成了 <code>xn--wp9h.axton.cc</code>。然后查询 TXT 记录，即可得到红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1527\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\" alt=\"\" width=\"804\" height=\"557\"></a>\n","link":"https://flyhigher.top/develop/1519.html"},{"title":"无垠 2019 年度总结","date":"2019-12-29 12:25:52","description":"\n<p>又是时间飞快的一年...写 2018 总结的情景似乎还在眼前，转眼居然已经到 2019 年末了。</p>\n<p>2019 年，发生了太多事情，包括真的转折了人生的高考，这也导致我博客更新的不多（难以置信居然才更了两篇...），不过两篇技术性文章已经在路上了，可以期待一下。</p>\n<p>2019 年我也学了不少东西（单指技术方面），比如终于认真学了 Vue（但是还要练手）。书买了一大堆，看完的倒是没几本orz</p>\n<p>呼，好吧，是时候回顾一下充满坎坷的这一年了。2019 年还剩下最后两天，希望 2020 年，我能做得更好。</p>\n<h1>一些数据</h1>\n<p>照惯例先来看看一些数据吧。今年是统计系统完整统计了的第二年，终于可以和去年的数据比较一下了。以下数据的统计范围是 2019年1月1日0时至 2019年12月29日20时。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 26,901 (<span>+4%</span>)，年 PV 76,583 (<span>+3%</span>)，日均 UV 73.7，平均停留时间 5分13秒 (<span>-13.8%</span>)，平均跳出率 53% (<span>+20.5%</span>)。一年有效文章数 2 (<span>-50%</span>)，新增评论 439 条。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\" alt=\"\" width=\"1000\" height=\"1143\" class=\"aligncenter size-full wp-image-1511\"></a>\n<p>有趣的是今年文章数腰斩，访问数反而小有提升。<del>如果我哪天不更新了，访问数是不是可以无限大呢？</del></p>\n<p>今年博客最大的改动就是把整体风格切换到了 Material Design 2（当然这是 <a href=\"https://flyhigher.top/develop/788.html\">MDx</a> 中的可选功能，给自己打个广告2333），此外还有比较失败的 WebP 改造计划，因为和缓存冲突已经回滚了。<a href=\"https://flyhigher.top/develop/1245.html\">ABS 系统</a>进展不大，主要是真的没有太多时间，还是要再学习一个。</p>\n<h2>个人主页</h2>\n<p>虽然个人主页的 TODO List 列了老长，但今年完全没有更新，也没有推广，从今年 8 月底开始还莫名被某墙认证了，直到 11 月底才恢复，于是今年总访问量比去年少了很多，</p>\n<p>有多少呢？这么少：总 UV 2,141 (<span>-65.9%</span>)，总 PV 2,744 (<span>-66.6%</span>)，日均 UV 6 (<span>-65.9%</span>)，平均停留时间 62秒 (<span>+19.2%</span>)。主要来源是知乎和 V2EX，还有一些甚至是从微信来的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\" alt=\"\" width=\"1000\" height=\"1103\" class=\"aligncenter size-full wp-image-1512\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 8 次，新增 171 commits，2 种语言的翻译，Star 数增加了 175，现有 408。感谢所有人的支持，尤其是 <a href=\"https://github.com/Sn0bzy\" rel=\"noopener noreferrer\" target=\"_blank\">Hasan CAN</a>, <a href=\"https://github.com/yechs\" rel=\"noopener noreferrer\" target=\"_blank\">Ye Shu</a>, <a href=\"https://github.com/StarryLeo\" rel=\"noopener noreferrer\" target=\"_blank\">StarryLeo</a>, <a href=\"https://github.com/DCTewi\" rel=\"noopener noreferrer\" target=\"_blank\">冻葱Tewi</a>, <a href=\"https://github.com/syfxlin\" rel=\"noopener noreferrer\" target=\"_blank\">Otstar Lin</a> 等为 MDx 做出了不小贡献的你们。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：<a href=\"https://flyhigher.top/photograph/1309.html\">上手</a> DJI OSMO Pocket</li>\n<li>四月：最后一次参加浙江省普通高中学业水平考试</li>\n<li>五月：MDx 喜提 300 Stars</li>\n<li>六月：高考 <del>炸了，差亿点点上浙大</del>\n</li>\n<li>六月：入手了 Oneplus 7 Pro</li>\n<li>六月：和同学一起去成都重庆旅行</li>\n<li>六月：第一次近距离感受到地震</li>\n<li>六月：<a href=\"https://flyhigher.top/diary/1411.html\">入手</a>了一台雷蛇灵刃 15，目前是主力机</li>\n<li>七月：参与组织 THE Hack 2019 活动</li>\n<li>七月：面基了 <a href=\"https://itroy.cc/\" rel=\"noopener noreferrer\" target=\"_blank\">Tory</a>, Bie Shi 和 <a href=\"https://oxz.me/\" rel=\"noopener noreferrer\" target=\"_blank\">FHYunCai</a>\n</li>\n<li>八月：一个人去厦门武汉转了一圈，拍了自己的第一个 Vlog</li>\n<li>八月：入手了一个 Kindle Paperwhite 4，没有泡面可以压，于是用来看英文小说了</li>\n<li>八月：加入 TEDxNingbo 志愿者团队</li>\n<li>八月：和 Ralph 面基</li>\n<li>八月：入手了一个 Yubikey</li>\n<li>九月：人生第一次参加雅思考试 <del>7分，蛮开心的</del>\n</li>\n<li>十月：入手了一个 Samsung Galaxy Watch Active 2 <del>觉得不值</del>\n</li>\n<li>十一月：MDx 达到 400 Stars</li>\n<li>十一月：为 TEDxNingbo 设计开发的 H5 上线</li>\n<li>十一月：入手了第一台胶片相机，试图入坑胶片摄影</li>\n<li>十一月：参加 TEDxNingbo 2019 大会</li>\n<li>十二月：<del>我 Cytus II 入门了</del>\n</li>\n</ul>\n<h1>跨年红包</h1>\n<p>这算「传统习俗」了。和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2020年1月2日。</p>\n<p>今年的解谜旅程，从下面这个字符串开始。</p>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>由于今年的题目比以前稍微难了一些，所以今年的红包金额还是比较大的，而且不限量，尽你所能试一试吧。</p>\n<p>一点你可能用得上的提示：URL 里全是 ASCII 字符 / 24x3，横向读取。</p>\n<p><a href=\"https://flyhigher.top/develop/1519.html\">答案</a>已公布。</p>\n<h1>跨年海报</h1>\n<p>这算是另一个「传统习俗」（笑）。因为我有做跨年海报的习惯，所以以下就是今年份的海报啦。</p>\n<p>用了 C4D+PS，还有我的一整个下午。</p>\n<p>提前祝各位新年快乐！</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter wp-image-1467 size-large\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n","link":"https://flyhigher.top/diary/1464.html"}]