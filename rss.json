[{"title":"评论有奖 | 用 Keynote 入门动画制作，简单的工具也能发挥无限创意","date":"2022-12-14 10:07:47","description":"先来看一段视频：不需要购买昂贵的动效软件，也不必掌握各种艰深晦涩的专业概念，仅用免费的Keynote，也能制作出像上面视频中一样让人惊叹的动画。想象一下，在你的公开演讲、分享微博或是知识性视频，用动画 ...<a href=\"https://sspai.com/post/77285\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/77285"},{"title":"任意键｜TGA 年度最佳，宫崎英高的神来之笔，魂类游戏的魂在哪里？","date":"2022-12-14 09:25:00","description":"「任意键」正式上线啦！为了丰富各位派友的阅读体验，我们尝试为「任意键」增加了对应的音频内容，邀请了我派的两位带薪打游戏选手编辑@Kiririn和@一只索狗从玩家视角对当期的主要内容进行谈论和评述。您可 ...<a href=\"https://sspai.com/post/77281\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/77281"},{"title":"如何评价国产动画《三体》第一季第二集?","date":"2022-12-14 06:41:34","description":"\n<p data-pid=\"R4--twMe\">丁仪的粒子对撞机实验有一些槽点，作为曾经的粒子物理实验科研工作者，不吐不快。</p>\n<p data-pid=\"TAaFcU5_\">三体动画第二集30分钟，开头用8分钟描述了粒子对撞机实验，动画这几分钟的剧情渲染是成功的。这段剧情很重要，动漫的剪辑和配乐营造了一种紧张又绝望的氛围，揭示了智子对人类基础科学实验的强力封锁。</p>\n<p data-pid=\"BsJtPIVX\">这段重要剧情，在科学细节上仍有一些小瑕疵，以下是我一刷之后重新回放丁仪的粒子物理实验，截图观察到的实验槽点。如果能完善这些细节，原本这部动画可以更“硬核”。</p>\n<h3>1.粒子对撞机？粒子探测器！</h3>\n<p data-pid=\"R4u2PeDq\">在动漫中，人类在地日系统的5个拉格朗日点处分别有一台对撞机，用于粒子对撞实验。大刘在第三部小说还提出了“环日对撞机”的设想，希望人类能早日建造这样的环日对撞机。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-cf9e3d18a132e37a9f7de644c6e93895_720w.jpg?source=b1748391?rss\" data-caption=\"三体动画截图：位于5个拉格朗日点上的粒子对撞机。\" data-size=\"normal\" data-rawwidth=\"1015\" data-rawheight=\"757\" data-watermark=\"original\" data-original-src=\"v2-cf9e3d18a132e37a9f7de644c6e93895\" data-watermark-src=\"v2-a23643ee40fa1d1e4121b08bd1645ab7\" data-private-watermark-src=\"v2-6e95afdbe343eddcb43ee62416e5db89\"></p>\n<p data-pid=\"AYg-ezw3\">如果对应到现实世界，其实一整个圆环是一台对撞机，在L1到L5点标注的不应该是“对撞机”，而是“<b>探测器谱仪</b>”。现实世界中，人类目前建造的最大的粒子对撞机是位于欧洲核子中心的“大型强子对撞机”（简称LHC），就是下图的大圆环。在LHC上面也有不同的对撞点，在这些对撞点安装了不同的探测器谱仪，例如CMS、ATLAS、LHCb和ALICE，都是探测器。</p>\n<p><img src=\"https://picx.zhimg.com/v2-99839d58eba03f4cc34fcc0cfd3bb87e_720w.jpg?source=b1748391?rss\" data-caption=\"现实世界：位于欧洲的大型强子对撞机LHC，上面有不同的对撞点，在不同的对撞点都安装了探测器，用于探测对撞产生的次级粒子。\" data-size=\"normal\" data-rawwidth=\"2200\" data-rawheight=\"1699\" data-watermark=\"original\" data-original-src=\"v2-99839d58eba03f4cc34fcc0cfd3bb87e\" data-watermark-src=\"v2-adf71a563089a9721295247e44277e11\" data-private-watermark-src=\"v2-ba76a93b521d6cde470d25e2a4aa963a\"></p>\n<p data-pid=\"26Lb9gZX\">对撞机和探测器是不同的东西：对撞机只负责加速粒子，让粒子发生对撞产生次级粒子；探测器负责观测产生的次级粒子，收集次级粒子的数据。</p>\n<p data-pid=\"J4AGEP8Q\">所以如果像三体动漫里面，只有对撞机的话，是没办法收集实验数据观察数据图像的，必须还有探测器。想要体现这个科学细节，只需要把动漫中“L1对撞机”什么的，改成“<b>L1探测器</b>”就成了。</p>\n<h3>2.实验通道粒子浓度？粒子束流亮度！</h3>\n<p data-pid=\"MuxNWVYq\">动画中，为了避免智子的干扰，丁仪让同事们加大剂量，为了收集更多实验数据，提高了“实验通道粒子浓度”，这个意思确实方便观众理解。</p>\n<p><img src=\"https://picx.zhimg.com/v2-85e9736f46db58f603def4822fae19ba_720w.jpg?source=b1748391?rss\" data-caption=\"三体动画截图：丁仪让同事提高“实验通道粒子浓度”，画面中的圆环状的东西应该是所谓的“实验通道”，通道里面五颜六色的曲线表示粒子。\" data-size=\"normal\" data-rawwidth=\"1552\" data-rawheight=\"665\" data-watermark=\"original\" data-original-src=\"v2-85e9736f46db58f603def4822fae19ba\" data-watermark-src=\"v2-4199673a466b1f63ca6653a8133e30d0\" data-private-watermark-src=\"v2-e8bde7d28f19c2ee1f4f86ad354dfce2\"></p>\n<p data-pid=\"VpVq3KNH\">不过粒子物理实验并不使用这样的名词，与“实验通道粒子浓度”想表达的意思相近的专业名词可能是“粒子数密度”或者“<b>束流亮度</b>”（Beam Luminosity），束流亮度是表示粒子加速器束流品质的重要指标，指的是在单位时间内通过单位面积的粒子数目，单位 <img src=\"https://www.zhihu.com/equation?tex=cm%5E%7B-2%7D%5Ccdot+s%5E%7B-1%7D\" alt=\"cm^{-2}\\cdot s^{-1}\" eeimg=\"1\">。</p>\n<p data-pid=\"tNPITECy\">在上面这个“实验通道粒子浓度”截图的周围有一个圆环状的东西应该是想表达这是“实验通道”，通道里面那些五颜六色的线条是想表示这些粒子在实验通道里面高速运动。</p>\n<p><img src=\"https://pica.zhimg.com/v2-1670150663e17934db7604399aecba4d_720w.jpg?source=b1748391?rss\" data-caption=\"三体动画截图：一窝蜂加速的粒子，画面确实好看，不过可能不符合科学实际。\" data-size=\"normal\" data-rawwidth=\"1546\" data-rawheight=\"735\" data-watermark=\"original\" data-original-src=\"v2-1670150663e17934db7604399aecba4d\" data-watermark-src=\"v2-e4aefbf4d07858dbcce394ce739cf9ee\" data-private-watermark-src=\"v2-e42a1b97852f294bdd86e2eb5fdb321b\"></p>\n<p data-pid=\"rvIXwFXt\">然而，在现实世界里面，粒子在加速器的里面不会像动画里那样画的杂乱无章一个一个瞎跑。真实的粒子加速器里面，带电粒子不是单打独斗，而是抱团形成一个一个的“束团”，以一个一个束团的形式在加速器里面高速运动，在对撞点发生对撞的时候，也是一团一团的发生对撞，而不是一个一个的对撞。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-68af20e525574178263cc2e97967b7ea_720w.jpg?source=b1748391?rss\" data-caption=\"现实世界：电子对撞机中的电子束团，电子是一团一团的，一起运动，一起对撞。\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"530\" data-watermark=\"original\" data-original-src=\"v2-68af20e525574178263cc2e97967b7ea\" data-watermark-src=\"v2-b913e7a350540430bcb19f61bc741846\" data-private-watermark-src=\"v2-88ba4daa9ab1a745fbec4c7567677ad6\"></p>\n<p data-pid=\"C5jvPJyk\">因为我们都知道，“打群架”才能提高“胜率”，对于粒子来说也是一样的，一团一团对撞，才能提高对撞成功的概率。</p>\n<h3>3.对撞速率？对撞能量！</h3>\n<p data-pid=\"DGI0TZUr\">在三体动画中，丁仪为了获得实验数据，把对撞机的对撞速率提高了。这个名词在粒子物理实验里面倒是也会用到，不过相近意思的专业名词，使用频率更高的是“<b>对撞能量</b>”。</p>\n<p><img src=\"https://picx.zhimg.com/v2-f240128bb4577eb123482485fca172d7_720w.jpg?source=b1748391?rss\" data-caption=\"三体动画截图：提高对撞速率！\" data-size=\"normal\" data-rawwidth=\"1522\" data-rawheight=\"728\" data-watermark=\"original\" data-original-src=\"v2-f240128bb4577eb123482485fca172d7\" data-watermark-src=\"v2-23485350a900320e6140dc80d06907b5\" data-private-watermark-src=\"v2-7fdb476ffea4952d47dfbcf4206c21b7\"></p>\n<p data-pid=\"BP0Jg7vo\">对撞能量为什么重要？因为人类探测物质结构的“探针”粒子的能量越高，其探测的分辨率也就越高，在更高能量下可能可以观察到新的物理现象，从而发现新的物理规律。因此， 要探索更深层次的微观世界，研究更微小的粒子，就需要更高能量的加速器。</p>\n<p><img src=\"https://picx.zhimg.com/v2-39c03e770a47e6d9ba31e2f1c647e601_720w.jpg?source=b1748391?rss\" data-caption=\"现实世界：大型强子对撞机是人类有史以来建造的最复杂最大的科学仪器。\" data-size=\"normal\" data-rawwidth=\"590\" data-rawheight=\"373\" data-watermark=\"original\" data-original-src=\"v2-39c03e770a47e6d9ba31e2f1c647e601\" data-watermark-src=\"v2-d69171de6aa0b9eeabcdc9400dc10f46\" data-private-watermark-src=\"v2-b228c3fbc6b3b01d93d868b4705e41bc\"></p>\n<p data-pid=\"qr9dNl8b\">这就出现了一个有趣的现象：研究的对象越微小，需要的能量越高，加速器也越庞大，相应的探测器也要更强大。</p>\n<h3>4.撞击概率？散射截面！</h3>\n<p data-pid=\"CFHBsc_t\">在三体动画中，丁仪使用了“撞击概率”来描述粒子对撞的概率，这样描述也行，不过粒子物理实验一般使用“<b>散射截面</b>”来描述撞击概率。</p>\n<p><img src=\"https://picx.zhimg.com/v2-3785183917c3362e24c527a1efc61e6f_720w.jpg?source=b1748391?rss\" data-caption=\"三体动画截图：粒子发生对撞。\" data-size=\"normal\" data-rawwidth=\"1548\" data-rawheight=\"722\" data-watermark=\"original\" data-original-src=\"v2-3785183917c3362e24c527a1efc61e6f\" data-watermark-src=\"v2-c3cd9ad6265666ad9f2adfd44350546a\" data-private-watermark-src=\"v2-3b2e1b90c9c6646c3a40cd54dcd7b0e8\"></p>\n<p data-pid=\"rI6-8Bth\">在原子核物理和粒子物理领域，散射截面用于表示粒子之间发生相互作用的概率大小。一般来说，散射截面里所指的“截面”大概可以理解成一个“横截面积”，但它与几何上的“截面”不同，散射截面的大小与粒子的性质有关。</p>\n<p><img src=\"https://picx.zhimg.com/v2-b62f231f35b8b5fc258dd3590309c0cf_720w.jpg?source=b1748391?rss\" data-caption=\"现实世界：中子和铀 235 发生相互作用时的散射截面，入射的中子就好像子弹，铀235就好像靶。\" data-size=\"normal\" data-rawwidth=\"900\" data-rawheight=\"900\" data-watermark=\"original\" data-original-src=\"v2-b62f231f35b8b5fc258dd3590309c0cf\" data-watermark-src=\"v2-464e3e11022377947f3f7c29f8a3c466\" data-private-watermark-src=\"v2-1a56ccb7ca3d772b199f21d09e7b2091\"></p>\n<p data-pid=\"OIOcrCjX\">当一个粒子与另一个粒子对撞时，散射截面越大，那么对撞概率越高。就好像子弹打靶的时候，靶的面积越大，子弹就越容易击中靶。</p>\n<h3>5.直线飞行的粒子？螺旋线飞行的粒子！</h3>\n<p data-pid=\"zjKnupfc\">在三体动画中，丁仪指挥同事们让粒子对撞，产生了绚丽多彩的次级粒子，这些新产生的次级粒子向四面八方飞行时的轨迹都是直线。在真实世界里，粒子对撞机上产生的粒子不仅有直线飞行的中性粒子，还有<b>沿着弯曲的螺旋线飞行的带电粒子</b>。</p>\n<p><img src=\"https://picx.zhimg.com/v2-26479f16383fa20f471d729c1e87d38f_720w.jpg?source=b1748391?rss\" data-caption=\"三体动画截图：粒子对撞后产生的次级粒子从中心向四面八方直线飞出。\" data-size=\"normal\" data-rawwidth=\"1551\" data-rawheight=\"665\" data-watermark=\"original\" data-original-src=\"v2-26479f16383fa20f471d729c1e87d38f\" data-watermark-src=\"v2-6e5bc528625303870373fd4bdc6a8bf7\" data-private-watermark-src=\"v2-205f019fbbfd186314f4903caad1eb01\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-aca9dcfb3f5d78e8143ec7469c608e4e_720w.jpg?source=b1748391?rss\" data-caption=\"现实世界：CMS探测器探测到的粒子用黄色线条来表示，粒子既有直线运动也有曲线运动。\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"916\" data-watermark=\"original\" data-original-src=\"v2-aca9dcfb3f5d78e8143ec7469c608e4e\" data-watermark-src=\"v2-20dade67d6148b5ef1e0afd00df5a64d\" data-private-watermark-src=\"v2-7daa8cd30f36d2045606ddcc274446ea\"></p>\n<p data-pid=\"tUaOXBUZ\">为什么带电粒子在探测器中沿着曲线飞行？原因其实你在上高中时学过：探测器中有磁场，带电粒子在磁场中受到洛伦兹力的作用，因而“拐弯”。</p>\n<h3>6.画图脚本用C语言？要用ROOT！</h3>\n<p data-pid=\"mjGBhBs6\">在三体动画中，丁仪的实验团队在收集数据之后要把数据解算成图表，画出的图是直方图，而且直方图上还表明了“预期值”和“实际值”，体现了实验对理论的验证过程，这个味道对了，而且粒子物理实验最常画的就是直方图。</p>\n<p data-pid=\"S3YVZT4m\">不过，从动画截图来看，画图脚本用的可能是C语言，这个有点问题。</p>\n<p data-pid=\"FwPeMOSy\">另外，动画中的直方图是有了，可惜没有标明这个图的横坐标和纵坐标分别是什么物理量，这样画图在考试的时候会被扣分的啊，同学们！</p>\n<p><img src=\"https://picx.zhimg.com/v2-cede324163dfcfeb5c81a6d13fc1b41a_720w.jpg?source=b1748391?rss\" data-caption=\"三体动画截图：左边是画图使用的代码，右边是直方图，而且数据都带着误差棒，这算是很严谨了。\" data-size=\"normal\" data-rawwidth=\"1856\" data-rawheight=\"796\" data-watermark=\"original\" data-original-src=\"v2-cede324163dfcfeb5c81a6d13fc1b41a\" data-watermark-src=\"v2-8b29bcfe8938d45dbdd1d5bd1e320aba\" data-private-watermark-src=\"v2-6b6d8c7fdfab7c4b3487dbdc098de29e\"></p>\n<p><img src=\"https://pica.zhimg.com/v2-aa6fea63d6735a8fac43a7b5435848ec_720w.jpg?source=b1748391?rss\" data-caption=\"三体动画截图：直方图——好评，图上标了“理论预期值”和“数据实际值”——好评，直方图没有标明横坐标和纵坐标是什么——差评。\" data-size=\"normal\" data-rawwidth=\"1541\" data-rawheight=\"646\" data-watermark=\"original\" data-original-src=\"v2-aa6fea63d6735a8fac43a7b5435848ec\" data-watermark-src=\"v2-9cb73f9172a6db0f96065ee48c0312a9\" data-private-watermark-src=\"v2-658e6aaf410074234fd90a40bde6730f\"></p>\n<p data-pid=\"wz-xkjxD\">粒子物理实验用的最广泛的画图脚本应该使用“<b>ROOT</b>”，这是一款由欧洲核子中心开发的基于C++的数据分析软件，专门用于处理海量数据，可以快速出图。全世界的粒子物理实验几乎都要用ROOT画图。</p>\n<p><img src=\"https://picx.zhimg.com/v2-7a753b2465431a3fd24ab11b71f60773_720w.jpg?source=b1748391?rss\" data-caption=\"现实世界：粒子物理学家用ROOT画的数据直方图。\" data-size=\"normal\" data-rawwidth=\"938\" data-rawheight=\"319\" data-watermark=\"original\" data-original-src=\"v2-7a753b2465431a3fd24ab11b71f60773\" data-watermark-src=\"v2-ceb56e77098d8294106d1781d921dcf9\" data-private-watermark-src=\"v2-47bdce56fe9e9a682a4cad34330dba01\"></p>\n<p data-pid=\"lkYsjudf\">令人感到亲切的是，三体动画的科学家们在做粒子物理实验时，面对着满屏幕的直方图，这和现实世界中的科学家值班简直一模一样。这种细节得给动画的制作方点赞。</p>\n<p data-pid=\"qA6_9vyT\">不同的是，真正的粒子物理实验值班室里，负责上班监控实验的一般只有两个人，一个值班长和一个值班员。粒子对撞机需要长时间运行，一旦运行就是大半年，科学家需要“三班倒”轮流值班，可不敢这么奢侈浪费人力让这么多人在值班室盯着。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-21ba8b24cb382fa7f0015484fd3f4350_720w.jpg?source=b1748391?rss\" data-caption=\"三体动画截图：可以看到电脑屏幕是各种直方图，细节拉满——好评。\" data-size=\"normal\" data-rawwidth=\"1581\" data-rawheight=\"724\" data-watermark=\"original\" data-original-src=\"v2-21ba8b24cb382fa7f0015484fd3f4350\" data-watermark-src=\"v2-fd180bf612064740bbbef36b04d81d2e\" data-private-watermark-src=\"v2-808ccdf02adda7f959a335c8958678ea\" data-qrcode-action=\"none\" data-tags=\"qrcode\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-1298e2c2cc51c430a1dd28a92168b028_720w.jpg?source=b1748391?rss\" data-caption=\"现实世界：CMS实验的科学家们在值班时，也要面对满屏幕的直方图。\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"592\" data-watermark=\"original\" data-original-src=\"v2-1298e2c2cc51c430a1dd28a92168b028\" data-watermark-src=\"v2-ccec964f847113906109add9e419b5ee\" data-private-watermark-src=\"v2-d9c222799ee84af90a09f02d2613b21a\"></p>\n<h3>7.智子干扰粒子实验自己完好无损？在探测器面前就算质子也无所遁形！</h3>\n<p data-pid=\"a5zNuatu\">三体小说中，三体人发射了特制的“质子”到达地球，这些质子被称为“智子”，它们可以对人类的粒子物理实验进行干扰。</p>\n<p data-pid=\"Lc6g9R5w\">动画中，对于智子干扰粒子物理实验的表现手法是这样的：智子撞击粒子对撞机中的其它微观粒子，使得那些粒子“消失”了，而智子自身完好无损，不断进行这样的撞击，使其他粒子消失，从而干扰粒子物理实验，让科学家找不到物理规律。</p>\n<p><img src=\"https://picx.zhimg.com/v2-a5621cc7d4c4bfe2fc73933fb468fecf_720w.jpg?source=b1748391?rss\" data-caption=\"三体动画截图：智子撞击周围的粒子，使这些粒子“消失”。\" data-size=\"normal\" data-rawwidth=\"1541\" data-rawheight=\"650\" data-watermark=\"original\" data-original-src=\"v2-a5621cc7d4c4bfe2fc73933fb468fecf\" data-watermark-src=\"v2-f4fe179bae169ea88832944a0e2694aa\" data-private-watermark-src=\"v2-244701ea781fc7d5713b8d74a901e22d\"></p>\n<p data-pid=\"CWhshG5U\">智子的这种干扰方式在现实世界的粒子物理实验中并不可行。一方面，真实的质子在与其它粒子碰撞时，使其他粒子消失，这会违背能量守恒定律，而且质子不可能自身还能完好无损，肯定会发生衰变产生其他粒子；另一方面，质子在人类制造的探测器中不可能隐藏自己，人类的粒子探测器肯定有能力把三体人的“智子”找到。</p>\n<p data-pid=\"MJTjklRR\">以欧洲核子中心的CMS探测器为例，它由一层一层的探测器包裹而成，非常灵敏。</p>\n<p><img src=\"https://pica.zhimg.com/v2-41d421448d1a3a4d0dcb6b34e476092b_720w.gif?source=b1748391?rss\" data-caption=\"现实世界：CMS探测器可以捕捉各种粒子在飞行过程中产生的微小信号，从而让质子也无所遁形。\" data-size=\"normal\" data-rawwidth=\"712\" data-rawheight=\"514\" data-watermark=\"original\" data-original-src=\"v2-41d421448d1a3a4d0dcb6b34e476092b\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"bljjjrC4\">粒子在探测器的中心发生对撞，像质子这样的带电粒子在探测器中飞行时，在洛伦兹力的作用下必然会发生偏转，在沿着曲线飞行的过程中，质子一定会跟探测器中的工作物质产生相互作用，从而留下“蛛丝马迹”的信号。这些微小的信号被探测器收集起来，经过计算机的专门处理，就可以重建质子在探测器中飞行的轨迹，从而捕捉到质子的身影，研究其中的物理规律。</p>\n<p data-pid=\"B8yn2y1O\">我个人认为，动画在表现智子对人类粒子物理实验的干扰时，不需要让智子和其它粒子碰撞，而应该让智子在探测器中胡乱飞行，产生乱七八糟毫无规律的轨迹，这样也能产生扰乱粒子物理实验的效果，还不会违背真实的物理原理，显得更“硬核”。</p>\n<h3>8.粒子物理实验导致缺氧？辐射才是最大的危险！</h3>\n<p data-pid=\"5C7PhF0K\">动画中的粒子物理实验表现人类孤注一掷的勇气，丁仪命令启动“超频”模式，导致空间站上的氧气含量下降，巨大的电流还导致了火灾。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-22b3996e4705d6079c5c6fb6efe69cd8_720w.jpg?source=b1748391?rss\" data-caption=\"三体动画截图：“超频”启动的对撞机。\" data-size=\"normal\" data-rawwidth=\"1516\" data-rawheight=\"638\" data-watermark=\"original\" data-original-src=\"v2-22b3996e4705d6079c5c6fb6efe69cd8\" data-watermark-src=\"v2-6f150d37ba905b4d4111f5611c4131a2\" data-private-watermark-src=\"v2-9564cd38b541debe0e13df0088edf3a9\"></p>\n<p data-pid=\"UcNZENaU\">对撞机并没有“超频”一说，这里的“超频”应该是指空间站的CPU或芯片之类的超频。</p>\n<p data-pid=\"xnxybuWT\">值得点赞的是，动画中“超频”启动的画面后面有L1到L5这几个对撞机的横切图，这些横切图神似现实世界中的粒子探测器横切图，可见制作组还是下了一番功夫的。</p>\n<p><img src=\"https://picx.zhimg.com/v2-8752bed4aa8e2a4c128fb7c05a6d08b2_720w.jpg?source=b1748391?rss\" data-caption=\"现实世界：ATLAS探测器的横切图，图中还可以看到粒子飞行留下的重建径迹。\" data-size=\"normal\" data-rawwidth=\"597\" data-rawheight=\"490\" data-watermark=\"original\" data-original-src=\"v2-8752bed4aa8e2a4c128fb7c05a6d08b2\" data-watermark-src=\"v2-089fc76285c6ad1572cdcea8904b9c45\" data-private-watermark-src=\"v2-6208d59455528380c32dd73eca1984ea\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-0e872ce0c0a15d4158cd68456e392f4c_720w.jpg?source=b1748391?rss\" data-caption=\"三体动画截图：粒子对撞机超功率运行之后导致空间站的氧气浓度下降。\" data-size=\"normal\" data-rawwidth=\"1542\" data-rawheight=\"721\" data-watermark=\"original\" data-original-src=\"v2-0e872ce0c0a15d4158cd68456e392f4c\" data-watermark-src=\"v2-dc741b25696e042b87dbe15f4a1a7555\" data-private-watermark-src=\"v2-134af642a439c48033a207dedf19386b\"></p>\n<p data-pid=\"9DV0p-R5\">动画中，“超频”运行下的粒子对撞机实验，让空间站出现缺氧，人类科学家冒着生命危险进行实验，体现了大无畏的牺牲精神。这里为什么出现氧气含量下降，动画未明确解释，可能是空间站超功率运行导致氧气产生不足。</p>\n<p data-pid=\"zttwgD4v\">反正肯定不是粒子对撞机造成的。粒子对撞是亚原子的微观现象，不会消耗氧气。</p>\n<p data-pid=\"rTTc4k0c\">粒子对撞机的真实危险是产生致命的辐射。</p>\n<p data-pid=\"noDmmhvE\">运行中的粒子对撞机会产生大量的高能粒子流，这些粒子会产生致命的辐射，可以轻易地破坏人体细胞，从而危及生命。所以在现实世界中，粒子对撞机往往在地下的隧道中建造，用厚重的土层和水泥阻隔辐射，而且运行中的粒子对撞机隧道禁止任何人进入。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-276f217e92f1b9c8482fa2d5239d111c_720w.jpg?source=b1748391?rss\" data-caption=\"现实世界：如果看到这个“辐射危险”的标志，离的越远越好。\" data-size=\"normal\" data-rawwidth=\"619\" data-rawheight=\"560\" data-watermark=\"original\" data-original-src=\"v2-276f217e92f1b9c8482fa2d5239d111c\" data-watermark-src=\"v2-55e846a1a1c278a908d158148beded02\" data-private-watermark-src=\"v2-e8b17c4821ce43a7ec08560ad2e3b401\"></p>\n<p data-pid=\"ZzBa_Et3\">动画在表现对撞机超功率运行的危险时，如果不是以“缺氧”而是以“辐射”作为危险要素，可能会更贴切。</p>\n<h3>瑕不掩瑜</h3>\n<p data-pid=\"s3WkzbnO\">《三体》毕竟是一部科幻作品，不可能要求科幻作品完全符合现实，能够基本做到自圆其说，其实已经很优秀了。各类科幻小说和动画里的槽点那是多了去了，只要你愿意，分分钟能自己挑出好多毛病。</p>\n<p data-pid=\"mU0ojJbo\">我在这里提出三体动画在粒子物理实验方面的一些槽点，让大家增加对粒子物理实验的了解，不是为了挑刺，相反，我非常喜欢科幻作品。三体的第二部《黑暗森林》出版时我在上大学，我是一晚上没睡连夜读完了。</p>\n<p data-pid=\"Ctd2W-IY\">如果三体动画能请一位粒子物理实验相关的人士做顾问，应该可以避免这些瑕疵，让这部作品更精彩。只靠丁仪把关是不够的，毕竟丁仪是理论物理学家，让他搞粒子对撞实验那是为难他了。</p>\n<p data-pid=\"TVDPBQWl\">最后，感谢三体动画，我们是伟大的虫子！</p>\n<p><br></p>\n<p data-pid=\"XNfb_TIN\"><b>作者：海伯利安</b></p>\n<p data-pid=\"KSCBA35C\"><b>出品：科学大院</b>（微信公众号ID： kexuedayuan）</p>\n<p data-pid=\"2tKUuus8\">转载请联系 cas@cnic.cn</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/4hyperion?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">海伯利安</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/571594511/answer/2800886471?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">588 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/572106650?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价国产动画《三体》第一季第三集?</a><br><a href=\"http://www.zhihu.com/question/571436159?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价国产动画《三体》第一季第一集?</a><br>\n","link":"http://www.zhihu.com/question/571594511/answer/2800886471?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"Apple Music 唱歌功能全解析：计算音频助力，哼唱更开心","date":"2022-12-14 06:00:00","description":"总的来说，Apple Music 唱歌是继降噪算法和空间音频后，Apple 在计算音频领域又一杰作，希望人人都可以哼唱自己喜欢的歌。<a href=\"https://sspai.com/post/77265\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/77265"},{"title":"无边记 App、Apple Music 唱歌…… iOS 16.2 值得关注的新特性","date":"2022-12-14 03:23:20","description":"我将逐一介绍 iOS 16.2 更新的内容，希望可以帮助大家更好、更快地用上 iOS 16.2 上的这些新功能。<a href=\"https://sspai.com/post/77223\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/77223"},{"title":"派早报：iOS/iPadOS 16.2 与 macOS 13.1 等正式版推送、PlayStation 2022 年度回顾上线","date":"2022-12-14 01:04:02","description":"佳能发布黑色限定版单眼望远照相机，Google 再一次推迟 Chrome Manifest V2 扩展淘汰计划等<a href=\"https://sspai.com/post/77270\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/77270"},{"title":"时间管理也许并不难，只是你还没找到适合自己的方法论","date":"2022-12-13 09:30:00","description":"\n<p>2012 年至今，我花了大量时间学习时间管理方法，看完了领域内几乎所有书籍，实践了各种方法，却还是无法管好自己，知行分离成为了长期困扰我的问题。如何成为一个即知即行的人？我把探索的触角进一步伸向了心理学、认知科学、社会学等领域。跟随阳志平老师学习的经历启发了我，我看清了那些时间管理方法对我不起作用的原因，也找到了更有效的自我管理之道 —— <strong>心流管理</strong>。</p>\n<p>我发现很多介绍时间管理的书籍，没有充分考虑「人」这个关键因素。所以，本篇作为《心流管理》的第一篇，会先从人格特质的角度，解读主流时间管理方法适合的人群，帮助大家选择更适合自己的工具。</p>\n<h2>时间管理难在哪里</h2>\n<p>总的来说，时间管理之难，在于两点：</p>\n<ul>\n<li>因为我们是理性的人，我们会不自觉地计算成本和收益是否平衡。</li>\n    <li>因为我们不是理性的人，方法和个性之间的冲突，造成了知易行难这个问题。</li>\n</ul>\n<p>为了帮助大家了解适合自己的时间管理方法，我把常见的时间管理方法分为 3 大派别：<strong>时间记录派、GTD / 清单派、目标管理派</strong>。在反复尝试过这些方法后，我对它们的优缺点和适用范围都有所了解，在此总结了一个简单的表格，供你参考：</p>\n<figure class=\"table\"><table><tbody>\n<tr>\n<td> </td>\n                <td>时间记录派</td>\n                <td>GTD/清单派</td>\n                <td>考核派</td>\n            </tr>\n<tr>\n<td>流行程度</td>\n                <td>低</td>\n                <td>中高</td>\n                <td>中</td>\n            </tr>\n<tr>\n<td>上手难度</td>\n                <td>低</td>\n                <td>中</td>\n                <td>中</td>\n            </tr>\n<tr>\n<td>时间成本</td>\n                <td>较高</td>\n                <td>中</td>\n                <td>低</td>\n            </tr>\n</tbody></table></figure><p>每一个方法都有其精妙之处，也都有其适用性。根据不同的实际情况和人格特质，选到最适合的方法才能帮我们更好地提高效率。接下来，我将对这些派别的适用性进行分析，以及如何进行针对性的调整，希望这篇文章能够引领你完成一次有益的探讨。</p>\n<p>[......]</p>\n<a href=\"https://sspai.com/post/77207\" target=\"_blank\">查看全文</a><p>本文为付费栏目文章，出自<a href=\"https://sspai.com/series/290\" target=\"_blank\">《心流管理魔方》</a>，订阅后可阅读全文。</p>\n","link":"https://sspai.com/post/77207"},{"title":"Windows 生态信仰入门：微软 Surface 设备选购指南","date":"2022-12-13 08:00:00","description":"这篇文章将梳理 Surface 产品线中不同产品的主要特性，以及它们更适合怎样的需求，希望能够帮助大家做出决策。<a href=\"https://sspai.com/post/77256\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/77256"},{"title":"App+1 | 跨平台且开源的文本扩展器：Espanso","date":"2022-12-13 06:40:09","description":"Espanso 功能强大，它不仅可以帮我们扩展静态的模板内容，也可以具备较强的扩展性。<a href=\"https://sspai.com/post/77235\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/77235"},{"title":"一日一技 | 动手做个 Windows 快捷方式，拖拽搞定批量重命名","date":"2022-12-13 03:27:49","description":"本文展示的脚本结构适用于各种情形，凡是能在脚本中运行的命令，都可以包装为这种形式。<a href=\"https://sspai.com/post/73026\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/73026"},{"title":"派早报：三大运营商同步删除通信行程卡相关数据等","date":"2022-12-13 00:58:29","description":"支付宝加入数字人民币受理网络，Apple 播客中国大陆地区公布 2022 年编辑精选节目等。<a href=\"https://sspai.com/post/77248\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/77248"},{"title":"荷兰队主帅范加尔确认自己将离任，如何评价他在荷兰队的第三段执教生涯？","date":"2022-12-10 12:47:15","description":"\n<p data-pid=\"fphUUVWV\">感谢邀稿 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/e506c22dc58a46f95dcd436a77c45a01\" data-hash=\"e506c22dc58a46f95dcd436a77c45a01\" data-hovercard=\"p$b$e506c22dc58a46f95dcd436a77c45a01\">@网易体育</a> </p>\n<p data-pid=\"viQ4ifrl\">如果有人问，卡塔尔世界杯期间哪位主帅的发布会最好玩，唯一的答案就是：范加尔。</p>\n<p data-pid=\"V6lC9UYv\">这位老帅的发布会简直就是脱口秀，他说荷兰就是可以夺冠、梅西不防守可以利用、巴西也就是反击球队，说71岁的自己现在就像是上帝，还问这话能不能翻译成阿拉伯语。</p>\n<p data-pid=\"UqvnmHhm\">有记者问范加尔，会不会摆出9个人的防守阵型，他的回答是：“这个问题太消极了，我不会回答。你可以自己编，就说在厕所捡到了我的手机。”还有记者并不想提问，只想说出自己从3岁开始就是他的粉丝，范加尔笑得很开心，并且在发布会之后给了这名年轻记者一个大大的拥抱。</p>\n<p><img src=\"https://pica.zhimg.com/v2-f444859e1b2780f607030ebc514209b0_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1682\" data-rawheight=\"952\" data-watermark=\"original\" data-original-src=\"v2-f444859e1b2780f607030ebc514209b0\" data-watermark-src=\"v2-b65a3ed486157a1dfa3dfcec39d86992\" data-private-watermark-src=\"v2-87a2c011cd17ab5f0f96fe56fe9ce8ad\"></p>\n<p data-pid=\"19BJbmtG\">这就是范加尔。</p>\n<p data-pid=\"RO4knGo3\">他的资历实在太过丰富，从俱乐部到国家队，从荷甲到五大联赛豪门，早期提拔过的很多年轻球员如今都也成为了教练，比如哈维。他的个性又始终强硬，多次下课都和球队闹得鸡飞狗跳，你在他身上永远找不到什么老成持重之类的标签。</p>\n<p data-pid=\"XPs6Vvqh\">他身患癌症，却为了荷兰国家队重回世界杯义无反顾。瞒着球员和媒体做了25次放疗，情况好转才把消息公布了出来。卡塔尔世界杯上，荷兰队偏向保守的风格受到了很多批评，但范加尔坚信这是带领球队前进的最好选择。</p>\n<p data-pid=\"AIqrwRkV\">就像过去三十年间，他做的所有事情一样。</p>\n<p><img src=\"https://picx.zhimg.com/v2-796746696c1a951bd43d8babba118a77_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1268\" data-rawheight=\"761\" data-watermark=\"original\" data-original-src=\"v2-796746696c1a951bd43d8babba118a77\" data-watermark-src=\"v2-829cd43e3b7d6a89b7d8815d2f70b6f9\" data-private-watermark-src=\"v2-ed96cf5b3bead23b7b65c335e759923f\"></p>\n<p data-pid=\"6xx5drkX\"><b>【活到老，傲到老】</b></p>\n<p data-pid=\"kxWKQDk4\">范加尔年轻时并不能算是一个成功的荷兰球员，尤其是和他之后的教练经历相比。</p>\n<p data-pid=\"nBqrxDVJ\">他在阿贾克斯没有得到过出场机会，在安特卫普待了四年也不是主力，效力鹿特丹斯巴达的同时兼任学校体育老师，去阿尔克马尔当球员兼教练之后很快退役。</p>\n<p data-pid=\"6lFp9u4v\">退役后没过多久，范加尔回到阿贾克斯担任二队教练，培养出了克鲁伊维特和西多夫等人。之后先当一队助教再转正，立刻就遭到了大量来自媒体和球迷的抵制。</p>\n<p data-pid=\"8oIuTtCY\">抵制的原因除了觉得他缺乏经验之外，更在于这位教练很快就被人贴上了一个著名的标签——“傲慢”。而这一贴，就再也没拿下来。</p>\n<p><img src=\"https://picx.zhimg.com/v2-ca818da88dd630145b39a7c270f542f3_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"810\" data-rawheight=\"522\" data-watermark=\"original\" data-original-src=\"v2-ca818da88dd630145b39a7c270f542f3\" data-watermark-src=\"v2-28790f94b87c463812e364b39e2563c6\" data-private-watermark-src=\"v2-1d7b245b1937f77863eb9780031321fb\"></p>\n<p data-pid=\"8z8w3a44\">范加尔为阿贾克斯招募了很多不同行业的专家，共同分析了全新的战术思想，以及为了实现这一思想的严明纪律。任何不符合或者不遵守要求的人都必须离开，哪怕是在他上任前刚拿到荷兰年度最佳球员的乌特尔斯。“足球是一项团队运动，球员之间必须相互依赖。如果某些球员无法在球场上很好地完成他们的任务，那么他们的队友就会遭殃。“</p>\n<p data-pid=\"KH63pPhX\">之后就是大换血，年轻球员上位，除了他自己教出来的克鲁伊维特和西多夫，还有戴维斯、范德萨、雷齐格等等。6个赛季里，范加尔打造的阿贾克斯拿下了11座冠军，包括联赛三连冠。</p>\n<p data-pid=\"vbz3NRIQ\">最辉煌的当属1994-95赛季的欧冠决赛，阿贾克斯大名单的平均年龄只有23岁，18人中有13人是出自阿贾克斯青训的年轻球员。而范加尔带着这群年轻人，击败了当时如日中天的AC米兰。</p>\n<p><img src=\"https://picx.zhimg.com/v2-f4b09ff8a347ed45d08e948362589407_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"570\" data-rawheight=\"841\" data-watermark=\"original\" data-original-src=\"v2-f4b09ff8a347ed45d08e948362589407\" data-watermark-src=\"v2-489e24c6bbb3d532bcda7fbdf9b5df3b\" data-private-watermark-src=\"v2-cbec98de42ee8ac76645e995b5f1c389\"></p>\n<p data-pid=\"LRdGErUM\">这一段成功经历带给了更多机会，包括通往顶级豪门和国家队的机会。但在西甲、德甲、国王杯、德国杯、英格兰足总杯等荣誉之后，人们印象更加深刻的还是他那些无比“傲慢”的经典时刻。</p>\n<p data-pid=\"BcB6fjmW\">在巴萨，他和里瓦尔多闹得不可开交。范加尔希望里瓦尔多像年轻时一样回到左路，而后者并不想听从他的建议，只想留在中路。两人迅速从不对付走向有你没我，里瓦尔多和巴萨提前一年解约去了AC米兰。从那时起，坊间就盛传范加尔因为里瓦尔多的关系十分讨厌巴西球员，认为“那些巴西人喜欢赶走主帅“。后来在拜仁卖掉卢西奥、在曼联送走拉斐尔，都成为了佐证。</p>\n<p><img src=\"https://pica.zhimg.com/v2-6378edfe039fbc4593aa78070574d248_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"334\" data-watermark=\"original\" data-original-src=\"v2-6378edfe039fbc4593aa78070574d248\" data-watermark-src=\"v2-fe5aee1e51aea28c074c234ff9b91db9\" data-private-watermark-src=\"v2-3226129fbd3f27e2f51d8300fc2b05c7\"></p>\n<p data-pid=\"IYSTHc3e\">在拜仁，他和时任拜仁主席赫内斯产生了重重的矛盾。范加尔认为赫内斯独揽大权，赫内斯则认为范加尔很难相处。解雇范加尔之后，赫内斯说出了那句经典名言：“范加尔没有将自己当作上帝，而是将自己当作了上帝的父亲！在这个世界出现之前，范加尔就已经站在那里了！”</p>\n<p data-pid=\"7xFGQJwE\">在曼联，他先后送走了在球迷中深受欢迎的“小豌豆”埃尔南德斯、从青训走出来被视为未来队长的拉斐尔，还有前一年还在巴西世界杯上还很融洽的范佩西。这就是范加尔，如果他觉得你不再适合，什么感情和关系都没用。</p>\n<p data-pid=\"XHx3UWfu\">在荷兰国内，他更是和两大名宿克鲁伊夫、范巴斯滕都很不对付，互怼了许多年。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-714bcde90c2a660f98f96f9aa70e86c1_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1268\" data-rawheight=\"714\" data-watermark=\"original\" data-original-src=\"v2-714bcde90c2a660f98f96f9aa70e86c1\" data-watermark-src=\"v2-8540ef9dcf899e5972fe8793dc16ef4a\" data-private-watermark-src=\"v2-f8a7ae98c7bf557116685ccaabdf5751\"></p>\n<p data-pid=\"HXACwpgr\">范加尔觉得，克鲁伊夫是因为当年办圣诞派对的时候，自己接到妹妹去世的消息不辞而别，从此开始记恨。克鲁伊夫驳斥了这一说法，强调他讨厌范加尔只是因为足球风格，无论在阿贾克斯、巴萨还是荷兰队，这位后辈都把自己的很多理念推翻了。</p>\n<p data-pid=\"SCIgM12q\">2003年，阿贾克斯把范加尔请回去当总监，克鲁伊夫一怒之下把董事会直接告上了法庭。最终范加尔只在这个位置上待了一年，但原因并不是和克鲁伊夫的矛盾，而是和更多荷兰名宿的矛盾。</p>\n<p data-pid=\"0CHg7GGQ\">他总是对主教练科曼的安排指手画脚，两个人在训练场从争论到互喷，几次都让科曼觉得“差一点点我就要动手了”。他还要求年轻的伊布多参与防守，说太多次之后直接被怼了回去：“我这么踢全是青年队里范巴斯滕亲自教的，怎么当一名前锋，我改听他的还是听你的？”</p>\n<p><img src=\"https://pic1.zhimg.com/v2-7b71c488ff3522121e75302e9c4b16b6_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"468\" data-rawheight=\"234\" data-watermark=\"original\" data-original-src=\"v2-7b71c488ff3522121e75302e9c4b16b6\" data-watermark-src=\"v2-5bcd26e028da861136e69ea1f6ab346b\" data-private-watermark-src=\"v2-6e19b7f0ebe10841c74ac8438aab5a70\"></p>\n<p data-pid=\"DC3-O_xG\">就像伊布说的那样，范巴斯滕和范加尔虽然有过共事，但两个人的理念也很不对付。范加尔三次执教荷兰队期间，范巴斯滕无数次抨击过他的战术太保守，比赛太难看。</p>\n<p data-pid=\"2rj0tF9j\">卡塔尔世界杯期间也不例外。1/8决赛战胜美国队之后，范巴斯滕就在电视节目里说出了这样的话：“是有两个漂亮的进球，但剩下的比赛时间简直让人想哭，我完全无法想象荷兰球员们在比赛里能感受到丝毫的乐趣。”</p>\n<p data-pid=\"IDczE5PI\">而范加尔每次的态度从不改变——“闭嘴！”</p>\n<p data-pid=\"haBm0nxI\"><b>【顽固老头的另一面】</b></p>\n<p data-pid=\"MIGtPvx2\">固执和倔强的教练见得多了，“狂”到这个程度的真没多少，像范加尔这样动不动把上帝放在嘴边从不顾忌的更是罕见。是什么造成他会形成这样的性格呢？</p>\n<p data-pid=\"1Wo_mLQa\">其实刚执掌阿贾克斯的时候，范加尔虽然纪律严明铁面无情，但不至于怼天怼地怼空气。但在1994初发生的一件事，彻底让他决定狂傲到底。</p>\n<p data-pid=\"LIzzzK3P\">那时，和他共同走过20年婚姻、养育了两个女儿的妻子因为胰腺癌恶化去世。痛苦的范加尔因此放弃了自己原本的天主教信仰，说出了这样的一句话：<b>“如果上帝真的在那儿，那么他必须学会尊重人。”</b></p>\n<p><img src=\"https://picx.zhimg.com/v2-3acd4f46bb44393fed710de4587aee9a_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"634\" data-rawheight=\"479\" data-watermark=\"original\" data-original-src=\"v2-3acd4f46bb44393fed710de4587aee9a\" data-watermark-src=\"v2-9c80c0e9b6421ae9b9ed26a7c0ab3318\" data-private-watermark-src=\"v2-ff03e7f78b0e2c4a9f223b36469aa28a\"></p>\n<p data-pid=\"kHeVG5rL\">这句话是一切狂傲的开始。后来的种种，都是他认准了一件事之后的自我防护，哪怕是以最目中无人的方式。</p>\n<p data-pid=\"wrnPalLc\">但如果你和他在足球理念没有冲突，或者和他在工作之外交流，你会发现这个倔强的老头还有着另外一面。</p>\n<p data-pid=\"v_NOBsUO\">执教曼联的第一堂训练课，范加尔就在全队面前立下了每天训练课的三大原则：不许戴帽子、不许穿奢侈品衣物、离开时无论任何情况都必须和球迷聊几句。马塔说，他原本根据媒体上的印象对范加尔还有点害怕，但这种感觉迅速打消：“他那种令人生畏的氛围立刻就不复存在了，我才发现他其实是一个非常热心的人。”</p>\n<p data-pid=\"S9y_m26u\">“他告诉我们，曾经收到过一位母亲的来信。因为她陪着孩子在训练场外等待了好几个小时之后，有三名球员停车笑着给她的孩子签了名，然后说这是教练教会我们的事情。”</p>\n<p><img src=\"https://pic1.zhimg.com/v2-5f1645bad73a9d08883b403d272fd0ef_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"960\" data-rawheight=\"540\" data-watermark=\"original\" data-original-src=\"v2-5f1645bad73a9d08883b403d272fd0ef\" data-watermark-src=\"v2-fab5caefcc84f27ba38b8fb741b09bd1\" data-private-watermark-src=\"v2-7446362a8b07e42e81ad0079343641eb\"></p>\n<p data-pid=\"3Wu5lBPa\">范加尔自己也是这样。不管以什么身份出现在公众面前，只要时间允许，他总是会尽量满足每一个球迷的合影和签名要求，带着球场边你很难看见的灿烂笑容。</p>\n<p data-pid=\"QWnF2X9u\">除了马塔，还有很多球员也和范加尔保持着良好的关系，尤其是他亲自提拔起来的那些年轻人。比如马夏尔，比如托马斯-穆勒，又比如哈维和伊涅斯塔。</p>\n<p data-pid=\"khBnHoXZ\">范加尔第一次在巴萨下课的时候，唯一赶到机场送行的就是哈维。当哈维哭着抱住这位教练的时候，在球员面前很少动情的范加尔也破了例：“我累了。也许在巴萨我真的犯了不少错误，但我知道有一件事肯定是对的，未来人们也都会知道我是对的。那就是把你带到一线队，你能帮助这支球队走向最高峰。”</p>\n<p><img src=\"https://pic1.zhimg.com/v2-67e3d0e96be84a6036bcb46c1026a7a8_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1266\" data-rawheight=\"966\" data-watermark=\"original\" data-original-src=\"v2-67e3d0e96be84a6036bcb46c1026a7a8\" data-watermark-src=\"v2-3880500b3d9ab995b38a09339a9a98a2\" data-private-watermark-src=\"v2-6f437c8bbd6018973ef3823c33147c4c\"></p>\n<p data-pid=\"2ttpp-R-\">除了足球之外，每个人也还有自己的生活，范加尔也不例外。</p>\n<p data-pid=\"gONEtV70\">在结发妻子去世14年之后，范加尔迎来了自己的第二段婚姻。他曾经答应过现在的妻子，自己55岁就会退休远离足球，后来一直因为种种原因拖到了65岁。离开曼联后，他不是没接到其他球队的邀请，但拒绝的理由都是<b>“和球员们一样，我的妻子同样有权利和范加尔一起生活。“</b></p>\n<p data-pid=\"kN3OX0uP\">不过在2021年，范加尔再一次食言了。</p>\n<p data-pid=\"0Tx6C0hR\">为了荷兰队。</p>\n<p data-pid=\"9QuNyB4I\"><b>【这些牌，只能这么打】</b></p>\n<p data-pid=\"R1ge1RZi\">经历了科曼带得好好地却自掏腰包去救巴萨、德波尔用一届欧洲杯为代价再次证明了自己根本不是做教练的料，荷兰队又到了前途迷茫的危急时刻。</p>\n<p data-pid=\"nCjNx3ha\">当救火请求送来，70岁的范加尔第三次拿起了橙衣军团的教鞭。而这一次，比过去更加艰难。</p>\n<p data-pid=\"Y4JYTlGY\">难的一方面是身体。<b>他被查出患有前列腺癌，进行了25次放疗。为了不影响球队备战世界杯预选赛，很多次都是静悄悄离开训练基地，在医院的配合下偷偷从后门走到私人病房。</b>多亏足协和医院口风够严，才能把秘密守到他公开的那天。</p>\n<p><img src=\"https://picx.zhimg.com/v2-4ebe730e2d00f597705fc2e6e0585651_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1200\" data-rawheight=\"800\" data-watermark=\"original\" data-original-src=\"v2-4ebe730e2d00f597705fc2e6e0585651\" data-watermark-src=\"v2-3057dec1fbb23bf5e77b7cc65442005d\" data-private-watermark-src=\"v2-ce75fd106cad1dae04d1df6e4e044024\"></p>\n<p data-pid=\"xlnd5VL5\">另一方面，则是战术。范加尔漫长的执教履历里，战术风格一直都在受到新环境的影响，也会影响每一个走过的地方。</p>\n<p data-pid=\"nAYpLOyn\">他自己曾经说过，自己在荷甲打的是进攻型的足球，来到巴萨才理解收力控制多么重要。在拜仁，他把施魏因施泰格改造成后腰直接提了两档，找到了穆勒的最佳定位，为海因克斯打下了4231的基础。在曼联和第二次执教荷兰国家队，他整了一套放弃中路组织的“大圈战术”，被许多人吐槽场面相当难看。</p>\n<p data-pid=\"vgOQSfFu\">而这一届的荷兰，被人认为更加难看。可是，又能怎么办呢？</p>\n<p data-pid=\"gkBQ1DyM\">如今的荷兰队早就不是那个神锋辈出的荷兰队。锋线头牌是在巴萨踢不上球的德佩，吕克-德容已经被巴萨放弃，贝尔温被热刺退回荷甲，维格霍斯特在伯恩利站不住脚租去了土超，扬森现在效力安特卫普，诺阿-郎则在布鲁日……如果不是加克波横空出世，他们在世界杯进个球会更加艰难。</p>\n<p><img src=\"https://picx.zhimg.com/v2-b1050bae67f443f327363f882533ce49_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"620\" data-rawheight=\"372\" data-watermark=\"original\" data-original-src=\"v2-b1050bae67f443f327363f882533ce49\" data-watermark-src=\"v2-e307d18d8e4c9d78c009e584922e11e4\" data-private-watermark-src=\"v2-9474c7bd70c77115b6e11b0631cb80d0\"></p>\n<p data-pid=\"jCWX6tn6\">所以你可以看见范加尔做了多少看起来苦闷，却不得不做的设计。</p>\n<p data-pid=\"_IjcSP7Y\">德佩远没有恢复最佳状态，原本都是他和德容组成左路双核，但继续这样收益远远低于风险，只能让德容更加拖后。左边翼卫用能当半个组织者的布林德，阿克在他身后随时拉边。右边交给邓弗里斯一个人冲，用机动性更强的廷贝尔而不是德利赫特，来承担一个复杂的边中卫/边卫/后腰复合角色。高中锋韦格霍斯特和吕克-德容，充当消耗战里的后手。</p>\n<p data-pid=\"CcBfxb6D\">这么打好看吗？当然不好看，因为所有的设计都以减少出错为前提。但只有这么打，目前这支荷兰才有最大的赢球率，就像1/8决赛稳稳化解美国田径队的猪突猛进那样。</p>\n<p data-pid=\"ec5Poexg\">范加尔过时了吗？也许是的。但就算他的战术与主流背道而驰，也不意味着用在荷兰身上就是错误的事情。能和阿根廷拼到最后的点球大战，足以给出答案。</p>\n<p data-pid=\"5H7whO-j\">71岁的范加尔，经历了25次放疗，才站在了世界杯的场边。经历了从小组赛到淘汰赛的5场比赛，今天告别了卡塔尔的舞台。留下的最后一场比赛，各种元素全部拉满，精彩到会让我们长久铭记。</p>\n<p><img src=\"https://picx.zhimg.com/v2-d7d859c2bca9ff7f03cfe05065e4997f_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1269\" data-rawheight=\"1586\" data-watermark=\"original\" data-original-src=\"v2-d7d859c2bca9ff7f03cfe05065e4997f\" data-watermark-src=\"v2-99f56f4c274c918337d76a9d24f98056\" data-private-watermark-src=\"v2-4446ebd58ec4f3aebf0be3d5dd4de3b2\"></p>\n<p data-pid=\"VvA2p-n4\">世界杯之后，未来还会继续执教吗？范加尔的回答还是一贯的自我风格，他说“应该不会了，我已经太老了。”过了一会却又绕了回来，“不过你听说过咱们国家还有个艾德沃卡特吗？他比我还老呢，最近又上岗了。”</p>\n<p data-pid=\"39JOmtQS\">无论昨夜是不是范加尔最后一次站在场边指挥球队，荷兰足球和全世界球迷都会记得他做过的一切。那些培养过的新星和鸡飞狗跳的矛盾，那些怼天怼地的狂傲和风趣幽默的玩笑，那些跑大圈战术和两届世界杯里的种种故事。</p>\n<p data-pid=\"stTNR9yE\">范加尔的执教生涯，已经足够精彩。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/roland-zhou?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">羽则</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/571537053/answer/2795657416?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">32 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/555071815?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">荷兰主帅范加尔表示我告诉球员希望他们更多施压，对球队表现和防守很满意，如何评价他对球队的改造？</a><br><a href=\"http://www.zhihu.com/question/570309589?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">荷兰主帅范加尔表示我满意上一场的表现，美国队中场很强，目前该队备战情况如何？</a><br>\n","link":"http://www.zhihu.com/question/571537053/answer/2795657416?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"北京购买「四类药品」不再登记顾客信息；广州购药不查核酸，专家称可按普通感冒储备药物，哪些信息值得关注？","date":"2022-12-09 05:01:54","description":"\n<p data-pid=\"NQvJquEp\">这几天见到的一些用药误区，集中说一下：</p>\n<p><br></p>\n<p data-pid=\"1gnSdBwQ\">1. 奥司他韦/ Xofluza（玛巴洛沙韦，速福达）是对抗流感病毒的，只能治疗流感，对新冠病毒以及新冠病毒感染后引起的症状均无效；</p>\n<p><br></p>\n<p data-pid=\"2XK3Dfei\">2. 头孢XX/ XX沙星等都是抗生素，用于细菌感染，对病毒无效，对缓解退热止痛等症状效果不确定。除非是病毒感染后确认继发细菌感染才考虑使用，但概率很低，须有医生判断，这也是为什么抗生素是处方药的原因。</p>\n<p><br></p>\n<p data-pid=\"mV-gAyeO\">3. 新康泰克/ 泰诺（酚麻美敏片）/ 幸福伤风素等都是复方感冒药，属于非处方药（OTC），用于缓解多种症状（说明书上有写）。如果症状只有一种的话（无论是流感、感冒还是新冠引起），更推荐使用单一药方。</p>\n<p><br></p>\n<p data-pid=\"bGCk0_OR\">4. 对于新冠备药来说，对乙酰氨基酚和布洛芬是最主要的，有条件的话可以两个都备上。「布洛芬不能用于新冠」是2020年的谣言了。但通常不建议同时服用这两个药，主要考虑是副作用叠加问题，尤其是儿童（循证医学指南不建议）。但是这个也存在一定争议，在现实中仍有一些医生会推荐交替（注意是交替）使用这两种药，一种做法是在用完一种后没有起效、在下一次使用间隔前直接替换成另外一种。有肾功能不全者慎用这两种药，但不是说完全不能用，可以看下说明书或提前咨询医生建议。</p>\n<p><br></p>\n<p data-pid=\"F3nUtCIO\">5. 布洛芬孕妇禁用。孕妇感染新冠后，用药前建议咨询医生意见，对乙酰氨基酚是少数可以用于妊娠各个阶段的药物，短期规范使用是比较安全的。</p>\n<p><br></p>\n<p data-pid=\"1sj_HEoW\">6. 如果希望服用一些中西药合剂时，注意不要重复用药，比如999感冒灵含有200mg对乙酰氨基酚、4mg咖啡茵和4mg马来酸氯苯那敏，如果同时吃泰诺林或者必理通可能会造成过度用药。</p>\n<p><br></p>\n<p data-pid=\"RpXb_r_I\">7. 腹泻的话注意补液，补液的重点在于水和电解质，不止在于水。可以考虑口服补液盐，对于轻/中度脱水来说，口服补液和静脉补液一样有效。一旦有腹泻就需要开始补液，卫健委发布的2020年版儿童急性感染性腹泻病诊疗规范中，推荐低渗口服补液盐（ORS III），没有条件的话可以在米汤中加盐（配比是500ml米汤+1.75g盐（半个啤酒瓶盖）），6个月以下婴儿每次稀便后补充50ml，6~2岁100ml。对于成年人而言，应急可以考虑宝矿力或佳得乐等运动饮料。</p>\n<p><br></p>\n<p data-pid=\"8i6fOdr4\">8. 咳嗽可能是新冠所有急性症状中持续最长的。止咳糖浆直接喝，不要兑水稀释，蜂蜜也是（用于1岁以上儿童）。可以吃润喉糖。祛痰的话有愈创甘油醚、氨溴索、溴己新这些，避免重复用药。</p>\n<p><br></p>\n<p data-pid=\"rqqVeGQ8\">9. 维生素C咀嚼片对于缩短感冒或新冠病程基本无效，但是也没啥明显副作用，味道也不错，就当补充VC。</p>\n<p><br></p>\n<p data-pid=\"lapy1K3n\">10. 前两天传的熊去氧胆酸没必要囤。</p>\n<p><br></p>\n<p data-pid=\"-M_1Gerd\">以上这些药物，现在没有必要纠结具体的品牌或者国产/合资/ 进口，重点是看主要成分。提前确认以上这些药物与目前正在用的慢性病药物有没有拮抗作用。</p>\n<p><br></p>\n<p data-pid=\"XgQjw0wf\">除了用药以外，补充足够的水，注意休息，有担心焦虑是正常的，但绝大多数打过疫苗的Omicron感染者，病程都在1~2周以内。</p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhuangshilihe?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">庄有猫</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/570256833/answer/2794167709?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">83 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/570781842?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">12 月 6 日起江苏常州购买「 四类 」药品暂不实名登记，这对市民就医提供了什么帮助？</a><br><a href=\"http://www.zhihu.com/question/478495344?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">北京：各药店对发热、抗感染等 4 类药品进行实名登记，对此你有什么看法？</a><br>\n","link":"http://www.zhihu.com/question/570256833/answer/2794167709?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"第一次用 iPhone 需要注意什么?","date":"2022-12-08 12:13:27","description":"\n<p data-pid=\"OmrHRdR5\">第一次用iPhone，你一定有一些疑惑。比如哪些是iPhone的基础设置，哪些进阶设置可以让你的iPhone更趁手，如何个性化你的苹果手机，iPhone有哪些使用技巧等等。</p>\n<p data-pid=\"MgX2gDVQ\">本文全面总结了以上几个方面（图文并茂），很细，建议读完，相信无论新手小白还是玩机老手都会有所收获~</p>\n<p data-pid=\"wf_WnE3y\">关注我，各种干货分享，教你玩转iPhone~</p>\n<p data-pid=\"A0rNcgE4\"><b>文章不定期更新，大家可以先双击屏幕点赞+收藏（敲黑板啦！！！）再仔细阅读。</b></p>\n<p data-pid=\"7UKLx8-C\"><i>提纲：</i></p>\n<ul>\n<li data-pid=\"U0owbaJl\"><i>01 基本设置（5条）</i></li>\n<li data-pid=\"81DVn9VI\"><i>02 检查隐私设置（5条）</i></li>\n<li data-pid=\"DrTTOM61\"><i>03 关闭一些烦人功能的设置（11条）</i></li>\n<li data-pid=\"0PdvKy6Y\"><i>04 个性化你的iPhone（7条）</i></li>\n<li data-pid=\"367R1Jx1\"><i>05 让你的iPhone更好用的设置（11条）</i></li>\n<li data-pid=\"ITDfyPTm\"><i>06 iPhone手势和操作（16条）</i></li>\n<li data-pid=\"qZ8XH0pa\"><i>07 使用小技巧（20条）</i></li>\n<li data-pid=\"P111TPfJ\"><i>08 注意事项（4条）</i></li>\n</ul>\n<p><img src=\"https://pica.zhimg.com/v2-45e6b44f97cdc3e5468615906ea00609_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1500\" data-rawheight=\"844\" data-watermark=\"watermark\" data-original-src=\"v2-45e6b44f97cdc3e5468615906ea00609\" data-watermark-src=\"v2-f1f1e2abb1134ca495d207a6d7aeb504\" data-private-watermark-src=\"\"></p>\n<h2>01 基本设置</h2>\n<h3>1.使用Apple ID登录</h3>\n<p data-pid=\"WKk56n5e\">最重要的一条，永远牢记Apple ID的账户名（邮箱）和密码，很多设置要先登录Apple ID才能进行，下载软件也要验证它才能下载......总之一句话，很重要就对了！！！</p>\n<p data-pid=\"nhPIsNkc\">万一忘记了，只能看看你还记得锁屏密码不？通过锁屏密码，我们可以再次修改Apple ID密码。</p>\n<p data-pid=\"EQ9IWB8V\">如果没有 Apple ID，你可以创建一个。若要通过 Apple ID 登录，请前往「设置」- 「登录 iPhone」。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-1616b370924ff008e28260fc6763039a_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1580\" data-rawheight=\"577\" data-watermark=\"watermark\" data-original-src=\"v2-1616b370924ff008e28260fc6763039a\" data-watermark-src=\"v2-e59c515a22a3f151443395573abf556e\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"5n5MFXAd\">注册了Apple ID后，记得开启双重认证，并且Apple ID账号一定要绑定自己能收到验证码的手机号，这样才安全。</p>\n<blockquote data-pid=\"3YFdBDGJ\">开启方法：设置 - Apple ID、iCloud、媒体与购买项目 - 密码与安全性 - 打开双重认证 - 输入手机号 - 输入收到的验证码</blockquote>\n<p data-pid=\"cOmQZXcv\"><b>注意，自己的Apple ID 不要给别人，也不要随便在自己设备上登录别人的Apple ID</b>，人心叵测，否则人家给你远程一锁，手机变砖了，你哭都没地儿哭去。</p>\n<h3>2.设置面容ID，Touch ID</h3>\n<p data-pid=\"9Tkp2Jt9\">你可以使用面容 ID（面部识别）来安全解锁 iPhone、登录多款 App 和进行购买。出于安全考虑，面容 ID 数据只会保留在你的设备上，不会存储到任何其他地方。</p>\n<blockquote data-pid=\"94Bl5xry\">设置方法：设置 - 面容 ID 与密码 - 轻点“设置面容 ID” - 然后按照屏幕指示操作。</blockquote>\n<h3>3.打开「查找我的iPhone」</h3>\n<p data-pid=\"l7ELMd5g\">打开之后，你可以定位丢失或被盗的 iPhone。很多人不知道的是，“查找”打开之后还包含激活锁功能，激活锁可以帮你确保设备安全，也就是远程锁定手机，变砖，对方即使用刷机等方式破解密码也无法盗取你的信息，保护你的隐私安全。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-210f3bdd29142ab2d277aa66dfc1dd32_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1536\" data-rawheight=\"753\" data-watermark=\"watermark\" data-original-src=\"v2-210f3bdd29142ab2d277aa66dfc1dd32\" data-watermark-src=\"v2-48878727b845dc8ab3df0be6b7c2f995\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"XgSpsu0m\">注意把查找我的iPhone的三个选项都打开。</p>\n<blockquote data-pid=\"mfu2g5RZ\">打开方法：设置 - Apple ID、iCloud、媒体与购买项目 - 查找 - 查找我的iPhone - 三个选项都打开。</blockquote>\n<h3>4.管理电池健康</h3>\n<p data-pid=\"mStwKify\">前两天何同学耗时两年的充电实验视频相信大家也看了，得出的结论是：</p>\n<ol>\n<li data-pid=\"f2vfZhgM\">快充并没有更伤电池。</li>\n<li data-pid=\"GC6raNhv\">将手机电量保持在30%到80%对电池确实有帮助，但是帮助很有限。</li>\n<li data-pid=\"eWPZQz_d\">手机连着充电器一星期不拔线，电池容量基本不受影响。</li>\n</ol>\n<p><img src=\"https://picx.zhimg.com/v2-48ed9a737c4f76af2c1de71a585d9e73_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1740\" data-rawheight=\"687\" data-watermark=\"watermark\" data-original-src=\"v2-48ed9a737c4f76af2c1de71a585d9e73\" data-watermark-src=\"v2-cade161f1f5800fc6a75c8f0add4f265\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"n6ELPv62\">所以对于iPhone充电，总体的原则就是：随用随充，不要用到只剩一点电了再去充电，可以更自由的使用手机。</p>\n<p data-pid=\"vPy9_rDS\"><b>一般来说，当电池的最大容量低于80%时，就要更换电池了。</b></p>\n<p data-pid=\"uDiCTOJW\">但我们也可以在平时使用中，注意使用习惯来延长电池寿命。下面是一些官网的延长电池寿命的小提示：</p>\n<ul><li data-pid=\"it49gpyl\">\n<b>电池健康自动管理：</b>iPhone 有“优化电池充电”的设置，可通过减少充满电所需时间来帮助减缓电池老化。</li></ul>\n<blockquote data-pid=\"ncffA8vM\">打开方式：设置 - 电池 - 电池健康与充电 - 将「优化电池充电」打开。</blockquote>\n<ul>\n<li data-pid=\"XZOk9qVZ\">\n<b>远离极端温度：</b>在高温下充电，可能永久损坏电池容量；在低温下使用设备时，你可能会发现电池使用时间会降低，但这种情况只是暂时的，温度恢复性能就恢复了。</li>\n<li data-pid=\"Tony8YbQ\">\n<b>充电时移除某些保护壳：</b>如果带壳充电，有些时候可能会产生过多热量，从而影响电池容量。发现充电时过热了，请取下保护壳。</li>\n<li data-pid=\"1S_iGZHR\">\n<b>长期存放时，请保持一半电量：</b>如果长期不使用设备，请勿完全充电或完全放电，建议设备充电量应为 50% 左右较为合适。</li>\n</ul>\n<h3>5.下载App</h3>\n<p data-pid=\"oC7Oay9N\">iPhone购买和下载App只有一个官方渠道，就是「App Store」。</p>\n<p><img src=\"https://picx.zhimg.com/v2-98598db58d5c977323f388b51017daad_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"116\" data-rawheight=\"114\" data-watermark=\"watermark\" data-original-src=\"v2-98598db58d5c977323f388b51017daad\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"684NeWiY\">在「App Store」里，找到需要的软件，点击获取，它会弹出需要你确认的界面，验证Face ID或Touch ID后即可下载。</p>\n<p data-pid=\"2T_kdDY3\">iPhone下载免费软件也每次需要输入密码，好烦，其实你可以关闭它。</p>\n<blockquote data-pid=\"RGUdCXKS\">关闭方法：设置 - Apple ID、iCloud、媒体与购买项目 - 媒体与购买项目 - 密码设置 - 将「需要密码」关闭。</blockquote>\n<p data-pid=\"qek5yYdC\">有时下载成功的软件却在主屏幕找不到，是因为下载到了「App资源库」中。你可以到资源库中找到这款App，将其添加到主屏幕。</p>\n<p data-pid=\"6Db4iB0r\">那「App资源库」是什么呢？它就是iPhone上的”应用抽屉“。之前没有它的时候，iOS的主屏幕非常简单粗暴，App下载之后是全部放在桌面的，久而久之，桌面就变的十分臃肿，还要花时间整理它。而有了「App资源库」后，可以选择将低频使用软件”从主屏幕移除“，需要的时候直接到最后一屏那里查找即可，高效优雅。</p>\n<p><img src=\"https://pica.zhimg.com/v2-493df5ef930eed8ccdfa1cbece1c17d3_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1580\" data-rawheight=\"629\" data-watermark=\"watermark\" data-original-src=\"v2-493df5ef930eed8ccdfa1cbece1c17d3\" data-watermark-src=\"v2-475a32fa0475a4cee1c75c461085b88e\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"LNGnIEoQ\">如果你不习惯资源库这种方式，也可以恢复以前添加到主屏幕的习惯。</p>\n<blockquote data-pid=\"aGIF5hTN\">方法：在设置 - 主屏幕 - 新下载的APP - 选择”添加到主屏幕“就好了。</blockquote>\n<h2>02 检查隐私设置</h2>\n<p data-pid=\"Dd7a5sji\">新机拿到手，有些设置是不必要打开的，可以参照我的清单检查一遍，按照建议打开或关闭。</p>\n<h3>1.关闭「共享iPhone分析」</h3>\n<p data-pid=\"35cdCnyp\">共享iPhone分析是用来将你的使用数据来帮助Apple改善产品和服务的，数据可能包括位置信息等。</p>\n<p data-pid=\"wzIM5raZ\">相信你也不想用个手机，还让Apple分析到你的数据，果断关闭。</p>\n<blockquote data-pid=\"_X-uZ9Mx\">关闭方法：设置 - 隐私与安全性 - 分析与改进 - 关闭「共享iPhone分析」。</blockquote>\n<p><img src=\"https://picx.zhimg.com/v2-71fb7f09b115d8fc789e06489371d6a1_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1523\" data-rawheight=\"721\" data-watermark=\"watermark\" data-original-src=\"v2-71fb7f09b115d8fc789e06489371d6a1\" data-watermark-src=\"v2-476fcef0e7141c2d6bd5bc77ca0049c7\" data-private-watermark-src=\"\"></p>\n<h3>2.关闭「允许App请求跟踪」</h3>\n<p data-pid=\"s3UattbP\">跟踪是为了向你投放定向广告、监测你看到广告后的操作，或与数据代理商共享你的信息。</p>\n<p data-pid=\"vOvHeCWs\">这个一看也是果断关闭。</p>\n<blockquote data-pid=\"kwRo7VXA\">关闭方法：设置 - 隐私与安全性 - 跟踪 - 关闭「允许App请求跟踪」。</blockquote>\n<p><img src=\"https://pic1.zhimg.com/v2-e0643431c7096d2a53804473e5193fea_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1536\" data-rawheight=\"565\" data-watermark=\"watermark\" data-original-src=\"v2-e0643431c7096d2a53804473e5193fea\" data-watermark-src=\"v2-8a516c9163b7f1f81f800987cc2a1d94\" data-private-watermark-src=\"\"></p>\n<h3>3.关闭「Apple个性化广告」</h3>\n<blockquote data-pid=\"fgr7dlkC\">关闭方法：设置 - 隐私与安全性 - Apple广告 - 关闭「个性化广告」。</blockquote>\n<p><img src=\"https://picx.zhimg.com/v2-039619e3f198f56e963c20d6b0d1a253_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1536\" data-rawheight=\"756\" data-watermark=\"watermark\" data-original-src=\"v2-039619e3f198f56e963c20d6b0d1a253\" data-watermark-src=\"v2-0c3cbca1c9be797aaf063d8016299a1e\" data-private-watermark-src=\"\"></p>\n<h3>4.设置「照片定位」</h3>\n<p data-pid=\"kY5ZXvM9\">看个人使用需求来决定是打开还是关闭。</p>\n<p data-pid=\"yIOmng_b\">打开照片定位，方便按地点查找、整理照片，也会自动生成基于地点的「回忆」短片，但也有可能会泄露隐私。</p>\n<p data-pid=\"YxtiVVsT\">比如你开了照片的定位，并且将你拍摄的原图Airdrop给了对方，对方收到图之后保存到自己的相册，上滑就能获取照片拍摄时的具体位置。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-a1c02a7706e3da8367abd4db94b3431e_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1612\" data-rawheight=\"1075\" data-watermark=\"watermark\" data-original-src=\"v2-a1c02a7706e3da8367abd4db94b3431e\" data-watermark-src=\"v2-9a131bbe2989775f1da45b0107b6a429\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"tEFoZho0\">因此，关闭「照片定位」就成了有些人的刚需。但要注意的是，关闭权限后，「照片」App的相簿就无法识别地点了，也无法按地点搜索了，可能还有一些其他功能无法使用。安全性提升了，代价是使用体验上会差一点点。</p>\n<blockquote data-pid=\"vqzTx4Pr\">关闭方法：设置 - 隐私与安全性 - 定位服务 - 相机 - 设置为「永不」。</blockquote>\n<p data-pid=\"h0iheQpn\">PS：微信即使发原图也无法获取具体位置，可安心使用。</p>\n<h3>5.关闭相关app定位服务使用权限</h3>\n<p data-pid=\"XRrTyLIJ\">对于无需使用定位服务的App，它却请求了定位服务使用权限，对你没有任何好处，还会耗电，趁早关闭为上。</p>\n<blockquote data-pid=\"oL8FiO-0\">关闭方法：设置 - 隐私与安全性 - 定位服务 - 进入对应app设置为使用期间/永不。</blockquote>\n<h2>03 关闭一些烦人功能的设置</h2>\n<h3>1.关闭短信2次提醒</h3>\n<p data-pid=\"ATJVJhA-\">不知道你有没有这样的经历，午睡的好好的被一条短信”叮“的一声吵醒，不想理它接着睡，不一会儿又响一声，起床气爆了有没有！</p>\n<p data-pid=\"im5tfijO\">这个时候说明你就需要关闭短信2次提醒功能了~</p>\n<blockquote data-pid=\"sMNtrNdR\">关闭方法：设置 - 信息 - 通知 - 自定通知 - 重复提醒 - 选择「永不」。</blockquote>\n<p><img src=\"https://picx.zhimg.com/v2-92a60d9a333cdcf52aa1e32fced5f33c_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1036\" data-watermark=\"watermark\" data-original-src=\"v2-92a60d9a333cdcf52aa1e32fced5f33c\" data-watermark-src=\"v2-cb8ee64a450608042e67b2c7d08004db\" data-private-watermark-src=\"\"></p>\n<h3>2.关闭小红点通知</h3>\n<p data-pid=\"ZkikkKoG\">不知道你是不是和我一样，有一点点强迫症，看不得手机桌面有几百个小红点（红色标记未读提醒），恨不得一一点掉。</p>\n<p data-pid=\"CSHPr7Cy\">这个时候说明你就需要根据App来选择性的关闭小红点了。</p>\n<p data-pid=\"VgHS8sek\">特别注意，关闭小红点之后收到消息不提示，从而社交类的App有可能错过消息，所以还是最好不要关闭社交类App的提示。</p>\n<blockquote data-pid=\"QNP0XzHY\">关闭方法：设置 - 通知 - 找到要关闭的App - 将「标记」功能关闭。</blockquote>\n<h3>3.常收到垃圾短信的骚扰</h3>\n<p data-pid=\"k0QI8YHq\">你是不是也常常收到澳门赌场，或者仿货A货等垃圾短信的骚扰，不胜其烦。</p>\n<p data-pid=\"ThDydeDE\">最一劳永逸的办法就是关闭iMessage和共享相簿。</p>\n<blockquote data-pid=\"V1PXqutM\">关闭iMessage方法：设置 - 信息 - 关闭「iMessage信息」。 <br>关闭共享相簿方法：设置 - 照片 - 关闭「共享相簿」。</blockquote>\n<p><img src=\"https://picx.zhimg.com/v2-8a9c96135c6d263892ade5d56ad0df02_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"468\" data-watermark=\"watermark\" data-original-src=\"v2-8a9c96135c6d263892ade5d56ad0df02\" data-watermark-src=\"v2-b1c82f24c52a4d1f59d687abd8624400\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"ocEXjbWP\">但这样一刀切对有些还用iMessage功能的用户来说不太友好，因此对这部分用户可以采用「过滤未知发件人」的方式来减少收到垃圾短信，同时可以在「发送与接收」选项中取消邮件地址。</p>\n<p data-pid=\"lnffL_L8\">这样设置后，信息就会分成两类。通过imessage发送来的短信都加被划分为“不在通讯录一列”，并且不会有短信提示音。因为大部分的垃圾短信都是通过邮箱地址来发送的，所以取消邮件的发送地址可以屏蔽大量的垃圾短信。</p>\n<blockquote data-pid=\"ZdOSiekL\">过滤未知发件人设置方法：设置 - 信息 - 打开「过滤未知发件人」。 <br>取消邮件地址设置方法：设置 - 信息 - 发送与接收 - 只选择手机号，取消邮件地址。</blockquote>\n<p><img src=\"https://pica.zhimg.com/v2-ad927529b41d770ef247ecf1f20e6cab_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"453\" data-watermark=\"watermark\" data-original-src=\"v2-ad927529b41d770ef247ecf1f20e6cab\" data-watermark-src=\"v2-97c52263d98db00165ea707db2dc52fa\" data-private-watermark-src=\"\"></p>\n<h3>4.隔空投送设为「仅限联系人」</h3>\n<p data-pid=\"HiAnnrBH\">你有没有在公交地铁上被陌生人隔空投送表情包骚扰过？</p>\n<p data-pid=\"PL8Z3kgq\">保护自己，从这里开始。你需要检查一下隔空投送的设置是否为「仅限联系人」。iOS 16.1.1开始，移除了“对所有人 AirDrop”选项，你只能在“关闭 / 仅限联系人 / 对所有人开放 10 分钟”三个选项中进行选择，默认情况下均为“仅限联系人”，避免在公众场所被骚扰。</p>\n<blockquote data-pid=\"j9tyhzgT\">设置方法：设置 - 通用 - 隔空投送 - 选择「仅限联系人」。</blockquote>\n<p><img src=\"https://pic1.zhimg.com/v2-8b8ee8b56a4595b217dbd34dbd980d09_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"688\" data-watermark=\"watermark\" data-original-src=\"v2-8b8ee8b56a4595b217dbd34dbd980d09\" data-watermark-src=\"v2-4da1c0911244d0d992a917a092af7712\" data-private-watermark-src=\"\"></p>\n<h3>5.关闭自动更新</h3>\n<p data-pid=\"dc3_3zZ5\">系统大版本尽量不要第一时间升级，因为系统大版本会推出新功能，刚出来总会有这样那样的bug，可以观察一段时间其他用户的反馈，没有问题的话再升级。小版本就无所谓了，可以看个人喜好升级。大版本就是比如iOS 16，小版本就是比如iOS 16.1这样。</p>\n<p data-pid=\"_7nQ9wUD\">关闭自动更新可以按需更新系统，将自主权掌握在自己手中。</p>\n<blockquote data-pid=\"0xpi9hKd\">关闭方法：设置 - 通用 - 软件更新 - 自动更新 - 将「下载iOS更新」关闭。</blockquote>\n<p><img src=\"https://picx.zhimg.com/v2-fde71729a173dc79fbf4696c2c0060de_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1536\" data-rawheight=\"1036\" data-watermark=\"watermark\" data-original-src=\"v2-fde71729a173dc79fbf4696c2c0060de\" data-watermark-src=\"v2-b0995ac6ae9a2d6b0be7e7ba952acac1\" data-private-watermark-src=\"\"></p>\n<h3>6.关闭App Store评分</h3>\n<p data-pid=\"IWZwwP-L\">有些软件使用了一段时间后，总是会弹框出来，让你去App Store给它打分，真的很烦。</p>\n<blockquote data-pid=\"hjB3uWBx\">关闭方法：设置 - App Store - 关闭「App内评分及评论」。</blockquote>\n<p><img src=\"https://pic1.zhimg.com/v2-e292b73446ffe5578ad12c86f0c241eb_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"659\" data-watermark=\"watermark\" data-original-src=\"v2-e292b73446ffe5578ad12c86f0c241eb\" data-watermark-src=\"v2-d2c12bb2209c7708907fab1575adbdca\" data-private-watermark-src=\"\"></p>\n<h3>7.关闭「抬起唤醒」</h3>\n<p data-pid=\"NJKzsLXv\">一拿起iPhone就亮了，有时候不需要它亮它也亮了，关闭「抬起唤醒」吧，会省电。</p>\n<blockquote data-pid=\"zSrXnf-u\">关闭方法：设置 - 显示与亮度 - 关闭「抬起唤醒」。</blockquote>\n<h3>8.关闭句号快捷键</h3>\n<p data-pid=\"MU9bpUvd\">有时候想打多个空格的，按两下空格之后却出现了句号，好无奈啊。关闭句号快捷键，让你指哪打哪，键指如飞。</p>\n<blockquote data-pid=\"jmfCY26k\">关闭方法：设置 - 通用 - 键盘 - 关闭「句号快捷键」。</blockquote>\n<p><img src=\"https://picx.zhimg.com/v2-a5975ee0a62c654188a42e083a00d8f6_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1536\" data-rawheight=\"620\" data-watermark=\"watermark\" data-original-src=\"v2-a5975ee0a62c654188a42e083a00d8f6\" data-watermark-src=\"v2-39e80245bada5a45b97601d6e7bbae99\" data-private-watermark-src=\"\"></p>\n<h3>9.关闭便捷访问</h3>\n<p data-pid=\"W1TsZF8U\">便捷访问就是下降半屏以轻松够到上半屏位置的App，打开之后很容易误触，也不常用，不如关闭。</p>\n<blockquote data-pid=\"f-BiV99A\">关闭方法：设置 - 辅助功能 - 触控 - 关闭「便捷访问」。</blockquote>\n<p><img src=\"https://picx.zhimg.com/v2-5dfdba716c8ec2a3d444c03db93f76a2_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1036\" data-watermark=\"watermark\" data-original-src=\"v2-5dfdba716c8ec2a3d444c03db93f76a2\" data-watermark-src=\"v2-6fe78eb43b6205221d3df0f5a174e268\" data-private-watermark-src=\"\"></p>\n<h3>10.隐藏主屏幕增加的搜索栏</h3>\n<p data-pid=\"33SeMkmv\">iOS 16中新增了主屏幕底部的搜索栏，有些人觉得很容易误触，想关闭它可以这样做。</p>\n<blockquote data-pid=\"dgbNiTOR\">设置方法：去「设置」-「主屏幕」-「搜索」-将「在主屏幕上显示」关闭。</blockquote>\n<p><img src=\"https://picx.zhimg.com/v2-6a0dc504ebe65a8dccc8a8bdd18d6250_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1536\" data-rawheight=\"1036\" data-watermark=\"watermark\" data-original-src=\"v2-6a0dc504ebe65a8dccc8a8bdd18d6250\" data-watermark-src=\"v2-1d4f4d1dcbdc2908a5ac0727c2db268a\" data-private-watermark-src=\"\"></p>\n<h3>11.关闭在其他设备上通话</h3>\n<p data-pid=\"QBacBEhy\">你有没有遇到这样的场景？iPhone来电话了，iPad也跟着响，一时间分不清哪边是手机，手忙脚乱，吵得脑壳疼。其实你只是需要关闭在其他设备上通话。当然，如果你享受这种忙碌的感觉，也可以不关闭。</p>\n<blockquote data-pid=\"UEHUVJTW\">设置方法：去「设置」-「电话」-「在其他设备上通话」-将「允许“在其他设备上通话”」关闭。</blockquote>\n<p><img src=\"https://picx.zhimg.com/v2-7c2623c02669dea7f7ffc73e8ae651fc_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1536\" data-rawheight=\"638\" data-watermark=\"watermark\" data-original-src=\"v2-7c2623c02669dea7f7ffc73e8ae651fc\" data-watermark-src=\"v2-89bdab3eb12c9d9f8bd28d6b311f3b1d\" data-private-watermark-src=\"\"></p>\n<h2>04 个性化你的iPhone</h2>\n<h3>1.设置本机名称</h3>\n<p data-pid=\"499tF-pt\">你可以自定义本机名称，在“隔空投送”、开启“个人热点”等时候会显示。</p>\n<blockquote data-pid=\"wl56iQTU\">设置方法：设置 - 通用 - 关于本机 - 「名称」 中修改。</blockquote>\n<h3>2.锁定屏幕设置</h3>\n<p data-pid=\"a3R-0T8T\">iOS 16最亮眼的更新就是锁定屏幕设置了，Apple从设计、功能等多个维度对锁屏界面进行了重构，让我们可以「自定义锁屏界面」，为我们带来了一种全新的感受。</p>\n<p><img src=\"https://picx.zhimg.com/v2-5421b7640f8036f3e158cc9b1be4d4bb_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1013\" data-rawheight=\"635\" data-watermark=\"watermark\" data-original-src=\"v2-5421b7640f8036f3e158cc9b1be4d4bb\" data-watermark-src=\"v2-3275f46997051256cd8327b3e9dbb312\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"VevjZT_5\">设置步骤比较复杂，具体可以参见我的这篇文章：</p>\n<a href=\"https://zhuanlan.zhihu.com/p/561436888\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\"internal\"><span class=\"invisible\">https://</span><span class=\"visible\">zhuanlan.zhihu.com/p/56</span><span class=\"invisible\">1436888</span><span class=\"ellipsis\"></span></a><h3>3.将小组件添加到主屏幕</h3>\n<p data-pid=\"cwHAUWh2\">将iOS上的小组件添加到主屏幕，可以突出信息主体的同时，不显得繁杂冗余，并且可以彰显个性。小组件分为大、中、小三个尺寸，统一采用圆角矩形设计，一体感十足，可以使高频使用的信息得到更直观的展示。</p>\n<blockquote data-pid=\"_Kg62Gde\">添加方法：在主屏幕上，按住任意小组件或空白区域，直到 App 开始晃动。<br>轻点左上角的“+”按钮。<br>选择一个小组件，选取小组件尺寸，然后轻点“添加小组件”。<br>轻点“完成”。</blockquote>\n<p><img src=\"https://pic1.zhimg.com/v2-affca0059ec3520db678fe52374fc258_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"1039\" data-watermark=\"watermark\" data-original-src=\"v2-affca0059ec3520db678fe52374fc258\" data-watermark-src=\"v2-4850e0aaf85a2bc133f0a576f62f44bb\" data-private-watermark-src=\"\"></p>\n<h3>4.设置自动锁定时长</h3>\n<p data-pid=\"rc_XIXGH\">当你把视线移开iPhone一段时间并不使用它时，安全起见，它会自动锁定，默认时长是1分钟，你可以自己修改时长。用久了你就会发现，设的太短常常锁的是你自己，比如看菜谱烧菜时，1分钟根本不够好么！</p>\n<p data-pid=\"VKQ38I7D\">所以个人建议可以设的时间稍长些，方便平时使用。</p>\n<blockquote data-pid=\"yuMR2nbg\">设置方法：设置 - 显示与亮度 - 自动锁定 - 选择你要的分钟数。</blockquote>\n<p><img src=\"https://picx.zhimg.com/v2-48447d7d78993b864888a288e2aa02f0_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1536\" data-rawheight=\"1036\" data-watermark=\"watermark\" data-original-src=\"v2-48447d7d78993b864888a288e2aa02f0\" data-watermark-src=\"v2-443fd7ea06abb1a8413b509a755a5735\" data-private-watermark-src=\"\"></p>\n<h3>5.选取铃声和震动模式</h3>\n<p data-pid=\"6EXQUA_j\">个性化自己的手机，很重要的一点就是选取与众不同的铃声和震动模式。</p>\n<p data-pid=\"3Vy68rW8\">在iPhone上把好听的歌设为自定义铃声需要用到一个软件——库乐队。库乐队1.6GB，很多博主都建议拿到手机就把它删掉，省内存，我的建议是——删是要删的，改完铃声再删也不迟。具体的设置方法我写了篇文章给大家参考：</p>\n<a href=\"https://zhuanlan.zhihu.com/p/572660810\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\"internal\"><span class=\"invisible\">https://</span><span class=\"visible\">zhuanlan.zhihu.com/p/57</span><span class=\"invisible\">2660810</span><span class=\"ellipsis\"></span></a><h3>6.设置专注模式</h3>\n<p data-pid=\"Bn4pIg9g\">iOS 15 引入的专注模式可谓是一柄提升效率的利器，它通过过滤通知来减少打扰，从而实现注意力的保持。</p>\n<p data-pid=\"2Gma3_9v\">轻点设置 - 专注模式 - 选择每类你想保持专注的类别，或者新建一个类别 - 选择你想允许/静音的App及联系人，就可以设置好一个简单的专注模式。甚至还可以更进一步，将其设置成能与锁屏联动，可以说十分实用了。</p>\n<h3>7.改变Siri声音</h3>\n<p data-pid=\"3FK39VTZ\">Siri声音也是可以选择的，不一定非是女声Siri。</p>\n<blockquote data-pid=\"stO92k-d\">改变方法：设置 - Siri与搜索 - Siri声音 - 选择你要的声音。</blockquote>\n<h2>05 让你的iPhone更好用的设置</h2>\n<h3>1.提前填好「医疗急救卡」，关键时候能救命</h3>\n<p data-pid=\"SwyxthS5\">当你设置好之后，急救人员可以从锁定屏幕访问你的重要医疗信息而不用输入密码，他们可以查看医疗状况，过敏反应，紧急联系人等，关键时刻可能能救你一命。</p>\n<blockquote data-pid=\"TqpVqCQt\">设置方法：设置 - 健康 - 医疗急救卡 - 填写对应项。</blockquote>\n<p><img src=\"https://picx.zhimg.com/v2-fe22be91105bf08a9cc0b236992410c1_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"1050\" data-rawheight=\"1934\" data-watermark=\"watermark\" data-original-src=\"v2-fe22be91105bf08a9cc0b236992410c1\" data-watermark-src=\"v2-b2fc7b510f568b4febb1ccc3ac7e19dc\" data-private-watermark-src=\"\"></p>\n<h3>2.iCloud</h3>\n<p data-pid=\"eF-xFVJK\">简单来说就是，如果你备份了你的 iPhone，手机丢了，数据可以复活。</p>\n<p data-pid=\"Eg3JoBWF\">照片存iCloud，可以减少对内存的占用。</p>\n<p data-pid=\"M2TH9TBE\">设置 iCloud 后，你将获得 5 GB 免费储存空间，空间不够还可付费使用50 GB、200 GB 或 2 TB 储存空间的 iCloud+ 方案。</p>\n<p><img src=\"https://picx.zhimg.com/v2-e9fea4173087bf642b224529421ad812_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"1002\" data-rawheight=\"1840\" data-watermark=\"watermark\" data-original-src=\"v2-e9fea4173087bf642b224529421ad812\" data-watermark-src=\"v2-5933e1a95c741414a7c55815aa7ded4c\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"sRaCEssx\">但要注意，开启iCloud同步后，在同一个Apple ID的某一个使用端进行更新，所有位置的文件都会及时更新，尽量避免当时就彻底删除哈，以免误删无法找回。</p>\n<blockquote data-pid=\"8CDDwKc1\">开启方法：设置 - Apple ID、iCloud、媒体与购买项目 - iCloud - 显示全部 - 开启每个想使用iCloud的App</blockquote>\n<h3>3.相机设置</h3>\n<p data-pid=\"rG_9L_D2\">打开网格构图，更容易在拍照时找到吸睛的“黄金分割点\"位置，也更容易拍的横平竖直，更好看。</p>\n<blockquote data-pid=\"JNiFaoD_\">开启方法：设置 - 相机 - 构图 - 打开「网格」。</blockquote>\n<p data-pid=\"ylc7DW7h\">打开镜像前置镜头，拍出来的照片与你自拍时看到的自己就是一样的！否则，拍出来眼歪口斜，怎么看怎么别扭。</p>\n<blockquote data-pid=\"Vp9Ewj8R\">开启方法：设置 - 相机 - 构图 - 打开「镜像前置镜头」。</blockquote>\n<h3>4.设置短信存储时间</h3>\n<p data-pid=\"yvHYWIfr\">现在的短信一般都是验证码、外卖、10086等，没什么有用信息，可以设置短信的最长存储时间，超时自动批量清除。</p>\n<blockquote data-pid=\"2mlcwkSI\">设置方法：设置 - 信息 - 保留信息。</blockquote>\n<p data-pid=\"UAW6fJeX\">PS：注意！比如将保留信息从1年改为30天，则30天前的短信都将被自动删除。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-c937416f8b0ddbcafa973c044d9298eb_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"512\" data-rawheight=\"375\" data-watermark=\"watermark\" data-original-src=\"v2-c937416f8b0ddbcafa973c044d9298eb\" data-watermark-src=\"v2-aa8bb602dda74e9c0c77da35c083cd23\" data-private-watermark-src=\"\"></p>\n<h3>5.将最常用的功能放到「控制中心」</h3>\n<blockquote data-pid=\"S5OaH7zF\">设置方法：设置 - 控制中心 - 点击最常用功能前的+号。</blockquote>\n<p><img src=\"https://pic1.zhimg.com/v2-fbd8a7e72f2e0fe39d309d51fed783df_720w.jpg?source=b1748391?rss\" data-caption=\"我的控制中心\" data-size=\"small\" data-rawwidth=\"1314\" data-rawheight=\"2658\" data-watermark=\"watermark\" data-original-src=\"v2-fbd8a7e72f2e0fe39d309d51fed783df\" data-watermark-src=\"v2-aaff3eec345f46f9a7e3c879f6599f1c\" data-private-watermark-src=\"\"></p>\n<h3>6.开启Siri</h3>\n<p data-pid=\"dsSGAe47\">建议开启，通过Siri查天气，设闹铃，解放双手。</p>\n<blockquote data-pid=\"45g-MXGP\">设置方法：设置 - Siri与搜索 - 用“嘿Siri”唤醒。</blockquote>\n<h3>7.关闭辅助触控</h3>\n<p data-pid=\"0s6evQpE\">这个功能一般用不上，桌面一直有个黑色圈圈能逼死强迫症，建议关闭。</p>\n<blockquote data-pid=\"FTF1gtf-\">关闭方法：设置 - 辅助功能 - 触控 - 将「辅助触控」关闭。</blockquote>\n<h3>8.屏蔽消息推送</h3>\n<p data-pid=\"wAtMVu5u\">根据需要选择性的屏蔽一些App的消息推送，可以让真正重要的消息不被淹没在茫茫信海中~</p>\n<blockquote data-pid=\"UscMpK1m\">屏蔽方法：设置 - 通知 - 选择对应的App - 关闭「允许通知」。</blockquote>\n<h3>9.开启注视感知功能</h3>\n<p data-pid=\"CNV0Z4Lx\">适合常看小说或者刷视频的小伙伴们，看一眼手机就不会变暗，但如果想省电建议关闭。</p>\n<blockquote data-pid=\"dt46uQ-j\">开启方法：设置 - 面容ID与密码 - 将「注视感知功能」开启。</blockquote>\n<p><img src=\"https://picx.zhimg.com/v2-9f9360e1d64c09421eda7bcb304770b5_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"358\" data-rawheight=\"725\" data-watermark=\"watermark\" data-original-src=\"v2-9f9360e1d64c09421eda7bcb304770b5\" data-watermark-src=\"v2-80fc92b6bb4a9afcda4caf450f8fda2a\" data-private-watermark-src=\"\"></p>\n<h3>10.开启原彩显示</h3>\n<p data-pid=\"EyAvuTe-\">iPhone上的原彩显示，通过检测不同环境下的色温，调节屏幕的颜色及强度，以适应环境光线，让图像显示更为自然，更和谐。</p>\n<blockquote data-pid=\"yiKcv1XM\">开启方法：设置 - 显示与亮度 - 将「原彩显示」打开。<br>或者从屏幕右上角向下轻扫打开控制中心，在控制中心长按亮度调节条，选择打开「原彩显示」即可。</blockquote>\n<p><img src=\"https://picx.zhimg.com/v2-58e6a3c53d2b6dade18c4fb30db61023_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"1036\" data-watermark=\"watermark\" data-original-src=\"v2-58e6a3c53d2b6dade18c4fb30db61023\" data-watermark-src=\"v2-79a3fa01908321e1ad9f461429301307\" data-private-watermark-src=\"\"></p>\n<h3>11.快捷输入文本替换</h3>\n<p data-pid=\"u0HEcumK\">常用短语可以设置文本替换来快捷输入，比如公司地址，口头禅等。</p>\n<blockquote data-pid=\"WSJlDJG5\">设置方法：去「设置」-「通用」-「键盘」-「自定义短语」中输入。</blockquote>\n<h2>06 iPhone手势和操作</h2>\n<h3>1.唤醒iPhone</h3>\n<blockquote data-pid=\"roYqoms6\">方法：按下电源键，或者拿起iPhone，或者轻点屏幕。</blockquote>\n<h3>2. 解锁iPhone</h3>\n<blockquote data-pid=\"5bKIv5TG\">方法：唤醒iPhone后，看一眼它，就会验证面容ID，锁图标从锁上变为打开，指示 iPhone 已解锁。</blockquote>\n<p><img src=\"https://picx.zhimg.com/v2-3e1e264bcfeab7097489999a166525fe_720w.gif?source=b1748391?rss\" data-caption=\"横屏Face ID解锁\" data-size=\"normal\" data-rawwidth=\"771\" data-rawheight=\"406\" data-watermark=\"watermark\" data-original-src=\"v2-3e1e264bcfeab7097489999a166525fe\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<h3>3. 前往主屏幕（软件们所在的页面）</h3>\n<blockquote data-pid=\"lVQjOHe6\">方法：无论何时，从屏幕底部边缘向上轻扫即可返回主屏幕。</blockquote>\n<h3>4. 调出负一屏</h3>\n<blockquote data-pid=\"10sEofGm\">方法：在屏幕上向右滑，直到最左一页。</blockquote>\n<h3>5.打开控制中心</h3>\n<p data-pid=\"pni3Lp6L\">控制中心是设置网络、声音大小、屏幕亮度等高频功能的快速入口。</p>\n<blockquote data-pid=\"3L8JAxMB\">方法：从右上角向下轻扫就能打开控制中心。</blockquote>\n<h3>6. 切换App</h3>\n<blockquote data-pid=\"I8E4SYCS\">方法：从屏幕底部边缘向上轻扫并在屏幕中间停顿一下，然后抬起手指，即可调出切换App界面，左右滑动选择需要的App，轻点它进入。</blockquote>\n<p><img src=\"https://pic1.zhimg.com/v2-d056e6c5dd73ea5095a5f849c40cd903_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"1314\" data-rawheight=\"2658\" data-watermark=\"watermark\" data-original-src=\"v2-d056e6c5dd73ea5095a5f849c40cd903\" data-watermark-src=\"v2-264bfff93f5212ebb0ad193f0c40547d\" data-private-watermark-src=\"\"></p>\n<h3>7. 完全退出App</h3>\n<p data-pid=\"AIoaCPib\">应用死了可以用这个方法强制关闭。</p>\n<blockquote data-pid=\"0ehLNH1c\">方法：在切换App的界面选择需要退出的App，将其上滑即可完全退出。</blockquote>\n<h3>8. 从锁定屏幕访问功能和信息</h3>\n<blockquote data-pid=\"RXtQptYI\">打开“相机”：向左轻扫。<br>打开”手电筒“：长按手电筒图标，然后松手。同理长按手电筒图标，然后松手，关闭手电筒。<br>查看较早的通知：从中间向上轻扫。<br>查看小组件：向右轻扫。</blockquote>\n<p><img src=\"https://picx.zhimg.com/v2-9f93854f285285a96829c6afe1f75399_720w.gif?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"320\" data-rawheight=\"569\" data-watermark=\"watermark\" data-original-src=\"v2-9f93854f285285a96829c6afe1f75399\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<h3>9. 来电静音/挂断</h3>\n<blockquote data-pid=\"kOPW3yeG\">来电时，按一下电源键静音，按两下电源键挂断。</blockquote>\n<h3>10. 静音开启/关闭</h3>\n<p data-pid=\"c8pI0PAU\">iPhone侧面的拨片，是实体的静音键。很多时候需要一键静音，轻轻一拨即可实现，再也不用按好多次音量键了。</p>\n<h3>11. 开关机组合键</h3>\n<blockquote data-pid=\"LdyoNx9H\">开机：长按电源键。<br>关机：同时按住电源键+任一音量键，然后滑动屏幕出现的滑块关机。</blockquote>\n<h3>12. 截屏组合键</h3>\n<blockquote data-pid=\"skXvAej3\">同时按住电源键和音量”+“键，然后快速松开即可截图。</blockquote>\n<h3>13. 录屏</h3>\n<ul>\n<li data-pid=\"DxmqQdAr\">点击「设置」-&gt;「控制中心」-&gt;「屏幕录制」前的绿色加号将其添加。</li>\n<li data-pid=\"zifqtvOY\">从右上角向下轻扫，呼出「控制中心」，点按「屏幕录制」的圆圈按钮，会倒数3秒，点击空白地方，直接开始录屏，此时左上角会出现红色的圆点就表示正在录屏。</li>\n<li data-pid=\"8LtFAF1l\">点击左上角的红色圆点，会弹出对话框，让你选择「停止屏幕录制？」，点击「停止」，则录屏文件自动存储到「照片」中。</li>\n</ul>\n<p><img src=\"https://pic1.zhimg.com/v2-06ecf5facc469e661f5a23d85028d3be_720w.gif?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"320\" data-rawheight=\"569\" data-watermark=\"watermark\" data-original-src=\"v2-06ecf5facc469e661f5a23d85028d3be\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<h3>14. 迅速回到屏幕顶部</h3>\n<p data-pid=\"u3LbZyU0\">在Safari、照片、通讯录、短信以及许多其它应用软件中，轻点屏幕顶部的状态栏(显示网络信息、时间、电池电量的位置)，即可迅速滚动至屏幕顶部。</p>\n<p><img src=\"https://picx.zhimg.com/v2-b88b9aabf294e70b6fbaf711fae27522_720w.gif?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"320\" data-rawheight=\"569\" data-watermark=\"watermark\" data-original-src=\"v2-b88b9aabf294e70b6fbaf711fae27522\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<h3>15. 整理桌面App图标</h3>\n<ul>\n<li data-pid=\"pRVG7_rE\">在主屏幕空白处长按，进入主屏幕编辑模式。</li>\n<li data-pid=\"di_KPEtl\">按住想要移动的App，另一只手左右滑动切换主屏幕页面，放至理想的位置后松手。</li>\n</ul>\n<p><img src=\"https://pica.zhimg.com/v2-b101f5efef0eeba734919429ded87036_720w.gif?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"320\" data-rawheight=\"569\" data-watermark=\"watermark\" data-original-src=\"v2-b101f5efef0eeba734919429ded87036\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<ul><li data-pid=\"VV1JRWN7\">也可移动到另一App上停留，自动生成文件夹存放，修改文件夹名称后，点击完成即可。</li></ul>\n<h3>16.快速恢复网络</h3>\n<p data-pid=\"uzEDwPLH\">只需要「打开飞行模式」-等待几秒钟 - 再「关闭飞行模式」即可，相当于重启网络。</p>\n<h2>07 使用小技巧</h2>\n<h3>1.锁定视频拍摄</h3>\n<p data-pid=\"Eero4qQd\">拍照界面长按拍照键即可拍摄视频，上滑还可以调节焦距，也可以同时右滑至小锁子锁定，这样就不用一直按着了。</p>\n<p><img src=\"https://picx.zhimg.com/v2-7cb8429c4c86d168b425a8af2eee738e_720w.gif?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"320\" data-rawheight=\"569\" data-watermark=\"watermark\" data-original-src=\"v2-7cb8429c4c86d168b425a8af2eee738e\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<h3>2.录视频的同时拍照</h3>\n<p data-pid=\"XnYAfXhJ\">有时在录视频的时候，发现景色很美，需要抓拍，这时可以直接点击右下角的白色圆点，在不影响拍视频的前提下也拍了照，再也不用从视频里截图了。</p>\n<p><img src=\"https://picx.zhimg.com/v2-6be6470de7ac5ed0b8ca1351668bf12d_720w.gif?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"320\" data-rawheight=\"569\" data-watermark=\"watermark\" data-original-src=\"v2-6be6470de7ac5ed0b8ca1351668bf12d\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<h3>3.自动曝光/自动对焦锁定</h3>\n<p data-pid=\"FL1QCElc\">拍照时手多少会有点晃动，为了避免拍出来的照片对焦没对上，开启自动曝光和自动对焦锁定就是一个好选择。</p>\n<p data-pid=\"SVPJ2oIL\">只需要在拍照界面，在需要对焦的物体上，长按3秒，即可启动。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-982c11172511eba5a1b34208f7b4c02d_720w.gif?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"320\" data-rawheight=\"569\" data-watermark=\"watermark\" data-original-src=\"v2-982c11172511eba5a1b34208f7b4c02d\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<h3>4.快速选择照片</h3>\n<p data-pid=\"RdIEBkI7\">打开照片App，然后点击选择，选中第一张图片后，我们首先横向滑动接着向下滑动（或对角线滑动）即可对照片进行快速批量选择。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-97ce9f20cf3489f2ebd976ecdf5aa91a_720w.gif?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"320\" data-rawheight=\"569\" data-watermark=\"watermark\" data-original-src=\"v2-97ce9f20cf3489f2ebd976ecdf5aa91a\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<h3>5.将照片隐藏</h3>\n<p data-pid=\"LHjnMGnu\">不想让别人看到你的某些照片，可以将它隐藏，iOS 16开始，「已隐藏」的相簿需要Face ID才能解锁了，彻底避免了尴尬，再也不用费尽心思隐藏了，让你的小秘密就是小秘密。</p>\n<p data-pid=\"7jdfpgEj\">只需在「照片」App里，点击「选择」-选中需隐藏的照片-点击三个点的图标-选择「隐藏」。</p>\n<p><img src=\"https://picx.zhimg.com/v2-5d0263ba5e084f6dec53b88461fa7168_720w.gif?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"320\" data-rawheight=\"693\" data-watermark=\"watermark\" data-original-src=\"v2-5d0263ba5e084f6dec53b88461fa7168\" data-watermark-src=\"\" data-private-watermark-src=\"\" data-qrcode-action=\"none\" data-tags=\"qrcode\"></p>\n<h3>6.删除的照片</h3>\n<p data-pid=\"9IOBPwAo\">删除的照片，其实还在你手机「最近删除」相册里，最多在这里待40天才会彻底删除，所以万一删错了，这里还有后悔药。而且系统升级iOS 16以后，「最近删除」相册也需要Face ID才能解锁了，平时删除一张照片，不到「最近删除」相册里彻底删除它也无所谓，反正别人看不到。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-f8611eba34081746da1ea04a0805829b_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"1039\" data-watermark=\"watermark\" data-original-src=\"v2-f8611eba34081746da1ea04a0805829b\" data-watermark-src=\"v2-f83903b322e0f1a041d37fb54978d725\" data-private-watermark-src=\"\"></p>\n<h3>7.一键抠图</h3>\n<p data-pid=\"RL_gXjf1\">升级iOS 16以后，在照片的前景主体上长按，会出现一圈白色闪电线，前景就被抠出来了，你可以把它拷贝或移动到备忘录或者其他App中发送。试过这个功能，我根本停不下来，恨不得把我所有照片都抠一遍~</p>\n<p><img src=\"https://pic1.zhimg.com/v2-df34f1e98eb8192ea61a62e53c1cee14_720w.gif?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"320\" data-rawheight=\"693\" data-watermark=\"watermark\" data-original-src=\"v2-df34f1e98eb8192ea61a62e53c1cee14\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<h3>8.截屏后快速保存</h3>\n<p data-pid=\"Hi85BXo0\">其实我们只需要将略缩图向左滑动就能完成保存，点击可以编辑，长按可以分享。</p>\n<p><img src=\"https://picx.zhimg.com/v2-2b9950e19362790b9dab167f2a9bfe32_720w.gif?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"320\" data-rawheight=\"569\" data-watermark=\"watermark\" data-original-src=\"v2-2b9950e19362790b9dab167f2a9bfe32\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<h3>9.编辑时自动修正</h3>\n<p data-pid=\"hk6bzXHf\">截屏后编辑时画的形状常常歪歪扭扭，画完停留一会儿，iPhone会自动识别你画的形状，并修正。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-605fe7bb53bf3d3c97af7c996a388ae7_720w.gif?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"320\" data-rawheight=\"693\" data-watermark=\"watermark\" data-original-src=\"v2-605fe7bb53bf3d3c97af7c996a388ae7\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<h3>10.敲两下背面截图</h3>\n<blockquote data-pid=\"28zNxOjr\">设置方法：设置-辅助功能-触控-轻点背面-轻点两下-选择「截屏」即可。</blockquote>\n<p><img src=\"https://picx.zhimg.com/v2-71985371558f5816eddd1c300525b24a_720w.gif?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"320\" data-rawheight=\"569\" data-watermark=\"watermark\" data-original-src=\"v2-71985371558f5816eddd1c300525b24a\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<h3>11.Safari阅读模式</h3>\n<p data-pid=\"PxlcJT0N\">在Safari浏览器中查看无广告或导航菜单的网页只要点击「地址栏」-「大小」-「显示阅读器」即可开启沉浸式阅读。</p>\n<p><img src=\"https://pica.zhimg.com/v2-0a87af939b14d0fcb7158384c1c14704_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"1039\" data-watermark=\"watermark\" data-original-src=\"v2-0a87af939b14d0fcb7158384c1c14704\" data-watermark-src=\"v2-173221de647402849f55018fb0ff0b90\" data-private-watermark-src=\"\"></p>\n<h3>12.快速下载图片</h3>\n<p data-pid=\"Cb0ruv7_\">任意选择一张图片，将图片向上下左右任意方向移动，使其变为悬浮状态，同时依次点选其他图片，将其拖动到「照片」App中，即可实现快速批量下载图片。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-85a910a2bcda15b4c7a51babb070cfbc_720w.gif?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"320\" data-rawheight=\"569\" data-watermark=\"watermark\" data-original-src=\"v2-85a910a2bcda15b4c7a51babb070cfbc\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<h3>13.调节手电筒亮度</h3>\n<p data-pid=\"liGgYENf\">在控制中心界面长按手电筒，可以滑动调节手电筒的光线亮度。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-5d96b5c526aafd65c73f2a75728130ad_720w.gif?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"320\" data-rawheight=\"569\" data-watermark=\"watermark\" data-original-src=\"v2-5d96b5c526aafd65c73f2a75728130ad\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<h3>14.计算器退格</h3>\n<p data-pid=\"mKadQHPc\">相信你肯定遇到过，用iPhone计算器计算时手滑输错了一位数，却怎么也找不到退格键，只能重来一遍，十分无奈。其实只需要在数字屏幕上向左或向右划，就可以删除最近输入的一位数。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-da0a4f6aed95432b0ac5bb16876dd15c_720w.gif?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"320\" data-rawheight=\"569\" data-watermark=\"watermark\" data-original-src=\"v2-da0a4f6aed95432b0ac5bb16876dd15c\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<h3>15.科学计算器</h3>\n<p data-pid=\"5VXc6g3P\">关闭方向锁定后，将屏幕横向旋转即可切换成科学计算器。</p>\n<p><img src=\"https://pica.zhimg.com/v2-a6a2e6d26b3284ad82eee71f3ebfa229_720w.gif?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"320\" data-rawheight=\"569\" data-watermark=\"watermark\" data-original-src=\"v2-a6a2e6d26b3284ad82eee71f3ebfa229\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<h3>16.聚焦搜索</h3>\n<p data-pid=\"3wLgjX-3\">输入长度，时间，温度，汇率，可实现单位换算，简单计算等功能，也可以充当Safari、地图、App Store的搜索栏，也可查看日期，单词，联系人等。</p>\n<p><img src=\"https://picx.zhimg.com/v2-c4a46e3afa3d1ed4e0d66fec6f7d93dc_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1536\" data-rawheight=\"1039\" data-watermark=\"watermark\" data-original-src=\"v2-c4a46e3afa3d1ed4e0d66fec6f7d93dc\" data-watermark-src=\"v2-5ac44964cafcf0f126b09215a04e81e4\" data-private-watermark-src=\"\"></p>\n<h3>17.备忘录扫描功能</h3>\n<p data-pid=\"XSLVwE7a\">不需要额外下载扫描全能王之类的扫描App了，在备忘录中按相机按钮-扫描文稿就可实现，自动模式下识别不是太准，建议采用手动模式。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-c2965ef7de89952331fdc85ba5a08b13_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"1039\" data-watermark=\"watermark\" data-original-src=\"v2-c2965ef7de89952331fdc85ba5a08b13\" data-watermark-src=\"v2-32d8710f062db683aa2b162578f745cf\" data-private-watermark-src=\"\"></p>\n<h3>18.设置键盘模糊音</h3>\n<p data-pid=\"1JRki7Un\">有些人拼音不太好，分不清前后鼻音，卷翘舌音等，可以设置模糊音智能联想，打字会更快。</p>\n<blockquote data-pid=\"5W3ANTFG\">设置方法：在「设置」-「通用」-「键盘」中开启「模糊拼音」。</blockquote>\n<p><img src=\"https://pic1.zhimg.com/v2-c6c065bc9d217cf25d67f873f463af6d_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1536\" data-rawheight=\"1039\" data-watermark=\"watermark\" data-original-src=\"v2-c6c065bc9d217cf25d67f873f463af6d\" data-watermark-src=\"v2-d5c93c50a26b4723af90f7b68ed74cf8\" data-private-watermark-src=\"\"></p>\n<h3>19.快速撤销输入</h3>\n<p data-pid=\"ST0dA9wy\">在键入文字的过程中难免会遇到输入错误的时候，这时我们只需要摇晃手机，就能对刚才的输入进行撤销操作。再摇一下，重做键入。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-ffd5c206965ba69007f559b8aa169543_720w.gif?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"320\" data-rawheight=\"569\" data-watermark=\"watermark\" data-original-src=\"v2-ffd5c206965ba69007f559b8aa169543\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<h3>20.跨App拖拽文本和图片</h3>\n<p data-pid=\"j5YpHNQG\">长按选择的文本或图片，可以拖拽至系统自带APP内，十分方便。</p>\n<p><img src=\"https://pica.zhimg.com/v2-893c993fe7914204baf49818b02b481e_720w.gif?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"320\" data-rawheight=\"569\" data-watermark=\"watermark\" data-original-src=\"v2-893c993fe7914204baf49818b02b481e\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"tHWNQ4T7\">关于iPhone更多更全的使用技巧，感兴趣的小伙伴可以看看我之前整理的一篇文章：</p>\n<a href=\"https://zhuanlan.zhihu.com/p/568246636\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\"internal\"><span class=\"invisible\">https://</span><span class=\"visible\">zhuanlan.zhihu.com/p/56</span><span class=\"invisible\">8246636</span><span class=\"ellipsis\"></span></a><h2>08 注意事项</h2>\n<h3>1.选择正规的充电头和数据线</h3>\n<ul>\n<li data-pid=\"YWdeodye\">选择正规厂商的充电头，想性价比高，买20W的第三方充电头就行，不一定要苹果官方的，比如安克、图拉斯、绿联等都行。</li>\n<li data-pid=\"xHcI4_Xn\">买有MFI认证的快充数据线，MFI认证是是apple公司Made for iPhone/iPad/iPod的英文缩写，也就是有这个认证的都是符合苹果标准的产品。</li>\n</ul>\n<h3>2.下载「Apple支持」App</h3>\n<p data-pid=\"0d314pL5\">Apple支持是苹果官方的一个App，大部分关于iPhone使用方面的问题，都可以通过这个App中”聊天“或”致电“的方式，联系到苹果客服，从而得到解答。</p>\n<p data-pid=\"tpFn6Pxa\">PS：一般工作日的白天才会有“聊天”选项。</p>\n<h3>3.Apple的订阅记得及时关闭</h3>\n<p data-pid=\"GGUkVU9E\">首次使用最容易忘记的就是，某款软件只想用一段时间，在App Store订阅了软件的年度/月度付费却忘记取消或者不知道怎么取消，导致下个付费期又被扣钱~</p>\n<blockquote data-pid=\"giBTy0d6\">关闭方法：设置 - Apple ID、iCloud、媒体与购买项目 - 媒体与购买项目 - 订阅 - 点击订阅中的软件 - 「取消订阅」。</blockquote>\n<h3>4.Apple Care+按需购买</h3>\n<p data-pid=\"SjijXHB-\">Apple Care+是苹果推出的一项付费保修服务计划，购买它可以：</p>\n<ol>\n<li data-pid=\"39fgE9Mj\">让硬件有限保修1年延长至2或3年。</li>\n<li data-pid=\"F3K-Hbrf\">不限次数意外损坏保修（2022年7月改的），每次收取相应服务费，原来一年两次的限制取消了。</li>\n<li data-pid=\"mfYqU6i-\">电池最大容量小于80%时可申请更换电池。</li>\n<li data-pid=\"dDKlyioX\">使用Apple品牌的App遇到任何问题时都可以得到官方回应。</li>\n</ol>\n<ul>\n<li data-pid=\"6xAh3Qko\">如果你使用习惯很好，一直好好保护手机，从来没摔过手机的，可以不买。</li>\n<li data-pid=\"Rsy7i9Qx\">不差钱或者裸机上阵的盆友，可以买起来，买了之后手机可以随便用。</li>\n</ul>\n<h2>最后，欢迎使用iPhone！</h2>\n<p><br></p>\n<p data-pid=\"aVXw1vT4\">以上。如有错误，还请不吝赐教。如有帮助，还请双击屏幕。靴靴！</p>\n<hr>\n<p data-pid=\"UkTnd9JH\">我是<a href=\"https://www.zhihu.com/people/2c29d7d56a8b4e0da1b7565da436fbe8\" class=\"internal\">@Jim Ye</a>，一个喜欢分享数字生活的苹果开发者，专注于苹果产品和效率技巧。<b>如果你喜欢我写的文章，欢迎「点赞」和「关注」哦~</b></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/jimye?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Jim Ye</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/461781319/answer/2759767148?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">317 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/270458785?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">第一次用iPhone，有没有什么需要注意的地方？</a><br><a href=\"http://www.zhihu.com/question/347783497?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">用iPhone需要注意什么？</a><br>\n","link":"http://www.zhihu.com/question/461781319/answer/2759767148?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"禄来双反避坑宝典：维修师傅偷偷告诉你的选购秘籍","date":"2022-12-08 06:47:06","description":"\n<h2>维修师傅有话说</h2>\n<p data-pid=\"EjG3rG53\">一直以来，有很多朋友把自己的爱机交给我维修保养，甚至把刚买到手的机器直接寄过来，让我帮忙检查成色和功能。在这先感谢大家的信任和支持</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-764f6d0d892cc0bad205daa4ac0742e0_b.jpg\" data-rawwidth=\"4032\" data-rawheight=\"3024\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"4032\" data-original=\"https://pic1.zhimg.com/v2-764f6d0d892cc0bad205daa4ac0742e0_r.jpg\"><figcaption>我的爱机</figcaption></figure><p data-pid=\"aV5lyJnt\">本质上，我是一个精通维修的禄来玩家。为广大玩家解决实际困难，帮助大家挑选到称心如意的相机，是我接单维修的主要目的。所以在目睹了太多选购禄来双反的朋友踩雷后，我实在没办法保持沉默</p>\n<p data-pid=\"sql_6Y1J\">作为维修师傅，我见识过禄来双反五花八门的故障、暗病、交易过程中的各种陷阱，以及坊间各种迷信与传言。对此，我总结出了一些选购禄来双反的实用原则和经验，在这偷偷告诉你</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-9a83d7944856330d6e602591fb66e75d_b.jpg\" data-rawwidth=\"4000\" data-rawheight=\"2652\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"4000\" data-original=\"https://pic2.zhimg.com/v2-9a83d7944856330d6e602591fb66e75d_r.jpg\"><figcaption>感谢陈总（右一）友情出镜</figcaption></figure><h2>选购禄来双反的简要原则</h2>\n<p data-pid=\"LSA441-D\">不管怎么挑选，主要和次要因素一定要分清。抓住挑选的重点，我们就成功了一半</p>\n<h3>1.机身成色尚佳</h3>\n<p data-pid=\"awN_pCjp\">好成色的机身不仅看着养眼，而且保值功能拔群，一旦缺钱要出售，变现的速度也更快。这都是显而易见的道理</p>\n<p data-pid=\"zP_I9fKj\">另外，按照我的经验：好成色的机身往往使用次数不多，内部零件磨损小，通常在简单润滑后就能恢复正常的功能和出色的手感</p>\n<p data-pid=\"WK3sBkOL\">而战斗成色的机身，普遍磨损严重，潜在故障比较多，往往在大规模维修后才能恢复正常功能，而且即使保养后，手感也做不到出色</p>\n<p data-pid=\"cDnT0iEx\">总之，好成色机身虽然价格较贵，但后期维修成本普遍不高；战斗成色机身虽然价格便宜，但后期维修成本容易超支，而且潜在故障比较多</p>\n<p data-pid=\"YryVx6_Y\"><b>所以我的建议就是：根据自己的经济实力，买成色相对最好的机身</b></p>\n<h3>2.没有过于明显的拼装</h3>\n<p data-pid=\"jrbwYUbj\">禄来双反，不同型号之间的好多零件都能互换，于是造成了拼装现象特别普遍，想必玩家朋友们对此都有耳闻</p>\n<p data-pid=\"6hEysSEL\">有一些拼装无关大雅，但有一些就比较夸张，最典型的就是一台F系列的机身，搭配的却是E系列的后背，和T系列的取景器。这种夸张的拼装机是很不受市场欢迎的，保值和变现能力都特别差，购买需谨慎</p>\n<p data-pid=\"3GWEZ0Co\">PS：很多玩家纠结于所谓的“三码合一”，也就是机身序列号，摄影镜头编号，取景镜头编号要相互对应，并把它看作衡量原装/拼装机的重要标准</p>\n<p data-pid=\"sNBZre0c\">不过，站在维修师傅的角度，我倒觉得“三码合一”说明不了太多事情。毕竟两个镜头的编号镌刻在压圈上，而压圈是可以随便换的……所以比起“三码合一”，我觉得可以更多把关注点放在镜头的成色是否完好上</p>\n<h3>3.不缺零件</h3>\n<p data-pid=\"MWQo9eVH\">假如你买了一台缺零件的禄来双反，又不幸强迫症发作，要把缺失的零件补齐，很快你就会意识到，这需要花费相当大的时间/金钱成本</p>\n<p data-pid=\"qSI1Nvr-\">有一些缺零件的机器看似便宜，但如果把缺失的零件费用算入价格的话，往往比完整的机器还要贵，此时就需要玩家仔细权衡了</p>\n<h3>4.功能基本正常</h3>\n<p data-pid=\"m_YSPfIu\">就算是成色崭新，不缺零件的禄来双反，对其进行保养与维修也是需要花钱的。所以自然存在的故障越少越好，最好是一切正常</p>\n<p data-pid=\"2kWbxDlh\">不过，对于卖家声称的“已做保养”，我建议审慎看待。“在某知名老师傅那里刚做完保养”，这句话是个人都会说，但实际情况到底如何呢？只有卖家自己清楚</p>\n<p data-pid=\"YOoTNrvv\">我买禄来是从来不看是否保养过的，反正拿到手后我都得自己重新保养一遍，不然没法放心</p>\n<h2>常见问题实例汇总</h2>\n<p data-pid=\"bcCCEU5v\">前面的叙述旨在为玩家们理清禄来双反选购的总体思路，下面我们来看一看市面上的禄来双反都有哪些各种常见的问题（为此我翻遍了闲鱼出售的禄来双反）</p>\n<p data-pid=\"HzRa3NDf\">这才是本文真正精彩的地方，欢迎来到“大家一起来找茬”！（案例中涉及机身/镜头序列号之处，皆打码处理，以避免纠纷）</p>\n<h3>成色问题汇总</h3>\n<p data-pid=\"bx2hduuu\">这里的成色问题，包括机身和镜头两部分。机身成色问题，主要包括掉漆/磕碰/变形；镜头成色问题，主要包括划痕/开胶/起雾/脱膜/发霉。我挑选一些大家容易忽略之处着重介绍</p>\n<p data-pid=\"sJENHduD\"><b>1.掉漆</b></p>\n<p data-pid=\"26QMo2Q6\">机身大部分的掉漆，大家都能从卖家发布的照片中很轻易的看出来，这没啥好说的。但有一个地方的掉漆会稍微隐蔽一些：<b>取景器两侧，肩带位置的掉漆</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-5f6a4b715b1b965d780801fd2e25beb6_b.jpg\" data-rawwidth=\"1083\" data-rawheight=\"1185\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"1083\" data-original=\"https://pic3.zhimg.com/v2-5f6a4b715b1b965d780801fd2e25beb6_r.jpg\"><figcaption>取景器的两侧被肩带摩擦造成的掉漆</figcaption></figure><p data-pid=\"2t3-mxp5\">有些时候，这个位置的掉漆会被取景器棱角反射的高光所掩盖，或者被肩带和其他的什么东西挡住，有可能会被买家遗漏掉</p>\n<p data-pid=\"pr6FOEdu\">就比如下边这个例子：卖家为了避免磨损掉漆，用黑色胶带把取景器和前脸的侧边给盖住了</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-dd1815e1bec55a9c8c737bbb09fa5077_b.jpg\" data-rawwidth=\"1080\" data-rawheight=\"1151\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-dd1815e1bec55a9c8c737bbb09fa5077_r.jpg\"><figcaption>取景器和前脸的侧边，被黑色胶带遮住</figcaption></figure><p data-pid=\"Nv2JNn0c\">胶带遮盖处的机身是否有掉漆，买家仅看照片是没法知道的。唯一的办法，是让卖家自己把胶带撕下来，展示一下实际情况</p>\n<p data-pid=\"pNhp4uxA\">买家到手后自己去撕开胶带检查，显然是有很大风险的。我不只一次见过有人把胶带撕开后，连带着把漆面给粘掉的情况</p>\n<p data-pid=\"Y3KEvwK0\"><b>很多胶带的粘性物质，对相机的漆面有软化作用！出于保险起见，我个人不建议随便往机身漆面上贴胶带</b></p>\n<p data-pid=\"HU5PtnAY\">有些机身乍一看上去，好像漆面还算完整，但有一部分漆面的颜色和光泽，总感觉与其他地方格格不入。这时候就要把眼睛放亮：你可能遇到大面积补过漆的机身了</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-7683dba8236202f38513da4e820afcb8_b.jpg\" data-rawwidth=\"1088\" data-rawheight=\"1145\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"1088\" data-original=\"https://pic1.zhimg.com/v2-7683dba8236202f38513da4e820afcb8_r.jpg\"><figcaption>典型的大面积补漆后的机身</figcaption></figure><p data-pid=\"Lq4Ty5Cc\">让我们看看这个案例：同样是黑漆，前脸侧边的黑漆显得比较有光泽，而取景器侧边的黑漆看上去则是哑光的感觉。另外，机身后盖最外侧这条凸缘，原厂应该是银色的，这里却涂上了黑漆</p>\n<p data-pid=\"ZanYFiT_\">显然，取景器和后盖的黑漆都是重新喷涂的</p>\n<p data-pid=\"UNislczm\">这种大面积补漆，欺骗性比较强，没有足够了解原厂漆艺的朋友比较容易中招，在挑选的时候要引起足够的重视</p>\n<p data-pid=\"RST2Beuy\"><b>2.磕碰与变形</b></p>\n<p data-pid=\"eNK8xc2x\">关于磕碰变形，重点就是关注机身的边角，这些地方是最容易在使用中受到磕碰的</p>\n<p data-pid=\"LKQbPGyO\">包括前脸的四个角，额头铭牌两侧，后盖下部的两个角，取景器后部的两个角</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-b35c5172ebc59ec91714bf348cf8654d_b.jpg\" data-rawwidth=\"1920\" data-rawheight=\"2560\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-b35c5172ebc59ec91714bf348cf8654d_r.jpg\"><figcaption>禄来双反易磕碰部位一览</figcaption></figure><p data-pid=\"0yyR8ZuF\">磕碰是比掉漆更麻烦，对于买家来说也更难接受的一种问题。磕碰基本上不可能依靠维修/钣金完全恢复旧观，而且有些地方的磕碰还会导致功能上出现问题，较为严重的磕碰变形要尽量避免</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-e169bfb6ddff446585b49bf545350abc_b.jpg\" data-rawwidth=\"525\" data-rawheight=\"612\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"525\" data-original=\"https://pic1.zhimg.com/v2-e169bfb6ddff446585b49bf545350abc_r.jpg\"><figcaption>取景器变形导致无法完全闭合</figcaption></figure><p data-pid=\"xL0nbewz\">举个例子，取景器的变形比较常见，最直观的现象就是取景器关闭时，无法合拢，总是翘起来。这种现象往往说明取景器受过磕碰/挤压变形，维修难度不小，也很难完全恢复</p>\n<p data-pid=\"QySaQ5vA\">前脸的磕碰变形，有时候会导致光圈/快门拨轮转动不畅甚至卡死，严重撞击的甚至会破坏对焦系统</p>\n<p data-pid=\"r99RHBqU\">后盖的磕碰则可能会使后盖开闭困难，甚至会造成片仓漏光</p>\n<p data-pid=\"N1mvYV6i\">鉴于磕碰可能造成的严重后果，建议大家尽量避免选购有严重磕碰的禄来双反。一些轻微的小凹坑倒是可以接受</p>\n<p data-pid=\"VLny5Ms7\"><b>3.镜头镀膜老化与脱膜（重中之重！！！）</b></p>\n<p data-pid=\"AxH4L5Zs\">镀膜老化与脱膜，可谓是禄来双反最最常见的通病</p>\n<p data-pid=\"ziIuDcoZ\">根据我以往维修的经验：<b>越早期的机身越容易发生镀膜问题；蔡司planar镜头的镀膜普遍比施耐德xenotar的更容易老化脱落；而且镀膜问题普遍集中在2.8系列产品的摄影镜头上</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-cecb8df6d3ae34fd6d8f7af8b5bcd570_b.jpg\" data-rawwidth=\"1080\" data-rawheight=\"1265\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-cecb8df6d3ae34fd6d8f7af8b5bcd570_r.jpg\"><figcaption>摄影镜头镀膜老化脱落</figcaption></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-adbd36885b8433e903cb69e2f6053e37_b.jpg\" data-rawwidth=\"1543\" data-rawheight=\"868\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"1543\" data-original=\"https://pic4.zhimg.com/v2-adbd36885b8433e903cb69e2f6053e37_r.jpg\"><figcaption>取景镜头的镀膜老化脱落</figcaption></figure><p data-pid=\"hAvAXsFN\">镀膜老化一开始是呈点状，或者沿划痕出现的零星镀膜淡化和脱落，随着时间流逝，脱落的区域慢慢向四周扩展，形成大片的镀膜脱落，直到整个镜片的镀膜完全崩解，露出白玻璃</p>\n<p data-pid=\"KxhHeK7I\">平心而论，镀膜老化脱落，对于镜头的光学素质损害很有限：基本就是反差略微降低，眩光稍有增加。但它对于机身价值的影响却是非常之大的，镀膜完好和镀膜老化的禄来双反，价格甚至会出现天差地别的情况</p>\n<p data-pid=\"1h5ifiwR\"><b>然而值得注意的是，不是所有的镀膜老化，都像上例那样一眼可见。有相当一部分的镀膜脱落是非常隐蔽的，大多数玩家可能终生都没有发现！</b></p>\n<p data-pid=\"Nr-h_BSo\">让我们一起看看下面的几个实例</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-14317d86c6072994315e37600a705621_b.jpg\" data-rawwidth=\"1225\" data-rawheight=\"1439\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"1225\" data-original=\"https://pic2.zhimg.com/v2-14317d86c6072994315e37600a705621_r.jpg\"><figcaption>很完美的镜片</figcaption></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-9f05447f8fb42f2a5834d36f698edeae_b.jpg\" data-rawwidth=\"1080\" data-rawheight=\"911\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-9f05447f8fb42f2a5834d36f698edeae_r.jpg\"><figcaption>光滑而通透的镜片</figcaption></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-3cfee4d4563b37b7884ffe203a53113a_b.jpg\" data-rawwidth=\"1120\" data-rawheight=\"1088\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"1120\" data-original=\"https://pic3.zhimg.com/v2-3cfee4d4563b37b7884ffe203a53113a_r.jpg\"><figcaption>镜片成色不错</figcaption></figure><p data-pid=\"QQjcZUg_\">乍一看上去，这三个禄来双反的摄影镜头好像都挺完美。卖家描述的也都是“镜片三无，镀膜完好”之类的话。但朋友们，千万不要被事物的表象所欺骗。</p>\n<p data-pid=\"VZ2Fkeb6\"><b>镜片看上去光滑，真的就代表着镀膜完好吗？！</b></p>\n<p data-pid=\"pMlYujkN\">让我们看一看真正称得上镀膜完好的镜片，究竟长啥样：</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-a11c7f8f19902700e60aee32223451a2_b.jpg\" data-rawwidth=\"1920\" data-rawheight=\"2560\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic3.zhimg.com/v2-a11c7f8f19902700e60aee32223451a2_r.jpg\"><figcaption>这才是真·镀膜完好的机器</figcaption></figure><p data-pid=\"RTia4__k\">蔡司后期的planar 80 2.8镜头，每一个镜片与空气接触的光学表面，原厂都镀上了金黄色/蓝紫色的镀膜，这意味着我们看到的镜片反光，都应该是金黄色/蓝紫色的才对</p>\n<p data-pid=\"feQHkq4P\">我们再来重新审视一下刚才的三个例子</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-a1a2b545c9231861bb2f17f675d7abee_b.jpg\" data-rawwidth=\"1225\" data-rawheight=\"1427\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"1225\" data-original=\"https://pic3.zhimg.com/v2-a1a2b545c9231861bb2f17f675d7abee_r.jpg\"><figcaption>这个镜片反光是白色的，剩下都是金黄色的</figcaption></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-fba82a7b5eeb9a29966e99b458629046_b.jpg\" data-rawwidth=\"1080\" data-rawheight=\"911\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-fba82a7b5eeb9a29966e99b458629046_r.jpg\"><figcaption>窗子在镜片上的反光，唯独这个是白色的</figcaption></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-7ea0ca1c8a0b64628828f3c6463dd635_b.jpg\" data-rawwidth=\"1120\" data-rawheight=\"1088\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"1120\" data-original=\"https://pic2.zhimg.com/v2-7ea0ca1c8a0b64628828f3c6463dd635_r.jpg\"><figcaption>同样是窗户在镜片上的反光，这个也是白色的</figcaption></figure><p data-pid=\"yLOQ_ilb\">生活的经验告诉我们，事出反常必有妖。蔡司planar镜头金黄色的镀膜，怎么会出现白色的反光呢？</p>\n<p data-pid=\"0IWCJPNN\"><b>真相只有一个：镜头最外侧的那个镀膜，已经全部荡然无存了。露出来无镀膜的玻璃镜片，反光自然是白色的</b></p>\n<p data-pid=\"HqQeF3yw\">老镜头玩家口中的“无膜白头”这个称呼，就是这么来的</p>\n<p data-pid=\"n9Ow9QNz\">这些看似完美的镜头，最外侧的镀膜已经全部脱落，所以看上去光滑细腻。加上白色与金黄色相差不大，很多玩家在不知情的情况下并不会过多关注，所以欺骗性非常强，甚至相当一部分经验丰富的老玩家都中过招</p>\n<p data-pid=\"lbudlPTP\">国内外经常可以见到，使用去膜水将老化的镀膜强行擦除，或者对镜片进行抛光翻新的案例，对此我略有耳闻</p>\n<p data-pid=\"Qv-RodDD\"><b>所以我再强调一遍鉴别镜头脱膜的方法：检查镜头对于光源的反光颜色与明暗情况，如果镜片出现一个或多个明亮的白色反光，基本可以确定存在镀膜脱落的情况，建议谨慎购买</b></p>\n<p data-pid=\"iapGA98x\"><b>4.镜片开胶（同样是重中之重！！！）</b></p>\n<p data-pid=\"embcnKVS\">禄来双反的镜头中不乏胶合镜组，这种镜组使用加拿大树胶将两个单独的镜片粘合在一起。有一些胶合镜组在历经岁月洗礼后，会发生开胶的情况</p>\n<p data-pid=\"B7hGvHsF\">开胶也往往发生在2.8系列上，3.5系列开胶较为少见</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-d232226dca6d3bb55c841ddf43cfaba3_b.jpg\" data-rawwidth=\"709\" data-rawheight=\"454\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"709\" data-original=\"https://pic4.zhimg.com/v2-d232226dca6d3bb55c841ddf43cfaba3_r.jpg\"><figcaption>禄来2.8，3.5系列镜头结构图</figcaption></figure><p data-pid=\"bO7QkWYp\">最常见的开胶，会镜片的边缘出现的黄色的崩解纹理和碎片状的痕迹。这是作为粘合剂的加拿大树胶，逐渐老化失去韧性和粘性造成的，如下图所示</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-99359aae278e80f9d3644f7a44899f17_b.jpg\" data-rawwidth=\"858\" data-rawheight=\"978\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"858\" data-original=\"https://pic4.zhimg.com/v2-99359aae278e80f9d3644f7a44899f17_r.jpg\"><figcaption>常见的开胶表现</figcaption></figure><p data-pid=\"yp37-WYc\">这种开胶带有很明显的色彩和纹理特征，比较容易辨识，一般在挑选的时候很容易被大家发现</p>\n<p data-pid=\"m_cLqcAt\">但还有一种比较少见的开胶，其症状非常隐蔽，一些老玩家可能都会在这上边栽跟头</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-03d92a1e0a4ebe1da30e3204318f3402_b.jpg\" data-rawwidth=\"1575\" data-rawheight=\"2100\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"1575\" data-original=\"https://pic3.zhimg.com/v2-03d92a1e0a4ebe1da30e3204318f3402_r.jpg\"><figcaption>还是那句话，事出反常必有妖</figcaption></figure><p data-pid=\"wqhSIfYZ\">这是我在二手相机店发现的一台禄来。刚拿到手我就发现，红圈里的这个现象不太对劲。偏偏在这个地方，有一个边界特别明显的新月形区域，很明显的反射了镜头压圈上的铭文</p>\n<p data-pid=\"V3bWUD9y\">沿着镜头边缘转到其他方向，这个现象马上就消失不见</p>\n<p data-pid=\"lO_eUJrN\">我之前遇到过几次这种现象，于是果断把光圈全开，快门开启，透过光观察。在刚才红圈处的地方，出现了明显的暗区。显然，这也是胶合镜组开胶了</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-0f07869be4deba1bbf61396902219f37_b.jpg\" data-rawwidth=\"205\" data-rawheight=\"224\" data-size=\"normal\" class=\"content_image\" width=\"205\"><figcaption>开胶的位置在这</figcaption></figure><p data-pid=\"cxpasmZF\">这种开胶与一开始提到的那种常见开胶不同，它不是慢慢老化扩展形成的，而是胶合面在应力作用下突然开裂，瞬间在两个镜片间形成了一个光滑的空气薄层。开胶处的反射率会增大不少，而且往往会发生光干涉现象，形成带虹彩的强反光区域</p>\n<p data-pid=\"JKub9itj\">开胶处的强反光区域，方向性特别强。换一个方向看，就会变成暗区，仿佛镜片上出现了缺口，如下图所示</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-de990e10f6c50a95dea3f07217a06643_b.jpg\" data-rawwidth=\"599\" data-rawheight=\"701\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"599\" data-original=\"https://pic4.zhimg.com/v2-de990e10f6c50a95dea3f07217a06643_r.jpg\"><figcaption>红圈处就是两处开胶的地方</figcaption></figure><p data-pid=\"O-kstOOM\"><b>但鉴别开胶最稳妥的方法，就是光圈全开并打开快门，透过光对镜头进行检查，要特别注意镜片边缘。如果存在形状不规则的暗区，基本就可以确定镜头开胶了</b></p>\n<p data-pid=\"Mw2bRFEG\">开胶维修很复杂，特别是蔡司planar 80 2.8，而且重新胶合的风险也比较大。遇到开胶的禄来双反，建议谨慎购买</p>\n<p data-pid=\"rha5mDQd\"><b>5.镜片划伤、发霉与起雾</b></p>\n<p data-pid=\"GdEnBdWF\">镜片的划伤往往出现在镜头前后两个外表面上，而镜片发霉则经常出现在镜间快门前后两个内表面上</p>\n<p data-pid=\"05S3WkPm\">检查时最好在自然光下，或者靠近面积足够大的光源，比如吸顶灯或者灯箱，从各个角度观察各个镜片的反光和透光情况。使用手机，手电筒这种发光面积较小的光源，反而不容易进行观察</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-41e7001e13955b4a19d67978e886224a_b.jpg\" data-rawwidth=\"1920\" data-rawheight=\"2560\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic3.zhimg.com/v2-41e7001e13955b4a19d67978e886224a_r.jpg\"><figcaption>利用吸顶灯进行观察，最好靠近光源一些</figcaption></figure><p data-pid=\"0GIKeo_5\">镜片表面的擦痕与划伤是很容易分辨出来的，粗略一看表面就不光滑，如下图所示</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-a415c1765e7221b154b4c5542b047ff9_b.jpg\" data-rawwidth=\"1225\" data-rawheight=\"1438\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"1225\" data-original=\"https://pic2.zhimg.com/v2-a415c1765e7221b154b4c5542b047ff9_r.jpg\"><figcaption>镜片擦痕与划伤</figcaption></figure><p data-pid=\"jxpVlmyO\">镜片发霉也相对容易分辨，树枝状/雪花状的霉丝是非常有辨识性的</p>\n<p data-pid=\"p1pK72Jy\">唯一需要注意的是，有好多镜头曾经发过霉，但后来被清理过。但这种镜头很难完全恢复到原来的样子，发霉多少都会留下痕迹。因为霉菌的腐蚀性，曾经发过霉的地方，镀膜普遍都会有淡化，甚至脱落的现象，如下图所示</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-77adadb7f8127f3aa697df874f0d0d02_b.jpg\" data-rawwidth=\"1080\" data-rawheight=\"1275\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-77adadb7f8127f3aa697df874f0d0d02_r.jpg\"><figcaption>红圈内，有很明显的发霉造成的镀膜脱落现象</figcaption></figure><p data-pid=\"_bT-RG9Z\">这种辨识性也比较强，不再赘述</p>\n<p data-pid=\"8zaqZss0\">镜片起雾往往是镜头暴露在潮湿环境中太久，镀膜甚至玻璃发生了腐蚀；但有一些起雾是胶合镜组老化造成的。总的来说是比较棘手的问题，应当尽量避免购买</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-e4753194933fd9c3f41f919ce7f23fb3_b.jpg\" data-rawwidth=\"1080\" data-rawheight=\"1272\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-e4753194933fd9c3f41f919ce7f23fb3_r.jpg\"><figcaption>镜头起雾</figcaption></figure><p data-pid=\"flIlaPem\"><b>6.镜头翻新</b></p>\n<p data-pid=\"mx_Tkx30\">有一件事需要注意：针对禄来双反的镜头镀膜老化，划伤，发霉，起雾等问题，市面上已经有镜片抛光的业务，甚至还可以重新镀膜。于是禄来镜头翻新的情况近些年越来越常见。但目前来看，市面上抛光重镀的业务实际上良莠不齐，有相当多的一部分可谓非常粗略</p>\n<p data-pid=\"Nh_6k5cb\">我们知道，镜片表面的一些细小瑕疵是可以通过抛光来解决的。按照光学透镜加工的工艺流程，镜片抛光需要压制对应的沥青抛光模具，这样才能在抛光过程中保持镜片的面型不变，而且最后还需要进行面型检测，可谓是很严谨的工艺</p>\n<p data-pid=\"kMr06DDs\">如果镜片表面的划伤过于深入，单纯的抛光就没办法解决了，因为它的磨削效率实在是太低。需要恢复到细磨阶段重新进行磨制，然后才能抛光</p>\n<p data-pid=\"n_bH0m8_\">重新进行细磨，压制沥青模进行抛光，一般来说只有专业的光学加工厂才有能力进行操作。然而据我观察，市面上绝大部分的抛光业务，都属于比较粗放的自由抛光：使用羊毛轮和抛光膏/抛光乳剂，直接对镜片进行打磨抛光</p>\n<p data-pid=\"ruM5KceQ\">光学加工是一个需要精确到纳米级别的工艺（一般在光学加工中，采用表面PV值来衡量面型精度，常见光学镜片的面型精度通常在1/4-1/10波长左右，1波长=555纳米）</p>\n<p data-pid=\"gAa_VQWL\">使用羊毛轮这种工具进行高速抛光，抛光过后镜片表面的确变得光滑，但我们也能猜到，镜片的面型应该也毁的差不多了。这种镜片的成像效果可想而知</p>\n<p data-pid=\"xtCw4LJF\">何况在抛光之前也没有进行细磨，那些比较深的划痕并没有打磨平整。而这些划痕在抛光后会变的凹凸不平，会让镜片呈现类似“橘皮”样的波纹</p>\n<p data-pid=\"llsa3Hq_\">利用镜片的反光进行观察，这种自由抛光后的橘皮纹理会非常明显，我之前曾经见到过一回，可惜没有留下照片，只能用文字描述</p>\n<p data-pid=\"MzHCsoxi\">所以说，如果是打算把自用的禄来双反镜头进行翻新处理的话，建议谨慎选择委托方，如有渠道，看看能不能联系有资质的光学加工厂代为处理（要留好充足的预算，一般批量加工的光学厂是很不愿意接单件加工的）</p>\n<p data-pid=\"Oj_JZzIx\">如果是在市面上选购禄来的话，如果发现镀膜崭新，但镜片表面有橘皮状纹理的机器，建议大家多多留一个心眼</p>\n<p data-pid=\"LG4id1Hl\">总结一下：无论是机身还是镜头的成色问题，基本都是不可完全修复的，所以作为禄来玩家而言，我建议大家在选购自己的爱机时，首要的考虑是在自己的经济能力范围内，挑选一台成色尽量好，特别是镜头尽量新的机器</p>\n<p data-pid=\"r0J51jrh\">只要认真细致的使用与保管，让相机永葆青春并不是什么困难的事情，所以不用担心成色崭新的禄来双反，在使用过程中会变旧，除非你是那种特别粗放的玩家：喜欢斜挎相机到处走；随便把相机就往地上放；往装其他杂物的包里塞；或者把禄来挂在脖子上，丝毫不避讳衣服上的金属拉链和纽扣……</p>\n<p data-pid=\"8C3P0uUR\">保持爱机的良好成色与状态，是每个热爱老相机的玩家的应有之义。除非是战地记者，不然短时间就把自己的相机从崭新用到战斗成色，只能说实在是太粗心</p>\n<h3>拼装问题汇总</h3>\n<p data-pid=\"-_GTe1Wm\">之前我们说过，禄来双反的拼装现象比较严重。总的来说，早期型号的拼装现象较为少见，其次是E和T系列，拼装现象最为泛滥的是F系列，因为可以拆卸替换的零件最多</p>\n<p data-pid=\"oxqyVW8F\">下面我用几个例子讲解一下常见的拼装现象，供大家参考</p>\n<p data-pid=\"wbob_3lz\"><b>1.取景器拼装</b></p>\n<p data-pid=\"u6sEp0YS\">这种拼装基本仅发生在F系列机身上。因为F原厂的取景器市面二手价格普遍比较昂贵，同时禄来科德VB，3.5T，以及magic系列的快拆取景器可以直接安装在F系列的机身上，就造成了这种拼装现象极为常见</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-d362d13d08810d48d8a142bb81b27be0_b.jpg\" data-rawwidth=\"1225\" data-rawheight=\"1431\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"1225\" data-original=\"https://pic1.zhimg.com/v2-d362d13d08810d48d8a142bb81b27be0_r.jpg\"><figcaption>F系列原厂取景器的特征</figcaption></figure><p data-pid=\"5L3dxXDt\"><b>F系列机身的原厂取景器，最明显的特征就是：后侧带有快速取景所用的对焦放大镜</b>。如红圈处所示</p>\n<p data-pid=\"pu1ItRa-\">而拼装所用的VB，3.5T，以及magic系列机身的取景器，都属于低配版本，这个对焦放大镜被取消（同时取景器内部有一个小反光镜也被取消，但一般从取景器外部看不见），如下图所示</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-403371a143ca1d38eb8311fbeaed3a53_b.jpg\" data-rawwidth=\"1225\" data-rawheight=\"1431\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"1225\" data-original=\"https://pic4.zhimg.com/v2-403371a143ca1d38eb8311fbeaed3a53_r.jpg\"><figcaption>3.5T搭配的原厂取景器</figcaption></figure><p data-pid=\"XN_yI04V\">一般市面上常见的拼装情况：F系列机身，拼装了一个VB，3.5T，或者magic系列的低配版取景器，如下图所示</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-cc0a768c22cb79950b5f58727d6e662d_b.jpg\" data-rawwidth=\"900\" data-rawheight=\"1078\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"900\" data-original=\"https://pic2.zhimg.com/v2-cc0a768c22cb79950b5f58727d6e662d_r.jpg\"></figure><p data-pid=\"GAzO1Jj0\">通过观察取景器后部是否有对焦放大镜，就可以很轻松的辨别拼装现象，不再赘述</p>\n<p data-pid=\"JYo3G__v\"><b>2.后背拼装</b></p>\n<p data-pid=\"FXL_XLRp\">禄来双反的中后期型号，后背都是可以拆卸的，各种型号的后背尺寸基本一致，就造成了存世的禄来双反，后背拼装的现象同样非常普遍</p>\n<p data-pid=\"6hR5bGZc\">下面我列举常见的几种型号的后背样式，让大家学会辨别禄来后背拼装</p>\n<p data-pid=\"IgFjos4K\"><b>F系列的后背：</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-d11b78e446aa3cfd170be5595533ba35_b.jpg\" data-rawwidth=\"1225\" data-rawheight=\"1441\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"1225\" data-original=\"https://pic2.zhimg.com/v2-d11b78e446aa3cfd170be5595533ba35_r.jpg\"><figcaption>F系列的后背</figcaption></figure><p data-pid=\"UYQRlxz4\">F系列后背，最明显的特征就是后背中央的表格盘。请记住它的样子</p>\n<p data-pid=\"hcUSOm1W\">F系列后背的底部长这样</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-59ffa849c564f0184126e750959c2aee_b.jpg\" data-rawwidth=\"1453\" data-rawheight=\"1018\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"1453\" data-original=\"https://pic3.zhimg.com/v2-59ffa849c564f0184126e750959c2aee_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"vOkVvr3I\"><b>E系列的后背：</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-b96aac24fcb79aae4e3c7e8ac970f888_b.jpg\" data-rawwidth=\"1080\" data-rawheight=\"1275\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-b96aac24fcb79aae4e3c7e8ac970f888_r.jpg\"><figcaption>E系列的后背</figcaption></figure><p data-pid=\"KJKBODRT\">E系列的后背，最明显的特征仍然是后背中心的表格盘。请记住它的样子，以及与F系列后背的不同之处</p>\n<p data-pid=\"GFoGpkub\">E系列后背的底部长这样，跟F系列是基本一样的</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-0101cf42a0a54688394fd973b979ce5d_b.jpg\" data-rawwidth=\"1080\" data-rawheight=\"1248\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-0101cf42a0a54688394fd973b979ce5d_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"sNWgW4TL\"><b>3.5T的后背：</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-d23bcfb434198cb4a4eb304a0a95b5ac_b.jpg\" data-rawwidth=\"1225\" data-rawheight=\"1445\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"1225\" data-original=\"https://pic1.zhimg.com/v2-d23bcfb434198cb4a4eb304a0a95b5ac_r.jpg\"><figcaption>3.5T的后背</figcaption></figure><p data-pid=\"101Xa8OA\">3.5T的后背，最明显的特征还是后背中心的表格盘。请记住它的样子，以及它与E，F系列后背的不同之处</p>\n<p data-pid=\"qKObr10v\">另外，3.5T的后背，底部也与E，F系列的后背不一样</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-c22a81c1b4de1f21d2666aa545579623_b.jpg\" data-rawwidth=\"1225\" data-rawheight=\"1431\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"1225\" data-original=\"https://pic4.zhimg.com/v2-c22a81c1b4de1f21d2666aa545579623_r.jpg\"></figure><p data-pid=\"EL1v9DAY\">底部这个锁扣明显比E，F系列的简化了很多，毕竟3.5T是普及版禄来双反，简配是正常的（搞笑的是禄来破产后的FX和GX，也是用的同款简配版后背，甚至把表格盘也给省掉了）</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"TGBUG-uF\"><b>VB的后背：</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-d0a80d80eefbdbe6810631ea1d419b26_b.jpg\" data-rawwidth=\"1225\" data-rawheight=\"1405\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"1225\" data-original=\"https://pic3.zhimg.com/v2-d0a80d80eefbdbe6810631ea1d419b26_r.jpg\"><figcaption>VB的后背</figcaption></figure><p data-pid=\"pFJmm6n7\">VB的后背跟3.5T的后背如出一辙，连表格盘的文字都一模一样。唯一不同的是，VB的后背在箭头处所指的凸缘涂有黑漆，而3.5T则是银色的金属镀层</p>\n<p data-pid=\"-8_ER5Xv\">VB后背的底部跟3.5T也是一样的。当然，边上的凸缘也还是黑漆涂装</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-c0e5dbdf94485f2aa3f225d7ec0f3a3e_b.jpg\" data-rawwidth=\"1225\" data-rawheight=\"1400\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"1225\" data-original=\"https://pic3.zhimg.com/v2-c0e5dbdf94485f2aa3f225d7ec0f3a3e_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"XWvggNPt\"><b>Magic系列的后背：</b></p>\n<p data-pid=\"01qgByjD\">magic系列的后背属于简配版中的简配版，连后背中间的表格盘都取消了，除此之外跟VB的后背一致</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-0f07176916cf1f8b317a29dfce320372_b.jpg\" data-rawwidth=\"1225\" data-rawheight=\"1441\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"1225\" data-original=\"https://pic3.zhimg.com/v2-0f07176916cf1f8b317a29dfce320372_r.jpg\"><figcaption>magic系列的后背</figcaption></figure><p data-pid=\"eNI0MlNY\">由于前一段时间，国内外的magic的机身普遍很便宜，有不少被人当作拼装的耗材买入。如果你在网上看见了缺少取景器/后背的magic，那十有八九是被人拿去拼装剩下的所谓“药渣机”（就跟现在网上海量的缺件哈苏500elm是一个道理）</p>\n<p data-pid=\"Zoluk1NF\"><b>后背拼装实例：</b></p>\n<p data-pid=\"OIKmJx4n\">该了解的基础知识我们已经介绍完了，现在看看真实的例子，相信大家能很快的分辨出拼装情况</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-3e6926640bfdcf30c09d02e42d70e7b4_b.jpg\" data-rawwidth=\"1414\" data-rawheight=\"1198\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"1414\" data-original=\"https://pic1.zhimg.com/v2-3e6926640bfdcf30c09d02e42d70e7b4_r.jpg\"><figcaption>后背拼装实例1</figcaption></figure><p data-pid=\"O7ztKfQA\">根据取景器和测光表的样式，这是一台F系列机身，然而却跟E系列的后背拼装在了一起</p>\n<p data-pid=\"44YayDWP\">同时我们不难看出，取景器和后背都是重新补过漆的。本来应该是银色的地方如今都被黑漆覆盖</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-fde3bd3901b67ce7c680fd7e4e65847f_b.jpg\" data-rawwidth=\"1225\" data-rawheight=\"1434\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"1225\" data-original=\"https://pic4.zhimg.com/v2-fde3bd3901b67ce7c680fd7e4e65847f_r.jpg\"><figcaption>后背拼装实例2</figcaption></figure><p data-pid=\"eKvY4lPG\">取景器不是快拆版本，可以断定是E系列及更早的型号，然而却拼装了一个F系列的后背。这属于比较少见的情况</p>\n<p data-pid=\"_746_WZz\">关于后背拼装我就讲这么多，应该足够应付绝大多数的情况了</p>\n<p data-pid=\"_BwttkEN\"><b>3.其他各种奇怪的拼装</b></p>\n<p data-pid=\"_sfZt8NH\">禄来奇奇怪怪的拼装太多了：肩带挂耳，摇把，对焦手轮，额头铭牌，前脸铭牌圈，甚至还有拼装了一整个前脸的情况出现。实在是太繁杂了，不胜枚举，我就举一个刚发现的实例</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-654d248546eea69c304cf68d6cd38c20_b.jpg\" data-rawwidth=\"525\" data-rawheight=\"700\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"525\" data-original=\"https://pic1.zhimg.com/v2-654d248546eea69c304cf68d6cd38c20_r.jpg\"><figcaption>拼装了一整个前脸的例子</figcaption></figure><p data-pid=\"nLlx6P54\">粗略看上去，这是一台后期白脸的3.5f。但仔细一看，发现事情并没有那么简单</p>\n<p data-pid=\"1NLTbZR_\">首先前脸本应该镌刻机身序列号的地方，却是空白一片。机身的序列号却出现在额头铭牌的顶上，只有早中期黑脸3.5f才是这样布置的</p>\n<p data-pid=\"UIeakWKK\">紧接着看到对焦手轮的刻度盘是锥形的，而且只有一组单位为m的刻度，而没有英尺刻度，再加上镜头的序列号（被我模糊掉了），这意味着这台机身属于早期6片版的3.5f，却配了一个后期3.5f的前脸</p>\n<p data-pid=\"HGTUEaLA\">唯一的解释，是这台机器的前脸曾经损坏过，被维修师傅用禄来原厂的库存白脸替换掉了。说不好是在禄来维修站官方更换的，还是私人自行更换的。总之是一个很有趣的案例</p>\n<p data-pid=\"eKxaF01P\">另外还有一个地方值得注意：如今市面上出现了不少原厂配件的复刻产品，比如遮光罩，镜头盖是什么的。有物美价廉的复刻配件自然是好事情，但我发现有人用复刻配件充作原厂配件，糊弄不甚了解的玩家</p>\n<p data-pid=\"tpVMUgZU\">以镜头盖为例，原厂的长这样</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-540a1362bfe1df724b49914f3d6af7ff_b.jpg\" data-rawwidth=\"1080\" data-rawheight=\"808\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-540a1362bfe1df724b49914f3d6af7ff_r.jpg\"><figcaption>原厂镜头盖，注意背面铰链处的铭文</figcaption></figure><p data-pid=\"t_7TnEMx\">原厂的镜头盖也好，遮光罩也好，总会有地方标记了Germany</p>\n<p data-pid=\"ZmwivXk3\">而复刻的产品，目前所见的都是没有任何标记的</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-342c3acc9c0c17f38338c921f1979eb7_b.jpg\" data-rawwidth=\"1414\" data-rawheight=\"1414\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"1414\" data-original=\"https://pic4.zhimg.com/v2-342c3acc9c0c17f38338c921f1979eb7_r.jpg\"><figcaption>复刻的镜头盖</figcaption></figure><p data-pid=\"gcz3B9DY\">当然，无论是原厂还是复刻的，功能上基本没啥差别，我就提一嘴，大家留个心眼就好</p>\n<p data-pid=\"eba1b7PT\">关于拼装问题我就介绍到这里。各个时期禄来双反的外观特征，在《经典禄来》这部书里有比较详尽的介绍，通过经常观察研究禄来双反，我相信大家都能很快达到专家级的水平</p>\n<h3>零件缺失问题汇总</h3>\n<p data-pid=\"3zZDfqQd\">禄来双反想要缺零件还能正常工作，挺难的其实。所以一般缺零件最多也就是缺几颗螺丝这种无关痛痒的小问题</p>\n<p data-pid=\"-y1ILRmx\">但据我观察，现在有一个零件缺失的是越来越普遍：禄来3.5T，E系列和F系列的测光表头</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-d737fc81fdf7af0927badc41e04798cf_b.jpg\" data-rawwidth=\"1005\" data-rawheight=\"1197\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"1005\" data-original=\"https://pic4.zhimg.com/v2-d737fc81fdf7af0927badc41e04798cf_r.jpg\"><figcaption>原厂的测光组件还在，但表头已经不见了</figcaption></figure><p data-pid=\"R9HH--gJ\">现在市面上好多这种测光表头缺失的禄来双反。有一些是彻底坏掉了，被原主人换成了塞子；有一些是被原主人拆下卖掉了</p>\n<p data-pid=\"IP-7QBg7\">由于历史原因，有一些机器出厂的时候就没有安装测光系统（当年测光系统是选配的）</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-166a4b07fb0bc0b0e4e6f17688555d66_b.jpg\" data-rawwidth=\"4200\" data-rawheight=\"5600\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"4200\" data-original=\"https://pic3.zhimg.com/v2-166a4b07fb0bc0b0e4e6f17688555d66_r.jpg\"><figcaption>原厂的非测光版3.5f</figcaption></figure><p data-pid=\"lbKxGhxt\">（令人匪夷所思的是，这种非测光版本的F系列机身居然也有人贴上“稀有”的标签来炒作。要知道原厂的非测光/测光组件都是可以随意替换的，现在想拼装出一台“非测光版本”的机身简直不要太容易。个人建议无视这种炒作，避免在这上边花冤枉钱）</p>\n<p data-pid=\"HyDWsu6g\">首先明确一下，功能尚好的测光表头，二手市场上普遍能卖到千元左右，所以买家如果购买移除测光表的机器，需要提前把这部分成本计算进售价中</p>\n<p data-pid=\"o7QV1WV2\">而且，如今市面上单独出售带测光表基本绝迹，如果你想买回来一个弥补遗憾，几乎是不可能完成的任务，除非从其他机器上拆一个下来</p>\n<p data-pid=\"mX-1IaB6\">鉴于禄来双反的测光维修方案已经成熟，且效果拔群，越来越多的玩家开始重新启用禄来的测光系统辅助拍摄。所以在购买禄来双反时，是否需要测光系统，以及价格的核算，建议大家按自己的需求仔细权衡</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-01db533eb85fc5dd3c29b4bbaa071261_b.jpg\" data-rawwidth=\"3024\" data-rawheight=\"3024\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"3024\" data-original=\"https://pic2.zhimg.com/v2-01db533eb85fc5dd3c29b4bbaa071261_r.jpg\"><figcaption>禄来双反测光维修后的测试样片</figcaption></figure><h3>功能问题汇总</h3>\n<p data-pid=\"9DEvNyvg\">功能问题说实话，其实算不上特别大的问题。毕竟在相机成色好的情况下，绝大多数的小故障，都能通过维修保养解决</p>\n<p data-pid=\"UXzuvQQt\">禄来双反常见的故障有：慢门黏滞，自拍黏滞，对焦轮干涩，卷片摇把干涩，计数器不触发，取景与拍摄镜头焦点不同步，等等。这些相对来说，算是比较容易解决的故障，在选购的时候，遇到有这些问题的机器，需要把维修保养的费用提前计算进售价，再来货比三家</p>\n<p data-pid=\"cDZzWLwR\">对于有测光系统的禄来双反而言，测光故障也算是一个通病。如果测光表一动不动，对光线毫无反应，这可能是测光表头线圈发生断路，而如果是这种故障，基本意味着表头只能做报废处理。这个潜在的风险，需要考虑到</p>\n<p data-pid=\"vaBMqVT1\">如果测光表有反应但不准，这是测光表的硒光电池老化造成的，属于很正常的现象，不必较真。现在已经有了禄来双反的测光维修方案，如果需要使用原厂的测光表，拿去修一修就可以了</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-2328bac0ecd082f8cda24a298eb01298_b.jpg\" data-rawwidth=\"632\" data-rawheight=\"1624\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"632\" data-original=\"https://pic1.zhimg.com/v2-2328bac0ecd082f8cda24a298eb01298_r.jpg\"><figcaption>维修禄来双反的测光系统，可是我的专长</figcaption></figure><p data-pid=\"c5wwWu_I\">总的来说，禄来双反年久缺乏保养而出现的故障，不必特别担心。相比于机身与镜头成色这些不可修复的问题，机身的功能故障已经算是非常慈眉善目了</p>\n<h2>坊间传言&amp;我的观点</h2>\n<p data-pid=\"dyxBucOg\">禄来作为中古老相机，跟其他中古器材一样，由于流通时间长，又缺乏对当年原厂内部资料的解读，坊间各种玄学/迷信/传言也是铺天盖地，其中不乏很多误解</p>\n<p data-pid=\"qtcwaklA\">对于镜头色彩，成像风格等这种玄之又玄的东西，我自认为没有发言权，但作为对禄来历史沿革和机型演化比较熟悉的维修师傅，我可以对其中的一些流传已久的观点进行解读</p>\n<h3>1.禄来双反的巅峰之作到底是哪款产品</h3>\n<p data-pid=\"uuB9PsO7\">对于禄来双反的巅峰之作，爱好者群体内部分歧很大，但唯独有一点：机皇肯定是2.8系列中的一员。但具体是哪个型号，大家都莫衷一是</p>\n<p data-pid=\"Ct7z0IQm\">作为维修师傅，我只能从用料加工的水平，机身操控的便捷性，以及机械结构的精巧和完备程度等方面，做出我自己的判断</p>\n<p data-pid=\"c-f2QOvS\"><b>我个人认为禄来双反的巅峰之作，是2.8F。如果说的再确切一些，是中后期黑脸的2.8F</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-8c6694ca6058ec42bfb25d5f187c29bc_b.jpg\" data-rawwidth=\"1575\" data-rawheight=\"2100\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"1575\" data-original=\"https://pic1.zhimg.com/v2-8c6694ca6058ec42bfb25d5f187c29bc_r.jpg\"></figure><p data-pid=\"0Eg3Wd75\">我知道肯定会有无数的反对意见，我有必要再强调一下，这是基于我个人经验得出的结论。每个人都有自己心有所属的型号，所以与我争论是没有意义的</p>\n<p data-pid=\"ZtgJrIvv\">现在简要说明一下我的理由：</p>\n<p data-pid=\"r9WkDK3e\">毫无疑问，禄来双反在D，E，F系列达到了用料与加工制作水平的巅峰时代，但随着禄来破产重组，新生产的FX，GX在用料与加工上缩水了不少。如果有机会仔细比较经典禄来与FX，GX在机身细节上的区别，相信绝大多数人会同意这一观点</p>\n<p data-pid=\"YvC3lOrL\">从机身操控的便捷性考虑，D系列没有测光系统，在拍摄时有着诸多不便。而E系列的测光表，每次测光时都需要手动设置参数，之后才能读出相应的测光数值，还需要对照前脸快门拨盘上的EV值刻度，才能最终设置正确的曝光参数，过程比较繁琐，需要来回切换视线，效率较低</p>\n<p data-pid=\"WEdiPR9J\">当年为了进一步提升测光系统的便捷性，禄来的工程师在头脑风暴后，创造性的把差速器做成迷你尺寸，纳入机身的联动测光系统</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-06ec25fe0dd85707cd197a2bbd6d421e_b.jpg\" data-rawwidth=\"3024\" data-rawheight=\"3024\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"3024\" data-original=\"https://pic3.zhimg.com/v2-06ec25fe0dd85707cd197a2bbd6d421e_r.jpg\"><figcaption>迷你差速器，禄来F系列联动测光系统的核心</figcaption></figure><p data-pid=\"2CJpZ2YQ\">相比于E系列进行测光的复杂操作，F系列仅需要调节光圈/快门速度拨轮，就可以在测光的同时设置正确的曝光参数。在拍摄过程中，左眼观察测光值，同时右眼完成取景和对焦，测光和拍摄一气呵成，非常方便</p>\n<p data-pid=\"VyamYHdt\">所以从拍摄体验上来说，F系列在经典禄来系列产品中，称得上巅峰之作</p>\n<p data-pid=\"CsBDE4Rc\">至于为什么不是最后期的白脸2.8F，则是出于用料成本上的考虑：黑脸2.8F以及更早期的型号，前脸的装饰铭牌上采用黄铜片冲压镀铬的工艺，而白脸的装饰铭牌则是铝片，文字也是印刷出来的，成本较低。这与禄来晚期经营状况下滑有着直接的关系</p>\n<p data-pid=\"bM4Ciwx8\">所以我个人认为，不必过分神话晚期的白脸版本。除了生产年代略微靠后几年，白脸与黑脸没有任何本质上的区别，而在禄来原厂的分类里，白脸甚至都不是单独的型号</p>\n<p data-pid=\"0Jf_RCOR\">当看到有些商家甚至还把白脸又细分成所谓红字版和黑字版这种子虚乌有的小版本时，我实在是哭笑不得。这种原厂都没做分类和记录的所谓“版本”，没有官方的背书，只能算得上找茬爱好者的自我狂欢罢了，没有任何收藏价值</p>\n<h3>2.禄来3.5f，5片版和6片版哪个更好</h3>\n<p data-pid=\"t4Dg0FBQ\">总的来说，技术都是在不断进步的，设计方案也是在不断完善，不过还是让我们重新追溯一下3.5f的演化过程</p>\n<p data-pid=\"uUZZC3zu\">首先我们要知道如何分辨3.5f的版本。我实在是懒得记忆机身序列号这种枯燥的数字，我们直接从相机的外观去判断吧</p>\n<p data-pid=\"l5E6wn-Z\"><b>3.5F type1</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-358cc5d3ec7ff97734dea62544a39861_b.jpg\" data-rawwidth=\"1225\" data-rawheight=\"1633\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"1225\" data-original=\"https://pic2.zhimg.com/v2-358cc5d3ec7ff97734dea62544a39861_r.jpg\"><figcaption>3.5f type1</figcaption></figure><p data-pid=\"x2z-zYWO\">上图所示的是3.5F最初的版本，被称为type1。其典型的特征，就是前脸左上角银色的自拍扳手，以及在光圈拨轮右侧，有一个解锁EV联动的银色按键</p>\n<p data-pid=\"uLoFPAg_\">这一版推出后，有很多使用者声称还不如3.5E用着舒服（直到现在也还是这样）。type1的EV联动不能像E系列那样保持解锁状态，想要单独调节光圈，必须要持续按住银色按键，这给很多使用者造成了不小的困扰</p>\n<p data-pid=\"zd7rZpM4\">如今，这个版本基本是3.5F中，价格最便宜的一种型号</p>\n<p data-pid=\"1iz5IyYd\"><b>3.5F type 2</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-25efe8524c1ced652a55481393da82b2_b.jpg\" data-rawwidth=\"1080\" data-rawheight=\"1440\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-25efe8524c1ced652a55481393da82b2_r.jpg\"><figcaption>3.5f type2</figcaption></figure><p data-pid=\"k0CV1Z1D\">在type1风评翻车之后，禄来发动了挽尊技能，推出了一款改进版本，即为3.5F type2</p>\n<p data-pid=\"yo1sm-Fq\">type2左上角的自拍扳手变成了黑漆涂装，同时取消了光圈拨轮右侧的EV解锁按键，光圈和快门速度拨轮可以无条件独立转动</p>\n<p data-pid=\"uvgzdb2p\">这样一来，使用者再也不用为鸡肋的EV联动而操心了，使用体验比前代type1提高了不少</p>\n<p data-pid=\"GQ7-bQrJ\"><b>3.5F type3</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-34279370739db2d5b1d93b822d23dc29_b.jpg\" data-rawwidth=\"1225\" data-rawheight=\"1633\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"1225\" data-original=\"https://pic2.zhimg.com/v2-34279370739db2d5b1d93b822d23dc29_r.jpg\"><figcaption>3.5f type3</figcaption></figure><p data-pid=\"XLpaWMqa\">在type2的基础上，type3内部机械结构进行了较大的改动，主要是引入了迷你差速器，优化了测光联动的机构</p>\n<p data-pid=\"l00I2iAY\">外观上，type3的自拍扳手的外形和位置发生变化，前脸铭牌圈的文字布局也与type2有所不同。后来，type3也发生过一些细节上的改动，但总体的架构再也没有变化</p>\n<p data-pid=\"y6kmL-zs\">从机械部分的结构与可靠性而言，type3要优于type1和2。按照我以往维修的经验，受制于type1/2快门处繁琐的零件布局，这两个型号经常发生快门按钮按下后卡住不回弹的尴尬问题，从而顺带导致B门无法关闭</p>\n<p data-pid=\"g_q3crlr\">另外，维修这两个型号的快门，即使对熟练的维修师傅，也是非常考验耐心和细心的。稍有疏忽就容易装错测光联动的齿圈，从而导致快门在1/500时光圈无法调整到f22，或者在B门时光圈调整不到f3.5。我已经多次发现这类问题了，显然，这些都是上一个维修师傅的疏忽所导致的</p>\n<p data-pid=\"xs6XnHDX\">至于所谓的5片版/6片版，指的是3.5f所用的 75/3.5镜头的总镜片数量</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-b1c9b016da6d3ca3aa518176a512306c_b.jpg\" data-rawwidth=\"314\" data-rawheight=\"130\" data-size=\"normal\" class=\"content_image\" width=\"314\"><figcaption>左为5片版，右为6片版</figcaption></figure><p data-pid=\"lxrXZ_ei\">上图是蔡司planar的结构，而施耐德xenotar的结构也与上图基本一致</p>\n<p data-pid=\"ebwStMqv\">可以看出，6片版实际上是将5片版前组的一片单透镜，替换成了一组胶合透镜</p>\n<p data-pid=\"A3_nnDwV\">感谢禄来爱好者们的不懈努力，找到了6片版与5片版的原厂测试MTF曲线</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-0fbf19f9bc1556ed12080fb58338e47b_b.jpg\" data-rawwidth=\"998\" data-rawheight=\"605\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"998\" data-original=\"https://pic4.zhimg.com/v2-0fbf19f9bc1556ed12080fb58338e47b_r.jpg\"><figcaption>5片版与6片版成像质量对比</figcaption></figure><p data-pid=\"31uFfz0b\">根据MTF曲线的对比，我们大致可以看出：6片版的像场更加平整，画面中心和边缘的解像力都有一定的优势。整体上看，成像素质相比于5片版有着比较明显的提升</p>\n<p data-pid=\"FC-La55l\">坊间有一种流传甚广的说法：6片版是为了降低加工成本和难度，才选择将单透镜剖分为胶合透镜的。如果大家对光学加工行业有一定的了解，就会发现这个说法实际上是站不住脚的</p>\n<p data-pid=\"-KyflsRR\">光学加工的成本，是与加工的光学表面数量成正比。5片版镜头共计10个光学表面，而6片版则是12个，再加上额外的胶合工序，而且还需要加工两个镜片胶合所用的定位夹具，无论怎么看，制造6片版镜头的加工成本和难度都要明显高于5片版镜头</p>\n<p data-pid=\"LDQjPkcT\">而且5片版这片弯月形透镜，无论是曲率半径还是厚度，都属于非常容易加工的类型，没有任何必要剖分成两片透镜进行加工，这反而会平白增加加工的误差范围</p>\n<p data-pid=\"kntJ6UVF\">所以，我们不妨推测，禄来原厂使用6片版镜头替换早先的5片版镜头，是基于提高成像质量，达到提高市场竞争力的目的</p>\n<p data-pid=\"we80VUYN\">我们不妨再大胆推测，使用6片版镜头的最终目的，是把3.5f与3.5t的改进型天塞拉开更大的差距，从而让高中低端的产品线划分更加明确，提高利润空间</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-3372afac1e3b1c556847555c1f568a13_b.jpg\" data-rawwidth=\"1441\" data-rawheight=\"956\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"1441\" data-original=\"https://pic4.zhimg.com/v2-3372afac1e3b1c556847555c1f568a13_r.jpg\"><figcaption>禄来3.5t改进型天塞镜头的mtf曲线</figcaption></figure><p data-pid=\"WJF_ynhl\">在这我通过推测，大致还原一下当时的事情经过：</p>\n<p data-pid=\"Fb_K7i7j\">1958年10月，搭载改进版天塞镜头的禄来3.5t，作为面向中等收入摄影者的中端相机开始进入市场。很快，3.5t因为其低廉的价格和相对高素质的镜头，在摄影玩家中广受欢迎。两个月后，3.5f 也正式发售，但在接下来的一两年中，这款3.5系列的高端产品，销量却一直不愠不火……</p>\n<p data-pid=\"hBQgQwig\">不知道是玩家的反馈，还是禄来工程师的测试结果，禄来的管理层开始认识到：3.5f的5片版镜头与3.5t的改进版天塞，在画质上的差距不够明显，加之这两个型号的售价相差巨大，导致3.5t抢夺了大量3.5f的目标用户。换句话说，这两个型号发生了内卷</p>\n<p data-pid=\"w6DNmu82\">3.5t销量这么出色，肯定是不能砍掉这条产品线了，所以为了维护3.5f的金字招牌，争取更多的用户持币购买，只能是想办法把3.5f的镜头素质提上去。正好借着type3改进测光联动机构的机会，禄来索性也把3.5f的镜头升级成更出色的6片版了……</p>\n<p data-pid=\"FPuyeOUp\">以上纯属推测，不知道事情真相到底如何呢？</p>\n<p data-pid=\"BeTZH1lb\">按照《经典禄来》中的记载，事实上所有的3.5f type1与type2，无论是蔡司还是施耐德的镜头，都是5片版设计</p>\n<p data-pid=\"bdTCHs4y\">6片版的更新始于3.5f type3。所有蔡司镜头的type3都是6片版镜头，而施耐德镜头则沿用了一小部分5片版镜头，但很快都更新成了6片版</p>\n<p data-pid=\"K8EC1BH2\">具体序列号，请参考强魄镇总结的资料，如下图所示</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-ba07db9d45a92fe7bcbe25fb4f39499e_b.jpg\" data-rawwidth=\"788\" data-rawheight=\"640\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"788\" data-original=\"https://pic3.zhimg.com/v2-ba07db9d45a92fe7bcbe25fb4f39499e_r.jpg\"></figure><p data-pid=\"LbXTSKbe\">当然，5片版/6片版的争论，其实大可不必严肃看待，遇见成色好的，自己喜欢的，管它啥版本呢，买就完了</p>\n<h3>3.禄来2.8f和3.5f的像质对比</h3>\n<p data-pid=\"ZXcSB-yt\">说实话，我不是很懂为啥非得把2.8和3.5放一块来比，这俩难道不是应该“我全都要”嘛？</p>\n<p data-pid=\"iUTZcF2V\">不过既然真的要比，那还是得把数据放出来</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-c3d4946e65774f4c2604829a9f4342d0_b.jpg\" data-rawwidth=\"998\" data-rawheight=\"605\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"998\" data-original=\"https://pic1.zhimg.com/v2-c3d4946e65774f4c2604829a9f4342d0_r.jpg\"><figcaption>禄来2.8，3.5镜头对比</figcaption></figure><p data-pid=\"plnJs-JC\">看看就行，我就不说啥结论了，这么比较没太大意义，颇有种关公战秦琼的感觉</p>\n<h2>总结</h2>\n<p data-pid=\"uXMcugEo\">首先感谢你耐心的读完这整篇啰里八嗦的文章，这年头有耐心读大长文的人可真不多了，也希望有更多人理解我的一片心意。说实话，我还是挺怀念当年论坛时代，各路大佬无私的奉献，不像现在，满屏都是抖机灵……</p>\n<p data-pid=\"bs77WzGt\">虽然前边说了一大堆禄来双反选购的原则，技巧，以及各种轶事，但这都是一些死板的东西。真正在选购的时候，什么情况都可能发生</p>\n<p data-pid=\"dPT3wXg0\">而且，千金难买心头好。选购时也不必拘泥于我的建议，只要是自己喜欢的机器，又觉得物有所值，果断拿下就完了</p>\n<p data-pid=\"doKKSyeS\">希望这篇文章能对你挑选禄来双反提供帮助</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/qu-zheng-xin-42?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">曲郑鑫</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/473911528?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"什么是低筋面粉，中筋面粉和高筋面粉？在使用方式上有什么区别？","date":"2022-12-08 05:04:10","description":"\n<p data-pid=\"uI-pMlMn\">高筋、中筋、低筋面粉的区别，在于「筋」。</p>\n<p data-pid=\"kKcc_ogu\"><b>这个「筋」，指的是生面团的面筋强度</b>，举个例子：</p>\n<p data-pid=\"n1_uJ2u9\">有些面团按上去比较结实，放在桌面上能自己「站」住；而有些面团比较软，放在桌面上会自己「摊开」。</p>\n<p data-pid=\"xQw6UGFc\">前者面筋强度大，对应的是「高筋面粉」；反之，则对应「低筋面粉」。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-2ec01e141e457fd60f1e329684695be1_720w.jpg?source=b1748391?rss\" data-caption=\"不同筋力的面团的外观表现\" data-size=\"normal\" data-rawwidth=\"2183\" data-rawheight=\"1230\" data-watermark=\"watermark\" data-original-src=\"v2-2ec01e141e457fd60f1e329684695be1\" data-watermark-src=\"v2-ff7894838e9f6bd3725d29f8a2a46035\" data-private-watermark-src=\"v2-1b82dbea645cbc8a573063bd2ce7f7a8\"></p>\n<p data-pid=\"_xnN9tev\">如果我们不满足于「面粉间的差异在面筋强度」这个答案，可以再深挖一层：</p>\n<p data-pid=\"Z3hGuy6T\">为什么不同面粉的面筋强度不一样呢？</p>\n<p data-pid=\"64R_sCoC\"><b>答案是蛋白的「质量」不一样</b>。</p>\n<p data-pid=\"OlhCXL60\">对面筋强度有直接影响的蛋白，只占面粉蛋白很小的一部分，大概5-10%。</p>\n<p data-pid=\"63DAwo4N\"><b>它叫大分子麦谷蛋白</b>，是形成面筋的最主要成分——它的占比越大，形成的面筋就越多。</p>\n<p data-pid=\"b1TCmQhu\">换句话说，它的占比越大，蛋白的「质量」就越高。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-347eb871398c4bf658065bb034962f4c_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2112\" data-rawheight=\"1181\" data-watermark=\"watermark\" data-original-src=\"v2-347eb871398c4bf658065bb034962f4c\" data-watermark-src=\"v2-388f95233148d4ea62271eb717403164\" data-private-watermark-src=\"v2-671f762cc0dd7f3e5a8252e8083851b1\" data-qrcode-action=\"none\" data-tags=\"qrcode\"></p>\n<p data-pid=\"Qhae1XrQ\">所以，<b>高筋、中筋和低筋面粉最核心的区别，就是蛋白的质量。</b></p>\n<p data-pid=\"65ZyqfNr\">高筋面粉，就是大分子麦谷蛋白占比多，蛋白质量好的面粉；反之，就是低筋面粉了。</p>\n<blockquote data-pid=\"ciNorO3y\">蛋白含量也会对面筋强度有影响，但影响要低于蛋白「质量」。<br>比如同为高筋面粉，蛋白含量12.5%可能质量会好于13.5%的。</blockquote>\n<p><br></p>\n<p data-pid=\"hA-Y1Y7U\">在实际应用中，并不是说高筋面粉就要好于低筋面粉，<b>不同的蛋白质量也对应着不同的应用</b>。</p>\n<p data-pid=\"v5ucurmu\"><b>中筋面粉的面筋强度适中，适合用来做中式的面点</b>，比如馒头、包子、拉面、水饺等等，也是家里最常用的一种面粉。</p>\n<blockquote data-pid=\"FVWtCBaM\">用来做拉面、薄饼的面团要拉伸开，要求延展性高一些，是稍微特殊的中筋粉。</blockquote>\n<p><img src=\"https://picx.zhimg.com/v2-e41d3b854d9c328a2e7ec5cafa3765be_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2112\" data-rawheight=\"1400\" data-watermark=\"watermark\" data-original-src=\"v2-e41d3b854d9c328a2e7ec5cafa3765be\" data-watermark-src=\"v2-da87ebb33363291e3bb46ec31725e98a\" data-private-watermark-src=\"v2-05611f0687d220b1a2b112f26e40b28e\"></p>\n<p data-pid=\"T1b4Ijrp\"><b>而高筋、低筋面粉更多用于西式的面点</b>。</p>\n<p data-pid=\"xRzu_Hqq\">高筋面粉适合做面包，强度高的生面团才能在酵母产气膨胀时候撑住不塌。</p>\n<p data-pid=\"KlzXkwpn\">低筋面粉适合做蛋糕、饼干，这样才能有蛋糕的入口即化，和饼干的入口即碎。</p>\n<p data-pid=\"ftQy4-KH\">面粉用反了，就会得到尝到有嚼劲儿的蛋糕、饼干，和发不起来的面包。。</p>\n<p><br></p>\n<p data-pid=\"-Q7PKx5J\"><b>另外，面粉容易让人混淆的另一个原因，可能是名称太多了：</b></p>\n<blockquote data-pid=\"eTdJU6wx\">中筋粉、高筋粉、特一粉、小麦粉、蛋糕粉、预拌粉、70粉、多用途粉、雪花粉、八星粉、富强粉、自发粉、通用粉、麦芯粉、特精粉、通用粉等等。</blockquote>\n<p data-pid=\"qEA-uAQ2\">为什么会有这么多种类的面粉，<b>而且命名还没有逻辑性？</b></p>\n<p data-pid=\"WeXBeoa3\">因为，这些名字是一个大杂烩，里面不仅「藏」了三套命名系统、专门用途的「专用名」，还有营销词、产地词等等。</p>\n<p><br></p>\n<p data-pid=\"zg54Afip\"><b>第一套命名系统是最早的系统，是按小麦粉的「出粉率」来划分的</b>。</p>\n<p data-pid=\"thtHAjvz\">比如特一粉、特二粉、标准粉、普通粉、富强粉、70粉、75粉等等；</p>\n<blockquote data-pid=\"YVYPT1qy\">备注：简单来说，出粉率就是100g的小麦能出来多少g的面粉，比如出来70g，就叫70粉，或者特一粉(特制一等粉)。<br>出粉率越低，就是取粉的部位约中心，性能越好，价格也越贵。</blockquote>\n<p><img src=\"https://picx.zhimg.com/v2-63c760d08fa01acce19237aeb767b2f4_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1450\" data-rawheight=\"1074\" data-watermark=\"watermark\" data-original-src=\"v2-63c760d08fa01acce19237aeb767b2f4\" data-watermark-src=\"v2-678423af230629085feccbcf9a2f17b6\" data-private-watermark-src=\"v2-8d15ee77365eff874fa4ebec7043856b\"></p>\n<p data-pid=\"dPOX9r0P\"><b>这和当时还是「卖方市场」有关</b>，因为这些都是和生产工艺相关的专业术语，名字只对生产企业有意义。</p>\n<p data-pid=\"rqv2lmB9\">咱们消费者并没有办法通过这些名字，来知道面粉到底能拿来做蛋糕、馒头还是面包。</p>\n<p><br></p>\n<p data-pid=\"9Ruz6QVA\">随着面粉的产销过渡到「买方市场」，和面粉使用的细分，<b>出现了以消费者使用体验为主的、以「筋」命名的第二套系统。</b></p>\n<p data-pid=\"oa37jV8-\">其中，不同的名字分别对应着不同的面团特性。</p>\n<p data-pid=\"exRjxbrA\">比如上面说的中筋粉适合用来做馒头、包子，低筋粉适合做蛋糕等等。</p>\n<p><br></p>\n<p data-pid=\"x3v4y5fH\">随着面粉变为彻底的「买方市场」，面粉的使用的进一步细分，<b>出现了直接以用途来命名的第三套系统。</b></p>\n<p data-pid=\"sfAxxYM4\">馒头、包子粉适合做馒头、包子，面包粉适合做面包，以此类推，还有凉皮粉、拉面粉、蛋糕粉等等。</p>\n<p data-pid=\"bkO256_0\">甚至在馒头粉基础上还细化出南方、北方的馒头粉等等。</p>\n<p data-pid=\"1a1i_0nO\">还有一些以用途来命名的「省事儿」型的面粉：</p>\n<p data-pid=\"pcs9IX3N\"><b>自发型</b>：不用加干酵母，自己会「发」起来的面粉；</p>\n<p data-pid=\"XlGljcXG\"><b>预拌型</b>：糖、盐、酵母、改良剂预先拌进面粉里的半成品，不用自己添加；</p>\n<p data-pid=\"b789WP4O\"><b>通用型、多用途型</b>：就是「通用、多用途」的意思，一般是中筋面粉，适合家庭做馒头、包子、饺子类中式面点；</p>\n<p><img src=\"https://picx.zhimg.com/v2-2c0a22adedc1a7e726ff0e771ced372d_720w.png?source=b1748391?rss\" data-caption=\"来源：pexels\" data-size=\"normal\" data-rawwidth=\"2079\" data-rawheight=\"1392\" data-watermark=\"watermark\" data-original-src=\"v2-2c0a22adedc1a7e726ff0e771ced372d\" data-watermark-src=\"v2-2878a8a8a77647b07a89ca2636cc61fe\" data-private-watermark-src=\"v2-87c1423a37ae9a892cb8b0b1243b29a4\"></p>\n<p data-pid=\"ngOfbmaj\">当然，还有一些不在命名系统里的名词，可能会让人比较迷惑：</p>\n<ul>\n<li data-pid=\"QOEf5eB6\">\n<b>小麦粉、黑麦粉</b>：面粉的来源，一般面粉是小麦粉；</li>\n<li data-pid=\"Tra_nSkR\">\n<b>麦芯粉、特精粉、雪花粉</b>：营销词，和面粉的特性无关；</li>\n<li data-pid=\"gf5WkbSM\">\n<b>河套粉、五星/六星/八星粉</b>：产地名、品牌名，和面粉特性无关；</li>\n<li data-pid=\"GOhuM0KJ\">\n<b>全麦(面)粉</b>：含麦麸的面粉，筋力会比同级白面粉稍弱，一般和面粉1:1混着用。</li>\n<li data-pid=\"jNvyfZrk\">\n<b>无麸质面粉</b>：不含致过敏的麸质蛋白。</li>\n</ul>\n<p><br></p>\n<p data-pid=\"wMgBbxnT\"><b>那么，我们消费者怎么来选择呢？</b></p>\n<p data-pid=\"B3_BDJV5\">现在第一套命名系统，像富强粉、特一粉什么的基本很少了，多数是以「筋」或是以用途命名的面粉。</p>\n<blockquote data-pid=\"BYdIxjqq\">第一套命名的词语可以直接省略，比如富强中筋小麦粉，就是中筋小麦粉。</blockquote>\n<p data-pid=\"ItB0jPn3\"><b>大家按自己的需要购买就好了。</b></p>\n<p data-pid=\"XkrXJE7P\"><b>按「筋」来</b>：中式面点(馒头、包子、饺子、拉面等)选中筋，面包选高筋，蛋糕饼干选低筋；</p>\n<p data-pid=\"7T8mPAKO\"><b>按用途来</b>：馒头包子选馒头粉，面包选面包粉等；</p>\n<p data-pid=\"eMftvter\"><b>选择自己适用的省事型面粉</b>：自发型+馒头粉=自发馒头粉，预拌型+蛋糕粉=预拌蛋糕粉，还有家用的多用途粉等。</p>\n<p><br></p>\n<p data-pid=\"PPKPPxCI\">上淘宝搜了几个实例：</p>\n<ul>\n<li data-pid=\"lan5GEvb\">\n<b>无麸质有机藜麦粉</b>=无麸质蛋白+有机藜麦(不是小麦)；</li>\n<li data-pid=\"11Rq6yPl\">\n<b>黑全麦粉</b>=黑麦+全麦面粉(含麸皮、膳食纤维较高)；</li>\n<li data-pid=\"D9ptijNc\">\n<b>八星雪花小麦粉，中筋通用面粉</b>=中筋粉，用于中式面点；</li>\n<li data-pid=\"DigdepCb\">\n<b>家用低筋蛋糕粉(预拌)</b>=蛋糕粉，预拌型。</li>\n</ul>\n<p data-pid=\"kEXmU-6f\">另外，这些面粉的具体用法，我看这个问题下有答主说的很详细了，我就不再重复写了，大家可以去看看她们的。</p>\n<p data-pid=\"33_Ae2O-\">——谢谢阅读！</p>\n<p><br></p>\n<p data-pid=\"BzV9_58E\">资料：</p>\n<ol>\n<li data-pid=\"lcD1_7ws\">Shaopeng Lia，Yingchun Liua,Jingyang Tong. The overexpression of high-molecular-weight glutenin subunit Bx7 improves the dough rheological properties by altering secondary and micro-structures of wheat gluten. Food Research International 130 (2020) 108914. </li>\n<li data-pid=\"MppVVJAe\"><a href=\"http://link.zhihu.com/?target=https%3A//www.ukflourmillers.org/wheatstructure\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">ukflourmillers.org/whea</span><span class=\"invisible\">tstructure</span><span class=\"ellipsis\"></span></a></li>\n</ol>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/question/568579880/answer/2790399896?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\">知乎用户（登录查看详情）</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/568579880/answer/2790399896?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">26 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/368001541?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">请问这是低筋面粉还是高筋面粉？</a><br><a href=\"http://www.zhihu.com/question/380005115?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">高筋面粉、中筋面粉、低筋面粉的区别在哪？</a><br>\n","link":"http://www.zhihu.com/question/568579880/answer/2790399896?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"特斯拉人形机器人擎天柱原型机正式亮相，预计售价不到 2 万美元，未来产量可达数百万台，有哪些技术亮点？","date":"2022-12-08 04:05:27","description":"\n<p data-pid=\"NrSt1JFN\">谢邀，<b>我一直坚信物理和工程不会骗人</b>，相比于之前国内外媒体铺天盖地的宣传，<b>Optimus原型机可以说符合技术开发预期，但低于资本市场预期，严重落后于公众预期，目前我认为没有到量产的阶段</b>，2万美元的售价也大概率是个噱头。其实最令我可惜的是，Elon Musk在发布会的QA环节面临诸多人形机器人的落地与前景的问题时，并没有给出一个明确的答案，甚至都没有很自信具体地描述一个场景，而是用“the future is interesting, it won't be boring”的愿景给搪塞过去，看得出来<b>老马对人形机器人真正能用在哪里还没有想清楚</b>，这可能对行业前景是个不小的打击，毕竟现实版钢铁侠。</p>\n<p data-pid=\"kVXjTiA9\">下面是一些和我方向相关的技术解读，供大家参考：</p>\n<h3><b>硬件架构</b></h3>\n<p><img src=\"https://pica.zhimg.com/v2-ff24fd1e62bd349dbb1a367d0c4c2cc2_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1161\" data-rawheight=\"594\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-ff24fd1e62bd349dbb1a367d0c4c2cc2\" data-watermark-src=\"v2-b8f1b6a47c874512a005e48f2f572155\" data-private-watermark-src=\"v2-d33d92f7ef28783bb225dc597434db83\"></p>\n<p data-pid=\"Ag_0ZgFz\">Tesla Optimus整体的硬件架构是基于大电池组+电机驱动+刚性金属传动+串并联关节分布+视/力/位传感器的传统人形机器人硬件架构，整体设计理念类似于德国TUM的<a href=\"http://link.zhihu.com/?target=https%3A//www.mec.ed.tum.de/en/am/research/current-projects/robotics/humanoid-robot-lola/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">LOLA</a>与日本AIST的<a href=\"http://link.zhihu.com/?target=https%3A//www.aist.go.jp/aist_e/list/latest_research/2018/20181116/en20181116.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">HRP5</a>，与波士顿动力的人形机器人Atlas属于两种完全不用的硬件架构方案。</p>\n<p data-pid=\"egavOqRG\">Tesla Optimus这套硬件架构的优势在于稳定可控易实现，相对来说实现成本低，技术成熟，主要劣势在于动态性能差，自重大，难以支撑高动态大幅度的运动性能。</p>\n<h3>全身自由度</h3>\n<p><img src=\"https://picx.zhimg.com/v2-6bd6d117a650b71a0bb2b09c9870011a_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1829\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-6bd6d117a650b71a0bb2b09c9870011a\" data-watermark-src=\"v2-a05664b54debfbb2ee0eb786046b0995\" data-private-watermark-src=\"v2-2a027fda59845565bd65692c3c8f7419\"></p>\n<p data-pid=\"fk4HlwJ1\">身体总自由度数目为28（不包括灵巧手），具体分布如下：</p>\n<ul>\n<li data-pid=\"mQuF_m6a\">左臂/右臂：7+7，肩部3+肘部1+手腕3；</li>\n<li data-pid=\"97iS8yry\">左腿/右腿：6+6，髋部3+膝盖1+脚踝2；</li>\n<li data-pid=\"OlX4HFmO\">腰部：2，Roll+Yaw；</li>\n</ul>\n<h3>灵巧手</h3>\n<p><img src=\"https://picx.zhimg.com/v2-3c1a159be7d1f21a04793db67fdbc3cb_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1069\" data-rawheight=\"375\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-3c1a159be7d1f21a04793db67fdbc3cb\" data-watermark-src=\"v2-796ed093a21b2fafce6b5a9103ac74b9\" data-private-watermark-src=\"v2-bff748adea0d5fc3d23cb5c1e7e84326\" data-qrcode-action=\"none\" data-tags=\"qrcode\"></p>\n<ul>\n<li data-pid=\"C_4qHqN3\">驱动方式：绳驱； </li>\n<li data-pid=\"JCK4lzT_\">自锁能力：反向自锁（通过电机输出连接蜗轮蜗杆机构，猜测利用蜗轮蜗杆反向自锁）； </li>\n<li data-pid=\"c3rLjefi\">6个自由度：拇指2自由度（1个摆动，1个弯曲）；其余四指各1个自由度； </li>\n<li data-pid=\"LJV8qo1i\">11个关节：拇指3个关节，其余四指各2各关节；每根手指均为2个指节联动弯曲； </li>\n<li data-pid=\"4KXS7dKP\">负载能力：约9kg（实际为机械臂某个特殊工况的负载能力，和灵巧手无关）； </li>\n<li data-pid=\"8bn9ukxe\">仿生性：绳驱，自适应抓握，仿生性较好；</li>\n</ul>\n<p data-pid=\"2nRT5_tf\">至于灵巧手的指尖抓握力、自重、灵巧度、电子皮肤、触觉反馈等性能，在发布会中均没有涉及，另外，以我个人的经验来看，我对以绳驱（tendon-driven）方式灵巧手的可靠性与量产性提出极大的质疑。</p>\n<h3>驱动原理</h3>\n<p><img src=\"https://picx.zhimg.com/v2-31b2e01899128471c7bd056985a85f1b_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1278\" data-rawheight=\"720\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-31b2e01899128471c7bd056985a85f1b\" data-watermark-src=\"v2-34960300c587a772994a2985a21d695b\" data-private-watermark-src=\"v2-7d4d3ca1b504660d72a969dcb2e09d98\" data-qrcode-action=\"none\" data-tags=\"qrcode\"></p>\n<p data-pid=\"qnGqzIJs\">整体采用电池组供电，搭配电驱伺服关节的形式，Optimus中伺服关节如上图所示有两类：基于无框力矩电机+谐波减速器的旋转关节，基于力矩电机+滚珠丝杠的线性关节。旋转关节整体的输出扭矩密度和当前各大人形机器人厂家的关节性能类似，线性关节着重highlight了力输出能力，但极大牺牲了输出速度性能，我觉得这不是一个好的设计方案，可能会限制了下肢的高动态运动能力。</p>\n<h3>传感器配置</h3>\n<table data-draft-node=\"block\" data-draft-type=\"table\" data-size=\"normal\" data-row-style=\"normal\"><tbody>\n<tr>\n<th>类型</th>\n<th>视觉传感器</th>\n<th>力觉传感器</th>\n<th>位置传感器</th>\n<th>IMU</th>\n</tr>\n<tr>\n<td>描述</td>\n<td>左/右柱相机 鱼眼相机</td>\n<td>关节集成非接触式力矩传感器</td>\n<td>关节集成双位置编码器</td>\n<td>NA</td>\n</tr>\n</tbody></table>\n<p data-pid=\"439FdWQs\">这里提到的“非接触式力矩传感器”，从下面的图片来看，本质上就是基于编码器/或霍尔原理测量材料形变的力矩传感器，非传统的应变片式，起了个挺fancy的名称；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-1980efea7445b2ed6f46184419a88479_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1699\" data-rawheight=\"1397\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-1980efea7445b2ed6f46184419a88479\" data-watermark-src=\"v2-c0c9858a5dcbfa49ba00760f38294995\" data-private-watermark-src=\"v2-ae8a35b1c4af14ef39f8efc9a193e9bb\"></p>\n<h3>电气线束</h3>\n<p><img src=\"https://picx.zhimg.com/v2-24bc9a7c7efedb34a35f8605e4946c4e_720w.jpg?source=b1748391?rss\" data-rawwidth=\"960\" data-rawheight=\"600\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-24bc9a7c7efedb34a35f8605e4946c4e\" data-watermark-src=\"v2-cd7b1f1cfa5f75a37e3d1ee64d19aa2b\" data-private-watermark-src=\"v2-c0a0f38ea122f6588ee90662a8a6c4f8\"></p>\n<p data-pid=\"UgyJuClS\">从上图可以看到，Tesla Optimus的电气线束设计比较初级，机械臂大量外置裸露线束，在手腕部分甚至未采用中空走线设计，后续包裹ID外壳以及量产都有很大的优化空间，现阶段可以说没有专业成体系的线束设计。</p>\n<h3>关节模组</h3>\n<ul><li data-pid=\"NnPcK8PS\">上肢采用无框电机+谐波减速器的旋转关节方案：</li></ul>\n<p><img src=\"https://picx.zhimg.com/v2-ad435b9bb2a5f5c789f0cd5de9bba6f0_720w.jpg?source=b1748391?rss\" data-rawwidth=\"598\" data-rawheight=\"477\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-ad435b9bb2a5f5c789f0cd5de9bba6f0\" data-watermark-src=\"v2-ffe36262f42d66fa724f9e0b165dd26c\" data-private-watermark-src=\"v2-55491f476465eee3614c2e1186195dcc\"></p>\n<p data-pid=\"bk6EPryS\">基本上和当前协作机械臂的关节方案高度类似，无框力矩电机+谐波减速器+高低速双编码器+抱闸+力矩传感器+输出端交叉滚子轴承。这套方案我觉得如果是用在固定基的协作机械臂上没有问题，而用在浮动基的双足上，是不是会显得太过笨重了，尤其是每个关节都集成抱闸。整场发布会看下来，并没有看到特斯拉公布Optimus原型机的重量，可能也对目前原型机的自重不是很满意。</p>\n<ul><li data-pid=\"xrkIfmas\">下肢采用无框电机+行星丝杠的线性执行器方案： </li></ul>\n<p><img src=\"https://picx.zhimg.com/v2-7c862ea70f9ed1ee8b2aebc393cbbf1a_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1184\" data-rawheight=\"643\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-7c862ea70f9ed1ee8b2aebc393cbbf1a\" data-watermark-src=\"v2-7b7d9ce1f47957cb2ea2406c8fadeaf7\" data-private-watermark-src=\"v2-01d575dd360c2d4bdf953047e982ecc0\"></p>\n<p data-pid=\"TYEC7e6s\">下肢这个关节方案较上肢关节相比缺少了抱闸，使用了本身就具备自锁能力的行星丝杠将旋转运动转化为线性。我个人不是很喜欢丝杠传动的方案，因为就像上文中提及到，一般丝杠的传动精度高，输出力能力强，但反驱透明度差，响应速度偏慢，这套驱动方案会极大限制下肢高动态的运动能力，同时成本也不低。</p>\n<h3>结构传动</h3>\n<ul>\n<li data-pid=\"141TTUXl\">整机的身高与重量在发布会中未提及，目测身高约在1.7米左右，重量个人猜测要往70kg靠；</li>\n<li data-pid=\"eUYw_DIo\">胸腔内部布置电池和主板，如下图，主板两侧设置两颗巨大散热风扇，电池容量2.3kWh，动力电在52v，外部有金属外壳保护，安全性高，这个体积下电池容量做的巨大，<b>这是Tesla做的非常好的地方，应该是复用了其电动汽车电池的技术，实属降维打击了</b>；</li>\n</ul>\n<p><img src=\"https://picx.zhimg.com/v2-5b5818386c45c4d342f95ce2d3af58dc_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1058\" data-rawheight=\"497\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-5b5818386c45c4d342f95ce2d3af58dc\" data-watermark-src=\"v2-77e04accd8a834d8acf1d05506c2be35\" data-private-watermark-src=\"v2-c6587a39d82a51d99d05f5f2efc703fe\"></p>\n<ul><li data-pid=\"0cT8SI-n\">膝关节如下图所示采用仿生设计，其实我并没有看出来这套仿生设计的明显性能优势在什么地方，行走的时候也并没有能够做到直膝（人类真正的膝盖结构是一个极其复杂的滚动副+移动副的耦合），目前还没有get到这个设计的显著优点；</li></ul>\n<p><img src=\"https://picx.zhimg.com/v2-fe39908df858773253a2533ea6674e88_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1064\" data-rawheight=\"803\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-fe39908df858773253a2533ea6674e88\" data-watermark-src=\"v2-0d5a9fed908b55148a95bfbb743c07de\" data-private-watermark-src=\"v2-6200757c6098395fa6598313d100bc3c\"></p>\n<ul><li data-pid=\"iq8XlMX3\">腰部有2个自由度，形成了Roll+Yaw，<b>这是Tesla做的非常好的地方，腰部增加额外的自由度，有助于各类仿生运动的实现</b>，相比较于小米铁大缺失的腰部自由度，Optimus的一些动作能够呈现得更加自然，这是铁大需要向Optimus学习借鉴的地方。不过腰部的两个自由度设计也极具难度，整体上身的重量都压在这里，设计不佳极易造成上肢操作时的低刚度与抖动，我们在视频中也能看出，locomotion的时候头部和手部的抖动幅度大。</li></ul>\n<h3>硬件仿真</h3>\n<p data-pid=\"5_2jvXin\"><b>这块需要着重提一下硬件仿真平台，这是Tesla做的非常出色的地方</b>，依托了成熟的汽车可靠性仿真平台，从量产/成本角度出发为机器人的结构设计和可靠性设计提供了大量的评估和优化技术支撑，一定程度上是降维打击。下面我就以截图的形式给大家看一下此次特斯拉发布会提及到的各类仿真场景，篇幅关系不展开说，感兴趣的可以去回看原视频。</p>\n<ul><li data-pid=\"66uUlVOV\"><b>机器人抗摔倒可靠性仿真</b></li></ul>\n<p><img src=\"https://pica.zhimg.com/v2-0e0b354583f550c9c625e58d9ef97550_720w.jpg?source=b1748391?rss\" data-rawwidth=\"826\" data-rawheight=\"219\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-0e0b354583f550c9c625e58d9ef97550\" data-watermark-src=\"v2-b7aaa0ae563b1556a9abdbd9a0ba6e7c\" data-private-watermark-src=\"v2-14557ffae12fe91d3eb3646819b0eec4\"></p>\n<ul><li data-pid=\"jEfzMuyz\"><b>机器人预设场景可靠性仿真</b></li></ul>\n<p><img src=\"https://pic1.zhimg.com/v2-a9e15e585b208400e9b2c8ec1e32eb91_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1720\" data-rawheight=\"583\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-a9e15e585b208400e9b2c8ec1e32eb91\" data-watermark-src=\"v2-7eede7f624c1f0cad229007be3dde368\" data-private-watermark-src=\"v2-c1edc7f0b1da958928f8158b95d2c3be\"></p>\n<ul><li data-pid=\"uh6r-V--\"><b>结构设计仿真</b></li></ul>\n<p><img src=\"https://pic1.zhimg.com/v2-a510c6d8553758f96e41c9faaa90afdc_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1319\" data-rawheight=\"586\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-a510c6d8553758f96e41c9faaa90afdc\" data-watermark-src=\"v2-c757e58d8e038354c1c1332db5127956\" data-private-watermark-src=\"v2-def55befcf3fbfdea651d7a2d480b7a4\"></p>\n<ul><li data-pid=\"dcg1xM68\"><b>电机选型/设计仿真</b></li></ul>\n<p><img src=\"https://pic1.zhimg.com/v2-3e92f653796a33693ddb865e370e7cf0_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1280\" data-rawheight=\"579\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-3e92f653796a33693ddb865e370e7cf0\" data-watermark-src=\"v2-414b0a0a95e7a7c2ffff4f31c8f275c4\" data-private-watermark-src=\"v2-b45de2ed4b9cb60220bb600836ca6bee\"></p>\n<p><img src=\"https://picx.zhimg.com/v2-8d6cc38094f517f58b9fcf0f25ddb82a_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1272\" data-rawheight=\"575\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-8d6cc38094f517f58b9fcf0f25ddb82a\" data-watermark-src=\"v2-8bb959f704202693d36cf644d62056c9\" data-private-watermark-src=\"v2-f875090f5070943f0d37719a61df30ff\"></p>\n<ul><li data-pid=\"BcaqXmkZ\"><b>动力学仿真环境及应用（动捕）</b></li></ul>\n<p><img src=\"https://pic1.zhimg.com/v2-485cf459a8e6f3b252d1ad0d5f76d200_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1028\" data-rawheight=\"594\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-485cf459a8e6f3b252d1ad0d5f76d200\" data-watermark-src=\"v2-834c8f34957eab32990226dd5251a15a\" data-private-watermark-src=\"v2-e640f0dc290eb1a5e210c5221d729094\"></p>\n<h3>运动控制</h3>\n<p data-pid=\"9F-4C6oB\">整体来说，Optimus的下肢行走还是运用的传统Static-ZMP、Linear-ZMP或DCM的方案，和Asimo类似，适合平脚板双足的慢速行走，抵抗外界大干扰能力较弱，动态性差。这边还提到了一个高效率的仿人步态，如下图，摆足时考虑了Toe-off-heel strike，结合上半身的协调摆臂运动，融合人类行走的数据，实现自然摆臂、大跨步以及尽可能的直膝行走，提高了行走效率与姿态。</p>\n<p><img src=\"https://picx.zhimg.com/v2-5025e061df9288e762733765d35330eb_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1176\" data-rawheight=\"660\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-5025e061df9288e762733765d35330eb\" data-watermark-src=\"v2-8dfc70b285312bf95e98368b895ae6c3\" data-private-watermark-src=\"v2-b76dfcbf9a1932a81da224473496f600\"></p>\n<p data-pid=\"A20PJikh\">上肢操作首先借助动捕取得的人体离线运动库，然后进行离线优化与在线（针对具体任务场景的）优化，构建离线运动库的时候可能会用到模仿学习的某些技术，手臂的轨迹规划可能使用伯克利Trajopt的相关算法。</p>\n<p><img src=\"https://pica.zhimg.com/v2-a7dd6974ad46669b7083e7850bc22c8d_720w.jpg?source=b1748391?rss\" data-rawwidth=\"939\" data-rawheight=\"510\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-a7dd6974ad46669b7083e7850bc22c8d\" data-watermark-src=\"v2-4363d992b7aa9c340e1c38e82507d2f9\" data-private-watermark-src=\"v2-977e029d16620064585950db3ae8e72b\"></p>\n<p data-pid=\"2sNWoVNp\">实事求是讲，Optimus这次发布会展现的运动能力及控制算法非常初级和基本，这里就直接上YY硕大佬的评价QAQ：</p>\n<p><img src=\"https://picx.zhimg.com/v2-91de7a30e2fb83186576f9f023bef4f6_720w.jpg?source=b1748391?rss\" data-rawwidth=\"517\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-91de7a30e2fb83186576f9f023bef4f6\" data-watermark-src=\"v2-447b1ff9260beca65b0b4fda94571f63\" data-private-watermark-src=\"v2-aeb10d558b571bb83d619b5858a70387\"></p>\n<h3>感知能力</h3>\n<p data-pid=\"_JNFzfG0\">目前Optimus应该只展示了视觉相关的感知能力，并没有看到雷达、ToF、IMU与超声等，在工厂搬东西的应用中，有GPS传感器的应用。</p>\n<p data-pid=\"EHY6kraN\">前文中提到，视觉的相机硬件为左右单目相机+鱼眼，硬件成本低，但算法复杂、计算力大，依赖于硬件。下图中可以看到Optimus实现了精确的3D环境建模，同时通过双目测距能实现<b>非常清晰和高精度的深度图像</b>，非常有助于双臂的末端精确抓取。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-8b73812fb489f5381608511906887585_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1074\" data-rawheight=\"737\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-8b73812fb489f5381608511906887585\" data-watermark-src=\"v2-d25b676b8115329fd70bcc7bf639136a\" data-private-watermark-src=\"v2-0c984a5158718757236a5a6de901b0ab\"></p>\n<p><img src=\"https://picx.zhimg.com/v2-2863ea758022a8e8ecefc6f005257cf4_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1657\" data-rawheight=\"754\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-2863ea758022a8e8ecefc6f005257cf4\" data-watermark-src=\"v2-8ca4d740e89ebf55acb9195b7877a728\" data-private-watermark-src=\"v2-d07f96959c9415097e9672e8bc5929be\"></p>\n<p data-pid=\"WKLKGmAG\">这边推测也是复用了Tesla汽车上视觉感知的相关算法和能力，快速集成到机器人Optimus上，又一次形成了降维打击。</p>\n<hr>\n<p data-pid=\"AQMR65fW\">总结来说，一年的时间Tesla做到今天Optimus原型机的程度，我觉得从工程技术上是非常硬核的，给Tesla的各位工程师们点赞，<b>尤其在灵巧手、腰部自由度、硬件仿真平台、双目视觉等都在有限时间内做得非常出色</b>。但还是回到我前头说的那句话，<b>物理和工程不会骗人</b>，国外的月亮并没有比国内圆，电驱的人形机器人，相比于Tesla，我更呼吁大家去多关注沉淀积累更久的的<a href=\"http://link.zhihu.com/?target=https%3A//robots.ieee.org/robots/digit/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Digit</a>与<a href=\"http://link.zhihu.com/?target=https%3A//www.youtube.com/watch%3Fv%3DDdojWYOK0Nc\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Cassie</a>（Agility Robotics），暂时就不用去对标波士顿动力，Optimus还没有这个能力PK。</p>\n<p data-pid=\"-Bt4kH_h\">最后呢，还是希望大家以一颗包容的心态去看待一个新的细分行业的发展，对Optimus也是，对铁大也是。没有什么新的工程技术是可以在1-2年一蹴而就的（不要高估技术），但如果把战线拉长到10-15年，那可能就会带来翻天覆地的变化（不要低估技术）。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/ren-ze-yu-45?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">任赜宇</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/557190222/answer/2697301542?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">378 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/564503137?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">特斯拉人形机器人擎天柱原型亮相，其设计怎么样？</a><br><a href=\"http://www.zhihu.com/question/554682627?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">特斯拉人形机器人擎天柱将亮相，你对该产品有哪些期待？</a><br>\n","link":"http://www.zhihu.com/question/557190222/answer/2697301542?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"蔚来、理想、小鹏三家新势力造车公司，哪家最有可能先倒下？","date":"2022-12-08 03:03:20","description":"\n<p data-pid=\"D3ZrWZfA\">行业大环境，乃至于整个国家的消费与投资环境的巨大变化是目前对几家新势力头部企业最大的冲击。</p>\n<hr>\n<h2>小鹏：自动驾驶技术带来的“科技感”进入疲劳期，坚守智能化中档车型扩产受阻，巨额亏损令人难以理解。</h2>\n<p data-pid=\"GUwsT3G3\">我对小鹏的观感可以说是在两极之间反复反转。</p>\n<p data-pid=\"-yAt5T22\">小鹏G3的时候体验过就不想再体验小鹏的车子，整个车型的设计和制造都有问题，而且很多和小鹏相关的供应链人员反馈的小鹏的设计与开发模式也让人反感。</p>\n<p data-pid=\"BJTk1pk8\">但是小鹏P7完全颠覆了我的观感。P7对于小鹏车型来说就如同一个新物种。我在试车场试驾P7之后，基本是从嫌弃到惊艳，这是自主国产电动车里面操控性和底盘响应等方面我最满意的电动轿车。</p>\n<p data-pid=\"ZSHr7dzI\">后来我了解到，小鹏P7的开发总负责人是原本来自于蔚来美国总部的xu博士，而他原本又是福特北美的汽车开发专家和高管。</p>\n<p data-pid=\"IpUfZn8W\">包括从技术的角度来说，小鹏当时的自动泊车算法适应中国市场条件下的车位特征的适应性也基本是国内最好的。当然，现在国内其他企业的技术也都上来了。</p>\n<p data-pid=\"73wXbixi\">从我那次试驾之后，我至少向5个向我咨询只要国产电动车的话要推荐什么车型的朋友推荐了小鹏P7，而且他们全部都最后购买了P7.</p>\n<p data-pid=\"fQRJiclE\">但是小鹏P7的成果没有被继承下去。小鹏整个G系列的车型一直比较糟糕（我个人的体验），P5的车型逻辑是对的，市场的主要槽点全都集中在了造型上。而很多关注P5的车主，大多是首先青睐P7，然后发现P5的功能接近而且实际的车内空间并没有比P7缩水多少，考虑到价格选择了P5。</p>\n<p data-pid=\"pgguUSdd\"><b>与此同时，小鹏花掉了太多的钱，特别是销售及管理费高到让人难以理解。</b></p>\n<p data-pid=\"X3XO4Qcc\">小鹏汽车2022年上半年累计亏损44.02亿人民币，与蔚来的-45.7亿亏损相当。而三季度报中小鹏汽车的累计亏损扩大到67.78亿，每季度平均亏损20.6亿人民币。</p>\n<p data-pid=\"yB8ExzYh\">进一步挖掘财务数据，我们发现，小鹏最大的问题是销售及管理费过高。</p>\n<p data-pid=\"VKEAT8NX\">小鹏的销售及管理费的今年上半年高达22%，三季度甚至高达24%。这个比重甚至高于以销售服务规格之高为噱头的蔚来汽车。蔚来汽车的销售及管理费占比也不过20%-22%。而与之相对的，理想汽车的销售及管理费的比例在15%左右，而特斯拉仅有5%左右。</p>\n<p><img src=\"https://pica.zhimg.com/v2-4f45a4cf8a6c9a956f07cd6367a108fc_720w.jpg?source=b1748391?rss\" data-rawwidth=\"917\" data-rawheight=\"970\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-4f45a4cf8a6c9a956f07cd6367a108fc\" data-watermark-src=\"v2-7ee05923ba2b58f9fdf3e40e5fad66ba\" data-private-watermark-src=\"v2-bab0380b2aadfd97c616e35c28457b67\"></p>\n<p data-pid=\"JuOLqeVa\">小鹏前三个季度的毛利润只有26.43亿，每个季度的研发费用大概12-14亿，三个季度的研发费39.85亿也算中规中矩，但是销售及管理费达到了49.32亿就太夸张了，特别是考虑到这么大的销售渠道的投入只支持了217.15亿的主营业务收入。相比之下，理想汽车达到182.95亿的主营业务收入，才花了小鹏一半的销售及管理费（25.78亿）。如果是特斯拉的效率，只需要10亿出头就可以实现200亿+的主营业务收入。</p>\n<p data-pid=\"NcbXv1s2\">所以你很难想象，均价并不高的小鹏，销售渠道的投入上竟然比蔚来汽车还能砸钱，而且车型的毛利润和蔚来也差不多。</p>\n<p data-pid=\"M0oVfcs7\">这个背后，可能是小鹏目前的直营+授权的经销商模式的问题带来的。</p>\n<p data-pid=\"QRSdd-Pb\"><b>Q3的财报还没有表现出近期的销售颓势，可以想象，Q4的财报预计更是一塌糊涂，因为很多固定投入是总额基本不变的，销量少了，分摊到单车的支出就更多了，距离净利润回正更加遥远。</b></p>\n<p data-pid=\"4cVDJhPc\"><b>总结来说，小鹏的发展问题如下几点：</b></p>\n<ol>\n<li data-pid=\"J9ylS9c1\">\n<b>过度高估智能化对自身产品的客户吸引力的持续提升，企业不断亏损，迫使小鹏尝试在G9上提高溢价，希望通过提升毛利润来解决问题，结果导致了G9上市定价和定位混乱引发的媒体踩踏。</b>由于小鹏的车型定位过窄，G系列车型接连失败，短期内毛利无望提上去了，甚至因为销量下滑而毛利率进一步收窄。</li>\n<li data-pid=\"roTA6Q-Y\"><b>小鹏的直销+授权经销商的模式的销售渠道投入和管理运营成本过高，是目前小鹏财报最大的问题，企业在不断失血中狂奔。</b></li>\n<li data-pid=\"3xKxxtCm\"><b>目前小鹏的流动资金状况依然较好是小鹏汽车进行后续调整的底气，Q3财报的负债率为45.06%，现金及可快速变现的短期投资总额达到319.86亿人民币，财务状态还属于相对较好的状态。</b></li>\n<li data-pid=\"p0LNuQ7r\">\n<b>但是需要注意到，小鹏车型目前面临的竞争挑战也是最大的，</b>20万+车型目前已经遭到了特斯拉、比亚迪甚至极氪等现有车型的夹击，甚至未来将会直接面对成熟厂商的电动车型的挑战。小鹏汽车的智能化与自动驾驶，前者在当下电子架构全面升级的背景下，小鹏的技术方案并没有表现出领先，后者关于自动驾驶，一方面NGP的实际利用率并没有想象中的那么高，根据小鹏在2022年国庆公布的数据，国庆期间小鹏高速NGP的行驶里程仅占累计里程的1.4%；另一方面，自动驾驶目前正在陷入恐怖谷效应的低潮期，由于自动驾驶带来的品牌溢价切不可高估。随着越来越多的车企将L2+辅助驾驶作为标配，与此同时不断的通过控制制造成本来提升毛利，作为制造成本一直被人诟病，且销售费用还高企的小鹏汽车，未来扭转局面的遇到的挑战将会是最大的一个。</li>\n</ol>\n<h2>按照目前的状态下去，小鹏的危机预计要到2023年底之后，才会真正影响到企业，管理层还有一年的时间。</h2>\n<hr>\n<h2>蔚来：最大的风险是经济萧条的未来背景下，投资者对于蔚来经营模式的挑战可能导致内部问题的爆发。</h2>\n<p data-pid=\"g-tXYvqP\">蔚来的问题比小鹏更严重。</p>\n<p data-pid=\"Jm2NAjkq\"><b>小鹏的问题，蔚来都有，但是蔚来的Q3财报表现更加糟糕。</b>上半年的净利润累计亏损与小鹏相当，45.7亿人民币（小鹏44.亿亏损），三季度一个季度就亏损了41.42亿人民币，从而令前3个季度的净利润累计亏损额达到了惊人的87.12亿人民币。</p>\n<h3><b>按照这个节奏，2022年全年亏损达到130亿人民币不是梦。</b></h3>\n<p data-pid=\"CL_WGf3a\"><b>目前蔚来汽车的负债率达到了66.08%，这和蔚来最艰难的时候负债率超过100%当然不可同日而语，但是这绝对不能称之为健康。</b></p>\n<h3><b>更重要的是，蔚来可能通过财报数字游戏掩盖了其实际更加严重的亏损和负债情况。</b></h3>\n<p data-pid=\"EieSMTP-\">今年年中灰熊发布做空报告，后续被蔚来反驳，在年中给蔚来股票带来了短期波动，但后来股价回升。不过灰熊报告中的财报分析直接指出了蔚来的核心模式之一：<b>换电模式 可能存在的巨大财务游戏漏洞。</b></p>\n<p data-pid=\"AhfXEAv7\">蔚来的换电模式支持了其BaaS（Battery as a Service）模式的发展，并起到了降低新车车主首次购车款的作用。例如：ET5补贴前售价32.8万元，采用BaaS方案补贴前的价格就降低到了25.8万元，然后车主后续以每个月980元的费用来租用电池。</p>\n<p data-pid=\"MaHG5lpE\">那么照理来说，销售当月蔚来的业务收入就应该是25.8万售价扣掉税收等之后实际收入的钱，然后在后续的财报中按照每个月980元的收入纳入到财报收入之中。然后25.8万对应的收入，扣除32.8万整车实际的各类成本，就是这辆车的毛利润。</p>\n<p><img src=\"https://picx.zhimg.com/v2-1ad9457fde13f4c415ab58c3ac453246_720w.jpg?source=b1748391?rss\" data-rawwidth=\"600\" data-rawheight=\"318\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-1ad9457fde13f4c415ab58c3ac453246\" data-watermark-src=\"v2-46998fdafc76037c70c7edd57681d400\" data-private-watermark-src=\"v2-fa23c56f49008180fe2065249a2c620c\"></p>\n<p data-pid=\"htJDy9dc\"><b>但是，事实上，蔚来首先将电池销售给了一家名为武汉蔚能的公司，所以事实上蔚来的BaaS用户是向武汉蔚能签署的电池租赁合同。而蔚来汽车尽管只从用户这里收到了25.8万的无电池包版本的购车款，但是又从武汉蔚能这里拿到了完整电池包的一次性购买的采购合同。</b></p>\n<h2>所以，在蔚来汽车的财报上，BaaS方案的车型，依然是以接近32.8万元售价的完整车型对应的收入被列入的当月的业务收入之中，并以此来计算毛利润。而需要6年才能通过收取租金抵消本金投入的武汉蔚能，这其中产生的巨额亏损可能并没有计入蔚来汽车的财报之中！</h2>\n<p data-pid=\"nu5sFBzu\">目前也不知道，这种操作是否也被用在了换电业务的其他备用电池之中。</p>\n<p data-pid=\"Oco41qh0\">考虑到前面我们提到的，蔚来自己的财报今年的全年亏损可能会达到创纪录的130亿人民币，那么灰熊做空报告中提及的这个“财务游戏”的背后是否还有更大的亏损黑洞我们不得而知。</p>\n<p data-pid=\"yvqLwALA\"><b>更大的问题在于，换电模式在新的技术和市场背景下，其价值正在不断削弱：</b></p>\n<ol>\n<li data-pid=\"tkUB-_Nj\">\n<b>换电模式需要一个独立的电池包结构，与CTB或CTC技术冲突，阻止了蔚来电池成本降低</b>；</li>\n<li data-pid=\"Y0JENhOS\">电池单体的成本在不断上涨，由于地缘政治和国际局势发展进一步恶化原本就相对稀缺的锂等关键元素，电池的成本下降难以实现。而随着换电站越来越多，需要的流动电池储备就越大，带来的债务式的亏损就更加严重；</li>\n<li data-pid=\"ltTmaB9N\">最严重的问题是市场没钱了，如果说通过财报游戏过去还可以美化财报并通过股票和融资来不断支持烧钱活动，但是<b>如果没有了观众，表演还有意义吗？</b>\n</li>\n<li data-pid=\"0NQhqS8F\"><b>换电站永远的风险：只需要一次恶性的换电站爆炸事故，就有可能导致全国换电站进入全面监管！注意：今年已经发生过一起换电站起火事件了，只是由于本次事件是另一家的电动车，本身电池能量密度和大小比较低，火很快扑灭了。</b></li>\n</ol>\n<h3><b>还有一个致命的坑，把ET7和ET5定位过高的同时，管理层又拒绝将Alps做大，错过了高端带动中端车型走量实现净利润盈利的机会。蔚来除非重新拿到200亿规模的融资，否则已经丧失了打造中端品牌的机会了。</b></h3>\n<p data-pid=\"FH5xzYjX\">早在2018年就已经出现在规划之中的ET系列，不断的跳票，不断的脱离原本的规划路径，到最后ET7变成了对标宝马7系的豪华车型.</p>\n<p data-pid=\"Ywmno13n\">我在2021年1月的文章中写到：</p>\n<p data-pid=\"7Op3dCjV\"><a href=\"https://www.zhihu.com/question/436301408/answer/1669927607\" class=\"internal\">如何评价蔚来ET7？</a></p>\n<p data-pid=\"1bUswy9s\">“a、太晚导致的物料成本无法稀释，基础硬件成本过高；b、太大导致的更加畸形的成本；c、再次重现的堆砌自动驾驶硬件的招数，和当年在ES8上市的第一批就堆砌了根本没有用的mobile eyes 4芯片一样（仅芯片就加了1000RMB物料成本）。还是那句话，当年ES8有进口的model X和乐视汽车的FF91来背书自己价格的合理性，ET7有什么？也难怪要拿进口的宝马7系来对标。” - 2021年1月JackyQ文章。</p>\n<p data-pid=\"7VpYNIHU\">Alps（阿尔卑斯）是蔚来的投资者逼蔚来管理层要搞的妥协产物，一方面蔚来确实给Alps招了不少实际的研发人员，但是另一方面核心管理层明显没有吧Alps当回事情。现在又要搞什么第三品牌喜马拉雅。</p>\n<p data-pid=\"rStuEY-V\"><a href=\"https://www.zhihu.com/question/546368751/answer/2603745832\" class=\"internal\">如何看待蔚来或推出 20万元以下汽车一事？对汽车销售市场会带来哪些影响？</a></p>\n<p data-pid=\"e27TlPBn\">ALPS太慢了，目前预计的上市时间是2024年下半年，今年5月和合肥的厂区合作协议才签署完毕，从制造角度来说也不可能提前。随着蔚来的财报亏损如此严重，ALPS的进度只会被不断拖延。</p>\n<p data-pid=\"JbTe_hsS\">我个人其实认为，对于李斌来说个人应该并不喜欢包括ALPS在内的成立第二、第三品牌的想法，但是蔚来的管理层中肯定有想要发展真正走量的第二、第三品牌的实际控制人和团体。因为利用NIO这个现有品牌的高端号召力，尽快转换为销量赚钱，是目前蔚来集团需要直接面对的问题。</p>\n<p data-pid=\"pPlaLslH\">蔚来目前还在持续失血，现金流在不断的被稀释，美股收到经济大环境以及美国股市发展大环境的影响，已经不能给蔚来提供更多的想象空间了，甚至未来可能是负面的。以ALPS为代表的第二、第三品牌的建设到底对于蔚来汽车是蜜糖还是毒药，对于蔚来的管理层来说是否会成为内部经营理念冲突的一个工具，事实上是需要密切关注的。</p>\n<p data-pid=\"PjS5yDOQ\">蔚来当前的硬件平台没有解决的一个问题，是常规物料成本过高。蔚来目前是依靠自己的服务体系、高端品牌形象和一些典型新技术的提前布局来支撑比较高的售价，然后只有当销售数量超过一定数额才能实现毛利转正。</p>\n<p data-pid=\"bSNOiI-g\">根据此前2020年的计算结果，蔚来毛利转正的分界线是季度销量超过8800辆，纯利转正应当破2.6万-3万台。由于近年来蔚来的销量发展很快，毛利润的分界线早已经突破了，但是纯利转正却遥遥无期，这背后的原因实际上是数量增加带来的成本分摊效应早已经消失了，毛利已经上不去了。</p>\n<p data-pid=\"paRoPrtD\">ALPS曾经考虑过高性价比新平台开发，但是最终由于分配到的资源有限，还是会以来现有平台改型，那么对ALPS的降本与利润期待可以说基本空了。ALPS就变成了一个鸡肋。</p>\n<h2>蔚来陷入危机的时间会比小鹏更早，按照目前的发展态势下去，预计2023年9月后会明显恶化。更大的挑战在于蔚来内部的。</h2>\n<p data-pid=\"1fwK3hs4\">至于说蔚来什么想要做电池、做芯片啥的，建议就洗洗睡吧。还是这句话：就提到的这几个必须要超大规模效应才能实现降本的行业，摆明了就是做了刷流量演戏用的。但是2023年的经济预期之差，看戏的都要跑光了，光吆喝的还唱什么呢？赶紧找个班上挣钱才是王道。</p>\n<hr>\n<h2>理想：财务状况最为稳健，主要的挑战是技术门槛低，预计在2024年上半年后才会遭到真正的难处，管理层还有大概1年半的时间。</h2>\n<p data-pid=\"Ldf6oSr7\">比起小鹏和蔚来一个季度动不动亏掉20-40个亿，理想一个季度净利润亏6亿都算卖得不好了，2022年1季度甚至只亏了1000万。考虑到理想新投车型的投资情况，这个数字其实非常好了。</p>\n<p data-pid=\"VdjhU5sj\">理想的负债率和现金流也是最佳的，二季度负债率只有41.16%（我写稿时三季度财报还没发），二季度现金及短期投资总额达到了504.42亿。</p>\n<p data-pid=\"cpDYKMss\">理想的问题是产品领域单一，技术门槛也低。比起小鹏可以称之为技术导向企业，理想更像是产品经理导向企业。</p>\n<p data-pid=\"J9B9ltjt\">相比蔚来和小鹏，理想的整车，典型的就是理想one，最好的状态是静态测评，开起来之后状态其实距离两家企业还是有一定的距离的，其实也比不上增程这条路线上的很多成熟玩家，特别是馈电的NVH控制。但是真的是“一大遮百丑”，没有什么道理可言。</p>\n<p data-pid=\"1u1QyYEs\">当然今年理想的好兄弟，卧龙凤雏般的伙伴-问界的横空出世和热卖，进一步刷新了我们对于中国市场客户思维的新认知，相比之下理想也变得可爱起来，毕竟理想最多就是乱用词汇粉饰太平，问界90%的产品力全靠一个人吹牛撑着，销量基本靠只看静态展示和鸿蒙座舱，最多出门2个红路灯绕一圈就算试驾后后就能直接下单的“优质客户”。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-668840b8de25aa781802d8ba98504d76_720w.jpg?source=b1748391?rss\" data-rawwidth=\"500\" data-rawheight=\"314\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-668840b8de25aa781802d8ba98504d76\" data-watermark-src=\"v2-5c7c14318305696493a3dbb6f726ff43\" data-private-watermark-src=\"v2-807903cd4f36ce0d92326152e2a0fc9d\"></p>\n<p data-pid=\"lDAT9s1v\">不过在7座大型MPV领域做插电也好，增程也好，还有做混动的，包括在车机交互方面做的更中国和更贴近客户，目前从成熟车企到各类自主企业还有初创，都在做，对标PPT上必然赫然列着理想one：这个也能成功。</p>\n<p data-pid=\"-6Y6WcjW\">目前各大车企的进度来说，基本上2023年底成型，2024年上半年就是下饺子一样的车子。</p>\n<p data-pid=\"QFBm5ciE\">当然理想不是没有行动，首先我觉得现在开始卷纯电真心没必要，现在玩纯电和直接烧钱没有区别。目前初创品牌的纯电方案的市场趋势是极度病态的，你根本不可能挣到钱，都是玩股票的往死了堆成本，根本活不到和特斯拉这样大量销售分摊成本的大制造阶段。管理团队做供应链出生的威马就要被这群不讲武德的竞争对手乱棍打死在2022就是最典型的例子。</p>\n<p data-pid=\"tB5vOPVk\">理想在增程路线上的对策是彻底自研动力系统。一年多前挖了吉利的1.5T发动机的总工组建自己的1.5T4缸的研发团队，在上海挖了一大波发动机研发人员，第一代是继续采购绵阳的新晨动力的1.5T新机型，然后二代就是自研的高热效率机型。</p>\n<p data-pid=\"YhpC3xH_\">其实后续理想就是继续在增程系统自研方面持续发力，借助大电池增程趋势的发展，此外还要深耕车路协同的相关算法，把增程这个点打透，并继续争取政府的支持。总体来说，理想还有比较充裕的时间来发展和磨合团队与产品线，只要负责人不要脑热瞎搞就ok了。</p>\n<hr>\n<p data-pid=\"T57fufq-\">最后，下一波经济危机的趋势是所有车企将会面临的巨大浪潮，而且它将永久性的改变未来5-10年的市场格局。</p>\n<h2>在我看来，技术梦想时期，或者浮华的技术泡沫黄金时代已经到了崩溃终结的边缘。现实主义和低欲望时代消费文化的浪潮的浪尖已经出现在海天相接之初。我们所熟悉的时代即将终结。对2023-2024年的所有问题的看法，都必须要站在这个角度上，重新审视。</h2>\n<p data-pid=\"c2s4qJRi\">最后是目前正在跳动的三家公司的2022年美股情况：</p>\n<p><img src=\"https://picx.zhimg.com/v2-33e16547615b5def968a649d7e827fe7_720w.jpg?source=b1748391?rss\" data-rawwidth=\"970\" data-rawheight=\"1089\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-33e16547615b5def968a649d7e827fe7\" data-watermark-src=\"v2-6c7e004d6dc7e597db65f171cd775048\" data-private-watermark-src=\"v2-0ee9ac6fd5b5d5dd8af63fbcdfaf1a2b\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-f04447e63b4a6911bf2af4780103dbe4_720w.jpg?source=b1748391?rss\" data-rawwidth=\"497\" data-rawheight=\"257\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-f04447e63b4a6911bf2af4780103dbe4\" data-watermark-src=\"v2-7ad97189b78a36837b708a47e6bbf55d\" data-private-watermark-src=\"v2-f0f09a4167e01dc7c8027a3ac1f1e825\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/JackyQ?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">JackyQ</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/436315339/answer/2792046412?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">476 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/534158261?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">蔚来、理想、小鹏三家新势力造车公司各自有哪些亮点？</a><br><a href=\"http://www.zhihu.com/question/396147908?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">小鹏汽车、蔚来、威马等造车新势力怎样搅局能上位？</a><br>\n","link":"http://www.zhihu.com/question/436315339/answer/2792046412?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"各大新能源车的续航里程都存在严重虚标，为什么没有相关部门出来管一管？","date":"2022-12-07 06:57:24","description":"\n<p data-pid=\"AqEnQkP_\">要说「虚标」，首先要看看怎么「标」出来的。</p>\n<p data-pid=\"FdkFsB0T\">以前，中国与欧洲都使用NEDC工况测试，后来欧洲改成了WLTP，中国改成了CLTC：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-3c56d73169876e9e2760e78c96f38b9e_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1863\" data-rawheight=\"548\" data-watermark=\"original\" data-original-src=\"v2-3c56d73169876e9e2760e78c96f38b9e\" data-watermark-src=\"v2-3cd0a47642cce2fdc4819e5497dfbfd8\" data-private-watermark-src=\"v2-fe3bcb66ccbb5b1aadac6ddbe4427d86\"></p>\n<p data-pid=\"44pFawq1\">我们可以计算出三种循环的平均速度：<b>全程平均速度，以及去掉「<a href=\"https://www.zhihu.com/search?q=%E6%80%A0%E9%80%9F%E7%8A%B6%E6%80%81&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2390200268%7D\" class=\"internal\">怠速状态</a>」后的行驶平均速度</b>。可以看到，WLTP的平均速度远高于NEDC与CLTC，而CTLC比NEDC还低。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-1b512d7a9e8ad089d1c671795bbbc94a_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1107\" data-rawheight=\"268\" data-watermark=\"original\" data-original-src=\"v2-1b512d7a9e8ad089d1c671795bbbc94a\" data-watermark-src=\"v2-7177a615edebcddeee614e6d6f24a6fa\" data-private-watermark-src=\"v2-dbca38906b7ef2aea9ac716611b658bc\"></p>\n<p data-pid=\"j2PdhWRk\">总体来说我们可以看到，WLTP工况的平均速度提高了，CLTC工况的平均速度降低了。<b>从没有变速箱的新能源汽车角度来看，那就是WLTP工况变得更严苛了，CLTC工况变得更温和了</b>。</p>\n<p data-pid=\"YJIg7Jhr\">这是放水吗？ 倒也不是。<b>因为对燃油车来说，CLTC工况的油耗与WLTP差不多，都显著比NEDC高得多：</b></p>\n<p><img src=\"https://picx.zhimg.com/v2-f8b1f11846638aa87a661b3ddb073297_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1017\" data-rawheight=\"683\" data-watermark=\"original\" data-original-src=\"v2-f8b1f11846638aa87a661b3ddb073297\" data-watermark-src=\"v2-e7cc6f3b3260bfcfc3ff7dbd71ac05d7\" data-private-watermark-src=\"v2-51e7f8dcbf8923666430f6d507b9ed2a\"></p>\n<p data-pid=\"7cOdwvdJ\">从排放的角度来看，CLTC的要求更严格，文献<sup data-text=\"中国工况相对WLTC工况的排放差异研究。梁洪浩， 封博明， 于磊里 ， 涂险峰SAE2021\" data-url=\"\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"1\">[1]</sup>显示，相同行驶距离下，CLTC的CO排放比WLTC高55.40%、<a href=\"https://www.zhihu.com/search?q=THC%E6%8E%92%E6%94%BE&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2390200268%7D\" class=\"internal\">THC排放</a>高79.3%。另外一个文献[4]也显示出，CLTC的排放要比WLTP多不少。<b>燃油车直呼：CLTC太难了啊！</b></p>\n<p><img src=\"https://pica.zhimg.com/v2-c773645cdb42c3992734c2bd5949f901_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1435\" data-rawheight=\"559\" data-watermark=\"original\" data-original-src=\"v2-c773645cdb42c3992734c2bd5949f901\" data-watermark-src=\"v2-590ec43d363911b1a15bdfbe9a15e319\" data-private-watermark-src=\"v2-b2ae6c606b05f8b7fe19f28acec88179\"></p>\n<p data-pid=\"Q1xpdkUl\"><b>也就是说，从燃油车的角度来看，CLTC工况非常严格! 但是从电动力的角度来看，CLTC有意无意地放水了，从三个方面放水</b>：</p>\n<ul><li data-pid=\"HQooqGH6\">\n<b>加减速工况多 vs 制动能量回收</b>：CLTC工况的加减速工况最多，驾驶最剧烈，这对燃油车来说很难办，但对电动车来说有一种对冲手段，那就是制动能量回收。</li></ul>\n<p><img src=\"https://picx.zhimg.com/v2-5d7702b8231dd28d6c4b277774f2f996_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1646\" data-rawheight=\"547\" data-watermark=\"original\" data-original-src=\"v2-5d7702b8231dd28d6c4b277774f2f996\" data-watermark-src=\"v2-b26422692743203fec7b70542fde9462\" data-private-watermark-src=\"v2-b2a3a1ba934d23abbf7f53bf792906a2\"></p>\n<ul>\n<li data-pid=\"7sbNRWn_\">\n<b>高速工况少</b>：这点就不说了，燃油车跑高速很擅长，而电动车的高速则是弱项。</li>\n<li data-pid=\"WQXxcHmp\">\n<b>暂无低温测试</b>：燃油车不怕低温，因为发动机效率30%，剩下的70%都去制热了。电动车的电机电池效率很高，没有什么余热，要想制热只能额外消耗电能。CLTC附录规定了低温测试，但目前还没执行，倒不是出于保护电动车的考虑，而是低温测试成本高太多了，且燃油车的低温测试意义不大。</li>\n</ul>\n<p data-pid=\"8TlJ2WQZ\">从CLTC对电动车的放水，我们也可以总结出电动车的三个特点：</p>\n<p data-pid=\"Px9OtNtw\">与燃油车相比，电动车有3个特点：</p>\n<ul>\n<li data-pid=\"RKIRK6SM\">\n<b>大多没有变速箱</b>：没变速箱，意味着高速情况下，电机效率显著降低。再加上买电动车的人日常用车里程更多，意味着高速工况可能更多，更加剧了这一情况。</li>\n<li data-pid=\"DHym5ImT\">\n<b>没有发动机余热</b>：夏天一般33度，最多35度，空调开到25也就是8度的温差。冬天那可就费劲了，零下10度开到20度，那就是30度的温差 —— 燃油车用发动机余热就可以，电车则要拼了老命。</li>\n<li data-pid=\"NStEjP3o\">\n<b>电池需要<a href=\"https://www.zhihu.com/search?q=%E7%83%AD%E7%AE%A1%E7%90%86&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2390200268%7D\" class=\"internal\">热管理</a></b>：无论是制冷还是制热，电池的热管理耗费的能量不可忽略，甚至比座舱空调还费电。</li>\n</ul>\n<p data-pid=\"cCeo0itP\">照我看来，其实电动车续航测试没必要搞那么复杂：<b>在当前CLTC基础上，加一个0℃的120km/h<a href=\"https://www.zhihu.com/search?q=%E7%AD%89%E9%80%9F%E6%B5%8B%E8%AF%95&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2390200268%7D\" class=\"internal\">等速测试</a>；测出的结果也不用加权求和，就把两个数据直接给到消费者就可以了</b>。</p>\n<ul>\n<li data-pid=\"Le_QzZCp\">\n<b>CLTC</b>：测试基础表现，特别是制动能量回馈水平的考察。</li>\n<li data-pid=\"GomcDOb_\">\n<b>0℃的120km/h等速测试</b>：-7℃的实验室太贵，0℃就好得多，主要是测试一下<a href=\"https://www.zhihu.com/search?q=%E9%AB%98%E9%80%9F%E9%A9%B1%E5%8A%A8%E6%95%88%E7%8E%87&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2390200268%7D\" class=\"internal\">高速驱动效率</a>，以及低温工况下的电池性能、电池<a href=\"https://www.zhihu.com/search?q=%E7%83%AD%E7%AE%A1%E7%90%86%E6%95%88%E7%8E%87&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2390200268%7D\" class=\"internal\">热管理效率</a>、空调效率与除雾效率。</li>\n</ul>\n<p data-pid=\"RWRLxMjt\"><b>否则这么拖下去，对电动车发展还是有不利影响的：</b></p>\n<ul>\n<li data-pid=\"6Z9PHNNO\">\n<b>高速能耗优化</b>：沿用当前标准，车企没有激励去改进高速能耗。或者说，改进了高速能耗后，拿不到工信部的官方认可，必须依赖各种「媒体续航测试」来宣传，这也不是车企喜欢的状态。</li>\n<li data-pid=\"4yLZA9JR\">\n<b>低温能耗优化</b>：座舱加热、电池热管理、除雾功能，都是耗能大户。除了投入成本研发新技术之外，软件策略上的优化也有不少改进空间。由于现行标准不测，所以车企也没有激励去优化这些「细节」。</li>\n<li data-pid=\"E-lzc_Jy\">\n<b>电池选择策略</b>：为了堆续航，大家喜欢应试特长生811电池：重量轻、能量足，但它热管理的压力很大，没关系，因为考试不考热管理。另外一种523电池，常温下比不过811，但低温下的热管理压力很少，能够实现的真实续航更高。举一个例子，几何C的523电池在温度低于0℃的时候才启动加热，而大部分811电池在10-15℃时就要启动加热了！</li>\n</ul>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhangkangkang?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">张抗抗</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/567822080/answer/2789173272?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">133 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/570294835?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">目前新能源车续航甚至能达到1000公里，为什么大家对新能源汽车的续航焦虑反而有增无减？</a><br><a href=\"http://www.zhihu.com/question/549641550?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何看待新能源车由续航焦虑进展到安全焦虑？</a><br>\n","link":"http://www.zhihu.com/question/567822080/answer/2789173272?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"站在 2022 尾巴上，目前自动驾驶技术发展到了什么水平？","date":"2022-12-07 06:56:26","description":"\n<p data-pid=\"IgWgCaU4\">我的这个盘点可能有点硬核。</p>\n<p data-pid=\"l1KAWb1V\">现在各家公司都喜欢办AI/TECH DAY，从他们提出的一些独特概念，可以看到产业界的技术水平以及目前在攻关的技术问题。</p>\n<p data-pid=\"iJArp2Em\">不同的业务定位，不同的公司体量，在技术路径的选择方面存在差异，所以”发展水平“也不一致。</p>\n<p data-pid=\"WCquGGK1\">可以根据这个回答的目录查看不同的公司情况。</p>\n<p><br></p>\n<h2><b>自动驾驶公司</b></h2>\n<h3><b>Waymo</b></h3>\n<ul>\n<li data-pid=\"JJFKNDSV\">公开研究成果时喜欢带着数据集的更新或发布，以影响更多开发者</li>\n<li data-pid=\"A4KDkfTW\">官网技术博客的理解门槛较低，体现了waymo one的2C定位，主要目的是让乘客更信任自动驾驶，但又附上了具体论文网址，对技术人员很友好</li>\n</ul>\n<p data-pid=\"TDYQQ-lO\"><b>【感知】</b></p>\n<ul>\n<li data-pid=\"lCUihAw4\">近期的几篇小论文，讨论度不高</li>\n<li data-pid=\"j_KP9aEw\"><a href=\"https://zhuanlan.zhihu.com/p/577985802\" class=\"internal\">Waymo最新！SWFormer：点云3D目标检测的稀疏窗口Transformer</a></li>\n<li data-pid=\"bjAYYaDR\"><a href=\"https://zhuanlan.zhihu.com/p/577624807\" class=\"internal\">Waymo和谷歌提出LidarAugment：搜索可扩展的3D LiDAR数据增强</a></li>\n<li data-pid=\"5lbRuXqx\"><a href=\"https://zhuanlan.zhihu.com/p/578001044\" class=\"internal\">Waymo和谷歌提出PseudoAugment：学习使用未标记的数据在点云中进行数据增强</a></li>\n</ul>\n<p data-pid=\"iLiRbTzh\"><b>【决策规划】</b></p>\n<p data-pid=\"ZImD7LTe\"><b>#Surprise-based framework#</b></p>\n<ul>\n<li data-pid=\"cSvlJb4n\">Waymo一直在找判断智驾好坏的基准线，除了前几年公开分享过的<a href=\"http://link.zhihu.com/?target=https%3A//storage.googleapis.com/sdc-prod/v1/safety-report/Waymo-Safety-Methodologies-and-Readiness-Determinations.pdf\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Waymo safety framework</a>, <a href=\"http://link.zhihu.com/?target=https%3A//storage.googleapis.com/sdc-prod/v1/safety-report/Waymo-Public-Road-Safety-Performance-Data.pdf\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">real-world performance data</a>,  <a href=\"http://link.zhihu.com/?target=https%3A//storage.googleapis.com/waymo-uploads/files/documents/Waymo-Simulated-Driving-Behavior-in-Reconstructed-Collisions.pdf\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">simulated reconstruction of fatal crashes</a>，今年又有两篇相关论文</li>\n<li data-pid=\"IV3Ca1_s\">\n<a href=\"http://link.zhihu.com/?target=https%3A//storage.googleapis.com/waymo-uploads/files/documents/safety/Modeling%2520Road%2520User%2520Response%2520Timing%2520in%2520Naturalistic%2520Traffic%2520Conflicts-%2520A%2520surprise-based%2520framework.pdf\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Surprise-based framework</a>：基于“惊讶度”对真实道路环境下的司机反应时间进行测量和建模</li>\n</ul>\n<p data-pid=\"x8YyraDh\"><b>亮点/指标</b></p>\n<ul>\n<li data-pid=\"2DqZgiRH\">在反应时间上，智驾系统延迟多少算是达到标准线？目前并没有很好的答案，这篇论文就是为了解答这个问题</li>\n<li data-pid=\"dBOj6dYm\">Waymo发现在交通事故发生时人类司机的反应时间可以作为一个很好的参考，所以把“惊讶度”作为衡量标准，对真实道路环境下的司机反应时间进行测量和建模</li>\n<li data-pid=\"yXNIDiA9\">借助这个框架和模型，Waymo给自己的智驾系统的碰撞避免行为创建了一个内部基准，用于验证智驾系统的智能化程度</li>\n</ul>\n<p data-pid=\"oy6DSXF-\"><b>劣势/不足</b></p>\n<ul><li data-pid=\"XGFsHi-Z\">这是Waymo对于如何利用人类行为数据作为智驾表现好坏评价基准的尝试之一，并没有引起太多关注</li></ul>\n<p data-pid=\"T05L2yaR\"><b>#NIEON#</b></p>\n<p data-pid=\"IaczvRSX\">这个模型是基于人类司机事故数据训练出来的，意思是一个“理想型”人类司机，并把这个“司机”作为评价Waymo智驾系统的基准线</p>\n<p data-pid=\"6OBxYLvs\"><b>亮点/指标</b></p>\n<ul>\n<li data-pid=\"AgX13Act\"><a href=\"http://link.zhihu.com/?target=https%3A//blog.waymo.com/2021/03/replaying-real-life.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">去年Waymo模拟了72起2008-2017年间亚利桑那州发生过的人类驾驶的致命事故</a></li>\n<li data-pid=\"RNFsUScu\">当Waymo智驾被置于撞人角色时，完全避免或减轻了100%的碰撞</li>\n<li data-pid=\"M08eLqDH\">当Waymo智驾被置于被撞角色时，完全避免了82%的事故</li>\n<li data-pid=\"SclzZyQB\">在另外10%的场景中，当Waymo智驾是被撞角色时——当另一辆车转向其路径时，都在十字路口——它采取了减轻碰撞严重性的行动</li>\n<li data-pid=\"FQHztjve\">只有8%的被撞状态模拟没有变化，几乎都是被追尾的情况</li>\n<li data-pid=\"stjO9U9t\">今年论文公开的<a href=\"http://link.zhihu.com/?target=https%3A//storage.googleapis.com/waymo-uploads/files/documents/safety/Collision%2520Avoidance%2520Effectiveness%2520of%2520an%2520Automated%2520Driving%2520System%2520Using%2520a%2520Human%2520Driver%2520Behavior%2520Reference%2520Model%2520in%2520Reconstructed%2520Fatal%2520Collisions.pdf\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">NIEON模型</a>比起人类司机，能防止62.5%的碰撞，并降低84%的严重伤害风险</li>\n<li data-pid=\"1WpR01Qm\">但Waymo的智驾系统比NIEON模型更安全，能避免75%的碰撞，并降低93%的严重伤害风险</li>\n<li data-pid=\"s-Z5-oRz\">是证明自动驾驶比人类驾驶更安全的客观依据，同时再次科普了自动驾驶并非0事故，只是更安全，为政策制定提供依据</li>\n</ul>\n<p data-pid=\"M2ZuPe5q\"><b>【数据闭环（仿真）】</b></p>\n<p data-pid=\"5_CQ0PtZ\"><b>#Block-NeRF#</b></p>\n<ul><li data-pid=\"0ZZqnTSt\"><a href=\"http://link.zhihu.com/?target=https%3A//waymo.com/research/block-nerf/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">基于相机图像的大规模场景重建的新方法</a></li></ul>\n<p data-pid=\"5J-V1wMI\"><b>亮点/指标</b></p>\n<ul>\n<li data-pid=\"36ZQpIRx\">将场景分解为单独训练的NeRF，使渲染能够扩展到任意大的环境，并允许对环境进行每个块更新</li>\n<li data-pid=\"JyRD0XGx\">使用这项技术从280万张图像中重建了旧金山的整个社区——这是迄今为止最大的基于NeRF的3D重建</li>\n<li data-pid=\"Se3UyYBl\">细节展示了基于旧金山阿拉莫光场和使命湾合成的3D场景，阿拉莫广场面积960x570米，数据分别捕捉于6月、7月和8月，共由35个Block-NeRF组成，经过了38到48次数据收集训练，训练每个Block-NeRF分别使用了6.5万到10.8万张图像数据，累计采集时间为13.4小时（1330次数据采集）</li>\n<li data-pid=\"CCHY5uu4\">发布了Waymo Block-NeRF数据集，由12个摄像头记录的100秒驾驶组成，包含1.08公里车程，总共约12,000张图像</li>\n</ul>\n<p data-pid=\"bPKeUJsk\"><b>劣势/不足</b></p>\n<ul><li data-pid=\"SXBW_3K9\">没有公布给旧金山“建模”用了多长时间，但从描述来看，花费的总时长应该不短</li></ul>\n<p data-pid=\"Aq0C4aOm\"><b>业界评论</b></p>\n<p data-pid=\"2bvG1x-y\">NeRFs渲染的计算成本很高（每幅图像高达数秒），会收到动态物体的干扰。</p>\n<p data-pid=\"uLQi0pYS\">——<a href=\"https://zhuanlan.zhihu.com/p/581170692\" class=\"internal\">一杯半开水​</a>，知乎答主</p>\n<p data-pid=\"CFF5O25s\"><b>#Waymo Open Dataset#</b></p>\n<ul><li data-pid=\"RFxfc5TJ\">2019年推出，最大、最多样化的自动驾驶数据集之一</li></ul>\n<p data-pid=\"FP5n2NPJ\"><b>亮点/指标</b></p>\n<ul>\n<li data-pid=\"ppkaSA_l\">Perception dataset，有2030个场景，目前最新版为2022年6月升级的v1.4，分训练和评估两部分，主要在凤凰城、山景城和旧金山采集，大部分为白天和晴天</li>\n<li data-pid=\"44wJIZDQ\">Motion dataset，有目标轨迹追踪和3D同步地图，有103354个场景，目前最新版为2021年8月升级的v1.1版</li>\n<li data-pid=\"AXzkTCwD\">发布以来，支撑了500多篇论文</li>\n<li data-pid=\"cFKL8sSd\">\n<a href=\"http://link.zhihu.com/?target=https%3A//blog.waymo.com/2022/03/expanding-waymo-open-dataset-with-new-labels.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">2022年3月</a>增加了<a href=\"http://link.zhihu.com/?target=https%3A//blog.waymo.com/2022/02/utilizing-key-point-and-pose-estimation.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">关键点和姿势估计</a>、3D分割标签、2D到3D边界框对应标签</li>\n<li data-pid=\"DM8pHoGv\">\n<a href=\"http://link.zhihu.com/?target=https%3A//waymo.com/open/challenges/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">2022年Waymo开放数据集挑战赛</a>，连办多届，多家公司响应</li>\n</ul>\n<p><br></p>\n<hr>\n<p><br></p>\n<h3><b>百度</b></h3>\n<p data-pid=\"qIgvBVa7\"><b>【感知】</b></p>\n<p data-pid=\"OUmyJeBC\"><b>#文心大模型自动驾驶感知#</b></p>\n<ul>\n<li data-pid=\"1D7Awhn1\">此前的感知更多是后融合，把激光雷达、摄像头、毫米波雷达三种传感器的感知结果融合在一起</li>\n<li data-pid=\"oXN37EJv\">新一代感知2.0基于前融合方案，多模态前融合端到端</li>\n<li data-pid=\"sDrcjk3i\">利用了文心大模型图像弱监督预训练的模型来挖掘长尾数据</li>\n</ul>\n<p data-pid=\"ZPAsTXM2\"><b>亮点/指标</b></p>\n<ul><li data-pid=\"caPJTYBu\">近距离、中等距离和远距离的感知方案</li></ul>\n<p><img src=\"https://picx.zhimg.com/v2-b8eccfecbfefc26b71554b0c1834aca8_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1557\" data-rawheight=\"818\" data-watermark=\"watermark\" data-original-src=\"v2-b8eccfecbfefc26b71554b0c1834aca8\" data-watermark-src=\"v2-49de0cfe6d931216f82b615d0be494b2\" data-private-watermark-src=\"\"></p>\n<ul><li data-pid=\"m5lR44tJ\">半监督的方法来利用2D的标注和没有3D标注的数据，在既有2D又有3D的训练数据上面，去训练一个感知大模型，然后给3D数据打上3D伪标注</li></ul>\n<p><img src=\"https://picx.zhimg.com/v2-fcf34e3e8fb756fb82495c6db9240058_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1544\" data-rawheight=\"847\" data-watermark=\"watermark\" data-original-src=\"v2-fcf34e3e8fb756fb82495c6db9240058\" data-watermark-src=\"v2-162909de43039aa1956ee56880fb6b83\" data-private-watermark-src=\"\"></p>\n<ul><li data-pid=\"1-4oYjxX\">在编码器、2D检测Head、3D检测Head三个地方使用了蒸馏</li></ul>\n<p><img src=\"https://picx.zhimg.com/v2-f18c14f73aea7f21ff98c3b420cf39a3_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1451\" data-rawheight=\"760\" data-watermark=\"watermark\" data-original-src=\"v2-f18c14f73aea7f21ff98c3b420cf39a3\" data-watermark-src=\"v2-15acd7559a48f29f39655d6662794688\" data-private-watermark-src=\"\"></p>\n<ul>\n<li data-pid=\"miAx5mln\">把大模型的Detection head，包括2D、3D里面的参数，直接作为小模型的初始化，提升训练的效率和效果</li>\n<li data-pid=\"6gS3rUv8\">用了几个例子表示新模型的准确度，左边绿色的框是对应真值，红色的是预测的结果</li>\n</ul>\n<p><img src=\"https://pic1.zhimg.com/v2-e4aeb02235342ef1feccb3f56687d415_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1442\" data-rawheight=\"570\" data-watermark=\"watermark\" data-original-src=\"v2-e4aeb02235342ef1feccb3f56687d415\" data-watermark-src=\"v2-54ed6bf25ca27672e33235fdfc277563\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"udcmC-9k\"><b>【地图】</b></p>\n<p data-pid=\"ySPGOOsj\"><b>#Apollo自动驾驶地图#</b></p>\n<ul><li data-pid=\"fzIUvLyF\">主要应用于L4自动驾驶</li></ul>\n<p data-pid=\"0zHpeRoa\"><b>亮点/指标</b></p>\n<ul><li data-pid=\"HK0qU26L\">自动化数据融合：按照数据空间分布划分，构建多层级的图结构，确保全图的精度一致，在统一的坐标系下进行融合</li></ul>\n<p><img src=\"https://pic1.zhimg.com/v2-3b550a1ef3e06a1bc4fa6f461b2387fc_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"763\" data-rawheight=\"614\" data-watermark=\"watermark\" data-original-src=\"v2-3b550a1ef3e06a1bc4fa6f461b2387fc\" data-watermark-src=\"v2-a838b7b51db7af784c08b49af1037c57\" data-private-watermark-src=\"\"></p>\n<ul>\n<li data-pid=\"hpsENqU6\">地图自动化标注：多层级的点云识别，结果优于一次识别的结果，基于车道级的拓扑模板进行了矢量要素的匹配，提高了拓扑的生成以及车道线串接的准确性</li>\n<li data-pid=\"aZJUsRwC\">在线地图：使用车辆的摄像头和激光雷达，基于Transformer生成BEV的Feature Map，生成车端的实时地图，最终将车端的实时地图和高精地图以及众源地图进行有效的融合，生成在线地图</li>\n</ul>\n<p><img src=\"https://pic1.zhimg.com/v2-8f194ab9c41e153134395bb04430df55_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1535\" data-rawheight=\"576\" data-watermark=\"watermark\" data-original-src=\"v2-8f194ab9c41e153134395bb04430df55\" data-watermark-src=\"v2-b6c44330305594814ccf51eb7da1a8d3\" data-private-watermark-src=\"\"></p>\n<ul>\n<li data-pid=\"wx2da0s9\">驾驶知识图谱：基于百度地图超过1200万公里的路网覆盖、日均20亿公里的轨迹里程，包含了多维度，且丰富的驾驶知识，例如经验速度、变道的时机、变道的轨迹等等，这跟轻舟提到的人类驾驶行为数据使用类似</li>\n<li data-pid=\"B1eUQc7N\">Apollo自动驾驶地图总共分三层：静态层、动态层、知识层、驾驶层，<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/qj2qu1RVCQ4dTFZt3V8x9w\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">跟Mometa此前的说法有点像</a>\n</li>\n</ul>\n<p><img src=\"https://picx.zhimg.com/v2-958ed3983b8f483e5a7bfe2e1bb0bb1e_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1504\" data-rawheight=\"555\" data-watermark=\"watermark\" data-original-src=\"v2-958ed3983b8f483e5a7bfe2e1bb0bb1e\" data-watermark-src=\"v2-97e66c8f3001c8b26fa869a236fe5863\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"JJA15Tr2\"><b>【数据闭环】</b></p>\n<p data-pid=\"Kv4tShYT\"><b>#数据提纯#+#数据消化#</b></p>\n<ul><li data-pid=\"LXMzen3i\">百度理解整个数据闭环是由数据提纯以及数据消化这两个部分构成</li></ul>\n<p><img src=\"https://picx.zhimg.com/v2-8ed46cc1af45125806dbde2446c99d94_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1508\" data-rawheight=\"649\" data-watermark=\"watermark\" data-original-src=\"v2-8ed46cc1af45125806dbde2446c99d94\" data-watermark-src=\"v2-9bf26bf1bec4397af534d54bb6bdb9e8\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"RqcyMc9I\"><b>亮点/指标</b></p>\n<ul>\n<li data-pid=\"hn9jCE__\">数据挖掘与标注都是提高数据纯度的手段</li>\n<li data-pid=\"O0Sb-50A\">基于图文弱监督预训练的模型帮助做长尾数据的挖掘，大模型可以用来通过推理引擎获取对应数据的特征和标签，可以用作定向挖掘</li>\n</ul>\n<p><img src=\"https://pic1.zhimg.com/v2-fc4dbd3b1eb1fa32d9c922fc71da1400_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1450\" data-rawheight=\"714\" data-watermark=\"watermark\" data-original-src=\"v2-fc4dbd3b1eb1fa32d9c922fc71da1400\" data-watermark-src=\"v2-580d29b32f9feec14ff2a0b729b9674d\" data-private-watermark-src=\"\"></p>\n<ul><li data-pid=\"kf-34kCp\">车上的小模型可以进行数据的初步筛选，通过推理的方式获取小模型的标签，实现重要的数据回传，多个小模型还可以获得模型对数据的不确定性，从而实现不确定性挖掘</li></ul>\n<p><img src=\"https://pic1.zhimg.com/v2-12945b6ee76ad2fd30defe4a34b87179_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"590\" data-watermark=\"watermark\" data-original-src=\"v2-12945b6ee76ad2fd30defe4a34b87179\" data-watermark-src=\"v2-87eabcb10b94d15a8419a0c9da44ef0e\" data-private-watermark-src=\"\"></p>\n<ul><li data-pid=\"ugumbnIo\">数据消化：自动化、联合优化以及数据分布</li></ul>\n<p><img src=\"https://pic1.zhimg.com/v2-558a5780b07632d53b8f8f8614c29dfa_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1535\" data-rawheight=\"615\" data-watermark=\"watermark\" data-original-src=\"v2-558a5780b07632d53b8f8f8614c29dfa\" data-watermark-src=\"v2-dde6e2bc84e07cf4486117b83393f908\" data-private-watermark-src=\"\"></p>\n<ul><li data-pid=\"2wdGZxgZ\">自动化：使用异步的推理引擎对模型进行评测，最终的训练的输出是一个候选模型的集合，而不是单一的模型，以下图小狗为例，当出现误检之后，可以利用特征检索的一些方式，挖掘出小狗的数据，然后将新数据与旧数据同时传入到训练引擎进行自动化训练，最终实现指标的提升</li></ul>\n<p><img src=\"https://pic1.zhimg.com/v2-604a932c0b8036e073d6f20436a65bc1_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1532\" data-rawheight=\"551\" data-watermark=\"watermark\" data-original-src=\"v2-604a932c0b8036e073d6f20436a65bc1\" data-watermark-src=\"v2-d71c55803c6aad3887693d9244eacdef\" data-private-watermark-src=\"\"></p>\n<ul><li data-pid=\"o0OvA0Hs\">联合优化：假如预测指标与仿真指标的目标不一致，预测模型的指标提升不一定对仿真指标提升有帮助，但在训练的同时，将产生的预测模型实时地与下游规划模块进行打包，同步地进行仿真评测。最终的训练引擎同时优化的是离线的预测指标以及仿真的端到端指标</li></ul>\n<p><img src=\"https://pica.zhimg.com/v2-e518941452e361a8a90a50036bfad4a5_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1527\" data-rawheight=\"552\" data-watermark=\"watermark\" data-original-src=\"v2-e518941452e361a8a90a50036bfad4a5\" data-watermark-src=\"v2-4d46a3b4f89ba143f2c9b572db712f2a\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pica.zhimg.com/v2-3cca8e1b852102bd4e4ed573ff76a3b1_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1537\" data-rawheight=\"789\" data-watermark=\"watermark\" data-original-src=\"v2-3cca8e1b852102bd4e4ed573ff76a3b1\" data-watermark-src=\"v2-26bc104073f02d70a92ac98b8a91cf9b\" data-private-watermark-src=\"\"></p>\n<ul><li data-pid=\"qrwOFjft\">数据分布：首先对数据分布的先验进行统一的管理，这里的先验可以是人为设定的，也可以是通过学习来获得。当这个先验进入到训练引擎之后，训练引擎其实可以把这个先验或者这个数据分布当作超参数，做一定程度的探索或搜索。当发现更好的分布之后，可以通过一个反馈的机制修正数据分布的先验</li></ul>\n<p><img src=\"https://pic1.zhimg.com/v2-fd26c4f9a36ac1f2930649f7d7f42997_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1527\" data-rawheight=\"744\" data-watermark=\"watermark\" data-original-src=\"v2-fd26c4f9a36ac1f2930649f7d7f42997\" data-watermark-src=\"v2-fdb4a626283c3d3749a18554910f8455\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://picx.zhimg.com/v2-3002f38288a4428681a0f273cc0a5c5a_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1529\" data-rawheight=\"650\" data-watermark=\"watermark\" data-original-src=\"v2-3002f38288a4428681a0f273cc0a5c5a\" data-watermark-src=\"v2-e3b0e5649f27ac69f3a1c5a82809b1fa\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"OySmi6Jp\"><b>【计算平台】</b></p>\n<p data-pid=\"xHYhbO99\"><b>#昆仑芯#</b></p>\n<p data-pid=\"cKX_HqbC\"><b>亮点/指标</b></p>\n<ul>\n<li data-pid=\"--hN4aHw\">第一代14纳米的人工智能芯片，HBM内存，2.5D封装，已经在百度数据中心里面部署了超过2万片；</li>\n<li data-pid=\"tmmm5O53\">第二代AI芯片，7纳米的工艺，XPU第二代架构，第一颗采用GDDR6内存技术的AI芯片</li>\n</ul>\n<p><img src=\"https://picx.zhimg.com/v2-199302072daa299379d3a2143a58c068_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1542\" data-rawheight=\"746\" data-watermark=\"watermark\" data-original-src=\"v2-199302072daa299379d3a2143a58c068\" data-watermark-src=\"v2-96b830972130e6c27f46a4b7615917b4\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-370db114e4a004a739ed0198ed74c31a_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1443\" data-rawheight=\"665\" data-watermark=\"watermark\" data-original-src=\"v2-370db114e4a004a739ed0198ed74c31a\" data-watermark-src=\"v2-1b3b6b78f5e820d99e993375a4348fd1\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<hr>\n<p><br></p>\n<h3><b>轻舟</b></h3>\n<p data-pid=\"MifjuMGQ\"><b>【感知】</b></p>\n<p data-pid=\"-aVqYmIc\"><b>#OmniNet#</b></p>\n<ul><li data-pid=\"CqNb5Fzh\">时序多模态特征融合，应用于前中融合阶段、实现数据/特征融合的全任务大模型</li></ul>\n<p data-pid=\"33FW4ldt\"><b>亮点/指标</b></p>\n<ul><li data-pid=\"LoShzAXk\">将视觉、毫米波雷达、激光雷达等数据通过前融合和BEV空间特征融合，让本来独立的各个计算任务通过共享主干网络（backbone）和记忆网络（memory network）进行高效多任务统一计算，最终同时在图像空间和BEV空间中输出不同感知任务的结果</li></ul>\n<p><img src=\"https://picx.zhimg.com/v2-4cc8bf121e90b3698231c5023f93ccd1_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"852\" data-rawheight=\"402\" data-watermark=\"watermark\" data-original-src=\"v2-4cc8bf121e90b3698231c5023f93ccd1\" data-watermark-src=\"v2-e115e28ecbb298e62f99e9b46d162c50\" data-private-watermark-src=\"\"></p>\n<ul>\n<li data-pid=\"WrzTdWok\">情调通用障碍物识别：在前向lidar视野内，OmniNet可输出每一个占据栅格的语义、实例、运动状态等信息，不仅能有效识别车辆、人群、植被、护栏、锥桶、小动物、施工区域等常见的道路交通参与元素，各类陌生或长尾罕见的异形障碍物，即使不属于交通参与者也可以识别并快速做出反应</li>\n<li data-pid=\"oK6GRWfd\">让本来独立的各个计算任务通过共享主干网络（backbone）和记忆网络（memory network）进行高效多任务统一计算，在完成相同数量任务的基础上，OmniNet可以节省2/3的算力</li>\n</ul>\n<p><img src=\"https://pic1.zhimg.com/v2-e154bb48f2bccd0859562877caa3fc91_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"852\" data-rawheight=\"402\" data-watermark=\"watermark\" data-original-src=\"v2-e154bb48f2bccd0859562877caa3fc91\" data-watermark-src=\"v2-1d24166521cf939bbc0e26c5aecc3b94\" data-private-watermark-src=\"\"></p>\n<ul><li data-pid=\"nrFgdePl\">前向120度的激光雷达看不到后方，但通过时序和空间融合算法，在车行驶过程中，前向激光雷达扫过的区域会在系统时刻进行记忆，并在车往前行进后将记忆区域的点云数据，与侧向后向的纯视觉信息进行补充和融合，从而保证对前后向区域的充分认知</li></ul>\n<p data-pid=\"Q7zqOtqx\"><b>【决策规划】</b></p>\n<p data-pid=\"cSLDhIlA\"><b>#时空联合规划#</b></p>\n<ul>\n<li data-pid=\"TlXYBq1R\">业界更多采用的是「时空分离规划」——把「对轨迹的规划」拆分成两个子问题，即路径规划（path planning）和速度规划（speed planning），路径规划对应于横向控制，即方向盘；速度规划对应于纵向控制，即刹车或油门，这种决策机制也就是通常所谓的「横纵分离」</li>\n<li data-pid=\"VoI8LmT3\">「时空分离规划」相当于先为车辆「铺好」一段铁轨，再在铁轨上计算速度。这种方式非常依赖手写规则调整车辆行为，也非常依赖大量路测来验证算法</li>\n<li data-pid=\"nqAbAAYK\">轻舟智航自研「时空联合规划算法」，同时考虑空间和时间来规划轨迹，能直接在x-y-t（即平面和时间）三个维度的空间中直接求解最优轨迹</li>\n</ul>\n<p><img src=\"https://pica.zhimg.com/v2-69431bcd83d401945204592478e33931_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"852\" data-rawheight=\"468\" data-watermark=\"watermark\" data-original-src=\"v2-69431bcd83d401945204592478e33931\" data-watermark-src=\"v2-11cc6c837c3f8fc5e9875ddb6a933edd\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"dW-wtk-S\"><b>亮点/指标</b></p>\n<ul><li data-pid=\"qh7SiDnH\">用了一个案例来说明两种规划算法的区别</li></ul>\n<p><img src=\"https://picx.zhimg.com/v2-3875defe4847d6c26da22fd8731d2a05_720w.gif?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"338\" data-watermark=\"watermark\" data-original-src=\"v2-3875defe4847d6c26da22fd8731d2a05\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pica.zhimg.com/v2-c2102558b9d93923323bd172f61737df_720w.gif?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"338\" data-watermark=\"watermark\" data-original-src=\"v2-c2102558b9d93923323bd172f61737df\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<ul>\n<li data-pid=\"DnOXklS5\">规划控制技术架构设计灵活，可以适用高低性能的计算平台，当算力足够的时候，会计算出较多轨迹，选取最优轨迹，充分利用多核做并行计算；算力有限的情况下，生成的轨迹会相应减少，但也可以保证行车的安全性与稳定性</li>\n<li data-pid=\"_sx-3K0G\">将传统机器人技术和机器学习技术结合，通过深度学习来优化决策和规划，在大规模智能仿真系统中，模型算法每天可以抽取数百万帧有效数据，完成训练、测试验证和迭代优化，说明两个场景——“判断跟车距离”和“选择变道时机”都是可以基于人类驾驶行为数据训练得出的</li>\n<li data-pid=\"xRj33GUQ\">特斯拉讲的联合优化是指自车和障碍物之间的优化，跟轻舟的时空联合优化不是一回事，自车和障碍物的博弈并非轻舟强调的点</li>\n</ul>\n<p data-pid=\"2YUuuIsV\"><b>#Prophnet预测模型#</b></p>\n<ul>\n<li data-pid=\"OTcZqt-k\">轻舟的预测模块分为车端和训练平台端两大重要部分：</li>\n<li data-pid=\"nhE-d7El\">车端的预测模块的主要目的是预测障碍物未来可能的行进轨迹，该模块又分成预测Context、预测Scheduler、后处理这三个主要的子模块</li>\n<li data-pid=\"fS3Vnc7u\">预测Context（预测的上下文）：主要用于记录各种各样的信息，比如自动驾驶车的历史的驾驶信息，障碍物的历史信息、包括历史的位置姿态，它的转向灯的历史序列，还有当前障碍物的信息。还有地图和红绿灯，因为障碍物的很多运动是跟地图以及红绿灯的状态强相关的，所以预测也需要考虑地图和红绿灯。</li>\n<li data-pid=\"luUluzVP\">预测Scheduler：使用预测Context提供的信息来预测障碍物未来的行为和轨迹。</li>\n<li data-pid=\"Kn7VIJjs\">首先对障碍物进行优先级分析：把障碍物分成高优的——即距离自车较近的、有潜在交互风险的障碍物，和低优先级的----跟自车交互可能比较低的障碍物，比如远处的。这么做的主要目的是把有限的车载的算力去集中到比较重要的障碍物上。</li>\n<li data-pid=\"XkA3HFnr\">其次是场景分析，主要分析障碍物当前所处的场景：比如正处于路口，还是正常道路；是在高速，还是在匝道上等等</li>\n<li data-pid=\"SdfO8vv9\">经过分析之后，会有相应的预测分发逻辑。根据不同的优先级、不同的场景，分发到不同的预测器去做大量的预测（预测器可以理解为预测算法的「容器」，不同的预测器包含不同的预测算法）</li>\n<li data-pid=\"Pb1DGK-3\">后处理：解决预测轨迹之间的冲突：比如两个预测如果互相矛盾，那么会由冲突解决模块去仲裁</li>\n<li data-pid=\"a5huMUpi\">裁剪低概率预测轨迹：如果有预测的轨迹概率较低，则可以裁剪掉不给下游。</li>\n<li data-pid=\"OL7sBhAl\">交互后处理：主要处理障碍物，预测未来的轨迹，预测和自车的潜在的交互。 </li>\n<li data-pid=\"z4gfogCc\">训练平台端拥有预测样本生成模块——从海量的路测数据里提取感兴趣的预测样本，再将这些样本存到样本库中，在样本库中，预测模型的训练模块会从中选取所需的样本，进行深度学习模型的训练和优化</li>\n</ul>\n<p data-pid=\"TYEr0cAT\"><b>亮点/指标</b></p>\n<ul>\n<li data-pid=\"188SV1Ae\">提供10秒的意图加轨迹预测，主模型预测有至少三条带概率的轨迹，同时最大概率轨迹和真值的平均误差是 3.73 米，即10 秒整体轨迹的平均误差3.73 米（没有提及在什么场景下）</li>\n<li data-pid=\"HCk1UMeA\">主模型可同时支持预测 256 个目标，推理整体耗时小于 20 毫秒，可以满足实时运算的需求</li>\n<li data-pid=\"db3-xbmg\">除主模型外还包括副模型，包括Cutin模型，其平均可以提前一秒预测到和自车平行的障碍物的切入行为。准确率达95%，误报率小于10%，路口出口的选择模型的准确率也能高达90%以上</li>\n<li data-pid=\"UbsNqCXi\">Prophnet模型在Argoverse 2021年和2022年的比赛里分别拿到是冠军和季军，号称可在车端以10Hz的频率运行</li>\n</ul>\n<p data-pid=\"QsB0YpZE\"><b>【数据闭环】</b></p>\n<p data-pid=\"c4cUKl-p\"><b>#轻舟矩阵#</b></p>\n<ul><li data-pid=\"Jppxje_6\">轻舟自动驾驶研发的工具链</li></ul>\n<p data-pid=\"9gn8xUjn\"><b>亮点/指标</b></p>\n<ul>\n<li data-pid=\"9lRKgNqe\">建立了驾驶数据仓库，可自动化地对实际驾驶数据和影子模式下的人工驾驶数据打上标签。这些标签的内容非常丰富，数量多达成百上千个，包括道路信息（道路级别、种类、车道类别等）、坐标环境信息（周围障碍物、车流密度、行人、其他车辆是否cut in等）、自车信息（自车的速度、位置）、从影子模式中获得的人类司机的开车数据，由此就可以得知人类司机在哪个时间点刹车变道、什么时候打了转向灯</li>\n<li data-pid=\"4jzV4JHY\">可以更便捷地针对发现的问题建立场景库：比如，如果自车无法很好地处理有大车cut in的情况，就可以将大车在自车前突然起步的类似情况全挖掘出来，做成场景库进行仿真测试</li>\n<li data-pid=\"_JrEyxGL\">线上事件挖掘机制：当发现有行人检测不稳定的情况时，便会将相关时段的信息保存上传；在案例分析阶段，找到大量相似场景，确认相关场景的共性和算法处理的不足，在此基础上进一步挖掘出充分的数据用于标注训练，最终解决好这一类场景的问题</li>\n<li data-pid=\"sx94IrqD\">生成红绿灯数据：通过对抗式生成网络，在有大量红绿灯数据积累的情况下，进一步增强其多样性；生成的数据可以在许多维度上更加多样化，在模型训练中加以使用，可以大幅提升模型算法的泛化能力</li>\n</ul>\n<p><br></p>\n<hr>\n<p><br></p>\n<h3><b>华为</b></h3>\n<ul><li data-pid=\"V6c9-j4q\">主要是2021年和2022年上半年的公开资料</li></ul>\n<p data-pid=\"X9EqbItg\"><b>【数据闭环（仿真）】</b></p>\n<p data-pid=\"hl3g-sxV\"><b>#八爪鱼#</b></p>\n<ul>\n<li data-pid=\"e7hBTBnr\">工具链分为数据、训练、仿真、监管四部分</li>\n<li data-pid=\"Aiu-LYhD\">可解耦、可定制化</li>\n</ul>\n<p data-pid=\"teSwZmkY\"><b>亮点/指标</b></p>\n<ul>\n<li data-pid=\"D7Xty7qj\">华为的预标注算法精度已经达到领先水平，在nuScenes、COCO、KITTI等多个自动驾驶国际公开数据集测试挑战中获得第一</li>\n<li data-pid=\"irV_xhld\">可提供50多类、120多万张、超过2000多万对象的标注数据集，而且这个数据集是持续迭代、持续扩充的</li>\n<li data-pid=\"qJqeMoKY\">对场景进行智能化打标签：开发人员可以上传需要车辆获取的图片，通过云端下发指令，车端会采取类似‘以图搜图’的方式，遇到类似的场景就会自动截取下来，形成特定场景的难例数据集，减少90%的上云数据，并节省70%的数据集构建时间</li>\n<li data-pid=\"kDb2X8Dl\">一键将真实路测场景转化为仿真场景，可实现95%以上的场景还原能力，能有效帮助开发者快速模拟周边车辆，实现分钟级的场景构建</li>\n<li data-pid=\"vC6toiiA\">从安全性、舒适性、可靠性、人机交互体验、可用性、合规性、能耗性和通行效率等维度，共开放了200项评价指标</li>\n<li data-pid=\"Df5tqpY3\">虚拟仿真测试：将规控算法评测周期从原来的天级缩短到了小时级，整个算法的迭代周期也从周级缩短到了天级</li>\n<li data-pid=\"D0_MDNhj\"><a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/H45XfcZjSECjCsoWO1efdg\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">提供超过20万个仿真场景实例；系统每日虚拟测试里程可超过1000万公里，支持3000个实例并发测试</a></li>\n<li data-pid=\"9zB4tInB\">提供给客户一套参考算法，客户可以在此基础上调试优化</li>\n<li data-pid=\"kKp9FXqy\">和VTD战略合作，并嵌入了CarMaker的车辆动力学模型</li>\n<li data-pid=\"ILOKrqOs\"><a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s%3Fsrc%3D11%26timestamp%3D1668404301%26ver%3D4165%26signature%3DoxPG37MfQPBy9tJVIHxwKB34MwHTxlAq9s5zXzgpTurKMyNNRbPo-VoT5XpTm8nTFnivqd7vdvxqL4ABVCsOTFMlIoo7Xp1BpId9WwoiW5H-Gd%2Axhkxxl3bxuIM3pAB8%26new%3D1\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">车企间的数据共享：有一个叫 Club 的模式，车厂可以选择加入或不加入，如果加入的话所有是共享的。如果不加入，那你自己就是一个 Poor，别人也不会和你共享。</a></li>\n</ul>\n<p data-pid=\"m2W4uY_R\"><b>【地图】</b></p>\n<ul>\n<li data-pid=\"x_PX9Zyf\"><a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s%3Fsrc%3D11%26timestamp%3D1668404301%26ver%3D4165%26signature%3DoxPG37MfQPBy9tJVIHxwKB34MwHTxlAq9s5zXzgpTurKMyNNRbPo-VoT5XpTm8nTFnivqd7vdvxqL4ABVCsOTFMlIoo7Xp1BpId9WwoiW5H-Gd%2Axhkxxl3bxuIM3pAB8%26new%3D1\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">根据对高精度地图的依赖程度，分成三类：</a></li>\n<li data-pid=\"qE9QH8YB\">ICA 模式：车内有预制的高精地图</li>\n<li data-pid=\"ZjNF5gGa\">ICA+ 模式：没有高精度地图，但是车会根据自车或者是他车开过的环境自动学习地图</li>\n<li data-pid=\"CBlPSMXy\">NCA 模式：车在第一次开的地方实现自动驾驶</li>\n<li data-pid=\"q3I7Lpql\">整个地图系统叫 Roadcode，Roadcode 里面有两部分组成，一个叫 Roadcode HD，一个叫 Roadcode RT</li>\n<li data-pid=\"nrJWpJOC\">Roadcode HD可以理解为传统的高精度地图，有专门的地图制作团队做的，是离线的。Roadcode RT 是车子的自学习地图，用于NCA和ICA+ 。这两个东西是两位一体的，Roadcode RT 本身会不断地自学习后去更新 HD，把数据沉淀下来。 AVP 也是同样的实现原理。（个人理解类似于特斯拉3D场景重建的做法）</li>\n</ul>\n<p><br></p>\n<hr>\n<p><br></p>\n<h2><b>自研车企</b></h2>\n<h3><b>特斯拉</b></h3>\n<ul>\n<li data-pid=\"G3MCL5Vy\">更多分享的是方法论上的创新，以及在最终结果上跟自身过往方法相比的优势</li>\n<li data-pid=\"fQW8YLO5\">对比国内公司，敢于把较多的技术细节分享出来，从而会引发更多工程师的关注和分析，相反国内的技术分享总是让人云里雾里的</li>\n<li data-pid=\"xVmMWyVN\">大部分工程师会细细研究Demo视频，了解细节及原理</li>\n<li data-pid=\"crmUveYp\">没有官方中文解读，所以国内工程师都是连蒙带猜，在语言理解上有点各持一言</li>\n<li data-pid=\"zwFgTYwo\">过去一年训练了75000个神经网络，每8分钟就要出一个新的模型，共有281个模型用到了特斯拉的车上</li>\n</ul>\n<p data-pid=\"78LJ0boo\"><b>【感知】</b></p>\n<p data-pid=\"sg4G_yry\"><b>#Occupancy Network#</b></p>\n<ul>\n<li data-pid=\"hSmcjPah\">Occupancy表示空间中每个3D体素是否被占据</li>\n<li data-pid=\"_30ZVZEJ\">可以更好地处理长尾问题——类别不明的障碍物</li>\n</ul>\n<p data-pid=\"PRLjjYYt\"><b>亮点/指标</b></p>\n<ul><li data-pid=\"nKI_vQEZ\">以多个场景demo展示了对物体形状以及运动状态的感知</li></ul>\n<p><img src=\"https://pica.zhimg.com/v2-905b15019be57738d5bc7ca2fcb9c632_720w.png?source=b1748391?rss\" data-caption=\"不同颜色含义：蓝色表示运动物体，红色表示车辆，绿色表示路沿...\" data-size=\"normal\" data-rawwidth=\"683\" data-rawheight=\"325\" data-watermark=\"watermark\" data-original-src=\"v2-905b15019be57738d5bc7ca2fcb9c632\" data-watermark-src=\"v2-3303538ae7bc6c3e86ab2bf8db2fdd7b\" data-private-watermark-src=\"\"></p>\n<ul>\n<li data-pid=\"SG2aOvz_\">3D分割输出时长只需要10ms</li>\n<li data-pid=\"Z7B_TtBh\">从Demo中估算的感知范围：前向40m，后向20m，左右15m，单个体素约为40cm的立方体</li>\n</ul>\n<p><img src=\"https://picx.zhimg.com/v2-d7139c026ac5548b0c1201c9dd906055_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"940\" data-rawheight=\"527\" data-watermark=\"watermark\" data-original-src=\"v2-d7139c026ac5548b0c1201c9dd906055\" data-watermark-src=\"v2-9fa52c9ef6b33f7b5f7ac39190f5a8ce\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-d0f56cbfa9e3f826b726fdf94b78fd4a_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1161\" data-rawheight=\"741\" data-watermark=\"watermark\" data-original-src=\"v2-d0f56cbfa9e3f826b726fdf94b78fd4a\" data-watermark-src=\"v2-54641747a5bca1ec183a3157bbd5b12b\" data-private-watermark-src=\"\"></p>\n<ul><li data-pid=\"MvdhHUh0\">公开了模型结构：</li></ul>\n<p><img src=\"https://pica.zhimg.com/v2-c5eb14b9080f2f5a22da92b9b69a07c7_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1618\" data-rawheight=\"844\" data-watermark=\"watermark\" data-original-src=\"v2-c5eb14b9080f2f5a22da92b9b69a07c7\" data-watermark-src=\"v2-16774522c939d5eb9af5d33b893682ee\" data-private-watermark-src=\"\"></p>\n<ul>\n<li data-pid=\"ulJEceG0\">直接输出道路信息（Surface Outputs），包括海拔和语义信息</li>\n<li data-pid=\"r9BTqigH\">基于queryable MLP decoder，避免了分辨率对模型的限制</li>\n</ul>\n<p data-pid=\"Hac3LwT8\"><b>劣势/不足</b></p>\n<ul>\n<li data-pid=\"DnEp5x_i\">\n<a href=\"https://zhuanlan.zhihu.com/p/573570419\" class=\"internal\">Occupacy network的真值监督用到了特斯拉4D标注中的线下三维重建场景</a>，但重建场景也存在不准确性</li>\n<li data-pid=\"tLru4OIm\">Tesla bot也用了相同的技术栈，但从demo来看，Occupancy Network在室内的体素体积更小，准确度一般</li>\n<li data-pid=\"F11aB85l\">首次亮相是2021年FSD Beta的Release Note中，后来在<a href=\"http://link.zhihu.com/?target=https%3A//www.youtube.com/watch%3Fv%3DjPCV4GKX9Dw\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">CVPR 2022 WAD WORKSHOP</a>介绍了更多细节</li>\n</ul>\n<p data-pid=\"oCpOpmRv\"><b>业界评论</b></p>\n<p data-pid=\"5ZU3ZfKq\">Occupancy无非就是传统激光雷达的点云思路，花几千块装一颗前向固态激光雷达不香吗？但确实是纯视觉感知领域的一个趋势，进一步支撑了特斯拉纯视觉路线的可行性。</p>\n<p data-pid=\"AgxAqdjC\">——某智驾公司工程师</p>\n<p data-pid=\"E4pMpp9V\">由于这个网络的输出是稠密（dense）的，输出的分辨率会受到内存的限制。因此，受到神经隐式表示的启发，模型的最后额外设计了一个隐式queryable MLP decoder，输入任意坐标值(x,y,z)，可解码出该空间位置的信息，即occupancy，semantics，flow。该方法打破了模型分辨率的限制。</p>\n<p data-pid=\"D_XZ0Xet\">——<a href=\"https://zhuanlan.zhihu.com/p/570824078\" class=\"internal\">赵行，清华大学交叉信息院，助理教授</a></p>\n<p data-pid=\"IIfTmkuV\">Occupancy Network相比Lidar的优势在于可以更好地将感知到的3D几何信息与语义信息融合，而不需要对Lidar和相机进行时间同步，外参对齐等工作。</p>\n<p data-pid=\"CrvkePIm\">3D分割输出时长只需要10ms，<a href=\"https://zhuanlan.zhihu.com/p/570431956\" class=\"internal\">可以达到跟相机同样的36Hz，而目前绝大多数雷达的采集频率只有10Hz，在高速情况下可能比雷达更强</a>。</p>\n<p data-pid=\"TwHakqMP\">——<a href=\"https://zhuanlan.zhihu.com/p/570431956\" class=\"internal\">EatElephant</a>，知乎答主</p>\n<p data-pid=\"npYQcWGJ\">国内大部分自动驾驶公司的BEV方案目前尚未工程化，Tesla转入occupancy network+NERF给国内同行出了大难题，究竟跟还是不跟？</p>\n<p data-pid=\"zwoStuUW\">——RobotDreamer001，知乎答主</p>\n<p data-pid=\"lptkIGkR\"><b>#NeRF#</b></p>\n<ul><li data-pid=\"rAm-EiO0\">\n<a href=\"https://zhuanlan.zhihu.com/p/390848839\" class=\"internal\">Neural Radiance Fields</a>，用深度学习完成3D渲染，完成三维场景的重建</li></ul>\n<p data-pid=\"rmcWTa_J\"><b>亮点/指标</b></p>\n<ul>\n<li data-pid=\"Edbl__M2\">以demo呈现利用车队数据离线构建的三维场景效果</li>\n<li data-pid=\"FxcnZZzF\">每次重建可能会遇到图像模糊、雨、雾等，但多辆车的数据可以相互补充，在全世界范围内不同天气和光照条件下都能用上</li>\n<li data-pid=\"LHcfLD4d\">\n<a href=\"https://www.zhihu.com/question/315998932/answer/2708935374\" class=\"internal\">NeRF和Occupancy的相互结合</a>：Occupancy network产生 3D volume后，将其于3D-reconstruction volume（Nerf离线训练得到）进行比较，起到监督作用</li>\n</ul>\n<p data-pid=\"_KtvXssF\"><b>劣势/不足</b></p>\n<ul>\n<li data-pid=\"piaqX6H_\">相比追求渲染颜色效果，更应该追求准确的位置信息，但官方表示这部分还在努力</li>\n<li data-pid=\"7CUVzXU9\">NeRF在Occupancy中的应用类似于“高精地图”，未来如果特斯拉的车队能做到对街景的细节重建，中国测绘政策就形同虚设了</li>\n</ul>\n<p data-pid=\"PtNNAG7T\"><b>业界评论</b></p>\n<p data-pid=\"Td9v-wCE\">即使我们没有像特斯拉那种线下的三维重建技术，仅使用激光雷达作为占用与否监督信号， 再使用NeRF的渲染来对重建施加更强的约束，也可以得到不错的重建效果。</p>\n<p data-pid=\"P33mkeV4\">——<a href=\"https://www.zhihu.com/people/myonlymain\" class=\"internal\">Zhangbaofeng</a>，知乎答主</p>\n<p data-pid=\"oOtcxL-A\"><b>【决策规划】</b></p>\n<p data-pid=\"MY6qlqVo\"><b>Interaction Search</b></p>\n<ul><li data-pid=\"vTvTlLjB\">基于神经网络的轨迹规划，<a href=\"https://zhuanlan.zhihu.com/p/570824078\" class=\"internal\">基于特斯拉车队的人类驾驶行为轨迹以及离线优化算法得出轨迹</a>\n</li></ul>\n<p data-pid=\"zs6IGub8\"><b>亮点/指标</b></p>\n<ul>\n<li data-pid=\"Xk0yiVsf\">讲解时，先基于无保护左转讲了传统方法的轨迹生成和优化的劣势，再抛出Interaction Search</li>\n<li data-pid=\"HRZ7BOKz\">基于神经网络可形成数据驱动，减少对工程师的依赖</li>\n<li data-pid=\"FBOWJS_1\">基于神经网络的轨迹生成比传统方法时延下降了许多，从1-5ms per action到100us per action</li>\n<li data-pid=\"7kQXtRx0\">在计算上，从CPU迁移到了GPU</li>\n<li data-pid=\"EeJk0jUh\">分享了一个Occlusion的案例：在摄像头被遮挡的区域里，会假设有一个ghost object从远处开过来，这样做类似于人类的习惯</li>\n</ul>\n<p data-pid=\"pfztVHWo\"><b>劣势/不足</b></p>\n<ul><li data-pid=\"R_fDJ9e_\">特斯拉的Joint Planning指的是自车和他车的联合规划，主要分享的是轨迹的优化方法，没有谈到速度和方向的联合优化方法（国内吉大郭洪艳教授提出过横纵向一体化决策，轻舟提出过时空联合优化）</li></ul>\n<p data-pid=\"ScZ5aEOL\"><b>业界评论</b></p>\n<p data-pid=\"etmPCvvG\">基于神经网络的轨迹规划可以参考的论文并不多，我有发表过一篇与该方法比较相关的论文。</p>\n<p data-pid=\"MpomUAz5\">——<a href=\"https://zhuanlan.zhihu.com/p/570824078\" class=\"internal\">赵行，清华大学交叉信息院，助理教授</a></p>\n<p data-pid=\"t8CqdySF\">特斯拉把预测模块结合在了规划里，比起其他把预测作为独立模块的公司，确实更强调自车和他车的联合优化。</p>\n<p data-pid=\"omfoiRQ0\">——某智驾公司工程师</p>\n<p data-pid=\"tMCyOItS\">从最新的FSD Beta实测视频可以看出，FSD开始懂得利用向前小步挪移开视野，同时在遮挡比较多的人形道，横穿马路时候进行保护性驾驶的策略都确认了AI Day分享的内容就在实车上运行着，这些比较前沿的规划研究都实实在在用在了Tesla FSD的产品中，可见FSD规划算法的先进性以及整个系统的完整性和复杂性，确实处于行业最顶尖行列。</p>\n<p data-pid=\"rt3XLH2e\">——<a href=\"https://zhuanlan.zhihu.com/p/570431956\" class=\"internal\">EatElephant</a>，知乎答主</p>\n<p data-pid=\"sjyxwBdg\"><b>【地图】</b></p>\n<p data-pid=\"KRoZktRK\"><b>#Lanes Network#</b></p>\n<ul>\n<li data-pid=\"zYz_o8xy\">在线矢量地图构建模型，参考了自然语言模型中的Transformer decoder，以序列的方式自回归地输出结果</li>\n<li data-pid=\"mdg2jQN_\">分割得到的像素级别的车道不足够用于轨迹规划，而通过Lanes Network可以得到车道线的拓扑结构</li>\n</ul>\n<p data-pid=\"9SCd7bXh\"><b>亮点/指标</b></p>\n<ul>\n<li data-pid=\"xRCFUNhO\">展示了传统车道线识别的方法只能应用于高速，在城市这种有更多路口的环境下，难以应用</li>\n<li data-pid=\"hFF-1502\">由于Map信息的稀疏性，向量化表示比栅格化表示更佳</li>\n<li data-pid=\"-9hlVY1V\">详细介绍了如何加速Lane Network这类模型</li>\n</ul>\n<p><img src=\"https://picx.zhimg.com/v2-53f5e1d78bc0864832a4198e72010e7f_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1519\" data-rawheight=\"555\" data-watermark=\"watermark\" data-original-src=\"v2-53f5e1d78bc0864832a4198e72010e7f\" data-watermark-src=\"v2-0c178efc152c9f1bf60e0820a20974ba\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"9tnZITzB\"><b>业界评论</b></p>\n<p data-pid=\"2W2lHYYs\">我们课题组在过去几年中也有两篇生成矢量地图的相关论文，<a href=\"https://zhuanlan.zhihu.com/p/574687904\" class=\"internal\">HDMapGen和VectorMapNet</a>。HDMapGen采用带注意力的图神经网络（GAT）自回归地生成矢量地图的关键点，和特斯拉的方案有异曲同工之妙。而VectorMapNet采用了Detection Transformer（DETR）来解决该问题，即用集合预测（set prediction）的方案来更快速地生成矢量地图。</p>\n<p data-pid=\"TK8PZE31\">——<a href=\"https://zhuanlan.zhihu.com/p/570824078\" class=\"internal\">赵行，清华大学交叉信息院，助理教授</a></p>\n<p data-pid=\"wu85awUm\">虽然特斯拉在仿真和创建各种场景，但并不意味着“重地图”，只是把地图用在了离线标签生成，来支撑模型训练。</p>\n<p data-pid=\"hY5rF-ch\">——Karpathy，前Tesla AI视觉总监</p>\n<p data-pid=\"_itSFdym\">目前看来Tesla的生成的Lane Graph Vector也并不是完美的，除了一些节点和连接问题，在使用感知车道线连接关系时候也有着一些瑕疵，例如下图是AI Day上展示的一个视频片段，明眼人可以看出这里对向左转车辆轨迹预测并没完全与车道线感知匹配起来，比如这一时刻就预测到了中间隔离带，上一时刻则转向了逆行车道，这样的轨迹预测精度可能会在复杂路口路径规划过程中造成一定的问题，但是这些问题是性能方面的问题，整体技术框架已经越来越趋于完善，后续性能提高则需要不断在现有基础上迭代就一定可以提升。</p>\n<p data-pid=\"jnMm6PAQ\">——<a href=\"https://zhuanlan.zhihu.com/p/570431956\" class=\"internal\">EatElephant</a>，知乎答主</p>\n<p><img src=\"https://pic1.zhimg.com/v2-a01447f1cf3be7850bbf16f710dc337d_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"377\" data-watermark=\"watermark\" data-original-src=\"v2-a01447f1cf3be7850bbf16f710dc337d\" data-watermark-src=\"v2-ee23cb04393681f2ec6c614d36749d11\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"6MwxWN3h\"><b>【数据闭环（仿真）】</b></p>\n<p data-pid=\"RfyoTOOb\"><b>#Autolabeling#</b></p>\n<ul>\n<li data-pid=\"Z73GVUvo\">\n<a href=\"https://zhuanlan.zhihu.com/p/402567148\" class=\"internal\">去年AI DAY详解了Autolabeling</a>，今年主要讲解Lanes Network的自动标注</li>\n<li data-pid=\"QZT7JNCH\">通过车队收集上来的多轨迹，重建道路环境，在新的轨迹上便可以重建的道路环境作为真值，自动标注出车道线，自动标注一段新轨迹的时间约为30分钟，支持并发</li>\n</ul>\n<p data-pid=\"5YALddn1\"><b>亮点/指标</b></p>\n<ul><li data-pid=\"EvG19H4h\">在车道线标注上的各类指标提升情况，原本一万个trips需要5百万个小时的人工标注，现在只需要机器运转12个小时便能完成</li></ul>\n<p><img src=\"https://picx.zhimg.com/v2-85c790c0ff36a1aef2bc7588e0652f3e_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1362\" data-rawheight=\"656\" data-watermark=\"watermark\" data-original-src=\"v2-85c790c0ff36a1aef2bc7588e0652f3e\" data-watermark-src=\"v2-84b16cf679ab0addad35af858ec11da8\" data-private-watermark-src=\"\"></p>\n<ul><li data-pid=\"OQwrX9Ci\">展示了在黑暗、雾气、遮挡、雨天情况下的自动标注效果</li></ul>\n<p><img src=\"https://picx.zhimg.com/v2-c14c5e441d308a687f7e155dca1fa95e_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1345\" data-rawheight=\"749\" data-watermark=\"watermark\" data-original-src=\"v2-c14c5e441d308a687f7e155dca1fa95e\" data-watermark-src=\"v2-77a8cf351626bd0c5e55bf837fb58bf3\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"JCieWOXo\"><b>劣势/不足</b></p>\n<ul><li data-pid=\"ctxQAYCX\">测绘法再次敲起警钟</li></ul>\n<p data-pid=\"ogY3oAQ2\"><b>业界评论</b></p>\n<p data-pid=\"DdTQHCKa\">个人对于这种真值的使用也有一些疑问，比如对向车道有时候是完全不可见的，那么如果强行把这部分标注给予模型，是否会对模型训练造成迷惑，导致其花很多算力和时间去尝试学习本就不可学习的内容，这些可能是Tesla所提到的工程难题，Tesla也并没有在AI Day上分享透露，稍显遗憾。</p>\n<p data-pid=\"n-oqSI93\">——<a href=\"https://zhuanlan.zhihu.com/p/570431956\" class=\"internal\">EatElephant</a>，知乎答主</p>\n<p data-pid=\"UVcqS4GZ\"><b>#Simulation world creator#</b></p>\n<p data-pid=\"75oOIl_W\">依赖自动标注的真实世界道路信息和丰富的图形素材库，生成大量场景</p>\n<p data-pid=\"RTU_fbfO\"><b>亮点/指标</b></p>\n<ul>\n<li data-pid=\"5CE9ZzKq\">要想创建一个路口的仿真场景，需要艺术家花2周时间，但特斯拉只需要5分钟</li>\n<li data-pid=\"uTQKLCV1\">创建旧金山的仿真城市只需要2周时间</li>\n</ul>\n<p data-pid=\"3SMgpUT7\"><b>劣势/不足</b></p>\n<ul><li data-pid=\"EwINj0ng\">特斯拉直到2021年才全面对外展示了自研的渲染引擎、场景库、目标库和对抗学习场景，对旧金山的虚拟城市重建工作waymo和cruise也早就做过了</li></ul>\n<p data-pid=\"4i4B_vp7\"><b>#Data Engine#</b></p>\n<p data-pid=\"MZt-mg5p\"><b>亮点/指标</b></p>\n<ul><li data-pid=\"yKr8h-rL\">以一个路口右前方的停止车辆案例讲解数据闭环，并且展示了手动标注系统的友好度</li></ul>\n<p><img src=\"https://pica.zhimg.com/v2-875558faa56ebb5db7a5c9729b03e7ae_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1571\" data-rawheight=\"845\" data-watermark=\"watermark\" data-original-src=\"v2-875558faa56ebb5db7a5c9729b03e7ae\" data-watermark-src=\"v2-f4ce2445c2c3c5166163a0645e72b60f\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"7U5cFZqr\"><b>【基础设施/计算平台】</b></p>\n<p data-pid=\"onCdYkPK\"><b>#FSD芯片#+#DOJO#</b></p>\n<p data-pid=\"TfdZnopm\"><b>亮点/指标</b></p>\n<ul><li data-pid=\"Dhp8lUau\">车载计算平台上，多模型在两个SoC上跑时，通过优化，可以最大限度地利用100TOPS算力</li></ul>\n<p><img src=\"https://pic1.zhimg.com/v2-3ea42c4e24414c2db99ff5e57b7512b6_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1543\" data-rawheight=\"809\" data-watermark=\"watermark\" data-original-src=\"v2-3ea42c4e24414c2db99ff5e57b7512b6\" data-watermark-src=\"v2-46b20f119a21735babf3e415dfd25e75\" data-private-watermark-src=\"\"></p>\n<ul><li data-pid=\"HFNpH2Pm\">超算中心拥有14,000个GPU，共30PB的数据缓存，每天都有500,000个新的视频流入这些超级计算机</li></ul>\n<p><img src=\"https://picx.zhimg.com/v2-cbff8bb21e571743d2e03c8a54e75e32_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"454\" data-rawheight=\"357\" data-watermark=\"watermark\" data-original-src=\"v2-cbff8bb21e571743d2e03c8a54e75e32\" data-watermark-src=\"v2-df5908505b8fd3b03bd61c17c9cc4562\" data-private-watermark-src=\"\"></p>\n<ul>\n<li data-pid=\"1JmVFxwI\">专门开发了加速的视频解码库，以及加速读写中间特征的文件格式.smol file format</li>\n<li data-pid=\"cRPju7zA\">使用24个GPU集群的服务器在计算一个Batch Normalization时候延迟是150us，在25个D1组成的DOJO训练服务器上，同样的Batch Normalization只需要5us就可以完成，效率提高了30倍</li>\n<li data-pid=\"Fdvc6ZiW\">在加速器使用效率（也就是公式中Accelerator Occupancy部分）上的优化，Tesla给出训练中占用负载最高的AutoLabeler和Occupancy Network部分优化前后的性能分析对比，优化前DOJO加速器占用率只有4%，大量时间消耗在数据读取装载上，而优化后，极速器利用率达到了97%，保证了DOJO高效的使用</li>\n<li data-pid=\"NPK6HqUP\">4个DOJO集群箱子就可以带来等效目前72个GPU集群的性能</li>\n<li data-pid=\"ULghNJRI\">预计2023年Q1将会开始交付用以进行AutoLabeler训练的DOJO服务器</li>\n</ul>\n<p data-pid=\"OhLI_VnU\"><b>业界评论</b></p>\n<p data-pid=\"bjH8h-Mq\">单纯追求TOPS根本就不是车规自动驾驶芯片的首要目标，而且现在学术界开源的深度学习模型基本上以PC显卡进行训练推理，往往一个BEV模型就把Orin资源拉满了，难以想象FSD上面跑了如此之多复杂深度学习模型究竟是如何才能保持高频流畅的。所以到底是为什么理论单核算力只有72TOPS，采用如今看来略显古典的14nm工艺，3年前发布的老芯片实战中拥有如此强大的能力，甚至至今还尚有潜力没有挖掘呢？</p>\n<p data-pid=\"YDRgUNdd\">——<a href=\"https://zhuanlan.zhihu.com/p/570431956\" class=\"internal\">EatElephant</a>，知乎答主</p>\n<p><br></p>\n<hr>\n<p><br></p>\n<h3><b>Cruise</b></h3>\n<ul>\n<li data-pid=\"7AU72TNP\">主要内容来源于Under the Hood 2021，公开的research少</li>\n<li data-pid=\"HJjwlKz-\">分享模块多，但技术理论少，看上去没太多干货</li>\n<li data-pid=\"KLt3N4FR\">Cruise背靠车企，其L4无人车Origin集合了改装车成本低、前装车可定制的优点</li>\n<li data-pid=\"aM9ssctF\">\n<a href=\"http://link.zhihu.com/?target=https%3A//youtu.be/YnhYeTWvfB0\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">用一个具体的女性用户案例，来描述无人出租能带来的便利和安全</a>，并且展示远程监控工具，还能确认有没有遗落物品</li>\n</ul>\n<p><img src=\"https://picx.zhimg.com/v2-9bad01028c944816c390e5535e5b1ec2_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"606\" data-rawheight=\"327\" data-watermark=\"watermark\" data-original-src=\"v2-9bad01028c944816c390e5535e5b1ec2\" data-watermark-src=\"v2-53c8c1c3bb7623a985cf3520c4bfbbc4\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pica.zhimg.com/v2-abc3f794e40d775e98a54f848e2279d0_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"684\" data-rawheight=\"385\" data-watermark=\"watermark\" data-original-src=\"v2-abc3f794e40d775e98a54f848e2279d0\" data-watermark-src=\"v2-932b799ff1c5cb78eabb9a768b0aa00b\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"5qm-aO3X\"><b>【感知】</b></p>\n<ul>\n<li data-pid=\"dARqtJnE\">用了很多demo示例来呈现不同模块的表现效果，但具体技术实现讲得少</li>\n<li data-pid=\"1rr5MuwZ\">在面对遮挡区域时，也有类似特斯拉ghost object的应用</li>\n</ul>\n<p data-pid=\"ugCjgu38\"><b>#</b><a href=\"https://zhuanlan.zhihu.com/p/589809644/%3C/b\" class=\"internal\">\"https://youtu.be/fMPlA8c6zrE\"&gt;预测神经网络架构 </a><b>#</b></p>\n<ul>\n<li data-pid=\"7JTJvGUf\">基于众多数据，用自监督的方法构建了一个端到端的预测神经网络架构，由Encoder和Decoder两部分组成</li>\n<li data-pid=\"N0uf4iOM\">Encoder以每个物体的历史状态和所处场景为输入，通过一个Graph Attention Network学习整个场景的潜在含义，包括不同物体间的交互</li>\n<li data-pid=\"vjXfjlg_\">Decoder则是由Two-Stage和辅助任务两个子集构成，见下图，特别强调运用了自监督学习实现自动标注</li>\n</ul>\n<p><img src=\"https://picx.zhimg.com/v2-618f9951984cc8f6b10a07f49541993f_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2392\" data-rawheight=\"1340\" data-watermark=\"watermark\" data-original-src=\"v2-618f9951984cc8f6b10a07f49541993f\" data-watermark-src=\"v2-0a1ed0441a88802e7a0574721cc64c01\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pica.zhimg.com/v2-d89a5e8b5a0cc6208cdb960c5ff84eb3_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1036\" data-rawheight=\"512\" data-watermark=\"watermark\" data-original-src=\"v2-d89a5e8b5a0cc6208cdb960c5ff84eb3\" data-watermark-src=\"v2-d18eef3d8dd11cafb414e00d738f7527\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://picx.zhimg.com/v2-e6d6fa64a1eb6b69f9ae072dcd13a60b_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1090\" data-rawheight=\"692\" data-watermark=\"watermark\" data-original-src=\"v2-e6d6fa64a1eb6b69f9ae072dcd13a60b\" data-watermark-src=\"v2-db733c7e741759a76edbdb1d3c5df0d7\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"PceuTBd3\"><b>亮点/指标</b></p>\n<ul>\n<li data-pid=\"GZs9tZLw\">能同时预测超过20人的行走状态</li>\n<li data-pid=\"6neGVPwn\">在旧金山需要处理的交互场景的复杂度比凤凰城高32倍</li>\n</ul>\n<p data-pid=\"VtHRe5Eg\"><b>业界评论</b></p>\n<p data-pid=\"VYsD_sgw\">特斯拉的预测应该还会在规划控制中的neural planner进一步强化，输出轨迹分布，但显然工作不成熟，这一点不如 Cruise（这个Uber和Waymo也是和Cruise做法类似）。</p>\n<p data-pid=\"qjA8gjwA\">——<a href=\"https://www.zhihu.com/pin/1440353862092140544\" class=\"internal\">黄浴</a>，知乎答主</p>\n<p data-pid=\"8GSyZe1d\"><b>【决策规划】</b></p>\n<p data-pid=\"lzrWoz-9\"><b>#</b><a href=\"http://link.zhihu.com/?target=https%3A//youtu.be/fMPlA8c6zrE\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Cruise Decision Engine</a><b>#</b></p>\n<ul><li data-pid=\"i4wq_VVB\">展示了决策模型的架构图，并简要介绍了含义</li></ul>\n<p><img src=\"https://picx.zhimg.com/v2-da06b8d874aa07d40385a5e29859396a_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2458\" data-rawheight=\"1300\" data-watermark=\"watermark\" data-original-src=\"v2-da06b8d874aa07d40385a5e29859396a\" data-watermark-src=\"v2-0eae01462dd29db9b6ff7473496061ea\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://picx.zhimg.com/v2-a06016eb03d75de36b3e1067fc33b7f6_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"685\" data-rawheight=\"342\" data-watermark=\"watermark\" data-original-src=\"v2-a06016eb03d75de36b3e1067fc33b7f6\" data-watermark-src=\"v2-8bf02be451963fde985ea32aa7a07e9b\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pica.zhimg.com/v2-edeb38c437bd854c15c54fa750c7afe1_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"593\" data-rawheight=\"350\" data-watermark=\"watermark\" data-original-src=\"v2-edeb38c437bd854c15c54fa750c7afe1\" data-watermark-src=\"v2-09c4b535993d03980b48251a9f5f64c1\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://picx.zhimg.com/v2-d31e07e873626aa6d32f581afa468bdd_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"492\" data-rawheight=\"390\" data-watermark=\"watermark\" data-original-src=\"v2-d31e07e873626aa6d32f581afa468bdd\" data-watermark-src=\"v2-ea7c597ace3be8f874822f43754305f8\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"LmZhsPKB\"><b>亮点/指标</b></p>\n<ul>\n<li data-pid=\"9_NJDvfW\">针对达到的效果（outcomes），尤其是不确定性（运动状态、存在与否、3D空间的不确定性），放了许多demo视频作为例子，但没有太详细解释具体技术方法</li>\n<li data-pid=\"AtAZMVz7\">其中existence uncertainty有被遮挡区域的ghost object例子，以及鬼探头的例子</li>\n<li data-pid=\"CBNCqcGW\">3D uncertainty是找了一个十字路口，其中一个路口是坡道的例子</li>\n<li data-pid=\"CjXh6-bc\">360 interaction是一个用逆向车道绕过路障的例子</li>\n<li data-pid=\"3qoL4xWY\">在计算速度上，通过其深度学习网络加速，大部分的时候决策只需要14ms，最坏的情况延迟是80ms</li>\n</ul>\n<p><img src=\"https://picx.zhimg.com/v2-bf8fef32758923dd6759bd23c8318bef_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2415\" data-rawheight=\"1227\" data-watermark=\"watermark\" data-original-src=\"v2-bf8fef32758923dd6759bd23c8318bef\" data-watermark-src=\"v2-b5fb458e014297829f3b58ea8f870609\" data-private-watermark-src=\"\"></p>\n<ul><li data-pid=\"vXnrNrOC\">用一个曲线图表示如何在控制层面达到的平顺效果，但没有细讲做法</li></ul>\n<p><img src=\"https://pica.zhimg.com/v2-cd0246604ff7622800cd051dea265d75_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"469\" data-rawheight=\"246\" data-watermark=\"watermark\" data-original-src=\"v2-cd0246604ff7622800cd051dea265d75\" data-watermark-src=\"v2-0b014af3f86ae3a9d07a00c652ee5031\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"Eft4yR7N\"><b>【数据闭环（仿真）】</b></p>\n<p data-pid=\"SiSwZkzm\"><b>#Cruise仿真#</b></p>\n<ul>\n<li data-pid=\"3tDo1UnS\">包括morpheus、Road to Sim、NPC AI三个基础模块</li>\n<li data-pid=\"EMsuxoWu\">morpheus：通过简单代码便能模拟行驶轨迹，结合地图数据生成众多轨迹</li>\n</ul>\n<p><img src=\"https://picx.zhimg.com/v2-02675d09bf7bbee6486cda0be8f92429_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"682\" data-rawheight=\"388\" data-watermark=\"watermark\" data-original-src=\"v2-02675d09bf7bbee6486cda0be8f92429\" data-watermark-src=\"v2-f16c6d09d1c365f3193f34e87511a958\" data-private-watermark-src=\"\"></p>\n<ul><li data-pid=\"w3MwhK-x\">Road to Sim：从收集到的真实场景图像数据中学习，生成仿真场景</li></ul>\n<p><img src=\"https://pic1.zhimg.com/v2-666b01d343473c808a382b34ab1c0dcf_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"676\" data-rawheight=\"371\" data-watermark=\"watermark\" data-original-src=\"v2-666b01d343473c808a382b34ab1c0dcf\" data-watermark-src=\"v2-9c1b0ea89d612284e8908501f4e30461\" data-private-watermark-src=\"\"></p>\n<ul><li data-pid=\"X3Y6TGI9\">NPC AI：smart agent，用到了预测模型来让NPC做出反应</li></ul>\n<p data-pid=\"0K1w94ZU\"><b>亮点/指标</b></p>\n<ul>\n<li data-pid=\"XhoeehMA\">展示了阿拉莫广场的自动仿真重建结果（没说耗时多久），强调没有人工的参与</li>\n<li data-pid=\"0yIPsf5E\">可仿真光照和天气，还可以模拟多普勒效应</li>\n<li data-pid=\"TX-XTsBV\">仿真可以帮助收集特殊数据，比如被遮挡的警车、救护车等，效率比实际道路收集高180倍</li>\n</ul>\n<p data-pid=\"oglbjx3o\"><b>#Webviz#</b></p>\n<ul>\n<li data-pid=\"GpF5fSFV\">最初只是可视化工具，现在已经是一个开源的、供大规模开发团队一同协作的开发平台</li>\n<li data-pid=\"w55xWleT\">在旧金山的日常道路测试里，有用的数据占比不到1%，所以数据的管理筛选很重要</li>\n<li data-pid=\"CxXOfqL-\">展示了内部的Event管理页面，可以很简单地查找case，或者智能化地提取跟某个event相关的其他类似event</li>\n</ul>\n<p><img src=\"https://pic1.zhimg.com/v2-6aa091db990265cac55eb82e53674afe_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1244\" data-rawheight=\"677\" data-watermark=\"watermark\" data-original-src=\"v2-6aa091db990265cac55eb82e53674afe\" data-watermark-src=\"v2-ae675d047702303be663467ede952e09\" data-private-watermark-src=\"\"></p>\n<ul>\n<li data-pid=\"4I9vMlDr\">超过95%的cruise员工在使用</li>\n<li data-pid=\"XsA5Md3r\">展示了工程师如何修改代码、自动构建和执行系列测试、分析结果并比较的过程，下面是某个场景在仿真测试中的比较结果</li>\n</ul>\n<p><img src=\"https://pic1.zhimg.com/v2-d9904e893eeb717d6b78a0f0bca9939d_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1191\" data-rawheight=\"437\" data-watermark=\"watermark\" data-original-src=\"v2-d9904e893eeb717d6b78a0f0bca9939d\" data-watermark-src=\"v2-d00d49dd1eb1f857ba8991c5a3fa139b\" data-private-watermark-src=\"\"></p>\n<ul><li data-pid=\"voG8EWtT\">简单提到了车道线生成，应用在了地图的自动更新中</li></ul>\n<p><img src=\"https://picx.zhimg.com/v2-6642e3a0344dcedba78d9f7470e0cc69_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1191\" data-rawheight=\"518\" data-watermark=\"watermark\" data-original-src=\"v2-6642e3a0344dcedba78d9f7470e0cc69\" data-watermark-src=\"v2-721c26c4873a33274315d886fad0d2cf\" data-private-watermark-src=\"\"></p>\n<ul><li data-pid=\"Porhk-sD\">仿真的运行效率数据：每天收集PB量级真实数据，合成PB量级的仿真数据，每天仿真的数据相当于17年的驾驶经验积累，计算资源的每个月的使用价值达到770年（这个我也没有太理解），每个月执行2千万次场景测试，累积收集已有4 EB的数据</li></ul>\n<p><img src=\"https://pica.zhimg.com/v2-ac9374527010605a75933a6230f76dcc_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1019\" data-rawheight=\"475\" data-watermark=\"watermark\" data-original-src=\"v2-ac9374527010605a75933a6230f76dcc\" data-watermark-src=\"v2-82637cd673418217836cfe36ce70114c\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"xuqRbMNc\"><b>业界评论</b></p>\n<p data-pid=\"Hkbl2v1c\">Webviz比ROS组件Rviz和qrt更好用，Rviz和qrt对ROS具有强依赖，运行不稳定，需要在不同界面来回切换。</p>\n<p data-pid=\"AZga1DW6\">——<a href=\"https://zhuanlan.zhihu.com/p/72455784\" class=\"internal\">Defry</a>，知乎答主</p>\n<p data-pid=\"Ak8WF0hW\"><b>【硬件】</b></p>\n<p data-pid=\"9gDWthM1\"><b>#</b><a href=\"http://link.zhihu.com/?target=https%3A//youtu.be/GpuFoBasxJs\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Origin</a><b>#</b></p>\n<ul><li data-pid=\"zslgJ8-C\">基于通用对车辆生产的洞察，可以保障硬件冗余，同时控制成本</li></ul>\n<p data-pid=\"FxUX_TDV\"><b>亮点/指标</b></p>\n<ul>\n<li data-pid=\"b6W2HgLu\">目前正在正向研发的激光雷达可以更好地保障FOV的冗余</li>\n<li data-pid=\"aq3B2_bo\">考虑到了空气动力学，减少风阻和风噪</li>\n<li data-pid=\"fX3VWalx\">考虑到了传感器的清洁，但没有细讲怎么做的</li>\n<li data-pid=\"rSop6a_H\">计算平台，在四代芯片的迭代过程中，成本下降了十倍</li>\n</ul>\n<p><img src=\"https://picx.zhimg.com/v2-64d8d0fd4b789c9e0ab6678d77916aea_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"583\" data-rawheight=\"334\" data-watermark=\"watermark\" data-original-src=\"v2-64d8d0fd4b789c9e0ab6678d77916aea\" data-watermark-src=\"v2-db350ca2f86043f382a1d28e26a5b7a7\" data-private-watermark-src=\"\"></p>\n<ul>\n<li data-pid=\"zffC5mC2\">主要是两类平台，一类用于传感器的边缘计算平台，一个作为主计算平台</li>\n<li data-pid=\"DHE6_yya\">芯片INT8算力1500 TOPS，带宽400GB/Sec，运行内存RAM 1G，DDR达800GB/Sec</li>\n</ul>\n<p><img src=\"https://pic1.zhimg.com/v2-87d198e9a9aba9d4a72c1aa8db33ee5d_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"601\" data-rawheight=\"370\" data-watermark=\"watermark\" data-original-src=\"v2-87d198e9a9aba9d4a72c1aa8db33ee5d\" data-watermark-src=\"v2-72154253af7cce293086abe572239db4\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://picx.zhimg.com/v2-bc46dcdb5eb4df8adfbcdc6f10a221fc_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"747\" data-rawheight=\"543\" data-watermark=\"watermark\" data-original-src=\"v2-bc46dcdb5eb4df8adfbcdc6f10a221fc\" data-watermark-src=\"v2-28e52cd829b8e7679e649925295c351e\" data-private-watermark-src=\"\"></p>\n<ul><li data-pid=\"V24ATo1U\">计划推出的新一代传感器，机械式激光雷达不见了（Cruise在2021年11月就已经在准备应用半固态/固态激光雷达了，领先于国内）</li></ul>\n<p><img src=\"https://pic1.zhimg.com/v2-48b58e8f2207a33a07b8161645d3104b_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"629\" data-rawheight=\"265\" data-watermark=\"watermark\" data-original-src=\"v2-48b58e8f2207a33a07b8161645d3104b\" data-watermark-src=\"v2-59b8c69b8958834bf5b62f60bf17b050\" data-private-watermark-src=\"\"></p>\n<ul><li data-pid=\"c1PWSWK4\">预计2023年Origin投入使用，车队规模达数百辆，2024年车队规模超过一千辆</li></ul>\n<p><img src=\"https://picx.zhimg.com/v2-2ba3b3efc78aa839ee952ceeab04fdd0_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1072\" data-rawheight=\"561\" data-watermark=\"watermark\" data-original-src=\"v2-2ba3b3efc78aa839ee952ceeab04fdd0\" data-watermark-src=\"v2-aa67cdfc8bbd4ac346331ee3156a482e\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<hr>\n<p><br></p>\n<h3><b>小鹏</b></h3>\n<ul>\n<li data-pid=\"OoYRyYcx\">内容更偏C端车主端，主要被包装为功能、场景的宣传语言</li>\n<li data-pid=\"32BhrSvi\">缺少技术细节，不像Waymo附有具体论文，鲜有工程师讨论</li>\n<li data-pid=\"eVX15Bcz\">自9月17日在广州试点开放以来，城市NGP周用户渗透率达到84%，里程渗透率达到63%，同时通行效率可接近人类司机的90%，平均每百公里被动接管仅0.6次（数据截止日期为10月17日）</li>\n<li data-pid=\"sbeNLxQF\">发布XNGP智能辅助驾驶系统，包括无图区域能力大幅升级、XNet 深度视觉神经网络、拟人化的决策系统、人机共驾体系</li>\n<li data-pid=\"iMy1-en6\">相比高速NGP，城市NGP的代码量提升至6倍，感知模型数量提升至4倍，预测/规划/控制相关代码量提升至88倍（体现困难度）</li>\n</ul>\n<p data-pid=\"3-ckIlQX\"><b>【感知】</b></p>\n<p data-pid=\"GGL962fZ\"><b>#XNet 深度视觉神经网络#</b></p>\n<ul><li data-pid=\"lS5M9zIW\">将多个摄像头采集的数据，进行多帧时序前融合，输出BEV视角下的动态目标物的4D信息（如车辆，二轮车等的大小、距离、位置及速度、行为预测等），以及静态目标物的3D信息（如车道线和马路边缘的位置）</li></ul>\n<p data-pid=\"kdJUJc2s\"><b>亮点/指标</b></p>\n<ul><li data-pid=\"ZquoMgY4\">Transformer 部署，原本需122%的Orin-X 算力，优化后仅需 9%</li></ul>\n<p data-pid=\"Hgw37O1Y\"><b>【数据闭环】</b></p>\n<ul><li data-pid=\"94h5O8ii\">由采集、标注、训练、部署四大核心能力组成</li></ul>\n<p data-pid=\"zk761Z8R\"><b>亮点/指标</b></p>\n<ul>\n<li data-pid=\"HH0KTOlE\">引入了黄金骨干网络架构（Golden backbone），首次应用自监督技术</li>\n<li data-pid=\"mvrVG_0o\">解藕了骨干模型和发布模型的训练，让多任务的网络训练效率更高</li>\n<li data-pid=\"GobETH6F\">通过定向采集和仿真结合，一年内累计解决1000个以上Corner case（极限场景），高速NGP事故率降低95%</li>\n<li data-pid=\"SCr6TJa0\">5 千万公里的仿真里程，5000+ 个核心模拟场景，挑战 17000+ 个专项模拟场景</li>\n</ul>\n<p data-pid=\"LsAqwbDQ\"><b>#全自动标注系统#</b></p>\n<p data-pid=\"QvqNurI4\"><b>亮点/指标</b></p>\n<ul>\n<li data-pid=\"tqgtjBxj\">标注效率是人工标注的近45000倍，以50万段训练数据Clip，10亿个物体为例，现在仅需16.7天可以完成，而全人工标注需2000人年</li>\n<li data-pid=\"kbj98o-t\">峰值日产 30000 clips，相当于 15个NuScene数据集</li>\n</ul>\n<p data-pid=\"9Wv0mQLw\"><b>#扶摇#</b></p>\n<ul><li data-pid=\"IZbo7OBj\">自动驾驶智算中心</li></ul>\n<p data-pid=\"XsZrHUqS\"><b>亮点/指标</b></p>\n<ul>\n<li data-pid=\"QWCby-1o\">在乌兰察布建成中国最大的自动驾驶智算中心“扶摇”，<a href=\"https://www.zhihu.com/question/546576372/answer/2606488711\" class=\"internal\">算力可达600PFLOPS（每秒浮点运算60亿亿次），模型训练效率提升602倍</a>\n</li>\n<li data-pid=\"T1Na2RkC\">与2400TFLOPS算力的服务器进行单机训练相比，80机并行训练可将训练时长由276天缩短至11小时</li>\n</ul>\n<p data-pid=\"L5PhtJh0\"><b>劣势/不足</b></p>\n<ul>\n<li data-pid=\"GxnYaHgH\">没有详细解释Golden backbone</li>\n<li data-pid=\"6ywKLa0o\">只抛出数据结果，没有具体怎么做的分享</li>\n</ul>\n<p data-pid=\"a69blFja\"><b>【人机交互】</b></p>\n<p data-pid=\"YVvwzgBl\"><b>#全场景语音2.0#</b></p>\n<p data-pid=\"Q6t8ZpZN\"><b>亮点/指标</b></p>\n<ul>\n<li data-pid=\"QMpzAH-T\">唤醒到界面反馈245ms、到语音反馈小于700ms</li>\n<li data-pid=\"dfdhTjyP\">并行指令：支持2-4个指令连在一起说，一般竞品只能支持任意2个命令组合</li>\n<li data-pid=\"TuPhicaO\">端云一体：端4路+云4路结果仲裁</li>\n<li data-pid=\"HSGb9qCm\">回声消除：支持30dB</li>\n<li data-pid=\"47qQjIuw\">错误率大幅下降：识别准确率达到97%，标准安静场景降低7.7%、中英文混合场景降低7.16%、噪声环境场景降低36.79%、带地域口音场景降低33.84%</li>\n<li data-pid=\"FiLheILK\">综合唤醒率98%、高噪唤醒率97%。到UI响应低至245ms（提升3倍），到语音回应小于700ms（提升60%）；误唤醒率：低于2次/24h</li>\n<li data-pid=\"p3MpiCmM\">语音的CPU使用率降低65.9%，内存使用降低42.3%</li>\n<li data-pid=\"RLk7qwjf\">通过实车模拟生成车型适配数据，单车型数据采集成本大幅降低，仅为录制音频数据方式成本的5%</li>\n</ul>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/ze_h?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">洪泽鑫</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/570130511/answer/2791019283?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">39 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/545523482?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2022 年 Q1 自动驾驶行业的发展情况怎么样？</a><br><a href=\"http://www.zhihu.com/question/546072123?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2022 年国内自动驾驶的发展有哪些需要避免的误区？</a><br>\n","link":"http://www.zhihu.com/question/570130511/answer/2791019283?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"抛弃静态博客的缺点，用 ESHexoN 在线编辑！","date":"2022-12-04 16:00:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%80%E4%B9%88%E6%98%AF-ESHexoN\" class=\"headerlink\" title=\"什么是 ESHexoN?\"></a>什么是 ESHexoN?</h2>\n<blockquote><p>ESHexoN 是一款简洁、强大的 Hexo 在线编辑器。</p></blockquote>\n<p>其灵感来自于 <a href=\"https://github.com/HexoPlusPlus/HexoPlusPlus\">HexoPlusPlus/HexoPlusPlus</a> (基于 Cloudflare Workers 的无服务器 Hexo 后端)</p>\n<p>但是，遗憾的是 HPP 突然停止维护，只留下一个 <a href=\"https://github.com/Wexagonal/Wexagonal\">Wexagonal</a>。</p>\n<blockquote><p>However, 这更新速度也太慢了啊喂~</p></blockquote>\n<p><a href=\"https://github.com/Qexo/Qexo\">Qexo</a> 也是一个很不错的项目，但是它基于 Python + MongoDB，不属于我擅长的技术栈，有点劝退。</p>\n<p>于是，ESHexoN 诞生了。它致力于使用 JavaScript Edge Function 构建 Hexo「后端」，实现普通静态博客所不具备的功能，解决大部分静态博客的痛点。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-ESHexoN\" class=\"headerlink\" title=\"如何使用 ESHexoN?\"></a>如何使用 ESHexoN?</h2>\n<blockquote><p>ESHexoN 的使用说明可以参见文档 --&gt; <a href=\"https://eshexon-docs.netlify.app/\">文档链接</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#ESHexoN-%E4%BB%A3%E7%A0%81-amp-%E5%8E%9F%E7%90%86\" class=\"headerlink\" title=\"ESHexoN 代码 &amp; 原理\"></a>ESHexoN 代码 &amp; 原理</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"代码目录\"></a>代码目录</h3>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.17/rawimg/20221205115647.png\"></p>\n<p><code>dist</code> 目录存放构建的文件，<code>src</code> 目录为源码，<code>tools</code> 是一些工具，<code>index.js</code> 则为入口文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%90%8E%E7%AB%AF%E7%9A%84%E4%B8%BB%E8%A6%81%E6%96%87%E4%BB%B6\" class=\"headerlink\" title=\"后端的主要文件\"></a>后端的主要文件</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#src-res-js\" class=\"headerlink\" title=\"src/res.js\"></a><code>src/res.js</code>\n</h4>\n<p><code>res.js</code> 主要负责 HTTP 响应输出，统一输出格式。</p>\n<p>故 ESHexoN API 主要返回格式为:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"statusCode\"</span>: <span class=\"string\">\"...\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"statusInfo\"</span>: <span class=\"string\">\"...\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p><a href=\"https://github.com/ESHexoN/ESHexoN/blob/master/src/res.js\">[Source Code]</a></p>\n<h4>\n<a href=\"https://blog.yfun.top/#src-check-token-js\" class=\"headerlink\" title=\"src/check_token.js\"></a><code>src/check_token.js</code>\n</h4>\n<p><code>check_token.js</code> 主要负责 API 请求的鉴权，所有的鉴权 API 都需要携带 <code>token</code> 发送。</p>\n<p>生成代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> token = md5(userdata[<span class=\"number\">0</span>].username + userdata[<span class=\"number\">0</span>].password + <span class=\"string\">`<span class=\"subst\">${<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"built_in\">Date</span>.now()).getFullYear()}</span><span class=\"subst\">${<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"built_in\">Date</span>.now()).getMonth()+<span class=\"number\">1</span>}</span>`</span>);</span><br></pre></td></tr></table></figure><p>故 ESHexoN Token 格式为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">md5(USERNAME+PASSWORD+YEAR+MONTH);</span><br></pre></td></tr></table></figure><p>过期时间为一个月。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#src-env-js\" class=\"headerlink\" title=\"src/env.js\"></a><code>src/env.js</code>\n</h4>\n<p>ESHexoN 除了依靠 <a href=\"https://github.com/yfun-lab/gh-worker-kv\">yfun-lab/gh-worker-kv</a> 存储主要数据库文件外，还使用环境变量存储基本的 Token、仓库等。</p>\n<p>ESHexoN 自设计之初就预备支持 Cloudflare Workers, Deno 等平台。</p>\n<p>事实上，这两个平台获取环境变量的方式根本不一样。为了在一个代码下同时支持两个平台，<code>env.js</code> 简单的写了个判断。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.17/rawimg/20221205120944.png\"></p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%98%AF%E4%B8%8D%E6%98%AF%E7%9B%AE%E5%BD%95%EF%BC%9F%E6%96%87%E4%BB%B6%E9%81%8D%E5%8E%86\" class=\"headerlink\" title=\"是不是目录？文件遍历\"></a>是不是目录？文件遍历</h4>\n<p>GitHub API 会返回当前目录下的文件和文件夹，但有人的 <code>source/_posts</code> 目录下还有文件夹。根据观察发现，文件夹的 <code>type</code> 为 <code>dir</code>，而普通文件为 <code>file</code>，那么只需要一个简单的判断，就可以返回单个目录下所有文件。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.17/rawimg/20221205121416.png\"></p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E5%86%99%E6%96%87%E4%BB%B6\" class=\"headerlink\" title=\"写文件\"></a>写文件</h4>\n<p>在写文件之前，我们需要先获取该文件的 <code>sha</code> 值。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.17/rawimg/20221205121728.png\"></p>\n<blockquote><p>这是因为 GitHub 规定修改文件必须在 <code>body</code> 中携带源文件 <code>sha</code>.</p></blockquote>\n<p>同时，文件还必须接受 Base64 编码。这个问题很好解决，ESHexoN 的仓库依赖中已经包含。当然，我更倾向于在前端编码文本，在后端直接 PUT。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E9%82%A3%E5%89%8D%E7%AB%AF%E5%91%A2%EF%BC%9F\" class=\"headerlink\" title=\"那前端呢？\"></a>那前端呢？</h3>\n<p>以上是后端的主要代码。因为 ESHexoN 是前后端分离项目，并且开放跨域，所以我们构建了一个官方前端。只需要输入你的用户名、密码和后端地址就可以开始使用。</p>\n<p>前端的代码也是开源的，基于 Vue + Vuetify 构建，<a href=\"https://github.com/ESHexoN/eshexon-frontend\">在 GitHub 上查看它</a></p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E4%B8%80%E4%BA%9B%E5%B0%8F%E7%BB%86%E8%8A%82\" class=\"headerlink\" title=\"一些小细节\"></a>一些小细节</h4>\n<p>早在 HexoPlusPlus <code>dev</code> 阶段的时候，ChenYFan 就在群内讨论如何解决 Markdown 编辑器的问题。在当时，EditorMD 的兼容性很差。于是，HPP 上采取的解决方案是：<code>textarea</code> + <code>marked.js</code>。</p>\n<p>然后，HPP 编辑器就是这样的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.17/rawimg/20221205122539.png\"></p>\n<p>这并不是一个很好的主意。</p>\n<p>于是在 ESHexoN 上，我们为 Hexo 特性定制了一款简单的编辑器。</p>\n<p>首先，它是由 <a href=\"https://yfun.top/lab/markdown/\">https://yfun.top/lab/markdown/</a> 修改而来的，在部分特性上与其类似。</p>\n<p>但是受限于页面尺寸和小屏幕优化，ESHexoN 的编辑器在大屏上是这样显示的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.17/rawimg/20221205122828.png\"></p>\n<p>双栏布局，实时预览。</p>\n<p>为了保证在小屏幕的体验，在小屏幕上将自动收起预览，改为全屏模式。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.17/rawimg/20221205122955.png\"></p>\n<p>如果需要预览，可以点击「预览」按键。</p>\n<p>同时 ESHexoN 的编辑器有自动保存功能，即使写到一半刷新页面或是浏览器崩溃也不用怕，页面内容已经存储到 <code>localStorage</code> 内了。（我也不知道会不会撑炸</p>\n<p>一些基本的搜索功能都得以保留（与 HPP 是十分甚至九分的类似</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.17/rawimg/20221205123316.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.17/rawimg/20221205123356.png\"></p>\n<p>不仅仅局限于文章，配置文件、代码都可以修改：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.17/rawimg/20221205123427.png\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%9C%A8%E6%9C%AA%E6%9D%A5\" class=\"headerlink\" title=\"在未来\"></a>在未来</h2>\n<p>目前 ESHexoN 还处于 Beta 阶段，部分功能还没有开发完成。</p>\n<p>关于说说、评论等也都在等待开发（最近可能不会有）</p>\n<p>如果在使用中出现了任何的问题，欢迎提 Issue 反馈。</p>\n","link":"https://blog.yfun.top/posts/2022/eshexon/"},{"title":"让阅读无缝衔接 —— JS 获取用户阅读进度","date":"2022-11-11 16:40:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>很多博客中最常见的问题就是：文章很长，但是读者很忙。下次阅读的时候，可能要花一些时间才能恢复到先前的阅读位置。</p>\n<p>如果可以设备间，识别二维码或是一个链接就可以让阅读无缝衔接，直接跳转到相应位置，那么阅读体验就会变得更加优秀。</p>\n<p>那么，开始吧！</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%9E%E8%B7%B5\" class=\"headerlink\" title=\"实践\"></a>实践</h2>\n<p>要知道阅读位置，那么就要知道当前页面的坐标。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getScrollPosition = <span class=\"function\">(<span class=\"params\">el = <span class=\"built_in\">window</span></span>) =&gt;</span> ({</span><br><span class=\"line\">    x: el.pageXOffset !== <span class=\"literal\">undefined</span> ? el.pageXOffset : el.scrollLeft,</span><br><span class=\"line\">    y: el.pageYOffset !== <span class=\"literal\">undefined</span> ? el.pageYOffset : el.scrollTop</span><br><span class=\"line\">});</span><br><span class=\"line\"><span class=\"comment\">// getScollPosition().x =&gt; 页面横坐标; getScrollPosition().y =&gt; 页面纵坐标;</span></span><br></pre></td></tr></table></figure><p>大部分情况下，我们只用关注纵坐标。横坐标大概率为 <code>0</code>。</p>\n<p>我们还需要一个页面滚动的事件，用于记录当前坐标，并储存在临时存储中。</p>\n<p>至于为什么是 <code>sessionStorage</code> 而不是 <code>localStorage</code>，则是因为 <code>localStorage</code> 除手动清除外，不会自动过期。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 此处的 750 是「页面元素的最大宽度」</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> wx = <span class=\"built_in\">window</span>.innerWidth &gt;= <span class=\"number\">750</span> ? <span class=\"number\">750</span> : <span class=\"built_in\">window</span>.innerWidth;</span><br><span class=\"line\"><span class=\"keyword\">var</span> wy = <span class=\"built_in\">window</span>.innerHeight;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">windowScroll</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 反复修改 确保页面尺寸不改变</span></span><br><span class=\"line\">    wx = <span class=\"built_in\">window</span>.innerWidth &gt;= <span class=\"number\">750</span> ? <span class=\"number\">750</span> : <span class=\"built_in\">window</span>.innerWidth;</span><br><span class=\"line\">    wy = <span class=\"built_in\">window</span>.innerHeight;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> y = <span class=\"built_in\">Math</span>.round(getScrollPosition().y);</span><br><span class=\"line\">    <span class=\"comment\">// 组合字符串，同时记录页面坐标，页面宽度和高度</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> p = <span class=\"string\">`<span class=\"subst\">${y}</span>:<span class=\"subst\">${wx}</span>:<span class=\"subst\">${wy}</span>`</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 写入到 sessionStorage 中</span></span><br><span class=\"line\">    sessionStorage.setItem(<span class=\"string\">\"read_y\"</span>, p);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"built_in\">window</span>.onscroll = windowScroll;</span><br></pre></td></tr></table></figure><p>你可能发现了，此处的变量 <code>p</code>，并不仅仅是「页面纵坐标」，而是「页面高度」与「纵坐标」的组合字符串。</p>\n<p>事实上，如果单纯是纵坐标判断位置，那么在不同高度，不同宽度的设备上，就会出现错位的情况。而同时记录三个信息，就可以还原真实坐标。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// URL 中是否包含传递的坐标信息</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (location.hash.split(<span class=\"string\">\"#read=\"</span>).length &gt; <span class=\"number\">1</span>) {</span><br><span class=\"line\">    <span class=\"comment\">// 分离字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> read_y = location.hash.split(<span class=\"string\">\"#read=\"</span>)[<span class=\"number\">1</span>];</span><br><span class=\"line\">    read_y = read_y.split(<span class=\"string\">\":\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 组合乘积，顺滑移动至坐标</span></span><br><span class=\"line\">    <span class=\"built_in\">window</span>.scrollTo({<span class=\"attr\">top</span>: <span class=\"built_in\">Math</span>.round(<span class=\"built_in\">Number</span>(read_y[<span class=\"number\">0</span>]) * <span class=\"built_in\">Number</span>(read_y[<span class=\"number\">1</span>] * <span class=\"built_in\">Number</span>(read_y[<span class=\"number\">2</span>] / wx / wy))), <span class=\"attr\">behavior</span>: <span class=\"string\">\"smooth\"</span>});</span><br><span class=\"line\">} <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 从 sessionStorage 中获取</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> read_y = sessionStorage.getItem(<span class=\"string\">\"read_y\"</span>) || <span class=\"string\">\"0:0:0\"</span>;</span><br><span class=\"line\">    read_y = read_y.split(<span class=\"string\">\":\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.scrollTo({<span class=\"attr\">top</span>: <span class=\"built_in\">Math</span>.round(<span class=\"built_in\">Number</span>(read_y[<span class=\"number\">0</span>]) * <span class=\"built_in\">Number</span>(read_y[<span class=\"number\">1</span>] * <span class=\"built_in\">Number</span>(read_y[<span class=\"number\">2</span>] / wx / wy))), <span class=\"attr\">behavior</span>: <span class=\"string\">\"smooth\"</span>});</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>到现在，我们已经完成了 URL 的解析和基本生成。</p>\n<p>那么，URL 即为:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">`<span class=\"subst\">${location.protocol}</span>//<span class=\"subst\">${location.hostname}</span><span class=\"subst\">${location.port ? <span class=\"string\">\":\"</span>+location.port:location.port}</span><span class=\"subst\">${location.pathname}</span>#read=<span class=\"subst\">${sessionStorage.getItem(<span class=\"string\">\"read_y\"</span>)}</span>`</span>;</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%9C%80%E5%90%8E\" class=\"headerlink\" title=\"最后\"></a>最后</h2>\n<p>搭配生成二维码等插件效果更佳。</p>\n<blockquote><p>Miracle 主题将在下个版本中更新该功能。</p></blockquote>\n","link":"https://blog.yfun.top/posts/2022/js-get-users-reading-progress/"},{"title":"React 为什么重新渲染","date":"2022-09-06 08:29:00","description":"\n<p>更新（重新渲染）是 React 的重要特性 —— 当用户与应用交互的时候，React 需要重新渲染、更新 UI，以响应用户的输入。但是，React 为什么会重新渲染呢？如果不知道 React 为什么会重新渲染，我们如何才能避免额外的重新渲染呢？</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/186432/20/28325/37613/631725bbEf2ff226e/66b99021df66578b.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/react-re-renders-101/\">https://blog.skk.moe/post/react-re-renders-101/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/react-re-renders-101/"},{"title":"为什么你不应该在 React 中直接使用 useEffect 从 API 获取数据","date":"2022-08-19 08:53:00","description":"\n<p>React 是一个由 Facebook 开源的、可以在任意平台上构建 UI 的 JavaScript 库。在 React 中，一个常见的 Pattern 是使用 <code>useEffect</code> 搭配 <code>useState</code> 发送请求、将状态从 API（React 外部）同步到 React 内部、用于渲染 UI，这篇文章恰恰在向你介绍为什么你不应该直接这么做。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/180676/37/27394/27265/62ff57f2E600b3725/cff75c5fca39bbcc.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/why-you-should-not-fetch-data-directly-in-use-effect/\">https://blog.skk.moe/post/why-you-should-not-fetch-data-directly-in-use-effect/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/why-you-should-not-fetch-data-directly-in-use-effect/"},{"title":"NPM 自动更新版本号","date":"2022-08-04 05:00:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>ChenYFan 大佬的文章：<a href=\"https://blog.cyfan.top/p/d3c51290.html\">SpeedUp!使用黑科技为你的网站提速</a> 有提到过将 Hexo 博客的全部静态文件上传至 NPM 达到加速效果。</p>\n<p>但是 NPM 版本号不能重复，而且为了精准命中缓存和防止边缘 <code>@latest</code> 缓存过长，就必须指定版本号。</p>\n<p>本人在 <a href=\"https://blog.yfun.top/posts/2876015612/\">我的图床解决方案</a> 一文中使用的方法是 <code>npm version patch</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.16/rawimg/20220804133426.png\"></p>\n<p>但这个方法也有一些弊端，比如 <code>patch</code> 只会更新 <code>z</code> 位数的版本号，而且并不会上传至仓库，很可能会出现版本号冲突导致上传失败。这就是为什么最后还需要重新推送 Git 提交。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AF%95%E8%AF%95%E7%9C%8B\" class=\"headerlink\" title=\"试试看\"></a>试试看</h2>\n<p>NPM 版本号遵循 <code>semver</code> 规范，格式为 <code>major.minor.patch</code>。</p>\n<p>为了在获取最新版本号的时候不发生混乱，我选择先获取最新的版本号。</p>\n<blockquote><p>记得把 <code>cky-blog-static</code> 改成自己的项目名。</p></blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getVersion = <span class=\"keyword\">async</span>() =&gt; {</span><br><span class=\"line\">    <span class=\"keyword\">const</span> latestVersion = <span class=\"keyword\">await</span> fetch(<span class=\"string\">\"https://registry.npmjs.org/cky-blog-static/latest\"</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.json()).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.version;</span><br><span class=\"line\">    })</span><br><span class=\"line\">    <span class=\"keyword\">return</span> latestVersion;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>获取到最新版本号后，就可以对版本号进行分析。</p>\n<p>以 <code>1.4.7-b541af2ea284a39da0bbf63b88fdb65c</code> 为例，先按 <code>major.minor.patch</code> 分离。当然，也需要考虑版本号后还有 <code>build metadata</code> 的情况。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> version = <span class=\"keyword\">await</span> getVersion();</span><br><span class=\"line\"><span class=\"keyword\">var</span> verArray = version.split(<span class=\"string\">\".\"</span>);</span><br><span class=\"line\">verArray[<span class=\"number\">2</span>] = verArray[<span class=\"number\">2</span>].split(<span class=\"string\">\"-\"</span>)[<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure><p><del>为了版本号好看些</del>，可以通过判断实现满十进一。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (verArray[<span class=\"number\">2</span>] &lt; <span class=\"number\">9</span>) {</span><br><span class=\"line\"><span class=\"comment\">// z 位小于 9，直接 +1</span></span><br><span class=\"line\">verArray[<span class=\"number\">2</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">2</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">} <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (verArray[<span class=\"number\">1</span>] &lt; <span class=\"number\">9</span>) {</span><br><span class=\"line\"><span class=\"comment\">// z 位大于等于 9，y 位小于 9，y+1, z=0</span></span><br><span class=\"line\">verArray[<span class=\"number\">1</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">1</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">verArray[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">} <span class=\"keyword\">else</span> {</span><br><span class=\"line\"><span class=\"comment\">// z 大于等于 9，y 大于等于 9，x+1,y=0,z=0</span></span><br><span class=\"line\">verArray[<span class=\"number\">0</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">0</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">verArray[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">verArray[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>最后，重新拼接版本号。如果担心服务器缓存版本号导致冲突，还可以加上一些随机字符串。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> newVersion = <span class=\"string\">`<span class=\"subst\">${verArray[<span class=\"number\">0</span>]}</span>.<span class=\"subst\">${verArray[<span class=\"number\">1</span>]}</span>.<span class=\"subst\">${verArray[<span class=\"number\">2</span>]}</span>`</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> newVersion = newVersion + <span class=\"string\">\"-\"</span> + md5(<span class=\"string\">`<span class=\"subst\">${<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()}</span><span class=\"subst\">${newVersion}</span>`</span>);</span><br></pre></td></tr></table></figure><p>将最新的版本号信息重新写入 <code>package.json</code> 文件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> packageJson = fs.readFileSync(<span class=\"string\">\"./package.json\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> packageJson = <span class=\"built_in\">JSON</span>.parse(packageJson);</span><br><span class=\"line\">packageJson.version = newVersion;</span><br><span class=\"line\"><span class=\"keyword\">var</span> newPackage = <span class=\"built_in\">JSON</span>.stringify(packageJson);</span><br><span class=\"line\">fs.writeFileSync(<span class=\"string\">\"./package.json\"</span>, newPackage);</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p><del>直接 CV 代码！</del></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 更新 package.json 版本号</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fetch = <span class=\"built_in\">require</span>(<span class=\"string\">\"node-fetch\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> md5 = <span class=\"built_in\">require</span>(<span class=\"string\">\"js-md5\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getVersion = <span class=\"keyword\">async</span>() =&gt; {</span><br><span class=\"line\">    <span class=\"keyword\">const</span> latestVersion = <span class=\"keyword\">await</span> fetch(<span class=\"string\">\"https://registry.npmjs.org/cky-blog-static/latest\"</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.json()).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.version;</span><br><span class=\"line\">    })</span><br><span class=\"line\">    <span class=\"keyword\">return</span> latestVersion;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> update = <span class=\"keyword\">async</span>() =&gt; {</span><br><span class=\"line\">    <span class=\"keyword\">const</span> version = <span class=\"keyword\">await</span> getVersion();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> verArray = version.split(<span class=\"string\">\".\"</span>);</span><br><span class=\"line\">    verArray[<span class=\"number\">2</span>] = verArray[<span class=\"number\">2</span>].split(<span class=\"string\">\"-\"</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (verArray[<span class=\"number\">2</span>] &lt; <span class=\"number\">9</span>) {</span><br><span class=\"line\">        verArray[<span class=\"number\">2</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">2</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">    } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (verArray[<span class=\"number\">1</span>] &lt; <span class=\"number\">9</span>) {</span><br><span class=\"line\">        verArray[<span class=\"number\">1</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">1</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">        verArray[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">        verArray[<span class=\"number\">0</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">0</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">        verArray[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        verArray[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newVersion = <span class=\"string\">`<span class=\"subst\">${verArray[<span class=\"number\">0</span>]}</span>.<span class=\"subst\">${verArray[<span class=\"number\">1</span>]}</span>.<span class=\"subst\">${verArray[<span class=\"number\">2</span>]}</span>`</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> newVersion = newVersion + <span class=\"string\">\"-\"</span> + md5(<span class=\"string\">`<span class=\"subst\">${<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()}</span><span class=\"subst\">${newVersion}</span>`</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(newVersion);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> packageJson = fs.readFileSync(<span class=\"string\">\"./package.json\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> packageJson = <span class=\"built_in\">JSON</span>.parse(packageJson);</span><br><span class=\"line\">    packageJson.version = newVersion;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newPackage = <span class=\"built_in\">JSON</span>.stringify(packageJson);</span><br><span class=\"line\">    fs.writeFileSync(<span class=\"string\">\"./package.json\"</span>, newPackage);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Complete!!\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">update();</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%9C%80%E5%90%8E\" class=\"headerlink\" title=\"最后\"></a>最后</h2>\n<p>如果是 Hexo 文件部署，就可以直接把文件直接丢在项目根目录，Action 集成部署加上：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">node update.js</span><br></pre></td></tr></table></figure><p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.16/rawimg/20220804135818.png\"></p>\n<p><del>Blog 半年没更新，除除草 --(....</del></p>\n","link":"https://blog.yfun.top/posts/2022/auto-update-npm-version/"},{"title":"我有特别的 DNS 配置和使用技巧","date":"2022-07-28 15:31:00","description":"\n<p>众所周知，DNS 的作用与电话簿类似，将人类可读的域名映射到机器可读 IP 地址、使人更方便地访问互联网。DNS 是非常重要的互联网基础设施，对于改善上网冲浪的体验中的重要程度不容小觑。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/96381/31/31172/23930/62e2ab5bE554d388b/37027f4a03351b9e.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/i-have-my-unique-dns-setup/\">https://blog.skk.moe/post/i-have-my-unique-dns-setup/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/i-have-my-unique-dns-setup/"},{"title":"优化博客的累计布局偏移（CLS）问题","date":"2022-06-07 17:24:00","description":"\n<p>距离上一篇文章发布已有四个月了，是时候写几篇文章给博客除草了。上一次我介绍了我如何迁移、重构了我的博客的架构，这次我想来谈谈我在重构中优化和打磨访客体验时解决的一个问题。我的博客优化之旅 图片 lazyload 的学问和在 Hexo 上的最佳实践 我的博客有多快？ 天下武功，唯快不破 —— 我是这样优化博客的 ...</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/206311/26/14625/38940/629f7f81Eb11312de/b1e67f07b1cc9bc7.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/fix-blog-cls/\">https://blog.skk.moe/post/fix-blog-cls/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/fix-blog-cls/"},{"title":"使用 Next.js + Hexo 重构我的博客","date":"2022-03-17 16:24:00","description":"\n<p>在咕咕了一整年、只发布了三篇文章（其中两篇还是译文）之后，我决定还是稍微花一点时间好好折腾一下自己的博客，以 React 作为抓手，通过 Next.js 和 Hexo 深度共建，对标 Gatsby，打通静态 HTML 与用户交互之间的垂直领域屏障，实现多维矩阵闭环，为个人博客赋能（咳咳咳），然后水出 2022 年第一篇文章（逃）技术选型：Gatsby vs Next.js我使用 Hexo 驱动博客已经三年之久了，之前写过一个 开源的 Hexo 主题，后来还成为了 Hexo 的 Core Team Member、为 Hexo 贡献了不少代码。Hexo 是一个诞生于 2012......</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/218492/18/14257/25439/6227858fE1517791d/63119f6e39dc9389.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/\">https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Node.js","date":"2022-01-14 10:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h2>\n<ul>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-nodejs\">安装 Node.js</a></li>\n</ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Node.js 官网 (<a href=\"https://node.js.org/\">https://node.js.org</a>)</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/image-20220114174925675.png\" alt=\"image-20220114174925675\"></p>\n<p>下载 Node.js 安装包（推荐下载 LTS 版本）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175645.png\" alt=\"image-20220114175645642\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175750.png\" alt=\"image-20220114175749822\"></p>\n<p>勾选同意协议，点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175835.png\" alt=\"image-20220114175835742\"></p>\n<p>修改文件安装位置，点击 <code>Next</code>。（也可以不用改）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175929.png\" alt=\"image-20220114175929226\"></p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180010.png\" alt=\"image-20220114180010036\"></p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180044.png\" alt=\"image-20220114180043895\"></p>\n<p>点击 <code>Install</code> 开始安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180108.png\" alt=\"image-20220114180107827\"></p>\n<p>等待安装完成。<img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180122.png\" alt=\"image-20220114180122728\"></p>\n<p>点击 <code>Finish</code> 完成安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180206.png\" alt=\"image-20220114180206024\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>打开 <code>Git Bash</code>.</p>\n<blockquote><p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。<br>或是在开始菜单中找到 Git Bash.</p></blockquote>\n<p>输入 <code>node -v</code> 和 <code>npm -v</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180458.png\" alt=\"image-20220114180458685\"></p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-nodejs/"},{"title":"2022: 新年快乐！","date":"2021-12-31 16:00:00","description":"\n<p>转眼间，2021 年已经过去。这一年非常忙碌，以至于博客一周年的纪念来不及写，许多文章计划停留在了 To Do 里。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%8D%9A%E5%AE%A2\" class=\"headerlink\" title=\"博客\"></a>博客</h2>\n<p>由于 Cloudflare Web Analytics 是在 2021 年 4 月份启用的，再加上后来又将统计代码去除，所以关于访问量的信息不可用。</p>\n<p>截止至 2021 年 12 月 31 日，博客共发布 15 篇文章，其中 2021 年发布 11 篇文章，原创文章 10 篇。</p>\n<p>目前采用 <code>LeanCloud + Waline</code> 的评论方式，自 7 月份被刷评论后将评论权限改为登录（支持 <code>GitHub</code> 登录），还有部分评论在迁移中丢失，实在抱歉。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>博客自 2021 年 1 月 13 日将主题改为 <code>Miracle</code>，这是一款简洁、轻量的单栏 Hexo 主题。</p>\n<p><code>Miralce</code> 目前的版本是 <code>2.0.1</code>，全新的版本去除 jQuery，进一步提升性能。</p>\n<p>GitHub 仓库：<a href=\"https://github.com/hifun-team/hexo-theme-miracle\">https://github.com/hifun-team/hexo-theme-miracle</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%9B%B4%E5%A4%9A\" class=\"headerlink\" title=\"更多\"></a>更多</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">=&gt; ...</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2022/"},{"title":"无垠 2021 年度总结","date":"2021-12-31 08:36:10","description":"\n<p>真是忙碌的一年啊。转眼 2021 已经过去，2022 即将到来。又到了该总结这一年的时候了。</p>\n<h1>统计数据</h1>\n<p>年度总结的第一部分仍然是一些统计数据。以下数据截止 2021 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 29,073 (<span>+0.6%</span>)，年 PV 67,688 (<span>-11.61%</span>)，日均 UV 79.65，平均停留时间 3分34秒 (<span>-13.7%</span>)，平均跳出率 55% (<span>-9.8%</span>)。一年有效文章数 1 (<span>-80%</span>)，新增评论 109 条 (<span>-54.96%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\" alt=\"\" width=\"515\" height=\"620\" class=\"aligncenter size-full wp-image-2537\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog-249x300.jpg 249w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>除了 UV 较去年提高 100 多之外，其他数据全部下滑。主要原因还是因为今年实在太过忙碌，只更新了一篇博客，评论区也没有怎么维护。不过目前已经有两篇新的文章在路上了，希望可以尽快写完吧。</p>\n<h2>个人主页</h2>\n<p>个人页总 UV 3,515 (<span>-18.12%</span>)，总 PV 3,929 (<span>-4.56%</span>)，日均 UV 9.63，平均停留时间 55秒 (<span>-12.7%</span>)。访问的主要来源是知乎和 GitHub。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\" alt=\"\" width=\"515\" height=\"647\" class=\"aligncenter size-full wp-image-2538\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton-239x300.jpg 239w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>仍然是没有更新个人主页的一年，我也没有继续宣传这个页面，统计数据下滑大概是正常的。</p>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 4 次，新增 149 commits (<span>-54.57%</span>)，Star 数增加了 174，现有 788。</p>\n<p>终于，MDx 2.0 发布了。但是因为今年的过于忙碌，MDx 并没有得到足够的维护，版本发布周期也拉得比较长，很多 Bug 没能及时修复。希望明年可以把更多的时间花在维护 MDx 上。无论如何，还是感谢各位对于 MDx 的支持！</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>2021 大事记</h1>\n<p>说起来，2021 真的太多“第一次”了...</p>\n<ul>\n<li>一月：由于电脑电池鼓包，第一次用 iPad 外接屏幕远程桌面到服务器来考期末🌚太痛苦了</li>\n<li>一月：MDx 喜提 600 Stars</li>\n<li>三月：第一次测核酸（真的酸）</li>\n<li>三月：第一次坐上 A350！(B-309W）</li>\n<li>三月：第一次来到英国</li>\n<li>六月：第一次来到伦敦</li>\n<li>六月：第一次去猫咖撸猫🐱</li>\n<li>六月：第一次坐上 B777！(B-2025）</li>\n<li>七月：酒店隔离十四天🌚</li>\n<li>七月：MDx 喜提 700 Stars</li>\n<li>七月：第一次和猫一起住（时刻有猫撸真的爽😆）</li>\n<li>七月：入职<a href=\"https://75.team/\">奇舞团</a>实习</li>\n<li>八月：北京景点怎么这么多</li>\n<li>九月：北京景点怎么还有这么多</li>\n<li>九月：<a href=\"https://flyhigher.top/develop/2160.html\">谈谈 WebAuthn</a> 被 <a href=\"https://weibo.com/1893751011/KyipM3tOM\" rel=\"noopener noreferrer\">w3c中国微博转发</a><del>（虽然并没有人看）</del>\n</li>\n<li>九月：从奇舞团<del>跑路</del>\n</li>\n<li>九月：整了个 Stackoverflow 的复制粘贴键盘<del>，太好用了</del>\n</li>\n<li>十月：终于买了心心念念的 MSFS</li>\n<li>十一月：终于买了一台新相机</li>\n<li>十一月：第一次坐上 A380！(B-6140）</li>\n<li>十二月：第一次来到爱丁堡并和 <a href=\"https://diygod.me/\">@DIYgod</a> 面基</li>\n</ul>\n<section><div class=\"set-images-div\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\" alt=\"和猫一起住的唯一问题就是手机很快会被猫片塞满\" width=\"730\" height=\"1500\" class=\"aligncenter size-full wp-image-2518\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg 730w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-146x300.jpg 146w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-498x1024.jpg 498w\" sizes=\"(max-width: 730px) 100vw, 730px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\" alt=\"看到你在写前端，猫猫很担心你\" width=\"1004\" height=\"1500\" class=\"aligncenter size-full wp-image-2523\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg 1004w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-201x300.jpg 201w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-685x1024.jpg 685w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-768x1147.jpg 768w\" sizes=\"(max-width: 1004px) 100vw, 1004px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\" alt=\"高效开发工具（确信\" width=\"1500\" height=\"1019\" class=\"aligncenter size-full wp-image-2519\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-300x204.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-1024x696.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-768x522.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\" alt=\"和 Ralph 在天坛\" width=\"947\" height=\"1500\" class=\"aligncenter size-full wp-image-2524\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg 947w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-189x300.jpg 189w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-646x1024.jpg 646w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-768x1216.jpg 768w\" sizes=\"(max-width: 947px) 100vw, 947px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\" alt=\"380!\" width=\"1500\" height=\"874\" class=\"aligncenter size-full wp-image-2517\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-300x175.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-1024x597.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-768x447.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a>\n</div>\n<div class=\"set-images-div2\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\" alt=\"到处玩.jpg\" width=\"1500\" height=\"1080\" class=\"aligncenter size-full wp-image-2521\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-300x216.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-1024x737.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-768x553.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\" alt=\"还是到处玩.jpg\" width=\"977\" height=\"1500\" class=\"aligncenter size-full wp-image-2520\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg 977w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-195x300.jpg 195w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-667x1024.jpg 667w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-768x1179.jpg 768w\" sizes=\"(max-width: 977px) 100vw, 977px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\" alt=\"380 上的星空\" width=\"1002\" height=\"1500\" class=\"aligncenter size-full wp-image-2522\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg 1002w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-200x300.jpg 200w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-684x1024.jpg 684w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-768x1150.jpg 768w\" sizes=\"(max-width: 1002px) 100vw, 1002px\"></a>\n</div>\n</section><p><span>点击图片查看描述</span></p>\n<p>对了，对于可爱的猫猫们，我整了一个 Telegram 贴纸包，你可以在这里获取：<a href=\"https://telegram.me/addstickers/huanAndDan\">https://telegram.me/addstickers/huanAndDan</a>。</p>\n<h1>跨年红包</h1>\n<p>今年的解题之旅，从下面这张图片开始：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\" alt=\"\" width=\"1510\" height=\"1250\" class=\"aligncenter size-full wp-image-2556\"></a>\n<p>不过，鉴于今年的题目较以往对于认真解题的人更难，我还准备了隐藏红包，在解题中收集线索即可发现隐藏红包。共有 20 个普通红包和 10 个隐藏红包。</p>\n<p>解题计划持续到东八区 2022.02.03 23:59:59 或红包被领完为止，之后我会发布题解。不过由于去年情况混乱，今年在解题过程中我一旦发现有不正常的现象就会立即停止活动。Anyway，新年快乐！祝玩得开心。</p>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报用到了 PS 和 Adobe 家的新玩具 Dimension。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\" alt=\"\" width=\"707\" height=\"1000\" class=\"aligncenter size-full wp-image-2547\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg 1414w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-212x300.jpg 212w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-724x1024.jpg 724w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-768x1086.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-1086x1536.jpg 1086w\" sizes=\"(max-width: 707px) 100vw, 707px\"></a>\n<p>那么祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2507.html"},{"title":"[译] 不，Web3 不是去中心化","date":"2021-12-14 14:01:00","description":"加密货币社区对元宇宙和 Web3 的狂热仍在继续，大量投资人和开发者前仆后继加入其中。但是，Web3 真的能实现支持者们的种种愿景吗？亦或是另一个镜中月、水中花？也许让历史照进现实，能给我们答案。<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/123139/11/24965/54827/62215eedE5e3da14a/80c24408e97057dd.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/web3-is-not-decentralization/\">https://blog.skk.moe/post/web3-is-not-decentralization/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/web3-is-not-decentralization/"},{"title":"[译] 捍卫自由的互联网，对 Web3 说不","date":"2021-12-12 13:40:00","description":"作为一个充满泡沫和噱头的新概念，Web3 和元宇宙在区块链的社区中掀起了一波浪潮。鼓吹者坚信 Web3 就是互联网的未来、不惜砸下大把的金钱和精力、希望能在未来中捞一杯羹；而大部分人保持观望的态度。是时候来一点 Web3 的反对意见了。<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/87908/13/23797/13415/622032afE3a2f9e9f/95c01e98cd4a707a.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/\">https://blog.skk.moe/post/keep-web-free-say-no-to-web3/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/"},{"title":"2021 年 JavaScript Promise 性能对比","date":"2021-12-07 08:19:00","description":"\n<p>我们正生活在一个「Any application that can be written in JavaScript, will eventually be written in JavaScript」的时代。作为一门兼具动态性和简单性的语言，JavaScript 已经占领了客户端、服务端，甚至在机器学习中也占据一席之地；不可避免的，异步执行也逐渐成为这门语言不可缺少的一部分。TL; DR Bluebird 依然是速度最快、内存占用最少的 Promise 实现 Runtime 的 async / await 实现越来越快、顺序执行的性能已经超过 Native Promise，占用的内存也更少 对于平行并发执行的 Promise，Bluebird 的性能依然一骑绝尘。......</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157404/28/28495/143414/622032b2Ef7b495fd/6a9bd02e79392c9d.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/promise-performance-benchmark/\">https://blog.skk.moe/post/promise-performance-benchmark/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/promise-performance-benchmark/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Git","date":"2021-11-12 13:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h3>\n<ul><li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li></ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Git 官网 (<a href=\"https://git-scm.com/\">https://git-scm.com</a>).</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112204849.png\"></p>\n<p>点击页面中的 <code>Download For Windows</code> 下载 Windows 版本。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211507.png\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>，同意协议。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211528.png\"></p>\n<p>修改程序安装位置，点击 <code>Next</code>（直接装在 C 盘也不是不行）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211604.png\"></p>\n<p>组件选项，可选桌面快捷键、右键菜单、LFS 支持、自动检查更新等。</p>\n<p>点击 <code>Next</code> 进入下一步。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211609.png\"></p>\n<p>开始菜单文件夹名，保持默认就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211613.png\"></p>\n<p>默认编辑器，保持 Vim 就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211616.png\"></p>\n<p>环境变量，选择第 2 个，点击 <code>Next</code>。</p>\n<blockquote><p>如果选择第 1 个，则只能在 Git Bash 中使用，可能会出现问题</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211619.png\"></p>\n<p>剩下的都可以保持默认，一路 Next，然后点击 <code>Install</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211622.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211624.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211627.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211630.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211633.png\"></p>\n<p>等待安装完毕。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。</p>\n<p>（或是在开始菜单中找到 Git Bash）</p>\n<p>输入 <code>git --version</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/7ec315b7764cc.png\"></p>\n<p>大功告成！</p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-git/"},{"title":"前端时间国际化 101","date":"2021-10-14 15:58:23","description":"\n<blockquote>\n<p>时间只是幻觉。</p>\n<footer>—— 阿尔伯特·爱因斯坦</footer>\n</blockquote>\n<p>最近在开发一个需要完善国际化方案的前端项目，在处理时间国际化的时候遇到了一些问题。于是花了一些时间研究，有了这篇文章。不过由于网上关于 JavaScript 中 <code>Date</code> 对象的坑的文章已经一抓一大把了，<strong>因此这篇文章不是 JavaScript 中 <code>Date</code> 对象的使用指南，而是只专注于前端时间国际化。</strong></p>\n<h1>从时区说起</h1>\n<p>要想处理时间，UTC 是一个绕不开的名字。协调世界时（Coordinated Universal Time）是目前通用的世界时间标准，计时基于原子钟，但并不等于 TAI（国际原子时）。TAI 不计算闰秒，但 UTC 会不定期插入闰秒，因此 UTC 与 TAI 的差异正在不断扩大。UTC 也接近于 GMT（格林威治标准时间），但不完全等同。可能很多人都发现近几年 GMT 已经越来越少出现了，这是因为 GMT 计时基于地球自转，由于地球自转的不规则性且正在逐渐变慢，目前已经基本被 UTC 所取代了。</p>\n<blockquote><p>JavaScript 的 <code>Date</code> 实现不处理闰秒。实际上，由于闰秒增加的不可预测性，Unix/POSIX 时间戳完全不考虑闰秒。在闰秒发生时，Unix 时间戳会重复一秒。这也意味着，一个时间戳对应两个时间点是有可能发生的。</p></blockquote>\n<p>由于 UTC 是标准的，我们有时会使用 UTC+/-N 的方式表达一个时区。这很容易理解，但并不准确。中国通行的 <code>Asia/Shanghai</code> 时区<strong>大部分</strong>情况下可以用 UTC+8 表示，但英国通行的 <code>Europe/London</code> 时区并不能用一个 UTC+N 的方式表示——由于夏令时制度，<code>Europe/London</code> 在夏天等于 UTC+1，在冬天等于 UTC/GMT。</p>\n<blockquote><p>一个时区与 UTC 的偏移并不一定是整小时。如 <code>Asia/Yangon</code> 当前为 UTC+6:30，而 <code>Australia/Eucla</code> 目前拥有奇妙的 UTC+8:45 的偏移。</p></blockquote>\n<p>夏令时的存在表明<strong>时间的表示不是连续的</strong>，时区之间的时差也并不是固定的，我们并不能用固定时差来处理时间，这很容易意识到。但一个不容易意识到的点是，时区还包含了其历史变更信息。中国目前不实行夏令时制度，那我们就可以放心用 UTC+8 来表示中国的时区了吗？你可能已经注意到了上一段中描述 <code>Asia/Shanghai</code> 时区时我使用了<strong>大部分</strong>一词。<code>Asia/Shanghai</code> 时区在历史上实行过夏令时，因此 <code>Asia/Shanghai</code> 在部分时间段可以使用 UTC+9 来表示。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1988-04-18 00:00:00')\r\n// Mon Apr 18 1988 00:00:00 GMT+0900 (中国夏令时间)</pre>\n<blockquote><p>夏令时已经够混乱了，但它实际上比你想象得更混乱——部分穆斯林国家一年有四次夏令时切换（进入斋月时夏令时会暂时取消），还有一些国家使用混沌的 15/30 分钟夏令时而非通常的一小时。</p></blockquote>\n<blockquote><p><strong>不要总是基于 <code>00:00</code> 来判断一天的开始。</strong>部分国家使用 0:00-1:00 切换夏令时，这意味着 23:59 的下一分钟有可能是 1:00。</p></blockquote>\n<p>事实上，虽然一天只有 24 个小时，但当前（2021.10）正在使用的时区有超过 300 个。<strong>每一个时区都包含了其特定的历史。</strong>虽然有些时区在现在看起来是一致的，但它们都包含了不同的历史。时区也会创造新的历史。由于政治、经济或其他原因，一些时区会调整它们与 UTC 的偏差（萨摩亚曾经从 UTC-10 切换到 UTC+14，导致该国 2011.12.30 整一天都消失了），或是启用/取消夏令时，甚至有可能导致一个时区重新划分为两个。因此，为了正确处理各个时区，我们需要一个数据库来存放时区变更信息。还好，已经有人帮我们做了这些工作。目前大多数 *nix 系统和大量开源项目都在使用 <a href=\"https://www.iana.org/time-zones\" rel=\"noopener\">IANA 维护的时区数据库</a>（IANA TZ Database），其中包含了自 Unix 时间戳 0 以来各时区的变更信息。当然这一数据库也包含了大量 Unix 时间戳 0 之前的时区变更信息，但并不能保证这些信息的准确性。IANA 时区数据库会定期更新，以反映新的时区变更和新发现的历史史实导致的时区历史变更。</p>\n<blockquote><p>Windows 不使用 IANA 时区数据库。微软为 Windows 自己维护了一套<a href=\"https://docs.microsoft.com/zh-cn/troubleshoot/windows-client/system-management-components/daylight-saving-time-help-support\" rel=\"noopener\">时区数据库</a>，这有时会导致在一个系统上合法的时间在另一系统上不合法。</p></blockquote>\n<p>既然我们不能使用 UTC 偏移来表示一个时区，那就只能为每个时区定义一个标准名称。通常地，我们使用 <code>/</code> 来命名一个时区。这里的城市一般为该时区中人口最多的城市。于是，我们可以将中国的通行时区表示为 <code>Asia/Shanghai</code>。也有一些时区有自己的别名，如太平洋标准时间 <code>PST</code> 和协调世界时 <code>UTC</code>。</p>\n<blockquote><p>时区名称使用城市而非国家，是由于国家的变动通常比城市的变动要快得多。</p></blockquote>\n<blockquote><p><strong>城市不是时区的最小单位。</strong>有很多城市同时处于多个时区，甚至澳大利亚<a href=\"https://en.wikipedia.org/wiki/Gold_Coast_Airport\" rel=\"noopener\">有一个机场</a>的跑道两端处于不同的时区。</p></blockquote>\n<h1>处理时区困难重重</h1>\n<p>几个月前的一天，<a href=\"https://milkice.me/\" rel=\"noopener\">奶冰</a>在他的 Telegram 频道里发了这样的一条消息：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\"><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\" alt=\"奶冰频道的消息\" width=\"500\" class=\"aligncenter size-medium wp-image-2490\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg 800w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-244x300.jpg 244w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-768x944.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\"></a>\n<p>你想的没错，这个问题正是由时区与 UTC 偏移的不同造成的。<code>Asia/Shanghai</code> 时区在 1940 年前后和 1986 年前后曾实行过夏令时，<strong>而夏令时的切换会导致一小时的出现和消失。</strong>具体来说，启用夏令时当天会有一个小时消失，如 2021.3.28 英国启用夏令时，1:00 直接跳到 3:00，导致 <code>2021-03-28 01:30:00</code> 在 <code>Europe/London</code> 时区中是不合法的；取消夏令时当天又会有一个小时重复，如 2021.10.31 英国取消夏令时，2:00 会重新跳回 1:00 一次，导致 <code>2021-10-31 01:30:00</code> 在 <code>Europe/London</code> 时区中对应了两个时间点。而在奶冰的例子中，<code>1988-04-10 00:46:50</code> 正好处于因夏令时启用而消失的一小时中，因此系统会认为此时间字符串不合法而拒绝解析。</p>\n<blockquote><p>你可能会注意到在历史上 1988.4.10 这一天 <code>Asia/Shanghai</code> 时区实际上是去掉了 1:00-2:00 这一小时而不是 0:00-1:00。上文问题更深层次的原因是，在 IANA TZDB 2018a 及更早版本中，IANA 因缺乏历史资料而设置了错误的夏令时规则，规则设定了夏令时交界于 0:00-1:00 从而导致上文问题发生。而随后社区<a href=\"http://mm.icann.org/pipermail/tz/2018-August/026760.html\" rel=\"noopener\">发现了更准确的史实</a>，因此 IANA 更新了数据库。上文的问题在更新了系统的时区数据库后便解决了。</p></blockquote>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\" alt=\"IANA TZDB 2018a 及之前版本的错误数据\" width=\"1750\" height=\"595\" class=\"aligncenter size-full wp-image-2491\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg 1750w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-300x102.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1024x348.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-768x261.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1536x522.jpg 1536w\" sizes=\"(max-width: 1750px) 100vw, 1750px\"></a>\n<p><span>IANA TZDB 2018a 及之前版本的错误数据</span></p>\n<p>再来考虑另一种情况。你的应用的某位巴西用户在 2018 年保存了一个未来时间 <code>2022-01-15 12:00</code>（按当时的规律那应该是个夏令时时间），不巧那时候你的应用是以格式化的时间字符串形式保存的时间。之后你发现巴西已经于 2019 年 4 月宣布彻底取消夏令时制度，那么 <code>2022-01-15 12:00</code> 这个时间对应的 Unix 时间戳发生了变化，变得不再准确，要正确处理这一字符串就需要参考这一字符串生成的时间（或生成时计算的 UTC 偏移）来做不同的处理。<strong>因此，应用从一开始就应该避免使用字符串来传输、存储时间，而是使用 Unix 时间戳。</strong>如果不得不使用字符串存储时间，请尽可能：</p>\n<ul>\n<li>使用 UTC 描述时间，你永远不会知道本地时区在未来会发生什么</li>\n<li>如果需要以当地时间描述时间，一定带上当前 UTC 偏移</li>\n</ul>\n<p>时区历史带来的问题往往意想不到而且远比想象得多。实际上时区历史数据非常详细而繁多且跨设备不一致，并没有简单而统一的处理方法。在需要严谨处理时区时可能需要在应用程序中内嵌一套各端统一的时区数据库，但这样的方案放在前端又会带来不少问题：</p>\n<ul>\n<li>体积过大。moment.js 曾经设计过<a href=\"https://github.com/moment/moment-timezone/blob/develop/data/packed/2021a.json\" rel=\"noopener\">一种简洁的 TZDB 表示</a>，但尽管已经尽可能压缩整个文件仍然达到了 180+KB。在性能优先的 Web 应用中这是不可接受的</li>\n<li>需要持续更新。时区数据一直在变动，需要在时区数据更新时尽快更新应用内的时区数据，这带来了额外的维护成本</li>\n</ul>\n<p>ES6 为我们带来了 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl\" rel=\"noopener\"><code>Intl</code> 命名空间</a>。在这里，JavaScript 运行时提供了不少时间相关的国际化能力。因此，在不使用额外数据的情况下准确处理时区是可能的，但这并不完美：</p>\n<ul>\n<li>各端不统一。浏览器提供的时区数据受浏览器版本、系统版本等可能变化，最新的时区更新可能无法快速反映到所有设备上</li>\n<li>实现复杂。<code>JavaScript</code> 中 <code>Date</code> 对象的不良设计导致实现完善的时区处理并不容易，且 <code>Intl</code> 命名空间下的对象实例化性能开销较大，需要额外优化</li>\n</ul>\n<blockquote><p><code>Intl</code> 命名空间下还有很多实用的国际化相关方法，值得我们另开一篇文章来讲讲了。</p></blockquote>\n<p>在真实开发中，这需要取舍。目前主流的 JavaScript 时间处理库都已转向浏览器内置方法，并在需要时通过 Polyfill 保证跨端一致性。在这篇文章中，我们将尝试在不使用第三方库的情况下实现基本的时间国际化处理。此外，还有一些诸如需要使用 Unix 时间戳才能正确地在各端交换时间等细节需要注意。</p>\n<h1>时区转换</h1>\n<p>JavaScript 中的 <code>Date</code> 并不是不包含时区信息——实际上，<code>Date</code> 对象表示的一定是当前时区。通过尝试：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1970-01-01T00:00:00Z')\r\n// Thu Jan 01 1970 08:00:00 GMT+0800 (中国标准时间)</pre>\n<p>就可以知道，JavaScript 运行时其实知道当前时区，并会在需要的时候将其他时区的时间转换为当前时区的时间。那么，如何将本地时间转换为其他时区的时间呢？从 <code>Date</code> 的角度看，这并不行，因为我们无法设置一个 <code>Date</code> 对象的时区。但我们可以“投机取巧”：将 <code>Date</code> 对象的时间加上/减去对应的时差，尽管 <code>Date</code> 对象仍然认为自己在本地时区，但这样不就可以正确显示了嘛！但我们会碰到上文提到的问题：时区之间的时间差并不固定，在没有额外数据的情况下很难正确计算。</p>\n<p>还好，ES6 基于 <code>Intl</code> 命名空间扩展了 <code>Date.prototype.toLocaleString()</code> 方法，使其可以接受时区参数并按指定时区格式化时间。如果你在搜索引擎中搜索如何使用 JavaScript 转换时区，你大概率会在 StackOverflow 上找到类似这样的答案：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const convertTimeZone = (date, timeZone) =&gt; {\r\n    return new Date(date.toLocaleString('en-US', { timeZone }))\r\n}\r\n\r\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\r\nconvertTimeZone(now, 'Europe/London') // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<p>很好理解，我们使用 <code>en-US</code> 的区域设置要求 JavaScript 运行时以我们指定的时区格式化时间，再将时间字符串重新解析为时间对象。这里的 <code>timeZone</code> 就是诸如 <code>Asia/Shanghai</code> 等的 IANA TZDB 时区名称。这个字符串确实需要自己提供，但这就是我们唯一需要自己准备的数据了！只要提供了时区名称，浏览器就会自动计算正确的时间，无需我们自行计算。</p>\n<blockquote><p>对于时区名称，你可以考虑使用 <a href=\"https://github.com/vvo/tzdb/\" rel=\"noopener\">@vvo/tzdb</a>。这是一个声称为自动更新的 IANA TZDB 的 JSON 导出，并已被数个大型项目使用。你可以从这个包中导出所有时区名称。</p></blockquote>\n<p>这个方法看起来还不错，对吧？但实际上，它有两个问题：</p>\n<ul>\n<li>指定了区域设置和时区的 <code>toLocaleString()</code> 实际上每次调用都会在 JavaScript 运行时中创建新的 <code>Intl.DateTimeFormat</code> 对象（在后文详述），而后者会带来昂贵的性能开销（在 Node 14 中，实例化一次会在 V8 中增加内存使用约 46.3Kb。但这是符合预期的，详见 <a href=\"https://bugs.chromium.org/p/v8/issues/detail?id=6528\" rel=\"noopener\">V8 Issue</a>）。因此，在密集调用的情况下需要考虑计算并缓存时差，并在一定时间后或需要时进行更新</li>\n<li>使用 <code>toLocaleString()</code> 并使用 <code>en-US</code> 区域设置格式化的默认时间格式类似于 <code>10/13/2021, 1:00:00 AM</code>。这可以被大部分浏览器正确解析，<strong>但这是不规范的，不同浏览器有可能产生不同结果。</strong>你也可以自行配置格式（同下文的 <code>Intl.DateTimeFormat</code>），但仍然无法构造出规范的字符串</li>\n</ul>\n<p>因此，更佳的方案是，我们需要建立一个可反复使用的格式化器以避免重复创建 <code>Intl.DateTimeFormat</code> 带来的额外开销，并需要手动构造出符合规范的时间字符串，并将其重新解析为 <code>Date</code> 对象。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const timeZoneConverter = (timeZone) =&gt; {\r\n    // 新建 DateTimeFormat 对象以供对同一目标时区重用\r\n    // 由于时区属性必须在创建 DateTimeFormat 对象时指定，我们只能为同一时区重用格式化器\r\n    const formatter = new Intl.DateTimeFormat('zh-CN', {\r\n        year: 'numeric',\r\n        month: '2-digit',\r\n        day: '2-digit',\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n        second: '2-digit',\r\n        hour12: false,\r\n        timeZone\r\n    })\r\n    return {\r\n        // 提供 conver 方法以将提供的 Date 对象转换为指定时区\r\n        convert (date) {\r\n            // zh-CN 的区域设置会返回类似 1970/01/01 00:00:00 的字符串\r\n            // 替换字符即可构造出类似 1970-01-01T00:00:00 的 ISO 8601 标准格式时间字符串并被正确解析\r\n            return new Date(formatter.format(date).replace(/\\//g, '-').replace(' ', 'T').trim())\r\n        }\r\n    }\r\n}\r\n\r\nconst toLondonTime = timeZoneConverter('Europe/London') // 对于同一时区，此对象可重用\r\n\r\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\r\ntoLondonTime.convert(now) // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<blockquote><p>目前 <code>zh-CN</code> 的区域设置会产生类似 <code>1970/01/01 00:00:00</code> 的格式化字符串。这一格式目前跨端一致，但由于规范没有指定时间格式，<strong>这个格式在未来有可能变更。</strong>更好的方案是使用 <code>formatToParts()</code> 方法（在后文详述）获取时间字符串的各部分并手动拼接出标准格式的字符串，但在这个例子中直接 <code>replace</code> 拥有更好的性能。</p></blockquote>\n<p>现在，尝试反复转换时间至同一时区 1000 次，耗时从 <code>toLocaleString()</code> 1.5 秒降低到了 0.04 秒。尽管代码长了点，但这次重写在最好的情况下为我们带来了超过 20 倍的性能提升。</p>\n<p>需要注意的是，虽然这看起来就算最终方案了，但这个方案依然不完美。主要有以下两个问题：</p>\n<ul>\n<li>在需要密集转换为不同时区时，由于无法重用格式化器，性能依然较差且难以进一步优化</li>\n<li>由于 <code>Intl.DateTimeFormat</code> 不支持格式化毫秒，在格式化字符串的过程中毫秒会丢失，导致最终结果可能会与期望结果产生最高 999ms 的误差，需要额外处理。比如需要计算时差时，我们可能需要这么写：\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const calcTimeDiff = (date, converter) =&gt; {\r\n    const secDate = date - date.getMilliseconds() // 去掉毫秒，避免转换前后精度差异\r\n    return converter.convert(new Date(secDate), tzName) - secDate\r\n}\r\n\r\ncalcTimeDiff(new Date(), timeZoneConverter('Europe/London')) // -25200000</pre>\n</li>\n</ul>\n<p>无论如何，在折腾一番后我们还是把时区正确转换了。接下来准备格式化时间字符串了吗？不过在此之前，我们得先来聊聊语言、文字和区域。</p>\n<h1>语言文字区域傻傻分不清</h1>\n<blockquote><p>如何在计算机中表示中文？</p></blockquote>\n<p>“这不简单，”你可能会说，“用 <code>zh</code> 啊。”</p>\n<blockquote><p>那简体中文呢？</p></blockquote>\n<p>“<code>zh-CN</code>。”你或许会说出这个答案。</p>\n<blockquote><p>那用于新加坡的简体中文和用于中国大陆的简体中文该如何区分呢？</p></blockquote>\n<p>嗯……好问题。</p>\n<p>要能正确区分不同的简体中文，我们还得先回到定义上。实际上，“国际化”并不只是语言的翻译而已，国际化包含的是一整套对于各个<strong>区域</strong>的本地化方案。要准确表示一个国际化方案，我们实际至少需要确定三个属性：语言（Language）、文字（Script）和区域（Locale）。</p>\n<ul>\n<li>\n<strong>语言</strong>通常指的是<strong>声音语言</strong>。不同的语言都有一套自己的发音规则，很难互通。如中文和英语都属于语言</li>\n<li>\n<strong>文字</strong>对应的是某个语言的书写方式，同样的语言可能会有多种书写方案。如中文主要有简体和繁体两种书写方案</li>\n<li>\n<strong>区域</strong>指国际化面向的地区，相同的语言和文字，在不同地区也有可能会有不同的使用习惯。如新加坡和中国大陆都使用简体中文，但两地的用词习惯等有些许差异</li>\n</ul>\n<p>只有确定了这三个属性，我们才能正确定义一个国际化方案（或者说<strong>区域设置</strong>）。当然，还有很多其他属性可以更准确的表达某个区域设置，但通常有语言、文字和区域就已经足够了。</p>\n<p>于是，基于 <a href=\"https://tools.ietf.org/rfc/bcp/bcp47.txt\" rel=\"noopener\">BCP 47</a>，我们可以知道：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN = 中文普通话-简体-中国大陆\r\ncmn-Hans-SG = 中文普通话-简体-新加坡\r\ncmn-Hant-TW = 中文普通话-繁体-台湾\r\nyue-Hant-HK = 中文粤语-繁体-香港</pre>\n<p>等等，这都是啥？还有 BCP 47 又是啥？BCP 是 IETF 发布的“最佳当前实践”文档，而 BCP 47 是一些国际化相关的 ISO 和备忘录的集合，也是目前事实上由 HTML 和 ECMAScript 所使用的表达区域设置的标准。BCP 47 定义的区域设置标签实际上比较复杂，但对于大部分简单使用情况，上文示例中的格式已经完全够用了。简单来说，<strong>要表达一个区域设置，我们会使用 <code>语言[-文字][-区域]</code> 的格式，而文字和区域都是可选的。</strong>而对于每个部分的具体代码，BCP 47 也有做具体定义。其中：</p>\n<ul>\n<li>语言使用 ISO 639-1 定义的两位字母代码（如中文为 <code>zh</code>，英文为 <code>en</code>）或 <a href=\"https://iso639-3.sil.org/code_tables/639/data\" rel=\"noopener\">ISO 639-2/3</a> 定义的三位字母代码（如中文普通话为 <code>cmn</code>，英文为 <code>eng</code>），通常小写</li>\n<li>文字使用 <a href=\"https://unicode.org/iso15924/iso15924-codes.html\" rel=\"noopener\">ISO 15924</a> 定义的四位字母代码，通常首字母大写。如简体中文是 <code>Hans</code>，繁体中文是 <code>Hant</code>\n</li>\n<li>区域通常使用 <a href=\"https://www.iso.org/iso-3166-country-codes.html\" rel=\"noopener\">ISO 3166-1</a> 定义的两位字母代码，通常大写，如中国大陆为 <code>CN</code>，英国为 <code>GB</code>\n</li>\n</ul>\n<blockquote><p>ISO 639-1/2/3 的关系实际是：ISO 639-1 是最早制定的规范，使用两位字母表示语言，但语言数量之多并不能只用两位代码表示。因此后来修订了 ISO 639-2 和 3，使用三位字母表示了更多语言。通常 639-1 代码和 ISO-2/3 代码是一对多的关系。如中文 <code>zh</code> 其实是中文普通话 <code>cmn</code> 的宏语言（macrolanguage），同样使用 <code>zh</code> 为宏语言的语言还有 <code>wuu</code>（中文吴语）、<code>hak</code>（中文客家话）、<code>yue</code>（中文粤语）等数十种。<strong>从规范上我们现在应该使用 ISO 639-2/3 代码来替代 ISO 639-1 代码了</strong>，但由于历史阻力和真实需求中分类无需如此细致等原因，<strong>使用 ISO 639-1 指定语言仍然非常常见而且完全可以接受。</strong>此外，特别地，我们在 ISO 639-3 中定义未指明的语言为 <code>und</code>。</p></blockquote>\n<p>因此，对于这一节开头的两个问题，在 BCP 47 中正确答案其实是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">zh = 中文\r\ncmn = 中文普通话\r\n\r\nzh-Hans = 中文-简体\r\ncmn-Hans = 中文普通话-简体</pre>\n<p>而 <code>zh-CN</code> 实际是指在中国大陆使用的中文，当然也包含在中国大陆使用的繁体中文。<strong>不过，由于大部分情况下一个区域只会通用一种文字，很多情况下我们可以忽略文字这一项</strong>，即使用 <code>zh-CN</code>（或者 <code>cmn-CN</code>）来表示中国大陆的简体中文普通话——毕竟在大部分业务中在中国大陆使用繁体和非普通话的情况非常少。</p>\n<blockquote><p>事实上，类似 <code>zh-Hans</code> 和 <code>zh-Hant</code> 开头的区域设置名称已经被标记为 <code>redundant 废弃</code>，因此尽可能只使用 <code>zh-CN</code> 或者 <code>cmn-Hans-CN</code> 这样的区域设置名称。所有区域设置名称的列表可以在 <a href=\"https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry\" rel=\"noopener\">IANA</a> 找到。</p></blockquote>\n<p>现在我们可以准确定义一个区域设置了。不过我们还有一些小小的需求。比如我们想在 <code>cmn-Hans-CN</code> 的区域设置中使用农历来表示日期，但显然我们上文定义的表示方法并不能表达这一需求。好在，Unicode 为 BCP 47 提供了 u 扩展。在区域设置名称后面加上 <code>-u-[选项]</code> 就可以表达更细致的变体了。所以我们有：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN-u-ca-chinese = 中文普通话-简体-中国大陆-u-日历-中国农历\r\njpn-Jpan-JP-u-ca-japanese = 日语-日文汉字/平假名/片假名-日本-u-日历-日本日历\r\ncmn-Hans-CN-u-nu-hansfin = 中文普通话-简体-中国大陆-u-数字-简体大写数字</pre>\n<p>u 扩展的具体可选项可以在 <a href=\"https://www.unicode.org/reports/tr35/tr35-21.html#Unicode_locale_identifier\" rel=\"noopener\">Unicode 网站</a>上找到。而多个 u 扩展还可以连接——于是我们甚至可以写出 <code>cmn-Hans-CN-u-ca-chinese-nu-hansfin</code> 这种丧心病狂的区域设置名称。当然，相信你现在已经可以看懂这个区域设置的意思了。</p>\n<blockquote><p>不同地区可能会有不同的日历使用习惯，如中国有使用农历的需求，泰国有使用佛历的需求，我们可以通过 u 扩展指定不同的日历。不过，大部分情况下我们会使用标准的 ISO 8601 日历（gregory），JavaScript 的 <code>Date</code> 对象也只支持这种日历。</p></blockquote>\n<blockquote><p>你可以使用 <a href=\"https://r12a.github.io/app-subtags/\" rel=\"noopener\">BCP47 language subtag lookup</a> 工具快速检查你编写的 BCP 47 区域标签是否规范。</p></blockquote>\n<p>终于我们可以正确表达一个完美符合我们需求的区域设置了。接下来，让我们开始格式化时间吧。</p>\n<h1>格式化时间</h1>\n<p>这题我会！</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const formatDate(date) =&gt; {\r\n    return `${date.getFullYear()}-${`${date.getMonth() + 1}`.padStart(2, '0')}-${`${date.getDate()}`.padStart(2, '0')} ${`${date.getHours()}`.padStart(2, '0')}:${`${date.getMinutes()}`.padStart(2, '0')}:${`${date.getSeconds()}`.padStart(2, '0')}`\r\n}\r\n\r\nformatDate(new Date()) // 2021-10-13 01:00:00</pre>\n<p>就完事了……吗？先不论这样的格式化代码难以阅读，尽管上文这样的日期格式国际通用，<strong>但并非所有区域都习惯于这样的日期表示方法。</strong>比如英语国家/地区在很多时候习惯在日期中加入星期，而阿拉伯语国家/地区在部分情况下习惯使用阿拉伯语数字（而非常用的阿拉伯-印度数字）；再比如美式英语国家/地区习惯月-日-年的日期表示法，而英式英语国家/地区习惯日-月-年的日期表示法……不同区域在时间表示格式习惯上的差异是巨大的，<strong>我们很难通过一个简单的方法来正确地、国际化地格式化一个日期。</strong></p>\n<p>好在 ES6 早就为我们铺平了道路。还记得上文提到过的 <code>Intl.DateTimeFormat</code> 吗？我们通过它来实例化一个日期格式化器并用进行日期的国际化。</p>\n<p>直接来看例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const options = {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    weekday: 'long'\r\n}\r\nconst now = new Date()\r\n\r\nconst enUSFormatter = new Intl.DateTimeFormat('en-US', options)\r\n\r\nconst zhCNFormatter = new Intl.DateTimeFormat('zh-CN', options)\r\nconst zhCNAltFormatter = new Intl.DateTimeFormat('zh-CN-u-ca-chinese', options)\r\nconst zhCNAlt2Formatter = new Intl.DateTimeFormat('zh-CN-u-ca-roc-nu-hansfin', options)\r\n\r\nconst jaFormatter = new Intl.DateTimeFormat('ja', options)\r\nconst jaAltFormatter = new Intl.DateTimeFormat('ja-JP-u-ca-japanese', options)\r\n\r\nconst arEGFormatter = new Intl.DateTimeFormat('ar-EG', options)\r\n\r\nenUSFormatter.format(now) // Wednesday, Oct 13, 2021\r\n\r\nzhCNFormatter.format(now) // 2021年10月13日星期三\r\nzhCNAltFormatter.format(now) // 2021辛丑年九月8星期三\r\nzhCNAlt2Formatter.format(now) // 民国壹佰壹拾年拾月拾叁日星期三\r\n\r\njaFormatter.format(now) // 2021年10月13日水曜日\r\njaAltFormatter.format(now) // 令和3年10月13日水曜日\r\n\r\narEGFormatter.format(now) // الأربعاء، ١٣ أكتوبر ٢٠٢١</pre>\n<blockquote><p>在这里我们使用 ISO 639-1 代码来表示语言，是由于事实上 ISO 639-1 代码更加常见与通用。在大部分支持 <code>Intl.DateTimeFormat</code> 的 JavaScript 运行时中我们也可以使用 ISO 639-2/3 代码来表示语言（但实际会 fallback 至对应的 ISO 639-1 代码）。</p></blockquote>\n<blockquote><p>你也可以通过在 <code>options</code> 中设置 <code>calendar</code> 属性和 <code>numberingSystem</code> 属性来替换区域设置名称中对 u 扩展的使用。这也是推荐方式。</p></blockquote>\n<p>这非常直观，我们可以指定区域设置和格式化选项来初始化一个格式化器，并在之后使用格式化器对象的 <code>format</code> 方法来格式化一个 <code>Date</code> 对象。这里的格式化选项其实非常灵活，能格式化的不只是日期，时间也可以被灵活地格式化，有非常多的组合可以选择。我们不会在这里详细解释每一个选项，你可以访问 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\" rel=\"noopener\">MDN 文档</a>来了解更多。</p>\n<blockquote><p>如前文所述，<code>Intl.DateTimeFormat</code> 无法格式化毫秒。</p></blockquote>\n<p>不过需要注意的是，<strong>JavaScript 运行时不一定支持所有区域设置，也不一定支持所有格式化选项。</strong>在遇到不支持的情况时，<code>Intl.DateTimeFormat</code> 默认会静默 fallback 到最匹配的支持项，因此在处理不常见的区域设置或选项时，你可能需要再额外检查。你可以通过 <code>Intl.DateTimeFormat.supportedLocalesOf()</code> 静态方法判断当前运行时是否支持指定的区域设置，也可以在实例化格式化器后在对象上调用 <code>resolvedOptions()</code> 方法来检查运行时的解析结果是否与预期一致。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('yue-Hant-CN').resolvedOptions()\r\n// {locale: 'zh-CN', calendar: 'gregory', …}\r\n// fallback 至 zh-CN，与 yue-CN 的预期不一致</pre>\n<p>此外，正如你所看到的，各种语言在日期格式化中使用的文本 JavaScript 运行时都已经帮我们内置了。因此，我们甚至可以利用这些国际化特性来为我们的应用减少一点需要翻译的字符串——打包进应用的翻译越少，应用体积也就越小了嘛——比如说获取一周七天对应的名字：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getWeekdayNames = (locale) =&gt; {\r\n     // 基于一个固定日期计算，这里选择 1970.1.1\r\n     // 不能使用 0，因为 Unix 时间戳 0 在不同时区的日期不一样\r\n    const base = new Date(1970, 0, 1).getTime()\r\n    const formatter = new Intl.DateTimeFormat(locale, { weekday: 'short' })\r\n    return Array.from({ length: 7 }, (_, day) =&gt; (\r\n        formatter.format(new Date(base + 3600000 * 24 * (-4 + day))) // 1970.1.1 是周四\r\n    ))\r\n}\r\n\r\ngetWeekdayNames('en-US') // ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\r\ngetWeekdayNames('zh-CN') // ['周日', '周一', '周二', '周三', '周四', '周五', '周六']\r\ngetWeekdayNames('ja') // ['日', '月', '火', '水', '木', '金', '土']\r\ngetWeekdayNames('ar-EG') // ['الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت']</pre>\n<p>当然，如果你还是不喜欢运行时为你提供的格式，我们还有上文提到过的 <code>formatToParts()</code> 方法可以用。来看一个简单的例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('zh-CN', {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    weekday: 'long',\r\n    hour: 'numeric',\r\n    minute: 'numeric',\r\n    second: 'numeric',\r\n}).formatToParts(new Date())\r\n// [\r\n//     { type: 'year', value: '2021' },\r\n//     { type: 'literal', value: '年' },\r\n//     { type: 'month', value: '10' },\r\n//     { type: 'literal', value: '月' },\r\n//     { type: 'day', value: '13' },\r\n//     { type: 'literal', value: '日' },\r\n//     { type: 'weekday', value: '星期三' },\r\n//     { type: 'literal', value: ' ' },\r\n//     { type: 'dayPeriod', value: '上午' },\r\n//     { type: 'hour', value: '1' },\r\n//     { type: 'literal', value: ':' },\r\n//     { type: 'minute', value: '00' },\r\n//     { type: 'literal', value: ':' },\r\n//     { type: 'second', value: '00' }\r\n// ]</pre>\n<p>随后，你就可以自己解析这个数组来构造出你想要的时间格式了。最后，我们还可以使用 <code>Intl.RelativeTimeFormat</code> 来格式化相对日期。当然我们不会在这里详细讲解这个 API，你可以参考 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat\" rel=\"noopener\">MDN 文档</a>。直接来看一个简单例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getRelativeTime = (num, unit, locale) =&gt; {\r\n    return new Intl.RelativeTimeFormat(locale, { numeric: 'auto' }).format(num, unit)\r\n}\r\n\r\ngetRelativeTime(-3, 'day', 'en-US') // 3 days ago\r\ngetRelativeTime(-1, 'day', 'zh-CN') // 昨天\r\ngetRelativeTime(0, 'second', 'zh-CN') // 现在\r\ngetRelativeTime(3, 'hour', 'ja') // 3 時間後</pre>\n<blockquote><p><code>Intl.RelativeTimeFormat</code> 是一个相对较晚进入标准的对象，因此浏览器支持程度较差，可能需要使用 <a href=\"https://formatjs.io/docs/polyfills/intl-relativetimeformat\" rel=\"noopener\">Polyfill</a>。不过目前（2021.10）主流浏览器的最新版本均已支持此 API。</p></blockquote>\n<h1>未来</h1>\n<p>我希望这篇文章时区转换的部分可以很快过时——这并非无稽之谈，目前（2021.10）TC39 的 <a href=\"https://github.com/tc39/proposal-temporal\" rel=\"noopener\"><code>Temporal</code> 提案</a>已经进入 Stage 3 了。<strong><code>Temporal</code> 提案定义了一个新的、时区友好的 <code>Temporal</code> 命名空间，并期望在不久后就能进入标准并最终应用于生产环境。</strong><code>Temporal</code> 定义了完整的时区、时间段、日历规则的处理，且拥有简单明了的 API。那时候，JavaScript 的时区处理就不会再如此痛苦了。由于目前 <code>Temporal</code> 提案还未进入标准，API 暂未稳定，我们无法将其用于生产环境，但我们可以来看一个简单的例子感受一下这个 API 的强大。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const zonedDateTime = Temporal.ZonedDateTime.from({\r\n  timeZone: 'America/Los_Angeles',\r\n  year: 1995,\r\n  month: 12,\r\n  day: 7,\r\n  hour: 3,\r\n  minute: 24,\r\n  second: 30,\r\n  millisecond: 0,\r\n  microsecond: 3,\r\n  nanosecond: 500,\r\n  calendar: 'iso8601'\r\n}) // 1995-12-07T03:24:30.0000035-08:00[America/Los_Angeles]</pre>\n<p>如果你希望立刻开始使用 <code>Temporal</code>，现在已有 Polyfill 可用。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"js-temporal\" data-mdxgithubp=\"temporal-polyfill\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/js-temporal/temporal-polyfill\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>不过，时区问题不会消失，各地区的习惯也很难融合到一起。时间的国际化处理是<a href=\"https://yourcalendricalfallacyis.com/\" rel=\"noopener\">极其复杂</a>的，前端中的时间国际化仍然值得我们认真关注。</p>\n","link":"https://flyhigher.top/develop/2482.html"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 4分8秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量...</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板...）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/209138/1/18651/50218/622032acEf83a8d68/fc6db86aebb679ff.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。macOS 系统代理的行为和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：...</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/207910/19/18573/59096/622032b0E05c1d4be/5d89d557f7889730.jpg\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"\n<p>WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将其表述为 \"An API for accessing Public Key Credentials\"，即“一个用于访问公钥凭证的 API”。WebAuthn 很强大，强大到被认为是 Web 身份认证的未来（当然，也很复杂）。你有想过通过指纹或者面部识别来登录网站吗？WebAuthn 就能在保证安全和隐私的情况下让这样的想法成为现实。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\" alt=\"通过 WebAuthn 调起 Windows Hello 登录网站\" width=\"1912\" height=\"966\" class=\"aligncenter size-full wp-image-2215\"></a>\n<p>你可以在<a href=\"https://webauthn.io/\" rel=\"noopener\">这个网站</a>自行体验 WebAuthn。或者，如果你有一个使用 WordPress 的站点，可以尝试一下 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WP-WebAuthn</a> 这款插件，它可以为你的站点启用 WebAuthn 登录。这是我为了写这篇文章而练手开发的插件，本文中的部分示例代码也来自这款插件。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"wp-webauthn\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/wp-webauthn\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>WebAuthn Level 1 标准已在 2019 年 3 月成为 W3C 推荐标准，而 Level 2 标准目前也已进入编辑草案阶段，但互联网上有关它的中文资料却仍然很少，国内也鲜有网站支持这一新标准。于是，在抱着各种英文资料和标准啃了几天以后，我折腾出了这篇文章。</p>\n<p>在这篇文章里，我将会从最基本的概念开始，逐渐深入 WebAuthn，直到解码公钥等深层细节。这可能是你能找到的有关 WebAuthn 最详细最基础的中文文章，也很可能是最长的。在开始之前，<strong>我强烈建议你打开菜单中的文章目录浏览一遍，以对这篇文章涉及的内容有所了解。</strong>如果你只是想了解如何简单地在你的项目中添加对 WebAuthn 的支持，那么“<a href=\"https://flyhigher.top/#webauthn-overview\">浅谈 WebAuthn</a>”部分就是你要找的；如果你想了解更多关于 WebAuthn 的底层细节，那么你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分。</p>\n<p>由于在本文写作时 WebAuthn Level 2 规范尚未定稿，<strong>这篇文章我们将只专注于 Level 1 规范。</strong></p>\n<p>这篇文章最后更新于 2020.9 ，在你读到这篇文章时，部分事实可能已经发生改变，请注意判断。</p>\n<p><strong>更新日志：</strong></p>\n<ul>\n<li>2021.1.16 添加 Chrome 开发工具信息</li>\n<li>2020.9.17 更新 iOS/iPad OS 兼容性信息</li>\n<li>2020.5.20 添加部分无用户名认证的平台兼容性内容</li>\n<li>2020.5.15 添加部分 <code>extensions</code> 相关内容与链接；添加全局凭证 ID 唯一内容；添加凭证 ID 查找相关内容；添加“从 U2F 认证迁移”一节</li>\n<li>2020.4.13 更新与修正 <code>userVerification</code> 相关内容；添加部分 Firefox 相关内容</li>\n<li>2020.3.23 文章发布</li>\n</ul>\n<p>那么让我们开始吧。<span></span></p>\n<h1>浅谈 WebAuthn</h1>\n<p>在这个部分里，我们将会从基础概念开始，了解有关 WebAuthn 和密码学的一些基础知识，并最终使用第三方库实现基础的 WebAuthn 认证。如果你已经对这些内容有所了解了，可以跳到“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”继续阅读。</p>\n<h2>为什么使用 WebAuthn</h2>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\" alt=\"钓鱼邮件\" width=\"709\" height=\"693\" class=\"aligncenter size-full wp-image-2162\"></a>\n<p>相信你一定收到过类似的邮件吧？只要你点进那个最显眼的链接，你就会进入一个设置好的圈套——钓鱼网站。如果你一时糊涂在这类网站上填写了你的账号和密码，bingo，你的账号就不再是你的账号了。</p>\n<p>不过，就算你警惕心再强，也无法避免密码泄露事件。Twitter, Facebook 等都爆出过明文密码泄露事件，证明再大的公司或组织也无法避免密码泄露问题。雪上加霜的是，很大一部分用户都非常喜欢使用重复密码，这就导致一次密码泄露会牵连很多网站，用户的账户安全性完全无法得到保证。</p>\n<p>那么，有什么办法解决这些问题吗？<strong>彻底解决的方法只有一个，那就是抛弃密码。</strong>可是没有密码还怎么验证用户身份呢？这就是 WebAuthn 的用武之地了。</p>\n<p><del>没有密码的好时代，来临力！</del></p>\n<h2>什么是 WebAuthn</h2>\n<p>那么到底什么是 WebAuthn 呢？如开头所说，WebAuthn 是“一个用于访问公钥凭证的 API”，网站可以通过这个 API 进行一些高安全性的身份验证。WebAuthn 一个最常见的应用就是用于网站登录时的 2FA（双重因素验证）甚至是无密码登录。通过网页调用 WebAuthn，在不同平台下，<strong>我们可以实现通过 USB Key、指纹、面部甚至虹膜扫描来认证身份，同时确保安全和隐私。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\" alt=\"WebAuthn 可使用的各种身份认证方式\" width=\"1294\" height=\"566\" class=\"aligncenter size-full wp-image-2213\"></a>\n<p>WebAuthn 标准是 FIDO2 标准的一部分，而 FIDO2 则是由 FIDO 联盟和 W3C 共同推出的 U2F（现称作 FIDO1）的后继标准，旨在增强网络认证的安全性。</p>\n<blockquote><p>你可能了解过 U2F，那么 U2F 和 FIDO2 的区别在哪里呢？从名字上可以看出，U2F，即“通用第二因素协议”，是专注于作为密码后的第二道屏障的，而 FIDO2 增加了单因素认证功能，这意味着使用 FIDO2 可以完全替代密码，真正实现无密码登录。</p></blockquote>\n<p>FIDO2 标准主要包括四个部分，其一是用于网站和访客设备交互的 WebAuthn，而 Client to Authenticator Protocol 2（CTAP2，客户端-认证器协议）作为 WebAuthn 的补充，则是用于访客的设备和认证器交互的协议。标准的其他两个部分则是 U2F 和 UAF 规范。在这篇文章中，我们只关心 WebAuthn，不会涉及 CTAP, U2F 和 UAF 的相关知识。如果你对这段话中的一些概念不了解，不要紧张，接下来我们就来谈谈 WebAuthn 中一些常用的术语和概念。</p>\n<blockquote><p>WebAuthn 只能在安全上下文中使用，也就是说，页面需要使用 HTTPS 协议或是处于 <code>localhost</code> 中。</p></blockquote>\n<h2>常用术语和概念</h2>\n<p>WebAuthn 中有许多不常碰到的术语，不过我只会在这里介绍一些常用的术语和概念——如果你只是希望做出一个简单的实现，那么了解这一段中的一些概念就足够了。同时，由于我实在没能找到一部分术语的通用翻译，有一些术语我按着自己的理解尽可能地翻译了，有任何问题请告诉我。</p>\n<p>在一个完整的 WebAuthn 认证流程中，通常有这么几个角色：</p>\n<ul>\n<li>Relying Party 依赖方 (RP) ：指服务提供方，即网站</li>\n<li>User 用户：正准备登录的你</li>\n<li>Authenticator 认证器：通常指 USB Key 或是设备内置的指纹扫描器、虹膜扫描器、面部识别装置等，正是它们在使用流程中代替了密码甚至是用户名</li>\n<li>User Agent 用户代理：通常指浏览器或系统，负责与认证器交互</li>\n</ul>\n<p>认证过程通常分为两种：</p>\n<ul>\n<li>Registration Ceremony 注册仪式：用户向账户上添加认证器</li>\n<li>Authentication Ceremony 验证仪式：用户通过已注册的认证器验证身份</li>\n</ul>\n<p>同时，认证过程中还会产生这些内容：</p>\n<ul>\n<li>Challenge 挑战：通常是一串随机字符串</li>\n<li>Public Key Credential 公钥凭证：由认证器产生的凭证，在技术上代替了密码</li>\n<li>Attestation 证明：注册时认证器产生的验证数据</li>\n<li>Assertion 断言：验证时认证器产生的验证数据</li>\n</ul>\n<blockquote><p><strong>请注意区分证明 (Attestation) 和断言 (Assertion)</strong>，特别是在这两个单词有些相似的情况下。在 WebAuthn 中，它们是不同过程中的类似概念，但并不相同。</p></blockquote>\n<p>如果你对于这些内容不是很理解，没有关系，我们会在“<a href=\"https://flyhigher.top/#how-to-webauthn\">使用流程</a>”一节中将这些概念放到实际情况中解释，你只要先区分这些概念即可。</p>\n<h2>安全性的基础</h2>\n<p>WebAuthn 为什么安全？和 HTTPS 一样，WebAuthn 使用非对称加密的思路来保证安全性，但侧重点又有所不同。要理解 WebAuthn 的认证流程，我们必须对非对称加密有所了解。如果你对非对称加密比较熟悉了，就直接跳到下一段吧。</p>\n<p>WebAuthn 的核心在于“认证”，即保证产生了凭证的认证器是用户的认证器，而不是第三方在伪造凭证。但为什么要使用非对称加密呢？我们可以先来看看对称加密。</p>\n<p>让我们假设小明和小红相互写信，见不到对方。这天小红突然想，给自己写信的人是不是真的小明呢？于是小红要求对方向小红证明自己是小明。怎么证明呢？他们商量出来这么一套方案：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明和小红商量一个统一的密码和密钥</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明用提前和小红商量好的密码和密钥加密文本后发回给小红</li>\n<li>小红使用相同的密码和密钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和密钥</li>\n</ol>\n<blockquote><p>在密码学中，我们通常把“加密算法”称为密码 (code)，和通常登录时用的密码 (password) 并非同一个概念。</p></blockquote>\n<p>在这种情况下，<strong>只要密钥不泄露</strong>，即拥有正确密钥的只有小明和小红，那么小红就能确定对方一定是小明。但这样的问题也很明显，如果小明和小红不能见面，那么他们就必须先以明文交换密码——<strong>在这个过程中一旦有人窃取到了密码，这个认证就无效了。</strong></p>\n<p>这时我们就需要使用<strong>非对称加密</strong>来拯救破碎的信任了。非对称加密的基础是一对密钥，也就是公钥和私钥，它们是互相关联但（几乎）无法互相推导的。在非对称加密的过程中，选择相同的密码后，使用私钥加密明文得到的密文只能由对应的公钥解密，无法使用私钥解密，同时这个过程反过来也是成立的。</p>\n<blockquote><p>本文的核心并不是非对称加密算法，因此不会详述非对称加密在数学上的证明，若有兴趣可以自行了解。</p></blockquote>\n<p>这就完美解决密钥泄露的问题了。让我们回过头来看之前的例子。现在小明和小红决定使用非对称加密来证明身份，过程如下：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明提前生成一对公私钥，将公钥发送给小红，私钥自己保管，同时商量好统一的密码</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明使用商量好的密码和自己的私钥加密文本，发送给小红</li>\n<li>小红使用相同的密码和小明的公钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和私钥</li>\n</ol>\n<p>在这种情况下，<strong>只要私钥不泄露</strong>，那么小红解密得到的文本和之前发送的一致，那么就可以证明收到的密文一定是由小明加密后发送过来的。而在整个过程中，私钥都没有离开过小明，更没有经过传输，也就几乎没有泄露的可能了。这时，小红终于可以确定对面和她通信的人的确是小明了。</p>\n<p>题外话：HTTPS 虽然也应用了非对称加密，但 HTTPS 更侧重于“加密”而非“认证”，因此思路上会有些许差异。要了解关于 HTTPS 和非对称加密的更多信息，你可以阅读我之前写的这篇文章：</p>\n<p></p>\n<div class=\"mdx-post-cot\" data-mdxposturl=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdx-post-wait-out-c2\"><div class=\"mdx-post-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<span></span>\n<h2>使用流程</h2>\n<p>了解了非对称加密，我们就可以来看看 WebAuthn 的认证流程了。</p>\n<p>和普通的密码一样，<strong>使用 WebAuthn 分为两个部分，注册和验证。</strong>注册仪式会在依赖方中将认证器的一些信息和用户建立关联；而验证仪式则是验证这些信息以登确保是用户本人在登录。根据上一节的思路，我们可以知道，注册仪式就是认证器生成一对公私钥，然后将公钥交给依赖方；而验证仪式是依赖方发送给认证器一段文本，要求认证器用自己的私钥加密后发回以验证。</p>\n<p>在实际情况中，WebAuthn 是基于<strong>挑战-应答模型</strong>工作的。要更好地理解，我们直接来看具体流程。先来看看注册的流程。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\" alt=\"WebAuthn 注册流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2224\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的注册请求</li>\n<li>依赖方向浏览器发送挑战、依赖方信息和用户信息</li>\n<li>浏览器向认证器发送挑战、依赖方信息、用户信息和客户端信息以请求创建公钥凭证</li>\n<li>认证器请求用户动作，随后创建一对公私钥，并使用私钥签名挑战（即证明），和公钥一起交给浏览器</li>\n<li>浏览器将签名后的挑战和公钥发送给依赖方</li>\n<li>依赖方用公钥验证挑战是否与发送的一致，如果成功则将公钥与用户绑定，注册完成</li>\n</ol>\n<p>我也做了一个交互式的 Demo，你可以对照流程来更好地理解。</p>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\">开始注册</button> <span></span></p>\n<div></div>\n<blockquote><p>注意，这个 Demo 和下方的 Demo 都只是一个本地模拟的简单示例，没有任何数据会被上传，当然也不会对数据进行验证。</p></blockquote>\n<p>而之后的验证流程如下：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\" alt=\"WebAuthn 验证流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2226\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的验证请求</li>\n<li>依赖方向浏览器发送挑战</li>\n<li>浏览器向认证器发送挑战、依赖方信息和客户端信息以请求获取公钥凭证</li>\n<li>认证器请求用户动作，随后通过依赖方信息找到对应私钥，并使用私钥签名挑战（即断言），交给浏览器</li>\n<li>浏览器将签名后的挑战发送给依赖方</li>\n<li>依赖方用之前存储的公钥验证挑战是否与发送的一致，一致则验证成功</li>\n</ol>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\" disabled>开始验证</button> <span>在上方注册后才能验证</span></p>\n<div></div>\n<p>可以看到，WebAuthn 不仅在理论上是安全的，同时<strong>在整个过程中并没有隐私数据被传输</strong>——用户信息实际上只包含用户名和用户 ID。因此我们完全可以说 WebAuthn 是安全且私密的。</p>\n<blockquote><p>为了避免用户在不同依赖方之间被追踪，认证器通常会为每个依赖方和用户的组合都创建一对公私钥。不过，由于认证器的存储空间有限，认证器通常不会存储每一个私钥，而是会通过各类信息和烧录在认证器内的主密钥“算”出对应的私钥以实现无限对公私钥。具体算法根据不同厂商会有所不同。对于 Yubikey，你可以在<a href=\"https://developers.yubico.com/U2F/Protocol_details/Key_generation.html\">这里</a>了解更多。</p></blockquote>\n<blockquote><p>如果依赖方需要，用户同意后，发送给依赖方的公钥凭证中可以包含用于辨认认证器型号的信息，不过这对隐私的影响微乎其微。</p></blockquote>\n<h2>浏览器接口</h2>\n<p>要使用 WebAuthn，我们必须要依靠浏览器作为媒介和验证器进行交互，而这就需要浏览器对于 WebAuthn 的支持了。绝大多数新版本的现代浏览器都为 WebAuthn 提供了统一的接口，而在这一段中我们会了解如何使用相关的接口。但是在开始之前，我们可以先来看看浏览器的支持程度（2020.9）。</p>\n<div class=\"mdui-table-fluid\"><table class=\"mdui-table\">\n<thead><tr>\n<th>浏览器</th>\n<th>支持情况</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>桌面端 Chrome</td>\n<td>67+</td>\n</tr>\n<tr>\n<td>移动端 Chrome</td>\n<td>67+<sup>[1]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Firefox</td>\n<td>60+</td>\n</tr>\n<tr>\n<td>移动端 Firefox</td>\n<td>不支持<sup>[2]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Edge</td>\n<td>18+</td>\n</tr>\n<tr>\n<td>移动端 Edge</td>\n<td>不支持<sup>[3]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Safari</td>\n<td>13+</td>\n</tr>\n<tr>\n<td>移动端 Safari</td>\n<td>13.3+<sup>[4]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Opera</td>\n<td>54+</td>\n</tr>\n<tr>\n<td>移动端 Opera</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table></div>\n<p><sup>[1]</sup> 受平台限制，Chrome 在 iOS 平台上不支持 WebAuthn，在 Android 平台上支持大部分 WebAuthn 功能，但仍不支持部分特性（如 <code>userVerification</code>）。<br><sup>[2]</sup> 移动端 Firefox 80 以下的版本支持 WebAuthn 但似乎会忽略 <code>authenticatorAttachment</code> 等一部分参数，同时移动端 Firefox Beta 80 以下的版本支持 WebAuthn 但无法成功调用。自 80 版本起移动端 Firefox 暂时取消了对 WebAuthn 的支持（可能是 Bug）。<br><sup>[3]</sup> 移动端 Edge 似乎支持 WebAuthn 但无法成功调用。<br><sup>[4]</sup> Safari iOS/iPad OS 13 仅支持外部认证器，无法调用 Touch ID 或 Face ID；自 iOS/iPad OS 14 起 Safari 已支持全功能 WebAuthn，可以调用 Touch ID/Face ID</p>\n<p>当然，一众国产浏览器，包括 Samsung Browser 和 Yandex Browser，目前都不支持 WebAuthn。此外，由于 WebAuthn 涉及外部验证器和 TPM 可信平台模块等，用户的操作系统也会对 WebAuthn 的可用性造成影响。以下是一些需要注意的信息：</p>\n<ul>\n<li>Windows 10 1903 以下版本仅 Edge 能提供完整支持，其他浏览器只能使用 USB Key 等外部认证器；1903+ 中所有浏览器都可以通过 Windows Hello 带来完整的 WebAuthn 支持</li>\n<li>Android 需要安装并开启 Google 服务</li>\n<li>iOS/iPad OS 13.3 以下的版本不支持 WebAuthn，iOS/iPad OS 14 以下的版本支持有限（参考上文），iOS/iPad OS 14 开始 Safari 已支持全功能 WebAuthn（功能完整度甚至超过了 Android）</li>\n</ul>\n<p>可以看出，WebAuthn 的发展之路仍然很漫长，但好在桌面端对它的支持已经比较完善了，在一些情况下我们完全有理由使用它。</p>\n<hr>\n<p>来看看浏览器提供了怎么样的接口吧。要使用 WebAuthn，我们可以使用 <code>navigator.credentials.create()</code> 请求认证器生成公钥凭证和 <code>navigator.credentials.get()</code> 请求获取公钥凭证。</p>\n<blockquote><p>你或许已经对 Credential Management API 有所了解了。通过这些 API，我们还可以实现一些有趣的特性，不过这值得另开一篇文章来讲了。</p></blockquote>\n<p>对于一个基础的实现，<code>navigator.credentials.create()</code> 需要传入的参数如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        challenge,\r\n        rp: {\r\n            id,\r\n            name\r\n        },\r\n        user: {\r\n            id,\r\n            name,\r\n            displayName\r\n        },\r\n        pubKeyCredParams: [\r\n            {\r\n                type: \"public-key\",\r\n                alg\r\n            }\r\n        ],\r\n        authenticatorSelection: {\r\n            authenticatorAttachment,\r\n            userVerification\r\n        },\r\n        excludeCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>在 <code>navigator.credentials.create()</code> 方法中，我们必须传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值。这指明了我们需要创建公钥凭证，而非普通的密码凭证。然后，在 <code>publicKey</code> 对象中设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rp: Object</code>：依赖方信息，其中有一项为必须：\n<ul>\n<li>\n<code>rp.id: String</code>：（可选）依赖方 ID，必须为当前域名或为当前域名的子集的域名（不是子域名）。如域名为 <code>test.123.example.com</code>，则依赖方 ID 可以是 <code>test.123.example.com</code>, <code>123.example.com</code> 或 <code>example.com</code>。不指定则默认使用当前域名</li>\n<li>\n<code>rp.name: String</code>：依赖方名称，用于方便用户辨认</li>\n</ul>\n</li>\n<li>\n<code>user: Object</code>：用户信息，其中有三项为必须：\n<ul>\n<li>\n<code>user.id: Uint8Array</code>：转换为 <code>Uint8Array</code> 的字符串。<strong>出于安全考量，这应尽可能不与任何用户信息相关联，如不要包含用户名、用户邮箱等</strong>\n</li>\n<li>\n<code>user.name: String</code>：登录用户名</li>\n<li>\n<code>user.dispalyName: String</code>：用于显示的用户名称，显示与否的具体行为取决于浏览器</li>\n</ul>\n</li>\n<li>\n<code>pubKeyCredParams: Array</code>：一个算法列表，指明依赖方接受哪些签名算法。列表的每一项都是一个对象，拥有两个属性：\n<ul>\n<li>\n<code>pubKeyCredParams[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>pubKeyCredParams[].alg: Number</code>：一个负整数，用于标明算法。具体算法对应的数字可以在 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\">COSE</a> 找到</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection: Object</code>：（可选）用于过滤正确的认证器，这里介绍常用的一个参数：\n<ul>\n<li>\n<code>authenticatorSelection.authenticatorAttachment: String</code>：（可选）指定要求的认证器类型。如果没有满足要求的认证器，认证可能会失败。该参数可以为 <code>null</code>（表示接受所有类型的认证器）或是以下两个值之一：\n<ul>\n<li>\n<code>platform</code>：表示仅接受平台内置的、无法移除的认证器，如手机的指纹识别设备</li>\n<li>\n<code>cross-platform</code>：表示仅接受外部认证器，如 USB Key</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection.userVerification: String</code>：（可选）指定认证器是否需要验证“用户为本人 (User Verified, UV)”，否则只须“用户在场 (User Present, UP)”。具体验证过程取决于认证器（不同认证器的认证方法不同，也有认证器不支持用户验证），而对验证结果的处理情况则取决于依赖方。该参数可以为以下三个值之一：\n<ul>\n<li>\n<code>required</code>：依赖方要求用户验证</li>\n<li>\n<code>preferred</code>：（默认）依赖方希望有用户验证，但也接受用户在场的结果</li>\n<li>\n<code>discouraged</code>：依赖方不关心用户验证。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>excludeCredentials: Array</code>：（可选）用于标识要排除的凭证，可以避免同一个用户多次注册同一个认证器。如果用户试图注册相同的认证器，用户代理会抛出 <code>InvalidStateError</code> 错误。数组中的每一项都是一个公钥凭证对象，包含以下属性：\n<ul>\n<li>\n<code>excludeCredentials[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>excludeCredentials[].id: Uint8Array</code>：要排除的凭证 ID</li>\n<li>\n<code>excludeCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，超时后将强制终止 <code>create()</code> 并抛出错误。若不设置，将使用用户代理的默认值；若太大或太小，则使用最接近的用户代理默认值范围中的值。推荐值为 5000-120000</li>\n</ul>\n<blockquote><p>对于 <code>pubKeyCredParams</code>，通常我们只需添加 ES256 (alg: -7) 算法即可兼容大部分外部认证器，此外，再添加 RS256 (alg: -257) 算法即可兼容大部分平台内置认证器（如 Windows Hello）。当然，前端添加算法之后，后端也需要相应的算法支持。</p></blockquote>\n<blockquote><p>对于 <code>userVerification</code>，由于默认值 \"preferred\" 并不能很好地被所有设备支持，因此无论在 <code>create()</code> 中还是 <code>get()</code> 中不指定该参数都会在 Chrome 中触发一条警告。具体请参阅<a href=\"https://chromium.googlesource.com/chromium/src/+/master/content/browser/webauth/uv_preferred.md\">这个页面</a>。</p></blockquote>\n<p>调用 <code>create()</code> 之后，我们就可以拿到一个 <code>Promise</code>，并可以在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>create()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAttestationResponse {\r\n        attestationObject: ArrayBuffer(390) {},\r\n        clientDataJSON: ArrayBuffer(121) {}\r\n    },\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\",\r\n    type: \"public-key\"\r\n}</pre>\n<p>其中有：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 \"public-key\"</li>\n<li>\n<code>response: Object</code>：<code>AuthenticatorAttestationResponse</code> 对象，是 <code>PublicKeyCredential</code> 的主要部分，包含以下两个内容：\n<ul>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n<li>\n<code>response.attestationObject: ArrayBuffer</code>：CBOR 编码的认证器数据，包含凭证公钥、凭证 ID、签名（如果有）、签名计数等信息</li>\n</ul>\n</li>\n</ul>\n<p>然后将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串，我们就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证与注册了。具体怎么操作，我们会在下文详细讨论。当然，别忘了 <code>catch()</code> 注册过程中抛出的任何错误。</p>\n<blockquote><p>你可能会认为在所有情况下，注册时认证器都会对挑战进行签名。实际上在大部分情况下（同时也是默认情况），<strong>注册时认证器并不会对挑战进行签名</strong>，<code>attestationObject</code> 并不会包含签名后的挑战。只有依赖方明确要求证明且用户同意（部分浏览器要求）后认证器才会对挑战进行签名（具体实现据情况会有所不同）。对此，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion#Attestation\">MDN 解释道</a>“大部分情况下，用户注册公钥时我们会使用「初次使用时信任模型」(TOFU) ，此时验证公钥是没有必要的。”要了解更多关于证明的内容，请参阅“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>而对于 <code>navigator.credentials.get()</code>，我们可以传入如下的参数：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.get({\r\n    publicKey: {\r\n        challenge,\r\n        rpId,\r\n        userVerification,\r\n        allowCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>和 <code>create()</code> 一样，对于 <code>get()</code> 我们需要传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值，指明我们需要获取的是公钥凭证而非普通的密码凭证。在 <code>publicKey</code> 对象中我们可以设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rpID: String</code>：（可选）依赖方 ID，需要和注册认证器时的一致。规则和上述的 <code>rp.id</code> 一致，不指定默认使用当前域名</li>\n<li>\n<code>userVerification: String</code>：和上文一样，只是需要注意它这次不在 <code>authenticatorSelection</code> 中了</li>\n<li>\n<code>allowCredentials: Array</code>：（可选）用于标识允许的凭证 ID，使用户代理找到正确的认证器。只有符合这个列表中凭证 ID 的凭证才能被成功返回。数组中的每一项都是对象，包含以下属性：\n<ul>\n<li>\n<code>allowCredentials[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>allowCredentials[].id: Uint8Array</code>：允许的凭证 ID</li>\n<li>\n<code>allowCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，和上面的一样，推荐值为 5000-120000</li>\n</ul>\n<p>嗯，要传入的参数少多了。之后，和 <code>create()</code> 一样，调用 <code>get()</code> 之后，我们就可以拿到一个 <code>Promise</code> 并在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>get()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAssertionResponse {\r\n        authenticatorData: ArrayBuffer(37) {},\r\n        signature: ArrayBuffer(256) {},\r\n        userHandle: ArrayBuffer(64) {},\r\n        clientDataJSON: ArrayBuffer(118) {}\r\n    }\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\"\r\n    type: \"public-key\"\r\n}</pre>\n<p>这里的东西就比 <code>create()</code> 时拿到的要多了。看看我们拿到了什么吧：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 \"public-key\"</li>\n<li>\n<code>response: Object</code>：对于验证流程，认证会返回 <code>AuthenticatorAssertionResponse</code> 而不是 <code>AuthenticatorAttestationResponse</code> 对象，这个对象包含以下 4 个属性：\n<ul>\n<li>\n<code>response.authenticatorData: ArrayBuffer</code>：认证器信息，包含认证状态、签名计数等</li>\n<li>\n<code>response.signature: ArrayBuffer</code>：被认证器签名的 <code>authenticatorData</code> + <code>clientDataHash</code>（<code>clientDataJSON</code> 的 SHA-256 hash）</li>\n<li>\n<code>response.userHandle: ArrayBuffer</code>：<code>create()</code> 创建凭证时的用户 ID <code>user.id</code>。许多 U2F 设备不支持这一特性，这一项将会是 <code>null</code>\n</li>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n</ul>\n</li>\n</ul>\n<p>同样地，我们将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串后就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证了。至于具体怎么做，别急，马上就来讲一讲。</p>\n<h2>简单实现</h2>\n<p>了这么多，我们终于可以实现一个简单的 WebAuthn 认证页面了。由于在实际操作中 WebAuthn 相关的数据解码和密码计算比较复杂，在服务器端我们可以使用第三方库来帮我们做这些脏活累活，我们只需专注于具体流程就可以了。</p>\n<p>要寻找可用的第三方库，你可以在 <a href=\"https://webauthn.io/\">webauthn.io</a> 上找到适用于各种语言的第三方库——除了 PHP（笑）。不过好在你可以在 GitHub 上找到几个不错的 PHP WebAuthn 库，比如 <a href=\"https://github.com/web-auth/webauthn-framework\">web-auth/webauthn-framework</a>。</p>\n<p>在我们的这个例子中，我们关心的主要是前端逻辑；而后端我们可以使用各类几乎已经做到开箱即用的第三方库，这样我们可以专注于流程而不必关心细节。当然如果你想了解后端的解码细节，可以阅读“<a href=\"https://flyhigher.top/#webauthn-decode\">手动解个码</a>”一节。</p>\n<hr>\n<p>让我们先从注册开始吧。现在，用户点击了注册认证器的按钮，一个请求被发送给服务器（也就是依赖方）。在最简单的情况中，依赖方需要将三个内容发送给浏览器：<strong>挑战、用户信息和用户已注册的凭证 ID 列表（即 <code>excludeCredentials</code>）</strong>。当然依赖方也可以自由选择发送更多信息，只要最终前端能构建合法的参数即可。</p>\n<p>挑战最终会被转换为 <code>Uint8Array</code>，即一组 0-255 的整数。如果使用 PHP，在后端我们可以这样生成 Base64 编码的挑战：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$challenge = \"\";\r\nfor($i = 0; $i \n<p>对于用户信息，我们需要登录名、显示名称和 ID 三项内容。我们可以从数据库中取出用户信息，也可以新建一份。需要注意的是，<strong>出于安全和隐私的考量，ID 不应该包含用户的任何信息，比如用户邮箱等。</strong>推荐的做法是和挑战一样，生成一个随机字符串/一组随机数，并将其于用户关联起来以供之后使用。</p>\n<p>发送已注册的凭证 ID 列表是为了防止用户重复注册同一个认证器。正确设置该列表后，如果用户试图注册同一个认证器，浏览器会中止流程并抛出 <code>InvalidStateError</code>。</p>\n<p>最后，别忘了将挑战等一些后续可能会用到的信息临时存储起来。Session 就是一个很好的选择。</p>\n<p>将所有信息发送到浏览器之后，我们应该可以构建出新建凭证所需的参数了。由于有多个参数需要以 <code>Uint8Array</code> 的形式传入，我们可以准备一个简单的工具函数帮我们将 Base64 的字符串转为 <code>Uint8Array</code>。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function str2ab(str){\r\n    return Uint8Array.from(window.atob(str), c=&gt;c.charCodeAt(0));\r\n}</pre>\n<p>除了 <code>challenge</code>, <code>rp</code>, <code>user</code> 和 <code>excludeCredentials</code> 几部分需要你根据具体情况设置外，上文提到的其他参数一般可以这么设置：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">publicKey: {\r\n    challenge, // 自行设置\r\n    rp, // 自行设置\r\n    user, // 自行设置\r\n    pubKeyCredParams: [\r\n        {\r\n            type: \"public-key\",\r\n            alg: -7 // ES256\r\n        },\r\n        {\r\n            type: \"public-key\",\r\n            alg: -257 // RS256\r\n        }\r\n    ],\r\n    authenticatorSelection: {\r\n        userVerification: \"discouraged\",\r\n        authenticatorAttachment: null // 除非用户指定，大部分情况下无需指定\r\n    },\r\n    excludeCredentials, // 自行设置\r\n    timeout: 60000\r\n}</pre>\n<p>然后就是传入 <code>navigator.credentials.create()</code>，拿到 <code>PublicKeyCredential</code>。如果一切顺利，接下来我们就需要考虑如何将返回的内容传回依赖方了。由于我们拿到的很多都是 <code>ArrayBuffer</code>，我们需要将其进行编码。再准备一个工具函数吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function array2b64String(a) {\r\n    return window.btoa(String.fromCharCode(...a));\r\n}</pre>\n<p>然后适当处理，我们就可以得到一个方便传输的 JSON 字符串了：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({publicKey}).then((credentialInfo) =&gt; {\r\n    const publicKeyCredential = {\r\n        id: credentialInfo.id,\r\n        type: credentialInfo.type,\r\n        rawId: array2b64String(new Uint8Array(credentialInfo.rawId)),\r\n        response: {\r\n            clientDataJSON: array2b64String(new Uint8Array(credentialInfo.response.clientDataJSON)),\r\n            attestationObject: array2b64String(new Uint8Array(credentialInfo.response.attestationObject))\r\n        }\r\n    };\r\n    return publicKeyCredential;\r\n}).then(JSON.stringify).then((authenticatorResponseJSON) =&gt; {\r\n    // 可以发送了\r\n}).catch((error) =&gt; {\r\n    console.warn(error); // 捕获错误\r\n})</pre>\n<p>依赖方收到数据以后，还需要做三件事：验证挑战、存储凭证 ID 和存储公钥。如果数据解码顺利，且收到的挑战和之前发送的一致，就可以认为注册成功，将凭证 ID 及公钥与用户关联起来。这一步有很多第三方库可以帮我们做，对于基础实现我们就不深入探究了。</p>\n<blockquote><p>由于不同厂商的认证器的实现方式不同，<strong>我们并不能保证凭证 ID 一定是全局唯一的</strong>，也就是说，凭证 ID 有可能碰撞——即使这些凭证实际上是不同的。依赖方在实现凭证 ID 的存储及查找时，需要注意和用户 ID 结合进行存储或查找，或是直接在注册认证器时在服务器端对比阻止相同的凭证 ID。</p></blockquote>\n<hr><p>接下来就可以进行验证了。某天，用户点击了验证按钮准备登录，于是浏览器发送了验证请求到依赖方，同时附上要登录的用户名。接下来依赖方至少需要发送两项内容给浏览器：<strong>挑战和用户已绑定的凭证 ID 列表（即 <code>allowCredentials</code>）。</strong></p>\n<p>之后前端的处理流程就和注册时基本一致了。只是需要注意验证流程中获取到的 <code>PublicKeyCredential</code> 的结构和注册时的稍有不同。</p>\n<p>当浏览器将数据传回后，依赖方需要做的事情就比之前要麻烦一些了。依赖方需要验证挑战，并用之前存储的公钥验证签名和签名计数。同样地，这一步有很多第三方库可以帮我们做。最后，如果验证全部通过，我们就可以允许用户登录了。</p>\n<p>到目前为止，我们已经实现了一个简单的 WebAuthn 验证服务。不过这只是一个最基础的实现，对于很多高安全要求的身份认证这是远远不够的。因此，我们需要摆脱对第三方库的依赖，深入了解 WebAuthn。你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分，不过对于基础的 WebAuthn 实现，我们的旅程就到这里了。</p>\n<h2>拓展阅读</h2>\n<p>如果你的目标只是快速了解如何开发 WebAuthn，那么你阅读到这里就可以了。同时，上一节例子中的部分代码来自于我为了这篇文章开发的 WordPress 插件 WP-WebAuthn，这个插件可以为你的 WordPress 启用 WebAuthn 无密码登录（并非二步验证），你可以查阅插件的 <a href=\"https://github.com/yrccondor/wp-webauthn\">GitHub 存储库</a>了解更多，也可以自己安装试一试。</p>\n<p>如果你正在使用 Chrome 开发，Chrome 87+ 版本添加了一个 WebAuthn 开发者面板，可以帮助你在没有任何实体验证器的情况下开发 WebAuthn 功能。你可以在 Google 的<a href=\"https://developers.google.com/web/tools/chrome-devtools/webauthn\">这篇文章</a>中了解更多。不够，如果你正在使用 Firefox，很遗憾目前我还没有找到对应的开发工具或是浏览器扩展可用。</p>\n<p>如果你希望了解更多关于非对称加密的数学证明，可以查阅阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">这篇文章</a>。</p>\n<p>如果你希望了解更多关于 Credential Management API 的信息，可以查阅<a href=\"https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe\">这篇文章</a>（英文）。</p>\n<p>如果你希望了解更多 WebAuthn 的细节，可以继续往下阅读。<span></span></p>\n<h1>深入了解 WebAuthn</h1>\n<p>如上文所说，如果摆脱对第三方库的依赖，或是要实现更安全的 WebAuthn，我们必须深入了解 WebAuthn。在这一部分中，我们会详细讨论上文没有提到的一些概念和参数，并了解 WebAuthn 中各类数据的结构以实现解码与验证。先来看一看一些进阶的选项吧。</p>\n<h2>进阶选项</h2>\n<p>没错，上文提到的传入 <code>navigator.credentials.create()</code> 和 <code>navigator.credentials.get()</code> 方法的参数其实只是所有参数的一部分。对于 <code>create()</code>，我们还可以配置这些可选内容（上文提及的已省略）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        rp: {\r\n            icon\r\n        },\r\n        user: {\r\n            icon\r\n        },\r\n        attestation,\r\n        authenticatorSelection: {\r\n            requireResidentKey\r\n        },\r\n        extensions\r\n    }\r\n})</pre>\n</pre>\n<ul>\n<li>\n<code>rp.icon: String</code> 和 <code>user.icon</code>：是的，你可以为依赖方和用户设置图标，可以使用 HTTPS URL 或 Base64，一般长度不能超过 128 字节，不过大部分浏览器不会显示图标，或是有非常小的图片体积限制，所以一般没有使用这一属性的必要</li>\n<li>\n<code>attestation: String</code>：表明依赖方是否需要证明。可选三个值：\n<ul>\n<li>\n<code>none</code>：（默认）不需要证明。如上文所述，依赖方不关心证明，因此认证器不会签名。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n<li>\n<code>indirect</code>：依赖方需要证明，但证明方式可由认证器选择。在支持匿名证明的认证器上，认证器会通过匿名证明的方式签名挑战，并向依赖方提供签名方式等信息</li>\n<li>\n<code>direct</code>：依赖方要求直接证明。此时认证器会使用烧录在认证器中的公钥进行签名，同时向依赖方提供签名方式等信息以供依赖方验证认证器是否可信。更多信息可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节</li>\n</ul>\n</li>\n<li>在 <code>authenticatorSelection</code> 中，我们还可以设置两个可选属性：\n<ul>\n<li>\n<code>authenticatorSelection.requireResidentKey: Boolean</code>：是否要求将私钥钥永久存储于认证器中。默认值为 <code>false</code>。对于 iOS/iPad OS 13，必须设置为 <code>false</code>，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n<li>\n<code>extensions: Object</code>：WebAuthn 扩展，可以提供规范之外的配置和响应。由于实际情况中很少会使用这一特性，我们不会在这篇文章中讨论它</li>\n\n<blockquote><p>将 <code>requireResidentKey</code> 设置为 <code>true</code> 可以实现无用户名的登录，即认证器同时替代了用户名和密码。需要注意的是，尽管大部分认证器可以实现无限对公私钥，<strong>但能永久存储的私钥数量是有限的</strong>（对于 Yubikey，这通常是 25），因此只应在真正需要的时候启用此特性。我们会在“<a href=\"https://flyhigher.top/#login-without-username\">无用户名登录</a>”一节中详细讨论原因。</p></blockquote>\n<blockquote><p><strong>如果你没有高安全需求（如银行交易等），请不要向认证器索取证明</strong>，即将 <code>attestation</code> 设置为 \"none\"。对于普通身份认证来说，要求证明不必要的，且会有浏览器提示打扰到用户。</p></blockquote>\n<blockquote><p>Android 暂时无法实施用户验证，进而会导致依赖方验证失败。你可以在<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=997538\">这里</a>追踪这个特性的实现情况。</p></blockquote>\n<blockquote>\n<p>对于 <code>extensions</code>，由于目前浏览器支持和应用范围有限，我们不会在这篇文章中涉及，不过你可以看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    uvm: true, // 要求认证器返回用户进行验证的方法\r\n    txAuthSimple: \"Please proceed\" // 在认证器上显示与交易有关的简短消息\r\n}</pre>\n<p>你可以在<a href=\"https://www.w3.org/2019/01/webauthn-extensions.html\">这个页面</a>了解更多关于 <code>extensions</code> 的信息。</p>\n</blockquote>\n<p>对于 <code>get()</code>，我们其实只有一个可选内容没讲了，即 <code>extensions</code>。和上文一样，我们不会在这篇文章中讨论它。</p>\n<p>就这些了！<span></span></p>\n<h2>手动解个码</h2>\n<p>是时候看看如何手动解码了。我们将会在这一节中讨论认证器返回的数据的结构以及如何正确地解码它们。</p>\n<p>首先我们来看看如何处理注册过程中认证器发回的数据。假设所有 <code>ArrayBuffer</code> 类型的值都被正确地以 Base64 编码，且后端已经将 JSON 的字符串解析为字典。先来复习一下，我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"ZRBkDBCEtq...9XY8atOcbg\",\r\n    type: \"public-key\",\r\n    rawId: \"ZRBkDBCEtq...9XY8atOcbg==\",\r\n    response: {\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...i5jcmVhdGUifQ==\",\r\n        attestationObject: \"o2NmbXRkbm9uZWd...xNHuAMzz2LxZA==\"\r\n    }\r\n}</pre>\n<p>这里的 <code>id</code> 就是凭证的 ID，如果验证正确，我们最终要将它存储起来并于用户关联。同时可以看到 Base64 编码后的 <code>rawId</code> 其实和 <code>id</code> 是一致的（不过 <code>id</code> 是 Base64URL 编码的）。而 <code>type</code> 则一定是 \"public-key\"。</p>\n<p>不过，我们主要关心的还是 <code>respose</code> 中的两项内容。首先是 <code>clientDataJSON</code>。它的处理比较简单，看名字就知道，它应该是一个 JSON 字符串。</p>\n<blockquote><p>小技巧：如果你看到一个 Base64 编码的字符串以 \"ey\" 开头，那么它大概率是一个 Base64 编码的 JSON。</p></blockquote>\n<p>将<code>clientDataJSON</code> Base64 解码再 JSON 解码之后我们就能得到一个字典：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"NI4i1vsNmP2KHcmyFnBCKRVQPfHgg34SsYZUOPZY2lM\",\r\n    extra_keys_may_be_added_here: \"do not compare clientDataJSON against a template. See https://goo.gl/yabPex\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>结构一目了然。在这里，我们需要验证三项内容：</p>\n<ul>\n<li>\n<code>challenge</code> 和之前发送的一致</li>\n<li>\n<code>origin</code> 为创建凭证的页面的源（协议+主机名+端口号，并非 URL）</li>\n<li>\n<code>type</code> 为 \"webauthn.create\"</li>\n</ul>\n<p>同时可以注意到有一个奇怪的 <code>extra_keys_may_be_added_here</code>。这其实是 Google 在 Chrome 中搞的一点小把戏，有一定概率会出现，提醒我们需要将 JSON 解析后再验证键值以防额外插入的键值影响验证。具体信息你可以访问那个 URL 看一看。</p>\n<p>对于 Firefox，我们会多得到两项 <code>clientExtensions</code> 和 <code>hashAlgorithm</code> ，分别指明了客户端扩展数据和签名算法。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"3-4\">{\r\n    challenge: \"dg6ost6ujhAA0g6WqLe-SOOH-tbhvjW9Sp90aPKlLJI\",\r\n    clientExtensions: {},\r\n    hashAlgorithm: \"SHA-256\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>由于本文不考虑扩展数据，因此我们可以不考虑 <code>clientExtensions</code>。同时由于目前规范中指定的签名算法只有 SHA-256 一种，因此现阶段我们也可以简单地忽略 <code>hashAlgorithm</code>。</p>\n<p><code>clientDataJSON</code> 很简单地就处理完了。接下来我们要来看看 <code>attestationObject</code>。先来看看 <code>attestationObject</code> 的结构图示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\" alt=\"attestationObject 的结构\" width=\"1056\" height=\"532\" class=\"aligncenter size-full wp-image-2245\"></a>\n<p><code>attestationObject</code> 是 CBOR 编码后再被 Base64 编码的，因此我们需要额外对其进行 CBOR 解码。</p>\n<blockquote><p>CBOR (Concise Binary Object Representation, 简明二进制对象表示) 是一种多应用于物联网领域的编码方式，你可以将它看作体积更小、更方便物联网传输的二进制 JSON。大部分语言都可以找到对应的 CBOR 解码库。</p></blockquote>\n<p>我们当然不会手解 CBOR，直接来看看解开之后的样子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"none\",\r\n    attStmt: {},\r\n    authData: [211, 217, 43, 24, 199, ..., 97, 238, 166, 67, 107]\r\n}</pre>\n<p>这些键值的含义如下：</p>\n<ul>\n<li>\n<code>fmt</code>：标明证明的格式。WebAuthn 预定义了几种格式，分别为：\n<ul>\n<li>\n<code>none</code>：没有证明</li>\n<li>\n<code>packed</code>：为 WebAuthn 优化的证明格式</li>\n<li>\n<code>android-safetynet</code>：Android 使用的格式</li>\n<li>\n<code>android-key</code>：又是 Android 使用的格式</li>\n<li>\n<code>fido-u2f</code>：FIDO U2F 认证器使用的格式</li>\n<li>\n<code>tpm</code>：TPM 可信平台模块使用的格式</li>\n</ul>\n</li>\n<li>\n<code>attStmt</code>：证明对象，具体格式根据 <code>fmt</code> 的不同会有所不同</li>\n<li>\n<code>authData</code>：包含公钥、签名计数等来自认证器的数据</li>\n</ul>\n<p>诶，例子里的 <code>attStmt</code> 怎么是空的？还记得之前说的吗？大部分情况下，<strong>如果依赖方不要求证明，那么认证器不会签名挑战</strong>，于是 <code>fmt</code> 会变为 \"none\"，<code>attstmt</code> 会为空。如果不是高安全要求，我们可以只对这一种情况做支持。</p>\n<blockquote><p>注意，部分情况下 Firefox 会在不要求证明（即 <code>attestation</code> 为 \"none\"）时会返回 <code>fmt</code> 为 \"packed\" 的证明。<strong>这是符合规范的。</strong>此时认证器会进行自证明，你可以视情况进行处理。具体可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>对于非 \"none\" 的 <code>fmt</code> 我们稍后再谈，现在我们先来看看 <code>authData</code>。来复习一下 <code>authData</code> 的结构：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\" alt=\"authData 的结构\" width=\"1056\" height=\"384\" class=\"aligncenter size-full wp-image-2240\"></a>\n<p>对于它的解码比较简单粗暴，我们要做的就是根据图示将它切开，然后适当地转换类型。其中各部分的含义如下：</p>\n<ul>\n<li>\n<code>rpIdHash</code>：如其名，SHA-256 的 <code>rpId</code>，长度 32 字节</li>\n<li>\n<code>flags</code>：标识认证状态，长度 1 字节。其中 8 位分别为：\n<ul>\n<li>\n<code>ED</code>：是否有扩展数据</li>\n<li>\n<code>AT</code>：是否包含 <code>attestedCredentialData</code>。通常注册认证器时会包含 <code>attestedCredentialData</code>，而验证时不包含</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>\n<code>UV</code>：用户是否已验证</li>\n<li>保留位</li>\n<li>\n<code>UP</code>：用户是否在场</li>\n</ul>\n</li>\n<li>\n<code>signCount</code>：签名计数，长度 4 字节</li>\n<li>\n<code>attestedCredentialData</code>：包含公钥等凭据数据，变长。其结构如下：\n<ul>\n<li>\n<code>aaguid</code>：认证器的 AAGUID (Authenticator Attestation GUID)，对于同一型号的认证器，它们的 AAGUID 是相同的</li>\n<li>\n<code>credentialIdLength</code>：标识 <code>credentialId</code> 的长度，长度 2 字节</li>\n<li>\n<code>credentialId</code>：凭证 ID，和 <code>rawId</code> 一致，长度由 <code>credentialIdLength</code> 定义</li>\n<li>\n<code>credentialPublicKey</code>：CBOR 编码的 COSE 格式的凭证公钥，变长</li>\n</ul>\n</li>\n<li>\n<code>extensions</code>：扩展数据，变长，本文不讨论</li>\n</ul>\n<blockquote><p>出于隐私考虑，如果不要求证明，认证器会以 0 填充 AAGUID。</p></blockquote>\n<p>如果你的后端在使用 Node.js，这里有个工具函数可以帮你完成这一步（不考虑 <code>extensions</code>）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function parseAuthData(buffer){\r\n    let rpIdHash = buffer.slice(0, 32);\r\n    buffer = buffer.slice(32);\r\n  \r\n    let flagsBuf = buffer.slice(0, 1);\r\n    buffer = buffer.slice(1);\r\n\r\n    let flagsInt = flagsBuf[0];\r\n    let flags = {\r\n        up: !!(flagsInt &amp; 0x01),\r\n        uv: !!(flagsInt &amp; 0x04),\r\n        at: !!(flagsInt &amp; 0x40),\r\n        ed: !!(flagsInt &amp; 0x80),\r\n        flagsInt\r\n    }\r\n\r\n    let counterBuf = buffer.slice(0, 4);\r\n    buffer = buffer.slice(4);\r\n  \r\n    let counter = counterBuf.readUInt32BE(0);\r\n\r\n    let aaguid = undefined;\r\n    let credID = undefined;\r\n    let COSEPublicKey = undefined;\r\n\r\n    if(flags.at) {\r\n        aaguid = buffer.slice(0, 16);\r\n        buffer = buffer.slice(16);\r\n\r\n        let credIDLenBuf = buffer.slice(0, 2);\r\n        buffer = buffer.slice(2);\r\n\r\n        let credIDLen = credIDLenBuf.readUInt16BE(0);\r\n        credID = buffer.slice(0, credIDLen);\r\n\r\n        buffer = buffer.slice(credIDLen);\r\n        COSEPublicKey = buffer;\r\n    }\r\n\r\n    return {rpIdHash, flagsBuf, flags, counter, counterBuf, aaguid, credID, COSEPublicKey}\r\n}</pre>\n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>解开后，依赖方至少需要做四件事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>存储签名计数</li>\n<li>存储公钥</li>\n</ol>\n<blockquote><p>签名计数不一定从 0 开始。</p></blockquote>\n<p>对于公钥，也就是 <code>credentialPublicKey</code>，我们需要多一次 CBOR 解码，然后就可以得到类似这样的公钥：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    kty: \"EC\",\r\n    alg: \"ECDSA_w_SHA256\",\r\n    crv: \"P-256\",\r\n    x: \"ZGQALNfqo0L7HFYQHFHCS/X5db49z0ePnuQEs3w3X8w=\",\r\n    y: \"6qYxhnjYuez/Q8N6vX7nIIGfxFWdZ25NzQfZYuYOalA=\"\r\n}</pre>\n<p>然后可以选择适当的方法将其存储起来，之后的步骤本文就不再赘述了。现在，将目光拉回来，让我们看看包含证明的 <code>attestationObject</code> 是怎么样的。我们来看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"packed\",\r\n    attStmt: {\r\n        alg: -7,\r\n        sig: [48, 70, 2, 33, 0, ..., 132, 78, 46, 100, 21],\r\n        x5c: [\r\n            [48, 130, 2, 189, 48, 130, 1, 165, 160, 3, ..., 177, 48, 125, 191, 145, 24, 225, 169, 41, 248]\r\n        ]\r\n    },\r\n    authData: [211, 217, 43, 24, 199, ..., 158, 54, 87, 126, 54]\r\n}</pre>\n<p>这里有一个使用 \"packed\" 格式的证明。此时，<code>attStmt</code> 中包含三个值：</p>\n<ul>\n<li>\n<code>alg</code>：签名算法</li>\n<li>\n<code>sig</code>：签名值</li>\n<li>\n<code>x5c</code>：X.509 编码的证书链</li>\n</ul>\n<p>我们不会在这一节中详述对签名的验证。要了解更多信息，你可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。现在，让我们来看看如何处理验证过程中认证器发回的数据。我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"hmqdxPLit9...BWeVxZqdvU\",\r\n    type: \"public-key\",\r\n    rawId: \"hmqdxPLit9V...BWeVxZqdvU=\",\r\n    response: {\r\n        authenticatorData: \"09krGMcWTf...UFAAAABA==\",\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...XRobi5nZXQifQ==\",\r\n        signature: \"UsXZV3pvT3np8btj6V0g...WBkaqyt88DrD40qh+A==\",\r\n        userHandle: \"MmYxNWYzZjQyZjM...Tg2ZDY4NzhlNw==\"\r\n    }\r\n}</pre>\n<p><code>id</code>, <code>rawId</code> 和 <code>type</code> 和之前一样，这里就不再赘述了。让我们来看看 <code>response</code>。首先是 <code>clientDataJSON</code>，和之前的解法一样，要验证的内容也一样，只是 <code>type</code> 从 \"webauthn.create\" 变成了 \"webauthn.get\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"bnkd2CmrEuvKnAFXs2QlC3SKlg4XFvGtP4HJL1yEWyU\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.get\"\r\n}</pre>\n<p>然后是 <code>userHandle</code>。前面讲过，这是认证器在创建凭证时的用户 ID。如果用户在使用 U2F 认证器，很可能这一项为空，所以大部分情况下我们不关心这一项。</p>\n<p>接着来看 <code>authenticatorData</code>。这其实就是之前的 <code>attestedCredentialData</code>，只是这次不包含公钥。以相同的方式切开数据，我们应该可以得到 <code>rpIdHash</code>, <code>flags</code>和 <code>signCount</code> 三项。此时，依赖方至少需要做这三样事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>验证签名计数大于之前存储的计数，并更新存储的计数</li>\n</ol>\n<blockquote><p>如果签名计数比之前的小，那么这个认证器很可能是伪造的，应该中止验证并返回验证失败。同时，签名计数不一定每次按 1 递增，通常只要计数比此前的大就认为计数检查通过。</p></blockquote>\n<p>最后，我们来看 <code>signature</code>，也就是签名。不过这个签名不是简单的对挑战的签名，具体算法如图所示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\" alt=\"签名过程\" width=\"1034\" height=\"587\" class=\"aligncenter size-full wp-image-2231\"></a>\n<p>计算签名时，认证器会将 <code>authenticatorData</code> 与 <code>clientDataHash</code>（也就是 <code>clientDataJSON</code> 的 SHA-256 Hash）拼接起来，并使用对应的私钥签名。依赖方应该使用对应的公钥将其解密，并验证内容是否是 <code>authenticatorData</code> 与 <code>clientDataHash</code> 的拼接。这部分的计算不在本文的讨论范围内。</p>\n<p>最后，如果全部验证通过，返回验证成功。<span></span></p>\n<h2>验证认证器</h2>\n<p>WebAuthn 已经很安全了，但有的时候我们还要让它更安全一点。比如，如果用户在使用伪造的或是自制的认证器，认证器的安全性就得不到保证。此时，依赖方就需要验证认证器是否是可信的认证器。</p>\n<blockquote><p>这一过程仅发生在注册认证器时。此时，如果认证器验证通过，就可以存储公钥，后续步骤和之前描述的一致。</p></blockquote>\n<blockquote><p>再次说明，如果不是对安全性有极高的要求，向认证器索取证明以验证认证器是否可信是没有必要的。此外，验证认证器需要依赖方自行维护可信认证器列表，大大增加了维护的复杂性。</p></blockquote>\n<p>在调用 <code>navigator.credentials.create()</code> 时，我们可以将 <code>attestation</code> 设置为非 \"none\" 来向认证器索取证明。除无证明外，WebAuthn 定义了四种证明方式：</p>\n<ul>\n<li>Basic Attestation (Basic) ：基础的证明方式，认证器会使用认证器私钥签名</li>\n<li>Self Attestation (Self) ：自证明，认证器会使用凭证私钥签名</li>\n<li>Attestation CA (AttCA) ：认证器会使用多个证明私钥之一签名</li>\n<li>Elliptic Curve based Direct Anonymous Attestation (ECDAA) ：通过 <a href=\"https://en.wikipedia.org/wiki/Direct_Anonymous_Attestation\">DAA</a> 实现的匿名证明</li>\n</ul>\n<blockquote><p>和验证过程一样，这里签名的目标是 <code>authenticatorData</code> 和 <code>clientDataHash</code> 的连接。</p></blockquote>\n<p>还记得 <code>create()</code> 时 <code>attestation</code> 可选的三个值吗？这个值会决定认证器最终使用哪种方式进行证明。复习一下：</p>\n<ul>\n<li>\n<code>none</code>：大部分情况下认证器会选择不进行证明，部分认证器会进行自证明。此时 AAGUID 会被 0 填充</li>\n<li>\n<code>indirect</code>：认证器会试图通过替换 AAGUID 和选择合适的证明方式来进行匿名证明，具体方式由认证器选择</li>\n<li>\n<code>direct</code>：认证器会提供最直接的证明信息</li>\n</ul>\n<p>注意，大部分情况下，当认证器需要向依赖方证明自己可信时需要提供认证器公钥，<strong>这会触发浏览器提示，只有用户同意后认证器才会进行证明，否则认证器将不提供证明。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\" alt=\"浏览器提示\" width=\"446\" height=\"283\" class=\"aligncenter size-full wp-image-2217\"></a>\n<blockquote><p>为什么浏览器会说“安全密钥的品牌和型号”？事实上，为了避免用户通过认证器证书被跨依赖方追踪，FIDO 要求使用相同认证器证书的认证器的数量不能少于 100,000。于是大部分认证器厂商会选择<strong>让同一型号的认证器共用同一份证书。</strong>因此，浏览器的会询问用户是否同意“查看安全密钥的品牌和型号”。</p></blockquote>\n<blockquote><p>Android Safety Net 不会向用户询问是否同意，而是会静默进行证明。</p></blockquote>\n<p>当证明不为空时，依赖方收到数据后根据 <code>attestationObject.fmt</code> 的不同，需要选择不同的验证方式来验证认证器的可信情况。出于篇幅原因，这里我们不会讨论每一种 <code>fmt</code> 的验证方式，更多信息你可以查阅 <a href=\"https://www.w3.org/TR/webauthn/#defined-attestation-formats\">W3C 文档</a>。</p>\n<p>当 <code>fmt</code> 为 <code>packed</code> 时，<code>attestationObject.attStmt</code> 可能会有三种格式：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">// 自证明\r\n{\r\n    alg, // 算法\r\n    sig // 签名\r\n}\r\n// 基础或证明 CA 证明\r\n{\r\n    alg,\r\n    sig,\r\n    x5c // X.509 证书链\r\n}\r\n// 椭圆曲线证明\r\n{\r\n    alg,\r\n    sig,\r\n    ecdaaKeyId // ECDAA-Issuer 公钥标识符\r\n}</pre>\n<p>此时，依赖方需要检查证书符合预期格式并检查证书是否在可信链上。首先，如果证明中既没有 <code>ecdaaKeyId</code> 也没有 <code>x5c</code>，就说明这个证明使用的是自证明，只需使用认证器提供的公钥验证即可；如果有 <code>x5c</code>，那么就需要验证 <code>x5c</code> 中的证书是否在可信链上。将 <code>x5c</code> 中的每个证书以 Base64 编码，按 64 个字符切开，并在头尾加上 <code>-----BEGIN CERTIFICATE-----</code> 和 <code>-----END CERTIFICATE-----</code>就能得到一个证书字符串了。之后，依赖方需要验证证书是否可信。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function base64ToPem(b64cert){\r\n    let pemcert = '';\r\n    for(let i = 0; i \n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>至于 <code>ecdaaKeyId</code>，由于目前应用较少，处理方法可能需要你另寻资料了。检查证书的具体步骤已经超出了本文的范围，具体可以查阅<a href=\"https://medium.com/@herrjemand/verifying-fido2-packed-attestation-a067a9b2facd\">这篇文章</a>（英文）。</p>\n<blockquote><p>你可以在 <a href=\"https://fidoalliance.org/metadata/\">FIDO Metadata Service</a> 找到各大厂商认证器的可信证书链。</p></blockquote>\n<p>当在 Android 上调起 WebAuthn 时，大部分情况下 <code>fmt</code> 将会为 <code>safety-net</code>。此时 <code>attestationObject.attStmt</code> 的结构会是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    ver: \"200616037\",\r\n    response: {\r\n        type: \"Buffer\",\r\n        data: [101, 121, 74, 104, 98, ..., 115, 104, 104, 82, 65]\r\n    }\r\n}</pre>\n<p>此时，<code>clientDataJSON</code> 中还会出现 <code>androidPackageName</code> 键，值是调起 WebAuthn 验证的应用的包名，如 Chrome 就是 \"com.android.chrome\"。</p>\n<p>在这个证明中，<code>data</code> 其实是一个 JWT 字符串，我们可以将它编码为字符串并将其按照 JWT 进行解码（别忘了验证 JWT 签名）。最终我们会得到一个类似这样的 Payload：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    nonce: \"0QAurN4F9wik6GEkblDJhGuf4kuaqZn5zaaxlvD1hlA=\",\r\n    timestampMs: 1584950686460,\r\n    apkPackageName: \"com.google.android.gms\",\r\n    apkDigestSha256: \"2BQHno+bmWWwdLUYylS8HLt5ESJzci3nt2uui71ojyE=\",\r\n    ctsProfileMatch: true,\r\n    apkCertificateDigestSha256: [\r\n        \"8P1sW0EPicslw7UzRsiXL64w+O50Ed+RBICtay2g24M=\"\r\n    ],\r\n    basicIntegrity: true,\r\n    evaluationType: \"BASIC\"\r\n}</pre>\n<p>其中包含了有关设备状态的一些信息。比如说，如果 <code>ctsProfileMatch</code> 为 <code>false</code>，那么该设备很有可能被 root 了。对于高安全要求的场景，我们可以视情况进行验证。</p>\n<p>同时我们可以在 JWT Header 中验证证明的有效性。我们应该能取得这样的 Header：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    alg: \"RS256\",\r\n    x5c: [\r\n        \"MIIFkzCCBHugAwIBAgIR...uvlyjOwAzXuMu7M+PWRc\",\r\n        \"MIIESjCCAzKgAwIBAgIN...UK4v4ZUN80atnZz1yg==\"\r\n    ]\r\n}</pre>\n<p>这里的结构就和上方的 <code>x5c</code> 验证类似了。具体步骤可以参考<a href=\"https://medium.com/@herrjemand/verifying-fido2-safetynet-attestation-bd261ce1978d\">这篇文章</a>（英文）。</p>\n<p>其他所有格式的验证方式也都可以在<a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">这篇文章</a>（英文）中找到。<span></span></p>\n<h2>无用户名登录</h2>\n<p>认证器已经代替了密码，可是这还不够！在进行第一因素认证（即使用 WebAuthn 登录）时，我们还是需要输入用户名，然后才能进行身份认证。懒惰是第一生产力，我们能不能不输入用户名就进行身份认证呢？实际上，大部分认证器都允许我们无用户名登录。<strong>而这一特性的核心就是 Resident Key 客户端密钥驻留。</strong></p>\n<p>你可以思考一下，为什么普通的 WebAuthn 为什么不能实现无用户名登录？事实上，大部分认证器为了实现无限对公私钥，会将私钥通过 Key Warp 等技术加密后包含在凭证 ID 中发送给依赖方，这样认证器本身就不用存储任何信息。不过，这就导致需要身份认证时，依赖方必须通过用户名找到对应的凭证 ID，将其发送给认证器以供其算出私钥。</p>\n<blockquote><p>Yubikey 实现了一个基于 HMAC 的算法，认证器可以在私钥不离开认证器的前提下（常规的 Key Warp 算法中实际上私钥离开了认证器）通过一些输入和凭证 ID 重新计算私钥，你可以阅读<a href=\"https://www.yubico.com/blog/yubicos-u2f-key-wrapping/\">这篇文章</a>了解更多。</p></blockquote>\n<blockquote><p>客户端通过凭证 ID 查找对应认证器的算法根据系统的不同是不同的。通常凭证 ID 中会包含认证器信息，因此系统可以通过凭证 ID 找到对应的认证器。</p></blockquote>\n<p>要避免输入用户名，我们可以要求认证器将私钥在自己的内存中也存储一份。这样，依赖方无需提供凭证 ID，认证器就可以通过依赖方 ID 找到所需的私钥并签名公钥。以下是具体流程：</p>\n<p>注册时：</p>\n<ol>\n<li>依赖方请求新建凭证，同时要求启用客户端密钥</li>\n<li>认证器生成一对公私钥，并将私钥存储在永久内存中且与依赖方 ID 及用户 ID 绑定，随后将公钥发送给依赖方以供存储</li>\n<li>依赖方将用户 ID 即公钥与用户绑定</li>\n</ol><p>验证时：</p>\n<ol>\n<li>依赖方请求验证，但不必提供除依赖方 ID 以外的更多信息</li>\n<li>用户选择认证器</li>\n<li>认证器根据依赖方 ID 找到对应私钥</li>\n<li>如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录</li>\n<li>确定私钥后，认证器签名挑战并将其返回，同时返回用户 ID</li>\n<li>依赖方通过用户 ID 找到对应用户并用对应公钥检查签名，正确则允许对应用户登录</li>\n</ol><blockquote><p>可以看到，这个特性同时要求认证器存储用户 ID，即上面提到过的 <code>userHandle</code>。依赖方需要根据此信息找到对应用户，因此不支持 <code>userHandle</code> 的 U2F 认证器无法进行无用户名登录。</p></blockquote>\n<blockquote><p>如之前所说，<strong>认证器能永久存储的私钥数量是有限的</strong>，因此只应在真正需要无用户名登录的时候启用此特性。</p></blockquote>\n<blockquote><p>目前暂时没有办法检测认证器是否支持客户端密钥驻留，因此在无用户名验证失败时应 fallback 至常规的 WebAuthn 验证，即向用户询问用户名。</p></blockquote>\n<p>现在让我们来看看如何实现这一特性吧。首先，调用 <code>navigator.credentials.create()</code> 时我们需要注意两个参数：<code>requireResidentKey</code> 必须为 <code>true</code>，<code>userVerification</code> 必须为 \"required\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"5-6\">navigator.credentials.create({\r\n    publicKey: {\r\n        ...\r\n        authenticatorSelection: {\r\n            requireResidentKey: true,\r\n            userVerification: \"required\"\r\n            ...\r\n        },\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Windows Hello <strong>似乎</strong>会存储所有已注册的凭据，因此无论是否指定 <code>requireResidentKey</code>，你都可以通过 Windows Hello 进行无用户名登录。</p></blockquote>\n<p>随后，浏览器会询问用户是否允许认证器存储私钥。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\" alt=\"浏览器提示\" width=\"445\" height=\"285\" class=\"aligncenter size-full wp-image-2208\"></a>\n<p>如果用户同意，认证器会存储私钥，并和普通的 WebAuthn 一样返回信息。不过，依赖方收到数据之后，只需将公钥、用户 ID 与用户关联起来，而不必再将凭证 ID 与用户关联起来。至此注册完成。</p>\n<p>之后，在用户请求登录时，无需再向依赖方提供用户名。同时在传入 <code>navigator.credentials.get()</code> 的参数中也有两个需要注意：<code>userVerification</code> 必须为 \"required\"，同时 <code>allowCredentials</code> 必须为空。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"4-5\">navigator.credentials.get({\r\n    publicKey: {\r\n        ...\r\n        userVerification: \"required\",\r\n        allowCredentials: [],\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Android 暂不支持无用户名验证，空的 <code>allowCredentials</code> 会导致浏览器返回 <code>NotSupportedError</code> 错误。</p></blockquote>\n<p>此时，认证器会根据依赖方 ID 找到对应的私钥。如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录。用户选择后，认证器就会使用对应的私钥签名挑战并将其返回。此时，<code>userHandle</code> 一定不为空。</p>\n<p>依赖方收到数据后，需要将 <code>userHandle</code> 作为用户 ID 找到对应的用户，并使用对应的公钥验证签名。如果验证成功，则认为对应的用户身份认证成功，依赖方可以允许其登录。至此验证结束。</p>\n<blockquote><p>有的时候你可能会需要清除认证器中的密钥。绝大多数认证器都提供了对应的软件以供清除存储的密钥，但大部分情况下这会重置整个认证器，这意味着相关认证器此前的所有凭证均会失效。因此建议不要将日常使用的认证器作为开发测试用的认证器。</p></blockquote>\n<h2>从 U2F 认证迁移</h2>\n<p>如果你的服务此前提供了 U2F 第二因素认证，你可能会希望在将依赖方从 U2F 升级到 WebAuthn 时用户此前注册的 U2F 认证器仍然可用而无需重新注册。由于 WebAuthn 向后兼容 U2F 设备，用户是可以继续使用原有的 U2F 认证器的。不过，由于 WebAuthn 的依赖方 ID 与 U2F 的 <code>appid</code> 并不一定相同，你需要将原有的 U2F <code>appid</code> 随 WebAuthn 流程一起传递给认证器，认证器才能使用正确的私钥进行响应。</p>\n<p>要实现这一点，我们只需要在注册及认证仪式中使用 WebAuthn 的 <code>appid</code> 扩展。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    appid: \"https://example.com\" //U2F appid\r\n}</pre>\n<p>此时认证器便可以得到正确的私钥，之后的流程与正常情况一致；依赖方除了正常的 WebAuthn 流程外，不需要再做任何其它操作。</p>\n<h2>拓展阅读</h2>\n<p>我们的 WebAuthn 之旅到这里就真的结束了。不过，你仍然可以自行探究，了解更多。<strong>本文只是一个粗浅的使用指南</strong>，而被称为“Web 身份认证的未来”的 WebAuthn 的深层还要很多细节值得我们挖掘学习，不过本文不会再继续讨论了。</p>\n<p>如果你想了解更多关于 WebAuthn 的信息，最好的方法是直接阅读 <a href=\"https://www.w3.org/TR/webauthn\">W3C 规范</a>。此外，Yubico 也提供了不错的 <a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn 文档</a>。</p>\n<p>要了解更多认证器存储凭证的信息，你可以阅读<a href=\"https://duo.com/labs/tech-notes/how-security-keys-store-credentials\">这篇文章</a>（英文）。</p>\n<p>如果你想了解更多 Android Safety Net 是怎样运作的，可以观看<a href=\"https://youtu.be/8lv_9mydrjg\">这个视频</a>，并通过 <a href=\"https://developer.android.com/training/safetynet/attestation\">Google 的文档</a>了解 Android Safety Net 的更多信息。</p>\n<p>如果你想方便地调试 WebAuthn，<a href=\"https://webauthn.me/\">webauthn.me</a> 提供了一个非常直观方便的<a href=\"https://webauthn.me/debugger\">调试器</a>。</p>\n<h1>参考资料</h1>\n<p><a href=\"https://www.w3.org/TR/webauthn\">WebAuthn Level 1 规范 - W3C</a><br><a href=\"https://github.com/w3c/webauthn\">WebAuthn Level 2 草案 - W3C</a><br><a href=\"https://blog.techbridge.cc/2019/08/17/webauthn-intro/\">一起来了解Web Authentication - TechBridge 技术共笔部落格</a><br><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\">Introduction to WebAuthn API - Medium</a><br><a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">WebAuthn/FIDO2: Verifying responses - Medium</a><br><a href=\"https://obeta.me/posts/2019-03-01/WebAuthn%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8\">WebAuthn介绍与使用 - obeta</a><br><a href=\"https://webauthn.io/\">webauthn.io</a><br><a href=\"https://webauthn.guide/\">webauthn.guide</a><br><a href=\"https://webauthn.me/\">webauthn.me</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion\">Attestation and Assertion - MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Authentication_API\">Web Authentication API - MDN</a>（顺便翻译了一半）<br><a href=\"https://fidoalliance.org/fido-technotes-the-truth-about-attestation/\">FIDO TechNotes: The Truth about Attestation - FIDO Alliance</a><br><a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn Developer Guide - Yubico</a><br><a href=\"https://en.wikipedia.org/wiki/WebAuthn\">WebAuthn - Wikipedia</a><br><a href=\"https://techcommunity.microsoft.com/t5/identity-standards-blog/all-about-fido2-ctap2-and-webauthn/ba-p/288910\">All about FIDO2, CTAP2 and WebAuthn - Microsoft Tech Community</a><br><a href=\"https://webauthn-doc.spomky-labs.com/\">Webauthn Framework</a><br><a href=\"https://zhuanlan.zhihu.com/p/25279015\">如何开发支持 FIDO U2F 登录的网站 - 知乎专栏</a><br></p></pre>\n","link":"https://flyhigher.top/develop/2160.html"},{"title":"NLP 找门：用朴素贝叶斯进行文本分类","date":"2020-01-29 11:39:58","description":"\n<blockquote>\n<p>有一天，神收到了一封垃圾邮件，于是世界上就有了朴素贝叶斯算法。</p>\n<footer>——我瞎编的</footer>\n</blockquote>\n<p>为什么这篇文章的标题是 NLP 找门呢？因为如果你看完了这篇文章，你就可以<strong>准备入门</strong>自然语言处理 (<strong>N</strong>atural <strong>L</strong>anguage <strong>P</strong>rocessing) 了。我会把这篇文章当作一篇彻彻底底的 NLP 入门文章来写，尽量避免“专业高端”词汇和“全是奇怪符号”的式子，这样<strong>只要你有高中数学基础</strong>，就能毫无压力地看完这篇文章，学会使用朴素贝叶斯分类算法分类文本。</p>\n<p>让我们开始吧。</p>\n<h1>所以，啥是朴素贝叶斯？</h1>\n<p>简单来说，朴素贝叶斯 (Naïve Bayes) <strong>是一个简单但高效的分类算法</strong>，在进行不复杂的文本分类时高效且拥有不低的准确度，判断垃圾邮件就是用朴素贝叶斯进行文本分类的一个经典例子。当然朴素贝叶斯分类不仅能用在 NLP 中，在许多分类问题中朴素贝叶斯也有非常好的效果，但我们今天只关注它在 NLP 中的应用。</p>\n<p>要了解朴素贝叶斯，我们要先来了解一下贝叶斯定理。</p>\n<blockquote>\n<p>每增加一个数学公式都会使读者减半。</p>\n<footer>——霍金</footer>\n</blockquote>\n<p>那么，就让我们先来看看贝叶斯定理的公式吧（笑</p>\n<p>$$P(A|B) = \\frac{P(AB)}{P(B)} = \\frac{P(B|A)P(A)}{P(B)}$$</p>\n<p>其实还是很简单的，运用高中的条件概率知识就能理解。本质上，贝叶斯定理给出了一种方法，使得我们可以在 \\(P(A|B)\\) 和 \\(P(B|A)\\) 之间互相转换，因为通常情况下它们是不一样的。</p>\n<p>要更好地理解，请考虑这样一个例子：</p>\n<blockquote><p>假设有一个学校图书馆，图书管理员正为找不到某本书而发愁。已知老师有 70% 的意愿借走这本书，而是学生的意愿是 30%，这个学校的师生比例是 1:10，那么借走这本书的人是老师的概率有多大？</p></blockquote>\n<p>设学校总人数为 \\(T\\)，我们可以很容易地写出这样的一个式子：</p>\n<p>$$\\begin{align} P &amp; = \\frac{T\\cdot\\frac{1}{11}\\cdot 70\\%}{T\\cdot\\frac{1}{11}\\cdot 70\\%+T\\cdot\\frac{10}{11}\\cdot 30\\%} \\\\ &amp; = \\frac{70\\%}{70\\%+10\\times30\\%} \\\\ &amp; = \\frac{7}{37} \\end{align}$$</p>\n<p>这就是贝叶斯定理了！等等，你可能会挠挠头，这哪里是贝叶斯了？别急，如果我们把最上面的式子换个字母的话...</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>在这里，\\(H\\) 指 Hypothesis，即假设，而 \\(E\\) 指 Evidence，即证据。这样，这个式子就很好理解了，在我们上面的例子里，借走书是证据，那么 \\(P(E)\\) 就是某个人选择借走这本书的概率；这个人是老师是假设，那么这个人是老师的概率是 \\(P(H)\\)。<strong>注意这里的概率指在学校中抽一个人是老师的概率，并不是“在借走书的前提下”这个人是老师的概率</strong>，而“在借走书的前提下”这个人是老师的概率应该是 \\(P(H|E)\\)，也正是我们要求的概率。同样地，而“这个人是老师”的前提下借走书的概率就是 \\(P(E|H)\\) 了。</p>\n<p>那么再来看看上面我们凭小学知识就列出的计算式，如果把里面的具体数据换成概率来表示的话，这个式子就会变成...</p>\n<p>$$P(H|E) = \\frac{T\\cdot P(E|H)P(H)}{T\\cdot P(E|H)P(H) + T\\cdot P(E|\\neg H)P(\\neg H)}$$</p>\n<p>好吧，这里解释一下，\\(\\neg\\) 符号表示“非”，所以 \\(P(E|\\neg H)\\) 表示在“这个人不是老师”的前提下借走书的概率。而 \\(T\\cdot P(E|H)P(H)\\) + \\(T\\cdot P(E|\\neg H)P(\\neg H)\\)，即“可能借走书的老师的数量 + 可能借走书的学生的数量”，就是“可能借走书的人的数量”了，也就是 \\(T\\cdot P(E)\\)。上下消去 \\(T\\)，我们就能得到上面的式子了。</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>这就是贝叶斯了定理。如果你还是不太清楚，可以去看看 3Blue1Brown 的<a href=\"https://www.bilibili.com/video/av84799361\">这个视频</a>，图形化的讲解会清晰很多。</p>\n<p>这里我要提一下这个式子里各部分的专有名称了（“专业高端”词汇警告），你可以不记住，直接看后面。</p>\n<ul>\n<li>\\(P(H|E)\\) 叫做 \\(H\\) 的<strong>后验概率</strong>，反之亦然</li>\n<li>\\(P(H)\\) 叫做 \\(H\\) 的<strong>先验概率</strong>，反之亦然</li>\n<li>特别地，我们把 \\(P(E|H)\\) 称作<strong>“似然值”</strong>，即 likelihood</li>\n</ul>\n<p>那什么是朴素贝叶斯呢？按上面所说的，朴素贝叶斯是一种分类算法。简单来说，朴素贝叶斯将一个对象的各个特征考虑为互相独立，然后根据这些特征的概率的乘积来判断对象所属的分类。基本原理如下：</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)} \\propto P(E|H)P(H) = P(H)\\prod_{i}P(W_i|H)$$</p>\n<p>在这里，\\(W_i\\) 指某一对象的第 \\(i\\) 个特征，对于文本分类来说，这就是一段文本中的某个单词。</p>\n<p>朴素贝叶斯之所以“朴素”，是因为它要求<strong>各个特征间是独立的</strong>，在文本分类中也就是各个单词之间互不干扰。虽然思路简单的代价是适用范围变窄，不过由于这样的简化在很多情况下已经足够了，因此实际上朴素贝叶斯的应用范围非常广。<del>你看朴素贝叶斯 <strong>N</strong>aïve <strong>B</strong>ayes 的缩写都是 NB 了，能不厉害吗（逃</del></p>\n<h1>那么，咋分类啊</h1>\n<p>看来你这下完全听懂了呢（笑），是时候看看如何在 NLP 中应用朴素贝叶斯了。和上面一样，我们用一个具体的例子来说明。我们的目标是让电脑学会分类美国共和党和民主党的演讲稿，由于两个党派的演讲风格不同，所以这样的分类在理论上是可行的。</p>\n<div class=\"wp-block-file\">\n<a href=\"https://acdn.flyhigher.top/nlp/material.zip\" download>material.zip</a><a href=\"https://acdn.flyhigher.top/nlp/material.zip\" class=\"wp-block-file__button\" download>下载</a>\n</div>\n<p>上面我们要用到的数据集，你可以下载下来一起动手玩一玩。先说一下数据集的数据结构吧，压缩包里有两个文件，<code>train.txt</code> 将会被当作训练数据集，而 <code>test.txt</code> 则会作为训练结束后的验证数据集。两个文本文件里数据的结构是类似的，就像这样：</p>\n<pre class=\"EnlighterJSRAW\">BLUE WELL I AM SO HONORED AND PERSONALLY UNKNOWNWORD TO BE HERE...\r\nRED THANK YOU . THIS IS QUITE AN INSTITUTION . IT'S GOOD TO BE...</pre>\n<p>每行都是一篇演讲稿，每行的第一个单词指明了这篇演讲稿所属的党派，<code>RED</code> 指共和党，而 <code>BLUE</code> 指民主党。所有单词和符号都已经被转为大写并由空格分隔方便处理。<code>train.txt</code> 有共和党演讲稿和民主党演讲稿各 23 篇，<code>test.txt</code> 有 6 篇共和党演讲稿，12 篇民主党演讲稿。</p>\n<p>明白了？那我们就开始吧。</p>\n<h2>捋捋思路</h2>\n<p>首先，我们需要考虑如何在文本分类中应用朴素贝叶斯。很简单，按朴素贝叶斯的思路，<strong>计算每个词在某一分类下的出现概率，然后将某篇文章的所有词的概率相乘，再乘以该分类的先验概率，就可以得到某篇文章在某一分类下的概率。</strong></p>\n<p>$$P(Class|Article) = P(Class)\\prod_{i}P(Word_i|Class)$$</p>\n<p>各个分类概率都计算完成后，概率最高的那个分类就是这篇文章可能所属的分类。这个思路的核心就是用词决定了文本风格，文本的不同类别用词会有差异，只要能量化这些差异就可以分类文本。在我们的例子中，我们可以从 <code>train.txt</code> 中统计各个词汇的出现情况，然后用 <code>test.txt</code> 中的数据按上面的算法验证我们算法的准确性。</p>\n<p>这个思路很简单也很清晰，但还有一些问题需要解决。<strong>第一，有的时候，我们的测试数据集中可能会出现一个在训练数据集中没有出现过的词语。这个时候，朴素贝叶斯的计算结果会是 0。</strong>如果我们把 0 乘进式子中，那就别想得到正常的结果了。所以，我们还需要对计算某一单词在某一分类中的式子稍加改进。使用拉普拉斯平滑，就可以避免出现概率为 0 的情况。别被名字吓到，拉普拉斯平滑是一种非常简单的平滑方法：在分子上 +1，在分母上加整个取值范围，这样就可以给整个分式加上非常微小的偏移，避免出现 0。</p>\n<p>$$\\begin{align} P(Word_i|Class) &amp; = \\frac{Word_iCountInClass}{AllWordCountInClass} \\\\ &amp; \\approx \\frac{Word_iCountInClass + 1}{AllWordCountInClass + UniqueWordCount} \\end{align}$$</p>\n<p><strong>第二，对于长文本，大部分词语在某一分类中的出现概率是远小于 1 的，加上长文本词汇量大，往往概率相乘的结果会非常小。</strong>受限于计算机处理浮点数的原理，精确处理这么小的数字是很麻烦的。幸好，运用一些简单的数学知识就可以将其转化为更精确的表达，<strong>那就是取对数。</strong></p>\n<p>首先，将概率计算结果取对数并不影响我们的计算结果。因为取对数是一个单调递增的操作，而我们计算概率只是为了排序选择概率最高的分类，因此取对数是不影响我们排序的。而把多项式取对数，等于把多项式的每一项取对数后相加。所以我们有：</p>\n<p>$$\\lg{\\Big(P(Class)\\prod_{i}P(Word_i|Class)\\Big)} = \\lg{P(Class)} + \\sum_i\\lg{P(Word_i|Class)}$$</p>\n<p>大部分情况下，在每一次取对数的时候，要取对数的数字的大小，即 \\(P(Word_i|Class)\\) 尚还在计算机能处理的范围内，<strong>因此我们可以放心地使用取对数的方法</strong>，避免计算机精度不够影响结果。</p>\n<p><strong>第三就是在某些情况下，可能会有部分词语干扰计算结果</strong>，如 and, is 这类的被大量使用的中性词。如果希望得到更好的结果，我们可以维护一个停用词表，在计算时排除停用词即可。或者，我们可以在计算完每个单词的出现数量后，排除数量最多的前 \\(N\\) 个单词，避免这些单词过多地影响计算。</p>\n<h2>写点代码</h2>\n<p>现在我们终于可以开始实战，写点代码了。我会用简单的 Python 来表达思路。好了，理一理思绪，第一步我们要做的，是统计训练数据集中的用词情况。具体来说，根据上面的思考，我们需要统计的有：</p>\n<ul>\n<li>每个单词在各分类中出现的数量</li>\n<li>各分类中的不重复词数量</li>\n</ul>\n<p>用 Python 简单表示如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\"># 读入数据过程略...\r\ndata_raw = \"读入的数据\".split('\\n') # 按行分隔\r\ndata_blue = []\r\ndata_red = []\r\nword_count_blue = {}\r\nword_count_red = {}\r\n\r\nfor line_data in data_raw:\r\n    word_list = line_data.split(\" \") # 分隔单词\r\n    if word_list[0] == \"BLUE\":\r\n        for i in range(1,len(word_list)):\r\n            if not is_excluded(word_list[i]): # 判断是否为停用词\r\n                data_blue.append(word_list[i])\r\n                # 统计单词出现次数\r\n                word_count_blue.setdefault(word_list[i], 0)\r\n                word_count_blue[word_list[i]] += 1\r\n    elif word_list[0] == \"RED\":\r\n        # Class = red 时同理...\r\n\r\n#统计非重复词\r\nunique_words_blue = list(set(data_blue))\r\nunique_words_red = list(set(data_red))</pre>\n<p>训练过程到这里就结束了，计算机已经知道了各政党演讲的用词习惯。很简单吧？接下来我们就要使用测试数据集来测试准确度了。<strong>这里开始就涉及到朴素贝叶斯的计算了</strong>，可能会稍微复杂一点点。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">import math\r\n#读入测试数据过程略...\r\ntest_data_raw = \"读入的数据\".split('\\n') # 按行分隔\r\ntest_data = []\r\n\r\nfor line_data in test_data_raw:\r\n    if line_data[0] == \"BLUE\":\r\n        content_data = line_data.split(\" \").pop(0)\r\n        test_data.append({\"class\": \"blue\", \"content\": content_data})\r\n    elif line_data[0] == 'RED':\r\n        # ...\r\n\r\nfor line_data in test_data:\r\n    posibility_blue = 0\r\n    for word in line_data[\"content\"]:\r\n        # 计算各单词概率，取对数后相加，使用了拉普拉斯平滑\r\n        if word in word_count_blue:\r\n            posibility_blue += math.log((word_count_blue[word]+1)/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n        else:\r\n            posibility_blue += math.log(1/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n    # 最后加上该分类概率的对数\r\n    posibility_blue += math.log(len(data_blue)/(len(data_blue)+len(data_red)))\r\n\r\n    # 计算 Red 同理...</pre>\n<p>计算完成后，我们就得到每篇演讲稿在各分类下的概率了。之后，简单的比较就能得出推断的分类：如果 \\(P(Red|Article)\\) 大于 \\(P(Blue|Article)\\)，那么这篇演讲稿就更可能是共和党的演讲稿，反之则是民主党的演讲稿。</p>\n<p>很好理解吧？那么这么简单的思路，准确性怎么样呢？对于我们的例子，这是我设置了个别停用词后的结果：</p>\n<pre class=\"EnlighterJSRAW\">+-----+-------+--------------+--------------+-------+-------+\r\n|   ID|  Class|        P(Red)|       P(Blue)|  Guess| Status|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|    1|   Blue|  -23204.68377|  -22998.67066|   Blue|      √|\r\n|    2|   Blue|  -16438.44625|  -16137.48257|   Blue|      √|\r\n|    3|   Blue|  -33468.81214|  -32567.61801|   Blue|      √|\r\n|    4|   Blue|    -8606.2193|   -8601.50426|   Blue|      √|\r\n|    5|   Blue|  -12430.97436|  -11935.70662|   Blue|      √|\r\n|    6|   Blue|  -44033.02883|  -43877.55367|   Blue|      √|\r\n|    7|   Blue|   -16947.2851|  -16758.57542|   Blue|      √|\r\n|    8|   Blue|  -26957.26997|  -26889.62444|   Blue|      √|\r\n|    9|   Blue|  -27503.73985|  -27249.21828|   Blue|      √|\r\n|   10|   Blue|   -20528.4457|   -19991.1248|   Blue|      √|\r\n|   11|   Blue|  -20337.96493|  -19860.12831|   Blue|      √|\r\n|   12|   Blue|  -28409.28489|  -28118.98017|   Blue|      √|\r\n|   13|    Red|  -13756.01015|  -14488.11751|    Red|      √|\r\n|   14|    Red|  -17221.22732|  -17710.15936|    Red|      √|\r\n|   15|    Red|  -17397.45136|  -17899.98659|    Red|      √|\r\n|   16|    Red|  -10724.69095|  -11092.77837|    Red|      √|\r\n|   17|    Red|  -10402.40027|  -10859.48681|    Red|      √|\r\n|   18|    Red|   -9371.53792|    -9669.6769|    Red|      √|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|                                      Total: 18/18, 100.0% |\r\n+-----------------------------------------------------------+</pre>\n<p><strong>100% 的准确率哦！</strong>事实上，对于我们的这个例子，就算不设置停用词，我们仍能达到 100% 的分类准确率。朴素贝叶斯分类的确很 NB 呢。</p>\n<h1>更进一步</h1>\n<p>我们的探索到这里就结束了，但如果你有兴趣，完全可以继续探索下去。我们的例子是一个非常简化的例子，在实际情况中，还有很多问题需要解决。比如，对于中文及类似语言，不存在拉丁语系的天然分词结构，而朴素贝叶斯的文本分类是基于单词的，那么<strong>中文的分词就会是个问题；</strong>再比如，对于朴素贝叶斯分类来说，<strong>词语之间的顺序是不影响分类结果的</strong>，但这就会导致“今天心情很好，但昨天不好”和“昨天心情很好，但今天不好”在朴素贝叶斯看来是一样的，要想获得更好的结果，我们必须<strong>考虑词语的顺序。</strong></p>\n<p>这些问题，今天我们就不再深究了，但你可以自己探索。比如，引入思路同样很简洁的马尔科夫链，我们就可以让计算机学会考虑词语间的顺序，不过那就会是另一个话题了。</p>\n","link":"https://flyhigher.top/develop/1989.html"},{"title":"MDx 中增强页面可访问性的细节","date":"2020-01-25 16:45:04","description":"\n<blockquote><p>这篇文章本来是打算发在 <a href=\"https://mdxblog.flyhigher.top/\">MDx Blog</a> 的，不过写到后来发现这篇文章相对来说还是有价值的，于是就将这篇文章转移到了无垠，MDx Blog 则不再发表这篇文章。</p></blockquote>\n<p>从 MDx 开发之初，增强页面的可访问性就被列为了一个重要目标。从 HTML 语义化，到 ARIA 地标，再到 <code>prefers-reduced-motion</code>，随着浏览器对于增强页面可访问性的支持功能越来越多，MDx 也在不断地更新，让更多的人都能毫无困难地浏览、查看由 MDx 渲染的网页。本文会详细说明一些 MDx 中增强页面可访问性的细节，<strong>如果你希望增强自己开发的网页的可访问性，本文可能会对你有所帮助。</strong></p>\n<h1>基础性增强</h1>\n<p>增强可访问性，最重要也是最基础的一点就是 HTML 语义化。通过使用 HTML 5 语义化标签和 ARIA Role 标签，我们可以很方便地<strong>将整个网页在语义上分为几部分，而这将有效地改善屏幕阅读器对网页的分析质量，使视力障碍用户更好地浏览网页。</strong></p>\n<h2>HTML 语义化</h2>\n<p><strong>HTML 语义化属于增强页面可访问性的基础中的基础。</strong>通过使用语义化的 HTML 标签，我们可以方便地为网页中的各部分标记功能而不影响页面样式。随着符合 HTML 5 的现代化网页成为主流，语义化标签已被很大一部分网站所支持，我也不过多赘述了。就举几个常用的“地标性”标签吧：</p>\n<ul>\n<li>\n<code>header</code> 标签标记页眉，默认样式同 <code>div</code>，不要把它和 <code>head</code> 搞混了</li>\n<li>\n<code>main</code> 标签标记页面的主要内容，默认样式同 <code>div</code>\n</li>\n<li>\n<code>article</code> 标签标记文章（在 HTML 5 中它指任何独立或可复用的文本），默认样式同 <code>div</code>\n</li>\n<li>\n<code>footer</code> 标签标记页脚，默认样式同 <code>div</code>\n</li>\n<li>\n<code>nav</code> 标签标记页面导航栏区域，默认样式同 <code>div</code>\n</li>\n<li>\n<code>aside</code> 标签标记侧栏，默认样式同 <code>div</code>\n</li>\n<li>\n<code>section</code> 标签标记“一组内容”，你可以把它看作是划定网页中一块区域的通用标签，默认样式同 <code>div</code>\n</li>\n</ul>\n<p>只要用这些标签替代 <code>div</code> 而不是无脑使用 <code>div</code> 就能提高页面的可访问性。MDx 使用了这些标签来增强页面的可访问性。</p>\n<h2>下一步，ARIA</h2>\n<p>有的时候，出于一些原因，我们没法使用语义化的 HTML 标签，或者没有合适的语义化标签来标记内容，这时候<strong>我们就需要使用 ARIA (Accessible Rich Internet Applications，可访问的富互联网应用)。</strong>ARIA 的基础用法很简单，只要在相应元素上加上 <code>role</code> 属性指定该元素的功能即可。下面是一个简单的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;div role=\"navigation\"&gt;\r\n  &lt;ul&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page A&lt;/a&gt;&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page B&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page C&lt;/a&gt;&lt;/li&gt;\r\n  &lt;/ul&gt;\r\n&lt;/div&gt;</pre>\n<p>通过 <code>role=\"navigation\"</code>，我们把一个 <code>div</code> 标记为了导航栏区域。实际上，对屏幕阅读器来说，这和 <code>nav</code> 标签在语义上是一致的。上一节中的例子都可以分别用以下 ARIA Role 表示：</p>\n<ul>\n<li><code>role=\"heading\"</code></li>\n<li><code>role=\"main\"</code></li>\n<li><code>role=\"article\"</code></li>\n<li><code>role=\"contentinfo\"</code></li>\n<li><code>role=\"navigation\"</code></li>\n<li><code>role=\"complementary\"</code></li>\n<li><code>role=\"region\"</code></li>\n</ul>\n<p>除此以外，MDx 还使用了 <code>role=\"banner\"</code> 和 <code>role=\"search\"</code> 来分别标记页面中的顶部栏和搜索表单。另外，<strong>有的时候 <code>role</code> 属性还需配合 <code>aria-*</code> 属性一同使用</strong>，具体规则比较复杂，我就不在这里赘述了，具体可参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">WAI-ARIA Roles - MDN</a>。</p>\n<h1>媒体查询来帮忙</h1>\n<p>CSS 的媒体查询其实是一个非常强大的特性，<strong>妥善利用其中的一些特性，我们可以在网页外观上大大增强网页的可访问性。</strong>除了已经烂大街的“对浏览器窗口大小”响应的媒体查询，我会介绍 3 个很少有网站充分利用的媒体查询。</p>\n<h2>print</h2>\n<p><code>print</code> 媒体查询其实已经“历史悠久”了，<strong>只要使用 <code>@media print {...}</code> 就可以创建只在打印页面时生效的样式。</strong>通过这种方式，我们可以让页面在打印时应用一套为打印优化的样式，增强页面在物理纸张上的可访问性。</p>\n<blockquote><p>维基百科是对打印样式做了单独适配的著名例子。</p></blockquote>\n<p><strong>由于在打印的情况下，页面已经离开了“可交互”的范围，还有分页这种在屏幕中无需考虑的问题，要让页面在物理纸张上仍能被轻松地阅读，我们需要做一些特殊的适配。</strong>直接来看一个例子吧。以下是 MDx 针对打印情况进行的一些特殊优化，样式的具体理由已经写在了注释中。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media print {\r\n    /*隐藏不必要的元素*/\r\n    header, .mdx-ad-after-article, .mdx-ad-in-article, .mdx-post-money, .page-footer-nav, .mdx-same-posts, .spanout button, .mdui-drawer, .mdui-overlay, .mdui-menu, .mdx-share-img-dialog, .mdx-share-wechat-dialog {\r\n        display: none!important;\r\n    }\r\n\r\n    /*使用下划线标记链接*/\r\n    article a {\r\n        text-decoration: underline!important;\r\n    }\r\n    /*由于纸张不可交互，在链接后显示链接到的 URL*/\r\n    article a::after {\r\n        content: \"(\" attr(href) \")\";\r\n    }\r\n\r\n    /*强制白底黑字*/\r\n    html &gt; body {\r\n        background-color: white!important;\r\n    }\r\n    article p {\r\n        color: rgba(0,0,0,.8)!important;\r\n    }\r\n\r\n    /*对于纸张上的长文章，衬线字体拥有更好的可读性。以下字体列表来自 fonts.css*/\r\n    article {\r\n        font: 13pt Georgia, \"Nimbus Roman No9 L\", \"Songti SC\", \"Noto Serif CJK SC\", \"Source Han Serif SC\", \"Source Han Serif CN\", STSong, \"AR PL New Sung\", \"AR PL SungtiL GB\", NSimSun, SimSun, \"TW\\-Sung\", \"WenQuanYi Bitmap Song\", \"AR PL UMing CN\", \"AR PL UMing HK\", \"AR PL UMing TW\", \"AR PL UMing TW MBE\", PMingLiU, MingLiU, serif!important;\r\n    }\r\n\r\n    /*除部分元素外，禁止在元素内部分页*/\r\n    * {\r\n        page-break-inside: avoid;\r\n    }\r\n    article p, article a, #comments, article {\r\n        page-break-inside: auto;\r\n    }\r\n}</pre>\n<p>MDx 自 1.9.3 版本起已经包含了对文章页的打印样式优化。可以很容易地看出，优化后的样式在物理纸张上将更容易阅读。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\" alt=\"\" width=\"1345\" height=\"1602\" class=\"aligncenter size-full wp-image-1959\"></a>\n<h2>prefers-color-scheme</h2>\n<p><code>prefers-color-scheme</code> 是最近才被浏览器广泛支持的一个媒体查询，但它的功能却很强大：<strong>响应系统级黑暗模式。</strong>这样，我们可以在开启黑暗模式的系统中让网页具有更好的可读性。不过由于这个媒体查询直到最近才被广泛支持，因此大部分网站对此并没有进行适配。</p>\n<blockquote><p>一些适配这一特性的网站：少数派、微信公众平台（文章页）等。</p></blockquote>\n<p>通过像这样的媒体查询，我们可以在系统启用黑暗模式时让页面实时响应：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    body {\r\n        background-color: #212121;\r\n        color: rgba(255, 255, 255, .7);\r\n    }\r\n}</pre>\n<p><code>prefers-color-scheme</code> 一共有 3 个可能值：<code>no-preference</code>, <code>light</code> 和 <code>dark</code>。你也可以不像上面的例子那样默认使用亮色样式并在黑暗模式下启用黑暗样式，而可以反过来将黑暗样式作为默认，用亮色样式覆盖。在不支持的浏览器上将会显示默认样式（即媒体查询不会生效）。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<h2>prefers-reduced-motion</h2>\n<p>看名字就猜得出，<code>prefers-reduced-motion</code> 是和 <code>prefers-color-scheme</code> 师出同门的媒体查询。因此，和 <code>prefers-color-scheme</code> 一样，它也是在最近才获得了浏览器的广泛支持。它的作用也很强大：<strong>响应系统的“减弱动态效果”模式。</strong>这对某些不喜欢甚至无法接受动画的用户可能很有帮助。要知道，对有些用户来说这甚至是医疗上的必要。使用如下的媒体查询，我们可以在系统启用减弱动态效果模式时让页面实时响应，减弱动画：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-reduced-motion: reduce) {\r\n    /*只是一个示例，实际情况中可以保留一些淡入淡出效果*/\r\n    * {\r\n        transition: all 0s!important;\r\n        transform: none!important;\r\n    }\r\n}</pre>\n<p><code>prefers-reduced-motion</code> 只有 2 个可能值：<code>no-preference</code> 和 <code>reduce</code>，在不支持的浏览器上该媒体查询不会生效。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\" alt=\"\" width=\"792\" height=\"515\" class=\"aligncenter size-full wp-image-1962\"></a>\n<h1>黑暗模式适配</h1>\n<p>黑暗模式可不是简单地切换到黑底白字这么简单。<strong>单纯地使用黑底白字会导致页面元素之间对比度过高，文字刺眼，反而降低了页面的可访问性。</strong>我在下面总结了几条应用在了 MDx 中的黑暗模式优化规则和 Google 推荐的优化规则：</p>\n<p><strong>一是避免黑底白字。</strong>黑底白字看起来真的很难受，事实上，深灰和浅灰是黑暗模式最好的配色。比较下方例子里的两段文本，毫无疑问深灰色背景和浅灰色文字搭配的样式的可读性要比黑底白字高很多。（p.s. 有时候这条规则在白底黑字时也适用）</p>\n<p><strong>二是更改部分元素的亮度和对比度以增强可读性。</strong>你可能已经注意到了，下面优化的例子里标题文字的颜色改变了。很明显，未优化的黑暗模式中标题可读性不如优化的版本。在实际中，我们通常可以通过 CSS 滤镜来实现这一更改。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    h1 {\r\n        /*反相颜色后再将色相旋转 180 度，使亮度反相*/\r\n        filter: invert(1) hue-rotate(180deg);\r\n    }\r\n}</pre>\n<p><strong>三是避免让图片过亮。</strong>未经处理的图片通常会导致过高的对比度，降低可读性。在 MDx 中，我选择降低图片的亮度来避免图片刺眼，而 Google 的建议则是使图片灰度，不过这会影响图片的整体观感。无论是哪一种方案，都可以使用 CSS 滤镜来轻松实现。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    img { \r\n        /*MDx 方案*/\r\n        filter: brightness(.8);\r\n        /*Google 方案*/\r\n        filter: grayscale(.5);\r\n    }\r\n}</pre>\n<div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是未优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是经过优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n</div>\n<h1>其他细节</h1>\n<p>还有一些细节，虽然简单，但不可或缺。我把一部分没有在上文提到的 MDx 中的细节列在了这里。</p>\n<p><strong>一是允许页面缩放。</strong>在开发响应式页面时，很多网站会在页面头部添加这样一个 <code>meta</code>：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"&gt;</pre>\n<p>这样的 <code>meta</code> 设定了页面的宽度，却也固定了页面的缩放比例，用户难以手动放大网页。<strong>这样的设置对一部分视力障碍用户非常不友好</strong>，以至于苹果决定在自家的浏览器上忽略禁止缩放的 <code>meta</code>。按照 Google 的推荐，如果你在 MDx 设置中启用了“允许页面缩放”，那么 MDx 会输出这样的 <code>meta</code> 标签，允许页面进行五倍以内的缩放：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=5\"&gt;</pre>\n<p><strong>尽管很多时候放大页面会导致页面结构被破坏，但这大大增强了页面的可访问性，利大于弊。</strong>因此，在 MDx 中，“允许页面缩放”是默认启用的。</p>\n<p><strong>二是在跨设备阅读时同步阅读记录。</strong>这属于 MDx 的“元老级”功能之一。注意到页面右上角的那个“在其他设备上继续阅读”的按钮了吗？如果你滚动页面后重新点击它，你会发现二维码发生变化了。通过在二维码中记录阅读进度，用户在扫描二维码切换设备阅读时，MDx 在新设备上会自动滚动到和原设备上一致的位置——好吧，目前基于百分比的算法在某些情况下可能不太准，但我已经设计了一个更复杂但更精确的阅读进度记录算法，之后就会更新到 MDx 中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\" alt=\"\" width=\"1000\" height=\"574\" class=\"aligncenter size-full wp-image-1976\"></a>\n<p><strong>三是避免 Web 字体阻塞渲染。</strong>如果你在页面中使用了 Web 字体，在字体加载完成之前，浏览器可能不会渲染任何文本，这就导致用户可能需要等待一段时间才能开始浏览网页。Google 推荐使用 <code>font-display: swap;</code> 来向浏览器指定网页的 Web 字体渲染策略。这一规则会提供一个比较短的等待周期，如果在这段时间内 Web 字体没有完成加载，那么浏览器会以 fallback 字体渲染文本。任意时刻一旦 Web 字体完成渲染，浏览器就会使用 Web 字体重新渲染文本。这在大多数情况下都能满足可访问性的需求。</p>\n<p><strong>四是确保 html 元素具有合适的 <code>lang</code> 属性。</strong>这一属性声明了页面的主要语言，浏览器可以据此调整渲染策略，或者触发自动翻译；屏幕阅读器也能更好地阅读网页。</p>\n<p><strong>五是确保页面主要内容在丢失/禁用了 Javascript 甚至 CSS 的情况下仍然可用。</strong>作为一个以内容为主的网站，MDx 在禁用了 Javascript 的情况下页面主要内容仍然可用。这不只是为了 SEO，更是为了保证页面的可访问性。的确，目前的情况下，如果开启了 Lazyload，MDx 在禁用 Javascript 的情况下图片的确无法显示，但我会在后续版本中尽可能的优化这一问题。</p>\n<h1>附录：媒体查询开发技巧</h1>\n<p>有的时候，光有 CSS 响应媒体查询还不够，我们可能需要在 Javascript 中实时响应媒体查询。用如下代码就可以很简单地响应媒体查询：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">let mql = window.matchMedia(\"(prefers-reduced-motion: reduce)\");\r\nmql.addListener(handleMediaChange);\r\n\r\n//在添加监听后先调用一次，获得当前查询结果\r\nhandleMediaChange(mql);\r\n\r\nfunction handleMediaChange(mql){\r\n    if(mql.matches){\r\n        //查询匹配\r\n    }else{\r\n        //查询不匹配\r\n    }\r\n}</pre>\n<p>在开发上述媒体查询的过程中，我们需要频繁地切换系统的相应模式或者调出打印窗口。<strong>实际上，Chrome 提供了更简单的调试方法：</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1946\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\" alt=\"\" width=\"723\" height=\"681\"></a>\n<p>只要在这里更改模式，相关媒体查询就能实时生效。这不会影响其他标签页，在关闭开发者工具之后也会自动恢复系统设置。</p>\n","link":"https://flyhigher.top/develop/1912.html"},{"title":"MDx Blog 现已随 MDx 1.9.5 发布","date":"2020-01-22 17:54:11","description":"<p>随着 MDx 发布 1.9.5 更新，<a href=\"https://mdxblog.flyhigher.top/\" rel=\"noopener noreferrer\" target=\"_blank\">MDx Blog</a> 现已建立。我将会在 MDx Blog 中分享一些开发故事并发布 MDx 更新日志。</p>","link":"https://flyhigher.top/diary/1905.html"},{"title":"GitHub 2019 统计无垠版","date":"2020-01-12 13:02:00","description":"\n<h1>缘起</h1>\n<p>2019 年底，我突发奇想想要自己统计一番 GitHub 上存储库的一些信息。尽管 GitHub 有自己的<a href=\"https://octoverse.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">年度统计</a>，我还是想试着自己爬取一下，说不定能挖出什么有意思的信息，何况这是我第一次有机会处理比较大量的数据，也算是一种学习的过程吧。于是花了一下午写了个简单的爬虫（时间都花在增加 Rate Limit 上了...），然后扔在了两台服务器上开始跑（GitHub  API 真是好文明）。</p>\n<p>从 2019.11.21 3 时到 2020.1.12 24 时的 52 天 21 小时内，我的爬虫一共爬取了<strong>与 2,024,705 个用户有关<sup>*</sup>的 14,651,923 个公共存储库的基础信息</strong>，平均每秒爬取 3.2 个存储库。据 GitHub 的官方数据计算，我爬取了大约 15% 的存储库信息，但由于封禁库和私有库的数量未知，我暂时无法确定我爬取的存储库占公共库的比例。同时由于存储库数量较多，基本可以认为爬取到的样本在时间尺度上已经足够随机，可以通过统计得出一般结论。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\" alt=\"\" width=\"700\" height=\"606\" class=\"aligncenter size-full wp-image-1892\"></a>\n<p>爬到自己了，合影.jpg</p>\n<p>那么下面就来看看统计出来的一些结果吧。爬虫的技术细节和数据集下载放在文末。</p>\n<p>* 指这些用户拥有至少一个库</p>\n<h1>统计信息</h1>\n<p><strong>以下统计结果均基于已放于文末的数据集。</strong>由于爬虫爬取的时间跨度长，加上我并没有完整爬取 GitHub 所有存储库，因此我<strong>不能保证以下统计结果符合真实情况</strong>，各位可以下载数据集或自行爬取进行验证。</p>\n<h2>一些数据</h2>\n<div>\n<div>\n<div>\n<span>3,120,930</span><br>总爬取用户数</div>\n<div>\n<span>44.7%</span><br>的存储库创建<br>自 Fork</div>\n<div>\n<span>6.59%</span><br>的账户被删除或<br>封禁<sup>1</sup>\n</div>\n<div>\n<span>23,913</span><br>单用户拥有最大<br>库数量<sup>2</sup>\n</div>\n</div>\n</div>\n<p><sup>1</sup> 基于用户 ID 规律合理推断<br><sup>2</sup> 统计范围仅限于当前数据集</p>\n<p>比较出乎我意料的是创建自 Fork 的存储库的占比。我预估这样的存储库占比不会太低，但没有想到能接近一半。此外单用户拥有最大库数量也大大超出了我的预期，<a href=\"https://github.com/pombredanne\" rel=\"noopener noreferrer\" target=\"_blank\">pombredanne</a> 这个用户名下拥有将近 24k 的存储库，不过绝大多数都是 Fork 来的，在情理之中。此外<strong>这个数据集中</strong>拥有最多存储库的账户其实是一个组织 <a href=\"https://github.com/gitpan\" rel=\"noopener noreferrer\" target=\"_blank\">gitpan</a>，这个组织拥有 36,377 个存储库。</p>\n<h2>语言</h2>\n<p><canvas></canvas><br>\n首先必须要说明的是，在这个榜单中我<strong>排除了 HTML 和 CSS</strong>，因为在严格意义上它们不属于“编程语言”。如果把它们计算进来的话，分别有 640,368 个和 361,425 个存储库的主要语言分别是 HTML 和 CSS，这样在这份榜单中它们可以排到第 6 和 第 10 名。JavaScript 毫无疑问获得第一，第二名 Python 的热度则和 JavaScript 相差将近一半。<strong>此外还有 2,448,486 个存储库未能识别出语言，占比 16.7%。</strong>在上面的榜单之外，与机器学习和数据科学相关的语言还有 Jupyter Notebook 排名第 13，R 排名 20，Julia 排名 43。</p>\n<p>说实话这份排名和 GitHub 官方的排名<strong>差别很大</strong>，除了前三名，后面的基本都不太一样。我的排名统计结果完全基于 GitHub 对于存储库的主要语言识别，加上我的存储库数据不完整，和官方的数据不同是很正常的，可以做一个参考，但大概率还是官方排名更加准确。</p>\n<h2>许可证</h2>\n<p><canvas></canvas></p>\n<p>自 GitHub 推出许可证功能以来，拥有许可证的存储库比例升升降降，却始终没有超过一半。<strong>选择一个合适的许可证对项目的良好发展真的很有帮助</strong>，要了解如何选择合适的许可证，请参阅<a href=\"https://www.runoob.com/w3cnote/open-source-license.html\" rel=\"noopener noreferrer\" target=\"_blank\">这篇文章</a>。</p>\n<p><canvas></canvas></p>\n<p>对于拥有许可证的存储库，MIT<del> 麻省理工许可证 </del>总是占比最大的；第二则是 Apache-2.0 许可证。此外，WTFPL 许可证也挤入了前 15 名。</p>\n<h2>星标</h2>\n<p><canvas></canvas><br>\nStar 数量毫无疑问是一个存储库受欢迎程度的体现，而 Star 数高的项目基本上大家都了解过。<strong>截至爬取结束时间</strong>，GitHub 中 Star 数最多的库是 <a href=\"https://github.com/freeCodeCamp/freeCodeCamp\" rel=\"noopener noreferrer\" target=\"_blank\">freeCodeCamp</a> <del>非常完美的驼峰命名法</del>，其次则是著名项目 <a href=\"https://github.com/996icu/996.ICU\" rel=\"noopener noreferrer\" target=\"_blank\">996.ICU</a>。<a href=\"https://github.com/vuejs/vue\" rel=\"noopener noreferrer\" target=\"_blank\">Vue</a> 现在的 Star 数已经稳压 <a href=\"https://github.com/facebook/react\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> 一头，Vue YES! 此外 <a href=\"https://github.com/sindresorhus/awesome\" rel=\"noopener noreferrer\" target=\"_blank\">awesome</a> 也挤进第七名。<br><canvas></canvas><br>\n由于 Star 需要时间积累，新项目的 Star 数量很可能是比不过老项目的，这就会导致有实力的新项目无法出现在榜单中。因此我还统计了日均 Star 数，试图通过日均 Star 数来反映项目受欢迎的程度。<strong>由于正热门的项目会比老牌热门项目有优势，这一项的统计范围是 2020-01-01 之前的所有存储库。</strong>996.ICU 和 freeCodeCamp 再次出现在前 10 名，而最近的热门项目 <a href=\"https://github.com/wenyan-lang/wenyan\" rel=\"noopener noreferrer\" target=\"_blank\">wenyan</a> 则飙升至第 2 名。此外还有 <a href=\"https://github.com/menzi11/BullshitGenerator\" rel=\"noopener noreferrer\" target=\"_blank\">BullshitGenerator</a>，即最近热门的“狗屁不通文章生成器”和 <a href=\"https://github.com/evil-huawei/evil-huawei\" rel=\"noopener noreferrer\" target=\"_blank\">evil-huawei</a> 分列第 3 和第 5 名。<br><canvas></canvas><br>\n说实话这个曲线<strong>比我预估的陡多了。</strong>你可能已经注意到了，这个图表的横轴不是均匀缩放的，实际上曲线要比看起来陡很多。同时受爬取方式的影响，GitHub 中 Star 数较少的存储库数量远比我爬取到的多。也就是说，<strong>实际情况下曲线远比这个图表上的陡。</strong>拿点 Star 不容易啊。</p>\n<h2>名称</h2>\n<p><canvas></canvas><br>\n终于知道了原来存储库的名称是有长度限制的...尽管最长有 100 位，<strong>大部分人还是喜欢 8 位长的存储库名。</strong>此外 1 位长的名称也比我预估的要多一些。举几个存储库名称长度为 100 的例子吧。</p>\n<ul>\n<li>testing-something-elsetesting-something-elsetesting-something-elsetesting-something-elsetesting-some</li>\n<li>acts_as_validated_config_so_app_will_not_run_in_random_situation_and_qa_gays_will_not_cry_to_you_whe</li>\n<li>............................................________-....................................-.---......</li>\n<li>----------------------------------------------------------------------------------------------------</li>\n<li>nyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyan</li>\n</ul>\n<p>...创造力有够丰富的。</p>\n<p><canvas></canvas></p>\n<p>最近 GitHub 上有一种奇怪的风气，那就是建立 Awesome 合集<del>骗 Star</del>。看起来 Awesome 存储库满地都是，甚至还出现了关于 Awesome 的 Awesome 合集这种迷惑行为。于是我统计了一下，<del>还好，</del>占比<del>才</del> 0.5% 不到<del>，Awesomer 们任重而道远呐</del>。</p>\n<p><canvas></canvas></p>\n<p>尽管要在 github.io 上托管网站，存储库不一定要以 .github.io 结尾，但我还是统计了一下。拥有这类存储库的用户比我预想的要少一些，看来还有很多人没有完全发挥 GitHub 的完整实力啊<del>（比如我 Doge）</del>。同时<strong>这类存储库在所有存储库中占比 1.12%</strong>，看起来不多<del>，不过至少比 Awesome 多</del>。<br><canvas></canvas><br>\n看得出来 GitHub 对于用户名长度的限制是 1-40 位。用户名最短的 27 位占据了 <code>A-Z</code> 外加 <code>-</code> 的所有可能，而用户名最长的则是一个组织 <a href=\"https://github.com/UOIT-RESEARCH-database-information-group\" rel=\"noopener noreferrer\" target=\"_blank\">UOIT-RESEARCH-database-information-group</a>。不知道是巧合还是某种规律，<strong>最受欢迎的用户名长度和存储库名称长度一样，都是 8</strong>，有点意思。</p>\n<h2>创建时间</h2>\n<p><canvas></canvas><br>\n由于我并没有完整爬取所有存储库，我只能以相对值来统计每月新增存储库数量的变化趋势。<strong>在这个图表中，我将 2017-09 的数据设为了 100%。</strong>你一定一眼就能注意到 2017 年 6,7,8 月的“一柱擎天”。<del datetime=\"2020-02-05T09:18:30+00:00\">我第一次看到这个数据的时候的确愣了一下，不过就着这条新闻看就能明白为什么了：<strong>2017 年 6 月微软收购 GitHub。</strong></del></p>\n<blockquote><p>重新确认了一下，微软收购 GitHub 比这个高峰晚了一年，目前我对这个高峰没有什么很好的解释，如果你有什么思路的话欢迎评论。</p></blockquote>\n<p><strong>需要注意的是这张图表中我排除了 Fork 存储库</strong>，因为 Fork 存储库在 API 中的创建时间是原始存储库的时间，会影响整体趋势。此外，GitHub 中还有一个创建于 2007 年 10 月 29 日的存储库，那就是 <code>id: 1</code> 的...</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"mojombo\" data-mdxgithubp=\"grit\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/mojombo/grit\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>而它的创建者正是 GitHub 的创始人之一 Tom Preston-Werner。</p>\n<h1>一些有趣的结果</h1>\n<p>当初打算自己爬的目的之一就是想看看能不能挖出什么有意思的信息，结果真的有一些不挖不知道的信息。</p>\n<h2>奇怪的存储库</h2>\n<p>在爬取到的所有存储库中，<strong>有 3 个存储库是“无主”的</strong>，即它们的 owner 属性为空。这三个存储库的基本信息如下。</p>\n<div class=\"mdui-table-fluid mdui-table-hoverable\"><table class=\"mdui-table\">\n<thead><tr>\n<th>ID</th>\n<th>名称</th>\n<th>Forked</th>\n<th>Star</th>\n<th>语言</th>\n<th>许可证</th>\n<th>创建于</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>72385291</td>\n<td>vscode-redprl</td>\n<td>否</td>\n<td>10</td>\n<td>TypeScript</td>\n<td>apache-2.0</td>\n<td>2016-10-31 08:50:01</td>\n</tr>\n<tr>\n<td>181218346</td>\n<td>electron-sys</td>\n<td>否</td>\n<td>10</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-14 03:20:56</td>\n</tr>\n<tr>\n<td>181391880</td>\n<td>node-sys</td>\n<td>否</td>\n<td>6</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-15 09:33:08</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong>更奇怪的是这三个存储库“无主”的情况还不一样。</strong>第一个存储库可以通过 <code>/repositories</code> 这个 GitHub API 找到， <a href=\"https://api.github.com/repositories?since=72385290\" target=\"_blank\" rel=\"noopener noreferrer\">这个链接</a>中的第一个存储库就是它；而其余两个存储库甚至无法在 <code>/repositories</code> API 中找到。不过就算能在 API 中找到第一个存储库，它的 <code>html_url</code>，即 <code>https://github.com//vscode-redprl</code> 仍然是不可访问的。这可能是 GitHub 早期的一个 Bug 导致的，不过我仍然对爬虫是如何找到这三个存储库的以及这些 Stars 是哪里来的感到好奇。</p>\n<h2>奇怪的用户名</h2>\n<p>在爬虫爬了一段时间以后，API 中突然开始出现大量的以 fdp 开头的 18 位乱码作为用户名的用户。这些用户拥有的存储库和 starred 的存储库都为 0，而他们的 <code>html_url</code> 为 404。以下是几个例子。</p>\n<ul>\n<li>fdpEpolGCEdQX4ZlRJ</li>\n<li>fdp8XaVrdtmDZnO5pR</li>\n<li>fdp8XRAGnwAOkTr2Ya</li>\n</ul>\n<p>由于我的爬虫并没有超过 Rate Limit，所以我排除了这是污染数据的可能。我怀疑这可能是某种 Bot 账户，于是一边更新爬虫过滤掉了这些用户，一边给 GitHub 支持发邮件问了具体情况。过了两天 GitHub 回复我说这些是<strong>被自动判为可疑进而被封禁的用户</strong>（原话是 they have been flagged by our automated measures for detecting suspicious behavior）。<del>想到我正在疯狂爬取 GitHub，突然害怕.webp</del></p>\n<p>行吧。</p>\n<h1>技术细节</h1>\n<p>爬虫使用 Python3 编写，数据库使用 MySQL。爬虫共使用了 4 个 API Token，在两台服务器上分布式爬取。爬取思路为：</p>\n<ol>\n<li>通过 <code>/users</code> API 遍历用户，每个请求最多获取 30 个用户信息</li>\n<li>循环 30 个用户，分别获取 <code>/users/&lt;user_name&gt;/starred</code> 和 <code>/users/&lt;user_name&gt;/repos</code> API 中的存储库信息，每个请求最多获取 100 个存储库信息，超过 100 个的分页获取</li>\n<li>提取存储库信息，插入数据库。对于已存在的存储库，更新数据</li>\n<li>获取下 30 个用户信息</li>\n</ol>\n<p>由于爬取过程中我多次调整了爬虫逻辑，爬虫爬取到的用户 ID 区间并非连续的，具体区间为1-839586, 14800001-14885493 及 28965251-31161101。</p>\n<h1>免责声明</h1>\n<p>本站会尽可能地提供准确信息，但本站不对此文章中信息的准确性和即时性及带来的任何影响负责。</p>\n<p>本站不代表 GitHub 官方，本文仅供学习之用，请不要将本文内容直接用于任何商业项目中。</p>\n<h1>数据集下载</h1>\n<p>导出的 SQL 文件大约为 1.38GB，全部放在了 GitHub 上（在危险的边缘试探.webp</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"github-analysis-2019\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/github-analysis-2019\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>此外我也提供了 MEGA 下载，链接<a href=\"https://mega.nz/#F!juxm3A6T!7Vwpzi82W1OFrqTLu1A1pQ\">在这里</a>。</p>\n","link":"https://flyhigher.top/develop/1564.html"},{"title":"Milkice 跨年红包解谜 Writeup 及无垠跨年红包解谜答案","date":"2020-01-02 04:29:19","description":"\n<blockquote><p><del>又到了水文章的时间呢</del></p></blockquote>\n<p>先说明一下，这篇文章原本不是在计划中的，而原来说好的「在路上的两篇」文章<del>绝对不会咕</del>。我自己的红包答案本来打算直接塞在年度总结里的，结果发现稍微有些长，再加上我还花了一些时间解了<a href=\"https://milkice.me/\">奶冰</a>的红包解谜游戏，就打算把两个解谜过程放在一起单独写一篇文章。<del>真是个水文章的好理由</del>（被打死</p>\n<h1>奶<del> 子 </del>冰的红包</h1>\n<p>奶冰的红包题目比我的难多了，所以让我们先从难的开始吧。首先看一下<a href=\"https://milkice.me/2019/12/31/2019-summary/\">题目</a>：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1524\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\" alt=\"\" width=\"746\" height=\"410\"></a>\n<p>入口是 <code>happy.2020.milkice.me</code>，扔到浏览器里面表示找不到 IP，那么大概率就是 DNS 的 TXT 记录了，查一下得到 <code>nb2hi4dthixs63ljnrvwsy3ffzwwkl3tivrvezluomxxg5dsmvqw2ltqmnqxa3th</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1525\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\" alt=\"\" width=\"896\" height=\"278\"></a>\n<p>第一眼没看出来是什么编码，直觉是 BaseXX 系列的编码，加上提示“不只有 Base64”，可以推断出是 Base32，转大写解码得到 <code>https://milkice.me/sEcRets/stream.pcapng</code>。是个 URL，下载得到一个 Wireshark 文件，打开一看是和某 USB 设备的通讯抓包。<del>不会做，不做了。</del></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1526\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\" alt=\"\" width=\"1500\" height=\"813\"></a>\n<p>奶冰提示我“Google 上搜得到”，结合第二条提示搜索“wacom pcapng”找到了<a href=\"https://blogs.tunelko.com/2017/02/05/bitsctf-tom-and-jerry-50-points/\">这篇文章</a>（<del>这™就是答案啊</del>）。看起来是一样的套路，即通过解析数据得到数位板上画的内容，于是按文章的思路筛选出数位板发给主机的数据，导出，然后再用 tshark 导出文本数据。本来我想直接用文章中的 POC 的，结果折腾半天因为源的蜜汁原因库没装上，于是按文章中给出的数据结构自己写了段代码，分别导出 X、Y 轴数据扔进 Excel 画散点图。（<del>别问我为什么用 Excel，因为我手边没有更好的工具了</del>）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1528\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\" alt=\"\" width=\"1280\" height=\"530\"></a>\n<p><span>翻车现场之一</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1539\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\" alt=\"\" width=\"1000\" height=\"286\"></a>\n<p><span>懵逼奶冰.webp</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1533\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\" alt=\"\" width=\"1500\" height=\"462\"></a>\n<p>看得出有手写文字，不过是上下颠倒的，翻转图片得 <code>https://milkice.me/2020/uso.zip</code>。是个 zip，下载打开一看，有密码。<del>不会解，不做了。</del> 第一反应是暴力解密码，但是暴力跑了 15 分钟还是没有跑出来。暴力太不优雅了，肯定不是正确思路，但奶冰什么都不肯说了。不过在这时我终于发现第一个红包口令码就藏在压缩包的注释中，Get。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1544\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\" alt=\"\" width=\"806\" height=\"593\"></a>\n<p>然而题还没解完，回去看提示，看到提供了 osu 谱面下载，于是打算不管怎么样先下载来看看。然而 osu 谱面下载要登录，只好又花了几分钟找到第三方站点，成功下载。这时候可以注意到 uso.zip 里有个同名文件（432314 Mike Greene - Bill Nye the Science Guy Theme Song (Chinese Intro).osz），可以联想到是明文攻击。好吧，上 ARCHPR，十秒解出。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1530\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\" alt=\"\" width=\"462\" height=\"643\"></a>\n<p><span>现场还原.jpg</span></p>\n<p>.osz 文件并不是明文，猜测是压缩包（和 .pptx 一个思路嘛），于是改后缀 .zip 顺利打开。然后红包口令码就藏在奶冰的 .osu 文件中了，由提示可知是明文，打开即可得到。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1542\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\" alt=\"\" width=\"457\" height=\"255\"></a>\n<h1>我的红包</h1>\n<p>相比起来<a href=\"https://flyhigher.top/diary/1464.html\">我的题目</a>就简单很多了嘛...三天时间一共发出了 25 个红包，包括一位重复领取的🌚，比前几年还是多了一些的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\" alt=\"\" width=\"500\" height=\"306\" class=\"aligncenter size-full wp-image-1554\"></a>\n<p><span>这位同学以后请不要多次领取🌚</span></p>\n<p>那么来看看答案吧。</p>\n<h2>第一阶段</h2>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>首先观察字符串，可以发现 <code>.</code> <code>/</code> <code>_</code> 等一些 ASCII 字符原样留在了字符串中，而其他字符被由 <code>=</code> 和十六进制构成的某种编码所替代。如果你正好有所了解，你应该能认出这是 Quoted-printable 编码，这是一种常用于邮件中的编码，可以用<a href=\"https://mothereff.in/quoted-printable\">这个页面</a>解码。如果你不了解，你也应该可以发现这种编码和 URL 编码非常相似。如果你把 <code>=</code> 替换为 <code>%</code>，那么你就可以用各种方法顺利地把它按 URL 编码来进行解码，最后可以得到 <code>αхtоn.іm/соdе_оf_2020_⒈mρз</code>。这个字符串里大部分字符都不是 ASCII 字符，只是长得像而已。根据第一个提示“全是 ASCII 字符”，按样子把字符串用 ASCII 字符抄一遍，可以得到最终 URL 为 <code>axton.im/code_of_2020_1.mp3</code>。</p>\n<h2>第二阶段</h2>\n<p>下载音频，可以听出音频是经过某种处理的白噪音。白噪音的特点是各频段的功率都均匀分布，在白噪音上做文章，很容易就可以联想到线索藏在频谱中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1534\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\" alt=\"\" width=\"1200\" height=\"719\"></a>\n<p>频谱被处理成了 24x3 的网格，结合第二条提示“24x3，横向读取”可以推断出是将频谱当作二进制读取，得到 <code>01111001 01110010 01100011 00101110 01101101 01100101 00101111 00110010 00110000</code>，转为 ASCII 字符可得 <code>yrc.me/20</code>。</p>\n<h2>第三阶段</h2>\n<p>打开上一步得到的页面，提示要求输入十位数密码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1536\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\" alt=\"\" width=\"663\" height=\"460\"></a>\n<p>如果你在上一步注意到了这个音频文件奇怪的属性，你可以反应过来这里的密码就是 <code>2000202020</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1537\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\" alt=\"\" width=\"421\" height=\"651\"></a>\n<p>如果你没有注意到，查看页面代码可以看到一条注释 <code>&lt;!-- Tips: the attribute of the audio --&gt;</code> 将你引导向音频文件的属性。输入密码，解锁即可进入下一步。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1535\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\" alt=\"\" width=\"397\" height=\"223\"></a>\n<h2>第四阶段</h2>\n<p>可以看到是一张图片，内容为“<del>.JPG</del>”和“.ZIP”。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-1532\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n<p>和去年一样的套路，下载图片，将后缀名改为 .zip 然后打开，可以看到 README.txt。</p>\n<h2>最后一步</h2>\n<p>查看 README.txt 的内容，可以了解到需要去 🤔.axton.cc 获取红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1538\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\" alt=\"\" width=\"1131\" height=\"278\"></a>\n<p>扔到浏览器里会出现奶冰同款找不到 IP，于是可以联想到 TXT 记录。唯一的问题是 🤔 这个 Emoji 需要如何处理。域名使用 Punycode 将 Unicode 字符转换为 ASCII 字符，特点是以 <code>xn--</code> 开头。如果你把上面这个域名扔进浏览器，你会发现它变成了 <code>xn--wp9h.axton.cc</code>。然后查询 TXT 记录，即可得到红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1527\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\" alt=\"\" width=\"804\" height=\"557\"></a>\n","link":"https://flyhigher.top/develop/1519.html"},{"title":"无垠 2019 年度总结","date":"2019-12-29 12:25:52","description":"\n<p>又是时间飞快的一年...写 2018 总结的情景似乎还在眼前，转眼居然已经到 2019 年末了。</p>\n<p>2019 年，发生了太多事情，包括真的转折了人生的高考，这也导致我博客更新的不多（难以置信居然才更了两篇...），不过两篇技术性文章已经在路上了，可以期待一下。</p>\n<p>2019 年我也学了不少东西（单指技术方面），比如终于认真学了 Vue（但是还要练手）。书买了一大堆，看完的倒是没几本orz</p>\n<p>呼，好吧，是时候回顾一下充满坎坷的这一年了。2019 年还剩下最后两天，希望 2020 年，我能做得更好。</p>\n<h1>一些数据</h1>\n<p>照惯例先来看看一些数据吧。今年是统计系统完整统计了的第二年，终于可以和去年的数据比较一下了。以下数据的统计范围是 2019年1月1日0时至 2019年12月29日20时。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 26,901 (<span>+4%</span>)，年 PV 76,583 (<span>+3%</span>)，日均 UV 73.7，平均停留时间 5分13秒 (<span>-13.8%</span>)，平均跳出率 53% (<span>+20.5%</span>)。一年有效文章数 2 (<span>-50%</span>)，新增评论 439 条。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\" alt=\"\" width=\"1000\" height=\"1143\" class=\"aligncenter size-full wp-image-1511\"></a>\n<p>有趣的是今年文章数腰斩，访问数反而小有提升。<del>如果我哪天不更新了，访问数是不是可以无限大呢？</del></p>\n<p>今年博客最大的改动就是把整体风格切换到了 Material Design 2（当然这是 <a href=\"https://flyhigher.top/develop/788.html\">MDx</a> 中的可选功能，给自己打个广告2333），此外还有比较失败的 WebP 改造计划，因为和缓存冲突已经回滚了。<a href=\"https://flyhigher.top/develop/1245.html\">ABS 系统</a>进展不大，主要是真的没有太多时间，还是要再学习一个。</p>\n<h2>个人主页</h2>\n<p>虽然个人主页的 TODO List 列了老长，但今年完全没有更新，也没有推广，从今年 8 月底开始还莫名被某墙认证了，直到 11 月底才恢复，于是今年总访问量比去年少了很多，</p>\n<p>有多少呢？这么少：总 UV 2,141 (<span>-65.9%</span>)，总 PV 2,744 (<span>-66.6%</span>)，日均 UV 6 (<span>-65.9%</span>)，平均停留时间 62秒 (<span>+19.2%</span>)。主要来源是知乎和 V2EX，还有一些甚至是从微信来的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\" alt=\"\" width=\"1000\" height=\"1103\" class=\"aligncenter size-full wp-image-1512\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 8 次，新增 171 commits，2 种语言的翻译，Star 数增加了 175，现有 408。感谢所有人的支持，尤其是 <a href=\"https://github.com/Sn0bzy\" rel=\"noopener noreferrer\" target=\"_blank\">Hasan CAN</a>, <a href=\"https://github.com/yechs\" rel=\"noopener noreferrer\" target=\"_blank\">Ye Shu</a>, <a href=\"https://github.com/StarryLeo\" rel=\"noopener noreferrer\" target=\"_blank\">StarryLeo</a>, <a href=\"https://github.com/DCTewi\" rel=\"noopener noreferrer\" target=\"_blank\">冻葱Tewi</a>, <a href=\"https://github.com/syfxlin\" rel=\"noopener noreferrer\" target=\"_blank\">Otstar Lin</a> 等为 MDx 做出了不小贡献的你们。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：<a href=\"https://flyhigher.top/photograph/1309.html\">上手</a> DJI OSMO Pocket</li>\n<li>四月：最后一次参加浙江省普通高中学业水平考试</li>\n<li>五月：MDx 喜提 300 Stars</li>\n<li>六月：高考 <del>炸了，差亿点点上浙大</del>\n</li>\n<li>六月：入手了 Oneplus 7 Pro</li>\n<li>六月：和同学一起去成都重庆旅行</li>\n<li>六月：第一次近距离感受到地震</li>\n<li>六月：<a href=\"https://flyhigher.top/diary/1411.html\">入手</a>了一台雷蛇灵刃 15，目前是主力机</li>\n<li>七月：参与组织 THE Hack 2019 活动</li>\n<li>七月：面基了 <a href=\"https://itroy.cc/\" rel=\"noopener noreferrer\" target=\"_blank\">Tory</a>, Bie Shi 和 <a href=\"https://oxz.me/\" rel=\"noopener noreferrer\" target=\"_blank\">FHYunCai</a>\n</li>\n<li>八月：一个人去厦门武汉转了一圈，拍了自己的第一个 Vlog</li>\n<li>八月：入手了一个 Kindle Paperwhite 4，没有泡面可以压，于是用来看英文小说了</li>\n<li>八月：加入 TEDxNingbo 志愿者团队</li>\n<li>八月：和 Ralph 面基</li>\n<li>八月：入手了一个 Yubikey</li>\n<li>九月：人生第一次参加雅思考试 <del>7分，蛮开心的</del>\n</li>\n<li>十月：入手了一个 Samsung Galaxy Watch Active 2 <del>觉得不值</del>\n</li>\n<li>十一月：MDx 达到 400 Stars</li>\n<li>十一月：为 TEDxNingbo 设计开发的 H5 上线</li>\n<li>十一月：入手了第一台胶片相机，试图入坑胶片摄影</li>\n<li>十一月：参加 TEDxNingbo 2019 大会</li>\n<li>十二月：<del>我 Cytus II 入门了</del>\n</li>\n</ul>\n<h1>跨年红包</h1>\n<p>这算「传统习俗」了。和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2020年1月2日。</p>\n<p>今年的解谜旅程，从下面这个字符串开始。</p>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>由于今年的题目比以前稍微难了一些，所以今年的红包金额还是比较大的，而且不限量，尽你所能试一试吧。</p>\n<p>一点你可能用得上的提示：URL 里全是 ASCII 字符 / 24x3，横向读取。</p>\n<p><a href=\"https://flyhigher.top/develop/1519.html\">答案</a>已公布。</p>\n<h1>跨年海报</h1>\n<p>这算是另一个「传统习俗」（笑）。因为我有做跨年海报的习惯，所以以下就是今年份的海报啦。</p>\n<p>用了 C4D+PS，还有我的一整个下午。</p>\n<p>提前祝各位新年快乐！</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter wp-image-1467 size-large\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n","link":"https://flyhigher.top/diary/1464.html"}]