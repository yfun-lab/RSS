[{"title":"日本正宗传统的关东煮是什么样子，味道和做法又和国内经常吃到的有什么不一样？","date":"2022-03-14 11:08:10","description":"\n<p><img src=\"https://pic3.zhimg.com/v2-d91217e67b843646b933a678b4f6fab3_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"721\" data-watermark=\"original\" data-original-src=\"v2-d91217e67b843646b933a678b4f6fab3\" data-watermark-src=\"v2-ecb8da1d6faf83ca3d61a6eef1ee3678\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"r4kT0eYT\"> “日本料理是水做的”，关东煮便是最佳佐证。</p>\n<p data-pid=\"ZEQDLxCN\">第一次去日本还是大学的时候，抵达东京后吃的第一样东西，便是罗森便利店的白萝卜关东煮，记得清清楚楚，70日元。</p>\n<p data-pid=\"Ft9TiyUW\">那时候日元汇率高，只觉得好吃，又惊呼好贵。这么一小块白萝卜竟要6块钱！</p>\n<p data-pid=\"JaZlYr1j\">萝卜是当之无愧的王牌，无论什么网站的排名调查，它永远位列“最常放的关东煮食材”第一名。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-a5c4e7d84f2de8b85bdf4ac8b99ef615_720w.png?source=b1748391?rss\" data-caption=\"大根（白萝卜）永远第一\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"673\" data-watermark=\"original\" data-original-src=\"v2-a5c4e7d84f2de8b85bdf4ac8b99ef615\" data-watermark-src=\"v2-d07fa4901a1cf1bb653357c33442b6de\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"oIIPyCHd\">由此，我渐渐爱上了关东煮，但日语里为何会叫“おでん”呢？看似跟关东煮八杆子打不着。</p>\n<p data-pid=\"bochHKD8\">“御田（おでん）”原本是“田楽”的另一种叫法。田楽是指豆腐为主的原材料串在木签上，烧烤后涂上特制的甜味增。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-8f307251fccab35515638f7003bf1a64_720w.jpg?source=b1748391?rss\" data-caption=\"田楽 看起来跟关东煮完全不像吧？\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" data-watermark=\"original\" data-original-src=\"v2-8f307251fccab35515638f7003bf1a64\" data-watermark-src=\"v2-ceeb94187aeec34d5ee090188f41beb6\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"dWj7XAQ3\">进入江户时代后，它作为街边快餐的一种深受大家喜爱，渐渐演化成炖煮的形式，现在无论小摊、居酒屋还是便利店、家庭餐桌，关东煮现在可谓无处不在。</p>\n<p data-pid=\"iR2hJOh6\">可“田楽”和“御田”明明就像两个东西，到底是怎么演化的呢？</p>\n<p data-pid=\"pm9LXgyZ\">首先是“田楽”的食材从豆腐，扩展到茄子、魔芋、鱼、芋头等等。接着是制作方式由烤变成在高汤里煮，盛出来之后再抹酱。</p>\n<p data-pid=\"zCO1dKk0\">真正的转变是大正时期传到关西之后，为了和“味增田楽”做区别，关西人就把这种食物称作“关东煮”，即关东料理人带来的煮物。又经历一番改良重新传回关东，变成了如今的“おでん”，主流的蘸酱是黄芥末。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-0a06861233eb714135308d6a110a997f_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1078\" data-rawheight=\"1102\" data-watermark=\"original\" data-original-src=\"v2-0a06861233eb714135308d6a110a997f\" data-watermark-src=\"v2-51bb9cd63d7f175f0d231e9eb8065629\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"5VT-DimE\">但关东煮的急速发展离不开食品工业化，战后经济复苏，各种家庭方便食物层出不穷，关东煮的汤底，也只需要丢进高汤料包，加一点“味之素”和酱油调味就行了。</p>\n<p data-pid=\"xK5LV8t_\">711就依靠关东煮、油炸小吃、便当、饭团等“日本基础产品”获得空前扩张，让客人最方便地吃到“家常菜口味”。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-74034ae6ba6df2cd138e177b7e46f880_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"719\" data-watermark=\"original\" data-original-src=\"v2-74034ae6ba6df2cd138e177b7e46f880\" data-watermark-src=\"v2-b0b4e2d655cde67eecaa074311619f20\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"haA0Dx4f\">上海古北有一家以关东煮闻名的居酒屋，在有些寒意料峭的春天时去过。其他料理印象不深，唯有那锅关东煮让人挺想重访。</p>\n<p data-pid=\"Wkf4m_qA\">冬天怕变凉的话，可以一口小锅端到面前边温着边吃，其余时节盛在大碗里就行。5种拼盘68元，有特别喜欢的食材就提出，其余交给师傅搭配。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-0c10b0388b4b28e5905333cbc1946373_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"721\" data-watermark=\"original\" data-original-src=\"v2-0c10b0388b4b28e5905333cbc1946373\" data-watermark-src=\"v2-30ac95d086d49c1c69305c5ef1befa36\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"QG6sYmS5\">白萝卜和豆腐是必然会出现的两大金刚，像海绵一样吸入高汤精华，本身口感又柔滑。比较意外的是牛舌，柔软毫无腥味。</p>\n<p data-pid=\"Ue5cg4sD\">还有一样很美味的是牛蒡鱼饼。牛蒡外面包裹着鱼肉茸后油炸，再放进关东煮的汤汁里煮。</p>\n<p data-pid=\"4iJ8yWyD\">要知道，油炸过的东西本身很香，如果不是追求脆生的口感，再煨汤就更香。同理就像湖州人爱的红烧素鸡和爆鱼。只不过前者清鲜，后者浓郁。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-db40d7f46db010e85d9c430d9085dda6_720w.jpg?source=b1748391?rss\" data-caption=\"竹轮、牛舌、牛蒡鱼饼\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"721\" data-watermark=\"original\" data-original-src=\"v2-db40d7f46db010e85d9c430d9085dda6\" data-watermark-src=\"v2-721158c294ec64ceb67390e9d95367b0\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"O7EJNupC\">关东煮是润物细无声的美学。</p>\n<p data-pid=\"J3CnW8yH\">跟发酵不同，它的美好不是时间带来的，其中的物理变化远胜于化学变化，更像是一种物质渗透和交换，让静止的时间去入味。</p>\n<p data-pid=\"nbT5lw6U\">如果你打开日本美食评论网站tabelog，会发现食物分类里面，只有关东煮（おでん）自成一类，后面连一个小尾巴都没有。这也从侧面说明了关东煮的存在多么特殊。</p>\n<p><img src=\"https://pica.zhimg.com/v2-75de512a839fd42314d6a88dfff1e7ac_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-75de512a839fd42314d6a88dfff1e7ac\" data-watermark-src=\"v2-d5cd6192129ceab5efcb4305f3e65b3d\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"cyuAcbSj\">然而在大多数情况下，关东煮只是锦上添花的东西，类似于一道菜，而非单独的一顿料理，我在香川县吃乌冬面的时候常会遇到，关东煮作为乌冬上来前的暖胃前菜。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-830251a43c4bcba768cf2f746a2fe608_720w.jpg?source=b1748391?rss\" data-caption=\"在香川吃乌冬面前先来一份关东煮\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"721\" data-watermark=\"original\" data-original-src=\"v2-830251a43c4bcba768cf2f746a2fe608\" data-watermark-src=\"v2-1f41feb1f2fd079a41e31256fe14f695\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"X1K140-G\">专门提供关东煮的店也有，但终归比较小众，更不受游客青睐。什么吗？不就是萝卜豆腐、竹轮魔芋，没有让人眼前一亮的高级食材，照片拍出来平平无奇，发朋友圈都不会有人点赞的。</p>\n<p data-pid=\"ViOHBdzN\">可是，它的美好就在于它的平平无奇，会让人觉得“好温暖啊！”而非“好吃得不得了”。</p>\n<p><img src=\"https://pica.zhimg.com/v2-8a5272679e030f17eea8e7f5bbf8c074_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"721\" data-watermark=\"original\" data-original-src=\"v2-8a5272679e030f17eea8e7f5bbf8c074\" data-watermark-src=\"v2-628b9ce3487b09935d894ba2da1c26e3\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"mJCxRC5o\">几年前在东京和朋友约过一间银座的关东煮专门店，叫“田中”。当时觉得挺稀奇的，有一点高级感的关东煮，坐在吧台喝着清酒，慢慢吃，会是怎样一种感觉呢？</p>\n<p><img src=\"https://pic1.zhimg.com/v2-c6442497efb3542a48957295c4092c30_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" data-watermark=\"original\" data-original-src=\"v2-c6442497efb3542a48957295c4092c30\" data-watermark-src=\"v2-a01bf7e59639aa24e916eaa939be8ffb\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-329a7a70f8f932335708a17460f3fef3_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" data-watermark=\"original\" data-original-src=\"v2-329a7a70f8f932335708a17460f3fef3\" data-watermark-src=\"v2-6863fadc25d3f0daaf0a7b4cabebdee9\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"2kFvqNVi\">专门店还是有两把刷子的，除了常见的基本款，还有卷心菜包肉、豆腐皮（湯葉）、扇贝。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-8740ab20fdc3ff0d2ca5c3619c56c9fc_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"721\" data-watermark=\"original\" data-original-src=\"v2-8740ab20fdc3ff0d2ca5c3619c56c9fc\" data-watermark-src=\"v2-5ab8b3ef39b98410e9c20c1c5bcb7edf\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"PjD87q5S\">最好吃的是混入昆布、玉米、胡萝卜等蔬菜碎的油炸豆腐。装盘的时候再加上芦笋、青菜等配菜。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-e02b489821820a119bb56cd88e887ec4_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"721\" data-watermark=\"original\" data-original-src=\"v2-e02b489821820a119bb56cd88e887ec4\" data-watermark-src=\"v2-cf1861d7c248c89243d0cc72c697cd92\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"o14o7dmr\">溏心的半熟鸡蛋也令人陶醉。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-afc7d34c8eb75e1ed063be9ef34a5f16_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"721\" data-watermark=\"original\" data-original-src=\"v2-afc7d34c8eb75e1ed063be9ef34a5f16\" data-watermark-src=\"v2-025e9f78eebbaa80af8f2abf129a37c3\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"3mzVsHd4\">其他几位客人都像是熟客，一人一大杯啤酒，跟老板聊得不亦乐乎。在酒精的作用下，大家脸颊都变得红润起来。</p>\n<p><img src=\"https://pica.zhimg.com/v2-899342f85fd4dc7b34f3467762e5e428_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-899342f85fd4dc7b34f3467762e5e428\" data-watermark-src=\"v2-ebfd005872f23ee7c9e7e109887ebb65\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"KxBhWu2d\">跟国内的应用场景完全不同，日本人喜欢吃着关东煮喝酒，初见觉得很奇怪，就像看到用荞麦面下酒一样不可思议。</p>\n<p data-pid=\"2i6_1ugN\">它们明明更像炖菜和主食啊？作为下酒菜还真挺别具一格。与其说“下酒”，更多是在喝酒前垫垫肚子的意思。</p>\n<p data-pid=\"NUez4VY-\">这么说来，日本人还是真是想方设法、为喝酒而喝酒啊！</p>\n<p><img src=\"https://pic2.zhimg.com/v2-1bd83dd7a4c6a490efc3693feed8a1da_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"721\" data-watermark=\"original\" data-original-src=\"v2-1bd83dd7a4c6a490efc3693feed8a1da\" data-watermark-src=\"v2-d9ee6195e48f9eb453836fa07c2d7afd\" data-private-watermark-src=\"\"></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/anjingymm1017?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">叶酱的孤独星球</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/21856189/answer/2385012314?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">80 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/266008028?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">日本当地的小吃有什么让你印象深刻?</a><br><a href=\"http://www.zhihu.com/question/26453089?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何在中国开一家正宗的日本拉面店？</a><br>\n","link":"http://www.zhihu.com/question/21856189/answer/2385012314?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"当破裂的感情，怎样回到刚开始的时候？没离婚，没有爱，没有关心，甚至还觉得你虚伪，这样的婚姻还能过吗？","date":"2022-03-14 09:55:58","description":"\n<p data-pid=\"U85Wr4Rn\">你这种情况，让我想到了我一个女学员：</p>\n<p data-pid=\"zEHLbpVD\">这位女学员说10年前，那时候老公是她的客户，有次谈判，这个男人侃侃而谈的样子，让她一下动了心。</p>\n<p data-pid=\"pZAgODfz\">她主动要了对方的微信，开始约会。</p>\n<p data-pid=\"OtcOYM5R\"><b>约会的时候，老公谈古论今，她觉得老公知识渊博，老公呢，觉得她是特别懂自己，还获得了很多认可。</b></p>\n<p data-pid=\"xWnO_O9B\">后来他们结婚了，在工作中却有了不同的境遇，老公创业2次，都失败，而她却在公司里顺风顺水，年薪翻了三倍，现在是家里经济的顶梁柱。</p>\n<p data-pid=\"ksChxw0j\">以前她遇到问题，都会找老公要建议，但是后来随着她能力的提升，越来越有自己的主见。</p>\n<p data-pid=\"28BFWrrH\">而老公还很想做她的军师，但她却觉得老公的想法有些幼稚，后来他们经常为家庭琐事吵架，尤其是老公创业失败矛盾就更多了，吵多了，就无语。</p>\n<p data-pid=\"n75zXyf2\">后来他们在一起，就是你看你的手机，我看我的电视。你忙你的工作，我带我的孩子。</p>\n<p data-pid=\"pBnTJBmy\"><b>家就像是旅馆，而他们却是最糟糕的房客。</b></p>\n<p data-pid=\"pAxsssQq\">直到有一天，她在老公的手机里，看到了老公和一个女人的聊天，那个女生是他的下属，比他小10岁，看着老公那么热心地指导那个女生，那个女生对他无比崇拜的样子，就知道，一场孽缘，已经不可避免。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-384cc2cae1bad7a866b46e8bb04b7d1c_720w.jpg?source=b1748391?rss\" data-rawwidth=\"624\" data-rawheight=\"354\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-384cc2cae1bad7a866b46e8bb04b7d1c\" data-watermark-src=\"v2-89775f0ce2f29a9d3e02a9ec48f211a2\" data-private-watermark-src=\"v2-0e7e787206eb3ce98de7042ba462e457\"></p>\n<p data-pid=\"Wy_YN0w1\">她再往下查，果然查到了他们从讨论职场问题变成了讨论感情问题，到最后开始分享床上感受。</p>\n<p data-pid=\"4f89IXIV\">她怒气冲冲地找到老公，老公从一开始的慌张，到后来的愧疚，再到后来的绝情，只用了3个月。老公最后一句话问住了她：我想要的是一个女人对我的崇拜，你能给吗？</p>\n<p data-pid=\"d11Df1Ql\">她无言以对。</p>\n<p data-pid=\"nbjBQ8_P\">是啊，我怎么可能做到像那个“傻白甜”小姑娘式的崇拜？</p>\n<p data-pid=\"7Z1JgJBF\">而如果做不到，我们这个婚姻是不是没法维持下去呢？</p>\n<p data-pid=\"aEj32XnJ\">其实这个女人的问题，在婚姻中非常普遍。</p>\n<p data-pid=\"EqGDZpGS\">很多情感鸡汤告诉女人：想要男人的爱，夸他；崇拜他，让他觉得在你眼中是天下第一，这样他的心就永远属于你。</p>\n<p data-pid=\"bqLVd1a5\">但问题是如果你对他非但没有崇拜，反而有鄙视，还要违心去夸他，去做他的小迷妹，那这种表演，你可以坚持多久？</p>\n<p data-pid=\"cALPAPPy\">我们可以演一时，但不能演一世。</p>\n<p data-pid=\"HGTiN7IK\">那么该怎么办呢？</p>\n<p data-pid=\"A_PZ96di\">有两个方法。</p>\n<p data-pid=\"zcLjrhpk\"><b>第一个方法：找到新的夸奖点。</b></p>\n<p data-pid=\"WQfnQuLE\">在这个故事里，女人之所以当初对男人的“滔滔不绝”非常心动，是因为对方那时候说的话非常有营养。但是一旦她自己成长以后，就发现这个男人的话没有什么价值了。</p>\n<p data-pid=\"NGOOQrjh\">而要命的是，他们以前的感情基础有个重要的因素就是男人在她身上得到了极大的自恋满足上。</p>\n<p data-pid=\"htmTMDh2\">所以如果要为这段关系续命，就需要继续让他获得这方面的满足。寻找夸赞点</p>\n<p data-pid=\"LW1FxaA_\"><b>需要遵循2个原则。</b></p>\n<p data-pid=\"eFXGQxc9\"><b>1. 要说真话：夫妻之间没法欺骗。</b></p>\n<p data-pid=\"6xdFHd4s\"><b>2. 要找到利益结合点：</b>比如你不需要他给你工作建议了，但你需要他在感情中爱你啊，在他体贴关心你的时候，在他擦桌子，拖地，做饭的时候，你都可以开启“夸奖模式”，为什么要这么做？因为你要把他的注意力从工作转到关心你为家庭负责上来。</p>\n<p data-pid=\"H4GILpCd\">你夸他的方向从对他能力的赞赏，转为对你付出的肯定上，这样你夸他才有动力，他也能得到自恋的满足。</p>\n<p data-pid=\"qkFgVqxA\">你可以说：你对我关心体贴，我好幸福，我觉得这个世界最牛的男人，是对自己女人好的男人。其他都是浮云。</p>\n<p data-pid=\"SEERDPeH\"><b>第二个方法：发展深度谈话。</b></p>\n<p data-pid=\"KDSo1MZk\">你老公创业失败，内心的感受恐怕很不好，郁闷、挫败、失望、自责、自卑，这些负面情绪恐怕都有。</p>\n<p data-pid=\"ElsCgMaR\">伴侣间什么最珍贵？就是在自己受伤、失败的时候，另一半能贴心安慰、耐心陪伴、真心鼓励、热心支持。</p>\n<p data-pid=\"YpVEVFgf\">雪中送炭是最打动人心的，也是最珍贵的。</p>\n<p data-pid=\"UnP_byn9\">你可以反思一下，在他创业失败，情绪低落的时候你为他做了什么？</p>\n<p data-pid=\"rRB3kbQl\">我猜恐怕正面的事情做的不多。</p>\n<p data-pid=\"MkGObbpb\">伴侣关系也是建立在互相满足需求的基础上的，如果你们不能与时俱进地互相满足重要的需求，这个关系就拴不住你们的心了。心不在了，即使人在，也是虚的。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-fd1f7b990a0228f13928446f9009062b_720w.jpg?source=b1748391?rss\" data-rawwidth=\"750\" data-rawheight=\"381\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-fd1f7b990a0228f13928446f9009062b\" data-watermark-src=\"v2-0aa1e1cf6fe5ba94eb9274a33d8a03f1\" data-private-watermark-src=\"v2-1592558ffc1d7b63a44d1c832f23161d\"></p>\n<p data-pid=\"3NXDmwEz\">所以真正的好伴侣是身心合一的亲密。</p>\n<p data-pid=\"zh2ywv-a\">所以对待老公，你可以把对他的肯定，放在情感上，而不是能力上，这样这个男人才能在你们的关系中找到自己的位置。</p>\n<p data-pid=\"bcyWR9Ii\">你还要在他挫败的时候给他真挚的情感支持，让他感受到患难夫妻见真情。</p>\n<p data-pid=\"okRoYkGu\">如果你身边又遇到类似问题的朋友，可以把这篇文章分享给她。</p>\n<p data-pid=\"xNEvm1l8\"><b>如果你需要更加详细的情感解决策略，可以按下图所示和我 </b><a class=\"member_mention\" href=\"http://www.zhihu.com/people/2e9bec45021b054809f01c4b20b665d8\" data-hash=\"2e9bec45021b054809f01c4b20b665d8\" data-hovercard=\"p$b$2e9bec45021b054809f01c4b20b665d8\">@婚恋专家赵悦辰</a><b> 加个好友，告诉我他更多的行为模式，我来用专业的视角为你分析解决。</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-de565821e5725491f3dc6b9e3e0dc240_720w.jpeg?source=b1748391?rss\" data-rawwidth=\"295\" data-rawheight=\"267\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-de565821e5725491f3dc6b9e3e0dc240\" data-watermark-src=\"v2-18038e9be877a3853a1189b34c840e8d\" data-private-watermark-src=\"v2-fe01c6d48857afb685e5dff77a959954\"></p>\n<p data-pid=\"NwXhkpuJ\"><a class=\"member_mention\" href=\"http://www.zhihu.com/people/2e9bec45021b054809f01c4b20b665d8\" data-hash=\"2e9bec45021b054809f01c4b20b665d8\" data-hovercard=\"p$b$2e9bec45021b054809f01c4b20b665d8\">@婚恋专家赵悦辰</a>。中科院心理研究所心理学硕士、国家二级心理咨询师、婚恋关系咨询专家、中国社工协会社会心理健康服务指导中心理事、社会心理健康服务指导中心心里援助工作站副站长、心之助心理情感平台联合创始人、央视电台北京电台特邀心理专家，13年来帮助2万多名来访解决问题。</p>\n<p data-pid=\"FTh9UmKn\">多次接受电台、电视台、报刊杂志等多家媒体专题采访，为二十多家企业讲授压力管理、亲子教育、婚恋情感等方面的心理讲座。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/yue-21-19-64?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">婚恋专家赵悦辰</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/521522490/answer/2386100642?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">6 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/482308704?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">他爱上别人但又不肯放手我想离婚，让我再给他一年时间挽救我们的婚姻，应不应该为了宝宝再给一年时间？</a><br><a href=\"http://www.zhihu.com/question/499500487?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">婚姻4年没爱了该离婚吗 也觉得另一半不爱自己了?</a><br>\n","link":"http://www.zhihu.com/question/521522490/answer/2386100642?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"派评 | 近期值得关注的 App","date":"2022-03-14 09:31:33","description":"你可以通过文章目录快速跳转到你感兴趣的内容。如果发现了其它感兴趣的 App 或者关注的话题，也欢迎在评论区和我们进行讨论。<a href=\"https://sspai.com/post/72062\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/72062"},{"title":"内容、社群、商业模式的少数派经验：与《新闻实验室》对谈","date":"2022-03-14 08:58:48","description":"少数派十周年前夕，创始人老麦与《新闻实验室》播客主理人、新闻学研究者方可成做了一次对谈。<a href=\"https://sspai.com/post/72042\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/72042"},{"title":"少数派十周年：正版软件特惠限时开启，低至 5 折起","date":"2022-03-14 08:19:03","description":"我们与国内外多位优秀的开发团队特约，为大家带来了少数派十周年的庆祝活动。在活动期间，你可以最低 5 折起的特惠价格购买到多款优质的正版软件，希望这些利器能够帮你在疫情仍未散去的当下，保持生活品质、提升工作效率。<a href=\"https://sspai.com/post/72028\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/72028"},{"title":"少数派十周年：创始人老麦的十问十答","date":"2022-03-14 07:51:02","description":"回首创业十年，感慨和心得万千，值此节点，以问答形式一并分享。<a href=\"https://sspai.com/post/72041\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/72041"},{"title":"关于效率的三重反思与少数派的 6 种生活：2021 年度征文获奖结果公布","date":"2022-03-14 06:30:00","description":"让我们来一起看看有哪些入围征文在最终的投票环节中胜出。<a href=\"https://sspai.com/post/72048\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/72048"},{"title":"少数派十周年商店促销开启，「新獭」向你 Say Hi","date":"2022-03-14 06:02:09","description":"除了商店折扣，还有周边剧透，量大又管饱。<a href=\"https://sspai.com/post/72015\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/72015"},{"title":"超充快充会影响电池寿命吗？有没有什么别的风险？","date":"2022-03-14 05:51:16","description":"\n<p data-pid=\"6ga0MskV\">会影响，但是使用正确的情况下对寿命的影响很小。</p>\n<p data-pid=\"dMcCatlA\">如果从电池容量衰减的原理来看，电池老化的原因要么是因为副反应而导致的锂离子流失，要么是因为正极或者负极的结构损伤而导致的可储存锂离子数目变少。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-613faac8895e41ec66f477ca67690915_720w.png?source=b1748391?rss\" data-caption=\"（左：正常的充放电，中：副反应导致的锂离子损失，右：正负极损伤导致的可储存锂离子数下降）\" data-size=\"normal\" data-rawwidth=\"675\" data-rawheight=\"121\" data-watermark=\"original\" data-original-src=\"v2-613faac8895e41ec66f477ca67690915\" data-watermark-src=\"v2-975c0105136e5a6d900f002ed440c3d5\" data-private-watermark-src=\"v2-59fd054b55ddabdea9581f7e8d0e02db\"></p>\n<p data-pid=\"TErrz3FX\">导致锂离子损失的副反应大多集中在正负极表面，比如对于负极，在液态锂离子电池首次充放电过程中，电极材料就会与<a href=\"https://www.zhihu.com/search?q=%E7%94%B5%E8%A7%A3%E6%B6%B2&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B:,:1786924202%7D\" class=\"internal\">电解液</a>在固液相界面上发生反应形成覆盖于电极材料表面的钝化层，这层钝化膜被称为“固体电解质界面膜”( solid electrolyte interface) ，简称SEI膜。各种非理想化的充放电过程都可能导致SEI膜的不稳定，而无论是SEI膜的损坏再生成，又或者是SEI膜的野蛮生长，都会不断导致锂离子损失。</p>\n<p data-pid=\"MrSNUAyW\">同样正极也有各种副反应。比如Mn和Co等金属在副反应中可能从正极融入电解质，导致一方面锂离子的存储元素流失而造成可存储的锂减少，另外一方面这些<a href=\"https://www.zhihu.com/search?q=%E9%87%91%E5%B1%9E%E5%85%83%E7%B4%A0&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B:,:1786924202%7D\" class=\"internal\">金属元素</a>又可能参与负极SEI膜的<a href=\"https://www.zhihu.com/search?q=%E5%8C%96%E5%AD%A6%E5%8F%8D%E5%BA%94&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B:,:1786924202%7D\" class=\"internal\">化学反应</a>而毒害负极。除了这些副反应，电池的正负极还可能因为物理上的热胀冷缩或者过热等原因而造成结构损伤。</p>\n<p data-pid=\"YUY4EcJB\">如果对上面这些主要导致电池老化和容量衰减的原因以及可能会导致这些副反应/破坏效应加剧的原因进行统计就会得到下面这几张表格。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-667b002641cb6c1a80068c4fd84a74c0_720w.png?source=b1748391?rss\" data-caption=\"各类导致锂电池老化的原因汇总\" data-size=\"normal\" data-rawwidth=\"1055\" data-rawheight=\"426\" data-watermark=\"original\" data-original-src=\"v2-667b002641cb6c1a80068c4fd84a74c0\" data-watermark-src=\"v2-e4a4fc9ab4783c696dd6da79fbf824f0\" data-private-watermark-src=\"v2-fcfa8db2007a7259c1a3d4706071a23d\"></p>\n<p data-pid=\"Q0Am4x5k\">在这么多电池老化的影响因素中，日常大家担心的超充导致的负面项我专门用红色框出：超充可能加速的副反应或者正负极/电解液结构损伤只有四项，而电池寿命的真正天敌，也是基本每项都出现的则是过充/过放，以及高温。</p>\n<p data-pid=\"3EWKZrag\">避免高温，这个事情交给BMS（电池控制器）来控制冷却系统即可，也不是我们消费者需要担心的。我们所能做的就是避免电池的过充/过放，也就是不要等到最后一公里再去充电，而充电的时候也不要完全充满。</p>\n<p data-pid=\"Zc-yx_KI\">我没有见过车企不建议用户使用超充，但是基本每家都会建议用户不要把电池“放得过空”或者“充得过满“。同样我也没见过有手机厂商建议用户不要用超充而只用5V充电，反而最新的系统都会建议用户不要充得过满以延长电池寿命。下图左侧是我的小鹏P7建议的不要充过90%，右图是我的iPhone建议的不要充电至80%以上，其实说的都是一个事情。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-9382c03c844ed2fe7dfa62d9a93518ca_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1045\" data-rawheight=\"326\" data-watermark=\"original\" data-original-src=\"v2-9382c03c844ed2fe7dfa62d9a93518ca\" data-watermark-src=\"v2-e02c0aeaed82b9f9c178c35d4f7512af\" data-private-watermark-src=\"v2-e96fb662e7ea8742dc39243071a587bd\"></p>\n<p data-pid=\"h4R0QWwI\">所以放心大胆去享受超充吧。有个<a href=\"https://www.zhihu.com/search?q=%E7%BE%8E%E5%9B%BDModel&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B:,:1786924202%7D\" class=\"internal\">美国Model</a>3车主基本只用超充跑了10万英里（16万公里）但是电量只衰减了2.5%，而他所作的只是浅放浅充，仅有两次将Model 3的电量跑至10%以下，并且使用超充时也从来不会充电超过60%。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/one-kebab?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">一个kebab</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>延伸阅读：<br><a href=\"http://www.zhihu.com/question/502828839?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么很多电动汽车都在宣传自己的快充时说多久充电80%，为什么不直接说多久充满？</a><br><a href=\"http://www.zhihu.com/question/462347805?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">大众新推出的ID4 系列电池使用感怎么样？好像是快充能达到10分钟充满行驶100km的电量？</a><br>\n","link":"http://www.zhihu.com/question/520431913/answer/2388493243?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"身处南北方交界处，四季分明，买电车究竟是买三元锂电池还是磷酸铁锂电池？","date":"2022-03-14 05:50:53","description":"\n<p data-pid=\"8vSxy3lR\"><b>针对磷酸铁锂和三元的选择更多是根据个人用车场景来进行的。</b></p>\n<p data-pid=\"b_7lOnCb\">这两种电芯有什么差别呢？我们来直接列个表格做对比：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-5ea651224be7391c431a2863a7711bc1_720w.png?source=b1748391?rss\" data-caption=\"磷酸铁锂和三元锂材料对比\" data-size=\"normal\" data-rawwidth=\"719\" data-rawheight=\"555\" data-watermark=\"original\" data-original-src=\"v2-5ea651224be7391c431a2863a7711bc1\" data-watermark-src=\"v2-044a726b0017285a8d1603ec4f31302f\" data-private-watermark-src=\"v2-5da314fe51e1fa7cd612c7ab0d9c8810\"></p>\n<p data-pid=\"8RwNeXSh\">因为磷酸铁锂和三元锂的化学特性差异导致了他们适用的场景不同，对于消费者而言：</p>\n<ul>\n<li data-pid=\"4cEOsIPy\">三元锂电池适合用车环境多样，尤其是低温地区的车主较为友好；且充电速度会更快，续航更长，能量密度更高，适合经常长途自驾或者对极限性能有要求的车主</li>\n<li data-pid=\"DJOqLE0W\">但磷酸铁锂依靠他的稳定化学结构，具有更长的充放电寿命，且价格更便宜，适合大部分对续航要求适中、但对电池循环寿命要求更高、以及对整车价格更敏感的车主</li>\n<li data-pid=\"nJwDpUCw\">还有一种是蔚来最近推出的三元磷酸铁锂混合电池，采用磷酸铁锂电芯为主搭配少部分三元电芯，这是一个取长补短的折中方案</li>\n</ul>\n<p><img src=\"https://pica.zhimg.com/v2-29ae9bcab507387ad60b21df28ce5ab0_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"360\" data-watermark=\"original\" data-original-src=\"v2-29ae9bcab507387ad60b21df28ce5ab0\" data-watermark-src=\"v2-1a7506186863452df790870727958717\" data-private-watermark-src=\"v2-f66711f7dab2c0cb13f8e611ddec622b\"></p>\n<h2><b>所以这两种材料应该怎么选？</b></h2>\n<p data-pid=\"puyLgbUe\">其实选择三元锂还是磷酸铁锂，地域环境只是一个考量因素，还需要考量类似单次续航需求、性能需求、预算等等因素。同处在南北交界的东部上海，我选择的三元锂P7时的考量因素如下：</p>\n<p><img src=\"https://pic2.zhimg.com/v2-bc23d6451900281725a8752e09d8e23d_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1763\" data-rawheight=\"580\" data-watermark=\"original\" data-original-src=\"v2-bc23d6451900281725a8752e09d8e23d\" data-watermark-src=\"v2-3a59942f0209077b90c0a0a98ef49448\" data-private-watermark-src=\"v2-2542fbf2d92996fe085f2dba22d83111\"></p>\n<ul>\n<li data-pid=\"sHusNsip\">这辆电动车并不是我的主力车，当时买车只是偶尔长途驾驶，在长三角往返500公里，所以对续航里程的要求比较高，反而对电池本身的充放电循环寿命要求比较低（一年不到2万公里里程）。</li>\n<li data-pid=\"zm2gcqUN\">我对性能有要求，希望整车的百公里加速能达到6秒上下的水平，三元锂能量密度更高、整车更轻。</li>\n<li data-pid=\"U791uv-G\">不在家的时候我只能使用快充，对快充速度要求比较高，希望20%-80%的充电速度能在30分钟左右，三元锂电池快充速度会更快一些。</li>\n</ul>\n<p data-pid=\"Miy7rSNA\">综合上面三个场景考虑，于我而言，三元锂电池比磷酸铁锂电池更加合适。</p>\n<p data-pid=\"DqgXcoAX\">同理，题主也可以根据类似的条件来判断哪种材料更适合自己。现在不少头部车企都有磷酸铁锂和三元锂两种电池材料供消费者选择，磷酸铁锂偏向于低配和短续航而三元锂则偏向于高配置长续航车型。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/one-kebab?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">一个kebab</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/520427647/answer/2388513047?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">8 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/478132477?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">电动汽车充满到同样续航里程，磷酸铁锂电池和三元锂电池哪个跑的实际里程更长？</a><br><a href=\"http://www.zhihu.com/question/434952446?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么磷酸铁锂电池比三元锂电池在低温下性能表现更差？有什么办法可以解决这一问题吗？</a><br>\n","link":"http://www.zhihu.com/question/520427647/answer/2388513047?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"面对结婚后一地鸡毛的生活，为什么有的人坚持不离婚？","date":"2022-03-14 05:11:49","description":"\n<p data-pid=\"Ys_XNKAX\"><b>因为很多男人的观念是：可以婚外找情人，但婚姻不能解体。</b></p>\n<p data-pid=\"J4uMk6q8\">在中国，结婚的原因有很多。可能是年龄大了，家人开始催；可能是想要孩子了；可能是朋友同事都结婚了；也可能是对方家境不错。</p>\n<p data-pid=\"TE7bn5SP\">总之，中国式的婚姻不仅仅是两个人走到一起，而是<b>两个家庭</b>，彼此社会地位、经济基础都相互扎根到对方的世界。</p>\n<p data-pid=\"YTvfrv1l\">BBC纪录片《中国式婚姻》中，一位外国记者记录下合肥的相亲现场，采访一位陪儿子相亲的妈妈。</p>\n<p data-pid=\"1EG8BZ-N\">记者：您儿子为什么找不到女朋友？</p>\n<p data-pid=\"ICNgwaCI\">大妈：因为他工作的地方都是男的。</p>\n<p data-pid=\"9UOgLGef\">记者：他准备好结婚了吗？</p>\n<p data-pid=\"C7A8u2W2\">大妈：准备好了，房子已经买了。</p>\n<p data-pid=\"84weoAHK\">这位外国记者很不解，<b>怎么买了房子就是准备好结婚了。</b></p>\n<p data-pid=\"JpEpQXsb\">后来，他想通了：在中国，结婚不是一种<b>选择</b>，而是一种义务。为了结婚，中国人去相亲，去上约会训练班，甚至去整容。</p>\n<p data-pid=\"DNIkWMkC\">有的婚姻，一开始就没多少爱，而是为了利益，为了面子，为了孩子的凑合。</p>\n<p data-pid=\"F2E1-4Mf\">等到厌倦的时候，早已经活在自己给自己编织的网中，难以走出去。</p>\n<p data-pid=\"sGobyHOE\">可人要是真这么理智，倒也好。偏偏一个人想要被关注、被理解、被爱本来就是最本能事情。</p>\n<p data-pid=\"g2MkmLdI\">大多数女人恪守中国的婚姻观，即使想要理解，想要被爱，她会向自己的丈夫提建议。</p>\n<p data-pid=\"o8u-KqWz\">可是社会为男人提供的婚姻和关系却是分开的。</p>\n<p data-pid=\"gDDrZluQ\">周冲曾在一篇文章中讲过一个故事：</p>\n<p data-pid=\"O4sxlp81\">她曾经问过一个50多岁的男人：“某长，你觉得离婚率高，是好事，还是坏事？”</p>\n<p data-pid=\"7OJ5F9El\">对方果断说：“当然是坏事。国家应该管一管……”</p>\n<p data-pid=\"RRy8dVBN\">周冲继续说：“那么，如果两个人在一起很痛苦，怎么办？”</p>\n<p data-pid=\"Ov_j1S_h\">对方说：“那就自己出去找一个情人。婚是不能离的。”</p>\n<p data-pid=\"td9G41ON\">你看，很多男人的观念是：<b>可以出轨找情人，但婚姻不能解体。</b></p>\n<p><br></p>\n<p data-pid=\"aZSAkeDx\"><b>01</b></p>\n<p data-pid=\"hFJ_fFXb\"><b>男人比女人更怕离婚</b></p>\n<p><br></p>\n<p data-pid=\"4b8I4qhD\">国外有一个调查：</p>\n<p data-pid=\"4fEzTWWo\"><b>男人在离婚后的生活质量大大降低</b>，放纵自己、饮食不规律、体重大增，有48%的男人声称自己感到异常孤独。</p>\n<p data-pid=\"DmD5iMFC\">相反，离婚后的<b>女人日子却越过越滋润</b>，感到自己孤独的女性百分比只占到总人数的28%。</p>\n<p data-pid=\"jSxl_AwP\">为什么呢？</p>\n<p data-pid=\"ArKU3BfP\">我们可以在这几年日本“<b>退休离婚</b>”的现象中找到答案。</p>\n<p data-pid=\"HpHNPvCI\">通常，日本女人做家务，带孩子，不仅要照顾自己和孩子，还要照顾这个男人。</p>\n<p data-pid=\"lWKLpk7J\">而日本男人一辈子都在工作，下班跟朋友聚会，也不回家，不做家务，更不用说经营感情。</p>\n<p data-pid=\"vomP-N9h\">而日本法律有一个这样的规定，妻子享有与丈夫平分退休金的权利。丈夫一旦退休，有了养老金的妻子们便不愿意再承受这样的委屈，纷纷提出离婚。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-9f4ba1bd5844fb06953544f135f34731_720w.jpg?source=b1748391?rss\" data-rawwidth=\"635\" data-rawheight=\"532\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-9f4ba1bd5844fb06953544f135f34731\" data-watermark-src=\"v2-578dc77dfae040e0514056fecf2ecc65\" data-private-watermark-src=\"v2-77bdab5260b17d2dae56fe662c1b454d\"></p>\n<p data-pid=\"xgdJd3HL\"> 男人习惯了衣来伸手饭来张口的生活，一直享受着婚姻所带来的好处却不自知，等到离婚之后，才发现，家里不再总是整洁，不再总有热菜。</p>\n<p data-pid=\"IMW_yf2j\"><b>于是，他们才看到那些一直被自己忽略的，却是自己大部分日常的存在。才因失去而倍感孤独。</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-0e41ca617afc45ab22d9909eb8a16be8_720w.jpg?source=b1748391?rss\" data-rawwidth=\"527\" data-rawheight=\"324\" data-size=\"normal\" data-caption=\"（退休离婚后的日本男人，抑郁、自杀、犯罪率逐年上升）\" data-watermark=\"original\" data-original-src=\"v2-0e41ca617afc45ab22d9909eb8a16be8\" data-watermark-src=\"v2-e4a484d67c6744a8dd4be9982bd9073b\" data-private-watermark-src=\"v2-341a045c51ab39da7b0679f0eb094375\"></p>\n<p data-pid=\"Xqz3beHM\">很多女人会说：你要么离婚，要么好好过，给个痛快话。</p>\n<p data-pid=\"pdnQ3nlz\">可是，很多男人会说，<b>我不想离婚。</b></p>\n<p data-pid=\"Ie9iGIYw\">但他没说的下一句话其实是，<b>我也不想好好过。</b></p>\n<p data-pid=\"e7mFklH8\">为什么会这样呢？</p>\n<p data-pid=\"PzwPME69\">其实，在他们的眼里，<b>婚姻和关系是分开的</b>。</p>\n<p data-pid=\"J7xJqjyK\">不离婚，不等于要靠近。</p>\n<p data-pid=\"Sp0b03Uc\">不离婚，不等于要让你高兴。</p>\n<p data-pid=\"JdY2JUze\">不离婚，不等于要满足你的要求。</p>\n<p data-pid=\"XFbjXnmC\">当然，不离婚，也不等于要改善关系。</p>\n<p data-pid=\"fH2TOXPr\">你会发现，男人对婚姻的依赖，其实主要是在<b>生活方面</b>；而女人对婚姻的依赖，主要是<b>情感方面</b>。</p>\n<p data-pid=\"IsrmO92x\">但一个是生存威胁；一个是发展威胁。男人也自然比女人更不敢离婚。</p>\n<p><br></p>\n<p data-pid=\"ge3iChxp\"><b>02</b></p>\n<p data-pid=\"Ykkom7O0\"><b>“没意愿”和“没能力”的男人</b></p>\n<p data-pid=\"-ynUhACB\">对女人来说，“离婚”和“改善关系”就像是跷跷板的两端，不改善关系就意味着离婚，而不离婚就意味着改善关系。</p>\n<p data-pid=\"0CW_FWQR\">可为什么男人会把“不离婚”和“改善关系”分开呢？</p>\n<p data-pid=\"UptbelRa\">有两个原因：没意愿和没能力。</p>\n<p data-pid=\"iISPfdrY\"><b>先说没意愿。</b></p>\n<p data-pid=\"B6lLLNan\">比如说，一个男人出轨，那他是更爱老婆还是更爱情人呢，怎么判断呢？</p>\n<p data-pid=\"tudWGrDb\">老婆会觉得，我都这么痛苦了，他还要去见情人，他当然是更爱情人。</p>\n<p data-pid=\"xFSab1Pu\">情人会觉得，我都付出这么多，他要是真的爱我早就离婚了，他当然是更爱老婆。</p>\n<p data-pid=\"dbvA_-zt\">男人会觉得，一个人是能够同时爱很多人的呀，两个人我都爱。</p>\n<p data-pid=\"laVt83_H\">那他到底爱谁呢？</p>\n<p data-pid=\"CQIFUOdt\">很简单，<b>他爱的人只有自己</b>。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-fd08f00031efd0fcccfcdf4b17da6c9a_720w.jpg?source=b1748391?rss\" data-rawwidth=\"576\" data-rawheight=\"299\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-fd08f00031efd0fcccfcdf4b17da6c9a\" data-watermark-src=\"v2-34a002bd2bc1228e1733e9828f925a28\" data-private-watermark-src=\"v2-513923cd411f62e5a8793e504c48bc7f\"></p>\n<p data-pid=\"mLo3gCPt\">曾接待一位男性来访者，就特别困惑地问：<b>我就想不通，不就出个轨，她干嘛那么大脾气。古代男人不都三妻四妾嘛。</b></p>\n<p data-pid=\"9UnTBiXd\">心理学上有个词叫“<b>自恋</b>”，就是说自恋型的人比一般人更重视自己的需要，觉得自己特别重要，不现实地认为自己可以被特殊地优待。</p>\n<p data-pid=\"vVTL49uc\">而别人在他们的心中更像是一种满足自己的工具。</p>\n<p data-pid=\"QMBX9IZ7\"><b>再说没能力。0</b></p>\n<p data-pid=\"18gWd3B7\">有的男人会说这样的话：</p>\n<p data-pid=\"foDSGGr5\">“两个人不要整天腻在一起，大家都有自己的空间不好嘛。”</p>\n<p data-pid=\"IeeDVr8j\">“干嘛总是逼我承诺，我真的很烦她这样。”</p>\n<p data-pid=\"vuvc7y5P\">“不要老跟我说想你，爱你，你不觉得烦嘛。”</p>\n<p data-pid=\"wunWLrZN\">这类人就处在一种“<b>爱无能</b>”的状态，他们没能力跟别人有更深层次的情感交流，对于爱也就不知所措。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-c7ad0926d34900c3ded22b2b7ff736e3_720w.jpg?source=b1748391?rss\" data-rawwidth=\"640\" data-rawheight=\"533\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-c7ad0926d34900c3ded22b2b7ff736e3\" data-watermark-src=\"v2-b19f88a53eac04e148170733a1f38493\" data-private-watermark-src=\"v2-071eaf0e04beafa18b216260e620ad05\"></p>\n<p data-pid=\"F2IFDWtL\"><b>心理学上的“情绪无能”就是在说这群人，他们可能总是彬彬有礼，温和善良。但一旦需要有情感上的交流，他们既不想知道你的感觉，也不想说自己的感觉。</b></p>\n<p data-pid=\"NvwAH3Jj\">因为在他们的体验中，感觉是可怕的，是可能摧毁他们的。</p>\n<p data-pid=\"jVc5lDUe\">一旦体会到失望、愤怒、痛苦等等的感受，他们的要么<b>否认</b>或者<b>忽视</b>；要么把这种感觉扔给别人。</p>\n<p data-pid=\"ux2ES-lD\">比如说：</p>\n<p data-pid=\"zllN1H4J\">孩子生病了，是你蠢。</p>\n<p data-pid=\"lwBBD6Y9\">家里没纸了，是你没用。</p>\n<p data-pid=\"A7TqYM4m\">地脏了，是你错了。</p>\n<p data-pid=\"0TM7X6N2\">天下雨了，我心情不好，都是你不好。</p>\n<p data-pid=\"spfFEcqq\"><b>被困在情绪无能中的家庭，就像是一滩死水，虽然存在，却已经死了。</b>而男人对于这样的状态却早已习惯，察觉不到有什么异样。</p>\n<p><br></p>\n<p data-pid=\"TaDC9rAO\"><b>03</b></p>\n<p data-pid=\"8w5JqsGX\"><b>你永远都有两种选择</b></p>\n<p><br></p>\n<p data-pid=\"GxIJGEO1\">很喜欢《离婚律师》中的一句话：</p>\n<p data-pid=\"XqrNgqzf\">没有什么是必须通过婚姻才能够得到的，但两个人之间最珍贵的感情，只有通过婚姻才可能产生。</p>\n<p data-pid=\"5BQe58gv\">如果你的老公没意愿也没能力改善关系，而你无法放弃这段婚姻，怎么办？</p>\n<p data-pid=\"_aqhqxfW\"><b>一定要有教别人爱自己的能力。</b></p>\n<p data-pid=\"mcbF-ZS-\">首先，你一定要记住，和男人打交道跟和女人打交道是不一样的，女人可以袒露脆弱，但一定要时刻维护你的自我价值和面子。</p>\n<p data-pid=\"Ts0qsZov\">第二，怎么教？我们要对态度的重视程度超过对内容的重视程度。</p>\n<p data-pid=\"XL580xjT\">比如稍微回复不及时，男方张口就骂。</p>\n<p data-pid=\"dw0DztC7\">此时，我们不需要解释，而需要<b>对他的态度进行纠正</b>：</p>\n<p data-pid=\"xcLcMrYk\">1）我能理解你对宝宝的担心。</p>\n<p data-pid=\"Fm6d2ngG\">2）但是你这种骂人的态度，我不接受。</p>\n<p data-pid=\"xIhNJyAw\">3）我不回复你，肯定有我的原因，这次是因为手机欠费，但你认为我不尊重你，你没有问清情况，就断定是后者，这样的交流，我不接受。</p>\n<p data-pid=\"bYvK_K58\">4）而且当你不尊重我的时候，我也很难尊重你。</p>\n<p data-pid=\"UX-V9Rqd\">5）我希望你对刚才说的话道歉。</p>\n<p data-pid=\"sVESdN19\">6）如果不道歉的话，我会用我的方式表达我对你态度的反击。</p>\n<p data-pid=\"m8sKiDjI\">这就是用成人的态度与之交流的方式。</p>\n<p data-pid=\"OZ3VLGBa\">很多人说，就算我这么说，他很有可能会大肆反击，或者置之不理。</p>\n<p data-pid=\"SIQB4Qqd\">其实他是否乖乖道歉不是最重要的，而是我们要<b>听其言观其行</b>。</p>\n<p data-pid=\"4MFPI_w-\"><b>如果他没有道歉，但此后言语开始注意了，开始尊重了，那么我们就给他个台阶下。</b></p>\n<p data-pid=\"3026XWS2\">但是如果他继续这种冒犯的言语，我们就要坚持最基本的底线，直到他认为这是一个墙壁，他这么犯浑下去，对自己没有任何好处。</p>\n<p data-pid=\"BPf4Tg5q\">说到这里，我想说的是，话术只是一种“术”，只是招数，但真正决定关系的，不是这些花拳绣腿，而是你的“<b>定力</b>”。</p>\n<p data-pid=\"qrWM22_R\">这就是我们的“内功”，我的话语再漂亮，如果你的力气太小，就自然对你毫无用处。</p>\n<p data-pid=\"QBTSxiLR\">为什么你能容忍他不离婚，还不好好对待你呢？</p>\n<p data-pid=\"sBcA1oz1\">因为你的内心被一个心魔所整蛊，那个心魔就是：如果我没有这个男人，我就活不下去的婴儿心态。</p>\n<p data-pid=\"DkA53Frn\">我们活在这个世界上，就是有三个选择：</p>\n<p data-pid=\"9WkRpd_g\">1）把照顾自己的责任交给别人。</p>\n<p data-pid=\"Ccx9Fq3T\">2）把照顾自己的责任交给自己。</p>\n<p data-pid=\"R0eV_4_a\">3）把照顾自己的责任交给自己和他人。</p>\n<p data-pid=\"_IFSQoz_\">前面两者都不太靠谱，因为前者太不安全，万一这个人没能力照顾你呢？后者也太自不量力，万一你没有能力照顾你呢？我们要学习的，是第三种。</p>\n<p data-pid=\"GZma3Xbb\"><b>首先，照顾自己的责任方，是你自己；</b></p>\n<p data-pid=\"n2hDQpoP\"><b>第二，你要学会一定的自我照顾的能力；</b></p>\n<p data-pid=\"JcgFtIVF\"><b>第三，你要学会教别人照顾自己的能力。</b></p>\n<p data-pid=\"fvOnyWvl\">学会这三点，你的人生才有真正的安全感。</p>\n<p data-pid=\"E6RDSWl5\">否则，一切都是扯淡。</p>\n<p data-pid=\"TjaKYWwA\"><b>如果你也有情感问题需要解决，可以按下图所示找我 </b><a class=\"member_mention\" href=\"http://www.zhihu.com/people/f0acd87dbdd58922b460cd0e9f13bebe\" data-hash=\"f0acd87dbdd58922b460cd0e9f13bebe\" data-hovercard=\"p$b$f0acd87dbdd58922b460cd0e9f13bebe\">@婚恋咨询师卢悦</a> <b>加个好友，说说遇到的实际困难，我来帮你分析解决。</b></p>\n<p><img src=\"https://pica.zhimg.com/v2-792b986c8808a42df1e41640aeadda9c_720w.jpg?source=b1748391?rss\" data-rawwidth=\"295\" data-rawheight=\"256\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-792b986c8808a42df1e41640aeadda9c\" data-watermark-src=\"v2-78a2c5b360873f3ba7ca1f71314757a0\" data-private-watermark-src=\"v2-c35f1262c094bbc18af7049cbffd2d98\"></p>\n<p data-pid=\"v13nemwl\"><a class=\"member_mention\" href=\"http://www.zhihu.com/people/f0acd87dbdd58922b460cd0e9f13bebe\" data-hash=\"f0acd87dbdd58922b460cd0e9f13bebe\" data-hovercard=\"p$b$f0acd87dbdd58922b460cd0e9f13bebe\">@婚恋咨询师卢悦</a>， 知乎十年新知答主。70后，婚恋作者，央视、北京卫视、凤凰卫视多档栏目特约心理专家，心之助女性情感心理平台联合创始人。</p>\n<p data-pid=\"ciaaVSpx\">著有《爱情有毒》、《爱到绝处便逢生》、《过日子就像玩闯关游戏》、《亲密关系的重建》</p>\n<p><img src=\"https://pic3.zhimg.com/v2-0aa78f172d315f4eea944566e6188e85_720w.jpeg?source=b1748391?rss\" data-rawwidth=\"2048\" data-rawheight=\"1365\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-0aa78f172d315f4eea944566e6188e85\" data-watermark-src=\"v2-b60161716b58cde31be719fbe7179b7f\" data-private-watermark-src=\"v2-2b73c30fa6bd9cf4c7a433a2f3a4d15d\"></p>\n<p data-pid=\"xmgM2zIb\">同时关注我往期高赞回答，有收获、有惊喜！</p>\n<a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://www.zhihu.com/question/20375167/answer/435503936\" data-image=\"https://pic3.zhimg.com/v2-0b1657656a823cdccba094fcc3c5ea27_qhd.jpg?source=b1748391\" data-image-width=\"556\" data-image-height=\"424\" class=\"internal\">什么样的男人不能嫁？</a><a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://www.zhihu.com/question/334497220/answer/751689060\" data-image=\"https://pic2.zhimg.com/v2-c001b7171d1067420871fd53332728b3_l.jpg?source=b1748391\" data-image-width=\"400\" data-image-height=\"498\" class=\"internal\">婚姻里最可怕的是什么？</a><p data-pid=\"FQHx2aLi\"><br></p>\n<p><br></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/lu-yue-46?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">婚恋咨询师卢悦</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/515143415/answer/2387531876?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">249 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/433844364?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">结婚是因为幸福，为什么最后只剩下一地鸡毛?</a><br><a href=\"http://www.zhihu.com/question/449955450?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">生活已经一地鸡毛，女人很想离婚，为什么男人却死活不同意离婚？</a><br>\n","link":"http://www.zhihu.com/question/515143415/answer/2387531876?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"荷兰弟的《神秘海域》拍得怎么样？值得去看吗？","date":"2022-03-14 04:20:16","description":"\n<p data-pid=\"79tnkMnT\">从入手游戏神秘海域4开始，我就打开了一个冒险寻找传说中海盗的宝藏，并揭露历史中隐藏的阴谋为主线的世界旅行。所以我对这部电影的期待值是很高的，但是又有担心，担心它成为下一个《孤胆义侠》2005，因为游戏基本上纯虚构的故事线，而电影在创作的基础上必须要有写实的感觉，让人有代入感寻求共情。所以游戏和电影的相结合不得不说，确实是很有难度，但神秘海域游戏做的逻辑性非常强，每一个剧情都是经得起推敲的，那游戏和电影之间就有了桥梁，也有了转变的基础从一部优秀的游戏转变为一部优秀的电影，荷兰弟在剧中的身材也是能看出了是花了时间锻炼过的，包括还原了很多在游戏中的攀爬，跳跃，跑酷等动作都是很让游戏玩家所惊喜的，剧中的美式幽默也隔三差五就冒出一句，在紧张的剧情线中穿插，使得观影者的观影体验总体都是轻松愉快的。虽然说看这种电影不能带着脑子看但是还是有不少bug的存在是不能细扣的，比如黄金到底有多重，在“飞船大战”上荷兰弟用黄金盾牌挡子弹，难免会让人有一些短暂的出戏，以及反派死于话多被割喉了却只有一道血线，不过这些问题都不大，毕竟是游戏改编，能还原一部分剧情以及优秀的画面我就已经很满足了，轻轻松松的不带脑子看这个电影也挺爽的不是嘛</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/42-51-89-74?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">三金的秋实</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/520724384/answer/2388347961?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">250 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/517109525?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">荷兰弟主演的《神秘海域》定档 3 月 14 日，身为游戏玩家的你会走进电影院去看吗？</a><br><a href=\"http://www.zhihu.com/question/520765294?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">荷兰弟的《神秘海域》和 DC《新蝙蝠侠》同期上映，谁能拿到更好的票房？</a><br>\n","link":"http://www.zhihu.com/question/520724384/answer/2388347961?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"让 AMD Yes 不起来的小模块：fTPM 性能问题的成因与解决","date":"2022-03-14 03:37:14","description":"如果你正在使用 AMD Ryzen 处理器的电脑，最近或多或少都可能遇到了系统间歇性卡顿的问题，比如：软件无故卡顿、音频间歇停顿等等一系列问题。不过，这并非是你或者 Windows 11 的问题，AMD 也于近期调查了卡顿的原因并发布了公告：「卡顿是由 Ryzen 处理器内置的固件可信平台模块（fTPM）引起的」。\n既然 TPM 是这次 Ryzen 处理器系统卡顿的罪魁祸首，那么为什么微软却极力要求 Windows 11 的硬件设备中必须有 TPM？它到底有多重要？以及我遇到了这个问题我能怎么办？<a href=\"https://sspai.com/post/72029\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/72029"},{"title":"派早报：少数派迎接十周岁生日；Google 宣布推动个人数据平台间迁移等","date":"2022-03-14 00:50:17","description":"你可能错过的新鲜事少数派迎接十周岁生日今天是少数派建站十周年纪念日。2012年，移动市场群雄逐鹿，异形产品天马行空；平台生态渐成规模，app经济方兴未艾；3D打印、4GLTE、无人驾驶等「未来科技」纷 ...<a href=\"https://sspai.com/post/72038\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/72038"},{"title":"住了很多年的老房子，甲醛还会超标吗？","date":"2022-03-13 07:19:17","description":"\n<p data-pid=\"4rBtdw4e\"><b>结论：住了多年的老房子是会存在甲醛超标的情况的，不过根据房子不同的情况来进行分析</b></p>\n<p data-pid=\"xx0BP4Em\">以下从几个部分进行分析</p>\n<p><img src=\"https://pic2.zhimg.com/v2-b7e5ec152d414fa4917274fff537ffb6_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1023\" data-rawheight=\"490\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"Z5xwxxZW\">大部分甲醛的产生都是由于新房在装修的时候产生的，从油漆工程的开始到地板、柜子、窗帘以及家具的安装让甲醛的含量达到一个高峰状态，家具中含胶的所有物品都是存在甲醛污染源的</p>\n<p data-pid=\"6gisj7BH\"><b>而老房子又产生甲醛的原因有哪些呢？</b></p>\n<p data-pid=\"_jzY4jLn\">首先是关于家具的添置，更换窗帘、添置新家具等关于家具的一系列更换，都会造成甲醛超标，比如：沙发、床、柜子、茶几、窗帘、桌子、椅子....这是很容易被忽略的一个地方，很多人可能完全没有想到，新的家具添置以后也不会刻意去通风，如果没有及时通风，在家具更换多的情况下，轻易就会导致甲醛超标，所以最好的方法是把家具先放置一段时间再放家里，或者是家具入场以后每天及时进行一段时间的通风，让空气流通。</p>\n<p data-pid=\"6PZPunOO\">再就是有些老房住久了子久了会进行局部的修缮，而在这些装修过程中，造成甲醛污染的有：更换壁纸、木地板、墙面粉刷、家具布艺的粘接剂、或者各种板材需要大量的粘合剂，而木材的构造不同，使用的粘合剂用量也不相同，用量的大小决定了甲醛的污染程度，所以，老房子的翻新也是会导致甲醛超标的一个点，不管是翻新的面积大不大，都要及时的进行通风。</p>\n<p data-pid=\"5615D1xu\"><b>壁纸更换</b>：更换壁纸的甲醛来源于需要用胶水把壁纸黏在墙上，甲醛来自于胶水，以及壁纸本身的价格就低廉，使用方便，有些商家会使用化纤纺织品获取更多的利润空间，导致再使用过程中释放出甲醛一些有害物质</p>\n<p><img src=\"https://pic1.zhimg.com/v2-6fedabd292a24068c87d633bdbdbd376_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"858\" data-rawheight=\"479\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"EUuSCAH6\"><b>木地板：</b>木地板的甲醛来自于地板板材所使用到的胶水，比如复合地板，强化地板，这种地板是一定用了胶水的含甲醛的，而纯实木地板就比较环保，甲醛的释放量很少，缺点就是价格也比较贵</p>\n<p><img src=\"https://pic3.zhimg.com/v2-a4a22ce197eef23623b6195708feec07_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"946\" data-rawheight=\"505\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"ievAtx0l\"><b>墙面粉刷</b>：墙面的粉刷会用到油漆、乳胶漆之类的，涂料粉刷里面都有一定的甲醛，就算是宣称环保涂料，也不能避免，刷白墙前也是需要用胶水进行调试的，还有需要用到的粘合剂，溶剂都是含有甲醛的</p>\n<p><img src=\"https://pic1.zhimg.com/v2-4914d2a814c0c98958b187c54138e3cd_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"581\" data-rawheight=\"408\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"4zVE2V1B\">还有一些布艺家具也是会含有甲醛的，比如说沙发这种大的家具，在工艺上也是会用到胶水的，不过有些布艺制品只有微量的甲醛，使用之前可以用请说浸泡清晰，或者是用湿抹布擦拭家具，还有用湿拖把拖地板，这样也是可以清除一部分甲醛的，但总体来说软体家具和实木家具并不必过于考虑甲醛危害。</p>\n<p data-pid=\"nlSc_HnC\">所以在面对老房子的翻新跟家具的添置，不进行晾房同样会甲醛超标，如果老房子已经居住在里面不便，可以选择白天的时候把窗户门都打开通风透气，晚上再关上。</p>\n<p data-pid=\"r1SJoM3H\">另外除了家具材料，还有墙面的列横、家居，特别是板式家居，封边破损都会导致甲醛污染从封闭的内部释放出来，再加上没有去及时通风，导致空气流通不畅以及夏季温度高甲醛容易释放，所以也容易导致甲醛超标，如果室内的温度越高，甲醛的释放就更高</p>\n<p><br></p>\n<p><img src=\"https://pica.zhimg.com/v2-c5ee10d3f240243961eb6cd5bcaca26c_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"743\" data-rawheight=\"447\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"MAxnvE9h\">甲醛的挥发周期是非常之久的，一般家具或者是刚开封的材料在3-5个月甲醛释放量会达到一个高峰期，在数年之后由开始的快速到缓慢的释放过程，但是板材中还是会继续存在着一定的甲醛含量，是封闭在内部的，等多年以后板材破损，就又自然挥发出来了</p>\n<p data-pid=\"yujwQQGM\">各类板式家具，比如地板、橱柜、衣柜或者一些专门做的定制的家具，只要是人造板材都需要注意，人造板的甲醛散发是影响最久的室内污染，尤其是密度地板，地板的用量是最大的，所以要更加注重</p>\n<p data-pid=\"-CHIR-IY\"><b>选择人造板材要注意的点：</b></p>\n<p data-pid=\"HVSLCoCm\"><b>①板材的好坏</b></p>\n<p data-pid=\"EWy9I5yu\">板材的好坏能决定板材的甲醛含量的高低，以及甲醛的释放年限，越差的板材甲醛的挥发就越久</p>\n<p data-pid=\"FH0wRSvU\">去年发布的板材甲醛释放标准，不止有E1级别，还有E0级别以及更高标准的ENF板材的释放限量值，购买板材可以要求商家出示板材甲醛的检测报告进行选择更为环保的产品</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-748785ffb8f48f7eb070604c8c31aef3_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1266\" data-rawheight=\"479\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"gTxL4RYv\"><b>②板材的封边</b></p>\n<p data-pid=\"og8wOBcp\">严密的封边会把游离性甲醛封闭在内，如果没有选择好的封边，使用久了很容易导致封边破损，甲醛又会重新进行释放</p>\n<p data-pid=\"r4iTNrDh\">Ps：还有一些板材，封边技术过关，表面上都环保了，但是有些家具在使用的过程中会需要打孔或者是钻眼，也会破坏板材，导致甲醛的释放，所以从根源上选择环保一点的板材才是最好的选择</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-ea3022a26008707d238d16aafa940c5b_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"533\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"WN7ejirt\">如果是选择的纯实木的家具，相对来说，环保度更高，用胶量也比人造板材相对较少些</p>\n<p data-pid=\"3k7epbMV\">最后就是以前使用的家具建材，刚开始装修时使用了劣质的涂料油漆、壁纸乳胶，而劣质产品甲醛含量更高，挥发时间更为长久，所以是即使是多年，也会导致老房子甲醛超标，而且根据《2020国民家居环保报告》显示：房间装修完成5年内甲醛超标率仍高于15%，所以家具建材的选择也是尤为重要的</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-155d7116c185f6822ad351d19dd3e528_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"481\" data-rawheight=\"289\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"nBUd02zI\">PS：冬季天气冷，很多人都不会开窗户通风，如果室内开着暖气会更容易加快甲醛的释放，室内的通风条件也不是很好的，就非常容易导致甲醛超标，最好是及时选择一个时间段去通风，可以不用一直通风</p>\n<p data-pid=\"ByjJPFji\"><b>对于老房子甲醛超标的原因，主要分为这三个原因</b></p>\n<p data-pid=\"ZYn29S5F\"><b>（1）家具的更新频率</b></p>\n<p data-pid=\"2Xe5QFA3\">如果家具的添置频率非常快的的话，又没有及时去除甲醛，会导致甲醛越来越多，释放跟不上导致超标，所以买了家具即使是不同时间进场，也要及时进行通风</p>\n<p data-pid=\"JT6jYiK0\"><b>（2）选用的家具板材环保性能是否达标</b></p>\n<p data-pid=\"3i-nKyt2\">板材的运用是非常大的，不好的板材甲醛含量会更高，释放的年限就会更久，一般甲醛的挥发长达数年之久</p>\n<p data-pid=\"5vuOzDit\"><b>（3）室内空间的大小</b></p>\n<p data-pid=\"2lokheMS\">如果是小户型的空间不建议放太多的家具，即使是买的都是环保标准内的家具，但是在同一空间内，还是会产生堆叠效应，就会导致甲醛超标的结果，这也是很容易被忽略的地方</p>\n<p data-pid=\"T30TelIn\">而对于甲醛是否超标，我们作为消费者只有这两种方式能够比较靠谱的检测出甲醛，第一种是上万元的检测仪</p>\n<p data-pid=\"QJAz3xl2\">市面上有很多甲醛检测仪，那些几十、几百的几千的检测仪都是不靠谱的，没有成本这么低的检测仪，所以不建议购买，精准的检测仪价格至少是在万元以上的。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-874b458af1e99555865f02a3d85388e1_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1070\" data-rawheight=\"262\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"o_qw2j8q\">另外就是第三方检测机构</p>\n<p data-pid=\"cFVYebCJ\">所谓的第三方并不是都很靠谱，甚至有些为了推荐产品可以去修改甲醛数值（不要选择治理跟检测一起包办的），很多看似专业的设备可能只要几百元。</p>\n<p data-pid=\"6-SQqXk6\">最靠谱的是具有CMA资质的检测机构，一般这种这种的专业检测机构的检测结果是具有法律作用的不存在作假</p>\n<p data-pid=\"_w1wdui1\">选择第三方检测的缺点：只能检测一次，价格略高，对于正规的第三方普通消费者难以辨别</p>\n<p data-pid=\"AAJbnYqB\">居室在密闭12小时后检测，以0.1 mg/m³的作为限定值，如果居室在密封1小时后检测，就应该使用0.08 mg/m³作为限定值</p>\n<p data-pid=\"H_2chOuY\">还有一些没有CMA资质但是可以做专业检测的机构，还是一个道理，不选治理跟检测一起包办的，不然基本都是坑</p>\n<p data-pid=\"4GRFQk46\">最后就是除甲醛了，对于所有装修人都要面临最大的一个问题，实际上除甲醛最有效的方式</p>\n<p data-pid=\"XcheGCha\">就只有一种那就就是室内通风、加速空气的流通，其余的办法再多都没有通风来的实际</p>\n<p data-pid=\"0zSvk_e5\">可以选择在天气好的时候把窗户都打开透气通风，如果想要更快一点除甲醛，再选择一把工业电风扇，双重叠加上效率更快</p>\n<p data-pid=\"9v0SV6Fx\">网上还有所谓的闷放法，就是闷个几天再一次性打开，最好是不要一直闷着再打开，一会儿闷一会开是达不到一直通风的效果的，这里涉及到一个空气浓度梯度差，如果一直闷着的话空气里的甲醛释放越来越多，等释放到一个临界值以后甲醛就不会再释放了，所以夏季最好是一直开着通风，但是冬季是可以这样做的的，冬季温度较低，甲醛释放慢，间歇性的闷会让空气加热，有利用甲醛的挥发。</p>\n<p data-pid=\"BXniLzqa\"><b>新风系统</b>：只适合在天气不好不能开窗的时候使用，开窗稍微有一点风的状态效果都会比这个好上十倍，如果老房子没有做新风系统，也是可以选择再安装新风系统的</p>\n<p data-pid=\"8WG0SzSh\">包括但不限于增强通风的方法还有：排气扇以及新风空调都可以使用</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-d88d1fbd022a01b9aa33ab70930c7e49_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"656\" data-rawheight=\"382\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"Ln7wh19P\">绿植、活性炭这些去甲醛、吸附甲醛基本都是辅助作用，活性炭吸饱以后也不会再吸附了，不及时清理还会造成二次污染，所以还是多加一把风扇吹一吹吧</p>\n<p><img src=\"https://pic2.zhimg.com/v2-8f5fdf0984475f520f44e8c930f6e8d3_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"819\" data-rawheight=\"521\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\" data-qrcode-action=\"none\" data-tags=\"qrcode\"></p>\n<p data-pid=\"X0ijyqP0\">所以对于老房子产生的甲醛，如果没有家具的大变动以及翻新，基本上也不会超标，就算有只要及时进行通风达到标准，也是没有多大问题的。</p>\n<p data-pid=\"6bQhry5t\"><b>以上，欢迎知友补充讨论。</b></p>\n<p data-pid=\"PGDAIm3b\">非常荣幸受到@知乎家居@知乎科学@知乎健康的邀请，成为「家装真探社 01 号事件」的特邀真探！</p>\n<p data-pid=\"fnUeazbl\">本期事件，我调查的问题是「住了很多年的老房子，甲醛还会超标吗？」。作为一名从业者，我将从多方面进行调查取证，揭开甲醛隐藏的秘密。</p>\n<p data-pid=\"nq0jNih9\">如果想知道更多关于甲醛的问题，欢迎点击链接<a href=\"https://www.zhihu.com/roundtable/hchosecrets/\" class=\"internal\"><span class=\"invisible\">https://www.</span><span class=\"visible\">zhihu.com/roundtable/hc</span><span class=\"invisible\">hosecrets/</span><span class=\"ellipsis\"></span></a>，进入真探圆桌会议，与我一起探查真相！</p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/gu-ren-gui-62?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">故人归</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/519981421/answer/2383109294?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">32 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/475414741?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">新房装修完测甲醛，密闭了整整四天，测出来超标三倍，这个测量结果准确吗？</a><br><a href=\"http://www.zhihu.com/question/495646522?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">新房装修完后甲醛是不是都超标吗？</a><br>\n","link":"http://www.zhihu.com/question/519981421/answer/2383109294?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"甲醛检测合格，为什么家里味道还是很大？","date":"2022-03-13 07:12:34","description":"\n<p data-pid=\"-NVbpb4B\">甲醛与气味</p>\n<p data-pid=\"AiiYyF3E\">1.\t背景介绍\t1</p>\n<p data-pid=\"6T4ErqcM\">1.1.\t常见误区\t1</p>\n<p data-pid=\"_N0qvkQw\">1.1.1.\t数据之惑\t1</p>\n<p data-pid=\"E6tjRLb9\">1.1.2.\t气味之谜\t1</p>\n<p data-pid=\"bgXO2kTk\">2.\t实验测试\t1</p>\n<p data-pid=\"rOnj6Nrp\">2.1.\t检测迷雾\t1</p>\n<p data-pid=\"5HiWX0Rj\">2.1.1.\t乱花迷眼\t1</p>\n<p data-pid=\"jjsRKSyU\">2.1.2.\t4160之谜\t1</p>\n<p data-pid=\"VuSK34qW\">2.2.\t专业检测\t1</p>\n<p data-pid=\"p2xrUM3l\">2.2.1.\t解密CMA\t1</p>\n<p data-pid=\"2U33HDDa\">3.\t结果分析\t1</p>\n<p data-pid=\"FXGnB4am\">3.1.\t报告解读\t1</p>\n<p data-pid=\"mjoVPQiz\">3.2.\t案发现场\t1</p>\n<p data-pid=\"-g0FHKr4\">3.2.1.\t甲醛疑案\t1</p>\n<p data-pid=\"zi9DzzcM\">3.2.2.\t气味迷踪\t2</p>\n<p data-pid=\"eB0n7l4e\">3.3.\t相关研究\t3</p>\n<p data-pid=\"_amxPrFe\">4.\t最终结论\t3</p>\n<p data-pid=\"d-BzgISY\">4.1.\t真实关系\t3</p>\n<p data-pid=\"kqoVd5Yl\">4.2.\t应对方法\t3</p>\n<p data-pid=\"44hlTPhf\">4.2.1.\t甲醛应对\t3</p>\n<p data-pid=\"aurJ1Vdb\">4.2.2.\t气味问题\t3</p>\n<p data-pid=\"ibVJIeu4\">番外篇：无味杀手！</p>\n<p><br></p>\n<p data-pid=\"iL75k2r9\"><b>先说结论：</b></p>\n<p data-pid=\"jk_ZWIv2\"><b>因为室内常见空气污染物多达数百种，甲醛只是构成环境整体气味表现的因素之一，因此，气味大不一定甲醛超标，气味小不一定甲醛合格，无气味也不一定安全。但是，在很多情况下，室内甲醛的浓度和整体气味表现确实存在着一定的联系。</b></p>\n<p><br></p>\n<p><br></p>\n<p data-pid=\"f7Hb8lD9\"><b>1.\t背景介绍</b></p>\n<p data-pid=\"SqfiX3iA\">从事人居环境安全相关工作和研究十多年以来，气味和甲醛超标之间的关系是被问到最多的一类问题。我接触到的大多数咨询者都觉得，气味大那就是甲醛超标，气味小就是安全的环境，然而事实到底是不是这样呢？</p>\n<p><br></p>\n<p data-pid=\"Xno5Q02x\"><b>1.1.\t常见误区</b></p>\n<p data-pid=\"PBYnU75y\"><b>1.1.1.\t数据之惑</b></p>\n<p data-pid=\"tMLaVBz8\">随着生活水平日益提高，大家越来越关注呼吸环境的健康，在入住新家（或工作场所）之前，越来越多的人会选择先做一些相关的检测，然后依据测试的数据来判断安全与否。现在市面上可供检测的机构和设备种类繁多，价格也各不相同，到底怎样的测试才能得到相对靠谱的结果、怎样的测试结果真的安全、同一时间不同的测试，或者不同时间同样的测试为何结果大相径庭？这些都是经常给大家带来巨大困扰的谜团。</p>\n<p data-pid=\"YJD2QIJ-\"><b>1.1.2.\t气味之谜</b></p>\n<p data-pid=\"Ee97_U1d\">明明各项测试数据显示达标的环境，为啥依然存在着让人不安的气味；明明自我感觉没什么味道的环境，甲醛数据超乎预期？气味和甲醛超标之间到底存在怎样的关系呢？下面我们将通过一些实际的案例来简单探讨一下这些谜题。</p>\n<p><br></p>\n<p data-pid=\"Seu7uNk5\"><b>2.\t实验测试</b></p>\n<p data-pid=\"-pctBzu2\"><b>2.1.\t检测迷雾</b></p>\n<p data-pid=\"kT6VL1gE\"><b>2.1.1.\t乱花迷眼</b></p>\n<p><br></p>\n<p data-pid=\"zkZIqnEI\">知乎有一句老话叫做：先问是不是，再问为什么。这句话在今天的议题中一样有着重要的意义。通常对于向我咨询某种检测数据下是否已经可以安全入住的朋友，我都会先搞清楚这个数据是怎么来的，是否具有参考价值，否则后续的所谓判断与建议，不过是在浪费彼此的时间而已。</p>\n<p data-pid=\"8zpLiWPN\">A.自购仪器：</p>\n<p data-pid=\"fJmqSrdK\">我们知道，现在通过电商平台可以买到各种各样的检测仪，价格从几十到上千不等，这些东西测出来的结果靠谱吗？</p>\n<p data-pid=\"MlZDSVju\">简单总结一下：价格低于一万的便携式仪器（除了极少两三种几千价位的泵吸式仪器之外），无论是测甲醛，还是测TVOC的，我都不建议轻易购买和使用。原因很简单：除了测不准，其他都挺好的。而且这个所谓的测不准，并不是具有普遍规律的偏低或者偏高，而是薛定谔的测不准。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-0c9ab25f2c3139ffa5d8e5c7e54daab2_720w.png?source=b1748391?rss\" data-caption=\"我对一些简易甲醛测试仪测试数据和同一环境下同时进行的标准测试结果的数据比对\" data-size=\"normal\" data-rawwidth=\"686\" data-rawheight=\"429\" data-watermark=\"watermark\" data-original-src=\"v2-0c9ab25f2c3139ffa5d8e5c7e54daab2\" data-watermark-src=\"v2-6e92ee7e2b1f00d083cc748a6cf2a15a\" data-private-watermark-src=\"v2-a881d8940d26bdb2437873a0bb0f3bc4\"></p>\n<p><br></p>\n<p data-pid=\"EmsTKWhT\">测不准的原因分几类，最便宜那些是传感器和宣称要测试的有害物之间没有明确的对应关系，这个果壳网的网友之前做过大面积拆解测试，比较多的是用风速传感器冒充甲醛/TVOC传感器的，还有一些根本都不是传感器，但凡有一点用，也不至于一点用也没有，实在让人绝望；</p>\n<p data-pid=\"N6oPi-ry\">另一类稍贵一点的，已经开始咬牙斥巨资（其实成本也挺便宜的）上了真正的甲醛传感器，但是由于质量不怎么样，同时舍不得（或搞不懂）泵吸式，用的廉价的扩散式方案，那准确度方面只能显而易见的拉跨。注意这种情况还只是针对甲醛测试仪，至于那些价格便宜而又号称能够测TVOC甚至同时还能测甲醛、TVOC、苯系物、氨之类的，不管您怎么看，我反正是看不懂，但我大受震撼，动弹不得，仿佛被厂家夺走了童贞。</p>\n<p data-pid=\"EDW2DgCz\">对于一万以上的便携式仪器，相对能够粗略测试一下甲醛的有采用光电光度法的理研（国产同类型的是泰宜康），以及电化学传感器法的英国PPM系列（PPM-HTV、PPM-400等）和美国4160，以及日本生产的一堆已经不那么便携的测试仪（GASTEC、光明理化、新宇宙等，市面上极为少见）；能够粗略测试一下TVOC的有英国的离子和美国的华瑞系列，都是紫外光离子化检测方式。这些东西虽然已经很贵了，但其实受限于体积，准确度和实验室标准流程做出来的结果还是不能相比，凑合用一下是可以了。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-0f5d182ac4df85097cd7be27f67c8f60_720w.jpeg?source=b1748391?rss\" data-caption=\"PPM-HTV甲醛检测仪\" data-size=\"normal\" data-rawwidth=\"2936\" data-rawheight=\"3915\" data-watermark=\"watermark\" data-original-src=\"v2-0f5d182ac4df85097cd7be27f67c8f60\" data-watermark-src=\"v2-0d6752f00b894f9a46b96d519818ec4b\" data-private-watermark-src=\"v2-adac8d7974866f20221e3e94658ba394\"></p>\n<p data-pid=\"Y1wfYW4i\">上图我这个英国 PPM-htv 甲醛检测仪，价格一万以上，应该算是4160之外第二准确的便携式甲醛检测仪了，然而干扰气体依然一大堆，苯酚、乙醇、乙醛什么的，上图的测试数据这么高，你猜是真的甲醛这么高吗？非也，这是对着乙醇空瓶采了一下样的结果（连接了过滤器）。所以这些便携式目前咱只能说凑合用吧，三万多的进口4160在低浓度和高湿度环境下尚且偏差严重呢，就更别说大家在某些电商平台上买到的那些几百几千的所谓高精度甲醛测试仪了。</p>\n<p><br></p>\n<ol><li data-pid=\"9cGDoyH6\">各种家电上面自带的检测仪：</li></ol>\n<p data-pid=\"cvdUYSKJ\">这种东西抛开准确性不谈，还是有它存在的道理，这里我实在不知道怎么评价比较合适而且安全，就暂时不做评价了。大概，也许，说不好也有一些还是不错的吧。</p>\n<p><br></p>\n<ol><li data-pid=\"5W8Pl-KK\">各种漂流检测：</li></ol>\n<p data-pid=\"gEGWz38L\">根据所用仪器的价位，以及是否有定期校准来初步判断可靠性。便携式的准确度参考A部分内容来判断（前不久我一个朋友对照测试了一批漂流检测仪后发现某大机构就存在测试结果对比标准测试普遍偏低的现象）。非便携式的如果是集成小型光度计的那种化学法检测的仪器（八合一、十合一不在讨论范围内），对甲醛的检测准确度会比便携式的相对更准确一些，当然这只能用来测甲醛，对于苯系物、TVOC等其他气体的测量，我只见过南方一家专业机构有做，根据之前遇到的几起案例来说，至少对于苯的检测准确度，我抱持着巨大的保留意见。如果是 GASTEC 的检测管式，理论上会稍好一点，不过我目前还没见过有漂流这玩意的。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-909d3507f88f21b3af946d2fba32f84d_720w.jpg?source=b1748391?rss\" data-caption=\"日本GASTEC快速气体检测管\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1440\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<ol><li data-pid=\"H50a71tR\">机构上门检测：</li></ol>\n<p data-pid=\"14TBBmHX\">非CMA机构若采用上面C部分所述质量尚可的集成式光度计认真检测，基本也可以得到一个相对靠谱的甲醛检测结果；专业检测机构（具备CMA资质或更多资质）就更放心一点，但是这些年我也见过不少专业机构做事欠专业的，怎么说呢，凡事无绝对吧，不敬业的人干啥都会出问题。</p>\n<p><br></p>\n<p data-pid=\"UR0s-qRm\"><b>2.1.2.\t4160之谜</b></p>\n<h3>上述D中我说到，进口4160算是相对靠谱的便携式甲醛检测仪（实际上已经是目前为止准确度最好的即时读数型甲醛检测仪了），不过这里我要举一个反例，告诉我们凡事都有例外，不能唯设备论。</h3>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-9808610d689e1c1f288d75b907869e8c_720w.jpg?source=b1748391?rss\" data-caption=\"4160甲醛检测仪\" data-size=\"normal\" data-rawwidth=\"684\" data-rawheight=\"539\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"WLB_bu7L\">几年前我接到一个来自西部某大城市的读者朋友的咨询，告诉我住了七八年的老房子测出甲醛超标严重该怎么办才好，当然老规矩我还是先问怎么测的，对方说是当地环保局的一个朋友带着进口4160测试出的。哎呦不错哦，4160还是能打的。不过当我看了现场视频和照片，询问了很多问题后，认为这个结果不太能够让我接受。百思不得其解之下，我让她帮忙确认一下这个4160的使用时间和最近校准时间。后来知道已经用了十来年（这玩意传感器寿命一般是三年左右），最近一次校准是3年前（每年都要校准才行）。更多的情报显示：当地环保局当初购进两台4160，日常用的就是这一台，常年四处漂流，朋友圈里哪家装修去哪家。另一台几乎不使用，只在需要迎接检查的时候才拿出来展示一下。我觉得这个案例告诉了我两个事情：一是再贵的仪器也得正确使用，生产队的驴都要有休息的时间；二是很多应该很专业的机构都备不住或多或少存在一些不那么专业的人，不能根据一个人的身份盲目相信他做的事情就应该是靠谱的。</p>\n<p><br></p>\n<p><br></p>\n<p data-pid=\"-lfMFOwO\"><b>2.2.\t专业检测</b></p>\n<p data-pid=\"__y0LN5q\"><b>2.2.1.\t解密CMA</b></p>\n<p><br></p>\n<p><br></p>\n<p data-pid=\"5CTAa1Iq\">上面说了，我们普通人相对能够找到的最靠谱的检测方式，就是寻找当地有CMA资质的第三方专业机构上门采样检测，那这种机构到底是怎样完成检测的呢？</p>\n<p data-pid=\"E8daX_Xy\">首先是上门采样，机构会提前告知客户根据实际需求选择合理的提前封闭时间（一小时（国标50325）或12小时（国标18883）），封闭时间到了之后会进入待测试房间进行采样。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-b74e21bcfea1fa3cbdcec894d6f6d0ed_720w.png?source=b1748391?rss\" data-caption=\"最常用到的采样器之一：北京劳保所的QC-2型双通道大气采样器\" data-size=\"normal\" data-rawwidth=\"603\" data-rawheight=\"803\" data-watermark=\"watermark\" data-original-src=\"v2-b74e21bcfea1fa3cbdcec894d6f6d0ed\" data-watermark-src=\"v2-69c665b8b860686edc2c6c407ee3cdaa\" data-private-watermark-src=\"v2-11656ee4734a4964b84cc103015d2827\"></p>\n<p data-pid=\"ugghnar-\">采样阶段用到的核心仪器就是上图这样的大气采样仪，最常见的就是这种北京劳保所生产的，贵一点的还有崂山应用仪器厂之类的，不差钱机构——比如国检中心那就是直接上下面这个了。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-6adf845dea2d1b3e4293c163e65c9983_720w.jpg?source=b1748391?rss\" data-caption=\"GILIAN采样器\" data-size=\"normal\" data-rawwidth=\"575\" data-rawheight=\"669\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"m4-N-6hC\">我们看到上上图的北劳的采样器上面，左右各连接了一个透明玻璃气泡管和一支细长的不锈钢管，这俩分别是干啥的呢？左边的不锈钢管，一般是TVOC吸附管，里边有吸附质，用于采集挥发性有机化合物样本；右边的玻璃气泡管一般是用于采集空气中的甲醛（或氨气）的采样管，用于收集甲醛（或氨）的样本。采样器的主体就是一个恒流抽气泵，经过规定时间内的强制抽吸，让室内空气流经采样管，待测的有害气体物质通过固体或者液体的吸附质被收集在采样管中，以待拿回实验室分析化验。</p>\n<p data-pid=\"e0zDMH0z\">样本采集回实验室后，实验室人员会依据相关国家标准如 GBT 18204.2-2014 《公共场所卫生检验方法 第2部分：化学污染物》等，使用标准物质制作待测污染物的标准曲线，使用化学法（甲醛、氨等）或者气相色谱法（苯系物、TVOC等）对采集的样本进行定量分析，得出准确的结果。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-c1abeb9b7fb4780198e8950f69e49297_720w.jpg?source=b1748391?rss\" data-caption=\"用于甲醛、氨等测试的核心仪器——分光光度计\" data-size=\"normal\" data-rawwidth=\"864\" data-rawheight=\"640\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-7ecf7bb586eca7b78b951ea00da6cf5c_720w.jpg?source=b1748391?rss\" data-caption=\"用于苯系物、TVOC等测试的核心仪器——气相色谱仪\" data-size=\"normal\" data-rawwidth=\"1267\" data-rawheight=\"950\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-784e587bcd109c7b16dcd793f9145702_720w.jpg?source=b1748391?rss\" data-caption=\"部分标准物质\" data-size=\"normal\" data-rawwidth=\"1268\" data-rawheight=\"1691\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-9ed39fbe08b08d19622eed0ebbc85d74_720w.jpg?source=b1748391?rss\" data-caption=\"正在展开的色谱图\" data-size=\"normal\" data-rawwidth=\"1267\" data-rawheight=\"950\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"nkJrtzuA\">详细的原理这里就不展开说了，大家有兴趣了解的话可以读一下相关国标，比如上文提到的重要标准：GBT 18204.2-2014 《公共场所卫生检验方法 第2部分：化学污染物》，里边对各种室内常见污染物的测试原理、方法和流程都有无比详尽的描述。</p>\n<p><br></p>\n<p data-pid=\"bXU_npGv\"><b>3.\t结果分析</b></p>\n<p data-pid=\"KJjuT7Jn\"><b>3.1.\t报告解读</b></p>\n<p data-pid=\"YlxmDUXC\">经过上述专业机构测试之后我们会拿到一份检测报告，对于这个报告，我们需要关注以下信息：</p>\n<ol><li data-pid=\"Iq9Nkqyb\">封面顶部是否有CMA印章，这意味着该机构到底是不是具备了本报告涉及项目的测试资质（能力）。当然如果除了CMA印章外还有CNAS，CAL之类的更好，多多益善属于是。</li></ol>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-addfa55d9ffbbe7001efc081a146de85_720w.jpg?source=b1748391?rss\" data-caption=\"报告封面顶端的各种资质印章\" data-size=\"normal\" data-rawwidth=\"1004\" data-rawheight=\"212\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"77sT5jb3\">报告封面顶端就是该机构取得的相关资质，最左边红色的印章就是最常见的CMA认证，一般情况下有这个就可以了。</p>\n<ol><li data-pid=\"brw22fIk\">报告封面的委托人是不是本人，项目名称是否正确——别笑，我就见过报告寄错了人的。</li></ol>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-4ea0414d7d322b574e689b24074d4c07_720w.jpg?source=b1748391?rss\" data-caption=\"采样环境参数\" data-size=\"normal\" data-rawwidth=\"584\" data-rawheight=\"240\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<ol>\n<li data-pid=\"xpQhgFy5\">报告上的检测环境参数，如上图示，温度，湿度、大气压，门窗关闭时间等。这些参数很重要，因为室内环境中有害物的浓度是不停变化的，上述参数都是重要的影响因素，接下来我们看到的测试数据都指的是<b>在上述环境下</b>测试的结果，不能代表其他环境还是这样——这一点是尤为重要的，很多朋友有个误解就是任何专业机构测出来的数据应该一致，任何时间测都是这种污染水平，这是不对的，无论多准确的检测，都只能反应该采样房间<b>当时</b>的污染水平。其他时间测出来和这个不一样是正常的，要一样才是巧合。当然，在一定跨度的时间段内，温湿度、大气压、空气交换率、封闭时间等条件都差不多的情况下，某个时间点的测试结果还是可以去近似评估该房间近期的污染状况的。</li>\n<li data-pid=\"ldlalcVU\">测试结果</li>\n</ol>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-a92448c08f702d50bae62b2c716a2e1c_720w.jpg?source=b1748391?rss\" data-caption=\"检测报告数据页\" data-size=\"normal\" data-rawwidth=\"910\" data-rawheight=\"795\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"Nr7DdQIm\">上图是一个检测报告的数据页，我们可以从中看到各个房间各种有害物的测试数据，比如上图中就对甲醛、苯、氨、TVOC和氡五项做了检测。我们可以根据下部依据的国标限值对比判断各项有害物是否超标和超标是否严重。这里我们肯定发现了一个问题：没有关于气味的数据和描述对不对？</p>\n<p data-pid=\"vkwNhc_u\">是的，目前为止，国家还没有将气味这一指标纳入室内环境检测相关的标准体系之内，甚至连统一的测试方法标准都还没有。这是因为，气味来源于嗅觉感知，更多是人的主观判定结果，对气味的量化评估技术难度较大，虽然气味本质上由VOCS综合造成，但很多对人来说很明显的气味都还不能完全依靠仪器数据来准确反应，更多需要依赖多位专业嗅辩员评价结果的均值，测试成本还比较高。不过随着大家对气味的关注越来越大，对这方面的研究也相应增长，但在涉及室内环境方面的规定目前主要还是集中在建材本身而非整体环境，如针对人造板的 LY∕T3236-2020《人造板及其制品气味分级及其评价方法》、针对定制家居的T／GCHA_1.3—2018《定制家居产品_人造板定制衣柜_第3部分_有害物质限量及气味等级》、针对胶黏剂的 HG/T 4065-2008《胶粘剂气味评价方法》、针对皮革制品的 QB/T 2725-2005《皮革气味的测定》、针对学校操场跑道的 GB 36246-2018《中小学合成材料面层运动场地》等，可参考的方法极少而且不成体系，有待进一步完善。</p>\n<p data-pid=\"tUFeWosI\">对于上图的测试结果，我们不难发现，四个房间的甲醛和TVOC都有不同程度的超标，其他项目尚可，在现场的感知情况来看，四个房间都有不同程度的”装修味“，那么这些气味和污染物之间到底有怎样的关系呢？我们走进”案发现场“来做一下初步的调查。</p>\n<p><br></p>\n<p data-pid=\"RHlo2VDR\"><b>3.2.\t案发现场</b></p>\n<p data-pid=\"KJ_qwAlP\"><b>3.2.1.\t甲醛疑案</b></p>\n<p data-pid=\"WKDzbg8S\">这里边最让咨询者意外的是主卧（主人房），这个房间面积较大，他认为封闭12小时后闻到的气味是最小的，自己用来定制衣柜的还都是挺贵的进口板材，原本以为这个房间最环保，但是测试的结果无论甲醛还是TVOC的数据都是最高，所以觉得很难理解。我调查了一下现场污染源，发现室内主要的人造板制品就是定制衣柜了，但这个定制衣柜用到的板材确实是质量还行的某进口大牌板材，虽然环保上不如无甲醛板材，排放等级也还是拿了F4的，在这样比较小的装载量下，理论上不会造成严重的甲醛污染，其他重点可疑的对象床垫、床和床头柜、地板、踢脚线之类的质量也都很好，那么最主要的污染来自什么地方呢？</p>\n<p data-pid=\"NRIYqEBn\">我注意到，在床头的墙面做了几个平米的软包装饰，根据询问得知，硬包内部使用的是来历不明的细木工板（俗称大芯板），根据一贯经验可知，这种用于软硬包内部的细木工板，除非主人有明确要求，一般默认都是使用最廉价的裸板，这种板材的甲醛排放往往连强制标准都达不到，用量稍微一大，就很容易造成严重的甲醛以及VOC的散发。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-880d968cff51dd5267ac934942ae7633_720w.jpg?source=b1748391?rss\" data-caption=\"常见或不常见用于打底、造型的各种廉价细木工板，有一些类型的甲醛排放量甚至低于老国标E2级\" data-size=\"normal\" data-rawwidth=\"1268\" data-rawheight=\"456\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p><img src=\"https://pica.zhimg.com/v2-7650ac50bdad01f813aa3dd407b84b4d_720w.jpg?source=b1748391?rss\" data-caption=\"高质量的细木工板\" data-size=\"normal\" data-rawwidth=\"1266\" data-rawheight=\"950\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"qoYtlLrH\">后来我建议这个咨询者将床头的软包背部的衬板更换成大厂的裸板OSB，表层芯板换成聚酯纤维板，对近距离闻起来有明显气味的窗帘进行了清洗和晾晒（降低甲醛和VOC散发）之后再悬挂，之后在类似环境下复测，除TVOC外各项数据都降到了国标限值之下。但是出现了一些新的气味，这个是更换的裸板OSB引入的，主要是松木原料（OSB以松木为主原料，，使用杨木的厂家相对少一些。松木OSB用量大了往往有明显的松脂气味，也会让TVOC总量有所上升）散发的萜烯类化合物，对健康倒是没有什么大影响（日本有不少研究还认为木材抽提物有各种保健作用），随着时间的增加也会不断减弱直至闻不到。</p>\n<p><br></p>\n<p><img src=\"https://pica.zhimg.com/v2-811b6e53bcbae4d775614db83ea897f9_720w.jpg?source=b1748391?rss\" data-caption=\"OSB——定向结构刨花板，大厂以MDI胶黏剂为主制作，多为无醛板，图为普通OSB裸板正面\" data-size=\"normal\" data-rawwidth=\"1179\" data-rawheight=\"613\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"hLDpRuAG\">不过这个咨询者的情况还算是好一点的，因为给他用的软包衬板是细木工板，而不是更为常用的纤维板，下图用纤维板制作软硬包才是常态：</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-52bfaf3b27d22dbea91e88b9c5cd73ec_720w.jpg?source=b1748391?rss\" data-caption=\"常见的软硬包材料——中密度纤维板\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1920\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"PJK5ZgHg\">使用上图纤维板制作软硬包墙面的，我在成都测到过半面墙就让室内甲醛浓度超标7倍以上的案例，可谓触目惊心了。当然，凡事都有例外，纤维板一样有厂家可以做到F4等级排放的乃至无甲醛的，可惜由于成本以及认知边界问题，绝大多数客户以及装修公司都不会（更多是不知道有这种东西的存在）选择并使用。</p>\n<p><br></p>\n<p data-pid=\"F1jDunf2\"><b>3.2.2.\t气味迷踪</b></p>\n<p data-pid=\"WvSUSuf4\">针对上个案例中的主人房我们简单讨论了一下甲醛的主要来源以及部分气味来源，接下来我们以儿童房为例说一下气味的某些来源。</p>\n<p data-pid=\"ikF6-BnB\">这个房间也是很让主人感觉意外的，因为他觉得气味很明显，没想到各项测试数据都挺低的。我看了一下现场环境，发现用料确实很环保，因为担心儿童的安全，地板是全实木（圆盘豆），床和其他家具（也就一套书桌椅了）是全实木（水曲柳材质，木蜡油涂装），床垫尚未购买，墙面和天花是大牌乳胶漆（已干透），两面墙贴了卡通图案的墙布。其他没了。那这个气味很明显是怎么回事呢？</p>\n<p data-pid=\"-_js8eXO\">其实很简单，主要的气味来源是木蜡油和墙布，尤其是墙布贡献最大。我对不少墙布作过干燥器的甲醛测试，数据都不高，近距离闻上去，气味也不大，但是这玩意一贴就是一面墙，累计用量往往较大，根据经验，贴满了普通墙布的房间，很多在第二年的夏天关闭时间一久都能闻到明显的不愉快气味，影响时间非常久。然后大牌的木蜡油的甲醛测试数据一般也很小，但是其中的一些干性油组分或者石蜡（如果是质量不那么好的石蜡气味会比较明显）渗入木材管孔一定深度，挥发时间相对久一点，会造成一段时间的气味问题。</p>\n<p data-pid=\"-XAAu2e8\">有人可能会觉得好奇，气味不是主要由苯系物和TVOC表现出来吗？这几项数据也不高呀？</p>\n<p data-pid=\"BYeznX8Y\">其实，室内气味的来源非常广泛，很多气味物质的存在感非常强，只需要很低的浓度就会表现出很大的气味，因此在色谱图中往往峰面积最大的物质，并不是室内气味的主要来源，对于环境中气味的定性和定量，至今为止都是难度很高的事情，这也是还没有这方面国标出台的原因，不过，相关的研究已经越来越多，虽然道阻且长，依然未来可期。</p>\n<p><br></p>\n<p data-pid=\"MFdqMkaN\"><b>3.3.\t相关研究</b></p>\n<p data-pid=\"1YknG29K\">研究：</p>\n<p data-pid=\"mvWK3inp\">关于室内甲醛污染的研究已经数不胜数，这里不再赘述，但是关于气味的研究，更多是集中在调香、食品风味、纺织品、皮革工艺或者室外环境中的恶臭污染，对于室内的气味污染研究还比较少。中国林科院木材工业研究所研究员龙玲老师是这方面的先行者和重要贡献者之一，在她的专业著作中对木制品的挥发物做了比较全面系统和深入的量化研究，顺便说一下，她还是无甲醛浸渍纸工艺的发明者，使我国在这个领域领先世界。然后东北林大的刘玉、沈隽老师等在木制品挥发物和气味方面也做了大量深入的工作。</p>\n<p data-pid=\"j0Pp7AAb\">测量：</p>\n<p data-pid=\"hBCYIQi0\">对于气味的测量方面，比较传统的做法是通过嗅辩师、电子鼻以及GC-MS联用等手段来对样本空气进行分离、定性和量化。最近几年岛津公司与中国科学院生态环境研究中心合作，使用GC-MS或GC-MSMS串联等方法，对水污染中的异味成分进行了长期研究，建立了嗅味物质分析数据库和嗅味物质快速分析系统，配合Sniffer嗅辨仪及人工嗅辩来对异味物质进行分离定量。目前也在尝试应用于室内空气环境，协助家居用品相关的生产商寻找主要异味来源，以便从源头上减少异味物质的引入，改善室内环境的气味体验。</p>\n<p data-pid=\"aUY8Qcps\">标准：</p>\n<p data-pid=\"stg6dxC8\">对于污染源的气味相关标准方面，国检集团主导的“壁纸、胶粘剂、皮革和室内弹性铺地材料产品气味评价方法及分级”4项气味团体标准第二次工作会议暨气味评价技术研讨会即将在本月召开，到时候有空的话我也会参会。以后对于建材气味相关的标准体系应该会越来越完善的。</p>\n<p><br></p>\n<p data-pid=\"BijudO1l\"><b>4.\t最终结论</b></p>\n<p data-pid=\"0y-7i737\"><b>4.1.\t关系综述</b></p>\n<p data-pid=\"9bER2idQ\">甲醛本身虽然没有特征性的异味，但是具有强烈的刺激性气味，甲醛和室内其他各种挥发性有机化合物组合会产生非常复杂的协同效果，使整体的气味表现发生各种变化，总的说来，甲醛或者苯系物或着TVOC某一项的浓度并不能完全决定整体的气味表现，同时，不同的人对气味感知的敏感度也都是不一样的，因此气味强烈并不意味着甲醛一定超标严重，而气味不大也并不等于环境安全，判断室内环境的安全程度还是需要结合正规的测试得到的各项数据指标来综合评估。但是，在很多情况下，甲醛浓度确实和整体气味表现有着一定的相关性，因为<b>往往劣质建材会同时表现出甲醛以及其他VOC的高释放特性</b>。对此我国住房城乡建设部于2013年开始立项了一个重要课题叫“中国室内环境概况调查与研究”，课题组持续数年调查了15个城市的一类建筑共1360个房间，在甲醛浓度和环境气味方面得出以下结论，供大家参考一下：</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-9c2a1fd350e67447cdce7a55d70d0bc2_720w.jpg?source=b1748391?rss\" data-caption=\"“中国室内环境概况调查与研究”课题组对气味与甲醛浓度关系的调查结果\" data-size=\"normal\" data-rawwidth=\"1169\" data-rawheight=\"877\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"lX25Iy3f\">简单来说就是气味越大的情况下，甲醛超标的可能性往往是越高的。但如果环境气味并不那么明显的时候，咱们再依靠气味表现来判断甲醛浓度就不那么靠谱了。</p>\n<p><br></p>\n<p data-pid=\"iK2zS1Hc\"><b>4.2.\t应对方法</b></p>\n<p data-pid=\"sR-l6I0I\"><b>4.2.1.\t甲醛应对</b></p>\n<p data-pid=\"dP3kUlfq\"><b>对于甲醛这种顽固的长期污染物来说，应对的最好的时间是装修前。全面控制建材尤其是核心污染源人造板的质量，减少单位空间内的装载量；在装修中对存在问题的板材进行补救性处理，装修后注意通风，最好安装新风系统，以便在无法自然通风的环境中通过机械通风来强制换气，全面降低室内各种有害气体的浓度。对于部分严重的污染源，采取适当的化学处理等手段来抑制源头散发，降低污染。</b></p>\n<p data-pid=\"czmw0W-6\"><b>4.2.2.\t气味问题</b></p>\n<p data-pid=\"XlpmGiQ2\">避免引入气味污染严重的建材，入住前高温季节长期通风（抽屉、柜门等封闭小空间保持打开状态），低温季节通过持续封闭（周期12小时以内）制热结合间歇（半小时左右）通风的方式，来保持材料表面和空间内的浓度梯度差，增大甲醛之外的苯系物、VOC等重要气味来源的挥发速率，制热缩短高释放周期。如果可以的话，安装新风系统。</p>\n<p><br></p>\n<p><br></p>\n<p data-pid=\"tsaGAQlA\"><b>番外篇——无味杀手！</b></p>\n<p data-pid=\"D0Sn7XQk\">有些污染物是没有气味的，但危害十分严重，比如上面报告中最后一项测试数据：放射性氡，在我国每年造成五万多例肺癌患者，危害之大仅次于吸烟。对于氡我们需要避免或减少放射性核素含量较高的材料（以花岗岩等天然石材为主）在室内的使用，三楼以下的住户要保持一定程度的通风，减少来自地面土壤和石材的氡在室内的累积。地下室尽量不要用作卧室，要用的话，做好防氡降氡的措施。</p>\n<p data-pid=\"ZS6U84cJ\">另外，需要警惕更为恐怖的隐形杀手——一氧化碳，这也是无色无味然而极其危险的空气污染物。就在前不久，咱们成都市连夜突击检查了各家各户的燃气设备，引起广泛关注，事件的起因就是在之前一段时间连续发生了几起一氧化碳中毒导致死亡的事件。文献研究表明，一氧化碳中毒在我国冬季以及南方的回南天期间发病率最高，在中毒性疾病中位居第二，仅次于食物中毒，如果不及时发现和抢救，轻则留下缺氧性脑病等后遗症，重则危及生命，我们需要引起高度的重视。如果家里使用的是燃气或者是煤气热水器时，洗澡的时候一定要注意保持良好的通风状态，以及控制洗浴的时间；对于传统直排或烟道式燃气热水器最好更换为强排式；如果家中使用燃气或者是煤气的灶具时不要中途离开，防止锅中的水溢出来将火浇灭进而导致煤气和燃气外泄的情况；使用完灶具后一定要仔细地检查是否已经完全关闭；普通灶具最好更换为带自动熄火装置的灶具；同时要定期对家中的燃气、煤气灶、热水器减压阀和皮管、煤气管道等进行检修、维护和更换；软管无管箍的加上管箍，预留口未封堵的要立即封堵；可以的话最好在室内安装一氧化碳探测器并定期检查和维护，以便在浓度超标时及时地报警提醒。</p>\n<p><br></p>\n<p><br></p>\n<p><br></p>\n<p><br></p>\n<p><br></p>\n<p><br></p>\n<p data-pid=\"UYyCGqou\">参考文献及扩展阅读：</p>\n<p data-pid=\"VSvjBwob\">[1]GB/T 18204.2-2014《公共场所卫生检验方法 第2部分：化学污染物》</p>\n<p data-pid=\"fv_Ce7b0\">[2]GB 50325-2020《民用建筑工程室内环境污染控制标准》</p>\n<p data-pid=\"oY9MaBkr\">[3]GB/T 18883-2002《室内空气质量标准》</p>\n<p data-pid=\"oJqhNYv3\">[4]龙玲.木材及其制品挥发性有机化合物释放及评价[M].北京:科学出版社,2012.</p>\n<p data-pid=\"gdOlQ4YF\">[517]吕阳,卢振.室内空气污染传播与控制[M].北京:机械工业出版社,2014.</p>\n<p data-pid=\"wnqBXlx8\">[6]刘如,黄安民,王晨,吕斌.家具气味源分析及控制技术的研究进展[J].木材工业,2018.</p>\n<p data-pid=\"QDPhyM0k\">[7]《食品与消费品安全监管技术丛书》编委会.家具与室内装饰材料安全评价及检测技术[M].北京:化学工业出版社,2018.6</p>\n<p data-pid=\"aB4SczHy\">[8]马贺伟,罗建勋.皮革与纺织品环保指标及检测[M].北京:中国轻工业出版社,2017.</p>\n<p data-pid=\"PPegdNKB\">[9]王喜元,陈松华,梅菁,王倩雪,吴文保,等.中国室内环境概况调查与研究[M].北京:中国计划出版社,2018</p>\n<p data-pid=\"yCovxXyg\">[10]王喜元,金元,陈泽广,卓维海,朱力.中国室内氡研究[M].北京:科学出版社,2013.</p>\n<p data-pid=\"xHTwTInF\">[11]李明香;何晓东;郭兆丽;谭昕;林永茂,营口市一氧化碳中毒事件发生日气象条件分析,【J】,气象与环境学报,2007,27-30,27-30</p>\n<p data-pid=\"JCpEhSe-\">[12]洪雅洁;张毅;蒋馥阳,2013年度大连市非职业性一氧化碳中毒事件情况分析,【J】,实用预防医学,2014,74-75,74-75</p>\n<p data-pid=\"nwBIccFg\">[13]东东,冬季的隐形杀手——一氧化碳中毒,【J】,健康生活,2007,56,56</p>\n<p data-pid=\"RhR3ZXcs\">[14]国检集团会议报告：岛津检测室内空气质量及气味解决方案</p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/sunny-chan?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">SUNNY CHAN</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/520421245/answer/2385985760?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">40 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/431717296?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">房间总有刺鼻的味道是为什么？</a><br><a href=\"http://www.zhihu.com/question/510915343?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">新房装修完需要甲醛检测吗？</a><br>\n","link":"http://www.zhihu.com/question/520421245/answer/2385985760?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"武装到牙齿：Notion 优质资源汇总","date":"2022-03-13 04:25:43","description":"这些优质的插件和服务，赋予了 Notion 无尽的超能力。<a href=\"https://sspai.com/post/71893\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/71893"},{"title":"如何评价《一人之下》568（604）话？","date":"2022-03-13 01:17:09","description":"\n<h2>写在开头</h2>\n<p data-pid=\"h6JB-Dq3\">本期漫画中展现了纳森卫和翡翠学会顶尖战力间的极高水准，各种法术变化层出不穷，战术层面上也玩了一出漂亮的声东击西，看得笔者在大呼过瘾之余，也渐渐感觉到了米二正在努力构建，属于《一人之下》世界观的西方巫术体系。</p>\n<p data-pid=\"7Z9IKJq1\">这种努力值得所有中国漫画界的同仁去学习，因为一部好的架空文学作品必须建构在严谨的世界观之上。特别是在一人之下大火之后，越来越多的读者会从各种角度去解读这部作品。一部好的漫画在发展到这个阶段后，画面画风反而不再是这部作品真正的卖点，剧本本身的故事性和逻辑性才是真正能够长久吸引读者的核心。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-57f9c8bc7bf1ba539878204a0b47eca2_720w.jpg?source=b1748391?rss\" data-rawwidth=\"508\" data-rawheight=\"607\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-57f9c8bc7bf1ba539878204a0b47eca2\" data-watermark-src=\"v2-b7aece51ede4e963cd4f24940cb47bdd\" data-private-watermark-src=\"v2-720029e6f4f0e1e6662a2b9a844e9141\"></p>\n<p data-pid=\"oz8UHiaE\">好了，彩虹屁吹完，咱们开始例行的细节分析。</p>\n<h2>纳森王宫整体战况</h2>\n<h3>正面战场</h3>\n<p data-pid=\"n2FW6gs5\">此次翡翠学会突袭纳森王宫，目前出场的已经有三路人马。同样负责对抗的纳森卫已出现五人，以及临时外援李慕玄。</p>\n<p data-pid=\"eQaEHjlg\">第一路是2名法师，一名使用火系魔法，一人使用疑似毒素巫术。被<b>纳森卫古娜【符文骑士】</b>拦截，目前已全部被击杀。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-0ec68dbdb979b008ada10e68adf8743e_720w.jpg?source=b1748391?rss\" data-rawwidth=\"2032\" data-rawheight=\"417\" data-size=\"normal\" data-caption=\"对线古娜\" data-watermark=\"watermark\" data-original-src=\"v2-0ec68dbdb979b008ada10e68adf8743e\" data-watermark-src=\"v2-f935b876c7f4c346365781e6e5ebdd45\" data-private-watermark-src=\"v2-585495da8e533c74ab0578ce1d4287a3\"></p>\n<p data-pid=\"Xtg142mZ\">第二路是则共有8人，其中4人为魔法师，2名人体炼成生物，2名未知，人数虽多但普遍战力水平并不高。正面遭遇了纳森卫<b>安东尼【雷霆法师】、望月悟【日本剑士】</b>以及临时赶来的李慕玄。这一路同样全军覆没。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-bf3febdccb2691f26886df8fbca418cc_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1237\" data-rawheight=\"1450\" data-size=\"normal\" data-caption=\"杂兵线\" data-watermark=\"watermark\" data-original-src=\"v2-bf3febdccb2691f26886df8fbca418cc\" data-watermark-src=\"v2-53c6bdc8873a7d492460c6aae36290ab\" data-private-watermark-src=\"v2-f591498188eaf3597bbfabdc2120bb78\"></p>\n<p data-pid=\"5WBenB3Q\">第三路的人数暂时未知，目前仅出现一人。但这名魔法师的实力极其强悍，独对纳森卫<b>加西亚【炼金术士】和阿方索【光系法师】</b>不落下风，在其他纳森卫赶到现场进行围攻时，仍然可以安然逃脱。目前，此人是进一步深入圣林还是逃离现场暂不可知。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-9cae60e7617c417a8231056bcdb14b9d_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1187\" data-rawheight=\"933\" data-size=\"normal\" data-caption=\"以一敌四\" data-watermark=\"watermark\" data-original-src=\"v2-9cae60e7617c417a8231056bcdb14b9d\" data-watermark-src=\"v2-6d41372e12e95c4bca6ed47931d14485\" data-private-watermark-src=\"v2-2ba32141efe26dcd41135c8cd09bdd0b\"></p>\n<h3>大本营：纳森王和近卫以利亚</h3>\n<p data-pid=\"3syVwQST\">目前已知，<b>纳森卫以利亚【近战射手】</b>是陪伴在纳森王身边的近卫力量，并没有直接参与战斗。从发现有人偷入王城开始，以利亚全程陪同纳森王从王宫传送至纳森圣林，按照战场布局，他的职责应该是守护在纳森王身边，是守护纳森王和树最后的防线。</p>\n<p><img src=\"https://pica.zhimg.com/v2-10a7705f320764e2f4cb037abc2eadca_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1880\" data-rawheight=\"329\" data-size=\"normal\" data-caption=\"近卫：以利亚\" data-watermark=\"watermark\" data-original-src=\"v2-10a7705f320764e2f4cb037abc2eadca\" data-watermark-src=\"v2-18f97723e20cb52e8441ca06c4f2a67e\" data-private-watermark-src=\"v2-5f4085a3bee44e71d9ec5f03badfcaee\"></p>\n<p data-pid=\"STF9OIKm\">参考以利亚之前在二十四节谷的表现，他擅长使用炼金枪械和近身搏击，作为最后防线确实相对其他人更合适，特别是纳森王本身还是个战五渣的情况下。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-90216c690f2789ee1385f55bff165797_720w.jpg?source=b1748391?rss\" data-rawwidth=\"2049\" data-rawheight=\"355\" data-size=\"normal\" data-caption=\"近战射手和弱鸡王\" data-watermark=\"watermark\" data-original-src=\"v2-90216c690f2789ee1385f55bff165797\" data-watermark-src=\"v2-d12cd48109ded5fc407f0548267ec9d7\" data-private-watermark-src=\"v2-ae9ee2ce5c011cc3c5fc27ee81e2cb41\"></p>\n<h3>王城后备力量</h3>\n<p><img src=\"https://pic3.zhimg.com/v2-53bc8c68a8e6ae606e4bd1439f8e30f5_720w.jpg?source=b1748391?rss\" data-rawwidth=\"709\" data-rawheight=\"312\" data-size=\"normal\" data-caption=\"后备力量\" data-watermark=\"watermark\" data-original-src=\"v2-53bc8c68a8e6ae606e4bd1439f8e30f5\" data-watermark-src=\"v2-42355365126c075c24709916bbe5ecda\" data-private-watermark-src=\"v2-b579441cafeb5fd519a0613755e98c37\"></p>\n<p data-pid=\"gmLlFMXq\">这三名未出手的纳森卫应该不会直接参与这场阻击战，毕竟目前贝希摩斯和其他异人组织尚未出手，保留必要的后备力量是守护纳森岛的必要选择。</p>\n<p data-pid=\"knmhRhZE\">关于这三人的能力，目前明确知晓的仅有<b>伊莲娜，</b>米二在直播时曾透露其能力类似于<b>圣娼</b>。</p>\n<h3>圣娼</h3>\n<p data-pid=\"C6odsPf6\"><b>圣娼，亦被称为神娼</b>（Holy Prostitution），是指奉侍神的（不一定是女子，但多为女子）神职人员，在神庙与朝圣者发生性关系，取夜合钱奉神。如帕台农神庙的女神职人员就是如此，而早期罗马贵妇终身还必须有一次到神庙“为神奉献”。<span class=\"nolink\">死海古卷</span>是与圣经同时代的犹太文献，其中也记载了类似的风俗。</p>\n<blockquote data-pid=\"aPecfAMP\">巴比伦人有一个最丑恶可耻的习惯，这就是生在那里的每一个妇女在她一生之中必须有一次到阿普洛迪特的神殿的圣域内去坐在那里，并在那里和一个不相识的男子交媾。······这里总是有大群来来往往的妇女。在妇女中间，四面八方都有用绳子拦出来的通路，而不相识的人们便沿着这条道路行走来选择一位女子。选好位子的女性在一个不相识的人把硬币抛向她膝头并和她在神殿外交媾前，是不能离开自己的位置的。但是当男子抛钱的时候，他要说这样的话：“我以米利塔女神（<b>米利塔是亚述人对阿佛洛狄忒女神的称呼，阿佛洛狄忒即希腊神话的性欲之神</b>）的名字来为你祝福，”银币的大小多少并无关系。神殿里的女子是不能拒绝这件事的，否则便违犯了神的律条，因为一用旦这样的方式抛出去的钱币是神圣的了。当她和他交媾完毕，在神面前完成了自己的使命，她便可以回家去了。从这时开始，不论你再出多少钱，便再也不能得到她了。因此，那些颀长的美貌姑娘通常很快就可以回家，而那些相貌丑陋的女子就要等很长时间才能完成神圣的使命。有些女子不得不在神殿的圣域内等上三四年。——希罗多德《<span class=\"nolink\">历史</span>Ἱστορίαι》</blockquote>\n<p data-pid=\"-85QH6Lu\">根据德国民俗学教授汉斯·巴尔的观点，在古代宗教朝圣者们看来，在性交时，神职人员就成了神的化身，与她们交合，可以<b>使神感到愉悦</b>，这同样也是对神的崇敬。在这种环境中，性行为已经不是交合本身的意义了，它表达的是<b>人与神的配合</b>。是一种极其神圣的行为。</p>\n<p data-pid=\"aW6sjdKn\">而犹太教这种独特的宗教现象必然影响了后世基督教的教义。而基督教为了得到罗马帝国的承认和保护，也大量采用了<span class=\"nolink\">罗马宗教</span>的某些仪式，以至于后来天主教的修女还要发<b>“三绝”大愿</b>。</p>\n<p data-pid=\"uhu03iHu\"><b>所谓“三绝大愿”</b>，其中的“绝色”(不嫁)，并不是说修女不发生婚配，她们是不发生世俗婚配，因为<b>她们都是基督的新娘</b>。这里，可以非常清晰地看到“神娼”的遗迹。而她们如果发生世俗性行为，就意味着对基督的背叛。这与早期宗教的女神职人员不能在神庙外与人发生性关系是同一条精神脉络。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-e83934c58a48ebe8cf1f33080558245b_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1200\" data-rawheight=\"800\" data-size=\"normal\" data-caption=\"修女：基督的新娘\" data-watermark=\"watermark\" data-original-src=\"v2-e83934c58a48ebe8cf1f33080558245b\" data-watermark-src=\"v2-bfc1e4b299cf02b009b7713ceb0f139a\" data-private-watermark-src=\"v2-9a0dac5fad969d18763662d2351e86af\"></p>\n<p data-pid=\"lyFgnlEX\">圣娼的这种能力其实与全性夏柳青的<b>巫优</b>流派异曲同工，区别在于巫优是通过“演”，而圣娼是通过“献身”。这些流派都是通过某种手段获取人类对神明偶像的信念之力，进而利用这种流露出的精神力，极有可能会赋予圣娼模拟神明的能力。</p>\n<p data-pid=\"RV4msR7s\">至于伊莲娜可以请到的能力和对象恐怕就可以脑洞大开了，神树？现任纳森王？历代纳森先王？甚至罗马诸神？</p>\n<p><img src=\"https://pic1.zhimg.com/v2-c806cf1d79da474aac13a66239cfde7c_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1507\" data-rawheight=\"553\" data-size=\"normal\" data-caption=\"中国的巫优\" data-watermark=\"watermark\" data-original-src=\"v2-c806cf1d79da474aac13a66239cfde7c\" data-watermark-src=\"v2-9b63dff83cb13bb50d74561d07cb6848\" data-private-watermark-src=\"v2-34f193333574db0842494fe1b9e2d3dc\"></p>\n<h2>战局外的变数</h2>\n<p data-pid=\"kFU8V76c\">目前整个纳森王宫的注意力都被翡翠学会的突袭所牵制，虽然仍然有三名纳森卫，作为后备力量潜伏未发，但对于危机四伏的纳森岛而言，这份防御力量过于薄弱了。事实上，有可能对纳森王及纳森神树造成致命威胁的势力又岂止区区一个翡翠学会呢？</p>\n<h3><b>1、贝希摩斯。</b></h3>\n<p data-pid=\"tkt64EEh\">贝希摩斯的大部队是要在天亮后发动登陆作战，而此刻整个王宫都陷入了内部混乱，纳森一方的高端战力均集中在纳森王宫，岛屿海滩各个登陆点的守卫力量，都陷入了高端战力真空的窘境，贝希摩斯的登陆难度直接降低为零。从防御作战的角度上说，这是典型的未战先败，放弃滩头阻击的大好战机，给了贝希摩斯好整以暇登陆修整的机会，纳森一方再想把外部势力清除出纳森岛几乎不再可能。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-53878b53625eb098dc5aa27aff9d5468_720w.jpg?source=b1748391?rss\" data-rawwidth=\"924\" data-rawheight=\"460\" data-size=\"normal\" data-caption=\"登陆阶段的防御是最薄弱的\" data-watermark=\"watermark\" data-original-src=\"v2-53878b53625eb098dc5aa27aff9d5468\" data-watermark-src=\"v2-13e01094b7d9598b9db39c42afbea258\" data-private-watermark-src=\"v2-d90209f08e5d2af124842f7cd2c2c149\"></p>\n<h3><b>2、来历不明的各路人马。</b></h3>\n<p data-pid=\"pXf9D5Dw\">漫画556话中张楚岚提到过除了贝希摩斯的人马外，岛上还多出了非常多的神头鬼脑来历不明的人士。</p>\n<p data-pid=\"_kgEao8W\">笔者之前曾依据他们登陆点的环境细节，分析过他们可能的出身来历及目的。其中对纳森王及神树威胁最大的，就是其中来意不明、怀有其他目的的非官方组织。而他们的登陆并没有提前告知纳森官方，集市也仅仅收集到他们登陆的情况，而对他们的身份一无所知。</p>\n<p data-pid=\"rW1cIBlO\">这批人，虽然他们可能并非针对纳森王位更替，而是针对岛上的某人某物而来，或寻仇，或寻宝，或寻人，均有可能。</p>\n<p data-pid=\"RPXIAYPj\"><b>但当王位更迭或者神树被毁之类的剧变发生，他们趁火打劫、背后补刀的可能性依然存在。</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-de0cfc0eb01999fc28e5408395f5d7fb_720w.jpg?source=b1748391?rss\" data-rawwidth=\"720\" data-rawheight=\"359\" data-size=\"normal\" data-caption=\"两批登陆者的登录地点比较\" data-watermark=\"watermark\" data-original-src=\"v2-de0cfc0eb01999fc28e5408395f5d7fb\" data-watermark-src=\"v2-33d499e0add59209c0a0938a1604fc42\" data-private-watermark-src=\"v2-0d5c32c79fcca664b3f201bfdff9ecd7\" data-tags=\"porn\"></p>\n<h3><b>3、被困纳森的曜星社新上根器。</b></h3>\n<p data-pid=\"x1F5-7uX\">以王国平、陶山公为首的新上根器小队虽然已经完成了曲彤交付的任务——捕获阮丰，但由于纳森岛目前只进不出的现状，他们显然也并没有能够离开纳森。而现在这批人马的活动区域成谜，他们的强大战力也足以构成纳森岛上一股极其危险的势力。</p>\n<p data-pid=\"HpGUnwcv\">曲彤是否有交代他们其他任务，笔者目前暂不得而知，但考虑到他们这股势力一贯的作风，在漫画未来的剧情发展中，他们在关键时刻突然出现，阴一把纳森，毁掉神树或者夺走神树，也并非情理之外。</p>\n<p data-pid=\"5y2phfkm\">毕竟曲彤一直致力于收集甲申之乱的关键人物、事物，所追求终极目标也极有可能是得到甲申之乱的根源——<b>类似天师度的“神物”传承</b>。</p>\n<p data-pid=\"LJPeMhfu\">那么作为同级别的纳森神树成为他们的新目标，也就完全说得通了。</p>\n<p><img src=\"https://pica.zhimg.com/v2-82051b54d07c54984997a86e442b26bc_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1710\" data-rawheight=\"387\" data-size=\"normal\" data-caption=\"新上根器小队\" data-watermark=\"watermark\" data-original-src=\"v2-82051b54d07c54984997a86e442b26bc\" data-watermark-src=\"v2-9373ea2597e61e5ef7329a862d8757ca\" data-private-watermark-src=\"v2-bae16a2dae92feaa70d4bb9b1c15adbd\"></p>\n<h3><b>4、“折金枝”之人（或者势力）。</b></h3>\n<p data-pid=\"mjQY5k9y\">剧情发展到现在，当初那个能够躲过纳森王监控，纳森九卫守护，闯入圣林并折断金枝的人，估计已经有不少读者都已经快记不得了。确实从去年纳森岛篇开篇，时隔快一年了，这位神秘人至今没有再度出现在任何人的口中。</p>\n<p data-pid=\"3KuhX34r\">但是作为数百年来头一位，能够折断金枝之人，他（她）的战力之高，恐怕已经不是目前区区四位纳森卫（以利亚及后备的三位纳森卫）所能够对抗的了。这位会在何时动手，恐怕将是未来最大的悬念了。</p>\n<p><img src=\"https://pica.zhimg.com/v2-0805bbde476b993cf0b5375b960e4a4d_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1505\" data-rawheight=\"548\" data-size=\"normal\" data-caption=\"几百年都没发生过的折金枝事件\" data-watermark=\"watermark\" data-original-src=\"v2-0805bbde476b993cf0b5375b960e4a4d\" data-watermark-src=\"v2-799781433eda560ff71014434d670675\" data-private-watermark-src=\"v2-4437329dc5b25e3d237eae270d4bcac2\" data-tags=\"porn\"></p>\n<h2>本期漫画中出现的新能力</h2>\n<p data-pid=\"BhLkIo5g\">看完整体战局，回到眼下的王宫大战，加西亚的人体炼成、阿方索的光系法术、面具法师的法术是本期的三大看点。笔者依据已有信息，逐一解析。</p>\n<h3>加西亚的人体炼成</h3>\n<p data-pid=\"QrpS_KFl\">人体炼成这一概念原本出自日本动漫《<span class=\"nolink\">钢之炼金术师</span>》(Fullmetal Alchemist)中用于人类复活的一类炼金术。但是在现实中，中世纪的炼金术确实有过追求人体炼成（或者应该被称为复活石）的相关案例。</p>\n<blockquote data-pid=\"HFQq2Pm7\">人体炼成的成本：常人的身体元素比例如下:65%氧，18%碳，10%氢，3%氮，1.5%钙，1%磷，0.35%钾，0.25%硫，0.15%铀，0.15%氯，0.05%镁，0.0004%铁，0.00004%碘,以及微量的氟、硅、锰、锌、铜、铝和砷。</blockquote>\n<p><img src=\"https://pic3.zhimg.com/v2-664c54f0bdc11dacf70f58d853af9bd7_720w.jpg?source=b1748391?rss\" data-rawwidth=\"518\" data-rawheight=\"496\" data-size=\"normal\" data-caption=\"人体炼成阵\" data-watermark=\"watermark\" data-original-src=\"v2-664c54f0bdc11dacf70f58d853af9bd7\" data-watermark-src=\"v2-cf9866c6b2cfa2399da7eeec9c71c4ba\" data-private-watermark-src=\"v2-d33a64304a25742a357b53d453db8bec\"></p>\n<p data-pid=\"vqjEmWG7\">中世纪的炼金术士相信，“炼金术”的精馏和提纯贱金属，是一道经由死亡、复活而完善的过程，象征了从事炼金的人的灵魂由死亡、复活而完善，炼金术能使他获得享福的生活、高超的智慧、高尚的道德，改变他的精神面貌，最终达到与造物主沟通。</p>\n<p data-pid=\"zGSygfqn\"><b>尼古拉·弗拉梅尔</b>（法语：Nicolas Flamel，1330年－1418年3月22日），<span class=\"nolink\">法国瓦卢瓦王朝炼金术</span>士，对炼金术界的传奇物质“<span class=\"nolink\">贤者之石</span>”的研究使他闻名于世，因此，他也被视为欧洲<span class=\"nolink\">炼金术</span>的始祖。</p>\n<blockquote data-pid=\"QTRHizSX\">1417年3月，87岁的尼古拉去世。他生前的住所和捐建的墓室里刻满了奇怪的符号和难解的浮雕，引得各地炼金术士们挖地三尺寻找魔法石的秘密，盗墓者终于掘开了尼古拉夫妇的棺材，就像传奇故事应有的情节，棺材里一无所有。<br>1719年，保罗的书《土耳其之旅》在巴黎出版。其中一段他碰见一个奇怪的土耳其人，他对保罗说：“你真的相信他已经死了吗？不，我的朋友，尼古拉·弗拉梅尔还活着。无论是他还是他的妻子，都还不曾尝到死亡的滋味。”<br>1761年，据说塞缪在巴黎歌剧院的拱门下看到了尼古拉夫妇。<br>1929年，在巴黎，路易·保威尔讲道一个酷似尼古拉的老人。</blockquote>\n<p><img src=\"https://pic2.zhimg.com/v2-58ab2b3861010d868fe87b47ab933a64_720w.jpg?source=b1748391?rss\" data-rawwidth=\"536\" data-rawheight=\"415\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-58ab2b3861010d868fe87b47ab933a64\" data-watermark-src=\"v2-d7796533b7f9f3dfb2f45f38643d06c8\" data-private-watermark-src=\"v2-50095e5f5b45081d8b03e2eca6ce8992\"></p>\n<p data-pid=\"qOU3RIJf\">而《一人之下》中目前出现的三为人体炼成则风格各异：  </p>\n<p><img src=\"https://pic2.zhimg.com/v2-eb0271680eebb6e94cb336964e94593d_720w.jpg?source=b1748391?rss\" data-rawwidth=\"2093\" data-rawheight=\"2055\" data-size=\"normal\" data-caption=\"人体炼金的不同流派\" data-watermark=\"watermark\" data-original-src=\"v2-eb0271680eebb6e94cb336964e94593d\" data-watermark-src=\"v2-2e85cb014d8aefb0801eafff0f483674\" data-private-watermark-src=\"v2-e146be21872ecd472148babbfc446484\"></p>\n<p data-pid=\"F_Xjjqlv\">而加西亚的人体合金攻击方式与火影中三代风影的铁矿砂界法非常相似。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-7ba1d657ac14892d10383ed38ecef106_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1240\" data-rawheight=\"953\" data-size=\"normal\" data-caption=\"三代风影的大招\" data-watermark=\"watermark\" data-original-src=\"v2-7ba1d657ac14892d10383ed38ecef106\" data-watermark-src=\"v2-9d979f188bf6c9f78262fda7f2197e46\" data-private-watermark-src=\"v2-88db88ee06e0dd948e6e9a381069ab7f\"></p>\n<h3>阿方索的光系法术</h3>\n<p data-pid=\"vf4RvnqM\">阿方索的光系法术目前已经出场多次，每一次都让笔者误以为是在看《魔兽世界》圣骑士释放圣光法术，但是圣光能力本身确实是欧洲中世纪非常重要的宗教法术之一，甚至其源头的光照崇拜在整个欧洲中世纪都具有<b>神正论</b>上的重大意义，历来都是用于各类驱邪场合的。</p>\n<p><img src=\"https://pica.zhimg.com/v2-15a3ad41a8fe824a81c6bcf7fc0a5844_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1701\" data-rawheight=\"1101\" data-size=\"normal\" data-caption=\"阿方索的光系法术\" data-watermark=\"watermark\" data-original-src=\"v2-15a3ad41a8fe824a81c6bcf7fc0a5844\" data-watermark-src=\"v2-24111bbc3b765f6a2f7fcf0c6e778cb9\" data-private-watermark-src=\"v2-7198b59cf9d542ebacb70d1ec05d03e7\" data-tags=\"porn\"></p>\n<p data-pid=\"P-2wEf_F\">按照伦敦大主教格罗塞泰斯特（Robert Grosseteste，约1170年—1253年）《创世六日》中影响深远的基督论所言，“圣子-言-光”是创造这个世界的三位一体的原力之一。</p>\n<p data-pid=\"eDAp3m1F\">15世纪N镇神秘剧(N town pIay)《基督诞生》<sup data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"1\" data-text=\"The N-Town Plays: Introduction\" data-url=\"https://d.lib.rochester.edu/teams/text/sugano-n-town-plays-introduction\">[1]</sup>中，迟到的产婆不敢进入马厩，因为畏惧其中“比日月更璀璨的光芒”。</p>\n<p data-pid=\"Asrvnf4A\">14世纪护教作家约翰·默克的《节日布道集》中记载：“以得撒国王派画匠去为耶稣画像，然而圣容太过耀眼以至于画匠无法睁开双眼，只好用一块布盖住耶稣的脸，布上奇迹般地拓下了圣容;在圣烛节被祝福过的蜡烛不得用于非宗教场合，除非先将它们融化。教堂彩窗玻璃，手抄本上的金箔，书龛、圣物龛或十字架上的装饰宝石，神秘剧中闪亮的面具……众多物件因其反射或折射光的特质而具有神圣性，随之发展出一种光的拜物教”。</p>\n<p data-pid=\"dbizAaDL\">这种拜物教深深植根于《启示录》中对金碧辉煌的新耶路撒冷的描绘：纯金铺地，光盖日月，十二种宝石构成十二道璀璨的墙基，而基督羔羊本身就是至高的光源。</p>\n<h2>面具法师的法术</h2>\n<p data-pid=\"S2oRP28X\">这位带着红色金纹面具的翡翠学会巫师显然是本话中的重头戏，但是其能力源头和细节笔者暂时不敢妄做定论，只针对已经出现的几个能力特点稍作汇总，坐等下期米二如何解释：</p>\n<h3>1、可以灵体化的身躯</h3>\n<p data-pid=\"FGRKFGyO\">在单独对抗加西亚时，面具法师的身躯一度保持类似“恶灵状态”躲避加西亚合金的攻击。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-7c934d35bd9986d6b53cabca33dc665e_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1745\" data-rawheight=\"503\" data-size=\"normal\" data-caption=\"灵体化身躯\" data-watermark=\"watermark\" data-original-src=\"v2-7c934d35bd9986d6b53cabca33dc665e\" data-watermark-src=\"v2-66f8c7f4197d0a679859c454e3a20a1c\" data-private-watermark-src=\"v2-a59eadc7b5bd3ed0dc98e55663c43923\"></p>\n<h3>2、吞噬空间的法术</h3>\n<p data-pid=\"5YSJmq5w\">面具法师反击时魔杖使出的球状法术，具有吞噬空间的能力，强悍如加西亚的合金（望月悟都不一定能砍动的合金）也会被轻易斩断，杀伤力惊人，加西亚直接躲避。</p>\n<p><img src=\"https://pica.zhimg.com/v2-6d695ce816ba6eea628fdb87d8a916ba_720w.jpg?source=b1748391?rss\" data-rawwidth=\"2153\" data-rawheight=\"883\" data-size=\"normal\" data-caption=\"吞噬空间\" data-watermark=\"watermark\" data-original-src=\"v2-6d695ce816ba6eea628fdb87d8a916ba\" data-watermark-src=\"v2-c1f5e41877843da9c84ca4f9c8a4d2e4\" data-private-watermark-src=\"v2-e741e7000d779b92f3c330ad2e848ece\"></p>\n<h3>3、影遁类法术</h3>\n<p data-pid=\"pLzeusJX\">面具法师可以制造大片阴影，将身躯隐藏其中，并通过其他媒介传送身躯。因为颜色和吞噬空间的法术及其相似，差点骗过加西亚，幸亏被阿方索及时识破。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-85239153852f8a4f1064a0fd14a7d56a_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1897\" data-rawheight=\"467\" data-size=\"normal\" data-caption=\"影遁类法术\" data-watermark=\"watermark\" data-original-src=\"v2-85239153852f8a4f1064a0fd14a7d56a\" data-watermark-src=\"v2-70dfad0a1f497fdb999fc50a93dc84f2\" data-private-watermark-src=\"v2-1d702d2c2f42893f6e241a9991bf4dc4\"></p>\n<p data-pid=\"GdjZsO40\">其实仔细观察影遁类法术和空间类法术在施法过程中确实存在细微差别。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-03a5524033cebb3a3b1f1561005c84de_720w.jpg?source=b1748391?rss\" data-rawwidth=\"822\" data-rawheight=\"342\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-03a5524033cebb3a3b1f1561005c84de\" data-watermark-src=\"v2-5041273a3c8655b005e80b24a6a1ef5c\" data-private-watermark-src=\"v2-e73211de8645b0fe31b5765a7df38e31\"></p>\n<h3>4、护盾和火系法术</h3>\n<p data-pid=\"jPX5lmkm\">面具法师内心独白是护盾被击破而非法器被击破，说明在他看来，他的护身能力是属于法术而非法器。而护盾也可以理解为法术护盾，西方炼金一脉并非像东方练炁士普遍有强大的肉体能力，而法术护盾则是他们面对近战时必备的护身法术。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-44f9031541a25497e8bc772aec065149_720w.jpg?source=b1748391?rss\" data-rawwidth=\"786\" data-rawheight=\"576\" data-size=\"normal\" data-caption=\"逃遁时下半身同时元素化也是保命技能\" data-watermark=\"watermark\" data-original-src=\"v2-44f9031541a25497e8bc772aec065149\" data-watermark-src=\"v2-ffa7c1dd730e49ca7fa3f423a3450009\" data-private-watermark-src=\"v2-d526254a67a62a126f62b6590f228aae\"></p>\n<p data-pid=\"q4fRl1KI\">面具法师的火系法术不论是从威力上还是范围上，都比之前出场过的其他人要大得多。考虑到这位的王牌设定，有此威力也不奇怪。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-48ba9145496e303fb736ac8058cd4c59_720w.jpg?source=b1748391?rss\" data-rawwidth=\"761\" data-rawheight=\"830\" data-size=\"normal\" data-caption=\"超超超级大火球\" data-watermark=\"watermark\" data-original-src=\"v2-48ba9145496e303fb736ac8058cd4c59\" data-watermark-src=\"v2-d6cd837cc62d5a22f410fd8cd0c35763\" data-private-watermark-src=\"v2-587831b4d62916fca5181a0eac577d27\"></p>\n<h3>5、疑似多重人格或身躯</h3>\n<p data-pid=\"rPW92rGI\">一般来说，同时具有如此多种类且威力强劲的能力，这种级别的异人哪怕带上面具也太容易被人识破身份。毕竟这些纳森卫哪个都不是泛泛之辈，此人1V4还能打得如此有来有回，即便是放在翡翠学会也绝对是大佬级人物。但是现场没有任何人叫破他的身份，这一点确实诡异。</p>\n<p data-pid=\"oJuHgJW3\">而他在切换不同能力时，眼睛颜色的切换，皮肤的变化，都在向读者透露，此人恐怕并非明面上的那些大佬，而是某种具有多重人格（每个人格使用不同法术）或者多重身躯（原理同前）的特殊法师。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-6d434745974c48234c1b9f1a77440b97_720w.jpg?source=b1748391?rss\" data-rawwidth=\"670\" data-rawheight=\"231\" data-size=\"normal\" data-caption=\"眼球颜色的变化和皮肤的变化\" data-watermark=\"watermark\" data-original-src=\"v2-6d434745974c48234c1b9f1a77440b97\" data-watermark-src=\"v2-7fa5cab04bebcf694c4f107aa80fb40e\" data-private-watermark-src=\"v2-9464cec01559ca2ac75a2a6ee136eba2\"></p>\n<p data-pid=\"9TQXGpXA\">而这种能力的原型，笔者建议可以参考漫威电影的著名人物大群。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-98c20fc3b4d9beece9cca79f77f8feba_720w.jpg?source=b1748391?rss\" data-rawwidth=\"500\" data-rawheight=\"750\" data-size=\"normal\" data-caption=\"大群\" data-watermark=\"watermark\" data-original-src=\"v2-98c20fc3b4d9beece9cca79f77f8feba\" data-watermark-src=\"v2-13ef3034dd08ad4b513c2ce20326690a\" data-private-watermark-src=\"v2-aa1e49787407aa03c001f811344526ac\"></p>\n<p data-pid=\"tb2zTvfM\">加更完毕，欢迎评论区讨论。</p>\n<hr>\n<p><img src=\"https://pic1.zhimg.com/v2-f83441c775122c358f7a260f9d4a762d_720w.jpg?source=b1748391?rss\" data-rawwidth=\"553\" data-rawheight=\"856\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-f83441c775122c358f7a260f9d4a762d\" data-watermark-src=\"v2-e11fccc15ea1541863577a8d178ea522\" data-private-watermark-src=\"v2-24fb535dad9acf52acd71253c6e2ebf3\"></p>\n<p data-pid=\"ISB_5E7w\">考证不易，跪求点赞！！！关注！！！评论！！！谢谢！！！</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/he-xie-27-64?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">婺江墨客</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/521226875/answer/2384218547?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">22 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/439469100?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么一人之下最近每一话都上热搜?</a><br><a href=\"http://www.zhihu.com/question/480624238?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">一人之下，不摇碧莲的前五会是谁？</a><br>\n","link":"http://www.zhihu.com/question/521226875/answer/2384218547?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"城市漫步指南：绍兴，不妨住上几日","date":"2022-03-12 06:17:17","description":"一直以来，去一个陌生的城市，去探索土著习以为常的风景与味道，是我最惬意、也是最享受的时光。但我也会思考，我的家乡是一个值得探索的城市吗？从未来过绍兴的你，请花上10分钟，跟着我的回忆，看看这个处于现代 ...<a href=\"https://sspai.com/post/70958\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/70958"},{"title":"NEDC、WLTP、EPA 三种续航工况计算方式有什么区别？哪个对消费者更具参考价值？","date":"2022-03-11 03:40:34","description":"\n<p data-pid=\"4X8JG8Ji\">理论最大续航、NEDC续航、WLTP续航、EPA续航、CLTC续航、JC08续航，我这里做个简单的区分。先上结论，同一款车不同工况测试出的续航，从高到低如下：</p>\n<p data-pid=\"Sbt88FxC\">理论最大续航＞JC08＞CLTC＞NEDC＞WLTP＞EPA≥真实续航</p>\n<p data-pid=\"I36pPZfE\">排名越靠后，越接近真实续航。</p>\n<h2>\n<b>理论最大</b>续航</h2>\n<p data-pid=\"JOPbSm8K\">这里指的是电动车在最理想的条件下跑出的里程，一般是从头到尾定速60km/h，关闭空调等用电器材，环境温度18~28℃，这个数字是最不靠谱的，用它推测实际续航里程没什么意义。</p>\n<p data-pid=\"3aHfiKUM\">2018年左右，宣传最大理论续航的车企不少，当时为了数字好看用这个做海报，动辄续航上600公里，后来有媒体人发起呼吁不要用这个数字误导消费者，一番舆论发酵后，厂商们逐渐不再使用该数字。</p>\n<h2><b>NEDC续航（欧洲、澳大利亚、中国）</b></h2>\n<p data-pid=\"CpNSQEv_\">NEDC是一种工况跑法，就是在固定条件下测试出来的成绩，由市区和市郊两部分组成，具体操作方式如下：</p>\n<p><img src=\"https://pic2.zhimg.com/v2-2197904ded5398876188f76fcd83e76c_720w.jpg?source=b1748391?rss\" data-caption=\"NEDC循环测试跑法\" data-size=\"normal\" data-rawwidth=\"827\" data-rawheight=\"487\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"qrHjT3s7\">市区部分模拟反复加速减速遇到红绿灯，从图表能看出是四次小循环的复制粘贴；而市郊部分则是模拟通畅道路，最高车速达到了120km/h，但维持时间极短。NEDC测试不开空调，总测试时长1180秒，也就是20分钟。</p>\n<h2><b>EPA（隶属美标）</b></h2>\n<p data-pid=\"0vvBDlv8\">EPA续航测试由3个部分组成，分别是FTP75工况、SC03工况和US06工况。下表是FTP75工况跑法：</p>\n<p><img src=\"https://pic3.zhimg.com/v2-88cb19581db110c21bc1637361eef822_720w.jpg?source=b1748391?rss\" data-caption=\"FTP75循环测试跑法\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"244\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"eH2K_T8_\">从图表就能看出，FTP75要比NEDC的跑法更复杂、车速更多变，测试时间更久。此外，EPA里面还有SC03和US06两个工况测试，分别对应高温空调全负荷以及高速/急加速，3个测试结果通过加权的方式计算出最终的油耗/续航里程，而且EPA测试中有的项目是要开空调的。业界基本认同现在美标的跑法比NEDC更接近实际用车情况，也更接近国内道路环境。</p>\n<h2>WLTP（日美欧共同制定）</h2>\n<p data-pid=\"0D_T5_Z4\">国内也有WLTC的说法，可以粗略认为WLTP和WLTC是一回事。</p>\n<p><img src=\"https://pica.zhimg.com/v2-8a511a676e21e8f0d0599328ee340cd8_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"566\" data-watermark=\"original\" data-original-src=\"v2-8a511a676e21e8f0d0599328ee340cd8\" data-watermark-src=\"v2-2ab27293c9bc541fe49e54f1f5cc6eab\" data-private-watermark-src=\"v2-042a20719c3261db74d2a23ee1144923\"></p>\n<p data-pid=\"nqgRh0_R\">WLTP的初衷是为了更好地模拟日常驾驶，所以从工况图中可以看出要比NEDC更加复杂，且高速续航、加减速更频繁。一些电动车比如我的小鹏P7，菜单设置中可以切换剩余续航显示方式，从NEDC切换到WLTP后，满电续航会从670公里下降到576公里。</p>\n<h2>CLTC（中国）</h2>\n<p data-pid=\"z57XGCw9\">从去年下半年开始，新上市的车型逐渐从NEDC切换到CLTC，这是我国根据自身情况制定的测试方法。所以将来大家看到某款车改款后电池、车身参数均没变，但续航变了，那就是切换到CLTC的缘故。</p>\n<p data-pid=\"c5O5eHrT\">但事实上，CLTC测试出的续航成绩比NEDC要高，也就是偏离实际续航更远，偏离幅度大概在↑2~5%。换句话说，某款车如果NEDC续航是600公里，切换到CLTC后，其标称续航可能会达到610~620公里。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-04425a0d27508713d18ae3746e8e936b_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"588\" data-rawheight=\"295\" data-watermark=\"original\" data-original-src=\"v2-04425a0d27508713d18ae3746e8e936b\" data-watermark-src=\"v2-8ad815f794e2f72b8fe29a4e756e7213\" data-private-watermark-src=\"v2-eed1d455e9c1b420f03d02302ac42c3b\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-4dde2734cca8729e3318580c4615a061_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"668\" data-rawheight=\"413\" data-watermark=\"original\" data-original-src=\"v2-4dde2734cca8729e3318580c4615a061\" data-watermark-src=\"v2-aa5b2ff3bc33e7e82730e4ea4f2d40f7\" data-private-watermark-src=\"v2-326e1ec81dd0d5893349152dc795cd11\"></p>\n<p data-pid=\"bT-58KHV\">这两张图分别对比了NEDC、WLTP和CLTC的工况差异。可以看出，CLTC停车等待的时间更久，测试里程更短，最高车速更低，平均车速更低，平均功率也更低，这些因素对于电动车来说都是利好的，因此测出来的数据更好看，也就不足为奇了。</p>\n<h2><b>JC08（日本）</b></h2>\n<p data-pid=\"7W9vEQKi\">JC08是最水的测试，成绩比其他工况法都要好，当然JC08是日本自己弄出来自己用的，对于别国道路情况人家也不在乎，国内没有厂商用JC08来宣传续航成绩。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/kai-zi-56?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">凯凯</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/520432531/answer/2384107159?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/445727738?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何看待特斯拉被质疑续航里程有水分，是利用了EPA测试规则的「漏洞」？</a><br><a href=\"http://www.zhihu.com/question/507042489?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">各位车主们你们三年前买的纯电动汽车现在续航还有50公里嘛？</a><br>\n","link":"http://www.zhihu.com/question/520432531/answer/2384107159?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"在 Windows 上快速安装 Hexo · 安装 Node.js","date":"2022-01-14 10:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h2>\n<ul>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-nodejs\">安装 Node.js</a></li>\n</ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Node.js 官网 (<a href=\"https://node.js.org/\">https://node.js.org</a>)</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/image-20220114174925675.png\" alt=\"image-20220114174925675\"></p>\n<p>下载 Node.js 安装包（推荐下载 LTS 版本）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175645.png\" alt=\"image-20220114175645642\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175750.png\" alt=\"image-20220114175749822\"></p>\n<p>勾选同意协议，点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175835.png\" alt=\"image-20220114175835742\"></p>\n<p>修改文件安装位置，点击 <code>Next</code>。（也可以不用改）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175929.png\" alt=\"image-20220114175929226\"></p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180010.png\" alt=\"image-20220114180010036\"></p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180044.png\" alt=\"image-20220114180043895\"></p>\n<p>点击 <code>Install</code> 开始安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180108.png\" alt=\"image-20220114180107827\"></p>\n<p>等待安装完成。<img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180122.png\" alt=\"image-20220114180122728\"></p>\n<p>点击 <code>Finish</code> 完成安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180206.png\" alt=\"image-20220114180206024\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>打开 <code>Git Bash</code>.</p>\n<blockquote><p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。<br>或是在开始菜单中找到 Git Bash.</p></blockquote>\n<p>输入 <code>node -v</code> 和 <code>npm -v</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180458.png\" alt=\"image-20220114180458685\"></p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-nodejs/"},{"title":"2022: 新年快乐！","date":"2021-12-31 16:00:00","description":"\n<p>转眼间，2021 年已经过去。这一年非常忙碌，以至于博客一周年的纪念来不及写，许多文章计划停留在了 To Do 里。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%8D%9A%E5%AE%A2\" class=\"headerlink\" title=\"博客\"></a>博客</h2>\n<p>由于 Cloudflare Web Analytics 是在 2021 年 4 月份启用的，再加上后来又将统计代码去除，所以关于访问量的信息不可用。</p>\n<p>截止至 2021 年 12 月 31 日，博客共发布 15 篇文章，其中 2021 年发布 11 篇文章，原创文章 10 篇。</p>\n<p>目前采用 <code>LeanCloud + Waline</code> 的评论方式，自 7 月份被刷评论后将评论权限改为登录（支持 <code>GitHub</code> 登录），还有部分评论在迁移中丢失，实在抱歉。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>博客自 2021 年 1 月 13 日将主题改为 <code>Miracle</code>，这是一款简洁、轻量的单栏 Hexo 主题。</p>\n<p><code>Miralce</code> 目前的版本是 <code>2.0.1</code>，全新的版本去除 jQuery，进一步提升性能。</p>\n<p>GitHub 仓库：<a href=\"https://github.com/hifun-team/hexo-theme-miracle\">https://github.com/hifun-team/hexo-theme-miracle</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%9B%B4%E5%A4%9A\" class=\"headerlink\" title=\"更多\"></a>更多</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">=&gt; ...</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2022/"},{"title":"无垠 2021 年度总结","date":"2021-12-31 08:36:10","description":"\n<p>真是忙碌的一年啊。转眼 2021 已经过去，2022 即将到来。又到了该总结这一年的时候了。</p>\n<h1>统计数据</h1>\n<p>年度总结的第一部分仍然是一些统计数据。以下数据截止 2021 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 29,073 (<span>+0.6%</span>)，年 PV 67,688 (<span>-11.61%</span>)，日均 UV 79.65，平均停留时间 3分34秒 (<span>-13.7%</span>)，平均跳出率 55% (<span>-9.8%</span>)。一年有效文章数 1 (<span>-80%</span>)，新增评论 109 条 (<span>-54.96%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\" alt=\"\" width=\"515\" height=\"620\" class=\"aligncenter size-full wp-image-2537\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog-249x300.jpg 249w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>除了 UV 较去年提高 100 多之外，其他数据全部下滑。主要原因还是因为今年实在太过忙碌，只更新了一篇博客，评论区也没有怎么维护。不过目前已经有两篇新的文章在路上了，希望可以尽快写完吧。</p>\n<h2>个人主页</h2>\n<p>个人页总 UV 3,515 (<span>-18.12%</span>)，总 PV 3,929 (<span>-4.56%</span>)，日均 UV 9.63，平均停留时间 55秒 (<span>-12.7%</span>)。访问的主要来源是知乎和 GitHub。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\" alt=\"\" width=\"515\" height=\"647\" class=\"aligncenter size-full wp-image-2538\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton-239x300.jpg 239w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>仍然是没有更新个人主页的一年，我也没有继续宣传这个页面，统计数据下滑大概是正常的。</p>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 4 次，新增 149 commits (<span>-54.57%</span>)，Star 数增加了 174，现有 788。</p>\n<p>终于，MDx 2.0 发布了。但是因为今年的过于忙碌，MDx 并没有得到足够的维护，版本发布周期也拉得比较长，很多 Bug 没能及时修复。希望明年可以把更多的时间花在维护 MDx 上。无论如何，还是感谢各位对于 MDx 的支持！</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>2021 大事记</h1>\n<p>说起来，2021 真的太多“第一次”了...</p>\n<ul>\n<li>一月：由于电脑电池鼓包，第一次用 iPad 外接屏幕远程桌面到服务器来考期末🌚太痛苦了</li>\n<li>一月：MDx 喜提 600 Stars</li>\n<li>三月：第一次测核酸（真的酸）</li>\n<li>三月：第一次坐上 A350！(B-309W）</li>\n<li>三月：第一次来到英国</li>\n<li>六月：第一次来到伦敦</li>\n<li>六月：第一次去猫咖撸猫🐱</li>\n<li>六月：第一次坐上 B777！(B-2025）</li>\n<li>七月：酒店隔离十四天🌚</li>\n<li>七月：MDx 喜提 700 Stars</li>\n<li>七月：第一次和猫一起住（时刻有猫撸真的爽😆）</li>\n<li>七月：入职<a href=\"https://75.team/\">奇舞团</a>实习</li>\n<li>八月：北京景点怎么这么多</li>\n<li>九月：北京景点怎么还有这么多</li>\n<li>九月：<a href=\"https://flyhigher.top/develop/2160.html\">谈谈 WebAuthn</a> 被 <a href=\"https://weibo.com/1893751011/KyipM3tOM\" rel=\"noopener noreferrer\">w3c中国微博转发</a><del>（虽然并没有人看）</del>\n</li>\n<li>九月：从奇舞团<del>跑路</del>\n</li>\n<li>九月：整了个 Stackoverflow 的复制粘贴键盘<del>，太好用了</del>\n</li>\n<li>十月：终于买了心心念念的 MSFS</li>\n<li>十一月：终于买了一台新相机</li>\n<li>十一月：第一次坐上 A380！(B-6140）</li>\n<li>十二月：第一次来到爱丁堡并和 <a href=\"https://diygod.me/\">@DIYgod</a> 面基</li>\n</ul>\n<section><div class=\"set-images-div\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\" alt=\"和猫一起住的唯一问题就是手机很快会被猫片塞满\" width=\"730\" height=\"1500\" class=\"aligncenter size-full wp-image-2518\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg 730w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-146x300.jpg 146w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-498x1024.jpg 498w\" sizes=\"(max-width: 730px) 100vw, 730px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\" alt=\"看到你在写前端，猫猫很担心你\" width=\"1004\" height=\"1500\" class=\"aligncenter size-full wp-image-2523\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg 1004w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-201x300.jpg 201w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-685x1024.jpg 685w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-768x1147.jpg 768w\" sizes=\"(max-width: 1004px) 100vw, 1004px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\" alt=\"高效开发工具（确信\" width=\"1500\" height=\"1019\" class=\"aligncenter size-full wp-image-2519\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-300x204.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-1024x696.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-768x522.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\" alt=\"和 Ralph 在天坛\" width=\"947\" height=\"1500\" class=\"aligncenter size-full wp-image-2524\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg 947w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-189x300.jpg 189w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-646x1024.jpg 646w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-768x1216.jpg 768w\" sizes=\"(max-width: 947px) 100vw, 947px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\" alt=\"380!\" width=\"1500\" height=\"874\" class=\"aligncenter size-full wp-image-2517\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-300x175.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-1024x597.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-768x447.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a>\n</div>\n<div class=\"set-images-div2\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\" alt=\"到处玩.jpg\" width=\"1500\" height=\"1080\" class=\"aligncenter size-full wp-image-2521\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-300x216.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-1024x737.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-768x553.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\" alt=\"还是到处玩.jpg\" width=\"977\" height=\"1500\" class=\"aligncenter size-full wp-image-2520\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg 977w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-195x300.jpg 195w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-667x1024.jpg 667w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-768x1179.jpg 768w\" sizes=\"(max-width: 977px) 100vw, 977px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\" alt=\"380 上的星空\" width=\"1002\" height=\"1500\" class=\"aligncenter size-full wp-image-2522\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg 1002w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-200x300.jpg 200w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-684x1024.jpg 684w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-768x1150.jpg 768w\" sizes=\"(max-width: 1002px) 100vw, 1002px\"></a>\n</div>\n</section><p><span>点击图片查看描述</span></p>\n<p>对了，对于可爱的猫猫们，我整了一个 Telegram 贴纸包，你可以在这里获取：<a href=\"https://telegram.me/addstickers/huanAndDan\">https://telegram.me/addstickers/huanAndDan</a>。</p>\n<h1>跨年红包</h1>\n<p>今年的解题之旅，从下面这张图片开始：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\" alt=\"\" width=\"1510\" height=\"1250\" class=\"aligncenter size-full wp-image-2556\"></a>\n<p>不过，鉴于今年的题目较以往对于认真解题的人更难，我还准备了隐藏红包，在解题中收集线索即可发现隐藏红包。共有 20 个普通红包和 10 个隐藏红包。</p>\n<p>解题计划持续到东八区 2022.02.03 23:59:59 或红包被领完为止，之后我会发布题解。不过由于去年情况混乱，今年在解题过程中我一旦发现有不正常的现象就会立即停止活动。Anyway，新年快乐！祝玩得开心。</p>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报用到了 PS 和 Adobe 家的新玩具 Dimension。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\" alt=\"\" width=\"707\" height=\"1000\" class=\"aligncenter size-full wp-image-2547\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg 1414w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-212x300.jpg 212w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-724x1024.jpg 724w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-768x1086.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-1086x1536.jpg 1086w\" sizes=\"(max-width: 707px) 100vw, 707px\"></a>\n<p>那么祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2507.html"},{"title":"[译] 不，Web3 不是去中心化","date":"2021-12-14 14:01:00","description":"\n<p>加密货币社区对元宇宙和 Web3 的狂热仍在继续，大量投资人和开发者前仆后继加入其中。但是，Web3 真的能实现支持者们的种种愿景吗？亦或是另一个镜中月、水中花？也许让历史照进现实，能给我们答案。</p>\n<p>请前往 <a href=\"https://blog.skk.moe/post/web3-is-not-decentralization/\">https://blog.skk.moe/post/web3-is-not-decentralization/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/web3-is-not-decentralization/"},{"title":"[译] 捍卫自由的互联网，对 Web3 说不","date":"2021-12-12 13:40:00","description":"\n<p>作为一个充满泡沫和噱头的新概念，Web3 和元宇宙在区块链的社区中掀起了一波浪潮。鼓吹者坚信 Web3 就是互联网的未来、不惜砸下大把的金钱和精力、希望能在未来中捞一杯羹；而大部分人保持观望的态度。是时候来一点 Web3 的反对意见了。</p>\n<p>请前往 <a href=\"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/\">https://blog.skk.moe/post/keep-web-free-say-no-to-web3/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/"},{"title":"2021 年 JavaScript Promise 性能对比","date":"2021-12-07 08:19:00","description":"\n<p>我们正生活在一个「Any application that can be written in JavaScript, will eventually be written in JavaScript」的时代。作为一门兼具动态性和简单性的语言，JavaScript 已经占领了客户端、服务端，甚至在机器学习中也占据一席之地；不可避免的，异步执行也逐渐成为这门语言不可缺少的一部分。...</p>\n<p>请前往 <a href=\"https://blog.skk.moe/post/promise-performance-benchmark/\">https://blog.skk.moe/post/promise-performance-benchmark/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/promise-performance-benchmark/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Git","date":"2021-11-12 13:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h3>\n<ul><li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li></ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Git 官网 (<a href=\"https://git-scm.com/\">https://git-scm.com</a>).</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112204849.png\"></p>\n<p>点击页面中的 <code>Download For Windows</code> 下载 Windows 版本。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211507.png\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>，同意协议。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211528.png\"></p>\n<p>修改程序安装位置，点击 <code>Next</code>（直接装在 C 盘也不是不行）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211604.png\"></p>\n<p>组件选项，可选桌面快捷键、右键菜单、LFS 支持、自动检查更新等。</p>\n<p>点击 <code>Next</code> 进入下一步。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211609.png\"></p>\n<p>开始菜单文件夹名，保持默认就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211613.png\"></p>\n<p>默认编辑器，保持 Vim 就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211616.png\"></p>\n<p>环境变量，选择第 2 个，点击 <code>Next</code>。</p>\n<blockquote><p>如果选择第 1 个，则只能在 Git Bash 中使用，可能会出现问题</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211619.png\"></p>\n<p>剩下的都可以保持默认，一路 Next，然后点击 <code>Install</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211622.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211624.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211627.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211630.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211633.png\"></p>\n<p>等待安装完毕。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。</p>\n<p>（或是在开始菜单中找到 Git Bash）</p>\n<p>输入 <code>git --version</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/7ec315b7764cc.png\"></p>\n<p>大功告成！</p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-git/"},{"title":"前端时间国际化 101","date":"2021-10-14 15:58:23","description":"\n<blockquote>\n<p>时间只是幻觉。</p>\n<footer>—— 阿尔伯特·爱因斯坦</footer>\n</blockquote>\n<p>最近在开发一个需要完善国际化方案的前端项目，在处理时间国际化的时候遇到了一些问题。于是花了一些时间研究，有了这篇文章。不过由于网上关于 JavaScript 中 <code>Date</code> 对象的坑的文章已经一抓一大把了，<strong>因此这篇文章不是 JavaScript 中 <code>Date</code> 对象的使用指南，而是只专注于前端时间国际化。</strong></p>\n<h1>从时区说起</h1>\n<p>要想处理时间，UTC 是一个绕不开的名字。协调世界时（Coordinated Universal Time）是目前通用的世界时间标准，计时基于原子钟，但并不等于 TAI（国际原子时）。TAI 不计算闰秒，但 UTC 会不定期插入闰秒，因此 UTC 与 TAI 的差异正在不断扩大。UTC 也接近于 GMT（格林威治标准时间），但不完全等同。可能很多人都发现近几年 GMT 已经越来越少出现了，这是因为 GMT 计时基于地球自转，由于地球自转的不规则性且正在逐渐变慢，目前已经基本被 UTC 所取代了。</p>\n<blockquote><p>JavaScript 的 <code>Date</code> 实现不处理闰秒。实际上，由于闰秒增加的不可预测性，Unix/POSIX 时间戳完全不考虑闰秒。在闰秒发生时，Unix 时间戳会重复一秒。这也意味着，一个时间戳对应两个时间点是有可能发生的。</p></blockquote>\n<p>由于 UTC 是标准的，我们有时会使用 UTC+/-N 的方式表达一个时区。这很容易理解，但并不准确。中国通行的 <code>Asia/Shanghai</code> 时区<strong>大部分</strong>情况下可以用 UTC+8 表示，但英国通行的 <code>Europe/London</code> 时区并不能用一个 UTC+N 的方式表示——由于夏令时制度，<code>Europe/London</code> 在夏天等于 UTC+1，在冬天等于 UTC/GMT。</p>\n<blockquote><p>一个时区与 UTC 的偏移并不一定是整小时。如 <code>Asia/Yangon</code> 当前为 UTC+6:30，而 <code>Australia/Eucla</code> 目前拥有奇妙的 UTC+8:45 的偏移。</p></blockquote>\n<p>夏令时的存在表明<strong>时间的表示不是连续的</strong>，时区之间的时差也并不是固定的，我们并不能用固定时差来处理时间，这很容易意识到。但一个不容易意识到的点是，时区还包含了其历史变更信息。中国目前不实行夏令时制度，那我们就可以放心用 UTC+8 来表示中国的时区了吗？你可能已经注意到了上一段中描述 <code>Asia/Shanghai</code> 时区时我使用了<strong>大部分</strong>一词。<code>Asia/Shanghai</code> 时区在历史上实行过夏令时，因此 <code>Asia/Shanghai</code> 在部分时间段可以使用 UTC+9 来表示。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1988-04-18 00:00:00')\r\n// Mon Apr 18 1988 00:00:00 GMT+0900 (中国夏令时间)</pre>\n<blockquote><p>夏令时已经够混乱了，但它实际上比你想象得更混乱——部分穆斯林国家一年有四次夏令时切换（进入斋月时夏令时会暂时取消），还有一些国家使用混沌的 15/30 分钟夏令时而非通常的一小时。</p></blockquote>\n<blockquote><p><strong>不要总是基于 <code>00:00</code> 来判断一天的开始。</strong>部分国家使用 0:00-1:00 切换夏令时，这意味着 23:59 的下一分钟有可能是 1:00。</p></blockquote>\n<p>事实上，虽然一天只有 24 个小时，但当前（2021.10）正在使用的时区有超过 300 个。<strong>每一个时区都包含了其特定的历史。</strong>虽然有些时区在现在看起来是一致的，但它们都包含了不同的历史。时区也会创造新的历史。由于政治、经济或其他原因，一些时区会调整它们与 UTC 的偏差（萨摩亚曾经从 UTC-10 切换到 UTC+14，导致该国 2011.12.30 整一天都消失了），或是启用/取消夏令时，甚至有可能导致一个时区重新划分为两个。因此，为了正确处理各个时区，我们需要一个数据库来存放时区变更信息。还好，已经有人帮我们做了这些工作。目前大多数 *nix 系统和大量开源项目都在使用 <a href=\"https://www.iana.org/time-zones\" rel=\"noopener\">IANA 维护的时区数据库</a>（IANA TZ Database），其中包含了自 Unix 时间戳 0 以来各时区的变更信息。当然这一数据库也包含了大量 Unix 时间戳 0 之前的时区变更信息，但并不能保证这些信息的准确性。IANA 时区数据库会定期更新，以反映新的时区变更和新发现的历史史实导致的时区历史变更。</p>\n<blockquote><p>Windows 不使用 IANA 时区数据库。微软为 Windows 自己维护了一套<a href=\"https://docs.microsoft.com/zh-cn/troubleshoot/windows-client/system-management-components/daylight-saving-time-help-support\" rel=\"noopener\">时区数据库</a>，这有时会导致在一个系统上合法的时间在另一系统上不合法。</p></blockquote>\n<p>既然我们不能使用 UTC 偏移来表示一个时区，那就只能为每个时区定义一个标准名称。通常地，我们使用 <code>/</code> 来命名一个时区。这里的城市一般为该时区中人口最多的城市。于是，我们可以将中国的通行时区表示为 <code>Asia/Shanghai</code>。也有一些时区有自己的别名，如太平洋标准时间 <code>PST</code> 和协调世界时 <code>UTC</code>。</p>\n<blockquote><p>时区名称使用城市而非国家，是由于国家的变动通常比城市的变动要快得多。</p></blockquote>\n<blockquote><p><strong>城市不是时区的最小单位。</strong>有很多城市同时处于多个时区，甚至澳大利亚<a href=\"https://en.wikipedia.org/wiki/Gold_Coast_Airport\" rel=\"noopener\">有一个机场</a>的跑道两端处于不同的时区。</p></blockquote>\n<h1>处理时区困难重重</h1>\n<p>几个月前的一天，<a href=\"https://milkice.me/\" rel=\"noopener\">奶冰</a>在他的 Telegram 频道里发了这样的一条消息：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\"><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\" alt=\"奶冰频道的消息\" width=\"500\" class=\"aligncenter size-medium wp-image-2490\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg 800w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-244x300.jpg 244w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-768x944.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\"></a>\n<p>你想的没错，这个问题正是由时区与 UTC 偏移的不同造成的。<code>Asia/Shanghai</code> 时区在 1940 年前后和 1986 年前后曾实行过夏令时，<strong>而夏令时的切换会导致一小时的出现和消失。</strong>具体来说，启用夏令时当天会有一个小时消失，如 2021.3.28 英国启用夏令时，1:00 直接跳到 3:00，导致 <code>2021-03-28 01:30:00</code> 在 <code>Europe/London</code> 时区中是不合法的；取消夏令时当天又会有一个小时重复，如 2021.10.31 英国取消夏令时，2:00 会重新跳回 1:00 一次，导致 <code>2021-10-31 01:30:00</code> 在 <code>Europe/London</code> 时区中对应了两个时间点。而在奶冰的例子中，<code>1988-04-10 00:46:50</code> 正好处于因夏令时启用而消失的一小时中，因此系统会认为此时间字符串不合法而拒绝解析。</p>\n<blockquote><p>你可能会注意到在历史上 1988.4.10 这一天 <code>Asia/Shanghai</code> 时区实际上是去掉了 1:00-2:00 这一小时而不是 0:00-1:00。上文问题更深层次的原因是，在 IANA TZDB 2018a 及更早版本中，IANA 因缺乏历史资料而设置了错误的夏令时规则，规则设定了夏令时交界于 0:00-1:00 从而导致上文问题发生。而随后社区<a href=\"http://mm.icann.org/pipermail/tz/2018-August/026760.html\" rel=\"noopener\">发现了更准确的史实</a>，因此 IANA 更新了数据库。上文的问题在更新了系统的时区数据库后便解决了。</p></blockquote>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\" alt=\"IANA TZDB 2018a 及之前版本的错误数据\" width=\"1750\" height=\"595\" class=\"aligncenter size-full wp-image-2491\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg 1750w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-300x102.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1024x348.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-768x261.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1536x522.jpg 1536w\" sizes=\"(max-width: 1750px) 100vw, 1750px\"></a>\n<p><span>IANA TZDB 2018a 及之前版本的错误数据</span></p>\n<p>再来考虑另一种情况。你的应用的某位巴西用户在 2018 年保存了一个未来时间 <code>2022-01-15 12:00</code>（按当时的规律那应该是个夏令时时间），不巧那时候你的应用是以格式化的时间字符串形式保存的时间。之后你发现巴西已经于 2019 年 4 月宣布彻底取消夏令时制度，那么 <code>2022-01-15 12:00</code> 这个时间对应的 Unix 时间戳发生了变化，变得不再准确，要正确处理这一字符串就需要参考这一字符串生成的时间（或生成时计算的 UTC 偏移）来做不同的处理。<strong>因此，应用从一开始就应该避免使用字符串来传输、存储时间，而是使用 Unix 时间戳。</strong>如果不得不使用字符串存储时间，请尽可能：</p>\n<ul>\n<li>使用 UTC 描述时间，你永远不会知道本地时区在未来会发生什么</li>\n<li>如果需要以当地时间描述时间，一定带上当前 UTC 偏移</li>\n</ul>\n<p>时区历史带来的问题往往意想不到而且远比想象得多。实际上时区历史数据非常详细而繁多且跨设备不一致，并没有简单而统一的处理方法。在需要严谨处理时区时可能需要在应用程序中内嵌一套各端统一的时区数据库，但这样的方案放在前端又会带来不少问题：</p>\n<ul>\n<li>体积过大。moment.js 曾经设计过<a href=\"https://github.com/moment/moment-timezone/blob/develop/data/packed/2021a.json\" rel=\"noopener\">一种简洁的 TZDB 表示</a>，但尽管已经尽可能压缩整个文件仍然达到了 180+KB。在性能优先的 Web 应用中这是不可接受的</li>\n<li>需要持续更新。时区数据一直在变动，需要在时区数据更新时尽快更新应用内的时区数据，这带来了额外的维护成本</li>\n</ul>\n<p>ES6 为我们带来了 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl\" rel=\"noopener\"><code>Intl</code> 命名空间</a>。在这里，JavaScript 运行时提供了不少时间相关的国际化能力。因此，在不使用额外数据的情况下准确处理时区是可能的，但这并不完美：</p>\n<ul>\n<li>各端不统一。浏览器提供的时区数据受浏览器版本、系统版本等可能变化，最新的时区更新可能无法快速反映到所有设备上</li>\n<li>实现复杂。<code>JavaScript</code> 中 <code>Date</code> 对象的不良设计导致实现完善的时区处理并不容易，且 <code>Intl</code> 命名空间下的对象实例化性能开销较大，需要额外优化</li>\n</ul>\n<blockquote><p><code>Intl</code> 命名空间下还有很多实用的国际化相关方法，值得我们另开一篇文章来讲讲了。</p></blockquote>\n<p>在真实开发中，这需要取舍。目前主流的 JavaScript 时间处理库都已转向浏览器内置方法，并在需要时通过 Polyfill 保证跨端一致性。在这篇文章中，我们将尝试在不使用第三方库的情况下实现基本的时间国际化处理。此外，还有一些诸如需要使用 Unix 时间戳才能正确地在各端交换时间等细节需要注意。</p>\n<h1>时区转换</h1>\n<p>JavaScript 中的 <code>Date</code> 并不是不包含时区信息——实际上，<code>Date</code> 对象表示的一定是当前时区。通过尝试：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1970-01-01T00:00:00Z')\r\n// Thu Jan 01 1970 08:00:00 GMT+0800 (中国标准时间)</pre>\n<p>就可以知道，JavaScript 运行时其实知道当前时区，并会在需要的时候将其他时区的时间转换为当前时区的时间。那么，如何将本地时间转换为其他时区的时间呢？从 <code>Date</code> 的角度看，这并不行，因为我们无法设置一个 <code>Date</code> 对象的时区。但我们可以“投机取巧”：将 <code>Date</code> 对象的时间加上/减去对应的时差，尽管 <code>Date</code> 对象仍然认为自己在本地时区，但这样不就可以正确显示了嘛！但我们会碰到上文提到的问题：时区之间的时间差并不固定，在没有额外数据的情况下很难正确计算。</p>\n<p>还好，ES6 基于 <code>Intl</code> 命名空间扩展了 <code>Date.prototype.toLocaleString()</code> 方法，使其可以接受时区参数并按指定时区格式化时间。如果你在搜索引擎中搜索如何使用 JavaScript 转换时区，你大概率会在 StackOverflow 上找到类似这样的答案：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const convertTimeZone = (date, timeZone) =&gt; {\r\n    return new Date(date.toLocaleString('en-US', { timeZone }))\r\n}\r\n\r\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\r\nconvertTimeZone(now, 'Europe/London') // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<p>很好理解，我们使用 <code>en-US</code> 的区域设置要求 JavaScript 运行时以我们指定的时区格式化时间，再将时间字符串重新解析为时间对象。这里的 <code>timeZone</code> 就是诸如 <code>Asia/Shanghai</code> 等的 IANA TZDB 时区名称。这个字符串确实需要自己提供，但这就是我们唯一需要自己准备的数据了！只要提供了时区名称，浏览器就会自动计算正确的时间，无需我们自行计算。</p>\n<blockquote><p>对于时区名称，你可以考虑使用 <a href=\"https://github.com/vvo/tzdb/\" rel=\"noopener\">@vvo/tzdb</a>。这是一个声称为自动更新的 IANA TZDB 的 JSON 导出，并已被数个大型项目使用。你可以从这个包中导出所有时区名称。</p></blockquote>\n<p>这个方法看起来还不错，对吧？但实际上，它有两个问题：</p>\n<ul>\n<li>指定了区域设置和时区的 <code>toLocaleString()</code> 实际上每次调用都会在 JavaScript 运行时中创建新的 <code>Intl.DateTimeFormat</code> 对象（在后文详述），而后者会带来昂贵的性能开销（在 Node 14 中，实例化一次会在 V8 中增加内存使用约 46.3Kb。但这是符合预期的，详见 <a href=\"https://bugs.chromium.org/p/v8/issues/detail?id=6528\" rel=\"noopener\">V8 Issue</a>）。因此，在密集调用的情况下需要考虑计算并缓存时差，并在一定时间后或需要时进行更新</li>\n<li>使用 <code>toLocaleString()</code> 并使用 <code>en-US</code> 区域设置格式化的默认时间格式类似于 <code>10/13/2021, 1:00:00 AM</code>。这可以被大部分浏览器正确解析，<strong>但这是不规范的，不同浏览器有可能产生不同结果。</strong>你也可以自行配置格式（同下文的 <code>Intl.DateTimeFormat</code>），但仍然无法构造出规范的字符串</li>\n</ul>\n<p>因此，更佳的方案是，我们需要建立一个可反复使用的格式化器以避免重复创建 <code>Intl.DateTimeFormat</code> 带来的额外开销，并需要手动构造出符合规范的时间字符串，并将其重新解析为 <code>Date</code> 对象。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const timeZoneConverter = (timeZone) =&gt; {\r\n    // 新建 DateTimeFormat 对象以供对同一目标时区重用\r\n    // 由于时区属性必须在创建 DateTimeFormat 对象时指定，我们只能为同一时区重用格式化器\r\n    const formatter = new Intl.DateTimeFormat('zh-CN', {\r\n        year: 'numeric',\r\n        month: '2-digit',\r\n        day: '2-digit',\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n        second: '2-digit',\r\n        hour12: false,\r\n        timeZone\r\n    })\r\n    return {\r\n        // 提供 conver 方法以将提供的 Date 对象转换为指定时区\r\n        convert (date) {\r\n            // zh-CN 的区域设置会返回类似 1970/01/01 00:00:00 的字符串\r\n            // 替换字符即可构造出类似 1970-01-01T00:00:00 的 ISO 8601 标准格式时间字符串并被正确解析\r\n            return new Date(formatter.format(date).replace(/\\//g, '-').replace(' ', 'T').trim())\r\n        }\r\n    }\r\n}\r\n\r\nconst toLondonTime = timeZoneConverter('Europe/London') // 对于同一时区，此对象可重用\r\n\r\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\r\ntoLondonTime.convert(now) // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<blockquote><p>目前 <code>zh-CN</code> 的区域设置会产生类似 <code>1970/01/01 00:00:00</code> 的格式化字符串。这一格式目前跨端一致，但由于规范没有指定时间格式，<strong>这个格式在未来有可能变更。</strong>更好的方案是使用 <code>formatToParts()</code> 方法（在后文详述）获取时间字符串的各部分并手动拼接出标准格式的字符串，但在这个例子中直接 <code>replace</code> 拥有更好的性能。</p></blockquote>\n<p>现在，尝试反复转换时间至同一时区 1000 次，耗时从 <code>toLocaleString()</code> 1.5 秒降低到了 0.04 秒。尽管代码长了点，但这次重写在最好的情况下为我们带来了超过 20 倍的性能提升。</p>\n<p>需要注意的是，虽然这看起来就算最终方案了，但这个方案依然不完美。主要有以下两个问题：</p>\n<ul>\n<li>在需要密集转换为不同时区时，由于无法重用格式化器，性能依然较差且难以进一步优化</li>\n<li>由于 <code>Intl.DateTimeFormat</code> 不支持格式化毫秒，在格式化字符串的过程中毫秒会丢失，导致最终结果可能会与期望结果产生最高 999ms 的误差，需要额外处理。比如需要计算时差时，我们可能需要这么写：\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const calcTimeDiff = (date, converter) =&gt; {\r\n    const secDate = date - date.getMilliseconds() // 去掉毫秒，避免转换前后精度差异\r\n    return converter.convert(new Date(secDate), tzName) - secDate\r\n}\r\n\r\ncalcTimeDiff(new Date(), timeZoneConverter('Europe/London')) // -25200000</pre>\n</li>\n</ul>\n<p>无论如何，在折腾一番后我们还是把时区正确转换了。接下来准备格式化时间字符串了吗？不过在此之前，我们得先来聊聊语言、文字和区域。</p>\n<h1>语言文字区域傻傻分不清</h1>\n<blockquote><p>如何在计算机中表示中文？</p></blockquote>\n<p>“这不简单，”你可能会说，“用 <code>zh</code> 啊。”</p>\n<blockquote><p>那简体中文呢？</p></blockquote>\n<p>“<code>zh-CN</code>。”你或许会说出这个答案。</p>\n<blockquote><p>那用于新加坡的简体中文和用于中国大陆的简体中文该如何区分呢？</p></blockquote>\n<p>嗯……好问题。</p>\n<p>要能正确区分不同的简体中文，我们还得先回到定义上。实际上，“国际化”并不只是语言的翻译而已，国际化包含的是一整套对于各个<strong>区域</strong>的本地化方案。要准确表示一个国际化方案，我们实际至少需要确定三个属性：语言（Language）、文字（Script）和区域（Locale）。</p>\n<ul>\n<li>\n<strong>语言</strong>通常指的是<strong>声音语言</strong>。不同的语言都有一套自己的发音规则，很难互通。如中文和英语都属于语言</li>\n<li>\n<strong>文字</strong>对应的是某个语言的书写方式，同样的语言可能会有多种书写方案。如中文主要有简体和繁体两种书写方案</li>\n<li>\n<strong>区域</strong>指国际化面向的地区，相同的语言和文字，在不同地区也有可能会有不同的使用习惯。如新加坡和中国大陆都使用简体中文，但两地的用词习惯等有些许差异</li>\n</ul>\n<p>只有确定了这三个属性，我们才能正确定义一个国际化方案（或者说<strong>区域设置</strong>）。当然，还有很多其他属性可以更准确的表达某个区域设置，但通常有语言、文字和区域就已经足够了。</p>\n<p>于是，基于 <a href=\"https://tools.ietf.org/rfc/bcp/bcp47.txt\" rel=\"noopener\">BCP 47</a>，我们可以知道：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN = 中文普通话-简体-中国大陆\r\ncmn-Hans-SG = 中文普通话-简体-新加坡\r\ncmn-Hant-TW = 中文普通话-繁体-台湾\r\nyue-Hant-HK = 中文粤语-繁体-香港</pre>\n<p>等等，这都是啥？还有 BCP 47 又是啥？BCP 是 IETF 发布的“最佳当前实践”文档，而 BCP 47 是一些国际化相关的 ISO 和备忘录的集合，也是目前事实上由 HTML 和 ECMAScript 所使用的表达区域设置的标准。BCP 47 定义的区域设置标签实际上比较复杂，但对于大部分简单使用情况，上文示例中的格式已经完全够用了。简单来说，<strong>要表达一个区域设置，我们会使用 <code>语言[-文字][-区域]</code> 的格式，而文字和区域都是可选的。</strong>而对于每个部分的具体代码，BCP 47 也有做具体定义。其中：</p>\n<ul>\n<li>语言使用 ISO 639-1 定义的两位字母代码（如中文为 <code>zh</code>，英文为 <code>en</code>）或 <a href=\"https://iso639-3.sil.org/code_tables/639/data\" rel=\"noopener\">ISO 639-2/3</a> 定义的三位字母代码（如中文普通话为 <code>cmn</code>，英文为 <code>eng</code>），通常小写</li>\n<li>文字使用 <a href=\"https://unicode.org/iso15924/iso15924-codes.html\" rel=\"noopener\">ISO 15924</a> 定义的四位字母代码，通常首字母大写。如简体中文是 <code>Hans</code>，繁体中文是 <code>Hant</code>\n</li>\n<li>区域通常使用 <a href=\"https://www.iso.org/iso-3166-country-codes.html\" rel=\"noopener\">ISO 3166-1</a> 定义的两位字母代码，通常大写，如中国大陆为 <code>CN</code>，英国为 <code>GB</code>\n</li>\n</ul>\n<blockquote><p>ISO 639-1/2/3 的关系实际是：ISO 639-1 是最早制定的规范，使用两位字母表示语言，但语言数量之多并不能只用两位代码表示。因此后来修订了 ISO 639-2 和 3，使用三位字母表示了更多语言。通常 639-1 代码和 ISO-2/3 代码是一对多的关系。如中文 <code>zh</code> 其实是中文普通话 <code>cmn</code> 的宏语言（macrolanguage），同样使用 <code>zh</code> 为宏语言的语言还有 <code>wuu</code>（中文吴语）、<code>hak</code>（中文客家话）、<code>yue</code>（中文粤语）等数十种。<strong>从规范上我们现在应该使用 ISO 639-2/3 代码来替代 ISO 639-1 代码了</strong>，但由于历史阻力和真实需求中分类无需如此细致等原因，<strong>使用 ISO 639-1 指定语言仍然非常常见而且完全可以接受。</strong>此外，特别地，我们在 ISO 639-3 中定义未指明的语言为 <code>und</code>。</p></blockquote>\n<p>因此，对于这一节开头的两个问题，在 BCP 47 中正确答案其实是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">zh = 中文\r\ncmn = 中文普通话\r\n\r\nzh-Hans = 中文-简体\r\ncmn-Hans = 中文普通话-简体</pre>\n<p>而 <code>zh-CN</code> 实际是指在中国大陆使用的中文，当然也包含在中国大陆使用的繁体中文。<strong>不过，由于大部分情况下一个区域只会通用一种文字，很多情况下我们可以忽略文字这一项</strong>，即使用 <code>zh-CN</code>（或者 <code>cmn-CN</code>）来表示中国大陆的简体中文普通话——毕竟在大部分业务中在中国大陆使用繁体和非普通话的情况非常少。</p>\n<blockquote><p>事实上，类似 <code>zh-Hans</code> 和 <code>zh-Hant</code> 开头的区域设置名称已经被标记为 <code>redundant 废弃</code>，因此尽可能只使用 <code>zh-CN</code> 或者 <code>cmn-Hans-CN</code> 这样的区域设置名称。所有区域设置名称的列表可以在 <a href=\"https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry\" rel=\"noopener\">IANA</a> 找到。</p></blockquote>\n<p>现在我们可以准确定义一个区域设置了。不过我们还有一些小小的需求。比如我们想在 <code>cmn-Hans-CN</code> 的区域设置中使用农历来表示日期，但显然我们上文定义的表示方法并不能表达这一需求。好在，Unicode 为 BCP 47 提供了 u 扩展。在区域设置名称后面加上 <code>-u-[选项]</code> 就可以表达更细致的变体了。所以我们有：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN-u-ca-chinese = 中文普通话-简体-中国大陆-u-日历-中国农历\r\njpn-Jpan-JP-u-ca-japanese = 日语-日文汉字/平假名/片假名-日本-u-日历-日本日历\r\ncmn-Hans-CN-u-nu-hansfin = 中文普通话-简体-中国大陆-u-数字-简体大写数字</pre>\n<p>u 扩展的具体可选项可以在 <a href=\"https://www.unicode.org/reports/tr35/tr35-21.html#Unicode_locale_identifier\" rel=\"noopener\">Unicode 网站</a>上找到。而多个 u 扩展还可以连接——于是我们甚至可以写出 <code>cmn-Hans-CN-u-ca-chinese-nu-hansfin</code> 这种丧心病狂的区域设置名称。当然，相信你现在已经可以看懂这个区域设置的意思了。</p>\n<blockquote><p>不同地区可能会有不同的日历使用习惯，如中国有使用农历的需求，泰国有使用佛历的需求，我们可以通过 u 扩展指定不同的日历。不过，大部分情况下我们会使用标准的 ISO 8601 日历（gregory），JavaScript 的 <code>Date</code> 对象也只支持这种日历。</p></blockquote>\n<blockquote><p>你可以使用 <a href=\"https://r12a.github.io/app-subtags/\" rel=\"noopener\">BCP47 language subtag lookup</a> 工具快速检查你编写的 BCP 47 区域标签是否规范。</p></blockquote>\n<p>终于我们可以正确表达一个完美符合我们需求的区域设置了。接下来，让我们开始格式化时间吧。</p>\n<h1>格式化时间</h1>\n<p>这题我会！</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const formatDate(date) =&gt; {\r\n    return `${date.getFullYear()}-${`${date.getMonth() + 1}`.padStart(2, '0')}-${`${date.getDate()}`.padStart(2, '0')} ${`${date.getHours()}`.padStart(2, '0')}:${`${date.getMinutes()}`.padStart(2, '0')}:${`${date.getSeconds()}`.padStart(2, '0')}`\r\n}\r\n\r\nformatDate(new Date()) // 2021-10-13 01:00:00</pre>\n<p>就完事了……吗？先不论这样的格式化代码难以阅读，尽管上文这样的日期格式国际通用，<strong>但并非所有区域都习惯于这样的日期表示方法。</strong>比如英语国家/地区在很多时候习惯在日期中加入星期，而阿拉伯语国家/地区在部分情况下习惯使用阿拉伯语数字（而非常用的阿拉伯-印度数字）；再比如美式英语国家/地区习惯月-日-年的日期表示法，而英式英语国家/地区习惯日-月-年的日期表示法……不同区域在时间表示格式习惯上的差异是巨大的，<strong>我们很难通过一个简单的方法来正确地、国际化地格式化一个日期。</strong></p>\n<p>好在 ES6 早就为我们铺平了道路。还记得上文提到过的 <code>Intl.DateTimeFormat</code> 吗？我们通过它来实例化一个日期格式化器并用进行日期的国际化。</p>\n<p>直接来看例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const options = {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    weekday: 'long'\r\n}\r\nconst now = new Date()\r\n\r\nconst enUSFormatter = new Intl.DateTimeFormat('en-US', options)\r\n\r\nconst zhCNFormatter = new Intl.DateTimeFormat('zh-CN', options)\r\nconst zhCNAltFormatter = new Intl.DateTimeFormat('zh-CN-u-ca-chinese', options)\r\nconst zhCNAlt2Formatter = new Intl.DateTimeFormat('zh-CN-u-ca-roc-nu-hansfin', options)\r\n\r\nconst jaFormatter = new Intl.DateTimeFormat('ja', options)\r\nconst jaAltFormatter = new Intl.DateTimeFormat('ja-JP-u-ca-japanese', options)\r\n\r\nconst arEGFormatter = new Intl.DateTimeFormat('ar-EG', options)\r\n\r\nenUSFormatter.format(now) // Wednesday, Oct 13, 2021\r\n\r\nzhCNFormatter.format(now) // 2021年10月13日星期三\r\nzhCNAltFormatter.format(now) // 2021辛丑年九月8星期三\r\nzhCNAlt2Formatter.format(now) // 民国壹佰壹拾年拾月拾叁日星期三\r\n\r\njaFormatter.format(now) // 2021年10月13日水曜日\r\njaAltFormatter.format(now) // 令和3年10月13日水曜日\r\n\r\narEGFormatter.format(now) // الأربعاء، ١٣ أكتوبر ٢٠٢١</pre>\n<blockquote><p>在这里我们使用 ISO 639-1 代码来表示语言，是由于事实上 ISO 639-1 代码更加常见与通用。在大部分支持 <code>Intl.DateTimeFormat</code> 的 JavaScript 运行时中我们也可以使用 ISO 639-2/3 代码来表示语言（但实际会 fallback 至对应的 ISO 639-1 代码）。</p></blockquote>\n<blockquote><p>你也可以通过在 <code>options</code> 中设置 <code>calendar</code> 属性和 <code>numberingSystem</code> 属性来替换区域设置名称中对 u 扩展的使用。这也是推荐方式。</p></blockquote>\n<p>这非常直观，我们可以指定区域设置和格式化选项来初始化一个格式化器，并在之后使用格式化器对象的 <code>format</code> 方法来格式化一个 <code>Date</code> 对象。这里的格式化选项其实非常灵活，能格式化的不只是日期，时间也可以被灵活地格式化，有非常多的组合可以选择。我们不会在这里详细解释每一个选项，你可以访问 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\" rel=\"noopener\">MDN 文档</a>来了解更多。</p>\n<blockquote><p>如前文所述，<code>Intl.DateTimeFormat</code> 无法格式化毫秒。</p></blockquote>\n<p>不过需要注意的是，<strong>JavaScript 运行时不一定支持所有区域设置，也不一定支持所有格式化选项。</strong>在遇到不支持的情况时，<code>Intl.DateTimeFormat</code> 默认会静默 fallback 到最匹配的支持项，因此在处理不常见的区域设置或选项时，你可能需要再额外检查。你可以通过 <code>Intl.DateTimeFormat.supportedLocalesOf()</code> 静态方法判断当前运行时是否支持指定的区域设置，也可以在实例化格式化器后在对象上调用 <code>resolvedOptions()</code> 方法来检查运行时的解析结果是否与预期一致。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('yue-Hant-CN').resolvedOptions()\r\n// {locale: 'zh-CN', calendar: 'gregory', …}\r\n// fallback 至 zh-CN，与 yue-CN 的预期不一致</pre>\n<p>此外，正如你所看到的，各种语言在日期格式化中使用的文本 JavaScript 运行时都已经帮我们内置了。因此，我们甚至可以利用这些国际化特性来为我们的应用减少一点需要翻译的字符串——打包进应用的翻译越少，应用体积也就越小了嘛——比如说获取一周七天对应的名字：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getWeekdayNames = (locale) =&gt; {\r\n     // 基于一个固定日期计算，这里选择 1970.1.1\r\n     // 不能使用 0，因为 Unix 时间戳 0 在不同时区的日期不一样\r\n    const base = new Date(1970, 0, 1).getTime()\r\n    const formatter = new Intl.DateTimeFormat(locale, { weekday: 'short' })\r\n    return Array.from({ length: 7 }, (_, day) =&gt; (\r\n        formatter.format(new Date(base + 3600000 * 24 * (-4 + day))) // 1970.1.1 是周四\r\n    ))\r\n}\r\n\r\ngetWeekdayNames('en-US') // ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\r\ngetWeekdayNames('zh-CN') // ['周日', '周一', '周二', '周三', '周四', '周五', '周六']\r\ngetWeekdayNames('ja') // ['日', '月', '火', '水', '木', '金', '土']\r\ngetWeekdayNames('ar-EG') // ['الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت']</pre>\n<p>当然，如果你还是不喜欢运行时为你提供的格式，我们还有上文提到过的 <code>formatToParts()</code> 方法可以用。来看一个简单的例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('zh-CN', {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    weekday: 'long',\r\n    hour: 'numeric',\r\n    minute: 'numeric',\r\n    second: 'numeric',\r\n}).formatToParts(new Date())\r\n// [\r\n//     { type: 'year', value: '2021' },\r\n//     { type: 'literal', value: '年' },\r\n//     { type: 'month', value: '10' },\r\n//     { type: 'literal', value: '月' },\r\n//     { type: 'day', value: '13' },\r\n//     { type: 'literal', value: '日' },\r\n//     { type: 'weekday', value: '星期三' },\r\n//     { type: 'literal', value: ' ' },\r\n//     { type: 'dayPeriod', value: '上午' },\r\n//     { type: 'hour', value: '1' },\r\n//     { type: 'literal', value: ':' },\r\n//     { type: 'minute', value: '00' },\r\n//     { type: 'literal', value: ':' },\r\n//     { type: 'second', value: '00' }\r\n// ]</pre>\n<p>随后，你就可以自己解析这个数组来构造出你想要的时间格式了。最后，我们还可以使用 <code>Intl.RelativeTimeFormat</code> 来格式化相对日期。当然我们不会在这里详细讲解这个 API，你可以参考 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat\" rel=\"noopener\">MDN 文档</a>。直接来看一个简单例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getRelativeTime = (num, unit, locale) =&gt; {\r\n    return new Intl.RelativeTimeFormat(locale, { numeric: 'auto' }).format(num, unit)\r\n}\r\n\r\ngetRelativeTime(-3, 'day', 'en-US') // 3 days ago\r\ngetRelativeTime(-1, 'day', 'zh-CN') // 昨天\r\ngetRelativeTime(0, 'second', 'zh-CN') // 现在\r\ngetRelativeTime(3, 'hour', 'ja') // 3 時間後</pre>\n<blockquote><p><code>Intl.RelativeTimeFormat</code> 是一个相对较晚进入标准的对象，因此浏览器支持程度较差，可能需要使用 <a href=\"https://formatjs.io/docs/polyfills/intl-relativetimeformat\" rel=\"noopener\">Polyfill</a>。不过目前（2021.10）主流浏览器的最新版本均已支持此 API。</p></blockquote>\n<h1>未来</h1>\n<p>我希望这篇文章时区转换的部分可以很快过时——这并非无稽之谈，目前（2021.10）TC39 的 <a href=\"https://github.com/tc39/proposal-temporal\" rel=\"noopener\"><code>Temporal</code> 提案</a>已经进入 Stage 3 了。<strong><code>Temporal</code> 提案定义了一个新的、时区友好的 <code>Temporal</code> 命名空间，并期望在不久后就能进入标准并最终应用于生产环境。</strong><code>Temporal</code> 定义了完整的时区、时间段、日历规则的处理，且拥有简单明了的 API。那时候，JavaScript 的时区处理就不会再如此痛苦了。由于目前 <code>Temporal</code> 提案还未进入标准，API 暂未稳定，我们无法将其用于生产环境，但我们可以来看一个简单的例子感受一下这个 API 的强大。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const zonedDateTime = Temporal.ZonedDateTime.from({\r\n  timeZone: 'America/Los_Angeles',\r\n  year: 1995,\r\n  month: 12,\r\n  day: 7,\r\n  hour: 3,\r\n  minute: 24,\r\n  second: 30,\r\n  millisecond: 0,\r\n  microsecond: 3,\r\n  nanosecond: 500,\r\n  calendar: 'iso8601'\r\n}) // 1995-12-07T03:24:30.0000035-08:00[America/Los_Angeles]</pre>\n<p>如果你希望立刻开始使用 <code>Temporal</code>，现在已有 Polyfill 可用。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"js-temporal\" data-mdxgithubp=\"temporal-polyfill\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/js-temporal/temporal-polyfill\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>不过，时区问题不会消失，各地区的习惯也很难融合到一起。时间的国际化处理是<a href=\"https://yourcalendricalfallacyis.com/\" rel=\"noopener\">极其复杂</a>的，前端中的时间国际化仍然值得我们认真关注。</p>\n","link":"https://flyhigher.top/develop/2482.html"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 12:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 4分8秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量...</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板...）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<p>请前往 <a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。macOS 系统代理的行为和 Linux...</p>\n<p>请前往 <a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人...</p>\n<p>请前往 <a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。 题图来自 USTC Hackergame 2019「Happy LUG」</p>\n<p>请前往 <a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<p> 周六不放假休息，还在这加班搞 CTF？ 10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 USTC Hackergame 2019），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<p>请前往 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<p>之前我在「天下武功，唯快不破 —— 我是这样优化博客的」一文中提到「对于大部分浏览器来说，确保 JS 异步加载和执行的做法其实是在操作 DOM 动态插入 &lt;script async&gt;」，但是并没有给出详细原因。这一次我以 Google Analytics 的统...</p>\n<p>请前往 <a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"再快一点，再快一点 —— 优化博客白屏时间的实践","date":"2020-10-03 08:40:00","description":"\n<p>两个多月以前，我写了一篇文章 介绍我是如何优化我的博客的，但是我对于博客的白屏时间仍然不满意。过去一个月我在博客上进行了一系列优化实践，终于成功将博客的白屏时间减少了将近 50%，这篇文章就来记录优化的过程和方案。确定和分析白屏时间Fi...</p>\n<p>请前往 <a href=\"https://blog.skk.moe/post/improve-fcp-for-my-blog/\">https://blog.skk.moe/post/improve-fcp-for-my-blog/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/improve-fcp-for-my-blog/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"\n<p>WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将其表述为 \"An API for accessing Public Key Credentials\"，即“一个用于访问公钥凭证的 API”。WebAuthn 很强大，强大到被认为是 Web 身份认证的未来（当然，也很复杂）。你有想过通过指纹或者面部识别来登录网站吗？WebAuthn 就能在保证安全和隐私的情况下让这样的想法成为现实。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\" alt=\"通过 WebAuthn 调起 Windows Hello 登录网站\" width=\"1912\" height=\"966\" class=\"aligncenter size-full wp-image-2215\"></a>\n<p>你可以在<a href=\"https://webauthn.io/\" rel=\"noopener\">这个网站</a>自行体验 WebAuthn。或者，如果你有一个使用 WordPress 的站点，可以尝试一下 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WP-WebAuthn</a> 这款插件，它可以为你的站点启用 WebAuthn 登录。这是我为了写这篇文章而练手开发的插件，本文中的部分示例代码也来自这款插件。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"wp-webauthn\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/wp-webauthn\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>WebAuthn Level 1 标准已在 2019 年 3 月成为 W3C 推荐标准，而 Level 2 标准目前也已进入编辑草案阶段，但互联网上有关它的中文资料却仍然很少，国内也鲜有网站支持这一新标准。于是，在抱着各种英文资料和标准啃了几天以后，我折腾出了这篇文章。</p>\n<p>在这篇文章里，我将会从最基本的概念开始，逐渐深入 WebAuthn，直到解码公钥等深层细节。这可能是你能找到的有关 WebAuthn 最详细最基础的中文文章，也很可能是最长的。在开始之前，<strong>我强烈建议你打开菜单中的文章目录浏览一遍，以对这篇文章涉及的内容有所了解。</strong>如果你只是想了解如何简单地在你的项目中添加对 WebAuthn 的支持，那么“<a href=\"https://flyhigher.top/#webauthn-overview\">浅谈 WebAuthn</a>”部分就是你要找的；如果你想了解更多关于 WebAuthn 的底层细节，那么你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分。</p>\n<p>由于在本文写作时 WebAuthn Level 2 规范尚未定稿，<strong>这篇文章我们将只专注于 Level 1 规范。</strong></p>\n<p>这篇文章最后更新于 2020.9 ，在你读到这篇文章时，部分事实可能已经发生改变，请注意判断。</p>\n<p><strong>更新日志：</strong></p>\n<ul>\n<li>2021.1.16 添加 Chrome 开发工具信息</li>\n<li>2020.9.17 更新 iOS/iPad OS 兼容性信息</li>\n<li>2020.5.20 添加部分无用户名认证的平台兼容性内容</li>\n<li>2020.5.15 添加部分 <code>extensions</code> 相关内容与链接；添加全局凭证 ID 唯一内容；添加凭证 ID 查找相关内容；添加“从 U2F 认证迁移”一节</li>\n<li>2020.4.13 更新与修正 <code>userVerification</code> 相关内容；添加部分 Firefox 相关内容</li>\n<li>2020.3.23 文章发布</li>\n</ul>\n<p>那么让我们开始吧。<span></span></p>\n<h1>浅谈 WebAuthn</h1>\n<p>在这个部分里，我们将会从基础概念开始，了解有关 WebAuthn 和密码学的一些基础知识，并最终使用第三方库实现基础的 WebAuthn 认证。如果你已经对这些内容有所了解了，可以跳到“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”继续阅读。</p>\n<h2>为什么使用 WebAuthn</h2>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\" alt=\"钓鱼邮件\" width=\"709\" height=\"693\" class=\"aligncenter size-full wp-image-2162\"></a>\n<p>相信你一定收到过类似的邮件吧？只要你点进那个最显眼的链接，你就会进入一个设置好的圈套——钓鱼网站。如果你一时糊涂在这类网站上填写了你的账号和密码，bingo，你的账号就不再是你的账号了。</p>\n<p>不过，就算你警惕心再强，也无法避免密码泄露事件。Twitter, Facebook 等都爆出过明文密码泄露事件，证明再大的公司或组织也无法避免密码泄露问题。雪上加霜的是，很大一部分用户都非常喜欢使用重复密码，这就导致一次密码泄露会牵连很多网站，用户的账户安全性完全无法得到保证。</p>\n<p>那么，有什么办法解决这些问题吗？<strong>彻底解决的方法只有一个，那就是抛弃密码。</strong>可是没有密码还怎么验证用户身份呢？这就是 WebAuthn 的用武之地了。</p>\n<p><del>没有密码的好时代，来临力！</del></p>\n<h2>什么是 WebAuthn</h2>\n<p>那么到底什么是 WebAuthn 呢？如开头所说，WebAuthn 是“一个用于访问公钥凭证的 API”，网站可以通过这个 API 进行一些高安全性的身份验证。WebAuthn 一个最常见的应用就是用于网站登录时的 2FA（双重因素验证）甚至是无密码登录。通过网页调用 WebAuthn，在不同平台下，<strong>我们可以实现通过 USB Key、指纹、面部甚至虹膜扫描来认证身份，同时确保安全和隐私。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\" alt=\"WebAuthn 可使用的各种身份认证方式\" width=\"1294\" height=\"566\" class=\"aligncenter size-full wp-image-2213\"></a>\n<p>WebAuthn 标准是 FIDO2 标准的一部分，而 FIDO2 则是由 FIDO 联盟和 W3C 共同推出的 U2F（现称作 FIDO1）的后继标准，旨在增强网络认证的安全性。</p>\n<blockquote><p>你可能了解过 U2F，那么 U2F 和 FIDO2 的区别在哪里呢？从名字上可以看出，U2F，即“通用第二因素协议”，是专注于作为密码后的第二道屏障的，而 FIDO2 增加了单因素认证功能，这意味着使用 FIDO2 可以完全替代密码，真正实现无密码登录。</p></blockquote>\n<p>FIDO2 标准主要包括四个部分，其一是用于网站和访客设备交互的 WebAuthn，而 Client to Authenticator Protocol 2（CTAP2，客户端-认证器协议）作为 WebAuthn 的补充，则是用于访客的设备和认证器交互的协议。标准的其他两个部分则是 U2F 和 UAF 规范。在这篇文章中，我们只关心 WebAuthn，不会涉及 CTAP, U2F 和 UAF 的相关知识。如果你对这段话中的一些概念不了解，不要紧张，接下来我们就来谈谈 WebAuthn 中一些常用的术语和概念。</p>\n<blockquote><p>WebAuthn 只能在安全上下文中使用，也就是说，页面需要使用 HTTPS 协议或是处于 <code>localhost</code> 中。</p></blockquote>\n<h2>常用术语和概念</h2>\n<p>WebAuthn 中有许多不常碰到的术语，不过我只会在这里介绍一些常用的术语和概念——如果你只是希望做出一个简单的实现，那么了解这一段中的一些概念就足够了。同时，由于我实在没能找到一部分术语的通用翻译，有一些术语我按着自己的理解尽可能地翻译了，有任何问题请告诉我。</p>\n<p>在一个完整的 WebAuthn 认证流程中，通常有这么几个角色：</p>\n<ul>\n<li>Relying Party 依赖方 (RP) ：指服务提供方，即网站</li>\n<li>User 用户：正准备登录的你</li>\n<li>Authenticator 认证器：通常指 USB Key 或是设备内置的指纹扫描器、虹膜扫描器、面部识别装置等，正是它们在使用流程中代替了密码甚至是用户名</li>\n<li>User Agent 用户代理：通常指浏览器或系统，负责与认证器交互</li>\n</ul>\n<p>认证过程通常分为两种：</p>\n<ul>\n<li>Registration Ceremony 注册仪式：用户向账户上添加认证器</li>\n<li>Authentication Ceremony 验证仪式：用户通过已注册的认证器验证身份</li>\n</ul>\n<p>同时，认证过程中还会产生这些内容：</p>\n<ul>\n<li>Challenge 挑战：通常是一串随机字符串</li>\n<li>Public Key Credential 公钥凭证：由认证器产生的凭证，在技术上代替了密码</li>\n<li>Attestation 证明：注册时认证器产生的验证数据</li>\n<li>Assertion 断言：验证时认证器产生的验证数据</li>\n</ul>\n<blockquote><p><strong>请注意区分证明 (Attestation) 和断言 (Assertion)</strong>，特别是在这两个单词有些相似的情况下。在 WebAuthn 中，它们是不同过程中的类似概念，但并不相同。</p></blockquote>\n<p>如果你对于这些内容不是很理解，没有关系，我们会在“<a href=\"https://flyhigher.top/#how-to-webauthn\">使用流程</a>”一节中将这些概念放到实际情况中解释，你只要先区分这些概念即可。</p>\n<h2>安全性的基础</h2>\n<p>WebAuthn 为什么安全？和 HTTPS 一样，WebAuthn 使用非对称加密的思路来保证安全性，但侧重点又有所不同。要理解 WebAuthn 的认证流程，我们必须对非对称加密有所了解。如果你对非对称加密比较熟悉了，就直接跳到下一段吧。</p>\n<p>WebAuthn 的核心在于“认证”，即保证产生了凭证的认证器是用户的认证器，而不是第三方在伪造凭证。但为什么要使用非对称加密呢？我们可以先来看看对称加密。</p>\n<p>让我们假设小明和小红相互写信，见不到对方。这天小红突然想，给自己写信的人是不是真的小明呢？于是小红要求对方向小红证明自己是小明。怎么证明呢？他们商量出来这么一套方案：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明和小红商量一个统一的密码和密钥</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明用提前和小红商量好的密码和密钥加密文本后发回给小红</li>\n<li>小红使用相同的密码和密钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和密钥</li>\n</ol>\n<blockquote><p>在密码学中，我们通常把“加密算法”称为密码 (code)，和通常登录时用的密码 (password) 并非同一个概念。</p></blockquote>\n<p>在这种情况下，<strong>只要密钥不泄露</strong>，即拥有正确密钥的只有小明和小红，那么小红就能确定对方一定是小明。但这样的问题也很明显，如果小明和小红不能见面，那么他们就必须先以明文交换密码——<strong>在这个过程中一旦有人窃取到了密码，这个认证就无效了。</strong></p>\n<p>这时我们就需要使用<strong>非对称加密</strong>来拯救破碎的信任了。非对称加密的基础是一对密钥，也就是公钥和私钥，它们是互相关联但（几乎）无法互相推导的。在非对称加密的过程中，选择相同的密码后，使用私钥加密明文得到的密文只能由对应的公钥解密，无法使用私钥解密，同时这个过程反过来也是成立的。</p>\n<blockquote><p>本文的核心并不是非对称加密算法，因此不会详述非对称加密在数学上的证明，若有兴趣可以自行了解。</p></blockquote>\n<p>这就完美解决密钥泄露的问题了。让我们回过头来看之前的例子。现在小明和小红决定使用非对称加密来证明身份，过程如下：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明提前生成一对公私钥，将公钥发送给小红，私钥自己保管，同时商量好统一的密码</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明使用商量好的密码和自己的私钥加密文本，发送给小红</li>\n<li>小红使用相同的密码和小明的公钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和私钥</li>\n</ol>\n<p>在这种情况下，<strong>只要私钥不泄露</strong>，那么小红解密得到的文本和之前发送的一致，那么就可以证明收到的密文一定是由小明加密后发送过来的。而在整个过程中，私钥都没有离开过小明，更没有经过传输，也就几乎没有泄露的可能了。这时，小红终于可以确定对面和她通信的人的确是小明了。</p>\n<p>题外话：HTTPS 虽然也应用了非对称加密，但 HTTPS 更侧重于“加密”而非“认证”，因此思路上会有些许差异。要了解关于 HTTPS 和非对称加密的更多信息，你可以阅读我之前写的这篇文章：</p>\n<p></p>\n<div class=\"mdx-post-cot\" data-mdxposturl=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdx-post-wait-out-c2\"><div class=\"mdx-post-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<span></span>\n<h2>使用流程</h2>\n<p>了解了非对称加密，我们就可以来看看 WebAuthn 的认证流程了。</p>\n<p>和普通的密码一样，<strong>使用 WebAuthn 分为两个部分，注册和验证。</strong>注册仪式会在依赖方中将认证器的一些信息和用户建立关联；而验证仪式则是验证这些信息以登确保是用户本人在登录。根据上一节的思路，我们可以知道，注册仪式就是认证器生成一对公私钥，然后将公钥交给依赖方；而验证仪式是依赖方发送给认证器一段文本，要求认证器用自己的私钥加密后发回以验证。</p>\n<p>在实际情况中，WebAuthn 是基于<strong>挑战-应答模型</strong>工作的。要更好地理解，我们直接来看具体流程。先来看看注册的流程。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\" alt=\"WebAuthn 注册流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2224\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的注册请求</li>\n<li>依赖方向浏览器发送挑战、依赖方信息和用户信息</li>\n<li>浏览器向认证器发送挑战、依赖方信息、用户信息和客户端信息以请求创建公钥凭证</li>\n<li>认证器请求用户动作，随后创建一对公私钥，并使用私钥签名挑战（即证明），和公钥一起交给浏览器</li>\n<li>浏览器将签名后的挑战和公钥发送给依赖方</li>\n<li>依赖方用公钥验证挑战是否与发送的一致，如果成功则将公钥与用户绑定，注册完成</li>\n</ol>\n<p>我也做了一个交互式的 Demo，你可以对照流程来更好地理解。</p>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\">开始注册</button> <span></span></p>\n<div></div>\n<blockquote><p>注意，这个 Demo 和下方的 Demo 都只是一个本地模拟的简单示例，没有任何数据会被上传，当然也不会对数据进行验证。</p></blockquote>\n<p>而之后的验证流程如下：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\" alt=\"WebAuthn 验证流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2226\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的验证请求</li>\n<li>依赖方向浏览器发送挑战</li>\n<li>浏览器向认证器发送挑战、依赖方信息和客户端信息以请求获取公钥凭证</li>\n<li>认证器请求用户动作，随后通过依赖方信息找到对应私钥，并使用私钥签名挑战（即断言），交给浏览器</li>\n<li>浏览器将签名后的挑战发送给依赖方</li>\n<li>依赖方用之前存储的公钥验证挑战是否与发送的一致，一致则验证成功</li>\n</ol>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\" disabled>开始验证</button> <span>在上方注册后才能验证</span></p>\n<div></div>\n<p>可以看到，WebAuthn 不仅在理论上是安全的，同时<strong>在整个过程中并没有隐私数据被传输</strong>——用户信息实际上只包含用户名和用户 ID。因此我们完全可以说 WebAuthn 是安全且私密的。</p>\n<blockquote><p>为了避免用户在不同依赖方之间被追踪，认证器通常会为每个依赖方和用户的组合都创建一对公私钥。不过，由于认证器的存储空间有限，认证器通常不会存储每一个私钥，而是会通过各类信息和烧录在认证器内的主密钥“算”出对应的私钥以实现无限对公私钥。具体算法根据不同厂商会有所不同。对于 Yubikey，你可以在<a href=\"https://developers.yubico.com/U2F/Protocol_details/Key_generation.html\">这里</a>了解更多。</p></blockquote>\n<blockquote><p>如果依赖方需要，用户同意后，发送给依赖方的公钥凭证中可以包含用于辨认认证器型号的信息，不过这对隐私的影响微乎其微。</p></blockquote>\n<h2>浏览器接口</h2>\n<p>要使用 WebAuthn，我们必须要依靠浏览器作为媒介和验证器进行交互，而这就需要浏览器对于 WebAuthn 的支持了。绝大多数新版本的现代浏览器都为 WebAuthn 提供了统一的接口，而在这一段中我们会了解如何使用相关的接口。但是在开始之前，我们可以先来看看浏览器的支持程度（2020.9）。</p>\n<div class=\"mdui-table-fluid\"><table class=\"mdui-table\">\n<thead><tr>\n<th>浏览器</th>\n<th>支持情况</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>桌面端 Chrome</td>\n<td>67+</td>\n</tr>\n<tr>\n<td>移动端 Chrome</td>\n<td>67+<sup>[1]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Firefox</td>\n<td>60+</td>\n</tr>\n<tr>\n<td>移动端 Firefox</td>\n<td>不支持<sup>[2]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Edge</td>\n<td>18+</td>\n</tr>\n<tr>\n<td>移动端 Edge</td>\n<td>不支持<sup>[3]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Safari</td>\n<td>13+</td>\n</tr>\n<tr>\n<td>移动端 Safari</td>\n<td>13.3+<sup>[4]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Opera</td>\n<td>54+</td>\n</tr>\n<tr>\n<td>移动端 Opera</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table></div>\n<p><sup>[1]</sup> 受平台限制，Chrome 在 iOS 平台上不支持 WebAuthn，在 Android 平台上支持大部分 WebAuthn 功能，但仍不支持部分特性（如 <code>userVerification</code>）。<br><sup>[2]</sup> 移动端 Firefox 80 以下的版本支持 WebAuthn 但似乎会忽略 <code>authenticatorAttachment</code> 等一部分参数，同时移动端 Firefox Beta 80 以下的版本支持 WebAuthn 但无法成功调用。自 80 版本起移动端 Firefox 暂时取消了对 WebAuthn 的支持（可能是 Bug）。<br><sup>[3]</sup> 移动端 Edge 似乎支持 WebAuthn 但无法成功调用。<br><sup>[4]</sup> Safari iOS/iPad OS 13 仅支持外部认证器，无法调用 Touch ID 或 Face ID；自 iOS/iPad OS 14 起 Safari 已支持全功能 WebAuthn，可以调用 Touch ID/Face ID</p>\n<p>当然，一众国产浏览器，包括 Samsung Browser 和 Yandex Browser，目前都不支持 WebAuthn。此外，由于 WebAuthn 涉及外部验证器和 TPM 可信平台模块等，用户的操作系统也会对 WebAuthn 的可用性造成影响。以下是一些需要注意的信息：</p>\n<ul>\n<li>Windows 10 1903 以下版本仅 Edge 能提供完整支持，其他浏览器只能使用 USB Key 等外部认证器；1903+ 中所有浏览器都可以通过 Windows Hello 带来完整的 WebAuthn 支持</li>\n<li>Android 需要安装并开启 Google 服务</li>\n<li>iOS/iPad OS 13.3 以下的版本不支持 WebAuthn，iOS/iPad OS 14 以下的版本支持有限（参考上文），iOS/iPad OS 14 开始 Safari 已支持全功能 WebAuthn（功能完整度甚至超过了 Android）</li>\n</ul>\n<p>可以看出，WebAuthn 的发展之路仍然很漫长，但好在桌面端对它的支持已经比较完善了，在一些情况下我们完全有理由使用它。</p>\n<hr>\n<p>来看看浏览器提供了怎么样的接口吧。要使用 WebAuthn，我们可以使用 <code>navigator.credentials.create()</code> 请求认证器生成公钥凭证和 <code>navigator.credentials.get()</code> 请求获取公钥凭证。</p>\n<blockquote><p>你或许已经对 Credential Management API 有所了解了。通过这些 API，我们还可以实现一些有趣的特性，不过这值得另开一篇文章来讲了。</p></blockquote>\n<p>对于一个基础的实现，<code>navigator.credentials.create()</code> 需要传入的参数如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        challenge,\r\n        rp: {\r\n            id,\r\n            name\r\n        },\r\n        user: {\r\n            id,\r\n            name,\r\n            displayName\r\n        },\r\n        pubKeyCredParams: [\r\n            {\r\n                type: \"public-key\",\r\n                alg\r\n            }\r\n        ],\r\n        authenticatorSelection: {\r\n            authenticatorAttachment,\r\n            userVerification\r\n        },\r\n        excludeCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>在 <code>navigator.credentials.create()</code> 方法中，我们必须传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值。这指明了我们需要创建公钥凭证，而非普通的密码凭证。然后，在 <code>publicKey</code> 对象中设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rp: Object</code>：依赖方信息，其中有一项为必须：\n<ul>\n<li>\n<code>rp.id: String</code>：（可选）依赖方 ID，必须为当前域名或为当前域名的子集的域名（不是子域名）。如域名为 <code>test.123.example.com</code>，则依赖方 ID 可以是 <code>test.123.example.com</code>, <code>123.example.com</code> 或 <code>example.com</code>。不指定则默认使用当前域名</li>\n<li>\n<code>rp.name: String</code>：依赖方名称，用于方便用户辨认</li>\n</ul>\n</li>\n<li>\n<code>user: Object</code>：用户信息，其中有三项为必须：\n<ul>\n<li>\n<code>user.id: Uint8Array</code>：转换为 <code>Uint8Array</code> 的字符串。<strong>出于安全考量，这应尽可能不与任何用户信息相关联，如不要包含用户名、用户邮箱等</strong>\n</li>\n<li>\n<code>user.name: String</code>：登录用户名</li>\n<li>\n<code>user.dispalyName: String</code>：用于显示的用户名称，显示与否的具体行为取决于浏览器</li>\n</ul>\n</li>\n<li>\n<code>pubKeyCredParams: Array</code>：一个算法列表，指明依赖方接受哪些签名算法。列表的每一项都是一个对象，拥有两个属性：\n<ul>\n<li>\n<code>pubKeyCredParams[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>pubKeyCredParams[].alg: Number</code>：一个负整数，用于标明算法。具体算法对应的数字可以在 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\">COSE</a> 找到</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection: Object</code>：（可选）用于过滤正确的认证器，这里介绍常用的一个参数：\n<ul>\n<li>\n<code>authenticatorSelection.authenticatorAttachment: String</code>：（可选）指定要求的认证器类型。如果没有满足要求的认证器，认证可能会失败。该参数可以为 <code>null</code>（表示接受所有类型的认证器）或是以下两个值之一：\n<ul>\n<li>\n<code>platform</code>：表示仅接受平台内置的、无法移除的认证器，如手机的指纹识别设备</li>\n<li>\n<code>cross-platform</code>：表示仅接受外部认证器，如 USB Key</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection.userVerification: String</code>：（可选）指定认证器是否需要验证“用户为本人 (User Verified, UV)”，否则只须“用户在场 (User Present, UP)”。具体验证过程取决于认证器（不同认证器的认证方法不同，也有认证器不支持用户验证），而对验证结果的处理情况则取决于依赖方。该参数可以为以下三个值之一：\n<ul>\n<li>\n<code>required</code>：依赖方要求用户验证</li>\n<li>\n<code>preferred</code>：（默认）依赖方希望有用户验证，但也接受用户在场的结果</li>\n<li>\n<code>discouraged</code>：依赖方不关心用户验证。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>excludeCredentials: Array</code>：（可选）用于标识要排除的凭证，可以避免同一个用户多次注册同一个认证器。如果用户试图注册相同的认证器，用户代理会抛出 <code>InvalidStateError</code> 错误。数组中的每一项都是一个公钥凭证对象，包含以下属性：\n<ul>\n<li>\n<code>excludeCredentials[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>excludeCredentials[].id: Uint8Array</code>：要排除的凭证 ID</li>\n<li>\n<code>excludeCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，超时后将强制终止 <code>create()</code> 并抛出错误。若不设置，将使用用户代理的默认值；若太大或太小，则使用最接近的用户代理默认值范围中的值。推荐值为 5000-120000</li>\n</ul>\n<blockquote><p>对于 <code>pubKeyCredParams</code>，通常我们只需添加 ES256 (alg: -7) 算法即可兼容大部分外部认证器，此外，再添加 RS256 (alg: -257) 算法即可兼容大部分平台内置认证器（如 Windows Hello）。当然，前端添加算法之后，后端也需要相应的算法支持。</p></blockquote>\n<blockquote><p>对于 <code>userVerification</code>，由于默认值 \"preferred\" 并不能很好地被所有设备支持，因此无论在 <code>create()</code> 中还是 <code>get()</code> 中不指定该参数都会在 Chrome 中触发一条警告。具体请参阅<a href=\"https://chromium.googlesource.com/chromium/src/+/master/content/browser/webauth/uv_preferred.md\">这个页面</a>。</p></blockquote>\n<p>调用 <code>create()</code> 之后，我们就可以拿到一个 <code>Promise</code>，并可以在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>create()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAttestationResponse {\r\n        attestationObject: ArrayBuffer(390) {},\r\n        clientDataJSON: ArrayBuffer(121) {}\r\n    },\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\",\r\n    type: \"public-key\"\r\n}</pre>\n<p>其中有：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 \"public-key\"</li>\n<li>\n<code>response: Object</code>：<code>AuthenticatorAttestationResponse</code> 对象，是 <code>PublicKeyCredential</code> 的主要部分，包含以下两个内容：\n<ul>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n<li>\n<code>response.attestationObject: ArrayBuffer</code>：CBOR 编码的认证器数据，包含凭证公钥、凭证 ID、签名（如果有）、签名计数等信息</li>\n</ul>\n</li>\n</ul>\n<p>然后将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串，我们就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证与注册了。具体怎么操作，我们会在下文详细讨论。当然，别忘了 <code>catch()</code> 注册过程中抛出的任何错误。</p>\n<blockquote><p>你可能会认为在所有情况下，注册时认证器都会对挑战进行签名。实际上在大部分情况下（同时也是默认情况），<strong>注册时认证器并不会对挑战进行签名</strong>，<code>attestationObject</code> 并不会包含签名后的挑战。只有依赖方明确要求证明且用户同意（部分浏览器要求）后认证器才会对挑战进行签名（具体实现据情况会有所不同）。对此，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion#Attestation\">MDN 解释道</a>“大部分情况下，用户注册公钥时我们会使用「初次使用时信任模型」(TOFU) ，此时验证公钥是没有必要的。”要了解更多关于证明的内容，请参阅“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>而对于 <code>navigator.credentials.get()</code>，我们可以传入如下的参数：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.get({\r\n    publicKey: {\r\n        challenge,\r\n        rpId,\r\n        userVerification,\r\n        allowCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>和 <code>create()</code> 一样，对于 <code>get()</code> 我们需要传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值，指明我们需要获取的是公钥凭证而非普通的密码凭证。在 <code>publicKey</code> 对象中我们可以设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rpID: String</code>：（可选）依赖方 ID，需要和注册认证器时的一致。规则和上述的 <code>rp.id</code> 一致，不指定默认使用当前域名</li>\n<li>\n<code>userVerification: String</code>：和上文一样，只是需要注意它这次不在 <code>authenticatorSelection</code> 中了</li>\n<li>\n<code>allowCredentials: Array</code>：（可选）用于标识允许的凭证 ID，使用户代理找到正确的认证器。只有符合这个列表中凭证 ID 的凭证才能被成功返回。数组中的每一项都是对象，包含以下属性：\n<ul>\n<li>\n<code>allowCredentials[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>allowCredentials[].id: Uint8Array</code>：允许的凭证 ID</li>\n<li>\n<code>allowCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，和上面的一样，推荐值为 5000-120000</li>\n</ul>\n<p>嗯，要传入的参数少多了。之后，和 <code>create()</code> 一样，调用 <code>get()</code> 之后，我们就可以拿到一个 <code>Promise</code> 并在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>get()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAssertionResponse {\r\n        authenticatorData: ArrayBuffer(37) {},\r\n        signature: ArrayBuffer(256) {},\r\n        userHandle: ArrayBuffer(64) {},\r\n        clientDataJSON: ArrayBuffer(118) {}\r\n    }\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\"\r\n    type: \"public-key\"\r\n}</pre>\n<p>这里的东西就比 <code>create()</code> 时拿到的要多了。看看我们拿到了什么吧：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 \"public-key\"</li>\n<li>\n<code>response: Object</code>：对于验证流程，认证会返回 <code>AuthenticatorAssertionResponse</code> 而不是 <code>AuthenticatorAttestationResponse</code> 对象，这个对象包含以下 4 个属性：\n<ul>\n<li>\n<code>response.authenticatorData: ArrayBuffer</code>：认证器信息，包含认证状态、签名计数等</li>\n<li>\n<code>response.signature: ArrayBuffer</code>：被认证器签名的 <code>authenticatorData</code> + <code>clientDataHash</code>（<code>clientDataJSON</code> 的 SHA-256 hash）</li>\n<li>\n<code>response.userHandle: ArrayBuffer</code>：<code>create()</code> 创建凭证时的用户 ID <code>user.id</code>。许多 U2F 设备不支持这一特性，这一项将会是 <code>null</code>\n</li>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n</ul>\n</li>\n</ul>\n<p>同样地，我们将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串后就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证了。至于具体怎么做，别急，马上就来讲一讲。</p>\n<h2>简单实现</h2>\n<p>了这么多，我们终于可以实现一个简单的 WebAuthn 认证页面了。由于在实际操作中 WebAuthn 相关的数据解码和密码计算比较复杂，在服务器端我们可以使用第三方库来帮我们做这些脏活累活，我们只需专注于具体流程就可以了。</p>\n<p>要寻找可用的第三方库，你可以在 <a href=\"https://webauthn.io/\">webauthn.io</a> 上找到适用于各种语言的第三方库——除了 PHP（笑）。不过好在你可以在 GitHub 上找到几个不错的 PHP WebAuthn 库，比如 <a href=\"https://github.com/web-auth/webauthn-framework\">web-auth/webauthn-framework</a>。</p>\n<p>在我们的这个例子中，我们关心的主要是前端逻辑；而后端我们可以使用各类几乎已经做到开箱即用的第三方库，这样我们可以专注于流程而不必关心细节。当然如果你想了解后端的解码细节，可以阅读“<a href=\"https://flyhigher.top/#webauthn-decode\">手动解个码</a>”一节。</p>\n<hr>\n<p>让我们先从注册开始吧。现在，用户点击了注册认证器的按钮，一个请求被发送给服务器（也就是依赖方）。在最简单的情况中，依赖方需要将三个内容发送给浏览器：<strong>挑战、用户信息和用户已注册的凭证 ID 列表（即 <code>excludeCredentials</code>）</strong>。当然依赖方也可以自由选择发送更多信息，只要最终前端能构建合法的参数即可。</p>\n<p>挑战最终会被转换为 <code>Uint8Array</code>，即一组 0-255 的整数。如果使用 PHP，在后端我们可以这样生成 Base64 编码的挑战：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$challenge = \"\";\r\nfor($i = 0; $i \n<p>对于用户信息，我们需要登录名、显示名称和 ID 三项内容。我们可以从数据库中取出用户信息，也可以新建一份。需要注意的是，<strong>出于安全和隐私的考量，ID 不应该包含用户的任何信息，比如用户邮箱等。</strong>推荐的做法是和挑战一样，生成一个随机字符串/一组随机数，并将其于用户关联起来以供之后使用。</p>\n<p>发送已注册的凭证 ID 列表是为了防止用户重复注册同一个认证器。正确设置该列表后，如果用户试图注册同一个认证器，浏览器会中止流程并抛出 <code>InvalidStateError</code>。</p>\n<p>最后，别忘了将挑战等一些后续可能会用到的信息临时存储起来。Session 就是一个很好的选择。</p>\n<p>将所有信息发送到浏览器之后，我们应该可以构建出新建凭证所需的参数了。由于有多个参数需要以 <code>Uint8Array</code> 的形式传入，我们可以准备一个简单的工具函数帮我们将 Base64 的字符串转为 <code>Uint8Array</code>。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function str2ab(str){\r\n    return Uint8Array.from(window.atob(str), c=&gt;c.charCodeAt(0));\r\n}</pre>\n<p>除了 <code>challenge</code>, <code>rp</code>, <code>user</code> 和 <code>excludeCredentials</code> 几部分需要你根据具体情况设置外，上文提到的其他参数一般可以这么设置：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">publicKey: {\r\n    challenge, // 自行设置\r\n    rp, // 自行设置\r\n    user, // 自行设置\r\n    pubKeyCredParams: [\r\n        {\r\n            type: \"public-key\",\r\n            alg: -7 // ES256\r\n        },\r\n        {\r\n            type: \"public-key\",\r\n            alg: -257 // RS256\r\n        }\r\n    ],\r\n    authenticatorSelection: {\r\n        userVerification: \"discouraged\",\r\n        authenticatorAttachment: null // 除非用户指定，大部分情况下无需指定\r\n    },\r\n    excludeCredentials, // 自行设置\r\n    timeout: 60000\r\n}</pre>\n<p>然后就是传入 <code>navigator.credentials.create()</code>，拿到 <code>PublicKeyCredential</code>。如果一切顺利，接下来我们就需要考虑如何将返回的内容传回依赖方了。由于我们拿到的很多都是 <code>ArrayBuffer</code>，我们需要将其进行编码。再准备一个工具函数吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function array2b64String(a) {\r\n    return window.btoa(String.fromCharCode(...a));\r\n}</pre>\n<p>然后适当处理，我们就可以得到一个方便传输的 JSON 字符串了：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({publicKey}).then((credentialInfo) =&gt; {\r\n    const publicKeyCredential = {\r\n        id: credentialInfo.id,\r\n        type: credentialInfo.type,\r\n        rawId: array2b64String(new Uint8Array(credentialInfo.rawId)),\r\n        response: {\r\n            clientDataJSON: array2b64String(new Uint8Array(credentialInfo.response.clientDataJSON)),\r\n            attestationObject: array2b64String(new Uint8Array(credentialInfo.response.attestationObject))\r\n        }\r\n    };\r\n    return publicKeyCredential;\r\n}).then(JSON.stringify).then((authenticatorResponseJSON) =&gt; {\r\n    // 可以发送了\r\n}).catch((error) =&gt; {\r\n    console.warn(error); // 捕获错误\r\n})</pre>\n<p>依赖方收到数据以后，还需要做三件事：验证挑战、存储凭证 ID 和存储公钥。如果数据解码顺利，且收到的挑战和之前发送的一致，就可以认为注册成功，将凭证 ID 及公钥与用户关联起来。这一步有很多第三方库可以帮我们做，对于基础实现我们就不深入探究了。</p>\n<blockquote><p>由于不同厂商的认证器的实现方式不同，<strong>我们并不能保证凭证 ID 一定是全局唯一的</strong>，也就是说，凭证 ID 有可能碰撞——即使这些凭证实际上是不同的。依赖方在实现凭证 ID 的存储及查找时，需要注意和用户 ID 结合进行存储或查找，或是直接在注册认证器时在服务器端对比阻止相同的凭证 ID。</p></blockquote>\n<hr><p>接下来就可以进行验证了。某天，用户点击了验证按钮准备登录，于是浏览器发送了验证请求到依赖方，同时附上要登录的用户名。接下来依赖方至少需要发送两项内容给浏览器：<strong>挑战和用户已绑定的凭证 ID 列表（即 <code>allowCredentials</code>）。</strong></p>\n<p>之后前端的处理流程就和注册时基本一致了。只是需要注意验证流程中获取到的 <code>PublicKeyCredential</code> 的结构和注册时的稍有不同。</p>\n<p>当浏览器将数据传回后，依赖方需要做的事情就比之前要麻烦一些了。依赖方需要验证挑战，并用之前存储的公钥验证签名和签名计数。同样地，这一步有很多第三方库可以帮我们做。最后，如果验证全部通过，我们就可以允许用户登录了。</p>\n<p>到目前为止，我们已经实现了一个简单的 WebAuthn 验证服务。不过这只是一个最基础的实现，对于很多高安全要求的身份认证这是远远不够的。因此，我们需要摆脱对第三方库的依赖，深入了解 WebAuthn。你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分，不过对于基础的 WebAuthn 实现，我们的旅程就到这里了。</p>\n<h2>拓展阅读</h2>\n<p>如果你的目标只是快速了解如何开发 WebAuthn，那么你阅读到这里就可以了。同时，上一节例子中的部分代码来自于我为了这篇文章开发的 WordPress 插件 WP-WebAuthn，这个插件可以为你的 WordPress 启用 WebAuthn 无密码登录（并非二步验证），你可以查阅插件的 <a href=\"https://github.com/yrccondor/wp-webauthn\">GitHub 存储库</a>了解更多，也可以自己安装试一试。</p>\n<p>如果你正在使用 Chrome 开发，Chrome 87+ 版本添加了一个 WebAuthn 开发者面板，可以帮助你在没有任何实体验证器的情况下开发 WebAuthn 功能。你可以在 Google 的<a href=\"https://developers.google.com/web/tools/chrome-devtools/webauthn\">这篇文章</a>中了解更多。不够，如果你正在使用 Firefox，很遗憾目前我还没有找到对应的开发工具或是浏览器扩展可用。</p>\n<p>如果你希望了解更多关于非对称加密的数学证明，可以查阅阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">这篇文章</a>。</p>\n<p>如果你希望了解更多关于 Credential Management API 的信息，可以查阅<a href=\"https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe\">这篇文章</a>（英文）。</p>\n<p>如果你希望了解更多 WebAuthn 的细节，可以继续往下阅读。<span></span></p>\n<h1>深入了解 WebAuthn</h1>\n<p>如上文所说，如果摆脱对第三方库的依赖，或是要实现更安全的 WebAuthn，我们必须深入了解 WebAuthn。在这一部分中，我们会详细讨论上文没有提到的一些概念和参数，并了解 WebAuthn 中各类数据的结构以实现解码与验证。先来看一看一些进阶的选项吧。</p>\n<h2>进阶选项</h2>\n<p>没错，上文提到的传入 <code>navigator.credentials.create()</code> 和 <code>navigator.credentials.get()</code> 方法的参数其实只是所有参数的一部分。对于 <code>create()</code>，我们还可以配置这些可选内容（上文提及的已省略）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        rp: {\r\n            icon\r\n        },\r\n        user: {\r\n            icon\r\n        },\r\n        attestation,\r\n        authenticatorSelection: {\r\n            requireResidentKey\r\n        },\r\n        extensions\r\n    }\r\n})</pre>\n</pre>\n<ul>\n<li>\n<code>rp.icon: String</code> 和 <code>user.icon</code>：是的，你可以为依赖方和用户设置图标，可以使用 HTTPS URL 或 Base64，一般长度不能超过 128 字节，不过大部分浏览器不会显示图标，或是有非常小的图片体积限制，所以一般没有使用这一属性的必要</li>\n<li>\n<code>attestation: String</code>：表明依赖方是否需要证明。可选三个值：\n<ul>\n<li>\n<code>none</code>：（默认）不需要证明。如上文所述，依赖方不关心证明，因此认证器不会签名。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n<li>\n<code>indirect</code>：依赖方需要证明，但证明方式可由认证器选择。在支持匿名证明的认证器上，认证器会通过匿名证明的方式签名挑战，并向依赖方提供签名方式等信息</li>\n<li>\n<code>direct</code>：依赖方要求直接证明。此时认证器会使用烧录在认证器中的公钥进行签名，同时向依赖方提供签名方式等信息以供依赖方验证认证器是否可信。更多信息可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节</li>\n</ul>\n</li>\n<li>在 <code>authenticatorSelection</code> 中，我们还可以设置两个可选属性：\n<ul>\n<li>\n<code>authenticatorSelection.requireResidentKey: Boolean</code>：是否要求将私钥钥永久存储于认证器中。默认值为 <code>false</code>。对于 iOS/iPad OS 13，必须设置为 <code>false</code>，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n<li>\n<code>extensions: Object</code>：WebAuthn 扩展，可以提供规范之外的配置和响应。由于实际情况中很少会使用这一特性，我们不会在这篇文章中讨论它</li>\n\n<blockquote><p>将 <code>requireResidentKey</code> 设置为 <code>true</code> 可以实现无用户名的登录，即认证器同时替代了用户名和密码。需要注意的是，尽管大部分认证器可以实现无限对公私钥，<strong>但能永久存储的私钥数量是有限的</strong>（对于 Yubikey，这通常是 25），因此只应在真正需要的时候启用此特性。我们会在“<a href=\"https://flyhigher.top/#login-without-username\">无用户名登录</a>”一节中详细讨论原因。</p></blockquote>\n<blockquote><p><strong>如果你没有高安全需求（如银行交易等），请不要向认证器索取证明</strong>，即将 <code>attestation</code> 设置为 \"none\"。对于普通身份认证来说，要求证明不必要的，且会有浏览器提示打扰到用户。</p></blockquote>\n<blockquote><p>Android 暂时无法实施用户验证，进而会导致依赖方验证失败。你可以在<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=997538\">这里</a>追踪这个特性的实现情况。</p></blockquote>\n<blockquote>\n<p>对于 <code>extensions</code>，由于目前浏览器支持和应用范围有限，我们不会在这篇文章中涉及，不过你可以看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    uvm: true, // 要求认证器返回用户进行验证的方法\r\n    txAuthSimple: \"Please proceed\" // 在认证器上显示与交易有关的简短消息\r\n}</pre>\n<p>你可以在<a href=\"https://www.w3.org/2019/01/webauthn-extensions.html\">这个页面</a>了解更多关于 <code>extensions</code> 的信息。</p>\n</blockquote>\n<p>对于 <code>get()</code>，我们其实只有一个可选内容没讲了，即 <code>extensions</code>。和上文一样，我们不会在这篇文章中讨论它。</p>\n<p>就这些了！<span></span></p>\n<h2>手动解个码</h2>\n<p>是时候看看如何手动解码了。我们将会在这一节中讨论认证器返回的数据的结构以及如何正确地解码它们。</p>\n<p>首先我们来看看如何处理注册过程中认证器发回的数据。假设所有 <code>ArrayBuffer</code> 类型的值都被正确地以 Base64 编码，且后端已经将 JSON 的字符串解析为字典。先来复习一下，我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"ZRBkDBCEtq...9XY8atOcbg\",\r\n    type: \"public-key\",\r\n    rawId: \"ZRBkDBCEtq...9XY8atOcbg==\",\r\n    response: {\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...i5jcmVhdGUifQ==\",\r\n        attestationObject: \"o2NmbXRkbm9uZWd...xNHuAMzz2LxZA==\"\r\n    }\r\n}</pre>\n<p>这里的 <code>id</code> 就是凭证的 ID，如果验证正确，我们最终要将它存储起来并于用户关联。同时可以看到 Base64 编码后的 <code>rawId</code> 其实和 <code>id</code> 是一致的（不过 <code>id</code> 是 Base64URL 编码的）。而 <code>type</code> 则一定是 \"public-key\"。</p>\n<p>不过，我们主要关心的还是 <code>respose</code> 中的两项内容。首先是 <code>clientDataJSON</code>。它的处理比较简单，看名字就知道，它应该是一个 JSON 字符串。</p>\n<blockquote><p>小技巧：如果你看到一个 Base64 编码的字符串以 \"ey\" 开头，那么它大概率是一个 Base64 编码的 JSON。</p></blockquote>\n<p>将<code>clientDataJSON</code> Base64 解码再 JSON 解码之后我们就能得到一个字典：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"NI4i1vsNmP2KHcmyFnBCKRVQPfHgg34SsYZUOPZY2lM\",\r\n    extra_keys_may_be_added_here: \"do not compare clientDataJSON against a template. See https://goo.gl/yabPex\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>结构一目了然。在这里，我们需要验证三项内容：</p>\n<ul>\n<li>\n<code>challenge</code> 和之前发送的一致</li>\n<li>\n<code>origin</code> 为创建凭证的页面的源（协议+主机名+端口号，并非 URL）</li>\n<li>\n<code>type</code> 为 \"webauthn.create\"</li>\n</ul>\n<p>同时可以注意到有一个奇怪的 <code>extra_keys_may_be_added_here</code>。这其实是 Google 在 Chrome 中搞的一点小把戏，有一定概率会出现，提醒我们需要将 JSON 解析后再验证键值以防额外插入的键值影响验证。具体信息你可以访问那个 URL 看一看。</p>\n<p>对于 Firefox，我们会多得到两项 <code>clientExtensions</code> 和 <code>hashAlgorithm</code> ，分别指明了客户端扩展数据和签名算法。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"3-4\">{\r\n    challenge: \"dg6ost6ujhAA0g6WqLe-SOOH-tbhvjW9Sp90aPKlLJI\",\r\n    clientExtensions: {},\r\n    hashAlgorithm: \"SHA-256\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>由于本文不考虑扩展数据，因此我们可以不考虑 <code>clientExtensions</code>。同时由于目前规范中指定的签名算法只有 SHA-256 一种，因此现阶段我们也可以简单地忽略 <code>hashAlgorithm</code>。</p>\n<p><code>clientDataJSON</code> 很简单地就处理完了。接下来我们要来看看 <code>attestationObject</code>。先来看看 <code>attestationObject</code> 的结构图示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\" alt=\"attestationObject 的结构\" width=\"1056\" height=\"532\" class=\"aligncenter size-full wp-image-2245\"></a>\n<p><code>attestationObject</code> 是 CBOR 编码后再被 Base64 编码的，因此我们需要额外对其进行 CBOR 解码。</p>\n<blockquote><p>CBOR (Concise Binary Object Representation, 简明二进制对象表示) 是一种多应用于物联网领域的编码方式，你可以将它看作体积更小、更方便物联网传输的二进制 JSON。大部分语言都可以找到对应的 CBOR 解码库。</p></blockquote>\n<p>我们当然不会手解 CBOR，直接来看看解开之后的样子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"none\",\r\n    attStmt: {},\r\n    authData: [211, 217, 43, 24, 199, ..., 97, 238, 166, 67, 107]\r\n}</pre>\n<p>这些键值的含义如下：</p>\n<ul>\n<li>\n<code>fmt</code>：标明证明的格式。WebAuthn 预定义了几种格式，分别为：\n<ul>\n<li>\n<code>none</code>：没有证明</li>\n<li>\n<code>packed</code>：为 WebAuthn 优化的证明格式</li>\n<li>\n<code>android-safetynet</code>：Android 使用的格式</li>\n<li>\n<code>android-key</code>：又是 Android 使用的格式</li>\n<li>\n<code>fido-u2f</code>：FIDO U2F 认证器使用的格式</li>\n<li>\n<code>tpm</code>：TPM 可信平台模块使用的格式</li>\n</ul>\n</li>\n<li>\n<code>attStmt</code>：证明对象，具体格式根据 <code>fmt</code> 的不同会有所不同</li>\n<li>\n<code>authData</code>：包含公钥、签名计数等来自认证器的数据</li>\n</ul>\n<p>诶，例子里的 <code>attStmt</code> 怎么是空的？还记得之前说的吗？大部分情况下，<strong>如果依赖方不要求证明，那么认证器不会签名挑战</strong>，于是 <code>fmt</code> 会变为 \"none\"，<code>attstmt</code> 会为空。如果不是高安全要求，我们可以只对这一种情况做支持。</p>\n<blockquote><p>注意，部分情况下 Firefox 会在不要求证明（即 <code>attestation</code> 为 \"none\"）时会返回 <code>fmt</code> 为 \"packed\" 的证明。<strong>这是符合规范的。</strong>此时认证器会进行自证明，你可以视情况进行处理。具体可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>对于非 \"none\" 的 <code>fmt</code> 我们稍后再谈，现在我们先来看看 <code>authData</code>。来复习一下 <code>authData</code> 的结构：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\" alt=\"authData 的结构\" width=\"1056\" height=\"384\" class=\"aligncenter size-full wp-image-2240\"></a>\n<p>对于它的解码比较简单粗暴，我们要做的就是根据图示将它切开，然后适当地转换类型。其中各部分的含义如下：</p>\n<ul>\n<li>\n<code>rpIdHash</code>：如其名，SHA-256 的 <code>rpId</code>，长度 32 字节</li>\n<li>\n<code>flags</code>：标识认证状态，长度 1 字节。其中 8 位分别为：\n<ul>\n<li>\n<code>ED</code>：是否有扩展数据</li>\n<li>\n<code>AT</code>：是否包含 <code>attestedCredentialData</code>。通常注册认证器时会包含 <code>attestedCredentialData</code>，而验证时不包含</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>\n<code>UV</code>：用户是否已验证</li>\n<li>保留位</li>\n<li>\n<code>UP</code>：用户是否在场</li>\n</ul>\n</li>\n<li>\n<code>signCount</code>：签名计数，长度 4 字节</li>\n<li>\n<code>attestedCredentialData</code>：包含公钥等凭据数据，变长。其结构如下：\n<ul>\n<li>\n<code>aaguid</code>：认证器的 AAGUID (Authenticator Attestation GUID)，对于同一型号的认证器，它们的 AAGUID 是相同的</li>\n<li>\n<code>credentialIdLength</code>：标识 <code>credentialId</code> 的长度，长度 2 字节</li>\n<li>\n<code>credentialId</code>：凭证 ID，和 <code>rawId</code> 一致，长度由 <code>credentialIdLength</code> 定义</li>\n<li>\n<code>credentialPublicKey</code>：CBOR 编码的 COSE 格式的凭证公钥，变长</li>\n</ul>\n</li>\n<li>\n<code>extensions</code>：扩展数据，变长，本文不讨论</li>\n</ul>\n<blockquote><p>出于隐私考虑，如果不要求证明，认证器会以 0 填充 AAGUID。</p></blockquote>\n<p>如果你的后端在使用 Node.js，这里有个工具函数可以帮你完成这一步（不考虑 <code>extensions</code>）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function parseAuthData(buffer){\r\n    let rpIdHash = buffer.slice(0, 32);\r\n    buffer = buffer.slice(32);\r\n  \r\n    let flagsBuf = buffer.slice(0, 1);\r\n    buffer = buffer.slice(1);\r\n\r\n    let flagsInt = flagsBuf[0];\r\n    let flags = {\r\n        up: !!(flagsInt &amp; 0x01),\r\n        uv: !!(flagsInt &amp; 0x04),\r\n        at: !!(flagsInt &amp; 0x40),\r\n        ed: !!(flagsInt &amp; 0x80),\r\n        flagsInt\r\n    }\r\n\r\n    let counterBuf = buffer.slice(0, 4);\r\n    buffer = buffer.slice(4);\r\n  \r\n    let counter = counterBuf.readUInt32BE(0);\r\n\r\n    let aaguid = undefined;\r\n    let credID = undefined;\r\n    let COSEPublicKey = undefined;\r\n\r\n    if(flags.at) {\r\n        aaguid = buffer.slice(0, 16);\r\n        buffer = buffer.slice(16);\r\n\r\n        let credIDLenBuf = buffer.slice(0, 2);\r\n        buffer = buffer.slice(2);\r\n\r\n        let credIDLen = credIDLenBuf.readUInt16BE(0);\r\n        credID = buffer.slice(0, credIDLen);\r\n\r\n        buffer = buffer.slice(credIDLen);\r\n        COSEPublicKey = buffer;\r\n    }\r\n\r\n    return {rpIdHash, flagsBuf, flags, counter, counterBuf, aaguid, credID, COSEPublicKey}\r\n}</pre>\n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>解开后，依赖方至少需要做四件事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>存储签名计数</li>\n<li>存储公钥</li>\n</ol>\n<blockquote><p>签名计数不一定从 0 开始。</p></blockquote>\n<p>对于公钥，也就是 <code>credentialPublicKey</code>，我们需要多一次 CBOR 解码，然后就可以得到类似这样的公钥：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    kty: \"EC\",\r\n    alg: \"ECDSA_w_SHA256\",\r\n    crv: \"P-256\",\r\n    x: \"ZGQALNfqo0L7HFYQHFHCS/X5db49z0ePnuQEs3w3X8w=\",\r\n    y: \"6qYxhnjYuez/Q8N6vX7nIIGfxFWdZ25NzQfZYuYOalA=\"\r\n}</pre>\n<p>然后可以选择适当的方法将其存储起来，之后的步骤本文就不再赘述了。现在，将目光拉回来，让我们看看包含证明的 <code>attestationObject</code> 是怎么样的。我们来看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"packed\",\r\n    attStmt: {\r\n        alg: -7,\r\n        sig: [48, 70, 2, 33, 0, ..., 132, 78, 46, 100, 21],\r\n        x5c: [\r\n            [48, 130, 2, 189, 48, 130, 1, 165, 160, 3, ..., 177, 48, 125, 191, 145, 24, 225, 169, 41, 248]\r\n        ]\r\n    },\r\n    authData: [211, 217, 43, 24, 199, ..., 158, 54, 87, 126, 54]\r\n}</pre>\n<p>这里有一个使用 \"packed\" 格式的证明。此时，<code>attStmt</code> 中包含三个值：</p>\n<ul>\n<li>\n<code>alg</code>：签名算法</li>\n<li>\n<code>sig</code>：签名值</li>\n<li>\n<code>x5c</code>：X.509 编码的证书链</li>\n</ul>\n<p>我们不会在这一节中详述对签名的验证。要了解更多信息，你可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。现在，让我们来看看如何处理验证过程中认证器发回的数据。我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"hmqdxPLit9...BWeVxZqdvU\",\r\n    type: \"public-key\",\r\n    rawId: \"hmqdxPLit9V...BWeVxZqdvU=\",\r\n    response: {\r\n        authenticatorData: \"09krGMcWTf...UFAAAABA==\",\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...XRobi5nZXQifQ==\",\r\n        signature: \"UsXZV3pvT3np8btj6V0g...WBkaqyt88DrD40qh+A==\",\r\n        userHandle: \"MmYxNWYzZjQyZjM...Tg2ZDY4NzhlNw==\"\r\n    }\r\n}</pre>\n<p><code>id</code>, <code>rawId</code> 和 <code>type</code> 和之前一样，这里就不再赘述了。让我们来看看 <code>response</code>。首先是 <code>clientDataJSON</code>，和之前的解法一样，要验证的内容也一样，只是 <code>type</code> 从 \"webauthn.create\" 变成了 \"webauthn.get\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"bnkd2CmrEuvKnAFXs2QlC3SKlg4XFvGtP4HJL1yEWyU\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.get\"\r\n}</pre>\n<p>然后是 <code>userHandle</code>。前面讲过，这是认证器在创建凭证时的用户 ID。如果用户在使用 U2F 认证器，很可能这一项为空，所以大部分情况下我们不关心这一项。</p>\n<p>接着来看 <code>authenticatorData</code>。这其实就是之前的 <code>attestedCredentialData</code>，只是这次不包含公钥。以相同的方式切开数据，我们应该可以得到 <code>rpIdHash</code>, <code>flags</code>和 <code>signCount</code> 三项。此时，依赖方至少需要做这三样事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>验证签名计数大于之前存储的计数，并更新存储的计数</li>\n</ol>\n<blockquote><p>如果签名计数比之前的小，那么这个认证器很可能是伪造的，应该中止验证并返回验证失败。同时，签名计数不一定每次按 1 递增，通常只要计数比此前的大就认为计数检查通过。</p></blockquote>\n<p>最后，我们来看 <code>signature</code>，也就是签名。不过这个签名不是简单的对挑战的签名，具体算法如图所示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\" alt=\"签名过程\" width=\"1034\" height=\"587\" class=\"aligncenter size-full wp-image-2231\"></a>\n<p>计算签名时，认证器会将 <code>authenticatorData</code> 与 <code>clientDataHash</code>（也就是 <code>clientDataJSON</code> 的 SHA-256 Hash）拼接起来，并使用对应的私钥签名。依赖方应该使用对应的公钥将其解密，并验证内容是否是 <code>authenticatorData</code> 与 <code>clientDataHash</code> 的拼接。这部分的计算不在本文的讨论范围内。</p>\n<p>最后，如果全部验证通过，返回验证成功。<span></span></p>\n<h2>验证认证器</h2>\n<p>WebAuthn 已经很安全了，但有的时候我们还要让它更安全一点。比如，如果用户在使用伪造的或是自制的认证器，认证器的安全性就得不到保证。此时，依赖方就需要验证认证器是否是可信的认证器。</p>\n<blockquote><p>这一过程仅发生在注册认证器时。此时，如果认证器验证通过，就可以存储公钥，后续步骤和之前描述的一致。</p></blockquote>\n<blockquote><p>再次说明，如果不是对安全性有极高的要求，向认证器索取证明以验证认证器是否可信是没有必要的。此外，验证认证器需要依赖方自行维护可信认证器列表，大大增加了维护的复杂性。</p></blockquote>\n<p>在调用 <code>navigator.credentials.create()</code> 时，我们可以将 <code>attestation</code> 设置为非 \"none\" 来向认证器索取证明。除无证明外，WebAuthn 定义了四种证明方式：</p>\n<ul>\n<li>Basic Attestation (Basic) ：基础的证明方式，认证器会使用认证器私钥签名</li>\n<li>Self Attestation (Self) ：自证明，认证器会使用凭证私钥签名</li>\n<li>Attestation CA (AttCA) ：认证器会使用多个证明私钥之一签名</li>\n<li>Elliptic Curve based Direct Anonymous Attestation (ECDAA) ：通过 <a href=\"https://en.wikipedia.org/wiki/Direct_Anonymous_Attestation\">DAA</a> 实现的匿名证明</li>\n</ul>\n<blockquote><p>和验证过程一样，这里签名的目标是 <code>authenticatorData</code> 和 <code>clientDataHash</code> 的连接。</p></blockquote>\n<p>还记得 <code>create()</code> 时 <code>attestation</code> 可选的三个值吗？这个值会决定认证器最终使用哪种方式进行证明。复习一下：</p>\n<ul>\n<li>\n<code>none</code>：大部分情况下认证器会选择不进行证明，部分认证器会进行自证明。此时 AAGUID 会被 0 填充</li>\n<li>\n<code>indirect</code>：认证器会试图通过替换 AAGUID 和选择合适的证明方式来进行匿名证明，具体方式由认证器选择</li>\n<li>\n<code>direct</code>：认证器会提供最直接的证明信息</li>\n</ul>\n<p>注意，大部分情况下，当认证器需要向依赖方证明自己可信时需要提供认证器公钥，<strong>这会触发浏览器提示，只有用户同意后认证器才会进行证明，否则认证器将不提供证明。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\" alt=\"浏览器提示\" width=\"446\" height=\"283\" class=\"aligncenter size-full wp-image-2217\"></a>\n<blockquote><p>为什么浏览器会说“安全密钥的品牌和型号”？事实上，为了避免用户通过认证器证书被跨依赖方追踪，FIDO 要求使用相同认证器证书的认证器的数量不能少于 100,000。于是大部分认证器厂商会选择<strong>让同一型号的认证器共用同一份证书。</strong>因此，浏览器的会询问用户是否同意“查看安全密钥的品牌和型号”。</p></blockquote>\n<blockquote><p>Android Safety Net 不会向用户询问是否同意，而是会静默进行证明。</p></blockquote>\n<p>当证明不为空时，依赖方收到数据后根据 <code>attestationObject.fmt</code> 的不同，需要选择不同的验证方式来验证认证器的可信情况。出于篇幅原因，这里我们不会讨论每一种 <code>fmt</code> 的验证方式，更多信息你可以查阅 <a href=\"https://www.w3.org/TR/webauthn/#defined-attestation-formats\">W3C 文档</a>。</p>\n<p>当 <code>fmt</code> 为 <code>packed</code> 时，<code>attestationObject.attStmt</code> 可能会有三种格式：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">// 自证明\r\n{\r\n    alg, // 算法\r\n    sig // 签名\r\n}\r\n// 基础或证明 CA 证明\r\n{\r\n    alg,\r\n    sig,\r\n    x5c // X.509 证书链\r\n}\r\n// 椭圆曲线证明\r\n{\r\n    alg,\r\n    sig,\r\n    ecdaaKeyId // ECDAA-Issuer 公钥标识符\r\n}</pre>\n<p>此时，依赖方需要检查证书符合预期格式并检查证书是否在可信链上。首先，如果证明中既没有 <code>ecdaaKeyId</code> 也没有 <code>x5c</code>，就说明这个证明使用的是自证明，只需使用认证器提供的公钥验证即可；如果有 <code>x5c</code>，那么就需要验证 <code>x5c</code> 中的证书是否在可信链上。将 <code>x5c</code> 中的每个证书以 Base64 编码，按 64 个字符切开，并在头尾加上 <code>-----BEGIN CERTIFICATE-----</code> 和 <code>-----END CERTIFICATE-----</code>就能得到一个证书字符串了。之后，依赖方需要验证证书是否可信。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function base64ToPem(b64cert){\r\n    let pemcert = '';\r\n    for(let i = 0; i \n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>至于 <code>ecdaaKeyId</code>，由于目前应用较少，处理方法可能需要你另寻资料了。检查证书的具体步骤已经超出了本文的范围，具体可以查阅<a href=\"https://medium.com/@herrjemand/verifying-fido2-packed-attestation-a067a9b2facd\">这篇文章</a>（英文）。</p>\n<blockquote><p>你可以在 <a href=\"https://fidoalliance.org/metadata/\">FIDO Metadata Service</a> 找到各大厂商认证器的可信证书链。</p></blockquote>\n<p>当在 Android 上调起 WebAuthn 时，大部分情况下 <code>fmt</code> 将会为 <code>safety-net</code>。此时 <code>attestationObject.attStmt</code> 的结构会是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    ver: \"200616037\",\r\n    response: {\r\n        type: \"Buffer\",\r\n        data: [101, 121, 74, 104, 98, ..., 115, 104, 104, 82, 65]\r\n    }\r\n}</pre>\n<p>此时，<code>clientDataJSON</code> 中还会出现 <code>androidPackageName</code> 键，值是调起 WebAuthn 验证的应用的包名，如 Chrome 就是 \"com.android.chrome\"。</p>\n<p>在这个证明中，<code>data</code> 其实是一个 JWT 字符串，我们可以将它编码为字符串并将其按照 JWT 进行解码（别忘了验证 JWT 签名）。最终我们会得到一个类似这样的 Payload：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    nonce: \"0QAurN4F9wik6GEkblDJhGuf4kuaqZn5zaaxlvD1hlA=\",\r\n    timestampMs: 1584950686460,\r\n    apkPackageName: \"com.google.android.gms\",\r\n    apkDigestSha256: \"2BQHno+bmWWwdLUYylS8HLt5ESJzci3nt2uui71ojyE=\",\r\n    ctsProfileMatch: true,\r\n    apkCertificateDigestSha256: [\r\n        \"8P1sW0EPicslw7UzRsiXL64w+O50Ed+RBICtay2g24M=\"\r\n    ],\r\n    basicIntegrity: true,\r\n    evaluationType: \"BASIC\"\r\n}</pre>\n<p>其中包含了有关设备状态的一些信息。比如说，如果 <code>ctsProfileMatch</code> 为 <code>false</code>，那么该设备很有可能被 root 了。对于高安全要求的场景，我们可以视情况进行验证。</p>\n<p>同时我们可以在 JWT Header 中验证证明的有效性。我们应该能取得这样的 Header：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    alg: \"RS256\",\r\n    x5c: [\r\n        \"MIIFkzCCBHugAwIBAgIR...uvlyjOwAzXuMu7M+PWRc\",\r\n        \"MIIESjCCAzKgAwIBAgIN...UK4v4ZUN80atnZz1yg==\"\r\n    ]\r\n}</pre>\n<p>这里的结构就和上方的 <code>x5c</code> 验证类似了。具体步骤可以参考<a href=\"https://medium.com/@herrjemand/verifying-fido2-safetynet-attestation-bd261ce1978d\">这篇文章</a>（英文）。</p>\n<p>其他所有格式的验证方式也都可以在<a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">这篇文章</a>（英文）中找到。<span></span></p>\n<h2>无用户名登录</h2>\n<p>认证器已经代替了密码，可是这还不够！在进行第一因素认证（即使用 WebAuthn 登录）时，我们还是需要输入用户名，然后才能进行身份认证。懒惰是第一生产力，我们能不能不输入用户名就进行身份认证呢？实际上，大部分认证器都允许我们无用户名登录。<strong>而这一特性的核心就是 Resident Key 客户端密钥驻留。</strong></p>\n<p>你可以思考一下，为什么普通的 WebAuthn 为什么不能实现无用户名登录？事实上，大部分认证器为了实现无限对公私钥，会将私钥通过 Key Warp 等技术加密后包含在凭证 ID 中发送给依赖方，这样认证器本身就不用存储任何信息。不过，这就导致需要身份认证时，依赖方必须通过用户名找到对应的凭证 ID，将其发送给认证器以供其算出私钥。</p>\n<blockquote><p>Yubikey 实现了一个基于 HMAC 的算法，认证器可以在私钥不离开认证器的前提下（常规的 Key Warp 算法中实际上私钥离开了认证器）通过一些输入和凭证 ID 重新计算私钥，你可以阅读<a href=\"https://www.yubico.com/blog/yubicos-u2f-key-wrapping/\">这篇文章</a>了解更多。</p></blockquote>\n<blockquote><p>客户端通过凭证 ID 查找对应认证器的算法根据系统的不同是不同的。通常凭证 ID 中会包含认证器信息，因此系统可以通过凭证 ID 找到对应的认证器。</p></blockquote>\n<p>要避免输入用户名，我们可以要求认证器将私钥在自己的内存中也存储一份。这样，依赖方无需提供凭证 ID，认证器就可以通过依赖方 ID 找到所需的私钥并签名公钥。以下是具体流程：</p>\n<p>注册时：</p>\n<ol>\n<li>依赖方请求新建凭证，同时要求启用客户端密钥</li>\n<li>认证器生成一对公私钥，并将私钥存储在永久内存中且与依赖方 ID 及用户 ID 绑定，随后将公钥发送给依赖方以供存储</li>\n<li>依赖方将用户 ID 即公钥与用户绑定</li>\n</ol><p>验证时：</p>\n<ol>\n<li>依赖方请求验证，但不必提供除依赖方 ID 以外的更多信息</li>\n<li>用户选择认证器</li>\n<li>认证器根据依赖方 ID 找到对应私钥</li>\n<li>如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录</li>\n<li>确定私钥后，认证器签名挑战并将其返回，同时返回用户 ID</li>\n<li>依赖方通过用户 ID 找到对应用户并用对应公钥检查签名，正确则允许对应用户登录</li>\n</ol><blockquote><p>可以看到，这个特性同时要求认证器存储用户 ID，即上面提到过的 <code>userHandle</code>。依赖方需要根据此信息找到对应用户，因此不支持 <code>userHandle</code> 的 U2F 认证器无法进行无用户名登录。</p></blockquote>\n<blockquote><p>如之前所说，<strong>认证器能永久存储的私钥数量是有限的</strong>，因此只应在真正需要无用户名登录的时候启用此特性。</p></blockquote>\n<blockquote><p>目前暂时没有办法检测认证器是否支持客户端密钥驻留，因此在无用户名验证失败时应 fallback 至常规的 WebAuthn 验证，即向用户询问用户名。</p></blockquote>\n<p>现在让我们来看看如何实现这一特性吧。首先，调用 <code>navigator.credentials.create()</code> 时我们需要注意两个参数：<code>requireResidentKey</code> 必须为 <code>true</code>，<code>userVerification</code> 必须为 \"required\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"5-6\">navigator.credentials.create({\r\n    publicKey: {\r\n        ...\r\n        authenticatorSelection: {\r\n            requireResidentKey: true,\r\n            userVerification: \"required\"\r\n            ...\r\n        },\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Windows Hello <strong>似乎</strong>会存储所有已注册的凭据，因此无论是否指定 <code>requireResidentKey</code>，你都可以通过 Windows Hello 进行无用户名登录。</p></blockquote>\n<p>随后，浏览器会询问用户是否允许认证器存储私钥。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\" alt=\"浏览器提示\" width=\"445\" height=\"285\" class=\"aligncenter size-full wp-image-2208\"></a>\n<p>如果用户同意，认证器会存储私钥，并和普通的 WebAuthn 一样返回信息。不过，依赖方收到数据之后，只需将公钥、用户 ID 与用户关联起来，而不必再将凭证 ID 与用户关联起来。至此注册完成。</p>\n<p>之后，在用户请求登录时，无需再向依赖方提供用户名。同时在传入 <code>navigator.credentials.get()</code> 的参数中也有两个需要注意：<code>userVerification</code> 必须为 \"required\"，同时 <code>allowCredentials</code> 必须为空。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"4-5\">navigator.credentials.get({\r\n    publicKey: {\r\n        ...\r\n        userVerification: \"required\",\r\n        allowCredentials: [],\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Android 暂不支持无用户名验证，空的 <code>allowCredentials</code> 会导致浏览器返回 <code>NotSupportedError</code> 错误。</p></blockquote>\n<p>此时，认证器会根据依赖方 ID 找到对应的私钥。如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录。用户选择后，认证器就会使用对应的私钥签名挑战并将其返回。此时，<code>userHandle</code> 一定不为空。</p>\n<p>依赖方收到数据后，需要将 <code>userHandle</code> 作为用户 ID 找到对应的用户，并使用对应的公钥验证签名。如果验证成功，则认为对应的用户身份认证成功，依赖方可以允许其登录。至此验证结束。</p>\n<blockquote><p>有的时候你可能会需要清除认证器中的密钥。绝大多数认证器都提供了对应的软件以供清除存储的密钥，但大部分情况下这会重置整个认证器，这意味着相关认证器此前的所有凭证均会失效。因此建议不要将日常使用的认证器作为开发测试用的认证器。</p></blockquote>\n<h2>从 U2F 认证迁移</h2>\n<p>如果你的服务此前提供了 U2F 第二因素认证，你可能会希望在将依赖方从 U2F 升级到 WebAuthn 时用户此前注册的 U2F 认证器仍然可用而无需重新注册。由于 WebAuthn 向后兼容 U2F 设备，用户是可以继续使用原有的 U2F 认证器的。不过，由于 WebAuthn 的依赖方 ID 与 U2F 的 <code>appid</code> 并不一定相同，你需要将原有的 U2F <code>appid</code> 随 WebAuthn 流程一起传递给认证器，认证器才能使用正确的私钥进行响应。</p>\n<p>要实现这一点，我们只需要在注册及认证仪式中使用 WebAuthn 的 <code>appid</code> 扩展。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    appid: \"https://example.com\" //U2F appid\r\n}</pre>\n<p>此时认证器便可以得到正确的私钥，之后的流程与正常情况一致；依赖方除了正常的 WebAuthn 流程外，不需要再做任何其它操作。</p>\n<h2>拓展阅读</h2>\n<p>我们的 WebAuthn 之旅到这里就真的结束了。不过，你仍然可以自行探究，了解更多。<strong>本文只是一个粗浅的使用指南</strong>，而被称为“Web 身份认证的未来”的 WebAuthn 的深层还要很多细节值得我们挖掘学习，不过本文不会再继续讨论了。</p>\n<p>如果你想了解更多关于 WebAuthn 的信息，最好的方法是直接阅读 <a href=\"https://www.w3.org/TR/webauthn\">W3C 规范</a>。此外，Yubico 也提供了不错的 <a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn 文档</a>。</p>\n<p>要了解更多认证器存储凭证的信息，你可以阅读<a href=\"https://duo.com/labs/tech-notes/how-security-keys-store-credentials\">这篇文章</a>（英文）。</p>\n<p>如果你想了解更多 Android Safety Net 是怎样运作的，可以观看<a href=\"https://youtu.be/8lv_9mydrjg\">这个视频</a>，并通过 <a href=\"https://developer.android.com/training/safetynet/attestation\">Google 的文档</a>了解 Android Safety Net 的更多信息。</p>\n<p>如果你想方便地调试 WebAuthn，<a href=\"https://webauthn.me/\">webauthn.me</a> 提供了一个非常直观方便的<a href=\"https://webauthn.me/debugger\">调试器</a>。</p>\n<h1>参考资料</h1>\n<p><a href=\"https://www.w3.org/TR/webauthn\">WebAuthn Level 1 规范 - W3C</a><br><a href=\"https://github.com/w3c/webauthn\">WebAuthn Level 2 草案 - W3C</a><br><a href=\"https://blog.techbridge.cc/2019/08/17/webauthn-intro/\">一起来了解Web Authentication - TechBridge 技术共笔部落格</a><br><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\">Introduction to WebAuthn API - Medium</a><br><a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">WebAuthn/FIDO2: Verifying responses - Medium</a><br><a href=\"https://obeta.me/posts/2019-03-01/WebAuthn%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8\">WebAuthn介绍与使用 - obeta</a><br><a href=\"https://webauthn.io/\">webauthn.io</a><br><a href=\"https://webauthn.guide/\">webauthn.guide</a><br><a href=\"https://webauthn.me/\">webauthn.me</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion\">Attestation and Assertion - MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Authentication_API\">Web Authentication API - MDN</a>（顺便翻译了一半）<br><a href=\"https://fidoalliance.org/fido-technotes-the-truth-about-attestation/\">FIDO TechNotes: The Truth about Attestation - FIDO Alliance</a><br><a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn Developer Guide - Yubico</a><br><a href=\"https://en.wikipedia.org/wiki/WebAuthn\">WebAuthn - Wikipedia</a><br><a href=\"https://techcommunity.microsoft.com/t5/identity-standards-blog/all-about-fido2-ctap2-and-webauthn/ba-p/288910\">All about FIDO2, CTAP2 and WebAuthn - Microsoft Tech Community</a><br><a href=\"https://webauthn-doc.spomky-labs.com/\">Webauthn Framework</a><br><a href=\"https://zhuanlan.zhihu.com/p/25279015\">如何开发支持 FIDO U2F 登录的网站 - 知乎专栏</a><br></p></pre>\n","link":"https://flyhigher.top/develop/2160.html"},{"title":"NLP 找门：用朴素贝叶斯进行文本分类","date":"2020-01-29 11:39:58","description":"\n<blockquote>\n<p>有一天，神收到了一封垃圾邮件，于是世界上就有了朴素贝叶斯算法。</p>\n<footer>——我瞎编的</footer>\n</blockquote>\n<p>为什么这篇文章的标题是 NLP 找门呢？因为如果你看完了这篇文章，你就可以<strong>准备入门</strong>自然语言处理 (<strong>N</strong>atural <strong>L</strong>anguage <strong>P</strong>rocessing) 了。我会把这篇文章当作一篇彻彻底底的 NLP 入门文章来写，尽量避免“专业高端”词汇和“全是奇怪符号”的式子，这样<strong>只要你有高中数学基础</strong>，就能毫无压力地看完这篇文章，学会使用朴素贝叶斯分类算法分类文本。</p>\n<p>让我们开始吧。</p>\n<h1>所以，啥是朴素贝叶斯？</h1>\n<p>简单来说，朴素贝叶斯 (Naïve Bayes) <strong>是一个简单但高效的分类算法</strong>，在进行不复杂的文本分类时高效且拥有不低的准确度，判断垃圾邮件就是用朴素贝叶斯进行文本分类的一个经典例子。当然朴素贝叶斯分类不仅能用在 NLP 中，在许多分类问题中朴素贝叶斯也有非常好的效果，但我们今天只关注它在 NLP 中的应用。</p>\n<p>要了解朴素贝叶斯，我们要先来了解一下贝叶斯定理。</p>\n<blockquote>\n<p>每增加一个数学公式都会使读者减半。</p>\n<footer>——霍金</footer>\n</blockquote>\n<p>那么，就让我们先来看看贝叶斯定理的公式吧（笑</p>\n<p>$$P(A|B) = \\frac{P(AB)}{P(B)} = \\frac{P(B|A)P(A)}{P(B)}$$</p>\n<p>其实还是很简单的，运用高中的条件概率知识就能理解。本质上，贝叶斯定理给出了一种方法，使得我们可以在 \\(P(A|B)\\) 和 \\(P(B|A)\\) 之间互相转换，因为通常情况下它们是不一样的。</p>\n<p>要更好地理解，请考虑这样一个例子：</p>\n<blockquote><p>假设有一个学校图书馆，图书管理员正为找不到某本书而发愁。已知老师有 70% 的意愿借走这本书，而是学生的意愿是 30%，这个学校的师生比例是 1:10，那么借走这本书的人是老师的概率有多大？</p></blockquote>\n<p>设学校总人数为 \\(T\\)，我们可以很容易地写出这样的一个式子：</p>\n<p>$$\\begin{align} P &amp; = \\frac{T\\cdot\\frac{1}{11}\\cdot 70\\%}{T\\cdot\\frac{1}{11}\\cdot 70\\%+T\\cdot\\frac{10}{11}\\cdot 30\\%} \\\\ &amp; = \\frac{70\\%}{70\\%+10\\times30\\%} \\\\ &amp; = \\frac{7}{37} \\end{align}$$</p>\n<p>这就是贝叶斯定理了！等等，你可能会挠挠头，这哪里是贝叶斯了？别急，如果我们把最上面的式子换个字母的话...</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>在这里，\\(H\\) 指 Hypothesis，即假设，而 \\(E\\) 指 Evidence，即证据。这样，这个式子就很好理解了，在我们上面的例子里，借走书是证据，那么 \\(P(E)\\) 就是某个人选择借走这本书的概率；这个人是老师是假设，那么这个人是老师的概率是 \\(P(H)\\)。<strong>注意这里的概率指在学校中抽一个人是老师的概率，并不是“在借走书的前提下”这个人是老师的概率</strong>，而“在借走书的前提下”这个人是老师的概率应该是 \\(P(H|E)\\)，也正是我们要求的概率。同样地，而“这个人是老师”的前提下借走书的概率就是 \\(P(E|H)\\) 了。</p>\n<p>那么再来看看上面我们凭小学知识就列出的计算式，如果把里面的具体数据换成概率来表示的话，这个式子就会变成...</p>\n<p>$$P(H|E) = \\frac{T\\cdot P(E|H)P(H)}{T\\cdot P(E|H)P(H) + T\\cdot P(E|\\neg H)P(\\neg H)}$$</p>\n<p>好吧，这里解释一下，\\(\\neg\\) 符号表示“非”，所以 \\(P(E|\\neg H)\\) 表示在“这个人不是老师”的前提下借走书的概率。而 \\(T\\cdot P(E|H)P(H)\\) + \\(T\\cdot P(E|\\neg H)P(\\neg H)\\)，即“可能借走书的老师的数量 + 可能借走书的学生的数量”，就是“可能借走书的人的数量”了，也就是 \\(T\\cdot P(E)\\)。上下消去 \\(T\\)，我们就能得到上面的式子了。</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>这就是贝叶斯了定理。如果你还是不太清楚，可以去看看 3Blue1Brown 的<a href=\"https://www.bilibili.com/video/av84799361\">这个视频</a>，图形化的讲解会清晰很多。</p>\n<p>这里我要提一下这个式子里各部分的专有名称了（“专业高端”词汇警告），你可以不记住，直接看后面。</p>\n<ul>\n<li>\\(P(H|E)\\) 叫做 \\(H\\) 的<strong>后验概率</strong>，反之亦然</li>\n<li>\\(P(H)\\) 叫做 \\(H\\) 的<strong>先验概率</strong>，反之亦然</li>\n<li>特别地，我们把 \\(P(E|H)\\) 称作<strong>“似然值”</strong>，即 likelihood</li>\n</ul>\n<p>那什么是朴素贝叶斯呢？按上面所说的，朴素贝叶斯是一种分类算法。简单来说，朴素贝叶斯将一个对象的各个特征考虑为互相独立，然后根据这些特征的概率的乘积来判断对象所属的分类。基本原理如下：</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)} \\propto P(E|H)P(H) = P(H)\\prod_{i}P(W_i|H)$$</p>\n<p>在这里，\\(W_i\\) 指某一对象的第 \\(i\\) 个特征，对于文本分类来说，这就是一段文本中的某个单词。</p>\n<p>朴素贝叶斯之所以“朴素”，是因为它要求<strong>各个特征间是独立的</strong>，在文本分类中也就是各个单词之间互不干扰。虽然思路简单的代价是适用范围变窄，不过由于这样的简化在很多情况下已经足够了，因此实际上朴素贝叶斯的应用范围非常广。<del>你看朴素贝叶斯 <strong>N</strong>aïve <strong>B</strong>ayes 的缩写都是 NB 了，能不厉害吗（逃</del></p>\n<h1>那么，咋分类啊</h1>\n<p>看来你这下完全听懂了呢（笑），是时候看看如何在 NLP 中应用朴素贝叶斯了。和上面一样，我们用一个具体的例子来说明。我们的目标是让电脑学会分类美国共和党和民主党的演讲稿，由于两个党派的演讲风格不同，所以这样的分类在理论上是可行的。</p>\n<div class=\"wp-block-file\">\n<a href=\"https://acdn.flyhigher.top/nlp/material.zip\" download>material.zip</a><a href=\"https://acdn.flyhigher.top/nlp/material.zip\" class=\"wp-block-file__button\" download>下载</a>\n</div>\n<p>上面我们要用到的数据集，你可以下载下来一起动手玩一玩。先说一下数据集的数据结构吧，压缩包里有两个文件，<code>train.txt</code> 将会被当作训练数据集，而 <code>test.txt</code> 则会作为训练结束后的验证数据集。两个文本文件里数据的结构是类似的，就像这样：</p>\n<pre class=\"EnlighterJSRAW\">BLUE WELL I AM SO HONORED AND PERSONALLY UNKNOWNWORD TO BE HERE...\r\nRED THANK YOU . THIS IS QUITE AN INSTITUTION . IT'S GOOD TO BE...</pre>\n<p>每行都是一篇演讲稿，每行的第一个单词指明了这篇演讲稿所属的党派，<code>RED</code> 指共和党，而 <code>BLUE</code> 指民主党。所有单词和符号都已经被转为大写并由空格分隔方便处理。<code>train.txt</code> 有共和党演讲稿和民主党演讲稿各 23 篇，<code>test.txt</code> 有 6 篇共和党演讲稿，12 篇民主党演讲稿。</p>\n<p>明白了？那我们就开始吧。</p>\n<h2>捋捋思路</h2>\n<p>首先，我们需要考虑如何在文本分类中应用朴素贝叶斯。很简单，按朴素贝叶斯的思路，<strong>计算每个词在某一分类下的出现概率，然后将某篇文章的所有词的概率相乘，再乘以该分类的先验概率，就可以得到某篇文章在某一分类下的概率。</strong></p>\n<p>$$P(Class|Article) = P(Class)\\prod_{i}P(Word_i|Class)$$</p>\n<p>各个分类概率都计算完成后，概率最高的那个分类就是这篇文章可能所属的分类。这个思路的核心就是用词决定了文本风格，文本的不同类别用词会有差异，只要能量化这些差异就可以分类文本。在我们的例子中，我们可以从 <code>train.txt</code> 中统计各个词汇的出现情况，然后用 <code>test.txt</code> 中的数据按上面的算法验证我们算法的准确性。</p>\n<p>这个思路很简单也很清晰，但还有一些问题需要解决。<strong>第一，有的时候，我们的测试数据集中可能会出现一个在训练数据集中没有出现过的词语。这个时候，朴素贝叶斯的计算结果会是 0。</strong>如果我们把 0 乘进式子中，那就别想得到正常的结果了。所以，我们还需要对计算某一单词在某一分类中的式子稍加改进。使用拉普拉斯平滑，就可以避免出现概率为 0 的情况。别被名字吓到，拉普拉斯平滑是一种非常简单的平滑方法：在分子上 +1，在分母上加整个取值范围，这样就可以给整个分式加上非常微小的偏移，避免出现 0。</p>\n<p>$$\\begin{align} P(Word_i|Class) &amp; = \\frac{Word_iCountInClass}{AllWordCountInClass} \\\\ &amp; \\approx \\frac{Word_iCountInClass + 1}{AllWordCountInClass + UniqueWordCount} \\end{align}$$</p>\n<p><strong>第二，对于长文本，大部分词语在某一分类中的出现概率是远小于 1 的，加上长文本词汇量大，往往概率相乘的结果会非常小。</strong>受限于计算机处理浮点数的原理，精确处理这么小的数字是很麻烦的。幸好，运用一些简单的数学知识就可以将其转化为更精确的表达，<strong>那就是取对数。</strong></p>\n<p>首先，将概率计算结果取对数并不影响我们的计算结果。因为取对数是一个单调递增的操作，而我们计算概率只是为了排序选择概率最高的分类，因此取对数是不影响我们排序的。而把多项式取对数，等于把多项式的每一项取对数后相加。所以我们有：</p>\n<p>$$\\lg{\\Big(P(Class)\\prod_{i}P(Word_i|Class)\\Big)} = \\lg{P(Class)} + \\sum_i\\lg{P(Word_i|Class)}$$</p>\n<p>大部分情况下，在每一次取对数的时候，要取对数的数字的大小，即 \\(P(Word_i|Class)\\) 尚还在计算机能处理的范围内，<strong>因此我们可以放心地使用取对数的方法</strong>，避免计算机精度不够影响结果。</p>\n<p><strong>第三就是在某些情况下，可能会有部分词语干扰计算结果</strong>，如 and, is 这类的被大量使用的中性词。如果希望得到更好的结果，我们可以维护一个停用词表，在计算时排除停用词即可。或者，我们可以在计算完每个单词的出现数量后，排除数量最多的前 \\(N\\) 个单词，避免这些单词过多地影响计算。</p>\n<h2>写点代码</h2>\n<p>现在我们终于可以开始实战，写点代码了。我会用简单的 Python 来表达思路。好了，理一理思绪，第一步我们要做的，是统计训练数据集中的用词情况。具体来说，根据上面的思考，我们需要统计的有：</p>\n<ul>\n<li>每个单词在各分类中出现的数量</li>\n<li>各分类中的不重复词数量</li>\n</ul>\n<p>用 Python 简单表示如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\"># 读入数据过程略...\r\ndata_raw = \"读入的数据\".split('\\n') # 按行分隔\r\ndata_blue = []\r\ndata_red = []\r\nword_count_blue = {}\r\nword_count_red = {}\r\n\r\nfor line_data in data_raw:\r\n    word_list = line_data.split(\" \") # 分隔单词\r\n    if word_list[0] == \"BLUE\":\r\n        for i in range(1,len(word_list)):\r\n            if not is_excluded(word_list[i]): # 判断是否为停用词\r\n                data_blue.append(word_list[i])\r\n                # 统计单词出现次数\r\n                word_count_blue.setdefault(word_list[i], 0)\r\n                word_count_blue[word_list[i]] += 1\r\n    elif word_list[0] == \"RED\":\r\n        # Class = red 时同理...\r\n\r\n#统计非重复词\r\nunique_words_blue = list(set(data_blue))\r\nunique_words_red = list(set(data_red))</pre>\n<p>训练过程到这里就结束了，计算机已经知道了各政党演讲的用词习惯。很简单吧？接下来我们就要使用测试数据集来测试准确度了。<strong>这里开始就涉及到朴素贝叶斯的计算了</strong>，可能会稍微复杂一点点。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">import math\r\n#读入测试数据过程略...\r\ntest_data_raw = \"读入的数据\".split('\\n') # 按行分隔\r\ntest_data = []\r\n\r\nfor line_data in test_data_raw:\r\n    if line_data[0] == \"BLUE\":\r\n        content_data = line_data.split(\" \").pop(0)\r\n        test_data.append({\"class\": \"blue\", \"content\": content_data})\r\n    elif line_data[0] == 'RED':\r\n        # ...\r\n\r\nfor line_data in test_data:\r\n    posibility_blue = 0\r\n    for word in line_data[\"content\"]:\r\n        # 计算各单词概率，取对数后相加，使用了拉普拉斯平滑\r\n        if word in word_count_blue:\r\n            posibility_blue += math.log((word_count_blue[word]+1)/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n        else:\r\n            posibility_blue += math.log(1/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n    # 最后加上该分类概率的对数\r\n    posibility_blue += math.log(len(data_blue)/(len(data_blue)+len(data_red)))\r\n\r\n    # 计算 Red 同理...</pre>\n<p>计算完成后，我们就得到每篇演讲稿在各分类下的概率了。之后，简单的比较就能得出推断的分类：如果 \\(P(Red|Article)\\) 大于 \\(P(Blue|Article)\\)，那么这篇演讲稿就更可能是共和党的演讲稿，反之则是民主党的演讲稿。</p>\n<p>很好理解吧？那么这么简单的思路，准确性怎么样呢？对于我们的例子，这是我设置了个别停用词后的结果：</p>\n<pre class=\"EnlighterJSRAW\">+-----+-------+--------------+--------------+-------+-------+\r\n|   ID|  Class|        P(Red)|       P(Blue)|  Guess| Status|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|    1|   Blue|  -23204.68377|  -22998.67066|   Blue|      √|\r\n|    2|   Blue|  -16438.44625|  -16137.48257|   Blue|      √|\r\n|    3|   Blue|  -33468.81214|  -32567.61801|   Blue|      √|\r\n|    4|   Blue|    -8606.2193|   -8601.50426|   Blue|      √|\r\n|    5|   Blue|  -12430.97436|  -11935.70662|   Blue|      √|\r\n|    6|   Blue|  -44033.02883|  -43877.55367|   Blue|      √|\r\n|    7|   Blue|   -16947.2851|  -16758.57542|   Blue|      √|\r\n|    8|   Blue|  -26957.26997|  -26889.62444|   Blue|      √|\r\n|    9|   Blue|  -27503.73985|  -27249.21828|   Blue|      √|\r\n|   10|   Blue|   -20528.4457|   -19991.1248|   Blue|      √|\r\n|   11|   Blue|  -20337.96493|  -19860.12831|   Blue|      √|\r\n|   12|   Blue|  -28409.28489|  -28118.98017|   Blue|      √|\r\n|   13|    Red|  -13756.01015|  -14488.11751|    Red|      √|\r\n|   14|    Red|  -17221.22732|  -17710.15936|    Red|      √|\r\n|   15|    Red|  -17397.45136|  -17899.98659|    Red|      √|\r\n|   16|    Red|  -10724.69095|  -11092.77837|    Red|      √|\r\n|   17|    Red|  -10402.40027|  -10859.48681|    Red|      √|\r\n|   18|    Red|   -9371.53792|    -9669.6769|    Red|      √|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|                                      Total: 18/18, 100.0% |\r\n+-----------------------------------------------------------+</pre>\n<p><strong>100% 的准确率哦！</strong>事实上，对于我们的这个例子，就算不设置停用词，我们仍能达到 100% 的分类准确率。朴素贝叶斯分类的确很 NB 呢。</p>\n<h1>更进一步</h1>\n<p>我们的探索到这里就结束了，但如果你有兴趣，完全可以继续探索下去。我们的例子是一个非常简化的例子，在实际情况中，还有很多问题需要解决。比如，对于中文及类似语言，不存在拉丁语系的天然分词结构，而朴素贝叶斯的文本分类是基于单词的，那么<strong>中文的分词就会是个问题；</strong>再比如，对于朴素贝叶斯分类来说，<strong>词语之间的顺序是不影响分类结果的</strong>，但这就会导致“今天心情很好，但昨天不好”和“昨天心情很好，但今天不好”在朴素贝叶斯看来是一样的，要想获得更好的结果，我们必须<strong>考虑词语的顺序。</strong></p>\n<p>这些问题，今天我们就不再深究了，但你可以自己探索。比如，引入思路同样很简洁的马尔科夫链，我们就可以让计算机学会考虑词语间的顺序，不过那就会是另一个话题了。</p>\n","link":"https://flyhigher.top/develop/1989.html"},{"title":"MDx 中增强页面可访问性的细节","date":"2020-01-25 16:45:04","description":"\n<blockquote><p>这篇文章本来是打算发在 <a href=\"https://mdxblog.flyhigher.top/\">MDx Blog</a> 的，不过写到后来发现这篇文章相对来说还是有价值的，于是就将这篇文章转移到了无垠，MDx Blog 则不再发表这篇文章。</p></blockquote>\n<p>从 MDx 开发之初，增强页面的可访问性就被列为了一个重要目标。从 HTML 语义化，到 ARIA 地标，再到 <code>prefers-reduced-motion</code>，随着浏览器对于增强页面可访问性的支持功能越来越多，MDx 也在不断地更新，让更多的人都能毫无困难地浏览、查看由 MDx 渲染的网页。本文会详细说明一些 MDx 中增强页面可访问性的细节，<strong>如果你希望增强自己开发的网页的可访问性，本文可能会对你有所帮助。</strong></p>\n<h1>基础性增强</h1>\n<p>增强可访问性，最重要也是最基础的一点就是 HTML 语义化。通过使用 HTML 5 语义化标签和 ARIA Role 标签，我们可以很方便地<strong>将整个网页在语义上分为几部分，而这将有效地改善屏幕阅读器对网页的分析质量，使视力障碍用户更好地浏览网页。</strong></p>\n<h2>HTML 语义化</h2>\n<p><strong>HTML 语义化属于增强页面可访问性的基础中的基础。</strong>通过使用语义化的 HTML 标签，我们可以方便地为网页中的各部分标记功能而不影响页面样式。随着符合 HTML 5 的现代化网页成为主流，语义化标签已被很大一部分网站所支持，我也不过多赘述了。就举几个常用的“地标性”标签吧：</p>\n<ul>\n<li>\n<code>header</code> 标签标记页眉，默认样式同 <code>div</code>，不要把它和 <code>head</code> 搞混了</li>\n<li>\n<code>main</code> 标签标记页面的主要内容，默认样式同 <code>div</code>\n</li>\n<li>\n<code>article</code> 标签标记文章（在 HTML 5 中它指任何独立或可复用的文本），默认样式同 <code>div</code>\n</li>\n<li>\n<code>footer</code> 标签标记页脚，默认样式同 <code>div</code>\n</li>\n<li>\n<code>nav</code> 标签标记页面导航栏区域，默认样式同 <code>div</code>\n</li>\n<li>\n<code>aside</code> 标签标记侧栏，默认样式同 <code>div</code>\n</li>\n<li>\n<code>section</code> 标签标记“一组内容”，你可以把它看作是划定网页中一块区域的通用标签，默认样式同 <code>div</code>\n</li>\n</ul>\n<p>只要用这些标签替代 <code>div</code> 而不是无脑使用 <code>div</code> 就能提高页面的可访问性。MDx 使用了这些标签来增强页面的可访问性。</p>\n<h2>下一步，ARIA</h2>\n<p>有的时候，出于一些原因，我们没法使用语义化的 HTML 标签，或者没有合适的语义化标签来标记内容，这时候<strong>我们就需要使用 ARIA (Accessible Rich Internet Applications，可访问的富互联网应用)。</strong>ARIA 的基础用法很简单，只要在相应元素上加上 <code>role</code> 属性指定该元素的功能即可。下面是一个简单的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;div role=\"navigation\"&gt;\r\n  &lt;ul&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page A&lt;/a&gt;&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page B&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page C&lt;/a&gt;&lt;/li&gt;\r\n  &lt;/ul&gt;\r\n&lt;/div&gt;</pre>\n<p>通过 <code>role=\"navigation\"</code>，我们把一个 <code>div</code> 标记为了导航栏区域。实际上，对屏幕阅读器来说，这和 <code>nav</code> 标签在语义上是一致的。上一节中的例子都可以分别用以下 ARIA Role 表示：</p>\n<ul>\n<li><code>role=\"heading\"</code></li>\n<li><code>role=\"main\"</code></li>\n<li><code>role=\"article\"</code></li>\n<li><code>role=\"contentinfo\"</code></li>\n<li><code>role=\"navigation\"</code></li>\n<li><code>role=\"complementary\"</code></li>\n<li><code>role=\"region\"</code></li>\n</ul>\n<p>除此以外，MDx 还使用了 <code>role=\"banner\"</code> 和 <code>role=\"search\"</code> 来分别标记页面中的顶部栏和搜索表单。另外，<strong>有的时候 <code>role</code> 属性还需配合 <code>aria-*</code> 属性一同使用</strong>，具体规则比较复杂，我就不在这里赘述了，具体可参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">WAI-ARIA Roles - MDN</a>。</p>\n<h1>媒体查询来帮忙</h1>\n<p>CSS 的媒体查询其实是一个非常强大的特性，<strong>妥善利用其中的一些特性，我们可以在网页外观上大大增强网页的可访问性。</strong>除了已经烂大街的“对浏览器窗口大小”响应的媒体查询，我会介绍 3 个很少有网站充分利用的媒体查询。</p>\n<h2>print</h2>\n<p><code>print</code> 媒体查询其实已经“历史悠久”了，<strong>只要使用 <code>@media print {...}</code> 就可以创建只在打印页面时生效的样式。</strong>通过这种方式，我们可以让页面在打印时应用一套为打印优化的样式，增强页面在物理纸张上的可访问性。</p>\n<blockquote><p>维基百科是对打印样式做了单独适配的著名例子。</p></blockquote>\n<p><strong>由于在打印的情况下，页面已经离开了“可交互”的范围，还有分页这种在屏幕中无需考虑的问题，要让页面在物理纸张上仍能被轻松地阅读，我们需要做一些特殊的适配。</strong>直接来看一个例子吧。以下是 MDx 针对打印情况进行的一些特殊优化，样式的具体理由已经写在了注释中。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media print {\r\n    /*隐藏不必要的元素*/\r\n    header, .mdx-ad-after-article, .mdx-ad-in-article, .mdx-post-money, .page-footer-nav, .mdx-same-posts, .spanout button, .mdui-drawer, .mdui-overlay, .mdui-menu, .mdx-share-img-dialog, .mdx-share-wechat-dialog {\r\n        display: none!important;\r\n    }\r\n\r\n    /*使用下划线标记链接*/\r\n    article a {\r\n        text-decoration: underline!important;\r\n    }\r\n    /*由于纸张不可交互，在链接后显示链接到的 URL*/\r\n    article a::after {\r\n        content: \"(\" attr(href) \")\";\r\n    }\r\n\r\n    /*强制白底黑字*/\r\n    html &gt; body {\r\n        background-color: white!important;\r\n    }\r\n    article p {\r\n        color: rgba(0,0,0,.8)!important;\r\n    }\r\n\r\n    /*对于纸张上的长文章，衬线字体拥有更好的可读性。以下字体列表来自 fonts.css*/\r\n    article {\r\n        font: 13pt Georgia, \"Nimbus Roman No9 L\", \"Songti SC\", \"Noto Serif CJK SC\", \"Source Han Serif SC\", \"Source Han Serif CN\", STSong, \"AR PL New Sung\", \"AR PL SungtiL GB\", NSimSun, SimSun, \"TW\\-Sung\", \"WenQuanYi Bitmap Song\", \"AR PL UMing CN\", \"AR PL UMing HK\", \"AR PL UMing TW\", \"AR PL UMing TW MBE\", PMingLiU, MingLiU, serif!important;\r\n    }\r\n\r\n    /*除部分元素外，禁止在元素内部分页*/\r\n    * {\r\n        page-break-inside: avoid;\r\n    }\r\n    article p, article a, #comments, article {\r\n        page-break-inside: auto;\r\n    }\r\n}</pre>\n<p>MDx 自 1.9.3 版本起已经包含了对文章页的打印样式优化。可以很容易地看出，优化后的样式在物理纸张上将更容易阅读。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\" alt=\"\" width=\"1345\" height=\"1602\" class=\"aligncenter size-full wp-image-1959\"></a>\n<h2>prefers-color-scheme</h2>\n<p><code>prefers-color-scheme</code> 是最近才被浏览器广泛支持的一个媒体查询，但它的功能却很强大：<strong>响应系统级黑暗模式。</strong>这样，我们可以在开启黑暗模式的系统中让网页具有更好的可读性。不过由于这个媒体查询直到最近才被广泛支持，因此大部分网站对此并没有进行适配。</p>\n<blockquote><p>一些适配这一特性的网站：少数派、微信公众平台（文章页）等。</p></blockquote>\n<p>通过像这样的媒体查询，我们可以在系统启用黑暗模式时让页面实时响应：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    body {\r\n        background-color: #212121;\r\n        color: rgba(255, 255, 255, .7);\r\n    }\r\n}</pre>\n<p><code>prefers-color-scheme</code> 一共有 3 个可能值：<code>no-preference</code>, <code>light</code> 和 <code>dark</code>。你也可以不像上面的例子那样默认使用亮色样式并在黑暗模式下启用黑暗样式，而可以反过来将黑暗样式作为默认，用亮色样式覆盖。在不支持的浏览器上将会显示默认样式（即媒体查询不会生效）。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<h2>prefers-reduced-motion</h2>\n<p>看名字就猜得出，<code>prefers-reduced-motion</code> 是和 <code>prefers-color-scheme</code> 师出同门的媒体查询。因此，和 <code>prefers-color-scheme</code> 一样，它也是在最近才获得了浏览器的广泛支持。它的作用也很强大：<strong>响应系统的“减弱动态效果”模式。</strong>这对某些不喜欢甚至无法接受动画的用户可能很有帮助。要知道，对有些用户来说这甚至是医疗上的必要。使用如下的媒体查询，我们可以在系统启用减弱动态效果模式时让页面实时响应，减弱动画：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-reduced-motion: reduce) {\r\n    /*只是一个示例，实际情况中可以保留一些淡入淡出效果*/\r\n    * {\r\n        transition: all 0s!important;\r\n        transform: none!important;\r\n    }\r\n}</pre>\n<p><code>prefers-reduced-motion</code> 只有 2 个可能值：<code>no-preference</code> 和 <code>reduce</code>，在不支持的浏览器上该媒体查询不会生效。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\" alt=\"\" width=\"792\" height=\"515\" class=\"aligncenter size-full wp-image-1962\"></a>\n<h1>黑暗模式适配</h1>\n<p>黑暗模式可不是简单地切换到黑底白字这么简单。<strong>单纯地使用黑底白字会导致页面元素之间对比度过高，文字刺眼，反而降低了页面的可访问性。</strong>我在下面总结了几条应用在了 MDx 中的黑暗模式优化规则和 Google 推荐的优化规则：</p>\n<p><strong>一是避免黑底白字。</strong>黑底白字看起来真的很难受，事实上，深灰和浅灰是黑暗模式最好的配色。比较下方例子里的两段文本，毫无疑问深灰色背景和浅灰色文字搭配的样式的可读性要比黑底白字高很多。（p.s. 有时候这条规则在白底黑字时也适用）</p>\n<p><strong>二是更改部分元素的亮度和对比度以增强可读性。</strong>你可能已经注意到了，下面优化的例子里标题文字的颜色改变了。很明显，未优化的黑暗模式中标题可读性不如优化的版本。在实际中，我们通常可以通过 CSS 滤镜来实现这一更改。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    h1 {\r\n        /*反相颜色后再将色相旋转 180 度，使亮度反相*/\r\n        filter: invert(1) hue-rotate(180deg);\r\n    }\r\n}</pre>\n<p><strong>三是避免让图片过亮。</strong>未经处理的图片通常会导致过高的对比度，降低可读性。在 MDx 中，我选择降低图片的亮度来避免图片刺眼，而 Google 的建议则是使图片灰度，不过这会影响图片的整体观感。无论是哪一种方案，都可以使用 CSS 滤镜来轻松实现。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    img { \r\n        /*MDx 方案*/\r\n        filter: brightness(.8);\r\n        /*Google 方案*/\r\n        filter: grayscale(.5);\r\n    }\r\n}</pre>\n<div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是未优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是经过优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n</div>\n<h1>其他细节</h1>\n<p>还有一些细节，虽然简单，但不可或缺。我把一部分没有在上文提到的 MDx 中的细节列在了这里。</p>\n<p><strong>一是允许页面缩放。</strong>在开发响应式页面时，很多网站会在页面头部添加这样一个 <code>meta</code>：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"&gt;</pre>\n<p>这样的 <code>meta</code> 设定了页面的宽度，却也固定了页面的缩放比例，用户难以手动放大网页。<strong>这样的设置对一部分视力障碍用户非常不友好</strong>，以至于苹果决定在自家的浏览器上忽略禁止缩放的 <code>meta</code>。按照 Google 的推荐，如果你在 MDx 设置中启用了“允许页面缩放”，那么 MDx 会输出这样的 <code>meta</code> 标签，允许页面进行五倍以内的缩放：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=5\"&gt;</pre>\n<p><strong>尽管很多时候放大页面会导致页面结构被破坏，但这大大增强了页面的可访问性，利大于弊。</strong>因此，在 MDx 中，“允许页面缩放”是默认启用的。</p>\n<p><strong>二是在跨设备阅读时同步阅读记录。</strong>这属于 MDx 的“元老级”功能之一。注意到页面右上角的那个“在其他设备上继续阅读”的按钮了吗？如果你滚动页面后重新点击它，你会发现二维码发生变化了。通过在二维码中记录阅读进度，用户在扫描二维码切换设备阅读时，MDx 在新设备上会自动滚动到和原设备上一致的位置——好吧，目前基于百分比的算法在某些情况下可能不太准，但我已经设计了一个更复杂但更精确的阅读进度记录算法，之后就会更新到 MDx 中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\" alt=\"\" width=\"1000\" height=\"574\" class=\"aligncenter size-full wp-image-1976\"></a>\n<p><strong>三是避免 Web 字体阻塞渲染。</strong>如果你在页面中使用了 Web 字体，在字体加载完成之前，浏览器可能不会渲染任何文本，这就导致用户可能需要等待一段时间才能开始浏览网页。Google 推荐使用 <code>font-display: swap;</code> 来向浏览器指定网页的 Web 字体渲染策略。这一规则会提供一个比较短的等待周期，如果在这段时间内 Web 字体没有完成加载，那么浏览器会以 fallback 字体渲染文本。任意时刻一旦 Web 字体完成渲染，浏览器就会使用 Web 字体重新渲染文本。这在大多数情况下都能满足可访问性的需求。</p>\n<p><strong>四是确保 html 元素具有合适的 <code>lang</code> 属性。</strong>这一属性声明了页面的主要语言，浏览器可以据此调整渲染策略，或者触发自动翻译；屏幕阅读器也能更好地阅读网页。</p>\n<p><strong>五是确保页面主要内容在丢失/禁用了 Javascript 甚至 CSS 的情况下仍然可用。</strong>作为一个以内容为主的网站，MDx 在禁用了 Javascript 的情况下页面主要内容仍然可用。这不只是为了 SEO，更是为了保证页面的可访问性。的确，目前的情况下，如果开启了 Lazyload，MDx 在禁用 Javascript 的情况下图片的确无法显示，但我会在后续版本中尽可能的优化这一问题。</p>\n<h1>附录：媒体查询开发技巧</h1>\n<p>有的时候，光有 CSS 响应媒体查询还不够，我们可能需要在 Javascript 中实时响应媒体查询。用如下代码就可以很简单地响应媒体查询：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">let mql = window.matchMedia(\"(prefers-reduced-motion: reduce)\");\r\nmql.addListener(handleMediaChange);\r\n\r\n//在添加监听后先调用一次，获得当前查询结果\r\nhandleMediaChange(mql);\r\n\r\nfunction handleMediaChange(mql){\r\n    if(mql.matches){\r\n        //查询匹配\r\n    }else{\r\n        //查询不匹配\r\n    }\r\n}</pre>\n<p>在开发上述媒体查询的过程中，我们需要频繁地切换系统的相应模式或者调出打印窗口。<strong>实际上，Chrome 提供了更简单的调试方法：</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1946\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\" alt=\"\" width=\"723\" height=\"681\"></a>\n<p>只要在这里更改模式，相关媒体查询就能实时生效。这不会影响其他标签页，在关闭开发者工具之后也会自动恢复系统设置。</p>\n","link":"https://flyhigher.top/develop/1912.html"},{"title":"MDx Blog 现已随 MDx 1.9.5 发布","date":"2020-01-22 17:54:11","description":"<p>随着 MDx 发布 1.9.5 更新，<a href=\"https://mdxblog.flyhigher.top/\" rel=\"noopener noreferrer\" target=\"_blank\">MDx Blog</a> 现已建立。我将会在 MDx Blog 中分享一些开发故事并发布 MDx 更新日志。</p>","link":"https://flyhigher.top/diary/1905.html"},{"title":"GitHub 2019 统计无垠版","date":"2020-01-12 13:02:00","description":"\n<h1>缘起</h1>\n<p>2019 年底，我突发奇想想要自己统计一番 GitHub 上存储库的一些信息。尽管 GitHub 有自己的<a href=\"https://octoverse.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">年度统计</a>，我还是想试着自己爬取一下，说不定能挖出什么有意思的信息，何况这是我第一次有机会处理比较大量的数据，也算是一种学习的过程吧。于是花了一下午写了个简单的爬虫（时间都花在增加 Rate Limit 上了...），然后扔在了两台服务器上开始跑（GitHub  API 真是好文明）。</p>\n<p>从 2019.11.21 3 时到 2020.1.12 24 时的 52 天 21 小时内，我的爬虫一共爬取了<strong>与 2,024,705 个用户有关<sup>*</sup>的 14,651,923 个公共存储库的基础信息</strong>，平均每秒爬取 3.2 个存储库。据 GitHub 的官方数据计算，我爬取了大约 15% 的存储库信息，但由于封禁库和私有库的数量未知，我暂时无法确定我爬取的存储库占公共库的比例。同时由于存储库数量较多，基本可以认为爬取到的样本在时间尺度上已经足够随机，可以通过统计得出一般结论。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\" alt=\"\" width=\"700\" height=\"606\" class=\"aligncenter size-full wp-image-1892\"></a>\n<p>爬到自己了，合影.jpg</p>\n<p>那么下面就来看看统计出来的一些结果吧。爬虫的技术细节和数据集下载放在文末。</p>\n<p>* 指这些用户拥有至少一个库</p>\n<h1>统计信息</h1>\n<p><strong>以下统计结果均基于已放于文末的数据集。</strong>由于爬虫爬取的时间跨度长，加上我并没有完整爬取 GitHub 所有存储库，因此我<strong>不能保证以下统计结果符合真实情况</strong>，各位可以下载数据集或自行爬取进行验证。</p>\n<h2>一些数据</h2>\n<div>\n<div>\n<div>\n<span>3,120,930</span><br>总爬取用户数</div>\n<div>\n<span>44.7%</span><br>的存储库创建<br>自 Fork</div>\n<div>\n<span>6.59%</span><br>的账户被删除或<br>封禁<sup>1</sup>\n</div>\n<div>\n<span>23,913</span><br>单用户拥有最大<br>库数量<sup>2</sup>\n</div>\n</div>\n</div>\n<p><sup>1</sup> 基于用户 ID 规律合理推断<br><sup>2</sup> 统计范围仅限于当前数据集</p>\n<p>比较出乎我意料的是创建自 Fork 的存储库的占比。我预估这样的存储库占比不会太低，但没有想到能接近一半。此外单用户拥有最大库数量也大大超出了我的预期，<a href=\"https://github.com/pombredanne\" rel=\"noopener noreferrer\" target=\"_blank\">pombredanne</a> 这个用户名下拥有将近 24k 的存储库，不过绝大多数都是 Fork 来的，在情理之中。此外<strong>这个数据集中</strong>拥有最多存储库的账户其实是一个组织 <a href=\"https://github.com/gitpan\" rel=\"noopener noreferrer\" target=\"_blank\">gitpan</a>，这个组织拥有 36,377 个存储库。</p>\n<h2>语言</h2>\n<p><canvas></canvas><br>\n首先必须要说明的是，在这个榜单中我<strong>排除了 HTML 和 CSS</strong>，因为在严格意义上它们不属于“编程语言”。如果把它们计算进来的话，分别有 640,368 个和 361,425 个存储库的主要语言分别是 HTML 和 CSS，这样在这份榜单中它们可以排到第 6 和 第 10 名。JavaScript 毫无疑问获得第一，第二名 Python 的热度则和 JavaScript 相差将近一半。<strong>此外还有 2,448,486 个存储库未能识别出语言，占比 16.7%。</strong>在上面的榜单之外，与机器学习和数据科学相关的语言还有 Jupyter Notebook 排名第 13，R 排名 20，Julia 排名 43。</p>\n<p>说实话这份排名和 GitHub 官方的排名<strong>差别很大</strong>，除了前三名，后面的基本都不太一样。我的排名统计结果完全基于 GitHub 对于存储库的主要语言识别，加上我的存储库数据不完整，和官方的数据不同是很正常的，可以做一个参考，但大概率还是官方排名更加准确。</p>\n<h2>许可证</h2>\n<p><canvas></canvas></p>\n<p>自 GitHub 推出许可证功能以来，拥有许可证的存储库比例升升降降，却始终没有超过一半。<strong>选择一个合适的许可证对项目的良好发展真的很有帮助</strong>，要了解如何选择合适的许可证，请参阅<a href=\"https://www.runoob.com/w3cnote/open-source-license.html\" rel=\"noopener noreferrer\" target=\"_blank\">这篇文章</a>。</p>\n<p><canvas></canvas></p>\n<p>对于拥有许可证的存储库，MIT<del> 麻省理工许可证 </del>总是占比最大的；第二则是 Apache-2.0 许可证。此外，WTFPL 许可证也挤入了前 15 名。</p>\n<h2>星标</h2>\n<p><canvas></canvas><br>\nStar 数量毫无疑问是一个存储库受欢迎程度的体现，而 Star 数高的项目基本上大家都了解过。<strong>截至爬取结束时间</strong>，GitHub 中 Star 数最多的库是 <a href=\"https://github.com/freeCodeCamp/freeCodeCamp\" rel=\"noopener noreferrer\" target=\"_blank\">freeCodeCamp</a> <del>非常完美的驼峰命名法</del>，其次则是著名项目 <a href=\"https://github.com/996icu/996.ICU\" rel=\"noopener noreferrer\" target=\"_blank\">996.ICU</a>。<a href=\"https://github.com/vuejs/vue\" rel=\"noopener noreferrer\" target=\"_blank\">Vue</a> 现在的 Star 数已经稳压 <a href=\"https://github.com/facebook/react\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> 一头，Vue YES! 此外 <a href=\"https://github.com/sindresorhus/awesome\" rel=\"noopener noreferrer\" target=\"_blank\">awesome</a> 也挤进第七名。<br><canvas></canvas><br>\n由于 Star 需要时间积累，新项目的 Star 数量很可能是比不过老项目的，这就会导致有实力的新项目无法出现在榜单中。因此我还统计了日均 Star 数，试图通过日均 Star 数来反映项目受欢迎的程度。<strong>由于正热门的项目会比老牌热门项目有优势，这一项的统计范围是 2020-01-01 之前的所有存储库。</strong>996.ICU 和 freeCodeCamp 再次出现在前 10 名，而最近的热门项目 <a href=\"https://github.com/wenyan-lang/wenyan\" rel=\"noopener noreferrer\" target=\"_blank\">wenyan</a> 则飙升至第 2 名。此外还有 <a href=\"https://github.com/menzi11/BullshitGenerator\" rel=\"noopener noreferrer\" target=\"_blank\">BullshitGenerator</a>，即最近热门的“狗屁不通文章生成器”和 <a href=\"https://github.com/evil-huawei/evil-huawei\" rel=\"noopener noreferrer\" target=\"_blank\">evil-huawei</a> 分列第 3 和第 5 名。<br><canvas></canvas><br>\n说实话这个曲线<strong>比我预估的陡多了。</strong>你可能已经注意到了，这个图表的横轴不是均匀缩放的，实际上曲线要比看起来陡很多。同时受爬取方式的影响，GitHub 中 Star 数较少的存储库数量远比我爬取到的多。也就是说，<strong>实际情况下曲线远比这个图表上的陡。</strong>拿点 Star 不容易啊。</p>\n<h2>名称</h2>\n<p><canvas></canvas><br>\n终于知道了原来存储库的名称是有长度限制的...尽管最长有 100 位，<strong>大部分人还是喜欢 8 位长的存储库名。</strong>此外 1 位长的名称也比我预估的要多一些。举几个存储库名称长度为 100 的例子吧。</p>\n<ul>\n<li>testing-something-elsetesting-something-elsetesting-something-elsetesting-something-elsetesting-some</li>\n<li>acts_as_validated_config_so_app_will_not_run_in_random_situation_and_qa_gays_will_not_cry_to_you_whe</li>\n<li>............................................________-....................................-.---......</li>\n<li>----------------------------------------------------------------------------------------------------</li>\n<li>nyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyan</li>\n</ul>\n<p>...创造力有够丰富的。</p>\n<p><canvas></canvas></p>\n<p>最近 GitHub 上有一种奇怪的风气，那就是建立 Awesome 合集<del>骗 Star</del>。看起来 Awesome 存储库满地都是，甚至还出现了关于 Awesome 的 Awesome 合集这种迷惑行为。于是我统计了一下，<del>还好，</del>占比<del>才</del> 0.5% 不到<del>，Awesomer 们任重而道远呐</del>。</p>\n<p><canvas></canvas></p>\n<p>尽管要在 github.io 上托管网站，存储库不一定要以 .github.io 结尾，但我还是统计了一下。拥有这类存储库的用户比我预想的要少一些，看来还有很多人没有完全发挥 GitHub 的完整实力啊<del>（比如我 Doge）</del>。同时<strong>这类存储库在所有存储库中占比 1.12%</strong>，看起来不多<del>，不过至少比 Awesome 多</del>。<br><canvas></canvas><br>\n看得出来 GitHub 对于用户名长度的限制是 1-40 位。用户名最短的 27 位占据了 <code>A-Z</code> 外加 <code>-</code> 的所有可能，而用户名最长的则是一个组织 <a href=\"https://github.com/UOIT-RESEARCH-database-information-group\" rel=\"noopener noreferrer\" target=\"_blank\">UOIT-RESEARCH-database-information-group</a>。不知道是巧合还是某种规律，<strong>最受欢迎的用户名长度和存储库名称长度一样，都是 8</strong>，有点意思。</p>\n<h2>创建时间</h2>\n<p><canvas></canvas><br>\n由于我并没有完整爬取所有存储库，我只能以相对值来统计每月新增存储库数量的变化趋势。<strong>在这个图表中，我将 2017-09 的数据设为了 100%。</strong>你一定一眼就能注意到 2017 年 6,7,8 月的“一柱擎天”。<del datetime=\"2020-02-05T09:18:30+00:00\">我第一次看到这个数据的时候的确愣了一下，不过就着这条新闻看就能明白为什么了：<strong>2017 年 6 月微软收购 GitHub。</strong></del></p>\n<blockquote><p>重新确认了一下，微软收购 GitHub 比这个高峰晚了一年，目前我对这个高峰没有什么很好的解释，如果你有什么思路的话欢迎评论。</p></blockquote>\n<p><strong>需要注意的是这张图表中我排除了 Fork 存储库</strong>，因为 Fork 存储库在 API 中的创建时间是原始存储库的时间，会影响整体趋势。此外，GitHub 中还有一个创建于 2007 年 10 月 29 日的存储库，那就是 <code>id: 1</code> 的...</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"mojombo\" data-mdxgithubp=\"grit\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/mojombo/grit\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>而它的创建者正是 GitHub 的创始人之一 Tom Preston-Werner。</p>\n<h1>一些有趣的结果</h1>\n<p>当初打算自己爬的目的之一就是想看看能不能挖出什么有意思的信息，结果真的有一些不挖不知道的信息。</p>\n<h2>奇怪的存储库</h2>\n<p>在爬取到的所有存储库中，<strong>有 3 个存储库是“无主”的</strong>，即它们的 owner 属性为空。这三个存储库的基本信息如下。</p>\n<div class=\"mdui-table-fluid mdui-table-hoverable\"><table class=\"mdui-table\">\n<thead><tr>\n<th>ID</th>\n<th>名称</th>\n<th>Forked</th>\n<th>Star</th>\n<th>语言</th>\n<th>许可证</th>\n<th>创建于</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>72385291</td>\n<td>vscode-redprl</td>\n<td>否</td>\n<td>10</td>\n<td>TypeScript</td>\n<td>apache-2.0</td>\n<td>2016-10-31 08:50:01</td>\n</tr>\n<tr>\n<td>181218346</td>\n<td>electron-sys</td>\n<td>否</td>\n<td>10</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-14 03:20:56</td>\n</tr>\n<tr>\n<td>181391880</td>\n<td>node-sys</td>\n<td>否</td>\n<td>6</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-15 09:33:08</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong>更奇怪的是这三个存储库“无主”的情况还不一样。</strong>第一个存储库可以通过 <code>/repositories</code> 这个 GitHub API 找到， <a href=\"https://api.github.com/repositories?since=72385290\" target=\"_blank\" rel=\"noopener noreferrer\">这个链接</a>中的第一个存储库就是它；而其余两个存储库甚至无法在 <code>/repositories</code> API 中找到。不过就算能在 API 中找到第一个存储库，它的 <code>html_url</code>，即 <code>https://github.com//vscode-redprl</code> 仍然是不可访问的。这可能是 GitHub 早期的一个 Bug 导致的，不过我仍然对爬虫是如何找到这三个存储库的以及这些 Stars 是哪里来的感到好奇。</p>\n<h2>奇怪的用户名</h2>\n<p>在爬虫爬了一段时间以后，API 中突然开始出现大量的以 fdp 开头的 18 位乱码作为用户名的用户。这些用户拥有的存储库和 starred 的存储库都为 0，而他们的 <code>html_url</code> 为 404。以下是几个例子。</p>\n<ul>\n<li>fdpEpolGCEdQX4ZlRJ</li>\n<li>fdp8XaVrdtmDZnO5pR</li>\n<li>fdp8XRAGnwAOkTr2Ya</li>\n</ul>\n<p>由于我的爬虫并没有超过 Rate Limit，所以我排除了这是污染数据的可能。我怀疑这可能是某种 Bot 账户，于是一边更新爬虫过滤掉了这些用户，一边给 GitHub 支持发邮件问了具体情况。过了两天 GitHub 回复我说这些是<strong>被自动判为可疑进而被封禁的用户</strong>（原话是 they have been flagged by our automated measures for detecting suspicious behavior）。<del>想到我正在疯狂爬取 GitHub，突然害怕.webp</del></p>\n<p>行吧。</p>\n<h1>技术细节</h1>\n<p>爬虫使用 Python3 编写，数据库使用 MySQL。爬虫共使用了 4 个 API Token，在两台服务器上分布式爬取。爬取思路为：</p>\n<ol>\n<li>通过 <code>/users</code> API 遍历用户，每个请求最多获取 30 个用户信息</li>\n<li>循环 30 个用户，分别获取 <code>/users/&lt;user_name&gt;/starred</code> 和 <code>/users/&lt;user_name&gt;/repos</code> API 中的存储库信息，每个请求最多获取 100 个存储库信息，超过 100 个的分页获取</li>\n<li>提取存储库信息，插入数据库。对于已存在的存储库，更新数据</li>\n<li>获取下 30 个用户信息</li>\n</ol>\n<p>由于爬取过程中我多次调整了爬虫逻辑，爬虫爬取到的用户 ID 区间并非连续的，具体区间为1-839586, 14800001-14885493 及 28965251-31161101。</p>\n<h1>免责声明</h1>\n<p>本站会尽可能地提供准确信息，但本站不对此文章中信息的准确性和即时性及带来的任何影响负责。</p>\n<p>本站不代表 GitHub 官方，本文仅供学习之用，请不要将本文内容直接用于任何商业项目中。</p>\n<h1>数据集下载</h1>\n<p>导出的 SQL 文件大约为 1.38GB，全部放在了 GitHub 上（在危险的边缘试探.webp</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"github-analysis-2019\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/github-analysis-2019\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>此外我也提供了 MEGA 下载，链接<a href=\"https://mega.nz/#F!juxm3A6T!7Vwpzi82W1OFrqTLu1A1pQ\">在这里</a>。</p>\n","link":"https://flyhigher.top/develop/1564.html"},{"title":"Milkice 跨年红包解谜 Writeup 及无垠跨年红包解谜答案","date":"2020-01-02 04:29:19","description":"\n<blockquote><p><del>又到了水文章的时间呢</del></p></blockquote>\n<p>先说明一下，这篇文章原本不是在计划中的，而原来说好的「在路上的两篇」文章<del>绝对不会咕</del>。我自己的红包答案本来打算直接塞在年度总结里的，结果发现稍微有些长，再加上我还花了一些时间解了<a href=\"https://milkice.me/\">奶冰</a>的红包解谜游戏，就打算把两个解谜过程放在一起单独写一篇文章。<del>真是个水文章的好理由</del>（被打死</p>\n<h1>奶<del> 子 </del>冰的红包</h1>\n<p>奶冰的红包题目比我的难多了，所以让我们先从难的开始吧。首先看一下<a href=\"https://milkice.me/2019/12/31/2019-summary/\">题目</a>：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1524\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\" alt=\"\" width=\"746\" height=\"410\"></a>\n<p>入口是 <code>happy.2020.milkice.me</code>，扔到浏览器里面表示找不到 IP，那么大概率就是 DNS 的 TXT 记录了，查一下得到 <code>nb2hi4dthixs63ljnrvwsy3ffzwwkl3tivrvezluomxxg5dsmvqw2ltqmnqxa3th</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1525\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\" alt=\"\" width=\"896\" height=\"278\"></a>\n<p>第一眼没看出来是什么编码，直觉是 BaseXX 系列的编码，加上提示“不只有 Base64”，可以推断出是 Base32，转大写解码得到 <code>https://milkice.me/sEcRets/stream.pcapng</code>。是个 URL，下载得到一个 Wireshark 文件，打开一看是和某 USB 设备的通讯抓包。<del>不会做，不做了。</del></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1526\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\" alt=\"\" width=\"1500\" height=\"813\"></a>\n<p>奶冰提示我“Google 上搜得到”，结合第二条提示搜索“wacom pcapng”找到了<a href=\"https://blogs.tunelko.com/2017/02/05/bitsctf-tom-and-jerry-50-points/\">这篇文章</a>（<del>这™就是答案啊</del>）。看起来是一样的套路，即通过解析数据得到数位板上画的内容，于是按文章的思路筛选出数位板发给主机的数据，导出，然后再用 tshark 导出文本数据。本来我想直接用文章中的 POC 的，结果折腾半天因为源的蜜汁原因库没装上，于是按文章中给出的数据结构自己写了段代码，分别导出 X、Y 轴数据扔进 Excel 画散点图。（<del>别问我为什么用 Excel，因为我手边没有更好的工具了</del>）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1528\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\" alt=\"\" width=\"1280\" height=\"530\"></a>\n<p><span>翻车现场之一</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1539\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\" alt=\"\" width=\"1000\" height=\"286\"></a>\n<p><span>懵逼奶冰.webp</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1533\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\" alt=\"\" width=\"1500\" height=\"462\"></a>\n<p>看得出有手写文字，不过是上下颠倒的，翻转图片得 <code>https://milkice.me/2020/uso.zip</code>。是个 zip，下载打开一看，有密码。<del>不会解，不做了。</del> 第一反应是暴力解密码，但是暴力跑了 15 分钟还是没有跑出来。暴力太不优雅了，肯定不是正确思路，但奶冰什么都不肯说了。不过在这时我终于发现第一个红包口令码就藏在压缩包的注释中，Get。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1544\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\" alt=\"\" width=\"806\" height=\"593\"></a>\n<p>然而题还没解完，回去看提示，看到提供了 osu 谱面下载，于是打算不管怎么样先下载来看看。然而 osu 谱面下载要登录，只好又花了几分钟找到第三方站点，成功下载。这时候可以注意到 uso.zip 里有个同名文件（432314 Mike Greene - Bill Nye the Science Guy Theme Song (Chinese Intro).osz），可以联想到是明文攻击。好吧，上 ARCHPR，十秒解出。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1530\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\" alt=\"\" width=\"462\" height=\"643\"></a>\n<p><span>现场还原.jpg</span></p>\n<p>.osz 文件并不是明文，猜测是压缩包（和 .pptx 一个思路嘛），于是改后缀 .zip 顺利打开。然后红包口令码就藏在奶冰的 .osu 文件中了，由提示可知是明文，打开即可得到。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1542\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\" alt=\"\" width=\"457\" height=\"255\"></a>\n<h1>我的红包</h1>\n<p>相比起来<a href=\"https://flyhigher.top/diary/1464.html\">我的题目</a>就简单很多了嘛...三天时间一共发出了 25 个红包，包括一位重复领取的🌚，比前几年还是多了一些的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\" alt=\"\" width=\"500\" height=\"306\" class=\"aligncenter size-full wp-image-1554\"></a>\n<p><span>这位同学以后请不要多次领取🌚</span></p>\n<p>那么来看看答案吧。</p>\n<h2>第一阶段</h2>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>首先观察字符串，可以发现 <code>.</code> <code>/</code> <code>_</code> 等一些 ASCII 字符原样留在了字符串中，而其他字符被由 <code>=</code> 和十六进制构成的某种编码所替代。如果你正好有所了解，你应该能认出这是 Quoted-printable 编码，这是一种常用于邮件中的编码，可以用<a href=\"https://mothereff.in/quoted-printable\">这个页面</a>解码。如果你不了解，你也应该可以发现这种编码和 URL 编码非常相似。如果你把 <code>=</code> 替换为 <code>%</code>，那么你就可以用各种方法顺利地把它按 URL 编码来进行解码，最后可以得到 <code>αхtоn.іm/соdе_оf_2020_⒈mρз</code>。这个字符串里大部分字符都不是 ASCII 字符，只是长得像而已。根据第一个提示“全是 ASCII 字符”，按样子把字符串用 ASCII 字符抄一遍，可以得到最终 URL 为 <code>axton.im/code_of_2020_1.mp3</code>。</p>\n<h2>第二阶段</h2>\n<p>下载音频，可以听出音频是经过某种处理的白噪音。白噪音的特点是各频段的功率都均匀分布，在白噪音上做文章，很容易就可以联想到线索藏在频谱中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1534\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\" alt=\"\" width=\"1200\" height=\"719\"></a>\n<p>频谱被处理成了 24x3 的网格，结合第二条提示“24x3，横向读取”可以推断出是将频谱当作二进制读取，得到 <code>01111001 01110010 01100011 00101110 01101101 01100101 00101111 00110010 00110000</code>，转为 ASCII 字符可得 <code>yrc.me/20</code>。</p>\n<h2>第三阶段</h2>\n<p>打开上一步得到的页面，提示要求输入十位数密码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1536\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\" alt=\"\" width=\"663\" height=\"460\"></a>\n<p>如果你在上一步注意到了这个音频文件奇怪的属性，你可以反应过来这里的密码就是 <code>2000202020</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1537\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\" alt=\"\" width=\"421\" height=\"651\"></a>\n<p>如果你没有注意到，查看页面代码可以看到一条注释 <code>&lt;!-- Tips: the attribute of the audio --&gt;</code> 将你引导向音频文件的属性。输入密码，解锁即可进入下一步。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1535\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\" alt=\"\" width=\"397\" height=\"223\"></a>\n<h2>第四阶段</h2>\n<p>可以看到是一张图片，内容为“<del>.JPG</del>”和“.ZIP”。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-1532\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n<p>和去年一样的套路，下载图片，将后缀名改为 .zip 然后打开，可以看到 README.txt。</p>\n<h2>最后一步</h2>\n<p>查看 README.txt 的内容，可以了解到需要去 🤔.axton.cc 获取红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1538\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\" alt=\"\" width=\"1131\" height=\"278\"></a>\n<p>扔到浏览器里会出现奶冰同款找不到 IP，于是可以联想到 TXT 记录。唯一的问题是 🤔 这个 Emoji 需要如何处理。域名使用 Punycode 将 Unicode 字符转换为 ASCII 字符，特点是以 <code>xn--</code> 开头。如果你把上面这个域名扔进浏览器，你会发现它变成了 <code>xn--wp9h.axton.cc</code>。然后查询 TXT 记录，即可得到红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1527\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\" alt=\"\" width=\"804\" height=\"557\"></a>\n","link":"https://flyhigher.top/develop/1519.html"},{"title":"无垠 2019 年度总结","date":"2019-12-29 12:25:52","description":"\n<p>又是时间飞快的一年...写 2018 总结的情景似乎还在眼前，转眼居然已经到 2019 年末了。</p>\n<p>2019 年，发生了太多事情，包括真的转折了人生的高考，这也导致我博客更新的不多（难以置信居然才更了两篇...），不过两篇技术性文章已经在路上了，可以期待一下。</p>\n<p>2019 年我也学了不少东西（单指技术方面），比如终于认真学了 Vue（但是还要练手）。书买了一大堆，看完的倒是没几本orz</p>\n<p>呼，好吧，是时候回顾一下充满坎坷的这一年了。2019 年还剩下最后两天，希望 2020 年，我能做得更好。</p>\n<h1>一些数据</h1>\n<p>照惯例先来看看一些数据吧。今年是统计系统完整统计了的第二年，终于可以和去年的数据比较一下了。以下数据的统计范围是 2019年1月1日0时至 2019年12月29日20时。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 26,901 (<span>+4%</span>)，年 PV 76,583 (<span>+3%</span>)，日均 UV 73.7，平均停留时间 5分13秒 (<span>-13.8%</span>)，平均跳出率 53% (<span>+20.5%</span>)。一年有效文章数 2 (<span>-50%</span>)，新增评论 439 条。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\" alt=\"\" width=\"1000\" height=\"1143\" class=\"aligncenter size-full wp-image-1511\"></a>\n<p>有趣的是今年文章数腰斩，访问数反而小有提升。<del>如果我哪天不更新了，访问数是不是可以无限大呢？</del></p>\n<p>今年博客最大的改动就是把整体风格切换到了 Material Design 2（当然这是 <a href=\"https://flyhigher.top/develop/788.html\">MDx</a> 中的可选功能，给自己打个广告2333），此外还有比较失败的 WebP 改造计划，因为和缓存冲突已经回滚了。<a href=\"https://flyhigher.top/develop/1245.html\">ABS 系统</a>进展不大，主要是真的没有太多时间，还是要再学习一个。</p>\n<h2>个人主页</h2>\n<p>虽然个人主页的 TODO List 列了老长，但今年完全没有更新，也没有推广，从今年 8 月底开始还莫名被某墙认证了，直到 11 月底才恢复，于是今年总访问量比去年少了很多，</p>\n<p>有多少呢？这么少：总 UV 2,141 (<span>-65.9%</span>)，总 PV 2,744 (<span>-66.6%</span>)，日均 UV 6 (<span>-65.9%</span>)，平均停留时间 62秒 (<span>+19.2%</span>)。主要来源是知乎和 V2EX，还有一些甚至是从微信来的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\" alt=\"\" width=\"1000\" height=\"1103\" class=\"aligncenter size-full wp-image-1512\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 8 次，新增 171 commits，2 种语言的翻译，Star 数增加了 175，现有 408。感谢所有人的支持，尤其是 <a href=\"https://github.com/Sn0bzy\" rel=\"noopener noreferrer\" target=\"_blank\">Hasan CAN</a>, <a href=\"https://github.com/yechs\" rel=\"noopener noreferrer\" target=\"_blank\">Ye Shu</a>, <a href=\"https://github.com/StarryLeo\" rel=\"noopener noreferrer\" target=\"_blank\">StarryLeo</a>, <a href=\"https://github.com/DCTewi\" rel=\"noopener noreferrer\" target=\"_blank\">冻葱Tewi</a>, <a href=\"https://github.com/syfxlin\" rel=\"noopener noreferrer\" target=\"_blank\">Otstar Lin</a> 等为 MDx 做出了不小贡献的你们。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：<a href=\"https://flyhigher.top/photograph/1309.html\">上手</a> DJI OSMO Pocket</li>\n<li>四月：最后一次参加浙江省普通高中学业水平考试</li>\n<li>五月：MDx 喜提 300 Stars</li>\n<li>六月：高考 <del>炸了，差亿点点上浙大</del>\n</li>\n<li>六月：入手了 Oneplus 7 Pro</li>\n<li>六月：和同学一起去成都重庆旅行</li>\n<li>六月：第一次近距离感受到地震</li>\n<li>六月：<a href=\"https://flyhigher.top/diary/1411.html\">入手</a>了一台雷蛇灵刃 15，目前是主力机</li>\n<li>七月：参与组织 THE Hack 2019 活动</li>\n<li>七月：面基了 <a href=\"https://itroy.cc/\" rel=\"noopener noreferrer\" target=\"_blank\">Tory</a>, Bie Shi 和 <a href=\"https://oxz.me/\" rel=\"noopener noreferrer\" target=\"_blank\">FHYunCai</a>\n</li>\n<li>八月：一个人去厦门武汉转了一圈，拍了自己的第一个 Vlog</li>\n<li>八月：入手了一个 Kindle Paperwhite 4，没有泡面可以压，于是用来看英文小说了</li>\n<li>八月：加入 TEDxNingbo 志愿者团队</li>\n<li>八月：和 Ralph 面基</li>\n<li>八月：入手了一个 Yubikey</li>\n<li>九月：人生第一次参加雅思考试 <del>7分，蛮开心的</del>\n</li>\n<li>十月：入手了一个 Samsung Galaxy Watch Active 2 <del>觉得不值</del>\n</li>\n<li>十一月：MDx 达到 400 Stars</li>\n<li>十一月：为 TEDxNingbo 设计开发的 H5 上线</li>\n<li>十一月：入手了第一台胶片相机，试图入坑胶片摄影</li>\n<li>十一月：参加 TEDxNingbo 2019 大会</li>\n<li>十二月：<del>我 Cytus II 入门了</del>\n</li>\n</ul>\n<h1>跨年红包</h1>\n<p>这算「传统习俗」了。和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2020年1月2日。</p>\n<p>今年的解谜旅程，从下面这个字符串开始。</p>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>由于今年的题目比以前稍微难了一些，所以今年的红包金额还是比较大的，而且不限量，尽你所能试一试吧。</p>\n<p>一点你可能用得上的提示：URL 里全是 ASCII 字符 / 24x3，横向读取。</p>\n<p><a href=\"https://flyhigher.top/develop/1519.html\">答案</a>已公布。</p>\n<h1>跨年海报</h1>\n<p>这算是另一个「传统习俗」（笑）。因为我有做跨年海报的习惯，所以以下就是今年份的海报啦。</p>\n<p>用了 C4D+PS，还有我的一整个下午。</p>\n<p>提前祝各位新年快乐！</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter wp-image-1467 size-large\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n","link":"https://flyhigher.top/diary/1464.html"}]