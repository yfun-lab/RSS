[{"title":"我也试试啊","date":"2022-06-07 09:37:38","description":"\n<p data-pid=\"04PVh5m6\">我也来了，</p>\n<p data-pid=\"5RauAoj2\">试试就试试，</p>\n<p data-pid=\"mCYsFitA\">哈哈哈！</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhang-guo-liang-72-70?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">无尘</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/191178729?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"Kindle 笔记导出方法大合集","date":"2022-06-07 08:09:11","description":"导出 Kindle 的读书笔记到底有哪些办法、这些办法有什么优缺点以及可以把笔记导入到笔记应用中吗？这些问题你都能得到解答。<a href=\"https://sspai.com/post/73662\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/73662"},{"title":"集自动发布、本地管理于一身：基于 WordPress 同步的博客管理方案分享","date":"2022-06-07 06:32:28","description":"2005 年，我开始用博客记录感想，2018 年，我偶然接触到 Jekyll，被其简洁的界面和便捷性打动，重新恢复了博客记录。到了 2021 年，随着文章和发布渠道的增多，文章的修改和管理变得愈加困难。慢慢地，我开始习惯本地 Markdown 只做初稿排版，更新则只在外部平台上进行。2022 年，由于疫情被封控在家两个月。时间多了，我继续折腾博客，希望找到一个界面美观，能自动发布且具备本地管理功能的博客方案。<a href=\"https://sspai.com/post/73658\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/73658"},{"title":"派早报：WWDC22 开幕，Pixel 发布 6 月功能更新等","date":"2022-06-07 01:10:37","description":"中国广电启动 192 号码预约活动，英特尔首次展示旗舰锐炫 Alchemist 桌面显卡实物等。 <a href=\"https://sspai.com/post/73656\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/73656"},{"title":"一图流 | Apple WWDC 2022 回顾","date":"2022-06-06 22:11:52","description":"WWDC22 的一图流来啦。<a href=\"https://sspai.com/post/73653\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/73653"},{"title":"系统更新如期而至，M2 芯片意外登场：WWDC22 发布会回顾","date":"2022-06-06 21:46:25","description":"Apple 推出 iOS 16、iPadOS 16、watchOS 9 和 macOS Ventura，还正式宣布了 M2 芯片，以及首款搭载 M2 芯片的全新设计 MacBook Air。<a href=\"https://sspai.com/post/73654\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/73654"},{"title":"派评 | 近期值得关注的 App","date":"2022-06-06 09:30:00","description":"你可以通过文章目录快速跳转到你感兴趣的内容。如果发现了其它感兴趣的 App 或者关注的话题，也欢迎在评论区和我们进行讨论。<a href=\"https://sspai.com/post/73646\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/73646"},{"title":"日企社畜的 Kaggle GM 之路","date":"2022-06-06 09:09:54","description":"\n<p></p>\n<p data-pid=\"Jn2z1L-4\"><a href=\"https://link.zhihu.com/?target=https%3A//www.kaggle.com/haqishen\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">kaggle.com/haqishen</span><span class=\"invisible\"></span></a></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-fb2c8b5fc15e0c9551db88ca19864c95_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1916\" data-rawheight=\"918\" class=\"origin_image zh-lightbox-thumb\" width=\"1916\" data-original=\"https://pic2.zhimg.com/v2-fb2c8b5fc15e0c9551db88ca19864c95_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<h2>前言</h2>\n<blockquote data-pid=\"p2SL3D-N\">最近拖延症又犯了，这篇文章居然前前后后写了两周才发出来，罪过罪过~</blockquote>\n<p data-pid=\"k-xP4gG7\">其实我第一次参加 Kaggle 比赛可以追溯到2017年，也就是我刚毕业参（成）加（为）工（社）作（畜）的那一年。从那年起我虽然断断续续的参加了好几个比赛吧，但因种种原因没能把任何一个坚持到最后= =</p>\n<p data-pid=\"-8mwpOV7\">真正意义上说我开始认真参赛应该要从19年6月底算起，到我在今年20年6月底拿下 GrandMaster ，正好过去了一年时间。</p>\n<p data-pid=\"EWVzwcx2\">在这一年里我一共陆陆续续参加了9场比赛，收获5枚金牌（其中3个solo），2枚银牌（2个都是solo）以及1个铜牌。</p>\n<p data-pid=\"APL0-Etg\">在这过程中得到了非常非常多贵人的相助，虽然他们分散在世界各地，但 Kaggle 这个平台让我们跨过时空产生了联系。我非常地感谢他们。</p>\n<p data-pid=\"g3cd7oVO\">废话就不多说了，疫情结束后你们谁要是来东京玩的话来找我！请你们喝酒！</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-27e68d6d355932cc3e73a866d1f6f449_b.jpg\" data-size=\"normal\" data-rawwidth=\"1528\" data-rawheight=\"1334\" class=\"origin_image zh-lightbox-thumb\" width=\"1528\" data-original=\"https://pic2.zhimg.com/v2-27e68d6d355932cc3e73a866d1f6f449_r.jpg\"><figcaption>2019.6 ~ 2020.6 战绩</figcaption></figure><h2>简短的自我介绍</h2>\n<p data-pid=\"FgnqrCd_\">14年电子商务专业本科毕业后赴日留学，侥幸跨专业考入东京大学成为CS狗，后在某年轻的正教授的研究室下研究计算机视觉（CV）。</p>\n<p data-pid=\"HV5CNcGB\">17年初硕士毕业后留日工作。在第一家公司做计算广告，优化CTR，CVR，CPM之类的。</p>\n<p data-pid=\"oCoq3YNS\">19年中跳槽，目前在 LINE corp. 的机器学习组里为公司里的各种 Service 做推荐系统。</p>\n<p data-pid=\"sFHAWCMa\">由于 LINE 是属于垄断寡头那一类的公司，所以业务模型对精度要求不高。导致我内心中很有危机感，于是乎到 Kaggle 上学习。没想到一学竟然学成了 GrandMaster，只能感叹世事难料，人生处处充满惊喜。感恩。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h2>我的第一个 Solo Gold</h2>\n<p data-pid=\"kS-FBjMw\">现在回想起来我仍然觉得自己简直是幸运星降世。我在一个我当时完全不熟悉的领域（NLP）里参赛，居然获得了一枚 Solo 金牌（我的首金），而且还拿到了 $5,000 的比赛奖金！</p>\n<p data-pid=\"g80nRk-d\">让我们从头讲起。</p>\n<p data-pid=\"SyBGGuCY\">之前我在学校做的是计算机视觉（CV）方向的研究，工作之后主要做推荐系统（Tabular），对 NLP 的认识只停留在听说过 RNN，LSTM 这类名词的程度。</p>\n<p data-pid=\"1pHQ6j1q\">而去年6月份我在机缘巧合下拥有了一定的计算资源，为了避免浪费我决定找个比赛玩玩，然后我就看中了 Jigsaw 举办的这个 NLP 比赛。Jigsaw 在 2018 年已经举办了一场 NLP 比赛了，这次是第二场。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-3cbc080d8a898f80de0662e24ebc204a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1902\" data-rawheight=\"420\" class=\"origin_image zh-lightbox-thumb\" width=\"1902\" data-original=\"https://pic3.zhimg.com/v2-3cbc080d8a898f80de0662e24ebc204a_r.jpg\"></figure><p data-pid=\"sLy-P-c4\"><a href=\"https://link.zhihu.com/?target=https%3A//www.kaggle.com/c/jigsaw-unintended-bias-in-toxicity-classification\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">kaggle.com/c/jigsaw-uni</span><span class=\"invisible\">ntended-bias-in-toxicity-classification</span><span class=\"ellipsis\"></span></a></p>\n<p data-pid=\"PyavPd-4\">Jigsaw 的这个比赛是一个英文文本二分类的任务，需要训练模型自动判断文本是否具有羞辱性（toxic）。这是一个相对来说容易上手的 NLP 任务。</p>\n<p data-pid=\"cwtB0o_3\">当时决定要参加这个比赛，最初的想法只是想学习一下 NLP 相关的基础知识，以后遇到相关的话题好歹能插上两句这样。恰逢 Bert 横空出世，我干脆就跳过了 LSTM 直接 Bert 来调参以及试 trick 了。</p>\n<p data-pid=\"I0LVvcaZ\">说到这里要非常感谢 Kaggle 社区里的很多人，他们在 Kernel 以及 Discuss 里分享了大量知识以及代码，让我得以迅速地熟悉 NLP 的各种基础操作。已至于比赛尚未结束时我已经能自己想出新的 idea，并且用代码实现来进行实验了。</p>\n<p data-pid=\"A-hsL0Ho\">比赛过程中我的排名在 Public LB 上一直半死不活，在 Top 25~50 前后徘徊。当然我个人是非常满意的，毕竟我第一次接触 NLP，能守住 Silver Zone 可以说是已经符合我的心理预期。金牌？压根儿没想过。</p>\n<p data-pid=\"44RGCkDH\">也正是因为我主要目的是为了学习，对冲榜没有太大野心，所以直到最后也没有组队（其实是不好意思和大佬们搭讪 = =）</p>\n<p data-pid=\"sUrU5bzt\">然而生活总是会不经意间给人以惊喜，我在 Public LB 上只能排在30+的 Solution，在 Private LB 上竟然一举冲进了前10，排在了第8上。大大出乎我了我的意料。更幸运的是这个比赛设置的奖金发到第十名，我也从中分到了 $5000！</p>\n<p data-pid=\"BfkDYr2c\">于是在这一连串的惊喜中，我在自己第一次认真参加的 Kaggle 比赛中拿到了我的第一个 Solo Gold，以及第一笔参赛奖金。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-e45695e9231f6d62ce88d3fa9ad56da9_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1904\" data-rawheight=\"204\" class=\"origin_image zh-lightbox-thumb\" width=\"1904\" data-original=\"https://pic2.zhimg.com/v2-e45695e9231f6d62ce88d3fa9ad56da9_r.jpg\"></figure><p data-pid=\"2DRc1sAG\">（附上当时我写的赛后总结英文版：<a href=\"https://link.zhihu.com/?target=https%3A//www.kaggle.com/c/jigsaw-unintended-bias-in-toxicity-classification/discussion/100961\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">kaggle.com/c/jigsaw-uni</span><span class=\"invisible\">ntended-bias-in-toxicity-classification/discussion/100961</span><span class=\"ellipsis\"></span></a>）</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h2>我的第二个 Solo Gold</h2>\n<p data-pid=\"3_zpaRZr\">如果有人对我自称幸运星降世表示怀疑——那我跟你讲，我在自己第二个认真参加的 Kaggle 比赛中拿到了我的第二个 Solo Gold，以及第二笔奖金！[手动狗头][手动狗头][手动狗头]</p>\n<p data-pid=\"5iXoDsVQ\">服不服！</p>\n<p data-pid=\"_8YSPsUd\">好吧好吧，故事咱还是从头讲起。</p>\n<p data-pid=\"qo-LveDz\">比较熟悉 Kaggle 晋升规则的小伙伴可能会了解，想要晋升 Kaggle GM，一共需要5枚金牌，并且最少要有1枚 Solo 金牌。于是乎一时间 Solo 金成为晋升 GM 的最大拦路虎，多少风云好汉都倒在了这一道门槛上，哪怕身怀6~8枚团队金牌，也只能望 GM 生叹，无法获得这尊贵的金色标志。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-2a23c8721a6d4f50321615f6e4a68ea4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1876\" data-rawheight=\"564\" class=\"origin_image zh-lightbox-thumb\" width=\"1876\" data-original=\"https://pic1.zhimg.com/v2-2a23c8721a6d4f50321615f6e4a68ea4_r.jpg\"></figure><p data-pid=\"ULrALEx7\">那么问题就来了。我一上来就把最大的拦路虎打倒了，还有什么能阻止我上 GM？我当时就觉得！没有！于是我兴致勃勃地冲进了下一个比赛。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-7c3fe7fd9021cf062150914c9861974d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1898\" data-rawheight=\"420\" class=\"origin_image zh-lightbox-thumb\" width=\"1898\" data-original=\"https://pic2.zhimg.com/v2-7c3fe7fd9021cf062150914c9861974d_r.jpg\"></figure><p data-pid=\"HkFxJ5j6\"><a href=\"https://link.zhihu.com/?target=https%3A//www.kaggle.com/c/aptos2019-blindness-detection\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">kaggle.com/c/aptos2019-</span><span class=\"invisible\">blindness-detection</span><span class=\"ellipsis\"></span></a></p>\n<p data-pid=\"cicOWwai\">这是一个图像分类的比赛，要求训练模型通过视网膜图片自动判断<b>糖尿病性网膜症</b>处于哪个阶段，从无病到病情严重一共分为5个等级。</p>\n<p data-pid=\"NRBMqLxW\">这是我熟悉的 CV 领域，但这个比赛有一个问题，那就是本地实验结果无法与 Public LB 对上。线下实验结果好的模型，提交上去分数居然没有提高。这可如何是好？</p>\n<p data-pid=\"mMCJrTLd\">答案是没有答案。我只能一边努力的做高线下的成绩，一边望着排行榜的高分暗自着急。</p>\n<p data-pid=\"AeRLJ-1G\">我曾经在比赛中期一度冲进了金牌区，但是又因为后继乏力，排名不断下降。如果你们之中有人打过比赛的话，一定能体会到我的这种心情——前排那帮人到底做了什么？居然还能继续上分？</p>\n<p data-pid=\"Cb45rewz\">哎！过程就不多说了，在比赛接近尾声时我发现我无法冲进金牌区，但又离金牌区并不遥远，于是萌生了组队的想法。但当时我还不认识各位大佬们，又由于时间过于紧迫，临时搭讪的人要不就是已经组好了队，要不就是提交次数总和已经超额无法组上队伍。于是乎我发现我竟然落单了！T T</p>\n<p data-pid=\"qwFL0El3\">好吧好吧，既然落单了那就只能尽人事听天命了。我最终选择了我线下分数最高（但并不是在 Public LB 上最高）的一套模型交了上去，搏一搏，单车变摩托，万一线下分数更接近 Private LB 呢？当然结果我也已经剧透过了，最终结果是我在私榜上排第四名，又一个 Solo Gold 入手了。而且这个比赛奖金正好发到第四，所以我又莫名其妙拿了 $5000 的比赛奖金。</p>\n<p data-pid=\"Lzq93b4Y\">在这场比赛里我最大的收获就是，相信<b>线下实验 （Trust CV）</b>。</p>\n<p data-pid=\"EpNyWekI\">说到这里我得插一句，比赛刚结束的时候我其实是排在第七，但是前排有2个人由于互相之间私下共享模型导致双双被删，还有另一组人由于在早期开小号增加提交次数也被删了。于是乎这么一排下来我居然就变成了第四名。实在是世事难料，祸福难知。</p>\n<p data-pid=\"lDG6KXZR\">恰逢比赛期间 EfficientNet 横空出世，在赛中大放异彩 （赛后发现前10里起码有8个人用了 EfficientNet）。所以我这次终于算是在 CV 领域也跟上了时代的脚步。</p>\n<p data-pid=\"y-ES_0fl\">哪怕在一年后的今天 (20年7月初)，EfficientNet 仍然具有 SOTA 的实力。在此强烈推荐给大家，没用过的一定要试一试。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-8fa0f9622c5ef5a88f7590fc7210ad8a_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1898\" data-rawheight=\"194\" class=\"origin_image zh-lightbox-thumb\" width=\"1898\" data-original=\"https://pic3.zhimg.com/v2-8fa0f9622c5ef5a88f7590fc7210ad8a_r.jpg\"></figure><p data-pid=\"cKuv05M8\">（附上我当时写的赛后总结英文版：<a href=\"https://link.zhihu.com/?target=https%3A//www.kaggle.com/c/aptos2019-blindness-detection/discussion/107987\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">kaggle.com/c/aptos2019-</span><span class=\"invisible\">blindness-detection/discussion/107987</span><span class=\"ellipsis\"></span></a>）</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h2><b>折戟沉沙期</b></h2>\n<p data-pid=\"8s3-DIZV\">入手了两枚 Solo Gold 以及2次比赛奖金的我已经完全膨胀了，当时甚至觉得拿 Solo Gold 就如切瓜砍菜一般容易，我马上就要拿下5个 Solo Gold 成为 Solo GM 走上人生巅峰啦！</p>\n<p data-pid=\"Jk5VwyK_\">然后现实马上给了我两巴掌，一左一右，讲究。</p>\n<p data-pid=\"cDe-xPKE\">在接下来的2场比赛里我颗粒无收，都只拿到了银牌。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-c5e50b7984c876640bade547525b95de_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1906\" data-rawheight=\"462\" class=\"origin_image zh-lightbox-thumb\" width=\"1906\" data-original=\"https://pic3.zhimg.com/v2-c5e50b7984c876640bade547525b95de_r.jpg\"></figure><p data-pid=\"E_P6ZKyo\">所以说没有任何人是会一直受到上天眷顾的，世界上牛逼的人多了去了，最好还是不要做太过分的梦。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h2>我的第三个 Solo Gold</h2>\n<p data-pid=\"OjYXVE8-\">实话说在我获得的5个金牌中，这是唯一一个，在开榜之前我就100%确信自己能拿到金牌的比赛。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-17efeb6de152cb9e11ed5b09895976af_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1898\" data-rawheight=\"420\" class=\"origin_image zh-lightbox-thumb\" width=\"1898\" data-original=\"https://pic4.zhimg.com/v2-17efeb6de152cb9e11ed5b09895976af_r.jpg\"></figure><p data-pid=\"bfDDGtoP\"><a href=\"https://link.zhihu.com/?target=https%3A//www.kaggle.com/c/bengaliai-cv19\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">kaggle.com/c/bengaliai-</span><span class=\"invisible\">cv19</span><span class=\"ellipsis\"></span></a></p>\n<p data-pid=\"Q-KVLfQx\">原因其实特别简单，因为绝大多数人直到比赛结束那天都还没把题目审明白= =</p>\n<p data-pid=\"ZO0PNjvV\">这个比赛乍看之下，只是一个普通的孟加拉文的OCR任务而已。</p>\n<p data-pid=\"5z5SmcYN\">首先，每个孟加拉文都可由3个部分组成，这三个部分分别叫做 grapheme_root, vowel_diacritic, and consonant_diacritic. </p>\n<p data-pid=\"bkIODwCv\">这有点类似于汉字的”艹“字头加下面一个”早“就构成了”草“一样的感觉。艹和早，就是草字的两个”部分“。</p>\n<p data-pid=\"uQb0_Wq5\">构成孟加拉文字的”部分“是有限的，加起来只有不到200种，但排列组合后形成的”文字“却种类繁多（超过1w种）。在这种情况下，官方只给出了其中1000多种文字，希望我们训练模型去识别他们的3个”部分“，以此达到只用1000多种文字训练，却可以识别出上万种文字的效果（因为只要能正确识别3个部分，就能组合成唯一的文字）</p>\n<p data-pid=\"OR8c4B0H\">同时，<b>官方在比赛声明中提到了私榜数据集中包含了训练集中未出现过的”文字“，但所有”部分“都是已知的。</b></p>\n<p data-pid=\"t3dpuM5p\">很明显，从未在训练集中出现过的数据是非常难以被正确识别的。所以这是一句非常重要的声明，但是却被大多数人忽略掉了。</p>\n<p data-pid=\"vo1KDYSl\">所以其实没啥好说的，比赛后根据大家公开的信息，我们得知共有11支队伍对未知的”文字“进行了优化，结果他们最终都拿到了金牌（包括 Solo 的我），另有3支队伍（或个人）靠抽奖抽中了金牌。</p>\n<p data-pid=\"pWQbE39n\"><b>审题，很重要。</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-f8691fcc804d6cdc72835469aa88b0fd_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1906\" data-rawheight=\"218\" class=\"origin_image zh-lightbox-thumb\" width=\"1906\" data-original=\"https://pic2.zhimg.com/v2-f8691fcc804d6cdc72835469aa88b0fd_r.jpg\"></figure><p data-pid=\"bXoBw3SS\">（附上我当时写的赛后总结英文版：<a href=\"https://link.zhihu.com/?target=https%3A//www.kaggle.com/c/bengaliai-cv19/discussion/135990\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">kaggle.com/c/bengaliai-</span><span class=\"invisible\">cv19/discussion/135990</span><span class=\"ellipsis\"></span></a>）</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h2>我的第一个 Team Gold</h2>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-3228375d929b30556a87c0216d1f64b2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1900\" data-rawheight=\"422\" class=\"origin_image zh-lightbox-thumb\" width=\"1900\" data-original=\"https://pic3.zhimg.com/v2-3228375d929b30556a87c0216d1f64b2_r.jpg\"></figure><p data-pid=\"D53u-LgQ\"><a href=\"https://link.zhihu.com/?target=https%3A//www.kaggle.com/c/deepfake-detection-challenge\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">kaggle.com/c/deepfake-d</span><span class=\"invisible\">etection-challenge</span><span class=\"ellipsis\"></span></a></p>\n<p data-pid=\"0BOAQisJ\">这就是前一段时间在 Kaggle 社区话题火得不行的 DeepFake 比赛。比赛任务是自动识别一段视频中的人脸是真实的，还是被AI替换过的。虽然数据量极大，比赛门槛较高，但奖金数额巨大，因此仍然吸引了非常多的参加者。</p>\n<p data-pid=\"K5Rh9F0o\">这个比赛的赛期和上面那个 <a href=\"https://link.zhihu.com/?target=http%3A//bengali.ai/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Bengali.AI</a> 的赛期有一定的重叠，所以一开始我并没有打算参加这个比赛的，实在是分身乏术啊！但没想到我随手在群里发的想要抱大腿的信息，被 <a class=\"member_mention\" href=\"https://www.zhihu.com/people/3f4f20277872d701e23b55878cb4fc92\" data-hash=\"3f4f20277872d701e23b55878cb4fc92\" data-hovercard=\"p$b$3f4f20277872d701e23b55878cb4fc92\">@YIFAN</a> 大佬看到了，经过简短的交流后被大佬翻了牌子，顺利地加入了他们的队伍。</p>\n<p data-pid=\"jFJqdYBc\">比赛过程就不多说了，蛋疼的事情发生在比赛之后。</p>\n<p data-pid=\"OmKiAcUs\">简单来说刚公开私榜的时候我们排在第一，后来因为和主办方对于比赛规则的理解产生分歧而被除名（Kaggle 留有的最后的良心让我们保留了另一个 final submission，这个 submission 使我们留在了金牌区，位列第七）。整件事的经过以及具体原因参见机器之心的报道或者是我们队伍的公开声明</p>\n<a href=\"https://zhuanlan.zhihu.com/p/148211384\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-d2b0d781ef7535cfccd8c2145efe2c6b_180x120.jpg\" data-image-width=\"720\" data-image-height=\"400\" class=\"internal\">机器之心：50万美元冠军成绩被莫名取消，Facebook热门数据竞赛引争议</a><a href=\"https://link.zhihu.com/?target=https%3A//www.kaggle.com/c/deepfake-detection-challenge/discussion/157983\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">kaggle.com/c/deepfake-d</span><span class=\"invisible\">etection-challenge/discussion/157983</span><span class=\"ellipsis\"></span></a><p data-pid=\"EZKQEFbe\">在这个过程中 <a class=\"member_mention\" href=\"https://www.zhihu.com/people/3f4f20277872d701e23b55878cb4fc92\" data-hash=\"3f4f20277872d701e23b55878cb4fc92\" data-hovercard=\"p$b$3f4f20277872d701e23b55878cb4fc92\">@YIFAN</a> 大佬出力良多，又是联系律师又是准备材料的，付出了非常的多。感谢大佬。同时还要感谢另一名国人队友 <a class=\"member_mention\" href=\"https://www.zhihu.com/people/02d9507df71399cbaa1fe2ffcaa556fa\" data-hash=\"02d9507df71399cbaa1fe2ffcaa556fa\" data-hovercard=\"p$b$02d9507df71399cbaa1fe2ffcaa556fa\">@Gary</a> 以及另外两个外国小哥，在整个过程中都付出了很多。</p>\n<p data-pid=\"TTkQA924\">但归根到底我们队伍里的人都是普通的工程师，显然无力和 FB 这样的庞然大打官司，所以做了能做的一切之后只能认命。</p>\n<p data-pid=\"bNVOXzdt\">结果是，<b>FB 似乎吃定我们无法掀起风浪，竟选择直接无视了我们的</b><a href=\"https://link.zhihu.com/?target=https%3A//www.kaggle.com/c/deepfake-detection-challenge/discussion/157983\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">赛后声明</a>。而事实也确实如此，在 Kaggle 里一时火了半边天的帖子，在外界硬是没有兴不起半丝波澜。</p>\n<p data-pid=\"ngk5IiEH\">我们的赛后声明直到今天，每天仍然有那么5 6个新生成的账号在下面刷回复，<b>把所有的高赞回复都顶到了最底下去了</b>。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-404bc7fed11ea9226ade8a7b4d70ead8_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1902\" data-rawheight=\"224\" class=\"origin_image zh-lightbox-thumb\" width=\"1902\" data-original=\"https://pic1.zhimg.com/v2-404bc7fed11ea9226ade8a7b4d70ead8_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h2>我的第二个 Team Gold</h2>\n<p data-pid=\"i1m9S97k\">无论如何，经历了上一个比赛之后，我在大群里已经不算是无名之辈了，同时我也已经进入了 GM 倒计时。</p>\n<p data-pid=\"2HCRMj_1\">在这个时候，我选择了 Jigsaw 在 2020 年举办的新比赛，做人要有始有终嘛（？）。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-c2752ef710532882975fab5414561fe0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1898\" data-rawheight=\"420\" class=\"origin_image zh-lightbox-thumb\" width=\"1898\" data-original=\"https://pic1.zhimg.com/v2-c2752ef710532882975fab5414561fe0_r.jpg\"></figure><p data-pid=\"wBO6-b-7\"><a href=\"https://link.zhihu.com/?target=https%3A//www.kaggle.com/c/jigsaw-multilingual-toxic-comment-classification\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">kaggle.com/c/jigsaw-mul</span><span class=\"invisible\">tilingual-toxic-comment-classification</span><span class=\"ellipsis\"></span></a></p>\n<p data-pid=\"cqzFA4ZS\">这次任务比上次要复杂一些，上次是只需要鉴别英语是否具有羞辱性（toxic）。而这次训练集虽仍是只有英语，但测试时却需要我们鉴别6国语言是否具有羞辱性（toxic）。</p>\n<p data-pid=\"KNcQLByF\">在参加比赛后没多久，群里另一位大佬 <a class=\"member_mention\" href=\"https://www.zhihu.com/people/12dbe1b610e1fedcb42da92cb5d53363\" data-hash=\"12dbe1b610e1fedcb42da92cb5d53363\" data-hovercard=\"p$b$12dbe1b610e1fedcb42da92cb5d53363\">@NaiveLamb</a> 就来找我组队，比赛结束之前组满了5人队伍，淳朴的做了一堆工程上的改进，淳朴的融合了一下，淳朴的拿到了金牌。</p>\n<p data-pid=\"epllvoxi\">之所以对我们的比赛过程和解决方案一笔带过，是因为在这个比赛里<b>第一名碾压其他人一条街</b>，6月底结束的比赛他们号称4月底的 Solution 就已经足以拿到最终的第一名了，而剩下的2个月一直在等比赛结束。= = 正所谓高手总是寂寞的，真是牛逼。</p>\n<p data-pid=\"BsBFbDZv\">和他们的方案一比，我们真的只是做了一些工程上的事情，而对数据本身的探索不足，实在不足以拿出来说些什么，但姑且还是贴上我们当时的赛后总结吧 <a href=\"https://link.zhihu.com/?target=https%3A//www.kaggle.com/c/jigsaw-multilingual-toxic-comment-classification/discussion/161100\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">kaggle.com/c/jigsaw-mul</span><span class=\"invisible\">tilingual-toxic-comment-classification/discussion/161100</span><span class=\"ellipsis\"></span></a></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-fd32f61f8482f77b11a3e1fe1ae9dfb3_b.png\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1898\" data-rawheight=\"220\" class=\"origin_image zh-lightbox-thumb\" width=\"1898\" data-original=\"https://pic4.zhimg.com/v2-fd32f61f8482f77b11a3e1fe1ae9dfb3_r.jpg\"></figure><p data-pid=\"kpgT3_7h\">说实在话，经历了这两场组队比赛之后，我发现组队实在是省心省力，假设队伍里每个人都有拿 Solo Gold 的实力，那么组在一起之后每个人大约都只需要付出 Solo 时三成的精力，就足以拿到组队金牌了。</p>\n<p data-pid=\"w74MyGEv\">就这样，在拿下3个 Solo Gold 之后再拿下2个 Team Gold 的我淳朴的成为了 GM。相比于前4场比赛的热情满满，过程的波澜壮过，这第五场比赛反而稍显平淡了。就如同生活一样，既有波峰，又有波谷，但终归是要回到平淡的。</p>\n<p data-pid=\"tfbjZtKs\">我的故事到此就告一段落了。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"ogxcNSve\">但比赛仍在继续。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h2>结语</h2>\n<p data-pid=\"eQXNcKbT\">这个帖子记录了我这一年来晋升 GM 的心路历程。</p>\n<p data-pid=\"CFgDA1Xt\">我把技术部分省略掉了是因为这些东西都已经写在了 Kaggle 的论坛里。有兴趣的可以从<a href=\"https://link.zhihu.com/?target=https%3A//www.kaggle.com/haqishen\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">我的 Profile</a> 里找到这些帖子。</p>\n<p data-pid=\"SIQJOEzz\">希望能给后来者一些参考吧。</p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/hyyy1992?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">幻云羽音</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/157373052?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"当飞盘成为人类的玩具，我们该如何参与这场游戏","date":"2022-06-06 08:00:00","description":"飞盘作为近几年在国内火热的一项运动，或多或少的出现在大家朋友圈里，不了解的人一看可能会纳闷，飞盘？这不是和宠物狗一起玩的吗？怎么流行起来了，就飞过来飞过去能有什么意思。我刚开始也是这么想，但是当我偶然 ...<a href=\"https://sspai.com/post/73505\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/73505"},{"title":"减肥真的好难，但瘦素真的不瘦","date":"2022-06-06 06:41:49","description":"「瘦素」有着天仙一样的名字，却对肥胖人群的减肥大业没有任何的实际意义，花瓶一个。<p>[......]</p>\n<a href=\"https://sspai.com/prime/story/vol020-Leptin\" target=\"_blank\">查看全文</a><p>本文为会员文章，出自<a href=\"https://sspai.com/prime/precog/vol020-pre-farewell\" target=\"_blank\">《后会有期》</a>，订阅后可阅读全文。</p>\n","link":"https://sspai.com/prime/story/vol020-Leptin"},{"title":"写一下风雨中的上海和她的市民","date":"2022-06-06 04:47:36","description":"\n<p data-pid=\"lKGqJ89v\">首先说哈，这段话是我更新的，很多人找我争论，我先帮你们厘清几个逻辑哈，逻辑不通大家没有交流的必要：</p>\n<p data-pid=\"15sJ0OV-\">1、你们攻击的是上海政府，上海市民，还是，上海这座城市整体？自己想想清楚。</p>\n<p data-pid=\"kTn17KUD\">2、以出生地域、籍贯论人品高低贵贱的人，我只说一句，封建社会还有一句灵魂拷问，王侯将项宁有种乎？这都共和多少年了。</p>\n<p data-pid=\"Q45DYW4U\">上海近3000万常驻人口中近一半是外地户籍，上海各区书记中大半不是上海本地人，请各省市同胞辱骂上海及上海市民之前自行认领老乡。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"K4UWnalo\">最近忙着团购各种生活物资。2022年的上海出现这一幕也真的很魔幻，但更魔幻的是，无数人对着自己的同胞口诛笔伐。 </p>\n<p data-pid=\"cfBKskcq\">前几天听俞洪敏老师曾经的讲座，他说自己参加了数次高考，前两次是和同村的一个男孩子一起考的，都失败了。第三次的时候这个男孩子放弃了，但俞老师坚持了下来，原因只有一个，小时候去过上海，他说外面的那个世界在他心里打开之后就再也关不上了。</p>\n<p data-pid=\"kkA-4Prf\">所以我觉得，某种程度上，读万卷书不如行万里路这句话是有道理的。我特别鼓励年轻的人到处转转，特别是深处不那么发达地区的年轻人，眼界这个事情，有时候其实也很简单，你去过，经历过，自然就知道了。比如回国创立百度的李先生，受惠于互联网最早在美国兴起，他在那里看见了雅虎的成功。</p>\n<p data-pid=\"4l0TH8Jt\">很多对着上海口诛笔伐的人甚至都没有来过上海，那我们今天就来聊聊上海这座城市。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"7mN73fLG\">客观的说，上海之所以是上海，政策和文化都不是最基础的那个原因，最根本的原因是location，中国海岸线虽然也不短，但是具备深水港条件的地方并不多，同时还要是可以全年运转的不冻港就更少，再同时还要连通巨大的内陆淡水河道，以便货物可以直接移船发往中国腹地的城市，全中国还可以找出来几个？</p>\n<p data-pid=\"ddV3LaK8\">所以当人类技术征服海洋，可以大规模远洋贸易开始，这座面朝世界最大的太平洋，背靠中国最大的长江的城市，注定就是那个天选之子。</p>\n<p data-pid=\"PHEMBlK_\">与北京不同，上海发达的起点首先是时代和地理位置共同赋予，而后才是精英和资金奔着挣钱机会向它源源不断的集中，从而迭代出城市文化，再不断与城市作用与反作用。</p>\n<p data-pid=\"NYdJZZDL\">所以伴随着这座城市特殊的诞生历史，以及客观上作为中国与世界连接绕不开的那个点，确实，她自己的城市文化中有不一样的东西。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"OuX_uZ2e\">先来谈谈文化西化这件事情，上海确实是中国城市中西化程度最高的，但这里说的不是政治立场，不是所谓崇洋媚外，而是一种思维方式和行为习惯。</p>\n<p data-pid=\"iMU-8d8p\">作为东西交流的汇聚点，经过上百年的影响自然也会铸造出中西合璧的城市文化。某种程度上这是一个优势，有兴趣的可以去翻查一下，西方企业首选的投资城市中上海占比是最高的，外国人在此居住的比例也是很高的，很大部分原因在文化上，只有在文化上找得到共通之处，交流才会顺畅，信任才会产生。</p>\n<p data-pid=\"pLBzqOAC\">我工作中接触过很多上海人，与国内其他地方的人相比，他们是最快、最容易与香港人、西方人建立关系的群体。</p>\n<p data-pid=\"b7ZfX0WX\">我举几个小例子，第一个是个体的边界感极强，如果在上海呆的久会发现上海人对一个人最亲厚的礼遇，不是请你吃饭，而是邀请你去他家。在这一点上，与香港人如出一辙。</p>\n<p data-pid=\"3Z7luE_U\">很多时候可能在传统文化中显得比较疏离，不那么热情。但在上海人眼中这是出于对于对方隐私的尊重，处久了其实会发现，一旦你主动向他求助，免去了他对于是否会侵犯隐私的顾虑，他其实会立刻变得无比热情。</p>\n<p data-pid=\"q07QJKMc\">上海生活的人应该都知道我在说什么，现在疫情中的邻里关系就是中国上个世纪邻里关系的真实写照，和中国任何一个城市没有区别。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"YHYZBEG8\">第二个是看似不太顾及人情圆融的细致明确。AA付账这个在传统文化里是很不易接受的事情，但在上海是件很自然的事情。与其没能抢到买单机会，还要惦记着下次再约一顿饭局，做到人情有来有往，最后含含糊糊的有人请客贵点，多付了钱，有人请客便宜点，少付了钱，上海人觉得咱们不如这次就各付各的，明明白白，至于人情往来，坐下来一起吃饭、聊天这个环节就是人情，就是往来。</p>\n<p data-pid=\"PtGgrBMU\">再举个例子，比如拜托上海人引荐某个人，他一定是先告诉你他无法承诺你，需要给他时间确认，然后他再去跟对方沟通，确认对方是否愿意见你之后，他才会承诺你，并同时把具体的时间、地点以及引荐的方式都仔仔细细跟你安排交代清楚。</p>\n<p data-pid=\"dMWvBaCR\">租过上海房东房子的人大都有类似经历，房东会将水盘上、电表上的数字跟你记录的清清楚楚，并且要求你复核确认，像小零件维修这样的事情，每一笔也都跟你算的清清楚楚，倒真的不是小气，在上海人的固有观念里，所有的账目都必须是明明白白的，哪怕他最后豪气的免掉你一些费用，他也会明明白白的告诉你免掉的是哪些，合计是多少金额。即使是送人情，这份人情他也是要明明白白的送。</p>\n<p data-pid=\"CbEg1it-\">很多事情是不能单纯用好坏来讲的，唐朝的伟大之处不仅仅是国力强盛，文化上的海纳百川才是后世再难企及的高度。我觉得当下的中国也应该有这种开放和包容的气度。抛开传统固化的偏见来看待它，我们不如换个角度想，明确、细致、可量化是不是工业文明体系下最可贵的特点呢。</p>\n<p data-pid=\"1AF88337\">再来谈谈城市管理和政务水平。很多人疫情前都觉得上海是城市管理和政务水平最高的地方，疫情扑灭了很多人对上海的幻想。</p>\n<p data-pid=\"ICgm-vKc\">那我想试着解释一下上海这波疫情城市管理为啥幻灭。有句话我觉得说的挺贴切，上海适合跑自动挡，一旦换成手动档就完蛋。</p>\n<p data-pid=\"-EjZy3aN\">前面说了上海城市兴起的缘由和历史，这片土地是完全基于市场化需求在运作，完全市场化的在匹配各种资源，这种状态几乎从上海开埠以来维持了近两百年，可以说市场化是深入这片土地骨髓的基因。</p>\n<p data-pid=\"KD5OCKL3\">前期的精准防疫不是政治噱头，就是这个城市内在文化的外在追求，就是尽可能的去维护这个市场的正常运转。</p>\n<p data-pid=\"afSA5-ey\">上海的城市管理和政务也是市场化参与程度最高的，政府在很大程度上是通过采购的形式将一些专业管理和服务委托给了市场上具有优势的企业去做。专业的事情交给专业的人去做，一方面水平和效率都可以提升，另一方面政府也有大量的精力将管理细化到极致，极致到什么程度呢？上海有专门研究每个路口红绿灯时长的职位，就是看看怎样的亮灯时长和切换可以最大可能的让道路畅通。</p>\n<p data-pid=\"uuIpHW-k\">这大概就是疫情前上海的城市管理状态，井然有序吧。</p>\n<p data-pid=\"jtM94gGS\">相比较其他地方，上海更接近一个“小政府、大社会”的存在模式，平常时期市场自发的调节、经年累月积累的规则和共识可以让城市自己保持高效运转，但这种模式一旦遇到非常情况，切入到需要依靠高度集权、政府中央统筹的模式，上海和其他城市相比，并无所长，甚至由于管理过于专业和精细，在处理复杂局面，需要综合复合能力的时候，过往的优点反而成了比较大的障碍。所以当社会力量完全退出的那一瞬间，我们看到了一个手足无措，独自风中凌乱的政府。</p>\n<p data-pid=\"Zvz_du85\">更为有趣的是，上海在经历过抢菜的阵痛之后，社区团购现在又焕发了勃勃生机，社会有需求，供给端马上就会自动匹配，模式和渠道迅速被打通，虽然价格还是贵了些，但是居民生活所需都基本能解决，当然，商家和渠道方也都有钱可赚。这里面几乎没有政府的角色，而且在疫情居高不下的情况下，为了保证物资安全，每个小区业主会自发制定供货商白名单，与物业公司共同制定物资进住宅区的消杀、流转以及志愿者集中配送程序。我看了很多人分享的自己小区简报，我自己居住的小区也开了业主公众号，每天从今天有啥物资可以团购，到哪些医院可以紧急就医，乃至阳性新增情况，包括疑似等待复检的情况，事无巨细，准时推送到手机上，最近，它还推送给我希望举行特别音乐会的倡议。</p>\n<p data-pid=\"8QbDAaiK\">我觉得大概这就是上海最神奇最有魅力的地方，这座城市的力量在民间，在高度市场化的社会，在那些甚至都没来过上海的键盘侠们嘲笑中的上海市民。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"elOG97KL\">写下这段文字的时候，我的心里有股暖流，团购有个缺点就是当加的团多了，团的东西多了，你常常会忘记这些东西分别是什么时间到货，需要时不时看一眼微信群有没有新的到货通知。一开始我压力很大，特别是当我手头工作很多的时候，总怕货物遗漏。但是后来发现，即使错过了拿货的时候，我订的东西也会安安静静、完完整整的躺在家门口。有很多很多的人自告奋勇做志愿者，穿梭在小区各处。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"2GXcZ3Jt\">这座城市的人不该遭受这样的网络暴力。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/linda-li-lin?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">一蓑烟雨行</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/502209235?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"新家买什么：这是我热乎的厨房好物推荐","date":"2022-06-06 03:31:09","description":"2021 年度征文中我介绍了我的装修经历和复盘，装修接近尾声，设备和家具都陆续进场。这次先带大家看看，我家厨房已经添置了哪些设备和好物。<a href=\"https://sspai.com/post/73604\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/73604"},{"title":"一些AI系统的技术随思","date":"2022-06-06 02:47:51","description":"\n<p data-pid=\"Js_NPYuc\">最近除了日常工作以外，大量时间花在技术细节的catch-up上。一个感受是，越多接触到底层技术，越会感觉到自己当前技术积累的薄弱。比较早以前，周围同事朋友给自己的建议是，应该花更少精力在技术上，花更多精力在业务梳理，外部协同和行业趋势的跟进上。也曾经在360度调研里，收到的评价是自己足够hands-on。现在到了新的环境，接触到了更多之前没有接触过的技术信息，认识了之前没有打过交道的不同类型的新同事，会觉得自己hands-on的程度是远远不够的。而在不同行业里，对技术细节理解掌握深度的区别，对于业务机会的判断，外部协同的把握，以及行业趋势跟进，也会带来不同的影响。</p>\n<p data-pid=\"wIwPXGdK\">前不久和一位市场朋友聊天，提到公司的一位Senior VP，有一次和一位国内大厂类似CTO角色的同行交流，做了一些high-level的技术分享。会后收到的反馈是，对方觉得这位Senior VP的分享过于技术，导致那位CTO并没有完全消化。而那位市场朋友觉得他自己作为非技术出身的背景，都觉得那些分享并没有过于技术的味道。</p>\n<p data-pid=\"fPMVYd8q\">我想，如果国内的技术行业想从粗放的业务扩张的风格，转变为精耕细作的技术创造突破性的风格，也许会需要更多人能够在职业生涯里的较长周期内（我曾经共事过的一位老大哥在这方面给我留下了深刻的映象，他当时已经承担了非常重要的项目推进以及资源决策的职能，但还保持着对技术如饥似渴的追求，记得有好几次我去找他讨论问题，都看到在他的办公桌上堆满了他正在跟进的一些领域新进展的paper，以及我们曾经多次在会议室里和团队同学讨论代码的优化细节，他也成为了技术追求领域我所认同的一个榜样），保持在技术细节层面的足够hands-on，才可能加速这种转变吧。当然不同行业，不同阶段，对技术细节的要求程度也存在差异，这跟行业分工定位有关。以及每一个技术代际，每一个具体的个体，因为时代和个人际遇的差异，所适合承担的那个“定位”也有所不同，结合主客观条件，尽量去最大化自己可能为所在行业带来的帮助就好了。</p>\n<p data-pid=\"iKbp4xVD\">上面发散性的思考结束，接下来是一些最近会有思考，但并没有获得答案，也不确定什么时候能够获得答案的技术随思了，聊作整理，也欢迎同行讨论碰撞。</p>\n<h2>关于Triton的随思</h2>\n<p data-pid=\"plB4pPc7\">因为一些原因，关注了一下OpenAI的<a href=\"https://link.zhihu.com/?target=https%3A//openai.com/blog/triton/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Triton</a>的项目。第一眼看到这个项目，会在想这会不会可能颠覆CUDA的生态，再看了看一些文档细节，结合之前的一些工作经历，对这个项目的演进趋势又有了一些不同的理解：</p>\n<ul><ul>\n<li data-pid=\"DW2JbWQ9\">所有的抽象本质上都是存在泄漏的。这种泄漏从最底层的ISA指令集就开始了。Triton作为架设在PTX之上的抽象层，也存在类似的问题。包括CUDA这一层抽象，也同样存在类似问题。</li>\n<li data-pid=\"HBYcvQcQ\">决定一个新增抽象是否可能被广泛adopt，甚至取代已存在的一个抽象层次的关键点，在于这个新增抽象带来的新增价值要足够大。落实到朴素的用户产品设计的原则，那就是 <b>用户价值=新体验 - 旧体验 - 切换成本</b>。</li>\n<li data-pid=\"nXyEmqp6\">Triton这一层抽象，和CUDA编程模型，以及TVM/XLA/MLIR这种深度学习编译器（目前我理解Triton的核心 定位还是解决深度学习场景的计算需求，而非其他）是存在直接的竞争的。所以决定Triton未来adoption ratio的关键是，<b>相较于这些现存事物，其能带来的新增价值</b>。 </li>\n<ul>\n<li data-pid=\"6jFI1exk\">Triton<a href=\"https://link.zhihu.com/?target=http%3A//www.eecs.harvard.edu/~htk/publication/2019-mapl-tillet-kung-cox.pdf\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">最早</a>的工作是在C语言层面提供了类似DSL的API。后来主要的推广以Python为主，我想是因为深度学习这个领域，Python的使用实在是太pervasive了。某种程度上，我觉得PyTorch团队后来选择在Python的bytecode level加入<a href=\"https://link.zhihu.com/?target=https%3A//github.com/pytorch/torchdynamo\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">TorchDynamo</a>的功能，也是出于类似的考虑。</li>\n<li data-pid=\"jemZyEiF\">Triton的抽象粒度是在Python层面提供了类似类似CUDA的并行编程模型，同时做了一定的简化，将部分需要程序员手工处理的优化在Triton内部优化pass里完成。不过我个人的认识，至少针对NV GPU，这种抽象粒度相较于CUDA本体或TVM之类工作提供的差异化价值不够显著。反而是类似CUTLASS这种提供building block的方式提供了更多的add-on value。</li>\n<li data-pid=\"q5oCA_vi\">AI硬件架构还没有收敛，仍然在不断演化，特别是访存系统的演进还比较激进，这对于上层抽象带来的压力是巨大的，包括 Triton，TVM，甚至包括CUDA本身。</li>\n<li data-pid=\"4nt3n5hk\">Triton对于隔离不同硬件的差异化，从而对于改善程序的可移植性是否会带来比较大帮助呢？我不确定。从实现手段来说，Triton是直接codegen到LLVM IR上，确实可能通过复用LLVM现有的backend对接的生态来简化同一份Triton program跑在不同硬件后端上的负担。<b>关键还是在于Triton是想提供一套对多套硬件都能通用的抽象，还是想针对某款特定的架构相近的硬件做好这层抽象</b>。我个人的认识，TVM或基于MLIR的一些自动codegen的工作，目前对于Tensor类计算，也只能对NV GPU架构相近的架构做到比较好的通用性。原因也比较朴素，<b>抽象需要有相对稳定的被抽象基础以及大量的实践样本</b>，NV GPU从16年推出Tensor Core到现在，无论是社区自身积累，还是NV推出的一些开源项目和软件库及资料文档，都为抽象提供了比较好的基础。这也是坊间传言一些GPU start-up通过兼容NV GPU的编程模型可以相对于从头build一套硬件架构和编程模型更快完成软件库搭建的原因之一了。</li>\n</ul>\n</ul></ul>\n<h2>分布式的随思</h2>\n<p data-pid=\"92Npu-Ja\">最近go through了Meta的<a href=\"https://link.zhihu.com/?target=https%3A//arxiv.org/abs/2205.01068\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">OPT</a>的工作，扫了一下里面引用的<a href=\"https://link.zhihu.com/?target=https%3A//arxiv.org/pdf/2004.13336.pdf\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">老文章</a>，顺便又去翻了翻引用这篇老文章的Megatron-LM 2021年的<a href=\"https://link.zhihu.com/?target=https%3A//dl.acm.org/doi/abs/10.1145/3458817.3476209\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">文章</a> ，再结合之前一些对这个领域的关注和思考，有了一些新的思考</p>\n<ul><ul>\n<li data-pid=\"RZZldHEt\">现在能看到的关于分布式的工作，我个人的感觉还是集中在解决一个个E2E的问题，不管是DeepSpeed里的工作，还是Megatron-LM的工作，还是PyTorch Lightning的工作，也包括Google在XLA TPU上的一系列工作。其中Google XLA TPU上的工作，因为有了一个比较干净的表示层，我觉得具备了一定的生态属性。</li>\n<li data-pid=\"KLqtvOGc\">这些工作在具体某个模型或场景上，都还是蛮有意义的，相当于通过一个一个具体的问题把领域的认识推得更靠前了一些。</li>\n<li data-pid=\"Jh2lpIZb\">但这些工作给我的一种感觉是“<b>碎片化</b>”，就是彼此之间的复用并不容易，工作A如果想应用在工作B里，往往需要reimplement一遍，而分布式策略的空间，随着模型（Dense or Sparse, CV or NLP, ...），硬件(NVLink, NVSwitch, Multi-node NVLink, IB, Grace-Hopper...)、训练方法的变化(Vanilla optimizer, Second-order optimizer, Neighbor-aware loss optimizer)，其实呈现一个比较明显的NP-hard的性质，想在一个工作里把这些问题全解干净，看上去很吸引人，但可能会总存在一定的gap。</li>\n<li data-pid=\"I8O3SPyb\">所以另外一种解决这个问题的思路是<b>构建一套可能复用，share的基础设施，让这个领域的从业人员都可以在上面贡献自己的想法，便于复现复用</b>，而这套基础设施的关键模块可能包括 ：</li>\n<ul>\n<li data-pid=\"YiIk-9Xy\">\n<b>前端定义</b>。比如如何将PyTorch的模型描述转换成一套适合分布式策略处理以及交给runtime执行的前端IR，这方面的工作，我理解不管是TorchDynamo，还是LazyTensor都是类似的考虑</li>\n<li data-pid=\"RixGqubn\">\n<b>一些重要的可复用的基础脚手架的定义实现</b>。比如常见的通信原语，allreduce/allgather/sendrecv/all2all/reduce/gather等等。这方面的工作，其实包括 NCCL以及PyTorch distributed里的primitive都是在提供类似的能力。</li>\n<li data-pid=\"0NJ5HDeV\">\n<b>一套或多套可复用的框架。</b>比如cost function的抽象（具体 的cost function由分布式探索的人来填充)，策略的抽象（具体 的策略细节由具体 实施人员决定），runtime的抽象（同上)。将整个分布式执行的过程抽象成一套类“八股文”的形式，大家都按这套八股文来填充。因为有了相对统一的模板，复用性就变强了。</li>\n</ul>\n<li data-pid=\"GukDp5Fr\">如果结合技术发展历史来看，其实LLVM之于单机CPU编译器，就起到了这个作用，可能LLVM就是因为顺行当时的技术时代需要，提供了这种领域复用积累的基础能力，才会获得那么快的发展。MLIR则是Chris的另一个类似的野望了，但还需要时间检验。其实之前和TVM的同学讨论，我个人的理解，TVM的核心想法也是期望打造一套生态基础，吸引更多人加入进来，而不是自己做完所有事情，这也是当时TVM的核心 团队花了一年多时间重构底层TIR的原因（当时我其实有点不完全理解TVM团队做这个选择的考虑，现在反而更加理解其背后的考虑，也会很欣赏TVM的核心团队在当时的那个时间点能够做出这个判断，因为这种判断做好了能打开更大空间，做不好会因为失去了一些更具体 的能解决实际问题的feature的迭代机会，导致错失一些时间窗口，是一个有概率性的决策了，而不是一个确定性的工程决策）。</li>\n</ul></ul>\n<h2>关于LLVM的随思</h2>\n<ul>\n<li data-pid=\"efA1JpRa\">最近花了点时间研究了一下modular AI的<a href=\"https://link.zhihu.com/?target=https%3A//www.modular.com/post/the-future-of-ai-depends-on-modular-design%23\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">vision</a>，顺便返回来又去读了一些相关的背景资料，包括<a href=\"https://link.zhihu.com/?target=https%3A//www.aosabook.org/en/llvm.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">这篇</a>经典的老文章，很有共鸣的感觉。我对LLVM的关注比较早，大约在09年LLVM还不算非常有名（当时主要是Apple和一家叫AutoESL的EDA公司在主要支持它)就关注过，真正有实操经验是17年左右因为开始关注XLA的工作，后来因为MLIR也相应地有连续性的关注，也会经常琢磨LLVM带来的一些<a href=\"https://zhuanlan.zhihu.com/p/408783175\" class=\"internal\">启发</a>。每次琢磨，都会有一些不同的感觉。从之前把LLVM当作一个实现XLA的技术底座，到看到MLIR以后，有些朦胧地感觉LLVM模块化的设计思想可能不像看起来那么容易，有些“大巧不工”的味道，后来加入硬件公司以后接触了解到更多新硬件上基于LLVM开发device compiler(不是AI compiler)的便利性（<a href=\"https://link.zhihu.com/?target=http%3A//xn--4gqqok12o.td/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">配一些.td</a> 文件，加一些pass，就能相对快的完成一个后端codegen模块的开发)，再到在NV之后，从不同视角接触不同类型的fusion codegen相关工作。对于这篇文章里提到的LLVM成功的复盘总结的认同感就变得更加强烈了。我现在的认识 里，LLVM 的成功是<b>典型的工程技术和架构技术的成功</b>（并没有非常原始创新的research idea，但是把一些从第一性原理上已经被验证的idea在工程架构上落实地非常到位），核心 在于其 “<b>模块化</b>”，“<b>可复用</b>”，“<b>IR表示的完备性</b>”，“<b>支撑工具的完备</b>”使得其具备非常强烈的自演化的“<b>技术生态系统</b>”的特质，这种技术特质甚至对于<a href=\"https://zhuanlan.zhihu.com/p/419640679\" class=\"internal\">技术组织协同的效率</a>都会带来很大的影响。这个特质一但完成了早期的momentum积累 之后，就会产生巨大的雪球效应。这些技术philosophy的东西，说起来似乎很快就能有认同感，但真正实际landing到生产系统里，结合一个具体 的方向场景落实到位，恐怕远没有那么简单了。稍微具体 一些，这里从实施角度来说比较难的问题有几个：</li>\n<ul>\n<li data-pid=\"Cke3B7g1\">针对AI系统这个领域，怎样\"<b>模块化</b>\"能够尽可能避免leaky abstraction以及减少模块化带来的系统性能开销和调用交互的开销，这需要对目标domain非常深刻的理解。更具体一些，需要对AI软硬件技术的全栈几乎都需要有深刻的理解。</li>\n<li data-pid=\"KsN_TB63\">怎样才能做到真正的“<b>可复用</b>”？在我看来，“<b>可复用</b>”的核心点是要对一个功能模块可能使用的不同contexts有着清晰的边界isolation的定义。有些问题相对容易做到可复用，比如一个cse的pass或是dead node elimination的pass，但即便是这种可复用，要真正做到位，也需要有一个能够贯穿系统全栈的稳定的representation，得到这个representation，并不那么容易(想想倒出来碎了一地的ONNX吧)。至于更复杂的，怎样对Tensor计算的描述空间进行抽象复用，适用不同硬件，就更难了。</li>\n<li data-pid=\"f5FR8lxB\">“<b>IR表示的完备性</b>”。比较早以前，和一个朋友讨论问题，他提到说编译器最核心的就是IR设计。在另外的一个场合，有人提到编译器设计最核心的就是IR设计和在这个IR设计之上的一系列变换。这几种说法都稍微有些过于简化的嫌疑，但从描述问题核心的角度，我觉得是合理的。也反映出来设计一个完备的IR表示远没有那么容易。因为IR设计反映的是对目标问题的抽象，抽象的价值在于它的普遍义，而复杂性也在于得到这个普遍义的获得过程。</li>\n<li data-pid=\"RB66DyXM\">\"<b>支撑工具的完备\"</b>。这个是我觉得有可能被忽略，但在生产系统里很重要，甚至可能是花费时间更多的部分。包括debug工具，测试工具(比如filecheck)，DSL工具（比如tablegen)，统一的序列化反序列化工具的支持等。因为生产系统会有大量research工作不会touch的dirty的细节，而缺失了对这些细节的有效的把控，生产系统的演化就可能看起来差了毫厘，实际上已经完全不是那么回事了（比如，一套codegen系统在真正布署到生产环境以后，JIT可能会面临在线编译的耗时过长，以及编译结果本身的执行性能抖动，AOT可能面临的binary size过大导致不得不引入一系列技术手段进行mitigate）。</li>\n</ul>\n</ul>\n<h2>AI编译技术的随思</h2>\n<ul><ul>\n<li data-pid=\"pp_AO1iD\">针对现行的NV GPU架构（以及未来一两代架构中）我的mental model里会把fusion分为两类，一类是<a href=\"https://link.zhihu.com/?target=https%3A//www.usenix.org/conference/osdi20/presentation/zheng\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">计算密集算子为核心的fusion</a>(GEMM/Conv-centric)，另一类是<a href=\"https://link.zhihu.com/?target=https%3A//dl.acm.org/doi/abs/10.1145/3503222.3507723\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">访存密集算子为核心 的fusion</a>(elementwise + elementwise, elementwise + reduce, reduce + elementwise, reduce + reduce, ...) 。在一些新的AI硬件公司里，也在尝试打破计算密集算子和访存密集算子的fusion边界，以期通过更大尺度的fusion获得更好的性能，这涉及到硬件架构上的更多工作。</li>\n<li data-pid=\"c398Uk_e\">Fusion不等于常规意义的AI编译。因为：</li>\n<ul>\n<li data-pid=\"wXF_bkcr\">Fusion可能有不同的支持方法。手写，经典的AI编译(XLA/TVM的codegen)手段，AI编译codegen+手工提供building block的hybrid作法，还有比较tricky的对一个pre-built好的binary通过类似代码注入的方式来进行简易的fusion(一种泛化的<a href=\"https://link.zhihu.com/?target=https%3A//llvm.org/docs/LinkTimeOptimization.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">LTO</a>)。这几种手段各有其适用场景和优缺点。</li>\n<li data-pid=\"c8he5hmP\">\n<b>经典AI编译手段</b>，自动化更强。我个人的观点，这种手段对于访存密集算子fusion已经没有本质上的技术可行性问题，主要是工程量。但对于计算密集算子codegen，目前还没有已知足够好的策略能够做到完全auto codegen。虽然有一些来自于社区的工作(MLIR和TVM社区都有 )，在Ampere架构上可能通过自动化的方式生成和SOTA library性能相近的kernel，但我觉得这是因为Ampere的编程模型已经稳定了比较久，留出了这种空间。随着Hopper,的推出，我的判断会比较快地继续拉开这种auto codegen作法和手写，以及codegen+手工building block作法的性能差距。完全自动化是一个迷人的技术方向，但是对于计算密集算子，因为调度空间过于庞大，又需要非常精细的处理，在硬件基础足够稳定之前，自动化codegen从生产落地来讲，我觉得不确定性还非常强。</li>\n<li data-pid=\"0Hf1TJOM\">\n<b>codegen+手工提供building block的作法</b>，我知道有若干AI硬件公司是这样来做的。相当于专家经验和自动化技术的结合。这样可以更快的迭代起来。这里要解决的一个核心问题，除了技术以外，还涉及到手工优化专家和自动化技术的配合协调。我听说过有些公司里，手工优化的同学和AI编译同学的关系理顺不是那么容易的事情。因为整个解空间那么大，哪些放在手工，哪些放在自动化，是一个此消彼长的过程，只有建立一个能够就事论事，从技术第一性原理迭代演进的文化，才可能以比较小内耗的方式推进这种迭代，否则就会有大量的内耗冲突。</li>\n<li data-pid=\"8olk-oCc\">\n<b>LTO的作法</b>，一个很大的优势是，能够确保对于GEMM/Conv这种基础kernel的性能不会引入太多variance。如果是常规的fusion&amp;codegen作法，很可能会因为引入了fusion时新生成的逻辑，在和GEMM/Conv的代码作完融合以后，改变了shared mem/register等片上资源的消耗，于是再做一次编译会影响到register spill或occupancy，带来性能抖动。当然，LTO的作法，依赖于对device compiler的定制能力，另外对过于灵活的pattern支持起来会比较吃力。</li>\n<li data-pid=\"mDh1uKqu\">\n<b>手写</b>。我们有时候说fusion会潜意识里跟codegen划等号。其实fusion是目的，codegen是手段，也可能用手写作为手段来解决fusion的问题。对于足够高频稳定的pattern，手写是更高效的方式。</li>\n</ul>\n<li data-pid=\"RjItdvOf\">AI编译要解决的问题，实际上是GPU上kernel生成的问题。针对具体模型场景，这个问题其实是可能拆分成不同的子问题，每个子问题有其更适合的手段，有些适合手写，有些适合LTO，有些适合auto codegen，有些适合codegen+手写building block。No silver bullet。这种情况下，<b>有一套能够把这些不同手段有效组织在一起的uniform的框架，就会非常有助于技术的打通，交互和共享流动了</b>。<b>因为此时适合用手段A解决的问题，也许随着软件，硬件技术演化，假以时日，更适合用手段B来解决了，如果底层的技术框架鼓励允许这种流动，就可以让整个系统向着更逼近系统设计理论上限的方向演化，否则就可能形成越来越多的系统legacy，导致出现软件系统的“创新者的窘境\"。</b>\n</li>\n</ul></ul>\n<p data-pid=\"jtlz6eGp\">最后，打个小广告，上面这些思考，都是我围绕日常工作中产生的，如果对上面这些问题感兴趣的朋友，可以关注一下<a href=\"https://zhuanlan.zhihu.com/p/415992625\" class=\"internal\">这里</a>的信息，感兴趣的朋友欢迎邮件联系  juney@nvidia.com，一起探索AI软硬全栈系统的未来技术演进路径。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/yang-jun-14?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">杨军</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/514448455?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"派早报：亚马逊将关闭 Kindle 中国电子书店、滴滴申请从纽交所退市等","date":"2022-06-06 00:47:10","description":"你可能错过的新鲜事亚马逊将关闭Kindle中国电子书店6月2日，亚马逊中国官网发布通知，宣布将在2023年6月30日停止中国区Kindle电子书店的运营。在此之后，用户将不能购买新的电子书。对于已经购 ...<a href=\"https://sspai.com/post/73635\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/73635"},{"title":"有什么事情是只有漫画这一媒介能做到的?","date":"2022-06-04 05:09:33","description":"\n<p data-pid=\"ihjjF8Tc\">这个问题还蛮难回答的。</p>\n<p data-pid=\"R6iqD-DY\">看了一圈答案，不少大佬都讲了很多理论和学术的东西，学到了不少。</p>\n<p data-pid=\"_e2wHqH7\">我也觉得漫画本身，无论是制作还是阅读的独特感受，别的媒介基本都无法做到。它就是一个独立的文艺体裁。</p>\n<p data-pid=\"Oae5uIEX\">别的媒介来还原漫画给人的感受时，必须用它自己的方法再创作一遍。比如动画化。但哪怕你照着漫画分镜完全画一遍，动画化后的画风改变、时间控制、bgm选择还有声优表演等等因素影响下，都不可能跟我读漫画时脑子里获得的感受完全一致。</p>\n<p data-pid=\"J-O_-uZl\">漫画比影视在时间控制上灵活，又比纯文字具象。这种微妙的平衡感和独立感，别的媒介还真是难以取代。</p>\n<p data-pid=\"Bi0KFebz\">我知道题主大概不是这个意思，好像是想说：如果讲述一段故事，哪种是别的媒介完全无法做到，只能由漫画来搞呢？</p>\n<p data-pid=\"7oIj2fy6\">那我觉得可能不存在这样的段落。只是一段叙事的话，无论怎么着，影视和纯文字——哪怕有些不舒服——也能给它做出来。</p>\n<p data-pid=\"BtMWpYnh\">但那样你读漫画时的独特感受，跟这之后的跨媒介改编，就完全不同了。所以能替代吗？肯定不行啦。</p>\n<p data-pid=\"_kdSBnGA\">所以题主可能是想说，有没有什么情况，漫画读起来感觉最吊，其他改出来都不如它、都显得别扭呢。</p>\n<p data-pid=\"wLONYWMz\">别的回答里也都有不少例子了。比如灌篮高手打山王的最后一球啦、猎人里的八连黑、藤本树的一些作品之类的……</p>\n<p data-pid=\"UOc_etRS\">下面举个我自己的例子。在多年创作漫画过程中，遇到过一次感觉无论是影视化还是文字化，都不如我这么画看着牛逼的情况：</p>\n<p><img src=\"https://pic2.zhimg.com/v2-daf8c525ccaf6af978c30884f388a2d4_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"774\" data-rawheight=\"1093\" data-watermark=\"watermark\" data-original-src=\"v2-daf8c525ccaf6af978c30884f388a2d4\" data-watermark-src=\"v2-1e5803bc0ad5634b31ed68041004e0db\" data-private-watermark-src=\"v2-d70f2b3850d352752f9477f965304bcb\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-1f7e84865163a32b80abf46c98e78350_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"774\" data-rawheight=\"1093\" data-watermark=\"watermark\" data-original-src=\"v2-1f7e84865163a32b80abf46c98e78350\" data-watermark-src=\"v2-5972da667eb9c038fa0a3c85a9bb7e2f\" data-private-watermark-src=\"v2-18c9cbccd9d04978de65f096cb39cc99\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-ca5ebf0cc2f290f2aa96d7d2fedfd0c4_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"774\" data-rawheight=\"1093\" data-watermark=\"watermark\" data-original-src=\"v2-ca5ebf0cc2f290f2aa96d7d2fedfd0c4\" data-watermark-src=\"v2-e74e9e46a8a962bf6ce190f83366a885\" data-private-watermark-src=\"v2-914e2f9a776d0ff5279d816472ef1f73\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-2f75c3dee6acbe2d816ddb20999839ae_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"774\" data-rawheight=\"1093\" data-watermark=\"watermark\" data-original-src=\"v2-2f75c3dee6acbe2d816ddb20999839ae\" data-watermark-src=\"v2-22d649bf228362b54df2c66660851ab8\" data-private-watermark-src=\"v2-89d1f3b19a473cdce90f8a8d66854315\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-44280cbca75cb31d42ab8fcf494023fa_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"774\" data-rawheight=\"1093\" data-watermark=\"watermark\" data-original-src=\"v2-44280cbca75cb31d42ab8fcf494023fa\" data-watermark-src=\"v2-88179bdb4ea93306429347e525988d4e\" data-private-watermark-src=\"v2-ba4123d06e108b999d47fd3fa3051c4c\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-3ae440fee845cd45d4a27fe3b8126a52_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"774\" data-rawheight=\"1093\" data-watermark=\"watermark\" data-original-src=\"v2-3ae440fee845cd45d4a27fe3b8126a52\" data-watermark-src=\"v2-0b0ac52a2678ffe7ceeaa32e56f93acb\" data-private-watermark-src=\"v2-d8bbdf0a7ecf09830944404d0ec66b56\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-5ea84ba2cbccede0d76d7a183bd27d51_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"774\" data-rawheight=\"1093\" data-watermark=\"watermark\" data-original-src=\"v2-5ea84ba2cbccede0d76d7a183bd27d51\" data-watermark-src=\"v2-65deaf4c7eb101586f75ec969da407ea\" data-private-watermark-src=\"v2-0c990301d4932affc7c097fd0891b591\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-de2e50376e0815dbf6dd09da4211f52a_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"774\" data-rawheight=\"1093\" data-watermark=\"watermark\" data-original-src=\"v2-de2e50376e0815dbf6dd09da4211f52a\" data-watermark-src=\"v2-a1284da8ce284d115f61f4e2ef9aea5d\" data-private-watermark-src=\"v2-59b306d5549622fc34990af829005a4c\" data-tags=\"porn\"></p>\n<p><img src=\"https://pica.zhimg.com/v2-86cf90bb54c022a423512a0a05828aed_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"774\" data-rawheight=\"1093\" data-watermark=\"watermark\" data-original-src=\"v2-86cf90bb54c022a423512a0a05828aed\" data-watermark-src=\"v2-6e2c48208c30c147c30c52874f0531c6\" data-private-watermark-src=\"v2-58d6ad5698e3adbbdeb17d0569a45b03\" data-qrcode-action=\"none\" data-tags=\"qrcode\"></p>\n<p><img src=\"https://pica.zhimg.com/v2-d3c1b47add64ee2bb87e9161c66b042b_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"774\" data-rawheight=\"1093\" data-watermark=\"watermark\" data-original-src=\"v2-d3c1b47add64ee2bb87e9161c66b042b\" data-watermark-src=\"v2-72f206e8fa7853d36a53c85c7789c42b\" data-private-watermark-src=\"v2-1d78a4c8566c3048d885deab5547e778\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-4830d89c214ad39c0fcfa790af60d86e_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"774\" data-rawheight=\"1093\" data-watermark=\"watermark\" data-original-src=\"v2-4830d89c214ad39c0fcfa790af60d86e\" data-watermark-src=\"v2-47b12ef8868e5f0b04ff299ed7214d76\" data-private-watermark-src=\"v2-8a6138d34f81509060486a9e2b97b6f6\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-70faede55df669c19f3181d513afa4cb_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"774\" data-rawheight=\"1093\" data-watermark=\"watermark\" data-original-src=\"v2-70faede55df669c19f3181d513afa4cb\" data-watermark-src=\"v2-4a7683da4c72f30491d2400eb31724c5\" data-private-watermark-src=\"v2-f51ea8bda168b4a167db2da9c9b214ed\" data-tags=\"porn\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-3cc4c011d5304955f03627a411e25225_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"774\" data-rawheight=\"1093\" data-watermark=\"watermark\" data-original-src=\"v2-3cc4c011d5304955f03627a411e25225\" data-watermark-src=\"v2-ada0cd817e0dee6503f15901c9f5fad9\" data-private-watermark-src=\"v2-85d8a6346c2ce60dc59d8bc6f148d8a5\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-50127d2bf7e4371d5b95034aa0b9d382_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"774\" data-rawheight=\"1093\" data-watermark=\"watermark\" data-original-src=\"v2-50127d2bf7e4371d5b95034aa0b9d382\" data-watermark-src=\"v2-707cf9749fb33f57d6d5f1193d2030ed\" data-private-watermark-src=\"v2-be654c5ec80d11155c4de641d136cbb9\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-17c743d1013f561d786f033d442dc1cc_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"774\" data-rawheight=\"1093\" data-watermark=\"watermark\" data-original-src=\"v2-17c743d1013f561d786f033d442dc1cc\" data-watermark-src=\"v2-1d960c6cdca0c2ec3fe095d3dfe65383\" data-private-watermark-src=\"v2-261d15d74ce46c3f18002cc09e2031f8\" data-tags=\"porn\"></p>\n<p><br></p>\n<p data-pid=\"xZHXbkzD\">献丑了……</p>\n<p data-pid=\"GJgv4wD1\">当时真是瞎琢磨了很多实验手法……现在没那个心气儿和环境了……</p>\n<p data-pid=\"hOi98j6N\">所以这段无论是非常依赖页面的并行的分镜构图、还是两个字体叠起来的对白，我觉得你怎么影视化和文字化，都不可能重现这只属于页面漫画的趣味。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zcloud1985?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">ZCloud</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/535590151/answer/2513470814?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">59 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/533655857?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">优秀的人普遍具备哪些特质？</a><br><a href=\"http://www.zhihu.com/question/522230269?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">占星为何不准？</a><br>\n","link":"http://www.zhihu.com/question/535590151/answer/2513470814?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"pandas 在使用时语法感觉很乱，有什么学习的技巧吗？","date":"2022-06-03 23:57:26","description":"\n<p data-pid=\"ZBf6EtfE\">利益相关，我是pandas早期版本（1.0之前）的贡献者。以下是我的PR</p>\n<a href=\"http://link.zhihu.com/?target=https%3A//github.com/pandas-dev/pandas/pulls%3Fq%3Dauthor%253Apeterpanmj%2B\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Pull requests · pandas-dev/pandas</a><p data-pid=\"Go4s4K-R\">这也不是你一个人遇到的问题。工作原因，我经常review一些菜鸟数据分析、数据处理脚本,对我来说感觉就像是深入到了老坛酸菜的土坑生产作坊。幸运的是社区已经总结了一些常见问题并给出了常见操作的操作手册,都在官网文档的Cookbook中。篇幅不长，显浅易懂，都有可执行样例，强烈推荐！！！</p>\n<a href=\"http://link.zhihu.com/?target=https%3A//pandas.pydata.org/docs/user_guide/cookbook.html\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-605a4db04bdfae93f617622d951bfc5d_qhd.jpg?source=b1748391\" data-image-width=\"640\" data-image-height=\"480\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Cookbook - pandas 1.4.2 documentation</a><p data-pid=\"5UkHZlVU\">我有一些best practice可以解决新手实践中常见的问题，立即提高代码可读性</p>\n<p data-pid=\"IZNMD7o1\"><b>1.临时DataFrame散落在一个notebook各处，（下文缩写为df）</b></p>\n<p data-pid=\"n1EEWXUw\">    为了帮菜鸟debug一个error经常要trace一个又一个临时DataFrame溯源出错的列到底是怎么来的，df1,df2,df3..., df_temp1, df_temp2等等，真的心累。</p>\n<p data-pid=\"Lp8oB-9q\">     还有，许多人为了看了一些网络教程，为避免满屏的setting with copy warning的，建的都是深度拷贝(df.copy（deep=True）。极大浪费了内存。题主所谓的语法乱，应该很大程度上是这样造成的。</p>\n<p data-pid=\"CyrdgefZ\">     可以用pipe方法解决这个问题,pipe即为管道,把前一项输出的DF，作为后一项输入的DF,同时把df操作函数对象作为第一参数，它所需的参args和kwargs传入。这样避免产生中间的df。当参数复杂（比如是巨大的dictionary，或者是一连串函数计算后的结果）、高阶方法多，比直接chaining可读性高。</p>\n<div class=\"highlight\"><pre><code class=\"language-python\"><span></span><span class=\"c1\"># 举个例子，每次分析工作完成后，把琐碎的数据清理工作以如下形式放在数据导入后的下一步</span>\n<span class=\"n\">dtype_mapping</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'a'</span><span class=\"p\">:</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">:</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">,</span> <span class=\"s1\">'c'</span><span class=\"p\">:</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"p\">,</span> <span class=\"s1\">'d'</span><span class=\"p\">:</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int64</span><span class=\"p\">,</span> <span class=\"s1\">'e'</span><span class=\"p\">:</span><span class=\"nb\">str</span><span class=\"p\">}</span>\n<span class=\"n\">df_cleaned</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">df</span>\n  <span class=\"o\">.</span><span class=\"n\">pipe</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"o\">.</span><span class=\"n\">sort_index</span><span class=\"p\">,</span> <span class=\"n\">ascending</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span> <span class=\"c1\">#按索引排序</span>\n  <span class=\"o\">.</span><span class=\"n\">pipe</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"o\">.</span><span class=\"n\">fillna</span><span class=\"p\">,</span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">'ffill'</span><span class=\"p\">)</span> <span class=\"c1\">#缺失值处理</span>\n  <span class=\"o\">.</span><span class=\"n\">pipe</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">,</span> <span class=\"n\">dtype_mapping</span><span class=\"p\">)</span> <span class=\"c1\">#数据类型变换</span>\n  <span class=\"o\">.</span><span class=\"n\">pipe</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"o\">.</span><span class=\"n\">clip</span><span class=\"p\">,</span> <span class=\"n\">lower</span><span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mf\">0.05</span><span class=\"p\">,</span> <span class=\"n\">upper</span><span class=\"o\">=</span><span class=\"mf\">0.05</span><span class=\"p\">)</span> <span class=\"c1\">#极端值处理</span>\n<span class=\"p\">)</span>  \n<span class=\"c1\"># 也可以包装成一个函数</span>\n<span class=\"k\">def</span> <span class=\"nf\">clean_data</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">):</span>\n  <span class=\"o\">...</span><span class=\"c1\">#上面的pipe操作</span>\n  <span class=\"k\">return</span> <span class=\"n\">df_cleaned</span>\n</code></pre></div>\n<p data-pid=\"WjgXDJ-V\"><b>2 衍生列、辅助列生生成在各个角落</b></p>\n<p data-pid=\"PKzRH3D_\">    这会导致debug困难，尤其是列还是前后依赖的情况。通常还伴随着setting with copy warning。可以使用assign方法，把一些列生成操作集中在一起。（和直接用df['x] = ... 不同的是assign方法会生成一个新的df，原始的df不会变 ，不会有setting with copy warning），还有一个好处，就是不会因为生成新的操作而打断函数chaining.</p>\n<div class=\"highlight\"><pre><code class=\"language-python\"><span></span> <span class=\"c1\"># 官方doc的例子</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"mi\">25</span> <span class=\"o\">+</span> <span class=\"mi\">5</span> <span class=\"o\">*</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">),</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"temp_c\"</span><span class=\"p\">])</span>\n<span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">assign</span><span class=\"p\">(</span><span class=\"n\">temp_f</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">'temp_c'</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mi\">9</span> <span class=\"o\">/</span> <span class=\"mi\">5</span> <span class=\"o\">+</span> <span class=\"mi\">32</span><span class=\"p\">,</span>\n          <span class=\"n\">temp_k</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">'temp_f'</span><span class=\"p\">]</span> <span class=\"o\">+</span>  <span class=\"mf\">459.67</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">5</span> <span class=\"o\">/</span> <span class=\"mi\">9</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p data-pid=\"ICUKE9hO\"><b>3. 多个简单条件组合起来的筛选看上去很复杂</b></p>\n<p data-pid=\"9F9MIO1d\">用query解决很多条件的问题筛选的问题。</p>\n<div class=\"highlight\"><pre><code class=\"language-python\"><span></span><span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"s2\">\"abc\"</span><span class=\"p\">))</span>\n\n<span class=\"c1\">#用query</span>\n<span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"s2\">\"(a&gt;0 and b&lt;0.05) or c&gt;b\"</span><span class=\"p\">)</span>\n<span class=\"c1\">#普通方法</span>\n<span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[((</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'b'</span><span class=\"p\">]</span><span class=\"o\">&lt;</span><span class=\"mf\">0.05</span><span class=\"p\">))</span><span class=\"o\">|</span> <span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'c'</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'b'</span><span class=\"p\">])]</span>\n</code></pre></div>\n<p data-pid=\"MfwzpGhT\">明显query方法简洁，而且条件越多，逻辑判断越多，可读性优势就越明显（前提是单个条件都是简单的判断）。</p>\n<p data-pid=\"7ldMjYIY\"><b>4.不必要的iloc或者iterrow或者itertuple遍历df</b></p>\n<p data-pid=\"TJw2223D\">凡是数值操作，用pandas或者numpy原生的函数一般比你自己定义一个函数要快1个数量级以上，而且可读性完全不一样。以算股票收益率为例。</p>\n<div class=\"highlight\"><pre><code class=\"language-python\"><span></span><span class=\"c1\"># 以下是数据准备。</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas_datareader</span> <span class=\"k\">as</span> <span class=\"nn\">web</span>\n<span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2021</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2021</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#选google，testla，neflix,和coke</span>\n<span class=\"n\">assets</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'GOOG'</span><span class=\"p\">,</span> <span class=\"s1\">'TSLA'</span><span class=\"p\">,</span> <span class=\"s1\">'NFLX'</span><span class=\"p\">,</span> <span class=\"s1\">'KO'</span><span class=\"p\">]</span>\n\n<span class=\"c1\">#读取4个股票在2021年下半年的历史交易数据</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">DataReader</span><span class=\"p\">(</span><span class=\"n\">assets</span><span class=\"p\">,</span> <span class=\"s1\">'stooq'</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"p\">)</span> <span class=\"err\">、</span>\n<span class=\"n\">df_cls_price</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[:,</span><span class=\"s1\">'Close'</span><span class=\"p\">]</span> <span class=\"c1\">#只看收盘价</span>\n\n<span class=\"n\">下面是错误的示范</span><span class=\"err\">，</span><span class=\"n\">没有耐心的同学可以直接跳过</span><span class=\"err\">。</span>\n\n<span class=\"c1\">#方法一用iloc遍历的方式</span>\n<span class=\"k\">def</span> <span class=\"nf\">wrong_func</span><span class=\"p\">():</span>\n    <span class=\"n\">df_wrong</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"o\">=</span><span class=\"n\">df_cls_price</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">,</span> \n        <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"n\">df_cls_price</span><span class=\"o\">.</span><span class=\"n\">columns</span><span class=\"p\">)</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">df_cls_price</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]):</span>\n        <span class=\"k\">for</span> <span class=\"n\">s</span> <span class=\"ow\">in</span> <span class=\"n\">assets</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"n\">df_wrong</span><span class=\"o\">.</span><span class=\"n\">iloc</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">s</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"c1\">#通过iloc[i-1]和iloc[i]做差</span>\n                <span class=\"n\">diff</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">df_cls_price</span><span class=\"o\">.</span><span class=\"n\">iloc</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">s</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">df_cls_price</span><span class=\"o\">.</span><span class=\"n\">iloc</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">s</span><span class=\"p\">])</span>\n                <span class=\"n\">denominator</span> <span class=\"o\">=</span> <span class=\"n\">df_cls_price</span><span class=\"o\">.</span><span class=\"n\">iloc</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">s</span><span class=\"p\">]</span>\n                <span class=\"n\">df_wrong</span><span class=\"o\">.</span><span class=\"n\">iloc</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">s</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">diff</span><span class=\"o\">/</span><span class=\"n\">denominator</span>\n    <span class=\"k\">return</span> <span class=\"n\">df_wrong</span>\n\n\n\n<span class=\"c1\">#call这个上述方法</span>\n<span class=\"n\">wrong_func</span><span class=\"p\">()</span>\n\n<span class=\"c1\">#方法二、用pandas自带方法</span>\n <span class=\"n\">df_cls_price</span><span class=\"o\">.</span><span class=\"n\">pct_change</span><span class=\"p\">()</span>\n\n<span class=\"c1\">#看下执行效率</span>\n</code></pre></div>\n<p><img src=\"https://pic1.zhimg.com/v2-2442f5a74d56c4b02dee5b16bba9b326_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"328\" data-rawheight=\"235\" data-watermark=\"original\" data-original-src=\"v2-2442f5a74d56c4b02dee5b16bba9b326\" data-watermark-src=\"v2-1f78593a37d17b381cecd58fd3ef1b21\" data-private-watermark-src=\"v2-2f8beccc33f05dce7fe0c4354a0bfb3e\"></p>\n<p data-pid=\"lE2aiFP1\">在我的机器上时间差了200多倍，而且方便好多。</p>\n<p data-pid=\"1HeN-Dks\"><b>5 把timeseries数据当成string操作，又慢又难懂</b></p>\n<div class=\"highlight\"><pre><code class=\"language-python\"><span></span><span class=\"c1\"># 还是上面的例子，求股票月度平均价格</span>\n\n<span class=\"c1\"># 方法一、用groupby，string来做</span>\n<span class=\"p\">(</span><span class=\"n\">df_cls_price</span>\n   <span class=\"c1\"># 用function作为grouper时，会取日期索引字符串前7位，比如2021-07</span>\n  <span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)[:</span><span class=\"mi\">7</span><span class=\"p\">])</span> \n  <span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span>\n<span class=\"err\">）</span>\n\n<span class=\"c1\">#方法二、用resample来操作</span>\n<span class=\"p\">(</span><span class=\"n\">df_cls_price</span>\n  <span class=\"o\">.</span><span class=\"n\">resample</span><span class=\"p\">(</span><span class=\"s1\">'1M'</span><span class=\"p\">)</span>\n  <span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p data-pid=\"YLyWCJip\">方法2更直观且速度快，而且可复用性变强了，可以随时换到其他时间区间，方法一就不行了。</p>\n<div class=\"highlight\"><pre><code class=\"language-python\"><span></span><span class=\"c1\"># 方法二，也可以很容易扩展到其他时间区间</span>\n<span class=\"p\">(</span><span class=\"n\">df_cls_price</span>\n<span class=\"o\">.</span><span class=\"n\">resample</span><span class=\"p\">(</span><span class=\"s1\">'10T'</span><span class=\"p\">)</span> <span class=\"c1\">#10天</span>\n<span class=\"c1\">#.resample('2W')  #双周 </span>\n<span class=\"c1\">#.resample('Q)    #季度</span>\n<span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span>\n<span class=\"p\">)</span>\n<span class=\"c1\"># 还可以有分钟、秒，不适用本案例</span>\n</code></pre></div>\n<p><br></p>\n<p data-pid=\"heNC-Bs2\"><b>6.不必要的merge，</b></p>\n<p data-pid=\"uKg46TBB\">常见情况是用了汇总操作，然后把汇总结果merge回原来的数据。然后进行下一步计算。这就可以用transform代替。接上例，这次做一个原价减去月度均价的操作。</p>\n<div class=\"highlight\"><pre><code class=\"language-python\"><span></span><span class=\"c1\">#方法一、用agg汇总后再merge到原表</span>\n<span class=\"n\">df_wrong</span> <span class=\"o\">=</span> <span class=\"n\">df_cls_price</span><span class=\"o\">.</span><span class=\"n\">reset_index</span><span class=\"p\">()</span> <span class=\"c1\">#把datetime64的索引变成列，列名为Date</span>\n<span class=\"n\">df_wrong</span><span class=\"p\">[</span><span class=\"s1\">'month'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">df_wrong</span><span class=\"p\">[</span><span class=\"s1\">'Date'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)[:</span><span class=\"mi\">7</span><span class=\"p\">])</span> <span class=\"c1\"># 生成month辅助列</span>\n\n<span class=\"c1\">#得到月均价</span>\n<span class=\"n\">df_wrong_avgprice</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">df_wrong</span>\n <span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"s1\">'month'</span><span class=\"p\">)</span>\n <span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\">#把月均价df和原来数据合并</span>\n<span class=\"n\">df_wrong_joined</span> <span class=\"o\">=</span> <span class=\"n\">df_wrong</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">df_wrong_avgprice</span><span class=\"p\">,</span><span class=\"n\">on</span><span class=\"o\">=</span><span class=\"s1\">'month'</span><span class=\"p\">,</span> <span class=\"n\">rsuffix</span><span class=\"o\">=</span><span class=\"s1\">'_1m_mean'</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#计算</span>\n<span class=\"n\">df_wrong_joined</span><span class=\"o\">.</span><span class=\"n\">assign</span><span class=\"p\">(</span>\n    <span class=\"n\">GOOG_demean</span> <span class=\"o\">=</span> <span class=\"n\">df_wrong_joined</span><span class=\"p\">[</span><span class=\"s1\">'GOOG'</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">df_wrong_joined</span><span class=\"p\">[</span><span class=\"s1\">'GOOG_1m_mean'</span><span class=\"p\">],</span>\n    <span class=\"n\">TSLA_demean</span> <span class=\"o\">=</span> <span class=\"n\">df_wrong_joined</span><span class=\"p\">[</span><span class=\"s1\">'TSLA'</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">df_wrong_joined</span><span class=\"p\">[</span><span class=\"s1\">'TSLA_1m_mean'</span><span class=\"p\">],</span>\n    <span class=\"n\">NFLX_demean</span> <span class=\"o\">=</span> <span class=\"n\">df_wrong_joined</span><span class=\"p\">[</span><span class=\"s1\">'NFLX'</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">df_wrong_joined</span><span class=\"p\">[</span><span class=\"s1\">'NFLX_1m_mean'</span><span class=\"p\">],</span>\n    <span class=\"n\">KO_demean</span> <span class=\"o\">=</span> <span class=\"n\">df_wrong_joined</span><span class=\"p\">[</span><span class=\"s1\">'KO'</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">df_wrong_joined</span><span class=\"p\">[</span><span class=\"s1\">'KO_1m_mean'</span><span class=\"p\">]</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p><br></p>\n<div class=\"highlight\"><pre><code class=\"language-python\"><span></span><span class=\"c1\">#方法二、用grouper加transform</span>\n<span class=\"n\">df_cls_price</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Grouper</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"s1\">'1M'</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"o\">-</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">())</span>\n\n<span class=\"c1\">#方法三、熟练用户会直接用‘-’，更快更简洁</span>\n<span class=\"n\">df_cls_price</span> <span class=\"o\">-</span> <span class=\"n\">df_cls_price</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Grouper</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"s1\">'1M'</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#看一下效率</span>\n</code></pre></div>\n<p><img src=\"https://pic1.zhimg.com/v2-822f62f50f6448764f221763ca13cb1b_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"801\" data-rawheight=\"209\" data-watermark=\"original\" data-original-src=\"v2-822f62f50f6448764f221763ca13cb1b\" data-watermark-src=\"v2-8db655bff34a1064a05280946478719d\" data-private-watermark-src=\"v2-0a4c141e87bec6c69220ea4bfacb7dd7\"></p>\n<p data-pid=\"MKlvIupd\">可以看到用transform明显代码简洁，而且没有生成必要的df和不必要的辅助列。而且可以非常容易扩展到其他时间间隔。</p>\n<p data-pid=\"6ol2NeY7\"><b>7.没有向量化的思维，太多for循环，不会用numpy造作</b></p>\n<p data-pid=\"Dljs69ei\">参考这个回答。这是个典型的利用numpy广播机制，比较列和行的问题。</p>\n<p data-pid=\"vdlqpeRI\"><a href=\"https://www.zhihu.com/question/58536414/answer/2505053108\" class=\"internal\">如何用 pandas 处理这个问题?</a></p>\n<p><br></p>\n<p data-pid=\"Ja-jJlmr\"><b>8.apply函数用非常复杂的条件，很多的if else</b></p>\n<p data-pid=\"TGmXo26i\"><br></p>\n<p data-pid=\"3NnitnUo\">比如 </p>\n<div class=\"highlight\"><pre><code class=\"language-python\"><span></span><span class=\"k\">def</span> <span class=\"nf\">abcd_to_e</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"mi\">1</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"mi\">1</span>\n    <span class=\"k\">elif</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">'b'</span><span class=\"p\">]</span><span class=\"o\">&lt;</span><span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">'b'</span><span class=\"p\">]</span>\n    <span class=\"k\">elif</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"mf\">0.1</span> <span class=\"ow\">and</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">'b'</span><span class=\"p\">]</span><span class=\"o\">&lt;</span><span class=\"mi\">10</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"mi\">10</span>\n    <span class=\"k\">elif</span> <span class=\"o\">...</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"mi\">1000</span>\n    <span class=\"k\">elif</span> <span class=\"o\">...</span>\n    \n    <span class=\"k\">else</span><span class=\"p\">:</span> \n        <span class=\"k\">return</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"s1\">'c'</span><span class=\"p\">]</span>\n\n<span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">apply</span><span class=\"p\">(</span><span class=\"n\">abcd_to_e</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>   \n</code></pre></div>\n<p data-pid=\"sgMFmhf1\">这个用numpy的select可以避免。参考我在另一个问题下的答案。瞬间提高可读性，效率也会提升。</p>\n<a href=\"https://www.zhihu.com/question/54631460/answer/2505587072\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pica.zhimg.com/v2-fbd2f34975fc83e18501cfdc75cd125c_qhd.jpg?source=b1748391\" data-image-width=\"594\" data-image-height=\"368\" class=\"internal\">python DataFrame 列运算 ?</a><p data-pid=\"s1f7tEo5\">----answer-end-here----</p>\n<p data-pid=\"daR3VKha\">以上是如何解决“语法乱的问题”。关于学习建议，请移步我另外一个回答</p>\n<p data-pid=\"Zasc1E0Z\"><a href=\"https://www.zhihu.com/question/37180159/answer/2503649304\" class=\"internal\">如何系统地学习Python 中 matplotlib, numpy, scipy, pandas？</a></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/peter-14-26?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">peter</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/289788451/answer/2495499460?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">47 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/506501330?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">在 Pandas 中如何把对象转换为浮点型？</a><br><a href=\"http://www.zhihu.com/question/516238754?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">pandas的shift没有办法应用到apply中，该如何解决?</a><br>\n","link":"http://www.zhihu.com/question/289788451/answer/2495499460?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"Python自学指南与书籍推荐","date":"2022-06-03 12:28:44","description":"\n<h2>一、起因</h2>\n<p data-pid=\"0wpn9n6u\">每年都有若干个朋友同事咨询我，他们想学习Python，学好Python，希望我能分享分享经验技术。</p>\n<p data-pid=\"DybSTf3Y\">我自己在python开发上有一定积累、平时也喜欢分享一些技术知识。但是想回答这个问题，还真不容易。</p>\n<p data-pid=\"DPshKjjo\">因为 Python 涉及的知识内容还是比较多的，短时间内必然无法详述所知。我自己也比较希望分享的内容能对朋友们都有用，而不是说完即忘、听完即止。</p>\n<p data-pid=\"tGTojgNf\">入门类的介绍太粗浅，网络上各处也都有。</p>\n<p data-pid=\"8UScEfhw\">纯粹的知识讲解，那么基本只能讲一小块，毕竟Python的一小个分支内容，都可以出一整门课的内容来讲解。这样讲反不如直接在网络上寻找相关课程上，毕竟也是人家精心准备的。</p>\n<p data-pid=\"oaC95YNJ\">于是往往就回复朋友们，让他们多读书，并推荐相关书籍读。</p>\n<p data-pid=\"Kfh8nHbJ\">但事后细想，这就像教武功只教招式，却不告诉心法内功的修炼方式。可能可以学个一招半式，但无法精进。要成为大师，应该内外兼修。</p>\n<p data-pid=\"25c9xg3q\">故而，也要修炼 <b>学习的内功心法</b>，即能快速掌握一项技能知识的方法与能力。</p>\n<p data-pid=\"qAjongJo\">所以写下本篇文章，既分享书籍，也配合分享一套自学python的方法论，帮助小伙伴后续更快地学习、进阶。</p>\n<p data-pid=\"nxV_44YI\">毕竟<b>授人以鱼不如授人以渔</b>。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-5bc50dee3d9faf80eb1514ec4178c6a9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"200\" data-rawheight=\"220\" class=\"content_image\" width=\"200\"></figure><p data-pid=\"ubYIvDGn\">我是有这个信心分享自学方法，因为我自己也是一路自学而来的。</p>\n<p data-pid=\"9m3LXOHo\">我是非IT科班出身，本科金融、研究生数学，Python等技术均是纯自学的。自学的成果也算良好，硕士一毕业便在香港从事量化开发工作，业余时间分享的知乎，如今也有9000余人关注。</p>\n<p data-pid=\"WDr-PKfc\">有这个成果，大概可归因于：兴趣 + 工作需求 + 良好的学习方法</p>\n<ol>\n<li data-pid=\"Zz5_EyOH\">\n<b>兴趣是最好的老师</b>，让我愿意不断地接触新事物、新知识。</li>\n<li data-pid=\"uOmQehIq\">\n<b>工作需求则能让我保持长期学习动力</b>，因为学习的成果能很快在工作中应用，有持续的正向反馈才能走得更远</li>\n<li data-pid=\"mRtax7qz\">\n<b>良好的学习方法则是让我更加高效地吸收知识</b>。时间就是金钱、效率就是生命，学得快，才能用得快，用得多也就反馈更多，总结更多知识，进一步刺激学习，形成一套良性循环。</li>\n</ol>\n<p data-pid=\"g4Z3836j\">而本文重点将分享我的一套Python技术学习方法论，提供一套在学习python路上的参考指南。</p>\n<p data-pid=\"Ld2KXtpI\">前半部分以重点阐述学习方法，后半部分则分享对应的学习路径、与优质书籍推荐。</p>\n<p data-pid=\"NhvpfpVQ\">期待得到各位收藏与点评。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-5347de07c5a5a5dfa31bd2b21249c24b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"200\" data-rawheight=\"220\" class=\"content_image\" width=\"200\"></figure><hr>\n<h2>二、Python语言介绍</h2>\n<p data-pid=\"uwdyoUyR\">在介绍学习方法前，先简单介绍一下我们的学习对象：Python。</p>\n<p data-pid=\"6FOiUBwq\">Python是一种流行的编程语言。它由Guido van Rossum创建，于1991年发布。Python社区二十几年来蓬勃发展，在很多业务领域上形成了强大的生态，如 <b>Web开发、网络编程、自动化运维、Linux系统管理、数据分析、科学计算、人工智能、机器学习</b>等，以至于不少初创公司都采用Python来覆盖大部分技术需求。</p>\n<p data-pid=\"tLoG88dU\">Python 知名应用包括但不限于 Youtube、Reddit、Dropbox、豆瓣以及我正在写作的知乎。</p>\n<h3>Python 优点</h3>\n<p data-pid=\"svtl38H8\">Python是公认的效率极高的工具性语言，其优点包括：</p>\n<ol>\n<li data-pid=\"Er3cDoWm\">\n<b>易于学习</b>：Python有相对较少的关键字，结构简单，和一个明确定义的语法，学习起来更加简单。</li>\n<li data-pid=\"zqUjOMfK\">\n<b>语法简明</b>：Python语言力求代码简洁、优美，相对于其他编程语言，它注重的是如何解决问题而不是编程语言的语法和结构。阅读一段良好的Python程序就感觉像是在读英语一样。</li>\n<li data-pid=\"E4VZ-Q-6\">\n<b>互动模式</b>：Python是一门解释性脚本语言，可以直接从源代码运行程序，REPL特性（read eval print loop）使程序写起来非常方便，可以从终端输入执行代码并获得结果的语言，这对于数据分析这类需要在开发过程中即刻看到程序结果的业务是十分便利的。</li>\n<li data-pid=\"S_eDhLT-\">\n<b>丰富强大的库</b>：Python语言号称自带电池(BatteryIncluded)，寓意是Python语言的类库非常的全面，包含了解决各种问题的类库。任何功能几乎都可以在标准库或开源项目的第三方库中找到</li>\n<li data-pid=\"MgdfMH5L\">\n<b>跨平台</b>：Python语言是开源的，其程序可以很快地移植到Linux、Macos、Windows等系统。</li>\n<li data-pid=\"5WQdz77l\">\n<b>可扩展</b>：如果你需要一段运行很快的关键代码，或者是想要编写一些不愿开放的算法，你可以使用C或C++完成那部分程序，然后从你的Python程序中调用。</li>\n<li data-pid=\"47snYkox\">\n<b>开发效率高</b>：Python的优点是相辅相成的，因为语法简明、第三方类库强大，所以可以用短短几行即可实现业务功能。实现相同的功能，Python代码的文件往往只有C、C++和Java代码的1/5~1/3。开发效率高的语言，能够更好得满足互联网快速迭代的需求，因此，Python语言在互联网公司使用非常广泛。</li>\n<li data-pid=\"HkxN1jUr\"><b>其他：可嵌入、面向对象、胶水语言</b></li>\n</ol>\n<h3>Python 缺点</h3>\n<p data-pid=\"mIfZp3s9\">任何事物都不可能是完美的，Python也是。我们也需要理解Python的劣势，以更好地在我们工作中进行技术选型。</p>\n<p data-pid=\"aOv-6gSa\">Python较为明显的劣势有：</p>\n<ol>\n<li data-pid=\"8XNd9iy6\">\n<b>执行速度不够快</b>：动态语言的硬伤自然就是慢，当然python也对这方面有所弥补，那就是对效率敏感的地方可以用C重写，如第三方库numpy</li>\n<li data-pid=\"9b2MauT5\">\n<b>运行时报错</b>：语法错误都在运行时抛出，也就没有编译期的静态检查来排错</li>\n<li data-pid=\"y6_jvYV-\">\n<b>无类型声明</b>：无法建立约束易导致代码质量低，在大型项目中使用有较高风险</li>\n<li data-pid=\"LYPscTXY\">\n<b>GIL限制并发</b>：无法有效利用多线程，导致多线程的cpu效率提升不大</li>\n<li data-pid=\"iZ0LT3wG\">\n<b>版本兼容</b>：Python2和python3两个不兼容的版本</li>\n</ol>\n<p data-pid=\"v4V5uaZz\">但瑕不掩瑜，Python 依然是一门出色的语言，在中小型业务上依旧游刃有余，现在学习它还是十分超值的。</p>\n<hr>\n<h2>三、Python 学习方法</h2>\n<p data-pid=\"VigWXwiQ\">话归正题，我们开始介绍 自学Python技术 的方法。</p>\n<p data-pid=\"Ve8eRuSp\">任何技术的打磨，都需要吸收大量的知识进行积累（输入），并在长期实践中进行完善（输出）。</p>\n<p data-pid=\"bfM68994\">Python 也不例外。</p>\n<p data-pid=\"k4sFElti\">对于自学，最主要的途径无外乎以下几条</p>\n<ol>\n<li data-pid=\"6RD4ewfJ\">视频：入门、大概认知</li>\n<li data-pid=\"-d_p6J2r\">书籍：系统性学习知识框架</li>\n<li data-pid=\"Phw2JW_w\">技术文档：学习成熟的第三方工具</li>\n<li data-pid=\"sTpYm-r6\">技术论坛：技术实践与技巧，是知识体系的精华补充</li>\n<li data-pid=\"U7sxw0kQ\">业务实践：总结经验，反哺知识体系</li>\n<li data-pid=\"DbbNshhU\">源代码：深度理解，可从底层进行改造技术框架以满足需求</li>\n</ol>\n<p data-pid=\"XwItSq1M\">以上这几条在自学的过程中都会用到，不过在不同阶段侧重不同。</p>\n<h3>1. 视频：入门、学习概念性知识</h3>\n<p data-pid=\"bEiNS3aS\">在入门阶段，看视频教程是有必要的。因为入门时大概率眼前是一片茫然的，啥都不懂，这时候配合看一些视频教程，可以跟着操作，很快就能学习到怎么安装环境、使用Python和相关的库，用什么样的编辑器（IDE）来写代码等等。入门具体应用场景，如数据分析，也一样，你可以跟着视频，一步一步走写代码看结果，从读入数据、分析数据、画图、生成报告，做完以后也就都大概懂了。</p>\n<p data-pid=\"tU5SSTeQ\">前期不用过于强调自己知识体系的完备性，保护好自己的兴趣和求知欲反而更重要。</p>\n<p data-pid=\"k8c8Hshp\">但看视频就跟老师上课一样，所有东西过一遍，往往学了个大概，对基本概念不甚明确，没有书里详尽，会导致基础不扎实。 所以建议看完视频，对技术有一个全局的认识以后，便可以开始读书。</p>\n<h3>2. 读书：系统性学习与建立知识框架</h3>\n<p data-pid=\"-fcTokYI\">单位时间内书的信息密度比视频大的多，而且读书可以自己控制速度，简单的地方可以一扫而过，难的地方就放慢速度，读起来更有效率。</p>\n<p data-pid=\"GW3s-qrK\">相比于看视频而言，看书需要主动、需要投入更如精力和毅力，但看书吸收效率高。 所以</p>\n<ul>\n<li data-pid=\"pryy4H6d\">如果想要 快速接受知识、想大概了解、不求专业，那么就看视频学习。</li>\n<li data-pid=\"UQysJs4L\">如果想要扎实记住知识，想学得专业、深入、系统，那么看书学习。</li>\n</ul>\n<p data-pid=\"HAB2SLJt\">读书方法是本文的重点，后面将详细介绍我的心得和相关书籍推荐。</p>\n<h3>3. 技术文档：学习成熟的第三方工具与技术实践技巧</h3>\n<p data-pid=\"zyS67yDZ\">通常根据业务类型，你需要对相应的主流的工具框架进行学习，如对于数据分析领域而言，numpy、pandas就是必学。</p>\n<p data-pid=\"SDIwIpXw\">大量数据书籍中都会有介绍这类工具的使用，但是到了实践中的时候，你会发现书上的内容还是比较有限的，想要全面了解，那么阅读这些工具的文档是必不可少的，如果文档上依然解释的有限，那么放心，你大概率不是第一个遇到这个问题的，可以充分利用Google进行搜索，各个论坛上基本都有相关的答案。</p>\n<h3>4. 技术论坛：技术实践与技巧，是知识体系的精华补充</h3>\n<p data-pid=\"Y6J6n9Td\">编程这个技术，是公认的最适合自学的一门技术。高质量的学习资料很多都是免费开源的，并且很多高质量项目最关键的源代码也是公开的；同时遇到问题也是最容易得到解决的，因为同行程序员们都是电脑前活动的动物，而且喜好分享（炫耀~）技术知识，你的问题大概率各种论坛、博客上已有发表，且下面有一堆资深老鸟提供解答方案，99%的问题几乎都是如此。</p>\n<p data-pid=\"Snsag9_c\">如果不幸，遇到了1%没有人问过的问题，那么也不必担心，详细地把这个问题描述好，发到问答网站上，不久一定会有热心小伙伴提供解决方案，毕竟这又是一次难得的炫技机会。</p>\n<p data-pid=\"mjqSvFkg\">特别的，如果要在社区里进行提问，非常推荐先阅读一遍《提问的智慧》，能够提高问题得到又快又好的回答的概率。个人认为是技术学习的必读文章之一。</p>\n<a href=\"https://link.zhihu.com/?target=https%3A//github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《提问的智慧》</a><h3>5. 业务实践：总结经验，反哺知识体</h3>\n<p data-pid=\"GZ4nJGye\">实践是检验整理的唯一标准，同时，实践的过程中，你会明白所学的技术该用在哪，也会逐渐意识到自己的不足，知道光会用技术，和用好技术是两码子事，从而逐步去完善自己的技术体系。</p>\n<h3>6. 源代码：深度理解，可从底层进行改造技术框架以满足需求</h3>\n<p data-pid=\"wx26c1XD\">当业务更加深入的时候，你会需要对原有框架进行改造、甚至自建一套框架，那么此时去阅读阅读经典项目的源代码就非常有必要了，能偷师学习最精华的架构设计与功能实现。</p>\n<hr>\n<h2>四、Python 读书方法论：飞轮读书法</h2>\n<p data-pid=\"tfoSEZZQ\">其中，在各个知识学习的途径里，我尤为看重书籍阅读。</p>\n<p data-pid=\"Q5FwM4pk\">读书的方法，尤为推荐<b>读书飞轮</b>这套理论，作者是 亚马逊工程师 阿莱克西斯 <a class=\"member_mention\" href=\"https://www.zhihu.com/people/323b5c5c0642497cbff6e88e1c858cbc\" data-hash=\"323b5c5c0642497cbff6e88e1c858cbc\" data-hovercard=\"p$b$323b5c5c0642497cbff6e88e1c858cbc\">@阿莱克西斯</a>，文章链接</p>\n<a href=\"https://zhuanlan.zhihu.com/p/55804099\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\"internal\"><span class=\"invisible\">https://</span><span class=\"visible\">zhuanlan.zhihu.com/p/55</span><span class=\"invisible\">804099</span><span class=\"ellipsis\"></span></a><p data-pid=\"fyzjTR9J\">文章的核心观点为：<b>多读书、重阅读速度而轻练习</b>。很像2000年前诸葛丞相的那套“<b>观其大略、不求甚解</b>”。</p>\n<p data-pid=\"3JIWAXeu\">我个人对这套方法论是非常认同、也极其受用的。我个人研究生毕业4年多时间内，应该买了不下六、七百本书，堆满了书房。</p>\n<p data-pid=\"TSDldNYj\">关于什么是读书的飞轮，如何转动读书飞轮，《书魔的学习方法》原文中有较详细地展开说明。</p>\n<p data-pid=\"TRwEwWRq\">本文的这个章节，将摘录部分原文，并结合我个人对其的理解进行简要阐述</p>\n<p data-pid=\"SsE7f_2_\">另外备注一下：读书的飞轮适合 技术入门后、且有一定实践积累的阶段 开始使用。入门时还是要仔仔细细看书，打好基础、打好基础、打好基础。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>1. 什么是读书的飞轮</h3>\n<p data-pid=\"EiFIn4nS\">读书的飞轮效应 指的是<b>技术书会越读越快</b>。</p>\n<p data-pid=\"_EKmJn6E\">其理论基础在于：</p>\n<ul>\n<li data-pid=\"B-8W5BRF\">\n<b>人的大脑是重思考而轻记忆的</b>。人的记忆是有限的，就好比电脑有限的内存甚至cpu的cache，很多时候我们只要记住知识索引即可，而不必“背课文”。书，资料，文章，都是我们知识数据库的硬盘，而我们只要记住在哪里能找到自己曾经理解过的东西，把这些索引知识记录在我们的大脑的cache里即可。</li>\n<li data-pid=\"ksR31Gu4\">\n<b>知识是可以触类旁通的，抽象总结的</b>。这样就使得我们可以记住一些知识的本质，然后很容易的在不同应用场景，推理出相关的知识。当知识可以在你的大脑里形成联系网络，那么即使你忘记了某部分细节，你也可以很容易利用你的其他知识推理出“由于A，B，C，所以这个D应该是这样来的”。这样的结构化记忆模式将更佳有效。</li>\n<li data-pid=\"BGVrN1qO\">\n<b>推理和想象能力越强，需要记忆的东西就越少</b>。锻炼对知识的想象力，对未知的推理抽象能力，当你理解一个东西是怎么来的，那么就算你忘记了它，那么你也可以在需要的时候自己把它推理出来。</li>\n</ul>\n<p data-pid=\"YzKIXxpP\">进而去解决我们学习的终极矛盾 ——<b> 用“有限的大脑去记录无限的知识”</b></p>\n<p data-pid=\"ytGG8QmE\">所以飞轮式读书法非常强调 <b>快速读书、海量读书，重阅读与思考，轻练习与实践</b>。其原因也不难理解：</p>\n<ul>\n<li data-pid=\"n0ZUewdk\">大家读小说会比读技术书快很多，因为读小说不需要什么预备知识就能读懂。而<b>技术书都需要预备知识储备</b>(比如理解B需要理解A），<b>和“理解储备”</b>(即同一个类似的东西我已经在其他地方理解过一次了，所以对于当前的东西则触类旁通）。而你读过的书越多，造成你理解困难的点就越少。</li>\n<li data-pid=\"-3lzrfaT\">读书的飞轮把读书的目的变为更快攻克/理解更多的知识，<b>找出知识间的联系从而更加效率的掌握新的知识</b>，而不在于能立刻用现在学到的知识干什么。如果一个人的知识状态是N个知识，那么你想增加一个知识点，让N+1，只能参考你已有的知识N和利用你的脑子。大部分人的脑子没法变得更聪明，那么只能努力让自己的N越大，你就越能更快得让N+1，这，就是读书的飞轮。</li>\n<li data-pid=\"OTXQ2bD3\">读书飞轮的效果，不在于一朝一夕你学会了什么，能做什么，吃透了什么。而在于大量的阅读的一年一年的积累，创造让别人无法建立的知识壁垒去获得别人(同等智力)无法获得的<b>理解力，推理力，知识联系力</b>，从而提高自己学习，或者知识的效率和速度。</li>\n</ul>\n<h3>2. 如何转动读书的飞轮：</h3>\n<p data-pid=\"s7RZu6VU\">如何才能够让飞轮转起来，读更多的书？</p>\n<p data-pid=\"IJpxzHEh\">这里总结了8条Tips：</p>\n<ol>\n<li data-pid=\"CwnstYYq\">\n<b>明确读书目的为打标记</b>：阅读大部分技术书籍的目标不是“记住”，而是看懂和打标记，这样就可以将碎片时间都利用起来了，有时间就拿出来看看。以后需要用到了，能很快找到在“哪里看到过”，并轻松的把忘记的东西拾起来。</li>\n<li data-pid=\"yY2S8f5v\">\n<b>不要在意“记不住”</b>：担心记不住而反复停留在一本书或者一个知识点，真正“有用的东西”是会不断重复出现在你眼前，要么工作中需要，要么这些知识被同一类的书再次提到，从另一种角度被描述，要么让你感觉“这个东西跟我学过的那个有点像”。这些都是在一次加深理解这些知识的联系机会。</li>\n<li data-pid=\"3fXqH38c\">\n<b>不要在意“看不懂”</b>：如果某个知识点你难以理解，回想自己一两年的积累阅读里都没找到灵感来解惑，那要么是因为这个东西不重要，要么就是因为你还没有积累够阅读量与思考。读书的飞轮的另一个威力就是通过增加新的知识来理解目前不理解的问题，而不是逼着自己一定要在知识不完全的情况下吃透一本书。思索到死都想不出来的时候，还是let it go，然后去看别的。</li>\n<li data-pid=\"4vDFTvsx\">\n<b>不要在意“忘掉了”</b>：消除忘记知识的恐惧。知识总会更新，也有旧的知识会落伍，有用的知识会被反复使用和练习，要允许过时的知识被渐渐遗忘。知识是否有用，取决于未来。</li>\n<li data-pid=\"JBq4yJhh\">\n<b>选择性阅读</b>：知识的价值是不同的，我们要判断重要性而选择性阅读，如果书的部分内容对整体的理解不影响，且不是当前业务中需要用到的，那么完全可以直接跳过。判断是否跳过的关键是：这段知识是否能成为我理解其他重要知识的踏脚石。</li>\n<li data-pid=\"3DP9K-rX\">\n<b>重阅读、轻练习</b>：如果练习的目的是帮助理解，验证猜想，去探索书里没有讲明白的，那么得应该去做。如果练习的目的是记住API，记住细节，那么不建议去做。Once again，知识是否有用，取决于未来。去强化记忆无用的知识是对时间资源的浪费。</li>\n<li data-pid=\"kPhRRmx3\">\n<b>锻炼推理和想象能力</b>：不要强记是什么，而要去理解“为什么”，锻炼用已有的知识，推理出新学的知识的能力，让理解水道渠成。理解新的知识产生的逻辑过程，或者说推理过程，有助于我们修正或者加强自己的逻辑推理思考能力；而推理能力越强，把知识联系记忆的几率越高。</li>\n<li data-pid=\"1P03cbTQ\">\n<b>主动建立你自己的知识网络</b>：多总结，让知识关联起来，用以前学到的知识去撬动新知识，在越学越多的过程中在脑海中建立一个知识图谱。可以通过主动建立脑图笔记、撰写博文等方式主动让自己搭建起知识框架。</li>\n</ol>\n<p data-pid=\"7zJILn7N\">以上，就是对飞轮读书法的一个大概说明。</p>\n<p data-pid=\"OtQzcFr5\">有了这个“武功心法”后，相信你学习“武功招式”应该能更加得心应手。</p>\n<hr>\n<h2>五、Python 书籍推荐</h2>\n<p data-pid=\"cE0EyB4F\">那么我们正式进入Python的读书学习。</p>\n<p data-pid=\"G4kobYPf\">读书，自然要读好书。</p>\n<p data-pid=\"2WPysmKg\">这里我把自己阅读过的Python好书分成三部分（1. 原理 2. 数据分析 3. 工程开发），每个部分精选5、6本书进行分享。</p>\n<p data-pid=\"jyUreGjY\">分享的书籍将以 <b>由浅入深、循序渐进 </b>为原则进行推荐，让大家逐步深入各个模块的知识学习。</p>\n<p data-pid=\"1oCDBkkn\">另外，大部分都是豆瓣高分书籍，推荐理由豆瓣上也有详细阐述，我这里就简单提上几嘴，部分内容直接引用豆瓣精选书评。</p>\n<hr>\n<h3>1. 原理</h3>\n<p data-pid=\"klV-olWA\">最开始学习Python时，就必须要学习它的原理。</p>\n<p data-pid=\"fVeXnaho\">学习路径：<b>从基础语法，到高级语言特性，到最佳实践，如果有时间再翻源码学习</b></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>《Python编程 从入门到实践》第2版</h3>\n<ul>\n<li data-pid=\"l28eXezy\">豆瓣评分：9.2</li>\n<li data-pid=\"DE62xPPt\"><a href=\"https://link.zhihu.com/?target=https%3A//book.douban.com/subject/35196328/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">豆瓣链接</a></li>\n</ul>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1515872576630423552\"></a><p data-pid=\"T08Fgs3D\">基本上，当要入门一项学科知识前，都必须有一个大概的框架，这样学起来效率会比较高。</p>\n<p data-pid=\"7AImOu0Q\">本书是面向初学者的Python编程实用指南，也是目前豆瓣上python书籍评分最高的书籍之一。书本的理论和实践恰到好处，行文逻辑流畅不跳跃，内容精简没有艰深晦涩的概念，非常适合入门，零基础小伙伴读入门系书籍要慢慢来，最重要的目的是培养兴趣。</p>\n<p data-pid=\"OWjDdTy9\">边看边码代码，看完这本书之后，基本就是入门了。如果追求快速落地应用，其实也可以快速调到数据分析数据学习进行实际案例分析。此时，你会编写简单脚本解决问题。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>《流畅的Python》</h3>\n<ul>\n<li data-pid=\"DlQmZKBz\">豆瓣评分：9.4</li>\n<li data-pid=\"9ly6L37g\"><a href=\"https://link.zhihu.com/?target=https%3A//book.douban.com/subject/27028517/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">豆瓣链接</a></li>\n</ul>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1515872687959932928\"></a><p data-pid=\"Rofij6Jn\">本书应该是深入理解Python原理与语法的最好书籍之一，是极佳的 Python 进阶类书目。书本聚焦在数据模型、数据结构、函数对象、面向对象、控制流程与元编程等话题上，关注 Python 对象的构造以及语言内部的特性细节，目的是让读者写出更地道、简洁高效、可读易用的代码。</p>\n<p data-pid=\"cUv-1KHv\">全书 600 多页，洋洋洒洒，旁征博引，内容充实到让人应接不暇，让人时不时就产生一种“又学到了新知识”的感觉，以及一种“哦我想进一步学习 xxx”的求知欲望。</p>\n<p data-pid=\"y9rHN8AE\">Python进阶，必买必学！</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>《Python Cookbook》第3版</h3>\n<ul>\n<li data-pid=\"HG8Scm11\">豆瓣评分：9.4</li>\n<li data-pid=\"1QHEghGz\"><a href=\"https://link.zhihu.com/?target=https%3A//book.douban.com/subject/26381341/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">豆瓣链接</a></li>\n</ul>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1515872792554233856\"></a><p data-pid=\"_BZUgKpN\">本书和《流畅的Python》一样，也是深入理解Python涉及的高级语法和特性书籍，文字描写相对于《流畅的Python》会更晦涩一些，但在Python类机制与原理上阐述得更深入，适合作为前者阅读的辅助或补充书籍。</p>\n<p data-pid=\"ENL1Wvg1\">同样是Python进阶，必买必学！</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>《Effective Python——编写高质量 Python 代码的 90 个有效方法》</h3>\n<ul>\n<li data-pid=\"2i9xaN-h\">豆瓣评分：9.0</li>\n<li data-pid=\"AVswKNy9\"><a href=\"https://link.zhihu.com/?target=https%3A//book.douban.com/subject/3117898/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">豆瓣链接</a></li>\n</ul>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1515873076931342336\"></a><p data-pid=\"j6CUFkeT\">学好了基础原理，动手时也要了解了解最佳实践。</p>\n<p data-pid=\"yQEsrwZz\">本书汇聚了90条优秀实践开发技巧，可以帮我们掌握Pythonic编程范式，充分发挥出Python语言的强大功能，写出健壮而高效的代码。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>《编写高质量代码：改善Python程序的91个建议》</h3>\n<ul>\n<li data-pid=\"Nw7jfmGP\">豆瓣评分：7.4</li>\n<li data-pid=\"ii1J11Fp\"><a href=\"https://link.zhihu.com/?target=https%3A//book.douban.com/subject/3117898/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">豆瓣链接</a></li>\n</ul>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1515873246826721280\"></a><p data-pid=\"uKuERp2U\">与上书相似，不过是国人所写，额外添加了 设计模式、python内部机制的探讨，非常适合作为《Effective Python》一书的补充。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>《Python源码剖析》</h3>\n<ul>\n<li data-pid=\"L9SKKj44\">豆瓣评分：8.8</li>\n<li data-pid=\"gqtOB9Rl\"><a href=\"https://link.zhihu.com/?target=https%3A//book.douban.com/subject/3117898/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">豆瓣链接</a></li>\n<li data-pid=\"HIdrrm2B\">购买链接-已绝版</li>\n</ul>\n<a href=\"https://link.zhihu.com/?target=https%3A//awesome-programming-books.github.io/python/Python%25E6%25BA%2590%25E7%25A0%2581%25E5%2589%2596%25E6%259E%2590.pdf\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">电子版</a><p data-pid=\"4UfnLa27\">如果读完《Python Cookbook》和《流畅的Python》还不过瘾，恭喜你，你可以去挑战、去吸收到Python的精髓 —— C语言</p>\n<p data-pid=\"R6HdK099\">Python本质上是C语言编写的，《Python 源码剖析》是一本极好地讲解Python运行机制的书，书里用最基础的C语言解释Python的运行原理，你会感叹，原来这些Python神奇的功能，是这么实现的。</p>\n<p data-pid=\"udGBX2M8\">这本书需要C/C++功底。书中以CPython为研究对象，在C代码一级，深入细致地剖析了Python的实现。书中不仅包括了对大量Python内置对象的剖析，更将大量的篇幅用于对Python虚拟机及Python高级特性的剖析。通过此书，读者能够透彻地理解Python中的一般表达式、控制结构、异常机制、类机制、多线程机制、模块的动态加载机制、内存管理机制等核心技术的运行原理，同时，本书所揭示的动态语言的核心技术对于理解其他动态语言，如 Javascript、Ruby等也有较大的参考价值。</p>\n<p data-pid=\"cVoKs-rU\">很推荐进阶后的小伙伴读这本书。因为书本旧，08年的，所以现在绝版了，基本只能看到电子版。但我当时看得很过瘾，于是一高兴，就花了近5倍价格，买了本正版二手书收藏，算是用实际行动做了推荐。</p>\n<hr>\n<h3>2. 数据分析</h3>\n<p data-pid=\"QIU6aLkt\">学习Python，大部分人都是看中了其强大的数据分析能力，很多公司的业务也都有这方面的需求。</p>\n<p data-pid=\"xjwGZBBD\">数据分析，核心包括获取数据、数据预处理、数据分析建模和数据结论输出4个步骤。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-a53a7e12c3b3ee8238d47c2b977964f1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1100\" data-rawheight=\"530\" class=\"origin_image zh-lightbox-thumb\" width=\"1100\" data-original=\"https://pic2.zhimg.com/v2-a53a7e12c3b3ee8238d47c2b977964f1_r.jpg\"></figure><ol>\n<li data-pid=\"F358NdVt\">\n<b>获取数据</b>：数据化运营分析所需的数据需要经过特定授权从数据库或文件中得到。</li>\n<li data-pid=\"3ENO1f0M\">\n<b>数据预处理</b>：在该过程中对数据进行质量检验、样本均衡、分类汇总、合并数据集、删除重复项、分区、排序、离散化、标准化、过滤变量、转置、查找转换、脱敏、转换、抽样、异常值和缺失值处理等。</li>\n<li data-pid=\"KIp7WF6t\">\n<b>数据分析建模</b>：运用多种数据分析和挖掘方法，对数据进行分析建模。方法包括统计分析、OLAP分析、回归、聚类、分类、关联、异常检测、时间序列、协同过滤、主题模型、路径分析、漏斗分析等。</li>\n<li data-pid=\"W7kj7KSm\">\n<b>数据结论输出</b>：数据结论的输出有多种方式，常见的方式是数据分析报告，另外还包括Excel统计结果、数据API输出、数据结果返回数据库</li>\n</ol>\n<p data-pid=\"7MlQYdZh\">（引用自书籍《Python数据分析与数据化运营》第二版）</p>\n<p data-pid=\"7u3-4H6T\">学习路径推荐：<b>从数据分析，到机器学习，再到深度学习，并且结合业务实践，提高开发的熟练度</b></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>《利用Python进行数据分析》</h3>\n<ul>\n<li data-pid=\"8hoO7jIg\">豆瓣评分：8.6</li>\n<li data-pid=\"Xfzzmp2f\"><a href=\"https://link.zhihu.com/?target=https%3A//book.douban.com/subject/25779298/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">豆瓣链接</a></li>\n</ul>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1515873598468657152\"></a><p data-pid=\"j-QnPUTR\">数据分析入门必读</p>\n<p data-pid=\"ioKOXvm8\">这本书是Pandas的模块作者写的书，曾是AQR Capital Management的定量分析师。除了pandas之外，作者对本书覆盖的iPython，NumPy，matpotlib等也都有着很深的理解。而本书的主要章节也是对这几个工具进行详尽介绍，用较为丰富的用例阐述其功能。这几个库基本是Python数据分析过程中不可或缺的。欲善其事，必先利器，这本书值得一个必看标签。</p>\n<p data-pid=\"_xZz7233\">这本书我至今都带在身边的工具书之一。</p>\n<p data-pid=\"PXa3sO_H\">看完这本书，你就应该有能力解决业务相关的数据分析问题</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>《机器学习实战——基于Scikit-Learn与TensorFlow》</h3>\n<ul>\n<li data-pid=\"Rfk7Vzcs\">豆瓣评分：8.5</li>\n<li data-pid=\"bB_fwEai\"><a href=\"https://link.zhihu.com/?target=https%3A//book.douban.com/subject/30317874/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">豆瓣链接</a></li>\n</ul>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1515873779338805248\"></a><p data-pid=\"-fH9VmOt\">本书分为机器学习和深度学习两部分。推荐机器学习部分，涵盖机器学习的基础理论知识和基本算法——从线性回归到随机森林等，帮助读者掌握Scikit-Learn的常用方法；深度学习建议阅读《Python深度学习》。对于机器学习的原理推导则推荐看周志华的西瓜书。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>《Python深度学习》</h3>\n<ul>\n<li data-pid=\"fuYNzU4b\">豆瓣评分：9.5</li>\n<li data-pid=\"cyC7OhNu\"><a href=\"https://link.zhihu.com/?target=https%3A//book.douban.com/subject/30293801/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">豆瓣链接</a></li>\n</ul>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1515873868594458624\"></a><p data-pid=\"o7I_c3i4\">Keras之父执笔，大神不但技术了得，文笔也好，涵盖了深度学习的基础知识、Keras使用模式以及深度学习最佳实践。</p>\n<p data-pid=\"eogR6Swp\">本书立足于人工智能的可达性和大众化，书中包含30多个代码示例，步骤讲解详细透彻，读者甚至无须具备机器学习相关背景知识即可展开阅读。本书的目标：在学习完本书后，读者将具备搭建自己的深度学习环境、建立图像识别模型、生成图像和文字等能力。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>《Python金融大数据分析》</h3>\n<ul>\n<li data-pid=\"s-JESYkv\">豆瓣评分：7.7</li>\n<li data-pid=\"pWv-M1QX\"><a href=\"https://link.zhihu.com/?target=https%3A//book.douban.com/subject/26670241/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">豆瓣链接</a></li>\n</ul>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1515874275822759936\"></a><p data-pid=\"0IhK-IjP\">本书的大部头同样有对 numpy，pandas, matplotlib, scipy 的详尽介绍，不同的是，介绍过程中，均是使用金融方面的样例。内容全面，除了基础的数据分析外，还介绍了 组合优化、估值、衍生品定价 等Python金融应用 。本书干货不少，值得金融分析领域的从业者一看。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>《Python数据分析与数据化运营》第二版</h3>\n<ul>\n<li data-pid=\"IDbm0Ggu\">豆瓣评分：7.8</li>\n<li data-pid=\"QfIDP0gX\"><a href=\"https://link.zhihu.com/?target=https%3A//book.douban.com/subject/34432067/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">豆瓣链接</a></li>\n</ul>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1515874358878420992\"></a><p data-pid=\"om4u9V95\">本文作者是十余年的互联网从业者，数据以互联网运营业务为主题，展开对数据分析的基本知识、评估指标、应用场景、分析模型、小技巧、经验分享等，而且可贵的是知识点之间的衔接非常完备，不像传统工具书那样有章节间的知识断层。实用性非常强，其中的技巧、经验可以完全范化到各个领域。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>《Python科学计算》</h3>\n<ul>\n<li data-pid=\"DIgjugsH\">豆瓣评分：8.0</li>\n<li data-pid=\"OX2a7QtM\"><a href=\"https://link.zhihu.com/?target=https%3A//book.douban.com/subject/34432067/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">豆瓣链接</a></li>\n<li data-pid=\"22aoeIt9\"><a href=\"https://link.zhihu.com/?target=https%3A//item.jd.com/12629982.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">购买链接</a></li>\n</ul>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1515874643555098624\"></a><p data-pid=\"J09HDxix\">绝佳的数据分析库参考手册。相比市场上多数书籍均是介绍各个工具库的案例实践，本书则侧重于工具库的内在原理阐述，让你使用工具库时能更驾轻就熟。涉及的应用领域包括数值运算、统计分析、符号运算、图表可视化、图像处理以及界面设计等。作者功力深厚，写作严谨，每个章节都很扎实不注水，可见作者研究之深。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>其他</h3>\n<ul>\n<li data-pid=\"ho6qsdpo\">《基于Python的智能文本分析》：少有的极致工程化的NLP工具书籍</li>\n<li data-pid=\"B-_1Bu50\">《阿里云天池大赛赛题解析》：提供多个完整的数据建模案例，值得模仿与改造，标准化的流程不一定会出爆品，但良品率必然不差</li>\n<li data-pid=\"WaAxY5ID\">《Python大战机器学习》scikit-learn参考工具书，适合调参时翻阅</li>\n<li data-pid=\"UErXZmk3\">《用户画像——方法论与工程化解决方案》：大数据环境下的数据分析工作</li>\n</ul>\n<hr>\n<h3>3. 工程开发</h3>\n<p data-pid=\"nl7-Bjkg\">软件开发周期通常步骤冗长、且需多次迭代，其必然要对编程开发有对应的要求。</p>\n<p data-pid=\"riioEQEd\">以 算法工程师 为例，其主要业务是将 数据分析师 的模型结论进行工程化部署，看似写个代码就好，实则工作量十足。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-c35a3f568e666f438ef056d90ec5fea4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1357\" data-rawheight=\"520\" class=\"origin_image zh-lightbox-thumb\" width=\"1357\" data-original=\"https://pic1.zhimg.com/v2-c35a3f568e666f438ef056d90ec5fea4_r.jpg\"></figure><p data-pid=\"AyHEUsMt\">因而也十分有必要：</p>\n<ol>\n<li data-pid=\"Hv74QfqY\">提高代码质量，保证程序的健壮、拓展性，以应对持续的需求迭代</li>\n<li data-pid=\"eheIPn6r\">提高项目工程化程度，自动化、标准化流程，以提高交付质量</li>\n</ol>\n<p data-pid=\"A6sSPu2I\">学习路径推荐：<b>从类级别的面向对象，到模块级别的设计模式，再到库级别的架构体系，到系统级别的持续交付，打造工程化、体系化的开发范式</b></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>《Python面向对象编程》</h3>\n<ul>\n<li data-pid=\"TCnwgTFL\">豆瓣评分：8.9</li>\n<li data-pid=\"-ba8C5hE\"><a href=\"https://link.zhihu.com/?target=https%3A//book.douban.com/subject/26468916/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">豆瓣链接</a></li>\n</ul>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1515874896122613760\"></a><p data-pid=\"-BJyDktO\">Python 是一种面向对象的解释型语言，面向对象是其非常重要的特性，面向对象的封装特性能够提高类的易用性，减少编程过程中代码出错的风险；继承特性实现代码的复用；抽象让程序的设计和实现分离；而多态提高了程序的可扩展性。本书通过Python的数据结构、语法、设计模式，从简单到复杂，从初级到高级，一步步通过例子来展示了Python 中面向对象的概念和原则。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>《Python3标准库》</h3>\n<ul>\n<li data-pid=\"fN3cKcNq\">豆瓣评分：8.4</li>\n<li data-pid=\"50Uwh0rD\"><a href=\"https://link.zhihu.com/?target=https%3A//book.douban.com/subject/30346181/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">豆瓣链接</a></li>\n</ul>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1515874971838173184\"></a><p data-pid=\"GrheuLgy\">对于程序员而言，标准库与语言本身同样重要，它好比一个百宝箱，几乎能为各种常见任务提供完美解决方案！本书以案例驱动的方式讲解了标准库中一百多个模块的使用方法和工作原理，比标准库的官方文档更容易理解，是Python程序员熟练掌握和使用标准库的绝佳参考书籍。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>《Head First 设计模式》</h3>\n<ul>\n<li data-pid=\"HW3jH-Zx\">豆瓣评分：9.2</li>\n<li data-pid=\"g16u2CgC\"><a href=\"https://link.zhihu.com/?target=https%3A//book.douban.com/subject/2243615/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">豆瓣链接</a></li>\n</ul>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1515875045481684992\"></a><p data-pid=\"6rwJgGhZ\">有了工具，不代表能用好工具。你还需要会一点经典的设计模式来整合他们。</p>\n<p data-pid=\"hUrU6lsy\">本书相当赞的一本设计模式入门书。用实际的编程案例讲解算法设计中会遇到的各种问题和需求变更，并以此逐步推导出良好的设计模式解决办法。比传统的“四人书”好读很多。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>《架构整洁之道》</h3>\n<ul>\n<li data-pid=\"OKFx1kjz\">豆瓣评分：8.7</li>\n<li data-pid=\"X2ltfnEN\"><a href=\"https://link.zhihu.com/?target=https%3A//book.douban.com/subject/30333919/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">豆瓣链接</a></li>\n</ul>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1515875142231789568\"></a><p data-pid=\"0SKLSl0C\">本书是马丁大叔在架构领域的登峰之作，围绕“架构整洁”这一重要导向，系统地剖析其缘起、内涵及应用场景，涵盖软件研发完整过程及所有核心架构模式及原则。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>《Python进阶 —— 实际应用开发实战》</h3>\n<ul>\n<li data-pid=\"5Td724sz\">豆瓣评分：新书</li>\n<li data-pid=\"60ddkWz8\"><a href=\"https://link.zhihu.com/?target=https%3A//book.douban.com/subject/35745203/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">豆瓣链接</a></li>\n</ul>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1515875198603128832\"></a><p data-pid=\"gcdMj1U7\">很进阶的书，并且都采用了最新的技术，介绍了Python语言的在软件生命周期中的最佳实践和敏捷开发方法，涵盖测试、打包、发布、以及项目模板化，并对python语言的新特性asyncio展开详细描述。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>《Python项目开发实战》（日）</h3>\n<ul>\n<li data-pid=\"PoGanoMc\">豆瓣评分：6.7</li>\n<li data-pid=\"a_uX_Zho\"><a href=\"https://link.zhihu.com/?target=https%3A//book.douban.com/subject/26931434/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">豆瓣链接</a></li>\n</ul>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1515876180531679232\"></a><p data-pid=\"G05g7-_K\">难得的完整介绍python程序开发全生命周期的书，书本有点旧，但不妨碍其通用知识。</p>\n<p data-pid=\"bvwUl_i3\">作者从Python的环境搭建开始讲起，介绍了Web应用的开发方法、项目管理及审查、测试与高效部署、服务器调试等内容，尽可能网罗了Python项目开发流程中的方方面面，有助于开发者建立有序生产环境，提高开发效率，让编程事半功倍。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>其他</h3>\n<ul>\n<li data-pid=\"tfSDJqPX\">《Python参考手册》：同样是参考性质的数据，本书阐述了python特性与最常用的十余个标准库，如果嫌《标准库》太厚，那么可以选择看本书。</li>\n<li data-pid=\"z7CHxG5O\">《Python高性能编程》：提高性能一直是python中很热的话题。本书就如何进行代码优化和加快实际应用的运行速度进行详细讲解，包含 数据结构优化、矩阵和矢量计算、并发、集群和工作队列等主题。</li>\n<li data-pid=\"g7SnuJxS\">《pytest测试实战》：工具书，系统性地介绍了主流测试框架pytest的各项功能</li>\n</ul>\n<hr>\n<h2>六、尾声</h2>\n<p data-pid=\"g0d4920W\">至此 Python 书籍推荐也描述清楚了，但是实际要成为领域的专家，不仅仅是学门技术语言就够的。工程师要学好操作系统、计算机网络、数据库开发、服务器管理；分析师也要不断钻研各自领域的业务特性与数据风格，并且学会和需求方打好配合。</p>\n<p data-pid=\"NQb7DyE_\">学海无涯，T型人才到哪都稀缺，自学完Python，再继续拓展其他的知识边疆吧。</p>\n<p data-pid=\"tFC3ddp7\"><b>自学是艰苦的，但苦中有乐。</b></p>\n<p data-pid=\"pk0saVEY\"><b>因为自学的生活无比充实，每天都能感到今天的自己比昨天有所提升，也能期待着明天的自己又比今天更强。</b></p>\n<p data-pid=\"isW8Bp-p\"><b>变得更强，与君共勉！</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-9fe98c4a760cb098bae0b933d504422e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"200\" data-rawheight=\"220\" class=\"content_image\" width=\"200\"></figure><p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/jesseweifj?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Jesse</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/523792371?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"关于缩表2.0：美联储为什么优先退出长期国债？","date":"2022-06-03 12:21:19","description":"\n<p data-pid=\"viAFs1b7\">在上一篇缩表2.0的文章中，我提到美联储强调了要先退出长期国债。而回顾上次的缩表，美联储只提到了每月的缩表速度上限，却并没有提到会优先退出哪种类型的债券。那么本次为什么要这么做？</p>\n<p data-pid=\"tjF1Tadq\">第一个考虑可能是优先退出长期国债可以缓解收益率曲线倒挂的压力：通过定向减持长期国债，美联储可以进一步抬高长期国债的收益率，同时通过再投资压低短期国债的收益率，从而达到提升收益率曲线坡度的效果。</p>\n<p data-pid=\"Qy-jnUFg\">但我认为更重要的考虑可能是，在缩表的同时为美国财政部提供融资支持。这也是本文想要重点探讨的话题。</p>\n<h2>美国政府的债务压力爆表人尽皆知。但是怎么准确衡量美国政府的还债压力？</h2>\n<p data-pid=\"KPpwLpgE\">对于一个债券的发行主体，决定其能否偿还债务的有两点：一是其<b>短期流动性</b>是否可以支付马上要到期的利息和本金（在这里，我把未来的一年视为短期）；二是其未来现金流是否可以支撑其未来到期的<b>总债务成本</b>。</p>\n<p data-pid=\"TNUJ4zdU\">短期的还债压力可以进一步分解到三个部分：</p>\n<ol>\n<li data-pid=\"B-Y59b0v\">长期债券的利息</li>\n<li data-pid=\"3K_aMUTb\">长期债券即将到期的本金</li>\n<li data-pid=\"a90-lvkg\">短期国库券即将到期的本金</li>\n</ol>\n<p data-pid=\"o8lcIzE0\">美国长期国债的利息成本近三十年来其实没有太多变化。即使国债规模从1988年的2.5万亿上涨到了今天的30万亿美元，其利息成本只是从1988年的2000亿美元上涨到了今天的5000亿美元。其原因就是长期利率水平在这三十年里也从9%下降到了当前 1%～2%的区间。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-2e50eac3e686764a00ae805f5a8ade75_b.jpg\" data-size=\"normal\" data-rawwidth=\"3714\" data-rawheight=\"1463\" class=\"origin_image zh-lightbox-thumb\" width=\"3714\" data-original=\"https://pic2.zhimg.com/v2-2e50eac3e686764a00ae805f5a8ade75_r.jpg\"><figcaption>美债利息成本</figcaption></figure><p data-pid=\"6V_vNhZa\">而短期内到期的本金到底有多少，需要看美国国债到期日的分布。下图是从美国财政部 <a href=\"https://link.zhihu.com/?target=https%3A//www.treasurydirect.gov/govt/reports/pd/mspd/mspd.htm\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Monthly Statement of the Public Debt (MSPD)</a> 数据中整理出来的美债存量，按到期日分布。数据不包括美联储所持国债。08年以来，一年内到期的国债存量从08年的约两万亿美元，增长到了目前的6.7万亿美元。</p>\n<p data-pid=\"RTdoPreK\">进一步地将一年内到期的国债规模分解到各类债券上，我们发现，<b>国库券是短期还债压力的主要来源</b>。加上美联储未来一年内到期的一万亿美元国债与5000亿美元的利息成本，在未来的一年内，<b>美国政府需要支付超过8万亿美元的债务，其中四万亿美元来自即将到期的短期国库券。</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-750defe4f8a6c001c3517462382c4041_b.jpg\" data-size=\"normal\" data-rawwidth=\"2988\" data-rawheight=\"1261\" class=\"origin_image zh-lightbox-thumb\" width=\"2988\" data-original=\"https://pic2.zhimg.com/v2-750defe4f8a6c001c3517462382c4041_r.jpg\"><figcaption>美债存量按到期日分布图，万亿美元</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-8b88b610aaabf2feda8e604c1778e737_b.jpg\" data-size=\"normal\" data-rawwidth=\"2962\" data-rawheight=\"1261\" class=\"origin_image zh-lightbox-thumb\" width=\"2962\" data-original=\"https://pic4.zhimg.com/v2-8b88b610aaabf2feda8e604c1778e737_r.jpg\"><figcaption>一年内到期的美国国债，万亿美元</figcaption></figure><h2>那么钱从哪里来？</h2>\n<p data-pid=\"vqV5Hbt6\">两大来源：1）<b>税收收入；2）增发国债</b></p>\n<p data-pid=\"tArkYd0S\">对于税收收入，我之前曾分享过美国税收近些年的变化。一个值得注意的趋势就是在工资税与企业税近年来基本稳定的同时，个人所得税在过去的十年呈现了指数式的增长。其背后的原因就是：在宽松货币政策的大背景下，金融资产市值的增长，也带动了资本税的增长。因此，2020～2022年的三年间，美国人已经上缴了共计1.05万亿美元的个人所得税，加上2021年5000亿美元的工资税增长，使美国政府在2021年得以削减一万多亿美元的短期国债存量。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-12b9fc552127bfd26d8df3243a588863_b.jpg\" data-size=\"normal\" data-rawwidth=\"2563\" data-rawheight=\"1037\" class=\"origin_image zh-lightbox-thumb\" width=\"2563\" data-original=\"https://pic4.zhimg.com/v2-12b9fc552127bfd26d8df3243a588863_r.jpg\"><figcaption>美国三大税收收入：工资税（灰），企业税（红），个人所得税（蓝）</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-b87e8b45c4fcf5af6d3191fbf69f3177_b.jpg\" data-size=\"normal\" data-rawwidth=\"2541\" data-rawheight=\"1037\" class=\"origin_image zh-lightbox-thumb\" width=\"2541\" data-original=\"https://pic4.zhimg.com/v2-b87e8b45c4fcf5af6d3191fbf69f3177_r.jpg\"><figcaption>金融泡沫其实也是美国政府捞钱的法宝，但是税收却是真正的紧缩工具</figcaption></figure><p data-pid=\"I4kT2RaR\">不过，面对当前即将到期的八万亿美元的债务，单靠税收收入的增长显然不够：目前通胀高企，市场中叫嚣衰退的声音越来越多，居民消费与生产活动的指标已经显现疲态，而美联储当下的目的就是继续按住居民的“超额”消费，这还没算美国政府的支出呢……</p>\n<p data-pid=\"P4aZfIqk\">那么美国政府应该怎么应对？答案当然是：以债养债，debt rollover。</p>\n<p data-pid=\"7Dl6DdwT\">以债养债的关键，在于经济体是否有能力承接美国政府未来的发债活动，否则，很有可能会出现增发——利率上升——经济减速——税收收入更低——继续发债……的恶性循环。</p>\n<p data-pid=\"4sDoTNyO\">当Debt/GDP较低时，美债其实是个香饽饽，所以那个时候以债养债很轻松。<sup data-text='见 Krishnamurthy, Arvind, and Annette Vissing-Jorgensen. \"The aggregate demand for treasury debt.\" Journal of Political Economy 120, no. 2 (2012): 233-267.' data-url=\"\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"1\">[1]</sup>美国政府也必须为了金融市场活动提供一定量的优质抵押物。</p>\n<p data-pid=\"jw0baGTg\">但是当Debt/GDP达到目前这个高度时，以债养债其实是个走钢丝的技术活儿，会逼得美国政府像债券交易员一样“锱铢必较”。</p>\n<p data-pid=\"JvDfFPah\">我能想到的一个走钢丝的办法就是优化供需结构，其理论背景如下：根据金融学中的Preferred Habitat理论，债券投资者对于某一特定期限的国债有着刚性需求，比如保险公司更倾向持有超长期国债，而一级市场承销商则是短期国库券的承销主力。因此，如果美国政府想要优化发债的过程，尽量提高自己发债时卖出债券的价格（即降低发债时的利息），减少不必要的成本，就要将<b>自己的债券供给与投资者的需求对应，使得新发债的边际需求可以最大化</b>。<sup data-text=\"如何理解国债价格的影响因素，请见 https://www.zhihu.com/question/515200851/answer/2338909178\" data-url=\"\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"2\">[2]</sup></p>\n<p data-pid=\"edSctq8s\">对于以债养债的游戏，国债增发量（而不是存量）是否能匹配市场消化增发的能力，是我们要关注的重点。</p>\n<p data-pid=\"ZdjDFnN6\">先来看一下历史上美债的增发情况。</p>\n<p data-pid=\"oxgF_2ke\">下图给出的就是2008年以来的美债<b><i>净</i></b>发行量，即发行量减去到期本金，衡量的是存量的变化，也是市场需要额外消化的部分。</p>\n<p data-pid=\"fTglTUP3\">需要说明的是，我们在这里只关心发行债券时总本金有多少，也就是需要投资者掏出多少现金来接盘，和上一节提到的存量到期日分布不是同一个概念。换句话说，基于美国政府还不会违约，他需要还多少钱那是他的事儿，但是我们现在关心的是投资者这边需要拿出多少钱来接盘。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-97207f17b5a5ad6dd77d904a85294375_b.jpg\" data-size=\"normal\" data-rawwidth=\"3749\" data-rawheight=\"1515\" class=\"origin_image zh-lightbox-thumb\" width=\"3749\" data-original=\"https://pic2.zhimg.com/v2-97207f17b5a5ad6dd77d904a85294375_r.jpg\"><figcaption>美债净发行量，红色为长期国债，蓝色为短期国债，单位：十亿美元</figcaption></figure><p data-pid=\"0AAs-idA\">从2009年开始，长期美债的净发行量一直保持在每季度几百到上千亿美元元不等，截至目前已经累计增发16万亿美元；而国库券的净发行量则有正有负，波动率较小，偶尔会因为支出需要而大幅增发，但是也会通过减少发行而降低存量。这使得疫情前的国库券存量较2009年来说没有太大变化。但在疫情后，2.5万亿美元的净增发使得这一平衡被彻底打破。</p>\n<p data-pid=\"cGHApvpF\">另外我们也可以观察到，长期债券的净发行量在2021年中期开始就见顶，并呈下降趋势。再结合最近有消息称美国财政部削减了未来的债券发行规模，一个结论就是：<b>在短期内，市场消化美债的压力主要集中在国库券上。</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-97395df3cb73eeb0b320d69e9c079708_b.jpg\" data-size=\"normal\" data-rawwidth=\"3688\" data-rawheight=\"1392\" class=\"origin_image zh-lightbox-thumb\" width=\"3688\" data-original=\"https://pic1.zhimg.com/v2-97395df3cb73eeb0b320d69e9c079708_r.jpg\"><figcaption>美债自2009年以来的累计净发行量</figcaption></figure><p data-pid=\"u7V3Bdh6\">那么投资者的接盘能力怎么衡量呢？刚才说到，投资者对于某一类或某一个期限的债券情有独钟，所以我们不但要知道投资者有多少可用资金，更要知道他们想要投到那一类国债上。</p>\n<p data-pid=\"OXpjZklk\">利用我在之前的<a href=\"https://zhuanlan.zhihu.com/p/516037009\" class=\"internal\">文章</a>里提供的美债发行数据，我们可以计算美债的月均发行量，以及这些新发债都由哪些玩家购买。所以这个数据可以同时告诉我们：投资者的偏好，以及他们历史上接盘的能力。</p>\n<p data-pid=\"Zk06Ffca\">使用这波数据，我准备了两种图。一种是按照不同投资者分类的月度总量，另一种是按照不同投资者分类的市场份额。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-042f7b2287322b5a02852870352dd4f7_b.jpg\" data-size=\"normal\" data-rawwidth=\"3276\" data-rawheight=\"1638\" class=\"origin_image zh-lightbox-thumb\" width=\"3276\" data-original=\"https://pic4.zhimg.com/v2-042f7b2287322b5a02852870352dd4f7_r.jpg\"><figcaption>美债发行量，月度平均值，十亿美元</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-dc4c871125622976d363a54c13889da2_b.jpg\" data-size=\"normal\" data-rawwidth=\"3249\" data-rawheight=\"1638\" class=\"origin_image zh-lightbox-thumb\" width=\"3249\" data-original=\"https://pic3.zhimg.com/v2-dc4c871125622976d363a54c13889da2_r.jpg\"><figcaption>美债发行时投资者的购买份额</figcaption></figure><p data-pid=\"NyVvQTur\">图中给出了如下信息。单纯看发行量的话，其实短期国库券比长期债券的月均发行量要高很多，目前为每月8000亿美元左右。其中，券商（主要是大型银行的券商部门）与基金（主要是货币市场基金）是主力的申购者，占据了超过80%的份额。<b>而值得注意的是，美联储自从2020年以来也加入到了申购国库券的行列里，目前的市场份额大概在10%左右，约为每月800亿美元。</b></p>\n<p data-pid=\"3ei8TGYV\">而对于长期国债，虽然历史上月均发行量只有2000亿美元左右，但因为期限长，到期的本金相对不多，长期国债的存量其实一直在增长。从市场份额来看，基金与券商仍然是主力，但是美联储与国外投资者的存在感明显上升，约占30-40%的份额。</p>\n<p data-pid=\"iMPwiBLC\">所以投资者的需求函数可以总结为：</p>\n<ul>\n<li data-pid=\"Nfhf9y0x\">短期债券接盘主力：#1券商 #2货币市场基金 #3美联储</li>\n<li data-pid=\"DBcFjwfx\">长期债券接盘：#1基金 #2券商/美联储/国外投资者</li>\n</ul>\n<p data-pid=\"GYNcvQKW\">以上的总结是基于当前的数据，但是回顾过去十年的情况，我们可以看到一个趋势是，<b>基金与美联储正在逐步增加他们在国债市场中的份额，而券商则在不断降低自己的份额。</b></p>\n<p data-pid=\"ZYzeTIQh\">券商淡出国库券市场有结构性的原因，后面的讨论会讲。但是现在美联储说要缩表，要减持国债，降低市场份额，其实就是在恶化国库券市场的消化能力。<b>因此我认为，在缩表的过程中保留对于更加承压的国库券市场的支持，是美联储当前的走钢丝策略。</b></p>\n<hr>\n<p data-pid=\"pIZllIlc\">最后，我再做一些开放的讨论，是对我以上结论的一个补充说明。这里就比较随意地写了，想到什么说什么。</p>\n<p data-pid=\"wuVOy7KH\">我在之前的<span class=\"nolink\">回答</span>中曾提到过，银行减持国债是由于巴塞尔III里面的 SLR（supplementary leverage ratio）规定将量化宽松所带来的超额准备金也纳入了整体杠杆率的计算里，挤压了银行对于国债的需求。而这一情况在短期内也不会得到改善。根据目前的美联储缩表进度条，未来一年内减少的流动性大概也就一万亿美元左右，能把逆回购的那两万亿吃掉就不错了。给定当前银行准备金的存量，一年内可以释放的银行资产负债表空间还是很有限的。并且，银行准备金与逆回购哪个会降低得更多，也有很多不确定性，是个以后可以好好讨论的话题。</p>\n<p data-pid=\"2_amt6uo\">那基金可以撑起半边天吗？对于货币市场基金来说，美联储逆回购与短期国债其实是完美替代物，所以如果国债收益率高于逆回购利率，货币市场基金会把逆回购中的资金转向国债，逐渐把国债收益率拉低到逆回购利率上……以此类推，直到逆回购里的资金被抽干，或者短期国债的供给盘完全被吃掉。所以基金托盘的可能性是存在的。</p>\n<p data-pid=\"kOLzdHu7\">但是这个推演的一个未考虑的变量就是基金的规模到底会怎么变化，即他们是否会遭遇过多赎回，使得规模萎缩，导致接盘能力不足。货币市场基金的规模有几种可能的驱动因：</p>\n<p data-pid=\"l4zjVqRw\">1）税收转移加剧，导致广义货币供给收缩，同时影响银行券商与货币市场基金的规模。我在之前的<a href=\"https://www.zhihu.com/question/526471122/answer/2431562080\" class=\"internal\">回答</a>里说过，因为大规模的财政刺激，美联储本轮QE实质上就是配合了财政部将发债得来的钱全部变为广义货币。而美联储的缩表是没办法处理这些广义货币的增量的，只能靠税收手段。当税收增加，基金的接盘能力萎缩，但同时财政部的发行量也可以相应降低，所以财政转移在这个情景下不是一个大的风险因子。但是税收冲击对于经济活动和资产价格却是巨大的风险因素。</p>\n<p data-pid=\"2oXwPnDZ\">2）通胀挤压可支配收入，导致广义货币总量萎缩，同时货币市场基金向银行转移。这里不多展开。</p>\n<p data-pid=\"SxK5mFSN\">3）短期利率上行时，因为银行可以压低存款利率，现金会从存款流向货币市场基金。</p>\n<p data-pid=\"L4Ib0d5t\">而#2和#3谁的效果更强，值得琢磨。</p>\n<p data-pid=\"pfXEJTQK\">下次再接着聊吧，会围绕着缩表的具体路径展开，有问题、批评意见、想法讨论皆可留言。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://zhuanlan.zhihu.com/p/520560900?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\">知乎用户（登录查看详情）</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/520560900?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"如何评价国产动画《新围棋少年》 3- 4 集？","date":"2022-06-03 10:42:15","description":"\n<p></p>\n<p data-pid=\"WApK9NMJ\">《新围棋少年第一季》第3、4集分析</p>\n<p data-pid=\"3hfBRAFF\">编剧：孙晓松 </p>\n<p data-pid=\"3JXZWio2\">第3集：</p>\n<p data-pid=\"ArSzirCX\">本集有3大看点，第一个看点，方百花大战西北狼；第二个看点，小明皇怒斥幽王；这二场戏都能让人血脉偾张。第三个看点，展现了全剧的最终目的。</p>\n<p data-pid=\"pOWBYbXJ\">1、幽王在小明皇的招待宴会上带来了西北棋手号称“西北狼”的张冲，让他跟小明皇手下的棋手下棋娱乐。而没有做过准备的小明皇显然是猝不及防幽王的这个安排，而西北狼在大殿上叫嚣“谁能与我对弈一局”既表现了他狂妄无礼，同时也代表了幽王向小明皇发出了下一局“天下大棋”的挑战。而众大臣在幽王的淫威下既无实力应战也对幽王内心恐惧。，所以无人应战。这时候让方百花的出场，可以起到关键时刻救驾、解围的高光作用。</p>\n<p data-pid=\"QM5A1YRn\">方百花跟西北狼大战一局，会让观众对方百花绵里藏针、不卑不亢、雍容大气有留下非常深刻的印象。而花面狼的棋盘上的惨败也隐喻了幽王未来的最终结果，狂妄的人，总会以惨败收场。</p>\n<p data-pid=\"u2f4UB5u\">2、幽王用宝剑对准福王，展现出他咄咄逼人，目中无人、狂妄之极的性格，而此刻小明皇拍案而起，并用自己弱小的身躯一步步迎着幽王的宝剑，用毫无畏惧的目光和铿锵有力的台词，使得幽王不得不放下手中的宝剑。我想小明皇的形象此刻已经深深印在了观众的脑海里了，小明皇用三集，让自己这个人物已经栩栩如生的站立起来，他将赢得更多喜欢他的粉丝了。</p>\n<p data-pid=\"QZ3iFLk2\">3、幽王通过《幽王历法》向小明皇提出“天狗吞日”这天，各找围棋棋手在天下人面前对弈，也让我们故事主线有了发展的清晰脉络。</p>\n<p data-pid=\"C8Vx5s9B\">第4集</p>\n<p data-pid=\"hl2hWuLM\">本集的看点：1、乞巧节看花灯；2、小明皇和幽王的想法；3、江流儿将要遇到神秘高手。</p>\n<p data-pid=\"ltmM4dwo\">1、乞巧节看花灯，演绎了棋鬼王和小芸，这对吵吵闹闹的人物之间的关系，也把方百花在乞巧节放灯思念江流儿用唯美的画面来加以展现。温馨、唯美，这这个桥段的要求。</p>\n<p data-pid=\"nYTOi8Mq\">2、小明皇和幽王在宴会后，各自说出了“天狗吞日”围棋对弈的真实想法，而小明皇将这场对弈更是对应为“文比围棋，武比刀枪”，而这个定义将会是全剧的重要贯穿点，带动全剧的发展。</p>\n<p data-pid=\"gBVl4YFK\">3、而一直用“六合棋”定式跟张青测试的江流儿，却面临连输十局的困境。但这集里，也通过三个和尚把江流儿输棋给张青的原因说清楚了。我想对江流儿输棋给张青一直困惑的观众，也应该通过三个小和尚的解释明白其中的原因了吧？江流儿和小和尚在彩珍面馆的遇到了一个酒鬼，他羞辱江流儿的恩师林新诚并瞧不起林新诚的《天地大同》定式。这个神秘人物是谁呢？剧情也将步入到正规。</p>\n<p data-pid=\"mzC1XlaR\">第3集台词选：</p>\n<p data-pid=\"LUyN1u69\">1、</p>\n<p data-pid=\"PB5lpU8M\">张冲：棋待诏，棋盘上我西北狼可不会怜香惜玉，输棋后你可别怪我落子无情啊。</p>\n<p data-pid=\"0XzBlQrF\">方百花：你是来下棋还是来斗嘴的？</p>\n<p data-pid=\"Zdu3zRL-\">2、</p>\n<p data-pid=\"ooG4xrjP\">方百花：记住，围棋是和谐之棋，一味的杀戮只会让棋手陷入到局部的死活中，要在下棋中多多考虑的是大局，明白了吗？</p>\n<p data-pid=\"cKqr_xHn\">3、</p>\n<p data-pid=\"Uj9saDIj\">幽王：（轻描淡写地）恐怕这个棋手把这小小的棋局上的输赢当做了争夺天下的胜负，既然胜者为王，那败者……哼，死不足惜。</p>\n<p data-pid=\"3xm6dtDO\">小明皇：私改历法，死罪一；带刀上殿，死罪二；在皇上面前胆敢杀人，死罪三……，当堂弑君，死罪四！</p>\n<p data-pid=\"tTGg81vl\">第4集台词选：</p>\n<p data-pid=\"UiG2-yXD\">1、</p>\n<p data-pid=\"M0v4HfN_\">小明皇：幽王提出“比围棋”，这只是文的，所谓“文比围棋”。你们可知后一句是什么吗？ 后一句是“武比刀枪”！</p>\n<p data-pid=\"YsjMSO8n\">2、</p>\n<p data-pid=\"0bq41k6b\">小明皇：朕人虽小，眼睛却看得比各位清楚的很。</p>\n<p data-pid=\"VGeDbu-j\">3、</p>\n<p data-pid=\"C-b136Aa\">小明皇：围棋不能赢天下，真正决定胜负的是军事实力，幽王雄兵十万，兵强马壮，关内军队根本不是对手。“天狗吞日”这天，如果原先大明历法不准，幽王将以修改历法为名，名正言顺地篡位，若原先的历法准确，恐怕他不也不会跟朕谈什么“文比围棋”了吧？</p>\n<p data-pid=\"iaH6y2QO\">4、</p>\n<p data-pid=\"Fox8Ven4\">小明皇：“天狗吞日”比试围棋，朕要赢。如果幽王要比试刀枪，朕更要赢！</p>\n<p data-pid=\"pupgRREg\">                                                          20220603</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/yao-dao-wang-90?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">妖刀王</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/535902362/answer/2513419319?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">12 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/536024458?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价国产动画《新围棋少年》 5- 6 集？</a><br><a href=\"http://www.zhihu.com/question/536230598?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价国产动画《新围棋少年》第9-10集？</a><br>\n","link":"http://www.zhihu.com/question/535902362/answer/2513419319?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"近年来，游戏行业的分工与工作流正在经历哪些变化与趋势？","date":"2022-06-03 03:42:44","description":"\n<p data-pid=\"WtgNf0Mc\">动作捕捉有将近一百年的历史发展和沉淀，21世纪初，在国内才逐渐发展开来。我大概从2012年接触动作捕捉，将近十年的从业经验里，亲眼经历了动作捕捉在中国的萌芽发展和高潮期。在这10年里，动作捕捉技术带给制作团队的优势呈指数式的增长。</p>\n<p data-pid=\"6r9ueZJ8\">其实动作捕捉最早是应用在影视领域里的，2000年前后，我们会在好多好莱坞大片里看到动作捕捉的影子，像我们熟悉的《星战前传1》、《指环王》、《猩球崛起》、《侏罗纪公园》，那个时候动作捕捉还被列为是影视特效的范围内，由于成本高，制作过程复杂，所以那时还是小众技术。直到2009年，《Avatar》在全球的公映，动作捕捉技术才逐渐出现在大众的视野里。</p>\n<p data-pid=\"2ytR7fHg\">2010年之后，国内一批有前沿眼光的高校，陆续购买了一些动捕设备，校方先期培养了一部分动捕人才，又得益于校企合作，动捕技术才逐渐在国内发芽。但有意思的是，动捕技术还是先从影视领域开的花，我就是其中之一。 </p>\n<p data-pid=\"qqKNjDb1\">2013年，我们的一部动画电影名叫《C9回家》，由于人力的限制，我们尝试运用动作捕捉技术来完成动画制作。记得是1099个捕捉镜头，花了大半个月时间集中捕捉完成，接下来的三四个月的时间，都是对动作捕捉数据的清洗。那个时候国内的游戏还处在再生期阶段，很多前沿技术是落后于影视行业的。</p>\n<p data-pid=\"v9lfMLQO\">后来，随着人们对游戏画面的审美要求的提高，传统的游戏制作技术已经满足不了大众要求了。为了创新，同时也是为了提升游戏品质，大家就想办法在影视领域借鉴制作经验和技术的时候，动作捕捉技术才被发掘出来了。</p>\n<p data-pid=\"3UVZrGkU\">动作捕捉技术给游戏行业带来最大的好处就是：<b>极大地提升了游戏动画的品质与效率</b>。</p>\n<p data-pid=\"okIs4lDo\">那么，具体提升多少？这里我之前有过一个测试，供大家参考：假设一个资深动画师，手K动画，一天能手K10秒的话，我们设定1000秒的动画量，来加以比较。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-d79924877dd330973f3ae14df5492de6_720w.png?source=b1748391?rss\" data-caption=\"mocap  VS   手k动画\" data-size=\"normal\" data-rawwidth=\"556\" data-rawheight=\"188\" data-watermark=\"watermark\" data-original-src=\"v2-d79924877dd330973f3ae14df5492de6\" data-watermark-src=\"v2-90037bdfe31665aa0c55c7cea588518f\" data-private-watermark-src=\"v2-aa0fd93cab95ee8e10414716eda209ef\"></p>\n<p><br></p>\n<p data-pid=\"cZAB9CR7\">优势很明显，纯手K与动作捕捉系统的效率成百倍的提升。而且，动作越复杂，这个效率提升体现的越明显。</p>\n<p data-pid=\"NfkolCrb\">有关动作捕捉未来的发展趋势，我更倾向于视频捕捉。就目前市面上商业化的动捕设备来讲，我个人感觉无论从精度还是效率上，已经到了天花板了。但目前市面上的动作捕捉设备跟表情捕捉是分开来的，而且表情捕捉相对来讲还有很多上升的空间，如果视频捕捉能够把肢体和表情细节一起捕捉下来，对于整个动作捕捉行业来说，带来的肯定是一场很大的革命</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/balixiaoyu?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">巴黎小雨</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/534521002/answer/2502167415?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/529309733?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">平台化与数字化转型的区别？</a><br><a href=\"http://www.zhihu.com/question/534528539?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">推动游戏制作工业化需要哪些技术积累？</a><br>\n","link":"http://www.zhihu.com/question/534521002/answer/2502167415?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"使用 Next.js + Hexo 重构我的博客","date":"2022-03-17 16:24:00","description":"\n<p>在咕咕了一整年、只发布了三篇文章（其中两篇还是译文）之后，我决定还是稍微花一点时间好好折腾一下自己的博客，以 React 作为抓手，通过 Next.js 和 Hexo 深度共建，对标 Gatsby，打通静态 HTML 与用户交互之间的垂直领域屏障，实现多维矩阵闭环，为个人博客赋能（咳咳咳），然后水出 2022 年第一篇文章（逃）技术选型：Gatsby vs Next.js我使用 Hexo 驱动博客已经三年之久了，之前写过一个 开源的 Hexo 主题，后来还成为了 Hexo 的 Core Team Member、为 Hexo 贡献了不少代码。Hexo 是一个诞生于 2012 年的、由 Node.j......</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/218492/18/14257/25439/6227858fE1517791d/63119f6e39dc9389.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/\">https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Node.js","date":"2022-01-14 10:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h2>\n<ul>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-nodejs\">安装 Node.js</a></li>\n</ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Node.js 官网 (<a href=\"https://node.js.org/\">https://node.js.org</a>)</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/image-20220114174925675.png\" alt=\"image-20220114174925675\"></p>\n<p>下载 Node.js 安装包（推荐下载 LTS 版本）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175645.png\" alt=\"image-20220114175645642\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175750.png\" alt=\"image-20220114175749822\"></p>\n<p>勾选同意协议，点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175835.png\" alt=\"image-20220114175835742\"></p>\n<p>修改文件安装位置，点击 <code>Next</code>。（也可以不用改）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175929.png\" alt=\"image-20220114175929226\"></p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180010.png\" alt=\"image-20220114180010036\"></p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180044.png\" alt=\"image-20220114180043895\"></p>\n<p>点击 <code>Install</code> 开始安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180108.png\" alt=\"image-20220114180107827\"></p>\n<p>等待安装完成。<img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180122.png\" alt=\"image-20220114180122728\"></p>\n<p>点击 <code>Finish</code> 完成安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180206.png\" alt=\"image-20220114180206024\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>打开 <code>Git Bash</code>.</p>\n<blockquote><p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。<br>或是在开始菜单中找到 Git Bash.</p></blockquote>\n<p>输入 <code>node -v</code> 和 <code>npm -v</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180458.png\" alt=\"image-20220114180458685\"></p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-nodejs/"},{"title":"2022: 新年快乐！","date":"2021-12-31 16:00:00","description":"\n<p>转眼间，2021 年已经过去。这一年非常忙碌，以至于博客一周年的纪念来不及写，许多文章计划停留在了 To Do 里。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%8D%9A%E5%AE%A2\" class=\"headerlink\" title=\"博客\"></a>博客</h2>\n<p>由于 Cloudflare Web Analytics 是在 2021 年 4 月份启用的，再加上后来又将统计代码去除，所以关于访问量的信息不可用。</p>\n<p>截止至 2021 年 12 月 31 日，博客共发布 15 篇文章，其中 2021 年发布 11 篇文章，原创文章 10 篇。</p>\n<p>目前采用 <code>LeanCloud + Waline</code> 的评论方式，自 7 月份被刷评论后将评论权限改为登录（支持 <code>GitHub</code> 登录），还有部分评论在迁移中丢失，实在抱歉。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>博客自 2021 年 1 月 13 日将主题改为 <code>Miracle</code>，这是一款简洁、轻量的单栏 Hexo 主题。</p>\n<p><code>Miralce</code> 目前的版本是 <code>2.0.1</code>，全新的版本去除 jQuery，进一步提升性能。</p>\n<p>GitHub 仓库：<a href=\"https://github.com/hifun-team/hexo-theme-miracle\">https://github.com/hifun-team/hexo-theme-miracle</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%9B%B4%E5%A4%9A\" class=\"headerlink\" title=\"更多\"></a>更多</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">=&gt; ...</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2022/"},{"title":"无垠 2021 年度总结","date":"2021-12-31 08:36:10","description":"\n<p>真是忙碌的一年啊。转眼 2021 已经过去，2022 即将到来。又到了该总结这一年的时候了。</p>\n<h1>统计数据</h1>\n<p>年度总结的第一部分仍然是一些统计数据。以下数据截止 2021 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 29,073 (<span>+0.6%</span>)，年 PV 67,688 (<span>-11.61%</span>)，日均 UV 79.65，平均停留时间 3分34秒 (<span>-13.7%</span>)，平均跳出率 55% (<span>-9.8%</span>)。一年有效文章数 1 (<span>-80%</span>)，新增评论 109 条 (<span>-54.96%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\" alt=\"\" width=\"515\" height=\"620\" class=\"aligncenter size-full wp-image-2537\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog-249x300.jpg 249w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>除了 UV 较去年提高 100 多之外，其他数据全部下滑。主要原因还是因为今年实在太过忙碌，只更新了一篇博客，评论区也没有怎么维护。不过目前已经有两篇新的文章在路上了，希望可以尽快写完吧。</p>\n<h2>个人主页</h2>\n<p>个人页总 UV 3,515 (<span>-18.12%</span>)，总 PV 3,929 (<span>-4.56%</span>)，日均 UV 9.63，平均停留时间 55秒 (<span>-12.7%</span>)。访问的主要来源是知乎和 GitHub。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\" alt=\"\" width=\"515\" height=\"647\" class=\"aligncenter size-full wp-image-2538\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton-239x300.jpg 239w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>仍然是没有更新个人主页的一年，我也没有继续宣传这个页面，统计数据下滑大概是正常的。</p>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 4 次，新增 149 commits (<span>-54.57%</span>)，Star 数增加了 174，现有 788。</p>\n<p>终于，MDx 2.0 发布了。但是因为今年的过于忙碌，MDx 并没有得到足够的维护，版本发布周期也拉得比较长，很多 Bug 没能及时修复。希望明年可以把更多的时间花在维护 MDx 上。无论如何，还是感谢各位对于 MDx 的支持！</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>2021 大事记</h1>\n<p>说起来，2021 真的太多“第一次”了...</p>\n<ul>\n<li>一月：由于电脑电池鼓包，第一次用 iPad 外接屏幕远程桌面到服务器来考期末🌚太痛苦了</li>\n<li>一月：MDx 喜提 600 Stars</li>\n<li>三月：第一次测核酸（真的酸）</li>\n<li>三月：第一次坐上 A350！(B-309W）</li>\n<li>三月：第一次来到英国</li>\n<li>六月：第一次来到伦敦</li>\n<li>六月：第一次去猫咖撸猫🐱</li>\n<li>六月：第一次坐上 B777！(B-2025）</li>\n<li>七月：酒店隔离十四天🌚</li>\n<li>七月：MDx 喜提 700 Stars</li>\n<li>七月：第一次和猫一起住（时刻有猫撸真的爽😆）</li>\n<li>七月：入职<a href=\"https://75.team/\">奇舞团</a>实习</li>\n<li>八月：北京景点怎么这么多</li>\n<li>九月：北京景点怎么还有这么多</li>\n<li>九月：<a href=\"https://flyhigher.top/develop/2160.html\">谈谈 WebAuthn</a> 被 <a href=\"https://weibo.com/1893751011/KyipM3tOM\" rel=\"noopener noreferrer\">w3c中国微博转发</a><del>（虽然并没有人看）</del>\n</li>\n<li>九月：从奇舞团<del>跑路</del>\n</li>\n<li>九月：整了个 Stackoverflow 的复制粘贴键盘<del>，太好用了</del>\n</li>\n<li>十月：终于买了心心念念的 MSFS</li>\n<li>十一月：终于买了一台新相机</li>\n<li>十一月：第一次坐上 A380！(B-6140）</li>\n<li>十二月：第一次来到爱丁堡并和 <a href=\"https://diygod.me/\">@DIYgod</a> 面基</li>\n</ul>\n<section><div class=\"set-images-div\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\" alt=\"和猫一起住的唯一问题就是手机很快会被猫片塞满\" width=\"730\" height=\"1500\" class=\"aligncenter size-full wp-image-2518\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg 730w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-146x300.jpg 146w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-498x1024.jpg 498w\" sizes=\"(max-width: 730px) 100vw, 730px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\" alt=\"看到你在写前端，猫猫很担心你\" width=\"1004\" height=\"1500\" class=\"aligncenter size-full wp-image-2523\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg 1004w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-201x300.jpg 201w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-685x1024.jpg 685w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-768x1147.jpg 768w\" sizes=\"(max-width: 1004px) 100vw, 1004px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\" alt=\"高效开发工具（确信\" width=\"1500\" height=\"1019\" class=\"aligncenter size-full wp-image-2519\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-300x204.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-1024x696.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-768x522.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\" alt=\"和 Ralph 在天坛\" width=\"947\" height=\"1500\" class=\"aligncenter size-full wp-image-2524\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg 947w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-189x300.jpg 189w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-646x1024.jpg 646w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-768x1216.jpg 768w\" sizes=\"(max-width: 947px) 100vw, 947px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\" alt=\"380!\" width=\"1500\" height=\"874\" class=\"aligncenter size-full wp-image-2517\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-300x175.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-1024x597.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-768x447.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a>\n</div>\n<div class=\"set-images-div2\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\" alt=\"到处玩.jpg\" width=\"1500\" height=\"1080\" class=\"aligncenter size-full wp-image-2521\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-300x216.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-1024x737.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-768x553.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\" alt=\"还是到处玩.jpg\" width=\"977\" height=\"1500\" class=\"aligncenter size-full wp-image-2520\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg 977w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-195x300.jpg 195w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-667x1024.jpg 667w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-768x1179.jpg 768w\" sizes=\"(max-width: 977px) 100vw, 977px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\" alt=\"380 上的星空\" width=\"1002\" height=\"1500\" class=\"aligncenter size-full wp-image-2522\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg 1002w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-200x300.jpg 200w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-684x1024.jpg 684w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-768x1150.jpg 768w\" sizes=\"(max-width: 1002px) 100vw, 1002px\"></a>\n</div>\n</section><p><span>点击图片查看描述</span></p>\n<p>对了，对于可爱的猫猫们，我整了一个 Telegram 贴纸包，你可以在这里获取：<a href=\"https://telegram.me/addstickers/huanAndDan\">https://telegram.me/addstickers/huanAndDan</a>。</p>\n<h1>跨年红包</h1>\n<p>今年的解题之旅，从下面这张图片开始：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\" alt=\"\" width=\"1510\" height=\"1250\" class=\"aligncenter size-full wp-image-2556\"></a>\n<p>不过，鉴于今年的题目较以往对于认真解题的人更难，我还准备了隐藏红包，在解题中收集线索即可发现隐藏红包。共有 20 个普通红包和 10 个隐藏红包。</p>\n<p>解题计划持续到东八区 2022.02.03 23:59:59 或红包被领完为止，之后我会发布题解。不过由于去年情况混乱，今年在解题过程中我一旦发现有不正常的现象就会立即停止活动。Anyway，新年快乐！祝玩得开心。</p>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报用到了 PS 和 Adobe 家的新玩具 Dimension。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\" alt=\"\" width=\"707\" height=\"1000\" class=\"aligncenter size-full wp-image-2547\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg 1414w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-212x300.jpg 212w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-724x1024.jpg 724w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-768x1086.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-1086x1536.jpg 1086w\" sizes=\"(max-width: 707px) 100vw, 707px\"></a>\n<p>那么祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2507.html"},{"title":"[译] 不，Web3 不是去中心化","date":"2021-12-14 14:01:00","description":"加密货币社区对元宇宙和 Web3 的狂热仍在继续，大量投资人和开发者前仆后继加入其中。但是，Web3 真的能实现支持者们的种种愿景吗？亦或是另一个镜中月、水中花？也许让历史照进现实，能给我们答案。<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/123139/11/24965/54827/62215eedE5e3da14a/80c24408e97057dd.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/web3-is-not-decentralization/\">https://blog.skk.moe/post/web3-is-not-decentralization/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/web3-is-not-decentralization/"},{"title":"[译] 捍卫自由的互联网，对 Web3 说不","date":"2021-12-12 13:40:00","description":"作为一个充满泡沫和噱头的新概念，Web3 和元宇宙在区块链的社区中掀起了一波浪潮。鼓吹者坚信 Web3 就是互联网的未来、不惜砸下大把的金钱和精力、希望能在未来中捞一杯羹；而大部分人保持观望的态度。是时候来一点 Web3 的反对意见了。<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/87908/13/23797/13415/622032afE3a2f9e9f/95c01e98cd4a707a.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/\">https://blog.skk.moe/post/keep-web-free-say-no-to-web3/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/"},{"title":"2021 年 JavaScript Promise 性能对比","date":"2021-12-07 08:19:00","description":"\n<p>我们正生活在一个「Any application that can be written in JavaScript, will eventually be written in JavaScript」的时代。作为一门兼具动态性和简单性的语言，JavaScript 已经占领了客户端、服务端，甚至在机器学习中也占据一席之地；不可避免的，异步执行也逐渐成为这门语言不可缺少的一部分。TL; DR Bluebird 依然是速度最快、内存占用最少的 Promise 实现 Runtime 的 async / await 实现越来越快、顺序执行的性能已经超过 Native Promise，占用的内存也更少 对于平行并发执行的 Promise，Bluebird 的性能依然一骑绝尘。......</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157404/28/28495/143414/622032b2Ef7b495fd/6a9bd02e79392c9d.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/promise-performance-benchmark/\">https://blog.skk.moe/post/promise-performance-benchmark/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/promise-performance-benchmark/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Git","date":"2021-11-12 13:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h3>\n<ul><li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li></ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Git 官网 (<a href=\"https://git-scm.com/\">https://git-scm.com</a>).</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112204849.png\"></p>\n<p>点击页面中的 <code>Download For Windows</code> 下载 Windows 版本。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211507.png\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>，同意协议。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211528.png\"></p>\n<p>修改程序安装位置，点击 <code>Next</code>（直接装在 C 盘也不是不行）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211604.png\"></p>\n<p>组件选项，可选桌面快捷键、右键菜单、LFS 支持、自动检查更新等。</p>\n<p>点击 <code>Next</code> 进入下一步。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211609.png\"></p>\n<p>开始菜单文件夹名，保持默认就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211613.png\"></p>\n<p>默认编辑器，保持 Vim 就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211616.png\"></p>\n<p>环境变量，选择第 2 个，点击 <code>Next</code>。</p>\n<blockquote><p>如果选择第 1 个，则只能在 Git Bash 中使用，可能会出现问题</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211619.png\"></p>\n<p>剩下的都可以保持默认，一路 Next，然后点击 <code>Install</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211622.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211624.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211627.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211630.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211633.png\"></p>\n<p>等待安装完毕。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。</p>\n<p>（或是在开始菜单中找到 Git Bash）</p>\n<p>输入 <code>git --version</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/7ec315b7764cc.png\"></p>\n<p>大功告成！</p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-git/"},{"title":"前端时间国际化 101","date":"2021-10-14 15:58:23","description":"\n<blockquote>\n<p>时间只是幻觉。</p>\n<footer>—— 阿尔伯特·爱因斯坦</footer>\n</blockquote>\n<p>最近在开发一个需要完善国际化方案的前端项目，在处理时间国际化的时候遇到了一些问题。于是花了一些时间研究，有了这篇文章。不过由于网上关于 JavaScript 中 <code>Date</code> 对象的坑的文章已经一抓一大把了，<strong>因此这篇文章不是 JavaScript 中 <code>Date</code> 对象的使用指南，而是只专注于前端时间国际化。</strong></p>\n<h1>从时区说起</h1>\n<p>要想处理时间，UTC 是一个绕不开的名字。协调世界时（Coordinated Universal Time）是目前通用的世界时间标准，计时基于原子钟，但并不等于 TAI（国际原子时）。TAI 不计算闰秒，但 UTC 会不定期插入闰秒，因此 UTC 与 TAI 的差异正在不断扩大。UTC 也接近于 GMT（格林威治标准时间），但不完全等同。可能很多人都发现近几年 GMT 已经越来越少出现了，这是因为 GMT 计时基于地球自转，由于地球自转的不规则性且正在逐渐变慢，目前已经基本被 UTC 所取代了。</p>\n<blockquote><p>JavaScript 的 <code>Date</code> 实现不处理闰秒。实际上，由于闰秒增加的不可预测性，Unix/POSIX 时间戳完全不考虑闰秒。在闰秒发生时，Unix 时间戳会重复一秒。这也意味着，一个时间戳对应两个时间点是有可能发生的。</p></blockquote>\n<p>由于 UTC 是标准的，我们有时会使用 UTC+/-N 的方式表达一个时区。这很容易理解，但并不准确。中国通行的 <code>Asia/Shanghai</code> 时区<strong>大部分</strong>情况下可以用 UTC+8 表示，但英国通行的 <code>Europe/London</code> 时区并不能用一个 UTC+N 的方式表示——由于夏令时制度，<code>Europe/London</code> 在夏天等于 UTC+1，在冬天等于 UTC/GMT。</p>\n<blockquote><p>一个时区与 UTC 的偏移并不一定是整小时。如 <code>Asia/Yangon</code> 当前为 UTC+6:30，而 <code>Australia/Eucla</code> 目前拥有奇妙的 UTC+8:45 的偏移。</p></blockquote>\n<p>夏令时的存在表明<strong>时间的表示不是连续的</strong>，时区之间的时差也并不是固定的，我们并不能用固定时差来处理时间，这很容易意识到。但一个不容易意识到的点是，时区还包含了其历史变更信息。中国目前不实行夏令时制度，那我们就可以放心用 UTC+8 来表示中国的时区了吗？你可能已经注意到了上一段中描述 <code>Asia/Shanghai</code> 时区时我使用了<strong>大部分</strong>一词。<code>Asia/Shanghai</code> 时区在历史上实行过夏令时，因此 <code>Asia/Shanghai</code> 在部分时间段可以使用 UTC+9 来表示。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1988-04-18 00:00:00')\n// Mon Apr 18 1988 00:00:00 GMT+0900 (中国夏令时间)</pre>\n<blockquote><p>夏令时已经够混乱了，但它实际上比你想象得更混乱——部分穆斯林国家一年有四次夏令时切换（进入斋月时夏令时会暂时取消），还有一些国家使用混沌的 15/30 分钟夏令时而非通常的一小时。</p></blockquote>\n<blockquote><p><strong>不要总是基于 <code>00:00</code> 来判断一天的开始。</strong>部分国家使用 0:00-1:00 切换夏令时，这意味着 23:59 的下一分钟有可能是 1:00。</p></blockquote>\n<p>事实上，虽然一天只有 24 个小时，但当前（2021.10）正在使用的时区有超过 300 个。<strong>每一个时区都包含了其特定的历史。</strong>虽然有些时区在现在看起来是一致的，但它们都包含了不同的历史。时区也会创造新的历史。由于政治、经济或其他原因，一些时区会调整它们与 UTC 的偏差（萨摩亚曾经从 UTC-10 切换到 UTC+14，导致该国 2011.12.30 整一天都消失了），或是启用/取消夏令时，甚至有可能导致一个时区重新划分为两个。因此，为了正确处理各个时区，我们需要一个数据库来存放时区变更信息。还好，已经有人帮我们做了这些工作。目前大多数 *nix 系统和大量开源项目都在使用 <a href=\"https://www.iana.org/time-zones\" rel=\"noopener\">IANA 维护的时区数据库</a>（IANA TZ Database），其中包含了自 Unix 时间戳 0 以来各时区的变更信息。当然这一数据库也包含了大量 Unix 时间戳 0 之前的时区变更信息，但并不能保证这些信息的准确性。IANA 时区数据库会定期更新，以反映新的时区变更和新发现的历史史实导致的时区历史变更。</p>\n<blockquote><p>Windows 不使用 IANA 时区数据库。微软为 Windows 自己维护了一套<a href=\"https://docs.microsoft.com/zh-cn/troubleshoot/windows-client/system-management-components/daylight-saving-time-help-support\" rel=\"noopener\">时区数据库</a>，这有时会导致在一个系统上合法的时间在另一系统上不合法。</p></blockquote>\n<p>既然我们不能使用 UTC 偏移来表示一个时区，那就只能为每个时区定义一个标准名称。通常地，我们使用 <code>/</code> 来命名一个时区。这里的城市一般为该时区中人口最多的城市。于是，我们可以将中国的通行时区表示为 <code>Asia/Shanghai</code>。也有一些时区有自己的别名，如太平洋标准时间 <code>PST</code> 和协调世界时 <code>UTC</code>。</p>\n<blockquote><p>时区名称使用城市而非国家，是由于国家的变动通常比城市的变动要快得多。</p></blockquote>\n<blockquote><p><strong>城市不是时区的最小单位。</strong>有很多城市同时处于多个时区，甚至澳大利亚<a href=\"https://en.wikipedia.org/wiki/Gold_Coast_Airport\" rel=\"noopener\">有一个机场</a>的跑道两端处于不同的时区。</p></blockquote>\n<h1>处理时区困难重重</h1>\n<p>几个月前的一天，<a href=\"https://milkice.me/\" rel=\"noopener\">奶冰</a>在他的 Telegram 频道里发了这样的一条消息：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\"><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\" alt=\"奶冰频道的消息\" width=\"500\" class=\"aligncenter size-medium wp-image-2490\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg 800w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-244x300.jpg 244w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-768x944.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\"></a>\n<p>你想的没错，这个问题正是由时区与 UTC 偏移的不同造成的。<code>Asia/Shanghai</code> 时区在 1940 年前后和 1986 年前后曾实行过夏令时，<strong>而夏令时的切换会导致一小时的出现和消失。</strong>具体来说，启用夏令时当天会有一个小时消失，如 2021.3.28 英国启用夏令时，1:00 直接跳到 3:00，导致 <code>2021-03-28 01:30:00</code> 在 <code>Europe/London</code> 时区中是不合法的；取消夏令时当天又会有一个小时重复，如 2021.10.31 英国取消夏令时，2:00 会重新跳回 1:00 一次，导致 <code>2021-10-31 01:30:00</code> 在 <code>Europe/London</code> 时区中对应了两个时间点。而在奶冰的例子中，<code>1988-04-10 00:46:50</code> 正好处于因夏令时启用而消失的一小时中，因此系统会认为此时间字符串不合法而拒绝解析。</p>\n<blockquote><p>你可能会注意到在历史上 1988.4.10 这一天 <code>Asia/Shanghai</code> 时区实际上是去掉了 1:00-2:00 这一小时而不是 0:00-1:00。上文问题更深层次的原因是，在 IANA TZDB 2018a 及更早版本中，IANA 因缺乏历史资料而设置了错误的夏令时规则，规则设定了夏令时交界于 0:00-1:00 从而导致上文问题发生。而随后社区<a href=\"http://mm.icann.org/pipermail/tz/2018-August/026760.html\" rel=\"noopener\">发现了更准确的史实</a>，因此 IANA 更新了数据库。上文的问题在更新了系统的时区数据库后便解决了。</p></blockquote>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\" alt=\"IANA TZDB 2018a 及之前版本的错误数据\" width=\"1750\" height=\"595\" class=\"aligncenter size-full wp-image-2491\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg 1750w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-300x102.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1024x348.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-768x261.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1536x522.jpg 1536w\" sizes=\"(max-width: 1750px) 100vw, 1750px\"></a>\n<p><span>IANA TZDB 2018a 及之前版本的错误数据</span></p>\n<p>再来考虑另一种情况。你的应用的某位巴西用户在 2018 年保存了一个未来时间 <code>2022-01-15 12:00</code>（按当时的规律那应该是个夏令时时间），不巧那时候你的应用是以格式化的时间字符串形式保存的时间。之后你发现巴西已经于 2019 年 4 月宣布彻底取消夏令时制度，那么 <code>2022-01-15 12:00</code> 这个时间对应的 Unix 时间戳发生了变化，变得不再准确，要正确处理这一字符串就需要参考这一字符串生成的时间（或生成时计算的 UTC 偏移）来做不同的处理。<strong>因此，应用从一开始就应该避免使用字符串来传输、存储时间，而是使用 Unix 时间戳。</strong>如果不得不使用字符串存储时间，请尽可能：</p>\n<ul>\n<li>使用 UTC 描述时间，你永远不会知道本地时区在未来会发生什么</li>\n<li>如果需要以当地时间描述时间，一定带上当前 UTC 偏移</li>\n</ul>\n<p>时区历史带来的问题往往意想不到而且远比想象得多。实际上时区历史数据非常详细而繁多且跨设备不一致，并没有简单而统一的处理方法。在需要严谨处理时区时可能需要在应用程序中内嵌一套各端统一的时区数据库，但这样的方案放在前端又会带来不少问题：</p>\n<ul>\n<li>体积过大。moment.js 曾经设计过<a href=\"https://github.com/moment/moment-timezone/blob/develop/data/packed/2021a.json\" rel=\"noopener\">一种简洁的 TZDB 表示</a>，但尽管已经尽可能压缩整个文件仍然达到了 180+KB。在性能优先的 Web 应用中这是不可接受的</li>\n<li>需要持续更新。时区数据一直在变动，需要在时区数据更新时尽快更新应用内的时区数据，这带来了额外的维护成本</li>\n</ul>\n<p>ES6 为我们带来了 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl\" rel=\"noopener\"><code>Intl</code> 命名空间</a>。在这里，JavaScript 运行时提供了不少时间相关的国际化能力。因此，在不使用额外数据的情况下准确处理时区是可能的，但这并不完美：</p>\n<ul>\n<li>各端不统一。浏览器提供的时区数据受浏览器版本、系统版本等可能变化，最新的时区更新可能无法快速反映到所有设备上</li>\n<li>实现复杂。<code>JavaScript</code> 中 <code>Date</code> 对象的不良设计导致实现完善的时区处理并不容易，且 <code>Intl</code> 命名空间下的对象实例化性能开销较大，需要额外优化</li>\n</ul>\n<blockquote><p><code>Intl</code> 命名空间下还有很多实用的国际化相关方法，值得我们另开一篇文章来讲讲了。</p></blockquote>\n<p>在真实开发中，这需要取舍。目前主流的 JavaScript 时间处理库都已转向浏览器内置方法，并在需要时通过 Polyfill 保证跨端一致性。在这篇文章中，我们将尝试在不使用第三方库的情况下实现基本的时间国际化处理。此外，还有一些诸如需要使用 Unix 时间戳才能正确地在各端交换时间等细节需要注意。</p>\n<h1>时区转换</h1>\n<p>JavaScript 中的 <code>Date</code> 并不是不包含时区信息——实际上，<code>Date</code> 对象表示的一定是当前时区。通过尝试：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1970-01-01T00:00:00Z')\n// Thu Jan 01 1970 08:00:00 GMT+0800 (中国标准时间)</pre>\n<p>就可以知道，JavaScript 运行时其实知道当前时区，并会在需要的时候将其他时区的时间转换为当前时区的时间。那么，如何将本地时间转换为其他时区的时间呢？从 <code>Date</code> 的角度看，这并不行，因为我们无法设置一个 <code>Date</code> 对象的时区。但我们可以“投机取巧”：将 <code>Date</code> 对象的时间加上/减去对应的时差，尽管 <code>Date</code> 对象仍然认为自己在本地时区，但这样不就可以正确显示了嘛！但我们会碰到上文提到的问题：时区之间的时间差并不固定，在没有额外数据的情况下很难正确计算。</p>\n<p>还好，ES6 基于 <code>Intl</code> 命名空间扩展了 <code>Date.prototype.toLocaleString()</code> 方法，使其可以接受时区参数并按指定时区格式化时间。如果你在搜索引擎中搜索如何使用 JavaScript 转换时区，你大概率会在 StackOverflow 上找到类似这样的答案：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const convertTimeZone = (date, timeZone) =&gt; {\n    return new Date(date.toLocaleString('en-US', { timeZone }))\n}\n\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\nconvertTimeZone(now, 'Europe/London') // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<p>很好理解，我们使用 <code>en-US</code> 的区域设置要求 JavaScript 运行时以我们指定的时区格式化时间，再将时间字符串重新解析为时间对象。这里的 <code>timeZone</code> 就是诸如 <code>Asia/Shanghai</code> 等的 IANA TZDB 时区名称。这个字符串确实需要自己提供，但这就是我们唯一需要自己准备的数据了！只要提供了时区名称，浏览器就会自动计算正确的时间，无需我们自行计算。</p>\n<blockquote><p>对于时区名称，你可以考虑使用 <a href=\"https://github.com/vvo/tzdb/\" rel=\"noopener\">@vvo/tzdb</a>。这是一个声称为自动更新的 IANA TZDB 的 JSON 导出，并已被数个大型项目使用。你可以从这个包中导出所有时区名称。</p></blockquote>\n<p>这个方法看起来还不错，对吧？但实际上，它有两个问题：</p>\n<ul>\n<li>指定了区域设置和时区的 <code>toLocaleString()</code> 实际上每次调用都会在 JavaScript 运行时中创建新的 <code>Intl.DateTimeFormat</code> 对象（在后文详述），而后者会带来昂贵的性能开销（在 Node 14 中，实例化一次会在 V8 中增加内存使用约 46.3Kb。但这是符合预期的，详见 <a href=\"https://bugs.chromium.org/p/v8/issues/detail?id=6528\" rel=\"noopener\">V8 Issue</a>）。因此，在密集调用的情况下需要考虑计算并缓存时差，并在一定时间后或需要时进行更新</li>\n<li>使用 <code>toLocaleString()</code> 并使用 <code>en-US</code> 区域设置格式化的默认时间格式类似于 <code>10/13/2021, 1:00:00 AM</code>。这可以被大部分浏览器正确解析，<strong>但这是不规范的，不同浏览器有可能产生不同结果。</strong>你也可以自行配置格式（同下文的 <code>Intl.DateTimeFormat</code>），但仍然无法构造出规范的字符串</li>\n</ul>\n<p>因此，更佳的方案是，我们需要建立一个可反复使用的格式化器以避免重复创建 <code>Intl.DateTimeFormat</code> 带来的额外开销，并需要手动构造出符合规范的时间字符串，并将其重新解析为 <code>Date</code> 对象。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const timeZoneConverter = (timeZone) =&gt; {\n    // 新建 DateTimeFormat 对象以供对同一目标时区重用\n    // 由于时区属性必须在创建 DateTimeFormat 对象时指定，我们只能为同一时区重用格式化器\n    const formatter = new Intl.DateTimeFormat('zh-CN', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n        hour12: false,\n        timeZone\n    })\n    return {\n        // 提供 conver 方法以将提供的 Date 对象转换为指定时区\n        convert (date) {\n            // zh-CN 的区域设置会返回类似 1970/01/01 00:00:00 的字符串\n            // 替换字符即可构造出类似 1970-01-01T00:00:00 的 ISO 8601 标准格式时间字符串并被正确解析\n            return new Date(formatter.format(date).replace(/\\//g, '-').replace(' ', 'T').trim())\n        }\n    }\n}\n\nconst toLondonTime = timeZoneConverter('Europe/London') // 对于同一时区，此对象可重用\n\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\ntoLondonTime.convert(now) // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<blockquote><p>目前 <code>zh-CN</code> 的区域设置会产生类似 <code>1970/01/01 00:00:00</code> 的格式化字符串。这一格式目前跨端一致，但由于规范没有指定时间格式，<strong>这个格式在未来有可能变更。</strong>更好的方案是使用 <code>formatToParts()</code> 方法（在后文详述）获取时间字符串的各部分并手动拼接出标准格式的字符串，但在这个例子中直接 <code>replace</code> 拥有更好的性能。</p></blockquote>\n<p>现在，尝试反复转换时间至同一时区 1000 次，耗时从 <code>toLocaleString()</code> 1.5 秒降低到了 0.04 秒。尽管代码长了点，但这次重写在最好的情况下为我们带来了超过 20 倍的性能提升。</p>\n<p>需要注意的是，虽然这看起来就算最终方案了，但这个方案依然不完美。主要有以下两个问题：</p>\n<ul>\n<li>在需要密集转换为不同时区时，由于无法重用格式化器，性能依然较差且难以进一步优化</li>\n<li>由于 <code>Intl.DateTimeFormat</code> 不支持格式化毫秒，在格式化字符串的过程中毫秒会丢失，导致最终结果可能会与期望结果产生最高 999ms 的误差，需要额外处理。比如需要计算时差时，我们可能需要这么写：\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const calcTimeDiff = (date, converter) =&gt; {\n    const secDate = date - date.getMilliseconds() // 去掉毫秒，避免转换前后精度差异\n    return converter.convert(new Date(secDate), tzName) - secDate\n}\n\ncalcTimeDiff(new Date(), timeZoneConverter('Europe/London')) // -25200000</pre>\n</li>\n</ul>\n<p>无论如何，在折腾一番后我们还是把时区正确转换了。接下来准备格式化时间字符串了吗？不过在此之前，我们得先来聊聊语言、文字和区域。</p>\n<h1>语言文字区域傻傻分不清</h1>\n<blockquote><p>如何在计算机中表示中文？</p></blockquote>\n<p>“这不简单，”你可能会说，“用 <code>zh</code> 啊。”</p>\n<blockquote><p>那简体中文呢？</p></blockquote>\n<p>“<code>zh-CN</code>。”你或许会说出这个答案。</p>\n<blockquote><p>那用于新加坡的简体中文和用于中国大陆的简体中文该如何区分呢？</p></blockquote>\n<p>嗯……好问题。</p>\n<p>要能正确区分不同的简体中文，我们还得先回到定义上。实际上，“国际化”并不只是语言的翻译而已，国际化包含的是一整套对于各个<strong>区域</strong>的本地化方案。要准确表示一个国际化方案，我们实际至少需要确定三个属性：语言（Language）、文字（Script）和区域（Locale）。</p>\n<ul>\n<li>\n<strong>语言</strong>通常指的是<strong>声音语言</strong>。不同的语言都有一套自己的发音规则，很难互通。如中文和英语都属于语言</li>\n<li>\n<strong>文字</strong>对应的是某个语言的书写方式，同样的语言可能会有多种书写方案。如中文主要有简体和繁体两种书写方案</li>\n<li>\n<strong>区域</strong>指国际化面向的地区，相同的语言和文字，在不同地区也有可能会有不同的使用习惯。如新加坡和中国大陆都使用简体中文，但两地的用词习惯等有些许差异</li>\n</ul>\n<p>只有确定了这三个属性，我们才能正确定义一个国际化方案（或者说<strong>区域设置</strong>）。当然，还有很多其他属性可以更准确的表达某个区域设置，但通常有语言、文字和区域就已经足够了。</p>\n<p>于是，基于 <a href=\"https://tools.ietf.org/rfc/bcp/bcp47.txt\" rel=\"noopener\">BCP 47</a>，我们可以知道：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN = 中文普通话-简体-中国大陆\ncmn-Hans-SG = 中文普通话-简体-新加坡\ncmn-Hant-TW = 中文普通话-繁体-台湾\nyue-Hant-HK = 中文粤语-繁体-香港</pre>\n<p>等等，这都是啥？还有 BCP 47 又是啥？BCP 是 IETF 发布的“最佳当前实践”文档，而 BCP 47 是一些国际化相关的 ISO 和备忘录的集合，也是目前事实上由 HTML 和 ECMAScript 所使用的表达区域设置的标准。BCP 47 定义的区域设置标签实际上比较复杂，但对于大部分简单使用情况，上文示例中的格式已经完全够用了。简单来说，<strong>要表达一个区域设置，我们会使用 <code>语言[-文字][-区域]</code> 的格式，而文字和区域都是可选的。</strong>而对于每个部分的具体代码，BCP 47 也有做具体定义。其中：</p>\n<ul>\n<li>语言使用 ISO 639-1 定义的两位字母代码（如中文为 <code>zh</code>，英文为 <code>en</code>）或 <a href=\"https://iso639-3.sil.org/code_tables/639/data\" rel=\"noopener\">ISO 639-2/3</a> 定义的三位字母代码（如中文普通话为 <code>cmn</code>，英文为 <code>eng</code>），通常小写</li>\n<li>文字使用 <a href=\"https://unicode.org/iso15924/iso15924-codes.html\" rel=\"noopener\">ISO 15924</a> 定义的四位字母代码，通常首字母大写。如简体中文是 <code>Hans</code>，繁体中文是 <code>Hant</code>\n</li>\n<li>区域通常使用 <a href=\"https://www.iso.org/iso-3166-country-codes.html\" rel=\"noopener\">ISO 3166-1</a> 定义的两位字母代码，通常大写，如中国大陆为 <code>CN</code>，英国为 <code>GB</code>\n</li>\n</ul>\n<blockquote><p>ISO 639-1/2/3 的关系实际是：ISO 639-1 是最早制定的规范，使用两位字母表示语言，但语言数量之多并不能只用两位代码表示。因此后来修订了 ISO 639-2 和 3，使用三位字母表示了更多语言。通常 639-1 代码和 ISO-2/3 代码是一对多的关系。如中文 <code>zh</code> 其实是中文普通话 <code>cmn</code> 的宏语言（macrolanguage），同样使用 <code>zh</code> 为宏语言的语言还有 <code>wuu</code>（中文吴语）、<code>hak</code>（中文客家话）、<code>yue</code>（中文粤语）等数十种。<strong>从规范上我们现在应该使用 ISO 639-2/3 代码来替代 ISO 639-1 代码了</strong>，但由于历史阻力和真实需求中分类无需如此细致等原因，<strong>使用 ISO 639-1 指定语言仍然非常常见而且完全可以接受。</strong>此外，特别地，我们在 ISO 639-3 中定义未指明的语言为 <code>und</code>。</p></blockquote>\n<p>因此，对于这一节开头的两个问题，在 BCP 47 中正确答案其实是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">zh = 中文\ncmn = 中文普通话\n\nzh-Hans = 中文-简体\ncmn-Hans = 中文普通话-简体</pre>\n<p>而 <code>zh-CN</code> 实际是指在中国大陆使用的中文，当然也包含在中国大陆使用的繁体中文。<strong>不过，由于大部分情况下一个区域只会通用一种文字，很多情况下我们可以忽略文字这一项</strong>，即使用 <code>zh-CN</code>（或者 <code>cmn-CN</code>）来表示中国大陆的简体中文普通话——毕竟在大部分业务中在中国大陆使用繁体和非普通话的情况非常少。</p>\n<blockquote><p>事实上，类似 <code>zh-Hans</code> 和 <code>zh-Hant</code> 开头的区域设置名称已经被标记为 <code>redundant 废弃</code>，因此尽可能只使用 <code>zh-CN</code> 或者 <code>cmn-Hans-CN</code> 这样的区域设置名称。所有区域设置名称的列表可以在 <a href=\"https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry\" rel=\"noopener\">IANA</a> 找到。</p></blockquote>\n<p>现在我们可以准确定义一个区域设置了。不过我们还有一些小小的需求。比如我们想在 <code>cmn-Hans-CN</code> 的区域设置中使用农历来表示日期，但显然我们上文定义的表示方法并不能表达这一需求。好在，Unicode 为 BCP 47 提供了 u 扩展。在区域设置名称后面加上 <code>-u-[选项]</code> 就可以表达更细致的变体了。所以我们有：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN-u-ca-chinese = 中文普通话-简体-中国大陆-u-日历-中国农历\njpn-Jpan-JP-u-ca-japanese = 日语-日文汉字/平假名/片假名-日本-u-日历-日本日历\ncmn-Hans-CN-u-nu-hansfin = 中文普通话-简体-中国大陆-u-数字-简体大写数字</pre>\n<p>u 扩展的具体可选项可以在 <a href=\"https://www.unicode.org/reports/tr35/tr35-21.html#Unicode_locale_identifier\" rel=\"noopener\">Unicode 网站</a>上找到。而多个 u 扩展还可以连接——于是我们甚至可以写出 <code>cmn-Hans-CN-u-ca-chinese-nu-hansfin</code> 这种丧心病狂的区域设置名称。当然，相信你现在已经可以看懂这个区域设置的意思了。</p>\n<blockquote><p>不同地区可能会有不同的日历使用习惯，如中国有使用农历的需求，泰国有使用佛历的需求，我们可以通过 u 扩展指定不同的日历。不过，大部分情况下我们会使用标准的 ISO 8601 日历（gregory），JavaScript 的 <code>Date</code> 对象也只支持这种日历。</p></blockquote>\n<blockquote><p>你可以使用 <a href=\"https://r12a.github.io/app-subtags/\" rel=\"noopener\">BCP47 language subtag lookup</a> 工具快速检查你编写的 BCP 47 区域标签是否规范。</p></blockquote>\n<p>终于我们可以正确表达一个完美符合我们需求的区域设置了。接下来，让我们开始格式化时间吧。</p>\n<h1>格式化时间</h1>\n<p>这题我会！</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const formatDate(date) =&gt; {\n    return `${date.getFullYear()}-${`${date.getMonth() + 1}`.padStart(2, '0')}-${`${date.getDate()}`.padStart(2, '0')} ${`${date.getHours()}`.padStart(2, '0')}:${`${date.getMinutes()}`.padStart(2, '0')}:${`${date.getSeconds()}`.padStart(2, '0')}`\n}\n\nformatDate(new Date()) // 2021-10-13 01:00:00</pre>\n<p>就完事了……吗？先不论这样的格式化代码难以阅读，尽管上文这样的日期格式国际通用，<strong>但并非所有区域都习惯于这样的日期表示方法。</strong>比如英语国家/地区在很多时候习惯在日期中加入星期，而阿拉伯语国家/地区在部分情况下习惯使用阿拉伯语数字（而非常用的阿拉伯-印度数字）；再比如美式英语国家/地区习惯月-日-年的日期表示法，而英式英语国家/地区习惯日-月-年的日期表示法……不同区域在时间表示格式习惯上的差异是巨大的，<strong>我们很难通过一个简单的方法来正确地、国际化地格式化一个日期。</strong></p>\n<p>好在 ES6 早就为我们铺平了道路。还记得上文提到过的 <code>Intl.DateTimeFormat</code> 吗？我们通过它来实例化一个日期格式化器并用进行日期的国际化。</p>\n<p>直接来看例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const options = {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    weekday: 'long'\n}\nconst now = new Date()\n\nconst enUSFormatter = new Intl.DateTimeFormat('en-US', options)\n\nconst zhCNFormatter = new Intl.DateTimeFormat('zh-CN', options)\nconst zhCNAltFormatter = new Intl.DateTimeFormat('zh-CN-u-ca-chinese', options)\nconst zhCNAlt2Formatter = new Intl.DateTimeFormat('zh-CN-u-ca-roc-nu-hansfin', options)\n\nconst jaFormatter = new Intl.DateTimeFormat('ja', options)\nconst jaAltFormatter = new Intl.DateTimeFormat('ja-JP-u-ca-japanese', options)\n\nconst arEGFormatter = new Intl.DateTimeFormat('ar-EG', options)\n\nenUSFormatter.format(now) // Wednesday, Oct 13, 2021\n\nzhCNFormatter.format(now) // 2021年10月13日星期三\nzhCNAltFormatter.format(now) // 2021辛丑年九月8星期三\nzhCNAlt2Formatter.format(now) // 民国壹佰壹拾年拾月拾叁日星期三\n\njaFormatter.format(now) // 2021年10月13日水曜日\njaAltFormatter.format(now) // 令和3年10月13日水曜日\n\narEGFormatter.format(now) // الأربعاء، ١٣ أكتوبر ٢٠٢١</pre>\n<blockquote><p>在这里我们使用 ISO 639-1 代码来表示语言，是由于事实上 ISO 639-1 代码更加常见与通用。在大部分支持 <code>Intl.DateTimeFormat</code> 的 JavaScript 运行时中我们也可以使用 ISO 639-2/3 代码来表示语言（但实际会 fallback 至对应的 ISO 639-1 代码）。</p></blockquote>\n<blockquote><p>你也可以通过在 <code>options</code> 中设置 <code>calendar</code> 属性和 <code>numberingSystem</code> 属性来替换区域设置名称中对 u 扩展的使用。这也是推荐方式。</p></blockquote>\n<p>这非常直观，我们可以指定区域设置和格式化选项来初始化一个格式化器，并在之后使用格式化器对象的 <code>format</code> 方法来格式化一个 <code>Date</code> 对象。这里的格式化选项其实非常灵活，能格式化的不只是日期，时间也可以被灵活地格式化，有非常多的组合可以选择。我们不会在这里详细解释每一个选项，你可以访问 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\" rel=\"noopener\">MDN 文档</a>来了解更多。</p>\n<blockquote><p>如前文所述，<code>Intl.DateTimeFormat</code> 无法格式化毫秒。</p></blockquote>\n<p>不过需要注意的是，<strong>JavaScript 运行时不一定支持所有区域设置，也不一定支持所有格式化选项。</strong>在遇到不支持的情况时，<code>Intl.DateTimeFormat</code> 默认会静默 fallback 到最匹配的支持项，因此在处理不常见的区域设置或选项时，你可能需要再额外检查。你可以通过 <code>Intl.DateTimeFormat.supportedLocalesOf()</code> 静态方法判断当前运行时是否支持指定的区域设置，也可以在实例化格式化器后在对象上调用 <code>resolvedOptions()</code> 方法来检查运行时的解析结果是否与预期一致。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('yue-Hant-CN').resolvedOptions()\n// {locale: 'zh-CN', calendar: 'gregory', …}\n// fallback 至 zh-CN，与 yue-CN 的预期不一致</pre>\n<p>此外，正如你所看到的，各种语言在日期格式化中使用的文本 JavaScript 运行时都已经帮我们内置了。因此，我们甚至可以利用这些国际化特性来为我们的应用减少一点需要翻译的字符串——打包进应用的翻译越少，应用体积也就越小了嘛——比如说获取一周七天对应的名字：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getWeekdayNames = (locale) =&gt; {\n     // 基于一个固定日期计算，这里选择 1970.1.1\n     // 不能使用 0，因为 Unix 时间戳 0 在不同时区的日期不一样\n    const base = new Date(1970, 0, 1).getTime()\n    const formatter = new Intl.DateTimeFormat(locale, { weekday: 'short' })\n    return Array.from({ length: 7 }, (_, day) =&gt; (\n        formatter.format(new Date(base + 3600000 * 24 * (-4 + day))) // 1970.1.1 是周四\n    ))\n}\n\ngetWeekdayNames('en-US') // ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\ngetWeekdayNames('zh-CN') // ['周日', '周一', '周二', '周三', '周四', '周五', '周六']\ngetWeekdayNames('ja') // ['日', '月', '火', '水', '木', '金', '土']\ngetWeekdayNames('ar-EG') // ['الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت']</pre>\n<p>当然，如果你还是不喜欢运行时为你提供的格式，我们还有上文提到过的 <code>formatToParts()</code> 方法可以用。来看一个简单的例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('zh-CN', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    weekday: 'long',\n    hour: 'numeric',\n    minute: 'numeric',\n    second: 'numeric',\n}).formatToParts(new Date())\n// [\n//     { type: 'year', value: '2021' },\n//     { type: 'literal', value: '年' },\n//     { type: 'month', value: '10' },\n//     { type: 'literal', value: '月' },\n//     { type: 'day', value: '13' },\n//     { type: 'literal', value: '日' },\n//     { type: 'weekday', value: '星期三' },\n//     { type: 'literal', value: ' ' },\n//     { type: 'dayPeriod', value: '上午' },\n//     { type: 'hour', value: '1' },\n//     { type: 'literal', value: ':' },\n//     { type: 'minute', value: '00' },\n//     { type: 'literal', value: ':' },\n//     { type: 'second', value: '00' }\n// ]</pre>\n<p>随后，你就可以自己解析这个数组来构造出你想要的时间格式了。最后，我们还可以使用 <code>Intl.RelativeTimeFormat</code> 来格式化相对日期。当然我们不会在这里详细讲解这个 API，你可以参考 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat\" rel=\"noopener\">MDN 文档</a>。直接来看一个简单例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getRelativeTime = (num, unit, locale) =&gt; {\n    return new Intl.RelativeTimeFormat(locale, { numeric: 'auto' }).format(num, unit)\n}\n\ngetRelativeTime(-3, 'day', 'en-US') // 3 days ago\ngetRelativeTime(-1, 'day', 'zh-CN') // 昨天\ngetRelativeTime(0, 'second', 'zh-CN') // 现在\ngetRelativeTime(3, 'hour', 'ja') // 3 時間後</pre>\n<blockquote><p><code>Intl.RelativeTimeFormat</code> 是一个相对较晚进入标准的对象，因此浏览器支持程度较差，可能需要使用 <a href=\"https://formatjs.io/docs/polyfills/intl-relativetimeformat\" rel=\"noopener\">Polyfill</a>。不过目前（2021.10）主流浏览器的最新版本均已支持此 API。</p></blockquote>\n<h1>未来</h1>\n<p>我希望这篇文章时区转换的部分可以很快过时——这并非无稽之谈，目前（2021.10）TC39 的 <a href=\"https://github.com/tc39/proposal-temporal\" rel=\"noopener\"><code>Temporal</code> 提案</a>已经进入 Stage 3 了。<strong><code>Temporal</code> 提案定义了一个新的、时区友好的 <code>Temporal</code> 命名空间，并期望在不久后就能进入标准并最终应用于生产环境。</strong><code>Temporal</code> 定义了完整的时区、时间段、日历规则的处理，且拥有简单明了的 API。那时候，JavaScript 的时区处理就不会再如此痛苦了。由于目前 <code>Temporal</code> 提案还未进入标准，API 暂未稳定，我们无法将其用于生产环境，但我们可以来看一个简单的例子感受一下这个 API 的强大。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const zonedDateTime = Temporal.ZonedDateTime.from({\n  timeZone: 'America/Los_Angeles',\n  year: 1995,\n  month: 12,\n  day: 7,\n  hour: 3,\n  minute: 24,\n  second: 30,\n  millisecond: 0,\n  microsecond: 3,\n  nanosecond: 500,\n  calendar: 'iso8601'\n}) // 1995-12-07T03:24:30.0000035-08:00[America/Los_Angeles]</pre>\n<p>如果你希望立刻开始使用 <code>Temporal</code>，现在已有 Polyfill 可用。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"js-temporal\" data-mdxgithubp=\"temporal-polyfill\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/js-temporal/temporal-polyfill\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>不过，时区问题不会消失，各地区的习惯也很难融合到一起。时间的国际化处理是<a href=\"https://yourcalendricalfallacyis.com/\" rel=\"noopener\">极其复杂</a>的，前端中的时间国际化仍然值得我们认真关注。</p>\n","link":"https://flyhigher.top/develop/2482.html"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 12:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 4分8秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量...</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板...）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/209138/1/18651/50218/622032acEf83a8d68/fc6db86aebb679ff.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。macOS 系统代理的行为和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：...</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/207910/19/18573/59096/622032b0E05c1d4be/5d89d557f7889730.jpg\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。M1 芯片的性能如何？本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？...</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/138186/40/23101/50775/622032b3Efa9053d7/df3a819d044a9455.jpg\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote>\n<p>题图来自 USTC Hackergame 2019「Happy LUG」</p>\n</blockquote>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/90743/25/22680/55545/622032abE6ef31d51/cfc4cb389c994c17.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote>\n<p>周六不放假休息，还在这加班搞 CTF？</p>\n</blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/86535/11/24318/75037/622032a8E4f94d4ae/89703ccc122cf4e0.jpg\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<p>之前我在「天下武功，唯快不破 —— 我是这样优化博客的」一文中提到「对于大部分浏览器来说，确保 JS 异步加载和执行的做法其实是在操作 DOM 动态插入 &lt;script async&gt;」，但是并没有给出详细原因。这一次我以 Google Analytics 的统计代码为引子，详细讲讲 &lt;script&gt; 的 async 和 defer 属性、以及它们背后的故事。拆开 Google Analytic 的统计代码现在 Google 推出了 Google Tag Manager，通过......</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/80291/2/16552/19311/622032b3Eb300c2aa/66748fc8124a01c5.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将 […]","link":"https://flyhigher.top/develop/2160.html"}]