[{"title":"Make AMD Yes again：FSR 2.0 让老显卡焕发第二春","date":"2022-07-21 03:30:00","description":"通过 DLSS 移植的 FSR 2.0 体验如何？不妨大声喊出那 6 个字母。<a href=\"https://sspai.com/post/74721\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/74721"},{"title":"北京周边自驾游有哪些避暑好去处？","date":"2022-07-21 03:14:08","description":"\n<h2>20℃过夏天，探访距离北京最近的火山</h2>\n<p data-pid=\"og04I_dO\">今年夏天的北京，时而阴时而雨，再加上伏天，每天就像一个蒸屉一样，就算是热，也不通透，黏黏腻腻。雨过天晴，北京有了久违的蓝天白云。想着择日不如撞日，决定下班后追一场晚霞，来一程自驾，看了下地图，算算时间，将目的地选在了北京近500公里外的乌兰哈达火山群，这里我已经种草了4年。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-0e67391e870261853bf090d3d30350b0_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1350\" data-watermark=\"watermark\" data-original-src=\"v2-0e67391e870261853bf090d3d30350b0\" data-watermark-src=\"v2-75628d4f640d5fc9ce4f422f88d8ab24\" data-private-watermark-src=\"v2-e1eceb5388f711e7ad132a0038d99ce8\"></p>\n<p data-pid=\"lLCJKcRf\">晚上不到7点出发，正是北京的晚高峰，美丽的晚霞分散了堵车带给我的烦躁。驶上G6京藏高速，便开始向西一路驰骋，到张北附近已是夜幕初垂。考虑到已经开了将近5小时的车，而且已经是深夜，高速上大车很多，对向车道的车基本都是打远光灯很影响驾驶，开到乌兰察布时就在集宁住下了，补充一下体力。第二天继续赶路，又开了大约1.5小时，终于到达火山群。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-c29767a73c2665faff6bee895a3a6e3c_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1350\" data-watermark=\"watermark\" data-original-src=\"v2-c29767a73c2665faff6bee895a3a6e3c\" data-watermark-src=\"v2-95a5a8820f636eb42ef2785db79e343f\" data-private-watermark-src=\"v2-7cb93ed29299b7d9bcf8acf0c3651e9d\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-dbce25fee8893b55a271086d2937f427_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1349\" data-watermark=\"watermark\" data-original-src=\"v2-dbce25fee8893b55a271086d2937f427\" data-watermark-src=\"v2-e255359b500a91854c335ac1b3730b61\" data-private-watermark-src=\"v2-c6228f96c9a5e8d5f35efb5e87d9b6fe\"></p>\n<p><br></p>\n<h2><b>乌兰哈达火山群</b></h2>\n<p data-pid=\"Kg9-NSmU\">察右后旗乌兰哈达火山群位于内蒙古自治区乌兰察布市察右后旗乌兰哈达苏木与白音察干镇之间，分布面积约260平方公里，是蒙古高原南缘现今发现的全新世有喷发的火山地区。火山群总体呈北东和北西向串珠状散布，30多座大小不一的火山均匀散落在在内蒙古大草原上，大多是1亿多年前火山爆发形成的死火山。这个火山群，之前一直默默无闻，直到2012年被国内外火山学界知晓，2015年刊登在《中国国家地理》后，瞬间名声大噪，凭借‘世界上最年轻的火山群’得到了世界的关注和认可，探访‘天然火山博物馆’，更成为了京津冀自驾圈的热门。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-72620c75c8609241e2e933cc4ea66864_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"447\" data-watermark=\"watermark\" data-original-src=\"v2-72620c75c8609241e2e933cc4ea66864\" data-watermark-src=\"v2-a98d94ba31f4f496f13da0bcac563594\" data-private-watermark-src=\"v2-acddf6388a5a0204fbc44c1dbedfc705\"></p>\n<p data-pid=\"Lg__Imr_\">我这次去的是距离北京最近的乌兰哈达的8座火山，它们最近的一次喷发距今大约6000年以前。1-2号火山目前已经风化消失了，所以在地图上没有没有标注。3-8号火山形成北东和北西两个走向的火山链，中间由G208国道隔开，北西是4-8号火山，北东是3号火山。</p>\n<p><img src=\"https://picx.zhimg.com/v2-244bb6ea4e2d2ce3508d0c49b79e2105_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"521\" data-rawheight=\"480\" data-watermark=\"watermark\" data-original-src=\"v2-244bb6ea4e2d2ce3508d0c49b79e2105\" data-watermark-src=\"v2-d3f8f443d1b641c9a1d13fd803f788b0\" data-private-watermark-src=\"v2-9e682774e3be0027a2a13d805dae6070\"></p>\n<p data-pid=\"RCAKEIQH\">乌兰哈达火山群中属3座中心式喷发的炼丹炉火山最为知名（3号火山、5号火山、6号火山），顾名思义就是从火山中间喷发的。火山大部分锥体主要由玄武质熔结集块岩及碎成熔岩组成，属斯通博利式火山。虽已遭受一定剥蚀，但多数火口形态仍清晰可辨，被称为‘太上老君的炼丹炉’。这里也成为研究现代地壳活动性和火山资源、环境及灾害的天然“窗口”，具有极高的科学研究、考察、地学教育价值。这里的火山一直被认为是死火山，近几年在地质学家，实地考察后断论：这是年轻的活火山。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-256687b3af9be62423d20803af0101e5_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"680\" data-rawheight=\"510\" data-watermark=\"watermark\" data-original-src=\"v2-256687b3af9be62423d20803af0101e5\" data-watermark-src=\"v2-0e93af1d9a4e3d505e72e1ed8f3460d4\" data-private-watermark-src=\"v2-60d5c286ec293f1bfe85f05a33376c3b\"></p>\n<p><br></p>\n<h2><b>火山打卡指南</b></h2>\n<p data-pid=\"lN0abZCt\">游客来到乌兰哈达火山群，最常去的就是3-6号火山。<b>3号火山</b>（北炼丹炉）西南侧已建好栈道通往山顶火山圈俯瞰、眺望；东南侧破坏比较严重，像挖煤场。山下有个红色的电话亭，很多人围着拍照。</p>\n<p data-pid=\"oFkUbP45\"><b>4号火山</b>早年由外籍华人投资，修建成乌兰哈达火山地质公园，但未形成规模，外加火山被挖剩三分之一，黑乎乎一片，没有很美。</p>\n<p data-pid=\"ePhZT7Zx\"><b>5号火山</b>（中炼丹炉）是保存最完整、最原生态、最高、最大的一座。因火山喷发后期压力减弱，火山圈中心的喷发口形成凸起的小火山锥。远看像一座大草坡，人也是可以爬上去的，就是没有正规的栈道，坡度略陡。</p>\n<p data-pid=\"fMbFHKfe\"><b>六号火山</b>（南炼丹炉）是乌兰哈达火山群遭破坏最严重的一座，火山石因质量较轻、保温性能好、富含多种矿物质，早年被挖去做房顶保温材料、饮用水过滤材料等等。如今火山四周已被挖空形成峭壁，加之火山石容易断裂，无法攀登。因商业利益的趋势，会让人类肆无忌惮的破坏自然环境，看着心里挺不是滋味的。但因为‘后天人为因素’，这里现在成了网红拍照地，山下有很多人穿着‘太空服’假装在外星可靠，让人不禁惊叹‘航天人的太空探索梦想在乌兰哈达得以提前实现’。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-e7f1e3a795a1dd646c71437d1d273ba6_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1350\" data-watermark=\"watermark\" data-original-src=\"v2-e7f1e3a795a1dd646c71437d1d273ba6\" data-watermark-src=\"v2-44fdf3c4b2e2b9f42114179ced18c9ec\" data-private-watermark-src=\"v2-62d1d495a9d9a5130b3da82c8bf48ec7\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-4caae58378de0cf0568a2eb998e0fbd0_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1350\" data-watermark=\"watermark\" data-original-src=\"v2-4caae58378de0cf0568a2eb998e0fbd0\" data-watermark-src=\"v2-1353117612c2825cd21052c21078af84\" data-private-watermark-src=\"v2-92c06142e18a03a8712d36f1e50007cf\"></p>\n<p><br></p>\n<h2><b>逃离城市 换换心情</b></h2>\n<p data-pid=\"EthWcFjt\">乌兰察布与北京有400多公里的距离，但这里不论从海拔、气温、风景、心情，都是不一样的。当眼前的景象从高楼林立，人群如麻中跳脱出来，换成风吹草低见牛羊，整个人状态可以明显感觉到是舒展、开阔的。坐在火山外的长椅上，看着一望无际的草原，好似被‘压低’的天空和飘动的大块云朵，深呼吸是草木的味道... 城市里的‘残卷风云’，在几百公里外的这里却是‘云淡风轻’。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-90d7b36d0e823049038f8234613a11cb_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1350\" data-watermark=\"watermark\" data-original-src=\"v2-90d7b36d0e823049038f8234613a11cb\" data-watermark-src=\"v2-658a7a59a8c6404ed378706a8bd743ba\" data-private-watermark-src=\"v2-19748c676526db2c1e406b8bd1c0bd00\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-323a0e648d71198e2804ade7a43b93b5_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1349\" data-watermark=\"watermark\" data-original-src=\"v2-323a0e648d71198e2804ade7a43b93b5\" data-watermark-src=\"v2-6ca8c3afab999f793b8c72a9fbe24a68\" data-private-watermark-src=\"v2-35a3d91ed7ad3ee991bcf5e6f13a7de8\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-d1c661fdc514185bfab63b3a3575cffe_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1349\" data-watermark=\"watermark\" data-original-src=\"v2-d1c661fdc514185bfab63b3a3575cffe\" data-watermark-src=\"v2-12b9f53a93b6fd309fd9a4ad152941f5\" data-private-watermark-src=\"v2-6c3c0c01e0129d397cc5f1c1b3bd6dc4\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-27b2368975f98c03f9a3056a2320d26d_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1349\" data-watermark=\"watermark\" data-original-src=\"v2-27b2368975f98c03f9a3056a2320d26d\" data-watermark-src=\"v2-a66312a4617924d7d7577af7094393d6\" data-private-watermark-src=\"v2-8e228dce0d827b7ea24cde797ae30b80\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-046e2cfe8700db933acb15b1c8b424e9_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1350\" data-watermark=\"watermark\" data-original-src=\"v2-046e2cfe8700db933acb15b1c8b424e9\" data-watermark-src=\"v2-d5ce89c98cba8ed480ff8c094e04c976\" data-private-watermark-src=\"v2-f09f75d9e4ee0eb6ef65eab16b61d710\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-2f7600d3bae7dad0f4306db2f150b175_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1350\" data-watermark=\"watermark\" data-original-src=\"v2-2f7600d3bae7dad0f4306db2f150b175\" data-watermark-src=\"v2-28d9a17962d96f42faceed753500f9c9\" data-private-watermark-src=\"v2-e32d6193a4381193fdfca3d3d8dedaf4\"></p>\n<p data-pid=\"uBS-OJ8D\">与北京近1500米的海拔高度差、远离海洋等原因，让乌兰哈达天蓝云低，干燥凉爽，即便是盛夏时节，站在火山锥顶，那呼啦啦的大风可以把人吹跑；落日余晖中，迎着朔风，短衫短裤，可以冷得人直打哆嗦；更别提夜里了，那已经不能用凉爽来形容了，而是寒冷！<b>7月底8月初的乌兰察布之夜，比起空调制冷，更需要的是一床棉被保温。</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-17910856d09c646ac177c29d7d0ac6ee_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1350\" data-watermark=\"watermark\" data-original-src=\"v2-17910856d09c646ac177c29d7d0ac6ee\" data-watermark-src=\"v2-4e4df04336ec9bade2bbf7e1c1357965\" data-private-watermark-src=\"v2-42d938c09d2f35e60b87fa9367439d22\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-4b7d10e6d4333c346d5e3305afbf5002_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1350\" data-watermark=\"watermark\" data-original-src=\"v2-4b7d10e6d4333c346d5e3305afbf5002\" data-watermark-src=\"v2-b50cf4bc0fc1475832914c687129918a\" data-private-watermark-src=\"v2-c3c4f1720ef9f40e3484044dfae41b72\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-943b8ab30439be0b8d23487c0bd9d0fe_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1350\" data-watermark=\"watermark\" data-original-src=\"v2-943b8ab30439be0b8d23487c0bd9d0fe\" data-watermark-src=\"v2-03207a71ae7d5053b7a3c79a1bf5fee1\" data-private-watermark-src=\"v2-44ea73ee37341fd903b202d9974f2168\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-637d85406356e995518ce30213bb34ed_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1350\" data-watermark=\"watermark\" data-original-src=\"v2-637d85406356e995518ce30213bb34ed\" data-watermark-src=\"v2-87e74e2a85ae67988a347755fdadfe5d\" data-private-watermark-src=\"v2-40ee1572ee81d0760ed3a4f55f30fd9b\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-c08dc26594e5edbca7bafabee69bf58e_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1349\" data-watermark=\"watermark\" data-original-src=\"v2-c08dc26594e5edbca7bafabee69bf58e\" data-watermark-src=\"v2-46661bc9dbdf2d6256c47d16865b3f97\" data-private-watermark-src=\"v2-6e11504380cd5c73c192828da05c426f\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-bff67e3e56443a1e1a4090d0028de662_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1350\" data-watermark=\"watermark\" data-original-src=\"v2-bff67e3e56443a1e1a4090d0028de662\" data-watermark-src=\"v2-059c2b02faa8e89b2d805e9eae1151af\" data-private-watermark-src=\"v2-7bf94899a8308c658f4ae27edac0cb5f\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-dfb20c3d609da289300ebd24ec0f098f_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1349\" data-watermark=\"watermark\" data-original-src=\"v2-dfb20c3d609da289300ebd24ec0f098f\" data-watermark-src=\"v2-d382f54e4ad1c3f0483ee5accd040cba\" data-private-watermark-src=\"v2-7c2b6459cfce2e8eee32b2d9f30124a0\"></p>\n<p data-pid=\"R0nVAW7P\">入夜，穿上保暖的衣服，开车去3号火山，把车停好，当眼睛适应了夜色，抬头望向天空，是夏日繁星与银河璀璨，漫天静谧，引人无限遐想。不远处的停车场里有几辆过夜的房车，应该是几家人来此过暑假，不时的传出欢声笑语。</p>\n<p><img src=\"https://pica.zhimg.com/v2-55be3f948fbeff3e9b41eea9b536c1a3_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1350\" data-watermark=\"watermark\" data-original-src=\"v2-55be3f948fbeff3e9b41eea9b536c1a3\" data-watermark-src=\"v2-5dc562141b1a572617222a06cd5659d7\" data-private-watermark-src=\"v2-2b80d09b02f08eda0da50c0eeb562c1b\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-7706cea3bb894f63431fb235e1a03a40_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1350\" data-watermark=\"watermark\" data-original-src=\"v2-7706cea3bb894f63431fb235e1a03a40\" data-watermark-src=\"v2-8197659bc6b705f1817349e2ab27f7d4\" data-private-watermark-src=\"v2-5c14c760bb39ae521b6873d9f0e02be8\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-cf0e2fb98e02e771ca6797872d70b429_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1350\" data-watermark=\"watermark\" data-original-src=\"v2-cf0e2fb98e02e771ca6797872d70b429\" data-watermark-src=\"v2-d3c761f32c6de55bdcb92a4553c103a3\" data-private-watermark-src=\"v2-94da16048b0d4ccc1b57c479bba51667\"></p>\n<p><br></p>\n<h2><b>日夜兼程，人间旅人</b></h2>\n<p data-pid=\"tINQVCyC\"><b>TIPS：</b></p>\n<ul>\n<li data-pid=\"Xf7TLwAz\">地址：内蒙古自治区乌兰察布市察哈尔右翼后旗</li>\n<li data-pid=\"gIU15sqT\">门票：免费</li>\n<li data-pid=\"DniavBH8\">交通：自驾距北京500多公里，北京自驾过去5-6小时</li>\n<li data-pid=\"2I1g-Rn7\">乌兰哈达火山地质公园周边吃住不是很方便，年轻人的话可以选择住蒙古包或者露营；带老人孩子的建议先到乌兰察布住宿稍作休憩，第二天奔火山；或者住在察右后旗。</li>\n<li data-pid=\"8CKYNm2U\">建议春夏秋前往，冬季寒冷又有雪，车辆及着装要做好功课</li>\n</ul>\n<p><img src=\"https://pica.zhimg.com/v2-8583b60f2be10d6f3b907d64409d993b_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1349\" data-watermark=\"watermark\" data-original-src=\"v2-8583b60f2be10d6f3b907d64409d993b\" data-watermark-src=\"v2-d7551520d070cc6e8772f50c1207a48f\" data-private-watermark-src=\"v2-bcf12b879d565ce69155665d23a323e9\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-d40d4491382bfc0db77430f827082992_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1349\" data-watermark=\"watermark\" data-original-src=\"v2-d40d4491382bfc0db77430f827082992\" data-watermark-src=\"v2-19b21d2af27886e6041097c3fb137703\" data-private-watermark-src=\"v2-8c9fcbd67f09330876b70294615a7417\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-a41107e32147a1353359d9e4872de50c_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1350\" data-watermark=\"watermark\" data-original-src=\"v2-a41107e32147a1353359d9e4872de50c\" data-watermark-src=\"v2-99030e6696ba4444705c9e6138002972\" data-private-watermark-src=\"v2-bb75c2755a6ba92c708275a75ab2442c\"></p>\n<h2>关于我</h2>\n<p data-pid=\"XOaAVzK3\">以「一人一车一行李箱」的方式，去过48个国家400+城市的红唇姑娘</p>\n<p data-pid=\"ksk6lqbM\">公众号 SkaeyMin</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/skaeytravelstudio?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">游旻Skaey</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/539036789/answer/2583897941?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">3 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/544273459?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">北京周边有什么避暑好去处？</a><br><a href=\"http://www.zhihu.com/question/536602034?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">五一计划北京周边自驾游，有什么好去处分享？</a><br>\n","link":"http://www.zhihu.com/question/539036789/answer/2583897941?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"派早报：努比亚发布 Z40S Pro 手机、高通公布骁龙峰会时间等","date":"2022-07-21 00:27:38","description":"微软商店将允许付费开源应用上架、索尼将收购电子竞技平台 Repeat.gg 等。<a href=\"https://sspai.com/post/74719\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/74719"},{"title":"如何评价奥迪R8？","date":"2022-07-20 10:19:04","description":"\n<p data-pid=\"nFC7NbmW\">------------------------------</p>\n<p data-pid=\"7PT47Sl2\">车还是要拿在自己手里开一段时间。虽然之前我也开过很多超跑，但这次是第一次有机会关了ESP好好在赛道上push一下极限，这台车在超跑里对我的意义有点像跑车里当年的AMG GT R。同时R8这台车也有很多车迷感兴趣，并且它是一台很特别的车，所以我觉得有必要深究一下。</p>\n<p><br></p>\n<p data-pid=\"m-m-PtYk\">省流重点提示</p>\n<ol><li data-pid=\"r-15YblF\">确实慢。以2022年的标准，只能达到跑车圈速。</li></ol>\n<p data-pid=\"ZOxEDWWt\">2. 极限之上确实拧巴。有保时捷感觉，但没有保时捷优点。</p>\n<p data-pid=\"w7207uMW\">3. 如何评价奥迪R8？还真不是简单的“GT取向”，是一个特别的设定。</p>\n<p data-pid=\"U1HARb6f\">4. R8还是超跑吗？什么是R8的正确购买姿势？</p>\n<p data-pid=\"LkJ748YY\">-------------------------------</p>\n<p><br></p>\n<p data-pid=\"zzuO5E3r\">1. R8圈速最终多少？这个圈速真的慢吗？</p>\n<p><br></p>\n<p data-pid=\"mjF4FpvP\">R8的圈速是1分14秒1，这也是为什么我当天发微博说R8慢的（部分）原因。圈速排行详见下图。当然，因为温度高达37度并且是自吸，这圈速可以理解为这台车的下限。</p>\n<p><img src=\"https://pica.zhimg.com/v2-49bd7312cd1e4baa86db0e6f913718ad_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1990\" data-rawheight=\"807\" data-watermark=\"watermark\" data-original-src=\"v2-49bd7312cd1e4baa86db0e6f913718ad\" data-watermark-src=\"v2-9a80815225448e651532495bd153b7b7\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"kYhB4mVe\">按照经验，如果我们取北京全年平均温度（白天19度）的情况，R8的圈速应该在1分12秒到1分12秒中。如果为了出最好成绩，所有条件都刻意凑到一起，极限也许可以做到1分11秒出头。</p>\n<p><br></p>\n<p data-pid=\"nrR5cCv5\">这个圈速推测是完全合理的，因为可以和其他赛道的情况相互印证。</p>\n<p><br></p>\n<p data-pid=\"-s4P8I_3\">限于篇幅这里不展开分析了，但我研究了下，在金港、浙赛还有霍根海姆GP，相同环境下R8 V10 Performance的圈速应该都是轻微慢于AMG GT63 S（轮胎21寸CUP2），大约0.5秒。</p>\n<p><br></p>\n<p data-pid=\"1w3al7iv\">那这个圈速是快是慢呢？按照2022年的标准，毫无疑问是很慢的。</p>\n<p><br></p>\n<p data-pid=\"qkOpv7Jo\">R8的对标车型是入门超跑，包括法拉利Roma、迈凯伦GT、玛莎MC20、马丁DB11 V8、911 Turbo S等。虽然这些车虽然我们一台都没刷过圈，但考虑230万的价位，能参考的还有跑车的硬核赛道版比如AMG GT R Pro和GT3RS。</p>\n<p><br></p>\n<p data-pid=\"lcDyeZbD\">老金港我们测过AMG GT R Pro，圈速1分09秒7，轮胎CUP2。GT3RS没测过，但网上有很多CUP2 R的圈速，基本都在1分08秒中尾，如果换成有参考价值的CUP2半热熔胎，大概率也是1分09秒尾。</p>\n<p><br></p>\n<p data-pid=\"MKwstQ89\">1分10秒上下的圈速，这也是最开始我对R8的期待。虽然R8原厂也有CUP2可以选装，但做圈速对比用目前的街胎是更合理的，因为后驱用半热熔带来的优势基本等于街胎加上四驱。（注1）</p>\n<p><br></p>\n<p data-pid=\"lfc5bsDW\">就算考虑那些入门超跑在圈速上不一定那么极致，我们对标低一点的AMG GT R和911 GT3。后者我们跑过1分10秒8，并且测试温度为32度。</p>\n<p><br></p>\n<p data-pid=\"eQZHG-n1\">所以这个价位的下限至少也应该在夏天跑到1分11秒内，而R8距离这个门槛还有2秒多的差距。要知道在金港这样一个小赛道，一圈差1秒就足够差出一个级别了。</p>\n<p><br></p>\n<p data-pid=\"ZWjgDz7I\">当然，这个时候会有人说，圈速不重要，感受好就行了！但事实真是这样吗？</p>\n<p><br></p>\n<p data-pid=\"gWfxDnyC\">2. 刷圈真的不重要吗？</p>\n<p><br></p>\n<p data-pid=\"kgopnKWB\">确实，圈速不能决定以一切，但对圈速的分析可以让我们更清楚地了解一台车的特性。</p>\n<p><br></p>\n<p data-pid=\"ZIVD6ioX\">刷圈的世界里有两种慢。一种是你开着很流畅，但圈速就是慢。还有一种是你开着就没信心感觉很混乱，知道肯定快不了。</p>\n<p><br></p>\n<p data-pid=\"XbtWltUA\">R8属于后者。</p>\n<p><br></p>\n<p data-pid=\"PNtAtO_o\">除了温度的影响，这次刷圈中我个人驾驶操作的部分其实还有约0.3-0.5秒的余量，但为什么我不再刷了呢？</p>\n<p><br></p>\n<p data-pid=\"KovJ6nda\">因为没意义。整个车在极限上都很拧巴，让人没有信心去踩极限。</p>\n<p><br></p>\n<p data-pid=\"5klGPZjZ\">刷圈当天我发微博说感觉R8就是Quattro四驱+V10自吸版的911 GT3，这话是一点毛病没有的。</p>\n<p><br></p>\n<p data-pid=\"E27zUcMU\">因为重心同样靠后，中置的R8在入弯和出弯的“瞬态表现”和后置的911如出一辙，即带刹车入弯的turn in车头响应极好，但一到了出弯给油重心后移，又会出现非常明显的转向不足。</p>\n<p><br></p>\n<p data-pid=\"aU5LILhW\">并且和911 GT3一样，R8方向盘转向角度输入需求偏大或者说转向比大（这是个设定问题），我甚至怀疑是不是保时捷的人帮着R8做的标定。</p>\n<p><br></p>\n<p data-pid=\"Y8NjhnCD\">但除了这两点相似的感觉，其他保时捷做得好的地方R8都做的不好。</p>\n<p><br></p>\n<p data-pid=\"eb4N54tU\">首先中置和后置的车天生刹车就有优势（不解释了当做事实吧），保时捷可以说发挥得淋漓尽致。这点R8不光没有优势，反而成了最大的劣势。</p>\n<p><br></p>\n<p data-pid=\"pIBx_ZUR\">虽然R8是街胎（PS4S AO）动力也比较强，但考虑中置构架的优势，两个直道100米出头刹肯定能站得住，但这台车明显刹车距离偏长。</p>\n<p><br></p>\n<p data-pid=\"xOndpd4W\">我开始以为是ABS标定问题，但后来我发现刹车的时候能清楚地听见轮胎在尖叫，明显是抓地力到极限了。可车速就是降低得很慢，感觉从全力踩下刹车到入弯仿佛过去了一个世纪的时间。</p>\n<p data-pid=\"7qUcJBGf\">【视频1：后直道刹车站不住】</p>\n<a href=\"https://www.zhihu.com/video/1533142592330330112\">后直道刹车站不住</a><p><br></p>\n<p data-pid=\"J3Ef_3k_\">这是这台车我最感到迷惑的地方。</p>\n<p><br></p>\n<p data-pid=\"H8ZkgHh0\">其次是循迹刹车的入弯表现。</p>\n<p><br></p>\n<p data-pid=\"4ONeQbzP\">前面说带刹车入弯的车头响应很好，但这有一个前提，是需要刹车力度“恰到好处”，而这不是每次都能稳定地做到的，需要碰。</p>\n<p><br></p>\n<p data-pid=\"UsW-YC0y\">原因是你在直道末端逐渐抬起刹车时，“感觉”实际刹车力并没有对应地降低，而是还保持在之前的力度。这样前胎始终处在接近抱死的状态完全，无法产生侧向力。结果就是打方向车头根本不动，前胎像粘在了直行的方向上一样，完全无法入弯。</p>\n<p><br></p>\n<p data-pid=\"w8JYVeYF\">然后等你把速度降下来“可以入弯”的时候，车速通常已经“过低”了（低于这个弯道的极限，所以圈速会慢），并且此时车头会猛地一下转过多，甚至有的时候还要救车。。。（可能原因见注2）</p>\n<p data-pid=\"TllExeXK\">【视频2，循迹刹车时under无法入弯，总要把速度降得过低，但此时又容易来个over】</p>\n<a href=\"https://www.zhihu.com/video/1533143153867132928\">循迹刹车时under无法入弯接overs</a><p><br></p>\n<p data-pid=\"3hHRgmdK\">第三点就是这个车后轴的稳定性。</p>\n<p><br></p>\n<p data-pid=\"2QCq1Nql\">很多人看到R8和GT3这种跑车，就会下意识觉得这些车“特别稳”。这种感觉来自视觉上车外观的“低重心”。但事实上，这些中置和后置的跑车，天生在极限上是不稳的。</p>\n<p><br></p>\n<p data-pid=\"M4JOJLBn\">你没看错，“传统”的中置和后置跑车，后轴的稳定性其实一直是个“问题”，只不过现代超跑解决了这个问题。</p>\n<p><br></p>\n<p data-pid=\"bJ6h4YtI\">R8这在方面像一个“极其传统的中置/后置跑车”，瞬间让我回想起了在模拟器里开老911的感觉。在一些中高速（100km/h以上）弯道打了方向前轴入弯之后，总是要想着“防范”后面的屁股侧滑出去搞个突然袭击。</p>\n<p><br></p>\n<p data-pid=\"jo-PI5GQ\">总之就是让你没信心去找弯道的极限。</p>\n<p data-pid=\"QyWpYwmH\">【视频3，带重心进入高速弯，后轴稳定性问题。虽然视频是极限夸张情况因为弯心有水，但不影响意思】</p>\n<a href=\"https://www.zhihu.com/video/1533143356275843072\">稳定性</a><p><br></p>\n<p data-pid=\"qqd9cPtR\">关于这点给大家做个比喻，这些重心靠后的车其实很像霸王龙。前胎很窄，对应霸王龙的小爪子。而下盘让人“感觉”很稳，因为腿粗看起来很敦实，对应车的重心靠后且后胎很宽。</p>\n<p><br></p>\n<p data-pid=\"ZmxQKyhU\">但这只是“看起来”。</p>\n<p><br></p>\n<p data-pid=\"PwnezsVF\">实际上开这些车感觉像在驾驭一只在冰面上奔跑的霸王龙，总需要防着一拐弯屁股就甩出去，而且因为重心靠后一旦甩出去很不好救。只不过新车通过工程上细节的改进解决了这个问题，等于给在冰面上奔跑的霸王龙穿上了钉鞋，所以更稳了。</p>\n<p><br></p>\n<p data-pid=\"Yf1K-Rft\">说到这儿可能有人迷糊了，你刚说无法入弯又说一入弯就over这不是自相矛盾。其实不矛盾，你可以简单粗暴理解为低速弯循迹刹车不好做入弯容易under（当然，偶尔做好了入弯很好），而中高速弯入弯容易over要救车。</p>\n<p><br></p>\n<p data-pid=\"Ala_6KeV\">稳定性还有个问题，就是刹车的时候后轴会晃。这点对应霸王龙只用前爪蹭地面刹车，但后面的屁股乱晃。</p>\n<p><br></p>\n<p data-pid=\"iUWYmTjB\">最后第四点，Quattro和V10的优势都没有发挥。</p>\n<p><br></p>\n<p data-pid=\"WenvvlKB\">动力是有620匹马力，但车也重，结果就是R8和500匹的GT3马力质量比基本一样。这点从两者直道尾速接近也可以看出。（两者齿比相似（偏稀），R8在温度高一点的环境下尾速慢一点）</p>\n<p><br></p>\n<p data-pid=\"MV403S1X\">然后四驱在出弯时的抓地力优势也没被利用。因为这车齿比很稀，二挡断油车速接近120km/h，所以即使二挡出弯踩全油实际上也没什么动力，更别说够到抓地力极限。结果就是Quattro只是凭空增加了重量。</p>\n<p><br></p>\n<p data-pid=\"o410m_8K\">所以做个总结，因为重心靠后，R8在赛道极限过弯有和保时捷相似的感受，但保时捷做得好的地方它都没有做到，而自己的长处也没能发挥出来，所以圈速比GT3慢这么多也是合理的。</p>\n<p><br></p>\n<p data-pid=\"BMsplxVc\">3. 所有的R8都是这样吗？如何评价奥迪R8？</p>\n<p data-pid=\"2LJxEYNG\">我不确定，但奥迪这种大厂的一致性大概率还是没问题的。</p>\n<p><br></p>\n<p data-pid=\"NyS15PM7\">这台试驾车虽然已经超过13000km，但状态良好。轮胎有损耗，但属于正常磨损没有乱豁，8成新是有的。而且这种四驱的车型，轮胎损耗对圈速的影响远比后驱小。包括我的胎压设定也没有问题，所以我认为不是车况的原因。</p>\n<p><br></p>\n<p data-pid=\"dEDZ07R9\">在写这篇之前，我看了外网几乎所有R8的赛道驾驶车载，以及Sportauto在15年Supertest的原文，然后我觉得大概率这车就是这样了。因为那些车载和我的驾驶感受基本一致，然后我上面说的几个点Supertest也都提到了。</p>\n<p data-pid=\"5LSVpZfW\">【视频4，改款前R8 V10 Plus法国媒体赛道测试】</p>\n<a href=\"https://www.zhihu.com/video/1532780485607948288\">改款前R8 V10 Plus</a><p><br></p>\n<p data-pid=\"h1CpdtLC\">【视频5，改款后后驱版R8法国媒体赛道测试】</p>\n<a href=\"https://www.zhihu.com/video/1532780527899156481\">改款后R8 RWD</a><p><br></p>\n<p data-pid=\"WzM04xN4\">比如在这些车载里，我能通过入弯时驾驶员对方向盘的操作反推出他对车辆的信心。那些视频里R8（相比其他车比如AMG GT R或者991.2 GT3）就是让人战战兢兢如履薄冰，车辆under又over，给人极限很薄的感觉。</p>\n<p><br></p>\n<p data-pid=\"eSvcY45u\">一个人这样操作也许是技术不行，但所有人都呈现这种驾驶风格，那一定是车辆特性所致。</p>\n<p><br></p>\n<p data-pid=\"wx_3KukJ\">然后Supertest原文也提到了比如本身的动态特性出弯有power understeer，还有晚刹车会under无法入弯。</p>\n<p><br></p>\n<p data-pid=\"pHycgkz3\">最逗的是Supertest表示转向角度过大的问题已经比上代车这方面好多了，还说power understeer也被控制在了“可以接受”的范畴。</p>\n<p><br></p>\n<p data-pid=\"RuV-Wvww\">这让我瞬间懂了，第一代的R8得有多烂。然后我去看了一下13年Supertest老R8 V10的纽北刷圈视频，果不其然power understeer和刹车的时候不稳到死。其实这个车载我上学的时候就看过，但是现在才真的懂。</p>\n<p data-pid=\"6sWrlGkb\">【视频6，2013年第一代R8 V10 Supertest纽北刷圈，看前面hatzenbach部分足够了。搞笑的是后面有几个出弯方向都快打到180度了。。。】</p>\n<a href=\"https://www.zhihu.com/video/1532774897722228736\">13年第一代R8 Supertest纽北刷圈</a><p data-pid=\"vAz4CyOK\">这也让我想起了马丁DB11 V12的故事。</p>\n<p><br></p>\n<p data-pid=\"5jWLoj0W\">我开的第一台GT超跑就是DB11 V12，当时觉得噪音太大车太糙。那时候去看英媒观点说“比上代refined（精良）多了”，“是巨大的进步”，我一下懂了上代车是啥德行，也才知道自己看了快10年底英媒有多忽悠。因为我一直靠看他们的内容了解跑车和超跑。</p>\n<p><br></p>\n<p data-pid=\"4F0eVf2-\">然后文章写到这里，我突然回想起了一个细节。我拿到车第一次过减速带，就发现这台R8悬架是“前硬后软”的设定。</p>\n<p><br></p>\n<p data-pid=\"_CFivEr7\">基本上我开过所有的前置后驱跑车，为了在极限达到前后轴平衡，都用的是“前软后硬”的设定。R8这种中置的超跑“照理来说”后轴应该更硬，现在这种设定会让车在稳态上开起来更“转向不足”。</p>\n<p><br></p>\n<p data-pid=\"QGNaM5Sf\">这又让我瞬间想起来一个相关的事。</p>\n<p><br></p>\n<p data-pid=\"8vB8hMLt\">我刷完圈散热的时候，因为注意力不像刷圈都集中在驾驶上无法顾及别的事情，我发现这个车过弯极限很低，感觉过弯速度还没怎么快呢前轮就响胎了。（注3）</p>\n<p><br></p>\n<p data-pid=\"py5i6ETU\">当时下来我还问奥迪车辆管理的agency，说咱这车有没有撞过？感觉极限怎么这么低啊。人家说没有，我们可没撞过。</p>\n<p><br></p>\n<p data-pid=\"u7MD_3Gz\">这一下就和上面提到的赛道极限动态联系上了。因为这种设定有一个特点，就是车辆从0侧向加速度到接近极限时会转向不足（所以过弯速度不快前轴就响胎了），但到了极限之上稳定性反而会降低，后轴容易侧滑出去。（注4）</p>\n<p><br></p>\n<p data-pid=\"8-wv3TRX\">所以这车极限之上的动态表现一部分是重心偏后的“传统超跑”导致，另一部分应该也是悬架设定所致。</p>\n<p><br></p>\n<p data-pid=\"gh_key0O\">可以说R8这种设定照顾的是极限之下的稳定性。虽然极限之下本身就是稳定的，但R8这样就是“稳上加稳”，这也是为什么多数人开这个车会感觉“过于稳定”的原因。而到了极限之上，这种悬架设定加上偏后的重心，赋予了R8“特别传统（特别不稳）”的驾驶感受。</p>\n<p><br></p>\n<p data-pid=\"Z6IIFQK0\">所以说R8不是为赛道设计的还真没错，但这个“不为赛道”不是所谓的“弹簧软”（注6），或者“车重”这种大家传统概念上“更GT”的做法，而是从底盘动态的基础设定上就是完全（甚至过于）照顾代步和新手需求的。</p>\n<p><br></p>\n<p data-pid=\"IGgmK3g8\">我不知道Huracan是不是也是如此，但如果第二代R8确实是用目前小牛的车架来做的，并且也是“前硬后软”，那很有可能两者极限之上的感受是类似的。（前两天看Huracan Tecnica欧洲媒体跑赛道是这样，现在回想起大牛SVJ刷纽北的车载也是这种感觉）</p>\n<p><br></p>\n<p data-pid=\"UEsPpPco\">我还发现一个细节，就是R8的前轮（外径）比后轮“小”，而且小得比较多。前轮是245/30 R20，后轮是305/30 R20，而中置的超跑里只有Huracan也是这样。其他的法拉利迈凯伦玛莎什么的都不是，那些车前轮245/35 R20，后轮305/30 R20，差别没这两台车这么大。所以我很怀疑兰博的这个底子是个什么比较“古老”的构架。（注5）</p>\n<p><br></p>\n<p data-pid=\"soTnsgi-\">当然这个“古老构架”只是我的“揣测”，到底古不古老，到底是不是目前R8动态表现的根本原因，可能中文世界里永远不会有答案了。我能做到的是，试一下Huracan还有其他中置后驱的超跑，看看关了ESP超过极限过弯到底是什么情况。</p>\n<p><br></p>\n<p data-pid=\"vWGqon7D\">我的猜测，Huracan和R8类似，而其他车会有中置特性但不会像R8这么夸张，即为“更现代”的超跑。</p>\n<p><br></p>\n<p data-pid=\"bFgJ4f_U\">4. 在我心目中R8到底算不算超跑？什么是R8的正确购买姿势？</p>\n<p data-pid=\"TJEn5apv\">R8毫无疑问是一台超跑，可问题出在了时间。</p>\n<p><br></p>\n<p data-pid=\"En1-gJqE\">第一代R8的性能是可以和同时代法拉利458 Italia比肩的，包括当时和盖拉多区别也不是那么大。但从14年开始超跑都开始增压，早就难以望对手项背。</p>\n<p><br></p>\n<p data-pid=\"QXy6FIIM\">虽然Huracan有同样的问题，但1.4吨毕竟轻（自吸必须轻），还可以跟上230万入门超跑的性能，然后凭借酷炫的品牌和设计卖个F8和720s的价格。</p>\n<p><br></p>\n<p data-pid=\"kksJBnkU\">反观奥迪，这次我的感受是即使和入门的超跑比，R8 V10也力不从心。甚至我开了好几天，一直都以为这是540匹的基础版，直到后来确认了确实是620匹马力的Performance版。这更说明，R8真的老了。</p>\n<p><br></p>\n<p data-pid=\"9ELegodh\">这让我想起了我本科入学听到第一个讲座。</p>\n<p><br></p>\n<p data-pid=\"C8qTVATI\">那是一个在法拉利工作了一辈子的工程师来给我们这些汽车系新生讲“汽车工业”，其中有一个结论我印象很深：如果你回看汽车行业两三年的技术变化，其实非常有限，但是回看十年前，则变化天很大且不可逆。汽车行业就是以这样一种缓慢但持续的方式在演化。</p>\n<p><br></p>\n<p data-pid=\"O4lWM7Zk\">所以，前有尼桑GT-R打不过保时捷，后有R8也被时代落下，只能说车辆工程是一个对技术进行持久更新要求很高的行业。</p>\n<p><br></p>\n<p data-pid=\"dD7Ow3Wt\">说了这么多，我不是想说R8不好，而是我有机会开出这个车的极限，想记录下来分享给更多人。我的想法其实和之前微博下的一个粉丝留言说的一样，想买一个代步。</p>\n<p><br></p>\n<p data-pid=\"2kvaHrVl\">因为对于日常代步，R8完全就是另一台车，开着真的非常稳定（注7），就是你“想象中”的样子。除了转向比有点偏大，没什么不自然的。</p>\n<p><br></p>\n<p data-pid=\"BNhAAazc\">然后动动手指关了ESP，你又能体验到像996/997世代老保时捷那种特别刺激开着特别容易死人的感觉。集两种分裂的性格于一身，将传统和现代无缝衔接，也只有奥迪R8能做到了。仿佛你开的不是R8，开的是汽车工业百年发展的结晶。（注8）</p>\n<p><br></p>\n<p data-pid=\"bWcQsbBp\">出戏的是，你环顾一下座舱又很舒适现代，空间堪比超跑里的SUV（除了左脚休息踏板奇怪），而且悬架不管是软硬还是车身控制也都是大厂风范品质很在线乘坐很舒适。（注9）</p>\n<p><br></p>\n<p data-pid=\"ErPlnlxR\">唯一的不足是驾驶模式很奥迪不太行（但我可以接受一直M档），而且变速箱代步标定容易让人唏嘘是不是奥迪的人都去搞电动车了，堵车创动且降档慢，坐着容易晕。让pkpk1帮我看了下，19年之后变速箱标定就没有改过了，应该就是中期改款的时候最后标了一版。</p>\n<p><br></p>\n<p data-pid=\"zdW-YHQ3\">说到这儿，对R8感兴趣的朋友买车我建议一定要买中期改款前，因为声浪和齿比。声浪很好理解，改款前还是国5。</p>\n<p><br></p>\n<p data-pid=\"KYYnJPm4\">齿比是我看外网R8车载发现的。19年左右改款前的车齿比都是偏密的（或者说标准更合适），二三档断油车速分别是接近100km/h和150km/h。而改款后的车（这次我试驾的也是），断油车速是接近120km/h和160km/h。</p>\n<p><br></p>\n<p data-pid=\"09lx9HPR\">齿比大概率是个搞笑的事儿，很可能为了满足国6/欧6，然后发现油耗过不了，就简单粗暴把终传比一改完事儿（确实可能就差这么一点儿），而绝大多数情况下中期改款是不会改齿比这种东西的。</p>\n<p><br></p>\n<p data-pid=\"sQtkaDXr\">这个的影响是很明显的。之前咱们讲过，自吸发动机的最大功率本身只是一个点。比如这台5.2 V10，620马力只有到8500rpm才有，7000rpm也只有90%马力，那就是560匹。。。</p>\n<p data-pid=\"zoEwh7OS\">【视频7，改款前R8齿比及发动机功率仪表显示，7000rpm只有90%】</p>\n<a href=\"https://www.zhihu.com/video/1532778981132988416\">改款前R8齿比</a><p><br></p>\n<p data-pid=\"wpwz_J0n\">【视频8，改款后R8齿比仪表显示】</p>\n<a href=\"https://www.zhihu.com/video/1532778241491759104\">改款后R8齿比</a><p data-pid=\"NZSvgc1G\"><br>改款后类似保时捷偏长的齿比完全限制了R8的性能，如果是改款前的车，直线加速和出弯（利用抓地力）都能更好。更重要的是很多人不在极限开不懂，齿比会改变车辆的性格，毫无疑问改款的前密齿比才是R8的完全体。</p>\n<p><br></p>\n<p data-pid=\"mrA6T_MM\">这也是我很难接受改款后R8的很大原因，因为我上学时候的Dreamcar是法拉利458 Italia，而改款前的R8动力（四驱车重但是马力更大）还有齿比都和458接近。</p>\n<p><br></p>\n<p data-pid=\"kR-h_jgi\">要知道车况好的458几乎没有，价格也高。但第二代R8车新（16-19年），车况好价格也给力。虽然跟不上现在的超跑，但搞个有2010年世界顶级超跑性能水准的新车圆下上学时候的梦也行啊！</p>\n<p><br></p>\n<p data-pid=\"_CGdaN8u\">改款后的真的就算了。。。</p>\n<p><br></p>\n<p data-pid=\"YU20IgfJ\">感觉目前想要买的车有些多，GTAm、AMG GT C敞篷、G82、R8 V10 Plus。。。还要努力。。。</p>\n<p><br></p>\n<p data-pid=\"J6guyllR\">说了这么多，相信你已经比世界上99%的车迷了解R8了！我也觉得关于R8我想讲的基本都说清楚了。如果各位看懂的话，希望不吝转发点赞，也不枉我耗费了这么多脑细胞。</p>\n<p><br></p>\n<p data-pid=\"raoxIq88\">我是很欣慰，在现在这个电车横行的时代，抓住最后一个机会基本上搞懂了R8是怎么样的。如果你也像我一样喜欢过奥迪R8，那这篇文章就当做是给我们的青春纪念吧！</p>\n<p><br></p>\n<p data-pid=\"xIOJ-ivd\">-------------------------------</p>\n<p data-pid=\"ceXPn6GM\">注释列表</p>\n<p data-pid=\"NA-TpoOn\">注1：在我看来原厂刷圈四驱+CUP2已经算作弊了，所以那些用CUP2 R刷992 Turbo S的我就呵呵了。</p>\n<p data-pid=\"w1h1HGYk\">注2：fcy反馈，可能是低速弯入弯四驱产生刹车扭矩转向的问题。fsf反馈，老997四驱也是如此。</p>\n<p data-pid=\"5KMmUIuB\">注3：第一个出弯under power是瞬态under，第二个是转向比设定。这个是稳态under。</p>\n<p data-pid=\"prWAdFnc\">注4：之前开过的车里只有一个CT6是这样设定，又是一个烂尾故事。。。</p>\n<p data-pid=\"HDyuwo3d\">注5：“前硬后软”和“古老构架”导致车开起来是这样，这只是我的猜测。我擅长的是动力总成和极限驾驶动态，但关于底盘设计即什么原因导致了这个动态我不专业，只是和身边工程师朋友分析完觉得大概率是这样。</p>\n<p data-pid=\"TWgW7hrq\">注6：弹簧软硬和赛道极限其实没直接关系。</p>\n<p data-pid=\"DWCxP0_S\">注7：可能很多人想象不到也无法接受，这台车的Quattro其实是个电控多片离合器。包括RS3也是非常好，虽然是电控多片离合器但动力分配就像机械quattro。</p>\n<p data-pid=\"QB0x9I_a\">注8：其实这些天讨论这个车，我们一度觉得更早的六七十年代的那些中置跑车是不是开起来也是这个感受？因为真的非常符合逻辑，就是工程折中，用一个人为“偏under保稳定”的设定，让这些大马力的车先“可以开”。这说明每一个你看起来稀松平常的事情，可能都经过了100年发展。不过也有点搞笑，刚玩儿明白就被中国人电动车超越了。。。</p>\n<p data-pid=\"GKQ8G0Gb\">注9：相比之下一些“小厂”（比如AM）虽然底盘不硬但车身控制放了，坐着会头晕。。。</p>\n<p data-pid=\"xV5KKuhh\">-------------------------------</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/sulishibeileye?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">苏黎世贝勒爷</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/31220205/answer/2584243161?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">39 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/297228672?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">奥迪r8在跑车里算什么水平？</a><br><a href=\"http://www.zhihu.com/question/543839610?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">红牛 F1 表示本田引擎已超越雷诺，其差距有多大？</a><br>\n","link":"http://www.zhihu.com/question/31220205/answer/2584243161?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"试播集 08 | 少数派作者们最近读完了啥（上）","date":"2022-07-20 09:30:09","description":"关于栏目不少读者表示希望能够见到更多关于文化与书籍的内容，充实书单、丰富精神。机器人特地邀请了Matrix社区作者们来聊聊自己近期阅读的有意思的书籍。喜欢本栏目的话，欢迎充电或评论文章来表达自己的喜爱 ...<a href=\"https://sspai.com/post/74364\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/74364"},{"title":"奏折 | Nothing Phone (1) 消息汇总、Android 社区的新鲜事等","date":"2022-07-20 08:58:15","description":"本周「奏折」，我们在 Nothing Phone (1) 全面开售前为你汇总全网评测、报道和资讯中值得关注的小细节，以及其它 4 条值得关注的泛 Android 资讯。<p>[......]</p>\n<a href=\"https://sspai.com/prime/story/zouzhe-vol01\" target=\"_blank\">查看全文</a><p>本文为会员文章，出自<a href=\"https://sspai.com/prime/precog/single\" target=\"_blank\">《单篇文章》</a>，订阅后可阅读全文。</p>\n","link":"https://sspai.com/prime/story/zouzhe-vol01"},{"title":"爱人「坐月子」期间，奶爸可以做什么？","date":"2022-07-20 06:59:18","description":"漫长「陪产假」即将结束，但育儿这项伴随我一生的业务才刚刚开始。<a href=\"https://sspai.com/post/74361\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/74361"},{"title":"要在《原神》中造访所有七天神像，最短的路线是什么样的？","date":"2022-07-20 05:47:51","description":"\n<p data-pid=\"0jSbey3W\">这个问题可以归结成旅行商问题（TSP），即「给定一系列城市和每对城市之间的距离，求解访问每一座城市一次并回到起始城市的最短回路」<sup data-text=\"wikipedia, 旅行商问题\" data-url=\"https://zh.wikipedia.org/wiki/旅行推销员问题\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"1\">[1]</sup>。这是个NP-hard的问题，但对于原神的17个神像，要精确求解仍然非常简单。很多软件里都有现成的算法可以用，关键是数据怎么提取。</p>\n<p data-pid=\"XrAbXTr3\">我从<a href=\"http://link.zhihu.com/?target=https%3A//genshin-impact-map.appsample.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">这个网站</a>截了个图。本想看看源代码里有没有神像位置的数据，无奈代码太过繁杂，没有找到数据。所以我直接用图像匹配的方法搞到了数据。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-4a89f1e7316f21729884c64b541d105d_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"390\" data-rawheight=\"484\" data-watermark=\"watermark\" data-original-src=\"v2-4a89f1e7316f21729884c64b541d105d\" data-watermark-src=\"v2-dae9a2c7f826ab84faea96c9562f6e70\" data-private-watermark-src=\"v2-c1b20fc10708f104cd229bea518a9f14\"></p>\n<p data-pid=\"NaLsjnk4\">思路很简单：用神像的图标作为模板，算每个点的相似度。然后找一个阈值，得到黑白的图像：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-5d360f4b97f53412cb7371ca2360e201_720w.jpg?source=b1748391?rss\" data-caption=\"图里的白点就是神像的位置\" data-size=\"normal\" data-rawwidth=\"547\" data-rawheight=\"672\" data-watermark=\"watermark\" data-original-src=\"v2-5d360f4b97f53412cb7371ca2360e201\" data-watermark-src=\"v2-21e6bd95ff7cbb3c4d926ee7d40dce51\" data-private-watermark-src=\"v2-6960b87369b25dd5f19285fb486d2879\"></p>\n<p data-pid=\"8Msn_bA8\">提取所有白色像素的位置，再用K-Means做个聚类，算一下均值，就得到了每个神像的坐标了：</p>\n<p><img src=\"https://pic3.zhimg.com/v2-13333e0331b0ab5ce3dcab3f5ff00c7e_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"540\" data-rawheight=\"528\" data-watermark=\"watermark\" data-original-src=\"v2-13333e0331b0ab5ce3dcab3f5ff00c7e\" data-watermark-src=\"v2-ed7c7fa18faa71f1e03e22699c5901dd\" data-private-watermark-src=\"v2-ece63009868e032f521f0863e4c43b05\"></p>\n<p data-pid=\"GlVgBBqP\">找TSP最短路径倒是非常简单，Mathematica内置了FindShortestTour函数，直接就把结果给出来了：</p>\n<p><img src=\"https://picx.zhimg.com/v2-4a65d1465f47092887057e3d1995c2b5_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"588\" data-rawheight=\"639\" data-watermark=\"watermark\" data-original-src=\"v2-4a65d1465f47092887057e3d1995c2b5\" data-watermark-src=\"v2-5f1be4a54c8497530f20e845b3c2bdfb\" data-private-watermark-src=\"v2-50c0a60cea1cca5f6e558a18a665d04f\"></p>\n<p data-pid=\"-cdnJBZi\">当然，这里还只是个近似。实际情况中，要考虑地形（水、墙、山地等），问题会复杂很多。但大体的路线应该差不了多少。</p>\n<hr>\n<p data-pid=\"P9uUt1_q\">考虑稻妻不能直接走过去，分开算的话是这样的：</p>\n<p><img src=\"https://picx.zhimg.com/v2-4ebfe4a7b23775da1e61ed206abae99f_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"478\" data-rawheight=\"592\" data-watermark=\"watermark\" data-original-src=\"v2-4ebfe4a7b23775da1e61ed206abae99f\" data-watermark-src=\"v2-9a6967e7826e503953c3c19760901a2e\" data-private-watermark-src=\"v2-b3bc86ebfd1a11a080ad3181ce1739f1\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/question/544325397/answer/2583790425?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\">知乎用户（登录查看详情）</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/544325397/answer/2583790425?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">3 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/529155866?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">《原神》中神里绫人圣遗物怎么选择？</a><br><a href=\"http://www.zhihu.com/question/514637515?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">原神深境螺旋什么时候才会开放呢?</a><br>\n","link":"http://www.zhihu.com/question/544325397/answer/2583790425?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"如何花十分钟快速分析一家上市公司？","date":"2022-07-20 04:14:43","description":"\n<p data-pid=\"QbVJV0p5\">根据问题，给出<b>十分钟版本</b>，后附完整的财务报表解读方法。</p>\n<p data-pid=\"vie1Ajdh\">可以想象，你接到临时通知，十分钟后有一个会，你要发言谈某家上市公司；或者临时拜访一家上市公司，只有十分钟时间熟悉资料；或者干脆你想肝一把，计划梳理各行业上市公司情况，好家伙，如果每家看俩小时，A股4800多家上市公司，不吃不喝就要花掉近万小时，或者说不吃不喝417天；而10分钟的话，是48000分钟，合800小时，33天多一点，加上吃喝休息，花两个月左右时间，这件事情就不那么难做，可以对A股上市公司有一个大致概念，作为深度分析和筛选上市公司的基础。</p>\n<p data-pid=\"u7153i9c\">既然要求时间少，我们就看重点，先了解公司性质、股权结构和治理状况，了解公司的治理风格，可以大致推测上市公司可能的管理水平，这样大致花5分钟，然后了解公司业绩、市场表现和风险事项，看公司是否值得继续深入分析和做投资筛选，再花5分钟。当然这是我的习惯，你也可以调整顺序，我们整个分析的目的是发现风险。</p>\n<p data-pid=\"AvKYpSeJ\">当然，我们肯定要借助工具，包括同花顺、东财软件等，查公司情况和业绩等，才可能做到短时间内集中获取公司信息。但因为内容还是非常多，所以我们要去粗取精，有的放矢看资料，就以酒类行业龙头贵州茅台为例。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-786a809e6c19eae8df207ff63aa963f9_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1410\" data-rawheight=\"671\" data-size=\"normal\" data-caption=\"同花顺界面\" data-watermark=\"watermark\" data-original-src=\"v2-786a809e6c19eae8df207ff63aa963f9\" data-watermark-src=\"v2-62cfef82d024c60af835b1b8064d1cc2\" data-private-watermark-src=\"v2-75bf3b980b26443c671e03bfe9ecd420\"></p>\n<h2><b>1、企业性质</b></h2>\n<p data-pid=\"ZezTqLBt\">国有控股、民营控股，还是外资控股，决定公司治理、决策等风格，影响股权激励、资本运作的灵活性，体现经理层经营动力的差异；还影响了公司资源优势、银行信用贷款能力等。</p>\n<p data-pid=\"640eAs-d\">我们看到贵州茅台实控人是贵州省国资委，属于省级国有控股上市公司，所以我们就知道公司要同时遵守国资和证券双重监管要求，国有上市公司特点是内控相对规范，但决策机制灵活性不及民营上市公司，且股权激励也有较多制约性规定，员工和管理层积极性相对不高。</p>\n<p data-pid=\"EUtJBC0J\">但并不是说国控上市公司就比民营上市公司经营差，很多民营上市公司经营不规范，部分对股东分红铁公鸡，对员工薪酬福利和激励也铁公鸡，公司未来发展潜力有限，资金吸引力也较弱。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-90cecffb3bf49a99099b9ea8a3bcb620_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1382\" data-rawheight=\"404\" data-size=\"normal\" data-caption=\"同花顺界面\" data-watermark=\"watermark\" data-original-src=\"v2-90cecffb3bf49a99099b9ea8a3bcb620\" data-watermark-src=\"v2-fb5c4abec23d667dfbb81e2715831e2c\" data-private-watermark-src=\"v2-feb9c55fb94a69163363b9c90ca02139\"></p>\n<h2><b>2、商业模式和客户群</b></h2>\n<p data-pid=\"bAF1lpfQ\">商业模式种类各异，伴随信息互联技术的发展，新生态、升级版的商业模式层出不穷，三谷宏治在《商业模式全史》中梳理总结了盈利模式、销售方法、生产方式、结算·资金流转方式等。</p>\n<p data-pid=\"v6e6ialo\"><b>客户群分为toB、toC还是toG，或是混合。</b>比如贵州茅台是酒类食品行业，是以经销商渠道为主<b>，</b>自营渠道为辅的经营模式，所以他的客户有经销商的B端，也有消费者的C端。</p>\n<p data-pid=\"qFwTUkZ1\">但分析自营和经销商占比要花点数据分析的时间，所以大家可以在深入分析部分做，看历年的变化趋势，分析公司的销售渠道变化情况，这里就知道目前茅台还是经销商渠道占80%左右。</p>\n<h2><b>3、股权结构</b></h2>\n<p data-pid=\"KOIRTHog\">是否有实际控制人和控股股东，以及前十大股东中明星机构投资者多不多，决定公司控制权稳定性和吸引力；如公司无实控人和控股股东，一般会是经理人控制，股权相对分散，如万科，存在外部投资人争夺公司控制权的威胁。</p>\n<p data-pid=\"6yk0O-tc\">当然A股上市公司股权集中为主，分散股权的公司为少数，截至2022年半年度末不足5%，但股权相对集中的上市公司中，也有大量持股不足20%的控股股东，也存在控制权被挑战的风险。</p>\n<p data-pid=\"_W6_2Np5\">而如果股权过度集中，如高达70%以上，公司股份流动量偏低，对市场资金吸引力不足，公司市值表现可能受影响。</p>\n<p data-pid=\"kuWY_Bve\">比如茅台，截至2022年一季度末，国资控股股东“中国贵州茅台酒厂（集团）有限责任公司”占股权比例54%，贵州茅台酒厂（集团）技术开发有限公司2.21%，再加上贵州国资运营公司4.54%，贵州国资占60.75%，如果算是中央汇金、中证金融公司等央级国资投资平台的持股，比例更高，国资股权非常集中，所以一定是浓厚的国资股权和治理管理风格。后面通过董事和经理任命也可以进一步印证。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-9f1f9e8e6db1c2709397bb30db9eac86_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1410\" data-rawheight=\"915\" data-size=\"normal\" data-caption=\"同花顺界图\" data-watermark=\"watermark\" data-original-src=\"v2-9f1f9e8e6db1c2709397bb30db9eac86\" data-watermark-src=\"v2-7df5f915bf4b7cec8ede428eb1d48096\" data-private-watermark-src=\"v2-b3d9bfa459f91cb9d9e3afebe54a5924\"></p>\n<h2><b>4、管理层情况</b></h2>\n<p data-pid=\"VFJefoO1\">无论是股权集中还是分散的上市公司，高管和各级管理核心团队，股权激励等措施非常重要。所以要看公司上市以来股权激励、员工持股计划的的实施频次，还是有项目跟投安排等。如茅台和管理层没有持股，这是国有控股的特点，现在国资委在加大推动国有上市公司的股权激励。</p>\n<p data-pid=\"mHxDRViE\">看到这里，大概花去了5分钟的样子，而你心里大概有这家公司治理结构的基本概念，就是如果控股股东一股独大，实控人兼董事长、总经理，以及家族参与经营管理，那如果企业家能力非常强，那要关注对控制权的监督情况，包括是否有大比例股权质押、和上市公司关联交易和担保等可能损害上市公司利益的风险事项；如果控股股东一股独大，但不参与经营，职业经理人负责经营，那就要激励和监督经理层；如果没有控股股东和实控人，要看经理人是否在公司持股，这家公司要担心控制权争夺和经理人一手遮天的问题。</p>\n<p data-pid=\"2crxXGcq\">关于控制权，你还要看下董事会的构成情况，毕竟控制董事会也是公司控制权的重要形式，比如茅台的董事会构成，9位董事中5位独立董事，外部董事过半，在A股上市公司中要求是1/3以上就可以，当然国资管理的要求，还设立职工董事，但作为内部董事，和执行董事利益是一致的。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-58e4cb999d312b12b924c0a724d72c7d_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1442\" data-rawheight=\"342\" data-size=\"normal\" data-caption=\"同花顺界面\" data-watermark=\"watermark\" data-original-src=\"v2-58e4cb999d312b12b924c0a724d72c7d\" data-watermark-src=\"v2-5b5e04fe76920ef1419e65008985c10b\" data-private-watermark-src=\"v2-f627d77f8fd995d06e46d7c67d720675\"></p>\n<p data-pid=\"Cnhm_Jx6\">然后看管理层非常精简，且财总兼董秘，前者是风险岗位，后者是市场关系岗位，虽然现在很多公司这样配置，节约成本，但职责冲突，财总职责偏保守，董秘要求更开放。当然茅台本身是市场投资者求着他，其他上市公司这样是有一些问题的。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-cb84a326bc5a8883111a99a05cf2651b_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1370\" data-rawheight=\"252\" data-size=\"normal\" data-caption=\"同花顺界面\" data-watermark=\"watermark\" data-original-src=\"v2-cb84a326bc5a8883111a99a05cf2651b\" data-watermark-src=\"v2-9550d06b8dc5ab99fd21c631abde1138\" data-private-watermark-src=\"v2-a36ffabecdf02d7462b5c7be7c7a6839\"></p>\n<h2><b>5、企业规模：资产、营收、利润、市值</b></h2>\n<p data-pid=\"m0agQCYO\">看公司资产、净资产规模、营收和净利润，可看下近5年数据变化，同花顺拉一下。</p>\n<p data-pid=\"ld95mT7u\">比如看公司的资产负债率和偿债比率，茅台经营杠杆率近十年都在35%以下，本身现金流很充裕，而速动比率也能在2左右，最高超过3，不用担心公司资金链断裂。而有些公司速动比率在1以下，很可能发生资金危机，如恒大集团等地产企业，速动比率常年低于1，相对资金风险大。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-e54b538738b94c5ac040fc45a8622b86_720w.jpg?source=b1748391?rss\" data-rawwidth=\"971\" data-rawheight=\"464\" data-size=\"normal\" data-caption=\"同花顺-资产负债率\" data-watermark=\"watermark\" data-original-src=\"v2-e54b538738b94c5ac040fc45a8622b86\" data-watermark-src=\"v2-50996cdc3e80c9f265fc7961921eac15\" data-private-watermark-src=\"v2-fdaa28b0ae4f480ac7df1a622041f4e4\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-e9a688a5d6410c820a0576a635592579_720w.jpg?source=b1748391?rss\" data-rawwidth=\"993\" data-rawheight=\"483\" data-size=\"normal\" data-caption=\"同花顺-速动比率\" data-watermark=\"watermark\" data-original-src=\"v2-e9a688a5d6410c820a0576a635592579\" data-watermark-src=\"v2-890514aeeea967d6c374912af760b9b0\" data-private-watermark-src=\"v2-a9980f47928a5bc4e910c9c297c4823e\"></p>\n<p data-pid=\"5KX0jBa7\">比如营收里面茅台酒占绝对的比重，且境内为主，近五年数据非常稳定；同时，境内为主也说明茅台品牌国际化还有很大空间，也是国内白酒企业的共同发展课题。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-a946fd29812ba83c7d0341e74fa89cf0_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1590\" data-rawheight=\"457\" data-size=\"normal\" data-caption=\"同花顺界面\" data-watermark=\"watermark\" data-original-src=\"v2-a946fd29812ba83c7d0341e74fa89cf0\" data-watermark-src=\"v2-9855acf840494ec9f5675480fb1c3075\" data-private-watermark-src=\"v2-a7cb49fec19f5002e565b62830109914\"></p>\n<p><img src=\"https://picx.zhimg.com/v2-1c35707b8759a5812bb10c5f41ce71b4_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1594\" data-rawheight=\"410\" data-size=\"normal\" data-caption=\"同花顺界面\" data-watermark=\"watermark\" data-original-src=\"v2-1c35707b8759a5812bb10c5f41ce71b4\" data-watermark-src=\"v2-f47879b406c427a896b975ad2b49123e\" data-private-watermark-src=\"v2-e342217016897fb3cc5d51de182c11fc\"></p>\n<p data-pid=\"wRWXsAXw\">再看公司市值水平和市盈率，当然需要提前对A股市场市值区间有个总体了解，判断市场对公司的看法。当然茅台作为万亿市值，傲视A股市场。下图中最右侧的顶点是茅台的市值2.45万亿元（截至2022年7月15日收盘），比第二名工商银行整整多出1万亿元。</p>\n<p data-pid=\"A3KjYrFX\">另外，市值集中较高的区间非常少，在下图右侧，50亿元市值以下的有2278家上市公司，占比47%，而100亿元市值以下的有3365家上市公司，占比70%。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-7727eadd25c03b029e199bb6b6e571f7_720w.jpg?source=b1748391?rss\" data-rawwidth=\"837\" data-rawheight=\"452\" data-size=\"normal\" data-caption=\"根据同花顺编辑\" data-watermark=\"watermark\" data-original-src=\"v2-7727eadd25c03b029e199bb6b6e571f7\" data-watermark-src=\"v2-5efdb265039c54d88aface34170084d0\" data-private-watermark-src=\"v2-4cae1575614c8b88ecd866a2a4716286\"></p>\n<p data-pid=\"qARpLyLu\">对于公司市场表现，还可有个取巧的办法，就是看覆盖公司的券商研报情况，有的上市公司多少年才一份研报，没券商机构写公司，市场关注度非常低，市值自然也高不了。</p>\n<p><img src=\"https://pica.zhimg.com/v2-ee2b8ae792c26a1eb5be04ec50b340c2_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1230\" data-rawheight=\"538\" data-size=\"normal\" data-caption=\"同花顺界面\" data-watermark=\"watermark\" data-original-src=\"v2-ee2b8ae792c26a1eb5be04ec50b340c2\" data-watermark-src=\"v2-0236ba5c27338dbff32fe1993871d026\" data-private-watermark-src=\"v2-c7e172d0ac21ed0805445edce4aef148\"></p>\n<h2><b>6、公司分红回报和融资水平</b></h2>\n<p data-pid=\"dv2fzzFX\">看公司的历年现金分红比例，现在也可以看下整个市场的TSR（投资者回报）水平，即<b>TSR=(期末股价-期初股价+股息）÷期初股价</b>，反映公司对股东投资的吸引力。</p>\n<p><img src=\"https://picx.zhimg.com/v2-0b6c7c0651075980589c1fb963d86869_720w.jpg?source=b1748391?rss\" data-rawwidth=\"900\" data-rawheight=\"452\" data-size=\"normal\" data-caption=\"根据同花顺编辑\" data-watermark=\"watermark\" data-original-src=\"v2-0b6c7c0651075980589c1fb963d86869\" data-watermark-src=\"v2-c02545fe2d6169171c6197e90e6f214c\" data-private-watermark-src=\"v2-c2e87332b8e7e284a1adbcde5aa071eb\"></p>\n<p data-pid=\"W5XGXbqr\">如茅台现金分红水平行业对比如下，在行业里分的是真多，而2021年度现金分红率为51.9%，比例很高，但要注意因为国有控股股东持股比例高，现金分红过半也是分给了控股股东。而计算出2021年度公司TSR为3.69%，在上图显示的A股市TSR分布中，其实处于中位，并不高。</p>\n<p data-pid=\"Glk1ZTNn\">另外贵茅上市后无股权类再融资，没有继续向市场吸金，对比不断的分红，还是比较良心的。一些上市公司，分红不分或比例不达标（一般要求达到年度归母净利润的30%以上），融资风生水起，产业做的好还行，股价可以体现，如果融资后产业建设和运营也不行，股价低迷，公司的长期投资价值真就不高。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-c59fbe3f288d8cfb020a4f25a53e5a0a_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1410\" data-rawheight=\"969\" data-size=\"normal\" data-caption=\"同花顺界面\" data-watermark=\"watermark\" data-original-src=\"v2-c59fbe3f288d8cfb020a4f25a53e5a0a\" data-watermark-src=\"v2-de1280a39e4ca05fe1379243c015310a\" data-private-watermark-src=\"v2-3a845cf24b10da79dbe9947a2709a149\"></p>\n<h2><b>7、舆情、处罚和风险事项</b></h2>\n<p data-pid=\"7iO4ZnJa\">通过搜公告关键字和网络平台，看近期热点和是否有风险事项。比如搜索贵州茅台，从新闻标题看茅台今年以来，推动i茅台app等线上渠道布局，目前服务上可能有些问题，而近期茅台的集团公司将旗下习酒独立剥离给贵州国资持有，解决同业竞争问题。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-153d01110cf837fe9746644070d2ce64_720w.jpg?source=b1748391?rss\" data-rawwidth=\"990\" data-rawheight=\"417\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-153d01110cf837fe9746644070d2ce64\" data-watermark-src=\"v2-0bf3d07500627718347c9019e3bc1984\" data-private-watermark-src=\"v2-2e90251412aea25f49b4bbaad6b360d9\"></p>\n<p data-pid=\"Hzwveimv\">而贵茅经营数据的公布，可以看到最近的经营态势，以及公司的市场地位，当然举例看贵州茅台，本身知名度非常高，对于一般的上市公司，我们都是可以这样去查找，看新闻标题捕捉信息，对于特别感兴趣的内容，点进去大致浏览一下关键信息。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-435f15aea81279e2ca0339f876a583ab_720w.jpg?source=b1748391?rss\" data-rawwidth=\"970\" data-rawheight=\"403\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-435f15aea81279e2ca0339f876a583ab\" data-watermark-src=\"v2-1e56b9ed35c6c380ce58fbea98b4cbd5\" data-private-watermark-src=\"v2-a0a8914796ca4799c2b1cc89481536f0\"></p>\n<p data-pid=\"xmDfDx9E\">又比如看诉讼、立案等事项，显示茅台没有，这方面风险就暂时还不用担心。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-fcb94c5173777d46e0619897eaea51ca_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1319\" data-rawheight=\"400\" data-size=\"normal\" data-caption=\"同花顺界面\" data-watermark=\"watermark\" data-original-src=\"v2-fcb94c5173777d46e0619897eaea51ca\" data-watermark-src=\"v2-bcd5b0cfa3ae093a1fbf0e8f91dabac7\" data-private-watermark-src=\"v2-cc0b98085384e95d5754f71bedd813c9\"></p>\n<p data-pid=\"to3SqNqz\">看完这些，其实对于一家上市公司基本信息、治理风格、业绩和市场表现、风险事项就有了基本的认识，知道了这家公司是大规模、小规模，国有的还是民营的，治理保守还是现代经营风格，业绩有没有大的风险等。</p>\n<p data-pid=\"6L4Bvuyp\">所谓10分钟也是模糊的提法，精髓还是在尽量短的时间掌握公司核心信息，随着使用知识和工具越来越熟练，所花的时间也会越来越少，可以尽可能多覆盖一些公司的基本情况。</p>\n<hr>\n<h2><b>附：上市公司财报分析流程</b></h2>\n<p data-pid=\"Pq_wEYoZ\">有上面分析的基础，后续筛选感兴趣的上市公司，深入分析的话，还可以看公司的并购重组情况，对产业布局的规划，ESG表现和评价，董事会和管理层的人员安排，职业经理人的占比，在行业中的地位（对比同行业上市公司的相关信息和业绩指标）等，特别是对于上市公司定期财报的详细分析。</p>\n<p data-pid=\"KoG0SWzx\"><b>一、四张表解读</b></p>\n<p data-pid=\"99rtbxLy\">财报是了解上市公司年度财务状况和经营成果的综合性资料，需要有重点、历史延续性的阅读和研究，善于读年报及其中的财报对于正确判断一家上市公司财务健康状况和经营情况至关重要。</p>\n<p data-pid=\"KX2QIpgD\"><b>（一）报表关注点</b></p>\n<p data-pid=\"RQrKEH10\">对于四张财务报表，最重要的是“资产负债表、利润表和<a href=\"https://www.zhihu.com/search?q=%E7%8E%B0%E9%87%91%E6%B5%81%E9%87%8F%E8%A1%A8&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2527846948%7D\" class=\"internal\">现金流量表</a>”三张表，所有者权益变动表可以作为辅助阅读。关注三张表的重要立足点，就是看有无异常项目，同比大幅增长或下降，要找到原因，很多时候“事有反常必为妖”。</p>\n<p data-pid=\"-0kBojw6\"><b>资产负债表</b>反映企业报告期末的财务状况，一定要从“钱的来源”和“钱的去处”两个方向来看，表的右边为钱的来源，包括下半部来源于股东的钱，和上半部来源于债主的钱，左边则是钱的去处，是存在银行，还是用于生产成为存货和商品，还是支付了货款或对外投资了，都一一体现。</p>\n<p data-pid=\"xkZ0qtV4\"><b>利润表</b>也叫“损益表”，反映企业报告期的经营成果，是大家最喜欢看的，炒股的人盯着净利润不放，但其实这里是最容易造假的，即使没有造假也得能看出利润的质量究竟如何。这里要理解造假的根源是<a href=\"https://www.zhihu.com/search?q=%E6%9D%83%E8%B4%A3%E5%8F%91%E7%94%9F%E5%88%B6&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2527846948%7D\" class=\"internal\">权责发生制</a>，将没有收到的钱算作收入，没付出的钱记录为成本，或者收到的钱不算收入，付出去的钱不记录为成本，这些主要通过摊销和财务入账时点的选择进行调整，会计政策不同结果天壤之别。一个简化的小例子，小明每月生活开支1.5万元，工资收入3万元，于下月初领取，如果是<a href=\"https://www.zhihu.com/search?q=%E6%94%B6%E4%BB%98%E5%AE%9E%E7%8E%B0%E5%88%B6&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2527846948%7D\" class=\"internal\">收付实现制</a>，则当月小明现金流出1.5万元，没有收入，亏损，而按照权责发生制，当月算工资收入3万元，减去开支1.5万元，还净挣1.5万元，在不考虑税费的前提下，当月盈亏情况相反，金额相差3万元。但要注意的是，无论采取哪种记账方式，当月没有体现的，后面月份还是会反映出来，所以利润造假的难度或说风险在于后面如何填这个窟窿。还有营业利润是一家公司的核心利润，是持续竞争力的体现，这里最好把投资收益和资产减值损失等减去后看，并特别关注历史数据、同行业数据情况。</p>\n<p data-pid=\"TVBW07iE\"><b>现金流量表</b>记录公司现金流入和流出，反映企业资金筹措和控制能力，其期初和期末现金及现金等价物余额是实际有账目的数据（包括在银行有记录），比较难造假，所以现金流量表是要特别关注的，期末现金及现金等价物余额与利润表中净利润的对比也是重点，如果利润比现金数据高很多，存在造假或至少收款能力不足，存在较大风险。这里有一个看现金流量表的技巧，即关注“经营活动现金流净额、投资活动现金流净额、筹资活动现金流净额”三者的正负情况，如下表：</p>\n<p><img src=\"https://pica.zhimg.com/v2-2f5c8c16e8bd7ca5eebd06b2c213e5af_720w.jpg?source=b1748391?rss\" data-rawwidth=\"864\" data-rawheight=\"276\" data-size=\"normal\" data-caption=\"来源：唐朝《手把手教你读财报》\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"2Huy3_xh\">上表中奶牛型是最佳的，经营现金流可以覆盖投资和融资需求，但需要可持续性，没有持续性就需要加大对外融资，成为蛮牛型，而蛮牛型经营现金流净额为正，正常在投资，然后筹资情况为正，说明信用良好，是一家还算良性经营的公司，但需要支付更多融资费用，要关注资金安全。往往容易误解的是类型1，称为妖精型，其实这个类型公司经营有收入，但投资在回收资金，没有继续扩大生产，同时还在借债，公司积累了很多钱，可能未来准备对内对外大举投入新的方向，也可能将收集的资金转移给利益方，不再用于生产经营，必须特别注意。另外，对一家公司按上述表格分析，不能只着眼于一年，而要长期跟踪才能判断。</p>\n<p data-pid=\"IVGweuuf\"><b>（二）三张表之间的联系</b></p>\n<p data-pid=\"HO1BcT0t\">这里先说一下，三张表不是割裂的，数据之间可相互关联印证。</p>\n<p data-pid=\"AzBAGTg8\"><b>1、利润表和资产负债表</b></p>\n<p data-pid=\"QiKCfcir\">利润表的净利润=资产负债表“期末盈余公积+期末未分配利润-期初盈余公积-期初未分配利润+期内实施的分红”，也就是说当年净利润最终增加了企业净资产中的留存收益，包括<a href=\"https://www.zhihu.com/search?q=%E7%9B%88%E4%BD%99%E5%85%AC%E7%A7%AF&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2527846948%7D\" class=\"internal\">盈余公积</a>和未分配利润。</p>\n<p data-pid=\"hng2Cnmj\">资产=负债+所有制权益+收入-费用，由这个公式可以知道，如果上市公司想虚增利润，也就是要虚增资产，或虚减负债，由于负债虚减涉及债权人的配合，比较难，所以一般上市公司操纵利润都与资产有关。</p>\n<p data-pid=\"0G8XosY4\"><b>2、现金流量表和利润表、资产负债表</b></p>\n<p data-pid=\"3L7YN1Tl\">企业的支出，如果是用于一年内计入利润表，作为当期费用，使用超过一年则计入资产负债表，作为资产。得出的有趣结论是：<b>资产和费用都是支出，资产是长效支出，费用是短效支出</b>。</p>\n<p data-pid=\"dmvGqppL\">而企业的进账，无论是借债、资产还是营业收入，都会被计入现金流量表，成为流入资金，再通过支出变成资产和费用。</p>\n<p data-pid=\"IJSjGO9T\">所以，资产负债表的负债和权益，通过现金流量表，转化为资产负债表的资产或利润表的费用。</p>\n<p data-pid=\"Vx7-Pwv6\">此外，现金流量表中，除了现金及现金等价物期初和期末余额，其余项目是根据利润表和资产负债表推导出来的，展示资产负债表货币资金科目里“现金及现金等价物”的变化过程，可以印证两张表，但通过现金流量表去证伪两张表是不靠谱的。</p>\n<p data-pid=\"dN5cHZXc\">3、<b>利润表和现金流量表、资产负债表</b></p>\n<p data-pid=\"O9bTE21s\">利润表上激励的每一笔收入，可产生现金或应收款，对应到现金流量表和资产负债表；而更进一步的联系是：营业收入（利润表）*<a href=\"https://www.zhihu.com/search?q=%E5%A2%9E%E5%80%BC%E7%A8%8E&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2527846948%7D\" class=\"internal\">增值税</a>率<b>≈</b>销售商品、提供劳务收到的现金（现金流量表）+应收账款、应收票据增加额（资产负债表），也就是说利润表中是不含增值税的，转换到现金流量表中要加上增值税。（增值税率自2019年税改后，上限由17%下调为13%，不同行业适用13%、9%、6%等不同档）</p>\n<p data-pid=\"Ni2_UoJl\"><b>二、识别财报操纵</b></p>\n<p data-pid=\"40JM1VBG\">这里还是看到会计恒等式“资产=负债+所有制权益+收入-费用”，操纵利润无非就是操纵收入和费用，并引起资产和负债的变化，而美化现金流量表则主要是调整经营活动现金流。</p>\n<p data-pid=\"dnTcssQg\"><b>1、操纵收入</b></p>\n<p data-pid=\"Yz90H6JN\">手法有虚构收入、借助一次性行为夸大收入和提前确认收入。虚构收入，就是做一些虚假交易、虚增成交金额，将非营利性交易确认为收入、显失公平的关联交易等。借助一次性行为夸大收入，比如把出售业务部门或资产所得转化为营业收入，或将亏损打包进一个公司或部门，然后出售掉以掩盖亏损等。提前确认收入，是对还未开始提供产品或服务的收入进行确认，在买家没有明确承认承担付款义务时确认收入，以及确认超过完工百分比对应的收入（因为工程建设或设备组装生产进度的主观操作空间大）。</p>\n<p data-pid=\"I--3Pwdo\"><b>2、操纵费用</b></p>\n<p data-pid=\"W5pmN7LH\">核心就是虚减和虚增费用。虚减费用，就是将本期费用推迟、掩盖成本（比如存货贬值不计提减值，特别留意生鲜、科技类产品企业，存货贬值快，而酒类等不容易贬值）或亏损，达到提升当期利润的目的；而虚增费用俗称“洗大澡”，比如注销资产或存货、大额计提减值损失、将经常性费用归入一次性费用计提等，这种操作把当年度的费用提足，一次亏个够，为来年利润向好作铺垫。</p>\n<p data-pid=\"GSxhKHR-\">举个例子，公司采购员去财务支取备用金用于采购付款，采购付款后收到对方发票，拿来交给公司财务，但是财务锁在抽屉里先不入账，或干脆采购自己把发票先捂着，这样财报里面这笔钱还是“应收账款-某某支取备用金”，还是资产。如果入账则转为采购成本了，就减少了当期利润。</p>\n<p data-pid=\"yoOyEUI2\"><b>3、操纵现金流</b></p>\n<p data-pid=\"efw0Aj9A\"><b>（1）增加经营活动现金流入</b></p>\n<p data-pid=\"MHYtvAW9\">将投资或筹资活动的现金流入，转化为经营活动现金流入，比如收购一家公司，获得收购对象的经营性现金流入，特别是收购完成前，有意让收购对象付清应付款并让客户暂缓付款，形成应收账款。等收购完成后，买来的公司应收账款再收回，就能变成经营活动现金流入了。</p>\n<p data-pid=\"nh7RPuEQ\"><b>（2）减少经营活动现金流出</b></p>\n<p data-pid=\"OswbavfX\">将某些经营活动现金流出转化为投资或筹资活动现金流出，比如购买电影电视节目版权、租入网络带宽，就可能被操作归入投资活动现金支出。</p>\n<p data-pid=\"9u43ezEJ\"><b>（3）一次性行为美化经营活动现金流净额</b></p>\n<p data-pid=\"qVY0lEm5\">比如通过银行保理业务打折出售应收款，给出高额折扣刺激客户提前付掉应收账款，或拖欠供货商货款、减少正常采购等，以增加当期经营活动现金流量净额。</p>\n<p data-pid=\"_UlEToVT\"><b>4、其他操纵</b><br>手法其实还有很多，比如公司操纵利润表，当年大量计提坏账准备（公司自己认定是坏账），降低了本期利润，下期坏账收回了，利润大幅增长，这种也特别被一些公司用于实现两年亏损、一年盈利，以规避ST的目的，但其实一直在亏损，只是某一年或两年亏的大，分摊了盈利那一年的亏损金额。此外，还要特别留意公司突然改变会计政策的情形，可能是遇到经营的问题，或意图发挥财技搞事，比如计提减值准备的标准，突然紧了，可能就是想今年要少提减值，增加利润，突然松了，可能想“洗大澡”，一次亏个够。<br>还有比如公司想提高毛利率，加大生产，特别是制造企业生产上固定成本比较大的，生产产品越多（当期没有销售出去）形成越多存货，固定成本摊销至单位存货上的成本就降低了，从而提升毛利率，虚增当期利润。<br>再比如生物资产也是造假高发区，即资产负债表中的“生产性生物资产”，农林牧渔业，生物科技领域，牛养鸡、虾鱼贝等，指着鱼塘告诉会计师下面多少多少，也只能听；今年公告说疫情严重，库存鸡要提减值，明年说我们控制的好，疫情没有让我们的鸡死多少，堂而皇之的调节减值，操控利润。而农林牧渔业通常有税收减免，及时增加存货带来的税收增加也比其它行业少的多，造假成本低也是一个原因。科技行业也是如此，对技术的评估难，产品个性化程度高，由于发展更新快，可比标准难以获取，都为造假提供了空间。<br><br>上面谈到的这些手法通常需要供应商、合作伙伴、大股东同台作弊，风险较大，还有就是增加生产这个例子，会同时大量增加存货和税收，代价不小，有经验的也会识破。但由于利益驱使，总不缺胆大的敢铤而走险，风险再大也照样飞蛾扑火。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/ouyanglijian?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">岑斌</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/543193716/answer/2577426309?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">21 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/522670649?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">龙辉金融有经验不？可以在这家配资么？</a><br><a href=\"http://www.zhihu.com/question/523899375?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">想背靠一家网红娱乐公司，众海世纪在业内口碑怎么样？有知道的么？</a><br>\n","link":"http://www.zhihu.com/question/543193716/answer/2577426309?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"第一时间用上 Windows 11 新功能，尝鲜用户必备小工具：ViVeTool","date":"2022-07-20 03:30:00","description":"对于喜欢尝鲜的 Windows 测试者来说，如果新功能无法体验到就失去了测试新功能的乐趣。但我们可以通过这个工具，直接打开测试版的隐藏功能。<a href=\"https://sspai.com/post/74286\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/74286"},{"title":"【塔山之石】塔勒布比特币黑皮书","date":"2022-07-20 02:56:41","description":"\n<p data-pid=\"XT4isA_Z\"><a href=\"https://zhuanlan.zhihu.com/p/542660432/edit\" class=\"internal\">上一篇</a> 的链接，肝脆一起做出来了放在一起完整的。我个人的看法和评论以后再写，就原文和翻译完整的整在一篇里，免得翻来翻去。</p>\n<hr>\n<h2>Bitcoin, Currencies, and Fragility</h2>\n<h2>比特币，货币及其脆弱性</h2>\n<p data-pid=\"NJjLcTca\">A technology should be judged in how it solves recognized problems, not by its technical appeal.</p>\n<p data-pid=\"05mVWEeB\">一种技术的价值应该取决于它解决特定问题的作用，而不是它的技术有多厉害。</p>\n<h3>INTRODUCTION/ABSTRACT</h3>\n<h3>综述</h3>\n<p data-pid=\"gUqjB-Pk\">This discussion applies quantitative finance methods and economic arguments to cryptocurrencies in general and bitcoin in particular —as there are about 10, 000 cryptocurrencies, we focus (unless otherwise specified) on the most discussed crypto of those that claim to hew to the original protocol [1] and the one with, by far, the largest market capitalization.</p>\n<p data-pid=\"61fpNBBz\">本文将把量化金融的办法和经济学方法应用于加密货币，特别是比特币——由于加密货币约有10000种，我们将重点（除非另有说明）关注最被广泛讨论的，最创世的第一种加密货币[1]，也是市值最大的一种加密货币。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"QAcTlb7q\">In its current version, in spite of the hype, bitcoin failed to satisfy the notion of \"currency without government\" (it proved to not even be a currency at all), can be neither a short nor long term store of value (its expected value is no higher than 0), cannot operate as a reliable inflation hedge, and, worst of all, does not constitute, not even remotely, a safe haven for one’s investments, a shield against government tyranny, or a tail protection vehicle for catastrophic episodes.</p>\n<p data-pid=\"m47JMyhm\">就当下而言，尽管不断有人大肆鼓吹，但比特币也并未能实现「无需政府的货币」的构想（事实证明，比特币甚至算不上是一种货币），既不能作为短期或长期的价值储存（其价值甚至不比0高），也不能作为可靠的通胀对冲工具。最糟糕的是，长期来看比特币也没办法用来对抗货币当局的滥发，也不能为灾难性的尾部事件充当对冲保护的工具。</p>\n<p data-pid=\"15iKK7H5\">（*）尾部事件是指发生概率很小的，在分布函数尾部的事件，非常不常见的黑天鹅事件。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"AkMrTJl_\">Furthermore, bitcoin promoters appear to conflate the success of a payment mechanism (as a decentralized mode of exchange), which so far has failed, with the speculative variations in the price of a zero-sum maximally fragile asset with massive negative externalities</p>\n<p data-pid=\"TP_y8GV7\">另外，比特币的推广者们似乎想要融合投机属性和支付机制（一种去中心化的交易方式），尽管把比特币做为支付工具已经失败了，依然试图调和比特币支付属性和零和博弈的投机属性。而这个用于零和投机游戏的脆弱资产，带来了巨大的负外部性。</p>\n<p data-pid=\"3RQ_q2zp\">（*）负外部性是经济学术语，可以粗略的理解为对社会有害</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-3d9041b0ec70cadf3243376d78f5fae2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"548\" data-rawheight=\"820\" class=\"origin_image zh-lightbox-thumb\" width=\"548\" data-original=\"https://pic3.zhimg.com/v2-3d9041b0ec70cadf3243376d78f5fae2_r.jpg\"></figure><p data-pid=\"Qpz26c-f\">（*）该图是比特币价格波动率的一个统计，波动率通常是描述资产价格不稳定性的指标，是用价格变化的方差来刻画的。波动率大意味着作为支付工具是不可能的。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"rla9YJuo\">Going through monetary history, we show how a true numeraire must be one of minimum variance with respect to an arbitrary basket of goods and services, how gold and silver lost their inflation hedge status during the Hunt brothers squeeze in the late 1970s and what would be required from a true inflation hedged store of value.</p>\n<p data-pid=\"IMRyK7x5\">纵观货币历史，我们展示了一个真正的基准货币，应该对任意一篮子商品和服务满足最小方差。以及黄金和白银如何在1970年代后期亨特兄弟的操纵案后失去了通胀对冲地位，以及如何能真正对冲通胀，保持价值。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>THE BLOCKCHAIN</h3>\n<h3>区块链</h3>\n<p data-pid=\"cTPjzPVv\">First, let us consider what cryptocurrencies do by examining the notion of blockchain and its intellectual and mathematical appeal.</p>\n<p data-pid=\"Hvqs7Uzh\">首先，我们来研究一下加密数字货币用来验证的概念，区块链它背后的机制和数学方法。</p>\n<p data-pid=\"6RqgAyb3\">（*）关于比特币原理的简介，网上有很多，这里说的实在是不够清晰，<b>强烈推荐</b> <a href=\"https://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV11x411i72w%3Fspm_id_from%3D333.337.search-card.all.click\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">3blue1brown 比特币原理简介</a>；了解了比特币的原理后关于原理部分的描述可以扫一眼跳着看<br></p>\n<p data-pid=\"65VNKh2H\">The concept behind such a chain is quite intuitive to early practitioners of quantitative finance. Consider that before efficient software for Monte Carlo simulations became widely available, some of us were using methods to generate pseudorandom variables via some forms of chained nonlinear transformations, in the spirit of Von Neumann’s original idea [2]. </p>\n<p data-pid=\"Hlt54Edh\">对于链背后的概念，对于早期量化金融的参与者们来说都是老熟人了。在蒙特卡洛模拟软件被普及之前，我们经常用链式非线性变换的方法来生成一个伪随机变量，这个也是冯诺依曼最初想法的精神[文献2]。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"5tH_9gm_\">Indexing sequences by <img src=\"https://www.zhihu.com/equation?tex=t+%3D+1%2C+2%2C+.+.+.+n\" alt=\"t = 1, 2, . . . n\" eeimg=\"1\"> , with a seed at <img src=\"https://www.zhihu.com/equation?tex=t\" alt=\"t\" eeimg=\"1\"> , a variable  <img src=\"https://www.zhihu.com/equation?tex=x_%7Bt%7D\" alt=\"x_{t}\" eeimg=\"1\">  on the real line generates via nonlinear transformations <img src=\"https://www.zhihu.com/equation?tex=r+%3A+R+%E2%86%92+R\" alt=\"r : R → R\" eeimg=\"1\"> , an output variable <img src=\"https://www.zhihu.com/equation?tex=r%28x_%7Bt%7D%29\" alt=\"r(x_{t})\" eeimg=\"1\"> . This output variable can serve as a pseudorandom seed to generate another pseudorandom variable, <img src=\"https://www.zhihu.com/equation?tex=r%28x_%7Bt%2B1%7D%29\" alt=\"r(x_{t+1})\" eeimg=\"1\"> . For all <img src=\"https://www.zhihu.com/equation?tex=t\" alt=\"t\" eeimg=\"1\"> , knowledge of  <img src=\"https://www.zhihu.com/equation?tex=r%28X_%7Bt%7D%29\" alt=\"r(X_{t})\" eeimg=\"1\">  allows knowledge of all subsequent variables  <img src=\"https://www.zhihu.com/equation?tex=+r%28x_%7Bt%7D+%29_%7B%CF%84%3Et%7D+\" alt=\" r(x_{t} )_{τ&gt;t} \" eeimg=\"1\"> and replication of the entire sequence, thus probabilistically mimicking the arrow of time. It is also crucial that the same seed produces exactly the same pseudorandom variable, allowing verification of sequence, but disallowing easy reverse engineering.</p>\n<p data-pid=\"z5ONkC5D\">（*）如果你看着头晕，确保你知道哈希函数是什么的情况下可以跳过，如果还不知道，但能看点简单的代码，推荐参考 <a href=\"https://zhuanlan.zhihu.com/p/28818841\" class=\"internal\">关于哈希算法</a></p>\n<p data-pid=\"Fvv3U-iM\">一个有序的序列 <img src=\"https://www.zhihu.com/equation?tex=t+%3D+1%2C+2%2C+.+.+.+n\" alt=\"t = 1, 2, . . . n\" eeimg=\"1\"> 上取一个种子  <img src=\"https://www.zhihu.com/equation?tex=t\" alt=\"t\" eeimg=\"1\"> ，一个变量  <img src=\"https://www.zhihu.com/equation?tex=x_%7Bt%7D\" alt=\"x_{t}\" eeimg=\"1\">  在实数轴上做一个非线性的变化 <img src=\"https://www.zhihu.com/equation?tex=r+%3A+R+%E2%86%92+R\" alt=\"r : R → R\" eeimg=\"1\"> , 生成一个输出变量 <img src=\"https://www.zhihu.com/equation?tex=r%28x_%7Bt%7D%29\" alt=\"r(x_{t})\" eeimg=\"1\"> .这个输出的变量可以用来作为一个伪随机种子来生成另外一个伪随机变量 <img src=\"https://www.zhihu.com/equation?tex=r%28x_%7Bt%2B1%7D%29\" alt=\"r(x_{t+1})\" eeimg=\"1\"> .</p>\n<p data-pid=\"qcASNwfc\"> 对于所有 <img src=\"https://www.zhihu.com/equation?tex=t\" alt=\"t\" eeimg=\"1\"> , 已知的 <img src=\"https://www.zhihu.com/equation?tex=r%28X_%7Bt%7D%29\" alt=\"r(X_{t})\" eeimg=\"1\">  可以推导出后续的变量  <img src=\"https://www.zhihu.com/equation?tex=+r%28x_%7Bt%7D+%29_%7B%CF%84%3Et%7D+\" alt=\" r(x_{t} )_{τ&gt;t} \" eeimg=\"1\"> 以推导出整个序列，从而构造出一个时间上的箭头来。至关重要的是，同样的种子能产生完全相同的伪随机变量，是便于验证的，但没法进行逆向工程。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"olb_0uHh\">What the blockchain added, thanks to the hash function, is the condition that <img src=\"https://www.zhihu.com/equation?tex=r%28.%29\" alt=\"r(.)\" eeimg=\"1\"> must be functionally and probabilistically bijective: no two seeds should produce the same output (or should produce a vanishingly low probability of that happening), what, in computer science terminology, is called collision.</p>\n<p data-pid=\"vMzTvMzV\">感谢哈希函数的特性，区块链增加了一个特性，在 <img src=\"https://www.zhihu.com/equation?tex=r%28.%29\" alt=\"r(.)\" eeimg=\"1\"> 在功能和概率上都必须满足双射（bijective）的条件下：没有两个不同的种子能产生一个相同的结果（或者在概率上几乎不可能），在计算机科学的术语里，这种情况成为冲突（collision）。</p>\n<p data-pid=\"T_cDScow\">（*）如果你知道哈希函数是啥，可以直接跳过。不知道的再看一遍 <a href=\"https://zhuanlan.zhihu.com/p/28818841\" class=\"internal\">关于哈希算法</a></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"Ddd5uGyR\">This hard-wired attribute and absence of supervision of the blockchain allow the storage of activities on a public ledger to facilitate peer-to-peer commerce, transactions, and settlements. The blockchain concept also allows for serial record keeping. This is supposed to help create what the original white paper [1] described as: </p>\n<blockquote data-pid=\"4Z7rMPzP\">A purely peer-to-peer version of electronic cash would allow online payments to be sent directly from one party to another without going through a financial institution.</blockquote>\n<p data-pid=\"o1PqoaEO\">因为这个哈希函数的固有性质和监管的缺失区块链技术能让大量的活动记录在一个公共的账本上，使得一个纯「点对点」的网络能记录商业活动，支付和清算。区块链的概念还能对连续的记录做到不可篡改的保存。这些性质为了实现中本聪白皮书描绘的目标：</p>\n<blockquote data-pid=\"gO7jf0oH\">一个纯的点对点版本的电子现金，可以让在线支付从一方直接支付到另外一方，而不依赖任何中间金融机构</blockquote>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"kgMO_3OB\">From that paper, bitcoin makes use of three existing technologies: 1) the hash function, 2) the Merkle tree (to chain blocks of transactions tagged by the hash function), and 3) the concept of proof of work (used to deter spam by forcing agents to use computer time in order to qualify for a transaction) — technologies that, ironically, all came out of the academic literature[3]1 . The idea provides a game theoretic approach to mitigate the effects of the absence of custodian and lack of trust between participants in the maintenance of a permanent shared public ledger — attenuating or circumventing the coordination quandary known as the \"Byzantine general problem\".</p>\n<p data-pid=\"I_bb_-bb\">在中本聪的这篇论文里，比特币使用了三项已经存在的技术：1）哈希函数，2）默克尔树（把一个个由哈希标记的记录数据块链接起来），和3）POW的概念（曾经用来阻止垃圾邮件的一个办法让计算机的工作时长来验证方法）。讽刺的是，所有这些技术都并不新，都是学术界早已有之的文献里[3] <img src=\"https://www.zhihu.com/equation?tex=%5E%7B1%7D\" alt=\"^{1}\" eeimg=\"1\"> 。这个主意（指区块链技术）提供了一种博弈论层面上的方法，以缓解在维护永久公共账簿时缺乏托管人和参与者之间缺乏信任的问题。减弱或者绕过一种名叫「拜占庭将军问题」的协调困境。</p>\n<p data-pid=\"63aaTlQK\">（*）使用已经成熟很久的技术拼凑出一个新技术并不丢人和讽刺，利用久经考验的技术会让技术更可靠，这并没问题。显得略有讽刺是区块链技术的鼓吹者把这项技术吹得过于跨时代，好似再造天地一般。这个锅是区块链的过度鼓吹者的，笔者并不认为这是区块链应该被诟病的点。</p>\n<p data-pid=\"mZ7fr8Oj\"><img src=\"https://www.zhihu.com/equation?tex=%5E%7B1%7D\" alt=\"^{1}\" eeimg=\"1\"> As this discussion is focused on proof of work, we exclude from it Ethereum and other cryptocurrencies.</p>\n<p data-pid=\"vCwI0sit\"><img src=\"https://www.zhihu.com/equation?tex=%5E%7B1%7D\" alt=\"^{1}\" eeimg=\"1\"> 这里专注在讨论纯POW上，我们排斥类似以太坊或者其他加密数字货币</p>\n<p data-pid=\"uGnYLPe9\">（*）以太坊要转用POS等完全原理上不同于POW的技术，之后关于POW的论述均不适用</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"-ufUog-h\">The bitcoin transactional currency (BTC) system establishes an adversarial collaboration between the so-called \"miners\" who validate transactions by getting them on a public ledger; as a reward they get coins plus a fee from the underlying transactions, transfers of coins between parties. The proof of work method has an adjustable degree of difficulty based on the speed of blocks, which aims, in theory, to keep the incentive sufficiently high for miners to keep operating the system. Such adjustments lead to an exponential increase in computer power requirements, making at the time of writing onerous energy demands on the system — energy that could find alternatives in other computational and scientific uses.</p>\n<p data-pid=\"L-oZ9Gvg\">比特币系统的可交易货币(BTC)建立在「矿工」们的竞争性合作上，矿工的责任是去验证公共账本上的交易是否合法；矿工会在验证参与者之间交易合法性的过程里获得一些币作为奖励。POW的算法会根据出块的速度来调整挖矿难度，理论上这个设计旨在为矿工创造足够的激励以保证网络的安全。这种调整造成了计算机算力需求指数性的增长，这需要能源的保证。这些算力和能源完全是可以用来做其他可算和科研用途的。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"CDVCIEwD\">Miners derive their compensation from both seignorage (the market value of a bitcoin minus its mining costs) and transaction fees upon validation — with the plan to switch to transaction fees as the sole revenues upon the eventual depletion of the coins, which are limited to a fixed number.</p>\n<p data-pid=\"jrcImg1A\">A central attribute is that bitcoin depends on the existence of such miners for perpetuity.</p>\n<p data-pid=\"79y-Hbc7\">Note that the entire ideological basis behind bitcoin is complete distrust of other operators — there are no partial custodians; the system is fully distributed, though prone to concentration <img src=\"https://www.zhihu.com/equation?tex=%5E%7B2%7D\" alt=\"^{2}\" eeimg=\"1\">  . Furthermore, by the very nature of the blockchain, transactions are irreversible, no matter the reason.</p>\n<p data-pid=\"2gBSfcSN\">矿工们有两个收入来源，一为铸币税（比特币的市值减去挖矿成本）和交易验证的手续费，这个手续费是计划在所有的挖矿奖励耗尽之后作为所有的收入，最后收敛在一个固定的数字。</p>\n<p data-pid=\"KuQzjVU6\">（*）这里是比特币区块奖励的机制，每过一段时间区块奖励减半，最后直到没有，从而保证比特币的总量上限存在一个固定数字。当比特币达到最大值时，矿工的所有收益均来自于手续费。</p>\n<p data-pid=\"7tU7odD1\">比特币系统的存在完全是依赖于矿工们永久参与。</p>\n<p data-pid=\"_s4_BlsL\">（*）意思是当区块奖励消失后，矿工们能否继续参与挖矿有问题，但比特币唯一的物理存在就是矿工，矿工要是不干了就彻底废了。这个担忧是确实存在的，矿工圈内亦有激烈讨论，不是空穴来风。</p>\n<p data-pid=\"HyUAey2E\">注意一下比特币背后的整个意识形态是对任何运营商性质的东西彻头彻尾的不信任，这里没有任何托管的概念；整个体系是彻底分布式的，虽然比特币有强烈的集中化的倾向 <img src=\"https://www.zhihu.com/equation?tex=%5E%7B2%7D\" alt=\"^{2}\" eeimg=\"1\"> 。还有，比特币无论如何交易是不能逆转的，无论什么原因它就是不能。</p>\n<p data-pid=\"-ILABUi0\"><img src=\"https://www.zhihu.com/equation?tex=%5E%7B2%7D\" alt=\"^{2}\" eeimg=\"1\">From public data, we were able to verify that the distribution of holdings of bitcoin follows a powerlaw with tail index  <img src=\"https://www.zhihu.com/equation?tex=%5Capprox%5Cfrac%7B5%7D%7B4%7D\" alt=\"\\approx\\frac{5}{4}\" eeimg=\"1\"> , no different from the distribution of wealth in the U.S.</p>\n<p data-pid=\"0BtjbdPl\"><img src=\"https://www.zhihu.com/equation?tex=%5E%7B2%7D\" alt=\"^{2}\" eeimg=\"1\">从公开数据上来看比特币的持有者符合幂律分布，集中度非常难之高，和美国的财富分布程度差不多</p>\n<p data-pid=\"mN6j-97t\">（*）意思是比特币是集中在少数人手上的，所以理念上的去中心化并没什么卵用，还是掌握在几个中心手上</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"uMTNvUai\">Finally, note that bitcoins are zero-sum by virtue of the <i>numerus clausus</i>. </p>\n<p data-pid=\"4j2v5tik\">最后，注意一下比特币是一个零和游戏在一个<i>numerus clausus </i>数里不断转手而已。</p>\n<p data-pid=\"jsbuvBzI\">（*）这里的<i>numerus clausus </i>是拉丁语，意思是「closed number」，意思是比特币就在一个封闭的小圈子里互相搞一个零和的游戏而已。四个人打麻将永远创造不出价值的。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"dPk0ZOE1\">As we will see, mathematical and combinatorial qualities do not necessarily translate into financial benefits at either individual or systemic levels.</p>\n<p data-pid=\"0a1ctrzV\">所以我们可以看到，数学的各种组合性质并不一定能转换成各种真实的经济价值，无论是对个体而言还是对整个经济体系而言。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>Comment 1: Why BTC is worth exactly 0 </h3>\n<p data-pid=\"930C2qan\"><i>Gold and other precious metals are largely maintenance free, do not degrade over an historical horizon, and do not require maintenance to refresh their physical properties over time. Cryptocurrencies require a sustained amount of interest in them. </i></p>\n<p data-pid=\"s0IOC4m6\">评论1：为什么比特币的价值就是0</p>\n<p data-pid=\"2q_IpX3N\">黄金和其他贵金属是不用花钱来维持的，它们不会随着时间的流逝而降解，因为它们的物理属性决定了他们不需要主动维护。而加密数字货币需要持续不断的利益去让人们维系它们的存在。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<hr>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>VULNERABILITY OF REVENUE-FREE BUBBLES</h3>\n<h3>无收益资产泡沫的弱点</h3>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"ZM6Yk6Lz\">A central result (even principle) in the rational expectations and securities pricing literature is that, thanks to the law of iterated expectations, if we expect now <i>that we will expect</i> the price to vary at some point in the future, then by backward induction such a variation must be incorporated in the price<i> now</i>. When there are no dividends, as with growth companies, there is still an expectation of future earnings, and a future expected reward to stockholders — directly via dividends, or indirectly via reverse dilutions and buybacks. It remains that a stock is a claim on accumulated assets and their residual value.</p>\n<p data-pid=\"XLGJy_Ca\">在一个理性期望的情况下（哪怕只是原则上的）或者是证券定价原理所阐述的那样，幸好我们有「<a href=\"https://link.zhihu.com/?target=https%3A//brilliant.org/wiki/law-of-iterated-expectation/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">双重期望值定律</a>」，如果我们现在预期未来某个点我们会有一个对价格的期望，那么通过反推演算，这种变数一定包含在当下的价格之中。就算是没有股息的成长股也是对未来的收益有一定的期望，这个期望是指对股东在未来的回馈——无论是直接现金股息分红，或者是非直接的反稀释和回购等形式。股票仍然是对累积资产及其剩余价值的索取权。</p>\n<p data-pid=\"ctVZJKQ1\">（*）这里讲的未来贴现的股票定价模型，可以参考：<a href=\"https://www.zhihu.com/question/23005134/answer/2306281723\" class=\"internal\">如何简单明了地解释自由现金流折现？</a></p>\n<p data-pid=\"dpr6-gMt\">（*）这里的范围要略广一些，不仅仅是股息回报，所有的回购增加股东权益的行为都囊括进去了，意思是说明一个资产必然是因为未来有回报的（无论是不是以现金分红的形式）才造就了它当下的「贴现价值」。</p>\n<p data-pid=\"ZLHuMl6I\">（*）并且未来在某个条件下产生的某种期望的综合效果，和当下无视未来事件对期望的影响也一定是相同的，双重期望值定律给我们估值带来的巨大方便。</p>\n<p data-pid=\"bx8D4Wc2\">（*）双重期望值定律： <img src=\"https://www.zhihu.com/equation?tex=E%28X%29%3DE%28E%28X%7CY%29%29\" alt=\"E(X)=E(E(X|Y))\" eeimg=\"1\"></p>\n<p data-pid=\"s_4NPU2l\">（*）当Y条件下X的期望值，也就是未来股票或者资产产生某些事件对我们估值的影响（利好或者利空的事件），长期综合考虑它们影响的总和，也就是对所有条件期望再求期望，最后是和无条件期望（完全不考虑未来可能产生的利多利空，也就是无视条件概率事件）最后必然也是一致的。</p>\n<p data-pid=\"uQnJsQtU\">（*）我再换人话一下：风风雨雨最后长期还是看内在，当下只要观察长期价值，当下也必然反应长期。因为有双重期望值定律，我们不需要考虑太多可能产生条件下期望的事情对当下估值的影响，使得资产估值变为可能。</p>\n<p data-pid=\"-xlzHGdK\">（*）再透一点，价值投资可以彻底无视未来可能对价值预估产生变动的扰动，因为这些未来潜在的扰动其实也已经含在现在都价格里。因为未来是不可知的，所以有了双重期望值定律，我们才有可能定价，无惧未知。</p>\n<p data-pid=\"Bd4o3I6y\">（*）这些都是为了说明价值投资理论的内涵用于后续的论述。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"nJEj_AZt\">Earnings-free assets with no residual value are problematic. </p>\n<p data-pid=\"7cpM7-27\">The implication is that, owing to the absence of any explicit yield benefitting the holder of bitcoin, <i>if</i> we expect that at any point in the future the value will be zero when miners are extinct, the technology becomes obsolete, or future generations get into other such \"assets\" and bitcoin loses its appeal for them, then the value must be zero <i>now</i> <img src=\"https://www.zhihu.com/equation?tex=%5E%7B3%7D\" alt=\"^{3}\" eeimg=\"1\"> .</p>\n<p data-pid=\"3s3k8HRM\">无收益资产是很成问题的。换言之，因为比特币的持有者是没有明确的期望收益。如果我们知道在未来的任意某一个时刻比特币的价值为0，比如矿工最后因为没区块奖励不干了，技术被更新换代了，或者新时代炒作的主题变成了其他「资产」比特币失去了投机的关注度，那么比特币现在的价值就应该是零<img src=\"https://www.zhihu.com/equation?tex=%5E%7B3%7D\" alt=\"^{3}\" eeimg=\"1\">。</p>\n<p data-pid=\"Pj_7u1Me\">（*）在价值投资里，一个东西未来的价格如果是0的话，那么它的「现值」必然是0。</p>\n<p data-pid=\"9QEE_6nB\">（*）这段话的意思是比特币作为一个必须要有「后来人」接盘的东西，本身是无收益资产的话，那么几个可能让比特币归零的可能性存在，比特币的现值就应该是0。</p>\n<p data-pid=\"8wIZQSZL\">（*）肯定有人会说黄金白银也是无收益资产，不照样不归零还新高嘛，这个在后文里有讲到。我们先来看小注释<img src=\"https://www.zhihu.com/equation?tex=%5E%7B3%7D\" alt=\"^{3}\" eeimg=\"1\">的内容</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"qWNBVDzn\"><img src=\"https://www.zhihu.com/equation?tex=%5E%7B3%7D\" alt=\"^{3}\" eeimg=\"1\">Using a traditional rational bubble model (see [4] and the review by [5]), we get the following conditions. Let <img src=\"https://www.zhihu.com/equation?tex=r_%7Bd%7D\" alt=\"r_{d}\" eeimg=\"1\"> be a discount rate and <img src=\"https://www.zhihu.com/equation?tex=%5Cpi\" alt=\"\\pi\" eeimg=\"1\"> be a probability of absorption over a period. To escape the barrier, bitcoin must grow at <img src=\"https://www.zhihu.com/equation?tex=e%5E%7Br%2B%5Cpi%7D\" alt=\"e^{r+\\pi}\" eeimg=\"1\"> forever, but no more, without remission, and with total certainty.Should it grow then stabilize, it still would be prone to extinction. We note that traditionally, models rule out any continuous growth at an exponential rate faster than <img src=\"https://www.zhihu.com/equation?tex=r%2B%5Cpi\" alt=\"r+\\pi\" eeimg=\"1\"> because the security or asset would then represent the entire economy. Bitcoin distinguishes itself from other assets because of its fragility as a mere book entry on a virtual ledger that requires constant refreshing <i>ad infinitum</i>.</p>\n<p data-pid=\"odigTDk1\"><img src=\"https://www.zhihu.com/equation?tex=%5E%7B3%7D\" alt=\"^{3}\" eeimg=\"1\">用一个传统的泡沫模型（参考文献[4]和文献[5]），我们需要满足如下的条件，令 <img src=\"https://www.zhihu.com/equation?tex=r_%7Bd%7D\" alt=\"r_{d}\" eeimg=\"1\"> 为贴现率并且令 <img src=\"https://www.zhihu.com/equation?tex=%5Cpi\" alt=\"\\pi\" eeimg=\"1\"> 作为一个周期内的逃逸速度的概率。如果要逃离泡沫崩盘，比特币必须永远以 <img src=\"https://www.zhihu.com/equation?tex=e%5E%7Br%2B%5Cpi%7D\" alt=\"e^{r+\\pi}\" eeimg=\"1\"> 的速度上涨才能逃逸，且不能有任何一丝丝衰退，且100%肯定在增长。就算它稳住在一个水平，它也会有毁灭的倾向。我们注意到传统的这个泡沫模型排斥力任何连续增长速度快于 <img src=\"https://www.zhihu.com/equation?tex=r%2B%5Cpi\" alt=\"r+\\pi\" eeimg=\"1\"> 的情况因为证券或者资产是反应经济的。而比特币完全把自己排除在这之外，因为它仅仅是一个公共账本里的一个值，是很脆弱的，必须无穷无尽的增长。</p>\n<p data-pid=\"ZUOzCNaC\">（*）这两篇关于泡沫模型的论文我没读过，不过看得挺有意思的。塔勒布的意思是根据这个泡沫模型，一个靠后来者接盘的东西本质上是一个旁氏模型，然后必须维持一定的增速，否则旁氏骗局就崩盘了。具体的推导过程大家可以去看引述的原论文。所有引述的论文最后会罗列。</p>\n<p data-pid=\"qURxjJV7\">（*）一个旁氏盘子必须药不能停，这个是肯定没问题的。如果比特币是完全依赖后来者以更高价格买走的旁氏的话，那么它维系存在的增长需求也是不断增长直到不可能的。塔勒布大致的意思是比特币那是比一般泡沫要虚得多的泡沫里的战斗机。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"PXcySwPa\">The typical comparison of bitcoin to gold is lacking in elementary financial rigor <img src=\"https://www.zhihu.com/equation?tex=%5E%7B4%7D\" alt=\"^{4}\" eeimg=\"1\"> . We will see below how precious metals lost their quality as a medium of exchange; gold and other dividend-free precious items (such as other metals or stones) have held some financial status for more than 6, 000 years, and their physical status for several orders of magnitude longer (i.e., they did not degrade or mutate into some other alloy or mineral). So one can expect one’s gold or silver possessions to be around physically for at least the next millennium, as well as having some residual economic value by iteration, for the same reason. Metals have ample industrial uses with demand elasticity (and substitution for other raw materials). Currently, about half of gold production goes to jewelry (for which there are often no storage costs), one tenth to industry, and a quarter to central bank reserves. </p>\n<p data-pid=\"WUPI9J3q\">经常拿黄金和比特币作比较这个是在金融问题上一个很幼稚的错误 <img src=\"https://www.zhihu.com/equation?tex=%5E%7B4%7D\" alt=\"^{4}\" eeimg=\"1\"> 。我们下面会看到贵金属是怎么失去它们的交易媒介的性质的；黄金和其他非生息的贵重物（比如其他的金属或宝石）的金融属性有保持了超过6000多年，他们的物理属性能保持超过这个时间好几个数量级（他们不会衰变或者降解成其他物质）。所以我们能期望自己的黄金或者白银财产至少在下一个千年依然保持相同的物质形态，并且还有一些残存的经济价值。金属还会有很多工业价值，且有需求弹性（由其他金属的替代效应）。目前，黄金的产量一半用于珠宝业（一般这个行业不会有折旧损耗），十分之一用于工业，四分之一用于央行储备。</p>\n<p data-pid=\"nWcUlkun\">（*）意思是说贵金属宝石啥的并不是啥天然的货币，6000多年的金融属性历史远比不上它们更久远的历史，贵金属宝石等作为货币只占它们历史的很小一段，而且现在贵金属也失去了货币属性了。所以不存在什么金属天然是货币。且金属这类非生息资产因为有工业属性和其他用途，比如就是人们纯粹喜欢黄金而有价值。</p>\n<p data-pid=\"96tmfowT\">（*）为什么把比特币称为电子黄金是不对的，是注释4的内容。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"EL3A9-sm\"><img src=\"https://www.zhihu.com/equation?tex=%5E%7B4%7D\" alt=\"^{4}\" eeimg=\"1\"> It is also a reasoning error to claim that an innovation, bitcoin, can become the \"new gold\" ab ovo, when gold wasn’t decided to be so by fiat thanks to a white paper; it organically became a reserve asset ex post, through centuries of competitive selection against other modes of storage, payment, and collectibles. Gold elicited an aesthetic fascination and had been used as jewelry and store of value for more than two millennia before it became, literally, a currency or before there was such a thing as a currency. The Phoenicians used it as store of value because there was demand for it, and it was not until the 6 th C. BCE that coins from Sardis became a widespread means of exchange [6].</p>\n<p data-pid=\"3RmAxaFP\">注释4:声称比特币是一个伟大的创新因为它变成了一个「新黄金」从一开始就是一个归因错误。当黄金还没有成为那么「法币」的时候，它很早就成为了一个储备资产了，在过去很多世纪里它和不同形式的存储物支付工具和收藏品竞争。黄金引领了一种审美被用于珠宝和价值存储是要远早于它变成字面意义上的货币至少两千年。腓尼基人用它作为存储价值的工具是因为他们很渴望黄金，直到公元前6世纪，萨迪斯的硬币才成为一种广泛的交易手段[6]。</p>\n<p data-pid=\"9HsvemyZ\">（*）这段注释的意思是不能倒果为因，黄金在成为货币前因为大家都很想要了，所以才脱颖而出变成一种储备资产，然后才有把黄金当做货币的事情发生。是先有大家想要黄金为因，才有黄金被当做货币为果。先宣传一个东西是货币，然后说它是新黄金是不对的。</p>\n<p data-pid=\"ClSlJ6mS\">（*）一个东西能成为货币储备是因为大家想要它，而不是它像黄金。黄金也是因为大家要它，它才成为货币储备资产的，而非反过来。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<hr>\n<p data-pid=\"TrDCBJR0\">（*）到这里大致的意思是要么一个资产是生息资产，我们能通过贴现模型的方式估值资产。而一个纯粹靠后来者接盘维系价格的旁氏结构未来对增长的需求会达到不可能实现而必然走向崩盘。比特币是非生息资产。</p>\n<p data-pid=\"RGwdUKcZ\">（*）例如黄金这样的也是非生息资产的东西，它能保持自己的价值是因为有需求，或者珠宝业人家喜欢黄金，或者是工业属性。且黄金存在的时间远远长于其作为货币属性的时间。是因为黄金被广泛的有需求了，才会让黄金脱颖而出成为货币的一种候选，并且黄金现在也失去了货币属性。</p>\n<p data-pid=\"rMfv9f2h\">（*）所以因为比特币和黄金一样是稀缺不可再生的，就论证比特币一定会像黄金一样具备货币属性（黄金自己都没有了），这个逻辑推断是不成立的。是先有需求才有储备价值，才发展成货币。而非单纯因为稀有。如果比特币不能让人产生需求，仅就不可再生和稀缺的话，是站不住脚的论断。</p>\n<p data-pid=\"JCRm6Fk_\">（*）要么你拿贴现模型来，要么有人消费的供需模型来，否则就得用泡沫模型了，是个泡沫迟早要灭。如果迟早要灭，那么贴现价值也就是0了。</p>\n<hr>\n<p data-pid=\"hVJrcI5A\">Path dependence is a problem. We cannot expect a book entry on a ledger that requires active maintenance by interested and incentivized people to keep its physical presence, a condition for monetary value, for any period of time — and of course we are not sure of the interests, mindsets, and preferences of future generations.</p>\n<p data-pid=\"J0AQKQJc\">Once bitcoin drops below a certain threshold, it may hit an absorbing barrier and stays at 0 — gold on the other hand is not path dependent in its physical properties <img src=\"https://www.zhihu.com/equation?tex=%5E5\" alt=\"^5\" eeimg=\"1\"> . As discussed in [7], technologies tend to be supplanted by other technologies with a vulnerability in proportion to their past survival duration (&gt;99% of the new is replaced by something newer), whereas items such as gold and silver have proved resistant to extinction. </p>\n<p data-pid=\"hNrK44uF\">路径依赖也是一个问题。我们不能指望区块链的账本信息一直考对比特币有兴趣的参与者们长期维护其物理存在，从而保留起货币价值，未来任意一个时刻没人维护了就都不存在了。并且我们肯定是没法确定未来世代的人的想法兴趣和行为方式。</p>\n<p data-pid=\"sn4y3pJI\">一旦比特币的价格跌到一定的临界值，那个它将会撞上一个「吸收壁」，并且保持价格为0，黄金恰恰相反，它不依赖其他的维系方式能独立保持其物理属性。如[文献7]里讨论的一样，技术往往会被其他技术所取代，这些技术的弱点与其过去的生存时间成正比（&gt;99%的新生事物会被更新的食物取代）。而金银等物被证明是会长期保持不灭的。</p>\n<p data-pid=\"6GMRhkm7\">（*）意思是比特币和黄金白银不一样，它要维持自己在物理世界的存在，需要矿工们持续支付代价来维持存在。而未来的人是不是会继续对比特币网络有那么高的兴趣来维护昂贵的区块链的运行成本，我们没办法知道。如果有更好的记账技术了，比特币主链会被放弃，那就会归零，而归零的东西的贴现值就是零。也就是说除非币圈信仰充值药不能停能维持到天荒地老，并且当中不能有任何断档，不然迟早有一天要归零。中间任何一个10分钟都不能断是颇为脆弱的。</p>\n<p data-pid=\"mIqtsod5\">（*）长期来看，很难想象比特币的区块链技术就是最优版本，这也不符合计算机软件发展的规律。目前比特币的主链是否会是未来的最大市值链，甚至是否有挖矿的经济效益，确实是不确定的。并且未来如果有比区块链更好的作为记账的手段，抛弃区块链也不是不可能的事情。但这个未来可能会有更好方案的推论其实可以普适于一切对技术的评论。笔者认为这种诘难过于宽泛。</p>\n<p data-pid=\"zLXPcQnD\">（*）但区块链需要一刻不停的以高成本维护确实是一个脆弱点，触及「吸收壁」效应的话，可能就会发生比较大的问题。相比于贵金属等而言需要高维护成本是一个实打实的弱点和劣势，这是不可否认的。下面的注释 <img src=\"https://www.zhihu.com/equation?tex=%5E5\" alt=\"^5\" eeimg=\"1\"> 会进一步解释「吸收壁」效应。</p>\n<p data-pid=\"6skc_Fs9\">（*）硬分叉或许是一个保持动态升级的办法，虽然其有负面效应，一刻不能停确实是一个很严苛的要求，很难想象长期到千年的级别，区块链能保持 always online。笔者更加相信在链在技术上撞到脆弱性的时间要晚于有比目前区块链技术更好的新技术的出现的时间。比区块链更优的新技术让挖矿成为不经济行为的可能性更大。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"QnMasstJ\"><img src=\"https://www.zhihu.com/equation?tex=%5E5\" alt=\"^5\" eeimg=\"1\"> The absorbing barrier does not have to be 0 for the price to spiral to 0 upon hitting the barrier. This is similar to saying \"if the heart rate drops below ten beats per minutes, it will be 0 (death)\" — nor does it necessarily have to be caused by a drop in price.</p>\n<p data-pid=\"myXYs4uL\"><img src=\"https://www.zhihu.com/equation?tex=%5E5\" alt=\"^5\" eeimg=\"1\">吸收壁并不一定需要归零后才会触发死亡螺旋。这个有点类似说「如果心率降低到每分钟十次的话，心率迟早是要归零的（死亡）」——这个归零也不一定是需要由价格归零触发点。</p>\n<p data-pid=\"e1sFS_vk\">（*）吸收壁效应的意思就是临界触发死亡螺旋的这么一个比喻，一旦触及到了，就不可逆的走向灭亡。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"O9qPwz6-\">Furthermore bitcoin is supposed to be hacker-proof and is based on total infallibility in the future, not just at present. It is crucial that bitcoin is based on perfect immortality; unlike conventional assets, the slightest mortality rate puts its value at 0 <img src=\"https://www.zhihu.com/equation?tex=%5E6\" alt=\"^6\" eeimg=\"1\"> .</p>\n<p data-pid=\"QaXd7i0y\">另外比特币被认为是被黑客攻击久经考验下来非常安全的资产，并且未来会一直安全，不仅仅是现在安全。比特币在安全性上的完美无瑕对于比特币来说是至关重要的。不像传统资产，略有一丝的瑕疵就会要了比特币的命。</p>\n<p data-pid=\"N-BnZSyc\">（*）从信息安全的角度上来说，没有绝对安全的系统，比特币亦然。比特币的区块链技术在历史上也有几次安全漏洞和更新，但并不是所有的安全漏洞都触发了吸收壁。但这确实是一个很大的风险隐患，我们确实没法确定比特币是否目前还藏着致命的安全性缺陷，没人知道。相比于黄金这类靠物理定律保持稳定的，确实是个劣势。而一旦有概率不小于0的比特币漏洞能导致比特币网络出致命问题，那么它的贴现值就是0这个推论是正确的。由此可以构造同义的句子：<i><b>在未来无穷长的时间内，比特币技术存在任意致命漏洞的概率大于0的情况下，比特币当下的贴现价值为0。</b></i>比特币：我太难了……</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"d9fGXTAS\"><img src=\"https://www.zhihu.com/equation?tex=%5E6\" alt=\"^6\" eeimg=\"1\"> To counter the effect of the absorbing barrier, the asset must grow at an exponential rate forever, without remission, and with total certainty. Belief in such an immortality for BTC — and its total infallibility — is in line with the common observation that its enthusiastic investors have the attributes of a religious cult.</p>\n<p data-pid=\"Y3gf8s7j\"><img src=\"https://www.zhihu.com/equation?tex=%5E6\" alt=\"^6\" eeimg=\"1\">要对抗吸收壁效应的话，资产段增值必须以一种指数爆炸的性质永远增长，并且不能有衰退，且完全肯定。对于比特币完全不朽的信念，和人们观察到的币圈近乎宗教信仰式的热情是完全一致的。</p>\n<p data-pid=\"poPgAHkR\">（*）意思是比特币泡沫不触及到吸收壁除非有宗教信仰般的热情，否则不可能。而现在比特币还杵在那里是因为我们确实看到币圈搞的跟邪教一样。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>Principle 1: Cumulative ruin </h3>\n<h3>定律1：持续损耗原理</h3>\n<p data-pid=\"O9JyskTk\"><i>If any non-dividend yielding asset has the tiniest probability of hitting an absorbing barrier (causing its value to become 0), then its present value must be 0.</i></p>\n<p data-pid=\"mwubX1dY\"><i>如果任意一个非生息资产有哪怕再小点概率撞到吸收壁上（能让它归零的），那么它的现值就是0。</i></p>\n<p data-pid=\"A6bnaz3w\">（*）上一篇的贴限值理论和链接可以参考阅读，反复在用这个其实。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"q5QANxhz\">We exclude collectibles from that category, as they have an aesthetic utility as if one were, in a way, renting them for an expense that maps to a dividend — and thus are no different from perishable consumer goods. The same applies to the jewelry side of gold: my gold necklace may be worth 0 in thirty years, but then I would have been wearing it for six decades. </p>\n<p data-pid=\"Z8ZvMiPe\">我们排除了收藏品品类，因为它们具有美学价值，某种意义上来说，租用这些收藏品获取的效用就和收到股息分红是一样的，这和快销易腐食品差不多。同样适用于黄金首饰等。我的大金链子可能在三十年里价格归零，但到那个时候我已经戴了六十年了。</p>\n<p data-pid=\"SHM5aHTO\">（*）意思是收藏品这类的持续在给人产生消费价值，这个持续产生的消费价值和股息分红是一个意思。是分批「划拨」给持有者的。大金链子戴六十年给塔勒布带来的效用已经「回本」了。</p>\n<p data-pid=\"gGWv2old\">（*）这里得理解经济学上关于「效用」的意思，未必是金钱上的，满足你需求的都能改变人的经济行为。假如你买了一幅画，你越看越舒坦，其美学价值让你吃饭后看个十分钟就能觉得妙不可言，然后你持续看了三十年到你撒手人寰被你儿子贱卖掉。那么这三十年来给的这个舒适感也可以算作是「效用分红」，算变相的派息。</p>\n<p data-pid=\"MCpE-vZ1\">（*）按照这个收藏品效用的算法，NFT比BTC靠谱，我一时略有凌乱。抬个杠，我钱包里有比特币特看着就特满足算不算呢？哈哈。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"cv1wocgE\">The difference between the current bitcoin bubble and past recent ones, such as the dot-com episode spanning the period over 1995-2000, is that shell companies were at least promising some type of future revenue stream. Bitcoin would be allowed to escape a valuation methodology had it proven to be a medium of exchange or satisfied the condition for a numeraire from which other goods could be priced. But currently it is not, as we will see next. </p>\n<p data-pid=\"MRp2Medi\">比特币的泡沫和过去几十年的泡沫，比如在1995-2000年的.com互联网泡沫不一样的是，互联网泡沫好歹空壳公司们还承诺未来会以某种形式创造现金流收入。比特币如果想要不用这种估值方式定价的话，则比特币必须被证明一种交易媒介或者其他各种商品的估值模式。但目前来看，并没有，我们下面会论述。</p>\n<p data-pid=\"iuV7UF0k\">（*）意思是纯交易媒介，也就是现金货币是不能用上面说的那些估值模式来定价的，或者世界上还有一些特殊的资产定价的模式，如果比特币是货币属性的话，就可以超然。塔勒布认为并没有。</p>\n<hr>\n<h3>SUCCESS IN WRONG PLACES</h3>\n<h3>在错误的领域里成功</h3>\n<p data-pid=\"mc0MQSJW\">More generally, the fundamental flaw and contradiction at the base of most cryptocurrencies is, as we saw, that the originators, miners, and maintainers of the system currently make their money from the inflation of their currencies rather than just from the volume of underlying transactions in them. Hence the total failure of bitcoin to become a currency has been masked by the inflation of the currency value, generating (paper) profits for a large enough number of people to enter the discourse well ahead of its utility. </p>\n<p data-pid=\"ULInsFWg\">总的来说，大多数加密数字货币根本性的缺陷和矛盾是，我们看到的，发起者矿工和维系整个体系的参与者们是从通胀里赚钱的，而不是通过他们都货币来清算各种交易从而产生收益的。因此比特币作为货币的尝试是彻底失败的，但这个失败被货币价值的通胀说掩盖，产生了大量的账面盈利，大到足以让人们不关心它作为货币的效用本身。</p>\n<p data-pid=\"KXtYLkAe\">（*）这里说的是比特币作为货币属性的失败，如果是一个货币那么应该根据利用该货币清算的交易来得出它的媒介价值，也就是 <img src=\"https://www.zhihu.com/equation?tex=MV%3DPQ\" alt=\"MV=PQ\" eeimg=\"1\"> ，当使用一个货币清算的商品数量和价格足够多的时候，货币是有价值的。但比特币并没用来清算什么贸易，而是一个通胀里的纸面富贵的游戏而已。</p>\n<p data-pid=\"xcXqsBA_\">（*）人们沉迷于这个账面盈利的游戏，以至于不关心它有没有真的当货币用，这个是币圈里的现实。之前有尝试过比特币作为支付工具的创业公司，无一例外的都没成功，比特币在交易媒介领域并不成功。最初用比特币买披萨的反而是一个正途，而后期比特币虽然市值很高，但作为货币的尝试是失败的。但是 Who cares，币圈的人都盯着某某某发财了我也想要，比特币是不是货币确实没人关心。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>Comment 2: Success for a digital currency </h3>\n<h3>数字货币的成功标准</h3>\n<p data-pid=\"Zx78q6z3\"><i>There is a mistaken conflation between success for a \"digital currency\", which requires some stability and usability, and speculative price appreciation.</i></p>\n<p data-pid=\"HU6DhIQJ\">一个「数字货币」需要成功的话，有一些矛盾：它要求稳定性和可用性，又要求有价格投机的价值。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"CVM3Axla\">Transactions in bitcoin are considerably more expensive than wire services or other modes of transfers, or ones in other cryptocurrencies <img src=\"https://www.zhihu.com/equation?tex=%5E%7B7%7D\" alt=\"^{7}\" eeimg=\"1\"> . They are order of magnitudes slower than standard commercial systems used by credit card companies —anecdotally, while you can instantly buy a cup of coffee with your cell phone, you would need to wait ten minutes if you used bitcoin <img src=\"https://www.zhihu.com/equation?tex=%5E%7B8%7D\" alt=\"^{8}\" eeimg=\"1\"> . They cannot compete with African mobile money. <img src=\"https://www.zhihu.com/equation?tex=%5E%7B9%7D\" alt=\"^{9}\" eeimg=\"1\"> . Nor can the system outlined above —as per its very structure —accommodate a large volume of transactions — which is something central for such an ambitious payment system. </p>\n<p data-pid=\"bOQplkh1\">比特币的交易转账费用是很贵的，比电汇或者其他形式的转账要贵很多，就算和其他加密数字货币比也很贵。比特币转账要花费很长时间，相比于信用卡公司的系统，你如果要买一杯咖啡的话你可以用手机立刻完成支付，但如果你要用比特币的话，起码要等十分钟以上。甚至比不上非洲的移动支付，更别说和上面提到的其他方式比了。而比特币的结构设计也没办法承载大容量的交易——这对于一个雄心勃勃的支付系统来说应该是核心功能才对。</p>\n<p data-pid=\"Lmp4ZGmb\">（*）批评比特币支付手段又慢又贵，比特币每秒7笔的处理速度从开始就被人诟病，大区块路线和闪电网络等方案也都是针对这个问题的。客观的说，原版的比特币作为一个通用支付系统，肯定是不够看的。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"NWgWrpBk\"><img src=\"https://www.zhihu.com/equation?tex=%5E%7B7%7D\" alt=\"^{7}\" eeimg=\"1\"> Transactions in bitcoin are orders of magnitude more expensive than those done using African mobile phones.</p>\n<p data-pid=\"-yJ3rzkS\">比特币的交易费用比非洲移动支付都要贵得多</p>\n<p data-pid=\"bdB16L1O\"><img src=\"https://www.zhihu.com/equation?tex=%5E%7B8%7D\" alt=\"^{8}\" eeimg=\"1\"> \"As it grew in popularity, Bitcoin became cumbersome, slow, and expensive to use. It takes about 10 minutes to validate most transactions using the cryptocurrency and the transaction fee has been at a median of about $20 this year.\" By Eswar Prasad, <i>New York Times</i>, Jun 15, 2021.</p>\n<p data-pid=\"yNyqVedN\">比特币的交易支付体系又笨重又慢而且很贵，用了10分钟才严重了一笔交易而且这个交易的平均费用高达20美元，Eswar Prasad，纽约时报，2021年6月15报道</p>\n<p data-pid=\"UY52fqfG\"><img src=\"https://www.zhihu.com/equation?tex=%5E%7B9%7D\" alt=\"^{9}\" eeimg=\"1\"> There appear to be other protocols issued from the original white paper that claim to be more transaction focused; as with Ethereum, we exclude them from this analysis.</p>\n<p data-pid=\"bH26bGQZ\">这里讨论的是原版白皮书的比特币协议，其他一些协议号称要专注在交易速度上，比如以太坊，我们这里不讨论那一些</p>\n<p data-pid=\"1HimM6zG\">（*）蛤？这是没见识过以太坊大堵塞吗？！</p>\n<p data-pid=\"cJfHmDMA\">To date, twelve years into its life, in spite of all the fanfare, but with the possible exception of the price tag of Salvadoran permanent residence (3 bitcoins), there are currently no prices fixed in bitcoin floating in fiat currencies in the economy.</p>\n<p data-pid=\"ZJhoKx3Y\">迄今为止，比特币诞生12年以来，虽然大张旗鼓，但除了萨尔瓦多公民身份（标价3比特币）之外，没有任何一个商品是根据比特币来标价而对于其他法币来说是浮动定价的。</p>\n<p data-pid=\"N01Ruoyi\">（*）这个是充分说明比特币目前并没有被当做货币用的一个例证，确实如此。</p>\n<hr>\n<h3>PRINCIPLES FOR A CURRENCY</h3>\n<h3>货币的规律</h3>\n<p data-pid=\"NLX8CcXN\">First, let’s discuss the demonetization of gold. In 1971, the U.S. government terminated the Bretton Woods Agreement, ending the convertibility of the U.S. dollar into gold. Gold stocks were growing too slowly, and, as mentioned earlier, much of it went to jewelry and industry — the most robust theory is that there was not enough gold to keep up with economic growth <img src=\"https://www.zhihu.com/equation?tex=%5E%7B10%7D\" alt=\"^{10}\" eeimg=\"1\"> . Furthermore, there had been long debates over the hampering of monetary policy by sticking to metals, as witnessed by the bullionist controversy <img src=\"https://www.zhihu.com/equation?tex=%5E%7B11%7D\" alt=\"^{11}\" eeimg=\"1\"> .It appears that developed economies have trouble hooking their currencies to a commodity.</p>\n<p data-pid=\"ybPWQU4-\">首先我们来讨论一下黄金的去货币化过程。在1971年美国政府决定终止布雷顿森林体系，结束了美元与黄金之间的挂钩。黄金的总储备增长太慢了，并且上面也提到了很多黄金流向了珠宝业和工业——目前最完备的理论认为黄金的增长速度是没办法满足经济的增长的 <img src=\"https://www.zhihu.com/equation?tex=%5E%7B10%7D\" alt=\"^{10}\" eeimg=\"1\"> 。另外，金银本位主义的争论旷日持久 <img src=\"https://www.zhihu.com/equation?tex=%5E%7B11%7D\" alt=\"^{11}\" eeimg=\"1\"> 。似乎，用一种商品来锚定的办法来发型货币对于发展经济来说是有问题的。</p>\n<p data-pid=\"1wxDCdOM\">（*）传统的经济学理论认为货币的增长应该要和经济总量的增长保持一个平衡，这样这种货币才有利于经济的发展。黄金本来开采的量就不多，且没法预测，还流向珠宝业和工业（导电性等特质）的话，就会造成通缩。这样用黄金挂钩做货币就显得很糟糕了。但这个在经济学是有争议的，不是金科玉律。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"USS1jsZO\"><img src=\"https://www.zhihu.com/equation?tex=%5E%7B10%7D\" alt=\"^{10}\" eeimg=\"1\"> Ironically the U.S. deficit caused the dollar to be more widely available and used, in stable supply, by what is called the Triffin paradox</p>\n<p data-pid=\"_ail5qBY\">讽刺的是美国其实因为美元被广泛的应用并且稳定供给而遭受了大规模的财政赤字，这个被称之为「特里芬悖论」</p>\n<p data-pid=\"pmymHzRx\">（*）特里芬悖论的意思是如果美元和黄金挂钩，而其他货币和美元挂钩（也就是布雷顿森林体系），那么美元取得了核心的地位，别国为了发展国际贸易就必须储备美元，这样美元对于美国而言就是净流出的，美元在海外不断沉淀，则美国必然是逆差过。而美国作为维持美元稳定的主体，又必须是长期顺差国才能保持美元的稳定。这两者都要同时满足是矛盾的。由著名的经济学家罗伯特特里芬提出，所以叫特里芬悖论。</p>\n<p data-pid=\"JxnzwfhD\"><img src=\"https://www.zhihu.com/equation?tex=%5E%7B11%7D\" alt=\"^{11}\" eeimg=\"1\"> Even Ricardo got drawn in, see Ricardo’s 1811-1816 arguments [8],[9], and commentary by Jevons [10].</p>\n<p data-pid=\"VbYzFJ2F\">关于金银本位制的争论，连李嘉图也下场争论过，见1811-1816的争论[文献8][文献9]，杰文斯的评论[10]</p>\n<p data-pid=\"Lnnr4ISd\">（*）伯南克也是这个论题里比较出名的经济学家，相关的论文也被引用不少，但塔勒布特看不起伯南克来着，哈哈哈。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"lgN2tNyI\">In the early 1970s, the Hunt brothers started to hoard silver (when they started, U.S. citizens were banned from directly owning gold), and accelerated their hoarding in the late 1970s, turning it into a squeeze. It lead to a speculative explosion in the price of silver, as shown in Fig 3, leading by contagion to between a fivefold and tenfold increase in the price of precious metals. Then, upon the deflation of the bubble, metals gave back more than half of their gains and languished for more than two decades. At the time of writing, 41 years later, neither gold nor silver have, inflation adjusted, reached their previous peak. The same effect took place in 2008-2009 in the wake of the banking crisis: gold and silver jumped upwards between 80 and 120 % then subsequently lost most of their gains.</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-6ce39884c7bd77284a992e2dda347106_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"539\" data-rawheight=\"793\" class=\"origin_image zh-lightbox-thumb\" width=\"539\" data-original=\"https://pic3.zhimg.com/v2-6ce39884c7bd77284a992e2dda347106_r.jpg\"></figure><p data-pid=\"2CzSn0sp\">1970年代早期亨特兄弟开始囤白银（那会儿美国公民是不允许私人持有黄金的），且在1970年代末加速囤积了白银，并形成了一次扎空。如上图所显示的那样这导致了白银和黄金的价格发生了投机性的暴涨，并且带动了其他贵金属产生了5到10倍以上的暴涨。然后，随着泡沫的破裂，金属的价格发生了腰斩并且在未来的二十年内萎靡不振。在本文写作的时刻，也就是41年后，经过通胀调整来计算，黄金和白银的价格也没回升到原来的高点。2008-2009年的银行业危机也是同样的模式，黄金和白银的价格在80%到120%之间的幅度飙升然后大部分价值又都还回去了。</p>\n<p data-pid=\"KWw1Kn20\">Gold and silver proved then that they could neither be a reliable numeraire, nor an inflation hedge. The world had become too sophisticated for precious metals. If we consider the most effective numeraire, it must be the one in which the bulk of salaries are paid, as we will show next. </p>\n<p data-pid=\"mnt-aw2R\">黄金和白银已经被证明了它们没办法胜任一个好的计价工具，也没什么通胀对冲的功能。这个世界已经变得越来越险恶了。如果我们要考虑使用一种东西作为计价工具，它必须是大部分可以用支付来薪水的，我们接下来看。</p>\n<h3>Comment 3: Payment system </h3>\n<h3>评论3：支付体系</h3>\n<p data-pid=\"xVWutCPT\"><i>There is a conflation between \"accepting bitcoin for payments\" and pricing goods in bitcoin. To \"price\" in bitcoin, bitcoin the price must be fixed, with a conversion into fiat floating, rather than the reverse</i></p>\n<p data-pid=\"7LJ9t1Tx\">在「接受比特币支付」和用比特币定价之间是有差异大。以比特币计价是值它相对于比特币而言是固定的，并且相对于法币而言它是浮动的，而不是相反。</p>\n<p data-pid=\"aU_vvJWs\">（*）意思和上面那个萨尔瓦多的公民身份开价3比特币是一个意思。比特币从7万刀左右跌到2万刀，那个公民资格还是卖3BTC，没有变成10.5 BTC保持21万美元的价格才叫以比特币定价，区别于「接受比特币支付」。</p>\n<p data-pid=\"9ijUWPEe\">Let us go deeper into how a currency can come about. No transaction between two persons is analytically pairwise in an open economy. The root of the confusion lies in the prevalent naïve-libertarian illusion that a transaction between two consenting adults, when devoid of coercion, is effectively just a transaction between two consenting adults and can be isolated and discussed as such <img src=\"https://www.zhihu.com/equation?tex=%5E%7B12%7D\" alt=\"^{12}\" eeimg=\"1\"> . But one must consider the ensemble of transactions and the interactions between agents: people happen to engage in contractual agreements with others; for them a specific transaction is just one piece. To be able to regularly buy goods denominated in bitcoin (whose prices fixed in bitcoin but floating in U.S.$ or some other fiat currency), one must have an income that is fixed in bitcoin. Such an income must come from somewhere, say, an employer. For an employer to pay a salary fixed in bitcoin, she or he must be getting revenues fixed in bitcoin. Furthermore, for the vendor to offer a can of beer in fixed bitcoins, she or he must be paying for the raw material, and have the overhead fixed in bitcoin. The same applies to the mismatch of assets and obligations on a balance sheet. All this requires a parity in bitcoin-USD of low enough volatility to be tolerable and for variations to remain inconsequential.</p>\n<p data-pid=\"OZNx_ohW\">让我们更深入的来看一看货币是怎么来的。在一个开放的经济体内，没有两个人之间的交易是如同经济学分析里说的那样完美的匹配成对的出现。这个谎言的根基是来自于普遍的自由主义的臆想说：两个独立自由意志的成年人在不受强迫的情况下可以被单独提出来想理论分析那样就能以最高效的形成交易 <img src=\"https://www.zhihu.com/equation?tex=%5E%7B12%7D\" alt=\"^{12}\" eeimg=\"1\"> 。</p>\n<p data-pid=\"c3HSoRma\">现实情况是必须要考虑许许多多交易的整体作用和人和人之间的互动。人们碰巧在一个特定的合同下和人交易，这种情况只是生活中的一隅。如果要以比特币定价的方式来日常性的购买商品（以比特币定价而对美元等法币浮动），那么这个人的收入也应该以比特币来计价。意思是说，这种收入结构意味着一个人的薪水是拿比特币来支付的，他或她比如获得比特币计价的固定收益。并且购买一瓶啤酒也要以比特币计价，他或她支付各类原材料成本和其他开销等等都要以比特币来计价。对于资产负债表的整个错配都要以比特币来计价。所有这一切都必须有一个比特币兑美元的足够低波动率的情况下才能忍受，使得这个兑换率的变化不那么灾难性。</p>\n<p data-pid=\"G-RZmprK\">（*）这里涉及到的一个概念是「交易成本」。真实世界里的交易不是没成本的，在一个异常孤立的经济学设想里，交易用什么货币清算是无关紧要的，因为可以把所有的交易都附加上一个外汇掉期互换。但真实的世界里，不可能所有涉及到的交易都频繁的做这种附加合同，必须考虑真实世界的日常清算的交易成本。一次涉及到汇率掉期的交易只能是偶尔出现的，不可能日常买菜等琐事里高频出现。</p>\n<p data-pid=\"ZTabqVUt\">（*）纯粹的用一个个合同来解释自由人的经济活动是一个过度理想化的学术设想而已，是一个真空球形鸡式的构想，真实的世界不是这样的。人们在一个个合同下和人进行理性人博弈互动是偶尔的。大量的日常交易如果有一方要用比特币来进行计价的话，那意味着牵一发而动全身，所有的必须都用比特币来定价。除非比特币和现在最主流的清算方式，也就是美元，其之间的波动率小到可以不产生非常严重的影响。</p>\n<p data-pid=\"MYc26EYa\">（*）笔者的生活经验里有接触到一些跨国的不方便用正常银行渠道的清算案例，用USDT的交易远多于BTC。</p>\n<p data-pid=\"myngiX6N\">（*）大体的意思是说比特币倘若真要走货币属性路线，那除非所有人突然都用比特币计价，否则它必须与当下世界的主流清算方式保持一个很小的波动率才有可能。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"qyUz68zp\">There are also arbitrage bounds present in any sufficiently efficient economy with relatively free markets. Furthermore, if a vendor prices goods in bitcoin, and the value fluctuates from the initial fixing, the price will be directly or indirectly arbitraged: when the conversion rate to fiat is favorable, customers will buy from the bitcoiner; when it is unfavorable they will either buy elsewhere (indirect arbitrage), or if possible, return previously purchased goods (direct arbitrage). For the price to not be arbitrageable requires the good to be unique and unavailable elsewhere at a price fixed in another currency –in this case it becomes, simply, a proxy for bitcoin. The only items that currently appear to be somewhat priced in bitcoin are other cryptocurrencies, even then not always. </p>\n<p data-pid=\"2FBhoalN\">在一个正常的自由市场经济体里中是会有套利边界的存在，如果一个商贩给商品以比特币计价，那么在产生套利机会的时候它就会直接或者间接的套利：当转成成法币有利可图时，顾客会从比特币定价者那里买，当转换成法币不划算的时候他们会从其他地方买（非直接套利），或者如果可能都话，把之前用比特币买的商品退掉（直接套利）。如果想要价格无法被这样套利，除非一种商品被固定只能用一种货币购买绑定锁死——这种情况下，这类商品就是比特币的代理。目前来看，比特币唯一绑定购买的商品是其他的加密数字货币，甚至有的还不行。</p>\n<p data-pid=\"cDB_fQqC\">（*）上面这一段套利的意思是：因为比特币和主流法币的汇率不稳定且自由市场自发的会出现套利行为，所以用比特币固定的去定价日常商品和服务是不可能的。假设一个人用比特币定价一箱啤酒因为比特币波动太大，而套利者一直存在，那么这个商贩平时啥事都别做了，每时每刻都不断修改报价了。</p>\n<p data-pid=\"mmI_2wU9\">（*）这里的锁定某类商品必须用一种货币清算恰是当今石油-美元体系的方式，即强制用美元清算石油来使得美元的价值始终是存在的，美元成了纸原油，也就是一个代理机制。而比特币作为货币来看的话，唯一用它来购买的只有其他币这是个循环论证了。</p>\n<p data-pid=\"dYhHHsPo\">（*）当一个货币能且只有它能购买某类大家都需要的商品时，它必然是有价值的。就好比当只有粮票能购买到粮食时，粮票也产生了一种货币属性是可流通的。现在目前全球很多货币的央行的资产负债表里的资产是美元，本身是个二级锚定机制，美元是原油的一级代理，那么这些央行资产表里是美元的货币就是原油的二级代理。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"nKkt89Lf\">Bimetalism did not last long [11], nor could commodities last as currencies in developed economies[12]. More generally, the reasons multiple currencies exist (in the absence of pegs) is because there is not enough globalization and markets are not entirely free between currency zones. And some goods and services, \"such as haircuts and auto repair cannot be traded internationally\" [13] ; they are not, to use the language of quantitative finance, arbitrageable. </p>\n<p data-pid=\"rM2f791b\">金银双本位制度并没有持续很久[文献11]，商品本位制也没有在发达国家也没持续很久[文献12]。总的来说，目前还有如此多的货币种类存在（在非挂钩货币的情况下），是因为全球化的程度没到那个程度且国家之间的市场也不是彻底全面的开放的。有些商品和服务比如理财或者汽车维修在国际间是非贸易品[文献13]；用量化金融术语来说，它们不能被「套利」。</p>\n<p data-pid=\"Akp-Aajg\">（*）发达国家的理发师和汽车维修师的收入数倍于欠发达国家，并非是因为他们的服务好很多，也并没有引发发达国家的人都集体跑去欠发达国家修车和理发，那是因为存在国界和距离。这也是经济学里说的<i>非可贸易商品</i>的概念。如果所有的商品和服务都在零运费和零关税的情况下可以自由贸易，那么套利会抹平所有的价差。但真实的世界里是不可能这样理想化的。所以才会出现多币种同时存在且没有被套利抹平一切。固定挂钩汇率的情况除外，例如港币挂钩美元，那在经济学意义上，它们名字不一样，但其实是一种货币。</p>\n<p data-pid=\"exBdouV7\">（*）这是补充说明上面那一段套利会让货币互相趋平的一个补丁，按照上面那一段世界就不应该有那么多种货币同时存在了，双币制和单一商品制不成立是好解释了，但无法解释当今世界货币林立。这里给的补丁是真实的世界套利不是那么理想化的。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"aPOR5E77\">In 2021, the governments (central and local) share of GDP in Western economies is around 30-60%, one order of magnitude higher than it was in the 1900s. Government employees and contractors get paid in fiat currency; taxes are collected similarly <img src=\"https://www.zhihu.com/equation?tex=%5E%7B13%7D\" alt=\"^{13}\" eeimg=\"1\"></p>\n<p data-pid=\"de8BLBsI\">在2021年，西方主要发达经济体的政府（包括中央和地方）占据了GDP大概30%~60%的经济活动总量。这个比1900年代那时候比整整高出了一个数量级。政府雇员和合同工们是以法币形式被支付工资和报酬的，交税也会变得很简单容易 <img src=\"https://www.zhihu.com/equation?tex=%5E%7B13%7D\" alt=\"^{13}\" eeimg=\"1\"> 。</p>\n<p data-pid=\"OSjsRvUg\"><img src=\"https://www.zhihu.com/equation?tex=%5E%7B13%7D\" alt=\"^{13}\" eeimg=\"1\">The use of the designation \"fiat\" may be a misleading stretch of language: money is not created by edict but largely via credit, by governments or the private sectors — and both lenders and borrowers need the least volatile currency.</p>\n<p data-pid=\"yyNRxGqr\">使用「法币」一词来描述在语义上容易产生望文生义的误会；货币并不是由法令来创造出来的而是信用创造出来的。政府或者其他私人部门——借贷双方都需要一个波动比较小的通货。</p>\n<p data-pid=\"w_UEDf8_\">（*）这里其实主要讲的是货币场景的争夺，倘若真的有一天有一种货币要和法币竞争，那作为货币属性的竞争本质上是在竞争使用场景。也就是要把 <img src=\"https://www.zhihu.com/equation?tex=MV%3DPQ\" alt=\"MV=PQ\" eeimg=\"1\"> 右边的用于支付的商品服务的量给提上来。现在政府已经占据了GDP活动的三成到六成了，那么政府只要坚持用法币支付报酬和收税，又有什么东西能和政府法定的法币来竞争呢？用更币圈的话术阐述：政府已经掌握了货币使用场景的51%攻击了。</p>\n<p data-pid=\"vxlMtyFO\">（*）也不用过于悲观，法币其实并不是政府法令凭空创造的，也是要借其信用做支撑的。津巴布韦政府滥发货币依然是其国家唯一指定的法定货币，但本地已经被弃用了。所谓法币，依然是要用信用支撑的，不是一个敕令就大家所有人都必须认的。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"JnbsUqo-\">Finally, while within a modern currency zone a bimetallic style dual currency cannot easily exist, the same limitations exist between currency zones; parity between currencies tend to be subjected to volatility bounds. An observation we currency option traders made while doing cross-currency volatility arbitrages is that the volatility of a currency pair is inversely proportional to the trade between the two currency zones — countries heavy into trade such as Hong Kong, Saudi Arabia, the UAE, and Singapore (at some point) have maintained explicit pegs to the U.S. dollar or some basket. There could be an interactive relationship between trade and volatility: one can argue that the stability of a currency-pair (adjusted for the yield curve) encourages trade and trade in turn brings stability to the pair <img src=\"https://www.zhihu.com/equation?tex=%5E%7B14%7D\" alt=\"^{14}\" eeimg=\"1\"><img src=\"https://www.zhihu.com/equation?tex=%5E%7B15%7D+\" alt=\"^{15} \" eeimg=\"1\"> .</p>\n<p data-pid=\"vlyKAy3F\">在一个地区双币制的存在是很难的，相同的情况在两个货币区之间也存在着约束效应；货币之间也存在着波动率的边界。我们汇率期权交易员能明显的观察到的现象是：当我们做跨币种的波动率套利交易的时候汇率的波动率和这两个货币区之间的贸易量存在反比关系。和美国贸易非常密切的地区比如香港，沙特阿拉伯，阿联酋和新加坡（有时候）会出现货币和美元非常挂钩的情况。在汇率的波动率和贸易的密切程度之间会有互动关联的联系。人们可以说货币兑之间的稳定（在收益率曲线平价调整后）促进了贸易，而贸易又反过来促进了货币兑的稳定<img src=\"https://www.zhihu.com/equation?tex=%5E%7B14%7D\" alt=\"^{14}\" eeimg=\"1\"><img src=\"https://www.zhihu.com/equation?tex=%5E%7B15%7D+\" alt=\"^{15} \" eeimg=\"1\">。</p>\n<p data-pid=\"5uRuN8zV\">（*）这个结论和观察并不意外，我们理解了上文的套利活动的频繁存在就能理解为什么互相贸易比较频繁的两个地区的货币汇率会偏向于稳定了。</p>\n<p data-pid=\"UB_k6wK9\">（*）期权是一种衍生品，本身是交易一个标的的波动率的，即可以下注它的波动变大和变小。在汇率的期权市场交易就是在交易某两个货币之间汇率变动的波动剧烈程度。所以汇率的期权市场最能直接观察到该汇率兑的稳定性。</p>\n<p data-pid=\"8uHhgPNs\">（*）这个之间也存在着一种自我加强的正反馈过程，稳定的汇率使得两国之间的贸易并不需要太多考虑汇率波动的风险，而因为不用考虑汇率波动的风险，那么两个之间的贸易会增大而这个增大又加强了汇率的稳定。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"wckXbxw0\"><img src=\"https://www.zhihu.com/equation?tex=%5E%7B14%7D\" alt=\"^{14}\" eeimg=\"1\">Currency pairs often show fake volatility as the spot price can be fluctuating, but forward contracts do less so, owing to interest rate adjustments in the weak currency: interest rates rise to compensate holders for the devaluation. </p>\n<p data-pid=\"3P1AlRid\">货币兑经常出现很多假的高波动，通常出现在现汇市场；不过远期市场很少这样，因为弱势货币的利率调整的关系，利率上升会补偿持有者的贬值。</p>\n<p data-pid=\"UpQHCgZs\">（*）这里讲的是汇率市场的平价定律，意思是实际货币兑之间的平稳性要比现汇市场的波动率看上去要小。这里并不改变上面通过汇率期权市场观察汇率稳定性的有效性。因为期权定价锚定的也是标的物的未来的价格，汇率期权定价定的外汇远期的波动率而非即期汇率的波动率。所以塔勒布作为汇率期权交易员的观察没问题。</p>\n<p data-pid=\"thimVUzj\"><img src=\"https://www.zhihu.com/equation?tex=%5E%7B15%7D+\" alt=\"^{15} \" eeimg=\"1\"> .We note here that quantitative finance operates along the lines of neoclassical economic theory in that both share a central principle: absence of arbitrage, which maps to the law of one price — the former, a concept initially aimed at goods and services, may be broadened to include asset valuation [14]. When we apply the law of one price to currencies, we realize using basic arbitrage arguments that the recent globalization does not allow for different currencies to coexist in the same marke: one must win</p>\n<p data-pid=\"vlmFAtZL\">我们注意到量化金融和新古典主义经济学都遵循的原则：无风险套利不存在假设和一价定律，前者包括了所有的商品和服务，应该囊括资产定价在内[文献14]。当我们应用一价定律在货币上的时候，我们意识到用最基本的套利规则那么当今全球化的请下事实上不允许同一个市场里存在两种不同的货币，有一个必须赢家通吃。</p>\n<p data-pid=\"mGm5Rz4G\">（*）这是另外一个金融学话题，和主旨无关，不展开。</p>\n<p data-pid=\"h5De2y7U\">Now bitcoin, as seen in Fig.1 has maintained extremely high volatility throughout its life (between 60% and 100% annualized) and, what is worse, at higher prices, which makes it’s capitalization considerably more volatile, rising in price as shown in Fig. 2 — is it too volatile to fail?</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-3d9041b0ec70cadf3243376d78f5fae2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"548\" data-rawheight=\"820\" class=\"origin_image zh-lightbox-thumb\" width=\"548\" data-original=\"https://pic3.zhimg.com/v2-3d9041b0ec70cadf3243376d78f5fae2_r.jpg\"></figure><p data-pid=\"CuH23QkS\">现在再来看比特币的波动率，图1显示比特币在其生命周期里持续产生了超高的波动率（年化大概60%到100%之间）更糟糕的是，其价格越高，使得它的资本化率更加动荡。</p>\n<p data-pid=\"eHLMMoI6\">（*）总结一下这一整大断的意思：一个东西要成为货币属性的东西，它必须不能和商品的价值之间产生太大的波动率，因为这个世界是存在频繁套利的且普遍遵循一价定律，那么频繁套利会使得改候选货币无法在真实的日常的生活里充当货币的角色，因为交易成本会高到不可忍受（买卖双方要过于频繁的修改交易）。并且这个推论放到国际货币市场上也是完全成立的，能被作为可贸易货币的东西会互相稳定下来，做不到的这不可能成为可贸易货币圈子里的一员。底层的例外是如果你能锚定一种广泛被需要的商品必须用此种货币来交易，但比特币能锚定交易的只有其他币，没有任何一种商品可以。除了萨尔瓦多的公民身份之外一个都没有。货币自由竞争的场景下因为政府活动已经占了GDP的三成到六成，那么在使用场景的竞争上比特币也不可能是法币的对手。</p>\n<hr>\n<h3>THE DIFFICULTY WITH INFLATION HEDGES</h3>\n<h3>对冲通胀的难题</h3>\n<p data-pid=\"j-tYsF5J\">This does not mean that a cryptocurrency cannot displace fiat –it is indeed desirable to have at least one <i>real </i>currency without a government. But the new currency just needs to be more appealing as a store of value by tracking a weighted basket of goods and services with minimum error.</p>\n<p data-pid=\"tgp43CKE\">这并不是说加密数字货币这个形式一定不能取代法币，一个没有政府背景的「真<b>·</b>货币」是一个非常棒的主意。不过这个新的货币需要一个更好的锚定一揽子商品和服务的表现（更小的跟踪误差），让它更能作为价值的存储。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"MoQC-qim\">Displacing fiat is not easy, and has been done locally — though no single item has proved to be permanent and the difficulty is best represented in the following example. During the 1970s, the Italian national telephone tokens, the <i>gettoni</i>, were considered acceptable tender, almost always accepted as payment. The price of the espresso when expressed in lira varied over time, but it remained sticky to the <i>gettone</i>. For a while the <i>gettone </i>proved the closest money to track the Fisher Index across 12 communes[15] <img src=\"https://www.zhihu.com/equation?tex=%5E%7B16%7D\" alt=\"^{16}\" eeimg=\"1\"> . And while the <i>gettoni</i> worked for daily purchases such as espresso, it is doubtful that they could have been used as payment for an Alfa Romeo [17].</p>\n<p data-pid=\"H60yfv_0\">取代法币不是一个容易的事情，哪怕就是在局部地区而言也是——目前没有一个例子可以证明永久性的法币的替代品。我们现在下面的例子里可以很好的体现出来。在1970年代，意大利国际通话公司发行的token，叫<i>gettoni</i>，被认为是可接受的类货币，几乎都已经是可以用来做日常支付了。以里拉计价的浓咖啡的价格一直在波动，不过以<i>gettoni</i>来定价倒是物价很稳定。一度<i>gettoni</i>被认为 最接近追踪12个社区里的费雪指数的货币。虽然大家都在一段时间里认可<i>gettoni</i>能买到咖啡，不过对于能不能用于买一台阿尔法.罗密欧车表示怀疑。</p>\n<p data-pid=\"yOqi7MJo\">（*）这里指的不是代金券，比如星巴克发的以人民币计价的礼品券和这里完全是两个概念。这个<i>gettoni </i>币和里拉没有固定的兑换关系。而它在一定情况下追踪物价要比里拉好，那居民就更乐意拿它做货币使用（买卖双方都希望获得和物价最小的误差方差）。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"UGxdRx-8\">Considering that communications get cheaper over time, the notion of a telephone call is today, in the Zoom days, obsolete. So the gettone story illustrates the fact that, owing to technological changes, in the long term, no single item, such a telephone call, will permanently track inflation indices and act as a store of value. Even categories have their weights naturally revised over time: the share of food and clothing declined by almost threefold as a proportion of Western consumers expenditure since the great recession. </p>\n<p data-pid=\"tZUbxTgj\">Thus we can look at an inflation hedge as the analog of a minimum variance numeraire.</p>\n<p data-pid=\"aOeWYvJK\">考虑到通讯的成本越来越低，在有了Zoom的日子里，打电话的概念都过时了。所以这个gettone 的故事说明了一个事实：由于技术变革，在长期来看，没有一个单独的品类比如电话业服务能长期的追踪通胀指数且作为一个价值存储。哪怕是不断的调整指数里各品类的权重也不行，食物和衣物在消费者中的占比自从大萧条以来已经下降了10倍了。</p>\n<p data-pid=\"0Gfa9tBK\">因此，我们应当把通胀对冲视作是对计价单位的最小方差化。</p>\n<p data-pid=\"WP-pzcJC\">（*）意思是那家电话公司的积分在一段时间内和物价高度正比相关，但因为通讯业的飞速发展，这个服务大幅贬值。我们很难找到一揽子商品能保持稳定，因为世界是在不断变化的，今天昂贵稀缺的商品和服务明天可能就变得不值钱。要找到一个东西对整体物价保持稳定是不太可能都。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"2WFnRT0f\"><i>Let us assume that there exists an efficient inflation hedge for period </i><img src=\"https://www.zhihu.com/equation?tex=%5Bt_%7B0%7D%2CT%5D\" alt=\"[t_{0},T]\" eeimg=\"1\"><i>for an index methodology, the one in which the index, constantly revised, is the most stable when it is as a numeraire (adjusting for interest and dividend payments). </i></p>\n<p data-pid=\"xlygAH4c\">让我们假设存在一种有效的通胀对冲，满足在周期<img src=\"https://www.zhihu.com/equation?tex=%5Bt_%7B0%7D%2CT%5D\" alt=\"[t_{0},T]\" eeimg=\"1\">内实现一个指数的制定。在这个指数是不断调整，使得它作为一个计价单位最大的稳定化（利率和分红的情况都被考虑在内）</p>\n<p data-pid=\"XcDW64_5\">（*）这里数学化了一个理想计价单位的目标，也就是对通胀的完美对冲，一个方差最小的物价跟踪指数。把这个方差最小化的物价跟踪指数做一个ETF的话，就是完美货币了。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"PCL3lNNZ\">Can one find her or his own hedge?</p>\n<p data-pid=\"kOtKPMrg\">In the parable of the Christ in the temple, Jesus kicked the money changers out of the temple of Jerusalem... Now one wonders why were there were money changers in a place of worship? The answer is that the temple took for currency only the shekel of Tyre, known for its 90% silver content and its ancestral quality control [18] <img src=\"https://www.zhihu.com/equation?tex=%5E%7B17%7D\" alt=\"^{17}\" eeimg=\"1\"> . </p>\n<p data-pid=\"UKSwoiFk\">Simply, there is a free market for fiat currencies, with the most reliable<i> at the time</i> used by third parties. Before the Euro, there were plenty of currencies in Europe. But long term contracts, investments, and commitments were evaluated in deutschmarks or Swiss francs, sometimes the U.S. dollar; drachmas, liras, and pesetas were there mostly for petty expenditures. So what we had was competition between fiat currencies just as with the shekel-of-Tyre!</p>\n<p data-pid=\"6HyGSFRv\">This competition provides for a vastly more convenient monetary store of value. For practitioners of quant finance, the most effective inflation hedge can be a combination of bets which includes the short bond.</p>\n<p data-pid=\"SjY1O583\">那人们能找到他或她的完美对冲物吗？</p>\n<p data-pid=\"5tWuhuVW\">在基督教的典籍里，耶稣把兑换货币的人赶出耶路撒冷的殿……现在有人好奇为什么在一个礼拜的场所里会出现一个兑换货币的人？答案是那个圣殿只收shekel-of-Tyre这一种货币，以90%的银含量和祖传的质量控制而闻名。</p>\n<p data-pid=\"TAaSvQWQ\">很简单的，在法币世界里有一个自由市场会由第三方使用者选出<i>那个时间段</i>里最靠谱的货币。在欧元出现之前，欧洲有许多许多种货币。但长期以来，投资和商业承诺都是以德国马克或者瑞士法郎来约定的，有时候是美元。德拉克马、里拉、比塞塔是最广泛使用的小额支付的工具。所以法币之间的竞争就好比是这个时代的shekel-of-Tyre！</p>\n<p data-pid=\"0n_ytO7T\">（*）这里的意思是货币自由竞争就解决问题了，不是德国和瑞士的人在做大额的投资协议的时候一样是会选择德国马克或者瑞士法郎。这个是自由竞争选择的结果。</p>\n<p data-pid=\"UqTRd4-B\">这种竞争提供了一种方便得多的货币价值储存方式。对于量化金融的参与者来说，最有效的通胀对冲可以包含一系列的头寸组合包括一些短期债券。</p>\n<p data-pid=\"TVFTVH9_\">（*）这里的意思是要创造出一种完美的通胀对冲物使得物价方差最小化是不太现实的，让自由市场发挥作用，让法币们卷起来就可以了。如果懂量化金融，什么短期债券之类的组合大家都可以比赛去追踪最好的通胀对冲，量化金融师们也卷起来。</p>\n<hr>\n<h3>SOME ADDITIONAL FALLACIES </h3>\n<h3>其他一些谬论</h3>\n<p data-pid=\"aUNFZXML\">1) <i>Fallacy of libertarianism</i>: The belief that bitcoin is an offshoot of libertarian and Austrian economics has no solid backing — it has the same lack of rigor as the one behind the belief that cryptos represent a \"hedge for inflation\". Spitznagel [19] had already, in 2017, debunked the notion that bitcoin can be a safe haven (as discussed next) or that the principles of Austrian economics can be invoked in support of cryptocurrencies.</p>\n<p data-pid=\"B3dEnt5G\">1）对于比特币是自由主义和奥地利学派的分支是完全没有支撑的看法——就好像那些相信加密数字货币能对冲通胀一样不严谨。Spitznagel [文献19]在2017年已经揭穿了比特币是避险天堂的谎言（下文会讨论），也证伪了加密数字货币是被奥地利学派支持的看法。</p>\n<p data-pid=\"DatB-EAD\">Comment 4: Law vs. Regulations vs. Rules </p>\n<p data-pid=\"9KtSmPfG\">评论4：法律VS监管VS规则</p>\n<p data-pid=\"v-cn_TeS\"><i>Libertarianism is about the rule of law in place of the rule of regulation. It is not about the rule of rules. </i></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"bxGctOxl\">Libertarianism is fundamentally about the rule of law in place of the rule of regulation. It is not about the rule of rules — mechanistic, automated rules with irreversible outcomes. The real world is fraught with ambiguities and even Napoleonic law (far less mechanistic than crypto rules) cannot keep up — to wit, as a risk management directive, most commercial contracts traditionally prefer forums of dispute resolution to be under the more flexible Anglo Saxon common law (London, NY, Hong Kong) that rules on balance, intent, and symmetry in contracts. This applies of course to quantitative finance products such as complex derivatives contracts for which one needs to minimize the legal risk. Nor is libertarianism about total distrust.</p>\n<p data-pid=\"1aamzYo6\">自由主义的基础是用法律来取代监管，而不是用规则来统治——机械的自动化的规则并且产生不可逆转的结果。真实的世界上充斥着模糊性的，哪怕类似拿破仑法典（远没有加密货币机制那么机械）也不能完全跟上。在风险管理大部分合同都是根据普通法的原则（伦敦，纽约，香港）来裁定的。在量化金融领域，诸如复杂的金融衍生品合约双方当让希望最小化法律风险。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"0e59ELUb\">2)<i> Fallacy of safe haven</i>, I (protection for financial tail risk): The experience of March 2020, during the market panic upon the onset of the pandemic, when bitcoin dropped farther than the stock market —and subsequently recovered with it upon the massive injection of liquidity is sufficient evidence that it cannot remotely be used as a tail hedge against systemic risk. Furthermore, bitcoin appears to respond to liquidity, exactly like other bubble items. It is also uncertain what could happen should the internet experience a general, or an even a regional, outage — particularly if it takes place during a financial collapse.</p>\n<p data-pid=\"WIN3pNHR\">2）关于避险天堂的谎言 I（对于尾部风险的保护）：从2020年3月的经验来看，当市场陷入恐慌的时候，比特币跌的甚至比股市还要多——以及随后在大规模注入流动性后的复苏，足以证明它根本不能被用作尾部对冲系统性风险。并且，比特币表现出的性质是对流动性的正比反应，就和其他泡沫资产是一模一样的。很难想象当互联网出现大问题的时候，甚至是区域性质的大停电会不会出现大问题——尤其是这个时候恰好发生金融危机。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"QUWM1cP2\">3)<i> Fallacy of safe haven</i>, II (protection from tyrannical regimes): To many paranoid antigovernment individuals and of others distrustful of institutions, bitcoin has been marketed as a safe haven — also with an open invitation to fall for the fallacy that a volatile electronic token in a public setting is a place for your hidden treasure. </p>\n<p data-pid=\"J3HK0Zxu\">By its very nature, bitcoin is open for all to see. The belief in one’s ability to hide one’s assets from the government with a public blockchain easily triangularizable at endpoints, and not just read by the FBI but also by people in their living rooms, requires a certain lack of financial seasoning and statistical understanding — perhaps even a lack of minimal common sense. For instance a Wolfram Research specialist was able to statistically detect and triangularize \"anonymous\" ransom payments made by Colonial Pipeline on May 8 in 2021 [20] — and it did not take long for the FBI to restore the funds.</p>\n<p data-pid=\"c775dfyS\">3）关于避险天堂的谎言 II（对抗专制暴政）：太多过于敏感的反政府主义者和不信任机构的人表示比特币是一个安全的避险天堂，它能帮你隐匿你的财产。</p>\n<p data-pid=\"FyTTnddh\">不过就其性质而言，比特币对所有人都是开放的。就政府层面而言其实用技术手段很容易找到一个人，不用FBI出手，所有人在自己家客厅里就可以做到，只需要一些财务和统计学上的知识。举个例子，Wolfram 的一个研究员就能用统计学的办法来把2021年5月8日的赎金的幕后匿名者给抓出来。FBI去追还失款都没用多久。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"Gv4-9u_6\">We can safely assume that government structures and computational power will remain stronger than those of distributed operators who, while distrusting one another, can fall prey to simple hoaxes.</p>\n<p data-pid=\"1UXkKdJ9\">In the cyber world, connections are with people one has never met in real life; infiltration by government agents has proven to be extremely easy18. By comparison, the mafia required a Sicilian lineage for \"friends of ours\" for security clearance. One never knows the degree of governmental surveillance and its real capabilities.</p>\n<p data-pid=\"FmTQ3dkw\"> The slogan \"Escape government tyranny hence bitcoin\" is similar to advertisements in the 1960s extolling the health benefits of cigarettes.</p>\n<p data-pid=\"JndKE3W0\">我们可以有把握地认为，政府结构和计算能力仍将强于那些相互不信任的分布式运营商。在网络世界里，网上的人们互相其实在现实生活里互相都不认识，政府要渗透可太容易了。相比之下，黑帮要求西西里血统来作为自己人的安全保障。人们永远不知道政府监控的程度及其真正的能力。</p>\n<p data-pid=\"4dO8zLrs\">「逃离政府暴政，比特币应运而生」的口号就好比1960年的吹捧香烟有益健康的广告。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"VSvHCSda\">4) <i>Fallacy of the Agency problem</i>: One might have the impression that, by being distributed, Bitcoin would be democratic and reduce the agency problem perceived to be present among civil servants and bankers. Unfortunately, there appears to be a worse agency problem: a concentration of insiders hoarding what they think will be the world currency, so others would have to go to them later on for supply. They would be cumulatively earning trillions, with many billionaire \"Hodlers\" — in comparison the \"evil civil servants\" behind fiat money make, at best, lower middle class wages. This situation represents a wealth transfer to the cartel of early bitcoin accumulators. </p>\n<p data-pid=\"DbDJM7fG\">4）解决代理人问题的谎言：有人可能听闻过因为去中心化，比特币的世界是更民主公平的且能解决公务员和银行家带来的代理人问题。不过很不幸，现实是比特币世界的代理人问题更严重。一群内部人士集中在囤积他们认为将成为世界货币的东西，所以其他人以后必须去他们那里获取供应。他们能逐渐赚万亿，并且有许多十亿身家的「持币人」，相比之下玩儿的公务员只赚取了比较中等的工资。这种情况代表着财富向早期比特币积累者的卡特尔模式转移。</p>\n<hr>\n<h3>CONCLUSION</h3>\n<h3>结论</h3>\n<p data-pid=\"KoC-2J-l\">We have presented the attributes of the blockchain in general and bitcoin in particular. Few assets in financial history have been more fragile than bitcoin.</p>\n<p data-pid=\"N_ZHiP1c\">我们已经介绍了区块链的一般属性和比特币的具体属性。在金融历史上，很少有资产比比特币更脆弱。</p>\n<p data-pid=\"Rmi0QX4S\">The customary standard argument is that \"bitcoin has its flaws but we are getting a great technology; we will do wonders with the blockchain\". No, there is no evidence that we are getting a great technology — unless \"great technology\" doesn’t mean \"useful\". And at the time of writing —in spite of all the fanfare — we have done still close to nothing with the blockchain.</p>\n<p data-pid=\"2EgpzyLv\">通常的标准论点是「比特币虽然有很大的缺陷但它依然是一个伟大的技术创新，我们会期待区块链技术发挥作用」。不，现在没有任何证据表明区块链技术是一项伟大的技术创新——除非伟大的技术创新不意味着有用。并且在写作的当下，尽管大肆吹捧我们始终没有找到区块链的任何真实应用。</p>\n<p data-pid=\"To1mSlwy\">So we close with a Damascus joke. One vendor was selling the exact same variety of cucumbers at two different prices. \"Why is this one twice the price?\", the merchant was asked. \"They came on higher quality mules\" was the answer.</p>\n<p data-pid=\"Rk9DKIqT\">We only judge a technology by how it solves problems, not by what technological attributes it has.</p>\n<p data-pid=\"YaY1DC8A\">我们用一个大马士革的笑话来结束。一个小贩以两种不同的价格卖着完全相同的黄瓜。「为什么它们的价格不一样？」一个商人问道。答案是：「因为那个贵的是用更贵的驴运过来的」。</p>\n<p data-pid=\"_zJPtBpz\">我们只以解决了什么问题来判断一个技术的价值，不是以技术性质来判定的。</p>\n<hr>\n<h3>REFERENCES</h3>\n<p data-pid=\"ZdVA1ssv\">[1] S. Nakamoto, “Bitcoin: A peer-to-peer electronic cash system,” Tech. Rep., 2008.</p>\n<p data-pid=\"f0EoxNjB\"> [2] J. Von Neumann, “Various techniques used in connection with random digits,” Appl. Math Ser, vol. 12, no. 36-38, p. 3, 1951. </p>\n<p data-pid=\"A2KGLRi3\">[3] A. Narayanan and J. Clark, “Bitcoin’s academic pedigree,” Communications of the ACM, vol. 60, no. 12, pp. 36–45, 2017.</p>\n<p data-pid=\"YQ6Ir-zW\"> [4] O. J. Blanchard and M. W. Watson, “Bubbles, rational expectations and financial markets,” NBER working paper, no. w0945, 1982. </p>\n<p data-pid=\"rOZuzgTo\">[5] M. K. Brunnermeier, “Bubbles,” in Banking Crises. Springer, 2016, pp. 28–36. </p>\n<p data-pid=\"bXB3IgFM\">[6] D. Graeber, Debt: The first 5000 years. Penguin UK, 2012.</p>\n<p data-pid=\"9xhc08Pz\">[7] N. N. Taleb, Antifragile: things that gain from disorder. Random House and Penguin, 2012.</p>\n<p data-pid=\"rAWFwYyH\">[8] D. Ricardo, Reply to Mr. Bosanquet’s practical observations on the report of the Bullion Committee. J. Murray, 1811, vol. 10.</p>\n<p data-pid=\"XvvE1JnY\"> [9] ——, Proposals for an economical and secure currency, 1816.</p>\n<p data-pid=\"xeTxyuFz\"> [10] W. S. Jevons, A Serious Fall in the Value of Gold Ascertained: And Its Social Effects Set Forth. E. Stanford, 1863.</p>\n<p data-pid=\"b8GL6vNL\">[11] F. R. Velde and W. E. Weber, “A model of bimetallism,” Journal of Political Economy, vol. 108, no. 6, pp. 1210–1234, 2000. </p>\n<p data-pid=\"PVCXzGhC\">[12] T. J. Sargent and M. Wallace, “A model of commodity money,” Journal of Monetary Economics, vol. 12, no. 1, pp. 163–187, 1983. </p>\n<p data-pid=\"2KaT7h93\">[13] P. Krugman, M. Obstfeld, and M. Melitz, “International economics: Theory and policy,” 2017. </p>\n<p data-pid=\"CIO0E9FC\">[14] S. A. Ross, Neoclassical finance. Princeton University Press, 2009, vol. 4. </p>\n<p data-pid=\"9VUrH3mQ\">[15] L. Campiglio, “Un’analisi comparata del sistema dei prezzi nei venti comuni capoluogo di regione,” Rivista Internazionale di Scienze Sociali, vol. 94, no. 3, pp. 329–377, 1986.</p>\n<p data-pid=\"qIxyhzDL\"> [16] M. Nair and R. Emozozo, “Electronic currency in africa: M-pesa as private inside money,” Economic Affairs, vol. 38, no. 2, pp. 197–206, 2018. </p>\n<p data-pid=\"3RmIRF4O\">[17] K. Colucci and C. Moiso, “Il fenomeno delle monete virtuali: opportunità per telecom italia,” Notiziaro Tecnico /Telecom Italia, vol. 1, pp. 76–89, 2014. </p>\n<p data-pid=\"2SAMOjOt\">[18] J. Murphy-O’Connor, “Jesus and the money changers (mark 11: 15-17; john 2: 13-17),” Revue Biblique (1946-), pp. 42–55, 2000. </p>\n<p data-pid=\"XzpPxH5X\">[19] M. W. Spitznagel, “Why cryptocurrencies will never be safe havens,” Von Mises Institute, 2017. [20] D. Porechna, “Darkside update: The fbi hacks the hackers?” Wolfram Research, June 2021.</p>\n<hr>\n<p data-pid=\"h26qMIjm\">（*）我肝太晚了，读后感以后再写，感兴趣的关注追更。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/xu-zhe-42?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">许哲</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/543127242?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"派早报: iQOO 10 系列手机发布、高通推出骁龙 W5+ Gen 1 等","date":"2022-07-20 00:41:59","description":"多亲 F22 Pro 发布，微信视频号上线原生广告等。<a href=\"https://sspai.com/post/74356\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/74356"},{"title":"某校金融学老师贬低劳动价值论、吹捧效用价值论，应该如何评价两者？","date":"2022-07-19 10:28:20","description":"\n<p data-pid=\"WkR4iL3e\">这个问题下面逐渐吸引了诸多马克思主义爱好者和反对者，感觉早晚发展成“为什么现代西方经济学抛弃了劳动价值论？”</p>\n<a href=\"https://www.zhihu.com/question/30436087\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/zhihu-card-default.jpg?source=b1748391\" class=\"internal\">为什么现代西方经济学抛弃了劳动价值论？</a><p data-pid=\"Yv0Sp-84\">作为马克思主义爱好者、西方经济学学生，我很反感讨论只围绕马克思、恩格斯的原著展开。学界公认（常识也是如此）《资本论》是未完成的杰作，很多论证留给了后续的马克思主义学者。离开他们的研究只抠字眼式地讨论马恩原典未免过于形而上。</p>\n<p data-pid=\"r-p4uwFs\">指责劳动价值论不能和效用价值论对比也未免过于“圈地自萌”。学术概念都是在对比中澄清的，言必称xx概念不能和xx概念对比毫无意义，像是小圈子里的自说自话。只有碰撞、对话才能得到更清晰的认知。</p>\n<p data-pid=\"BLN7ROXZ\">另外，对于马克思主义的一切理论都抱有成见、认为应该“扫进垃圾堆”，是无助于理解经济运行规律的。要知道无论中外的哪本《经济思想史》教材都会给马克思单独列一章，这足以说明其对现代经济的重要影响，也说明理解马克思的重要性。如果认为马克思的什么理论错了，就说出自己的逻辑，上来就给一个价值判断只能表达立场，不能表达观点。</p>\n<hr>\n<p data-pid=\"sAyNtpQg\">先说怎么看待。感觉遇到这个问题的大多数是本科生，因为经济学的一套理论和高中时政治课的《经济生活》教材有太大的区别，于是感到很迷茫。十二年的初等教育已经塑造了一个思维体系，忽然转换比较艰难，最起码不会一开始就接受全新的思考方法。从问题描述看，题主很不能接受效用价值论（用了“吹捧”这个贬义词），如果你想反对，那么多看看论文，试着自己写篇文章去反驳老师的观点。无论最后你发现你被说服了还是真的反驳成功了，这都是一次很好的思维锻炼。</p>\n<p data-pid=\"JoICjCWM\">另外，我想题主只是在讨论价值来自于哪里，那就不必谈论什么如果没有xx价值论，xxx理论就不复存在。诚然，劳动/效用价值论是很多理论的构建根基，但这不是劳动/效用价值论不能被反驳的理由，这样去论证反而本末倒置了。对于经济学的学生或是学者来说，梳理清楚两个概念的来源、找到异同点，才是更好的理解方式。</p>\n<p data-pid=\"jmEmoTLe\">再来谈效用价值论和劳动价值论。</p>\n<p data-pid=\"nTViCx8e\">前面的回答恰好说明了经济学文科生太少，居然都混淆了价格和价值……</p>\n<p data-pid=\"J8wkK7R4\">首先，效用价值论并非来自劳动价值论。</p>\n<p data-pid=\"VmIwFyXu\">效用这一概念来自功利主义（或者追溯到古希腊的享乐主义），人们追求可以让自己快乐的东西，回避会产生痛苦的东西，所有的个人都在追求总幸福最大化。根据边沁最初的定义，“所谓效用就是按照有利于扩大或减少当事者的幸福，或者换言之，按照有利于促进或阻碍那些幸福，来赞成或反对任何行动的原理。”而劳动被认为是“痛苦的”，因此需要“补偿”。最早的效用价值理论可以溯源到巴本，他认为一切物品的价值都来自它们的效用；无用之物，便无价值；物品效用在于满足需求；一切物品能满足人类天生的肉体和精神欲望，才成为有用的东西，从而才有价值。此外，巴本早于亚当·斯密（亚当·斯密也持劳动价值论），边沁早于马克思，所以效用价值论来自劳动价值论是不可能的。</p>\n<p data-pid=\"vTlTB-aa\">Arrow 和 Debreu（1954）的研究也不能说明效用价值论来自劳动价值论。原文假设，“For labor services, the amount supplied may be regarded as the negative of the rate of 'consumption', so that X_hi &lt;= 0 if h denotes a labor service.”这就是因为劳动具有负效用，被认为是痛苦的。而假设VII只是讨论了一个严格限制下的特殊情况，即“if no restriction is imposed on the amount (consumed) of some one type of \"productive\" labor, then it is possible to increase the output of at least one \"desired\" commodity (a commodity in D) without decreasing the output or increasing the input of any commodity other than the type of productive labor under consideration.”</p>\n<p data-pid=\"LXZ76lo-\">劳动价值论的核心观点在于，商品有价值（或称交换价值）和使用价值，价值来自正常社会生产条件下、社会平均的劳动熟练程度和劳动强度下，生产该商品所需的社会必要劳动时间，而部分学者认为使用价值与效用对应。供给和需求不决定价值而决定价格，价格是围绕价值波动的，不一定与价值相等。而马克思的劳动价值论最大的特征在于，除了劳动，其他所有要素都不能创造价值，土地、资本创造的价值都是错觉。这一论述反驳了萨伊的要素价值论，即反驳了将劳动与物质生产要素等同，视作一种普通的生产投入要素，只需支付工资就能得到。</p>\n<p data-pid=\"xnpUTR68\">其次，由于题主上的是金融学，想必系统学习过了效应价值，前面大多数回答也解释了效用价值有益处的地方。这里我就只介绍马克思主义经济学家们<b>如何“捍卫”劳动价值论</b>。</p>\n<p data-pid=\"Hiu2xUYt\">一部分学者<b>直接批判了效用价值论及其背后的逻辑</b>。国内学者卫兴华、郑治国、丁堡骏等学者对西方经济学的“效用价值论”作出了批判性的审视，指出了这一理论的庸俗性。主要的问题有两个方面：其一，效用比较到底是定性标准，还是定量标准？在比较水与钻石的“总效用”时，“边际效用论”使用的是“定性”标准，而不是“定量”标准———也就是以满足人类需要的“重要性”来衡量水和钻石的“总效用”。但在比较水与钻石的“边际效用”时，“边际效用论”使用的却是“定量”标准，而不再是“定性”标准———也就是以物品数量的多少，来衡量水与钻石的“边际效用”。其二，不同物品的效用，在数量上如何比较？同种物品的效用，在“数量”上固然可以比较。但是，不同种类的物品，其效用在“数量”上如何进行比较？（这个问题，马克思有过客观的分析。对于“一夸特小麦=x量鞋油”的交换等式，马克思指出：这里的数量不是“效用”的数量，而是“劳动”的数量。）</p>\n<p data-pid=\"QzKEz6Ni\">另有一部分学者通过解决<b>价格和价值的一致性</b>，从而间接“捍卫”劳动价值论，即证明价格和价值的关系以佐证劳动价值论。价格与价值在数量上的不一致最早来自“<b>庞巴维克质疑</b>”（近年来，国内坚持这一质疑主要是晏智杰教授），面对这种质疑，很多马克思主义经济学家做了相关的“修补”。</p>\n<p data-pid=\"hTGnZlfa\">一种方法是，抽象掉单个商品的独特的满足人们需要的有用性，得到“<b>抽象的使用价值</b>”这一概念，将其定义为任何商品都具有的满足人们需要的有用性。许多抽象使用价值论者将使用价值作为商品的第一属性,作为研究商品交换和生产的基本范畴,而价值则成为使用价值的附庸(甚至完全可以取消)。这一研究范式的转化起源于对使用价值属性的辨析,并通过全面吸收效用价值论的基本论点来实现。批判者认为，这只是借用了马克思理论体系的外衣，其内含与西方经济学是一致的，也是对马克思主义经济学的颠覆。</p>\n<p data-pid=\"YIqO5sL9\">一种方法是，通过研究转形问题来解决这一差异，而转形问题的核心是“<b>证明价值决定生产价格</b>”。在转形问题的讨论中，可以按照对待劳动力商品的不同态度，分为A体系和B体系。其中A体系假设工人获得的是给定的实物形态的工资品，这一组商品的数量和构成是外生给定的，在价值和生产价格体系中相同。B体系则放弃了给定的实物工资假设，将工人获得的工资视为社会净产品价值的一部分。B体系的一个分支“新解释”派认为，劳动力商品的再生产并不属于典型的资本再生产，B体系的另一个分支“平均利润率不变”派认为，平均利润率在价值和生产价格体系下是相等的。</p>\n<p data-pid=\"_vaqz5n3\">一种方法是，<b>对劳动时间进行货币表达（“劳动时间的货币表达”，MELT）</b>。他们提出， 可以在强调货币和劳动时间关系的基础上重建马克思的劳动价值论。认为这是一种可操作的和可以在任何实际经济中进行测量的清晰的劳动时间货币表述方法。还有学者指出，“市场需求对于劳动价值的量化有着极为重要的作用。”“在一个部门中， 单个商品生产者生产的商品的价值量可以用社会必要价值量进行折算， 因此也是可以计算的。”</p>\n<p data-pid=\"T6JL4DIf\">还有一种观点是，<b>所有对价值数量的计算都毫无必要</b>。马克思明确指出过，“每一个商品不管你怎样颠来倒去， 它作为价值物总是不可捉摸的。但是如果我们记住， 商品只有作为同一的社会单位即人类劳动的表现才具有价值对象性， 因而它们的价值对象性纯粹是社会的， 那末不用说， 价值对象性只能在商品同商品的社会关系中表现出来。”“对人类生活形式的思索，……是从事后开始的， 就是说， 是从发展过程的完成的结果开始的。……因此， 只有商品价格的分析才导致价值量的决定， 只有商品共同的货币表现才导致商品的价值性质的确定。”因此，劳动价值论的要义并不在于求解 “相对价值量”的数量， 而是在于揭示隐藏在 “相对价值量”背后的价值的本质规定性。这种观点进一步从哲学的角度理解，认为 只有 “形式”能够被量化， 因为量化离不开形式， 承载量化并展现量化的， 只能是某种 “形式”，就像西方经济学中价格之于效用是一种形式。</p>\n<p data-pid=\"7X0hCi4q\">再来补充一些<b>西方经济学</b>的研究，看看经济学的最新进展如何理解效用价值论。</p>\n<p data-pid=\"yRX-L5h3\">效用有下面的性质：</p>\n<p><img src=\"https://pic4.zhimg.com/v2-102d825c2c6dbfa741fa323a8248f427_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1105\" data-rawheight=\"377\" data-watermark=\"watermark\" data-original-src=\"v2-102d825c2c6dbfa741fa323a8248f427\" data-watermark-src=\"v2-98d2f6e8f56ee83588b5fd1915bd328f\" data-private-watermark-src=\"v2-cb7d6e2fc6ccf4aaaf5f11ea6338c895\"></p>\n<p data-pid=\"QwWSzB3y\">然而，行为经济学、心理学的实验结果表明，这两条性质都被挑战了，换言之，理性人假设可能是不存在的（或者说，也需要假设前提）。具体来说，就是在数学期望大致相当的两个博弈中，被试者往往选择概率高而损益值小的博弈，但是会将概率低而损益值大的博弈以更高的价格出售，这就表明人们在选择与定价中表现出的偏好不一致（Lichtenstein 和 Slovic，1971；Pommerlme，1982； Reilly，1982）。【行为经济学还呈现了很多非理性现象，能够解释生活中的很多事件。】</p>\n<p data-pid=\"2TI8gt2T\">另一个关于劳动价值论和效用价值论在经济学内部的有趣争论是“剑桥资本争论”。知乎上已有大佬做了详细的阐述，在此不赘述。</p>\n<a href=\"https://www.zhihu.com/question/52216261\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\"internal\">剑桥资本争论（“资本”概念争论）是什么？如何理解论战双方的观点？</a><p data-pid=\"yYT9-1DR\">参考文献</p>\n<p data-pid=\"CjqkCqhG\">[1]斯坦利·L.布鲁, 兰迪·R.格兰特著, 邸晓燕. 经济思想史 (第七版)[M].经济思想史, （第七版）. 北京大学出版社, 2008.</p>\n<p data-pid=\"rzzMbXNe\">[2]Arrow K J, Debreu G. Existence of an equilibrium for a competitive economy[J]. Econometrica: Journal of the Econometric Society, 1954: 265-290.</p>\n<p data-pid=\"UgmE_POq\">[3]赵磊.“效用价值论”批判——从“效用价值”的逻辑出发[J].当代经济研究,2019(04):45-54+113.</p>\n<p data-pid=\"k7OFj2bo\">[4]邓肯·弗里,高伟,张苏.劳动价值论的最新发展[J].政治经济学评论,2008(01):18-41.</p>\n<p data-pid=\"dAGCRC6F\">[5]赵磊.“不能量化”证伪了劳动价值论吗?[J].政治经济学评论,2017,8(04):3-17.</p>\n<p data-pid=\"Qlirxj4Y\">[6]陈旸.从A体系到B体系:转形问题百年综述[J].清华政治经济学报,2014,2(01):53-84.</p>\n<p data-pid=\"XUQ5X5g3\">[7]荣兆梓.转形理论的现代表达及转形问题的最终解决评萨缪尔森的“奥卡姆剃刀”[J].经济学动态,2009,(10):45-51.</p>\n<p data-pid=\"5dU84vWh\">[8]Rabin M. Psychology and economics[J]. Journal of economic literature, 1998, 36(1): 11-46.</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/qiu-zhen-9757?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">芃芃其麦</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/447645647/answer/1767994448?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">158 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/525924663?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">人类如何评价欧美经济学家一味否定马克思劳动价值论，却未能由边际效用价值论自然而然提出边际劳动价值论？</a><br><a href=\"http://www.zhihu.com/question/53671906?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">真正的价格是技术关系上的供求均衡上的变量，还是统一利润率均衡上的变量？</a><br>\n","link":"http://www.zhihu.com/question/447645647/answer/1767994448?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"想要原生主屏体验，没有 Material You 怎么行：Nova Launcher 8.0 速览","date":"2022-07-19 09:30:00","description":"接近原生的主屏体验、超越原生的可定制性——老牌启动器 Nova Launcher 8.0 测试版公布，带来了这些新特性。<a href=\"https://sspai.com/post/74347\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/74347"},{"title":"如何评价漫画家高桥和希？","date":"2022-07-19 08:37:46","description":"\n<p data-pid=\"7YggG_vL\">是少有的能打穿ACG的作者。</p>\n<p data-pid=\"sCHQR6nY\">在我喜欢的作者里也是最天然、绿色、人畜无害的一个，不爱搞事。</p>\n<p data-pid=\"QL1seBW6\">还是先谢谢邀请我回答问题的知友，这个邀请我很想当成一个月前收到的那样来写回答，但是也不可能了，还是当作纪念吧。几年前就买了全套的游戏王漫画，他是我最喜欢的两个漫画家之一（另一个当然是宫崎骏）。肯定会有人觉得，鉴于意外溺水的事实，说他不爱搞事不对啊，这是个60岁还能跑去潜水的人啊。但是我讲真的，他作为作者是很安静的，基本只会发发画作，搞搞设定，对粉丝们说谢谢。漫画完结多年还不断精进画技，能达成“6分钟画一张酷帅男主”成就。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-81f834df35e8ef0b32adbe7a1e775be6_720w.jpg?source=b1748391?rss\" data-caption=\"是法国举办的MAGIC2019的活动上画的，我之前写答案提到过。\" data-size=\"normal\" data-rawwidth=\"1536\" data-rawheight=\"2048\" data-watermark=\"original\" data-original-src=\"v2-81f834df35e8ef0b32adbe7a1e775be6\" data-watermark-src=\"v2-aadff06edeaea1bcb76fbc0e65c8f2d0\" data-private-watermark-src=\"v2-0a8c2fb49a4d6ff3c7c3bc9afce998a7\"></p>\n<p data-pid=\"oZLAwiua\">解释一下，我喜欢不少作者，创作小说动漫的都有，他们的作风多种多样：</p>\n<p data-pid=\"xsHpff3D\">有的会对不喜欢的作品直接开喷，属于是会让萌新粉丝看了一脸懵的。如宫崎骏认为指环王电影思维回路太简单；又如托尔金对自己的作品插画的要求是：“不是迪士尼的东西，或受其影响的风格（我衷心厌恶他们的所有作品）。”</p>\n<p data-pid=\"dal6yNP9\">还有的对创作随心而行，随便写死主角然后被从亲妈到维多利亚女王陛下的各路人马无限吐槽，扛十年之后又改主意，重新把主角写活，如柯南·道尔。</p>\n<p data-pid=\"96CWcx0I\">也还有的喜欢在作品里写死许许多多角色，并且拒绝向读者妥协，反而声称“你要享受这个过程”，如田中芳树，在江湖留下“皆杀的田中”的传说，于是喜提“老贼”称号。</p>\n<p data-pid=\"UxlOmsTh\">更有的早年十分勤勉努力，却因为作品意外爆火成为杂志台柱，于是无限拖戏，如青山刚昌，再加上年纪大了、生病，体力确实不济，近几年更是出现一年52周但是他的周更漫画只更16话这样的事情，也喜提“老贼”称号。</p>\n<p data-pid=\"WxOt-1Jo\">甚至有的作者已经完结自己爆火的作品，但莫名其妙在政治问题上引出一堆争议，如JK罗琳，被认为是白左和terf二象性，作为粉丝，我刷新闻的时候偶尔觉得需要有个大心脏。</p>\n<p data-pid=\"Ksa96P_q\">当然，即使如此，我还是非常喜欢这些作者和他们的作品，并且习惯了作者们的这些个性，觉得很可爱。比如宫崎骏反复宣布退休复出，我的想法是老爷子食言喜闻乐见；再比如托尔金说学生考卷有一页全空白“太好了，什么都不用读”，然后在卷子上写小说开头，也超有趣。</p>\n<p data-pid=\"FsO9Ydrt\">高桥和希就很安静，一不喷作品，二不虐读者，三不拖更新，四不说政治，唯一一次倡议大家去投票还很快就道歉，说让角色有政治表达不好。他这么低调，我都认为不去给他留言比较好，怕打扰他——现在觉得早知道这样还不如见天儿去推和ins敲他画画，画点番外也是好的。</p>\n<p data-pid=\"BthbfRoG\">YGO的卡牌卖得很多，现在已经把整个IP提升到全球21位，他的漫画也卖出了4000万册，维基统计的赚钱数目是$964million，将近10亿美刀的数量级。并且动画一直有在连载。gx和5ds也是他亲自参与做设定，看起来也都很好。漫画起家然后在动画和游戏方面都非常成功，字面意义上打穿ACG，即使有大公司助力，也很少有人做到这种事。</p>\n<p data-pid=\"h6ejvKBH\">其实我见过有人说，高桥也只有一部漫画做到这种程度，其它的作品也没有办法再现这样的能量。当然，就事实来说也没错。但我还是认为，有些作品能成为现象级的名作，是特定的作者的灵感结晶，和作者的经历极其相关，妙手偶得也须是他的手。DM动画的改编有很多地方很成功，但其中被很多人认为最经典的一场暗游戏VS海马社长的战斗城市半决赛，其整个后半部分都跟原作几乎一样。动画是让社长开局就发动了一张永续魔法卡，从此这场比赛的所有盖卡魔法卡都成了速攻，其实这只是为了跟原作战斗城市的规则“盖卡的魔法卡都可以随时发动”相合而已。可见原作者编故事的功力还是非常强的。</p>\n<blockquote data-pid=\"iSZQUJnx\">虽然当时OCG很流行，但是连载时却没多少那个意识，我只是在想怎么画好登场人物。卡片说到底只是工具，我认为塑造好人物然后让读者对故事产生兴趣，才是对作品最重要的事情。</blockquote>\n<p data-pid=\"kmAtFnjg\">——其实他设计卡牌的工作也做得不错，据他自己回忆可能设计了有上千张卡牌。</p>\n<p data-pid=\"gjRPvAzm\">我站在读者视角，觉得高桥做得很好的一点是，他作为作者对作品给出了恰到好处的说明，又给读者留解读空间。从他的一些访问资料可以了解他的思路。</p>\n<p data-pid=\"Doz57e3_\">2007年的时候游戏王原作漫画出了文库版，去年台湾东立出了首刷书盒版。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-2c367c45fedd179156d5fc97e8107cbd_720w.jpg?source=b1748391?rss\" data-caption=\"这个是我买的，拍上来，分两盒才能买齐。\" data-size=\"normal\" data-rawwidth=\"4159\" data-rawheight=\"1769\" data-watermark=\"original\" data-original-src=\"v2-2c367c45fedd179156d5fc97e8107cbd\" data-watermark-src=\"v2-f30c946398ba1b0883ac6cf49480d01a\" data-private-watermark-src=\"v2-a24529949eae52eeb665032610478351\" data-tags=\"porn\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-10d10d3823fd96be25c51a7c1e7cd1e6_720w.jpg?source=b1748391?rss\" data-caption=\"每盒都有11卷漫画+11张塔罗牌+1张高桥老师画的图\" data-size=\"normal\" data-rawwidth=\"4160\" data-rawheight=\"2352\" data-watermark=\"original\" data-original-src=\"v2-10d10d3823fd96be25c51a7c1e7cd1e6\" data-watermark-src=\"v2-b213907ef3bc6b9c92a4ec1172484454\" data-private-watermark-src=\"v2-27889cda3943ece5562e27f284a4b508\" data-qrcode-action=\"none\" data-tags=\"qrcode\"></p>\n<p data-pid=\"UW-W0eu_\">这套书把原本38卷的单行本重新编排成了22卷。选22这个数字是因为塔罗牌的大阿尔卡纳有22张牌，而塔罗牌和埃及文化又有关。同时这个版本有把原作的角色也编成塔罗牌，CoZo君负责了概念设计工作，每一卷都对人物用解读塔罗牌的形式解读。在有的采访视频里，高桥拿在手上的新书就是这个文库版，亲手绘制了封面，据他说还修了一些图。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-58f629ab47f6403368308548f922423e_720w.jpg?source=b1748391?rss\" data-caption=\"这个彩色版漫画的资源是电子的，实体书还是黑白的画。希望不要造成误解。\" data-size=\"normal\" data-rawwidth=\"1414\" data-rawheight=\"1035\" data-watermark=\"original\" data-original-src=\"v2-58f629ab47f6403368308548f922423e\" data-watermark-src=\"v2-ca052153a89ea1c59e17afacc18f1b22\" data-private-watermark-src=\"v2-226e971e2fc20b6353e2880e14b6f34a\"></p>\n<p data-pid=\"8DBNk0tz\">这是解释到“皇帝”牌的第一页，实际一共有4页，台版翻译是这样的：</p>\n<blockquote data-pid=\"YVN8TApb\">游戏王塔罗牌4 皇帝 戴冠的少年<br>年轻的“皇帝”坐在黄金的王座上。他那坚定的眼神直视着正前方。左右扶手上的狮子的脸，象征他王者的身份。实际上，陈列在开罗考古学博物馆中的图坦卡蒙王座，椅子的四只脚都做成狮子的脚，霸气十足。<br>“暗游戏”是继承父亲意志，保护人民的伟大王者。虽然是个少年，却被要求当个守护社稷的强势国王。他手脚戴的黄金首饰，显示他是“战斗的王者”。站在全军的最前方，勇敢雄伟的模样，常常成为壁画或雕刻的题材。对古埃及人民来说，王是伟大的战士。在古代的莎草纸文书中，记载王者头上如发带般的金冠散发着强烈光芒，歼灭敌人的场面。简直就是借助太阳之力扫荡敌人，所向无敌的王。<br>王座的柱头上，太阳圆盘闪闪发亮。自古以来，埃及王被当成太阳神。人们深信如果埃及王倒下，太阳之力也会衰退，黑暗和混沌将会支配世界。太阳神是最受欢迎的神明。历代的法老王都喜欢自称为“太阳神之子”。<br>说到太阳神，就联想到暗游戏手上“三幻神卡”其中一张的神名，把力量强大的太阳神也作为卡片来战斗的暗游戏……他的力量到底来自哪里？<br>阿布辛贝大神殿每年只在特定的2天，分别于春季和秋季，会被观光客挤得水泄不通。因为只有在那2天，阳光会照到位于神殿最里面、不见天日的拉美西斯二世雕像。到底为什么只有那2天，才会发生这种情形呢？<br>王家之谷的王墓墓室里，柱子、门扉，甚至是天花板，狭窄的墓室中都画满了色彩鲜艳的图画。其中也有像漫画般明确分格的部分，令人相当吃惊。这部分画的是太阳神的长篇故事，埃及的国王们想尽办法，希望死后也成为太阳神。<br>埃及神话中最古老的神是名为亚图姆的太阳神。创造神亚图姆在原始之丘“奔奔石”上接二连三地生出神明。据说祂站在圣石之上，用太阳光照遍所有的国土。<br>被喻为金字塔原型的这个“奔奔石”，是四角锥形，令人联想到游戏的千年积木。当时的神官似乎也戴着相同形状的坠子。那种坠子好像是由香木的树脂和没药混合而成，而没药（myrrh）也是木乃伊mummy的语源，用于葬礼中，据说有让灵魂离开死者身体的力量。<br>将千年积木完成的时候，暗游戏就会离开表游戏的身体而出现，这好像也跟千年积木有什么关系。从形状来推测，千年积木一定还隐藏着意义深远的秘密。<br>就如同在我们日本，古时候禁止称呼地位高贵的人的本名，要避“名讳”一样，在古埃及，王的名字也是不公开的。这个观念的基础建立在“知道一个人的本名，就能自由支配那个人”这种类似魔术的想法。<br>另外，就跟日本的“言灵”一样，在古埃及，人们也认为话语中有灵寄宿。所以，据说位高权重的人不太讲话，只在有感应的时候才谨慎地开口。大概是因为这样，言语才成为魔术的泉源。<br>在这篇连载中，每回都登场的女神伊西斯，曾经想把太阳神的名字，给予心爱的儿子荷鲁斯。知道名字力量的祂，运用与生俱来的知识，想方设法问到了太阳神真正的名字，把太阳神的名字“拉”和力量给予爱子荷鲁斯。<br>“寻找名字”这种英雄奇幻的王道，其实是始于此。就连创造神亚图姆的名字，也曾经差一点被太阳神吸收而消失，所以神明不能掉以轻心。后来两人合体，变成亚图姆·拉，勉强留下名字。但伊西斯比太阳神更高明，真是为母则强……<br>把焦点转到人类世界，我们观察到漫长的历史中，也有法老王被排除在“王名表”之外。讽刺的是，在现代大名鼎鼎的法老王图坦卡蒙的名字，本来也被永久抹杀，没人知道这件事，直到很晚才被发现。1922年，霍华德·卡特宣布了这个历史大发现，如果没有他，图坦卡蒙大概至今仍是个谜样的王。<br>大人的社会是丝毫不容许天真或者妥协的严苛世界。就算王的年纪很轻，也必须维持秩序，发挥强大的指导力。在一旁辅佐的神官团虽然很有能力，但多少有难以驾驭的特性。为了管理神官，就算他们年纪较长，王还是要明确地表达意见。就算有人蛮横行事，也要巧妙地控制他们。出乎意料的协助者，尤其是年长的男性，大概会伸出援手。要仔细地巡视自己的王国，冷静地在现状中开拓新境界。个性有点男孩子气，所以恋爱方面也要试着主动积极，只是皇帝像游戏一样不善于表达情感，这是缺点。<br>“我要战到最后！”这种不屈的人=暗游戏“皇帝”，如果卡片是逆位，表示强势的部分往往过度外显。另外，一旦失去自信，就会变得退缩。“皇帝”这张卡片代表的是不感情用事，靠自己的意志创造事物。不要被别人的意见迷惑。要对达成目的有高度的执行力，靠着坚强的意志一直往前迈进。</blockquote>\n<p data-pid=\"q21VAZsE\">这段内容说出了暗游戏这个人物的几个关键点：</p>\n<ul>\n<li data-pid=\"0utTgeD4\">继承父亲意志，保护人民的伟大王者（那些看不出来这个定位的解读就可以不看了）；</li>\n<li data-pid=\"gwprIffd\">站在全军最前方战斗的战士（不是把别人送上战场但自己只会躲在安全地方的低水平政客）；</li>\n<li data-pid=\"Yh7H4ImO\">可以使用神的力量（他的魔力来自于神）；</li>\n<li data-pid=\"y_qiUmH1\">千年积木和创世神话有关，隐藏着意义深远的力量（漫画交代是团结之力）；</li>\n<li data-pid=\"0oIIr3dk\">名字很重要，寻找名字的故事套路来自于古老的神话；</li>\n<li data-pid=\"_1058Ysk\">被要求有领袖气质，但他本人也有少年心性。</li>\n</ul>\n<p data-pid=\"DF25_rfg\">这些设定不仅仅是设定，故事也是这么画的。这个角色不仅是能打牌，也有着历史与神话的内涵，作为文学人物也是非常出彩的。他是<i>被选中的法老王</i>，和其他的法老王不一样，可以同时使用三幻神的力量。这么大的魔力毫无疑问来自于神。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-83bc16d90947954033cb22e781996201_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"726\" data-rawheight=\"813\" data-watermark=\"original\" data-original-src=\"v2-83bc16d90947954033cb22e781996201\" data-watermark-src=\"v2-44f29c40c39afcd0d055eaee863c4918\" data-private-watermark-src=\"v2-14bbb5f085c6379513dbacaecad77be4\"></p>\n<p data-pid=\"4ZQrWTjM\">但是这么强大为什么三千年前赢不下佐克，原本我以为是个不太好解释的问题，但高桥解释得顺理成章——他跟巴库拉对打的时候总分心去想着保护民众，影响思考战术。</p>\n<p><img src=\"https://pica.zhimg.com/v2-8c378acc76b5134815f143ca9f8f68cb_720w.jpg?source=b1748391?rss\" data-caption=\"高桥说如果角色心态比较平和，他就会用方方正正的格子分镜，但如果情绪波动比较剧烈，就会用不规则的线分割页面。这场战斗中的亚图姆和巴库拉情绪都很剧烈。\" data-size=\"normal\" data-rawwidth=\"1414\" data-rawheight=\"1035\" data-watermark=\"original\" data-original-src=\"v2-8c378acc76b5134815f143ca9f8f68cb\" data-watermark-src=\"v2-6b094b3c15bb15238265f2cfc2fa6058\" data-private-watermark-src=\"v2-6fcab727c0a1c9b5ef789bd2fe2be4cf\"></p>\n<p data-pid=\"9PhSrdoO\">本来这个反作用力发召雷弹的方法挺好的，还把精灵兽拽上了天，但是他根本的想法是“这样巴库拉就没办法攻击城市了”。我应该说他一边担心城市的民众一边还能想到方法跟精灵兽打架真聪明么？但问题是这一战他始终是这个思路，把翼神龙忘得一干二净。以后也再没养回力气招出三神。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-e22f672ddd5e8618a71f8f5e3a5677f5_720w.jpg?source=b1748391?rss\" data-caption=\"这是刚从王宫大门冲出来的时候\" data-size=\"normal\" data-rawwidth=\"502\" data-rawheight=\"288\" data-watermark=\"original\" data-original-src=\"v2-e22f672ddd5e8618a71f8f5e3a5677f5\" data-watermark-src=\"v2-39cc9e73c8ac303a7ea99da785e66edd\" data-private-watermark-src=\"v2-a3451e25711de5db64ad16769cfa2df8\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-eaddf08cefb0b22f9a03f26591062754_720w.jpg?source=b1748391?rss\" data-caption=\"这是追精灵兽的时候\" data-size=\"normal\" data-rawwidth=\"676\" data-rawheight=\"295\" data-watermark=\"original\" data-original-src=\"v2-eaddf08cefb0b22f9a03f26591062754\" data-watermark-src=\"v2-197f5d26895daf72cfdd776f5576d455\" data-private-watermark-src=\"v2-a239fb0ca858578f55a910c3febfbc75\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-098098fedbf1c9100bfda85704b1daa5_720w.jpg?source=b1748391?rss\" data-caption=\"这是用天空龙挡刀的时候，四舍五入就是他自己挡的\" data-size=\"normal\" data-rawwidth=\"488\" data-rawheight=\"166\" data-watermark=\"original\" data-original-src=\"v2-098098fedbf1c9100bfda85704b1daa5\" data-watermark-src=\"v2-2ec5e5f9287bd889598969e2bcb28fa1\" data-private-watermark-src=\"v2-8af7752d7d2fa866ff0e99988a8f28fd\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-a947c501b47411bd007326f08a89c52e_720w.jpg?source=b1748391?rss\" data-caption=\"这是临近悬崖之前\" data-size=\"normal\" data-rawwidth=\"785\" data-rawheight=\"381\" data-watermark=\"original\" data-original-src=\"v2-a947c501b47411bd007326f08a89c52e\" data-watermark-src=\"v2-c02eba24b9a66fea16c0cbb4d15b2044\" data-private-watermark-src=\"v2-ed33d4c37ba4d7cbcfb0a9ca73b1de31\"></p>\n<p data-pid=\"pNFsKpVE\">所以就是说神给他这么大的魔力，又给他慈爱的父亲、至尊的身份，把他打造成一个好君主，是要他给百姓挡刀，给国家当祭品。</p>\n<p data-pid=\"6Qr8XW_A\">要他付出生命、身体、记忆、名字，再灵魂被关在积木里三千年。</p>\n<p data-pid=\"4hDq_8sj\">跟历史上的玛丽王后是相反的人，却比玛丽王后还惨：他还那么年轻就已经知道，命运送来的所有的礼物，都已经暗中标好了价格。</p>\n<p data-pid=\"TO_IVLGZ\">我至今都觉得，一方面，这作者真敢画；另一方面，咱就是说，少年漫画哪用画到这份上呢？</p>\n<p data-pid=\"bKkN7j3j\">少年漫画就画抖S男主打牌锤罪犯就好了嘛，没有必要让人想到，如果当君主的人仁爱贤明，结果还是很惨，那就是君主制不行。</p>\n<p data-pid=\"6L3F1lus\">君主再强也是一个人，还是团结力量大，于是全作从头到尾歌颂友情，画男主极其重视朋友。然而君主是不可以有朋友的。用田中芳树在银英里表达的来说，民主主义才是交对等朋友的制度，君主只能有臣下。</p>\n<p data-pid=\"4Jrt8qjC\">但是高桥和希画的就是他全都要，解决方案就是朋友们自己变强，特别是最弱小最让暗游戏担心的aibo要从一个虽然有勇气但是没有自我的人，变得自信自立自强。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-8de6cf02c6733f60ab01c8a90770724e_720w.jpg?source=b1748391?rss\" data-caption=\"暗游戏的作风：就是干，不要怂\" data-size=\"normal\" data-rawwidth=\"585\" data-rawheight=\"717\" data-watermark=\"original\" data-original-src=\"v2-8de6cf02c6733f60ab01c8a90770724e\" data-watermark-src=\"v2-78f1eae8a21dc9a3b448c118bbe01dd1\" data-private-watermark-src=\"v2-50ec099c10ba9a6a7c8c5617fd6a622d\"></p>\n<p data-pid=\"ogQA5B9D\">不过说起来搞笑，在漫画里承担从负面激励小表的任务的有两回都是暗貘良，四舍五入就是大邪神佐克。</p>\n<p data-pid=\"7gkrsDYj\">大邪神佐克人生导师语录一：不要天真了，这是你的战斗。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-6593f68ace2a801d0868d8fc3b2a6d0e_720w.jpg?source=b1748391?rss\" data-caption=\"这些方方正正的格子显示小表此时虽然不知如何是好，但是想到暗游戏还是能稳稳托住他的情绪。\" data-size=\"normal\" data-rawwidth=\"643\" data-rawheight=\"865\" data-watermark=\"original\" data-original-src=\"v2-6593f68ace2a801d0868d8fc3b2a6d0e\" data-watermark-src=\"v2-410c66f04c00cbd885843c0fa8f4d754\" data-private-watermark-src=\"v2-33e40ffafe24bf2ab5daef96b8cfb775\" data-tags=\"porn\"></p>\n<p data-pid=\"wwz1Gw2B\">大邪神佐克人生导师语录二：守护这些重要的东西不是你的使命吗？</p>\n<p><img src=\"https://pic1.zhimg.com/v2-eafb94d95bbcf760ca5c135e3ff16cc8_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"622\" data-rawheight=\"669\" data-watermark=\"original\" data-original-src=\"v2-eafb94d95bbcf760ca5c135e3ff16cc8\" data-watermark-src=\"v2-60eb86f608ac20c2663de4febb526f65\" data-private-watermark-src=\"v2-ec44b4372066a12ffb93cf64a1d406cf\"></p>\n<p data-pid=\"JDBbHkfE\">结果在埃及篇换来小表一顿爆锤。暗游戏是不可能说出这些话的，他虽然一开始就超自信，但本质跟小表一样利他、自制、无欲，只是程度有差别，不会指责朋友。PS：伊西斯比他俩还更加利他、自制、无欲。</p>\n<p data-pid=\"R6uI8nb0\">还是文库版，高桥自己给角色们用数轴的形式做了定位。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-5715a97864d477367b908fa8f9f38933_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1414\" data-rawheight=\"1035\" data-watermark=\"original\" data-original-src=\"v2-5715a97864d477367b908fa8f9f38933\" data-watermark-src=\"v2-acf1815c14d9ad5e7c1b4370176d6267\" data-private-watermark-src=\"v2-77a46fd7ecf3520094bd0f91a6bb0aa0\"></p>\n<p><img src=\"https://picx.zhimg.com/v2-73bd4989f1e5df649bbe4f6c6dc8c690_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1414\" data-rawheight=\"1035\" data-watermark=\"original\" data-original-src=\"v2-73bd4989f1e5df649bbe4f6c6dc8c690\" data-watermark-src=\"v2-ca7979eed32b73a0a86f9af174e33e7f\" data-private-watermark-src=\"v2-074680f74312f98955ffe74b76fbbcb7\"></p>\n<p data-pid=\"EEwjSA7k\">并且这样解释：</p>\n<blockquote data-pid=\"-42rUmBU\">这个单纯是作者在下构思的个性分布图。各位对角色的观感或许各有不同，按照自己的感觉来分析看看，或许也很有趣。<br>对照图表来看，我漫画中登场的反派，都很在乎自己，沉溺于执着之中，而且欲望强烈，有时还会妄想。<br>这样的特质，出乎意料地跟我们人类很相似。</blockquote>\n<p data-pid=\"Cemg-RDU\">高桥认为我们读者自己的列表可能也会很有趣，还说我们人类的特质在漫画里其实比较接近于反面角色们，而不是正面角色们。我觉得他还是挺实在的，作为人类我就承认自己没那么善良，有些高尚的道德其实是神性，而有些道德在我看来其实用AI更容易实现，哲学问题和道德问题落到工程实践就难办多了。</p>\n<p data-pid=\"bgVPGIan\">比如说，假设我是个人工智能算法设计人员，正在搞自动驾驶汽车。现在有个情况是路上突然冲出两个小孩，为了不撞到他们，算法只能让车子紧急变道，开到逆行线甚至路肩上去。然而逆行线上此时也有辆大车，或者路肩上有个大树，相撞就会有八成以上概率把紧急变道的车的车主撞死。假设逆行车足够结实所以它的乘员无生命危险。那么，算法该选择撞小孩还是撞车主？</p>\n<p data-pid=\"rppyfuCT\">由于是算法做的决定，假设不考虑研发人员和车主需要负的法律责任，赔小孩或逆行车车主的钱也赔得起，同时不考虑小孩子是不是熊孩子之类的，这就是电车难题了，成为两个小孩和车主怎么选的问题。</p>\n<p data-pid=\"BSGRVnpX\">像这种问题，可能有非常多的人认为，既然车主还有两成几率可以活下来，那么算法应该选择不撞小孩。但是如果我是算法设计人员，落到工程实际就得考虑，真的把汽车的自动驾驶系统设计成利他主义，车还卖得出去吗？</p>\n<p data-pid=\"TeqNKbio\">如果问各路买家，即使你八成活不下来它也会选择把你舍掉，那你愿不愿意买这么一辆利他的车？恐怕大部分人都会表示不愿意。即使有少数人愿意为了两个陌生的小孩牺牲自己，但如果他们考虑到车买到手不一定只有他乘坐，还有爱人、孩子来坐，他恐怕也会犹豫了。他还会想到，家人也不想失去他，所以牺牲自己这种选择也要考虑，那就更不会买了。</p>\n<p data-pid=\"od_5qa-a\">我们这个世界现在在跑的车基本都是利己的，安全带、安全气囊都是有利于车里的人的措施，交通规则理论上是利所有人，也不是只利他。由于专业的关系，我有办法把算法设计成绝对利他，计算机会忠实执行指令，就像一个终生愿意为他人牺牲自己的人，但这种抽象的AI并不是我想要的。</p>\n<p data-pid=\"b5ozJPsz\">而现实生活中处理问题也根本不可能不考虑法律责任、赔偿金等等的问题。所以海马社长的AI就是复制不出一个原本的暗游戏。暗游戏是人，同时兼具着神性，但就是没有多少AI属性（可能除了脑子挺快）。他会救民众，会为了不伤害城之内、表貘良宁可牺牲自己，也会救害过他的木马和表马利克，完全想不到牺牲仆人；但是他考虑到爷爷、木马和静香，认为输掉会失去一切的时候，就会撞拦路的海马，对于会伤害aibo的潘多拉也不怎么想救，该收拾犯罪分子的时候就更不客气了。要救的是谁，要怎么救，他都有自己的想法，不是个简单的算法，非常有意思。然后在表游戏觉得自己的选择害“另一个我”的努力全部白给的时候，暗游戏在认为是aibo帮他承担了输牌导致救不了人的心理压力。作品能多角度呈现对一个问题的思考也是很有水平的。</p>\n<p data-pid=\"lHTh92W1\">暗游戏的AI也没办法像本人那样凭打牌的各种创意和思考吸引社长。暗游戏让卡牌上的怪兽变成实体，启发了社长；抽到黑暗大法师，讲团结的力量；指出社长需要从刚三郎的阴影里走出来才能赢。这一路上无论是游戏设计的创意还是找回给孩子们造乐园的初心，都是暗游戏在和社长对话。海马在意暗游戏，一直想打赢他，也一直在帮他。</p>\n<p data-pid=\"VI4y4bj9\">暗游戏要收天空龙，海马社长给出主意；</p>\n<p data-pid=\"7UHn5v5M\">暗游戏要打俩假面，海马社长来双人战；</p>\n<p data-pid=\"FeKSjg0h\">暗游戏要找城之内，海马社长叫直升机；</p>\n<p data-pid=\"wbOp6ALz\">暗游戏要战马利克，海马社长送魔法卡。</p>\n<p data-pid=\"14D9t_vd\">战斗城市一共才两天的时间，社长对暗游戏花式不重样地帮忙。剧场版里他跟AI暗游戏对战，选择的地点居然是个教堂。AI毫无疑问是科技产物，但教堂是个宗教场所，末了社长还说AI终究只是个幻影。我每次看到这里都觉得，王样你赶紧出来跟社长打一局，不然他都信神学不信科学啦。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-3bd85fb85aecf1722dc6a7c8c9606127_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-3bd85fb85aecf1722dc6a7c8c9606127\" data-watermark-src=\"v2-7a559e2bf57c435f922af02eeed2a0a4\" data-private-watermark-src=\"v2-b5e1cc17eec38ef73948d23fbee03b03\"></p>\n<p data-pid=\"s34tdPtM\">社长在冥界打赢了没有，剧场版没有画，我的理解，这可能是作者允许我们有自己的想象空间。你可以认为社长打赢了，也可以认为还是亚图姆打赢。在两个人都已经没有心理负担之后，这是一场在朋友面前证明自己的决斗，只要打出自己的水平就是好的。包括战斗城市之后暗游戏和城之内的对决，高桥是这么说的：</p>\n<blockquote data-pid=\"SOm2lrsF\">如果友情成立在双方互相肯定、各自独立的基础上，那么，在战斗城市寻找真正的决斗者，暗游戏跟城之内在最后同场较劲的场景，才是他们之间，友情真正成立的瞬间。<br>其实《游戏王》最终话的内容有别的版本。<br>在另外一个版本，（表）游戏迈步前行，而战斗城市的暗游戏跟城之内决斗。<br>在我心中的构想是——暗游戏跟城之内决斗，输赢的结果亦以定案，但在这里我就不说出来了。<br>那场决斗，双方打得难分难舍，平分秋色，暗游戏在最后一回合用真红眼黑龙发动攻击。<br>那个瞬间，城之内在场上使用“时间魔术师”，做最后的赌注，两人的场上有时间魔法的效果，暗游戏和城之内在那里看到的是超越了决斗、闪闪发亮的画面。最后一格是微微一笑的暗游戏之特写。<br>可是《游戏王》是以少年·武藤游戏和他心里的另一个游戏作为主角的故事，因此，我觉得现在这个结局比较好。</blockquote>\n<p data-pid=\"Iph-kriq\">既然是时间魔术师决胜负，那么城之内就有可能赢。原作漫画其实没有画过暗游戏和城之内的完整决斗，决斗王国的决战是动画组编的，漫画里这俩人觉得自己人没必要打；码头的一战，暗游戏不愿意打，其实前期的暗游戏整个就不太懂得怎么跟朋友决斗，于是打到一半小表接手；战斗城市最后又没画出来，结果暗游戏和城之内在原作里只有王国篇那场打迷宫兄弟的合作。而且，原作里在决斗王国给城之内星星、给他奖金的都是暗游戏，战斗城市帮他抢真红眼黑龙的又是暗游戏，这俩人的相处模式更接近单方面的付出，所以城之内这么想成为真正的决斗者。我的理解，高桥说的两个人最后同场较劲才是友情成立的瞬间，可能是说此时的城之内终于不是单方面被暗游戏给予巨大恩惠的角色了。假设最后确实是城之内赢的话，那么原作就会达成一个效果：最后一刻暗游戏看着两个朋友aibo和城之内都成长到这么强，没有失落反而笑得很开心。</p>\n<p data-pid=\"hDZuS4Dj\">剧场版倒是实现了“最后一格是微微一笑的暗游戏之特写”。</p>\n<p data-pid=\"XZ_cwz1d\">意思就是如果朋友们翅膀硬了，暗游戏会很欣赏这对美丽的翅膀。我觉得这很不容易。</p>\n<blockquote data-pid=\"NPMsdugn\">“任何人都能对朋友的不幸感到同情，但要消受一个春风得意的朋友，则需要非常优良的天性。”——王尔德</blockquote>\n<p data-pid=\"3ocv5rv-\">但是高桥没有画出来谁赢，我说了也不算，只能发点想法了。</p>\n<p data-pid=\"yRP83Pkd\">说到底，我觉得暗游戏能不能赢朋友不重要，他能赢大邪神就行。小表海马城之内坚决挑战他是挑战国王，这叫勇敢，但他要是每天合计怎么打赢朋友就不像个样子了。就像亚历山大大帝能不能打赢赫菲斯提翁不重要，能打赢大流士三世就行。</p>\n<p data-pid=\"ElDornwt\">有些作者为了给读者留评价空间，会极少解释他们的作品是如何创作的，读者们的解释南辕北辙，但作者没有给过范围，基本的问题就无法达成一致。举个例子，托尔金的指环王，非常多的读者说他隐喻二战，如果不是他本人说过不喜欢搞这种讽刺，读者肯定会浪费很多时间。托爷的文学水平超出一般读者的水准，大部分接受“作者在暗示现实”的阅读理解教育的普通读者其实想象不到他在意的是神话本身，得是接受过很专业的文学训练的人才会知道文学的内核是神话，但即使接受过这种训练，如果作者自己不说的话，一般读者也很难说影射现实是错的。所以我还是认为，作者自己对作品给出一个大致的解读范围是必要的。</p>\n<p data-pid=\"UvNy_qHG\">其实评价一个漫画作者应该多分析他的画本身的，但是这个内容太多了，无可能在一篇文之内写完，我还是只挑最容易写的角度了。</p>\n<p data-pid=\"1pgbRmDx\">最后再写一点关于黑暗游戏的想法。这个系列特别多黑暗游戏嘛。不知道我是不是一个人，我始终认为黑暗游戏其实就不是游戏。如果你问我，有一种活动，事关命运，给参与者的精神压力极大，精神力弱的甚至可能在活动进行中晕倒，且严格禁止作弊，否则后果非常严重，那么这是什么活动？</p>\n<p data-pid=\"bsu5BczV\">我大概会答，这是中国高考。毕竟，打游戏事关命运还需要好大的精神力，作弊后果可严重了啥的，没听说过。但是高考就非常符合这个描述。</p>\n<p data-pid=\"eohQJVmk\">对我个人来说，那还有像之前看过的回答里说的，读博期间“在精神错乱边缘挣扎的经历”，只是人家说大部分名校的如此，我渣水平所以不是名校的也如此，临毕业最后两年真是至暗时刻。</p>\n<p data-pid=\"l4p1ULra\">让人内牛满面的是暗游戏只对犯罪分子之类的人玩黑暗游戏，动画里自己朋友被人家要求玩这个他也会觉得太危险了。可是我从小到大都在玩这种游戏，所以非常能够理解精神力量和自信是如此重要的东西。</p>\n<p data-pid=\"aZeQJA9g\">漫画家果然都是瑰宝啊，感谢他们的创作。</p>\n<p data-pid=\"vaISk62y\">（这回答写多了些，但不打算改了，纪念高桥老师，也感谢我喜欢的其他作家们，望还在世的作家们继续欢乐搞事，已经去另一个世界的作家们开心游玩。）</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/marybell4869?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">玛莉蓓尔</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/22165594/answer/2582135308?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">12 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/521785367?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么漫画家手冢治虫可以称为动漫之神呢？</a><br><a href=\"http://www.zhihu.com/question/504250136?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">日本的漫画家可以获得多少薪资？</a><br>\n","link":"http://www.zhihu.com/question/22165594/answer/2582135308?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"敬畏热度、保持热情：如何在夏季坚持跑步","date":"2022-07-19 08:00:00","description":"无论你是初跑者，还是跑步老手，相信这份「夏季跑步指南」都能帮助到你。<a href=\"https://sspai.com/post/74342\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/74342"},{"title":"装了啥 | 机核主编西总布都装了啥？","date":"2022-07-19 06:39:12","description":"本期《装了啥》，我们邀请到了知名游戏平台机核的编辑和策划人西总布，谈谈他的游戏人生。<p>[......]</p>\n<a href=\"https://sspai.com/prime/story/zhuanglesha-vol01-xizongbu\" target=\"_blank\">查看全文</a><p>本文为会员文章，出自<a href=\"https://sspai.com/prime/precog/single\" target=\"_blank\">《单篇文章》</a>，订阅后可阅读全文。</p>\n","link":"https://sspai.com/prime/story/zhuanglesha-vol01-xizongbu"},{"title":"高级宏观经济学怎么学？","date":"2022-07-19 06:32:29","description":"\n<p data-pid=\"Q4eFHHlJ\">对这个问题分享一点自己的经验。</p>\n<p data-pid=\"SFwsAI2T\">我在国内本科和硕士阶段学过几轮高级宏观经济学，什么Ramsey model, dynamic programming, contraction mapping, OLG, 学过好几遍，模型推导背的很麻利，但是始终觉得自己对宏观经济学一知半解，非常别扭。</p>\n<p data-pid=\"t-WsGCG1\">去美国念phd，第一年的宏观经济学四个教授密集教了一个学期，才豁然开朗。phd期间学的宏观和我之前学的最大区别是，是否建立起了“宏观经济是一个系统“的概念。</p>\n<p data-pid=\"7E2ngyT9\">一个宏观模型通常有两部分：decision problem和market equilibrium。第一部分decision problem相对直接，就是每一个agent做最优化，optimality condition就是marginal benefit = marginal cost。第二部分就是市场要出清，以及perceived law of motion should be consistent with actual law of motion。第二部分建立了宏观经济作为一个“系统”的存在，也是模型求解和用于解释现象的关键。在phd以前的学习中，我总是把精力花在理解decision problem上，而忽略了理解market equilibrium condition （在基础模型中通常以market clearing condition形式存在）。</p>\n<p data-pid=\"iIBNUDz0\">为什么会这样呢？因为在phd以前的学习中，老师都是教我们列出equilibrium condition，然后要么在特殊情况下手动求解，要么做一些简单的数值解。equilibrium condition在逻辑上是并行的，所以一个模型就是一个差分方程组 - 解方程组的时候我们不会去在意哪个方程在前哪个在后。</p>\n<p data-pid=\"AaElXpka\">宏观模型不是这样的。在这里要强调Minnesota学派对宏观模型的表述。这一派的经济学家对模型的表述要求十分严格乃至死板，必须清晰地定义individual state variable, aggregate state variable，写出decision problem的optimality condition，写出individual state和aggregate state 或者asset price law of motion consistency的条件以及market clearing。phd期间我们宏观的第一个quarter就只学了一件事，如何定义均衡。老师出题就是出各种各样的模型变体让我们定义均衡，考试也就考这些。那一部分的考试没有什么人是不会做的，但也没有什么人是能拿满分的，因为要满足所有的表述都精确实在太难了。当时学的时候我是蛮反感的，觉得把大好青春浪费在翻来覆去定义均衡上，对宏观经济的理解毫无寸进。后来做宏观research，听seminar，见了很多越来越复杂的模型，才深刻体会了这样训练的意义和价值，了解了什么叫磨刀不误砍柴工。在一个复杂的模型里，变量之间的逻辑关系千头万绪，抓住定义均衡的几个步骤，宏观模型就变得清晰明了了。当然啦，能不能最后解得出来这个要看各人的功力，但至少理解别人的paper可以事半功倍。我在写paper的时候，导师强调必须要清晰准确地定义均衡。有一次我present完自己的paper，就被批评为什么没有一页slides定义了均衡，吓得我赶紧补上。</p>\n<p data-pid=\"2Amr4u17\">我会推荐这个世界上最好的宏观经济学教材, by Dirk Krueger</p>\n<p data-pid=\"VVabXvoF\"><a href=\"http://link.zhihu.com/?target=https%3A//perhuaman.files.wordpress.com/2014/06/macrotheory-dirk-krueger.pdf\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">perhuaman.files.wordpress.com</span><span class=\"invisible\">/2014/06/macrotheory-dirk-krueger.pdf</span><span class=\"ellipsis\"></span></a></p>\n<p data-pid=\"1KvkhdqQ\">链接上是多年前的一个版本。后来他的讲义扩展成了两门课的教材，第一门课是一年级的宏观基础，第二门课讲heterogeneous agent model。教材的2， 3， 6章就是围绕着定义均衡展开的，或者换句话说，这部分内容的核心是教我们怎么定义均衡，而不是告诉我们rbc/growth模型是怎么回事。第二章还讲了risk sharing，这是多数一年级宏观课不教的，但十分重要。</p>\n<p data-pid=\"9MmxI8Zk\">这本教材的适用对象，是希望系统学习宏观经济学，理解宏观经济学前沿文献，乃至从事宏观经济学研究的朋友们。它只能帮我们打一个理解宏观经济模型的坚实基础，往后的旅程，还得各随因缘。如果你想快速了解宏观经济学对一些具体的宏观经济问题有什么见解，那么它不适合你。这本教材的精彩在于它的“方法论”性质，而具体内容其实非常少，只是介绍了几个经典模型。如果是抱着“对问题的见解”这一目的，几乎所有博士阶段的宏观经济学教材都不适合，因为它们或多或少都是方法和研究导向的。如果想了解文献对某一具体问题的研究进展，不如读journal of economic perspective, journal of economic literature, annual review of economics, handbook of macroeconomics, 或者其他各种的综述文章，或者imf的研究报告和工作论文来得更有效。</p>\n<p data-pid=\"uPxkPgk6\">另一个学习宏观经济学的不二法门，就是动手写code。我发现很多学生学习宏观，都从来没有写过code（我自己在本科研究生阶段，虽然学了很多高级宏观，没有写过一行matlab code），这是不可以的。只有在数值求解模型和simulation中，我们才可能理解一个模型，才能理解为什么说宏观经济是个系统，理解为什么说模型是个laboratory。毕竟现在的模型能手解的已经凤毛麟角了，停留在罗列equlibrium condition无助于理解模型。提一下dynare。很多宏观模型都可以用dynare解，方便快捷。如果是在做研究中，当然没问题，有方便的方法没有理由不用。但是如果是为了加深对宏观模型的理解，建议还是老老实实地recursively用value function iteration或者time iteration解几个宏观模型，悟一悟这些个模型到底在干啥。</p>\n<p data-pid=\"i__6Q9hg\">最后说一下数学。严格地说，要从底部学好宏观，需要的数学是很深的，读一下stokey-lucas那本书就知道。只不过，对大多数应用宏观研究，不需要那么多数学，会基本的微积分和概率统计就可以了，可能还需要知道一点点的contraction mapping和numerical知识。所以，如果你并不想成为一个extremely hard core macro theorist（证明存在唯一性那种），不必把精力放在复杂的数学上。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/leonyangyu?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">阳羽</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/440602564/answer/2579056101?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">4 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/542080842?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">宏观怎么学啊到底?</a><br><a href=\"http://www.zhihu.com/question/529167593?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">高级经济师（金融）怎么学?</a><br>\n","link":"http://www.zhihu.com/question/440602564/answer/2579056101?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"有哪些适合八月份旅游的景点推荐？","date":"2022-07-19 06:22:20","description":"\n<p></p>\n<p><img src=\"https://pic1.zhimg.com/v2-70187b1aab12a469fed0e2cd55bea51f_720w.gif?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"187\" data-watermark=\"original\" data-original-src=\"v2-70187b1aab12a469fed0e2cd55bea51f\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pica.zhimg.com/v2-5d41a49a12d38d57800dac4f2c3ac99a_720w.jpg?source=b1748391?rss\" data-caption=\"©Terry Sze/shutterstock\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1620\" data-watermark=\"original\" data-original-src=\"v2-5d41a49a12d38d57800dac4f2c3ac99a\" data-watermark-src=\"v2-2474da33387fc0734e63c5244ae02881\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"UZ4SrUr0\">八月将至，气温也逐渐攀升到一年的顶点。手中的扇子不停挥动，切好的冰镇西瓜冒着凉气，似乎暂时舒缓了夏日的烦热与躁动。可热爱旅行的我们，又怎舍得浪费这个多姿多彩的夏天呢？那不妨跟着LP一起，踏上<b>八月的新旅程</b>，解锁避暑新方式，逃离高温与日晒，在闷热的日子里觅一份清凉，享一日清欢吧~~</p>\n<p><br></p>\n<h2><b>海 岛 旅 行</b></h2>\n<p><img src=\"https://pic4.zhimg.com/v2-caa65844fa95fd2f0f13c66f54acfafb_720w.jpg?source=b1748391?rss\" data-caption=\"©子晋的时光碎片/图虫创意\" data-size=\"normal\" data-rawwidth=\"853\" data-rawheight=\"1280\" data-watermark=\"original\" data-original-src=\"v2-caa65844fa95fd2f0f13c66f54acfafb\" data-watermark-src=\"v2-b5b3878004cfc8f45442668c4aff3543\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"riR67TbN\"><b>「 三沙市 」</b></p>\n<p data-pid=\"b-K_E448\"> <b>海南</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-31c459658092d13d87e85effd9dfe80e_720w.jpg?source=b1748391?rss\" data-caption=\"©影子666/图虫创意\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" data-watermark=\"original\" data-original-src=\"v2-31c459658092d13d87e85effd9dfe80e\" data-watermark-src=\"v2-96ea49a3c45c5a22cdb3bb8af30bdcbc\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"eQN8wvmH\">从明朝开始，琼州府便隶属于广东省，州府所在地为琼山县（今海口琼山区府城镇），管辖全岛。自此，西沙、南沙群岛正式划归琼州府管辖。2012年6月21日，国务院撤销西沙群岛、南沙群岛、中沙群岛办事处，在西南中沙办事处的基础上设立地级市——<b>三沙市</b>，市政府驻地为<b>西沙群岛</b>的<b>永兴岛</b>。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-42c88cfb7aee009eec1219245d619f1e_720w.jpg?source=b1748391?rss\" data-caption=\"三沙市七连屿等岛屿；©李咸良/图虫创意\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"718\" data-watermark=\"original\" data-original-src=\"v2-42c88cfb7aee009eec1219245d619f1e\" data-watermark-src=\"v2-250c300d6f749073bfd57ef6cb4f650f\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"DNyBhJGY\">“三沙”（西沙群岛、中沙群岛和南沙群岛）在历史上素有<b>“千里长沙、万里石塘”</b>之称，是<b>中国最美的后花园</b>。无尽碧波上散落着点点珊瑚礁岛，水晶般透彻的水面之下是色彩缤纷的珊瑚和热带鱼，景色可以和举世闻名的大堡礁与马尔代夫相媲美。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-a4ded886df392f50277c0b754d435e30_720w.jpg?source=b1748391?rss\" data-caption=\"三沙市永乐群岛的琛航岛；©于山榕/图虫创意\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"698\" data-watermark=\"original\" data-original-src=\"v2-a4ded886df392f50277c0b754d435e30\" data-watermark-src=\"v2-93f88b0f9be52fd3c4b0aba7571769e1\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"fW-JK4qN\">去三沙旅行可不像买张机票就能飞到海南那么容易。普通游客前往三沙的唯一官方渠道是搭乘“椰香公主”号邮轮。邮轮一般会在下午由海口港起航，经过文昌木兰角、七洲列岛、北礁，于第二天清晨到达西沙永乐群岛，陆续参观银屿岛、鸭公岛及全富岛，并于 第四天启程返回海口。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-d86b10608504434f96fa469fdd89a193_720w.jpg?source=b1748391?rss\" data-caption=\"三沙市永乐环礁羚羊礁、甘泉岛；©李咸良/图虫创意\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"721\" data-watermark=\"original\" data-original-src=\"v2-d86b10608504434f96fa469fdd89a193\" data-watermark-src=\"v2-2bd2ffbb61efdecc0c74f8845bd57de6\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"OsvcXC2f\">如果你有幸通过正规渠道踏上了西沙群岛，一定不要留下任何来过的痕迹，尽力维护好这片绝无仅有的净土。</p>\n<p><br></p>\n<p data-pid=\"7AHIp_2o\"><b>*当地防疫小贴士</b><br>凡从低风险区（中、高风险区所在县（市、区、旗等）的其他地区）入琼的人员和7天（离开低风险区之日算起）内有低风险区旅居史的来琼返琼人员，凭48小时内1次核酸检测阴性报告办理登机（车、船）手续；入琼后第3天开展1次核酸检测。</p>\n<p><br></p>\n<p data-pid=\"5374Furc\"><b>「 东山岛 」</b></p>\n<p data-pid=\"1rFbTAtx\"><b>  福建</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-874fb979516faf218af120886aa89f97_720w.jpg?source=b1748391?rss\" data-caption=\"©大光圈975/图虫创意\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"727\" data-watermark=\"original\" data-original-src=\"v2-874fb979516faf218af120886aa89f97\" data-watermark-src=\"v2-29440a22e900e5c6c3757afcb7f36178\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"1hU5Y40G\">东山岛像一片被啃食过的树叶悬在漳州地图的东南边，每个被啃食的缺口都是一片美丽的海湾。无论哪片海滩，海水都有着自带滤镜般的效果，这里的夏日，飘逸长裙是最常见的身影。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-04bce0665d9253715709d09d07a612d0_720w.jpg?source=b1748391?rss\" data-caption=\"©徐畅宇/图虫创意\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"608\" data-watermark=\"original\" data-original-src=\"v2-04bce0665d9253715709d09d07a612d0\" data-watermark-src=\"v2-1078c8fa5ed9649be0e56f3e2795baee\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"AoZgaJHW\">县城所在地西埔镇离海尚远，游玩岛屿一般以东北角的铜陵镇为据点，镇上吃住选择颇丰，<b>风动石</b>、南门湾也都位于此，<b>明星沙滩马銮湾</b>紧邻其南。</p>\n<p><img src=\"https://pica.zhimg.com/v2-0c815ca93a498d1f46403e137abcfb9f_720w.jpg?source=b1748391?rss\" data-caption=\"©阿风/图虫创意\" data-size=\"normal\" data-rawwidth=\"719\" data-rawheight=\"1280\" data-watermark=\"original\" data-original-src=\"v2-0c815ca93a498d1f46403e137abcfb9f\" data-watermark-src=\"v2-a1bc93155fe3217c16a9cd01c9caa6e8\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"Qh5MrGMf\">小镇中心是本地人的生活区，团结路是主街。紧挨着风动石景区的顶街是民宿、客栈核心区，也是电影《左耳》的拍摄地，借着电影取景地效应，街头巷尾的“电影感”很强。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-741f9d70c8119199d5c741eda4b6a613_720w.jpg?source=b1748391?rss\" data-caption=\"由Chen_小远提供\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"716\" data-watermark=\"original\" data-original-src=\"v2-741f9d70c8119199d5c741eda4b6a613\" data-watermark-src=\"v2-40c0d906690f51e071163cd40ca484a3\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"M_7Bhyge\">距铜陵镇7公里外的<b>金銮湾</b>，客流稀少，水质更清。若想另辟蹊径，跑一趟<b>乌礁湾的渔村</b>，能让你见识海湾的不同面。</p>\n<p><img src=\"https://pica.zhimg.com/v2-46ff72e1c184c690aa625ea350a6e826_720w.jpg?source=b1748391?rss\" data-caption=\"由Chen_小远提供\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-46ff72e1c184c690aa625ea350a6e826\" data-watermark-src=\"v2-7ce39b2c6ccdb7a72eeef74f5aa0e94d\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"KS8eXJlr\"><b>*当地防疫小贴士</b><br>对7天内有低风险地区（中高风险区所在县市区旗的其他地区）旅居史的入（返）厦人员：应持48小时内核酸检测阴性证明，并在入厦后3天内应完成两次核酸检测，并做好健康监测。</p>\n<p><br></p>\n<h3><b>轻 装 徒 步</b></h3>\n<p><img src=\"https://picx.zhimg.com/v2-0bbcb99e423d3d1eb13b9bfbcee753dd_720w.jpg?source=b1748391?rss\" data-caption=\"©仙人板板/图虫创意\" data-size=\"normal\" data-rawwidth=\"879\" data-rawheight=\"1280\" data-watermark=\"original\" data-original-src=\"v2-0bbcb99e423d3d1eb13b9bfbcee753dd\" data-watermark-src=\"v2-d24660b2fe316b25c680fd1f466e3b3b\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"d9t6gxqc\"><b>「 稻城亚丁小转山 」</b></p>\n<p data-pid=\"PAjjOnTx\"><b>  四川</b></p>\n<p data-pid=\"eUk4AI2K\">亚丁徒步最推荐<b>亚丁小转山</b>，转的是观世音—仙乃日。轻装10～12小时走完，可住在亚丁村早出晚归。转山环线的起、终点是冲古草甸。如果对自己的体力不是很自信，可从冲古草甸坐电瓶车到洛绒牛场，可以省下近2小时。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-c2caf8c6c4be5c0dac25e82ac892bab8_720w.jpg?source=b1748391?rss\" data-caption=\"©健忘的行摄世界/图虫创意\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"721\" data-watermark=\"original\" data-original-src=\"v2-c2caf8c6c4be5c0dac25e82ac892bab8\" data-watermark-src=\"v2-3a52a923d47e8c1a61385f42e2ad2d6e\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"bhgNBJpT\">接下来仍旧和游客大部队一同，前往<b>牛奶海和五色海</b>。赶在12点之前，朝着牛奶海后方的垭口（海拔4750米）前行。翻过垭口，右前方小小的热松措（4550米）就是行进的方向，山路一直比较明显。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-967620952071e5b6603c1df074cdd721_720w.jpg?source=b1748391?rss\" data-caption=\"©liuzusai刘祖赛, CC BY 3.0 &amp;lt;https://creativecommons.org/licenses/by/3.0&amp;gt;, via Wikimedia Commons\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"717\" data-watermark=\"original\" data-original-src=\"v2-967620952071e5b6603c1df074cdd721\" data-watermark-src=\"v2-d41a1a434e7aaadaf854dc415893197e\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"lkeymMMq\">继续沿着山腰小路，左边逐渐出现的山谷是<b>卡斯地狱谷</b>，可不要在岔路口拐下去了。一处牛棚过后，陡峭的上坡路开始。这段坡度近70°的路也是最辛苦的，耗时40分钟抵达挂满经幡的垭口（海拔4580米）。接着都是下坡路，1.5小时可到<b>珍珠海</b>。重新汇入栈道上的游客队伍，下去就是<b>冲古草甸</b>。</p>\n<p><br></p>\n<p data-pid=\"P7M3iLj5\"><b>*当地防疫小贴士</b></p>\n<p data-pid=\"if0k7Cio\">近7天内有本土疫情发生的县 （市、区、旗）旅居史的来（返）川人员，应提前向目的地社区（村）登记报备。对有低风险区7天旅居史的人员，3天内完成两次核酸检测，并做好健康监测。</p>\n<p><br></p>\n<p data-pid=\"hG3iuNSB\"><b>「 穿越东西涌 」</b></p>\n<p data-pid=\"8VoITAjn\"><b>  深圳</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-7d7592019851c67d77d85beda80fa42d_720w.jpg?source=b1748391?rss\" data-caption=\"©君寻/图虫创意\" data-size=\"normal\" data-rawwidth=\"876\" data-rawheight=\"1280\" data-watermark=\"original\" data-original-src=\"v2-7d7592019851c67d77d85beda80fa42d\" data-watermark-src=\"v2-8e00d9584ca36728dcb0b3a0582c857c\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"8cb7DoVs\">大鹏半岛的海岸线被《中国国家地理》杂志评为“中国最美的八大海岸”之一，纯净的自然风光是很多深圳人避世的选择，周末前来得对堵车或限行做好心理准备。</p>\n<p><img src=\"https://pica.zhimg.com/v2-c644909b17121b4b147733bf3d0ec7c4_720w.jpg?source=b1748391?rss\" data-caption=\"由寓宇今天拍了提供\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"608\" data-watermark=\"original\" data-original-src=\"v2-c644909b17121b4b147733bf3d0ec7c4\" data-watermark-src=\"v2-6efb8f339ebc201f53685ddff660641a\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"Ug-8ZOzb\"><br>穿越东西涌（也写作“冲”）是深圳热门的<b>海滨徒步路线（大约4小时）</b>，只需要沿着海岸走就没错了，或者“沿着垃圾走也不会丢”。</p>\n<p><img src=\"https://picx.zhimg.com/v2-ebf672099d4324ec64369c6f41295e9c_720w.jpg?source=b1748391?rss\" data-caption=\"由寓宇今天拍了提供\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"608\" data-watermark=\"original\" data-original-src=\"v2-ebf672099d4324ec64369c6f41295e9c\" data-watermark-src=\"v2-31841d5d8de315c1032e79605a0d2444\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"VQG1kkvj\">如果是阴天，可以从东涌出发，路程先难后易相对轻松；如果是大晴天，则建议从西涌到东涌，这样是背阳前进不会被晒晕。西涌是深圳最大的沙滩，东涌分布着茂密的红树林，别有一番风味。</p>\n<p><br></p>\n<p data-pid=\"7jSIDjJj\"><b>*当地防疫小贴士</b></p>\n<p data-pid=\"gjTmf498\">根据深圳机场疫情防控最新要求，所有到达深圳机场的国内航班，出发前需持48小时内阴性核酸证明，落地后进行核酸采样。注：具体核酸证明有效期请以航司要求为准。所有到达深圳的旅客在起飞前必须核查粤康码绿码。</p>\n<p><br></p>\n<p data-pid=\"7jClNzxJ\"><b>「 武功山 」</b></p>\n<p data-pid=\"VXIKvKQr\"><b>  江西</b></p>\n<p><img src=\"https://pica.zhimg.com/v2-5a554b4e54edcab5f0a6da8afa96007f_720w.jpg?source=b1748391?rss\" data-caption=\"©杨翊/图虫创意\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"719\" data-watermark=\"original\" data-original-src=\"v2-5a554b4e54edcab5f0a6da8afa96007f\" data-watermark-src=\"v2-980c5bbd9e622e238980526464467976\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"6U9MI5h5\">几乎没有人会拒绝<b>十万亩高山草甸</b>的邀请。每年夏季，披上绿衣的武功山成了最亮眼的明星，无数旅行者慕名而来，在山顶支起帐篷，与星光朝霞为伴。他们说，整个南部中国，很难找到比这更壮观的云中草原。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-61ff1b37a68e3adf3665ef26fd2e6912_720w.jpg?source=b1748391?rss\" data-caption=\"武功山风景；©Huangdan2060, CC0, via Wikimedia Commons\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" data-watermark=\"original\" data-original-src=\"v2-61ff1b37a68e3adf3665ef26fd2e6912\" data-watermark-src=\"v2-7f7a3c3cfa1439fba8751a0f30b12451\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"-GNJJOkh\">武功山有多个登山入口，多条特色各异的徒步路线。<b>金顶—发云界</b>是无论你从哪里进入武功山，最不容错过的徒步路段。全程在山脊草甸间徒步，景色尤为壮观，需7～8小时。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-14cbbcee0c03a02806c166b88aa53c2b_720w.jpg?source=b1748391?rss\" data-caption=\"武功山风景；©又了个又/图虫创意\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-14cbbcee0c03a02806c166b88aa53c2b\" data-watermark-src=\"v2-3d2e28486769542529f0c1a50ddd36a6\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"B-H1kyC3\">感慨风光无与伦比的同时，长达5～6小时的翻山之旅也令人难忘。如从金顶出发，经吊马桩和白云客栈后，你需要依次翻过3个海拔1700米以上的大坡（小坡不计），即绝望坡、千丈岩和风车口，才能到达发云界的客栈群。</p>\n<p><br></p>\n<p data-pid=\"cUePXFsw\"><b>*当地防疫小贴士</b></p>\n<p data-pid=\"zCtm4W9m\">根据江西疾控微信公众号消息，国内中高风险地区和7天内有本土疫情所在县（市、区）来赣返赣人员提前向属地报备。国内中风险地区来赣返赣人员：7天居家隔离医学观察；在第1、4、7天各开展一次核酸检测。</p>\n<p><br></p>\n<h2><b>遇 见 湖 光</b></h2>\n<p><img src=\"https://pic1.zhimg.com/v2-a8f912a69a79db34b3df43ba43378160_720w.jpg?source=b1748391?rss\" data-caption=\"©浮生有梦三千场/图虫创意\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-a8f912a69a79db34b3df43ba43378160\" data-watermark-src=\"v2-16f78be7530fa52c3bb284ff4d497110\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"CyuGCqjZ\"><b>「 羊卓雍错 」</b></p>\n<p data-pid=\"MAqmugUC\"><b>  西藏</b></p>\n<p><img src=\"https://pica.zhimg.com/v2-64c897a32820549f1e25c1791bed485f_720w.jpg?source=b1748391?rss\" data-caption=\"由都匀一枝花提供\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" data-watermark=\"original\" data-original-src=\"v2-64c897a32820549f1e25c1791bed485f\" data-watermark-src=\"v2-a6ffa8c7b7ec0dd01cb7337c925d8663\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"179z5ak1\">羊卓雍错（“错”为藏语中“湖”的音译，也可译为“措”）是大多数旅行者初次进藏的必到之地。但不要以为你一定能看到碧蓝清澈的湖水—看羊湖，天气很重要，只有在晴天，羊湖才会将它最美的一面展现给你。</p>\n<p><img src=\"https://picx.zhimg.com/v2-2b51934a861c6534acf0d150b79d35b4_720w.jpg?source=b1748391?rss\" data-caption=\"由雍钦童鞋提供\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"608\" data-watermark=\"original\" data-original-src=\"v2-2b51934a861c6534acf0d150b79d35b4\" data-watermark-src=\"v2-f3f31ffec003ca5f0bd6cdbd284cd870\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"_lQIfFJV\">当你被湖水惊艳时，也会和藏民一样坚信如此美丽的事物必定是神之所赐。从拉萨出发的一日游是游览羊湖最便捷的方式。你也可以另辟蹊径，选择自驾、骑行，甚至用双脚来感受它的浩瀚和庞大。走进人迹罕至的岛屿、自然淳朴的村落，去看看羊湖和蔼又超脱的另一面。</p>\n<p><img src=\"https://pica.zhimg.com/v2-b5744aa2ee28b14043b79d54906bfe1e_720w.jpg?source=b1748391?rss\" data-caption=\"由雍钦童鞋提供\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"608\" data-watermark=\"original\" data-original-src=\"v2-b5744aa2ee28b14043b79d54906bfe1e\" data-watermark-src=\"v2-ec4ed8efe7c83ff7c7a9c31922601897\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"NWWERZ7w\">2013年起，山南市旅游局和浪卡子县人民政府每年<b>8月18日至8月20日</b>都举办<b>“环羊卓雍错自行车体验游”</b>活动。赛程3天，全程148公里，行程为沿羊卓雍错内环线骑行。</p>\n<p><br></p>\n<p data-pid=\"KIT3rUPW\"><b>*当地防疫小贴士</b></p>\n<p data-pid=\"jYvBEHHD\">根据拉萨发布微信公众号消息，严格落实进藏信息报备查验要求，所有进（返）藏人员进（返）藏前，需提前3天通过藏易通“入藏报备”小程序完成报备，如实填写行程信息。进（返）藏需对核酸检测报告、行程卡、健康码进行查验。</p>\n<p><br></p>\n<p data-pid=\"garTP2ik\"><b>「 赛里木湖 」</b></p>\n<p data-pid=\"4T2pPeYi\"><b>  新疆</b></p>\n<p data-pid=\"jBjRwsgP\">赛里木湖是新疆乃至中亚的一个例外。与那些深陷于低地和沙漠中的湖泊不同，超过2000米海拔的它有着惊人的澄净蓝色，被完美的森林和草原包围，一直是哈萨克和蒙古人最珍视的夏季家园。</p>\n<p><img src=\"https://picx.zhimg.com/v2-1b5145cc032ea1f3857c45d2153606b1_720w.jpg?source=b1748391?rss\" data-caption=\"由F风纸W提供\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"721\" data-watermark=\"original\" data-original-src=\"v2-1b5145cc032ea1f3857c45d2153606b1\" data-watermark-src=\"v2-05732a376d9664a04d7849b1171dbea8\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"AilMzgOe\">可以自驾也可以骑自行车环游赛里木湖，但在蒙古族牧民的蒙古包或者哈萨克族牧民的毡房睡一晚似乎是一种不可缺少的仪式。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-091dae00cec426a81f9de4eebe803439_720w.jpg?source=b1748391?rss\" data-caption=\"由F风纸W提供\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"721\" data-watermark=\"original\" data-original-src=\"v2-091dae00cec426a81f9de4eebe803439\" data-watermark-src=\"v2-00672050e3c09421a1c32447c8a3938a\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"J7Gw85el\">这样就不会错过夕阳下的西海草原，夜空照耀在水面上的银河，日出之前就已经在沼泽边徜徉的天鹅。在日出时骑马走到山脊上，蓝宝石一样的水面和蜿蜒起伏的天山峡谷都会奔流到你的眼里。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-9832da8781e41614f4c19b5293fb40d9_720w.jpg?source=b1748391?rss\" data-caption=\"由一颗小倒霉蛋提供\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1439\" data-watermark=\"original\" data-original-src=\"v2-9832da8781e41614f4c19b5293fb40d9\" data-watermark-src=\"v2-825fd7357f2ab778ac4fa0be94102d36\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"KFZBQAHF\"><b>*当地防疫小贴士</b></p>\n<p data-pid=\"6Oz1U60L\">根据新疆维吾尔族自治区地市级出行防疫政策措施，抵达新疆维吾尔族自治区的旅客，受新冠疫情影响，各地疫情防控政策调整频繁，为了确保您的出行顺畅，请您出行前务必联系当地疫情防控部门确认搭乘航班始发地及目的地最新疫情防控政策。详情请登录新疆维吾尔族自治区人民政府网查看。</p>\n<p><br></p>\n<h2><b>邂 逅 草 原</b></h2>\n<p><img src=\"https://pic3.zhimg.com/v2-75b12f303bbe8f541ab5a22c58c1e08f_720w.jpg?source=b1748391?rss\" data-caption=\"©中庸/图虫创意\" data-size=\"normal\" data-rawwidth=\"853\" data-rawheight=\"1280\" data-watermark=\"original\" data-original-src=\"v2-75b12f303bbe8f541ab5a22c58c1e08f\" data-watermark-src=\"v2-03a46617defb6dac7010823cafcf4778\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"r0uOSv0x\"><b>「 锡林郭勒草原 」</b></p>\n<p data-pid=\"NpG8Zbo3\"><b>  内蒙古</b></p>\n<p data-pid=\"Lz_8cy0Y\">如果你执意在内蒙古寻找最美的草原，那就来锡林郭勒吧。苍天寂寂，大地以绿色为肤，由山峦温柔勾勒线条，在光影与流云的共同作用下，草原展现出最上镜的状态。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-ef27ed34e551e50d840d105c4dde5691_720w.jpg?source=b1748391?rss\" data-caption=\"锡林郭勒草原，境内有全国唯一被联合国教科文组织纳入国际生物圈监测体系的锡林郭勒国家级草原自然保护区；©朝阳人/图虫创意\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"721\" data-watermark=\"original\" data-original-src=\"v2-ef27ed34e551e50d840d105c4dde5691\" data-watermark-src=\"v2-436d60a5652fd3e50f96a4582fb56673\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"AIBwAJJ7\">1987年，<b>锡林郭勒草原自然保护区</b>（锡林浩特市区东南70公里；门票15元）被联合国教科文组织纳入<b>“国际生物圈保护区”</b>，也被国际植物界誉为欧亚大陆的样板草原。保护区内涵盖了草甸草原、典型草原、沙地疏林和河谷湿地等多种草原形态，生长着榆树、白桦、山杨、山杏、沙蒿等植物。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-cb8cf76ec8d1c459d5acd77cf846a9b4_720w.jpg?source=b1748391?rss\" data-caption=\"©侣行自驾游/图虫创意\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"719\" data-watermark=\"original\" data-original-src=\"v2-cb8cf76ec8d1c459d5acd77cf846a9b4\" data-watermark-src=\"v2-65ea5653756b6f835c334485b487f473\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"UxQEn-tM\"><b>锡林九曲</b>从达里诺尔蜿蜒而来，沿途本是河水奔腾、绿野茵茵，却因上游建水库截流，加上连年干旱，河水接近干涸，成了小水沟，附近的水库也不再丰盈，缩水近半。</p>\n<p data-pid=\"fVZimaPn\"><b>*当地防疫小贴士</b></p>\n<p data-pid=\"cdSpiYBG\">根据草原明珠锡林浩特微信公众号消息，从中高风险地区所在县区其他区域来返人员，均需持48小时内核酸检测阴性证明。</p>\n<p><br></p>\n<p data-pid=\"Yg1kaxXh\"><b>「 那曲草原 」</b></p>\n<p data-pid=\"1vjmj3SC\"><b>  西藏</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-c5ffaadb48dc78be1f08454bc37d5cf8_720w.jpg?source=b1748391?rss\" data-caption=\"©风光猎人/图虫创意\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-c5ffaadb48dc78be1f08454bc37d5cf8\" data-watermark-src=\"v2-4ed896f380aae52a432525c941d1bf64\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"b9-fsjbB\">欢迎来到那曲，你已然踏上藏北的土地。如果你没有乘火车或汽车穿越青藏线，路过沿途都是“矮”山的牧区和光秃秃的羌塘草原的经历，那么那曲或许会带给你一些惊喜。</p>\n<p><img src=\"https://pica.zhimg.com/v2-7b2b40d740ad923c2d9bf85513047a29_720w.jpg?source=b1748391?rss\" data-caption=\"©Mr付坤/图虫创意\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"782\" data-watermark=\"original\" data-original-src=\"v2-7b2b40d740ad923c2d9bf85513047a29\" data-watermark-src=\"v2-55f8cac975ecde6cadb772f5a52d4d4f\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"0Nx0dFZg\"><b>那曲赛马节</b>也叫恰青格萨尔赛马节，是藏北规模最大的赛马盛会。那曲为赛马节建立了专门的赛马场，每到8月，草原一片碧绿，会场周围搭建起五彩缤纷的帐篷。赛马开始，彪悍的汉子骑着骏马飞驰，除了比拼速度、角逐胜利，还会有耍枪、射击、拾哈达、悬体、倒立等惊险项目。</p>\n<p><br></p>\n<p data-pid=\"22pQAp-G\"><b>「 那拉提草原 」</b></p>\n<p data-pid=\"OGZe8FqD\"><b>  新疆</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-452c3a923faf0eee7a0bb5e6e7a01c01_720w.jpg?source=b1748391?rss\" data-caption=\"©小寒/图虫创意\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-452c3a923faf0eee7a0bb5e6e7a01c01\" data-watermark-src=\"v2-7a700a298858bd343c9cdc1817ec69b6\" data-private-watermark-src=\"\" data-tags=\"porn\"></p>\n<p data-pid=\"1nDGui9E\">那拉提草原的名字源自成吉思汗西征受阻的故事。相传，一支蒙古军队由天山向伊犁进发。此时已是春天，天山山区依然是强风暴雪。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-432183169ab6701606dfca38ebb90d4f_720w.jpg?source=b1748391?rss\" data-caption=\"©水上音乐/图虫创意\" data-size=\"normal\" data-rawwidth=\"670\" data-rawheight=\"1280\" data-watermark=\"original\" data-original-src=\"v2-432183169ab6701606dfca38ebb90d4f\" data-watermark-src=\"v2-b2cb575338050abe3d576e347f607dcd\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"alq_TvWp\">忍受着饥饿和寒冷折磨的士兵们在黄昏前抵达了这片草原。此时呈现在他们眼前的是芳草遍野、繁花似锦，夕阳西下，一轮红日挂在远处的天空。士兵们心情大好，叫着“那拉提，那拉提”，意思是<b>“有太阳，有太阳”</b>。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-e83e890389402384532f3ca774f59182_720w.jpg?source=b1748391?rss\" data-caption=\"©晓舟摄影/图虫创意\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1093\" data-watermark=\"original\" data-original-src=\"v2-e83e890389402384532f3ca774f59182\" data-watermark-src=\"v2-60415a99ce26f739fed9e001b73feaea\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"i3jIbV7y\">那拉提草原山多林密、绿草成茵，草原上河道众多，既有俊美的群山，又有如涛的松林，在进入景区的山中，公路蜿蜒向上，芳草遍野、繁花似锦，不一会儿便到达空中大草原。</p>\n<p><br></p>\n<h2><b>畅 游 乐 园</b></h2>\n<p><img src=\"https://pica.zhimg.com/v2-a69fd3a7245e63e2ab38efad9acbd075_720w.jpg?source=b1748391?rss\" data-caption=\"©谢伟明/图虫创意\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-a69fd3a7245e63e2ab38efad9acbd075\" data-watermark-src=\"v2-8daaee6e1db58fa365c7ef761e70378f\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"4mcCip2y\"><b>「 迪士尼乐园 」</b></p>\n<p data-pid=\"gWHNP6Jj\"><b>  上海</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-85fd855966f3ea02a0d92a5d13a6edf5_720w.jpg?source=b1748391?rss\" data-caption=\"©William熊/图虫创意\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"607\" data-watermark=\"original\" data-original-src=\"v2-85fd855966f3ea02a0d92a5d13a6edf5\" data-watermark-src=\"v2-529d8c4d8ef22d5813bafc25f7fb1559\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"Ifjelt6o\">迪士尼的鼎鼎大名让这里自开放之日起就成了上海的新名片和最受欢迎的景点之一在保留了经典元素的基础上，上海乐园融入了不少<b>中国风的特色活动、表演以及美食，</b>甚至还有<b>全球迪士尼乐园中最刺激的体验项目。</b></p>\n<p><img src=\"https://picx.zhimg.com/v2-5a99a5f301f62d26a6446d26ec3eb92f_720w.jpg?source=b1748391?rss\" data-caption=\"©MasaneMiyaPA, CC BY-SA 4.0 &amp;lt;https://creativecommons.org/licenses/by-sa/4.0CC BY-SA 4.0 Creative Commons Attribution-Share Alike 4.0&amp;gt;, via Wikimedia Commons\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-5a99a5f301f62d26a6446d26ec3eb92f\" data-watermark-src=\"v2-f79cc77e4f5d279c13c5c9c933649fca\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"XcYQqWpr\">一定不要错过<b>创极速光轮</b>。它坐落于充满科幻元素和未来感的明日世界区域，是<b>全球迪士尼乐园中速度最快的过山车项目</b>，也是上海乐园中最受欢迎的项目之一。在<b>翱翔·飞跃地平线</b>这样的项目中，在4D巨幕前，你将经历一次环球飞行之旅。</p>\n<p><br></p>\n<p data-pid=\"4QTvPswD\"><b>*当地防疫小贴士</b></p>\n<p data-pid=\"LILZxa-a\">根据上海机场消息，旅客落地后需查验72小时内核酸检测阴性证明、健康码绿码、量体温、填写健康信息登记表。根据上海发布微信公众号消息，对7日内有低风险区【即中高风险区所在县（市、区、旗）的其他地区】旅居史的来沪返沪人员，抵沪后3天内完成2次核酸检测，做好健康监测。 </p>\n<p><br></p>\n<p data-pid=\"4R5bNJW5\"><b>「 环球影城 」</b></p>\n<p data-pid=\"oGBcukXc\"><b>  北京</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-787e66a00d83c6294c73f7af106fd33f_720w.jpg?source=b1748391?rss\" data-caption=\"©N509FZ, CC BY-SA 4.0 &amp;lt;https://creativecommons.org/licenses/by-sa/4.0&amp;gt;, via Wikimedia Commons\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-787e66a00d83c6294c73f7af106fd33f\" data-watermark-src=\"v2-7ec9510f6afdf20ed0ba81ef3eff32ab\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"ZXZ8UcMm\">经过了近5年的修建和准备，北京环球度假区在2021年9月20日开始正式运营。在这座世界上最大的环球影城主题乐园中，<b>哈利·波特和功夫熊猫</b>等主题区很能吸引孩子们的目光。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-102b49017b0f662b7f73b84bd34ac374_720w.jpg?source=b1748391?rss\" data-caption=\"©N509FZ, CC BY-SA 4.0 &amp;lt;https://creativecommons.org/licenses/by-sa/4.0&amp;gt;, via Wikimedia Commons\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-102b49017b0f662b7f73b84bd34ac374\" data-watermark-src=\"v2-4bc18d96ef093b5090ab164b9799ec66\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"D8ubNLZ4\">你还可以在极具赛博坦风格的变形金刚基地中尝试成为一名特工，与汽车人携手，共同作战，一起保护美丽的地球。又或是去到充满欢乐的小黄人乐园，与可爱的小黄人们一起走街串巷，快乐游戏~</p>\n<p data-pid=\"87K_NhH1\"><b>*当地防疫小贴士</b></p>\n<p data-pid=\"U61Z475R\">根据北京市人民政府官网消息，有进返京计划的旅客，持48小时内核酸检测阴性证明、“北京健康宝”绿码，在测温正常且做好个人防护的前提下可正常进返京，抵京24小时后、72小时内进行1次核酸检测。7日内有1例以上（含1例）本土新冠病毒感染者所在县（市、区、旗）旅居史人员严格限制进（返）京。</p>\n<p><br></p>\n<hr>\n<p data-pid=\"0U4cJ2se\">*在前往目的地之前，建议再次确认当地防疫政策后出行。</p>\n<p><br></p>\n<p data-pid=\"tVqQlMyX\"><b>你的八月打算如何度过呢？</b></p>\n<p data-pid=\"tNzdjA1Q\"><b>有什么样的出行计划呢？</b></p>\n<p data-pid=\"Y447-sKd\"><b>快来评论区，和大家分享吧！</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-396906c2e59f13369405545b726e9782_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1102\" data-rawheight=\"318\" data-watermark=\"original\" data-original-src=\"v2-396906c2e59f13369405545b726e9782\" data-watermark-src=\"v2-4158ca18cc9c1a74f01699586bce94fb\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-c9231231e87b9f4e31965423b40aa53b_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"827\" data-watermark=\"original\" data-original-src=\"v2-c9231231e87b9f4e31965423b40aa53b\" data-watermark-src=\"v2-9c6d027312f99deece34bcb8b35879b8\" data-private-watermark-src=\"\" data-qrcode-action=\"none\" data-qrcode-value=\"http://weixin.qq.com/r/1kjz63TEJylYrTCI9x3E\" data-tags=\"qrcode\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/lonelyplanet-15?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">LonelyPlanet</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/410587628/answer/2579920095?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">17 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/537256434?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">哪个季节适合去土耳其旅行？土耳其有哪些不容错过的景色？</a><br><a href=\"http://www.zhihu.com/question/542459490?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">云南有哪些适合暑假旅游的景点推荐？</a><br>\n","link":"http://www.zhihu.com/question/410587628/answer/2579920095?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"量化投资中的因子模型，因子暴露，因子收益具体指的是什么？如何使用？","date":"2022-07-19 06:10:33","description":"\n<p data-pid=\"rN6ycY0N\">看懵逼了太正常了， 我敢保证很多人其实还是很懵逼但是觉得自己看懂了。</p>\n<p><br></p>\n<p data-pid=\"Jmem6xBO\">我个人感觉， 因子模型可以区分以下几个概念：</p>\n<p><br></p>\n<p data-pid=\"8hEjp5Sy\">    因子、因子值、因子暴露、因子收益、因子组合</p>\n<p><br></p>\n<p data-pid=\"amGh5ooa\">在资产定价领域里， 大家假设的是资产的表现是由一些驱动力所驱动的，这些驱动力也被称为因子。 或者说，因子和资产的表现是有一定的因果关系的。</p>\n<p data-pid=\"_hHtS7Ko\">这里面， ”表现“和”因子“都是很抽象的概念， 和数学一点关系都没有。 我们如果想量化这种观点， 就需要干两件事：</p>\n<p data-pid=\"u_3UdhRv\">\t 1、 提出恰当的数学模型(model)</p>\n<p data-pid=\"-9RPO9Xd\">\t 2、 找到合理的代理变量(proxy)</p>\n<p><br></p>\n<p data-pid=\"RSm7Rhka\">资产的”表现“（performance）的代理变量， 最直白的想法就是用资产的收益率了。 </p>\n<p data-pid=\"ObYf4iOV\">而驱动的“因子”如何量化就千差万别了， 量化后的因子， 会得到一个“因子值”。 </p>\n<p data-pid=\"BAQUY-kN\">举个例子， 我认为股票这种资产的收益率， 和它背后公司的财务质量息息相关。  这里面， 公司的财务质量就是一个影响因子， 但是实际分析中，我们需要找到一个合理的变量来量化公司的财务质量， 比如ROE和ROA。 ROE和ROA是可以通过财务数据具体算出来的因子值。 </p>\n<p data-pid=\"4Rl7-txw\">通常我们看到的文章中，不会区分因子和因子值，因子值也只是我在这个回答下提出的一个名词，为了加以区别。 </p>\n<p><br></p>\n<p data-pid=\"-8Ewxe90\">“恰当的模型”就是普通的线性模型。 为了书写简便， 我假设就一个单因子好了,对于第i只股票</p>\n<p><br></p>\n<p data-pid=\"Qf6JJDne\"><img src=\"https://www.zhihu.com/equation?tex=E%28R_i%29%3D%5Calpha_i+%2B+%5Cbeta_i+%2A+%5Clambda\" alt=\"E(R_i)=\\alpha_i + \\beta_i * \\lambda\" eeimg=\"1\"></p>\n<p data-pid=\"TigztzXg\">（我们谈论的收益都是超额收益，所以去掉了无风险利率 ）</p>\n<p><br></p>\n<p data-pid=\"75YdcmFg\"><img src=\"https://www.zhihu.com/equation?tex=%5Calpha_i+\" alt=\"\\alpha_i \" eeimg=\"1\"> 表示定价误差</p>\n<p data-pid=\"VZHRtziS\"><img src=\"https://www.zhihu.com/equation?tex=%5Cbeta_i\" alt=\"\\beta_i\" eeimg=\"1\"> 表示因子暴露</p>\n<p data-pid=\"yXYyu1zM\"><img src=\"https://www.zhihu.com/equation?tex=%5Clambda\" alt=\"\\lambda\" eeimg=\"1\"> 表示因子收益率的<b>期望</b></p>\n<p><br></p>\n<p data-pid=\"8Msssbkw\">注意等式的两边都是期望， 这不是什么回归方程，这就是个等式。 </p>\n<p data-pid=\"zvFesP28\">如果用随机变量的方式去想, 我们可以考察时刻t的一个样本：</p>\n<p data-pid=\"OgqXEr-P\"><img src=\"https://www.zhihu.com/equation?tex=R_%7Bi%2Ct%7D%3D%5Calpha_i+%2B+%5Cbeta_i+%2A+%5Clambda_t%2B%5Cepsilon_%7Bi%2Ct%7D\" alt=\"R_{i,t}=\\alpha_i + \\beta_i * \\lambda_t+\\epsilon_{i,t}\" eeimg=\"1\"></p>\n<p><br></p>\n<p data-pid=\"5Xi8PQFQ\">数理统计学的作用主要就干俩事， 利用样本数据进行<b>估计和假设检验</b>。 我们有T期数据和N支股票构成了样本， 其中资产收益率我们能直接观测到。但是因子暴露和因子收益是要我们利用一些统计方法估计出来， 并检验是否显著的。 </p>\n<p><br></p>\n<p data-pid=\"NbTctRVD\">学CAPM的时候我们对暴露和因子收益率不懵逼， 因为CAPM的模型是个单因子模型，使用了市场因子。 市场因子的收益率是能直接从市场上观测到的， 然后我们利用回归分析， 就可以估计出每支股票对市场因子的敏感性。 </p>\n<p data-pid=\"sWwV2K4e\">因子暴露是啥， 是弹性， 是敏感性， 说白了就是当因子的收益率变动一点的时候， 对股票的收益率能影响多少。 我们有了资产收益率数据和因子收益率数据，做个回归就可以估计出弹性来了。但是对大多数情况，因子暴露和因子收益率根本观测不到哇！ 这俩货只要有一个能够观测到， 另外一个就可以被估计出来， 所以这是个先有鸡还是先有蛋的问题。 </p>\n<p><br></p>\n<p data-pid=\"CyGabL9z\">为了理解这个问题， 我们还是先从因子收益入手了。 由于因子收益概念还是太抽象， 所以我们就把他们具体化一点，提出了因子组合的概念, 也就是每个时刻t，都按照因子的“指导”，构建一个资产组合。 </p>\n<p><br></p>\n<p data-pid=\"lYTYN6nz\">每个时刻t的组合可能不尽相同，但是构建组合的原则是一样的。 比如市场组合就很好理解， 就是每期按照股票的市值加权构建组合即可。 如果我觉得股票代码越吉利越好， 我就多买点点股票代码里带8的，带6的，或者连号的股票， 这种投资组合就能体现出“代码吉利”这个因子的作用。 </p>\n<p data-pid=\"1zc4qpS9\">最简便的做法，就是使用<b>排序法</b>构建多空组合。 具体做法就是在时刻t，按照因子值的大小， 对资产进行截面的排序，然后平均分成若干组（比如分成5组）， 然后取第1组合第5组， 每个组内采用等权或者市值加权的方式构建组合， 然后做多第五组做空第一组， 获得t期的因子收益R_group5-R_group1。 有了因子序列之后， 直接取平均数就是因子收益率期望的估计。 </p>\n<p data-pid=\"gspeCbSb\">我认为这里隐含了一个假设， 因子值越大， 暴露的也越大， 虽然不一定是线性关系，但是基本的单调性还是有的。 第1和第5组的股票应该代表着对因子有着极大和极小暴露的两组股票， 两组股票构建的多空组合， 从某种意义上，应该具有强烈的因子暴露。 </p>\n<p><br></p>\n<p data-pid=\"OgiepkI8\">总结起来，这个最简单的流程是这样的：</p>\n<p data-pid=\"hw9IzROY\">计算因子值（比如用ROE表示质量因子）--&gt;利用因子值截面排序构建多空组合--&gt;计算出因子收益率序列--&gt;对历史数据进行时序回归估计出各个股票对质量因子的敏感度，即因子暴露。 </p>\n<p><br></p>\n<p data-pid=\"L7frlhnE\">考虑以下3种因子来理解因子、因子值、因子收益和因子暴露的区别与联系：</p>\n<p><br></p>\n<p data-pid=\"ErXAzkKW\">\t1、传统的风格因子一般由公司特征来表示（质量 成长 价值）， 特点是每个时刻t， 对每支股票n，都能算出来一个因子值。 同一个时刻t的截面上，每个股票的因子值可能不尽相同。 </p>\n<p><br></p>\n<p data-pid=\"TN77LiGq\">\t2、市场因子， 非传统的风格因子。 我们直接跳过了因子值计算的步骤， 把市值加权的股票组合当成因子组合， 可以直接观测到市场的收益率。 </p>\n<p><br></p>\n<p data-pid=\"ZHTBTtCN\">\t3、宏观因子， 对每个时刻t， 每支股票共享同一个因子值，比如GDP, CPI等。 但是，我们知道， 每个股票可能对统一个宏观指标的敏感度不同，也就是暴露不同。 比如，我们认为国家GDP增速和股票收益率有关系。 如果有三种公司，国难股， 国福股和打酱油股。 国难股就是对GDP因子暴露为负， 国福股就是对GDP因子暴露为正的股票， 打酱油股的暴露就是0. GDP下降的时候， 国难股会驱动出一些正向收益， 而国福股可能下跌然而酱油股和GDP涨跌基本无关。 </p>\n<p><br></p>\n<p><br></p>\n<p data-pid=\"Re5HtWu6\">考虑更严格的因子组合的定义：</p>\n<p data-pid=\"ZrxHes3J\">\t1、这个组合只对我们想要的因子有暴露，对其他因子的暴露为0</p>\n<p data-pid=\"D5tNjb6p\">\t2、所以满足条件1的组合中，因子组合的特异性方差最小 </p>\n<p><br></p>\n<p data-pid=\"LhdEpom8\">很可惜， 我们排序法获得的多空组合， 应该是不严格满足以上2点要求的。 而且多空组合这个方法，也仅仅适用传统风格因子。 使用截面回归或者Fama-Macbeth回归等方式， 可以解出这种纯因子组合。 具体流程对理解概念没有帮助，就不在此赘述。 </p>\n<p><br></p>\n<p data-pid=\"qkLR-rrG\">现代的很多多因子模型， 直接使用公司特征（ROA ROE之流）的因子值（做过一些标准化处理）作为资产对因子的暴露的proxy， 并且发现效果更好（虽然貌似还没人能解释清楚为什么）。 比如大家常见的BARRA模型，因子的暴露和因子计算的信号值就是一回事。  直觉上也可以理解， 我如果认为公司财务质量是驱动股票收益率的动力之一， 那么一个公司的财务质量指标越高，就会得到更多的财务质量收益，即暴露更大。 </p>\n<p data-pid=\"-nRlU0Lx\">当然可知， 一个因子可以用一个因子组合给实例化出来，这个组合除了有收益也自然有风险（波动）， 那么如果资产对因子有了暴露， 除了带来了收益， 也同样带来了风险。 </p>\n<p><br></p>\n<p><br></p>\n<h3>总结一下：</h3>\n<p data-pid=\"K7gOFSaQ\">我们认为资产的表现受到若干个因子所驱动， 暂时假设每个因子驱动力之间都是独立的。 </p>\n<p data-pid=\"B4dJEuZU\">一个因子的收益率， 表示一份因子能独立驱动出多少收益率来。</p>\n<p data-pid=\"ReuXc98L\">一个资产的因子暴露，表示他承担了多少份该因子的驱动， 也就是承担了多大的驱动力。 </p>\n<p data-pid=\"6AXWNJLX\">所以一个资产的收益率就等于承担因子的份数*单位因子驱动出来的收益率的求和。 这个资产可以是一支个股， 也可以是一些股票的组合。 </p>\n<p data-pid=\"NeFOXoeS\">所谓纯因子组合， 就是只收到某单一因子驱动， 而不受其他因子驱动的资产组合。 所以一个因子的收益率等于纯因子组合股票权重*股票收益率的的求和。  </p>\n<p data-pid=\"BPidfN64\">这似乎陷入了一个怪圈。 股票的收益分解成因子收益， 因子收益又可以分解成股票收益。</p>\n<p data-pid=\"I0Ji7ABr\">以上说法和因子值，以及如何计算因子一点关系都没有！由于现在多因子模型（比如BARRA)，常用传统风格因子的因子值来当做因子暴露，导致大家看不同的书籍论文会对概念产生懵逼感。 </p>\n<p data-pid=\"_OOPsLRm\">资产收益是表象的， 因子收益是潜在的。我们可以计算因子值来量化因子，然后使用因子值指导构建因子模拟组合(排序法或者使用因子值代替因子暴露)去估计因子收益率，使因子收益表象化，从而打破了这个怪圈。 </p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/august-lee?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">亲爱的龙哥</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/423950484/answer/2568980776?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">9 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/521461552?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2022 年以来 5 只公募量化对冲基金收益为正，公募量化对冲基金发展前景如何？</a><br><a href=\"http://www.zhihu.com/question/539717147?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">量化模型回测会遇到哪些坑？</a><br>\n","link":"http://www.zhihu.com/question/423950484/answer/2568980776?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"优化博客的累计布局偏移（CLS）问题","date":"2022-06-07 17:24:00","description":"\n<p>距离上一篇文章发布已有四个月了，是时候写几篇文章给博客除草了。上一次我介绍了我如何迁移、重构了我的博客的架构，这次我想来谈谈我在重构中优化和打磨访客体验时解决的一个问题。我的博客优化之旅 图片 lazyload 的学问和在 Hexo 上的最佳实践 我的博客有多快？ 天下武功，唯快不破 —— 我是这样优化博客的 再快一点，再快一点 ......</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/206311/26/14625/38940/629f7f81Eb11312de/b1e67f07b1cc9bc7.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/fix-blog-cls/\">https://blog.skk.moe/post/fix-blog-cls/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/fix-blog-cls/"},{"title":"使用 Next.js + Hexo 重构我的博客","date":"2022-03-17 16:24:00","description":"\n<p>在咕咕了一整年、只发布了三篇文章（其中两篇还是译文）之后，我决定还是稍微花一点时间好好折腾一下自己的博客，以 React 作为抓手，通过 Next.js 和 Hexo 深度共建，对标 Gatsby，打通静态 HTML 与用户交互之间的垂直领域屏障，实现多维矩阵闭环，为个人博客赋能（咳咳咳），然后水出 2022 年第一篇文章（逃）技术选型：Gatsby vs Next.js我使用 Hexo 驱动博客已经三年之久了，之前写过一个 开源的 Hexo 主题，后来还成为了 Hexo 的 Core Team Member、为 Hexo 贡献了不少代码。Hexo 是一个诞生于 2012 年的、由 Node.j......</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/218492/18/14257/25439/6227858fE1517791d/63119f6e39dc9389.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/\">https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Node.js","date":"2022-01-14 10:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h2>\n<ul>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-nodejs\">安装 Node.js</a></li>\n</ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Node.js 官网 (<a href=\"https://node.js.org/\">https://node.js.org</a>)</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/image-20220114174925675.png\" alt=\"image-20220114174925675\"></p>\n<p>下载 Node.js 安装包（推荐下载 LTS 版本）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175645.png\" alt=\"image-20220114175645642\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175750.png\" alt=\"image-20220114175749822\"></p>\n<p>勾选同意协议，点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175835.png\" alt=\"image-20220114175835742\"></p>\n<p>修改文件安装位置，点击 <code>Next</code>。（也可以不用改）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175929.png\" alt=\"image-20220114175929226\"></p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180010.png\" alt=\"image-20220114180010036\"></p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180044.png\" alt=\"image-20220114180043895\"></p>\n<p>点击 <code>Install</code> 开始安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180108.png\" alt=\"image-20220114180107827\"></p>\n<p>等待安装完成。<img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180122.png\" alt=\"image-20220114180122728\"></p>\n<p>点击 <code>Finish</code> 完成安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180206.png\" alt=\"image-20220114180206024\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>打开 <code>Git Bash</code>.</p>\n<blockquote><p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。<br>或是在开始菜单中找到 Git Bash.</p></blockquote>\n<p>输入 <code>node -v</code> 和 <code>npm -v</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180458.png\" alt=\"image-20220114180458685\"></p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-nodejs/"},{"title":"2022: 新年快乐！","date":"2021-12-31 16:00:00","description":"\n<p>转眼间，2021 年已经过去。这一年非常忙碌，以至于博客一周年的纪念来不及写，许多文章计划停留在了 To Do 里。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%8D%9A%E5%AE%A2\" class=\"headerlink\" title=\"博客\"></a>博客</h2>\n<p>由于 Cloudflare Web Analytics 是在 2021 年 4 月份启用的，再加上后来又将统计代码去除，所以关于访问量的信息不可用。</p>\n<p>截止至 2021 年 12 月 31 日，博客共发布 15 篇文章，其中 2021 年发布 11 篇文章，原创文章 10 篇。</p>\n<p>目前采用 <code>LeanCloud + Waline</code> 的评论方式，自 7 月份被刷评论后将评论权限改为登录（支持 <code>GitHub</code> 登录），还有部分评论在迁移中丢失，实在抱歉。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>博客自 2021 年 1 月 13 日将主题改为 <code>Miracle</code>，这是一款简洁、轻量的单栏 Hexo 主题。</p>\n<p><code>Miralce</code> 目前的版本是 <code>2.0.1</code>，全新的版本去除 jQuery，进一步提升性能。</p>\n<p>GitHub 仓库：<a href=\"https://github.com/hifun-team/hexo-theme-miracle\">https://github.com/hifun-team/hexo-theme-miracle</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%9B%B4%E5%A4%9A\" class=\"headerlink\" title=\"更多\"></a>更多</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">=&gt; ...</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2022/"},{"title":"无垠 2021 年度总结","date":"2021-12-31 08:36:10","description":"\n<p>真是忙碌的一年啊。转眼 2021 已经过去，2022 即将到来。又到了该总结这一年的时候了。</p>\n<h1>统计数据</h1>\n<p>年度总结的第一部分仍然是一些统计数据。以下数据截止 2021 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 29,073 (<span>+0.6%</span>)，年 PV 67,688 (<span>-11.61%</span>)，日均 UV 79.65，平均停留时间 3分34秒 (<span>-13.7%</span>)，平均跳出率 55% (<span>-9.8%</span>)。一年有效文章数 1 (<span>-80%</span>)，新增评论 109 条 (<span>-54.96%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\" alt=\"\" width=\"515\" height=\"620\" class=\"aligncenter size-full wp-image-2537\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog-249x300.jpg 249w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>除了 UV 较去年提高 100 多之外，其他数据全部下滑。主要原因还是因为今年实在太过忙碌，只更新了一篇博客，评论区也没有怎么维护。不过目前已经有两篇新的文章在路上了，希望可以尽快写完吧。</p>\n<h2>个人主页</h2>\n<p>个人页总 UV 3,515 (<span>-18.12%</span>)，总 PV 3,929 (<span>-4.56%</span>)，日均 UV 9.63，平均停留时间 55秒 (<span>-12.7%</span>)。访问的主要来源是知乎和 GitHub。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\" alt=\"\" width=\"515\" height=\"647\" class=\"aligncenter size-full wp-image-2538\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton-239x300.jpg 239w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>仍然是没有更新个人主页的一年，我也没有继续宣传这个页面，统计数据下滑大概是正常的。</p>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 4 次，新增 149 commits (<span>-54.57%</span>)，Star 数增加了 174，现有 788。</p>\n<p>终于，MDx 2.0 发布了。但是因为今年的过于忙碌，MDx 并没有得到足够的维护，版本发布周期也拉得比较长，很多 Bug 没能及时修复。希望明年可以把更多的时间花在维护 MDx 上。无论如何，还是感谢各位对于 MDx 的支持！</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>2021 大事记</h1>\n<p>说起来，2021 真的太多“第一次”了...</p>\n<ul>\n<li>一月：由于电脑电池鼓包，第一次用 iPad 外接屏幕远程桌面到服务器来考期末🌚太痛苦了</li>\n<li>一月：MDx 喜提 600 Stars</li>\n<li>三月：第一次测核酸（真的酸）</li>\n<li>三月：第一次坐上 A350！(B-309W）</li>\n<li>三月：第一次来到英国</li>\n<li>六月：第一次来到伦敦</li>\n<li>六月：第一次去猫咖撸猫🐱</li>\n<li>六月：第一次坐上 B777！(B-2025）</li>\n<li>七月：酒店隔离十四天🌚</li>\n<li>七月：MDx 喜提 700 Stars</li>\n<li>七月：第一次和猫一起住（时刻有猫撸真的爽😆）</li>\n<li>七月：入职<a href=\"https://75.team/\">奇舞团</a>实习</li>\n<li>八月：北京景点怎么这么多</li>\n<li>九月：北京景点怎么还有这么多</li>\n<li>九月：<a href=\"https://flyhigher.top/develop/2160.html\">谈谈 WebAuthn</a> 被 <a href=\"https://weibo.com/1893751011/KyipM3tOM\" rel=\"noopener noreferrer\">w3c中国微博转发</a><del>（虽然并没有人看）</del>\n</li>\n<li>九月：从奇舞团<del>跑路</del>\n</li>\n<li>九月：整了个 Stackoverflow 的复制粘贴键盘<del>，太好用了</del>\n</li>\n<li>十月：终于买了心心念念的 MSFS</li>\n<li>十一月：终于买了一台新相机</li>\n<li>十一月：第一次坐上 A380！(B-6140）</li>\n<li>十二月：第一次来到爱丁堡并和 <a href=\"https://diygod.me/\">@DIYgod</a> 面基</li>\n</ul>\n<section><div class=\"set-images-div\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\" alt=\"和猫一起住的唯一问题就是手机很快会被猫片塞满\" width=\"730\" height=\"1500\" class=\"aligncenter size-full wp-image-2518\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg 730w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-146x300.jpg 146w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-498x1024.jpg 498w\" sizes=\"(max-width: 730px) 100vw, 730px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\" alt=\"看到你在写前端，猫猫很担心你\" width=\"1004\" height=\"1500\" class=\"aligncenter size-full wp-image-2523\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg 1004w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-201x300.jpg 201w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-685x1024.jpg 685w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-768x1147.jpg 768w\" sizes=\"(max-width: 1004px) 100vw, 1004px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\" alt=\"高效开发工具（确信\" width=\"1500\" height=\"1019\" class=\"aligncenter size-full wp-image-2519\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-300x204.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-1024x696.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-768x522.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\" alt=\"和 Ralph 在天坛\" width=\"947\" height=\"1500\" class=\"aligncenter size-full wp-image-2524\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg 947w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-189x300.jpg 189w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-646x1024.jpg 646w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-768x1216.jpg 768w\" sizes=\"(max-width: 947px) 100vw, 947px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\" alt=\"380!\" width=\"1500\" height=\"874\" class=\"aligncenter size-full wp-image-2517\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-300x175.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-1024x597.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-768x447.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a>\n</div>\n<div class=\"set-images-div2\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\" alt=\"到处玩.jpg\" width=\"1500\" height=\"1080\" class=\"aligncenter size-full wp-image-2521\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-300x216.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-1024x737.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-768x553.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\" alt=\"还是到处玩.jpg\" width=\"977\" height=\"1500\" class=\"aligncenter size-full wp-image-2520\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg 977w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-195x300.jpg 195w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-667x1024.jpg 667w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-768x1179.jpg 768w\" sizes=\"(max-width: 977px) 100vw, 977px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\" alt=\"380 上的星空\" width=\"1002\" height=\"1500\" class=\"aligncenter size-full wp-image-2522\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg 1002w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-200x300.jpg 200w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-684x1024.jpg 684w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-768x1150.jpg 768w\" sizes=\"(max-width: 1002px) 100vw, 1002px\"></a>\n</div>\n</section><p><span>点击图片查看描述</span></p>\n<p>对了，对于可爱的猫猫们，我整了一个 Telegram 贴纸包，你可以在这里获取：<a href=\"https://telegram.me/addstickers/huanAndDan\">https://telegram.me/addstickers/huanAndDan</a>。</p>\n<h1>跨年红包</h1>\n<p>今年的解题之旅，从下面这张图片开始：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\" alt=\"\" width=\"1510\" height=\"1250\" class=\"aligncenter size-full wp-image-2556\"></a>\n<p>不过，鉴于今年的题目较以往对于认真解题的人更难，我还准备了隐藏红包，在解题中收集线索即可发现隐藏红包。共有 20 个普通红包和 10 个隐藏红包。</p>\n<p>解题计划持续到东八区 2022.02.03 23:59:59 或红包被领完为止，之后我会发布题解。不过由于去年情况混乱，今年在解题过程中我一旦发现有不正常的现象就会立即停止活动。Anyway，新年快乐！祝玩得开心。</p>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报用到了 PS 和 Adobe 家的新玩具 Dimension。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\" alt=\"\" width=\"707\" height=\"1000\" class=\"aligncenter size-full wp-image-2547\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg 1414w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-212x300.jpg 212w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-724x1024.jpg 724w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-768x1086.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-1086x1536.jpg 1086w\" sizes=\"(max-width: 707px) 100vw, 707px\"></a>\n<p>那么祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2507.html"},{"title":"[译] 不，Web3 不是去中心化","date":"2021-12-14 14:01:00","description":"加密货币社区对元宇宙和 Web3 的狂热仍在继续，大量投资人和开发者前仆后继加入其中。但是，Web3 真的能实现支持者们的种种愿景吗？亦或是另一个镜中月、水中花？也许让历史照进现实，能给我们答案。<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/123139/11/24965/54827/62215eedE5e3da14a/80c24408e97057dd.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/web3-is-not-decentralization/\">https://blog.skk.moe/post/web3-is-not-decentralization/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/web3-is-not-decentralization/"},{"title":"[译] 捍卫自由的互联网，对 Web3 说不","date":"2021-12-12 13:40:00","description":"作为一个充满泡沫和噱头的新概念，Web3 和元宇宙在区块链的社区中掀起了一波浪潮。鼓吹者坚信 Web3 就是互联网的未来、不惜砸下大把的金钱和精力、希望能在未来中捞一杯羹；而大部分人保持观望的态度。是时候来一点 Web3 的反对意见了。<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/87908/13/23797/13415/622032afE3a2f9e9f/95c01e98cd4a707a.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/\">https://blog.skk.moe/post/keep-web-free-say-no-to-web3/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/"},{"title":"2021 年 JavaScript Promise 性能对比","date":"2021-12-07 08:19:00","description":"\n<p>我们正生活在一个「Any application that can be written in JavaScript, will eventually be written in JavaScript」的时代。作为一门兼具动态性和简单性的语言，JavaScript 已经占领了客户端、服务端，甚至在机器学习中也占据一席之地；不可避免的，异步执行也逐渐成为这门语言不可缺少的一部分。TL; DR Bluebird 依然是速度最快、内存占用最少的 Promise 实现 Runtime 的 async / await 实现越来越快、顺序执行的性能已经超过 Native Promise，占用的内存也更少 对于平行并发执行的 Promise，Bluebird 的性能依然一骑绝尘。......</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157404/28/28495/143414/622032b2Ef7b495fd/6a9bd02e79392c9d.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/promise-performance-benchmark/\">https://blog.skk.moe/post/promise-performance-benchmark/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/promise-performance-benchmark/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Git","date":"2021-11-12 13:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h3>\n<ul><li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li></ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Git 官网 (<a href=\"https://git-scm.com/\">https://git-scm.com</a>).</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112204849.png\"></p>\n<p>点击页面中的 <code>Download For Windows</code> 下载 Windows 版本。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211507.png\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>，同意协议。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211528.png\"></p>\n<p>修改程序安装位置，点击 <code>Next</code>（直接装在 C 盘也不是不行）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211604.png\"></p>\n<p>组件选项，可选桌面快捷键、右键菜单、LFS 支持、自动检查更新等。</p>\n<p>点击 <code>Next</code> 进入下一步。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211609.png\"></p>\n<p>开始菜单文件夹名，保持默认就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211613.png\"></p>\n<p>默认编辑器，保持 Vim 就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211616.png\"></p>\n<p>环境变量，选择第 2 个，点击 <code>Next</code>。</p>\n<blockquote><p>如果选择第 1 个，则只能在 Git Bash 中使用，可能会出现问题</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211619.png\"></p>\n<p>剩下的都可以保持默认，一路 Next，然后点击 <code>Install</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211622.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211624.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211627.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211630.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211633.png\"></p>\n<p>等待安装完毕。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。</p>\n<p>（或是在开始菜单中找到 Git Bash）</p>\n<p>输入 <code>git --version</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/7ec315b7764cc.png\"></p>\n<p>大功告成！</p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-git/"},{"title":"前端时间国际化 101","date":"2021-10-14 15:58:23","description":"\n<blockquote>\n<p>时间只是幻觉。</p>\n<footer>—— 阿尔伯特·爱因斯坦</footer>\n</blockquote>\n<p>最近在开发一个需要完善国际化方案的前端项目，在处理时间国际化的时候遇到了一些问题。于是花了一些时间研究，有了这篇文章。不过由于网上关于 JavaScript 中 <code>Date</code> 对象的坑的文章已经一抓一大把了，<strong>因此这篇文章不是 JavaScript 中 <code>Date</code> 对象的使用指南，而是只专注于前端时间国际化。</strong></p>\n<h1>从时区说起</h1>\n<p>要想处理时间，UTC 是一个绕不开的名字。协调世界时（Coordinated Universal Time）是目前通用的世界时间标准，计时基于原子钟，但并不等于 TAI（国际原子时）。TAI 不计算闰秒，但 UTC 会不定期插入闰秒，因此 UTC 与 TAI 的差异正在不断扩大。UTC 也接近于 GMT（格林威治标准时间），但不完全等同。可能很多人都发现近几年 GMT 已经越来越少出现了，这是因为 GMT 计时基于地球自转，由于地球自转的不规则性且正在逐渐变慢，目前已经基本被 UTC 所取代了。</p>\n<blockquote><p>JavaScript 的 <code>Date</code> 实现不处理闰秒。实际上，由于闰秒增加的不可预测性，Unix/POSIX 时间戳完全不考虑闰秒。在闰秒发生时，Unix 时间戳会重复一秒。这也意味着，一个时间戳对应两个时间点是有可能发生的。</p></blockquote>\n<p>由于 UTC 是标准的，我们有时会使用 UTC+/-N 的方式表达一个时区。这很容易理解，但并不准确。中国通行的 <code>Asia/Shanghai</code> 时区<strong>大部分</strong>情况下可以用 UTC+8 表示，但英国通行的 <code>Europe/London</code> 时区并不能用一个 UTC+N 的方式表示——由于夏令时制度，<code>Europe/London</code> 在夏天等于 UTC+1，在冬天等于 UTC/GMT。</p>\n<blockquote><p>一个时区与 UTC 的偏移并不一定是整小时。如 <code>Asia/Yangon</code> 当前为 UTC+6:30，而 <code>Australia/Eucla</code> 目前拥有奇妙的 UTC+8:45 的偏移。</p></blockquote>\n<p>夏令时的存在表明<strong>时间的表示不是连续的</strong>，时区之间的时差也并不是固定的，我们并不能用固定时差来处理时间，这很容易意识到。但一个不容易意识到的点是，时区还包含了其历史变更信息。中国目前不实行夏令时制度，那我们就可以放心用 UTC+8 来表示中国的时区了吗？你可能已经注意到了上一段中描述 <code>Asia/Shanghai</code> 时区时我使用了<strong>大部分</strong>一词。<code>Asia/Shanghai</code> 时区在历史上实行过夏令时，因此 <code>Asia/Shanghai</code> 在部分时间段可以使用 UTC+9 来表示。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1988-04-18 00:00:00')\r\n// Mon Apr 18 1988 00:00:00 GMT+0900 (中国夏令时间)</pre>\n<blockquote><p>夏令时已经够混乱了，但它实际上比你想象得更混乱——部分穆斯林国家一年有四次夏令时切换（进入斋月时夏令时会暂时取消），还有一些国家使用混沌的 15/30 分钟夏令时而非通常的一小时。</p></blockquote>\n<blockquote><p><strong>不要总是基于 <code>00:00</code> 来判断一天的开始。</strong>部分国家使用 0:00-1:00 切换夏令时，这意味着 23:59 的下一分钟有可能是 1:00。</p></blockquote>\n<p>事实上，虽然一天只有 24 个小时，但当前（2021.10）正在使用的时区有超过 300 个。<strong>每一个时区都包含了其特定的历史。</strong>虽然有些时区在现在看起来是一致的，但它们都包含了不同的历史。时区也会创造新的历史。由于政治、经济或其他原因，一些时区会调整它们与 UTC 的偏差（萨摩亚曾经从 UTC-10 切换到 UTC+14，导致该国 2011.12.30 整一天都消失了），或是启用/取消夏令时，甚至有可能导致一个时区重新划分为两个。因此，为了正确处理各个时区，我们需要一个数据库来存放时区变更信息。还好，已经有人帮我们做了这些工作。目前大多数 *nix 系统和大量开源项目都在使用 <a href=\"https://www.iana.org/time-zones\" rel=\"noopener\">IANA 维护的时区数据库</a>（IANA TZ Database），其中包含了自 Unix 时间戳 0 以来各时区的变更信息。当然这一数据库也包含了大量 Unix 时间戳 0 之前的时区变更信息，但并不能保证这些信息的准确性。IANA 时区数据库会定期更新，以反映新的时区变更和新发现的历史史实导致的时区历史变更。</p>\n<blockquote><p>Windows 不使用 IANA 时区数据库。微软为 Windows 自己维护了一套<a href=\"https://docs.microsoft.com/zh-cn/troubleshoot/windows-client/system-management-components/daylight-saving-time-help-support\" rel=\"noopener\">时区数据库</a>，这有时会导致在一个系统上合法的时间在另一系统上不合法。</p></blockquote>\n<p>既然我们不能使用 UTC 偏移来表示一个时区，那就只能为每个时区定义一个标准名称。通常地，我们使用 <code>/</code> 来命名一个时区。这里的城市一般为该时区中人口最多的城市。于是，我们可以将中国的通行时区表示为 <code>Asia/Shanghai</code>。也有一些时区有自己的别名，如太平洋标准时间 <code>PST</code> 和协调世界时 <code>UTC</code>。</p>\n<blockquote><p>时区名称使用城市而非国家，是由于国家的变动通常比城市的变动要快得多。</p></blockquote>\n<blockquote><p><strong>城市不是时区的最小单位。</strong>有很多城市同时处于多个时区，甚至澳大利亚<a href=\"https://en.wikipedia.org/wiki/Gold_Coast_Airport\" rel=\"noopener\">有一个机场</a>的跑道两端处于不同的时区。</p></blockquote>\n<h1>处理时区困难重重</h1>\n<p>几个月前的一天，<a href=\"https://milkice.me/\" rel=\"noopener\">奶冰</a>在他的 Telegram 频道里发了这样的一条消息：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\"><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\" alt=\"奶冰频道的消息\" width=\"500\" class=\"aligncenter size-medium wp-image-2490\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg 800w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-244x300.jpg 244w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-768x944.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\"></a>\n<p>你想的没错，这个问题正是由时区与 UTC 偏移的不同造成的。<code>Asia/Shanghai</code> 时区在 1940 年前后和 1986 年前后曾实行过夏令时，<strong>而夏令时的切换会导致一小时的出现和消失。</strong>具体来说，启用夏令时当天会有一个小时消失，如 2021.3.28 英国启用夏令时，1:00 直接跳到 3:00，导致 <code>2021-03-28 01:30:00</code> 在 <code>Europe/London</code> 时区中是不合法的；取消夏令时当天又会有一个小时重复，如 2021.10.31 英国取消夏令时，2:00 会重新跳回 1:00 一次，导致 <code>2021-10-31 01:30:00</code> 在 <code>Europe/London</code> 时区中对应了两个时间点。而在奶冰的例子中，<code>1988-04-10 00:46:50</code> 正好处于因夏令时启用而消失的一小时中，因此系统会认为此时间字符串不合法而拒绝解析。</p>\n<blockquote><p>你可能会注意到在历史上 1988.4.10 这一天 <code>Asia/Shanghai</code> 时区实际上是去掉了 1:00-2:00 这一小时而不是 0:00-1:00。上文问题更深层次的原因是，在 IANA TZDB 2018a 及更早版本中，IANA 因缺乏历史资料而设置了错误的夏令时规则，规则设定了夏令时交界于 0:00-1:00 从而导致上文问题发生。而随后社区<a href=\"http://mm.icann.org/pipermail/tz/2018-August/026760.html\" rel=\"noopener\">发现了更准确的史实</a>，因此 IANA 更新了数据库。上文的问题在更新了系统的时区数据库后便解决了。</p></blockquote>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\" alt=\"IANA TZDB 2018a 及之前版本的错误数据\" width=\"1750\" height=\"595\" class=\"aligncenter size-full wp-image-2491\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg 1750w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-300x102.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1024x348.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-768x261.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1536x522.jpg 1536w\" sizes=\"(max-width: 1750px) 100vw, 1750px\"></a>\n<p><span>IANA TZDB 2018a 及之前版本的错误数据</span></p>\n<p>再来考虑另一种情况。你的应用的某位巴西用户在 2018 年保存了一个未来时间 <code>2022-01-15 12:00</code>（按当时的规律那应该是个夏令时时间），不巧那时候你的应用是以格式化的时间字符串形式保存的时间。之后你发现巴西已经于 2019 年 4 月宣布彻底取消夏令时制度，那么 <code>2022-01-15 12:00</code> 这个时间对应的 Unix 时间戳发生了变化，变得不再准确，要正确处理这一字符串就需要参考这一字符串生成的时间（或生成时计算的 UTC 偏移）来做不同的处理。<strong>因此，应用从一开始就应该避免使用字符串来传输、存储时间，而是使用 Unix 时间戳。</strong>如果不得不使用字符串存储时间，请尽可能：</p>\n<ul>\n<li>使用 UTC 描述时间，你永远不会知道本地时区在未来会发生什么</li>\n<li>如果需要以当地时间描述时间，一定带上当前 UTC 偏移</li>\n</ul>\n<p>时区历史带来的问题往往意想不到而且远比想象得多。实际上时区历史数据非常详细而繁多且跨设备不一致，并没有简单而统一的处理方法。在需要严谨处理时区时可能需要在应用程序中内嵌一套各端统一的时区数据库，但这样的方案放在前端又会带来不少问题：</p>\n<ul>\n<li>体积过大。moment.js 曾经设计过<a href=\"https://github.com/moment/moment-timezone/blob/develop/data/packed/2021a.json\" rel=\"noopener\">一种简洁的 TZDB 表示</a>，但尽管已经尽可能压缩整个文件仍然达到了 180+KB。在性能优先的 Web 应用中这是不可接受的</li>\n<li>需要持续更新。时区数据一直在变动，需要在时区数据更新时尽快更新应用内的时区数据，这带来了额外的维护成本</li>\n</ul>\n<p>ES6 为我们带来了 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl\" rel=\"noopener\"><code>Intl</code> 命名空间</a>。在这里，JavaScript 运行时提供了不少时间相关的国际化能力。因此，在不使用额外数据的情况下准确处理时区是可能的，但这并不完美：</p>\n<ul>\n<li>各端不统一。浏览器提供的时区数据受浏览器版本、系统版本等可能变化，最新的时区更新可能无法快速反映到所有设备上</li>\n<li>实现复杂。<code>JavaScript</code> 中 <code>Date</code> 对象的不良设计导致实现完善的时区处理并不容易，且 <code>Intl</code> 命名空间下的对象实例化性能开销较大，需要额外优化</li>\n</ul>\n<blockquote><p><code>Intl</code> 命名空间下还有很多实用的国际化相关方法，值得我们另开一篇文章来讲讲了。</p></blockquote>\n<p>在真实开发中，这需要取舍。目前主流的 JavaScript 时间处理库都已转向浏览器内置方法，并在需要时通过 Polyfill 保证跨端一致性。在这篇文章中，我们将尝试在不使用第三方库的情况下实现基本的时间国际化处理。此外，还有一些诸如需要使用 Unix 时间戳才能正确地在各端交换时间等细节需要注意。</p>\n<h1>时区转换</h1>\n<p>JavaScript 中的 <code>Date</code> 并不是不包含时区信息——实际上，<code>Date</code> 对象表示的一定是当前时区。通过尝试：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1970-01-01T00:00:00Z')\r\n// Thu Jan 01 1970 08:00:00 GMT+0800 (中国标准时间)</pre>\n<p>就可以知道，JavaScript 运行时其实知道当前时区，并会在需要的时候将其他时区的时间转换为当前时区的时间。那么，如何将本地时间转换为其他时区的时间呢？从 <code>Date</code> 的角度看，这并不行，因为我们无法设置一个 <code>Date</code> 对象的时区。但我们可以“投机取巧”：将 <code>Date</code> 对象的时间加上/减去对应的时差，尽管 <code>Date</code> 对象仍然认为自己在本地时区，但这样不就可以正确显示了嘛！但我们会碰到上文提到的问题：时区之间的时间差并不固定，在没有额外数据的情况下很难正确计算。</p>\n<p>还好，ES6 基于 <code>Intl</code> 命名空间扩展了 <code>Date.prototype.toLocaleString()</code> 方法，使其可以接受时区参数并按指定时区格式化时间。如果你在搜索引擎中搜索如何使用 JavaScript 转换时区，你大概率会在 StackOverflow 上找到类似这样的答案：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const convertTimeZone = (date, timeZone) =&gt; {\r\n    return new Date(date.toLocaleString('en-US', { timeZone }))\r\n}\r\n\r\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\r\nconvertTimeZone(now, 'Europe/London') // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<p>很好理解，我们使用 <code>en-US</code> 的区域设置要求 JavaScript 运行时以我们指定的时区格式化时间，再将时间字符串重新解析为时间对象。这里的 <code>timeZone</code> 就是诸如 <code>Asia/Shanghai</code> 等的 IANA TZDB 时区名称。这个字符串确实需要自己提供，但这就是我们唯一需要自己准备的数据了！只要提供了时区名称，浏览器就会自动计算正确的时间，无需我们自行计算。</p>\n<blockquote><p>对于时区名称，你可以考虑使用 <a href=\"https://github.com/vvo/tzdb/\" rel=\"noopener\">@vvo/tzdb</a>。这是一个声称为自动更新的 IANA TZDB 的 JSON 导出，并已被数个大型项目使用。你可以从这个包中导出所有时区名称。</p></blockquote>\n<p>这个方法看起来还不错，对吧？但实际上，它有两个问题：</p>\n<ul>\n<li>指定了区域设置和时区的 <code>toLocaleString()</code> 实际上每次调用都会在 JavaScript 运行时中创建新的 <code>Intl.DateTimeFormat</code> 对象（在后文详述），而后者会带来昂贵的性能开销（在 Node 14 中，实例化一次会在 V8 中增加内存使用约 46.3Kb。但这是符合预期的，详见 <a href=\"https://bugs.chromium.org/p/v8/issues/detail?id=6528\" rel=\"noopener\">V8 Issue</a>）。因此，在密集调用的情况下需要考虑计算并缓存时差，并在一定时间后或需要时进行更新</li>\n<li>使用 <code>toLocaleString()</code> 并使用 <code>en-US</code> 区域设置格式化的默认时间格式类似于 <code>10/13/2021, 1:00:00 AM</code>。这可以被大部分浏览器正确解析，<strong>但这是不规范的，不同浏览器有可能产生不同结果。</strong>你也可以自行配置格式（同下文的 <code>Intl.DateTimeFormat</code>），但仍然无法构造出规范的字符串</li>\n</ul>\n<p>因此，更佳的方案是，我们需要建立一个可反复使用的格式化器以避免重复创建 <code>Intl.DateTimeFormat</code> 带来的额外开销，并需要手动构造出符合规范的时间字符串，并将其重新解析为 <code>Date</code> 对象。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const timeZoneConverter = (timeZone) =&gt; {\r\n    // 新建 DateTimeFormat 对象以供对同一目标时区重用\r\n    // 由于时区属性必须在创建 DateTimeFormat 对象时指定，我们只能为同一时区重用格式化器\r\n    const formatter = new Intl.DateTimeFormat('zh-CN', {\r\n        year: 'numeric',\r\n        month: '2-digit',\r\n        day: '2-digit',\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n        second: '2-digit',\r\n        hour12: false,\r\n        timeZone\r\n    })\r\n    return {\r\n        // 提供 conver 方法以将提供的 Date 对象转换为指定时区\r\n        convert (date) {\r\n            // zh-CN 的区域设置会返回类似 1970/01/01 00:00:00 的字符串\r\n            // 替换字符即可构造出类似 1970-01-01T00:00:00 的 ISO 8601 标准格式时间字符串并被正确解析\r\n            return new Date(formatter.format(date).replace(/\\//g, '-').replace(' ', 'T').trim())\r\n        }\r\n    }\r\n}\r\n\r\nconst toLondonTime = timeZoneConverter('Europe/London') // 对于同一时区，此对象可重用\r\n\r\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\r\ntoLondonTime.convert(now) // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<blockquote><p>目前 <code>zh-CN</code> 的区域设置会产生类似 <code>1970/01/01 00:00:00</code> 的格式化字符串。这一格式目前跨端一致，但由于规范没有指定时间格式，<strong>这个格式在未来有可能变更。</strong>更好的方案是使用 <code>formatToParts()</code> 方法（在后文详述）获取时间字符串的各部分并手动拼接出标准格式的字符串，但在这个例子中直接 <code>replace</code> 拥有更好的性能。</p></blockquote>\n<p>现在，尝试反复转换时间至同一时区 1000 次，耗时从 <code>toLocaleString()</code> 1.5 秒降低到了 0.04 秒。尽管代码长了点，但这次重写在最好的情况下为我们带来了超过 20 倍的性能提升。</p>\n<p>需要注意的是，虽然这看起来就算最终方案了，但这个方案依然不完美。主要有以下两个问题：</p>\n<ul>\n<li>在需要密集转换为不同时区时，由于无法重用格式化器，性能依然较差且难以进一步优化</li>\n<li>由于 <code>Intl.DateTimeFormat</code> 不支持格式化毫秒，在格式化字符串的过程中毫秒会丢失，导致最终结果可能会与期望结果产生最高 999ms 的误差，需要额外处理。比如需要计算时差时，我们可能需要这么写：\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const calcTimeDiff = (date, converter) =&gt; {\r\n    const secDate = date - date.getMilliseconds() // 去掉毫秒，避免转换前后精度差异\r\n    return converter.convert(new Date(secDate), tzName) - secDate\r\n}\r\n\r\ncalcTimeDiff(new Date(), timeZoneConverter('Europe/London')) // -25200000</pre>\n</li>\n</ul>\n<p>无论如何，在折腾一番后我们还是把时区正确转换了。接下来准备格式化时间字符串了吗？不过在此之前，我们得先来聊聊语言、文字和区域。</p>\n<h1>语言文字区域傻傻分不清</h1>\n<blockquote><p>如何在计算机中表示中文？</p></blockquote>\n<p>“这不简单，”你可能会说，“用 <code>zh</code> 啊。”</p>\n<blockquote><p>那简体中文呢？</p></blockquote>\n<p>“<code>zh-CN</code>。”你或许会说出这个答案。</p>\n<blockquote><p>那用于新加坡的简体中文和用于中国大陆的简体中文该如何区分呢？</p></blockquote>\n<p>嗯……好问题。</p>\n<p>要能正确区分不同的简体中文，我们还得先回到定义上。实际上，“国际化”并不只是语言的翻译而已，国际化包含的是一整套对于各个<strong>区域</strong>的本地化方案。要准确表示一个国际化方案，我们实际至少需要确定三个属性：语言（Language）、文字（Script）和区域（Locale）。</p>\n<ul>\n<li>\n<strong>语言</strong>通常指的是<strong>声音语言</strong>。不同的语言都有一套自己的发音规则，很难互通。如中文和英语都属于语言</li>\n<li>\n<strong>文字</strong>对应的是某个语言的书写方式，同样的语言可能会有多种书写方案。如中文主要有简体和繁体两种书写方案</li>\n<li>\n<strong>区域</strong>指国际化面向的地区，相同的语言和文字，在不同地区也有可能会有不同的使用习惯。如新加坡和中国大陆都使用简体中文，但两地的用词习惯等有些许差异</li>\n</ul>\n<p>只有确定了这三个属性，我们才能正确定义一个国际化方案（或者说<strong>区域设置</strong>）。当然，还有很多其他属性可以更准确的表达某个区域设置，但通常有语言、文字和区域就已经足够了。</p>\n<p>于是，基于 <a href=\"https://tools.ietf.org/rfc/bcp/bcp47.txt\" rel=\"noopener\">BCP 47</a>，我们可以知道：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN = 中文普通话-简体-中国大陆\r\ncmn-Hans-SG = 中文普通话-简体-新加坡\r\ncmn-Hant-TW = 中文普通话-繁体-台湾\r\nyue-Hant-HK = 中文粤语-繁体-香港</pre>\n<p>等等，这都是啥？还有 BCP 47 又是啥？BCP 是 IETF 发布的“最佳当前实践”文档，而 BCP 47 是一些国际化相关的 ISO 和备忘录的集合，也是目前事实上由 HTML 和 ECMAScript 所使用的表达区域设置的标准。BCP 47 定义的区域设置标签实际上比较复杂，但对于大部分简单使用情况，上文示例中的格式已经完全够用了。简单来说，<strong>要表达一个区域设置，我们会使用 <code>语言[-文字][-区域]</code> 的格式，而文字和区域都是可选的。</strong>而对于每个部分的具体代码，BCP 47 也有做具体定义。其中：</p>\n<ul>\n<li>语言使用 ISO 639-1 定义的两位字母代码（如中文为 <code>zh</code>，英文为 <code>en</code>）或 <a href=\"https://iso639-3.sil.org/code_tables/639/data\" rel=\"noopener\">ISO 639-2/3</a> 定义的三位字母代码（如中文普通话为 <code>cmn</code>，英文为 <code>eng</code>），通常小写</li>\n<li>文字使用 <a href=\"https://unicode.org/iso15924/iso15924-codes.html\" rel=\"noopener\">ISO 15924</a> 定义的四位字母代码，通常首字母大写。如简体中文是 <code>Hans</code>，繁体中文是 <code>Hant</code>\n</li>\n<li>区域通常使用 <a href=\"https://www.iso.org/iso-3166-country-codes.html\" rel=\"noopener\">ISO 3166-1</a> 定义的两位字母代码，通常大写，如中国大陆为 <code>CN</code>，英国为 <code>GB</code>\n</li>\n</ul>\n<blockquote><p>ISO 639-1/2/3 的关系实际是：ISO 639-1 是最早制定的规范，使用两位字母表示语言，但语言数量之多并不能只用两位代码表示。因此后来修订了 ISO 639-2 和 3，使用三位字母表示了更多语言。通常 639-1 代码和 ISO-2/3 代码是一对多的关系。如中文 <code>zh</code> 其实是中文普通话 <code>cmn</code> 的宏语言（macrolanguage），同样使用 <code>zh</code> 为宏语言的语言还有 <code>wuu</code>（中文吴语）、<code>hak</code>（中文客家话）、<code>yue</code>（中文粤语）等数十种。<strong>从规范上我们现在应该使用 ISO 639-2/3 代码来替代 ISO 639-1 代码了</strong>，但由于历史阻力和真实需求中分类无需如此细致等原因，<strong>使用 ISO 639-1 指定语言仍然非常常见而且完全可以接受。</strong>此外，特别地，我们在 ISO 639-3 中定义未指明的语言为 <code>und</code>。</p></blockquote>\n<p>因此，对于这一节开头的两个问题，在 BCP 47 中正确答案其实是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">zh = 中文\r\ncmn = 中文普通话\r\n\r\nzh-Hans = 中文-简体\r\ncmn-Hans = 中文普通话-简体</pre>\n<p>而 <code>zh-CN</code> 实际是指在中国大陆使用的中文，当然也包含在中国大陆使用的繁体中文。<strong>不过，由于大部分情况下一个区域只会通用一种文字，很多情况下我们可以忽略文字这一项</strong>，即使用 <code>zh-CN</code>（或者 <code>cmn-CN</code>）来表示中国大陆的简体中文普通话——毕竟在大部分业务中在中国大陆使用繁体和非普通话的情况非常少。</p>\n<blockquote><p>事实上，类似 <code>zh-Hans</code> 和 <code>zh-Hant</code> 开头的区域设置名称已经被标记为 <code>redundant 废弃</code>，因此尽可能只使用 <code>zh-CN</code> 或者 <code>cmn-Hans-CN</code> 这样的区域设置名称。所有区域设置名称的列表可以在 <a href=\"https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry\" rel=\"noopener\">IANA</a> 找到。</p></blockquote>\n<p>现在我们可以准确定义一个区域设置了。不过我们还有一些小小的需求。比如我们想在 <code>cmn-Hans-CN</code> 的区域设置中使用农历来表示日期，但显然我们上文定义的表示方法并不能表达这一需求。好在，Unicode 为 BCP 47 提供了 u 扩展。在区域设置名称后面加上 <code>-u-[选项]</code> 就可以表达更细致的变体了。所以我们有：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN-u-ca-chinese = 中文普通话-简体-中国大陆-u-日历-中国农历\r\njpn-Jpan-JP-u-ca-japanese = 日语-日文汉字/平假名/片假名-日本-u-日历-日本日历\r\ncmn-Hans-CN-u-nu-hansfin = 中文普通话-简体-中国大陆-u-数字-简体大写数字</pre>\n<p>u 扩展的具体可选项可以在 <a href=\"https://www.unicode.org/reports/tr35/tr35-21.html#Unicode_locale_identifier\" rel=\"noopener\">Unicode 网站</a>上找到。而多个 u 扩展还可以连接——于是我们甚至可以写出 <code>cmn-Hans-CN-u-ca-chinese-nu-hansfin</code> 这种丧心病狂的区域设置名称。当然，相信你现在已经可以看懂这个区域设置的意思了。</p>\n<blockquote><p>不同地区可能会有不同的日历使用习惯，如中国有使用农历的需求，泰国有使用佛历的需求，我们可以通过 u 扩展指定不同的日历。不过，大部分情况下我们会使用标准的 ISO 8601 日历（gregory），JavaScript 的 <code>Date</code> 对象也只支持这种日历。</p></blockquote>\n<blockquote><p>你可以使用 <a href=\"https://r12a.github.io/app-subtags/\" rel=\"noopener\">BCP47 language subtag lookup</a> 工具快速检查你编写的 BCP 47 区域标签是否规范。</p></blockquote>\n<p>终于我们可以正确表达一个完美符合我们需求的区域设置了。接下来，让我们开始格式化时间吧。</p>\n<h1>格式化时间</h1>\n<p>这题我会！</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const formatDate(date) =&gt; {\r\n    return `${date.getFullYear()}-${`${date.getMonth() + 1}`.padStart(2, '0')}-${`${date.getDate()}`.padStart(2, '0')} ${`${date.getHours()}`.padStart(2, '0')}:${`${date.getMinutes()}`.padStart(2, '0')}:${`${date.getSeconds()}`.padStart(2, '0')}`\r\n}\r\n\r\nformatDate(new Date()) // 2021-10-13 01:00:00</pre>\n<p>就完事了……吗？先不论这样的格式化代码难以阅读，尽管上文这样的日期格式国际通用，<strong>但并非所有区域都习惯于这样的日期表示方法。</strong>比如英语国家/地区在很多时候习惯在日期中加入星期，而阿拉伯语国家/地区在部分情况下习惯使用阿拉伯语数字（而非常用的阿拉伯-印度数字）；再比如美式英语国家/地区习惯月-日-年的日期表示法，而英式英语国家/地区习惯日-月-年的日期表示法……不同区域在时间表示格式习惯上的差异是巨大的，<strong>我们很难通过一个简单的方法来正确地、国际化地格式化一个日期。</strong></p>\n<p>好在 ES6 早就为我们铺平了道路。还记得上文提到过的 <code>Intl.DateTimeFormat</code> 吗？我们通过它来实例化一个日期格式化器并用进行日期的国际化。</p>\n<p>直接来看例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const options = {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    weekday: 'long'\r\n}\r\nconst now = new Date()\r\n\r\nconst enUSFormatter = new Intl.DateTimeFormat('en-US', options)\r\n\r\nconst zhCNFormatter = new Intl.DateTimeFormat('zh-CN', options)\r\nconst zhCNAltFormatter = new Intl.DateTimeFormat('zh-CN-u-ca-chinese', options)\r\nconst zhCNAlt2Formatter = new Intl.DateTimeFormat('zh-CN-u-ca-roc-nu-hansfin', options)\r\n\r\nconst jaFormatter = new Intl.DateTimeFormat('ja', options)\r\nconst jaAltFormatter = new Intl.DateTimeFormat('ja-JP-u-ca-japanese', options)\r\n\r\nconst arEGFormatter = new Intl.DateTimeFormat('ar-EG', options)\r\n\r\nenUSFormatter.format(now) // Wednesday, Oct 13, 2021\r\n\r\nzhCNFormatter.format(now) // 2021年10月13日星期三\r\nzhCNAltFormatter.format(now) // 2021辛丑年九月8星期三\r\nzhCNAlt2Formatter.format(now) // 民国壹佰壹拾年拾月拾叁日星期三\r\n\r\njaFormatter.format(now) // 2021年10月13日水曜日\r\njaAltFormatter.format(now) // 令和3年10月13日水曜日\r\n\r\narEGFormatter.format(now) // الأربعاء، ١٣ أكتوبر ٢٠٢١</pre>\n<blockquote><p>在这里我们使用 ISO 639-1 代码来表示语言，是由于事实上 ISO 639-1 代码更加常见与通用。在大部分支持 <code>Intl.DateTimeFormat</code> 的 JavaScript 运行时中我们也可以使用 ISO 639-2/3 代码来表示语言（但实际会 fallback 至对应的 ISO 639-1 代码）。</p></blockquote>\n<blockquote><p>你也可以通过在 <code>options</code> 中设置 <code>calendar</code> 属性和 <code>numberingSystem</code> 属性来替换区域设置名称中对 u 扩展的使用。这也是推荐方式。</p></blockquote>\n<p>这非常直观，我们可以指定区域设置和格式化选项来初始化一个格式化器，并在之后使用格式化器对象的 <code>format</code> 方法来格式化一个 <code>Date</code> 对象。这里的格式化选项其实非常灵活，能格式化的不只是日期，时间也可以被灵活地格式化，有非常多的组合可以选择。我们不会在这里详细解释每一个选项，你可以访问 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\" rel=\"noopener\">MDN 文档</a>来了解更多。</p>\n<blockquote><p>如前文所述，<code>Intl.DateTimeFormat</code> 无法格式化毫秒。</p></blockquote>\n<p>不过需要注意的是，<strong>JavaScript 运行时不一定支持所有区域设置，也不一定支持所有格式化选项。</strong>在遇到不支持的情况时，<code>Intl.DateTimeFormat</code> 默认会静默 fallback 到最匹配的支持项，因此在处理不常见的区域设置或选项时，你可能需要再额外检查。你可以通过 <code>Intl.DateTimeFormat.supportedLocalesOf()</code> 静态方法判断当前运行时是否支持指定的区域设置，也可以在实例化格式化器后在对象上调用 <code>resolvedOptions()</code> 方法来检查运行时的解析结果是否与预期一致。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('yue-Hant-CN').resolvedOptions()\r\n// {locale: 'zh-CN', calendar: 'gregory', …}\r\n// fallback 至 zh-CN，与 yue-CN 的预期不一致</pre>\n<p>此外，正如你所看到的，各种语言在日期格式化中使用的文本 JavaScript 运行时都已经帮我们内置了。因此，我们甚至可以利用这些国际化特性来为我们的应用减少一点需要翻译的字符串——打包进应用的翻译越少，应用体积也就越小了嘛——比如说获取一周七天对应的名字：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getWeekdayNames = (locale) =&gt; {\r\n     // 基于一个固定日期计算，这里选择 1970.1.1\r\n     // 不能使用 0，因为 Unix 时间戳 0 在不同时区的日期不一样\r\n    const base = new Date(1970, 0, 1).getTime()\r\n    const formatter = new Intl.DateTimeFormat(locale, { weekday: 'short' })\r\n    return Array.from({ length: 7 }, (_, day) =&gt; (\r\n        formatter.format(new Date(base + 3600000 * 24 * (-4 + day))) // 1970.1.1 是周四\r\n    ))\r\n}\r\n\r\ngetWeekdayNames('en-US') // ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\r\ngetWeekdayNames('zh-CN') // ['周日', '周一', '周二', '周三', '周四', '周五', '周六']\r\ngetWeekdayNames('ja') // ['日', '月', '火', '水', '木', '金', '土']\r\ngetWeekdayNames('ar-EG') // ['الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت']</pre>\n<p>当然，如果你还是不喜欢运行时为你提供的格式，我们还有上文提到过的 <code>formatToParts()</code> 方法可以用。来看一个简单的例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('zh-CN', {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    weekday: 'long',\r\n    hour: 'numeric',\r\n    minute: 'numeric',\r\n    second: 'numeric',\r\n}).formatToParts(new Date())\r\n// [\r\n//     { type: 'year', value: '2021' },\r\n//     { type: 'literal', value: '年' },\r\n//     { type: 'month', value: '10' },\r\n//     { type: 'literal', value: '月' },\r\n//     { type: 'day', value: '13' },\r\n//     { type: 'literal', value: '日' },\r\n//     { type: 'weekday', value: '星期三' },\r\n//     { type: 'literal', value: ' ' },\r\n//     { type: 'dayPeriod', value: '上午' },\r\n//     { type: 'hour', value: '1' },\r\n//     { type: 'literal', value: ':' },\r\n//     { type: 'minute', value: '00' },\r\n//     { type: 'literal', value: ':' },\r\n//     { type: 'second', value: '00' }\r\n// ]</pre>\n<p>随后，你就可以自己解析这个数组来构造出你想要的时间格式了。最后，我们还可以使用 <code>Intl.RelativeTimeFormat</code> 来格式化相对日期。当然我们不会在这里详细讲解这个 API，你可以参考 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat\" rel=\"noopener\">MDN 文档</a>。直接来看一个简单例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getRelativeTime = (num, unit, locale) =&gt; {\r\n    return new Intl.RelativeTimeFormat(locale, { numeric: 'auto' }).format(num, unit)\r\n}\r\n\r\ngetRelativeTime(-3, 'day', 'en-US') // 3 days ago\r\ngetRelativeTime(-1, 'day', 'zh-CN') // 昨天\r\ngetRelativeTime(0, 'second', 'zh-CN') // 现在\r\ngetRelativeTime(3, 'hour', 'ja') // 3 時間後</pre>\n<blockquote><p><code>Intl.RelativeTimeFormat</code> 是一个相对较晚进入标准的对象，因此浏览器支持程度较差，可能需要使用 <a href=\"https://formatjs.io/docs/polyfills/intl-relativetimeformat\" rel=\"noopener\">Polyfill</a>。不过目前（2021.10）主流浏览器的最新版本均已支持此 API。</p></blockquote>\n<h1>未来</h1>\n<p>我希望这篇文章时区转换的部分可以很快过时——这并非无稽之谈，目前（2021.10）TC39 的 <a href=\"https://github.com/tc39/proposal-temporal\" rel=\"noopener\"><code>Temporal</code> 提案</a>已经进入 Stage 3 了。<strong><code>Temporal</code> 提案定义了一个新的、时区友好的 <code>Temporal</code> 命名空间，并期望在不久后就能进入标准并最终应用于生产环境。</strong><code>Temporal</code> 定义了完整的时区、时间段、日历规则的处理，且拥有简单明了的 API。那时候，JavaScript 的时区处理就不会再如此痛苦了。由于目前 <code>Temporal</code> 提案还未进入标准，API 暂未稳定，我们无法将其用于生产环境，但我们可以来看一个简单的例子感受一下这个 API 的强大。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const zonedDateTime = Temporal.ZonedDateTime.from({\r\n  timeZone: 'America/Los_Angeles',\r\n  year: 1995,\r\n  month: 12,\r\n  day: 7,\r\n  hour: 3,\r\n  minute: 24,\r\n  second: 30,\r\n  millisecond: 0,\r\n  microsecond: 3,\r\n  nanosecond: 500,\r\n  calendar: 'iso8601'\r\n}) // 1995-12-07T03:24:30.0000035-08:00[America/Los_Angeles]</pre>\n<p>如果你希望立刻开始使用 <code>Temporal</code>，现在已有 Polyfill 可用。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"js-temporal\" data-mdxgithubp=\"temporal-polyfill\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/js-temporal/temporal-polyfill\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>不过，时区问题不会消失，各地区的习惯也很难融合到一起。时间的国际化处理是<a href=\"https://yourcalendricalfallacyis.com/\" rel=\"noopener\">极其复杂</a>的，前端中的时间国际化仍然值得我们认真关注。</p>\n","link":"https://flyhigher.top/develop/2482.html"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 12:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 4分8秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量...</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板...）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/209138/1/18651/50218/622032acEf83a8d68/fc6db86aebb679ff.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。macOS 系统代理的行为和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：...</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/207910/19/18573/59096/622032b0E05c1d4be/5d89d557f7889730.jpg\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。M1 芯片的性能如何？本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？...</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/138186/40/23101/50775/622032b3Efa9053d7/df3a819d044a9455.jpg\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote>\n<p>题图来自 USTC Hackergame 2019「Happy LUG」</p>\n</blockquote>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/90743/25/22680/55545/622032abE6ef31d51/cfc4cb389c994c17.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote>\n<p>周六不放假休息，还在这加班搞 CTF？</p>\n</blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/86535/11/24318/75037/622032a8E4f94d4ae/89703ccc122cf4e0.jpg\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"\n<p>WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将其表述为 \"An API for accessing Public Key Credentials\"，即“一个用于访问公钥凭证的 API”。WebAuthn 很强大，强大到被认为是 Web 身份认证的未来（当然，也很复杂）。你有想过通过指纹或者面部识别来登录网站吗？WebAuthn 就能在保证安全和隐私的情况下让这样的想法成为现实。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\" alt=\"通过 WebAuthn 调起 Windows Hello 登录网站\" width=\"1912\" height=\"966\" class=\"aligncenter size-full wp-image-2215\"></a>\n<p>你可以在<a href=\"https://webauthn.io/\" rel=\"noopener\">这个网站</a>自行体验 WebAuthn。或者，如果你有一个使用 WordPress 的站点，可以尝试一下 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WP-WebAuthn</a> 这款插件，它可以为你的站点启用 WebAuthn 登录。这是我为了写这篇文章而练手开发的插件，本文中的部分示例代码也来自这款插件。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"wp-webauthn\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/wp-webauthn\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>WebAuthn Level 1 标准已在 2019 年 3 月成为 W3C 推荐标准，而 Level 2 标准目前也已进入编辑草案阶段，但互联网上有关它的中文资料却仍然很少，国内也鲜有网站支持这一新标准。于是，在抱着各种英文资料和标准啃了几天以后，我折腾出了这篇文章。</p>\n<p>在这篇文章里，我将会从最基本的概念开始，逐渐深入 WebAuthn，直到解码公钥等深层细节。这可能是你能找到的有关 WebAuthn 最详细最基础的中文文章，也很可能是最长的。在开始之前，<strong>我强烈建议你打开菜单中的文章目录浏览一遍，以对这篇文章涉及的内容有所了解。</strong>如果你只是想了解如何简单地在你的项目中添加对 WebAuthn 的支持，那么“<a href=\"https://flyhigher.top/#webauthn-overview\">浅谈 WebAuthn</a>”部分就是你要找的；如果你想了解更多关于 WebAuthn 的底层细节，那么你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分。</p>\n<p>由于在本文写作时 WebAuthn Level 2 规范尚未定稿，<strong>这篇文章我们将只专注于 Level 1 规范。</strong></p>\n<p>这篇文章最后更新于 2020.9 ，在你读到这篇文章时，部分事实可能已经发生改变，请注意判断。</p>\n<p><strong>更新日志：</strong></p>\n<ul>\n<li>2021.1.16 添加 Chrome 开发工具信息</li>\n<li>2020.9.17 更新 iOS/iPad OS 兼容性信息</li>\n<li>2020.5.20 添加部分无用户名认证的平台兼容性内容</li>\n<li>2020.5.15 添加部分 <code>extensions</code> 相关内容与链接；添加全局凭证 ID 唯一内容；添加凭证 ID 查找相关内容；添加“从 U2F 认证迁移”一节</li>\n<li>2020.4.13 更新与修正 <code>userVerification</code> 相关内容；添加部分 Firefox 相关内容</li>\n<li>2020.3.23 文章发布</li>\n</ul>\n<p>那么让我们开始吧。<span></span></p>\n<h1>浅谈 WebAuthn</h1>\n<p>在这个部分里，我们将会从基础概念开始，了解有关 WebAuthn 和密码学的一些基础知识，并最终使用第三方库实现基础的 WebAuthn 认证。如果你已经对这些内容有所了解了，可以跳到“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”继续阅读。</p>\n<h2>为什么使用 WebAuthn</h2>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\" alt=\"钓鱼邮件\" width=\"709\" height=\"693\" class=\"aligncenter size-full wp-image-2162\"></a>\n<p>相信你一定收到过类似的邮件吧？只要你点进那个最显眼的链接，你就会进入一个设置好的圈套——钓鱼网站。如果你一时糊涂在这类网站上填写了你的账号和密码，bingo，你的账号就不再是你的账号了。</p>\n<p>不过，就算你警惕心再强，也无法避免密码泄露事件。Twitter, Facebook 等都爆出过明文密码泄露事件，证明再大的公司或组织也无法避免密码泄露问题。雪上加霜的是，很大一部分用户都非常喜欢使用重复密码，这就导致一次密码泄露会牵连很多网站，用户的账户安全性完全无法得到保证。</p>\n<p>那么，有什么办法解决这些问题吗？<strong>彻底解决的方法只有一个，那就是抛弃密码。</strong>可是没有密码还怎么验证用户身份呢？这就是 WebAuthn 的用武之地了。</p>\n<p><del>没有密码的好时代，来临力！</del></p>\n<h2>什么是 WebAuthn</h2>\n<p>那么到底什么是 WebAuthn 呢？如开头所说，WebAuthn 是“一个用于访问公钥凭证的 API”，网站可以通过这个 API 进行一些高安全性的身份验证。WebAuthn 一个最常见的应用就是用于网站登录时的 2FA（双重因素验证）甚至是无密码登录。通过网页调用 WebAuthn，在不同平台下，<strong>我们可以实现通过 USB Key、指纹、面部甚至虹膜扫描来认证身份，同时确保安全和隐私。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\" alt=\"WebAuthn 可使用的各种身份认证方式\" width=\"1294\" height=\"566\" class=\"aligncenter size-full wp-image-2213\"></a>\n<p>WebAuthn 标准是 FIDO2 标准的一部分，而 FIDO2 则是由 FIDO 联盟和 W3C 共同推出的 U2F（现称作 FIDO1）的后继标准，旨在增强网络认证的安全性。</p>\n<blockquote><p>你可能了解过 U2F，那么 U2F 和 FIDO2 的区别在哪里呢？从名字上可以看出，U2F，即“通用第二因素协议”，是专注于作为密码后的第二道屏障的，而 FIDO2 增加了单因素认证功能，这意味着使用 FIDO2 可以完全替代密码，真正实现无密码登录。</p></blockquote>\n<p>FIDO2 标准主要包括四个部分，其一是用于网站和访客设备交互的 WebAuthn，而 Client to Authenticator Protocol 2（CTAP2，客户端-认证器协议）作为 WebAuthn 的补充，则是用于访客的设备和认证器交互的协议。标准的其他两个部分则是 U2F 和 UAF 规范。在这篇文章中，我们只关心 WebAuthn，不会涉及 CTAP, U2F 和 UAF 的相关知识。如果你对这段话中的一些概念不了解，不要紧张，接下来我们就来谈谈 WebAuthn 中一些常用的术语和概念。</p>\n<blockquote><p>WebAuthn 只能在安全上下文中使用，也就是说，页面需要使用 HTTPS 协议或是处于 <code>localhost</code> 中。</p></blockquote>\n<h2>常用术语和概念</h2>\n<p>WebAuthn 中有许多不常碰到的术语，不过我只会在这里介绍一些常用的术语和概念——如果你只是希望做出一个简单的实现，那么了解这一段中的一些概念就足够了。同时，由于我实在没能找到一部分术语的通用翻译，有一些术语我按着自己的理解尽可能地翻译了，有任何问题请告诉我。</p>\n<p>在一个完整的 WebAuthn 认证流程中，通常有这么几个角色：</p>\n<ul>\n<li>Relying Party 依赖方 (RP) ：指服务提供方，即网站</li>\n<li>User 用户：正准备登录的你</li>\n<li>Authenticator 认证器：通常指 USB Key 或是设备内置的指纹扫描器、虹膜扫描器、面部识别装置等，正是它们在使用流程中代替了密码甚至是用户名</li>\n<li>User Agent 用户代理：通常指浏览器或系统，负责与认证器交互</li>\n</ul>\n<p>认证过程通常分为两种：</p>\n<ul>\n<li>Registration Ceremony 注册仪式：用户向账户上添加认证器</li>\n<li>Authentication Ceremony 验证仪式：用户通过已注册的认证器验证身份</li>\n</ul>\n<p>同时，认证过程中还会产生这些内容：</p>\n<ul>\n<li>Challenge 挑战：通常是一串随机字符串</li>\n<li>Public Key Credential 公钥凭证：由认证器产生的凭证，在技术上代替了密码</li>\n<li>Attestation 证明：注册时认证器产生的验证数据</li>\n<li>Assertion 断言：验证时认证器产生的验证数据</li>\n</ul>\n<blockquote><p><strong>请注意区分证明 (Attestation) 和断言 (Assertion)</strong>，特别是在这两个单词有些相似的情况下。在 WebAuthn 中，它们是不同过程中的类似概念，但并不相同。</p></blockquote>\n<p>如果你对于这些内容不是很理解，没有关系，我们会在“<a href=\"https://flyhigher.top/#how-to-webauthn\">使用流程</a>”一节中将这些概念放到实际情况中解释，你只要先区分这些概念即可。</p>\n<h2>安全性的基础</h2>\n<p>WebAuthn 为什么安全？和 HTTPS 一样，WebAuthn 使用非对称加密的思路来保证安全性，但侧重点又有所不同。要理解 WebAuthn 的认证流程，我们必须对非对称加密有所了解。如果你对非对称加密比较熟悉了，就直接跳到下一段吧。</p>\n<p>WebAuthn 的核心在于“认证”，即保证产生了凭证的认证器是用户的认证器，而不是第三方在伪造凭证。但为什么要使用非对称加密呢？我们可以先来看看对称加密。</p>\n<p>让我们假设小明和小红相互写信，见不到对方。这天小红突然想，给自己写信的人是不是真的小明呢？于是小红要求对方向小红证明自己是小明。怎么证明呢？他们商量出来这么一套方案：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明和小红商量一个统一的密码和密钥</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明用提前和小红商量好的密码和密钥加密文本后发回给小红</li>\n<li>小红使用相同的密码和密钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和密钥</li>\n</ol>\n<blockquote><p>在密码学中，我们通常把“加密算法”称为密码 (code)，和通常登录时用的密码 (password) 并非同一个概念。</p></blockquote>\n<p>在这种情况下，<strong>只要密钥不泄露</strong>，即拥有正确密钥的只有小明和小红，那么小红就能确定对方一定是小明。但这样的问题也很明显，如果小明和小红不能见面，那么他们就必须先以明文交换密码——<strong>在这个过程中一旦有人窃取到了密码，这个认证就无效了。</strong></p>\n<p>这时我们就需要使用<strong>非对称加密</strong>来拯救破碎的信任了。非对称加密的基础是一对密钥，也就是公钥和私钥，它们是互相关联但（几乎）无法互相推导的。在非对称加密的过程中，选择相同的密码后，使用私钥加密明文得到的密文只能由对应的公钥解密，无法使用私钥解密，同时这个过程反过来也是成立的。</p>\n<blockquote><p>本文的核心并不是非对称加密算法，因此不会详述非对称加密在数学上的证明，若有兴趣可以自行了解。</p></blockquote>\n<p>这就完美解决密钥泄露的问题了。让我们回过头来看之前的例子。现在小明和小红决定使用非对称加密来证明身份，过程如下：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明提前生成一对公私钥，将公钥发送给小红，私钥自己保管，同时商量好统一的密码</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明使用商量好的密码和自己的私钥加密文本，发送给小红</li>\n<li>小红使用相同的密码和小明的公钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和私钥</li>\n</ol>\n<p>在这种情况下，<strong>只要私钥不泄露</strong>，那么小红解密得到的文本和之前发送的一致，那么就可以证明收到的密文一定是由小明加密后发送过来的。而在整个过程中，私钥都没有离开过小明，更没有经过传输，也就几乎没有泄露的可能了。这时，小红终于可以确定对面和她通信的人的确是小明了。</p>\n<p>题外话：HTTPS 虽然也应用了非对称加密，但 HTTPS 更侧重于“加密”而非“认证”，因此思路上会有些许差异。要了解关于 HTTPS 和非对称加密的更多信息，你可以阅读我之前写的这篇文章：</p>\n<p></p>\n<div class=\"mdx-post-cot\" data-mdxposturl=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdx-post-wait-out-c2\"><div class=\"mdx-post-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<span></span>\n<h2>使用流程</h2>\n<p>了解了非对称加密，我们就可以来看看 WebAuthn 的认证流程了。</p>\n<p>和普通的密码一样，<strong>使用 WebAuthn 分为两个部分，注册和验证。</strong>注册仪式会在依赖方中将认证器的一些信息和用户建立关联；而验证仪式则是验证这些信息以登确保是用户本人在登录。根据上一节的思路，我们可以知道，注册仪式就是认证器生成一对公私钥，然后将公钥交给依赖方；而验证仪式是依赖方发送给认证器一段文本，要求认证器用自己的私钥加密后发回以验证。</p>\n<p>在实际情况中，WebAuthn 是基于<strong>挑战-应答模型</strong>工作的。要更好地理解，我们直接来看具体流程。先来看看注册的流程。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\" alt=\"WebAuthn 注册流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2224\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的注册请求</li>\n<li>依赖方向浏览器发送挑战、依赖方信息和用户信息</li>\n<li>浏览器向认证器发送挑战、依赖方信息、用户信息和客户端信息以请求创建公钥凭证</li>\n<li>认证器请求用户动作，随后创建一对公私钥，并使用私钥签名挑战（即证明），和公钥一起交给浏览器</li>\n<li>浏览器将签名后的挑战和公钥发送给依赖方</li>\n<li>依赖方用公钥验证挑战是否与发送的一致，如果成功则将公钥与用户绑定，注册完成</li>\n</ol>\n<p>我也做了一个交互式的 Demo，你可以对照流程来更好地理解。</p>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\">开始注册</button> <span></span></p>\n<div></div>\n<blockquote><p>注意，这个 Demo 和下方的 Demo 都只是一个本地模拟的简单示例，没有任何数据会被上传，当然也不会对数据进行验证。</p></blockquote>\n<p>而之后的验证流程如下：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\" alt=\"WebAuthn 验证流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2226\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的验证请求</li>\n<li>依赖方向浏览器发送挑战</li>\n<li>浏览器向认证器发送挑战、依赖方信息和客户端信息以请求获取公钥凭证</li>\n<li>认证器请求用户动作，随后通过依赖方信息找到对应私钥，并使用私钥签名挑战（即断言），交给浏览器</li>\n<li>浏览器将签名后的挑战发送给依赖方</li>\n<li>依赖方用之前存储的公钥验证挑战是否与发送的一致，一致则验证成功</li>\n</ol>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\" disabled>开始验证</button> <span>在上方注册后才能验证</span></p>\n<div></div>\n<p>可以看到，WebAuthn 不仅在理论上是安全的，同时<strong>在整个过程中并没有隐私数据被传输</strong>——用户信息实际上只包含用户名和用户 ID。因此我们完全可以说 WebAuthn 是安全且私密的。</p>\n<blockquote><p>为了避免用户在不同依赖方之间被追踪，认证器通常会为每个依赖方和用户的组合都创建一对公私钥。不过，由于认证器的存储空间有限，认证器通常不会存储每一个私钥，而是会通过各类信息和烧录在认证器内的主密钥“算”出对应的私钥以实现无限对公私钥。具体算法根据不同厂商会有所不同。对于 Yubikey，你可以在<a href=\"https://developers.yubico.com/U2F/Protocol_details/Key_generation.html\">这里</a>了解更多。</p></blockquote>\n<blockquote><p>如果依赖方需要，用户同意后，发送给依赖方的公钥凭证中可以包含用于辨认认证器型号的信息，不过这对隐私的影响微乎其微。</p></blockquote>\n<h2>浏览器接口</h2>\n<p>要使用 WebAuthn，我们必须要依靠浏览器作为媒介和验证器进行交互，而这就需要浏览器对于 WebAuthn 的支持了。绝大多数新版本的现代浏览器都为 WebAuthn 提供了统一的接口，而在这一段中我们会了解如何使用相关的接口。但是在开始之前，我们可以先来看看浏览器的支持程度（2020.9）。</p>\n<div class=\"mdui-table-fluid\"><table class=\"mdui-table\">\n<thead><tr>\n<th>浏览器</th>\n<th>支持情况</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>桌面端 Chrome</td>\n<td>67+</td>\n</tr>\n<tr>\n<td>移动端 Chrome</td>\n<td>67+<sup>[1]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Firefox</td>\n<td>60+</td>\n</tr>\n<tr>\n<td>移动端 Firefox</td>\n<td>不支持<sup>[2]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Edge</td>\n<td>18+</td>\n</tr>\n<tr>\n<td>移动端 Edge</td>\n<td>不支持<sup>[3]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Safari</td>\n<td>13+</td>\n</tr>\n<tr>\n<td>移动端 Safari</td>\n<td>13.3+<sup>[4]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Opera</td>\n<td>54+</td>\n</tr>\n<tr>\n<td>移动端 Opera</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table></div>\n<p><sup>[1]</sup> 受平台限制，Chrome 在 iOS 平台上不支持 WebAuthn，在 Android 平台上支持大部分 WebAuthn 功能，但仍不支持部分特性（如 <code>userVerification</code>）。<br><sup>[2]</sup> 移动端 Firefox 80 以下的版本支持 WebAuthn 但似乎会忽略 <code>authenticatorAttachment</code> 等一部分参数，同时移动端 Firefox Beta 80 以下的版本支持 WebAuthn 但无法成功调用。自 80 版本起移动端 Firefox 暂时取消了对 WebAuthn 的支持（可能是 Bug）。<br><sup>[3]</sup> 移动端 Edge 似乎支持 WebAuthn 但无法成功调用。<br><sup>[4]</sup> Safari iOS/iPad OS 13 仅支持外部认证器，无法调用 Touch ID 或 Face ID；自 iOS/iPad OS 14 起 Safari 已支持全功能 WebAuthn，可以调用 Touch ID/Face ID</p>\n<p>当然，一众国产浏览器，包括 Samsung Browser 和 Yandex Browser，目前都不支持 WebAuthn。此外，由于 WebAuthn 涉及外部验证器和 TPM 可信平台模块等，用户的操作系统也会对 WebAuthn 的可用性造成影响。以下是一些需要注意的信息：</p>\n<ul>\n<li>Windows 10 1903 以下版本仅 Edge 能提供完整支持，其他浏览器只能使用 USB Key 等外部认证器；1903+ 中所有浏览器都可以通过 Windows Hello 带来完整的 WebAuthn 支持</li>\n<li>Android 需要安装并开启 Google 服务</li>\n<li>iOS/iPad OS 13.3 以下的版本不支持 WebAuthn，iOS/iPad OS 14 以下的版本支持有限（参考上文），iOS/iPad OS 14 开始 Safari 已支持全功能 WebAuthn（功能完整度甚至超过了 Android）</li>\n</ul>\n<p>可以看出，WebAuthn 的发展之路仍然很漫长，但好在桌面端对它的支持已经比较完善了，在一些情况下我们完全有理由使用它。</p>\n<hr>\n<p>来看看浏览器提供了怎么样的接口吧。要使用 WebAuthn，我们可以使用 <code>navigator.credentials.create()</code> 请求认证器生成公钥凭证和 <code>navigator.credentials.get()</code> 请求获取公钥凭证。</p>\n<blockquote><p>你或许已经对 Credential Management API 有所了解了。通过这些 API，我们还可以实现一些有趣的特性，不过这值得另开一篇文章来讲了。</p></blockquote>\n<p>对于一个基础的实现，<code>navigator.credentials.create()</code> 需要传入的参数如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        challenge,\r\n        rp: {\r\n            id,\r\n            name\r\n        },\r\n        user: {\r\n            id,\r\n            name,\r\n            displayName\r\n        },\r\n        pubKeyCredParams: [\r\n            {\r\n                type: \"public-key\",\r\n                alg\r\n            }\r\n        ],\r\n        authenticatorSelection: {\r\n            authenticatorAttachment,\r\n            userVerification\r\n        },\r\n        excludeCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>在 <code>navigator.credentials.create()</code> 方法中，我们必须传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值。这指明了我们需要创建公钥凭证，而非普通的密码凭证。然后，在 <code>publicKey</code> 对象中设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rp: Object</code>：依赖方信息，其中有一项为必须：\n<ul>\n<li>\n<code>rp.id: String</code>：（可选）依赖方 ID，必须为当前域名或为当前域名的子集的域名（不是子域名）。如域名为 <code>test.123.example.com</code>，则依赖方 ID 可以是 <code>test.123.example.com</code>, <code>123.example.com</code> 或 <code>example.com</code>。不指定则默认使用当前域名</li>\n<li>\n<code>rp.name: String</code>：依赖方名称，用于方便用户辨认</li>\n</ul>\n</li>\n<li>\n<code>user: Object</code>：用户信息，其中有三项为必须：\n<ul>\n<li>\n<code>user.id: Uint8Array</code>：转换为 <code>Uint8Array</code> 的字符串。<strong>出于安全考量，这应尽可能不与任何用户信息相关联，如不要包含用户名、用户邮箱等</strong>\n</li>\n<li>\n<code>user.name: String</code>：登录用户名</li>\n<li>\n<code>user.dispalyName: String</code>：用于显示的用户名称，显示与否的具体行为取决于浏览器</li>\n</ul>\n</li>\n<li>\n<code>pubKeyCredParams: Array</code>：一个算法列表，指明依赖方接受哪些签名算法。列表的每一项都是一个对象，拥有两个属性：\n<ul>\n<li>\n<code>pubKeyCredParams[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>pubKeyCredParams[].alg: Number</code>：一个负整数，用于标明算法。具体算法对应的数字可以在 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\">COSE</a> 找到</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection: Object</code>：（可选）用于过滤正确的认证器，这里介绍常用的一个参数：\n<ul>\n<li>\n<code>authenticatorSelection.authenticatorAttachment: String</code>：（可选）指定要求的认证器类型。如果没有满足要求的认证器，认证可能会失败。该参数可以为 <code>null</code>（表示接受所有类型的认证器）或是以下两个值之一：\n<ul>\n<li>\n<code>platform</code>：表示仅接受平台内置的、无法移除的认证器，如手机的指纹识别设备</li>\n<li>\n<code>cross-platform</code>：表示仅接受外部认证器，如 USB Key</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection.userVerification: String</code>：（可选）指定认证器是否需要验证“用户为本人 (User Verified, UV)”，否则只须“用户在场 (User Present, UP)”。具体验证过程取决于认证器（不同认证器的认证方法不同，也有认证器不支持用户验证），而对验证结果的处理情况则取决于依赖方。该参数可以为以下三个值之一：\n<ul>\n<li>\n<code>required</code>：依赖方要求用户验证</li>\n<li>\n<code>preferred</code>：（默认）依赖方希望有用户验证，但也接受用户在场的结果</li>\n<li>\n<code>discouraged</code>：依赖方不关心用户验证。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>excludeCredentials: Array</code>：（可选）用于标识要排除的凭证，可以避免同一个用户多次注册同一个认证器。如果用户试图注册相同的认证器，用户代理会抛出 <code>InvalidStateError</code> 错误。数组中的每一项都是一个公钥凭证对象，包含以下属性：\n<ul>\n<li>\n<code>excludeCredentials[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>excludeCredentials[].id: Uint8Array</code>：要排除的凭证 ID</li>\n<li>\n<code>excludeCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，超时后将强制终止 <code>create()</code> 并抛出错误。若不设置，将使用用户代理的默认值；若太大或太小，则使用最接近的用户代理默认值范围中的值。推荐值为 5000-120000</li>\n</ul>\n<blockquote><p>对于 <code>pubKeyCredParams</code>，通常我们只需添加 ES256 (alg: -7) 算法即可兼容大部分外部认证器，此外，再添加 RS256 (alg: -257) 算法即可兼容大部分平台内置认证器（如 Windows Hello）。当然，前端添加算法之后，后端也需要相应的算法支持。</p></blockquote>\n<blockquote><p>对于 <code>userVerification</code>，由于默认值 \"preferred\" 并不能很好地被所有设备支持，因此无论在 <code>create()</code> 中还是 <code>get()</code> 中不指定该参数都会在 Chrome 中触发一条警告。具体请参阅<a href=\"https://chromium.googlesource.com/chromium/src/+/master/content/browser/webauth/uv_preferred.md\">这个页面</a>。</p></blockquote>\n<p>调用 <code>create()</code> 之后，我们就可以拿到一个 <code>Promise</code>，并可以在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>create()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAttestationResponse {\r\n        attestationObject: ArrayBuffer(390) {},\r\n        clientDataJSON: ArrayBuffer(121) {}\r\n    },\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\",\r\n    type: \"public-key\"\r\n}</pre>\n<p>其中有：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 \"public-key\"</li>\n<li>\n<code>response: Object</code>：<code>AuthenticatorAttestationResponse</code> 对象，是 <code>PublicKeyCredential</code> 的主要部分，包含以下两个内容：\n<ul>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n<li>\n<code>response.attestationObject: ArrayBuffer</code>：CBOR 编码的认证器数据，包含凭证公钥、凭证 ID、签名（如果有）、签名计数等信息</li>\n</ul>\n</li>\n</ul>\n<p>然后将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串，我们就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证与注册了。具体怎么操作，我们会在下文详细讨论。当然，别忘了 <code>catch()</code> 注册过程中抛出的任何错误。</p>\n<blockquote><p>你可能会认为在所有情况下，注册时认证器都会对挑战进行签名。实际上在大部分情况下（同时也是默认情况），<strong>注册时认证器并不会对挑战进行签名</strong>，<code>attestationObject</code> 并不会包含签名后的挑战。只有依赖方明确要求证明且用户同意（部分浏览器要求）后认证器才会对挑战进行签名（具体实现据情况会有所不同）。对此，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion#Attestation\">MDN 解释道</a>“大部分情况下，用户注册公钥时我们会使用「初次使用时信任模型」(TOFU) ，此时验证公钥是没有必要的。”要了解更多关于证明的内容，请参阅“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>而对于 <code>navigator.credentials.get()</code>，我们可以传入如下的参数：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.get({\r\n    publicKey: {\r\n        challenge,\r\n        rpId,\r\n        userVerification,\r\n        allowCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>和 <code>create()</code> 一样，对于 <code>get()</code> 我们需要传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值，指明我们需要获取的是公钥凭证而非普通的密码凭证。在 <code>publicKey</code> 对象中我们可以设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rpID: String</code>：（可选）依赖方 ID，需要和注册认证器时的一致。规则和上述的 <code>rp.id</code> 一致，不指定默认使用当前域名</li>\n<li>\n<code>userVerification: String</code>：和上文一样，只是需要注意它这次不在 <code>authenticatorSelection</code> 中了</li>\n<li>\n<code>allowCredentials: Array</code>：（可选）用于标识允许的凭证 ID，使用户代理找到正确的认证器。只有符合这个列表中凭证 ID 的凭证才能被成功返回。数组中的每一项都是对象，包含以下属性：\n<ul>\n<li>\n<code>allowCredentials[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>allowCredentials[].id: Uint8Array</code>：允许的凭证 ID</li>\n<li>\n<code>allowCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，和上面的一样，推荐值为 5000-120000</li>\n</ul>\n<p>嗯，要传入的参数少多了。之后，和 <code>create()</code> 一样，调用 <code>get()</code> 之后，我们就可以拿到一个 <code>Promise</code> 并在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>get()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAssertionResponse {\r\n        authenticatorData: ArrayBuffer(37) {},\r\n        signature: ArrayBuffer(256) {},\r\n        userHandle: ArrayBuffer(64) {},\r\n        clientDataJSON: ArrayBuffer(118) {}\r\n    }\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\"\r\n    type: \"public-key\"\r\n}</pre>\n<p>这里的东西就比 <code>create()</code> 时拿到的要多了。看看我们拿到了什么吧：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 \"public-key\"</li>\n<li>\n<code>response: Object</code>：对于验证流程，认证会返回 <code>AuthenticatorAssertionResponse</code> 而不是 <code>AuthenticatorAttestationResponse</code> 对象，这个对象包含以下 4 个属性：\n<ul>\n<li>\n<code>response.authenticatorData: ArrayBuffer</code>：认证器信息，包含认证状态、签名计数等</li>\n<li>\n<code>response.signature: ArrayBuffer</code>：被认证器签名的 <code>authenticatorData</code> + <code>clientDataHash</code>（<code>clientDataJSON</code> 的 SHA-256 hash）</li>\n<li>\n<code>response.userHandle: ArrayBuffer</code>：<code>create()</code> 创建凭证时的用户 ID <code>user.id</code>。许多 U2F 设备不支持这一特性，这一项将会是 <code>null</code>\n</li>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n</ul>\n</li>\n</ul>\n<p>同样地，我们将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串后就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证了。至于具体怎么做，别急，马上就来讲一讲。</p>\n<h2>简单实现</h2>\n<p>了这么多，我们终于可以实现一个简单的 WebAuthn 认证页面了。由于在实际操作中 WebAuthn 相关的数据解码和密码计算比较复杂，在服务器端我们可以使用第三方库来帮我们做这些脏活累活，我们只需专注于具体流程就可以了。</p>\n<p>要寻找可用的第三方库，你可以在 <a href=\"https://webauthn.io/\">webauthn.io</a> 上找到适用于各种语言的第三方库——除了 PHP（笑）。不过好在你可以在 GitHub 上找到几个不错的 PHP WebAuthn 库，比如 <a href=\"https://github.com/web-auth/webauthn-framework\">web-auth/webauthn-framework</a>。</p>\n<p>在我们的这个例子中，我们关心的主要是前端逻辑；而后端我们可以使用各类几乎已经做到开箱即用的第三方库，这样我们可以专注于流程而不必关心细节。当然如果你想了解后端的解码细节，可以阅读“<a href=\"https://flyhigher.top/#webauthn-decode\">手动解个码</a>”一节。</p>\n<hr>\n<p>让我们先从注册开始吧。现在，用户点击了注册认证器的按钮，一个请求被发送给服务器（也就是依赖方）。在最简单的情况中，依赖方需要将三个内容发送给浏览器：<strong>挑战、用户信息和用户已注册的凭证 ID 列表（即 <code>excludeCredentials</code>）</strong>。当然依赖方也可以自由选择发送更多信息，只要最终前端能构建合法的参数即可。</p>\n<p>挑战最终会被转换为 <code>Uint8Array</code>，即一组 0-255 的整数。如果使用 PHP，在后端我们可以这样生成 Base64 编码的挑战：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$challenge = \"\";\r\nfor($i = 0; $i \n<p>对于用户信息，我们需要登录名、显示名称和 ID 三项内容。我们可以从数据库中取出用户信息，也可以新建一份。需要注意的是，<strong>出于安全和隐私的考量，ID 不应该包含用户的任何信息，比如用户邮箱等。</strong>推荐的做法是和挑战一样，生成一个随机字符串/一组随机数，并将其于用户关联起来以供之后使用。</p>\n<p>发送已注册的凭证 ID 列表是为了防止用户重复注册同一个认证器。正确设置该列表后，如果用户试图注册同一个认证器，浏览器会中止流程并抛出 <code>InvalidStateError</code>。</p>\n<p>最后，别忘了将挑战等一些后续可能会用到的信息临时存储起来。Session 就是一个很好的选择。</p>\n<p>将所有信息发送到浏览器之后，我们应该可以构建出新建凭证所需的参数了。由于有多个参数需要以 <code>Uint8Array</code> 的形式传入，我们可以准备一个简单的工具函数帮我们将 Base64 的字符串转为 <code>Uint8Array</code>。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function str2ab(str){\r\n    return Uint8Array.from(window.atob(str), c=&gt;c.charCodeAt(0));\r\n}</pre>\n<p>除了 <code>challenge</code>, <code>rp</code>, <code>user</code> 和 <code>excludeCredentials</code> 几部分需要你根据具体情况设置外，上文提到的其他参数一般可以这么设置：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">publicKey: {\r\n    challenge, // 自行设置\r\n    rp, // 自行设置\r\n    user, // 自行设置\r\n    pubKeyCredParams: [\r\n        {\r\n            type: \"public-key\",\r\n            alg: -7 // ES256\r\n        },\r\n        {\r\n            type: \"public-key\",\r\n            alg: -257 // RS256\r\n        }\r\n    ],\r\n    authenticatorSelection: {\r\n        userVerification: \"discouraged\",\r\n        authenticatorAttachment: null // 除非用户指定，大部分情况下无需指定\r\n    },\r\n    excludeCredentials, // 自行设置\r\n    timeout: 60000\r\n}</pre>\n<p>然后就是传入 <code>navigator.credentials.create()</code>，拿到 <code>PublicKeyCredential</code>。如果一切顺利，接下来我们就需要考虑如何将返回的内容传回依赖方了。由于我们拿到的很多都是 <code>ArrayBuffer</code>，我们需要将其进行编码。再准备一个工具函数吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function array2b64String(a) {\r\n    return window.btoa(String.fromCharCode(...a));\r\n}</pre>\n<p>然后适当处理，我们就可以得到一个方便传输的 JSON 字符串了：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({publicKey}).then((credentialInfo) =&gt; {\r\n    const publicKeyCredential = {\r\n        id: credentialInfo.id,\r\n        type: credentialInfo.type,\r\n        rawId: array2b64String(new Uint8Array(credentialInfo.rawId)),\r\n        response: {\r\n            clientDataJSON: array2b64String(new Uint8Array(credentialInfo.response.clientDataJSON)),\r\n            attestationObject: array2b64String(new Uint8Array(credentialInfo.response.attestationObject))\r\n        }\r\n    };\r\n    return publicKeyCredential;\r\n}).then(JSON.stringify).then((authenticatorResponseJSON) =&gt; {\r\n    // 可以发送了\r\n}).catch((error) =&gt; {\r\n    console.warn(error); // 捕获错误\r\n})</pre>\n<p>依赖方收到数据以后，还需要做三件事：验证挑战、存储凭证 ID 和存储公钥。如果数据解码顺利，且收到的挑战和之前发送的一致，就可以认为注册成功，将凭证 ID 及公钥与用户关联起来。这一步有很多第三方库可以帮我们做，对于基础实现我们就不深入探究了。</p>\n<blockquote><p>由于不同厂商的认证器的实现方式不同，<strong>我们并不能保证凭证 ID 一定是全局唯一的</strong>，也就是说，凭证 ID 有可能碰撞——即使这些凭证实际上是不同的。依赖方在实现凭证 ID 的存储及查找时，需要注意和用户 ID 结合进行存储或查找，或是直接在注册认证器时在服务器端对比阻止相同的凭证 ID。</p></blockquote>\n<hr><p>接下来就可以进行验证了。某天，用户点击了验证按钮准备登录，于是浏览器发送了验证请求到依赖方，同时附上要登录的用户名。接下来依赖方至少需要发送两项内容给浏览器：<strong>挑战和用户已绑定的凭证 ID 列表（即 <code>allowCredentials</code>）。</strong></p>\n<p>之后前端的处理流程就和注册时基本一致了。只是需要注意验证流程中获取到的 <code>PublicKeyCredential</code> 的结构和注册时的稍有不同。</p>\n<p>当浏览器将数据传回后，依赖方需要做的事情就比之前要麻烦一些了。依赖方需要验证挑战，并用之前存储的公钥验证签名和签名计数。同样地，这一步有很多第三方库可以帮我们做。最后，如果验证全部通过，我们就可以允许用户登录了。</p>\n<p>到目前为止，我们已经实现了一个简单的 WebAuthn 验证服务。不过这只是一个最基础的实现，对于很多高安全要求的身份认证这是远远不够的。因此，我们需要摆脱对第三方库的依赖，深入了解 WebAuthn。你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分，不过对于基础的 WebAuthn 实现，我们的旅程就到这里了。</p>\n<h2>拓展阅读</h2>\n<p>如果你的目标只是快速了解如何开发 WebAuthn，那么你阅读到这里就可以了。同时，上一节例子中的部分代码来自于我为了这篇文章开发的 WordPress 插件 WP-WebAuthn，这个插件可以为你的 WordPress 启用 WebAuthn 无密码登录（并非二步验证），你可以查阅插件的 <a href=\"https://github.com/yrccondor/wp-webauthn\">GitHub 存储库</a>了解更多，也可以自己安装试一试。</p>\n<p>如果你正在使用 Chrome 开发，Chrome 87+ 版本添加了一个 WebAuthn 开发者面板，可以帮助你在没有任何实体验证器的情况下开发 WebAuthn 功能。你可以在 Google 的<a href=\"https://developers.google.com/web/tools/chrome-devtools/webauthn\">这篇文章</a>中了解更多。不够，如果你正在使用 Firefox，很遗憾目前我还没有找到对应的开发工具或是浏览器扩展可用。</p>\n<p>如果你希望了解更多关于非对称加密的数学证明，可以查阅阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">这篇文章</a>。</p>\n<p>如果你希望了解更多关于 Credential Management API 的信息，可以查阅<a href=\"https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe\">这篇文章</a>（英文）。</p>\n<p>如果你希望了解更多 WebAuthn 的细节，可以继续往下阅读。<span></span></p>\n<h1>深入了解 WebAuthn</h1>\n<p>如上文所说，如果摆脱对第三方库的依赖，或是要实现更安全的 WebAuthn，我们必须深入了解 WebAuthn。在这一部分中，我们会详细讨论上文没有提到的一些概念和参数，并了解 WebAuthn 中各类数据的结构以实现解码与验证。先来看一看一些进阶的选项吧。</p>\n<h2>进阶选项</h2>\n<p>没错，上文提到的传入 <code>navigator.credentials.create()</code> 和 <code>navigator.credentials.get()</code> 方法的参数其实只是所有参数的一部分。对于 <code>create()</code>，我们还可以配置这些可选内容（上文提及的已省略）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        rp: {\r\n            icon\r\n        },\r\n        user: {\r\n            icon\r\n        },\r\n        attestation,\r\n        authenticatorSelection: {\r\n            requireResidentKey\r\n        },\r\n        extensions\r\n    }\r\n})</pre>\n</pre>\n<ul>\n<li>\n<code>rp.icon: String</code> 和 <code>user.icon</code>：是的，你可以为依赖方和用户设置图标，可以使用 HTTPS URL 或 Base64，一般长度不能超过 128 字节，不过大部分浏览器不会显示图标，或是有非常小的图片体积限制，所以一般没有使用这一属性的必要</li>\n<li>\n<code>attestation: String</code>：表明依赖方是否需要证明。可选三个值：\n<ul>\n<li>\n<code>none</code>：（默认）不需要证明。如上文所述，依赖方不关心证明，因此认证器不会签名。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n<li>\n<code>indirect</code>：依赖方需要证明，但证明方式可由认证器选择。在支持匿名证明的认证器上，认证器会通过匿名证明的方式签名挑战，并向依赖方提供签名方式等信息</li>\n<li>\n<code>direct</code>：依赖方要求直接证明。此时认证器会使用烧录在认证器中的公钥进行签名，同时向依赖方提供签名方式等信息以供依赖方验证认证器是否可信。更多信息可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节</li>\n</ul>\n</li>\n<li>在 <code>authenticatorSelection</code> 中，我们还可以设置两个可选属性：\n<ul>\n<li>\n<code>authenticatorSelection.requireResidentKey: Boolean</code>：是否要求将私钥钥永久存储于认证器中。默认值为 <code>false</code>。对于 iOS/iPad OS 13，必须设置为 <code>false</code>，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n<li>\n<code>extensions: Object</code>：WebAuthn 扩展，可以提供规范之外的配置和响应。由于实际情况中很少会使用这一特性，我们不会在这篇文章中讨论它</li>\n\n<blockquote><p>将 <code>requireResidentKey</code> 设置为 <code>true</code> 可以实现无用户名的登录，即认证器同时替代了用户名和密码。需要注意的是，尽管大部分认证器可以实现无限对公私钥，<strong>但能永久存储的私钥数量是有限的</strong>（对于 Yubikey，这通常是 25），因此只应在真正需要的时候启用此特性。我们会在“<a href=\"https://flyhigher.top/#login-without-username\">无用户名登录</a>”一节中详细讨论原因。</p></blockquote>\n<blockquote><p><strong>如果你没有高安全需求（如银行交易等），请不要向认证器索取证明</strong>，即将 <code>attestation</code> 设置为 \"none\"。对于普通身份认证来说，要求证明不必要的，且会有浏览器提示打扰到用户。</p></blockquote>\n<blockquote><p>Android 暂时无法实施用户验证，进而会导致依赖方验证失败。你可以在<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=997538\">这里</a>追踪这个特性的实现情况。</p></blockquote>\n<blockquote>\n<p>对于 <code>extensions</code>，由于目前浏览器支持和应用范围有限，我们不会在这篇文章中涉及，不过你可以看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    uvm: true, // 要求认证器返回用户进行验证的方法\r\n    txAuthSimple: \"Please proceed\" // 在认证器上显示与交易有关的简短消息\r\n}</pre>\n<p>你可以在<a href=\"https://www.w3.org/2019/01/webauthn-extensions.html\">这个页面</a>了解更多关于 <code>extensions</code> 的信息。</p>\n</blockquote>\n<p>对于 <code>get()</code>，我们其实只有一个可选内容没讲了，即 <code>extensions</code>。和上文一样，我们不会在这篇文章中讨论它。</p>\n<p>就这些了！<span></span></p>\n<h2>手动解个码</h2>\n<p>是时候看看如何手动解码了。我们将会在这一节中讨论认证器返回的数据的结构以及如何正确地解码它们。</p>\n<p>首先我们来看看如何处理注册过程中认证器发回的数据。假设所有 <code>ArrayBuffer</code> 类型的值都被正确地以 Base64 编码，且后端已经将 JSON 的字符串解析为字典。先来复习一下，我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"ZRBkDBCEtq...9XY8atOcbg\",\r\n    type: \"public-key\",\r\n    rawId: \"ZRBkDBCEtq...9XY8atOcbg==\",\r\n    response: {\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...i5jcmVhdGUifQ==\",\r\n        attestationObject: \"o2NmbXRkbm9uZWd...xNHuAMzz2LxZA==\"\r\n    }\r\n}</pre>\n<p>这里的 <code>id</code> 就是凭证的 ID，如果验证正确，我们最终要将它存储起来并于用户关联。同时可以看到 Base64 编码后的 <code>rawId</code> 其实和 <code>id</code> 是一致的（不过 <code>id</code> 是 Base64URL 编码的）。而 <code>type</code> 则一定是 \"public-key\"。</p>\n<p>不过，我们主要关心的还是 <code>respose</code> 中的两项内容。首先是 <code>clientDataJSON</code>。它的处理比较简单，看名字就知道，它应该是一个 JSON 字符串。</p>\n<blockquote><p>小技巧：如果你看到一个 Base64 编码的字符串以 \"ey\" 开头，那么它大概率是一个 Base64 编码的 JSON。</p></blockquote>\n<p>将<code>clientDataJSON</code> Base64 解码再 JSON 解码之后我们就能得到一个字典：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"NI4i1vsNmP2KHcmyFnBCKRVQPfHgg34SsYZUOPZY2lM\",\r\n    extra_keys_may_be_added_here: \"do not compare clientDataJSON against a template. See https://goo.gl/yabPex\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>结构一目了然。在这里，我们需要验证三项内容：</p>\n<ul>\n<li>\n<code>challenge</code> 和之前发送的一致</li>\n<li>\n<code>origin</code> 为创建凭证的页面的源（协议+主机名+端口号，并非 URL）</li>\n<li>\n<code>type</code> 为 \"webauthn.create\"</li>\n</ul>\n<p>同时可以注意到有一个奇怪的 <code>extra_keys_may_be_added_here</code>。这其实是 Google 在 Chrome 中搞的一点小把戏，有一定概率会出现，提醒我们需要将 JSON 解析后再验证键值以防额外插入的键值影响验证。具体信息你可以访问那个 URL 看一看。</p>\n<p>对于 Firefox，我们会多得到两项 <code>clientExtensions</code> 和 <code>hashAlgorithm</code> ，分别指明了客户端扩展数据和签名算法。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"3-4\">{\r\n    challenge: \"dg6ost6ujhAA0g6WqLe-SOOH-tbhvjW9Sp90aPKlLJI\",\r\n    clientExtensions: {},\r\n    hashAlgorithm: \"SHA-256\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>由于本文不考虑扩展数据，因此我们可以不考虑 <code>clientExtensions</code>。同时由于目前规范中指定的签名算法只有 SHA-256 一种，因此现阶段我们也可以简单地忽略 <code>hashAlgorithm</code>。</p>\n<p><code>clientDataJSON</code> 很简单地就处理完了。接下来我们要来看看 <code>attestationObject</code>。先来看看 <code>attestationObject</code> 的结构图示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\" alt=\"attestationObject 的结构\" width=\"1056\" height=\"532\" class=\"aligncenter size-full wp-image-2245\"></a>\n<p><code>attestationObject</code> 是 CBOR 编码后再被 Base64 编码的，因此我们需要额外对其进行 CBOR 解码。</p>\n<blockquote><p>CBOR (Concise Binary Object Representation, 简明二进制对象表示) 是一种多应用于物联网领域的编码方式，你可以将它看作体积更小、更方便物联网传输的二进制 JSON。大部分语言都可以找到对应的 CBOR 解码库。</p></blockquote>\n<p>我们当然不会手解 CBOR，直接来看看解开之后的样子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"none\",\r\n    attStmt: {},\r\n    authData: [211, 217, 43, 24, 199, ..., 97, 238, 166, 67, 107]\r\n}</pre>\n<p>这些键值的含义如下：</p>\n<ul>\n<li>\n<code>fmt</code>：标明证明的格式。WebAuthn 预定义了几种格式，分别为：\n<ul>\n<li>\n<code>none</code>：没有证明</li>\n<li>\n<code>packed</code>：为 WebAuthn 优化的证明格式</li>\n<li>\n<code>android-safetynet</code>：Android 使用的格式</li>\n<li>\n<code>android-key</code>：又是 Android 使用的格式</li>\n<li>\n<code>fido-u2f</code>：FIDO U2F 认证器使用的格式</li>\n<li>\n<code>tpm</code>：TPM 可信平台模块使用的格式</li>\n</ul>\n</li>\n<li>\n<code>attStmt</code>：证明对象，具体格式根据 <code>fmt</code> 的不同会有所不同</li>\n<li>\n<code>authData</code>：包含公钥、签名计数等来自认证器的数据</li>\n</ul>\n<p>诶，例子里的 <code>attStmt</code> 怎么是空的？还记得之前说的吗？大部分情况下，<strong>如果依赖方不要求证明，那么认证器不会签名挑战</strong>，于是 <code>fmt</code> 会变为 \"none\"，<code>attstmt</code> 会为空。如果不是高安全要求，我们可以只对这一种情况做支持。</p>\n<blockquote><p>注意，部分情况下 Firefox 会在不要求证明（即 <code>attestation</code> 为 \"none\"）时会返回 <code>fmt</code> 为 \"packed\" 的证明。<strong>这是符合规范的。</strong>此时认证器会进行自证明，你可以视情况进行处理。具体可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>对于非 \"none\" 的 <code>fmt</code> 我们稍后再谈，现在我们先来看看 <code>authData</code>。来复习一下 <code>authData</code> 的结构：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\" alt=\"authData 的结构\" width=\"1056\" height=\"384\" class=\"aligncenter size-full wp-image-2240\"></a>\n<p>对于它的解码比较简单粗暴，我们要做的就是根据图示将它切开，然后适当地转换类型。其中各部分的含义如下：</p>\n<ul>\n<li>\n<code>rpIdHash</code>：如其名，SHA-256 的 <code>rpId</code>，长度 32 字节</li>\n<li>\n<code>flags</code>：标识认证状态，长度 1 字节。其中 8 位分别为：\n<ul>\n<li>\n<code>ED</code>：是否有扩展数据</li>\n<li>\n<code>AT</code>：是否包含 <code>attestedCredentialData</code>。通常注册认证器时会包含 <code>attestedCredentialData</code>，而验证时不包含</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>\n<code>UV</code>：用户是否已验证</li>\n<li>保留位</li>\n<li>\n<code>UP</code>：用户是否在场</li>\n</ul>\n</li>\n<li>\n<code>signCount</code>：签名计数，长度 4 字节</li>\n<li>\n<code>attestedCredentialData</code>：包含公钥等凭据数据，变长。其结构如下：\n<ul>\n<li>\n<code>aaguid</code>：认证器的 AAGUID (Authenticator Attestation GUID)，对于同一型号的认证器，它们的 AAGUID 是相同的</li>\n<li>\n<code>credentialIdLength</code>：标识 <code>credentialId</code> 的长度，长度 2 字节</li>\n<li>\n<code>credentialId</code>：凭证 ID，和 <code>rawId</code> 一致，长度由 <code>credentialIdLength</code> 定义</li>\n<li>\n<code>credentialPublicKey</code>：CBOR 编码的 COSE 格式的凭证公钥，变长</li>\n</ul>\n</li>\n<li>\n<code>extensions</code>：扩展数据，变长，本文不讨论</li>\n</ul>\n<blockquote><p>出于隐私考虑，如果不要求证明，认证器会以 0 填充 AAGUID。</p></blockquote>\n<p>如果你的后端在使用 Node.js，这里有个工具函数可以帮你完成这一步（不考虑 <code>extensions</code>）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function parseAuthData(buffer){\r\n    let rpIdHash = buffer.slice(0, 32);\r\n    buffer = buffer.slice(32);\r\n  \r\n    let flagsBuf = buffer.slice(0, 1);\r\n    buffer = buffer.slice(1);\r\n\r\n    let flagsInt = flagsBuf[0];\r\n    let flags = {\r\n        up: !!(flagsInt &amp; 0x01),\r\n        uv: !!(flagsInt &amp; 0x04),\r\n        at: !!(flagsInt &amp; 0x40),\r\n        ed: !!(flagsInt &amp; 0x80),\r\n        flagsInt\r\n    }\r\n\r\n    let counterBuf = buffer.slice(0, 4);\r\n    buffer = buffer.slice(4);\r\n  \r\n    let counter = counterBuf.readUInt32BE(0);\r\n\r\n    let aaguid = undefined;\r\n    let credID = undefined;\r\n    let COSEPublicKey = undefined;\r\n\r\n    if(flags.at) {\r\n        aaguid = buffer.slice(0, 16);\r\n        buffer = buffer.slice(16);\r\n\r\n        let credIDLenBuf = buffer.slice(0, 2);\r\n        buffer = buffer.slice(2);\r\n\r\n        let credIDLen = credIDLenBuf.readUInt16BE(0);\r\n        credID = buffer.slice(0, credIDLen);\r\n\r\n        buffer = buffer.slice(credIDLen);\r\n        COSEPublicKey = buffer;\r\n    }\r\n\r\n    return {rpIdHash, flagsBuf, flags, counter, counterBuf, aaguid, credID, COSEPublicKey}\r\n}</pre>\n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>解开后，依赖方至少需要做四件事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>存储签名计数</li>\n<li>存储公钥</li>\n</ol>\n<blockquote><p>签名计数不一定从 0 开始。</p></blockquote>\n<p>对于公钥，也就是 <code>credentialPublicKey</code>，我们需要多一次 CBOR 解码，然后就可以得到类似这样的公钥：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    kty: \"EC\",\r\n    alg: \"ECDSA_w_SHA256\",\r\n    crv: \"P-256\",\r\n    x: \"ZGQALNfqo0L7HFYQHFHCS/X5db49z0ePnuQEs3w3X8w=\",\r\n    y: \"6qYxhnjYuez/Q8N6vX7nIIGfxFWdZ25NzQfZYuYOalA=\"\r\n}</pre>\n<p>然后可以选择适当的方法将其存储起来，之后的步骤本文就不再赘述了。现在，将目光拉回来，让我们看看包含证明的 <code>attestationObject</code> 是怎么样的。我们来看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"packed\",\r\n    attStmt: {\r\n        alg: -7,\r\n        sig: [48, 70, 2, 33, 0, ..., 132, 78, 46, 100, 21],\r\n        x5c: [\r\n            [48, 130, 2, 189, 48, 130, 1, 165, 160, 3, ..., 177, 48, 125, 191, 145, 24, 225, 169, 41, 248]\r\n        ]\r\n    },\r\n    authData: [211, 217, 43, 24, 199, ..., 158, 54, 87, 126, 54]\r\n}</pre>\n<p>这里有一个使用 \"packed\" 格式的证明。此时，<code>attStmt</code> 中包含三个值：</p>\n<ul>\n<li>\n<code>alg</code>：签名算法</li>\n<li>\n<code>sig</code>：签名值</li>\n<li>\n<code>x5c</code>：X.509 编码的证书链</li>\n</ul>\n<p>我们不会在这一节中详述对签名的验证。要了解更多信息，你可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。现在，让我们来看看如何处理验证过程中认证器发回的数据。我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"hmqdxPLit9...BWeVxZqdvU\",\r\n    type: \"public-key\",\r\n    rawId: \"hmqdxPLit9V...BWeVxZqdvU=\",\r\n    response: {\r\n        authenticatorData: \"09krGMcWTf...UFAAAABA==\",\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...XRobi5nZXQifQ==\",\r\n        signature: \"UsXZV3pvT3np8btj6V0g...WBkaqyt88DrD40qh+A==\",\r\n        userHandle: \"MmYxNWYzZjQyZjM...Tg2ZDY4NzhlNw==\"\r\n    }\r\n}</pre>\n<p><code>id</code>, <code>rawId</code> 和 <code>type</code> 和之前一样，这里就不再赘述了。让我们来看看 <code>response</code>。首先是 <code>clientDataJSON</code>，和之前的解法一样，要验证的内容也一样，只是 <code>type</code> 从 \"webauthn.create\" 变成了 \"webauthn.get\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"bnkd2CmrEuvKnAFXs2QlC3SKlg4XFvGtP4HJL1yEWyU\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.get\"\r\n}</pre>\n<p>然后是 <code>userHandle</code>。前面讲过，这是认证器在创建凭证时的用户 ID。如果用户在使用 U2F 认证器，很可能这一项为空，所以大部分情况下我们不关心这一项。</p>\n<p>接着来看 <code>authenticatorData</code>。这其实就是之前的 <code>attestedCredentialData</code>，只是这次不包含公钥。以相同的方式切开数据，我们应该可以得到 <code>rpIdHash</code>, <code>flags</code>和 <code>signCount</code> 三项。此时，依赖方至少需要做这三样事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>验证签名计数大于之前存储的计数，并更新存储的计数</li>\n</ol>\n<blockquote><p>如果签名计数比之前的小，那么这个认证器很可能是伪造的，应该中止验证并返回验证失败。同时，签名计数不一定每次按 1 递增，通常只要计数比此前的大就认为计数检查通过。</p></blockquote>\n<p>最后，我们来看 <code>signature</code>，也就是签名。不过这个签名不是简单的对挑战的签名，具体算法如图所示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\" alt=\"签名过程\" width=\"1034\" height=\"587\" class=\"aligncenter size-full wp-image-2231\"></a>\n<p>计算签名时，认证器会将 <code>authenticatorData</code> 与 <code>clientDataHash</code>（也就是 <code>clientDataJSON</code> 的 SHA-256 Hash）拼接起来，并使用对应的私钥签名。依赖方应该使用对应的公钥将其解密，并验证内容是否是 <code>authenticatorData</code> 与 <code>clientDataHash</code> 的拼接。这部分的计算不在本文的讨论范围内。</p>\n<p>最后，如果全部验证通过，返回验证成功。<span></span></p>\n<h2>验证认证器</h2>\n<p>WebAuthn 已经很安全了，但有的时候我们还要让它更安全一点。比如，如果用户在使用伪造的或是自制的认证器，认证器的安全性就得不到保证。此时，依赖方就需要验证认证器是否是可信的认证器。</p>\n<blockquote><p>这一过程仅发生在注册认证器时。此时，如果认证器验证通过，就可以存储公钥，后续步骤和之前描述的一致。</p></blockquote>\n<blockquote><p>再次说明，如果不是对安全性有极高的要求，向认证器索取证明以验证认证器是否可信是没有必要的。此外，验证认证器需要依赖方自行维护可信认证器列表，大大增加了维护的复杂性。</p></blockquote>\n<p>在调用 <code>navigator.credentials.create()</code> 时，我们可以将 <code>attestation</code> 设置为非 \"none\" 来向认证器索取证明。除无证明外，WebAuthn 定义了四种证明方式：</p>\n<ul>\n<li>Basic Attestation (Basic) ：基础的证明方式，认证器会使用认证器私钥签名</li>\n<li>Self Attestation (Self) ：自证明，认证器会使用凭证私钥签名</li>\n<li>Attestation CA (AttCA) ：认证器会使用多个证明私钥之一签名</li>\n<li>Elliptic Curve based Direct Anonymous Attestation (ECDAA) ：通过 <a href=\"https://en.wikipedia.org/wiki/Direct_Anonymous_Attestation\">DAA</a> 实现的匿名证明</li>\n</ul>\n<blockquote><p>和验证过程一样，这里签名的目标是 <code>authenticatorData</code> 和 <code>clientDataHash</code> 的连接。</p></blockquote>\n<p>还记得 <code>create()</code> 时 <code>attestation</code> 可选的三个值吗？这个值会决定认证器最终使用哪种方式进行证明。复习一下：</p>\n<ul>\n<li>\n<code>none</code>：大部分情况下认证器会选择不进行证明，部分认证器会进行自证明。此时 AAGUID 会被 0 填充</li>\n<li>\n<code>indirect</code>：认证器会试图通过替换 AAGUID 和选择合适的证明方式来进行匿名证明，具体方式由认证器选择</li>\n<li>\n<code>direct</code>：认证器会提供最直接的证明信息</li>\n</ul>\n<p>注意，大部分情况下，当认证器需要向依赖方证明自己可信时需要提供认证器公钥，<strong>这会触发浏览器提示，只有用户同意后认证器才会进行证明，否则认证器将不提供证明。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\" alt=\"浏览器提示\" width=\"446\" height=\"283\" class=\"aligncenter size-full wp-image-2217\"></a>\n<blockquote><p>为什么浏览器会说“安全密钥的品牌和型号”？事实上，为了避免用户通过认证器证书被跨依赖方追踪，FIDO 要求使用相同认证器证书的认证器的数量不能少于 100,000。于是大部分认证器厂商会选择<strong>让同一型号的认证器共用同一份证书。</strong>因此，浏览器的会询问用户是否同意“查看安全密钥的品牌和型号”。</p></blockquote>\n<blockquote><p>Android Safety Net 不会向用户询问是否同意，而是会静默进行证明。</p></blockquote>\n<p>当证明不为空时，依赖方收到数据后根据 <code>attestationObject.fmt</code> 的不同，需要选择不同的验证方式来验证认证器的可信情况。出于篇幅原因，这里我们不会讨论每一种 <code>fmt</code> 的验证方式，更多信息你可以查阅 <a href=\"https://www.w3.org/TR/webauthn/#defined-attestation-formats\">W3C 文档</a>。</p>\n<p>当 <code>fmt</code> 为 <code>packed</code> 时，<code>attestationObject.attStmt</code> 可能会有三种格式：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">// 自证明\r\n{\r\n    alg, // 算法\r\n    sig // 签名\r\n}\r\n// 基础或证明 CA 证明\r\n{\r\n    alg,\r\n    sig,\r\n    x5c // X.509 证书链\r\n}\r\n// 椭圆曲线证明\r\n{\r\n    alg,\r\n    sig,\r\n    ecdaaKeyId // ECDAA-Issuer 公钥标识符\r\n}</pre>\n<p>此时，依赖方需要检查证书符合预期格式并检查证书是否在可信链上。首先，如果证明中既没有 <code>ecdaaKeyId</code> 也没有 <code>x5c</code>，就说明这个证明使用的是自证明，只需使用认证器提供的公钥验证即可；如果有 <code>x5c</code>，那么就需要验证 <code>x5c</code> 中的证书是否在可信链上。将 <code>x5c</code> 中的每个证书以 Base64 编码，按 64 个字符切开，并在头尾加上 <code>-----BEGIN CERTIFICATE-----</code> 和 <code>-----END CERTIFICATE-----</code>就能得到一个证书字符串了。之后，依赖方需要验证证书是否可信。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function base64ToPem(b64cert){\r\n    let pemcert = '';\r\n    for(let i = 0; i \n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>至于 <code>ecdaaKeyId</code>，由于目前应用较少，处理方法可能需要你另寻资料了。检查证书的具体步骤已经超出了本文的范围，具体可以查阅<a href=\"https://medium.com/@herrjemand/verifying-fido2-packed-attestation-a067a9b2facd\">这篇文章</a>（英文）。</p>\n<blockquote><p>你可以在 <a href=\"https://fidoalliance.org/metadata/\">FIDO Metadata Service</a> 找到各大厂商认证器的可信证书链。</p></blockquote>\n<p>当在 Android 上调起 WebAuthn 时，大部分情况下 <code>fmt</code> 将会为 <code>safety-net</code>。此时 <code>attestationObject.attStmt</code> 的结构会是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    ver: \"200616037\",\r\n    response: {\r\n        type: \"Buffer\",\r\n        data: [101, 121, 74, 104, 98, ..., 115, 104, 104, 82, 65]\r\n    }\r\n}</pre>\n<p>此时，<code>clientDataJSON</code> 中还会出现 <code>androidPackageName</code> 键，值是调起 WebAuthn 验证的应用的包名，如 Chrome 就是 \"com.android.chrome\"。</p>\n<p>在这个证明中，<code>data</code> 其实是一个 JWT 字符串，我们可以将它编码为字符串并将其按照 JWT 进行解码（别忘了验证 JWT 签名）。最终我们会得到一个类似这样的 Payload：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    nonce: \"0QAurN4F9wik6GEkblDJhGuf4kuaqZn5zaaxlvD1hlA=\",\r\n    timestampMs: 1584950686460,\r\n    apkPackageName: \"com.google.android.gms\",\r\n    apkDigestSha256: \"2BQHno+bmWWwdLUYylS8HLt5ESJzci3nt2uui71ojyE=\",\r\n    ctsProfileMatch: true,\r\n    apkCertificateDigestSha256: [\r\n        \"8P1sW0EPicslw7UzRsiXL64w+O50Ed+RBICtay2g24M=\"\r\n    ],\r\n    basicIntegrity: true,\r\n    evaluationType: \"BASIC\"\r\n}</pre>\n<p>其中包含了有关设备状态的一些信息。比如说，如果 <code>ctsProfileMatch</code> 为 <code>false</code>，那么该设备很有可能被 root 了。对于高安全要求的场景，我们可以视情况进行验证。</p>\n<p>同时我们可以在 JWT Header 中验证证明的有效性。我们应该能取得这样的 Header：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    alg: \"RS256\",\r\n    x5c: [\r\n        \"MIIFkzCCBHugAwIBAgIR...uvlyjOwAzXuMu7M+PWRc\",\r\n        \"MIIESjCCAzKgAwIBAgIN...UK4v4ZUN80atnZz1yg==\"\r\n    ]\r\n}</pre>\n<p>这里的结构就和上方的 <code>x5c</code> 验证类似了。具体步骤可以参考<a href=\"https://medium.com/@herrjemand/verifying-fido2-safetynet-attestation-bd261ce1978d\">这篇文章</a>（英文）。</p>\n<p>其他所有格式的验证方式也都可以在<a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">这篇文章</a>（英文）中找到。<span></span></p>\n<h2>无用户名登录</h2>\n<p>认证器已经代替了密码，可是这还不够！在进行第一因素认证（即使用 WebAuthn 登录）时，我们还是需要输入用户名，然后才能进行身份认证。懒惰是第一生产力，我们能不能不输入用户名就进行身份认证呢？实际上，大部分认证器都允许我们无用户名登录。<strong>而这一特性的核心就是 Resident Key 客户端密钥驻留。</strong></p>\n<p>你可以思考一下，为什么普通的 WebAuthn 为什么不能实现无用户名登录？事实上，大部分认证器为了实现无限对公私钥，会将私钥通过 Key Warp 等技术加密后包含在凭证 ID 中发送给依赖方，这样认证器本身就不用存储任何信息。不过，这就导致需要身份认证时，依赖方必须通过用户名找到对应的凭证 ID，将其发送给认证器以供其算出私钥。</p>\n<blockquote><p>Yubikey 实现了一个基于 HMAC 的算法，认证器可以在私钥不离开认证器的前提下（常规的 Key Warp 算法中实际上私钥离开了认证器）通过一些输入和凭证 ID 重新计算私钥，你可以阅读<a href=\"https://www.yubico.com/blog/yubicos-u2f-key-wrapping/\">这篇文章</a>了解更多。</p></blockquote>\n<blockquote><p>客户端通过凭证 ID 查找对应认证器的算法根据系统的不同是不同的。通常凭证 ID 中会包含认证器信息，因此系统可以通过凭证 ID 找到对应的认证器。</p></blockquote>\n<p>要避免输入用户名，我们可以要求认证器将私钥在自己的内存中也存储一份。这样，依赖方无需提供凭证 ID，认证器就可以通过依赖方 ID 找到所需的私钥并签名公钥。以下是具体流程：</p>\n<p>注册时：</p>\n<ol>\n<li>依赖方请求新建凭证，同时要求启用客户端密钥</li>\n<li>认证器生成一对公私钥，并将私钥存储在永久内存中且与依赖方 ID 及用户 ID 绑定，随后将公钥发送给依赖方以供存储</li>\n<li>依赖方将用户 ID 即公钥与用户绑定</li>\n</ol><p>验证时：</p>\n<ol>\n<li>依赖方请求验证，但不必提供除依赖方 ID 以外的更多信息</li>\n<li>用户选择认证器</li>\n<li>认证器根据依赖方 ID 找到对应私钥</li>\n<li>如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录</li>\n<li>确定私钥后，认证器签名挑战并将其返回，同时返回用户 ID</li>\n<li>依赖方通过用户 ID 找到对应用户并用对应公钥检查签名，正确则允许对应用户登录</li>\n</ol><blockquote><p>可以看到，这个特性同时要求认证器存储用户 ID，即上面提到过的 <code>userHandle</code>。依赖方需要根据此信息找到对应用户，因此不支持 <code>userHandle</code> 的 U2F 认证器无法进行无用户名登录。</p></blockquote>\n<blockquote><p>如之前所说，<strong>认证器能永久存储的私钥数量是有限的</strong>，因此只应在真正需要无用户名登录的时候启用此特性。</p></blockquote>\n<blockquote><p>目前暂时没有办法检测认证器是否支持客户端密钥驻留，因此在无用户名验证失败时应 fallback 至常规的 WebAuthn 验证，即向用户询问用户名。</p></blockquote>\n<p>现在让我们来看看如何实现这一特性吧。首先，调用 <code>navigator.credentials.create()</code> 时我们需要注意两个参数：<code>requireResidentKey</code> 必须为 <code>true</code>，<code>userVerification</code> 必须为 \"required\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"5-6\">navigator.credentials.create({\r\n    publicKey: {\r\n        ...\r\n        authenticatorSelection: {\r\n            requireResidentKey: true,\r\n            userVerification: \"required\"\r\n            ...\r\n        },\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Windows Hello <strong>似乎</strong>会存储所有已注册的凭据，因此无论是否指定 <code>requireResidentKey</code>，你都可以通过 Windows Hello 进行无用户名登录。</p></blockquote>\n<p>随后，浏览器会询问用户是否允许认证器存储私钥。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\" alt=\"浏览器提示\" width=\"445\" height=\"285\" class=\"aligncenter size-full wp-image-2208\"></a>\n<p>如果用户同意，认证器会存储私钥，并和普通的 WebAuthn 一样返回信息。不过，依赖方收到数据之后，只需将公钥、用户 ID 与用户关联起来，而不必再将凭证 ID 与用户关联起来。至此注册完成。</p>\n<p>之后，在用户请求登录时，无需再向依赖方提供用户名。同时在传入 <code>navigator.credentials.get()</code> 的参数中也有两个需要注意：<code>userVerification</code> 必须为 \"required\"，同时 <code>allowCredentials</code> 必须为空。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"4-5\">navigator.credentials.get({\r\n    publicKey: {\r\n        ...\r\n        userVerification: \"required\",\r\n        allowCredentials: [],\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Android 暂不支持无用户名验证，空的 <code>allowCredentials</code> 会导致浏览器返回 <code>NotSupportedError</code> 错误。</p></blockquote>\n<p>此时，认证器会根据依赖方 ID 找到对应的私钥。如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录。用户选择后，认证器就会使用对应的私钥签名挑战并将其返回。此时，<code>userHandle</code> 一定不为空。</p>\n<p>依赖方收到数据后，需要将 <code>userHandle</code> 作为用户 ID 找到对应的用户，并使用对应的公钥验证签名。如果验证成功，则认为对应的用户身份认证成功，依赖方可以允许其登录。至此验证结束。</p>\n<blockquote><p>有的时候你可能会需要清除认证器中的密钥。绝大多数认证器都提供了对应的软件以供清除存储的密钥，但大部分情况下这会重置整个认证器，这意味着相关认证器此前的所有凭证均会失效。因此建议不要将日常使用的认证器作为开发测试用的认证器。</p></blockquote>\n<h2>从 U2F 认证迁移</h2>\n<p>如果你的服务此前提供了 U2F 第二因素认证，你可能会希望在将依赖方从 U2F 升级到 WebAuthn 时用户此前注册的 U2F 认证器仍然可用而无需重新注册。由于 WebAuthn 向后兼容 U2F 设备，用户是可以继续使用原有的 U2F 认证器的。不过，由于 WebAuthn 的依赖方 ID 与 U2F 的 <code>appid</code> 并不一定相同，你需要将原有的 U2F <code>appid</code> 随 WebAuthn 流程一起传递给认证器，认证器才能使用正确的私钥进行响应。</p>\n<p>要实现这一点，我们只需要在注册及认证仪式中使用 WebAuthn 的 <code>appid</code> 扩展。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    appid: \"https://example.com\" //U2F appid\r\n}</pre>\n<p>此时认证器便可以得到正确的私钥，之后的流程与正常情况一致；依赖方除了正常的 WebAuthn 流程外，不需要再做任何其它操作。</p>\n<h2>拓展阅读</h2>\n<p>我们的 WebAuthn 之旅到这里就真的结束了。不过，你仍然可以自行探究，了解更多。<strong>本文只是一个粗浅的使用指南</strong>，而被称为“Web 身份认证的未来”的 WebAuthn 的深层还要很多细节值得我们挖掘学习，不过本文不会再继续讨论了。</p>\n<p>如果你想了解更多关于 WebAuthn 的信息，最好的方法是直接阅读 <a href=\"https://www.w3.org/TR/webauthn\">W3C 规范</a>。此外，Yubico 也提供了不错的 <a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn 文档</a>。</p>\n<p>要了解更多认证器存储凭证的信息，你可以阅读<a href=\"https://duo.com/labs/tech-notes/how-security-keys-store-credentials\">这篇文章</a>（英文）。</p>\n<p>如果你想了解更多 Android Safety Net 是怎样运作的，可以观看<a href=\"https://youtu.be/8lv_9mydrjg\">这个视频</a>，并通过 <a href=\"https://developer.android.com/training/safetynet/attestation\">Google 的文档</a>了解 Android Safety Net 的更多信息。</p>\n<p>如果你想方便地调试 WebAuthn，<a href=\"https://webauthn.me/\">webauthn.me</a> 提供了一个非常直观方便的<a href=\"https://webauthn.me/debugger\">调试器</a>。</p>\n<h1>参考资料</h1>\n<p><a href=\"https://www.w3.org/TR/webauthn\">WebAuthn Level 1 规范 - W3C</a><br><a href=\"https://github.com/w3c/webauthn\">WebAuthn Level 2 草案 - W3C</a><br><a href=\"https://blog.techbridge.cc/2019/08/17/webauthn-intro/\">一起来了解Web Authentication - TechBridge 技术共笔部落格</a><br><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\">Introduction to WebAuthn API - Medium</a><br><a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">WebAuthn/FIDO2: Verifying responses - Medium</a><br><a href=\"https://obeta.me/posts/2019-03-01/WebAuthn%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8\">WebAuthn介绍与使用 - obeta</a><br><a href=\"https://webauthn.io/\">webauthn.io</a><br><a href=\"https://webauthn.guide/\">webauthn.guide</a><br><a href=\"https://webauthn.me/\">webauthn.me</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion\">Attestation and Assertion - MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Authentication_API\">Web Authentication API - MDN</a>（顺便翻译了一半）<br><a href=\"https://fidoalliance.org/fido-technotes-the-truth-about-attestation/\">FIDO TechNotes: The Truth about Attestation - FIDO Alliance</a><br><a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn Developer Guide - Yubico</a><br><a href=\"https://en.wikipedia.org/wiki/WebAuthn\">WebAuthn - Wikipedia</a><br><a href=\"https://techcommunity.microsoft.com/t5/identity-standards-blog/all-about-fido2-ctap2-and-webauthn/ba-p/288910\">All about FIDO2, CTAP2 and WebAuthn - Microsoft Tech Community</a><br><a href=\"https://webauthn-doc.spomky-labs.com/\">Webauthn Framework</a><br><a href=\"https://zhuanlan.zhihu.com/p/25279015\">如何开发支持 FIDO U2F 登录的网站 - 知乎专栏</a><br></p></pre>\n","link":"https://flyhigher.top/develop/2160.html"},{"title":"NLP 找门：用朴素贝叶斯进行文本分类","date":"2020-01-29 11:39:58","description":"\n<blockquote>\n<p>有一天，神收到了一封垃圾邮件，于是世界上就有了朴素贝叶斯算法。</p>\n<footer>——我瞎编的</footer>\n</blockquote>\n<p>为什么这篇文章的标题是 NLP 找门呢？因为如果你看完了这篇文章，你就可以<strong>准备入门</strong>自然语言处理 (<strong>N</strong>atural <strong>L</strong>anguage <strong>P</strong>rocessing) 了。我会把这篇文章当作一篇彻彻底底的 NLP 入门文章来写，尽量避免“专业高端”词汇和“全是奇怪符号”的式子，这样<strong>只要你有高中数学基础</strong>，就能毫无压力地看完这篇文章，学会使用朴素贝叶斯分类算法分类文本。</p>\n<p>让我们开始吧。</p>\n<h1>所以，啥是朴素贝叶斯？</h1>\n<p>简单来说，朴素贝叶斯 (Naïve Bayes) <strong>是一个简单但高效的分类算法</strong>，在进行不复杂的文本分类时高效且拥有不低的准确度，判断垃圾邮件就是用朴素贝叶斯进行文本分类的一个经典例子。当然朴素贝叶斯分类不仅能用在 NLP 中，在许多分类问题中朴素贝叶斯也有非常好的效果，但我们今天只关注它在 NLP 中的应用。</p>\n<p>要了解朴素贝叶斯，我们要先来了解一下贝叶斯定理。</p>\n<blockquote>\n<p>每增加一个数学公式都会使读者减半。</p>\n<footer>——霍金</footer>\n</blockquote>\n<p>那么，就让我们先来看看贝叶斯定理的公式吧（笑</p>\n<p>$$P(A|B) = \\frac{P(AB)}{P(B)} = \\frac{P(B|A)P(A)}{P(B)}$$</p>\n<p>其实还是很简单的，运用高中的条件概率知识就能理解。本质上，贝叶斯定理给出了一种方法，使得我们可以在 \\(P(A|B)\\) 和 \\(P(B|A)\\) 之间互相转换，因为通常情况下它们是不一样的。</p>\n<p>要更好地理解，请考虑这样一个例子：</p>\n<blockquote><p>假设有一个学校图书馆，图书管理员正为找不到某本书而发愁。已知老师有 70% 的意愿借走这本书，而是学生的意愿是 30%，这个学校的师生比例是 1:10，那么借走这本书的人是老师的概率有多大？</p></blockquote>\n<p>设学校总人数为 \\(T\\)，我们可以很容易地写出这样的一个式子：</p>\n<p>$$\\begin{align} P &amp; = \\frac{T\\cdot\\frac{1}{11}\\cdot 70\\%}{T\\cdot\\frac{1}{11}\\cdot 70\\%+T\\cdot\\frac{10}{11}\\cdot 30\\%} \\\\ &amp; = \\frac{70\\%}{70\\%+10\\times30\\%} \\\\ &amp; = \\frac{7}{37} \\end{align}$$</p>\n<p>这就是贝叶斯定理了！等等，你可能会挠挠头，这哪里是贝叶斯了？别急，如果我们把最上面的式子换个字母的话...</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>在这里，\\(H\\) 指 Hypothesis，即假设，而 \\(E\\) 指 Evidence，即证据。这样，这个式子就很好理解了，在我们上面的例子里，借走书是证据，那么 \\(P(E)\\) 就是某个人选择借走这本书的概率；这个人是老师是假设，那么这个人是老师的概率是 \\(P(H)\\)。<strong>注意这里的概率指在学校中抽一个人是老师的概率，并不是“在借走书的前提下”这个人是老师的概率</strong>，而“在借走书的前提下”这个人是老师的概率应该是 \\(P(H|E)\\)，也正是我们要求的概率。同样地，而“这个人是老师”的前提下借走书的概率就是 \\(P(E|H)\\) 了。</p>\n<p>那么再来看看上面我们凭小学知识就列出的计算式，如果把里面的具体数据换成概率来表示的话，这个式子就会变成...</p>\n<p>$$P(H|E) = \\frac{T\\cdot P(E|H)P(H)}{T\\cdot P(E|H)P(H) + T\\cdot P(E|\\neg H)P(\\neg H)}$$</p>\n<p>好吧，这里解释一下，\\(\\neg\\) 符号表示“非”，所以 \\(P(E|\\neg H)\\) 表示在“这个人不是老师”的前提下借走书的概率。而 \\(T\\cdot P(E|H)P(H)\\) + \\(T\\cdot P(E|\\neg H)P(\\neg H)\\)，即“可能借走书的老师的数量 + 可能借走书的学生的数量”，就是“可能借走书的人的数量”了，也就是 \\(T\\cdot P(E)\\)。上下消去 \\(T\\)，我们就能得到上面的式子了。</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>这就是贝叶斯了定理。如果你还是不太清楚，可以去看看 3Blue1Brown 的<a href=\"https://www.bilibili.com/video/av84799361\">这个视频</a>，图形化的讲解会清晰很多。</p>\n<p>这里我要提一下这个式子里各部分的专有名称了（“专业高端”词汇警告），你可以不记住，直接看后面。</p>\n<ul>\n<li>\\(P(H|E)\\) 叫做 \\(H\\) 的<strong>后验概率</strong>，反之亦然</li>\n<li>\\(P(H)\\) 叫做 \\(H\\) 的<strong>先验概率</strong>，反之亦然</li>\n<li>特别地，我们把 \\(P(E|H)\\) 称作<strong>“似然值”</strong>，即 likelihood</li>\n</ul>\n<p>那什么是朴素贝叶斯呢？按上面所说的，朴素贝叶斯是一种分类算法。简单来说，朴素贝叶斯将一个对象的各个特征考虑为互相独立，然后根据这些特征的概率的乘积来判断对象所属的分类。基本原理如下：</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)} \\propto P(E|H)P(H) = P(H)\\prod_{i}P(W_i|H)$$</p>\n<p>在这里，\\(W_i\\) 指某一对象的第 \\(i\\) 个特征，对于文本分类来说，这就是一段文本中的某个单词。</p>\n<p>朴素贝叶斯之所以“朴素”，是因为它要求<strong>各个特征间是独立的</strong>，在文本分类中也就是各个单词之间互不干扰。虽然思路简单的代价是适用范围变窄，不过由于这样的简化在很多情况下已经足够了，因此实际上朴素贝叶斯的应用范围非常广。<del>你看朴素贝叶斯 <strong>N</strong>aïve <strong>B</strong>ayes 的缩写都是 NB 了，能不厉害吗（逃</del></p>\n<h1>那么，咋分类啊</h1>\n<p>看来你这下完全听懂了呢（笑），是时候看看如何在 NLP 中应用朴素贝叶斯了。和上面一样，我们用一个具体的例子来说明。我们的目标是让电脑学会分类美国共和党和民主党的演讲稿，由于两个党派的演讲风格不同，所以这样的分类在理论上是可行的。</p>\n<div class=\"wp-block-file\">\n<a href=\"https://acdn.flyhigher.top/nlp/material.zip\" download>material.zip</a><a href=\"https://acdn.flyhigher.top/nlp/material.zip\" class=\"wp-block-file__button\" download>下载</a>\n</div>\n<p>上面我们要用到的数据集，你可以下载下来一起动手玩一玩。先说一下数据集的数据结构吧，压缩包里有两个文件，<code>train.txt</code> 将会被当作训练数据集，而 <code>test.txt</code> 则会作为训练结束后的验证数据集。两个文本文件里数据的结构是类似的，就像这样：</p>\n<pre class=\"EnlighterJSRAW\">BLUE WELL I AM SO HONORED AND PERSONALLY UNKNOWNWORD TO BE HERE...\r\nRED THANK YOU . THIS IS QUITE AN INSTITUTION . IT'S GOOD TO BE...</pre>\n<p>每行都是一篇演讲稿，每行的第一个单词指明了这篇演讲稿所属的党派，<code>RED</code> 指共和党，而 <code>BLUE</code> 指民主党。所有单词和符号都已经被转为大写并由空格分隔方便处理。<code>train.txt</code> 有共和党演讲稿和民主党演讲稿各 23 篇，<code>test.txt</code> 有 6 篇共和党演讲稿，12 篇民主党演讲稿。</p>\n<p>明白了？那我们就开始吧。</p>\n<h2>捋捋思路</h2>\n<p>首先，我们需要考虑如何在文本分类中应用朴素贝叶斯。很简单，按朴素贝叶斯的思路，<strong>计算每个词在某一分类下的出现概率，然后将某篇文章的所有词的概率相乘，再乘以该分类的先验概率，就可以得到某篇文章在某一分类下的概率。</strong></p>\n<p>$$P(Class|Article) = P(Class)\\prod_{i}P(Word_i|Class)$$</p>\n<p>各个分类概率都计算完成后，概率最高的那个分类就是这篇文章可能所属的分类。这个思路的核心就是用词决定了文本风格，文本的不同类别用词会有差异，只要能量化这些差异就可以分类文本。在我们的例子中，我们可以从 <code>train.txt</code> 中统计各个词汇的出现情况，然后用 <code>test.txt</code> 中的数据按上面的算法验证我们算法的准确性。</p>\n<p>这个思路很简单也很清晰，但还有一些问题需要解决。<strong>第一，有的时候，我们的测试数据集中可能会出现一个在训练数据集中没有出现过的词语。这个时候，朴素贝叶斯的计算结果会是 0。</strong>如果我们把 0 乘进式子中，那就别想得到正常的结果了。所以，我们还需要对计算某一单词在某一分类中的式子稍加改进。使用拉普拉斯平滑，就可以避免出现概率为 0 的情况。别被名字吓到，拉普拉斯平滑是一种非常简单的平滑方法：在分子上 +1，在分母上加整个取值范围，这样就可以给整个分式加上非常微小的偏移，避免出现 0。</p>\n<p>$$\\begin{align} P(Word_i|Class) &amp; = \\frac{Word_iCountInClass}{AllWordCountInClass} \\\\ &amp; \\approx \\frac{Word_iCountInClass + 1}{AllWordCountInClass + UniqueWordCount} \\end{align}$$</p>\n<p><strong>第二，对于长文本，大部分词语在某一分类中的出现概率是远小于 1 的，加上长文本词汇量大，往往概率相乘的结果会非常小。</strong>受限于计算机处理浮点数的原理，精确处理这么小的数字是很麻烦的。幸好，运用一些简单的数学知识就可以将其转化为更精确的表达，<strong>那就是取对数。</strong></p>\n<p>首先，将概率计算结果取对数并不影响我们的计算结果。因为取对数是一个单调递增的操作，而我们计算概率只是为了排序选择概率最高的分类，因此取对数是不影响我们排序的。而把多项式取对数，等于把多项式的每一项取对数后相加。所以我们有：</p>\n<p>$$\\lg{\\Big(P(Class)\\prod_{i}P(Word_i|Class)\\Big)} = \\lg{P(Class)} + \\sum_i\\lg{P(Word_i|Class)}$$</p>\n<p>大部分情况下，在每一次取对数的时候，要取对数的数字的大小，即 \\(P(Word_i|Class)\\) 尚还在计算机能处理的范围内，<strong>因此我们可以放心地使用取对数的方法</strong>，避免计算机精度不够影响结果。</p>\n<p><strong>第三就是在某些情况下，可能会有部分词语干扰计算结果</strong>，如 and, is 这类的被大量使用的中性词。如果希望得到更好的结果，我们可以维护一个停用词表，在计算时排除停用词即可。或者，我们可以在计算完每个单词的出现数量后，排除数量最多的前 \\(N\\) 个单词，避免这些单词过多地影响计算。</p>\n<h2>写点代码</h2>\n<p>现在我们终于可以开始实战，写点代码了。我会用简单的 Python 来表达思路。好了，理一理思绪，第一步我们要做的，是统计训练数据集中的用词情况。具体来说，根据上面的思考，我们需要统计的有：</p>\n<ul>\n<li>每个单词在各分类中出现的数量</li>\n<li>各分类中的不重复词数量</li>\n</ul>\n<p>用 Python 简单表示如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\"># 读入数据过程略...\r\ndata_raw = \"读入的数据\".split('\\n') # 按行分隔\r\ndata_blue = []\r\ndata_red = []\r\nword_count_blue = {}\r\nword_count_red = {}\r\n\r\nfor line_data in data_raw:\r\n    word_list = line_data.split(\" \") # 分隔单词\r\n    if word_list[0] == \"BLUE\":\r\n        for i in range(1,len(word_list)):\r\n            if not is_excluded(word_list[i]): # 判断是否为停用词\r\n                data_blue.append(word_list[i])\r\n                # 统计单词出现次数\r\n                word_count_blue.setdefault(word_list[i], 0)\r\n                word_count_blue[word_list[i]] += 1\r\n    elif word_list[0] == \"RED\":\r\n        # Class = red 时同理...\r\n\r\n#统计非重复词\r\nunique_words_blue = list(set(data_blue))\r\nunique_words_red = list(set(data_red))</pre>\n<p>训练过程到这里就结束了，计算机已经知道了各政党演讲的用词习惯。很简单吧？接下来我们就要使用测试数据集来测试准确度了。<strong>这里开始就涉及到朴素贝叶斯的计算了</strong>，可能会稍微复杂一点点。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">import math\r\n#读入测试数据过程略...\r\ntest_data_raw = \"读入的数据\".split('\\n') # 按行分隔\r\ntest_data = []\r\n\r\nfor line_data in test_data_raw:\r\n    if line_data[0] == \"BLUE\":\r\n        content_data = line_data.split(\" \").pop(0)\r\n        test_data.append({\"class\": \"blue\", \"content\": content_data})\r\n    elif line_data[0] == 'RED':\r\n        # ...\r\n\r\nfor line_data in test_data:\r\n    posibility_blue = 0\r\n    for word in line_data[\"content\"]:\r\n        # 计算各单词概率，取对数后相加，使用了拉普拉斯平滑\r\n        if word in word_count_blue:\r\n            posibility_blue += math.log((word_count_blue[word]+1)/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n        else:\r\n            posibility_blue += math.log(1/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n    # 最后加上该分类概率的对数\r\n    posibility_blue += math.log(len(data_blue)/(len(data_blue)+len(data_red)))\r\n\r\n    # 计算 Red 同理...</pre>\n<p>计算完成后，我们就得到每篇演讲稿在各分类下的概率了。之后，简单的比较就能得出推断的分类：如果 \\(P(Red|Article)\\) 大于 \\(P(Blue|Article)\\)，那么这篇演讲稿就更可能是共和党的演讲稿，反之则是民主党的演讲稿。</p>\n<p>很好理解吧？那么这么简单的思路，准确性怎么样呢？对于我们的例子，这是我设置了个别停用词后的结果：</p>\n<pre class=\"EnlighterJSRAW\">+-----+-------+--------------+--------------+-------+-------+\r\n|   ID|  Class|        P(Red)|       P(Blue)|  Guess| Status|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|    1|   Blue|  -23204.68377|  -22998.67066|   Blue|      √|\r\n|    2|   Blue|  -16438.44625|  -16137.48257|   Blue|      √|\r\n|    3|   Blue|  -33468.81214|  -32567.61801|   Blue|      √|\r\n|    4|   Blue|    -8606.2193|   -8601.50426|   Blue|      √|\r\n|    5|   Blue|  -12430.97436|  -11935.70662|   Blue|      √|\r\n|    6|   Blue|  -44033.02883|  -43877.55367|   Blue|      √|\r\n|    7|   Blue|   -16947.2851|  -16758.57542|   Blue|      √|\r\n|    8|   Blue|  -26957.26997|  -26889.62444|   Blue|      √|\r\n|    9|   Blue|  -27503.73985|  -27249.21828|   Blue|      √|\r\n|   10|   Blue|   -20528.4457|   -19991.1248|   Blue|      √|\r\n|   11|   Blue|  -20337.96493|  -19860.12831|   Blue|      √|\r\n|   12|   Blue|  -28409.28489|  -28118.98017|   Blue|      √|\r\n|   13|    Red|  -13756.01015|  -14488.11751|    Red|      √|\r\n|   14|    Red|  -17221.22732|  -17710.15936|    Red|      √|\r\n|   15|    Red|  -17397.45136|  -17899.98659|    Red|      √|\r\n|   16|    Red|  -10724.69095|  -11092.77837|    Red|      √|\r\n|   17|    Red|  -10402.40027|  -10859.48681|    Red|      √|\r\n|   18|    Red|   -9371.53792|    -9669.6769|    Red|      √|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|                                      Total: 18/18, 100.0% |\r\n+-----------------------------------------------------------+</pre>\n<p><strong>100% 的准确率哦！</strong>事实上，对于我们的这个例子，就算不设置停用词，我们仍能达到 100% 的分类准确率。朴素贝叶斯分类的确很 NB 呢。</p>\n<h1>更进一步</h1>\n<p>我们的探索到这里就结束了，但如果你有兴趣，完全可以继续探索下去。我们的例子是一个非常简化的例子，在实际情况中，还有很多问题需要解决。比如，对于中文及类似语言，不存在拉丁语系的天然分词结构，而朴素贝叶斯的文本分类是基于单词的，那么<strong>中文的分词就会是个问题；</strong>再比如，对于朴素贝叶斯分类来说，<strong>词语之间的顺序是不影响分类结果的</strong>，但这就会导致“今天心情很好，但昨天不好”和“昨天心情很好，但今天不好”在朴素贝叶斯看来是一样的，要想获得更好的结果，我们必须<strong>考虑词语的顺序。</strong></p>\n<p>这些问题，今天我们就不再深究了，但你可以自己探索。比如，引入思路同样很简洁的马尔科夫链，我们就可以让计算机学会考虑词语间的顺序，不过那就会是另一个话题了。</p>\n","link":"https://flyhigher.top/develop/1989.html"},{"title":"MDx 中增强页面可访问性的细节","date":"2020-01-25 16:45:04","description":"\n<blockquote><p>这篇文章本来是打算发在 <a href=\"https://mdxblog.flyhigher.top/\">MDx Blog</a> 的，不过写到后来发现这篇文章相对来说还是有价值的，于是就将这篇文章转移到了无垠，MDx Blog 则不再发表这篇文章。</p></blockquote>\n<p>从 MDx 开发之初，增强页面的可访问性就被列为了一个重要目标。从 HTML 语义化，到 ARIA 地标，再到 <code>prefers-reduced-motion</code>，随着浏览器对于增强页面可访问性的支持功能越来越多，MDx 也在不断地更新，让更多的人都能毫无困难地浏览、查看由 MDx 渲染的网页。本文会详细说明一些 MDx 中增强页面可访问性的细节，<strong>如果你希望增强自己开发的网页的可访问性，本文可能会对你有所帮助。</strong></p>\n<h1>基础性增强</h1>\n<p>增强可访问性，最重要也是最基础的一点就是 HTML 语义化。通过使用 HTML 5 语义化标签和 ARIA Role 标签，我们可以很方便地<strong>将整个网页在语义上分为几部分，而这将有效地改善屏幕阅读器对网页的分析质量，使视力障碍用户更好地浏览网页。</strong></p>\n<h2>HTML 语义化</h2>\n<p><strong>HTML 语义化属于增强页面可访问性的基础中的基础。</strong>通过使用语义化的 HTML 标签，我们可以方便地为网页中的各部分标记功能而不影响页面样式。随着符合 HTML 5 的现代化网页成为主流，语义化标签已被很大一部分网站所支持，我也不过多赘述了。就举几个常用的“地标性”标签吧：</p>\n<ul>\n<li>\n<code>header</code> 标签标记页眉，默认样式同 <code>div</code>，不要把它和 <code>head</code> 搞混了</li>\n<li>\n<code>main</code> 标签标记页面的主要内容，默认样式同 <code>div</code>\n</li>\n<li>\n<code>article</code> 标签标记文章（在 HTML 5 中它指任何独立或可复用的文本），默认样式同 <code>div</code>\n</li>\n<li>\n<code>footer</code> 标签标记页脚，默认样式同 <code>div</code>\n</li>\n<li>\n<code>nav</code> 标签标记页面导航栏区域，默认样式同 <code>div</code>\n</li>\n<li>\n<code>aside</code> 标签标记侧栏，默认样式同 <code>div</code>\n</li>\n<li>\n<code>section</code> 标签标记“一组内容”，你可以把它看作是划定网页中一块区域的通用标签，默认样式同 <code>div</code>\n</li>\n</ul>\n<p>只要用这些标签替代 <code>div</code> 而不是无脑使用 <code>div</code> 就能提高页面的可访问性。MDx 使用了这些标签来增强页面的可访问性。</p>\n<h2>下一步，ARIA</h2>\n<p>有的时候，出于一些原因，我们没法使用语义化的 HTML 标签，或者没有合适的语义化标签来标记内容，这时候<strong>我们就需要使用 ARIA (Accessible Rich Internet Applications，可访问的富互联网应用)。</strong>ARIA 的基础用法很简单，只要在相应元素上加上 <code>role</code> 属性指定该元素的功能即可。下面是一个简单的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;div role=\"navigation\"&gt;\r\n  &lt;ul&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page A&lt;/a&gt;&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page B&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page C&lt;/a&gt;&lt;/li&gt;\r\n  &lt;/ul&gt;\r\n&lt;/div&gt;</pre>\n<p>通过 <code>role=\"navigation\"</code>，我们把一个 <code>div</code> 标记为了导航栏区域。实际上，对屏幕阅读器来说，这和 <code>nav</code> 标签在语义上是一致的。上一节中的例子都可以分别用以下 ARIA Role 表示：</p>\n<ul>\n<li><code>role=\"heading\"</code></li>\n<li><code>role=\"main\"</code></li>\n<li><code>role=\"article\"</code></li>\n<li><code>role=\"contentinfo\"</code></li>\n<li><code>role=\"navigation\"</code></li>\n<li><code>role=\"complementary\"</code></li>\n<li><code>role=\"region\"</code></li>\n</ul>\n<p>除此以外，MDx 还使用了 <code>role=\"banner\"</code> 和 <code>role=\"search\"</code> 来分别标记页面中的顶部栏和搜索表单。另外，<strong>有的时候 <code>role</code> 属性还需配合 <code>aria-*</code> 属性一同使用</strong>，具体规则比较复杂，我就不在这里赘述了，具体可参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">WAI-ARIA Roles - MDN</a>。</p>\n<h1>媒体查询来帮忙</h1>\n<p>CSS 的媒体查询其实是一个非常强大的特性，<strong>妥善利用其中的一些特性，我们可以在网页外观上大大增强网页的可访问性。</strong>除了已经烂大街的“对浏览器窗口大小”响应的媒体查询，我会介绍 3 个很少有网站充分利用的媒体查询。</p>\n<h2>print</h2>\n<p><code>print</code> 媒体查询其实已经“历史悠久”了，<strong>只要使用 <code>@media print {...}</code> 就可以创建只在打印页面时生效的样式。</strong>通过这种方式，我们可以让页面在打印时应用一套为打印优化的样式，增强页面在物理纸张上的可访问性。</p>\n<blockquote><p>维基百科是对打印样式做了单独适配的著名例子。</p></blockquote>\n<p><strong>由于在打印的情况下，页面已经离开了“可交互”的范围，还有分页这种在屏幕中无需考虑的问题，要让页面在物理纸张上仍能被轻松地阅读，我们需要做一些特殊的适配。</strong>直接来看一个例子吧。以下是 MDx 针对打印情况进行的一些特殊优化，样式的具体理由已经写在了注释中。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media print {\r\n    /*隐藏不必要的元素*/\r\n    header, .mdx-ad-after-article, .mdx-ad-in-article, .mdx-post-money, .page-footer-nav, .mdx-same-posts, .spanout button, .mdui-drawer, .mdui-overlay, .mdui-menu, .mdx-share-img-dialog, .mdx-share-wechat-dialog {\r\n        display: none!important;\r\n    }\r\n\r\n    /*使用下划线标记链接*/\r\n    article a {\r\n        text-decoration: underline!important;\r\n    }\r\n    /*由于纸张不可交互，在链接后显示链接到的 URL*/\r\n    article a::after {\r\n        content: \"(\" attr(href) \")\";\r\n    }\r\n\r\n    /*强制白底黑字*/\r\n    html &gt; body {\r\n        background-color: white!important;\r\n    }\r\n    article p {\r\n        color: rgba(0,0,0,.8)!important;\r\n    }\r\n\r\n    /*对于纸张上的长文章，衬线字体拥有更好的可读性。以下字体列表来自 fonts.css*/\r\n    article {\r\n        font: 13pt Georgia, \"Nimbus Roman No9 L\", \"Songti SC\", \"Noto Serif CJK SC\", \"Source Han Serif SC\", \"Source Han Serif CN\", STSong, \"AR PL New Sung\", \"AR PL SungtiL GB\", NSimSun, SimSun, \"TW\\-Sung\", \"WenQuanYi Bitmap Song\", \"AR PL UMing CN\", \"AR PL UMing HK\", \"AR PL UMing TW\", \"AR PL UMing TW MBE\", PMingLiU, MingLiU, serif!important;\r\n    }\r\n\r\n    /*除部分元素外，禁止在元素内部分页*/\r\n    * {\r\n        page-break-inside: avoid;\r\n    }\r\n    article p, article a, #comments, article {\r\n        page-break-inside: auto;\r\n    }\r\n}</pre>\n<p>MDx 自 1.9.3 版本起已经包含了对文章页的打印样式优化。可以很容易地看出，优化后的样式在物理纸张上将更容易阅读。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\" alt=\"\" width=\"1345\" height=\"1602\" class=\"aligncenter size-full wp-image-1959\"></a>\n<h2>prefers-color-scheme</h2>\n<p><code>prefers-color-scheme</code> 是最近才被浏览器广泛支持的一个媒体查询，但它的功能却很强大：<strong>响应系统级黑暗模式。</strong>这样，我们可以在开启黑暗模式的系统中让网页具有更好的可读性。不过由于这个媒体查询直到最近才被广泛支持，因此大部分网站对此并没有进行适配。</p>\n<blockquote><p>一些适配这一特性的网站：少数派、微信公众平台（文章页）等。</p></blockquote>\n<p>通过像这样的媒体查询，我们可以在系统启用黑暗模式时让页面实时响应：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    body {\r\n        background-color: #212121;\r\n        color: rgba(255, 255, 255, .7);\r\n    }\r\n}</pre>\n<p><code>prefers-color-scheme</code> 一共有 3 个可能值：<code>no-preference</code>, <code>light</code> 和 <code>dark</code>。你也可以不像上面的例子那样默认使用亮色样式并在黑暗模式下启用黑暗样式，而可以反过来将黑暗样式作为默认，用亮色样式覆盖。在不支持的浏览器上将会显示默认样式（即媒体查询不会生效）。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<h2>prefers-reduced-motion</h2>\n<p>看名字就猜得出，<code>prefers-reduced-motion</code> 是和 <code>prefers-color-scheme</code> 师出同门的媒体查询。因此，和 <code>prefers-color-scheme</code> 一样，它也是在最近才获得了浏览器的广泛支持。它的作用也很强大：<strong>响应系统的“减弱动态效果”模式。</strong>这对某些不喜欢甚至无法接受动画的用户可能很有帮助。要知道，对有些用户来说这甚至是医疗上的必要。使用如下的媒体查询，我们可以在系统启用减弱动态效果模式时让页面实时响应，减弱动画：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-reduced-motion: reduce) {\r\n    /*只是一个示例，实际情况中可以保留一些淡入淡出效果*/\r\n    * {\r\n        transition: all 0s!important;\r\n        transform: none!important;\r\n    }\r\n}</pre>\n<p><code>prefers-reduced-motion</code> 只有 2 个可能值：<code>no-preference</code> 和 <code>reduce</code>，在不支持的浏览器上该媒体查询不会生效。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\" alt=\"\" width=\"792\" height=\"515\" class=\"aligncenter size-full wp-image-1962\"></a>\n<h1>黑暗模式适配</h1>\n<p>黑暗模式可不是简单地切换到黑底白字这么简单。<strong>单纯地使用黑底白字会导致页面元素之间对比度过高，文字刺眼，反而降低了页面的可访问性。</strong>我在下面总结了几条应用在了 MDx 中的黑暗模式优化规则和 Google 推荐的优化规则：</p>\n<p><strong>一是避免黑底白字。</strong>黑底白字看起来真的很难受，事实上，深灰和浅灰是黑暗模式最好的配色。比较下方例子里的两段文本，毫无疑问深灰色背景和浅灰色文字搭配的样式的可读性要比黑底白字高很多。（p.s. 有时候这条规则在白底黑字时也适用）</p>\n<p><strong>二是更改部分元素的亮度和对比度以增强可读性。</strong>你可能已经注意到了，下面优化的例子里标题文字的颜色改变了。很明显，未优化的黑暗模式中标题可读性不如优化的版本。在实际中，我们通常可以通过 CSS 滤镜来实现这一更改。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    h1 {\r\n        /*反相颜色后再将色相旋转 180 度，使亮度反相*/\r\n        filter: invert(1) hue-rotate(180deg);\r\n    }\r\n}</pre>\n<p><strong>三是避免让图片过亮。</strong>未经处理的图片通常会导致过高的对比度，降低可读性。在 MDx 中，我选择降低图片的亮度来避免图片刺眼，而 Google 的建议则是使图片灰度，不过这会影响图片的整体观感。无论是哪一种方案，都可以使用 CSS 滤镜来轻松实现。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    img { \r\n        /*MDx 方案*/\r\n        filter: brightness(.8);\r\n        /*Google 方案*/\r\n        filter: grayscale(.5);\r\n    }\r\n}</pre>\n<div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是未优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是经过优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n</div>\n<h1>其他细节</h1>\n<p>还有一些细节，虽然简单，但不可或缺。我把一部分没有在上文提到的 MDx 中的细节列在了这里。</p>\n<p><strong>一是允许页面缩放。</strong>在开发响应式页面时，很多网站会在页面头部添加这样一个 <code>meta</code>：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"&gt;</pre>\n<p>这样的 <code>meta</code> 设定了页面的宽度，却也固定了页面的缩放比例，用户难以手动放大网页。<strong>这样的设置对一部分视力障碍用户非常不友好</strong>，以至于苹果决定在自家的浏览器上忽略禁止缩放的 <code>meta</code>。按照 Google 的推荐，如果你在 MDx 设置中启用了“允许页面缩放”，那么 MDx 会输出这样的 <code>meta</code> 标签，允许页面进行五倍以内的缩放：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=5\"&gt;</pre>\n<p><strong>尽管很多时候放大页面会导致页面结构被破坏，但这大大增强了页面的可访问性，利大于弊。</strong>因此，在 MDx 中，“允许页面缩放”是默认启用的。</p>\n<p><strong>二是在跨设备阅读时同步阅读记录。</strong>这属于 MDx 的“元老级”功能之一。注意到页面右上角的那个“在其他设备上继续阅读”的按钮了吗？如果你滚动页面后重新点击它，你会发现二维码发生变化了。通过在二维码中记录阅读进度，用户在扫描二维码切换设备阅读时，MDx 在新设备上会自动滚动到和原设备上一致的位置——好吧，目前基于百分比的算法在某些情况下可能不太准，但我已经设计了一个更复杂但更精确的阅读进度记录算法，之后就会更新到 MDx 中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\" alt=\"\" width=\"1000\" height=\"574\" class=\"aligncenter size-full wp-image-1976\"></a>\n<p><strong>三是避免 Web 字体阻塞渲染。</strong>如果你在页面中使用了 Web 字体，在字体加载完成之前，浏览器可能不会渲染任何文本，这就导致用户可能需要等待一段时间才能开始浏览网页。Google 推荐使用 <code>font-display: swap;</code> 来向浏览器指定网页的 Web 字体渲染策略。这一规则会提供一个比较短的等待周期，如果在这段时间内 Web 字体没有完成加载，那么浏览器会以 fallback 字体渲染文本。任意时刻一旦 Web 字体完成渲染，浏览器就会使用 Web 字体重新渲染文本。这在大多数情况下都能满足可访问性的需求。</p>\n<p><strong>四是确保 html 元素具有合适的 <code>lang</code> 属性。</strong>这一属性声明了页面的主要语言，浏览器可以据此调整渲染策略，或者触发自动翻译；屏幕阅读器也能更好地阅读网页。</p>\n<p><strong>五是确保页面主要内容在丢失/禁用了 Javascript 甚至 CSS 的情况下仍然可用。</strong>作为一个以内容为主的网站，MDx 在禁用了 Javascript 的情况下页面主要内容仍然可用。这不只是为了 SEO，更是为了保证页面的可访问性。的确，目前的情况下，如果开启了 Lazyload，MDx 在禁用 Javascript 的情况下图片的确无法显示，但我会在后续版本中尽可能的优化这一问题。</p>\n<h1>附录：媒体查询开发技巧</h1>\n<p>有的时候，光有 CSS 响应媒体查询还不够，我们可能需要在 Javascript 中实时响应媒体查询。用如下代码就可以很简单地响应媒体查询：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">let mql = window.matchMedia(\"(prefers-reduced-motion: reduce)\");\r\nmql.addListener(handleMediaChange);\r\n\r\n//在添加监听后先调用一次，获得当前查询结果\r\nhandleMediaChange(mql);\r\n\r\nfunction handleMediaChange(mql){\r\n    if(mql.matches){\r\n        //查询匹配\r\n    }else{\r\n        //查询不匹配\r\n    }\r\n}</pre>\n<p>在开发上述媒体查询的过程中，我们需要频繁地切换系统的相应模式或者调出打印窗口。<strong>实际上，Chrome 提供了更简单的调试方法：</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1946\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\" alt=\"\" width=\"723\" height=\"681\"></a>\n<p>只要在这里更改模式，相关媒体查询就能实时生效。这不会影响其他标签页，在关闭开发者工具之后也会自动恢复系统设置。</p>\n","link":"https://flyhigher.top/develop/1912.html"},{"title":"MDx Blog 现已随 MDx 1.9.5 发布","date":"2020-01-22 17:54:11","description":"<p>随着 MDx 发布 1.9.5 更新，<a href=\"https://mdxblog.flyhigher.top/\" rel=\"noopener noreferrer\" target=\"_blank\">MDx Blog</a> 现已建立。我将会在 MDx Blog 中分享一些开发故事并发布 MDx 更新日志。</p>","link":"https://flyhigher.top/diary/1905.html"},{"title":"GitHub 2019 统计无垠版","date":"2020-01-12 13:02:00","description":"\n<h1>缘起</h1>\n<p>2019 年底，我突发奇想想要自己统计一番 GitHub 上存储库的一些信息。尽管 GitHub 有自己的<a href=\"https://octoverse.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">年度统计</a>，我还是想试着自己爬取一下，说不定能挖出什么有意思的信息，何况这是我第一次有机会处理比较大量的数据，也算是一种学习的过程吧。于是花了一下午写了个简单的爬虫（时间都花在增加 Rate Limit 上了...），然后扔在了两台服务器上开始跑（GitHub  API 真是好文明）。</p>\n<p>从 2019.11.21 3 时到 2020.1.12 24 时的 52 天 21 小时内，我的爬虫一共爬取了<strong>与 2,024,705 个用户有关<sup>*</sup>的 14,651,923 个公共存储库的基础信息</strong>，平均每秒爬取 3.2 个存储库。据 GitHub 的官方数据计算，我爬取了大约 15% 的存储库信息，但由于封禁库和私有库的数量未知，我暂时无法确定我爬取的存储库占公共库的比例。同时由于存储库数量较多，基本可以认为爬取到的样本在时间尺度上已经足够随机，可以通过统计得出一般结论。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\" alt=\"\" width=\"700\" height=\"606\" class=\"aligncenter size-full wp-image-1892\"></a>\n<p>爬到自己了，合影.jpg</p>\n<p>那么下面就来看看统计出来的一些结果吧。爬虫的技术细节和数据集下载放在文末。</p>\n<p>* 指这些用户拥有至少一个库</p>\n<h1>统计信息</h1>\n<p><strong>以下统计结果均基于已放于文末的数据集。</strong>由于爬虫爬取的时间跨度长，加上我并没有完整爬取 GitHub 所有存储库，因此我<strong>不能保证以下统计结果符合真实情况</strong>，各位可以下载数据集或自行爬取进行验证。</p>\n<h2>一些数据</h2>\n<div>\n<div>\n<div>\n<span>3,120,930</span><br>总爬取用户数</div>\n<div>\n<span>44.7%</span><br>的存储库创建<br>自 Fork</div>\n<div>\n<span>6.59%</span><br>的账户被删除或<br>封禁<sup>1</sup>\n</div>\n<div>\n<span>23,913</span><br>单用户拥有最大<br>库数量<sup>2</sup>\n</div>\n</div>\n</div>\n<p><sup>1</sup> 基于用户 ID 规律合理推断<br><sup>2</sup> 统计范围仅限于当前数据集</p>\n<p>比较出乎我意料的是创建自 Fork 的存储库的占比。我预估这样的存储库占比不会太低，但没有想到能接近一半。此外单用户拥有最大库数量也大大超出了我的预期，<a href=\"https://github.com/pombredanne\" rel=\"noopener noreferrer\" target=\"_blank\">pombredanne</a> 这个用户名下拥有将近 24k 的存储库，不过绝大多数都是 Fork 来的，在情理之中。此外<strong>这个数据集中</strong>拥有最多存储库的账户其实是一个组织 <a href=\"https://github.com/gitpan\" rel=\"noopener noreferrer\" target=\"_blank\">gitpan</a>，这个组织拥有 36,377 个存储库。</p>\n<h2>语言</h2>\n<p><canvas></canvas><br>\n首先必须要说明的是，在这个榜单中我<strong>排除了 HTML 和 CSS</strong>，因为在严格意义上它们不属于“编程语言”。如果把它们计算进来的话，分别有 640,368 个和 361,425 个存储库的主要语言分别是 HTML 和 CSS，这样在这份榜单中它们可以排到第 6 和 第 10 名。JavaScript 毫无疑问获得第一，第二名 Python 的热度则和 JavaScript 相差将近一半。<strong>此外还有 2,448,486 个存储库未能识别出语言，占比 16.7%。</strong>在上面的榜单之外，与机器学习和数据科学相关的语言还有 Jupyter Notebook 排名第 13，R 排名 20，Julia 排名 43。</p>\n<p>说实话这份排名和 GitHub 官方的排名<strong>差别很大</strong>，除了前三名，后面的基本都不太一样。我的排名统计结果完全基于 GitHub 对于存储库的主要语言识别，加上我的存储库数据不完整，和官方的数据不同是很正常的，可以做一个参考，但大概率还是官方排名更加准确。</p>\n<h2>许可证</h2>\n<p><canvas></canvas></p>\n<p>自 GitHub 推出许可证功能以来，拥有许可证的存储库比例升升降降，却始终没有超过一半。<strong>选择一个合适的许可证对项目的良好发展真的很有帮助</strong>，要了解如何选择合适的许可证，请参阅<a href=\"https://www.runoob.com/w3cnote/open-source-license.html\" rel=\"noopener noreferrer\" target=\"_blank\">这篇文章</a>。</p>\n<p><canvas></canvas></p>\n<p>对于拥有许可证的存储库，MIT<del> 麻省理工许可证 </del>总是占比最大的；第二则是 Apache-2.0 许可证。此外，WTFPL 许可证也挤入了前 15 名。</p>\n<h2>星标</h2>\n<p><canvas></canvas><br>\nStar 数量毫无疑问是一个存储库受欢迎程度的体现，而 Star 数高的项目基本上大家都了解过。<strong>截至爬取结束时间</strong>，GitHub 中 Star 数最多的库是 <a href=\"https://github.com/freeCodeCamp/freeCodeCamp\" rel=\"noopener noreferrer\" target=\"_blank\">freeCodeCamp</a> <del>非常完美的驼峰命名法</del>，其次则是著名项目 <a href=\"https://github.com/996icu/996.ICU\" rel=\"noopener noreferrer\" target=\"_blank\">996.ICU</a>。<a href=\"https://github.com/vuejs/vue\" rel=\"noopener noreferrer\" target=\"_blank\">Vue</a> 现在的 Star 数已经稳压 <a href=\"https://github.com/facebook/react\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> 一头，Vue YES! 此外 <a href=\"https://github.com/sindresorhus/awesome\" rel=\"noopener noreferrer\" target=\"_blank\">awesome</a> 也挤进第七名。<br><canvas></canvas><br>\n由于 Star 需要时间积累，新项目的 Star 数量很可能是比不过老项目的，这就会导致有实力的新项目无法出现在榜单中。因此我还统计了日均 Star 数，试图通过日均 Star 数来反映项目受欢迎的程度。<strong>由于正热门的项目会比老牌热门项目有优势，这一项的统计范围是 2020-01-01 之前的所有存储库。</strong>996.ICU 和 freeCodeCamp 再次出现在前 10 名，而最近的热门项目 <a href=\"https://github.com/wenyan-lang/wenyan\" rel=\"noopener noreferrer\" target=\"_blank\">wenyan</a> 则飙升至第 2 名。此外还有 <a href=\"https://github.com/menzi11/BullshitGenerator\" rel=\"noopener noreferrer\" target=\"_blank\">BullshitGenerator</a>，即最近热门的“狗屁不通文章生成器”和 <a href=\"https://github.com/evil-huawei/evil-huawei\" rel=\"noopener noreferrer\" target=\"_blank\">evil-huawei</a> 分列第 3 和第 5 名。<br><canvas></canvas><br>\n说实话这个曲线<strong>比我预估的陡多了。</strong>你可能已经注意到了，这个图表的横轴不是均匀缩放的，实际上曲线要比看起来陡很多。同时受爬取方式的影响，GitHub 中 Star 数较少的存储库数量远比我爬取到的多。也就是说，<strong>实际情况下曲线远比这个图表上的陡。</strong>拿点 Star 不容易啊。</p>\n<h2>名称</h2>\n<p><canvas></canvas><br>\n终于知道了原来存储库的名称是有长度限制的...尽管最长有 100 位，<strong>大部分人还是喜欢 8 位长的存储库名。</strong>此外 1 位长的名称也比我预估的要多一些。举几个存储库名称长度为 100 的例子吧。</p>\n<ul>\n<li>testing-something-elsetesting-something-elsetesting-something-elsetesting-something-elsetesting-some</li>\n<li>acts_as_validated_config_so_app_will_not_run_in_random_situation_and_qa_gays_will_not_cry_to_you_whe</li>\n<li>............................................________-....................................-.---......</li>\n<li>----------------------------------------------------------------------------------------------------</li>\n<li>nyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyan</li>\n</ul>\n<p>...创造力有够丰富的。</p>\n<p><canvas></canvas></p>\n<p>最近 GitHub 上有一种奇怪的风气，那就是建立 Awesome 合集<del>骗 Star</del>。看起来 Awesome 存储库满地都是，甚至还出现了关于 Awesome 的 Awesome 合集这种迷惑行为。于是我统计了一下，<del>还好，</del>占比<del>才</del> 0.5% 不到<del>，Awesomer 们任重而道远呐</del>。</p>\n<p><canvas></canvas></p>\n<p>尽管要在 github.io 上托管网站，存储库不一定要以 .github.io 结尾，但我还是统计了一下。拥有这类存储库的用户比我预想的要少一些，看来还有很多人没有完全发挥 GitHub 的完整实力啊<del>（比如我 Doge）</del>。同时<strong>这类存储库在所有存储库中占比 1.12%</strong>，看起来不多<del>，不过至少比 Awesome 多</del>。<br><canvas></canvas><br>\n看得出来 GitHub 对于用户名长度的限制是 1-40 位。用户名最短的 27 位占据了 <code>A-Z</code> 外加 <code>-</code> 的所有可能，而用户名最长的则是一个组织 <a href=\"https://github.com/UOIT-RESEARCH-database-information-group\" rel=\"noopener noreferrer\" target=\"_blank\">UOIT-RESEARCH-database-information-group</a>。不知道是巧合还是某种规律，<strong>最受欢迎的用户名长度和存储库名称长度一样，都是 8</strong>，有点意思。</p>\n<h2>创建时间</h2>\n<p><canvas></canvas><br>\n由于我并没有完整爬取所有存储库，我只能以相对值来统计每月新增存储库数量的变化趋势。<strong>在这个图表中，我将 2017-09 的数据设为了 100%。</strong>你一定一眼就能注意到 2017 年 6,7,8 月的“一柱擎天”。<del datetime=\"2020-02-05T09:18:30+00:00\">我第一次看到这个数据的时候的确愣了一下，不过就着这条新闻看就能明白为什么了：<strong>2017 年 6 月微软收购 GitHub。</strong></del></p>\n<blockquote><p>重新确认了一下，微软收购 GitHub 比这个高峰晚了一年，目前我对这个高峰没有什么很好的解释，如果你有什么思路的话欢迎评论。</p></blockquote>\n<p><strong>需要注意的是这张图表中我排除了 Fork 存储库</strong>，因为 Fork 存储库在 API 中的创建时间是原始存储库的时间，会影响整体趋势。此外，GitHub 中还有一个创建于 2007 年 10 月 29 日的存储库，那就是 <code>id: 1</code> 的...</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"mojombo\" data-mdxgithubp=\"grit\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/mojombo/grit\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>而它的创建者正是 GitHub 的创始人之一 Tom Preston-Werner。</p>\n<h1>一些有趣的结果</h1>\n<p>当初打算自己爬的目的之一就是想看看能不能挖出什么有意思的信息，结果真的有一些不挖不知道的信息。</p>\n<h2>奇怪的存储库</h2>\n<p>在爬取到的所有存储库中，<strong>有 3 个存储库是“无主”的</strong>，即它们的 owner 属性为空。这三个存储库的基本信息如下。</p>\n<div class=\"mdui-table-fluid mdui-table-hoverable\"><table class=\"mdui-table\">\n<thead><tr>\n<th>ID</th>\n<th>名称</th>\n<th>Forked</th>\n<th>Star</th>\n<th>语言</th>\n<th>许可证</th>\n<th>创建于</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>72385291</td>\n<td>vscode-redprl</td>\n<td>否</td>\n<td>10</td>\n<td>TypeScript</td>\n<td>apache-2.0</td>\n<td>2016-10-31 08:50:01</td>\n</tr>\n<tr>\n<td>181218346</td>\n<td>electron-sys</td>\n<td>否</td>\n<td>10</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-14 03:20:56</td>\n</tr>\n<tr>\n<td>181391880</td>\n<td>node-sys</td>\n<td>否</td>\n<td>6</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-15 09:33:08</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong>更奇怪的是这三个存储库“无主”的情况还不一样。</strong>第一个存储库可以通过 <code>/repositories</code> 这个 GitHub API 找到， <a href=\"https://api.github.com/repositories?since=72385290\" target=\"_blank\" rel=\"noopener noreferrer\">这个链接</a>中的第一个存储库就是它；而其余两个存储库甚至无法在 <code>/repositories</code> API 中找到。不过就算能在 API 中找到第一个存储库，它的 <code>html_url</code>，即 <code>https://github.com//vscode-redprl</code> 仍然是不可访问的。这可能是 GitHub 早期的一个 Bug 导致的，不过我仍然对爬虫是如何找到这三个存储库的以及这些 Stars 是哪里来的感到好奇。</p>\n<h2>奇怪的用户名</h2>\n<p>在爬虫爬了一段时间以后，API 中突然开始出现大量的以 fdp 开头的 18 位乱码作为用户名的用户。这些用户拥有的存储库和 starred 的存储库都为 0，而他们的 <code>html_url</code> 为 404。以下是几个例子。</p>\n<ul>\n<li>fdpEpolGCEdQX4ZlRJ</li>\n<li>fdp8XaVrdtmDZnO5pR</li>\n<li>fdp8XRAGnwAOkTr2Ya</li>\n</ul>\n<p>由于我的爬虫并没有超过 Rate Limit，所以我排除了这是污染数据的可能。我怀疑这可能是某种 Bot 账户，于是一边更新爬虫过滤掉了这些用户，一边给 GitHub 支持发邮件问了具体情况。过了两天 GitHub 回复我说这些是<strong>被自动判为可疑进而被封禁的用户</strong>（原话是 they have been flagged by our automated measures for detecting suspicious behavior）。<del>想到我正在疯狂爬取 GitHub，突然害怕.webp</del></p>\n<p>行吧。</p>\n<h1>技术细节</h1>\n<p>爬虫使用 Python3 编写，数据库使用 MySQL。爬虫共使用了 4 个 API Token，在两台服务器上分布式爬取。爬取思路为：</p>\n<ol>\n<li>通过 <code>/users</code> API 遍历用户，每个请求最多获取 30 个用户信息</li>\n<li>循环 30 个用户，分别获取 <code>/users/&lt;user_name&gt;/starred</code> 和 <code>/users/&lt;user_name&gt;/repos</code> API 中的存储库信息，每个请求最多获取 100 个存储库信息，超过 100 个的分页获取</li>\n<li>提取存储库信息，插入数据库。对于已存在的存储库，更新数据</li>\n<li>获取下 30 个用户信息</li>\n</ol>\n<p>由于爬取过程中我多次调整了爬虫逻辑，爬虫爬取到的用户 ID 区间并非连续的，具体区间为1-839586, 14800001-14885493 及 28965251-31161101。</p>\n<h1>免责声明</h1>\n<p>本站会尽可能地提供准确信息，但本站不对此文章中信息的准确性和即时性及带来的任何影响负责。</p>\n<p>本站不代表 GitHub 官方，本文仅供学习之用，请不要将本文内容直接用于任何商业项目中。</p>\n<h1>数据集下载</h1>\n<p>导出的 SQL 文件大约为 1.38GB，全部放在了 GitHub 上（在危险的边缘试探.webp</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"github-analysis-2019\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/github-analysis-2019\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>此外我也提供了 MEGA 下载，链接<a href=\"https://mega.nz/#F!juxm3A6T!7Vwpzi82W1OFrqTLu1A1pQ\">在这里</a>。</p>\n","link":"https://flyhigher.top/develop/1564.html"},{"title":"Milkice 跨年红包解谜 Writeup 及无垠跨年红包解谜答案","date":"2020-01-02 04:29:19","description":"\n<blockquote><p><del>又到了水文章的时间呢</del></p></blockquote>\n<p>先说明一下，这篇文章原本不是在计划中的，而原来说好的「在路上的两篇」文章<del>绝对不会咕</del>。我自己的红包答案本来打算直接塞在年度总结里的，结果发现稍微有些长，再加上我还花了一些时间解了<a href=\"https://milkice.me/\">奶冰</a>的红包解谜游戏，就打算把两个解谜过程放在一起单独写一篇文章。<del>真是个水文章的好理由</del>（被打死</p>\n<h1>奶<del> 子 </del>冰的红包</h1>\n<p>奶冰的红包题目比我的难多了，所以让我们先从难的开始吧。首先看一下<a href=\"https://milkice.me/2019/12/31/2019-summary/\">题目</a>：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1524\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\" alt=\"\" width=\"746\" height=\"410\"></a>\n<p>入口是 <code>happy.2020.milkice.me</code>，扔到浏览器里面表示找不到 IP，那么大概率就是 DNS 的 TXT 记录了，查一下得到 <code>nb2hi4dthixs63ljnrvwsy3ffzwwkl3tivrvezluomxxg5dsmvqw2ltqmnqxa3th</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1525\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\" alt=\"\" width=\"896\" height=\"278\"></a>\n<p>第一眼没看出来是什么编码，直觉是 BaseXX 系列的编码，加上提示“不只有 Base64”，可以推断出是 Base32，转大写解码得到 <code>https://milkice.me/sEcRets/stream.pcapng</code>。是个 URL，下载得到一个 Wireshark 文件，打开一看是和某 USB 设备的通讯抓包。<del>不会做，不做了。</del></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1526\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\" alt=\"\" width=\"1500\" height=\"813\"></a>\n<p>奶冰提示我“Google 上搜得到”，结合第二条提示搜索“wacom pcapng”找到了<a href=\"https://blogs.tunelko.com/2017/02/05/bitsctf-tom-and-jerry-50-points/\">这篇文章</a>（<del>这™就是答案啊</del>）。看起来是一样的套路，即通过解析数据得到数位板上画的内容，于是按文章的思路筛选出数位板发给主机的数据，导出，然后再用 tshark 导出文本数据。本来我想直接用文章中的 POC 的，结果折腾半天因为源的蜜汁原因库没装上，于是按文章中给出的数据结构自己写了段代码，分别导出 X、Y 轴数据扔进 Excel 画散点图。（<del>别问我为什么用 Excel，因为我手边没有更好的工具了</del>）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1528\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\" alt=\"\" width=\"1280\" height=\"530\"></a>\n<p><span>翻车现场之一</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1539\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\" alt=\"\" width=\"1000\" height=\"286\"></a>\n<p><span>懵逼奶冰.webp</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1533\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\" alt=\"\" width=\"1500\" height=\"462\"></a>\n<p>看得出有手写文字，不过是上下颠倒的，翻转图片得 <code>https://milkice.me/2020/uso.zip</code>。是个 zip，下载打开一看，有密码。<del>不会解，不做了。</del> 第一反应是暴力解密码，但是暴力跑了 15 分钟还是没有跑出来。暴力太不优雅了，肯定不是正确思路，但奶冰什么都不肯说了。不过在这时我终于发现第一个红包口令码就藏在压缩包的注释中，Get。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1544\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\" alt=\"\" width=\"806\" height=\"593\"></a>\n<p>然而题还没解完，回去看提示，看到提供了 osu 谱面下载，于是打算不管怎么样先下载来看看。然而 osu 谱面下载要登录，只好又花了几分钟找到第三方站点，成功下载。这时候可以注意到 uso.zip 里有个同名文件（432314 Mike Greene - Bill Nye the Science Guy Theme Song (Chinese Intro).osz），可以联想到是明文攻击。好吧，上 ARCHPR，十秒解出。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1530\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\" alt=\"\" width=\"462\" height=\"643\"></a>\n<p><span>现场还原.jpg</span></p>\n<p>.osz 文件并不是明文，猜测是压缩包（和 .pptx 一个思路嘛），于是改后缀 .zip 顺利打开。然后红包口令码就藏在奶冰的 .osu 文件中了，由提示可知是明文，打开即可得到。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1542\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\" alt=\"\" width=\"457\" height=\"255\"></a>\n<h1>我的红包</h1>\n<p>相比起来<a href=\"https://flyhigher.top/diary/1464.html\">我的题目</a>就简单很多了嘛...三天时间一共发出了 25 个红包，包括一位重复领取的🌚，比前几年还是多了一些的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\" alt=\"\" width=\"500\" height=\"306\" class=\"aligncenter size-full wp-image-1554\"></a>\n<p><span>这位同学以后请不要多次领取🌚</span></p>\n<p>那么来看看答案吧。</p>\n<h2>第一阶段</h2>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>首先观察字符串，可以发现 <code>.</code> <code>/</code> <code>_</code> 等一些 ASCII 字符原样留在了字符串中，而其他字符被由 <code>=</code> 和十六进制构成的某种编码所替代。如果你正好有所了解，你应该能认出这是 Quoted-printable 编码，这是一种常用于邮件中的编码，可以用<a href=\"https://mothereff.in/quoted-printable\">这个页面</a>解码。如果你不了解，你也应该可以发现这种编码和 URL 编码非常相似。如果你把 <code>=</code> 替换为 <code>%</code>，那么你就可以用各种方法顺利地把它按 URL 编码来进行解码，最后可以得到 <code>αхtоn.іm/соdе_оf_2020_⒈mρз</code>。这个字符串里大部分字符都不是 ASCII 字符，只是长得像而已。根据第一个提示“全是 ASCII 字符”，按样子把字符串用 ASCII 字符抄一遍，可以得到最终 URL 为 <code>axton.im/code_of_2020_1.mp3</code>。</p>\n<h2>第二阶段</h2>\n<p>下载音频，可以听出音频是经过某种处理的白噪音。白噪音的特点是各频段的功率都均匀分布，在白噪音上做文章，很容易就可以联想到线索藏在频谱中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1534\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\" alt=\"\" width=\"1200\" height=\"719\"></a>\n<p>频谱被处理成了 24x3 的网格，结合第二条提示“24x3，横向读取”可以推断出是将频谱当作二进制读取，得到 <code>01111001 01110010 01100011 00101110 01101101 01100101 00101111 00110010 00110000</code>，转为 ASCII 字符可得 <code>yrc.me/20</code>。</p>\n<h2>第三阶段</h2>\n<p>打开上一步得到的页面，提示要求输入十位数密码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1536\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\" alt=\"\" width=\"663\" height=\"460\"></a>\n<p>如果你在上一步注意到了这个音频文件奇怪的属性，你可以反应过来这里的密码就是 <code>2000202020</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1537\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\" alt=\"\" width=\"421\" height=\"651\"></a>\n<p>如果你没有注意到，查看页面代码可以看到一条注释 <code>&lt;!-- Tips: the attribute of the audio --&gt;</code> 将你引导向音频文件的属性。输入密码，解锁即可进入下一步。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1535\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\" alt=\"\" width=\"397\" height=\"223\"></a>\n<h2>第四阶段</h2>\n<p>可以看到是一张图片，内容为“<del>.JPG</del>”和“.ZIP”。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-1532\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n<p>和去年一样的套路，下载图片，将后缀名改为 .zip 然后打开，可以看到 README.txt。</p>\n<h2>最后一步</h2>\n<p>查看 README.txt 的内容，可以了解到需要去 🤔.axton.cc 获取红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1538\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\" alt=\"\" width=\"1131\" height=\"278\"></a>\n<p>扔到浏览器里会出现奶冰同款找不到 IP，于是可以联想到 TXT 记录。唯一的问题是 🤔 这个 Emoji 需要如何处理。域名使用 Punycode 将 Unicode 字符转换为 ASCII 字符，特点是以 <code>xn--</code> 开头。如果你把上面这个域名扔进浏览器，你会发现它变成了 <code>xn--wp9h.axton.cc</code>。然后查询 TXT 记录，即可得到红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1527\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\" alt=\"\" width=\"804\" height=\"557\"></a>\n","link":"https://flyhigher.top/develop/1519.html"},{"title":"无垠 2019 年度总结","date":"2019-12-29 12:25:52","description":"\n<p>又是时间飞快的一年...写 2018 总结的情景似乎还在眼前，转眼居然已经到 2019 年末了。</p>\n<p>2019 年，发生了太多事情，包括真的转折了人生的高考，这也导致我博客更新的不多（难以置信居然才更了两篇...），不过两篇技术性文章已经在路上了，可以期待一下。</p>\n<p>2019 年我也学了不少东西（单指技术方面），比如终于认真学了 Vue（但是还要练手）。书买了一大堆，看完的倒是没几本orz</p>\n<p>呼，好吧，是时候回顾一下充满坎坷的这一年了。2019 年还剩下最后两天，希望 2020 年，我能做得更好。</p>\n<h1>一些数据</h1>\n<p>照惯例先来看看一些数据吧。今年是统计系统完整统计了的第二年，终于可以和去年的数据比较一下了。以下数据的统计范围是 2019年1月1日0时至 2019年12月29日20时。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 26,901 (<span>+4%</span>)，年 PV 76,583 (<span>+3%</span>)，日均 UV 73.7，平均停留时间 5分13秒 (<span>-13.8%</span>)，平均跳出率 53% (<span>+20.5%</span>)。一年有效文章数 2 (<span>-50%</span>)，新增评论 439 条。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\" alt=\"\" width=\"1000\" height=\"1143\" class=\"aligncenter size-full wp-image-1511\"></a>\n<p>有趣的是今年文章数腰斩，访问数反而小有提升。<del>如果我哪天不更新了，访问数是不是可以无限大呢？</del></p>\n<p>今年博客最大的改动就是把整体风格切换到了 Material Design 2（当然这是 <a href=\"https://flyhigher.top/develop/788.html\">MDx</a> 中的可选功能，给自己打个广告2333），此外还有比较失败的 WebP 改造计划，因为和缓存冲突已经回滚了。<a href=\"https://flyhigher.top/develop/1245.html\">ABS 系统</a>进展不大，主要是真的没有太多时间，还是要再学习一个。</p>\n<h2>个人主页</h2>\n<p>虽然个人主页的 TODO List 列了老长，但今年完全没有更新，也没有推广，从今年 8 月底开始还莫名被某墙认证了，直到 11 月底才恢复，于是今年总访问量比去年少了很多，</p>\n<p>有多少呢？这么少：总 UV 2,141 (<span>-65.9%</span>)，总 PV 2,744 (<span>-66.6%</span>)，日均 UV 6 (<span>-65.9%</span>)，平均停留时间 62秒 (<span>+19.2%</span>)。主要来源是知乎和 V2EX，还有一些甚至是从微信来的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\" alt=\"\" width=\"1000\" height=\"1103\" class=\"aligncenter size-full wp-image-1512\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 8 次，新增 171 commits，2 种语言的翻译，Star 数增加了 175，现有 408。感谢所有人的支持，尤其是 <a href=\"https://github.com/Sn0bzy\" rel=\"noopener noreferrer\" target=\"_blank\">Hasan CAN</a>, <a href=\"https://github.com/yechs\" rel=\"noopener noreferrer\" target=\"_blank\">Ye Shu</a>, <a href=\"https://github.com/StarryLeo\" rel=\"noopener noreferrer\" target=\"_blank\">StarryLeo</a>, <a href=\"https://github.com/DCTewi\" rel=\"noopener noreferrer\" target=\"_blank\">冻葱Tewi</a>, <a href=\"https://github.com/syfxlin\" rel=\"noopener noreferrer\" target=\"_blank\">Otstar Lin</a> 等为 MDx 做出了不小贡献的你们。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：<a href=\"https://flyhigher.top/photograph/1309.html\">上手</a> DJI OSMO Pocket</li>\n<li>四月：最后一次参加浙江省普通高中学业水平考试</li>\n<li>五月：MDx 喜提 300 Stars</li>\n<li>六月：高考 <del>炸了，差亿点点上浙大</del>\n</li>\n<li>六月：入手了 Oneplus 7 Pro</li>\n<li>六月：和同学一起去成都重庆旅行</li>\n<li>六月：第一次近距离感受到地震</li>\n<li>六月：<a href=\"https://flyhigher.top/diary/1411.html\">入手</a>了一台雷蛇灵刃 15，目前是主力机</li>\n<li>七月：参与组织 THE Hack 2019 活动</li>\n<li>七月：面基了 <a href=\"https://itroy.cc/\" rel=\"noopener noreferrer\" target=\"_blank\">Tory</a>, Bie Shi 和 <a href=\"https://oxz.me/\" rel=\"noopener noreferrer\" target=\"_blank\">FHYunCai</a>\n</li>\n<li>八月：一个人去厦门武汉转了一圈，拍了自己的第一个 Vlog</li>\n<li>八月：入手了一个 Kindle Paperwhite 4，没有泡面可以压，于是用来看英文小说了</li>\n<li>八月：加入 TEDxNingbo 志愿者团队</li>\n<li>八月：和 Ralph 面基</li>\n<li>八月：入手了一个 Yubikey</li>\n<li>九月：人生第一次参加雅思考试 <del>7分，蛮开心的</del>\n</li>\n<li>十月：入手了一个 Samsung Galaxy Watch Active 2 <del>觉得不值</del>\n</li>\n<li>十一月：MDx 达到 400 Stars</li>\n<li>十一月：为 TEDxNingbo 设计开发的 H5 上线</li>\n<li>十一月：入手了第一台胶片相机，试图入坑胶片摄影</li>\n<li>十一月：参加 TEDxNingbo 2019 大会</li>\n<li>十二月：<del>我 Cytus II 入门了</del>\n</li>\n</ul>\n<h1>跨年红包</h1>\n<p>这算「传统习俗」了。和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2020年1月2日。</p>\n<p>今年的解谜旅程，从下面这个字符串开始。</p>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>由于今年的题目比以前稍微难了一些，所以今年的红包金额还是比较大的，而且不限量，尽你所能试一试吧。</p>\n<p>一点你可能用得上的提示：URL 里全是 ASCII 字符 / 24x3，横向读取。</p>\n<p><a href=\"https://flyhigher.top/develop/1519.html\">答案</a>已公布。</p>\n<h1>跨年海报</h1>\n<p>这算是另一个「传统习俗」（笑）。因为我有做跨年海报的习惯，所以以下就是今年份的海报啦。</p>\n<p>用了 C4D+PS，还有我的一整个下午。</p>\n<p>提前祝各位新年快乐！</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter wp-image-1467 size-large\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n","link":"https://flyhigher.top/diary/1464.html"}]