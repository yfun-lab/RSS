[{"title":"天天对着屏幕的你，应该知道这 7 个「护眼」的秘密","date":"2022-11-03 03:30:11","description":"工作之余不要忘记自己的身心健康。<p>[......]</p>\n<a href=\"https://sspai.com/post/76517\" target=\"_blank\">查看全文</a><p>本文为付费栏目文章，出自<a href=\"https://sspai.com/series/284\" target=\"_blank\">《显示器选购及使用指南》</a>，订阅后可阅读全文。</p>\n","link":"https://sspai.com/post/76517"},{"title":"如何评价《明日方舟》新活动叙拉古人？","date":"2022-11-03 02:33:58","description":"\n<p data-pid=\"BN432FoZ\">讲一个暂时没人提，但是<b>作为电影爱好者很喜爱的对上电波的彩蛋</b>：</p>\n<p data-pid=\"lAkMy3GU\">本次Side Story【叙拉古人】里，引入了每天更新的总共五场剧目，除了第一天的《德克萨斯之死》映射了剧情里面的德克萨斯家族兴衰史，其实另外四部剧目也<b>同样有现实世界的对应致敬的电影</b>，它们个个都是领域内的经典之作，<b>四场剧目的海报也有对应的致敬成分</b>，除了在本次剧情里明显致敬到的<b>《教父》三部曲</b>，这几部电影我本人同样十分喜爱，也在此推荐给各位：</p>\n<h2>《两把旧刺剑》对应电影：《两杆大烟枪》</h2>\n<p data-pid=\"4awKbtdZ\">1998年英国导演盖里奇的电影，豆瓣评分9.1，IMDB评分8.2</p>\n<p><img src=\"https://picx1.zhimg.com/v2-f12c4beb8467537c6462e59464ad3419_720w.jpg?source=b1748391?rss\" data-rawwidth=\"2340\" data-rawheight=\"1080\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-f12c4beb8467537c6462e59464ad3419\" data-watermark-src=\"v2-8241858ee37de1872f78cd34fb5f3228\" data-private-watermark-src=\"v2-824a2af6d939ba0f3fea55a7d80b1d06\"></p>\n<p><br></p>\n<p><img src=\"https://picx1.zhimg.com/v2-616464893da764ade048fe0843d840fa_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1000\" data-rawheight=\"1500\" data-size=\"small\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-616464893da764ade048fe0843d840fa\" data-watermark-src=\"v2-2910746046dd2bc6d8ebb6315c5055e8\" data-private-watermark-src=\"v2-294840ec205ce6b5a6d169a9e8d4fe20\"></p>\n<blockquote data-pid=\"_35IbeL9\">艾迪（尼克·莫伦）思维敏捷，是个玩牌高手。在三个好友的支持下，艾迪携巨资参加了黑社会的高额赌局，不想落入圈套，欠下50万的赌债。为了还清赌债，艾迪和朋友们绞尽脑汁，最终算计到一群毒贩身上，并为打劫购买了两杆老式烟枪。<br>不想这群不安分的毒贩，正惦念着他们毒品供应商的钱，并在同一天实施了打劫。在毒贩们费尽周折，把毒品供应商熨的整整齐齐的钱款拿到手后，艾迪他们幸运的坐享其成。可是他们不知道，这看似简单的抢劫案背后，更有厉害的角色参与其中。他们手里的两杆破烟枪也隐藏着不少故事。<br>在无知与莽撞中置身漩涡的他们能侥幸脱身么？笑料迭出的偶发事件里，穿插着小人物与大人物的辛酸幽默。</blockquote>\n<p><img src=\"https://picx1.zhimg.com/v2-fe631de5f5b3197d847c6f1e5fedd51b_720w.jpg?source=b1748391?rss\" data-rawwidth=\"2340\" data-rawheight=\"1080\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-fe631de5f5b3197d847c6f1e5fedd51b\" data-watermark-src=\"v2-35e60a8b754df9c2af5544b4db7a7826\" data-private-watermark-src=\"v2-e0d8d1b7bdcfcceab09ca3d765335ee6\"></p>\n<p data-pid=\"3hBBIdWY\">Lock, Stock and Barrel是一个在英国和北美非常流行的俗语，意思是“全部、所有、从头到脚一网打尽”。因为一把枪的最关键组件包括三个部分：</p>\n<p data-pid=\"_tSfA8U0\">1）Lock，枪的点火装置，2）stock，枪托，3）barrel，枪筒。</p>\n<p data-pid=\"9NavB9y2\">这三个组件合二为一，就组成了一把完整的枪支，所以暗指“万事俱备、一网打尽”。</p>\n<p data-pid=\"QVEuSjzA\">Two Barrels指的是老式双筒猎枪，也就是片中两把价值连城的古董枪，都是双筒的。Two Smoking Barrels则是指刚刚发射或正在发射的冒着烟的猎枪。</p>\n<p data-pid=\"w03nMkqF\">所以使用这个片名的第二层含义是，暗示这是一起发生在现代都市的暴力犯罪案件，全部犯案人员都使用枪械。</p>\n<p data-pid=\"xczmd3TY\">此外，片名还有第三重含义。Lock在英文俗语中有“大麻”的意思，Stock指代钱，Barrel则仍然是枪膛的意思，由此组成这部电影的三个最关键元素。</p>\n<p data-pid=\"S0UnQF5j\">生活有时确实让人觉得乏味。但这世界又总有些东西让我们觉得感动、新奇或过瘾。又有人说电影是世界上最好玩得玩具，看过《两杆大烟枪》后，相信很多人会深有同感。</p>\n<p data-pid=\"bBzuS489\">整部电影中的故事和人物关系应该用“巧合”来形容，在你的一生中，你会遇到多少碰巧发生的事情呢？又有多少巧合事件发生过后，你会常久的琢磨和感叹“怎么会这么巧？”，越想越觉得神奇，越觉得有味道，那是因为遇到这种常理解释不清的事情的时候，我们总爱把所发生过的巧合事件的诱因向宿命的方向归结，于是为本就有点儿不可思议的巧合更披上了一层魔幻的味道。当然，“巧合”带给过我们快乐和惊奇，也同样会带给我们哀伤与悲痛。但是不管结果如何，都无法掩盖“巧合”本身所带给我们的强大吸引力。</p>\n<hr>\n<h2>《坏家伙》对应电影《好家伙》</h2>\n<p data-pid=\"_9HG4VNR\">1990年由著名导演马丁斯科塞斯创作的经典电影《好家伙》，豆瓣评分8.5，IMDB评分8.7</p>\n<p><img src=\"https://picx1.zhimg.com/v2-8c27ca773ff03b75022e482ac5bc7bc9_720w.jpg?source=b1748391?rss\" data-rawwidth=\"2340\" data-rawheight=\"1080\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-8c27ca773ff03b75022e482ac5bc7bc9\" data-watermark-src=\"v2-69d1823b806e66fb783c38bac643ca8d\" data-private-watermark-src=\"v2-76a793429b87dff7bb0526cf750dbb47\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-99ccd2b3c93dd7cdd8dd9a3de37c96c9_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1080\" data-rawheight=\"1560\" data-size=\"small\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-99ccd2b3c93dd7cdd8dd9a3de37c96c9\" data-watermark-src=\"v2-ccd9e282b557ed73bfdc9f157b9e2b51\" data-private-watermark-src=\"v2-739b7004b6bb4542a2a109910fd6cd6c\"></p>\n<blockquote data-pid=\"JYM91WQ2\">本片根据真实故事改编，讲述了纽约黑手党血腥的江湖恩怨，把所谓的“江湖道义”还原为人性的丑陋与贪婪。<br>亨利•希尔（雷•李欧塔 饰）从小不学无术，跟着老大保利，靠收取保护费、走私、抢劫，他娶了美丽的妻子凯伦，有可爱的女儿，迷人的情妇，名车豪宅，生活优渥。<br>吉米•康维（罗伯特•德尼罗 饰）和汤米（乔•佩西 饰）是亨利的好朋友，三人一起经历和很多事情：杀死羞辱汤米的意大利黑手党头领比利•贝兹；策划德航劫案，并干掉同伙，私吞赃款；甚至背着老大保利贩毒。<br>当然，他们的生活，除了享受金钱带来的权势之外，更多的，是朝不保夕的动荡：汤米因为比利•贝兹的死，被人枪杀；亨利自己因为贩毒被警方逮捕，其他人也受到牵连。<br>凯伦想尽办法将亨利保释出来，此时他们已经一无所有，被人孤立，危机四伏。他们要想尽办法活下去，无论以怎样的方式，付出怎样的代价……</blockquote>\n<p data-pid=\"jj0aO3Be\">如果说科波拉把黑帮拍成歌剧，那斯科塞斯就是把黑帮拍成摇滚：没有秩序，只有混乱，每个人都以为自己能掌握命运，每个人却都不得不在命运面前低头。</p>\n<p data-pid=\"Rs_pLuPL\">平铺直叙纪录片似的黑帮片，描述了一个小混混的堕落史。一个从后门进入厨房再进到大厅的不动声色的长镜头，就注定了一部经典的诞生。</p>\n<p data-pid=\"CQfSgPWC\">在“社会学家”马丁•斯科塞斯诸多作品中，《好家伙》无疑是最具娱乐性的，首先它讲述了一个神话故事：一个另类的边缘人物，在险恶的世途中居然全身而退，成功逃脱命运定数；其次是流畅的镜头语言，<b>与故事所蕴含的节奏、情绪完全相称</b>，从而带来一种近乎邪恶但却是酣畅的暴力体验；最后是因为它的纪实，这是最奇妙的一点，某种意义上，它与神话是完全悖离的，<b>但斯科塞斯却能在两者之间找到一个微妙的平衡或者结合点，这就是大师的才华所在。</b></p>\n<p data-pid=\"x0tUWTQp\">有人说这是一个讲述美国梦破灭的故事，事实颇有些缘木求鱼的味道。在这个黑色世界里，是不存在所谓美国梦的。这里没有奋斗，只有堕落、暴力与利益，如果你越堕落，越暴力，越无情，你就越接近成功。<b>很难说这是关于美国梦的奋斗神话，它实际讲述的只有边缘人物如何在夹缝中求生存的故事</b>，这里没有社会意义上的奋斗，连黑帮的规则都不适用。亨利、吉米、汤米，他们不但是社会的边缘人物，在黑道中也是弱势的边缘人物，这个故事所具备的现实意义，在于他们的奋斗永远不被承认，他们的命运由始至终只有一个结局：被抛弃。神话的意义就在于结局亨利逃脱了这种命运，而方法正是他在险恶江湖中学来的规则：没有规则，没有道义。</p>\n<p data-pid=\"M0Sw1p5f\"><b>所以越美丽，就越虚幻。</b></p>\n<hr>\n<h2><b>《西西里人》对应电影《爱尔兰人》</b></h2>\n<p data-pid=\"uaJo1bTA\">2019年，马汀斯科塞斯联合诸位旧日大佬：罗伯特德尼罗，艾尔帕西诺，乔佩西等人制作出的杰作，豆瓣评分8.8，IMDB评分7.8</p>\n<p><img src=\"https://picx1.zhimg.com/v2-5240da67b49a31e50dfdcabb4e373dc8_720w.jpg?source=b1748391?rss\" data-rawwidth=\"2340\" data-rawheight=\"1080\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-5240da67b49a31e50dfdcabb4e373dc8\" data-watermark-src=\"v2-e70815f3197fd06a906e0a5cd6fa50df\" data-private-watermark-src=\"v2-97962fa547072c4a27410e4bc57d953e\"></p>\n<p><br></p>\n<p><img src=\"https://picx1.zhimg.com/v2-8abfa5869b6ebb419312f0daf5013c92_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1080\" data-rawheight=\"1587\" data-size=\"small\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-8abfa5869b6ebb419312f0daf5013c92\" data-watermark-src=\"v2-f5da90cde248ef66a02d5fec3ca0065e\" data-private-watermark-src=\"v2-5b2e928db6998812a2a5e2b92ec3d9f4\"></p>\n<blockquote data-pid=\"IdtxHO7H\">《爱尔兰人》为马丁·斯科塞斯执导的传奇巨制，罗伯特·德尼罗、阿尔·帕西诺和乔·佩西主演。<br>通过二战老兵弗兰克·希兰的视角，讲述了战后美国有组织犯罪的故事。弗兰克·希兰是一名骗子和杀手，曾经在 20 世纪最恶名昭彰的人物身边工作。该电影跨越数十年，记录了美国历史上最大的悬案之一，即传奇工会领袖吉米·霍法失踪案，以宏大的故事之旅，展现有组织犯罪的隐秘通道：其内部运作、仇敌以及与主流政治的瓜葛。</blockquote>\n<p data-pid=\"fSZaJxpY\">重塑了goodfellas式的三雄鼎立，但这次老马无疑走的更远。</p>\n<p data-pid=\"27xXXHIv\">影片以frank的表彰晚会作为分水岭，之前是颠荡起伏的黑帮史诗，“减龄”技术让德尼罗，乔佩西和帕西诺 重返壮年，盛大登场，<b>证明他们仍然是这个时代最好的演员</b>；而在之后，在这最后的狂欢过后，一切尽失，<b>所有人都不约而同的走向末路。</b></p>\n<p data-pid=\"JxcxPd1P\"><b>除主角外每个人都带着结局出场，如同墓志铭般印在屏幕中央，暗示着难以避免的宿命</b>，充满着既定的悲剧感；而最后三十分种的尾声则更加伤感，马丁通过身体的衰老营造出了无可奈何的破落。转眼之间，白发苍苍。</p>\n<p data-pid=\"ow15j8WZ\">这样的现实很难以让人接受，可无论戏内还是戏外，这都已经发生。最后一镜，过往的传奇故事已无人聆听，只留下无尽的落寞。</p>\n<p data-pid=\"JHfPZv5i\">如果要用一部电影来代表马丁斯科塞斯，现在我会选择爱尔兰人，几乎去除了黑帮片中惯有的冷酷毒辣，转而以轻松诙谐的方式娓娓道来，但正如“减龄”特效无法掩盖德尼罗迟缓笨重的肢体运动，<b>叙事上的轻松姿态更是隐藏不住时时暗涌而又在最后一刻喷薄而出的感伤。</b></p>\n<p data-pid=\"7ZI-c95_\">“你的律师死了。”</p>\n<p data-pid=\"GzJAXnCa\"><b>“谁干的？”</b></p>\n<p data-pid=\"EKRtV9HV\"><b>“癌症。”</b></p>\n<p data-pid=\"2Wcl-ApI\">是啊，一个时代已经过去了，曾经的风起云涌也早已平息。人们问，是谁导致了电影的日渐式微，电视？流媒体？还是漫威？<b>也许只是时间罢了</b>。</p>\n<p data-pid=\"KSbzkcEA\">但我们分明看到，<b>在门缝里，那宛若弥留之际的一瞥，道尽多少沧桑。</b></p>\n<hr>\n<h2><b>《喋血七雄》对应电影《喋血双雄》</b></h2>\n<p data-pid=\"BuEWqPwM\">1989年香港导演吴宇森联合周润发，李修贤，叶倩文等人创作的作品，可谓港式黑帮的一代经典，豆瓣评分8.5，IMDB评分7.8</p>\n<p><img src=\"https://picx1.zhimg.com/v2-d6decb076658f72f93fd6a79e5c69172_720w.jpg?source=b1748391?rss\" data-rawwidth=\"2340\" data-rawheight=\"1080\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-d6decb076658f72f93fd6a79e5c69172\" data-watermark-src=\"v2-322970bc0cbaa39fdde2a6ee573c316b\" data-private-watermark-src=\"v2-636cb30135c43ae76dc3af7f863f729b\"></p>\n<p><br></p>\n<p><img src=\"https://pica.zhimg.com/v2-87497ffe81121cb2c5a51ced382961f5_720w.jpg?source=b1748391?rss\" data-rawwidth=\"688\" data-rawheight=\"1000\" data-size=\"small\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-87497ffe81121cb2c5a51ced382961f5\" data-watermark-src=\"v2-1c1de9782d251db83070b4bf628d79d3\" data-private-watermark-src=\"v2-495fcfdd4c6cd6e8a08a6694f64000d2\"></p>\n<blockquote data-pid=\"MXVP1jFr\">杀手亚庄（周润发）在一次暗杀行动中误伤了歌星Jennie（叶倩文），令其双目接近失明，自此，深感内疚的他开始暗中保护、帮助 Jennie，并想趁她眼睛完全失明前筹一笔款送她去国外医治，为此，亚庄铤而走险再当杀手，不想任务完成后不但没收到钱，反被雇他杀人的汪海派人追杀。<br>奉命侦查相关命案的警探李鹰（李修贤）在查案过程中知晓事情另有隐情，亚庄并非冷血杀手，开始同其惺惺相惜，而在应对汪海势力的追杀中，两人更是结成生死之交。然而亚庄的命运，似乎是被注定了。</blockquote>\n<p data-pid=\"haRve-iY\">太经典的一部,虽然今天看来有些做作,可在当时相当轰动,而且今天的不少类似题材的影片都有它的影子。</p>\n<p data-pid=\"Ja7PKe37\"><b>“这个世界变了。我们都不再适合这个江湖，因为我们太念旧。”</b></p>\n<p data-pid=\"veYGh_iJ\">我才意识到，这无疑是个不宜怀旧的年代。</p>\n<p data-pid=\"zDlZRXJ4\">一个受上级排挤的警察，一个被黑道追杀的杀手，一黑一白一正一邪，立场鲜明你死我活，俩条路却同被逼入绝境，警察尽忠职守却被投诉，杀手信守道义却被灭口，他们一个愤世嫉俗，一个侠骨柔肠，他们是天定的敌手，却背离命运坦诚相见，肝胆相照并肩作战。</p>\n<p data-pid=\"pziDo-Tz\"><b>“你一点也不像个杀手。”</b></p>\n<p data-pid=\"m6VfOTbF\"><b>“你也不像个警察。”</b></p>\n<p data-pid=\"FHAgABEX\">故事最后，小庄李鹰联手在教堂与汪海及其手下决一生死。小庄身中数弹双眼也被炸瞎，与Jennie在熊熊燃烧的教堂前的土地上艰难爬行，最终失之交臂。于是李鹰拿起枪跑到被警察包围的汪海面前，义无反顾地举枪射击。</p>\n<p data-pid=\"fL-fVUM5\"><b>凄婉的口琴再次响起。</b></p>\n<p data-pid=\"NgeAwcOk\">影片色彩凝重，从最初的旧日气息，到世事悲凉的层层展开，导演吴宇森在向我们讲述一个逝去的江湖，<b>枪林弹雨血肉横飞，可细细回味却充满温情</b>，像曾爷鼓励李鹰的话：输赢并不重要，有时输了不等于失败，没人能赢得了全世界。</p>\n<p data-pid=\"jf3sfUiL\"><b>这是一首理想主义的挽歌，对往昔英雄情怀的悲婉悼念</b>，在尔虞我诈见利忘义的社会里，无论过去、现在还是未来，是否真的存在这样一种纯真情感？</p>\n<p data-pid=\"GDeL-OvI\">当讲道义、守原则、重情意这些优良品质被我们一次次忽视淡忘，被一次次冷嘲热讽消磨殆尽，我看到小庄一袭风衣转身而去，不诉离伤。</p>\n<hr>\n<p data-pid=\"I-pgC5ld\">感谢明日方舟，感谢Side Story【叙拉古人】，用这样的方式唤醒了积灰已久的旧日观影记忆，这样恰到好处的致敬让我这样对上电波的观影爱好者非常喜悦。</p>\n<p data-pid=\"cX-xb5J6\">作为玩家，和游戏设计组中的几位有着同样情怀的设计师产生了共鸣，<b>在相隔千里的时空外，对着屏幕会心一笑</b>，颇为感动。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/OperationGenoa?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Genoa</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/561890839/answer/2740412975?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">60 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/561714353?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价明日方舟Sidestory「叙拉古人」先导PV?</a><br><a href=\"http://www.zhihu.com/question/564204319?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">《明日方舟》活动叙拉古人有什么玩法攻略？</a><br>\n","link":"http://www.zhihu.com/question/561890839/answer/2740412975?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"如何评价国产 AVG 游戏《恋爱绮谭~不存在的真相~》？","date":"2022-11-03 01:59:15","description":"\n<p data-pid=\"U8BhLxG4\">《恋爱绮谭 不存在的真相》发售快一周了，终于有时间来回答一下这个问题。</p>\n<p data-pid=\"ewHlpgN4\">对于这部作品的评价，自己是有些后知后觉。因为工期爆炸，直到发售的最后一刻还在做着版本的优化。就算发售到现在，你们还能看到一些来不及修正的小错误，并且扔在不断的迭代版本优化之中。</p>\n<p data-pid=\"YoYpux49\">在发售前一周，甚至有些“产前焦虑”，每天早上都是不到6点就在不安中醒来，担心这样一部作品是否能够得到玩家的喜爱。结果，发售后无论是玩家的口碑与销量，都远超我的预期，发售后终于可以睡个安稳觉了。</p>\n<p data-pid=\"-dm9vI18\">从《不存在的夏天》到《不存在的真相》，中间隔了整整两年。开发续作，比我们最先设想的要困难的多，发售日也经历了数次的延期。在这里很感谢一直以来支持我们的玩家，尤其是众筹的玩家。在接连两次宣布延期之后，其实一直担心会不会大量玩家进行退款，结果并没有多少玩家退款每次发布消息都能看到热心的玩家的鼓励。倒是发售后每天收到已经通关的玩家的私信，问实体版到底发货了没。</p>\n<p data-pid=\"urqPYJqk\">续作开发困难的原因，一方面是体量的增加。一开始的计划是剧本30万字（前作剧本21万字），结果在众筹之后， <a class=\"member_mention\" href=\"http://www.zhihu.com/people/dd32eb10e40981cf4a6c67536b8fffb5\" data-hash=\"dd32eb10e40981cf4a6c67536b8fffb5\" data-hovercard=\"p$b$dd32eb10e40981cf4a6c67536b8fffb5\">@浅色回忆</a> 先斩后奏大改了一次剧本大纲，剧本直接变成了40万字，直接导致了成本和工期的爆炸。</p>\n<p data-pid=\"tUC5ogf3\">归根结底，续作开发最大的难度，还是对于自我的超越。作为主催，我能感觉到，在这次的开发过程中，每个组员都在和自己较劲。比较的对象不是别人，而是过去的自己。如果最终做出来的是和前作水平相当的作品，我相信每一个人都是不满意的。在2年的时间里，每个人仿佛都从修炼小屋里出来一样，都完成了自己的进化。</p>\n<p data-pid=\"VrdkloL5\">这次评价颇高的剧本自不用说，别看浅色发售后到处吹嘘，过程中各种纠结到快要自闭的状态，只有开发组内部知道。</p>\n<p data-pid=\"EEDGlTpc\">又比如 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/6ba6796d7b4a211f1503eabf4bad98c8\" data-hash=\"6ba6796d7b4a211f1503eabf4bad98c8\" data-hovercard=\"p$b$6ba6796d7b4a211f1503eabf4bad98c8\">@莲ki</a> 这次的美术，无论是从立绘到美术都又有了大幅度的提升，尤其是这次的主KV和个人线开始的几张CG，能感觉到明显的进化。而在角色服装设计上，玩家通关之后再去仔细看角色的设计，一定能发现更多的细节。同时莲这次还帮忙补充了不少的素材以及协力制品上的监修，为我分担了不少压力。</p>\n<p data-pid=\"1dC8NejI\">这次的音乐方面，很多首BGM其实 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/ccb8fcdc06ca41a9fa1e91fc5646993a\" data-hash=\"ccb8fcdc06ca41a9fa1e91fc5646993a\" data-hovercard=\"p$b$ccb8fcdc06ca41a9fa1e91fc5646993a\">@兔老板AirS</a> 也纠结了非常久，最后的ED曲前前后后差不多写了有两个月时间，BGM一直修改到众筹发码前一天，才正好赶上steam的审核。</p>\n<p data-pid=\"WjZsPv2A\">配音方面，由于这次给到负责整个配音和后期工作的灵缡心这边剧本时间非常晚，导致最后配音和后期的工期很赶，不过最后整体的质量还是比前作提高了不少，尤其是心姐对于中间某个角色后期的处理，听到的玩家一定会很惊艳。</p>\n<p data-pid=\"GrniTU1q\">演出上，这次又折腾 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/4b371f6b910f8160e2732d2b73b40fd0\" data-hash=\"4b371f6b910f8160e2732d2b73b40fd0\" data-hovercard=\"p$b$4b371f6b910f8160e2732d2b73b40fd0\">@时坂工人</a> 实现了很多我新的想法，感觉这次演出上又把灵感都耗尽了，希望到下一作的时候还能有灵感继续提升。</p>\n<p data-pid=\"MnDqFLSX\">在宣传的过程中，我不止一次提到，希望玩家能感受到我们的进步，而发售后从玩家的反馈来看，我终于能自豪的说：我们做到了！</p>\n<p data-pid=\"u4ghcjRv\">从《不存在的夏天》到《不存在的真相》，可以说整个系列已经走上了一个良性的循环，包括之后即将发售的手机版本《不存在的谎言》，也能让更多人体会到《恋爱绮谭》系列的魅力。后续的计划都已经开始启动，包括2.5作的塞满糖的DLC。如果想要续作尽快发售，请在 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/dd32eb10e40981cf4a6c67536b8fffb5\" data-hash=\"dd32eb10e40981cf4a6c67536b8fffb5\" data-hovercard=\"p$b$dd32eb10e40981cf4a6c67536b8fffb5\">@浅色回忆</a> 的每个回答下都踊跃催稿。</p>\n<p data-pid=\"zt4LFjg1\">再次感谢玩家的支持，游戏已知的一些小问题将在一周内优化完成，接下来就会补上成就系统，离可以掉卡应该也不远了。</p>\n<p data-pid=\"xji3Z52f\">刚发售不久，在玩家们的续作催促中，已经要开始纠结续作怎么继续提升作品质量了。</p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/windchaos?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">windchaos</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/562740275/answer/2741348426?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">30 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/486260018?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">异次元都有哪些好玩免费的游戏？</a><br><a href=\"http://www.zhihu.com/question/556903774?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">国产文字冒险游戏《恋爱绮谭》将于 10 月 28 日登陆 Steam，你对该游戏有哪些期待？</a><br>\n","link":"http://www.zhihu.com/question/562740275/answer/2741348426?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"派早报：华为推出多款新品、小米发布概念手机等","date":"2022-11-03 00:22:17","description":"富士发布 APS-C 相机 XT-5、Apple Pay 推出《王者荣耀》限定版交通卡面等。<a href=\"https://sspai.com/post/76572\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/76572"},{"title":"首发特惠 | 人人都能学会的 PPT 制作方法论，超频你的生产力","date":"2022-11-02 10:19:20","description":"即日起至 11 月 13 日，购买《生产力超频：科学做好 PPT 的三个步骤》将享受八折折首发特惠，会员使用麦亏券到手价仅需 ¥ 48.2。<a href=\"https://sspai.com/post/76551\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/76551"},{"title":"iA Presenter：打动人心的是故事，而不是工具本身","date":"2022-11-02 08:27:15","description":"编辑部按：除本文外，我们注意到Matrix社区还有其他朋友也分享了iAPresenter的使用感受。例如，aiokr的《iAPresenter初体验》一文从文件格式、实现方式等角度介绍了iAPrese ...<a href=\"https://sspai.com/post/76561\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/76561"},{"title":"Matrix 圆桌 | 写了若干年手帐，我有什么心得体会？","date":"2022-11-02 07:05:19","description":"这篇文章里，我们请来了三位在 2022 年使用国誉经典的时间轴「自我手帐」的作者，来看看分别使用国誉自我手帐一年、两年和三年的人，对手帐的排版、选择、使用和生活改善等方面的感想。<a href=\"https://sspai.com/post/76562\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/76562"},{"title":"“我们”的现实正蠢蠢欲动——二十一世纪 10 年代日本动画电影关于“真实”的转向考察","date":"2022-11-02 05:55:10","description":"\n<p data-pid=\"fkAoRGjZ\">写了两个月的长文发了，关于2010年代日本动画电影的考察和评论，六万字分成三篇。</p>\n<p data-pid=\"M8jNFccs\">这个叫“诗性电影”的公众号是美院周佳鹂教授整的电影内容平台，比较偏学术。这次约稿是之前给我担任过编辑的沈念老师找我，说这个平台大概要整一个2010年代日本电影的专题（其他文章很推荐上这个公众号看看），其中想要有一个涉及动画的板块，于是就拉上友人 rocefactor 各自成文。感谢沈念老师、周佳鹂教授等各位老师的邀约，让我有一个契机和平台去总结过去几年的写作以及对日本动画这十年一点点看过来的经历，并且可以尽情不限字数地表达（原本打算写个三万字），也感谢一路给我支持的各位朋友。本文也有一定程度的跃进，不少地方缺乏缜密考虑、存在问题杂糅等缺陷，也请各位多多指教。</p>\n<p data-pid=\"8DMnRb4N\">本文对主要围绕 2016 年的“后你名”日本动画电影进行较为详细的考察，并认为《你的名字。》为首的几部动画电影代表了 10 年代动画电影的面貌，成了创作上的一个转折点，这便是与 90 年代的写实风格动画区别开来的、一种以模仿实拍镜头、突显“影像美”并给人以“真实感”的风潮。本文尝试从工业角度进行考察这种风潮的形成，并以 10 年代几部动画电影作为典型案例，主要以阐释的方式分析之间文脉与模式的异同。</p>\n<a href=\"https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/PrRQHPat0rQWBwBy2RRx_g\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-c43e4a240d03bdb8bc00631a81cd048e_qhd.jpg\" data-image-width=\"1080\" data-image-height=\"460\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">“我们”的现实正蠢蠢欲动（一）</a><a href=\"https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/xpiEd71AtZh204JWYhMlcQ\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-af8bc54d41500dd42b0be1ca9c49ae5d_qhd.jpg\" data-image-width=\"1080\" data-image-height=\"459\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">“我们”的现实正蠢蠢欲动（二）</a><a href=\"https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/Y1IecOxo-wSXzhff38945Q\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-066e7e5785f549136310704977e4d5b3_qhd.jpg\" data-image-width=\"1080\" data-image-height=\"459\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">“我们”的现实正蠢蠢欲动（三）</a><p data-pid=\"Lc8Gpg2d\"><b>目录：</b></p>\n<p data-pid=\"laWj_srN\">1. 前言</p>\n<p data-pid=\"E6EtQIBA\">2. 以新海诚、京都动画为首的 2010 年代“真实幻象”动画</p>\n<p data-pid=\"lhV2D1mC\">  2.1 “我们”诠释的延伸</p>\n<p data-pid=\"AOAtG8BR\">  2.2制造“真实幻象”的中间性影像</p>\n<p data-pid=\"HLYReqPb\">  2.3 通过后期控制的动画原生质性</p>\n<p data-pid=\"F2k9ibzw\">  2.4 新海诚与山田尚子在日本电影史的位置</p>\n<p data-pid=\"41kx2khM\">3. “后你名”时代动画电影的“真实幻象”</p>\n<p data-pid=\"teGF-Z4M\">  3.1 VR、AR 式的半透明想象力——《你好世界》</p>\n<p data-pid=\"m16n_6-H\">  3.2 不会成长的大雄在“后你名”时代下的分裂——《哆啦A梦 大雄的新恐龙》</p>\n<p data-pid=\"5MRpJT0-\">  3.3 感官先于理性的“真实幻象”现实性——《我们的七日战争》</p>\n<p data-pid=\"yjgukork\">  3.4 “场景主义”与漫画式演出的让位——《恋途未卜》</p>\n<p data-pid=\"tXB_oVbq\">4. 世界本质之暴露与动画现实之重建</p>\n<p data-pid=\"4HB18Msz\">  4.1 “真实幻象”世界的裂缝——《烟花》</p>\n<p data-pid=\"nhEZ85BW\">  4.2 主观且蠢蠢欲动的现实主义——与《辉夜姬物语》形成对比的《在这世界的角落》</p>\n<p data-pid=\"b7Cl2k5Y\">    4.2.1 《辉夜姬物语》：通过暴露画的本质而达成的再现性写实</p>\n<p data-pid=\"C86XhjJH\">    4.2.2 《在这世界的角落》：从微妙的漫画符号式身体性中寻回坚韧的现实性</p>\n<p data-pid=\"ZfwbpCeS\">    4.2.3 山田尚子的转变</p>\n<p data-pid=\"51zfGuPj\">5. 10 年代日本动画的现实主义如何安放</p>\n<p data-pid=\"ZdW84Y2h\">  5.1 在日本动画中缺席的“311”</p>\n<p data-pid=\"q_Dulr2p\">  5.2 超人身体的现实主义</p>\n<p data-pid=\"rGucf91c\">  5.3 迎刃而解的外部现实</p>\n<p data-pid=\"TBpp6cIh\">6. 结语</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"oo98Wsxf\">牵线友人 rocefactor 写的同一个专题的文章：</p>\n<a href=\"https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/HBTffBGCMcRTxDB-7u3FOA\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-237ff51e2bfe34845649bc063c65d1ec_qhd.jpg\" data-image-width=\"1080\" data-image-height=\"460\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Post Cinema——土居伸彰、渡边大辅与2010年代的日本动画电影</a><p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/ta-ta-jun-minkun?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">塔塔君Minkun</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/579035072?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"做键盘 UP 主三年，聊聊我看到的键圈变化和我眼里键盘的未来","date":"2022-11-02 03:39:05","description":"满打满算，我加入键盘爱好者圈子已经超过三年了。我感觉自己非常有幸，能亲身经历键盘圈子三年间的种种改变。这篇文章，我将结合自己的尝试过的产品、感受到的变化，给大家总结下三年间键盘风向的快速变化，以及展望下未来。<a href=\"https://sspai.com/post/76461\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/76461"},{"title":"派早报：马斯克出任 Twitter CEO、极氪 009 正式发布等","date":"2022-11-02 01:08:40","description":"亚马逊向 Prime 订阅用户开放 Amazon Music 曲库，多部门联合发布《虚拟现实与行业应用融合发展行动计划》等。<a href=\"https://sspai.com/post/76555\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/76555"},{"title":"我给乡村的孩子上了一堂「数字效率」课","date":"2022-11-01 10:00:00","description":"作为科技互联网从业者，我使用手机和电脑的频率要高很多。尤其是下班之后，依然要更新社交媒体内容。但在家人眼里，我就是在不停的刷手机。当然，我也不得不承认，就算我很了解这些软件的套路，知道它们如何让人「上 ...<a href=\"https://sspai.com/post/76548\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/76548"},{"title":"无套路的双十一个人推荐：值得关注的耳机好价","date":"2022-11-01 09:30:00","description":"我们搜罗了一些素质不错、又提供了可观折扣的耳机，希望能帮你的双十一剁手计划一些小忙。<a href=\"https://sspai.com/post/76544\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/76544"},{"title":"让新买的显示器物尽其用，你需要这份 Windows HDR 使用指南","date":"2022-11-01 08:10:21","description":"如果你目前手边有一台支持 HDR 的显示器，那么这篇文章也许就可以解决一些你已经困惑已久的问题了。<a href=\"https://sspai.com/post/76543\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/76543"},{"title":"叙事剧情游戏体验的反思","date":"2022-11-01 07:56:29","description":"\n<p data-pid=\"5XX9d6PC\">艺术板块我连着Game Design相关一起并入闲谈了</p>\n<p data-pid=\"5fg0Qmi7\">2021/8/29</p>\n<hr>\n<p data-pid=\"kqD-yKHd\">吉比特&amp;雷霆游戏第三届未来游戏制作人大赛作品《Never Leave》Review</p>\n<a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1h3411r7YR\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【GameJam游戏】Never Leave [吉比特&amp;雷霆游戏第三届未来游戏制作人大赛决赛]_单机游戏热门视频</a><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-9b71ded201dfb3781175f5f779cc6a2b_b.jpg\" data-rawwidth=\"2520\" data-rawheight=\"1417\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"2520\" data-original=\"https://pic4.zhimg.com/v2-9b71ded201dfb3781175f5f779cc6a2b_r.jpg\"></figure><h2>游戏核心玩法</h2>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-4a053e733df33a3ff0d3c1a39f4d14ea_b.jpg\" data-rawwidth=\"1366\" data-rawheight=\"610\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"1366\" data-original=\"https://pic3.zhimg.com/v2-4a053e733df33a3ff0d3c1a39f4d14ea_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-0c41514b251db4f0677d340fa8b425e6_b.jpg\" data-rawwidth=\"1361\" data-rawheight=\"568\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"1361\" data-original=\"https://pic3.zhimg.com/v2-0c41514b251db4f0677d340fa8b425e6_r.jpg\"></figure><h2>问题一：延时反馈</h2>\n<p data-pid=\"2rhy1Zr8\">改变故事板后，需要<b>按开始播放按钮才会得到情节的反馈</b></p>\n<p data-pid=\"_RHFhLS0\">游戏玩法上的创意设计由于延时反馈所以大大降低了预期的震撼感，玩家觉得自己的改变很自然应该影响第二次播放，如果缩短玩家这一阶段的思维，直接改变不太轮播的动画则会很大程度提高正反馈</p>\n<p data-pid=\"reQqJAte\">即时反馈——动画不停轮播</p>\n<a class=\"video-box\" href=\"https://link.zhihu.com/?target=https%3A//www.zhihu.com/video/1415372980414902272\" target=\"_blank\" data-video-id=\"\" data-video-playable=\"\" data-name=\"来自《致命框架2》\" data-poster=\"https://pic1.zhimg.com/v2-c1d4f5e7990a6451e42c93156371a9b6.jpg?source=382ee89a\" data-lens-id=\"1415372980414902272\"><img class=\"thumbnail\" src=\"https://pic1.zhimg.com/v2-c1d4f5e7990a6451e42c93156371a9b6.jpg?source=382ee89a\"><span class=\"content\"><span class=\"title\">来自《致命框架2》<span class=\"z-ico-extern-gray\"></span><span class=\"z-ico-extern-blue\"></span></span><span class=\"url\"><span class=\"z-ico-video\"></span>https://www.zhihu.com/video/1415372980414902272</span></span></a><h2>问题二：游戏叙事问题</h2>\n<p data-pid=\"6NDwDo1k\">游戏叙事的传统问题——“珍珠串”模型，即游戏Gameplay阶段与观看过场动画阶段的体验分离，当玩家移动完故事板之后，特别是按下开始键这个交互行为，让玩家体验迅速从<b>游戏交互体验</b>中转到<b>期待动画反馈的阶段——心流直接从游戏中剥离</b></p>\n<p data-pid=\"ZbSecizD\">嵌入式的动画已经改善了玩家感受能够影响游戏叙事的体验，但是GamePlay阶段和过场动画阶段仍然因为播放按钮而分割</p>\n<a class=\"video-box\" href=\"https://link.zhihu.com/?target=https%3A//www.zhihu.com/video/1415373267355570176\" target=\"_blank\" data-video-id=\"\" data-video-playable=\"\" data-name=\"\" data-poster=\"https://pic1.zhimg.com/v2-be2fb89be2d9954d22568ee9f5d93073.jpg?source=382ee89a\" data-lens-id=\"1415373267355570176\"><img class=\"thumbnail\" src=\"https://pic1.zhimg.com/v2-be2fb89be2d9954d22568ee9f5d93073.jpg?source=382ee89a\"><span class=\"content\"><span class=\"title\"><span class=\"z-ico-extern-gray\"></span><span class=\"z-ico-extern-blue\"></span></span><span class=\"url\"><span class=\"z-ico-video\"></span>https://www.zhihu.com/video/1415373267355570176</span></span></a><h3>问题三：故事板情节逻辑勉强</h3>\n<p data-pid=\"_OvF8xgH\">故事板是非常重要的设计，需要立足于关键情节，并且在移动后得到符合逻辑的情节表现，在玩家体验时表现出多次感到疑惑的情况，存在很多强行达成的错误剧情</p>\n<a class=\"video-box\" href=\"https://link.zhihu.com/?target=https%3A//www.zhihu.com/video/1415373458687979520\" target=\"_blank\" data-video-id=\"\" data-video-playable=\"\" data-name=\"\" data-poster=\"https://pic2.zhimg.com/v2-fb2a2d244b47eec1c8fdfdcedd62e255.jpg?source=382ee89a\" data-lens-id=\"1415373458687979520\"><img class=\"thumbnail\" src=\"https://pic2.zhimg.com/v2-fb2a2d244b47eec1c8fdfdcedd62e255.jpg?source=382ee89a\"><span class=\"content\"><span class=\"title\"><span class=\"z-ico-extern-gray\"></span><span class=\"z-ico-extern-blue\"></span></span><span class=\"url\"><span class=\"z-ico-video\"></span>https://www.zhihu.com/video/1415373458687979520</span></span></a><h3>问题四：游戏关卡目的不明</h3>\n<p data-pid=\"7GUjL4UF\">故事板中只有中间过程，玩家并不知道此关卡的最终目的是什么</p>\n<p data-pid=\"vYqbe4z4\">虽然我已经使用了大量的灯光构图进行引导，但是还是不足以让玩家一目了然</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-124949c3e12930f042bc531ea6cc0b92_b.jpg\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic3.zhimg.com/v2-124949c3e12930f042bc531ea6cc0b92_r.jpg\"></figure><p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhen-he-9?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">枕鹤</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/404773708?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"从《摩尔庄园》手游看美术问题","date":"2022-11-01 07:56:25","description":"\n<p data-pid=\"m9sZA9we\">随便写写把自己对一些游戏美术上的问题的感受记录下来</p>\n<p data-pid=\"1twOpGRN\">随便聊聊</p>\n<hr>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-68a03e66935683a44b7f82a668c4960a_b.jpg\" data-rawwidth=\"600\" data-rawheight=\"301\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic3.zhimg.com/v2-68a03e66935683a44b7f82a668c4960a_r.jpg\"></figure><p data-pid=\"5ZS83ZuA\">《摩尔庄园》手游问世之初打着“情怀”的旗号，吸引了众多的玩家，我自己人生中接触的第一款游戏就是《摩尔庄园》；也是我游戏的启蒙导师了，也是屈指可数的得到我父母认可的游戏，并且给予我和父母了一段一起玩游戏的开心时光；所以我对这个重置？或者说是同款IP的手游充满期待，希望可以找回童年的感受——</p>\n<p data-pid=\"JQHTmB5b\">然而，，事与愿违，我提前一个月就在期待了，并且预约时候也发了朋友圈呼吁朋友们来玩，自发性的宣传了，但真正进去游戏的时候，我甚至没有坚持超过十分钟，所以我这个分析也完全是基于一个<b>云玩家</b>的视角，看到别人的游戏截图和视频有感而发随便一说</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-1b04f42affe1c24a0b9865bedd18e3bf_b.png\" data-rawwidth=\"181\" data-rawheight=\"175\" data-size=\"normal\" data-caption=\"\" class=\"content_image\" width=\"181\"></figure><p data-pid=\"fy6VLJ6p\">既然是打着怀旧向的游戏内容，那么最重要的就是复原原版网游的体验，我无论你网游的玩法核心是否复原，但是你的美术风格可以说是大相径庭，我随便挑了几个问题比较明显的地方进行讨论</p>\n<h2>色彩问题</h2>\n<p data-pid=\"iiu4v78L\">首先我们看一个游戏，最初进入游戏可能并不会去关注细节，只就看个大概，所以我们从整体的画面风格说起，那么整个画面来看最重要的一点就是色彩的问题</p>\n<p data-pid=\"UPtlQOke\">我们可以看一下端游、海报和手游的对比</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-358f64c3049610594cc0c4cb185d8974_b.jpg\" data-rawwidth=\"1364\" data-rawheight=\"626\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"1364\" data-original=\"https://pic1.zhimg.com/v2-358f64c3049610594cc0c4cb185d8974_r.jpg\"></figure><p data-pid=\"ux7cykdv\">最初进入游戏时，最早的场景就是这个满屏莫兰迪绿的草坪了，直接快把我劝退</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-652542b44907d2e8b702385a6b65320f_b.jpg\" data-rawwidth=\"240\" data-rawheight=\"240\" data-size=\"normal\" data-caption=\"\" class=\"content_image\" width=\"240\"></figure><p data-pid=\"klPsiZBj\">原版的端游色彩风格明快鲜艳，对于受众画像群体——孩子来说，孩子的视觉认知弱，明快鲜艳的色彩带给孩子更强的感知，整体表现出一种阳光美好的感觉，但是为什么手游在宣传海报上还能比较好的还原色彩风格，到了实机上不能说差不多，只能说完全不一样</p>\n<p data-pid=\"WRMJdVED\">这里只是举例了最明显的绿色系的黄绿色转变为莫兰迪绿，实际上影响整个画面的是各种颜色协同的结果，所以基本所有颜色都有很大的问题</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-46e86443a6824b875cdcc5b9cdccdf32_b.jpg\" data-rawwidth=\"1310\" data-rawheight=\"673\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"1310\" data-original=\"https://pic3.zhimg.com/v2-46e86443a6824b875cdcc5b9cdccdf32_r.jpg\"></figure><p data-pid=\"r7iTOCZ8\"><b>明度</b>是游戏中非常重要的资源，场景较低，角色稍微突出，UI最明显，所以限制了明度范围的我们常常会使用颜色来给予视觉感知类似与明度的变化</p>\n<p data-pid=\"C33UZRPr\">紫色——蓝色</p>\n<p data-pid=\"uR0sX50m\">红色——黄色</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-058578c56568df0f2129dc1982e0265b_b.jpg\" data-rawwidth=\"542\" data-rawheight=\"259\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"542\" data-original=\"https://pic4.zhimg.com/v2-058578c56568df0f2129dc1982e0265b_r.jpg\"></figure><p data-pid=\"7boN0dio\">都是一种以色相来做出类明度视觉感知的做法，上图场景中最明亮的应该是<b>灯泡</b>，但是灯泡却使用了一种<b>橙色</b>来处理，而悬挂的果实使用了<b>黄色</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-6f97eeae3ab4382cd4363c900450d7cd_b.png\" data-rawwidth=\"181\" data-rawheight=\"175\" data-size=\"normal\" data-caption=\"\" class=\"content_image\" width=\"181\"></figure><h2>光影问题</h2>\n<p data-pid=\"Gw7nQ0Sr\">第二个对画面特别重要的点就是光影了，而光影的重点其实是灰度，只要把控好灰度，我们几乎不会出现有问题的画面，但是摩尔又出了大问题</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-4846f61288797f902a604968b0b7be99_b.jpg\" data-rawwidth=\"1300\" data-rawheight=\"528\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"1300\" data-original=\"https://pic2.zhimg.com/v2-4846f61288797f902a604968b0b7be99_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-052d09421094365b232e3ffbef5daf3c_b.jpg\" data-rawwidth=\"745\" data-rawheight=\"355\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"745\" data-original=\"https://pic1.zhimg.com/v2-052d09421094365b232e3ffbef5daf3c_r.jpg\"></figure><p data-pid=\"KdyiDzFL\">每日考题：你能找到画面的重点在哪吗？说实话我连角色都没找到</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-5e6edbc39bf1fac2934192ce7c8ef7ed_b.jpg\" data-rawwidth=\"300\" data-rawheight=\"136\" data-size=\"normal\" data-caption=\"\" class=\"content_image\" width=\"300\"></figure><p data-pid=\"w6Q8ENaE\">既然以复原体验为核心，那么光影效果应该以复原为标准吧？但是我们手游又做出了一个不一样的决定，我们要走真实灯光效果和shading效果</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-d9cbede32afc42890654c2ec81354f58_b.jpg\" data-rawwidth=\"1357\" data-rawheight=\"727\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"1357\" data-original=\"https://pic1.zhimg.com/v2-d9cbede32afc42890654c2ec81354f58_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-e7c1b7c435f4014580551a2d732f22cf_b.png\" data-rawwidth=\"190\" data-rawheight=\"176\" data-size=\"normal\" data-caption=\"\" class=\"content_image\" width=\"190\"></figure><h2>界面问题</h2>\n<p data-pid=\"iOh6PjgO\">影响整个游戏画面的问题除了底部的场景以外，就是顶层的UI了，进入游戏之后一个接一个的UI马上随着一个一个任务增加，马上占满了我的屏幕，让我小小的手机承受了不该承受的重量</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-e64eae1cbef4b6e154f88e1d0ed7fc22_b.jpg\" data-rawwidth=\"1358\" data-rawheight=\"586\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"1358\" data-original=\"https://pic3.zhimg.com/v2-e64eae1cbef4b6e154f88e1d0ed7fc22_r.jpg\"></figure><p data-pid=\"G2Eyepvg\">我们虽然看好像手游界面和端游界面也没有相差过大的占比（实际上还是大了不少），但是我们可是手机呀，小小的手机屏幕承受了他不该承受的</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-da86b6af19514d8d2ac31e6e62ef13d4_b.png\" data-rawwidth=\"165\" data-rawheight=\"173\" data-size=\"normal\" data-caption=\"\" class=\"content_image\" width=\"165\"></figure><p data-pid=\"Qu28Vmaz\">最重要的是，手游变成了mmo<b>RPG!</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-ae8221697f9b00a94de6bf335880ff36_b.jpg\" data-rawwidth=\"1092\" data-rawheight=\"593\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"1092\" data-original=\"https://pic3.zhimg.com/v2-ae8221697f9b00a94de6bf335880ff36_r.jpg\"></figure><p data-pid=\"p521hxpu\">你的视角变成了背后摄像机，还有两只手遮住了两边的画面，导致你整个屏幕很大程度上被UI占领了！</p>\n<h2>UI问题</h2>\n<p data-pid=\"Um7ID23E\">你说你占屏幕就占吧，你至少弄得和谐一点，好看一点，高端一点</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-0cd6d8f199658a884650caeb72addaef_b.png\" data-rawwidth=\"195\" data-rawheight=\"165\" data-size=\"normal\" data-caption=\"\" class=\"content_image\" width=\"195\"></figure><p data-pid=\"gYRHCMAA\">现在各家游戏都在遵循扁平化UI的圣旨，只有摩尔手游偏要与众不同，又处理不好2.5DUI的风格统一问题，与游戏格格不入</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-c70799b5e7a7b95e8d3516cdd1ce18b9_b.jpg\" data-rawwidth=\"720\" data-rawheight=\"300\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"720\" data-original=\"https://pic2.zhimg.com/v2-c70799b5e7a7b95e8d3516cdd1ce18b9_r.jpg\"></figure><p data-pid=\"-qNSEJUV\">字体的把控更是让人堪忧，我都不想多提，整个字体风格是需要深入研究的，一两句讲不清，下回有机会再唠</p>\n<p data-pid=\"Tc2lFlKi\">另外道具UI极其不规范且随意，我甚至可以怀疑道具UI是原画兼职做的，我右图用了《原神》的道具背包图片</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-2a05f2efbfa4232366bb94b77e418162_b.jpg\" data-rawwidth=\"1218\" data-rawheight=\"494\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"1218\" data-original=\"https://pic3.zhimg.com/v2-2a05f2efbfa4232366bb94b77e418162_r.jpg\"></figure><h2>Shader表现</h2>\n<p data-pid=\"QQGWTkOf\">之前就是我体验到新手关为止能拿出来说的东西了，其他的我没坚持玩下去，接下来作为美术TA我们简单聊聊关于Shader的效果在美术风格上不一致的问题</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-566f2a138d09de8a5cf6e15e63afb4c7_b.jpg\" data-rawwidth=\"1223\" data-rawheight=\"630\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"1223\" data-original=\"https://pic4.zhimg.com/v2-566f2a138d09de8a5cf6e15e63afb4c7_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-ff0cf67060c494635b77cba5f34f505d_b.jpg\" data-rawwidth=\"1206\" data-rawheight=\"572\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"1206\" data-original=\"https://pic2.zhimg.com/v2-ff0cf67060c494635b77cba5f34f505d_r.jpg\"></figure><p data-pid=\"fcUMjc64\">我们可以在很多场景里看到水的材质，然而每个水只能说是各做各的，基本都是不一样的shader美术风格（可能外包给不同的TA了？</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-20628cc26ee1c101e7835c3784f381d4_b.png\" data-rawwidth=\"163\" data-rawheight=\"147\" data-size=\"normal\" data-caption=\"\" class=\"content_image\" width=\"163\"></figure><p data-pid=\"fjClKy4N\">连美术风格都不统一，我就不说他丑这回事了</p>\n<p data-pid=\"KjC7aesm\">你以为到这就完了？</p>\n<p data-pid=\"Tw2DXHPN\">来看看这个最离谱的shader</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-47bbaba9b16727222f91e00d921e273e_b.jpg\" data-rawwidth=\"1122\" data-rawheight=\"638\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"1122\" data-original=\"https://pic3.zhimg.com/v2-47bbaba9b16727222f91e00d921e273e_r.jpg\"></figure><p data-pid=\"gssfkTjO\">如果说上面是风格不统一，这个可能是游戏都不太适合，这个阴间的透视shader适合放在这吗，你但凡把模型的整体整合起来算这个菲涅尔都不至于搞成这样，卡通的风格是真不适合这么处理</p>\n<hr>\n<p data-pid=\"3dIUTNgp\">咳咳咳，就聊到这，有时候对一些自己期待很久的游戏会有一些不得不指出的问题，也是我对这个游戏的喜欢我才会去讨论，也是自己对美术风格比较敏感，随便聊聊</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-69eb9b7cfa27e53ccb36b05bcd376541_b.png\" data-rawwidth=\"190\" data-rawheight=\"177\" data-size=\"normal\" data-caption=\"\" class=\"content_image\" width=\"190\"></figure><p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhen-he-9?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">枕鹤</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/407965203?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"关卡美术与灯光对于游戏体验的影响","date":"2022-11-01 07:56:20","description":"\n<p></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-eb39c330cbe4fe55818460620ba68285_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-eb39c330cbe4fe55818460620ba68285_r.jpg\"></figure><h2>《超级马里奥》中的水管</h2>\n<p data-pid=\"_wChxe1-\">在超级马里奥中，有非常多的水管，很多时候只是充当一个关卡跳跃的元素，符合马里奥作为水管工人的设定</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-2ade874595d876dd26c8387947cfa622_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"647\" data-rawheight=\"381\" class=\"origin_image zh-lightbox-thumb\" width=\"647\" data-original=\"https://pic3.zhimg.com/v2-2ade874595d876dd26c8387947cfa622_r.jpg\"></figure><p data-pid=\"oSGdF_-S\">但是除了搭配马里奥水管工的背景设定以外，日常生活中对于水管中空的设计的认知让玩家潜意识里就有可以进入的感知（会掉下去），从而在后续关卡中隐藏地下世界，当玩家意外进入地底时感到<b>意料之外，情理之中</b>的体验</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-4b08ef44974b3513b94927a06980a9e9_b.jpg\" data-size=\"normal\" data-rawwidth=\"525\" data-rawheight=\"359\" class=\"origin_image zh-lightbox-thumb\" width=\"525\" data-original=\"https://pic2.zhimg.com/v2-4b08ef44974b3513b94927a06980a9e9_r.jpg\"><figcaption>隐藏的地下世界</figcaption></figure><h2>《动物派对》中的展示柜</h2>\n<p data-pid=\"gXtPuWum\">关卡引导通过地面上的指示灯传达出来玩家的移动路线，而门上的面板表示了目前暂时无法能继续前进</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-965eb3367b3c9c22520f80163c4a49ab_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"798\" data-rawheight=\"438\" class=\"origin_image zh-lightbox-thumb\" width=\"798\" data-original=\"https://pic4.zhimg.com/v2-965eb3367b3c9c22520f80163c4a49ab_r.jpg\"></figure><p data-pid=\"SxA-Qdwo\">展示柜在极其显眼的房间摆设中央区域，暗示了其后续的教学，但是其形状语言较为尖锐，与其他房间内物件的圆角设计较为不同</p>\n<p data-pid=\"r0MXL4rL\">并且在之前的房间里曾充当过摆设，所以玩家一开始主要关注在与沙包的交互上</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-7af9927bd2c797c5536d18c31f97b4d1_b.jpg\" data-size=\"normal\" data-rawwidth=\"333\" data-rawheight=\"212\" class=\"content_image\" width=\"333\"><figcaption>一个玩家失足撞碎了作为摆设物的展示柜</figcaption></figure><p data-pid=\"27yX60iY\">同样，在后续教程提示“击碎展示柜取出棒棒糖”时，给玩家的体验：“原来还可以这样”，但也给足了伏笔</p>\n<h2>GameJam项目</h2>\n<p data-pid=\"guFne1By\">这是我在一次48小时GameJam时做的关卡与灯光，整体游戏氛围偏向治愈的小游戏风格，所以并没有过分强调压抑感和戏剧感，主要是利用线条光影分割打造囚禁的视觉语言，风扇的转动带来动感</p>\n<p data-pid=\"WpU8pFsv\">现在看来立灯冰箱等元素的人造灯光有些多余，打乱了排气口打的束光引导玩家的意图</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-6abb96e26338d53ab78d9a8c6fd45e77_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"702\" data-rawheight=\"397\" class=\"origin_image zh-lightbox-thumb\" width=\"702\" data-original=\"https://pic4.zhimg.com/v2-6abb96e26338d53ab78d9a8c6fd45e77_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-5cfba8c1330e7a693dd7a99c5c3cc6c4_b.jpg\" data-size=\"normal\" data-rawwidth=\"1305\" data-rawheight=\"219\" class=\"origin_image zh-lightbox-thumb\" width=\"1305\" data-original=\"https://pic1.zhimg.com/v2-5cfba8c1330e7a693dd7a99c5c3cc6c4_r.jpg\"><figcaption>参考</figcaption></figure><h2>《底特律：变人》电影化游戏</h2>\n<p data-pid=\"8mrFmj2F\">下面详细剖析一个游戏的关卡美术与灯光，但首先还是要讲一下游戏叙事</p>\n<h3>浅谈游戏叙事</h3>\n<p data-pid=\"iVzoXcHi\">无论是关卡的美术还是灯光，其目的都是增加或者说优化玩家体验，而其中很关键的就是——叙事</p>\n<p data-pid=\"m4C_WibS\">关于游戏叙事，与其他的媒介有一点极为重要的差异，<b>在游戏中玩家通常将自己扮演的角色称之为“我”的第一人称视角而非第三人称</b>，即使是非生命的游戏中，比如“车”也会变成玩家的化身</p>\n<p data-pid=\"FDeQKGsE\"><b>这是一种强制性的共情，玩家会与主角进行极为深刻的情感代入</b>，在 底特律：变人 这部游戏中，玩家扮演的三位角色都是仿生人，所以与仿生人进行共情是必然的</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-a83b84c443ff899cea3cc760c1f0b559_b.jpg\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"576\" class=\"origin_image zh-lightbox-thumb\" width=\"1024\" data-original=\"https://pic2.zhimg.com/v2-a83b84c443ff899cea3cc760c1f0b559_r.jpg\"><figcaption>《底特律：变人》的三位主角</figcaption></figure><p data-pid=\"XIeaor0N\">所以即使在一定情况下引导玩家做出恶行，玩家也会体会自己（主角）的苦衷，而在 美国末日2 中，玩家一上来就扮演一个自己并不了解的新角色莫名奇妙地将上一代与自己共情最深的乔尔给杀害，玩家全程处于一脸懵逼的状态，导致了玩家反感主角其中之一埃比，作品口碑下滑</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-98ba50a597176b3bfec1892af4783205_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"680\" data-rawheight=\"382\" class=\"origin_image zh-lightbox-thumb\" width=\"680\" data-original=\"https://pic2.zhimg.com/v2-98ba50a597176b3bfec1892af4783205_r.jpg\"></figure><p data-pid=\"i9iq2mLq\">所以，即使美术与灯光再好，服务对象的本质出现了一些欠缺，仍然无法讲好一个故事，所以在做美术前期工作的时候，个人认为一定要把上层建筑打好，确保世界观和剧本内容好才是最重要的基石</p>\n<p data-pid=\"c4o6YYCs\">接下来主要以 底特律：变人 中的经典桥段——审讯仿生人罪犯，这个关卡的一条线或者说情节作为主要的分析对象简单说说自己的理解</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-7a884479a81eb06cfb4f5498bf29cbfc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"321\" data-rawheight=\"157\" class=\"content_image\" width=\"321\"></figure><h3>汉克审讯仿生人</h3>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-d1bbe7f1675ad2151334acacc7274dfb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"701\" data-rawheight=\"395\" class=\"origin_image zh-lightbox-thumb\" width=\"701\" data-original=\"https://pic4.zhimg.com/v2-d1bbe7f1675ad2151334acacc7274dfb_r.jpg\"></figure><p data-pid=\"qVrtH9qI\">在这一幕中，汉克与仿生人之间有几个元素，第一是墙上的摄像头，第二是桌上的档案，若有若无的分隔了两个角色，其实其中的表现是汉克对于仿生人有隔阂但并非很强烈</p>\n<p data-pid=\"vieWQyRv\">即使有间隔，但他们仍属于同一个<b>空间</b>，在强化此条件下，关卡或者灯光师会将角色的矛盾会通过构成与光影使其归属到不同的视觉空间下</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-5ef7cab3747828922d18dc081cea68f8_b.jpg\" data-size=\"normal\" data-rawwidth=\"1060\" data-rawheight=\"239\" class=\"origin_image zh-lightbox-thumb\" width=\"1060\" data-original=\"https://pic1.zhimg.com/v2-5ef7cab3747828922d18dc081cea68f8_r.jpg\"><figcaption>通过构图与灯光分割视觉空间强化冲突</figcaption></figure><p data-pid=\"38OaDy32\">汉克脸上的受光较多，而仿生人罪犯由于一直低着头，保持着极为明显的顶上光特征，保持着神秘感与阴沉的感受，不过由于其一直是低着头并且皱眉的情况，所以显露出一些纠结与胆怯的表现</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-b9d041a7ab944e002f9c99ad761b1747_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"258\" data-rawheight=\"166\" class=\"content_image\" width=\"258\"></figure><p data-pid=\"RRUfUyuQ\">顶上光有时被称之为教父光（因为电影《教父》系列中教父出现基本都会使用这个灯光效果）</p>\n<p data-pid=\"NzAzRjPl\">这种灯光为角色带来很强的神秘感，通常被用来塑造邪恶的角色，特点是看不到眼睛，无法感知角色的感情，所以汉克也像是顶上打的灯光，但是其眼睛清晰可见，没有带来神秘与阴沉的视觉感知</p>\n<h3>审讯室与观察室</h3>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-30a80883d1088b141fb708bedffafa21_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"727\" data-rawheight=\"410\" class=\"origin_image zh-lightbox-thumb\" width=\"727\" data-original=\"https://pic2.zhimg.com/v2-30a80883d1088b141fb708bedffafa21_r.jpg\"></figure><p data-pid=\"8eNadFYe\">这一幕回应了上一幕提到的，这两个人类警探和警员对于仿生人的态度隔阂，在后面的言语神态动作都可以佐证，他们在空间上（物理）的设计都进行了分割，在审讯室和在观察室，而这两名警员的剪影聚集玩家的目光到中间</p>\n<p data-pid=\"ehQ_PG5j\">在最开始的镜头下，审讯室表现也为左右对照的两个阵营，而这个镜头则只有人类警员</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-a8764539f093978e210537aaa358ef04_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2560\" data-rawheight=\"1440\" class=\"origin_image zh-lightbox-thumb\" width=\"2560\" data-original=\"https://pic1.zhimg.com/v2-a8764539f093978e210537aaa358ef04_r.jpg\"></figure><p data-pid=\"73nLjclZ\">而此刻汉克看向审讯室，说明他对仿生人也感到不耐烦了，准备回归人类阵营（观察室），之后说到：我要出去了</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-2e454e6a74ef3ff8fc38dc63abbd0336_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"966\" data-rawheight=\"314\" class=\"origin_image zh-lightbox-thumb\" width=\"966\" data-original=\"https://pic3.zhimg.com/v2-2e454e6a74ef3ff8fc38dc63abbd0336_r.jpg\"></figure><p data-pid=\"Dhriad44\">此前汉克一直都是使用的伦勃朗光，通常伦勃朗光的多用在戏剧性画面中，特点是阴影区域眼睛下方有三角形的光斑，常见的用处是强化戏剧冲突，沉浸感强</p>\n<h3>康纳亲近审讯</h3>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-3e1fc9192826c32430e6149e975a6383_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"503\" data-rawheight=\"280\" class=\"origin_image zh-lightbox-thumb\" width=\"503\" data-original=\"https://pic4.zhimg.com/v2-3e1fc9192826c32430e6149e975a6383_r.jpg\"></figure><p data-pid=\"nKPNi1kC\">康纳进入审讯室之前是一个软（Front）光，弱化皱纹，意义是强调柔和感，表现对仿生人同胞的同情</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-01a28399670d0cd02cea9074b42b39c9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"513\" data-rawheight=\"274\" class=\"origin_image zh-lightbox-thumb\" width=\"513\" data-original=\"https://pic2.zhimg.com/v2-01a28399670d0cd02cea9074b42b39c9_r.jpg\"></figure><p data-pid=\"ihD1Vm5k\">在进入审讯室就坐之后，康纳直接移除之前的代表戏剧冲突的隔阂物</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-af9909dfe5d8b409254e4534d864206d_b.jpg\" data-size=\"normal\" data-rawwidth=\"488\" data-rawheight=\"275\" class=\"origin_image zh-lightbox-thumb\" width=\"488\" data-original=\"https://pic2.zhimg.com/v2-af9909dfe5d8b409254e4534d864206d_r.jpg\"><figcaption>楔形灯光</figcaption></figure><p data-pid=\"4Trvd-tR\">灯光表现为楔形灯光，即侧软光，依然是较为柔和的态度</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-0ee4f76cb1ac24832fc3254b38eabc63_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"545\" data-rawheight=\"307\" class=\"origin_image zh-lightbox-thumb\" width=\"545\" data-original=\"https://pic4.zhimg.com/v2-0ee4f76cb1ac24832fc3254b38eabc63_r.jpg\"></figure><p data-pid=\"wTMEes-P\">康纳审讯期间，镜头基本是由与刚刚汉克审讯时相反的另一侧拍摄，索性称之为仿生人视角，镜子反射出两人处于同一空间下，弱化此前汉克与仿生人之间的分隔，仿生人罪犯将康纳视为自己人，又有点忌惮观察室的人类</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-aa4f9077e5e797f3105ffb951d5ed152_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"895\" data-rawheight=\"285\" class=\"origin_image zh-lightbox-thumb\" width=\"895\" data-original=\"https://pic3.zhimg.com/v2-aa4f9077e5e797f3105ffb951d5ed152_r.jpg\"></figure><p data-pid=\"Ji11q65O\">玩家选择康纳表现亲近，降低压力使罪犯说话后两人对话地位趋向平衡，罪犯灯光软化，仅通过镜头角度和神态表现差异</p>\n<h3>康纳施压审讯</h3>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-7045f1d779138ae39c40376e4aeb4ab9_b.jpg\" data-size=\"normal\" data-rawwidth=\"764\" data-rawheight=\"431\" class=\"origin_image zh-lightbox-thumb\" width=\"764\" data-original=\"https://pic2.zhimg.com/v2-7045f1d779138ae39c40376e4aeb4ab9_r.jpg\"><figcaption>短硬光</figcaption></figure><p data-pid=\"IzICaQxB\">玩家选择康纳开始施压，康纳站起，表现为俯视姿态，提高对话中的地位</p>\n<p data-pid=\"3NPRH1UO\">由于站起来离光源更近（其实根本就是打了不同的光），灯光变为短硬（ Hard）光，短光更加能够凸显人物，由于灯光的二次衰减效应，人物更亮而背景更暗，卡硬光影分界线，面部细节更加立体，视觉感知更强硬</p>\n<p data-pid=\"kBCV6M-P\">而在施压期间，镜头从仿生人侧回到刚刚汉克审讯时的人类侧，镜头语言就不展开了，我也只知皮毛</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-4697b0b7cad2ee5ac60d54ddaa07a68e_b.jpg\" data-size=\"normal\" data-rawwidth=\"1007\" data-rawheight=\"288\" class=\"origin_image zh-lightbox-thumb\" width=\"1007\" data-original=\"https://pic3.zhimg.com/v2-4697b0b7cad2ee5ac60d54ddaa07a68e_r.jpg\"><figcaption>左右横跳的侧光</figcaption></figure><p data-pid=\"B-o68nWq\">犯人再次低头，这次给了一个硬侧光并且发抖，表现为胆怯的感觉，之后康纳迫近，两人都转变为戏剧化的伦勃朗光特征</p>\n<p data-pid=\"0sXTSXUk\">值得注意的是，这个犯人打的侧光一会左一会右的，其实可以知道这个场景中的发光物体其实是Motivated Light，打光的原则是人物先打，场景再打，以叙事为首要目的，而非物理，装饰灯主要是让画面更有说服力，尽可能消除违和感</p>\n<p data-pid=\"5KR4wxrh\">过亮的的光源会抢夺画面的焦点，赛博朋克2077风格下很多的光源表现过曝严重</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-d9aa8323925cf74b65b48c6652d07763_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1395\" data-rawheight=\"813\" class=\"origin_image zh-lightbox-thumb\" width=\"1395\" data-original=\"https://pic4.zhimg.com/v2-d9aa8323925cf74b65b48c6652d07763_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-2e9bea2e994fd825887628b955f7c7fd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1419\" data-rawheight=\"831\" class=\"origin_image zh-lightbox-thumb\" width=\"1419\" data-original=\"https://pic2.zhimg.com/v2-2e9bea2e994fd825887628b955f7c7fd_r.jpg\"></figure><p data-pid=\"UL8kJJ6d\">在场景氛围概念设计图中光源在画师们的主观处理下要比Realtime Render要舒服很多</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-348e2734625ebb3bf2d641be6254d106_b.jpg\" data-size=\"normal\" data-rawwidth=\"1945\" data-rawheight=\"996\" class=\"origin_image zh-lightbox-thumb\" width=\"1945\" data-original=\"https://pic3.zhimg.com/v2-348e2734625ebb3bf2d641be6254d106_r.jpg\"><figcaption>个人最喜欢的一张2077Concept ASid:Ward Lindhout</figcaption></figure><h3>齐聚审讯室</h3>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-f0fa9dc39ef8d723e62cf9c536a198b0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"857\" data-rawheight=\"482\" class=\"origin_image zh-lightbox-thumb\" width=\"857\" data-original=\"https://pic1.zhimg.com/v2-f0fa9dc39ef8d723e62cf9c536a198b0_r.jpg\"></figure><p data-pid=\"9afu1QTn\">这一幕中的站位可能是妥协于后续的动画需要，个人认为皮衣警员最好与汉克调换位置，他的站位太黑了他又穿的特黑，康纳站在最黑区是因为他的衣服很亮，把他整个凸显出来，汉克穿的色也挺亮的不用站亮区</p>\n<p data-pid=\"nyfvzCS4\">亦或者两个警员本来就是背景板，只需要凸显玩家扮演的康纳，但是皮衣探员作为白人头部过于明显……也可能单纯通过仿生人罪犯作为中线把两个阵营分割开来吧，各有理解</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-bc89805a4d58d3e183e89c3a51b0d1bc_b.jpg\" data-size=\"normal\" data-rawwidth=\"545\" data-rawheight=\"288\" class=\"origin_image zh-lightbox-thumb\" width=\"545\" data-original=\"https://pic1.zhimg.com/v2-bc89805a4d58d3e183e89c3a51b0d1bc_r.jpg\"><figcaption>惨遭破坏的三角构图</figcaption></figure><p data-pid=\"YAjsug2u\">个人认为本作与 战神4 同为学习和分析灯光和镜头的好作品，可以学到很多</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhen-he-9?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">枕鹤</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/498585928?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"从《动物派对》看美术风格","date":"2022-11-01 07:56:17","description":"\n<p data-pid=\"OChUZfia\">第一次听说这个游戏是其在测试阶段引发了众多游戏爱好者的自发性宣传，在各大视频网站看到这款有趣的朋友游戏Party Game——有朋友快乐翻十倍；跟舍友在游戏中疯狂互殴，三个人与一堆人机都可以疯一下午</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-9e600f5634281cd6405376390366e739_b.jpg\" data-rawwidth=\"221\" data-rawheight=\"216\" data-size=\"normal\" data-caption=\"\" class=\"content_image\" width=\"221\"></figure><p data-pid=\"G9QirA5g\">这款游戏的布娃娃反IK动作系统做的非常棒，在兼顾玩家操作体验的前提下让玩家沉浸在沙雕动作的快乐之中可谓是非常困难的，特别是《动物派对》还是核心玩法基于动作互殴对战的游戏</p>\n<p data-pid=\"Sn6Ys1JI\">这款游戏美术的亮点与瑕疵都是非常典型的，很适合拿出来聊一聊美术风格，本次美术分析中主要会从<b>用户界面设计、颜色理论、形状与视觉象征、材质与视觉感知</b>这几个模块入手，从通用设计，游戏美术设计以及用户体验逐步深入（形而上）...</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-5a69272f96be541da35aba2a57654724_b.jpg\" data-rawwidth=\"512\" data-rawheight=\"288\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"512\" data-original=\"https://pic1.zhimg.com/v2-5a69272f96be541da35aba2a57654724_r.jpg\"></figure><h2><b>用户界面设计</b></h2>\n<p data-pid=\"4kHuN5Tj\">首先我们进入这个游戏最开始看到的就是这个界面，我们可以先来看看界面的组成元素：文字、背景与两个可可爱爱的小动物坐在小沙发上，以及下方的用户信息栏的头像、等级、名字、好友栏</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-48d3f08464085ef083d2fa9b0709d469_b.jpg\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-48d3f08464085ef083d2fa9b0709d469_r.jpg\"></figure><p data-pid=\"IVqnI2C-\"><b>视觉引导</b></p>\n<p data-pid=\"LNk-1MZy\">设计界面我想他们绝对是专业的，毕竟之前是设计手机的，手机最重要的就是用户界面了，整个界面风格极简，视觉焦点很容易就聚焦在小动物，之后就是文字上了，快速将整个游戏的美术风格阐述清晰</p>\n<p data-pid=\"ekXBdpD6\"><b>UI暗示</b></p>\n<p data-pid=\"wfxOobx-\">其次UI设计可以让用户快速明白哪些是可点击的，而哪些是不可点击的，快速找到需求的内容，其实就是左侧的<b>立体</b>字以及右下角有<b>阴影</b>设计的好友按钮——因为主页上的装饰（沙发与小动物）是三维立体的，拥有<b>纵深</b>与<b>阴影</b>，所以按钮的设计两点正是区分是否可以交互的关键</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-39c3297ec779306f7922b02df6bf67ae_b.png\" data-rawwidth=\"105\" data-rawheight=\"79\" data-size=\"normal\" class=\"content_image\" width=\"105\"><figcaption>头像也有阴影</figcaption></figure><p data-pid=\"zumedFG1\"><b>文字</b></p>\n<p data-pid=\"eNsOPylE\">首先聚焦到文字上，作为一款美术风格主打可爱的游戏，字体选用了圆体几乎是最规矩的选择了，可以注意到这类字体是没有棱角的，此类字体通常在视觉上会带有一种童趣感（很多子供向的产品如果需要字体作为设计部分都会使用此类字体）</p>\n<p data-pid=\"j1R083wZ\">通常大家是很不希望孩子接触尖锐物品的，很容易将孩童稚嫩的皮肤划破受到伤害，因此这类字体给予了人们更加温和与安全的感知（插入一段形状与视觉象征的内容）</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-79981fbf2fa38bdc15ca0c4e368f63e3_b.jpg\" data-rawwidth=\"800\" data-rawheight=\"800\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic4.zhimg.com/v2-79981fbf2fa38bdc15ca0c4e368f63e3_r.jpg\"></figure><h2><b>颜色理论</b></h2>\n<p data-pid=\"d4xStYDa\">颜色是对一个美术风格隐形影响最大的因素，并且很容易被忽视，我一直认为当人们看到一个东西的第一感知一定是颜色，因为即使眼睛没有进行对焦，也可以看到很多色块，但却看不清内容，所以即使你的眼睛锁定在某些焦点上的时候，其他区域的颜色仍然能够带来大于形体的影响</p>\n<p data-pid=\"J6ENLc1i\"><b>色彩感受</b></p>\n<p data-pid=\"fpL1LZjm\">《动物派对》主色调使用了黄橙色，这个颜色也是我本人非常喜欢使用的颜色，特别是在卡通类型的游戏中，米色橙色调带着一种阳光的内涵，通常有着温暖的视觉感知，同样有着可爱的象征意义，我们通常感觉黄橙色的小动物更加可爱暖心</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-b0b7ce79d9aa848c345ac54b51fe45f8_b.jpg\" data-rawwidth=\"1080\" data-rawheight=\"1080\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-b0b7ce79d9aa848c345ac54b51fe45f8_r.jpg\"><figcaption>暖心阿柴</figcaption></figure><p data-pid=\"O9riTJlf\"><b>互补色</b></p>\n<p data-pid=\"xUJXBdoC\">整个游戏界面包含界面的小动物和沙发使用的都是橙黄色的调子，只有在沙发顶上打了一盏偏冷色的互补光</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-36bba21cf82fd6955cfd5361875e7121_b.jpg\" data-rawwidth=\"409\" data-rawheight=\"181\" data-size=\"normal\" data-caption=\"\" class=\"content_image\" width=\"409\"></figure><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-3ff9426475a91e24983f4a37ff766902_b.jpg\" data-rawwidth=\"1920\" data-rawheight=\"870\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic3.zhimg.com/v2-3ff9426475a91e24983f4a37ff766902_r.jpg\"><figcaption>之前做的48小时极限开发独立小游戏</figcaption></figure><p data-pid=\"NTw3Aht_\">同样在进入游戏之后使用的主色彩仍然是橙色红色，白色也是处理成米色</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-c01516ff2ac9b1f3e4db6f4a5ae1ae1d_b.jpg\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-c01516ff2ac9b1f3e4db6f4a5ae1ae1d_r.jpg\"></figure><p data-pid=\"OfIccoBb\">大家可能会看到使用了一些绿色的植物，同样绿色我在自己的小游戏也使用了，绿色在色环上是红色的互补色，它同样有着阳光与生机的内涵，用来对暖色调为主的色彩构成进行打破单调是非常好用的颜色</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-22e2dc983732c93b736e63b0824a7d5c_b.jpg\" data-rawwidth=\"523\" data-rawheight=\"427\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"523\" data-original=\"https://pic1.zhimg.com/v2-22e2dc983732c93b736e63b0824a7d5c_r.jpg\"></figure><h2>形状与视觉象征</h2>\n<p data-pid=\"z2ZjbEC0\">形状往往带着强烈的视觉象征，最经典的例子便是《飞屋环游记》的角色设计了</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-6fd2b71e4d6203a966a932b002dda971_b.jpg\" data-rawwidth=\"1000\" data-rawheight=\"571\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"1000\" data-original=\"https://pic2.zhimg.com/v2-6fd2b71e4d6203a966a932b002dda971_r.jpg\"><figcaption>最典型的对比形状设计</figcaption></figure><p data-pid=\"g3WuivG9\">大家可以从老人与孩子的整体形状直接感受到方形带来的规矩感和死板，他不仅头是方的，衣服是方的，甚至眼镜都是方的！同样我们通过视觉元素就可以直接的感受到小孩圆形设计的调皮可爱</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-e5d1b0b9263db0d36909a248352b6fd2_b.jpg\" data-rawwidth=\"427\" data-rawheight=\"408\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"427\" data-original=\"https://pic3.zhimg.com/v2-e5d1b0b9263db0d36909a248352b6fd2_r.jpg\"><figcaption>Emmm，大家可以猜猜这只黄色调圆形设计的狗是什么作用</figcaption></figure><p data-pid=\"8nNfCEg-\"><b>UI形状</b></p>\n<p data-pid=\"4AfI3gei\">有点跑题了，话说回来，我们可以看到除了圆体字以外，《动物派对》的UI按钮没错的话全部都是圆弧的形状设计，这里就不一一举例了</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-fb888130d671ec755ca7fdd862e14493_b.jpg\" data-rawwidth=\"627\" data-rawheight=\"116\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"627\" data-original=\"https://pic4.zhimg.com/v2-fb888130d671ec755ca7fdd862e14493_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-33a220d8a3eead83ea46a743da670488_b.jpg\" data-rawwidth=\"482\" data-rawheight=\"191\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"482\" data-original=\"https://pic1.zhimg.com/v2-33a220d8a3eead83ea46a743da670488_r.jpg\"></figure><p data-pid=\"HddlzopP\">甚至连箭头都要偷偷进行去棱角的设计，可以说《动物派对》的界面风格把控得是非常规范</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-630e01e51513f187f1b0eebcaa7c29b1_b.jpg\" data-rawwidth=\"307\" data-rawheight=\"142\" data-size=\"normal\" data-caption=\"\" class=\"content_image\" width=\"307\"></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-9c9b1063e560ceb45faa7c4c185185db_b.jpg\" data-rawwidth=\"231\" data-rawheight=\"216\" data-size=\"normal\" data-caption=\"\" class=\"content_image\" width=\"231\"></figure><p data-pid=\"njFzRLNm\"><b>角色元素</b></p>\n<p data-pid=\"3J0NB0Eg\">在游戏角色的设计上也是清一色使用了圆形设计，所有角色都没有尖锐的棱角，棱角在此游戏中会带来可作为伤害的感知，独角兽，鸭嘴等为了打破形状构成的设计也被处理成和圆角设计避免尖锐</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-d40bb0a26d7a8b77895da134e0d40051_b.jpg\" data-rawwidth=\"893\" data-rawheight=\"374\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"893\" data-original=\"https://pic2.zhimg.com/v2-d40bb0a26d7a8b77895da134e0d40051_r.jpg\"></figure><p data-pid=\"lN4I7Oqq\">在最新宣传片出场的猪猪角色中，其手上戴的本应是尖刺的设计仍然继续遵循了此规则</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-65789d64de5206fd9a0141124f57b18b_b.jpg\" data-rawwidth=\"404\" data-rawheight=\"326\" data-size=\"normal\" data-caption=\"\" class=\"content_image\" width=\"404\"></figure><p data-pid=\"3p3P76Ta\">但是大家可能会发现，到了游戏内的新手关卡，就有非常大量的近方形的设计，这些如果是属于装饰物的话，其实起到就是打破构成的意义，过多的圆形太过于单调，长时间会感觉到视觉疲劳</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-a5c251a6e2fdc7618c8828f3c47a880e_b.jpg\" data-rawwidth=\"513\" data-rawheight=\"153\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"513\" data-original=\"https://pic3.zhimg.com/v2-a5c251a6e2fdc7618c8828f3c47a880e_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-83b6464a4d956207ebbbb31c0a809687_b.png\" data-rawwidth=\"118\" data-rawheight=\"109\" data-size=\"normal\" data-caption=\"\" class=\"content_image\" width=\"118\"></figure><p data-pid=\"wUvNPlQl\"><b>其他意义</b></p>\n<p data-pid=\"HNADXdGI\">然而有一些gameplay也就是需要涉及到游戏内容的交互部分的元素也有使用到棱角的设计，从这里开始就进入到游戏这一数字娱乐专有设计与通用设计有所不同的部分——关卡引导</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-3e5b08d2b14941304d3deeb9502f55ec_b.jpg\" data-rawwidth=\"856\" data-rawheight=\"491\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"856\" data-original=\"https://pic1.zhimg.com/v2-3e5b08d2b14941304d3deeb9502f55ec_r.jpg\"></figure><p data-pid=\"QyJwozaM\">我们首先进入这个房间的时候，因为大多数棱角设计的元素都有着让如此可爱柔软的圆形设计小动物天然的想要远离的感受，我们可以从关卡提示看出来此时设计师也是想要玩家先去体验击打沙袋的流程，因此玩家都会暂时绕开此尖锐的元素</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-521a414537f51166d49b77f6c76b93fe_b.jpg\" data-rawwidth=\"314\" data-rawheight=\"189\" data-size=\"normal\" data-caption=\"\" class=\"content_image\" width=\"314\"></figure><p data-pid=\"awmyfw1r\">直到提示玩家可以尝试打碎展示柜时，玩家尝试触碰尖锐元素</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-6955a2b826835a6fddf8d898d59d428d_b.jpg\" data-rawwidth=\"332\" data-rawheight=\"245\" data-size=\"normal\" data-caption=\"\" class=\"content_image\" width=\"332\"></figure><h2>材质与视觉感知</h2>\n<p data-pid=\"m3q4Y1Sm\">如果前面都是说其设计的好的地方，那么材质是《动物派对》没有处理好的一个显著因素，可能因为材质在其他领域并没有游戏领域使用的程度高</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-38a865eb4cdcc07e6d37547aec123187_b.jpg\" data-rawwidth=\"227\" data-rawheight=\"218\" data-size=\"normal\" data-caption=\"\" class=\"content_image\" width=\"227\"></figure><p data-pid=\"kKNQFn2h\"><b>质感</b></p>\n<p data-pid=\"w5DUqEBT\">在一个以卡通，柔软为主的美术风格里，与柔软质感格格不入的材质应该进行弱化，首先服饰的布料质感应以柔软为主，在卡通视角下，在尖锐物以下第二反风格的元素就是坚硬物</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-09a9b0d9f5065224101c952361db6fef_b.png\" data-rawwidth=\"164\" data-rawheight=\"206\" data-size=\"normal\" class=\"content_image\" width=\"164\"><figcaption>柔软的衣物质感</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-09ea5033709d0f6ce8ee50ffc6275406_b.jpg\" data-rawwidth=\"279\" data-rawheight=\"199\" data-size=\"normal\" class=\"content_image\" width=\"279\"><figcaption>过于强的质感表现坚硬物品</figcaption></figure><p data-pid=\"_f5dv_3X\">其中猪猪的铁刺是一个处理得当的材质，强化其粗糙度以削弱其反光的金属质感的视觉感知</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-65789d64de5206fd9a0141124f57b18b_b.jpg\" data-rawwidth=\"404\" data-rawheight=\"326\" data-size=\"normal\" data-caption=\"\" class=\"content_image\" width=\"404\"></figure><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-b15892d142ee0a26f163f8a344e9cd96_b.jpg\" data-rawwidth=\"271\" data-rawheight=\"234\" data-size=\"normal\" data-caption=\"\" class=\"content_image\" width=\"271\"></figure><p data-pid=\"M_dniQCs\">大家可以感受到石头没有很坚硬的感受但是金属却有着这样的视觉感知</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-9fc57a270d1e0e27e06e8432dfd843f0_b.jpg\" data-rawwidth=\"637\" data-rawheight=\"344\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"637\" data-original=\"https://pic1.zhimg.com/v2-9fc57a270d1e0e27e06e8432dfd843f0_r.jpg\"></figure><p data-pid=\"gJa7J_FK\"><b>纹理细节度</b></p>\n<p data-pid=\"n73tWMam\">对于材质纹理的细节度把控也是一个显著的风格不统一因素，在新手关卡以及游戏的石头平台关卡的材质细节度是较低的，与角色的材质质感较为统一</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-a9ee8ce2a6befb1ebceacfca943b0798_b.jpg\" data-rawwidth=\"512\" data-rawheight=\"281\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"512\" data-original=\"https://pic1.zhimg.com/v2-a9ee8ce2a6befb1ebceacfca943b0798_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-cf29b87674df75a48a0f26466c538b49_b.jpg\" data-rawwidth=\"699\" data-rawheight=\"278\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"699\" data-original=\"https://pic2.zhimg.com/v2-cf29b87674df75a48a0f26466c538b49_r.jpg\"></figure><p data-pid=\"18mjlYQp\">同样是在处理金属质感的材质的时候，为了表现材质加入了过多的不必要的细节，并且造成了风格略微的不统一</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-c2d5b367e590412d6c60cb46fdf49a1e_b.jpg\" data-rawwidth=\"566\" data-rawheight=\"330\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"566\" data-original=\"https://pic3.zhimg.com/v2-c2d5b367e590412d6c60cb46fdf49a1e_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-5a3badec8f7878fce06f25378526602e_b.jpg\" data-rawwidth=\"366\" data-rawheight=\"245\" data-size=\"normal\" data-caption=\"\" class=\"content_image\" width=\"366\"></figure><p data-pid=\"5WFq2pZg\">最新宣传片中合理的金属质感</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-69b9231ce90825bbca30efd94095a251_b.jpg\" data-rawwidth=\"840\" data-rawheight=\"378\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"840\" data-original=\"https://pic2.zhimg.com/v2-69b9231ce90825bbca30efd94095a251_r.jpg\"></figure><p data-pid=\"Jj7oqnFA\"><b>完全错误的shader写实度</b></p>\n<p data-pid=\"xPnvSwY8\">水体质感模拟在众多游戏中的都是一个比较难以把控的部分，我们上次在说《摩尔庄园》手游的时候就有说到水体shader的风格不统一问题，这不是又来了</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-1d490044bd6b3095908b0ebba7125958_b.jpg\" data-rawwidth=\"231\" data-rawheight=\"227\" data-size=\"normal\" data-caption=\"\" class=\"content_image\" width=\"231\"></figure><p data-pid=\"riPORwTw\">过高的写实度模拟，与游戏其他的元素放在一起显得格格不入</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-82f6ea9d1d779f06354bd47102134f27_b.jpg\" data-rawwidth=\"595\" data-rawheight=\"330\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"595\" data-original=\"https://pic4.zhimg.com/v2-82f6ea9d1d779f06354bd47102134f27_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-fd95d776e577f98a59199afa64ee8e94_b.jpg\" data-rawwidth=\"750\" data-rawheight=\"397\" data-size=\"normal\" data-caption=\"\" class=\"origin_image zh-lightbox-thumb\" width=\"750\" data-original=\"https://pic1.zhimg.com/v2-fd95d776e577f98a59199afa64ee8e94_r.jpg\"></figure><p data-pid=\"IjKr5my6\">今天就聊到这里</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-e39f01f8a3b7697fb58cff9c057e20db_b.jpg\" data-rawwidth=\"271\" data-rawheight=\"231\" data-size=\"normal\" data-caption=\"\" class=\"content_image\" width=\"271\"></figure><p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhen-he-9?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">枕鹤</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/431188358?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"《最后的生还者》中的游戏内与电影灯光（GDC2014）","date":"2022-11-01 07:56:13","description":"\n<h3>前言</h3>\n<p data-pid=\"yugRhY8Y\">从在后世界末日世界中创造视觉上可信的环境到支持复杂的故事叙述，灯光在《最后生还者》中发挥着巨大的作用。本次演讲旨在通过我们的概念艺术灵感、照明管道中的实验以及我们为实现所需的渲染结果。该课程将为您提供我们的游戏内照明和电影照明之间的基本流程和差异。</p>\n<p data-pid=\"uVN2CiO8\">灯光在游戏中起到了巨大的作用，从创造一个视觉上完美的环境和角色，再到支持复杂的故事叙事。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-0ae3b2f1c8b949010de27b71663c648d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"1125\" class=\"origin_image zh-lightbox-thumb\" width=\"2000\" data-original=\"https://pic2.zhimg.com/v2-0ae3b2f1c8b949010de27b71663c648d_r.jpg\"></figure><h2>概述与背景</h2>\n<h3>概述</h3>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-872c07c3bd9d2fbeff5d7f43d49dc500_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1785\" data-rawheight=\"867\" class=\"origin_image zh-lightbox-thumb\" width=\"1785\" data-original=\"https://pic1.zhimg.com/v2-872c07c3bd9d2fbeff5d7f43d49dc500_r.jpg\"></figure><p data-pid=\"UWio6YDJ\">这个演讲主要的目的是让大家了解我们的灯光流程，灯光的改进是如何从概念设计中汲取灵感，我们的游戏内灯光和电影灯光的经验，以及它们之间的差异。</p>\n<h3>背景</h3>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-275bd7d88f7b982b540d6e8ca34fc348_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1771\" data-rawheight=\"951\" class=\"origin_image zh-lightbox-thumb\" width=\"1771\" data-original=\"https://pic1.zhimg.com/v2-275bd7d88f7b982b540d6e8ca34fc348_r.jpg\"></figure><p data-pid=\"GYaC5JvN\">游戏故事发生在20年之后，那时候真菌感染在人类中爆发，军方已经在许多主要的战区建立了隔离区；所以他们设置了检查点，在那里对平民进行皮下感染测试。</p>\n<h3>对比</h3>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-63962766a0df886aa4274e394e57654a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1877\" data-rawheight=\"939\" class=\"origin_image zh-lightbox-thumb\" width=\"1877\" data-original=\"https://pic3.zhimg.com/v2-63962766a0df886aa4274e394e57654a_r.jpg\"></figure><p data-pid=\"YIvBcrYS\">对比是其中一个关键要素，我们非常希望能够在游戏中展现故事、人物、环境以及游戏的玩法。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-1e5ef9b7dcf4963ec3e60a3712af529a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1880\" data-rawheight=\"921\" class=\"origin_image zh-lightbox-thumb\" width=\"1880\" data-original=\"https://pic3.zhimg.com/v2-1e5ef9b7dcf4963ec3e60a3712af529a_r.jpg\"></figure><p data-pid=\"s6EdCbuU\">这里有一些环境概念，可以从很低的亮度中看出来，这片区域黑暗的想法。感染实际上隐藏在其中，所以灯光必须创造出真正令人毛骨悚然和忧郁的基调。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-623bc8b0f2a6c9ad4f96a8f609e600e0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1880\" data-rawheight=\"901\" class=\"origin_image zh-lightbox-thumb\" width=\"1880\" data-original=\"https://pic1.zhimg.com/v2-623bc8b0f2a6c9ad4f96a8f609e600e0_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-58cfcae787a5cac94c7d5e9b464eb16d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1874\" data-rawheight=\"937\" class=\"origin_image zh-lightbox-thumb\" width=\"1874\" data-original=\"https://pic2.zhimg.com/v2-58cfcae787a5cac94c7d5e9b464eb16d_r.jpg\"></figure><p data-pid=\"g9jdzG_5\">也有郁郁葱葱的，杂草丛生的环境，需要有充满活力的灯光，以显示微妙的自然之美，植被在20年之后重新爬满世界。</p>\n<h3>自然光至关重要</h3>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-b410d53762b73acf6bdcf0ea22709b59_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1879\" data-rawheight=\"943\" class=\"origin_image zh-lightbox-thumb\" width=\"1879\" data-original=\"https://pic2.zhimg.com/v2-b410d53762b73acf6bdcf0ea22709b59_r.jpg\"></figure><p data-pid=\"LWNSCpoE\">我们会问这个世界上还有什么光源存在？对于打光师来说，最大的挑战之一就是我们能够使用的人造光源很有限。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-eff8485f56b312302052896404c2b125_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1881\" data-rawheight=\"921\" class=\"origin_image zh-lightbox-thumb\" width=\"1881\" data-original=\"https://pic2.zhimg.com/v2-eff8485f56b312302052896404c2b125_r.jpg\"></figure><p data-pid=\"1oZhjwmd\">由于这些原因，大部分的电力或者人造光源确实远离了这个世界，所以自然光源变得至关重要。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-0858508167a9b2f95a9a207b709caa25_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1875\" data-rawheight=\"930\" class=\"origin_image zh-lightbox-thumb\" width=\"1875\" data-original=\"https://pic2.zhimg.com/v2-0858508167a9b2f95a9a207b709caa25_r.jpg\"></figure><p data-pid=\"BKl5fmdl\">关键的阳光和天空，它们是主要的光源，大部分的环境都是背光的，只能靠间接光进行照明。</p>\n<h2>间接照明管线</h2>\n<h3>什么是间接光？（Bounce Light）</h3>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-f71b4a836f8b04117dcfa343af2d352d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1880\" data-rawheight=\"908\" class=\"origin_image zh-lightbox-thumb\" width=\"1880\" data-original=\"https://pic2.zhimg.com/v2-f71b4a836f8b04117dcfa343af2d352d_r.jpg\"></figure><p data-pid=\"rsl85aIZ\">大多数人应该已经有了答案，所以我们快速过一下。</p>\n<p data-pid=\"9YdVu04V\">间接光是一种基于间接照明的灯光，它能够在游戏中创造柔和的阴影，并不同表面相互作用下显示出不同的高光于光源方向。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-5aa331832e9180b697d908c31ae02719_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1855\" data-rawheight=\"941\" class=\"origin_image zh-lightbox-thumb\" width=\"1855\" data-original=\"https://pic2.zhimg.com/v2-5aa331832e9180b697d908c31ae02719_r.jpg\"></figure><p data-pid=\"NMyBoM5Q\">此外，间接光展示了模型和阴影微妙的细节之美，这正是我们想要的。如果你注意到这个概念艺术，你能够看到的只有室内照明，而没有直射光。</p>\n<h3>手电筒间接光</h3>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-93b161c28eedd5b565c8b93d2ea525aa_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1878\" data-rawheight=\"888\" class=\"origin_image zh-lightbox-thumb\" width=\"1878\" data-original=\"https://pic3.zhimg.com/v2-93b161c28eedd5b565c8b93d2ea525aa_r.jpg\"></figure><p data-pid=\"ftvRItim\">手电筒是游戏中的关键元素之一，这正是我们真正想要在低光条件下为玩家提供的支持功能。让间接光在手电筒上表现是这个项目的一个重大举措。</p>\n<h2>实现方案</h2>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-51eeb4f47cad90f4b40a3cd92bcbc837_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1779\" data-rawheight=\"659\" class=\"origin_image zh-lightbox-thumb\" width=\"1779\" data-original=\"https://pic4.zhimg.com/v2-51eeb4f47cad90f4b40a3cd92bcbc837_r.jpg\"></figure><p data-pid=\"U7WviRtZ\">让我们来看一下照明管线，所以我们仍然使用着非常相似的照明系统，我们就是在混合系统的基础上，之后进行了三个改进。我们烘培了静态照明和顶点照明在光照贴图上，关于动态灯光部分因为仅适用于直射光，比如实时光或者太阳光之类的。阴影是烘培阴影和实时阴影的组合。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-7dc3752922a643725a395386afdb6e56_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1872\" data-rawheight=\"629\" class=\"origin_image zh-lightbox-thumb\" width=\"1872\" data-original=\"https://pic3.zhimg.com/v2-7dc3752922a643725a395386afdb6e56_r.jpg\"></figure><p data-pid=\"2MtgeSsz\">我们使用了三种技术上的改进：</p>\n<ul>\n<li data-pid=\"5C2sZRbN\"><b>主导方向</b></li>\n<li data-pid=\"Ptwq10KD\"><b>角色的环境阴影</b></li>\n<li data-pid=\"ytq8EqiG\"><b>手电筒的间接光</b></li>\n</ul>\n<h2><b>主导方向</b></h2>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-cc5ec63ed85a3820f591840130569b5c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1849\" data-rawheight=\"588\" class=\"origin_image zh-lightbox-thumb\" width=\"1849\" data-original=\"https://pic1.zhimg.com/v2-cc5ec63ed85a3820f591840130569b5c_r.jpg\"></figure><p data-pid=\"013eoQ4c\">这是一种用来烘培灯光方向进入到环境的方法，条件是这块区域是没有实时阳光的环境光照的。这储存了3个模块，灯光方向、颜色和强度。这创造了更多的高光方向，在与光照贴图和法线贴图的组合之后创建出更真实的场景。</p>\n<h3><b>参考依据</b></h3>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-7d52e38dc5f39b85a3408223217b0c12_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1707\" data-rawheight=\"620\" class=\"origin_image zh-lightbox-thumb\" width=\"1707\" data-original=\"https://pic3.zhimg.com/v2-7d52e38dc5f39b85a3408223217b0c12_r.jpg\"></figure><p data-pid=\"LnCw7F86\">以下展示的图片都只有环境光，没有直射光。如果你注意看灯光如何在表面上进行反射以表现高光。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-bf215492bf8f5831665bd2b39c5e3d72_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1780\" data-rawheight=\"889\" class=\"origin_image zh-lightbox-thumb\" width=\"1780\" data-original=\"https://pic3.zhimg.com/v2-bf215492bf8f5831665bd2b39c5e3d72_r.jpg\"></figure><p data-pid=\"Pxx9zxtD\">环境光对于这些照片来说是很重要的，它提供了一个具有一般照明的区域。与定向光相比这种类型的照明它的半径与亮度非常舒适。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-0f6c39ad0e6bb70ed7f88054ef1f5a0b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1778\" data-rawheight=\"891\" class=\"origin_image zh-lightbox-thumb\" width=\"1778\" data-original=\"https://pic4.zhimg.com/v2-0f6c39ad0e6bb70ed7f88054ef1f5a0b_r.jpg\"></figure><p data-pid=\"OSpEz1Qc\">环境光同样也从一个场景的入光口进入，也被称为自然光。你可以在你家里的任何地方找到他，在一个走廊、仓库或者在一个非常阳光明媚的日子，大雾天或者城市的夜晚。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-1599a365a2952978ba0b2aa4a8c136e6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1794\" data-rawheight=\"899\" class=\"origin_image zh-lightbox-thumb\" width=\"1794\" data-original=\"https://pic3.zhimg.com/v2-1599a365a2952978ba0b2aa4a8c136e6_r.jpg\"></figure><p data-pid=\"TX8sPdJC\">你现在看到的停车场照片，我主要拍的是天花板上的橙色光和车上的光，他们实际上来自于间接光。有一块橙色的防水布在后面，阳光穿透防水布然后照亮了。在右侧的车库照片，环境光也照亮了整个仓库。</p>\n<h3>对照测试</h3>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-0a4b5b15512462e07678197e6ceb3b55_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1782\" data-rawheight=\"774\" class=\"origin_image zh-lightbox-thumb\" width=\"1782\" data-original=\"https://pic2.zhimg.com/v2-0a4b5b15512462e07678197e6ceb3b55_r.jpg\"></figure><p data-pid=\"zH3WInP_\">我们开始尝试一些东西，这是前两个测试关卡，我们曾经测试过主导方向。后面的窗户是光源，再次重申没有直接光，两个关卡我们都使用了同样的参数，左侧是打开了主导方向功能，右侧则是关闭。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-f8367563fe34e33b9068c6a790a8b4fd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1785\" data-rawheight=\"799\" class=\"origin_image zh-lightbox-thumb\" width=\"1785\" data-original=\"https://pic2.zhimg.com/v2-f8367563fe34e33b9068c6a790a8b4fd_r.jpg\"></figure><p data-pid=\"CqMxcMCU\">我们来看看场景中的模型，只使用单一的着色器，也只使用一个平均色。对于我来说，灰色纹理是一个非常简单的棋盘格图案，加上几何法线，这就是全部，没有什么特别的。</p>\n<p data-pid=\"bsu7o3TO\">所以这就只是一个灯光调试（debug）场景而已，你可以看到当左侧的功能打开时，高光全部都符合主光源方向，地板和天花板以及台面，所有的表面是都有同样的高光。</p>\n<p data-pid=\"55YmNxyT\">而右侧的功能关闭了，高光反射实际上现实是错误的，最强的坏值是甚至是与摄像机视角相反的，而并非与主光方向相反。这看起来很不对劲，我们不想这样。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-e9392151131179359a3ac045971d8f85_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1786\" data-rawheight=\"792\" class=\"origin_image zh-lightbox-thumb\" width=\"1786\" data-original=\"https://pic2.zhimg.com/v2-e9392151131179359a3ac045971d8f85_r.jpg\"></figure><p data-pid=\"xu2722Lc\">这是只显示了光照贴图和法线贴图的情况，同样，当启用该功能的时候，你会注意到更多的几何体表现了正确的灯光方向，并且效果更强更好。另一边则表面光线特征是不能表现的，并且法线效果很弱甚至是错误的。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-12e08feebc44213f17b42b9c19e9507c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1792\" data-rawheight=\"784\" class=\"origin_image zh-lightbox-thumb\" width=\"1792\" data-original=\"https://pic1.zhimg.com/v2-12e08feebc44213f17b42b9c19e9507c_r.jpg\"></figure><p data-pid=\"-m9Udpm8\">最后是具有漫射图，光照贴图，法线图，高光图组合的结果，我们证明了这是我们可以展现出来的东西。这个想法可以实现概念艺术中我们想要的效果，主导方向恰当地展示了光方向和强度带来的效果。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-82614586e6594ce70306e2ce7d1d697e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1790\" data-rawheight=\"777\" class=\"origin_image zh-lightbox-thumb\" width=\"1790\" data-original=\"https://pic3.zhimg.com/v2-82614586e6594ce70306e2ce7d1d697e_r.jpg\"></figure><p data-pid=\"YDcAn0mM\">现在我们把摄像机转到180度，如果你注意右边的图的话，这是相反的角度，你可以发现现在的高光不是很强，因为没有面向光的方向。这是一种基于现实的正确方法，这就是我们想要的，并且几乎仍然正确地出现。</p>\n<h3>游戏中的主导方向</h3>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-39d485499e2391dce9629f8a47fa5f05_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1782\" data-rawheight=\"871\" class=\"origin_image zh-lightbox-thumb\" width=\"1782\" data-original=\"https://pic2.zhimg.com/v2-39d485499e2391dce9629f8a47fa5f05_r.jpg\"></figure><p data-pid=\"fd0f_1CV\">这是我们在游戏上的一些屏幕截图，第一个窗户在门外，窗户是入光口，所以地板和天花板在这个方向看高光很强。你也可以看到乔尔跟随地板上的灯光指示前进。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-7f5a0539cb3960dd74d42a92505236d0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1747\" data-rawheight=\"866\" class=\"origin_image zh-lightbox-thumb\" width=\"1747\" data-original=\"https://pic1.zhimg.com/v2-7f5a0539cb3960dd74d42a92505236d0_r.jpg\"></figure><p data-pid=\"Re2bt3S-\">这是另一个正确的方向，光从窗外射入，墙壁和地板从这个角度来看高光真的很强。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-3ee7889850f9f5d273eb6f398c07987a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1760\" data-rawheight=\"863\" class=\"origin_image zh-lightbox-thumb\" width=\"1760\" data-original=\"https://pic3.zhimg.com/v2-3ee7889850f9f5d273eb6f398c07987a_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-b9f5a49167738c877ae3de180c631157_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1731\" data-rawheight=\"862\" class=\"origin_image zh-lightbox-thumb\" width=\"1731\" data-original=\"https://pic4.zhimg.com/v2-b9f5a49167738c877ae3de180c631157_r.jpg\"></figure><p data-pid=\"biso2bP8\">这里也是一样，光源方向从外部进入，如果你注意到左边的墙壁，有一堆照片的那边，这里的高光更强。然后我们把摄像机转到180度，在同一面墙上跟我们之前看到的比起来要更干更弱。因为这是一个“冷面”，他不是面向光源方向的视角。另一方面，你可以注意到后面的墙高光更强，因为它符合光源方向。</p>\n<h2>周边阴影</h2>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-45633a66fc81e8d1c2104d3358e35ff0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1851\" data-rawheight=\"610\" class=\"origin_image zh-lightbox-thumb\" width=\"1851\" data-original=\"https://pic1.zhimg.com/v2-45633a66fc81e8d1c2104d3358e35ff0_r.jpg\"></figure><p data-pid=\"3QXy2IH9\">第二个改进就是环境阴影，这适用于角色和动态对象。我们基于主要光源方向来制造的阴影效果，这对项目来说是一个巨大的胜利，因为他把这个角色融入了背景之中。</p>\n<h3>实现原理</h3>\n<p data-pid=\"7rmIjTSS\">两者都是由我们的图形工程师迈克尔（Michael Iwanili）开发的，我将展示他从《最后的生还者》的灯光技术中使用的技术。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-c0750379cf95f341f0394aabebd4dbf4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1721\" data-rawheight=\"852\" class=\"origin_image zh-lightbox-thumb\" width=\"1721\" data-original=\"https://pic1.zhimg.com/v2-c0750379cf95f341f0394aabebd4dbf4_r.jpg\"></figure><p data-pid=\"wrkV8QSm\">他使用球体近似遮挡，对于每个球体分别遮挡了几个不同的组件。</p>\n<p data-pid=\"Kn_oO2hC\"><b>周边分量</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-4d8c7b95ac57dcb3e05cd09c5e79c696_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1717\" data-rawheight=\"864\" class=\"origin_image zh-lightbox-thumb\" width=\"1717\" data-original=\"https://pic3.zhimg.com/v2-4d8c7b95ac57dcb3e05cd09c5e79c696_r.jpg\"></figure><p data-pid=\"BnGcvr8N\">第一个是周边分量，这是一个余弦加权百分比的半球闭塞的球体，如果你完全逆向与光线入射更方向，你就完全处于阴影中。</p>\n<p data-pid=\"ityrbLJS\"><b>方向分量</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-709ca8d3eb9fd6656c0dde5e3c9a56c9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1774\" data-rawheight=\"860\" class=\"origin_image zh-lightbox-thumb\" width=\"1774\" data-original=\"https://pic2.zhimg.com/v2-709ca8d3eb9fd6656c0dde5e3c9a56c9_r.jpg\"></figure><p data-pid=\"-k6nrg7v\">另一个是方向分量，它从一个阴影中的点沿着光源方向追踪一个圆锥体，检查与球体的交集。这样就可以得知光源方向来自哪里了。</p>\n<h3>对照测试</h3>\n<p data-pid=\"9-ItvI_s\">下面通过视频演示比较有无环境阴影的差异，如果你注意右边，你可以看到角色一路走过来。在右边的走廊上，有投下一个阴影。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-79180c8c8f2949ff6bafc2a2c8a0c8fd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"1125\" class=\"origin_image zh-lightbox-thumb\" width=\"2000\" data-original=\"https://pic2.zhimg.com/v2-79180c8c8f2949ff6bafc2a2c8a0c8fd_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-3b799c5e7d7a35c9155fdc25a1d6e0a6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"1125\" class=\"origin_image zh-lightbox-thumb\" width=\"2000\" data-original=\"https://pic3.zhimg.com/v2-3b799c5e7d7a35c9155fdc25a1d6e0a6_r.jpg\"></figure><p data-pid=\"Jgja6wjk\">左侧的角色并没有真正的着地阴影，右边则可以看出来，尤其是底部的灯光更明显。左边的角色看起来是漂浮着的。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-0b65f7bca6daa73aa0f3838e4c4cea12_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1770\" data-rawheight=\"802\" class=\"origin_image zh-lightbox-thumb\" width=\"1770\" data-original=\"https://pic3.zhimg.com/v2-0b65f7bca6daa73aa0f3838e4c4cea12_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-d6254b235a557a23a98743ed313b0a48_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1771\" data-rawheight=\"780\" class=\"origin_image zh-lightbox-thumb\" width=\"1771\" data-original=\"https://pic1.zhimg.com/v2-d6254b235a557a23a98743ed313b0a48_r.jpg\"></figure><p data-pid=\"nszVcfRD\">他们看起来是漂浮的，并且看起来并不正确。因此，一旦这个功能被启用，它们就会正确地表现接地阴影，你可以看到边上的柱子接收正确的阴影。所以实际上，它在整个场景中都会使用，这真的很微妙，你到处走动的时候可以看出来。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-82b54f3ac72c13b160bb0d28aeb71cbd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1777\" data-rawheight=\"794\" class=\"origin_image zh-lightbox-thumb\" width=\"1777\" data-original=\"https://pic2.zhimg.com/v2-82b54f3ac72c13b160bb0d28aeb71cbd_r.jpg\"></figure><p data-pid=\"Q4FqJjK3\">我们使用了一个非常简单的胶囊体来替代计算阴影，我们不使用实际的角色模型，因为它们非常复杂。这样要节省得多性能开销，而且用柔和的阴影看起来很不错，我们真的很喜欢。对于每个角色，我们有大约14个胶囊来替代它们身体部位，这就是我们如何计算一个更节省的解决方案。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-8014e859b7845ae3f4c0d87780a1ab63_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1791\" data-rawheight=\"783\" class=\"origin_image zh-lightbox-thumb\" width=\"1791\" data-original=\"https://pic4.zhimg.com/v2-8014e859b7845ae3f4c0d87780a1ab63_r.jpg\"></figure><p data-pid=\"gR52ZoJd\">这是一个另一个显示此功能对于非人类角色也适用的功能示例。当功能关闭时，不仅是乔尔和艾莉，马也看起来不接地。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-57450dc2998b4f0db6d7ab5c215a9bec_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1789\" data-rawheight=\"784\" class=\"origin_image zh-lightbox-thumb\" width=\"1789\" data-original=\"https://pic1.zhimg.com/v2-57450dc2998b4f0db6d7ab5c215a9bec_r.jpg\"></figure><p data-pid=\"H_76WVd-\">打开功能后，一切正常。我们还将环境遮挡阴影应用于一些其他的动态探测，但我们使用的是不同的方法，不过是一样的思路。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-33ca7f064a67030ef3971e75891ade04_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1789\" data-rawheight=\"783\" class=\"origin_image zh-lightbox-thumb\" width=\"1789\" data-original=\"https://pic1.zhimg.com/v2-33ca7f064a67030ef3971e75891ade04_r.jpg\"></figure><p data-pid=\"A6xG2iun\">在整个效果中，我们渲染了四分之一的缓冲分辨率，因为自然的低分辨率自阴影效果很好。</p>\n<h3>余角参数</h3>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-efcf9141dd5d56aa4fdca73899c61f66_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1710\" data-rawheight=\"859\" class=\"origin_image zh-lightbox-thumb\" width=\"1710\" data-original=\"https://pic3.zhimg.com/v2-efcf9141dd5d56aa4fdca73899c61f66_r.jpg\"></figure><p data-pid=\"fuwI1HFQ\">这同样来自迈克尔的分享，用于跟踪环境分量的余角参数，实际上是暴露给灯光师的。我们可以控制班阴影的大小，如果我想控制我的阴影更加柔和，我会把它改成更高的角度。对于像阴天这样的天气，这看起来很合适。如果有什么原因你想要你的光方向或者阴影更加显著，可以把角度调到更低。</p>\n<h2>手电筒光照反弹</h2>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-ac9f65f591b86df3ceeb1b50ed540d16_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1831\" data-rawheight=\"591\" class=\"origin_image zh-lightbox-thumb\" width=\"1831\" data-original=\"https://pic3.zhimg.com/v2-ac9f65f591b86df3ceeb1b50ed540d16_r.jpg\"></figure><p data-pid=\"DIrX9rzz\">第三个是手电筒的间接照明。</p>\n<p data-pid=\"ZsAyQlJA\">我们为什么需要这个功能？因为当玩家在非常黑暗的室内感到无聊的时候，我们游戏中有甚多这样的情况，所以我们想展示手电筒的间接照明。这无法通过静态光烘培实现，因为手电筒链接到玩家，因此手电筒的位置、强度和光亮都是每帧可以改变的。</p>\n<h3>实现原理</h3>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-812513875c366f0a09d559d10a6ecae3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1752\" data-rawheight=\"774\" class=\"origin_image zh-lightbox-thumb\" width=\"1752\" data-original=\"https://pic4.zhimg.com/v2-812513875c366f0a09d559d10a6ecae3_r.jpg\"></figure><p data-pid=\"kQauvpCY\">这个渲染技术是由我们的另一位图形开发工程师徐克（Ke Xu）开发的。我们使用了一种叫做“反射阴影贴图”的算法，它支持对完全动态的光源和场景多边形实现间照明效果。模拟间接照明的计算成本很高，因为每个游戏中的物体都会成为潜在的光源！</p>\n<h3>对照测试</h3>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-52d80377ac36617376b24197b9782124_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1785\" data-rawheight=\"775\" class=\"origin_image zh-lightbox-thumb\" width=\"1785\" data-original=\"https://pic1.zhimg.com/v2-52d80377ac36617376b24197b9782124_r.jpg\"></figure><p data-pid=\"WeHNcfWB\">很多的游戏关卡都有使用手电筒的玩法，通常我们只能负担得起渲染一个穿梭投射的聚光灯，并且是实际上是没有间接照明的实时计算。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-83d5524a4ab2def1dc2c5173055abdc2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1792\" data-rawheight=\"773\" class=\"origin_image zh-lightbox-thumb\" width=\"1792\" data-original=\"https://pic3.zhimg.com/v2-83d5524a4ab2def1dc2c5173055abdc2_r.jpg\"></figure><p data-pid=\"Zj10sCEE\">但现在打开该功能后，你可以注意到当乔尔把它的手电筒指向橙色的墙壁的时候，它会将橙色反弹光反射到附近的模型上，并且在这个空间里看上去很合理。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-6f56f862bf40b9cd0d2488e65161e831_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1786\" data-rawheight=\"779\" class=\"origin_image zh-lightbox-thumb\" width=\"1786\" data-original=\"https://pic2.zhimg.com/v2-6f56f862bf40b9cd0d2488e65161e831_r.jpg\"></figure><p data-pid=\"b02o_R63\">同样当功能禁用时，我们有很多的植被和细节在过黑的地方，我们都想可以看到。即使我们试图创造一些令人毛骨悚然的感觉，我们仍然想展示微妙的细节，因为一个人的眼睛你有光源印象，任何的表面它都应该有简介照明。所以这很合适，我们也很喜欢。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-aa20d8fe454d6af2a7ff336ae563bc1e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1783\" data-rawheight=\"771\" class=\"origin_image zh-lightbox-thumb\" width=\"1783\" data-original=\"https://pic3.zhimg.com/v2-aa20d8fe454d6af2a7ff336ae563bc1e_r.jpg\"></figure><p data-pid=\"qoBdRPet\">打开后你可以看到所有的绿色光线从植被上被反射，如果我们想要为了性能目的，我们可以调整光线反弹的强度和半径，或者其他的参数。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-f62fcc34eb75a1c2d1e3d304a2e10895_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"979\" class=\"origin_image zh-lightbox-thumb\" width=\"2000\" data-original=\"https://pic2.zhimg.com/v2-f62fcc34eb75a1c2d1e3d304a2e10895_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-1e82c0f8fb1f5df4bcbe17334a9d00f0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"1031\" class=\"origin_image zh-lightbox-thumb\" width=\"2000\" data-original=\"https://pic1.zhimg.com/v2-1e82c0f8fb1f5df4bcbe17334a9d00f0_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-631ecfed133a24fd42d463124ff92222_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"950\" class=\"origin_image zh-lightbox-thumb\" width=\"2000\" data-original=\"https://pic3.zhimg.com/v2-631ecfed133a24fd42d463124ff92222_r.jpg\"></figure><p data-pid=\"TU5owXR9\">这个功能同样也是渲染四分之一的缓冲区，因为这适用于全屏有时我们确实得到一些错误的效果，但大多是时候它都很好。有些区域我们都可以负担得起，有些区域我们负担不起，对于一些玩家来说我们不得不关闭这个功能。</p>\n<h3>手电筒的互动功能</h3>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-005f06b5ac8a8596eab918825627efb5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1830\" data-rawheight=\"618\" class=\"origin_image zh-lightbox-thumb\" width=\"1830\" data-original=\"https://pic2.zhimg.com/v2-005f06b5ac8a8596eab918825627efb5_r.jpg\"></figure><p data-pid=\"Xeosfpjp\">对于手电筒，我们有一些互动功能。</p>\n<p data-pid=\"l6pnfgXq\">首先手电筒上的遮光部分是全局的，它可以根据手电筒的实际指向对象的距离进行更改，就像一个真的手电筒。</p>\n<p data-pid=\"korsGy5N\">第二是全局遮光纹理的模糊也可以根据距离而改变，离物体越近就越清晰，越远就越模糊。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-c0e1a8c009e58748de8391299a9dc7dc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"967\" class=\"origin_image zh-lightbox-thumb\" width=\"2000\" data-original=\"https://pic1.zhimg.com/v2-c0e1a8c009e58748de8391299a9dc7dc_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-c99b96d200065291f73268681cf94777_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"888\" class=\"origin_image zh-lightbox-thumb\" width=\"2000\" data-original=\"https://pic4.zhimg.com/v2-c99b96d200065291f73268681cf94777_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-a88a588aec24d4203f8df150fde830a6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"854\" class=\"origin_image zh-lightbox-thumb\" width=\"2000\" data-original=\"https://pic3.zhimg.com/v2-a88a588aec24d4203f8df150fde830a6_r.jpg\"></figure><p data-pid=\"TzAh4z_f\">第三是我们有一个手电筒耗尽的玩法。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-b00026e795a495560d0d2cd5c18f6841_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"948\" class=\"origin_image zh-lightbox-thumb\" width=\"2000\" data-original=\"https://pic2.zhimg.com/v2-b00026e795a495560d0d2cd5c18f6841_r.jpg\"></figure><p data-pid=\"v6F6KXxl\">手电筒耗尽的玩法是当游戏过去一段时间后，手电筒开始闪烁，表现低电量状态。如果玩家在屏幕上显示图标，他们需要按控制器把光修好。这实际上为游戏创造了一些不安全的和毛骨悚然的游戏体验，也表明在游戏中资源是有限制的。</p>\n<h2>美术与规范（灯光美术圣经）</h2>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-df7133cc0f6bfa010ff3216b413a25a1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1881\" data-rawheight=\"922\" class=\"origin_image zh-lightbox-thumb\" width=\"1881\" data-original=\"https://pic2.zhimg.com/v2-df7133cc0f6bfa010ff3216b413a25a1_r.jpg\"></figure><p data-pid=\"mdocNIMU\">游戏中有个概念是我们的资源是非常有限的，我先从关键要素快速了解一下我们的照明原则。我将在概念中展示关于创造艺术语言的指导方针。</p>\n<h3>色彩脚本</h3>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-ce97efb0bbaf6fb21c322e862095fe5c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1825\" data-rawheight=\"1003\" class=\"origin_image zh-lightbox-thumb\" width=\"1825\" data-original=\"https://pic1.zhimg.com/v2-ce97efb0bbaf6fb21c322e862095fe5c_r.jpg\"></figure><p data-pid=\"kJiFGray\">色彩脚本是一个用于讲述故事的画面插图集，我们在整个游戏中应用的颜色脚本阐述每个关卡的色调和氛围。我们在整个游戏中有完整的四季循环，我们从夏天开始，秋天到冬天，春天结束。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-d0c92c578391af9a6e92cd85a1cc531b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1785\" data-rawheight=\"974\" class=\"origin_image zh-lightbox-thumb\" width=\"1785\" data-original=\"https://pic4.zhimg.com/v2-d0c92c578391af9a6e92cd85a1cc531b_r.jpg\"></figure><p data-pid=\"chOtetS1\">这是游戏中“大学”的概念之一。左手边第一列实际上是来自关卡设计师的白盒布局，你可以看到这很简单，我们只展示行政、价值和颜色。</p>\n<p data-pid=\"RpOvZVDg\">这主要是为了试图弄清楚我们想让玩家在哪里和游戏应该去哪里而画的示意图。一旦我们弄清楚这点，我们就进入中间的一栏，概念艺术家开始构思一些细节，包括建模、着色和描述灯光。一旦看起来很合适，我们会继续开发天空。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-7ac93889b6f802fd69c059c8230c098e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1756\" data-rawheight=\"1000\" class=\"origin_image zh-lightbox-thumb\" width=\"1756\" data-original=\"https://pic3.zhimg.com/v2-7ac93889b6f802fd69c059c8230c098e_r.jpg\"></figure><p data-pid=\"wsdn1Guw\">天空被认为是应该在真正的早期阶段开发，他们真的很重要。因为天空决定了一天的变化（Time of Day），决定了天气状况。天空的研发对于我们的IBL照明管线来说也至关重要，打光师实际上可以知道他们可以尝试什么样的HDR图像，并于关卡天空进行匹配。它对于早期创建反射图（Reflection Cube Map）也是十分有用的。</p>\n<h3>三大元素</h3>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-5a29f0aae2aaa8971c25fa655e98dff3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1852\" data-rawheight=\"814\" class=\"origin_image zh-lightbox-thumb\" width=\"1852\" data-original=\"https://pic4.zhimg.com/v2-5a29f0aae2aaa8971c25fa655e98dff3_r.jpg\"></figure><p data-pid=\"_QG-8pdI\">这是我们讨论形体、灰度以及颜色的的脚本，他们不仅对于环境和贴图质感来说很重要，对于照明来说也很重要，因为把这三个元素的灯光效果加在一起，我们可以把它做得更好也可以搞砸。</p>\n<p data-pid=\"XhQmHkU-\"><b>形状</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-965866146416bcb6893036e8d48ef530_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1776\" data-rawheight=\"882\" class=\"origin_image zh-lightbox-thumb\" width=\"1776\" data-original=\"https://pic1.zhimg.com/v2-965866146416bcb6893036e8d48ef530_r.jpg\"></figure><p data-pid=\"S7cLg3lK\">首先形体与灰度，彼此的对比才能清晰地描述一个空间。你可以说一个氛围的节奏可以塑造一个环境并且把玩家引向我们想吸引他们的地方，我们想让他们注意看到地方。</p>\n<p data-pid=\"ZVFXUL8p\"><b>灰度</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-0aff2732f16508a4f613080fd6c189d1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1771\" data-rawheight=\"853\" class=\"origin_image zh-lightbox-thumb\" width=\"1771\" data-original=\"https://pic2.zhimg.com/v2-0aff2732f16508a4f613080fd6c189d1_r.jpg\"></figure><p data-pid=\"BaHalfoN\">一旦我们有了形状的概念，我们的重点就转向灰度。通过将两个灰度值差异放在一起，可以使你的物体从世界中划分；同样如果你相邻的灰度过于相似，则会失去形体。</p>\n<p data-pid=\"zIAw0j7Q\"><b>颜色</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-a9ddf8d333c3a8a8fda8cc2c68ffee47_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1090\" data-rawheight=\"521\" class=\"origin_image zh-lightbox-thumb\" width=\"1090\" data-original=\"https://pic4.zhimg.com/v2-a9ddf8d333c3a8a8fda8cc2c68ffee47_r.jpg\"></figure><p data-pid=\"pvmbUnnl\">再说到色相，如果使用和色值相似的颜色，又会很难再看清它们的形状。所以单独的色彩差异，实际上是有利于帮助形状阅读的，同时一些衔接的形体是适于帮助与旧元素进行融合的。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-a84e853e10a445fb119771a260434348_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1777\" data-rawheight=\"894\" class=\"origin_image zh-lightbox-thumb\" width=\"1777\" data-original=\"https://pic1.zhimg.com/v2-a84e853e10a445fb119771a260434348_r.jpg\"></figure><p data-pid=\"PKZmfwXj\">这是游戏的最后，因此请始终记住二维图形很容易应用美术原则，但当我们在游戏中有一个玩家时这将变成一个三维空间。我们鼓励开发者总是从玩家的角度来思考上文的三个元素。</p>\n<h2>游戏内灯光管线</h2>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-5e71844866617c714d3f4f72bae34e3c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1757\" data-rawheight=\"953\" class=\"origin_image zh-lightbox-thumb\" width=\"1757\" data-original=\"https://pic1.zhimg.com/v2-5e71844866617c714d3f4f72bae34e3c_r.jpg\"></figure><p data-pid=\"-Utm2TGe\">通常，关键概念艺术是在关卡设计师的白盒之前进行的，但这也可以以另一种方式发生。关卡白盒一旦开始，我们就开始设计灯光以帮助关卡设计师在游戏布局中做出基于灯光的游戏体验决定。这个过程可以由灯光师来处理，也可以由关卡设计师自己处理，但最早的可能只是一些想法。</p>\n<h3>五大流程</h3>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-7e53db2bc1c299c107d5640955ee7d65_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1768\" data-rawheight=\"929\" class=\"origin_image zh-lightbox-thumb\" width=\"1768\" data-original=\"https://pic2.zhimg.com/v2-7e53db2bc1c299c107d5640955ee7d65_r.jpg\"></figure><p data-pid=\"3qhJcXzr\">一旦白盒关卡准备好交付给美术团队进行开发，我们就开始做五大流程。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-520495059cd43a5a01534a3591613974_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1214\" data-rawheight=\"768\" class=\"origin_image zh-lightbox-thumb\" width=\"1214\" data-original=\"https://pic1.zhimg.com/v2-520495059cd43a5a01534a3591613974_r.jpg\"></figure><p data-pid=\"GtIcSbVr\">我们得到的是酒店的概念设计图，你可以知道这个实际上是团队在顶部应用了一种蓝色然后去饱和。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-673d8349b27881dee87ecb4bef942509_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1227\" data-rawheight=\"903\" class=\"origin_image zh-lightbox-thumb\" width=\"1227\" data-original=\"https://pic2.zhimg.com/v2-673d8349b27881dee87ecb4bef942509_r.jpg\"></figure><p data-pid=\"Le1-4Vyz\">但其实一开始的时候，我们只使用了50%灰值（五十度灰）的场景。这一个仅应用于整个场景的纹理着色器，用于我们第一个灯光测试，你可以看到形状开始被区分。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-594b0c924f8d48dbf6e05d5ff21d1562_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1229\" data-rawheight=\"873\" class=\"origin_image zh-lightbox-thumb\" width=\"1229\" data-original=\"https://pic3.zhimg.com/v2-594b0c924f8d48dbf6e05d5ff21d1562_r.jpg\"></figure><p data-pid=\"6tu6v2r6\">接下来在概念的基础上，我们开始区分灰度而不是颜色。我们将适当的灰度应用到大表面上，限制你可以看到的一切都是正确的方式和基础的表现，以及你眼睛应该区看到的地方。你不能得到一个游戏玩家的感知，我们想要引导一个玩家去哪里。你也可以注意到灯光略有不同，这将被修复，因为灯光烘培也会对灰度有影响。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-0a06e3f1a2a641303289fdc7697584fc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1204\" data-rawheight=\"859\" class=\"origin_image zh-lightbox-thumb\" width=\"1204\" data-original=\"https://pic1.zhimg.com/v2-0a06e3f1a2a641303289fdc7697584fc_r.jpg\"></figure><p data-pid=\"Q-MFCjPv\">同样的概念，现在我们可以从概念上简化平均颜色，所以我们做了一个色板。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-bdf7bae42c89601de49b2b07067a89dd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1213\" data-rawheight=\"873\" class=\"origin_image zh-lightbox-thumb\" width=\"1213\" data-original=\"https://pic2.zhimg.com/v2-bdf7bae42c89601de49b2b07067a89dd_r.jpg\"></figure><p data-pid=\"YDfQ_9Pp\">我们将这些颜色应用于表面，但仍然保持灰度，这意味着我们仍然将灰度和颜色一起应用。在这之后我们再做一次灯光测试。现在你可以知道灯光烘培的颜色变化非常显著，但这是在我们调整之后。因为现在的颜色在烘培的计算上贡献很多，当烘培时光线在环境中不断反弹，而不是单单只有表面上的颜色。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-9984203225e2fc4d85b704e9401c0f07_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1213\" data-rawheight=\"761\" class=\"origin_image zh-lightbox-thumb\" width=\"1213\" data-original=\"https://pic4.zhimg.com/v2-9984203225e2fc4d85b704e9401c0f07_r.jpg\"></figure><p data-pid=\"m-za5IlT\">现在，我们转到真正的着色器和贴图的灯光测试，你可以看到这一切都开始正常运转了。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-3f161670469b6cb683d46ee7342a9b43_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1205\" data-rawheight=\"813\" class=\"origin_image zh-lightbox-thumb\" width=\"1205\" data-original=\"https://pic4.zhimg.com/v2-3f161670469b6cb683d46ee7342a9b43_r.jpg\"></figure><p data-pid=\"jfMKYsKx\">最后我们通过很多的测试，我们应用了我们想要的后期调色，还有一些景深和背景的雾。这就是我们的流程。</p>\n<p data-pid=\"BTcsl-qv\">我们之所以将这个流程尽可能的应用于区域构建，是因为我们不想让灯光太晚加入。因为一旦你从游戏中创造了空间和游戏流程，如果你想稍后对其进行模型的修改，然后纹理师就会又去审查，这很麻烦。灯光可以真的帮助他们从一开始就一起开发这整个环境。</p>\n<p data-pid=\"_Pu1-SfC\">老实说，如果我们在每个关卡都应用这种方法，那将会很完美。但由于生产时间的限制，我们将这个流程应用在关键区域。一旦我们建立了非常好的区域，这就会带动其余区域的质量。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-27547e8ceb05cd7eec58ea951809575a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1432\" data-rawheight=\"830\" class=\"origin_image zh-lightbox-thumb\" width=\"1432\" data-original=\"https://pic3.zhimg.com/v2-27547e8ceb05cd7eec58ea951809575a_r.jpg\"></figure><p data-pid=\"39Ba3D-g\">这有一些其他的例子，比如这个称为“猎人城”的关卡。我们首先有个概念，然后我们可以看到形体，灰度以及颜色。</p>\n<h2>静态光照</h2>\n<h3>灯光模板</h3>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-e87453a8dbf0c689f4192dbc0a8bbcd6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1413\" data-rawheight=\"773\" class=\"origin_image zh-lightbox-thumb\" width=\"1413\" data-original=\"https://pic3.zhimg.com/v2-e87453a8dbf0c689f4192dbc0a8bbcd6_r.jpg\"></figure><blockquote data-pid=\"DXXKQ8w_\">此处关于灯光模板（Light Rig）的解释感谢 李玉良@彩虹糖 前辈解答：一般主灯光师打出 light rig，兼顾到大环境的气氛和色调， 下边的灯光师套用 light rig 的基础上 ，再根据每个镜头补光或者调整。light rig 能保证你这一整场（可能几十个镜头）的色调气氛统一性 。</blockquote>\n<p data-pid=\"ZTYTSAkg\">我们实际上使用的是Maya的灯光编辑器，我们利用其放置灯光模板，但我们不在maya中烘培，我们有内部的灯光工具和管线来烘培。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-6434e2a23c1c407f76e81feddb443290_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1779\" data-rawheight=\"776\" class=\"origin_image zh-lightbox-thumb\" width=\"1779\" data-original=\"https://pic1.zhimg.com/v2-6434e2a23c1c407f76e81feddb443290_r.jpg\"></figure><p data-pid=\"NBTu_xky\">这是我们在第一次烘培之后，我们有个内部工具叫做Nova Rainbow。这是一个类似于交互式烘培预览的工具。当灯光师有大量的数据并在这个工具打开时，我们实际上可以于几何体一起查看，也可以看到我们的光照探针。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-33c32d55d35710f402b9e80b828bd6d6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1782\" data-rawheight=\"807\" class=\"origin_image zh-lightbox-thumb\" width=\"1782\" data-original=\"https://pic3.zhimg.com/v2-33c32d55d35710f402b9e80b828bd6d6_r.jpg\"></figure><p data-pid=\"TYGd1yWY\">如果你想要改变颜色、强度或者其他参数，比如说我们改变阳光的颜色，我们可以看到在真正烘培之前看到结果。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-09db10ba206d38d5dfa11a09aaf55dc1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1790\" data-rawheight=\"799\" class=\"origin_image zh-lightbox-thumb\" width=\"1790\" data-original=\"https://pic2.zhimg.com/v2-09db10ba206d38d5dfa11a09aaf55dc1_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-c4f5cf8c2a198ade6a27a8ff035c8061_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1772\" data-rawheight=\"761\" class=\"origin_image zh-lightbox-thumb\" width=\"1772\" data-original=\"https://pic2.zhimg.com/v2-c4f5cf8c2a198ade6a27a8ff035c8061_r.jpg\"></figure><p data-pid=\"cvsMPUNF\">我们还可以为整个场景单独显示某种灯光，进行直接交互照明。或者我们可以有个特定的灯光或者灯光设置单独或者一起查看。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-11195d71b6c7d89fa1cf56bb95825b8c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1780\" data-rawheight=\"735\" class=\"origin_image zh-lightbox-thumb\" width=\"1780\" data-original=\"https://pic1.zhimg.com/v2-11195d71b6c7d89fa1cf56bb95825b8c_r.jpg\"></figure><p data-pid=\"A24toIuL\">正常情况下直射的阳光会在游戏中被替换为实时的直射光阳光，他没有烘培到我们的静态光照贴图中，但我们将将阳光的阴影信息储存在我们的顶点滑块中，以便稍后用于混合实时级联阴影。在实时游戏中，级联范围外我们混合进了烘培阴影，烘培的光照结果。</p>\n<h3>光照探针</h3>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-e40611bf6c43b6dac8e816a2d646e470_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1216\" data-rawheight=\"843\" class=\"origin_image zh-lightbox-thumb\" width=\"1216\" data-original=\"https://pic1.zhimg.com/v2-e40611bf6c43b6dac8e816a2d646e470_r.jpg\"></figure><p data-pid=\"UH5NWqxs\">这是一个灯光测试，也是实时太阳光。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-09bcca62fe6082f0bb3e522c25dd976e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1226\" data-rawheight=\"794\" class=\"origin_image zh-lightbox-thumb\" width=\"1226\" data-original=\"https://pic3.zhimg.com/v2-09bcca62fe6082f0bb3e522c25dd976e_r.jpg\"></figure><p data-pid=\"3ZUV5GTo\">这是最终的结果，在把所有东西都放在一起之后。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-59706153820c88d344c453ea438a5485_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1786\" data-rawheight=\"816\" class=\"origin_image zh-lightbox-thumb\" width=\"1786\" data-original=\"https://pic2.zhimg.com/v2-59706153820c88d344c453ea438a5485_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-b077c0bf2e3a4e95d6c58d638cd97c21_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1784\" data-rawheight=\"845\" class=\"origin_image zh-lightbox-thumb\" width=\"1784\" data-original=\"https://pic2.zhimg.com/v2-b077c0bf2e3a4e95d6c58d638cd97c21_r.jpg\"></figure><p data-pid=\"2cqy2YT0\">这没什么特别的，很多人都知道我们使用了探针照明，这是一个为了角色和动态对象的技术。所以当我们烘培一个场景时，我们放入这个角色。因为他们不能预烘培，所以他们完全脱离了场景，当他们四处走动，他们看起来就像游离于场景之外。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-e80d54450520033cdb36d7b11db3a31e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1785\" data-rawheight=\"824\" class=\"origin_image zh-lightbox-thumb\" width=\"1785\" data-original=\"https://pic3.zhimg.com/v2-e80d54450520033cdb36d7b11db3a31e_r.jpg\"></figure><p data-pid=\"RHY_czg9\">我们使用了立方体贴图，立方体映射被附加到角色身上。我们之所以有这么多几何体叠到一起是因为每个角色都有不同的体积，比如我们交换头部，交换身体，或者你有个武器和背包，每个角色实际上都有一个立方体贴图。当你实际让你的角色移动，你可以简化为这样适当的数据。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-4c0c71bff379e38ab15b11d1b6a7233d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1773\" data-rawheight=\"813\" class=\"origin_image zh-lightbox-thumb\" width=\"1773\" data-original=\"https://pic2.zhimg.com/v2-4c0c71bff379e38ab15b11d1b6a7233d_r.jpg\"></figure><p data-pid=\"NtUoukpI\">现在我们放入光照探针，来自角色身上的立方体贴图采样了光照探针上的照明数据。我们可以设置与光照探针的混合距离。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-6b78bd39e0794a3551dcf1cde2cb2d9c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1773\" data-rawheight=\"832\" class=\"origin_image zh-lightbox-thumb\" width=\"1773\" data-original=\"https://pic1.zhimg.com/v2-6b78bd39e0794a3551dcf1cde2cb2d9c_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-9f4643bba615c4dacab5401977b8fdc0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1790\" data-rawheight=\"815\" class=\"origin_image zh-lightbox-thumb\" width=\"1790\" data-original=\"https://pic1.zhimg.com/v2-9f4643bba615c4dacab5401977b8fdc0_r.jpg\"></figure><p data-pid=\"Jq_7OsY4\">现在你可以看到他们融合进入了场景，然后我们可以隐藏光照探针来调试。这就是你游戏中看到的样子。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-dd081de15e4b70ac5a3f77c977b23fdc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1791\" data-rawheight=\"840\" class=\"origin_image zh-lightbox-thumb\" width=\"1791\" data-original=\"https://pic1.zhimg.com/v2-dd081de15e4b70ac5a3f77c977b23fdc_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-e9041f95c3600087ca0754da8cfcec8a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1779\" data-rawheight=\"787\" class=\"origin_image zh-lightbox-thumb\" width=\"1779\" data-original=\"https://pic3.zhimg.com/v2-e9041f95c3600087ca0754da8cfcec8a_r.jpg\"></figure><p data-pid=\"mQPPCaSE\">光照探针有时也可以用于别的东西，比如粒子特效。当我们有一些粒子会有在场景中的灰度变化，以及一些有距离关系的粒子。光照探针实际上可以将适当的照明数据传输到粒子。</p>\n<h2>实时光照</h2>\n<h3>渲染设置（后处理设置）</h3>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-974139f1d34fb311bd013ecf8d20d06e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1656\" data-rawheight=\"863\" class=\"origin_image zh-lightbox-thumb\" width=\"1656\" data-original=\"https://pic3.zhimg.com/v2-974139f1d34fb311bd013ecf8d20d06e_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-d58135456aad6365bae396b6a6a5cde8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1730\" data-rawheight=\"772\" class=\"origin_image zh-lightbox-thumb\" width=\"1730\" data-original=\"https://pic1.zhimg.com/v2-d58135456aad6365bae396b6a6a5cde8_r.jpg\"></figure><p data-pid=\"syYWKBMX\">渲染设置是一个实时渲染过程，他们被一些保持的值控制。我们有一堆与照明有关的参数，比如说实时的阳光，我们可以调整动态的光线。我们也可以调整色调映射（Tomemapping）和后期处理，比如泛光（Bloom），色偏（Tint）等等。我们也可以控制环境规模，SSAO和DOF等。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-77ff18785d080ada41b71b51eeeda26d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1592\" data-rawheight=\"920\" class=\"origin_image zh-lightbox-thumb\" width=\"1592\" data-original=\"https://pic2.zhimg.com/v2-77ff18785d080ada41b71b51eeeda26d_r.jpg\"></figure><p data-pid=\"BvUcgh7m\">这是我们如何应用渲染设置到特定的区域，比如我们这里有两个主要区域。我们使用一个内部工具来查看游戏布局，粉色的是走廊，我们选择一个渲染设置，然后我们内部作为另一个黄色部分，保存与之前不同的渲染设置应用于该区域。我们会把两个区域稍微重叠在一起，并设置混合时间。所以当玩家在这两个区域之间转换的时候，他们可以正确地使用渲染设置。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-2600bd779fc03e9bb083762aee0836de_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1492\" data-rawheight=\"877\" class=\"origin_image zh-lightbox-thumb\" width=\"1492\" data-original=\"https://pic3.zhimg.com/v2-2600bd779fc03e9bb083762aee0836de_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-7349bb91a6d47c263f5ea8215f726e7b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1507\" data-rawheight=\"885\" class=\"origin_image zh-lightbox-thumb\" width=\"1507\" data-original=\"https://pic4.zhimg.com/v2-7349bb91a6d47c263f5ea8215f726e7b_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-5f74a4af96d71485d7848398df95e6a7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1512\" data-rawheight=\"876\" class=\"origin_image zh-lightbox-thumb\" width=\"1512\" data-original=\"https://pic4.zhimg.com/v2-5f74a4af96d71485d7848398df95e6a7_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-5c4e041ba1edd9f25b04073dafd97ac7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1457\" data-rawheight=\"879\" class=\"origin_image zh-lightbox-thumb\" width=\"1457\" data-original=\"https://pic4.zhimg.com/v2-5c4e041ba1edd9f25b04073dafd97ac7_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-de2783a79006945b918dcec774bad995_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1475\" data-rawheight=\"882\" class=\"origin_image zh-lightbox-thumb\" width=\"1475\" data-original=\"https://pic2.zhimg.com/v2-de2783a79006945b918dcec774bad995_r.jpg\"></figure><p data-pid=\"KJktDyx2\">这是渲染设置的示例，色调映射是在我们应用之后；我们也可以应用雾，我们有天空雾和地面雾；然后再加入泛光和LUTs；加入一些胶片感，非常微妙也许再空中比较明显。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-e310816fe969b90ab6a4702e33eede2e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1482\" data-rawheight=\"877\" class=\"origin_image zh-lightbox-thumb\" width=\"1482\" data-original=\"https://pic3.zhimg.com/v2-e310816fe969b90ab6a4702e33eede2e_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-77b926de4ad045610261c78ee61e52e8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1465\" data-rawheight=\"878\" class=\"origin_image zh-lightbox-thumb\" width=\"1465\" data-original=\"https://pic1.zhimg.com/v2-77b926de4ad045610261c78ee61e52e8_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-5e60a7f85468baa05f68f065288d4742_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1497\" data-rawheight=\"868\" class=\"origin_image zh-lightbox-thumb\" width=\"1497\" data-original=\"https://pic3.zhimg.com/v2-5e60a7f85468baa05f68f065288d4742_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-2837e264894e90acfabf441ba39bbdc9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1494\" data-rawheight=\"864\" class=\"origin_image zh-lightbox-thumb\" width=\"1494\" data-original=\"https://pic2.zhimg.com/v2-2837e264894e90acfabf441ba39bbdc9_r.jpg\"></figure><h3>曝光</h3>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-c79593629366656fc75ca79563d58f33_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1772\" data-rawheight=\"814\" class=\"origin_image zh-lightbox-thumb\" width=\"1772\" data-original=\"https://pic4.zhimg.com/v2-c79593629366656fc75ca79563d58f33_r.jpg\"></figure><p data-pid=\"uPujFJYN\">曝光和大多数游戏一样，我们有一个应用于场景的曝光，并尝试根据光线条件来管理屏幕像素。如果我们将曝光设置为0，在左侧外部空间看起来曝光很正常，但锁定为0的话在室内，很难看清楚并游玩。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-cf1c12f099d07bb516fcb7bec8f01f77_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1775\" data-rawheight=\"832\" class=\"origin_image zh-lightbox-thumb\" width=\"1775\" data-original=\"https://pic4.zhimg.com/v2-cf1c12f099d07bb516fcb7bec8f01f77_r.jpg\"></figure><p data-pid=\"tMnVrDHp\">我们提高曝光，现在室内正常了，但另一方面室外变得过曝了。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-60594969819e0d2f1f11f045992c7a26_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1734\" data-rawheight=\"825\" class=\"origin_image zh-lightbox-thumb\" width=\"1734\" data-original=\"https://pic3.zhimg.com/v2-60594969819e0d2f1f11f045992c7a26_r.jpg\"></figure><p data-pid=\"FZhV80Bw\">所以我们决定设置一个为大多数适用的曝光过渡，它更接近人眼感受。所以在这个关卡，我们必须停止自动调整，我们根据屏幕像素设置最小值和最大值。当玩家在场景中移动时，我们可以进行两次调整。</p>\n<h2>季节&amp;天气&amp;ToD</h2>\n<p data-pid=\"rtMDe08p\">这里仅有图片欣赏，未讲解管线。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-9f41f87542636839ca9ff34c6160557f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"1001\" class=\"origin_image zh-lightbox-thumb\" width=\"2000\" data-original=\"https://pic4.zhimg.com/v2-9f41f87542636839ca9ff34c6160557f_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-32df0590205b8febea018f85ab7ab0c4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"1003\" class=\"origin_image zh-lightbox-thumb\" width=\"2000\" data-original=\"https://pic1.zhimg.com/v2-32df0590205b8febea018f85ab7ab0c4_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-e15ab9a2ac2cbcacb0974064d3a0d8d9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"996\" class=\"origin_image zh-lightbox-thumb\" width=\"2000\" data-original=\"https://pic2.zhimg.com/v2-e15ab9a2ac2cbcacb0974064d3a0d8d9_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-b27dd5a2d567d8bc6ab294904a08df05_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"980\" class=\"origin_image zh-lightbox-thumb\" width=\"2000\" data-original=\"https://pic2.zhimg.com/v2-b27dd5a2d567d8bc6ab294904a08df05_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-70aa52687c09190eea8e3755038f8917_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"997\" class=\"origin_image zh-lightbox-thumb\" width=\"2000\" data-original=\"https://pic4.zhimg.com/v2-70aa52687c09190eea8e3755038f8917_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-535e1dfc4d1bfe387f0fb505df212423_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"1004\" class=\"origin_image zh-lightbox-thumb\" width=\"2000\" data-original=\"https://pic4.zhimg.com/v2-535e1dfc4d1bfe387f0fb505df212423_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-708f7eea32fa11a32a04d07f112d9d06_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"1003\" class=\"origin_image zh-lightbox-thumb\" width=\"2000\" data-original=\"https://pic3.zhimg.com/v2-708f7eea32fa11a32a04d07f112d9d06_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-a17e263718f84a95a5c1456fa618ad10_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"1006\" class=\"origin_image zh-lightbox-thumb\" width=\"2000\" data-original=\"https://pic1.zhimg.com/v2-a17e263718f84a95a5c1456fa618ad10_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-da0428975da2a04bdb4bfc0a68e8c47e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"1000\" class=\"origin_image zh-lightbox-thumb\" width=\"2000\" data-original=\"https://pic3.zhimg.com/v2-da0428975da2a04bdb4bfc0a68e8c47e_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-0655eeaf59fa3f661367df4660433af5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"1000\" class=\"origin_image zh-lightbox-thumb\" width=\"2000\" data-original=\"https://pic2.zhimg.com/v2-0655eeaf59fa3f661367df4660433af5_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-644477cb75fa2f0143b6fe6d0ca8b795_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"994\" class=\"origin_image zh-lightbox-thumb\" width=\"2000\" data-original=\"https://pic2.zhimg.com/v2-644477cb75fa2f0143b6fe6d0ca8b795_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-375c3e7baa7aec32279ccc3744f2b045_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"994\" class=\"origin_image zh-lightbox-thumb\" width=\"2000\" data-original=\"https://pic2.zhimg.com/v2-375c3e7baa7aec32279ccc3744f2b045_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-ad2c62299f1f33022820921f857f04a6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"996\" class=\"origin_image zh-lightbox-thumb\" width=\"2000\" data-original=\"https://pic3.zhimg.com/v2-ad2c62299f1f33022820921f857f04a6_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-1439a8d64e0c8793f9ab4d6f78da7cd9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"1003\" class=\"origin_image zh-lightbox-thumb\" width=\"2000\" data-original=\"https://pic2.zhimg.com/v2-1439a8d64e0c8793f9ab4d6f78da7cd9_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-76b8da73dd2728c71e71e16ecfab5f4f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"1001\" class=\"origin_image zh-lightbox-thumb\" width=\"2000\" data-original=\"https://pic4.zhimg.com/v2-76b8da73dd2728c71e71e16ecfab5f4f_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-1123462c3f23060de7d7c76e4852ba7d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"1006\" class=\"origin_image zh-lightbox-thumb\" width=\"2000\" data-original=\"https://pic2.zhimg.com/v2-1123462c3f23060de7d7c76e4852ba7d_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-4d9d06d569817a261bd91263ccacc961_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"999\" class=\"origin_image zh-lightbox-thumb\" width=\"2000\" data-original=\"https://pic2.zhimg.com/v2-4d9d06d569817a261bd91263ccacc961_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-530d7ef941819518211d84a9912ab6d0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"1006\" class=\"origin_image zh-lightbox-thumb\" width=\"2000\" data-original=\"https://pic1.zhimg.com/v2-530d7ef941819518211d84a9912ab6d0_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-6b38d24f4efb7d380d89e91cd617f854_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"1001\" class=\"origin_image zh-lightbox-thumb\" width=\"2000\" data-original=\"https://pic1.zhimg.com/v2-6b38d24f4efb7d380d89e91cd617f854_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-47336142af39f47625465250d74b4c03_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"1012\" class=\"origin_image zh-lightbox-thumb\" width=\"2000\" data-original=\"https://pic4.zhimg.com/v2-47336142af39f47625465250d74b4c03_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-12939be5eb3c85fc6c6d2fa676706d8c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"1004\" class=\"origin_image zh-lightbox-thumb\" width=\"2000\" data-original=\"https://pic1.zhimg.com/v2-12939be5eb3c85fc6c6d2fa676706d8c_r.jpg\"></figure><h2>电影灯光管线</h2>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-31cf50324b146c948b3a8f5dd4fe753f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1872\" data-rawheight=\"750\" class=\"origin_image zh-lightbox-thumb\" width=\"1872\" data-original=\"https://pic4.zhimg.com/v2-31cf50324b146c948b3a8f5dd4fe753f_r.jpg\"></figure><p data-pid=\"jiDERC42\">两者最大的区别在于游戏中灯光是在PS3上实时运行的，所以帧率不得不以30fps计算，并且内存也需要考虑。但对于电影灯光来说，因为我们是捕捉镜头，因此内存是唯一需要关心的问题。所以允许我们有一个更高分辨率的实时阴影、几何体面数和着色渲染。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-37cc8ba15541049f52e827a9d5b40211_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1748\" data-rawheight=\"751\" class=\"origin_image zh-lightbox-thumb\" width=\"1748\" data-original=\"https://pic2.zhimg.com/v2-37cc8ba15541049f52e827a9d5b40211_r.jpg\"></figure><p data-pid=\"slcF_u6Z\">《最后的生还者》的电影基本信息总镜头是94分钟，几乎和一部电影一样长。我们总共有62个场景镜头，所有的电影灯光都是内部（引擎or项目组？）完成的，由我们的过场动画灯光（Cut-Scene Lights）方案指导。</p>\n<h3>过场动画灯光</h3>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-5e6f9e6169126f1f5ff9d1fcb4a81d22_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1758\" data-rawheight=\"671\" class=\"origin_image zh-lightbox-thumb\" width=\"1758\" data-original=\"https://pic3.zhimg.com/v2-5e6f9e6169126f1f5ff9d1fcb4a81d22_r.jpg\"></figure><ul>\n<li data-pid=\"WXLYTeG1\">对过场动画模式进行支持</li>\n<li data-pid=\"Y558MoRq\">具有可以调节参数的动画灯</li>\n<li data-pid=\"V_FDphCM\">只会影响人物</li>\n<li data-pid=\"S3YtA6XW\">对环境没有影响</li>\n<li data-pid=\"PjqULkPO\">支持高分辨率阴影</li>\n<li data-pid=\"amy3Acyo\">每个镜头只有4个过场动画灯光</li>\n</ul>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-eff9b6f69cd61e5f3d7373eef2f0c415_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1565\" data-rawheight=\"886\" class=\"origin_image zh-lightbox-thumb\" width=\"1565\" data-original=\"https://pic2.zhimg.com/v2-eff9b6f69cd61e5f3d7373eef2f0c415_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-dc2ef2f53c32616334a1d6850aa5ed9f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1473\" data-rawheight=\"880\" class=\"origin_image zh-lightbox-thumb\" width=\"1473\" data-original=\"https://pic4.zhimg.com/v2-dc2ef2f53c32616334a1d6850aa5ed9f_r.jpg\"></figure><p data-pid=\"9AzMmNjn\">可以注意到这是我们的过场动画，我们实际上用了灯光模板，要么是保存的，要么是引用动画文件。因为他们可以让灯光师从相机画面上剪辑动画，所以他们可以保持四个灯。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-e8ca2c31dadadb931c381f14c46229c9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1532\" data-rawheight=\"887\" class=\"origin_image zh-lightbox-thumb\" width=\"1532\" data-original=\"https://pic2.zhimg.com/v2-e8ca2c31dadadb931c381f14c46229c9_r.jpg\"></figure><p data-pid=\"2r7X18SF\">他们可以从Maya直接操控引擎内的过场动画模式，这张图是在所有过场动画灯光放置之前。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-57c09d02b27adeb4a943b76c56121791_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1487\" data-rawheight=\"882\" class=\"origin_image zh-lightbox-thumb\" width=\"1487\" data-original=\"https://pic2.zhimg.com/v2-57c09d02b27adeb4a943b76c56121791_r.jpg\"></figure><p data-pid=\"AWpDQt2B\">我们先添加太阳光，在后面。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-2e2302661c4d28a40987fca5439ffc62_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1569\" data-rawheight=\"888\" class=\"origin_image zh-lightbox-thumb\" width=\"1569\" data-original=\"https://pic3.zhimg.com/v2-2e2302661c4d28a40987fca5439ffc62_r.jpg\"></figure><p data-pid=\"1CU2hBjl\">添加主光。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-4e24f8a09320409a9e3ebe93ecf87cbe_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1571\" data-rawheight=\"868\" class=\"origin_image zh-lightbox-thumb\" width=\"1571\" data-original=\"https://pic3.zhimg.com/v2-4e24f8a09320409a9e3ebe93ecf87cbe_r.jpg\"></figure><p data-pid=\"x7ZeMts1\">边缘光。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-6b90937c6a7d15d9e28621179a9f0fcb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1551\" data-rawheight=\"882\" class=\"origin_image zh-lightbox-thumb\" width=\"1551\" data-original=\"https://pic4.zhimg.com/v2-6b90937c6a7d15d9e28621179a9f0fcb_r.jpg\"></figure><p data-pid=\"gugmHQys\">以及一些其他的特殊灯光。但这是一个容许无论是角色移动或者拍摄变化的灯光。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-4043de8ea582ae1678d0c39b62fdac05_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1598\" data-rawheight=\"887\" class=\"origin_image zh-lightbox-thumb\" width=\"1598\" data-original=\"https://pic2.zhimg.com/v2-4043de8ea582ae1678d0c39b62fdac05_r.jpg\"></figure><p data-pid=\"IYvQtR_P\">景深也是可以开启的，但是我们一般让动画师来控制，因为他们同时也需要控制镜头，他们更擅长这个。不过有时可能的话，灯光师也会覆盖设置。</p>\n<h3>电影管线</h3>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-6b0cddd5468c94a10dfa90b9d4b8c9cf_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1762\" data-rawheight=\"794\" class=\"origin_image zh-lightbox-thumb\" width=\"1762\" data-original=\"https://pic4.zhimg.com/v2-6b0cddd5468c94a10dfa90b9d4b8c9cf_r.jpg\"></figure><p data-pid=\"xwApJ50T\">整个电影管线，我们从mocap开始，然后我们通过相机测试，之后将它交给动画团队，可能还有一些细节的角色造型。一旦动画团队准备好一个内容，我们就会发送给环境团队和灯光团队以及特效团队来完成我们各自的内容。之后进行动画捕捉以及后期合成。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-1d33a948b6039d4b7f59e26627d124e4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1046\" data-rawheight=\"566\" class=\"origin_image zh-lightbox-thumb\" width=\"1046\" data-original=\"https://pic1.zhimg.com/v2-1d33a948b6039d4b7f59e26627d124e4_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-acb74f4fdf45de65d249552233b8cf8b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1591\" data-rawheight=\"899\" class=\"origin_image zh-lightbox-thumb\" width=\"1591\" data-original=\"https://pic4.zhimg.com/v2-acb74f4fdf45de65d249552233b8cf8b_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-5a2288842fb94ffac1d635e23458f9cd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"1144\" class=\"origin_image zh-lightbox-thumb\" width=\"2000\" data-original=\"https://pic2.zhimg.com/v2-5a2288842fb94ffac1d635e23458f9cd_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-32f80523306eba60a9c582ea86d47b14_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"1130\" class=\"origin_image zh-lightbox-thumb\" width=\"2000\" data-original=\"https://pic1.zhimg.com/v2-32f80523306eba60a9c582ea86d47b14_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-ab43ddf38ad3e36b7ed5c1668b30f4e6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"1153\" class=\"origin_image zh-lightbox-thumb\" width=\"2000\" data-original=\"https://pic3.zhimg.com/v2-ab43ddf38ad3e36b7ed5c1668b30f4e6_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-cccf78da65fadb7cfcd82fb776d7197c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"1074\" class=\"origin_image zh-lightbox-thumb\" width=\"2000\" data-original=\"https://pic1.zhimg.com/v2-cccf78da65fadb7cfcd82fb776d7197c_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-44348a9b51c2d00f65c46e29e6afbf33_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"1121\" class=\"origin_image zh-lightbox-thumb\" width=\"2000\" data-original=\"https://pic4.zhimg.com/v2-44348a9b51c2d00f65c46e29e6afbf33_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-dc15ab3854b8ff52fb0e9e26f0f8a3c0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1094\" data-rawheight=\"493\" class=\"origin_image zh-lightbox-thumb\" width=\"1094\" data-original=\"https://pic1.zhimg.com/v2-dc15ab3854b8ff52fb0e9e26f0f8a3c0_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-bb2acd8968def5aed7bda8548ec4fa2d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1642\" data-rawheight=\"892\" class=\"origin_image zh-lightbox-thumb\" width=\"1642\" data-original=\"https://pic2.zhimg.com/v2-bb2acd8968def5aed7bda8548ec4fa2d_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-ae0785ceb3b76c444ea8f9ba18ff0f88_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1475\" data-rawheight=\"893\" class=\"origin_image zh-lightbox-thumb\" width=\"1475\" data-original=\"https://pic1.zhimg.com/v2-ae0785ceb3b76c444ea8f9ba18ff0f88_r.jpg\"></figure><p data-pid=\"L68Qc4sF\">我们再从Maya看看灯光模板，我们通常从阳光开始。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-92ab5a6704a7e6fc341f764a4f0b32be_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1605\" data-rawheight=\"891\" class=\"origin_image zh-lightbox-thumb\" width=\"1605\" data-original=\"https://pic3.zhimg.com/v2-92ab5a6704a7e6fc341f764a4f0b32be_r.jpg\"></figure><p data-pid=\"LH-A7yyS\">这是我们的过场动画灯光。我记得就是这三个光创造了这个过场动画。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-66ca28734b3a548914c8cc9a1dccfa91_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1509\" data-rawheight=\"893\" class=\"origin_image zh-lightbox-thumb\" width=\"1509\" data-original=\"https://pic2.zhimg.com/v2-66ca28734b3a548914c8cc9a1dccfa91_r.jpg\"></figure><p data-pid=\"uvd4uiPb\">我们把所有的灯光放在一起，这个灯光模板框架添加了适用于不同过场动画的滑块参数。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-65386512e2a78b6776bbe93ca99ba509_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1071\" data-rawheight=\"543\" class=\"origin_image zh-lightbox-thumb\" width=\"1071\" data-original=\"https://pic2.zhimg.com/v2-65386512e2a78b6776bbe93ca99ba509_r.jpg\"></figure><p data-pid=\"NSEh7UM4\">一旦上面的流程都完成，我们会发送到一个叫做Buildcraft的内部工具，这个工具可以让我们可以播放过场动画，也可以录制动画。</p>\n<p data-pid=\"SHHYOcld\">通常我们只录制漂亮的内容，好的内容是默认画面的然后全部捕获。如果一个灯光师想要做一个细节调整，他们可以录制他们关心的内容，比如捕获深度画面，高光或者单独的灯光。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-6bfc0b92b66f0ca626f2b528f82137a3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1421\" data-rawheight=\"902\" class=\"origin_image zh-lightbox-thumb\" width=\"1421\" data-original=\"https://pic4.zhimg.com/v2-6bfc0b92b66f0ca626f2b528f82137a3_r.jpg\"></figure><p data-pid=\"8oNdyWd_\">当他们决定了要捕获什么，我们不会在这里进行什么大的调整，只会有比如一些颜色校正。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-848cfd0f395783738547969c4e115799_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1743\" data-rawheight=\"849\" class=\"origin_image zh-lightbox-thumb\" width=\"1743\" data-original=\"https://pic2.zhimg.com/v2-848cfd0f395783738547969c4e115799_r.jpg\"></figure><p data-pid=\"cYoXWrgy\">那么怎么提升动画品质呢？这是另一个过场动画用到的例子来解释我们捕获的多灯光通道。从这里可以看到，这里有三个灯光用于这个镜头，还有一个深度和角色遮罩内容。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-51d6c83b669c4310a21e354acaf44730_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1432\" data-rawheight=\"895\" class=\"origin_image zh-lightbox-thumb\" width=\"1432\" data-original=\"https://pic1.zhimg.com/v2-51d6c83b669c4310a21e354acaf44730_r.jpg\"></figure><p data-pid=\"txinZLLM\">所以再合成过程中我们可以把背景和角色分开来，这个在实时捕获的环节常常难以办到，所以我们可以在这里轻松地进行色彩校正等等。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-2da4b3e2bfc8bc9727374867011ff9b8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1461\" data-rawheight=\"896\" class=\"origin_image zh-lightbox-thumb\" width=\"1461\" data-original=\"https://pic1.zhimg.com/v2-2da4b3e2bfc8bc9727374867011ff9b8_r.jpg\"></figure><p data-pid=\"lrTfRaHh\">这是我们捕获的第一个内容，单一的灯光pass。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-7d7d438c9b1407536818fa256003087b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1474\" data-rawheight=\"896\" class=\"origin_image zh-lightbox-thumb\" width=\"1474\" data-original=\"https://pic4.zhimg.com/v2-7d7d438c9b1407536818fa256003087b_r.jpg\"></figure><p data-pid=\"F53UeuKD\">这个是我们为整个镜头做的色彩校正。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-bf082597ae3c637a6cf0d72940ec1dc8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1463\" data-rawheight=\"884\" class=\"origin_image zh-lightbox-thumb\" width=\"1463\" data-original=\"https://pic1.zhimg.com/v2-bf082597ae3c637a6cf0d72940ec1dc8_r.jpg\"></figure><p data-pid=\"4UDSTsd3\">这个利用角色遮罩给角色增亮的蓝光，景深光。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-1901d79bc1c525536d10a0d3f47f9e43_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1462\" data-rawheight=\"889\" class=\"origin_image zh-lightbox-thumb\" width=\"1462\" data-original=\"https://pic4.zhimg.com/v2-1901d79bc1c525536d10a0d3f47f9e43_r.jpg\"></figure><p data-pid=\"T9oux2DM\">我们在过场动画灯光上添加另一个灯光来表示灯的光。实际上我们对其进行了调色，让它感到温暖。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-9d2b532bc4670447db50480685469576_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1488\" data-rawheight=\"885\" class=\"origin_image zh-lightbox-thumb\" width=\"1488\" data-original=\"https://pic3.zhimg.com/v2-9d2b532bc4670447db50480685469576_r.jpg\"></figure><p data-pid=\"UZ3jkt0S\">我们加入一些辉光效果。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-eac2ef644e0e9a6acb5112d3abbc418a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1413\" data-rawheight=\"895\" class=\"origin_image zh-lightbox-thumb\" width=\"1413\" data-original=\"https://pic3.zhimg.com/v2-eac2ef644e0e9a6acb5112d3abbc418a_r.jpg\"></figure><p data-pid=\"7Ed3aB6r\">最后添加一些电影镜头的特性。电影镜头质量在合成中表现更好，所以我们过场动画在合成流程里添加，而游戏中在渲染设置里添加。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-f41ea9a4c70c4ffa7dae529c3cfaba3a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1674\" data-rawheight=\"801\" class=\"origin_image zh-lightbox-thumb\" width=\"1674\" data-original=\"https://pic3.zhimg.com/v2-f41ea9a4c70c4ffa7dae529c3cfaba3a_r.jpg\"></figure><p data-pid=\"B33bjm5v\">最后我们把最后的电影进行剪辑再放回游戏。</p>\n<hr>\n<p data-pid=\"9QudKgCy\">原视频</p>\n<a href=\"https://link.zhihu.com/?target=https%3A//www.gdcvault.com/play/1020475/In-Game-and-Cinematic-Lighting\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">gdcvault.com/play/10204</span><span class=\"invisible\">75/In-Game-and-Cinematic-Lighting</span><span class=\"ellipsis\"></span></a><p data-pid=\"Ign8eujB\">夹带一点私货：</p>\n<p data-pid=\"NESxKrwh\">自己最近试用了UE5最新的Lumen光照系统进行了一系列的灯光测试，基于原有环境对于氛围进行一些改变，有兴趣可以随便看看</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-a14db0fc0044028905d70f6d39ec756e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic3.zhimg.com/v2-a14db0fc0044028905d70f6d39ec756e_r.jpg\"></figure><a href=\"https://link.zhihu.com/?target=https%3A//www.artstation.com/artwork/yJ3GN9\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">artstation.com/artwork/</span><span class=\"invisible\">yJ3GN9</span><span class=\"ellipsis\"></span></a><p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhen-he-9?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">枕鹤</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/519389282?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"大蛤蟆仙人、白蛇仙人、蛞蝓本体这三个通灵兽实力在什么水平？","date":"2022-11-01 07:39:48","description":"\n<p data-pid=\"6dWiEb5J\">先说一下活蝓。</p>\n<p data-pid=\"S2HVE_1o\">【活蝓是湿骨林那只巨型蛞蝓的名字，蛞蝓是种族，自从看到六尾也是蛞蝓以后，我就决定用活蝓称呼湿骨林蛞蝓了】</p>\n<p><img src=\"https://pica.zhimg.com/v2-1f84776dde2a8bd3dfc5a97274be56fb_720w.jpg?source=b1748391?rss\" data-rawwidth=\"701\" data-rawheight=\"185\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-1f84776dde2a8bd3dfc5a97274be56fb\" data-watermark-src=\"v2-03d58055d80b3a67308ad0ee920ccfbc\" data-private-watermark-src=\"v2-633e86d1ab5eb6a8e5152b3de8a86957\"></p>\n<p data-pid=\"zKeLkDBK\">活蝓的分身经常闪亮登场，本体从未出现过。</p>\n<p data-pid=\"TEveozoS\">先研究一下活蝓本体的大小。</p>\n<p data-pid=\"nlqqcmbH\">平时用于战斗的时候，通灵出的体型和文太差不多大。</p>\n<p><img src=\"https://pica.zhimg.com/v2-4b7e28b5a83e44904c0a6c6cfbcfd4df_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1176\" data-rawheight=\"639\" data-size=\"normal\" data-caption=\"三人攻防战的时候，纲手通灵出来的活蝓\" data-watermark=\"original\" data-original-src=\"v2-4b7e28b5a83e44904c0a6c6cfbcfd4df\" data-watermark-src=\"v2-5f00599c1017276b9efb4ba131f512ea\" data-private-watermark-src=\"v2-0880b2aaf77e7250da5a5442544b0a58\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-1847ac0e08bb58a02046b381d8b144fd_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1148\" data-rawheight=\"927\" data-size=\"normal\" data-caption=\"四战的时候，小樱通灵出来的活蝓\" data-watermark=\"original\" data-original-src=\"v2-1847ac0e08bb58a02046b381d8b144fd\" data-watermark-src=\"v2-0f3e797d438c36365b5e843b1cb9097f\" data-private-watermark-src=\"v2-f5f821349990182e144d2fdc8efd0e6f\"></p>\n<p data-pid=\"3tnaa9Yb\">而设定书里，蛤蟆文太和蛤蟆吉的身高都是17米。鉴于活蝓是软体动物，这个时候活蝓分身的体型应该在二十五米左右。</p>\n<p data-pid=\"sHhrDAAm\">不过佩恩来袭的时候，纲手为了保护木叶忍者和村民通灵出来的活蝓体型就是一个谜了。</p>\n<p data-pid=\"JIrMj1PE\">通灵出来的镜头是这样的：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-538880921dd1a73b01d782a0f124aa86_720w.jpg?source=b1748391?rss\" data-rawwidth=\"560\" data-rawheight=\"925\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-538880921dd1a73b01d782a0f124aa86\" data-watermark-src=\"v2-17e49e22f8fd75003863b124d1c85e5c\" data-private-watermark-src=\"v2-e1f18503a59f8c9c9c0e4924445f0b73\"></p>\n<p data-pid=\"QSZOqwAF\">用尺子量了一下，高度比大概在二十倍左右。</p>\n<p data-pid=\"3ORpWMS0\">算上蛞蝓地上的部分，翻个倍，按四十倍计算。假设忍者的身高按一米七算，通灵出来的活蝓分身长度在70米左右。</p>\n<p data-pid=\"AJciueG9\">这么大的活蝓居然把木叶所有的忍者和居民都覆盖了你敢信？</p>\n<p><img src=\"https://picx1.zhimg.com/v2-6e80b621e9cf72da44195f7b73b98012_720w.jpg?source=b1748391?rss\" data-rawwidth=\"551\" data-rawheight=\"500\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-6e80b621e9cf72da44195f7b73b98012\" data-watermark-src=\"v2-848f13c00168e7aceedd9315d67048b6\" data-private-watermark-src=\"v2-67c62479dee7ffb38c21bddbecb659af\"></p>\n<p><br></p>\n<p><img src=\"https://pica.zhimg.com/v2-dcb689efe026231691ae379345a7db8b_720w.jpg?source=b1748391?rss\" data-rawwidth=\"575\" data-rawheight=\"273\" data-size=\"normal\" data-caption=\"每只小活蝓的长度大概在七十公分左右\" data-watermark=\"original\" data-original-src=\"v2-dcb689efe026231691ae379345a7db8b\" data-watermark-src=\"v2-e23e72c21901303db52b64ad3a671681\" data-private-watermark-src=\"v2-4d3487f56785668663bc004a9915a292\"></p>\n<p data-pid=\"-8hHBwVn\">也就是说大小蛞蝓的长度比例为100:1。体积的比例就是一百万比一，也就是说覆盖了木叶村百万人口。咦，好像也差不多。</p>\n<p data-pid=\"NKEQCOvv\">这个大蛞蝓分身的长度就按照70米长算吧。</p>\n<p data-pid=\"fjQJA_3P\">这是纲手没解开阴封印的状态下通灵出来的活蝓。</p>\n<p data-pid=\"9szhJ4Yt\">而四战的时候，纲手和小樱联手，使用百豪之术通灵出了蛞蝓本体的十分之一。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-fac6e6b19a1ad4ad812fb771e782594e_720w.jpg?source=b1748391?rss\" data-rawwidth=\"600\" data-rawheight=\"954\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-fac6e6b19a1ad4ad812fb771e782594e\" data-watermark-src=\"v2-9495a8703c919f6617de86e391cf1b91\" data-private-watermark-src=\"v2-8272b545013e51f3311b6b7be8a952da\"></p>\n<p data-pid=\"DqJCl_R-\">正常活蝓的体型是这样的。</p>\n<p><img src=\"https://picx1.zhimg.com/v2-975ff466d361eb4ae40b0a35a6ee33a0_720w.jpg?source=b1748391?rss\" data-rawwidth=\"890\" data-rawheight=\"661\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-975ff466d361eb4ae40b0a35a6ee33a0\" data-watermark-src=\"v2-c49137c5c42a397b28d7bbe3109664d0\" data-private-watermark-src=\"v2-a398d67e4566e461e9c6873bdbe88b36\"></p>\n<p data-pid=\"VNg8ECc-\">我量了一下，长宽比大概在四比一。</p>\n<p data-pid=\"Eh2wFvdL\">所以说四战的时候活蝓只露出了一部分在地面上。</p>\n<p data-pid=\"CbKiFBzI\">而且由于不知道活蝓所在的树根是否是神树的主根，所以我们对活蝓的大小只能进行推测。</p>\n<p data-pid=\"cwedvRDO\">四战之前通灵活蝓的时候，纲手并没有使用百豪之术，而联合的师徒俩都在百豪之术加持下使用的通灵术。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-cdabc6fb2c580819607b723a07f1fd00_720w.jpg?source=b1748391?rss\" data-rawwidth=\"545\" data-rawheight=\"281\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-cdabc6fb2c580819607b723a07f1fd00\" data-watermark-src=\"v2-c6d22a92854d8cd91250b4d412060adc\" data-private-watermark-src=\"v2-dcee2e3c927d153b3c7028d6705d2e32\"></p>\n<p><br></p>\n<hr>\n<p data-pid=\"Y9t83IcV\">百豪之术是什么？是释放大量查克拉并且维持住。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-86b6814d2eada61fbf6fc0814327acae_720w.jpg?source=b1748391?rss\" data-rawwidth=\"719\" data-rawheight=\"600\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-86b6814d2eada61fbf6fc0814327acae\" data-watermark-src=\"v2-ded5f5783c05ea7db4b481e201226d8e\" data-private-watermark-src=\"v2-14145f44df24f92fd6ee8400a4536aa9\"></p>\n<p data-pid=\"1SipyI5M\">让我想起了另一个忍术【阴封印·解】。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-d9b6a72c1912c76b33125c741869dc20_720w.jpg?source=b1748391?rss\" data-rawwidth=\"772\" data-rawheight=\"640\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-d9b6a72c1912c76b33125c741869dc20\" data-watermark-src=\"v2-37ab0d82a277fd24b1785c154fb38399\" data-private-watermark-src=\"v2-046705b7e6784a86319b27afd8c7d9d0\"></p>\n<p data-pid=\"SMiDDZ59\">再看看静音是怎么称呼阴封印形成的菱形印记的。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-6534ded8ef9d2c9b1bbe86c859ca85d2_720w.jpg?source=b1748391?rss\" data-rawwidth=\"600\" data-rawheight=\"1271\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-6534ded8ef9d2c9b1bbe86c859ca85d2\" data-watermark-src=\"v2-433f9cc62f9d53fc4c62bc4d415f0a50\" data-private-watermark-src=\"v2-5e0daf0b5aefd610f7e655d5e141d3ba\"></p>\n<p data-pid=\"QV-wxaPg\">静音将阴封印的标志称为百豪之印。</p>\n<p data-pid=\"BfqB1F9P\">所以说百豪术实际上就是【阴封印·解】的另一种称呼，两者的图案也很近似。</p>\n<hr>\n<p data-pid=\"iYp18QVU\">扯远了，继续说纲手小樱联手通灵出的0.1活蝓本体。</p>\n<p data-pid=\"Yz7_DrSl\">百豪之术能够一瞬间制造出大量查克拉，就像第一部里鸣人用九尾的查克拉通灵出文太一样。</p>\n<p data-pid=\"wY4_Sdgg\">那么百豪之术制造的查克拉是平常状态下制造查克拉的多少倍呢？</p>\n<p data-pid=\"yIBJpH5Y\">不知道。</p>\n<p data-pid=\"ai0ECLrM\">只能假设一下了，我觉得起码得有平时制造出的五倍的查克拉，要不然也对不起这个小樱积攒三年查克拉的S级忍术了。</p>\n<p data-pid=\"QFpk2HHQ\">两个人就是10倍。</p>\n<p data-pid=\"MuiY9bPy\">也就是说，70米长的活蝓乘以10倍是十分之一的活蝓本体。70米长的活蝓只有本体的百分之一。</p>\n<p data-pid=\"O-xg6OL3\">体积相差百倍，意味着身长的差距为4.6倍。【4.6的三次方约等于一百】</p>\n<p><br></p>\n<p data-pid=\"5RfBEbqW\">活蝓本体大概在350米长，腰围直径也有70米。</p>\n<p data-pid=\"ykGn66_j\">这是什么概念？</p>\n<p data-pid=\"yYJX4wsD\">六道级之下第一人的千手柱间你知道吧，他的绝招真数千手顶上化佛你晓得吧，就那个一把攥住九尾的能力。</p>\n<p><img src=\"https://picx1.zhimg.com/v2-479a41ac9b316e3d19bbc836cc9addbb_720w.jpg?source=b1748391?rss\" data-rawwidth=\"575\" data-rawheight=\"363\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-479a41ac9b316e3d19bbc836cc9addbb\" data-watermark-src=\"v2-e062cf5a86d44579747c1d6a5683441a\" data-private-watermark-src=\"v2-d20e6215461b2d7fca2ce43974e703a3\"></p>\n<p data-pid=\"YFAcqN2w\">尾兽的体型和蛤蟆文太差不多大，公式书设定文太身高十七米。也就是说这个千手大佛的手掌宽度差不多有十多米。</p>\n<p data-pid=\"aJwiMfp6\">而真数千手是这样的。</p>\n<p><img src=\"https://picx1.zhimg.com/v2-84ef0a3446b9100b93562aa28bf20556_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1170\" data-rawheight=\"919\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-84ef0a3446b9100b93562aa28bf20556\" data-watermark-src=\"v2-cf451b7bc8a4a9a69e3d487e9360c8c7\" data-private-watermark-src=\"v2-da3dbb12cc460b36c41385723fc2ffda\"></p>\n<p data-pid=\"nhmEGQNY\">手掌和整体高度比例大概有1:14。手掌宽度和长度比大概在1:2。所以说真数千手的高度在300米左右。</p>\n<p data-pid=\"zFnbofFL\">和活蝓本体差不多大，一口一个大型通灵兽的样子。</p>\n<p data-pid=\"1bfbgdV0\">光活蝓本体的体型就足够让人绝望了。</p>\n<p data-pid=\"7Z_605p6\">而且活蝓还会两大绝技：蛞蝓大分裂和舌齿黏酸。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-4546c9b53b6b796eef2bbdcbe796dbb3_720w.jpg?source=b1748391?rss\" data-rawwidth=\"851\" data-rawheight=\"669\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-4546c9b53b6b796eef2bbdcbe796dbb3\" data-watermark-src=\"v2-d0bd12fd3e10b45c96cf17d0e2148bba\" data-private-watermark-src=\"v2-399f5b373440f8900748666d009a8565\"></p>\n<p><br></p>\n<p><img src=\"https://pica.zhimg.com/v2-479827c0cb36316c99b3a53a1e85a089_720w.jpg?source=b1748391?rss\" data-rawwidth=\"708\" data-rawheight=\"612\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-479827c0cb36316c99b3a53a1e85a089\" data-watermark-src=\"v2-c4be198749a143ce6ca2a32d73a43df5\" data-private-watermark-src=\"v2-c2ba01d22930cd5be3aad47308a22f5c\"></p>\n<p data-pid=\"j1dwxe5n\">分裂就不用多说了，这么大的个头，能够分成3000个和蛤蟆文太差不多大的庞然大物。</p>\n<p data-pid=\"R5FUM8K3\">而酸液的规模是这样的。</p>\n<p><img src=\"https://pica.zhimg.com/v2-4afb2623ec766b8b440db9b6bc11a570_720w.jpg?source=b1748391?rss\" data-rawwidth=\"566\" data-rawheight=\"398\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-4afb2623ec766b8b440db9b6bc11a570\" data-watermark-src=\"v2-c3dd2ad660e08248c9e943c89c353d0a\" data-private-watermark-src=\"v2-724a800d2a99562520d1ab461345d8b3\"></p>\n<p data-pid=\"wp8aK3t8\">也就是说，以活蝓本体喷出去的酸液，范围达到了100米宽，数百米长。</p>\n<p data-pid=\"N65Cwrz3\">这可是连石头都能腐蚀成气体的强酸，活蝓本体喷出去的话，别说一座山头了，整座大山也腐蚀成大坑了。</p>\n<p data-pid=\"1rG88vIR\">这叫什么？这叫六道不出谁与争锋。</p>\n<hr>\n<p data-pid=\"noauJwUR\">再说一下大蛤蟆仙人。</p>\n<p data-pid=\"CJBClsR9\">说起大蛤蟆仙人，我就不得不说一句，</p>\n<h2>动画组，吔屎啊！</h2>\n<p data-pid=\"5QFPhtbc\">动画组原创的六道仙人剧情真的是辣鸡的堪比博人转了。</p>\n<p data-pid=\"8Tpm5_y-\">蛤蟆丸和六道仙人一起成长什么的，真的是无力吐槽。</p>\n<p data-pid=\"AAk76NId\">看看设定里大蛤蟆仙人的情报。</p>\n<p><img src=\"https://pica.zhimg.com/v2-d8a2eaa91c9fa45fbaac4727c4fddafa_720w.jpg?source=b1748391?rss\" data-rawwidth=\"910\" data-rawheight=\"705\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-d8a2eaa91c9fa45fbaac4727c4fddafa\" data-watermark-src=\"v2-c6adb155634752b7e273858b6d8f01fa\" data-private-watermark-src=\"v2-ea4b81643ee597cda64160b2df654741\"></p>\n<p data-pid=\"xkpxrA35\">【年过数千】、【蕴含巨大查克拉】、【预见未来】</p>\n<h2>年过数千的大蛤蟆仙人。</h2>\n<p data-pid=\"USn7brpH\">而大筒木辉夜才降临忍界一千年。降临之后种树开花结果吃掉，然后才生下来六道仙人。也就是说，六道仙人和大蛤蟆仙人差了上千岁乃至数千岁。</p>\n<p data-pid=\"tOwKSE73\">到了动画组原创剧情里，你说那个大蛤蟆仙人能有多大？</p>\n<p><img src=\"https://picx1.zhimg.com/v2-83f418e5898d201b5d5f3b00e0e73f53_720w.jpg?source=b1748391?rss\" data-rawwidth=\"640\" data-rawheight=\"360\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-83f418e5898d201b5d5f3b00e0e73f53\" data-watermark-src=\"v2-61ff5cd624c29a6ad7b9312a139af7ea\" data-private-watermark-src=\"v2-1bbf2876f1c9f48167ca6af5b22f69a7\"></p>\n<p data-pid=\"2ctCMb0i\">要知道，连蛤蟆深作修炼查克拉也有了八百多年。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-695fa6d004f1b522422552abb9147692_720w.jpg?source=b1748391?rss\" data-rawwidth=\"749\" data-rawheight=\"767\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-695fa6d004f1b522422552abb9147692\" data-watermark-src=\"v2-fa2c692062d3be9fabb96075e16fcd70\" data-private-watermark-src=\"v2-e747aa06259c739a553cddd3e669630b\"></p>\n<p data-pid=\"VplxzNKR\">不过蛤蟆深作认为六道仙人只是个传说，那就意味着他没见过六道仙人，甚至六道仙人已经凉透好多年了。</p>\n<p data-pid=\"_R8PKKMP\">所以蛤蟆深作大概八百岁出头。</p>\n<p data-pid=\"Lc5__h93\">而蛤蟆深作和蛤蟆志麻被大蛤蟆仙人称为年轻的夫妻。</p>\n<p data-pid=\"_gv4WZAT\">怎么想，蛤蟆丸也不会和六道仙人差不多大。</p>\n<p data-pid=\"kmMZ3J2h\">吐槽完吔屎的动画组，接着讨论大蛤蟆仙人。</p>\n<p><img src=\"https://pica.zhimg.com/v2-afbc4e3d13092453ebf80746ed70b8a0_720w.jpg?source=b1748391?rss\" data-rawwidth=\"840\" data-rawheight=\"673\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-afbc4e3d13092453ebf80746ed70b8a0\" data-watermark-src=\"v2-714dbc06d763b4498867d66076590434\" data-private-watermark-src=\"v2-7db64176e123d277a2d7196464892065\"></p>\n<p data-pid=\"fc5LR6Sn\">蛤蟆仙人做出预言的时候已经是数百年前的事了。</p>\n<p data-pid=\"4qIYp54k\">这也符合了六道仙人知晓预言的剧情。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-53488882764c1b0b3abe18a2c6632b41_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1292\" data-rawheight=\"599\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-53488882764c1b0b3abe18a2c6632b41\" data-watermark-src=\"v2-836e3d23e3fe3fbc51bae694a444398a\" data-private-watermark-src=\"v2-a37809fb67456e32104e01637c06823b\"></p>\n<p data-pid=\"bPeDbHri\">既然谈到了实力问题，那就重点看一下大蛤蟆仙人的查克拉量。</p>\n<p data-pid=\"8CABfL5I\">者之书里写道：大蛤蟆仙人凭借体内巨大的查克拉预见未来。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-ea78834ea7b0f0d84137a799ae335c91_720w.jpg?source=b1748391?rss\" data-rawwidth=\"910\" data-rawheight=\"705\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-ea78834ea7b0f0d84137a799ae335c91\" data-watermark-src=\"v2-84dca4bc4d46045b06e53a431a4787f8\" data-private-watermark-src=\"v2-d474c36d05dec43d85e64c2e5609ab7d\"></p>\n<p data-pid=\"9LE0geML\">但是到底它的查克拉量多巨大？有多少卡？我们不清楚。</p>\n<p data-pid=\"dV66l-7L\">所以我们只能进行推测。</p>\n<p data-pid=\"4h8ow8rn\">大蛤蟆仙人除了预言之外，唯一一次出手是在鸣人对决长门的时候。</p>\n<p data-pid=\"124M5yG_\">通过望远镜术直接从妙木山看到了木叶村附近。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-add7a3f05c274df085201c7183b450b6_720w.jpg?source=b1748391?rss\" data-rawwidth=\"600\" data-rawheight=\"1089\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-add7a3f05c274df085201c7183b450b6\" data-watermark-src=\"v2-cc62ef5b7853768a5f9602be0b14af4e\" data-private-watermark-src=\"v2-ce43779a7d0c6d6f87ec246ea1bf2e79\"></p>\n<p data-pid=\"iOmOHM8r\">这个术早在第一部里就出现过，是猿飞日斩的招牌偷……观察忍术。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-b602fb625249f1cd927ee1634c6e9b03_720w.jpg?source=b1748391?rss\" data-rawwidth=\"513\" data-rawheight=\"425\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-b602fb625249f1cd927ee1634c6e9b03\" data-watermark-src=\"v2-350bb7dca16206565e05806d6c178b07\" data-private-watermark-src=\"v2-2e4f7937ea36031b2fc6c4279d178a64\"></p>\n<p data-pid=\"RxKmU8Si\">而三代火影使用这个术的距离很明显不算太远，临之书里说：三代火影用这个术维持村子内的治安。</p>\n<p data-pid=\"kr2NZQa8\">我推测猿飞日斩使用这个术的范围只有几十公里。如果能够覆盖更远的地方，那战争中可就是绝对的利器了。这也符合四战开启之前感知忍者的辐射范围。换成忍者脚程大概是半个小时？</p>\n<p data-pid=\"8GLPA6zI\">而妙木山到木叶足足需要三十天。</p>\n<p><img src=\"https://picx1.zhimg.com/v2-859225f3ff3c89f8397b2c3d6cf6dfc5_720w.jpg?source=b1748391?rss\" data-rawwidth=\"319\" data-rawheight=\"295\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-859225f3ff3c89f8397b2c3d6cf6dfc5\" data-watermark-src=\"v2-0b172c498cd3fab2aab35dee1db18f2d\" data-private-watermark-src=\"v2-1cd75b70a5f7b022b1265814ee33823e\"></p>\n<p data-pid=\"LMHnTr5w\">木叶到砂隐村才只要三天。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-2022d8f8a8b9575750f39a54f168e399_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1280\" data-rawheight=\"720\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-2022d8f8a8b9575750f39a54f168e399\" data-watermark-src=\"v2-dc1ed5e6f87022d8eaafc90c0d03f63c\" data-private-watermark-src=\"v2-24ea202666aa8c9306254c0eb0c7813b\"></p>\n<p data-pid=\"TbkUPUFC\">也就是说，大蛤蟆仙人的查克拉能够观察到忍界任何角落，甚至是三倍于忍界的范围也没问题。</p>\n<p data-pid=\"xsWTqIXN\">至少相当于150个老年猿飞日斩的查克拉量。</p>\n<p data-pid=\"COufqsaD\">老年猿飞日斩精6，和卡卡西相同。所以说大蛤蟆仙人的查克拉量保守估计也有150卡。</p>\n<p data-pid=\"ielm17ju\">emmmm……好像也没多少？和仙鸣差不多？</p>\n<p data-pid=\"j_c_IZWu\">以大蛤蟆仙人媲美文太的体型，这只是基本操作。</p>\n<p><br></p>\n<p data-pid=\"IHhkzpP_\">好吧，这估计只是大蛤蟆仙人实力的冰山一角，我们再换一种论证方法。</p>\n<p data-pid=\"mEMF7DwT\">大蛤蟆仙人的预言能够得到六道仙人的认可，并且还使得六道仙人与尾兽做了个约定。</p>\n<p><img src=\"https://picx1.zhimg.com/v2-f2b1edd08a1bc45c4109bd3226b749a0_720w.jpg?source=b1748391?rss\" data-rawwidth=\"350\" data-rawheight=\"421\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-f2b1edd08a1bc45c4109bd3226b749a0\" data-watermark-src=\"v2-58d81d52239bf6b4dacddf79fd6ea729\" data-private-watermark-src=\"v2-73e2446b027679b05d7f038f95692fe4\"></p>\n<p data-pid=\"7pWH8FV1\">这是什么排面？</p>\n<p data-pid=\"GCkFElUU\">能得到六道仙人的重视，起码也得达到很高的段位。我觉得大蛤蟆仙人有可能超过了顶上化佛的级别。毕竟柱间都被复活后的斑嫌弃了。</p>\n<p data-pid=\"RLrLouTZ\">嗯，前面的150卡查克拉就不要介意了，这只是保守估计。嗯，可能是大蛤蟆仙人年老体衰查克拉剧烈下降了。</p>\n<p><img src=\"https://pica.zhimg.com/v2-86c03f8781add9e56fe079381d5a602a_720w.jpg?source=b1748391?rss\" data-rawwidth=\"703\" data-rawheight=\"602\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-86c03f8781add9e56fe079381d5a602a\" data-watermark-src=\"v2-0b45f613685612b4d7208f4f518615e2\" data-private-watermark-src=\"v2-c6eac8812cb790461ca745efb4025d7b\"></p>\n<p><br></p>\n<hr>\n<p data-pid=\"4pslCPtr\">最后，再提一下白蛇仙人。</p>\n<p data-pid=\"yGNXEpy4\">漫画中，白蛇仙人只出现在仙人兜的记忆里。而且只是坐在那里，它的实力我们不得而知。</p>\n<p><img src=\"https://picx1.zhimg.com/v2-e0dc58ec28b8b0e38e586b1034f9b2a3_720w.jpg?source=b1748391?rss\" data-rawwidth=\"790\" data-rawheight=\"664\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-e0dc58ec28b8b0e38e586b1034f9b2a3\" data-watermark-src=\"v2-c4cec7bd510ab0c19f4f757a6fa6dd6f\" data-private-watermark-src=\"v2-fd98e9b26e1d901e95509dd4f6889d3d\"></p>\n<p data-pid=\"jgHf5fAp\">阵之书里对白蛇仙人是这么描述的：【仙蛇】、【白色的巨大身体和大地化为一体】、【用牙齿给修行者注入自然能量】、【龙地洞的首领】</p>\n<p data-pid=\"1jLaHK92\">既然能够用牙齿为修行者注入自然能量，就意味着它的牙尖不能比人粗，要不然根本注入不进去。这么看，白蛇仙人的体型可能比万蛇还小一些，但是说一声巨大也不算错。</p>\n<p data-pid=\"EU3BQeA0\">白蛇仙人作为龙地洞的首领，底下的万蛇性格又那么恶劣，所以白蛇仙人起码得有暴打万蛇的实力。</p>\n<p data-pid=\"fWScLUbC\">当然，这个不用想也知道。</p>\n<p data-pid=\"wBWqOEp7\">白蛇仙人的信息实在是太少了。</p>\n<p data-pid=\"P-pbXfQV\">继续挖掘。</p>\n<p data-pid=\"V7xng1MC\">看一下它的形象吧。</p>\n<p><img src=\"https://picx1.zhimg.com/v2-882d151da472f908bb1a4d734413467b_720w.jpg?source=b1748391?rss\" data-rawwidth=\"568\" data-rawheight=\"879\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-882d151da472f908bb1a4d734413467b\" data-watermark-src=\"v2-a68cfeb984f94866860fe1ad6ac30392\" data-private-watermark-src=\"v2-fc47a09daffa4d67d85858d1816c1f5f\"></p>\n<p data-pid=\"Bhj-o4Cf\">脑袋上有一顶黑色的帽子，再上面有一个大水晶球，脖子上有一个项链。</p>\n<p data-pid=\"je-e5Ocr\">嗯，和大蛤蟆仙人有点像。</p>\n<p><img src=\"https://picx1.zhimg.com/v2-c713ea708d42cfd1c46d19741ec1e27d_720w.jpg?source=b1748391?rss\" data-rawwidth=\"574\" data-rawheight=\"431\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-c713ea708d42cfd1c46d19741ec1e27d\" data-watermark-src=\"v2-5822d31fca1e5b2c0011102baaf554a5\" data-private-watermark-src=\"v2-3562c58271e8c916ddb452990d0efc8d\"></p>\n<p data-pid=\"jcC2YWa-\">可能这个看不太清楚头顶上的水晶球，那就换个角度。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-3a7dcb4ff8de165cf556d77be653951c_720w.jpg?source=b1748391?rss\" data-rawwidth=\"564\" data-rawheight=\"347\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-3a7dcb4ff8de165cf556d77be653951c\" data-watermark-src=\"v2-f88ec471e5f7f7fd18522d2ae04f0abc\" data-private-watermark-src=\"v2-9bb51a68186eded45632393b7b63751a\"></p>\n<p data-pid=\"A4Vl5P-7\">看到了吗？蛤蟆仙人头顶上也是一个水晶球。</p>\n<p data-pid=\"92g7CyfV\">摘下帽子以后还能用来偷窥……我是说暗中观察。</p>\n<p><img src=\"https://picx1.zhimg.com/v2-25a688b3a55dccfd86e9b91dd3f7ebd9_720w.jpg?source=b1748391?rss\" data-rawwidth=\"248\" data-rawheight=\"328\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-25a688b3a55dccfd86e9b91dd3f7ebd9\" data-watermark-src=\"v2-5cb3b03c11fb60600bf41fa2820aca74\" data-private-watermark-src=\"v2-707b3b052041fafb2b78b88d67516233\"></p>\n<p data-pid=\"q5VsePVi\">所以我怀疑白蛇仙人也有这个观察忍界的能力。</p>\n<p data-pid=\"778b6RaP\">毕竟，龙地洞、湿骨林、妙木山被称为<b>仙人</b>三大秘境，对忍界有很大影响。【仙人】二字是不是意味着活蝓也会仙术，所以活蝓也可以称之为活蝓仙人？</p>\n<p><img src=\"https://picx1.zhimg.com/v2-4692df9d51ced4c78800b6f5313f6dee_720w.jpg?source=b1748391?rss\" data-rawwidth=\"768\" data-rawheight=\"641\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-4692df9d51ced4c78800b6f5313f6dee\" data-watermark-src=\"v2-2cb3c60d0935ed77eced6923ee3912f2\" data-private-watermark-src=\"v2-d30f45edc0978c80e4c23fff39305ead\"></p>\n<p data-pid=\"oznwYl6i\">大蛤蟆仙人经常睡觉，清醒的时候靠水晶球观察忍界。</p>\n<p data-pid=\"520h6sAO\">白蛇仙人和大地融为一体，也只能靠水晶球观察忍界。</p>\n<p data-pid=\"mJQmBczd\">这么一看，不对啊，湿骨林呢？</p>\n<p data-pid=\"W_gghzxV\">活蝓仙人用什么观察忍界？</p>\n<p data-pid=\"_U5RHKw6\">既然三个秘境齐名，当然道具也要整整齐齐啊。</p>\n<p data-pid=\"F5PVFtnd\">所以活蝓仙人也是靠水晶球观察忍界。</p>\n<p data-pid=\"25mbfpdW\">只不过因为活蝓仙人和纲手签订契约了，随时可以通过分裂体观察世界。于是就把水晶球送给猿飞日斩了？</p>\n<p data-pid=\"Sv3YoQGW\">→_→</p>\n<p><img src=\"https://picx1.zhimg.com/v2-eb35cc7d8196f49c5134c9487b7bd8a1_720w.jpg?source=b1748391?rss\" data-rawwidth=\"763\" data-rawheight=\"578\" data-size=\"normal\" data-watermark=\"original\" data-original-src=\"v2-eb35cc7d8196f49c5134c9487b7bd8a1\" data-watermark-src=\"v2-04fa92f17711d5ba59f0d17de9dc8e8b\" data-private-watermark-src=\"v2-a776fc2d03617c2399bfee2a8816853f\"></p>\n<p data-pid=\"7IiGv-gY\">结论：如果以活蝓仙人为标准，那么三大仙人的实力应该是在六道级左右。</p>\n<p data-pid=\"xPg2Pfos\">嗯，应该差不多……吧？</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/an-hong-se-de-dan-yang?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">暗红色的丹阳</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/358933272/answer/922500041?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">19 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/523334510?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">我想知道……小哥能击败妖怪吗？</a><br><a href=\"http://www.zhihu.com/question/38201903?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">从前有只魃，大妖，神仙怎么看它？</a><br>\n","link":"http://www.zhihu.com/question/358933272/answer/922500041?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"《绝代双骄》动画上线，你有什么想说的？","date":"2022-11-01 07:36:16","description":"\n<p data-pid=\"hBpWV5T_\">知乎的各位，大家好！</p>\n<p data-pid=\"692jhLMJ\">我是来自百漫文化的黄晓洪，《绝代双骄》动画导演。</p>\n<p data-pid=\"YLEU-dqT\">首先要感谢大家对《绝代双骄》动画的关注。你们的每一条留言我们都有认真看待。</p>\n<p data-pid=\"UGy8C3oB\">其实接到“绝代双骄动画化”这个任务的时候，我立刻就感到了非常大的压力。压力的来源不难猜到，就是要用年轻人喜欢的方式重述经典，希望能够保留原作气质、受到大众欢迎的那种压力。百漫另一人气动画系列《西行纪》也是改编于家喻户晓的文学名著《西游记》，但动画《西行纪》总归是有已经积累了大量粉丝的《西行纪》漫画作为改编基础。漫画对西游记中人物故事的“后传”，包括人物设定的创新都已经有了充分的讲述和呈现，获得了粉丝的认可，动画自然就可以和漫画一样放开胆子去做了。 </p>\n<p data-pid=\"kjO5_1Oh\">但《绝代双骄》动画，是对古龙先生这一里程碑式代表作的再一次全新诠释。 提到《绝代双骄》，很多人自然就会联想到众多的电影电视改编。从老港片时代开始，到前几年都还在翻拍的国产剧，版本不计其数。可以说几代国人的心中都有一版自己最认可的《绝代双骄》，但动画化，是这个IP真真正正的头一回。</p>\n<p data-pid=\"gfvuvND5\">但既然要做，我们当然决心把它做好。武侠是中华文化名片之一，我们希望借《绝代双骄》动画这个契机，把一部经典的武侠动画留给当代的年轻人，将侠义精神传承下去。同时从行业角度来说，把武侠文化重新带回到国漫舞台中央也能够推陈出新，给整个文化产业注入新的活力。</p>\n<p data-pid=\"J72Cd2w4\">百漫文化集结了多个顶尖团队，拿出满满诚意和充足准备，开始了古龙IP动画化的制作。今天借此良机分享《绝代双骄》动画的一些幕后制作的思考，希望能让大家看到更加多姿多彩的江湖盛景。</p>\n<p data-pid=\"pDHhXP_K\"><b>关于设定——还原古龙的原生气质 ，放大动画的想象空间</b></p>\n<p data-pid=\"VqTqvxXp\">《绝代双骄》作为长篇巨制，出场角色数量众多。虽然有深入人心的电视剧版角色形象在前，但作为首次动画改编，角色设计上我们决定尝试融入一些大胆的创新。电视剧动辄几十集的篇幅与动画番剧十分不同，这就要求《绝代双骄》动画主创从前期开始，不断思考如何去拎起一条适合动画的剧本结构，再在其中装载古龙式的诗意、幽默和细腻，平衡故事结构与角色的写意塑造。 </p>\n<p data-pid=\"9JSCZlpf\">而动画具有一种特性，就是可以实现很多对真人来说难以触达的设计，更适合展现“奇观”、“奇景”这一类外化的、冲击力强的东西，这是优势所在。因此在做内容提炼的时候，团队重点考虑了两件事，一是把角色塑造做的更外化、夸张，另一方面是呈现符合现代化的审美预期。</p>\n<p data-pid=\"oQtNl77G\">「十大恶人」、「十二星相」，是编剧团队核子章鱼从原著中找到的宝藏。作为串联起结构的重要线索，他们带起了整个大故事，展现了一个符合年轻观众想象的，千人千面的、光怪陆离的武侠江湖。  </p>\n<p><img src=\"https://picx1.zhimg.com/v2-bb847347058953681575b11820d5e4f9_720w.jpg?source=b1748391?rss\" data-caption=\"十大恶人水墨剪影设计\" data-size=\"normal\" data-rawwidth=\"908\" data-rawheight=\"414\" data-watermark=\"watermark\" data-original-src=\"v2-bb847347058953681575b11820d5e4f9\" data-watermark-src=\"v2-cacf5a9a6438f63b8eeb19dd19490594\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-443458523d2ec7a30f873153e78ced45_720w.jpg?source=b1748391?rss\" data-caption=\"十二星相概念设计图\" data-size=\"normal\" data-rawwidth=\"908\" data-rawheight=\"372\" data-watermark=\"watermark\" data-original-src=\"v2-443458523d2ec7a30f873153e78ced45\" data-watermark-src=\"v2-9e8f76e5472e6f2ffe970e2c5ed2c035\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"_AnuDAQj\"> “没有谁是天生的恶，恶人与怪人亦是如此。”他们不一定有美丽帅气的脸，但一定长着一张“有故事的脸”。</p>\n<p data-pid=\"B_n-TjPN\">第一集中出场的「十二星相」碧蛇神君，原著对其形象的描述并非细致入微，而是用三五句写意地勾勒出一个印象：</p>\n<p data-pid=\"BriFWGNW\"> “穿着条碧绿的紧身衣，藏在树叶中，当真叫人难以发觉，他又瘦又长的身子，弯弯曲曲地藏在枝桠间，全身像是没有骨头，那双又细又小的眼睛瞪着小鱼儿，活脱脱就像是条蛇，毒蛇！” </p>\n<p data-pid=\"PIE5QQvm\">动画美术在身型、服化道上使用了“物拟”的塑造手法，取蛇形生物形态，蛇尾做发辫，蛇鳞做装饰，给人强烈直观的视觉冲击。  </p>\n<p><img src=\"https://picx1.zhimg.com/v2-0b60788efa70b2e4c2ff176e99f45702_720w.jpg?source=b1748391?rss\" data-caption=\"十二星相-蛇 概念设计图\" data-size=\"normal\" data-rawwidth=\"6726\" data-rawheight=\"4185\" data-watermark=\"watermark\" data-original-src=\"v2-0b60788efa70b2e4c2ff176e99f45702\" data-watermark-src=\"v2-f9476167dfa1eb9aa738a2f011781c11\" data-private-watermark-src=\"\" data-qrcode-action=\"none\" data-tags=\"qrcode\"></p>\n<p data-pid=\"db8TXNJB\">既然这些反派角色使用了夸张的设计来表现，为了统一整体造型、拉平风格，主角阵营也注定不会像其他主流的3D国漫作品一样，更偏向真人化的建模；而是也按照还原气质和增加风格化的理念，呈现适度的夸张。</p>\n<p data-pid=\"Lh0-TxsU\">举小鱼儿为例：他是一位充满生命力的刀疤少年。</p>\n<p data-pid=\"T0MRa8fO\">小鱼儿最具代表性的就是从额头斜切至脸颊的这一道刀疤，这关系着双骄的身世，是原著中不可磨灭的人物符号。 而动画中小鱼儿的小麦肤色，则是根据原著关于地理位置的描写推断，认为小鱼儿生活在昆仑山区附近。昆仑山位于高海拔地区，日照充分，所以肌肤呈现小麦色健康红润感。    </p>\n<p><img src=\"https://picx1.zhimg.com/v2-3c2ccb29026f26da93f20d56d713b0b8_720w.jpg?source=b1748391?rss\" data-caption=\"江小鱼美术概念图\" data-size=\"normal\" data-rawwidth=\"4130\" data-rawheight=\"2323\" data-watermark=\"watermark\" data-original-src=\"v2-3c2ccb29026f26da93f20d56d713b0b8\" data-watermark-src=\"v2-bb2ffcb6d9d6290c4740d87dc424a8b4\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pica.zhimg.com/v2-cf8559d9b453188f13355634c06e2b4e_720w.jpg?source=b1748391?rss\" data-caption=\"三维模型效果图\" data-size=\"normal\" data-rawwidth=\"1777\" data-rawheight=\"781\" data-watermark=\"watermark\" data-original-src=\"v2-cf8559d9b453188f13355634c06e2b4e\" data-watermark-src=\"v2-2e1c9e3cc9737c8ac7c506f7c1086b20\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"FG7kvgeo\">而花无缺：他是一位风度翩翩的贵公子。</p>\n<p data-pid=\"vLagBafN\">考虑到从小在移花宫女人堆里长大，花无缺的设计方向为白衣翩然，乌发配梅花发簪，手持晶蓝色「凌寒不知雪」的温润贵公子。 师父邀月带来的严格教育，让他无法轻易表露自己的情感与喜好，在前半剧情中显得高冷疏离。在第二季的剧本设计中，花无缺会随着与小鱼儿、铁心兰等的相交，逐步打开内心，从不食人间烟火的谪仙活成一个有血有肉的人。  </p>\n<p><img src=\"https://picx1.zhimg.com/v2-ab75a6870722bf78cbe5df809961ffa9_720w.jpg?source=b1748391?rss\" data-caption=\"花无缺美术概念图\" data-size=\"normal\" data-rawwidth=\"908\" data-rawheight=\"312\" data-watermark=\"watermark\" data-original-src=\"v2-ab75a6870722bf78cbe5df809961ffa9\" data-watermark-src=\"v2-f7ff264761dd1eb9f9465b1460c5c735\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://picx1.zhimg.com/v2-c008b3b2d5bdd95f0f1ba95dc03f5d40_720w.jpg?source=b1748391?rss\" data-caption=\"花无缺美术概念图\" data-size=\"normal\" data-rawwidth=\"4130\" data-rawheight=\"2323\" data-watermark=\"watermark\" data-original-src=\"v2-c008b3b2d5bdd95f0f1ba95dc03f5d40\" data-watermark-src=\"v2-0f76dfcd5b0d625dc311685a98b42c13\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://picx1.zhimg.com/v2-06570ae772ad9e8eb569e03cef889a5d_720w.jpg?source=b1748391?rss\" data-caption=\"角色搭配环境气氛测试\" data-size=\"normal\" data-rawwidth=\"908\" data-rawheight=\"336\" data-watermark=\"watermark\" data-original-src=\"v2-06570ae772ad9e8eb569e03cef889a5d\" data-watermark-src=\"v2-6560903c08fa8efa9d4eb26c57986926\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"pTbBVeT8\">关于铁心兰：独闯江湖的飒爽女侠。</p>\n<p data-pid=\"9TprgmHT\">铁心兰不但从小在江湖上闯荡，只身寻找父亲的下落。还能在小鱼儿和花无缺之间周旋、成为联系这对兄弟的纽带，以现代化的语境来看，她是一个充满魄力与魅力的女性角色。项目早期的用户访谈会里，有读者提到期待看到不一样的铁心兰。因此在做铁心兰的设定时，我们一改过去影视剧的塑造方式，着力去放大她独立自信、飒爽英姿的女侠属性。  </p>\n<p><img src=\"https://picx1.zhimg.com/v2-60feefb5ef61aae408884f2f53028193_720w.jpg?source=b1748391?rss\" data-caption=\"铁心兰早期美术设计\" data-size=\"normal\" data-rawwidth=\"4130\" data-rawheight=\"2323\" data-watermark=\"watermark\" data-original-src=\"v2-60feefb5ef61aae408884f2f53028193\" data-watermark-src=\"v2-29c6f42b8f8964a95eb242bad2478bde\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"1qVzysXX\">早期的设计初衷是希望通过简洁干练的短打来刻画她狂狮铁战之女的帅气身份，手缠绷带、肩挂铠甲来体现她疯狂一百零八打的独门招术。发型上也一改古风女性角色常见的长发披肩，选择了双马尾来加强轮廓感。</p>\n<p data-pid=\"y8Limg5N\">当然，这样的形象放到观众熟悉的国漫和武侠中，并不符合一直以来大众对女性柔美外貌的期待。预告发布后，我们也在网络搜集到有粉丝提出对铁心兰换装换造型的诉求。主创们已经着手讨论，服饰造型出了近10套方案，希望匹配着人物在剧情中的心态和境遇变化，做出从女侠形象，自然过渡到侠骨柔情、甜盐兼备的复合气质。 模型资产也同步在做优化调整，直到中后期的收尾时，我们仍然在对铁心兰的五官、头发进行微调。在第二季动画制作中，这些调整都还在持续做着。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-ef046bfffa0a654d833ffa7dbda5ab96_720w.jpg?source=b1748391?rss\" data-caption=\"造型尝试与面容优化过程\" data-size=\"normal\" data-rawwidth=\"5378\" data-rawheight=\"1637\" data-watermark=\"watermark\" data-original-src=\"v2-ef046bfffa0a654d833ffa7dbda5ab96\" data-watermark-src=\"v2-c7cdaf57e5641b657ea82187e239fc52\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"afGBL3ck\">从高冷霸气到逐渐袒露真情，她的人物弧光将随着故事的徐徐展开而逐渐立体。相比于简单直给的表现“她是什么人设”，我们更希望落到动画片中，去解答“怎样的经历塑造了这样的人设，什么逐渐造就了她”。不仅是铁心兰，所有角色皆是如此。</p>\n<p data-pid=\"YgapNVrK\"><b>探秘千面江湖，看尽神功绝技</b></p>\n<p data-pid=\"A20jXZUe\">立足武侠，要表现千姿百态的个性江湖，除了落在美术上，武打和武器的设计也必不可少，力求为不同角色阵营做出个性化的武学套路。</p>\n<p data-pid=\"9FRB5Rfg\">「十二星相」走形意流，武打招术是结合其动物性来设计，如司晨客（十二星相·鸡）、黑面君（十二星相·猪）的动物压阵出场，碧蛇神君（十二星相·蛇）的蛇形步和附骨蛇牢。</p>\n<p data-pid=\"R4o2iuIQ\">「十大恶人」则走的是绝学流，贴合原著武学样貌来放大，如屠娇娇的缩骨功、杜杀的血手钻心。  </p>\n<p><img src=\"https://picx1.zhimg.com/v2-0637da27bbae516873c48dbc5ca7ef9e_720w.gif?source=b1748391?rss\" data-caption=\"形意流功法之一\" data-size=\"normal\" data-rawwidth=\"738\" data-rawheight=\"382\" data-watermark=\"watermark\" data-original-src=\"v2-0637da27bbae516873c48dbc5ca7ef9e\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://picx1.zhimg.com/v2-af58e6233deba97753afcd534ec92c70_720w.gif?source=b1748391?rss\" data-caption=\"绝学流功法之一\" data-size=\"normal\" data-rawwidth=\"708\" data-rawheight=\"370\" data-watermark=\"watermark\" data-original-src=\"v2-af58e6233deba97753afcd534ec92c70\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"PH6bt2bg\">小鱼儿杂学了五大恶人各家绝活，打斗上呈现灵活多变的“散装武学”。  </p>\n<p><img src=\"https://pic1.zhimg.com/v2-453043f88674ba4121bd9e5568ee3c19_720w.gif?source=b1748391?rss\" data-caption=\"散装武学，什么都会\" data-size=\"normal\" data-rawwidth=\"738\" data-rawheight=\"372\" data-watermark=\"watermark\" data-original-src=\"v2-453043f88674ba4121bd9e5568ee3c19\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"gsTNIagY\"> 武器上利用材料延展，来增加打斗空间的想象和新派武侠的气质。</p>\n<p data-pid=\"8v8pYOG6\">例如江玉郎的武器「明煜刀」，连接刀刃的特殊金属，在加热后会变得可拉伸，让刀刃变为鞭刃。  </p>\n<p><img src=\"https://pic1.zhimg.com/v2-2dfb6b3941279b921ac6b5ef525a84de_720w.jpg?source=b1748391?rss\" data-caption=\"明煜刀\" data-size=\"normal\" data-rawwidth=\"1806\" data-rawheight=\"580\" data-watermark=\"watermark\" data-original-src=\"v2-2dfb6b3941279b921ac6b5ef525a84de\" data-watermark-src=\"v2-391bffcf64beb08e7964efd4ddecaabe\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://picx1.zhimg.com/v2-acd17fc23ba82843296e6ce3ae8d3962_720w.gif?source=b1748391?rss\" data-caption=\"打斗中武器的变形过程\" data-size=\"normal\" data-rawwidth=\"930\" data-rawheight=\"400\" data-watermark=\"watermark\" data-original-src=\"v2-acd17fc23ba82843296e6ce3ae8d3962\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"j1Qn9kfx\"><b>关于制作部分</b></p>\n<p data-pid=\"FJ-jyMOZ\">作为经典IP改编作品，珠玉在前，动画对视听品质也保持了高要求。国内CG制作中，动作捕捉技术已经运用的非常广泛了。但艺术感觉上，动作捕捉相当依赖演员，最终效果始终在人自然能产生的肢体语言范畴中。但如果脱离出动捕的囹圄，则可以将角色表演的上限拉的无限大，做出比现实更有冲击和张力的动态感受。</p>\n<p data-pid=\"P0Ku26LX\">为了尽可能的提升《绝代双骄》武打动作的表演细节，在武侠打击感与视觉特效之间寻求平衡，百漫放弃动捕，选择了最吃力的手动Key帧制作动画，并且做到全片5883个镜头全部手K动画。  </p>\n<p><img src=\"https://picx1.zhimg.com/v2-04d8a790173ceb38aa409071ec8ca351_720w.gif?source=b1748391?rss\" data-caption=\"成片中的“绝杀”镜头\" data-size=\"normal\" data-rawwidth=\"838\" data-rawheight=\"466\" data-watermark=\"watermark\" data-original-src=\"v2-04d8a790173ceb38aa409071ec8ca351\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"gTkcb3XT\">单一个绝杀镜头，从动作表演到粒子特效，迭代数十版。并且将停格Pose、特效跟随、动镜头和景别转化等复杂的效果都充分利用，以实现打得流畅和自在。  </p>\n<p><img src=\"https://pic1.zhimg.com/v2-6bdf742f7a3e34a886b047ba14aeb98b_720w.jpg?source=b1748391?rss\" data-caption=\"多层次镜头语言与影视级光影渲染\" data-size=\"normal\" data-rawwidth=\"908\" data-rawheight=\"512\" data-watermark=\"watermark\" data-original-src=\"v2-6bdf742f7a3e34a886b047ba14aeb98b\" data-watermark-src=\"v2-3c98ee71f8796224893124eb84001151\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"2c2s7UTM\">比起套用已经相对成熟的大男主升级流单线叙事，《绝代双骄》选择了多视角、多层次、多线铺陈的叙事方式，表现手法更偏影视化。</p>\n<p data-pid=\"YNgUzWos\">这也得益于总导演彭擎政的指导，彭导的《中国唱诗班》系列，以精美高雅的水墨画风、含蓄又精妙的借物抒情，曾惊艳整个国漫圈，被赞誉满满国风、最美动画。本片里，彭导也在情感传递和气氛营造方面下了很多功夫。 </p>\n<p data-pid=\"3Vf3R3fP\">故事开端，使用匹配剪辑（Match ﻿cut）和平行蒙太奇，将在恶人谷和移花宫两个场景中的小鱼儿与花无缺，通过年龄、行动的相似，重合在一起，保持叙事的连贯，形成自然的转场。</p>\n<p data-pid=\"e1vhDE94\">同时也形成一种视觉冲击和隐喻效果，观众能快速体会到小鱼儿与花无缺，在不同环境同一时间里长大的命运羁绊。  </p>\n<p><img src=\"https://picx1.zhimg.com/v2-1d65e34b3c75a3e0fd0dcbe172c8d852_720w.gif?source=b1748391?rss\" data-caption=\"动画第一集转场镜头\" data-size=\"normal\" data-rawwidth=\"906\" data-rawheight=\"504\" data-watermark=\"watermark\" data-original-src=\"v2-1d65e34b3c75a3e0fd0dcbe172c8d852\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"t0i5Q3-S\">场景设计方面，《流浪地球》美术团队念动文化充分发挥了幻想系场景搭建的长处，打造了专属于绝代双骄的武侠场景风格。不同类别的故事会导致整体的美术场景设计风格迥然不同。流浪地球是科幻、星际感。绝代双骄是古风武侠，风格迥异，在场景的设计的思路从开始就有着完全不同的考量。</p>\n<p data-pid=\"ZOZ7oaRS\">移花宫场景在视觉调度上多用花草、明月、白雪、湖海、山石等优美的空镜，做更高级有韵味的镜头调剂，让画面节奏张弛有度。  </p>\n<p><img src=\"https://pic1.zhimg.com/v2-96459a32f2bd82c382b4acf58bf5b1e4_720w.jpg?source=b1748391?rss\" data-caption=\"移花宫一角\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"watermark\" data-original-src=\"v2-96459a32f2bd82c382b4acf58bf5b1e4\" data-watermark-src=\"v2-6e7e4ffffb65929c193b3d18367ceccf\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"qjvGWHSz\">比起常规3D动画番剧，光影、渲染的使用标准也更高。UE引擎渲染满足流体、刚体力学的复杂要求；除了全局光、辅助光等多重光源的布置，更设计了灯笼、烛火等光照元素，来塑造细腻质感。﻿  </p>\n<p><img src=\"https://pic1.zhimg.com/v2-56ba8acc3a375e31ef03dc50d7562824_720w.gif?source=b1748391?rss\" data-caption=\"光源设计烘托氛围\" data-size=\"normal\" data-rawwidth=\"856\" data-rawheight=\"372\" data-watermark=\"watermark\" data-original-src=\"v2-56ba8acc3a375e31ef03dc50d7562824\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"ifOknwWu\">多层次、多线交织的剧情节奏，让绝代双骄动画的三维资产数量多到惊人。仅带有名字的角色数就有155个，大小场景60余个，包含了恶人谷、移花宫、十二星相藏身处、慕容世家、峨眉山等诸多版图，随着小鱼儿与花无缺双子身世线的展开，指数型地爆发信息。</p>\n<p data-pid=\"laN6Hn-L\">制作任务自然也是艰巨的，为此，承制公司百漫文化从内部孵化出全新的动画工作室“天颜”，来担任制片和制作的主力。团队从不到10人的核心骨干，一年多时间壮大到50人，并主导了多家CG公司的协力，整体生产线投入超过500名的制作人员。</p>\n<p data-pid=\"h3YFux2x\">以首集制作来说，2021年初进入分镜设计，修改了数版，等到分镜确认，正式开跑3D制作已经是4月中旬。这一集512个镜头的庞大工作量，单动画环节就迭代超过15版，涉及到解算、群集、特效、2D效果绘制、灯光、渲染、合成，各个流程均有不同程度的迭代调整。到最终效果确认，用了将近一年的时间。对每一处细节不遗余力地打磨，又要保证制作的周期，这是制作过程中最难的地方。  </p>\n<p><img src=\"https://pica.zhimg.com/v2-1ff4c7385d51354589ab77e628ecc9ab_720w.gif?source=b1748391?rss\" data-caption=\"花无缺武打镜头\" data-size=\"normal\" data-rawwidth=\"1170\" data-rawheight=\"328\" data-watermark=\"watermark\" data-original-src=\"v2-1ff4c7385d51354589ab77e628ecc9ab\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"qWugulB5\"><b>隐藏彩蛋·致敬经典</b></p>\n<p data-pid=\"3JSMAIkw\">为答谢原著粉和武侠迷们对《绝代双骄》动画的喜爱，我们还在片中藏着两处惊喜。</p>\n<p data-pid=\"48j0b2HB\">首先是以视觉符号致敬作者，大家所看到的片名、角色、场景等字幕包装，所用的字体均是借鉴古龙先生亲笔书法，新制而成的「古龙武侠体」。  </p>\n<p><img src=\"https://pica.zhimg.com/v2-4357464aa55b9e2cab762ce874207a84_720w.jpg?source=b1748391?rss\" data-caption=\"古龙武侠体在片中各处使用\" data-size=\"normal\" data-rawwidth=\"1442\" data-rawheight=\"825\" data-watermark=\"watermark\" data-original-src=\"v2-4357464aa55b9e2cab762ce874207a84\" data-watermark-src=\"v2-3ea538c9022e51d5f49f4cf17528de57\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"lYOoGmoW\">古龙先生天性慷慨豪迈、跌荡自如，不仅文如其人，更是字如其人。用笔潇洒、个性鲜明。版权方、出品方联合了国内知名字体设计公司方正字库，以古龙先生的手迹及书法为原型，设计出“古龙武侠体”。这套字体也将在古龙IP改编动画的全系列中登场，形成一套专属的视觉标识体系。  </p>\n<p><img src=\"https://picx1.zhimg.com/v2-44c6df924993b5d2f49e55b3562f4e91_720w.jpg?source=b1748391?rss\" data-caption=\"借鉴古龙先生手迹进行开发\" data-size=\"normal\" data-rawwidth=\"1164\" data-rawheight=\"716\" data-watermark=\"watermark\" data-original-src=\"v2-44c6df924993b5d2f49e55b3562f4e91\" data-watermark-src=\"v2-290b61654c59eefcbb925ff19f893741\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"BC2wtVEz\"> 其次是以音乐致敬前辈。从线下用户访谈中我们了解到，林志颖版小鱼儿演唱的主题曲《快乐至上》是一个大大的加分。明快的歌词很贴合主角小鱼儿笑对人生、在任何困难面前都保持乐观的性情，同时也是我们想传达给年轻人的精神。 </p>\n<p data-pid=\"eoh7HwkT\">为此，我们对《快乐至上》重新编曲并搭配新乐器，邀请知名音乐人谭杰希制作，人气歌手胡夏倾情献唱。用笛子等传统乐器代替原本的西乐，整体以民乐器和伴唱人声呈现，使之更加符合东方格调，视听的和谐让用户全方位感受到古龙的江湖气息。  </p>\n<p data-pid=\"m8C-YmUt\">总而言之，很高兴看到随着《绝代双骄》开播，很多观众又开始了对武侠文化的探讨。我们用心做出了将武侠立意和动画语言结合的一次尝试，最终的愿景是为年轻人、为中国动画重新带来属于武侠的时代。篇幅有限，讲不出所有的心思和经历，但相信火眼金睛的你们能够在之后的更新中有所体会。对于大家对动画方方面面的反馈，我们一直在认真听取大家的中肯建议，后续也会用行动做出回应。 </p>\n<p data-pid=\"ICEEGJbe\">既已江湖相见，还望各位少侠一同见证成长！再次感谢大家对《绝代动画》动画的支持。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/20-29-34-38?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">黄晓洪</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/563697017/answer/2739655633?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">32 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/550019996?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">《绝代双骄》漫画的的主要剧情设定是怎样的？</a><br><a href=\"http://www.zhihu.com/question/491075004?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">新版的《绝代双骄》好看不？</a><br>\n","link":"http://www.zhihu.com/question/563697017/answer/2739655633?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"React 为什么重新渲染","date":"2022-09-06 08:29:00","description":"\n<p>更新（重新渲染）是 React 的重要特性 —— 当用户与应用交互的时候，React 需要重新渲染、更新 UI，以响应用户的输入。但是，React 为什么会重新渲染呢？如果不知道 React 为什么会重新渲染，我们如何才能避免额外的重新渲染呢？</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/186432/20/28325/37613/631725bbEf2ff226e/66b99021df66578b.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/react-re-renders-101/\">https://blog.skk.moe/post/react-re-renders-101/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/react-re-renders-101/"},{"title":"为什么你不应该在 React 中直接使用 useEffect 从 API 获取数据","date":"2022-08-19 08:53:00","description":"\n<p>React 是一个由 Facebook 开源的、可以在任意平台上构建 UI 的 JavaScript 库。在 React 中，一个常见的 Pattern 是使用 <code>useEffect</code> 搭配 <code>useState</code> 发送请求、将状态从 API（React 外部）同步到 React 内部、用于渲染 UI，这篇文章恰恰在向你介绍为什么你不应该直接这么做。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/180676/37/27394/27265/62ff57f2E600b3725/cff75c5fca39bbcc.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/why-you-should-not-fetch-data-directly-in-use-effect/\">https://blog.skk.moe/post/why-you-should-not-fetch-data-directly-in-use-effect/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/why-you-should-not-fetch-data-directly-in-use-effect/"},{"title":"NPM 自动更新版本号","date":"2022-08-04 05:00:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>ChenYFan 大佬的文章：<a href=\"https://blog.cyfan.top/p/d3c51290.html\">SpeedUp!使用黑科技为你的网站提速</a> 有提到过将 Hexo 博客的全部静态文件上传至 NPM 达到加速效果。</p>\n<p>但是 NPM 版本号不能重复，而且为了精准命中缓存和防止边缘 <code>@latest</code> 缓存过长，就必须指定版本号。</p>\n<p>本人在 <a href=\"https://blog.yfun.top/posts/2876015612/\">我的图床解决方案</a> 一文中使用的方法是 <code>npm version patch</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.16/rawimg/20220804133426.png\"></p>\n<p>但这个方法也有一些弊端，比如 <code>patch</code> 只会更新 <code>z</code> 位数的版本号，而且并不会上传至仓库，很可能会出现版本号冲突导致上传失败。这就是为什么最后还需要重新推送 Git 提交。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AF%95%E8%AF%95%E7%9C%8B\" class=\"headerlink\" title=\"试试看\"></a>试试看</h2>\n<p>NPM 版本号遵循 <code>semver</code> 规范，格式为 <code>major.minor.patch</code>。</p>\n<p>为了在获取最新版本号的时候不发生混乱，我选择先获取最新的版本号。</p>\n<blockquote><p>记得把 <code>cky-blog-static</code> 改成自己的项目名。</p></blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getVersion = <span class=\"keyword\">async</span>() =&gt; {</span><br><span class=\"line\">    <span class=\"keyword\">const</span> latestVersion = <span class=\"keyword\">await</span> fetch(<span class=\"string\">\"https://registry.npmjs.org/cky-blog-static/latest\"</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.json()).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.version;</span><br><span class=\"line\">    })</span><br><span class=\"line\">    <span class=\"keyword\">return</span> latestVersion;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>获取到最新版本号后，就可以对版本号进行分析。</p>\n<p>以 <code>1.4.7-b541af2ea284a39da0bbf63b88fdb65c</code> 为例，先按 <code>major.minor.patch</code> 分离。当然，也需要考虑版本号后还有 <code>build metadata</code> 的情况。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> version = <span class=\"keyword\">await</span> getVersion();</span><br><span class=\"line\"><span class=\"keyword\">var</span> verArray = version.split(<span class=\"string\">\".\"</span>);</span><br><span class=\"line\">verArray[<span class=\"number\">2</span>] = verArray[<span class=\"number\">2</span>].split(<span class=\"string\">\"-\"</span>)[<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure><p><del>为了版本号好看些</del>，可以通过判断实现满十进一。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (verArray[<span class=\"number\">2</span>] &lt; <span class=\"number\">9</span>) {</span><br><span class=\"line\"><span class=\"comment\">// z 位小于 9，直接 +1</span></span><br><span class=\"line\">verArray[<span class=\"number\">2</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">2</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">} <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (verArray[<span class=\"number\">1</span>] &lt; <span class=\"number\">9</span>) {</span><br><span class=\"line\"><span class=\"comment\">// z 位大于等于 9，y 位小于 9，y+1, z=0</span></span><br><span class=\"line\">verArray[<span class=\"number\">1</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">1</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">verArray[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">} <span class=\"keyword\">else</span> {</span><br><span class=\"line\"><span class=\"comment\">// z 大于等于 9，y 大于等于 9，x+1,y=0,z=0</span></span><br><span class=\"line\">verArray[<span class=\"number\">0</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">0</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">verArray[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">verArray[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>最后，重新拼接版本号。如果担心服务器缓存版本号导致冲突，还可以加上一些随机字符串。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> newVersion = <span class=\"string\">`<span class=\"subst\">${verArray[<span class=\"number\">0</span>]}</span>.<span class=\"subst\">${verArray[<span class=\"number\">1</span>]}</span>.<span class=\"subst\">${verArray[<span class=\"number\">2</span>]}</span>`</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> newVersion = newVersion + <span class=\"string\">\"-\"</span> + md5(<span class=\"string\">`<span class=\"subst\">${<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()}</span><span class=\"subst\">${newVersion}</span>`</span>);</span><br></pre></td></tr></table></figure><p>将最新的版本号信息重新写入 <code>package.json</code> 文件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> packageJson = fs.readFileSync(<span class=\"string\">\"./package.json\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> packageJson = <span class=\"built_in\">JSON</span>.parse(packageJson);</span><br><span class=\"line\">packageJson.version = newVersion;</span><br><span class=\"line\"><span class=\"keyword\">var</span> newPackage = <span class=\"built_in\">JSON</span>.stringify(packageJson);</span><br><span class=\"line\">fs.writeFileSync(<span class=\"string\">\"./package.json\"</span>, newPackage);</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p><del>直接 CV 代码！</del></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 更新 package.json 版本号</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fetch = <span class=\"built_in\">require</span>(<span class=\"string\">\"node-fetch\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> md5 = <span class=\"built_in\">require</span>(<span class=\"string\">\"js-md5\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getVersion = <span class=\"keyword\">async</span>() =&gt; {</span><br><span class=\"line\">    <span class=\"keyword\">const</span> latestVersion = <span class=\"keyword\">await</span> fetch(<span class=\"string\">\"https://registry.npmjs.org/cky-blog-static/latest\"</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.json()).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.version;</span><br><span class=\"line\">    })</span><br><span class=\"line\">    <span class=\"keyword\">return</span> latestVersion;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> update = <span class=\"keyword\">async</span>() =&gt; {</span><br><span class=\"line\">    <span class=\"keyword\">const</span> version = <span class=\"keyword\">await</span> getVersion();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> verArray = version.split(<span class=\"string\">\".\"</span>);</span><br><span class=\"line\">    verArray[<span class=\"number\">2</span>] = verArray[<span class=\"number\">2</span>].split(<span class=\"string\">\"-\"</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (verArray[<span class=\"number\">2</span>] &lt; <span class=\"number\">9</span>) {</span><br><span class=\"line\">        verArray[<span class=\"number\">2</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">2</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">    } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (verArray[<span class=\"number\">1</span>] &lt; <span class=\"number\">9</span>) {</span><br><span class=\"line\">        verArray[<span class=\"number\">1</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">1</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">        verArray[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">        verArray[<span class=\"number\">0</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">0</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">        verArray[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        verArray[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newVersion = <span class=\"string\">`<span class=\"subst\">${verArray[<span class=\"number\">0</span>]}</span>.<span class=\"subst\">${verArray[<span class=\"number\">1</span>]}</span>.<span class=\"subst\">${verArray[<span class=\"number\">2</span>]}</span>`</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> newVersion = newVersion + <span class=\"string\">\"-\"</span> + md5(<span class=\"string\">`<span class=\"subst\">${<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()}</span><span class=\"subst\">${newVersion}</span>`</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(newVersion);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> packageJson = fs.readFileSync(<span class=\"string\">\"./package.json\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> packageJson = <span class=\"built_in\">JSON</span>.parse(packageJson);</span><br><span class=\"line\">    packageJson.version = newVersion;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newPackage = <span class=\"built_in\">JSON</span>.stringify(packageJson);</span><br><span class=\"line\">    fs.writeFileSync(<span class=\"string\">\"./package.json\"</span>, newPackage);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Complete!!\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">update();</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%9C%80%E5%90%8E\" class=\"headerlink\" title=\"最后\"></a>最后</h2>\n<p>如果是 Hexo 文件部署，就可以直接把文件直接丢在项目根目录，Action 集成部署加上：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">node update.js</span><br></pre></td></tr></table></figure><p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.16/rawimg/20220804135818.png\"></p>\n<p><del>Blog 半年没更新，除除草 --(....</del></p>\n","link":"https://blog.yfun.top/posts/2022/auto-update-npm-version/"},{"title":"我有特别的 DNS 配置和使用技巧","date":"2022-07-28 15:31:00","description":"\n<p>众所周知，DNS 的作用与电话簿类似，将人类可读的域名映射到机器可读 IP 地址、使人更方便地访问互联网。DNS 是非常重要的互联网基础设施，对于改善上网冲浪的体验中的重要程度不容小觑。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/96381/31/31172/23930/62e2ab5bE554d388b/37027f4a03351b9e.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/i-have-my-unique-dns-setup/\">https://blog.skk.moe/post/i-have-my-unique-dns-setup/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/i-have-my-unique-dns-setup/"},{"title":"优化博客的累计布局偏移（CLS）问题","date":"2022-06-07 17:24:00","description":"\n<p>距离上一篇文章发布已有四个月了，是时候写几篇文章给博客除草了。上一次我介绍了我如何迁移、重构了我的博客的架构，这次我想来谈谈我在重构中优化和打磨访客体验时解决的一个问题。我的博客优化之旅 图片 lazyload 的学问和在 Hexo 上的最佳实践 我的博客有多快？ 天下武功，唯快不破 —— 我是这样优化博客的 ...</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/206311/26/14625/38940/629f7f81Eb11312de/b1e67f07b1cc9bc7.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/fix-blog-cls/\">https://blog.skk.moe/post/fix-blog-cls/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/fix-blog-cls/"},{"title":"使用 Next.js + Hexo 重构我的博客","date":"2022-03-17 16:24:00","description":"\n<p>在咕咕了一整年、只发布了三篇文章（其中两篇还是译文）之后，我决定还是稍微花一点时间好好折腾一下自己的博客，以 React 作为抓手，通过 Next.js 和 Hexo 深度共建，对标 Gatsby，打通静态 HTML 与用户交互之间的垂直领域屏障，实现多维矩阵闭环，为个人博客赋能（咳咳咳），然后水出 2022 年第一篇文章（逃）技术选型：Gatsby vs Next.js我使用 Hexo 驱动博客已经三年之久了，之前写过一个 开源的 Hexo 主题，后来还成为了 Hexo 的 Core Team Member、为 Hexo 贡献了不少代码。Hexo 是一个诞生于 2012......</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/218492/18/14257/25439/6227858fE1517791d/63119f6e39dc9389.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/\">https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Node.js","date":"2022-01-14 10:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h2>\n<ul>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-nodejs\">安装 Node.js</a></li>\n</ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Node.js 官网 (<a href=\"https://node.js.org/\">https://node.js.org</a>)</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/image-20220114174925675.png\" alt=\"image-20220114174925675\"></p>\n<p>下载 Node.js 安装包（推荐下载 LTS 版本）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175645.png\" alt=\"image-20220114175645642\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175750.png\" alt=\"image-20220114175749822\"></p>\n<p>勾选同意协议，点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175835.png\" alt=\"image-20220114175835742\"></p>\n<p>修改文件安装位置，点击 <code>Next</code>。（也可以不用改）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175929.png\" alt=\"image-20220114175929226\"></p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180010.png\" alt=\"image-20220114180010036\"></p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180044.png\" alt=\"image-20220114180043895\"></p>\n<p>点击 <code>Install</code> 开始安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180108.png\" alt=\"image-20220114180107827\"></p>\n<p>等待安装完成。<img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180122.png\" alt=\"image-20220114180122728\"></p>\n<p>点击 <code>Finish</code> 完成安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180206.png\" alt=\"image-20220114180206024\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>打开 <code>Git Bash</code>.</p>\n<blockquote><p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。<br>或是在开始菜单中找到 Git Bash.</p></blockquote>\n<p>输入 <code>node -v</code> 和 <code>npm -v</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180458.png\" alt=\"image-20220114180458685\"></p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-nodejs/"},{"title":"2022: 新年快乐！","date":"2021-12-31 16:00:00","description":"\n<p>转眼间，2021 年已经过去。这一年非常忙碌，以至于博客一周年的纪念来不及写，许多文章计划停留在了 To Do 里。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%8D%9A%E5%AE%A2\" class=\"headerlink\" title=\"博客\"></a>博客</h2>\n<p>由于 Cloudflare Web Analytics 是在 2021 年 4 月份启用的，再加上后来又将统计代码去除，所以关于访问量的信息不可用。</p>\n<p>截止至 2021 年 12 月 31 日，博客共发布 15 篇文章，其中 2021 年发布 11 篇文章，原创文章 10 篇。</p>\n<p>目前采用 <code>LeanCloud + Waline</code> 的评论方式，自 7 月份被刷评论后将评论权限改为登录（支持 <code>GitHub</code> 登录），还有部分评论在迁移中丢失，实在抱歉。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>博客自 2021 年 1 月 13 日将主题改为 <code>Miracle</code>，这是一款简洁、轻量的单栏 Hexo 主题。</p>\n<p><code>Miralce</code> 目前的版本是 <code>2.0.1</code>，全新的版本去除 jQuery，进一步提升性能。</p>\n<p>GitHub 仓库：<a href=\"https://github.com/hifun-team/hexo-theme-miracle\">https://github.com/hifun-team/hexo-theme-miracle</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%9B%B4%E5%A4%9A\" class=\"headerlink\" title=\"更多\"></a>更多</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">=&gt; ...</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2022/"},{"title":"无垠 2021 年度总结","date":"2021-12-31 08:36:10","description":"\n<p>真是忙碌的一年啊。转眼 2021 已经过去，2022 即将到来。又到了该总结这一年的时候了。</p>\n<h1>统计数据</h1>\n<p>年度总结的第一部分仍然是一些统计数据。以下数据截止 2021 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 29,073 (<span>+0.6%</span>)，年 PV 67,688 (<span>-11.61%</span>)，日均 UV 79.65，平均停留时间 3分34秒 (<span>-13.7%</span>)，平均跳出率 55% (<span>-9.8%</span>)。一年有效文章数 1 (<span>-80%</span>)，新增评论 109 条 (<span>-54.96%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\" alt=\"\" width=\"515\" height=\"620\" class=\"aligncenter size-full wp-image-2537\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog-249x300.jpg 249w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>除了 UV 较去年提高 100 多之外，其他数据全部下滑。主要原因还是因为今年实在太过忙碌，只更新了一篇博客，评论区也没有怎么维护。不过目前已经有两篇新的文章在路上了，希望可以尽快写完吧。</p>\n<h2>个人主页</h2>\n<p>个人页总 UV 3,515 (<span>-18.12%</span>)，总 PV 3,929 (<span>-4.56%</span>)，日均 UV 9.63，平均停留时间 55秒 (<span>-12.7%</span>)。访问的主要来源是知乎和 GitHub。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\" alt=\"\" width=\"515\" height=\"647\" class=\"aligncenter size-full wp-image-2538\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton-239x300.jpg 239w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>仍然是没有更新个人主页的一年，我也没有继续宣传这个页面，统计数据下滑大概是正常的。</p>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 4 次，新增 149 commits (<span>-54.57%</span>)，Star 数增加了 174，现有 788。</p>\n<p>终于，MDx 2.0 发布了。但是因为今年的过于忙碌，MDx 并没有得到足够的维护，版本发布周期也拉得比较长，很多 Bug 没能及时修复。希望明年可以把更多的时间花在维护 MDx 上。无论如何，还是感谢各位对于 MDx 的支持！</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>2021 大事记</h1>\n<p>说起来，2021 真的太多“第一次”了...</p>\n<ul>\n<li>一月：由于电脑电池鼓包，第一次用 iPad 外接屏幕远程桌面到服务器来考期末🌚太痛苦了</li>\n<li>一月：MDx 喜提 600 Stars</li>\n<li>三月：第一次测核酸（真的酸）</li>\n<li>三月：第一次坐上 A350！(B-309W）</li>\n<li>三月：第一次来到英国</li>\n<li>六月：第一次来到伦敦</li>\n<li>六月：第一次去猫咖撸猫🐱</li>\n<li>六月：第一次坐上 B777！(B-2025）</li>\n<li>七月：酒店隔离十四天🌚</li>\n<li>七月：MDx 喜提 700 Stars</li>\n<li>七月：第一次和猫一起住（时刻有猫撸真的爽😆）</li>\n<li>七月：入职<a href=\"https://75.team/\">奇舞团</a>实习</li>\n<li>八月：北京景点怎么这么多</li>\n<li>九月：北京景点怎么还有这么多</li>\n<li>九月：<a href=\"https://flyhigher.top/develop/2160.html\">谈谈 WebAuthn</a> 被 <a href=\"https://weibo.com/1893751011/KyipM3tOM\" rel=\"noopener noreferrer\">w3c中国微博转发</a><del>（虽然并没有人看）</del>\n</li>\n<li>九月：从奇舞团<del>跑路</del>\n</li>\n<li>九月：整了个 Stackoverflow 的复制粘贴键盘<del>，太好用了</del>\n</li>\n<li>十月：终于买了心心念念的 MSFS</li>\n<li>十一月：终于买了一台新相机</li>\n<li>十一月：第一次坐上 A380！(B-6140）</li>\n<li>十二月：第一次来到爱丁堡并和 <a href=\"https://diygod.me/\">@DIYgod</a> 面基</li>\n</ul>\n<section><div class=\"set-images-div\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\" alt=\"和猫一起住的唯一问题就是手机很快会被猫片塞满\" width=\"730\" height=\"1500\" class=\"aligncenter size-full wp-image-2518\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg 730w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-146x300.jpg 146w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-498x1024.jpg 498w\" sizes=\"(max-width: 730px) 100vw, 730px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\" alt=\"看到你在写前端，猫猫很担心你\" width=\"1004\" height=\"1500\" class=\"aligncenter size-full wp-image-2523\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg 1004w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-201x300.jpg 201w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-685x1024.jpg 685w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-768x1147.jpg 768w\" sizes=\"(max-width: 1004px) 100vw, 1004px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\" alt=\"高效开发工具（确信\" width=\"1500\" height=\"1019\" class=\"aligncenter size-full wp-image-2519\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-300x204.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-1024x696.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-768x522.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\" alt=\"和 Ralph 在天坛\" width=\"947\" height=\"1500\" class=\"aligncenter size-full wp-image-2524\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg 947w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-189x300.jpg 189w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-646x1024.jpg 646w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-768x1216.jpg 768w\" sizes=\"(max-width: 947px) 100vw, 947px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\" alt=\"380!\" width=\"1500\" height=\"874\" class=\"aligncenter size-full wp-image-2517\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-300x175.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-1024x597.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-768x447.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a>\n</div>\n<div class=\"set-images-div2\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\" alt=\"到处玩.jpg\" width=\"1500\" height=\"1080\" class=\"aligncenter size-full wp-image-2521\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-300x216.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-1024x737.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-768x553.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\" alt=\"还是到处玩.jpg\" width=\"977\" height=\"1500\" class=\"aligncenter size-full wp-image-2520\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg 977w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-195x300.jpg 195w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-667x1024.jpg 667w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-768x1179.jpg 768w\" sizes=\"(max-width: 977px) 100vw, 977px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\" alt=\"380 上的星空\" width=\"1002\" height=\"1500\" class=\"aligncenter size-full wp-image-2522\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg 1002w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-200x300.jpg 200w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-684x1024.jpg 684w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-768x1150.jpg 768w\" sizes=\"(max-width: 1002px) 100vw, 1002px\"></a>\n</div>\n</section><p><span>点击图片查看描述</span></p>\n<p>对了，对于可爱的猫猫们，我整了一个 Telegram 贴纸包，你可以在这里获取：<a href=\"https://telegram.me/addstickers/huanAndDan\">https://telegram.me/addstickers/huanAndDan</a>。</p>\n<h1>跨年红包</h1>\n<p>今年的解题之旅，从下面这张图片开始：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\" alt=\"\" width=\"1510\" height=\"1250\" class=\"aligncenter size-full wp-image-2556\"></a>\n<p>不过，鉴于今年的题目较以往对于认真解题的人更难，我还准备了隐藏红包，在解题中收集线索即可发现隐藏红包。共有 20 个普通红包和 10 个隐藏红包。</p>\n<p>解题计划持续到东八区 2022.02.03 23:59:59 或红包被领完为止，之后我会发布题解。不过由于去年情况混乱，今年在解题过程中我一旦发现有不正常的现象就会立即停止活动。Anyway，新年快乐！祝玩得开心。</p>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报用到了 PS 和 Adobe 家的新玩具 Dimension。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\" alt=\"\" width=\"707\" height=\"1000\" class=\"aligncenter size-full wp-image-2547\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg 1414w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-212x300.jpg 212w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-724x1024.jpg 724w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-768x1086.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-1086x1536.jpg 1086w\" sizes=\"(max-width: 707px) 100vw, 707px\"></a>\n<p>那么祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2507.html"},{"title":"[译] 不，Web3 不是去中心化","date":"2021-12-14 14:01:00","description":"加密货币社区对元宇宙和 Web3 的狂热仍在继续，大量投资人和开发者前仆后继加入其中。但是，Web3 真的能实现支持者们的种种愿景吗？亦或是另一个镜中月、水中花？也许让历史照进现实，能给我们答案。<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/123139/11/24965/54827/62215eedE5e3da14a/80c24408e97057dd.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/web3-is-not-decentralization/\">https://blog.skk.moe/post/web3-is-not-decentralization/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/web3-is-not-decentralization/"},{"title":"[译] 捍卫自由的互联网，对 Web3 说不","date":"2021-12-12 13:40:00","description":"作为一个充满泡沫和噱头的新概念，Web3 和元宇宙在区块链的社区中掀起了一波浪潮。鼓吹者坚信 Web3 就是互联网的未来、不惜砸下大把的金钱和精力、希望能在未来中捞一杯羹；而大部分人保持观望的态度。是时候来一点 Web3 的反对意见了。<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/87908/13/23797/13415/622032afE3a2f9e9f/95c01e98cd4a707a.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/\">https://blog.skk.moe/post/keep-web-free-say-no-to-web3/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/"},{"title":"2021 年 JavaScript Promise 性能对比","date":"2021-12-07 08:19:00","description":"\n<p>我们正生活在一个「Any application that can be written in JavaScript, will eventually be written in JavaScript」的时代。作为一门兼具动态性和简单性的语言，JavaScript 已经占领了客户端、服务端，甚至在机器学习中也占据一席之地；不可避免的，异步执行也逐渐成为这门语言不可缺少的一部分。TL; DR Bluebird 依然是速度最快、内存占用最少的 Promise 实现 Runtime 的 async / await 实现越来越快、顺序执行的性能已经超过 Native Promise，占用的内存也更少 对于平行并发执行的 Promise，Bluebird 的性能依然一骑绝尘。......</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157404/28/28495/143414/622032b2Ef7b495fd/6a9bd02e79392c9d.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/promise-performance-benchmark/\">https://blog.skk.moe/post/promise-performance-benchmark/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/promise-performance-benchmark/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Git","date":"2021-11-12 13:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h3>\n<ul><li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li></ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Git 官网 (<a href=\"https://git-scm.com/\">https://git-scm.com</a>).</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112204849.png\"></p>\n<p>点击页面中的 <code>Download For Windows</code> 下载 Windows 版本。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211507.png\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>，同意协议。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211528.png\"></p>\n<p>修改程序安装位置，点击 <code>Next</code>（直接装在 C 盘也不是不行）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211604.png\"></p>\n<p>组件选项，可选桌面快捷键、右键菜单、LFS 支持、自动检查更新等。</p>\n<p>点击 <code>Next</code> 进入下一步。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211609.png\"></p>\n<p>开始菜单文件夹名，保持默认就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211613.png\"></p>\n<p>默认编辑器，保持 Vim 就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211616.png\"></p>\n<p>环境变量，选择第 2 个，点击 <code>Next</code>。</p>\n<blockquote><p>如果选择第 1 个，则只能在 Git Bash 中使用，可能会出现问题</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211619.png\"></p>\n<p>剩下的都可以保持默认，一路 Next，然后点击 <code>Install</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211622.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211624.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211627.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211630.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211633.png\"></p>\n<p>等待安装完毕。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。</p>\n<p>（或是在开始菜单中找到 Git Bash）</p>\n<p>输入 <code>git --version</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/7ec315b7764cc.png\"></p>\n<p>大功告成！</p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-git/"},{"title":"前端时间国际化 101","date":"2021-10-14 15:58:23","description":"\n<blockquote>\n<p>时间只是幻觉。</p>\n<footer>—— 阿尔伯特·爱因斯坦</footer>\n</blockquote>\n<p>最近在开发一个需要完善国际化方案的前端项目，在处理时间国际化的时候遇到了一些问题。于是花了一些时间研究，有了这篇文章。不过由于网上关于 JavaScript 中 <code>Date</code> 对象的坑的文章已经一抓一大把了，<strong>因此这篇文章不是 JavaScript 中 <code>Date</code> 对象的使用指南，而是只专注于前端时间国际化。</strong></p>\n<h1>从时区说起</h1>\n<p>要想处理时间，UTC 是一个绕不开的名字。协调世界时（Coordinated Universal Time）是目前通用的世界时间标准，计时基于原子钟，但并不等于 TAI（国际原子时）。TAI 不计算闰秒，但 UTC 会不定期插入闰秒，因此 UTC 与 TAI 的差异正在不断扩大。UTC 也接近于 GMT（格林威治标准时间），但不完全等同。可能很多人都发现近几年 GMT 已经越来越少出现了，这是因为 GMT 计时基于地球自转，由于地球自转的不规则性且正在逐渐变慢，目前已经基本被 UTC 所取代了。</p>\n<blockquote><p>JavaScript 的 <code>Date</code> 实现不处理闰秒。实际上，由于闰秒增加的不可预测性，Unix/POSIX 时间戳完全不考虑闰秒。在闰秒发生时，Unix 时间戳会重复一秒。这也意味着，一个时间戳对应两个时间点是有可能发生的。</p></blockquote>\n<p>由于 UTC 是标准的，我们有时会使用 UTC+/-N 的方式表达一个时区。这很容易理解，但并不准确。中国通行的 <code>Asia/Shanghai</code> 时区<strong>大部分</strong>情况下可以用 UTC+8 表示，但英国通行的 <code>Europe/London</code> 时区并不能用一个 UTC+N 的方式表示——由于夏令时制度，<code>Europe/London</code> 在夏天等于 UTC+1，在冬天等于 UTC/GMT。</p>\n<blockquote><p>一个时区与 UTC 的偏移并不一定是整小时。如 <code>Asia/Yangon</code> 当前为 UTC+6:30，而 <code>Australia/Eucla</code> 目前拥有奇妙的 UTC+8:45 的偏移。</p></blockquote>\n<p>夏令时的存在表明<strong>时间的表示不是连续的</strong>，时区之间的时差也并不是固定的，我们并不能用固定时差来处理时间，这很容易意识到。但一个不容易意识到的点是，时区还包含了其历史变更信息。中国目前不实行夏令时制度，那我们就可以放心用 UTC+8 来表示中国的时区了吗？你可能已经注意到了上一段中描述 <code>Asia/Shanghai</code> 时区时我使用了<strong>大部分</strong>一词。<code>Asia/Shanghai</code> 时区在历史上实行过夏令时，因此 <code>Asia/Shanghai</code> 在部分时间段可以使用 UTC+9 来表示。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1988-04-18 00:00:00')\r\n// Mon Apr 18 1988 00:00:00 GMT+0900 (中国夏令时间)</pre>\n<blockquote><p>夏令时已经够混乱了，但它实际上比你想象得更混乱——部分穆斯林国家一年有四次夏令时切换（进入斋月时夏令时会暂时取消），还有一些国家使用混沌的 15/30 分钟夏令时而非通常的一小时。</p></blockquote>\n<blockquote><p><strong>不要总是基于 <code>00:00</code> 来判断一天的开始。</strong>部分国家使用 0:00-1:00 切换夏令时，这意味着 23:59 的下一分钟有可能是 1:00。</p></blockquote>\n<p>事实上，虽然一天只有 24 个小时，但当前（2021.10）正在使用的时区有超过 300 个。<strong>每一个时区都包含了其特定的历史。</strong>虽然有些时区在现在看起来是一致的，但它们都包含了不同的历史。时区也会创造新的历史。由于政治、经济或其他原因，一些时区会调整它们与 UTC 的偏差（萨摩亚曾经从 UTC-10 切换到 UTC+14，导致该国 2011.12.30 整一天都消失了），或是启用/取消夏令时，甚至有可能导致一个时区重新划分为两个。因此，为了正确处理各个时区，我们需要一个数据库来存放时区变更信息。还好，已经有人帮我们做了这些工作。目前大多数 *nix 系统和大量开源项目都在使用 <a href=\"https://www.iana.org/time-zones\" rel=\"noopener\">IANA 维护的时区数据库</a>（IANA TZ Database），其中包含了自 Unix 时间戳 0 以来各时区的变更信息。当然这一数据库也包含了大量 Unix 时间戳 0 之前的时区变更信息，但并不能保证这些信息的准确性。IANA 时区数据库会定期更新，以反映新的时区变更和新发现的历史史实导致的时区历史变更。</p>\n<blockquote><p>Windows 不使用 IANA 时区数据库。微软为 Windows 自己维护了一套<a href=\"https://docs.microsoft.com/zh-cn/troubleshoot/windows-client/system-management-components/daylight-saving-time-help-support\" rel=\"noopener\">时区数据库</a>，这有时会导致在一个系统上合法的时间在另一系统上不合法。</p></blockquote>\n<p>既然我们不能使用 UTC 偏移来表示一个时区，那就只能为每个时区定义一个标准名称。通常地，我们使用 <code>/</code> 来命名一个时区。这里的城市一般为该时区中人口最多的城市。于是，我们可以将中国的通行时区表示为 <code>Asia/Shanghai</code>。也有一些时区有自己的别名，如太平洋标准时间 <code>PST</code> 和协调世界时 <code>UTC</code>。</p>\n<blockquote><p>时区名称使用城市而非国家，是由于国家的变动通常比城市的变动要快得多。</p></blockquote>\n<blockquote><p><strong>城市不是时区的最小单位。</strong>有很多城市同时处于多个时区，甚至澳大利亚<a href=\"https://en.wikipedia.org/wiki/Gold_Coast_Airport\" rel=\"noopener\">有一个机场</a>的跑道两端处于不同的时区。</p></blockquote>\n<h1>处理时区困难重重</h1>\n<p>几个月前的一天，<a href=\"https://milkice.me/\" rel=\"noopener\">奶冰</a>在他的 Telegram 频道里发了这样的一条消息：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\"><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\" alt=\"奶冰频道的消息\" width=\"500\" class=\"aligncenter size-medium wp-image-2490\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg 800w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-244x300.jpg 244w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-768x944.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\"></a>\n<p>你想的没错，这个问题正是由时区与 UTC 偏移的不同造成的。<code>Asia/Shanghai</code> 时区在 1940 年前后和 1986 年前后曾实行过夏令时，<strong>而夏令时的切换会导致一小时的出现和消失。</strong>具体来说，启用夏令时当天会有一个小时消失，如 2021.3.28 英国启用夏令时，1:00 直接跳到 3:00，导致 <code>2021-03-28 01:30:00</code> 在 <code>Europe/London</code> 时区中是不合法的；取消夏令时当天又会有一个小时重复，如 2021.10.31 英国取消夏令时，2:00 会重新跳回 1:00 一次，导致 <code>2021-10-31 01:30:00</code> 在 <code>Europe/London</code> 时区中对应了两个时间点。而在奶冰的例子中，<code>1988-04-10 00:46:50</code> 正好处于因夏令时启用而消失的一小时中，因此系统会认为此时间字符串不合法而拒绝解析。</p>\n<blockquote><p>你可能会注意到在历史上 1988.4.10 这一天 <code>Asia/Shanghai</code> 时区实际上是去掉了 1:00-2:00 这一小时而不是 0:00-1:00。上文问题更深层次的原因是，在 IANA TZDB 2018a 及更早版本中，IANA 因缺乏历史资料而设置了错误的夏令时规则，规则设定了夏令时交界于 0:00-1:00 从而导致上文问题发生。而随后社区<a href=\"http://mm.icann.org/pipermail/tz/2018-August/026760.html\" rel=\"noopener\">发现了更准确的史实</a>，因此 IANA 更新了数据库。上文的问题在更新了系统的时区数据库后便解决了。</p></blockquote>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\" alt=\"IANA TZDB 2018a 及之前版本的错误数据\" width=\"1750\" height=\"595\" class=\"aligncenter size-full wp-image-2491\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg 1750w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-300x102.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1024x348.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-768x261.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1536x522.jpg 1536w\" sizes=\"(max-width: 1750px) 100vw, 1750px\"></a>\n<p><span>IANA TZDB 2018a 及之前版本的错误数据</span></p>\n<p>再来考虑另一种情况。你的应用的某位巴西用户在 2018 年保存了一个未来时间 <code>2022-01-15 12:00</code>（按当时的规律那应该是个夏令时时间），不巧那时候你的应用是以格式化的时间字符串形式保存的时间。之后你发现巴西已经于 2019 年 4 月宣布彻底取消夏令时制度，那么 <code>2022-01-15 12:00</code> 这个时间对应的 Unix 时间戳发生了变化，变得不再准确，要正确处理这一字符串就需要参考这一字符串生成的时间（或生成时计算的 UTC 偏移）来做不同的处理。<strong>因此，应用从一开始就应该避免使用字符串来传输、存储时间，而是使用 Unix 时间戳。</strong>如果不得不使用字符串存储时间，请尽可能：</p>\n<ul>\n<li>使用 UTC 描述时间，你永远不会知道本地时区在未来会发生什么</li>\n<li>如果需要以当地时间描述时间，一定带上当前 UTC 偏移</li>\n</ul>\n<p>时区历史带来的问题往往意想不到而且远比想象得多。实际上时区历史数据非常详细而繁多且跨设备不一致，并没有简单而统一的处理方法。在需要严谨处理时区时可能需要在应用程序中内嵌一套各端统一的时区数据库，但这样的方案放在前端又会带来不少问题：</p>\n<ul>\n<li>体积过大。moment.js 曾经设计过<a href=\"https://github.com/moment/moment-timezone/blob/develop/data/packed/2021a.json\" rel=\"noopener\">一种简洁的 TZDB 表示</a>，但尽管已经尽可能压缩整个文件仍然达到了 180+KB。在性能优先的 Web 应用中这是不可接受的</li>\n<li>需要持续更新。时区数据一直在变动，需要在时区数据更新时尽快更新应用内的时区数据，这带来了额外的维护成本</li>\n</ul>\n<p>ES6 为我们带来了 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl\" rel=\"noopener\"><code>Intl</code> 命名空间</a>。在这里，JavaScript 运行时提供了不少时间相关的国际化能力。因此，在不使用额外数据的情况下准确处理时区是可能的，但这并不完美：</p>\n<ul>\n<li>各端不统一。浏览器提供的时区数据受浏览器版本、系统版本等可能变化，最新的时区更新可能无法快速反映到所有设备上</li>\n<li>实现复杂。<code>JavaScript</code> 中 <code>Date</code> 对象的不良设计导致实现完善的时区处理并不容易，且 <code>Intl</code> 命名空间下的对象实例化性能开销较大，需要额外优化</li>\n</ul>\n<blockquote><p><code>Intl</code> 命名空间下还有很多实用的国际化相关方法，值得我们另开一篇文章来讲讲了。</p></blockquote>\n<p>在真实开发中，这需要取舍。目前主流的 JavaScript 时间处理库都已转向浏览器内置方法，并在需要时通过 Polyfill 保证跨端一致性。在这篇文章中，我们将尝试在不使用第三方库的情况下实现基本的时间国际化处理。此外，还有一些诸如需要使用 Unix 时间戳才能正确地在各端交换时间等细节需要注意。</p>\n<h1>时区转换</h1>\n<p>JavaScript 中的 <code>Date</code> 并不是不包含时区信息——实际上，<code>Date</code> 对象表示的一定是当前时区。通过尝试：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1970-01-01T00:00:00Z')\r\n// Thu Jan 01 1970 08:00:00 GMT+0800 (中国标准时间)</pre>\n<p>就可以知道，JavaScript 运行时其实知道当前时区，并会在需要的时候将其他时区的时间转换为当前时区的时间。那么，如何将本地时间转换为其他时区的时间呢？从 <code>Date</code> 的角度看，这并不行，因为我们无法设置一个 <code>Date</code> 对象的时区。但我们可以“投机取巧”：将 <code>Date</code> 对象的时间加上/减去对应的时差，尽管 <code>Date</code> 对象仍然认为自己在本地时区，但这样不就可以正确显示了嘛！但我们会碰到上文提到的问题：时区之间的时间差并不固定，在没有额外数据的情况下很难正确计算。</p>\n<p>还好，ES6 基于 <code>Intl</code> 命名空间扩展了 <code>Date.prototype.toLocaleString()</code> 方法，使其可以接受时区参数并按指定时区格式化时间。如果你在搜索引擎中搜索如何使用 JavaScript 转换时区，你大概率会在 StackOverflow 上找到类似这样的答案：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const convertTimeZone = (date, timeZone) =&gt; {\r\n    return new Date(date.toLocaleString('en-US', { timeZone }))\r\n}\r\n\r\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\r\nconvertTimeZone(now, 'Europe/London') // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<p>很好理解，我们使用 <code>en-US</code> 的区域设置要求 JavaScript 运行时以我们指定的时区格式化时间，再将时间字符串重新解析为时间对象。这里的 <code>timeZone</code> 就是诸如 <code>Asia/Shanghai</code> 等的 IANA TZDB 时区名称。这个字符串确实需要自己提供，但这就是我们唯一需要自己准备的数据了！只要提供了时区名称，浏览器就会自动计算正确的时间，无需我们自行计算。</p>\n<blockquote><p>对于时区名称，你可以考虑使用 <a href=\"https://github.com/vvo/tzdb/\" rel=\"noopener\">@vvo/tzdb</a>。这是一个声称为自动更新的 IANA TZDB 的 JSON 导出，并已被数个大型项目使用。你可以从这个包中导出所有时区名称。</p></blockquote>\n<p>这个方法看起来还不错，对吧？但实际上，它有两个问题：</p>\n<ul>\n<li>指定了区域设置和时区的 <code>toLocaleString()</code> 实际上每次调用都会在 JavaScript 运行时中创建新的 <code>Intl.DateTimeFormat</code> 对象（在后文详述），而后者会带来昂贵的性能开销（在 Node 14 中，实例化一次会在 V8 中增加内存使用约 46.3Kb。但这是符合预期的，详见 <a href=\"https://bugs.chromium.org/p/v8/issues/detail?id=6528\" rel=\"noopener\">V8 Issue</a>）。因此，在密集调用的情况下需要考虑计算并缓存时差，并在一定时间后或需要时进行更新</li>\n<li>使用 <code>toLocaleString()</code> 并使用 <code>en-US</code> 区域设置格式化的默认时间格式类似于 <code>10/13/2021, 1:00:00 AM</code>。这可以被大部分浏览器正确解析，<strong>但这是不规范的，不同浏览器有可能产生不同结果。</strong>你也可以自行配置格式（同下文的 <code>Intl.DateTimeFormat</code>），但仍然无法构造出规范的字符串</li>\n</ul>\n<p>因此，更佳的方案是，我们需要建立一个可反复使用的格式化器以避免重复创建 <code>Intl.DateTimeFormat</code> 带来的额外开销，并需要手动构造出符合规范的时间字符串，并将其重新解析为 <code>Date</code> 对象。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const timeZoneConverter = (timeZone) =&gt; {\r\n    // 新建 DateTimeFormat 对象以供对同一目标时区重用\r\n    // 由于时区属性必须在创建 DateTimeFormat 对象时指定，我们只能为同一时区重用格式化器\r\n    const formatter = new Intl.DateTimeFormat('zh-CN', {\r\n        year: 'numeric',\r\n        month: '2-digit',\r\n        day: '2-digit',\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n        second: '2-digit',\r\n        hour12: false,\r\n        timeZone\r\n    })\r\n    return {\r\n        // 提供 conver 方法以将提供的 Date 对象转换为指定时区\r\n        convert (date) {\r\n            // zh-CN 的区域设置会返回类似 1970/01/01 00:00:00 的字符串\r\n            // 替换字符即可构造出类似 1970-01-01T00:00:00 的 ISO 8601 标准格式时间字符串并被正确解析\r\n            return new Date(formatter.format(date).replace(/\\//g, '-').replace(' ', 'T').trim())\r\n        }\r\n    }\r\n}\r\n\r\nconst toLondonTime = timeZoneConverter('Europe/London') // 对于同一时区，此对象可重用\r\n\r\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\r\ntoLondonTime.convert(now) // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<blockquote><p>目前 <code>zh-CN</code> 的区域设置会产生类似 <code>1970/01/01 00:00:00</code> 的格式化字符串。这一格式目前跨端一致，但由于规范没有指定时间格式，<strong>这个格式在未来有可能变更。</strong>更好的方案是使用 <code>formatToParts()</code> 方法（在后文详述）获取时间字符串的各部分并手动拼接出标准格式的字符串，但在这个例子中直接 <code>replace</code> 拥有更好的性能。</p></blockquote>\n<p>现在，尝试反复转换时间至同一时区 1000 次，耗时从 <code>toLocaleString()</code> 1.5 秒降低到了 0.04 秒。尽管代码长了点，但这次重写在最好的情况下为我们带来了超过 20 倍的性能提升。</p>\n<p>需要注意的是，虽然这看起来就算最终方案了，但这个方案依然不完美。主要有以下两个问题：</p>\n<ul>\n<li>在需要密集转换为不同时区时，由于无法重用格式化器，性能依然较差且难以进一步优化</li>\n<li>由于 <code>Intl.DateTimeFormat</code> 不支持格式化毫秒，在格式化字符串的过程中毫秒会丢失，导致最终结果可能会与期望结果产生最高 999ms 的误差，需要额外处理。比如需要计算时差时，我们可能需要这么写：\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const calcTimeDiff = (date, converter) =&gt; {\r\n    const secDate = date - date.getMilliseconds() // 去掉毫秒，避免转换前后精度差异\r\n    return converter.convert(new Date(secDate), tzName) - secDate\r\n}\r\n\r\ncalcTimeDiff(new Date(), timeZoneConverter('Europe/London')) // -25200000</pre>\n</li>\n</ul>\n<p>无论如何，在折腾一番后我们还是把时区正确转换了。接下来准备格式化时间字符串了吗？不过在此之前，我们得先来聊聊语言、文字和区域。</p>\n<h1>语言文字区域傻傻分不清</h1>\n<blockquote><p>如何在计算机中表示中文？</p></blockquote>\n<p>“这不简单，”你可能会说，“用 <code>zh</code> 啊。”</p>\n<blockquote><p>那简体中文呢？</p></blockquote>\n<p>“<code>zh-CN</code>。”你或许会说出这个答案。</p>\n<blockquote><p>那用于新加坡的简体中文和用于中国大陆的简体中文该如何区分呢？</p></blockquote>\n<p>嗯……好问题。</p>\n<p>要能正确区分不同的简体中文，我们还得先回到定义上。实际上，“国际化”并不只是语言的翻译而已，国际化包含的是一整套对于各个<strong>区域</strong>的本地化方案。要准确表示一个国际化方案，我们实际至少需要确定三个属性：语言（Language）、文字（Script）和区域（Locale）。</p>\n<ul>\n<li>\n<strong>语言</strong>通常指的是<strong>声音语言</strong>。不同的语言都有一套自己的发音规则，很难互通。如中文和英语都属于语言</li>\n<li>\n<strong>文字</strong>对应的是某个语言的书写方式，同样的语言可能会有多种书写方案。如中文主要有简体和繁体两种书写方案</li>\n<li>\n<strong>区域</strong>指国际化面向的地区，相同的语言和文字，在不同地区也有可能会有不同的使用习惯。如新加坡和中国大陆都使用简体中文，但两地的用词习惯等有些许差异</li>\n</ul>\n<p>只有确定了这三个属性，我们才能正确定义一个国际化方案（或者说<strong>区域设置</strong>）。当然，还有很多其他属性可以更准确的表达某个区域设置，但通常有语言、文字和区域就已经足够了。</p>\n<p>于是，基于 <a href=\"https://tools.ietf.org/rfc/bcp/bcp47.txt\" rel=\"noopener\">BCP 47</a>，我们可以知道：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN = 中文普通话-简体-中国大陆\r\ncmn-Hans-SG = 中文普通话-简体-新加坡\r\ncmn-Hant-TW = 中文普通话-繁体-台湾\r\nyue-Hant-HK = 中文粤语-繁体-香港</pre>\n<p>等等，这都是啥？还有 BCP 47 又是啥？BCP 是 IETF 发布的“最佳当前实践”文档，而 BCP 47 是一些国际化相关的 ISO 和备忘录的集合，也是目前事实上由 HTML 和 ECMAScript 所使用的表达区域设置的标准。BCP 47 定义的区域设置标签实际上比较复杂，但对于大部分简单使用情况，上文示例中的格式已经完全够用了。简单来说，<strong>要表达一个区域设置，我们会使用 <code>语言[-文字][-区域]</code> 的格式，而文字和区域都是可选的。</strong>而对于每个部分的具体代码，BCP 47 也有做具体定义。其中：</p>\n<ul>\n<li>语言使用 ISO 639-1 定义的两位字母代码（如中文为 <code>zh</code>，英文为 <code>en</code>）或 <a href=\"https://iso639-3.sil.org/code_tables/639/data\" rel=\"noopener\">ISO 639-2/3</a> 定义的三位字母代码（如中文普通话为 <code>cmn</code>，英文为 <code>eng</code>），通常小写</li>\n<li>文字使用 <a href=\"https://unicode.org/iso15924/iso15924-codes.html\" rel=\"noopener\">ISO 15924</a> 定义的四位字母代码，通常首字母大写。如简体中文是 <code>Hans</code>，繁体中文是 <code>Hant</code>\n</li>\n<li>区域通常使用 <a href=\"https://www.iso.org/iso-3166-country-codes.html\" rel=\"noopener\">ISO 3166-1</a> 定义的两位字母代码，通常大写，如中国大陆为 <code>CN</code>，英国为 <code>GB</code>\n</li>\n</ul>\n<blockquote><p>ISO 639-1/2/3 的关系实际是：ISO 639-1 是最早制定的规范，使用两位字母表示语言，但语言数量之多并不能只用两位代码表示。因此后来修订了 ISO 639-2 和 3，使用三位字母表示了更多语言。通常 639-1 代码和 ISO-2/3 代码是一对多的关系。如中文 <code>zh</code> 其实是中文普通话 <code>cmn</code> 的宏语言（macrolanguage），同样使用 <code>zh</code> 为宏语言的语言还有 <code>wuu</code>（中文吴语）、<code>hak</code>（中文客家话）、<code>yue</code>（中文粤语）等数十种。<strong>从规范上我们现在应该使用 ISO 639-2/3 代码来替代 ISO 639-1 代码了</strong>，但由于历史阻力和真实需求中分类无需如此细致等原因，<strong>使用 ISO 639-1 指定语言仍然非常常见而且完全可以接受。</strong>此外，特别地，我们在 ISO 639-3 中定义未指明的语言为 <code>und</code>。</p></blockquote>\n<p>因此，对于这一节开头的两个问题，在 BCP 47 中正确答案其实是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">zh = 中文\r\ncmn = 中文普通话\r\n\r\nzh-Hans = 中文-简体\r\ncmn-Hans = 中文普通话-简体</pre>\n<p>而 <code>zh-CN</code> 实际是指在中国大陆使用的中文，当然也包含在中国大陆使用的繁体中文。<strong>不过，由于大部分情况下一个区域只会通用一种文字，很多情况下我们可以忽略文字这一项</strong>，即使用 <code>zh-CN</code>（或者 <code>cmn-CN</code>）来表示中国大陆的简体中文普通话——毕竟在大部分业务中在中国大陆使用繁体和非普通话的情况非常少。</p>\n<blockquote><p>事实上，类似 <code>zh-Hans</code> 和 <code>zh-Hant</code> 开头的区域设置名称已经被标记为 <code>redundant 废弃</code>，因此尽可能只使用 <code>zh-CN</code> 或者 <code>cmn-Hans-CN</code> 这样的区域设置名称。所有区域设置名称的列表可以在 <a href=\"https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry\" rel=\"noopener\">IANA</a> 找到。</p></blockquote>\n<p>现在我们可以准确定义一个区域设置了。不过我们还有一些小小的需求。比如我们想在 <code>cmn-Hans-CN</code> 的区域设置中使用农历来表示日期，但显然我们上文定义的表示方法并不能表达这一需求。好在，Unicode 为 BCP 47 提供了 u 扩展。在区域设置名称后面加上 <code>-u-[选项]</code> 就可以表达更细致的变体了。所以我们有：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN-u-ca-chinese = 中文普通话-简体-中国大陆-u-日历-中国农历\r\njpn-Jpan-JP-u-ca-japanese = 日语-日文汉字/平假名/片假名-日本-u-日历-日本日历\r\ncmn-Hans-CN-u-nu-hansfin = 中文普通话-简体-中国大陆-u-数字-简体大写数字</pre>\n<p>u 扩展的具体可选项可以在 <a href=\"https://www.unicode.org/reports/tr35/tr35-21.html#Unicode_locale_identifier\" rel=\"noopener\">Unicode 网站</a>上找到。而多个 u 扩展还可以连接——于是我们甚至可以写出 <code>cmn-Hans-CN-u-ca-chinese-nu-hansfin</code> 这种丧心病狂的区域设置名称。当然，相信你现在已经可以看懂这个区域设置的意思了。</p>\n<blockquote><p>不同地区可能会有不同的日历使用习惯，如中国有使用农历的需求，泰国有使用佛历的需求，我们可以通过 u 扩展指定不同的日历。不过，大部分情况下我们会使用标准的 ISO 8601 日历（gregory），JavaScript 的 <code>Date</code> 对象也只支持这种日历。</p></blockquote>\n<blockquote><p>你可以使用 <a href=\"https://r12a.github.io/app-subtags/\" rel=\"noopener\">BCP47 language subtag lookup</a> 工具快速检查你编写的 BCP 47 区域标签是否规范。</p></blockquote>\n<p>终于我们可以正确表达一个完美符合我们需求的区域设置了。接下来，让我们开始格式化时间吧。</p>\n<h1>格式化时间</h1>\n<p>这题我会！</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const formatDate(date) =&gt; {\r\n    return `${date.getFullYear()}-${`${date.getMonth() + 1}`.padStart(2, '0')}-${`${date.getDate()}`.padStart(2, '0')} ${`${date.getHours()}`.padStart(2, '0')}:${`${date.getMinutes()}`.padStart(2, '0')}:${`${date.getSeconds()}`.padStart(2, '0')}`\r\n}\r\n\r\nformatDate(new Date()) // 2021-10-13 01:00:00</pre>\n<p>就完事了……吗？先不论这样的格式化代码难以阅读，尽管上文这样的日期格式国际通用，<strong>但并非所有区域都习惯于这样的日期表示方法。</strong>比如英语国家/地区在很多时候习惯在日期中加入星期，而阿拉伯语国家/地区在部分情况下习惯使用阿拉伯语数字（而非常用的阿拉伯-印度数字）；再比如美式英语国家/地区习惯月-日-年的日期表示法，而英式英语国家/地区习惯日-月-年的日期表示法……不同区域在时间表示格式习惯上的差异是巨大的，<strong>我们很难通过一个简单的方法来正确地、国际化地格式化一个日期。</strong></p>\n<p>好在 ES6 早就为我们铺平了道路。还记得上文提到过的 <code>Intl.DateTimeFormat</code> 吗？我们通过它来实例化一个日期格式化器并用进行日期的国际化。</p>\n<p>直接来看例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const options = {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    weekday: 'long'\r\n}\r\nconst now = new Date()\r\n\r\nconst enUSFormatter = new Intl.DateTimeFormat('en-US', options)\r\n\r\nconst zhCNFormatter = new Intl.DateTimeFormat('zh-CN', options)\r\nconst zhCNAltFormatter = new Intl.DateTimeFormat('zh-CN-u-ca-chinese', options)\r\nconst zhCNAlt2Formatter = new Intl.DateTimeFormat('zh-CN-u-ca-roc-nu-hansfin', options)\r\n\r\nconst jaFormatter = new Intl.DateTimeFormat('ja', options)\r\nconst jaAltFormatter = new Intl.DateTimeFormat('ja-JP-u-ca-japanese', options)\r\n\r\nconst arEGFormatter = new Intl.DateTimeFormat('ar-EG', options)\r\n\r\nenUSFormatter.format(now) // Wednesday, Oct 13, 2021\r\n\r\nzhCNFormatter.format(now) // 2021年10月13日星期三\r\nzhCNAltFormatter.format(now) // 2021辛丑年九月8星期三\r\nzhCNAlt2Formatter.format(now) // 民国壹佰壹拾年拾月拾叁日星期三\r\n\r\njaFormatter.format(now) // 2021年10月13日水曜日\r\njaAltFormatter.format(now) // 令和3年10月13日水曜日\r\n\r\narEGFormatter.format(now) // الأربعاء، ١٣ أكتوبر ٢٠٢١</pre>\n<blockquote><p>在这里我们使用 ISO 639-1 代码来表示语言，是由于事实上 ISO 639-1 代码更加常见与通用。在大部分支持 <code>Intl.DateTimeFormat</code> 的 JavaScript 运行时中我们也可以使用 ISO 639-2/3 代码来表示语言（但实际会 fallback 至对应的 ISO 639-1 代码）。</p></blockquote>\n<blockquote><p>你也可以通过在 <code>options</code> 中设置 <code>calendar</code> 属性和 <code>numberingSystem</code> 属性来替换区域设置名称中对 u 扩展的使用。这也是推荐方式。</p></blockquote>\n<p>这非常直观，我们可以指定区域设置和格式化选项来初始化一个格式化器，并在之后使用格式化器对象的 <code>format</code> 方法来格式化一个 <code>Date</code> 对象。这里的格式化选项其实非常灵活，能格式化的不只是日期，时间也可以被灵活地格式化，有非常多的组合可以选择。我们不会在这里详细解释每一个选项，你可以访问 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\" rel=\"noopener\">MDN 文档</a>来了解更多。</p>\n<blockquote><p>如前文所述，<code>Intl.DateTimeFormat</code> 无法格式化毫秒。</p></blockquote>\n<p>不过需要注意的是，<strong>JavaScript 运行时不一定支持所有区域设置，也不一定支持所有格式化选项。</strong>在遇到不支持的情况时，<code>Intl.DateTimeFormat</code> 默认会静默 fallback 到最匹配的支持项，因此在处理不常见的区域设置或选项时，你可能需要再额外检查。你可以通过 <code>Intl.DateTimeFormat.supportedLocalesOf()</code> 静态方法判断当前运行时是否支持指定的区域设置，也可以在实例化格式化器后在对象上调用 <code>resolvedOptions()</code> 方法来检查运行时的解析结果是否与预期一致。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('yue-Hant-CN').resolvedOptions()\r\n// {locale: 'zh-CN', calendar: 'gregory', …}\r\n// fallback 至 zh-CN，与 yue-CN 的预期不一致</pre>\n<p>此外，正如你所看到的，各种语言在日期格式化中使用的文本 JavaScript 运行时都已经帮我们内置了。因此，我们甚至可以利用这些国际化特性来为我们的应用减少一点需要翻译的字符串——打包进应用的翻译越少，应用体积也就越小了嘛——比如说获取一周七天对应的名字：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getWeekdayNames = (locale) =&gt; {\r\n     // 基于一个固定日期计算，这里选择 1970.1.1\r\n     // 不能使用 0，因为 Unix 时间戳 0 在不同时区的日期不一样\r\n    const base = new Date(1970, 0, 1).getTime()\r\n    const formatter = new Intl.DateTimeFormat(locale, { weekday: 'short' })\r\n    return Array.from({ length: 7 }, (_, day) =&gt; (\r\n        formatter.format(new Date(base + 3600000 * 24 * (-4 + day))) // 1970.1.1 是周四\r\n    ))\r\n}\r\n\r\ngetWeekdayNames('en-US') // ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\r\ngetWeekdayNames('zh-CN') // ['周日', '周一', '周二', '周三', '周四', '周五', '周六']\r\ngetWeekdayNames('ja') // ['日', '月', '火', '水', '木', '金', '土']\r\ngetWeekdayNames('ar-EG') // ['الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت']</pre>\n<p>当然，如果你还是不喜欢运行时为你提供的格式，我们还有上文提到过的 <code>formatToParts()</code> 方法可以用。来看一个简单的例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('zh-CN', {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    weekday: 'long',\r\n    hour: 'numeric',\r\n    minute: 'numeric',\r\n    second: 'numeric',\r\n}).formatToParts(new Date())\r\n// [\r\n//     { type: 'year', value: '2021' },\r\n//     { type: 'literal', value: '年' },\r\n//     { type: 'month', value: '10' },\r\n//     { type: 'literal', value: '月' },\r\n//     { type: 'day', value: '13' },\r\n//     { type: 'literal', value: '日' },\r\n//     { type: 'weekday', value: '星期三' },\r\n//     { type: 'literal', value: ' ' },\r\n//     { type: 'dayPeriod', value: '上午' },\r\n//     { type: 'hour', value: '1' },\r\n//     { type: 'literal', value: ':' },\r\n//     { type: 'minute', value: '00' },\r\n//     { type: 'literal', value: ':' },\r\n//     { type: 'second', value: '00' }\r\n// ]</pre>\n<p>随后，你就可以自己解析这个数组来构造出你想要的时间格式了。最后，我们还可以使用 <code>Intl.RelativeTimeFormat</code> 来格式化相对日期。当然我们不会在这里详细讲解这个 API，你可以参考 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat\" rel=\"noopener\">MDN 文档</a>。直接来看一个简单例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getRelativeTime = (num, unit, locale) =&gt; {\r\n    return new Intl.RelativeTimeFormat(locale, { numeric: 'auto' }).format(num, unit)\r\n}\r\n\r\ngetRelativeTime(-3, 'day', 'en-US') // 3 days ago\r\ngetRelativeTime(-1, 'day', 'zh-CN') // 昨天\r\ngetRelativeTime(0, 'second', 'zh-CN') // 现在\r\ngetRelativeTime(3, 'hour', 'ja') // 3 時間後</pre>\n<blockquote><p><code>Intl.RelativeTimeFormat</code> 是一个相对较晚进入标准的对象，因此浏览器支持程度较差，可能需要使用 <a href=\"https://formatjs.io/docs/polyfills/intl-relativetimeformat\" rel=\"noopener\">Polyfill</a>。不过目前（2021.10）主流浏览器的最新版本均已支持此 API。</p></blockquote>\n<h1>未来</h1>\n<p>我希望这篇文章时区转换的部分可以很快过时——这并非无稽之谈，目前（2021.10）TC39 的 <a href=\"https://github.com/tc39/proposal-temporal\" rel=\"noopener\"><code>Temporal</code> 提案</a>已经进入 Stage 3 了。<strong><code>Temporal</code> 提案定义了一个新的、时区友好的 <code>Temporal</code> 命名空间，并期望在不久后就能进入标准并最终应用于生产环境。</strong><code>Temporal</code> 定义了完整的时区、时间段、日历规则的处理，且拥有简单明了的 API。那时候，JavaScript 的时区处理就不会再如此痛苦了。由于目前 <code>Temporal</code> 提案还未进入标准，API 暂未稳定，我们无法将其用于生产环境，但我们可以来看一个简单的例子感受一下这个 API 的强大。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const zonedDateTime = Temporal.ZonedDateTime.from({\r\n  timeZone: 'America/Los_Angeles',\r\n  year: 1995,\r\n  month: 12,\r\n  day: 7,\r\n  hour: 3,\r\n  minute: 24,\r\n  second: 30,\r\n  millisecond: 0,\r\n  microsecond: 3,\r\n  nanosecond: 500,\r\n  calendar: 'iso8601'\r\n}) // 1995-12-07T03:24:30.0000035-08:00[America/Los_Angeles]</pre>\n<p>如果你希望立刻开始使用 <code>Temporal</code>，现在已有 Polyfill 可用。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"js-temporal\" data-mdxgithubp=\"temporal-polyfill\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/js-temporal/temporal-polyfill\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>不过，时区问题不会消失，各地区的习惯也很难融合到一起。时间的国际化处理是<a href=\"https://yourcalendricalfallacyis.com/\" rel=\"noopener\">极其复杂</a>的，前端中的时间国际化仍然值得我们认真关注。</p>\n","link":"https://flyhigher.top/develop/2482.html"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 4分8秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量...</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板...）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/209138/1/18651/50218/622032acEf83a8d68/fc6db86aebb679ff.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。macOS 系统代理的行为和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：...</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/207910/19/18573/59096/622032b0E05c1d4be/5d89d557f7889730.jpg\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"\n<p>WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将其表述为 \"An API for accessing Public Key Credentials\"，即“一个用于访问公钥凭证的 API”。WebAuthn 很强大，强大到被认为是 Web 身份认证的未来（当然，也很复杂）。你有想过通过指纹或者面部识别来登录网站吗？WebAuthn 就能在保证安全和隐私的情况下让这样的想法成为现实。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\" alt=\"通过 WebAuthn 调起 Windows Hello 登录网站\" width=\"1912\" height=\"966\" class=\"aligncenter size-full wp-image-2215\"></a>\n<p>你可以在<a href=\"https://webauthn.io/\" rel=\"noopener\">这个网站</a>自行体验 WebAuthn。或者，如果你有一个使用 WordPress 的站点，可以尝试一下 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WP-WebAuthn</a> 这款插件，它可以为你的站点启用 WebAuthn 登录。这是我为了写这篇文章而练手开发的插件，本文中的部分示例代码也来自这款插件。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"wp-webauthn\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/wp-webauthn\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>WebAuthn Level 1 标准已在 2019 年 3 月成为 W3C 推荐标准，而 Level 2 标准目前也已进入编辑草案阶段，但互联网上有关它的中文资料却仍然很少，国内也鲜有网站支持这一新标准。于是，在抱着各种英文资料和标准啃了几天以后，我折腾出了这篇文章。</p>\n<p>在这篇文章里，我将会从最基本的概念开始，逐渐深入 WebAuthn，直到解码公钥等深层细节。这可能是你能找到的有关 WebAuthn 最详细最基础的中文文章，也很可能是最长的。在开始之前，<strong>我强烈建议你打开菜单中的文章目录浏览一遍，以对这篇文章涉及的内容有所了解。</strong>如果你只是想了解如何简单地在你的项目中添加对 WebAuthn 的支持，那么“<a href=\"https://flyhigher.top/#webauthn-overview\">浅谈 WebAuthn</a>”部分就是你要找的；如果你想了解更多关于 WebAuthn 的底层细节，那么你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分。</p>\n<p>由于在本文写作时 WebAuthn Level 2 规范尚未定稿，<strong>这篇文章我们将只专注于 Level 1 规范。</strong></p>\n<p>这篇文章最后更新于 2020.9 ，在你读到这篇文章时，部分事实可能已经发生改变，请注意判断。</p>\n<p><strong>更新日志：</strong></p>\n<ul>\n<li>2021.1.16 添加 Chrome 开发工具信息</li>\n<li>2020.9.17 更新 iOS/iPad OS 兼容性信息</li>\n<li>2020.5.20 添加部分无用户名认证的平台兼容性内容</li>\n<li>2020.5.15 添加部分 <code>extensions</code> 相关内容与链接；添加全局凭证 ID 唯一内容；添加凭证 ID 查找相关内容；添加“从 U2F 认证迁移”一节</li>\n<li>2020.4.13 更新与修正 <code>userVerification</code> 相关内容；添加部分 Firefox 相关内容</li>\n<li>2020.3.23 文章发布</li>\n</ul>\n<p>那么让我们开始吧。<span></span></p>\n<h1>浅谈 WebAuthn</h1>\n<p>在这个部分里，我们将会从基础概念开始，了解有关 WebAuthn 和密码学的一些基础知识，并最终使用第三方库实现基础的 WebAuthn 认证。如果你已经对这些内容有所了解了，可以跳到“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”继续阅读。</p>\n<h2>为什么使用 WebAuthn</h2>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\" alt=\"钓鱼邮件\" width=\"709\" height=\"693\" class=\"aligncenter size-full wp-image-2162\"></a>\n<p>相信你一定收到过类似的邮件吧？只要你点进那个最显眼的链接，你就会进入一个设置好的圈套——钓鱼网站。如果你一时糊涂在这类网站上填写了你的账号和密码，bingo，你的账号就不再是你的账号了。</p>\n<p>不过，就算你警惕心再强，也无法避免密码泄露事件。Twitter, Facebook 等都爆出过明文密码泄露事件，证明再大的公司或组织也无法避免密码泄露问题。雪上加霜的是，很大一部分用户都非常喜欢使用重复密码，这就导致一次密码泄露会牵连很多网站，用户的账户安全性完全无法得到保证。</p>\n<p>那么，有什么办法解决这些问题吗？<strong>彻底解决的方法只有一个，那就是抛弃密码。</strong>可是没有密码还怎么验证用户身份呢？这就是 WebAuthn 的用武之地了。</p>\n<p><del>没有密码的好时代，来临力！</del></p>\n<h2>什么是 WebAuthn</h2>\n<p>那么到底什么是 WebAuthn 呢？如开头所说，WebAuthn 是“一个用于访问公钥凭证的 API”，网站可以通过这个 API 进行一些高安全性的身份验证。WebAuthn 一个最常见的应用就是用于网站登录时的 2FA（双重因素验证）甚至是无密码登录。通过网页调用 WebAuthn，在不同平台下，<strong>我们可以实现通过 USB Key、指纹、面部甚至虹膜扫描来认证身份，同时确保安全和隐私。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\" alt=\"WebAuthn 可使用的各种身份认证方式\" width=\"1294\" height=\"566\" class=\"aligncenter size-full wp-image-2213\"></a>\n<p>WebAuthn 标准是 FIDO2 标准的一部分，而 FIDO2 则是由 FIDO 联盟和 W3C 共同推出的 U2F（现称作 FIDO1）的后继标准，旨在增强网络认证的安全性。</p>\n<blockquote><p>你可能了解过 U2F，那么 U2F 和 FIDO2 的区别在哪里呢？从名字上可以看出，U2F，即“通用第二因素协议”，是专注于作为密码后的第二道屏障的，而 FIDO2 增加了单因素认证功能，这意味着使用 FIDO2 可以完全替代密码，真正实现无密码登录。</p></blockquote>\n<p>FIDO2 标准主要包括四个部分，其一是用于网站和访客设备交互的 WebAuthn，而 Client to Authenticator Protocol 2（CTAP2，客户端-认证器协议）作为 WebAuthn 的补充，则是用于访客的设备和认证器交互的协议。标准的其他两个部分则是 U2F 和 UAF 规范。在这篇文章中，我们只关心 WebAuthn，不会涉及 CTAP, U2F 和 UAF 的相关知识。如果你对这段话中的一些概念不了解，不要紧张，接下来我们就来谈谈 WebAuthn 中一些常用的术语和概念。</p>\n<blockquote><p>WebAuthn 只能在安全上下文中使用，也就是说，页面需要使用 HTTPS 协议或是处于 <code>localhost</code> 中。</p></blockquote>\n<h2>常用术语和概念</h2>\n<p>WebAuthn 中有许多不常碰到的术语，不过我只会在这里介绍一些常用的术语和概念——如果你只是希望做出一个简单的实现，那么了解这一段中的一些概念就足够了。同时，由于我实在没能找到一部分术语的通用翻译，有一些术语我按着自己的理解尽可能地翻译了，有任何问题请告诉我。</p>\n<p>在一个完整的 WebAuthn 认证流程中，通常有这么几个角色：</p>\n<ul>\n<li>Relying Party 依赖方 (RP) ：指服务提供方，即网站</li>\n<li>User 用户：正准备登录的你</li>\n<li>Authenticator 认证器：通常指 USB Key 或是设备内置的指纹扫描器、虹膜扫描器、面部识别装置等，正是它们在使用流程中代替了密码甚至是用户名</li>\n<li>User Agent 用户代理：通常指浏览器或系统，负责与认证器交互</li>\n</ul>\n<p>认证过程通常分为两种：</p>\n<ul>\n<li>Registration Ceremony 注册仪式：用户向账户上添加认证器</li>\n<li>Authentication Ceremony 验证仪式：用户通过已注册的认证器验证身份</li>\n</ul>\n<p>同时，认证过程中还会产生这些内容：</p>\n<ul>\n<li>Challenge 挑战：通常是一串随机字符串</li>\n<li>Public Key Credential 公钥凭证：由认证器产生的凭证，在技术上代替了密码</li>\n<li>Attestation 证明：注册时认证器产生的验证数据</li>\n<li>Assertion 断言：验证时认证器产生的验证数据</li>\n</ul>\n<blockquote><p><strong>请注意区分证明 (Attestation) 和断言 (Assertion)</strong>，特别是在这两个单词有些相似的情况下。在 WebAuthn 中，它们是不同过程中的类似概念，但并不相同。</p></blockquote>\n<p>如果你对于这些内容不是很理解，没有关系，我们会在“<a href=\"https://flyhigher.top/#how-to-webauthn\">使用流程</a>”一节中将这些概念放到实际情况中解释，你只要先区分这些概念即可。</p>\n<h2>安全性的基础</h2>\n<p>WebAuthn 为什么安全？和 HTTPS 一样，WebAuthn 使用非对称加密的思路来保证安全性，但侧重点又有所不同。要理解 WebAuthn 的认证流程，我们必须对非对称加密有所了解。如果你对非对称加密比较熟悉了，就直接跳到下一段吧。</p>\n<p>WebAuthn 的核心在于“认证”，即保证产生了凭证的认证器是用户的认证器，而不是第三方在伪造凭证。但为什么要使用非对称加密呢？我们可以先来看看对称加密。</p>\n<p>让我们假设小明和小红相互写信，见不到对方。这天小红突然想，给自己写信的人是不是真的小明呢？于是小红要求对方向小红证明自己是小明。怎么证明呢？他们商量出来这么一套方案：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明和小红商量一个统一的密码和密钥</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明用提前和小红商量好的密码和密钥加密文本后发回给小红</li>\n<li>小红使用相同的密码和密钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和密钥</li>\n</ol>\n<blockquote><p>在密码学中，我们通常把“加密算法”称为密码 (code)，和通常登录时用的密码 (password) 并非同一个概念。</p></blockquote>\n<p>在这种情况下，<strong>只要密钥不泄露</strong>，即拥有正确密钥的只有小明和小红，那么小红就能确定对方一定是小明。但这样的问题也很明显，如果小明和小红不能见面，那么他们就必须先以明文交换密码——<strong>在这个过程中一旦有人窃取到了密码，这个认证就无效了。</strong></p>\n<p>这时我们就需要使用<strong>非对称加密</strong>来拯救破碎的信任了。非对称加密的基础是一对密钥，也就是公钥和私钥，它们是互相关联但（几乎）无法互相推导的。在非对称加密的过程中，选择相同的密码后，使用私钥加密明文得到的密文只能由对应的公钥解密，无法使用私钥解密，同时这个过程反过来也是成立的。</p>\n<blockquote><p>本文的核心并不是非对称加密算法，因此不会详述非对称加密在数学上的证明，若有兴趣可以自行了解。</p></blockquote>\n<p>这就完美解决密钥泄露的问题了。让我们回过头来看之前的例子。现在小明和小红决定使用非对称加密来证明身份，过程如下：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明提前生成一对公私钥，将公钥发送给小红，私钥自己保管，同时商量好统一的密码</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明使用商量好的密码和自己的私钥加密文本，发送给小红</li>\n<li>小红使用相同的密码和小明的公钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和私钥</li>\n</ol>\n<p>在这种情况下，<strong>只要私钥不泄露</strong>，那么小红解密得到的文本和之前发送的一致，那么就可以证明收到的密文一定是由小明加密后发送过来的。而在整个过程中，私钥都没有离开过小明，更没有经过传输，也就几乎没有泄露的可能了。这时，小红终于可以确定对面和她通信的人的确是小明了。</p>\n<p>题外话：HTTPS 虽然也应用了非对称加密，但 HTTPS 更侧重于“加密”而非“认证”，因此思路上会有些许差异。要了解关于 HTTPS 和非对称加密的更多信息，你可以阅读我之前写的这篇文章：</p>\n<p></p>\n<div class=\"mdx-post-cot\" data-mdxposturl=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdx-post-wait-out-c2\"><div class=\"mdx-post-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<span></span>\n<h2>使用流程</h2>\n<p>了解了非对称加密，我们就可以来看看 WebAuthn 的认证流程了。</p>\n<p>和普通的密码一样，<strong>使用 WebAuthn 分为两个部分，注册和验证。</strong>注册仪式会在依赖方中将认证器的一些信息和用户建立关联；而验证仪式则是验证这些信息以登确保是用户本人在登录。根据上一节的思路，我们可以知道，注册仪式就是认证器生成一对公私钥，然后将公钥交给依赖方；而验证仪式是依赖方发送给认证器一段文本，要求认证器用自己的私钥加密后发回以验证。</p>\n<p>在实际情况中，WebAuthn 是基于<strong>挑战-应答模型</strong>工作的。要更好地理解，我们直接来看具体流程。先来看看注册的流程。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\" alt=\"WebAuthn 注册流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2224\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的注册请求</li>\n<li>依赖方向浏览器发送挑战、依赖方信息和用户信息</li>\n<li>浏览器向认证器发送挑战、依赖方信息、用户信息和客户端信息以请求创建公钥凭证</li>\n<li>认证器请求用户动作，随后创建一对公私钥，并使用私钥签名挑战（即证明），和公钥一起交给浏览器</li>\n<li>浏览器将签名后的挑战和公钥发送给依赖方</li>\n<li>依赖方用公钥验证挑战是否与发送的一致，如果成功则将公钥与用户绑定，注册完成</li>\n</ol>\n<p>我也做了一个交互式的 Demo，你可以对照流程来更好地理解。</p>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\">开始注册</button> <span></span></p>\n<div></div>\n<blockquote><p>注意，这个 Demo 和下方的 Demo 都只是一个本地模拟的简单示例，没有任何数据会被上传，当然也不会对数据进行验证。</p></blockquote>\n<p>而之后的验证流程如下：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\" alt=\"WebAuthn 验证流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2226\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的验证请求</li>\n<li>依赖方向浏览器发送挑战</li>\n<li>浏览器向认证器发送挑战、依赖方信息和客户端信息以请求获取公钥凭证</li>\n<li>认证器请求用户动作，随后通过依赖方信息找到对应私钥，并使用私钥签名挑战（即断言），交给浏览器</li>\n<li>浏览器将签名后的挑战发送给依赖方</li>\n<li>依赖方用之前存储的公钥验证挑战是否与发送的一致，一致则验证成功</li>\n</ol>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\" disabled>开始验证</button> <span>在上方注册后才能验证</span></p>\n<div></div>\n<p>可以看到，WebAuthn 不仅在理论上是安全的，同时<strong>在整个过程中并没有隐私数据被传输</strong>——用户信息实际上只包含用户名和用户 ID。因此我们完全可以说 WebAuthn 是安全且私密的。</p>\n<blockquote><p>为了避免用户在不同依赖方之间被追踪，认证器通常会为每个依赖方和用户的组合都创建一对公私钥。不过，由于认证器的存储空间有限，认证器通常不会存储每一个私钥，而是会通过各类信息和烧录在认证器内的主密钥“算”出对应的私钥以实现无限对公私钥。具体算法根据不同厂商会有所不同。对于 Yubikey，你可以在<a href=\"https://developers.yubico.com/U2F/Protocol_details/Key_generation.html\">这里</a>了解更多。</p></blockquote>\n<blockquote><p>如果依赖方需要，用户同意后，发送给依赖方的公钥凭证中可以包含用于辨认认证器型号的信息，不过这对隐私的影响微乎其微。</p></blockquote>\n<h2>浏览器接口</h2>\n<p>要使用 WebAuthn，我们必须要依靠浏览器作为媒介和验证器进行交互，而这就需要浏览器对于 WebAuthn 的支持了。绝大多数新版本的现代浏览器都为 WebAuthn 提供了统一的接口，而在这一段中我们会了解如何使用相关的接口。但是在开始之前，我们可以先来看看浏览器的支持程度（2020.9）。</p>\n<div class=\"mdui-table-fluid\"><table class=\"mdui-table\">\n<thead><tr>\n<th>浏览器</th>\n<th>支持情况</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>桌面端 Chrome</td>\n<td>67+</td>\n</tr>\n<tr>\n<td>移动端 Chrome</td>\n<td>67+<sup>[1]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Firefox</td>\n<td>60+</td>\n</tr>\n<tr>\n<td>移动端 Firefox</td>\n<td>不支持<sup>[2]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Edge</td>\n<td>18+</td>\n</tr>\n<tr>\n<td>移动端 Edge</td>\n<td>不支持<sup>[3]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Safari</td>\n<td>13+</td>\n</tr>\n<tr>\n<td>移动端 Safari</td>\n<td>13.3+<sup>[4]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Opera</td>\n<td>54+</td>\n</tr>\n<tr>\n<td>移动端 Opera</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table></div>\n<p><sup>[1]</sup> 受平台限制，Chrome 在 iOS 平台上不支持 WebAuthn，在 Android 平台上支持大部分 WebAuthn 功能，但仍不支持部分特性（如 <code>userVerification</code>）。<br><sup>[2]</sup> 移动端 Firefox 80 以下的版本支持 WebAuthn 但似乎会忽略 <code>authenticatorAttachment</code> 等一部分参数，同时移动端 Firefox Beta 80 以下的版本支持 WebAuthn 但无法成功调用。自 80 版本起移动端 Firefox 暂时取消了对 WebAuthn 的支持（可能是 Bug）。<br><sup>[3]</sup> 移动端 Edge 似乎支持 WebAuthn 但无法成功调用。<br><sup>[4]</sup> Safari iOS/iPad OS 13 仅支持外部认证器，无法调用 Touch ID 或 Face ID；自 iOS/iPad OS 14 起 Safari 已支持全功能 WebAuthn，可以调用 Touch ID/Face ID</p>\n<p>当然，一众国产浏览器，包括 Samsung Browser 和 Yandex Browser，目前都不支持 WebAuthn。此外，由于 WebAuthn 涉及外部验证器和 TPM 可信平台模块等，用户的操作系统也会对 WebAuthn 的可用性造成影响。以下是一些需要注意的信息：</p>\n<ul>\n<li>Windows 10 1903 以下版本仅 Edge 能提供完整支持，其他浏览器只能使用 USB Key 等外部认证器；1903+ 中所有浏览器都可以通过 Windows Hello 带来完整的 WebAuthn 支持</li>\n<li>Android 需要安装并开启 Google 服务</li>\n<li>iOS/iPad OS 13.3 以下的版本不支持 WebAuthn，iOS/iPad OS 14 以下的版本支持有限（参考上文），iOS/iPad OS 14 开始 Safari 已支持全功能 WebAuthn（功能完整度甚至超过了 Android）</li>\n</ul>\n<p>可以看出，WebAuthn 的发展之路仍然很漫长，但好在桌面端对它的支持已经比较完善了，在一些情况下我们完全有理由使用它。</p>\n<hr>\n<p>来看看浏览器提供了怎么样的接口吧。要使用 WebAuthn，我们可以使用 <code>navigator.credentials.create()</code> 请求认证器生成公钥凭证和 <code>navigator.credentials.get()</code> 请求获取公钥凭证。</p>\n<blockquote><p>你或许已经对 Credential Management API 有所了解了。通过这些 API，我们还可以实现一些有趣的特性，不过这值得另开一篇文章来讲了。</p></blockquote>\n<p>对于一个基础的实现，<code>navigator.credentials.create()</code> 需要传入的参数如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        challenge,\r\n        rp: {\r\n            id,\r\n            name\r\n        },\r\n        user: {\r\n            id,\r\n            name,\r\n            displayName\r\n        },\r\n        pubKeyCredParams: [\r\n            {\r\n                type: \"public-key\",\r\n                alg\r\n            }\r\n        ],\r\n        authenticatorSelection: {\r\n            authenticatorAttachment,\r\n            userVerification\r\n        },\r\n        excludeCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>在 <code>navigator.credentials.create()</code> 方法中，我们必须传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值。这指明了我们需要创建公钥凭证，而非普通的密码凭证。然后，在 <code>publicKey</code> 对象中设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rp: Object</code>：依赖方信息，其中有一项为必须：\n<ul>\n<li>\n<code>rp.id: String</code>：（可选）依赖方 ID，必须为当前域名或为当前域名的子集的域名（不是子域名）。如域名为 <code>test.123.example.com</code>，则依赖方 ID 可以是 <code>test.123.example.com</code>, <code>123.example.com</code> 或 <code>example.com</code>。不指定则默认使用当前域名</li>\n<li>\n<code>rp.name: String</code>：依赖方名称，用于方便用户辨认</li>\n</ul>\n</li>\n<li>\n<code>user: Object</code>：用户信息，其中有三项为必须：\n<ul>\n<li>\n<code>user.id: Uint8Array</code>：转换为 <code>Uint8Array</code> 的字符串。<strong>出于安全考量，这应尽可能不与任何用户信息相关联，如不要包含用户名、用户邮箱等</strong>\n</li>\n<li>\n<code>user.name: String</code>：登录用户名</li>\n<li>\n<code>user.dispalyName: String</code>：用于显示的用户名称，显示与否的具体行为取决于浏览器</li>\n</ul>\n</li>\n<li>\n<code>pubKeyCredParams: Array</code>：一个算法列表，指明依赖方接受哪些签名算法。列表的每一项都是一个对象，拥有两个属性：\n<ul>\n<li>\n<code>pubKeyCredParams[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>pubKeyCredParams[].alg: Number</code>：一个负整数，用于标明算法。具体算法对应的数字可以在 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\">COSE</a> 找到</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection: Object</code>：（可选）用于过滤正确的认证器，这里介绍常用的一个参数：\n<ul>\n<li>\n<code>authenticatorSelection.authenticatorAttachment: String</code>：（可选）指定要求的认证器类型。如果没有满足要求的认证器，认证可能会失败。该参数可以为 <code>null</code>（表示接受所有类型的认证器）或是以下两个值之一：\n<ul>\n<li>\n<code>platform</code>：表示仅接受平台内置的、无法移除的认证器，如手机的指纹识别设备</li>\n<li>\n<code>cross-platform</code>：表示仅接受外部认证器，如 USB Key</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection.userVerification: String</code>：（可选）指定认证器是否需要验证“用户为本人 (User Verified, UV)”，否则只须“用户在场 (User Present, UP)”。具体验证过程取决于认证器（不同认证器的认证方法不同，也有认证器不支持用户验证），而对验证结果的处理情况则取决于依赖方。该参数可以为以下三个值之一：\n<ul>\n<li>\n<code>required</code>：依赖方要求用户验证</li>\n<li>\n<code>preferred</code>：（默认）依赖方希望有用户验证，但也接受用户在场的结果</li>\n<li>\n<code>discouraged</code>：依赖方不关心用户验证。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>excludeCredentials: Array</code>：（可选）用于标识要排除的凭证，可以避免同一个用户多次注册同一个认证器。如果用户试图注册相同的认证器，用户代理会抛出 <code>InvalidStateError</code> 错误。数组中的每一项都是一个公钥凭证对象，包含以下属性：\n<ul>\n<li>\n<code>excludeCredentials[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>excludeCredentials[].id: Uint8Array</code>：要排除的凭证 ID</li>\n<li>\n<code>excludeCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，超时后将强制终止 <code>create()</code> 并抛出错误。若不设置，将使用用户代理的默认值；若太大或太小，则使用最接近的用户代理默认值范围中的值。推荐值为 5000-120000</li>\n</ul>\n<blockquote><p>对于 <code>pubKeyCredParams</code>，通常我们只需添加 ES256 (alg: -7) 算法即可兼容大部分外部认证器，此外，再添加 RS256 (alg: -257) 算法即可兼容大部分平台内置认证器（如 Windows Hello）。当然，前端添加算法之后，后端也需要相应的算法支持。</p></blockquote>\n<blockquote><p>对于 <code>userVerification</code>，由于默认值 \"preferred\" 并不能很好地被所有设备支持，因此无论在 <code>create()</code> 中还是 <code>get()</code> 中不指定该参数都会在 Chrome 中触发一条警告。具体请参阅<a href=\"https://chromium.googlesource.com/chromium/src/+/master/content/browser/webauth/uv_preferred.md\">这个页面</a>。</p></blockquote>\n<p>调用 <code>create()</code> 之后，我们就可以拿到一个 <code>Promise</code>，并可以在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>create()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAttestationResponse {\r\n        attestationObject: ArrayBuffer(390) {},\r\n        clientDataJSON: ArrayBuffer(121) {}\r\n    },\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\",\r\n    type: \"public-key\"\r\n}</pre>\n<p>其中有：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 \"public-key\"</li>\n<li>\n<code>response: Object</code>：<code>AuthenticatorAttestationResponse</code> 对象，是 <code>PublicKeyCredential</code> 的主要部分，包含以下两个内容：\n<ul>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n<li>\n<code>response.attestationObject: ArrayBuffer</code>：CBOR 编码的认证器数据，包含凭证公钥、凭证 ID、签名（如果有）、签名计数等信息</li>\n</ul>\n</li>\n</ul>\n<p>然后将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串，我们就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证与注册了。具体怎么操作，我们会在下文详细讨论。当然，别忘了 <code>catch()</code> 注册过程中抛出的任何错误。</p>\n<blockquote><p>你可能会认为在所有情况下，注册时认证器都会对挑战进行签名。实际上在大部分情况下（同时也是默认情况），<strong>注册时认证器并不会对挑战进行签名</strong>，<code>attestationObject</code> 并不会包含签名后的挑战。只有依赖方明确要求证明且用户同意（部分浏览器要求）后认证器才会对挑战进行签名（具体实现据情况会有所不同）。对此，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion#Attestation\">MDN 解释道</a>“大部分情况下，用户注册公钥时我们会使用「初次使用时信任模型」(TOFU) ，此时验证公钥是没有必要的。”要了解更多关于证明的内容，请参阅“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>而对于 <code>navigator.credentials.get()</code>，我们可以传入如下的参数：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.get({\r\n    publicKey: {\r\n        challenge,\r\n        rpId,\r\n        userVerification,\r\n        allowCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>和 <code>create()</code> 一样，对于 <code>get()</code> 我们需要传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值，指明我们需要获取的是公钥凭证而非普通的密码凭证。在 <code>publicKey</code> 对象中我们可以设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rpID: String</code>：（可选）依赖方 ID，需要和注册认证器时的一致。规则和上述的 <code>rp.id</code> 一致，不指定默认使用当前域名</li>\n<li>\n<code>userVerification: String</code>：和上文一样，只是需要注意它这次不在 <code>authenticatorSelection</code> 中了</li>\n<li>\n<code>allowCredentials: Array</code>：（可选）用于标识允许的凭证 ID，使用户代理找到正确的认证器。只有符合这个列表中凭证 ID 的凭证才能被成功返回。数组中的每一项都是对象，包含以下属性：\n<ul>\n<li>\n<code>allowCredentials[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>allowCredentials[].id: Uint8Array</code>：允许的凭证 ID</li>\n<li>\n<code>allowCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，和上面的一样，推荐值为 5000-120000</li>\n</ul>\n<p>嗯，要传入的参数少多了。之后，和 <code>create()</code> 一样，调用 <code>get()</code> 之后，我们就可以拿到一个 <code>Promise</code> 并在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>get()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAssertionResponse {\r\n        authenticatorData: ArrayBuffer(37) {},\r\n        signature: ArrayBuffer(256) {},\r\n        userHandle: ArrayBuffer(64) {},\r\n        clientDataJSON: ArrayBuffer(118) {}\r\n    }\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\"\r\n    type: \"public-key\"\r\n}</pre>\n<p>这里的东西就比 <code>create()</code> 时拿到的要多了。看看我们拿到了什么吧：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 \"public-key\"</li>\n<li>\n<code>response: Object</code>：对于验证流程，认证会返回 <code>AuthenticatorAssertionResponse</code> 而不是 <code>AuthenticatorAttestationResponse</code> 对象，这个对象包含以下 4 个属性：\n<ul>\n<li>\n<code>response.authenticatorData: ArrayBuffer</code>：认证器信息，包含认证状态、签名计数等</li>\n<li>\n<code>response.signature: ArrayBuffer</code>：被认证器签名的 <code>authenticatorData</code> + <code>clientDataHash</code>（<code>clientDataJSON</code> 的 SHA-256 hash）</li>\n<li>\n<code>response.userHandle: ArrayBuffer</code>：<code>create()</code> 创建凭证时的用户 ID <code>user.id</code>。许多 U2F 设备不支持这一特性，这一项将会是 <code>null</code>\n</li>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n</ul>\n</li>\n</ul>\n<p>同样地，我们将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串后就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证了。至于具体怎么做，别急，马上就来讲一讲。</p>\n<h2>简单实现</h2>\n<p>了这么多，我们终于可以实现一个简单的 WebAuthn 认证页面了。由于在实际操作中 WebAuthn 相关的数据解码和密码计算比较复杂，在服务器端我们可以使用第三方库来帮我们做这些脏活累活，我们只需专注于具体流程就可以了。</p>\n<p>要寻找可用的第三方库，你可以在 <a href=\"https://webauthn.io/\">webauthn.io</a> 上找到适用于各种语言的第三方库——除了 PHP（笑）。不过好在你可以在 GitHub 上找到几个不错的 PHP WebAuthn 库，比如 <a href=\"https://github.com/web-auth/webauthn-framework\">web-auth/webauthn-framework</a>。</p>\n<p>在我们的这个例子中，我们关心的主要是前端逻辑；而后端我们可以使用各类几乎已经做到开箱即用的第三方库，这样我们可以专注于流程而不必关心细节。当然如果你想了解后端的解码细节，可以阅读“<a href=\"https://flyhigher.top/#webauthn-decode\">手动解个码</a>”一节。</p>\n<hr>\n<p>让我们先从注册开始吧。现在，用户点击了注册认证器的按钮，一个请求被发送给服务器（也就是依赖方）。在最简单的情况中，依赖方需要将三个内容发送给浏览器：<strong>挑战、用户信息和用户已注册的凭证 ID 列表（即 <code>excludeCredentials</code>）</strong>。当然依赖方也可以自由选择发送更多信息，只要最终前端能构建合法的参数即可。</p>\n<p>挑战最终会被转换为 <code>Uint8Array</code>，即一组 0-255 的整数。如果使用 PHP，在后端我们可以这样生成 Base64 编码的挑战：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$challenge = \"\";\r\nfor($i = 0; $i \n<p>对于用户信息，我们需要登录名、显示名称和 ID 三项内容。我们可以从数据库中取出用户信息，也可以新建一份。需要注意的是，<strong>出于安全和隐私的考量，ID 不应该包含用户的任何信息，比如用户邮箱等。</strong>推荐的做法是和挑战一样，生成一个随机字符串/一组随机数，并将其于用户关联起来以供之后使用。</p>\n<p>发送已注册的凭证 ID 列表是为了防止用户重复注册同一个认证器。正确设置该列表后，如果用户试图注册同一个认证器，浏览器会中止流程并抛出 <code>InvalidStateError</code>。</p>\n<p>最后，别忘了将挑战等一些后续可能会用到的信息临时存储起来。Session 就是一个很好的选择。</p>\n<p>将所有信息发送到浏览器之后，我们应该可以构建出新建凭证所需的参数了。由于有多个参数需要以 <code>Uint8Array</code> 的形式传入，我们可以准备一个简单的工具函数帮我们将 Base64 的字符串转为 <code>Uint8Array</code>。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function str2ab(str){\r\n    return Uint8Array.from(window.atob(str), c=&gt;c.charCodeAt(0));\r\n}</pre>\n<p>除了 <code>challenge</code>, <code>rp</code>, <code>user</code> 和 <code>excludeCredentials</code> 几部分需要你根据具体情况设置外，上文提到的其他参数一般可以这么设置：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">publicKey: {\r\n    challenge, // 自行设置\r\n    rp, // 自行设置\r\n    user, // 自行设置\r\n    pubKeyCredParams: [\r\n        {\r\n            type: \"public-key\",\r\n            alg: -7 // ES256\r\n        },\r\n        {\r\n            type: \"public-key\",\r\n            alg: -257 // RS256\r\n        }\r\n    ],\r\n    authenticatorSelection: {\r\n        userVerification: \"discouraged\",\r\n        authenticatorAttachment: null // 除非用户指定，大部分情况下无需指定\r\n    },\r\n    excludeCredentials, // 自行设置\r\n    timeout: 60000\r\n}</pre>\n<p>然后就是传入 <code>navigator.credentials.create()</code>，拿到 <code>PublicKeyCredential</code>。如果一切顺利，接下来我们就需要考虑如何将返回的内容传回依赖方了。由于我们拿到的很多都是 <code>ArrayBuffer</code>，我们需要将其进行编码。再准备一个工具函数吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function array2b64String(a) {\r\n    return window.btoa(String.fromCharCode(...a));\r\n}</pre>\n<p>然后适当处理，我们就可以得到一个方便传输的 JSON 字符串了：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({publicKey}).then((credentialInfo) =&gt; {\r\n    const publicKeyCredential = {\r\n        id: credentialInfo.id,\r\n        type: credentialInfo.type,\r\n        rawId: array2b64String(new Uint8Array(credentialInfo.rawId)),\r\n        response: {\r\n            clientDataJSON: array2b64String(new Uint8Array(credentialInfo.response.clientDataJSON)),\r\n            attestationObject: array2b64String(new Uint8Array(credentialInfo.response.attestationObject))\r\n        }\r\n    };\r\n    return publicKeyCredential;\r\n}).then(JSON.stringify).then((authenticatorResponseJSON) =&gt; {\r\n    // 可以发送了\r\n}).catch((error) =&gt; {\r\n    console.warn(error); // 捕获错误\r\n})</pre>\n<p>依赖方收到数据以后，还需要做三件事：验证挑战、存储凭证 ID 和存储公钥。如果数据解码顺利，且收到的挑战和之前发送的一致，就可以认为注册成功，将凭证 ID 及公钥与用户关联起来。这一步有很多第三方库可以帮我们做，对于基础实现我们就不深入探究了。</p>\n<blockquote><p>由于不同厂商的认证器的实现方式不同，<strong>我们并不能保证凭证 ID 一定是全局唯一的</strong>，也就是说，凭证 ID 有可能碰撞——即使这些凭证实际上是不同的。依赖方在实现凭证 ID 的存储及查找时，需要注意和用户 ID 结合进行存储或查找，或是直接在注册认证器时在服务器端对比阻止相同的凭证 ID。</p></blockquote>\n<hr><p>接下来就可以进行验证了。某天，用户点击了验证按钮准备登录，于是浏览器发送了验证请求到依赖方，同时附上要登录的用户名。接下来依赖方至少需要发送两项内容给浏览器：<strong>挑战和用户已绑定的凭证 ID 列表（即 <code>allowCredentials</code>）。</strong></p>\n<p>之后前端的处理流程就和注册时基本一致了。只是需要注意验证流程中获取到的 <code>PublicKeyCredential</code> 的结构和注册时的稍有不同。</p>\n<p>当浏览器将数据传回后，依赖方需要做的事情就比之前要麻烦一些了。依赖方需要验证挑战，并用之前存储的公钥验证签名和签名计数。同样地，这一步有很多第三方库可以帮我们做。最后，如果验证全部通过，我们就可以允许用户登录了。</p>\n<p>到目前为止，我们已经实现了一个简单的 WebAuthn 验证服务。不过这只是一个最基础的实现，对于很多高安全要求的身份认证这是远远不够的。因此，我们需要摆脱对第三方库的依赖，深入了解 WebAuthn。你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分，不过对于基础的 WebAuthn 实现，我们的旅程就到这里了。</p>\n<h2>拓展阅读</h2>\n<p>如果你的目标只是快速了解如何开发 WebAuthn，那么你阅读到这里就可以了。同时，上一节例子中的部分代码来自于我为了这篇文章开发的 WordPress 插件 WP-WebAuthn，这个插件可以为你的 WordPress 启用 WebAuthn 无密码登录（并非二步验证），你可以查阅插件的 <a href=\"https://github.com/yrccondor/wp-webauthn\">GitHub 存储库</a>了解更多，也可以自己安装试一试。</p>\n<p>如果你正在使用 Chrome 开发，Chrome 87+ 版本添加了一个 WebAuthn 开发者面板，可以帮助你在没有任何实体验证器的情况下开发 WebAuthn 功能。你可以在 Google 的<a href=\"https://developers.google.com/web/tools/chrome-devtools/webauthn\">这篇文章</a>中了解更多。不够，如果你正在使用 Firefox，很遗憾目前我还没有找到对应的开发工具或是浏览器扩展可用。</p>\n<p>如果你希望了解更多关于非对称加密的数学证明，可以查阅阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">这篇文章</a>。</p>\n<p>如果你希望了解更多关于 Credential Management API 的信息，可以查阅<a href=\"https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe\">这篇文章</a>（英文）。</p>\n<p>如果你希望了解更多 WebAuthn 的细节，可以继续往下阅读。<span></span></p>\n<h1>深入了解 WebAuthn</h1>\n<p>如上文所说，如果摆脱对第三方库的依赖，或是要实现更安全的 WebAuthn，我们必须深入了解 WebAuthn。在这一部分中，我们会详细讨论上文没有提到的一些概念和参数，并了解 WebAuthn 中各类数据的结构以实现解码与验证。先来看一看一些进阶的选项吧。</p>\n<h2>进阶选项</h2>\n<p>没错，上文提到的传入 <code>navigator.credentials.create()</code> 和 <code>navigator.credentials.get()</code> 方法的参数其实只是所有参数的一部分。对于 <code>create()</code>，我们还可以配置这些可选内容（上文提及的已省略）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        rp: {\r\n            icon\r\n        },\r\n        user: {\r\n            icon\r\n        },\r\n        attestation,\r\n        authenticatorSelection: {\r\n            requireResidentKey\r\n        },\r\n        extensions\r\n    }\r\n})</pre>\n</pre>\n<ul>\n<li>\n<code>rp.icon: String</code> 和 <code>user.icon</code>：是的，你可以为依赖方和用户设置图标，可以使用 HTTPS URL 或 Base64，一般长度不能超过 128 字节，不过大部分浏览器不会显示图标，或是有非常小的图片体积限制，所以一般没有使用这一属性的必要</li>\n<li>\n<code>attestation: String</code>：表明依赖方是否需要证明。可选三个值：\n<ul>\n<li>\n<code>none</code>：（默认）不需要证明。如上文所述，依赖方不关心证明，因此认证器不会签名。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n<li>\n<code>indirect</code>：依赖方需要证明，但证明方式可由认证器选择。在支持匿名证明的认证器上，认证器会通过匿名证明的方式签名挑战，并向依赖方提供签名方式等信息</li>\n<li>\n<code>direct</code>：依赖方要求直接证明。此时认证器会使用烧录在认证器中的公钥进行签名，同时向依赖方提供签名方式等信息以供依赖方验证认证器是否可信。更多信息可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节</li>\n</ul>\n</li>\n<li>在 <code>authenticatorSelection</code> 中，我们还可以设置两个可选属性：\n<ul>\n<li>\n<code>authenticatorSelection.requireResidentKey: Boolean</code>：是否要求将私钥钥永久存储于认证器中。默认值为 <code>false</code>。对于 iOS/iPad OS 13，必须设置为 <code>false</code>，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n<li>\n<code>extensions: Object</code>：WebAuthn 扩展，可以提供规范之外的配置和响应。由于实际情况中很少会使用这一特性，我们不会在这篇文章中讨论它</li>\n\n<blockquote><p>将 <code>requireResidentKey</code> 设置为 <code>true</code> 可以实现无用户名的登录，即认证器同时替代了用户名和密码。需要注意的是，尽管大部分认证器可以实现无限对公私钥，<strong>但能永久存储的私钥数量是有限的</strong>（对于 Yubikey，这通常是 25），因此只应在真正需要的时候启用此特性。我们会在“<a href=\"https://flyhigher.top/#login-without-username\">无用户名登录</a>”一节中详细讨论原因。</p></blockquote>\n<blockquote><p><strong>如果你没有高安全需求（如银行交易等），请不要向认证器索取证明</strong>，即将 <code>attestation</code> 设置为 \"none\"。对于普通身份认证来说，要求证明不必要的，且会有浏览器提示打扰到用户。</p></blockquote>\n<blockquote><p>Android 暂时无法实施用户验证，进而会导致依赖方验证失败。你可以在<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=997538\">这里</a>追踪这个特性的实现情况。</p></blockquote>\n<blockquote>\n<p>对于 <code>extensions</code>，由于目前浏览器支持和应用范围有限，我们不会在这篇文章中涉及，不过你可以看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    uvm: true, // 要求认证器返回用户进行验证的方法\r\n    txAuthSimple: \"Please proceed\" // 在认证器上显示与交易有关的简短消息\r\n}</pre>\n<p>你可以在<a href=\"https://www.w3.org/2019/01/webauthn-extensions.html\">这个页面</a>了解更多关于 <code>extensions</code> 的信息。</p>\n</blockquote>\n<p>对于 <code>get()</code>，我们其实只有一个可选内容没讲了，即 <code>extensions</code>。和上文一样，我们不会在这篇文章中讨论它。</p>\n<p>就这些了！<span></span></p>\n<h2>手动解个码</h2>\n<p>是时候看看如何手动解码了。我们将会在这一节中讨论认证器返回的数据的结构以及如何正确地解码它们。</p>\n<p>首先我们来看看如何处理注册过程中认证器发回的数据。假设所有 <code>ArrayBuffer</code> 类型的值都被正确地以 Base64 编码，且后端已经将 JSON 的字符串解析为字典。先来复习一下，我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"ZRBkDBCEtq...9XY8atOcbg\",\r\n    type: \"public-key\",\r\n    rawId: \"ZRBkDBCEtq...9XY8atOcbg==\",\r\n    response: {\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...i5jcmVhdGUifQ==\",\r\n        attestationObject: \"o2NmbXRkbm9uZWd...xNHuAMzz2LxZA==\"\r\n    }\r\n}</pre>\n<p>这里的 <code>id</code> 就是凭证的 ID，如果验证正确，我们最终要将它存储起来并于用户关联。同时可以看到 Base64 编码后的 <code>rawId</code> 其实和 <code>id</code> 是一致的（不过 <code>id</code> 是 Base64URL 编码的）。而 <code>type</code> 则一定是 \"public-key\"。</p>\n<p>不过，我们主要关心的还是 <code>respose</code> 中的两项内容。首先是 <code>clientDataJSON</code>。它的处理比较简单，看名字就知道，它应该是一个 JSON 字符串。</p>\n<blockquote><p>小技巧：如果你看到一个 Base64 编码的字符串以 \"ey\" 开头，那么它大概率是一个 Base64 编码的 JSON。</p></blockquote>\n<p>将<code>clientDataJSON</code> Base64 解码再 JSON 解码之后我们就能得到一个字典：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"NI4i1vsNmP2KHcmyFnBCKRVQPfHgg34SsYZUOPZY2lM\",\r\n    extra_keys_may_be_added_here: \"do not compare clientDataJSON against a template. See https://goo.gl/yabPex\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>结构一目了然。在这里，我们需要验证三项内容：</p>\n<ul>\n<li>\n<code>challenge</code> 和之前发送的一致</li>\n<li>\n<code>origin</code> 为创建凭证的页面的源（协议+主机名+端口号，并非 URL）</li>\n<li>\n<code>type</code> 为 \"webauthn.create\"</li>\n</ul>\n<p>同时可以注意到有一个奇怪的 <code>extra_keys_may_be_added_here</code>。这其实是 Google 在 Chrome 中搞的一点小把戏，有一定概率会出现，提醒我们需要将 JSON 解析后再验证键值以防额外插入的键值影响验证。具体信息你可以访问那个 URL 看一看。</p>\n<p>对于 Firefox，我们会多得到两项 <code>clientExtensions</code> 和 <code>hashAlgorithm</code> ，分别指明了客户端扩展数据和签名算法。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"3-4\">{\r\n    challenge: \"dg6ost6ujhAA0g6WqLe-SOOH-tbhvjW9Sp90aPKlLJI\",\r\n    clientExtensions: {},\r\n    hashAlgorithm: \"SHA-256\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>由于本文不考虑扩展数据，因此我们可以不考虑 <code>clientExtensions</code>。同时由于目前规范中指定的签名算法只有 SHA-256 一种，因此现阶段我们也可以简单地忽略 <code>hashAlgorithm</code>。</p>\n<p><code>clientDataJSON</code> 很简单地就处理完了。接下来我们要来看看 <code>attestationObject</code>。先来看看 <code>attestationObject</code> 的结构图示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\" alt=\"attestationObject 的结构\" width=\"1056\" height=\"532\" class=\"aligncenter size-full wp-image-2245\"></a>\n<p><code>attestationObject</code> 是 CBOR 编码后再被 Base64 编码的，因此我们需要额外对其进行 CBOR 解码。</p>\n<blockquote><p>CBOR (Concise Binary Object Representation, 简明二进制对象表示) 是一种多应用于物联网领域的编码方式，你可以将它看作体积更小、更方便物联网传输的二进制 JSON。大部分语言都可以找到对应的 CBOR 解码库。</p></blockquote>\n<p>我们当然不会手解 CBOR，直接来看看解开之后的样子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"none\",\r\n    attStmt: {},\r\n    authData: [211, 217, 43, 24, 199, ..., 97, 238, 166, 67, 107]\r\n}</pre>\n<p>这些键值的含义如下：</p>\n<ul>\n<li>\n<code>fmt</code>：标明证明的格式。WebAuthn 预定义了几种格式，分别为：\n<ul>\n<li>\n<code>none</code>：没有证明</li>\n<li>\n<code>packed</code>：为 WebAuthn 优化的证明格式</li>\n<li>\n<code>android-safetynet</code>：Android 使用的格式</li>\n<li>\n<code>android-key</code>：又是 Android 使用的格式</li>\n<li>\n<code>fido-u2f</code>：FIDO U2F 认证器使用的格式</li>\n<li>\n<code>tpm</code>：TPM 可信平台模块使用的格式</li>\n</ul>\n</li>\n<li>\n<code>attStmt</code>：证明对象，具体格式根据 <code>fmt</code> 的不同会有所不同</li>\n<li>\n<code>authData</code>：包含公钥、签名计数等来自认证器的数据</li>\n</ul>\n<p>诶，例子里的 <code>attStmt</code> 怎么是空的？还记得之前说的吗？大部分情况下，<strong>如果依赖方不要求证明，那么认证器不会签名挑战</strong>，于是 <code>fmt</code> 会变为 \"none\"，<code>attstmt</code> 会为空。如果不是高安全要求，我们可以只对这一种情况做支持。</p>\n<blockquote><p>注意，部分情况下 Firefox 会在不要求证明（即 <code>attestation</code> 为 \"none\"）时会返回 <code>fmt</code> 为 \"packed\" 的证明。<strong>这是符合规范的。</strong>此时认证器会进行自证明，你可以视情况进行处理。具体可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>对于非 \"none\" 的 <code>fmt</code> 我们稍后再谈，现在我们先来看看 <code>authData</code>。来复习一下 <code>authData</code> 的结构：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\" alt=\"authData 的结构\" width=\"1056\" height=\"384\" class=\"aligncenter size-full wp-image-2240\"></a>\n<p>对于它的解码比较简单粗暴，我们要做的就是根据图示将它切开，然后适当地转换类型。其中各部分的含义如下：</p>\n<ul>\n<li>\n<code>rpIdHash</code>：如其名，SHA-256 的 <code>rpId</code>，长度 32 字节</li>\n<li>\n<code>flags</code>：标识认证状态，长度 1 字节。其中 8 位分别为：\n<ul>\n<li>\n<code>ED</code>：是否有扩展数据</li>\n<li>\n<code>AT</code>：是否包含 <code>attestedCredentialData</code>。通常注册认证器时会包含 <code>attestedCredentialData</code>，而验证时不包含</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>\n<code>UV</code>：用户是否已验证</li>\n<li>保留位</li>\n<li>\n<code>UP</code>：用户是否在场</li>\n</ul>\n</li>\n<li>\n<code>signCount</code>：签名计数，长度 4 字节</li>\n<li>\n<code>attestedCredentialData</code>：包含公钥等凭据数据，变长。其结构如下：\n<ul>\n<li>\n<code>aaguid</code>：认证器的 AAGUID (Authenticator Attestation GUID)，对于同一型号的认证器，它们的 AAGUID 是相同的</li>\n<li>\n<code>credentialIdLength</code>：标识 <code>credentialId</code> 的长度，长度 2 字节</li>\n<li>\n<code>credentialId</code>：凭证 ID，和 <code>rawId</code> 一致，长度由 <code>credentialIdLength</code> 定义</li>\n<li>\n<code>credentialPublicKey</code>：CBOR 编码的 COSE 格式的凭证公钥，变长</li>\n</ul>\n</li>\n<li>\n<code>extensions</code>：扩展数据，变长，本文不讨论</li>\n</ul>\n<blockquote><p>出于隐私考虑，如果不要求证明，认证器会以 0 填充 AAGUID。</p></blockquote>\n<p>如果你的后端在使用 Node.js，这里有个工具函数可以帮你完成这一步（不考虑 <code>extensions</code>）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function parseAuthData(buffer){\r\n    let rpIdHash = buffer.slice(0, 32);\r\n    buffer = buffer.slice(32);\r\n  \r\n    let flagsBuf = buffer.slice(0, 1);\r\n    buffer = buffer.slice(1);\r\n\r\n    let flagsInt = flagsBuf[0];\r\n    let flags = {\r\n        up: !!(flagsInt &amp; 0x01),\r\n        uv: !!(flagsInt &amp; 0x04),\r\n        at: !!(flagsInt &amp; 0x40),\r\n        ed: !!(flagsInt &amp; 0x80),\r\n        flagsInt\r\n    }\r\n\r\n    let counterBuf = buffer.slice(0, 4);\r\n    buffer = buffer.slice(4);\r\n  \r\n    let counter = counterBuf.readUInt32BE(0);\r\n\r\n    let aaguid = undefined;\r\n    let credID = undefined;\r\n    let COSEPublicKey = undefined;\r\n\r\n    if(flags.at) {\r\n        aaguid = buffer.slice(0, 16);\r\n        buffer = buffer.slice(16);\r\n\r\n        let credIDLenBuf = buffer.slice(0, 2);\r\n        buffer = buffer.slice(2);\r\n\r\n        let credIDLen = credIDLenBuf.readUInt16BE(0);\r\n        credID = buffer.slice(0, credIDLen);\r\n\r\n        buffer = buffer.slice(credIDLen);\r\n        COSEPublicKey = buffer;\r\n    }\r\n\r\n    return {rpIdHash, flagsBuf, flags, counter, counterBuf, aaguid, credID, COSEPublicKey}\r\n}</pre>\n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>解开后，依赖方至少需要做四件事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>存储签名计数</li>\n<li>存储公钥</li>\n</ol>\n<blockquote><p>签名计数不一定从 0 开始。</p></blockquote>\n<p>对于公钥，也就是 <code>credentialPublicKey</code>，我们需要多一次 CBOR 解码，然后就可以得到类似这样的公钥：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    kty: \"EC\",\r\n    alg: \"ECDSA_w_SHA256\",\r\n    crv: \"P-256\",\r\n    x: \"ZGQALNfqo0L7HFYQHFHCS/X5db49z0ePnuQEs3w3X8w=\",\r\n    y: \"6qYxhnjYuez/Q8N6vX7nIIGfxFWdZ25NzQfZYuYOalA=\"\r\n}</pre>\n<p>然后可以选择适当的方法将其存储起来，之后的步骤本文就不再赘述了。现在，将目光拉回来，让我们看看包含证明的 <code>attestationObject</code> 是怎么样的。我们来看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"packed\",\r\n    attStmt: {\r\n        alg: -7,\r\n        sig: [48, 70, 2, 33, 0, ..., 132, 78, 46, 100, 21],\r\n        x5c: [\r\n            [48, 130, 2, 189, 48, 130, 1, 165, 160, 3, ..., 177, 48, 125, 191, 145, 24, 225, 169, 41, 248]\r\n        ]\r\n    },\r\n    authData: [211, 217, 43, 24, 199, ..., 158, 54, 87, 126, 54]\r\n}</pre>\n<p>这里有一个使用 \"packed\" 格式的证明。此时，<code>attStmt</code> 中包含三个值：</p>\n<ul>\n<li>\n<code>alg</code>：签名算法</li>\n<li>\n<code>sig</code>：签名值</li>\n<li>\n<code>x5c</code>：X.509 编码的证书链</li>\n</ul>\n<p>我们不会在这一节中详述对签名的验证。要了解更多信息，你可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。现在，让我们来看看如何处理验证过程中认证器发回的数据。我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"hmqdxPLit9...BWeVxZqdvU\",\r\n    type: \"public-key\",\r\n    rawId: \"hmqdxPLit9V...BWeVxZqdvU=\",\r\n    response: {\r\n        authenticatorData: \"09krGMcWTf...UFAAAABA==\",\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...XRobi5nZXQifQ==\",\r\n        signature: \"UsXZV3pvT3np8btj6V0g...WBkaqyt88DrD40qh+A==\",\r\n        userHandle: \"MmYxNWYzZjQyZjM...Tg2ZDY4NzhlNw==\"\r\n    }\r\n}</pre>\n<p><code>id</code>, <code>rawId</code> 和 <code>type</code> 和之前一样，这里就不再赘述了。让我们来看看 <code>response</code>。首先是 <code>clientDataJSON</code>，和之前的解法一样，要验证的内容也一样，只是 <code>type</code> 从 \"webauthn.create\" 变成了 \"webauthn.get\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"bnkd2CmrEuvKnAFXs2QlC3SKlg4XFvGtP4HJL1yEWyU\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.get\"\r\n}</pre>\n<p>然后是 <code>userHandle</code>。前面讲过，这是认证器在创建凭证时的用户 ID。如果用户在使用 U2F 认证器，很可能这一项为空，所以大部分情况下我们不关心这一项。</p>\n<p>接着来看 <code>authenticatorData</code>。这其实就是之前的 <code>attestedCredentialData</code>，只是这次不包含公钥。以相同的方式切开数据，我们应该可以得到 <code>rpIdHash</code>, <code>flags</code>和 <code>signCount</code> 三项。此时，依赖方至少需要做这三样事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>验证签名计数大于之前存储的计数，并更新存储的计数</li>\n</ol>\n<blockquote><p>如果签名计数比之前的小，那么这个认证器很可能是伪造的，应该中止验证并返回验证失败。同时，签名计数不一定每次按 1 递增，通常只要计数比此前的大就认为计数检查通过。</p></blockquote>\n<p>最后，我们来看 <code>signature</code>，也就是签名。不过这个签名不是简单的对挑战的签名，具体算法如图所示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\" alt=\"签名过程\" width=\"1034\" height=\"587\" class=\"aligncenter size-full wp-image-2231\"></a>\n<p>计算签名时，认证器会将 <code>authenticatorData</code> 与 <code>clientDataHash</code>（也就是 <code>clientDataJSON</code> 的 SHA-256 Hash）拼接起来，并使用对应的私钥签名。依赖方应该使用对应的公钥将其解密，并验证内容是否是 <code>authenticatorData</code> 与 <code>clientDataHash</code> 的拼接。这部分的计算不在本文的讨论范围内。</p>\n<p>最后，如果全部验证通过，返回验证成功。<span></span></p>\n<h2>验证认证器</h2>\n<p>WebAuthn 已经很安全了，但有的时候我们还要让它更安全一点。比如，如果用户在使用伪造的或是自制的认证器，认证器的安全性就得不到保证。此时，依赖方就需要验证认证器是否是可信的认证器。</p>\n<blockquote><p>这一过程仅发生在注册认证器时。此时，如果认证器验证通过，就可以存储公钥，后续步骤和之前描述的一致。</p></blockquote>\n<blockquote><p>再次说明，如果不是对安全性有极高的要求，向认证器索取证明以验证认证器是否可信是没有必要的。此外，验证认证器需要依赖方自行维护可信认证器列表，大大增加了维护的复杂性。</p></blockquote>\n<p>在调用 <code>navigator.credentials.create()</code> 时，我们可以将 <code>attestation</code> 设置为非 \"none\" 来向认证器索取证明。除无证明外，WebAuthn 定义了四种证明方式：</p>\n<ul>\n<li>Basic Attestation (Basic) ：基础的证明方式，认证器会使用认证器私钥签名</li>\n<li>Self Attestation (Self) ：自证明，认证器会使用凭证私钥签名</li>\n<li>Attestation CA (AttCA) ：认证器会使用多个证明私钥之一签名</li>\n<li>Elliptic Curve based Direct Anonymous Attestation (ECDAA) ：通过 <a href=\"https://en.wikipedia.org/wiki/Direct_Anonymous_Attestation\">DAA</a> 实现的匿名证明</li>\n</ul>\n<blockquote><p>和验证过程一样，这里签名的目标是 <code>authenticatorData</code> 和 <code>clientDataHash</code> 的连接。</p></blockquote>\n<p>还记得 <code>create()</code> 时 <code>attestation</code> 可选的三个值吗？这个值会决定认证器最终使用哪种方式进行证明。复习一下：</p>\n<ul>\n<li>\n<code>none</code>：大部分情况下认证器会选择不进行证明，部分认证器会进行自证明。此时 AAGUID 会被 0 填充</li>\n<li>\n<code>indirect</code>：认证器会试图通过替换 AAGUID 和选择合适的证明方式来进行匿名证明，具体方式由认证器选择</li>\n<li>\n<code>direct</code>：认证器会提供最直接的证明信息</li>\n</ul>\n<p>注意，大部分情况下，当认证器需要向依赖方证明自己可信时需要提供认证器公钥，<strong>这会触发浏览器提示，只有用户同意后认证器才会进行证明，否则认证器将不提供证明。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\" alt=\"浏览器提示\" width=\"446\" height=\"283\" class=\"aligncenter size-full wp-image-2217\"></a>\n<blockquote><p>为什么浏览器会说“安全密钥的品牌和型号”？事实上，为了避免用户通过认证器证书被跨依赖方追踪，FIDO 要求使用相同认证器证书的认证器的数量不能少于 100,000。于是大部分认证器厂商会选择<strong>让同一型号的认证器共用同一份证书。</strong>因此，浏览器的会询问用户是否同意“查看安全密钥的品牌和型号”。</p></blockquote>\n<blockquote><p>Android Safety Net 不会向用户询问是否同意，而是会静默进行证明。</p></blockquote>\n<p>当证明不为空时，依赖方收到数据后根据 <code>attestationObject.fmt</code> 的不同，需要选择不同的验证方式来验证认证器的可信情况。出于篇幅原因，这里我们不会讨论每一种 <code>fmt</code> 的验证方式，更多信息你可以查阅 <a href=\"https://www.w3.org/TR/webauthn/#defined-attestation-formats\">W3C 文档</a>。</p>\n<p>当 <code>fmt</code> 为 <code>packed</code> 时，<code>attestationObject.attStmt</code> 可能会有三种格式：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">// 自证明\r\n{\r\n    alg, // 算法\r\n    sig // 签名\r\n}\r\n// 基础或证明 CA 证明\r\n{\r\n    alg,\r\n    sig,\r\n    x5c // X.509 证书链\r\n}\r\n// 椭圆曲线证明\r\n{\r\n    alg,\r\n    sig,\r\n    ecdaaKeyId // ECDAA-Issuer 公钥标识符\r\n}</pre>\n<p>此时，依赖方需要检查证书符合预期格式并检查证书是否在可信链上。首先，如果证明中既没有 <code>ecdaaKeyId</code> 也没有 <code>x5c</code>，就说明这个证明使用的是自证明，只需使用认证器提供的公钥验证即可；如果有 <code>x5c</code>，那么就需要验证 <code>x5c</code> 中的证书是否在可信链上。将 <code>x5c</code> 中的每个证书以 Base64 编码，按 64 个字符切开，并在头尾加上 <code>-----BEGIN CERTIFICATE-----</code> 和 <code>-----END CERTIFICATE-----</code>就能得到一个证书字符串了。之后，依赖方需要验证证书是否可信。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function base64ToPem(b64cert){\r\n    let pemcert = '';\r\n    for(let i = 0; i \n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>至于 <code>ecdaaKeyId</code>，由于目前应用较少，处理方法可能需要你另寻资料了。检查证书的具体步骤已经超出了本文的范围，具体可以查阅<a href=\"https://medium.com/@herrjemand/verifying-fido2-packed-attestation-a067a9b2facd\">这篇文章</a>（英文）。</p>\n<blockquote><p>你可以在 <a href=\"https://fidoalliance.org/metadata/\">FIDO Metadata Service</a> 找到各大厂商认证器的可信证书链。</p></blockquote>\n<p>当在 Android 上调起 WebAuthn 时，大部分情况下 <code>fmt</code> 将会为 <code>safety-net</code>。此时 <code>attestationObject.attStmt</code> 的结构会是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    ver: \"200616037\",\r\n    response: {\r\n        type: \"Buffer\",\r\n        data: [101, 121, 74, 104, 98, ..., 115, 104, 104, 82, 65]\r\n    }\r\n}</pre>\n<p>此时，<code>clientDataJSON</code> 中还会出现 <code>androidPackageName</code> 键，值是调起 WebAuthn 验证的应用的包名，如 Chrome 就是 \"com.android.chrome\"。</p>\n<p>在这个证明中，<code>data</code> 其实是一个 JWT 字符串，我们可以将它编码为字符串并将其按照 JWT 进行解码（别忘了验证 JWT 签名）。最终我们会得到一个类似这样的 Payload：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    nonce: \"0QAurN4F9wik6GEkblDJhGuf4kuaqZn5zaaxlvD1hlA=\",\r\n    timestampMs: 1584950686460,\r\n    apkPackageName: \"com.google.android.gms\",\r\n    apkDigestSha256: \"2BQHno+bmWWwdLUYylS8HLt5ESJzci3nt2uui71ojyE=\",\r\n    ctsProfileMatch: true,\r\n    apkCertificateDigestSha256: [\r\n        \"8P1sW0EPicslw7UzRsiXL64w+O50Ed+RBICtay2g24M=\"\r\n    ],\r\n    basicIntegrity: true,\r\n    evaluationType: \"BASIC\"\r\n}</pre>\n<p>其中包含了有关设备状态的一些信息。比如说，如果 <code>ctsProfileMatch</code> 为 <code>false</code>，那么该设备很有可能被 root 了。对于高安全要求的场景，我们可以视情况进行验证。</p>\n<p>同时我们可以在 JWT Header 中验证证明的有效性。我们应该能取得这样的 Header：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    alg: \"RS256\",\r\n    x5c: [\r\n        \"MIIFkzCCBHugAwIBAgIR...uvlyjOwAzXuMu7M+PWRc\",\r\n        \"MIIESjCCAzKgAwIBAgIN...UK4v4ZUN80atnZz1yg==\"\r\n    ]\r\n}</pre>\n<p>这里的结构就和上方的 <code>x5c</code> 验证类似了。具体步骤可以参考<a href=\"https://medium.com/@herrjemand/verifying-fido2-safetynet-attestation-bd261ce1978d\">这篇文章</a>（英文）。</p>\n<p>其他所有格式的验证方式也都可以在<a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">这篇文章</a>（英文）中找到。<span></span></p>\n<h2>无用户名登录</h2>\n<p>认证器已经代替了密码，可是这还不够！在进行第一因素认证（即使用 WebAuthn 登录）时，我们还是需要输入用户名，然后才能进行身份认证。懒惰是第一生产力，我们能不能不输入用户名就进行身份认证呢？实际上，大部分认证器都允许我们无用户名登录。<strong>而这一特性的核心就是 Resident Key 客户端密钥驻留。</strong></p>\n<p>你可以思考一下，为什么普通的 WebAuthn 为什么不能实现无用户名登录？事实上，大部分认证器为了实现无限对公私钥，会将私钥通过 Key Warp 等技术加密后包含在凭证 ID 中发送给依赖方，这样认证器本身就不用存储任何信息。不过，这就导致需要身份认证时，依赖方必须通过用户名找到对应的凭证 ID，将其发送给认证器以供其算出私钥。</p>\n<blockquote><p>Yubikey 实现了一个基于 HMAC 的算法，认证器可以在私钥不离开认证器的前提下（常规的 Key Warp 算法中实际上私钥离开了认证器）通过一些输入和凭证 ID 重新计算私钥，你可以阅读<a href=\"https://www.yubico.com/blog/yubicos-u2f-key-wrapping/\">这篇文章</a>了解更多。</p></blockquote>\n<blockquote><p>客户端通过凭证 ID 查找对应认证器的算法根据系统的不同是不同的。通常凭证 ID 中会包含认证器信息，因此系统可以通过凭证 ID 找到对应的认证器。</p></blockquote>\n<p>要避免输入用户名，我们可以要求认证器将私钥在自己的内存中也存储一份。这样，依赖方无需提供凭证 ID，认证器就可以通过依赖方 ID 找到所需的私钥并签名公钥。以下是具体流程：</p>\n<p>注册时：</p>\n<ol>\n<li>依赖方请求新建凭证，同时要求启用客户端密钥</li>\n<li>认证器生成一对公私钥，并将私钥存储在永久内存中且与依赖方 ID 及用户 ID 绑定，随后将公钥发送给依赖方以供存储</li>\n<li>依赖方将用户 ID 即公钥与用户绑定</li>\n</ol><p>验证时：</p>\n<ol>\n<li>依赖方请求验证，但不必提供除依赖方 ID 以外的更多信息</li>\n<li>用户选择认证器</li>\n<li>认证器根据依赖方 ID 找到对应私钥</li>\n<li>如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录</li>\n<li>确定私钥后，认证器签名挑战并将其返回，同时返回用户 ID</li>\n<li>依赖方通过用户 ID 找到对应用户并用对应公钥检查签名，正确则允许对应用户登录</li>\n</ol><blockquote><p>可以看到，这个特性同时要求认证器存储用户 ID，即上面提到过的 <code>userHandle</code>。依赖方需要根据此信息找到对应用户，因此不支持 <code>userHandle</code> 的 U2F 认证器无法进行无用户名登录。</p></blockquote>\n<blockquote><p>如之前所说，<strong>认证器能永久存储的私钥数量是有限的</strong>，因此只应在真正需要无用户名登录的时候启用此特性。</p></blockquote>\n<blockquote><p>目前暂时没有办法检测认证器是否支持客户端密钥驻留，因此在无用户名验证失败时应 fallback 至常规的 WebAuthn 验证，即向用户询问用户名。</p></blockquote>\n<p>现在让我们来看看如何实现这一特性吧。首先，调用 <code>navigator.credentials.create()</code> 时我们需要注意两个参数：<code>requireResidentKey</code> 必须为 <code>true</code>，<code>userVerification</code> 必须为 \"required\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"5-6\">navigator.credentials.create({\r\n    publicKey: {\r\n        ...\r\n        authenticatorSelection: {\r\n            requireResidentKey: true,\r\n            userVerification: \"required\"\r\n            ...\r\n        },\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Windows Hello <strong>似乎</strong>会存储所有已注册的凭据，因此无论是否指定 <code>requireResidentKey</code>，你都可以通过 Windows Hello 进行无用户名登录。</p></blockquote>\n<p>随后，浏览器会询问用户是否允许认证器存储私钥。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\" alt=\"浏览器提示\" width=\"445\" height=\"285\" class=\"aligncenter size-full wp-image-2208\"></a>\n<p>如果用户同意，认证器会存储私钥，并和普通的 WebAuthn 一样返回信息。不过，依赖方收到数据之后，只需将公钥、用户 ID 与用户关联起来，而不必再将凭证 ID 与用户关联起来。至此注册完成。</p>\n<p>之后，在用户请求登录时，无需再向依赖方提供用户名。同时在传入 <code>navigator.credentials.get()</code> 的参数中也有两个需要注意：<code>userVerification</code> 必须为 \"required\"，同时 <code>allowCredentials</code> 必须为空。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"4-5\">navigator.credentials.get({\r\n    publicKey: {\r\n        ...\r\n        userVerification: \"required\",\r\n        allowCredentials: [],\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Android 暂不支持无用户名验证，空的 <code>allowCredentials</code> 会导致浏览器返回 <code>NotSupportedError</code> 错误。</p></blockquote>\n<p>此时，认证器会根据依赖方 ID 找到对应的私钥。如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录。用户选择后，认证器就会使用对应的私钥签名挑战并将其返回。此时，<code>userHandle</code> 一定不为空。</p>\n<p>依赖方收到数据后，需要将 <code>userHandle</code> 作为用户 ID 找到对应的用户，并使用对应的公钥验证签名。如果验证成功，则认为对应的用户身份认证成功，依赖方可以允许其登录。至此验证结束。</p>\n<blockquote><p>有的时候你可能会需要清除认证器中的密钥。绝大多数认证器都提供了对应的软件以供清除存储的密钥，但大部分情况下这会重置整个认证器，这意味着相关认证器此前的所有凭证均会失效。因此建议不要将日常使用的认证器作为开发测试用的认证器。</p></blockquote>\n<h2>从 U2F 认证迁移</h2>\n<p>如果你的服务此前提供了 U2F 第二因素认证，你可能会希望在将依赖方从 U2F 升级到 WebAuthn 时用户此前注册的 U2F 认证器仍然可用而无需重新注册。由于 WebAuthn 向后兼容 U2F 设备，用户是可以继续使用原有的 U2F 认证器的。不过，由于 WebAuthn 的依赖方 ID 与 U2F 的 <code>appid</code> 并不一定相同，你需要将原有的 U2F <code>appid</code> 随 WebAuthn 流程一起传递给认证器，认证器才能使用正确的私钥进行响应。</p>\n<p>要实现这一点，我们只需要在注册及认证仪式中使用 WebAuthn 的 <code>appid</code> 扩展。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    appid: \"https://example.com\" //U2F appid\r\n}</pre>\n<p>此时认证器便可以得到正确的私钥，之后的流程与正常情况一致；依赖方除了正常的 WebAuthn 流程外，不需要再做任何其它操作。</p>\n<h2>拓展阅读</h2>\n<p>我们的 WebAuthn 之旅到这里就真的结束了。不过，你仍然可以自行探究，了解更多。<strong>本文只是一个粗浅的使用指南</strong>，而被称为“Web 身份认证的未来”的 WebAuthn 的深层还要很多细节值得我们挖掘学习，不过本文不会再继续讨论了。</p>\n<p>如果你想了解更多关于 WebAuthn 的信息，最好的方法是直接阅读 <a href=\"https://www.w3.org/TR/webauthn\">W3C 规范</a>。此外，Yubico 也提供了不错的 <a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn 文档</a>。</p>\n<p>要了解更多认证器存储凭证的信息，你可以阅读<a href=\"https://duo.com/labs/tech-notes/how-security-keys-store-credentials\">这篇文章</a>（英文）。</p>\n<p>如果你想了解更多 Android Safety Net 是怎样运作的，可以观看<a href=\"https://youtu.be/8lv_9mydrjg\">这个视频</a>，并通过 <a href=\"https://developer.android.com/training/safetynet/attestation\">Google 的文档</a>了解 Android Safety Net 的更多信息。</p>\n<p>如果你想方便地调试 WebAuthn，<a href=\"https://webauthn.me/\">webauthn.me</a> 提供了一个非常直观方便的<a href=\"https://webauthn.me/debugger\">调试器</a>。</p>\n<h1>参考资料</h1>\n<p><a href=\"https://www.w3.org/TR/webauthn\">WebAuthn Level 1 规范 - W3C</a><br><a href=\"https://github.com/w3c/webauthn\">WebAuthn Level 2 草案 - W3C</a><br><a href=\"https://blog.techbridge.cc/2019/08/17/webauthn-intro/\">一起来了解Web Authentication - TechBridge 技术共笔部落格</a><br><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\">Introduction to WebAuthn API - Medium</a><br><a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">WebAuthn/FIDO2: Verifying responses - Medium</a><br><a href=\"https://obeta.me/posts/2019-03-01/WebAuthn%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8\">WebAuthn介绍与使用 - obeta</a><br><a href=\"https://webauthn.io/\">webauthn.io</a><br><a href=\"https://webauthn.guide/\">webauthn.guide</a><br><a href=\"https://webauthn.me/\">webauthn.me</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion\">Attestation and Assertion - MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Authentication_API\">Web Authentication API - MDN</a>（顺便翻译了一半）<br><a href=\"https://fidoalliance.org/fido-technotes-the-truth-about-attestation/\">FIDO TechNotes: The Truth about Attestation - FIDO Alliance</a><br><a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn Developer Guide - Yubico</a><br><a href=\"https://en.wikipedia.org/wiki/WebAuthn\">WebAuthn - Wikipedia</a><br><a href=\"https://techcommunity.microsoft.com/t5/identity-standards-blog/all-about-fido2-ctap2-and-webauthn/ba-p/288910\">All about FIDO2, CTAP2 and WebAuthn - Microsoft Tech Community</a><br><a href=\"https://webauthn-doc.spomky-labs.com/\">Webauthn Framework</a><br><a href=\"https://zhuanlan.zhihu.com/p/25279015\">如何开发支持 FIDO U2F 登录的网站 - 知乎专栏</a><br></p></pre>\n","link":"https://flyhigher.top/develop/2160.html"},{"title":"NLP 找门：用朴素贝叶斯进行文本分类","date":"2020-01-29 11:39:58","description":"\n<blockquote>\n<p>有一天，神收到了一封垃圾邮件，于是世界上就有了朴素贝叶斯算法。</p>\n<footer>——我瞎编的</footer>\n</blockquote>\n<p>为什么这篇文章的标题是 NLP 找门呢？因为如果你看完了这篇文章，你就可以<strong>准备入门</strong>自然语言处理 (<strong>N</strong>atural <strong>L</strong>anguage <strong>P</strong>rocessing) 了。我会把这篇文章当作一篇彻彻底底的 NLP 入门文章来写，尽量避免“专业高端”词汇和“全是奇怪符号”的式子，这样<strong>只要你有高中数学基础</strong>，就能毫无压力地看完这篇文章，学会使用朴素贝叶斯分类算法分类文本。</p>\n<p>让我们开始吧。</p>\n<h1>所以，啥是朴素贝叶斯？</h1>\n<p>简单来说，朴素贝叶斯 (Naïve Bayes) <strong>是一个简单但高效的分类算法</strong>，在进行不复杂的文本分类时高效且拥有不低的准确度，判断垃圾邮件就是用朴素贝叶斯进行文本分类的一个经典例子。当然朴素贝叶斯分类不仅能用在 NLP 中，在许多分类问题中朴素贝叶斯也有非常好的效果，但我们今天只关注它在 NLP 中的应用。</p>\n<p>要了解朴素贝叶斯，我们要先来了解一下贝叶斯定理。</p>\n<blockquote>\n<p>每增加一个数学公式都会使读者减半。</p>\n<footer>——霍金</footer>\n</blockquote>\n<p>那么，就让我们先来看看贝叶斯定理的公式吧（笑</p>\n<p>$$P(A|B) = \\frac{P(AB)}{P(B)} = \\frac{P(B|A)P(A)}{P(B)}$$</p>\n<p>其实还是很简单的，运用高中的条件概率知识就能理解。本质上，贝叶斯定理给出了一种方法，使得我们可以在 \\(P(A|B)\\) 和 \\(P(B|A)\\) 之间互相转换，因为通常情况下它们是不一样的。</p>\n<p>要更好地理解，请考虑这样一个例子：</p>\n<blockquote><p>假设有一个学校图书馆，图书管理员正为找不到某本书而发愁。已知老师有 70% 的意愿借走这本书，而是学生的意愿是 30%，这个学校的师生比例是 1:10，那么借走这本书的人是老师的概率有多大？</p></blockquote>\n<p>设学校总人数为 \\(T\\)，我们可以很容易地写出这样的一个式子：</p>\n<p>$$\\begin{align} P &amp; = \\frac{T\\cdot\\frac{1}{11}\\cdot 70\\%}{T\\cdot\\frac{1}{11}\\cdot 70\\%+T\\cdot\\frac{10}{11}\\cdot 30\\%} \\\\ &amp; = \\frac{70\\%}{70\\%+10\\times30\\%} \\\\ &amp; = \\frac{7}{37} \\end{align}$$</p>\n<p>这就是贝叶斯定理了！等等，你可能会挠挠头，这哪里是贝叶斯了？别急，如果我们把最上面的式子换个字母的话...</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>在这里，\\(H\\) 指 Hypothesis，即假设，而 \\(E\\) 指 Evidence，即证据。这样，这个式子就很好理解了，在我们上面的例子里，借走书是证据，那么 \\(P(E)\\) 就是某个人选择借走这本书的概率；这个人是老师是假设，那么这个人是老师的概率是 \\(P(H)\\)。<strong>注意这里的概率指在学校中抽一个人是老师的概率，并不是“在借走书的前提下”这个人是老师的概率</strong>，而“在借走书的前提下”这个人是老师的概率应该是 \\(P(H|E)\\)，也正是我们要求的概率。同样地，而“这个人是老师”的前提下借走书的概率就是 \\(P(E|H)\\) 了。</p>\n<p>那么再来看看上面我们凭小学知识就列出的计算式，如果把里面的具体数据换成概率来表示的话，这个式子就会变成...</p>\n<p>$$P(H|E) = \\frac{T\\cdot P(E|H)P(H)}{T\\cdot P(E|H)P(H) + T\\cdot P(E|\\neg H)P(\\neg H)}$$</p>\n<p>好吧，这里解释一下，\\(\\neg\\) 符号表示“非”，所以 \\(P(E|\\neg H)\\) 表示在“这个人不是老师”的前提下借走书的概率。而 \\(T\\cdot P(E|H)P(H)\\) + \\(T\\cdot P(E|\\neg H)P(\\neg H)\\)，即“可能借走书的老师的数量 + 可能借走书的学生的数量”，就是“可能借走书的人的数量”了，也就是 \\(T\\cdot P(E)\\)。上下消去 \\(T\\)，我们就能得到上面的式子了。</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>这就是贝叶斯了定理。如果你还是不太清楚，可以去看看 3Blue1Brown 的<a href=\"https://www.bilibili.com/video/av84799361\">这个视频</a>，图形化的讲解会清晰很多。</p>\n<p>这里我要提一下这个式子里各部分的专有名称了（“专业高端”词汇警告），你可以不记住，直接看后面。</p>\n<ul>\n<li>\\(P(H|E)\\) 叫做 \\(H\\) 的<strong>后验概率</strong>，反之亦然</li>\n<li>\\(P(H)\\) 叫做 \\(H\\) 的<strong>先验概率</strong>，反之亦然</li>\n<li>特别地，我们把 \\(P(E|H)\\) 称作<strong>“似然值”</strong>，即 likelihood</li>\n</ul>\n<p>那什么是朴素贝叶斯呢？按上面所说的，朴素贝叶斯是一种分类算法。简单来说，朴素贝叶斯将一个对象的各个特征考虑为互相独立，然后根据这些特征的概率的乘积来判断对象所属的分类。基本原理如下：</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)} \\propto P(E|H)P(H) = P(H)\\prod_{i}P(W_i|H)$$</p>\n<p>在这里，\\(W_i\\) 指某一对象的第 \\(i\\) 个特征，对于文本分类来说，这就是一段文本中的某个单词。</p>\n<p>朴素贝叶斯之所以“朴素”，是因为它要求<strong>各个特征间是独立的</strong>，在文本分类中也就是各个单词之间互不干扰。虽然思路简单的代价是适用范围变窄，不过由于这样的简化在很多情况下已经足够了，因此实际上朴素贝叶斯的应用范围非常广。<del>你看朴素贝叶斯 <strong>N</strong>aïve <strong>B</strong>ayes 的缩写都是 NB 了，能不厉害吗（逃</del></p>\n<h1>那么，咋分类啊</h1>\n<p>看来你这下完全听懂了呢（笑），是时候看看如何在 NLP 中应用朴素贝叶斯了。和上面一样，我们用一个具体的例子来说明。我们的目标是让电脑学会分类美国共和党和民主党的演讲稿，由于两个党派的演讲风格不同，所以这样的分类在理论上是可行的。</p>\n<div class=\"wp-block-file\">\n<a href=\"https://acdn.flyhigher.top/nlp/material.zip\" download>material.zip</a><a href=\"https://acdn.flyhigher.top/nlp/material.zip\" class=\"wp-block-file__button\" download>下载</a>\n</div>\n<p>上面我们要用到的数据集，你可以下载下来一起动手玩一玩。先说一下数据集的数据结构吧，压缩包里有两个文件，<code>train.txt</code> 将会被当作训练数据集，而 <code>test.txt</code> 则会作为训练结束后的验证数据集。两个文本文件里数据的结构是类似的，就像这样：</p>\n<pre class=\"EnlighterJSRAW\">BLUE WELL I AM SO HONORED AND PERSONALLY UNKNOWNWORD TO BE HERE...\r\nRED THANK YOU . THIS IS QUITE AN INSTITUTION . IT'S GOOD TO BE...</pre>\n<p>每行都是一篇演讲稿，每行的第一个单词指明了这篇演讲稿所属的党派，<code>RED</code> 指共和党，而 <code>BLUE</code> 指民主党。所有单词和符号都已经被转为大写并由空格分隔方便处理。<code>train.txt</code> 有共和党演讲稿和民主党演讲稿各 23 篇，<code>test.txt</code> 有 6 篇共和党演讲稿，12 篇民主党演讲稿。</p>\n<p>明白了？那我们就开始吧。</p>\n<h2>捋捋思路</h2>\n<p>首先，我们需要考虑如何在文本分类中应用朴素贝叶斯。很简单，按朴素贝叶斯的思路，<strong>计算每个词在某一分类下的出现概率，然后将某篇文章的所有词的概率相乘，再乘以该分类的先验概率，就可以得到某篇文章在某一分类下的概率。</strong></p>\n<p>$$P(Class|Article) = P(Class)\\prod_{i}P(Word_i|Class)$$</p>\n<p>各个分类概率都计算完成后，概率最高的那个分类就是这篇文章可能所属的分类。这个思路的核心就是用词决定了文本风格，文本的不同类别用词会有差异，只要能量化这些差异就可以分类文本。在我们的例子中，我们可以从 <code>train.txt</code> 中统计各个词汇的出现情况，然后用 <code>test.txt</code> 中的数据按上面的算法验证我们算法的准确性。</p>\n<p>这个思路很简单也很清晰，但还有一些问题需要解决。<strong>第一，有的时候，我们的测试数据集中可能会出现一个在训练数据集中没有出现过的词语。这个时候，朴素贝叶斯的计算结果会是 0。</strong>如果我们把 0 乘进式子中，那就别想得到正常的结果了。所以，我们还需要对计算某一单词在某一分类中的式子稍加改进。使用拉普拉斯平滑，就可以避免出现概率为 0 的情况。别被名字吓到，拉普拉斯平滑是一种非常简单的平滑方法：在分子上 +1，在分母上加整个取值范围，这样就可以给整个分式加上非常微小的偏移，避免出现 0。</p>\n<p>$$\\begin{align} P(Word_i|Class) &amp; = \\frac{Word_iCountInClass}{AllWordCountInClass} \\\\ &amp; \\approx \\frac{Word_iCountInClass + 1}{AllWordCountInClass + UniqueWordCount} \\end{align}$$</p>\n<p><strong>第二，对于长文本，大部分词语在某一分类中的出现概率是远小于 1 的，加上长文本词汇量大，往往概率相乘的结果会非常小。</strong>受限于计算机处理浮点数的原理，精确处理这么小的数字是很麻烦的。幸好，运用一些简单的数学知识就可以将其转化为更精确的表达，<strong>那就是取对数。</strong></p>\n<p>首先，将概率计算结果取对数并不影响我们的计算结果。因为取对数是一个单调递增的操作，而我们计算概率只是为了排序选择概率最高的分类，因此取对数是不影响我们排序的。而把多项式取对数，等于把多项式的每一项取对数后相加。所以我们有：</p>\n<p>$$\\lg{\\Big(P(Class)\\prod_{i}P(Word_i|Class)\\Big)} = \\lg{P(Class)} + \\sum_i\\lg{P(Word_i|Class)}$$</p>\n<p>大部分情况下，在每一次取对数的时候，要取对数的数字的大小，即 \\(P(Word_i|Class)\\) 尚还在计算机能处理的范围内，<strong>因此我们可以放心地使用取对数的方法</strong>，避免计算机精度不够影响结果。</p>\n<p><strong>第三就是在某些情况下，可能会有部分词语干扰计算结果</strong>，如 and, is 这类的被大量使用的中性词。如果希望得到更好的结果，我们可以维护一个停用词表，在计算时排除停用词即可。或者，我们可以在计算完每个单词的出现数量后，排除数量最多的前 \\(N\\) 个单词，避免这些单词过多地影响计算。</p>\n<h2>写点代码</h2>\n<p>现在我们终于可以开始实战，写点代码了。我会用简单的 Python 来表达思路。好了，理一理思绪，第一步我们要做的，是统计训练数据集中的用词情况。具体来说，根据上面的思考，我们需要统计的有：</p>\n<ul>\n<li>每个单词在各分类中出现的数量</li>\n<li>各分类中的不重复词数量</li>\n</ul>\n<p>用 Python 简单表示如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\"># 读入数据过程略...\r\ndata_raw = \"读入的数据\".split('\\n') # 按行分隔\r\ndata_blue = []\r\ndata_red = []\r\nword_count_blue = {}\r\nword_count_red = {}\r\n\r\nfor line_data in data_raw:\r\n    word_list = line_data.split(\" \") # 分隔单词\r\n    if word_list[0] == \"BLUE\":\r\n        for i in range(1,len(word_list)):\r\n            if not is_excluded(word_list[i]): # 判断是否为停用词\r\n                data_blue.append(word_list[i])\r\n                # 统计单词出现次数\r\n                word_count_blue.setdefault(word_list[i], 0)\r\n                word_count_blue[word_list[i]] += 1\r\n    elif word_list[0] == \"RED\":\r\n        # Class = red 时同理...\r\n\r\n#统计非重复词\r\nunique_words_blue = list(set(data_blue))\r\nunique_words_red = list(set(data_red))</pre>\n<p>训练过程到这里就结束了，计算机已经知道了各政党演讲的用词习惯。很简单吧？接下来我们就要使用测试数据集来测试准确度了。<strong>这里开始就涉及到朴素贝叶斯的计算了</strong>，可能会稍微复杂一点点。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">import math\r\n#读入测试数据过程略...\r\ntest_data_raw = \"读入的数据\".split('\\n') # 按行分隔\r\ntest_data = []\r\n\r\nfor line_data in test_data_raw:\r\n    if line_data[0] == \"BLUE\":\r\n        content_data = line_data.split(\" \").pop(0)\r\n        test_data.append({\"class\": \"blue\", \"content\": content_data})\r\n    elif line_data[0] == 'RED':\r\n        # ...\r\n\r\nfor line_data in test_data:\r\n    posibility_blue = 0\r\n    for word in line_data[\"content\"]:\r\n        # 计算各单词概率，取对数后相加，使用了拉普拉斯平滑\r\n        if word in word_count_blue:\r\n            posibility_blue += math.log((word_count_blue[word]+1)/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n        else:\r\n            posibility_blue += math.log(1/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n    # 最后加上该分类概率的对数\r\n    posibility_blue += math.log(len(data_blue)/(len(data_blue)+len(data_red)))\r\n\r\n    # 计算 Red 同理...</pre>\n<p>计算完成后，我们就得到每篇演讲稿在各分类下的概率了。之后，简单的比较就能得出推断的分类：如果 \\(P(Red|Article)\\) 大于 \\(P(Blue|Article)\\)，那么这篇演讲稿就更可能是共和党的演讲稿，反之则是民主党的演讲稿。</p>\n<p>很好理解吧？那么这么简单的思路，准确性怎么样呢？对于我们的例子，这是我设置了个别停用词后的结果：</p>\n<pre class=\"EnlighterJSRAW\">+-----+-------+--------------+--------------+-------+-------+\r\n|   ID|  Class|        P(Red)|       P(Blue)|  Guess| Status|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|    1|   Blue|  -23204.68377|  -22998.67066|   Blue|      √|\r\n|    2|   Blue|  -16438.44625|  -16137.48257|   Blue|      √|\r\n|    3|   Blue|  -33468.81214|  -32567.61801|   Blue|      √|\r\n|    4|   Blue|    -8606.2193|   -8601.50426|   Blue|      √|\r\n|    5|   Blue|  -12430.97436|  -11935.70662|   Blue|      √|\r\n|    6|   Blue|  -44033.02883|  -43877.55367|   Blue|      √|\r\n|    7|   Blue|   -16947.2851|  -16758.57542|   Blue|      √|\r\n|    8|   Blue|  -26957.26997|  -26889.62444|   Blue|      √|\r\n|    9|   Blue|  -27503.73985|  -27249.21828|   Blue|      √|\r\n|   10|   Blue|   -20528.4457|   -19991.1248|   Blue|      √|\r\n|   11|   Blue|  -20337.96493|  -19860.12831|   Blue|      √|\r\n|   12|   Blue|  -28409.28489|  -28118.98017|   Blue|      √|\r\n|   13|    Red|  -13756.01015|  -14488.11751|    Red|      √|\r\n|   14|    Red|  -17221.22732|  -17710.15936|    Red|      √|\r\n|   15|    Red|  -17397.45136|  -17899.98659|    Red|      √|\r\n|   16|    Red|  -10724.69095|  -11092.77837|    Red|      √|\r\n|   17|    Red|  -10402.40027|  -10859.48681|    Red|      √|\r\n|   18|    Red|   -9371.53792|    -9669.6769|    Red|      √|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|                                      Total: 18/18, 100.0% |\r\n+-----------------------------------------------------------+</pre>\n<p><strong>100% 的准确率哦！</strong>事实上，对于我们的这个例子，就算不设置停用词，我们仍能达到 100% 的分类准确率。朴素贝叶斯分类的确很 NB 呢。</p>\n<h1>更进一步</h1>\n<p>我们的探索到这里就结束了，但如果你有兴趣，完全可以继续探索下去。我们的例子是一个非常简化的例子，在实际情况中，还有很多问题需要解决。比如，对于中文及类似语言，不存在拉丁语系的天然分词结构，而朴素贝叶斯的文本分类是基于单词的，那么<strong>中文的分词就会是个问题；</strong>再比如，对于朴素贝叶斯分类来说，<strong>词语之间的顺序是不影响分类结果的</strong>，但这就会导致“今天心情很好，但昨天不好”和“昨天心情很好，但今天不好”在朴素贝叶斯看来是一样的，要想获得更好的结果，我们必须<strong>考虑词语的顺序。</strong></p>\n<p>这些问题，今天我们就不再深究了，但你可以自己探索。比如，引入思路同样很简洁的马尔科夫链，我们就可以让计算机学会考虑词语间的顺序，不过那就会是另一个话题了。</p>\n","link":"https://flyhigher.top/develop/1989.html"},{"title":"MDx 中增强页面可访问性的细节","date":"2020-01-25 16:45:04","description":"\n<blockquote><p>这篇文章本来是打算发在 <a href=\"https://mdxblog.flyhigher.top/\">MDx Blog</a> 的，不过写到后来发现这篇文章相对来说还是有价值的，于是就将这篇文章转移到了无垠，MDx Blog 则不再发表这篇文章。</p></blockquote>\n<p>从 MDx 开发之初，增强页面的可访问性就被列为了一个重要目标。从 HTML 语义化，到 ARIA 地标，再到 <code>prefers-reduced-motion</code>，随着浏览器对于增强页面可访问性的支持功能越来越多，MDx 也在不断地更新，让更多的人都能毫无困难地浏览、查看由 MDx 渲染的网页。本文会详细说明一些 MDx 中增强页面可访问性的细节，<strong>如果你希望增强自己开发的网页的可访问性，本文可能会对你有所帮助。</strong></p>\n<h1>基础性增强</h1>\n<p>增强可访问性，最重要也是最基础的一点就是 HTML 语义化。通过使用 HTML 5 语义化标签和 ARIA Role 标签，我们可以很方便地<strong>将整个网页在语义上分为几部分，而这将有效地改善屏幕阅读器对网页的分析质量，使视力障碍用户更好地浏览网页。</strong></p>\n<h2>HTML 语义化</h2>\n<p><strong>HTML 语义化属于增强页面可访问性的基础中的基础。</strong>通过使用语义化的 HTML 标签，我们可以方便地为网页中的各部分标记功能而不影响页面样式。随着符合 HTML 5 的现代化网页成为主流，语义化标签已被很大一部分网站所支持，我也不过多赘述了。就举几个常用的“地标性”标签吧：</p>\n<ul>\n<li>\n<code>header</code> 标签标记页眉，默认样式同 <code>div</code>，不要把它和 <code>head</code> 搞混了</li>\n<li>\n<code>main</code> 标签标记页面的主要内容，默认样式同 <code>div</code>\n</li>\n<li>\n<code>article</code> 标签标记文章（在 HTML 5 中它指任何独立或可复用的文本），默认样式同 <code>div</code>\n</li>\n<li>\n<code>footer</code> 标签标记页脚，默认样式同 <code>div</code>\n</li>\n<li>\n<code>nav</code> 标签标记页面导航栏区域，默认样式同 <code>div</code>\n</li>\n<li>\n<code>aside</code> 标签标记侧栏，默认样式同 <code>div</code>\n</li>\n<li>\n<code>section</code> 标签标记“一组内容”，你可以把它看作是划定网页中一块区域的通用标签，默认样式同 <code>div</code>\n</li>\n</ul>\n<p>只要用这些标签替代 <code>div</code> 而不是无脑使用 <code>div</code> 就能提高页面的可访问性。MDx 使用了这些标签来增强页面的可访问性。</p>\n<h2>下一步，ARIA</h2>\n<p>有的时候，出于一些原因，我们没法使用语义化的 HTML 标签，或者没有合适的语义化标签来标记内容，这时候<strong>我们就需要使用 ARIA (Accessible Rich Internet Applications，可访问的富互联网应用)。</strong>ARIA 的基础用法很简单，只要在相应元素上加上 <code>role</code> 属性指定该元素的功能即可。下面是一个简单的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;div role=\"navigation\"&gt;\r\n  &lt;ul&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page A&lt;/a&gt;&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page B&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page C&lt;/a&gt;&lt;/li&gt;\r\n  &lt;/ul&gt;\r\n&lt;/div&gt;</pre>\n<p>通过 <code>role=\"navigation\"</code>，我们把一个 <code>div</code> 标记为了导航栏区域。实际上，对屏幕阅读器来说，这和 <code>nav</code> 标签在语义上是一致的。上一节中的例子都可以分别用以下 ARIA Role 表示：</p>\n<ul>\n<li><code>role=\"heading\"</code></li>\n<li><code>role=\"main\"</code></li>\n<li><code>role=\"article\"</code></li>\n<li><code>role=\"contentinfo\"</code></li>\n<li><code>role=\"navigation\"</code></li>\n<li><code>role=\"complementary\"</code></li>\n<li><code>role=\"region\"</code></li>\n</ul>\n<p>除此以外，MDx 还使用了 <code>role=\"banner\"</code> 和 <code>role=\"search\"</code> 来分别标记页面中的顶部栏和搜索表单。另外，<strong>有的时候 <code>role</code> 属性还需配合 <code>aria-*</code> 属性一同使用</strong>，具体规则比较复杂，我就不在这里赘述了，具体可参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">WAI-ARIA Roles - MDN</a>。</p>\n<h1>媒体查询来帮忙</h1>\n<p>CSS 的媒体查询其实是一个非常强大的特性，<strong>妥善利用其中的一些特性，我们可以在网页外观上大大增强网页的可访问性。</strong>除了已经烂大街的“对浏览器窗口大小”响应的媒体查询，我会介绍 3 个很少有网站充分利用的媒体查询。</p>\n<h2>print</h2>\n<p><code>print</code> 媒体查询其实已经“历史悠久”了，<strong>只要使用 <code>@media print {...}</code> 就可以创建只在打印页面时生效的样式。</strong>通过这种方式，我们可以让页面在打印时应用一套为打印优化的样式，增强页面在物理纸张上的可访问性。</p>\n<blockquote><p>维基百科是对打印样式做了单独适配的著名例子。</p></blockquote>\n<p><strong>由于在打印的情况下，页面已经离开了“可交互”的范围，还有分页这种在屏幕中无需考虑的问题，要让页面在物理纸张上仍能被轻松地阅读，我们需要做一些特殊的适配。</strong>直接来看一个例子吧。以下是 MDx 针对打印情况进行的一些特殊优化，样式的具体理由已经写在了注释中。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media print {\r\n    /*隐藏不必要的元素*/\r\n    header, .mdx-ad-after-article, .mdx-ad-in-article, .mdx-post-money, .page-footer-nav, .mdx-same-posts, .spanout button, .mdui-drawer, .mdui-overlay, .mdui-menu, .mdx-share-img-dialog, .mdx-share-wechat-dialog {\r\n        display: none!important;\r\n    }\r\n\r\n    /*使用下划线标记链接*/\r\n    article a {\r\n        text-decoration: underline!important;\r\n    }\r\n    /*由于纸张不可交互，在链接后显示链接到的 URL*/\r\n    article a::after {\r\n        content: \"(\" attr(href) \")\";\r\n    }\r\n\r\n    /*强制白底黑字*/\r\n    html &gt; body {\r\n        background-color: white!important;\r\n    }\r\n    article p {\r\n        color: rgba(0,0,0,.8)!important;\r\n    }\r\n\r\n    /*对于纸张上的长文章，衬线字体拥有更好的可读性。以下字体列表来自 fonts.css*/\r\n    article {\r\n        font: 13pt Georgia, \"Nimbus Roman No9 L\", \"Songti SC\", \"Noto Serif CJK SC\", \"Source Han Serif SC\", \"Source Han Serif CN\", STSong, \"AR PL New Sung\", \"AR PL SungtiL GB\", NSimSun, SimSun, \"TW\\-Sung\", \"WenQuanYi Bitmap Song\", \"AR PL UMing CN\", \"AR PL UMing HK\", \"AR PL UMing TW\", \"AR PL UMing TW MBE\", PMingLiU, MingLiU, serif!important;\r\n    }\r\n\r\n    /*除部分元素外，禁止在元素内部分页*/\r\n    * {\r\n        page-break-inside: avoid;\r\n    }\r\n    article p, article a, #comments, article {\r\n        page-break-inside: auto;\r\n    }\r\n}</pre>\n<p>MDx 自 1.9.3 版本起已经包含了对文章页的打印样式优化。可以很容易地看出，优化后的样式在物理纸张上将更容易阅读。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\" alt=\"\" width=\"1345\" height=\"1602\" class=\"aligncenter size-full wp-image-1959\"></a>\n<h2>prefers-color-scheme</h2>\n<p><code>prefers-color-scheme</code> 是最近才被浏览器广泛支持的一个媒体查询，但它的功能却很强大：<strong>响应系统级黑暗模式。</strong>这样，我们可以在开启黑暗模式的系统中让网页具有更好的可读性。不过由于这个媒体查询直到最近才被广泛支持，因此大部分网站对此并没有进行适配。</p>\n<blockquote><p>一些适配这一特性的网站：少数派、微信公众平台（文章页）等。</p></blockquote>\n<p>通过像这样的媒体查询，我们可以在系统启用黑暗模式时让页面实时响应：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    body {\r\n        background-color: #212121;\r\n        color: rgba(255, 255, 255, .7);\r\n    }\r\n}</pre>\n<p><code>prefers-color-scheme</code> 一共有 3 个可能值：<code>no-preference</code>, <code>light</code> 和 <code>dark</code>。你也可以不像上面的例子那样默认使用亮色样式并在黑暗模式下启用黑暗样式，而可以反过来将黑暗样式作为默认，用亮色样式覆盖。在不支持的浏览器上将会显示默认样式（即媒体查询不会生效）。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<h2>prefers-reduced-motion</h2>\n<p>看名字就猜得出，<code>prefers-reduced-motion</code> 是和 <code>prefers-color-scheme</code> 师出同门的媒体查询。因此，和 <code>prefers-color-scheme</code> 一样，它也是在最近才获得了浏览器的广泛支持。它的作用也很强大：<strong>响应系统的“减弱动态效果”模式。</strong>这对某些不喜欢甚至无法接受动画的用户可能很有帮助。要知道，对有些用户来说这甚至是医疗上的必要。使用如下的媒体查询，我们可以在系统启用减弱动态效果模式时让页面实时响应，减弱动画：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-reduced-motion: reduce) {\r\n    /*只是一个示例，实际情况中可以保留一些淡入淡出效果*/\r\n    * {\r\n        transition: all 0s!important;\r\n        transform: none!important;\r\n    }\r\n}</pre>\n<p><code>prefers-reduced-motion</code> 只有 2 个可能值：<code>no-preference</code> 和 <code>reduce</code>，在不支持的浏览器上该媒体查询不会生效。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\" alt=\"\" width=\"792\" height=\"515\" class=\"aligncenter size-full wp-image-1962\"></a>\n<h1>黑暗模式适配</h1>\n<p>黑暗模式可不是简单地切换到黑底白字这么简单。<strong>单纯地使用黑底白字会导致页面元素之间对比度过高，文字刺眼，反而降低了页面的可访问性。</strong>我在下面总结了几条应用在了 MDx 中的黑暗模式优化规则和 Google 推荐的优化规则：</p>\n<p><strong>一是避免黑底白字。</strong>黑底白字看起来真的很难受，事实上，深灰和浅灰是黑暗模式最好的配色。比较下方例子里的两段文本，毫无疑问深灰色背景和浅灰色文字搭配的样式的可读性要比黑底白字高很多。（p.s. 有时候这条规则在白底黑字时也适用）</p>\n<p><strong>二是更改部分元素的亮度和对比度以增强可读性。</strong>你可能已经注意到了，下面优化的例子里标题文字的颜色改变了。很明显，未优化的黑暗模式中标题可读性不如优化的版本。在实际中，我们通常可以通过 CSS 滤镜来实现这一更改。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    h1 {\r\n        /*反相颜色后再将色相旋转 180 度，使亮度反相*/\r\n        filter: invert(1) hue-rotate(180deg);\r\n    }\r\n}</pre>\n<p><strong>三是避免让图片过亮。</strong>未经处理的图片通常会导致过高的对比度，降低可读性。在 MDx 中，我选择降低图片的亮度来避免图片刺眼，而 Google 的建议则是使图片灰度，不过这会影响图片的整体观感。无论是哪一种方案，都可以使用 CSS 滤镜来轻松实现。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    img { \r\n        /*MDx 方案*/\r\n        filter: brightness(.8);\r\n        /*Google 方案*/\r\n        filter: grayscale(.5);\r\n    }\r\n}</pre>\n<div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是未优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是经过优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n</div>\n<h1>其他细节</h1>\n<p>还有一些细节，虽然简单，但不可或缺。我把一部分没有在上文提到的 MDx 中的细节列在了这里。</p>\n<p><strong>一是允许页面缩放。</strong>在开发响应式页面时，很多网站会在页面头部添加这样一个 <code>meta</code>：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"&gt;</pre>\n<p>这样的 <code>meta</code> 设定了页面的宽度，却也固定了页面的缩放比例，用户难以手动放大网页。<strong>这样的设置对一部分视力障碍用户非常不友好</strong>，以至于苹果决定在自家的浏览器上忽略禁止缩放的 <code>meta</code>。按照 Google 的推荐，如果你在 MDx 设置中启用了“允许页面缩放”，那么 MDx 会输出这样的 <code>meta</code> 标签，允许页面进行五倍以内的缩放：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=5\"&gt;</pre>\n<p><strong>尽管很多时候放大页面会导致页面结构被破坏，但这大大增强了页面的可访问性，利大于弊。</strong>因此，在 MDx 中，“允许页面缩放”是默认启用的。</p>\n<p><strong>二是在跨设备阅读时同步阅读记录。</strong>这属于 MDx 的“元老级”功能之一。注意到页面右上角的那个“在其他设备上继续阅读”的按钮了吗？如果你滚动页面后重新点击它，你会发现二维码发生变化了。通过在二维码中记录阅读进度，用户在扫描二维码切换设备阅读时，MDx 在新设备上会自动滚动到和原设备上一致的位置——好吧，目前基于百分比的算法在某些情况下可能不太准，但我已经设计了一个更复杂但更精确的阅读进度记录算法，之后就会更新到 MDx 中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\" alt=\"\" width=\"1000\" height=\"574\" class=\"aligncenter size-full wp-image-1976\"></a>\n<p><strong>三是避免 Web 字体阻塞渲染。</strong>如果你在页面中使用了 Web 字体，在字体加载完成之前，浏览器可能不会渲染任何文本，这就导致用户可能需要等待一段时间才能开始浏览网页。Google 推荐使用 <code>font-display: swap;</code> 来向浏览器指定网页的 Web 字体渲染策略。这一规则会提供一个比较短的等待周期，如果在这段时间内 Web 字体没有完成加载，那么浏览器会以 fallback 字体渲染文本。任意时刻一旦 Web 字体完成渲染，浏览器就会使用 Web 字体重新渲染文本。这在大多数情况下都能满足可访问性的需求。</p>\n<p><strong>四是确保 html 元素具有合适的 <code>lang</code> 属性。</strong>这一属性声明了页面的主要语言，浏览器可以据此调整渲染策略，或者触发自动翻译；屏幕阅读器也能更好地阅读网页。</p>\n<p><strong>五是确保页面主要内容在丢失/禁用了 Javascript 甚至 CSS 的情况下仍然可用。</strong>作为一个以内容为主的网站，MDx 在禁用了 Javascript 的情况下页面主要内容仍然可用。这不只是为了 SEO，更是为了保证页面的可访问性。的确，目前的情况下，如果开启了 Lazyload，MDx 在禁用 Javascript 的情况下图片的确无法显示，但我会在后续版本中尽可能的优化这一问题。</p>\n<h1>附录：媒体查询开发技巧</h1>\n<p>有的时候，光有 CSS 响应媒体查询还不够，我们可能需要在 Javascript 中实时响应媒体查询。用如下代码就可以很简单地响应媒体查询：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">let mql = window.matchMedia(\"(prefers-reduced-motion: reduce)\");\r\nmql.addListener(handleMediaChange);\r\n\r\n//在添加监听后先调用一次，获得当前查询结果\r\nhandleMediaChange(mql);\r\n\r\nfunction handleMediaChange(mql){\r\n    if(mql.matches){\r\n        //查询匹配\r\n    }else{\r\n        //查询不匹配\r\n    }\r\n}</pre>\n<p>在开发上述媒体查询的过程中，我们需要频繁地切换系统的相应模式或者调出打印窗口。<strong>实际上，Chrome 提供了更简单的调试方法：</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1946\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\" alt=\"\" width=\"723\" height=\"681\"></a>\n<p>只要在这里更改模式，相关媒体查询就能实时生效。这不会影响其他标签页，在关闭开发者工具之后也会自动恢复系统设置。</p>\n","link":"https://flyhigher.top/develop/1912.html"},{"title":"MDx Blog 现已随 MDx 1.9.5 发布","date":"2020-01-22 17:54:11","description":"<p>随着 MDx 发布 1.9.5 更新，<a href=\"https://mdxblog.flyhigher.top/\" rel=\"noopener noreferrer\" target=\"_blank\">MDx Blog</a> 现已建立。我将会在 MDx Blog 中分享一些开发故事并发布 MDx 更新日志。</p>","link":"https://flyhigher.top/diary/1905.html"},{"title":"GitHub 2019 统计无垠版","date":"2020-01-12 13:02:00","description":"\n<h1>缘起</h1>\n<p>2019 年底，我突发奇想想要自己统计一番 GitHub 上存储库的一些信息。尽管 GitHub 有自己的<a href=\"https://octoverse.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">年度统计</a>，我还是想试着自己爬取一下，说不定能挖出什么有意思的信息，何况这是我第一次有机会处理比较大量的数据，也算是一种学习的过程吧。于是花了一下午写了个简单的爬虫（时间都花在增加 Rate Limit 上了...），然后扔在了两台服务器上开始跑（GitHub  API 真是好文明）。</p>\n<p>从 2019.11.21 3 时到 2020.1.12 24 时的 52 天 21 小时内，我的爬虫一共爬取了<strong>与 2,024,705 个用户有关<sup>*</sup>的 14,651,923 个公共存储库的基础信息</strong>，平均每秒爬取 3.2 个存储库。据 GitHub 的官方数据计算，我爬取了大约 15% 的存储库信息，但由于封禁库和私有库的数量未知，我暂时无法确定我爬取的存储库占公共库的比例。同时由于存储库数量较多，基本可以认为爬取到的样本在时间尺度上已经足够随机，可以通过统计得出一般结论。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\" alt=\"\" width=\"700\" height=\"606\" class=\"aligncenter size-full wp-image-1892\"></a>\n<p>爬到自己了，合影.jpg</p>\n<p>那么下面就来看看统计出来的一些结果吧。爬虫的技术细节和数据集下载放在文末。</p>\n<p>* 指这些用户拥有至少一个库</p>\n<h1>统计信息</h1>\n<p><strong>以下统计结果均基于已放于文末的数据集。</strong>由于爬虫爬取的时间跨度长，加上我并没有完整爬取 GitHub 所有存储库，因此我<strong>不能保证以下统计结果符合真实情况</strong>，各位可以下载数据集或自行爬取进行验证。</p>\n<h2>一些数据</h2>\n<div>\n<div>\n<div>\n<span>3,120,930</span><br>总爬取用户数</div>\n<div>\n<span>44.7%</span><br>的存储库创建<br>自 Fork</div>\n<div>\n<span>6.59%</span><br>的账户被删除或<br>封禁<sup>1</sup>\n</div>\n<div>\n<span>23,913</span><br>单用户拥有最大<br>库数量<sup>2</sup>\n</div>\n</div>\n</div>\n<p><sup>1</sup> 基于用户 ID 规律合理推断<br><sup>2</sup> 统计范围仅限于当前数据集</p>\n<p>比较出乎我意料的是创建自 Fork 的存储库的占比。我预估这样的存储库占比不会太低，但没有想到能接近一半。此外单用户拥有最大库数量也大大超出了我的预期，<a href=\"https://github.com/pombredanne\" rel=\"noopener noreferrer\" target=\"_blank\">pombredanne</a> 这个用户名下拥有将近 24k 的存储库，不过绝大多数都是 Fork 来的，在情理之中。此外<strong>这个数据集中</strong>拥有最多存储库的账户其实是一个组织 <a href=\"https://github.com/gitpan\" rel=\"noopener noreferrer\" target=\"_blank\">gitpan</a>，这个组织拥有 36,377 个存储库。</p>\n<h2>语言</h2>\n<p><canvas></canvas><br>\n首先必须要说明的是，在这个榜单中我<strong>排除了 HTML 和 CSS</strong>，因为在严格意义上它们不属于“编程语言”。如果把它们计算进来的话，分别有 640,368 个和 361,425 个存储库的主要语言分别是 HTML 和 CSS，这样在这份榜单中它们可以排到第 6 和 第 10 名。JavaScript 毫无疑问获得第一，第二名 Python 的热度则和 JavaScript 相差将近一半。<strong>此外还有 2,448,486 个存储库未能识别出语言，占比 16.7%。</strong>在上面的榜单之外，与机器学习和数据科学相关的语言还有 Jupyter Notebook 排名第 13，R 排名 20，Julia 排名 43。</p>\n<p>说实话这份排名和 GitHub 官方的排名<strong>差别很大</strong>，除了前三名，后面的基本都不太一样。我的排名统计结果完全基于 GitHub 对于存储库的主要语言识别，加上我的存储库数据不完整，和官方的数据不同是很正常的，可以做一个参考，但大概率还是官方排名更加准确。</p>\n<h2>许可证</h2>\n<p><canvas></canvas></p>\n<p>自 GitHub 推出许可证功能以来，拥有许可证的存储库比例升升降降，却始终没有超过一半。<strong>选择一个合适的许可证对项目的良好发展真的很有帮助</strong>，要了解如何选择合适的许可证，请参阅<a href=\"https://www.runoob.com/w3cnote/open-source-license.html\" rel=\"noopener noreferrer\" target=\"_blank\">这篇文章</a>。</p>\n<p><canvas></canvas></p>\n<p>对于拥有许可证的存储库，MIT<del> 麻省理工许可证 </del>总是占比最大的；第二则是 Apache-2.0 许可证。此外，WTFPL 许可证也挤入了前 15 名。</p>\n<h2>星标</h2>\n<p><canvas></canvas><br>\nStar 数量毫无疑问是一个存储库受欢迎程度的体现，而 Star 数高的项目基本上大家都了解过。<strong>截至爬取结束时间</strong>，GitHub 中 Star 数最多的库是 <a href=\"https://github.com/freeCodeCamp/freeCodeCamp\" rel=\"noopener noreferrer\" target=\"_blank\">freeCodeCamp</a> <del>非常完美的驼峰命名法</del>，其次则是著名项目 <a href=\"https://github.com/996icu/996.ICU\" rel=\"noopener noreferrer\" target=\"_blank\">996.ICU</a>。<a href=\"https://github.com/vuejs/vue\" rel=\"noopener noreferrer\" target=\"_blank\">Vue</a> 现在的 Star 数已经稳压 <a href=\"https://github.com/facebook/react\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> 一头，Vue YES! 此外 <a href=\"https://github.com/sindresorhus/awesome\" rel=\"noopener noreferrer\" target=\"_blank\">awesome</a> 也挤进第七名。<br><canvas></canvas><br>\n由于 Star 需要时间积累，新项目的 Star 数量很可能是比不过老项目的，这就会导致有实力的新项目无法出现在榜单中。因此我还统计了日均 Star 数，试图通过日均 Star 数来反映项目受欢迎的程度。<strong>由于正热门的项目会比老牌热门项目有优势，这一项的统计范围是 2020-01-01 之前的所有存储库。</strong>996.ICU 和 freeCodeCamp 再次出现在前 10 名，而最近的热门项目 <a href=\"https://github.com/wenyan-lang/wenyan\" rel=\"noopener noreferrer\" target=\"_blank\">wenyan</a> 则飙升至第 2 名。此外还有 <a href=\"https://github.com/menzi11/BullshitGenerator\" rel=\"noopener noreferrer\" target=\"_blank\">BullshitGenerator</a>，即最近热门的“狗屁不通文章生成器”和 <a href=\"https://github.com/evil-huawei/evil-huawei\" rel=\"noopener noreferrer\" target=\"_blank\">evil-huawei</a> 分列第 3 和第 5 名。<br><canvas></canvas><br>\n说实话这个曲线<strong>比我预估的陡多了。</strong>你可能已经注意到了，这个图表的横轴不是均匀缩放的，实际上曲线要比看起来陡很多。同时受爬取方式的影响，GitHub 中 Star 数较少的存储库数量远比我爬取到的多。也就是说，<strong>实际情况下曲线远比这个图表上的陡。</strong>拿点 Star 不容易啊。</p>\n<h2>名称</h2>\n<p><canvas></canvas><br>\n终于知道了原来存储库的名称是有长度限制的...尽管最长有 100 位，<strong>大部分人还是喜欢 8 位长的存储库名。</strong>此外 1 位长的名称也比我预估的要多一些。举几个存储库名称长度为 100 的例子吧。</p>\n<ul>\n<li>testing-something-elsetesting-something-elsetesting-something-elsetesting-something-elsetesting-some</li>\n<li>acts_as_validated_config_so_app_will_not_run_in_random_situation_and_qa_gays_will_not_cry_to_you_whe</li>\n<li>............................................________-....................................-.---......</li>\n<li>----------------------------------------------------------------------------------------------------</li>\n<li>nyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyan</li>\n</ul>\n<p>...创造力有够丰富的。</p>\n<p><canvas></canvas></p>\n<p>最近 GitHub 上有一种奇怪的风气，那就是建立 Awesome 合集<del>骗 Star</del>。看起来 Awesome 存储库满地都是，甚至还出现了关于 Awesome 的 Awesome 合集这种迷惑行为。于是我统计了一下，<del>还好，</del>占比<del>才</del> 0.5% 不到<del>，Awesomer 们任重而道远呐</del>。</p>\n<p><canvas></canvas></p>\n<p>尽管要在 github.io 上托管网站，存储库不一定要以 .github.io 结尾，但我还是统计了一下。拥有这类存储库的用户比我预想的要少一些，看来还有很多人没有完全发挥 GitHub 的完整实力啊<del>（比如我 Doge）</del>。同时<strong>这类存储库在所有存储库中占比 1.12%</strong>，看起来不多<del>，不过至少比 Awesome 多</del>。<br><canvas></canvas><br>\n看得出来 GitHub 对于用户名长度的限制是 1-40 位。用户名最短的 27 位占据了 <code>A-Z</code> 外加 <code>-</code> 的所有可能，而用户名最长的则是一个组织 <a href=\"https://github.com/UOIT-RESEARCH-database-information-group\" rel=\"noopener noreferrer\" target=\"_blank\">UOIT-RESEARCH-database-information-group</a>。不知道是巧合还是某种规律，<strong>最受欢迎的用户名长度和存储库名称长度一样，都是 8</strong>，有点意思。</p>\n<h2>创建时间</h2>\n<p><canvas></canvas><br>\n由于我并没有完整爬取所有存储库，我只能以相对值来统计每月新增存储库数量的变化趋势。<strong>在这个图表中，我将 2017-09 的数据设为了 100%。</strong>你一定一眼就能注意到 2017 年 6,7,8 月的“一柱擎天”。<del datetime=\"2020-02-05T09:18:30+00:00\">我第一次看到这个数据的时候的确愣了一下，不过就着这条新闻看就能明白为什么了：<strong>2017 年 6 月微软收购 GitHub。</strong></del></p>\n<blockquote><p>重新确认了一下，微软收购 GitHub 比这个高峰晚了一年，目前我对这个高峰没有什么很好的解释，如果你有什么思路的话欢迎评论。</p></blockquote>\n<p><strong>需要注意的是这张图表中我排除了 Fork 存储库</strong>，因为 Fork 存储库在 API 中的创建时间是原始存储库的时间，会影响整体趋势。此外，GitHub 中还有一个创建于 2007 年 10 月 29 日的存储库，那就是 <code>id: 1</code> 的...</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"mojombo\" data-mdxgithubp=\"grit\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/mojombo/grit\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>而它的创建者正是 GitHub 的创始人之一 Tom Preston-Werner。</p>\n<h1>一些有趣的结果</h1>\n<p>当初打算自己爬的目的之一就是想看看能不能挖出什么有意思的信息，结果真的有一些不挖不知道的信息。</p>\n<h2>奇怪的存储库</h2>\n<p>在爬取到的所有存储库中，<strong>有 3 个存储库是“无主”的</strong>，即它们的 owner 属性为空。这三个存储库的基本信息如下。</p>\n<div class=\"mdui-table-fluid mdui-table-hoverable\"><table class=\"mdui-table\">\n<thead><tr>\n<th>ID</th>\n<th>名称</th>\n<th>Forked</th>\n<th>Star</th>\n<th>语言</th>\n<th>许可证</th>\n<th>创建于</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>72385291</td>\n<td>vscode-redprl</td>\n<td>否</td>\n<td>10</td>\n<td>TypeScript</td>\n<td>apache-2.0</td>\n<td>2016-10-31 08:50:01</td>\n</tr>\n<tr>\n<td>181218346</td>\n<td>electron-sys</td>\n<td>否</td>\n<td>10</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-14 03:20:56</td>\n</tr>\n<tr>\n<td>181391880</td>\n<td>node-sys</td>\n<td>否</td>\n<td>6</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-15 09:33:08</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong>更奇怪的是这三个存储库“无主”的情况还不一样。</strong>第一个存储库可以通过 <code>/repositories</code> 这个 GitHub API 找到， <a href=\"https://api.github.com/repositories?since=72385290\" target=\"_blank\" rel=\"noopener noreferrer\">这个链接</a>中的第一个存储库就是它；而其余两个存储库甚至无法在 <code>/repositories</code> API 中找到。不过就算能在 API 中找到第一个存储库，它的 <code>html_url</code>，即 <code>https://github.com//vscode-redprl</code> 仍然是不可访问的。这可能是 GitHub 早期的一个 Bug 导致的，不过我仍然对爬虫是如何找到这三个存储库的以及这些 Stars 是哪里来的感到好奇。</p>\n<h2>奇怪的用户名</h2>\n<p>在爬虫爬了一段时间以后，API 中突然开始出现大量的以 fdp 开头的 18 位乱码作为用户名的用户。这些用户拥有的存储库和 starred 的存储库都为 0，而他们的 <code>html_url</code> 为 404。以下是几个例子。</p>\n<ul>\n<li>fdpEpolGCEdQX4ZlRJ</li>\n<li>fdp8XaVrdtmDZnO5pR</li>\n<li>fdp8XRAGnwAOkTr2Ya</li>\n</ul>\n<p>由于我的爬虫并没有超过 Rate Limit，所以我排除了这是污染数据的可能。我怀疑这可能是某种 Bot 账户，于是一边更新爬虫过滤掉了这些用户，一边给 GitHub 支持发邮件问了具体情况。过了两天 GitHub 回复我说这些是<strong>被自动判为可疑进而被封禁的用户</strong>（原话是 they have been flagged by our automated measures for detecting suspicious behavior）。<del>想到我正在疯狂爬取 GitHub，突然害怕.webp</del></p>\n<p>行吧。</p>\n<h1>技术细节</h1>\n<p>爬虫使用 Python3 编写，数据库使用 MySQL。爬虫共使用了 4 个 API Token，在两台服务器上分布式爬取。爬取思路为：</p>\n<ol>\n<li>通过 <code>/users</code> API 遍历用户，每个请求最多获取 30 个用户信息</li>\n<li>循环 30 个用户，分别获取 <code>/users/&lt;user_name&gt;/starred</code> 和 <code>/users/&lt;user_name&gt;/repos</code> API 中的存储库信息，每个请求最多获取 100 个存储库信息，超过 100 个的分页获取</li>\n<li>提取存储库信息，插入数据库。对于已存在的存储库，更新数据</li>\n<li>获取下 30 个用户信息</li>\n</ol>\n<p>由于爬取过程中我多次调整了爬虫逻辑，爬虫爬取到的用户 ID 区间并非连续的，具体区间为1-839586, 14800001-14885493 及 28965251-31161101。</p>\n<h1>免责声明</h1>\n<p>本站会尽可能地提供准确信息，但本站不对此文章中信息的准确性和即时性及带来的任何影响负责。</p>\n<p>本站不代表 GitHub 官方，本文仅供学习之用，请不要将本文内容直接用于任何商业项目中。</p>\n<h1>数据集下载</h1>\n<p>导出的 SQL 文件大约为 1.38GB，全部放在了 GitHub 上（在危险的边缘试探.webp</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"github-analysis-2019\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/github-analysis-2019\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>此外我也提供了 MEGA 下载，链接<a href=\"https://mega.nz/#F!juxm3A6T!7Vwpzi82W1OFrqTLu1A1pQ\">在这里</a>。</p>\n","link":"https://flyhigher.top/develop/1564.html"},{"title":"Milkice 跨年红包解谜 Writeup 及无垠跨年红包解谜答案","date":"2020-01-02 04:29:19","description":"\n<blockquote><p><del>又到了水文章的时间呢</del></p></blockquote>\n<p>先说明一下，这篇文章原本不是在计划中的，而原来说好的「在路上的两篇」文章<del>绝对不会咕</del>。我自己的红包答案本来打算直接塞在年度总结里的，结果发现稍微有些长，再加上我还花了一些时间解了<a href=\"https://milkice.me/\">奶冰</a>的红包解谜游戏，就打算把两个解谜过程放在一起单独写一篇文章。<del>真是个水文章的好理由</del>（被打死</p>\n<h1>奶<del> 子 </del>冰的红包</h1>\n<p>奶冰的红包题目比我的难多了，所以让我们先从难的开始吧。首先看一下<a href=\"https://milkice.me/2019/12/31/2019-summary/\">题目</a>：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1524\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\" alt=\"\" width=\"746\" height=\"410\"></a>\n<p>入口是 <code>happy.2020.milkice.me</code>，扔到浏览器里面表示找不到 IP，那么大概率就是 DNS 的 TXT 记录了，查一下得到 <code>nb2hi4dthixs63ljnrvwsy3ffzwwkl3tivrvezluomxxg5dsmvqw2ltqmnqxa3th</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1525\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\" alt=\"\" width=\"896\" height=\"278\"></a>\n<p>第一眼没看出来是什么编码，直觉是 BaseXX 系列的编码，加上提示“不只有 Base64”，可以推断出是 Base32，转大写解码得到 <code>https://milkice.me/sEcRets/stream.pcapng</code>。是个 URL，下载得到一个 Wireshark 文件，打开一看是和某 USB 设备的通讯抓包。<del>不会做，不做了。</del></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1526\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\" alt=\"\" width=\"1500\" height=\"813\"></a>\n<p>奶冰提示我“Google 上搜得到”，结合第二条提示搜索“wacom pcapng”找到了<a href=\"https://blogs.tunelko.com/2017/02/05/bitsctf-tom-and-jerry-50-points/\">这篇文章</a>（<del>这™就是答案啊</del>）。看起来是一样的套路，即通过解析数据得到数位板上画的内容，于是按文章的思路筛选出数位板发给主机的数据，导出，然后再用 tshark 导出文本数据。本来我想直接用文章中的 POC 的，结果折腾半天因为源的蜜汁原因库没装上，于是按文章中给出的数据结构自己写了段代码，分别导出 X、Y 轴数据扔进 Excel 画散点图。（<del>别问我为什么用 Excel，因为我手边没有更好的工具了</del>）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1528\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\" alt=\"\" width=\"1280\" height=\"530\"></a>\n<p><span>翻车现场之一</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1539\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\" alt=\"\" width=\"1000\" height=\"286\"></a>\n<p><span>懵逼奶冰.webp</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1533\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\" alt=\"\" width=\"1500\" height=\"462\"></a>\n<p>看得出有手写文字，不过是上下颠倒的，翻转图片得 <code>https://milkice.me/2020/uso.zip</code>。是个 zip，下载打开一看，有密码。<del>不会解，不做了。</del> 第一反应是暴力解密码，但是暴力跑了 15 分钟还是没有跑出来。暴力太不优雅了，肯定不是正确思路，但奶冰什么都不肯说了。不过在这时我终于发现第一个红包口令码就藏在压缩包的注释中，Get。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1544\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\" alt=\"\" width=\"806\" height=\"593\"></a>\n<p>然而题还没解完，回去看提示，看到提供了 osu 谱面下载，于是打算不管怎么样先下载来看看。然而 osu 谱面下载要登录，只好又花了几分钟找到第三方站点，成功下载。这时候可以注意到 uso.zip 里有个同名文件（432314 Mike Greene - Bill Nye the Science Guy Theme Song (Chinese Intro).osz），可以联想到是明文攻击。好吧，上 ARCHPR，十秒解出。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1530\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\" alt=\"\" width=\"462\" height=\"643\"></a>\n<p><span>现场还原.jpg</span></p>\n<p>.osz 文件并不是明文，猜测是压缩包（和 .pptx 一个思路嘛），于是改后缀 .zip 顺利打开。然后红包口令码就藏在奶冰的 .osu 文件中了，由提示可知是明文，打开即可得到。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1542\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\" alt=\"\" width=\"457\" height=\"255\"></a>\n<h1>我的红包</h1>\n<p>相比起来<a href=\"https://flyhigher.top/diary/1464.html\">我的题目</a>就简单很多了嘛...三天时间一共发出了 25 个红包，包括一位重复领取的🌚，比前几年还是多了一些的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\" alt=\"\" width=\"500\" height=\"306\" class=\"aligncenter size-full wp-image-1554\"></a>\n<p><span>这位同学以后请不要多次领取🌚</span></p>\n<p>那么来看看答案吧。</p>\n<h2>第一阶段</h2>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>首先观察字符串，可以发现 <code>.</code> <code>/</code> <code>_</code> 等一些 ASCII 字符原样留在了字符串中，而其他字符被由 <code>=</code> 和十六进制构成的某种编码所替代。如果你正好有所了解，你应该能认出这是 Quoted-printable 编码，这是一种常用于邮件中的编码，可以用<a href=\"https://mothereff.in/quoted-printable\">这个页面</a>解码。如果你不了解，你也应该可以发现这种编码和 URL 编码非常相似。如果你把 <code>=</code> 替换为 <code>%</code>，那么你就可以用各种方法顺利地把它按 URL 编码来进行解码，最后可以得到 <code>αхtоn.іm/соdе_оf_2020_⒈mρз</code>。这个字符串里大部分字符都不是 ASCII 字符，只是长得像而已。根据第一个提示“全是 ASCII 字符”，按样子把字符串用 ASCII 字符抄一遍，可以得到最终 URL 为 <code>axton.im/code_of_2020_1.mp3</code>。</p>\n<h2>第二阶段</h2>\n<p>下载音频，可以听出音频是经过某种处理的白噪音。白噪音的特点是各频段的功率都均匀分布，在白噪音上做文章，很容易就可以联想到线索藏在频谱中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1534\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\" alt=\"\" width=\"1200\" height=\"719\"></a>\n<p>频谱被处理成了 24x3 的网格，结合第二条提示“24x3，横向读取”可以推断出是将频谱当作二进制读取，得到 <code>01111001 01110010 01100011 00101110 01101101 01100101 00101111 00110010 00110000</code>，转为 ASCII 字符可得 <code>yrc.me/20</code>。</p>\n<h2>第三阶段</h2>\n<p>打开上一步得到的页面，提示要求输入十位数密码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1536\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\" alt=\"\" width=\"663\" height=\"460\"></a>\n<p>如果你在上一步注意到了这个音频文件奇怪的属性，你可以反应过来这里的密码就是 <code>2000202020</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1537\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\" alt=\"\" width=\"421\" height=\"651\"></a>\n<p>如果你没有注意到，查看页面代码可以看到一条注释 <code>&lt;!-- Tips: the attribute of the audio --&gt;</code> 将你引导向音频文件的属性。输入密码，解锁即可进入下一步。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1535\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\" alt=\"\" width=\"397\" height=\"223\"></a>\n<h2>第四阶段</h2>\n<p>可以看到是一张图片，内容为“<del>.JPG</del>”和“.ZIP”。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-1532\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n<p>和去年一样的套路，下载图片，将后缀名改为 .zip 然后打开，可以看到 README.txt。</p>\n<h2>最后一步</h2>\n<p>查看 README.txt 的内容，可以了解到需要去 🤔.axton.cc 获取红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1538\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\" alt=\"\" width=\"1131\" height=\"278\"></a>\n<p>扔到浏览器里会出现奶冰同款找不到 IP，于是可以联想到 TXT 记录。唯一的问题是 🤔 这个 Emoji 需要如何处理。域名使用 Punycode 将 Unicode 字符转换为 ASCII 字符，特点是以 <code>xn--</code> 开头。如果你把上面这个域名扔进浏览器，你会发现它变成了 <code>xn--wp9h.axton.cc</code>。然后查询 TXT 记录，即可得到红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1527\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\" alt=\"\" width=\"804\" height=\"557\"></a>\n","link":"https://flyhigher.top/develop/1519.html"},{"title":"无垠 2019 年度总结","date":"2019-12-29 12:25:52","description":"\n<p>又是时间飞快的一年...写 2018 总结的情景似乎还在眼前，转眼居然已经到 2019 年末了。</p>\n<p>2019 年，发生了太多事情，包括真的转折了人生的高考，这也导致我博客更新的不多（难以置信居然才更了两篇...），不过两篇技术性文章已经在路上了，可以期待一下。</p>\n<p>2019 年我也学了不少东西（单指技术方面），比如终于认真学了 Vue（但是还要练手）。书买了一大堆，看完的倒是没几本orz</p>\n<p>呼，好吧，是时候回顾一下充满坎坷的这一年了。2019 年还剩下最后两天，希望 2020 年，我能做得更好。</p>\n<h1>一些数据</h1>\n<p>照惯例先来看看一些数据吧。今年是统计系统完整统计了的第二年，终于可以和去年的数据比较一下了。以下数据的统计范围是 2019年1月1日0时至 2019年12月29日20时。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 26,901 (<span>+4%</span>)，年 PV 76,583 (<span>+3%</span>)，日均 UV 73.7，平均停留时间 5分13秒 (<span>-13.8%</span>)，平均跳出率 53% (<span>+20.5%</span>)。一年有效文章数 2 (<span>-50%</span>)，新增评论 439 条。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\" alt=\"\" width=\"1000\" height=\"1143\" class=\"aligncenter size-full wp-image-1511\"></a>\n<p>有趣的是今年文章数腰斩，访问数反而小有提升。<del>如果我哪天不更新了，访问数是不是可以无限大呢？</del></p>\n<p>今年博客最大的改动就是把整体风格切换到了 Material Design 2（当然这是 <a href=\"https://flyhigher.top/develop/788.html\">MDx</a> 中的可选功能，给自己打个广告2333），此外还有比较失败的 WebP 改造计划，因为和缓存冲突已经回滚了。<a href=\"https://flyhigher.top/develop/1245.html\">ABS 系统</a>进展不大，主要是真的没有太多时间，还是要再学习一个。</p>\n<h2>个人主页</h2>\n<p>虽然个人主页的 TODO List 列了老长，但今年完全没有更新，也没有推广，从今年 8 月底开始还莫名被某墙认证了，直到 11 月底才恢复，于是今年总访问量比去年少了很多，</p>\n<p>有多少呢？这么少：总 UV 2,141 (<span>-65.9%</span>)，总 PV 2,744 (<span>-66.6%</span>)，日均 UV 6 (<span>-65.9%</span>)，平均停留时间 62秒 (<span>+19.2%</span>)。主要来源是知乎和 V2EX，还有一些甚至是从微信来的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\" alt=\"\" width=\"1000\" height=\"1103\" class=\"aligncenter size-full wp-image-1512\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 8 次，新增 171 commits，2 种语言的翻译，Star 数增加了 175，现有 408。感谢所有人的支持，尤其是 <a href=\"https://github.com/Sn0bzy\" rel=\"noopener noreferrer\" target=\"_blank\">Hasan CAN</a>, <a href=\"https://github.com/yechs\" rel=\"noopener noreferrer\" target=\"_blank\">Ye Shu</a>, <a href=\"https://github.com/StarryLeo\" rel=\"noopener noreferrer\" target=\"_blank\">StarryLeo</a>, <a href=\"https://github.com/DCTewi\" rel=\"noopener noreferrer\" target=\"_blank\">冻葱Tewi</a>, <a href=\"https://github.com/syfxlin\" rel=\"noopener noreferrer\" target=\"_blank\">Otstar Lin</a> 等为 MDx 做出了不小贡献的你们。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：<a href=\"https://flyhigher.top/photograph/1309.html\">上手</a> DJI OSMO Pocket</li>\n<li>四月：最后一次参加浙江省普通高中学业水平考试</li>\n<li>五月：MDx 喜提 300 Stars</li>\n<li>六月：高考 <del>炸了，差亿点点上浙大</del>\n</li>\n<li>六月：入手了 Oneplus 7 Pro</li>\n<li>六月：和同学一起去成都重庆旅行</li>\n<li>六月：第一次近距离感受到地震</li>\n<li>六月：<a href=\"https://flyhigher.top/diary/1411.html\">入手</a>了一台雷蛇灵刃 15，目前是主力机</li>\n<li>七月：参与组织 THE Hack 2019 活动</li>\n<li>七月：面基了 <a href=\"https://itroy.cc/\" rel=\"noopener noreferrer\" target=\"_blank\">Tory</a>, Bie Shi 和 <a href=\"https://oxz.me/\" rel=\"noopener noreferrer\" target=\"_blank\">FHYunCai</a>\n</li>\n<li>八月：一个人去厦门武汉转了一圈，拍了自己的第一个 Vlog</li>\n<li>八月：入手了一个 Kindle Paperwhite 4，没有泡面可以压，于是用来看英文小说了</li>\n<li>八月：加入 TEDxNingbo 志愿者团队</li>\n<li>八月：和 Ralph 面基</li>\n<li>八月：入手了一个 Yubikey</li>\n<li>九月：人生第一次参加雅思考试 <del>7分，蛮开心的</del>\n</li>\n<li>十月：入手了一个 Samsung Galaxy Watch Active 2 <del>觉得不值</del>\n</li>\n<li>十一月：MDx 达到 400 Stars</li>\n<li>十一月：为 TEDxNingbo 设计开发的 H5 上线</li>\n<li>十一月：入手了第一台胶片相机，试图入坑胶片摄影</li>\n<li>十一月：参加 TEDxNingbo 2019 大会</li>\n<li>十二月：<del>我 Cytus II 入门了</del>\n</li>\n</ul>\n<h1>跨年红包</h1>\n<p>这算「传统习俗」了。和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2020年1月2日。</p>\n<p>今年的解谜旅程，从下面这个字符串开始。</p>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>由于今年的题目比以前稍微难了一些，所以今年的红包金额还是比较大的，而且不限量，尽你所能试一试吧。</p>\n<p>一点你可能用得上的提示：URL 里全是 ASCII 字符 / 24x3，横向读取。</p>\n<p><a href=\"https://flyhigher.top/develop/1519.html\">答案</a>已公布。</p>\n<h1>跨年海报</h1>\n<p>这算是另一个「传统习俗」（笑）。因为我有做跨年海报的习惯，所以以下就是今年份的海报啦。</p>\n<p>用了 C4D+PS，还有我的一整个下午。</p>\n<p>提前祝各位新年快乐！</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter wp-image-1467 size-large\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n","link":"https://flyhigher.top/diary/1464.html"}]