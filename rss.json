[{"title":"温柔岁月，沪宁记忆 02：南京篇","date":"2021-06-23 08:54:10","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\" target=\"_blank\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>刚结束的这个五一，我去了一趟上海和南京，<a href=\"https://sspai.com/post/66478\" target=\"_blank\">不久前发布了第一篇在上海的旅行游记</a>——现在你看，第二篇它不就来了么。本篇主要讲述 4.30~5.3 这四天发生的事情。</p>\n<p>五一沪宁之旅的第二部分，我去了南京。</p>\n<p>因为出发的那一天已经是 4.30 号，当天已经开始了出游的高峰。本来我打算顺着高铁线路从上海出发，先到苏州或者无锡看看，再去南京。但是当我萌生这个想法的时候，车票已经很不好买了，要不没票，要不就是奇奇怪怪的到达时间，什么凌晨一两点之类的。这里买个教训，车票还是越早订越好。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/02/f77d27954365b7c6f40d87aaeb229693.png\"><figcaption>顺着线路去苏州和无锡玩玩也不错</figcaption></figure><p>我住的地方是位于大行宫地铁站附近的一个便捷酒店。我当初决定住这个地方主要是考虑到这个酒店在南京城区的中心部分，去什么地方都比较方便。去新街口只需要一个站，去总统府可以步行前往，去鸡鸣寺，老门东，玄武湖也很方便。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/02/06e8a39cd597b60e4570490e40fb9515.png\"><figcaption>红框是大行宫地铁站</figcaption></figure><p>在南京出行，我如果是从酒店出发，一般都是搭乘地铁使用支付宝-出行功能刷电子的乘车码（亲测可行），可能有 NFC 功能的手机会更方便点。</p>\n<p>因为是五一长假，人流量陡然增多，同时为了防控疫情，我这几天去南京所有的景点都需要先在美团上进行预约。我一般是提前一天预约，并没有出现门票已经售罄的情况，不过最好还是可以提前预约。</p>\n<p>就我经过的几个地铁站出口观察，南京某些地铁站电梯普及还不是很充分，通常有的出口有，有的出口没有；或者一个出口第一截有电梯，第二截又没有了，这个还需要朋友们做一下心理建设。</p>\n<h2>DAY 1：浆声灯影里的秦淮河</h2>\n<p>第一天到南京已经是下午四点了，休息一下，在新街口吃过晚饭，就直接去秦淮河风景区。这个风景区囊括了很大的范围，里面除了秦淮河，夫子庙、瞻园、贡院街、牌坊都是在那里。但是因为刚好是晚上七八点，而且五一假期已经开始了，风景区里各种人声鼎沸，一一不过人一多，我游览的兴致倒不是很高，秉承着「来都来了」的原则，开始随着人流四处逛。</p>\n<p>这里稍微吐槽一下夜晚的夫子庙。我理解想要活跃其作为旅游景点的气氛，但是震耳欲聋的音乐，绿色的激光扫射在正殿的屋檐，石像从底部被投射奇怪的底光，这一切，就我个人而言，和夫子庙本身的文化定位和该有的历史气氛格格不入。</p>\n<p>但是幸亏秦淮河足够长，可以容纳熙熙攘攘的人群，也依然保留了静谧的光景。当脚步声喧闹声逐渐远去，船橹荡开了水波，驶离了人群。</p>\n<p>此刻的南京，又名金陵。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/30/27398f7dcd3cdb1ae5e0637dbc621bfe.jpg\"><figcaption>南京夫子庙的入口</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/30/f23edab1b520eae3a38cf3c6eb3d9af4.jpg\"><figcaption>游人络绎不绝，也算是锻炼构图的好时候</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/30/75062216b0b79862d81ef928d45cd326.jpg\"><figcaption>明远楼是江南贡院的中心建筑</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/30/f197ccfd9c5240659e1737409bc1112d.jpg\"><figcaption>游船如织，风景如画</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/30/6fbfa89c2d7044f1632c5f978eb3f291.jpg\"></figure><h2>DAY 2：钟山上的千年风雨</h2>\n<p>第二天起了一个大早，是因为要去钟山风景名胜区。钟山因山顶常有紫云萦绕，又得名紫金山。钟山与后湖相依相望，奠定南京先天形胜。钟山因为其雄伟巍峨，自然是各种诗词歌赋的常客。「钟山风雨起苍黄」一句，七字彰显磅礴气势。</p>\n<p>因为钟山（或者说紫金山）风水比较好，很多历史名人都选择钟山作为他们永远安眠的地方。不查不知道，钟山大概是我去过的，各种陵寝密度最高的一处自然风景区了。长眠于此的有：三国时期的孙权，明朝的朱元璋、马皇后、朱标，近代的孙中山、廖仲恺、何香凝……可以感觉到，钟山的风水确实是得到了古往今来人民群众的认可。因为体力和时间关系，我走马观花地去了几个比较有名的风景区：</p>\n<p>中山陵：上了不知道多少级楼梯以后，是鸟瞰南京城的好地方。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/30/47be8b451d8c08e1958840ed2600ac58.jpg\"></figure><p>音乐台：以斗兽场式的环形布局，对着一面墙，真的会播音乐，会有很多鸽子。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/30/4bdb7407a09d2af5128faa1471fd5c98.jpg\"></figure><p>孝陵：朱元璋和马皇后的墓葬。郁郁葱葱的树林和认真吃草的路子是意外之喜。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/30/72deb139b51121399c7cb6bdfdceb442.jpg\"><figcaption>感觉明孝陵的屋檐尖尖要比故宫里的屋檐更加秀气细长一些</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/30/94bd36e2c09ccb01ed11afe3d3c671a8.jpg\"><figcaption>鹿苑地鹿出来吃草了，围着它走了很多圈</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/30/39361d304df89dfe7c8417c5a078fc5a.jpg\"><figcaption>无名的道路，在孝陵一侧，通向朱标的陵墓</figcaption></figure><p>美龄宫：其实本身并没有什么特别的，就是宋美龄曾经的住处，让我一睹大资产阶级统治者的奢华生活。从空中鸟瞰，美龄宫像是项链上的珍珠，被好几层的树木围住，感觉秋天来更佳。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/30/24655a3d320c93c2fb30daf6886c1f55.jpg\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/30/c131daf40911dca909f00ef4efa4f5f7.jpg\"></figure><p>灵谷寺：灵谷寺始建于公元六世纪，距今已经 1500 年。明朝时朱元璋亲自赐名「灵谷禅寺」，为明代佛教三大寺院之一。是整个钟山里面比较喜欢的地点。没有景点超多的游客，可以四处走走。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/30/73f0afb615cef64045e4a3dfdeffddf6.jpg\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/30/2c5018e2f30bc9f73ff866824cd0ac15.jpg\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/30/a0853e67c13a9b384ed1d41001f139dc.jpg\"></figure><p>钟山风景名胜区真的很大，我大概八点就到售票处，下午四点左右才离开，但是给我的感觉依然只是粗略地游览。个人比较好奇的紫金山天文台因为路线和体力原因并没有去到，确实有点遗憾，因为是五月一日，所以游客也有点多，所以感觉少了一点悠闲和惬意。但是总的来说，钟山还是有比较让人惊喜的地方，明孝陵的鹿苑，通往明东陵的幽静小道，灵谷寺的志公塔，也算是曲径通幽了。</p>\n<h2>DAY 3：历史与现代的交汇处</h2>\n<p>第三天早上并没有什么计划，我先去了颐和路附近的洋楼区逛逛，这里给我的感觉和上海的差不多，一样的梧桐树织成的穹顶，一样的西式楼房。但是南京的洋楼，楼与楼之间的密度要比上海更低一些，每一栋洋楼内部往往还有一个小花园。</p>\n<p>梧桐大道上，年轻的男女骑着共享单车畅快地交谈；某个路口，两边是仿佛已经有些年带的六七层的居民楼，一条笔直的道路尽头，是高耸入云（也没这么夸张但是也挺高）的紫峰大厦。</p>\n<p>新与旧，传统与现代仿佛在此刻得到了交融。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/30/1d414468d40eb3ebe57ba157b12d2507.jpg\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/30/f94f323b278afee2cdfdb6824c967067.jpg\"></figure><p>不能免俗地，去看了看某红书上火爆的先锋书店。不得不说，先锋书店的设计确实让人很有多在这里留一下的想法，在这里拍了一些读书的人们和书本的特写。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/30/93ac8a4a8b9c3ee15f5f8673ac8b7b14.jpg\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/30/58c6d9ffbe803e4e1d51b3f8dda2a298.jpg\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/30/743be2489c61f565ad256c2724b56d70.jpg\"></figure><p>接下来就要说我本次旅行的意外之喜了——大报恩寺。在还没去到实地的时候，我一眼被它的玻璃外立面的高塔吸引，我看过一些介绍南京的视频，玻璃在晨光中，在晚霞里，在夜幕下会像画布一样染上不同的颜色，又像水晶一样晶莹剔透，熠熠生辉。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/30/a4c72d540a68c50446132d6ff3460676.jpg\"></figure><p>去到实地才发现，那座玻璃塔只是它的其中一个亮点，实际上，每走一步，报恩寺里面的布局和空间分割都显示出用心。</p>\n<p>先说一下大报恩寺究竟是什么。其实我们现在已经没有办法看到大报恩寺它原来的面目了。现在的全称「大报恩寺遗址公园」。下面的文段选自百度百科：</p>\n<blockquote>\n<p>大报恩寺是明成祖朱棣为纪念明太祖朱元璋和马皇后而建，其原址建初寺和阿育王塔可追溯至东吴赤乌年间（公元 3 世纪）。明永乐十年（1412 年）于建初寺原址重建，历时达 19 年，耗费 248.5 万两白银，十万军役、民夫。大报恩寺施工极其考究，完全按照皇宫的标准来营建，金碧辉煌，昼夜通明。整个寺院规模极其宏大，有殿阁 30 多座、僧院 148 间、廊房 118 间、经房 38 间，是中国历史上规模最大、规格最高的寺院，为百寺之首。</p>\n<p>大报恩寺琉璃宝塔高达 78.2 米，通体用琉璃烧制，塔内外置长明灯一百四十六盏，自建成至衰毁一直是中国最高的建筑，也是世界建筑史上的奇迹，位列中世纪世界七大奇迹，被当时西方人视为代表中国的标志性建筑。太平天国运动期间毁于战火。</p>\n</blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/30/ee7f815e100b6e1a8baecbf37d20ff27.png\"><figcaption>大报恩寺琉璃塔原貌</figcaption></figure><p>整个大报恩寺的遗址公园是建立在原大报恩寺的废墟上的，但是我依然能感觉到大报恩寺上千年的历史积淀，通过一些现代的展示技术，让我更加真实感受到「百寺之首」曾经的辉煌，且没有一点喧宾夺主的感觉。对于一些挖掘出来的文物，能够使用就尽量予以使用，灯光，布局，佛像、莲花等佛教意象大胆使用，成功展示出大报恩寺幽深的禅意和建制的宏大。话不多说了，带大家感受一下吧。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/30/0a1c5f5d21456a888008a65b5bec0809.jpg\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/30/5748d52de257c6adf7e8e6c1c2886f93.jpg\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/30/e9e3a5da0a10ff4aaca87f57c30e361c.jpg\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/30/97c2bf25a34fdf0f62c4ecbb8f30a091.jpg\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/30/5a0bf8cf998247dd8f79ce5f7f9958e3.jpg\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/30/9e6b120e08f2b04d59ebd6119185f92b.jpg\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/30/2ca3f0f74a00832014dc2473d05d7eae.jpg\"></figure><p>晚上去了玄武湖逛了一圈，紫峰大厦再次成为最佳背景板。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/30/7ae9d2d690fd3cee917eb640d00b7bee.jpg\"></figure><h2>DAY 4：老门东的细碎时光</h2>\n<p>最后一整天，我都是在老门东度过的。老门东地区位于南京城区偏南的地方，是贴着中华门的一大片区域，样式上保留了南京城几百年的建筑风貌。</p>\n<blockquote><p>门东一带早在三国时期，此处就有民居聚落出现。明朝中华门与内秦淮河沿线成为城市的经济中心，这里成为重要的商贸和手工业的集散地，呈现一派繁华的景象。清末以后，老门东、老门西等老城南地区逐渐成为以居住功能为主的区域，集中体现了南京老城南传统民居的风貌。</p></blockquote>\n<p>其实我并没有打算去老门东具体的景点，就是想感受一下在老城区漫步的感觉。虽然建筑表面还是修旧如旧，但是内部早就已经不是往日的民居。有古色古香的星巴克，有咖啡店，服装设计室，文创店，书店……</p>\n<p>总有人觉得商业化是一个景点最悲惨的命运。其实这也是很无奈的一件事情。如果没有商业化，就没有资金，没有交通建设，对外宣传，资源维护，最终消失在浩浩荡荡的城市化和工业化进程里。我们只能够希望一个地区的商业化是为了把它的文化保护下来，而不是借着历史的躯壳进行商业活动而已。</p>\n<p>其实现在也挺好，如果早点去，旅游团们还没有来，疏疏落落的光斑照射在桌子上；一只猫咪轻声在屋顶的瓦片上走来走去。到一家咖啡馆要一杯咖啡，坐在院子里发呆，想象下那些长满青苔的斑驳墙面见证了什么故事，非常杀时间。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/30/d4296068314d6d4ffce23e5d3633f411.jpg\"><figcaption>好像这种三级落差式的屋檐在老门东挺常见</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/30/06159409f9aa6903405dc7457a6a38ba.jpg\"><figcaption>五月，花开啦</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/30/b99dd63bad44e6916b4e8e6bac61f44c.jpg\"><figcaption>石狮子守护身后的土地已经多少年呢？</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/30/012c14e51a5d5c0a795696edc3ff760e.jpg\"><figcaption>喂！朋友。饮杯靓靓嘅啡</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/30/1133cab96b6568c5ca460106ca17e84d.jpg\"><figcaption>游客和猫咪在玩耍</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/30/3087b8ad98e028ba26c80de7485c4fd0.jpg\"><figcaption>咖啡厅的内部</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/30/f1a2d4ef7692e6a02bec0debd65882e6.jpg\"><figcaption>注视着猫咪吃猫粮的姑娘</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/30/3dcaabd7e019cf913b5a62d77aeb3431.jpg\"><figcaption>老门东的先锋书店，由骏惠书屋改建，传统的徽派风格</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/30/4581660ddf23bc250b9736a107509da9.jpg\"><figcaption>藏在二楼的文创店</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/30/3f3dba1278350e2026f20360e031a008.jpg\"><figcaption>虽然已经进行了维护，但是很多墙面依然斑驳</figcaption></figure><p>下午时间不多，傍晚就要搭飞机回广州了。为了充值信仰，就去了我熟悉又陌生的金陵银盐馆。说熟悉，是因为我很多次胶卷拍完都会送来这里冲扫；说陌生，是因为我从来只是听说过这个地方，却没有亲自来过。既然来到了南京，就肯定要去拜访下了。</p>\n<p>一进门就有熟悉的胶片散发出来的银盐味道，进门是一个中等面积的咖啡厅，原木风格的家具，桌子上还放着一把吉他和几张拍立得照片。要了一杯雪碧，和老板娘聊了一会儿天就离开了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/30/1619a15bdb6566435b22f89d70786cc3.jpg\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/30/abd73045f412b25ae7e00c0c2e548abe.jpg\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/30/ed9119121f4de4520d4ef85d7948013a.jpg\"></figure><h2>美食</h2>\n<h3>鸿福面馆</h3>\n<p>地址：秦淮区五老村街道科巷 66 号(科巷新市集西门)</p>\n<p>人均消费：20~30 元</p>\n<p>鸿福面馆是我在大众点评上发现的。因为离酒店比较近，我看价格也比较低，评分不错，打算随便吃了事，没想到竟然给我发现一个宝藏店家。我点的是杂锦面，当它真正出现的时候，我被它一碗面的体积惊到了。不仅分量足，各种配菜，叫得上名字叫不上名字的，非常适合大快朵颐。因为汤里面加了番茄，所以哪怕吃到最后一口也不会觉得腻，非常提鲜。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/01/da387b6063a6f9195cc940df90339bad.jpg\"><figcaption>认真吃东西的叔叔</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/01/37cc8517f22cc2c37874a21c8e254fe7.png\"><figcaption>据说装修过，装潢啥的确实不错</figcaption></figure><p>各种配菜，吃起来很有成就感</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/01/32fbd3510748c75abaeaeeff7fa84287.png\"><figcaption>一碗杂锦面的分量很足</figcaption></figure><h3>新白鹿餐厅</h3>\n<p>地址：中山南路 79 号中央商场八楼</p>\n<p>人均消费：50~60 元</p>\n<p>新白鹿餐厅从菜品和餐厅装潢来看，并感觉不算是十分传统的江浙菜，走的是比较创新的菜式的路子（我也是第一次听这家店，熟悉的朋友可以说道说道）。吸引我的是因为逛中央广场时发现排对人数最多的就是这家了。让我有点好奇菜品究竟如何，尝了以后发现是真的不错。推荐咸蛋鸡翅，外皮酥脆，鸡肉嫩滑，夹着咸蛋黄的咸香，吃完一口就想继续吃。我还点了炸鸡翅和香烤鲈鱼，也是挺好吃的，但是也没有咸蛋鸡翅给我这么深的印象。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/01/4f113cacaf5e0465bf9eacb6a4f5a799.png\"><figcaption>咸蛋鸡翅</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/01/87638fb100675ba84f6221c1364ac92e.png\"><figcaption>炸茄子</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/01/02e9325ca72ee7b10acf0613477dbac7.png\"><figcaption>香烤鲈鱼</figcaption></figure><h2>结语</h2>\n<p>写到这里，我的沪宁之旅就结束啦。我重新往上看了一下自己写的文字，好像对南京之旅并没有像去到上海那样很多让我激动的点。但其实我认真想了一下，其实南京和上海是两个给我完全不同感觉的城市。南京给我的依然有种古都的气魄和从容。数不清的几百年的历史建筑，街道上是慢慢踱步的爷爷奶奶也有朝气蓬勃的青年。上海更多给我的感觉是精致，每一个细节，每一处角落都有它自己的故事。</p>\n<p>这次的南京和上海之旅，让我这个许久不出门的广州土著长见识了。感觉这两个地方还是要再来一次。每个城市短短三天多的行程，还是太赶，有点走马观花了。希望还有机会继续体验上海和南京的魅力。</p>\n","link":"https://sspai.com/post/66924"},{"title":"不买可以先收藏 06：筛选房源的第一步，读懂户型图","date":"2021-06-23 07:30:00","description":"\n<h2>引言</h2>\n<p>户型是大事，毕竟对于一般家庭来说，房子是最大的大件了。但是户型也是由一些琐琐碎碎的小事凑成的，小到细微之处，小到不易察觉。在入住之后发现问题已经追悔莫及。本文就以「户型」为主题展开，零零碎碎地谈一些小事。</p>\n<p>一般而言，购房者最关注的就是户型图了。但户型图只能看到家中的细节，其他环境的细节通常还需要依赖总平面图和楼层平面图。也就是说我们选房时要结合总平面图、楼层平面图和户型图一起来看，这样我们就能在选房时及时看到这间房子所有的不利因素，避免我们买到房子以后才发现「踩了大坑」。</p>\n<h2>总体概况</h2>\n<p>总平面图通常采用 1:1000 比例，是从一个相对宏观的角度解读一个住宅小区与周边地块的关系，不仅能直观地看到小区内部的建筑分布、建筑密度、绿化效果等，还能看到周边的道路等级、出入口、公交及轨道交通站点等情况。</p>\n<p>而我们选购时，重点要关注的小区内部指标通常有<strong>容积率</strong>、<strong>建筑密度</strong>和<strong>绿化率</strong>这几个数据。这些指标通常是在规划局土地出让的时候就规定好的，通常情况下，开发商会按照容积率最高（允许范围内可销售面积最大）、绿化率最低（允许范围内成本及操作难度最低）、建筑密度合规的原则进行土地开发。一般民众比较关心的是<strong>容积率</strong>（=地上总建筑面积/用地面积），其数值的高低决定了小区的人口、建筑密集程度、舒适性等指标。一般而言，容积率数字越低住起来的感觉也就更舒适，以下是容积率数字和小区类型的大体对应关系：</p>\n<ul>\n<li>0.2~0.5 -- 独立别墅</li>\n<li>0.4~0.7 -- 联排别墅</li>\n<li>0.8~1.2 -- 6层以下多层住宅，有时也被称为洋房</li>\n<li>1.5~2.0 -- 11层小高层住宅</li>\n<li>1.8~2.5 -- 18层高层住宅</li>\n<li>2.4~4.5 -- 19层以上住宅</li>\n</ul>\n<p>目前大多数的小区会混合多种小区类型，而容积率数字较低的小区地块同样会比容积率数字高的地块住起来更舒服，这些是需要通过阅读总平面图才能获得的信息。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/23/article/c3851b78134e1c1ca07e2947aa8d3a75\"><figcaption>总平面图上清晰标记出了洋房、高层和绿化所在的位置</figcaption></figure><p>通过阅读总平面图还可以获得小区外部信息，其中我们需要关注的点包括：哪条街是快速路、哪里是城市主干道、哪里有轻轨或是桥等交通环境。这里以桥为例，如果一个小区周边有较宽的河，那么前后一定会有缓冲段；在一个较长的距离内（缓冲带+河流的宽度）这段路都不会有红绿灯，这就会导致在此路段行驶的车辆，通常车速都是非常快的。那么紧邻这条路的住宅，就极有可能会听到常年的轮胎底噪声。我目前就深受其害，要带耳塞睡觉第二天才不会被早高峰的车流吵醒。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/23/article/3f81856721414b4ae9dbf5461ef85c73\"><figcaption>桥前后的缓冲带</figcaption></figure><p>而在小区的内部，主要是看距离楼栋遮挡，楼间距，中心绿化相对位置，与主要出入口的关系等等。选择一个兼具视野，安静，方便等等的绝佳楼栋，当然是最好的啦。只是如果是摇新盘的话，选择权还是在于你是否摇到的号码是否靠前。上面是我在网上随便找到的一个住宅小区，单凭这一张图里面的信息，各位觉得哪栋楼是最佳位置呢？</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/23/article/af76ee0d01fa23ffc63aba4165eaabc1\"><figcaption>欢迎在评论区说出你的观点</figcaption></figure><h2>平面及户型图</h2>\n<p>大多数人看住宅，会更关注户型图，毕竟每一平米都是真金白银。但是楼层整体的平面图同样重要，楼层整体平面图包含了竖向交通/走廊以及你的邻居户型的整个平面，能让你透过表面看到更深层次的问题。</p>\n<p>整体平面图首先能够反映出你的某一房间窗外周边的情况。例如有一些卧室，其实斜对过就是隔壁邻居家的窗子。这个信息在你看户型图时是看不出来的，只有看了完整的平面图才能知道。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/23/article/77466be981ef27ecd35e5f1f32a4984f\"><figcaption>户型图看起来没什么问题</figcaption></figure><p>比如上边这套户型，在朝南方向的采光上似乎没有什么太大的问题，厨房、餐厅、客厅及主卧都有较好的南向采光。但是如果看了下图完整的平面图，就会发现，位于东边的 01 户型，过了午后大部分房间可能就没有太阳了，餐厅和厨房甚至是直对着天井，可能会全年无阳光直射。而西边的 02 户型客厅及卧室，也只有午后才有阳光进来。像这样 01/02 户型被 03/04 户型大面积挡住的情况，只有在看了平面图之后才能发现。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/23/article/093c74a558d377a9f48c51e2492afb79\"><figcaption>01/02 户型的缺陷在平面图上一览无余</figcaption></figure><p>又比如下面这张平面图，电梯的旁边就是卧室。实际上按《住宅设计规范》GB 50096-2011 规范来说，卧室是不得紧邻电梯的：</p>\n<blockquote><p>6.4.7 电梯不应紧邻卧室布置。当受条件限制，电梯不得不紧邻兼起居的卧室布置时，应采取隔声、减振的构造措施。</p></blockquote>\n<p>如果开发商没有很负责的请过声学顾问，进行了专业的消噪处理（需要成本），那么这间卧室会常年比较吵。然而又因为它紧邻入口及电梯，一般会被拿来宣传适用老人，适合两代人不同的生活作息等等（甚至有这句话就要怀疑旁边是不是电梯），借此掩盖其真正的问题。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/23/article/28a586b7a885440b27eefd316c964935\"><figcaption>一个「典型」的卧室安排</figcaption></figure><h2>朝向与采光</h2>\n<p>大家都知道，朝南是最好的。一般而言，<strong>最好的朝向是南偏东 10°～30°</strong>, 所有的朝向都可以从总平面图中读到。通常小区具体楼栋的朝向，一般是平行于地块边界的，因为只有这样才能获得一个最佳的楼栋排布。毕竟开发商都是逐利的，他们通常选择的是利益最大化，也就是平行于地块排布住宅，因为这种方案既能够在满足日照间距的条件下，也能够排布最多的户数。而当地块比较不规则的时候，楼栋就也通常选择完全正南北，与地块没有什么几何关系了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/23/article/c149a2dc3bc194003947f7606355f2de\"><figcaption>绝佳朝向示意图</figcaption></figure><p>无论如何排布，有一点可以放心的是，住宅楼栋的日照情况，一定是会满足规范要求的（各地有所不同，比如冬至日/大寒日满窗日照2小时）。这一点会由规划局把关，不满足规范要求，项目是不会通过的。除了日照最低时间的要求外，部分地块项目还会有「间距」的要求，这个间距可以简单理解为，满足了这个间距，南边住宅的影子就不会影响到北边住宅的日照情况：</p>\n<p><code>间距=南边建筑高度 x 系数</code></p>\n<p>因各地的纬度等原因，建筑物阴影对北侧建筑的影响是不同的，这个系数由各个城市的地理位置决定，一般会写进当地的城市规划管理技术规定当中。例如下图是截取自上海市的有关规定。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/23/article/fc6c68bd483d415c41e4b943cd78398f\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/23/article/25597f18a4f7847e672b3cb3216f58a6\"><figcaption>上海的有关系数</figcaption></figure><p>而如果是高层/超高层住宅，尤其是点式住宅（区别于板式，可理解为趋近于圆形/三角形/正方形的平面布局），通常是采用日照模拟计算的方式来判断是否符合要求的。这种情况下，有些极端位置的住宅，日照条件其实是不那么好的，但是它满足比如大寒日最低2小时要求，那么它一样也是可以通过审批的。这种情况，一般是可以通过找一些业内人士帮忙再给跑跑日照计算，大概就能知道一下具体是由怎样的好与不好了。</p>\n<h2>房间</h2>\n<p>其实对于每个房间的可以做什么，都是可以通过户型图上的面积判断的。例如双人卧室不应小于<code>9m^2</code>，单人卧室不应小于<code>5m^2</code>，兼起居的卧室不应小于<code>12m^2</code>，起居室（厅）的使用面积不应小于<code>10m^2</code>，厨房不应小于<code>3.5～4.0m^2</code>，三件套卫生间不应小于<code>2.5m^2</code>。当然这些仅仅是合规的最低标准，想要更舒服和更多的用途还是需要更大的空间。</p>\n<p>家具是可以用来感受空间大小的，按照一张 <code>1.5m x 2.0m</code> 单人床的最小卧室，外加必要的两侧走道各 <code>0.6m</code>，床下走道 <code>0.6m</code>，单排衣柜 <code>0.6m</code> 深，最终的最小尺寸就是 <code>3.3m x 2.6m</code>。比照这个尺寸，对照户型图上的卧室尺寸标注，就可以简单感受出，图上的卧室究竟是床下走道更宽了，还是衣柜前的走道更宽了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/23/article/41aad898983e7d954c68c24cc42bc95c\"><figcaption>通过家具感知房间大小</figcaption></figure><p>家具虽然可以用来感受空间大小的，但是家具并不一定都是「真实」的。有些时候因为户型实在太小了，但是图上又不能显得太小，于是选用更小尺寸的家具放在图里，会让看的人并不会觉得房间小。这种时候，还是要去看具体的尺寸数字。若图上没有标注，我认为业主是有权向销售索取真实数据的。并且，平时也可以在去朋友家，亲戚家，或者通过中介看房子的时候，多采集一些数字，比如 <code>3.6m</code>、<code>3.9m</code>和<code>4.2m</code>面宽的客厅，究竟有哪些细微的差别感受。这时候再去看户型图，就可以把图上的数字，和自己的感知对应起来。便不会再被图上的家具等迷惑了。</p>\n<p>对于卫生间，现在的户型设计，也慢慢采取了一种，洗脸池在外，马桶及淋浴在「卫生间」内的设计。这有别于常规的做法，却可以达到一个卫生间，两个人同时使用的情景。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/23/article/4859dfec648879403d18faa732f746dc\"><figcaption>洗脸池外置的设计</figcaption></figure><h2>分区</h2>\n<p>住宅虽不大，但也讲究分区。譬如，动静分区、主客分区、干湿分区等。若能在满足各功能使用的前提下，各分区清晰明确，则可以说是个不错的设计了。</p>\n<p>动静分区。主要是指动（客厅餐厅厨房等）与静（卧室等）的分区，通常由一个短小的走道来衔接。在客厅的人无论是看电视听音乐，都对在卧室休息的人影响不大。如果是那种一推门就正对着沙发的卧室，平时互相干扰的情况会时常发生。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/23/article/c3ed3ea0865f88e6e2e447d911e6120f\"></figure><p>主客分区。大体与动静分区相重叠，但有一点稍有不同的是卫生间的布置。当一间房只有一个卫生间，并且靠近卧室区的时候，如果有客来访，则需要进入到比较私密的卧室区进入卫生间，恐怕也是不太妥当的布置。（如最后的小例子户型）</p>\n<p>干湿分区。即厨房、卫生间的干湿分分布。适当的干湿分区，能够明确这两个小空间的再划分，可以避免把「水」带到外面相对干燥的区域。从卫生，清洁等方面都是稍有益处的。只是它的功效没有特别的大。毕竟这两个空间通常也不会太大。</p>\n<h2>通风</h2>\n<p>想要形成通风，至少需要两个窗口。一般而言比较好的通风状况就是所谓的「南北通透」。一条贯穿南北的通风带可以带来清新的空气，可以带走霉气潮气油烟气，尤其是在相对潮湿的南方城市。</p>\n<p>一般来说，在整个房子内，将两个不在同一墙面上的窗相连（通常是没有门的房间，如客厅、厨房），即可成为风流动的通路，那么没有被覆盖到的区域，既是换气的死角。而这个线条如果转过三个弯，那么换气能力也会下降。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/23/article/13a7f4e482a5247d0dff066c7ae37453\"><figcaption>了解通风死角有助于在装修时进行规避</figcaption></figure><p>在前几年雾霾问题突然出现在公众视野的时候，就有人提出过家居防霾的解决方案是全屋新风系统。当时仅是出于全屋空气净化的角度，但现在看，同时它也能一定程度上解决屋内通风不良等问题。</p>\n<h2>墙与墙的区别</h2>\n<p>住宅内的墙体大体分为两种：承重墙（剪力墙）与非承重墙（砌块墙）。</p>\n<p>在户型图上，对于墙体的画法有两种：一种是对墙体的种类不作区分（全涂黑或全留白），如下图：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/23/article/ddd7f01044c27602561cd153ccd33b4c\"></figure><p>而另一种是将承重墙涂黑，将填充墙的颜色淡显或留白，如下图：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/23/article/0f0cf4abf408382fafd2cab8e70edd17\"></figure><p>能够看见承重墙的户型图，为未来户型改造提供了重要的参考。因为承重墙是无论如何都不能砸的，砸了是可要出事情的。而砌块墙体通常是可以进行改动的（但是具体的改造仍需要征询专业人士）</p>\n<p>其实一些精装交付的小区，动非承重墙也是有一定阻碍的，阻碍可能来自物业及邻居。毕竟现在很多小区精装交付，新业主入住的前两年不会出现大面积装修太吵的情况。这时候如果有哪个邻居天天在砸墙，估计也是要被投诉的。</p>\n<p>由于国内相对比较「成熟」的住宅市场，基本上已经不太存在什么「建筑设计」可言，更多的是一种产品设计。很多条条框框都是行业铁律，基本上没有办法做更多的创新。一来是高周转市场行情下，只能选用成熟产品类型不停的复制，另一方面，作为业主来说也不太能感受到你所谓的设计，而是想要花最少的钱，买一个和市场上其他房子差不多好用的住宅而已。</p>\n<p>然而对于现有产品不那么认可，或想要自己改造的人来说，一栋住宅拥有相对灵活的结构布置，就给房子改造留有了一定的空间，后面的例子也会就此稍作展开。</p>\n<h2>举个小例子</h2>\n<h3>户型解读</h3>\n<p>这是位于上海某郊区89平建面的典型刚需房户型。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/23/article/57c552ed8f86225421c419541ad13df4\"><figcaption>举个例子</figcaption></figure><p>三房两厅一厨一卫。因为是刚需，所以需要三间卧室，又因为面积不大却做了三居室，所以每个空间都只是勉强够用，但总归功能都还是齐全的。</p>\n<p>下面是中介网站的户型解读。我们一个个拆解来看看：</p>\n<blockquote><p>每个房间都有窗，保证日间任意房间都有自然光。</p></blockquote>\n<p>—其实我想说这是一句没有什么用的话。因为按照规范做，这个配置的户型，基本都是要有通风/采光的。</p>\n<blockquote><p>客厅和餐厅贯穿南北，室内视野更开阔，开窗时可在房屋中形成穿堂风，冬暖夏凉。</p></blockquote>\n<p>—前半句不假，视野的确比较开阔。但是我比较怀疑它说开窗时能形成穿堂风，毕竟北侧只有厨房的小窗，且在最西北的角落里，而厨房与客厅之间的墙体又是承重墙，无法增设洞口等。因此个人认为这很难称得上是「南北通」。</p>\n<blockquote><p>空间分割多为非承重墙，可根据个人需要进行空间改造。</p></blockquote>\n<p>—这句话说到了点子上。当我看到这张户型图的时候，第一眼发现的特点就是，次卧和客厅中间的墙体用了非承重墙。这一定是个有意为之的「设计」之处。因为客厅东侧墙体与次卧西侧墙体之间的跨度还是相对较大的（看北侧小房间之间的承重墙间距就能对比出来）。通常情况下中间都会做一片或一小段承重墙体，来增强结构的稳定性以及空间净高。但设计师在这里特意留空，就是给可能的空间改造留有余地。</p>\n<blockquote><p>日间活动区域远离卧室、书房，休息及工作时不受访客打扰。</p></blockquote>\n<p>—说的没错，这个户型做到了动静分区。尤其是最西侧两个卧室还是比较深的。被客厅打扰的时候要少一些。</p>\n<blockquote><p>主卧（卧室）在户型内侧，门不直接对客厅，休息时不受访客打扰。主卧（卧室）有室内小玄关，确保居住私密性。</p></blockquote>\n<p>—这里相对重复，还是在说上一条的内容。</p>\n<blockquote><p>厨房距离入户门近，炒菜时不会影响室内环境，厨余垃圾不会经过客厅、卧室等生活区域，方便清洁打扫。</p></blockquote>\n<blockquote><p>餐厅与客厅相连，室内视野更开阔。</p></blockquote>\n<p>—说到第四、五条已经有一点没啥说的找有点的阶段了，但是说的其实也没错。</p>\n<p>首先这张户型图时没有尺寸标注的，但是仔细看床到墙的距离已经非常小了，是肉眼能观察到的局促，可见它还是相对诚实的反应了实际的情况。没有放一些「非标」的家具来迷惑人。毕竟89平做三居室一定会局促，宽敞可就是有猫腻了。</p>\n<p>其次在宣传小册里面，也是看不到平面图的。因此只能知道这个户型自身的情况了。但是我通过此户型的楼栋分布，以及其他户型的楼栋分布，大概能够通过总图及效果图拼凑出楼层平面图的样貌。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/23/article/59c3c0336fdd31acd8bc80d75f55df90\"><figcaption>拼凑的楼层平面图</figcaption></figure><p>卫生间为了西北卧室的进入，只能将台盆分离出来，否则就必须要先进入卫生间再开门进入卧室了。初看是无奈之举，但是仔细一想它也有自己的优势所在。当一间房里有三个卧室（至少 3 人居住），却只有一个卫生间的时候，如果是一个传统意义上的卫生间，那么就只能有一个人使用卫生间，其他人都必须等待。而现在，可以理解为可以有两个人同时使用卫生间的不同功能。</p>\n<h3>小改造</h3>\n<p>对于一个作为刚需的选择，上述的房型已经是中规中矩，没有太大的硬伤了。但是，并不是所有想买90平米房子的人，都想要买三居室。</p>\n<p>90平米的面积做三居室，最终的结果就是，主卧小，次卧小，客厅小，餐厅小，厨房小。每一个空间都是卡着最低限度来做的，功能是完善的，但是舒适度却是欠佳的。那么有的人想买90平这个大小，但是并不需要那么多卧室，有时候就只能从这里下手自己改造。</p>\n<p>在这个户型，客厅与次卧之间的墙体并不是承重墙，是可以取消的，那么客厅和次卧就可以合并成为一个完整的大空间。而入户门口的餐桌（厅），也可以合并进这个超级大客厅里面。减少了一个卧室，成就了大客厅和舒服的餐厅，同时门口也可以做一个舒适的入户空间，而不是被餐桌堵住。</p>\n<p>这一切的可能性，都归功于客厅的墙体不是承重墙。看到这张图的时候，我甚至都能感觉出是设计这套户型的人有意为之。毕竟这里不做承重墙体，跨度还是蛮大的。显然这里做承重墙，对于结构计算，受力，梁高控制等都是有益的。但是对于空间改造的灵活性却是致命的。</p>\n<p>下面这种图是我简单改造了之后的户型图（改造1.0）。少了一个次卧之后，把面积匀出来给了其他功能，客厅与餐厅合并成一个超大空间，餐厅也能有南向采光，同时创造了一个入户空间。对于没有刚需，但注重居住品质的人来说，这样的布置显得更加舒适。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/23/article/21da811267804f0e7f2b0fc7f1a09d58\"><figcaption>改造方案 1</figcaption></figure><p>甚至，将最西侧两间卧室中间的墙体再取消，做一个超大的一居室豪华套间。（改造2.0）</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/23/article/23b1308be7503b2b8f6303ec96df900f\"><figcaption>改造方案 2</figcaption></figure><h2>说点其他</h2>\n<p>作为建筑从业者（非住宅方向），还是很喜欢去设计住宅的，之前学生时代也是比较热衷设计住宅。毕竟住宅的墙体，最接近人的身体，每一笔尺度的把握，都能决定设计的成果是否合适。然而国内住宅设计，处在大量的复制，微革新，规避规范等别样的道路中，使得它渐渐远离了普遍意义上的建筑设计，而更趋向于产品化设计。</p>\n<p>因此现在偶尔看看户型图，渐渐就有了一种，看看这里能不能改一改，那里能不能改一改的习惯。在原有的基础上再多改出来一点点有用的空间或更舒适的使用方式，都能找到一点点趣味性。（然后再心满意足的继续当社畜去做工作的项目）</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67379"},{"title":"Refresh 周报：本周值得关注的泛 Android 资讯","date":"2021-06-23 06:28:32","description":"\n<p>📰 <strong>关于 Refresh 周报</strong></p>\n<p>每周更新泛 Android 领域内容，带你回顾过去一周 Android 数码/行业领域值得关注的大小事件。</p>\n<p><strong>📣  本周</strong></p>\n<p>本周 Google 首家线下零售店开业了，还有关于 Android 版 Find My 网络的信息（对于 Android 生态来讲真的是很需要了），而且本周也有一些「奇怪」的新机发布：既有复刻经典款，也有直接挂着相机品牌发布的新机。除此之外，Google 调查 OEM 厂商滥杀后台问题、以及 WearOS 更新策略，Android 地震预警网络，都是本周值得关注的话题。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/article/23294afdf87eccb359fac82a9b17985a\"></figure><h2>🍿️ 本周主题：首家 Google Store 开业</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/article/2c485727c0a891a36443515d4a563ab8\"></figure><p>6 月 17 日，Google 第一家实体零售店在纽约总部第一层开业，你能在这里找到从 Pixel 手机到 Nest 系列智能家居设备，包括 PixelBook、Google TV 等几乎所有 Google 当前在售的智能硬件，也包括 Fitbit 与 Stadia 这样 Google 旗下的硬件服务，同时也提供技术支持以及硬件线下维修服务。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/article/11229da459990df02faff3235592dd60\"></figure><p>作为 Google 的线下零售店，从开业一开始，就少不了同类与最著名的案例 —— Apple Store 的对比，线下店面设计也最能传递出公司对自家产品的理解以及定位。</p>\n<p>Google Store 与 Apple Store 两者相同之处在于：它们同样非常强调「可持续发展」这一主题在设计中的体现：Google Store 不仅店内所有光源均为节能照明设备，定制的木质家具与墙皮也是来自纽约布鲁克林当地的工匠手工制造，地毯也是由回收材料制成。</p>\n<p>除了店面本身，Google Store 中还用很多设计，试图展示 Google 旗下智能设备制造过程中所采用的可回收材料：比如店内其中一个橱窗就向用户一步步展示了一个塑料水瓶是如何最终变成 Nest Home mini 的织物网罩的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/article/94288e1e2ba640f8f366e4d35dcf5403\"></figure><p>接下来就要说到 Google Store 与 Apple Store 的不同之处了：与全球各地 Apple Store 经常中意于大量采用整块的玻璃材质来打造不同，Google Store 采用的则是非常常见的橱窗设计；路过的行人都能从这里看到橱窗中的展示内容，仿佛这只是一家普通的手机专卖店一般。</p>\n<p>在店内设计部分，区别于 Apple Store 想通过白色元素设计给顾客带来的科技简洁感，Google Store 店内装修大面积采用了暖色调的材质，来营造一种居家生活的舒适感；店内还有一个布置了各种模拟居家场景的「情景生活区」；甚至还有一个独立吧台的咖啡馆。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/article/667b7904ff4a0149521e2e01456b9b0c\"></figure><p>在 <a href=\"https://blog.google/products/devices-services/google-store-nyc-opening\" target=\"_blank\">介绍文章</a> 中，Google 还表示在这家店正式投入营业之前，他们还在加州山景城总部建立了一个 1:1 的模拟店面，供设计团队模拟各种场景，让店面设计各种元素保持最佳状态；相比于让你在这里直接买买买，Google 似乎更希望让你在这里了解到更多关于这些智能硬件背后的故事。</p>\n<h2>📡 Android 版 Find My 网络</h2>\n<p>本周，9to5Google 报道了在新版 Play 服务安装包中的发现：Google 正在为 Android 系统中加入一个名为\"Spot\" 的定位网络，其原理与苹果 Find My 网络类似：即可以让你的 Android 手机用于帮助其他 Android 设备定位。</p>\n<p>除了这一 API 之外，Google 同时还可能为这一服务发布一个独立的应用程序供用户使用，虽然目前还尚不清楚关于这款独立应用的具体定位，但从这一新 API 来看，这款应用很有可能是与苹果 Find My 类似的服务。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/article/9f126672108f2ee588d607e69b7a272e\"><figcaption>Spot App 图标 ｜ 图源：9to5Google</figcaption></figure><p>苹果生态中的 Find My 网络其实一直都很好用 —— 虽然大部分人使用次数可能都不多，但每个 iOS 用户大概都至少有那么一两次打开过它。</p>\n<p>而在 Android 这边，虽然全球实际联网的 Android 设备已经超过 30 亿部，Android 手机也已经在全球占据了近 85% 的市场份额，但却一直缺失一个能将这些设备有效沟通，来形成一个更加有效的定位网络；如果是基于借助连接 Wi-Fi/移动网络 + 低功耗蓝牙广播信号的模式定位，那么基于 Android 的定位网络显然无论是精准度还是速度都会比现有的「查找我的设备」功能来的更好。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/article/92994a350a6a215b6f1a8aa25ba803f4\"></figure><p>除此之外，包括 Google、Tile 以及 OPPO 等厂商同样在制造/研发类似 Airtags 的物品追踪器，此类设备未来在 Android 生态中进一步普及，也只是时间问题，因此 Google 在这时候推出的 Spot 这一查找 API，对大部分 Android 手机品牌与用户来讲都是一桩好事。</p>\n<p>不过，说到类似的「借助定位网络来查找内容」，其实 Google 很早就在 Android 平台中尝试过基于地理位置推送附近的信息：比如早在 2015 年就内置在 Android 系统中的 Nearby Notifications（就近通知）这一功能，能借助于现实世界的特定 Wi-Fi 与地理位置向结合，向手机用户推送如公交/地铁到站信息、博物馆参观指南以及更多本地社区服务。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/article/224869c7ccd229ec66fa357981aa2b1f\"></figure><p>虽然这一构想非常美好，但现实往往不会按照最理想的设定运行：这一功能发布之后就被越来越多的用于各种垃圾信息的推送，许多手机用户不堪其扰选择关掉这一功能；最终 Google 也在 2018 年正式从 Android 系统中删除了这一功能组件。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/article/e3ab3f69a8f1d72523043bddfad927f2\"></figure><p>如果说我们能从 Nearby Notifications 的前车之鉴中吸取到什么教训，那就是 Android 系统的开放程度要远高于 iPhone，所以 Google 本次推出的 Spot 定位 API，如何保护好每一位用户的地理位置信息隐私，确保这一机制在得以正常服务于每个人的前提下不被滥用，同样也是需要特别注意的问题。</p>\n<p>另一个我们之前提到过，而且大部分读者也非常关心的、关于「这一定位服务是否能在中国大陆使用」的问题，如果未来这一服务真的是基于 API 实现，那么国内手机厂商的第三方 Android 系统在不内置 GMS 的情况下，搭载这一部分用于实现定位/帮助定位功能的组件，完全是可以轻松实现的事情，不同的厂商也可以基于这一相同 API，来在手机中内置不同的定位 App，并为其加入自己的功能。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/article/56493ce1479199f2194bfe13b9de0f18\"></figure><h3>徕卡手机</h3>\n<p>今年日本智能手机市场也掀起了一股联名相机品牌的风潮，但在利用相机品牌的话题度这件事上，日本显然不介意更进一步：运营商软银就直接与徕卡联手，在日本发布了一款徕卡品牌的手机 Leitz Phone 1。</p>\n<p>这款有着徕卡头衔的手机相机系统硬件也特别值得一提：Leitz Phone 1 搭载了一个只有 2000 万像素的一英寸传感器 —— 这是目前智能手机中最大的传感器，相当于一颗 19mm f/1.9 的镜头。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/article/e52c475a06f58606e4e25d8a160187ed\"></figure><p>虽然相机硬件规划称得上特立独行，但或许你会有一种似曾相识的即视感：倒不是因为它风格太像 Lumia 1020，而是夏普一个月前刚发布了另一款同规格的手机 Aquos R6，它同样搭载有徕卡品牌相机，而且在相机规格上不能说一模一样，只能说完全一致。</p>\n<p>虽然徕卡 Leitz Phone 1 是在 Aquos R6 的基础上有做重新设计，但无论是内在硬件规格：高通骁龙 888、12GB RAM/最高支持 1T 内存卡拓展，还是最高 240Hz 刷新率的屏幕，都揭示了它们两个本质上是同一款手机的事实。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/b7a99dc40cabef37b63405cdfa083b69.png\"><figcaption>Leitz Phone 1（左）与夏普 Aquos R6（右）｜ 图源：@osaan_mobile</figcaption></figure><p>不过，作为一款名义上的徕卡手机，除了后壳边框的重新设计之外，Leitz Phone 1 还是有一些独特的附赠的配件：比如一个定制的配套手机壳以及为保护圆形镜头模组所设计的 …… 金属制镜头盖。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/article/70f8fdf81c72409ac75197d06b52ea59\"></figure><p>不过这两款手机差别最大的地方还是在售价上，Aquos R6 在除日本之外的其他地区售价 665 美元(约合人民币 ¥4300），而硬件规格几乎相同的 Leitz Phone 1 在日本的预购价相比于它的原版直接涨了 1000 美元之多，来到了 1700 美元（约合人民币 ¥11000） 。</p>\n<p>作为普通用户，这部手机发布带给我们最大的价值大概是：我们现在知道一枚徕卡 Logo 的可乐标，大约值 1000 美元了。</p>\n<h3>Defy 复刻</h3>\n<blockquote><p>这星期还真不缺抓人眼球的新机发布 ……</p></blockquote>\n<p>摩托罗拉 Defy 是一款在十一年前发布、主打防护的三防手机，相信不少爱好者还对它的名字印象深刻，如今的摩托罗拉虽然在历经 Google、联想多番易手之后，虽然在智能手机领域影响力早已不复当年，但近年来摩托罗拉一直有在忙着，将旗下过去多款经典设计手机借助现代技术来「复刻」：除了我们已经在去年看到的折叠屏 Razr「刀锋」之外，本周复刻版 Defy 也正式发布了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/article/c622482b04cf253b95bbf335fb35401f\"></figure><p>虽然有着来自摩托罗拉的响亮名号，但其实新版 Defy 外观设计上与前代关联性并不多，它是专业制造三防手机的 Bullitt 代工的产物：你或许没听说过他们，但他们曾经也为卡特彼勒（CAT）、路虎等品牌打造过 Android 手机，而且毫不意外的：这些手机卖点全部都是以三防为主。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/2b7fa94287acfb116353116b80397556.png\"></figure><p>回到新版 Defy 本身：它其实采用了双层外壳的设计，外层是橡胶 TPU 材质，屏幕材质为康宁大猩猩玻璃，支持 IP68 防尘防水，还通过了 MIL-STD-810H 军标测试：换言之就是非常皮实耐用，日常的跌落磕碰基本上不能伤它分毫。设计上还有一个挂绳孔，方便户外活动时固定手机。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/article/65c886619dbe0dc4a8e7e4a1a91ae155\"></figure><p>在内部硬件设计上，这部新 Defy 就不那么拿得出手了：它只搭载了高通骁龙 662 SoC，4GB + 64GB 存储组合。最高 4800 万像素的三摄组合，不支持 5G 网络，但有一个还算大的 5000mAh 电池，支持摩托罗拉涡轮快充技术（谢天谢地摩托罗拉至少还为它设计了 USB-C 接口）；而且作为一部在 2021 年发布的手机，新款 Defy 出厂搭载的居然是 2019 年的 Android 10 系统（摩托罗拉表示 Android 11 的更新会「在随后几个月到来」） ……</p>\n<p>简而言之，单看硬件规格，说这是一部从 2019 年穿越过来的手机真的是非常恰如其分了；即使是相比于同类产品，新款 Defy 也是一款情怀大于实际的产品，目前公布的售价是 279 英镑（约合 2513 人民币），暂未公布中国地区的上市计划以及售价，如果你曾经也对它憧憬过，或许 …… 也值得为情怀买单（至少比上面那个情怀要便宜的多）。</p>\n<h3>MIUI 版电池健康</h3>\n<p>上周，MIUI 官方微信公众号发文称将于近期开始「电池健康显示」功能的测试，类似 iOS 中的电池健康度功能。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/article/05c70c9a454dc40a34d7c492e714a550\"></figure><p>iOS 中的电池健康度显示用起来真的很方便，除了能让你直观地看到电池当前的性能之外，甚至还在二手 iPhone 交易中充当的重要的功能：一部 iPhone 的<strong>电池寿命在很多时候也能代表着一部手机的使用时长以及新旧程度</strong>，不少人在闲鱼购买二手 iPhone 时问一句「电池健康多少」已经成为了习惯（不过电池健康数据其实有奸商会通过各种方式伪造，这里就不展开讲了）。</p>\n<p>而在 Android 这边，其实也有不少可选择的应用，比如一加就曾推出过「一加诊断」 App 来帮助售后工程师查看手机电池情况，也有 <a href=\"https://play.google.com/store/apps/details?id=com.digibites.accubattery&amp;hl=en_US&amp;gl=US\" target=\"_blank\">AccuBattery</a> 这样的第三方电池效能管理 App，但仍然鲜见有 Android OEM 厂商会在手机系统中内置电池健康检测功能，这才让 MIUI 成了第一个吃螃蟹的 Android 系统。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/article/ce17442ba6b38b861158404e41fd8b6f\"></figure><p>但与 iOS 电池健康度显示精确到百分比不同的是，MIUI 中只给出了「一般」「正常」「良好」「极佳」四档电池健康度标准，当电池状况降至「一般」档位时，系统会弹出通知提示，提示用户应该前往附近的授权服务中心检测，如果在保修期内则可以免费更换电池。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/article/6e235d57a0ff4d07a182413f15c42e3d\"></figure><p>另一个不同之处在于：MIUI 的电池健康显示需要借助电池计量器这一硬件来实现，所以目前只有小米 11/ 小米10 系列，以及 Redmi K40 系列共计 11 款机型支持这一功能；但相信这一功能正式加入 MIUI 之后，大部分之后发布的小米手机都会支持这一功能 —— Redmi Note 10 Pro 就是首发支持这一功能的设备之一。</p>\n<h3>Android 地震预警系统</h3>\n<p>在今年 4 月，Google 就在希腊与新西兰测试了 Google Play 内置的地震警报系统，本周这一服务又在七个其他国家上线，包括东南亚，中亚以及东欧多个国家。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/article/b4ae8bb1d5a969969d4ae5ba6b66e0b0\"></figure><p>其实在这一系统正式上线之前，这套系统就已经准确预测了 2020 年 9 月发生在 Google 总部所在地加州洛杉矶的地震；根据 Google 披露的数据，这一基于 Google Play 的地震预警系统实际上是在以一种「众包」的模式在运行：这套系统组件会自动获取你的手机的加速度计数据，借此来检测地震产生的初始 P 波。并向 Google 的服务器发送一个模糊的位置信息，借此对地震波的震源、地震波覆盖范围作出评估，并在地震中真正具有破坏性的 S 波袭来前，为用户发出避灾预警。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/article/9be8d5bdc836df27e51c9d6dc77c09ab\"></figure><p>相比于目前地震监测网络所需要依赖的大量传感检测设备，Google 这套地震预警系统则是将每一部搭载 Google Play 的手机变成了传感器，这一由无数 Android 手机构成的监测网络，足以让 Google 打造出「世界上最大的地震预警网络」。</p>\n<p>除了最近新增的七个国家之外，Google 同时也表示：会在未来一年内会面向全球推出这一功能，但由于这一功能得以正常使用前提一个地区内有足够数量搭载 Google Play 服务的 Android 手机，所以未来中国大陆关于这一功能的动向也值得关注。</p>\n<h3>Google 调查 Android 滥杀后台问题</h3>\n<p>为了 Android 手机能保持流畅以及提升续航，几乎所有的 OEM 厂商都会在手机系统后台设定自动删除不必要的后台运行程序，但这一特性在很多年来一直被不少第三方 Android 系统滥用，将不少本应依赖后台进程来运行的应用进程杀掉。不堪其扰的开发者甚至创建一个专门的网站 <a href=\"https://dontkillmyapp.com/\" target=\"_blank\">DontKillMyApp</a> 来呼吁 OEM 厂商不要滥用这一机制。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/article/8821db75edaefcc3ea9afeff615746e1\"></figure><p>如今，Google 似乎终于开始想从源头入手解决这一问题：上周 Google 在社区发布了一份表单供开发者填写，这份表单中不少问题是与 OEM 厂商的后台管理策略有关：比如「如果你的应用受到运行限制，请尽可能提供更多细节」此类问题。</p>\n<p>除了问题之外，Google 还在这份表单中还直接列举了几个手机品牌，供开发者按图索骥：比如三星、一加、小米等品牌。</p>\n<p>「巧合」的是：这些恰好也是 <a href=\"https://dontkillmyapp.com/\" target=\"_blank\">DontKillMyApp</a> 榜单中高居榜首的几个 OEM 厂商；华硕、联想、魅族等厂商也榜上有名。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/article/6aada0e76ebee78081f40f8376ffcf68\"><figcaption>过去不少厂商 ROM 都爆出过滥杀后台的问题</figcaption></figure><p>对于第三方 Android 系统 、特别是国内 Android 生态来讲，在内存管理上为部分「小而美」大肆开绿灯已经是一种无奈之举，但许多中小开发者却遵循系统健康的开发规范，其后台运行服务却屡屡被手机系统滥杀，这早已是 Android 开发业内公开的秘密，希望未来 Google 能与 OEM 厂商一道，让 Android 内存管理尽早摆脱这种局面，在手机性能/电池续航之间找到平衡。</p>\n<h3>混乱的 Wear OS 更新</h3>\n<p>相比于一直非常热闹的 Android 12，同样是在 Google I/O 主题演讲中被介绍的新版 WearOS 在那之后其实就很少被讨论到了 …… 要说为什么，当然是因为根本没有任何 WearOS 智能手表用户收到演讲中承诺的任何功能更新，即使是那些非系统组件的更新：比如新版 YouTube Music、基于 Fitbit 运动算法的 Google Fit，如今也是连影子都没有。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/article/920a3166a284953ee291185487545f0d\"><figcaption>Google I/O 期间公布的 YouTube Music 应用界面</figcaption></figure><p>比起这些略显尴尬的情况，更让用户感到混乱的还有是否会为现有的智能手表推送新版 WearOS 更新的问题：由于 Google 官方就这一问题三缄其口，因此来自手表厂商的信息就成了系统更新的唯一来源：除了高通表示近两代智能手表 SoC Wear 4100/Wear 3100 都可以更新至新版 WearOS 之外，同样有 Google 股份背景的 Fossil 却声称「当前发布的所有手表都不会收到新版系统更新」，而出门问问（Mobvoi）则是已经表示 TicWatch Pro 3 会获得新版 WearOS 更新支持。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/article/719421eb090fe1d658c5d69b5cf638da\"></figure><p>虽然目前信息仍很繁杂，但可以得出的结论是：由于 WearOS 此次 3.0 大版本更新涉及到较多的系统底层改进（比如与三星联合优化的应用启动速度与续航提升等改进），所以并不能像 2.0 更新时仅通过软件更新推送给所有用户，对现有用户来讲，当前的手表是否会收到新版系统更新，仍然有赖于手表厂商的最终决定。</p>\n<p>而对于有意尝鲜 WearOS 智能手表的用户，Alan 目前能给出的唯一建议是：任何当前已经发布的 WearOS 手表都不值得购买，因为一大批新 WearOS 系统的手表发布已经在近在咫尺，本月底三星就将在 MWC 期间公布更多关于新款 Galaxy Watch 的更多信息，Fitbit 也早已宣布将在第三季度发布自家旗舰手表新品，这些重量级新品都非常值得期待，等等党还可以接着多等一阵子。</p>\n<h3>其他值得一提</h3>\n<ul><li>虽然三星在 2020 年推出了自家的文件传输服务 <a href=\"https://www.samsung.com/global/galaxy/what-is/quick-share/\" target=\"_blank\">Quick Share</a>，但从本周微博上的曝光照片看来，Galaxy 手机似乎也已经准备好加入国内的互传联盟了。</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/article/172a82b432220e89bdbaba9ffc1e2e5c\"></figure><ul><li>6 月 16 日凌晨三星网上商城因设置错误，出现了「满 200 减 4000」的神奇优惠券（其实应该是满 4000 减 200），直接让原价 ¥4799 的 Galaxy S21 5G 可以以 799 价格到手；最后这场事故以三星官方取消了全部订单，并补偿每个买家 ¥4000 为结局收场。</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/article/b0844978672e5b6fc70df3795b6f1c47\"></figure><ul><li>首款搭载 18GB RAM 的 Android 手机 —— 红魔 6 Pro 氘锋透明版已经在近期开启预售，Android 旗舰手机 RAM 正式迈进 20GB 似乎也已经近在咫尺了。</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/article/448d491b9ac566b554ca0d6bcc011db6\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/article/47726916fd35f26528d05776510bf5d6\"></figure><h2><a href=\"https://www.vox.com/recode/22539126/google-street-view-maps-dead-relatives\" target=\"_blank\">People keep finding late loved ones on Google Maps</a></h2>\n<p><strong>Recode</strong> ｜ 本周，一位来自英国的作家 Sherri Turne 在 Google 地图街景中发现了自己已经去世的亲人，再次让「在 Google 地图中寻找逝者」这个行为受到关注：由于 Google 地图街景数据更新间隔较长，很多人发现只要你耐心寻找足够长时间，你就很有可能看到偶然被街景摄像头拍到的逝者 —— 而且还有可能以这种方式永远留在 Google 地图中。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/4d9b6dceb707602635823ac98052b186.png\"><figcaption>Google 街景车 ｜Avalon/Universal Images Group via Getty Images</figcaption></figure><p>除了 Google 自己的街景车上路收集数据之外，Google 还允许用户上传自己的图像来补充自己的街景。虽然帮助人们记住死去的家人并不是 Google 地图的最重要用途，但 Google 也并没有阻止这种行为，反而在以各种方式去帮助这些用户以这种独特的方式纪念逝者。</p>\n<p>除了寻找逝去的亲人之外，由于 Google 地图近期还加入了「时间旅行」功能：可以以时间线的方式，查看一个地点过去数年的变迁，还有用户在这里寻找其他在现实世界已经消失的建筑：比如寻找已经被拆除的老房子。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/article/6334b09e0e1d7a744a6fb36c522639d7\"></figure><p>但正如 Recode 报道中指出的，这个故事中也不尽是令人感动的内容：逝者已去，他们的照片仍然留在 Google 地图上，这对于很多逝者家属来讲也不是一件可以轻易接受的事情 —— 尤其是在部分宗教文化中；以及随之而来的隐私问题：比如 2013 年加州一位儿子已经在车祸中丧生的父亲，就要求 Google 删除 Google 地图偶然录下的当时事故图像：在画面中逝者甚至仍然躺在地面上，这对于逝者家属来讲无疑于在伤口上撒盐。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/article/ca129861b6fae06d936f0837bf7c3995\"><figcaption>2013 年 「Google 地图车祸门」图像</figcaption></figure><p>这些「赛博遗物」所带来的现象以及引发的社会问题，其实在当下很多领域中都有出现，如何尽可能的帮助更多人回忆，避免其进一步伤害逝者亲人，是 Google 的在这一问题中所应该承担的责任。</p>\n<h2><a href=\"https://www.androidauthority.com/google-store-new-york-opinion-1236031/\" target=\"_blank\">Does Google really need a retail store?</a></h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/article/7d4cfb8c54ddb0134b80bcee8eca6865\"></figure><p><strong>Android Authority</strong> ｜Google 生态相比于 Apple 最大的问题在 2021 年还是是割裂的使用体验；所以即使 Google 有 Nest、Fitbit 这样在某一领域已经占据很高份额的品牌，也没办法带动同样在生态下的 Pixel、PixelBook 或是 Stadia 摆脱连年的亏损实现盈利；在这一点上同样在 Android 生态中的三星做得都比 Google 要优秀很多。</p>\n<p>因此 Google 需要在一个实际场所强调自己闭环生态的便利，让用户有更多机会实际体验到 Google 生态在「家居」中的产品实力，比如 Stadia 与 YouTube 等媒体平台的无缝体验，Android 与 ChromeOS 的衔接，Nest 智能音箱与更多 Google Assistant 智能家居的联动，所以在店里看到的大量各种暖光元素与木质家具，这些都是刻意布置出的居家效果。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/article/88c10c00398037ab97c85d7d6fcbdb8e\"></figure><p>Google 或许需要提高自己旗下品牌的知名度，但它的线下商店绝不只是为了卖货或是像天才吧一样提供维修服务，Google 更希望用户能在体验过后，留在自己的生态中 —— 就像 Mac、iPad、iPhone、Apple Watch 所做的那样。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/article/5a957afebae2a56f007df7ba136b296d\"></figure><p>Google 需要的不是 Apple Store，但要让更多用户愿意去尝试 Google 生态，Google 需要做的也不只是开业一家零售店这么简单。</p>\n<h2>\n<a href=\"https://www.engadget.com/google-pixel-buds-a-series-review-160054961.html\" target=\"_blank\">Pixel Buds A-Series review</a> &amp; <a href=\"https://www.engadget.com/sony-wf-1000xm4-review-160006474.html\">Sony WF-1000XM4 review</a>\n</h2>\n<p><strong>Engadget</strong> ｜ 这个月有两款颇受关注的新 TWS 耳机上市，分别 Pixel Buds A 系列以及索尼 WF-1000XM4，前者是 Google 最新推出的一款主打性价比的产品，后者则是真无线耳机品类中最早推出降噪功能的系列最新款，虽然两者同期发布，但实际上无论是定位还是售价差异都很大。</p>\n<p>Engadget 主站本月分别发布了两款耳机的上手体验：Pixel Buds A 售价 99 美元，相比原版少了无线充电，也少了音量控制，但仍然支持自适应音量控制、Google Assistant 自动翻译等 Google 特色软件服务；这也是 Pixel Buds 一直以来主要的卖点。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/article/e6b5646b1e9558fd9a91785e765d14cf\"></figure><p>而售价为 280 美元的 WF-1000XM4 不仅相比前代 XM3 卖得更昂贵，而且在设计上也做出重大的改变：XM4 一改前三代一直被吐槽很多的粗旷外观，充电收纳盒体积相比于前代小了近 40%，耳机本身体积也缩小了 10%。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/article/e62f00c26b77bec7c93661db8c6cc54c\"></figure><p>在软件上，XM4 新增了 Speak-to-Chat 功能，当耳机检测到你在说话时可以自动暂停音乐的播放，并暂时关闭降噪模式，当结束对话几秒后再次恢复降噪模式，这看起来是个非常实用的功能，但 Engadget 编辑在测试中发现它并不是能很好地分辨咳嗽与说话的区别 ……</p>\n<p>除此之外，XM4 在主动降噪以及电池续航上都有提升，Engadget 的编辑还对 XM4 的通话质量效果给出了很高的评价。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/article/cc8a9434d83d91995a8d6aa923c5d39d\"></figure><ul><li>iOS 版 YouTube 正式获得了画中画显示支持，不同于 Android 版只有订阅了 Premium 会员的用户才能启用画中画显示，iOS 版 YouTube 是所有用户都可以在 iOS 上正常启用这一功能，Google 公告中也已经确认了这一点，或许未来更多国家及 Android 设备非会员用户也都能获得这一特性。</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/article/1af96e04b3b7b814a7281d3f2e7699a3\"></figure><ul><li>Android 版 Apple Music 本周也迎来了 WWDC 之后的首次大更新：加入了空间音频/杜比全景声功能支持，同时也迎来了无损音频（24位/48kHz）及高解析度无损音频（24位/192kHz）内容的加入。但目前拥有这些新功能的 3.6 版本暂时只在 Play Store 的 Beta 测试通道发布，没有加入测试计划的用家可能要多等一段时间了。<br> </li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/article/e1ea45389b53f17baf8295b897a1294f\"></figure><ul><li>自去年开始测试阶段之后，本周 Google Messages 开始为所有使用增强版 RCS 的用户启用端到端加密，启用之后对话框中会有一个小锁图标提示（如下图）；不过这一政策更新目前还仅限于一对一聊天，而且更大的前提还有你所使用的电信运营商支持 RCS 短信。</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/article/8b21c15ed05cf79f32328bfa487beba2\"></figure><h2>彩蛋</h2>\n<p>Google 园区中供员工休息的椅子采用了 Nest home mini 智能音箱造型的设计，不仅形状相同，就连配色都照实际音箱颜色做了调整，堪称完美复刻👀</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/22/article/bd1cf1cfaf2a3c940c04ba76f28dafb8\"></figure><p><strong>下周见～</strong></p>\n<p>反馈请联系 Email：<code>editorinchief@safaricheung.pro</code></p>\n<p><strong>鸣谢</strong>：</p>\n<ul>\n<li><a href=\"https://t.me/NewlearnerChannel\" target=\"_blank\">Newlearnerの自留地</a></li>\n<li>Designed by Update Media</li>\n</ul>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67370"},{"title":"2021 年最适合你的翻译 App 是什么？你可能需要这份指南","date":"2021-06-23 04:00:20","description":"\n<p>从巴别塔的故事，我们就能对语言不通造成的障碍略知一二。到了现代，人工智能与机器学习技术把翻译这一工作也交给了机器来完成。从一开始的规则主导，到现在的学习主导，机器翻译工具的演进也经历了许多次的变化与革新。上次听说的一个机器翻译中的「大新闻」，似乎就是横空出世的 <a href=\"https://www.deepl.com/\" target=\"_blank\">DeepL 翻译工具</a> 了。不知道为什么，这款翻译工具在我身边的同学和朋友们中热度很高，甚至超过了老牌的 Google 翻译。看了一圈报道下来，对于 DeepL，大家普遍认为它的翻译「比较自然」。</p>\n<p>已经有一些文章讨论过通过翻译工具翻译出的文本质量的好与坏。<a href=\"https://harveyjanson.github.io/\">Harvey</a> 发在少数派的文章<a href=\"https://sspai.com/post/60086\">《2020 年的机器翻译能用了吗？》</a>中，作者对三种文本（表达、信息和感召）、两种翻译方向（英译汉、汉译英）在六家翻译平台上的翻译表现进行了详细且客观的评价，十分值得参考。当然，过去了一年，可能各个翻译平台的能力都有了进一步的提升，但是飞跃性的改进可以说并不存在。</p>\n<p>但是，对于一个非专业的翻译工具来说，好用的标准，不仅仅是翻译的准确。我们想要比较的，更多侧重在翻译工具的易用性与功能性上，也就是说，它们能够在多大程度上照顾到我们的实际翻译需求。或许我们还是应该想想：我们为什么要用翻译工具？</p>\n<p>个人认为，一个非翻译专业的人士可能在以下三个方面需要翻译工具：</p>\n<ol>\n<li>\n<strong>学习需求。</strong>查单词、翻译长难句乃至论文等等，可能与之相关。</li>\n<li>\n<strong>工作需求。</strong>文档、网页的大段文字翻译乃至一些可能需要的编译工作。</li>\n<li>\n<strong>交际需求。</strong>旅游、与外国人交流等等。</li>\n</ol>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/18/5e6f3c02bf861fd057973312e43f66b6.jpeg\"><figcaption>翻译工具常见的三个场景</figcaption></figure><p>从这三种不同的场景出发，结合不同的翻译工具提供的具体功能以及实际体验，我们选择了 Google Translate、DeepL、Apple 翻译、百度翻译和有道翻译进行功能上的比较，结合实际体验，希望可以为翻译工具的选择提供一些参考。</p>\n<h2>基本项：语言支持与平台支持</h2>\n<p>作为翻译工具，多语言的支持自然是十分重要的。尽管我们最常用的可能就是英汉互译，但是其实各家翻译工具都是支持多种语言文字的，只是在支持的全面程度上有一定的区别。其中，百度翻译的支持最为广泛，支持超过 200 种语言的翻译；Google Translate 则是 108 种。DeepL 是 26 种语言，有道翻译是 14 种语言，iOS 的翻译在 iOS 15 测试版中是 11 种。</p>\n<p>值得注意的是，支持的语言数量与是否支持互译，是有一定的区别的。例如有道翻译网页版，仅仅支持从中文翻译到外语和从外语翻译到中文，并不支持外语之间的互相翻译。DeepL 也存在这种情况，有一些语言对的翻译需要以英语作为中介。</p>\n<p>不过，即使是支持语言数量最少的翻译工具（Apple 翻译），其 11 种语言也已经覆盖了联合国的 6 种工作语言（中、英、阿、俄、法、西），其他工具自不用说，应该是可以照顾到大部分用户的几乎全部翻译需求了。</p>\n<p>所有的翻译平台也都支持自动检测输入语言，可能只有极少数的情况下我们才需要手动制定具体的输入语言。</p>\n<p>在平台支持方面，除了 Apple 翻译之外的所有翻译工具都具有网页端，可以在网页上进行即时的语段和篇章翻译。Google Translate、有道翻译和百度翻译同时有移动客户端；DeepL、有道翻译和百度翻译还有 PC 上的客户端，支持取词等操作。如果在工作流中不想时刻打开浏览器窗口进行翻译的话，客户端其实是一个不错的选择。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/23/9fa6cb194532530a98309f576ce3a17d.jpg\"><figcaption>五种翻译工具的平台支持一览</figcaption></figure><h2>常见功能</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/18/742f1ae2347a45232d6064b001be2593.jpeg\"><figcaption>五种翻译工具常见功能的比较</figcaption></figure><h3>多语言词典</h3>\n<p>翻译工具也可以当做词典来用。如果你仅在翻译工具中打进一个词，那么由于没有上下文语境，翻译工具通常会提供词典可以供你选择词义，或者是直接提供目标语言的释义。</p>\n<p>比如，我查询 fast 这个词，在 Google 翻译、DeepL、Apple 翻译、有道翻译和百度翻译中都可以显示比较简明的释义，告诉我 fast 除了中文「快速」这个形容词 / 副词意义之外，还可以作动词「绝食」讲。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/18/27e54ba414756d94f4adf0641f64ddd8.png\"><figcaption>Google 翻译中的单词定义</figcaption></figure><p>不同的翻译工具，在语言的支持上也有不同。比如，百度翻译提供英文释义，但是不能提供俄语的释义。</p>\n<h3>文档翻译</h3>\n<p>整篇文档的上传翻译功能，只有 Apple 翻译没有提供。在 Google Translate、DeepL 和百度翻译的网页端，都可以上传文档。此外，有道翻译没有在网页提供文档上传翻译，但是其移动端 app 有这个功能。在 Apple 翻译中，这尤其不好操作。不过，在 iOS / iPadOS 15 以及 macOS Monterey 中，翻译被内置成为了系统服务，可以选择一段话进行翻译，可以说是一定程度上弥补了这一功能的缺失。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/18/9ab8a0194fd20498ce98fd7bcd82f09b.png\"><figcaption>百度翻译的文档上传功能</figcaption></figure><p>Google Translate 的网页端支持 .doc、.docx、.odf、.pdf、.ppt、.pptx、.ps、.rtf、.txt、.xls 或 .xlsx，但显然，只有其中的文本部分可以被翻译；DeepL 则支持 docx 和 pptx 两种文件格式的翻译；有道翻译则支持在手机上上传 docx 或者 pdf 格式的文档，但是必须<i>登录之后</i>才能够上传文件。百度翻译则可以上传包括 Word、PowerPoint、Excel 乃至图片文件。</p>\n<p>翻译后，Google Translate 会以网页的形式返回翻译结果；但是 DeepL 则会提供翻译好的文件下载，如果是免费版 DeepL，翻译后的文字会被锁定、不能编辑。百度翻译会呈现翻译前后的对比，并且可以高亮具体的句子，不过文档的导出，目前写着「限时免费」。</p>\n<h3>文本的 OCR 识别</h3>\n<p>Google Translate 在增强现实的翻译方面，可以说是走在了最前列。其移动客户端可以支持中文在内的多种语言拍照与 OCR 翻译。只要将相机指向有文字的区域，就可以即时显示翻译结果，翻译结果也会融入当前的环境中，以与原文类似的方式显示，这可能是它体验最好的地方。百度翻译与有道翻译官的手机 app 也都支持 AR 翻译，即直接在相机界面显示翻译结果，但是能够实时进行 OCR 的文字有限（比如，有道翻译可以支持中英文的 AR 翻译，但是不支持俄文的）。</p>\n<p>下图原文网页：<a href=\"https://www.bbc.com/news/live/world-57246216/page/5\">BBC News</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/18/3f007fe2e21db84d87c31735b7c48d6c.jpeg\"><figcaption>百度、有道和 Google 的「AR 翻译」</figcaption></figure><p>在配备 A12 Bionic 及以上 SoC 的 iPhone 和 iPad，以及配备 Apple M1 处理器的 Mac 电脑中，即将在 iOS / iPadOS 15 和 macOS Monterey 中发布的实况文本功能也将能够识别拍摄文本并提供系统全局的翻译功能；但是相比 Google 的增强现实翻译，体验还是要差一些。但从另一方面来说，更新之后的 Apple 翻译可以直接翻译相册中任何图片中被识别到的文字，所以也是十分强大的。</p>\n<h3>对话交传与转录翻译</h3>\n<p>除了 DeepL 外，其他四款翻译工具都在不同程度上支持主要语言的对话交替传译乃至篇章的转录翻译。Google Translate 的 app 中，你可以选择直接进行对话，或者是打开转录功能，把别人说的一段文字实时翻译成自己想要的语言。</p>\n<p>iOS / iPadOS 15 的 Apple 翻译以气泡的方式显示对话，并且可以自动识别当前说话的语言是哪一种，这一功能也支持 Apple 翻译可以翻译的所有语言。有道翻译官和百度翻译在对话交传和转录翻译功能上也大致类似。这一功能能够方便与讲不同语言的人沟通交流，所以还是十分实用的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/18/e5f4d196e092249d3641e6671f69e15f.jpeg\"><figcaption>四种翻译软件提供的转录翻译功能</figcaption></figure><p>不过，需要注意的是，这种翻译方式相比手写输入，因为涉及到语音识别，所以准确率是需要考虑的因素。目前来看，几家翻译工具的中英文语音识别都难以做到完全准确，因此这项功能的便利性也的确打了折扣。在语言支持方面，也以 Google 翻译为最多。</p>\n<h3>多语种输入方式</h3>\n<p>世界上的语言使用许多种不同的文字，我们并不想每次翻译的时候，都去系统设置中添加键盘。Google Translate 可以利用网页端的软键盘进行多语言输入，在移动端也提供了可以自动识别多种语言的手写输入方式。这在需要翻译日语、韩语和汉语的时候极其方便，但是可识别的语言远不止这三种。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/18/5315bfd3b95873f2e2646051c44557dd.jpeg\"></figure><p>Apple 翻译也提供了类似的功能。即使没有在 iOS 系统中添加对应语种的键盘，在翻译 app 中选择语言之后，适合输入该语言的系统键盘也会自动弹出。</p>\n<h2>对应需求……</h2>\n<p>翻译是否准确，在进行人工的翻译时自然是无比重要的。但是，以机器翻译目前的水平，准确性难以达到 100%，而翻译后文本的自然度更是难以保证。《2020 年的机器翻译能用了吗？》一文已经提到，「（翻译工具）到底能不能用？怎么用？用了之后能不能直接拿译文去用？——这一切问题的答案都取决于你的需求。」</p>\n<p>回到文章的开头，我们提到非专业的翻译需求通常有三类：学习、工作和交流。其实，在这三种需求下，我个人认为，其实追求机器翻译“准确和自然”本身的意义并不很大。以目前的机器翻译水平，只能是一种辅助，用对了或许可以提高效率，但是绝对不能滥用。</p>\n<h3>如果你需要用翻译工具学习：</h3>\n<p>如果翻译工具是你学习英语乃至其他非通用语种的帮助工具，那么几乎所有翻译工具都提供的多语词典功能的确能够帮到你。在这个方面，我想 Google 翻译可能做得最好：它能够根据单词的词类对释义做简要分类，释义也足够简明和准确。</p>\n<p>而如果你需要利用翻译工具看论文，那么我并不推荐使用翻译工具直接以上传整个文档的方式进行翻译。首先，论文通常学术性较强、术语较多，大多数机器翻译平台都只能处理通用型文本，对术语较多的情况绝对是难以应付；其次，学术论文的写作方式也决定了你的阅读不可能面面俱到，而是对重点攻坚克难，所以对整篇文档进行翻译耗时耗力不说，也可能影响你理解的结果。我认为，比较正确的方式是，可以把论文的部分内容输入进去看个大概的翻译，如果需要精细研读，再对原文进行仔细研究。如果原文实在难以理解，则应该咨询老师或者其他专业人士。</p>\n<p>比如下面这一段文字<sup class=\"ss-footnote\" href=\"\" title=\"Gass S M, Selinker L. Language Transfer in Language Learning. Issues in Second Language Research[M]. Newbury House Publishers, Inc., Rowley MA 0l969, 1983.\" footnote-id=\"1\">1</sup>：</p>\n<blockquote><p>In 1957 Robert Lado claimed that individuals tend to transfer the forms and meanings, and the distribution of forms and meanings of their native language and culture to the foreign language and culture - both productively when attempting to speak the language and to act in the culture, and receptively when attempting to grasp and understand the language and the culture as practised by natives (p. 2).</p></blockquote>\n<p><strong>DeepL 的翻译是：</strong></p>\n<p>1957年，罗伯特-拉多声称，个人倾向于将其母语和文化的形式和意义以及形式和意义的分布转移到外国语言和文化中--当试图说该语言和在该文化中行动时，是生产性的，而当试图掌握和理解本国人所实践的语言和文化时，是接受性的（第2页）。</p>\n<p><strong>Google Translate 的翻译是：</strong></p>\n<p>1957年，Robert Lado声称，个人倾向于转移形式和含义，以及他们母语和文化的形式和含义分布到外语和文化 - 试图说语言并在文化中行动， 并在试图掌握和理解当地人实践的语言和文化时接受（第2页）。</p>\n<p>这里，如果是进行较长段落的翻译，那么我推荐 DeepL。DeepL 翻译的准确性和自然度都较高，界面使用简单，尽管免费版有 5000 字符的限制，但是基本够用。上面举的例子，也是如此。Google Translate 不仅有漏译的问题，也不够自然。其他的平台中，百度翻译因为有一些专业领域的文本训练集，可以针对某些专业文本进行优化，值得尝试。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/18/5d6c66bb3016c669cc34da1be275531e.png\"><figcaption>DeepL</figcaption></figure><h3>如果你在工作中偶尔用到翻译：</h3>\n<p>翻译工具最令人工翻译无法企及的一点，就是大批次的翻译都可以在几乎瞬间完成，同时准确性能够达到及格的水平。机器翻译后再进行人工校对，有时候不失为一种提高效率的方式。一些工作中可能涉及的简单、文风一致但是非常大量的公文，可以使用机器翻译进行统一批量的翻译后再校对。</p>\n<p>如果在工作中偶尔需要对文档或者网页进行翻译，那么 Google 翻译和 DeepL 可能都是比较好的选择。Google 翻译可以在网页上传文档，同时也可以直接进行网页的翻译，并且以高亮的形式显示原文。DeepL 尽管没有网页插件，但是翻译质量可能比 Google 翻译要好。此外，Apple 翻译也内置于 Safari 中，如果你用 Apple 设备阅读外文网页，也可以用来翻译，但是支持的语言较少。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/18/843b06397427a6eca500299d78a3c79c.png\"><figcaption>Apple 翻译后的少数派网页</figcaption></figure><h3>如果你在交流中需要用到翻译：</h3>\n<p>如果是在交流中需要用到翻译，我想 Apple 翻译和 Google 翻译应该可以解决很大一部分的问题。此外，有道翻译官和百度翻译的对话功能也很实用，但是语言支持比较少，也不支持语言的识别，需要一直操作手机才能使用 —— 尽管涉及中文的结果说不定会更好一些。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/18/fc266b2d5bcdd93d89a07b72e09f2708.jpeg\"><figcaption>几种 app 的双语对话</figcaption></figure><p>Apple 翻译和 Google 翻译的对话功能都可以自动识别两种语言，并且实时把翻译显示在屏幕上，说完后也会将文本转换成语音读出来。这在交流中会更方便一些，因为不用同时操作手机。对话一般比较日常，所以翻译的准确性一般尚可；如果翻译的结果令双方难以理解，那么可以试着换一种说法继续。</p>\n<h2>写在最后</h2>\n<p>综合而言，我们还是认为 Google 翻译功能最为强大，体验也最为优秀，但是在翻译的准确度和自然度上的确饱受诟病。其次，有道翻译官在其 app 和网页上的抢眼表现，以及涉及中文翻译的准确性上也的确十分令人满意。DeepL 或许在进行各类翻译时能够更好地整合原文意思、以更自然的方式表达，但是功能上的确有所欠缺。Apple 翻译被整合进了 iOS / iPadOS 乃至 macOS，无缝切换的体验可见 Apple 在生态方面的优势，但是其他平台中完全没有使用的机会，它即使优秀也似乎有些有劲使不出。百度翻译声称 200+ 种语言的翻译水分几何很难说，其移动 app 也比较臃肿，但是它是今天测试中唯一一个拥有不同领域专业文本翻译功能的翻译软件，网页端的体验也不错。</p>\n<p>此外，我们试着避开对翻译的准确性的讨论去了解翻译工具的具体功能，但是却发现翻译的准确性可谓是「房间里的大象」—— 随着各个翻译软件的功能日益趋同，其翻译结果的品质似乎变得重要起来。然而，目前的翻译软件都只能做到一定的准确和自然，在当下强求翻译软件「信达雅」既不可能，也没有必要。</p>\n<p>因此，我们建议你根据自己的使用习惯和具体需求来选择翻译软件，我们今天得到的结论仅供参考。或许真的会有机器翻译代替人工翻译的那一天，人类也真的能够建成通天的巴别塔；但是，那一天还远远没有到来。</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n","link":"https://sspai.com/post/67303"},{"title":"让人人都能表达创意的专业课程：Today at Apple 创想营开学了","date":"2021-06-23 01:23:37","description":"\n<p>6 月 23 日，Apple 正式宣布联合中国扶贫基金会、友成企业家扶贫基金会推出「Today at Apple 创想营」项目，旨在为怀揣创意梦想的青年打工者提供教育机会，通过提供专业课程、实践机会、职业规划指导，帮助他们实现梦想。</p>\n<h2>打破社会阻碍，人人都能受益其中</h2>\n<p>Today at Apple 是 Apple 在 2017 年推出的免费教育项目，通过在 Apple Store 推出免费学习课程，帮助用户在摄影、视频、音乐、艺术与设计等领域了解 Apple 设备、App 的各种功能和使用技巧。</p>\n<p>Today at Apple 创想营则是这一项目的进一步延伸，Apple 将与来自全球的艺术家、非营利性组织合作伙伴一起提供技能培训、创意资源，通过 Apple 设备与 App，帮助青年用户发挥创意、创造作品，获得成长与成功的机会。</p>\n<p>即日起，北京将和洛杉矶作为 Today at Apple 创想营的全球首批启动城市，聚焦摄影和视频、音乐、App 设计主题，为学员提供为期 12 周的专业课程教学。首批参加 Today at Apple 创想营的学员来自全国各地，是由中国扶贫基金会和友成企业家扶贫基金会招募的青年打工者学员，本次课程将为他们提供专业教学、导师答疑、成果实践等环节，并带领他们了解行业工作环境和流程，获得潜在的工作机会。Today at Apple 创想营也将于今年晚些时候在曼谷、伦敦、芝加哥和华盛顿特区等城市陆续推出。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/23/9f60a0c1263337ec3b6ec4ff69e1784b.png\"></figure><p>除了为首批学员打造的专业课程，Apple 也与艺术家导师一起向所有人推出了免费公开课程，课程将同样围绕摄影和视频、音乐、App 设计主题，教授 Apple 设备、App 的专业功能和使用技巧，你可以通过 <a href=\"https://www.apple.com.cn/today/collection/creative-studios-beijing/sanlitun/\" target=\"_blank\">Apple 官网</a> 或者 Apple Store 应用进行报名。首批创想营学员也会和报名者一起，参与和学习这些公开课程。</p>\n<span class=\"ss-application\" app-id=\"2925\"> </span><h2>忘掉专业门槛，人人都能挥洒创意</h2>\n<p>Today at Apple 创想营将以摄影和视频、音乐、App 设计作为主题开展课程，专业摄影师 Eric Zhang、「刺猬乐队」鼓手石璐、应用开发团队「泰格优思」创始人孙勇将分别作为 3 个领域的主要导师，带领学员完成课程、创造作品。Today at Apple 创想营的开幕仪式上，3 位艺术家也以导师的身份演讲开学寄语。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/23/5454fe3cd769228272f40b37e195b4de.png\"></figure><p>Eric Zhang 目前是一名自由摄影师，他的摄影作品曾获 iPhone「夜间摄影」大赛奖项，还被用于 iPhone 特别发布活动现场，也是 Apple、徕卡相机等品牌的合作摄影师。作为摄影和视频主题课程的主要导师，Eric Zhang 表示要让学员放下对于「专业」的顾虑，通过 iPhone 这样的日常设备给予创作启发，让生活中的不确定性 / 可能性成为灵感来源。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/23/d515e5b7d336460a95c8bb6aea8291d2.png\"><figcaption>Eric Zhang</figcaption></figure><p>课程组织方面，Eric Zhang 将从 iPhone 的拍照和摄影技巧开始，与刘虔、flypig 等专业影像工作者一起，教授建筑摄影、短视频、Vlog 等特定场景方面的拍摄技巧，学员也将与导师一起，参观《抖音》公司，了解专业视频工具团队的工作环境和流程。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/23/924ea8ed3a0b74a377360d2080f61d75.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>导师 flypig (中) 也到场参加 Today at Apple 创想营开幕仪式</figcaption></figure><p>国内知名乐队《刺猬乐队》鼓手石璐将作为音乐主题课程的主要导师，课程将从《库乐队》App 的使用入门作为起点，循序渐进地教授歌单收集、乐器入门、编曲创作、MV 拍摄、专辑封面制作等方面的知识。石璐还将带着学员参观太合音乐集团，从台前到幕后了解音乐行业的方方面面、音乐作品的创作流程。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/23/49a846a51221e850fe1938a13d79d1d9.png\"><figcaption>石璐</figcaption></figure><p>石璐告诉我们，学习音乐最重要的一步是开始，其次是坚持。将近 20 年的音乐从业生涯，石璐也没想到能有如今的成绩。石璐认为，如今像 iPhone、iPad 和 Mac 等设备为音乐创作提供了更多可能，学员将有更多在音乐领域从业的机会，也更有可能创作出成功的音乐作品。</p>\n<p>「泰格优思」是国内知名的应用开发团队，旗下 App 皆以精致设计和精美动效闻名，《榫卯》App 还曾获得 App Store 年度优秀 App 奖项。创始人孙勇是一位中华传统文化爱好者，也是一位专业设计师，他将从利用 iPad 上的备忘录 App 记录想法开始，为学员呈现开发一款 App 的完整流程，并与 flypig、《剪映》App 的产品经理等专业人士一起，传授界面规划、交互设计等方面的专业知识。参与 App 设计课程的学员，同样将获得机会参观《抖音》公司，了解一款专业 App 团队的工作环境和流程。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/23/8716eb6e021e5d68f304e120f40cafd7.png\"><figcaption>孙勇</figcaption></figure><p>用好手中的设备与 App，人人都能挥洒创意、实现想法，3 位导师的开学寄语向我们展示了这一点，也是 Apple 希望传递的理念。对于课程结束之后，学员将会创作出怎样的作品，3 位导师均表示出了很高的期待，也希望参加公开课程的所有用户，能够通过实际作品带给我们惊喜。</p>\n<h2>连接所有人，教育令彼此深受鼓舞</h2>\n<p>在 Today at Apple 创想营开幕仪式上，Apple 全球副总裁、大中华区董事总经理葛越也出席活动并发表演讲。葛越表示，教育是 Apple 的 DNA，通过技术、平台、产品、服务、生态系统、免费课程，Apple 一直致力于投资教育，为不同地区、职业的人群提供学习机会，帮助人们实现梦想、改变未来。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/23/05c4ea9b3aba012676d3406aef12ee29.png\"></figure><p>授人以鱼不如授人以渔，通过 Today at Apple 项目，Apple 希望连接不同背景的人群，为他们提供交流机会，帮他们发现创意主题，给他们实现创意与理想的舞台。在通过教育赋能青年创造者的同时，葛越认为青年用户对于 Apple 产品和服务的喜爱，以及利用它们表达创意的方式，也反过来令 Apple 与合作伙伴们深受鼓舞。</p>\n<p>最后，葛越再次祝贺了 Today at Apple 创想营的正式启动，表达了对于这项计划的愿景，希望更多人能够参与到 Today at Apple 创想营课程，实现创意和理想，通过科技让世界更加美好。</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67376"},{"title":"派早报：Today at Apple 创想营正式启动 、《守望先锋》开启跨平台试玩测试","date":"2021-06-23 01:01:29","description":"\n<h2>Today at Apple 创想营在北京正式启动 </h2>\n<p>6 月 23 日，Apple 正式宣布联合中国扶贫基金会、友成企业家扶贫基金会推出「Today at Apple 创想营」项目，旨在为怀揣创意梦想的青年打工者提供教育机会，通过提供专业课程、实践机会、职业规划指导，帮助他们实现梦想。 </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/23/1d24c922b2096e94b434b87eb6179ecc.jpg\"><figcaption>在北京，参与者将与包括 iPhone 摄影师张雨、鼓手石璐与 app 设计师孙勇在内的导师们学习。</figcaption></figure><p>Today at Apple 将以摄影与视频、音乐、App 设计为主题开设系列课程，职业摄影师 Eric Zhang、《刺猬乐队》鼓手石璐、App 设计师孙勇将分别作为 3 个主题课程的主要导师，与众多艺术家一起推出系列课程，学员还将获得与导师直接交流、参观相关领域专业公司的机会。Today at Apple 创想营也向所有人推出了免费公开课程，可以通过 Apple 官网或者 Apple Store 应用进行报名。<a href=\"https://www.apple.com.cn/newsroom/2021/06/apple-launches-today-at-apple-creative-studios/\" target=\"_blank\">来源</a></p>\n<h2>《守望先锋》开启跨平台试玩测试</h2>\n<p>6 月 22 日，守望先锋开启跨平台试玩测试，PC、PlayStation、Nintendo、Xbox 玩家可以共用联机游戏，目前只涉及快速游戏、街机和自定义游戏三种模式。<a href=\"https://www.theverge.com/2021/6/22/22545579/overwatch-cross-play-beta-playstation-xbox-switch-pc-available-now\" target=\"_blank\">来源</a></p>\n<h2>富士康为 iPhone 13 组装工人提供特项奖金</h2>\n<p>6 月 22 日，富士康宣布将向愿意返回中国郑州工厂参与 iPhone 13 项目组装的工人提供高达 8,000 元的激励奖金，该项目奖金也是目前郑州工厂 2010 年以来的最高水平。<a href=\"https://www.macrumors.com/2021/06/22/foxconn-iphone-13-signing-bonuses/\" target=\"_blank\">来源</a></p>\n<h2>小米电视 6 官宣将于 6 月 28 日正式发布</h2>\n<p>6 月 21 日小米官微正式宣布将推出小米电视 6，并在 6 月 28 日下午 2 点举行画质双旗舰见面会，此前小米官方曾透露称小米电视 6 的内部代号为「无冕大师」，官方称将挑战万元画质天花板新高度，小米电视 6 至尊版则全系百级分区起步，高端 LCD 画质，支持杜比视界 IQ 与 IMAX Enhanced。<a href=\"https://weibo.com/2950733213/KllQrua01?type=comment#_rnd1624407871764\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/23/article/7a9b3f8811e91c4953f6a435a54a70ec\"></figure><h2>Brave 搜索推出 Beta 版，主打隐私安全</h2>\n<p>Brave 于 6 月 22 日正式推出其测试版搜索引擎，相比 Google 等搜索引擎，Brave 搜索主打隐私安全，通过独立性的指标来确保搜索算法不存在偏见，并由社区推动来提升和改进搜索结果，你可以通过 Brave 浏览器或者直接通过<a href=\"https://search.brave.com/\" target=\"_blank\">网址访问</a>，测试版目前没有任何广告，未来正式版将提供广告呈现的选项。<a href=\"https://www.macrumors.com/2021/06/22/brave-search-beta-now-available/\" target=\"_blank\">来源</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67377"},{"title":"把想看的内容读给你听，近乎完美的 TTS 阅读器：声之梦朗读器","date":"2021-06-22 08:30:00","description":"\n<p><strong>编注：</strong>顾伶磊是一位视力功能障碍者，先天性失明。顾伶磊目前主要在残联做电脑培训类工作，通过培训其他视障者，让他们学习怎么使用电脑，了解更广阔的互联网世界。</p>\n<p>作为长期关注科技与应用领域的专业用户，顾伶磊是 2021 年度 Apple Design Award 设计奖得主《声之梦朗读器》的中文版译者。因此，少数派特地邀请顾伶磊，以用户的角度介绍这款设计奖得主 App，希望向你展示这款 App 的独特之处，以及它为视障用户这一特殊群体带来的便利。</p>\n<p>本文经过顾伶磊授权，在不改变文章原意的前提下，由少数派优化排版并配图。</p>\n<hr>\n<p>前不久，2021 年 Apple Design Award 设计大奖正式揭晓了各大奖项的最终名单。很多人可能注意到了，一款 TTS 阅读器 App《声之梦朗读器》荣获了「最佳包容性应用」奖项。</p>\n<p><strong>关联阅读：</strong><a href=\"https://sspai.com/post/67165\" target=\"_blank\">Apple Design Award 年度设计大奖揭晓，这 12 款 App 是今年的赢家</a></p>\n<p>你可能会好奇，售价 ¥128、还不支持试用的《声之梦朗读器》是一款怎样的应用？它为什么能够获奖？</p>\n<p>作为《声之梦朗读器》的官方中文翻译者，今天我就来给大家介绍一下它的特别之处。</p>\n<figure class=\"ss-imgRows\" figcaption=\"主界面\"><img src=\"https://cdn.sspai.com/2021/06/21/8b41077ff9ebc8cbad1e3ac6b73df045.PNG\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/06/21/5f33a71871b4a989a307113cc12c1d22.PNG\" alt=\"\"></figure><h2>TTS 阅读器</h2>\n<p>首先，解释一下什么是 TTS 阅读器。日常生活中，我们主要通过视觉来阅读书本和电子设备中的信息，TTS (Text to Speech) 就是文本转语音，TTS 阅读器的作用是将我们通过视觉获取的文字信息转换为可以用听觉来获取的语音，让我们可以暂时解放视觉、用听的方式来获取需要的信息。</p>\n<p>《声之梦朗读器》就是这样一款可以将文字内容转换为语音的 TTS 阅读器。</p>\n<h2>丰富的语言和格式支持</h2>\n<p>作为一款 TTS 阅读器，能朗读内容的多少决定了它的实用性。《声之梦朗读器》支持全球近 30 个国家和地区的语言，并且支持来自系统内置与第三方厂商的 200 多款不同的付费声音库，以自动识别并朗读内容。</p>\n<figure class=\"ss-imgRows\" figcaption=\"部分可用的声音\"><img src=\"https://cdn.sspai.com/2021/06/21/a41d855a5dfaa495f01b6a8f36f1322c.PNG\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/06/21/b68d06d13ed145943a0832a33484e309.PNG\" alt=\"\"></figure><p>当我们打开一本书或一个文档，并点下播放按钮时，应用就可以调用该书籍语言对应的系统音库来朗读显示的内容了。你也可以手动为它指定你喜欢的系统内置音库或者第三方声音。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/21/cd7277671c14a4863ebf46760553a3c9.PNG\"><figcaption>书籍页面普通模式</figcaption></figure><p>支持的格式方面，《声之梦朗读器》除了和其他同类本地阅读应用一样支持 TXT 文本的朗读外，还支持其它许多种格式的文件的朗读，支持的格式包括了：RTF、DOC、DOCX、PPT、PPTX、EPUB、Pages、Keynote、Google Doc、HTM、HTML、PDF、Web Archive 等等。</p>\n<p>其中对于 PDF 的支持尤其值得一提。对于文字版 PDF，声之梦可以直接朗读，而图片版 PDF，声之梦会利用先进的 OCR 引擎提取图片中的文本来进行朗读，不过这项功能暂不支持中文。</p>\n<p>更为有意思的是，声之梦甚至支持了常规的音频格式 MP3、MP4 和 M4A。你甚至还可以将一部有声小说打包成 ZIP 格式的压缩包导入到声之梦朗读器中进行阅读。整个压缩包会被作为一本单独的书籍显示，应用会将 ZIP 压缩包的名称作为小说名，将里面的每一个文件作为一个单独的章节显示在打开的书籍页面上，使用起来十分方便。</p>\n<h2>多样的导入方式和内容来源</h2>\n<p>除了支持内容的多少外，决定 TTS 阅读应用是否好用的另一个很关键的因素就是它的导入功能是否方便，是否能让我们通过各种方式便捷地导入想要阅读的文件，《声之梦朗读器》在这方面无疑是做的非常出色的。</p>\n<p>应用内的添加界面不但支持常见的 iOS 内置的文件应用、DropBox、Google Drive、Evernote、Pocket 和 Instapaper 等主流网盘和稍后读服务，还支持从剪贴板读取文本以及添加常用小说下载网站到列表中以便于随时在线下载。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/21/5f3b1f4ffdf9bc65894dbbdedbc50254.PNG\"><figcaption>添加来源</figcaption></figure><p>除此之外，《声之梦朗读器》也支持通过访达、iTunes、第三方应用的标准共享表单和 Safari 共享插件来导入想要阅读的内容。更值得一提的是，应用同样支持 iPadOS 的分屏和拖放功能，当我们在 iPad 上使用《声之梦朗读器》时，就可以方便地将支持的内容直接拖入应用来进行阅读了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/21/cafb3d4f336df0fba615e1531215f04c.PNG\"><figcaption>iPadOS 分屏功能，支持文件应用</figcaption></figure><h2>强大的阅读和控制功能</h2>\n<p>如果说支持内容的丰富程度和导入渠道的多少是决定一个 TTS 阅读应用是否好用的决定性因素，那么强大的阅读和控制功能，就是让声之梦朗读器能够脱颖而出的关键了。</p>\n<p>打开一本书籍或者一个文档后，我们可以使用双指点击屏幕来朗读和停止朗读、双指上下滑动来调节朗读的语速、双指缩放来缩小和扩展文字显示区域的大小。在文字显示区域，单指上下滑动，可以快速地滚动文字内容，你也可以在页脚显示的页码或者进度百分比上点击输入相应的数值来快速跳到对应的位置。</p>\n<p>点击右上角的增加书签按钮，可以为当前朗读的位置加上一个书签。《声之梦朗读器》支持为一个文件增加多个书签，并可以在下方工具栏的书签列表中方便地查看、跳转和管理它们。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/21/82999f2bcaf0cf2c282ef1b84e0977d7.PNG\"><figcaption>书签管理</figcaption></figure><p>长按播放按钮，可以打开应用的睡眠定时器界面，在这里，你可以为当前朗读的内容设置一个睡眠定时器，以便于到达指定的时间应用可以自动停止朗读。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/21/eeba79011cc09b6096f8ecd597a464c0.PNG\"><figcaption>睡眠定时器</figcaption></figure><p>到这里，你是不是觉得《声之梦朗读器》的朗读功能挺丰富，但似乎没啥特别的？别急，接下来说的才是重点。</p>\n<h3>不同文件的交互统一性</h3>\n<p>前面我们已经说了，《声之梦朗读器》支持许多种文件，甚至包括了音频文件，也说了一些常规的操控方法。针对那么多种类的文件，应用提供了几乎一致的操控体验。</p>\n<p>例如，当你播放一个音频文件时，同样可以使用双指单击来暂停或者继续播放、双指上下滑动来给音频文件加速减速等。应用提供了从 0.5 倍速到 4 倍速的完整支持。你甚至可以给一个音频文件添加多个书签，然后在他们之间方便地进行切换跳转。这对于很多经常需要收听播客或者学习资料的人来说，相信将会十分有用。</p>\n<h3>强大的导航单元</h3>\n<p>《声之梦朗读器》创新地引入了一个导航单元功能，利用它，我们可以方便地控制应用界面点击前进后退按钮的默认行为。在书籍页面右下角点击默认的导航模式，就可以方便地对它进行设置了。</p>\n<p>除了很多同类阅读器拥有的按照一定的时长来前进后退外，根据你当前导入的文件类型不同，导航单元还支持按句子、段落、标题、页码以及书签和高亮等多种方式来对前进后退的默认行为进行控制。这样，当我们设置好一种导航单元模式后，就可以点击前进或者后退按钮来快速的进行跳转了。</p>\n<p>例如，你将导航单元设为按标题进行前进后退，那么当你点击前进或者后退按钮时，《声之梦朗读器》就会在当前文件的标题之间进行跳转。设为书签，就可以利用前进后退按钮快速在你设置的多个书签之间进行跳转了。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/21/481e017b0adee8473b1b0d87fe216842.PNG\"><figcaption>导航单元</figcaption></figure><p>更为强大的是，该功能不仅能作用于应用界面的前进后退按钮，当我们佩戴有控制功能的有线或者无线蓝牙耳机时，同样可以使用耳机上的线控或者操作手势来按照你设定的导航模式进行前后跳转。</p>\n<h2>其他值得注意的特性</h2>\n<h3>完善的同步支持</h3>\n<p>《声之梦朗读器》支持通过 iCloud 在多个设备之间同步导入的书库，只要在设置中开启同步的开关，你的整个书库都会在所有登录了同一 iCloud 账户的设备之间进行同步。不仅如此，你的每一本书的阅读进度、书签，甚至为它们单独设置的语速和声音库都会得到无缝的同步。</p>\n<h3>简单实用的排序和筛选功能</h3>\n<p>随着使用时间的增加，我们的书库中的内容会越来越多。除了可以在主界面列表上方的搜索框中输入相应的关键词来查找书库中的文件外，《声之梦朗读器》也提供了简单的排序和筛选功能。</p>\n<p>点击左下角的排序按钮，可以根据添加日期、打开日期等方式来对文件进行排序。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/21/098f9c6ce834e588ef4fa38118395b8c.PNG\"><figcaption>排序</figcaption></figure><p>界面顶部中间的筛选器，可以让我们方便地筛选出需要朗读的文件。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/21/a6600dfdb6765ce1e4e4626fa6101486.PNG\"><figcaption>筛选</figcaption></figure><p>其中的阅读列表，不仅支持手动向其中添加文件和自定义顺序，还支持添加到 Siri，这样，我们就可以打造出一个完全符合自己需要的阅读列表，并方便地通过 Siri 快捷指令来随时阅读它们了。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/21/f4adb4f3d37fe709405648a9d4a42148.PNG\"><figcaption>阅读列表</figcaption></figure><h3>锦上添花的 Apple Watch 应用</h3>\n<p>作为一个对用户体验有追求的 TTS 阅读器，当然少不了对于 Apple Watch 的支持。《声之梦朗读器》也提供了一个简单的 Apple Watch 客户端。</p>\n<p>当我们在 Wi-Fi 环境下通过其它设备将感兴趣的内容添加到阅读列表时，《声之梦朗读器》的 Apple Watch 客户端会很快将这些数据进行同步。之后，你就可以在完全脱机的情况下，使用蓝牙耳机连接到 Apple Watch 来收听这些内容了。</p>\n<p>相信不管是运动健身，还是家务劳作，《声之梦朗读器》的 Apple Watch 客户端会成为爱阅读的朋友们的一个不错的选择。</p>\n<h3>完美的无障碍支持</h3>\n<p>从一开始，声之梦朗读器就考虑到了不同类型的特殊用户的使用需求。除专为阅读障碍人士设计的吃豆人、随手读阅读模式外，还为视觉障碍用户提供了完美的旁白操作支持。</p>\n<p>不同于其他一些适配旁白的应用，有时会通过提供精简页面内容的特殊版本来给旁白用户使用，美其名曰减少复杂交互对于旁白用户的干扰。《声之梦朗读器》的书籍页面，启动旁白后非但没有精简功能，反而为旁白用户提供了更多便于交互的功能。</p>\n<figure class=\"ss-imgRows\" figcaption=\"左：旁白模式，右：普通模式\"><img src=\"https://cdn.sspai.com/2021/06/21/f5a7841128c71fe2a852dbfc674e6197.PNG\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/06/21/b321c111e03f934df250a67f84724516.PNG\" alt=\"\"></figure><p>例如，我们可以在听觉设置按钮上单指上下滑动来直接调节语速、在播放按钮上单指上下滑动来直接前进后退、在单元导航按钮上单指上下滑动来直接选择不同的单元控制等。开发者甚至为旁白用户提供了一个单独的文字选取器，通过它，旁白用户就可以方便快速地选中一段文本，对它们进行进一步的操作了。</p>\n<p>也因此，《声之梦朗读器》很早就获得了知名第三方 Apple 辅助功能社区 AppleVis 的名人堂最佳应用的奖项；如今获得 Apple Design Award 设计奖最佳包容性应用，无疑是对开发者这些年做出的努力的最大肯定。</p>\n<h2>总结</h2>\n<p>TTS 阅读器这一小众需求注定让《声之梦朗读器》无法成为如同其它大多数 Apple Design Award 获奖应用一样，被人们熟知的知名产品。但如果你和我一样，需要通过听觉来获取信息，或者只是想在繁忙的工作和生活之余暂时解放一下双眼，听听自己感兴趣的内容，那么这款《声之梦朗读器》一定会是你不错的选择。</p>\n<p>你可以在 <a href=\"https://apps.apple.com/cn/app/%E5%A3%B0%E4%B9%8B%E6%A2%A6%E6%9C%97%E8%AF%BB%E5%99%A8/id496177674?mt=8\" target=\"_blank\">App Store</a> 下载《声之梦朗读器》，应用售价 128 元。</p>\n<span class=\"ss-application\" app-id=\"16071\"> </span><p><strong>拓展阅读</strong></p>\n<ul>\n<li><a href=\"https://sspai.com/post/67165\" target=\"_blank\">Apple Design Award 年度设计大奖揭晓，这 12 款 App 是今年的赢家</a></li>\n<li><a href=\"https://sspai.com/post/67221\" target=\"_blank\">获得 Apple、Google 年度奖项，这款助眠 App 有点不一样：Loóna</a></li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67359"},{"title":"少数派员工的桌面长啥样——键鼠外设用些啥？","date":"2021-06-22 07:30:00","description":"\n<p>之前我们带大家看了看办公室同事和远程工友的桌面摆设，大家纷纷拜倒在桌面上的 Xbox、猫和小虎的精致家装面前<s>，搞得我们好像没在办公一样</s>。适逢购物节，不少同事趁着折扣更新自己的桌面，有的刚刚换了办公装备尝鲜，有的早早找到了自己的外设最优解。这次我们邀请了六位同事，来分享一下他们最近在使用什么键鼠外设——进来感受我们的办公气息！</p>\n<p>关联阅读：</p>\n<ul>\n<li><a href=\"https://sspai.com/post/61695\" target=\"_blank\">少数派员工的桌面长啥样？桌面陈设大揭秘第一弹</a></li>\n<li><a href=\"https://sspai.com/post/64167\" target=\"_blank\">少数派员工的桌面长啥样之——我们的远程工友们</a></li>\n</ul>\n<h2>会员通讯一号背后灵：张奕源 Nick</h2>\n<ul><li>微软无线简约精准鼠标</li></ul>\n<p>除了「TWS 大户」这个身份，我还是个换鼠标大户。由于我上学时期搞过一段时间 Counter-Strike，所以养成了爱捣鼓鼠标的习惯。有熟悉 CS 历史的朋友们应该知道，微软与 CS 之间有着千丝万缕的联系。在 CS 1.6 时期，最流行的竞技鼠标就是微软的 IO 1.1 和 IE 3.0，这两支鼠标我也换着用了很久。正因如此，我对微软外设有着独特的情结，工作之后基本上把微软出品的老鼠买了一遍。</p>\n<p>最近，我又弄了个微软的人体工学鼠标——无线简约精准鼠标。这里我得先吐槽一句：这款鼠标的英文原名为 Microsoft Bluetooth Ergonomic Mouse，直译过来就是「微软蓝牙人体工学鼠标」，听着一切正常。但不知为何，大陆版偏偏起了个「无线简约精准鼠标」的神秘译名，听上去更像是为电商搜索做的某种名词优化，读起来怪怪的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/21/article/c9af858bfa6ba69a2c6b9a7f946053f1\"></figure><p>当然，名字虽怪，东西本身却是好东西。这款鼠标继承了微软鼠标标志性的定位精准和按压舒适，尤其点击时的手感清脆明快，颇有指哪打哪的快感，在办公中进行连续点击、拖拽操作时，会让人产生「仿佛效率都高了起来」的幻觉。</p>\n<p>微软无线简约精准鼠标搭载的追踪引擎依然是微软的「看家本领」——蓝影（Bluetrack Technology），这套系统同时包含了追踪器与脚垫材质，让鼠标能在各种表面上自如运行。我在使用这款产品时就直接把它摆在木质桌面上，手感上甚至比摆在鼠标垫上更为顺滑流畅。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/21/article/ddfed1474d073ec9598e11634f49a6cf\"></figure><p>人体工学是微软外设的另一大「光荣传统」，也是这款微软无线简约精准鼠标在外形设计上的卖点。鼠标重量很轻，大拇指位置有个轻微凹陷的弧度，手持鼠标时可以自然地形成抓握姿势，而下方伸展出来的侧翼则给了拇指部位足够的支撑。鼠标整体轻快的手感与清脆明确的点击形成了呼应，两者相互配合，构成了鼠标整体的畅快感。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/21/article/1c652475d56f1dcaf175106d8300fdbc\"><figcaption>鼠标侧面有个凹陷加小翅膀的设计，这里的弧度经过特别设计，可以减轻握持时的疲劳感</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/21/article/39be611be44aafe96988825e5bf613bb\"><figcaption>我比较习惯抓握，使用时手部可以自然地「陷入」弧度中</figcaption></figure><p>微软无线简约精准鼠标配备了蓝牙 5.0，除了提升连接稳定性之外，更重要的是实现了「三设备无缝跨屏」功能。我的主力台式机平时都是连着电视用来看剧、打游戏，最近我刚好有购买另一部 Windows 设备的打算，有了无缝跨屏，一套键鼠就能多部设备之间无缝切换，无形中可以节省不少桌面空间及外设成本。</p>\n<p>此外，我建议所有使用微软外设的朋友都别忘了安装《<a href=\"https://support.microsoft.com/zh-cn/topic/%E9%BC%A0%E6%A0%87%E5%92%8C%E9%94%AE%E7%9B%98%E4%B8%AD%E5%BF%83%E4%B8%8B%E8%BD%BD-f5b10905-7887-eedb-2f1c-d0737a36a3b2\" target=\"_blank\">微软鼠标和键盘控制中心</a>》这款应用，许多高阶功能都藏在其中。除了基础的 DPI 调节、键位修改之外，上文提到的无缝跨屏也需要通过它来管理。键鼠中心还允许你在特定 app 内指定鼠标的功能，我就把两侧按键都设定为了 Adobe Lightroom 的图片标星，鼠标点击的同时就标记好了星星，可以大幅提升图片初筛的效率。</p>\n<p>总体来说，作为微软旗下定位中端的办公老鼠，微软无线简约精准鼠标从手感到性能都无可挑剔。这款鼠标虽然主打办公，但也兼顾了游戏等场景，还在人体工学方面有着标志性的舒适设计。对于正在考虑给自己的电脑搭配什么鼠标的 Windows 用户来说，微软无线简约精准鼠标值得优先考虑。</p>\n<h2>「部分网友」：Clyde</h2>\n<ul><li>Razer Pro Click</li></ul>\n<p>去年「双十一」入手 Razer Pro Click，到如今也作为主力鼠标使用半年多了。</p>\n<p>Razer Pro Click 是雷蛇在效率办公领域的试水之作，虽是 RGB 大厂，但这款鼠标在外观设计上倒是足够克制，整个鼠标除了必要的状态和电源指示灯外便没有其他灯光元素了，白灰配色更是让整个鼠标看上去格外商务。</p>\n<p>我绝对不算是个手小的人，但 Razer Pro Click 的握持感也让我挑不出什么毛病。就像刚到手时我所形容的那样，对习惯趴握方式的人来说这是一款非常舒适的鼠标，背部最高点能够很好地支撑起掌心位置，侧面带有弧度的橡胶材质表面同时又能提供不俗的触摸手感。不得不说雷蛇与 Humanscale 的合作还是很令人满意的，Razer Pro Click 的手感总是自然、饱满，虽然过去这半年时间没少用它办公，但几乎没有一次让我因为鼠标的问题感受到任何不适。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/06/21/681845e40e466451dbe3b0b7076e82e4.png\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/06/21/b8791f7d2624ee354a3adbd02943c5f2.png\" alt=\"\"></figure><p>功能方面，除了支持最多 4 款设备一键切换和 Windows 快速配对外，Razer Pro Click 也能借助雷蛇自家的 Synapse 雷云应用实现丰富的定制效果，让我们可以根据实际使用场景配置不同的定制方案。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/21/article/cc05350be1bbdd13357fe102c151e694\"></figure><p>比如我就将机身侧面的按钮分别设置成了音量调节（办公配置）和键盘按键映射（游戏配置）——没错，即便是一款主打办公效率的鼠标，Razer Pro Click 也是可以用来玩游戏的，200~16000 的灵敏度设置对于我常玩的游戏来说完全足够，5 档灵敏度快捷调节等级也可以根据需要在雷云应用中随意定制。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/06/21/5827a54688caeb6be285b4ebd15a51d0.png\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/06/21/e56c4d389579454257078cd5eb5ac14a.png\" alt=\"\"></figure><p>如果硬要说有什么不满，那自然是去年买的时候就已经显得非常落伍的 micro-USB 接口了，这可能是唯一一个我会考虑将其换成罗技 MX Masters 系列的原因吧。</p>\n<ul><li>微软 Surface Arc</li></ul>\n<p>好了好了我知道你想说什么，从操作手感上来说，Surface Arc 的确不是一款令人舒适的鼠标，习惯趴握的人如果用它玩游戏，简直可以说是一种自我折磨。</p>\n<p>但 Surface Arc 本就不是用来玩游戏的，至少我不是这么做的。在家工作和游戏时主力鼠标是上面的 Razer Pro Click，Surface Arc 则是我外出时会塞进包里的那一款：用的时候折一折便能「支楞」起来服役，走的时候直接「拍扁」就能像一块快用完的肥皂一样塞进包里。它不像 Razer Pro Click 那样有个胖胖的肚子，外出携带总得额外带上收纳袋小心存放，扁平状态下颇似外星飞船的造型可以轻松滑进背包任何一个夹层里。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/21/article/bed864d959f2a11b07f227ec779ae6a8\"></figure><p>当然，Surface Arc 作为微软的鼠标自然也有独特的设计在里面，其中最主要的应该就是鼠标前部的「全滚动平面」了 —— 我将其理解为一块微缩版的笔记本触控板，它通过点按区域识别左、右点击，支持上下左右四个方向的滑动操作，查看看板、表格时非常方便，但适应门槛也非常之高，早期使用过程中左、右点击行为无法被准确判定是常事。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/21/article/f8e07a92572b5f1891e392515339b19a\"></figure><p>所以总体来说 Surface Arc 在我看来依然是一款不错的便携式鼠标，毕竟除了能伸能缩的纤薄身板，它也是一款支持微软「蓝影」技术的鼠标。不管是蜷在沙发上还是坐在咖啡厅，你都可以不用担心表面材质的问题放宽心用它改改文档修修图。</p>\n<h2>键盘鼠标比指头都多：北鸮</h2>\n<ul><li>微软 Sculpt 人体工学桌面套装</li></ul>\n<p>聊外设那我可不困了——</p>\n<p>我在之前的各种键鼠文章中说过，我一直在寻找最合适的鼠标和键盘的路上探索。很可惜，雷蛇并没有给我想要的八岐大蛇 V2 白色版打折，新到手的轴体手感也没达到心理预期，我的键盘鼠标毕业计划也就此搁置了。</p>\n<p>屡次寻找最优解失败的经历让我起了转向的念头，既然没有处处适用的设备，干脆我游戏整一套，办公整一套——于是我搞了一套微软的 Sculpt 人体工学桌面套装，拿来专门干活。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/21/article/a0df62fe8f1d239af8112db9bab61720\"></figure><p>我很爱人体工学键盘，起初就是奔着套装里这把键盘去的，但我对薄膜键盘的手感没啥期待——这不光是因为我是一个机械键盘爱好者，还因为我之前就用过一把老款的微软人体工学键盘：微软人体工学键盘 4000。对这种异形火山口薄膜键盘来说，连体空格设计会增大阻力，追求手感平衡的我没用多长时间就用回了机械键盘。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/21/article/17c040632e406a52199e125f04849ada\"><figcaption>我古旧的微软人体工学键盘 4000——已经没眼看了</figcaption></figure><p>而当我上手这把 Sculpt 套装中的新款键盘，我就不想换回去了。</p>\n<p>和之前的 4000 相比，这把键盘把中间的 Zoom 拨杆去掉，和 Arc 鼠标一样直接挖空，在视觉上非常讨好，还能减轻重量。顶部没那么常用的 F 区也换成了微动开关，进一步压缩体积。键盘自带掌托手感很好，套装还配备了一个磁吸式抬高架，偶尔放在腿上打字我会装上，避免手腕过伸（朝手背弯曲）。而最重要的改进，就是它采用了剪刀脚结构，而且截断了空格键。剪刀脚薄膜虽然键程比较短，按起来缺少一些长键程的「仪式感」，但它在任何一个角度按下去都是平衡省力的，老大难的空格键更是直接拆两半，省时省力解决问题，让我可以充分体验人体工学设计的快乐。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/21/3d4b8685171af4e5c85eb519d673f31e.jpg\"><figcaption>顺着弧度随手一搭就刚刚好</figcaption></figure><p>微软的人体工学设计是直接按「标准指法」划分键盘的，所以对于打字习惯比较板正的人来说，唯一需要适应的就是两只手会离得比较远。实际使用中，我几乎是一用就上手了。和一般的键盘相比，最大的变化就是掌根从腕托上离开的次数变少了。以往使用键盘时，我会强制自己的手腕不要外翻，所以要么双臂夹得比较紧，要么手腕需要时不时在腕托上滑行；用这把键盘时，我只有在需要大量翻页选字或是够编辑区时会偶尔向外翻腕，其他时间手腕和手臂都处在一个自然舒适的角度，只需要手指小范围活动就能完成输入。套装还带了一个独立 Numpad，我平常不用，偶尔输输密码就可以放在一边，非常省空间。要说缺点的话，键盘区边缘是亮面，用久了沾掌纹，开灯会显出来，虽然我也不怎么在意，但拍照前确实是擦了好一阵子（还没擦明白）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/21/29d8d7dbfd772713774fb1f05dc991c6.jpg\"><figcaption>随便一搭就行，整个手都是放松状态</figcaption></figure><p>套装里的鼠标就是 Sculpt Ergonomic 蓝影「馒头」。这个圆滚滚的鼠标用最极端的方式解决了握姿问题：直接做成圆的，留一个大拇指槽，只有一个标准姿势。我的手刚好落在可用范围内。初上手没什么感知，但当我想打游戏，换回之前的月刃无线时，就会意识到手掌放松地趴在这个馒头上有多舒服。而且，Sculpt Ergonomic 支持四向滚轮，在上班浏览看板和表格时格外方便。要说有什么问题的话，蓝影传感器性能孱弱，鼠标略重，1000 DPI 也有点低，不过只是办公用嘛，这个滚轮和握持感带来的幸福已经值回票价了，打游戏再换别的。而且整个套装共享一个 2.4G 无线接收器，稳定性不错，还省掉我两个 USB 接口。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/21/0ef5ce26b7080ab5659c8239de4cf839.jpg\"></figure><p>如果你也对人体工学外设感兴趣，真的可以尝试一下这个套装，对于需要长时间使用电脑办公的人来说，每一点点舒适都是可以积少成多的。</p>\n<p>不过我私心还是期待微软能整个人体工学机械键盘，嘿嘿。</p>\n<h2>超神奇万事屋编辑：Lincoln</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/21/article/23aaf7a8da9e5e5e9cd035f777d4c950\"></figure><p>我应该是所有编辑里组合最奇葩的那一位了，现在工作所用的外设组合是：</p>\n<ul>\n<li>Keychron K4 v2</li>\n<li>Magic Trackpad 2</li>\n</ul>\n<p>可能看到这里，你可能想「这有什么大不了的，不就是触摸板和外接键盘的组合吗？」然而我是在 Windows 下使用蓝牙模式的 Magic Trackpad 2，这就很「奇葩」了。</p>\n<p>Keychron K4 v2 这款键盘是我目前最喜欢的蓝牙有线双模机械键盘。首先有我最爱的小键盘，其次本身紧凑型的设计可以有效减少键盘占据的空间，双模块（蓝牙 + 有线）的设计可以在至多 4 个设备上使用这个键盘。在蓝牙设备之间进行切换时，需要借助 fn + 数字键，想要切换到有线时也只需要把开关拨到独立的有线模式；而 Keychron 还针对我这样经常要在两个不同生态（Apple 和 Windows）之间来切换的人士准备了独立的切换开关，大大方便了我在两个生态之间反复横跳。此外，我买的这款具有白色背光，在次最亮档的背光下每日蓝牙模式使用 8 小时，约可以使用 5 天；而有线模式不会消耗电量，反而还会给电池充电。虽然非常喜欢这款键盘但是槽点还是有的——它的键帽用的是非常容易打油的 ABS 材质，我用了 6 个月部分按键已经出现轻微打油的问题了。</p>\n<p>Magic Trackpad 2 是我目前唯一在用的触摸板。首先它够大，应该是目前市面上最大块的触摸板了，手指可以在上面肆意滑动；其次线性马达带来的震动反馈绝无仅有，市面上的触控板没一个能赶得上。而原本只能在 Apple 平台下才能用的它，在我找到一个 <a href=\"https://github.com/imbushuo/mac-precision-touchpad\" target=\"_blank\">开源项目</a> 以后终于也可以在 Windows 下使用了，同样还支持蓝牙连接和 Windows 精准触控，不得不说它是我目前用起来最舒服的指针设备了。</p>\n<h2>作者唯一指定群宠运营：路中南</h2>\n<ul><li>微软设计师键盘</li></ul>\n<p>谁也没有想到我最近居然换了一块微软的「时尚设计师蓝牙键盘」，虽然我既不时尚也不是设计师，但这不妨碍我想要在桌面拥有一块好看的蓝牙键盘。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/21/99fed9639738f1ba6b7300350b7d3243.jpg\"></figure><p>我其实是在和同事逛街的时候在店里一眼相中的，比起它在包装上的渲染图，实物看起来要精致、轻薄、好看得太多了，放在桌上键盘的高度和手机的厚度居然差不多，而且正面摸起来类肤的材质可太舒适了，和它的一个照面就已经开始嫌弃自己的 Magic Keyboard（下称「魔法键盘」），设计师键盘还更便宜一些。</p>\n<p>比起魔法键盘光滑明亮的正面，设计师键盘的哑光类肤材质更得我心，也不会在显示器挂灯的反光下看到自己残留的油脂。我相中的「冰川灰」配色感觉比「典雅黑」更典雅，白色偏灰给人一种更柔和恬静的感觉。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/21/3f9e294706e71dcc4f01e90ea82c7643.jpg\"></figure><p>打字体验方面，键盘按下去的感觉应该是偏软一点，但就算重重按下的时候也不会有太大噪声。键程感受起来和魔法键盘差不太多（都是剪刀脚结构），还是有「按下去」的感觉，不会像蝴蝶键盘那样夸张。个人打字比较多，更偏好打字省力一些的键盘，蝴蝶键盘我就挺喜欢的。美中不足的一点，这块键盘对 macOS 快捷键适配不是很全面，但在 Windows 上可就开心了，特有的表情快捷键可以在输入时快捷呼出 Emoji 栏输入，解决了我想要在桌面端也能卖萌的痛点。</p>\n<p>更关键的是，设计师键盘比起魔法键盘多了一个多设备配对切换的功能。我的桌面设备组成比较复杂，有老旧的 Windows 小主机、macOS 笔记本，甚至偶尔还会用坚果 TNT 来应急办公。家里除了魔法键盘外还另外花了五十块钱收了块带优联的键盘，就是给那些非 macOS 设备使用的。现在能一键三连切换设备，可不得心疼一下多年来被魔法键盘折磨的自己。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/21/article/45a3995ca7be89ada99f30fba5450f1e\"></figure><p>这块键盘因为过分轻薄我也会带去办公室使用，测试下感觉蓝牙的抗干扰性能着实不错，比起格式调整，写稿时的键盘信号延迟、没有反应不仅能一下子打断思路，还可以让人瞬间烦躁起来。这里也欢迎大家随时带着蓝牙无线键盘或鼠标，来少数派测试抗干扰能力。</p>\n<h2>公众号标题小能手兼声优：Tp</h2>\n<ul><li>罗技 MX KEYS</li></ul>\n<p>我从来没想过自己会用上一款定价 899 元的薄膜键盘，直到我在年度征文里白嫖了一把 MX KEYS。在之前的很长一段时间里，我在用的都是青轴 ikbc F87，因此我对薄膜键盘总是存在一种「偏见」：手感软、轻飘飘。MX KEYS 很大程度上让我对薄膜键盘有所改观，至少在综合体验上，它是我用过的各类键盘里相当优秀的一款了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/21/c67ba6b47c1d9fd3a0098fb147f08f27.jpg\"></figure><p>作为薄膜键盘，MX KEYS 偏软的打字手感自然无法跟机械键盘相并论，但跟 MacBook 自带的剪刀脚键盘相比，MX KEYS 的打字手感就显得「沉稳」了许多。长时间打字下来，也不会有特别疲惫的感觉。相比于打字的手感，MX KEYS 摸起来的手感反而更让我喜欢，类肤质的涂层摸起来确实比普通键盘要舒服不少，至于用久了之后会不会出油，就得等时间来检验了。</p>\n<p>MX KEYS 最让我亮眼的其实是它的键盘灯功能。在我的手离开键盘一段时间后，键盘灯就会自动熄灭；当再次靠近时，即使不碰到任何按键，它也会自动点亮。最神奇的是，无论是从哪个方向靠近，它都能非常准确地亮起，实不实用先不说，但它真的很酷！</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/21/article/5a912781226a439b35c8aa7cf01b628c\"></figure><p>由于我的日常工作没有涉及需要用到 Flow 的场景，所以无法评价这个功能的体验。不过 MX KEYS 的连接速度还是非常快的，无论是开机还是切换设备，基本上可以做到媲美 AirPods 的「无缝」衔接。虽然这个售价的确很「劝退」，但作为一款办公键盘而言，MX KEYS 给我的感觉至少还是不错的。</p>\n<p>下期带大家看点啥呢？来评论区说说你的愿望。🌝</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\" target=\"_blank\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号 </a>，找到数字时代更好的生活方式 🎊</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67355"},{"title":"虽是懒人福利，但一锅流其实没那么简单","date":"2021-06-22 06:21:31","description":"\n<p>「一锅流」是近期常被提起的烹饪方式，核心思想是只通过一口锅——无论炒锅、铁锅还是电饭锅——便能完成一餐，不仅有饭有菜，而且食材丰富不单一，尤其适用于觉得一个人何必下厨的单身人士。可坊间通常对一锅流持乐观态度，通常都会赋予「简单」、「快速」乃至「入门」的标签，其实不然，一锅流的优点是通过既定的顺序完成烹饪并区别于传统菜式复杂繁琐的流程，但它也有一个新手很容易翻车的难点就是你要熟悉不同食材乃至调料的特性，包括水分、口味和搭配，而这些又很难教条和系统的学习，更多是经验主义。</p>\n<p>所以我虽然非常推崇一锅流这种新式烹饪，但也希望大家还能给予其充分的敬畏——不要无畏的便随意开始，失败事小，我认为很多人从兴致勃勃到兴味索然只有一步之遥，不要让「误以为简单」成为压垮你从而放弃的稻草。接下来我会分享较为常见的几道一锅流食谱，分别是焖面、焖饭、抓饭、煲仔饭和一道很普适的韩式辣豆腐汤，除了食材准备和步骤，我也会尽可能的提及过程中关乎的一些技巧和经验，希望你帮助你更好地了解食材——你没看错，我一直认为烹饪的核心与提升从来不是学会方法，而是熟悉食物。</p>\n<h2>无人不爱的豆角焖面</h2>\n<p>我家乡有一句俗话「四季豆米油盐不进」常形容那种特别固执不听劝的人，取材自不易烹饪入味的豆角，可尽管如此，豆角又因为其虽为蔬菜但又独特的甜美滋味广被喜爱，所以但凡关乎豆角的菜式，「入味」是需要特别关注的事儿。入味对应的是烹饪时长，豆角在长时间烹煮后表面软化纤维遭到破坏可以一定程度的融合调料酱汁，另外因为其本身含有丰富的蛋白质和植物油脂，高温加热下表面略焦产生的梅拉德反应也可以很好的为其增香。</p>\n<p>而不得不提的是，菜豆（包括食荚的四季豆和食豆的芸豆等）含皂苷和植物血凝素（即植物产生的血球凝集素），可引致食物中毒。中毒症状出现头晕、头痛、呕吐、腹痛、手脚麻木、心慌等病症，所以即便不是为了入味，在烹饪豆角时一定要充分煮熟，FDA 建议烹饪豆角要在 100℃ 的高温下至少烹煮十分钟，如果温度不够还得适当延长。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/f25cce8a8cd0f3f8983531916dde4954.JPG\"><figcaption>韭菜叶面</figcaption></figure><p>在这道菜里需要关注的另一个重点是面条的处理，首先最好选择新鲜的湿面，为了确保面条充分吸附酱汁，综合口感最合适的规格是「韭菜叶」，这只是约定俗成的一种叫法，指的是面条的宽度略同于韭菜叶，并非指韭菜制作的面条。其次虽然被称为「焖面」，但事实上即便是新鲜面条也很难在收尾时完全焖熟，所以在最后的焖制之前我们最好能先蒸一下面条。</p>\n<h3>材料准备</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/698e6fca194494b5b110b378a1f08859.JPG\"></figure><p>这道豆角焖面的主要食材有：</p>\n<ol>\n<li>五花肉：350g 切块</li>\n<li>豆角：350g 去筋切条</li>\n<li>新鲜韭菜叶面条：300g</li>\n<li>红葱头：依照口味适量并搅碎</li>\n<li>蒜：依照口味适量并搅碎</li>\n<li>干辣椒：8～12 个</li>\n<li>八角：2 个</li>\n<li>生姜：依照口味适量并切片</li>\n<li>小米辣（如果不嗜辣可以去掉）</li>\n</ol>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/736bebd677a6fb08e1effd31b3171ac8.JPG\"><figcaption>将蒜与红葱头一同搅碎</figcaption></figure><p>在食材里我想要重点说一下的是红葱头。传统配方里的豆角焖面都会只强调需要用尽可能多的蒜碎以增加酱汁的香气，而在这个思路里其实还有一个非常合适的选角是洋葱，洋葱含有非常丰富的糖分，在高温下很容易产生梅拉德反应，并且辣味流失鲜甜更甚，市面上比较常见的是紫洋葱与白洋葱，后者辣味较弱，我们常在注重食材清甜的日式料理中看到。而红葱头其实是洋葱与蒜的一种杂交产物，除了甜度更高，它的「洋葱味儿」也更接近蒜香，所以在制作类似需要大量蒜碎的料理时，适当的加入一些红葱头是锦上添花的行为。</p>\n<h3>制作步骤</h3>\n<h4>将五花肉块煎至焦褐</h4>\n<p>动物油炒菜比植物油更好吃，其实也有很多科学验证动物油比很多植物油（例如菜籽油、玉米油等）更健康，不过这里就不展开细聊，提到这个也只是想说在烹饪时不要过分迷信「少食用猪油更健康」的说法，这样很有可能矫枉过正。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/b4f85ef3fb5da3c985da798555512fe2.jpg\"></figure><p>所以我更推荐使用五花肉块也是为了在煎香的同时还能榨取后续用来煸炒豆角的猪油。我在这道菜里反复提到梅拉德反应，指的是食物中的还原糖（碳水化合物）与氨基酸、蛋白质等在常温或加热时发生的一系列复杂反应，其结果是生成了棕黑色的大分子物质类黑精或称拟黑素。</p>\n<p>除产生类黑精外，反应过程中还会产生成百上千个有不同气味的中间体分子，包括还原酮、醛和杂环化合物，这些物质为食品提供了宜人可口的风味和诱人的色泽。该反应是一种非酶促褐变的形式，其通常快速从约 140℃ 至 170℃ 中进行。在较高的温度下，焦糖化和随后的裂解变得更加明显。在此过程中，产生了数百种不同的风味化合物。这些化合物又分解成形成更多新的风味化合物等等。</p>\n<p>每种类型的食物在美拉德反应期间都能形成的非常独特的风味化合物。风味科学家多年来一直使用这些相同的化合物来制造人造风味，但都不及真正高温下所产生的反应结果。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/90ae6550675ff86bdac9569675651e48.jpg\"><figcaption>将五花肉煎出明显焦褐，不用担心这不是焦糊，不会产生苦味</figcaption></figure><p>所以无论是含糖量较高的植物食材还是肉类，但凡涉及到煎炒，一定要充分利用梅拉德反应。另外值得一提的是，在煎肉的时候可以加一些清酒，因为清酒与脂肪加热可以产生酯化反应，生成堪比梅拉德反应的芳香酯。</p>\n<p>我们常说烹饪时要充分利用市场本身的鲜香，不止是要类似于粤式料理那样减少香料添加，而是通过高温或者其它催化物去获取食材本身便能生成的天然香料。</p>\n<h4>取出五花肉，用锅里留下的猪油煎香洋葱和红葱头碎，并添加剩余香料</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/497ab7d14416215f82bb0604b0e2601d.jpg\"></figure><p>这个过程最重要的是将姜片、红葱头和蒜碎煎香——同样要达到焦褐色完成梅拉德反应——后立刻放入干辣椒和八角，并迅速调至小火慢慢煸炒，难点便是前后加料的时机把握，因为如果加入过晚，容易导致焦糊，加早了又反应不完全。不过这里建议新手可以通过姜片的状态去判断，当姜片因为水分流失有一些变形和焦糊的时候就差不多可以加入后续的材料了，当你熟悉了之后其实可以通过味道去判断梅拉德反应的程度，但这里很难用文字描述，就希望你能多尝试了。</p>\n<p>我们将干料煸香的同时又要避免它们焦糊，所以这里一定要控制小火加热，并且在过程中可以开始添加酱油，我用了滴窝油、头抽和生抽三种酱油混合，<a href=\"https://sspai.com/post/65293\" target=\"_blank\">关于酱油的选择可以参考我的这篇文章，</a>至于用量我就不特别说明了，因为每个人的口味不一，而中餐最大的宽容就是你可以边尝边加，最后比你平日里吃饭略咸一倍的程度就可以了。</p>\n<p>另外我还加了一些花生酱，注意是纯花生磨酱，不要用成抹吐司那种甜酱。这是个人喜好，可以增加酱汁的浓郁感，非必需。</p>\n<h4>加入五花肉块及豆角</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/39e8406dcd0fd1d669e640c913ec9a74.jpg\"></figure><p>还记得前文关于豆角的形容吗——油盐不进，所以这个过程是需要一点时间的，因为豆角本身就含有一定的水分，所以搅匀酱料依附在豆角和五花肉上后，可以用小火并加盖熬煮一会儿，我建议是在微微冒泡之后至少二十分钟，如果担心火候掌握新手可以尝试在这个时候加一碗清水。</p>\n<h4>加入面条</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/c0e84d73bc44327d50dad99d4661140f.jpg\"></figure><p>二十分钟后我们就可以把面条铺在菜面上开始「焖」了，不过我个人觉得这一步仪式感成分居多，而且因为锅的材质（导热、储热能力不同）和密封性，不仅很难统一焖面时间也很难控制平均熟度。所以不仅是新手，即便你是厨房老手但是没有用同样的锅和食材做过，也建议可以直接将面条拌匀后再焖，并且过程中适时翻拌尝味。</p>\n<h4>可以吃了</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/4144c56262dd58a86b38916de45c46a0.jpg\"></figure><p>出锅后撒一点葱花拌匀就可以开动了，最好的豆角焖面不仅是确保每一根面条都充分裹上酱汁，豆角还能在熟透了的同时保有一定程度的嚼劲，加油！</p>\n<h2>万物皆可抓的咖喱牛肉抓饭</h2>\n<p>抓饭，也叫手抓饭，是西亚、中亚、南亚等地的传统食物，也是中亚族群的标志性食物。相比国人更熟悉的「煲仔饭」，我总结了它的几个特征：</p>\n<ol>\n<li>需要保证充足的油分，除了前期用来炒制食材的用油，在肉类的选择也尽量选择脂肪含量高的；</li>\n<li>得有诸如胡萝卜、干果这样带甜味儿的辅料；</li>\n<li>抓饭的配菜得炒香。</li>\n</ol>\n<p>所以只要秉持着这几个原则，我们可以做出很多独具特色的抓饭，例如这道牛肉抓饭。</p>\n<h3>材料准备</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/c0144dbfc2fd4d8b71963f61892e5732.jpg\"></figure><p>这道牛肉抓饭的主要食材有：</p>\n<ol>\n<li>大米：300g</li>\n<li>鲜牛奶</li>\n<li>西红柿：一个去皮并切块</li>\n<li>洋葱：300g 切条</li>\n<li>胡萝卜：250g 切条</li>\n<li>生板栗：十二颗左右，根据口味可酌情增减</li>\n<li>牛腩：300g 切块</li>\n<li>葡萄干：适量</li>\n</ol>\n<p>处理食材时我们有两个需要特别注意的点，一是大米要保证至少一个小时的充分浸泡，目的是为了让淀粉酶有足够的时间分解以产生米甜，这不仅适用于煲仔饭甚至我们日常煮饭，米饭浸泡的时间越久成品也就越香甜。其实我们用电饭锅煮饭时通常需要四五十分钟，而煲仔饭好像十几二十分钟饭就好了，并不是说电饭锅温度低，而是它们通常将大米浸泡的时间都写进了自动程序内，但它们半小时不到的浸泡往往只是及格线而已，所以如果时间允许的话，我们可以提前预泡后再煮饭，这次做抓饭我足足浸泡了三个小时。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/db04a8c631cdbffa6a92c7d84bbe14ab.jpg\"></figure><p>第二是生板栗剥壳，一个小技巧是在板栗上用剪刀先剪出一个十字口，然后在沸水中滚煮一分钟左右取出，温度下降到可以承受的范围内便可以尽快剥壳，此时连壳带皮非常容易就可以处理。</p>\n<h3>制作步骤</h3>\n<h4>将洋葱和生板栗用大火翻炒</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/21cfa542fa9fd329b234079a3d5e2312.jpg\"></figure><p>在这一步可以先不用加太多的油，并用中火慢慢煸干洋葱的水分炒至其与栗子都有略微的焦褐色，这时候抓紧时间闻闻这种混合油脂、糖与坚果的混合香味，充分积攒饥饿感。</p>\n<h4>加入牛肉和胡萝卜，继续煸炒同时调味</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/293bc4019b8ee413273fcb93011593ed.jpg\"></figure><p>如果我们想要洋葱产生的梅拉德反应效果为 10，那么在 3 左右就可以加入牛肉和胡萝卜，并调至最大火翻炒。这是因为我们同时需要牛肉产生反应并保证胡萝卜不烂，而牛肉不能过分加热超过临界值后会进入一个很难嚼的阶段，因为我们最后煮饭的时间只有二十五分钟，是远远不够牛肉如炖煮般达到软嫩的程度，并且所以这里务必要用最大火翻炒，并实时关注成色，待牛肉完全变色并有 10% 左右程度的焦糊后立马转小火。</p>\n<p>翻炒同时我们可以开始调味，抓饭特色之一就是尽量保证食材的多元口味，所以这里我不建议过分添加各种酱汁，用盐作为主要的咸味来源，仅仅只是添加一点头抽提鲜。至于咖喱粉的用量我建议可以边加边尝，需要有的共识是这里的咖喱是调味用，而不是咖喱牛肉那般作为绝对主角，所以只需要放到能尝出咖喱味即可。</p>\n<h4>加入预浸泡的大米</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/128459fda1b17b031eb56cee94a79c5c.jpg\"></figure><p>加入大米后最好与锅中的其它食材拌匀并抹平顶部，不过最需要说道的还是加水的比例。首先在传统配方里建议添加的是高汤，但大部分普通家庭里并不会常备高汤（例如我家），所以我添加的是水与牛奶各一半的混合液，而水建议是预浸泡大米后的泡米水，但在此之前建议先清洗一遍大米倒掉后再开始泡米。</p>\n<p>其次我们应当注意用水比例是大米重量的 110%，其中大米重量应当在泡水之前称重，一个比较简单的方法是清洗过大米后加水，确保此时的总重量为原大米的 210%，也就是最后连米带水的总重量应该是 630g，最后加水的时候我们把一般的泡米水换成牛奶即可。</p>\n<p>最后一个需要强调的是建议最好选择储热能力较好的锅来做这道抓饭，例如铸铁锅或者砂锅，加水后开大火待水沸腾后立刻转小火并盖上盖子，二十五分钟后关火再焖十分钟后揭盖。</p>\n<h4>可以吃了</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/d3445cd1f1bf926b0153ab67a4cd9eef.jpg\"></figure><p>正如前文所说，抓饭的特点在于其中添加的果干和胡萝卜，不经意间吃到的一口可以很好的刺激余下对牛肉和咖喱的体验，而清甜绵糯的栗子则是最美妙的点缀。</p>\n<h2>西红柿融化在电饭煲里的奇妙拌饭</h2>\n<p>电饭煲食谱一直备受厨房新手拥簇，它操作简单，省时省力并且不易失败，但我们也不能只追求不失败，好吃也很重要。</p>\n<p>左有抓饭右有煲仔饭，电饭煲饭介于中间所以我姑且称之为拌饭，要想把它做好，首先是水米比，其次便是酱汁的调制，我会在接下来的内容中一一说明。</p>\n<h3>材料准备</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/7b34a9fa54aac4324cec3eec7661917f.jpg\"></figure><p>这道拌饭的主要食材有：</p>\n<ol>\n<li>大米：300g</li>\n<li>西红柿：一个并去皮</li>\n<li>腊肠：根据口味适量，但最好不要超过大米的一半</li>\n<li>豌豆：50g</li>\n<li>玉米粒：50g</li>\n<li>土豆：50g 切小丁</li>\n<li>胡萝卜：50g 切小丁</li>\n<li>板栗：10 颗去皮</li>\n</ol>\n<p>无论抓饭还是煲仔饭，我觉得它们还是我们平日里普通有饭有菜的一餐，只是换了一种呈现形式，但电饭煲拌饭我认为它更是「一碗丰盛的米饭」，弱化了其中菜的成分。所以在这个思路下，我会添加玉米、豌豆和土豆来弥补只有米饭的单一主食，同理你也可以添加其它的食材用以补充。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/07a535003295d85fc8ac20c341c882e8.jpg\"></figure><p>另外大部分电饭煲拌饭的方子里都会建议添加食用油，目的是为了让米饭粒粒分明不沾粘，但我这里换了一个思路是拌入了切粒的腊肠，不仅因为腊肠本身含有丰富的油脂，同时它的复合风味融合在饭香与其它蔬菜中，相得益彰。</p>\n<p>最后一个需要特别说明的依然是水米比，因为电饭煲饭不同于抓饭或者煲仔饭，基本上是一次性买卖，所以我们需要严格控制水的比例，因为正常煮饭比较合理的水米比是 1.1～1.2：1，而因为这道拌饭里除了有一整个西红柿外，还有一些酱汁，所以我建议这次拌饭的水米比为 1：1，测量及用水步骤可以参照前一抓饭的方法。</p>\n<h3>制作步骤</h3>\n<h4>准备酱汁</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/ce1ad0fb85647bd4aaf0828a8cf6e0d7.jpg\"></figure><p>酱汁是这道拌饭的主要风味来源，因为它不如抓饭那般可以事先炒香配菜，也不能像煲仔饭那样拥有丰富的焦香，所以我们需要在酱料中做足功夫。</p>\n<p>在配比蘸料时我最几乎都会将滴窝和头抽搭配使用，根据这道菜想要突出的风味——酱香或鲜香——来调整两者的用量，如果想要兼备则 1:1 使用，包括其它的酱料配方是：</p>\n<ul>\n<li>1 汤匙滴窝油；</li>\n<li>1 汤匙头抽；</li>\n<li>1 茶匙叉烧酱；</li>\n<li>1 茶匙花生酱；</li>\n<li>1 茶匙豆豉酱。</li>\n</ul>\n<p>这个配方下的口味其实相对稍淡，主要是因为已经混合了腊肠，并希望它与主食能够有一些口味上的层次感，如果你希望整体的味道更浓郁一些，可以将滴窝油的用量增加至 150%。</p>\n<h4>混合食材与酱汁</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/64f428943d464070a3ab3ef9f73d1c5a.jpg\"></figure><p>将淘水后的大米与其它食材包括酱汁拌匀后平铺在电饭锅里，并在顶部放上剥皮的西红柿，就可以盖上盖子启动煮饭程序，如果你的电饭煲有煲仔饭程序也可以使用。前文提到大部分电饭煲在煮饭之前都会运转一次泡米程序再开始煮饭，所以这里不用额外的预浸泡大米，但如果时间允许你也希望能有更好的米饭口味，也可以尝试事前泡米半小时到一小时左右再放入电饭煲。</p>\n<h4>可以吃了</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/55c032c7f6127c4176195589ad3be04c.jpg\"></figure><p>煮饭程序结束后建议等十五分钟左右再揭盖，此时可以用饭勺再拌匀一次，并且你会发现西红柿只需要轻轻一捣就完全融化在了米饭和各种食材里，而后你不会吃到明显西红柿的酸甜口味，但你能感觉到它在里面滋润着饭香。</p>\n<h2>全都要的腊味鸡腿肉煲仔饭</h2>\n<p>腊味、滑鸡和排骨是最常见的煲仔饭三杰，其中我最喜欢的是腊味和滑鸡，苦于通常在店里只能拥有一个，那何不试试在家里全都要。而相比于上述的抓饭和拌饭，煲仔饭也是我最喜欢做的，首先它比抓饭更简单，其次成品口感也更优于拌饭， 我想这可能是因为有饭焦结合其中的原因吧。并且对于新手来说，煲仔饭也有更多包容性，例如我平生头几次做煲仔饭时都遇到过水多或水少的问题，但都能通过再加热或者补水来挽救，虽然最后出品打了折扣，但也勉强能吃。不过我想如果你严格按照我的步骤，应该翻车几率不会太大。</p>\n<p>在讲步骤之前需要特别说几点，首先是锅具的选择，煲仔饭和抓饭一样都需要较高比热容的锅具，主要是为了受热均匀，例如铸铁锅或者砂锅，抓饭通常首选铸铁锅是因为它有需要煎炒的部分，但因为砂锅的比热容比铸铁锅更高，所以最好使用砂锅完成。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/66acc9a7259039e897d9cb52faab93e8.jpg\"></figure><p>其次是油，一锅成功的煲仔饭一定是粒粒分明的，而足够的油脂是关键。通常来说煲仔饭都会推荐使用猪油，但是在此基础上我强烈推荐红葱油。红葱头我在焖面中有提到，而红葱油就是在猪油差不多出锅的适合撒一把切碎的红葱头进去并关火，靠油的余温将红葱头爆出香味。这样你不仅拥有了一罐飘香的红葱油，爆脆的红葱头也是之后的煮面佳品。我很难用语言去描述红葱油有多香，你试一下。</p>\n<p>最后是水，煲仔饭和抓饭一样我的建议是用水量为米量的 110%，但我实际制作时其实会用到 1:1，因为腌制后的鸡肉和花菇也会含有不少水分，包括调制腌料时用到的蚝油和酱油，不过后者是需要控制的，包括清洗鸡肉和花菇后的控水、酱料的用量以及腊肠的含油量，甚至你的口味和所用锅具的特性等，都是最终成品的变量，所以我建议还是以 110% 开始，然后第二次开始慢慢调整到最合适的用量。泡米时间和抓饭一样至少需要一小时。</p>\n<p>慢慢来，你不会只想做一次煲仔饭的。</p>\n<h3>材料准备</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/b08e3ea610819c93d54cfb2955eee8da.jpg\"></figure><p>这道煲仔饭的主要食材有：</p>\n<ol>\n<li>长粒米：450g</li>\n<li>去骨鸡腿肉：300g 切块</li>\n<li>腊肠：200g 切丁</li>\n<li>香葱：30g</li>\n<li>花菇：5 朵</li>\n<li>猪油：三大勺</li>\n</ol>\n<p>煲仔饭推荐使用长粒米制作，抛开不同产地和种植方式导致的口味差异，长粒米相比短粒米粘粘性较低，也就是更容易实现「粒粒分明」的成果，不过如果你事先并没有特别准备，家里常吃的任何普通大米都可以制作。</p>\n<p>另外就是腊肠的处理，我们外食常见的煲仔饭都会把腊肠铺在顶端，但我建议如果和我一般想做「大满足」版煲仔饭的话，可以切成小丁搅拌在米饭里，一方面可以在烹煮中让腊肠的香味融入到米饭中，另一方面也可以减弱腊肠本身的口味，不然很难与鸡肉有明显的口味层次。「层次」是我常提的词儿，它也是我们即便家常便饭也能口味出众的制胜一击，可这也很难教条般一一说明，但你需要有这个意识，慢慢你就可以掌握了。</p>\n<p>最后是猪油的用量用法，我用「三大勺」的确是比较不负责的，但你也不必因此懵圈，其实猪油量多量少并不会过分影响成功率，仅仅是口味上的差异，所以你可以先秉持「比你以为的要多一点」的量去添加，先做一次，你就知道哪里不合适了。煲仔饭是一道个性化更高的饭食，千万不要循规蹈矩，了解大概的用料和步骤，你是可以尝试出属于自己的风格的，也不要怕失败，没有不在厨房翻过车的人。</p>\n<p>至于猪油怎么用，我看到有用法是在即将出锅前顺着锅盖一圈淋入，似乎这样能够更高的形成饭焦，但这取决于锅的形状，至少我家里用的砂锅就没法儿用这种方式，所以我是直接拌匀在预泡好的大米里一起煮，最后成品我觉得还行，也有饭焦，你反正可以多尝试。</p>\n<h3>制作步骤</h3>\n<h4>腌制鸡肉</h4>\n<p> </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/87f7bc4b3768471664bb2c5f29dfba2f.jpg\"></figure><p>这里的腌制鸡肉只是为了给鸡肉和花菇做一个预调味，因为它们都不是之后淋酱拌饭就可以入味的食材，所以只需要用一勺蚝油和一勺滴窝油抓匀即可，花菇你可以整朵放入也可以切块，而它的入味程度取决于你的切块大小。</p>\n<p>我在抓匀时放了切长段的葱白和红葱头碎，进一步给鸡肉和花菇增香，非必选项如果你实在不喜葱也可以跳过。腌制时间可以与泡米时间同步，无需提前甚至隔夜腌制。</p>\n<h4>第一次煮饭</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/7e724c8fa44cde65f3099a24b6e86265.jpg\"></figure><p>泡好大米后就可以开始制作了。正如我前文所说，现将大米和腊肠一起下锅并拌匀，加水这部分有两个学派，一个是额外的添加开水，相对的便是直接用泡米水下锅，而我两种都试过感觉区别不大，所以图省事儿的话你可以直接把泡好的大米连同泡米水一同下锅。</p>\n<p>这一步记得拌入猪油，如果你使用的是已经凝固的猪油我建议开大火等猪油融化并拌匀后再上盖，因为只有与猪油结合的米粒才能形成饭焦，如果不拌匀的话猪油是无法与大米均匀融合的。上盖后大概几分钟的时间待水收的差不多到上图的程度就可以开始铺上腌制好的鸡腿肉，速度一定要快。</p>\n<h4>第二次煮饭</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/1b166d6f0e75d9558d90ae8e3459df6a.jpg\"></figure><p>这一步尽量把鸡腿肉均匀的平铺在米饭上，如果喜欢的话也可以在中间敲一个鸡蛋，然后迅速盖上盖子。注意全程保持中大火烹煮，并且过程中不要离开灶台，慢慢的你会听到锅里滋啦滋啦的声音，并且闻到米饭混合腌制鸡肉的饭香，忍住，直到你闻到锅里冒出焦糊味的时候就可以关火了。</p>\n<p>关火后也不要马上揭盖，盖上盖子焖十五分钟左右之后再揭盖。</p>\n<h4>调制酱汁</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/10f679632ac2f9e23bb3815cff628c00.jpg\"></figure><p>在这个过程中就可以调整酱汁，这个酱汁有点类似于前面的拌饭酱汁，但有更浓郁了些：</p>\n<ul>\n<li>1 汤匙滴窝油；</li>\n<li>2 汤匙头抽；</li>\n<li>1 汤匙叉烧酱；</li>\n<li>1 汤匙豆豉酱；</li>\n<li>1 汤匙蚝油。</li>\n</ul>\n<p>这个配方中可以调整的是滴窝油和头抽的比例，你也可以换成 2 汤匙滴窝油和 1 汤匙头抽，这样的话甜味就会稍有减弱。</p>\n<h4>可以吃了</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/4f472a1a18b33a7289316dcf78b475df.jpg\"></figure><p>揭盖后把之前调好的酱汁倒入锅里并拌匀，这一步建议先倒入三分之二，拌匀后尝尝咸度再酌情添加余下的酱汁，确保米饭是在一个最合适的口味。然后你不知道每一口吃下去的是鸡肉还是腊肠，或者都有，每一口都有惊喜，每一口还有快乐。</p>\n<h2>韩式辣嫩豆腐汤</h2>\n<p>虽然这道辣嫩豆腐汤并不会在制作过程中加入主食，但因为它存在的意义就是主食，并且也是一锅直出，所以也放到了这个系列里。</p>\n<p>其实辣豆腐汤与冬阴功汤有点相似，你甚至可以将其类比于我们的重庆火锅，只要基础锅底弄好了，加啥料都会很好吃，你可以先煮一锅白米饭，然后再继续往下看。</p>\n<h3>材料准备</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/b13c1d65604fe7feb9c8dc848c194fd1.jpg\"></figure><p>这道嫩豆腐汤的主要食材有：</p>\n<ol>\n<li>大葱：80g 切段</li>\n<li>紫洋葱：150g 切块</li>\n<li>韩式辣白菜：根据口味适量</li>\n<li>蒜蓉：50g</li>\n<li>西红柿：1 个切块</li>\n<li>猪肉末：300g</li>\n<li>蛤蜊肉：150g</li>\n<li>虾仁：150g</li>\n<li>嫩豆腐：（无限制）适量</li>\n</ol>\n<p>因为这道菜偏咸辣，所以我使用的是紫洋葱，但其实无论何种洋葱，烹炒过后不会有明显的洋葱辣味儿，只是在甜度上略有不同，最后因为梅拉德反应而略微焦糊所产生的复合味道会是所有浓汤食谱的点睛之笔。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/a1ede305a66579b6295e46a879f83c7f.jpg\"></figure><p>这道菜里的另一个点睛之笔则是蛤蜊肉和虾仁，其实过去我一直好奇为什么日式料理里这么多菜会用到蛤蜊，甚至一些非常清淡的豆腐或鸡蛋羹料理都能见到它们的身影，后面一次偶然机会知道它是被用来吊汤用，便完全打开了我新世界的大门。而后但凡是制作浓汤料理，几乎都能见到蛤蜊和洋葱的身影，而虾仁算是对蛤蜊鲜和酱料辣的一种平衡，有了更好，没有也不会产生多大的影响。</p>\n<h3>制作步骤</h3>\n<h4>烹炒底酱</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/1c8251c4c682c01fed89014544c9296c.jpg\"></figure><p>其实嫩豆腐汤说起来很简单，就是用水化开底酱然后煮豆腐，所以好吃与否就取决于一开始有没有把酱炒好，而后面的事儿都无足轻重了。</p>\n<p>炒酱的顺序是先在锅底放一点橄榄油，然后放入洋葱块，炒到脱水至少 50% 的时候就可以放入蒜蓉和猪肉末了，同时可以加一些清酒以产生酯化反应。全程保持中火翻炒，炒到洋葱、蒜蓉和猪肉末表面都上色后就可以加入韩式辣酱。这里没有准确的用法，因为不同品牌辣度还有不同人的受辣程度不同，你可以边加边尝，直到你觉得再加一点这锅东西就没法儿吃了的程度为止，因为你还要考虑后期加水、海鲜和豆腐的稀释。</p>\n<h4>放入海鲜和辣白菜</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/5f3a66f9184c4413bed3f1b719ea1217.jpg\"></figure><p>在加水前我们需要放入海鲜和辣白菜简单翻炒出香味，同时开始调味。专业的嫩豆腐汤都是用高汤，但我们普通家庭也很难常备高汤，而我曾经有专门为这道菜熬过高汤制作，但口味对比下来也并无多大区别，主要是辣酱和蛤蜊太出众了。</p>\n<p>也有可能是因为我有法宝——日式高汤酱油，这种酱油主要用于日式的寿喜锅，因为它在制取时额外添加了昆布和木鱼花，是懒人神器，也是这锅嫩豆腐汤的外挂，但是在添加的时候同样要边加边尝，因为这种酱油偏甜，你可以根据自己对甜味儿的喜好适量的用其它酱油代替。</p>\n<h4>加水和豆腐</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/997f60ae6222f4c07ca09e8c16654d9d.jpg\"></figure><p>前一步炒到酱汁浓稠的时候就可以加水了，我一般是先把豆腐放进去然后加水至刚刚没过豆腐即可，然后可以盖上锅盖焖煮二十分钟让豆腐入味，注意此时要换成小火让汤面微微沸腾即可，否则太激烈会把豆腐熬烂。</p>\n<h4>可以吃了</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/04/29/d5b90598c924636eb783a97d30b3e5e3.jpg\"></figure><p>这锅辣中带酸，酸里又满是蛤蜊和虾仁鲜美，用软嫩入味的豆腐陪着拌匀了这美妙汤汁的拌饭，还要什么自行车呢。如果你懒得煮饭，其实也可以直接在锅里加一些乌冬面，同样快乐老家。</p>\n<h2>最后</h2>\n<p>这个食谱里的菜式大都为中式食谱，它们共同的特点就是包容性强，所以无论是调味还是调酱汁，都不要过于忐忑我文中提到的「适量」或者「边加边尝」，要相信自己的味觉。</p>\n<p>因为无论食材、不同品牌酱料乃至水质都是一道菜里口味的变量，如果一味跟着别人足迹，反而会导致翻车。同时也要相信烹饪是有失败率的，其实回想起来我还挺怀念过去的每一次失败，特别是电饭煲拌饭、煲仔饭这种「机会只有一次」的料理，因为每次失败的总结都是下一次做得更好的铺垫，都不仅仅只是成功而已。</p>\n<p>加油，干饭人！</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/66362"},{"title":"搭建「知识框架」学习新领域，来看我如何快速入门产品经理","date":"2021-06-22 03:27:45","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>不知道你是否有过这样的情况：在你初识某个领域，想要深入地了解、学习这个领域知识时，总是会先极尽所能地收集一堆的资料，你或许会把一些基本的关键词在搜索引擎中搜索，得到一些公众号、网课、论文、相关的书等相关资料，也或许会向一些领域内的人请教，企图从对方身上获取快速学习该领域知识的通道或者方向。</p>\n<p>但问题就在于，当你得到大量的信息之后，面对这些内容你会一筹莫展。一方面收集信息是没有尽头的，比如了解到「用户体验」这个关键词，你或许又会从搜索引擎中得到「用户体验地图」这个知识点，从而无限地去延伸开，想要面面俱到的心，在刚接触某个领域的时候还是相当强烈的；另一方面，对待收集到的大量信息会不知道如何下手，究竟从哪一个知识点开始入手，这可是个难题，如何把收集到的信息串联起来，如何规划一个合理的学习路径，更是难上加难；甚至是，当你硬着头皮选择了一个知识点开始学习，也还是东一榔头西一棒槌地看了很多，却始终无法形成自己的知识结构体系……</p>\n<p>当你想要学习编程时，会很轻易的找到一套完整的知识体系和学习路径，只需要按图索骥地去学习就好了，但并非所有的领域都如编程一样容易搜集信息，于是，开始学习前的准备工作就显得尤为重要。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/20/ebb9682bc72cf3ae46d17629be0c5998.png\"><figcaption>某编程网站职业路径图</figcaption></figure><p>俗话说磨刀不误砍柴工，先整理收集到的信息，形成自己的知识框架和学习路径，把学习步骤整理清楚再有序地、按部就班地去学习，往往能够达到事半功倍的效果。希望我整理的这套简易方法，能够帮助有需求的朋友们快速地学习、掌握新的知识和技能，不论进入任何领域，都能在短时间内成为行家里手。</p>\n<h2>搭建知识框架</h2>\n<p>就像在进行写作前，通常我们会有一份写作大纲，明确自己要写的几个point，比如 <a href=\"https://sspai.com/post/58325\" target=\"_blank\">如何阅读英文原著</a> 这篇文章中，它的大纲大致是阅读前（选择书籍、找到资源）、阅读时（方法、工具等）、阅读后这样的结构。学习也是同样的，没有知识框架，我们就只是在零碎地接受信息，难以真正认识这个领域，也难以将所学应用起来。</p>\n<p>所谓知识框架，就是把零碎的知识点整合成一个较为体系的框架，它本质上是一个知识导航系统，与现在笔记软件中比较火热的双向链接功能所不同的是，它不是根据内容去做联系，也并不包含知识的内容，只是单纯的表达知识间的关系如等级关系、相关关系、逻辑关系等。</p>\n<p>它既包括知识概念、也包括技能，通过建立知识框架，我们可以迅速对该领域所需知识有个整体的了解， 也能发现需要填补的空白，规划出一个合理的知识路径，进行系统化地学习。</p>\n<p>那么，如何搭建知识框架呢？</p>\n<h4>确定搜索范围，广泛搜集资料，建立初步的结构框架。</h4>\n<p>搭建的过程中需要我们搜集大量的资料，梳理出领域内需要的知识和技能，并对知识点进行扫盲，要求我们做到博观约取。虽然在入门之前，大量的搜集资料是一个很常见也实际的做法，但是容易出现几种情况：打开网页就开始顺藤摸瓜无限跳转，这在收集资料之初并不是什么有效率的做法，因为刚开始的时候我们并不很清楚知识间的结构，很容易从一个大的知识主题进去顺藤摸到一个细小的知识；或者是像没头苍蝇一样，在搜索框里打上「产品经理」「如何转行产品经理」这种泛泛的问题，就开始搜集资料了，恨不得把沾点边的关键词都扒拉下来，☝️这样未免也太没有效率了。</p>\n<p>以我自学产品经理的经历为例，提供几个搜索思路给大家：</p>\n<ul>\n<li>招聘网站：可以看到产品经理所需要的技能、产品经理的职责和常见的一些产品方向；</li>\n<li>书籍：市面上大多还是入门类的书籍，多翻翻这类<strong>书籍的目录</strong>，看下他们的章节结构，可以进行小范围的主题阅读，大致了解一下知识分支和一些专业术语，快速厘清该领域的理论体系；</li>\n<li>培训网站 （起点学院、三节课等互联网职业类培训网站），看他们的<strong>课程大纲</strong>，也会了解到一些必备工具软件的使用；</li>\n<li>知乎：知乎可能收录了一些相关的问题组成了一个话题，或许还有索引，虽然这个索引有些业余，但聊胜于无；</li>\n</ul>\n<figure class=\"ss-imgRows\" figcaption=\"来自 招聘网站\"><img src=\"https://cdn.sspai.com/2021/06/03/26c27d9c97fe9320272bbbbf13766933.png\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/06/03/a88d48659c0f1e908b52630c6214bfeb.png\" alt=\"\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/03/article/2e2fb1684be192c12c99be80ce4f950b\"><figcaption>知乎话题</figcaption></figure><p>搜集完上述资料后要仔细做好分类，整理出一个大概的结构，它可能泛泛地给出一些方向，比如产品经理的分类、技能、知识、职责等，可能写下了「原型设计」、「竞品分析」、「数据分析」；它可能还不成体系，各个知识、技能间看似也毫无关系，先不要着急，只管列出来，简单整理合并。</p>\n<p>这一步的任务只是需要尽可能地掌握信息，目的是初识这个领域，最好能远观大象而不是靠近它的一根腿端详🐘，尽量把大象的全貌描绘出来，而细化和整理诸如大象有几颗牙齿的问题，那是后面的事情。</p>\n<p>💡：基本还是围绕「道、法、术」来，分别对应知识、技能方法和工具运用。</p>\n<h2>完善知识框架</h2>\n<p>走到这一步，我们应该构建起了一个相对庞大的知识框架。这个时候需要重新审视这份框架，将其精细化。这个阶段相较搭建过程来说更为关键，因为它决定了我们对领域知识理解的广度和深度，它是一个地基，领域知识大厦的构建就依据于此。</p>\n<p>当把大象的全貌描绘出来之后，我们就需要去细化一些细节了。在粗略地搭建框架时会碰到非常多的概念，这个时候需要把概念拆解掉。这个阶段可以尽情地顺藤摸瓜，直到没有新概念再出现为止。</p>\n<h4>筛选出关键词，使用 MECE 分析法逐层分解</h4>\n<p>《金字塔原理》这本书里提到了一个思考工具即 MECE 法则，MECE 全称 Mutually Exclusive Collectively Exhaustive，意思是<strong>各部分之间相互独立，所有部分完全穷尽，可以做到保证结构完整的同时不重复、知识颗粒度也足够细小</strong>。</p>\n<p>用 MECE 分析法将第一步中建立起的结构往下细分，直到在现有掌握的信息下无法分解为止。拿一个关键词为例，使用 MECE 去勾画出该关键词的知识框架，你可能会画出👇类似这种的一个分支。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/03/article/e85de998c9602195b5215cc2730ccbae\"></figure><h4>修正、合并或建立联系</h4>\n<p>我们需要梳理知识之间的联系，将相似、相近的知识点链接到一起。当然在学习中，或许还会不断地迭代更新这个知识地图，随着学习的深入，这个地图的内容会越来越丰富。当进行完这个阶段后，相信我们已经可以根据这份框架和所收集到的资料，规划出一个符合自己的学习路径和学习计划了。</p>\n<h2>践行并应用</h2>\n<h4>践行</h4>\n<p>走到这一步，就开始正式地开始学习了。根据前面搭建的框架，我们已经有一个明确的学习方向了。</p>\n<p>比如我的产品经理的知识框架中包含「知识」和「技能」两个大的方向，技能中有一块是原型设计，需要学习通过 Axure 或者 Sketch 来绘制原型。有的人或许是设计师转行，已经非常擅长界面设计，可能他的侧重点就在于理论知识的学习；而有的人是零基础，想要先从简单的产品技能开始。每个人的情况和学习习惯不同，要学会合理适合自己的学习路径。</p>\n<p>有一点需要注意的是，在上一个阶段中，我们已经建立起了知识间的联系，如果某些知识存在前后关联的话，尽量按照顺序去学习。比如我们在学习电影相关知识时，会有关于研究每个导演特点的相关部分，但它的前置知识是你需要了解导演所处的时代背景，充分知晓当时环境对其导演风格的影响，才能做出更全面的分析。</p>\n<p>在这个阶段的学习中，也需要将知识框架印刻在脑海里，无论学到哪一个知识分支，都要仔细思索它处在框架中的哪一部分，可以与其他哪些知识点相关联，它们之间的联系是如何建立起来的。在学习中一步步把框架用内容填充，将其变得丰满扎实。</p>\n<p>比如在学到「项目管理」这一个节点时，你不仅需要掌握相关技能，比如如何制作甘特图、如何把握进度、如何计算时间、质量、成本、风险等，还需要关联到一些知识，如在学习「需求管理」中的需求优先级的排列、需求的规划和变更，但它在你的知识框架中可能是完全独立的两块内容，你也很难在前期的建立框架时将其联系起来。在学习中不断思考、回顾，才能更好的推动你对某一个知识节点的把握和理解。</p>\n<h4>应用</h4>\n<p>前面都属于在「践行」这个知识框架，还在学习部分，接下来就到了「应用」这个框架的时候了。</p>\n<p>当回忆起「项目管理」这一个技能节点时，我们或许会考虑到「时间管理」、「需求管理」、「资源调控」、「沟通技巧」、「任务分配」等多个知识节点，我们不妨在学习后仔细思考围绕关于项目管理的主题，这些知识是如何聚集在一起的，他们各自的关系又是怎样。</p>\n<p>围绕这一个主题，我们或许可以把一个众多复杂的、某些地方交叉联系的子知识点提炼出来，将相关知识浓缩起来，变成一个新的知识节点。</p>\n<p>接下来就是去寻找应用场景，结合一些案例，它可以是你的实践，也可以来自你的观察。你需要将这个知识具体化、情境化，知道如何在问题中运用学到的知识，才算是真正将这个知识内化。在这个过程中，你会发现有些问题是有共性的，虽然各自不同，但本质都可以用一个方法去解决，这时候，就可以将这个主题抽象成一个模型，它包含这些知识及其之间的联系，包含主题知识内容对特定场景的解决方案，我们输出的这个模型，就是对这个知识框架的应用。</p>\n<p>我们会拥有大量属于自己的知识「模型」，这是真正属于自己的东西，是将知识内化的呈现。</p>\n<p>当你能够输出模型，并能从模型的角度看待、解决问题的时候，就已经踏入「专业」的行列了。</p>\n<p>插播：另一种目的性较强的学习可以用一些别的方式来检验学习成果，如我在<a href=\"https://sspai.com/post/57973\" target=\"_blank\">这篇文章</a>中提到打算学习 UI，虽说当时没打算强求自己达到作图的目标，但因为构建了相对完整的学习路径以及抱着「学都学了」的心态，后续还是想检验学习成果。而这个方式非常简单粗暴：投UI设计师简历，于我来说，达到被市场认可的水平算是已经「入门这个领域」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/20/48ed2ae9637b7ddb094a64dbb3636ce7.png\"><figcaption>学习计划</figcaption></figure><h2>更新知识框架</h2>\n<p>知识框架不是一成不变的，我们势必会在学习中不断更新，或许会不断地增添或者删减一些节点。虽然这已经不在「快速入门」该领域的范围，但还是值得一提。</p>\n<p>比如在初学产品经理时，我搭建起来的框架只有「知识」和「技能」两个大的模块，而在后续的学习中，我发现「能力」也格外重要，也需要不断地学习和提升，这其中包括「沟通能力」、「管理能力」等，于是这个框架从原来的两大模块变为三大模块，且在不断地学习中不断扩展。</p>\n<p>补充、更新知识框架，需要在实践中的积累以及开放的心态，定时去更新检阅自己的知识，在碎片化的信息中捕捉到对自己有用的信息，找机会将其拓展补充到框架之中，让自己的知识框架和内容保持新鲜生命力。</p>\n<h2>总结</h2>\n<p>这套方法的核心虽说在于知识框架的搭建上，但搭建时运用到的搜集整理能力、践行时的快速学习能力、举一反三能力、运用时的知识迁移能力不是每个人都具备的，方法说起来简单但践行并不简单。</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67015"},{"title":"订阅 YFun's Blog","date":"2021-06-20 10:30:00","description":"\n<p>自 2021 年 6 月 20 日起，本博客将同步更新 Twitter 和 Telegram 频道(由 IFTTT 提供支持)。</p>\n<ul>\n<li><a href=\"https://t.me/s/always_explore\">Telegram Channel</a></li>\n<li><a href=\"https://twitter.com/OhhhCKY\">Twitter</a></li>\n</ul>\n","link":"https://blog.yfun.top/posts/3249015232/"},{"title":"加速 GitHub 下载","date":"2021-06-18 17:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 18:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 18:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"From Twikoo To Waline","date":"2021-04-19 21:25:00","description":"\n<p>我建立博客以来，评论系统一直都在变化。你看，又换回 Waline 了。</p>\n<p>更换过程：</p>\n<p>Gitalk -&gt; Valine -&gt; Waline -&gt; Twikoo -&gt; Waline </p>\n<p>更换的原因是 Tencent CloudBase 的数据库每天只有 500 次读取，随随便便就没了，体验不是很好。</p>\n<p>而我需要的是一款有后端、免费部署的评论系统，于是我选择了 Waline。</p>\n<p>现在每天使用 GitHub Action 向 Waline API 发生请求，避免 LeanCloud 存档。</p>\n","link":"https://blog.yfun.top/posts/1685510532/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 20:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"树莓派 4 揽件日志","date":"2021-03-19 19:16:00","description":"\n<p>前两天在淘宝上购买了一台 4GB 版本的 树莓派 4 。</p>\n<p>在安装系统时我选择了 <code>Ubuntu Server</code> 系统，因为我并不打算使用图形化界面，而且 Raspbian 系统只有 32 位的 ╮(╯▽╰)╭。</p>\n<p>而商家发的是中通快递，速度慢不说，外包装都给我压烂了。(ó﹏ò｡)</p>\n<p>商家随主板还发货了一个闪迪 32GB TF 卡（读写速度还可以），一个电源，一个外壳还有一个小风扇。</p>\n<p>目前先折腾折腾，玩一玩，后面继续写文章。</p>\n<p>目前没有把网站迁移上去的想法，因为这样的话网站会变得很不稳定。</p>\n","link":"https://blog.yfun.top/posts/229627020/"},{"title":"为网站加入友好的深色模式支持","date":"2021-01-22 12:29:38","description":"\n<div class=\"note note-info\">            <div class=\"title\">转载文章</div>原文标题：你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持<p>原文链接：<a href=\"https://blog.skk.moe/post/hello-darkmode-my-old-friend/\">https://blog.skk.moe/post/hello-darkmode-my-old-friend/</a><br>原文作者：Sukka</p>          </div>\n<p>前几天为我的 Hexo 主题：Miracle 加入了深色模式，但我的技术还是太辣鸡，经常出现问题。</p>\n<p>无意间看到 Sukka 大佬的文章：「你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持」，跟着文章重构了主题深色模式的代码，就转载过来方便学习。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%80%E4%B9%88%E6%98%AF%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"什么是「深色模式」\"></a>什么是「深色模式」</h2>\n<p>很多操作系统在日落后会自动切换到「深色模式」、并不意味着「深色模式」就是「夜间模式」。「夜间模式」用于夜晚的弱光环境，主要目的是保护眼睛、减少强光刺激、避免影响睡眠，不难理解为什么 macOS 的 Night Shift 会自动调节屏幕色温、Android（AOSP）到了夜间可以选择启用系统级「琥珀色」滤镜。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/macos-settings.png\"><p>「深色模式」更像是一个主题，即使在白天也可以使用。不论是为了在 OLED 屏幕上省电、亦或是减少白光刺激护眼、亦或是暗色模式对色盲用户更加友好，总之 macOS 率先提出了系统级的「暗色模式」、并在 WebKit 中增加了对应的 Media Query，而后 Chromium、Firefox 先后跟进，如今兼容 <code>prefers-color-scheme</code> 的浏览器占有率已经高达 81.82%。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%88%A9%E7%94%A8-Media-Query-%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"利用 Media Query 简单实现深色模式\"></a>利用 Media Query 简单实现深色模式</h2>\n<p>CSS 媒体查询 <code>@media</code> 是一个足够强大的特性，可以有条件地将样式应用于文档和各种上下文中。<a href=\"https://drafts.csswg.org/mediaqueries-5/\">Media Queries Level 5 草案</a> 中提出了深色模式的判断方式 <code>prefers-color-scheme</code>，包含 <code>light</code>、<code>dark</code>、<code>no-preference</code> 三种值。而不支持 Media Queries 5 的浏览器会直接无视 CSS 中的 <code>prefers-color-scheme</code> Media Query，无需额外的代码即可优雅降级。</p>\n<p>还记得我刚刚说过「深色模式更像一个主题」么？为网站新增深色模式就如同换肤功能；搭配 <code>prefers-color-scheme</code>，编写深色模式的思路就如同编写响应式一般、无需赘述，结合几段 Code Snippet 一笔带过：</p>\n<h3>\n<a href=\"https://blog.yfun.top/#CSS-Variable-%E7%9A%84%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"CSS Variable 的方法实现深色模式\"></a>CSS Variable 的方法实现深色模式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-text</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>通过维护两套 CSS Variable，可以快速切换不同的配色方案。这种方法特点是所需代码较少，缺点是 CSS Variable 的兼容性较差，可能还需要引入额外的 Polyfill。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%BA%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E5%8D%95%E7%8B%AC%E7%BC%96%E5%86%99%E6%A0%B7%E5%BC%8F\" class=\"headerlink\" title=\"为深色模式单独编写样式\"></a>为深色模式单独编写样式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>直接维护两套样式的方法清晰直观、任何网站都可以基于这种方法进行改造。但会造成冗余代码、较难实现统一的风格、后期不易维护。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%9D%A1%E4%BB%B6%E6%80%A7%E5%8A%A0%E8%BD%BD%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E7%9A%84-CSS-%E6%96%87%E4%BB%B6\" class=\"headerlink\" title=\"条件性加载深色模式的 CSS 文件\"></a>条件性加载深色模式的 CSS 文件</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* main.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* dark.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"main.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"dark.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"(prefers-color-scheme: dark)\"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用 <code>&lt;link&gt;</code> 标签的 Media Query，甚至可以单独加载暗色模式的 CSS 文件。</p>\n<blockquote><p>需要注意 CSS 选择器的权重，因此作为可选的 <code>dark.css</code> 一定要放在 <code>main.css</code> 之后加载。</p></blockquote>\n<p>除了上述三种方式以外，使用 CSS <code>filter</code> 或 <code>mix-blend-mode</code> 还可以实现对网站整体色调的改变，可以确保配色风格的统一性。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7\" class=\"headerlink\" title=\"「深色模式」的兼容性\"></a>「深色模式」的兼容性</h2>\n<p>虽然有了优雅的 <code>prefers-color-scheme</code> 可以识别操作系统的显示模式，但是对于用户来说，仅依赖 Media Query 的「深色模式」并不能带来很好的体验。<br>首先是浏览器兼容性。虽然支持该特性的浏览器的市场占有率非常喜人，但是从版本号上来看却并不乐观：</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/caniuse.png\"><p>考虑到使用 Chormium 70 内核甚至 Tencent X5 内核的国产浏览器，大部分用户并没有机会体验到深色模式。除此以外，操作系统级别的「深色模式」实现也会受到 OEM 厂商的影响 —— 虽然 Android 10（AOSP）提供「深色模式」，但是一加的 OxygenOS 却将其深藏在系统主题设置里，没有自动切换、在 Quick Settings 里也没有快速的切换开关。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%94%A8%E6%88%B7%E5%8F%8B%E5%A5%BD%E7%9A%84%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"设计一个用户友好的「深色模式」\"></a>设计一个用户友好的「深色模式」</h2>\n<p>受限于兼容性和复杂的操作系统，大部分网站依然在使用更传统的「开关」切换 —— 通过 toggle <code>&lt;html&gt;</code> 或<br><code>&lt;body&gt;</code> 的 class 属性实现在两套样式之间切换、并将开关的状态记忆在 localStorage 中的方法虽然有效，却是无奈之举，手动切换开关相比 <code>prefers-color-scheme</code> 也不够优雅。如果将「开关」和 <code>prefers-color-scheme</code> 结合起来，就可以带来更好的用户体验：</p>\n<ul>\n<li>对于不兼容的浏览器或操作系统，访客依然可以通过开关手动切换显示模式</li>\n<li>对于兼容的浏览器或操作系统，Media Query 能够实现在两种显示模式之间切换</li>\n<li>在兼容的浏览器或操作系统上，用户还可以通过开关 override 当前的显示模式</li>\n</ul>\n<p>在将两者组合在一起时，不能简单地用「开关」覆盖 <code>prefers-color-scheme</code>，否则用户触发开关、状态被永久记忆在 localStorage 之后，就变成了僵硬的手动模式。<br>举个例子。访客可能在操作系统还没有自动切换到「深色模式」时通过网站上的开关切换显示模式，经过一个夜晚后到了次日白天、访客再度访问网站时，自然希望不需要再切换开关、网站就能以常规的浅色模式显示。因此设计思路是当 <code>prefers-color-scheme</code> 的值发生改变（从 与用户需要的显示模式不同 变成 相同）时清空 localStorage 中储存的开关状态，此时显示模式切换回基于 Media Query 的「自动」模式。</p>\n<p><strong>Talk is cheap, here goes the code.</strong></p>\n<p>首先是 CSS：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'dark'</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-attr\">[data-user-color-scheme]</span>) {</span><br><span class=\"line\">    <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-attr\">[data-user-color-scheme=<span class=\"string\">'dark'</span>]</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>真是令人看的头大，让我们逐行来看都是些什么：</p>\n<ul>\n<li>在 <code>:root</code> 下定义了一个 CSS Variable <code>--color-mode: light</code> 和在浅色模式下用到的 CSS Variable（比如使用深色 <code>#333</code> 作为主要字体颜色）。</li>\n<li>使用 <code>prefers-color-scheme</code> 的 Media Query 定义深色模式下的 CSS Variable： <code>--color-mode: light</code> 。深色模式的样式（如浅色 <code>#eff</code> 作为主要字体颜色）要定义在 <code>:not([data-user-color-scheme])</code> 伪类下以避免「开关」的行为覆盖浏览器的样式。</li>\n<li>为 <code>[data-user-color-scheme='dark']</code> 再定义一遍深色模式下用到的样式。<br>有了这段 CSS，不难理解深色模式何时会生效：当操作系统使用「深色模式」且 <code>&lt;html&gt;</code> 或 <code>&lt;body&gt;</code> 标签上没有 <code>data-user-color-scheme</code> 属性时、或者存在 <code>data-user-color-scheme</code> 属性且值为 <code>dark</code> 时。</li>\n</ul>\n<p>然后是困难的部分了：编写 JavaScript 为「开关」添加行为。</p>\n<p>先定义一些常量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rootElement = <span class=\"built_in\">document</span>.documentElement; <span class=\"comment\">// &lt;html&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeStorageKey = <span class=\"string\">'user-color-scheme'</span>; <span class=\"comment\">// 作为 localStorage 的 key</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeMediaQueryKey = <span class=\"string\">'--color-mode'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> rootElementDarkModeAttributeName = <span class=\"string\">'data-user-color-scheme'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeTogglebuttonElement = <span class=\"built_in\">document</span>.getElementById(<span class=\"comment\">/* element id */</span>);</span><br></pre></td></tr></table></figure><p>接下来，用 <code>try {} catch (e) {}</code> 封装一下 localStorage 的操作，以应对 HTML5 Storage 被禁用、localStorage 被写满、localStorage 实现不完整的情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> setLS = <span class=\"function\">(<span class=\"params\">k, v</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.setItem(k, v);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> removeLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.removeItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">localStorage</span>.getItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span> <span class=\"comment\">// 与 localStorage 中没有找到对应 key 的行为一致</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>我们还需要一个函数读取当前 <code>prefers-color-scheme</code> 的方法。由于已经在 CSS 中定义了 <code>--color-mode</code>，所以在 JS 中直接读取就好了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getModeFromCSSMediaQuery = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = getComputedStyle(rootElement).getPropertyValue(darkModeMediaQueryKey);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res.length) <span class=\"keyword\">return</span> res.replace(<span class=\"regexp\">/\\\"/g</span>, <span class=\"string\">''</span>).trim();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res === <span class=\"string\">'dark'</span> ? <span class=\"string\">'dark'</span> : <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 使用 matchMedia API 的写法会优雅的多</span></span><br><span class=\"line\">  <span class=\"comment\">// return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>还记得我们需要自动取消手动模式回到 <code>prefers-color-scheme</code> 么？意味着我们需要一个函数清掉 LS、删掉 <code>&lt;html&gt;</code> 存在的 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> resetRootDarkModeAttributeAndLS = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  rootElement.removeAttribute(rootElementDarkModeAttributeName);</span><br><span class=\"line\">  removeLS(darkModeStorageKey);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>接下来是起主要作用的函数了，负责为 <code>&lt;html&gt;</code> 标签修改 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> validColorModeKeys = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> applyCustomDarkModeSettings = <span class=\"function\">(<span class=\"params\">mode</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 接受从「开关」处传来的模式，或者从 localStorage 读取</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> currentSetting = mode || getLS(darkModeStorageKey);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (currentSetting === getModeFromCSSMediaQuery()) {</span><br><span class=\"line\">    <span class=\"comment\">// 当用户自定义的显示模式和 prefers-color-scheme 相同时重置、恢复到自动模式</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) { <span class=\"comment\">// 相比 Array#indexOf，这种写法 Uglify 后字节数更少</span></span><br><span class=\"line\">    rootElement.setAttribute(rootElementDarkModeAttributeName, currentSetting);</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 首次访问或从未使用过开关、localStorage 中没有存储的值，currentSetting 是 null</span></span><br><span class=\"line\">    <span class=\"comment\">// 或者 localStorage 被篡改，currentSetting 不是合法值</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>当然，「开关」还需要一个函数，这个函数负责获取相反的显示模式，同时还要将新的模式写入 localStorage 存储起来：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> invertDarkModeObj = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"string\">'light'</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"string\">'dark'</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> toggleCustomDarkMode = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentSetting = getLS(darkModeStorageKey);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) {</span><br><span class=\"line\">    <span class=\"comment\">// 从 localStorage 中读取模式，并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[currentSetting];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentSetting === <span class=\"literal\">null</span>) {</span><br><span class=\"line\">    <span class=\"comment\">// localStorage 中没有相关值，或者 localStorage 抛了 Error</span></span><br><span class=\"line\">    <span class=\"comment\">// 从 CSS 中读取当前 prefers-color-scheme 并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[getModeFromCSSMediaQuery()];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 不知道出了什么幺蛾子，比如 localStorage 被篡改成非法值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>; <span class=\"comment\">// 直接 return;</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"comment\">// 将相反的模式写入 localStorage</span></span><br><span class=\"line\">  setLS(darkModeStorageKey, currentSetting);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> currentSetting;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>相关的函数都定义完了，是时候添加函数执行了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当页面加载时，将显示模式设置为 localStorage 中自定义的值（如果有的话）</span></span><br><span class=\"line\">applyCustomDarkModeSettings();</span><br><span class=\"line\"></span><br><span class=\"line\">darkModeTogglebuttonElement.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 当用户点击「开关」时，获得新的显示模式、写入 localStorage、并在页面上生效</span></span><br><span class=\"line\">  applyCustomDarkModeSettings(toggleCustomDarkMode());</span><br><span class=\"line\">})</span><br></pre></td></tr></table></figure><p>我的博客也使用的这种实现，通过 Navbar 中的按钮体验一下吧！</p>\n","link":"https://blog.yfun.top/posts/175456095/"},{"title":"博客最近的一些改变","date":"2021-01-13 18:15:49","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>经过近一个月的开发，Miracle 主题已经发布至 <code>v1.2.0</code> 版本，也正式可以开始使用。</p>\n<p>主题仓库：<a href=\"https://t.yfun.top/api/jump?u=https://github.com/hifun-team/hexo-theme-miracle\">hifun-team/hexo-theme-miracle</a></p>\n<p>主题对输出的内容等进行优化，去除不必要的资源，速度非常之快。</p>\n<blockquote><p>PS: 主要原因是主题的首页没有图片，这主要是因为我不想找图，而且会拖慢页面速度，一举两等。[doge]</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AF%84%E8%AE%BA\" class=\"headerlink\" title=\"评论\"></a>评论</h2>\n<p><del>评论更换为 Waline，这样我就有了评论后台、回复通知和关键词过滤，真不错！</del></p>\n<blockquote><p>已更换至 Twikoo</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E9%83%A8%E7%BD%B2\" class=\"headerlink\" title=\"部署\"></a>部署</h2>\n<p><del>部署换回了直接部署 ( <code>hexo d</code> )，因为主题在 <code>Action</code> 部署时一直无法解析 <code>Tag 插件</code>，而本地又可以...</del></p>\n<p><del>而且实际上使用云部署的次数并不多，因为我每次写完文章以后都会自己看一遍，不太必要。</del></p>\n<p>已重新切换回云部署，并且已经解决无法解析 <code>Tag 插件</code> 的问题。</p>\n","link":"https://blog.yfun.top/posts/1987652759/"},{"title":"使用 Cloudflare 加速你的网站","date":"2020-12-15 16:19:29","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>CloudFlare 为我们提供了免费的 CDN 服务，并拥有全球各地的优秀节点，作为<strong>国外比较优秀</strong>的 CDN 服务商。</p>\n<p>但是，来自国内的访问都会被 CloudFlare 绕到大洋彼岸的美国。再加上某神秘的阻碍，导致在国内的访问一直不是很好。Ping 出延迟基本大于 &gt;= 200ms 。</p>\n<p>在一次偶然的机会中，发现：</p>\n<ul>\n<li>CloudFlare 拥有很多节点。</li>\n<li>CloudFlare 的节点之间速度非常之快。</li>\n<li>CloudFlare 的节点之间几乎没有延迟。</li>\n<li>CloudFlare 所有节点均免费，基本可以随便接入。</li>\n</ul>\n<hr>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%9E%E8%B7%B5\" class=\"headerlink\" title=\"实践\"></a>实践</h2>\n<p>既然发现了这个好办法，那么就开始实践吧！</p>\n<p>首先，前往「CloudFlare Partner」的站点登录。</p>\n<blockquote><p>这里要注意！CloudFlare 官方已经停止 CNAME 接入，只能前往「CloudFlare Partner」接入。</p></blockquote>\n<p>以 <a href=\"https://t.yfun.top/api/jump?u=https://cdn.moeelf.com/\">萌精灵 CDN</a> 为例，打开其官网：<a href=\"https://t.yfun.top/api/jump?u=https://cdn.moeelf.com/\">https://cdn.moeelf.com/</a> 并登录你的 CloudFlare 账号。</p>\n<p>然后点击页面右上角的「添加域名」并加你的域名接入 CloudFlare 。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/gh/MyBlog-GitHub/image-upload@main/uPic/hPX5DZ.png\"><p>输入域名并点击「添加」即可添加成功。</p>\n<p>接下来点击主页列表里的「管理 DNS」进入管理界面。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/gh/MyBlog-GitHub/image-upload@main/uPic/mLAxAy.png\"><p>接下来点击「添加新记录」添加一个新的记录。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/gh/MyBlog-GitHub/image-upload@main/uPic/UqyfQI.png\"><img webp-comp src=\"https://cdn.jsdelivr.net/gh/MyBlog-GitHub/image-upload@main/uPic/F0QTaI.png\"><p>然后进入你域名的 DNS 管理系统，注意是解析域名的地方。</p>\n<p>找到「CNAME 接入」处的对应 CNAME 地址，将其设为相应的解析地址。</p>\n<hr>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%8A%A0%E9%80%9F%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"加速访问\"></a>加速访问</h2>\n<p>虽然默认提供给我们的节点很慢，但我们可以从 CloudFlare 公开的节点中寻找访问速度快的节点。</p>\n<p>我找到了几个国内速度不错的节点，可以参考参考：</p>\n<table>\n<thead><tr>\n<th>IP 地址</th>\n<th>运营商</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>104.27.169.248</td>\n<td>默认</td>\n</tr>\n<tr>\n<td>104.19.19.119</td>\n<td>移动</td>\n</tr>\n<tr>\n<td>141.101.115.11</td>\n<td>移动</td>\n</tr>\n<tr>\n<td>104.16.245.1</td>\n<td>联通</td>\n</tr>\n<tr>\n<td>104.16.246.1</td>\n<td>联通</td>\n</tr>\n<tr>\n<td>104.20.157.19</td>\n<td>电信</td>\n</tr>\n<tr>\n<td>141.101.114.202</td>\n<td>电信</td>\n</tr>\n</tbody>\n</table>\n<p>然后再将原来的 CNAME 记录改为 A 记录到以上 IP，再配合智能运营商解析，达到提速。</p>\n<p>如果你不想一个一个设置，可以直接将「默认」记录指向 <code>cf.record.yfun.top</code> ，节点基本都是上面的，但偶尔会改变。</p>\n<p>可能会遇到的情况：<a href=\"https://blog.yfun.top/#%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E7%AD%BE%E5%8F%91-SSL-%E8%AF%81%E4%B9%A6%EF%BC%9F\">无法正常签发 SSL 证书</a></p>\n<hr>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E7%AD%BE%E5%8F%91-SSL-%E8%AF%81%E4%B9%A6%EF%BC%9F\" class=\"headerlink\" title=\"无法正常签发 SSL 证书？\"></a>无法正常签发 SSL 证书？</h3>\n<p>CloudFlare 默认会提供免费 SSL 证书服务，但使用「加速节点」可能导致无法正确签发。</p>\n<p>解决方法：使用智能 DNS，将「境外」的记录解析至控制面板提供给您的官方地址。</p>\n<hr>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%90%AF-SSL-%E5%90%8E%E8%AE%BF%E9%97%AE%E9%94%99%E8%AF%AF%EF%BC%9F\" class=\"headerlink\" title=\"开启 SSL 后访问错误？\"></a>开启 SSL 后访问错误？</h3>\n<p>试着为源站配置 SSL 证书，然后前往官方控制台（<a href=\"https://dash.cloudflare.com/\">https://dash.cloudflare.com</a>）将域名的 SSL 设为「完全」。</p>\n<p>注意：使用「完全」方式请务必确定源站已开启 SSL！</p>\n<hr>\n<h2>\n<a href=\"https://blog.yfun.top/#%E9%80%9F%E5%BA%A6\" class=\"headerlink\" title=\"速度\"></a>速度</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">PING cf.record.yfun.top (141.101.115.11): 56 data bytes</span><br><span class=\"line\">64 bytes from 141.101.115.11: icmp_seq=0 ttl=52 time=17.007 ms</span><br><span class=\"line\">64 bytes from 141.101.115.11: icmp_seq=1 ttl=52 time=16.363 ms</span><br><span class=\"line\">64 bytes from 141.101.115.11: icmp_seq=2 ttl=52 time=21.385 ms</span><br><span class=\"line\">64 bytes from 141.101.115.11: icmp_seq=3 ttl=52 time=19.305 ms</span><br><span class=\"line\">64 bytes from 141.101.115.11: icmp_seq=4 ttl=52 time=16.341 ms</span><br><span class=\"line\">64 bytes from 141.101.115.11: icmp_seq=5 ttl=52 time=23.181 ms</span><br><span class=\"line\">64 bytes from 141.101.115.11: icmp_seq=6 ttl=52 time=18.888 ms</span><br><span class=\"line\">64 bytes from 141.101.115.11: icmp_seq=7 ttl=52 time=18.087 ms</span><br><span class=\"line\">64 bytes from 141.101.115.11: icmp_seq=8 ttl=52 time=16.153 ms</span><br><span class=\"line\">64 bytes from 141.101.115.11: icmp_seq=9 ttl=52 time=19.363 ms</span><br><span class=\"line\"></span><br><span class=\"line\">--- cf.record.yfun.top ping statistics ---</span><br><span class=\"line\">10 packets transmitted, 10 packets received, 0.0% packet loss</span><br><span class=\"line\">round-trip min/avg/max/stddev = 16.153/18.607/23.181/2.209 ms</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/995700211/"}]