[{"title":"米哈游新作《绝区零》首曝 PV 中透露了哪些讯息？","date":"2022-05-15 08:29:54","description":"\n<h2>导言</h2>\n<p data-pid=\"7Ig7BrUj\">本来我是不打算蹭绝区零这一波热度的啊，想着玩玩星穹铁道就差不多了。</p>\n<p data-pid=\"KGAAuvka\">不过芙兰达半夜告诉我的一个发现，让我直接失眠。</p>\n<p data-pid=\"xA_1Nevg\">考据了一夜，我大受震撼——</p>\n<p data-pid=\"p7lM5-wG\">（胡言乱语）米哈游，你下得一盘大棋啊！</p>\n<p data-pid=\"enPn-sDV\">本文将为您讲解我发现的《绝区零》《崩坏：星穹铁道》《崩坏3》《原神》</p>\n<p data-pid=\"sKQkB39R\">设定间可能有所联系的部分，</p>\n<p data-pid=\"UbBbdnY2\">至于到底是彩蛋还是确有关联，就交给诸位去联想了~</p>\n<hr>\n<h2>一、绝区零：白祇重工与Belobog</h2>\n<p><img src=\"https://pic2.zhimg.com/v2-88059c235b0506357fb34f35998201b4_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"691\" data-rawheight=\"292\" data-watermark=\"original\" data-original-src=\"v2-88059c235b0506357fb34f35998201b4\" data-watermark-src=\"v2-096c3ec7967acc9561b9f6220d97c1ed\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"V83NVr2t\">那个让我通宵考据的发现，就是绝区零PV中白祇重工的翻译Belobog。</p>\n<p data-pid=\"8eHTinL5\">本来芙兰达只发现了前六个字母，正在沉思这是什么语言，</p>\n<p data-pid=\"URF3HhSb\">绮罗星一语点醒梦中人：</p>\n<p data-pid=\"Wur3-vnH\">这不就是星穹铁道的始发地贝洛伯格（Belobog）吗？</p>\n<p><img src=\"https://pic2.zhimg.com/v2-1c22f76192b97f57fa8bbc105230916a_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"692\" data-rawheight=\"389\" data-watermark=\"original\" data-original-src=\"v2-1c22f76192b97f57fa8bbc105230916a\" data-watermark-src=\"v2-77389ba06ea18f5e331b2359938e0fa1\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"7HYnbeTB\"> 嚯，一查英文，还真是！</p>\n<p data-pid=\"u6gtQbbg\">星穹铁道官方在《旅情见闻丨场景篇「贝洛伯格」》中透露道：</p>\n<p data-pid=\"bA5Mv58a\">贝洛伯格是灾难后“仅存的人类城市”。</p>\n<p data-pid=\"MI5mB_6g\">绝区零的公告里也写着：</p>\n<p data-pid=\"-z3fp9yN\">“旧文明覆灭，秩序被埋葬。</p>\n<p data-pid=\"pQxXJk7P\">所幸，还存在着一座有能力应对‘空洞’灾害的都市：新艾利都。”</p>\n<p data-pid=\"Vu6sLNzh\">哦？都是末世的最后一座城市？</p>\n<p data-pid=\"jRZxOY5t\">那啥，你们的世界又毁灭了吗？欸，巧了，我们也是。</p>\n<p data-pid=\"_Ymgg2dV\">这算不算缘分，我说不好。</p>\n<p data-pid=\"oglaVJQf\">更巧的是，那篇文章还描述了这座城市下层区的情况：</p>\n<p data-pid=\"8zYdJJ3H\">“名为「裂界」的裂隙也蔓延生长，蚕食了地底的现实”。</p>\n<p data-pid=\"cmYWTZ-O\">嗯？这说法怎么这么耳熟？</p>\n<p data-pid=\"DnyPxn7h\">再一看绝区零对于他们世界主要灾害“空洞”的说法：</p>\n<p data-pid=\"39_aN35S\">“那里面空间紊乱，怪物肆虐，异变横生”。</p>\n<p data-pid=\"-II1R23D\">空洞、裂隙……蚕食现实、空间紊乱……我不好说啊，我不好说啊xdm。</p>\n<p data-pid=\"sde8E7-O\">这……不，什么树海宇宙，我不相信，我不相信，都是巧合啊，信我都是巧合啊。</p>\n<hr>\n<h2>二、星穹铁道：贝洛伯格与雅利洛</h2>\n<p><img src=\"https://pic2.zhimg.com/v2-96d15fab94a4c4359ec4e8d67f8453ab_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"692\" data-rawheight=\"292\" data-watermark=\"original\" data-original-src=\"v2-96d15fab94a4c4359ec4e8d67f8453ab\" data-watermark-src=\"v2-f2dbf59d7790d0ad00c8685bc9d7dde3\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"KbaB4llP\">这词肯定还有别的意思！</p>\n<p data-pid=\"gRN66Y7J\">对，联系“白祇重工”这个说法，</p>\n<p data-pid=\"_4vMfnwp\">“白祇”，大白话就是“白神”（the White God）嘛。</p>\n<p data-pid=\"-DdZ9idp\">俄罗斯那边，斯拉夫语的词根“白”*bělъ (\"white\") +“神” *bogъ (\"god\")</p>\n<p data-pid=\"GRpnPLfk\">就是“白神”（Bělobogъ/Bělъ Bogъ, Belobog/Belbog/Bielbog）的意思了。</p>\n<p data-pid=\"tDq8DlUh\">怎么样，很简单吧？</p>\n<p data-pid=\"IueaCaEO\">史料记载啊，这个词实际上是生造的。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-6b4171f4dde624112c96917b5b031c17_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"352\" data-rawheight=\"661\" data-watermark=\"original\" data-original-src=\"v2-6b4171f4dde624112c96917b5b031c17\" data-watermark-src=\"v2-593b801ebb08c04a75c7777da6f7dc33\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-cb88c03beb27da8fb7077fe0f1e5d6aa_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"328\" data-rawheight=\"498\" data-watermark=\"original\" data-original-src=\"v2-cb88c03beb27da8fb7077fe0f1e5d6aa\" data-watermark-src=\"v2-09c2c84979a12f1cd8b2ac2d49b241ec\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"hvqTc3SI\"> 维基上的资料参考了俄罗斯科学院出版的一本辞典，</p>\n<p data-pid=\"mHjE-5eL\">简单概括一下就是：</p>\n<p data-pid=\"Gdq-P1iD\">根据《斯拉夫年表》（Chronicle of the Slavs）的记载，</p>\n<p data-pid=\"atS8THKa\">过去的斯拉夫人在祭祀仪式中会围绕一个圆盘转圈，</p>\n<p data-pid=\"QDL0AmE2\">同时他们会念叨一些祝词之类的东西，</p>\n<p data-pid=\"gM9kyiLp\">这些词都会以他们观念中相互斗争的两个神，“善神”和“恶神”为名义。</p>\n<p data-pid=\"wUfwFUrK\">这个恶神叫切尔诺伯格（Chernebog），</p>\n<p data-pid=\"gJbWYNg9\">由斯拉夫语的“黑色”和“神”组成（参考上面的词根拆分），</p>\n<p data-pid=\"zPQ6lZHs\">所以有人就据此发明了一个相反的“白神”，用来称呼那个与切尔诺伯格对立的善神，</p>\n<p data-pid=\"L7tsejNx\">就叫“贝洛伯格”。</p>\n<p data-pid=\"2ykfeAT8\">嗯……切尔诺伯格，这不是隔壁某某方舟的吗？</p>\n<p data-pid=\"_4wGBFit\">别误会，我说的是基督教神话的诺亚方舟（确信）。</p>\n<p><img src=\"https://pica.zhimg.com/v2-b574d2c929941cb6d026ddda3e549542_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"692\" data-rawheight=\"1063\" data-watermark=\"original\" data-original-src=\"v2-b574d2c929941cb6d026ddda3e549542\" data-watermark-src=\"v2-e051e910acad058e3e8e98d98110e0a7\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"CEzcTedb\">好了不开玩笑，根据铁道官方的说法，贝洛伯格这座城市坐落于“雅利洛-Ⅵ”星球上。</p>\n<p data-pid=\"PqxCU-D5\">《「银河智库 | 雅利洛-Ⅵ」》里面管这个雅利洛（Jarilo）叫“春日战神”，</p>\n<p data-pid=\"ioBrZ7GI\">实际上呢就是一个斯拉夫轮回神（可以简单理解成他每年都死去活来一次）的名字，</p>\n<p data-pid=\"Ui7JqmHG\">词源*yeh₁r-就是原始印欧语的春天，</p>\n<p data-pid=\"IsInlZmO\">被当成代表春季的神也不意外。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-2b46ffb3026793938d445e8c559213f9_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"250\" data-rawheight=\"250\" data-watermark=\"original\" data-original-src=\"v2-2b46ffb3026793938d445e8c559213f9\" data-watermark-src=\"v2-0e2b9df741f624031feb03e7a3ced139\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"yepH0XsG\">白祇重工的logo是拼音首字母BQ的交叉符号，可能参考了斯拉夫符号的科莱达（Koliada），</p>\n<p data-pid=\"GPShO9bX\">代表冬季的过去与新春的到来，其词源是“圆、循环”（cycle）和“车轮”（wheel），</p>\n<p data-pid=\"1MfJDpHb\">大抵对应着我上面说的白神贝洛伯格与黑神切尔诺伯格的那个仪式圆盘。</p>\n<p data-pid=\"8hwEGu5D\">在神话里，雅利洛是斯拉夫至高神之一雷神佩伦（Perun）的儿子。</p>\n<p data-pid=\"1MHO8Jpo\">星穹铁道的雅利洛英译选用的是塞尔维亚语（Serbo-Croatian），</p>\n<p data-pid=\"pTCVqd1n\">而塞尔维亚的贝洛伯格被学者视为善神佩伦的化身。</p>\n<p data-pid=\"K5P7O08T\">也就是说，雅利洛是贝洛伯格的儿子？</p>\n<p data-pid=\"U_Qhy7Gi\">但贝洛伯格这座城市却坐落在雅利洛星球上……</p>\n<p data-pid=\"piINJCUK\">好怪啊xdm。</p>\n<p data-pid=\"V_ZpPXz7\">神话认为，雅利洛的妻子莫拉娜（Morana）在丈夫死去后会化身死亡与寒冬的女神，</p>\n<p data-pid=\"htkyJOHb\">为世界带来寒潮后死去。</p>\n<p data-pid=\"oZR5dd_L\">于是一年从雅利洛代表的春天开始，到她妻子代表的冬天结束，</p>\n<p data-pid=\"Vr199oPa\">最后他们都会在第二年复活。</p>\n<p><img src=\"https://pica.zhimg.com/v2-54a1a208eeccd46c59058c37c2ea62b7_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"692\" data-rawheight=\"389\" data-watermark=\"original\" data-original-src=\"v2-54a1a208eeccd46c59058c37c2ea62b7\" data-watermark-src=\"v2-da9460f2404e8e67b090546f2d7dc2a7\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"-JnZ8ue1\">这对应着星穹铁道“雅利洛-Ⅵ”星球遭遇的灭世寒潮，</p>\n<p data-pid=\"07R1WCNo\">米哈游在这方面的考据还是相当用心的。</p>\n<p data-pid=\"5jBsnFtd\">更让我觉得用心良苦的是，雅利洛这个神实际上仅在一份史料中出现过，</p>\n<p data-pid=\"DP97nUV9\">那是一位知名的德国神父、主教——</p>\n<p data-pid=\"NXzqVmrD\">他生于十字军东征和赎罪卷发行的年代——</p>\n<p data-pid=\"u3oThkcB\">他将启示（Apocalypse）的光辉遍洒欧洲——</p>\n<p data-pid=\"kt725Z3R\">没错，我说的就是奥托（Otto）。</p>\n<p data-pid=\"hM4ROM3B\">雅利洛的神话仅见于奥托主教的传记。</p>\n<p data-pid=\"O3yzai1H\">谢谢你，星穹铁道，因为有你，我终于确定了奥托对应历史上的哪位奥托。</p>\n<hr>\n<h2>三、崩坏3rd：奥托与亚空</h2>\n<p data-pid=\"w_Y2TO4g\">那奥托跟星穹铁道和绝区零又有啥关系呢？</p>\n<p data-pid=\"TuNui8la\">嗯，以下是一点点个人猜想，强调一下是猜（xia）想（bai）。</p>\n<p data-pid=\"I0p_wcvU\">奥托的K系列卡莲（Kallen）复活试验制造了如今的空之律者K423，</p>\n<p data-pid=\"0pfEhK9Z\">她的一个众所周知的技能是亚空之矛，</p>\n<p data-pid=\"jmTcVw5S\">也就是崩坏三经典PV《最后一课》里的那堆从圆形空洞里钻出来的玩意。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-b1bcc0aa2c2674cdff8807a6d9ba5105_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"692\" data-rawheight=\"389\" data-watermark=\"original\" data-original-src=\"v2-b1bcc0aa2c2674cdff8807a6d9ba5105\" data-watermark-src=\"v2-2694d9d4c23e579d78b2c795c935df31\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-ab47d6f5339ed9aaf94c4078f95da4a4_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"691\" data-rawheight=\"389\" data-watermark=\"original\" data-original-src=\"v2-ab47d6f5339ed9aaf94c4078f95da4a4\" data-watermark-src=\"v2-36bc70ed7f944e907350a82eff59b866\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"X1eLhbgW\"> ……等等，黑色空洞？</p>\n<p data-pid=\"2z6ZFnKG\">绝区零在推特（twitter）上是不是管这灾难玩意叫亚空（the sub-Hollow）来着？</p>\n<p data-pid=\"vDfAN3C3\">这玩意里边冒出来的怪物是不是和奥托在《阿波卡利斯如是说》那儿虚数之树面前打的差不多来着？</p>\n<p><img src=\"https://pica.zhimg.com/v2-6bcb6268ef3f073d4c0df673d4973d71_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"692\" data-rawheight=\"389\" data-watermark=\"original\" data-original-src=\"v2-6bcb6268ef3f073d4c0df673d4973d71\" data-watermark-src=\"v2-801c1b0fdeb0df5d7bb3ce252d718fb6\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-0da299a4dbf955ce6780f90543cf90a3_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"692\" data-rawheight=\"292\" data-watermark=\"original\" data-original-src=\"v2-0da299a4dbf955ce6780f90543cf90a3\" data-watermark-src=\"v2-5508237e767e87dbfb1c0abc2b6d7575\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"UWiHHD85\">这熟悉的黑绿配色……</p>\n<p data-pid=\"HCVfzE1G\">女王的亚空之矛是亚空间（Sub-Space）……</p>\n<p data-pid=\"OSspPCq-\">不好说，这波我不好说啊。</p>\n<p data-pid=\"41WpEGjw\">啊，更神必的是原神实际上也有这个亚空（Aeons），</p>\n<p data-pid=\"tZjYxPrB\">那是尘世七执政（Archons）的别称（Aeons）另译，</p>\n<p data-pid=\"BR26eZwM\">意思是与“高天”相对的“低空”，大概就是天空岛以下的七国（对应Heavens），</p>\n<p data-pid=\"Q5O_Mn6i\">可以同时指代七神或者七国。</p>\n<p><img src=\"https://pica.zhimg.com/v2-29a73651bfb41d30e7639d13d3dab13e_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"692\" data-rawheight=\"661\" data-watermark=\"original\" data-original-src=\"v2-29a73651bfb41d30e7639d13d3dab13e\" data-watermark-src=\"v2-9de93f2dfd8e35ad3c0397e850337bdd\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"SCkoafeH\">如果这个词指代神的话……它又是星穹铁道设定里“星神”（Aeons）的翻译。</p>\n<p data-pid=\"lyzz5YoG\">当初我看到说星神是概念拟人，心想崩坏你怎么又抄袭原神了，</p>\n<p data-pid=\"lok0NxqV\">你以为你套一个诺斯替神话的皮大家就认不出来了？（此条五毛记得删括号）</p>\n<p data-pid=\"gTqE1ngb\">结果万万没想到它直接给翻译成了Aeons，生怕玩家不知道是吧。</p>\n<hr>\n<h2>四、原神：Aeons与伊斯塔露</h2>\n<p data-pid=\"r8vk7Pp5\">虽然星穹铁道提到的“旅途”、“旅途的尽头”总是让我幻视原神，</p>\n<p data-pid=\"km6EFBTs\">但这么直白反而给我整不会了。</p>\n<p data-pid=\"rxCVMIRZ\">执政跟星神是同一个词，我怎么会做这样的梦？</p>\n<p><img src=\"https://pica.zhimg.com/v2-78155c505cadacdcb587fa27a39ae9b2_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"692\" data-rawheight=\"291\" data-watermark=\"original\" data-original-src=\"v2-78155c505cadacdcb587fa27a39ae9b2\" data-watermark-src=\"v2-beadb7faf269c525bdc088f76c0a0c8e\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"tiPZbhZm\">绝区零开场还是个铁道（Railway）站……</p>\n<p data-pid=\"B2sXP1QQ\">列车上写着跟星穹铁道的称呼一样的“开拓者”……</p>\n<p data-pid=\"91Sd8jg5\">而且我还梦到一个执政跑到绝区零去了，真是太可怕了。</p>\n<p><img src=\"https://pica.zhimg.com/v2-7e9a7b996a0dd2f4de5b1ad71de6e032_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"691\" data-rawheight=\"319\" data-watermark=\"original\" data-original-src=\"v2-7e9a7b996a0dd2f4de5b1ad71de6e032\" data-watermark-src=\"v2-eaa85182b4721b1474ca148ea3b97d23\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"4_TCHoAa\">什么？不，不是七神，是原初法涅斯四个影子之一的伊斯塔露（Istaroth）。</p>\n<p data-pid=\"ZiiRvqR1\">这位时间执政的早期神话原型伊南娜（Inanna）是乌鲁克（Uruk）的守护神，</p>\n<p data-pid=\"fnxW78ox\">曾经前往苏美尔神话里水神、智慧神恩基（Enki）的城市艾利都（Eridu）夺取了文明智识（me，或许可以翻译成道、密，参考伊南娜的一个称号“万道之女王”the Queen of All Given Mes）。</p>\n<p data-pid=\"DOuz5kns\">艾利都，这词是不是也很熟悉？</p>\n<p><img src=\"https://pic3.zhimg.com/v2-0ca0ebd25056a8b7bd950ffeb0ba1d4a_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"692\" data-rawheight=\"321\" data-watermark=\"original\" data-original-src=\"v2-0ca0ebd25056a8b7bd950ffeb0ba1d4a\" data-watermark-src=\"v2-28339d4785a8d9c04fc4b0a811f1c2b7\" data-private-watermark-src=\"\" data-tags=\"porn\"></p>\n<p data-pid=\"Wm_McKKG\">对，绝区零里人类仅存的城市，就叫新艾利都（New Eridu）。</p>\n<p data-pid=\"H1ENAbA2\">这可不是什么好地方。</p>\n<p data-pid=\"SFffTDuF\">恩基在艾利都的神庙叫阿普苏（E-abzu），意思是原始的海洋，或者说深渊。</p>\n<p data-pid=\"JmJzdizK\">……嗯，伊斯塔露从深渊夺取了某种力量让她守护的文明兴盛……？</p>\n<p data-pid=\"27v-D_BN\">嘶，细思恐极啊xdm。</p>\n<p data-pid=\"Dcmi3sI0\">话又说回来，这玩意在苏美尔（Sumerian）和阿卡德（Akkadian）神话中实际上指冥界（Underworld）。</p>\n<p data-pid=\"sjzp4gyl\">有趣的是，冥界也是雅利洛和他妻子轮回的去处，</p>\n<p data-pid=\"QuabBVWa\">而Underworld这词在星穹铁道是贝洛伯格城地底“下层区”的翻译……</p>\n<p data-pid=\"deUe8cwI\">啊，真是可怕呢。</p>\n<p data-pid=\"3yyEQw-8\">恩基本来是苏美尔神话版诺亚方舟建立的引导者，希望保护人类免受洪水灾难，</p>\n<p data-pid=\"6ZxCs3hu\">他在艾利都的权柄却被伊南娜去骗去偷袭，最后还认了这个大亏，实惨。</p>\n<p data-pid=\"ZCDgx8f5\">想想绝区零预告中对新艾利都念叨的“欺骗”、“真相”……</p>\n<p data-pid=\"Hy_xmT_h\">他们该不会把自己的守护神和提瓦特（Teyvat，希伯来语“方舟”的拉丁转系拼写）背刺了吧？</p>\n<hr>\n<h2>结语：树海宇宙</h2>\n<p data-pid=\"LfKKVvdx\">好吧，虽说进行了一波狂想，</p>\n<p data-pid=\"fgBxBmd_\">但绝区零和星穹铁道的贝洛伯格到底有没有关系，</p>\n<p data-pid=\"zw9o5iiC\">崩三、星穹、原神和绝区零的亚空究竟有什么关系，</p>\n<p data-pid=\"jhylCCzY\">绝区零的新艾利都跟原神的伊斯塔露又有没有关系，</p>\n<p data-pid=\"aiEhMjXN\">还都不好说。</p>\n<p data-pid=\"oaq6BcHH\">崩坏宇宙的以太锚点、绝区零的以太资源和原神的地脉，看起来可以跟虚数之树扯上关系，</p>\n<p data-pid=\"OOtHzeJQ\">但米哈游会不会、啥时候会把这些统合到树海宇宙（指源自崩坏三世界观的“虚数之树”+“量子之海”多平行世界时空结构）的体系中，实在是个未知数。</p>\n<p data-pid=\"NIjxmKbu\">本文也仅仅是开一个脑洞，大家切莫当真。</p>\n<p data-pid=\"ieTfFWjE\">你们要是对此有什么想法呢也都可以在评论区讨论，反正我概不负责。</p>\n<p data-pid=\"2casyYmd\">这里是银发，泛二次元考据爱好者，关注我收听更多胡扯~</p>\n<hr>\n<h2>致谢</h2>\n<ol>\n<li data-pid=\"vC_LKetM\"><a href=\"http://link.zhihu.com/?target=https%3A//space.bilibili.com/7146841\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">低配芙兰达</a></li>\n<li data-pid=\"rKfsS9DW\"><a href=\"http://link.zhihu.com/?target=https%3A//space.bilibili.com/372784089\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Kiraboshi绮罗星</a></li>\n<li data-pid=\"bGwczZ8P\"><a href=\"http://link.zhihu.com/?target=https%3A//space.bilibili.com/404929361\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">AKL联合特勤局</a></li>\n<li data-pid=\"7ucxBboG\"><a href=\"http://link.zhihu.com/?target=https%3A//bbs.nga.cn/nuke.php%3Ffunc%3Ducp%26uid%3D61404353\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Agilulfo1900</a></li>\n<li data-pid=\"6fWrMRDL\"><a href=\"http://link.zhihu.com/?target=https%3A//space.bilibili.com/536795\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">今天枯萎卡手了没</a></li>\n</ol>\n<hr>\n<h2>参考</h2>\n<p data-pid=\"tpZ3VEg7\">[1] Н. И. Толстой // Славянские древности: Этнолингвистический словарь : в 5 т. / под общ. ред. Н. И. Толстого; Институт славяноведения РАН. — М. : Межд. отношения, 1995. — Т. 1: А (Август) — Г (Гусь). — С. 151. — ISBN 5-7133-0704-2.</p>\n<p data-pid=\"q5SRINxs\">[2] Johnson, Kenneth (1998). Slavic Sorcery : shamanic journey of initiation. St. Paul, MN: Llewellyn Publications. p. 89. ISBN 1-56718-374-3. OCLC 37725456.</p>\n<p data-pid=\"F4sVefb0\">[3] Leeming, David.From Olympus to Camelot: The World of European Mythology. New York, NY: Oxford University Press. 2003. p. 129.</p>\n<p data-pid=\"lLO5S4lS\">[4] Kulišić, Špiro; Petrović, Petar Ž.; Pantelić, Nikola (1970). Serbian mythological dictionary. Belgrade: Nolit. pp. 28–29.</p>\n<p data-pid=\"JJFVr3Ic\">[5] 贾利尔・杜斯特哈赫选. 阿维斯塔:琐罗亚斯德教圣书[M]. 商务印书馆, 2010.</p>\n<p data-pid=\"fEf6N-rx\">[6] Symbolikon. Koliada[EB/OL]. (2020.04.18). [2022.05.14]. <u><a href=\"http://link.zhihu.com/?target=https%3A//symbolikon.com/downloads/koliada-slavic/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">symbolikon.com/download</span><span class=\"invisible\">s/koliada-slavic/</span><span class=\"ellipsis\"></span></a></u>.</p>\n<p data-pid=\"IYAGnbYG\">[7] Löffler, Klemens. \"St. Otto.\" The Catholic Encyclopedia. Vol. 11. New York: Robert Appleton Company, 1911. 28 Mar. 2013.</p>\n<p data-pid=\"iQIa-yHF\">[8] Cross, F. L., ed. The Oxford Dictionary of the Christian Church. New York: Oxford University Press. 2005, article plenary indulgence.</p>\n<p data-pid=\"hTsptkWu\">[9] 詹姆斯・R.路易斯, 伊芙琳・奥利弗. 天使大全[M]. 重庆出版社, 2010.</p>\n<p data-pid=\"FHg3c7E8\">[10] 张新樟. 《古代诺斯替主义经典文集》[J]. 世界宗教研究, 2018, No.170(02):47.</p>\n<p data-pid=\"cGcqMfqZ\">[11] 约纳斯, 张新樟. 诺斯替宗教:异乡神的信息与基督教的开端[M]. 上海三联书店, 2006.</p>\n<p data-pid=\"IZ9IvyK3\">[12] 约安·P.库里亚诺. 西方二元灵知论:历史与神话[M]. 上海人民出版社, 2009.</p>\n<p data-pid=\"dqHMw6nj\">[13] 荣格. 红书[M]. 中央编译出版社, 2013.</p>\n<p data-pid=\"9DOVPKGW\">[14] Inanna: Lady of Love and War, Queen of Heaven and Earth, Morning and Evening Star\", consulted 25 August 2007.</p>\n<p data-pid=\"fTaPEUNZ\">[15] Wolkstein, Diane; Kramer, Samuel Noah (1983). Inanna: Queen of Heaven and Earth: Her Stories and Hymns from Sumer. Harper &amp; Row. ISBN 978-0-06-090854-6.</p>\n<p data-pid=\"2w-haQTC\">[16] Echlin, Kim (2015). Inanna: A New English Version. Penguin. p. 55. ISBN 978-0-14-319458-3.</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/yin-fa-san-qian-xue-man-tou?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">银发三千雪满头</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/532616869/answer/2485448500?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">333 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/532613231?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价米哈游新作《绝区零》首曝 PV ？</a><br><a href=\"http://www.zhihu.com/question/532621263?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">米哈游动作新游《绝区零》PV 首曝，你对该游戏有哪些期待？</a><br>\n","link":"http://www.zhihu.com/question/532616869/answer/2485448500?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"双向链接的前世今生 | 上都计划与 Roam Research 思维工具","date":"2022-05-15 06:59:56","description":"如果现阶段有浏览器能够实现任意网页和任意笔记之间的双向链接，我愿称之为「Dream Browser」！目前来看，Microsoft Edge 的集锦功能最有希望，毕竟已经有了一定的基础。\n\n如果能够实现「个人」的笔记跟「互联网」的网页之间的互相链接，那么也就回到了我最初所讲的「上都计划」，Ted Nelson 的最终愿景可能算是在一定程度上得以实现。<a href=\"https://sspai.com/post/72995\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/72995"},{"title":"麻雀虽小，五脏俱全：「小配列键盘」为什么越来越受用户喜爱？","date":"2022-05-15 03:00:00","description":"如果你的桌面空间有些狭小，或是你希望有一把能随时带出门的蓝牙键盘，或许可以尝试购入一把小配列的键盘。键盘不止是工具，它可以好用也好玩。<a href=\"https://sspai.com/post/73206\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/73206"},{"title":"Terra 的 Luna 彻底崩盘了吗，接下来将如何发展？","date":"2022-05-14 15:30:49","description":"\n<h2>\n<b>目录</b><br><b>一、UST稳定币的机制</b><br><b>二、虚市值</b><br><b>三、如何利用虚市值赚钱</b><br><b>四、Luna中的虚市值</b><br><b>五、Luna创始人Do Kwon的巨额套现</b><br><b>六、Do Kwon买入的8万个BTC</b><br><b>七、Do Kwon用8万个BTC救市了吗？</b><br><b>八、Luna&amp;UST归零中，损失的资金都到哪去了？</b><br><b>九、如何在UST脱锚中赚钱？</b>\n</h2>\n<p data-pid=\"p1NgLsoV\"><br>这两天币圈发生了有史以来数得着的天量财富转移，你在这次转移中，是赚了还是亏了？<b>如果你不懂数学，那肯定是会亏的</b>，因为这次Luna归零的例子非常极端，400亿美元在2天内彻底归零。<br>截止目前，我还没看到有哪篇文章，从资金易手（也就是真金白银去哪了）的角度谈这次Luna归零事件的，那我就来谈一谈吧。这将是我写的最深的一篇文章之一，请各位跟上。<br>不要问我为什么鸽了11号的文章，<b>凡是市场情绪极端时（恐慌或狂热），就是到处都能轻松捡钱的时候</b>，相信很多人和我一样，这两天都只睡了几个小时。能在昨天晚上挤出时间，写了一篇《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fweibo.com%252F5750748245%252FLsGkgc2C4\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">USDT在近期没有脱锚的风险</a>》来避免市场过度恐慌，就已经不错了。<br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-4f67ac61f65c8f7c43b6fb9faec6f14e_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"404\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"naaehJB_\"><b>一、UST稳定币的机制</b><br>要说明这次Luna归零事件，得先讲一下UST稳定币的稳定机制。<b>UST是一个目标锚定1美元的算法稳定币。锚定机制是：双币销毁铸造。</b><br>① Luna是项目的股权币，自由涨跌。<br>② UST通过和Luna的 “双向销毁铸造” 来锚定1美元：<br>a、当UST价格大于1时（例如1.01美元），可以通过销毁价值1美元Luna，来得到1个UST，然后卖出1UST得到1.01美元，获利0.01美元。<br>b、反过来，当UST价格小于1时（例如0.99美元），可以<b>用0.99美元买入1UST，销毁1个UST，来得到价值1美元的Luna，然后卖出Luna得到1美元</b>，获利0.01美元。<br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-d673357b0253308c721342c42dc88ccf_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"450\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"6fs77UYH\">套利机制如上图所示，当然其中有一些摩擦费用（例如系统铸造费用，交易费等），1.01是不够套利成本的，要再高一些才够。<br>因此，通过套利者的不断套利，<b>只要Luna的总市值正常，UST就能稳定在1美元</b>。而UST生态的发展，又会将交易费手续费等利润，反哺给Luna（Luna本质上是这套系统的股权），提高Luna的总市值。<br>那Luna这次为什么归零了？<b>要深刻理解其本质，得先了解 “虚市值” 这个基础概念</b>。虚市值 的概念我在之前2019年10月29日的文章（BTC那时候价格9204美元）《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fweibo.com%252Fttarticle%252Fp%252Fshow%253Fid%253D2309404768073403203895\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">比特币涨到十万美元需要多少资金？</a>》中讲过一次，如果没看过的话，我简单讲一下。<br><b>二、虚市值</b><br>简单一句话：<br><b>“总市值” 只是个统计值，不是真金白银。</b><br>举一个最简单的例子：张三发行了一个有1亿发行量的币，然后以10元卖了1个给李四，那么这个币的总市值就是1亿个*10元=10亿元，但如果张三这时候说，<b>我这个币总市值10亿元，我打一折，1亿卖给你</b>，你会买吗？<br>你肯定不会买对吧？因为<b>这个币的交易量远低于总市值，根本不值钱</b>。<br>这是第一步，基本没人会上当，但稍微换了下花样，就会有很多人掉坑里了。我在《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fweibo.com%252Fttarticle%252Fp%252Fshow%253Fid%253D2309404768073403203895\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">比特币涨到十万美元需要多少资金？</a>》里举了一个例子：<br>一家股票型基金，基金历史成长性很好，每年都赚10%~30%，到现在基金持有的几只股票，净值100亿。请问，<b>基金打个5折，50亿整个（包括股票一起）卖给你</b>，你愿意买吗？<br>给你1分钟时间思考<br>……<br>……<br>……<br>……<br>……<br>……<br>……<br>……<br>……<br>……<br>……<br>……<br>……<br>……<br>……<br>……<br>……<br>……<br>……<br>……<br>这个坑和前一个问题是一样的：<b>你手上有1亿股票，每股价格10元，那就值10亿元真金白银</b>（红色面积）吗？<br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-6580ac64676ecb79510a2f9a41bc6f3e_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"415\" data-rawheight=\"332\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"Hi98M_xn\">当然不值10亿元，你要把这10亿市值股票在市场上卖出，换回的真金白银（红色部分），可能远远不到10亿。​<br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-0eb7e06e2a9d4ecc11af28b87c7a74f8_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"415\" data-rawheight=\"334\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"jTMKSmrK\">​你要卖出1亿股，愿意10元买的可能只有300万股，9元500万股，价格越往下，买单越多，<b>可能要卖到2元，才能把这1亿股卖完。卖完加一起，你总共只拿到了3亿的真金白银</b>。<br><br>那剩下7亿元的 “财富” 哪去了？不不不，这7亿元只是个虚值，从来都不是真金白银。<b>把一股的最后成交价10元乘以数量1亿股，得到的总市值10亿元，和真正的10亿真金白银，中间的差距从1%到100%都有可能</b>。1亿股占总股本的比例越大，差距百分比也越大，总共就1.1亿股的话，卖掉1亿股足以砸掉90%以上的价格。<br><b>三、如何利用虚市值赚钱</b><br>其实很简单，<b>只要用 “总市值” 这个统计值，去换低认知的人的真金白银就行了</b>。比如一开始举的例子，基金这100亿股票怎么来的？可能<b>只是基金只花30亿元，购买控盘几只股票，逐渐做出来的</b>。<br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-5720f2efffeccbe435d8e3b3172e49b0_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"471\" data-rawheight=\"381\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"X1njVx35\">​再复习一下这个图，既然市值10亿的股票砸下来，最后只能卖出3亿真金白银，也就意味着如果花3亿真金白银逐步吸筹，<b>在控盘度越来越高的情况下，只要花少量的钱，就能推高很大的总市值</b>。<br>不过到最后，这10亿市值做出来了，但只是虚的，<b>要是再卖出去，又只能卖出3亿真金白银，白忙乎一场</b>，那怎么办呢？<br>简单，这股票是用基金逐渐买入的，把基金卖给低认知的散户好了：看看，我这基金（山寨币）很优质的，每年都盈利20%哦，<b>现在基金持有市值100亿元的股票，卖你100亿真金白银</b>，你不亏的哦。<br></p>\n<p><img src=\"https://pica.zhimg.com/v2-8260b5dc3d7b831f0585d8df604626b2_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"221\" data-rawheight=\"253\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"BXt_XSPR\">看到了吧？不好好学习，提高认知能力，就是这个后果，被卖了还不知道是怎么卖的。<br><b>四、Luna中的虚市值</b><br>Luna在脱锚前，最高到过400亿美元的总市值<br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-c9f224e8b156889f20f9aca70daee2a2_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"948\" data-rawheight=\"461\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"D4YyybFV\">但根据虚市值，<b>假设有人用无限多的Luna砸盘，那能卖出来的美元，是远低于400亿美元的</b>，具体能卖出多少，这次就发生了一次极其罕见的社会实验，后面给出数据。<br>UST在Luna生态发展的过程中，逐渐通过Luna销毁生成，在5月9日脱锚前，<b>总市值为187亿美元，此时Luna总市值为204亿美元</b>。<br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-5ae23f9ab7768b9f0518055b975caef8_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"956\" data-rawheight=\"461\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"jspwYnvk\">有人这时候就说，<b>Luna总市值快小于UST了，UST快锚定不住了，这说法对吗？</b><br>给你1分钟时间思考，看你是否真正理解了 “虚市值” 这个概念（而不是仅仅 “知道”）。<br>……<br>……<br>……<br>……<br>……<br>……<br>……<br>……<br>……<br>……<br>……（强迫症不用数了，省略号共20个）<br>……<br>……<br>……<br>……<br>……<br>……<br>……<br>……<br>……<br>这说法当然不对，因为Luna在1:1之前，早就锚定不住UST了，<b>Luna能卖出的真金白银远小于总市值</b>。从这次社会实验的结果来看，<b>Luna总市值要至少10~20倍于UST才可能锚定住</b>。<br>Luna协议要能长时间运行，必须<b>设置UST总市值小于Luna总市值10%的硬顶（最好是5%），并在Luna总市值下跌时，对应销毁UST</b>，当然这也无法防止Luna在总市值下跌时，发生死亡螺旋并最终归零，但至少不会那么惨烈，<b>近400亿美元市值在2天内归零</b>（204亿美元的Luna和186亿美元的UST）。<br><b>五、Luna创始人Do Kwon的巨额套现</b><br>那么，就有了一个很有趣的问题，Luna什么时候跨过了 “UST总市值占比过大” 这个鬼门关的？<br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-85ca5fb4c5fe1c8680f581ec6d1eac68_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"1540\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"JL-X6Gez\">下图这段UST发行量直线飙升，就是Do Kwon将大量Luna销毁铸造成UST。<br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-19258b6cc16f9ec74831f33cd13c82e8_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"947\" data-rawheight=\"462\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"nZrIlx_A\">增发前2021年11月9日，Luna总市值201亿美元，UST总市值28.8亿美元，<b>占比14%</b>。<br><b>11月20日UST增发完成后，Luna总市值180亿美元，UST发行量71.7亿美元（增发了42.9亿美元），占比40%，Luna进入 “一碰就倒” 的归零倒计时</b>。<br>这些Luna名义上是社区池的，但实际上是Do Kwon自己控制的，<b>本质上就是Do Kwon自己的</b>。<br><b>这是一个非常高明的套现行为</b>，如果Do Kwon在Luna总市值201亿美元（总币量4亿个）时，卖掉8867万Luna（占总量22%）的话，最多只能卖20亿美元。<b>因为按5月11日的实际砸盘结果，8120万Luna币就能把Luna总市值从196亿美元，砸到25亿美元（砸掉了87%），同时只销毁了19.4亿UST</b>。<br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-6a0a2ab68b5d92835f8288e9f695577b_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"796\" data-rawheight=\"220\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"ROBNBDFw\">而Do Kwon通过将Luna的虚市值，铸造为UST的方法，<b>在市场毫无波动的情况下，获得了40亿UST</b>。这时候，最迷惑人的一个障眼法就来了：<br><b>UST是Luna虚市值的一部分，有很大折扣，</b><br><b>​UST不是真金白银，</b><br><b>​但UST看起来又很像美元，</b><br><b>​在少量兑换时也可以按1:1兑换为美元。</b><br>这时候，就看哪些数学不好的人，愿意接受 “假币” UST了。<br><b>六、Do Kwon买入的8万个BTC</b><br>那么<b>Do Kwon销毁Luna产生的40亿UST “假币” 都花到哪了呢？</b><br><b>手上有假币，当然要去买保值的硬通货，所以Do Kwon都去买了BTC</b>。<br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-1a17f1f1666a53607ba5630c69a6bc95_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"635\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"Q9GIxdvq\">从Luna基金会（LFG）公布的一个存币地址查看<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fbitinfocharts.com%252Fbitcoin%252Faddress%252Fbc1q9d4ywgfnd8h43da5tpcxcn6ajv590cg6d3tg6axemvljvt2k76zs50tv4q\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">bc1q9d4ywgfnd8h43da5tpcxcn6ajv590cg6d3tg6axemvljvt2k76zs50tv4q</a><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-374e608276be688904b1508f77adfe4b_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"336\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"gjyL5U67\">42530个BTC的买入均价是42152美元（假设转入时间等于买入时间），<b>乘以8.04万BTC就是33.89亿美元，接近铸造的UST金额，剩下的USDT估计是Do Kwon留着备用的</b>（Do Kwon还用UST换了12亿美元的USDT）。<br>更讽刺的是，<b>Do Kwon还卖了10亿美元的Luna给机构</b>。<br></p>\n<p><img src=\"https://pica.zhimg.com/v2-d405c66ef4703fdc2d493bef1781754d_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"1280\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"kZ_gu9DV\">Jump Crypto、三箭资本、Republic Capital、GSR这些机构将被永远地钉在耻辱柱上，这么简单一个数学障眼法，内部流程没有一个人审出问题。为什么这些机构看不懂这么简单的一个数学障眼法呢？不要迷信机构，圈外再牛逼的机构，在币圈都是大号韭菜，<b>这些机构里的分析管理人员，也只是普通人而已，很多也是不懂数学的傻B</b><br>那么，下一个万众瞩目的问题就是：<br><b>七、Do Kwon用8万个BTC救市了吗？</b><br>要是传统资金市场，这就是个谁也不知道的黑箱，<b>可惜Do Kwon操纵的是一切透明的区块链，那就一目了然了</b>。<br>Do Kwon于5月10日2~4点（UTC+8 北京时间，下同）移动了<br>bc1q9d4ywgfnd8h43da5tpcxcn6ajv590cg6d3tg6axemvljvt2k76zs50tv4q 里的42530 BTC和<br>bc1qkhl4pt957urd8sleys3p00ua2h23nl3hghhtkyaatgzapj9kflhqar0jdv 里的12581 BTC<br>以上的5.5万BTC是从Luna基金会地址打出去的，另外还有2.5万BTC只是Do Kwon声称有，不能确认是否真实存在。<br>这些币充入了各大交易所，例如<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fbitinfocharts.com%252Fbitcoin%252Fblock%252F735653%252Fbc1qlyfrxkwp2xg39cd6usx6aw45u5rlcgl3sygu2w\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">根据 bitinfocharts.com 的标记</a>，其中的3万BTC最终进入了OKEX的地址 1NYAd6fA2dc5xowuweFUSDRqRTEzDwk28<br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-9a77463f5011ad6d52ab766e992b2a38_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"985\" data-rawheight=\"146\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"XLM8zcB5\">但<b>10日2点后的BTC价格却没有明明显下跌，一直在横盘，完全不是8万个BTC砸盘的表现</b>。一直到11日晚上8:30（美国公布4月CPI通胀数据）后，BTC价格才出现剧烈波动。<br></p>\n<p><img src=\"https://pica.zhimg.com/v2-65b7315d6e7bc0e1ef74b3b19632ef80_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"970\" data-rawheight=\"403\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"I-z-nBeU\">另一个更坚固的数学证据是：<b>假设Do Kwon真的用了这20~30亿美元资金，在脱锚点（5月10日0点）后的2~4小时内救市，那在各种数据统计曲线上将能看到明显的痕迹，尤其是在脱锚刚开始的数据段</b>，毕竟UST到现在总共也就逃了（销毁了）74亿美元出来，20~30亿美元的救市资金，足以造成明显的曲线变形。<br>但是，以下从脱锚点（5月10日0点）开始的<b>数据统计曲线都非常顺滑，符合自由落体脱锚的表现</b>。<br>例如 “UST累计币数销毁量” <b>开始慢（因为市场还没恐慌），中间快，最后慢（因为Luna都被换完了）</b>，基本对称。<br></p>\n<p><img src=\"https://pica.zhimg.com/v2-4654996530a18f4577ffffd3d3eb7949_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"734\" data-rawheight=\"417\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"UU4DWLIM\">这是什么？这就是个标准的 <b>皮尔曲线。</b><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-483c066b3dde03075b2f06162b37d113_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"448\" data-rawheight=\"354\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"78dWKQlL\">解释一下皮尔曲线：<br>当经济变量的发展变化表现为<b>初期增长速度缓慢，随后增长速度逐渐加快，达到一定程度后又逐渐减慢，最后达到饱和状态的趋势</b>，即原时间序列倒数的一阶差分的环比为一个常数，可以用皮尔曲线来描述。<br>这次脱锚后UST的销毁，完美适合这种数学模型，并且画出了一个标准的皮尔曲线。<b>这哪里有20~30亿美元人为救市干预的痕迹？我估计Do Kwon就用小指头象征性地救了一下市，把8万个BTC全部装进了自己的腰包</b>。<br>“UST累计币数销毁量 占 Luna总市值减少 百分比” 这个指标也基本平滑，说明<b>销毁的UST均匀地由Luna总市值减少来吸收</b>。<br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-604b7105ef713a1f5a96e4557d7e364d_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"725\" data-rawheight=\"412\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"Oj48SWAM\">据说现在韩国有人线下去堵Do Kwon肉身，Do Kwon已经向警方求助了，我只能说，这条路对了。<b>Do Kwon手上肯定还有很多BTC，甚至没有将任何BTC用于救市，自己搞出来的局，自己还不清楚结果吗？</b>各大交易所有义务调查Do Kwon充入BTC后的交易行为。<br>Do Kwon如果要自证清白也很简单，<b>公布由交易所联合作证的UST买入记录，并把救市买入的至少40~50亿UST提现到链上地址，向全网证明即可</b>。<br><b>八、Luna&amp;UST归零中，损失的资金都到哪去了？</b><br>损失中的一半是持有Luna的人，不过这些人本来就是Luna投资者，盈亏同源。<br>比较惨的是在Luna下跌过程中接死亡螺旋的人。<b>他们以为Luna这样一个市值前十，数百亿美元的项目，在跌掉90%，99%，99.9%后会止跌。</b><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-f5f35e26d187635db8791563ebc05807_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"719\" data-rawheight=\"527\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"HXVrT7Ci\">还有满仓进去赌一把的<br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-23e3d5dcca7fce2746d0cf27f5c0232f_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"2067\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"5LpF7PdK\">但经过上面的分析，大家应该知道，<b>在187亿美元的UST全部逃出之前，Luna将有无限增发的抛压</b>，<b>所有在中途接盘Luna的人，他们买入Luna的真金白银，实际上是在解救持有UST的人</b>，除非接盘资金大于187亿美元，否则Luna只有归零的一个结局。<br>而204亿美元市值的Luna，有可能有187亿美元真金白银的接盘资金吗？当然不可能，<b>Luna在从57美元跌到4.1美元，总市值缩水90%后，仅仅逃出了23.8亿美元的UST</b>。<br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-0cb29ec344cf28d61d205394adfb8f55_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"807\" data-rawheight=\"180\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"LA2YkM8P\">从23.8亿到74亿之间逃出来的UST，就要感谢各路看Luna便宜，又不懂数学的抄底资金了：<br>57美元到4.1美元之间的买入资金，解救了23.8亿美元的UST。<br>4.12美元到1美元之间的抄底资金，解救了29.2亿美元的UST。<br>1美元到0.1美元之间的抄底资金，解救了16.8亿美元的UST。<br>0.1美元以下的抄底资金，解救了4.2亿美元的UST。<br>以上慈善资金共解救了74亿美元的UST，最终剩下了113亿美元的UST归零。<br>所以，我<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fweibo.com%252F5750748245%252FLssljhsso\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">5月11日课后作业</a>第2问考察的是：<br><b>你是否理解，抄底资金本质上是去解救UST的，而币价越低，能吸引的抄底资金越多</b>。<br>Luna币价 0~1美元（对应市值变化11.3亿美元）的抄底资金，解救了21亿美元的UST。<br>这几乎和 Luna币价 57~4.1美元（对应市值变化176.7亿美元）解救的23.8亿美元一样多，<br>所以答案是小于。<br><b>九、如何在UST脱锚中赚钱？</b><br>这是我<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fweibo.com%252F5750748245%252FLssljhsso\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">5月11日课后作业</a>第1问。赚钱的方法，可以大体分为四层：道体用术。<br>​<b>道：</b><br>① 能量守恒。<br>② 熵增不可逆，减熵（秩序）无法凭空产生。<br>所有的系统都会往混乱发展，除非有外部能量的注入。例如你的房间永远会变得更乱，除非你消耗能量整理房间。这里我要再强调一次，<b>知道某些规则（例如能量守恒）和理解这些规则，中间差距的鸿沟大于十万八千里</b>。<br>为什么理科生收入比文科生更高，并且更多地主导了社会？虽然理科生和文科生都知道能量守恒，但<b>理科生通过数以万计的题目练习，将 “能量守恒” 这样世界运行的基本规律，深刻写入本能</b>。<br><b>在面对同一个坑时，理科生更容易看出：这里不守恒</b>。<br><b>体</b><br>① 因为熵增不可逆，所以将 “算法稳定币” 作为一个独立系统，除非有源源不断的外部能量注入（例如外部持续输入的增长、救市等资金），否则<b>算法稳定币必将归于混乱（脱锚）</b>。<br>② 虚市值 导致死亡螺旋发生时，10倍的Luna也托不住1倍的UST市值，更不用说UST市值甚至接近Luna市值。<br><b>用</b>：<br><b>① 获利方法</b>：在课后作业中，很多人都说应该做空Luna，这个回答对吗？<br>给你1分钟时间思考。<br>……<br>……<br>……<br>……<br>……<br>……<br>……<br>……（省略号其实是21个，你被骗了吗？）<br>……（Don't trust, verify it 不要信任，验证它）<br>……（这才是区块链世界应该奉行的原则）<br>……（不按原则行事，你在区块链世界会死得很惨）<br>……<br>……<br>……<br>……<br>……<br>……<br>……<br>……<br>……<br>……<br>错误，因为<b>在任何时间点，都不能预测Luna的涨跌</b>，除了在刚脱锚时，Luna下跌的概率比较大以外，其余时间点Luna做空的赢面都不稳，举一个做空Luna反被爆仓的例子：<br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-568fc9ad02bcec0154c37913fb3ef972_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"2261\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"pjq4rzEA\">Luna在这次归零前的死猫反弹中，反弹了11倍，爆了无数的空军。<br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-96382786add6b21a1062936936487656_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"958\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"UZLezhWi\">在这次大反弹中，<br>第一个做多亏光A8的兄弟，逃出了一个A7，<br>而第二个做空爆光A8的兄弟，靠套利赚回了一个A7。<br><b>不同的选择，同样的命运，生活真是戏剧性</b>。<br><br>当然，太阳底下没有新鲜事，我在2016年的《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fwww.zhiguf.com%252Ffocusnews_detail%252F30853\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">给Zcash泼泼冷水——有了深黑，市场真的需要纯黑吗？</a>》中，写了一段自己亲身经历：在Zcash刚开始挖矿，从零点几BTC涨到3200BTC的时候，先被爆了一个小仓位，然后<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fwww.zhihu.com%252Fquestion%252F52365546%252Fanswer%252F130908538\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">靠着Bitmex期货的10BTC限价，赚了100BTC回来</a>。<br></p>\n<p><img src=\"https://pica.zhimg.com/v2-5d0fa284b4c33ccb899f216b21da8d93_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"838\" data-rawheight=\"529\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"AV-7AYC7\">虽然一开始被爆的仓位很小，但<b>这是我错得最离谱的一次</b>，Zcash按理性预测，参考门罗币、达世币这两个已有的匿名币，<b>合理估值应该在0.01~0.03BTC之间。我在1.7 BTC时做空，已经是超过合理价格100倍的泡沫，但万万没想到，市场还能在100倍泡沫之上，再涨2000倍</b>。<br>虽然我最后赚了，但那是靠Bitmex期货限价规则赚的，<b>从此以后，我再也不做空任何加密货币</b>。所以建议大家：<br><b>不要做空任何加密货币，</b><br><b>做多最多跌100%，做空可能涨10万倍，</b><br><b>觉得会跌回来吗？</b><br><b>市场不理性的时间，</b><br><b>总是会超过你撑着不破产的时间。</b><br>所以，正确的获利方法是：加杠杆做空UST。UST锚定1美元，几乎不可能 长时间&amp;大幅 高于1美元，因此杠杆倍数越高越好，可以高至10~20倍。<br><b>② 预测UST脱锚时间</b>：<br>《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fwww.theblockbeats.info%252Fnews%252F29974\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">稳定币利率长期高达20%，Anchor也是庞氏吗？</a>》这篇文章提出了一个观点，认为UST提供了一个年利息20%的理财协议Anchor，而<b>Anchor本身的经营收入达不到20%，每日将亏损418万美元</b>。亏损要消耗Luna基金会提供的补贴，现在还剩3.6亿美元，<b>按照目前的烧钱速度，大概只能再支撑 3 个月</b>。<br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-a6eeffb667ac483e643b07b6731825d1_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"434\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"pNQzqkrk\">因此这篇文章认为：<br>按照目前 Anchor 储备金的消耗速度，我们大概率会在<b>今年等来这个金融游戏的破局时刻</b><br>这个观点对吗？给你1分钟时间思考……<br>……<br>……<br>……<br>……<br>……<br>……<br>……<br>……<br>……<br>……（Don't trust, verify it 不要信任，验证它）<br>……（你验证了吗？省略号到底有几个？）<br>……<br>……<br>……<br>……<br>……<br>……<br>……<br>……<br>……<br>虽然结果对了，但是逻辑是错的。Anchor高达20%的高息存款，确实加速了UST的死亡，<b>但死亡的逻辑传导并不是利息不够</b>。Do Kwon能轻易地从系统中抽出40亿美元，买入8万个BTC，在系统规模继续扩大的情况下，<b>抽几亿美元出来付利息，在3年内毫无问题</b>。<br>并且还有一点关键，Anchor付的利息还是UST，<b>只要UST的信用不破，实际上甚至不需要用多少真美元付利息</b>。这是<b>央行套利学</b>的一个常识：<b>本国货币国债永远不会违约</b>，如果还不上，直接印更多本国货币就行了。<br>所以，关键还是UST的信用什么时候破？或者说，<b>市场什么时候开始普遍怀疑UST的兑付能力？</b><br>虽然如前所述，根据本次真实的砸盘数据，<b>无法兑付的时间点是：UST总市值超过10%的Luna后。但市场上绝大部分人数学不好，不懂虚市值</b>，并不知道2021年11月20日，Do Kwon增发40亿UST，UST市值占比达到Luna的40%后，UST就无法兑付了。<br><b>聪明人要跟着傻B走，</b><br><b>​​傻B的共识才是共识。</b><br><b>​（注意是 “才是”，不是 “也是”）</b><br>所以，<b>UST信用破产的时间点是：UST总市值接近、甚至超过Luna时</b>。<br>在最近一两周，我已经多次看到有人指出风险：UST总市值已经接近Luna了。<b>再迟钝、再傻B的人，也会意识到：这样Luna总市值好像不够UST兑付了？</b><br><b>死亡的逻辑传导并不是利息不够，</b><br><b>而是高利息快速吸引大量UST，</b><br><b>提高了UST总市值占比，</b><br><b>直到高到能警醒市场上绝大部分傻B为止。</b><br><b>所以，真正的聪明人，</b><br><b>是知道傻B在哪错了的人吗？</b><br><b>当然不是，真正的聪明人，</b><br><b>是知道傻B傻到什么程度，</b><br><b>​并能和傻B同步的人：）</b><br><b>术：</b><br>如何加杠杆做空UST，例如伞形资金，在交易所加杠杆借出UST卖出，如何在Luna归零过程中通过销毁UST套利 等等。<br>虽然昨晚我睡了13个小时，但现在已经很晚了，术都是一些琐碎的知识点，写起来没意思，套利也有很多人说了，并且本文已经写了8000字，加上图片上万字，再长阅读体验就不好了。<br>所以本文就到此为止吧。<br></p>\n<hr>\n<p data-pid=\"9ikniTls\">今天的课后作业是：<br><b>省略号到底有几个？</b><br>在微博评论中首个答对的，将收到信仰礼包，包括：<br>① “人在币在” 折扇一把，<br>② “Long ETH，Short the banks” 最便携的21700电池充电宝（5000毫安）一个（比以前礼品送的18650电池充电宝更小，容量更大，非常好用）。<br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-f9ccdf45aa69a7166ad5848fa9c88766_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"688\" data-rawheight=\"359\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<hr>\n<p data-pid=\"4HjI1uIK\"><b>2019~2021/22 年牛市系列文章</b><br></p>\n<hr>\n<p data-pid=\"_krZzSGx\"><b>2022年3月5日：《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fweibo.com%252F5750748245%252FLilPos3O0\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">BTC和ETH，哪个更容易被美国政府消灭？（上）</a>》</b><br><b>2022年3月6日：《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fweibo.com%252Fttarticle%252Fp%252Fshow%253Fid%253D2309404744104671314345\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">BTC和ETH，哪个更容易被美国政府消灭？（下）</a>》</b><br><b>2021年11月30日：《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fweibo.com%252F5750748245%252FL3TZ84VIa\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">年底是否还会按历史周期见顶？</a>》</b><br><b>以下历史文章，由于币乎关闭，还没空搬运，</b><br><b>很想看的可以在百度搜一下文章名，一般可以找到转载。</b><br>2021年9月21日：《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fbihu.info%252Farticle%252F1095300978\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">简单说一下 #债务上限# 是什么</a>》<br>2021年9月3日：《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fbihu.info%252Farticle%252F1664838400\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">头像类NFT将在20天内崩盘</a>》<br>2021年8月6日：《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fbihu.info%252Farticle%252F1064449687\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">以太坊：储值资产 + 通缩资产 + 生息资产 + 生产资料 四位一体的超级资产</a>》<br><b>2021年7月29日：《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fbihu.info%252Farticle%252F1079539902\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">超放水时代不支持深熊</a>》</b><br>2021年7月6日：《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fbihu.info%252Farticle%252F1354041214\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">最后一只未落地交易所靴子的猜想</a>》<br>2021年6月27日：《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fbihu.info%252Farticle%252F1480083298\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Bitfinex上面借2.3万币砸盘的空头，赚了多少钱？</a>》<br><br>2021年6月9日：《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fbihu.info%252Farticle%252F1853228061\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">比特币历史性的一天——成为国家法定货币</a>》<br><b>2021年5月30日：《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fbihu.info%252Farticle%252F1603308970\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">我们正处于一轮非典型性牛市中</a>》</b><br>2021年5月25日：《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fbihu.info%252Farticle%252F1318971192\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">稳定压倒一切</a>》<br>2021年4月13日：《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fbihu.info%252Farticle%252F1193186881\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">在区块链投资里，慢就是快</a>》<br>2021年3月25日：《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fbihu.com%252Farticle%252F1689633497\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">QKL123导航 推出了【江卓尔周期对比数据 】</a>》<br>2021年2月6日：难得的好文，推荐大家精读：《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fbihu.info%252Farticle%252F1948232788\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">美联储的大萧条PTSD</a>》<br><br>2021年1月1日：《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fbihu.info%252Farticle%252F1800521581\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">李晨背景调查 ＆ 9203比特币验证流程 ＆ 200比特币捐助希望工程</a>》<br>2020年12月3日：《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fwww.51bobi.com%252F39485.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">目前处于牛市周期什么位置 ＆ 即将出现的主流币暴涨</a>》.<br>2020年11月15日：《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fbihu.info%252Farticle%252F1763788105\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">谈谈BCH 本次分叉 ＆ 未来币价</a>》<br>2020年11月3日：《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fbihu.info%252Farticle%252F1609194977\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">谈谈最近中国加密货币交易所的风波</a>》<br><br>2020年10月8日：《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fbihu.info%252Farticle%252F1356308172\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">从来没有什么 新理论 vs 旧理论，只有 正确理论 vs 错误理论</a>》<br>2020年10月3日：《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fbihu.info%252Farticle%252F1029681837\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">能避免DeFi流动性挖矿的无常损失吗？</a>》<br><br>2020年7月28日：《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fbihu.info%252Farticle%252F1830808684\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">关于牛市，有以下几个常识</a>》<br>2020年5月11日：《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fbihu.info%252Farticle%252F1230128930\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">BTC减半之夜：矿业重启带来挖矿新机遇</a>》<br>2020年5月8日：《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fbihu.info%252Farticle%252F1277863549\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">OKEx情报局直播 文字整理版：全球经济大变局，比特币“减半牛市”能否如期而至？</a>》<br><br>2020年4月21日：《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fbihu.info%252Farticle%252F1700451725\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">没想到危机之下，首先归零的不是比特币，而是跌到负40美元的石油</a>》<br>2020年4月9日：《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fbihu.info%252Farticle%252F1671655863\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">BCH减半之夜直播：江卓尔谈行情机遇</a>》<br>2020年4月6日：《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fbihu.info%252Farticle%252F1037524118\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">《独立宣言》第一句话里的两对反义词</a>》<br><br>2020年3月15日：《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fbihu.info%252Farticle%252F1958808819\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">给大家充值信心——为什么信用货币不可持续</a>》<br>2020年3月4日：《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fbihu.info%252Farticle%252F1947284385\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">谈BTC、BCH、BSV的差别，和近期行情走势</a>》<br>2020年3月2日：《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fbihu.info%252Farticle%252F1636136404\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">为什么我不持有任何平台币？不仅是因为平台可能倒闭或修改规则</a>》<br><br>2020年2月25日：《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fbihu.info%252Farticle%252F1454069411\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">为什么Core锲而不舍地企图增发BTC？</a>》<br>2020年2月23日：《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fbihu.info%252Farticle%252F1822032135\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">据说北京市公安局就能合法回滚BTC？</a>》<br>2020年2月1日：《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fbihu.info%252Farticle%252F1544439334\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">BCH的矿工捐赠计划更新</a>》<br><br>2020年1月16日：《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fbihu.info%252Farticle%252F1667914153\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">从小侠被爆两次三百多万，谈做短线交易应该避开哪些雷区</a>》<br>2020年1月16日：《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fbihu.info%252Farticle%252F1305145066\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">场外杠杆+场内杠杆，是彻彻底底的找死行为</a>》<br>2020年1月15日：《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fbihu.info%252Farticle%252F1109761385\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">为什么我从不做空币——顺便谈今晚情况</a>》<br>2020年1月6日：《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fbihu.info%252Farticle%252F1103940025\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">近期市场资金情况分析</a>》<br><br>2019年11月27日：《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fbihu.info%252Farticle%252F1896707772\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">下跌趋势很可能已经结束</a>》<br>2019年11月27日：《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fweibo.com%252Fttarticle%252Fp%252Fshow%253Fid%253D2309404443190504587335\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">对话江卓尔：如何在比特币减半行情中赚到钱</a>》.<br>2019年11月19日：《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fbihu.info%252Farticle%252F1922746969\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">谈谈今天的焦点访谈</a>》<br>2019年11月17日：《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fbihu.info%252Farticle%252F1426888324\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">暴力是法律的基础，法律是规则的基础</a>》<br>2019年11月14日：《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fbihu.info%252Farticle%252F1000190778\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Core党都是伪君子——再谈谁是真正的比特币</a>》<br>2019年11月9日：《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fbihu.info%252Farticle%252F1598820987\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">又到了喜闻乐见的猜底时间——兼谈短线炒币秘诀</a>》<br><br>2019年10月26日：《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttp%253A%252F%252Fcache.baiducontent.com%252Fc%253Fm%253DS5LLAu7biiAd_LP0LfSNkP8AHeSbiB2PGfnvJfs2o7iMa_jOt2o2Bvxcp6pr3fP27BKxeL0RcBZickLzd8gNOu5O1SYAUS7UYuk1VuTqpeVsswtoWLIECZdAaywJ2x1Q6xnboi6PjgKfpxiWWgKtOuLq5ZBYDjWq-tTqSeSGzp_SGYNsPa5W9NQaDym1kT3TcZWhX0T_odOxrj8buIQ9bXU-5RuWRz8Vvn3UkHUdtZFjs1nkjFdTPV2vHrcrZ1GLfQQsYcgVe9dscT-fpYHJO3LZ5nlcj1rX2dJ-DChLkPsx0mVVcfSTyrSVZCM_bsV0%2526p%253D97769a47808811a05af6db285c%2526newp%253Dcb7cc54ad49c33be0dbe9b7c1e53d8304a02c70e3cc3864e1290c408d23f061d4863e1b821221a04d9c37c6301ad4957eff0357723454df6cc8a871d81edcd5a3edd%2526s%253D8f14e45fceea167a%2526user%253Dbaidu%2526fm%253Dsc%2526query%253D%2525D5%2525E2%2525CA%2525C7%2525C7%2525F8%2525BF%2525E9%2525C1%2525B4%2525D3%2525D0%2525CA%2525B7%2525D2%2525D4%2525C0%2525B4%2525BC%2525B6%2525B1%2525F0%2525D7%2525EE%2525B8%2525DF%2525B5%2525C4%2525B1%2525A8%2525B5%2525C0%25252C%2525C3%2525BB%2525D3%2525D0%2525D6%2525AE%2525D2%2525BB%2526qid%253D90e233d70000394c%2526p1%253D2\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">这是区块链有史以来级别最高的报道，没有之一</a>》.<br><br><b>牛市起点三篇</b>：<br>2019年10月29日：《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fbihu.info%252Farticle%252F1516046454\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">比特币涨到十万美元需要多少资金？</a>》<br>2019年10月21日：《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fbihu.info%252Farticle%252F1842183181\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">现在是减半牛市什么位置 ＆ 牛市见顶币价预测</a>》<br>2019年10月16日：《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fbihu.info%252Farticle%252F1186831261\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">关于减半牛市会不会来，会怎么来的问题</a>》<br><br>2019年9月18日：《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fbihu.info%252Farticle%252F1676798771\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">500万人民币在手，买房还是买币？</a>》<br>2019年8月30日：《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fbihu.info%252Farticle%252F1121933052\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">对话江卓尔：科普、挖矿，构建可量化、反脆弱的交易系统</a>》<br>2019年7月24日：《<a href=\"http://link.zhihu.com/?target=https%3A//weibo.cn/sinaurl%3Fu%3Dhttps%253A%252F%252Fbihu.info%252Farticle%252F1433212180\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【文字版】币看1对1 第一期：CSW vs 江卓尔</a>》​​​​​​​​</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/jiang-zhuo-er?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">江卓尔</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/513861917/answer/2485648849?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">121 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/532946327?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">luna还能起来吗？</a><br><a href=\"http://www.zhihu.com/question/532536118?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何看待luna归零？</a><br>\n","link":"http://www.zhihu.com/question/513861917/answer/2485648849?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"Terra 的 Luna 彻底崩盘了吗，接下来将如何发展？","date":"2022-05-14 15:30:33","description":"\n<p data-pid=\"Q2YUBt93\">13号早上8点40，币安下架luna，luna价格从昨天晚上0.02跌到0.0001，市值却只从3亿美金降到了2亿美金，在这期间却能跑出来了8亿ust，铸造出来的luna非常多，价格跌的快，市值却降的很慢，只能说市场上抄底的人太多了，币安此时下架luna可以说保护了一些人，因该仍然有高达110亿个ust没跑出来，很多人会看到价格这么低不断去加仓抄底，最终成为ust持有者逃生和套利的垫脚石。</p>\n<hr>\n<p data-pid=\"5a8xYMwm\">luna/ust重演去年的算法稳定币titan/iron死亡螺旋历史，将整个加密市场带入谷底。luna价格越低，增发的数量越多。10号增发了4千万luna，11号就增发了18亿luna，随着luna价格越来越低，增发速度会越来越快。几天时间一个前十的加密货币几千亿市值蒸发，也算是见证历史了，从此再无算法稳定币。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-267ea853dc90a1765316b8cae44b7798_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1418\" data-rawheight=\"916\" data-watermark=\"watermark\" data-original-src=\"v2-267ea853dc90a1765316b8cae44b7798\" data-watermark-src=\"v2-cc035d363d28155871cc2d6110bb4558\" data-private-watermark-src=\"v2-585e7d72c242cd8f51f4b733e20257b6\"></p>\n<p data-pid=\"0_ywA5fA\">目前还有130亿ust没有跑出来，luna目前价格0.2，市值只剩7亿了，ust虽然价格还有0.55，但目前的ust流动性最多还只有1亿，luna目前的市值还可能跑出几亿ust，最后的结果大概率就是luna市值降到1亿美金以下，待到ust和luna流动性双双趋近于0，这场游戏就彻底结束了。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-96337a1d750883aa4b3fbcc243a0e6b4_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"16175\" data-watermark=\"watermark\" data-original-src=\"v2-96337a1d750883aa4b3fbcc243a0e6b4\" data-watermark-src=\"v2-70c6f1df7f06cc312a5389e26012de43\" data-private-watermark-src=\"v2-71e8bbb08a487a58cd780f95e653e890\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/shou-wang-zhe-64-74?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Sirius.btc</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/513861917/answer/2480703646?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">121 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/532946327?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">luna还能起来吗？</a><br><a href=\"http://www.zhihu.com/question/532536118?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何看待luna归零？</a><br>\n","link":"http://www.zhihu.com/question/513861917/answer/2480703646?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"基因编辑农业育种为什么火了？能帮助实现粮食安全吗？","date":"2022-05-14 12:17:21","description":"\n<p data-pid=\"LelgL61O\">人类从远古时代起，就一直在进行着品种改良工作，把可食用的植物驯化成作物，把野生动物驯化成家畜，通过这个过程不断强化对人类有利的特征。驯化除了需要严密规划动植物的交配，还依赖大量自然突变形成丰富的基因库。随着育种技术的发展，人类已经知晓了许多决定特定性状的基因位置和功能，但是现代品种改良的思路却并未发生本质的改变——只能依靠自然突变或利用辐射和化学物质进行人工诱变。</p>\n<p data-pid=\"ZWVO7wNm\">要赋予物种一种新性状，并不只有依赖自然突变或人工诱变这一条路，还可以利用基因重组技术引入新基因。所谓基因重组，指的是从某个生物中获取有用性状的基因，组合到其他生物的基因组里，让其获得新的性状。简而言之，基因重组技术是一种能能跨越生物种属插入新基因的技术。基因重组现象在自然界已然存在。如果一个细菌进入一个新环境，它可能会遇到其他已经适应那个环境的细菌。细菌“新人”可以从细菌“老人”那里获取有用的基因，从而缩短自身适应新环境所需的时间。细菌原则上可以从所有细菌共享的一个通用基因库中吸收新基因，这种“剽窃“的能力使细菌获得了巨大的演化灵活性。但是由于生殖隔离的存在，一般动植物无法剽窃其他物种的新基因。于是我们利用细菌的重组元件作为载体实现了跨物种的基因重组，这项技术对医药的发展有着无与伦比的影响，比如治疗糖尿病的药物胰岛素最初只能从猪等动物的心脏内提取，在采用了基因重组技术之后，将人胰岛素的基因重组到大肠杆菌或酵母的基因中就能大规模制造出人胰岛素。</p>\n<p data-pid=\"ycQiNUEU\">当基因重组技术应用于植物的品种改良，也就是所谓的转基因作物。比如抗除草剂抗的大豆以及抗虫玉米，便是将来自细菌的抗除草剂和抗虫基因重组到农作物的基因组中。在操作基因重组技术时，我们得搞清楚目标基因插到哪里，想要往细胞中插入新基因，很可能受到受体基因偏爱影响，并不是随机插入，可能无法瞄准插入点插到错误的地方，甚至多插了好几个拷贝，整个过程不可控，只能大量重复插入操作，经过成千上万次尝试，从中挑选出恰巧符合预期的插入结果。这意味着基因重组仍然依赖于偶然性，必须耗费漫长的时间和大量的劳动力进行筛选。这也是为什么转基因不能一概而论，每一个转基因事件都是独立的，每一个转基因产品也是独一无二的。不管是美国，还是在欧洲和日本，转基因作物的风险评估也是遵循个案分析原则。在这个前提下， 任何一个转基因品种想要获得审批，不管是从食用角度，还是从生态环境角度，都必须经历严格的审查。即便只是在研发阶段，也需要在室外进行大范围栽培实验，研究者必须对周围环境中的植物进行调查，确保不存在能够与其杂交的植物，获得政府批准后才能进行。对企业而言，这项工作需要付出大量的人力和财力，一旦成本过高，转基因作物的研发便失去了价值。</p>\n<p data-pid=\"6L06YL8w\">然而在进行品种改良时,就算采用了突变原和基因重组技术,时间成本仍是个大问题。比如我们要利用突变原破坏某个特定基因,让它无法起作用，在这种情况下,如果单纯只使用突变原,在数量上万的庞大突变基因之中,我们根本无法预测遭到破坏的会是哪个部分的基因,想要破坏目标基因,只能依靠偶然，而且在绝大多数情况下,遭到破坏的都是非目标基因,所以研究者们只能不断重复相同的实验。</p>\n<p data-pid=\"itRK9mOQ\">基因编辑并不是一个全新的概念，在CRISPR/Cas 9的出现之前，第一代ZFN(锌指核酸酶,Zinc Finger Nuclease)和第二代是TALEN(transcription activator like effector nuclease，转录激活因子样效应物核酸酶）基因编辑技术都是使用蛋白质作为向导，但操作繁琐复杂，而且缺乏普适性，导致这项技术并没有火出学术圈。正是得益于CRISPR/Cas 9的出现，基因编辑才获得了全球性的普及。这项技术源自细菌的防御病毒入侵的机制，细菌之中存在一种名为CRISPR的DNA序列，该序列会在对抗病毒感染时发挥作用。然而，科学家尚不清楚其具体的作用机制。CRISPR包含某种颇具特征的重复序列，其中容纳有病毒的部分DNA，这是过去曾感染过的病毒的基因片段，当再次遭受到同种病毒的感染时，细菌就能识别该序列，利用一种名为Cas 9的酶，将病毒的DNA切断以防止感染。两人的研究组在CRISPR和Cas 9的现有功能的基础上，对其进行了改进，并将其当作人工切断目标DNA序列的工具。博劳德研究所张锋博士的研究组随即也投入了对CRISPR/Cas 9的应用和改良工作中，确认了CRISPR/Cas 9亦可应用于人类和动物细胞，并对其进行了进一步改良，充分展示了它在技术层面的巨大潜力和通用性。而且第三代CRISPR/Cas 9抛弃了蛋白质，利用RNA识别序列，只需要准备RNA和Cas 9就足够了，因此操作过程与以往相比简单了许多。自此，CRISPR/Cas 9的应用才算是真正开始了。</p>\n<p data-pid=\"nefteyxK\">然而该技术也存在尚未解决的问题。基因组编辑在理论上应该以目标基因为靶点，但严格说起来，并非所有情况下都能做到只瞄准单一基因，会发生脱靶效应 (off target effects)。一旦除目标基因之外的其他基因被编辑，则有可能产生无法预料的影响。当该技术被应用到医疗领域的时候，或是食品安全问题的时候，脱靶效应将会成为无法回避的问题。</p>\n<p data-pid=\"hMplxHAB\">基因编辑技术在植物品种改良领域蕴藏着巨大的发展潜力，通过这一技术带来的品种改良的可靠性和速度获得数量级的提高。以番茄为例，番茄果实变大经历了从醋栗番茄到樱桃番茄再到现代栽培番茄的两次驯化过程，在此过程中分别有5 个和13 个影响果实重量的基因受到了人类的定向选择。番茄果实从小到大的驯化过程经历了上千年，才积累了18个突变。利用CRISPR/Cas 9系统，通过一次设计，创造出来的突变比过去数十万年产生的突变还要多，而且变异更丰富。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-b59ce5652fdf952bed27a49eb93077d1_720w.jpg?source=b1748391?rss\" data-rawwidth=\"485\" data-rawheight=\"483\" data-size=\"normal\" data-caption=\"在影响果实大小和心皮数目的fas基因的启动子区域连续设计靶位点，利用CRISPR/Cas 9基因编辑技术创造了一系列等位突变，使得后代的果实大小和心皮数目呈现连续分布[1]。\" data-watermark=\"watermark\" data-original-src=\"v2-b59ce5652fdf952bed27a49eb93077d1\" data-watermark-src=\"v2-30419c9f01bf4e9d326477e0729c5077\" data-private-watermark-src=\"v2-cb0be7365ef1a4eb395919d4e66e88ef\" data-tags=\"politic\"></p>\n<p data-pid=\"4JgIYlI9\">番茄果实大小上的突破显示出了CRISPR/Cas 9基因编辑技术的强大力量。于是有人提出了一个更疯狂的想法——重新驯化番茄。直接对野生番茄多个驯化相关的基因同时进行CRISPR/Cas9编辑，可以在单个转化实验中同时改变番茄的产量、果实大小、形状、营养成分和植物形态<a href=\"http://link.zhihu.com/?target=https%3A//www.sciencedirect.com/science/article/pii/S0092867417309881%3Fvia%253Dihub\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">[</a>2，3]，跨越了数千年的番茄驯化历史在转瞬间就能完成。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-9409b4e91f27558853a735a8db6061a1_720w.jpg?source=b1748391?rss\" data-rawwidth=\"554\" data-rawheight=\"305\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-9409b4e91f27558853a735a8db6061a1\" data-watermark-src=\"v2-43bc1b8ac07cf0b8ef3c0ce515848094\" data-private-watermark-src=\"v2-ee7c6d9858cbcc183f1dbf0a1eca3224\"></p>\n<p data-pid=\"nsNWAOxd\">由于基因重组或多或少会有基因片段被随机插入在基因组的某个地方，总会留下痕迹，只要仔细检测就可以分辨出是否为基因重组生物。但基因组编辑却只精确破坏目标基因，并且连向导RNA和Cas 9也会被选择掉，不会留下任何痕迹，即使进行全基因组检测，也无法区分它到底是基因编辑的产物，还是自然突变。这也是最令人兴奋的一点。现在人们对于转基因作物的抵制大部分是担心转基因过程会对目标基因以外的部分造成不可预知的改变，这种不安的因素在基因编辑作物中便不复存在。因此，基因编辑作物不应该归为传统的转基因作物。而是一种特殊的人工诱变。</p>\n<p data-pid=\"hLfUVV-W\">如果将我们所积累的其它作物驯化相关的基因知识与基因组编辑技术相结合，就能创造出有用的品种，而这种品种改良的速度是如此之快，以往的任何方法都无法与之相比。可以说基因编辑技术的成熟应用将会彻底改变传统农业的育种模式。 </p>\n<p data-pid=\"_ntVDqc2\">参考资料</p>\n<p data-pid=\"ax7054wA\">[1] Rodriguez-Leal D, Lemmon Z H, Man J, Bartlett M E, Lippman Z B. Engineering Quantitative Trait Variation for Crop Improvement by Genome Editing. Cell, 2017.</p>\n<p data-pid=\"gyKdhiPD\">[2] Li T, Yang X, Yu Y, Si X, Zhai X, Zhang H, Dong W, Gao C, Xu C. Domestication of wild tomato is accelerated by genome editing. Nat Biotechnol, 2018.</p>\n<p data-pid=\"7ErBSpkO\">[3] Zsögön A, Čermák T, Naves E R, Notini M M, Edel K H, Weinl S, Freschi L, Voytas D F, Kudla J, Peres L E P. De novo domestication of wild tomato using genome editing. Nat Biotechnol, 2018.</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/luo-hen-wu-sheng?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">落痕无声</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/530658561/answer/2476351961?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">7 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/530658170?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">孟山都的种子切片机，对作物育种有多重要？</a><br><a href=\"http://www.zhihu.com/question/507137227?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">突破种业「卡脖子」难题，平谷两个国产白羽肉鸡新品种发布，这意味着什么？其中有哪些信息值得关注？</a><br>\n","link":"http://www.zhihu.com/question/530658561/answer/2476351961?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"像专业设计师一样，用网格系统设计版面","date":"2022-05-14 06:57:43","description":"\n<p>上一节，我们学习了文段排版的三个维度，从行间距与字间距、标点处理、对齐方式三个方面认识了排版中微观的部份。而本节我们将走向宏观，学习如何创造出一个版面。大家所学的手法正是之前提到过的网格排版系统，让我们开始今天的学习吧。</p>\n<h2>本文所包含的知识点</h2>\n<ul>\n<li>网格系统的限制在哪里？</li>\n    <li>网格系统适合/不适合哪些场景？</li>\n</ul>\n<p>[......]</p>\n<a href=\"https://sspai.com/post/72926\" target=\"_blank\">查看全文</a><p>本文为付费栏目文章，出自<a href=\"https://sspai.com/series/269\" target=\"_blank\">《100 小时后请叫我设计师》</a>，订阅后可阅读全文。</p>\n","link":"https://sspai.com/post/72926"},{"title":"一日一技 | 用 Pandoc 和 Sigil，将 Markdown 文档做成电子书","date":"2022-05-14 03:11:27","description":"希望这个入门指南能帮你制作出一本满意的个人作品。<a href=\"https://sspai.com/post/72536\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/72536"},{"title":"「麋鹿测试」到底是什么？对我们买车有何参考?","date":"2022-05-13 13:24:01","description":"\n<p data-pid=\"sZrKtI8q\">试着回答下</p>\n<ul>\n<li data-pid=\"p9Epw5jr\">为啥有麋鹿测试：<br>Corner Case的逆袭</li>\n<li data-pid=\"A4zQbJM6\">麋鹿测试是个啥：<br>一个快速躲闪的游戏</li>\n<li data-pid=\"EBBzF9CG\">对购车的参考：<br>没有统一的基准，就很难做参考</li>\n<li data-pid=\"fj3dpLS1\">给工程师兄弟的：<br>与麋鹿测试强相关的参数</li>\n</ul>\n<h2>1.为啥会有麋鹿测试：Corner Case的逆袭</h2>\n<p data-pid=\"HlWbEKNb\">因为在寒冷的北欧，有一种体型巨大的鹿叫麋鹿。<br>它们有时会从路边窜出来，而且行动迅速还富有攻击性，经常杀老司机们个措手不及。</p>\n<p><br></p>\n<p><img src=\"https://pica.zhimg.com/v2-863989b2be0a3a311087aa18cf6890c3_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"625\" data-watermark=\"watermark\" data-original-src=\"v2-863989b2be0a3a311087aa18cf6890c3\" data-watermark-src=\"v2-4b3c4032b188edd903504f1f1851ecd8\" data-private-watermark-src=\"v2-824359bd72d8cbc455bd0dee48d2cf34\"></p>\n<p><br></p>\n<p data-pid=\"P7qldHEn\">而麋鹿作为保护动物，被撞死了还真不是件小事。<br>所以很多驾驶者迫不得已要选择紧急避让而不是直接减速（不过即使减速了也有可能撞上鹿）<br>尽管直接减速才是相对更安全的操作（哪怕真的撞上了）。</p>\n<p data-pid=\"uGdUDBkX\">虽然鹿跳出来撞车的事并不是那么多，也不是每个国家都有那么多：<i>体型巨大的、具有攻击性的、移动速度又快的、又是保护动物的</i>、各种动物会在马路上乱逛。<br><b>是属于Corner Case。</b></p>\n<p data-pid=\"c9r2-vXE\">但这种驾驶操作比较偏极限工况，又有噱头。<br>媒体就有动力去做这种测试，就慢慢宣传起来了吧。<br>所以就有了麋鹿测试。（<i>注：这其实是我猜的</i>）</p>\n<h2>2.麋鹿测试怎么测：一个快速躲闪的游戏</h2>\n<p data-pid=\"9_rVUeXS\">其实很简单，如下图所示：测<b>能够不碰桩通过以下线路的最高进入车速</b><br>这是国际比较通用的作用，参考标准为：《ISO 3888-2》</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-680a6ab8718da299b2dff807885553a6_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"407\" data-watermark=\"watermark\" data-original-src=\"v2-680a6ab8718da299b2dff807885553a6\" data-watermark-src=\"v2-d02b6d1089e932098fd15c7d897908a7\" data-private-watermark-src=\"v2-f8b94dabd5b9258ccdb90fe37d45e760\"></p>\n<p><br></p>\n<p data-pid=\"e0QGgHXU\"><b>A区的宽度</b>：车宽乘1.1倍+0.25m<br><b>B区的宽度</b>：车宽+1m<br><b>车辆载荷</b>：75kg*最大乘员数+最大行李搭载质量<br></p>\n<p data-pid=\"Nu8b67lr\">进入桩筒区2m后的车速为记录车速，之后就不能踩油门和刹车了。<br><b>如果顺利通过就继续提高车速直至碰桩为止，上一次的通过车速就是麋鹿测试的成绩了。</b></p>\n<p data-pid=\"PlDM07qh\">而其实除了国际通用的做法，还有一种更为严格的测试方法。<br>来自麋鹿测试的原产地瑞典，专门做麋鹿测试的Teknikens Värld。<br>他们的方法如下图：</p>\n<p><br></p>\n<p><img src=\"https://pica.zhimg.com/v2-1cb6c5a164dc59ada9e333ebf97cada6_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"462\" data-watermark=\"watermark\" data-original-src=\"v2-1cb6c5a164dc59ada9e333ebf97cada6\" data-watermark-src=\"v2-2321ac4532db2c3aab05f2eeee3f461e\" data-private-watermark-src=\"v2-1bb4c1a7cc345bbeae83cd05d78d51c0\"></p>\n<p><br></p>\n<p data-pid=\"OOuIX4Kf\"><b>宽度：</b>不管什么车都是3m（<i>这其实更符合实际情况，路不会因为你车大了就变宽的</i>）<br><b>车辆载荷：</b>79.4kg<i>最大乘员数+最大行李搭载质量（</i>相比ISO重了4.4kg，可能北欧人更为高大威猛<i>）</i><br><i>最重要的是：<b>进入桩筒区后要尽量维持车速，不能松油门。</b>（</i>应该也是模拟实绩情况，万一后面同样有高速尾随的车，那我们也逼着不能减速啊*）</p>\n<p data-pid=\"QTG8dZdN\">所以，总体来说这家杂志的测试方法要严格很多。</p>\n<p data-pid=\"5cFiinlC\">大概的测试方式就是以上。<br><b>垃圾点的车通过车速不到70，正常的车在70~80之间，优秀的车就超过80了。</b></p>\n<p data-pid=\"MCzcBaHx\">理论上讲：<br>麋鹿测试确实应该是车辆动态性能中的一个<b>金字塔</b>。<br>不过达到了这个金字塔也不一定就能说这台车的操控性能很好。<br>因为这仅仅代表Corner Case中的一个<b>点</b>，不代表整体性能的平衡。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-587617975c18e894f384d0dd6b9559b0_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"495\" data-rawheight=\"375\" data-watermark=\"watermark\" data-original-src=\"v2-587617975c18e894f384d0dd6b9559b0\" data-watermark-src=\"v2-ed2ab73875c7b687e25e9359d9b45423\" data-private-watermark-src=\"v2-ed62d6f8500c2ab4f8418a5ed143c798\"></p>\n<p><br></p>\n<p data-pid=\"V-uPYhBB\">对于车辆的操控来说，基础的性能+人车沟通也很重要。<br><b>同时做到以上两点，我们开车的人才能真正发挥出车辆的物理能力。</b></p>\n<p data-pid=\"iKgG_l6U\">我自己就曾经开到过极限性能其实很高，但是人车沟通非常不好的车。<br><b>但是很好开到人车沟通很好但极限性能很差的车。</b></p>\n<h2>3. 对购车的参考：没有统一的基准，就很难做参考</h2>\n<p data-pid=\"k5EKpyLO\">先不说麋鹿测试对我们的购车参考有没有很大权重，这个留给买车的人结合自己的实际需求和精神需求判断就好。</p>\n<p data-pid=\"qoqo4FJP\">但麋鹿测试很难测得准。<br>这是一个非常极限工况的操作。哪怕是经过专业训练的，达到拉力赛的那种级别。<br>也不能保证每次的精度。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-ce64fe4efe2e831bcaef5c7a6e236766_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"865\" data-rawheight=\"429\" data-watermark=\"watermark\" data-original-src=\"v2-ce64fe4efe2e831bcaef5c7a6e236766\" data-watermark-src=\"v2-4e22bdabfbc48811e98a7ffdb857ac66\" data-private-watermark-src=\"v2-71cec244e61070c96d7cecc7787b3c5f\"></p>\n<p><br></p>\n<p data-pid=\"2-cZqMGm\">因为太极限了：<br><b>不同的测试员、不同的天气、不同的场地、不同批次的车都会带来很大的偏差，这个大的偏差就给我们购车参考带来了误导的可能。</b></p>\n<p data-pid=\"Hq84raQk\">国内目前也没有强制的法规来测试麋鹿成绩，导致各种测试方法百花齐放。<br>哪怕官方公布的成绩，我们也很难拿来与别家的官方成绩做真正的横向对比。</p>\n<p data-pid=\"F1nXgXYK\">所以真的要把麋鹿测试的成绩作为购车的一个参考项也不是不行，<b>但是得仔细甄别成绩的来源。</b><br>是国内媒体按照自己的理解做，用只会拍车不会评测的所谓的车评老师，测出来的成绩？<br>还是国外的专业媒体测出来的成绩，甚至专门做麋鹿的媒体做出来成绩（<b>如瑞典媒体Teknikens Värld</b>）</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-775fa713a1c3a2bdb2cad4f70a242620_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"635\" data-rawheight=\"800\" data-watermark=\"watermark\" data-original-src=\"v2-775fa713a1c3a2bdb2cad4f70a242620\" data-watermark-src=\"v2-49fcf993b06ad2c9edcab8dde3e26dac\" data-private-watermark-src=\"v2-02ae2c59188925784333c8d1457c0002\"></p>\n<p><br></p>\n<p data-pid=\"4n3y_uxt\">但，哪怕是国外权威杂志的测试结果，你真的以为你在国内买到的车和他们测的车的性能会一样吗。</p>\n<blockquote data-pid=\"cdJ6PTyl\">国内已经很少想标雪那种哪怕不好卖还是直接照般海外版所有性能设定的车企了。</blockquote>\n<p data-pid=\"bEJFVvay\">好吧，扯到这先。<br>最后给下我目前认知水平内的对麋鹿测试影响比较大的参数。<br>如果是车辆工程或者相关方向的，可以参考下。<br><b>不一定对，很有可能错。</b></p>\n<p data-pid=\"XQHEDIGb\">SSF（Static Stability Factor ）：SSF= T（轮距）/2H（重心高度）数值越大越好<br>轮距：越宽越好<br>轴距：越长越好<br>质心高度：越低越好<br>车高：低了相对好<br>整备质量：轻了相对好<br>胎宽：理论上胎越宽越能提高过弯极限，但是当抓地力大于离心力而离心力已经足以使轮胎侧翻的时候，翻车危险会很大。<br>扁平比：扁平比小相对有利（轮胎厚）</p>\n<p data-pid=\"zQPmPLwk\">OK，正式结束。</p>\n<p data-pid=\"A73JfNMg\">申明：图片来自网络，侵删</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/lin-jian-chao-66?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">小林</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/532088553/answer/2484259485?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">13 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/525910297?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">工信部给出的汽车领跑值与限制是什么意思？</a><br><a href=\"http://www.zhihu.com/question/504251644?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">麋鹿测试到底怎么看？</a><br>\n","link":"http://www.zhihu.com/question/532088553/answer/2484259485?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"你有多久没旅游了？你的下一站旅行计划是什么？","date":"2022-05-13 12:11:23","description":"\n<p data-pid=\"mDmEm4lJ\">我想去冰岛，好想去冰岛，想和我的狗狗一起去冰岛看极光~</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/69-1-4-92?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">狂扁小朋友</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/532422014/answer/2482250095?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">4 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/512142818?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">因为什么，让你决定去太原旅行的？</a><br><a href=\"http://www.zhihu.com/question/510323321?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">你喜欢徒步旅行吗？那是一种什么体验？</a><br>\n","link":"http://www.zhihu.com/question/532422014/answer/2482250095?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"本周看什么丨最近值得一看的一大波作品","date":"2022-05-13 10:24:04","description":"☕️TL;DR近期佳作推荐：[美剧]绝望写手第二季、[电影]万湖会议、[美剧]闪亮女孩、[动画]青之芦苇、[国产剧]风起陇西、[综艺]意外的旅程、[动画]小鸟之翼、[美剧]星际迷航：奇异新世界第一季、 ...<a href=\"https://sspai.com/post/73199\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/73199"},{"title":"第一次组装台式机要从何下手？这是我的经验与推荐","date":"2022-05-13 08:03:07","description":"这是我头一回自己装机，也是我头一次把过去看到的所有相关资讯有机会付诸实践，希望就着新显卡即将到来的档口，帮助更多人迈出自己装机的第一步。<a href=\"https://sspai.com/post/73187\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/73187"},{"title":"为了高效阅读 Newsletter，我把它们放进了 Cubox","date":"2022-05-13 06:30:00","description":"最近，作者群里的大鸽们都发出了各自的Newsletter订阅链接，我的Newsletter订阅列表也在不断变长。为了高效获取Newsletter，减少阅读和摘录成本，我打算对传统的订阅方式作出调整。最 ...<a href=\"https://sspai.com/post/73188\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/73188"},{"title":"追求奇效不如先「用对」：聊聊火遍全网的筋膜枪","date":"2022-05-13 03:39:52","description":"正确认识，理性购买。<a href=\"https://sspai.com/post/73097\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/73097"},{"title":"如何评价动画《新秦时明月》第26集？","date":"2022-05-13 03:37:30","description":"\n<p data-pid=\"lAEZIkiI\">大家好，《新秦时明月》已经播出第二十六集</p>\n<p data-pid=\"Iko8vqH1\">机关无双这次重磅登场挑战蜂巢阵。我看有小伙伴弹幕戏称无双根本不用动。我们其实也有考虑过，这里主要其实是机关无双活动下手脚。在被改造成机关无双之前，无双就是铜皮铁骨，普通兵器根本奈何不得他。这次升级改造后，面对普通机关其实他站在那里不动也一样还是没多大意义。我看还有观众有个挺哲学的问题，有人担心复活后的无双还是之前的无双鬼吗？或者说还是人吗？显然，他已经不是之前他了；但我相信，潜意识深处，或许无双还保留了一丝人性，只是在等待一个人的唤醒。</p>\n<p><img src=\"https://pica.zhimg.com/v2-3778a1688b145f1f50f8528475969f87_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1928\" data-rawheight=\"1091\" data-watermark=\"watermark\" data-original-src=\"v2-3778a1688b145f1f50f8528475969f87\" data-watermark-src=\"v2-cee320c2379aa4a92c7f2c03402e5a94\" data-private-watermark-src=\"v2-eaa87e376acd34dd9c46d7581c8bb41b\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-5b6c58e9a40cbde9b3b88c0854d67e00_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"watermark\" data-original-src=\"v2-5b6c58e9a40cbde9b3b88c0854d67e00\" data-watermark-src=\"v2-b30c655c524f32374c346a2d95354e74\" data-private-watermark-src=\"v2-68de7184d6604fb8a10a88a45e9449b7\"></p>\n<p data-pid=\"DhPDrubf\">禁地内，三个小家伙顺利过了虎跳；但是到了猿飞，少羽就开始表现出恐高惧怕上前。这里月儿跟天明虽然疑惑，但是还未发现少羽为什么有点奇怪。我很喜欢这的三小只表演，表情比较生动自然，月儿也看起来很漂亮；尤其是少羽单手拉动千斤铜虎的动作，真的帅爆了。 </p>\n<p><img src=\"https://pic3.zhimg.com/v2-e49c074bea14d8024d645377b3d68dec_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"watermark\" data-original-src=\"v2-e49c074bea14d8024d645377b3d68dec\" data-watermark-src=\"v2-27badbc65c62b9dd9100a42bcfe9227f\" data-private-watermark-src=\"v2-7726bb0bee5060eb8ba7c74988d83a21\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-0a356b06d5fb8ff671080a9ce400fe47_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1943\" data-rawheight=\"1088\" data-watermark=\"watermark\" data-original-src=\"v2-0a356b06d5fb8ff671080a9ce400fe47\" data-watermark-src=\"v2-80058bb375ca3402f8426c17916120c7\" data-private-watermark-src=\"v2-9f9e7c66a09f2db7eb0381e7a6c03a37\"></p>\n<p><img src=\"https://pica.zhimg.com/v2-a08170929d59d14876d944e64ee85582_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1269\" data-rawheight=\"705\" data-watermark=\"watermark\" data-original-src=\"v2-a08170929d59d14876d944e64ee85582\" data-watermark-src=\"v2-eba10c533b15dfb4606fc72ccd6bfa35\" data-private-watermark-src=\"v2-be62e4253517937adaf4bf629aa95f91\"></p>\n<p data-pid=\"7KxNGEmw\">这里我看到有小伙伴弹幕奇怪少羽为什么在虎跳的时候没有恐高？我个人觉得有两层原因，一个是虎跳这里整体的上下落差还不是特别巨大，可能几十米，或许这还不到少羽“恐高”的“高度”，但猿飞的地方是一处裂谷深数百丈，这个确实更容易引发少羽恐高。另外一个原因，细心观众可能会注意到，虎跳这一关，下放有比较重的雾气，所以下放究竟如何并不能看得很清楚。我想这也是少羽在这里没有恐高的原因。另外，我觉得这里和上一次，鸩羽千夜发毒，天明攀岩到廊桥时少羽奋不顾身翻出廊桥用双腿撑住机关那段表现有些类似：一方面廊桥下因为有机关，有大块的机关桩，这多少可以给人一些心理暗示和慰藉。另一方面，情急之下，少羽都忘记了自己恐高，可见他对天明还是挺关心的。 </p>\n<p><img src=\"https://pic1.zhimg.com/v2-0bf51b22b94c244a4f8ae69ae6cb229f_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"watermark\" data-original-src=\"v2-0bf51b22b94c244a4f8ae69ae6cb229f\" data-watermark-src=\"v2-ef6a38bc1370d23d8a62d0b977cbbb0c\" data-private-watermark-src=\"v2-e620024ce0c9faa3f105b5723592ddb6\" data-tags=\"porn\"></p>\n<p data-pid=\"T1nyCc31\">还有一个细节，就是面对卫庄以墨家弟子性命威胁，大铁锤焦急要出去救人，小高冷静地阻止。这里其实和老版有些差别。老版中小高是拔出了剑，但新版这小高并没有拔出剑。我想这一方面是更符合小高沉稳的性格；另一方面也是细节表现出墨家几位统领在这时虽然有很大的分歧，但他们不会真的拔剑相向，一定是隐忍的。 </p>\n<p data-pid=\"a9cNuoIU\">另外，上海现正处在防疫的攻坚阶段，上海公司依旧是全员隔离在家。之前提到最大的困扰是远程操控的公司电脑会因为各种客观不确定原因而发生宕机。这对我们制作影响挺大。上一次宕机电脑较多后，我们经过重重申请，有3位勇敢同时又符合出行条件的小伙伴去公司重启了这些宕机的电脑；但随着时间推移，又有不少电脑宕机了。要知道，为了抓紧进度，每个公司的电脑，背后是两位工作人员分早晚班的排班用来制作动画，所以一台电脑的宕机，实际相当于两位同仁的生产力被影响。为此，经过重重申请，今天又有3位小伙伴，申请到去公司为大家重新启动了电脑。他们开启的不仅仅是数十台的电脑，更是我们尽量去实现和大家每周这个约定的希望，为他们点赞。 </p>\n<p data-pid=\"SFeQRQDv\">目前上海疫情管理上不敢松懈，最近终于降到了一两千新增量，感觉解封有希望了。这次开启的机器希望可以撑到解封不出问题，也再次感谢大家的理解和陪伴。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/xie-xiao-ming-98-74?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">薛小明</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/532485112/answer/2482333727?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/531591558?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何看待动画《新秦时明月》第25集？</a><br><a href=\"http://www.zhihu.com/question/527904002?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价动画《新秦时明月》第22集？</a><br>\n","link":"http://www.zhihu.com/question/532485112/answer/2482333727?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"派早报：Sony 推出新款 WH-1000XM5 耳机、英伟达宣布开源其 Linux GPU 驱动","date":"2022-05-13 00:59:20","description":"Sonos 推出入门级条形音箱 Sonos Ray，Wondery 播客平台将支持杜比全景声等<a href=\"https://sspai.com/post/73177\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/73177"},{"title":"被Linux之父骂醒？英伟达破天荒开源GPU内核驱动，网友：活久见","date":"2022-05-12 14:51:43","description":"\n<blockquote data-pid=\"FZilU1G_\">终于等到了这一天：英伟达开源了他们的 Linux GPU 内核驱动。</blockquote>\n<p data-pid=\"_2j6e7pT\">「英伟达是我们遇到的硬件厂商中最麻烦的一个。」这是 Linux 内核总设计师 Linus Torvalds 十年前说过的一句原话。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-1879639e4c3d8e993a368f353f7c2673_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"629\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-1879639e4c3d8e993a368f353f7c2673_r.jpg\"></figure><p data-pid=\"XJZgIAvR\">当时，Linus 正在芬兰赫尔辛基阿尔托大学举办的学生和开发者研讨大会上接受采访。在会上，一位现场观众称其买过一款搭载了集成显卡以及 NVIDIA 独立显卡的笔记本电脑，但是在 Linux 下通过 NVIDIA  Optimus 技术进行独立显卡与集成显卡之间的切换却得不到驱动的支持（NVIDIA Optimus 是英伟达开发的双显卡切换技术，它可以实现笔记本电脑中独立显卡与主板内置显卡之间无缝、自动、实时的切换），并就此询问 Linus 的想法。就是在这种语境下，Linus 说出了上面那句话，然后转向摄像机镜头竖起了中指并爆了粗口。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-60303df1a6f96a51baa758862ad1c0a0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"858\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-60303df1a6f96a51baa758862ad1c0a0_r.jpg\"></figure><p data-pid=\"cqXgzXEw\">作为开源操作系统 Linux 之父，Linus 一直是开源的忠实拥护者，他一直希望英伟达能够开源他们的驱动。如今，这一天真的来了。</p>\n<p data-pid=\"b7Ybzyf6\">刚刚，英伟达宣布，他们开源了自己的 GPU 内核驱动模块，此事在开发者社区引起轰动。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-d97d9e84cc77279608882a14be56e489_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"984\" data-rawheight=\"268\" class=\"origin_image zh-lightbox-thumb\" width=\"984\" data-original=\"https://pic2.zhimg.com/v2-d97d9e84cc77279608882a14be56e489_r.jpg\"></figure><p data-pid=\"E3dJc3qE\">有人评价说，「这是近十年来开源操作系统硬件支持方面发生的最大事件之一。」</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-ba121b2ce44158717c3d0dbf1489bb05_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"297\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-ba121b2ce44158717c3d0dbf1489bb05_r.jpg\"></figure><p data-pid=\"xbyTRg43\">还有人戏称，这是一个「活久见」时刻。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-4b11454e34c738ef9091e70ca5ae1d3e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"725\" data-rawheight=\"597\" class=\"origin_image zh-lightbox-thumb\" width=\"725\" data-original=\"https://pic3.zhimg.com/v2-4b11454e34c738ef9091e70ca5ae1d3e_r.jpg\"></figure><p data-pid=\"2Tn1E3ZR\">这次开源使用双 GPL/MIT 许可，从 R515 驱动程序版本开始。开发者们可以在 GitHub 上的 NVIDIA Open GPU Kernel Modules repo 中找到这些内核模块的源代码：<a href=\"https://link.zhihu.com/?target=https%3A//github.com/NVIDIA/open-gpu-kernel-modules\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/NVIDIA/open-</span><span class=\"invisible\">gpu-kernel-modules</span><span class=\"ellipsis\"></span></a></p>\n<p data-pid=\"WOPzwtOY\">英伟达表示，此次开源将大幅提升用户在 Linux 系统中使用英伟达 GPU 的体验，可使其更紧密地与操作系统集成，有利于开发人员的调试、集成和反馈。对于 Linux 发行版提供商，开源的内核模块增加了易用性，还改善了开箱即用的用户体验，以签署和分发 NVIDIA GPU 驱动程序。Canonical 和 SUSE 能够立即将这些开源的内核模块与 Ubuntu 和 SUSE Linux Enterprise Distributions 打包在一起。</p>\n<p data-pid=\"bYbCWNuL\">开发人员可以跟踪代码路径，了解内核事件调度如何与他们的工作负载交互，以便更快地进行根源调试。此外，企业软件开发人员现在可以将该驱动无缝集成到为他们的项目定制的 Linux 内核中。这将进一步提高 NVIDIA GPU 驱动的质量和安全性，并得到 Linux 终端用户社区的反馈。</p>\n<p data-pid=\"pT-Ak7FU\"><b>支持的功能</b></p>\n<p data-pid=\"hbqOTWrR\">此次 GPU 内核模块发布的第一个版本是 R515，除了公布源代码之外，该版本还提供了驱动程序的完整构建和打包版本。对于 NVIDIA Turing、NVIDIA Ampere 架构系列中的数据中心 GPU 来说，这些代码可用于生产。这得益于过去一年英伟达分阶段推出的 GSP 驱动程序架构，旨在让英伟达的客户轻松过渡。研发团队专注于测试各种工作负载，以确保与专有内核模式驱动程序的功能和性能相同。</p>\n<p data-pid=\"7BE_FTWJ\">未来，HMM 等功能将成为 NVIDIA Hopper 架构上机密计算的基础组件。</p>\n<p data-pid=\"uvFM3vkY\">英伟达这次的开源版本对 GeForce 和 Workstation GPU 的支持度很高。GeForce 和 Workstation 用户可以在 NVIDIA Turing、NVIDIA Ampere 架构 GPU 上使用此驱动程序来运行 Linux 桌面，并在 Vulkan 和 NVIDIA OptiX 中使用多显示器、G-SYNC 和 NVIDIA RTX 光线追踪等功能。用户可以选择使用文档中突出显示的内核模块参数 NVreg_EnableUnsupportedGpus 。更强大、功能更全的 GeForce 和工作站支持将在后续版本中发布，英伟达开源内核模块将最终取代闭源驱动程序。</p>\n<p data-pid=\"WRQIsAgP\">拥有 Turing 和 Ampere GPU 的客户可以自主选择安装哪些模块。而使用 Turing 之前硬件的客户将继续运行闭源模块。</p>\n<p data-pid=\"hT1CK9DQ\">开源内核模式驱动程序使用相同的固件和相同的用户模式堆栈，例如 CUDA、OpenGL 和 Vulkan。但是，驱动程序堆栈的所有组件都必须与发行版中的版本相匹配。例如，用户不能使用以前或未来版本的用户模式堆栈发布源代码、构建或运行它。</p>\n<p data-pid=\"mTO0WNUE\"><b>为什么英伟达的开源驱动对 Linux 如此重要？</b></p>\n<p data-pid=\"NPMujwpg\">在英伟达宣布开源后不久，开源解决方案供应商 Red Hat 的桌面高级经理 Christian F.K. Schaller 发表了篇题为《Why is the open source driver release from NVidia so important for Linux?》的博客文章，深入解读了英伟达此次开源对 Linux 的影响，我们来看看他是怎么说的。</p>\n<p data-pid=\"rY4vdf83\"><b>新驱动包含什么?</b></p>\n<p data-pid=\"5Fhr0k-Z\">英伟达此次发布的是源代码树外内核驱动程序，该驱动程序经过测试可支持数据中心 GPU 上的 CUDA 用例。其中含有支持显示的代码，但尚未完成测试。此外，这只是内核部分，现代图形驱动程序的很大一部分能够在固件和用户空间组件中找到，但它们仍是闭源的。</p>\n<p data-pid=\"UcFV5Rrh\">不过，这次开源确实意味着 NVidia 已经发布了一个能够使用 Linux 内核中 GPL-only API 的内核驱动程序，尽管这个初始版本不使用旧驱动程序未使用的任何 API。</p>\n<p data-pid=\"MHZyk0lJ\">该驱动程序还仅支持 NVidia Turing 芯片 GPU 及之后的更新版本，这意味着它不能用于 2018 年之前的 GPU。因此，对于大多数 Linux 桌面用户来说，并不是立即可用。</p>\n<p data-pid=\"vkb5R54O\"><b>对于英伟达二进制驱动程序意味着什么？</b></p>\n<p data-pid=\"tSqzcuBz\">Turing 芯片之前的英伟达 GPU 将继续需要英伟达的二进制内核驱动程序。在开源内核模块经过全面测试和扩展以显示用例之前，即使用户使用的是 Turing 之后的 GPU，也可能需要继续使用该二进制驱动程序。同样，二进制驱动程序的很大一部分可以在固件和用户空间中找到。</p>\n<p data-pid=\"E5SAlj85\"><b>对于 Nouveau 意味着什么？</b></p>\n<p data-pid=\"06q7o7Q7\">Nouveau 是当前英伟达 GPU 的内核内图形驱动程序。它功能完备，但因不能 re-clock 而无法像二进制驱动程序那样为用户提供完整的性能。</p>\n<p data-pid=\"s1EHJFC1\">Linux 内核不允许同一硬件有多个驱动程序，因此为了让新的英伟达内核驱动程序进入当前驱动程序，必须退出或至少限制一组不同的硬件，当前驱动程序就是 Nouveau。</p>\n<p data-pid=\"o_KuI7cK\">就像二进制驱动程序一样，Nouveau 的很大一部分不在内核中，而是在 Mesa 的用户空间片段和 NVidia 当前发布的 Nouveau 特定固件中。因此，英伟达会保留 Nouveau 以支持 Turing 之前的硬件。</p>\n<p data-pid=\"RP139Asq\">我们正在努力探索一种能让英伟达二进制驱动和 Mesa 共享内核驱动程序的方法，这可能需要几年的时间才能完全实现。我们目前预期推出一种全新的驱动程序，旨在同时满足英伟达用户空间和 Mesa 用户空间的需求。我们也希望在此过程中与英伟达的工程师合作。</p>\n<p data-pid=\"6xuOv1PY\">综上所述，对于开源社区来说，这意味着我们将有一个内核驱动程序和固件，允许改变 GPU 时钟，以提供研究者期望从英伟达显卡获得的性能；意味着我们将拥有一个开源驱动程序，从开源第一天起我们就可以访问新一代英伟达硬件固件和内核更新；意味着我们可以开始使用 Linux 内核中的 GPL-only API。</p>\n<p data-pid=\"OhD41yX0\"><b>对于 Fedora、RHEL 等 Linux 发行版意味着什么？</b></p>\n<p data-pid=\"xM0VPF_V\">实际上，英伟达的开源 GPU 内核近期并不会对 Fedora、RHEL 等 Linux 发行版产生重大影响。但随着时间的推移，由于此次开源提供了一种从根本上简化英伟达硬件支持的途径。从长远来看，我们希望能够在英伟达硬件上获得与英特尔和 AMD 类似的体验，即开箱即用的功能。</p>\n<p data-pid=\"FqeKx6Fy\">接下来英伟达会有很多工作要做，他们需要使这个新的驱动程序在计算和图形显示应用中更加完整，我们需要做的是，共同努力为未来统一内核驱动程序制定一个计划，并围绕该计划制定一个适用于社区和英伟达的模型，例如添加 Mesa Vulkan 驱动程序之类的东西。</p>\n<p data-pid=\"m5QRKnrA\"><i>参考链接：<a href=\"https://link.zhihu.com/?target=https%3A//blogs.gnome.org/uraeus/2022/05/11/why-is-the-open-source-driver-release-from-nvidia-so-important-for-linux/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">blogs.gnome.org/uraeus/</span><span class=\"invisible\">2022/05/11/why-is-the-open-source-driver-release-from-nvidia-so-important-for-linux/</span><span class=\"ellipsis\"></span></a></i></p>\n<p data-pid=\"fKTWSlUy\"><i><a href=\"https://link.zhihu.com/?target=https%3A//developer.nvidia.com/blog/nvidia-releases-open-source-gpu-kernel-modules/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">developer.nvidia.com/bl</span><span class=\"invisible\">og/nvidia-releases-open-source-gpu-kernel-modules/</span><span class=\"ellipsis\"></span></a></i></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/ji-qi-zhi-xin-65?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">机器之心</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/513210646?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"新玩意 105｜少数派的编辑们最近买了啥？","date":"2022-05-12 09:15:22","description":"关于栏目很多读者都会好奇少数派的编辑们到底平时都「买了啥」。我们希望通过「编辑部的新玩意」介绍编辑部成员们最近在用的新奇产品，让他们自己来谈谈这些新玩意的使用体验究竟如何。内容声明：《新玩意》栏目如含 ...<a href=\"https://sspai.com/post/73170\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/73170"},{"title":"2亿人在4月静止","date":"2022-05-12 08:30:49","description":"\n<p data-pid=\"45ZZeC4h\">“<b>全域静止\\静态\\静默管理</b>”，这个本轮疫情才刚刚发明的新词，过去一段时间却在媒体、通知和人们的聊天中出现了无数次。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-d5a44718bd52276c1931a8e7e8f6e949_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"693\" data-rawheight=\"280\" class=\"origin_image zh-lightbox-thumb\" width=\"693\" data-original=\"https://pic2.zhimg.com/v2-d5a44718bd52276c1931a8e7e8f6e949_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"V6XjAymm\"><b><i>（图片：百度搜索指数-“静态管理”）</i></b></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"OPGHb8lT\"><b>全域静止</b>到底是什么？我们整理了这一个月以来多个城市的各项通知，它大概包括两个方面：</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"PtPMWiwh\">第一，经营性密闭场所暂停营业，<b>影院关闭，餐饮堂食停止</b>，严控聚集。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"zQ0v2vj3\">第二，<b>停止公共交通</b>，居家办公，非必要不出户，甚至足不出户。</p>\n<p data-pid=\"I-OOqJtf\">当疫情出现时，上述第一条管控措施常常会立刻施行，随着疫情的发展，再展开第二条措施。例如北京在4月28日起暂停了大部分区域的影院开放，5月1日时全市暂停堂食，5月5日起多区域开始实施居家办公，5月12日将暂停朝阳、房山、顺义等区域的出租车跨区域运营。</p>\n<p data-pid=\"WSCyp_JW\">另一些地区会同时将两条措施同时落实，例如深圳在3月12日发布通知，暂停堂食，停止公共交通，全面居家办公。</p>\n<p data-pid=\"leIlo2i7\">随着疫情的好转，这些防控措施又会逐步取消。例如在3月21日起，深圳开始恢复生产经营秩序，公共交通恢复，居家办公停止，堂食按照50%的比例限流开放。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"hgGzvDa2\">那么，<b>在刚刚过去的4月，有多少居民经历了这样的“全域静止\\静态\\静默管理”呢</b>？</p>\n<p data-pid=\"115UAElw\">如果从官方通知去寻找，可能会挂一漏万，因为许多通知并未放在官方网站上，一些区县级别的封控，只用微信公众号发布，甚至可能没有发布。例如之前的瑞丽市、东兴县等，都是在持续封控较长时间之后才进入人们的视野。</p>\n<p data-pid=\"CmzyXRPu\">还有多少不为人知的瑞丽市和东兴县？在那里居住了多少人？我们从“全域静止”政策的三个维度——<b>影院营业</b>、<b>线下消费</b>以及<b>交通情况</b>，试图找到问题的答案。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h2><b>▍影院“静默”</b></h2>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"I0dAHTtg\">我们用到的第一项数据是每家电影院每天的票房数据。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"H90UbVNU\">中国有<b>11000多家</b>电影院，分布在几乎每一个区县。电影院往往属于疫情出现时被关停的第一批密闭场所。使用北京、深圳和上海作为例子，我们可以看到在疫情封控前后阶段的票房变化情况。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-e7ed328031452707e9598dfa29dcd528_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic1.zhimg.com/v2-e7ed328031452707e9598dfa29dcd528_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"pT3906N2\">以北京、上海和深圳的元宵节后第一天（2月16日）标准化为1，可以看到三个城市的票房走势。上海在电影院的关闭上做得最早，3月11日关闭了电影院，随后电影院再也没有开启；深圳在3月12日关闭了电影院，4月6日之后重新开启；北京市在4月24之后票房大幅度下降，4月30日关闭了电影院，随后关闭至今。</p>\n<p data-pid=\"SMHyECMc\">因此，当一个区县的<b>所有电影院</b>，不仅<b>一张电影票也没有卖出去</b>，播放的电影<b>场次也为零</b>时，我们就把这个地区居住的人口定义为处于”<b>影院静默</b>“。从2020年8月到现在，满足”影院静默“标准的人口占总人口比例走势见下图：</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-9a8b08ebd3a13b223ddf27aa91323015_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic2.zhimg.com/v2-9a8b08ebd3a13b223ddf27aa91323015_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"M7fqnt30\">可以看到，在2021年初的石家庄疫情中，全国陷于“影院静默”的人口比例约为5%、2021年8月的江苏、湖南疫情中，这个比例一度提高至15%。2021年12月的西安疫情中，全国的“影院静默“比例也达到近10%。</p>\n<p data-pid=\"spcrw6Ri\"><b>但这些显然都无法与最近的奥密克戎疫情相比。</b></p>\n<p data-pid=\"Gt-rqa_k\"><br>4月上旬，全国的“影院静默“人口比例一度<b>超过了30%</b>，随后在4月底有所下降。平均来看，<b>全国四分之一的人口，在4月时无法走进电影院</b>。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h2><b>▍消费“静态”</b></h2>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"kJMDHNT9\">第二项数据来自某大型支付平台，记录了每一个地区每天通过该平台进行的消费，主要包括<b>到店消费</b>，这项数据能够呈现出“暂停堂食“或者更广义的“无关民生保障的服务业全部暂停 “的情况。</p>\n<p data-pid=\"Rle5LorF\">那么，<b>这项数据要下降到什么程度，才能说明这个地区进行了较为严格的“静态”管理呢</b>？</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"vAQJhffI\">我们同样用北京、深圳、上海来举例，以2021年同期为1，这些地区在今年的消费情况如下图所示：</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-d61c1b4374725d2cd7bd8741ff4ba1ca_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"650\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic3.zhimg.com/v2-d61c1b4374725d2cd7bd8741ff4ba1ca_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"jfdj1SHq\">上图列出了从2月27日到5月9日北京、上海和深圳相对于2021年同期的消费水平。之所以选择2月27日这个时间点，是2021年的元宵节在2月26日，选择2月27日开始可以避开两个年份的春节效应。</p>\n<p data-pid=\"zn05riDm\">从图中可以看到，从2月27日开始，深圳的比值已经低于1，即当前消费低于2021年同期水平。这是因为深圳当时已经出现近半个月，但还没有进行非常严格的防控。深圳从3月12日开始较为严格的防控，停止堂食和居家办公，其消费比值最低在3月20日下降至<b>46%</b>，此时的消费水平比2021年同期的低54%。</p>\n<p data-pid=\"MjS57J_k\">上海在2月27日时的消费比值为1.08，比2021年同期高8%。但此时疫情出现，从3月开始，上海市的消费比值一路下滑，并在“鸳鸯锅封城“后的第三天，即3月30日<b>跌破50%</b>，随后最严格的防控开始，上海的消费比值一路下跌至去年同期的<b>7%</b>，目前也毫无恢复迹象。</p>\n<p data-pid=\"zBVvnoqR\">北京的消费比值是三个城市中最高的，但由于全国范围内疫情的影响和跨省流动的限制，北京的消费比值也在3月中旬后跌破1，并在4月24日疫情出现后快速下跌，目前北京的消费仅有2021年同期的<b>54%</b>。</p>\n<p data-pid=\"MGFXLB6i\">不难发现，深圳采取严格封控措施时，消费比值最多跌破了50%；上海使用“鸳鸯锅封城“时，消费比值也刚刚跌破50%；北京暂未封城，但堂食停止、影院关闭，个别区域已经开始居家办公，各项举措已经包括了许多封城的特征，此时消费比值暂未跌破50%，但也已经十分接近。</p>\n<p data-pid=\"GNfQQrGV\"><b>因此，我们将当日消费是否低于去年同期平均水平的50%定义为“消费静态”。</b></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"cS1hvQJv\">全国从2020年5月到现在，处于“<b>消费静态</b>”状态下的居民，如下图所示：</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-e238cb4af53fb9ff1715d9f087254450_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"650\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic1.zhimg.com/v2-e238cb4af53fb9ff1715d9f087254450_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"vaVoV-FH\">可以看到，从2020年5月全国进入正常生活开始，处于“消费静态“下的居民占比一直较低，绝大多数时候都低于千分之一。即使是几次比较大规模的疫情——2020年8月的乌鲁木齐疫情，2021年1月的石家庄疫情，2021年8月的江苏/湖南疫情，2021年12月的陕西疫情，影响到的人口比例都只在1%左右，从未超过2%。</p>\n<p data-pid=\"X0N3E5hn\">但在本轮疫情中，处于“消费静态“下的人口比例出现了<b>大幅度上升</b>。4月期间，该比例始终在<b>15%-20%</b>之间徘徊，在4月上旬和五一节过后的几天甚至达到了<b>25%</b>。平均来看，<b>全国五分之一的人口，在四月时的消费比去年同期低50%。</b></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h2><b>▍交通“静止”</b></h2>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"PSU8xEON\">第三项数据，是来自某大型地图供应商的“<b>拥堵指数</b>“。该指数比越高，说明该地拥堵情况越严重。当该指数接近0时，说明道路上完全没有车辆，驾驶畅通无阻。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"f8qVxCHs\">使用北京、深圳和上海，我们同样能够看到在不同封控水平下，拥堵指数的变化。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-9e681afd7c0c83577b3ff0663f1a712d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"650\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic2.zhimg.com/v2-9e681afd7c0c83577b3ff0663f1a712d_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"icpKvKir\">从上图可以看到，深圳市的拥堵指数在3月中旬出现了比较明显的下滑，在0.2以下；上海市的拥堵指数从3月开始已下降，但此时仍然高于0.2，在3月底封城之后才下滑到0.2之下；北京在4月24日爆发疫情后，5月的拥堵指数也下降到了0.2左右。</p>\n<p data-pid=\"LWNdJX_s\"><b>因此，当一个城市在一个非法定假日的工作日拥堵指数低于0.2时，我们将其这个城市定义为“交通静止“。</b></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"N6oyYwjj\">从2020年5月至今，全国处于“交通静止”状态下的人口占比如下所示：</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-610924d553a607cbe624531d2f74cc6a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"650\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic3.zhimg.com/v2-610924d553a607cbe624531d2f74cc6a_r.jpg\"></figure><p data-pid=\"bKSni_OF\"><b>（上图中，端午节、国庆节等节日的拥堵数据我们使用该城市的临近工作日替代，此时造成的静止均未算在内，但春节由于其特殊性，持续时间较长，我们在图中未将其去除。）</b></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"QC789WN0\">可以看到，在本轮疫情之前，最严重的一次疫情出现在2021年8月的江苏/湖南疫情中，此时有6%-7%的人口处于交通静止的状态。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"3cwZfiWn\"><b>但在本轮疫情中，处于“交通静止“状态的人口已经超过了总人口的20%。</b></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h2><b>▍“静止人口”到底有多少？</b></h2>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"qt_5MDeu\"><b>影院“静默”</b>、<b>消费“静态”</b>、<b>交通“静止”</b>，这三项指标在此次疫情中都超过了20%。当一个地区的<b>三项指标全部满足</b>时，我们便将居住在这里的人口标记为<b>“静止人口”</b>。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"TXhSJ8uk\">从2020年5月到现在，我们的<b>“静止人口”</b>到底有多少？</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-c43c4785aecf81a746bfc9f7032b556d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"650\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic2.zhimg.com/v2-c43c4785aecf81a746bfc9f7032b556d_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"rXO6yQvz\">上图列出了三项指标全部满足的“<b>静止人口</b>“数量。可以看到，在<b>2022年之前，</b>任何一轮疫情中，全国的“静止人口”数量都<b>未曾超过2000万</b>。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"MB9kNVSW\">但在<b>奥密克戎疫情到来后</b>，2022年1月，“静止人口“数量就远超之前的纪录，逼近了5000万，<b>在4月上旬更是超过了1亿，甚至达到了2亿。</b></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"KSVLZm0j\">有一句谚语是：如果它看起来像鸭子、游泳像鸭子、叫声像鸭子，那么它可能就是只鸭子。</p>\n<p data-pid=\"5k-f0mV2\">我们把这句谚语改一改：2亿“静止人口“居住的城市，电影院完全关闭、城市消费低于去年同期50%、明明并非国定假日交通却如春节一般畅行无阻——那么这2亿人居住的城市，可能就是在“<b>静态管理</b>”。</p>\n<p data-pid=\"904l2FBH\">在这2亿人口中，我们还能看到许多极少在读者视野中出现的城市。如果从<b>2020年5月1日开始计算到2022年5月8日</b>，那么一共有<b>30个区县</b>的静止状态<b>超过100天</b>，其中一些具有代表性的区县包括——</p>\n<p data-pid=\"-f6vkdgP\">哈尔滨市的呼兰区，有182天处在静止状态。</p>\n<p data-pid=\"_fB2yMxT\">牡丹江市的爱民区，有162天处在静止状态。</p>\n<p data-pid=\"DTka6B1J\">黑河市的爱辉区，有149天处在静止状态。</p>\n<p data-pid=\"65ul7DYS\">张家口市的崇礼区，有142天处在静止状态。</p>\n<p data-pid=\"7VgQFmWo\">呼和浩特的和林格尔县，有135天处在静止状态。</p>\n<p data-pid=\"X01PIOHL\">忻州市的五台县，有131天处在静止状态。</p>\n<p data-pid=\"jORDKbxD\">安阳市的安阳县，有117天处在静止状态。</p>\n<p data-pid=\"mRh9KY3V\">晋中市的平遥县，有101天处在静止状态。</p>\n<p data-pid=\"2-CxiTTX\">防城港市的东兴县，有100天处在静止状态。</p>\n<p data-pid=\"YM6_YdS0\">……</p>\n<p data-pid=\"yL86vMbs\">这些地区可能并未受到关注，甚至从未发布相关通知，但在各项数据维度中却实实在在地拥有了“<b>静态管理</b>”的所有特征。最近受到媒体关注的东兴县，在“静止状态持续时间“的维度上，甚至只是这个列表的最后一名。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h2><b>▍写在最后</b></h2>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"biiBXd__\">5月6日，在国务院联防联控机制的新闻发布会上，国家卫生健康委疫情应对处置工作领导小组专家组组长梁万年在会上指出，<b>“动态清零”并不意味着是全域静态管理。恰恰相反的是，“动态清零”追求的目标之一就是尽可能避免全域静态管理。</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-7b5a25b4f7c4170ecee7852805381b43_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"593\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-7b5a25b4f7c4170ecee7852805381b43_r.jpg\"></figure><p data-pid=\"Gd47jAQa\"><b><i>（图片来源：央视网视频）</i></b><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"65mYWryY\">目前，随着吉林疫情接近尾声，上海疫情好转，北京疫情受控，我们确实能够看到事实上处在静态管理中的城市数量呈现下降趋势。在本轮疫情结束后，全国将进入常态化核酸的新阶段。为了防止“一例就封城“的现象再度出现，各个大城市都将使用48或者72小时的“核酸护照”来重新进入，或者是尽量接近之前的正常生活。</p>\n<p data-pid=\"9BISWgor\">在4月静止的<b>2亿人口</b>，即便已经错过了春天，也终将在五月，迎来属于他们的，一个全新的初夏。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"j9BOgj4e\"><i>（感谢</i> <a class=\"member_mention\" href=\"https://www.zhihu.com/people/a34de6589fad15a232e10ff60f69270a\" data-hash=\"a34de6589fad15a232e10ff60f69270a\" data-hovercard=\"p$b$a34de6589fad15a232e10ff60f69270a\">@SD下海的杨大夫</a> <i>提供的电影票房等相关数据）</i></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/chenqin?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">chenqin</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/513344126?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"如何拯救黑眼圈和眼袋?","date":"2022-05-12 03:00:42","description":"\n<p data-pid=\"Bf0yCaN0\">这个问题我会！毕竟也是常年熬夜选手，也时常有黑眼圈的困扰，所以私下针对黑眼圈进行了详细的研究，也尝试过不少产品，今天特地来讲讲。</p>\n<p data-pid=\"nYxWybuh\"><b>黑眼圈可以说是很多集美们的噩梦</b>了，一双明眸、精致的大眼睛，如果有黑眼圈，<b>颜值直接摔碎在了路边</b>。所以眼部护理，迫在眉睫，必须立刻、马上动起手来。</p>\n<p data-pid=\"V0pYlU25\">眼部皮肤因为它的特殊性，是最容易出现问题的皮肤，而且一旦问题出现，很难可逆。所以眼部的护理关键在于预防，不是等到问题出现了再来想到修补。这也是为什么我们一直建议大家提早用眼霜的真实原因。</p>\n<h2><b>黑眼圈的描述</b></h2>\n<p data-pid=\"nFyn1_s7\"><b>黑眼圈</b>，也就是我们口中常说的“<b>熊猫眼</b>”，是位于双侧眶下区环形的，呈现<b>青黑色</b>或<b>茶黑色</b>的现象，是较常见的一种眼部问题。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-29651173a7e474299cd67085fdd33144_720w.png?source=b1748391?rss\" data-caption=\"黑眼圈不是病，但得治\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"518\" data-watermark=\"watermark\" data-original-src=\"v2-29651173a7e474299cd67085fdd33144\" data-watermark-src=\"v2-275dc757dd14d91611036badfadd5dc8\" data-private-watermark-src=\"v2-0038adea73bfceea9944fa8d631281fd\"></p>\n<p data-pid=\"uzobmw7p\">黑眼圈原则上说它并不是一种病理学特征，而是由于先天因素或者生活习惯导致的眼部皮肤肤色变化的一种体现。黑眼圈不会影响我们的个体健康，但是它的存在会极大地影响我们的颜值和心情，让我们看上去无精打采、两眼无神。所以退圈，没得商量。</p>\n<p data-pid=\"5HDwFDLK\">既然要退圈，我们首先要搞清楚，到底退哪个圈，又应该如何退？退了以后还会回到原来的圈吗？带着这些问题，我们今天一起来好好聊聊。</p>\n<h2><b>黑眼圈的分类</b></h2>\n<p data-pid=\"4UruODXy\">黑眼圈其实有很多种，根据其形成诱因可简单的分为：<b>色素型</b>、<b>血管型</b>、<b>结构型</b>以及<b>混合型</b>。</p>\n<p><img src=\"https://pica.zhimg.com/v2-a7d77520e78090a3330a82db2cd8431a_720w.png?source=b1748391?rss\" data-caption=\"黑眼圈的分类\" data-size=\"normal\" data-rawwidth=\"331\" data-rawheight=\"256\" data-watermark=\"watermark\" data-original-src=\"v2-a7d77520e78090a3330a82db2cd8431a\" data-watermark-src=\"v2-76aa6b39c4d5b74c05e9c43fbc775168\" data-private-watermark-src=\"v2-b561ce44d1c9bfe607ba9e0c74cc92b2\"></p>\n<p data-pid=\"KJlp9rCf\"><b>色素型：</b>多为<b>黑色、咖啡色</b>。一般是由于眼部皮肤薄、抵御紫外线能力弱而导致的<a href=\"https://www.zhihu.com/search?q=%E8%89%B2%E7%B4%A0%E6%B2%89%E7%9D%80&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2455555267%7D\" class=\"internal\">色素沉着</a>。当然一些环境因素（<i>比如过度日晒、疲劳睡眠不足以及乱用眼部化妆品</i>）则会让此类黑眼圈雪上加霜。<b>这类黑眼圈不仅眼睑部下部有，眼睑上部甚至眼部周围都会有一片黑色的阴影。</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-252a9aecb04d2d88b66074ef3fcb02c0_720w.png?source=b1748391?rss\" data-caption=\"色素型黑眼圈\" data-size=\"normal\" data-rawwidth=\"298\" data-rawheight=\"252\" data-watermark=\"watermark\" data-original-src=\"v2-252a9aecb04d2d88b66074ef3fcb02c0\" data-watermark-src=\"v2-09269e980a53fb2c213cc541f198207c\" data-private-watermark-src=\"v2-6c798a5a7f2a71965e8ff81f9a7c2a6f\"></p>\n<p data-pid=\"Fn6wt4aB\"><b>血管型：多为暗红、深紫色</b>。一般是由于眼部血管循环不通畅导致的，这是最常见的黑眼圈类型，肤色白皙的人尤为明显，而且这类黑眼圈和“熬夜”的关系最大。<b>这类黑眼圈常出现在眼睑内侧。楼主出现的黑眼圈大概率就是血管型的黑眼圈！</b></p>\n<p><img src=\"https://pica.zhimg.com/v2-b2e3d112bed53ae695e51ba43d2dea3d_720w.png?source=b1748391?rss\" data-caption=\"血管型黑眼圈\" data-size=\"normal\" data-rawwidth=\"308\" data-rawheight=\"304\" data-watermark=\"watermark\" data-original-src=\"v2-b2e3d112bed53ae695e51ba43d2dea3d\" data-watermark-src=\"v2-19ac4af5c70546d81729b26fa8bd657f\" data-private-watermark-src=\"v2-662a0014bc8679c727b921aaa57dd9ab\"></p>\n<p data-pid=\"kRJxCmD-\"><b>结构型：多为浅黑色</b>。一般分为先天性和后天性。先天性主要是天生泪槽形成的阴影，后天性则是由于眼部胶原蛋白的流失及眼袋松弛形成的阴影。<b>这类黑眼圈常出现在眼眶内。</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-59d94282cfd49574e4d20410d6b86de7_720w.png?source=b1748391?rss\" data-caption=\"结构型黑眼圈\" data-size=\"normal\" data-rawwidth=\"241\" data-rawheight=\"292\" data-watermark=\"watermark\" data-original-src=\"v2-59d94282cfd49574e4d20410d6b86de7\" data-watermark-src=\"v2-5a9c0385b86e863619f1a6e1e500dde1\" data-private-watermark-src=\"v2-2390f5030027b91cf7beea7dfe341684\"></p>\n<ul><li data-pid=\"9xpalDg_\">\n<b>混合型：</b>以上三种的复合型，可能有两种，也可能三种都有。啥也不说了，我比较心疼你。</li></ul>\n<p data-pid=\"gITIqitz\">当然，我也知道，即便我放了几张不同黑眼圈的典型图片，很多人可能还是搞不清楚自己是哪种黑眼圈，那我这里有一招可以帮大家理性判定一下。</p>\n<h2><b>如何识别不同的黑眼圈</b></h2>\n<p data-pid=\"WgjZpq5G\">要想判断自己属于哪种黑眼圈，其实不难，关键就看这个部位：<b>“眼袋”</b>。通过对自己眼袋的观察，很容易对黑眼圈进行区分。具体做法是：</p>\n<p data-pid=\"1OkbQNdb\">如果你有比较明显的黑眼圈，眼袋比较严重，那么你可以在镜子前面缓慢抬起头，用眼睛的余光观察镜面，如果你在镜子里观察到自己的黑眼圈好像变淡甚至消失了，那你多半可能是<b>结构型黑眼圈</b>（<i>这是因为你抬头的时候，镜面的<a href=\"https://www.zhihu.com/search?q=%E5%8F%8D%E5%B0%84%E5%85%89&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2455555267%7D\" class=\"internal\">反射光</a>会将眼睑照亮，眼部结构造成的黑色阴影会被点亮变淡甚至消失</i>）。</p>\n<p data-pid=\"JpFeQiJ_\">接下来你可以用手按住黑眼圈（<i>注意用力不要过猛，大力出不了奇迹，但可能会出事</i>），然后用手轻轻地、慢慢地向下拉扯，如果观察到黑眼圈颜色暗淡有变化，则可能是<b>血管型黑眼圈</b>（<i>因为如果手指用力适中的话，会按住血管，血流被阻挡住，血管型黑眼圈会变淡。向下拉扯，是因为拉扯会让角质变薄，则有可能让血管型黑眼圈变的更重</i>）。</p>\n<p data-pid=\"juwDZv2G\">那么剩下的一种就是无论怎么拉扯、各个角度观察，黑眼圈都没啥变化，这种可能就是<b>色素型黑眼圈了</b>。当然了，因为个体差异，手法差异，客观判断的差异，并不是每个人都能很好的判定。更重要的是，很多时候，黑眼圈并不是单一的，混合型的黑眼圈本身就很难判断，需要多次尝试才能甄别。</p>\n<p data-pid=\"JvXAbj1b\">说完了黑眼圈的分类以及日常判断手法，那接下来就到今天最重要的环节了---如何退圈，我想大家一定都等不及了，我也憋坏了。</p>\n<h2><b>如何消除黑眼圈</b></h2>\n<h3>\n<b>-</b> <b>色素型黑眼圈</b>\n</h3>\n<p data-pid=\"KDK_G8VP\">色素型黑眼圈因为多半都是年轻的时候没有注意眼部的防晒，造成了黑色素在眼部的堆积，那么要解决它，首先就要切断祸源，<b>平时护理的时候一定要注意眼部防晒</b>。在做好防晒以后，我们再来用一些手段解决眼部黑色素的累积。</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1508032553479356416\"></a><a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1508032659100413953\"></a><p data-pid=\"IvWoP3MV\">比如说可以使用一些含有消除、抑制黑色素成分的眼部产品（<i>在这里比较推荐眼霜</i>），比如说：含有<b><a href=\"https://www.zhihu.com/search?q=%E7%83%9F%E9%85%B0%E8%83%BA&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2455555267%7D\" class=\"internal\">烟酰胺</a></b>、<b>377</b>、<b>光甘草定</b>以及<b>维A醇</b>的眼霜。但要强调的是，因为眼霜护理的核心逻辑在于预防，逆转已经形成的肌肤问题并不适它的专长。所以用眼霜来解决黑眼圈问题，周期比较长（<i>一般需要半年到一年以上</i>），需要大家多点耐心。</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1508032773709819904\"></a><p data-pid=\"WoMEHu9k\">当然如果你需要即时的奏效，那就必须求助医美了。比较推荐的有<b>调Q1064激光</b>、<b><a href=\"https://www.zhihu.com/search?q=%E7%9A%AE%E7%A7%92%E6%BF%80%E5%85%89&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2455555267%7D\" class=\"internal\">皮秒激光</a></b>以及<b>射频类</b>等等。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-212a79f47a6b3b1f23e0726ba612926c_720w.gif?source=b1748391?rss\" data-caption=\"皮秒激光\" data-size=\"normal\" data-rawwidth=\"360\" data-rawheight=\"263\" data-watermark=\"watermark\" data-original-src=\"v2-212a79f47a6b3b1f23e0726ba612926c\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"hVoRPrmF\">这类医美手段的原理大多是通过高能激光照射皮肤，皮肤里面的黑色素细胞会吸收高能激光发热涨破甚至震碎，然后通过免疫系统排出体外，达到消除黑眼圈的目的。但是专业医美建议去专业的机构，找专业的医生帮忙，路边小店就不要玩命了。</p>\n<h3>\n<b>-</b> <b>血管型黑眼圈</b>\n</h3>\n<p data-pid=\"NC-b5aAw\">血管型黑眼圈很多时候和大家的不良作息有关，比如爱熬夜看剧，爱抽烟酗酒。如果想解决这类型的黑眼圈，上面两个祸源必须要先自我斩断。然后我们可以选择一些含有咖啡因、维A醇，乙酰基四肽-5的眼霜来缓解（<i>促进眼周血液的流通</i>）。</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1508033293979619328\"></a><p data-pid=\"tZywZdSK\">如果想要即时的缓解，除了冷敷外（<i>冷敷可临时起到收缩血管作用，暂时缓解黑眼圈</i>），我们也只能求助医美了（<i>医美手段同上</i>）。</p>\n<h3>\n<b>-</b> <b>结构型黑眼圈</b>\n</h3>\n<p data-pid=\"1Tl1EWle\">结构型黑眼圈很多时候都是<b>真皮层的胶原蛋白流失造成</b>的，要想处理这种类型的黑眼圈就必须从真皮层的胶原蛋白着手解决。目前从护肤的手段来看，我们可以选择一些含有<b>维A醇</b>或者<b>多肽</b>的眼霜，来<b>引导真皮层胶原蛋白的合成以及弹性纤维的修复</b>，总体来说，就是抗老的思路。</p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1508033504872603648\"></a><p data-pid=\"9VH8i8Ac\">当然了，结构型黑眼圈还可以用<b>自体脂肪</b>或者<b>玻尿酸填充</b>的方式还解决。它的工作原理是利用自身脂肪组织或者大分子玻尿酸进行眼部结构的填充，垫补由于胶原蛋白缺失造成的组织塌陷。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-4f7332c81dd242200b04c68c59ed0feb_720w.png?source=b1748391?rss\" data-caption=\"自体脂肪填充成功案例\" data-size=\"normal\" data-rawwidth=\"392\" data-rawheight=\"220\" data-watermark=\"watermark\" data-original-src=\"v2-4f7332c81dd242200b04c68c59ed0feb\" data-watermark-src=\"v2-7c053eecc4e40df1d7f7c4a6e717e636\" data-private-watermark-src=\"v2-da43ee5937a0e0264b5183848f53765a\"></p>\n<p data-pid=\"FlBmgHr6\">当然也可以使用<b>眼部热玛吉</b>，通过促进眼部真皮层胶原蛋白的生成来补充眼部胶原蛋白的流失形成的阴影。如果是眼袋松弛导致的结构型黑眼圈还可以通过割眼袋的方式解决。</p>\n<h3><b>-混合型黑眼圈</b></h3>\n<p data-pid=\"8qIB9-hA\">这个问题就比较艰巨了，这边还是<b>建议找个砖家看看。医生最懂你</b>。</p>\n<p data-pid=\"bcGmUjGF\">总体来说，眼部的皮肤非常脆弱、娇嫩，<b>出现问题最早，也最难逆转</b>，要想逆转，金钱的代价也蛮大。所以不如早点护理，延缓问题的发生才是上上之策。</p>\n<p data-pid=\"4kAe_1Da\">另外，要跟大家再三强调的仍然是：防晒。减少局部色素沉积和炎症反应，防晒是必不可少的预防环节。防晒对预防黑眼圈的形成非常非常重要。</p>\n<p data-pid=\"Tf1tSRTN\">看完这篇文章，你对退圈有点感觉没？</p>\n<p data-pid=\"31wsvdVh\"><b>觉得有用的话，点个赞再走呗！如果你有其他护肤问题，也可以下面留言，咱们一起研究研究！</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-7635adaa0364373588ca903bc565c534_720w.gif?source=b1748391?rss\" data-caption=\"点个赞！\" data-size=\"normal\" data-rawwidth=\"350\" data-rawheight=\"350\" data-watermark=\"watermark\" data-original-src=\"v2-7635adaa0364373588ca903bc565c534\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/kang-da-dao-de-kbo-shi-9?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">科学怪人-k博</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/526252172/answer/2481715128?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">42 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/529992474?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">黑眼圈和眼袋怎么去?</a><br><a href=\"http://www.zhihu.com/question/531081221?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">黑眼圈和眼袋太重了啊啊 怎么办？</a><br>\n","link":"http://www.zhihu.com/question/526252172/answer/2481715128?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"使用 Next.js + Hexo 重构我的博客","date":"2022-03-17 16:24:00","description":"\n<p>在咕咕了一整年、只发布了三篇文章（其中两篇还是译文）之后，我决定还是稍微花一点时间好好折腾一下自己的博客，以 React 作为抓手，通过 Next.js 和 Hexo 深度共建，对标 Gatsby，打通静态 HTML 与用户交互之间的垂直领域屏障，实现多维矩阵闭环，为个人博客赋能（咳咳咳），然后水出 2022 年第一篇文章（逃）技术选型：Gatsby vs Next.js我使用 Hexo 驱动博客已经三年之久了，之前写过一个 开源的 Hexo 主题，后来还成为了 Hexo 的 Core Team Member、为 Hexo 贡献了不少代码。Hexo 是一个诞生于 2012 年的、由 Node.j......</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/218492/18/14257/25439/6227858fE1517791d/63119f6e39dc9389.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/\">https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Node.js","date":"2022-01-14 10:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h2>\n<ul>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-nodejs\">安装 Node.js</a></li>\n</ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Node.js 官网 (<a href=\"https://node.js.org/\">https://node.js.org</a>)</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/image-20220114174925675.png\" alt=\"image-20220114174925675\"></p>\n<p>下载 Node.js 安装包（推荐下载 LTS 版本）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175645.png\" alt=\"image-20220114175645642\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175750.png\" alt=\"image-20220114175749822\"></p>\n<p>勾选同意协议，点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175835.png\" alt=\"image-20220114175835742\"></p>\n<p>修改文件安装位置，点击 <code>Next</code>。（也可以不用改）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175929.png\" alt=\"image-20220114175929226\"></p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180010.png\" alt=\"image-20220114180010036\"></p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180044.png\" alt=\"image-20220114180043895\"></p>\n<p>点击 <code>Install</code> 开始安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180108.png\" alt=\"image-20220114180107827\"></p>\n<p>等待安装完成。<img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180122.png\" alt=\"image-20220114180122728\"></p>\n<p>点击 <code>Finish</code> 完成安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180206.png\" alt=\"image-20220114180206024\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>打开 <code>Git Bash</code>.</p>\n<blockquote><p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。<br>或是在开始菜单中找到 Git Bash.</p></blockquote>\n<p>输入 <code>node -v</code> 和 <code>npm -v</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180458.png\" alt=\"image-20220114180458685\"></p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-nodejs/"},{"title":"2022: 新年快乐！","date":"2021-12-31 16:00:00","description":"\n<p>转眼间，2021 年已经过去。这一年非常忙碌，以至于博客一周年的纪念来不及写，许多文章计划停留在了 To Do 里。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%8D%9A%E5%AE%A2\" class=\"headerlink\" title=\"博客\"></a>博客</h2>\n<p>由于 Cloudflare Web Analytics 是在 2021 年 4 月份启用的，再加上后来又将统计代码去除，所以关于访问量的信息不可用。</p>\n<p>截止至 2021 年 12 月 31 日，博客共发布 15 篇文章，其中 2021 年发布 11 篇文章，原创文章 10 篇。</p>\n<p>目前采用 <code>LeanCloud + Waline</code> 的评论方式，自 7 月份被刷评论后将评论权限改为登录（支持 <code>GitHub</code> 登录），还有部分评论在迁移中丢失，实在抱歉。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>博客自 2021 年 1 月 13 日将主题改为 <code>Miracle</code>，这是一款简洁、轻量的单栏 Hexo 主题。</p>\n<p><code>Miralce</code> 目前的版本是 <code>2.0.1</code>，全新的版本去除 jQuery，进一步提升性能。</p>\n<p>GitHub 仓库：<a href=\"https://github.com/hifun-team/hexo-theme-miracle\">https://github.com/hifun-team/hexo-theme-miracle</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%9B%B4%E5%A4%9A\" class=\"headerlink\" title=\"更多\"></a>更多</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">=&gt; ...</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2022/"},{"title":"无垠 2021 年度总结","date":"2021-12-31 08:36:10","description":"\n<p>真是忙碌的一年啊。转眼 2021 已经过去，2022 即将到来。又到了该总结这一年的时候了。</p>\n<h1>统计数据</h1>\n<p>年度总结的第一部分仍然是一些统计数据。以下数据截止 2021 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 29,073 (<span>+0.6%</span>)，年 PV 67,688 (<span>-11.61%</span>)，日均 UV 79.65，平均停留时间 3分34秒 (<span>-13.7%</span>)，平均跳出率 55% (<span>-9.8%</span>)。一年有效文章数 1 (<span>-80%</span>)，新增评论 109 条 (<span>-54.96%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\" alt=\"\" width=\"515\" height=\"620\" class=\"aligncenter size-full wp-image-2537\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog-249x300.jpg 249w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>除了 UV 较去年提高 100 多之外，其他数据全部下滑。主要原因还是因为今年实在太过忙碌，只更新了一篇博客，评论区也没有怎么维护。不过目前已经有两篇新的文章在路上了，希望可以尽快写完吧。</p>\n<h2>个人主页</h2>\n<p>个人页总 UV 3,515 (<span>-18.12%</span>)，总 PV 3,929 (<span>-4.56%</span>)，日均 UV 9.63，平均停留时间 55秒 (<span>-12.7%</span>)。访问的主要来源是知乎和 GitHub。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\" alt=\"\" width=\"515\" height=\"647\" class=\"aligncenter size-full wp-image-2538\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton-239x300.jpg 239w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>仍然是没有更新个人主页的一年，我也没有继续宣传这个页面，统计数据下滑大概是正常的。</p>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 4 次，新增 149 commits (<span>-54.57%</span>)，Star 数增加了 174，现有 788。</p>\n<p>终于，MDx 2.0 发布了。但是因为今年的过于忙碌，MDx 并没有得到足够的维护，版本发布周期也拉得比较长，很多 Bug 没能及时修复。希望明年可以把更多的时间花在维护 MDx 上。无论如何，还是感谢各位对于 MDx 的支持！</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>2021 大事记</h1>\n<p>说起来，2021 真的太多“第一次”了...</p>\n<ul>\n<li>一月：由于电脑电池鼓包，第一次用 iPad 外接屏幕远程桌面到服务器来考期末🌚太痛苦了</li>\n<li>一月：MDx 喜提 600 Stars</li>\n<li>三月：第一次测核酸（真的酸）</li>\n<li>三月：第一次坐上 A350！(B-309W）</li>\n<li>三月：第一次来到英国</li>\n<li>六月：第一次来到伦敦</li>\n<li>六月：第一次去猫咖撸猫🐱</li>\n<li>六月：第一次坐上 B777！(B-2025）</li>\n<li>七月：酒店隔离十四天🌚</li>\n<li>七月：MDx 喜提 700 Stars</li>\n<li>七月：第一次和猫一起住（时刻有猫撸真的爽😆）</li>\n<li>七月：入职<a href=\"https://75.team/\">奇舞团</a>实习</li>\n<li>八月：北京景点怎么这么多</li>\n<li>九月：北京景点怎么还有这么多</li>\n<li>九月：<a href=\"https://flyhigher.top/develop/2160.html\">谈谈 WebAuthn</a> 被 <a href=\"https://weibo.com/1893751011/KyipM3tOM\" rel=\"noopener noreferrer\">w3c中国微博转发</a><del>（虽然并没有人看）</del>\n</li>\n<li>九月：从奇舞团<del>跑路</del>\n</li>\n<li>九月：整了个 Stackoverflow 的复制粘贴键盘<del>，太好用了</del>\n</li>\n<li>十月：终于买了心心念念的 MSFS</li>\n<li>十一月：终于买了一台新相机</li>\n<li>十一月：第一次坐上 A380！(B-6140）</li>\n<li>十二月：第一次来到爱丁堡并和 <a href=\"https://diygod.me/\">@DIYgod</a> 面基</li>\n</ul>\n<section><div class=\"set-images-div\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\" alt=\"和猫一起住的唯一问题就是手机很快会被猫片塞满\" width=\"730\" height=\"1500\" class=\"aligncenter size-full wp-image-2518\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg 730w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-146x300.jpg 146w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-498x1024.jpg 498w\" sizes=\"(max-width: 730px) 100vw, 730px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\" alt=\"看到你在写前端，猫猫很担心你\" width=\"1004\" height=\"1500\" class=\"aligncenter size-full wp-image-2523\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg 1004w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-201x300.jpg 201w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-685x1024.jpg 685w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-768x1147.jpg 768w\" sizes=\"(max-width: 1004px) 100vw, 1004px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\" alt=\"高效开发工具（确信\" width=\"1500\" height=\"1019\" class=\"aligncenter size-full wp-image-2519\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-300x204.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-1024x696.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-768x522.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\" alt=\"和 Ralph 在天坛\" width=\"947\" height=\"1500\" class=\"aligncenter size-full wp-image-2524\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg 947w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-189x300.jpg 189w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-646x1024.jpg 646w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-768x1216.jpg 768w\" sizes=\"(max-width: 947px) 100vw, 947px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\" alt=\"380!\" width=\"1500\" height=\"874\" class=\"aligncenter size-full wp-image-2517\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-300x175.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-1024x597.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-768x447.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a>\n</div>\n<div class=\"set-images-div2\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\" alt=\"到处玩.jpg\" width=\"1500\" height=\"1080\" class=\"aligncenter size-full wp-image-2521\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-300x216.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-1024x737.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-768x553.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\" alt=\"还是到处玩.jpg\" width=\"977\" height=\"1500\" class=\"aligncenter size-full wp-image-2520\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg 977w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-195x300.jpg 195w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-667x1024.jpg 667w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-768x1179.jpg 768w\" sizes=\"(max-width: 977px) 100vw, 977px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\" alt=\"380 上的星空\" width=\"1002\" height=\"1500\" class=\"aligncenter size-full wp-image-2522\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg 1002w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-200x300.jpg 200w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-684x1024.jpg 684w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-768x1150.jpg 768w\" sizes=\"(max-width: 1002px) 100vw, 1002px\"></a>\n</div>\n</section><p><span>点击图片查看描述</span></p>\n<p>对了，对于可爱的猫猫们，我整了一个 Telegram 贴纸包，你可以在这里获取：<a href=\"https://telegram.me/addstickers/huanAndDan\">https://telegram.me/addstickers/huanAndDan</a>。</p>\n<h1>跨年红包</h1>\n<p>今年的解题之旅，从下面这张图片开始：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\" alt=\"\" width=\"1510\" height=\"1250\" class=\"aligncenter size-full wp-image-2556\"></a>\n<p>不过，鉴于今年的题目较以往对于认真解题的人更难，我还准备了隐藏红包，在解题中收集线索即可发现隐藏红包。共有 20 个普通红包和 10 个隐藏红包。</p>\n<p>解题计划持续到东八区 2022.02.03 23:59:59 或红包被领完为止，之后我会发布题解。不过由于去年情况混乱，今年在解题过程中我一旦发现有不正常的现象就会立即停止活动。Anyway，新年快乐！祝玩得开心。</p>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报用到了 PS 和 Adobe 家的新玩具 Dimension。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\" alt=\"\" width=\"707\" height=\"1000\" class=\"aligncenter size-full wp-image-2547\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg 1414w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-212x300.jpg 212w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-724x1024.jpg 724w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-768x1086.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-1086x1536.jpg 1086w\" sizes=\"(max-width: 707px) 100vw, 707px\"></a>\n<p>那么祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2507.html"},{"title":"[译] 不，Web3 不是去中心化","date":"2021-12-14 14:01:00","description":"加密货币社区对元宇宙和 Web3 的狂热仍在继续，大量投资人和开发者前仆后继加入其中。但是，Web3 真的能实现支持者们的种种愿景吗？亦或是另一个镜中月、水中花？也许让历史照进现实，能给我们答案。<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/123139/11/24965/54827/62215eedE5e3da14a/80c24408e97057dd.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/web3-is-not-decentralization/\">https://blog.skk.moe/post/web3-is-not-decentralization/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/web3-is-not-decentralization/"},{"title":"[译] 捍卫自由的互联网，对 Web3 说不","date":"2021-12-12 13:40:00","description":"作为一个充满泡沫和噱头的新概念，Web3 和元宇宙在区块链的社区中掀起了一波浪潮。鼓吹者坚信 Web3 就是互联网的未来、不惜砸下大把的金钱和精力、希望能在未来中捞一杯羹；而大部分人保持观望的态度。是时候来一点 Web3 的反对意见了。<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/87908/13/23797/13415/622032afE3a2f9e9f/95c01e98cd4a707a.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/\">https://blog.skk.moe/post/keep-web-free-say-no-to-web3/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/"},{"title":"2021 年 JavaScript Promise 性能对比","date":"2021-12-07 08:19:00","description":"\n<p>我们正生活在一个「Any application that can be written in JavaScript, will eventually be written in JavaScript」的时代。作为一门兼具动态性和简单性的语言，JavaScript 已经占领了客户端、服务端，甚至在机器学习中也占据一席之地；不可避免的，异步执行也逐渐成为这门语言不可缺少的一部分。TL; DR Bluebird 依然是速度最快、内存占用最少的 Promise 实现 Runtime 的 async / await 实现越来越快、顺序执行的性能已经超过 Native Promise，占用的内存也更少 对于平行并发执行的 Promise，Bluebird 的性能依然一骑绝尘。......</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157404/28/28495/143414/622032b2Ef7b495fd/6a9bd02e79392c9d.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/promise-performance-benchmark/\">https://blog.skk.moe/post/promise-performance-benchmark/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/promise-performance-benchmark/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Git","date":"2021-11-12 13:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h3>\n<ul><li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li></ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Git 官网 (<a href=\"https://git-scm.com/\">https://git-scm.com</a>).</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112204849.png\"></p>\n<p>点击页面中的 <code>Download For Windows</code> 下载 Windows 版本。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211507.png\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>，同意协议。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211528.png\"></p>\n<p>修改程序安装位置，点击 <code>Next</code>（直接装在 C 盘也不是不行）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211604.png\"></p>\n<p>组件选项，可选桌面快捷键、右键菜单、LFS 支持、自动检查更新等。</p>\n<p>点击 <code>Next</code> 进入下一步。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211609.png\"></p>\n<p>开始菜单文件夹名，保持默认就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211613.png\"></p>\n<p>默认编辑器，保持 Vim 就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211616.png\"></p>\n<p>环境变量，选择第 2 个，点击 <code>Next</code>。</p>\n<blockquote><p>如果选择第 1 个，则只能在 Git Bash 中使用，可能会出现问题</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211619.png\"></p>\n<p>剩下的都可以保持默认，一路 Next，然后点击 <code>Install</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211622.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211624.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211627.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211630.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211633.png\"></p>\n<p>等待安装完毕。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。</p>\n<p>（或是在开始菜单中找到 Git Bash）</p>\n<p>输入 <code>git --version</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/7ec315b7764cc.png\"></p>\n<p>大功告成！</p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-git/"},{"title":"前端时间国际化 101","date":"2021-10-14 15:58:23","description":"\n<blockquote>\n<p>时间只是幻觉。</p>\n<footer>—— 阿尔伯特·爱因斯坦</footer>\n</blockquote>\n<p>最近在开发一个需要完善国际化方案的前端项目，在处理时间国际化的时候遇到了一些问题。于是花了一些时间研究，有了这篇文章。不过由于网上关于 JavaScript 中 <code>Date</code> 对象的坑的文章已经一抓一大把了，<strong>因此这篇文章不是 JavaScript 中 <code>Date</code> 对象的使用指南，而是只专注于前端时间国际化。</strong></p>\n<h1>从时区说起</h1>\n<p>要想处理时间，UTC 是一个绕不开的名字。协调世界时（Coordinated Universal Time）是目前通用的世界时间标准，计时基于原子钟，但并不等于 TAI（国际原子时）。TAI 不计算闰秒，但 UTC 会不定期插入闰秒，因此 UTC 与 TAI 的差异正在不断扩大。UTC 也接近于 GMT（格林威治标准时间），但不完全等同。可能很多人都发现近几年 GMT 已经越来越少出现了，这是因为 GMT 计时基于地球自转，由于地球自转的不规则性且正在逐渐变慢，目前已经基本被 UTC 所取代了。</p>\n<blockquote><p>JavaScript 的 <code>Date</code> 实现不处理闰秒。实际上，由于闰秒增加的不可预测性，Unix/POSIX 时间戳完全不考虑闰秒。在闰秒发生时，Unix 时间戳会重复一秒。这也意味着，一个时间戳对应两个时间点是有可能发生的。</p></blockquote>\n<p>由于 UTC 是标准的，我们有时会使用 UTC+/-N 的方式表达一个时区。这很容易理解，但并不准确。中国通行的 <code>Asia/Shanghai</code> 时区<strong>大部分</strong>情况下可以用 UTC+8 表示，但英国通行的 <code>Europe/London</code> 时区并不能用一个 UTC+N 的方式表示——由于夏令时制度，<code>Europe/London</code> 在夏天等于 UTC+1，在冬天等于 UTC/GMT。</p>\n<blockquote><p>一个时区与 UTC 的偏移并不一定是整小时。如 <code>Asia/Yangon</code> 当前为 UTC+6:30，而 <code>Australia/Eucla</code> 目前拥有奇妙的 UTC+8:45 的偏移。</p></blockquote>\n<p>夏令时的存在表明<strong>时间的表示不是连续的</strong>，时区之间的时差也并不是固定的，我们并不能用固定时差来处理时间，这很容易意识到。但一个不容易意识到的点是，时区还包含了其历史变更信息。中国目前不实行夏令时制度，那我们就可以放心用 UTC+8 来表示中国的时区了吗？你可能已经注意到了上一段中描述 <code>Asia/Shanghai</code> 时区时我使用了<strong>大部分</strong>一词。<code>Asia/Shanghai</code> 时区在历史上实行过夏令时，因此 <code>Asia/Shanghai</code> 在部分时间段可以使用 UTC+9 来表示。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1988-04-18 00:00:00')\r\n// Mon Apr 18 1988 00:00:00 GMT+0900 (中国夏令时间)</pre>\n<blockquote><p>夏令时已经够混乱了，但它实际上比你想象得更混乱——部分穆斯林国家一年有四次夏令时切换（进入斋月时夏令时会暂时取消），还有一些国家使用混沌的 15/30 分钟夏令时而非通常的一小时。</p></blockquote>\n<blockquote><p><strong>不要总是基于 <code>00:00</code> 来判断一天的开始。</strong>部分国家使用 0:00-1:00 切换夏令时，这意味着 23:59 的下一分钟有可能是 1:00。</p></blockquote>\n<p>事实上，虽然一天只有 24 个小时，但当前（2021.10）正在使用的时区有超过 300 个。<strong>每一个时区都包含了其特定的历史。</strong>虽然有些时区在现在看起来是一致的，但它们都包含了不同的历史。时区也会创造新的历史。由于政治、经济或其他原因，一些时区会调整它们与 UTC 的偏差（萨摩亚曾经从 UTC-10 切换到 UTC+14，导致该国 2011.12.30 整一天都消失了），或是启用/取消夏令时，甚至有可能导致一个时区重新划分为两个。因此，为了正确处理各个时区，我们需要一个数据库来存放时区变更信息。还好，已经有人帮我们做了这些工作。目前大多数 *nix 系统和大量开源项目都在使用 <a href=\"https://www.iana.org/time-zones\" rel=\"noopener\">IANA 维护的时区数据库</a>（IANA TZ Database），其中包含了自 Unix 时间戳 0 以来各时区的变更信息。当然这一数据库也包含了大量 Unix 时间戳 0 之前的时区变更信息，但并不能保证这些信息的准确性。IANA 时区数据库会定期更新，以反映新的时区变更和新发现的历史史实导致的时区历史变更。</p>\n<blockquote><p>Windows 不使用 IANA 时区数据库。微软为 Windows 自己维护了一套<a href=\"https://docs.microsoft.com/zh-cn/troubleshoot/windows-client/system-management-components/daylight-saving-time-help-support\" rel=\"noopener\">时区数据库</a>，这有时会导致在一个系统上合法的时间在另一系统上不合法。</p></blockquote>\n<p>既然我们不能使用 UTC 偏移来表示一个时区，那就只能为每个时区定义一个标准名称。通常地，我们使用 <code>/</code> 来命名一个时区。这里的城市一般为该时区中人口最多的城市。于是，我们可以将中国的通行时区表示为 <code>Asia/Shanghai</code>。也有一些时区有自己的别名，如太平洋标准时间 <code>PST</code> 和协调世界时 <code>UTC</code>。</p>\n<blockquote><p>时区名称使用城市而非国家，是由于国家的变动通常比城市的变动要快得多。</p></blockquote>\n<blockquote><p><strong>城市不是时区的最小单位。</strong>有很多城市同时处于多个时区，甚至澳大利亚<a href=\"https://en.wikipedia.org/wiki/Gold_Coast_Airport\" rel=\"noopener\">有一个机场</a>的跑道两端处于不同的时区。</p></blockquote>\n<h1>处理时区困难重重</h1>\n<p>几个月前的一天，<a href=\"https://milkice.me/\" rel=\"noopener\">奶冰</a>在他的 Telegram 频道里发了这样的一条消息：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\"><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\" alt=\"奶冰频道的消息\" width=\"500\" class=\"aligncenter size-medium wp-image-2490\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg 800w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-244x300.jpg 244w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-768x944.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\"></a>\n<p>你想的没错，这个问题正是由时区与 UTC 偏移的不同造成的。<code>Asia/Shanghai</code> 时区在 1940 年前后和 1986 年前后曾实行过夏令时，<strong>而夏令时的切换会导致一小时的出现和消失。</strong>具体来说，启用夏令时当天会有一个小时消失，如 2021.3.28 英国启用夏令时，1:00 直接跳到 3:00，导致 <code>2021-03-28 01:30:00</code> 在 <code>Europe/London</code> 时区中是不合法的；取消夏令时当天又会有一个小时重复，如 2021.10.31 英国取消夏令时，2:00 会重新跳回 1:00 一次，导致 <code>2021-10-31 01:30:00</code> 在 <code>Europe/London</code> 时区中对应了两个时间点。而在奶冰的例子中，<code>1988-04-10 00:46:50</code> 正好处于因夏令时启用而消失的一小时中，因此系统会认为此时间字符串不合法而拒绝解析。</p>\n<blockquote><p>你可能会注意到在历史上 1988.4.10 这一天 <code>Asia/Shanghai</code> 时区实际上是去掉了 1:00-2:00 这一小时而不是 0:00-1:00。上文问题更深层次的原因是，在 IANA TZDB 2018a 及更早版本中，IANA 因缺乏历史资料而设置了错误的夏令时规则，规则设定了夏令时交界于 0:00-1:00 从而导致上文问题发生。而随后社区<a href=\"http://mm.icann.org/pipermail/tz/2018-August/026760.html\" rel=\"noopener\">发现了更准确的史实</a>，因此 IANA 更新了数据库。上文的问题在更新了系统的时区数据库后便解决了。</p></blockquote>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\" alt=\"IANA TZDB 2018a 及之前版本的错误数据\" width=\"1750\" height=\"595\" class=\"aligncenter size-full wp-image-2491\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg 1750w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-300x102.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1024x348.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-768x261.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1536x522.jpg 1536w\" sizes=\"(max-width: 1750px) 100vw, 1750px\"></a>\n<p><span>IANA TZDB 2018a 及之前版本的错误数据</span></p>\n<p>再来考虑另一种情况。你的应用的某位巴西用户在 2018 年保存了一个未来时间 <code>2022-01-15 12:00</code>（按当时的规律那应该是个夏令时时间），不巧那时候你的应用是以格式化的时间字符串形式保存的时间。之后你发现巴西已经于 2019 年 4 月宣布彻底取消夏令时制度，那么 <code>2022-01-15 12:00</code> 这个时间对应的 Unix 时间戳发生了变化，变得不再准确，要正确处理这一字符串就需要参考这一字符串生成的时间（或生成时计算的 UTC 偏移）来做不同的处理。<strong>因此，应用从一开始就应该避免使用字符串来传输、存储时间，而是使用 Unix 时间戳。</strong>如果不得不使用字符串存储时间，请尽可能：</p>\n<ul>\n<li>使用 UTC 描述时间，你永远不会知道本地时区在未来会发生什么</li>\n<li>如果需要以当地时间描述时间，一定带上当前 UTC 偏移</li>\n</ul>\n<p>时区历史带来的问题往往意想不到而且远比想象得多。实际上时区历史数据非常详细而繁多且跨设备不一致，并没有简单而统一的处理方法。在需要严谨处理时区时可能需要在应用程序中内嵌一套各端统一的时区数据库，但这样的方案放在前端又会带来不少问题：</p>\n<ul>\n<li>体积过大。moment.js 曾经设计过<a href=\"https://github.com/moment/moment-timezone/blob/develop/data/packed/2021a.json\" rel=\"noopener\">一种简洁的 TZDB 表示</a>，但尽管已经尽可能压缩整个文件仍然达到了 180+KB。在性能优先的 Web 应用中这是不可接受的</li>\n<li>需要持续更新。时区数据一直在变动，需要在时区数据更新时尽快更新应用内的时区数据，这带来了额外的维护成本</li>\n</ul>\n<p>ES6 为我们带来了 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl\" rel=\"noopener\"><code>Intl</code> 命名空间</a>。在这里，JavaScript 运行时提供了不少时间相关的国际化能力。因此，在不使用额外数据的情况下准确处理时区是可能的，但这并不完美：</p>\n<ul>\n<li>各端不统一。浏览器提供的时区数据受浏览器版本、系统版本等可能变化，最新的时区更新可能无法快速反映到所有设备上</li>\n<li>实现复杂。<code>JavaScript</code> 中 <code>Date</code> 对象的不良设计导致实现完善的时区处理并不容易，且 <code>Intl</code> 命名空间下的对象实例化性能开销较大，需要额外优化</li>\n</ul>\n<blockquote><p><code>Intl</code> 命名空间下还有很多实用的国际化相关方法，值得我们另开一篇文章来讲讲了。</p></blockquote>\n<p>在真实开发中，这需要取舍。目前主流的 JavaScript 时间处理库都已转向浏览器内置方法，并在需要时通过 Polyfill 保证跨端一致性。在这篇文章中，我们将尝试在不使用第三方库的情况下实现基本的时间国际化处理。此外，还有一些诸如需要使用 Unix 时间戳才能正确地在各端交换时间等细节需要注意。</p>\n<h1>时区转换</h1>\n<p>JavaScript 中的 <code>Date</code> 并不是不包含时区信息——实际上，<code>Date</code> 对象表示的一定是当前时区。通过尝试：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1970-01-01T00:00:00Z')\r\n// Thu Jan 01 1970 08:00:00 GMT+0800 (中国标准时间)</pre>\n<p>就可以知道，JavaScript 运行时其实知道当前时区，并会在需要的时候将其他时区的时间转换为当前时区的时间。那么，如何将本地时间转换为其他时区的时间呢？从 <code>Date</code> 的角度看，这并不行，因为我们无法设置一个 <code>Date</code> 对象的时区。但我们可以“投机取巧”：将 <code>Date</code> 对象的时间加上/减去对应的时差，尽管 <code>Date</code> 对象仍然认为自己在本地时区，但这样不就可以正确显示了嘛！但我们会碰到上文提到的问题：时区之间的时间差并不固定，在没有额外数据的情况下很难正确计算。</p>\n<p>还好，ES6 基于 <code>Intl</code> 命名空间扩展了 <code>Date.prototype.toLocaleString()</code> 方法，使其可以接受时区参数并按指定时区格式化时间。如果你在搜索引擎中搜索如何使用 JavaScript 转换时区，你大概率会在 StackOverflow 上找到类似这样的答案：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const convertTimeZone = (date, timeZone) =&gt; {\r\n    return new Date(date.toLocaleString('en-US', { timeZone }))\r\n}\r\n\r\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\r\nconvertTimeZone(now, 'Europe/London') // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<p>很好理解，我们使用 <code>en-US</code> 的区域设置要求 JavaScript 运行时以我们指定的时区格式化时间，再将时间字符串重新解析为时间对象。这里的 <code>timeZone</code> 就是诸如 <code>Asia/Shanghai</code> 等的 IANA TZDB 时区名称。这个字符串确实需要自己提供，但这就是我们唯一需要自己准备的数据了！只要提供了时区名称，浏览器就会自动计算正确的时间，无需我们自行计算。</p>\n<blockquote><p>对于时区名称，你可以考虑使用 <a href=\"https://github.com/vvo/tzdb/\" rel=\"noopener\">@vvo/tzdb</a>。这是一个声称为自动更新的 IANA TZDB 的 JSON 导出，并已被数个大型项目使用。你可以从这个包中导出所有时区名称。</p></blockquote>\n<p>这个方法看起来还不错，对吧？但实际上，它有两个问题：</p>\n<ul>\n<li>指定了区域设置和时区的 <code>toLocaleString()</code> 实际上每次调用都会在 JavaScript 运行时中创建新的 <code>Intl.DateTimeFormat</code> 对象（在后文详述），而后者会带来昂贵的性能开销（在 Node 14 中，实例化一次会在 V8 中增加内存使用约 46.3Kb。但这是符合预期的，详见 <a href=\"https://bugs.chromium.org/p/v8/issues/detail?id=6528\" rel=\"noopener\">V8 Issue</a>）。因此，在密集调用的情况下需要考虑计算并缓存时差，并在一定时间后或需要时进行更新</li>\n<li>使用 <code>toLocaleString()</code> 并使用 <code>en-US</code> 区域设置格式化的默认时间格式类似于 <code>10/13/2021, 1:00:00 AM</code>。这可以被大部分浏览器正确解析，<strong>但这是不规范的，不同浏览器有可能产生不同结果。</strong>你也可以自行配置格式（同下文的 <code>Intl.DateTimeFormat</code>），但仍然无法构造出规范的字符串</li>\n</ul>\n<p>因此，更佳的方案是，我们需要建立一个可反复使用的格式化器以避免重复创建 <code>Intl.DateTimeFormat</code> 带来的额外开销，并需要手动构造出符合规范的时间字符串，并将其重新解析为 <code>Date</code> 对象。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const timeZoneConverter = (timeZone) =&gt; {\r\n    // 新建 DateTimeFormat 对象以供对同一目标时区重用\r\n    // 由于时区属性必须在创建 DateTimeFormat 对象时指定，我们只能为同一时区重用格式化器\r\n    const formatter = new Intl.DateTimeFormat('zh-CN', {\r\n        year: 'numeric',\r\n        month: '2-digit',\r\n        day: '2-digit',\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n        second: '2-digit',\r\n        hour12: false,\r\n        timeZone\r\n    })\r\n    return {\r\n        // 提供 conver 方法以将提供的 Date 对象转换为指定时区\r\n        convert (date) {\r\n            // zh-CN 的区域设置会返回类似 1970/01/01 00:00:00 的字符串\r\n            // 替换字符即可构造出类似 1970-01-01T00:00:00 的 ISO 8601 标准格式时间字符串并被正确解析\r\n            return new Date(formatter.format(date).replace(/\\//g, '-').replace(' ', 'T').trim())\r\n        }\r\n    }\r\n}\r\n\r\nconst toLondonTime = timeZoneConverter('Europe/London') // 对于同一时区，此对象可重用\r\n\r\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\r\ntoLondonTime.convert(now) // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<blockquote><p>目前 <code>zh-CN</code> 的区域设置会产生类似 <code>1970/01/01 00:00:00</code> 的格式化字符串。这一格式目前跨端一致，但由于规范没有指定时间格式，<strong>这个格式在未来有可能变更。</strong>更好的方案是使用 <code>formatToParts()</code> 方法（在后文详述）获取时间字符串的各部分并手动拼接出标准格式的字符串，但在这个例子中直接 <code>replace</code> 拥有更好的性能。</p></blockquote>\n<p>现在，尝试反复转换时间至同一时区 1000 次，耗时从 <code>toLocaleString()</code> 1.5 秒降低到了 0.04 秒。尽管代码长了点，但这次重写在最好的情况下为我们带来了超过 20 倍的性能提升。</p>\n<p>需要注意的是，虽然这看起来就算最终方案了，但这个方案依然不完美。主要有以下两个问题：</p>\n<ul>\n<li>在需要密集转换为不同时区时，由于无法重用格式化器，性能依然较差且难以进一步优化</li>\n<li>由于 <code>Intl.DateTimeFormat</code> 不支持格式化毫秒，在格式化字符串的过程中毫秒会丢失，导致最终结果可能会与期望结果产生最高 999ms 的误差，需要额外处理。比如需要计算时差时，我们可能需要这么写：\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const calcTimeDiff = (date, converter) =&gt; {\r\n    const secDate = date - date.getMilliseconds() // 去掉毫秒，避免转换前后精度差异\r\n    return converter.convert(new Date(secDate), tzName) - secDate\r\n}\r\n\r\ncalcTimeDiff(new Date(), timeZoneConverter('Europe/London')) // -25200000</pre>\n</li>\n</ul>\n<p>无论如何，在折腾一番后我们还是把时区正确转换了。接下来准备格式化时间字符串了吗？不过在此之前，我们得先来聊聊语言、文字和区域。</p>\n<h1>语言文字区域傻傻分不清</h1>\n<blockquote><p>如何在计算机中表示中文？</p></blockquote>\n<p>“这不简单，”你可能会说，“用 <code>zh</code> 啊。”</p>\n<blockquote><p>那简体中文呢？</p></blockquote>\n<p>“<code>zh-CN</code>。”你或许会说出这个答案。</p>\n<blockquote><p>那用于新加坡的简体中文和用于中国大陆的简体中文该如何区分呢？</p></blockquote>\n<p>嗯……好问题。</p>\n<p>要能正确区分不同的简体中文，我们还得先回到定义上。实际上，“国际化”并不只是语言的翻译而已，国际化包含的是一整套对于各个<strong>区域</strong>的本地化方案。要准确表示一个国际化方案，我们实际至少需要确定三个属性：语言（Language）、文字（Script）和区域（Locale）。</p>\n<ul>\n<li>\n<strong>语言</strong>通常指的是<strong>声音语言</strong>。不同的语言都有一套自己的发音规则，很难互通。如中文和英语都属于语言</li>\n<li>\n<strong>文字</strong>对应的是某个语言的书写方式，同样的语言可能会有多种书写方案。如中文主要有简体和繁体两种书写方案</li>\n<li>\n<strong>区域</strong>指国际化面向的地区，相同的语言和文字，在不同地区也有可能会有不同的使用习惯。如新加坡和中国大陆都使用简体中文，但两地的用词习惯等有些许差异</li>\n</ul>\n<p>只有确定了这三个属性，我们才能正确定义一个国际化方案（或者说<strong>区域设置</strong>）。当然，还有很多其他属性可以更准确的表达某个区域设置，但通常有语言、文字和区域就已经足够了。</p>\n<p>于是，基于 <a href=\"https://tools.ietf.org/rfc/bcp/bcp47.txt\" rel=\"noopener\">BCP 47</a>，我们可以知道：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN = 中文普通话-简体-中国大陆\r\ncmn-Hans-SG = 中文普通话-简体-新加坡\r\ncmn-Hant-TW = 中文普通话-繁体-台湾\r\nyue-Hant-HK = 中文粤语-繁体-香港</pre>\n<p>等等，这都是啥？还有 BCP 47 又是啥？BCP 是 IETF 发布的“最佳当前实践”文档，而 BCP 47 是一些国际化相关的 ISO 和备忘录的集合，也是目前事实上由 HTML 和 ECMAScript 所使用的表达区域设置的标准。BCP 47 定义的区域设置标签实际上比较复杂，但对于大部分简单使用情况，上文示例中的格式已经完全够用了。简单来说，<strong>要表达一个区域设置，我们会使用 <code>语言[-文字][-区域]</code> 的格式，而文字和区域都是可选的。</strong>而对于每个部分的具体代码，BCP 47 也有做具体定义。其中：</p>\n<ul>\n<li>语言使用 ISO 639-1 定义的两位字母代码（如中文为 <code>zh</code>，英文为 <code>en</code>）或 <a href=\"https://iso639-3.sil.org/code_tables/639/data\" rel=\"noopener\">ISO 639-2/3</a> 定义的三位字母代码（如中文普通话为 <code>cmn</code>，英文为 <code>eng</code>），通常小写</li>\n<li>文字使用 <a href=\"https://unicode.org/iso15924/iso15924-codes.html\" rel=\"noopener\">ISO 15924</a> 定义的四位字母代码，通常首字母大写。如简体中文是 <code>Hans</code>，繁体中文是 <code>Hant</code>\n</li>\n<li>区域通常使用 <a href=\"https://www.iso.org/iso-3166-country-codes.html\" rel=\"noopener\">ISO 3166-1</a> 定义的两位字母代码，通常大写，如中国大陆为 <code>CN</code>，英国为 <code>GB</code>\n</li>\n</ul>\n<blockquote><p>ISO 639-1/2/3 的关系实际是：ISO 639-1 是最早制定的规范，使用两位字母表示语言，但语言数量之多并不能只用两位代码表示。因此后来修订了 ISO 639-2 和 3，使用三位字母表示了更多语言。通常 639-1 代码和 ISO-2/3 代码是一对多的关系。如中文 <code>zh</code> 其实是中文普通话 <code>cmn</code> 的宏语言（macrolanguage），同样使用 <code>zh</code> 为宏语言的语言还有 <code>wuu</code>（中文吴语）、<code>hak</code>（中文客家话）、<code>yue</code>（中文粤语）等数十种。<strong>从规范上我们现在应该使用 ISO 639-2/3 代码来替代 ISO 639-1 代码了</strong>，但由于历史阻力和真实需求中分类无需如此细致等原因，<strong>使用 ISO 639-1 指定语言仍然非常常见而且完全可以接受。</strong>此外，特别地，我们在 ISO 639-3 中定义未指明的语言为 <code>und</code>。</p></blockquote>\n<p>因此，对于这一节开头的两个问题，在 BCP 47 中正确答案其实是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">zh = 中文\r\ncmn = 中文普通话\r\n\r\nzh-Hans = 中文-简体\r\ncmn-Hans = 中文普通话-简体</pre>\n<p>而 <code>zh-CN</code> 实际是指在中国大陆使用的中文，当然也包含在中国大陆使用的繁体中文。<strong>不过，由于大部分情况下一个区域只会通用一种文字，很多情况下我们可以忽略文字这一项</strong>，即使用 <code>zh-CN</code>（或者 <code>cmn-CN</code>）来表示中国大陆的简体中文普通话——毕竟在大部分业务中在中国大陆使用繁体和非普通话的情况非常少。</p>\n<blockquote><p>事实上，类似 <code>zh-Hans</code> 和 <code>zh-Hant</code> 开头的区域设置名称已经被标记为 <code>redundant 废弃</code>，因此尽可能只使用 <code>zh-CN</code> 或者 <code>cmn-Hans-CN</code> 这样的区域设置名称。所有区域设置名称的列表可以在 <a href=\"https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry\" rel=\"noopener\">IANA</a> 找到。</p></blockquote>\n<p>现在我们可以准确定义一个区域设置了。不过我们还有一些小小的需求。比如我们想在 <code>cmn-Hans-CN</code> 的区域设置中使用农历来表示日期，但显然我们上文定义的表示方法并不能表达这一需求。好在，Unicode 为 BCP 47 提供了 u 扩展。在区域设置名称后面加上 <code>-u-[选项]</code> 就可以表达更细致的变体了。所以我们有：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN-u-ca-chinese = 中文普通话-简体-中国大陆-u-日历-中国农历\r\njpn-Jpan-JP-u-ca-japanese = 日语-日文汉字/平假名/片假名-日本-u-日历-日本日历\r\ncmn-Hans-CN-u-nu-hansfin = 中文普通话-简体-中国大陆-u-数字-简体大写数字</pre>\n<p>u 扩展的具体可选项可以在 <a href=\"https://www.unicode.org/reports/tr35/tr35-21.html#Unicode_locale_identifier\" rel=\"noopener\">Unicode 网站</a>上找到。而多个 u 扩展还可以连接——于是我们甚至可以写出 <code>cmn-Hans-CN-u-ca-chinese-nu-hansfin</code> 这种丧心病狂的区域设置名称。当然，相信你现在已经可以看懂这个区域设置的意思了。</p>\n<blockquote><p>不同地区可能会有不同的日历使用习惯，如中国有使用农历的需求，泰国有使用佛历的需求，我们可以通过 u 扩展指定不同的日历。不过，大部分情况下我们会使用标准的 ISO 8601 日历（gregory），JavaScript 的 <code>Date</code> 对象也只支持这种日历。</p></blockquote>\n<blockquote><p>你可以使用 <a href=\"https://r12a.github.io/app-subtags/\" rel=\"noopener\">BCP47 language subtag lookup</a> 工具快速检查你编写的 BCP 47 区域标签是否规范。</p></blockquote>\n<p>终于我们可以正确表达一个完美符合我们需求的区域设置了。接下来，让我们开始格式化时间吧。</p>\n<h1>格式化时间</h1>\n<p>这题我会！</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const formatDate(date) =&gt; {\r\n    return `${date.getFullYear()}-${`${date.getMonth() + 1}`.padStart(2, '0')}-${`${date.getDate()}`.padStart(2, '0')} ${`${date.getHours()}`.padStart(2, '0')}:${`${date.getMinutes()}`.padStart(2, '0')}:${`${date.getSeconds()}`.padStart(2, '0')}`\r\n}\r\n\r\nformatDate(new Date()) // 2021-10-13 01:00:00</pre>\n<p>就完事了……吗？先不论这样的格式化代码难以阅读，尽管上文这样的日期格式国际通用，<strong>但并非所有区域都习惯于这样的日期表示方法。</strong>比如英语国家/地区在很多时候习惯在日期中加入星期，而阿拉伯语国家/地区在部分情况下习惯使用阿拉伯语数字（而非常用的阿拉伯-印度数字）；再比如美式英语国家/地区习惯月-日-年的日期表示法，而英式英语国家/地区习惯日-月-年的日期表示法……不同区域在时间表示格式习惯上的差异是巨大的，<strong>我们很难通过一个简单的方法来正确地、国际化地格式化一个日期。</strong></p>\n<p>好在 ES6 早就为我们铺平了道路。还记得上文提到过的 <code>Intl.DateTimeFormat</code> 吗？我们通过它来实例化一个日期格式化器并用进行日期的国际化。</p>\n<p>直接来看例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const options = {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    weekday: 'long'\r\n}\r\nconst now = new Date()\r\n\r\nconst enUSFormatter = new Intl.DateTimeFormat('en-US', options)\r\n\r\nconst zhCNFormatter = new Intl.DateTimeFormat('zh-CN', options)\r\nconst zhCNAltFormatter = new Intl.DateTimeFormat('zh-CN-u-ca-chinese', options)\r\nconst zhCNAlt2Formatter = new Intl.DateTimeFormat('zh-CN-u-ca-roc-nu-hansfin', options)\r\n\r\nconst jaFormatter = new Intl.DateTimeFormat('ja', options)\r\nconst jaAltFormatter = new Intl.DateTimeFormat('ja-JP-u-ca-japanese', options)\r\n\r\nconst arEGFormatter = new Intl.DateTimeFormat('ar-EG', options)\r\n\r\nenUSFormatter.format(now) // Wednesday, Oct 13, 2021\r\n\r\nzhCNFormatter.format(now) // 2021年10月13日星期三\r\nzhCNAltFormatter.format(now) // 2021辛丑年九月8星期三\r\nzhCNAlt2Formatter.format(now) // 民国壹佰壹拾年拾月拾叁日星期三\r\n\r\njaFormatter.format(now) // 2021年10月13日水曜日\r\njaAltFormatter.format(now) // 令和3年10月13日水曜日\r\n\r\narEGFormatter.format(now) // الأربعاء، ١٣ أكتوبر ٢٠٢١</pre>\n<blockquote><p>在这里我们使用 ISO 639-1 代码来表示语言，是由于事实上 ISO 639-1 代码更加常见与通用。在大部分支持 <code>Intl.DateTimeFormat</code> 的 JavaScript 运行时中我们也可以使用 ISO 639-2/3 代码来表示语言（但实际会 fallback 至对应的 ISO 639-1 代码）。</p></blockquote>\n<blockquote><p>你也可以通过在 <code>options</code> 中设置 <code>calendar</code> 属性和 <code>numberingSystem</code> 属性来替换区域设置名称中对 u 扩展的使用。这也是推荐方式。</p></blockquote>\n<p>这非常直观，我们可以指定区域设置和格式化选项来初始化一个格式化器，并在之后使用格式化器对象的 <code>format</code> 方法来格式化一个 <code>Date</code> 对象。这里的格式化选项其实非常灵活，能格式化的不只是日期，时间也可以被灵活地格式化，有非常多的组合可以选择。我们不会在这里详细解释每一个选项，你可以访问 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\" rel=\"noopener\">MDN 文档</a>来了解更多。</p>\n<blockquote><p>如前文所述，<code>Intl.DateTimeFormat</code> 无法格式化毫秒。</p></blockquote>\n<p>不过需要注意的是，<strong>JavaScript 运行时不一定支持所有区域设置，也不一定支持所有格式化选项。</strong>在遇到不支持的情况时，<code>Intl.DateTimeFormat</code> 默认会静默 fallback 到最匹配的支持项，因此在处理不常见的区域设置或选项时，你可能需要再额外检查。你可以通过 <code>Intl.DateTimeFormat.supportedLocalesOf()</code> 静态方法判断当前运行时是否支持指定的区域设置，也可以在实例化格式化器后在对象上调用 <code>resolvedOptions()</code> 方法来检查运行时的解析结果是否与预期一致。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('yue-Hant-CN').resolvedOptions()\r\n// {locale: 'zh-CN', calendar: 'gregory', …}\r\n// fallback 至 zh-CN，与 yue-CN 的预期不一致</pre>\n<p>此外，正如你所看到的，各种语言在日期格式化中使用的文本 JavaScript 运行时都已经帮我们内置了。因此，我们甚至可以利用这些国际化特性来为我们的应用减少一点需要翻译的字符串——打包进应用的翻译越少，应用体积也就越小了嘛——比如说获取一周七天对应的名字：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getWeekdayNames = (locale) =&gt; {\r\n     // 基于一个固定日期计算，这里选择 1970.1.1\r\n     // 不能使用 0，因为 Unix 时间戳 0 在不同时区的日期不一样\r\n    const base = new Date(1970, 0, 1).getTime()\r\n    const formatter = new Intl.DateTimeFormat(locale, { weekday: 'short' })\r\n    return Array.from({ length: 7 }, (_, day) =&gt; (\r\n        formatter.format(new Date(base + 3600000 * 24 * (-4 + day))) // 1970.1.1 是周四\r\n    ))\r\n}\r\n\r\ngetWeekdayNames('en-US') // ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\r\ngetWeekdayNames('zh-CN') // ['周日', '周一', '周二', '周三', '周四', '周五', '周六']\r\ngetWeekdayNames('ja') // ['日', '月', '火', '水', '木', '金', '土']\r\ngetWeekdayNames('ar-EG') // ['الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت']</pre>\n<p>当然，如果你还是不喜欢运行时为你提供的格式，我们还有上文提到过的 <code>formatToParts()</code> 方法可以用。来看一个简单的例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('zh-CN', {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    weekday: 'long',\r\n    hour: 'numeric',\r\n    minute: 'numeric',\r\n    second: 'numeric',\r\n}).formatToParts(new Date())\r\n// [\r\n//     { type: 'year', value: '2021' },\r\n//     { type: 'literal', value: '年' },\r\n//     { type: 'month', value: '10' },\r\n//     { type: 'literal', value: '月' },\r\n//     { type: 'day', value: '13' },\r\n//     { type: 'literal', value: '日' },\r\n//     { type: 'weekday', value: '星期三' },\r\n//     { type: 'literal', value: ' ' },\r\n//     { type: 'dayPeriod', value: '上午' },\r\n//     { type: 'hour', value: '1' },\r\n//     { type: 'literal', value: ':' },\r\n//     { type: 'minute', value: '00' },\r\n//     { type: 'literal', value: ':' },\r\n//     { type: 'second', value: '00' }\r\n// ]</pre>\n<p>随后，你就可以自己解析这个数组来构造出你想要的时间格式了。最后，我们还可以使用 <code>Intl.RelativeTimeFormat</code> 来格式化相对日期。当然我们不会在这里详细讲解这个 API，你可以参考 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat\" rel=\"noopener\">MDN 文档</a>。直接来看一个简单例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getRelativeTime = (num, unit, locale) =&gt; {\r\n    return new Intl.RelativeTimeFormat(locale, { numeric: 'auto' }).format(num, unit)\r\n}\r\n\r\ngetRelativeTime(-3, 'day', 'en-US') // 3 days ago\r\ngetRelativeTime(-1, 'day', 'zh-CN') // 昨天\r\ngetRelativeTime(0, 'second', 'zh-CN') // 现在\r\ngetRelativeTime(3, 'hour', 'ja') // 3 時間後</pre>\n<blockquote><p><code>Intl.RelativeTimeFormat</code> 是一个相对较晚进入标准的对象，因此浏览器支持程度较差，可能需要使用 <a href=\"https://formatjs.io/docs/polyfills/intl-relativetimeformat\" rel=\"noopener\">Polyfill</a>。不过目前（2021.10）主流浏览器的最新版本均已支持此 API。</p></blockquote>\n<h1>未来</h1>\n<p>我希望这篇文章时区转换的部分可以很快过时——这并非无稽之谈，目前（2021.10）TC39 的 <a href=\"https://github.com/tc39/proposal-temporal\" rel=\"noopener\"><code>Temporal</code> 提案</a>已经进入 Stage 3 了。<strong><code>Temporal</code> 提案定义了一个新的、时区友好的 <code>Temporal</code> 命名空间，并期望在不久后就能进入标准并最终应用于生产环境。</strong><code>Temporal</code> 定义了完整的时区、时间段、日历规则的处理，且拥有简单明了的 API。那时候，JavaScript 的时区处理就不会再如此痛苦了。由于目前 <code>Temporal</code> 提案还未进入标准，API 暂未稳定，我们无法将其用于生产环境，但我们可以来看一个简单的例子感受一下这个 API 的强大。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const zonedDateTime = Temporal.ZonedDateTime.from({\r\n  timeZone: 'America/Los_Angeles',\r\n  year: 1995,\r\n  month: 12,\r\n  day: 7,\r\n  hour: 3,\r\n  minute: 24,\r\n  second: 30,\r\n  millisecond: 0,\r\n  microsecond: 3,\r\n  nanosecond: 500,\r\n  calendar: 'iso8601'\r\n}) // 1995-12-07T03:24:30.0000035-08:00[America/Los_Angeles]</pre>\n<p>如果你希望立刻开始使用 <code>Temporal</code>，现在已有 Polyfill 可用。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"js-temporal\" data-mdxgithubp=\"temporal-polyfill\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/js-temporal/temporal-polyfill\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>不过，时区问题不会消失，各地区的习惯也很难融合到一起。时间的国际化处理是<a href=\"https://yourcalendricalfallacyis.com/\" rel=\"noopener\">极其复杂</a>的，前端中的时间国际化仍然值得我们认真关注。</p>\n","link":"https://flyhigher.top/develop/2482.html"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 12:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 4分8秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量...</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板...）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/209138/1/18651/50218/622032acEf83a8d68/fc6db86aebb679ff.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。macOS 系统代理的行为和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：...</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/207910/19/18573/59096/622032b0E05c1d4be/5d89d557f7889730.jpg\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。M1 芯片的性能如何？本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？...</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/138186/40/23101/50775/622032b3Efa9053d7/df3a819d044a9455.jpg\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote>\n<p>题图来自 USTC Hackergame 2019「Happy LUG」</p>\n</blockquote>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/90743/25/22680/55545/622032abE6ef31d51/cfc4cb389c994c17.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote>\n<p>周六不放假休息，还在这加班搞 CTF？</p>\n</blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/86535/11/24318/75037/622032a8E4f94d4ae/89703ccc122cf4e0.jpg\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<p>之前我在「天下武功，唯快不破 —— 我是这样优化博客的」一文中提到「对于大部分浏览器来说，确保 JS 异步加载和执行的做法其实是在操作 DOM 动态插入 &lt;script async&gt;」，但是并没有给出详细原因。这一次我以 Google Analytics 的统计代码为引子，详细讲讲 &lt;script&gt; 的 async 和 defer 属性、以及它们背后的故事。拆开 Google Analytic 的统计代码现在 Google 推出了 Google Tag Manager，通过......</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/80291/2/16552/19311/622032b3Eb300c2aa/66748fc8124a01c5.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"\n<p>WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将其表述为 \"An API for accessing Public Key Credentials\"，即“一个用于访问公钥凭证的 API”。WebAuthn 很强大，强大到被认为是 Web 身份认证的未来（当然，也很复杂）。你有想过通过指纹或者面部识别来登录网站吗？WebAuthn 就能在保证安全和隐私的情况下让这样的想法成为现实。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\" alt=\"通过 WebAuthn 调起 Windows Hello 登录网站\" width=\"1912\" height=\"966\" class=\"aligncenter size-full wp-image-2215\"></a>\n<p>你可以在<a href=\"https://webauthn.io/\" rel=\"noopener\">这个网站</a>自行体验 WebAuthn。或者，如果你有一个使用 WordPress 的站点，可以尝试一下 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WP-WebAuthn</a> 这款插件，它可以为你的站点启用 WebAuthn 登录。这是我为了写这篇文章而练手开发的插件，本文中的部分示例代码也来自这款插件。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"wp-webauthn\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/wp-webauthn\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>WebAuthn Level 1 标准已在 2019 年 3 月成为 W3C 推荐标准，而 Level 2 标准目前也已进入编辑草案阶段，但互联网上有关它的中文资料却仍然很少，国内也鲜有网站支持这一新标准。于是，在抱着各种英文资料和标准啃了几天以后，我折腾出了这篇文章。</p>\n<p>在这篇文章里，我将会从最基本的概念开始，逐渐深入 WebAuthn，直到解码公钥等深层细节。这可能是你能找到的有关 WebAuthn 最详细最基础的中文文章，也很可能是最长的。在开始之前，<strong>我强烈建议你打开菜单中的文章目录浏览一遍，以对这篇文章涉及的内容有所了解。</strong>如果你只是想了解如何简单地在你的项目中添加对 WebAuthn 的支持，那么“<a href=\"https://flyhigher.top/#webauthn-overview\">浅谈 WebAuthn</a>”部分就是你要找的；如果你想了解更多关于 WebAuthn 的底层细节，那么你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分。</p>\n<p>由于在本文写作时 WebAuthn Level 2 规范尚未定稿，<strong>这篇文章我们将只专注于 Level 1 规范。</strong></p>\n<p>这篇文章最后更新于 2020.9 ，在你读到这篇文章时，部分事实可能已经发生改变，请注意判断。</p>\n<p><strong>更新日志：</strong></p>\n<ul>\n<li>2021.1.16 添加 Chrome 开发工具信息</li>\n<li>2020.9.17 更新 iOS/iPad OS 兼容性信息</li>\n<li>2020.5.20 添加部分无用户名认证的平台兼容性内容</li>\n<li>2020.5.15 添加部分 <code>extensions</code> 相关内容与链接；添加全局凭证 ID 唯一内容；添加凭证 ID 查找相关内容；添加“从 U2F 认证迁移”一节</li>\n<li>2020.4.13 更新与修正 <code>userVerification</code> 相关内容；添加部分 Firefox 相关内容</li>\n<li>2020.3.23 文章发布</li>\n</ul>\n<p>那么让我们开始吧。<span></span></p>\n<h1>浅谈 WebAuthn</h1>\n<p>在这个部分里，我们将会从基础概念开始，了解有关 WebAuthn 和密码学的一些基础知识，并最终使用第三方库实现基础的 WebAuthn 认证。如果你已经对这些内容有所了解了，可以跳到“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”继续阅读。</p>\n<h2>为什么使用 WebAuthn</h2>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\" alt=\"钓鱼邮件\" width=\"709\" height=\"693\" class=\"aligncenter size-full wp-image-2162\"></a>\n<p>相信你一定收到过类似的邮件吧？只要你点进那个最显眼的链接，你就会进入一个设置好的圈套——钓鱼网站。如果你一时糊涂在这类网站上填写了你的账号和密码，bingo，你的账号就不再是你的账号了。</p>\n<p>不过，就算你警惕心再强，也无法避免密码泄露事件。Twitter, Facebook 等都爆出过明文密码泄露事件，证明再大的公司或组织也无法避免密码泄露问题。雪上加霜的是，很大一部分用户都非常喜欢使用重复密码，这就导致一次密码泄露会牵连很多网站，用户的账户安全性完全无法得到保证。</p>\n<p>那么，有什么办法解决这些问题吗？<strong>彻底解决的方法只有一个，那就是抛弃密码。</strong>可是没有密码还怎么验证用户身份呢？这就是 WebAuthn 的用武之地了。</p>\n<p><del>没有密码的好时代，来临力！</del></p>\n<h2>什么是 WebAuthn</h2>\n<p>那么到底什么是 WebAuthn 呢？如开头所说，WebAuthn 是“一个用于访问公钥凭证的 API”，网站可以通过这个 API 进行一些高安全性的身份验证。WebAuthn 一个最常见的应用就是用于网站登录时的 2FA（双重因素验证）甚至是无密码登录。通过网页调用 WebAuthn，在不同平台下，<strong>我们可以实现通过 USB Key、指纹、面部甚至虹膜扫描来认证身份，同时确保安全和隐私。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\" alt=\"WebAuthn 可使用的各种身份认证方式\" width=\"1294\" height=\"566\" class=\"aligncenter size-full wp-image-2213\"></a>\n<p>WebAuthn 标准是 FIDO2 标准的一部分，而 FIDO2 则是由 FIDO 联盟和 W3C 共同推出的 U2F（现称作 FIDO1）的后继标准，旨在增强网络认证的安全性。</p>\n<blockquote><p>你可能了解过 U2F，那么 U2F 和 FIDO2 的区别在哪里呢？从名字上可以看出，U2F，即“通用第二因素协议”，是专注于作为密码后的第二道屏障的，而 FIDO2 增加了单因素认证功能，这意味着使用 FIDO2 可以完全替代密码，真正实现无密码登录。</p></blockquote>\n<p>FIDO2 标准主要包括四个部分，其一是用于网站和访客设备交互的 WebAuthn，而 Client to Authenticator Protocol 2（CTAP2，客户端-认证器协议）作为 WebAuthn 的补充，则是用于访客的设备和认证器交互的协议。标准的其他两个部分则是 U2F 和 UAF 规范。在这篇文章中，我们只关心 WebAuthn，不会涉及 CTAP, U2F 和 UAF 的相关知识。如果你对这段话中的一些概念不了解，不要紧张，接下来我们就来谈谈 WebAuthn 中一些常用的术语和概念。</p>\n<blockquote><p>WebAuthn 只能在安全上下文中使用，也就是说，页面需要使用 HTTPS 协议或是处于 <code>localhost</code> 中。</p></blockquote>\n<h2>常用术语和概念</h2>\n<p>WebAuthn 中有许多不常碰到的术语，不过我只会在这里介绍一些常用的术语和概念——如果你只是希望做出一个简单的实现，那么了解这一段中的一些概念就足够了。同时，由于我实在没能找到一部分术语的通用翻译，有一些术语我按着自己的理解尽可能地翻译了，有任何问题请告诉我。</p>\n<p>在一个完整的 WebAuthn 认证流程中，通常有这么几个角色：</p>\n<ul>\n<li>Relying Party 依赖方 (RP) ：指服务提供方，即网站</li>\n<li>User 用户：正准备登录的你</li>\n<li>Authenticator 认证器：通常指 USB Key 或是设备内置的指纹扫描器、虹膜扫描器、面部识别装置等，正是它们在使用流程中代替了密码甚至是用户名</li>\n<li>User Agent 用户代理：通常指浏览器或系统，负责与认证器交互</li>\n</ul>\n<p>认证过程通常分为两种：</p>\n<ul>\n<li>Registration Ceremony 注册仪式：用户向账户上添加认证器</li>\n<li>Authentication Ceremony 验证仪式：用户通过已注册的认证器验证身份</li>\n</ul>\n<p>同时，认证过程中还会产生这些内容：</p>\n<ul>\n<li>Challenge 挑战：通常是一串随机字符串</li>\n<li>Public Key Credential 公钥凭证：由认证器产生的凭证，在技术上代替了密码</li>\n<li>Attestation 证明：注册时认证器产生的验证数据</li>\n<li>Assertion 断言：验证时认证器产生的验证数据</li>\n</ul>\n<blockquote><p><strong>请注意区分证明 (Attestation) 和断言 (Assertion)</strong>，特别是在这两个单词有些相似的情况下。在 WebAuthn 中，它们是不同过程中的类似概念，但并不相同。</p></blockquote>\n<p>如果你对于这些内容不是很理解，没有关系，我们会在“<a href=\"https://flyhigher.top/#how-to-webauthn\">使用流程</a>”一节中将这些概念放到实际情况中解释，你只要先区分这些概念即可。</p>\n<h2>安全性的基础</h2>\n<p>WebAuthn 为什么安全？和 HTTPS 一样，WebAuthn 使用非对称加密的思路来保证安全性，但侧重点又有所不同。要理解 WebAuthn 的认证流程，我们必须对非对称加密有所了解。如果你对非对称加密比较熟悉了，就直接跳到下一段吧。</p>\n<p>WebAuthn 的核心在于“认证”，即保证产生了凭证的认证器是用户的认证器，而不是第三方在伪造凭证。但为什么要使用非对称加密呢？我们可以先来看看对称加密。</p>\n<p>让我们假设小明和小红相互写信，见不到对方。这天小红突然想，给自己写信的人是不是真的小明呢？于是小红要求对方向小红证明自己是小明。怎么证明呢？他们商量出来这么一套方案：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明和小红商量一个统一的密码和密钥</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明用提前和小红商量好的密码和密钥加密文本后发回给小红</li>\n<li>小红使用相同的密码和密钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和密钥</li>\n</ol>\n<blockquote><p>在密码学中，我们通常把“加密算法”称为密码 (code)，和通常登录时用的密码 (password) 并非同一个概念。</p></blockquote>\n<p>在这种情况下，<strong>只要密钥不泄露</strong>，即拥有正确密钥的只有小明和小红，那么小红就能确定对方一定是小明。但这样的问题也很明显，如果小明和小红不能见面，那么他们就必须先以明文交换密码——<strong>在这个过程中一旦有人窃取到了密码，这个认证就无效了。</strong></p>\n<p>这时我们就需要使用<strong>非对称加密</strong>来拯救破碎的信任了。非对称加密的基础是一对密钥，也就是公钥和私钥，它们是互相关联但（几乎）无法互相推导的。在非对称加密的过程中，选择相同的密码后，使用私钥加密明文得到的密文只能由对应的公钥解密，无法使用私钥解密，同时这个过程反过来也是成立的。</p>\n<blockquote><p>本文的核心并不是非对称加密算法，因此不会详述非对称加密在数学上的证明，若有兴趣可以自行了解。</p></blockquote>\n<p>这就完美解决密钥泄露的问题了。让我们回过头来看之前的例子。现在小明和小红决定使用非对称加密来证明身份，过程如下：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明提前生成一对公私钥，将公钥发送给小红，私钥自己保管，同时商量好统一的密码</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明使用商量好的密码和自己的私钥加密文本，发送给小红</li>\n<li>小红使用相同的密码和小明的公钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和私钥</li>\n</ol>\n<p>在这种情况下，<strong>只要私钥不泄露</strong>，那么小红解密得到的文本和之前发送的一致，那么就可以证明收到的密文一定是由小明加密后发送过来的。而在整个过程中，私钥都没有离开过小明，更没有经过传输，也就几乎没有泄露的可能了。这时，小红终于可以确定对面和她通信的人的确是小明了。</p>\n<p>题外话：HTTPS 虽然也应用了非对称加密，但 HTTPS 更侧重于“加密”而非“认证”，因此思路上会有些许差异。要了解关于 HTTPS 和非对称加密的更多信息，你可以阅读我之前写的这篇文章：</p>\n<p></p>\n<div class=\"mdx-post-cot\" data-mdxposturl=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdx-post-wait-out-c2\"><div class=\"mdx-post-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<span></span>\n<h2>使用流程</h2>\n<p>了解了非对称加密，我们就可以来看看 WebAuthn 的认证流程了。</p>\n<p>和普通的密码一样，<strong>使用 WebAuthn 分为两个部分，注册和验证。</strong>注册仪式会在依赖方中将认证器的一些信息和用户建立关联；而验证仪式则是验证这些信息以登确保是用户本人在登录。根据上一节的思路，我们可以知道，注册仪式就是认证器生成一对公私钥，然后将公钥交给依赖方；而验证仪式是依赖方发送给认证器一段文本，要求认证器用自己的私钥加密后发回以验证。</p>\n<p>在实际情况中，WebAuthn 是基于<strong>挑战-应答模型</strong>工作的。要更好地理解，我们直接来看具体流程。先来看看注册的流程。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\" alt=\"WebAuthn 注册流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2224\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的注册请求</li>\n<li>依赖方向浏览器发送挑战、依赖方信息和用户信息</li>\n<li>浏览器向认证器发送挑战、依赖方信息、用户信息和客户端信息以请求创建公钥凭证</li>\n<li>认证器请求用户动作，随后创建一对公私钥，并使用私钥签名挑战（即证明），和公钥一起交给浏览器</li>\n<li>浏览器将签名后的挑战和公钥发送给依赖方</li>\n<li>依赖方用公钥验证挑战是否与发送的一致，如果成功则将公钥与用户绑定，注册完成</li>\n</ol>\n<p>我也做了一个交互式的 Demo，你可以对照流程来更好地理解。</p>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\">开始注册</button> <span></span></p>\n<div></div>\n<blockquote><p>注意，这个 Demo 和下方的 Demo 都只是一个本地模拟的简单示例，没有任何数据会被上传，当然也不会对数据进行验证。</p></blockquote>\n<p>而之后的验证流程如下：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\" alt=\"WebAuthn 验证流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2226\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的验证请求</li>\n<li>依赖方向浏览器发送挑战</li>\n<li>浏览器向认证器发送挑战、依赖方信息和客户端信息以请求获取公钥凭证</li>\n<li>认证器请求用户动作，随后通过依赖方信息找到对应私钥，并使用私钥签名挑战（即断言），交给浏览器</li>\n<li>浏览器将签名后的挑战发送给依赖方</li>\n<li>依赖方用之前存储的公钥验证挑战是否与发送的一致，一致则验证成功</li>\n</ol>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\" disabled>开始验证</button> <span>在上方注册后才能验证</span></p>\n<div></div>\n<p>可以看到，WebAuthn 不仅在理论上是安全的，同时<strong>在整个过程中并没有隐私数据被传输</strong>——用户信息实际上只包含用户名和用户 ID。因此我们完全可以说 WebAuthn 是安全且私密的。</p>\n<blockquote><p>为了避免用户在不同依赖方之间被追踪，认证器通常会为每个依赖方和用户的组合都创建一对公私钥。不过，由于认证器的存储空间有限，认证器通常不会存储每一个私钥，而是会通过各类信息和烧录在认证器内的主密钥“算”出对应的私钥以实现无限对公私钥。具体算法根据不同厂商会有所不同。对于 Yubikey，你可以在<a href=\"https://developers.yubico.com/U2F/Protocol_details/Key_generation.html\">这里</a>了解更多。</p></blockquote>\n<blockquote><p>如果依赖方需要，用户同意后，发送给依赖方的公钥凭证中可以包含用于辨认认证器型号的信息，不过这对隐私的影响微乎其微。</p></blockquote>\n<h2>浏览器接口</h2>\n<p>要使用 WebAuthn，我们必须要依靠浏览器作为媒介和验证器进行交互，而这就需要浏览器对于 WebAuthn 的支持了。绝大多数新版本的现代浏览器都为 WebAuthn 提供了统一的接口，而在这一段中我们会了解如何使用相关的接口。但是在开始之前，我们可以先来看看浏览器的支持程度（2020.9）。</p>\n<div class=\"mdui-table-fluid\"><table class=\"mdui-table\">\n<thead><tr>\n<th>浏览器</th>\n<th>支持情况</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>桌面端 Chrome</td>\n<td>67+</td>\n</tr>\n<tr>\n<td>移动端 Chrome</td>\n<td>67+<sup>[1]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Firefox</td>\n<td>60+</td>\n</tr>\n<tr>\n<td>移动端 Firefox</td>\n<td>不支持<sup>[2]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Edge</td>\n<td>18+</td>\n</tr>\n<tr>\n<td>移动端 Edge</td>\n<td>不支持<sup>[3]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Safari</td>\n<td>13+</td>\n</tr>\n<tr>\n<td>移动端 Safari</td>\n<td>13.3+<sup>[4]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Opera</td>\n<td>54+</td>\n</tr>\n<tr>\n<td>移动端 Opera</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table></div>\n<p><sup>[1]</sup> 受平台限制，Chrome 在 iOS 平台上不支持 WebAuthn，在 Android 平台上支持大部分 WebAuthn 功能，但仍不支持部分特性（如 <code>userVerification</code>）。<br><sup>[2]</sup> 移动端 Firefox 80 以下的版本支持 WebAuthn 但似乎会忽略 <code>authenticatorAttachment</code> 等一部分参数，同时移动端 Firefox Beta 80 以下的版本支持 WebAuthn 但无法成功调用。自 80 版本起移动端 Firefox 暂时取消了对 WebAuthn 的支持（可能是 Bug）。<br><sup>[3]</sup> 移动端 Edge 似乎支持 WebAuthn 但无法成功调用。<br><sup>[4]</sup> Safari iOS/iPad OS 13 仅支持外部认证器，无法调用 Touch ID 或 Face ID；自 iOS/iPad OS 14 起 Safari 已支持全功能 WebAuthn，可以调用 Touch ID/Face ID</p>\n<p>当然，一众国产浏览器，包括 Samsung Browser 和 Yandex Browser，目前都不支持 WebAuthn。此外，由于 WebAuthn 涉及外部验证器和 TPM 可信平台模块等，用户的操作系统也会对 WebAuthn 的可用性造成影响。以下是一些需要注意的信息：</p>\n<ul>\n<li>Windows 10 1903 以下版本仅 Edge 能提供完整支持，其他浏览器只能使用 USB Key 等外部认证器；1903+ 中所有浏览器都可以通过 Windows Hello 带来完整的 WebAuthn 支持</li>\n<li>Android 需要安装并开启 Google 服务</li>\n<li>iOS/iPad OS 13.3 以下的版本不支持 WebAuthn，iOS/iPad OS 14 以下的版本支持有限（参考上文），iOS/iPad OS 14 开始 Safari 已支持全功能 WebAuthn（功能完整度甚至超过了 Android）</li>\n</ul>\n<p>可以看出，WebAuthn 的发展之路仍然很漫长，但好在桌面端对它的支持已经比较完善了，在一些情况下我们完全有理由使用它。</p>\n<hr>\n<p>来看看浏览器提供了怎么样的接口吧。要使用 WebAuthn，我们可以使用 <code>navigator.credentials.create()</code> 请求认证器生成公钥凭证和 <code>navigator.credentials.get()</code> 请求获取公钥凭证。</p>\n<blockquote><p>你或许已经对 Credential Management API 有所了解了。通过这些 API，我们还可以实现一些有趣的特性，不过这值得另开一篇文章来讲了。</p></blockquote>\n<p>对于一个基础的实现，<code>navigator.credentials.create()</code> 需要传入的参数如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        challenge,\r\n        rp: {\r\n            id,\r\n            name\r\n        },\r\n        user: {\r\n            id,\r\n            name,\r\n            displayName\r\n        },\r\n        pubKeyCredParams: [\r\n            {\r\n                type: \"public-key\",\r\n                alg\r\n            }\r\n        ],\r\n        authenticatorSelection: {\r\n            authenticatorAttachment,\r\n            userVerification\r\n        },\r\n        excludeCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>在 <code>navigator.credentials.create()</code> 方法中，我们必须传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值。这指明了我们需要创建公钥凭证，而非普通的密码凭证。然后，在 <code>publicKey</code> 对象中设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rp: Object</code>：依赖方信息，其中有一项为必须：\n<ul>\n<li>\n<code>rp.id: String</code>：（可选）依赖方 ID，必须为当前域名或为当前域名的子集的域名（不是子域名）。如域名为 <code>test.123.example.com</code>，则依赖方 ID 可以是 <code>test.123.example.com</code>, <code>123.example.com</code> 或 <code>example.com</code>。不指定则默认使用当前域名</li>\n<li>\n<code>rp.name: String</code>：依赖方名称，用于方便用户辨认</li>\n</ul>\n</li>\n<li>\n<code>user: Object</code>：用户信息，其中有三项为必须：\n<ul>\n<li>\n<code>user.id: Uint8Array</code>：转换为 <code>Uint8Array</code> 的字符串。<strong>出于安全考量，这应尽可能不与任何用户信息相关联，如不要包含用户名、用户邮箱等</strong>\n</li>\n<li>\n<code>user.name: String</code>：登录用户名</li>\n<li>\n<code>user.dispalyName: String</code>：用于显示的用户名称，显示与否的具体行为取决于浏览器</li>\n</ul>\n</li>\n<li>\n<code>pubKeyCredParams: Array</code>：一个算法列表，指明依赖方接受哪些签名算法。列表的每一项都是一个对象，拥有两个属性：\n<ul>\n<li>\n<code>pubKeyCredParams[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>pubKeyCredParams[].alg: Number</code>：一个负整数，用于标明算法。具体算法对应的数字可以在 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\">COSE</a> 找到</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection: Object</code>：（可选）用于过滤正确的认证器，这里介绍常用的一个参数：\n<ul>\n<li>\n<code>authenticatorSelection.authenticatorAttachment: String</code>：（可选）指定要求的认证器类型。如果没有满足要求的认证器，认证可能会失败。该参数可以为 <code>null</code>（表示接受所有类型的认证器）或是以下两个值之一：\n<ul>\n<li>\n<code>platform</code>：表示仅接受平台内置的、无法移除的认证器，如手机的指纹识别设备</li>\n<li>\n<code>cross-platform</code>：表示仅接受外部认证器，如 USB Key</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection.userVerification: String</code>：（可选）指定认证器是否需要验证“用户为本人 (User Verified, UV)”，否则只须“用户在场 (User Present, UP)”。具体验证过程取决于认证器（不同认证器的认证方法不同，也有认证器不支持用户验证），而对验证结果的处理情况则取决于依赖方。该参数可以为以下三个值之一：\n<ul>\n<li>\n<code>required</code>：依赖方要求用户验证</li>\n<li>\n<code>preferred</code>：（默认）依赖方希望有用户验证，但也接受用户在场的结果</li>\n<li>\n<code>discouraged</code>：依赖方不关心用户验证。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>excludeCredentials: Array</code>：（可选）用于标识要排除的凭证，可以避免同一个用户多次注册同一个认证器。如果用户试图注册相同的认证器，用户代理会抛出 <code>InvalidStateError</code> 错误。数组中的每一项都是一个公钥凭证对象，包含以下属性：\n<ul>\n<li>\n<code>excludeCredentials[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>excludeCredentials[].id: Uint8Array</code>：要排除的凭证 ID</li>\n<li>\n<code>excludeCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，超时后将强制终止 <code>create()</code> 并抛出错误。若不设置，将使用用户代理的默认值；若太大或太小，则使用最接近的用户代理默认值范围中的值。推荐值为 5000-120000</li>\n</ul>\n<blockquote><p>对于 <code>pubKeyCredParams</code>，通常我们只需添加 ES256 (alg: -7) 算法即可兼容大部分外部认证器，此外，再添加 RS256 (alg: -257) 算法即可兼容大部分平台内置认证器（如 Windows Hello）。当然，前端添加算法之后，后端也需要相应的算法支持。</p></blockquote>\n<blockquote><p>对于 <code>userVerification</code>，由于默认值 \"preferred\" 并不能很好地被所有设备支持，因此无论在 <code>create()</code> 中还是 <code>get()</code> 中不指定该参数都会在 Chrome 中触发一条警告。具体请参阅<a href=\"https://chromium.googlesource.com/chromium/src/+/master/content/browser/webauth/uv_preferred.md\">这个页面</a>。</p></blockquote>\n<p>调用 <code>create()</code> 之后，我们就可以拿到一个 <code>Promise</code>，并可以在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>create()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAttestationResponse {\r\n        attestationObject: ArrayBuffer(390) {},\r\n        clientDataJSON: ArrayBuffer(121) {}\r\n    },\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\",\r\n    type: \"public-key\"\r\n}</pre>\n<p>其中有：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 \"public-key\"</li>\n<li>\n<code>response: Object</code>：<code>AuthenticatorAttestationResponse</code> 对象，是 <code>PublicKeyCredential</code> 的主要部分，包含以下两个内容：\n<ul>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n<li>\n<code>response.attestationObject: ArrayBuffer</code>：CBOR 编码的认证器数据，包含凭证公钥、凭证 ID、签名（如果有）、签名计数等信息</li>\n</ul>\n</li>\n</ul>\n<p>然后将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串，我们就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证与注册了。具体怎么操作，我们会在下文详细讨论。当然，别忘了 <code>catch()</code> 注册过程中抛出的任何错误。</p>\n<blockquote><p>你可能会认为在所有情况下，注册时认证器都会对挑战进行签名。实际上在大部分情况下（同时也是默认情况），<strong>注册时认证器并不会对挑战进行签名</strong>，<code>attestationObject</code> 并不会包含签名后的挑战。只有依赖方明确要求证明且用户同意（部分浏览器要求）后认证器才会对挑战进行签名（具体实现据情况会有所不同）。对此，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion#Attestation\">MDN 解释道</a>“大部分情况下，用户注册公钥时我们会使用「初次使用时信任模型」(TOFU) ，此时验证公钥是没有必要的。”要了解更多关于证明的内容，请参阅“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>而对于 <code>navigator.credentials.get()</code>，我们可以传入如下的参数：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.get({\r\n    publicKey: {\r\n        challenge,\r\n        rpId,\r\n        userVerification,\r\n        allowCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>和 <code>create()</code> 一样，对于 <code>get()</code> 我们需要传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值，指明我们需要获取的是公钥凭证而非普通的密码凭证。在 <code>publicKey</code> 对象中我们可以设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rpID: String</code>：（可选）依赖方 ID，需要和注册认证器时的一致。规则和上述的 <code>rp.id</code> 一致，不指定默认使用当前域名</li>\n<li>\n<code>userVerification: String</code>：和上文一样，只是需要注意它这次不在 <code>authenticatorSelection</code> 中了</li>\n<li>\n<code>allowCredentials: Array</code>：（可选）用于标识允许的凭证 ID，使用户代理找到正确的认证器。只有符合这个列表中凭证 ID 的凭证才能被成功返回。数组中的每一项都是对象，包含以下属性：\n<ul>\n<li>\n<code>allowCredentials[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>allowCredentials[].id: Uint8Array</code>：允许的凭证 ID</li>\n<li>\n<code>allowCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，和上面的一样，推荐值为 5000-120000</li>\n</ul>\n<p>嗯，要传入的参数少多了。之后，和 <code>create()</code> 一样，调用 <code>get()</code> 之后，我们就可以拿到一个 <code>Promise</code> 并在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>get()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAssertionResponse {\r\n        authenticatorData: ArrayBuffer(37) {},\r\n        signature: ArrayBuffer(256) {},\r\n        userHandle: ArrayBuffer(64) {},\r\n        clientDataJSON: ArrayBuffer(118) {}\r\n    }\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\"\r\n    type: \"public-key\"\r\n}</pre>\n<p>这里的东西就比 <code>create()</code> 时拿到的要多了。看看我们拿到了什么吧：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 \"public-key\"</li>\n<li>\n<code>response: Object</code>：对于验证流程，认证会返回 <code>AuthenticatorAssertionResponse</code> 而不是 <code>AuthenticatorAttestationResponse</code> 对象，这个对象包含以下 4 个属性：\n<ul>\n<li>\n<code>response.authenticatorData: ArrayBuffer</code>：认证器信息，包含认证状态、签名计数等</li>\n<li>\n<code>response.signature: ArrayBuffer</code>：被认证器签名的 <code>authenticatorData</code> + <code>clientDataHash</code>（<code>clientDataJSON</code> 的 SHA-256 hash）</li>\n<li>\n<code>response.userHandle: ArrayBuffer</code>：<code>create()</code> 创建凭证时的用户 ID <code>user.id</code>。许多 U2F 设备不支持这一特性，这一项将会是 <code>null</code>\n</li>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n</ul>\n</li>\n</ul>\n<p>同样地，我们将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串后就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证了。至于具体怎么做，别急，马上就来讲一讲。</p>\n<h2>简单实现</h2>\n<p>了这么多，我们终于可以实现一个简单的 WebAuthn 认证页面了。由于在实际操作中 WebAuthn 相关的数据解码和密码计算比较复杂，在服务器端我们可以使用第三方库来帮我们做这些脏活累活，我们只需专注于具体流程就可以了。</p>\n<p>要寻找可用的第三方库，你可以在 <a href=\"https://webauthn.io/\">webauthn.io</a> 上找到适用于各种语言的第三方库——除了 PHP（笑）。不过好在你可以在 GitHub 上找到几个不错的 PHP WebAuthn 库，比如 <a href=\"https://github.com/web-auth/webauthn-framework\">web-auth/webauthn-framework</a>。</p>\n<p>在我们的这个例子中，我们关心的主要是前端逻辑；而后端我们可以使用各类几乎已经做到开箱即用的第三方库，这样我们可以专注于流程而不必关心细节。当然如果你想了解后端的解码细节，可以阅读“<a href=\"https://flyhigher.top/#webauthn-decode\">手动解个码</a>”一节。</p>\n<hr>\n<p>让我们先从注册开始吧。现在，用户点击了注册认证器的按钮，一个请求被发送给服务器（也就是依赖方）。在最简单的情况中，依赖方需要将三个内容发送给浏览器：<strong>挑战、用户信息和用户已注册的凭证 ID 列表（即 <code>excludeCredentials</code>）</strong>。当然依赖方也可以自由选择发送更多信息，只要最终前端能构建合法的参数即可。</p>\n<p>挑战最终会被转换为 <code>Uint8Array</code>，即一组 0-255 的整数。如果使用 PHP，在后端我们可以这样生成 Base64 编码的挑战：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$challenge = \"\";\r\nfor($i = 0; $i \n<p>对于用户信息，我们需要登录名、显示名称和 ID 三项内容。我们可以从数据库中取出用户信息，也可以新建一份。需要注意的是，<strong>出于安全和隐私的考量，ID 不应该包含用户的任何信息，比如用户邮箱等。</strong>推荐的做法是和挑战一样，生成一个随机字符串/一组随机数，并将其于用户关联起来以供之后使用。</p>\n<p>发送已注册的凭证 ID 列表是为了防止用户重复注册同一个认证器。正确设置该列表后，如果用户试图注册同一个认证器，浏览器会中止流程并抛出 <code>InvalidStateError</code>。</p>\n<p>最后，别忘了将挑战等一些后续可能会用到的信息临时存储起来。Session 就是一个很好的选择。</p>\n<p>将所有信息发送到浏览器之后，我们应该可以构建出新建凭证所需的参数了。由于有多个参数需要以 <code>Uint8Array</code> 的形式传入，我们可以准备一个简单的工具函数帮我们将 Base64 的字符串转为 <code>Uint8Array</code>。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function str2ab(str){\r\n    return Uint8Array.from(window.atob(str), c=&gt;c.charCodeAt(0));\r\n}</pre>\n<p>除了 <code>challenge</code>, <code>rp</code>, <code>user</code> 和 <code>excludeCredentials</code> 几部分需要你根据具体情况设置外，上文提到的其他参数一般可以这么设置：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">publicKey: {\r\n    challenge, // 自行设置\r\n    rp, // 自行设置\r\n    user, // 自行设置\r\n    pubKeyCredParams: [\r\n        {\r\n            type: \"public-key\",\r\n            alg: -7 // ES256\r\n        },\r\n        {\r\n            type: \"public-key\",\r\n            alg: -257 // RS256\r\n        }\r\n    ],\r\n    authenticatorSelection: {\r\n        userVerification: \"discouraged\",\r\n        authenticatorAttachment: null // 除非用户指定，大部分情况下无需指定\r\n    },\r\n    excludeCredentials, // 自行设置\r\n    timeout: 60000\r\n}</pre>\n<p>然后就是传入 <code>navigator.credentials.create()</code>，拿到 <code>PublicKeyCredential</code>。如果一切顺利，接下来我们就需要考虑如何将返回的内容传回依赖方了。由于我们拿到的很多都是 <code>ArrayBuffer</code>，我们需要将其进行编码。再准备一个工具函数吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function array2b64String(a) {\r\n    return window.btoa(String.fromCharCode(...a));\r\n}</pre>\n<p>然后适当处理，我们就可以得到一个方便传输的 JSON 字符串了：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({publicKey}).then((credentialInfo) =&gt; {\r\n    const publicKeyCredential = {\r\n        id: credentialInfo.id,\r\n        type: credentialInfo.type,\r\n        rawId: array2b64String(new Uint8Array(credentialInfo.rawId)),\r\n        response: {\r\n            clientDataJSON: array2b64String(new Uint8Array(credentialInfo.response.clientDataJSON)),\r\n            attestationObject: array2b64String(new Uint8Array(credentialInfo.response.attestationObject))\r\n        }\r\n    };\r\n    return publicKeyCredential;\r\n}).then(JSON.stringify).then((authenticatorResponseJSON) =&gt; {\r\n    // 可以发送了\r\n}).catch((error) =&gt; {\r\n    console.warn(error); // 捕获错误\r\n})</pre>\n<p>依赖方收到数据以后，还需要做三件事：验证挑战、存储凭证 ID 和存储公钥。如果数据解码顺利，且收到的挑战和之前发送的一致，就可以认为注册成功，将凭证 ID 及公钥与用户关联起来。这一步有很多第三方库可以帮我们做，对于基础实现我们就不深入探究了。</p>\n<blockquote><p>由于不同厂商的认证器的实现方式不同，<strong>我们并不能保证凭证 ID 一定是全局唯一的</strong>，也就是说，凭证 ID 有可能碰撞——即使这些凭证实际上是不同的。依赖方在实现凭证 ID 的存储及查找时，需要注意和用户 ID 结合进行存储或查找，或是直接在注册认证器时在服务器端对比阻止相同的凭证 ID。</p></blockquote>\n<hr><p>接下来就可以进行验证了。某天，用户点击了验证按钮准备登录，于是浏览器发送了验证请求到依赖方，同时附上要登录的用户名。接下来依赖方至少需要发送两项内容给浏览器：<strong>挑战和用户已绑定的凭证 ID 列表（即 <code>allowCredentials</code>）。</strong></p>\n<p>之后前端的处理流程就和注册时基本一致了。只是需要注意验证流程中获取到的 <code>PublicKeyCredential</code> 的结构和注册时的稍有不同。</p>\n<p>当浏览器将数据传回后，依赖方需要做的事情就比之前要麻烦一些了。依赖方需要验证挑战，并用之前存储的公钥验证签名和签名计数。同样地，这一步有很多第三方库可以帮我们做。最后，如果验证全部通过，我们就可以允许用户登录了。</p>\n<p>到目前为止，我们已经实现了一个简单的 WebAuthn 验证服务。不过这只是一个最基础的实现，对于很多高安全要求的身份认证这是远远不够的。因此，我们需要摆脱对第三方库的依赖，深入了解 WebAuthn。你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分，不过对于基础的 WebAuthn 实现，我们的旅程就到这里了。</p>\n<h2>拓展阅读</h2>\n<p>如果你的目标只是快速了解如何开发 WebAuthn，那么你阅读到这里就可以了。同时，上一节例子中的部分代码来自于我为了这篇文章开发的 WordPress 插件 WP-WebAuthn，这个插件可以为你的 WordPress 启用 WebAuthn 无密码登录（并非二步验证），你可以查阅插件的 <a href=\"https://github.com/yrccondor/wp-webauthn\">GitHub 存储库</a>了解更多，也可以自己安装试一试。</p>\n<p>如果你正在使用 Chrome 开发，Chrome 87+ 版本添加了一个 WebAuthn 开发者面板，可以帮助你在没有任何实体验证器的情况下开发 WebAuthn 功能。你可以在 Google 的<a href=\"https://developers.google.com/web/tools/chrome-devtools/webauthn\">这篇文章</a>中了解更多。不够，如果你正在使用 Firefox，很遗憾目前我还没有找到对应的开发工具或是浏览器扩展可用。</p>\n<p>如果你希望了解更多关于非对称加密的数学证明，可以查阅阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">这篇文章</a>。</p>\n<p>如果你希望了解更多关于 Credential Management API 的信息，可以查阅<a href=\"https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe\">这篇文章</a>（英文）。</p>\n<p>如果你希望了解更多 WebAuthn 的细节，可以继续往下阅读。<span></span></p>\n<h1>深入了解 WebAuthn</h1>\n<p>如上文所说，如果摆脱对第三方库的依赖，或是要实现更安全的 WebAuthn，我们必须深入了解 WebAuthn。在这一部分中，我们会详细讨论上文没有提到的一些概念和参数，并了解 WebAuthn 中各类数据的结构以实现解码与验证。先来看一看一些进阶的选项吧。</p>\n<h2>进阶选项</h2>\n<p>没错，上文提到的传入 <code>navigator.credentials.create()</code> 和 <code>navigator.credentials.get()</code> 方法的参数其实只是所有参数的一部分。对于 <code>create()</code>，我们还可以配置这些可选内容（上文提及的已省略）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        rp: {\r\n            icon\r\n        },\r\n        user: {\r\n            icon\r\n        },\r\n        attestation,\r\n        authenticatorSelection: {\r\n            requireResidentKey\r\n        },\r\n        extensions\r\n    }\r\n})</pre>\n</pre>\n<ul>\n<li>\n<code>rp.icon: String</code> 和 <code>user.icon</code>：是的，你可以为依赖方和用户设置图标，可以使用 HTTPS URL 或 Base64，一般长度不能超过 128 字节，不过大部分浏览器不会显示图标，或是有非常小的图片体积限制，所以一般没有使用这一属性的必要</li>\n<li>\n<code>attestation: String</code>：表明依赖方是否需要证明。可选三个值：\n<ul>\n<li>\n<code>none</code>：（默认）不需要证明。如上文所述，依赖方不关心证明，因此认证器不会签名。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n<li>\n<code>indirect</code>：依赖方需要证明，但证明方式可由认证器选择。在支持匿名证明的认证器上，认证器会通过匿名证明的方式签名挑战，并向依赖方提供签名方式等信息</li>\n<li>\n<code>direct</code>：依赖方要求直接证明。此时认证器会使用烧录在认证器中的公钥进行签名，同时向依赖方提供签名方式等信息以供依赖方验证认证器是否可信。更多信息可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节</li>\n</ul>\n</li>\n<li>在 <code>authenticatorSelection</code> 中，我们还可以设置两个可选属性：\n<ul>\n<li>\n<code>authenticatorSelection.requireResidentKey: Boolean</code>：是否要求将私钥钥永久存储于认证器中。默认值为 <code>false</code>。对于 iOS/iPad OS 13，必须设置为 <code>false</code>，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n<li>\n<code>extensions: Object</code>：WebAuthn 扩展，可以提供规范之外的配置和响应。由于实际情况中很少会使用这一特性，我们不会在这篇文章中讨论它</li>\n\n<blockquote><p>将 <code>requireResidentKey</code> 设置为 <code>true</code> 可以实现无用户名的登录，即认证器同时替代了用户名和密码。需要注意的是，尽管大部分认证器可以实现无限对公私钥，<strong>但能永久存储的私钥数量是有限的</strong>（对于 Yubikey，这通常是 25），因此只应在真正需要的时候启用此特性。我们会在“<a href=\"https://flyhigher.top/#login-without-username\">无用户名登录</a>”一节中详细讨论原因。</p></blockquote>\n<blockquote><p><strong>如果你没有高安全需求（如银行交易等），请不要向认证器索取证明</strong>，即将 <code>attestation</code> 设置为 \"none\"。对于普通身份认证来说，要求证明不必要的，且会有浏览器提示打扰到用户。</p></blockquote>\n<blockquote><p>Android 暂时无法实施用户验证，进而会导致依赖方验证失败。你可以在<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=997538\">这里</a>追踪这个特性的实现情况。</p></blockquote>\n<blockquote>\n<p>对于 <code>extensions</code>，由于目前浏览器支持和应用范围有限，我们不会在这篇文章中涉及，不过你可以看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    uvm: true, // 要求认证器返回用户进行验证的方法\r\n    txAuthSimple: \"Please proceed\" // 在认证器上显示与交易有关的简短消息\r\n}</pre>\n<p>你可以在<a href=\"https://www.w3.org/2019/01/webauthn-extensions.html\">这个页面</a>了解更多关于 <code>extensions</code> 的信息。</p>\n</blockquote>\n<p>对于 <code>get()</code>，我们其实只有一个可选内容没讲了，即 <code>extensions</code>。和上文一样，我们不会在这篇文章中讨论它。</p>\n<p>就这些了！<span></span></p>\n<h2>手动解个码</h2>\n<p>是时候看看如何手动解码了。我们将会在这一节中讨论认证器返回的数据的结构以及如何正确地解码它们。</p>\n<p>首先我们来看看如何处理注册过程中认证器发回的数据。假设所有 <code>ArrayBuffer</code> 类型的值都被正确地以 Base64 编码，且后端已经将 JSON 的字符串解析为字典。先来复习一下，我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"ZRBkDBCEtq...9XY8atOcbg\",\r\n    type: \"public-key\",\r\n    rawId: \"ZRBkDBCEtq...9XY8atOcbg==\",\r\n    response: {\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...i5jcmVhdGUifQ==\",\r\n        attestationObject: \"o2NmbXRkbm9uZWd...xNHuAMzz2LxZA==\"\r\n    }\r\n}</pre>\n<p>这里的 <code>id</code> 就是凭证的 ID，如果验证正确，我们最终要将它存储起来并于用户关联。同时可以看到 Base64 编码后的 <code>rawId</code> 其实和 <code>id</code> 是一致的（不过 <code>id</code> 是 Base64URL 编码的）。而 <code>type</code> 则一定是 \"public-key\"。</p>\n<p>不过，我们主要关心的还是 <code>respose</code> 中的两项内容。首先是 <code>clientDataJSON</code>。它的处理比较简单，看名字就知道，它应该是一个 JSON 字符串。</p>\n<blockquote><p>小技巧：如果你看到一个 Base64 编码的字符串以 \"ey\" 开头，那么它大概率是一个 Base64 编码的 JSON。</p></blockquote>\n<p>将<code>clientDataJSON</code> Base64 解码再 JSON 解码之后我们就能得到一个字典：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"NI4i1vsNmP2KHcmyFnBCKRVQPfHgg34SsYZUOPZY2lM\",\r\n    extra_keys_may_be_added_here: \"do not compare clientDataJSON against a template. See https://goo.gl/yabPex\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>结构一目了然。在这里，我们需要验证三项内容：</p>\n<ul>\n<li>\n<code>challenge</code> 和之前发送的一致</li>\n<li>\n<code>origin</code> 为创建凭证的页面的源（协议+主机名+端口号，并非 URL）</li>\n<li>\n<code>type</code> 为 \"webauthn.create\"</li>\n</ul>\n<p>同时可以注意到有一个奇怪的 <code>extra_keys_may_be_added_here</code>。这其实是 Google 在 Chrome 中搞的一点小把戏，有一定概率会出现，提醒我们需要将 JSON 解析后再验证键值以防额外插入的键值影响验证。具体信息你可以访问那个 URL 看一看。</p>\n<p>对于 Firefox，我们会多得到两项 <code>clientExtensions</code> 和 <code>hashAlgorithm</code> ，分别指明了客户端扩展数据和签名算法。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"3-4\">{\r\n    challenge: \"dg6ost6ujhAA0g6WqLe-SOOH-tbhvjW9Sp90aPKlLJI\",\r\n    clientExtensions: {},\r\n    hashAlgorithm: \"SHA-256\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>由于本文不考虑扩展数据，因此我们可以不考虑 <code>clientExtensions</code>。同时由于目前规范中指定的签名算法只有 SHA-256 一种，因此现阶段我们也可以简单地忽略 <code>hashAlgorithm</code>。</p>\n<p><code>clientDataJSON</code> 很简单地就处理完了。接下来我们要来看看 <code>attestationObject</code>。先来看看 <code>attestationObject</code> 的结构图示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\" alt=\"attestationObject 的结构\" width=\"1056\" height=\"532\" class=\"aligncenter size-full wp-image-2245\"></a>\n<p><code>attestationObject</code> 是 CBOR 编码后再被 Base64 编码的，因此我们需要额外对其进行 CBOR 解码。</p>\n<blockquote><p>CBOR (Concise Binary Object Representation, 简明二进制对象表示) 是一种多应用于物联网领域的编码方式，你可以将它看作体积更小、更方便物联网传输的二进制 JSON。大部分语言都可以找到对应的 CBOR 解码库。</p></blockquote>\n<p>我们当然不会手解 CBOR，直接来看看解开之后的样子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"none\",\r\n    attStmt: {},\r\n    authData: [211, 217, 43, 24, 199, ..., 97, 238, 166, 67, 107]\r\n}</pre>\n<p>这些键值的含义如下：</p>\n<ul>\n<li>\n<code>fmt</code>：标明证明的格式。WebAuthn 预定义了几种格式，分别为：\n<ul>\n<li>\n<code>none</code>：没有证明</li>\n<li>\n<code>packed</code>：为 WebAuthn 优化的证明格式</li>\n<li>\n<code>android-safetynet</code>：Android 使用的格式</li>\n<li>\n<code>android-key</code>：又是 Android 使用的格式</li>\n<li>\n<code>fido-u2f</code>：FIDO U2F 认证器使用的格式</li>\n<li>\n<code>tpm</code>：TPM 可信平台模块使用的格式</li>\n</ul>\n</li>\n<li>\n<code>attStmt</code>：证明对象，具体格式根据 <code>fmt</code> 的不同会有所不同</li>\n<li>\n<code>authData</code>：包含公钥、签名计数等来自认证器的数据</li>\n</ul>\n<p>诶，例子里的 <code>attStmt</code> 怎么是空的？还记得之前说的吗？大部分情况下，<strong>如果依赖方不要求证明，那么认证器不会签名挑战</strong>，于是 <code>fmt</code> 会变为 \"none\"，<code>attstmt</code> 会为空。如果不是高安全要求，我们可以只对这一种情况做支持。</p>\n<blockquote><p>注意，部分情况下 Firefox 会在不要求证明（即 <code>attestation</code> 为 \"none\"）时会返回 <code>fmt</code> 为 \"packed\" 的证明。<strong>这是符合规范的。</strong>此时认证器会进行自证明，你可以视情况进行处理。具体可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>对于非 \"none\" 的 <code>fmt</code> 我们稍后再谈，现在我们先来看看 <code>authData</code>。来复习一下 <code>authData</code> 的结构：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\" alt=\"authData 的结构\" width=\"1056\" height=\"384\" class=\"aligncenter size-full wp-image-2240\"></a>\n<p>对于它的解码比较简单粗暴，我们要做的就是根据图示将它切开，然后适当地转换类型。其中各部分的含义如下：</p>\n<ul>\n<li>\n<code>rpIdHash</code>：如其名，SHA-256 的 <code>rpId</code>，长度 32 字节</li>\n<li>\n<code>flags</code>：标识认证状态，长度 1 字节。其中 8 位分别为：\n<ul>\n<li>\n<code>ED</code>：是否有扩展数据</li>\n<li>\n<code>AT</code>：是否包含 <code>attestedCredentialData</code>。通常注册认证器时会包含 <code>attestedCredentialData</code>，而验证时不包含</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>\n<code>UV</code>：用户是否已验证</li>\n<li>保留位</li>\n<li>\n<code>UP</code>：用户是否在场</li>\n</ul>\n</li>\n<li>\n<code>signCount</code>：签名计数，长度 4 字节</li>\n<li>\n<code>attestedCredentialData</code>：包含公钥等凭据数据，变长。其结构如下：\n<ul>\n<li>\n<code>aaguid</code>：认证器的 AAGUID (Authenticator Attestation GUID)，对于同一型号的认证器，它们的 AAGUID 是相同的</li>\n<li>\n<code>credentialIdLength</code>：标识 <code>credentialId</code> 的长度，长度 2 字节</li>\n<li>\n<code>credentialId</code>：凭证 ID，和 <code>rawId</code> 一致，长度由 <code>credentialIdLength</code> 定义</li>\n<li>\n<code>credentialPublicKey</code>：CBOR 编码的 COSE 格式的凭证公钥，变长</li>\n</ul>\n</li>\n<li>\n<code>extensions</code>：扩展数据，变长，本文不讨论</li>\n</ul>\n<blockquote><p>出于隐私考虑，如果不要求证明，认证器会以 0 填充 AAGUID。</p></blockquote>\n<p>如果你的后端在使用 Node.js，这里有个工具函数可以帮你完成这一步（不考虑 <code>extensions</code>）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function parseAuthData(buffer){\r\n    let rpIdHash = buffer.slice(0, 32);\r\n    buffer = buffer.slice(32);\r\n  \r\n    let flagsBuf = buffer.slice(0, 1);\r\n    buffer = buffer.slice(1);\r\n\r\n    let flagsInt = flagsBuf[0];\r\n    let flags = {\r\n        up: !!(flagsInt &amp; 0x01),\r\n        uv: !!(flagsInt &amp; 0x04),\r\n        at: !!(flagsInt &amp; 0x40),\r\n        ed: !!(flagsInt &amp; 0x80),\r\n        flagsInt\r\n    }\r\n\r\n    let counterBuf = buffer.slice(0, 4);\r\n    buffer = buffer.slice(4);\r\n  \r\n    let counter = counterBuf.readUInt32BE(0);\r\n\r\n    let aaguid = undefined;\r\n    let credID = undefined;\r\n    let COSEPublicKey = undefined;\r\n\r\n    if(flags.at) {\r\n        aaguid = buffer.slice(0, 16);\r\n        buffer = buffer.slice(16);\r\n\r\n        let credIDLenBuf = buffer.slice(0, 2);\r\n        buffer = buffer.slice(2);\r\n\r\n        let credIDLen = credIDLenBuf.readUInt16BE(0);\r\n        credID = buffer.slice(0, credIDLen);\r\n\r\n        buffer = buffer.slice(credIDLen);\r\n        COSEPublicKey = buffer;\r\n    }\r\n\r\n    return {rpIdHash, flagsBuf, flags, counter, counterBuf, aaguid, credID, COSEPublicKey}\r\n}</pre>\n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>解开后，依赖方至少需要做四件事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>存储签名计数</li>\n<li>存储公钥</li>\n</ol>\n<blockquote><p>签名计数不一定从 0 开始。</p></blockquote>\n<p>对于公钥，也就是 <code>credentialPublicKey</code>，我们需要多一次 CBOR 解码，然后就可以得到类似这样的公钥：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    kty: \"EC\",\r\n    alg: \"ECDSA_w_SHA256\",\r\n    crv: \"P-256\",\r\n    x: \"ZGQALNfqo0L7HFYQHFHCS/X5db49z0ePnuQEs3w3X8w=\",\r\n    y: \"6qYxhnjYuez/Q8N6vX7nIIGfxFWdZ25NzQfZYuYOalA=\"\r\n}</pre>\n<p>然后可以选择适当的方法将其存储起来，之后的步骤本文就不再赘述了。现在，将目光拉回来，让我们看看包含证明的 <code>attestationObject</code> 是怎么样的。我们来看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"packed\",\r\n    attStmt: {\r\n        alg: -7,\r\n        sig: [48, 70, 2, 33, 0, ..., 132, 78, 46, 100, 21],\r\n        x5c: [\r\n            [48, 130, 2, 189, 48, 130, 1, 165, 160, 3, ..., 177, 48, 125, 191, 145, 24, 225, 169, 41, 248]\r\n        ]\r\n    },\r\n    authData: [211, 217, 43, 24, 199, ..., 158, 54, 87, 126, 54]\r\n}</pre>\n<p>这里有一个使用 \"packed\" 格式的证明。此时，<code>attStmt</code> 中包含三个值：</p>\n<ul>\n<li>\n<code>alg</code>：签名算法</li>\n<li>\n<code>sig</code>：签名值</li>\n<li>\n<code>x5c</code>：X.509 编码的证书链</li>\n</ul>\n<p>我们不会在这一节中详述对签名的验证。要了解更多信息，你可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。现在，让我们来看看如何处理验证过程中认证器发回的数据。我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"hmqdxPLit9...BWeVxZqdvU\",\r\n    type: \"public-key\",\r\n    rawId: \"hmqdxPLit9V...BWeVxZqdvU=\",\r\n    response: {\r\n        authenticatorData: \"09krGMcWTf...UFAAAABA==\",\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...XRobi5nZXQifQ==\",\r\n        signature: \"UsXZV3pvT3np8btj6V0g...WBkaqyt88DrD40qh+A==\",\r\n        userHandle: \"MmYxNWYzZjQyZjM...Tg2ZDY4NzhlNw==\"\r\n    }\r\n}</pre>\n<p><code>id</code>, <code>rawId</code> 和 <code>type</code> 和之前一样，这里就不再赘述了。让我们来看看 <code>response</code>。首先是 <code>clientDataJSON</code>，和之前的解法一样，要验证的内容也一样，只是 <code>type</code> 从 \"webauthn.create\" 变成了 \"webauthn.get\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"bnkd2CmrEuvKnAFXs2QlC3SKlg4XFvGtP4HJL1yEWyU\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.get\"\r\n}</pre>\n<p>然后是 <code>userHandle</code>。前面讲过，这是认证器在创建凭证时的用户 ID。如果用户在使用 U2F 认证器，很可能这一项为空，所以大部分情况下我们不关心这一项。</p>\n<p>接着来看 <code>authenticatorData</code>。这其实就是之前的 <code>attestedCredentialData</code>，只是这次不包含公钥。以相同的方式切开数据，我们应该可以得到 <code>rpIdHash</code>, <code>flags</code>和 <code>signCount</code> 三项。此时，依赖方至少需要做这三样事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>验证签名计数大于之前存储的计数，并更新存储的计数</li>\n</ol>\n<blockquote><p>如果签名计数比之前的小，那么这个认证器很可能是伪造的，应该中止验证并返回验证失败。同时，签名计数不一定每次按 1 递增，通常只要计数比此前的大就认为计数检查通过。</p></blockquote>\n<p>最后，我们来看 <code>signature</code>，也就是签名。不过这个签名不是简单的对挑战的签名，具体算法如图所示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\" alt=\"签名过程\" width=\"1034\" height=\"587\" class=\"aligncenter size-full wp-image-2231\"></a>\n<p>计算签名时，认证器会将 <code>authenticatorData</code> 与 <code>clientDataHash</code>（也就是 <code>clientDataJSON</code> 的 SHA-256 Hash）拼接起来，并使用对应的私钥签名。依赖方应该使用对应的公钥将其解密，并验证内容是否是 <code>authenticatorData</code> 与 <code>clientDataHash</code> 的拼接。这部分的计算不在本文的讨论范围内。</p>\n<p>最后，如果全部验证通过，返回验证成功。<span></span></p>\n<h2>验证认证器</h2>\n<p>WebAuthn 已经很安全了，但有的时候我们还要让它更安全一点。比如，如果用户在使用伪造的或是自制的认证器，认证器的安全性就得不到保证。此时，依赖方就需要验证认证器是否是可信的认证器。</p>\n<blockquote><p>这一过程仅发生在注册认证器时。此时，如果认证器验证通过，就可以存储公钥，后续步骤和之前描述的一致。</p></blockquote>\n<blockquote><p>再次说明，如果不是对安全性有极高的要求，向认证器索取证明以验证认证器是否可信是没有必要的。此外，验证认证器需要依赖方自行维护可信认证器列表，大大增加了维护的复杂性。</p></blockquote>\n<p>在调用 <code>navigator.credentials.create()</code> 时，我们可以将 <code>attestation</code> 设置为非 \"none\" 来向认证器索取证明。除无证明外，WebAuthn 定义了四种证明方式：</p>\n<ul>\n<li>Basic Attestation (Basic) ：基础的证明方式，认证器会使用认证器私钥签名</li>\n<li>Self Attestation (Self) ：自证明，认证器会使用凭证私钥签名</li>\n<li>Attestation CA (AttCA) ：认证器会使用多个证明私钥之一签名</li>\n<li>Elliptic Curve based Direct Anonymous Attestation (ECDAA) ：通过 <a href=\"https://en.wikipedia.org/wiki/Direct_Anonymous_Attestation\">DAA</a> 实现的匿名证明</li>\n</ul>\n<blockquote><p>和验证过程一样，这里签名的目标是 <code>authenticatorData</code> 和 <code>clientDataHash</code> 的连接。</p></blockquote>\n<p>还记得 <code>create()</code> 时 <code>attestation</code> 可选的三个值吗？这个值会决定认证器最终使用哪种方式进行证明。复习一下：</p>\n<ul>\n<li>\n<code>none</code>：大部分情况下认证器会选择不进行证明，部分认证器会进行自证明。此时 AAGUID 会被 0 填充</li>\n<li>\n<code>indirect</code>：认证器会试图通过替换 AAGUID 和选择合适的证明方式来进行匿名证明，具体方式由认证器选择</li>\n<li>\n<code>direct</code>：认证器会提供最直接的证明信息</li>\n</ul>\n<p>注意，大部分情况下，当认证器需要向依赖方证明自己可信时需要提供认证器公钥，<strong>这会触发浏览器提示，只有用户同意后认证器才会进行证明，否则认证器将不提供证明。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\" alt=\"浏览器提示\" width=\"446\" height=\"283\" class=\"aligncenter size-full wp-image-2217\"></a>\n<blockquote><p>为什么浏览器会说“安全密钥的品牌和型号”？事实上，为了避免用户通过认证器证书被跨依赖方追踪，FIDO 要求使用相同认证器证书的认证器的数量不能少于 100,000。于是大部分认证器厂商会选择<strong>让同一型号的认证器共用同一份证书。</strong>因此，浏览器的会询问用户是否同意“查看安全密钥的品牌和型号”。</p></blockquote>\n<blockquote><p>Android Safety Net 不会向用户询问是否同意，而是会静默进行证明。</p></blockquote>\n<p>当证明不为空时，依赖方收到数据后根据 <code>attestationObject.fmt</code> 的不同，需要选择不同的验证方式来验证认证器的可信情况。出于篇幅原因，这里我们不会讨论每一种 <code>fmt</code> 的验证方式，更多信息你可以查阅 <a href=\"https://www.w3.org/TR/webauthn/#defined-attestation-formats\">W3C 文档</a>。</p>\n<p>当 <code>fmt</code> 为 <code>packed</code> 时，<code>attestationObject.attStmt</code> 可能会有三种格式：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">// 自证明\r\n{\r\n    alg, // 算法\r\n    sig // 签名\r\n}\r\n// 基础或证明 CA 证明\r\n{\r\n    alg,\r\n    sig,\r\n    x5c // X.509 证书链\r\n}\r\n// 椭圆曲线证明\r\n{\r\n    alg,\r\n    sig,\r\n    ecdaaKeyId // ECDAA-Issuer 公钥标识符\r\n}</pre>\n<p>此时，依赖方需要检查证书符合预期格式并检查证书是否在可信链上。首先，如果证明中既没有 <code>ecdaaKeyId</code> 也没有 <code>x5c</code>，就说明这个证明使用的是自证明，只需使用认证器提供的公钥验证即可；如果有 <code>x5c</code>，那么就需要验证 <code>x5c</code> 中的证书是否在可信链上。将 <code>x5c</code> 中的每个证书以 Base64 编码，按 64 个字符切开，并在头尾加上 <code>-----BEGIN CERTIFICATE-----</code> 和 <code>-----END CERTIFICATE-----</code>就能得到一个证书字符串了。之后，依赖方需要验证证书是否可信。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function base64ToPem(b64cert){\r\n    let pemcert = '';\r\n    for(let i = 0; i \n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>至于 <code>ecdaaKeyId</code>，由于目前应用较少，处理方法可能需要你另寻资料了。检查证书的具体步骤已经超出了本文的范围，具体可以查阅<a href=\"https://medium.com/@herrjemand/verifying-fido2-packed-attestation-a067a9b2facd\">这篇文章</a>（英文）。</p>\n<blockquote><p>你可以在 <a href=\"https://fidoalliance.org/metadata/\">FIDO Metadata Service</a> 找到各大厂商认证器的可信证书链。</p></blockquote>\n<p>当在 Android 上调起 WebAuthn 时，大部分情况下 <code>fmt</code> 将会为 <code>safety-net</code>。此时 <code>attestationObject.attStmt</code> 的结构会是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    ver: \"200616037\",\r\n    response: {\r\n        type: \"Buffer\",\r\n        data: [101, 121, 74, 104, 98, ..., 115, 104, 104, 82, 65]\r\n    }\r\n}</pre>\n<p>此时，<code>clientDataJSON</code> 中还会出现 <code>androidPackageName</code> 键，值是调起 WebAuthn 验证的应用的包名，如 Chrome 就是 \"com.android.chrome\"。</p>\n<p>在这个证明中，<code>data</code> 其实是一个 JWT 字符串，我们可以将它编码为字符串并将其按照 JWT 进行解码（别忘了验证 JWT 签名）。最终我们会得到一个类似这样的 Payload：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    nonce: \"0QAurN4F9wik6GEkblDJhGuf4kuaqZn5zaaxlvD1hlA=\",\r\n    timestampMs: 1584950686460,\r\n    apkPackageName: \"com.google.android.gms\",\r\n    apkDigestSha256: \"2BQHno+bmWWwdLUYylS8HLt5ESJzci3nt2uui71ojyE=\",\r\n    ctsProfileMatch: true,\r\n    apkCertificateDigestSha256: [\r\n        \"8P1sW0EPicslw7UzRsiXL64w+O50Ed+RBICtay2g24M=\"\r\n    ],\r\n    basicIntegrity: true,\r\n    evaluationType: \"BASIC\"\r\n}</pre>\n<p>其中包含了有关设备状态的一些信息。比如说，如果 <code>ctsProfileMatch</code> 为 <code>false</code>，那么该设备很有可能被 root 了。对于高安全要求的场景，我们可以视情况进行验证。</p>\n<p>同时我们可以在 JWT Header 中验证证明的有效性。我们应该能取得这样的 Header：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    alg: \"RS256\",\r\n    x5c: [\r\n        \"MIIFkzCCBHugAwIBAgIR...uvlyjOwAzXuMu7M+PWRc\",\r\n        \"MIIESjCCAzKgAwIBAgIN...UK4v4ZUN80atnZz1yg==\"\r\n    ]\r\n}</pre>\n<p>这里的结构就和上方的 <code>x5c</code> 验证类似了。具体步骤可以参考<a href=\"https://medium.com/@herrjemand/verifying-fido2-safetynet-attestation-bd261ce1978d\">这篇文章</a>（英文）。</p>\n<p>其他所有格式的验证方式也都可以在<a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">这篇文章</a>（英文）中找到。<span></span></p>\n<h2>无用户名登录</h2>\n<p>认证器已经代替了密码，可是这还不够！在进行第一因素认证（即使用 WebAuthn 登录）时，我们还是需要输入用户名，然后才能进行身份认证。懒惰是第一生产力，我们能不能不输入用户名就进行身份认证呢？实际上，大部分认证器都允许我们无用户名登录。<strong>而这一特性的核心就是 Resident Key 客户端密钥驻留。</strong></p>\n<p>你可以思考一下，为什么普通的 WebAuthn 为什么不能实现无用户名登录？事实上，大部分认证器为了实现无限对公私钥，会将私钥通过 Key Warp 等技术加密后包含在凭证 ID 中发送给依赖方，这样认证器本身就不用存储任何信息。不过，这就导致需要身份认证时，依赖方必须通过用户名找到对应的凭证 ID，将其发送给认证器以供其算出私钥。</p>\n<blockquote><p>Yubikey 实现了一个基于 HMAC 的算法，认证器可以在私钥不离开认证器的前提下（常规的 Key Warp 算法中实际上私钥离开了认证器）通过一些输入和凭证 ID 重新计算私钥，你可以阅读<a href=\"https://www.yubico.com/blog/yubicos-u2f-key-wrapping/\">这篇文章</a>了解更多。</p></blockquote>\n<blockquote><p>客户端通过凭证 ID 查找对应认证器的算法根据系统的不同是不同的。通常凭证 ID 中会包含认证器信息，因此系统可以通过凭证 ID 找到对应的认证器。</p></blockquote>\n<p>要避免输入用户名，我们可以要求认证器将私钥在自己的内存中也存储一份。这样，依赖方无需提供凭证 ID，认证器就可以通过依赖方 ID 找到所需的私钥并签名公钥。以下是具体流程：</p>\n<p>注册时：</p>\n<ol>\n<li>依赖方请求新建凭证，同时要求启用客户端密钥</li>\n<li>认证器生成一对公私钥，并将私钥存储在永久内存中且与依赖方 ID 及用户 ID 绑定，随后将公钥发送给依赖方以供存储</li>\n<li>依赖方将用户 ID 即公钥与用户绑定</li>\n</ol><p>验证时：</p>\n<ol>\n<li>依赖方请求验证，但不必提供除依赖方 ID 以外的更多信息</li>\n<li>用户选择认证器</li>\n<li>认证器根据依赖方 ID 找到对应私钥</li>\n<li>如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录</li>\n<li>确定私钥后，认证器签名挑战并将其返回，同时返回用户 ID</li>\n<li>依赖方通过用户 ID 找到对应用户并用对应公钥检查签名，正确则允许对应用户登录</li>\n</ol><blockquote><p>可以看到，这个特性同时要求认证器存储用户 ID，即上面提到过的 <code>userHandle</code>。依赖方需要根据此信息找到对应用户，因此不支持 <code>userHandle</code> 的 U2F 认证器无法进行无用户名登录。</p></blockquote>\n<blockquote><p>如之前所说，<strong>认证器能永久存储的私钥数量是有限的</strong>，因此只应在真正需要无用户名登录的时候启用此特性。</p></blockquote>\n<blockquote><p>目前暂时没有办法检测认证器是否支持客户端密钥驻留，因此在无用户名验证失败时应 fallback 至常规的 WebAuthn 验证，即向用户询问用户名。</p></blockquote>\n<p>现在让我们来看看如何实现这一特性吧。首先，调用 <code>navigator.credentials.create()</code> 时我们需要注意两个参数：<code>requireResidentKey</code> 必须为 <code>true</code>，<code>userVerification</code> 必须为 \"required\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"5-6\">navigator.credentials.create({\r\n    publicKey: {\r\n        ...\r\n        authenticatorSelection: {\r\n            requireResidentKey: true,\r\n            userVerification: \"required\"\r\n            ...\r\n        },\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Windows Hello <strong>似乎</strong>会存储所有已注册的凭据，因此无论是否指定 <code>requireResidentKey</code>，你都可以通过 Windows Hello 进行无用户名登录。</p></blockquote>\n<p>随后，浏览器会询问用户是否允许认证器存储私钥。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\" alt=\"浏览器提示\" width=\"445\" height=\"285\" class=\"aligncenter size-full wp-image-2208\"></a>\n<p>如果用户同意，认证器会存储私钥，并和普通的 WebAuthn 一样返回信息。不过，依赖方收到数据之后，只需将公钥、用户 ID 与用户关联起来，而不必再将凭证 ID 与用户关联起来。至此注册完成。</p>\n<p>之后，在用户请求登录时，无需再向依赖方提供用户名。同时在传入 <code>navigator.credentials.get()</code> 的参数中也有两个需要注意：<code>userVerification</code> 必须为 \"required\"，同时 <code>allowCredentials</code> 必须为空。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"4-5\">navigator.credentials.get({\r\n    publicKey: {\r\n        ...\r\n        userVerification: \"required\",\r\n        allowCredentials: [],\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Android 暂不支持无用户名验证，空的 <code>allowCredentials</code> 会导致浏览器返回 <code>NotSupportedError</code> 错误。</p></blockquote>\n<p>此时，认证器会根据依赖方 ID 找到对应的私钥。如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录。用户选择后，认证器就会使用对应的私钥签名挑战并将其返回。此时，<code>userHandle</code> 一定不为空。</p>\n<p>依赖方收到数据后，需要将 <code>userHandle</code> 作为用户 ID 找到对应的用户，并使用对应的公钥验证签名。如果验证成功，则认为对应的用户身份认证成功，依赖方可以允许其登录。至此验证结束。</p>\n<blockquote><p>有的时候你可能会需要清除认证器中的密钥。绝大多数认证器都提供了对应的软件以供清除存储的密钥，但大部分情况下这会重置整个认证器，这意味着相关认证器此前的所有凭证均会失效。因此建议不要将日常使用的认证器作为开发测试用的认证器。</p></blockquote>\n<h2>从 U2F 认证迁移</h2>\n<p>如果你的服务此前提供了 U2F 第二因素认证，你可能会希望在将依赖方从 U2F 升级到 WebAuthn 时用户此前注册的 U2F 认证器仍然可用而无需重新注册。由于 WebAuthn 向后兼容 U2F 设备，用户是可以继续使用原有的 U2F 认证器的。不过，由于 WebAuthn 的依赖方 ID 与 U2F 的 <code>appid</code> 并不一定相同，你需要将原有的 U2F <code>appid</code> 随 WebAuthn 流程一起传递给认证器，认证器才能使用正确的私钥进行响应。</p>\n<p>要实现这一点，我们只需要在注册及认证仪式中使用 WebAuthn 的 <code>appid</code> 扩展。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    appid: \"https://example.com\" //U2F appid\r\n}</pre>\n<p>此时认证器便可以得到正确的私钥，之后的流程与正常情况一致；依赖方除了正常的 WebAuthn 流程外，不需要再做任何其它操作。</p>\n<h2>拓展阅读</h2>\n<p>我们的 WebAuthn 之旅到这里就真的结束了。不过，你仍然可以自行探究，了解更多。<strong>本文只是一个粗浅的使用指南</strong>，而被称为“Web 身份认证的未来”的 WebAuthn 的深层还要很多细节值得我们挖掘学习，不过本文不会再继续讨论了。</p>\n<p>如果你想了解更多关于 WebAuthn 的信息，最好的方法是直接阅读 <a href=\"https://www.w3.org/TR/webauthn\">W3C 规范</a>。此外，Yubico 也提供了不错的 <a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn 文档</a>。</p>\n<p>要了解更多认证器存储凭证的信息，你可以阅读<a href=\"https://duo.com/labs/tech-notes/how-security-keys-store-credentials\">这篇文章</a>（英文）。</p>\n<p>如果你想了解更多 Android Safety Net 是怎样运作的，可以观看<a href=\"https://youtu.be/8lv_9mydrjg\">这个视频</a>，并通过 <a href=\"https://developer.android.com/training/safetynet/attestation\">Google 的文档</a>了解 Android Safety Net 的更多信息。</p>\n<p>如果你想方便地调试 WebAuthn，<a href=\"https://webauthn.me/\">webauthn.me</a> 提供了一个非常直观方便的<a href=\"https://webauthn.me/debugger\">调试器</a>。</p>\n<h1>参考资料</h1>\n<p><a href=\"https://www.w3.org/TR/webauthn\">WebAuthn Level 1 规范 - W3C</a><br><a href=\"https://github.com/w3c/webauthn\">WebAuthn Level 2 草案 - W3C</a><br><a href=\"https://blog.techbridge.cc/2019/08/17/webauthn-intro/\">一起来了解Web Authentication - TechBridge 技术共笔部落格</a><br><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\">Introduction to WebAuthn API - Medium</a><br><a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">WebAuthn/FIDO2: Verifying responses - Medium</a><br><a href=\"https://obeta.me/posts/2019-03-01/WebAuthn%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8\">WebAuthn介绍与使用 - obeta</a><br><a href=\"https://webauthn.io/\">webauthn.io</a><br><a href=\"https://webauthn.guide/\">webauthn.guide</a><br><a href=\"https://webauthn.me/\">webauthn.me</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion\">Attestation and Assertion - MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Authentication_API\">Web Authentication API - MDN</a>（顺便翻译了一半）<br><a href=\"https://fidoalliance.org/fido-technotes-the-truth-about-attestation/\">FIDO TechNotes: The Truth about Attestation - FIDO Alliance</a><br><a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn Developer Guide - Yubico</a><br><a href=\"https://en.wikipedia.org/wiki/WebAuthn\">WebAuthn - Wikipedia</a><br><a href=\"https://techcommunity.microsoft.com/t5/identity-standards-blog/all-about-fido2-ctap2-and-webauthn/ba-p/288910\">All about FIDO2, CTAP2 and WebAuthn - Microsoft Tech Community</a><br><a href=\"https://webauthn-doc.spomky-labs.com/\">Webauthn Framework</a><br><a href=\"https://zhuanlan.zhihu.com/p/25279015\">如何开发支持 FIDO U2F 登录的网站 - 知乎专栏</a><br></p></pre>\n","link":"https://flyhigher.top/develop/2160.html"},{"title":"NLP 找门：用朴素贝叶斯进行文本分类","date":"2020-01-29 11:39:58","description":"\n<blockquote>\n<p>有一天，神收到了一封垃圾邮件，于是世界上就有了朴素贝叶斯算法。</p>\n<footer>——我瞎编的</footer>\n</blockquote>\n<p>为什么这篇文章的标题是 NLP 找门呢？因为如果你看完了这篇文章，你就可以<strong>准备入门</strong>自然语言处理 (<strong>N</strong>atural <strong>L</strong>anguage <strong>P</strong>rocessing) 了。我会把这篇文章当作一篇彻彻底底的 NLP 入门文章来写，尽量避免“专业高端”词汇和“全是奇怪符号”的式子，这样<strong>只要你有高中数学基础</strong>，就能毫无压力地看完这篇文章，学会使用朴素贝叶斯分类算法分类文本。</p>\n<p>让我们开始吧。</p>\n<h1>所以，啥是朴素贝叶斯？</h1>\n<p>简单来说，朴素贝叶斯 (Naïve Bayes) <strong>是一个简单但高效的分类算法</strong>，在进行不复杂的文本分类时高效且拥有不低的准确度，判断垃圾邮件就是用朴素贝叶斯进行文本分类的一个经典例子。当然朴素贝叶斯分类不仅能用在 NLP 中，在许多分类问题中朴素贝叶斯也有非常好的效果，但我们今天只关注它在 NLP 中的应用。</p>\n<p>要了解朴素贝叶斯，我们要先来了解一下贝叶斯定理。</p>\n<blockquote>\n<p>每增加一个数学公式都会使读者减半。</p>\n<footer>——霍金</footer>\n</blockquote>\n<p>那么，就让我们先来看看贝叶斯定理的公式吧（笑</p>\n<p>$$P(A|B) = \\frac{P(AB)}{P(B)} = \\frac{P(B|A)P(A)}{P(B)}$$</p>\n<p>其实还是很简单的，运用高中的条件概率知识就能理解。本质上，贝叶斯定理给出了一种方法，使得我们可以在 \\(P(A|B)\\) 和 \\(P(B|A)\\) 之间互相转换，因为通常情况下它们是不一样的。</p>\n<p>要更好地理解，请考虑这样一个例子：</p>\n<blockquote><p>假设有一个学校图书馆，图书管理员正为找不到某本书而发愁。已知老师有 70% 的意愿借走这本书，而是学生的意愿是 30%，这个学校的师生比例是 1:10，那么借走这本书的人是老师的概率有多大？</p></blockquote>\n<p>设学校总人数为 \\(T\\)，我们可以很容易地写出这样的一个式子：</p>\n<p>$$\\begin{align} P &amp; = \\frac{T\\cdot\\frac{1}{11}\\cdot 70\\%}{T\\cdot\\frac{1}{11}\\cdot 70\\%+T\\cdot\\frac{10}{11}\\cdot 30\\%} \\\\ &amp; = \\frac{70\\%}{70\\%+10\\times30\\%} \\\\ &amp; = \\frac{7}{37} \\end{align}$$</p>\n<p>这就是贝叶斯定理了！等等，你可能会挠挠头，这哪里是贝叶斯了？别急，如果我们把最上面的式子换个字母的话...</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>在这里，\\(H\\) 指 Hypothesis，即假设，而 \\(E\\) 指 Evidence，即证据。这样，这个式子就很好理解了，在我们上面的例子里，借走书是证据，那么 \\(P(E)\\) 就是某个人选择借走这本书的概率；这个人是老师是假设，那么这个人是老师的概率是 \\(P(H)\\)。<strong>注意这里的概率指在学校中抽一个人是老师的概率，并不是“在借走书的前提下”这个人是老师的概率</strong>，而“在借走书的前提下”这个人是老师的概率应该是 \\(P(H|E)\\)，也正是我们要求的概率。同样地，而“这个人是老师”的前提下借走书的概率就是 \\(P(E|H)\\) 了。</p>\n<p>那么再来看看上面我们凭小学知识就列出的计算式，如果把里面的具体数据换成概率来表示的话，这个式子就会变成...</p>\n<p>$$P(H|E) = \\frac{T\\cdot P(E|H)P(H)}{T\\cdot P(E|H)P(H) + T\\cdot P(E|\\neg H)P(\\neg H)}$$</p>\n<p>好吧，这里解释一下，\\(\\neg\\) 符号表示“非”，所以 \\(P(E|\\neg H)\\) 表示在“这个人不是老师”的前提下借走书的概率。而 \\(T\\cdot P(E|H)P(H)\\) + \\(T\\cdot P(E|\\neg H)P(\\neg H)\\)，即“可能借走书的老师的数量 + 可能借走书的学生的数量”，就是“可能借走书的人的数量”了，也就是 \\(T\\cdot P(E)\\)。上下消去 \\(T\\)，我们就能得到上面的式子了。</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>这就是贝叶斯了定理。如果你还是不太清楚，可以去看看 3Blue1Brown 的<a href=\"https://www.bilibili.com/video/av84799361\">这个视频</a>，图形化的讲解会清晰很多。</p>\n<p>这里我要提一下这个式子里各部分的专有名称了（“专业高端”词汇警告），你可以不记住，直接看后面。</p>\n<ul>\n<li>\\(P(H|E)\\) 叫做 \\(H\\) 的<strong>后验概率</strong>，反之亦然</li>\n<li>\\(P(H)\\) 叫做 \\(H\\) 的<strong>先验概率</strong>，反之亦然</li>\n<li>特别地，我们把 \\(P(E|H)\\) 称作<strong>“似然值”</strong>，即 likelihood</li>\n</ul>\n<p>那什么是朴素贝叶斯呢？按上面所说的，朴素贝叶斯是一种分类算法。简单来说，朴素贝叶斯将一个对象的各个特征考虑为互相独立，然后根据这些特征的概率的乘积来判断对象所属的分类。基本原理如下：</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)} \\propto P(E|H)P(H) = P(H)\\prod_{i}P(W_i|H)$$</p>\n<p>在这里，\\(W_i\\) 指某一对象的第 \\(i\\) 个特征，对于文本分类来说，这就是一段文本中的某个单词。</p>\n<p>朴素贝叶斯之所以“朴素”，是因为它要求<strong>各个特征间是独立的</strong>，在文本分类中也就是各个单词之间互不干扰。虽然思路简单的代价是适用范围变窄，不过由于这样的简化在很多情况下已经足够了，因此实际上朴素贝叶斯的应用范围非常广。<del>你看朴素贝叶斯 <strong>N</strong>aïve <strong>B</strong>ayes 的缩写都是 NB 了，能不厉害吗（逃</del></p>\n<h1>那么，咋分类啊</h1>\n<p>看来你这下完全听懂了呢（笑），是时候看看如何在 NLP 中应用朴素贝叶斯了。和上面一样，我们用一个具体的例子来说明。我们的目标是让电脑学会分类美国共和党和民主党的演讲稿，由于两个党派的演讲风格不同，所以这样的分类在理论上是可行的。</p>\n<div class=\"wp-block-file\">\n<a href=\"https://acdn.flyhigher.top/nlp/material.zip\" download>material.zip</a><a href=\"https://acdn.flyhigher.top/nlp/material.zip\" class=\"wp-block-file__button\" download>下载</a>\n</div>\n<p>上面我们要用到的数据集，你可以下载下来一起动手玩一玩。先说一下数据集的数据结构吧，压缩包里有两个文件，<code>train.txt</code> 将会被当作训练数据集，而 <code>test.txt</code> 则会作为训练结束后的验证数据集。两个文本文件里数据的结构是类似的，就像这样：</p>\n<pre class=\"EnlighterJSRAW\">BLUE WELL I AM SO HONORED AND PERSONALLY UNKNOWNWORD TO BE HERE...\r\nRED THANK YOU . THIS IS QUITE AN INSTITUTION . IT'S GOOD TO BE...</pre>\n<p>每行都是一篇演讲稿，每行的第一个单词指明了这篇演讲稿所属的党派，<code>RED</code> 指共和党，而 <code>BLUE</code> 指民主党。所有单词和符号都已经被转为大写并由空格分隔方便处理。<code>train.txt</code> 有共和党演讲稿和民主党演讲稿各 23 篇，<code>test.txt</code> 有 6 篇共和党演讲稿，12 篇民主党演讲稿。</p>\n<p>明白了？那我们就开始吧。</p>\n<h2>捋捋思路</h2>\n<p>首先，我们需要考虑如何在文本分类中应用朴素贝叶斯。很简单，按朴素贝叶斯的思路，<strong>计算每个词在某一分类下的出现概率，然后将某篇文章的所有词的概率相乘，再乘以该分类的先验概率，就可以得到某篇文章在某一分类下的概率。</strong></p>\n<p>$$P(Class|Article) = P(Class)\\prod_{i}P(Word_i|Class)$$</p>\n<p>各个分类概率都计算完成后，概率最高的那个分类就是这篇文章可能所属的分类。这个思路的核心就是用词决定了文本风格，文本的不同类别用词会有差异，只要能量化这些差异就可以分类文本。在我们的例子中，我们可以从 <code>train.txt</code> 中统计各个词汇的出现情况，然后用 <code>test.txt</code> 中的数据按上面的算法验证我们算法的准确性。</p>\n<p>这个思路很简单也很清晰，但还有一些问题需要解决。<strong>第一，有的时候，我们的测试数据集中可能会出现一个在训练数据集中没有出现过的词语。这个时候，朴素贝叶斯的计算结果会是 0。</strong>如果我们把 0 乘进式子中，那就别想得到正常的结果了。所以，我们还需要对计算某一单词在某一分类中的式子稍加改进。使用拉普拉斯平滑，就可以避免出现概率为 0 的情况。别被名字吓到，拉普拉斯平滑是一种非常简单的平滑方法：在分子上 +1，在分母上加整个取值范围，这样就可以给整个分式加上非常微小的偏移，避免出现 0。</p>\n<p>$$\\begin{align} P(Word_i|Class) &amp; = \\frac{Word_iCountInClass}{AllWordCountInClass} \\\\ &amp; \\approx \\frac{Word_iCountInClass + 1}{AllWordCountInClass + UniqueWordCount} \\end{align}$$</p>\n<p><strong>第二，对于长文本，大部分词语在某一分类中的出现概率是远小于 1 的，加上长文本词汇量大，往往概率相乘的结果会非常小。</strong>受限于计算机处理浮点数的原理，精确处理这么小的数字是很麻烦的。幸好，运用一些简单的数学知识就可以将其转化为更精确的表达，<strong>那就是取对数。</strong></p>\n<p>首先，将概率计算结果取对数并不影响我们的计算结果。因为取对数是一个单调递增的操作，而我们计算概率只是为了排序选择概率最高的分类，因此取对数是不影响我们排序的。而把多项式取对数，等于把多项式的每一项取对数后相加。所以我们有：</p>\n<p>$$\\lg{\\Big(P(Class)\\prod_{i}P(Word_i|Class)\\Big)} = \\lg{P(Class)} + \\sum_i\\lg{P(Word_i|Class)}$$</p>\n<p>大部分情况下，在每一次取对数的时候，要取对数的数字的大小，即 \\(P(Word_i|Class)\\) 尚还在计算机能处理的范围内，<strong>因此我们可以放心地使用取对数的方法</strong>，避免计算机精度不够影响结果。</p>\n<p><strong>第三就是在某些情况下，可能会有部分词语干扰计算结果</strong>，如 and, is 这类的被大量使用的中性词。如果希望得到更好的结果，我们可以维护一个停用词表，在计算时排除停用词即可。或者，我们可以在计算完每个单词的出现数量后，排除数量最多的前 \\(N\\) 个单词，避免这些单词过多地影响计算。</p>\n<h2>写点代码</h2>\n<p>现在我们终于可以开始实战，写点代码了。我会用简单的 Python 来表达思路。好了，理一理思绪，第一步我们要做的，是统计训练数据集中的用词情况。具体来说，根据上面的思考，我们需要统计的有：</p>\n<ul>\n<li>每个单词在各分类中出现的数量</li>\n<li>各分类中的不重复词数量</li>\n</ul>\n<p>用 Python 简单表示如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\"># 读入数据过程略...\r\ndata_raw = \"读入的数据\".split('\\n') # 按行分隔\r\ndata_blue = []\r\ndata_red = []\r\nword_count_blue = {}\r\nword_count_red = {}\r\n\r\nfor line_data in data_raw:\r\n    word_list = line_data.split(\" \") # 分隔单词\r\n    if word_list[0] == \"BLUE\":\r\n        for i in range(1,len(word_list)):\r\n            if not is_excluded(word_list[i]): # 判断是否为停用词\r\n                data_blue.append(word_list[i])\r\n                # 统计单词出现次数\r\n                word_count_blue.setdefault(word_list[i], 0)\r\n                word_count_blue[word_list[i]] += 1\r\n    elif word_list[0] == \"RED\":\r\n        # Class = red 时同理...\r\n\r\n#统计非重复词\r\nunique_words_blue = list(set(data_blue))\r\nunique_words_red = list(set(data_red))</pre>\n<p>训练过程到这里就结束了，计算机已经知道了各政党演讲的用词习惯。很简单吧？接下来我们就要使用测试数据集来测试准确度了。<strong>这里开始就涉及到朴素贝叶斯的计算了</strong>，可能会稍微复杂一点点。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">import math\r\n#读入测试数据过程略...\r\ntest_data_raw = \"读入的数据\".split('\\n') # 按行分隔\r\ntest_data = []\r\n\r\nfor line_data in test_data_raw:\r\n    if line_data[0] == \"BLUE\":\r\n        content_data = line_data.split(\" \").pop(0)\r\n        test_data.append({\"class\": \"blue\", \"content\": content_data})\r\n    elif line_data[0] == 'RED':\r\n        # ...\r\n\r\nfor line_data in test_data:\r\n    posibility_blue = 0\r\n    for word in line_data[\"content\"]:\r\n        # 计算各单词概率，取对数后相加，使用了拉普拉斯平滑\r\n        if word in word_count_blue:\r\n            posibility_blue += math.log((word_count_blue[word]+1)/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n        else:\r\n            posibility_blue += math.log(1/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n    # 最后加上该分类概率的对数\r\n    posibility_blue += math.log(len(data_blue)/(len(data_blue)+len(data_red)))\r\n\r\n    # 计算 Red 同理...</pre>\n<p>计算完成后，我们就得到每篇演讲稿在各分类下的概率了。之后，简单的比较就能得出推断的分类：如果 \\(P(Red|Article)\\) 大于 \\(P(Blue|Article)\\)，那么这篇演讲稿就更可能是共和党的演讲稿，反之则是民主党的演讲稿。</p>\n<p>很好理解吧？那么这么简单的思路，准确性怎么样呢？对于我们的例子，这是我设置了个别停用词后的结果：</p>\n<pre class=\"EnlighterJSRAW\">+-----+-------+--------------+--------------+-------+-------+\r\n|   ID|  Class|        P(Red)|       P(Blue)|  Guess| Status|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|    1|   Blue|  -23204.68377|  -22998.67066|   Blue|      √|\r\n|    2|   Blue|  -16438.44625|  -16137.48257|   Blue|      √|\r\n|    3|   Blue|  -33468.81214|  -32567.61801|   Blue|      √|\r\n|    4|   Blue|    -8606.2193|   -8601.50426|   Blue|      √|\r\n|    5|   Blue|  -12430.97436|  -11935.70662|   Blue|      √|\r\n|    6|   Blue|  -44033.02883|  -43877.55367|   Blue|      √|\r\n|    7|   Blue|   -16947.2851|  -16758.57542|   Blue|      √|\r\n|    8|   Blue|  -26957.26997|  -26889.62444|   Blue|      √|\r\n|    9|   Blue|  -27503.73985|  -27249.21828|   Blue|      √|\r\n|   10|   Blue|   -20528.4457|   -19991.1248|   Blue|      √|\r\n|   11|   Blue|  -20337.96493|  -19860.12831|   Blue|      √|\r\n|   12|   Blue|  -28409.28489|  -28118.98017|   Blue|      √|\r\n|   13|    Red|  -13756.01015|  -14488.11751|    Red|      √|\r\n|   14|    Red|  -17221.22732|  -17710.15936|    Red|      √|\r\n|   15|    Red|  -17397.45136|  -17899.98659|    Red|      √|\r\n|   16|    Red|  -10724.69095|  -11092.77837|    Red|      √|\r\n|   17|    Red|  -10402.40027|  -10859.48681|    Red|      √|\r\n|   18|    Red|   -9371.53792|    -9669.6769|    Red|      √|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|                                      Total: 18/18, 100.0% |\r\n+-----------------------------------------------------------+</pre>\n<p><strong>100% 的准确率哦！</strong>事实上，对于我们的这个例子，就算不设置停用词，我们仍能达到 100% 的分类准确率。朴素贝叶斯分类的确很 NB 呢。</p>\n<h1>更进一步</h1>\n<p>我们的探索到这里就结束了，但如果你有兴趣，完全可以继续探索下去。我们的例子是一个非常简化的例子，在实际情况中，还有很多问题需要解决。比如，对于中文及类似语言，不存在拉丁语系的天然分词结构，而朴素贝叶斯的文本分类是基于单词的，那么<strong>中文的分词就会是个问题；</strong>再比如，对于朴素贝叶斯分类来说，<strong>词语之间的顺序是不影响分类结果的</strong>，但这就会导致“今天心情很好，但昨天不好”和“昨天心情很好，但今天不好”在朴素贝叶斯看来是一样的，要想获得更好的结果，我们必须<strong>考虑词语的顺序。</strong></p>\n<p>这些问题，今天我们就不再深究了，但你可以自己探索。比如，引入思路同样很简洁的马尔科夫链，我们就可以让计算机学会考虑词语间的顺序，不过那就会是另一个话题了。</p>\n","link":"https://flyhigher.top/develop/1989.html"},{"title":"MDx 中增强页面可访问性的细节","date":"2020-01-25 16:45:04","description":"\n<blockquote><p>这篇文章本来是打算发在 <a href=\"https://mdxblog.flyhigher.top/\">MDx Blog</a> 的，不过写到后来发现这篇文章相对来说还是有价值的，于是就将这篇文章转移到了无垠，MDx Blog 则不再发表这篇文章。</p></blockquote>\n<p>从 MDx 开发之初，增强页面的可访问性就被列为了一个重要目标。从 HTML 语义化，到 ARIA 地标，再到 <code>prefers-reduced-motion</code>，随着浏览器对于增强页面可访问性的支持功能越来越多，MDx 也在不断地更新，让更多的人都能毫无困难地浏览、查看由 MDx 渲染的网页。本文会详细说明一些 MDx 中增强页面可访问性的细节，<strong>如果你希望增强自己开发的网页的可访问性，本文可能会对你有所帮助。</strong></p>\n<h1>基础性增强</h1>\n<p>增强可访问性，最重要也是最基础的一点就是 HTML 语义化。通过使用 HTML 5 语义化标签和 ARIA Role 标签，我们可以很方便地<strong>将整个网页在语义上分为几部分，而这将有效地改善屏幕阅读器对网页的分析质量，使视力障碍用户更好地浏览网页。</strong></p>\n<h2>HTML 语义化</h2>\n<p><strong>HTML 语义化属于增强页面可访问性的基础中的基础。</strong>通过使用语义化的 HTML 标签，我们可以方便地为网页中的各部分标记功能而不影响页面样式。随着符合 HTML 5 的现代化网页成为主流，语义化标签已被很大一部分网站所支持，我也不过多赘述了。就举几个常用的“地标性”标签吧：</p>\n<ul>\n<li>\n<code>header</code> 标签标记页眉，默认样式同 <code>div</code>，不要把它和 <code>head</code> 搞混了</li>\n<li>\n<code>main</code> 标签标记页面的主要内容，默认样式同 <code>div</code>\n</li>\n<li>\n<code>article</code> 标签标记文章（在 HTML 5 中它指任何独立或可复用的文本），默认样式同 <code>div</code>\n</li>\n<li>\n<code>footer</code> 标签标记页脚，默认样式同 <code>div</code>\n</li>\n<li>\n<code>nav</code> 标签标记页面导航栏区域，默认样式同 <code>div</code>\n</li>\n<li>\n<code>aside</code> 标签标记侧栏，默认样式同 <code>div</code>\n</li>\n<li>\n<code>section</code> 标签标记“一组内容”，你可以把它看作是划定网页中一块区域的通用标签，默认样式同 <code>div</code>\n</li>\n</ul>\n<p>只要用这些标签替代 <code>div</code> 而不是无脑使用 <code>div</code> 就能提高页面的可访问性。MDx 使用了这些标签来增强页面的可访问性。</p>\n<h2>下一步，ARIA</h2>\n<p>有的时候，出于一些原因，我们没法使用语义化的 HTML 标签，或者没有合适的语义化标签来标记内容，这时候<strong>我们就需要使用 ARIA (Accessible Rich Internet Applications，可访问的富互联网应用)。</strong>ARIA 的基础用法很简单，只要在相应元素上加上 <code>role</code> 属性指定该元素的功能即可。下面是一个简单的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;div role=\"navigation\"&gt;\r\n  &lt;ul&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page A&lt;/a&gt;&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page B&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page C&lt;/a&gt;&lt;/li&gt;\r\n  &lt;/ul&gt;\r\n&lt;/div&gt;</pre>\n<p>通过 <code>role=\"navigation\"</code>，我们把一个 <code>div</code> 标记为了导航栏区域。实际上，对屏幕阅读器来说，这和 <code>nav</code> 标签在语义上是一致的。上一节中的例子都可以分别用以下 ARIA Role 表示：</p>\n<ul>\n<li><code>role=\"heading\"</code></li>\n<li><code>role=\"main\"</code></li>\n<li><code>role=\"article\"</code></li>\n<li><code>role=\"contentinfo\"</code></li>\n<li><code>role=\"navigation\"</code></li>\n<li><code>role=\"complementary\"</code></li>\n<li><code>role=\"region\"</code></li>\n</ul>\n<p>除此以外，MDx 还使用了 <code>role=\"banner\"</code> 和 <code>role=\"search\"</code> 来分别标记页面中的顶部栏和搜索表单。另外，<strong>有的时候 <code>role</code> 属性还需配合 <code>aria-*</code> 属性一同使用</strong>，具体规则比较复杂，我就不在这里赘述了，具体可参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">WAI-ARIA Roles - MDN</a>。</p>\n<h1>媒体查询来帮忙</h1>\n<p>CSS 的媒体查询其实是一个非常强大的特性，<strong>妥善利用其中的一些特性，我们可以在网页外观上大大增强网页的可访问性。</strong>除了已经烂大街的“对浏览器窗口大小”响应的媒体查询，我会介绍 3 个很少有网站充分利用的媒体查询。</p>\n<h2>print</h2>\n<p><code>print</code> 媒体查询其实已经“历史悠久”了，<strong>只要使用 <code>@media print {...}</code> 就可以创建只在打印页面时生效的样式。</strong>通过这种方式，我们可以让页面在打印时应用一套为打印优化的样式，增强页面在物理纸张上的可访问性。</p>\n<blockquote><p>维基百科是对打印样式做了单独适配的著名例子。</p></blockquote>\n<p><strong>由于在打印的情况下，页面已经离开了“可交互”的范围，还有分页这种在屏幕中无需考虑的问题，要让页面在物理纸张上仍能被轻松地阅读，我们需要做一些特殊的适配。</strong>直接来看一个例子吧。以下是 MDx 针对打印情况进行的一些特殊优化，样式的具体理由已经写在了注释中。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media print {\r\n    /*隐藏不必要的元素*/\r\n    header, .mdx-ad-after-article, .mdx-ad-in-article, .mdx-post-money, .page-footer-nav, .mdx-same-posts, .spanout button, .mdui-drawer, .mdui-overlay, .mdui-menu, .mdx-share-img-dialog, .mdx-share-wechat-dialog {\r\n        display: none!important;\r\n    }\r\n\r\n    /*使用下划线标记链接*/\r\n    article a {\r\n        text-decoration: underline!important;\r\n    }\r\n    /*由于纸张不可交互，在链接后显示链接到的 URL*/\r\n    article a::after {\r\n        content: \"(\" attr(href) \")\";\r\n    }\r\n\r\n    /*强制白底黑字*/\r\n    html &gt; body {\r\n        background-color: white!important;\r\n    }\r\n    article p {\r\n        color: rgba(0,0,0,.8)!important;\r\n    }\r\n\r\n    /*对于纸张上的长文章，衬线字体拥有更好的可读性。以下字体列表来自 fonts.css*/\r\n    article {\r\n        font: 13pt Georgia, \"Nimbus Roman No9 L\", \"Songti SC\", \"Noto Serif CJK SC\", \"Source Han Serif SC\", \"Source Han Serif CN\", STSong, \"AR PL New Sung\", \"AR PL SungtiL GB\", NSimSun, SimSun, \"TW\\-Sung\", \"WenQuanYi Bitmap Song\", \"AR PL UMing CN\", \"AR PL UMing HK\", \"AR PL UMing TW\", \"AR PL UMing TW MBE\", PMingLiU, MingLiU, serif!important;\r\n    }\r\n\r\n    /*除部分元素外，禁止在元素内部分页*/\r\n    * {\r\n        page-break-inside: avoid;\r\n    }\r\n    article p, article a, #comments, article {\r\n        page-break-inside: auto;\r\n    }\r\n}</pre>\n<p>MDx 自 1.9.3 版本起已经包含了对文章页的打印样式优化。可以很容易地看出，优化后的样式在物理纸张上将更容易阅读。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\" alt=\"\" width=\"1345\" height=\"1602\" class=\"aligncenter size-full wp-image-1959\"></a>\n<h2>prefers-color-scheme</h2>\n<p><code>prefers-color-scheme</code> 是最近才被浏览器广泛支持的一个媒体查询，但它的功能却很强大：<strong>响应系统级黑暗模式。</strong>这样，我们可以在开启黑暗模式的系统中让网页具有更好的可读性。不过由于这个媒体查询直到最近才被广泛支持，因此大部分网站对此并没有进行适配。</p>\n<blockquote><p>一些适配这一特性的网站：少数派、微信公众平台（文章页）等。</p></blockquote>\n<p>通过像这样的媒体查询，我们可以在系统启用黑暗模式时让页面实时响应：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    body {\r\n        background-color: #212121;\r\n        color: rgba(255, 255, 255, .7);\r\n    }\r\n}</pre>\n<p><code>prefers-color-scheme</code> 一共有 3 个可能值：<code>no-preference</code>, <code>light</code> 和 <code>dark</code>。你也可以不像上面的例子那样默认使用亮色样式并在黑暗模式下启用黑暗样式，而可以反过来将黑暗样式作为默认，用亮色样式覆盖。在不支持的浏览器上将会显示默认样式（即媒体查询不会生效）。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<h2>prefers-reduced-motion</h2>\n<p>看名字就猜得出，<code>prefers-reduced-motion</code> 是和 <code>prefers-color-scheme</code> 师出同门的媒体查询。因此，和 <code>prefers-color-scheme</code> 一样，它也是在最近才获得了浏览器的广泛支持。它的作用也很强大：<strong>响应系统的“减弱动态效果”模式。</strong>这对某些不喜欢甚至无法接受动画的用户可能很有帮助。要知道，对有些用户来说这甚至是医疗上的必要。使用如下的媒体查询，我们可以在系统启用减弱动态效果模式时让页面实时响应，减弱动画：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-reduced-motion: reduce) {\r\n    /*只是一个示例，实际情况中可以保留一些淡入淡出效果*/\r\n    * {\r\n        transition: all 0s!important;\r\n        transform: none!important;\r\n    }\r\n}</pre>\n<p><code>prefers-reduced-motion</code> 只有 2 个可能值：<code>no-preference</code> 和 <code>reduce</code>，在不支持的浏览器上该媒体查询不会生效。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\" alt=\"\" width=\"792\" height=\"515\" class=\"aligncenter size-full wp-image-1962\"></a>\n<h1>黑暗模式适配</h1>\n<p>黑暗模式可不是简单地切换到黑底白字这么简单。<strong>单纯地使用黑底白字会导致页面元素之间对比度过高，文字刺眼，反而降低了页面的可访问性。</strong>我在下面总结了几条应用在了 MDx 中的黑暗模式优化规则和 Google 推荐的优化规则：</p>\n<p><strong>一是避免黑底白字。</strong>黑底白字看起来真的很难受，事实上，深灰和浅灰是黑暗模式最好的配色。比较下方例子里的两段文本，毫无疑问深灰色背景和浅灰色文字搭配的样式的可读性要比黑底白字高很多。（p.s. 有时候这条规则在白底黑字时也适用）</p>\n<p><strong>二是更改部分元素的亮度和对比度以增强可读性。</strong>你可能已经注意到了，下面优化的例子里标题文字的颜色改变了。很明显，未优化的黑暗模式中标题可读性不如优化的版本。在实际中，我们通常可以通过 CSS 滤镜来实现这一更改。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    h1 {\r\n        /*反相颜色后再将色相旋转 180 度，使亮度反相*/\r\n        filter: invert(1) hue-rotate(180deg);\r\n    }\r\n}</pre>\n<p><strong>三是避免让图片过亮。</strong>未经处理的图片通常会导致过高的对比度，降低可读性。在 MDx 中，我选择降低图片的亮度来避免图片刺眼，而 Google 的建议则是使图片灰度，不过这会影响图片的整体观感。无论是哪一种方案，都可以使用 CSS 滤镜来轻松实现。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    img { \r\n        /*MDx 方案*/\r\n        filter: brightness(.8);\r\n        /*Google 方案*/\r\n        filter: grayscale(.5);\r\n    }\r\n}</pre>\n<div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是未优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是经过优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n</div>\n<h1>其他细节</h1>\n<p>还有一些细节，虽然简单，但不可或缺。我把一部分没有在上文提到的 MDx 中的细节列在了这里。</p>\n<p><strong>一是允许页面缩放。</strong>在开发响应式页面时，很多网站会在页面头部添加这样一个 <code>meta</code>：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"&gt;</pre>\n<p>这样的 <code>meta</code> 设定了页面的宽度，却也固定了页面的缩放比例，用户难以手动放大网页。<strong>这样的设置对一部分视力障碍用户非常不友好</strong>，以至于苹果决定在自家的浏览器上忽略禁止缩放的 <code>meta</code>。按照 Google 的推荐，如果你在 MDx 设置中启用了“允许页面缩放”，那么 MDx 会输出这样的 <code>meta</code> 标签，允许页面进行五倍以内的缩放：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=5\"&gt;</pre>\n<p><strong>尽管很多时候放大页面会导致页面结构被破坏，但这大大增强了页面的可访问性，利大于弊。</strong>因此，在 MDx 中，“允许页面缩放”是默认启用的。</p>\n<p><strong>二是在跨设备阅读时同步阅读记录。</strong>这属于 MDx 的“元老级”功能之一。注意到页面右上角的那个“在其他设备上继续阅读”的按钮了吗？如果你滚动页面后重新点击它，你会发现二维码发生变化了。通过在二维码中记录阅读进度，用户在扫描二维码切换设备阅读时，MDx 在新设备上会自动滚动到和原设备上一致的位置——好吧，目前基于百分比的算法在某些情况下可能不太准，但我已经设计了一个更复杂但更精确的阅读进度记录算法，之后就会更新到 MDx 中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\" alt=\"\" width=\"1000\" height=\"574\" class=\"aligncenter size-full wp-image-1976\"></a>\n<p><strong>三是避免 Web 字体阻塞渲染。</strong>如果你在页面中使用了 Web 字体，在字体加载完成之前，浏览器可能不会渲染任何文本，这就导致用户可能需要等待一段时间才能开始浏览网页。Google 推荐使用 <code>font-display: swap;</code> 来向浏览器指定网页的 Web 字体渲染策略。这一规则会提供一个比较短的等待周期，如果在这段时间内 Web 字体没有完成加载，那么浏览器会以 fallback 字体渲染文本。任意时刻一旦 Web 字体完成渲染，浏览器就会使用 Web 字体重新渲染文本。这在大多数情况下都能满足可访问性的需求。</p>\n<p><strong>四是确保 html 元素具有合适的 <code>lang</code> 属性。</strong>这一属性声明了页面的主要语言，浏览器可以据此调整渲染策略，或者触发自动翻译；屏幕阅读器也能更好地阅读网页。</p>\n<p><strong>五是确保页面主要内容在丢失/禁用了 Javascript 甚至 CSS 的情况下仍然可用。</strong>作为一个以内容为主的网站，MDx 在禁用了 Javascript 的情况下页面主要内容仍然可用。这不只是为了 SEO，更是为了保证页面的可访问性。的确，目前的情况下，如果开启了 Lazyload，MDx 在禁用 Javascript 的情况下图片的确无法显示，但我会在后续版本中尽可能的优化这一问题。</p>\n<h1>附录：媒体查询开发技巧</h1>\n<p>有的时候，光有 CSS 响应媒体查询还不够，我们可能需要在 Javascript 中实时响应媒体查询。用如下代码就可以很简单地响应媒体查询：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">let mql = window.matchMedia(\"(prefers-reduced-motion: reduce)\");\r\nmql.addListener(handleMediaChange);\r\n\r\n//在添加监听后先调用一次，获得当前查询结果\r\nhandleMediaChange(mql);\r\n\r\nfunction handleMediaChange(mql){\r\n    if(mql.matches){\r\n        //查询匹配\r\n    }else{\r\n        //查询不匹配\r\n    }\r\n}</pre>\n<p>在开发上述媒体查询的过程中，我们需要频繁地切换系统的相应模式或者调出打印窗口。<strong>实际上，Chrome 提供了更简单的调试方法：</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1946\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\" alt=\"\" width=\"723\" height=\"681\"></a>\n<p>只要在这里更改模式，相关媒体查询就能实时生效。这不会影响其他标签页，在关闭开发者工具之后也会自动恢复系统设置。</p>\n","link":"https://flyhigher.top/develop/1912.html"},{"title":"MDx Blog 现已随 MDx 1.9.5 发布","date":"2020-01-22 17:54:11","description":"<p>随着 MDx 发布 1.9.5 更新，<a href=\"https://mdxblog.flyhigher.top/\" rel=\"noopener noreferrer\" target=\"_blank\">MDx Blog</a> 现已建立。我将会在 MDx Blog 中分享一些开发故事并发布 MDx 更新日志。</p>","link":"https://flyhigher.top/diary/1905.html"},{"title":"GitHub 2019 统计无垠版","date":"2020-01-12 13:02:00","description":"\n<h1>缘起</h1>\n<p>2019 年底，我突发奇想想要自己统计一番 GitHub 上存储库的一些信息。尽管 GitHub 有自己的<a href=\"https://octoverse.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">年度统计</a>，我还是想试着自己爬取一下，说不定能挖出什么有意思的信息，何况这是我第一次有机会处理比较大量的数据，也算是一种学习的过程吧。于是花了一下午写了个简单的爬虫（时间都花在增加 Rate Limit 上了...），然后扔在了两台服务器上开始跑（GitHub  API 真是好文明）。</p>\n<p>从 2019.11.21 3 时到 2020.1.12 24 时的 52 天 21 小时内，我的爬虫一共爬取了<strong>与 2,024,705 个用户有关<sup>*</sup>的 14,651,923 个公共存储库的基础信息</strong>，平均每秒爬取 3.2 个存储库。据 GitHub 的官方数据计算，我爬取了大约 15% 的存储库信息，但由于封禁库和私有库的数量未知，我暂时无法确定我爬取的存储库占公共库的比例。同时由于存储库数量较多，基本可以认为爬取到的样本在时间尺度上已经足够随机，可以通过统计得出一般结论。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\" alt=\"\" width=\"700\" height=\"606\" class=\"aligncenter size-full wp-image-1892\"></a>\n<p>爬到自己了，合影.jpg</p>\n<p>那么下面就来看看统计出来的一些结果吧。爬虫的技术细节和数据集下载放在文末。</p>\n<p>* 指这些用户拥有至少一个库</p>\n<h1>统计信息</h1>\n<p><strong>以下统计结果均基于已放于文末的数据集。</strong>由于爬虫爬取的时间跨度长，加上我并没有完整爬取 GitHub 所有存储库，因此我<strong>不能保证以下统计结果符合真实情况</strong>，各位可以下载数据集或自行爬取进行验证。</p>\n<h2>一些数据</h2>\n<div>\n<div>\n<div>\n<span>3,120,930</span><br>总爬取用户数</div>\n<div>\n<span>44.7%</span><br>的存储库创建<br>自 Fork</div>\n<div>\n<span>6.59%</span><br>的账户被删除或<br>封禁<sup>1</sup>\n</div>\n<div>\n<span>23,913</span><br>单用户拥有最大<br>库数量<sup>2</sup>\n</div>\n</div>\n</div>\n<p><sup>1</sup> 基于用户 ID 规律合理推断<br><sup>2</sup> 统计范围仅限于当前数据集</p>\n<p>比较出乎我意料的是创建自 Fork 的存储库的占比。我预估这样的存储库占比不会太低，但没有想到能接近一半。此外单用户拥有最大库数量也大大超出了我的预期，<a href=\"https://github.com/pombredanne\" rel=\"noopener noreferrer\" target=\"_blank\">pombredanne</a> 这个用户名下拥有将近 24k 的存储库，不过绝大多数都是 Fork 来的，在情理之中。此外<strong>这个数据集中</strong>拥有最多存储库的账户其实是一个组织 <a href=\"https://github.com/gitpan\" rel=\"noopener noreferrer\" target=\"_blank\">gitpan</a>，这个组织拥有 36,377 个存储库。</p>\n<h2>语言</h2>\n<p><canvas></canvas><br>\n首先必须要说明的是，在这个榜单中我<strong>排除了 HTML 和 CSS</strong>，因为在严格意义上它们不属于“编程语言”。如果把它们计算进来的话，分别有 640,368 个和 361,425 个存储库的主要语言分别是 HTML 和 CSS，这样在这份榜单中它们可以排到第 6 和 第 10 名。JavaScript 毫无疑问获得第一，第二名 Python 的热度则和 JavaScript 相差将近一半。<strong>此外还有 2,448,486 个存储库未能识别出语言，占比 16.7%。</strong>在上面的榜单之外，与机器学习和数据科学相关的语言还有 Jupyter Notebook 排名第 13，R 排名 20，Julia 排名 43。</p>\n<p>说实话这份排名和 GitHub 官方的排名<strong>差别很大</strong>，除了前三名，后面的基本都不太一样。我的排名统计结果完全基于 GitHub 对于存储库的主要语言识别，加上我的存储库数据不完整，和官方的数据不同是很正常的，可以做一个参考，但大概率还是官方排名更加准确。</p>\n<h2>许可证</h2>\n<p><canvas></canvas></p>\n<p>自 GitHub 推出许可证功能以来，拥有许可证的存储库比例升升降降，却始终没有超过一半。<strong>选择一个合适的许可证对项目的良好发展真的很有帮助</strong>，要了解如何选择合适的许可证，请参阅<a href=\"https://www.runoob.com/w3cnote/open-source-license.html\" rel=\"noopener noreferrer\" target=\"_blank\">这篇文章</a>。</p>\n<p><canvas></canvas></p>\n<p>对于拥有许可证的存储库，MIT<del> 麻省理工许可证 </del>总是占比最大的；第二则是 Apache-2.0 许可证。此外，WTFPL 许可证也挤入了前 15 名。</p>\n<h2>星标</h2>\n<p><canvas></canvas><br>\nStar 数量毫无疑问是一个存储库受欢迎程度的体现，而 Star 数高的项目基本上大家都了解过。<strong>截至爬取结束时间</strong>，GitHub 中 Star 数最多的库是 <a href=\"https://github.com/freeCodeCamp/freeCodeCamp\" rel=\"noopener noreferrer\" target=\"_blank\">freeCodeCamp</a> <del>非常完美的驼峰命名法</del>，其次则是著名项目 <a href=\"https://github.com/996icu/996.ICU\" rel=\"noopener noreferrer\" target=\"_blank\">996.ICU</a>。<a href=\"https://github.com/vuejs/vue\" rel=\"noopener noreferrer\" target=\"_blank\">Vue</a> 现在的 Star 数已经稳压 <a href=\"https://github.com/facebook/react\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> 一头，Vue YES! 此外 <a href=\"https://github.com/sindresorhus/awesome\" rel=\"noopener noreferrer\" target=\"_blank\">awesome</a> 也挤进第七名。<br><canvas></canvas><br>\n由于 Star 需要时间积累，新项目的 Star 数量很可能是比不过老项目的，这就会导致有实力的新项目无法出现在榜单中。因此我还统计了日均 Star 数，试图通过日均 Star 数来反映项目受欢迎的程度。<strong>由于正热门的项目会比老牌热门项目有优势，这一项的统计范围是 2020-01-01 之前的所有存储库。</strong>996.ICU 和 freeCodeCamp 再次出现在前 10 名，而最近的热门项目 <a href=\"https://github.com/wenyan-lang/wenyan\" rel=\"noopener noreferrer\" target=\"_blank\">wenyan</a> 则飙升至第 2 名。此外还有 <a href=\"https://github.com/menzi11/BullshitGenerator\" rel=\"noopener noreferrer\" target=\"_blank\">BullshitGenerator</a>，即最近热门的“狗屁不通文章生成器”和 <a href=\"https://github.com/evil-huawei/evil-huawei\" rel=\"noopener noreferrer\" target=\"_blank\">evil-huawei</a> 分列第 3 和第 5 名。<br><canvas></canvas><br>\n说实话这个曲线<strong>比我预估的陡多了。</strong>你可能已经注意到了，这个图表的横轴不是均匀缩放的，实际上曲线要比看起来陡很多。同时受爬取方式的影响，GitHub 中 Star 数较少的存储库数量远比我爬取到的多。也就是说，<strong>实际情况下曲线远比这个图表上的陡。</strong>拿点 Star 不容易啊。</p>\n<h2>名称</h2>\n<p><canvas></canvas><br>\n终于知道了原来存储库的名称是有长度限制的...尽管最长有 100 位，<strong>大部分人还是喜欢 8 位长的存储库名。</strong>此外 1 位长的名称也比我预估的要多一些。举几个存储库名称长度为 100 的例子吧。</p>\n<ul>\n<li>testing-something-elsetesting-something-elsetesting-something-elsetesting-something-elsetesting-some</li>\n<li>acts_as_validated_config_so_app_will_not_run_in_random_situation_and_qa_gays_will_not_cry_to_you_whe</li>\n<li>............................................________-....................................-.---......</li>\n<li>----------------------------------------------------------------------------------------------------</li>\n<li>nyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyan</li>\n</ul>\n<p>...创造力有够丰富的。</p>\n<p><canvas></canvas></p>\n<p>最近 GitHub 上有一种奇怪的风气，那就是建立 Awesome 合集<del>骗 Star</del>。看起来 Awesome 存储库满地都是，甚至还出现了关于 Awesome 的 Awesome 合集这种迷惑行为。于是我统计了一下，<del>还好，</del>占比<del>才</del> 0.5% 不到<del>，Awesomer 们任重而道远呐</del>。</p>\n<p><canvas></canvas></p>\n<p>尽管要在 github.io 上托管网站，存储库不一定要以 .github.io 结尾，但我还是统计了一下。拥有这类存储库的用户比我预想的要少一些，看来还有很多人没有完全发挥 GitHub 的完整实力啊<del>（比如我 Doge）</del>。同时<strong>这类存储库在所有存储库中占比 1.12%</strong>，看起来不多<del>，不过至少比 Awesome 多</del>。<br><canvas></canvas><br>\n看得出来 GitHub 对于用户名长度的限制是 1-40 位。用户名最短的 27 位占据了 <code>A-Z</code> 外加 <code>-</code> 的所有可能，而用户名最长的则是一个组织 <a href=\"https://github.com/UOIT-RESEARCH-database-information-group\" rel=\"noopener noreferrer\" target=\"_blank\">UOIT-RESEARCH-database-information-group</a>。不知道是巧合还是某种规律，<strong>最受欢迎的用户名长度和存储库名称长度一样，都是 8</strong>，有点意思。</p>\n<h2>创建时间</h2>\n<p><canvas></canvas><br>\n由于我并没有完整爬取所有存储库，我只能以相对值来统计每月新增存储库数量的变化趋势。<strong>在这个图表中，我将 2017-09 的数据设为了 100%。</strong>你一定一眼就能注意到 2017 年 6,7,8 月的“一柱擎天”。<del datetime=\"2020-02-05T09:18:30+00:00\">我第一次看到这个数据的时候的确愣了一下，不过就着这条新闻看就能明白为什么了：<strong>2017 年 6 月微软收购 GitHub。</strong></del></p>\n<blockquote><p>重新确认了一下，微软收购 GitHub 比这个高峰晚了一年，目前我对这个高峰没有什么很好的解释，如果你有什么思路的话欢迎评论。</p></blockquote>\n<p><strong>需要注意的是这张图表中我排除了 Fork 存储库</strong>，因为 Fork 存储库在 API 中的创建时间是原始存储库的时间，会影响整体趋势。此外，GitHub 中还有一个创建于 2007 年 10 月 29 日的存储库，那就是 <code>id: 1</code> 的...</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"mojombo\" data-mdxgithubp=\"grit\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/mojombo/grit\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>而它的创建者正是 GitHub 的创始人之一 Tom Preston-Werner。</p>\n<h1>一些有趣的结果</h1>\n<p>当初打算自己爬的目的之一就是想看看能不能挖出什么有意思的信息，结果真的有一些不挖不知道的信息。</p>\n<h2>奇怪的存储库</h2>\n<p>在爬取到的所有存储库中，<strong>有 3 个存储库是“无主”的</strong>，即它们的 owner 属性为空。这三个存储库的基本信息如下。</p>\n<div class=\"mdui-table-fluid mdui-table-hoverable\"><table class=\"mdui-table\">\n<thead><tr>\n<th>ID</th>\n<th>名称</th>\n<th>Forked</th>\n<th>Star</th>\n<th>语言</th>\n<th>许可证</th>\n<th>创建于</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>72385291</td>\n<td>vscode-redprl</td>\n<td>否</td>\n<td>10</td>\n<td>TypeScript</td>\n<td>apache-2.0</td>\n<td>2016-10-31 08:50:01</td>\n</tr>\n<tr>\n<td>181218346</td>\n<td>electron-sys</td>\n<td>否</td>\n<td>10</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-14 03:20:56</td>\n</tr>\n<tr>\n<td>181391880</td>\n<td>node-sys</td>\n<td>否</td>\n<td>6</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-15 09:33:08</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong>更奇怪的是这三个存储库“无主”的情况还不一样。</strong>第一个存储库可以通过 <code>/repositories</code> 这个 GitHub API 找到， <a href=\"https://api.github.com/repositories?since=72385290\" target=\"_blank\" rel=\"noopener noreferrer\">这个链接</a>中的第一个存储库就是它；而其余两个存储库甚至无法在 <code>/repositories</code> API 中找到。不过就算能在 API 中找到第一个存储库，它的 <code>html_url</code>，即 <code>https://github.com//vscode-redprl</code> 仍然是不可访问的。这可能是 GitHub 早期的一个 Bug 导致的，不过我仍然对爬虫是如何找到这三个存储库的以及这些 Stars 是哪里来的感到好奇。</p>\n<h2>奇怪的用户名</h2>\n<p>在爬虫爬了一段时间以后，API 中突然开始出现大量的以 fdp 开头的 18 位乱码作为用户名的用户。这些用户拥有的存储库和 starred 的存储库都为 0，而他们的 <code>html_url</code> 为 404。以下是几个例子。</p>\n<ul>\n<li>fdpEpolGCEdQX4ZlRJ</li>\n<li>fdp8XaVrdtmDZnO5pR</li>\n<li>fdp8XRAGnwAOkTr2Ya</li>\n</ul>\n<p>由于我的爬虫并没有超过 Rate Limit，所以我排除了这是污染数据的可能。我怀疑这可能是某种 Bot 账户，于是一边更新爬虫过滤掉了这些用户，一边给 GitHub 支持发邮件问了具体情况。过了两天 GitHub 回复我说这些是<strong>被自动判为可疑进而被封禁的用户</strong>（原话是 they have been flagged by our automated measures for detecting suspicious behavior）。<del>想到我正在疯狂爬取 GitHub，突然害怕.webp</del></p>\n<p>行吧。</p>\n<h1>技术细节</h1>\n<p>爬虫使用 Python3 编写，数据库使用 MySQL。爬虫共使用了 4 个 API Token，在两台服务器上分布式爬取。爬取思路为：</p>\n<ol>\n<li>通过 <code>/users</code> API 遍历用户，每个请求最多获取 30 个用户信息</li>\n<li>循环 30 个用户，分别获取 <code>/users/&lt;user_name&gt;/starred</code> 和 <code>/users/&lt;user_name&gt;/repos</code> API 中的存储库信息，每个请求最多获取 100 个存储库信息，超过 100 个的分页获取</li>\n<li>提取存储库信息，插入数据库。对于已存在的存储库，更新数据</li>\n<li>获取下 30 个用户信息</li>\n</ol>\n<p>由于爬取过程中我多次调整了爬虫逻辑，爬虫爬取到的用户 ID 区间并非连续的，具体区间为1-839586, 14800001-14885493 及 28965251-31161101。</p>\n<h1>免责声明</h1>\n<p>本站会尽可能地提供准确信息，但本站不对此文章中信息的准确性和即时性及带来的任何影响负责。</p>\n<p>本站不代表 GitHub 官方，本文仅供学习之用，请不要将本文内容直接用于任何商业项目中。</p>\n<h1>数据集下载</h1>\n<p>导出的 SQL 文件大约为 1.38GB，全部放在了 GitHub 上（在危险的边缘试探.webp</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"github-analysis-2019\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/github-analysis-2019\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>此外我也提供了 MEGA 下载，链接<a href=\"https://mega.nz/#F!juxm3A6T!7Vwpzi82W1OFrqTLu1A1pQ\">在这里</a>。</p>\n","link":"https://flyhigher.top/develop/1564.html"},{"title":"Milkice 跨年红包解谜 Writeup 及无垠跨年红包解谜答案","date":"2020-01-02 04:29:19","description":"\n<blockquote><p><del>又到了水文章的时间呢</del></p></blockquote>\n<p>先说明一下，这篇文章原本不是在计划中的，而原来说好的「在路上的两篇」文章<del>绝对不会咕</del>。我自己的红包答案本来打算直接塞在年度总结里的，结果发现稍微有些长，再加上我还花了一些时间解了<a href=\"https://milkice.me/\">奶冰</a>的红包解谜游戏，就打算把两个解谜过程放在一起单独写一篇文章。<del>真是个水文章的好理由</del>（被打死</p>\n<h1>奶<del> 子 </del>冰的红包</h1>\n<p>奶冰的红包题目比我的难多了，所以让我们先从难的开始吧。首先看一下<a href=\"https://milkice.me/2019/12/31/2019-summary/\">题目</a>：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1524\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\" alt=\"\" width=\"746\" height=\"410\"></a>\n<p>入口是 <code>happy.2020.milkice.me</code>，扔到浏览器里面表示找不到 IP，那么大概率就是 DNS 的 TXT 记录了，查一下得到 <code>nb2hi4dthixs63ljnrvwsy3ffzwwkl3tivrvezluomxxg5dsmvqw2ltqmnqxa3th</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1525\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\" alt=\"\" width=\"896\" height=\"278\"></a>\n<p>第一眼没看出来是什么编码，直觉是 BaseXX 系列的编码，加上提示“不只有 Base64”，可以推断出是 Base32，转大写解码得到 <code>https://milkice.me/sEcRets/stream.pcapng</code>。是个 URL，下载得到一个 Wireshark 文件，打开一看是和某 USB 设备的通讯抓包。<del>不会做，不做了。</del></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1526\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\" alt=\"\" width=\"1500\" height=\"813\"></a>\n<p>奶冰提示我“Google 上搜得到”，结合第二条提示搜索“wacom pcapng”找到了<a href=\"https://blogs.tunelko.com/2017/02/05/bitsctf-tom-and-jerry-50-points/\">这篇文章</a>（<del>这™就是答案啊</del>）。看起来是一样的套路，即通过解析数据得到数位板上画的内容，于是按文章的思路筛选出数位板发给主机的数据，导出，然后再用 tshark 导出文本数据。本来我想直接用文章中的 POC 的，结果折腾半天因为源的蜜汁原因库没装上，于是按文章中给出的数据结构自己写了段代码，分别导出 X、Y 轴数据扔进 Excel 画散点图。（<del>别问我为什么用 Excel，因为我手边没有更好的工具了</del>）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1528\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\" alt=\"\" width=\"1280\" height=\"530\"></a>\n<p><span>翻车现场之一</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1539\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\" alt=\"\" width=\"1000\" height=\"286\"></a>\n<p><span>懵逼奶冰.webp</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1533\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\" alt=\"\" width=\"1500\" height=\"462\"></a>\n<p>看得出有手写文字，不过是上下颠倒的，翻转图片得 <code>https://milkice.me/2020/uso.zip</code>。是个 zip，下载打开一看，有密码。<del>不会解，不做了。</del> 第一反应是暴力解密码，但是暴力跑了 15 分钟还是没有跑出来。暴力太不优雅了，肯定不是正确思路，但奶冰什么都不肯说了。不过在这时我终于发现第一个红包口令码就藏在压缩包的注释中，Get。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1544\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\" alt=\"\" width=\"806\" height=\"593\"></a>\n<p>然而题还没解完，回去看提示，看到提供了 osu 谱面下载，于是打算不管怎么样先下载来看看。然而 osu 谱面下载要登录，只好又花了几分钟找到第三方站点，成功下载。这时候可以注意到 uso.zip 里有个同名文件（432314 Mike Greene - Bill Nye the Science Guy Theme Song (Chinese Intro).osz），可以联想到是明文攻击。好吧，上 ARCHPR，十秒解出。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1530\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\" alt=\"\" width=\"462\" height=\"643\"></a>\n<p><span>现场还原.jpg</span></p>\n<p>.osz 文件并不是明文，猜测是压缩包（和 .pptx 一个思路嘛），于是改后缀 .zip 顺利打开。然后红包口令码就藏在奶冰的 .osu 文件中了，由提示可知是明文，打开即可得到。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1542\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\" alt=\"\" width=\"457\" height=\"255\"></a>\n<h1>我的红包</h1>\n<p>相比起来<a href=\"https://flyhigher.top/diary/1464.html\">我的题目</a>就简单很多了嘛...三天时间一共发出了 25 个红包，包括一位重复领取的🌚，比前几年还是多了一些的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\" alt=\"\" width=\"500\" height=\"306\" class=\"aligncenter size-full wp-image-1554\"></a>\n<p><span>这位同学以后请不要多次领取🌚</span></p>\n<p>那么来看看答案吧。</p>\n<h2>第一阶段</h2>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>首先观察字符串，可以发现 <code>.</code> <code>/</code> <code>_</code> 等一些 ASCII 字符原样留在了字符串中，而其他字符被由 <code>=</code> 和十六进制构成的某种编码所替代。如果你正好有所了解，你应该能认出这是 Quoted-printable 编码，这是一种常用于邮件中的编码，可以用<a href=\"https://mothereff.in/quoted-printable\">这个页面</a>解码。如果你不了解，你也应该可以发现这种编码和 URL 编码非常相似。如果你把 <code>=</code> 替换为 <code>%</code>，那么你就可以用各种方法顺利地把它按 URL 编码来进行解码，最后可以得到 <code>αхtоn.іm/соdе_оf_2020_⒈mρз</code>。这个字符串里大部分字符都不是 ASCII 字符，只是长得像而已。根据第一个提示“全是 ASCII 字符”，按样子把字符串用 ASCII 字符抄一遍，可以得到最终 URL 为 <code>axton.im/code_of_2020_1.mp3</code>。</p>\n<h2>第二阶段</h2>\n<p>下载音频，可以听出音频是经过某种处理的白噪音。白噪音的特点是各频段的功率都均匀分布，在白噪音上做文章，很容易就可以联想到线索藏在频谱中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1534\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\" alt=\"\" width=\"1200\" height=\"719\"></a>\n<p>频谱被处理成了 24x3 的网格，结合第二条提示“24x3，横向读取”可以推断出是将频谱当作二进制读取，得到 <code>01111001 01110010 01100011 00101110 01101101 01100101 00101111 00110010 00110000</code>，转为 ASCII 字符可得 <code>yrc.me/20</code>。</p>\n<h2>第三阶段</h2>\n<p>打开上一步得到的页面，提示要求输入十位数密码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1536\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\" alt=\"\" width=\"663\" height=\"460\"></a>\n<p>如果你在上一步注意到了这个音频文件奇怪的属性，你可以反应过来这里的密码就是 <code>2000202020</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1537\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\" alt=\"\" width=\"421\" height=\"651\"></a>\n<p>如果你没有注意到，查看页面代码可以看到一条注释 <code>&lt;!-- Tips: the attribute of the audio --&gt;</code> 将你引导向音频文件的属性。输入密码，解锁即可进入下一步。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1535\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\" alt=\"\" width=\"397\" height=\"223\"></a>\n<h2>第四阶段</h2>\n<p>可以看到是一张图片，内容为“<del>.JPG</del>”和“.ZIP”。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-1532\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n<p>和去年一样的套路，下载图片，将后缀名改为 .zip 然后打开，可以看到 README.txt。</p>\n<h2>最后一步</h2>\n<p>查看 README.txt 的内容，可以了解到需要去 🤔.axton.cc 获取红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1538\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\" alt=\"\" width=\"1131\" height=\"278\"></a>\n<p>扔到浏览器里会出现奶冰同款找不到 IP，于是可以联想到 TXT 记录。唯一的问题是 🤔 这个 Emoji 需要如何处理。域名使用 Punycode 将 Unicode 字符转换为 ASCII 字符，特点是以 <code>xn--</code> 开头。如果你把上面这个域名扔进浏览器，你会发现它变成了 <code>xn--wp9h.axton.cc</code>。然后查询 TXT 记录，即可得到红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1527\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\" alt=\"\" width=\"804\" height=\"557\"></a>\n","link":"https://flyhigher.top/develop/1519.html"},{"title":"无垠 2019 年度总结","date":"2019-12-29 12:25:52","description":"\n<p>又是时间飞快的一年...写 2018 总结的情景似乎还在眼前，转眼居然已经到 2019 年末了。</p>\n<p>2019 年，发生了太多事情，包括真的转折了人生的高考，这也导致我博客更新的不多（难以置信居然才更了两篇...），不过两篇技术性文章已经在路上了，可以期待一下。</p>\n<p>2019 年我也学了不少东西（单指技术方面），比如终于认真学了 Vue（但是还要练手）。书买了一大堆，看完的倒是没几本orz</p>\n<p>呼，好吧，是时候回顾一下充满坎坷的这一年了。2019 年还剩下最后两天，希望 2020 年，我能做得更好。</p>\n<h1>一些数据</h1>\n<p>照惯例先来看看一些数据吧。今年是统计系统完整统计了的第二年，终于可以和去年的数据比较一下了。以下数据的统计范围是 2019年1月1日0时至 2019年12月29日20时。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 26,901 (<span>+4%</span>)，年 PV 76,583 (<span>+3%</span>)，日均 UV 73.7，平均停留时间 5分13秒 (<span>-13.8%</span>)，平均跳出率 53% (<span>+20.5%</span>)。一年有效文章数 2 (<span>-50%</span>)，新增评论 439 条。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\" alt=\"\" width=\"1000\" height=\"1143\" class=\"aligncenter size-full wp-image-1511\"></a>\n<p>有趣的是今年文章数腰斩，访问数反而小有提升。<del>如果我哪天不更新了，访问数是不是可以无限大呢？</del></p>\n<p>今年博客最大的改动就是把整体风格切换到了 Material Design 2（当然这是 <a href=\"https://flyhigher.top/develop/788.html\">MDx</a> 中的可选功能，给自己打个广告2333），此外还有比较失败的 WebP 改造计划，因为和缓存冲突已经回滚了。<a href=\"https://flyhigher.top/develop/1245.html\">ABS 系统</a>进展不大，主要是真的没有太多时间，还是要再学习一个。</p>\n<h2>个人主页</h2>\n<p>虽然个人主页的 TODO List 列了老长，但今年完全没有更新，也没有推广，从今年 8 月底开始还莫名被某墙认证了，直到 11 月底才恢复，于是今年总访问量比去年少了很多，</p>\n<p>有多少呢？这么少：总 UV 2,141 (<span>-65.9%</span>)，总 PV 2,744 (<span>-66.6%</span>)，日均 UV 6 (<span>-65.9%</span>)，平均停留时间 62秒 (<span>+19.2%</span>)。主要来源是知乎和 V2EX，还有一些甚至是从微信来的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\" alt=\"\" width=\"1000\" height=\"1103\" class=\"aligncenter size-full wp-image-1512\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 8 次，新增 171 commits，2 种语言的翻译，Star 数增加了 175，现有 408。感谢所有人的支持，尤其是 <a href=\"https://github.com/Sn0bzy\" rel=\"noopener noreferrer\" target=\"_blank\">Hasan CAN</a>, <a href=\"https://github.com/yechs\" rel=\"noopener noreferrer\" target=\"_blank\">Ye Shu</a>, <a href=\"https://github.com/StarryLeo\" rel=\"noopener noreferrer\" target=\"_blank\">StarryLeo</a>, <a href=\"https://github.com/DCTewi\" rel=\"noopener noreferrer\" target=\"_blank\">冻葱Tewi</a>, <a href=\"https://github.com/syfxlin\" rel=\"noopener noreferrer\" target=\"_blank\">Otstar Lin</a> 等为 MDx 做出了不小贡献的你们。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：<a href=\"https://flyhigher.top/photograph/1309.html\">上手</a> DJI OSMO Pocket</li>\n<li>四月：最后一次参加浙江省普通高中学业水平考试</li>\n<li>五月：MDx 喜提 300 Stars</li>\n<li>六月：高考 <del>炸了，差亿点点上浙大</del>\n</li>\n<li>六月：入手了 Oneplus 7 Pro</li>\n<li>六月：和同学一起去成都重庆旅行</li>\n<li>六月：第一次近距离感受到地震</li>\n<li>六月：<a href=\"https://flyhigher.top/diary/1411.html\">入手</a>了一台雷蛇灵刃 15，目前是主力机</li>\n<li>七月：参与组织 THE Hack 2019 活动</li>\n<li>七月：面基了 <a href=\"https://itroy.cc/\" rel=\"noopener noreferrer\" target=\"_blank\">Tory</a>, Bie Shi 和 <a href=\"https://oxz.me/\" rel=\"noopener noreferrer\" target=\"_blank\">FHYunCai</a>\n</li>\n<li>八月：一个人去厦门武汉转了一圈，拍了自己的第一个 Vlog</li>\n<li>八月：入手了一个 Kindle Paperwhite 4，没有泡面可以压，于是用来看英文小说了</li>\n<li>八月：加入 TEDxNingbo 志愿者团队</li>\n<li>八月：和 Ralph 面基</li>\n<li>八月：入手了一个 Yubikey</li>\n<li>九月：人生第一次参加雅思考试 <del>7分，蛮开心的</del>\n</li>\n<li>十月：入手了一个 Samsung Galaxy Watch Active 2 <del>觉得不值</del>\n</li>\n<li>十一月：MDx 达到 400 Stars</li>\n<li>十一月：为 TEDxNingbo 设计开发的 H5 上线</li>\n<li>十一月：入手了第一台胶片相机，试图入坑胶片摄影</li>\n<li>十一月：参加 TEDxNingbo 2019 大会</li>\n<li>十二月：<del>我 Cytus II 入门了</del>\n</li>\n</ul>\n<h1>跨年红包</h1>\n<p>这算「传统习俗」了。和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2020年1月2日。</p>\n<p>今年的解谜旅程，从下面这个字符串开始。</p>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>由于今年的题目比以前稍微难了一些，所以今年的红包金额还是比较大的，而且不限量，尽你所能试一试吧。</p>\n<p>一点你可能用得上的提示：URL 里全是 ASCII 字符 / 24x3，横向读取。</p>\n<p><a href=\"https://flyhigher.top/develop/1519.html\">答案</a>已公布。</p>\n<h1>跨年海报</h1>\n<p>这算是另一个「传统习俗」（笑）。因为我有做跨年海报的习惯，所以以下就是今年份的海报啦。</p>\n<p>用了 C4D+PS，还有我的一整个下午。</p>\n<p>提前祝各位新年快乐！</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter wp-image-1467 size-large\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n","link":"https://flyhigher.top/diary/1464.html"}]