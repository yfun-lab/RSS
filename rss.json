[{"title":"派评 | 近期值得关注的 App","date":"2022-08-01 09:41:49","description":"你可以通过文章目录快速跳转到你感兴趣的内容。如果发现了其它感兴趣的 App 或者关注的话题，也欢迎在评论区和我们进行讨论。<a href=\"https://sspai.com/post/74943\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/74943"},{"title":"在录音之前你需要知道的事","date":"2022-08-01 08:40:07","description":"对待声音，我们要有敬畏之心，也要充满仪式感。<p>[......]</p>\n<a href=\"https://sspai.com/prime/story/sr-06-01\" target=\"_blank\">查看全文</a><p>本文为会员文章，出自<a href=\"https://sspai.com/prime/precog/SR-06\" target=\"_blank\">《录音入门指南》</a>，订阅后可阅读全文。</p>\n","link":"https://sspai.com/prime/story/sr-06-01"},{"title":"施救者会在心肺复苏过程中感染疾病吗","date":"2022-08-01 07:00:00","description":"近年来，我们越来越频繁的发现：「不明原因猝死」的人越来越多了。从光鲜亮丽的艺人，到日夜兼程的社畜，越来越多的年轻人提前走到了生命的尽头。之前LesliePan老师科已经科普了「猝死的相关知识」，并教大 ...<a href=\"https://sspai.com/post/74931\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/74931"},{"title":"如何评价 7 月新番动画《彻夜之歌》第三集？","date":"2022-08-01 05:36:22","description":"\n<p data-pid=\"yTC1cDG3\">前三集都是熬夜看的，很符合作品主题（笑</p>\n<p data-pid=\"bTtWA3gp\">第二集的时候还有很多朋友觉得剧情太水，没意思，看完第三集又好了起来，<b>果然还是要有一点修罗场呢</b>。</p>\n<p data-pid=\"1Zkx_tyS\">借这个机会补充一下 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/b6f90d9c52b4b45bd1c2a534f0f8ef8a\" data-hash=\"b6f90d9c52b4b45bd1c2a534f0f8ef8a\" data-hovercard=\"p$b$b6f90d9c52b4b45bd1c2a534f0f8ef8a\">@Anier</a> 回答提到的SHAFT演出风格的话题。</p>\n<a href=\"https://www.zhihu.com/question/541813400/answer/2568407221\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-636af3b1629437ce9de8f5d273b18ad6_qhd.jpg?source=b1748391\" data-image-width=\"2560\" data-image-height=\"1440\" class=\"internal\">如何评价 7 月新番动画《彻夜之歌》第一集？</a><h2>动作只留头尾，剪掉中间状态</h2>\n<p><img src=\"https://picx.zhimg.com/v2-e80c62ea0e731d113ef4320ba9f35886_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1272\" data-rawheight=\"356\" data-watermark=\"original\" data-original-src=\"v2-e80c62ea0e731d113ef4320ba9f35886\" data-watermark-src=\"v2-18d7b1eee3eb89d2f72424bdf78b14ea\" data-private-watermark-src=\"v2-8111c8f3502424d64379744bcb4334e4\"></p>\n<p><img src=\"https://pica.zhimg.com/v2-31390da217f4da8444a088b590a8802d_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1272\" data-rawheight=\"356\" data-watermark=\"original\" data-original-src=\"v2-31390da217f4da8444a088b590a8802d\" data-watermark-src=\"v2-2cf015b6d06693c147893bdb96924961\" data-private-watermark-src=\"v2-9fd2d6b28b94d1287061a90b7dfd4b83\"></p>\n<p data-pid=\"62N_CdBl\">第一集开头的两个例子，都是连续镜头。女主从天台跳下，上一个镜头是迈出一只脚，下一个镜头整个人已经飞出去了，下面这里男主出门也是，上一个镜头刚打开门迈脚，下一个镜头已经出门回头关门了。</p>\n<p data-pid=\"TwD1VUQo\">两处都剪掉了主要的中间运动，这可不是乱剪的，很明显前一个镜头已经给足了信息量，已经通过场景和肢体特写提示你角色要做什么了（比较巧合两处的第一个镜头都是脚的特写），所以下一个镜头直接给角色完成这个动作的状态，过渡是很自然的。</p>\n<p data-pid=\"-RyndOFv\">和我之前写过的本季另一部新番《异世界舅舅》的演出正好形成了有趣的对照。</p>\n<a href=\"https://www.zhihu.com/question/543079040/answer/2582720150\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pica.zhimg.com/v2-620e17c3318ac02ac56811833c13678e_qhd.jpg?source=b1748391\" data-image-width=\"1482\" data-image-height=\"832\" class=\"internal\">如何评价 7 月新番动画《异世界叔叔》第二集？</a><p data-pid=\"o9K8_iXp\">异世界舅舅是在动作完成后去延长静止的状态，在静止中品味余韵和气氛，而《彻夜之歌》是剪掉动作，让镜头连接非常紧凑，节奏感很强，和作品这种pop的氛围融合也非常恰当。两种演出风格截然相反，但都利用了观众的预期和暗示这种底层逻辑，原理上是相通的，可以说是同一颗视觉原理的种子开出不同的花朵。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-c7971673b12cb1cd9ef071721f83a3e2_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1272\" data-rawheight=\"236\" data-watermark=\"original\" data-original-src=\"v2-c7971673b12cb1cd9ef071721f83a3e2\" data-watermark-src=\"v2-30d30431ba06ed6cc29874dbcacd14d9\" data-private-watermark-src=\"v2-468c95a13710e40fb5ddfd89b248b014\"></p>\n<p data-pid=\"kd73IWp_\">再举一个第一话的例子，男主回忆里拒绝女二表白，第一个镜头是两人在教室里面对面的静止的大全景俯拍，第二个镜头接女主跑出画面，动作上第二个镜头开始时女主已经转身一半了，而且和上一个镜头的静止不同，速度很快，这里也是用到了剪掉中间动作的手法。同时前后连接的两个镜头在构图、角度、焦距、光源、前后景的配置等等元素上都明显不同，表现出非常紧凑的拼接感。</p>\n<p data-pid=\"WBiM4m_2\">这就是一种SHAFT演出家常用的镜头连接方法。オトナアニメ的特集《SHAFT超全集！！》（2010年出版）里就进行过分析，材料是用的当年最火的《化物语》：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-daef02a0e940f4d05815d9b190ec2717_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2268\" data-rawheight=\"3024\" data-watermark=\"original\" data-original-src=\"v2-daef02a0e940f4d05815d9b190ec2717\" data-watermark-src=\"v2-077de38de55b95a347c24e9ee8d5d7d2\" data-private-watermark-src=\"v2-0e816a254fcf2e1bf420669744c4d046\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-a6539818e35d016fb280c1cb7132ef18_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3024\" data-rawheight=\"4032\" data-watermark=\"original\" data-original-src=\"v2-a6539818e35d016fb280c1cb7132ef18\" data-watermark-src=\"v2-6073810ef924af2870e92343ddd4df00\" data-private-watermark-src=\"v2-d5de9f6c73bcaa460853eb1641480248\"></p>\n<p data-pid=\"ZvcX2YIo\">该书对SHAFT式剪辑的概括：</p>\n<blockquote data-pid=\"iltWvxgh\">动作的省略<br>不让演技连上<br>同一场景也让画改变<br>降低颜色的彩度（《彻夜之歌》是反过来调高彩度）</blockquote>\n<p data-pid=\"GvvhERLH\">以及对这种演出效果的评论：</p>\n<blockquote data-pid=\"n1jm6J2b\">仔细注意的话就会发现，几乎没有一个动作跨越两个镜头。每一个镜头都具有高度的独立性和充实度。<br>从个性强烈的镜头之间的碰撞中诞生的违和感，以之为武器的演出充满挑战性。</blockquote>\n<p data-pid=\"cWCE8J_x\">可以看出，在本季诸多SHAFT相关的作品之中，板村智幸最显眼地继承了这种特色的演出，也难怪会看到“SHAFT在SHAFT模仿大赛中获得第二名”的玩笑了。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/sflsnzyn?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">SFLSNZYN</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>延伸阅读：<br><a href=\"http://www.zhihu.com/question/543079083?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价 7 月新番动画《彻夜之歌》第二集？</a><br><a href=\"http://www.zhihu.com/question/541813400?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价 7 月新番动画《彻夜之歌》第一集？</a><br>\n","link":"http://www.zhihu.com/question/544528995/answer/2596058476?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"《画书大王》(简称画王)中都有哪些经典的国漫作品，包括港台的？","date":"2022-08-01 05:31:27","description":"\n<h3>引言</h3>\n<p data-pid=\"BAxaz1rM\">这是一个好问题，关于画书大王<sup data-text=\"\" data-url=\"https://book.douban.com/review/9724362/\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"1\">[1]</sup>，可说的太多，我会在另一个回答详细地写，本回答主要是关于画书大王上那些国漫作品的盘点向。</p>\n<p data-pid=\"6ZDKeMqX\">从最开始的创刊号上只有5部中国漫画，到24期“创刊一周年纪念” 号，中国原创作品已占60%</p>\n<p><img src=\"https://pic1.zhimg.com/v2-88a9089ed44053feafdb76095c92e8d4_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"649\" data-watermark=\"watermark\" data-original-src=\"v2-88a9089ed44053feafdb76095c92e8d4\" data-watermark-src=\"v2-8e8d909c07ba9f87a9209e3e534915b7\" data-private-watermark-src=\"v2-85d7237816879c4b056e5afd074a3842\"></p>\n<p data-pid=\"27bXv57f\">因为问题问的是《画书大王》中的国漫作品，因此《画王》中的日漫作品诸如《静斗士·翔》、《城市猎人》、《七龙珠》等这里就不再一一赘述，还有许多优秀的外国作品，诸如美国的《花生漫画》、新加坡的《我的暑假》等，这里也不再多提。</p>\n<p data-pid=\"qbF86zfP\"><i>感兴趣的朋友可以到阿卡俱乐部</i><sup data-text=\"\" data-url=\"http://www.aka.today/\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"2\">[2]</sup><i>直接欣赏所有作品。</i></p>\n<p data-pid=\"C_4OBwE1\">首先，画书大王一共24期，一共出现原创中国漫画<b>34部</b>作品，短篇<b>20篇</b>、中篇连载<b>9部</b>。长篇连载5部，另外还有画王征稿一共58篇超短篇。</p>\n<p data-pid=\"jEUYxbqI\">经过我反复阅读，总结图如下</p>\n<p data-pid=\"RSX28L2o\">中长短篇连载作品盘点</p>\n<p><img src=\"https://pic4.zhimg.com/v2-9f9de6ff63eedc968e1dab42320a7cc4_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2233\" data-rawheight=\"1948\" data-watermark=\"watermark\" data-original-src=\"v2-9f9de6ff63eedc968e1dab42320a7cc4\" data-watermark-src=\"v2-685dee3a200b4ff39797d86970a7b4ca\" data-private-watermark-src=\"v2-0bb8dfdc944248f0ff055fa44d727209\"></p>\n<p data-pid=\"w9bO-2T2\">94画王超短篇征稿选登</p>\n<p><img src=\"https://pic1.zhimg.com/v2-d8fa1ffb6d9243c16185800ac1dab485_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2233\" data-rawheight=\"3052\" data-watermark=\"watermark\" data-original-src=\"v2-d8fa1ffb6d9243c16185800ac1dab485\" data-watermark-src=\"v2-fe2a3b2243b98f9717c9a52435afcdce\" data-private-watermark-src=\"v2-046aab8b87bf1b4aebfa4d8f3aaddce5\"></p>\n<p data-pid=\"0kdTwUBJ\">我们按照作品最初连载时间来一一回顾一下这些优秀的中国漫画</p>\n<hr>\n<h3>王庸生/谭晓春  《蟠桃会》</h3>\n<p><img src=\"https://picx.zhimg.com/v2-34372cbe2156bddc8f322d9318ebbe86_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"477\" data-rawheight=\"637\" data-watermark=\"watermark\" data-original-src=\"v2-34372cbe2156bddc8f322d9318ebbe86\" data-watermark-src=\"v2-8e048d9e48ac37370a4ff0887b743c9b\" data-private-watermark-src=\"v2-76bb5c4b4b7474b70f31e433819c800e\"></p>\n<p data-pid=\"1z0hJKE4\"> ■《蟠桃会》王庸声编剧、谭晓春等绘画<br>作为一位由传统连环画转入新漫画探索的漫画家,谭晓春在创作中“既要认真学习外国画法的长处,又要不断克服过去长期作画形成的习惯”,做到这点实属不易。<br>在这个由“连环画”到“新漫画”的探索时期，借用西游记的国民度来继续创作后续故事和如今的“蹭西游IP”其实有很大程度类似，但在当时由于是开创者，因此也属于摸着石头过河，事实证明，这种做法是相当可取</p>\n<p><img src=\"https://pic4.zhimg.com/v2-368385dd7d1c18ffeec9bd06fb9929b5_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3008\" data-rawheight=\"4416\" data-watermark=\"watermark\" data-original-src=\"v2-368385dd7d1c18ffeec9bd06fb9929b5\" data-watermark-src=\"v2-6e0a62d280c54dc44071ec7162681495\" data-private-watermark-src=\"v2-abe0767c2b36889c5f83773b7791e4a9\"></p>\n<p data-pid=\"ff0tiAVD\">而整个故事跳脱于西游记后传，以二郎神和牛魔王的儿子为主角，带我们领略了更多的上古时期神明的风采（诸如炎帝，祝融等）</p>\n<p><img src=\"https://pic4.zhimg.com/v2-2028e565e7b647296126165c4bbe2b17_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2912\" data-rawheight=\"3920\" data-watermark=\"watermark\" data-original-src=\"v2-2028e565e7b647296126165c4bbe2b17\" data-watermark-src=\"v2-e052c9ee128a26b279749593ce37861e\" data-private-watermark-src=\"v2-cab61422c7784ac7bb587839fa1f460c\"></p>\n<hr>\n<h3>陈军《天剑》</h3>\n<p><img src=\"https://pic4.zhimg.com/v2-5404bd0b2a81065c5cff87a726e899bf_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2208\" data-rawheight=\"2944\" data-watermark=\"watermark\" data-original-src=\"v2-5404bd0b2a81065c5cff87a726e899bf\" data-watermark-src=\"v2-9a3ee1793e84fe70351418db62689e23\" data-private-watermark-src=\"v2-7b9c2409bd5feb3396c1ab190bb93b99\"></p>\n<p data-pid=\"QoFTa2hd\">  ■陈军大师的这部长篇奇幻冒险故事作品，分为人间篇、地狱篇、天堂篇、梦幻篇</p>\n<p data-pid=\"pJ-eaDYs\">然而可惜的是画王上只刊登了10集，也是唯一的10集，光是这短短10集就看的出来整部这部作品的独特的构思，超前的想象力，甚至能看到现在所谓玄幻的概念，要知道那才1993年。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-debd5c55215c78f1644b2bc71f5a1fa0_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2368\" data-rawheight=\"3184\" data-watermark=\"watermark\" data-original-src=\"v2-debd5c55215c78f1644b2bc71f5a1fa0\" data-watermark-src=\"v2-e083b6e7a29fd286988e880b6964cafb\" data-private-watermark-src=\"v2-2acccf0eb80f8bc9292bc91fe2542581\"></p>\n<p data-pid=\"4W2XXb0S\">真正令人震惊的是后来才知道《天剑》居然只是人间篇的一个章节的名称，也就是说整个作品都还没有正式的命名，那么可想而知这部作品的整个故事架构有多宏大。</p>\n<p data-pid=\"y0Wt-2aM\">用今天的眼光来看这部作品会稍显稚嫩，但是在当时可谓是为无数少年少女开启了科幻漫画的启蒙！</p>\n<p data-pid=\"C1wVEohA\">而陈军老师也在09年不幸因病去世，给读者留下永远的遗憾</p>\n<p><img src=\"https://pic4.zhimg.com/v2-a86a78c17c61ab8e415dc01b6d78f8ec_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2768\" data-rawheight=\"3056\" data-watermark=\"watermark\" data-original-src=\"v2-a86a78c17c61ab8e415dc01b6d78f8ec\" data-watermark-src=\"v2-7996fe316f1cd1621c3b3e843433b0e4\" data-private-watermark-src=\"v2-2308fdcd676975bf30126f9b28f44082\" data-tags=\"porn\"></p>\n<hr>\n<h3>王培堃《中国古代谋略家》</h3>\n<p><img src=\"https://pica.zhimg.com/v2-de46d928d4e750fb6d514ba23a58559e_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3008\" data-rawheight=\"4256\" data-watermark=\"watermark\" data-original-src=\"v2-de46d928d4e750fb6d514ba23a58559e\" data-watermark-src=\"v2-b1a1037cdb331bda943ffd3d48376755\" data-private-watermark-src=\"v2-6db54ed58806087b78fe1fbaf7233359\"></p>\n<p data-pid=\"DgrZ6Onh\">在画王初期，没有太多的国内原创作品，而王老先生的《中国古代谋略大师系列》就起到了一个至关重要的作用</p>\n<p><img src=\"https://pic4.zhimg.com/v2-00bd293cda820709d35d7bb63e18a435_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2784\" data-rawheight=\"3888\" data-watermark=\"watermark\" data-original-src=\"v2-00bd293cda820709d35d7bb63e18a435\" data-watermark-src=\"v2-20631a0e6dbf47bf1be4e217a0ddc677\" data-private-watermark-src=\"v2-62fddc6ef4f0b25aac6ad7bd881c9277\"></p>\n<p data-pid=\"zWp83LuC\">从第9期开始连载《姜子牙》到22期《伍子胥》结束，王老先生在画王上连载这个系列一共15期，除了上面提到的两位大师，还有我们熟知的管仲，晏婴，和不太熟知的田穰苴</p>\n<p><img src=\"https://pic4.zhimg.com/v2-75c262686dc0d0b38de3736c5a0a789f_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2944\" data-rawheight=\"4048\" data-watermark=\"watermark\" data-original-src=\"v2-75c262686dc0d0b38de3736c5a0a789f\" data-watermark-src=\"v2-908db498c7b38746105443a3ea4f1030\" data-private-watermark-src=\"v2-e96d3c1af496304a79f23aa3e362be82\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-656a2fa9318dab83182150dc8aa4b10d_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2960\" data-rawheight=\"4160\" data-watermark=\"watermark\" data-original-src=\"v2-656a2fa9318dab83182150dc8aa4b10d\" data-watermark-src=\"v2-7b67afbeba83b7d55505dbadbb85bb9d\" data-private-watermark-src=\"v2-6e1bf468cdbc25a30fe53e04e1bc6e99\" data-qrcode-action=\"none\" data-tags=\"qrcode\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-87961c7adfd8bbec621b4f69678af277_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2704\" data-rawheight=\"3952\" data-watermark=\"watermark\" data-original-src=\"v2-87961c7adfd8bbec621b4f69678af277\" data-watermark-src=\"v2-9122b486136c226bc09814ba21820634\" data-private-watermark-src=\"v2-69c161907de89dc6c0af0d1340dacd46\"></p>\n<p data-pid=\"r5K3DFu_\">王老先生的系列作品，在让我们了解这几位谋略大师的丰功伟绩之外，还带领读者了解那个时期，那个时代的风土人情，像极了一位用自己经历教授我们知识的历史老师</p>\n<p><img src=\"https://pic3.zhimg.com/v2-b4c078ed7a7b273fcd638612efe59b40_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4064\" data-rawheight=\"2800\" data-watermark=\"watermark\" data-original-src=\"v2-b4c078ed7a7b273fcd638612efe59b40\" data-watermark-src=\"v2-fa9d5e970145d90f4bf05d6d24e0f280\" data-private-watermark-src=\"v2-a74c0af2725a8d8be01a341d5721b20c\"></p>\n<p data-pid=\"RqQm08vl\">而老先生在24期连载的作品《金梭 银梭》由于杂志停刊，只有上篇没有下篇，实属可惜</p>\n<hr>\n<h3>陈吟、徐赐林《大鹏出世》</h3>\n<p data-pid=\"3LWQdrJQ\"> ■这部《大鹏出世》选自《精忠报国》，主要讲述的是岳飞为报效国家所经历的种种磨难，以及他如何化险为夷成为大英雄的故事。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-12231d7d3a24db9eb9e0aa5f2321a0eb_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1536\" data-rawheight=\"2048\" data-watermark=\"watermark\" data-original-src=\"v2-12231d7d3a24db9eb9e0aa5f2321a0eb\" data-watermark-src=\"v2-0fc43bf4f8ace295d401b0cea86c18a5\" data-private-watermark-src=\"v2-354bbdce16984a6174b9b6d75339c8f0\"></p>\n<p data-pid=\"fZgNiNMK\">该作品是一部香港式画法的连环画，是《画书大王》中其中一部由连环画向新型漫画探索的作品之一。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-1e64a06ae4041d83b15cea19bed7b738_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1536\" data-rawheight=\"2048\" data-watermark=\"watermark\" data-original-src=\"v2-1e64a06ae4041d83b15cea19bed7b738\" data-watermark-src=\"v2-db6d5695de9d1894841fed94feb06b8a\" data-private-watermark-src=\"v2-35a25fdd5a9b0eb8df6e0cee5f99f7bc\"></p>\n<p data-pid=\"pHxFqAgf\">我们可以看到大鹏和建筑的画面，是那么地栩栩如生，彰显了作者的绘画功底</p>\n<p><img src=\"https://pic2.zhimg.com/v2-f3e81f3fe37a0c11f382141fe4350915_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1536\" data-rawheight=\"2048\" data-watermark=\"watermark\" data-original-src=\"v2-f3e81f3fe37a0c11f382141fe4350915\" data-watermark-src=\"v2-aa2fb1dd4fbc47f11ef7d22556307b19\" data-private-watermark-src=\"v2-ffce0b04964a7d8f640e3c15ec62f6f3\" data-tags=\"porn\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-c98f1775001c95914a45553f8b2a2cd7_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1536\" data-rawheight=\"2048\" data-watermark=\"watermark\" data-original-src=\"v2-c98f1775001c95914a45553f8b2a2cd7\" data-watermark-src=\"v2-2abb7c008a6546d8de52d989297c1ed9\" data-private-watermark-src=\"v2-879da412d084a1f89f9343611ca0c478\" data-tags=\"porn\"></p>\n<p data-pid=\"g4qneOIQ\">而故事中岳飞的形象阳光而正气，非常符合国人心中大英雄的形象，分镜也能看出还有部分连环画的影子，对话框也采用最基础的长方框，不过这在当时来说，已经是非常大的进步</p>\n<p><img src=\"https://pic1.zhimg.com/v2-bdc9ec9767e0b2d51dffec6aae8c9836_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1536\" data-rawheight=\"2048\" data-watermark=\"watermark\" data-original-src=\"v2-bdc9ec9767e0b2d51dffec6aae8c9836\" data-watermark-src=\"v2-f70c94aec633a07c589de26bf001dd02\" data-private-watermark-src=\"v2-6429f7fe5cd28c0f6be841deb2599678\"></p>\n<p data-pid=\"_vBJzAgV\">由于作品是半月刊，加之历史改编类漫画工程繁冗，因此作品在连载6话以后（第8期），完成了一小节的剧情推进以后就没了下文。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-defcc651cff186b8ee29042b1ed9a11a_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1536\" data-rawheight=\"2048\" data-watermark=\"watermark\" data-original-src=\"v2-defcc651cff186b8ee29042b1ed9a11a\" data-watermark-src=\"v2-5d9d50997022507ebac871954746e4f3\" data-private-watermark-src=\"v2-5da5364157f871b11c7073430732d6e0\" data-tags=\"porn\"></p>\n<hr>\n<h3>田恒玉《故事新画》</h3>\n<p data-pid=\"UhFLXjvY\">田恒玉老师擅长用现代语言和新的漫画手法继续创作古代故事，同时也搞些“戏说”之类的娱乐性小品。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-4312d88334f9383b05b84c82275c40ad_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1536\" data-rawheight=\"2048\" data-watermark=\"watermark\" data-original-src=\"v2-4312d88334f9383b05b84c82275c40ad\" data-watermark-src=\"v2-d2c0f2dfdf39d7830998352265bc4853\" data-private-watermark-src=\"v2-09336b4d5428564a0d10c5be5ef2e9df\" data-tags=\"porn\"></p>\n<p data-pid=\"HED6Xnrs\">田老师的故事新画系列也是画书大王中连载期数最多的作品，高达12期！每一个故事都蕴含着一个小道理，真正做到了寓教于乐。</p>\n<p><img src=\"https://picx.zhimg.com/v2-69982f6c0baabbb529a8b8695c785152_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1536\" data-rawheight=\"2048\" data-watermark=\"watermark\" data-original-src=\"v2-69982f6c0baabbb529a8b8695c785152\" data-watermark-src=\"v2-ffcd2fe0dc9c0ab194fc4122d8a7bbf4\" data-private-watermark-src=\"v2-45c89665edb7a6bd914929c472d64adb\" data-tags=\"porn\"></p>\n<p data-pid=\"Nol4mxoB\">田恒玉的圆很注意人物造型,，其是面部表情，夸张而不失真，把人的七情六欲，精巧呆傻，描绘得淋满尽致，使漫画的表现功能得以充分发挥，他说“连环漫画的关键是趣味，有趣味就勾人腮帮子，吸引读者非看不可，这种趣味不应是硬抠人家的胳肢窝,应当是自然的，现实的，夸张适度的，顺理成章的，合乎逻辑的。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-e31782e75e85c9fef2e4bed36b7df74b_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1536\" data-rawheight=\"2048\" data-watermark=\"watermark\" data-original-src=\"v2-e31782e75e85c9fef2e4bed36b7df74b\" data-watermark-src=\"v2-4b6887fad53f49413d4c18de25c052f1\" data-private-watermark-src=\"v2-4c2273293895722eb4ae6301bc3cd46e\" data-tags=\"porn\"></p>\n<p data-pid=\"8VzfDfYP\">在谈到创作体验时，他说:“漫画作者应具有幽默细胞，研究人们笑的“神经”和“穴位”，骨子里缺乏幽默感，成天一本正经,面冷似冰的人不宜搞漫画,”他从四格漫画开始,逐渐发展到中篇故事，不论什么，都是严谨地遵循自己的创作原则。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-51b6bfb8042e8898eec747e882d7bcbf_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1536\" data-rawheight=\"2048\" data-watermark=\"watermark\" data-original-src=\"v2-51b6bfb8042e8898eec747e882d7bcbf\" data-watermark-src=\"v2-a41072797fbd6d2a5035febcdb2acd97\" data-private-watermark-src=\"v2-1eb119c80482a78d5e910db46c32ff7f\"></p>\n<hr>\n<h3>陈翔《小山日记》</h3>\n<p><img src=\"https://pic1.zhimg.com/v2-5f2c706af81dbb6dcf762da8cbc3f39d_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1047\" data-rawheight=\"748\" data-watermark=\"watermark\" data-original-src=\"v2-5f2c706af81dbb6dcf762da8cbc3f39d\" data-watermark-src=\"v2-2b29e1a9f037e2b08d16d02e3f0ac8c5\" data-private-watermark-src=\"v2-db440a847f9c2ce56dcdcdcda0b8e643\" data-tags=\"porn\"></p>\n<p data-pid=\"oMfaWrBR\">《小山日记》可谓陈翔前期代表作之一，虽然带有明显的模仿鸟山明的痕迹，但也有自己的创新，人物造型夸张又不失可爱，故事幽默风趣，想象力天马行空。</p>\n<p data-pid=\"X4THNz-x\">更重要的是，《小山日记》已经看不到连环画风格的影子，在当时的原创漫画作品里可谓鹤立鸡群。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-4c814f6cbbd956c57a564d00f1abb2cb_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1536\" data-rawheight=\"2048\" data-watermark=\"watermark\" data-original-src=\"v2-4c814f6cbbd956c57a564d00f1abb2cb\" data-watermark-src=\"v2-08218488756300283ee79a9cdbb02280\" data-private-watermark-src=\"v2-d0c0796f4eac6221c099b6b238f94895\"></p>\n<p data-pid=\"afEXZZjz\">所以才短短连载几期，《小山日记》便已成为画王的头牌作品。从第10期开始连载，到24期结束，除了23期因故没有如期连载，《小山日记》总共在画王上连载了14话。</p>\n<p data-pid=\"Sr--jOSx\">很多读者都在给编辑部的信中表示：“<b>没想到我国的作者也能创作出这么好的漫画！</b>”</p>\n<p><img src=\"https://picx.zhimg.com/v2-1309783f72ae0dc62a0bd9a3df07fa4c_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1536\" data-rawheight=\"2048\" data-watermark=\"watermark\" data-original-src=\"v2-1309783f72ae0dc62a0bd9a3df07fa4c\" data-watermark-src=\"v2-41de8ce1e7dc18ea1aeddce3a8046b82\" data-private-watermark-src=\"v2-a3d18d1d6745c98165dca8b655dc445e\" data-tags=\"porn\"></p>\n<p data-pid=\"pyr-kZiS\">随着《画王》的停刊，陈翔的《小山日记》转战《卡通王》和《超速风暴》，不过由于杂志本身问题，导致《小山日记》也不了了之，如今如果还想重温这部作品，估计只能收集仅有的3本单行本了。</p>\n<p><br></p>\n<hr>\n<h3><b>颜开《雪椰》</b></h3>\n<p data-pid=\"Ye7Sxsri\">《雪椰》，1996年出版、被视作“中国第一本漫画单行本”，现在已加入“珍藏级别”。</p>\n<blockquote data-pid=\"CWZ3hWdb\">漫画讲述高中生男主在忽然收到一个包裹，包裹里竟是一名来自未来世界的女孩雪椰。原来，自然环境在2398年因核污染而濒临崩坏。为了保护最后的家园，雪椰受嘱托回到过去、寻找帮助。<br>万万没想到，时空机出现故障，雪椰被带到一个陌生的时空。男主了解情况后，决定保护雪椰，并展开一段对抗恶势力的冒险故事。</blockquote>\n<p><img src=\"https://pica.zhimg.com/v2-7fb9c32b9a9ed53a1d2da3d21d774db3_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1536\" data-rawheight=\"2048\" data-watermark=\"watermark\" data-original-src=\"v2-7fb9c32b9a9ed53a1d2da3d21d774db3\" data-watermark-src=\"v2-ac47b5aff0be5fe02ad5bd7e2b8166de\" data-private-watermark-src=\"v2-67f1e4f261fc6a060568fe27066d6d68\" data-tags=\"porn\"></p>\n<p data-pid=\"cLFv0jE_\">《雪椰》的大主题虽是打斗与冒险，但情感描绘得很细腻，钢铁与柔情的篇幅各占一半，令它同时斩获男性、女性读者的心，同时与传统少年漫画区分开来，形成独属颜开的风格。</p>\n<p data-pid=\"chG01GQ1\">《雪椰》火到什么程度？截至2000年，共推出8册单行本、总销量高达50万册；漫画虽在2000年停载，但直到2005年都一直端坐在国漫销量冠军的宝座上。</p>\n<p><img src=\"https://pica.zhimg.com/v2-08d0a23309fec8b0fd985187c6abf83f_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1536\" data-rawheight=\"2048\" data-watermark=\"watermark\" data-original-src=\"v2-08d0a23309fec8b0fd985187c6abf83f\" data-watermark-src=\"v2-61a9b237e653e1e66462367b517dcce4\" data-private-watermark-src=\"v2-e66247b422865d4dc260f2b6c5a6bdf8\" data-tags=\"porn\"></p>\n<p data-pid=\"jBCLPARv\">与陈翔一样，颜开老师最初的风格有明显的模仿北条司的画风，但是在后期逐渐探索出自己的故事走向，形成自己的独特风格。</p>\n<p data-pid=\"mDc6e8R6\">94年《画王》连载了8话停刊之后，《雪椰》开始了辗转的换刊连载生涯。先是《三优新漫画》，再是《科普画王》，《科幻世界画刊》……有时候，是没连载几期，杂志就又停刊了，至今依旧是中国读者心中的痛。</p>\n<p><img src=\"https://pica.zhimg.com/v2-3e8d4890720243dfce434ba001262cc5_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1536\" data-rawheight=\"2048\" data-watermark=\"watermark\" data-original-src=\"v2-3e8d4890720243dfce434ba001262cc5\" data-watermark-src=\"v2-a2f4a00d569ac6d4a82532cb3d01d3d2\" data-private-watermark-src=\"v2-34ab8cabed61f3ac81b9c4322853f904\" data-tags=\"porn\"></p>\n<p data-pid=\"70vMf8RS\">关于《雪椰》这部作品， <a class=\"member_mention\" href=\"http://www.zhihu.com/people/048cda711323e81c55c72cdc39d2a2b5\" data-hash=\"048cda711323e81c55c72cdc39d2a2b5\" data-hovercard=\"p$b$048cda711323e81c55c72cdc39d2a2b5\">@颜开大叔</a> 已经在知乎上亲自答过了，感兴趣的朋友可以看看</p>\n<a href=\"https://www.zhihu.com/question/320068340/answer/1255136684\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\"internal\"><span class=\"invisible\">https://www.</span><span class=\"visible\">zhihu.com/question/3200</span><span class=\"invisible\">68340/answer/1255136684</span><span class=\"ellipsis\"></span></a><hr>\n<h3>\n<b>长虹《剑气长江》</b> </h3>\n<p><img src=\"https://pic4.zhimg.com/v2-a23fa779d146866ef61a7c76d4f2fa25_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"480\" data-watermark=\"watermark\" data-original-src=\"v2-a23fa779d146866ef61a7c76d4f2fa25\" data-watermark-src=\"v2-550af9863d1f18cb68d766bb9c21c5c0\" data-private-watermark-src=\"v2-c662e08c7d011a9d99d615e81912ea15\"></p>\n<p data-pid=\"hhBxKs5l\"> 这应该是国内漫画史上第一部正宗武侠小说改编的新型漫画作品，出自温瑞安的同名小说。笔法简练豪放，绘制娴熟自然，分镜处理和氛围渲染非常到位，整部作品就如名称一般一看就有种令人荡气回肠的豪侠气势。  </p>\n<p><img src=\"https://pic1.zhimg.com/v2-1da9107ff93b125055e973991ac551e2_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"853\" data-watermark=\"watermark\" data-original-src=\"v2-1da9107ff93b125055e973991ac551e2\" data-watermark-src=\"v2-d9245c8c628c7fb4e8ec80aa0e711887\" data-private-watermark-src=\"v2-f02c541dcba5fa84da26bec66561d9fb\"></p>\n<p data-pid=\"5DKkrq5P\"> 遗憾的是本作只刊登了4期就完结了（17-20期），或许有小说版权的原因。也或者说是当时市场上还未能接受这种形式的改编，不过也为今后同类作品开了个好头。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-61a6bb41d960343b8cbeb3ee81401cc8_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"480\" data-watermark=\"watermark\" data-original-src=\"v2-61a6bb41d960343b8cbeb3ee81401cc8\" data-watermark-src=\"v2-909a76dbb086966710bb49d587fbf481\" data-private-watermark-src=\"v2-f485e501146cfee4907e8f35e60bdaa7\" data-tags=\"porn\"></p>\n<hr>\n<h3><b>胡倩蓉《辛德蕾拉》</b></h3>\n<p data-pid=\"uNuEavPN\"><b>胡倩蓉的《新年的礼物》是94画王超短篇第一篇刊登的作品（15期）</b></p>\n<p data-pid=\"1e9ogHKf\">在4个月后的第19期，刊登了其处女作《辛德蕾拉》</p>\n<p data-pid=\"ufKvp2Y6\">《辛德蕾拉》是一个只有3话的短篇，但是我们可以窥见胡倩蓉在当时高二的年龄展示出的潜能</p>\n<p data-pid=\"_KwyBkel\">简洁的线条，略微稚嫩的分镜，追求美型的人设，那双追求美妙爱情的女主的眼睛，仿佛胡倩蓉追求漫画真谛的渴望双眼</p>\n<p data-pid=\"QtwQO07X\">故事非常玛丽苏，非常典型的少女漫走向，但在当时取得了非常好的反响，也因此坚定了胡倩蓉日后继续创作的心。</p>\n<p><img src=\"https://pica.zhimg.com/v2-6bb2a706288241e4e079d9951d5ce557_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1373\" data-rawheight=\"1860\" data-watermark=\"watermark\" data-original-src=\"v2-6bb2a706288241e4e079d9951d5ce557\" data-watermark-src=\"v2-36181a0281a65a0d881f5bbdfb1f4093\" data-private-watermark-src=\"v2-2dbdebaefc28d7c203dbc5763b98e631\"></p>\n<p><img src=\"https://picx.zhimg.com/v2-80887e7a46940dd8b58a9843f759a959_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1536\" data-rawheight=\"2048\" data-watermark=\"watermark\" data-original-src=\"v2-80887e7a46940dd8b58a9843f759a959\" data-watermark-src=\"v2-6fba8abe1f73aa10873b38636c7dd752\" data-private-watermark-src=\"v2-0464d827d40fd3e8f48f30745201f7dd\" data-qrcode-action=\"none\" data-tags=\"qrcode\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-fa62ef1f95a6d228c393fd1bcc0a296b_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1536\" data-rawheight=\"2048\" data-watermark=\"watermark\" data-original-src=\"v2-fa62ef1f95a6d228c393fd1bcc0a296b\" data-watermark-src=\"v2-120646920b5334d3905571a55f69e6cc\" data-private-watermark-src=\"v2-a68ed523f396c8cc13b68f03722af449\"></p>\n<p><br></p>\n<hr>\n<h3><b>郑旭升《我们的鸦片战争》</b></h3>\n<p data-pid=\"ab5f0Ooe\">1994年，郑旭升在国内第一本漫画杂志《画王》评选漫画形象代言活动中取得冠军，同年在《画王》上连载自己的第一部长篇漫画作品《我们的鸦片战争》。</p>\n<p data-pid=\"16SdWKbE\">他的作品《师生情》以及寓教寓乐的《我们的鸦片战争》，让许多的读者认识了他。</p>\n<p data-pid=\"nE1Gd932\">在后来金虹出版的《漫画原子弹》里，他又相继以《男生宿舍古怪事》《无名星域风暴》等作品奠定了半写实的画风。也为后来的《繁华如梦》《幽灵列车》等作品的成功打下了基础。</p>\n<p><img src=\"https://pica.zhimg.com/v2-e837ace512c1774edc47ba1a1af52d61_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1536\" data-rawheight=\"2048\" data-watermark=\"watermark\" data-original-src=\"v2-e837ace512c1774edc47ba1a1af52d61\" data-watermark-src=\"v2-41bd685433ab3c24fbd6f20023a3367b\" data-private-watermark-src=\"v2-c9292ef4529dd87a597265c1843aeee9\"></p>\n<p data-pid=\"_qOICga4\">《我们的鸦片战争》的创作背景是当时的禁烟潮流，当时的香烟被人们称为新的鸦片</p>\n<p data-pid=\"4V4O79xD\">故事以一家老小都爱抽烟的烟民作为开端，通过一系列生活小故事告诫读者抽烟的危害，还科普了非常多有关禁烟的知识点，奈何由于画王的停刊，这部作品只连载了短短的三期，随后不断辗转《新漫画》《漫画原子弹》等杂志，但是依旧没有完整地连载结束。随着禁烟的浪潮过去，这部作品也失去社会意义，因此郑旭升也没有继续连载下去了。</p>\n<p><img src=\"https://pica.zhimg.com/v2-12585ec1edbd9352d304ecca2d889097_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1536\" data-rawheight=\"2048\" data-watermark=\"watermark\" data-original-src=\"v2-12585ec1edbd9352d304ecca2d889097\" data-watermark-src=\"v2-2dbd95b2db9b46381726fe64963a515b\" data-private-watermark-src=\"v2-82ddc6e96bade3a2c29726385b4d58cf\"></p>\n<h3>\n<br><b>阿恒《少林正宗》</b>\n</h3>\n<p><img src=\"https://pica.zhimg.com/v2-76e97bf299c968924fc60222e0320159_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1536\" data-watermark=\"watermark\" data-original-src=\"v2-76e97bf299c968924fc60222e0320159\" data-watermark-src=\"v2-8d1b9de09ae3f11119c3b30cf0f911aa\" data-private-watermark-src=\"v2-f61ffa79410e78a55a55c84f05526d0d\" data-tags=\"porn\"></p>\n<p data-pid=\"b67naUxP\">初看《少林传奇》以为是日后那种港漫风格的作品，没想到竟然是少林文化的未来机甲科幻风故事，很是新奇。并且已经具备日后港漫那种线条感以及夸张的战斗动作的风格。</p>\n<p data-pid=\"qyZkTrLC\">同样可惜的是，本作只在《画书大王》连载了2期，《画书大王》停刊后接着在《科幻世界画刊》上连载，而后在《漫画原子弹》上续载，最后集结成单行本出版。</p>\n<p data-pid=\"1FVEY1BK\">而阿恒和洪虹后来转移到深圳重新注册成立金虹公司，推出《漫画原子弹》，以及将港漫发扬光大的故事，都是后话了。</p>\n<p><img src=\"https://pica.zhimg.com/v2-88cf56955a52ba54e4e251e01e83486f_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"853\" data-watermark=\"watermark\" data-original-src=\"v2-88cf56955a52ba54e4e251e01e83486f\" data-watermark-src=\"v2-28c362fa9f31eb6f1fcfee413b4a0f75\" data-private-watermark-src=\"v2-7ac1c8f15ada74f72b57cbecf0540029\"></p>\n<p><br></p>\n<hr>\n<p><br></p>\n<h2>94画王超短篇征稿选登</h2>\n<p data-pid=\"IqWfJWeF\">《画书大王》在第10期之时做出一个意义深远的决定——举办“<b>94画王杯超短篇有奖征稿活动</b>”。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-d4f77b67ccb6d6f1cfa597c7f4b983d5_720w.jpg?source=b1748391?rss\" data-caption=\"激发无数人创作热情的“画王超短篇大赛”\" data-size=\"normal\" data-rawwidth=\"533\" data-rawheight=\"864\" data-watermark=\"watermark\" data-original-src=\"v2-d4f77b67ccb6d6f1cfa597c7f4b983d5\" data-watermark-src=\"v2-f470dca4e681098f8e2b65488a7687a3\" data-private-watermark-src=\"v2-695005bc8ae56d3cc2909e77c479aeac\"></p>\n<p data-pid=\"4ZQsnPbz\">所谓超短篇，是指只有四页纸的漫画作品。由于页数很少，对作画者的要求不高，即使没画过漫画的人也可以一试身手。</p>\n<p data-pid=\"yncfhLEe\">征稿启事一出，国内漫画爱好者们的热情便被完全激发出来了，雪片般的来稿从全国各地飞往《画书大王》的编辑部。</p>\n<p data-pid=\"SyCkbJPl\">所以从第15期《画书大王》开始，首批来稿与读者见面，我们从下图中可以看到许多如今依旧响当当的名号，<b>胡倩荣、郑旭升、赵佳、蒋翎（自由鸟）</b></p>\n<p><img src=\"https://picx.zhimg.com/v2-d8fa1ffb6d9243c16185800ac1dab485_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2233\" data-rawheight=\"3052\" data-watermark=\"watermark\" data-original-src=\"v2-d8fa1ffb6d9243c16185800ac1dab485\" data-watermark-src=\"v2-fe2a3b2243b98f9717c9a52435afcdce\" data-private-watermark-src=\"v2-046aab8b87bf1b4aebfa4d8f3aaddce5\"></p>\n<p data-pid=\"eoSkXkK2\">从第15期到21期，一共刊登了58部作品，年龄段从最小的12岁到青年不等，其中初高中生的投稿比例占据60%</p>\n<p><img src=\"https://pica.zhimg.com/v2-a483b9d74156ab88fd97a082a77387d3_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1536\" data-rawheight=\"2048\" data-watermark=\"watermark\" data-original-src=\"v2-a483b9d74156ab88fd97a082a77387d3\" data-watermark-src=\"v2-996a93a7e3c8a6c74ae6db74964de5ef\" data-private-watermark-src=\"v2-187e15a91a9840e3d78918c524d78930\"></p>\n<p data-pid=\"fe8BkQYs\">这些短篇作品中质量参差不齐，但是类型确实是百花齐放，其中以年仅12岁的“鬼女”赵佳的《画王讨论会》独树一帜</p>\n<p data-pid=\"mV004s4S\">作品以辩论会的形式来讨论画漫画的特技问题，有趣的是在辩论双方阐述自己观点的同时，还将这种漫画达到的效果展示出来，真正做到了寓教于乐。</p>\n<p data-pid=\"5Clq0IZB\">非常难能可贵的是，辩论双方的人物都是在画王中连载作品的人物形象，年仅12岁的赵佳就应经能模仿中日画风达到以假乱真的境界，难怪日后能创作出《黑血》这种经典作品。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-4bd2c857cf21c0bc6443f24b0ef22b73_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1536\" data-rawheight=\"2048\" data-watermark=\"watermark\" data-original-src=\"v2-4bd2c857cf21c0bc6443f24b0ef22b73\" data-watermark-src=\"v2-48fb609531d25d6c514c45a8b625e50f\" data-private-watermark-src=\"v2-9d42b6326f65ac2aa8e3a16a9d0969a5\" data-tags=\"porn\"></p>\n<p data-pid=\"g-yvzjmr\">读者评价：画王讨论会非常新颖有趣！重点！12岁少女！！</p>\n<p><img src=\"https://pic2.zhimg.com/v2-5d8a532c89a67f28c08e9a8a3f6a1938_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1536\" data-rawheight=\"2048\" data-watermark=\"watermark\" data-original-src=\"v2-5d8a532c89a67f28c08e9a8a3f6a1938\" data-watermark-src=\"v2-14e1626d78c41cda8db3c3209f4076d7\" data-private-watermark-src=\"v2-f5eb44c332d2a267605eb525980eb3d6\"></p>\n<p data-pid=\"EJDI1eD4\">郑旭升</p>\n<p data-pid=\"VqvnVKOX\">三剑客之一的郑旭升的处女作，讲述一个名字叫皮蛋的少年，连续被留了五年的一年级，原因竟然是班主任女老师长得特别想自己去世的妈妈，然后这位老师最后嫁给了男主的爸爸</p>\n<p data-pid=\"A2hhtF8C\">真不愧是郑旭升的脑洞哈哈哈，看似荒谬的背后蕴含着一丝合理，表达了当时社会环境下对再婚家庭的一种看法。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-7f1b81858e9228481c81ca713d202aad_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1536\" data-rawheight=\"2048\" data-watermark=\"watermark\" data-original-src=\"v2-7f1b81858e9228481c81ca713d202aad\" data-watermark-src=\"v2-b4c3652e2bdfc169e05f70bd081d756b\" data-private-watermark-src=\"v2-8d18155e4de41a87277780fc63acd613\"></p>\n<p data-pid=\"PVCOLgH1\">除了这些以外，还有各种风格的短篇，让每位当时热爱漫画的新人崭露头角</p>\n<p data-pid=\"KoxGvgmU\">有武侠风格的《风云录》、日常搞笑风格的《金钱梦的破灭》</p>\n<p><img src=\"https://pic2.zhimg.com/v2-8e5ccd45593b3cfa93ba8ef8d5e8e3d0_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1498\" data-rawheight=\"1085\" data-watermark=\"watermark\" data-original-src=\"v2-8e5ccd45593b3cfa93ba8ef8d5e8e3d0\" data-watermark-src=\"v2-8abc9bc2e2aafce5d060f29598192b00\" data-private-watermark-src=\"v2-ddc82163e888421c75f5cd3c27c3e364\" data-tags=\"porn\"></p>\n<p data-pid=\"9TQLIRzN\">还有着最代表当时从连环画转向新型漫画风格的，具有儿童故事情节的《夺回鸟蛋》</p>\n<p><img src=\"https://pica.zhimg.com/v2-06a772cdcff35d11233cd0641d2dcd1e_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1536\" data-rawheight=\"2048\" data-watermark=\"watermark\" data-original-src=\"v2-06a772cdcff35d11233cd0641d2dcd1e\" data-watermark-src=\"v2-903adc7e364c4c463310e8525ea7d18a\" data-private-watermark-src=\"v2-15171babe92cc9314b99a1d30e2220b7\"></p>\n<p data-pid=\"h823nllG\">还有充满甜甜爱情，漫画中绝对不可或缺的少女漫</p>\n<p><img src=\"https://pic1.zhimg.com/v2-9c098044ddc3e3b960b7ff84a45aeb66_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1536\" data-rawheight=\"2048\" data-watermark=\"watermark\" data-original-src=\"v2-9c098044ddc3e3b960b7ff84a45aeb66\" data-watermark-src=\"v2-ed0989d6e266a5bd2c04f28dd7d2c6f9\" data-private-watermark-src=\"v2-577e86bf08d45a5642eee43b8da22bdd\" data-tags=\"porn\"></p>\n<p data-pid=\"fxysCehk\">当然还有最多读者喜爱的冒险漫画风格、科幻风格以及模仿借鉴日漫的作品</p>\n<p><img src=\"https://pic1.zhimg.com/v2-e89d71125143ac6d7f6b2e5d089856f6_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1497\" data-rawheight=\"973\" data-watermark=\"watermark\" data-original-src=\"v2-e89d71125143ac6d7f6b2e5d089856f6\" data-watermark-src=\"v2-bd4a063071e488f72771479f73cd0db2\" data-private-watermark-src=\"v2-d44f8df6acac24a51b7e38fc06040121\"></p>\n<p data-pid=\"FL74sAfT\">大部分作品都能做到完整表达一个故事，也存在着诸如分镜混乱，线条饱满，网点滥用等一系列问题，但是这群年轻人让我们看到了，也让当时的中国漫画界看到了中国漫画未来的希望。</p>\n<p><img src=\"https://picx.zhimg.com/v2-956f1c1fe40f67be5a7fa983a0aa0e1b_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1497\" data-rawheight=\"979\" data-watermark=\"watermark\" data-original-src=\"v2-956f1c1fe40f67be5a7fa983a0aa0e1b\" data-watermark-src=\"v2-2c1643eab4bc06fd1057f12cbaebd125\" data-private-watermark-src=\"v2-843a41be25e26f7d93b10c122c323b73\" data-tags=\"porn\"></p>\n<p data-pid=\"2KzgNR_W\">最后，让我们再次记住这群曾为了中国漫画做出贡献的年轻人们。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-e533bdf9d336300f632484e71c413b33_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"984\" data-watermark=\"watermark\" data-original-src=\"v2-e533bdf9d336300f632484e71c413b33\" data-watermark-src=\"v2-e1491513a0fbe732d28d09b6eccb3703\" data-private-watermark-src=\"v2-c917431835d27fac401130fb522484fc\"></p>\n<p data-pid=\"fB181bYg\">关于画书大王，能说的非常多，我看知乎上介绍的都已经很全面了，最后我借这个回答，稍微补充几点自己总结的，供大家参考，为啥画书大王会被如今这么多漫画家、甚至漫画爱好者推崇！</p>\n<p><br></p>\n<p data-pid=\"95PFkBWa\">画王之所以是那么多人心中的漫画启蒙<sup data-text=\"\" data-url=\"https://user.guancha.cn/main/content?id=20267&amp;page=0\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"3\">[3]</sup>。结合资深国漫博主jjf2011的文章<sup data-text=\"\" data-url=\"https://user.guancha.cn/main/content?id=20267&amp;page=0\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"4\">[4]</sup>以及个人见解，综合认为有以下几点原因：</p>\n<p data-pid=\"AfaEgV-s\"><b>1.第一期试刊的最后一页刊登了“画王形象”有奖征集的告示与评选揭晓</b></p>\n<p><img src=\"https://pica.zhimg.com/v2-d8bf160c3823fbeeef18128ec8f8c2c1_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1054\" data-rawheight=\"1899\" data-watermark=\"watermark\" data-original-src=\"v2-d8bf160c3823fbeeef18128ec8f8c2c1\" data-watermark-src=\"v2-9b0c00c5fd1c5c8fd934eac3f6dd9c48\" data-private-watermark-src=\"v2-efe029eff2a907c2a2449169e25f09c7\"></p>\n<p data-pid=\"cQ40bV1i\">在《画书大王》的第一期试刊的最后一页刊登了“画王形象”有奖征集的告示，引发全国漫画爱好者的创作与投稿</p>\n<p data-pid=\"JLT9TmHg\">“画王形象”的评选结果也于22期揭晓，由郑旭升设计的角色最终获得了票选冠军，从而成为了杂志的形象代言人。</p>\n<p data-pid=\"WnjIINFW\">另外从本期开始分别在杂志的封面和封底开始连载法国漫画家唐.劳伦斯的全彩漫画《英雄风暴》的节选。另外“画王形象”也于第23期开始正式登陆杂志封面！</p>\n<p><br></p>\n<p data-pid=\"Xv4W0hYl\"><b>2.除了日漫和国漫外刊登了一些亚洲和欧美漫画家的作品。</b></p>\n<p data-pid=\"0LCtJ7pQ\"><b>包括不仅限于</b></p>\n<p data-pid=\"_NhMoHZK\">新加坡的阿米巴的《我的暑假》</p>\n<p data-pid=\"Ba7csioF\">美国的舒尔茨的《花生漫画》</p>\n<p data-pid=\"-MUZG4ra\">法国的唐·劳伦斯的《英雄暴风》</p>\n<p data-pid=\"bwMP0Yuy\">西班牙的维·塞格里斯《白甲卫士》</p>\n<p data-pid=\"Vx2_AaXE\">在那个以日本漫画为主流的时代，这也给了国人一次很好解其他风格漫画的机会，大大开阔了读者的眼界。可能是读者年龄层次的不同，当年《画书大王》的开放性和包容性绝对是如今大部分的主流漫画杂志难以企及的。</p>\n<p><br></p>\n<p data-pid=\"987uyMJz\"><b>3.在《画书大王》第八期的最末端刊登了“1994年画王超级短篇有奖征稿”启事</b></p>\n<p data-pid=\"pe_K7D7B\">这是中国漫画史上第一次的正规批量征稿！可以说这是对于整个中国漫画发展影响极其深远的事件之一。中国漫画从此有了一个可以真正展示自身才华的舞台，这个消息犹如深水炸弹般迅速的在广大画谜中间炸开，一石激起千层浪大批狂热的漫画爱好者们从而拿起了画笔，由纯粹的漫画读者转为了漫画参与者。</p>\n<p data-pid=\"R9MY38y8\"><b>4.超短篇征稿入选作品纷纷刊登！</b></p>\n<p data-pid=\"1hyOBSgq\">此时杂志单期的发行量已经突破了50万大关，就在此时“94年超短篇”有奖征稿活动的入选作品也从第15期开始陆续刊登！并在广大画谜中引发不小的轰动，以此为契机编辑部也决定成立自己的专业漫画工作室！并开始物色工作室成员。在这些超短篇大赛入围作品中有很多我们大家日后非常的熟悉名字，其中包括了：赵佳、林敏、蒋翎、胡倩蓉、柴美华以及潘广维等多位漫画界的明日之星</p>\n<p data-pid=\"tbgH8Rc5\">“1994年画王超短篇”选登活动正式结束，从杂志的第15期-第21期共计刊登入选作品58篇，这也是中国漫画史上第一次大规模选用和刊登新人作品的活动，这种模式直接被后来“5155时期”的各家漫画杂志广泛的效仿和应用。</p>\n<p><br></p>\n<p data-pid=\"y66OjcBP\"><b>5.“三剑客漫画工作室”正式成立！</b></p>\n<p data-pid=\"VEAjNysb\">在杂志第17期推出之前，位于北京的《画书大王》漫画工作室正式成立了，首批入驻的三位青年漫画作者分别是：陈翔、郑旭升和颜开！他们共同为工作室起了一个响亮的名字“三剑客漫画工作室”！中国历史上第一个职业漫画工作室就此成立，这是对于整个中国漫画发展影响极其深远的事件之一！漫画工作室的出现不仅整合了资源还极大的提高了效率，尝到甜头的编辑部开始着手准备第二个工作室的创建，当时准备邀请：胡蓉、姚非拉、柴美华以及聂峻等一批优秀的漫画工作者加入，但由于杂志的突然停刊这个计划最终流产......</p>\n<p><br></p>\n<p data-pid=\"M3ujJKwk\"><b>6.画王刊登鸟山明的《漫画研究所》及《漫画学校》</b></p>\n<p data-pid=\"PT40tdo4\">从画王第一期开始，就刊登了日本漫画大师鸟山明用漫画形式讲解如何创作漫画的作品</p>\n<p data-pid=\"48hogCIi\">鸟山明大师用通俗易懂的表达告诉国内读者，究竟怎样才能成为漫画家，这也是画王被称为国内第一批漫画家启蒙的原因之一</p>\n<p><img src=\"https://pic1.zhimg.com/v2-a74195d88417b334b6a7a3bb346c2beb_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1536\" data-rawheight=\"2048\" data-watermark=\"watermark\" data-original-src=\"v2-a74195d88417b334b6a7a3bb346c2beb\" data-watermark-src=\"v2-541c53eeabdcb064f455e4a044757ec4\" data-private-watermark-src=\"v2-aa782e8beb9ac06ae6e85887e27382fa\"></p>\n<p data-pid=\"SkmV4UPn\">漫画研究所总共连载十三期，从如何创作人物到用什么铅笔，什么墨水，到怎么画分镜，绘图远近法最后还教你怎么投稿等等，为国内有意向的读者打开一扇大门！</p>\n<p><img src=\"https://pic2.zhimg.com/v2-6f25c8f428e813685c03f93e7d57c6d4_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1536\" data-rawheight=\"2048\" data-watermark=\"watermark\" data-original-src=\"v2-6f25c8f428e813685c03f93e7d57c6d4\" data-watermark-src=\"v2-c2b9ebfda7a4be7a00af504b53dc6561\" data-private-watermark-src=\"v2-12ce549ed9c869ab3d3399b714521fb3\"></p>\n<p data-pid=\"yPm2YaZk\">而在漫画研究所完结以后，刊登了更高阶的同样出自鸟山明之手的《漫画学校》</p>\n<p><img src=\"https://pic1.zhimg.com/v2-f131eeabeb8759715d0f7b09e6c7a8ad_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1536\" data-watermark=\"watermark\" data-original-src=\"v2-f131eeabeb8759715d0f7b09e6c7a8ad\" data-watermark-src=\"v2-cc9279b222d11e124e832fcd09af0766\" data-private-watermark-src=\"v2-392b722676ba5c5b96ec9739202ea313\"></p>\n<p><br></p>\n<p><img src=\"https://picx.zhimg.com/v2-8c4278e60a60dade3067c13fc2d04ff3_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1536\" data-rawheight=\"2048\" data-watermark=\"watermark\" data-original-src=\"v2-8c4278e60a60dade3067c13fc2d04ff3\" data-watermark-src=\"v2-488e878f51be2aacfda7c3d60cc43084\" data-private-watermark-src=\"v2-859f333d1663a8acded223770d27ce71\"></p>\n<p data-pid=\"O9PbbeVa\"><b>7.画王信箱与画友论坛开设</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-4375f24e1dd6480ee9a5b4d0e33af6a2_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1536\" data-rawheight=\"2048\" data-watermark=\"watermark\" data-original-src=\"v2-4375f24e1dd6480ee9a5b4d0e33af6a2\" data-watermark-src=\"v2-de255ae9db8cc8accad585f6d5f41ce6\" data-private-watermark-src=\"v2-a8efdf69b0be7ed1d22ab82fad50e4bb\"></p>\n<p data-pid=\"H-4pmR89\">作为画王杂志直接与读者对话的栏目，我们可以了解到当时非常多的一些社会现象，比如当时的漫画还是连环画，家长们普遍不接受漫画的观念等等</p>\n<p><img src=\"https://picx.zhimg.com/v2-b9db054c482ac9ae1522db483522c33f_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1536\" data-rawheight=\"2048\" data-watermark=\"watermark\" data-original-src=\"v2-b9db054c482ac9ae1522db483522c33f\" data-watermark-src=\"v2-284c061b21c9450a492f784b0c2e4511\" data-private-watermark-src=\"v2-a5a7e9de50cdf6ecf8dcfc8ea55742f2\"></p>\n<p data-pid=\"SjTzOBou\">同时，也是让许多读者发出自己声音的一个栏目，让我们看到当时有那么多读者用自己的行动，自己的声音告诉中国的漫画家，加油！</p>\n<p><img src=\"https://pic1.zhimg.com/v2-02612b7318f6a1b019bb0190a9769a57_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1536\" data-rawheight=\"2048\" data-watermark=\"watermark\" data-original-src=\"v2-02612b7318f6a1b019bb0190a9769a57\" data-watermark-src=\"v2-41fd40e5bacc4754f6ce2e337c49cad9\" data-private-watermark-src=\"v2-27eb047ab6e36e7c79009093dadc0892\"></p>\n<p data-pid=\"oxTHUdVH\"><b>8.优秀中外漫画家以及世界漫画史介绍</b></p>\n<p data-pid=\"J-dwH8py\">画王从试看刊之初，就已经开设『人物介绍』一栏，在让国内读者欣赏名家之作的同时，向大家阐述那些创作出这些优秀作品的漫画家们，其中包括</p>\n<p data-pid=\"m7g0FibW\">台湾郑问，车田正美，鸟山明，高桥阳一</p>\n<p><img src=\"https://pic3.zhimg.com/v2-612c7d3b1f01e0d4342e5cf156f4a929_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1536\" data-watermark=\"watermark\" data-original-src=\"v2-612c7d3b1f01e0d4342e5cf156f4a929\" data-watermark-src=\"v2-56410b97b902595393ef8cc3705ce571\" data-private-watermark-src=\"v2-3ad26a30c606da933d90f0eb7e898e5d\"></p>\n<p data-pid=\"5SOoQHNM\">黄玉郎，手冢治虫，藤子不二雄，高桥留美子，马荣成</p>\n<p><img src=\"https://pica.zhimg.com/v2-e84a67a1805e4b73a3e75df9ec282364_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1536\" data-rawheight=\"2048\" data-watermark=\"watermark\" data-original-src=\"v2-e84a67a1805e4b73a3e75df9ec282364\" data-watermark-src=\"v2-f4cf2bd7d6510bc94e6cd70d8015e2d7\" data-private-watermark-src=\"v2-de27256aca219ca6ee420e7ce40a1c23\"></p>\n<p data-pid=\"X-GDv7eB\">谭晓春，北条司，成田美名子，安达充，田恒玉，叶精作，石田章太郎，王培堃，原哲夫，荒木飞吕彦</p>\n<p><img src=\"https://pic4.zhimg.com/v2-cb81cad6d4d812948a0285f1497580aa_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1536\" data-rawheight=\"2048\" data-watermark=\"watermark\" data-original-src=\"v2-cb81cad6d4d812948a0285f1497580aa\" data-watermark-src=\"v2-59e9f4d83f698e078acfbd8f27e52e71\" data-private-watermark-src=\"v2-df4b579abf482258bb6449d8002db369\"></p>\n<p data-pid=\"Qzxw1B9P\">以及比较冷门的细川知荣子，安彦良和柴门文，池田理代子，松本零士。</p>\n<p data-pid=\"yzr7u-Sn\">再介绍作者的同时，杂志也在告诉中国读者世界漫画的发展，因此有了『世界漫画史话』的出现</p>\n<p data-pid=\"MyNjbFlp\">向读者展示了美国漫画，英国漫画的发展与演变，为中国读者了解世界漫画提供了一个很好的窗口。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-e1c8c54ef96893f1a42dd90eaee06dee_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1536\" data-rawheight=\"2048\" data-watermark=\"watermark\" data-original-src=\"v2-e1c8c54ef96893f1a42dd90eaee06dee\" data-watermark-src=\"v2-918ad1ec27e895046bb972dfafd14afd\" data-private-watermark-src=\"v2-1ee2b9114a7a5618792b6274efcba56a\"></p>\n<hr>\n<p><br></p>\n<p data-pid=\"Hqinbr6Y\">在<i>jjf2011</i>看来，《画书大王》的出现不仅填补国内没有专业漫画杂志的空白，它还书写了中国漫画史上的好多个第一！虽然它最终没能够结出果实，但它却开出了最为绚丽的花朵，同时也为整个中国原创漫画打开了一扇大门！正因为有了《画书大王》当年不惜余力的对中国原创漫画全方位的探索，日后才会有了国内漫画杂志“百花齐放”的场景出现。</p>\n<p data-pid=\"v3Dq0J_O\"><b>《画书大王》作为中国漫画发展史上一个无法逾越的里程碑，它永远屹立于一代读者的心中！</b></p>\n<p data-pid=\"uVYiQcif\"><br> 以上</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/bin-di-47-74?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">彬帝</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/286775795/answer/2603044530?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">1 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/515952442?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">有没有像《大王饶命》的国漫或者日漫?</a><br><a href=\"http://www.zhihu.com/question/522588938?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">你喜欢《喜羊羊与灰太狼》系列动画电影的原因是什么？</a><br>\n","link":"http://www.zhihu.com/question/286775795/answer/2603044530?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"还在苦恼如何寻找研究选题？不妨来试一试这个人工智能吧","date":"2022-08-01 03:30:01","description":"让 Elicit 在海量的研究文库里面，帮咱们寻找别人的研究成果，以便确定它们是不是有价值的真问题。<a href=\"https://sspai.com/post/74901\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/74901"},{"title":"派早报：AMD 市值再超英特尔，二季度智能手机出货量同比明显下降等","date":"2022-08-01 00:55:26","description":"你可能错过的新鲜事AMD市值再次反超英特尔7月29日，即英特尔公布上一季度财报，表明未能实现利润预期的次日，其股价下跌近9%，市值收于1480亿美元。同日，AMD股价上涨超过3%，市值1530亿美元， ...<a href=\"https://sspai.com/post/74917\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/74917"},{"title":"即将涨价的 VR 头显，买来可以玩什么？","date":"2022-07-31 10:06:46","description":"来自编辑部的 VR 游戏分享。<a href=\"https://sspai.com/post/74918\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/74918"},{"title":"用插件让新标签页回归空白，和恼人的搜索栏与广告标说再见","date":"2022-07-31 07:08:59","description":"我只想要个纯净的空白页当新标签页……怎么就这么难啊？<a href=\"https://sspai.com/post/74325\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/74325"},{"title":"如何看待《原神》须弥前瞻短片 03 「明慧的序曲」？","date":"2022-07-31 03:18:24","description":"\n<p data-pid=\"ZK7Ig401\">又是一波信息量巨大的预告！经过前瞻第一弹对草元素体系以及第二弹对须弥地理景观的展示后，这次到来的新预告短片《明慧的序曲》集中对须弥剧情背景、魔物以及即将登场的人物们进行了介绍，不出意外这应该就是前瞻短片最后一集，下一次就该是重磅的 3.0 前瞻直播了。好了废话也不多说，接下来就盘点一下本次预告的内容并适当拓展一些重点考据吧！</p>\n<p><img src=\"https://pic1.zhimg.com/v2-f4ed3f973c439e0e2a6e3acdd98a01f1_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-f4ed3f973c439e0e2a6e3acdd98a01f1\" data-watermark-src=\"v2-bdaf9b9e6ff7d4d568d5b5d6b32cdb71\" data-private-watermark-src=\"v2-9d63e43b4e95bdb806901fe2b5df1e6e\"></p>\n<p data-pid=\"1VyQP_oL\"><b>※ 文章内容比较多（约八千字），大家可以点击目录快速跳转查看自己感兴趣的内容。</b></p>\n<hr>\n<h2>一、「虚空」系统</h2>\n<p data-pid=\"RZm-dSB5\">预告首先对稻妻之行中由神子提供给旅行者的一个有关须弥的重要情报进行了回收，即<b>「在须弥知识是作为一种资源被管理的」</b>，而用来实现这一目标的工具是一种被称为<b>「虚空」</b>的神造系统。</p>\n<p data-pid=\"tuhGadjU\">「虚空」系统为前代草神「大慈树王」所遗留的遗产，即使前代草神早已在坎瑞亚战争中逝去，但此系统依然依托继承下来的神之心稳健的运作着。「虚空」系统外观上表现为近似蓝牙耳机一样的设备，每位须弥人都有佩戴（这可能是强制的）。<b>目前已知的线索还不足以解读出「虚空」系统的实质和作用，不过结合「知识资源化」这一背景进行合理推测，似乎可以将「虚空」系统视为一种「综合情报管理系统」与「知识数据库」进行理解。</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-9c160084eac84a7779a66d8006c8c3bc_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-9c160084eac84a7779a66d8006c8c3bc\" data-watermark-src=\"v2-69ecaa9546b7dd92e983ee94c8561fe3\" data-private-watermark-src=\"v2-537477452d151989d97aff45bcee4c8f\"></p>\n<p data-pid=\"rcMvyiUR\">类比现实中进行学术研究时使用的学术期刊数据库（利如 ScienceDirect、Scopus、Wiley、知网等），须弥可能将有重要价值的知识存储在依靠神之心力量构建的巨型数据库中，当有须弥人需要使用这些知识时，可向系统发出申请，通过「付费」（即支付代价，但代价未必是金钱。从早先层岩剧情海迪夫的对话中也能看出大多须弥学者是视世俗金钱为粪土的）来向脑中载入所需的知识。</p>\n<p data-pid=\"UV3I_5YZ\">如果系统判定申请者已经失去了使用这些知识的资格，可能就会收回权限。对于现实中的我们而言，这不过意味着我们不能再用自己的账号从数据库中下载论文了，但对于须弥人，这可能意味着与他们脑部连接的「虚空」系统会直接将这些知识从他们的脑中抹去。</p>\n<p data-pid=\"uMe5AoHp\">当然除了「下载知识」外，当教令院的学者研究出新的高价值知识时，也许他们可以像现实中科研工作者向期刊投稿一样，通过「虚空」系统向数据库上传知识进行共享。同样，就和现实中论文引用量是衡量一位科研人学界成就高低的标准一样，须弥学者们可能也会以自己上传的知识被大量用户申请调用作为一种光荣与自豪的象征。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-0991245bb019d774913dd2ace37ff58f_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-0991245bb019d774913dd2ace37ff58f\" data-watermark-src=\"v2-ce69a403872a19136a7fc4dbd1b4b47b\" data-private-watermark-src=\"v2-09d4e15697acd7eee2055aafe5f1143c\"></p>\n<p data-pid=\"GRs62NTD\">不过侧面来看，既然「虚空」系统可以直接与脑部交互，这个系统某种意义上也是最强大的「监听」系统。前瞻中提到在如今的须弥小草神并不管辖国务，种种政务均由教令院处理，如果教令院中部分高层是作为剧情中的反派势力被塑造的，那么作为国家实际统治者的他们就可能利用「虚空」系统对民众进行控制，将一切不利于实现教令院目标的想法扼杀，这也许就是《足迹》预告 PV 中提到的<b>「学者们的智慧正在催生愚行」</b>的含义之一吧。</p>\n<p data-pid=\"sIohCahQ\">当然啦，以上这些内容也都是个人的一些大胆推测，大家看个乐呵就好，一切请以实际剧情为准。</p>\n<h3>考据：有关「虚空」</h3>\n<p data-pid=\"33UjXnqy\">对了，这里还想对「虚空」这一名称进行一些简单考据。大家可能以为「虚空」所对应的英文是「Void」，但在英文版中，该词汇实际对应的翻译是一个会让各位感到非常陌生的单词<b>「Akasha」</b>。该词出自印度教与佛教文化，巴利文及梵语写作<b>「ākāśa-dhātu」</b>（天城体：आकाश），意为<b>「空界」或「虚无界」</b>，也可音译为<b>「阿迦奢」</b>，其是古印度五大元素、密宗六大元素之一</p>\n<p data-pid=\"ynFvKtvz\">有关「空界」的含义，《佛说稻芋经》中提到：「何谓为空？能无障碍者，名为空界。」。空界，即指由虚空构成的界，是色聚之间的间隙与界线，其特征为无障碍。因为空界存在，人因此可以识别出每个色聚的不同（这部分涉及到比较深奥的佛学概念，理解不了也很正常，我也看不懂orz）。</p>\n<p data-pid=\"AL6k-6nV\">简单来说，「空界」即是古代朴素哲学观中所理解的<b>「物质与物质之间的空间」</b>。这个词在 19 世纪后期也被西方神秘主义和招魂术所采用，用以代表象征精质与永恒的假想元素<b>「以太」</b>。在现代印度雅利安语和德拉威语中，该词则保留了作为<b>「天空」</b>的含义。</p>\n<hr>\n<h2>二、无梦的须弥</h2>\n<p data-pid=\"zn68Umgr\">预告中提及的另一项重要剧情背景是<b>「须弥人不会做梦」</b>。这个个人推测与前代草神「大慈树王」关系不大，而与现任草神「小吉祥草王」息息相关。在 2.8 版本主线中，我们已经隐约得知小草神拥有的能力可理解为「读取思想，干涉现实」，这样一来是否可以认为：须弥人之所以不会做梦，正是因为人们的梦境被小草神取走，拿作他用了呢？</p>\n<p><img src=\"https://pic1.zhimg.com/v2-64506ce95f0a60139248c4a54f6bce6d_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-64506ce95f0a60139248c4a54f6bce6d\" data-watermark-src=\"v2-90784129f24e3ea3d880c3a7ea81300f\" data-private-watermark-src=\"v2-85e51d03c96a92d2c1d7b3511ebed700\"></p>\n<p data-pid=\"PnIWLGiy\">目前还难以推测小草神此番举动的目的，也许小草神是要集合人类梦的力量来抵抗某种威胁（譬如之前前瞻中提及的「来自沙漠力量的侵蚀」）？也许小草神与稻妻雷神一样因某桩事件埋下了心结，让她需要取走人们的梦境来满足自己（海岛剧情提到小草神并不自由，也很羡慕自由自在的人，这可能暗示了她不佳的处境）？</p>\n<p data-pid=\"KINk_TTM\">无论如何，如今的须弥人不但早已习惯了无梦的生活，甚至还认为无梦是一种「理性与智慧的象征」而对此非常自豪。然而，对于人类而言，从古至今「梦」往往都象征着一种伟大的力量，即无边无际的想象力，失去梦境真的会是一件好事吗？我并不这么认为。这也让我相信，<b>「梦的回归」</b>可能将是须弥主线故事的一个重要核心。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-2349393c0f38bcde3980f3cbf17c2bf5_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-2349393c0f38bcde3980f3cbf17c2bf5\" data-watermark-src=\"v2-352e791aec25c3e4565cda18da7b6103\" data-private-watermark-src=\"v2-609691c9be0ca2b2652c456d5ed3e7d4\"></p>\n<h3>考据：前代草神「大慈树王」</h3>\n<p data-pid=\"_web5Zcq\">这里聊一聊有关须弥前代草神的背景知识。与当代草神拥有称号「小吉祥草王」一样，前代草神也有其称号，叫做<b>「大慈树王」（The Greater Lord Rukkhadevata）</b>。</p>\n<p data-pid=\"zUn0ivfu\"><b>「Rukkhadevata」</b>（天城体：रुक्खदेवता）一词出自印度教四教派之一的「湿婆教」（Shaivism，也音译为「希瓦派」）信仰，含义为<b>「树之女神」</b>（Tree-goddess；这里间接说明前代须弥草神也是女性）。</p>\n<p data-pid=\"SKDzW4Q3\">其实际上印度教、佛教和耆那教神话共同存在的人物<b>「药叉女」</b>（Yakṣiṇī，天城体：याक्षिणि；也译作<b>「母夜叉」</b>）的别称。药叉女常被崇拜为财富女神或修行者的守护神，当出现在《本生经》文献中时，她们被视为生活在树上的当地神灵，有时就称为 rukkha-devatā ，即树之女神。</p>\n<p><img src=\"https://pica.zhimg.com/v2-3082605766500aceadd89fb678900529_720w.jpg?source=b1748391?rss\" data-caption=\"药叉女在开花的阿育王树下。印度巽伽王朝, 公元前 1-2 世纪\" data-size=\"small\" data-rawwidth=\"800\" data-rawheight=\"1261\" data-watermark=\"original\" data-original-src=\"v2-3082605766500aceadd89fb678900529\" data-watermark-src=\"v2-555c69f1a0d7e6a3bf143f347485f344\" data-private-watermark-src=\"v2-ce341f09c479f99d66a197a57c36b44d\"></p>\n<h3>考据：当代草神「小吉祥草王」</h3>\n<p data-pid=\"r63jPmaH\">有关小草王称号的考据我在自己之前的文章里其实已经写过不少次了，这里就再搬运一遍吧。</p>\n<p data-pid=\"dAejHPQW\">英文版中「小吉祥草王」写作<b>「Lesser Lord Kusanali」</b>，其中「小」与「王」意思的对应关系清晰明了，「吉祥草」则显得比较奇怪，因为其并没有写作通常的英文名「Reineckea carnea」，而是写成了较奇怪的「Kusanali」。</p>\n<p data-pid=\"NR4YOUrw\"><b>「Kusanali」</b>考虑应是源于古语言巴利语（Pāli-Bhāsā）的单词，原型词写作「Kusanāḷi」。巴利语是出现于约公元前 1500 年古印度地区的一种通用俗语（方言），「巴利」的含义乃是「佛陀的语言」或「圣典」，因相传其正是当年释迦摩尼四处说法时所使用的语言。</p>\n<p data-pid=\"ppWY3RBu\">「Kusanāḷi」一词可拆分为两部分理解，其中「Kusa」意为吉祥草，而「nāḷi」则为「nāḷa」(茎部) 一词的副词形式。 需要注意的是，这里提到的「吉祥草」并非指生物学意义上的吉祥草（Reineckea carnea，又名「紫衣草」），而是强调宗教意义上的吉祥草，即<b>「羽穗草」</b>（Desmostachya bipinnata，又名「哈法草」），传说释尊在菩提树下成道时敷此草编织成的草席而坐，因此吉祥草在佛教中被视为圣草。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-c6479a552e1ac2152c21bccc66fab42d_720w.jpg?source=b1748391?rss\" data-caption=\"现实中的「吉祥草」（羽穗草）。印度自古视此草为神圣象征。每逢举行各种仪式，就编成草席，上面放置各种供物。而行者在空闲寂静处和清净房中，也经常以吉祥草为坐卧之具\" data-size=\"normal\" data-rawwidth=\"1443\" data-rawheight=\"1200\" data-watermark=\"original\" data-original-src=\"v2-c6479a552e1ac2152c21bccc66fab42d\" data-watermark-src=\"v2-93bac7b84caacba90aed151827571440\" data-private-watermark-src=\"v2-3fb8571a7d903a42dc1c5baf0cf15fb8\"></p>\n<p data-pid=\"qFCOq4tI\">日语版本中，「小吉祥草王」则完全是对巴利语的片假名音译转写，「クラクサナリデビ」(kura kusanari debi) 对应<b>「Khudda Kusanāḷi Devī」</b>，意为<b>「卑微的吉祥草女神」</b>。</p>\n<p data-pid=\"6x7PzqHZ\">实际上「Kusanāḷi」也是个菩萨名，其出处为佛教寓言故事集《本生经》，这本古印度文学经典主要讲述了释尊成为佛陀前所经历的前世轮回故事，而 Kusanāḷi 正是佛陀的某一世轮回。具体所在篇目为第十三章「吉祥草品」一二一「吉祥草本生谭」，故事梗概如下：</p>\n<blockquote data-pid=\"QrYBsxO_\">Kusanāḷi 是个草精灵（修炼成的菩萨），住在一个国王的花园，它和一位树灵是好友。有一天国王请木匠来修房顶，木匠想要把树灵那棵树砍了用来做梁，于是 Kusanāḷi 变成一只变色龙爬上树，让树看起来满是树洞。木匠们见这棵树上全是洞，以为树的木质不好，于是放弃了砍这棵树做房梁。这个故事体现的哲理是：<b>即使力量弱小，也可以为朋友提供了不起的帮助。</b>\n</blockquote>\n<h2><b>三、沙漠的遗民「镀金旅团」</b></h2>\n<p data-pid=\"OziKqJIN\">比较关注剧情细节的朋友应该不会对「镀金旅团」这个名字感到太陌生，在早前的活动「有香自西方来」中旅行者就已经从须弥人娜扎法琳口中听说了这一团体。在娜扎口中，镀金旅团似乎是一群「为了钱什么都愿意干」的雇佣兵，闯入他们的老巢则「十分危险」，是有着近乎盗宝团负面形象的团体。而这次预告短片则以更加正面的角度地对他们进行了介绍。</p>\n<p><img src=\"https://picx.zhimg.com/v2-7219da4f5f678baa8b1e8b6c3ae079c1_720w.jpg?source=b1748391?rss\" data-caption=\"「有香自西方来」剧情对话\" data-size=\"normal\" data-rawwidth=\"1420\" data-rawheight=\"826\" data-watermark=\"original\" data-original-src=\"v2-7219da4f5f678baa8b1e8b6c3ae079c1\" data-watermark-src=\"v2-2fc7ae15b5855e09a8735945e93d0e38\" data-private-watermark-src=\"v2-911c5e1076fd15d79b28e596af74d4d2\"></p>\n<p data-pid=\"m4c10FI6\">「镀金旅团」中的人们在外貌与装束上与须弥民众有着非常明显的差异，他们在事实上也并不接受须弥国家机构的强力管理，而是拥有自己的小片自治区域、作为民间自由团体「以力量与智慧讨生活」，也就是充当雇佣兵。这一现状与「镀金旅团」的出身有关，他们并非雨林的土著居民，而是来自须弥西部荒芜沙漠地带的移民民族。</p>\n<p><img src=\"https://pica.zhimg.com/v2-714aeaf45507013fe629693e99ead526_720w.jpg?source=b1748391?rss\" data-caption=\"来自沙漠古文明的移民「镀金旅团」\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-714aeaf45507013fe629693e99ead526\" data-watermark-src=\"v2-3d00980db53c3c66128521aa490ca33c\" data-private-watermark-src=\"v2-2b7f688b61d6aab65046fb7094be3413\"></p>\n<p><img src=\"https://picx.zhimg.com/v2-f9746f3f675ef619ea56ec6d8b5ad77a_720w.jpg?source=b1748391?rss\" data-caption=\"戒备森严的旅团营地。除了充当正经的雇佣兵，也有一些生性不羁的旅团族人不愿融入雨林文明，而是选择落草为寇，成为活动于沙漠地带的强盗，他们将是旅行者探索沙漠地区时要面对的敌人\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-f9746f3f675ef619ea56ec6d8b5ad77a\" data-watermark-src=\"v2-c4e80f0caf5b140dc7286b7bb82dff8d\" data-private-watermark-src=\"v2-76ac4e2ef32d0b16dde52229faf2e1c7\"></p>\n<p data-pid=\"TQhDodTe\">相信观看过须弥前瞻第二弹《细雨与飞沙》的朋友一定对沙漠地区的奇景感到印象深刻，而围绕着沙漠存在一个巨大谜团：从此地残存的古代神庙遗迹以及大金字塔不难看出，沙漠古文明曾一度发展到极高的程度，那么究竟是什么摧毁了这个文明，让如今的沙漠仅留一地伤痕？</p>\n<p><img src=\"https://pic4.zhimg.com/v2-8b025dcffaca2dd0c96c1216403b4a09_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-8b025dcffaca2dd0c96c1216403b4a09\" data-watermark-src=\"v2-d8573bb46162649041cdf7ff990f0a31\" data-private-watermark-src=\"v2-d2f39acc9bc27f3907fa04a762ec89e8\"></p>\n<p data-pid=\"9pKA0RRx\">如今，在这些被黄沙逐渐掩埋的壮观遗迹中依旧游荡着先进的超文明机器，屠戮一切企图入侵者，而神殿中残存的一些奇异设备甚至会异化沙漠中不慎靠近的野兽，让它们变得更加危险凶猛。</p>\n<p data-pid=\"CbVwj6A6\">从外观来看，沙漠文明机器虽与坎瑞亚机器外观存在相似之处，但也有较明显不同，加上制作组反复以「神性」、「超古代」等字眼称呼沙漠文明，我们似乎可以做出推测：<b>沙漠文明拥有着比我们想象中悠久得多的历史，它们也许起源于远早于七神时代的提瓦特统一文明时代，即「第一王座」时期。</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-4dbc72731d55bbcea6ef8b79159eb372_720w.jpg?source=b1748391?rss\" data-caption=\"守卫着沙漠文明遗迹的古代机器\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-4dbc72731d55bbcea6ef8b79159eb372\" data-watermark-src=\"v2-73e7642d10bf0f9e6942f200b7ad6fb5\" data-private-watermark-src=\"v2-3f6415bcb0c79910e657f86e50def155\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-3975117a8976abab36a87e84d8b36587_720w.jpg?source=b1748391?rss\" data-caption=\"某处神殿中不知作用的奇异古代机器\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-3975117a8976abab36a87e84d8b36587\" data-watermark-src=\"v2-21e5f507d7e4144d434ef66ff9ac3c58\" data-private-watermark-src=\"v2-6aa6f17c672cc7a688d833b453202b86\"></p>\n<p data-pid=\"WTul9HIF\">实际上，作为沙漠古文明的遗民存活至今的镀金旅团一族也很难不让人联想到稻妻的海祇民与白夜国文明，也许两者其实有着类似的遭遇，母文明因变故惨遭毁灭或抛弃，残存的子民因缘际会依附于新的七神秩序而得以幸存？这一切，就要等待未来须弥剧情为我们提供解答了，我也相信镀金旅团势力会在须弥的故事中扮演一个举足轻重的角色。</p>\n<h2>四、奇妙生物蕈兽 &amp; 须弥异兽</h2>\n<p data-pid=\"61RG_kGi\">早在层岩巨渊深邃的地底我们就已见识到了「蕈兽」这种奇妙生灵，而这一族群在其发源地须弥的环境中展现出更加丰富多彩的姿态，成为须弥雨林生态系统中极为重要的一环。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-82f24c663d390c1c6b0dacdc259d1308_720w.jpg?source=b1748391?rss\" data-caption=\"人畜无害水蕈兽\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-82f24c663d390c1c6b0dacdc259d1308\" data-watermark-src=\"v2-c618d86c1ae5c78d6cdefcf70a6e4974\" data-private-watermark-src=\"v2-c02e955129bd9e57ddbbc48c2414cc56\"></p>\n<p data-pid=\"t6y-FpAd\">出于增强繁衍与保护菌群的目的，这些生长自须弥湿润泥土中的真菌族群开启了它们的加速进化过程，栖息在潮湿环境中的水蕈兽以及飘荡在林间、仿佛戴着魔法师帽的草蕈兽属于低级的小型蕈兽，比较常见；某些进化程度较高的蕈兽则在拟态上更进一步，表现出了很强的动物性，例如在雨林至深处的蕈菇之地，我们甚至能看到宛若孔雀的高级蕈兽。</p>\n<p><img src=\"https://pica.zhimg.com/v2-878b565e7958a59c027f1c65f67940fb_720w.jpg?source=b1748391?rss\" data-caption=\"游荡林间的草蕈兽\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-878b565e7958a59c027f1c65f67940fb\" data-watermark-src=\"v2-1fa9b67cede9e29809357445061ef84f\" data-private-watermark-src=\"v2-274031f53375ff016ce232be90a8d0e9\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-b79c59c8189e214e1a389654f66de0bc_720w.jpg?source=b1748391?rss\" data-caption=\"孔雀形态的高级蕈兽，看场景疑似为大世界 BOSS\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-b79c59c8189e214e1a389654f66de0bc\" data-watermark-src=\"v2-e8e4294c772d161c66cb369c39df86d2\" data-private-watermark-src=\"v2-731d41d5ef89ec3ebeb7b964067e57ab\"></p>\n<p data-pid=\"lPEqn9SV\">虽然蕈兽们看起来或可爱或美丽，但千万不要被外表蒙蔽而对它们掉以轻心，这些领地意识极强的生物一旦泛滥将是危险程度极高的威胁，有记载显示，曾经就有名为阿尔瓦 · 尼古拉的学者在深入蕈兽地盘后，因行为不慎被发狂的菌群吞噬，最后尸骨无存（见雷深渊法师怪物图鉴）。</p>\n<p data-pid=\"6TV7nkSF\">除了蕈兽外，须弥奇妙的雨林环境中也孕育了其他异兽，既有外观类似剑齿虎一样的猛兽，也有毛皮厚实、甚至身上长着蘑菇的林猪。这些生物将会是我们须弥旅途中一道有趣的风景线。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-387dc33965f90d3c8f984a6ee0d6b2be_720w.jpg?source=b1748391?rss\" data-caption=\"须弥的虎形野兽外观很漂亮，似乎也有比较复杂的动作设计\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-387dc33965f90d3c8f984a6ee0d6b2be\" data-watermark-src=\"v2-bb23f606981c6db5c24da237d712cbb5\" data-private-watermark-src=\"v2-6e69853bfe4c9d21746f239f568935ae\"></p>\n<p><img src=\"https://pica.zhimg.com/v2-08f2317d7bacab1c3ce714ae7354417f_720w.jpg?source=b1748391?rss\" data-caption=\"普通野猪掉兽肉，雪山野猪掉冷鲜肉，问：须弥林猪掉什么肉？\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-08f2317d7bacab1c3ce714ae7354417f\" data-watermark-src=\"v2-b321159effdc2a1818d6f531d8a5a7b8\" data-private-watermark-src=\"v2-ea9335f20236950ba5162155e92cc4ea\"></p>\n<h2>五、即将邂逅的友人们</h2>\n<p data-pid=\"3PF-2mWl\">新国度的冒险即将拉开帷幕，怎么少得了邂逅新的伙伴？相信不少朋友在早前就已经通过各种各样的渠道了解到了这些须弥新角色的信息（也有不少朋友是很无奈地被动接受了「爆料」），但我想说，我认为这次前瞻短片中展示的角色可比我早先看到的那些「泄露图」好看，也许是渲染的功劳？也许是带点心理作用？但有一条理肯定没错：多点等待，官方的永远才是最好的。</p>\n<h3>「巡林官」提纳里</h3>\n<p><img src=\"https://picx.zhimg.com/v2-7ba43ca0b8545f25e550372a87f2744c_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-7ba43ca0b8545f25e550372a87f2744c\" data-watermark-src=\"v2-1f35bfc2cc788e05efc15398d007e274\" data-private-watermark-src=\"v2-0f0717406c58d2c719c6ba32800a6655\"></p>\n<p data-pid=\"JijTBdXG\">学者型角色，隶属教令院「生论派」，如今担任巡林官一职驻守化城郭，负责巡视道成林一带。柯莱目前正在提纳里指导下进行着巡林员见习（插一句，之前的前瞻分析中我曾推测出现在须弥道路旁的奇异植物很可能是须弥的特色路灯，这下夜景画面出现，总算是验证猜想啦）。</p>\n<p data-pid=\"cNt8pSBH\"><b>注：</b>「提纳里」（Tighnari）一名的原型为生于安达卢西亚地区（现西班牙境内）的阿拉伯农学家、植物学家、诗人、旅行者和医师泰格纳里（Al-tighnari，生卒年不详），其最出名之处是撰写了一篇名为「Zuhrat al-Bustān wa-Nuzhat al-Adhhān」（字面意思为：花园之荣耀与心灵之娱乐）的农学论文，文中描述了他的前往中东的旅程并分享了对于农学和其他一些主题的看法。</p>\n<h3>「海港学者」艾尔海森</h3>\n<p><img src=\"https://pic3.zhimg.com/v2-cb53ccb3a4643ec1c4a46ecd3ce6c8bc_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-cb53ccb3a4643ec1c4a46ecd3ce6c8bc\" data-watermark-src=\"v2-37fbeaebde6c918acecc81c4ec3d74be\" data-private-watermark-src=\"v2-56cced15070fd19ef4fe1baa73fea724\"></p>\n<p data-pid=\"1-XA3qjq\">出身教令院「知论派」、身材高大相貌英俊的灰发男性，旅行者将在须弥南部海港「奥摩斯港」与这位艾尔海森先生邂逅。看起来就很可靠的他不知将为旅行者的须弥之行提供怎样的协助？</p>\n<p data-pid=\"QYKHIXh6\"><b>注：</b>艾尔海森（Alhaitham）其名的原型为阿拉伯著名学者、物理学家、数学家「伊本 · 海什木」（Ibn al-Haytham，965-1040 年），中文也译作「海桑」、「哈金」等。这位学者有大量著作和被现代科学证明了的科学发现，尤其在光学研究方面有突出成就，著有《光学之书》、《光论》、《有关托勒密的疑点》等。</p>\n<h3>「雇佣兵」迪希雅</h3>\n<p><img src=\"https://pic1.zhimg.com/v2-16cfd64355b498f331e2ead8298a04fe_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-16cfd64355b498f331e2ead8298a04fe\" data-watermark-src=\"v2-b26ccfcca5d34b89241af8afb982785f\" data-private-watermark-src=\"v2-fe00560257f97a670fc9cf7fc5697c51\"></p>\n<p data-pid=\"Dt99SyRv\">出身沙漠民族、小麦色皮肤的飒爽御姐，隶属「镀金旅团」的雇佣兵，目前正停留在雨林与沙漠边界的一处旅团哨点中。</p>\n<p data-pid=\"fqm1UI53\"><b>注：</b>「迪希雅」（Dehya）之名应该源自「迪亚」「Dihya」，是历史上一位柏柏尔族（Berbers；是生活在西北非洲的、说闪含语系柏柏尔语族语言的部族统称，今日该族后裔主要分布在阿尔及利亚）女王与著名宗教军事领袖，她曾团结整个北非的土著力量、领导人民抵抗 7 世纪阿拉伯帝国倭马亚王朝军队对北非马格里布（Maghreb；非洲西北部一地区，为柏柏尔人的原乡，名称意为「日落之地」）的入侵。尽管最终兵败，北非也被完全征服皈依伊斯兰教，但这位传奇女王的事迹却传颂了下来，被后世抗争的柏柏尔人视为「抵抗侵略」、「捍卫自由」的象征。</p>\n<p data-pid=\"dF9v0ko4\">由于在战场上出色的指挥表现，迪亚深受当时的阿拉伯军队忌惮，穆斯林将领们甚至认为这位女王掌握着预知未来的巫术，因而给她起了一个阿拉伯语绰号「卡希纳」（Al-Kahina），意为「女祭司」或「占卜者」。</p>\n<h3>「舞娘」妮露</h3>\n<p><img src=\"https://pic1.zhimg.com/v2-28b9c8ebcaff29e2788f089d0fdd4f5c_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-28b9c8ebcaff29e2788f089d0fdd4f5c\" data-watermark-src=\"v2-9d451f2ec926049c4e0bdc23297495cf\" data-private-watermark-src=\"v2-3677183bac2e6714c92f328e9f21152e\"></p>\n<p data-pid=\"G9jAtkTw\">充满异域风情、善于舞蹈的美丽红发少女。在全民崇尚智慧与理性的须弥，少女却选择另辟蹊径，追求艺术与舞蹈上的成就。可想而知，这并不是一条容易走通的道路。</p>\n<p data-pid=\"z_oDn8RU\"><b>注：</b>「妮露」（Nilou）一名是波斯名「妮露法」（Niloufar）的昵称，含义为「莲花、睡莲」，是个很漂亮也很可爱的女孩名。</p>\n<h3>「神秘少女」纳西妲</h3>\n<p><img src=\"https://pica.zhimg.com/v2-19ea4d28b247bbd999192028edd7ae65_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-19ea4d28b247bbd999192028edd7ae65\" data-watermark-src=\"v2-e0288234a450ef45bae739ef269ea97e\" data-private-watermark-src=\"v2-f265af85217467921cb100928221ca2c\"></p>\n<p data-pid=\"ei73ZNqx\">《神秘少女》……哈哈，看来官方这里还是想卖个关子，我也不剧透了，相信不少朋友也早就知道这位少女的真实身份了吧？虽然还未曾正式谋面，但其实咱们已经跟她说过话了。</p>\n<p data-pid=\"F1Cwoilt\"><b>注：</b>「纳西妲」（Nahida）这个名字可颇有来头。虽然词汇本身确实可作为蝴蝶科 Riodinidae 下的一个属名来使用，但这里主要是化用自古代波斯琐罗亚斯德教（不拗口、大家也更熟悉的叫法是拜火教）信仰中代表生育、丰产与智慧的女神「安娜希塔」（Anahita）。</p>\n<p data-pid=\"PXhxVmpJ\">不知道大家还记不记得开在稻妻离岛的须弥特产店「葱茏之愿」？店主瓦希德时常推销的产品「丰沃之惠」就是一种能使再贫瘠的土地都可变得适宜耕种的神奇肥料，原理被解释为小吉祥草王力量的恩惠，而其英文名正叫作「Anihitian Blessing」，直译便是「安娜希塔的祝福」。</p>\n<p data-pid=\"QFAt28s-\">另外根据一些学者的说法，「安娜希塔」在印度-伊朗时代（Indo-Iranian times，指公元前 1500 - 公元前 500 年）对应的神性名称应为「萨拉斯瓦蒂」（Sarasvatī），也就是说这位女神可能与印度教神话中萨拉斯瓦蒂河的水神、同样象征智慧的「辩才天女」（也叫「妙音天女」）系出同源。</p>\n<h3>「大风纪官」赛诺</h3>\n<p><img src=\"https://pic4.zhimg.com/v2-5f73b7eae5c9e6b03a13a55375cf78c4_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-5f73b7eae5c9e6b03a13a55375cf78c4\" data-watermark-src=\"v2-8ab7d98abdbf31b97b880d0a3959f944\" data-private-watermark-src=\"v2-7de3e39c6c27812787a850e4068cbdd6\" data-tags=\"porn\"></p>\n<p data-pid=\"EQFXySi-\">总预告篇《足迹》PV 中作为须弥地区代表人物出场的少年，相比当时的形象，如今的赛诺在人物设计上已经变得更加复杂华丽，想必这也是为了匹配本次短片中公开的赛诺非同一般的身份 ——「大风纪官」（推测应该是受教令院委派管辖沙漠地区的治安长官）。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-5cf5858be753d59a16f2862b1afbd1ad_720w.jpg?source=b1748391?rss\" data-caption=\"赛诺展示中可以看到须弥沙漠地区也有围绕山体与绿洲建立的定居点\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-5cf5858be753d59a16f2862b1afbd1ad\" data-watermark-src=\"v2-8ce8b01a2330612fc73c89f017d2a638\" data-private-watermark-src=\"v2-9dd7dd97767ad0d0fb0182643b5019b0\"></p>\n<p data-pid=\"v6eh8Z-T\"><b>注：</b>「赛诺」（Cyno）一名推测来源于拉丁语前缀「Cyno-」（古希腊语词源「κύων」，含义为犬），这可能是指他的服装类似于古埃及神话中的胡狼头死神「阿努比斯」（Anubis）。事实上，根据场景前瞻中沙漠地区出现的包括方尖碑与金字塔在内的标志性建筑结构，已基本可以确认须弥沙漠地区设计时参考的文化原型很大概率为古埃及文明。</p>\n<p data-pid=\"Kv1jCuJ7\">短片中所提的赛诺官职名「大风纪官」英文版写作「Mahamatra」，该职务最早由古印度孔雀王朝皇帝阿育王（Aśoka）设立，全称为「Dhaṃma Mahāmātā」，意即「佛法督察」。他们是负责国家行政及司法等各个方面的高级官员，由国王授予弘扬佛法、监察宗教工作以及裁判道德问题的神圣职责，被认为是阿育王统治集团中的重要组成部分。</p>\n<p data-pid=\"rfaiMyWL\">带有鲜明古埃及文化元素的赛诺，其官职却出自古印度文化背景，由此推测赛诺应该是沙漠民族在须弥雨林政权中的代表人或者说沟通桥梁，因而被授予了很高的地位。</p>\n<h2>六、教令院六学派</h2>\n<p data-pid=\"CLLUyLkQ\">文章最后一部分来和大家聊聊由角色介绍引出的对于须弥教令院六大学派的讨论。</p>\n<p data-pid=\"QZ4lAntx\">细心的朋友应该注意到，编剧老腰老师介绍须弥角色时在板书上写下了一系列学派与角色的对应关系，有关这些学派，其实在早先游戏剧情中就已经提供了相关的信息（主要是与须弥学者胡塞尼相关的系列活动剧情），结合起来我们可以知晓教令院下属的六大学派分别为：<b>「生论派」、「知论派」、「明论派」、「素论派」、「因论派」</b>，以及板书中未写上的<b>「妙论派」</b>。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-fd49ae84d4a81ec02d280017c045b213_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-fd49ae84d4a81ec02d280017c045b213\" data-watermark-src=\"v2-f85596344aebf0d47e69b8ac2bb6c5b1\" data-private-watermark-src=\"v2-d2ada3e09ad8a6aef55111084de53e86\"></p>\n<p data-pid=\"fUxj77_t\">针对学派的考据我们可以由「学派」一词本身对应的翻译开始着手，可以注意到，游戏文本中「六大学派」对应的英文说法并非常见的「The Six Schools」，而是<b>「The Six Darshans」</b>。其中的专有名词<b>「Darshans」</b>是出自古代印度教的概念，意指古印度正统古典哲学（即源于婆罗门教的「正统派」，Āstika；与之对应的「异端派」称为 Nāstika，佛教与耆那教皆属此类）的六个哲学派别。六派哲学（Ṣaḍdarśanas）具体划分如下：</p>\n<ul>\n<li data-pid=\"tn7tqNwW\">弥曼差派（Mimāṃsā）</li>\n<li data-pid=\"qyQZOW5E\">吠檀多派（Védānta）</li>\n<li data-pid=\"jtSjPWLP\">数论派（Sāṃkhya）</li>\n<li data-pid=\"CLztxWjQ\">胜论派（Vaiśeṣika）</li>\n<li data-pid=\"xkgJaebz\">正理论派（Nyāya）</li>\n<li data-pid=\"QcPNVfrD\">瑜伽派（Yóga）</li>\n</ul>\n<p data-pid=\"SXhsgdFM\">这还不是教令院六大学派包含的全部文化背景。根据各学派在英文版中的写法，我们还能发现它们的另一层文化原型，即涉及琐罗亚斯德教（拜火教）善恶二元论哲学中的善神信仰：</p>\n<p><img src=\"https://pica.zhimg.com/v2-a98b36f432db361c7228ee33285edd49_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1507\" data-rawheight=\"848\" data-watermark=\"original\" data-original-src=\"v2-a98b36f432db361c7228ee33285edd49\" data-watermark-src=\"v2-ae9f8e89379aa81172c600bb4312ba20\" data-private-watermark-src=\"v2-58809b93d10eb8d3546e5eea46624515\"></p>\n<p><img src=\"https://pica.zhimg.com/v2-c2f9a097664880240c270b754506a46c_720w.jpg?source=b1748391?rss\" data-caption=\"六位「阿梅沙 · 斯彭塔」（Amesha Spenta），「不死的圣者」，六大天使。他们是主神阿胡拉 · 马兹达的从神，分别代表了部分抽象的教理\" data-size=\"normal\" data-rawwidth=\"960\" data-rawheight=\"660\" data-watermark=\"original\" data-original-src=\"v2-c2f9a097664880240c270b754506a46c\" data-watermark-src=\"v2-e28aca4f59ef585983fd320b1eb7b9fb\" data-private-watermark-src=\"v2-a1ca4da1c42c4b3306ac0ad4ef3f6de5\" data-tags=\"porn\"></p>\n<p data-pid=\"Ccijiy4Q\">例如，提纳里隶属的学派<b>「生论派」</b>英文版就写作<b>「Amurta」</b>，根据读音不难发现其对应从神中代表永恒与不朽的植物女神「阿梅雷塔特」（Ameretat）。在层岩巨渊雇佣探险队的学者海迪夫也属此学派，根据志琼的介绍，这一学派主要研究方向是矿产学与生物生态学。</p>\n<p data-pid=\"klDiXsbf\">以此类推，艾尔海森所属的<b>「知论派」</b>英文写作<b>「Haravatat」</b>，对应从神中代表完美的水之女神「豪而挝逹」（Haurvatat），根据胡塞尼的介绍，这个学派主要研究古代符文，其成员稀少并且言谈古怪。胡塞尼自己所属的<b>「素论派」（Aramati）</b>对应代表谦敬的土地女神「阿尔麦蒂」（Armaiti），该派别主要以元素和地脉为研究对象。另外在 2.7 版本活动「深泥奇谭」中胡塞尼提到了<b>「妙论派」（Kshahrewar）</b>，这个不太好直接看出原型，由其读音可知对应代表权威的金属神「克沙特拉 · 外利雅」（Khshathra Vairya），研究方向可能与冶炼锻造有关。</p>\n<p data-pid=\"o-e53lBv\">至于剩余的两派<b>「明论派」</b>与<b>「因论派」</b>，目前游戏中还未有提供相关信息，但不难推测它们应当分别对应善灵神「沃胡 · 摩那」（Vohu Manah）与真理神「阿莎 · 挝西史达」（Asha Vahishta）。</p>\n<p data-pid=\"VuyUwVaB\">到这里应该有朋友发现，拜火教善神除去主神「阿胡拉 · 马兹达」（Ahura Mazda）外仍有七位，在数量上与六大学派无法对应，这又是怎么一回事呢？这点大抵可以联系「古时孤影」活动中胡塞尼告诉旅行者的一段话「你毕竟还没有领会过至高智慧的熏陶」来进行解释。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-09bec4f72bebd29255066784f59ad468_720w.jpg?source=b1748391?rss\" data-caption=\"旅行者与胡塞尼也算老熟人了，前前后后经历过「导能圆盘」、「古时孤影」、「深泥奇谭」这一系列合作，有关教令院的不少情报都是由他告诉我们的\" data-size=\"normal\" data-rawwidth=\"1520\" data-rawheight=\"893\" data-watermark=\"original\" data-original-src=\"v2-09bec4f72bebd29255066784f59ad468\" data-watermark-src=\"v2-9250ffb2c4a1ed9afec6461ab5eba350\" data-private-watermark-src=\"v2-452473bc951119e6b5736c800bd40470\"></p>\n<p data-pid=\"NNJzzSKD\">我们可以认为所谓<b>「至高智慧」</b>对应着拜火教神话中的创造神「阿胡拉 · 马兹达」（其名含义即为「光明智慧之主」，Lord Wisdom；在须弥背景下应该就是代指草神），又有说法指出七位从神中象征圣灵的神「斯奔逹·麦纽」（Spenta Mainyu）真身乃是阿胡拉 · 马兹达的化身，因此这二神可被视为一体进行看待，这样就解开了数量无法对应的问题。</p>\n<p data-pid=\"vQoGEa81\">顺带一提，目前游戏内容中还提到了教令院系统中的三种身份：其一为代表校外实习生的<b>「帝利耶悉」（Dervish）</b>，原型为波斯语「德尔维希」（Darvīsh），意为乞讨者、托钵僧，是伊斯兰教苏非派的一种苦行修士；另外两种分别为地位不同的学者职称<b>「陀裟多」（Dastūr）</b>与<b>「诃般荼」（Hērbad）</b>，这两者原型都是琐罗亚斯德教中的祭祀职位。</p>\n<hr>\n<h2>结语</h2>\n<p data-pid=\"02yfUX0C\">经历《神奇的草元素》、《细雨与飞沙》与《明慧的序曲》这三轮预告，相信大家对即将到来的须弥已经有了一个全方位的了解（我都怀疑到正式前瞻直播时大伟哥还有什么可以说的了2333），胃口肯定也已经被吊得足足的了。</p>\n<a href=\"https://www.zhihu.com/question/544956610/answer/2589650137\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://picx.zhimg.com/v2-6b75aa2cc63cb6222190bd2ad40b4ff8_qhd.jpg?source=b1748391\" data-image-width=\"1920\" data-image-height=\"1080\" class=\"internal\">如何看待《原神》须弥前瞻短片02——细雨与飞沙 ？</a><a href=\"https://www.zhihu.com/question/542365635/answer/2566846954\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-caf66c3fecce36199e09011e4da8ec9c_qhd.jpg?source=b1748391\" data-image-width=\"1920\" data-image-height=\"1080\" class=\"internal\">如何评价《原神》游戏官方发布的须弥前瞻短片 01 《神奇的草元素》?</a><p data-pid=\"CMGk42Z5\"><b>旅行者在时隔一年后终于就要踏上前往新国度的旅途，这一年来游戏的进步各位也是有目共睹，就让我们一起期待 3.0 大版本会带来怎样巨大的惊喜吧！</b></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/ai-luo-38?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">呆罗</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/545922798/answer/2599210015?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">108 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/543692332?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">你对《原神》须弥篇的插曲设计有什么看法？</a><br><a href=\"http://www.zhihu.com/question/545924730?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价《原神》须弥前瞻短片明慧的序曲提到须弥将知识作为资源来管理?这是否说明须弥在内涵印度阶级固化?</a><br>\n","link":"http://www.zhihu.com/question/545922798/answer/2599210015?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"任意键｜初见月迅龙；爱生气的巫妖王；奶刃三部曲及其他","date":"2022-07-30 06:58:55","description":"周末愉快！「任意键」是少数派新试点的游戏周报栏目，我派编辑部的整活担当@Kiririn将在此为各位读者盘点和锐评本周值得关注的游戏新闻。如果你对本栏目的内容方向和呈现形式有不同的见解和主张，欢迎在评论 ...<a href=\"https://sspai.com/post/74890\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/74890"},{"title":"来一场义工旅行，就可以改变人生吗？","date":"2022-07-30 02:33:28","description":"走过沙滩、经过海洋、穿过人群，心里想着——「啊 ，这里就是我的家」。<a href=\"https://sspai.com/post/74875\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/74875"},{"title":"派周报 | 本周会员内容提要；跑题：裁员语文","date":"2022-07-29 10:11:41","description":"美国科技公司在面临裁员时，又是怎样措辞和解释的呢？<p>[......]</p>\n<a href=\"https://sspai.com/prime/story/pi-weekly-002\" target=\"_blank\">查看全文</a><p>本文为会员文章，出自<a href=\"https://sspai.com/prime/precog/single\" target=\"_blank\">《单篇文章》</a>，订阅后可阅读全文。</p>\n","link":"https://sspai.com/prime/story/pi-weekly-002"},{"title":"创作者请回答｜伞阿花伞大王：那些辞职写小说的人，后来都怎么样了？","date":"2022-07-29 06:52:05","description":"\n<p data-pid=\"otE9Ec6m\">好久不见友友们！</p>\n<p data-pid=\"GTGxdmaV\">局长猜，很多爱看故事的知友们，一定都曾有一个文学梦。毕竟这年头，做一个打工人又苦又累，谁不想做自己喜欢的事情呢？如果恰好这份喜爱能给自己带来收入，那就更好不过了。</p>\n<p data-pid=\"B9ymeB1R\">盛夏来临，局长请到 <a class=\"member_mention\" href=\"https://www.zhihu.com/people/ee08c65503d9d494ba0a988b7325ab75\" data-hash=\"ee08c65503d9d494ba0a988b7325ab75\" data-hovercard=\"p$b$ee08c65503d9d494ba0a988b7325ab75\">@伞阿花伞大王</a>来聊一聊，那些辞职写小说的人，后来都怎么样了？</p>\n<figure data-size=\"small\"><img src=\"https://pic1.zhimg.com/v2-6d4db79d1804ae7abea18e5a9456e368_b.jpg\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"640\" data-rawheight=\"640\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic1.zhimg.com/v2-6d4db79d1804ae7abea18e5a9456e368_r.jpg\"></figure><p data-pid=\"MGXvDWRz\">95 年出生在吉林的伞阿花伞大王（以下简称伞大王，关于这个笔名，文末有揭密哦～），大学是在延边大学攻读的朝鲜语系，毕业后去了一家游戏公司当翻译。</p>\n<p data-pid=\"jn8o8_Ro\">这看起来是一个顺理成章的决定，然而工作一年后，她选择了离职，来到知乎从事起了小说创作。</p>\n<p data-pid=\"0PTKMFMM\">这在当下的年轻人群体中不算新鲜，毕竟灵活就业、整顿职场，炒掉老板鱿鱼，追逐文学理想，惊艳全世界，想想就很激动。</p>\n<p data-pid=\"CaNxihU5\"><b>不过，现实也很骨感。</b></p>\n<p data-pid=\"tvee5MQN\">写的小说，并不是所有读者都买账，尤其遇到较真的人，还会直接批评，倘若作者是个玻璃心，说不定就直接封笔了。</p>\n<p data-pid=\"3LA_pTiR\">尤其是网文作者，被催更更是家常便饭，但是没有灵感怎么办，难道要去写水文应付读者吗？</p>\n<p data-pid=\"KjTBtLVq\"><b>这些问题，伞大王都遇到了，而她选择的是「躺平」与「耗着」。</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-9de00f999fe95f457f4618e13c38bd8d_b.jpg\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"273\" class=\"origin_image zh-lightbox-thumb\" width=\"1000\" data-original=\"https://pic2.zhimg.com/v2-9de00f999fe95f457f4618e13c38bd8d_r.jpg\"><figcaption>伞阿花伞大王的知乎主页</figcaption></figure><h2>表面躺平，实则坚持自我</h2>\n<p data-pid=\"GsTkzoiJ\">和很多文字创作者一样，伞大王从小就比较偏科，语文、历史这些课程都在自己的天赋树上被点亮了，而数学之类的理工类科目则是完全不擅长。</p>\n<p data-pid=\"Vm9Ii6wN\"><b>作为天生的文科选手，伞大王人生的第一篇作品应该是在小学六年级写成的，当时构思了一个关于一群螃蟹的故事。</b></p>\n<p data-pid=\"8gv8r4fG\">大意是讲一群正被运往饭店的螃蟹，一路上它们怨声载道、叫苦连天。</p>\n<p data-pid=\"CUoRWz8T\">这时候，螃蟹里的主角螃蟹站出来发声说：「难道我们就要这样接受自己的命运吗？」</p>\n<p data-pid=\"Ld3Sw733\">其他螃蟹就反问：「还能怎么办呢？我们都被关在笼子里。」</p>\n<p data-pid=\"WKCqkytb\">主角螃蟹说：「我们是螃蟹呀，我们有蟹钳，钳断笼子，团结起来就能跑。」</p>\n<p data-pid=\"vwQ1Dfl3\">然后这些螃蟹就跑到了大街上，非常显眼，大街上的小猫小狗就和螃蟹们说：「你们不能这样横着走路，太显眼了，很快就会被抓走的。」</p>\n<p data-pid=\"8YIFgd9h\">但是主角螃蟹却说：「不对呀，我们是螃蟹，螃蟹，天生就得横着走。」</p>\n<p data-pid=\"p1OoOkwY\">然后他们就横着离开了。</p>\n<p data-pid=\"0TchJCJ8\">这篇小说虽然没有什么太复杂的细节，但是老师看后很是欣赏，也给了伞大王不少鼓励，或许就是从这一刻开始，写作的种子算是埋下了。</p>\n<p data-pid=\"4K9QxrBB\"><b>而通过这篇习作也可以看出伞大王的性格——向往自由、坚持自我。</b></p>\n<p data-pid=\"VKvcvNM3\">可即便如此，成为专职作者后，伞大王居然也差点被读者怼到怀疑人生。</p>\n<p data-pid=\"OLkxOotv\">伞大王说：「我特别玻璃心，我是真的经不起批评，我特别怕读者骂我。」</p>\n<p data-pid=\"EEtI1uAm\">最近，伞大王就接到一位读者的私信，说最近的作品不是很让人满意，甚至被直接评价为「有失水准」。</p>\n<p data-pid=\"sYwRejoH\">伞大王起初也慌了，还去问了朋友，以及圈内其他作者，问了一圈后，她自己却想明白了，「作品本来就该百花齐放，我的作品不是有失水准，只是不符合个别读者的预期而已，或者我笔下的人物不够完美，可能有道德缺陷，但不代表就要剥夺他成为主人公的权利。」</p>\n<p data-pid=\"G7kj6fDY\">所以，伞大王在面对质疑的时候，都是虚心接受读者建议，不惊不辱，然后专心躺平就完了。</p>\n<p data-pid=\"kkMlAlul\">毕竟，下次自己还会该怎么写还怎么写。「你在教我做事咩？」</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-ca8a7f88fc404308542a09e984c30212_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"300\" class=\"origin_image zh-lightbox-thumb\" width=\"500\" data-original=\"https://pic3.zhimg.com/v2-ca8a7f88fc404308542a09e984c30212_r.jpg\"></figure><h2>表面耗着，实则拒绝糊弄</h2>\n<p data-pid=\"4fOpJf8o\">除了被读者质疑，写文的人更怕的事莫过于文思枯竭，尤其对于写网络文学的，一旦文章更新不及时，读者肯定是要过来「提刀催更」的。</p>\n<p data-pid=\"rOmwbd1e\">不过伞大王的读者倒是很少催更，因为大家都比较了解伞大王的是走灵感创作的路线，而且就算催，也是没用的。</p>\n<p data-pid=\"u0oQX2Hu\">「我等一个灵感需要等很久，但是如果这个灵感出现了的话，我构思起来，其实是很快的，而且只要是灵感来了，我在哪儿都能写作。」</p>\n<p data-pid=\"iq5jyFDM\">伞大王所说的灵感，有时候可以靠做梦，据她讲述，有一天半夜两三点钟自己做了一个梦，半夜醒来，天还没亮，她觉得自己做的这个梦可真牛，如果是自己清醒的状态下，肯定想不出来，于是爬起来把这个梦记录了下来，在今后的创作中作为素材。</p>\n<p data-pid=\"JK6qS4K3\">伞大王对自己的日常创作没有明确要求，不像其他网文码字狂魔，每天一定要完成多少字，她甚至没有大纲，而是纯靠灵光乍现，而且灵感不够的主要原因不是在自己，而是在于笔下的人物本身。</p>\n<p data-pid=\"c0UflxnM\">「我觉得对于我个人来说，可能因为我的性格本身就是这种比较慢吞吞，所以我如果灵感枯竭，我的应对方法就是耗着。我需要故事里的人来告诉我，他想干什么。我一直觉得，我写出来的故事，其实不是我写的，而是角色借着我写出来的。有的时候，他可能就不想告诉你这个时候他想干嘛，那我能怎么办呢？」</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-ce36948d9aaed1381677f94429125ff6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"300\" class=\"content_image\" width=\"300\"></figure><p data-pid=\"VnosXCG5\">这是高手啊！此番观点听起来过于玄妙，令人无法反驳。</p>\n<p data-pid=\"hVS165dh\">伞大王会这么想，也是源于读者们对她给予了包容与耐心，这反而让她觉得不能糊弄读者。</p>\n<p data-pid=\"RP5F5HYz\">「我经常几个月出一篇稿子，但是催我的人很少。所以我就觉得我也应该拿出同样的耐心去面对我的作品。如果真的有一天我不再去听这些角色的声音了，而是我按照市场的标准去写去写，三天一篇，五天一篇，那样去写的话。我觉得渐渐的我也会消磨读者对我的信任，那个时候就完全变成供求关系了。我的作品对他们来说可能一下就变成了一种商品。然后对他们而言，我可能一下子就变成了一个急着赚他们钱的人。 如果真是那样的话，我觉得也挺得不偿失的。」</p>\n<h2>苏童是真爱，马伯庸是典范</h2>\n<p data-pid=\"6Ncwd3rf\">无论是躺平还是耗着，可以看出伞大王这位作者足够有个性。</p>\n<p data-pid=\"nvWVIvES\">而更令人意外的还在后面。</p>\n<p data-pid=\"_AyLJXXq\">作为一名专写言情作品的网络作家，伞大王一般在「如何以长公主权倾朝野为开头，写一篇故事？」「如何以他说要娶我，予我凤冠霞帔，不曾想到头来却食了言为开头写一篇不是为虐而虐的虐文？」</p>\n<p data-pid=\"pKrn7WmJ\">这类知乎问题下非常活跃，许多读者看她的文章也会贴上小甜文、小虐文之类的标签。</p>\n<p data-pid=\"ewaVNlT1\">但是伞大王自己的日常阅读涉猎，其实并没有完全陷在网络文学的世界里，偶尔她还会在知乎发表一些读后感，带领大家一起阅读名家名作。</p>\n<p data-pid=\"_4o9Xfrf\">当问起伞大王除了自己日常写作之外，还喜欢看哪些作家的书，伞大王回答的却是苏童、余华、梁实秋这些主流传统的作家。</p>\n<p data-pid=\"kjOlotEq\">她不是没想过要向严肃文学的方向发展，但是自觉人生阅历还比较浅薄，写不出太厚重的东西。而且她也不赞同，成为经典的文学就一定是厚重的、佶屈聱牙的，比如马伯庸的作品，就既能兼顾严肃，同时也不失趣味，这也是她非常喜欢的作家。</p>\n<p data-pid=\"RDaoOCL0\"><b>但是她不喜欢的，可就惨喽。往往会成为她笔下的反派人物！</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-0920d25462c7f6fd8e2c90a7e7258ac9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"699\" data-rawheight=\"289\" class=\"origin_image zh-lightbox-thumb\" width=\"699\" data-original=\"https://pic2.zhimg.com/v2-0920d25462c7f6fd8e2c90a7e7258ac9_r.jpg\"></figure><p data-pid=\"Go4Lg95J\">伞大王一直强调，无论做什么、写什么，都要基于实践。这就像很多人说的写作要遵循一定逻辑，这个逻辑就是真实的生活经验。</p>\n<p data-pid=\"1zLEi-2z\">有一次她回家，看到妈妈正准备蒸螃蟹，那些螃蟹虽然有钳子，但都是被绳子绑起来的，钳子丝毫没有用武之地，根本不像自己小学时写的小说那样机智威武。</p>\n<p data-pid=\"WvxgTbXw\">伞大王这才明白，无论你要输出什么观点，必须自己先去经历一番才立得住脚，「不是你看了什么脱口秀大会、奇葩说，觉得某个人说得真好，你就把这个当成自己的观点去传播，其实未必适合你自己。」</p>\n<p data-pid=\"927UZfXj\">同样的，对于爱情也是如此。伞大王的小说，虽然塑造了各类爱恨纠葛的故事，但其实很少说教，当读者去问自己有关爱情方面的问题时，她也不会直接拿自己的经验去做建议。</p>\n<p data-pid=\"lk6Ijm0F\">她打了个比方，「作为一个女性，如果她被爱情欺骗过，她肯定会告诉你恋爱要谨慎。但如果一个人她因为胆怯，最后错过了真爱，那她肯定告诉你恋爱就是要勇往直前。这两种爱情观哪一个是正确的呢？其实都没有问题。」</p>\n<p data-pid=\"L36boGwG\">伞大王不相信什么所谓的爱情观。因为没有统一的标准，每个人的爱情观都是不同的，就像每个人的写作风格、写作方式也都是不同的，但重要的是在于，你选择一段恋爱，一定是因为你在某个阶段的状态还不错，你有勇气、有能力去开展一段恋爱，你会因为这段恋爱变得更加充盈和自信。</p>\n<p data-pid=\"clvleEuP\">所以，她时常对有情感困惑的读者这样建议：爱人，更当爱己。</p>\n<h2><i>PS：伞大王笔名大揭秘</i></h2>\n<figure data-size=\"small\"><img src=\"https://pic3.zhimg.com/v2-55af69e10c45a5397efb4d48862b7162_b.jpg\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"863\" data-rawheight=\"567\" class=\"origin_image zh-lightbox-thumb\" width=\"863\" data-original=\"https://pic3.zhimg.com/v2-55af69e10c45a5397efb4d48862b7162_r.jpg\"></figure><p data-pid=\"9wnsHVUS\"><i>读过《见鹿》这篇作品的读者一定对「丑又萌饿但肥」这位作者不会陌生，其实「丑又萌饿但肥」就是「伞阿花伞大王」。</i></p>\n<p data-pid=\"Tonz5Q3U\"><i>当年，伞大王注册知乎的时候，同步的是自己的微信昵称，于是最早使用的笔名是「丑又萌饿但肥」，但是久而久之，一些读者关注到之后称呼作者为阿丑、阿肥，伞大王觉得不太好听，于是就重新起了现在的笔名。</i></p>\n<p data-pid=\"Af3Xx9jL\"><i>她的理想生活，一直是觉得人的脑袋上应该戴着一朵花，然后到深山老林里当一个野人。但是叫山大王似乎也不太适合一个女孩子，干脆用了谐音梗，于是就有了今天的伞阿花伞大王～</i></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/gu-shi-dang-an-ju-71?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">故事档案局</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/547601766?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"CTP、CTC 和 CTB 三种电池底盘技术方案区别是什么？哪个更有发展前景？","date":"2022-07-29 03:40:44","description":"\n<p data-pid=\"09lbhcAf\">CTP/CTC（CTB）,实际就是动力电池的集成度走高的一种趋势。我们现在动力电池装车最主流的方式还是<b>Cell to Module</b>：单体电芯组成模组，模组组成箱体，箱体组装成系统，然后系统装车。<br></p>\n<p data-pid=\"jeGBM7RX\">如下图所示，电芯组成模组，多个模组一起集成PACK，PACK组成系统，装载在汽车底盘上。</p>\n<p><img src=\"https://picx.zhimg.com/v2-9cfa095d4adb7fe7685d11c349f016ed_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"354\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"B6tG66Kx\">这种模式沿用了很多年，技术成熟，工艺可靠。电芯作为最里层的动力源，被一层又一层的外壳保护得很好。</p>\n<p data-pid=\"h85hOBLP\">但其中有个弊病就是电芯到模组到箱体到系统再到装车，工序多、外壳占用空间多，那么能否省掉其中的工序，就能降低加工成本且提高空间利用率，在企业盈利提高的同时还能有效提高车辆续航，岂不是两全其美的事情。</p>\n<p data-pid=\"wiks4oNM\"> 所以，<b>CTM→CTP→CTC（CTB）</b>,就这么一步步走下来。</p>\n<p data-pid=\"UmRcwwJD\">电芯作为能源中心，被层层包裹（模组/箱体），这种传统物理架构的空间利用率偏低，设计良好的方形电芯的系统<a href=\"https://www.zhihu.com/search?q=%E6%88%90%E7%BB%84%E7%8E%87&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2524638080%7D\" class=\"internal\">成组率</a>大概可以达到65-70%，而圆柱形电芯的系统成组率大概只有55-60%。<br>CTM现阶段依旧是最成熟的电池包架构，市面上大部分新出的电动车型依旧采用的这种架构。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-144bac8328742318c55d6224a0f65549_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"648\" data-rawheight=\"325\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"dJC0lcSs\">上汽大众ID.4X的电池包，由8个模组（多个电芯组成一个模组）构成，模组之间用高压铜排连接，有着隔热、阻燃设计。</p>\n<h3>CTP(Cell to Pack)</h3>\n<p data-pid=\"n3PjZz0g\">无模组模式，直接取消了传统模组，多个电芯直接组成PACK，如比亚迪的<a href=\"https://www.zhihu.com/search?q=%E5%88%80%E7%89%87%E7%94%B5%E6%B1%A0&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2524638080%7D\" class=\"internal\">刀片电池</a>等，PACK装载在汽车底盘上。</p>\n<p data-pid=\"REdaJogQ\">比亚迪将正极片、负极片，先模切裁断成单片，在隔膜中按照设定的层数叠成极芯，并通过热压将极片与隔膜固定。<a href=\"https://www.zhihu.com/search?q=%E6%9E%81%E7%89%87&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2524638080%7D\" class=\"internal\">极片</a>长度约1000mm，条状的正负极片，需要有序地插入折叠隔膜里，这对工艺要求是十分苛刻的——极片需要平整地插入，同时要保证插入的深度，需要刚刚好。<br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-16355312059afa70917365fb98846184_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"286\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"heegzxjn\">比亚迪的CTP无模组方案，电芯实际充当了模组，而取消了模组的保护壳体，由刀片电池本身来充当电池的梁，这样大幅提高了空间利用率，也提高了系统能量密度（单位体积装更多的电芯。）</p>\n<p data-pid=\"7vYAmVfL\">同样的，宁德时代也推出了CTP模式。</p>\n<p data-pid=\"oL6FTzKH\">2022年3月，<a href=\"https://www.zhihu.com/search?q=%E5%AE%81%E5%BE%B7%E6%97%B6%E4%BB%A3&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2524638080%7D\" class=\"internal\">宁德时代</a>推出了CTP3.0（麒麟电池）。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-8db56bb6339ab30f57c419ab3ec2337a_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"312\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"rb5zJYsa\">根据资料，采用 CTP 3.0 技术的 LFP 电池能量密度可达 160Wh/kg，NCM 电池则可达 250Wh/kg；若比较最新的 4680 系统，宁德时代称 CTP 3.0 技术可以在相同的条件下，提升 13%的能量密度。</p>\n<p data-pid=\"B5uqcekJ\">由此可见，CTP是从架构更改中着手，有效提高电池系统能量密度，让同样重量、体积的电池系统可以提供更高的续航，让更多的电动乘用汽车可以达到1000公里续航的标准。<br></p>\n<p data-pid=\"vvwTuxhn\">5月份的新闻，宁德时代的CTP技术也开始推向了国外的商用车型。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-41e1c897c5aa2961f1149f807d4c4fd6_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"795\" data-rawheight=\"793\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"02pV_1Oi\">虽然无模组方式有很多优点，但这样的无模组也意味着取消了模组的保护（如去掉了边梁等），外来的冲击原本是由模组来承担，现在则需要电芯本身来承受冲击力，对于电芯的安全保障是下降的。现在厂家的方法是在电芯材质和构造上提升强度，比如铝型材直接挤压成型等。另外电池集成度越高，也就意味着后续的维护、保养、更换需要的成本就越高。</p>\n<h3>\n<br><b>CTC(Cell to chassis)</b>\n</h3>\n<p data-pid=\"yiwXaF-Y\"><br>直接电芯集成(一体化）到汽车的底盘上。以特斯拉为例，CTC的电芯成组，上面就是地板（电芯外壳）和座椅横梁，和底盘集成一体，然后再装配在车身上，这样可以利用电芯本身的机械构造来承担一部分框架的作用，能有效减少电池包的体积，增加空间利用率。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-3dc6a19bdda61bf8b20de8d6aef6f844_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"643\" data-rawheight=\"330\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"NWtogwgH\">CTC技术除了能间接降低车身重量，提高电池包空间利用率这些好处外。关键又能和利益扯上关系，因为一体化集成，减少了大量的焊接（连接）工序，从而提高了生产效率，减少了中间的机器人，这就能降低成本。</p>\n<p data-pid=\"hFpH7KPd\">据特斯拉的相关数据，CTC+一体化压铸，可节省370个零件，车重下降10%，电池结构体积-10%。</p>\n<p data-pid=\"2szEo1KK\">不过本来圆柱体的电芯在成组的空间利用率上就比不过方形电芯（圆柱叠加圆柱，之间不可避免有多处空隙），设计好的方形电芯成组的空间利用率可以达到80%以上，而<a href=\"https://www.zhihu.com/search?q=4680&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2524638080%7D\" class=\"internal\">4680</a>（圆柱体）+CTC的成组空间利用率大概只有70%以上。</p>\n<p data-pid=\"9IApUD5D\">但集成度高的CTC也有弊端，类比特斯拉，电池和底盘集成一起，一旦电池有问题了，就是要动底盘了，对动力电池售后的维护/维修就不是很友好了。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-0ce063b38ec395127bc79e2de2ca279f_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"480\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"792QH3hl\">因为集成度高，电池组的上盖又做了车身地板，一旦电池组需要维修，预计价格会比现在的更加昂贵。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-77e9b2b404721451168d0877fdc2793d_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"382\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<h3>CTB(Cell to Body)</h3>\n<p data-pid=\"TQDMMLDA\">和CTC的电芯集成到底盘上类似，CTB是把电芯集成到车身上，实际两者的意思大致相同。<br>比亚迪的CTB技术，车身地板和电池上盖集成，下方就是电芯。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-af7f01b6181f04b5bd0b9cae8814ddbd_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"360\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"jElBEf70\">至于比亚迪宣传的，CTB技术能够提高整体能量密度，提高舒适性，操控性，还能提高安全性：刀片电池能作为车身架构的一部分，并承受车辆碰撞产生的部分伤害，有效避免人员的伤害。但这样的架构改变对于电池的安全是否有负面影响，个人觉得还是需要后续市场的实际反馈。</p>\n<p data-pid=\"T3C7hdOd\">运用CTB技术的比亚迪车型是今年发售的海豹系列。</p>\n<p><img src=\"https://picx.zhimg.com/v2-0cd740f615ec5413937c716ed7096846_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"545\" data-rawheight=\"371\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-6cc044e23f4d29ce2d112102f7a92ff3_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"617\" data-rawheight=\"367\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"us-w6Sh7\">在汽车上，走高度集成的路线不止是电池系统，也见于<a href=\"https://www.zhihu.com/search?q=%E6%96%B0%E8%83%BD%E6%BA%90&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2524638080%7D\" class=\"internal\">新能源</a>车的各个方面，比如新能源车的电子电气架构（EEA）的集成。</p>\n<p><img src=\"https://picx.zhimg.com/v2-7be07248aff77004812c053c5b6d7da0_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"509\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"WUJbx-a_\">随着智能自动驾驶和智能座舱的发展，传统的基于ECU的分布式电子电气架构势必要向域集中的电子电气架构发展。汽车芯片通过整合，比如将从多个ECU收集的数据在同一个<a href=\"https://www.zhihu.com/search?q=%E5%9F%9F%E6%8E%A7%E5%88%B6%E5%99%A8&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2524638080%7D\" class=\"internal\">域控制器</a>中统一处理，比如将上百个ECU浓缩到数个DCU或MCU里面。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-3ee35453ca7bc2275474a566fa441bb2_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"263\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"yab0O5qr\">EEA的发展，从<a href=\"https://www.zhihu.com/search?q=%E5%88%86%E5%B8%83%E5%BC%8F&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2260801193%7D\" class=\"internal\">分布式</a>到域集中到域融合，到车载电脑和区域导向架构，到最终的车辆云计算的电子电气架构，实际也是走着高度集成化的道路。</p>\n<p data-pid=\"XmEbLTLB\">所以说，哪种更有发展前景，肯定是集成度越高（保障安全和实用效果的前提下）的CTC/CTB代表着未来。但这也并非意味着现阶段的CTC/CTB是成熟的技术，毕竟车企的宣传肯定是往好的说的。具体怎么样，是否在保障安全的背景下提高了集成度，还是得看市场上真实的数据反馈了。<br><br><br>（图片来源网络，侵删！）<br><br>参考资料：<br>1、<a href=\"http://link.zhihu.com/?target=https%3A//baijiahao.baidu.com/s%3Fid%3D1728815096196215614%26wfr%3Dspider%26for%3Dpc\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">baijiahao.baidu.com/s?</span><span class=\"invisible\">id=1728815096196215614&amp;wfr=spider&amp;for=pc</span><span class=\"ellipsis\"></span></a><br>2、<a href=\"http://link.zhihu.com/?target=https%3A//baijiahao.baidu.com/s%3Fid%3D1734248045242012773%26wfr%3Dspider%26for%3Dpc\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">baijiahao.baidu.com/s?</span><span class=\"invisible\">id=1734248045242012773&amp;wfr=spider&amp;for=pc</span><span class=\"ellipsis\"></span></a></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/will-liu-16?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Will.liu</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/544762247/answer/2598374115?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">4 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/544334399?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">CTP、CTB、CTC是电池技术革新，还是一种无奈？</a><br><a href=\"http://www.zhihu.com/question/505068710?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价宁德时代 CTC 一体化锂电池技术？</a><br>\n","link":"http://www.zhihu.com/question/544762247/answer/2598374115?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"我有特别的 DNS 配置和使用技巧","date":"2022-07-28 15:31:00","description":"\n<p>众所周知，DNS 的作用与电话簿类似，将人类可读的域名映射到机器可读 IP 地址、使人更方便地访问互联网。DNS 是非常重要的互联网基础设施，对于改善上网冲浪的体验中的重要程度不容小觑。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/96381/31/31172/23930/62e2ab5bE554d388b/37027f4a03351b9e.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/i-have-my-unique-dns-setup/\">https://blog.skk.moe/post/i-have-my-unique-dns-setup/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/i-have-my-unique-dns-setup/"},{"title":"为什么有些人把游戏当信仰？","date":"2022-07-28 08:41:17","description":"\n<p data-pid=\"fhd3jSsx\">首先简单做个自我介绍，我是波士顿大学宗教专业学士学位，现就读与纽约大学宗教研究硕士学位的学者。可以叫我流影或者AdolShadow。</p>\n<p data-pid=\"v_TzqnoS\">很喜欢笔者的这个问题。大家其实都会觉得，虚拟这种东西如何能被称之为信仰？或者说，游戏如何自成宗教体系？我的大学毕业荣誉论文中就讨论了游戏与宗教世界的关联。以及他们有何现实生活有什么样的丝缕联系。</p>\n<p data-pid=\"wyblIl7W\">简单来说，我们不能主观或者简单的把<b>游戏和宗教或者信仰</b>直接放在一起。或者甚至说把<b>信仰和宗教</b>放在一起都是不准确的。宗教社会学家William Paden和Peter Berger说，人创造了社会，社会创造了我们所在的世界。这个世界可以是基于科学的，也可以是基于任何概念的。重点是他们都是人为创造的。所以说，社会才是核心，而社会之上的创造物，本身都是可以改变，价值也不会是永恒不变的。</p>\n<p data-pid=\"WOLBx_Hh\">信仰在我个人看来则不同。我认为信仰是基于个人的产物。所有人的信仰皆可不同。同是基督教徒的我和我父母，信基督教的方式可能完全不一样。我们是个体，虽然在教堂这样的体制下我们需要遵守规矩，但是在私下，我的信仰和表现方式可以和别人大相径庭。这是我自己的看法。社会学家则会通常认为这也是社会产物。</p>\n<p data-pid=\"aOyIo93x\">前两天我刚在知乎产出了我的第一篇文章，讲的就是我毕业论文的一些历程。这里摘抄一部分，可以更好的解释笔者的这个问题。原文link：<b><a href=\"https://zhuanlan.zhihu.com/p/546803019\" class=\"internal\">AdolShadow：第一次在知乎发文，聊聊我的大学荣誉结业论文：论虚拟世界与宗教世界构造的相似处</a></b></p>\n<hr>\n<p data-pid=\"h90bJLxK\">简单说说我在文章里的一些概括。想看我的完整毕业论文可以移步原文。</p>\n<p data-pid=\"WTx2vvdY\">各位如果是游戏玩家，不妨仔细想想。为什么随着游戏种类的变多，可玩性变得更强，“宗教”却成为了中西中不可或缺的一部分。就不用说早期的<u>刺客信条兄弟会</u>或者<u>瘟疫传说无罪</u>这样的典型基督教占主导地位的游戏。<u>只狼</u>这样的佛教占主导地位的游戏。想想看，连我现在沉迷的<u>原神</u>也是采纳了非常多的神秘学元素。另一款我最近玩的很多的<u>怪物猎人崛起</u>也是将日本传统的鬼神文化开发到了极致。那么，如果说游戏被创立的初衷是一个科技的产物。而科技本身与宗教又有着一定的对立性，毕竟科技源自科学，是准确和新时代的代名词。<b>那现在这样宗教题材泛滥的游戏岂不是有点本末倒置的意思</b>？</p>\n<p data-pid=\"XsB9qN8y\">其实这也不然，再写结业论文之前我也尝试过许多其它题材关于宗教与游戏的论文。写多了便发现上面这个问题的切入点有问题。我们总觉得这好像是对立的，所以我们的文献或者文案通常都会找到游戏暴力，游戏成瘾这些负面的资讯上。于是<u>冲突</u>变成了一个标志。但假设说我们先就认定游戏和宗教在本质上有联系，我们便能发现一片新大陆，也就是我论文背靠的核心学术区 - <b>虚拟宗教 Digital Religion</b>。</p>\n<p data-pid=\"hvtrveT2\">简单定义一下虚拟宗教。我在大四下学期学了一节关于虚拟宗教的课程Religion in Digital Age。这节课的导师给了我们虚拟宗教最基本的定义。虚拟宗教就是研究非传统“教会”体制化的宗教研究，并且其根源需要基于现代网络环境。这里的教会和体制就是基本的线下集会和集会场所，并不特指某一宗教。因为传统宗教几乎都需要实体化的集会人数和场所作为支持。于是乎这个虚拟宗教就能被细分和拆开两部分讨论。因为其中的一部分必然会是传统宗教移步现代网络之后的发展 - Religions Online。毕竟就算有神仙预测，也很难说古代的宗教能了解如今的我们居然会有网络这一高超手段。所以必然的新型的教会模式和网络集会所便有了新的意义。比如没有身体接触的集会意义如何？圣餐如何颁布？如何募捐等等。</p>\n<p data-pid=\"lA8EPR51\">另外一个部分就比较特殊。它更在意的是哪些源于网络的新兴宗教 - Online Religions。比如Googlism，也就是人们将Google称之为神，而创造了这个神的我们也非常的具有神性。前些年还有Church of AI。创建者Anthony Levandowski曾经还是Google的员工，不过后来他因为一些法律问题这个church也就不了了之了。上述这样的新兴宗教还有非常非常多。根本数不清。研究这些为什么会出现，如何被称之为宗教，怎么引领一些宗教变革的潮流，以及他们和传统宗教的区别也是很有意思的点。</p>\n<p data-pid=\"YyB9WA7R\">但你会发现，我说的游戏宗教好像上述两点都不是特别符合。那这就要说说Digital Religion的神奇之处了。因为我们研究的是非体制化宗教，那意思就是说，不是说只有网络新兴宗教这样的非体制化宗教才符合。研究<b>重新被塑造和定义的宗教</b>其实更有意思。这是什么意思呢？简单来说，假设说我在教堂里会和神父讨论死后进入天堂的事。那如果是疫情我去不了教堂，那我就网络会面神父问他这个问题。好，这里因为接触神父的媒介已经改变，所以已经属于虚拟宗教的领域。继续往前深入，我在Facebook上创立了一个话题，名叫#死后能否进入天堂的测试。那这个话题的性质又变了。因为虽然我还是可以以一个基督徒的身份询问问题，我也可以把所有的回答全部筛选为符合天主教的答案。但是因为这不在是教堂的网络软件，这涉及到了Facebook在宗教立场上的问题。那有意思的点就出现了。<b>这里，Facebook是不是在代替我们完成日常生活中“社会”的角色呢</b>？那如果说Facebook是一个虚拟社会就不为过了吧？这样来说，我们也确实可以从宗教方面来了解虚拟社会这个概念。</p>\n<p data-pid=\"E2cqO2-_\">那说到游戏，如果能够以社会Community这个概念讨论，就变得清晰很多了。重新说回Peter Berger和William Paden两位宗教社会学家。前面说了，人创造了社会，而社会创造了我们所生活的世界。在我们生活的世界里，它给我们带来了很多便利。因为社会是一个整体，所以社会创造了许多便利于这个整体的文化，比如社会角色，法律，语言，政治等等。这也间接说明了为什么每一个社会所创造的世界都不一样，每一个国家某种程度上就是一个封闭的整体。虽然整个现实世界需要沟通，但不可否认的是只有一个社会也是可以生存的。</p>\n<p data-pid=\"5NHAxYSO\">那这个概念放到宗教里也是成立的。还是Berger和Paden，他们就讲述了同样的手法，宗教社会在已知去宗教化社会下也可以创建新的世界。只要有一个整体，就可以创造世界。比如说我们生活中是学生，是教师，是警察。这不影响我们信教，去教堂，做礼拜，奉献，做义工。这是在一个现实中发生的两个世界体系和两种文化。它们冲突，却又不冲突。</p>\n<p data-pid=\"vI5kbs9j\">那游戏呢，是不是也有类似的世界创造？答案肯定是有的，而且几乎和宗教的世界创造体系一模一样。只不过这次平台变成了虚拟世界，宗教是虚拟宗教，法则也是全新不受限于物理的法则。所以我们觉得很假，不一样，却还是能产生很多共鸣。因为这个本质上也是一个整体社会创造的世界。我们只是发觉他不处于和我们所处现实一样的现实罢了。<b>你能说如果我的意识就出生在虚拟，我能辨认那是虚拟吗？不，我肯定会觉得那就是属于我的现实。</b></p>\n<p data-pid=\"dFFOfL9v\">说了这么多，其实还没有说到我文章的一点皮毛。但确实想理解游戏与宗教，这离不开虚拟宗教这个概念。想真的了解虚拟宗教，也不是那么的容易。因为现在也没有非常合适的定义和解释。</p>\n<hr>\n<p data-pid=\"z68YYxuV\"><b>不过我们最终需要回到笔者的问题，“为什么有些人把游戏当信仰”？</b></p>\n<p data-pid=\"YXU4bNcu\">首先<b>第一点</b>，咱们直接用大白话说。如果我现在玩的游戏，就是我正在接受的信仰。那这个问题不就是自问自答么。我在我的论文中提到这样的一个例子，Gregory Grieve，一位现代的虚拟宗教教授写过这样的一篇文章：“Meditation on the Go: Buddhist Smartphone Apps as Video Game Play”。Grieve在文章中讲述了一个手机游戏软件“Buddify”。这是一个基于佛教的Meditation游戏软件。在软件中，你可以跟着软件中的教程去完成自己网络形象从普通人到虔诚教徒的蜕变。通过完成各种小任务和阅读，你可以变得更像一位佛教徒。有意思的是，虽然你可以自己设计自己的人物和把握游戏进程，你自己本身却不需要是一位佛教徒。Grieve是在飞机上看到有人玩这款小游戏的。当快下飞机时，Grieve问这个玩家，对方却说，“哦，我不是一位佛教徒，我只是不可知论，并相信有灵的存在罢了”。</p>\n<p data-pid=\"OshMdYJD\">这其实引起了更多的问题和思考。那如果说一个佛教徒玩这款手机游戏，那好像说得过去。因为那就是他本人的一个信仰。<b>不过不是佛教徒，为什么还要玩一款佛教游戏呢？</b>这里就需要引出另外的一个重要的点：<b>我们玩游戏的人格，真的是我们现实的人格吗？</b></p>\n<p data-pid=\"S42H-mvi\">这<b>第二点</b>，我们需要仔细考虑人格问题。因为我们目前的科技也并没有达到能把整个精神都送到虚拟的一个技术。那送过去的人格，是什么呢？MMORPG中，你可以自己选择你的角色。你可以现实生活中是男，然后游戏中是女。你可以选择肤色，可以选择职业，还可以在某些游戏中选阵营。Rubia Gregory对MMOPRG的说法是：“social and role-playing opportunities”。翻译过来就是“这是<u>新的</u>社会人格的重塑机会”。<b>这间接说明了那端的我们，那屏幕这端的我们，可能并没有什么联系</b>。也就是说，如果我说我们在那个游戏中选择了一个信仰，那也并不真的代表我们就必须在这个世界里有相同的信仰啊。假设说我在玩WOW，魔兽世界。我选择了联盟阵营，而我的女朋友比如说，选择了部落。那我们在游戏中可能会是对立的。我们可能会开战。但这代表说我们现实生活中就不能腻歪，不能在一起了吗？这显然说不通。</p>\n<p data-pid=\"zzDOwgu-\">最后来说说笔者问题中的“<b>为什么</b>”。可能大家在回答这个问题的时候，先想到的是如何提出例子支持游戏里的内容当做信仰，也可以反对游戏里的内容当做信仰。不过其实这个问题里的另一个关键是这个问句的为什么。当我们这样去问问题或者思考的时候，我们其实也是在说：“是有这样的现象存在，所以我想了解其背后的原因”。<b>而这样想的魅力就在于，我们已经默认了这样的现象</b>。我们甚至不会质疑怎么会有人把游戏和宗教链接，怎么会有人觉得虚拟是宗教的另一个闸门。好像我们在玩到一个游戏基于神秘学，基于神话，基于体制化宗教时，我们就觉得这很正常一样。</p>\n<p data-pid=\"DF3Lk26z\">回到我的论文，我的宗旨就是探讨这个为什么。我对比游戏世界和宗教世界，甚至现实世界的社会结构就是在说我们在社会中会不由自主的去创造世界。当创造了这个世界之后，我们就会不由自主的入住，先入为主，然后贴上各式各样的<b>标签</b>。我们其实对虚拟的了解一无所知。我们甚至不知道虚拟的那一头，我们创造出来的生物在我们把电脑关闭之后会做什么。我们再创造的人格，是不是真的在我们不在的时候还很听话。而我们对虚拟/游戏的首几个标签，就是在创造万虚拟世界后制订一套和我们现实生活一模一样的生活法则。那当然，生活法则中必然包含了宗教。</p>\n<p data-pid=\"BEbhUwVY\">我们可以创造一个完全和现实世界不一样的游戏世界。但不能否认的是，绝大多数，甚至所有的游戏，多多少少都借鉴了现实生活。我们从来都不知道上帝长啥样，那我们就从历史里找找模样，再贴一个我们自己认为的标签，然后投放到游戏里。所以说，这也说到了最后的关键总结。<b>我们在游戏中是什么</b>？</p>\n<p data-pid=\"VR4iRbhZ\">如果说我们创造了游戏，我们又在游玩游戏。那我们是什么？我们就是神！我们可以肆无忌惮的更改游戏规则，我们可以随意尝试BUG，我们可以制作玩家mod来创新游戏。神在这个游戏里其实比起游戏工作室就是一串代码，比起玩家就是一个需要攻克的BOSS。所以说，当我们一次次尝试，一次次失败，一次次重生最后打败了游戏中的神和BOSS。那我们就成为了取代BOSS的游戏之神。</p>\n<p data-pid=\"3GNu8ti3\">翻回来说，我们的信仰就变得非常显而易见了。既然我们就是神，那么我们简单来说就是在信仰自己。Humanism，人类至上主义，在游戏中有着非常充分的体现。因为我们就是无所不能的神。这和现实生活中我们的无力感形成了鲜明对比。所以说，<b>信仰在游戏中也即是我们人类自己</b>。</p>\n<hr>\n<p data-pid=\"WusNpNQt\">上述的绝大部分内容选自我在大学的毕业论文。如果各位觉得不错欢迎点击上文的link查看。其中有更多我上问没有提到的内容，比喻<b>游戏在宗教状况下的定义</b>，<b>什么是现实</b>，<b>以及未来游戏宗教的发展方向</b>。笔者，希望你对我的答案有些思考和启发。虽然这不一定是标准答案，但的确是许多作者和学者的答案。感谢。</p>\n<p><br></p>\n<p data-pid=\"7u7AlkQm\">部分Reference：</p>\n<p data-pid=\"n1b6TkUx\">Berger, P. L. (1969). <i>The sacred canopy</i>. Anchor Books.</p>\n<p data-pid=\"AfMmam5K\">﻿Berger, P. L., &amp; Luckman, T. (1967). <i>The social construction of Reality: A Treatise in the Sociology of Knowledge</i>. Doubleday &amp; Company, Inc.</p>\n<p data-pid=\"vwCDd86R\">Campbell, H., Grieve, G. P., &amp; Gregory, R. (2014). Citing the Medieval: Using Religion as World-Buliding Infrastructure in Fantasy MMOPRGs. In <i>Playing with religion in Digital Games</i> (pp. 134–153). essay, Indiana University Press.</p>\n<p data-pid=\"3kBuQypg\">Campbell, H., &amp; Tsuria, R. (2022). <i>Digital Religion Understanding Religious Practice in digital media</i>. Routledge, Taylor &amp; Francis.</p>\n<p data-pid=\"FrhRV-pK\">Forbes, B., Mahan, J. H., &amp; Grieve, G. P. (2017). Meditation on the Go: Buddhist Smartphone Apps as Video Game Play. In <i>Religion and popular culture in America</i> (pp. 195–212). essay, University of California Press.</p>\n<p data-pid=\"x2LeqhAI\">Paden, W. E. (1994). <i>Religious worlds</i>. Beacon Press.</p>\n<p data-pid=\"TC9tQNw_\">Paden, W. E. (2012). Tracks and themes in a shifting landscape: Reflections on 50 years of the study of religion. <i>Religion</i>, <i>43</i>(1), 89–101. <a href=\"http://link.zhihu.com/?target=https%3A//doi.org/10.1080/0048721x.2013.744614\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">doi.org/10.1080/0048721</span><span class=\"invisible\">x.2013.744614</span><span class=\"ellipsis\"></span></a></p>\n<p data-pid=\"fuHjD5_G\">Paden, W. E. (2017). Shifting worldviews: Modeling sacrality in naturalistic perspective. <i>Religion</i>, <i>47</i>(4), 704–717. <a href=\"http://link.zhihu.com/?target=https%3A//doi.org/10.1080/0048721x.2017.1336888\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">doi.org/10.1080/0048721</span><span class=\"invisible\">x.2017.1336888</span><span class=\"ellipsis\"></span></a></p>\n<p data-pid=\"mgp_3x4r\">Salen, K., &amp; Zimmerman, E. (2003). <i>Rules of play: Game design fundamentals</i>. The MIT Press.</p>\n<p data-pid=\"muwiZv44\">Schuetz, A. (1945). On multiple realities. <i>Philosophy and Phenomenological Research</i>, <i>5</i>(4), 533–576. <a href=\"http://link.zhihu.com/?target=https%3A//doi.org/10.2307/2102818\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">doi.org/10.2307/2102818</span><span class=\"invisible\"></span></a></p>\n<p data-pid=\"gzKRd7o7\">Wagner, R. (2012). First-person shooter religion : Algorithmic culture and inter-religious Encounter. <i>CrossCurrents</i>, <i>62</i>(2), 181–203. <a href=\"http://link.zhihu.com/?target=https%3A//doi.org/10.1111/j.1939-3881.2012.00229.x\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">doi.org/10.1111/j.1939-</span><span class=\"invisible\">3881.2012.00229.x</span><span class=\"ellipsis\"></span></a></p>\n<p data-pid=\"ZidascB2\">Wagner, R. (2012). <i>Godwired: Religion, ritual, and virtual reality</i>. Routledge.</p>\n<p data-pid=\"24K1jG7v\">Wagner, R. (2013). God in the game: Cosmopolitanism and religious conflict in Videogames. <i>Journal of the American Academy of Religion</i>, <i>81</i>(1), 249–261. <a href=\"http://link.zhihu.com/?target=https%3A//doi.org/10.1093/jaarel/lfs102\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">https://doi.org/10.1093/jaarel/</a></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/adolshadow?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">AdolShadow</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/335668249/answer/2596282522?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">7 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/522657482?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">民政局警告处罚的意义是什么？</a><br><a href=\"http://www.zhihu.com/question/511424236?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">我坚定地信仰共产主义，有人能告诉我，我可以做什么吗？</a><br>\n","link":"http://www.zhihu.com/question/335668249/answer/2596282522?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"美联储再次加息 75 个基点，重申控通胀的坚定承诺，本次加息能否有效控制通胀上升？对全球经济有何影响？","date":"2022-07-28 04:50:00","description":"\n<p data-pid=\"k961HPj5\">昨晚上美联储加息75bp之后，市场反应如下：</p>\n<p data-pid=\"ZLHfiWcO\">美元指数跌100pips，比特币涨了1600美元，标普500涨了近3%，10y美国国债收益率跌到2.79%。</p>\n<p data-pid=\"mX6J5vtv\">这是什么意思？难道加息之后市场反应是欢呼牛市开始了吗？</p>\n<p data-pid=\"8stjz06K\">关键就在于Powell透露了这些内容（英文为原话）：</p>\n<p data-pid=\"CmPPZaYq\">1.美联储开始“data dependent”。</p>\n<p data-pid=\"Qfd6_V5D\">2.FOMC会议将变成“meeting by meeting basis”。</p>\n<p data-pid=\"M8rR3qgJ\">上面两项在说一件事情，也就是Fed不会再有一个预设的利率变化路径，一切随缘，看数据他们再作出反应。也就意味着Fed不再用forward guidance来引导市场和经济了（他们往往都是用模型预测经济来提供一个预设FFR路径），他们从guidance变成了response，从主动变成了被动。</p>\n<p data-pid=\"IN4bD_ik\">那市场怎么想呢？那就意味着市场会更多price in经济运作的路径，市场怎么看待通胀呢？</p>\n<p><img src=\"https://pica.zhimg.com/v2-3ac7ddd47ad3d4919a9f4240160df88d_720w.jpg?source=b1748391?rss\" data-rawwidth=\"833\" data-rawheight=\"817\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-3ac7ddd47ad3d4919a9f4240160df88d\" data-watermark-src=\"v2-177899ffc7d2c61c63a06783b707f6f0\" data-private-watermark-src=\"v2-32c3568b393d6b67e42868424c3327a7\"></p>\n<p data-pid=\"f22ixQis\">如果你看10y-2y的yield curve就看到倒挂到什么程度了，30bp都已经超过2008年金融危机前的倒挂水平了。市场不但觉得通胀不能持久，而且在pricing明后年美联储将以自由落体方式降息。</p>\n<p data-pid=\"AFNwHZ6S\">所以现在很多宏观基金都在做多10y，20y长期债券。观点就是因为都看到了recession是绝无可能避免的了，不管美联储官员怎么说，美国经济进入萧条在市场眼里那是没有争议的事情了。</p>\n<p data-pid=\"2bSiNYJY\">我们已经看到很多证据都能说明世界经济在进入萧条，PMI暴跌，铜价暴跌，住房数据差，FAANG开始减少headcount，还有倒挂的YC，萧条中demand destruction能很快把通胀拉下来，美联储如果指根据数据来作出反应，那么市场推断明年后那年就是光速降息。那么昨天看到的市场反应基本就能表明最近市场对经济的看法。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/weijiechen?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">陈伟杰</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/545511029/answer/2596750833?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">244 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/545808730?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">美联储加息 75 个基点，和市场预期一致，美联储加息对该国经济有何影响？</a><br><a href=\"http://www.zhihu.com/question/545714893?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">7 月 美联储再次加息 75 个基点，这将会产生哪些影响？</a><br>\n","link":"http://www.zhihu.com/question/545511029/answer/2596750833?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"美国财长称，即使美国经济增速连续两个季度为负，也不意味着衰退，目前美国经济形势如何？","date":"2022-07-26 05:20:55","description":"\n<p data-pid=\"3lfaJk4f\">关于衰退（recession）的定义，流传比较广泛的是1974年Julius Shiskin的定义：两个季度的真实GDP下降。理由就是一个健康的经济总是在逐渐扩张的，而两个季度的萎缩，意味着经济一定是出了问题，所以就是衰退。</p>\n<p data-pid=\"7aglOD4v\">但是美国的国家经济研究局（NBER）一直以来是不采用这个标准的，NBER的定义是：</p>\n<blockquote data-pid=\"m4bk3L1m\">a significant decline in economic activity spread across the economy,  lasting more than a few months, normally visible in real GDP, real  income, employment, industrial production, and wholesale-retail sales.<br>持续数月的经济活动的不断下降，通常会在真实GDP，真实收入、就业、工业生产和零售等方面所体现出来。</blockquote>\n<p data-pid=\"hnalbhSK\">这两个标准比较的话，NBER的更有弹性，JS的更量化。不过更量化的未必更严格。有一个例子就是2001年的经济衰退：</p>\n<p><img src=\"https://pic4.zhimg.com/v2-6a42ed2a27e9401afd548aedb65dde13_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1149\" data-rawheight=\"429\" data-watermark=\"original\" data-original-src=\"v2-6a42ed2a27e9401afd548aedb65dde13\" data-watermark-src=\"v2-a1d2be6e4204dcc2f5ee31cb42b948b8\" data-private-watermark-src=\"v2-cc261fc68001d1b6814aff533b493e23\"></p>\n<p data-pid=\"PpLSdAIk\">单独看GDP的话，会发现还可以，波动了一下就迅速涨回去了。但是如果看失业率的话：</p>\n<p><img src=\"https://pica.zhimg.com/v2-9366457d7946d2a8c5e34f55a1ca86b3_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"792\" data-rawheight=\"525\" data-watermark=\"original\" data-original-src=\"v2-9366457d7946d2a8c5e34f55a1ca86b3\" data-watermark-src=\"v2-57ebe1930e454e3cedaffc9a281cff5e\" data-private-watermark-src=\"v2-08336205196a45b4c51a66c12988ccea\"></p>\n<p data-pid=\"sBUxjPnc\">会发现2001年的问题远远比GDP上所反映的要严重很多，270多万个职位消失了，比以前的各种衰退中职位消失量都大很多。</p>\n<p data-pid=\"bC41hs7G\">从这个意义上说，耶伦的话本来就是可以双向解读的：一方面，两季度的GDP萎缩，确实不意味着就进入了衰退——因为衰退意味着收入下降，失业人数增加，然后生产下降，东西卖不出去，继续失业这么一个经济萎缩的过程，直到触底反弹，单独GDP萎缩可能有其他的原因，比如高通胀。</p>\n<p data-pid=\"FCy-gf9P\">另一方面，在疫情刚开始的时候，就已经有人讨论过美国是否在不触发两季度GDP萎缩的情况下，就会进入事实上的衰退。因为疫情本来就是有波峰和波谷的，而波峰和波谷会影响劳动力供给，所以真实GDP可能一个季度高一点，一个季度低一点，但是事实上这种不稳定性已经造成了收入下降和失业的提升。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-f9d3cd3c3ff0c92fa8ae3419e7fc353c_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"657\" data-rawheight=\"417\" data-watermark=\"original\" data-original-src=\"v2-f9d3cd3c3ff0c92fa8ae3419e7fc353c\" data-watermark-src=\"v2-6323ec0507b4ef317ff8b01a71db8236\" data-private-watermark-src=\"v2-e1bd27af91036d8538eacf940a4b81f4\"></p>\n<p data-pid=\"jWf2mg6e\">上面这个图就是1980年衰退的情况。当时也是能源危机+通货膨胀，经济因为能源危机而萎靡，然后迅速反弹，之后通货膨胀居高不下，美联储迅速加息，又把经济按下去了，之后起伏数次。如果按照JS定义的话，只有1981四季度到1982一季度有连续两季度的衰退，其他时候都不是，然而现在普遍认为1980衰退的区间要比JS定义的区间要大。</p>\n<p data-pid=\"WweNOmzE\">现在美国的经济就业还是处在过热的状态，失业率居低不下：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-473eb9758a876bf96e26fd754efd3ea8_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"736\" data-rawheight=\"403\" data-watermark=\"original\" data-original-src=\"v2-473eb9758a876bf96e26fd754efd3ea8\" data-watermark-src=\"v2-5205a85a904480eeff5991acd61ca808\" data-private-watermark-src=\"v2-4a42b99a4ce51af925e93e116074931d\"></p>\n<p data-pid=\"-858QXjN\">可以说是衰退的征兆，但是如果要NBER宣布美国进入衰退，还是要进入上述说的那种产出下降，失业增多、GDP萎缩的情况。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/divinites?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">司马懿</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/545170537/answer/2592225277?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">197 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/513161349?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">美财长耶伦讲「2023 年通胀将大幅放缓，对美国经济前景感到乐观」，目前美国经济现状如何？</a><br><a href=\"http://www.zhihu.com/question/537150918?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">美财长耶伦表示美国经济增长将明显放缓，但不会陷入衰退，释放了哪些信号？</a><br>\n","link":"http://www.zhihu.com/question/545170537/answer/2592225277?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"中国金融业现状是怎样的？","date":"2022-07-25 06:06:55","description":"\n<h2>金融业发展历程</h2>\n<p data-pid=\"T7qEWxwn\">先梳理一下改革开放以来金融业的发展历程。</p>\n<p data-pid=\"qBwYkhDI\">中国的改革开放是以1978年的十一届三中全会为起点的，这也是金融改革的起点。</p>\n<p data-pid=\"3biKnUkF\">在此之前的计划经济时代，中国的金融体系非常简单，规模很小，种类也很单一，基本上只有中国人民银行一家机构。人民银行既要承担中央银行的职责，又要提供商业银行的业务。这种体系之所以能维持，<b>是因为在计划经济体制下，几乎所有的经济活动都由中央计划安排。</b>企业需要做投资、买原料、付工资的资金都由计划统一调配，企业的盈余也要全部上缴，老百姓的存款也很少。对应的，金融机构能发挥的作用也十分有限。</p>\n<p data-pid=\"z7J_qThm\">（<i>实际上，中国的金融体系一度曾非常发达。大概在100年前，在彼时的国际金融中心—上海，市面上一度有100多个国家的货币同时流通。当时实行银本位制，跨境资本流动完全自由。不过在20世纪三四十年代，因为受到大萧条和连年战争的冲击，金融体系基本上崩溃。1949年新中国成立，1952年开始，金融机构国有化。之后在社会主义改造运动中，金融机构几乎全部被取消。</i>）</p>\n<h2>1、重建金融体系</h2>\n<p data-pid=\"TAjFxxtX\">改革开放以后，中国经济开始从中央计划向市场经济转型。随着市场改革的不断深入，经济活动越来越频繁，对金融发展的需求越来越多，“大一统”的金融体系亟需改革。1979年，中国银行、农业银行、建设银行相继从人民银行独立出来；1984年，工商银行也从人民银行独立出来。至此，人民银行专司中央银行的职能。</p>\n<p data-pid=\"2c7Yo4AR\">不过，当时的工商银行、农业银行、中国银行、建设银行分别服务于工商业、农业、国际业务和项目建设等行业，相互之间没有充分竞争，显然不符合市场经济的基本特征。1993年，十四届三中全会决定成立三家政策性银行，即国家开发银行、中国进出口银行、中国农业发展银行，专门承担政策性服务，四大行只承担商业性业务，不再按专业领域划分，相互之间可以交叉、竞争。</p>\n<p data-pid=\"i7ej4knR\">但是，由于初期大型商业银行自身治理不规范、政府干预等原因，大型商业银行不良贷款风险积聚。1997年爆发的亚洲金融危机又给中国脆弱的金融体系沉重一击。按照世行的统计，2001年中国商业银行的不良贷款率接近30%，面临严重资不抵债。于是在2003年以后，国务院对国有商业银行进行了注资和不良资产剥离，引入了境内外战略投资者，启动了现代公司治理改革，在国内外公开发行股票上市，真正开始接受市场检验。（<i>想了解更多国有大行股改上市的内容，推荐阅读潘功胜的著作《大行蝶变—中国大型商业银行复兴之路》，这里不再展开。</i>）</p>\n<p data-pid=\"d7Wvqb8D\">这次改革也加快了商业银行竞争性格局的形成。此后，银行业的市场结构从国有大行高度垄断逐渐转变为国有商业银行、全国性股份制商业银行、城商行、农商行等多元主体共同竞争，银行迎来了蓬勃发展。2021年，国际权威财经媒体《银行家》在其官网上公布了2021年全球银行1000强，中国共有144家银行上榜。其中，中国工商银行、中国建设银行、中国农业银行和中国银行位列全球排行榜前四位。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-e6c3403f54327ab272ee52597106d50a_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"489\" data-watermark=\"watermark\" data-original-src=\"v2-e6c3403f54327ab272ee52597106d50a\" data-watermark-src=\"v2-ef15d9b0fdf96798629b8a67bcc375ac\" data-private-watermark-src=\"v2-09c3c3f9b33614ed870dabd67293d43b\"></p>\n<p><br></p>\n<p data-pid=\"n0zdhOSJ\">中国金融体系是典型的银行主导型。为了保持对金融资源分配的干预和控制，金融资源主要集中在国有大行，而<b>股票、债券等直接融资市场发展相对落后</b>。</p>\n<p data-pid=\"n-UdB6Jy\">中国的股权市场开始于1990年，上海证券交易所和深圳证券交易所先后成立，以证监会为核心的证券市场统一监管体制开始形成。1999年，《证券法》出台后，资本市场在法律体系的保障下进一步规范和完善。2006年，中国资本市场完成了具有里程碑意义的股权分置改革，实现了股票市场按照统一市场机制定价，使中国资本市场的发展摆脱了过去主要为国有经济融资的路径，为资本市场优化资源配置功能奠定了基础。2006年起通过开展一系列专项活动，资本市场不断优化。2018年，上交所设立科创板并试点注册制，多层次的资本市场体系基本形成。</p>\n<p data-pid=\"5IT_F-0e\">债券市场方面，中国于1981年开始发行国债，1983年发行企业债，2007年发行第一支公司债，2015年证监会出台《公司债发行与交易管理办法》，将公司债发行主体扩展到全体企业。此后，公司债进入快速发展期，中国债券市场的产品和交易工具在创新中越来越全面：在基础产品的种类上基本与发达国家债券一致，主要包括政府债券、金融债券、公司信用债券和资产支持类债券；交易工具方面，除了传统的现券和质押式回购、买断式回购外，还有国债期货、债券借贷以及人民币利率互换等利率衍生品。</p>\n<p data-pid=\"ZWgJSJjE\">与国内金融体系的发展完善相比，中国<b>金融业对外开放的历程相对审慎，特别是在早期</b>。以汇改为例，我国的汇率市场化改革可谓走走停停，曾在历次危机后一度中断。</p>\n<p data-pid=\"_oRPvkK9\">1953年至1972年间，我国采用单一固定汇率制。随着计划经济体制的逐步健全，我国汇率长期保持基本稳定。1973年布雷顿森林体系瓦解，西方国家普遍实行浮动汇率制度，人民币汇率则采用以一篮子货币计价的单一浮动汇率制，并进入一个升值周期，一直持续到1980年左右。</p>\n<p data-pid=\"9_OM1jPq\">当时人民币兑美元汇率为1.5：1，严重高估。为了鼓励出口，我国开始实行官方汇率与外汇内部结算价并行的双重汇率制度。</p>\n<p data-pid=\"ubpkzzoz\">随着经济开放程度加大，汇率双轨制逐渐不能适应我国的开放需求。1994年初，中国进行了双轨合一的外汇体制改革，实行以市场供求为基础、单一的、有管理的浮动汇率制度，这也奠定了当前汇率制度的基本框架。</p>\n<p data-pid=\"hyIOjO_a\">1996年，中国宣布经常项目可兑换，并开始逐渐酝酿资本项目可兑换。但当时条件还不成熟。特别是受1997年亚洲金融危机冲击，人民币出现贬值压力，国内通缩压力上升，银行坏账加快积累，汇率体制改革一度放缓，资本项目开放的计划也只能暂停。之后面对中国加入世界贸易组织、“9·11”事件后世界经济疲软等新的形势和因素，为减少不确定性，保持人民币汇率政策的连续性，汇率波幅收窄了较长一段时间。</p>\n<p data-pid=\"ju_QL8tS\">2005年，随着世界经济企稳、美联储稳步加息、国内经济运行平稳，中国迎来了新一轮汇率改革的时间窗口。这一年的7月21日，新一轮人民币汇改启动，中国的外汇制度<b>从钉住美元开始转为以市场供求为基础、参考一篮子货币进行调节、有管理的浮动汇率制度</b>。但2008年国际金融危机暴发，令汇率市场化进程再度中断。</p>\n<p data-pid=\"8lg-rR28\">2010年年中，中国人民银行宣布进一步推进人民币汇率形成机制改革。2015年，央行启动“8·11”汇改，进行中间价报价机制改革，增强市场化成分，“收盘汇率+一篮子货币汇率变化”这一中间价形成机制逐步确立。</p>\n<p data-pid=\"pnZAfDKA\">不过，本该受到市场欢迎的改革，却成了引发人民币大幅贬值预期的导火索，甚至引发了一轮规模较大的资本外流。为稳定金融体系，央行采取了两方面的措施，一是加强跨境资本流动的管理，二是动用外汇储备进行干预。可以说是付出了市场化改革部分倒退的代价。不过，结合当时中国所处的环境，不难理解央行所采取的一系列措施也是迫不得已，而且也达到了稳定预期的目的。</p>\n<p data-pid=\"crJyFNMX\">客观地说，在短短四十多年的时间里，中国几乎白手起家，建立了一个较为完整的金融体系，且从没有发生过系统性金融危机，这一点实属不易。</p>\n<h2>2、目前中国金融体系的三大特征</h2>\n<p data-pid=\"1AjbxJxz\">自1978年实施改革开放以来,中国的金融业一直致力于建立市场化的金融体系，这种体系大多是以欧美成熟经济体的金融体系为范本的。不过，与欧美等发达国家的金融体系相比，中国金融体系有不少独特之处，其中有三方面特征尤为突出，<b>即规模大、管制多、监管弱</b>。</p>\n<p data-pid=\"yl4wUpul\">首先是规模大。</p>\n<p data-pid=\"oSi160Nf\"><b>规模大体现在机构和资产两方面。</b>从机构角度看，当前中国金融机构数量和种类都已经很完备了。有央行、银保监会、证监会组成的“一行两会”的监管部门，也有国家开发银行、中国进出口银行、中国农业发展银行组成的三大政策性银行，还包括工农中建交、邮储六家大型国有银行，十几家股份制商业银行以及近4000家城商行、农商行和村镇银行。此外还有保险公司、证券公司、资产管理公司等金融机构。可以说，市场经济国家拥有的金融机构中国几乎都有，而且数量庞大。</p>\n<p data-pid=\"EKC_v7JD\">从资产规模来看，中国的金融体系是典型的银行主导，相对而言，资本市场就不够发达，但是用市值来衡量，中国股票市场在全世界排名第二，债券市场全世界排名第三。</p>\n<p data-pid=\"v0EqjY5J\">其次是管制多。</p>\n<p data-pid=\"RLTcmeqp\"><b>管制多，意味着政府对金融体系的干预还是比较普遍的</b>。中国从计划经济向市场经济转型，采用的是渐进式的双轨制改革。在改革过程中，产品市场基本上都放开了，但资本、土地、能源等要素市场的干预依然较多。在金融领域，金融抑制则普遍存在。比如，商业银行的存贷款利率，商业银行有一定的自主权，但很大程度上还是受央行指导和监测；央行对汇率市场贬值太多或升值太多时都会有一些干预；政府对跨境资本流动有比较严厉的管制等。</p>\n<p data-pid=\"pKXilQnL\">（<i>金融抑制这个概念是由斯坦福大学的麦金农教授提出来的，主要是指政府对利率、汇率、资金配置、大型金融机构和跨境资本流动的各种形式的干预和管制。</i>）</p>\n<p><br></p>\n<p><br></p>\n<p><img src=\"https://pica.zhimg.com/v2-ff51408a2183758f5023b5336d169d93_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"636\" data-rawheight=\"527\" data-watermark=\"watermark\" data-original-src=\"v2-ff51408a2183758f5023b5336d169d93\" data-watermark-src=\"v2-068e67e6f72fdf00e255c3ee6323132f\" data-private-watermark-src=\"v2-9863638eae52ff1554a9dc87ad2b01ff\"></p>\n<p><br></p>\n<p data-pid=\"9IPk2ptE\">上图展示的是金融抑制指数，0意味着金融体系完全市场化，1意味着金融体系完全由政府控制。可以看出，过去四十年间中国的金融抑制指数下降了约40%，但仍处在较高的水平。</p>\n<p data-pid=\"yMMv_8D1\">最后是监管弱。</p>\n<p data-pid=\"LruT_PRX\"><b>监管弱主要是指当前的监管机制防范与处置金融风险的能力不强。</b>改革开放以来，中国维持金融稳定的基本经验主要有两条：一是政府兜底，二是持续的高增长。政府兜底可以在短期内稳定投资者信心，避免市场出现大的震荡。持续高增长的好处是可以在发展中解决问题，发生了问题，只要有办法把增量控制住，存量可以慢慢消化。</p>\n<p data-pid=\"jIle61Do\">不过，2008年国际金融危机之后，中国经济从高速增长转为中高速增长。商业银行不良率开始上升，与此同时，随着中国经济已深度融入世界经济，受到国外市场波动的外溢性影响，金融风险也随之增加，过去维持稳定的做法已经越来越难以持续。</p>\n<p data-pid=\"z47YRwIY\">近年来，政府一直在努力处置各个领域的金融风险，尽量守住不发生系统性金融风险的底线。与此同时，国务院也成立了金融稳定发展委员会以加强监管政策的协调，并将过去“一行三会”的分业监管格局逐步过渡为“一委一行、两会两局”的统一监管大框架。但这个新的监管格局刚刚形成，一些具体的运行机制也在不断的完善之中，是否能够及时、有效地识别并处置金融风险，还有待检验。</p>\n<h2>3、市场经济下，为何存在较多金融抑制？</h2>\n<p data-pid=\"_0In9T0p\">在上述这三大特征中，规模大和监管弱都相对好理解。但是就“管制多”这一特征而言，为什么在市场经济下，中国仍然存在较多的金融抑制？</p>\n<p data-pid=\"4NYR8W1K\">正如前文所述，<b>双轨制的改革策略可能是最直接的诱因</b>。</p>\n<p data-pid=\"NRb6rVak\">与前苏联、东欧等转型经济体采取的“休克疗法”不同，中国在经济领域采取的是“双轨制”改革策略。</p>\n<p data-pid=\"iNH2lU77\">休克疗法意味着立刻全部取消计划体制，并对所有国有企业实行私有化改造。这种做法简单高效，但在实践中有很多困难。比如，改革初期经济很容易崩盘，而市场机制的培育和发展需要相当长时间，经济恢复也需要很长时间。</p>\n<p data-pid=\"Ddrd6W0d\">“双轨制”改革则是，一方面支持国有企业继续运行；另一方面为非国有部门创造更宽松的成长空间。这种改革的优势是可以避免改革初期经济与社会的大震荡，特别是大规模的失业和严重的经济衰退，缺点是国有企业通常效率比较低，需要外部支持才能够持续生存。</p>\n<p data-pid=\"qVqfa4Og\">而政府支持国有企业最简单的方式应该是财政补贴，但在改革期间特别是在前二十年间，财政一直捉襟见肘。政府只好借助于生产要素市场扭曲，变相地补贴国有企业。具体体现在两个方面，一是人为压低要素的价格，降低生产成本；二是政府干预要素配置决策，把大量的生产资源分配给国有企业以及其他大企业。而在金融领域，则进一步体现为压低实际利率，将大量的信贷资金流向国有企业，在包括信贷和非金融企业债券的整个债务融资市场中，国有企业的份额占到75%左右。这也就导致了很多非国企经济主体的融资需求无法从正规金融部门得到满足，只好转向民间借贷、影子银行等非正规部门。实际上，影子银行和互联网金融的发展也是变相的利率市场化过程，这里我们不展开描述，在之后的文章中会详细解释。</p>\n<p data-pid=\"n3ZxBE6i\">除了利率外，中国始终还保持着不同程度的资本项目管制，这也是中国金融抑制政策的重要组成部分。不过，资本项目管制一定程度上防止资本大进大出，对维持金融稳定起到了重要作用，而金融改革的确需要循序渐进。</p>\n<p data-pid=\"uspJZyZw\"><b>到底应该如何看待金融抑制？金融抑制究竟是促进了中国的经济成功，还是说没有妨碍经济成功？抑或是经济本可以更成功呢？这个问题非常重要，因为它不仅关乎如何理解过去，更涉及如何应对未来。关于这个问题，下期我们将继续更新，欢迎大家讨论和关注。</b></p>\n<p><br></p>\n<p data-pid=\"ifCpaBI2\">参考文献</p>\n<p data-pid=\"g8y9wHUn\">黄益平、王勋，《读懂中国金融—金融改革的经济学分析》</p>\n<p data-pid=\"SKhhmoAO\">金中夏、赵岳、王浩斌，《人民币：从市场化走向国际化》</p>\n<p data-pid=\"ZkkQ46XM\">国际金融报，从“技术性破产”到全球“四强” 国有大行涅槃重生</p>\n<p data-pid=\"EzCuYvJI\">胡晓炼：实行有管理的浮动汇率制度是我国既定政策</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/jin-rong-si-shi-ren-lun-tan?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">金融四十人论坛</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/61452206/answer/2502167235?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">16 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/511893099?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2022年中国经济处在长波周期的哪个阶段？</a><br><a href=\"http://www.zhihu.com/question/521810049?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">现在全世界经济都在下行，请教一下有哪些地方是相对较好的呢？</a><br>\n","link":"http://www.zhihu.com/question/61452206/answer/2502167235?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"如何评价动画电影《开心超人之英雄的心》？","date":"2022-07-22 10:15:49","description":"\n<h2>感谢所有支持与喜爱，我们一起并肩作战！</h2>\n<h3> 大家好！我是动画电影《开心超人之英雄的心》的导演黄伟明。</h3>\n<p data-pid=\"E1nl3nk9\">      《开心宝贝》诞生于2010年，至今已有12周年，《开心超人之英雄的心》是系列的第三部大电影，它对“开心超人”和我来说，都是非常特别的作品，睽违银幕八年、首次的三维尝试等等，是至关重要的挑战。</p>\n<p data-pid=\"4KJ-n2Q6\">       12年前，我创作了《开心宝贝》动画片，初衷是希望在日本、欧美的超级英雄围绕下的中国小朋友们，能够拥有中国自己的超人偶像、自己的超级英雄，也希望《开心宝贝》能够为大朋友和小朋友们都带去欢笑，而此刻，这个初心始终不变，超人们热血永远不灭，勇敢、善良、自信、宽容、坚毅的品质也是永远不变的，这些在影片当中，相信大家也都会感受得到。</p>\n<p data-pid=\"OuvxdNMZ\">      自2014年第二部大电影《开心超人2：启源星之战》之后，我和团队就开始策划这第三部的大电影，希望能够做出些与以往不同的，震撼人心的作品。2900多个日日夜夜，我们从策划的无数次推翻重组、剧本的无数次打磨，到分镜的几十个版本，剪辑版的七十多个版本，最终生成96分钟的成片，是全团队的不懈努力的结果。</p>\n<p data-pid=\"BZJhv0CD\">       在这八年的过程中“开心超人”IP也经历了许多，它从《开心宝贝》更名为《开心超人联盟》，我们也不断地在问自己“随着观众的成长，我们需要做出怎样的升级？”自2016年的第十季《开心超人联盟之英雄归来》起，动画的画风全面升级，这对一个在当时常青已经6年的IP来说，是非常大胆的举动，一开始大部分观众们有些不适应，但从最终此季的收视成绩来看，它是获得了广泛认可的。在这一部当中我们也开始了部分集数连续剧情的尝试，随着观众的成长，大家期待看到更具深度的内容，我们稍微放下了最擅长的单元喜剧，之后的几季我们继续深入连续剧情的铺写，到第13季《开心超人联盟之能源核守护者》已是整季的完整连续故事。直到最新播出的剧集《开心超人联盟之异星迷航》，我们仍在权衡单元喜剧的轻松欢乐和连续剧情的深度内容之间的平衡，也感谢大家能够给予我们机会继续努力和进步。</p>\n<p data-pid=\"ys2SZ62A\">       而大电影《开心超人之英雄的心》则是前所未有的更大挑战，首次三维的尝试意味着几乎所有一切从零开始，我和团队摸着石头过河，每个环节的修改量都是非常庞大的，日夜挠头甚至崩溃是基本日常，现在看来也许是有点莽撞的，是对开心超人、对动画的热爱让我们继续坚持，在这里感谢团队的每一个人愿意一起尝试挑战，感谢每个人付出的不懈努力。</p>\n<p data-pid=\"6Rxb5ZzI\">       这部影片里，在画面上，从基础的美术到整个星星球城市的打造，观众能够看见的、观众难以发现的镜头没有带到的部分，我们都尽我们的努力倾力打磨。在剧情方面，我们希望能够通过影片收获新朋友，也让老朋友能够喜欢，它会是小朋友们喜欢的搞笑动画片，因它笑点满载，它也会是大朋友爱看的热血动画电影，因它其中内含了宇宙黑洞、时间穿越等“烧脑”剧情，点映以来93%以上的好评率也肯定了科幻震撼的视觉效果和剧情的可看度，非常感谢大家的肯定。</p>\n<p data-pid=\"6OOyDZZt\">       再次感谢观众在我们每次尝试挑战和改变的时候，能够给予我们机会，不断努力、继续争取进步，为大家带来更好的作品。</p>\n<p data-pid=\"sPtUVAbN\">       最近看到有不少粉丝留言说“等待了八年，今天终于可以看到开心超人电影3，一定会到影院支持！”，真的感触良多，八年不短，12年更是整一轮，感谢大家长久的等待和支持。</p>\n<p data-pid=\"wpKnENwU\">       在开心超人的“本命年”，我们推出了《开心超人之英雄的心》这部爆笑、热血、科幻的电影，它会告诉大家，平凡人也可以做自己的超人，希望给大家不畏困难，不惧挑战的勇气。</p>\n<p data-pid=\"Zvqd2kAk\">       《开心超人之英雄的心》今日全国上映，我们满怀期待，诚挚地希望大家能够到影院观看这部坚持与热爱铸就的影片，希望大家能够喜欢我们这部影片。</p>\n<p data-pid=\"F1NdFZVx\">       自影片点映以来，我们也观察到《开心超人之英雄的心》维持着最高好评率93%，今日7月22日首映的上座率更是暑期新片当中最高的，然而影片的排片率却是档期最低，很多粉丝都纷纷跟我们留言说想去影院支持，但当地的影院没有排片，也希望院线和影城的朋友们，能够看到大家对我们的支持，也给予影片支持和鼓励。</p>\n<h3>“只要有一颗超人的心，就是超人！”</h3>\n<p data-pid=\"6e_CAijy\">       一路以来，我们在大家的关怀和热爱中，跌跌撞撞地成长，我们都没有超能力，但我们都有一颗热爱和坚持铸就的“超人心”，希望未来我们有幸能够继续陪伴大家，也希望我们有幸能够获得大家的陪伴，我们努力，让开联永不完结，我们约定——开联永不毕业。</p>\n<h3>感谢所有支持与喜爱，让我们一起并肩作战！</h3>\n<h3>感谢大家！</h3>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/huang-wei-ming-leohuang?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">黄伟明</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/532280167/answer/2587667231?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">19 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/535163833?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">动画《开心超人之英雄的心》曝光的绝不放弃版预告片中有哪些亮点？</a><br><a href=\"http://www.zhihu.com/question/533923191?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">动画《开心超人之英雄的心》将在 6 月 1 日起点映，这部电影有哪些亮点？</a><br>\n","link":"http://www.zhihu.com/question/532280167/answer/2587667231?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"优化博客的累计布局偏移（CLS）问题","date":"2022-06-07 17:24:00","description":"\n<p>距离上一篇文章发布已有四个月了，是时候写几篇文章给博客除草了。上一次我介绍了我如何迁移、重构了我的博客的架构，这次我想来谈谈我在重构中优化和打磨访客体验时解决的一个问题。我的博客优化之旅 图片 lazyload 的学问和在 Hexo 上的最佳实践 我的博客有多快？ 天下武功，唯快不破 —— 我是这样优化博客的 ...</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/206311/26/14625/38940/629f7f81Eb11312de/b1e67f07b1cc9bc7.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/fix-blog-cls/\">https://blog.skk.moe/post/fix-blog-cls/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/fix-blog-cls/"},{"title":"使用 Next.js + Hexo 重构我的博客","date":"2022-03-17 16:24:00","description":"\n<p>在咕咕了一整年、只发布了三篇文章（其中两篇还是译文）之后，我决定还是稍微花一点时间好好折腾一下自己的博客，以 React 作为抓手，通过 Next.js 和 Hexo 深度共建，对标 Gatsby，打通静态 HTML 与用户交互之间的垂直领域屏障，实现多维矩阵闭环，为个人博客赋能（咳咳咳），然后水出 2022 年第一篇文章（逃）技术选型：Gatsby vs Next.js我使用 Hexo 驱动博客已经三年之久了，之前写过一个 开源的 Hexo 主题，后来还成为了 Hexo 的 Core Team Member、为 Hexo 贡献了不少代码。Hexo 是一个诞生于 2012......</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/218492/18/14257/25439/6227858fE1517791d/63119f6e39dc9389.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/\">https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Node.js","date":"2022-01-14 10:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h2>\n<ul>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-nodejs\">安装 Node.js</a></li>\n</ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Node.js 官网 (<a href=\"https://node.js.org/\">https://node.js.org</a>)</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/image-20220114174925675.png\" alt=\"image-20220114174925675\"></p>\n<p>下载 Node.js 安装包（推荐下载 LTS 版本）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175645.png\" alt=\"image-20220114175645642\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175750.png\" alt=\"image-20220114175749822\"></p>\n<p>勾选同意协议，点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175835.png\" alt=\"image-20220114175835742\"></p>\n<p>修改文件安装位置，点击 <code>Next</code>。（也可以不用改）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175929.png\" alt=\"image-20220114175929226\"></p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180010.png\" alt=\"image-20220114180010036\"></p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180044.png\" alt=\"image-20220114180043895\"></p>\n<p>点击 <code>Install</code> 开始安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180108.png\" alt=\"image-20220114180107827\"></p>\n<p>等待安装完成。<img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180122.png\" alt=\"image-20220114180122728\"></p>\n<p>点击 <code>Finish</code> 完成安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180206.png\" alt=\"image-20220114180206024\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>打开 <code>Git Bash</code>.</p>\n<blockquote><p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。<br>或是在开始菜单中找到 Git Bash.</p></blockquote>\n<p>输入 <code>node -v</code> 和 <code>npm -v</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180458.png\" alt=\"image-20220114180458685\"></p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-nodejs/"},{"title":"2022: 新年快乐！","date":"2021-12-31 16:00:00","description":"\n<p>转眼间，2021 年已经过去。这一年非常忙碌，以至于博客一周年的纪念来不及写，许多文章计划停留在了 To Do 里。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%8D%9A%E5%AE%A2\" class=\"headerlink\" title=\"博客\"></a>博客</h2>\n<p>由于 Cloudflare Web Analytics 是在 2021 年 4 月份启用的，再加上后来又将统计代码去除，所以关于访问量的信息不可用。</p>\n<p>截止至 2021 年 12 月 31 日，博客共发布 15 篇文章，其中 2021 年发布 11 篇文章，原创文章 10 篇。</p>\n<p>目前采用 <code>LeanCloud + Waline</code> 的评论方式，自 7 月份被刷评论后将评论权限改为登录（支持 <code>GitHub</code> 登录），还有部分评论在迁移中丢失，实在抱歉。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>博客自 2021 年 1 月 13 日将主题改为 <code>Miracle</code>，这是一款简洁、轻量的单栏 Hexo 主题。</p>\n<p><code>Miralce</code> 目前的版本是 <code>2.0.1</code>，全新的版本去除 jQuery，进一步提升性能。</p>\n<p>GitHub 仓库：<a href=\"https://github.com/hifun-team/hexo-theme-miracle\">https://github.com/hifun-team/hexo-theme-miracle</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%9B%B4%E5%A4%9A\" class=\"headerlink\" title=\"更多\"></a>更多</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">=&gt; ...</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2022/"},{"title":"无垠 2021 年度总结","date":"2021-12-31 08:36:10","description":"\n<p>真是忙碌的一年啊。转眼 2021 已经过去，2022 即将到来。又到了该总结这一年的时候了。</p>\n<h1>统计数据</h1>\n<p>年度总结的第一部分仍然是一些统计数据。以下数据截止 2021 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 29,073 (<span>+0.6%</span>)，年 PV 67,688 (<span>-11.61%</span>)，日均 UV 79.65，平均停留时间 3分34秒 (<span>-13.7%</span>)，平均跳出率 55% (<span>-9.8%</span>)。一年有效文章数 1 (<span>-80%</span>)，新增评论 109 条 (<span>-54.96%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\" alt=\"\" width=\"515\" height=\"620\" class=\"aligncenter size-full wp-image-2537\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog-249x300.jpg 249w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>除了 UV 较去年提高 100 多之外，其他数据全部下滑。主要原因还是因为今年实在太过忙碌，只更新了一篇博客，评论区也没有怎么维护。不过目前已经有两篇新的文章在路上了，希望可以尽快写完吧。</p>\n<h2>个人主页</h2>\n<p>个人页总 UV 3,515 (<span>-18.12%</span>)，总 PV 3,929 (<span>-4.56%</span>)，日均 UV 9.63，平均停留时间 55秒 (<span>-12.7%</span>)。访问的主要来源是知乎和 GitHub。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\" alt=\"\" width=\"515\" height=\"647\" class=\"aligncenter size-full wp-image-2538\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton-239x300.jpg 239w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>仍然是没有更新个人主页的一年，我也没有继续宣传这个页面，统计数据下滑大概是正常的。</p>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 4 次，新增 149 commits (<span>-54.57%</span>)，Star 数增加了 174，现有 788。</p>\n<p>终于，MDx 2.0 发布了。但是因为今年的过于忙碌，MDx 并没有得到足够的维护，版本发布周期也拉得比较长，很多 Bug 没能及时修复。希望明年可以把更多的时间花在维护 MDx 上。无论如何，还是感谢各位对于 MDx 的支持！</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>2021 大事记</h1>\n<p>说起来，2021 真的太多“第一次”了...</p>\n<ul>\n<li>一月：由于电脑电池鼓包，第一次用 iPad 外接屏幕远程桌面到服务器来考期末🌚太痛苦了</li>\n<li>一月：MDx 喜提 600 Stars</li>\n<li>三月：第一次测核酸（真的酸）</li>\n<li>三月：第一次坐上 A350！(B-309W）</li>\n<li>三月：第一次来到英国</li>\n<li>六月：第一次来到伦敦</li>\n<li>六月：第一次去猫咖撸猫🐱</li>\n<li>六月：第一次坐上 B777！(B-2025）</li>\n<li>七月：酒店隔离十四天🌚</li>\n<li>七月：MDx 喜提 700 Stars</li>\n<li>七月：第一次和猫一起住（时刻有猫撸真的爽😆）</li>\n<li>七月：入职<a href=\"https://75.team/\">奇舞团</a>实习</li>\n<li>八月：北京景点怎么这么多</li>\n<li>九月：北京景点怎么还有这么多</li>\n<li>九月：<a href=\"https://flyhigher.top/develop/2160.html\">谈谈 WebAuthn</a> 被 <a href=\"https://weibo.com/1893751011/KyipM3tOM\" rel=\"noopener noreferrer\">w3c中国微博转发</a><del>（虽然并没有人看）</del>\n</li>\n<li>九月：从奇舞团<del>跑路</del>\n</li>\n<li>九月：整了个 Stackoverflow 的复制粘贴键盘<del>，太好用了</del>\n</li>\n<li>十月：终于买了心心念念的 MSFS</li>\n<li>十一月：终于买了一台新相机</li>\n<li>十一月：第一次坐上 A380！(B-6140）</li>\n<li>十二月：第一次来到爱丁堡并和 <a href=\"https://diygod.me/\">@DIYgod</a> 面基</li>\n</ul>\n<section><div class=\"set-images-div\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\" alt=\"和猫一起住的唯一问题就是手机很快会被猫片塞满\" width=\"730\" height=\"1500\" class=\"aligncenter size-full wp-image-2518\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg 730w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-146x300.jpg 146w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-498x1024.jpg 498w\" sizes=\"(max-width: 730px) 100vw, 730px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\" alt=\"看到你在写前端，猫猫很担心你\" width=\"1004\" height=\"1500\" class=\"aligncenter size-full wp-image-2523\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg 1004w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-201x300.jpg 201w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-685x1024.jpg 685w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-768x1147.jpg 768w\" sizes=\"(max-width: 1004px) 100vw, 1004px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\" alt=\"高效开发工具（确信\" width=\"1500\" height=\"1019\" class=\"aligncenter size-full wp-image-2519\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-300x204.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-1024x696.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-768x522.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\" alt=\"和 Ralph 在天坛\" width=\"947\" height=\"1500\" class=\"aligncenter size-full wp-image-2524\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg 947w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-189x300.jpg 189w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-646x1024.jpg 646w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-768x1216.jpg 768w\" sizes=\"(max-width: 947px) 100vw, 947px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\" alt=\"380!\" width=\"1500\" height=\"874\" class=\"aligncenter size-full wp-image-2517\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-300x175.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-1024x597.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-768x447.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a>\n</div>\n<div class=\"set-images-div2\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\" alt=\"到处玩.jpg\" width=\"1500\" height=\"1080\" class=\"aligncenter size-full wp-image-2521\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-300x216.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-1024x737.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-768x553.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\" alt=\"还是到处玩.jpg\" width=\"977\" height=\"1500\" class=\"aligncenter size-full wp-image-2520\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg 977w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-195x300.jpg 195w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-667x1024.jpg 667w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-768x1179.jpg 768w\" sizes=\"(max-width: 977px) 100vw, 977px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\" alt=\"380 上的星空\" width=\"1002\" height=\"1500\" class=\"aligncenter size-full wp-image-2522\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg 1002w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-200x300.jpg 200w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-684x1024.jpg 684w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-768x1150.jpg 768w\" sizes=\"(max-width: 1002px) 100vw, 1002px\"></a>\n</div>\n</section><p><span>点击图片查看描述</span></p>\n<p>对了，对于可爱的猫猫们，我整了一个 Telegram 贴纸包，你可以在这里获取：<a href=\"https://telegram.me/addstickers/huanAndDan\">https://telegram.me/addstickers/huanAndDan</a>。</p>\n<h1>跨年红包</h1>\n<p>今年的解题之旅，从下面这张图片开始：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\" alt=\"\" width=\"1510\" height=\"1250\" class=\"aligncenter size-full wp-image-2556\"></a>\n<p>不过，鉴于今年的题目较以往对于认真解题的人更难，我还准备了隐藏红包，在解题中收集线索即可发现隐藏红包。共有 20 个普通红包和 10 个隐藏红包。</p>\n<p>解题计划持续到东八区 2022.02.03 23:59:59 或红包被领完为止，之后我会发布题解。不过由于去年情况混乱，今年在解题过程中我一旦发现有不正常的现象就会立即停止活动。Anyway，新年快乐！祝玩得开心。</p>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报用到了 PS 和 Adobe 家的新玩具 Dimension。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\" alt=\"\" width=\"707\" height=\"1000\" class=\"aligncenter size-full wp-image-2547\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg 1414w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-212x300.jpg 212w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-724x1024.jpg 724w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-768x1086.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-1086x1536.jpg 1086w\" sizes=\"(max-width: 707px) 100vw, 707px\"></a>\n<p>那么祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2507.html"},{"title":"[译] 不，Web3 不是去中心化","date":"2021-12-14 14:01:00","description":"加密货币社区对元宇宙和 Web3 的狂热仍在继续，大量投资人和开发者前仆后继加入其中。但是，Web3 真的能实现支持者们的种种愿景吗？亦或是另一个镜中月、水中花？也许让历史照进现实，能给我们答案。<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/123139/11/24965/54827/62215eedE5e3da14a/80c24408e97057dd.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/web3-is-not-decentralization/\">https://blog.skk.moe/post/web3-is-not-decentralization/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/web3-is-not-decentralization/"},{"title":"[译] 捍卫自由的互联网，对 Web3 说不","date":"2021-12-12 13:40:00","description":"作为一个充满泡沫和噱头的新概念，Web3 和元宇宙在区块链的社区中掀起了一波浪潮。鼓吹者坚信 Web3 就是互联网的未来、不惜砸下大把的金钱和精力、希望能在未来中捞一杯羹；而大部分人保持观望的态度。是时候来一点 Web3 的反对意见了。<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/87908/13/23797/13415/622032afE3a2f9e9f/95c01e98cd4a707a.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/\">https://blog.skk.moe/post/keep-web-free-say-no-to-web3/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/"},{"title":"2021 年 JavaScript Promise 性能对比","date":"2021-12-07 08:19:00","description":"\n<p>我们正生活在一个「Any application that can be written in JavaScript, will eventually be written in JavaScript」的时代。作为一门兼具动态性和简单性的语言，JavaScript 已经占领了客户端、服务端，甚至在机器学习中也占据一席之地；不可避免的，异步执行也逐渐成为这门语言不可缺少的一部分。TL; DR Bluebird 依然是速度最快、内存占用最少的 Promise 实现 Runtime 的 async / await 实现越来越快、顺序执行的性能已经超过 Native Promise，占用的内存也更少 对于平行并发执行的 Promise，Bluebird 的性能依然一骑绝尘。......</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157404/28/28495/143414/622032b2Ef7b495fd/6a9bd02e79392c9d.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/promise-performance-benchmark/\">https://blog.skk.moe/post/promise-performance-benchmark/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/promise-performance-benchmark/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Git","date":"2021-11-12 13:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h3>\n<ul><li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li></ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Git 官网 (<a href=\"https://git-scm.com/\">https://git-scm.com</a>).</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112204849.png\"></p>\n<p>点击页面中的 <code>Download For Windows</code> 下载 Windows 版本。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211507.png\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>，同意协议。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211528.png\"></p>\n<p>修改程序安装位置，点击 <code>Next</code>（直接装在 C 盘也不是不行）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211604.png\"></p>\n<p>组件选项，可选桌面快捷键、右键菜单、LFS 支持、自动检查更新等。</p>\n<p>点击 <code>Next</code> 进入下一步。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211609.png\"></p>\n<p>开始菜单文件夹名，保持默认就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211613.png\"></p>\n<p>默认编辑器，保持 Vim 就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211616.png\"></p>\n<p>环境变量，选择第 2 个，点击 <code>Next</code>。</p>\n<blockquote><p>如果选择第 1 个，则只能在 Git Bash 中使用，可能会出现问题</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211619.png\"></p>\n<p>剩下的都可以保持默认，一路 Next，然后点击 <code>Install</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211622.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211624.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211627.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211630.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211633.png\"></p>\n<p>等待安装完毕。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。</p>\n<p>（或是在开始菜单中找到 Git Bash）</p>\n<p>输入 <code>git --version</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/7ec315b7764cc.png\"></p>\n<p>大功告成！</p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-git/"},{"title":"前端时间国际化 101","date":"2021-10-14 15:58:23","description":"\n<blockquote>\n<p>时间只是幻觉。</p>\n<footer>—— 阿尔伯特·爱因斯坦</footer>\n</blockquote>\n<p>最近在开发一个需要完善国际化方案的前端项目，在处理时间国际化的时候遇到了一些问题。于是花了一些时间研究，有了这篇文章。不过由于网上关于 JavaScript 中 <code>Date</code> 对象的坑的文章已经一抓一大把了，<strong>因此这篇文章不是 JavaScript 中 <code>Date</code> 对象的使用指南，而是只专注于前端时间国际化。</strong></p>\n<h1>从时区说起</h1>\n<p>要想处理时间，UTC 是一个绕不开的名字。协调世界时（Coordinated Universal Time）是目前通用的世界时间标准，计时基于原子钟，但并不等于 TAI（国际原子时）。TAI 不计算闰秒，但 UTC 会不定期插入闰秒，因此 UTC 与 TAI 的差异正在不断扩大。UTC 也接近于 GMT（格林威治标准时间），但不完全等同。可能很多人都发现近几年 GMT 已经越来越少出现了，这是因为 GMT 计时基于地球自转，由于地球自转的不规则性且正在逐渐变慢，目前已经基本被 UTC 所取代了。</p>\n<blockquote><p>JavaScript 的 <code>Date</code> 实现不处理闰秒。实际上，由于闰秒增加的不可预测性，Unix/POSIX 时间戳完全不考虑闰秒。在闰秒发生时，Unix 时间戳会重复一秒。这也意味着，一个时间戳对应两个时间点是有可能发生的。</p></blockquote>\n<p>由于 UTC 是标准的，我们有时会使用 UTC+/-N 的方式表达一个时区。这很容易理解，但并不准确。中国通行的 <code>Asia/Shanghai</code> 时区<strong>大部分</strong>情况下可以用 UTC+8 表示，但英国通行的 <code>Europe/London</code> 时区并不能用一个 UTC+N 的方式表示——由于夏令时制度，<code>Europe/London</code> 在夏天等于 UTC+1，在冬天等于 UTC/GMT。</p>\n<blockquote><p>一个时区与 UTC 的偏移并不一定是整小时。如 <code>Asia/Yangon</code> 当前为 UTC+6:30，而 <code>Australia/Eucla</code> 目前拥有奇妙的 UTC+8:45 的偏移。</p></blockquote>\n<p>夏令时的存在表明<strong>时间的表示不是连续的</strong>，时区之间的时差也并不是固定的，我们并不能用固定时差来处理时间，这很容易意识到。但一个不容易意识到的点是，时区还包含了其历史变更信息。中国目前不实行夏令时制度，那我们就可以放心用 UTC+8 来表示中国的时区了吗？你可能已经注意到了上一段中描述 <code>Asia/Shanghai</code> 时区时我使用了<strong>大部分</strong>一词。<code>Asia/Shanghai</code> 时区在历史上实行过夏令时，因此 <code>Asia/Shanghai</code> 在部分时间段可以使用 UTC+9 来表示。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1988-04-18 00:00:00')\r\n// Mon Apr 18 1988 00:00:00 GMT+0900 (中国夏令时间)</pre>\n<blockquote><p>夏令时已经够混乱了，但它实际上比你想象得更混乱——部分穆斯林国家一年有四次夏令时切换（进入斋月时夏令时会暂时取消），还有一些国家使用混沌的 15/30 分钟夏令时而非通常的一小时。</p></blockquote>\n<blockquote><p><strong>不要总是基于 <code>00:00</code> 来判断一天的开始。</strong>部分国家使用 0:00-1:00 切换夏令时，这意味着 23:59 的下一分钟有可能是 1:00。</p></blockquote>\n<p>事实上，虽然一天只有 24 个小时，但当前（2021.10）正在使用的时区有超过 300 个。<strong>每一个时区都包含了其特定的历史。</strong>虽然有些时区在现在看起来是一致的，但它们都包含了不同的历史。时区也会创造新的历史。由于政治、经济或其他原因，一些时区会调整它们与 UTC 的偏差（萨摩亚曾经从 UTC-10 切换到 UTC+14，导致该国 2011.12.30 整一天都消失了），或是启用/取消夏令时，甚至有可能导致一个时区重新划分为两个。因此，为了正确处理各个时区，我们需要一个数据库来存放时区变更信息。还好，已经有人帮我们做了这些工作。目前大多数 *nix 系统和大量开源项目都在使用 <a href=\"https://www.iana.org/time-zones\" rel=\"noopener\">IANA 维护的时区数据库</a>（IANA TZ Database），其中包含了自 Unix 时间戳 0 以来各时区的变更信息。当然这一数据库也包含了大量 Unix 时间戳 0 之前的时区变更信息，但并不能保证这些信息的准确性。IANA 时区数据库会定期更新，以反映新的时区变更和新发现的历史史实导致的时区历史变更。</p>\n<blockquote><p>Windows 不使用 IANA 时区数据库。微软为 Windows 自己维护了一套<a href=\"https://docs.microsoft.com/zh-cn/troubleshoot/windows-client/system-management-components/daylight-saving-time-help-support\" rel=\"noopener\">时区数据库</a>，这有时会导致在一个系统上合法的时间在另一系统上不合法。</p></blockquote>\n<p>既然我们不能使用 UTC 偏移来表示一个时区，那就只能为每个时区定义一个标准名称。通常地，我们使用 <code>/</code> 来命名一个时区。这里的城市一般为该时区中人口最多的城市。于是，我们可以将中国的通行时区表示为 <code>Asia/Shanghai</code>。也有一些时区有自己的别名，如太平洋标准时间 <code>PST</code> 和协调世界时 <code>UTC</code>。</p>\n<blockquote><p>时区名称使用城市而非国家，是由于国家的变动通常比城市的变动要快得多。</p></blockquote>\n<blockquote><p><strong>城市不是时区的最小单位。</strong>有很多城市同时处于多个时区，甚至澳大利亚<a href=\"https://en.wikipedia.org/wiki/Gold_Coast_Airport\" rel=\"noopener\">有一个机场</a>的跑道两端处于不同的时区。</p></blockquote>\n<h1>处理时区困难重重</h1>\n<p>几个月前的一天，<a href=\"https://milkice.me/\" rel=\"noopener\">奶冰</a>在他的 Telegram 频道里发了这样的一条消息：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\"><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\" alt=\"奶冰频道的消息\" width=\"500\" class=\"aligncenter size-medium wp-image-2490\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg 800w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-244x300.jpg 244w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-768x944.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\"></a>\n<p>你想的没错，这个问题正是由时区与 UTC 偏移的不同造成的。<code>Asia/Shanghai</code> 时区在 1940 年前后和 1986 年前后曾实行过夏令时，<strong>而夏令时的切换会导致一小时的出现和消失。</strong>具体来说，启用夏令时当天会有一个小时消失，如 2021.3.28 英国启用夏令时，1:00 直接跳到 3:00，导致 <code>2021-03-28 01:30:00</code> 在 <code>Europe/London</code> 时区中是不合法的；取消夏令时当天又会有一个小时重复，如 2021.10.31 英国取消夏令时，2:00 会重新跳回 1:00 一次，导致 <code>2021-10-31 01:30:00</code> 在 <code>Europe/London</code> 时区中对应了两个时间点。而在奶冰的例子中，<code>1988-04-10 00:46:50</code> 正好处于因夏令时启用而消失的一小时中，因此系统会认为此时间字符串不合法而拒绝解析。</p>\n<blockquote><p>你可能会注意到在历史上 1988.4.10 这一天 <code>Asia/Shanghai</code> 时区实际上是去掉了 1:00-2:00 这一小时而不是 0:00-1:00。上文问题更深层次的原因是，在 IANA TZDB 2018a 及更早版本中，IANA 因缺乏历史资料而设置了错误的夏令时规则，规则设定了夏令时交界于 0:00-1:00 从而导致上文问题发生。而随后社区<a href=\"http://mm.icann.org/pipermail/tz/2018-August/026760.html\" rel=\"noopener\">发现了更准确的史实</a>，因此 IANA 更新了数据库。上文的问题在更新了系统的时区数据库后便解决了。</p></blockquote>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\" alt=\"IANA TZDB 2018a 及之前版本的错误数据\" width=\"1750\" height=\"595\" class=\"aligncenter size-full wp-image-2491\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg 1750w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-300x102.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1024x348.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-768x261.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1536x522.jpg 1536w\" sizes=\"(max-width: 1750px) 100vw, 1750px\"></a>\n<p><span>IANA TZDB 2018a 及之前版本的错误数据</span></p>\n<p>再来考虑另一种情况。你的应用的某位巴西用户在 2018 年保存了一个未来时间 <code>2022-01-15 12:00</code>（按当时的规律那应该是个夏令时时间），不巧那时候你的应用是以格式化的时间字符串形式保存的时间。之后你发现巴西已经于 2019 年 4 月宣布彻底取消夏令时制度，那么 <code>2022-01-15 12:00</code> 这个时间对应的 Unix 时间戳发生了变化，变得不再准确，要正确处理这一字符串就需要参考这一字符串生成的时间（或生成时计算的 UTC 偏移）来做不同的处理。<strong>因此，应用从一开始就应该避免使用字符串来传输、存储时间，而是使用 Unix 时间戳。</strong>如果不得不使用字符串存储时间，请尽可能：</p>\n<ul>\n<li>使用 UTC 描述时间，你永远不会知道本地时区在未来会发生什么</li>\n<li>如果需要以当地时间描述时间，一定带上当前 UTC 偏移</li>\n</ul>\n<p>时区历史带来的问题往往意想不到而且远比想象得多。实际上时区历史数据非常详细而繁多且跨设备不一致，并没有简单而统一的处理方法。在需要严谨处理时区时可能需要在应用程序中内嵌一套各端统一的时区数据库，但这样的方案放在前端又会带来不少问题：</p>\n<ul>\n<li>体积过大。moment.js 曾经设计过<a href=\"https://github.com/moment/moment-timezone/blob/develop/data/packed/2021a.json\" rel=\"noopener\">一种简洁的 TZDB 表示</a>，但尽管已经尽可能压缩整个文件仍然达到了 180+KB。在性能优先的 Web 应用中这是不可接受的</li>\n<li>需要持续更新。时区数据一直在变动，需要在时区数据更新时尽快更新应用内的时区数据，这带来了额外的维护成本</li>\n</ul>\n<p>ES6 为我们带来了 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl\" rel=\"noopener\"><code>Intl</code> 命名空间</a>。在这里，JavaScript 运行时提供了不少时间相关的国际化能力。因此，在不使用额外数据的情况下准确处理时区是可能的，但这并不完美：</p>\n<ul>\n<li>各端不统一。浏览器提供的时区数据受浏览器版本、系统版本等可能变化，最新的时区更新可能无法快速反映到所有设备上</li>\n<li>实现复杂。<code>JavaScript</code> 中 <code>Date</code> 对象的不良设计导致实现完善的时区处理并不容易，且 <code>Intl</code> 命名空间下的对象实例化性能开销较大，需要额外优化</li>\n</ul>\n<blockquote><p><code>Intl</code> 命名空间下还有很多实用的国际化相关方法，值得我们另开一篇文章来讲讲了。</p></blockquote>\n<p>在真实开发中，这需要取舍。目前主流的 JavaScript 时间处理库都已转向浏览器内置方法，并在需要时通过 Polyfill 保证跨端一致性。在这篇文章中，我们将尝试在不使用第三方库的情况下实现基本的时间国际化处理。此外，还有一些诸如需要使用 Unix 时间戳才能正确地在各端交换时间等细节需要注意。</p>\n<h1>时区转换</h1>\n<p>JavaScript 中的 <code>Date</code> 并不是不包含时区信息——实际上，<code>Date</code> 对象表示的一定是当前时区。通过尝试：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1970-01-01T00:00:00Z')\r\n// Thu Jan 01 1970 08:00:00 GMT+0800 (中国标准时间)</pre>\n<p>就可以知道，JavaScript 运行时其实知道当前时区，并会在需要的时候将其他时区的时间转换为当前时区的时间。那么，如何将本地时间转换为其他时区的时间呢？从 <code>Date</code> 的角度看，这并不行，因为我们无法设置一个 <code>Date</code> 对象的时区。但我们可以“投机取巧”：将 <code>Date</code> 对象的时间加上/减去对应的时差，尽管 <code>Date</code> 对象仍然认为自己在本地时区，但这样不就可以正确显示了嘛！但我们会碰到上文提到的问题：时区之间的时间差并不固定，在没有额外数据的情况下很难正确计算。</p>\n<p>还好，ES6 基于 <code>Intl</code> 命名空间扩展了 <code>Date.prototype.toLocaleString()</code> 方法，使其可以接受时区参数并按指定时区格式化时间。如果你在搜索引擎中搜索如何使用 JavaScript 转换时区，你大概率会在 StackOverflow 上找到类似这样的答案：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const convertTimeZone = (date, timeZone) =&gt; {\r\n    return new Date(date.toLocaleString('en-US', { timeZone }))\r\n}\r\n\r\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\r\nconvertTimeZone(now, 'Europe/London') // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<p>很好理解，我们使用 <code>en-US</code> 的区域设置要求 JavaScript 运行时以我们指定的时区格式化时间，再将时间字符串重新解析为时间对象。这里的 <code>timeZone</code> 就是诸如 <code>Asia/Shanghai</code> 等的 IANA TZDB 时区名称。这个字符串确实需要自己提供，但这就是我们唯一需要自己准备的数据了！只要提供了时区名称，浏览器就会自动计算正确的时间，无需我们自行计算。</p>\n<blockquote><p>对于时区名称，你可以考虑使用 <a href=\"https://github.com/vvo/tzdb/\" rel=\"noopener\">@vvo/tzdb</a>。这是一个声称为自动更新的 IANA TZDB 的 JSON 导出，并已被数个大型项目使用。你可以从这个包中导出所有时区名称。</p></blockquote>\n<p>这个方法看起来还不错，对吧？但实际上，它有两个问题：</p>\n<ul>\n<li>指定了区域设置和时区的 <code>toLocaleString()</code> 实际上每次调用都会在 JavaScript 运行时中创建新的 <code>Intl.DateTimeFormat</code> 对象（在后文详述），而后者会带来昂贵的性能开销（在 Node 14 中，实例化一次会在 V8 中增加内存使用约 46.3Kb。但这是符合预期的，详见 <a href=\"https://bugs.chromium.org/p/v8/issues/detail?id=6528\" rel=\"noopener\">V8 Issue</a>）。因此，在密集调用的情况下需要考虑计算并缓存时差，并在一定时间后或需要时进行更新</li>\n<li>使用 <code>toLocaleString()</code> 并使用 <code>en-US</code> 区域设置格式化的默认时间格式类似于 <code>10/13/2021, 1:00:00 AM</code>。这可以被大部分浏览器正确解析，<strong>但这是不规范的，不同浏览器有可能产生不同结果。</strong>你也可以自行配置格式（同下文的 <code>Intl.DateTimeFormat</code>），但仍然无法构造出规范的字符串</li>\n</ul>\n<p>因此，更佳的方案是，我们需要建立一个可反复使用的格式化器以避免重复创建 <code>Intl.DateTimeFormat</code> 带来的额外开销，并需要手动构造出符合规范的时间字符串，并将其重新解析为 <code>Date</code> 对象。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const timeZoneConverter = (timeZone) =&gt; {\r\n    // 新建 DateTimeFormat 对象以供对同一目标时区重用\r\n    // 由于时区属性必须在创建 DateTimeFormat 对象时指定，我们只能为同一时区重用格式化器\r\n    const formatter = new Intl.DateTimeFormat('zh-CN', {\r\n        year: 'numeric',\r\n        month: '2-digit',\r\n        day: '2-digit',\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n        second: '2-digit',\r\n        hour12: false,\r\n        timeZone\r\n    })\r\n    return {\r\n        // 提供 conver 方法以将提供的 Date 对象转换为指定时区\r\n        convert (date) {\r\n            // zh-CN 的区域设置会返回类似 1970/01/01 00:00:00 的字符串\r\n            // 替换字符即可构造出类似 1970-01-01T00:00:00 的 ISO 8601 标准格式时间字符串并被正确解析\r\n            return new Date(formatter.format(date).replace(/\\//g, '-').replace(' ', 'T').trim())\r\n        }\r\n    }\r\n}\r\n\r\nconst toLondonTime = timeZoneConverter('Europe/London') // 对于同一时区，此对象可重用\r\n\r\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\r\ntoLondonTime.convert(now) // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<blockquote><p>目前 <code>zh-CN</code> 的区域设置会产生类似 <code>1970/01/01 00:00:00</code> 的格式化字符串。这一格式目前跨端一致，但由于规范没有指定时间格式，<strong>这个格式在未来有可能变更。</strong>更好的方案是使用 <code>formatToParts()</code> 方法（在后文详述）获取时间字符串的各部分并手动拼接出标准格式的字符串，但在这个例子中直接 <code>replace</code> 拥有更好的性能。</p></blockquote>\n<p>现在，尝试反复转换时间至同一时区 1000 次，耗时从 <code>toLocaleString()</code> 1.5 秒降低到了 0.04 秒。尽管代码长了点，但这次重写在最好的情况下为我们带来了超过 20 倍的性能提升。</p>\n<p>需要注意的是，虽然这看起来就算最终方案了，但这个方案依然不完美。主要有以下两个问题：</p>\n<ul>\n<li>在需要密集转换为不同时区时，由于无法重用格式化器，性能依然较差且难以进一步优化</li>\n<li>由于 <code>Intl.DateTimeFormat</code> 不支持格式化毫秒，在格式化字符串的过程中毫秒会丢失，导致最终结果可能会与期望结果产生最高 999ms 的误差，需要额外处理。比如需要计算时差时，我们可能需要这么写：\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const calcTimeDiff = (date, converter) =&gt; {\r\n    const secDate = date - date.getMilliseconds() // 去掉毫秒，避免转换前后精度差异\r\n    return converter.convert(new Date(secDate), tzName) - secDate\r\n}\r\n\r\ncalcTimeDiff(new Date(), timeZoneConverter('Europe/London')) // -25200000</pre>\n</li>\n</ul>\n<p>无论如何，在折腾一番后我们还是把时区正确转换了。接下来准备格式化时间字符串了吗？不过在此之前，我们得先来聊聊语言、文字和区域。</p>\n<h1>语言文字区域傻傻分不清</h1>\n<blockquote><p>如何在计算机中表示中文？</p></blockquote>\n<p>“这不简单，”你可能会说，“用 <code>zh</code> 啊。”</p>\n<blockquote><p>那简体中文呢？</p></blockquote>\n<p>“<code>zh-CN</code>。”你或许会说出这个答案。</p>\n<blockquote><p>那用于新加坡的简体中文和用于中国大陆的简体中文该如何区分呢？</p></blockquote>\n<p>嗯……好问题。</p>\n<p>要能正确区分不同的简体中文，我们还得先回到定义上。实际上，“国际化”并不只是语言的翻译而已，国际化包含的是一整套对于各个<strong>区域</strong>的本地化方案。要准确表示一个国际化方案，我们实际至少需要确定三个属性：语言（Language）、文字（Script）和区域（Locale）。</p>\n<ul>\n<li>\n<strong>语言</strong>通常指的是<strong>声音语言</strong>。不同的语言都有一套自己的发音规则，很难互通。如中文和英语都属于语言</li>\n<li>\n<strong>文字</strong>对应的是某个语言的书写方式，同样的语言可能会有多种书写方案。如中文主要有简体和繁体两种书写方案</li>\n<li>\n<strong>区域</strong>指国际化面向的地区，相同的语言和文字，在不同地区也有可能会有不同的使用习惯。如新加坡和中国大陆都使用简体中文，但两地的用词习惯等有些许差异</li>\n</ul>\n<p>只有确定了这三个属性，我们才能正确定义一个国际化方案（或者说<strong>区域设置</strong>）。当然，还有很多其他属性可以更准确的表达某个区域设置，但通常有语言、文字和区域就已经足够了。</p>\n<p>于是，基于 <a href=\"https://tools.ietf.org/rfc/bcp/bcp47.txt\" rel=\"noopener\">BCP 47</a>，我们可以知道：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN = 中文普通话-简体-中国大陆\r\ncmn-Hans-SG = 中文普通话-简体-新加坡\r\ncmn-Hant-TW = 中文普通话-繁体-台湾\r\nyue-Hant-HK = 中文粤语-繁体-香港</pre>\n<p>等等，这都是啥？还有 BCP 47 又是啥？BCP 是 IETF 发布的“最佳当前实践”文档，而 BCP 47 是一些国际化相关的 ISO 和备忘录的集合，也是目前事实上由 HTML 和 ECMAScript 所使用的表达区域设置的标准。BCP 47 定义的区域设置标签实际上比较复杂，但对于大部分简单使用情况，上文示例中的格式已经完全够用了。简单来说，<strong>要表达一个区域设置，我们会使用 <code>语言[-文字][-区域]</code> 的格式，而文字和区域都是可选的。</strong>而对于每个部分的具体代码，BCP 47 也有做具体定义。其中：</p>\n<ul>\n<li>语言使用 ISO 639-1 定义的两位字母代码（如中文为 <code>zh</code>，英文为 <code>en</code>）或 <a href=\"https://iso639-3.sil.org/code_tables/639/data\" rel=\"noopener\">ISO 639-2/3</a> 定义的三位字母代码（如中文普通话为 <code>cmn</code>，英文为 <code>eng</code>），通常小写</li>\n<li>文字使用 <a href=\"https://unicode.org/iso15924/iso15924-codes.html\" rel=\"noopener\">ISO 15924</a> 定义的四位字母代码，通常首字母大写。如简体中文是 <code>Hans</code>，繁体中文是 <code>Hant</code>\n</li>\n<li>区域通常使用 <a href=\"https://www.iso.org/iso-3166-country-codes.html\" rel=\"noopener\">ISO 3166-1</a> 定义的两位字母代码，通常大写，如中国大陆为 <code>CN</code>，英国为 <code>GB</code>\n</li>\n</ul>\n<blockquote><p>ISO 639-1/2/3 的关系实际是：ISO 639-1 是最早制定的规范，使用两位字母表示语言，但语言数量之多并不能只用两位代码表示。因此后来修订了 ISO 639-2 和 3，使用三位字母表示了更多语言。通常 639-1 代码和 ISO-2/3 代码是一对多的关系。如中文 <code>zh</code> 其实是中文普通话 <code>cmn</code> 的宏语言（macrolanguage），同样使用 <code>zh</code> 为宏语言的语言还有 <code>wuu</code>（中文吴语）、<code>hak</code>（中文客家话）、<code>yue</code>（中文粤语）等数十种。<strong>从规范上我们现在应该使用 ISO 639-2/3 代码来替代 ISO 639-1 代码了</strong>，但由于历史阻力和真实需求中分类无需如此细致等原因，<strong>使用 ISO 639-1 指定语言仍然非常常见而且完全可以接受。</strong>此外，特别地，我们在 ISO 639-3 中定义未指明的语言为 <code>und</code>。</p></blockquote>\n<p>因此，对于这一节开头的两个问题，在 BCP 47 中正确答案其实是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">zh = 中文\r\ncmn = 中文普通话\r\n\r\nzh-Hans = 中文-简体\r\ncmn-Hans = 中文普通话-简体</pre>\n<p>而 <code>zh-CN</code> 实际是指在中国大陆使用的中文，当然也包含在中国大陆使用的繁体中文。<strong>不过，由于大部分情况下一个区域只会通用一种文字，很多情况下我们可以忽略文字这一项</strong>，即使用 <code>zh-CN</code>（或者 <code>cmn-CN</code>）来表示中国大陆的简体中文普通话——毕竟在大部分业务中在中国大陆使用繁体和非普通话的情况非常少。</p>\n<blockquote><p>事实上，类似 <code>zh-Hans</code> 和 <code>zh-Hant</code> 开头的区域设置名称已经被标记为 <code>redundant 废弃</code>，因此尽可能只使用 <code>zh-CN</code> 或者 <code>cmn-Hans-CN</code> 这样的区域设置名称。所有区域设置名称的列表可以在 <a href=\"https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry\" rel=\"noopener\">IANA</a> 找到。</p></blockquote>\n<p>现在我们可以准确定义一个区域设置了。不过我们还有一些小小的需求。比如我们想在 <code>cmn-Hans-CN</code> 的区域设置中使用农历来表示日期，但显然我们上文定义的表示方法并不能表达这一需求。好在，Unicode 为 BCP 47 提供了 u 扩展。在区域设置名称后面加上 <code>-u-[选项]</code> 就可以表达更细致的变体了。所以我们有：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN-u-ca-chinese = 中文普通话-简体-中国大陆-u-日历-中国农历\r\njpn-Jpan-JP-u-ca-japanese = 日语-日文汉字/平假名/片假名-日本-u-日历-日本日历\r\ncmn-Hans-CN-u-nu-hansfin = 中文普通话-简体-中国大陆-u-数字-简体大写数字</pre>\n<p>u 扩展的具体可选项可以在 <a href=\"https://www.unicode.org/reports/tr35/tr35-21.html#Unicode_locale_identifier\" rel=\"noopener\">Unicode 网站</a>上找到。而多个 u 扩展还可以连接——于是我们甚至可以写出 <code>cmn-Hans-CN-u-ca-chinese-nu-hansfin</code> 这种丧心病狂的区域设置名称。当然，相信你现在已经可以看懂这个区域设置的意思了。</p>\n<blockquote><p>不同地区可能会有不同的日历使用习惯，如中国有使用农历的需求，泰国有使用佛历的需求，我们可以通过 u 扩展指定不同的日历。不过，大部分情况下我们会使用标准的 ISO 8601 日历（gregory），JavaScript 的 <code>Date</code> 对象也只支持这种日历。</p></blockquote>\n<blockquote><p>你可以使用 <a href=\"https://r12a.github.io/app-subtags/\" rel=\"noopener\">BCP47 language subtag lookup</a> 工具快速检查你编写的 BCP 47 区域标签是否规范。</p></blockquote>\n<p>终于我们可以正确表达一个完美符合我们需求的区域设置了。接下来，让我们开始格式化时间吧。</p>\n<h1>格式化时间</h1>\n<p>这题我会！</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const formatDate(date) =&gt; {\r\n    return `${date.getFullYear()}-${`${date.getMonth() + 1}`.padStart(2, '0')}-${`${date.getDate()}`.padStart(2, '0')} ${`${date.getHours()}`.padStart(2, '0')}:${`${date.getMinutes()}`.padStart(2, '0')}:${`${date.getSeconds()}`.padStart(2, '0')}`\r\n}\r\n\r\nformatDate(new Date()) // 2021-10-13 01:00:00</pre>\n<p>就完事了……吗？先不论这样的格式化代码难以阅读，尽管上文这样的日期格式国际通用，<strong>但并非所有区域都习惯于这样的日期表示方法。</strong>比如英语国家/地区在很多时候习惯在日期中加入星期，而阿拉伯语国家/地区在部分情况下习惯使用阿拉伯语数字（而非常用的阿拉伯-印度数字）；再比如美式英语国家/地区习惯月-日-年的日期表示法，而英式英语国家/地区习惯日-月-年的日期表示法……不同区域在时间表示格式习惯上的差异是巨大的，<strong>我们很难通过一个简单的方法来正确地、国际化地格式化一个日期。</strong></p>\n<p>好在 ES6 早就为我们铺平了道路。还记得上文提到过的 <code>Intl.DateTimeFormat</code> 吗？我们通过它来实例化一个日期格式化器并用进行日期的国际化。</p>\n<p>直接来看例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const options = {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    weekday: 'long'\r\n}\r\nconst now = new Date()\r\n\r\nconst enUSFormatter = new Intl.DateTimeFormat('en-US', options)\r\n\r\nconst zhCNFormatter = new Intl.DateTimeFormat('zh-CN', options)\r\nconst zhCNAltFormatter = new Intl.DateTimeFormat('zh-CN-u-ca-chinese', options)\r\nconst zhCNAlt2Formatter = new Intl.DateTimeFormat('zh-CN-u-ca-roc-nu-hansfin', options)\r\n\r\nconst jaFormatter = new Intl.DateTimeFormat('ja', options)\r\nconst jaAltFormatter = new Intl.DateTimeFormat('ja-JP-u-ca-japanese', options)\r\n\r\nconst arEGFormatter = new Intl.DateTimeFormat('ar-EG', options)\r\n\r\nenUSFormatter.format(now) // Wednesday, Oct 13, 2021\r\n\r\nzhCNFormatter.format(now) // 2021年10月13日星期三\r\nzhCNAltFormatter.format(now) // 2021辛丑年九月8星期三\r\nzhCNAlt2Formatter.format(now) // 民国壹佰壹拾年拾月拾叁日星期三\r\n\r\njaFormatter.format(now) // 2021年10月13日水曜日\r\njaAltFormatter.format(now) // 令和3年10月13日水曜日\r\n\r\narEGFormatter.format(now) // الأربعاء، ١٣ أكتوبر ٢٠٢١</pre>\n<blockquote><p>在这里我们使用 ISO 639-1 代码来表示语言，是由于事实上 ISO 639-1 代码更加常见与通用。在大部分支持 <code>Intl.DateTimeFormat</code> 的 JavaScript 运行时中我们也可以使用 ISO 639-2/3 代码来表示语言（但实际会 fallback 至对应的 ISO 639-1 代码）。</p></blockquote>\n<blockquote><p>你也可以通过在 <code>options</code> 中设置 <code>calendar</code> 属性和 <code>numberingSystem</code> 属性来替换区域设置名称中对 u 扩展的使用。这也是推荐方式。</p></blockquote>\n<p>这非常直观，我们可以指定区域设置和格式化选项来初始化一个格式化器，并在之后使用格式化器对象的 <code>format</code> 方法来格式化一个 <code>Date</code> 对象。这里的格式化选项其实非常灵活，能格式化的不只是日期，时间也可以被灵活地格式化，有非常多的组合可以选择。我们不会在这里详细解释每一个选项，你可以访问 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\" rel=\"noopener\">MDN 文档</a>来了解更多。</p>\n<blockquote><p>如前文所述，<code>Intl.DateTimeFormat</code> 无法格式化毫秒。</p></blockquote>\n<p>不过需要注意的是，<strong>JavaScript 运行时不一定支持所有区域设置，也不一定支持所有格式化选项。</strong>在遇到不支持的情况时，<code>Intl.DateTimeFormat</code> 默认会静默 fallback 到最匹配的支持项，因此在处理不常见的区域设置或选项时，你可能需要再额外检查。你可以通过 <code>Intl.DateTimeFormat.supportedLocalesOf()</code> 静态方法判断当前运行时是否支持指定的区域设置，也可以在实例化格式化器后在对象上调用 <code>resolvedOptions()</code> 方法来检查运行时的解析结果是否与预期一致。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('yue-Hant-CN').resolvedOptions()\r\n// {locale: 'zh-CN', calendar: 'gregory', …}\r\n// fallback 至 zh-CN，与 yue-CN 的预期不一致</pre>\n<p>此外，正如你所看到的，各种语言在日期格式化中使用的文本 JavaScript 运行时都已经帮我们内置了。因此，我们甚至可以利用这些国际化特性来为我们的应用减少一点需要翻译的字符串——打包进应用的翻译越少，应用体积也就越小了嘛——比如说获取一周七天对应的名字：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getWeekdayNames = (locale) =&gt; {\r\n     // 基于一个固定日期计算，这里选择 1970.1.1\r\n     // 不能使用 0，因为 Unix 时间戳 0 在不同时区的日期不一样\r\n    const base = new Date(1970, 0, 1).getTime()\r\n    const formatter = new Intl.DateTimeFormat(locale, { weekday: 'short' })\r\n    return Array.from({ length: 7 }, (_, day) =&gt; (\r\n        formatter.format(new Date(base + 3600000 * 24 * (-4 + day))) // 1970.1.1 是周四\r\n    ))\r\n}\r\n\r\ngetWeekdayNames('en-US') // ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\r\ngetWeekdayNames('zh-CN') // ['周日', '周一', '周二', '周三', '周四', '周五', '周六']\r\ngetWeekdayNames('ja') // ['日', '月', '火', '水', '木', '金', '土']\r\ngetWeekdayNames('ar-EG') // ['الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت']</pre>\n<p>当然，如果你还是不喜欢运行时为你提供的格式，我们还有上文提到过的 <code>formatToParts()</code> 方法可以用。来看一个简单的例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('zh-CN', {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    weekday: 'long',\r\n    hour: 'numeric',\r\n    minute: 'numeric',\r\n    second: 'numeric',\r\n}).formatToParts(new Date())\r\n// [\r\n//     { type: 'year', value: '2021' },\r\n//     { type: 'literal', value: '年' },\r\n//     { type: 'month', value: '10' },\r\n//     { type: 'literal', value: '月' },\r\n//     { type: 'day', value: '13' },\r\n//     { type: 'literal', value: '日' },\r\n//     { type: 'weekday', value: '星期三' },\r\n//     { type: 'literal', value: ' ' },\r\n//     { type: 'dayPeriod', value: '上午' },\r\n//     { type: 'hour', value: '1' },\r\n//     { type: 'literal', value: ':' },\r\n//     { type: 'minute', value: '00' },\r\n//     { type: 'literal', value: ':' },\r\n//     { type: 'second', value: '00' }\r\n// ]</pre>\n<p>随后，你就可以自己解析这个数组来构造出你想要的时间格式了。最后，我们还可以使用 <code>Intl.RelativeTimeFormat</code> 来格式化相对日期。当然我们不会在这里详细讲解这个 API，你可以参考 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat\" rel=\"noopener\">MDN 文档</a>。直接来看一个简单例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getRelativeTime = (num, unit, locale) =&gt; {\r\n    return new Intl.RelativeTimeFormat(locale, { numeric: 'auto' }).format(num, unit)\r\n}\r\n\r\ngetRelativeTime(-3, 'day', 'en-US') // 3 days ago\r\ngetRelativeTime(-1, 'day', 'zh-CN') // 昨天\r\ngetRelativeTime(0, 'second', 'zh-CN') // 现在\r\ngetRelativeTime(3, 'hour', 'ja') // 3 時間後</pre>\n<blockquote><p><code>Intl.RelativeTimeFormat</code> 是一个相对较晚进入标准的对象，因此浏览器支持程度较差，可能需要使用 <a href=\"https://formatjs.io/docs/polyfills/intl-relativetimeformat\" rel=\"noopener\">Polyfill</a>。不过目前（2021.10）主流浏览器的最新版本均已支持此 API。</p></blockquote>\n<h1>未来</h1>\n<p>我希望这篇文章时区转换的部分可以很快过时——这并非无稽之谈，目前（2021.10）TC39 的 <a href=\"https://github.com/tc39/proposal-temporal\" rel=\"noopener\"><code>Temporal</code> 提案</a>已经进入 Stage 3 了。<strong><code>Temporal</code> 提案定义了一个新的、时区友好的 <code>Temporal</code> 命名空间，并期望在不久后就能进入标准并最终应用于生产环境。</strong><code>Temporal</code> 定义了完整的时区、时间段、日历规则的处理，且拥有简单明了的 API。那时候，JavaScript 的时区处理就不会再如此痛苦了。由于目前 <code>Temporal</code> 提案还未进入标准，API 暂未稳定，我们无法将其用于生产环境，但我们可以来看一个简单的例子感受一下这个 API 的强大。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const zonedDateTime = Temporal.ZonedDateTime.from({\r\n  timeZone: 'America/Los_Angeles',\r\n  year: 1995,\r\n  month: 12,\r\n  day: 7,\r\n  hour: 3,\r\n  minute: 24,\r\n  second: 30,\r\n  millisecond: 0,\r\n  microsecond: 3,\r\n  nanosecond: 500,\r\n  calendar: 'iso8601'\r\n}) // 1995-12-07T03:24:30.0000035-08:00[America/Los_Angeles]</pre>\n<p>如果你希望立刻开始使用 <code>Temporal</code>，现在已有 Polyfill 可用。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"js-temporal\" data-mdxgithubp=\"temporal-polyfill\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/js-temporal/temporal-polyfill\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>不过，时区问题不会消失，各地区的习惯也很难融合到一起。时间的国际化处理是<a href=\"https://yourcalendricalfallacyis.com/\" rel=\"noopener\">极其复杂</a>的，前端中的时间国际化仍然值得我们认真关注。</p>\n","link":"https://flyhigher.top/develop/2482.html"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 12:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 4分8秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量...</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板...）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/209138/1/18651/50218/622032acEf83a8d68/fc6db86aebb679ff.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。macOS 系统代理的行为和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：...</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/207910/19/18573/59096/622032b0E05c1d4be/5d89d557f7889730.jpg\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。M1 芯片的性能如何？本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？...</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/138186/40/23101/50775/622032b3Efa9053d7/df3a819d044a9455.jpg\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote>\n<p>题图来自 USTC Hackergame 2019「Happy LUG」</p>\n</blockquote>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/90743/25/22680/55545/622032abE6ef31d51/cfc4cb389c994c17.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"\n<p>WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将其表述为 \"An API for accessing Public Key Credentials\"，即“一个用于访问公钥凭证的 API”。WebAuthn 很强大，强大到被认为是 Web 身份认证的未来（当然，也很复杂）。你有想过通过指纹或者面部识别来登录网站吗？WebAuthn 就能在保证安全和隐私的情况下让这样的想法成为现实。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\" alt=\"通过 WebAuthn 调起 Windows Hello 登录网站\" width=\"1912\" height=\"966\" class=\"aligncenter size-full wp-image-2215\"></a>\n<p>你可以在<a href=\"https://webauthn.io/\" rel=\"noopener\">这个网站</a>自行体验 WebAuthn。或者，如果你有一个使用 WordPress 的站点，可以尝试一下 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WP-WebAuthn</a> 这款插件，它可以为你的站点启用 WebAuthn 登录。这是我为了写这篇文章而练手开发的插件，本文中的部分示例代码也来自这款插件。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"wp-webauthn\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/wp-webauthn\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>WebAuthn Level 1 标准已在 2019 年 3 月成为 W3C 推荐标准，而 Level 2 标准目前也已进入编辑草案阶段，但互联网上有关它的中文资料却仍然很少，国内也鲜有网站支持这一新标准。于是，在抱着各种英文资料和标准啃了几天以后，我折腾出了这篇文章。</p>\n<p>在这篇文章里，我将会从最基本的概念开始，逐渐深入 WebAuthn，直到解码公钥等深层细节。这可能是你能找到的有关 WebAuthn 最详细最基础的中文文章，也很可能是最长的。在开始之前，<strong>我强烈建议你打开菜单中的文章目录浏览一遍，以对这篇文章涉及的内容有所了解。</strong>如果你只是想了解如何简单地在你的项目中添加对 WebAuthn 的支持，那么“<a href=\"https://flyhigher.top/#webauthn-overview\">浅谈 WebAuthn</a>”部分就是你要找的；如果你想了解更多关于 WebAuthn 的底层细节，那么你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分。</p>\n<p>由于在本文写作时 WebAuthn Level 2 规范尚未定稿，<strong>这篇文章我们将只专注于 Level 1 规范。</strong></p>\n<p>这篇文章最后更新于 2020.9 ，在你读到这篇文章时，部分事实可能已经发生改变，请注意判断。</p>\n<p><strong>更新日志：</strong></p>\n<ul>\n<li>2021.1.16 添加 Chrome 开发工具信息</li>\n<li>2020.9.17 更新 iOS/iPad OS 兼容性信息</li>\n<li>2020.5.20 添加部分无用户名认证的平台兼容性内容</li>\n<li>2020.5.15 添加部分 <code>extensions</code> 相关内容与链接；添加全局凭证 ID 唯一内容；添加凭证 ID 查找相关内容；添加“从 U2F 认证迁移”一节</li>\n<li>2020.4.13 更新与修正 <code>userVerification</code> 相关内容；添加部分 Firefox 相关内容</li>\n<li>2020.3.23 文章发布</li>\n</ul>\n<p>那么让我们开始吧。<span></span></p>\n<h1>浅谈 WebAuthn</h1>\n<p>在这个部分里，我们将会从基础概念开始，了解有关 WebAuthn 和密码学的一些基础知识，并最终使用第三方库实现基础的 WebAuthn 认证。如果你已经对这些内容有所了解了，可以跳到“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”继续阅读。</p>\n<h2>为什么使用 WebAuthn</h2>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\" alt=\"钓鱼邮件\" width=\"709\" height=\"693\" class=\"aligncenter size-full wp-image-2162\"></a>\n<p>相信你一定收到过类似的邮件吧？只要你点进那个最显眼的链接，你就会进入一个设置好的圈套——钓鱼网站。如果你一时糊涂在这类网站上填写了你的账号和密码，bingo，你的账号就不再是你的账号了。</p>\n<p>不过，就算你警惕心再强，也无法避免密码泄露事件。Twitter, Facebook 等都爆出过明文密码泄露事件，证明再大的公司或组织也无法避免密码泄露问题。雪上加霜的是，很大一部分用户都非常喜欢使用重复密码，这就导致一次密码泄露会牵连很多网站，用户的账户安全性完全无法得到保证。</p>\n<p>那么，有什么办法解决这些问题吗？<strong>彻底解决的方法只有一个，那就是抛弃密码。</strong>可是没有密码还怎么验证用户身份呢？这就是 WebAuthn 的用武之地了。</p>\n<p><del>没有密码的好时代，来临力！</del></p>\n<h2>什么是 WebAuthn</h2>\n<p>那么到底什么是 WebAuthn 呢？如开头所说，WebAuthn 是“一个用于访问公钥凭证的 API”，网站可以通过这个 API 进行一些高安全性的身份验证。WebAuthn 一个最常见的应用就是用于网站登录时的 2FA（双重因素验证）甚至是无密码登录。通过网页调用 WebAuthn，在不同平台下，<strong>我们可以实现通过 USB Key、指纹、面部甚至虹膜扫描来认证身份，同时确保安全和隐私。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\" alt=\"WebAuthn 可使用的各种身份认证方式\" width=\"1294\" height=\"566\" class=\"aligncenter size-full wp-image-2213\"></a>\n<p>WebAuthn 标准是 FIDO2 标准的一部分，而 FIDO2 则是由 FIDO 联盟和 W3C 共同推出的 U2F（现称作 FIDO1）的后继标准，旨在增强网络认证的安全性。</p>\n<blockquote><p>你可能了解过 U2F，那么 U2F 和 FIDO2 的区别在哪里呢？从名字上可以看出，U2F，即“通用第二因素协议”，是专注于作为密码后的第二道屏障的，而 FIDO2 增加了单因素认证功能，这意味着使用 FIDO2 可以完全替代密码，真正实现无密码登录。</p></blockquote>\n<p>FIDO2 标准主要包括四个部分，其一是用于网站和访客设备交互的 WebAuthn，而 Client to Authenticator Protocol 2（CTAP2，客户端-认证器协议）作为 WebAuthn 的补充，则是用于访客的设备和认证器交互的协议。标准的其他两个部分则是 U2F 和 UAF 规范。在这篇文章中，我们只关心 WebAuthn，不会涉及 CTAP, U2F 和 UAF 的相关知识。如果你对这段话中的一些概念不了解，不要紧张，接下来我们就来谈谈 WebAuthn 中一些常用的术语和概念。</p>\n<blockquote><p>WebAuthn 只能在安全上下文中使用，也就是说，页面需要使用 HTTPS 协议或是处于 <code>localhost</code> 中。</p></blockquote>\n<h2>常用术语和概念</h2>\n<p>WebAuthn 中有许多不常碰到的术语，不过我只会在这里介绍一些常用的术语和概念——如果你只是希望做出一个简单的实现，那么了解这一段中的一些概念就足够了。同时，由于我实在没能找到一部分术语的通用翻译，有一些术语我按着自己的理解尽可能地翻译了，有任何问题请告诉我。</p>\n<p>在一个完整的 WebAuthn 认证流程中，通常有这么几个角色：</p>\n<ul>\n<li>Relying Party 依赖方 (RP) ：指服务提供方，即网站</li>\n<li>User 用户：正准备登录的你</li>\n<li>Authenticator 认证器：通常指 USB Key 或是设备内置的指纹扫描器、虹膜扫描器、面部识别装置等，正是它们在使用流程中代替了密码甚至是用户名</li>\n<li>User Agent 用户代理：通常指浏览器或系统，负责与认证器交互</li>\n</ul>\n<p>认证过程通常分为两种：</p>\n<ul>\n<li>Registration Ceremony 注册仪式：用户向账户上添加认证器</li>\n<li>Authentication Ceremony 验证仪式：用户通过已注册的认证器验证身份</li>\n</ul>\n<p>同时，认证过程中还会产生这些内容：</p>\n<ul>\n<li>Challenge 挑战：通常是一串随机字符串</li>\n<li>Public Key Credential 公钥凭证：由认证器产生的凭证，在技术上代替了密码</li>\n<li>Attestation 证明：注册时认证器产生的验证数据</li>\n<li>Assertion 断言：验证时认证器产生的验证数据</li>\n</ul>\n<blockquote><p><strong>请注意区分证明 (Attestation) 和断言 (Assertion)</strong>，特别是在这两个单词有些相似的情况下。在 WebAuthn 中，它们是不同过程中的类似概念，但并不相同。</p></blockquote>\n<p>如果你对于这些内容不是很理解，没有关系，我们会在“<a href=\"https://flyhigher.top/#how-to-webauthn\">使用流程</a>”一节中将这些概念放到实际情况中解释，你只要先区分这些概念即可。</p>\n<h2>安全性的基础</h2>\n<p>WebAuthn 为什么安全？和 HTTPS 一样，WebAuthn 使用非对称加密的思路来保证安全性，但侧重点又有所不同。要理解 WebAuthn 的认证流程，我们必须对非对称加密有所了解。如果你对非对称加密比较熟悉了，就直接跳到下一段吧。</p>\n<p>WebAuthn 的核心在于“认证”，即保证产生了凭证的认证器是用户的认证器，而不是第三方在伪造凭证。但为什么要使用非对称加密呢？我们可以先来看看对称加密。</p>\n<p>让我们假设小明和小红相互写信，见不到对方。这天小红突然想，给自己写信的人是不是真的小明呢？于是小红要求对方向小红证明自己是小明。怎么证明呢？他们商量出来这么一套方案：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明和小红商量一个统一的密码和密钥</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明用提前和小红商量好的密码和密钥加密文本后发回给小红</li>\n<li>小红使用相同的密码和密钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和密钥</li>\n</ol>\n<blockquote><p>在密码学中，我们通常把“加密算法”称为密码 (code)，和通常登录时用的密码 (password) 并非同一个概念。</p></blockquote>\n<p>在这种情况下，<strong>只要密钥不泄露</strong>，即拥有正确密钥的只有小明和小红，那么小红就能确定对方一定是小明。但这样的问题也很明显，如果小明和小红不能见面，那么他们就必须先以明文交换密码——<strong>在这个过程中一旦有人窃取到了密码，这个认证就无效了。</strong></p>\n<p>这时我们就需要使用<strong>非对称加密</strong>来拯救破碎的信任了。非对称加密的基础是一对密钥，也就是公钥和私钥，它们是互相关联但（几乎）无法互相推导的。在非对称加密的过程中，选择相同的密码后，使用私钥加密明文得到的密文只能由对应的公钥解密，无法使用私钥解密，同时这个过程反过来也是成立的。</p>\n<blockquote><p>本文的核心并不是非对称加密算法，因此不会详述非对称加密在数学上的证明，若有兴趣可以自行了解。</p></blockquote>\n<p>这就完美解决密钥泄露的问题了。让我们回过头来看之前的例子。现在小明和小红决定使用非对称加密来证明身份，过程如下：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明提前生成一对公私钥，将公钥发送给小红，私钥自己保管，同时商量好统一的密码</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明使用商量好的密码和自己的私钥加密文本，发送给小红</li>\n<li>小红使用相同的密码和小明的公钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和私钥</li>\n</ol>\n<p>在这种情况下，<strong>只要私钥不泄露</strong>，那么小红解密得到的文本和之前发送的一致，那么就可以证明收到的密文一定是由小明加密后发送过来的。而在整个过程中，私钥都没有离开过小明，更没有经过传输，也就几乎没有泄露的可能了。这时，小红终于可以确定对面和她通信的人的确是小明了。</p>\n<p>题外话：HTTPS 虽然也应用了非对称加密，但 HTTPS 更侧重于“加密”而非“认证”，因此思路上会有些许差异。要了解关于 HTTPS 和非对称加密的更多信息，你可以阅读我之前写的这篇文章：</p>\n<p></p>\n<div class=\"mdx-post-cot\" data-mdxposturl=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdx-post-wait-out-c2\"><div class=\"mdx-post-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<span></span>\n<h2>使用流程</h2>\n<p>了解了非对称加密，我们就可以来看看 WebAuthn 的认证流程了。</p>\n<p>和普通的密码一样，<strong>使用 WebAuthn 分为两个部分，注册和验证。</strong>注册仪式会在依赖方中将认证器的一些信息和用户建立关联；而验证仪式则是验证这些信息以登确保是用户本人在登录。根据上一节的思路，我们可以知道，注册仪式就是认证器生成一对公私钥，然后将公钥交给依赖方；而验证仪式是依赖方发送给认证器一段文本，要求认证器用自己的私钥加密后发回以验证。</p>\n<p>在实际情况中，WebAuthn 是基于<strong>挑战-应答模型</strong>工作的。要更好地理解，我们直接来看具体流程。先来看看注册的流程。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\" alt=\"WebAuthn 注册流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2224\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的注册请求</li>\n<li>依赖方向浏览器发送挑战、依赖方信息和用户信息</li>\n<li>浏览器向认证器发送挑战、依赖方信息、用户信息和客户端信息以请求创建公钥凭证</li>\n<li>认证器请求用户动作，随后创建一对公私钥，并使用私钥签名挑战（即证明），和公钥一起交给浏览器</li>\n<li>浏览器将签名后的挑战和公钥发送给依赖方</li>\n<li>依赖方用公钥验证挑战是否与发送的一致，如果成功则将公钥与用户绑定，注册完成</li>\n</ol>\n<p>我也做了一个交互式的 Demo，你可以对照流程来更好地理解。</p>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\">开始注册</button> <span></span></p>\n<div></div>\n<blockquote><p>注意，这个 Demo 和下方的 Demo 都只是一个本地模拟的简单示例，没有任何数据会被上传，当然也不会对数据进行验证。</p></blockquote>\n<p>而之后的验证流程如下：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\" alt=\"WebAuthn 验证流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2226\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的验证请求</li>\n<li>依赖方向浏览器发送挑战</li>\n<li>浏览器向认证器发送挑战、依赖方信息和客户端信息以请求获取公钥凭证</li>\n<li>认证器请求用户动作，随后通过依赖方信息找到对应私钥，并使用私钥签名挑战（即断言），交给浏览器</li>\n<li>浏览器将签名后的挑战发送给依赖方</li>\n<li>依赖方用之前存储的公钥验证挑战是否与发送的一致，一致则验证成功</li>\n</ol>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\" disabled>开始验证</button> <span>在上方注册后才能验证</span></p>\n<div></div>\n<p>可以看到，WebAuthn 不仅在理论上是安全的，同时<strong>在整个过程中并没有隐私数据被传输</strong>——用户信息实际上只包含用户名和用户 ID。因此我们完全可以说 WebAuthn 是安全且私密的。</p>\n<blockquote><p>为了避免用户在不同依赖方之间被追踪，认证器通常会为每个依赖方和用户的组合都创建一对公私钥。不过，由于认证器的存储空间有限，认证器通常不会存储每一个私钥，而是会通过各类信息和烧录在认证器内的主密钥“算”出对应的私钥以实现无限对公私钥。具体算法根据不同厂商会有所不同。对于 Yubikey，你可以在<a href=\"https://developers.yubico.com/U2F/Protocol_details/Key_generation.html\">这里</a>了解更多。</p></blockquote>\n<blockquote><p>如果依赖方需要，用户同意后，发送给依赖方的公钥凭证中可以包含用于辨认认证器型号的信息，不过这对隐私的影响微乎其微。</p></blockquote>\n<h2>浏览器接口</h2>\n<p>要使用 WebAuthn，我们必须要依靠浏览器作为媒介和验证器进行交互，而这就需要浏览器对于 WebAuthn 的支持了。绝大多数新版本的现代浏览器都为 WebAuthn 提供了统一的接口，而在这一段中我们会了解如何使用相关的接口。但是在开始之前，我们可以先来看看浏览器的支持程度（2020.9）。</p>\n<div class=\"mdui-table-fluid\"><table class=\"mdui-table\">\n<thead><tr>\n<th>浏览器</th>\n<th>支持情况</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>桌面端 Chrome</td>\n<td>67+</td>\n</tr>\n<tr>\n<td>移动端 Chrome</td>\n<td>67+<sup>[1]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Firefox</td>\n<td>60+</td>\n</tr>\n<tr>\n<td>移动端 Firefox</td>\n<td>不支持<sup>[2]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Edge</td>\n<td>18+</td>\n</tr>\n<tr>\n<td>移动端 Edge</td>\n<td>不支持<sup>[3]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Safari</td>\n<td>13+</td>\n</tr>\n<tr>\n<td>移动端 Safari</td>\n<td>13.3+<sup>[4]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Opera</td>\n<td>54+</td>\n</tr>\n<tr>\n<td>移动端 Opera</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table></div>\n<p><sup>[1]</sup> 受平台限制，Chrome 在 iOS 平台上不支持 WebAuthn，在 Android 平台上支持大部分 WebAuthn 功能，但仍不支持部分特性（如 <code>userVerification</code>）。<br><sup>[2]</sup> 移动端 Firefox 80 以下的版本支持 WebAuthn 但似乎会忽略 <code>authenticatorAttachment</code> 等一部分参数，同时移动端 Firefox Beta 80 以下的版本支持 WebAuthn 但无法成功调用。自 80 版本起移动端 Firefox 暂时取消了对 WebAuthn 的支持（可能是 Bug）。<br><sup>[3]</sup> 移动端 Edge 似乎支持 WebAuthn 但无法成功调用。<br><sup>[4]</sup> Safari iOS/iPad OS 13 仅支持外部认证器，无法调用 Touch ID 或 Face ID；自 iOS/iPad OS 14 起 Safari 已支持全功能 WebAuthn，可以调用 Touch ID/Face ID</p>\n<p>当然，一众国产浏览器，包括 Samsung Browser 和 Yandex Browser，目前都不支持 WebAuthn。此外，由于 WebAuthn 涉及外部验证器和 TPM 可信平台模块等，用户的操作系统也会对 WebAuthn 的可用性造成影响。以下是一些需要注意的信息：</p>\n<ul>\n<li>Windows 10 1903 以下版本仅 Edge 能提供完整支持，其他浏览器只能使用 USB Key 等外部认证器；1903+ 中所有浏览器都可以通过 Windows Hello 带来完整的 WebAuthn 支持</li>\n<li>Android 需要安装并开启 Google 服务</li>\n<li>iOS/iPad OS 13.3 以下的版本不支持 WebAuthn，iOS/iPad OS 14 以下的版本支持有限（参考上文），iOS/iPad OS 14 开始 Safari 已支持全功能 WebAuthn（功能完整度甚至超过了 Android）</li>\n</ul>\n<p>可以看出，WebAuthn 的发展之路仍然很漫长，但好在桌面端对它的支持已经比较完善了，在一些情况下我们完全有理由使用它。</p>\n<hr>\n<p>来看看浏览器提供了怎么样的接口吧。要使用 WebAuthn，我们可以使用 <code>navigator.credentials.create()</code> 请求认证器生成公钥凭证和 <code>navigator.credentials.get()</code> 请求获取公钥凭证。</p>\n<blockquote><p>你或许已经对 Credential Management API 有所了解了。通过这些 API，我们还可以实现一些有趣的特性，不过这值得另开一篇文章来讲了。</p></blockquote>\n<p>对于一个基础的实现，<code>navigator.credentials.create()</code> 需要传入的参数如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        challenge,\r\n        rp: {\r\n            id,\r\n            name\r\n        },\r\n        user: {\r\n            id,\r\n            name,\r\n            displayName\r\n        },\r\n        pubKeyCredParams: [\r\n            {\r\n                type: \"public-key\",\r\n                alg\r\n            }\r\n        ],\r\n        authenticatorSelection: {\r\n            authenticatorAttachment,\r\n            userVerification\r\n        },\r\n        excludeCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>在 <code>navigator.credentials.create()</code> 方法中，我们必须传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值。这指明了我们需要创建公钥凭证，而非普通的密码凭证。然后，在 <code>publicKey</code> 对象中设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rp: Object</code>：依赖方信息，其中有一项为必须：\n<ul>\n<li>\n<code>rp.id: String</code>：（可选）依赖方 ID，必须为当前域名或为当前域名的子集的域名（不是子域名）。如域名为 <code>test.123.example.com</code>，则依赖方 ID 可以是 <code>test.123.example.com</code>, <code>123.example.com</code> 或 <code>example.com</code>。不指定则默认使用当前域名</li>\n<li>\n<code>rp.name: String</code>：依赖方名称，用于方便用户辨认</li>\n</ul>\n</li>\n<li>\n<code>user: Object</code>：用户信息，其中有三项为必须：\n<ul>\n<li>\n<code>user.id: Uint8Array</code>：转换为 <code>Uint8Array</code> 的字符串。<strong>出于安全考量，这应尽可能不与任何用户信息相关联，如不要包含用户名、用户邮箱等</strong>\n</li>\n<li>\n<code>user.name: String</code>：登录用户名</li>\n<li>\n<code>user.dispalyName: String</code>：用于显示的用户名称，显示与否的具体行为取决于浏览器</li>\n</ul>\n</li>\n<li>\n<code>pubKeyCredParams: Array</code>：一个算法列表，指明依赖方接受哪些签名算法。列表的每一项都是一个对象，拥有两个属性：\n<ul>\n<li>\n<code>pubKeyCredParams[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>pubKeyCredParams[].alg: Number</code>：一个负整数，用于标明算法。具体算法对应的数字可以在 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\">COSE</a> 找到</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection: Object</code>：（可选）用于过滤正确的认证器，这里介绍常用的一个参数：\n<ul>\n<li>\n<code>authenticatorSelection.authenticatorAttachment: String</code>：（可选）指定要求的认证器类型。如果没有满足要求的认证器，认证可能会失败。该参数可以为 <code>null</code>（表示接受所有类型的认证器）或是以下两个值之一：\n<ul>\n<li>\n<code>platform</code>：表示仅接受平台内置的、无法移除的认证器，如手机的指纹识别设备</li>\n<li>\n<code>cross-platform</code>：表示仅接受外部认证器，如 USB Key</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection.userVerification: String</code>：（可选）指定认证器是否需要验证“用户为本人 (User Verified, UV)”，否则只须“用户在场 (User Present, UP)”。具体验证过程取决于认证器（不同认证器的认证方法不同，也有认证器不支持用户验证），而对验证结果的处理情况则取决于依赖方。该参数可以为以下三个值之一：\n<ul>\n<li>\n<code>required</code>：依赖方要求用户验证</li>\n<li>\n<code>preferred</code>：（默认）依赖方希望有用户验证，但也接受用户在场的结果</li>\n<li>\n<code>discouraged</code>：依赖方不关心用户验证。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>excludeCredentials: Array</code>：（可选）用于标识要排除的凭证，可以避免同一个用户多次注册同一个认证器。如果用户试图注册相同的认证器，用户代理会抛出 <code>InvalidStateError</code> 错误。数组中的每一项都是一个公钥凭证对象，包含以下属性：\n<ul>\n<li>\n<code>excludeCredentials[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>excludeCredentials[].id: Uint8Array</code>：要排除的凭证 ID</li>\n<li>\n<code>excludeCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，超时后将强制终止 <code>create()</code> 并抛出错误。若不设置，将使用用户代理的默认值；若太大或太小，则使用最接近的用户代理默认值范围中的值。推荐值为 5000-120000</li>\n</ul>\n<blockquote><p>对于 <code>pubKeyCredParams</code>，通常我们只需添加 ES256 (alg: -7) 算法即可兼容大部分外部认证器，此外，再添加 RS256 (alg: -257) 算法即可兼容大部分平台内置认证器（如 Windows Hello）。当然，前端添加算法之后，后端也需要相应的算法支持。</p></blockquote>\n<blockquote><p>对于 <code>userVerification</code>，由于默认值 \"preferred\" 并不能很好地被所有设备支持，因此无论在 <code>create()</code> 中还是 <code>get()</code> 中不指定该参数都会在 Chrome 中触发一条警告。具体请参阅<a href=\"https://chromium.googlesource.com/chromium/src/+/master/content/browser/webauth/uv_preferred.md\">这个页面</a>。</p></blockquote>\n<p>调用 <code>create()</code> 之后，我们就可以拿到一个 <code>Promise</code>，并可以在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>create()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAttestationResponse {\r\n        attestationObject: ArrayBuffer(390) {},\r\n        clientDataJSON: ArrayBuffer(121) {}\r\n    },\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\",\r\n    type: \"public-key\"\r\n}</pre>\n<p>其中有：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 \"public-key\"</li>\n<li>\n<code>response: Object</code>：<code>AuthenticatorAttestationResponse</code> 对象，是 <code>PublicKeyCredential</code> 的主要部分，包含以下两个内容：\n<ul>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n<li>\n<code>response.attestationObject: ArrayBuffer</code>：CBOR 编码的认证器数据，包含凭证公钥、凭证 ID、签名（如果有）、签名计数等信息</li>\n</ul>\n</li>\n</ul>\n<p>然后将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串，我们就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证与注册了。具体怎么操作，我们会在下文详细讨论。当然，别忘了 <code>catch()</code> 注册过程中抛出的任何错误。</p>\n<blockquote><p>你可能会认为在所有情况下，注册时认证器都会对挑战进行签名。实际上在大部分情况下（同时也是默认情况），<strong>注册时认证器并不会对挑战进行签名</strong>，<code>attestationObject</code> 并不会包含签名后的挑战。只有依赖方明确要求证明且用户同意（部分浏览器要求）后认证器才会对挑战进行签名（具体实现据情况会有所不同）。对此，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion#Attestation\">MDN 解释道</a>“大部分情况下，用户注册公钥时我们会使用「初次使用时信任模型」(TOFU) ，此时验证公钥是没有必要的。”要了解更多关于证明的内容，请参阅“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>而对于 <code>navigator.credentials.get()</code>，我们可以传入如下的参数：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.get({\r\n    publicKey: {\r\n        challenge,\r\n        rpId,\r\n        userVerification,\r\n        allowCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>和 <code>create()</code> 一样，对于 <code>get()</code> 我们需要传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值，指明我们需要获取的是公钥凭证而非普通的密码凭证。在 <code>publicKey</code> 对象中我们可以设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rpID: String</code>：（可选）依赖方 ID，需要和注册认证器时的一致。规则和上述的 <code>rp.id</code> 一致，不指定默认使用当前域名</li>\n<li>\n<code>userVerification: String</code>：和上文一样，只是需要注意它这次不在 <code>authenticatorSelection</code> 中了</li>\n<li>\n<code>allowCredentials: Array</code>：（可选）用于标识允许的凭证 ID，使用户代理找到正确的认证器。只有符合这个列表中凭证 ID 的凭证才能被成功返回。数组中的每一项都是对象，包含以下属性：\n<ul>\n<li>\n<code>allowCredentials[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>allowCredentials[].id: Uint8Array</code>：允许的凭证 ID</li>\n<li>\n<code>allowCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，和上面的一样，推荐值为 5000-120000</li>\n</ul>\n<p>嗯，要传入的参数少多了。之后，和 <code>create()</code> 一样，调用 <code>get()</code> 之后，我们就可以拿到一个 <code>Promise</code> 并在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>get()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAssertionResponse {\r\n        authenticatorData: ArrayBuffer(37) {},\r\n        signature: ArrayBuffer(256) {},\r\n        userHandle: ArrayBuffer(64) {},\r\n        clientDataJSON: ArrayBuffer(118) {}\r\n    }\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\"\r\n    type: \"public-key\"\r\n}</pre>\n<p>这里的东西就比 <code>create()</code> 时拿到的要多了。看看我们拿到了什么吧：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 \"public-key\"</li>\n<li>\n<code>response: Object</code>：对于验证流程，认证会返回 <code>AuthenticatorAssertionResponse</code> 而不是 <code>AuthenticatorAttestationResponse</code> 对象，这个对象包含以下 4 个属性：\n<ul>\n<li>\n<code>response.authenticatorData: ArrayBuffer</code>：认证器信息，包含认证状态、签名计数等</li>\n<li>\n<code>response.signature: ArrayBuffer</code>：被认证器签名的 <code>authenticatorData</code> + <code>clientDataHash</code>（<code>clientDataJSON</code> 的 SHA-256 hash）</li>\n<li>\n<code>response.userHandle: ArrayBuffer</code>：<code>create()</code> 创建凭证时的用户 ID <code>user.id</code>。许多 U2F 设备不支持这一特性，这一项将会是 <code>null</code>\n</li>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n</ul>\n</li>\n</ul>\n<p>同样地，我们将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串后就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证了。至于具体怎么做，别急，马上就来讲一讲。</p>\n<h2>简单实现</h2>\n<p>了这么多，我们终于可以实现一个简单的 WebAuthn 认证页面了。由于在实际操作中 WebAuthn 相关的数据解码和密码计算比较复杂，在服务器端我们可以使用第三方库来帮我们做这些脏活累活，我们只需专注于具体流程就可以了。</p>\n<p>要寻找可用的第三方库，你可以在 <a href=\"https://webauthn.io/\">webauthn.io</a> 上找到适用于各种语言的第三方库——除了 PHP（笑）。不过好在你可以在 GitHub 上找到几个不错的 PHP WebAuthn 库，比如 <a href=\"https://github.com/web-auth/webauthn-framework\">web-auth/webauthn-framework</a>。</p>\n<p>在我们的这个例子中，我们关心的主要是前端逻辑；而后端我们可以使用各类几乎已经做到开箱即用的第三方库，这样我们可以专注于流程而不必关心细节。当然如果你想了解后端的解码细节，可以阅读“<a href=\"https://flyhigher.top/#webauthn-decode\">手动解个码</a>”一节。</p>\n<hr>\n<p>让我们先从注册开始吧。现在，用户点击了注册认证器的按钮，一个请求被发送给服务器（也就是依赖方）。在最简单的情况中，依赖方需要将三个内容发送给浏览器：<strong>挑战、用户信息和用户已注册的凭证 ID 列表（即 <code>excludeCredentials</code>）</strong>。当然依赖方也可以自由选择发送更多信息，只要最终前端能构建合法的参数即可。</p>\n<p>挑战最终会被转换为 <code>Uint8Array</code>，即一组 0-255 的整数。如果使用 PHP，在后端我们可以这样生成 Base64 编码的挑战：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$challenge = \"\";\r\nfor($i = 0; $i \n<p>对于用户信息，我们需要登录名、显示名称和 ID 三项内容。我们可以从数据库中取出用户信息，也可以新建一份。需要注意的是，<strong>出于安全和隐私的考量，ID 不应该包含用户的任何信息，比如用户邮箱等。</strong>推荐的做法是和挑战一样，生成一个随机字符串/一组随机数，并将其于用户关联起来以供之后使用。</p>\n<p>发送已注册的凭证 ID 列表是为了防止用户重复注册同一个认证器。正确设置该列表后，如果用户试图注册同一个认证器，浏览器会中止流程并抛出 <code>InvalidStateError</code>。</p>\n<p>最后，别忘了将挑战等一些后续可能会用到的信息临时存储起来。Session 就是一个很好的选择。</p>\n<p>将所有信息发送到浏览器之后，我们应该可以构建出新建凭证所需的参数了。由于有多个参数需要以 <code>Uint8Array</code> 的形式传入，我们可以准备一个简单的工具函数帮我们将 Base64 的字符串转为 <code>Uint8Array</code>。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function str2ab(str){\r\n    return Uint8Array.from(window.atob(str), c=&gt;c.charCodeAt(0));\r\n}</pre>\n<p>除了 <code>challenge</code>, <code>rp</code>, <code>user</code> 和 <code>excludeCredentials</code> 几部分需要你根据具体情况设置外，上文提到的其他参数一般可以这么设置：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">publicKey: {\r\n    challenge, // 自行设置\r\n    rp, // 自行设置\r\n    user, // 自行设置\r\n    pubKeyCredParams: [\r\n        {\r\n            type: \"public-key\",\r\n            alg: -7 // ES256\r\n        },\r\n        {\r\n            type: \"public-key\",\r\n            alg: -257 // RS256\r\n        }\r\n    ],\r\n    authenticatorSelection: {\r\n        userVerification: \"discouraged\",\r\n        authenticatorAttachment: null // 除非用户指定，大部分情况下无需指定\r\n    },\r\n    excludeCredentials, // 自行设置\r\n    timeout: 60000\r\n}</pre>\n<p>然后就是传入 <code>navigator.credentials.create()</code>，拿到 <code>PublicKeyCredential</code>。如果一切顺利，接下来我们就需要考虑如何将返回的内容传回依赖方了。由于我们拿到的很多都是 <code>ArrayBuffer</code>，我们需要将其进行编码。再准备一个工具函数吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function array2b64String(a) {\r\n    return window.btoa(String.fromCharCode(...a));\r\n}</pre>\n<p>然后适当处理，我们就可以得到一个方便传输的 JSON 字符串了：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({publicKey}).then((credentialInfo) =&gt; {\r\n    const publicKeyCredential = {\r\n        id: credentialInfo.id,\r\n        type: credentialInfo.type,\r\n        rawId: array2b64String(new Uint8Array(credentialInfo.rawId)),\r\n        response: {\r\n            clientDataJSON: array2b64String(new Uint8Array(credentialInfo.response.clientDataJSON)),\r\n            attestationObject: array2b64String(new Uint8Array(credentialInfo.response.attestationObject))\r\n        }\r\n    };\r\n    return publicKeyCredential;\r\n}).then(JSON.stringify).then((authenticatorResponseJSON) =&gt; {\r\n    // 可以发送了\r\n}).catch((error) =&gt; {\r\n    console.warn(error); // 捕获错误\r\n})</pre>\n<p>依赖方收到数据以后，还需要做三件事：验证挑战、存储凭证 ID 和存储公钥。如果数据解码顺利，且收到的挑战和之前发送的一致，就可以认为注册成功，将凭证 ID 及公钥与用户关联起来。这一步有很多第三方库可以帮我们做，对于基础实现我们就不深入探究了。</p>\n<blockquote><p>由于不同厂商的认证器的实现方式不同，<strong>我们并不能保证凭证 ID 一定是全局唯一的</strong>，也就是说，凭证 ID 有可能碰撞——即使这些凭证实际上是不同的。依赖方在实现凭证 ID 的存储及查找时，需要注意和用户 ID 结合进行存储或查找，或是直接在注册认证器时在服务器端对比阻止相同的凭证 ID。</p></blockquote>\n<hr><p>接下来就可以进行验证了。某天，用户点击了验证按钮准备登录，于是浏览器发送了验证请求到依赖方，同时附上要登录的用户名。接下来依赖方至少需要发送两项内容给浏览器：<strong>挑战和用户已绑定的凭证 ID 列表（即 <code>allowCredentials</code>）。</strong></p>\n<p>之后前端的处理流程就和注册时基本一致了。只是需要注意验证流程中获取到的 <code>PublicKeyCredential</code> 的结构和注册时的稍有不同。</p>\n<p>当浏览器将数据传回后，依赖方需要做的事情就比之前要麻烦一些了。依赖方需要验证挑战，并用之前存储的公钥验证签名和签名计数。同样地，这一步有很多第三方库可以帮我们做。最后，如果验证全部通过，我们就可以允许用户登录了。</p>\n<p>到目前为止，我们已经实现了一个简单的 WebAuthn 验证服务。不过这只是一个最基础的实现，对于很多高安全要求的身份认证这是远远不够的。因此，我们需要摆脱对第三方库的依赖，深入了解 WebAuthn。你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分，不过对于基础的 WebAuthn 实现，我们的旅程就到这里了。</p>\n<h2>拓展阅读</h2>\n<p>如果你的目标只是快速了解如何开发 WebAuthn，那么你阅读到这里就可以了。同时，上一节例子中的部分代码来自于我为了这篇文章开发的 WordPress 插件 WP-WebAuthn，这个插件可以为你的 WordPress 启用 WebAuthn 无密码登录（并非二步验证），你可以查阅插件的 <a href=\"https://github.com/yrccondor/wp-webauthn\">GitHub 存储库</a>了解更多，也可以自己安装试一试。</p>\n<p>如果你正在使用 Chrome 开发，Chrome 87+ 版本添加了一个 WebAuthn 开发者面板，可以帮助你在没有任何实体验证器的情况下开发 WebAuthn 功能。你可以在 Google 的<a href=\"https://developers.google.com/web/tools/chrome-devtools/webauthn\">这篇文章</a>中了解更多。不够，如果你正在使用 Firefox，很遗憾目前我还没有找到对应的开发工具或是浏览器扩展可用。</p>\n<p>如果你希望了解更多关于非对称加密的数学证明，可以查阅阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">这篇文章</a>。</p>\n<p>如果你希望了解更多关于 Credential Management API 的信息，可以查阅<a href=\"https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe\">这篇文章</a>（英文）。</p>\n<p>如果你希望了解更多 WebAuthn 的细节，可以继续往下阅读。<span></span></p>\n<h1>深入了解 WebAuthn</h1>\n<p>如上文所说，如果摆脱对第三方库的依赖，或是要实现更安全的 WebAuthn，我们必须深入了解 WebAuthn。在这一部分中，我们会详细讨论上文没有提到的一些概念和参数，并了解 WebAuthn 中各类数据的结构以实现解码与验证。先来看一看一些进阶的选项吧。</p>\n<h2>进阶选项</h2>\n<p>没错，上文提到的传入 <code>navigator.credentials.create()</code> 和 <code>navigator.credentials.get()</code> 方法的参数其实只是所有参数的一部分。对于 <code>create()</code>，我们还可以配置这些可选内容（上文提及的已省略）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        rp: {\r\n            icon\r\n        },\r\n        user: {\r\n            icon\r\n        },\r\n        attestation,\r\n        authenticatorSelection: {\r\n            requireResidentKey\r\n        },\r\n        extensions\r\n    }\r\n})</pre>\n</pre>\n<ul>\n<li>\n<code>rp.icon: String</code> 和 <code>user.icon</code>：是的，你可以为依赖方和用户设置图标，可以使用 HTTPS URL 或 Base64，一般长度不能超过 128 字节，不过大部分浏览器不会显示图标，或是有非常小的图片体积限制，所以一般没有使用这一属性的必要</li>\n<li>\n<code>attestation: String</code>：表明依赖方是否需要证明。可选三个值：\n<ul>\n<li>\n<code>none</code>：（默认）不需要证明。如上文所述，依赖方不关心证明，因此认证器不会签名。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n<li>\n<code>indirect</code>：依赖方需要证明，但证明方式可由认证器选择。在支持匿名证明的认证器上，认证器会通过匿名证明的方式签名挑战，并向依赖方提供签名方式等信息</li>\n<li>\n<code>direct</code>：依赖方要求直接证明。此时认证器会使用烧录在认证器中的公钥进行签名，同时向依赖方提供签名方式等信息以供依赖方验证认证器是否可信。更多信息可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节</li>\n</ul>\n</li>\n<li>在 <code>authenticatorSelection</code> 中，我们还可以设置两个可选属性：\n<ul>\n<li>\n<code>authenticatorSelection.requireResidentKey: Boolean</code>：是否要求将私钥钥永久存储于认证器中。默认值为 <code>false</code>。对于 iOS/iPad OS 13，必须设置为 <code>false</code>，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n<li>\n<code>extensions: Object</code>：WebAuthn 扩展，可以提供规范之外的配置和响应。由于实际情况中很少会使用这一特性，我们不会在这篇文章中讨论它</li>\n\n<blockquote><p>将 <code>requireResidentKey</code> 设置为 <code>true</code> 可以实现无用户名的登录，即认证器同时替代了用户名和密码。需要注意的是，尽管大部分认证器可以实现无限对公私钥，<strong>但能永久存储的私钥数量是有限的</strong>（对于 Yubikey，这通常是 25），因此只应在真正需要的时候启用此特性。我们会在“<a href=\"https://flyhigher.top/#login-without-username\">无用户名登录</a>”一节中详细讨论原因。</p></blockquote>\n<blockquote><p><strong>如果你没有高安全需求（如银行交易等），请不要向认证器索取证明</strong>，即将 <code>attestation</code> 设置为 \"none\"。对于普通身份认证来说，要求证明不必要的，且会有浏览器提示打扰到用户。</p></blockquote>\n<blockquote><p>Android 暂时无法实施用户验证，进而会导致依赖方验证失败。你可以在<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=997538\">这里</a>追踪这个特性的实现情况。</p></blockquote>\n<blockquote>\n<p>对于 <code>extensions</code>，由于目前浏览器支持和应用范围有限，我们不会在这篇文章中涉及，不过你可以看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    uvm: true, // 要求认证器返回用户进行验证的方法\r\n    txAuthSimple: \"Please proceed\" // 在认证器上显示与交易有关的简短消息\r\n}</pre>\n<p>你可以在<a href=\"https://www.w3.org/2019/01/webauthn-extensions.html\">这个页面</a>了解更多关于 <code>extensions</code> 的信息。</p>\n</blockquote>\n<p>对于 <code>get()</code>，我们其实只有一个可选内容没讲了，即 <code>extensions</code>。和上文一样，我们不会在这篇文章中讨论它。</p>\n<p>就这些了！<span></span></p>\n<h2>手动解个码</h2>\n<p>是时候看看如何手动解码了。我们将会在这一节中讨论认证器返回的数据的结构以及如何正确地解码它们。</p>\n<p>首先我们来看看如何处理注册过程中认证器发回的数据。假设所有 <code>ArrayBuffer</code> 类型的值都被正确地以 Base64 编码，且后端已经将 JSON 的字符串解析为字典。先来复习一下，我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"ZRBkDBCEtq...9XY8atOcbg\",\r\n    type: \"public-key\",\r\n    rawId: \"ZRBkDBCEtq...9XY8atOcbg==\",\r\n    response: {\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...i5jcmVhdGUifQ==\",\r\n        attestationObject: \"o2NmbXRkbm9uZWd...xNHuAMzz2LxZA==\"\r\n    }\r\n}</pre>\n<p>这里的 <code>id</code> 就是凭证的 ID，如果验证正确，我们最终要将它存储起来并于用户关联。同时可以看到 Base64 编码后的 <code>rawId</code> 其实和 <code>id</code> 是一致的（不过 <code>id</code> 是 Base64URL 编码的）。而 <code>type</code> 则一定是 \"public-key\"。</p>\n<p>不过，我们主要关心的还是 <code>respose</code> 中的两项内容。首先是 <code>clientDataJSON</code>。它的处理比较简单，看名字就知道，它应该是一个 JSON 字符串。</p>\n<blockquote><p>小技巧：如果你看到一个 Base64 编码的字符串以 \"ey\" 开头，那么它大概率是一个 Base64 编码的 JSON。</p></blockquote>\n<p>将<code>clientDataJSON</code> Base64 解码再 JSON 解码之后我们就能得到一个字典：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"NI4i1vsNmP2KHcmyFnBCKRVQPfHgg34SsYZUOPZY2lM\",\r\n    extra_keys_may_be_added_here: \"do not compare clientDataJSON against a template. See https://goo.gl/yabPex\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>结构一目了然。在这里，我们需要验证三项内容：</p>\n<ul>\n<li>\n<code>challenge</code> 和之前发送的一致</li>\n<li>\n<code>origin</code> 为创建凭证的页面的源（协议+主机名+端口号，并非 URL）</li>\n<li>\n<code>type</code> 为 \"webauthn.create\"</li>\n</ul>\n<p>同时可以注意到有一个奇怪的 <code>extra_keys_may_be_added_here</code>。这其实是 Google 在 Chrome 中搞的一点小把戏，有一定概率会出现，提醒我们需要将 JSON 解析后再验证键值以防额外插入的键值影响验证。具体信息你可以访问那个 URL 看一看。</p>\n<p>对于 Firefox，我们会多得到两项 <code>clientExtensions</code> 和 <code>hashAlgorithm</code> ，分别指明了客户端扩展数据和签名算法。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"3-4\">{\r\n    challenge: \"dg6ost6ujhAA0g6WqLe-SOOH-tbhvjW9Sp90aPKlLJI\",\r\n    clientExtensions: {},\r\n    hashAlgorithm: \"SHA-256\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>由于本文不考虑扩展数据，因此我们可以不考虑 <code>clientExtensions</code>。同时由于目前规范中指定的签名算法只有 SHA-256 一种，因此现阶段我们也可以简单地忽略 <code>hashAlgorithm</code>。</p>\n<p><code>clientDataJSON</code> 很简单地就处理完了。接下来我们要来看看 <code>attestationObject</code>。先来看看 <code>attestationObject</code> 的结构图示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\" alt=\"attestationObject 的结构\" width=\"1056\" height=\"532\" class=\"aligncenter size-full wp-image-2245\"></a>\n<p><code>attestationObject</code> 是 CBOR 编码后再被 Base64 编码的，因此我们需要额外对其进行 CBOR 解码。</p>\n<blockquote><p>CBOR (Concise Binary Object Representation, 简明二进制对象表示) 是一种多应用于物联网领域的编码方式，你可以将它看作体积更小、更方便物联网传输的二进制 JSON。大部分语言都可以找到对应的 CBOR 解码库。</p></blockquote>\n<p>我们当然不会手解 CBOR，直接来看看解开之后的样子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"none\",\r\n    attStmt: {},\r\n    authData: [211, 217, 43, 24, 199, ..., 97, 238, 166, 67, 107]\r\n}</pre>\n<p>这些键值的含义如下：</p>\n<ul>\n<li>\n<code>fmt</code>：标明证明的格式。WebAuthn 预定义了几种格式，分别为：\n<ul>\n<li>\n<code>none</code>：没有证明</li>\n<li>\n<code>packed</code>：为 WebAuthn 优化的证明格式</li>\n<li>\n<code>android-safetynet</code>：Android 使用的格式</li>\n<li>\n<code>android-key</code>：又是 Android 使用的格式</li>\n<li>\n<code>fido-u2f</code>：FIDO U2F 认证器使用的格式</li>\n<li>\n<code>tpm</code>：TPM 可信平台模块使用的格式</li>\n</ul>\n</li>\n<li>\n<code>attStmt</code>：证明对象，具体格式根据 <code>fmt</code> 的不同会有所不同</li>\n<li>\n<code>authData</code>：包含公钥、签名计数等来自认证器的数据</li>\n</ul>\n<p>诶，例子里的 <code>attStmt</code> 怎么是空的？还记得之前说的吗？大部分情况下，<strong>如果依赖方不要求证明，那么认证器不会签名挑战</strong>，于是 <code>fmt</code> 会变为 \"none\"，<code>attstmt</code> 会为空。如果不是高安全要求，我们可以只对这一种情况做支持。</p>\n<blockquote><p>注意，部分情况下 Firefox 会在不要求证明（即 <code>attestation</code> 为 \"none\"）时会返回 <code>fmt</code> 为 \"packed\" 的证明。<strong>这是符合规范的。</strong>此时认证器会进行自证明，你可以视情况进行处理。具体可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>对于非 \"none\" 的 <code>fmt</code> 我们稍后再谈，现在我们先来看看 <code>authData</code>。来复习一下 <code>authData</code> 的结构：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\" alt=\"authData 的结构\" width=\"1056\" height=\"384\" class=\"aligncenter size-full wp-image-2240\"></a>\n<p>对于它的解码比较简单粗暴，我们要做的就是根据图示将它切开，然后适当地转换类型。其中各部分的含义如下：</p>\n<ul>\n<li>\n<code>rpIdHash</code>：如其名，SHA-256 的 <code>rpId</code>，长度 32 字节</li>\n<li>\n<code>flags</code>：标识认证状态，长度 1 字节。其中 8 位分别为：\n<ul>\n<li>\n<code>ED</code>：是否有扩展数据</li>\n<li>\n<code>AT</code>：是否包含 <code>attestedCredentialData</code>。通常注册认证器时会包含 <code>attestedCredentialData</code>，而验证时不包含</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>\n<code>UV</code>：用户是否已验证</li>\n<li>保留位</li>\n<li>\n<code>UP</code>：用户是否在场</li>\n</ul>\n</li>\n<li>\n<code>signCount</code>：签名计数，长度 4 字节</li>\n<li>\n<code>attestedCredentialData</code>：包含公钥等凭据数据，变长。其结构如下：\n<ul>\n<li>\n<code>aaguid</code>：认证器的 AAGUID (Authenticator Attestation GUID)，对于同一型号的认证器，它们的 AAGUID 是相同的</li>\n<li>\n<code>credentialIdLength</code>：标识 <code>credentialId</code> 的长度，长度 2 字节</li>\n<li>\n<code>credentialId</code>：凭证 ID，和 <code>rawId</code> 一致，长度由 <code>credentialIdLength</code> 定义</li>\n<li>\n<code>credentialPublicKey</code>：CBOR 编码的 COSE 格式的凭证公钥，变长</li>\n</ul>\n</li>\n<li>\n<code>extensions</code>：扩展数据，变长，本文不讨论</li>\n</ul>\n<blockquote><p>出于隐私考虑，如果不要求证明，认证器会以 0 填充 AAGUID。</p></blockquote>\n<p>如果你的后端在使用 Node.js，这里有个工具函数可以帮你完成这一步（不考虑 <code>extensions</code>）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function parseAuthData(buffer){\r\n    let rpIdHash = buffer.slice(0, 32);\r\n    buffer = buffer.slice(32);\r\n  \r\n    let flagsBuf = buffer.slice(0, 1);\r\n    buffer = buffer.slice(1);\r\n\r\n    let flagsInt = flagsBuf[0];\r\n    let flags = {\r\n        up: !!(flagsInt &amp; 0x01),\r\n        uv: !!(flagsInt &amp; 0x04),\r\n        at: !!(flagsInt &amp; 0x40),\r\n        ed: !!(flagsInt &amp; 0x80),\r\n        flagsInt\r\n    }\r\n\r\n    let counterBuf = buffer.slice(0, 4);\r\n    buffer = buffer.slice(4);\r\n  \r\n    let counter = counterBuf.readUInt32BE(0);\r\n\r\n    let aaguid = undefined;\r\n    let credID = undefined;\r\n    let COSEPublicKey = undefined;\r\n\r\n    if(flags.at) {\r\n        aaguid = buffer.slice(0, 16);\r\n        buffer = buffer.slice(16);\r\n\r\n        let credIDLenBuf = buffer.slice(0, 2);\r\n        buffer = buffer.slice(2);\r\n\r\n        let credIDLen = credIDLenBuf.readUInt16BE(0);\r\n        credID = buffer.slice(0, credIDLen);\r\n\r\n        buffer = buffer.slice(credIDLen);\r\n        COSEPublicKey = buffer;\r\n    }\r\n\r\n    return {rpIdHash, flagsBuf, flags, counter, counterBuf, aaguid, credID, COSEPublicKey}\r\n}</pre>\n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>解开后，依赖方至少需要做四件事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>存储签名计数</li>\n<li>存储公钥</li>\n</ol>\n<blockquote><p>签名计数不一定从 0 开始。</p></blockquote>\n<p>对于公钥，也就是 <code>credentialPublicKey</code>，我们需要多一次 CBOR 解码，然后就可以得到类似这样的公钥：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    kty: \"EC\",\r\n    alg: \"ECDSA_w_SHA256\",\r\n    crv: \"P-256\",\r\n    x: \"ZGQALNfqo0L7HFYQHFHCS/X5db49z0ePnuQEs3w3X8w=\",\r\n    y: \"6qYxhnjYuez/Q8N6vX7nIIGfxFWdZ25NzQfZYuYOalA=\"\r\n}</pre>\n<p>然后可以选择适当的方法将其存储起来，之后的步骤本文就不再赘述了。现在，将目光拉回来，让我们看看包含证明的 <code>attestationObject</code> 是怎么样的。我们来看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"packed\",\r\n    attStmt: {\r\n        alg: -7,\r\n        sig: [48, 70, 2, 33, 0, ..., 132, 78, 46, 100, 21],\r\n        x5c: [\r\n            [48, 130, 2, 189, 48, 130, 1, 165, 160, 3, ..., 177, 48, 125, 191, 145, 24, 225, 169, 41, 248]\r\n        ]\r\n    },\r\n    authData: [211, 217, 43, 24, 199, ..., 158, 54, 87, 126, 54]\r\n}</pre>\n<p>这里有一个使用 \"packed\" 格式的证明。此时，<code>attStmt</code> 中包含三个值：</p>\n<ul>\n<li>\n<code>alg</code>：签名算法</li>\n<li>\n<code>sig</code>：签名值</li>\n<li>\n<code>x5c</code>：X.509 编码的证书链</li>\n</ul>\n<p>我们不会在这一节中详述对签名的验证。要了解更多信息，你可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。现在，让我们来看看如何处理验证过程中认证器发回的数据。我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"hmqdxPLit9...BWeVxZqdvU\",\r\n    type: \"public-key\",\r\n    rawId: \"hmqdxPLit9V...BWeVxZqdvU=\",\r\n    response: {\r\n        authenticatorData: \"09krGMcWTf...UFAAAABA==\",\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...XRobi5nZXQifQ==\",\r\n        signature: \"UsXZV3pvT3np8btj6V0g...WBkaqyt88DrD40qh+A==\",\r\n        userHandle: \"MmYxNWYzZjQyZjM...Tg2ZDY4NzhlNw==\"\r\n    }\r\n}</pre>\n<p><code>id</code>, <code>rawId</code> 和 <code>type</code> 和之前一样，这里就不再赘述了。让我们来看看 <code>response</code>。首先是 <code>clientDataJSON</code>，和之前的解法一样，要验证的内容也一样，只是 <code>type</code> 从 \"webauthn.create\" 变成了 \"webauthn.get\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"bnkd2CmrEuvKnAFXs2QlC3SKlg4XFvGtP4HJL1yEWyU\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.get\"\r\n}</pre>\n<p>然后是 <code>userHandle</code>。前面讲过，这是认证器在创建凭证时的用户 ID。如果用户在使用 U2F 认证器，很可能这一项为空，所以大部分情况下我们不关心这一项。</p>\n<p>接着来看 <code>authenticatorData</code>。这其实就是之前的 <code>attestedCredentialData</code>，只是这次不包含公钥。以相同的方式切开数据，我们应该可以得到 <code>rpIdHash</code>, <code>flags</code>和 <code>signCount</code> 三项。此时，依赖方至少需要做这三样事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>验证签名计数大于之前存储的计数，并更新存储的计数</li>\n</ol>\n<blockquote><p>如果签名计数比之前的小，那么这个认证器很可能是伪造的，应该中止验证并返回验证失败。同时，签名计数不一定每次按 1 递增，通常只要计数比此前的大就认为计数检查通过。</p></blockquote>\n<p>最后，我们来看 <code>signature</code>，也就是签名。不过这个签名不是简单的对挑战的签名，具体算法如图所示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\" alt=\"签名过程\" width=\"1034\" height=\"587\" class=\"aligncenter size-full wp-image-2231\"></a>\n<p>计算签名时，认证器会将 <code>authenticatorData</code> 与 <code>clientDataHash</code>（也就是 <code>clientDataJSON</code> 的 SHA-256 Hash）拼接起来，并使用对应的私钥签名。依赖方应该使用对应的公钥将其解密，并验证内容是否是 <code>authenticatorData</code> 与 <code>clientDataHash</code> 的拼接。这部分的计算不在本文的讨论范围内。</p>\n<p>最后，如果全部验证通过，返回验证成功。<span></span></p>\n<h2>验证认证器</h2>\n<p>WebAuthn 已经很安全了，但有的时候我们还要让它更安全一点。比如，如果用户在使用伪造的或是自制的认证器，认证器的安全性就得不到保证。此时，依赖方就需要验证认证器是否是可信的认证器。</p>\n<blockquote><p>这一过程仅发生在注册认证器时。此时，如果认证器验证通过，就可以存储公钥，后续步骤和之前描述的一致。</p></blockquote>\n<blockquote><p>再次说明，如果不是对安全性有极高的要求，向认证器索取证明以验证认证器是否可信是没有必要的。此外，验证认证器需要依赖方自行维护可信认证器列表，大大增加了维护的复杂性。</p></blockquote>\n<p>在调用 <code>navigator.credentials.create()</code> 时，我们可以将 <code>attestation</code> 设置为非 \"none\" 来向认证器索取证明。除无证明外，WebAuthn 定义了四种证明方式：</p>\n<ul>\n<li>Basic Attestation (Basic) ：基础的证明方式，认证器会使用认证器私钥签名</li>\n<li>Self Attestation (Self) ：自证明，认证器会使用凭证私钥签名</li>\n<li>Attestation CA (AttCA) ：认证器会使用多个证明私钥之一签名</li>\n<li>Elliptic Curve based Direct Anonymous Attestation (ECDAA) ：通过 <a href=\"https://en.wikipedia.org/wiki/Direct_Anonymous_Attestation\">DAA</a> 实现的匿名证明</li>\n</ul>\n<blockquote><p>和验证过程一样，这里签名的目标是 <code>authenticatorData</code> 和 <code>clientDataHash</code> 的连接。</p></blockquote>\n<p>还记得 <code>create()</code> 时 <code>attestation</code> 可选的三个值吗？这个值会决定认证器最终使用哪种方式进行证明。复习一下：</p>\n<ul>\n<li>\n<code>none</code>：大部分情况下认证器会选择不进行证明，部分认证器会进行自证明。此时 AAGUID 会被 0 填充</li>\n<li>\n<code>indirect</code>：认证器会试图通过替换 AAGUID 和选择合适的证明方式来进行匿名证明，具体方式由认证器选择</li>\n<li>\n<code>direct</code>：认证器会提供最直接的证明信息</li>\n</ul>\n<p>注意，大部分情况下，当认证器需要向依赖方证明自己可信时需要提供认证器公钥，<strong>这会触发浏览器提示，只有用户同意后认证器才会进行证明，否则认证器将不提供证明。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\" alt=\"浏览器提示\" width=\"446\" height=\"283\" class=\"aligncenter size-full wp-image-2217\"></a>\n<blockquote><p>为什么浏览器会说“安全密钥的品牌和型号”？事实上，为了避免用户通过认证器证书被跨依赖方追踪，FIDO 要求使用相同认证器证书的认证器的数量不能少于 100,000。于是大部分认证器厂商会选择<strong>让同一型号的认证器共用同一份证书。</strong>因此，浏览器的会询问用户是否同意“查看安全密钥的品牌和型号”。</p></blockquote>\n<blockquote><p>Android Safety Net 不会向用户询问是否同意，而是会静默进行证明。</p></blockquote>\n<p>当证明不为空时，依赖方收到数据后根据 <code>attestationObject.fmt</code> 的不同，需要选择不同的验证方式来验证认证器的可信情况。出于篇幅原因，这里我们不会讨论每一种 <code>fmt</code> 的验证方式，更多信息你可以查阅 <a href=\"https://www.w3.org/TR/webauthn/#defined-attestation-formats\">W3C 文档</a>。</p>\n<p>当 <code>fmt</code> 为 <code>packed</code> 时，<code>attestationObject.attStmt</code> 可能会有三种格式：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">// 自证明\r\n{\r\n    alg, // 算法\r\n    sig // 签名\r\n}\r\n// 基础或证明 CA 证明\r\n{\r\n    alg,\r\n    sig,\r\n    x5c // X.509 证书链\r\n}\r\n// 椭圆曲线证明\r\n{\r\n    alg,\r\n    sig,\r\n    ecdaaKeyId // ECDAA-Issuer 公钥标识符\r\n}</pre>\n<p>此时，依赖方需要检查证书符合预期格式并检查证书是否在可信链上。首先，如果证明中既没有 <code>ecdaaKeyId</code> 也没有 <code>x5c</code>，就说明这个证明使用的是自证明，只需使用认证器提供的公钥验证即可；如果有 <code>x5c</code>，那么就需要验证 <code>x5c</code> 中的证书是否在可信链上。将 <code>x5c</code> 中的每个证书以 Base64 编码，按 64 个字符切开，并在头尾加上 <code>-----BEGIN CERTIFICATE-----</code> 和 <code>-----END CERTIFICATE-----</code>就能得到一个证书字符串了。之后，依赖方需要验证证书是否可信。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function base64ToPem(b64cert){\r\n    let pemcert = '';\r\n    for(let i = 0; i \n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>至于 <code>ecdaaKeyId</code>，由于目前应用较少，处理方法可能需要你另寻资料了。检查证书的具体步骤已经超出了本文的范围，具体可以查阅<a href=\"https://medium.com/@herrjemand/verifying-fido2-packed-attestation-a067a9b2facd\">这篇文章</a>（英文）。</p>\n<blockquote><p>你可以在 <a href=\"https://fidoalliance.org/metadata/\">FIDO Metadata Service</a> 找到各大厂商认证器的可信证书链。</p></blockquote>\n<p>当在 Android 上调起 WebAuthn 时，大部分情况下 <code>fmt</code> 将会为 <code>safety-net</code>。此时 <code>attestationObject.attStmt</code> 的结构会是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    ver: \"200616037\",\r\n    response: {\r\n        type: \"Buffer\",\r\n        data: [101, 121, 74, 104, 98, ..., 115, 104, 104, 82, 65]\r\n    }\r\n}</pre>\n<p>此时，<code>clientDataJSON</code> 中还会出现 <code>androidPackageName</code> 键，值是调起 WebAuthn 验证的应用的包名，如 Chrome 就是 \"com.android.chrome\"。</p>\n<p>在这个证明中，<code>data</code> 其实是一个 JWT 字符串，我们可以将它编码为字符串并将其按照 JWT 进行解码（别忘了验证 JWT 签名）。最终我们会得到一个类似这样的 Payload：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    nonce: \"0QAurN4F9wik6GEkblDJhGuf4kuaqZn5zaaxlvD1hlA=\",\r\n    timestampMs: 1584950686460,\r\n    apkPackageName: \"com.google.android.gms\",\r\n    apkDigestSha256: \"2BQHno+bmWWwdLUYylS8HLt5ESJzci3nt2uui71ojyE=\",\r\n    ctsProfileMatch: true,\r\n    apkCertificateDigestSha256: [\r\n        \"8P1sW0EPicslw7UzRsiXL64w+O50Ed+RBICtay2g24M=\"\r\n    ],\r\n    basicIntegrity: true,\r\n    evaluationType: \"BASIC\"\r\n}</pre>\n<p>其中包含了有关设备状态的一些信息。比如说，如果 <code>ctsProfileMatch</code> 为 <code>false</code>，那么该设备很有可能被 root 了。对于高安全要求的场景，我们可以视情况进行验证。</p>\n<p>同时我们可以在 JWT Header 中验证证明的有效性。我们应该能取得这样的 Header：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    alg: \"RS256\",\r\n    x5c: [\r\n        \"MIIFkzCCBHugAwIBAgIR...uvlyjOwAzXuMu7M+PWRc\",\r\n        \"MIIESjCCAzKgAwIBAgIN...UK4v4ZUN80atnZz1yg==\"\r\n    ]\r\n}</pre>\n<p>这里的结构就和上方的 <code>x5c</code> 验证类似了。具体步骤可以参考<a href=\"https://medium.com/@herrjemand/verifying-fido2-safetynet-attestation-bd261ce1978d\">这篇文章</a>（英文）。</p>\n<p>其他所有格式的验证方式也都可以在<a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">这篇文章</a>（英文）中找到。<span></span></p>\n<h2>无用户名登录</h2>\n<p>认证器已经代替了密码，可是这还不够！在进行第一因素认证（即使用 WebAuthn 登录）时，我们还是需要输入用户名，然后才能进行身份认证。懒惰是第一生产力，我们能不能不输入用户名就进行身份认证呢？实际上，大部分认证器都允许我们无用户名登录。<strong>而这一特性的核心就是 Resident Key 客户端密钥驻留。</strong></p>\n<p>你可以思考一下，为什么普通的 WebAuthn 为什么不能实现无用户名登录？事实上，大部分认证器为了实现无限对公私钥，会将私钥通过 Key Warp 等技术加密后包含在凭证 ID 中发送给依赖方，这样认证器本身就不用存储任何信息。不过，这就导致需要身份认证时，依赖方必须通过用户名找到对应的凭证 ID，将其发送给认证器以供其算出私钥。</p>\n<blockquote><p>Yubikey 实现了一个基于 HMAC 的算法，认证器可以在私钥不离开认证器的前提下（常规的 Key Warp 算法中实际上私钥离开了认证器）通过一些输入和凭证 ID 重新计算私钥，你可以阅读<a href=\"https://www.yubico.com/blog/yubicos-u2f-key-wrapping/\">这篇文章</a>了解更多。</p></blockquote>\n<blockquote><p>客户端通过凭证 ID 查找对应认证器的算法根据系统的不同是不同的。通常凭证 ID 中会包含认证器信息，因此系统可以通过凭证 ID 找到对应的认证器。</p></blockquote>\n<p>要避免输入用户名，我们可以要求认证器将私钥在自己的内存中也存储一份。这样，依赖方无需提供凭证 ID，认证器就可以通过依赖方 ID 找到所需的私钥并签名公钥。以下是具体流程：</p>\n<p>注册时：</p>\n<ol>\n<li>依赖方请求新建凭证，同时要求启用客户端密钥</li>\n<li>认证器生成一对公私钥，并将私钥存储在永久内存中且与依赖方 ID 及用户 ID 绑定，随后将公钥发送给依赖方以供存储</li>\n<li>依赖方将用户 ID 即公钥与用户绑定</li>\n</ol><p>验证时：</p>\n<ol>\n<li>依赖方请求验证，但不必提供除依赖方 ID 以外的更多信息</li>\n<li>用户选择认证器</li>\n<li>认证器根据依赖方 ID 找到对应私钥</li>\n<li>如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录</li>\n<li>确定私钥后，认证器签名挑战并将其返回，同时返回用户 ID</li>\n<li>依赖方通过用户 ID 找到对应用户并用对应公钥检查签名，正确则允许对应用户登录</li>\n</ol><blockquote><p>可以看到，这个特性同时要求认证器存储用户 ID，即上面提到过的 <code>userHandle</code>。依赖方需要根据此信息找到对应用户，因此不支持 <code>userHandle</code> 的 U2F 认证器无法进行无用户名登录。</p></blockquote>\n<blockquote><p>如之前所说，<strong>认证器能永久存储的私钥数量是有限的</strong>，因此只应在真正需要无用户名登录的时候启用此特性。</p></blockquote>\n<blockquote><p>目前暂时没有办法检测认证器是否支持客户端密钥驻留，因此在无用户名验证失败时应 fallback 至常规的 WebAuthn 验证，即向用户询问用户名。</p></blockquote>\n<p>现在让我们来看看如何实现这一特性吧。首先，调用 <code>navigator.credentials.create()</code> 时我们需要注意两个参数：<code>requireResidentKey</code> 必须为 <code>true</code>，<code>userVerification</code> 必须为 \"required\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"5-6\">navigator.credentials.create({\r\n    publicKey: {\r\n        ...\r\n        authenticatorSelection: {\r\n            requireResidentKey: true,\r\n            userVerification: \"required\"\r\n            ...\r\n        },\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Windows Hello <strong>似乎</strong>会存储所有已注册的凭据，因此无论是否指定 <code>requireResidentKey</code>，你都可以通过 Windows Hello 进行无用户名登录。</p></blockquote>\n<p>随后，浏览器会询问用户是否允许认证器存储私钥。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\" alt=\"浏览器提示\" width=\"445\" height=\"285\" class=\"aligncenter size-full wp-image-2208\"></a>\n<p>如果用户同意，认证器会存储私钥，并和普通的 WebAuthn 一样返回信息。不过，依赖方收到数据之后，只需将公钥、用户 ID 与用户关联起来，而不必再将凭证 ID 与用户关联起来。至此注册完成。</p>\n<p>之后，在用户请求登录时，无需再向依赖方提供用户名。同时在传入 <code>navigator.credentials.get()</code> 的参数中也有两个需要注意：<code>userVerification</code> 必须为 \"required\"，同时 <code>allowCredentials</code> 必须为空。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"4-5\">navigator.credentials.get({\r\n    publicKey: {\r\n        ...\r\n        userVerification: \"required\",\r\n        allowCredentials: [],\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Android 暂不支持无用户名验证，空的 <code>allowCredentials</code> 会导致浏览器返回 <code>NotSupportedError</code> 错误。</p></blockquote>\n<p>此时，认证器会根据依赖方 ID 找到对应的私钥。如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录。用户选择后，认证器就会使用对应的私钥签名挑战并将其返回。此时，<code>userHandle</code> 一定不为空。</p>\n<p>依赖方收到数据后，需要将 <code>userHandle</code> 作为用户 ID 找到对应的用户，并使用对应的公钥验证签名。如果验证成功，则认为对应的用户身份认证成功，依赖方可以允许其登录。至此验证结束。</p>\n<blockquote><p>有的时候你可能会需要清除认证器中的密钥。绝大多数认证器都提供了对应的软件以供清除存储的密钥，但大部分情况下这会重置整个认证器，这意味着相关认证器此前的所有凭证均会失效。因此建议不要将日常使用的认证器作为开发测试用的认证器。</p></blockquote>\n<h2>从 U2F 认证迁移</h2>\n<p>如果你的服务此前提供了 U2F 第二因素认证，你可能会希望在将依赖方从 U2F 升级到 WebAuthn 时用户此前注册的 U2F 认证器仍然可用而无需重新注册。由于 WebAuthn 向后兼容 U2F 设备，用户是可以继续使用原有的 U2F 认证器的。不过，由于 WebAuthn 的依赖方 ID 与 U2F 的 <code>appid</code> 并不一定相同，你需要将原有的 U2F <code>appid</code> 随 WebAuthn 流程一起传递给认证器，认证器才能使用正确的私钥进行响应。</p>\n<p>要实现这一点，我们只需要在注册及认证仪式中使用 WebAuthn 的 <code>appid</code> 扩展。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    appid: \"https://example.com\" //U2F appid\r\n}</pre>\n<p>此时认证器便可以得到正确的私钥，之后的流程与正常情况一致；依赖方除了正常的 WebAuthn 流程外，不需要再做任何其它操作。</p>\n<h2>拓展阅读</h2>\n<p>我们的 WebAuthn 之旅到这里就真的结束了。不过，你仍然可以自行探究，了解更多。<strong>本文只是一个粗浅的使用指南</strong>，而被称为“Web 身份认证的未来”的 WebAuthn 的深层还要很多细节值得我们挖掘学习，不过本文不会再继续讨论了。</p>\n<p>如果你想了解更多关于 WebAuthn 的信息，最好的方法是直接阅读 <a href=\"https://www.w3.org/TR/webauthn\">W3C 规范</a>。此外，Yubico 也提供了不错的 <a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn 文档</a>。</p>\n<p>要了解更多认证器存储凭证的信息，你可以阅读<a href=\"https://duo.com/labs/tech-notes/how-security-keys-store-credentials\">这篇文章</a>（英文）。</p>\n<p>如果你想了解更多 Android Safety Net 是怎样运作的，可以观看<a href=\"https://youtu.be/8lv_9mydrjg\">这个视频</a>，并通过 <a href=\"https://developer.android.com/training/safetynet/attestation\">Google 的文档</a>了解 Android Safety Net 的更多信息。</p>\n<p>如果你想方便地调试 WebAuthn，<a href=\"https://webauthn.me/\">webauthn.me</a> 提供了一个非常直观方便的<a href=\"https://webauthn.me/debugger\">调试器</a>。</p>\n<h1>参考资料</h1>\n<p><a href=\"https://www.w3.org/TR/webauthn\">WebAuthn Level 1 规范 - W3C</a><br><a href=\"https://github.com/w3c/webauthn\">WebAuthn Level 2 草案 - W3C</a><br><a href=\"https://blog.techbridge.cc/2019/08/17/webauthn-intro/\">一起来了解Web Authentication - TechBridge 技术共笔部落格</a><br><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\">Introduction to WebAuthn API - Medium</a><br><a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">WebAuthn/FIDO2: Verifying responses - Medium</a><br><a href=\"https://obeta.me/posts/2019-03-01/WebAuthn%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8\">WebAuthn介绍与使用 - obeta</a><br><a href=\"https://webauthn.io/\">webauthn.io</a><br><a href=\"https://webauthn.guide/\">webauthn.guide</a><br><a href=\"https://webauthn.me/\">webauthn.me</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion\">Attestation and Assertion - MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Authentication_API\">Web Authentication API - MDN</a>（顺便翻译了一半）<br><a href=\"https://fidoalliance.org/fido-technotes-the-truth-about-attestation/\">FIDO TechNotes: The Truth about Attestation - FIDO Alliance</a><br><a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn Developer Guide - Yubico</a><br><a href=\"https://en.wikipedia.org/wiki/WebAuthn\">WebAuthn - Wikipedia</a><br><a href=\"https://techcommunity.microsoft.com/t5/identity-standards-blog/all-about-fido2-ctap2-and-webauthn/ba-p/288910\">All about FIDO2, CTAP2 and WebAuthn - Microsoft Tech Community</a><br><a href=\"https://webauthn-doc.spomky-labs.com/\">Webauthn Framework</a><br><a href=\"https://zhuanlan.zhihu.com/p/25279015\">如何开发支持 FIDO U2F 登录的网站 - 知乎专栏</a><br></p></pre>\n","link":"https://flyhigher.top/develop/2160.html"},{"title":"NLP 找门：用朴素贝叶斯进行文本分类","date":"2020-01-29 11:39:58","description":"\n<blockquote>\n<p>有一天，神收到了一封垃圾邮件，于是世界上就有了朴素贝叶斯算法。</p>\n<footer>——我瞎编的</footer>\n</blockquote>\n<p>为什么这篇文章的标题是 NLP 找门呢？因为如果你看完了这篇文章，你就可以<strong>准备入门</strong>自然语言处理 (<strong>N</strong>atural <strong>L</strong>anguage <strong>P</strong>rocessing) 了。我会把这篇文章当作一篇彻彻底底的 NLP 入门文章来写，尽量避免“专业高端”词汇和“全是奇怪符号”的式子，这样<strong>只要你有高中数学基础</strong>，就能毫无压力地看完这篇文章，学会使用朴素贝叶斯分类算法分类文本。</p>\n<p>让我们开始吧。</p>\n<h1>所以，啥是朴素贝叶斯？</h1>\n<p>简单来说，朴素贝叶斯 (Naïve Bayes) <strong>是一个简单但高效的分类算法</strong>，在进行不复杂的文本分类时高效且拥有不低的准确度，判断垃圾邮件就是用朴素贝叶斯进行文本分类的一个经典例子。当然朴素贝叶斯分类不仅能用在 NLP 中，在许多分类问题中朴素贝叶斯也有非常好的效果，但我们今天只关注它在 NLP 中的应用。</p>\n<p>要了解朴素贝叶斯，我们要先来了解一下贝叶斯定理。</p>\n<blockquote>\n<p>每增加一个数学公式都会使读者减半。</p>\n<footer>——霍金</footer>\n</blockquote>\n<p>那么，就让我们先来看看贝叶斯定理的公式吧（笑</p>\n<p>$$P(A|B) = \\frac{P(AB)}{P(B)} = \\frac{P(B|A)P(A)}{P(B)}$$</p>\n<p>其实还是很简单的，运用高中的条件概率知识就能理解。本质上，贝叶斯定理给出了一种方法，使得我们可以在 \\(P(A|B)\\) 和 \\(P(B|A)\\) 之间互相转换，因为通常情况下它们是不一样的。</p>\n<p>要更好地理解，请考虑这样一个例子：</p>\n<blockquote><p>假设有一个学校图书馆，图书管理员正为找不到某本书而发愁。已知老师有 70% 的意愿借走这本书，而是学生的意愿是 30%，这个学校的师生比例是 1:10，那么借走这本书的人是老师的概率有多大？</p></blockquote>\n<p>设学校总人数为 \\(T\\)，我们可以很容易地写出这样的一个式子：</p>\n<p>$$\\begin{align} P &amp; = \\frac{T\\cdot\\frac{1}{11}\\cdot 70\\%}{T\\cdot\\frac{1}{11}\\cdot 70\\%+T\\cdot\\frac{10}{11}\\cdot 30\\%} \\\\ &amp; = \\frac{70\\%}{70\\%+10\\times30\\%} \\\\ &amp; = \\frac{7}{37} \\end{align}$$</p>\n<p>这就是贝叶斯定理了！等等，你可能会挠挠头，这哪里是贝叶斯了？别急，如果我们把最上面的式子换个字母的话...</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>在这里，\\(H\\) 指 Hypothesis，即假设，而 \\(E\\) 指 Evidence，即证据。这样，这个式子就很好理解了，在我们上面的例子里，借走书是证据，那么 \\(P(E)\\) 就是某个人选择借走这本书的概率；这个人是老师是假设，那么这个人是老师的概率是 \\(P(H)\\)。<strong>注意这里的概率指在学校中抽一个人是老师的概率，并不是“在借走书的前提下”这个人是老师的概率</strong>，而“在借走书的前提下”这个人是老师的概率应该是 \\(P(H|E)\\)，也正是我们要求的概率。同样地，而“这个人是老师”的前提下借走书的概率就是 \\(P(E|H)\\) 了。</p>\n<p>那么再来看看上面我们凭小学知识就列出的计算式，如果把里面的具体数据换成概率来表示的话，这个式子就会变成...</p>\n<p>$$P(H|E) = \\frac{T\\cdot P(E|H)P(H)}{T\\cdot P(E|H)P(H) + T\\cdot P(E|\\neg H)P(\\neg H)}$$</p>\n<p>好吧，这里解释一下，\\(\\neg\\) 符号表示“非”，所以 \\(P(E|\\neg H)\\) 表示在“这个人不是老师”的前提下借走书的概率。而 \\(T\\cdot P(E|H)P(H)\\) + \\(T\\cdot P(E|\\neg H)P(\\neg H)\\)，即“可能借走书的老师的数量 + 可能借走书的学生的数量”，就是“可能借走书的人的数量”了，也就是 \\(T\\cdot P(E)\\)。上下消去 \\(T\\)，我们就能得到上面的式子了。</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>这就是贝叶斯了定理。如果你还是不太清楚，可以去看看 3Blue1Brown 的<a href=\"https://www.bilibili.com/video/av84799361\">这个视频</a>，图形化的讲解会清晰很多。</p>\n<p>这里我要提一下这个式子里各部分的专有名称了（“专业高端”词汇警告），你可以不记住，直接看后面。</p>\n<ul>\n<li>\\(P(H|E)\\) 叫做 \\(H\\) 的<strong>后验概率</strong>，反之亦然</li>\n<li>\\(P(H)\\) 叫做 \\(H\\) 的<strong>先验概率</strong>，反之亦然</li>\n<li>特别地，我们把 \\(P(E|H)\\) 称作<strong>“似然值”</strong>，即 likelihood</li>\n</ul>\n<p>那什么是朴素贝叶斯呢？按上面所说的，朴素贝叶斯是一种分类算法。简单来说，朴素贝叶斯将一个对象的各个特征考虑为互相独立，然后根据这些特征的概率的乘积来判断对象所属的分类。基本原理如下：</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)} \\propto P(E|H)P(H) = P(H)\\prod_{i}P(W_i|H)$$</p>\n<p>在这里，\\(W_i\\) 指某一对象的第 \\(i\\) 个特征，对于文本分类来说，这就是一段文本中的某个单词。</p>\n<p>朴素贝叶斯之所以“朴素”，是因为它要求<strong>各个特征间是独立的</strong>，在文本分类中也就是各个单词之间互不干扰。虽然思路简单的代价是适用范围变窄，不过由于这样的简化在很多情况下已经足够了，因此实际上朴素贝叶斯的应用范围非常广。<del>你看朴素贝叶斯 <strong>N</strong>aïve <strong>B</strong>ayes 的缩写都是 NB 了，能不厉害吗（逃</del></p>\n<h1>那么，咋分类啊</h1>\n<p>看来你这下完全听懂了呢（笑），是时候看看如何在 NLP 中应用朴素贝叶斯了。和上面一样，我们用一个具体的例子来说明。我们的目标是让电脑学会分类美国共和党和民主党的演讲稿，由于两个党派的演讲风格不同，所以这样的分类在理论上是可行的。</p>\n<div class=\"wp-block-file\">\n<a href=\"https://acdn.flyhigher.top/nlp/material.zip\" download>material.zip</a><a href=\"https://acdn.flyhigher.top/nlp/material.zip\" class=\"wp-block-file__button\" download>下载</a>\n</div>\n<p>上面我们要用到的数据集，你可以下载下来一起动手玩一玩。先说一下数据集的数据结构吧，压缩包里有两个文件，<code>train.txt</code> 将会被当作训练数据集，而 <code>test.txt</code> 则会作为训练结束后的验证数据集。两个文本文件里数据的结构是类似的，就像这样：</p>\n<pre class=\"EnlighterJSRAW\">BLUE WELL I AM SO HONORED AND PERSONALLY UNKNOWNWORD TO BE HERE...\r\nRED THANK YOU . THIS IS QUITE AN INSTITUTION . IT'S GOOD TO BE...</pre>\n<p>每行都是一篇演讲稿，每行的第一个单词指明了这篇演讲稿所属的党派，<code>RED</code> 指共和党，而 <code>BLUE</code> 指民主党。所有单词和符号都已经被转为大写并由空格分隔方便处理。<code>train.txt</code> 有共和党演讲稿和民主党演讲稿各 23 篇，<code>test.txt</code> 有 6 篇共和党演讲稿，12 篇民主党演讲稿。</p>\n<p>明白了？那我们就开始吧。</p>\n<h2>捋捋思路</h2>\n<p>首先，我们需要考虑如何在文本分类中应用朴素贝叶斯。很简单，按朴素贝叶斯的思路，<strong>计算每个词在某一分类下的出现概率，然后将某篇文章的所有词的概率相乘，再乘以该分类的先验概率，就可以得到某篇文章在某一分类下的概率。</strong></p>\n<p>$$P(Class|Article) = P(Class)\\prod_{i}P(Word_i|Class)$$</p>\n<p>各个分类概率都计算完成后，概率最高的那个分类就是这篇文章可能所属的分类。这个思路的核心就是用词决定了文本风格，文本的不同类别用词会有差异，只要能量化这些差异就可以分类文本。在我们的例子中，我们可以从 <code>train.txt</code> 中统计各个词汇的出现情况，然后用 <code>test.txt</code> 中的数据按上面的算法验证我们算法的准确性。</p>\n<p>这个思路很简单也很清晰，但还有一些问题需要解决。<strong>第一，有的时候，我们的测试数据集中可能会出现一个在训练数据集中没有出现过的词语。这个时候，朴素贝叶斯的计算结果会是 0。</strong>如果我们把 0 乘进式子中，那就别想得到正常的结果了。所以，我们还需要对计算某一单词在某一分类中的式子稍加改进。使用拉普拉斯平滑，就可以避免出现概率为 0 的情况。别被名字吓到，拉普拉斯平滑是一种非常简单的平滑方法：在分子上 +1，在分母上加整个取值范围，这样就可以给整个分式加上非常微小的偏移，避免出现 0。</p>\n<p>$$\\begin{align} P(Word_i|Class) &amp; = \\frac{Word_iCountInClass}{AllWordCountInClass} \\\\ &amp; \\approx \\frac{Word_iCountInClass + 1}{AllWordCountInClass + UniqueWordCount} \\end{align}$$</p>\n<p><strong>第二，对于长文本，大部分词语在某一分类中的出现概率是远小于 1 的，加上长文本词汇量大，往往概率相乘的结果会非常小。</strong>受限于计算机处理浮点数的原理，精确处理这么小的数字是很麻烦的。幸好，运用一些简单的数学知识就可以将其转化为更精确的表达，<strong>那就是取对数。</strong></p>\n<p>首先，将概率计算结果取对数并不影响我们的计算结果。因为取对数是一个单调递增的操作，而我们计算概率只是为了排序选择概率最高的分类，因此取对数是不影响我们排序的。而把多项式取对数，等于把多项式的每一项取对数后相加。所以我们有：</p>\n<p>$$\\lg{\\Big(P(Class)\\prod_{i}P(Word_i|Class)\\Big)} = \\lg{P(Class)} + \\sum_i\\lg{P(Word_i|Class)}$$</p>\n<p>大部分情况下，在每一次取对数的时候，要取对数的数字的大小，即 \\(P(Word_i|Class)\\) 尚还在计算机能处理的范围内，<strong>因此我们可以放心地使用取对数的方法</strong>，避免计算机精度不够影响结果。</p>\n<p><strong>第三就是在某些情况下，可能会有部分词语干扰计算结果</strong>，如 and, is 这类的被大量使用的中性词。如果希望得到更好的结果，我们可以维护一个停用词表，在计算时排除停用词即可。或者，我们可以在计算完每个单词的出现数量后，排除数量最多的前 \\(N\\) 个单词，避免这些单词过多地影响计算。</p>\n<h2>写点代码</h2>\n<p>现在我们终于可以开始实战，写点代码了。我会用简单的 Python 来表达思路。好了，理一理思绪，第一步我们要做的，是统计训练数据集中的用词情况。具体来说，根据上面的思考，我们需要统计的有：</p>\n<ul>\n<li>每个单词在各分类中出现的数量</li>\n<li>各分类中的不重复词数量</li>\n</ul>\n<p>用 Python 简单表示如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\"># 读入数据过程略...\r\ndata_raw = \"读入的数据\".split('\\n') # 按行分隔\r\ndata_blue = []\r\ndata_red = []\r\nword_count_blue = {}\r\nword_count_red = {}\r\n\r\nfor line_data in data_raw:\r\n    word_list = line_data.split(\" \") # 分隔单词\r\n    if word_list[0] == \"BLUE\":\r\n        for i in range(1,len(word_list)):\r\n            if not is_excluded(word_list[i]): # 判断是否为停用词\r\n                data_blue.append(word_list[i])\r\n                # 统计单词出现次数\r\n                word_count_blue.setdefault(word_list[i], 0)\r\n                word_count_blue[word_list[i]] += 1\r\n    elif word_list[0] == \"RED\":\r\n        # Class = red 时同理...\r\n\r\n#统计非重复词\r\nunique_words_blue = list(set(data_blue))\r\nunique_words_red = list(set(data_red))</pre>\n<p>训练过程到这里就结束了，计算机已经知道了各政党演讲的用词习惯。很简单吧？接下来我们就要使用测试数据集来测试准确度了。<strong>这里开始就涉及到朴素贝叶斯的计算了</strong>，可能会稍微复杂一点点。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">import math\r\n#读入测试数据过程略...\r\ntest_data_raw = \"读入的数据\".split('\\n') # 按行分隔\r\ntest_data = []\r\n\r\nfor line_data in test_data_raw:\r\n    if line_data[0] == \"BLUE\":\r\n        content_data = line_data.split(\" \").pop(0)\r\n        test_data.append({\"class\": \"blue\", \"content\": content_data})\r\n    elif line_data[0] == 'RED':\r\n        # ...\r\n\r\nfor line_data in test_data:\r\n    posibility_blue = 0\r\n    for word in line_data[\"content\"]:\r\n        # 计算各单词概率，取对数后相加，使用了拉普拉斯平滑\r\n        if word in word_count_blue:\r\n            posibility_blue += math.log((word_count_blue[word]+1)/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n        else:\r\n            posibility_blue += math.log(1/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n    # 最后加上该分类概率的对数\r\n    posibility_blue += math.log(len(data_blue)/(len(data_blue)+len(data_red)))\r\n\r\n    # 计算 Red 同理...</pre>\n<p>计算完成后，我们就得到每篇演讲稿在各分类下的概率了。之后，简单的比较就能得出推断的分类：如果 \\(P(Red|Article)\\) 大于 \\(P(Blue|Article)\\)，那么这篇演讲稿就更可能是共和党的演讲稿，反之则是民主党的演讲稿。</p>\n<p>很好理解吧？那么这么简单的思路，准确性怎么样呢？对于我们的例子，这是我设置了个别停用词后的结果：</p>\n<pre class=\"EnlighterJSRAW\">+-----+-------+--------------+--------------+-------+-------+\r\n|   ID|  Class|        P(Red)|       P(Blue)|  Guess| Status|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|    1|   Blue|  -23204.68377|  -22998.67066|   Blue|      √|\r\n|    2|   Blue|  -16438.44625|  -16137.48257|   Blue|      √|\r\n|    3|   Blue|  -33468.81214|  -32567.61801|   Blue|      √|\r\n|    4|   Blue|    -8606.2193|   -8601.50426|   Blue|      √|\r\n|    5|   Blue|  -12430.97436|  -11935.70662|   Blue|      √|\r\n|    6|   Blue|  -44033.02883|  -43877.55367|   Blue|      √|\r\n|    7|   Blue|   -16947.2851|  -16758.57542|   Blue|      √|\r\n|    8|   Blue|  -26957.26997|  -26889.62444|   Blue|      √|\r\n|    9|   Blue|  -27503.73985|  -27249.21828|   Blue|      √|\r\n|   10|   Blue|   -20528.4457|   -19991.1248|   Blue|      √|\r\n|   11|   Blue|  -20337.96493|  -19860.12831|   Blue|      √|\r\n|   12|   Blue|  -28409.28489|  -28118.98017|   Blue|      √|\r\n|   13|    Red|  -13756.01015|  -14488.11751|    Red|      √|\r\n|   14|    Red|  -17221.22732|  -17710.15936|    Red|      √|\r\n|   15|    Red|  -17397.45136|  -17899.98659|    Red|      √|\r\n|   16|    Red|  -10724.69095|  -11092.77837|    Red|      √|\r\n|   17|    Red|  -10402.40027|  -10859.48681|    Red|      √|\r\n|   18|    Red|   -9371.53792|    -9669.6769|    Red|      √|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|                                      Total: 18/18, 100.0% |\r\n+-----------------------------------------------------------+</pre>\n<p><strong>100% 的准确率哦！</strong>事实上，对于我们的这个例子，就算不设置停用词，我们仍能达到 100% 的分类准确率。朴素贝叶斯分类的确很 NB 呢。</p>\n<h1>更进一步</h1>\n<p>我们的探索到这里就结束了，但如果你有兴趣，完全可以继续探索下去。我们的例子是一个非常简化的例子，在实际情况中，还有很多问题需要解决。比如，对于中文及类似语言，不存在拉丁语系的天然分词结构，而朴素贝叶斯的文本分类是基于单词的，那么<strong>中文的分词就会是个问题；</strong>再比如，对于朴素贝叶斯分类来说，<strong>词语之间的顺序是不影响分类结果的</strong>，但这就会导致“今天心情很好，但昨天不好”和“昨天心情很好，但今天不好”在朴素贝叶斯看来是一样的，要想获得更好的结果，我们必须<strong>考虑词语的顺序。</strong></p>\n<p>这些问题，今天我们就不再深究了，但你可以自己探索。比如，引入思路同样很简洁的马尔科夫链，我们就可以让计算机学会考虑词语间的顺序，不过那就会是另一个话题了。</p>\n","link":"https://flyhigher.top/develop/1989.html"},{"title":"MDx 中增强页面可访问性的细节","date":"2020-01-25 16:45:04","description":"\n<blockquote><p>这篇文章本来是打算发在 <a href=\"https://mdxblog.flyhigher.top/\">MDx Blog</a> 的，不过写到后来发现这篇文章相对来说还是有价值的，于是就将这篇文章转移到了无垠，MDx Blog 则不再发表这篇文章。</p></blockquote>\n<p>从 MDx 开发之初，增强页面的可访问性就被列为了一个重要目标。从 HTML 语义化，到 ARIA 地标，再到 <code>prefers-reduced-motion</code>，随着浏览器对于增强页面可访问性的支持功能越来越多，MDx 也在不断地更新，让更多的人都能毫无困难地浏览、查看由 MDx 渲染的网页。本文会详细说明一些 MDx 中增强页面可访问性的细节，<strong>如果你希望增强自己开发的网页的可访问性，本文可能会对你有所帮助。</strong></p>\n<h1>基础性增强</h1>\n<p>增强可访问性，最重要也是最基础的一点就是 HTML 语义化。通过使用 HTML 5 语义化标签和 ARIA Role 标签，我们可以很方便地<strong>将整个网页在语义上分为几部分，而这将有效地改善屏幕阅读器对网页的分析质量，使视力障碍用户更好地浏览网页。</strong></p>\n<h2>HTML 语义化</h2>\n<p><strong>HTML 语义化属于增强页面可访问性的基础中的基础。</strong>通过使用语义化的 HTML 标签，我们可以方便地为网页中的各部分标记功能而不影响页面样式。随着符合 HTML 5 的现代化网页成为主流，语义化标签已被很大一部分网站所支持，我也不过多赘述了。就举几个常用的“地标性”标签吧：</p>\n<ul>\n<li>\n<code>header</code> 标签标记页眉，默认样式同 <code>div</code>，不要把它和 <code>head</code> 搞混了</li>\n<li>\n<code>main</code> 标签标记页面的主要内容，默认样式同 <code>div</code>\n</li>\n<li>\n<code>article</code> 标签标记文章（在 HTML 5 中它指任何独立或可复用的文本），默认样式同 <code>div</code>\n</li>\n<li>\n<code>footer</code> 标签标记页脚，默认样式同 <code>div</code>\n</li>\n<li>\n<code>nav</code> 标签标记页面导航栏区域，默认样式同 <code>div</code>\n</li>\n<li>\n<code>aside</code> 标签标记侧栏，默认样式同 <code>div</code>\n</li>\n<li>\n<code>section</code> 标签标记“一组内容”，你可以把它看作是划定网页中一块区域的通用标签，默认样式同 <code>div</code>\n</li>\n</ul>\n<p>只要用这些标签替代 <code>div</code> 而不是无脑使用 <code>div</code> 就能提高页面的可访问性。MDx 使用了这些标签来增强页面的可访问性。</p>\n<h2>下一步，ARIA</h2>\n<p>有的时候，出于一些原因，我们没法使用语义化的 HTML 标签，或者没有合适的语义化标签来标记内容，这时候<strong>我们就需要使用 ARIA (Accessible Rich Internet Applications，可访问的富互联网应用)。</strong>ARIA 的基础用法很简单，只要在相应元素上加上 <code>role</code> 属性指定该元素的功能即可。下面是一个简单的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;div role=\"navigation\"&gt;\r\n  &lt;ul&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page A&lt;/a&gt;&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page B&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page C&lt;/a&gt;&lt;/li&gt;\r\n  &lt;/ul&gt;\r\n&lt;/div&gt;</pre>\n<p>通过 <code>role=\"navigation\"</code>，我们把一个 <code>div</code> 标记为了导航栏区域。实际上，对屏幕阅读器来说，这和 <code>nav</code> 标签在语义上是一致的。上一节中的例子都可以分别用以下 ARIA Role 表示：</p>\n<ul>\n<li><code>role=\"heading\"</code></li>\n<li><code>role=\"main\"</code></li>\n<li><code>role=\"article\"</code></li>\n<li><code>role=\"contentinfo\"</code></li>\n<li><code>role=\"navigation\"</code></li>\n<li><code>role=\"complementary\"</code></li>\n<li><code>role=\"region\"</code></li>\n</ul>\n<p>除此以外，MDx 还使用了 <code>role=\"banner\"</code> 和 <code>role=\"search\"</code> 来分别标记页面中的顶部栏和搜索表单。另外，<strong>有的时候 <code>role</code> 属性还需配合 <code>aria-*</code> 属性一同使用</strong>，具体规则比较复杂，我就不在这里赘述了，具体可参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">WAI-ARIA Roles - MDN</a>。</p>\n<h1>媒体查询来帮忙</h1>\n<p>CSS 的媒体查询其实是一个非常强大的特性，<strong>妥善利用其中的一些特性，我们可以在网页外观上大大增强网页的可访问性。</strong>除了已经烂大街的“对浏览器窗口大小”响应的媒体查询，我会介绍 3 个很少有网站充分利用的媒体查询。</p>\n<h2>print</h2>\n<p><code>print</code> 媒体查询其实已经“历史悠久”了，<strong>只要使用 <code>@media print {...}</code> 就可以创建只在打印页面时生效的样式。</strong>通过这种方式，我们可以让页面在打印时应用一套为打印优化的样式，增强页面在物理纸张上的可访问性。</p>\n<blockquote><p>维基百科是对打印样式做了单独适配的著名例子。</p></blockquote>\n<p><strong>由于在打印的情况下，页面已经离开了“可交互”的范围，还有分页这种在屏幕中无需考虑的问题，要让页面在物理纸张上仍能被轻松地阅读，我们需要做一些特殊的适配。</strong>直接来看一个例子吧。以下是 MDx 针对打印情况进行的一些特殊优化，样式的具体理由已经写在了注释中。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media print {\r\n    /*隐藏不必要的元素*/\r\n    header, .mdx-ad-after-article, .mdx-ad-in-article, .mdx-post-money, .page-footer-nav, .mdx-same-posts, .spanout button, .mdui-drawer, .mdui-overlay, .mdui-menu, .mdx-share-img-dialog, .mdx-share-wechat-dialog {\r\n        display: none!important;\r\n    }\r\n\r\n    /*使用下划线标记链接*/\r\n    article a {\r\n        text-decoration: underline!important;\r\n    }\r\n    /*由于纸张不可交互，在链接后显示链接到的 URL*/\r\n    article a::after {\r\n        content: \"(\" attr(href) \")\";\r\n    }\r\n\r\n    /*强制白底黑字*/\r\n    html &gt; body {\r\n        background-color: white!important;\r\n    }\r\n    article p {\r\n        color: rgba(0,0,0,.8)!important;\r\n    }\r\n\r\n    /*对于纸张上的长文章，衬线字体拥有更好的可读性。以下字体列表来自 fonts.css*/\r\n    article {\r\n        font: 13pt Georgia, \"Nimbus Roman No9 L\", \"Songti SC\", \"Noto Serif CJK SC\", \"Source Han Serif SC\", \"Source Han Serif CN\", STSong, \"AR PL New Sung\", \"AR PL SungtiL GB\", NSimSun, SimSun, \"TW\\-Sung\", \"WenQuanYi Bitmap Song\", \"AR PL UMing CN\", \"AR PL UMing HK\", \"AR PL UMing TW\", \"AR PL UMing TW MBE\", PMingLiU, MingLiU, serif!important;\r\n    }\r\n\r\n    /*除部分元素外，禁止在元素内部分页*/\r\n    * {\r\n        page-break-inside: avoid;\r\n    }\r\n    article p, article a, #comments, article {\r\n        page-break-inside: auto;\r\n    }\r\n}</pre>\n<p>MDx 自 1.9.3 版本起已经包含了对文章页的打印样式优化。可以很容易地看出，优化后的样式在物理纸张上将更容易阅读。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\" alt=\"\" width=\"1345\" height=\"1602\" class=\"aligncenter size-full wp-image-1959\"></a>\n<h2>prefers-color-scheme</h2>\n<p><code>prefers-color-scheme</code> 是最近才被浏览器广泛支持的一个媒体查询，但它的功能却很强大：<strong>响应系统级黑暗模式。</strong>这样，我们可以在开启黑暗模式的系统中让网页具有更好的可读性。不过由于这个媒体查询直到最近才被广泛支持，因此大部分网站对此并没有进行适配。</p>\n<blockquote><p>一些适配这一特性的网站：少数派、微信公众平台（文章页）等。</p></blockquote>\n<p>通过像这样的媒体查询，我们可以在系统启用黑暗模式时让页面实时响应：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    body {\r\n        background-color: #212121;\r\n        color: rgba(255, 255, 255, .7);\r\n    }\r\n}</pre>\n<p><code>prefers-color-scheme</code> 一共有 3 个可能值：<code>no-preference</code>, <code>light</code> 和 <code>dark</code>。你也可以不像上面的例子那样默认使用亮色样式并在黑暗模式下启用黑暗样式，而可以反过来将黑暗样式作为默认，用亮色样式覆盖。在不支持的浏览器上将会显示默认样式（即媒体查询不会生效）。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<h2>prefers-reduced-motion</h2>\n<p>看名字就猜得出，<code>prefers-reduced-motion</code> 是和 <code>prefers-color-scheme</code> 师出同门的媒体查询。因此，和 <code>prefers-color-scheme</code> 一样，它也是在最近才获得了浏览器的广泛支持。它的作用也很强大：<strong>响应系统的“减弱动态效果”模式。</strong>这对某些不喜欢甚至无法接受动画的用户可能很有帮助。要知道，对有些用户来说这甚至是医疗上的必要。使用如下的媒体查询，我们可以在系统启用减弱动态效果模式时让页面实时响应，减弱动画：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-reduced-motion: reduce) {\r\n    /*只是一个示例，实际情况中可以保留一些淡入淡出效果*/\r\n    * {\r\n        transition: all 0s!important;\r\n        transform: none!important;\r\n    }\r\n}</pre>\n<p><code>prefers-reduced-motion</code> 只有 2 个可能值：<code>no-preference</code> 和 <code>reduce</code>，在不支持的浏览器上该媒体查询不会生效。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\" alt=\"\" width=\"792\" height=\"515\" class=\"aligncenter size-full wp-image-1962\"></a>\n<h1>黑暗模式适配</h1>\n<p>黑暗模式可不是简单地切换到黑底白字这么简单。<strong>单纯地使用黑底白字会导致页面元素之间对比度过高，文字刺眼，反而降低了页面的可访问性。</strong>我在下面总结了几条应用在了 MDx 中的黑暗模式优化规则和 Google 推荐的优化规则：</p>\n<p><strong>一是避免黑底白字。</strong>黑底白字看起来真的很难受，事实上，深灰和浅灰是黑暗模式最好的配色。比较下方例子里的两段文本，毫无疑问深灰色背景和浅灰色文字搭配的样式的可读性要比黑底白字高很多。（p.s. 有时候这条规则在白底黑字时也适用）</p>\n<p><strong>二是更改部分元素的亮度和对比度以增强可读性。</strong>你可能已经注意到了，下面优化的例子里标题文字的颜色改变了。很明显，未优化的黑暗模式中标题可读性不如优化的版本。在实际中，我们通常可以通过 CSS 滤镜来实现这一更改。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    h1 {\r\n        /*反相颜色后再将色相旋转 180 度，使亮度反相*/\r\n        filter: invert(1) hue-rotate(180deg);\r\n    }\r\n}</pre>\n<p><strong>三是避免让图片过亮。</strong>未经处理的图片通常会导致过高的对比度，降低可读性。在 MDx 中，我选择降低图片的亮度来避免图片刺眼，而 Google 的建议则是使图片灰度，不过这会影响图片的整体观感。无论是哪一种方案，都可以使用 CSS 滤镜来轻松实现。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    img { \r\n        /*MDx 方案*/\r\n        filter: brightness(.8);\r\n        /*Google 方案*/\r\n        filter: grayscale(.5);\r\n    }\r\n}</pre>\n<div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是未优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是经过优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n</div>\n<h1>其他细节</h1>\n<p>还有一些细节，虽然简单，但不可或缺。我把一部分没有在上文提到的 MDx 中的细节列在了这里。</p>\n<p><strong>一是允许页面缩放。</strong>在开发响应式页面时，很多网站会在页面头部添加这样一个 <code>meta</code>：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"&gt;</pre>\n<p>这样的 <code>meta</code> 设定了页面的宽度，却也固定了页面的缩放比例，用户难以手动放大网页。<strong>这样的设置对一部分视力障碍用户非常不友好</strong>，以至于苹果决定在自家的浏览器上忽略禁止缩放的 <code>meta</code>。按照 Google 的推荐，如果你在 MDx 设置中启用了“允许页面缩放”，那么 MDx 会输出这样的 <code>meta</code> 标签，允许页面进行五倍以内的缩放：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=5\"&gt;</pre>\n<p><strong>尽管很多时候放大页面会导致页面结构被破坏，但这大大增强了页面的可访问性，利大于弊。</strong>因此，在 MDx 中，“允许页面缩放”是默认启用的。</p>\n<p><strong>二是在跨设备阅读时同步阅读记录。</strong>这属于 MDx 的“元老级”功能之一。注意到页面右上角的那个“在其他设备上继续阅读”的按钮了吗？如果你滚动页面后重新点击它，你会发现二维码发生变化了。通过在二维码中记录阅读进度，用户在扫描二维码切换设备阅读时，MDx 在新设备上会自动滚动到和原设备上一致的位置——好吧，目前基于百分比的算法在某些情况下可能不太准，但我已经设计了一个更复杂但更精确的阅读进度记录算法，之后就会更新到 MDx 中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\" alt=\"\" width=\"1000\" height=\"574\" class=\"aligncenter size-full wp-image-1976\"></a>\n<p><strong>三是避免 Web 字体阻塞渲染。</strong>如果你在页面中使用了 Web 字体，在字体加载完成之前，浏览器可能不会渲染任何文本，这就导致用户可能需要等待一段时间才能开始浏览网页。Google 推荐使用 <code>font-display: swap;</code> 来向浏览器指定网页的 Web 字体渲染策略。这一规则会提供一个比较短的等待周期，如果在这段时间内 Web 字体没有完成加载，那么浏览器会以 fallback 字体渲染文本。任意时刻一旦 Web 字体完成渲染，浏览器就会使用 Web 字体重新渲染文本。这在大多数情况下都能满足可访问性的需求。</p>\n<p><strong>四是确保 html 元素具有合适的 <code>lang</code> 属性。</strong>这一属性声明了页面的主要语言，浏览器可以据此调整渲染策略，或者触发自动翻译；屏幕阅读器也能更好地阅读网页。</p>\n<p><strong>五是确保页面主要内容在丢失/禁用了 Javascript 甚至 CSS 的情况下仍然可用。</strong>作为一个以内容为主的网站，MDx 在禁用了 Javascript 的情况下页面主要内容仍然可用。这不只是为了 SEO，更是为了保证页面的可访问性。的确，目前的情况下，如果开启了 Lazyload，MDx 在禁用 Javascript 的情况下图片的确无法显示，但我会在后续版本中尽可能的优化这一问题。</p>\n<h1>附录：媒体查询开发技巧</h1>\n<p>有的时候，光有 CSS 响应媒体查询还不够，我们可能需要在 Javascript 中实时响应媒体查询。用如下代码就可以很简单地响应媒体查询：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">let mql = window.matchMedia(\"(prefers-reduced-motion: reduce)\");\r\nmql.addListener(handleMediaChange);\r\n\r\n//在添加监听后先调用一次，获得当前查询结果\r\nhandleMediaChange(mql);\r\n\r\nfunction handleMediaChange(mql){\r\n    if(mql.matches){\r\n        //查询匹配\r\n    }else{\r\n        //查询不匹配\r\n    }\r\n}</pre>\n<p>在开发上述媒体查询的过程中，我们需要频繁地切换系统的相应模式或者调出打印窗口。<strong>实际上，Chrome 提供了更简单的调试方法：</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1946\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\" alt=\"\" width=\"723\" height=\"681\"></a>\n<p>只要在这里更改模式，相关媒体查询就能实时生效。这不会影响其他标签页，在关闭开发者工具之后也会自动恢复系统设置。</p>\n","link":"https://flyhigher.top/develop/1912.html"},{"title":"MDx Blog 现已随 MDx 1.9.5 发布","date":"2020-01-22 17:54:11","description":"<p>随着 MDx 发布 1.9.5 更新，<a href=\"https://mdxblog.flyhigher.top/\" rel=\"noopener noreferrer\" target=\"_blank\">MDx Blog</a> 现已建立。我将会在 MDx Blog 中分享一些开发故事并发布 MDx 更新日志。</p>","link":"https://flyhigher.top/diary/1905.html"},{"title":"GitHub 2019 统计无垠版","date":"2020-01-12 13:02:00","description":"\n<h1>缘起</h1>\n<p>2019 年底，我突发奇想想要自己统计一番 GitHub 上存储库的一些信息。尽管 GitHub 有自己的<a href=\"https://octoverse.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">年度统计</a>，我还是想试着自己爬取一下，说不定能挖出什么有意思的信息，何况这是我第一次有机会处理比较大量的数据，也算是一种学习的过程吧。于是花了一下午写了个简单的爬虫（时间都花在增加 Rate Limit 上了...），然后扔在了两台服务器上开始跑（GitHub  API 真是好文明）。</p>\n<p>从 2019.11.21 3 时到 2020.1.12 24 时的 52 天 21 小时内，我的爬虫一共爬取了<strong>与 2,024,705 个用户有关<sup>*</sup>的 14,651,923 个公共存储库的基础信息</strong>，平均每秒爬取 3.2 个存储库。据 GitHub 的官方数据计算，我爬取了大约 15% 的存储库信息，但由于封禁库和私有库的数量未知，我暂时无法确定我爬取的存储库占公共库的比例。同时由于存储库数量较多，基本可以认为爬取到的样本在时间尺度上已经足够随机，可以通过统计得出一般结论。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\" alt=\"\" width=\"700\" height=\"606\" class=\"aligncenter size-full wp-image-1892\"></a>\n<p>爬到自己了，合影.jpg</p>\n<p>那么下面就来看看统计出来的一些结果吧。爬虫的技术细节和数据集下载放在文末。</p>\n<p>* 指这些用户拥有至少一个库</p>\n<h1>统计信息</h1>\n<p><strong>以下统计结果均基于已放于文末的数据集。</strong>由于爬虫爬取的时间跨度长，加上我并没有完整爬取 GitHub 所有存储库，因此我<strong>不能保证以下统计结果符合真实情况</strong>，各位可以下载数据集或自行爬取进行验证。</p>\n<h2>一些数据</h2>\n<div>\n<div>\n<div>\n<span>3,120,930</span><br>总爬取用户数</div>\n<div>\n<span>44.7%</span><br>的存储库创建<br>自 Fork</div>\n<div>\n<span>6.59%</span><br>的账户被删除或<br>封禁<sup>1</sup>\n</div>\n<div>\n<span>23,913</span><br>单用户拥有最大<br>库数量<sup>2</sup>\n</div>\n</div>\n</div>\n<p><sup>1</sup> 基于用户 ID 规律合理推断<br><sup>2</sup> 统计范围仅限于当前数据集</p>\n<p>比较出乎我意料的是创建自 Fork 的存储库的占比。我预估这样的存储库占比不会太低，但没有想到能接近一半。此外单用户拥有最大库数量也大大超出了我的预期，<a href=\"https://github.com/pombredanne\" rel=\"noopener noreferrer\" target=\"_blank\">pombredanne</a> 这个用户名下拥有将近 24k 的存储库，不过绝大多数都是 Fork 来的，在情理之中。此外<strong>这个数据集中</strong>拥有最多存储库的账户其实是一个组织 <a href=\"https://github.com/gitpan\" rel=\"noopener noreferrer\" target=\"_blank\">gitpan</a>，这个组织拥有 36,377 个存储库。</p>\n<h2>语言</h2>\n<p><canvas></canvas><br>\n首先必须要说明的是，在这个榜单中我<strong>排除了 HTML 和 CSS</strong>，因为在严格意义上它们不属于“编程语言”。如果把它们计算进来的话，分别有 640,368 个和 361,425 个存储库的主要语言分别是 HTML 和 CSS，这样在这份榜单中它们可以排到第 6 和 第 10 名。JavaScript 毫无疑问获得第一，第二名 Python 的热度则和 JavaScript 相差将近一半。<strong>此外还有 2,448,486 个存储库未能识别出语言，占比 16.7%。</strong>在上面的榜单之外，与机器学习和数据科学相关的语言还有 Jupyter Notebook 排名第 13，R 排名 20，Julia 排名 43。</p>\n<p>说实话这份排名和 GitHub 官方的排名<strong>差别很大</strong>，除了前三名，后面的基本都不太一样。我的排名统计结果完全基于 GitHub 对于存储库的主要语言识别，加上我的存储库数据不完整，和官方的数据不同是很正常的，可以做一个参考，但大概率还是官方排名更加准确。</p>\n<h2>许可证</h2>\n<p><canvas></canvas></p>\n<p>自 GitHub 推出许可证功能以来，拥有许可证的存储库比例升升降降，却始终没有超过一半。<strong>选择一个合适的许可证对项目的良好发展真的很有帮助</strong>，要了解如何选择合适的许可证，请参阅<a href=\"https://www.runoob.com/w3cnote/open-source-license.html\" rel=\"noopener noreferrer\" target=\"_blank\">这篇文章</a>。</p>\n<p><canvas></canvas></p>\n<p>对于拥有许可证的存储库，MIT<del> 麻省理工许可证 </del>总是占比最大的；第二则是 Apache-2.0 许可证。此外，WTFPL 许可证也挤入了前 15 名。</p>\n<h2>星标</h2>\n<p><canvas></canvas><br>\nStar 数量毫无疑问是一个存储库受欢迎程度的体现，而 Star 数高的项目基本上大家都了解过。<strong>截至爬取结束时间</strong>，GitHub 中 Star 数最多的库是 <a href=\"https://github.com/freeCodeCamp/freeCodeCamp\" rel=\"noopener noreferrer\" target=\"_blank\">freeCodeCamp</a> <del>非常完美的驼峰命名法</del>，其次则是著名项目 <a href=\"https://github.com/996icu/996.ICU\" rel=\"noopener noreferrer\" target=\"_blank\">996.ICU</a>。<a href=\"https://github.com/vuejs/vue\" rel=\"noopener noreferrer\" target=\"_blank\">Vue</a> 现在的 Star 数已经稳压 <a href=\"https://github.com/facebook/react\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> 一头，Vue YES! 此外 <a href=\"https://github.com/sindresorhus/awesome\" rel=\"noopener noreferrer\" target=\"_blank\">awesome</a> 也挤进第七名。<br><canvas></canvas><br>\n由于 Star 需要时间积累，新项目的 Star 数量很可能是比不过老项目的，这就会导致有实力的新项目无法出现在榜单中。因此我还统计了日均 Star 数，试图通过日均 Star 数来反映项目受欢迎的程度。<strong>由于正热门的项目会比老牌热门项目有优势，这一项的统计范围是 2020-01-01 之前的所有存储库。</strong>996.ICU 和 freeCodeCamp 再次出现在前 10 名，而最近的热门项目 <a href=\"https://github.com/wenyan-lang/wenyan\" rel=\"noopener noreferrer\" target=\"_blank\">wenyan</a> 则飙升至第 2 名。此外还有 <a href=\"https://github.com/menzi11/BullshitGenerator\" rel=\"noopener noreferrer\" target=\"_blank\">BullshitGenerator</a>，即最近热门的“狗屁不通文章生成器”和 <a href=\"https://github.com/evil-huawei/evil-huawei\" rel=\"noopener noreferrer\" target=\"_blank\">evil-huawei</a> 分列第 3 和第 5 名。<br><canvas></canvas><br>\n说实话这个曲线<strong>比我预估的陡多了。</strong>你可能已经注意到了，这个图表的横轴不是均匀缩放的，实际上曲线要比看起来陡很多。同时受爬取方式的影响，GitHub 中 Star 数较少的存储库数量远比我爬取到的多。也就是说，<strong>实际情况下曲线远比这个图表上的陡。</strong>拿点 Star 不容易啊。</p>\n<h2>名称</h2>\n<p><canvas></canvas><br>\n终于知道了原来存储库的名称是有长度限制的...尽管最长有 100 位，<strong>大部分人还是喜欢 8 位长的存储库名。</strong>此外 1 位长的名称也比我预估的要多一些。举几个存储库名称长度为 100 的例子吧。</p>\n<ul>\n<li>testing-something-elsetesting-something-elsetesting-something-elsetesting-something-elsetesting-some</li>\n<li>acts_as_validated_config_so_app_will_not_run_in_random_situation_and_qa_gays_will_not_cry_to_you_whe</li>\n<li>............................................________-....................................-.---......</li>\n<li>----------------------------------------------------------------------------------------------------</li>\n<li>nyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyan</li>\n</ul>\n<p>...创造力有够丰富的。</p>\n<p><canvas></canvas></p>\n<p>最近 GitHub 上有一种奇怪的风气，那就是建立 Awesome 合集<del>骗 Star</del>。看起来 Awesome 存储库满地都是，甚至还出现了关于 Awesome 的 Awesome 合集这种迷惑行为。于是我统计了一下，<del>还好，</del>占比<del>才</del> 0.5% 不到<del>，Awesomer 们任重而道远呐</del>。</p>\n<p><canvas></canvas></p>\n<p>尽管要在 github.io 上托管网站，存储库不一定要以 .github.io 结尾，但我还是统计了一下。拥有这类存储库的用户比我预想的要少一些，看来还有很多人没有完全发挥 GitHub 的完整实力啊<del>（比如我 Doge）</del>。同时<strong>这类存储库在所有存储库中占比 1.12%</strong>，看起来不多<del>，不过至少比 Awesome 多</del>。<br><canvas></canvas><br>\n看得出来 GitHub 对于用户名长度的限制是 1-40 位。用户名最短的 27 位占据了 <code>A-Z</code> 外加 <code>-</code> 的所有可能，而用户名最长的则是一个组织 <a href=\"https://github.com/UOIT-RESEARCH-database-information-group\" rel=\"noopener noreferrer\" target=\"_blank\">UOIT-RESEARCH-database-information-group</a>。不知道是巧合还是某种规律，<strong>最受欢迎的用户名长度和存储库名称长度一样，都是 8</strong>，有点意思。</p>\n<h2>创建时间</h2>\n<p><canvas></canvas><br>\n由于我并没有完整爬取所有存储库，我只能以相对值来统计每月新增存储库数量的变化趋势。<strong>在这个图表中，我将 2017-09 的数据设为了 100%。</strong>你一定一眼就能注意到 2017 年 6,7,8 月的“一柱擎天”。<del datetime=\"2020-02-05T09:18:30+00:00\">我第一次看到这个数据的时候的确愣了一下，不过就着这条新闻看就能明白为什么了：<strong>2017 年 6 月微软收购 GitHub。</strong></del></p>\n<blockquote><p>重新确认了一下，微软收购 GitHub 比这个高峰晚了一年，目前我对这个高峰没有什么很好的解释，如果你有什么思路的话欢迎评论。</p></blockquote>\n<p><strong>需要注意的是这张图表中我排除了 Fork 存储库</strong>，因为 Fork 存储库在 API 中的创建时间是原始存储库的时间，会影响整体趋势。此外，GitHub 中还有一个创建于 2007 年 10 月 29 日的存储库，那就是 <code>id: 1</code> 的...</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"mojombo\" data-mdxgithubp=\"grit\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/mojombo/grit\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>而它的创建者正是 GitHub 的创始人之一 Tom Preston-Werner。</p>\n<h1>一些有趣的结果</h1>\n<p>当初打算自己爬的目的之一就是想看看能不能挖出什么有意思的信息，结果真的有一些不挖不知道的信息。</p>\n<h2>奇怪的存储库</h2>\n<p>在爬取到的所有存储库中，<strong>有 3 个存储库是“无主”的</strong>，即它们的 owner 属性为空。这三个存储库的基本信息如下。</p>\n<div class=\"mdui-table-fluid mdui-table-hoverable\"><table class=\"mdui-table\">\n<thead><tr>\n<th>ID</th>\n<th>名称</th>\n<th>Forked</th>\n<th>Star</th>\n<th>语言</th>\n<th>许可证</th>\n<th>创建于</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>72385291</td>\n<td>vscode-redprl</td>\n<td>否</td>\n<td>10</td>\n<td>TypeScript</td>\n<td>apache-2.0</td>\n<td>2016-10-31 08:50:01</td>\n</tr>\n<tr>\n<td>181218346</td>\n<td>electron-sys</td>\n<td>否</td>\n<td>10</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-14 03:20:56</td>\n</tr>\n<tr>\n<td>181391880</td>\n<td>node-sys</td>\n<td>否</td>\n<td>6</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-15 09:33:08</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong>更奇怪的是这三个存储库“无主”的情况还不一样。</strong>第一个存储库可以通过 <code>/repositories</code> 这个 GitHub API 找到， <a href=\"https://api.github.com/repositories?since=72385290\" target=\"_blank\" rel=\"noopener noreferrer\">这个链接</a>中的第一个存储库就是它；而其余两个存储库甚至无法在 <code>/repositories</code> API 中找到。不过就算能在 API 中找到第一个存储库，它的 <code>html_url</code>，即 <code>https://github.com//vscode-redprl</code> 仍然是不可访问的。这可能是 GitHub 早期的一个 Bug 导致的，不过我仍然对爬虫是如何找到这三个存储库的以及这些 Stars 是哪里来的感到好奇。</p>\n<h2>奇怪的用户名</h2>\n<p>在爬虫爬了一段时间以后，API 中突然开始出现大量的以 fdp 开头的 18 位乱码作为用户名的用户。这些用户拥有的存储库和 starred 的存储库都为 0，而他们的 <code>html_url</code> 为 404。以下是几个例子。</p>\n<ul>\n<li>fdpEpolGCEdQX4ZlRJ</li>\n<li>fdp8XaVrdtmDZnO5pR</li>\n<li>fdp8XRAGnwAOkTr2Ya</li>\n</ul>\n<p>由于我的爬虫并没有超过 Rate Limit，所以我排除了这是污染数据的可能。我怀疑这可能是某种 Bot 账户，于是一边更新爬虫过滤掉了这些用户，一边给 GitHub 支持发邮件问了具体情况。过了两天 GitHub 回复我说这些是<strong>被自动判为可疑进而被封禁的用户</strong>（原话是 they have been flagged by our automated measures for detecting suspicious behavior）。<del>想到我正在疯狂爬取 GitHub，突然害怕.webp</del></p>\n<p>行吧。</p>\n<h1>技术细节</h1>\n<p>爬虫使用 Python3 编写，数据库使用 MySQL。爬虫共使用了 4 个 API Token，在两台服务器上分布式爬取。爬取思路为：</p>\n<ol>\n<li>通过 <code>/users</code> API 遍历用户，每个请求最多获取 30 个用户信息</li>\n<li>循环 30 个用户，分别获取 <code>/users/&lt;user_name&gt;/starred</code> 和 <code>/users/&lt;user_name&gt;/repos</code> API 中的存储库信息，每个请求最多获取 100 个存储库信息，超过 100 个的分页获取</li>\n<li>提取存储库信息，插入数据库。对于已存在的存储库，更新数据</li>\n<li>获取下 30 个用户信息</li>\n</ol>\n<p>由于爬取过程中我多次调整了爬虫逻辑，爬虫爬取到的用户 ID 区间并非连续的，具体区间为1-839586, 14800001-14885493 及 28965251-31161101。</p>\n<h1>免责声明</h1>\n<p>本站会尽可能地提供准确信息，但本站不对此文章中信息的准确性和即时性及带来的任何影响负责。</p>\n<p>本站不代表 GitHub 官方，本文仅供学习之用，请不要将本文内容直接用于任何商业项目中。</p>\n<h1>数据集下载</h1>\n<p>导出的 SQL 文件大约为 1.38GB，全部放在了 GitHub 上（在危险的边缘试探.webp</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"github-analysis-2019\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/github-analysis-2019\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>此外我也提供了 MEGA 下载，链接<a href=\"https://mega.nz/#F!juxm3A6T!7Vwpzi82W1OFrqTLu1A1pQ\">在这里</a>。</p>\n","link":"https://flyhigher.top/develop/1564.html"},{"title":"Milkice 跨年红包解谜 Writeup 及无垠跨年红包解谜答案","date":"2020-01-02 04:29:19","description":"\n<blockquote><p><del>又到了水文章的时间呢</del></p></blockquote>\n<p>先说明一下，这篇文章原本不是在计划中的，而原来说好的「在路上的两篇」文章<del>绝对不会咕</del>。我自己的红包答案本来打算直接塞在年度总结里的，结果发现稍微有些长，再加上我还花了一些时间解了<a href=\"https://milkice.me/\">奶冰</a>的红包解谜游戏，就打算把两个解谜过程放在一起单独写一篇文章。<del>真是个水文章的好理由</del>（被打死</p>\n<h1>奶<del> 子 </del>冰的红包</h1>\n<p>奶冰的红包题目比我的难多了，所以让我们先从难的开始吧。首先看一下<a href=\"https://milkice.me/2019/12/31/2019-summary/\">题目</a>：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1524\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\" alt=\"\" width=\"746\" height=\"410\"></a>\n<p>入口是 <code>happy.2020.milkice.me</code>，扔到浏览器里面表示找不到 IP，那么大概率就是 DNS 的 TXT 记录了，查一下得到 <code>nb2hi4dthixs63ljnrvwsy3ffzwwkl3tivrvezluomxxg5dsmvqw2ltqmnqxa3th</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1525\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\" alt=\"\" width=\"896\" height=\"278\"></a>\n<p>第一眼没看出来是什么编码，直觉是 BaseXX 系列的编码，加上提示“不只有 Base64”，可以推断出是 Base32，转大写解码得到 <code>https://milkice.me/sEcRets/stream.pcapng</code>。是个 URL，下载得到一个 Wireshark 文件，打开一看是和某 USB 设备的通讯抓包。<del>不会做，不做了。</del></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1526\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\" alt=\"\" width=\"1500\" height=\"813\"></a>\n<p>奶冰提示我“Google 上搜得到”，结合第二条提示搜索“wacom pcapng”找到了<a href=\"https://blogs.tunelko.com/2017/02/05/bitsctf-tom-and-jerry-50-points/\">这篇文章</a>（<del>这™就是答案啊</del>）。看起来是一样的套路，即通过解析数据得到数位板上画的内容，于是按文章的思路筛选出数位板发给主机的数据，导出，然后再用 tshark 导出文本数据。本来我想直接用文章中的 POC 的，结果折腾半天因为源的蜜汁原因库没装上，于是按文章中给出的数据结构自己写了段代码，分别导出 X、Y 轴数据扔进 Excel 画散点图。（<del>别问我为什么用 Excel，因为我手边没有更好的工具了</del>）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1528\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\" alt=\"\" width=\"1280\" height=\"530\"></a>\n<p><span>翻车现场之一</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1539\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\" alt=\"\" width=\"1000\" height=\"286\"></a>\n<p><span>懵逼奶冰.webp</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1533\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\" alt=\"\" width=\"1500\" height=\"462\"></a>\n<p>看得出有手写文字，不过是上下颠倒的，翻转图片得 <code>https://milkice.me/2020/uso.zip</code>。是个 zip，下载打开一看，有密码。<del>不会解，不做了。</del> 第一反应是暴力解密码，但是暴力跑了 15 分钟还是没有跑出来。暴力太不优雅了，肯定不是正确思路，但奶冰什么都不肯说了。不过在这时我终于发现第一个红包口令码就藏在压缩包的注释中，Get。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1544\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\" alt=\"\" width=\"806\" height=\"593\"></a>\n<p>然而题还没解完，回去看提示，看到提供了 osu 谱面下载，于是打算不管怎么样先下载来看看。然而 osu 谱面下载要登录，只好又花了几分钟找到第三方站点，成功下载。这时候可以注意到 uso.zip 里有个同名文件（432314 Mike Greene - Bill Nye the Science Guy Theme Song (Chinese Intro).osz），可以联想到是明文攻击。好吧，上 ARCHPR，十秒解出。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1530\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\" alt=\"\" width=\"462\" height=\"643\"></a>\n<p><span>现场还原.jpg</span></p>\n<p>.osz 文件并不是明文，猜测是压缩包（和 .pptx 一个思路嘛），于是改后缀 .zip 顺利打开。然后红包口令码就藏在奶冰的 .osu 文件中了，由提示可知是明文，打开即可得到。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1542\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\" alt=\"\" width=\"457\" height=\"255\"></a>\n<h1>我的红包</h1>\n<p>相比起来<a href=\"https://flyhigher.top/diary/1464.html\">我的题目</a>就简单很多了嘛...三天时间一共发出了 25 个红包，包括一位重复领取的🌚，比前几年还是多了一些的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\" alt=\"\" width=\"500\" height=\"306\" class=\"aligncenter size-full wp-image-1554\"></a>\n<p><span>这位同学以后请不要多次领取🌚</span></p>\n<p>那么来看看答案吧。</p>\n<h2>第一阶段</h2>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>首先观察字符串，可以发现 <code>.</code> <code>/</code> <code>_</code> 等一些 ASCII 字符原样留在了字符串中，而其他字符被由 <code>=</code> 和十六进制构成的某种编码所替代。如果你正好有所了解，你应该能认出这是 Quoted-printable 编码，这是一种常用于邮件中的编码，可以用<a href=\"https://mothereff.in/quoted-printable\">这个页面</a>解码。如果你不了解，你也应该可以发现这种编码和 URL 编码非常相似。如果你把 <code>=</code> 替换为 <code>%</code>，那么你就可以用各种方法顺利地把它按 URL 编码来进行解码，最后可以得到 <code>αхtоn.іm/соdе_оf_2020_⒈mρз</code>。这个字符串里大部分字符都不是 ASCII 字符，只是长得像而已。根据第一个提示“全是 ASCII 字符”，按样子把字符串用 ASCII 字符抄一遍，可以得到最终 URL 为 <code>axton.im/code_of_2020_1.mp3</code>。</p>\n<h2>第二阶段</h2>\n<p>下载音频，可以听出音频是经过某种处理的白噪音。白噪音的特点是各频段的功率都均匀分布，在白噪音上做文章，很容易就可以联想到线索藏在频谱中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1534\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\" alt=\"\" width=\"1200\" height=\"719\"></a>\n<p>频谱被处理成了 24x3 的网格，结合第二条提示“24x3，横向读取”可以推断出是将频谱当作二进制读取，得到 <code>01111001 01110010 01100011 00101110 01101101 01100101 00101111 00110010 00110000</code>，转为 ASCII 字符可得 <code>yrc.me/20</code>。</p>\n<h2>第三阶段</h2>\n<p>打开上一步得到的页面，提示要求输入十位数密码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1536\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\" alt=\"\" width=\"663\" height=\"460\"></a>\n<p>如果你在上一步注意到了这个音频文件奇怪的属性，你可以反应过来这里的密码就是 <code>2000202020</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1537\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\" alt=\"\" width=\"421\" height=\"651\"></a>\n<p>如果你没有注意到，查看页面代码可以看到一条注释 <code>&lt;!-- Tips: the attribute of the audio --&gt;</code> 将你引导向音频文件的属性。输入密码，解锁即可进入下一步。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1535\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\" alt=\"\" width=\"397\" height=\"223\"></a>\n<h2>第四阶段</h2>\n<p>可以看到是一张图片，内容为“<del>.JPG</del>”和“.ZIP”。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-1532\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n<p>和去年一样的套路，下载图片，将后缀名改为 .zip 然后打开，可以看到 README.txt。</p>\n<h2>最后一步</h2>\n<p>查看 README.txt 的内容，可以了解到需要去 🤔.axton.cc 获取红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1538\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\" alt=\"\" width=\"1131\" height=\"278\"></a>\n<p>扔到浏览器里会出现奶冰同款找不到 IP，于是可以联想到 TXT 记录。唯一的问题是 🤔 这个 Emoji 需要如何处理。域名使用 Punycode 将 Unicode 字符转换为 ASCII 字符，特点是以 <code>xn--</code> 开头。如果你把上面这个域名扔进浏览器，你会发现它变成了 <code>xn--wp9h.axton.cc</code>。然后查询 TXT 记录，即可得到红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1527\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\" alt=\"\" width=\"804\" height=\"557\"></a>\n","link":"https://flyhigher.top/develop/1519.html"},{"title":"无垠 2019 年度总结","date":"2019-12-29 12:25:52","description":"\n<p>又是时间飞快的一年...写 2018 总结的情景似乎还在眼前，转眼居然已经到 2019 年末了。</p>\n<p>2019 年，发生了太多事情，包括真的转折了人生的高考，这也导致我博客更新的不多（难以置信居然才更了两篇...），不过两篇技术性文章已经在路上了，可以期待一下。</p>\n<p>2019 年我也学了不少东西（单指技术方面），比如终于认真学了 Vue（但是还要练手）。书买了一大堆，看完的倒是没几本orz</p>\n<p>呼，好吧，是时候回顾一下充满坎坷的这一年了。2019 年还剩下最后两天，希望 2020 年，我能做得更好。</p>\n<h1>一些数据</h1>\n<p>照惯例先来看看一些数据吧。今年是统计系统完整统计了的第二年，终于可以和去年的数据比较一下了。以下数据的统计范围是 2019年1月1日0时至 2019年12月29日20时。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 26,901 (<span>+4%</span>)，年 PV 76,583 (<span>+3%</span>)，日均 UV 73.7，平均停留时间 5分13秒 (<span>-13.8%</span>)，平均跳出率 53% (<span>+20.5%</span>)。一年有效文章数 2 (<span>-50%</span>)，新增评论 439 条。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\" alt=\"\" width=\"1000\" height=\"1143\" class=\"aligncenter size-full wp-image-1511\"></a>\n<p>有趣的是今年文章数腰斩，访问数反而小有提升。<del>如果我哪天不更新了，访问数是不是可以无限大呢？</del></p>\n<p>今年博客最大的改动就是把整体风格切换到了 Material Design 2（当然这是 <a href=\"https://flyhigher.top/develop/788.html\">MDx</a> 中的可选功能，给自己打个广告2333），此外还有比较失败的 WebP 改造计划，因为和缓存冲突已经回滚了。<a href=\"https://flyhigher.top/develop/1245.html\">ABS 系统</a>进展不大，主要是真的没有太多时间，还是要再学习一个。</p>\n<h2>个人主页</h2>\n<p>虽然个人主页的 TODO List 列了老长，但今年完全没有更新，也没有推广，从今年 8 月底开始还莫名被某墙认证了，直到 11 月底才恢复，于是今年总访问量比去年少了很多，</p>\n<p>有多少呢？这么少：总 UV 2,141 (<span>-65.9%</span>)，总 PV 2,744 (<span>-66.6%</span>)，日均 UV 6 (<span>-65.9%</span>)，平均停留时间 62秒 (<span>+19.2%</span>)。主要来源是知乎和 V2EX，还有一些甚至是从微信来的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\" alt=\"\" width=\"1000\" height=\"1103\" class=\"aligncenter size-full wp-image-1512\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 8 次，新增 171 commits，2 种语言的翻译，Star 数增加了 175，现有 408。感谢所有人的支持，尤其是 <a href=\"https://github.com/Sn0bzy\" rel=\"noopener noreferrer\" target=\"_blank\">Hasan CAN</a>, <a href=\"https://github.com/yechs\" rel=\"noopener noreferrer\" target=\"_blank\">Ye Shu</a>, <a href=\"https://github.com/StarryLeo\" rel=\"noopener noreferrer\" target=\"_blank\">StarryLeo</a>, <a href=\"https://github.com/DCTewi\" rel=\"noopener noreferrer\" target=\"_blank\">冻葱Tewi</a>, <a href=\"https://github.com/syfxlin\" rel=\"noopener noreferrer\" target=\"_blank\">Otstar Lin</a> 等为 MDx 做出了不小贡献的你们。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：<a href=\"https://flyhigher.top/photograph/1309.html\">上手</a> DJI OSMO Pocket</li>\n<li>四月：最后一次参加浙江省普通高中学业水平考试</li>\n<li>五月：MDx 喜提 300 Stars</li>\n<li>六月：高考 <del>炸了，差亿点点上浙大</del>\n</li>\n<li>六月：入手了 Oneplus 7 Pro</li>\n<li>六月：和同学一起去成都重庆旅行</li>\n<li>六月：第一次近距离感受到地震</li>\n<li>六月：<a href=\"https://flyhigher.top/diary/1411.html\">入手</a>了一台雷蛇灵刃 15，目前是主力机</li>\n<li>七月：参与组织 THE Hack 2019 活动</li>\n<li>七月：面基了 <a href=\"https://itroy.cc/\" rel=\"noopener noreferrer\" target=\"_blank\">Tory</a>, Bie Shi 和 <a href=\"https://oxz.me/\" rel=\"noopener noreferrer\" target=\"_blank\">FHYunCai</a>\n</li>\n<li>八月：一个人去厦门武汉转了一圈，拍了自己的第一个 Vlog</li>\n<li>八月：入手了一个 Kindle Paperwhite 4，没有泡面可以压，于是用来看英文小说了</li>\n<li>八月：加入 TEDxNingbo 志愿者团队</li>\n<li>八月：和 Ralph 面基</li>\n<li>八月：入手了一个 Yubikey</li>\n<li>九月：人生第一次参加雅思考试 <del>7分，蛮开心的</del>\n</li>\n<li>十月：入手了一个 Samsung Galaxy Watch Active 2 <del>觉得不值</del>\n</li>\n<li>十一月：MDx 达到 400 Stars</li>\n<li>十一月：为 TEDxNingbo 设计开发的 H5 上线</li>\n<li>十一月：入手了第一台胶片相机，试图入坑胶片摄影</li>\n<li>十一月：参加 TEDxNingbo 2019 大会</li>\n<li>十二月：<del>我 Cytus II 入门了</del>\n</li>\n</ul>\n<h1>跨年红包</h1>\n<p>这算「传统习俗」了。和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2020年1月2日。</p>\n<p>今年的解谜旅程，从下面这个字符串开始。</p>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>由于今年的题目比以前稍微难了一些，所以今年的红包金额还是比较大的，而且不限量，尽你所能试一试吧。</p>\n<p>一点你可能用得上的提示：URL 里全是 ASCII 字符 / 24x3，横向读取。</p>\n<p><a href=\"https://flyhigher.top/develop/1519.html\">答案</a>已公布。</p>\n<h1>跨年海报</h1>\n<p>这算是另一个「传统习俗」（笑）。因为我有做跨年海报的习惯，所以以下就是今年份的海报啦。</p>\n<p>用了 C4D+PS，还有我的一整个下午。</p>\n<p>提前祝各位新年快乐！</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter wp-image-1467 size-large\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n","link":"https://flyhigher.top/diary/1464.html"}]